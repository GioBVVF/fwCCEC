
templateVuoto.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000992  00800100  00008bd6  00008c6a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00008bd6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000346  00800a92  00800a92  000095fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000095fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000962c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000012f8  00000000  00000000  00009670  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0003dc9d  00000000  00000000  0000a968  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000076b0  00000000  00000000  00048605  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000c686  00000000  00000000  0004fcb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00004310  00000000  00000000  0005c33c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000089ba  00000000  00000000  0006064c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001a057  00000000  00000000  00069006  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000013b8  00000000  00000000  0008305d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	63 c1       	rjmp	.+710    	; 0x2c8 <__dtors_end>
       2:	00 00       	nop
       4:	8b c1       	rjmp	.+790    	; 0x31c <__bad_interrupt>
       6:	00 00       	nop
       8:	89 c1       	rjmp	.+786    	; 0x31c <__bad_interrupt>
       a:	00 00       	nop
       c:	87 c1       	rjmp	.+782    	; 0x31c <__bad_interrupt>
       e:	00 00       	nop
      10:	0c 94 49 19 	jmp	0x3292	; 0x3292 <__vector_4>
      14:	83 c1       	rjmp	.+774    	; 0x31c <__bad_interrupt>
      16:	00 00       	nop
      18:	81 c1       	rjmp	.+770    	; 0x31c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	0c 94 a8 19 	jmp	0x3350	; 0x3350 <__vector_7>
      20:	7d c1       	rjmp	.+762    	; 0x31c <__bad_interrupt>
      22:	00 00       	nop
      24:	7b c1       	rjmp	.+758    	; 0x31c <__bad_interrupt>
      26:	00 00       	nop
      28:	79 c1       	rjmp	.+754    	; 0x31c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	77 c1       	rjmp	.+750    	; 0x31c <__bad_interrupt>
      2e:	00 00       	nop
      30:	75 c1       	rjmp	.+746    	; 0x31c <__bad_interrupt>
      32:	00 00       	nop
      34:	73 c1       	rjmp	.+742    	; 0x31c <__bad_interrupt>
      36:	00 00       	nop
      38:	71 c1       	rjmp	.+738    	; 0x31c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6f c1       	rjmp	.+734    	; 0x31c <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 0a 3a 	jmp	0x7414	; 0x7414 <__vector_16>
      44:	6b c1       	rjmp	.+726    	; 0x31c <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 f8 37 	jmp	0x6ff0	; 0x6ff0 <__vector_18>
      4c:	0c 94 2a 38 	jmp	0x7054	; 0x7054 <__vector_19>
      50:	65 c1       	rjmp	.+714    	; 0x31c <__bad_interrupt>
      52:	00 00       	nop
      54:	63 c1       	rjmp	.+710    	; 0x31c <__bad_interrupt>
      56:	00 00       	nop
      58:	61 c1       	rjmp	.+706    	; 0x31c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5f c1       	rjmp	.+702    	; 0x31c <__bad_interrupt>
      5e:	00 00       	nop
      60:	5d c1       	rjmp	.+698    	; 0x31c <__bad_interrupt>
      62:	00 00       	nop
      64:	5b c1       	rjmp	.+694    	; 0x31c <__bad_interrupt>
      66:	00 00       	nop
      68:	0c 94 45 34 	jmp	0x688a	; 0x688a <__vector_26>
      6c:	57 c1       	rjmp	.+686    	; 0x31c <__bad_interrupt>
      6e:	00 00       	nop
      70:	55 c1       	rjmp	.+682    	; 0x31c <__bad_interrupt>
      72:	00 00       	nop
      74:	53 c1       	rjmp	.+678    	; 0x31c <__bad_interrupt>
      76:	00 00       	nop
      78:	51 c1       	rjmp	.+674    	; 0x31c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4f c1       	rjmp	.+670    	; 0x31c <__bad_interrupt>
      7e:	00 00       	nop
      80:	4d c1       	rjmp	.+666    	; 0x31c <__bad_interrupt>
      82:	00 00       	nop
      84:	4b c1       	rjmp	.+662    	; 0x31c <__bad_interrupt>
      86:	00 00       	nop
      88:	49 c1       	rjmp	.+658    	; 0x31c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	42 0f       	add	r20, r18
      8e:	c8 0f       	add	r28, r24
      90:	ef 0f       	add	r30, r31
      92:	2d 10       	cpse	r2, r13
      94:	1c 11       	cpse	r17, r12
      96:	a8 11       	cpse	r26, r8
      98:	9e 12       	cpse	r9, r30
      9a:	fe 12       	cpse	r15, r30
      9c:	8e 13       	cpse	r24, r30
      9e:	f5 13       	cpse	r31, r21
      a0:	d3 14       	cp	r13, r3
      a2:	4b 15       	cp	r20, r11
      a4:	7b 16       	cp	r7, r27
      a6:	dc 22       	and	r13, r28
      a8:	f3 22       	and	r15, r19
      aa:	f3 22       	and	r15, r19
      ac:	f0 22       	and	r15, r16
      ae:	f3 22       	and	r15, r19
      b0:	da 22       	and	r13, r26
      b2:	f3 22       	and	r15, r19
      b4:	f3 22       	and	r15, r19
      b6:	f3 22       	and	r15, r19
      b8:	ce 22       	and	r12, r30
      ba:	f3 22       	and	r15, r19
      bc:	f3 22       	and	r15, r19
      be:	e3 22       	and	r14, r19
      c0:	ee 22       	and	r14, r30
      c2:	ec 22       	and	r14, r28
      c4:	f3 22       	and	r15, r19
      c6:	f3 22       	and	r15, r19
      c8:	f3 22       	and	r15, r19
      ca:	ea 22       	and	r14, r26

000000cc <__trampolines_end>:
      cc:	00 40       	sbci	r16, 0x00	; 0
      ce:	7a 10       	cpse	r7, r10
      d0:	f3 5a       	subi	r31, 0xA3	; 163
      d2:	00 a0       	ldd	r0, Z+32	; 0x20
      d4:	72 4e       	sbci	r23, 0xE2	; 226
      d6:	18 09       	sbc	r17, r8
      d8:	00 10       	cpse	r0, r0
      da:	a5 d4       	rcall	.+2378   	; 0xa26 <_Z14leggiTAG_Mezzob+0x62>
      dc:	e8 00       	.word	0x00e8	; ????
      de:	00 e8       	ldi	r16, 0x80	; 128
      e0:	76 48       	sbci	r23, 0x86	; 134
      e2:	17 00       	.word	0x0017	; ????
      e4:	00 e4       	ldi	r16, 0x40	; 64
      e6:	0b 54       	subi	r16, 0x4B	; 75
      e8:	02 00       	.word	0x0002	; ????
      ea:	00 ca       	rjmp	.-3072   	; 0xfffff4ec <__eeprom_end+0xff7ef4ec>
      ec:	9a 3b       	cpi	r25, 0xBA	; 186
      ee:	00 00       	nop
      f0:	00 e1       	ldi	r16, 0x10	; 16
      f2:	f5 05       	cpc	r31, r5
      f4:	00 00       	nop
      f6:	80 96       	adiw	r24, 0x20	; 32
      f8:	98 00       	.word	0x0098	; ????
      fa:	00 00       	nop
      fc:	40 42       	sbci	r20, 0x20	; 32
      fe:	0f 00       	.word	0x000f	; ????
     100:	00 00       	nop
     102:	a0 86       	std	Z+8, r10	; 0x08
     104:	01 00       	.word	0x0001	; ????
     106:	00 00       	nop
     108:	10 27       	eor	r17, r16
     10a:	00 00       	nop
     10c:	00 00       	nop
     10e:	e8 03       	fmulsu	r22, r16
     110:	00 00       	nop
     112:	00 00       	nop
     114:	64 00       	.word	0x0064	; ????
     116:	00 00       	nop
     118:	00 00       	nop
     11a:	0a 00       	.word	0x000a	; ????
     11c:	00 00       	nop
     11e:	00 00       	nop
     120:	01 00       	.word	0x0001	; ????
     122:	00 00       	nop
     124:	00 00       	nop
     126:	2c 76       	andi	r18, 0x6C	; 108
     128:	d8 88       	ldd	r13, Y+16	; 0x10
     12a:	dc 67       	ori	r29, 0x7C	; 124
     12c:	4f 08       	sbc	r4, r15
     12e:	23 df       	rcall	.-442    	; 0xffffff76 <__eeprom_end+0xff7eff76>
     130:	c1 df       	rcall	.-126    	; 0xb4 <__SREG__+0x75>
     132:	ae 59       	subi	r26, 0x9E	; 158
     134:	e1 b1       	in	r30, 0x01	; 1
     136:	b7 96       	adiw	r30, 0x27	; 39
     138:	e5 e3       	ldi	r30, 0x35	; 53
     13a:	e4 53       	subi	r30, 0x34	; 52
     13c:	c6 3a       	cpi	r28, 0xA6	; 166
     13e:	e6 51       	subi	r30, 0x16	; 22
     140:	99 76       	andi	r25, 0x69	; 105
     142:	96 e8       	ldi	r25, 0x86	; 134
     144:	e6 c2       	rjmp	.+1484   	; 0x712 <_Z10displayLCDP6Stringii+0x10>
     146:	84 26       	eor	r8, r20
     148:	eb 89       	ldd	r30, Y+19	; 0x13
     14a:	8c 9b       	sbis	0x11, 4	; 17
     14c:	62 ed       	ldi	r22, 0xD2	; 210
     14e:	40 7c       	andi	r20, 0xC0	; 192
     150:	6f fc       	.word	0xfc6f	; ????
     152:	ef bc       	out	0x2f, r14	; 47
     154:	9c 9f       	mul	r25, r28
     156:	40 f2       	brcs	.-112    	; 0xe8 <__trampolines_end+0x1c>
     158:	ba a5       	ldd	r27, Y+42	; 0x2a
     15a:	6f a5       	ldd	r22, Y+47	; 0x2f
     15c:	f4 90       	lpm	r15, Z
     15e:	05 5a       	subi	r16, 0xA5	; 165
     160:	2a f7       	brpl	.-54     	; 0x12c <__trampolines_end+0x60>
     162:	5c 93       	st	X, r21
     164:	6b 6c       	ori	r22, 0xCB	; 203
     166:	f9 67       	ori	r31, 0x79	; 121
     168:	6d c1       	rjmp	.+730    	; 0x444 <_Z8printTabh+0xa>
     16a:	1b fc       	.word	0xfc1b	; ????
     16c:	e0 e4       	ldi	r30, 0x40	; 64
     16e:	0d 47       	sbci	r16, 0x7D	; 125
     170:	fe f5       	brtc	.+126    	; 0x1f0 <_ZZ5setupE3__c+0xc>
     172:	20 e6       	ldi	r18, 0x60	; 96
     174:	b5 00       	.word	0x00b5	; ????
     176:	d0 ed       	ldi	r29, 0xD0	; 208
     178:	90 2e       	mov	r9, r16
     17a:	03 00       	.word	0x0003	; ????
     17c:	94 35       	cpi	r25, 0x54	; 84
     17e:	77 05       	cpc	r23, r7
     180:	00 80       	ld	r0, Z
     182:	84 1e       	adc	r8, r20
     184:	08 00       	.word	0x0008	; ????
     186:	00 20       	and	r0, r0
     188:	4e 0a       	sbc	r4, r30
     18a:	00 00       	nop
     18c:	00 c8       	rjmp	.-4096   	; 0xfffff18e <__eeprom_end+0xff7ef18e>
     18e:	0c 33       	cpi	r16, 0x3C	; 60
     190:	33 33       	cpi	r19, 0x33	; 51
     192:	33 0f       	add	r19, r19
     194:	98 6e       	ori	r25, 0xE8	; 232
     196:	12 83       	std	Z+2, r17	; 0x02
     198:	11 41       	sbci	r17, 0x11	; 17
     19a:	ef 8d       	ldd	r30, Y+31	; 0x1f
     19c:	21 14       	cp	r2, r1
     19e:	89 3b       	cpi	r24, 0xB9	; 185
     1a0:	e6 55       	subi	r30, 0x56	; 86
     1a2:	16 cf       	rjmp	.-468    	; 0xffffffd0 <__eeprom_end+0xff7effd0>
     1a4:	fe e6       	ldi	r31, 0x6E	; 110
     1a6:	db 18       	sub	r13, r11
     1a8:	d1 84       	ldd	r13, Z+9	; 0x09
     1aa:	4b 38       	cpi	r20, 0x8B	; 139
     1ac:	1b f7       	brvc	.-58     	; 0x174 <__trampolines_end+0xa8>
     1ae:	7c 1d       	adc	r23, r12
     1b0:	90 1d       	adc	r25, r0
     1b2:	a4 bb       	out	0x14, r26	; 20
     1b4:	e4 24       	eor	r14, r4
     1b6:	20 32       	cpi	r18, 0x20	; 32
     1b8:	84 72       	andi	r24, 0x24	; 36
     1ba:	5e 22       	and	r5, r30
     1bc:	81 00       	.word	0x0081	; ????
     1be:	c9 f1       	breq	.+114    	; 0x232 <_ZL11daysInMonth+0xa>
     1c0:	24 ec       	ldi	r18, 0xC4	; 196
     1c2:	a1 e5       	ldi	r26, 0x51	; 81
     1c4:	3d 27       	eor	r19, r29

000001c6 <_ZZ5setupE3__c_0>:
     1c6:	52 54 43 20 63 68 69 70 20 44 53 33 32 33 31 4d     RTC chip DS3231M
     1d6:	20 69 6e 69 74 69 61 6c 69 7a 65 64 2e 00            initialized..

000001e4 <_ZZ5setupE3__c>:
     1e4:	6e 6f 6e 20 74 72 6f 76 6f 20 6d 6f 64 75 6c 6f     non trovo modulo
     1f4:	20 52 54 43 20 44 53 33 32 33 31 4d 4d 2e 20 52      RTC DS3231MM. R
     204:	69 70 72 6f 76 6f 20 74 72 61 20 33 73 2e 00        iprovo tra 3s..

00000213 <_ZZN13DS3231M_Class6adjustEvE3__c>:
     213:	4a 75 6e 20 31 32 20 32 30 32 31 00                 Jun 12 2021.

0000021f <_ZZN13DS3231M_Class6adjustEvE3__c_0>:
     21f:	31 30 3a 30 33 3a 30 38 00                          10:03:08.

00000228 <_ZL11daysInMonth>:
     228:	1f 1c 1f 1e 1f 1e 1f 1f 1e 1f 1e 1f                 ............

00000234 <digital_pin_to_timer_PGM>:
     234:	00 00 00 00 04 03 08 07 00 00 02 00 09 0a 00 00     ................
	...
     250:	00 00 00 01                                         ....

00000254 <digital_pin_to_bit_mask_PGM>:
     254:	01 02 04 08 10 20 40 80 01 02 10 20 40 80 10 20     ..... @.... @.. 
     264:	40 80 10 08 20 04 40 80 01 02 04 08 01 02 04 08     @... .@.........

00000274 <digital_pin_to_port_PGM>:
     274:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 01 01     ................
     284:	01 01 03 03 03 03 03 03 01 01 01 01 03 03 02 02     ................

00000294 <port_to_input_PGM>:
     294:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

0000029e <port_to_output_PGM>:
     29e:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000002a8 <port_to_mode_PGM>:
     2a8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000002b2 <__ctors_start>:
     2b2:	27 1a       	sub	r2, r23
     2b4:	62 25       	eor	r22, r2
     2b6:	ba 25       	eor	r27, r10
     2b8:	b2 28       	or	r11, r2
     2ba:	99 2a       	or	r9, r25
     2bc:	a4 2a       	or	r10, r20
     2be:	76 2c       	mov	r7, r6
     2c0:	46 30       	cpi	r20, 0x06	; 6
     2c2:	d5 36       	cpi	r29, 0x65	; 101
     2c4:	58 38       	cpi	r21, 0x88	; 136

000002c6 <__ctors_end>:
     2c6:	45 1b       	sub	r20, r21

000002c8 <__dtors_end>:
     2c8:	11 24       	eor	r1, r1
     2ca:	1f be       	out	0x3f, r1	; 63
     2cc:	cf ef       	ldi	r28, 0xFF	; 255
     2ce:	d0 e4       	ldi	r29, 0x40	; 64
     2d0:	de bf       	out	0x3e, r29	; 62
     2d2:	cd bf       	out	0x3d, r28	; 61

000002d4 <__do_copy_data>:
     2d4:	1a e0       	ldi	r17, 0x0A	; 10
     2d6:	a0 e0       	ldi	r26, 0x00	; 0
     2d8:	b1 e0       	ldi	r27, 0x01	; 1
     2da:	e6 ed       	ldi	r30, 0xD6	; 214
     2dc:	fb e8       	ldi	r31, 0x8B	; 139
     2de:	00 e0       	ldi	r16, 0x00	; 0
     2e0:	0b bf       	out	0x3b, r16	; 59
     2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <__do_copy_data+0x14>
     2e4:	07 90       	elpm	r0, Z+
     2e6:	0d 92       	st	X+, r0
     2e8:	a2 39       	cpi	r26, 0x92	; 146
     2ea:	b1 07       	cpc	r27, r17
     2ec:	d9 f7       	brne	.-10     	; 0x2e4 <__do_copy_data+0x10>

000002ee <__do_clear_bss>:
     2ee:	2d e0       	ldi	r18, 0x0D	; 13
     2f0:	a2 e9       	ldi	r26, 0x92	; 146
     2f2:	ba e0       	ldi	r27, 0x0A	; 10
     2f4:	01 c0       	rjmp	.+2      	; 0x2f8 <.do_clear_bss_start>

000002f6 <.do_clear_bss_loop>:
     2f6:	1d 92       	st	X+, r1

000002f8 <.do_clear_bss_start>:
     2f8:	a8 3d       	cpi	r26, 0xD8	; 216
     2fa:	b2 07       	cpc	r27, r18
     2fc:	e1 f7       	brne	.-8      	; 0x2f6 <.do_clear_bss_loop>

000002fe <__do_global_ctors>:
     2fe:	11 e0       	ldi	r17, 0x01	; 1
     300:	c3 e6       	ldi	r28, 0x63	; 99
     302:	d1 e0       	ldi	r29, 0x01	; 1
     304:	04 c0       	rjmp	.+8      	; 0x30e <__do_global_ctors+0x10>
     306:	21 97       	sbiw	r28, 0x01	; 1
     308:	fe 01       	movw	r30, r28
     30a:	0e 94 3e 40 	call	0x807c	; 0x807c <__tablejump2__>
     30e:	c9 35       	cpi	r28, 0x59	; 89
     310:	d1 07       	cpc	r29, r17
     312:	c9 f7       	brne	.-14     	; 0x306 <__do_global_ctors+0x8>
     314:	0e 94 e4 38 	call	0x71c8	; 0x71c8 <main>
     318:	0c 94 df 45 	jmp	0x8bbe	; 0x8bbe <__do_global_dtors>

0000031c <__bad_interrupt>:
     31c:	71 ce       	rjmp	.-798    	; 0x0 <__vectors>

0000031e <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     31e:	80 e0       	ldi	r24, 0x00	; 0
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	08 95       	ret

00000324 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     324:	08 95       	ret

00000326 <_ZL10enable_ETHv>:
 Serial.println(" ");
 Serial.println(" ");
 Serial.print("Salvata nella EEPROM: ");
 Serial.println(Salvata);
 return Salvata;
}
     326:	44 98       	cbi	0x08, 4	; 8
     328:	08 95       	ret

0000032a <_ZL11disable_ETHv>:
     32a:	44 9a       	sbi	0x08, 4	; 8
     32c:	08 95       	ret

0000032e <_Z19InizializzaEthernetv>:
     32e:	ef 92       	push	r14
     330:	ff 92       	push	r15
     332:	0f 93       	push	r16
     334:	1f 93       	push	r17
     336:	cf 93       	push	r28
     338:	df 93       	push	r29
     33a:	cd b7       	in	r28, 0x3d	; 61
     33c:	de b7       	in	r29, 0x3e	; 62
     33e:	68 97       	sbiw	r28, 0x18	; 24
     340:	0f b6       	in	r0, 0x3f	; 63
     342:	f8 94       	cli
     344:	de bf       	out	0x3e, r29	; 62
     346:	0f be       	out	0x3f, r0	; 63
     348:	cd bf       	out	0x3d, r28	; 61
     34a:	82 e7       	ldi	r24, 0x72	; 114
     34c:	9a e0       	ldi	r25, 0x0A	; 10
     34e:	9a 83       	std	Y+2, r25	; 0x02
     350:	89 83       	std	Y+1, r24	; 0x01
     352:	40 91 db 0a 	lds	r20, 0x0ADB	; 0x800adb <subnet+0x2>
     356:	50 91 dc 0a 	lds	r21, 0x0ADC	; 0x800adc <subnet+0x3>
     35a:	60 91 dd 0a 	lds	r22, 0x0ADD	; 0x800add <subnet+0x4>
     35e:	70 91 de 0a 	lds	r23, 0x0ADE	; 0x800ade <subnet+0x5>
     362:	4b 83       	std	Y+3, r20	; 0x03
     364:	5c 83       	std	Y+4, r21	; 0x04
     366:	6d 83       	std	Y+5, r22	; 0x05
     368:	7e 83       	std	Y+6, r23	; 0x06
     36a:	98 87       	std	Y+8, r25	; 0x08
     36c:	8f 83       	std	Y+7, r24	; 0x07
     36e:	40 91 e1 0a 	lds	r20, 0x0AE1	; 0x800ae1 <gateway+0x2>
     372:	50 91 e2 0a 	lds	r21, 0x0AE2	; 0x800ae2 <gateway+0x3>
     376:	60 91 e3 0a 	lds	r22, 0x0AE3	; 0x800ae3 <gateway+0x4>
     37a:	70 91 e4 0a 	lds	r23, 0x0AE4	; 0x800ae4 <gateway+0x5>
     37e:	49 87       	std	Y+9, r20	; 0x09
     380:	5a 87       	std	Y+10, r21	; 0x0a
     382:	6b 87       	std	Y+11, r22	; 0x0b
     384:	7c 87       	std	Y+12, r23	; 0x0c
     386:	9e 87       	std	Y+14, r25	; 0x0e
     388:	8d 87       	std	Y+13, r24	; 0x0d
     38a:	40 91 e7 0a 	lds	r20, 0x0AE7	; 0x800ae7 <myDns+0x2>
     38e:	50 91 e8 0a 	lds	r21, 0x0AE8	; 0x800ae8 <myDns+0x3>
     392:	60 91 e9 0a 	lds	r22, 0x0AE9	; 0x800ae9 <myDns+0x4>
     396:	70 91 ea 0a 	lds	r23, 0x0AEA	; 0x800aea <myDns+0x5>
     39a:	4f 87       	std	Y+15, r20	; 0x0f
     39c:	58 8b       	std	Y+16, r21	; 0x10
     39e:	69 8b       	std	Y+17, r22	; 0x11
     3a0:	7a 8b       	std	Y+18, r23	; 0x12
     3a2:	9c 8b       	std	Y+20, r25	; 0x14
     3a4:	8b 8b       	std	Y+19, r24	; 0x13
     3a6:	80 91 ed 0a 	lds	r24, 0x0AED	; 0x800aed <ipCCEC+0x2>
     3aa:	90 91 ee 0a 	lds	r25, 0x0AEE	; 0x800aee <ipCCEC+0x3>
     3ae:	a0 91 ef 0a 	lds	r26, 0x0AEF	; 0x800aef <ipCCEC+0x4>
     3b2:	b0 91 f0 0a 	lds	r27, 0x0AF0	; 0x800af0 <ipCCEC+0x5>
     3b6:	8d 8b       	std	Y+21, r24	; 0x15
     3b8:	9e 8b       	std	Y+22, r25	; 0x16
     3ba:	af 8b       	std	Y+23, r26	; 0x17
     3bc:	b8 8f       	std	Y+24, r27	; 0x18
     3be:	ce 01       	movw	r24, r28
     3c0:	01 96       	adiw	r24, 0x01	; 1
     3c2:	7c 01       	movw	r14, r24
     3c4:	8e 01       	movw	r16, r28
     3c6:	09 5f       	subi	r16, 0xF9	; 249
     3c8:	1f 4f       	sbci	r17, 0xFF	; 255
     3ca:	9e 01       	movw	r18, r28
     3cc:	23 5f       	subi	r18, 0xF3	; 243
     3ce:	3f 4f       	sbci	r19, 0xFF	; 255
     3d0:	ae 01       	movw	r20, r28
     3d2:	4d 5e       	subi	r20, 0xED	; 237
     3d4:	5f 4f       	sbci	r21, 0xFF	; 255
     3d6:	62 e3       	ldi	r22, 0x32	; 50
     3d8:	71 e0       	ldi	r23, 0x01	; 1
     3da:	8b e2       	ldi	r24, 0x2B	; 43
     3dc:	9c e0       	ldi	r25, 0x0C	; 12
     3de:	0e 94 6c 28 	call	0x50d8	; 0x50d8 <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_>
     3e2:	68 96       	adiw	r28, 0x18	; 24
     3e4:	0f b6       	in	r0, 0x3f	; 63
     3e6:	f8 94       	cli
     3e8:	de bf       	out	0x3e, r29	; 62
     3ea:	0f be       	out	0x3f, r0	; 63
     3ec:	cd bf       	out	0x3d, r28	; 61
     3ee:	df 91       	pop	r29
     3f0:	cf 91       	pop	r28
     3f2:	1f 91       	pop	r17
     3f4:	0f 91       	pop	r16
     3f6:	ff 90       	pop	r15
     3f8:	ef 90       	pop	r14
     3fa:	08 95       	ret

000003fc <_Z11my_delay_msi>:
     3fc:	18 16       	cp	r1, r24
     3fe:	19 06       	cpc	r1, r25
     400:	44 f4       	brge	.+16     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     402:	ef e9       	ldi	r30, 0x9F	; 159
     404:	ff e0       	ldi	r31, 0x0F	; 15
     406:	31 97       	sbiw	r30, 0x01	; 1
     408:	f1 f7       	brne	.-4      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     40a:	00 c0       	rjmp	.+0      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     40c:	00 00       	nop
     40e:	01 97       	sbiw	r24, 0x01	; 1
     410:	f5 cf       	rjmp	.-22     	; 0x3fc <_Z11my_delay_msi>
     412:	08 95       	ret

00000414 <_Z9printLinev>:
     414:	cf 93       	push	r28
     416:	8e e2       	ldi	r24, 0x2E	; 46
     418:	9d e0       	ldi	r25, 0x0D	; 13
     41a:	0e 94 69 39 	call	0x72d2	; 0x72d2 <_ZN5Print7printlnEv>
     41e:	cd e7       	ldi	r28, 0x7D	; 125
     420:	6c ee       	ldi	r22, 0xEC	; 236
     422:	71 e0       	ldi	r23, 0x01	; 1
     424:	8e e2       	ldi	r24, 0x2E	; 46
     426:	9d e0       	ldi	r25, 0x0D	; 13
     428:	0e 94 61 39 	call	0x72c2	; 0x72c2 <_ZN5Print5printEPKc>
     42c:	c1 50       	subi	r28, 0x01	; 1
     42e:	c1 f7       	brne	.-16     	; 0x420 <_Z9printLinev+0xc>
     430:	8e e2       	ldi	r24, 0x2E	; 46
     432:	9d e0       	ldi	r25, 0x0D	; 13
     434:	cf 91       	pop	r28
     436:	0c 94 69 39 	jmp	0x72d2	; 0x72d2 <_ZN5Print7printlnEv>

0000043a <_Z8printTabh>:
     43a:	cf 93       	push	r28
     43c:	df 93       	push	r29
     43e:	d8 2f       	mov	r29, r24
     440:	c0 e0       	ldi	r28, 0x00	; 0
     442:	cd 17       	cp	r28, r29
     444:	41 f0       	breq	.+16     	; 0x456 <_Z8printTabh+0x1c>
     446:	6e ee       	ldi	r22, 0xEE	; 238
     448:	71 e0       	ldi	r23, 0x01	; 1
     44a:	8e e2       	ldi	r24, 0x2E	; 46
     44c:	9d e0       	ldi	r25, 0x0D	; 13
     44e:	0e 94 61 39 	call	0x72c2	; 0x72c2 <_ZN5Print5printEPKc>
     452:	cf 5f       	subi	r28, 0xFF	; 255
     454:	f6 cf       	rjmp	.-20     	; 0x442 <_Z8printTabh+0x8>
     456:	df 91       	pop	r29
     458:	cf 91       	pop	r28
     45a:	08 95       	ret

0000045c <_Z4passb>:
     45c:	cf 93       	push	r28
     45e:	c8 2f       	mov	r28, r24
     460:	81 e0       	ldi	r24, 0x01	; 1
     462:	eb df       	rcall	.-42     	; 0x43a <_Z8printTabh>
     464:	60 ef       	ldi	r22, 0xF0	; 240
     466:	71 e0       	ldi	r23, 0x01	; 1
     468:	8e e2       	ldi	r24, 0x2E	; 46
     46a:	9d e0       	ldi	r25, 0x0D	; 13
     46c:	0e 94 61 39 	call	0x72c2	; 0x72c2 <_ZN5Print5printEPKc>
     470:	cc 23       	and	r28, r28
     472:	19 f0       	breq	.+6      	; 0x47a <_Z4passb+0x1e>
     474:	64 ef       	ldi	r22, 0xF4	; 244
     476:	71 e0       	ldi	r23, 0x01	; 1
     478:	02 c0       	rjmp	.+4      	; 0x47e <_Z4passb+0x22>
     47a:	69 ef       	ldi	r22, 0xF9	; 249
     47c:	71 e0       	ldi	r23, 0x01	; 1
     47e:	8e e2       	ldi	r24, 0x2E	; 46
     480:	9d e0       	ldi	r25, 0x0D	; 13
     482:	0e 94 61 39 	call	0x72c2	; 0x72c2 <_ZN5Print5printEPKc>
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	cf 91       	pop	r28
     48a:	d7 cf       	rjmp	.-82     	; 0x43a <_Z8printTabh>

0000048c <_Z11clearEEPROMii>:
     48c:	0f 93       	push	r16
     48e:	1f 93       	push	r17
     490:	cf 93       	push	r28
     492:	df 93       	push	r29
     494:	ec 01       	movw	r28, r24
     496:	8b 01       	movw	r16, r22
     498:	62 ef       	ldi	r22, 0xF2	; 242
     49a:	71 e0       	ldi	r23, 0x01	; 1
     49c:	8e e2       	ldi	r24, 0x2E	; 46
     49e:	9d e0       	ldi	r25, 0x0D	; 13
     4a0:	0e 94 8c 39 	call	0x7318	; 0x7318 <_ZN5Print7printlnEPKc>
     4a4:	62 ef       	ldi	r22, 0xF2	; 242
     4a6:	71 e0       	ldi	r23, 0x01	; 1
     4a8:	8e e2       	ldi	r24, 0x2E	; 46
     4aa:	9d e0       	ldi	r25, 0x0D	; 13
     4ac:	0e 94 8c 39 	call	0x7318	; 0x7318 <_ZN5Print7printlnEPKc>
     4b0:	63 e2       	ldi	r22, 0x23	; 35
     4b2:	72 e0       	ldi	r23, 0x02	; 2
     4b4:	8e e2       	ldi	r24, 0x2E	; 46
     4b6:	9d e0       	ldi	r25, 0x0D	; 13
     4b8:	0e 94 8c 39 	call	0x7318	; 0x7318 <_ZN5Print7printlnEPKc>
     4bc:	c0 17       	cp	r28, r16
     4be:	d1 07       	cpc	r29, r17
     4c0:	34 f4       	brge	.+12     	; 0x4ce <_Z11clearEEPROMii+0x42>
     4c2:	60 e0       	ldi	r22, 0x00	; 0
     4c4:	ce 01       	movw	r24, r28
     4c6:	0e 94 d1 45 	call	0x8ba2	; 0x8ba2 <eeprom_write_byte>
     4ca:	21 96       	adiw	r28, 0x01	; 1
     4cc:	f7 cf       	rjmp	.-18     	; 0x4bc <_Z11clearEEPROMii+0x30>
     4ce:	60 e4       	ldi	r22, 0x40	; 64
     4d0:	72 e0       	ldi	r23, 0x02	; 2
     4d2:	8e e2       	ldi	r24, 0x2E	; 46
     4d4:	9d e0       	ldi	r25, 0x0D	; 13
     4d6:	0e 94 8c 39 	call	0x7318	; 0x7318 <_ZN5Print7printlnEPKc>
     4da:	62 ef       	ldi	r22, 0xF2	; 242
     4dc:	71 e0       	ldi	r23, 0x01	; 1
     4de:	8e e2       	ldi	r24, 0x2E	; 46
     4e0:	9d e0       	ldi	r25, 0x0D	; 13
     4e2:	0e 94 8c 39 	call	0x7318	; 0x7318 <_ZN5Print7printlnEPKc>
     4e6:	62 ef       	ldi	r22, 0xF2	; 242
     4e8:	71 e0       	ldi	r23, 0x01	; 1
     4ea:	8e e2       	ldi	r24, 0x2E	; 46
     4ec:	9d e0       	ldi	r25, 0x0D	; 13
     4ee:	df 91       	pop	r29
     4f0:	cf 91       	pop	r28
     4f2:	1f 91       	pop	r17
     4f4:	0f 91       	pop	r16
     4f6:	0c 94 8c 39 	jmp	0x7318	; 0x7318 <_ZN5Print7printlnEPKc>

000004fa <_Z6Buzzerhm>:
     4fa:	cf 92       	push	r12
     4fc:	df 92       	push	r13
     4fe:	ef 92       	push	r14
     500:	ff 92       	push	r15
     502:	0f 93       	push	r16
     504:	1f 93       	push	r17
     506:	cf 93       	push	r28
     508:	df 93       	push	r29
     50a:	6a 01       	movw	r12, r20
     50c:	7b 01       	movw	r14, r22
     50e:	c0 e0       	ldi	r28, 0x00	; 0
     510:	d0 e0       	ldi	r29, 0x00	; 0
     512:	08 2f       	mov	r16, r24
     514:	10 e0       	ldi	r17, 0x00	; 0
     516:	c0 17       	cp	r28, r16
     518:	d1 07       	cpc	r29, r17
     51a:	24 f4       	brge	.+8      	; 0x524 <_Z6Buzzerhm+0x2a>
     51c:	c6 01       	movw	r24, r12
     51e:	6e df       	rcall	.-292    	; 0x3fc <_Z11my_delay_msi>
     520:	21 96       	adiw	r28, 0x01	; 1
     522:	f9 cf       	rjmp	.-14     	; 0x516 <_Z6Buzzerhm+0x1c>
     524:	df 91       	pop	r29
     526:	cf 91       	pop	r28
     528:	1f 91       	pop	r17
     52a:	0f 91       	pop	r16
     52c:	ff 90       	pop	r15
     52e:	ef 90       	pop	r14
     530:	df 90       	pop	r13
     532:	cf 90       	pop	r12
     534:	08 95       	ret

00000536 <_Z13getCharKeypadi>:
     536:	82 32       	cpi	r24, 0x22	; 34
     538:	91 05       	cpc	r25, r1
     53a:	09 f4       	brne	.+2      	; 0x53e <_Z13getCharKeypadi+0x8>
     53c:	9a c0       	rjmp	.+308    	; 0x672 <_Z13getCharKeypadi+0x13c>
     53e:	6c f5       	brge	.+90     	; 0x59a <_Z13getCharKeypadi+0x64>
     540:	8a 30       	cpi	r24, 0x0A	; 10
     542:	91 05       	cpc	r25, r1
     544:	09 f4       	brne	.+2      	; 0x548 <_Z13getCharKeypadi+0x12>
     546:	83 c0       	rjmp	.+262    	; 0x64e <_Z13getCharKeypadi+0x118>
     548:	a4 f4       	brge	.+40     	; 0x572 <_Z13getCharKeypadi+0x3c>
     54a:	86 30       	cpi	r24, 0x06	; 6
     54c:	91 05       	cpc	r25, r1
     54e:	09 f4       	brne	.+2      	; 0x552 <_Z13getCharKeypadi+0x1c>
     550:	75 c0       	rjmp	.+234    	; 0x63c <_Z13getCharKeypadi+0x106>
     552:	89 30       	cpi	r24, 0x09	; 9
     554:	91 05       	cpc	r25, r1
     556:	09 f4       	brne	.+2      	; 0x55a <_Z13getCharKeypadi+0x24>
     558:	5d c0       	rjmp	.+186    	; 0x614 <_Z13getCharKeypadi+0xde>
     55a:	05 97       	sbiw	r24, 0x05	; 5
     55c:	09 f0       	breq	.+2      	; 0x560 <_Z13getCharKeypadi+0x2a>
     55e:	cf c0       	rjmp	.+414    	; 0x6fe <_Z13getCharKeypadi+0x1c8>
     560:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <MappaKeys>
     564:	8e e2       	ldi	r24, 0x2E	; 46
     566:	9d e0       	ldi	r25, 0x0D	; 13
     568:	0e 94 62 39 	call	0x72c4	; 0x72c4 <_ZN5Print5printEc>
     56c:	20 e0       	ldi	r18, 0x00	; 0
     56e:	30 e0       	ldi	r19, 0x00	; 0
     570:	59 c0       	rjmp	.+178    	; 0x624 <_Z13getCharKeypadi+0xee>
     572:	82 31       	cpi	r24, 0x12	; 18
     574:	91 05       	cpc	r25, r1
     576:	09 f4       	brne	.+2      	; 0x57a <_Z13getCharKeypadi+0x44>
     578:	73 c0       	rjmp	.+230    	; 0x660 <_Z13getCharKeypadi+0x12a>
     57a:	81 32       	cpi	r24, 0x21	; 33
     57c:	91 05       	cpc	r25, r1
     57e:	09 f4       	brne	.+2      	; 0x582 <_Z13getCharKeypadi+0x4c>
     580:	54 c0       	rjmp	.+168    	; 0x62a <_Z13getCharKeypadi+0xf4>
     582:	41 97       	sbiw	r24, 0x11	; 17
     584:	09 f0       	breq	.+2      	; 0x588 <_Z13getCharKeypadi+0x52>
     586:	bb c0       	rjmp	.+374    	; 0x6fe <_Z13getCharKeypadi+0x1c8>
     588:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <MappaKeys+0x2>
     58c:	8e e2       	ldi	r24, 0x2E	; 46
     58e:	9d e0       	ldi	r25, 0x0D	; 13
     590:	0e 94 62 39 	call	0x72c4	; 0x72c4 <_ZN5Print5printEc>
     594:	22 e0       	ldi	r18, 0x02	; 2
     596:	30 e0       	ldi	r19, 0x00	; 0
     598:	45 c0       	rjmp	.+138    	; 0x624 <_Z13getCharKeypadi+0xee>
     59a:	80 36       	cpi	r24, 0x60	; 96
     59c:	91 05       	cpc	r25, r1
     59e:	09 f4       	brne	.+2      	; 0x5a2 <_Z13getCharKeypadi+0x6c>
     5a0:	99 c0       	rjmp	.+306    	; 0x6d4 <_Z13getCharKeypadi+0x19e>
     5a2:	ac f4       	brge	.+42     	; 0x5ce <_Z13getCharKeypadi+0x98>
     5a4:	88 34       	cpi	r24, 0x48	; 72
     5a6:	91 05       	cpc	r25, r1
     5a8:	09 f4       	brne	.+2      	; 0x5ac <_Z13getCharKeypadi+0x76>
     5aa:	82 c0       	rjmp	.+260    	; 0x6b0 <_Z13getCharKeypadi+0x17a>
     5ac:	80 35       	cpi	r24, 0x50	; 80
     5ae:	91 05       	cpc	r25, r1
     5b0:	09 f4       	brne	.+2      	; 0x5b4 <_Z13getCharKeypadi+0x7e>
     5b2:	87 c0       	rjmp	.+270    	; 0x6c2 <_Z13getCharKeypadi+0x18c>
     5b4:	84 34       	cpi	r24, 0x44	; 68
     5b6:	91 05       	cpc	r25, r1
     5b8:	09 f0       	breq	.+2      	; 0x5bc <_Z13getCharKeypadi+0x86>
     5ba:	a1 c0       	rjmp	.+322    	; 0x6fe <_Z13getCharKeypadi+0x1c8>
     5bc:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <MappaKeys+0xc>
     5c0:	8e e2       	ldi	r24, 0x2E	; 46
     5c2:	9d e0       	ldi	r25, 0x0D	; 13
     5c4:	0e 94 62 39 	call	0x72c4	; 0x72c4 <_ZN5Print5printEc>
     5c8:	20 e0       	ldi	r18, 0x00	; 0
     5ca:	30 e0       	ldi	r19, 0x00	; 0
     5cc:	8b c0       	rjmp	.+278    	; 0x6e4 <_Z13getCharKeypadi+0x1ae>
     5ce:	88 38       	cpi	r24, 0x88	; 136
     5d0:	91 05       	cpc	r25, r1
     5d2:	09 f4       	brne	.+2      	; 0x5d6 <_Z13getCharKeypadi+0xa0>
     5d4:	59 c0       	rjmp	.+178    	; 0x688 <_Z13getCharKeypadi+0x152>
     5d6:	6c f4       	brge	.+26     	; 0x5f2 <_Z13getCharKeypadi+0xbc>
     5d8:	84 38       	cpi	r24, 0x84	; 132
     5da:	91 05       	cpc	r25, r1
     5dc:	09 f0       	breq	.+2      	; 0x5e0 <_Z13getCharKeypadi+0xaa>
     5de:	8f c0       	rjmp	.+286    	; 0x6fe <_Z13getCharKeypadi+0x1c8>
     5e0:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <MappaKeys+0x8>
     5e4:	8e e2       	ldi	r24, 0x2E	; 46
     5e6:	9d e0       	ldi	r25, 0x0D	; 13
     5e8:	0e 94 62 39 	call	0x72c4	; 0x72c4 <_ZN5Print5printEc>
     5ec:	20 e0       	ldi	r18, 0x00	; 0
     5ee:	30 e0       	ldi	r19, 0x00	; 0
     5f0:	5c c0       	rjmp	.+184    	; 0x6aa <_Z13getCharKeypadi+0x174>
     5f2:	80 39       	cpi	r24, 0x90	; 144
     5f4:	91 05       	cpc	r25, r1
     5f6:	09 f4       	brne	.+2      	; 0x5fa <_Z13getCharKeypadi+0xc4>
     5f8:	50 c0       	rjmp	.+160    	; 0x69a <_Z13getCharKeypadi+0x164>
     5fa:	80 3a       	cpi	r24, 0xA0	; 160
     5fc:	91 05       	cpc	r25, r1
     5fe:	09 f0       	breq	.+2      	; 0x602 <_Z13getCharKeypadi+0xcc>
     600:	7e c0       	rjmp	.+252    	; 0x6fe <_Z13getCharKeypadi+0x1c8>
     602:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <MappaKeys+0xb>
     606:	8e e2       	ldi	r24, 0x2E	; 46
     608:	9d e0       	ldi	r25, 0x0D	; 13
     60a:	0e 94 62 39 	call	0x72c4	; 0x72c4 <_ZN5Print5printEc>
     60e:	23 e0       	ldi	r18, 0x03	; 3
     610:	30 e0       	ldi	r19, 0x00	; 0
     612:	4b c0       	rjmp	.+150    	; 0x6aa <_Z13getCharKeypadi+0x174>
     614:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <MappaKeys+0x1>
     618:	8e e2       	ldi	r24, 0x2E	; 46
     61a:	9d e0       	ldi	r25, 0x0D	; 13
     61c:	0e 94 62 39 	call	0x72c4	; 0x72c4 <_ZN5Print5printEc>
     620:	21 e0       	ldi	r18, 0x01	; 1
     622:	30 e0       	ldi	r19, 0x00	; 0
     624:	80 e0       	ldi	r24, 0x00	; 0
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	5f c0       	rjmp	.+190    	; 0x6e8 <_Z13getCharKeypadi+0x1b2>
     62a:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <MappaKeys+0x3>
     62e:	8e e2       	ldi	r24, 0x2E	; 46
     630:	9d e0       	ldi	r25, 0x0D	; 13
     632:	0e 94 62 39 	call	0x72c4	; 0x72c4 <_ZN5Print5printEc>
     636:	23 e0       	ldi	r18, 0x03	; 3
     638:	30 e0       	ldi	r19, 0x00	; 0
     63a:	f4 cf       	rjmp	.-24     	; 0x624 <_Z13getCharKeypadi+0xee>
     63c:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <MappaKeys+0x4>
     640:	8e e2       	ldi	r24, 0x2E	; 46
     642:	9d e0       	ldi	r25, 0x0D	; 13
     644:	0e 94 62 39 	call	0x72c4	; 0x72c4 <_ZN5Print5printEc>
     648:	20 e0       	ldi	r18, 0x00	; 0
     64a:	30 e0       	ldi	r19, 0x00	; 0
     64c:	1a c0       	rjmp	.+52     	; 0x682 <_Z13getCharKeypadi+0x14c>
     64e:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <MappaKeys+0x5>
     652:	8e e2       	ldi	r24, 0x2E	; 46
     654:	9d e0       	ldi	r25, 0x0D	; 13
     656:	0e 94 62 39 	call	0x72c4	; 0x72c4 <_ZN5Print5printEc>
     65a:	21 e0       	ldi	r18, 0x01	; 1
     65c:	30 e0       	ldi	r19, 0x00	; 0
     65e:	11 c0       	rjmp	.+34     	; 0x682 <_Z13getCharKeypadi+0x14c>
     660:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <MappaKeys+0x6>
     664:	8e e2       	ldi	r24, 0x2E	; 46
     666:	9d e0       	ldi	r25, 0x0D	; 13
     668:	0e 94 62 39 	call	0x72c4	; 0x72c4 <_ZN5Print5printEc>
     66c:	22 e0       	ldi	r18, 0x02	; 2
     66e:	30 e0       	ldi	r19, 0x00	; 0
     670:	08 c0       	rjmp	.+16     	; 0x682 <_Z13getCharKeypadi+0x14c>
     672:	60 91 0d 01 	lds	r22, 0x010D	; 0x80010d <MappaKeys+0x7>
     676:	8e e2       	ldi	r24, 0x2E	; 46
     678:	9d e0       	ldi	r25, 0x0D	; 13
     67a:	0e 94 62 39 	call	0x72c4	; 0x72c4 <_ZN5Print5printEc>
     67e:	23 e0       	ldi	r18, 0x03	; 3
     680:	30 e0       	ldi	r19, 0x00	; 0
     682:	81 e0       	ldi	r24, 0x01	; 1
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	30 c0       	rjmp	.+96     	; 0x6e8 <_Z13getCharKeypadi+0x1b2>
     688:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <MappaKeys+0x9>
     68c:	8e e2       	ldi	r24, 0x2E	; 46
     68e:	9d e0       	ldi	r25, 0x0D	; 13
     690:	0e 94 62 39 	call	0x72c4	; 0x72c4 <_ZN5Print5printEc>
     694:	21 e0       	ldi	r18, 0x01	; 1
     696:	30 e0       	ldi	r19, 0x00	; 0
     698:	08 c0       	rjmp	.+16     	; 0x6aa <_Z13getCharKeypadi+0x174>
     69a:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <MappaKeys+0xa>
     69e:	8e e2       	ldi	r24, 0x2E	; 46
     6a0:	9d e0       	ldi	r25, 0x0D	; 13
     6a2:	0e 94 62 39 	call	0x72c4	; 0x72c4 <_ZN5Print5printEc>
     6a6:	22 e0       	ldi	r18, 0x02	; 2
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	82 e0       	ldi	r24, 0x02	; 2
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	1c c0       	rjmp	.+56     	; 0x6e8 <_Z13getCharKeypadi+0x1b2>
     6b0:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <MappaKeys+0xd>
     6b4:	8e e2       	ldi	r24, 0x2E	; 46
     6b6:	9d e0       	ldi	r25, 0x0D	; 13
     6b8:	0e 94 62 39 	call	0x72c4	; 0x72c4 <_ZN5Print5printEc>
     6bc:	21 e0       	ldi	r18, 0x01	; 1
     6be:	30 e0       	ldi	r19, 0x00	; 0
     6c0:	11 c0       	rjmp	.+34     	; 0x6e4 <_Z13getCharKeypadi+0x1ae>
     6c2:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <MappaKeys+0xe>
     6c6:	8e e2       	ldi	r24, 0x2E	; 46
     6c8:	9d e0       	ldi	r25, 0x0D	; 13
     6ca:	0e 94 62 39 	call	0x72c4	; 0x72c4 <_ZN5Print5printEc>
     6ce:	22 e0       	ldi	r18, 0x02	; 2
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	08 c0       	rjmp	.+16     	; 0x6e4 <_Z13getCharKeypadi+0x1ae>
     6d4:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <MappaKeys+0xf>
     6d8:	8e e2       	ldi	r24, 0x2E	; 46
     6da:	9d e0       	ldi	r25, 0x0D	; 13
     6dc:	0e 94 62 39 	call	0x72c4	; 0x72c4 <_ZN5Print5printEc>
     6e0:	23 e0       	ldi	r18, 0x03	; 3
     6e2:	30 e0       	ldi	r19, 0x00	; 0
     6e4:	83 e0       	ldi	r24, 0x03	; 3
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	88 0f       	add	r24, r24
     6ea:	99 1f       	adc	r25, r25
     6ec:	88 0f       	add	r24, r24
     6ee:	99 1f       	adc	r25, r25
     6f0:	8a 5f       	subi	r24, 0xFA	; 250
     6f2:	9e 4f       	sbci	r25, 0xFE	; 254
     6f4:	fc 01       	movw	r30, r24
     6f6:	e2 0f       	add	r30, r18
     6f8:	f3 1f       	adc	r31, r19
     6fa:	80 81       	ld	r24, Z
     6fc:	08 95       	ret
     6fe:	8e e4       	ldi	r24, 0x4E	; 78
     700:	08 95       	ret

00000702 <_Z10displayLCDP6Stringii>:
     702:	cf 93       	push	r28
     704:	df 93       	push	r29
     706:	ec 01       	movw	r28, r24
     708:	87 e6       	ldi	r24, 0x67	; 103
     70a:	9b e0       	ldi	r25, 0x0B	; 11
     70c:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <_ZN3LCD5clearEv>
     710:	61 e0       	ldi	r22, 0x01	; 1
     712:	87 e6       	ldi	r24, 0x67	; 103
     714:	9b e0       	ldi	r25, 0x0B	; 11
     716:	0e 94 62 39 	call	0x72c4	; 0x72c4 <_ZN5Print5printEc>
     71a:	41 e0       	ldi	r20, 0x01	; 1
     71c:	60 e0       	ldi	r22, 0x00	; 0
     71e:	87 e6       	ldi	r24, 0x67	; 103
     720:	9b e0       	ldi	r25, 0x0B	; 11
     722:	0e 94 d7 30 	call	0x61ae	; 0x61ae <_ZN3LCD9setCursorEhh>
     726:	be 01       	movw	r22, r28
     728:	6a 5f       	subi	r22, 0xFA	; 250
     72a:	7f 4f       	sbci	r23, 0xFF	; 255
     72c:	87 e6       	ldi	r24, 0x67	; 103
     72e:	9b e0       	ldi	r25, 0x0B	; 11
     730:	0e 94 53 39 	call	0x72a6	; 0x72a6 <_ZN5Print5printERK6String>
     734:	42 e0       	ldi	r20, 0x02	; 2
     736:	60 e0       	ldi	r22, 0x00	; 0
     738:	87 e6       	ldi	r24, 0x67	; 103
     73a:	9b e0       	ldi	r25, 0x0B	; 11
     73c:	0e 94 d7 30 	call	0x61ae	; 0x61ae <_ZN3LCD9setCursorEhh>
     740:	be 01       	movw	r22, r28
     742:	64 5f       	subi	r22, 0xF4	; 244
     744:	7f 4f       	sbci	r23, 0xFF	; 255
     746:	87 e6       	ldi	r24, 0x67	; 103
     748:	9b e0       	ldi	r25, 0x0B	; 11
     74a:	0e 94 53 39 	call	0x72a6	; 0x72a6 <_ZN5Print5printERK6String>
     74e:	43 e0       	ldi	r20, 0x03	; 3
     750:	60 e0       	ldi	r22, 0x00	; 0
     752:	87 e6       	ldi	r24, 0x67	; 103
     754:	9b e0       	ldi	r25, 0x0B	; 11
     756:	0e 94 d7 30 	call	0x61ae	; 0x61ae <_ZN3LCD9setCursorEhh>
     75a:	be 01       	movw	r22, r28
     75c:	6e 5e       	subi	r22, 0xEE	; 238
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	87 e6       	ldi	r24, 0x67	; 103
     762:	9b e0       	ldi	r25, 0x0B	; 11
     764:	df 91       	pop	r29
     766:	cf 91       	pop	r28
     768:	0c 94 53 39 	jmp	0x72a6	; 0x72a6 <_ZN5Print5printERK6String>

0000076c <_Z11avanzaStatom>:
     76c:	cf 92       	push	r12
     76e:	df 92       	push	r13
     770:	ef 92       	push	r14
     772:	ff 92       	push	r15
     774:	6b 01       	movw	r12, r22
     776:	7c 01       	movw	r14, r24
     778:	87 e6       	ldi	r24, 0x67	; 103
     77a:	9b e0       	ldi	r25, 0x0B	; 11
     77c:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <_ZN3LCD5clearEv>
     780:	60 91 42 0b 	lds	r22, 0x0B42	; 0x800b42 <stato_procedura>
     784:	70 91 43 0b 	lds	r23, 0x0B43	; 0x800b43 <stato_procedura+0x1>
     788:	4a e0       	ldi	r20, 0x0A	; 10
     78a:	50 e0       	ldi	r21, 0x00	; 0
     78c:	81 ef       	ldi	r24, 0xF1	; 241
     78e:	9a e0       	ldi	r25, 0x0A	; 10
     790:	b8 df       	rcall	.-144    	; 0x702 <_Z10displayLCDP6Stringii>
     792:	c0 92 a7 0a 	sts	0x0AA7, r12	; 0x800aa7 <Timer>
     796:	d0 92 a8 0a 	sts	0x0AA8, r13	; 0x800aa8 <Timer+0x1>
     79a:	e0 92 a9 0a 	sts	0x0AA9, r14	; 0x800aa9 <Timer+0x2>
     79e:	f0 92 aa 0a 	sts	0x0AAA, r15	; 0x800aaa <Timer+0x3>
     7a2:	8f e1       	ldi	r24, 0x1F	; 31
     7a4:	9e e4       	ldi	r25, 0x4E	; 78
     7a6:	01 97       	sbiw	r24, 0x01	; 1
     7a8:	f1 f7       	brne	.-4      	; 0x7a6 <_Z11avanzaStatom+0x3a>
     7aa:	00 c0       	rjmp	.+0      	; 0x7ac <_Z11avanzaStatom+0x40>
     7ac:	00 00       	nop
     7ae:	81 ea       	ldi	r24, 0xA1	; 161
     7b0:	9a e0       	ldi	r25, 0x0A	; 10
     7b2:	0e 94 64 23 	call	0x46c8	; 0x46c8 <_ZNK8DateTime11secondstimeEv>
     7b6:	60 93 ab 0a 	sts	0x0AAB, r22	; 0x800aab <UltimoPassaggioStato>
     7ba:	70 93 ac 0a 	sts	0x0AAC, r23	; 0x800aac <UltimoPassaggioStato+0x1>
     7be:	80 93 ad 0a 	sts	0x0AAD, r24	; 0x800aad <UltimoPassaggioStato+0x2>
     7c2:	90 93 ae 0a 	sts	0x0AAE, r25	; 0x800aae <UltimoPassaggioStato+0x3>
     7c6:	8f e1       	ldi	r24, 0x1F	; 31
     7c8:	9e e4       	ldi	r25, 0x4E	; 78
     7ca:	01 97       	sbiw	r24, 0x01	; 1
     7cc:	f1 f7       	brne	.-4      	; 0x7ca <_Z11avanzaStatom+0x5e>
     7ce:	00 c0       	rjmp	.+0      	; 0x7d0 <_Z11avanzaStatom+0x64>
     7d0:	00 00       	nop
     7d2:	80 91 42 0b 	lds	r24, 0x0B42	; 0x800b42 <stato_procedura>
     7d6:	90 91 43 0b 	lds	r25, 0x0B43	; 0x800b43 <stato_procedura+0x1>
     7da:	01 96       	adiw	r24, 0x01	; 1
     7dc:	90 93 43 0b 	sts	0x0B43, r25	; 0x800b43 <stato_procedura+0x1>
     7e0:	80 93 42 0b 	sts	0x0B42, r24	; 0x800b42 <stato_procedura>
     7e4:	ff 90       	pop	r15
     7e6:	ef 90       	pop	r14
     7e8:	df 90       	pop	r13
     7ea:	cf 90       	pop	r12
     7ec:	08 95       	ret

000007ee <_Z16scrivi_TAG_MezzoPc>:
     7ee:	8f 92       	push	r8
     7f0:	9f 92       	push	r9
     7f2:	af 92       	push	r10
     7f4:	bf 92       	push	r11
     7f6:	cf 92       	push	r12
     7f8:	df 92       	push	r13
     7fa:	ef 92       	push	r14
     7fc:	0f 93       	push	r16
     7fe:	1f 93       	push	r17
     800:	cf 93       	push	r28
     802:	df 93       	push	r29
     804:	cd b7       	in	r28, 0x3d	; 61
     806:	de b7       	in	r29, 0x3e	; 62
     808:	a2 97       	sbiw	r28, 0x22	; 34
     80a:	0f b6       	in	r0, 0x3f	; 63
     80c:	f8 94       	cli
     80e:	de bf       	out	0x3e, r29	; 62
     810:	0f be       	out	0x3f, r0	; 63
     812:	cd bf       	out	0x3d, r28	; 61
     814:	5c 01       	movw	r10, r24
     816:	4b 01       	movw	r8, r22
     818:	6f ee       	ldi	r22, 0xEF	; 239
     81a:	71 e0       	ldi	r23, 0x01	; 1
     81c:	ce 01       	movw	r24, r28
     81e:	4d 96       	adiw	r24, 0x1d	; 29
     820:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
     824:	08 ec       	ldi	r16, 0xC8	; 200
     826:	10 e0       	ldi	r17, 0x00	; 0
     828:	27 e8       	ldi	r18, 0x87	; 135
     82a:	3b e0       	ldi	r19, 0x0B	; 11
     82c:	40 e8       	ldi	r20, 0x80	; 128
     82e:	5b e0       	ldi	r21, 0x0B	; 11
     830:	60 e0       	ldi	r22, 0x00	; 0
     832:	80 e5       	ldi	r24, 0x50	; 80
     834:	9b e0       	ldi	r25, 0x0B	; 11
     836:	0e 94 d7 20 	call	0x41ae	; 0x41ae <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j>
     83a:	80 93 88 0b 	sts	0x0B88, r24	; 0x800b88 <success>
     83e:	88 23       	and	r24, r24
     840:	09 f4       	brne	.+2      	; 0x844 <_Z16scrivi_TAG_MezzoPc+0x56>
     842:	a3 c0       	rjmp	.+326    	; 0x98a <_Z16scrivi_TAG_MezzoPc+0x19c>
     844:	80 91 87 0b 	lds	r24, 0x0B87	; 0x800b87 <uidLength>
     848:	84 30       	cpi	r24, 0x04	; 4
     84a:	09 f0       	breq	.+2      	; 0x84e <_Z16scrivi_TAG_MezzoPc+0x60>
     84c:	98 c0       	rjmp	.+304    	; 0x97e <_Z16scrivi_TAG_MezzoPc+0x190>
     84e:	86 e0       	ldi	r24, 0x06	; 6
     850:	ed e6       	ldi	r30, 0x6D	; 109
     852:	f1 e0       	ldi	r31, 0x01	; 1
     854:	de 01       	movw	r26, r28
     856:	57 96       	adiw	r26, 0x17	; 23
     858:	01 90       	ld	r0, Z+
     85a:	0d 92       	st	X+, r0
     85c:	8a 95       	dec	r24
     85e:	e1 f7       	brne	.-8      	; 0x858 <_Z16scrivi_TAG_MezzoPc+0x6a>
     860:	ce 01       	movw	r24, r28
     862:	47 96       	adiw	r24, 0x17	; 23
     864:	6c 01       	movw	r12, r24
     866:	e1 2c       	mov	r14, r1
     868:	04 e0       	ldi	r16, 0x04	; 4
     86a:	10 e0       	ldi	r17, 0x00	; 0
     86c:	20 e0       	ldi	r18, 0x00	; 0
     86e:	30 e0       	ldi	r19, 0x00	; 0
     870:	44 e0       	ldi	r20, 0x04	; 4
     872:	60 e8       	ldi	r22, 0x80	; 128
     874:	7b e0       	ldi	r23, 0x0B	; 11
     876:	80 e5       	ldi	r24, 0x50	; 80
     878:	9b e0       	ldi	r25, 0x0B	; 11
     87a:	0e 94 2b 21 	call	0x4256	; 0x4256 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_>
     87e:	80 93 88 0b 	sts	0x0B88, r24	; 0x800b88 <success>
     882:	88 23       	and	r24, r24
     884:	09 f4       	brne	.+2      	; 0x888 <_Z16scrivi_TAG_MezzoPc+0x9a>
     886:	6b c0       	rjmp	.+214    	; 0x95e <_Z16scrivi_TAG_MezzoPc+0x170>
     888:	80 e1       	ldi	r24, 0x10	; 16
     88a:	f4 01       	movw	r30, r8
     88c:	de 01       	movw	r26, r28
     88e:	11 96       	adiw	r26, 0x01	; 1
     890:	01 90       	ld	r0, Z+
     892:	0d 92       	st	X+, r0
     894:	8a 95       	dec	r24
     896:	e1 f7       	brne	.-8      	; 0x890 <_Z16scrivi_TAG_MezzoPc+0xa2>
     898:	ae 01       	movw	r20, r28
     89a:	4f 5f       	subi	r20, 0xFF	; 255
     89c:	5f 4f       	sbci	r21, 0xFF	; 255
     89e:	64 e0       	ldi	r22, 0x04	; 4
     8a0:	80 e5       	ldi	r24, 0x50	; 80
     8a2:	9b e0       	ldi	r25, 0x0B	; 11
     8a4:	0e 94 be 21 	call	0x437c	; 0x437c <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh>
     8a8:	80 93 88 0b 	sts	0x0B88, r24	; 0x800b88 <success>
     8ac:	9f ef       	ldi	r25, 0xFF	; 255
     8ae:	21 ee       	ldi	r18, 0xE1	; 225
     8b0:	84 e0       	ldi	r24, 0x04	; 4
     8b2:	91 50       	subi	r25, 0x01	; 1
     8b4:	20 40       	sbci	r18, 0x00	; 0
     8b6:	80 40       	sbci	r24, 0x00	; 0
     8b8:	e1 f7       	brne	.-8      	; 0x8b2 <_Z16scrivi_TAG_MezzoPc+0xc4>
     8ba:	00 c0       	rjmp	.+0      	; 0x8bc <_Z16scrivi_TAG_MezzoPc+0xce>
     8bc:	00 00       	nop
     8be:	ae 01       	movw	r20, r28
     8c0:	4f 5f       	subi	r20, 0xFF	; 255
     8c2:	5f 4f       	sbci	r21, 0xFF	; 255
     8c4:	64 e0       	ldi	r22, 0x04	; 4
     8c6:	80 e5       	ldi	r24, 0x50	; 80
     8c8:	9b e0       	ldi	r25, 0x0B	; 11
     8ca:	0e 94 8b 21 	call	0x4316	; 0x4316 <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh>
     8ce:	80 93 88 0b 	sts	0x0B88, r24	; 0x800b88 <success>
     8d2:	61 e5       	ldi	r22, 0x51	; 81
     8d4:	72 e0       	ldi	r23, 0x02	; 2
     8d6:	8e e2       	ldi	r24, 0x2E	; 46
     8d8:	9d e0       	ldi	r25, 0x0D	; 13
     8da:	0e 94 8c 39 	call	0x7318	; 0x7318 <_ZN5Print7printlnEPKc>
     8de:	be 01       	movw	r22, r28
     8e0:	6f 5f       	subi	r22, 0xFF	; 255
     8e2:	7f 4f       	sbci	r23, 0xFF	; 255
     8e4:	ce 01       	movw	r24, r28
     8e6:	41 96       	adiw	r24, 0x11	; 17
     8e8:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
     8ec:	80 91 88 0b 	lds	r24, 0x0B88	; 0x800b88 <success>
     8f0:	88 23       	and	r24, r24
     8f2:	01 f1       	breq	.+64     	; 0x934 <_Z16scrivi_TAG_MezzoPc+0x146>
     8f4:	be 01       	movw	r22, r28
     8f6:	6f 5e       	subi	r22, 0xEF	; 239
     8f8:	7f 4f       	sbci	r23, 0xFF	; 255
     8fa:	8e e2       	ldi	r24, 0x2E	; 46
     8fc:	9d e0       	ldi	r25, 0x0D	; 13
     8fe:	0e 94 7c 39 	call	0x72f8	; 0x72f8 <_ZN5Print7printlnERK6String>
     902:	8d 89       	ldd	r24, Y+21	; 0x15
     904:	9e 89       	ldd	r25, Y+22	; 0x16
     906:	06 97       	sbiw	r24, 0x06	; 6
     908:	59 f4       	brne	.+22     	; 0x920 <_Z16scrivi_TAG_MezzoPc+0x132>
     90a:	be 01       	movw	r22, r28
     90c:	6f 5e       	subi	r22, 0xEF	; 239
     90e:	7f 4f       	sbci	r23, 0xFF	; 255
     910:	c5 01       	movw	r24, r10
     912:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringC1EOS_>
     916:	ce 01       	movw	r24, r28
     918:	41 96       	adiw	r24, 0x11	; 17
     91a:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
     91e:	3b c0       	rjmp	.+118    	; 0x996 <_Z16scrivi_TAG_MezzoPc+0x1a8>
     920:	9f ef       	ldi	r25, 0xFF	; 255
     922:	21 ee       	ldi	r18, 0xE1	; 225
     924:	84 e0       	ldi	r24, 0x04	; 4
     926:	91 50       	subi	r25, 0x01	; 1
     928:	20 40       	sbci	r18, 0x00	; 0
     92a:	80 40       	sbci	r24, 0x00	; 0
     92c:	e1 f7       	brne	.-8      	; 0x926 <_Z16scrivi_TAG_MezzoPc+0x138>
     92e:	00 c0       	rjmp	.+0      	; 0x930 <_Z16scrivi_TAG_MezzoPc+0x142>
     930:	00 00       	nop
     932:	10 c0       	rjmp	.+32     	; 0x954 <_Z16scrivi_TAG_MezzoPc+0x166>
     934:	87 e6       	ldi	r24, 0x67	; 103
     936:	9b e0       	ldi	r25, 0x0B	; 11
     938:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <_ZN3LCD5clearEv>
     93c:	41 e0       	ldi	r20, 0x01	; 1
     93e:	60 e0       	ldi	r22, 0x00	; 0
     940:	87 e6       	ldi	r24, 0x67	; 103
     942:	9b e0       	ldi	r25, 0x0B	; 11
     944:	0e 94 d7 30 	call	0x61ae	; 0x61ae <_ZN3LCD9setCursorEhh>
     948:	6f e5       	ldi	r22, 0x5F	; 95
     94a:	72 e0       	ldi	r23, 0x02	; 2
     94c:	87 e6       	ldi	r24, 0x67	; 103
     94e:	9b e0       	ldi	r25, 0x0B	; 11
     950:	0e 94 61 39 	call	0x72c2	; 0x72c2 <_ZN5Print5printEPKc>
     954:	ce 01       	movw	r24, r28
     956:	41 96       	adiw	r24, 0x11	; 17
     958:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
     95c:	10 c0       	rjmp	.+32     	; 0x97e <_Z16scrivi_TAG_MezzoPc+0x190>
     95e:	87 e6       	ldi	r24, 0x67	; 103
     960:	9b e0       	ldi	r25, 0x0B	; 11
     962:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <_ZN3LCD5clearEv>
     966:	41 e0       	ldi	r20, 0x01	; 1
     968:	60 e0       	ldi	r22, 0x00	; 0
     96a:	87 e6       	ldi	r24, 0x67	; 103
     96c:	9b e0       	ldi	r25, 0x0B	; 11
     96e:	0e 94 d7 30 	call	0x61ae	; 0x61ae <_ZN3LCD9setCursorEhh>
     972:	69 e6       	ldi	r22, 0x69	; 105
     974:	72 e0       	ldi	r23, 0x02	; 2
     976:	87 e6       	ldi	r24, 0x67	; 103
     978:	9b e0       	ldi	r25, 0x0B	; 11
     97a:	0e 94 61 39 	call	0x72c2	; 0x72c2 <_ZN5Print5printEPKc>
     97e:	6f ee       	ldi	r22, 0xEF	; 239
     980:	71 e0       	ldi	r23, 0x01	; 1
     982:	8e e2       	ldi	r24, 0x2E	; 46
     984:	9d e0       	ldi	r25, 0x0D	; 13
     986:	0e 94 8c 39 	call	0x7318	; 0x7318 <_ZN5Print7printlnEPKc>
     98a:	be 01       	movw	r22, r28
     98c:	63 5e       	subi	r22, 0xE3	; 227
     98e:	7f 4f       	sbci	r23, 0xFF	; 255
     990:	c5 01       	movw	r24, r10
     992:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringC1EOS_>
     996:	ce 01       	movw	r24, r28
     998:	4d 96       	adiw	r24, 0x1d	; 29
     99a:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
     99e:	c5 01       	movw	r24, r10
     9a0:	a2 96       	adiw	r28, 0x22	; 34
     9a2:	0f b6       	in	r0, 0x3f	; 63
     9a4:	f8 94       	cli
     9a6:	de bf       	out	0x3e, r29	; 62
     9a8:	0f be       	out	0x3f, r0	; 63
     9aa:	cd bf       	out	0x3d, r28	; 61
     9ac:	df 91       	pop	r29
     9ae:	cf 91       	pop	r28
     9b0:	1f 91       	pop	r17
     9b2:	0f 91       	pop	r16
     9b4:	ef 90       	pop	r14
     9b6:	df 90       	pop	r13
     9b8:	cf 90       	pop	r12
     9ba:	bf 90       	pop	r11
     9bc:	af 90       	pop	r10
     9be:	9f 90       	pop	r9
     9c0:	8f 90       	pop	r8
     9c2:	08 95       	ret

000009c4 <_Z14leggiTAG_Mezzob>:
     9c4:	af 92       	push	r10
     9c6:	bf 92       	push	r11
     9c8:	cf 92       	push	r12
     9ca:	df 92       	push	r13
     9cc:	ef 92       	push	r14
     9ce:	0f 93       	push	r16
     9d0:	1f 93       	push	r17
     9d2:	cf 93       	push	r28
     9d4:	df 93       	push	r29
     9d6:	cd b7       	in	r28, 0x3d	; 61
     9d8:	de b7       	in	r29, 0x3e	; 62
     9da:	a2 97       	sbiw	r28, 0x22	; 34
     9dc:	0f b6       	in	r0, 0x3f	; 63
     9de:	f8 94       	cli
     9e0:	de bf       	out	0x3e, r29	; 62
     9e2:	0f be       	out	0x3f, r0	; 63
     9e4:	cd bf       	out	0x3d, r28	; 61
     9e6:	5c 01       	movw	r10, r24
     9e8:	6f ee       	ldi	r22, 0xEF	; 239
     9ea:	71 e0       	ldi	r23, 0x01	; 1
     9ec:	ce 01       	movw	r24, r28
     9ee:	4d 96       	adiw	r24, 0x1d	; 29
     9f0:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
     9f4:	08 ec       	ldi	r16, 0xC8	; 200
     9f6:	10 e0       	ldi	r17, 0x00	; 0
     9f8:	27 e8       	ldi	r18, 0x87	; 135
     9fa:	3b e0       	ldi	r19, 0x0B	; 11
     9fc:	40 e8       	ldi	r20, 0x80	; 128
     9fe:	5b e0       	ldi	r21, 0x0B	; 11
     a00:	60 e0       	ldi	r22, 0x00	; 0
     a02:	80 e5       	ldi	r24, 0x50	; 80
     a04:	9b e0       	ldi	r25, 0x0B	; 11
     a06:	0e 94 d7 20 	call	0x41ae	; 0x41ae <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j>
     a0a:	80 93 88 0b 	sts	0x0B88, r24	; 0x800b88 <success>
     a0e:	88 23       	and	r24, r24
     a10:	09 f4       	brne	.+2      	; 0xa14 <_Z14leggiTAG_Mezzob+0x50>
     a12:	88 c0       	rjmp	.+272    	; 0xb24 <_Z14leggiTAG_Mezzob+0x160>
     a14:	4e e1       	ldi	r20, 0x1E	; 30
     a16:	50 e0       	ldi	r21, 0x00	; 0
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	82 e0       	ldi	r24, 0x02	; 2
     a1e:	6d dd       	rcall	.-1318   	; 0x4fa <_Z6Buzzerhm>
     a20:	80 91 87 0b 	lds	r24, 0x0B87	; 0x800b87 <uidLength>
     a24:	84 30       	cpi	r24, 0x04	; 4
     a26:	09 f0       	breq	.+2      	; 0xa2a <_Z14leggiTAG_Mezzob+0x66>
     a28:	77 c0       	rjmp	.+238    	; 0xb18 <_Z14leggiTAG_Mezzob+0x154>
     a2a:	86 e0       	ldi	r24, 0x06	; 6
     a2c:	ed e6       	ldi	r30, 0x6D	; 109
     a2e:	f1 e0       	ldi	r31, 0x01	; 1
     a30:	de 01       	movw	r26, r28
     a32:	57 96       	adiw	r26, 0x17	; 23
     a34:	01 90       	ld	r0, Z+
     a36:	0d 92       	st	X+, r0
     a38:	8a 95       	dec	r24
     a3a:	e1 f7       	brne	.-8      	; 0xa34 <_Z14leggiTAG_Mezzob+0x70>
     a3c:	ce 01       	movw	r24, r28
     a3e:	47 96       	adiw	r24, 0x17	; 23
     a40:	6c 01       	movw	r12, r24
     a42:	e1 2c       	mov	r14, r1
     a44:	04 e0       	ldi	r16, 0x04	; 4
     a46:	10 e0       	ldi	r17, 0x00	; 0
     a48:	20 e0       	ldi	r18, 0x00	; 0
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	44 e0       	ldi	r20, 0x04	; 4
     a4e:	60 e8       	ldi	r22, 0x80	; 128
     a50:	7b e0       	ldi	r23, 0x0B	; 11
     a52:	80 e5       	ldi	r24, 0x50	; 80
     a54:	9b e0       	ldi	r25, 0x0B	; 11
     a56:	0e 94 2b 21 	call	0x4256	; 0x4256 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_>
     a5a:	80 93 88 0b 	sts	0x0B88, r24	; 0x800b88 <success>
     a5e:	88 23       	and	r24, r24
     a60:	09 f4       	brne	.+2      	; 0xa64 <_Z14leggiTAG_Mezzob+0xa0>
     a62:	4a c0       	rjmp	.+148    	; 0xaf8 <_Z14leggiTAG_Mezzob+0x134>
     a64:	ae 01       	movw	r20, r28
     a66:	4f 5f       	subi	r20, 0xFF	; 255
     a68:	5f 4f       	sbci	r21, 0xFF	; 255
     a6a:	64 e0       	ldi	r22, 0x04	; 4
     a6c:	80 e5       	ldi	r24, 0x50	; 80
     a6e:	9b e0       	ldi	r25, 0x0B	; 11
     a70:	0e 94 8b 21 	call	0x4316	; 0x4316 <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh>
     a74:	80 93 88 0b 	sts	0x0B88, r24	; 0x800b88 <success>
     a78:	88 23       	and	r24, r24
     a7a:	89 f1       	breq	.+98     	; 0xade <_Z14leggiTAG_Mezzob+0x11a>
     a7c:	61 e5       	ldi	r22, 0x51	; 81
     a7e:	72 e0       	ldi	r23, 0x02	; 2
     a80:	8e e2       	ldi	r24, 0x2E	; 46
     a82:	9d e0       	ldi	r25, 0x0D	; 13
     a84:	0e 94 8c 39 	call	0x7318	; 0x7318 <_ZN5Print7printlnEPKc>
     a88:	be 01       	movw	r22, r28
     a8a:	6f 5f       	subi	r22, 0xFF	; 255
     a8c:	7f 4f       	sbci	r23, 0xFF	; 255
     a8e:	ce 01       	movw	r24, r28
     a90:	41 96       	adiw	r24, 0x11	; 17
     a92:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
     a96:	be 01       	movw	r22, r28
     a98:	6f 5e       	subi	r22, 0xEF	; 239
     a9a:	7f 4f       	sbci	r23, 0xFF	; 255
     a9c:	8e e2       	ldi	r24, 0x2E	; 46
     a9e:	9d e0       	ldi	r25, 0x0D	; 13
     aa0:	0e 94 7c 39 	call	0x72f8	; 0x72f8 <_ZN5Print7printlnERK6String>
     aa4:	8d 89       	ldd	r24, Y+21	; 0x15
     aa6:	9e 89       	ldd	r25, Y+22	; 0x16
     aa8:	06 97       	sbiw	r24, 0x06	; 6
     aaa:	59 f4       	brne	.+22     	; 0xac2 <_Z14leggiTAG_Mezzob+0xfe>
     aac:	be 01       	movw	r22, r28
     aae:	6f 5e       	subi	r22, 0xEF	; 239
     ab0:	7f 4f       	sbci	r23, 0xFF	; 255
     ab2:	c5 01       	movw	r24, r10
     ab4:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringC1EOS_>
     ab8:	ce 01       	movw	r24, r28
     aba:	41 96       	adiw	r24, 0x11	; 17
     abc:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
     ac0:	37 c0       	rjmp	.+110    	; 0xb30 <_Z14leggiTAG_Mezzob+0x16c>
     ac2:	9f ef       	ldi	r25, 0xFF	; 255
     ac4:	21 ee       	ldi	r18, 0xE1	; 225
     ac6:	84 e0       	ldi	r24, 0x04	; 4
     ac8:	91 50       	subi	r25, 0x01	; 1
     aca:	20 40       	sbci	r18, 0x00	; 0
     acc:	80 40       	sbci	r24, 0x00	; 0
     ace:	e1 f7       	brne	.-8      	; 0xac8 <_Z14leggiTAG_Mezzob+0x104>
     ad0:	00 c0       	rjmp	.+0      	; 0xad2 <_Z14leggiTAG_Mezzob+0x10e>
     ad2:	00 00       	nop
     ad4:	ce 01       	movw	r24, r28
     ad6:	41 96       	adiw	r24, 0x11	; 17
     ad8:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
     adc:	1d c0       	rjmp	.+58     	; 0xb18 <_Z14leggiTAG_Mezzob+0x154>
     ade:	87 e6       	ldi	r24, 0x67	; 103
     ae0:	9b e0       	ldi	r25, 0x0B	; 11
     ae2:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <_ZN3LCD5clearEv>
     ae6:	41 e0       	ldi	r20, 0x01	; 1
     ae8:	60 e0       	ldi	r22, 0x00	; 0
     aea:	87 e6       	ldi	r24, 0x67	; 103
     aec:	9b e0       	ldi	r25, 0x0B	; 11
     aee:	0e 94 d7 30 	call	0x61ae	; 0x61ae <_ZN3LCD9setCursorEhh>
     af2:	61 e7       	ldi	r22, 0x71	; 113
     af4:	72 e0       	ldi	r23, 0x02	; 2
     af6:	0c c0       	rjmp	.+24     	; 0xb10 <_Z14leggiTAG_Mezzob+0x14c>
     af8:	87 e6       	ldi	r24, 0x67	; 103
     afa:	9b e0       	ldi	r25, 0x0B	; 11
     afc:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <_ZN3LCD5clearEv>
     b00:	41 e0       	ldi	r20, 0x01	; 1
     b02:	60 e0       	ldi	r22, 0x00	; 0
     b04:	87 e6       	ldi	r24, 0x67	; 103
     b06:	9b e0       	ldi	r25, 0x0B	; 11
     b08:	0e 94 d7 30 	call	0x61ae	; 0x61ae <_ZN3LCD9setCursorEhh>
     b0c:	6e e7       	ldi	r22, 0x7E	; 126
     b0e:	72 e0       	ldi	r23, 0x02	; 2
     b10:	87 e6       	ldi	r24, 0x67	; 103
     b12:	9b e0       	ldi	r25, 0x0B	; 11
     b14:	0e 94 61 39 	call	0x72c2	; 0x72c2 <_ZN5Print5printEPKc>
     b18:	6f ee       	ldi	r22, 0xEF	; 239
     b1a:	71 e0       	ldi	r23, 0x01	; 1
     b1c:	8e e2       	ldi	r24, 0x2E	; 46
     b1e:	9d e0       	ldi	r25, 0x0D	; 13
     b20:	0e 94 8c 39 	call	0x7318	; 0x7318 <_ZN5Print7printlnEPKc>
     b24:	be 01       	movw	r22, r28
     b26:	63 5e       	subi	r22, 0xE3	; 227
     b28:	7f 4f       	sbci	r23, 0xFF	; 255
     b2a:	c5 01       	movw	r24, r10
     b2c:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringC1EOS_>
     b30:	ce 01       	movw	r24, r28
     b32:	4d 96       	adiw	r24, 0x1d	; 29
     b34:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
     b38:	c5 01       	movw	r24, r10
     b3a:	a2 96       	adiw	r28, 0x22	; 34
     b3c:	0f b6       	in	r0, 0x3f	; 63
     b3e:	f8 94       	cli
     b40:	de bf       	out	0x3e, r29	; 62
     b42:	0f be       	out	0x3f, r0	; 63
     b44:	cd bf       	out	0x3d, r28	; 61
     b46:	df 91       	pop	r29
     b48:	cf 91       	pop	r28
     b4a:	1f 91       	pop	r17
     b4c:	0f 91       	pop	r16
     b4e:	ef 90       	pop	r14
     b50:	df 90       	pop	r13
     b52:	cf 90       	pop	r12
     b54:	bf 90       	pop	r11
     b56:	af 90       	pop	r10
     b58:	08 95       	ret

00000b5a <_Z14GetCodeRfidATev>:
     b5a:	cf 92       	push	r12
     b5c:	df 92       	push	r13
     b5e:	ef 92       	push	r14
     b60:	ff 92       	push	r15
     b62:	0f 93       	push	r16
     b64:	1f 93       	push	r17
     b66:	cf 93       	push	r28
     b68:	df 93       	push	r29
     b6a:	cd b7       	in	r28, 0x3d	; 61
     b6c:	de b7       	in	r29, 0x3e	; 62
     b6e:	64 97       	sbiw	r28, 0x14	; 20
     b70:	0f b6       	in	r0, 0x3f	; 63
     b72:	f8 94       	cli
     b74:	de bf       	out	0x3e, r29	; 62
     b76:	0f be       	out	0x3f, r0	; 63
     b78:	cd bf       	out	0x3d, r28	; 61
     b7a:	7c 01       	movw	r14, r24
     b7c:	ce 01       	movw	r24, r28
     b7e:	01 96       	adiw	r24, 0x01	; 1
     b80:	6c 01       	movw	r12, r24
     b82:	87 e0       	ldi	r24, 0x07	; 7
     b84:	f6 01       	movw	r30, r12
     b86:	11 92       	st	Z+, r1
     b88:	8a 95       	dec	r24
     b8a:	e9 f7       	brne	.-6      	; 0xb86 <_Z14GetCodeRfidATev+0x2c>
     b8c:	69 e8       	ldi	r22, 0x89	; 137
     b8e:	72 e0       	ldi	r23, 0x02	; 2
     b90:	c7 01       	movw	r24, r14
     b92:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
     b96:	08 ee       	ldi	r16, 0xE8	; 232
     b98:	13 e0       	ldi	r17, 0x03	; 3
     b9a:	9e 01       	movw	r18, r28
     b9c:	2c 5e       	subi	r18, 0xEC	; 236
     b9e:	3f 4f       	sbci	r19, 0xFF	; 255
     ba0:	a6 01       	movw	r20, r12
     ba2:	60 e0       	ldi	r22, 0x00	; 0
     ba4:	80 e5       	ldi	r24, 0x50	; 80
     ba6:	9b e0       	ldi	r25, 0x0B	; 11
     ba8:	0e 94 d7 20 	call	0x41ae	; 0x41ae <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j>
     bac:	88 23       	and	r24, r24
     bae:	59 f1       	breq	.+86     	; 0xc06 <_Z14GetCodeRfidATev+0xac>
     bb0:	0c 89       	ldd	r16, Y+20	; 0x14
     bb2:	10 e0       	ldi	r17, 0x00	; 0
     bb4:	20 e0       	ldi	r18, 0x00	; 0
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	a6 01       	movw	r20, r12
     bba:	60 e5       	ldi	r22, 0x50	; 80
     bbc:	7b e0       	ldi	r23, 0x0B	; 11
     bbe:	ce 01       	movw	r24, r28
     bc0:	0e 96       	adiw	r24, 0x0e	; 14
     bc2:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <_ZN9NFC_PN53210GetHexCodeEPKhm>
     bc6:	ce 01       	movw	r24, r28
     bc8:	0e 96       	adiw	r24, 0x0e	; 14
     bca:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <_ZN6String4trimEv>
     bce:	28 e0       	ldi	r18, 0x08	; 8
     bd0:	30 e0       	ldi	r19, 0x00	; 0
     bd2:	40 e0       	ldi	r20, 0x00	; 0
     bd4:	50 e0       	ldi	r21, 0x00	; 0
     bd6:	be 01       	movw	r22, r28
     bd8:	62 5f       	subi	r22, 0xF2	; 242
     bda:	7f 4f       	sbci	r23, 0xFF	; 255
     bdc:	ce 01       	movw	r24, r28
     bde:	08 96       	adiw	r24, 0x08	; 8
     be0:	0e 94 7c 3e 	call	0x7cf8	; 0x7cf8 <_ZNK6String9substringEjj>
     be4:	be 01       	movw	r22, r28
     be6:	68 5f       	subi	r22, 0xF8	; 248
     be8:	7f 4f       	sbci	r23, 0xFF	; 255
     bea:	c7 01       	movw	r24, r14
     bec:	0e 94 9b 3c 	call	0x7936	; 0x7936 <_ZN6StringaSEOS_>
     bf0:	ce 01       	movw	r24, r28
     bf2:	08 96       	adiw	r24, 0x08	; 8
     bf4:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	80 93 7f 0b 	sts	0x0B7F, r24	; 0x800b7f <alreadyTimbrata>
     bfe:	ce 01       	movw	r24, r28
     c00:	0e 96       	adiw	r24, 0x0e	; 14
     c02:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
     c06:	c7 01       	movw	r24, r14
     c08:	64 96       	adiw	r28, 0x14	; 20
     c0a:	0f b6       	in	r0, 0x3f	; 63
     c0c:	f8 94       	cli
     c0e:	de bf       	out	0x3e, r29	; 62
     c10:	0f be       	out	0x3f, r0	; 63
     c12:	cd bf       	out	0x3d, r28	; 61
     c14:	df 91       	pop	r29
     c16:	cf 91       	pop	r28
     c18:	1f 91       	pop	r17
     c1a:	0f 91       	pop	r16
     c1c:	ff 90       	pop	r15
     c1e:	ef 90       	pop	r14
     c20:	df 90       	pop	r13
     c22:	cf 90       	pop	r12
     c24:	08 95       	ret

00000c26 <_Z19GetHTTPResponseCode6String>:
     c26:	ef 92       	push	r14
     c28:	ff 92       	push	r15
     c2a:	0f 93       	push	r16
     c2c:	1f 93       	push	r17
     c2e:	cf 93       	push	r28
     c30:	df 93       	push	r29
     c32:	cd b7       	in	r28, 0x3d	; 61
     c34:	de b7       	in	r29, 0x3e	; 62
     c36:	62 97       	sbiw	r28, 0x12	; 18
     c38:	0f b6       	in	r0, 0x3f	; 63
     c3a:	f8 94       	cli
     c3c:	de bf       	out	0x3e, r29	; 62
     c3e:	0f be       	out	0x3f, r0	; 63
     c40:	cd bf       	out	0x3d, r28	; 61
     c42:	8c 01       	movw	r16, r24
     c44:	7b 01       	movw	r14, r22
     c46:	60 e9       	ldi	r22, 0x90	; 144
     c48:	72 e0       	ldi	r23, 0x02	; 2
     c4a:	ce 01       	movw	r24, r28
     c4c:	0d 96       	adiw	r24, 0x0d	; 13
     c4e:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
     c52:	e0 db       	rcall	.-2112   	; 0x414 <_Z9printLinev>
     c54:	68 e9       	ldi	r22, 0x98	; 152
     c56:	72 e0       	ldi	r23, 0x02	; 2
     c58:	8e e2       	ldi	r24, 0x2E	; 46
     c5a:	9d e0       	ldi	r25, 0x0D	; 13
     c5c:	0e 94 8c 39 	call	0x7318	; 0x7318 <_ZN5Print7printlnEPKc>
     c60:	20 91 55 01 	lds	r18, 0x0155	; 0x800155 <HTTP_len_response>
     c64:	30 91 56 01 	lds	r19, 0x0156	; 0x800156 <HTTP_len_response+0x1>
     c68:	f7 01       	movw	r30, r14
     c6a:	84 81       	ldd	r24, Z+4	; 0x04
     c6c:	95 81       	ldd	r25, Z+5	; 0x05
     c6e:	28 17       	cp	r18, r24
     c70:	39 07       	cpc	r19, r25
     c72:	49 f5       	brne	.+82     	; 0xcc6 <_Z19GetHTTPResponseCode6String+0xa0>
     c74:	a9 01       	movw	r20, r18
     c76:	43 50       	subi	r20, 0x03	; 3
     c78:	51 09       	sbc	r21, r1
     c7a:	b7 01       	movw	r22, r14
     c7c:	ce 01       	movw	r24, r28
     c7e:	07 96       	adiw	r24, 0x07	; 7
     c80:	0e 94 7c 3e 	call	0x7cf8	; 0x7cf8 <_ZNK6String9substringEjj>
     c84:	60 eb       	ldi	r22, 0xB0	; 176
     c86:	72 e0       	ldi	r23, 0x02	; 2
     c88:	ce 01       	movw	r24, r28
     c8a:	01 96       	adiw	r24, 0x01	; 1
     c8c:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
     c90:	be 01       	movw	r22, r28
     c92:	69 5f       	subi	r22, 0xF9	; 249
     c94:	7f 4f       	sbci	r23, 0xFF	; 255
     c96:	ce 01       	movw	r24, r28
     c98:	01 96       	adiw	r24, 0x01	; 1
     c9a:	0e 94 fc 3d 	call	0x7bf8	; 0x7bf8 <_ZplRK15StringSumHelperRK6String>
     c9e:	bc 01       	movw	r22, r24
     ca0:	8e e2       	ldi	r24, 0x2E	; 46
     ca2:	9d e0       	ldi	r25, 0x0D	; 13
     ca4:	0e 94 7c 39 	call	0x72f8	; 0x72f8 <_ZN5Print7printlnERK6String>
     ca8:	ce 01       	movw	r24, r28
     caa:	01 96       	adiw	r24, 0x01	; 1
     cac:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
     cb0:	be 01       	movw	r22, r28
     cb2:	69 5f       	subi	r22, 0xF9	; 249
     cb4:	7f 4f       	sbci	r23, 0xFF	; 255
     cb6:	c8 01       	movw	r24, r16
     cb8:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringC1EOS_>
     cbc:	ce 01       	movw	r24, r28
     cbe:	07 96       	adiw	r24, 0x07	; 7
     cc0:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
     cc4:	09 c0       	rjmp	.+18     	; 0xcd8 <_Z19GetHTTPResponseCode6String+0xb2>
     cc6:	80 e0       	ldi	r24, 0x00	; 0
     cc8:	c9 db       	rcall	.-2158   	; 0x45c <_Z4passb>
     cca:	a4 db       	rcall	.-2232   	; 0x414 <_Z9printLinev>
     ccc:	be 01       	movw	r22, r28
     cce:	63 5f       	subi	r22, 0xF3	; 243
     cd0:	7f 4f       	sbci	r23, 0xFF	; 255
     cd2:	c8 01       	movw	r24, r16
     cd4:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringC1EOS_>
     cd8:	ce 01       	movw	r24, r28
     cda:	0d 96       	adiw	r24, 0x0d	; 13
     cdc:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
     ce0:	c8 01       	movw	r24, r16
     ce2:	62 96       	adiw	r28, 0x12	; 18
     ce4:	0f b6       	in	r0, 0x3f	; 63
     ce6:	f8 94       	cli
     ce8:	de bf       	out	0x3e, r29	; 62
     cea:	0f be       	out	0x3f, r0	; 63
     cec:	cd bf       	out	0x3d, r28	; 61
     cee:	df 91       	pop	r29
     cf0:	cf 91       	pop	r28
     cf2:	1f 91       	pop	r17
     cf4:	0f 91       	pop	r16
     cf6:	ff 90       	pop	r15
     cf8:	ef 90       	pop	r14
     cfa:	08 95       	ret

00000cfc <_Z11GetAteCheckiPc14EthernetClient6String>:
     cfc:	af 92       	push	r10
     cfe:	bf 92       	push	r11
     d00:	cf 92       	push	r12
     d02:	df 92       	push	r13
     d04:	ef 92       	push	r14
     d06:	ff 92       	push	r15
     d08:	0f 93       	push	r16
     d0a:	1f 93       	push	r17
     d0c:	cf 93       	push	r28
     d0e:	df 93       	push	r29
     d10:	cd b7       	in	r28, 0x3d	; 61
     d12:	de b7       	in	r29, 0x3e	; 62
     d14:	62 97       	sbiw	r28, 0x12	; 18
     d16:	0f b6       	in	r0, 0x3f	; 63
     d18:	f8 94       	cli
     d1a:	de bf       	out	0x3e, r29	; 62
     d1c:	0f be       	out	0x3f, r0	; 63
     d1e:	cd bf       	out	0x3d, r28	; 61
     d20:	5c 01       	movw	r10, r24
     d22:	7b 01       	movw	r14, r22
     d24:	8a 01       	movw	r16, r20
     d26:	69 01       	movw	r12, r18
     d28:	75 db       	rcall	.-2326   	; 0x414 <_Z9printLinev>
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	86 db       	rcall	.-2292   	; 0x43a <_Z8printTabh>
     d2e:	6a e9       	ldi	r22, 0x9A	; 154
     d30:	74 e0       	ldi	r23, 0x04	; 4
     d32:	8e e2       	ldi	r24, 0x2E	; 46
     d34:	9d e0       	ldi	r25, 0x0D	; 13
     d36:	0e 94 61 39 	call	0x72c2	; 0x72c2 <_ZN5Print5printEPKc>
     d3a:	a5 01       	movw	r20, r10
     d3c:	b7 01       	movw	r22, r14
     d3e:	c8 01       	movw	r24, r16
     d40:	0e 94 fa 28 	call	0x51f4	; 0x51f4 <_ZN14EthernetClient7connectEPKcj>
     d44:	89 2b       	or	r24, r25
     d46:	09 f4       	brne	.+2      	; 0xd4a <_Z11GetAteCheckiPc14EthernetClient6String+0x4e>
     d48:	c3 c0       	rjmp	.+390    	; 0xed0 <_Z11GetAteCheckiPc14EthernetClient6String+0x1d4>
     d4a:	2f ef       	ldi	r18, 0xFF	; 255
     d4c:	81 ee       	ldi	r24, 0xE1	; 225
     d4e:	94 e0       	ldi	r25, 0x04	; 4
     d50:	21 50       	subi	r18, 0x01	; 1
     d52:	80 40       	sbci	r24, 0x00	; 0
     d54:	90 40       	sbci	r25, 0x00	; 0
     d56:	e1 f7       	brne	.-8      	; 0xd50 <_Z11GetAteCheckiPc14EthernetClient6String+0x54>
     d58:	00 c0       	rjmp	.+0      	; 0xd5a <_Z11GetAteCheckiPc14EthernetClient6String+0x5e>
     d5a:	00 00       	nop
     d5c:	67 ed       	ldi	r22, 0xD7	; 215
     d5e:	74 e0       	ldi	r23, 0x04	; 4
     d60:	ce 01       	movw	r24, r28
     d62:	01 96       	adiw	r24, 0x01	; 1
     d64:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
     d68:	b6 01       	movw	r22, r12
     d6a:	ce 01       	movw	r24, r28
     d6c:	01 96       	adiw	r24, 0x01	; 1
     d6e:	0e 94 fc 3d 	call	0x7bf8	; 0x7bf8 <_ZplRK15StringSumHelperRK6String>
     d72:	61 e1       	ldi	r22, 0x11	; 17
     d74:	73 e0       	ldi	r23, 0x03	; 3
     d76:	0e 94 0d 3e 	call	0x7c1a	; 0x7c1a <_ZplRK15StringSumHelperPKc>
     d7a:	bc 01       	movw	r22, r24
     d7c:	84 e4       	ldi	r24, 0x44	; 68
     d7e:	9b e0       	ldi	r25, 0x0B	; 11
     d80:	0e 94 7e 3c 	call	0x78fc	; 0x78fc <_ZN6StringaSERKS_>
     d84:	ce 01       	movw	r24, r28
     d86:	01 96       	adiw	r24, 0x01	; 1
     d88:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
     d8c:	b7 01       	movw	r22, r14
     d8e:	ce 01       	movw	r24, r28
     d90:	01 96       	adiw	r24, 0x01	; 1
     d92:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
     d96:	64 e0       	ldi	r22, 0x04	; 4
     d98:	75 e0       	ldi	r23, 0x05	; 5
     d9a:	ce 01       	movw	r24, r28
     d9c:	07 96       	adiw	r24, 0x07	; 7
     d9e:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
     da2:	be 01       	movw	r22, r28
     da4:	6f 5f       	subi	r22, 0xFF	; 255
     da6:	7f 4f       	sbci	r23, 0xFF	; 255
     da8:	ce 01       	movw	r24, r28
     daa:	07 96       	adiw	r24, 0x07	; 7
     dac:	0e 94 fc 3d 	call	0x7bf8	; 0x7bf8 <_ZplRK15StringSumHelperRK6String>
     db0:	bc 01       	movw	r22, r24
     db2:	84 e4       	ldi	r24, 0x44	; 68
     db4:	9b e0       	ldi	r25, 0x0B	; 11
     db6:	0e 94 d6 3d 	call	0x7bac	; 0x7bac <_ZN6String6concatERKS_>
     dba:	ce 01       	movw	r24, r28
     dbc:	07 96       	adiw	r24, 0x07	; 7
     dbe:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
     dc2:	ce 01       	movw	r24, r28
     dc4:	01 96       	adiw	r24, 0x01	; 1
     dc6:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
     dca:	6a e1       	ldi	r22, 0x1A	; 26
     dcc:	73 e0       	ldi	r23, 0x03	; 3
     dce:	84 e4       	ldi	r24, 0x44	; 68
     dd0:	9b e0       	ldi	r25, 0x0B	; 11
     dd2:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <_ZN6String6concatEPKc>
     dd6:	61 e9       	ldi	r22, 0x91	; 145
     dd8:	73 e0       	ldi	r23, 0x03	; 3
     dda:	84 e4       	ldi	r24, 0x44	; 68
     ddc:	9b e0       	ldi	r25, 0x0B	; 11
     dde:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <_ZN6String6concatEPKc>
     de2:	6a e1       	ldi	r22, 0x1A	; 26
     de4:	73 e0       	ldi	r23, 0x03	; 3
     de6:	84 e4       	ldi	r24, 0x44	; 68
     de8:	9b e0       	ldi	r25, 0x0B	; 11
     dea:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <_ZN6String6concatEPKc>
     dee:	6b e3       	ldi	r22, 0x3B	; 59
     df0:	74 e0       	ldi	r23, 0x04	; 4
     df2:	84 e4       	ldi	r24, 0x44	; 68
     df4:	9b e0       	ldi	r25, 0x0B	; 11
     df6:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <_ZN6String6concatEPKc>
     dfa:	6a e1       	ldi	r22, 0x1A	; 26
     dfc:	73 e0       	ldi	r23, 0x03	; 3
     dfe:	84 e4       	ldi	r24, 0x44	; 68
     e00:	9b e0       	ldi	r25, 0x0B	; 11
     e02:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <_ZN6String6concatEPKc>
     e06:	6b e0       	ldi	r22, 0x0B	; 11
     e08:	75 e0       	ldi	r23, 0x05	; 5
     e0a:	84 e4       	ldi	r24, 0x44	; 68
     e0c:	9b e0       	ldi	r25, 0x0B	; 11
     e0e:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <_ZN6String6concatEPKc>
     e12:	6a e1       	ldi	r22, 0x1A	; 26
     e14:	73 e0       	ldi	r23, 0x03	; 3
     e16:	84 e4       	ldi	r24, 0x44	; 68
     e18:	9b e0       	ldi	r25, 0x0B	; 11
     e1a:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <_ZN6String6concatEPKc>
     e1e:	6a e1       	ldi	r22, 0x1A	; 26
     e20:	73 e0       	ldi	r23, 0x03	; 3
     e22:	84 e4       	ldi	r24, 0x44	; 68
     e24:	9b e0       	ldi	r25, 0x0B	; 11
     e26:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <_ZN6String6concatEPKc>
     e2a:	64 e4       	ldi	r22, 0x44	; 68
     e2c:	7b e0       	ldi	r23, 0x0B	; 11
     e2e:	8e e2       	ldi	r24, 0x2E	; 46
     e30:	9d e0       	ldi	r25, 0x0D	; 13
     e32:	0e 94 7c 39 	call	0x72f8	; 0x72f8 <_ZN5Print7printlnERK6String>
     e36:	64 e4       	ldi	r22, 0x44	; 68
     e38:	7b e0       	ldi	r23, 0x0B	; 11
     e3a:	c8 01       	movw	r24, r16
     e3c:	0e 94 53 39 	call	0x72a6	; 0x72a6 <_ZN5Print5printERK6String>
     e40:	2f ef       	ldi	r18, 0xFF	; 255
     e42:	81 ee       	ldi	r24, 0xE1	; 225
     e44:	94 e0       	ldi	r25, 0x04	; 4
     e46:	21 50       	subi	r18, 0x01	; 1
     e48:	80 40       	sbci	r24, 0x00	; 0
     e4a:	90 40       	sbci	r25, 0x00	; 0
     e4c:	e1 f7       	brne	.-8      	; 0xe46 <_Z11GetAteCheckiPc14EthernetClient6String+0x14a>
     e4e:	00 c0       	rjmp	.+0      	; 0xe50 <_Z11GetAteCheckiPc14EthernetClient6String+0x154>
     e50:	00 00       	nop
     e52:	6a e5       	ldi	r22, 0x5A	; 90
     e54:	74 e0       	ldi	r23, 0x04	; 4
     e56:	c8 01       	movw	r24, r16
     e58:	0e 94 8c 39 	call	0x7318	; 0x7318 <_ZN5Print7printlnEPKc>
     e5c:	c8 01       	movw	r24, r16
     e5e:	0e 94 69 39 	call	0x72d2	; 0x72d2 <_ZN5Print7printlnEv>
     e62:	8f e3       	ldi	r24, 0x3F	; 63
     e64:	9c e9       	ldi	r25, 0x9C	; 156
     e66:	01 97       	sbiw	r24, 0x01	; 1
     e68:	f1 f7       	brne	.-4      	; 0xe66 <_Z11GetAteCheckiPc14EthernetClient6String+0x16a>
     e6a:	00 c0       	rjmp	.+0      	; 0xe6c <_Z11GetAteCheckiPc14EthernetClient6String+0x170>
     e6c:	00 00       	nop
     e6e:	67 e1       	ldi	r22, 0x17	; 23
     e70:	75 e0       	ldi	r23, 0x05	; 5
     e72:	ce 01       	movw	r24, r28
     e74:	0d 96       	adiw	r24, 0x0d	; 13
     e76:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
     e7a:	c8 01       	movw	r24, r16
     e7c:	0e 94 71 29 	call	0x52e2	; 0x52e2 <_ZN14EthernetClient9availableEv>
     e80:	89 2b       	or	r24, r25
     e82:	09 f4       	brne	.+2      	; 0xe86 <_Z11GetAteCheckiPc14EthernetClient6String+0x18a>
     e84:	4c c0       	rjmp	.+152    	; 0xf1e <_Z11GetAteCheckiPc14EthernetClient6String+0x222>
     e86:	20 91 3d 0b 	lds	r18, 0x0B3D	; 0x800b3d <RispostaHTTP+0x4>
     e8a:	30 91 3e 0b 	lds	r19, 0x0B3E	; 0x800b3e <RispostaHTTP+0x5>
     e8e:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <HTTP_len_response>
     e92:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <HTTP_len_response+0x1>
     e96:	28 17       	cp	r18, r24
     e98:	39 07       	cpc	r19, r25
     e9a:	08 f0       	brcs	.+2      	; 0xe9e <_Z11GetAteCheckiPc14EthernetClient6String+0x1a2>
     e9c:	40 c0       	rjmp	.+128    	; 0xf1e <_Z11GetAteCheckiPc14EthernetClient6String+0x222>
     e9e:	c8 01       	movw	r24, r16
     ea0:	0e 94 7b 29 	call	0x52f6	; 0x52f6 <_ZN14EthernetClient4readEv>
     ea4:	f8 2e       	mov	r15, r24
     ea6:	69 e3       	ldi	r22, 0x39	; 57
     ea8:	7b e0       	ldi	r23, 0x0B	; 11
     eaa:	ce 01       	movw	r24, r28
     eac:	01 96       	adiw	r24, 0x01	; 1
     eae:	0e 94 93 3c 	call	0x7926	; 0x7926 <_ZN6StringC1ERKS_>
     eb2:	6f 2d       	mov	r22, r15
     eb4:	ce 01       	movw	r24, r28
     eb6:	01 96       	adiw	r24, 0x01	; 1
     eb8:	0e 94 24 3e 	call	0x7c48	; 0x7c48 <_ZplRK15StringSumHelperc>
     ebc:	bc 01       	movw	r22, r24
     ebe:	89 e3       	ldi	r24, 0x39	; 57
     ec0:	9b e0       	ldi	r25, 0x0B	; 11
     ec2:	0e 94 7e 3c 	call	0x78fc	; 0x78fc <_ZN6StringaSERKS_>
     ec6:	ce 01       	movw	r24, r28
     ec8:	01 96       	adiw	r24, 0x01	; 1
     eca:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
     ece:	d5 cf       	rjmp	.-86     	; 0xe7a <_Z11GetAteCheckiPc14EthernetClient6String+0x17e>
     ed0:	87 e6       	ldi	r24, 0x67	; 103
     ed2:	9b e0       	ldi	r25, 0x0B	; 11
     ed4:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <_ZN3LCD5clearEv>
     ed8:	41 e0       	ldi	r20, 0x01	; 1
     eda:	60 e0       	ldi	r22, 0x00	; 0
     edc:	87 e6       	ldi	r24, 0x67	; 103
     ede:	9b e0       	ldi	r25, 0x0B	; 11
     ee0:	0e 94 d7 30 	call	0x61ae	; 0x61ae <_ZN3LCD9setCursorEhh>
     ee4:	69 e1       	ldi	r22, 0x19	; 25
     ee6:	75 e0       	ldi	r23, 0x05	; 5
     ee8:	87 e6       	ldi	r24, 0x67	; 103
     eea:	9b e0       	ldi	r25, 0x0B	; 11
     eec:	0e 94 61 39 	call	0x72c2	; 0x72c2 <_ZN5Print5printEPKc>
     ef0:	43 e0       	ldi	r20, 0x03	; 3
     ef2:	60 e0       	ldi	r22, 0x00	; 0
     ef4:	87 e6       	ldi	r24, 0x67	; 103
     ef6:	9b e0       	ldi	r25, 0x0B	; 11
     ef8:	0e 94 d7 30 	call	0x61ae	; 0x61ae <_ZN3LCD9setCursorEhh>
     efc:	68 e2       	ldi	r22, 0x28	; 40
     efe:	75 e0       	ldi	r23, 0x05	; 5
     f00:	87 e6       	ldi	r24, 0x67	; 103
     f02:	9b e0       	ldi	r25, 0x0B	; 11
     f04:	0e 94 61 39 	call	0x72c2	; 0x72c2 <_ZN5Print5printEPKc>
     f08:	9f ef       	ldi	r25, 0xFF	; 255
     f0a:	23 ed       	ldi	r18, 0xD3	; 211
     f0c:	80 e3       	ldi	r24, 0x30	; 48
     f0e:	91 50       	subi	r25, 0x01	; 1
     f10:	20 40       	sbci	r18, 0x00	; 0
     f12:	80 40       	sbci	r24, 0x00	; 0
     f14:	e1 f7       	brne	.-8      	; 0xf0e <_Z11GetAteCheckiPc14EthernetClient6String+0x212>
     f16:	00 c0       	rjmp	.+0      	; 0xf18 <_Z11GetAteCheckiPc14EthernetClient6String+0x21c>
     f18:	00 00       	nop
     f1a:	80 e0       	ldi	r24, 0x00	; 0
     f1c:	38 c0       	rjmp	.+112    	; 0xf8e <_Z11GetAteCheckiPc14EthernetClient6String+0x292>
     f1e:	69 e3       	ldi	r22, 0x39	; 57
     f20:	7b e0       	ldi	r23, 0x0B	; 11
     f22:	ce 01       	movw	r24, r28
     f24:	07 96       	adiw	r24, 0x07	; 7
     f26:	0e 94 93 3c 	call	0x7926	; 0x7926 <_ZN6StringC1ERKS_>
     f2a:	be 01       	movw	r22, r28
     f2c:	69 5f       	subi	r22, 0xF9	; 249
     f2e:	7f 4f       	sbci	r23, 0xFF	; 255
     f30:	ce 01       	movw	r24, r28
     f32:	01 96       	adiw	r24, 0x01	; 1
     f34:	78 de       	rcall	.-784    	; 0xc26 <_Z19GetHTTPResponseCode6String>
     f36:	be 01       	movw	r22, r28
     f38:	6f 5f       	subi	r22, 0xFF	; 255
     f3a:	7f 4f       	sbci	r23, 0xFF	; 255
     f3c:	ce 01       	movw	r24, r28
     f3e:	0d 96       	adiw	r24, 0x0d	; 13
     f40:	0e 94 9b 3c 	call	0x7936	; 0x7936 <_ZN6StringaSEOS_>
     f44:	ce 01       	movw	r24, r28
     f46:	01 96       	adiw	r24, 0x01	; 1
     f48:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
     f4c:	ce 01       	movw	r24, r28
     f4e:	07 96       	adiw	r24, 0x07	; 7
     f50:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
     f54:	9f ef       	ldi	r25, 0xFF	; 255
     f56:	27 ee       	ldi	r18, 0xE7	; 231
     f58:	83 e0       	ldi	r24, 0x03	; 3
     f5a:	91 50       	subi	r25, 0x01	; 1
     f5c:	20 40       	sbci	r18, 0x00	; 0
     f5e:	80 40       	sbci	r24, 0x00	; 0
     f60:	e1 f7       	brne	.-8      	; 0xf5a <_Z11GetAteCheckiPc14EthernetClient6String+0x25e>
     f62:	00 c0       	rjmp	.+0      	; 0xf64 <_Z11GetAteCheckiPc14EthernetClient6String+0x268>
     f64:	00 00       	nop
     f66:	66 e9       	ldi	r22, 0x96	; 150
     f68:	74 e0       	ldi	r23, 0x04	; 4
     f6a:	ce 01       	movw	r24, r28
     f6c:	0d 96       	adiw	r24, 0x0d	; 13
     f6e:	0e 94 30 3e 	call	0x7c60	; 0x7c60 <_ZNK6String6equalsEPKc>
     f72:	88 23       	and	r24, r24
     f74:	51 f0       	breq	.+20     	; 0xf8a <_Z11GetAteCheckiPc14EthernetClient6String+0x28e>
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	71 da       	rcall	.-2846   	; 0x45c <_Z4passb>
     f7a:	4c da       	rcall	.-2920   	; 0x414 <_Z9printLinev>
     f7c:	11 e0       	ldi	r17, 0x01	; 1
     f7e:	ce 01       	movw	r24, r28
     f80:	0d 96       	adiw	r24, 0x0d	; 13
     f82:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
     f86:	81 2f       	mov	r24, r17
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <_Z11GetAteCheckiPc14EthernetClient6String+0x292>
     f8a:	10 e0       	ldi	r17, 0x00	; 0
     f8c:	f8 cf       	rjmp	.-16     	; 0xf7e <_Z11GetAteCheckiPc14EthernetClient6String+0x282>
     f8e:	62 96       	adiw	r28, 0x12	; 18
     f90:	0f b6       	in	r0, 0x3f	; 63
     f92:	f8 94       	cli
     f94:	de bf       	out	0x3e, r29	; 62
     f96:	0f be       	out	0x3f, r0	; 63
     f98:	cd bf       	out	0x3d, r28	; 61
     f9a:	df 91       	pop	r29
     f9c:	cf 91       	pop	r28
     f9e:	1f 91       	pop	r17
     fa0:	0f 91       	pop	r16
     fa2:	ff 90       	pop	r15
     fa4:	ef 90       	pop	r14
     fa6:	df 90       	pop	r13
     fa8:	cf 90       	pop	r12
     faa:	bf 90       	pop	r11
     fac:	af 90       	pop	r10
     fae:	08 95       	ret

00000fb0 <_Z17PostErogazioneGACiPc14EthernetClient6String>:
     fb0:	af 92       	push	r10
     fb2:	bf 92       	push	r11
     fb4:	cf 92       	push	r12
     fb6:	df 92       	push	r13
     fb8:	ef 92       	push	r14
     fba:	ff 92       	push	r15
     fbc:	0f 93       	push	r16
     fbe:	1f 93       	push	r17
     fc0:	cf 93       	push	r28
     fc2:	df 93       	push	r29
     fc4:	cd b7       	in	r28, 0x3d	; 61
     fc6:	de b7       	in	r29, 0x3e	; 62
     fc8:	62 97       	sbiw	r28, 0x12	; 18
     fca:	0f b6       	in	r0, 0x3f	; 63
     fcc:	f8 94       	cli
     fce:	de bf       	out	0x3e, r29	; 62
     fd0:	0f be       	out	0x3f, r0	; 63
     fd2:	cd bf       	out	0x3d, r28	; 61
     fd4:	5c 01       	movw	r10, r24
     fd6:	6b 01       	movw	r12, r22
     fd8:	8a 01       	movw	r16, r20
     fda:	79 01       	movw	r14, r18
     fdc:	1b da       	rcall	.-3018   	; 0x414 <_Z9printLinev>
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	2c da       	rcall	.-2984   	; 0x43a <_Z8printTabh>
     fe2:	6b e3       	ldi	r22, 0x3B	; 59
     fe4:	75 e0       	ldi	r23, 0x05	; 5
     fe6:	8e e2       	ldi	r24, 0x2E	; 46
     fe8:	9d e0       	ldi	r25, 0x0D	; 13
     fea:	0e 94 61 39 	call	0x72c2	; 0x72c2 <_ZN5Print5printEPKc>
     fee:	a5 01       	movw	r20, r10
     ff0:	b6 01       	movw	r22, r12
     ff2:	c8 01       	movw	r24, r16
     ff4:	0e 94 fa 28 	call	0x51f4	; 0x51f4 <_ZN14EthernetClient7connectEPKcj>
     ff8:	89 2b       	or	r24, r25
     ffa:	09 f4       	brne	.+2      	; 0xffe <_Z17PostErogazioneGACiPc14EthernetClient6String+0x4e>
     ffc:	e6 c0       	rjmp	.+460    	; 0x11ca <_Z17PostErogazioneGACiPc14EthernetClient6String+0x21a>
     ffe:	2f ef       	ldi	r18, 0xFF	; 255
    1000:	81 ee       	ldi	r24, 0xE1	; 225
    1002:	94 e0       	ldi	r25, 0x04	; 4
    1004:	21 50       	subi	r18, 0x01	; 1
    1006:	80 40       	sbci	r24, 0x00	; 0
    1008:	90 40       	sbci	r25, 0x00	; 0
    100a:	e1 f7       	brne	.-8      	; 0x1004 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x54>
    100c:	00 c0       	rjmp	.+0      	; 0x100e <_Z17PostErogazioneGACiPc14EthernetClient6String+0x5e>
    100e:	00 00       	nop
    1010:	6b e7       	ldi	r22, 0x7B	; 123
    1012:	75 e0       	ldi	r23, 0x05	; 5
    1014:	84 e4       	ldi	r24, 0x44	; 68
    1016:	9b e0       	ldi	r25, 0x0B	; 11
    1018:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringaSEPKc>
    101c:	b6 01       	movw	r22, r12
    101e:	ce 01       	movw	r24, r28
    1020:	01 96       	adiw	r24, 0x01	; 1
    1022:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
    1026:	64 e0       	ldi	r22, 0x04	; 4
    1028:	75 e0       	ldi	r23, 0x05	; 5
    102a:	ce 01       	movw	r24, r28
    102c:	07 96       	adiw	r24, 0x07	; 7
    102e:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
    1032:	be 01       	movw	r22, r28
    1034:	6f 5f       	subi	r22, 0xFF	; 255
    1036:	7f 4f       	sbci	r23, 0xFF	; 255
    1038:	ce 01       	movw	r24, r28
    103a:	07 96       	adiw	r24, 0x07	; 7
    103c:	0e 94 fc 3d 	call	0x7bf8	; 0x7bf8 <_ZplRK15StringSumHelperRK6String>
    1040:	bc 01       	movw	r22, r24
    1042:	84 e4       	ldi	r24, 0x44	; 68
    1044:	9b e0       	ldi	r25, 0x0B	; 11
    1046:	0e 94 d6 3d 	call	0x7bac	; 0x7bac <_ZN6String6concatERKS_>
    104a:	ce 01       	movw	r24, r28
    104c:	07 96       	adiw	r24, 0x07	; 7
    104e:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
    1052:	ce 01       	movw	r24, r28
    1054:	01 96       	adiw	r24, 0x01	; 1
    1056:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
    105a:	6a e1       	ldi	r22, 0x1A	; 26
    105c:	73 e0       	ldi	r23, 0x03	; 3
    105e:	84 e4       	ldi	r24, 0x44	; 68
    1060:	9b e0       	ldi	r25, 0x0B	; 11
    1062:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <_ZN6String6concatEPKc>
    1066:	61 e9       	ldi	r22, 0x91	; 145
    1068:	73 e0       	ldi	r23, 0x03	; 3
    106a:	84 e4       	ldi	r24, 0x44	; 68
    106c:	9b e0       	ldi	r25, 0x0B	; 11
    106e:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <_ZN6String6concatEPKc>
    1072:	6a e1       	ldi	r22, 0x1A	; 26
    1074:	73 e0       	ldi	r23, 0x03	; 3
    1076:	84 e4       	ldi	r24, 0x44	; 68
    1078:	9b e0       	ldi	r25, 0x0B	; 11
    107a:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <_ZN6String6concatEPKc>
    107e:	6b e3       	ldi	r22, 0x3B	; 59
    1080:	74 e0       	ldi	r23, 0x04	; 4
    1082:	84 e4       	ldi	r24, 0x44	; 68
    1084:	9b e0       	ldi	r25, 0x0B	; 11
    1086:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <_ZN6String6concatEPKc>
    108a:	6a e1       	ldi	r22, 0x1A	; 26
    108c:	73 e0       	ldi	r23, 0x03	; 3
    108e:	84 e4       	ldi	r24, 0x44	; 68
    1090:	9b e0       	ldi	r25, 0x0B	; 11
    1092:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <_ZN6String6concatEPKc>
    1096:	6b e0       	ldi	r22, 0x0B	; 11
    1098:	75 e0       	ldi	r23, 0x05	; 5
    109a:	84 e4       	ldi	r24, 0x44	; 68
    109c:	9b e0       	ldi	r25, 0x0B	; 11
    109e:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <_ZN6String6concatEPKc>
    10a2:	6a e1       	ldi	r22, 0x1A	; 26
    10a4:	73 e0       	ldi	r23, 0x03	; 3
    10a6:	84 e4       	ldi	r24, 0x44	; 68
    10a8:	9b e0       	ldi	r25, 0x0B	; 11
    10aa:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <_ZN6String6concatEPKc>
    10ae:	f7 01       	movw	r30, r14
    10b0:	64 81       	ldd	r22, Z+4	; 0x04
    10b2:	75 81       	ldd	r23, Z+5	; 0x05
    10b4:	6b 5e       	subi	r22, 0xEB	; 235
    10b6:	7f 4f       	sbci	r23, 0xFF	; 255
    10b8:	4a e0       	ldi	r20, 0x0A	; 10
    10ba:	ce 01       	movw	r24, r28
    10bc:	01 96       	adiw	r24, 0x01	; 1
    10be:	0e 94 27 3d 	call	0x7a4e	; 0x7a4e <_ZN6StringC1Ejh>
    10c2:	6d e9       	ldi	r22, 0x9D	; 157
    10c4:	75 e0       	ldi	r23, 0x05	; 5
    10c6:	ce 01       	movw	r24, r28
    10c8:	07 96       	adiw	r24, 0x07	; 7
    10ca:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
    10ce:	be 01       	movw	r22, r28
    10d0:	6f 5f       	subi	r22, 0xFF	; 255
    10d2:	7f 4f       	sbci	r23, 0xFF	; 255
    10d4:	ce 01       	movw	r24, r28
    10d6:	07 96       	adiw	r24, 0x07	; 7
    10d8:	0e 94 fc 3d 	call	0x7bf8	; 0x7bf8 <_ZplRK15StringSumHelperRK6String>
    10dc:	bc 01       	movw	r22, r24
    10de:	84 e4       	ldi	r24, 0x44	; 68
    10e0:	9b e0       	ldi	r25, 0x0B	; 11
    10e2:	0e 94 d6 3d 	call	0x7bac	; 0x7bac <_ZN6String6concatERKS_>
    10e6:	ce 01       	movw	r24, r28
    10e8:	07 96       	adiw	r24, 0x07	; 7
    10ea:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
    10ee:	ce 01       	movw	r24, r28
    10f0:	01 96       	adiw	r24, 0x01	; 1
    10f2:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
    10f6:	6a e1       	ldi	r22, 0x1A	; 26
    10f8:	73 e0       	ldi	r23, 0x03	; 3
    10fa:	84 e4       	ldi	r24, 0x44	; 68
    10fc:	9b e0       	ldi	r25, 0x0B	; 11
    10fe:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <_ZN6String6concatEPKc>
    1102:	6a e1       	ldi	r22, 0x1A	; 26
    1104:	73 e0       	ldi	r23, 0x03	; 3
    1106:	84 e4       	ldi	r24, 0x44	; 68
    1108:	9b e0       	ldi	r25, 0x0B	; 11
    110a:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <_ZN6String6concatEPKc>
    110e:	b7 01       	movw	r22, r14
    1110:	84 e4       	ldi	r24, 0x44	; 68
    1112:	9b e0       	ldi	r25, 0x0B	; 11
    1114:	0e 94 d6 3d 	call	0x7bac	; 0x7bac <_ZN6String6concatERKS_>
    1118:	6a e1       	ldi	r22, 0x1A	; 26
    111a:	73 e0       	ldi	r23, 0x03	; 3
    111c:	84 e4       	ldi	r24, 0x44	; 68
    111e:	9b e0       	ldi	r25, 0x0B	; 11
    1120:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <_ZN6String6concatEPKc>
    1124:	64 e4       	ldi	r22, 0x44	; 68
    1126:	7b e0       	ldi	r23, 0x0B	; 11
    1128:	8e e2       	ldi	r24, 0x2E	; 46
    112a:	9d e0       	ldi	r25, 0x0D	; 13
    112c:	0e 94 7c 39 	call	0x72f8	; 0x72f8 <_ZN5Print7printlnERK6String>
    1130:	64 e4       	ldi	r22, 0x44	; 68
    1132:	7b e0       	ldi	r23, 0x0B	; 11
    1134:	c8 01       	movw	r24, r16
    1136:	0e 94 53 39 	call	0x72a6	; 0x72a6 <_ZN5Print5printERK6String>
    113a:	ff ef       	ldi	r31, 0xFF	; 255
    113c:	21 ee       	ldi	r18, 0xE1	; 225
    113e:	84 e0       	ldi	r24, 0x04	; 4
    1140:	f1 50       	subi	r31, 0x01	; 1
    1142:	20 40       	sbci	r18, 0x00	; 0
    1144:	80 40       	sbci	r24, 0x00	; 0
    1146:	e1 f7       	brne	.-8      	; 0x1140 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x190>
    1148:	00 c0       	rjmp	.+0      	; 0x114a <_Z17PostErogazioneGACiPc14EthernetClient6String+0x19a>
    114a:	00 00       	nop
    114c:	6a e5       	ldi	r22, 0x5A	; 90
    114e:	74 e0       	ldi	r23, 0x04	; 4
    1150:	c8 01       	movw	r24, r16
    1152:	0e 94 8c 39 	call	0x7318	; 0x7318 <_ZN5Print7printlnEPKc>
    1156:	c8 01       	movw	r24, r16
    1158:	0e 94 69 39 	call	0x72d2	; 0x72d2 <_ZN5Print7printlnEv>
    115c:	ef e3       	ldi	r30, 0x3F	; 63
    115e:	fc e9       	ldi	r31, 0x9C	; 156
    1160:	31 97       	sbiw	r30, 0x01	; 1
    1162:	f1 f7       	brne	.-4      	; 0x1160 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x1b0>
    1164:	00 c0       	rjmp	.+0      	; 0x1166 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x1b6>
    1166:	00 00       	nop
    1168:	67 e1       	ldi	r22, 0x17	; 23
    116a:	75 e0       	ldi	r23, 0x05	; 5
    116c:	ce 01       	movw	r24, r28
    116e:	0d 96       	adiw	r24, 0x0d	; 13
    1170:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
    1174:	c8 01       	movw	r24, r16
    1176:	0e 94 71 29 	call	0x52e2	; 0x52e2 <_ZN14EthernetClient9availableEv>
    117a:	89 2b       	or	r24, r25
    117c:	09 f4       	brne	.+2      	; 0x1180 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x1d0>
    117e:	4c c0       	rjmp	.+152    	; 0x1218 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x268>
    1180:	20 91 3d 0b 	lds	r18, 0x0B3D	; 0x800b3d <RispostaHTTP+0x4>
    1184:	30 91 3e 0b 	lds	r19, 0x0B3E	; 0x800b3e <RispostaHTTP+0x5>
    1188:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <HTTP_len_response>
    118c:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <HTTP_len_response+0x1>
    1190:	28 17       	cp	r18, r24
    1192:	39 07       	cpc	r19, r25
    1194:	08 f0       	brcs	.+2      	; 0x1198 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x1e8>
    1196:	40 c0       	rjmp	.+128    	; 0x1218 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x268>
    1198:	c8 01       	movw	r24, r16
    119a:	0e 94 7b 29 	call	0x52f6	; 0x52f6 <_ZN14EthernetClient4readEv>
    119e:	f8 2e       	mov	r15, r24
    11a0:	69 e3       	ldi	r22, 0x39	; 57
    11a2:	7b e0       	ldi	r23, 0x0B	; 11
    11a4:	ce 01       	movw	r24, r28
    11a6:	01 96       	adiw	r24, 0x01	; 1
    11a8:	0e 94 93 3c 	call	0x7926	; 0x7926 <_ZN6StringC1ERKS_>
    11ac:	6f 2d       	mov	r22, r15
    11ae:	ce 01       	movw	r24, r28
    11b0:	01 96       	adiw	r24, 0x01	; 1
    11b2:	0e 94 24 3e 	call	0x7c48	; 0x7c48 <_ZplRK15StringSumHelperc>
    11b6:	bc 01       	movw	r22, r24
    11b8:	89 e3       	ldi	r24, 0x39	; 57
    11ba:	9b e0       	ldi	r25, 0x0B	; 11
    11bc:	0e 94 7e 3c 	call	0x78fc	; 0x78fc <_ZN6StringaSERKS_>
    11c0:	ce 01       	movw	r24, r28
    11c2:	01 96       	adiw	r24, 0x01	; 1
    11c4:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
    11c8:	d5 cf       	rjmp	.-86     	; 0x1174 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x1c4>
    11ca:	87 e6       	ldi	r24, 0x67	; 103
    11cc:	9b e0       	ldi	r25, 0x0B	; 11
    11ce:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <_ZN3LCD5clearEv>
    11d2:	41 e0       	ldi	r20, 0x01	; 1
    11d4:	60 e0       	ldi	r22, 0x00	; 0
    11d6:	87 e6       	ldi	r24, 0x67	; 103
    11d8:	9b e0       	ldi	r25, 0x0B	; 11
    11da:	0e 94 d7 30 	call	0x61ae	; 0x61ae <_ZN3LCD9setCursorEhh>
    11de:	6c e6       	ldi	r22, 0x6C	; 108
    11e0:	74 e0       	ldi	r23, 0x04	; 4
    11e2:	87 e6       	ldi	r24, 0x67	; 103
    11e4:	9b e0       	ldi	r25, 0x0B	; 11
    11e6:	0e 94 61 39 	call	0x72c2	; 0x72c2 <_ZN5Print5printEPKc>
    11ea:	43 e0       	ldi	r20, 0x03	; 3
    11ec:	60 e0       	ldi	r22, 0x00	; 0
    11ee:	87 e6       	ldi	r24, 0x67	; 103
    11f0:	9b e0       	ldi	r25, 0x0B	; 11
    11f2:	0e 94 d7 30 	call	0x61ae	; 0x61ae <_ZN3LCD9setCursorEhh>
    11f6:	61 e8       	ldi	r22, 0x81	; 129
    11f8:	74 e0       	ldi	r23, 0x04	; 4
    11fa:	87 e6       	ldi	r24, 0x67	; 103
    11fc:	9b e0       	ldi	r25, 0x0B	; 11
    11fe:	0e 94 61 39 	call	0x72c2	; 0x72c2 <_ZN5Print5printEPKc>
    1202:	ff ef       	ldi	r31, 0xFF	; 255
    1204:	23 ed       	ldi	r18, 0xD3	; 211
    1206:	80 e3       	ldi	r24, 0x30	; 48
    1208:	f1 50       	subi	r31, 0x01	; 1
    120a:	20 40       	sbci	r18, 0x00	; 0
    120c:	80 40       	sbci	r24, 0x00	; 0
    120e:	e1 f7       	brne	.-8      	; 0x1208 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x258>
    1210:	00 c0       	rjmp	.+0      	; 0x1212 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x262>
    1212:	00 00       	nop
    1214:	80 e0       	ldi	r24, 0x00	; 0
    1216:	38 c0       	rjmp	.+112    	; 0x1288 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x2d8>
    1218:	69 e3       	ldi	r22, 0x39	; 57
    121a:	7b e0       	ldi	r23, 0x0B	; 11
    121c:	ce 01       	movw	r24, r28
    121e:	07 96       	adiw	r24, 0x07	; 7
    1220:	0e 94 93 3c 	call	0x7926	; 0x7926 <_ZN6StringC1ERKS_>
    1224:	be 01       	movw	r22, r28
    1226:	69 5f       	subi	r22, 0xF9	; 249
    1228:	7f 4f       	sbci	r23, 0xFF	; 255
    122a:	ce 01       	movw	r24, r28
    122c:	01 96       	adiw	r24, 0x01	; 1
    122e:	fb dc       	rcall	.-1546   	; 0xc26 <_Z19GetHTTPResponseCode6String>
    1230:	be 01       	movw	r22, r28
    1232:	6f 5f       	subi	r22, 0xFF	; 255
    1234:	7f 4f       	sbci	r23, 0xFF	; 255
    1236:	ce 01       	movw	r24, r28
    1238:	0d 96       	adiw	r24, 0x0d	; 13
    123a:	0e 94 9b 3c 	call	0x7936	; 0x7936 <_ZN6StringaSEOS_>
    123e:	ce 01       	movw	r24, r28
    1240:	01 96       	adiw	r24, 0x01	; 1
    1242:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
    1246:	ce 01       	movw	r24, r28
    1248:	07 96       	adiw	r24, 0x07	; 7
    124a:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
    124e:	9f ef       	ldi	r25, 0xFF	; 255
    1250:	e7 ee       	ldi	r30, 0xE7	; 231
    1252:	f3 e0       	ldi	r31, 0x03	; 3
    1254:	91 50       	subi	r25, 0x01	; 1
    1256:	e0 40       	sbci	r30, 0x00	; 0
    1258:	f0 40       	sbci	r31, 0x00	; 0
    125a:	e1 f7       	brne	.-8      	; 0x1254 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x2a4>
    125c:	00 c0       	rjmp	.+0      	; 0x125e <_Z17PostErogazioneGACiPc14EthernetClient6String+0x2ae>
    125e:	00 00       	nop
    1260:	66 e9       	ldi	r22, 0x96	; 150
    1262:	74 e0       	ldi	r23, 0x04	; 4
    1264:	ce 01       	movw	r24, r28
    1266:	0d 96       	adiw	r24, 0x0d	; 13
    1268:	0e 94 30 3e 	call	0x7c60	; 0x7c60 <_ZNK6String6equalsEPKc>
    126c:	88 23       	and	r24, r24
    126e:	51 f0       	breq	.+20     	; 0x1284 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x2d4>
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	f4 d8       	rcall	.-3608   	; 0x45c <_Z4passb>
    1274:	cf d8       	rcall	.-3682   	; 0x414 <_Z9printLinev>
    1276:	11 e0       	ldi	r17, 0x01	; 1
    1278:	ce 01       	movw	r24, r28
    127a:	0d 96       	adiw	r24, 0x0d	; 13
    127c:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
    1280:	81 2f       	mov	r24, r17
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x2d8>
    1284:	10 e0       	ldi	r17, 0x00	; 0
    1286:	f8 cf       	rjmp	.-16     	; 0x1278 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x2c8>
    1288:	62 96       	adiw	r28, 0x12	; 18
    128a:	0f b6       	in	r0, 0x3f	; 63
    128c:	f8 94       	cli
    128e:	de bf       	out	0x3e, r29	; 62
    1290:	0f be       	out	0x3f, r0	; 63
    1292:	cd bf       	out	0x3d, r28	; 61
    1294:	df 91       	pop	r29
    1296:	cf 91       	pop	r28
    1298:	1f 91       	pop	r17
    129a:	0f 91       	pop	r16
    129c:	ff 90       	pop	r15
    129e:	ef 90       	pop	r14
    12a0:	df 90       	pop	r13
    12a2:	cf 90       	pop	r12
    12a4:	bf 90       	pop	r11
    12a6:	af 90       	pop	r10
    12a8:	08 95       	ret

000012aa <_Z15abilitaPulsantiv>:
    12aa:	57 98       	cbi	0x0a, 7	; 10
    12ac:	56 98       	cbi	0x0a, 6	; 10
    12ae:	88 e0       	ldi	r24, 0x08	; 8
    12b0:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    12b4:	80 ec       	ldi	r24, 0xC0	; 192
    12b6:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    12ba:	78 94       	sei
    12bc:	08 95       	ret

000012be <_Z22abilitaContattiPistolav>:
    12be:	09 98       	cbi	0x01, 1	; 1
    12c0:	0a 98       	cbi	0x01, 2	; 1
    12c2:	08 95       	ret

000012c4 <_Z13abilitaPulserc>:
    12c4:	2f ef       	ldi	r18, 0xFF	; 255
    12c6:	3f e0       	ldi	r19, 0x0F	; 15
    12c8:	97 e2       	ldi	r25, 0x27	; 39
    12ca:	21 50       	subi	r18, 0x01	; 1
    12cc:	30 40       	sbci	r19, 0x00	; 0
    12ce:	90 40       	sbci	r25, 0x00	; 0
    12d0:	e1 f7       	brne	.-8      	; 0x12ca <_Z13abilitaPulserc+0x6>
    12d2:	00 c0       	rjmp	.+0      	; 0x12d4 <_Z13abilitaPulserc+0x10>
    12d4:	00 00       	nop
    12d6:	91 e0       	ldi	r25, 0x01	; 1
    12d8:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    12dc:	84 34       	cpi	r24, 0x44	; 68
    12de:	19 f4       	brne	.+6      	; 0x12e6 <_Z13abilitaPulserc+0x22>
    12e0:	0d 98       	cbi	0x01, 5	; 1
    12e2:	80 e2       	ldi	r24, 0x20	; 32
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <_Z13abilitaPulserc+0x26>
    12e6:	0e 98       	cbi	0x01, 6	; 1
    12e8:	80 e4       	ldi	r24, 0x40	; 64
    12ea:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
    12ee:	78 94       	sei
    12f0:	08 95       	ret

000012f2 <_Z16disabilitaPulserc>:
    12f2:	2f ef       	ldi	r18, 0xFF	; 255
    12f4:	31 ee       	ldi	r19, 0xE1	; 225
    12f6:	94 e0       	ldi	r25, 0x04	; 4
    12f8:	21 50       	subi	r18, 0x01	; 1
    12fa:	30 40       	sbci	r19, 0x00	; 0
    12fc:	90 40       	sbci	r25, 0x00	; 0
    12fe:	e1 f7       	brne	.-8      	; 0x12f8 <_Z16disabilitaPulserc+0x6>
    1300:	00 c0       	rjmp	.+0      	; 0x1302 <_Z16disabilitaPulserc+0x10>
    1302:	00 00       	nop
    1304:	91 e0       	ldi	r25, 0x01	; 1
    1306:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    130a:	84 34       	cpi	r24, 0x44	; 68
    130c:	11 f4       	brne	.+4      	; 0x1312 <_Z16disabilitaPulserc+0x20>
    130e:	0d 98       	cbi	0x01, 5	; 1
    1310:	01 c0       	rjmp	.+2      	; 0x1314 <_Z16disabilitaPulserc+0x22>
    1312:	0e 98       	cbi	0x01, 6	; 1
    1314:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
    1318:	f8 94       	cli
    131a:	08 95       	ret

0000131c <_Z14impulsiToLitrii>:
    131c:	cf 92       	push	r12
    131e:	df 92       	push	r13
    1320:	ef 92       	push	r14
    1322:	ff 92       	push	r15
    1324:	bc 01       	movw	r22, r24
    1326:	99 0f       	add	r25, r25
    1328:	88 0b       	sbc	r24, r24
    132a:	99 0b       	sbc	r25, r25
    132c:	0e 94 46 37 	call	0x6e8c	; 0x6e8c <__floatsisf>
    1330:	6b 01       	movw	r12, r22
    1332:	7c 01       	movw	r14, r24
    1334:	20 e0       	ldi	r18, 0x00	; 0
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	a9 01       	movw	r20, r18
    133a:	0e 94 d8 36 	call	0x6db0	; 0x6db0 <__cmpsf2>
    133e:	87 ff       	sbrs	r24, 7
    1340:	03 c0       	rjmp	.+6      	; 0x1348 <_Z14impulsiToLitrii+0x2c>
    1342:	c1 2c       	mov	r12, r1
    1344:	d1 2c       	mov	r13, r1
    1346:	76 01       	movw	r14, r12
    1348:	60 91 53 01 	lds	r22, 0x0153	; 0x800153 <ImpulsiLitro>
    134c:	70 91 54 01 	lds	r23, 0x0154	; 0x800154 <ImpulsiLitro+0x1>
    1350:	07 2e       	mov	r0, r23
    1352:	00 0c       	add	r0, r0
    1354:	88 0b       	sbc	r24, r24
    1356:	99 0b       	sbc	r25, r25
    1358:	0e 94 46 37 	call	0x6e8c	; 0x6e8c <__floatsisf>
    135c:	9b 01       	movw	r18, r22
    135e:	ac 01       	movw	r20, r24
    1360:	c7 01       	movw	r24, r14
    1362:	b6 01       	movw	r22, r12
    1364:	0e 94 dc 36 	call	0x6db8	; 0x6db8 <__divsf3>
    1368:	ff 90       	pop	r15
    136a:	ef 90       	pop	r14
    136c:	df 90       	pop	r13
    136e:	cf 90       	pop	r12
    1370:	08 95       	ret

00001372 <_Z18Rele_Abilitazione1ii>:
    1372:	3f 9a       	sbi	0x07, 7	; 7
    1374:	81 30       	cpi	r24, 0x01	; 1
    1376:	91 05       	cpc	r25, r1
    1378:	71 f0       	breq	.+28     	; 0x1396 <_Z18Rele_Abilitazione1ii+0x24>
    137a:	82 30       	cpi	r24, 0x02	; 2
    137c:	91 05       	cpc	r25, r1
    137e:	e1 f0       	breq	.+56     	; 0x13b8 <_Z18Rele_Abilitazione1ii+0x46>
    1380:	89 2b       	or	r24, r25
    1382:	89 f5       	brne	.+98     	; 0x13e6 <_Z18Rele_Abilitazione1ii+0x74>
    1384:	47 98       	cbi	0x08, 7	; 8
    1386:	2f ef       	ldi	r18, 0xFF	; 255
    1388:	30 e7       	ldi	r19, 0x70	; 112
    138a:	42 e0       	ldi	r20, 0x02	; 2
    138c:	21 50       	subi	r18, 0x01	; 1
    138e:	30 40       	sbci	r19, 0x00	; 0
    1390:	40 40       	sbci	r20, 0x00	; 0
    1392:	e1 f7       	brne	.-8      	; 0x138c <_Z18Rele_Abilitazione1ii+0x1a>
    1394:	0e c0       	rjmp	.+28     	; 0x13b2 <_Z18Rele_Abilitazione1ii+0x40>
    1396:	28 b1       	in	r18, 0x08	; 8
    1398:	01 c0       	rjmp	.+2      	; 0x139c <_Z18Rele_Abilitazione1ii+0x2a>
    139a:	88 0f       	add	r24, r24
    139c:	6a 95       	dec	r22
    139e:	ea f7       	brpl	.-6      	; 0x139a <_Z18Rele_Abilitazione1ii+0x28>
    13a0:	82 2b       	or	r24, r18
    13a2:	88 b9       	out	0x08, r24	; 8
    13a4:	8f ef       	ldi	r24, 0xFF	; 255
    13a6:	90 e7       	ldi	r25, 0x70	; 112
    13a8:	22 e0       	ldi	r18, 0x02	; 2
    13aa:	81 50       	subi	r24, 0x01	; 1
    13ac:	90 40       	sbci	r25, 0x00	; 0
    13ae:	20 40       	sbci	r18, 0x00	; 0
    13b0:	e1 f7       	brne	.-8      	; 0x13aa <_Z18Rele_Abilitazione1ii+0x38>
    13b2:	00 c0       	rjmp	.+0      	; 0x13b4 <_Z18Rele_Abilitazione1ii+0x42>
    13b4:	00 00       	nop
    13b6:	08 95       	ret
    13b8:	28 b1       	in	r18, 0x08	; 8
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	01 c0       	rjmp	.+2      	; 0x13c2 <_Z18Rele_Abilitazione1ii+0x50>
    13c0:	88 0f       	add	r24, r24
    13c2:	6a 95       	dec	r22
    13c4:	ea f7       	brpl	.-6      	; 0x13c0 <_Z18Rele_Abilitazione1ii+0x4e>
    13c6:	98 2f       	mov	r25, r24
    13c8:	90 95       	com	r25
    13ca:	92 23       	and	r25, r18
    13cc:	98 b9       	out	0x08, r25	; 8
    13ce:	3f ef       	ldi	r19, 0xFF	; 255
    13d0:	45 ea       	ldi	r20, 0xA5	; 165
    13d2:	2e e0       	ldi	r18, 0x0E	; 14
    13d4:	31 50       	subi	r19, 0x01	; 1
    13d6:	40 40       	sbci	r20, 0x00	; 0
    13d8:	20 40       	sbci	r18, 0x00	; 0
    13da:	e1 f7       	brne	.-8      	; 0x13d4 <_Z18Rele_Abilitazione1ii+0x62>
    13dc:	00 c0       	rjmp	.+0      	; 0x13de <_Z18Rele_Abilitazione1ii+0x6c>
    13de:	00 00       	nop
    13e0:	98 b1       	in	r25, 0x08	; 8
    13e2:	89 2b       	or	r24, r25
    13e4:	88 b9       	out	0x08, r24	; 8
    13e6:	08 95       	ret

000013e8 <_Z18Rele_Abilitazione2ii>:
    13e8:	0f 9a       	sbi	0x01, 7	; 1
    13ea:	81 30       	cpi	r24, 0x01	; 1
    13ec:	91 05       	cpc	r25, r1
    13ee:	b9 f0       	breq	.+46     	; 0x141e <_Z18Rele_Abilitazione2ii+0x36>
    13f0:	82 30       	cpi	r24, 0x02	; 2
    13f2:	91 05       	cpc	r25, r1
    13f4:	29 f1       	breq	.+74     	; 0x1440 <_Z18Rele_Abilitazione2ii+0x58>
    13f6:	89 2b       	or	r24, r25
    13f8:	d1 f5       	brne	.+116    	; 0x146e <_Z18Rele_Abilitazione2ii+0x86>
    13fa:	22 b1       	in	r18, 0x02	; 2
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	01 c0       	rjmp	.+2      	; 0x1404 <_Z18Rele_Abilitazione2ii+0x1c>
    1402:	88 0f       	add	r24, r24
    1404:	6a 95       	dec	r22
    1406:	ea f7       	brpl	.-6      	; 0x1402 <_Z18Rele_Abilitazione2ii+0x1a>
    1408:	80 95       	com	r24
    140a:	82 23       	and	r24, r18
    140c:	82 b9       	out	0x02, r24	; 2
    140e:	2f ef       	ldi	r18, 0xFF	; 255
    1410:	30 e7       	ldi	r19, 0x70	; 112
    1412:	42 e0       	ldi	r20, 0x02	; 2
    1414:	21 50       	subi	r18, 0x01	; 1
    1416:	30 40       	sbci	r19, 0x00	; 0
    1418:	40 40       	sbci	r20, 0x00	; 0
    141a:	e1 f7       	brne	.-8      	; 0x1414 <_Z18Rele_Abilitazione2ii+0x2c>
    141c:	0e c0       	rjmp	.+28     	; 0x143a <_Z18Rele_Abilitazione2ii+0x52>
    141e:	22 b1       	in	r18, 0x02	; 2
    1420:	01 c0       	rjmp	.+2      	; 0x1424 <_Z18Rele_Abilitazione2ii+0x3c>
    1422:	88 0f       	add	r24, r24
    1424:	6a 95       	dec	r22
    1426:	ea f7       	brpl	.-6      	; 0x1422 <_Z18Rele_Abilitazione2ii+0x3a>
    1428:	82 2b       	or	r24, r18
    142a:	82 b9       	out	0x02, r24	; 2
    142c:	8f ef       	ldi	r24, 0xFF	; 255
    142e:	90 e7       	ldi	r25, 0x70	; 112
    1430:	22 e0       	ldi	r18, 0x02	; 2
    1432:	81 50       	subi	r24, 0x01	; 1
    1434:	90 40       	sbci	r25, 0x00	; 0
    1436:	20 40       	sbci	r18, 0x00	; 0
    1438:	e1 f7       	brne	.-8      	; 0x1432 <_Z18Rele_Abilitazione2ii+0x4a>
    143a:	00 c0       	rjmp	.+0      	; 0x143c <_Z18Rele_Abilitazione2ii+0x54>
    143c:	00 00       	nop
    143e:	08 95       	ret
    1440:	22 b1       	in	r18, 0x02	; 2
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	01 c0       	rjmp	.+2      	; 0x144a <_Z18Rele_Abilitazione2ii+0x62>
    1448:	88 0f       	add	r24, r24
    144a:	6a 95       	dec	r22
    144c:	ea f7       	brpl	.-6      	; 0x1448 <_Z18Rele_Abilitazione2ii+0x60>
    144e:	98 2f       	mov	r25, r24
    1450:	90 95       	com	r25
    1452:	92 23       	and	r25, r18
    1454:	92 b9       	out	0x02, r25	; 2
    1456:	3f ef       	ldi	r19, 0xFF	; 255
    1458:	45 ea       	ldi	r20, 0xA5	; 165
    145a:	2e e0       	ldi	r18, 0x0E	; 14
    145c:	31 50       	subi	r19, 0x01	; 1
    145e:	40 40       	sbci	r20, 0x00	; 0
    1460:	20 40       	sbci	r18, 0x00	; 0
    1462:	e1 f7       	brne	.-8      	; 0x145c <_Z18Rele_Abilitazione2ii+0x74>
    1464:	00 c0       	rjmp	.+0      	; 0x1466 <_Z18Rele_Abilitazione2ii+0x7e>
    1466:	00 00       	nop
    1468:	92 b1       	in	r25, 0x02	; 2
    146a:	89 2b       	or	r24, r25
    146c:	82 b9       	out	0x02, r24	; 2
    146e:	08 95       	ret

00001470 <_Z6Azzerav>:
    1470:	6f ee       	ldi	r22, 0xEF	; 239
    1472:	71 e0       	ldi	r23, 0x01	; 1
    1474:	89 e3       	ldi	r24, 0x39	; 57
    1476:	9b e0       	ldi	r25, 0x0B	; 11
    1478:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringaSEPKc>
    147c:	10 92 41 0b 	sts	0x0B41, r1	; 0x800b41 <impulsi+0x1>
    1480:	10 92 40 0b 	sts	0x0B40, r1	; 0x800b40 <impulsi>
    1484:	10 92 7f 0b 	sts	0x0B7F, r1	; 0x800b7f <alreadyTimbrata>
    1488:	67 e1       	ldi	r22, 0x17	; 23
    148a:	75 e0       	ldi	r23, 0x05	; 5
    148c:	89 e8       	ldi	r24, 0x89	; 137
    148e:	9b e0       	ldi	r25, 0x0B	; 11
    1490:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringaSEPKc>
    1494:	67 e1       	ldi	r22, 0x17	; 23
    1496:	75 e0       	ldi	r23, 0x05	; 5
    1498:	8f e8       	ldi	r24, 0x8F	; 143
    149a:	9b e0       	ldi	r25, 0x0B	; 11
    149c:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringaSEPKc>
    14a0:	61 eb       	ldi	r22, 0xB1	; 177
    14a2:	78 e0       	ldi	r23, 0x08	; 8
    14a4:	85 e9       	ldi	r24, 0x95	; 149
    14a6:	9b e0       	ldi	r25, 0x0B	; 11
    14a8:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringaSEPKc>
    14ac:	10 92 3f 0b 	sts	0x0B3F, r1	; 0x800b3f <distr_selezionato>
    14b0:	67 e0       	ldi	r22, 0x07	; 7
    14b2:	70 e0       	ldi	r23, 0x00	; 0
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	5c df       	rcall	.-328    	; 0x1372 <_Z18Rele_Abilitazione1ii>
    14ba:	67 e0       	ldi	r22, 0x07	; 7
    14bc:	70 e0       	ldi	r23, 0x00	; 0
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	92 df       	rcall	.-220    	; 0x13e8 <_Z18Rele_Abilitazione2ii>
    14c4:	8f e1       	ldi	r24, 0x1F	; 31
    14c6:	9e e4       	ldi	r25, 0x4E	; 78
    14c8:	01 97       	sbiw	r24, 0x01	; 1
    14ca:	f1 f7       	brne	.-4      	; 0x14c8 <_Z6Azzerav+0x58>
    14cc:	00 c0       	rjmp	.+0      	; 0x14ce <_Z6Azzerav+0x5e>
    14ce:	00 00       	nop
    14d0:	8f eb       	ldi	r24, 0xBF	; 191
    14d2:	9a e0       	ldi	r25, 0x0A	; 10
    14d4:	0e 94 b9 29 	call	0x5372	; 0x5372 <_ZN14EthernetClient5flushEv>
    14d8:	8f eb       	ldi	r24, 0xBF	; 191
    14da:	9a e0       	ldi	r25, 0x0A	; 10
    14dc:	0e 94 fe 29 	call	0x53fc	; 0x53fc <_ZN14EthernetClient4stopEv>
    14e0:	8f e1       	ldi	r24, 0x1F	; 31
    14e2:	9e e4       	ldi	r25, 0x4E	; 78
    14e4:	01 97       	sbiw	r24, 0x01	; 1
    14e6:	f1 f7       	brne	.-4      	; 0x14e4 <_Z6Azzerav+0x74>
    14e8:	00 c0       	rjmp	.+0      	; 0x14ea <_Z6Azzerav+0x7a>
    14ea:	00 00       	nop
    14ec:	8c ec       	ldi	r24, 0xCC	; 204
    14ee:	9a e0       	ldi	r25, 0x0A	; 10
    14f0:	0e 94 b9 29 	call	0x5372	; 0x5372 <_ZN14EthernetClient5flushEv>
    14f4:	8c ec       	ldi	r24, 0xCC	; 204
    14f6:	9a e0       	ldi	r25, 0x0A	; 10
    14f8:	0e 94 fe 29 	call	0x53fc	; 0x53fc <_ZN14EthernetClient4stopEv>
    14fc:	8f e1       	ldi	r24, 0x1F	; 31
    14fe:	9e e4       	ldi	r25, 0x4E	; 78
    1500:	01 97       	sbiw	r24, 0x01	; 1
    1502:	f1 f7       	brne	.-4      	; 0x1500 <_Z6Azzerav+0x90>
    1504:	00 c0       	rjmp	.+0      	; 0x1506 <_Z6Azzerav+0x96>
    1506:	00 00       	nop
    1508:	2c 98       	cbi	0x05, 4	; 5
    150a:	8f e1       	ldi	r24, 0x1F	; 31
    150c:	9e e4       	ldi	r25, 0x4E	; 78
    150e:	01 97       	sbiw	r24, 0x01	; 1
    1510:	f1 f7       	brne	.-4      	; 0x150e <_Z6Azzerav+0x9e>
    1512:	00 c0       	rjmp	.+0      	; 0x1514 <_Z6Azzerav+0xa4>
    1514:	00 00       	nop
    1516:	2c 9a       	sbi	0x05, 4	; 5
    1518:	8f e1       	ldi	r24, 0x1F	; 31
    151a:	9e e4       	ldi	r25, 0x4E	; 78
    151c:	01 97       	sbiw	r24, 0x01	; 1
    151e:	f1 f7       	brne	.-4      	; 0x151c <_Z6Azzerav+0xac>
    1520:	00 c0       	rjmp	.+0      	; 0x1522 <_Z6Azzerav+0xb2>
    1522:	00 00       	nop
    1524:	0e 94 95 01 	call	0x32a	; 0x32a <_ZL11disable_ETHv>
    1528:	8f e1       	ldi	r24, 0x1F	; 31
    152a:	9e e4       	ldi	r25, 0x4E	; 78
    152c:	01 97       	sbiw	r24, 0x01	; 1
    152e:	f1 f7       	brne	.-4      	; 0x152c <_Z6Azzerav+0xbc>
    1530:	00 c0       	rjmp	.+0      	; 0x1532 <_Z6Azzerav+0xc2>
    1532:	00 00       	nop
    1534:	0e 94 93 01 	call	0x326	; 0x326 <_ZL10enable_ETHv>
    1538:	82 b1       	in	r24, 0x02	; 2
    153a:	82 b9       	out	0x02, r24	; 2
    153c:	82 b1       	in	r24, 0x02	; 2
    153e:	82 b9       	out	0x02, r24	; 2
    1540:	6f ee       	ldi	r22, 0xEF	; 239
    1542:	71 e0       	ldi	r23, 0x01	; 1
    1544:	87 ef       	ldi	r24, 0xF7	; 247
    1546:	9a e0       	ldi	r25, 0x0A	; 10
    1548:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringaSEPKc>
    154c:	6f ee       	ldi	r22, 0xEF	; 239
    154e:	71 e0       	ldi	r23, 0x01	; 1
    1550:	8d ef       	ldi	r24, 0xFD	; 253
    1552:	9a e0       	ldi	r25, 0x0A	; 10
    1554:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringaSEPKc>
    1558:	6f ee       	ldi	r22, 0xEF	; 239
    155a:	71 e0       	ldi	r23, 0x01	; 1
    155c:	8d ef       	ldi	r24, 0xFD	; 253
    155e:	9a e0       	ldi	r25, 0x0A	; 10
    1560:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringaSEPKc>
    1564:	87 e6       	ldi	r24, 0x67	; 103
    1566:	9b e0       	ldi	r25, 0x0B	; 11
    1568:	0e 94 c1 30 	call	0x6182	; 0x6182 <_ZN3LCD11noBacklightEv>
    156c:	87 e6       	ldi	r24, 0x67	; 103
    156e:	9b e0       	ldi	r25, 0x0B	; 11
    1570:	0e 94 19 31 	call	0x6232	; 0x6232 <_ZN3LCD9noDisplayEv>
    1574:	10 92 af 0a 	sts	0x0AAF, r1	; 0x800aaf <secs>
    1578:	10 92 b0 0a 	sts	0x0AB0, r1	; 0x800ab0 <secs+0x1>
    157c:	10 92 b1 0a 	sts	0x0AB1, r1	; 0x800ab1 <secs+0x2>
    1580:	10 92 b2 0a 	sts	0x0AB2, r1	; 0x800ab2 <secs+0x3>
    1584:	10 92 ab 0a 	sts	0x0AAB, r1	; 0x800aab <UltimoPassaggioStato>
    1588:	10 92 ac 0a 	sts	0x0AAC, r1	; 0x800aac <UltimoPassaggioStato+0x1>
    158c:	10 92 ad 0a 	sts	0x0AAD, r1	; 0x800aad <UltimoPassaggioStato+0x2>
    1590:	10 92 ae 0a 	sts	0x0AAE, r1	; 0x800aae <UltimoPassaggioStato+0x3>
    1594:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
    1598:	6e ea       	ldi	r22, 0xAE	; 174
    159a:	75 e0       	ldi	r23, 0x05	; 5
    159c:	8e e2       	ldi	r24, 0x2E	; 46
    159e:	9d e0       	ldi	r25, 0x0D	; 13
    15a0:	0e 94 8c 39 	call	0x7318	; 0x7318 <_ZN5Print7printlnEPKc>
    15a4:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
    15a8:	6f ee       	ldi	r22, 0xEF	; 239
    15aa:	71 e0       	ldi	r23, 0x01	; 1
    15ac:	8b e9       	ldi	r24, 0x9B	; 155
    15ae:	9a e0       	ldi	r25, 0x0A	; 10
    15b0:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringaSEPKc>
    15b4:	8f ef       	ldi	r24, 0xFF	; 255
    15b6:	9f ef       	ldi	r25, 0xFF	; 255
    15b8:	90 93 43 0b 	sts	0x0B43, r25	; 0x800b43 <stato_procedura+0x1>
    15bc:	80 93 42 0b 	sts	0x0B42, r24	; 0x800b42 <stato_procedura>
    15c0:	08 95       	ret

000015c2 <_Z10inputTargac>:
    15c2:	cf 93       	push	r28
    15c4:	df 93       	push	r29
    15c6:	cd b7       	in	r28, 0x3d	; 61
    15c8:	de b7       	in	r29, 0x3e	; 62
    15ca:	62 97       	sbiw	r28, 0x12	; 18
    15cc:	0f b6       	in	r0, 0x3f	; 63
    15ce:	f8 94       	cli
    15d0:	de bf       	out	0x3e, r29	; 62
    15d2:	0f be       	out	0x3f, r0	; 63
    15d4:	cd bf       	out	0x3d, r28	; 61
    15d6:	81 34       	cpi	r24, 0x41	; 65
    15d8:	21 f1       	breq	.+72     	; 0x1622 <_Z10inputTargac+0x60>
    15da:	d8 f4       	brcc	.+54     	; 0x1612 <_Z10inputTargac+0x50>
    15dc:	83 32       	cpi	r24, 0x23	; 35
    15de:	09 f4       	brne	.+2      	; 0x15e2 <_Z10inputTargac+0x20>
    15e0:	a4 c0       	rjmp	.+328    	; 0x172a <_Z10inputTargac+0x168>
    15e2:	8a 32       	cpi	r24, 0x2A	; 42
    15e4:	09 f0       	breq	.+2      	; 0x15e8 <_Z10inputTargac+0x26>
    15e6:	d1 c0       	rjmp	.+418    	; 0x178a <_Z10inputTargac+0x1c8>
    15e8:	6f ee       	ldi	r22, 0xEF	; 239
    15ea:	71 e0       	ldi	r23, 0x01	; 1
    15ec:	8b e9       	ldi	r24, 0x9B	; 155
    15ee:	9a e0       	ldi	r25, 0x0A	; 10
    15f0:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringaSEPKc>
    15f4:	63 ec       	ldi	r22, 0xC3	; 195
    15f6:	75 e0       	ldi	r23, 0x05	; 5
    15f8:	87 ef       	ldi	r24, 0xF7	; 247
    15fa:	9a e0       	ldi	r25, 0x0A	; 10
    15fc:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringaSEPKc>
    1600:	6f ee       	ldi	r22, 0xEF	; 239
    1602:	71 e0       	ldi	r23, 0x01	; 1
    1604:	8d ef       	ldi	r24, 0xFD	; 253
    1606:	9a e0       	ldi	r25, 0x0A	; 10
    1608:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringaSEPKc>
    160c:	6f ee       	ldi	r22, 0xEF	; 239
    160e:	71 e0       	ldi	r23, 0x01	; 1
    1610:	ad c0       	rjmp	.+346    	; 0x176c <_Z10inputTargac+0x1aa>
    1612:	83 34       	cpi	r24, 0x43	; 67
    1614:	09 f4       	brne	.+2      	; 0x1618 <_Z10inputTargac+0x56>
    1616:	6b c0       	rjmp	.+214    	; 0x16ee <_Z10inputTargac+0x12c>
    1618:	a0 f0       	brcs	.+40     	; 0x1642 <_Z10inputTargac+0x80>
    161a:	8e 34       	cpi	r24, 0x4E	; 78
    161c:	09 f4       	brne	.+2      	; 0x1620 <_Z10inputTargac+0x5e>
    161e:	f7 c0       	rjmp	.+494    	; 0x180e <_Z10inputTargac+0x24c>
    1620:	b4 c0       	rjmp	.+360    	; 0x178a <_Z10inputTargac+0x1c8>
    1622:	80 91 9f 0a 	lds	r24, 0x0A9F	; 0x800a9f <TARGA+0x4>
    1626:	90 91 a0 0a 	lds	r25, 0x0AA0	; 0x800aa0 <TARGA+0x5>
    162a:	05 97       	sbiw	r24, 0x05	; 5
    162c:	09 f0       	breq	.+2      	; 0x1630 <_Z10inputTargac+0x6e>
    162e:	ef c0       	rjmp	.+478    	; 0x180e <_Z10inputTargac+0x24c>
    1630:	6b e9       	ldi	r22, 0x9B	; 155
    1632:	7a e0       	ldi	r23, 0x0A	; 10
    1634:	ce 01       	movw	r24, r28
    1636:	01 96       	adiw	r24, 0x01	; 1
    1638:	0e 94 93 3c 	call	0x7926	; 0x7926 <_ZN6StringC1ERKS_>
    163c:	6f eb       	ldi	r22, 0xBF	; 191
    163e:	75 e0       	ldi	r23, 0x05	; 5
    1640:	0f c0       	rjmp	.+30     	; 0x1660 <_Z10inputTargac+0x9e>
    1642:	80 91 9f 0a 	lds	r24, 0x0A9F	; 0x800a9f <TARGA+0x4>
    1646:	90 91 a0 0a 	lds	r25, 0x0AA0	; 0x800aa0 <TARGA+0x5>
    164a:	05 97       	sbiw	r24, 0x05	; 5
    164c:	09 f0       	breq	.+2      	; 0x1650 <_Z10inputTargac+0x8e>
    164e:	df c0       	rjmp	.+446    	; 0x180e <_Z10inputTargac+0x24c>
    1650:	6b e9       	ldi	r22, 0x9B	; 155
    1652:	7a e0       	ldi	r23, 0x0A	; 10
    1654:	ce 01       	movw	r24, r28
    1656:	01 96       	adiw	r24, 0x01	; 1
    1658:	0e 94 93 3c 	call	0x7926	; 0x7926 <_ZN6StringC1ERKS_>
    165c:	61 ec       	ldi	r22, 0xC1	; 193
    165e:	75 e0       	ldi	r23, 0x05	; 5
    1660:	ce 01       	movw	r24, r28
    1662:	01 96       	adiw	r24, 0x01	; 1
    1664:	0e 94 0d 3e 	call	0x7c1a	; 0x7c1a <_ZplRK15StringSumHelperPKc>
    1668:	bc 01       	movw	r22, r24
    166a:	ce 01       	movw	r24, r28
    166c:	07 96       	adiw	r24, 0x07	; 7
    166e:	0e 94 93 3c 	call	0x7926	; 0x7926 <_ZN6StringC1ERKS_>
    1672:	ce 01       	movw	r24, r28
    1674:	01 96       	adiw	r24, 0x01	; 1
    1676:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
    167a:	20 e0       	ldi	r18, 0x00	; 0
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	47 e0       	ldi	r20, 0x07	; 7
    1680:	50 e0       	ldi	r21, 0x00	; 0
    1682:	be 01       	movw	r22, r28
    1684:	63 5f       	subi	r22, 0xF3	; 243
    1686:	7f 4f       	sbci	r23, 0xFF	; 255
    1688:	ce 01       	movw	r24, r28
    168a:	07 96       	adiw	r24, 0x07	; 7
    168c:	0e 94 4e 3e 	call	0x7c9c	; 0x7c9c <_ZNK6String8getBytesEPhjj>
    1690:	be 01       	movw	r22, r28
    1692:	63 5f       	subi	r22, 0xF3	; 243
    1694:	7f 4f       	sbci	r23, 0xFF	; 255
    1696:	ce 01       	movw	r24, r28
    1698:	01 96       	adiw	r24, 0x01	; 1
    169a:	a9 d8       	rcall	.-3758   	; 0x7ee <_Z16scrivi_TAG_MezzoPc>
    169c:	8f e3       	ldi	r24, 0x3F	; 63
    169e:	9c e9       	ldi	r25, 0x9C	; 156
    16a0:	01 97       	sbiw	r24, 0x01	; 1
    16a2:	f1 f7       	brne	.-4      	; 0x16a0 <_Z10inputTargac+0xde>
    16a4:	00 c0       	rjmp	.+0      	; 0x16a6 <_Z10inputTargac+0xe4>
    16a6:	00 00       	nop
    16a8:	4a e0       	ldi	r20, 0x0A	; 10
    16aa:	50 e0       	ldi	r21, 0x00	; 0
    16ac:	60 e0       	ldi	r22, 0x00	; 0
    16ae:	70 e0       	ldi	r23, 0x00	; 0
    16b0:	81 e0       	ldi	r24, 0x01	; 1
    16b2:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z6Buzzerhm>
    16b6:	8f e3       	ldi	r24, 0x3F	; 63
    16b8:	9c e9       	ldi	r25, 0x9C	; 156
    16ba:	01 97       	sbiw	r24, 0x01	; 1
    16bc:	f1 f7       	brne	.-4      	; 0x16ba <_Z10inputTargac+0xf8>
    16be:	00 c0       	rjmp	.+0      	; 0x16c0 <_Z10inputTargac+0xfe>
    16c0:	00 00       	nop
    16c2:	4a e0       	ldi	r20, 0x0A	; 10
    16c4:	50 e0       	ldi	r21, 0x00	; 0
    16c6:	60 e0       	ldi	r22, 0x00	; 0
    16c8:	70 e0       	ldi	r23, 0x00	; 0
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z6Buzzerhm>
    16d0:	8f e3       	ldi	r24, 0x3F	; 63
    16d2:	9c e9       	ldi	r25, 0x9C	; 156
    16d4:	01 97       	sbiw	r24, 0x01	; 1
    16d6:	f1 f7       	brne	.-4      	; 0x16d4 <_Z10inputTargac+0x112>
    16d8:	00 c0       	rjmp	.+0      	; 0x16da <_Z10inputTargac+0x118>
    16da:	00 00       	nop
    16dc:	ce 01       	movw	r24, r28
    16de:	01 96       	adiw	r24, 0x01	; 1
    16e0:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
    16e4:	ce 01       	movw	r24, r28
    16e6:	07 96       	adiw	r24, 0x07	; 7
    16e8:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
    16ec:	90 c0       	rjmp	.+288    	; 0x180e <_Z10inputTargac+0x24c>
    16ee:	20 91 9f 0a 	lds	r18, 0x0A9F	; 0x800a9f <TARGA+0x4>
    16f2:	30 91 a0 0a 	lds	r19, 0x0AA0	; 0x800aa0 <TARGA+0x5>
    16f6:	21 15       	cp	r18, r1
    16f8:	31 05       	cpc	r19, r1
    16fa:	09 f4       	brne	.+2      	; 0x16fe <_Z10inputTargac+0x13c>
    16fc:	88 c0       	rjmp	.+272    	; 0x180e <_Z10inputTargac+0x24c>
    16fe:	21 50       	subi	r18, 0x01	; 1
    1700:	31 09       	sbc	r19, r1
    1702:	40 e0       	ldi	r20, 0x00	; 0
    1704:	50 e0       	ldi	r21, 0x00	; 0
    1706:	6b e9       	ldi	r22, 0x9B	; 155
    1708:	7a e0       	ldi	r23, 0x0A	; 10
    170a:	ce 01       	movw	r24, r28
    170c:	01 96       	adiw	r24, 0x01	; 1
    170e:	0e 94 7c 3e 	call	0x7cf8	; 0x7cf8 <_ZNK6String9substringEjj>
    1712:	be 01       	movw	r22, r28
    1714:	6f 5f       	subi	r22, 0xFF	; 255
    1716:	7f 4f       	sbci	r23, 0xFF	; 255
    1718:	8b e9       	ldi	r24, 0x9B	; 155
    171a:	9a e0       	ldi	r25, 0x0A	; 10
    171c:	0e 94 9b 3c 	call	0x7936	; 0x7936 <_ZN6StringaSEOS_>
    1720:	ce 01       	movw	r24, r28
    1722:	01 96       	adiw	r24, 0x01	; 1
    1724:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
    1728:	47 c0       	rjmp	.+142    	; 0x17b8 <_Z10inputTargac+0x1f6>
    172a:	80 91 9f 0a 	lds	r24, 0x0A9F	; 0x800a9f <TARGA+0x4>
    172e:	90 91 a0 0a 	lds	r25, 0x0AA0	; 0x800aa0 <TARGA+0x5>
    1732:	05 97       	sbiw	r24, 0x05	; 5
    1734:	09 f0       	breq	.+2      	; 0x1738 <_Z10inputTargac+0x176>
    1736:	6b c0       	rjmp	.+214    	; 0x180e <_Z10inputTargac+0x24c>
    1738:	6b e9       	ldi	r22, 0x9B	; 155
    173a:	7a e0       	ldi	r23, 0x0A	; 10
    173c:	8f e8       	ldi	r24, 0x8F	; 143
    173e:	9b e0       	ldi	r25, 0x0B	; 11
    1740:	0e 94 7e 3c 	call	0x78fc	; 0x78fc <_ZN6StringaSERKS_>
    1744:	6f e8       	ldi	r22, 0x8F	; 143
    1746:	7b e0       	ldi	r23, 0x0B	; 11
    1748:	8b e1       	ldi	r24, 0x1B	; 27
    174a:	9b e0       	ldi	r25, 0x0B	; 11
    174c:	0e 94 7e 3c 	call	0x78fc	; 0x78fc <_ZN6StringaSERKS_>
    1750:	64 e0       	ldi	r22, 0x04	; 4
    1752:	76 e0       	ldi	r23, 0x06	; 6
    1754:	87 ef       	ldi	r24, 0xF7	; 247
    1756:	9a e0       	ldi	r25, 0x0A	; 10
    1758:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringaSEPKc>
    175c:	68 e1       	ldi	r22, 0x18	; 24
    175e:	76 e0       	ldi	r23, 0x06	; 6
    1760:	8d ef       	ldi	r24, 0xFD	; 253
    1762:	9a e0       	ldi	r25, 0x0A	; 10
    1764:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringaSEPKc>
    1768:	67 e2       	ldi	r22, 0x27	; 39
    176a:	76 e0       	ldi	r23, 0x06	; 6
    176c:	83 e0       	ldi	r24, 0x03	; 3
    176e:	9b e0       	ldi	r25, 0x0B	; 11
    1770:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringaSEPKc>
    1774:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <TselDistributore>
    1778:	70 91 23 01 	lds	r23, 0x0123	; 0x800123 <TselDistributore+0x1>
    177c:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <TselDistributore+0x2>
    1780:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <TselDistributore+0x3>
    1784:	0e 94 b6 03 	call	0x76c	; 0x76c <_Z11avanzaStatom>
    1788:	42 c0       	rjmp	.+132    	; 0x180e <_Z10inputTargac+0x24c>
    178a:	68 2f       	mov	r22, r24
    178c:	ce 01       	movw	r24, r28
    178e:	01 96       	adiw	r24, 0x01	; 1
    1790:	0e 94 bb 3c 	call	0x7976	; 0x7976 <_ZN6StringC1Ec>
    1794:	be 01       	movw	r22, r28
    1796:	6f 5f       	subi	r22, 0xFF	; 255
    1798:	7f 4f       	sbci	r23, 0xFF	; 255
    179a:	8b e9       	ldi	r24, 0x9B	; 155
    179c:	9a e0       	ldi	r25, 0x0A	; 10
    179e:	0e 94 d6 3d 	call	0x7bac	; 0x7bac <_ZN6String6concatERKS_>
    17a2:	ce 01       	movw	r24, r28
    17a4:	01 96       	adiw	r24, 0x01	; 1
    17a6:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
    17aa:	4a e0       	ldi	r20, 0x0A	; 10
    17ac:	50 e0       	ldi	r21, 0x00	; 0
    17ae:	60 e0       	ldi	r22, 0x00	; 0
    17b0:	70 e0       	ldi	r23, 0x00	; 0
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z6Buzzerhm>
    17b8:	66 ed       	ldi	r22, 0xD6	; 214
    17ba:	75 e0       	ldi	r23, 0x05	; 5
    17bc:	87 ef       	ldi	r24, 0xF7	; 247
    17be:	9a e0       	ldi	r25, 0x0A	; 10
    17c0:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringaSEPKc>
    17c4:	68 ee       	ldi	r22, 0xE8	; 232
    17c6:	75 e0       	ldi	r23, 0x05	; 5
    17c8:	ce 01       	movw	r24, r28
    17ca:	01 96       	adiw	r24, 0x01	; 1
    17cc:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
    17d0:	6b e9       	ldi	r22, 0x9B	; 155
    17d2:	7a e0       	ldi	r23, 0x0A	; 10
    17d4:	ce 01       	movw	r24, r28
    17d6:	01 96       	adiw	r24, 0x01	; 1
    17d8:	0e 94 fc 3d 	call	0x7bf8	; 0x7bf8 <_ZplRK15StringSumHelperRK6String>
    17dc:	bc 01       	movw	r22, r24
    17de:	8d ef       	ldi	r24, 0xFD	; 253
    17e0:	9a e0       	ldi	r25, 0x0A	; 10
    17e2:	0e 94 7e 3c 	call	0x78fc	; 0x78fc <_ZN6StringaSERKS_>
    17e6:	ce 01       	movw	r24, r28
    17e8:	01 96       	adiw	r24, 0x01	; 1
    17ea:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
    17ee:	6f ee       	ldi	r22, 0xEF	; 239
    17f0:	75 e0       	ldi	r23, 0x05	; 5
    17f2:	83 e0       	ldi	r24, 0x03	; 3
    17f4:	9b e0       	ldi	r25, 0x0B	; 11
    17f6:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringaSEPKc>
    17fa:	60 91 42 0b 	lds	r22, 0x0B42	; 0x800b42 <stato_procedura>
    17fe:	70 91 43 0b 	lds	r23, 0x0B43	; 0x800b43 <stato_procedura+0x1>
    1802:	4a e0       	ldi	r20, 0x0A	; 10
    1804:	50 e0       	ldi	r21, 0x00	; 0
    1806:	81 ef       	ldi	r24, 0xF1	; 241
    1808:	9a e0       	ldi	r25, 0x0A	; 10
    180a:	0e 94 81 03 	call	0x702	; 0x702 <_Z10displayLCDP6Stringii>
    180e:	62 96       	adiw	r28, 0x12	; 18
    1810:	0f b6       	in	r0, 0x3f	; 63
    1812:	f8 94       	cli
    1814:	de bf       	out	0x3e, r29	; 62
    1816:	0f be       	out	0x3f, r0	; 63
    1818:	cd bf       	out	0x3d, r28	; 61
    181a:	df 91       	pop	r29
    181c:	cf 91       	pop	r28
    181e:	08 95       	ret

00001820 <_Z7inputKMc>:
    1820:	cf 93       	push	r28
    1822:	df 93       	push	r29
    1824:	00 d0       	rcall	.+0      	; 0x1826 <_Z7inputKMc+0x6>
    1826:	00 d0       	rcall	.+0      	; 0x1828 <_Z7inputKMc+0x8>
    1828:	00 d0       	rcall	.+0      	; 0x182a <_Z7inputKMc+0xa>
    182a:	cd b7       	in	r28, 0x3d	; 61
    182c:	de b7       	in	r29, 0x3e	; 62
    182e:	83 34       	cpi	r24, 0x43	; 67
    1830:	60 f4       	brcc	.+24     	; 0x184a <_Z7inputKMc+0x2a>
    1832:	81 34       	cpi	r24, 0x41	; 65
    1834:	08 f0       	brcs	.+2      	; 0x1838 <_Z7inputKMc+0x18>
    1836:	c6 c0       	rjmp	.+396    	; 0x19c4 <_Z7inputKMc+0x1a4>
    1838:	8a 32       	cpi	r24, 0x2A	; 42
    183a:	09 f4       	brne	.+2      	; 0x183e <_Z7inputKMc+0x1e>
    183c:	c3 c0       	rjmp	.+390    	; 0x19c4 <_Z7inputKMc+0x1a4>
    183e:	8e 32       	cpi	r24, 0x2E	; 46
    1840:	09 f4       	brne	.+2      	; 0x1844 <_Z7inputKMc+0x24>
    1842:	c0 c0       	rjmp	.+384    	; 0x19c4 <_Z7inputKMc+0x1a4>
    1844:	83 32       	cpi	r24, 0x23	; 35
    1846:	29 f1       	breq	.+74     	; 0x1892 <_Z7inputKMc+0x72>
    1848:	7b c0       	rjmp	.+246    	; 0x1940 <_Z7inputKMc+0x120>
    184a:	83 34       	cpi	r24, 0x43	; 67
    184c:	21 f0       	breq	.+8      	; 0x1856 <_Z7inputKMc+0x36>
    184e:	8e 34       	cpi	r24, 0x4E	; 78
    1850:	09 f0       	breq	.+2      	; 0x1854 <_Z7inputKMc+0x34>
    1852:	76 c0       	rjmp	.+236    	; 0x1940 <_Z7inputKMc+0x120>
    1854:	b7 c0       	rjmp	.+366    	; 0x19c4 <_Z7inputKMc+0x1a4>
    1856:	20 91 99 0a 	lds	r18, 0x0A99	; 0x800a99 <KM+0x4>
    185a:	30 91 9a 0a 	lds	r19, 0x0A9A	; 0x800a9a <KM+0x5>
    185e:	21 15       	cp	r18, r1
    1860:	31 05       	cpc	r19, r1
    1862:	09 f4       	brne	.+2      	; 0x1866 <_Z7inputKMc+0x46>
    1864:	84 c0       	rjmp	.+264    	; 0x196e <_Z7inputKMc+0x14e>
    1866:	21 50       	subi	r18, 0x01	; 1
    1868:	31 09       	sbc	r19, r1
    186a:	40 e0       	ldi	r20, 0x00	; 0
    186c:	50 e0       	ldi	r21, 0x00	; 0
    186e:	65 e9       	ldi	r22, 0x95	; 149
    1870:	7a e0       	ldi	r23, 0x0A	; 10
    1872:	ce 01       	movw	r24, r28
    1874:	01 96       	adiw	r24, 0x01	; 1
    1876:	0e 94 7c 3e 	call	0x7cf8	; 0x7cf8 <_ZNK6String9substringEjj>
    187a:	be 01       	movw	r22, r28
    187c:	6f 5f       	subi	r22, 0xFF	; 255
    187e:	7f 4f       	sbci	r23, 0xFF	; 255
    1880:	85 e9       	ldi	r24, 0x95	; 149
    1882:	9a e0       	ldi	r25, 0x0A	; 10
    1884:	0e 94 9b 3c 	call	0x7936	; 0x7936 <_ZN6StringaSEOS_>
    1888:	ce 01       	movw	r24, r28
    188a:	01 96       	adiw	r24, 0x01	; 1
    188c:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
    1890:	6e c0       	rjmp	.+220    	; 0x196e <_Z7inputKMc+0x14e>
    1892:	80 91 99 0a 	lds	r24, 0x0A99	; 0x800a99 <KM+0x4>
    1896:	90 91 9a 0a 	lds	r25, 0x0A9A	; 0x800a9a <KM+0x5>
    189a:	04 97       	sbiw	r24, 0x04	; 4
    189c:	09 f0       	breq	.+2      	; 0x18a0 <_Z7inputKMc+0x80>
    189e:	92 c0       	rjmp	.+292    	; 0x19c4 <_Z7inputKMc+0x1a4>
    18a0:	6f eb       	ldi	r22, 0xBF	; 191
    18a2:	75 e0       	ldi	r23, 0x05	; 5
    18a4:	89 e8       	ldi	r24, 0x89	; 137
    18a6:	9b e0       	ldi	r25, 0x0B	; 11
    18a8:	0e 94 30 3e 	call	0x7c60	; 0x7c60 <_ZNK6String6equalsEPKc>
    18ac:	88 23       	and	r24, r24
    18ae:	41 f0       	breq	.+16     	; 0x18c0 <_Z7inputKMc+0xa0>
    18b0:	67 e0       	ldi	r22, 0x07	; 7
    18b2:	70 e0       	ldi	r23, 0x00	; 0
    18b4:	80 e0       	ldi	r24, 0x00	; 0
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	5c dd       	rcall	.-1352   	; 0x1372 <_Z18Rele_Abilitazione1ii>
    18ba:	6f e1       	ldi	r22, 0x1F	; 31
    18bc:	76 e0       	ldi	r23, 0x06	; 6
    18be:	0f c0       	rjmp	.+30     	; 0x18de <_Z7inputKMc+0xbe>
    18c0:	61 ec       	ldi	r22, 0xC1	; 193
    18c2:	75 e0       	ldi	r23, 0x05	; 5
    18c4:	89 e8       	ldi	r24, 0x89	; 137
    18c6:	9b e0       	ldi	r25, 0x0B	; 11
    18c8:	0e 94 30 3e 	call	0x7c60	; 0x7c60 <_ZNK6String6equalsEPKc>
    18cc:	88 23       	and	r24, r24
    18ce:	59 f0       	breq	.+22     	; 0x18e6 <_Z7inputKMc+0xc6>
    18d0:	67 e0       	ldi	r22, 0x07	; 7
    18d2:	70 e0       	ldi	r23, 0x00	; 0
    18d4:	80 e0       	ldi	r24, 0x00	; 0
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	87 dd       	rcall	.-1266   	; 0x13e8 <_Z18Rele_Abilitazione2ii>
    18da:	6e e2       	ldi	r22, 0x2E	; 46
    18dc:	76 e0       	ldi	r23, 0x06	; 6
    18de:	83 e0       	ldi	r24, 0x03	; 3
    18e0:	9b e0       	ldi	r25, 0x0B	; 11
    18e2:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringaSEPKc>
    18e6:	65 e9       	ldi	r22, 0x95	; 149
    18e8:	7a e0       	ldi	r23, 0x0A	; 10
    18ea:	85 e9       	ldi	r24, 0x95	; 149
    18ec:	9b e0       	ldi	r25, 0x0B	; 11
    18ee:	0e 94 7e 3c 	call	0x78fc	; 0x78fc <_ZN6StringaSERKS_>
    18f2:	65 e9       	ldi	r22, 0x95	; 149
    18f4:	7b e0       	ldi	r23, 0x0B	; 11
    18f6:	8d e2       	ldi	r24, 0x2D	; 45
    18f8:	9b e0       	ldi	r25, 0x0B	; 11
    18fa:	0e 94 7e 3c 	call	0x78fc	; 0x78fc <_ZN6StringaSERKS_>
    18fe:	66 e5       	ldi	r22, 0x56	; 86
    1900:	76 e0       	ldi	r23, 0x06	; 6
    1902:	87 ef       	ldi	r24, 0xF7	; 247
    1904:	9a e0       	ldi	r25, 0x0A	; 10
    1906:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringaSEPKc>
    190a:	6f ee       	ldi	r22, 0xEF	; 239
    190c:	71 e0       	ldi	r23, 0x01	; 1
    190e:	8d ef       	ldi	r24, 0xFD	; 253
    1910:	9a e0       	ldi	r25, 0x0A	; 10
    1912:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringaSEPKc>
    1916:	0e 94 95 01 	call	0x32a	; 0x32a <_ZL11disable_ETHv>
    191a:	8f e3       	ldi	r24, 0x3F	; 63
    191c:	9f e1       	ldi	r25, 0x1F	; 31
    191e:	01 97       	sbiw	r24, 0x01	; 1
    1920:	f1 f7       	brne	.-4      	; 0x191e <_Z7inputKMc+0xfe>
    1922:	00 c0       	rjmp	.+0      	; 0x1924 <_Z7inputKMc+0x104>
    1924:	00 00       	nop
    1926:	0e 94 93 01 	call	0x326	; 0x326 <_ZL10enable_ETHv>
    192a:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <TsgancioPistola>
    192e:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <TsgancioPistola+0x1>
    1932:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <TsgancioPistola+0x2>
    1936:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <TsgancioPistola+0x3>
    193a:	0e 94 b6 03 	call	0x76c	; 0x76c <_Z11avanzaStatom>
    193e:	42 c0       	rjmp	.+132    	; 0x19c4 <_Z7inputKMc+0x1a4>
    1940:	68 2f       	mov	r22, r24
    1942:	ce 01       	movw	r24, r28
    1944:	01 96       	adiw	r24, 0x01	; 1
    1946:	0e 94 bb 3c 	call	0x7976	; 0x7976 <_ZN6StringC1Ec>
    194a:	be 01       	movw	r22, r28
    194c:	6f 5f       	subi	r22, 0xFF	; 255
    194e:	7f 4f       	sbci	r23, 0xFF	; 255
    1950:	85 e9       	ldi	r24, 0x95	; 149
    1952:	9a e0       	ldi	r25, 0x0A	; 10
    1954:	0e 94 d6 3d 	call	0x7bac	; 0x7bac <_ZN6String6concatERKS_>
    1958:	ce 01       	movw	r24, r28
    195a:	01 96       	adiw	r24, 0x01	; 1
    195c:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
    1960:	4a e0       	ldi	r20, 0x0A	; 10
    1962:	50 e0       	ldi	r21, 0x00	; 0
    1964:	60 e0       	ldi	r22, 0x00	; 0
    1966:	70 e0       	ldi	r23, 0x00	; 0
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z6Buzzerhm>
    196e:	66 e3       	ldi	r22, 0x36	; 54
    1970:	76 e0       	ldi	r23, 0x06	; 6
    1972:	87 ef       	ldi	r24, 0xF7	; 247
    1974:	9a e0       	ldi	r25, 0x0A	; 10
    1976:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringaSEPKc>
    197a:	67 e4       	ldi	r22, 0x47	; 71
    197c:	76 e0       	ldi	r23, 0x06	; 6
    197e:	ce 01       	movw	r24, r28
    1980:	01 96       	adiw	r24, 0x01	; 1
    1982:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
    1986:	65 e9       	ldi	r22, 0x95	; 149
    1988:	7a e0       	ldi	r23, 0x0A	; 10
    198a:	ce 01       	movw	r24, r28
    198c:	01 96       	adiw	r24, 0x01	; 1
    198e:	0e 94 fc 3d 	call	0x7bf8	; 0x7bf8 <_ZplRK15StringSumHelperRK6String>
    1992:	bc 01       	movw	r22, r24
    1994:	8d ef       	ldi	r24, 0xFD	; 253
    1996:	9a e0       	ldi	r25, 0x0A	; 10
    1998:	0e 94 7e 3c 	call	0x78fc	; 0x78fc <_ZN6StringaSERKS_>
    199c:	ce 01       	movw	r24, r28
    199e:	01 96       	adiw	r24, 0x01	; 1
    19a0:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
    19a4:	6b e4       	ldi	r22, 0x4B	; 75
    19a6:	76 e0       	ldi	r23, 0x06	; 6
    19a8:	83 e0       	ldi	r24, 0x03	; 3
    19aa:	9b e0       	ldi	r25, 0x0B	; 11
    19ac:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringaSEPKc>
    19b0:	60 91 42 0b 	lds	r22, 0x0B42	; 0x800b42 <stato_procedura>
    19b4:	70 91 43 0b 	lds	r23, 0x0B43	; 0x800b43 <stato_procedura+0x1>
    19b8:	4a e0       	ldi	r20, 0x0A	; 10
    19ba:	50 e0       	ldi	r21, 0x00	; 0
    19bc:	81 ef       	ldi	r24, 0xF1	; 241
    19be:	9a e0       	ldi	r25, 0x0A	; 10
    19c0:	0e 94 81 03 	call	0x702	; 0x702 <_Z10displayLCDP6Stringii>
    19c4:	26 96       	adiw	r28, 0x06	; 6
    19c6:	0f b6       	in	r0, 0x3f	; 63
    19c8:	f8 94       	cli
    19ca:	de bf       	out	0x3e, r29	; 62
    19cc:	0f be       	out	0x3f, r0	; 63
    19ce:	cd bf       	out	0x3d, r28	; 61
    19d0:	df 91       	pop	r29
    19d2:	cf 91       	pop	r28
    19d4:	08 95       	ret

000019d6 <_Z25read_eeprom_string_struct20ParametriCCEC_struct>:
    19d6:	4f 92       	push	r4
    19d8:	5f 92       	push	r5
    19da:	6f 92       	push	r6
    19dc:	7f 92       	push	r7
    19de:	8f 92       	push	r8
    19e0:	9f 92       	push	r9
    19e2:	af 92       	push	r10
    19e4:	bf 92       	push	r11
    19e6:	cf 92       	push	r12
    19e8:	df 92       	push	r13
    19ea:	ef 92       	push	r14
    19ec:	ff 92       	push	r15
    19ee:	0f 93       	push	r16
    19f0:	1f 93       	push	r17
    19f2:	cf 93       	push	r28
    19f4:	df 93       	push	r29
    19f6:	00 d0       	rcall	.+0      	; 0x19f8 <_Z25read_eeprom_string_struct20ParametriCCEC_struct+0x22>
    19f8:	00 d0       	rcall	.+0      	; 0x19fa <_Z25read_eeprom_string_struct20ParametriCCEC_struct+0x24>
    19fa:	00 d0       	rcall	.+0      	; 0x19fc <_Z25read_eeprom_string_struct20ParametriCCEC_struct+0x26>
    19fc:	cd b7       	in	r28, 0x3d	; 61
    19fe:	de b7       	in	r29, 0x3e	; 62
    1a00:	7c 01       	movw	r14, r24
    1a02:	5b 01       	movw	r10, r22
    1a04:	4d b6       	in	r4, 0x3d	; 61
    1a06:	5e b6       	in	r5, 0x3e	; 62
    1a08:	6a e7       	ldi	r22, 0x7A	; 122
    1a0a:	77 e0       	ldi	r23, 0x07	; 7
    1a0c:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
    1a10:	f5 01       	movw	r30, r10
    1a12:	c2 84       	ldd	r12, Z+10	; 0x0a
    1a14:	d3 84       	ldd	r13, Z+11	; 0x0b
    1a16:	8d b7       	in	r24, 0x3d	; 61
    1a18:	9e b7       	in	r25, 0x3e	; 62
    1a1a:	8c 19       	sub	r24, r12
    1a1c:	9d 09       	sbc	r25, r13
    1a1e:	0f b6       	in	r0, 0x3f	; 63
    1a20:	f8 94       	cli
    1a22:	9e bf       	out	0x3e, r25	; 62
    1a24:	0f be       	out	0x3f, r0	; 63
    1a26:	8d bf       	out	0x3d, r24	; 61
    1a28:	ed b7       	in	r30, 0x3d	; 61
    1a2a:	fe b7       	in	r31, 0x3e	; 62
    1a2c:	31 96       	adiw	r30, 0x01	; 1
    1a2e:	4f 01       	movw	r8, r30
    1a30:	3f 01       	movw	r6, r30
    1a32:	f5 01       	movw	r30, r10
    1a34:	04 85       	ldd	r16, Z+12	; 0x0c
    1a36:	15 85       	ldd	r17, Z+13	; 0x0d
    1a38:	c0 0e       	add	r12, r16
    1a3a:	d1 1e       	adc	r13, r17
    1a3c:	0c 15       	cp	r16, r12
    1a3e:	1d 05       	cpc	r17, r13
    1a40:	4c f4       	brge	.+18     	; 0x1a54 <_Z25read_eeprom_string_struct20ParametriCCEC_struct+0x7e>
    1a42:	c8 01       	movw	r24, r16
    1a44:	0e 94 c9 45 	call	0x8b92	; 0x8b92 <eeprom_read_byte>
    1a48:	f3 01       	movw	r30, r6
    1a4a:	81 93       	st	Z+, r24
    1a4c:	3f 01       	movw	r6, r30
    1a4e:	0f 5f       	subi	r16, 0xFF	; 255
    1a50:	1f 4f       	sbci	r17, 0xFF	; 255
    1a52:	f4 cf       	rjmp	.-24     	; 0x1a3c <_Z25read_eeprom_string_struct20ParametriCCEC_struct+0x66>
    1a54:	62 ef       	ldi	r22, 0xF2	; 242
    1a56:	71 e0       	ldi	r23, 0x01	; 1
    1a58:	8e e2       	ldi	r24, 0x2E	; 46
    1a5a:	9d e0       	ldi	r25, 0x0D	; 13
    1a5c:	0e 94 8c 39 	call	0x7318	; 0x7318 <_ZN5Print7printlnEPKc>
    1a60:	62 ef       	ldi	r22, 0xF2	; 242
    1a62:	71 e0       	ldi	r23, 0x01	; 1
    1a64:	8e e2       	ldi	r24, 0x2E	; 46
    1a66:	9d e0       	ldi	r25, 0x0D	; 13
    1a68:	0e 94 8c 39 	call	0x7318	; 0x7318 <_ZN5Print7printlnEPKc>
    1a6c:	b4 01       	movw	r22, r8
    1a6e:	ce 01       	movw	r24, r28
    1a70:	01 96       	adiw	r24, 0x01	; 1
    1a72:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
    1a76:	be 01       	movw	r22, r28
    1a78:	6f 5f       	subi	r22, 0xFF	; 255
    1a7a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a7c:	c7 01       	movw	r24, r14
    1a7e:	0e 94 9b 3c 	call	0x7936	; 0x7936 <_ZN6StringaSEOS_>
    1a82:	ce 01       	movw	r24, r28
    1a84:	01 96       	adiw	r24, 0x01	; 1
    1a86:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
    1a8a:	b5 01       	movw	r22, r10
    1a8c:	ce 01       	movw	r24, r28
    1a8e:	01 96       	adiw	r24, 0x01	; 1
    1a90:	0e 94 93 3c 	call	0x7926	; 0x7926 <_ZN6StringC1ERKS_>
    1a94:	66 e4       	ldi	r22, 0x46	; 70
    1a96:	78 e0       	ldi	r23, 0x08	; 8
    1a98:	ce 01       	movw	r24, r28
    1a9a:	01 96       	adiw	r24, 0x01	; 1
    1a9c:	0e 94 0d 3e 	call	0x7c1a	; 0x7c1a <_ZplRK15StringSumHelperPKc>
    1aa0:	bc 01       	movw	r22, r24
    1aa2:	8e e2       	ldi	r24, 0x2E	; 46
    1aa4:	9d e0       	ldi	r25, 0x0D	; 13
    1aa6:	0e 94 53 39 	call	0x72a6	; 0x72a6 <_ZN5Print5printERK6String>
    1aaa:	ce 01       	movw	r24, r28
    1aac:	01 96       	adiw	r24, 0x01	; 1
    1aae:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
    1ab2:	b7 01       	movw	r22, r14
    1ab4:	8e e2       	ldi	r24, 0x2E	; 46
    1ab6:	9d e0       	ldi	r25, 0x0D	; 13
    1ab8:	0e 94 7c 39 	call	0x72f8	; 0x72f8 <_ZN5Print7printlnERK6String>
    1abc:	c7 01       	movw	r24, r14
    1abe:	0f b6       	in	r0, 0x3f	; 63
    1ac0:	f8 94       	cli
    1ac2:	5e be       	out	0x3e, r5	; 62
    1ac4:	0f be       	out	0x3f, r0	; 63
    1ac6:	4d be       	out	0x3d, r4	; 61
    1ac8:	26 96       	adiw	r28, 0x06	; 6
    1aca:	0f b6       	in	r0, 0x3f	; 63
    1acc:	f8 94       	cli
    1ace:	de bf       	out	0x3e, r29	; 62
    1ad0:	0f be       	out	0x3f, r0	; 63
    1ad2:	cd bf       	out	0x3d, r28	; 61
    1ad4:	df 91       	pop	r29
    1ad6:	cf 91       	pop	r28
    1ad8:	1f 91       	pop	r17
    1ada:	0f 91       	pop	r16
    1adc:	ff 90       	pop	r15
    1ade:	ef 90       	pop	r14
    1ae0:	df 90       	pop	r13
    1ae2:	cf 90       	pop	r12
    1ae4:	bf 90       	pop	r11
    1ae6:	af 90       	pop	r10
    1ae8:	9f 90       	pop	r9
    1aea:	8f 90       	pop	r8
    1aec:	7f 90       	pop	r7
    1aee:	6f 90       	pop	r6
    1af0:	5f 90       	pop	r5
    1af2:	4f 90       	pop	r4
    1af4:	08 95       	ret

00001af6 <_Z18read_eeprom_stringii>:
    1af6:	4f 92       	push	r4
    1af8:	5f 92       	push	r5
    1afa:	6f 92       	push	r6
    1afc:	7f 92       	push	r7
    1afe:	8f 92       	push	r8
    1b00:	9f 92       	push	r9
    1b02:	af 92       	push	r10
    1b04:	bf 92       	push	r11
    1b06:	cf 92       	push	r12
    1b08:	df 92       	push	r13
    1b0a:	ef 92       	push	r14
    1b0c:	ff 92       	push	r15
    1b0e:	0f 93       	push	r16
    1b10:	1f 93       	push	r17
    1b12:	cf 93       	push	r28
    1b14:	df 93       	push	r29
    1b16:	cd b7       	in	r28, 0x3d	; 61
    1b18:	de b7       	in	r29, 0x3e	; 62
    1b1a:	2c 97       	sbiw	r28, 0x0c	; 12
    1b1c:	0f b6       	in	r0, 0x3f	; 63
    1b1e:	f8 94       	cli
    1b20:	de bf       	out	0x3e, r29	; 62
    1b22:	0f be       	out	0x3f, r0	; 63
    1b24:	cd bf       	out	0x3d, r28	; 61
    1b26:	7c 01       	movw	r14, r24
    1b28:	6b 01       	movw	r12, r22
    1b2a:	2a 01       	movw	r4, r20
    1b2c:	6d b6       	in	r6, 0x3d	; 61
    1b2e:	7e b6       	in	r7, 0x3e	; 62
    1b30:	6a e7       	ldi	r22, 0x7A	; 122
    1b32:	77 e0       	ldi	r23, 0x07	; 7
    1b34:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
    1b38:	8d b7       	in	r24, 0x3d	; 61
    1b3a:	9e b7       	in	r25, 0x3e	; 62
    1b3c:	8c 19       	sub	r24, r12
    1b3e:	9d 09       	sbc	r25, r13
    1b40:	0f b6       	in	r0, 0x3f	; 63
    1b42:	f8 94       	cli
    1b44:	9e bf       	out	0x3e, r25	; 62
    1b46:	0f be       	out	0x3f, r0	; 63
    1b48:	8d bf       	out	0x3d, r24	; 61
    1b4a:	ed b7       	in	r30, 0x3d	; 61
    1b4c:	fe b7       	in	r31, 0x3e	; 62
    1b4e:	31 96       	adiw	r30, 0x01	; 1
    1b50:	5f 01       	movw	r10, r30
    1b52:	62 ef       	ldi	r22, 0xF2	; 242
    1b54:	71 e0       	ldi	r23, 0x01	; 1
    1b56:	8e e2       	ldi	r24, 0x2E	; 46
    1b58:	9d e0       	ldi	r25, 0x0D	; 13
    1b5a:	0e 94 8c 39 	call	0x7318	; 0x7318 <_ZN5Print7printlnEPKc>
    1b5e:	66 e6       	ldi	r22, 0x66	; 102
    1b60:	76 e0       	ldi	r23, 0x06	; 6
    1b62:	8e e2       	ldi	r24, 0x2E	; 46
    1b64:	9d e0       	ldi	r25, 0x0D	; 13
    1b66:	0e 94 8c 39 	call	0x7318	; 0x7318 <_ZN5Print7printlnEPKc>
    1b6a:	62 ef       	ldi	r22, 0xF2	; 242
    1b6c:	71 e0       	ldi	r23, 0x01	; 1
    1b6e:	8e e2       	ldi	r24, 0x2E	; 46
    1b70:	9d e0       	ldi	r25, 0x0D	; 13
    1b72:	0e 94 8c 39 	call	0x7318	; 0x7318 <_ZN5Print7printlnEPKc>
    1b76:	45 01       	movw	r8, r10
    1b78:	82 01       	movw	r16, r4
    1b7a:	c4 0c       	add	r12, r4
    1b7c:	d5 1c       	adc	r13, r5
    1b7e:	0c 15       	cp	r16, r12
    1b80:	1d 05       	cpc	r17, r13
    1b82:	5c f5       	brge	.+86     	; 0x1bda <_Z18read_eeprom_stringii+0xe4>
    1b84:	c8 01       	movw	r24, r16
    1b86:	0e 94 c9 45 	call	0x8b92	; 0x8b92 <eeprom_read_byte>
    1b8a:	f4 01       	movw	r30, r8
    1b8c:	81 93       	st	Z+, r24
    1b8e:	4f 01       	movw	r8, r30
    1b90:	88 23       	and	r24, r24
    1b92:	01 f1       	breq	.+64     	; 0x1bd4 <_Z18read_eeprom_stringii+0xde>
    1b94:	4a e0       	ldi	r20, 0x0A	; 10
    1b96:	68 2f       	mov	r22, r24
    1b98:	ce 01       	movw	r24, r28
    1b9a:	07 96       	adiw	r24, 0x07	; 7
    1b9c:	0e 94 d2 3c 	call	0x79a4	; 0x79a4 <_ZN6StringC1Ehh>
    1ba0:	62 ef       	ldi	r22, 0xF2	; 242
    1ba2:	71 e0       	ldi	r23, 0x01	; 1
    1ba4:	ce 01       	movw	r24, r28
    1ba6:	01 96       	adiw	r24, 0x01	; 1
    1ba8:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
    1bac:	be 01       	movw	r22, r28
    1bae:	69 5f       	subi	r22, 0xF9	; 249
    1bb0:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb2:	ce 01       	movw	r24, r28
    1bb4:	01 96       	adiw	r24, 0x01	; 1
    1bb6:	0e 94 fc 3d 	call	0x7bf8	; 0x7bf8 <_ZplRK15StringSumHelperRK6String>
    1bba:	bc 01       	movw	r22, r24
    1bbc:	8e e2       	ldi	r24, 0x2E	; 46
    1bbe:	9d e0       	ldi	r25, 0x0D	; 13
    1bc0:	0e 94 53 39 	call	0x72a6	; 0x72a6 <_ZN5Print5printERK6String>
    1bc4:	ce 01       	movw	r24, r28
    1bc6:	01 96       	adiw	r24, 0x01	; 1
    1bc8:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
    1bcc:	ce 01       	movw	r24, r28
    1bce:	07 96       	adiw	r24, 0x07	; 7
    1bd0:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
    1bd4:	0f 5f       	subi	r16, 0xFF	; 255
    1bd6:	1f 4f       	sbci	r17, 0xFF	; 255
    1bd8:	d2 cf       	rjmp	.-92     	; 0x1b7e <_Z18read_eeprom_stringii+0x88>
    1bda:	62 ef       	ldi	r22, 0xF2	; 242
    1bdc:	71 e0       	ldi	r23, 0x01	; 1
    1bde:	8e e2       	ldi	r24, 0x2E	; 46
    1be0:	9d e0       	ldi	r25, 0x0D	; 13
    1be2:	0e 94 8c 39 	call	0x7318	; 0x7318 <_ZN5Print7printlnEPKc>
    1be6:	62 ef       	ldi	r22, 0xF2	; 242
    1be8:	71 e0       	ldi	r23, 0x01	; 1
    1bea:	8e e2       	ldi	r24, 0x2E	; 46
    1bec:	9d e0       	ldi	r25, 0x0D	; 13
    1bee:	0e 94 8c 39 	call	0x7318	; 0x7318 <_ZN5Print7printlnEPKc>
    1bf2:	b5 01       	movw	r22, r10
    1bf4:	ce 01       	movw	r24, r28
    1bf6:	01 96       	adiw	r24, 0x01	; 1
    1bf8:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
    1bfc:	be 01       	movw	r22, r28
    1bfe:	6f 5f       	subi	r22, 0xFF	; 255
    1c00:	7f 4f       	sbci	r23, 0xFF	; 255
    1c02:	c7 01       	movw	r24, r14
    1c04:	0e 94 9b 3c 	call	0x7936	; 0x7936 <_ZN6StringaSEOS_>
    1c08:	ce 01       	movw	r24, r28
    1c0a:	01 96       	adiw	r24, 0x01	; 1
    1c0c:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
    1c10:	69 e7       	ldi	r22, 0x79	; 121
    1c12:	76 e0       	ldi	r23, 0x06	; 6
    1c14:	8e e2       	ldi	r24, 0x2E	; 46
    1c16:	9d e0       	ldi	r25, 0x0D	; 13
    1c18:	0e 94 61 39 	call	0x72c2	; 0x72c2 <_ZN5Print5printEPKc>
    1c1c:	b7 01       	movw	r22, r14
    1c1e:	8e e2       	ldi	r24, 0x2E	; 46
    1c20:	9d e0       	ldi	r25, 0x0D	; 13
    1c22:	0e 94 7c 39 	call	0x72f8	; 0x72f8 <_ZN5Print7printlnERK6String>
    1c26:	c7 01       	movw	r24, r14
    1c28:	0f b6       	in	r0, 0x3f	; 63
    1c2a:	f8 94       	cli
    1c2c:	7e be       	out	0x3e, r7	; 62
    1c2e:	0f be       	out	0x3f, r0	; 63
    1c30:	6d be       	out	0x3d, r6	; 61
    1c32:	2c 96       	adiw	r28, 0x0c	; 12
    1c34:	0f b6       	in	r0, 0x3f	; 63
    1c36:	f8 94       	cli
    1c38:	de bf       	out	0x3e, r29	; 62
    1c3a:	0f be       	out	0x3f, r0	; 63
    1c3c:	cd bf       	out	0x3d, r28	; 61
    1c3e:	df 91       	pop	r29
    1c40:	cf 91       	pop	r28
    1c42:	1f 91       	pop	r17
    1c44:	0f 91       	pop	r16
    1c46:	ff 90       	pop	r15
    1c48:	ef 90       	pop	r14
    1c4a:	df 90       	pop	r13
    1c4c:	cf 90       	pop	r12
    1c4e:	bf 90       	pop	r11
    1c50:	af 90       	pop	r10
    1c52:	9f 90       	pop	r9
    1c54:	8f 90       	pop	r8
    1c56:	7f 90       	pop	r7
    1c58:	6f 90       	pop	r6
    1c5a:	5f 90       	pop	r5
    1c5c:	4f 90       	pop	r4
    1c5e:	08 95       	ret

00001c60 <_Z19write_eeprom_string6Stringii>:

bool write_eeprom_string(String erog,int lunBuffer,int start_ind) {
    1c60:	8f 92       	push	r8
    1c62:	9f 92       	push	r9
    1c64:	af 92       	push	r10
    1c66:	bf 92       	push	r11
    1c68:	cf 92       	push	r12
    1c6a:	df 92       	push	r13
    1c6c:	ef 92       	push	r14
    1c6e:	ff 92       	push	r15
    1c70:	0f 93       	push	r16
    1c72:	1f 93       	push	r17
    1c74:	cf 93       	push	r28
    1c76:	df 93       	push	r29
    1c78:	cd b7       	in	r28, 0x3d	; 61
    1c7a:	de b7       	in	r29, 0x3e	; 62
    1c7c:	2c 97       	sbiw	r28, 0x0c	; 12
    1c7e:	0f b6       	in	r0, 0x3f	; 63
    1c80:	f8 94       	cli
    1c82:	de bf       	out	0x3e, r29	; 62
    1c84:	0f be       	out	0x3f, r0	; 63
    1c86:	cd bf       	out	0x3d, r28	; 61
    1c88:	6b 01       	movw	r12, r22
    1c8a:	4a 01       	movw	r8, r20
       i++;
  }
 Serial.println(" ");
 
 return true;
}
    1c8c:	ad b6       	in	r10, 0x3d	; 61
    1c8e:	be b6       	in	r11, 0x3e	; 62
 return Salvata;
}

bool write_eeprom_string(String erog,int lunBuffer,int start_ind) {
 
 char buf[lunBuffer];
    1c90:	2d b7       	in	r18, 0x3d	; 61
    1c92:	3e b7       	in	r19, 0x3e	; 62
    1c94:	26 1b       	sub	r18, r22
    1c96:	37 0b       	sbc	r19, r23
    1c98:	0f b6       	in	r0, 0x3f	; 63
    1c9a:	f8 94       	cli
    1c9c:	3e bf       	out	0x3e, r19	; 62
    1c9e:	0f be       	out	0x3f, r0	; 63
    1ca0:	2d bf       	out	0x3d, r18	; 61
    1ca2:	ed b7       	in	r30, 0x3d	; 61
    1ca4:	fe b7       	in	r31, 0x3e	; 62
    1ca6:	31 96       	adiw	r30, 0x01	; 1
    1ca8:	7f 01       	movw	r14, r30
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{ getBytes((unsigned char *)buf, bufsize, index); }
    1caa:	fc 01       	movw	r30, r24
    1cac:	44 81       	ldd	r20, Z+4	; 0x04
    1cae:	55 81       	ldd	r21, Z+5	; 0x05
    1cb0:	4f 5f       	subi	r20, 0xFF	; 255
    1cb2:	5f 4f       	sbci	r21, 0xFF	; 255
    1cb4:	20 e0       	ldi	r18, 0x00	; 0
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	b7 01       	movw	r22, r14
    1cba:	0e 94 4e 3e 	call	0x7c9c	; 0x7c9c <_ZNK6String8getBytesEPhjj>
 erog.toCharArray(buf, erog.length()+1);
 bool out = false;
 int i = 0;
 
 Serial.println(" len: " + String(lunBuffer));
    1cbe:	4a e0       	ldi	r20, 0x0A	; 10
    1cc0:	b6 01       	movw	r22, r12
    1cc2:	ce 01       	movw	r24, r28
    1cc4:	07 96       	adiw	r24, 0x07	; 7
    1cc6:	0e 94 fd 3c 	call	0x79fa	; 0x79fa <_ZN6StringC1Eih>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1cca:	6e ef       	ldi	r22, 0xFE	; 254
    1ccc:	71 e0       	ldi	r23, 0x01	; 1
    1cce:	ce 01       	movw	r24, r28
    1cd0:	01 96       	adiw	r24, 0x01	; 1
    1cd2:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
    1cd6:	be 01       	movw	r22, r28
    1cd8:	69 5f       	subi	r22, 0xF9	; 249
    1cda:	7f 4f       	sbci	r23, 0xFF	; 255
    1cdc:	ce 01       	movw	r24, r28
    1cde:	01 96       	adiw	r24, 0x01	; 1
    1ce0:	0e 94 fc 3d 	call	0x7bf8	; 0x7bf8 <_ZplRK15StringSumHelperRK6String>
    1ce4:	bc 01       	movw	r22, r24
    1ce6:	8e e2       	ldi	r24, 0x2E	; 46
    1ce8:	9d e0       	ldi	r25, 0x0D	; 13
    1cea:	0e 94 7c 39 	call	0x72f8	; 0x72f8 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1cee:	ce 01       	movw	r24, r28
    1cf0:	01 96       	adiw	r24, 0x01	; 1
    1cf2:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
    1cf6:	ce 01       	movw	r24, r28
    1cf8:	07 96       	adiw	r24, 0x07	; 7
    1cfa:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
 Serial.println("Eseguo scrittura nella EEPROM");
    1cfe:	65 e0       	ldi	r22, 0x05	; 5
    1d00:	72 e0       	ldi	r23, 0x02	; 2
    1d02:	8e e2       	ldi	r24, 0x2E	; 46
    1d04:	9d e0       	ldi	r25, 0x0D	; 13
    1d06:	0e 94 8c 39 	call	0x7318	; 0x7318 <_ZN5Print7printlnEPKc>
 Serial.println(" ");
    1d0a:	62 ef       	ldi	r22, 0xF2	; 242
    1d0c:	71 e0       	ldi	r23, 0x01	; 1
    1d0e:	8e e2       	ldi	r24, 0x2E	; 46
    1d10:	9d e0       	ldi	r25, 0x0D	; 13
    1d12:	0e 94 8c 39 	call	0x7318	; 0x7318 <_ZN5Print7printlnEPKc>

  for (int ind = start_ind ; ind < (start_ind + lunBuffer) ; ind++) {
    1d16:	84 01       	movw	r16, r8
    1d18:	c8 0c       	add	r12, r8
    1d1a:	d9 1c       	adc	r13, r9
    1d1c:	0c 15       	cp	r16, r12
    1d1e:	1d 05       	cpc	r17, r13
    1d20:	6c f5       	brge	.+90     	; 0x1d7c <_Z19write_eeprom_string6Stringii+0x11c>
     if (buf[i] != 0) {
    1d22:	f7 01       	movw	r30, r14
    1d24:	60 81       	ld	r22, Z
    1d26:	66 23       	and	r22, r22
    1d28:	19 f1       	breq	.+70     	; 0x1d70 <_Z19write_eeprom_string6Stringii+0x110>
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator uint8_t() const             { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    1d2a:	c8 01       	movw	r24, r16
    1d2c:	0e 94 d1 45 	call	0x8ba2	; 0x8ba2 <eeprom_write_byte>
      EEPROM.write(ind, buf[i]);
      Serial.print(" " + String(buf[i]));
    1d30:	f7 01       	movw	r30, r14
    1d32:	60 81       	ld	r22, Z
    1d34:	ce 01       	movw	r24, r28
    1d36:	07 96       	adiw	r24, 0x07	; 7
    1d38:	0e 94 bb 3c 	call	0x7976	; 0x7976 <_ZN6StringC1Ec>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1d3c:	62 ef       	ldi	r22, 0xF2	; 242
    1d3e:	71 e0       	ldi	r23, 0x01	; 1
    1d40:	ce 01       	movw	r24, r28
    1d42:	01 96       	adiw	r24, 0x01	; 1
    1d44:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
    1d48:	be 01       	movw	r22, r28
    1d4a:	69 5f       	subi	r22, 0xF9	; 249
    1d4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d4e:	ce 01       	movw	r24, r28
    1d50:	01 96       	adiw	r24, 0x01	; 1
    1d52:	0e 94 fc 3d 	call	0x7bf8	; 0x7bf8 <_ZplRK15StringSumHelperRK6String>
    1d56:	bc 01       	movw	r22, r24
    1d58:	8e e2       	ldi	r24, 0x2E	; 46
    1d5a:	9d e0       	ldi	r25, 0x0D	; 13
    1d5c:	0e 94 53 39 	call	0x72a6	; 0x72a6 <_ZN5Print5printERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1d60:	ce 01       	movw	r24, r28
    1d62:	01 96       	adiw	r24, 0x01	; 1
    1d64:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
    1d68:	ce 01       	movw	r24, r28
    1d6a:	07 96       	adiw	r24, 0x07	; 7
    1d6c:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
 
 Serial.println(" len: " + String(lunBuffer));
 Serial.println("Eseguo scrittura nella EEPROM");
 Serial.println(" ");

  for (int ind = start_ind ; ind < (start_ind + lunBuffer) ; ind++) {
    1d70:	0f 5f       	subi	r16, 0xFF	; 255
    1d72:	1f 4f       	sbci	r17, 0xFF	; 255
    1d74:	ff ef       	ldi	r31, 0xFF	; 255
    1d76:	ef 1a       	sub	r14, r31
    1d78:	ff 0a       	sbc	r15, r31
    1d7a:	d0 cf       	rjmp	.-96     	; 0x1d1c <_Z19write_eeprom_string6Stringii+0xbc>
      EEPROM.write(ind, buf[i]);
      Serial.print(" " + String(buf[i]));
     }
       i++;
  }
 Serial.println(" ");
    1d7c:	62 ef       	ldi	r22, 0xF2	; 242
    1d7e:	71 e0       	ldi	r23, 0x01	; 1
    1d80:	8e e2       	ldi	r24, 0x2E	; 46
    1d82:	9d e0       	ldi	r25, 0x0D	; 13
    1d84:	0e 94 8c 39 	call	0x7318	; 0x7318 <_ZN5Print7printlnEPKc>
 
 return true;
}
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	0f b6       	in	r0, 0x3f	; 63
    1d8c:	f8 94       	cli
    1d8e:	be be       	out	0x3e, r11	; 62
    1d90:	0f be       	out	0x3f, r0	; 63
    1d92:	ad be       	out	0x3d, r10	; 61
    1d94:	2c 96       	adiw	r28, 0x0c	; 12
    1d96:	0f b6       	in	r0, 0x3f	; 63
    1d98:	f8 94       	cli
    1d9a:	de bf       	out	0x3e, r29	; 62
    1d9c:	0f be       	out	0x3f, r0	; 63
    1d9e:	cd bf       	out	0x3d, r28	; 61
    1da0:	df 91       	pop	r29
    1da2:	cf 91       	pop	r28
    1da4:	1f 91       	pop	r17
    1da6:	0f 91       	pop	r16
    1da8:	ff 90       	pop	r15
    1daa:	ef 90       	pop	r14
    1dac:	df 90       	pop	r13
    1dae:	cf 90       	pop	r12
    1db0:	bf 90       	pop	r11
    1db2:	af 90       	pop	r10
    1db4:	9f 90       	pop	r9
    1db6:	8f 90       	pop	r8
    1db8:	08 95       	ret

00001dba <_ZN20ParametriCCEC_structC1ERKS_>:
{
	String da_memorizzare;
	int startIND;
} Erogazioni_TypeDef;

typedef struct ParametriCCEC_struct
    1dba:	0f 93       	push	r16
    1dbc:	1f 93       	push	r17
    1dbe:	cf 93       	push	r28
    1dc0:	df 93       	push	r29
    1dc2:	ec 01       	movw	r28, r24
    1dc4:	8b 01       	movw	r16, r22
    1dc6:	0e 94 93 3c 	call	0x7926	; 0x7926 <_ZN6StringC1ERKS_>
    1dca:	b8 01       	movw	r22, r16
    1dcc:	6a 5f       	subi	r22, 0xFA	; 250
    1dce:	7f 4f       	sbci	r23, 0xFF	; 255
    1dd0:	ce 01       	movw	r24, r28
    1dd2:	06 96       	adiw	r24, 0x06	; 6
    1dd4:	0e 94 93 3c 	call	0x7926	; 0x7926 <_ZN6StringC1ERKS_>
    1dd8:	f8 01       	movw	r30, r16
    1dda:	84 85       	ldd	r24, Z+12	; 0x0c
    1ddc:	95 85       	ldd	r25, Z+13	; 0x0d
    1dde:	9d 87       	std	Y+13, r25	; 0x0d
    1de0:	8c 87       	std	Y+12, r24	; 0x0c
    1de2:	df 91       	pop	r29
    1de4:	cf 91       	pop	r28
    1de6:	1f 91       	pop	r17
    1de8:	0f 91       	pop	r16
    1dea:	08 95       	ret

00001dec <_ZN20ParametriCCEC_structD1Ev>:
    1dec:	cf 93       	push	r28
    1dee:	df 93       	push	r29
    1df0:	ec 01       	movw	r28, r24
    1df2:	06 96       	adiw	r24, 0x06	; 6
    1df4:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
    1df8:	ce 01       	movw	r24, r28
    1dfa:	df 91       	pop	r29
    1dfc:	cf 91       	pop	r28
    1dfe:	0c 94 c0 3b 	jmp	0x7780	; 0x7780 <_ZN6StringD1Ev>

00001e02 <_ZN14EthernetClientC1ERKS_>:
#include "Arduino.h"	
#include "Print.h"
#include "Client.h"
#include "IPAddress.h"

class EthernetClient : public Client {
    1e02:	fc 01       	movw	r30, r24
    1e04:	db 01       	movw	r26, r22
#ifdef BIN // Prevent warnings if BIN is previously defined in "iotnx4.h" or similar
#undef BIN
#endif
#define BIN 2

class Print
    1e06:	12 96       	adiw	r26, 0x02	; 2
    1e08:	8d 91       	ld	r24, X+
    1e0a:	9c 91       	ld	r25, X
    1e0c:	13 97       	sbiw	r26, 0x03	; 3
    1e0e:	93 83       	std	Z+3, r25	; 0x03
    1e10:	82 83       	std	Z+2, r24	; 0x02
    SKIP_WHITESPACE // Only tabs, spaces, line feeds & carriage returns are skipped.
};

#define NO_IGNORE_CHAR  '\x01' // a char not found in a valid ASCII numeric field

class Stream : public Print
    1e12:	14 96       	adiw	r26, 0x04	; 4
    1e14:	4d 91       	ld	r20, X+
    1e16:	5d 91       	ld	r21, X+
    1e18:	6d 91       	ld	r22, X+
    1e1a:	7c 91       	ld	r23, X
    1e1c:	17 97       	sbiw	r26, 0x07	; 7
    1e1e:	44 83       	std	Z+4, r20	; 0x04
    1e20:	55 83       	std	Z+5, r21	; 0x05
    1e22:	66 83       	std	Z+6, r22	; 0x06
    1e24:	77 83       	std	Z+7, r23	; 0x07
    1e26:	18 96       	adiw	r26, 0x08	; 8
    1e28:	4d 91       	ld	r20, X+
    1e2a:	5d 91       	ld	r21, X+
    1e2c:	6d 91       	ld	r22, X+
    1e2e:	7c 91       	ld	r23, X
    1e30:	1b 97       	sbiw	r26, 0x0b	; 11
    1e32:	40 87       	std	Z+8, r20	; 0x08
    1e34:	51 87       	std	Z+9, r21	; 0x09
    1e36:	62 87       	std	Z+10, r22	; 0x0a
    1e38:	73 87       	std	Z+11, r23	; 0x0b
    1e3a:	8e ee       	ldi	r24, 0xEE	; 238
    1e3c:	99 e0       	ldi	r25, 0x09	; 9
    1e3e:	91 83       	std	Z+1, r25	; 0x01
    1e40:	80 83       	st	Z, r24
    1e42:	1c 96       	adiw	r26, 0x0c	; 12
    1e44:	8c 91       	ld	r24, X
    1e46:	84 87       	std	Z+12, r24	; 0x0c
    1e48:	08 95       	ret

00001e4a <loop>:
/**************************LOOP PROCEDURA************************************/
void loop() {
    1e4a:	cf 92       	push	r12
    1e4c:	df 92       	push	r13
    1e4e:	ef 92       	push	r14
    1e50:	ff 92       	push	r15
    1e52:	0f 93       	push	r16
    1e54:	1f 93       	push	r17
    1e56:	cf 93       	push	r28
    1e58:	df 93       	push	r29
    1e5a:	cd b7       	in	r28, 0x3d	; 61
    1e5c:	de b7       	in	r29, 0x3e	; 62
    1e5e:	aa 97       	sbiw	r28, 0x2a	; 42
    1e60:	0f b6       	in	r0, 0x3f	; 63
    1e62:	f8 94       	cli
    1e64:	de bf       	out	0x3e, r29	; 62
    1e66:	0f be       	out	0x3f, r0	; 63
    1e68:	cd bf       	out	0x3d, r28	; 61
		
  switch (stato_procedura) {
    1e6a:	e0 91 42 0b 	lds	r30, 0x0B42	; 0x800b42 <stato_procedura>
    1e6e:	f0 91 43 0b 	lds	r31, 0x0B43	; 0x800b43 <stato_procedura+0x1>
    1e72:	32 96       	adiw	r30, 0x02	; 2
    1e74:	ed 30       	cpi	r30, 0x0D	; 13
    1e76:	f1 05       	cpc	r31, r1
    1e78:	08 f0       	brcs	.+2      	; 0x1e7c <loop+0x32>
    1e7a:	f2 c7       	rjmp	.+4068   	; 0x2e60 <loop+0x1016>
    1e7c:	ea 5b       	subi	r30, 0xBA	; 186
    1e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e80:	0c 94 3e 40 	jmp	0x807c	; 0x807c <__tablejump2__>
    case -2:
      { //cli(); // disable interrupt        
        printLine();
    1e84:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
        Serial.print("Parametri CCEC da EEPROM");
    1e88:	60 e9       	ldi	r22, 0x90	; 144
    1e8a:	76 e0       	ldi	r23, 0x06	; 6
    1e8c:	8e e2       	ldi	r24, 0x2E	; 46
    1e8e:	9d e0       	ldi	r25, 0x0D	; 13
    1e90:	0e 94 61 39 	call	0x72c2	; 0x72c2 <_ZN5Print5printEPKc>
        String ServerCCEC = read_eeprom_string_struct(ParametriCCEC[0]);
    1e94:	60 91 d7 0b 	lds	r22, 0x0BD7	; 0x800bd7 <ParametriCCEC>
    1e98:	70 91 d8 0b 	lds	r23, 0x0BD8	; 0x800bd8 <ParametriCCEC+0x1>
    1e9c:	ce 01       	movw	r24, r28
    1e9e:	01 96       	adiw	r24, 0x01	; 1
    1ea0:	8c df       	rcall	.-232    	; 0x1dba <_ZN20ParametriCCEC_structC1ERKS_>
    1ea2:	be 01       	movw	r22, r28
    1ea4:	6f 5f       	subi	r22, 0xFF	; 255
    1ea6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ea8:	ce 01       	movw	r24, r28
    1eaa:	85 96       	adiw	r24, 0x25	; 37
    1eac:	94 dd       	rcall	.-1240   	; 0x19d6 <_Z25read_eeprom_string_struct20ParametriCCEC_struct>
    1eae:	ce 01       	movw	r24, r28
    1eb0:	01 96       	adiw	r24, 0x01	; 1
    1eb2:	9c df       	rcall	.-200    	; 0x1dec <_ZN20ParametriCCEC_structD1Ev>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{ getBytes((unsigned char *)buf, bufsize, index); }
    1eb4:	49 a5       	ldd	r20, Y+41	; 0x29
    1eb6:	5a a5       	ldd	r21, Y+42	; 0x2a
    1eb8:	4f 5f       	subi	r20, 0xFF	; 255
    1eba:	5f 4f       	sbci	r21, 0xFF	; 255
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	68 e3       	ldi	r22, 0x38	; 56
    1ec2:	71 e0       	ldi	r23, 0x01	; 1
    1ec4:	ce 01       	movw	r24, r28
    1ec6:	85 96       	adiw	r24, 0x25	; 37
    1ec8:	0e 94 4e 3e 	call	0x7c9c	; 0x7c9c <_ZNK6String8getBytesEPhjj>
        ServerCCEC.toCharArray(serverREST,ServerCCEC.length()+1);
        printLine();
    1ecc:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
        String IPCCEC = read_eeprom_string_struct(ParametriCCEC[1]);
    1ed0:	60 91 d7 0b 	lds	r22, 0x0BD7	; 0x800bd7 <ParametriCCEC>
    1ed4:	70 91 d8 0b 	lds	r23, 0x0BD8	; 0x800bd8 <ParametriCCEC+0x1>
    1ed8:	62 5f       	subi	r22, 0xF2	; 242
    1eda:	7f 4f       	sbci	r23, 0xFF	; 255
    1edc:	ce 01       	movw	r24, r28
    1ede:	01 96       	adiw	r24, 0x01	; 1
    1ee0:	6c df       	rcall	.-296    	; 0x1dba <_ZN20ParametriCCEC_structC1ERKS_>
    1ee2:	be 01       	movw	r22, r28
    1ee4:	6f 5f       	subi	r22, 0xFF	; 255
    1ee6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ee8:	ce 01       	movw	r24, r28
    1eea:	4f 96       	adiw	r24, 0x1f	; 31
    1eec:	74 dd       	rcall	.-1304   	; 0x19d6 <_Z25read_eeprom_string_struct20ParametriCCEC_struct>
    1eee:	ce 01       	movw	r24, r28
    1ef0:	01 96       	adiw	r24, 0x01	; 1
    1ef2:	7c df       	rcall	.-264    	; 0x1dec <_ZN20ParametriCCEC_structD1Ev>
        printLine();
    1ef4:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
        String Start_save = read_eeprom_string_struct(ParametriCCEC[2]);
    1ef8:	60 91 d7 0b 	lds	r22, 0x0BD7	; 0x800bd7 <ParametriCCEC>
    1efc:	70 91 d8 0b 	lds	r23, 0x0BD8	; 0x800bd8 <ParametriCCEC+0x1>
    1f00:	64 5e       	subi	r22, 0xE4	; 228
    1f02:	7f 4f       	sbci	r23, 0xFF	; 255
    1f04:	ce 01       	movw	r24, r28
    1f06:	01 96       	adiw	r24, 0x01	; 1
    1f08:	58 df       	rcall	.-336    	; 0x1dba <_ZN20ParametriCCEC_structC1ERKS_>
    1f0a:	be 01       	movw	r22, r28
    1f0c:	6f 5f       	subi	r22, 0xFF	; 255
    1f0e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f10:	ce 01       	movw	r24, r28
    1f12:	47 96       	adiw	r24, 0x17	; 23
    1f14:	60 dd       	rcall	.-1344   	; 0x19d6 <_Z25read_eeprom_string_struct20ParametriCCEC_struct>
    1f16:	ce 01       	movw	r24, r28
    1f18:	01 96       	adiw	r24, 0x01	; 1
    1f1a:	68 df       	rcall	.-304    	; 0x1dec <_ZN20ParametriCCEC_structD1Ev>
        printLine();
    1f1c:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
        String CSEDE = read_eeprom_string_struct(ParametriCCEC[3]);
    1f20:	60 91 d7 0b 	lds	r22, 0x0BD7	; 0x800bd7 <ParametriCCEC>
    1f24:	70 91 d8 0b 	lds	r23, 0x0BD8	; 0x800bd8 <ParametriCCEC+0x1>
    1f28:	66 5d       	subi	r22, 0xD6	; 214
    1f2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f2c:	ce 01       	movw	r24, r28
    1f2e:	01 96       	adiw	r24, 0x01	; 1
    1f30:	44 df       	rcall	.-376    	; 0x1dba <_ZN20ParametriCCEC_structC1ERKS_>
    1f32:	be 01       	movw	r22, r28
    1f34:	6f 5f       	subi	r22, 0xFF	; 255
    1f36:	7f 4f       	sbci	r23, 0xFF	; 255
    1f38:	ce 01       	movw	r24, r28
    1f3a:	0f 96       	adiw	r24, 0x0f	; 15
    1f3c:	4c dd       	rcall	.-1384   	; 0x19d6 <_Z25read_eeprom_string_struct20ParametriCCEC_struct>
    1f3e:	ce 01       	movw	r24, r28
    1f40:	01 96       	adiw	r24, 0x01	; 1
    1f42:	54 df       	rcall	.-344    	; 0x1dec <_ZN20ParametriCCEC_structD1Ev>
    1f44:	4b 89       	ldd	r20, Y+19	; 0x13
    1f46:	5c 89       	ldd	r21, Y+20	; 0x14
    1f48:	4f 5f       	subi	r20, 0xFF	; 255
    1f4a:	5f 4f       	sbci	r21, 0xFF	; 255
    1f4c:	20 e0       	ldi	r18, 0x00	; 0
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	6a e4       	ldi	r22, 0x4A	; 74
    1f52:	71 e0       	ldi	r23, 0x01	; 1
    1f54:	ce 01       	movw	r24, r28
    1f56:	0f 96       	adiw	r24, 0x0f	; 15
    1f58:	0e 94 4e 3e 	call	0x7c9c	; 0x7c9c <_ZNK6String8getBytesEPhjj>
        CSEDE.toCharArray(CodSede,CSEDE.length()+1);        
        printLine();
    1f5c:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
        stato_procedura++;
    1f60:	80 91 42 0b 	lds	r24, 0x0B42	; 0x800b42 <stato_procedura>
    1f64:	90 91 43 0b 	lds	r25, 0x0B43	; 0x800b43 <stato_procedura+0x1>
    1f68:	01 96       	adiw	r24, 0x01	; 1
    1f6a:	90 93 43 0b 	sts	0x0B43, r25	; 0x800b43 <stato_procedura+0x1>
    1f6e:	80 93 42 0b 	sts	0x0B42, r24	; 0x800b42 <stato_procedura>
        printLine();
        String IPCCEC = read_eeprom_string_struct(ParametriCCEC[1]);
        printLine();
        String Start_save = read_eeprom_string_struct(ParametriCCEC[2]);
        printLine();
        String CSEDE = read_eeprom_string_struct(ParametriCCEC[3]);
    1f72:	ce 01       	movw	r24, r28
    1f74:	0f 96       	adiw	r24, 0x0f	; 15
    1f76:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
        String ServerCCEC = read_eeprom_string_struct(ParametriCCEC[0]);
        ServerCCEC.toCharArray(serverREST,ServerCCEC.length()+1);
        printLine();
        String IPCCEC = read_eeprom_string_struct(ParametriCCEC[1]);
        printLine();
        String Start_save = read_eeprom_string_struct(ParametriCCEC[2]);
    1f7a:	ce 01       	movw	r24, r28
    1f7c:	47 96       	adiw	r24, 0x17	; 23
    1f7e:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
        printLine();
        Serial.print("Parametri CCEC da EEPROM");
        String ServerCCEC = read_eeprom_string_struct(ParametriCCEC[0]);
        ServerCCEC.toCharArray(serverREST,ServerCCEC.length()+1);
        printLine();
        String IPCCEC = read_eeprom_string_struct(ParametriCCEC[1]);
    1f82:	ce 01       	movw	r24, r28
    1f84:	4f 96       	adiw	r24, 0x1f	; 31
    1f86:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
  switch (stato_procedura) {
    case -2:
      { //cli(); // disable interrupt        
        printLine();
        Serial.print("Parametri CCEC da EEPROM");
        String ServerCCEC = read_eeprom_string_struct(ParametriCCEC[0]);
    1f8a:	ce 01       	movw	r24, r28
    1f8c:	85 96       	adiw	r24, 0x25	; 37
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1f8e:	66 c7       	rjmp	.+3788   	; 0x2e5c <loop+0x1012>
    1f90:	2f ef       	ldi	r18, 0xFF	; 255
    1f92:	39 ef       	ldi	r19, 0xF9	; 249
    1f94:	80 e0       	ldi	r24, 0x00	; 0
    1f96:	21 50       	subi	r18, 0x01	; 1
    1f98:	30 40       	sbci	r19, 0x00	; 0
    1f9a:	80 40       	sbci	r24, 0x00	; 0
    1f9c:	e1 f7       	brne	.-8      	; 0x1f96 <loop+0x14c>
      }
      break;
    case -1:
      {       
        _delay_ms(20);
        abilitaPulsanti();
    1f9e:	00 c0       	rjmp	.+0      	; 0x1fa0 <loop+0x156>
    1fa0:	00 00       	nop
    1fa2:	83 d9       	rcall	.-3322   	; 0x12aa <_Z15abilitaPulsantiv>
    1fa4:	9f ef       	ldi	r25, 0xFF	; 255
    1fa6:	29 ef       	ldi	r18, 0xF9	; 249
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	91 50       	subi	r25, 0x01	; 1
    1fac:	20 40       	sbci	r18, 0x00	; 0
    1fae:	30 40       	sbci	r19, 0x00	; 0
    1fb0:	e1 f7       	brne	.-8      	; 0x1faa <loop+0x160>
    1fb2:	00 c0       	rjmp	.+0      	; 0x1fb4 <loop+0x16a>
        _delay_ms(20);
        abilitaContattiPistola();
    1fb4:	00 00       	nop
    1fb6:	83 d9       	rcall	.-3322   	; 0x12be <_Z22abilitaContattiPistolav>
    1fb8:	8f ef       	ldi	r24, 0xFF	; 255
    1fba:	99 ef       	ldi	r25, 0xF9	; 249
    1fbc:	20 e0       	ldi	r18, 0x00	; 0
    1fbe:	81 50       	subi	r24, 0x01	; 1
    1fc0:	90 40       	sbci	r25, 0x00	; 0
    1fc2:	20 40       	sbci	r18, 0x00	; 0
    1fc4:	e1 f7       	brne	.-8      	; 0x1fbe <loop+0x174>
    1fc6:	00 c0       	rjmp	.+0      	; 0x1fc8 <loop+0x17e>
    1fc8:	00 00       	nop
        _delay_ms(20);
        stato_procedura++;
    1fca:	80 91 42 0b 	lds	r24, 0x0B42	; 0x800b42 <stato_procedura>
    1fce:	90 91 43 0b 	lds	r25, 0x0B43	; 0x800b43 <stato_procedura+0x1>
    1fd2:	01 96       	adiw	r24, 0x01	; 1
    1fd4:	90 93 43 0b 	sts	0x0B43, r25	; 0x800b43 <stato_procedura+0x1>
    1fd8:	80 93 42 0b 	sts	0x0B42, r24	; 0x800b42 <stato_procedura>
      }
      break;
    1fdc:	41 c7       	rjmp	.+3714   	; 0x2e60 <loop+0x1016>
    case 0:
      {
		lcd.noBacklight();
    1fde:	87 e6       	ldi	r24, 0x67	; 103
    1fe0:	9b e0       	ldi	r25, 0x0B	; 11
    1fe2:	0e 94 c1 30 	call	0x6182	; 0x6182 <_ZN3LCD11noBacklightEv>
        alreadyTimbrata = false;
    1fe6:	10 92 7f 0b 	sts	0x0B7F, r1	; 0x800b7f <alreadyTimbrata>
        enable_ETH();
    1fea:	0e 94 93 01 	call	0x326	; 0x326 <_ZL10enable_ETHv>
    1fee:	8f e3       	ldi	r24, 0x3F	; 63
    1ff0:	9c e9       	ldi	r25, 0x9C	; 156
    1ff2:	01 97       	sbiw	r24, 0x01	; 1
    1ff4:	f1 f7       	brne	.-4      	; 0x1ff2 <loop+0x1a8>
    1ff6:	00 c0       	rjmp	.+0      	; 0x1ff8 <loop+0x1ae>
    1ff8:	00 00       	nop
		_delay_ms(10);
        /************************************************/
        righeDisplay[1] = " * AUTENTICAZIONE *";
    1ffa:	69 ea       	ldi	r22, 0xA9	; 169
    1ffc:	76 e0       	ldi	r23, 0x06	; 6
    1ffe:	87 ef       	ldi	r24, 0xF7	; 247
    2000:	9a e0       	ldi	r25, 0x0A	; 10
    2002:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringaSEPKc>
        righeDisplay[2] = "";
    2006:	6f ee       	ldi	r22, 0xEF	; 239
    2008:	71 e0       	ldi	r23, 0x01	; 1
    200a:	8d ef       	ldi	r24, 0xFD	; 253
    200c:	9a e0       	ldi	r25, 0x0A	; 10
    200e:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringaSEPKc>
        righeDisplay[3] = "    Avvicina ATE  ";
    2012:	6d eb       	ldi	r22, 0xBD	; 189
    2014:	76 e0       	ldi	r23, 0x06	; 6
    2016:	83 e0       	ldi	r24, 0x03	; 3
    2018:	9b e0       	ldi	r25, 0x0B	; 11
    201a:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringaSEPKc>
        displayLCD(righeDisplay, stato_procedura, 50);
    201e:	60 91 42 0b 	lds	r22, 0x0B42	; 0x800b42 <stato_procedura>
    2022:	70 91 43 0b 	lds	r23, 0x0B43	; 0x800b43 <stato_procedura+0x1>
    2026:	42 e3       	ldi	r20, 0x32	; 50
    2028:	50 e0       	ldi	r21, 0x00	; 0
    202a:	81 ef       	ldi	r24, 0xF1	; 241
    202c:	9a e0       	ldi	r25, 0x0A	; 10
    202e:	0e 94 81 03 	call	0x702	; 0x702 <_Z10displayLCDP6Stringii>
        /************************************************/
		sei();
    2032:	78 94       	sei
    2034:	9f ef       	ldi	r25, 0xFF	; 255
    2036:	23 ed       	ldi	r18, 0xD3	; 211
    2038:	30 e3       	ldi	r19, 0x30	; 48
    203a:	91 50       	subi	r25, 0x01	; 1
    203c:	20 40       	sbci	r18, 0x00	; 0
    203e:	30 40       	sbci	r19, 0x00	; 0
    2040:	e1 f7       	brne	.-8      	; 0x203a <loop+0x1f0>
    2042:	00 c0       	rjmp	.+0      	; 0x2044 <loop+0x1fa>
    2044:	00 00       	nop
		_delay_ms(1000);
        //stato_procedura++;
		avanzaStato(TverificaBadge);
    2046:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <TverificaBadge>
    204a:	70 91 2f 01 	lds	r23, 0x012F	; 0x80012f <TverificaBadge+0x1>
    204e:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <TverificaBadge+0x2>
    2052:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <TverificaBadge+0x3>
    2056:	0c 94 46 19 	jmp	0x328c	; 0x328c <loop+0x1442>
        //while (1);
      }
      break;
    case 1:
      {
        TARGA = "";
    205a:	6f ee       	ldi	r22, 0xEF	; 239
    205c:	71 e0       	ldi	r23, 0x01	; 1
    205e:	8b e9       	ldi	r24, 0x9B	; 155
    2060:	9a e0       	ldi	r25, 0x0A	; 10
    2062:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringaSEPKc>
        KM = "";
    2066:	6f ee       	ldi	r22, 0xEF	; 239
    2068:	71 e0       	ldi	r23, 0x01	; 1
    206a:	85 e9       	ldi	r24, 0x95	; 149
    206c:	9a e0       	ldi	r25, 0x0A	; 10
    206e:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringaSEPKc>

        /*****************************************************/
        String ATe = "ERRORE";
    2072:	69 e8       	ldi	r22, 0x89	; 137
    2074:	72 e0       	ldi	r23, 0x02	; 2
    2076:	ce 01       	movw	r24, r28
    2078:	47 96       	adiw	r24, 0x17	; 23
    207a:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
        
        if (!alreadyTimbrata) {
    207e:	80 91 7f 0b 	lds	r24, 0x0B7F	; 0x800b7f <alreadyTimbrata>
    2082:	81 11       	cpse	r24, r1
    2084:	0f c0       	rjmp	.+30     	; 0x20a4 <loop+0x25a>
          ATe = GetCodeRfidATe();          
    2086:	ce 01       	movw	r24, r28
    2088:	01 96       	adiw	r24, 0x01	; 1
    208a:	0e 94 ad 05 	call	0xb5a	; 0xb5a <_Z14GetCodeRfidATev>
    208e:	be 01       	movw	r22, r28
    2090:	6f 5f       	subi	r22, 0xFF	; 255
    2092:	7f 4f       	sbci	r23, 0xFF	; 255
    2094:	ce 01       	movw	r24, r28
    2096:	47 96       	adiw	r24, 0x17	; 23
    2098:	0e 94 9b 3c 	call	0x7936	; 0x7936 <_ZN6StringaSEOS_>
    209c:	ce 01       	movw	r24, r28
    209e:	01 96       	adiw	r24, 0x01	; 1
    20a0:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
    20a4:	69 e8       	ldi	r22, 0x89	; 137
    20a6:	72 e0       	ldi	r23, 0x02	; 2
    20a8:	ce 01       	movw	r24, r28
    20aa:	47 96       	adiw	r24, 0x17	; 23
    20ac:	0e 94 30 3e 	call	0x7c60	; 0x7c60 <_ZNK6String6equalsEPKc>
        }

        if ((ATe != "ERRORE") && (bitislow(PORTC, CS_W5500))) //&& (BIT_IS_CLEAR(PORTC, 4)))
    20b0:	81 11       	cpse	r24, r1
    20b2:	bf c0       	rjmp	.+382    	; 0x2232 <loop+0x3e8>
    20b4:	44 99       	sbic	0x08, 4	; 8
    20b6:	bd c0       	rjmp	.+378    	; 0x2232 <loop+0x3e8>
        {
          Serial.println("");
    20b8:	6f ee       	ldi	r22, 0xEF	; 239
    20ba:	71 e0       	ldi	r23, 0x01	; 1
    20bc:	8e e2       	ldi	r24, 0x2E	; 46
    20be:	9d e0       	ldi	r25, 0x0D	; 13
    20c0:	0e 94 8c 39 	call	0x7318	; 0x7318 <_ZN5Print7printlnEPKc>
          Serial.print("***************************************************************");
    20c4:	6a ef       	ldi	r22, 0xFA	; 250
    20c6:	77 e0       	ldi	r23, 0x07	; 7
    20c8:	8e e2       	ldi	r24, 0x2E	; 46
    20ca:	9d e0       	ldi	r25, 0x0D	; 13
    20cc:	0e 94 61 39 	call	0x72c2	; 0x72c2 <_ZN5Print5printEPKc>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    20d0:	6a e3       	ldi	r22, 0x3A	; 58
    20d2:	78 e0       	ldi	r23, 0x08	; 8
    20d4:	ce 01       	movw	r24, r28
    20d6:	01 96       	adiw	r24, 0x01	; 1
    20d8:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
          Serial.println(" Tessera ID : " + ATe);
    20dc:	be 01       	movw	r22, r28
    20de:	69 5e       	subi	r22, 0xE9	; 233
    20e0:	7f 4f       	sbci	r23, 0xFF	; 255
    20e2:	ce 01       	movw	r24, r28
    20e4:	01 96       	adiw	r24, 0x01	; 1
    20e6:	0e 94 fc 3d 	call	0x7bf8	; 0x7bf8 <_ZplRK15StringSumHelperRK6String>
    20ea:	bc 01       	movw	r22, r24
    20ec:	8e e2       	ldi	r24, 0x2E	; 46
    20ee:	9d e0       	ldi	r25, 0x0D	; 13
    20f0:	0e 94 7c 39 	call	0x72f8	; 0x72f8 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    20f4:	ce 01       	movw	r24, r28
    20f6:	01 96       	adiw	r24, 0x01	; 1
    20f8:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
          Serial.print("***************************************************************");
    20fc:	6a ef       	ldi	r22, 0xFA	; 250
    20fe:	77 e0       	ldi	r23, 0x07	; 7
    2100:	8e e2       	ldi	r24, 0x2E	; 46
    2102:	9d e0       	ldi	r25, 0x0D	; 13
    2104:	0e 94 61 39 	call	0x72c2	; 0x72c2 <_ZN5Print5printEPKc>
          Serial.println("Riconoscimento Tessera .............");
    2108:	69 e4       	ldi	r22, 0x49	; 73
    210a:	78 e0       	ldi	r23, 0x08	; 8
    210c:	8e e2       	ldi	r24, 0x2E	; 46
    210e:	9d e0       	ldi	r25, 0x0D	; 13
    2110:	0e 94 8c 39 	call	0x7318	; 0x7318 <_ZN5Print7printlnEPKc>

           RaccoltaDati[0] = ATe;
    2114:	be 01       	movw	r22, r28
    2116:	69 5e       	subi	r22, 0xE9	; 233
    2118:	7f 4f       	sbci	r23, 0xFF	; 255
    211a:	85 e1       	ldi	r24, 0x15	; 21
    211c:	9b e0       	ldi	r25, 0x0B	; 11
    211e:	0e 94 7e 3c 	call	0x78fc	; 0x78fc <_ZN6StringaSERKS_>
          // RaccoltaDati[0] = "DD92743A";
          // RaccoltaDati[5] = "000";

          lcd.backlight();
    2122:	87 e6       	ldi	r24, 0x67	; 103
    2124:	9b e0       	ldi	r25, 0x0B	; 11
    2126:	0e 94 b9 30 	call	0x6172	; 0x6172 <_ZN3LCD9backlightEv>
          lcd.display();
    212a:	87 e6       	ldi	r24, 0x67	; 103
    212c:	9b e0       	ldi	r25, 0x0B	; 11
    212e:	0e 94 1f 31 	call	0x623e	; 0x623e <_ZN3LCD7displayEv>
    2132:	8f e3       	ldi	r24, 0x3F	; 63
    2134:	9c e9       	ldi	r25, 0x9C	; 156
    2136:	01 97       	sbiw	r24, 0x01	; 1
    2138:	f1 f7       	brne	.-4      	; 0x2136 <loop+0x2ec>
    213a:	00 c0       	rjmp	.+0      	; 0x213c <loop+0x2f2>
    213c:	00 00       	nop
          _delay_ms(10);

          righeDisplay[1] = "  RICONOSCIMENTO ";
    213e:	6e e6       	ldi	r22, 0x6E	; 110
    2140:	78 e0       	ldi	r23, 0x08	; 8
    2142:	87 ef       	ldi	r24, 0xF7	; 247
    2144:	9a e0       	ldi	r25, 0x0A	; 10
    2146:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringaSEPKc>
          righeDisplay[2] = ".....In Corso.....";
    214a:	60 e8       	ldi	r22, 0x80	; 128
    214c:	78 e0       	ldi	r23, 0x08	; 8
    214e:	8d ef       	ldi	r24, 0xFD	; 253
    2150:	9a e0       	ldi	r25, 0x0A	; 10
    2152:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringaSEPKc>
          //righeDisplay[3] = "   Rfid: " + ATe;
          righeDisplay[3] = "Attendere.........";
    2156:	63 e9       	ldi	r22, 0x93	; 147
    2158:	78 e0       	ldi	r23, 0x08	; 8
    215a:	83 e0       	ldi	r24, 0x03	; 3
    215c:	9b e0       	ldi	r25, 0x0B	; 11
    215e:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringaSEPKc>
          displayLCD(righeDisplay, stato_procedura, 100);
    2162:	60 91 42 0b 	lds	r22, 0x0B42	; 0x800b42 <stato_procedura>
    2166:	70 91 43 0b 	lds	r23, 0x0B43	; 0x800b43 <stato_procedura+0x1>
    216a:	44 e6       	ldi	r20, 0x64	; 100
    216c:	50 e0       	ldi	r21, 0x00	; 0
    216e:	81 ef       	ldi	r24, 0xF1	; 241
    2170:	9a e0       	ldi	r25, 0x0A	; 10
    2172:	0e 94 81 03 	call	0x702	; 0x702 <_Z10displayLCDP6Stringii>
          InizializzaEthernet();
    2176:	0e 94 97 01 	call	0x32e	; 0x32e <_Z19InizializzaEthernetv>
    217a:	9f ef       	ldi	r25, 0xFF	; 255
    217c:	23 ed       	ldi	r18, 0xD3	; 211
    217e:	30 e3       	ldi	r19, 0x30	; 48
    2180:	91 50       	subi	r25, 0x01	; 1
    2182:	20 40       	sbci	r18, 0x00	; 0
    2184:	30 40       	sbci	r19, 0x00	; 0
    2186:	e1 f7       	brne	.-8      	; 0x2180 <loop+0x336>
    2188:	00 c0       	rjmp	.+0      	; 0x218a <loop+0x340>
    218a:	00 00       	nop
          _delay_ms(1000); // tempo per inizializzare la ethernet
       //}

        // Effettua chiamata REST per validare CARD NFC
        
        righeDisplay[1] =  "** TARGA MEZZO **";
    218c:	66 ed       	ldi	r22, 0xD6	; 214
    218e:	75 e0       	ldi	r23, 0x05	; 5
    2190:	87 ef       	ldi	r24, 0xF7	; 247
    2192:	9a e0       	ldi	r25, 0x0A	; 10
    2194:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringaSEPKc>
        righeDisplay[2] = "TARGA:";
    2198:	68 ee       	ldi	r22, 0xE8	; 232
    219a:	75 e0       	ldi	r23, 0x05	; 5
    219c:	8d ef       	ldi	r24, 0xFD	; 253
    219e:	9a e0       	ldi	r25, 0x0A	; 10
    21a0:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringaSEPKc>
        righeDisplay[3] = "#:Conferma *:Usa TAG";
    21a4:	6f ee       	ldi	r22, 0xEF	; 239
    21a6:	75 e0       	ldi	r23, 0x05	; 5
    21a8:	83 e0       	ldi	r24, 0x03	; 3
    21aa:	9b e0       	ldi	r25, 0x0B	; 11
    21ac:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringaSEPKc>

		//if (GetAteValidation(80,serverATE,clientATE,ATe)) // Server Centrale
		
        // bool GetAteCheck(int Port, char serverREST[], EthernetClient ClientHTTP, String _idAte)
        if (GetAteCheck(80,serverREST,clientATE,ATe)) 
    21b0:	be 01       	movw	r22, r28
    21b2:	69 5e       	subi	r22, 0xE9	; 233
    21b4:	7f 4f       	sbci	r23, 0xFF	; 255
    21b6:	ce 01       	movw	r24, r28
    21b8:	0f 96       	adiw	r24, 0x0f	; 15
    21ba:	0e 94 93 3c 	call	0x7926	; 0x7926 <_ZN6StringC1ERKS_>
    21be:	6f eb       	ldi	r22, 0xBF	; 191
    21c0:	7a e0       	ldi	r23, 0x0A	; 10
    21c2:	ce 01       	movw	r24, r28
    21c4:	01 96       	adiw	r24, 0x01	; 1
    21c6:	1d de       	rcall	.-966    	; 0x1e02 <_ZN14EthernetClientC1ERKS_>
    21c8:	9e 01       	movw	r18, r28
    21ca:	21 5f       	subi	r18, 0xF1	; 241
    21cc:	3f 4f       	sbci	r19, 0xFF	; 255
    21ce:	ae 01       	movw	r20, r28
    21d0:	4f 5f       	subi	r20, 0xFF	; 255
    21d2:	5f 4f       	sbci	r21, 0xFF	; 255
    21d4:	68 e3       	ldi	r22, 0x38	; 56
    21d6:	71 e0       	ldi	r23, 0x01	; 1
    21d8:	80 e5       	ldi	r24, 0x50	; 80
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	0e 94 7e 06 	call	0xcfc	; 0xcfc <_Z11GetAteCheckiPc14EthernetClient6String>
    21e0:	18 2f       	mov	r17, r24
    21e2:	ce 01       	movw	r24, r28
    21e4:	0f 96       	adiw	r24, 0x0f	; 15
    21e6:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
    21ea:	11 23       	and	r17, r17
    21ec:	09 f4       	brne	.+2      	; 0x21f0 <loop+0x3a6>
    21ee:	96 c6       	rjmp	.+3372   	; 0x2f1c <loop+0x10d2>
        {
                //SET_BIT(PORTC,PC4);
				SET_BIT(PORTC,CS_W5500);
    21f0:	44 9a       	sbi	0x08, 4	; 8
                RaccoltaDati[5] = "000";               
    21f2:	66 ef       	ldi	r22, 0xF6	; 246
    21f4:	77 e0       	ldi	r23, 0x07	; 7
    21f6:	83 e3       	ldi	r24, 0x33	; 51
    21f8:	9b e0       	ldi	r25, 0x0B	; 11
    21fa:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringaSEPKc>
                Buzzer(1,200);
    21fe:	48 ec       	ldi	r20, 0xC8	; 200
    2200:	50 e0       	ldi	r21, 0x00	; 0
    2202:	60 e0       	ldi	r22, 0x00	; 0
    2204:	70 e0       	ldi	r23, 0x00	; 0
    2206:	81 e0       	ldi	r24, 0x01	; 1
    2208:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z6Buzzerhm>
    220c:	8f ef       	ldi	r24, 0xFF	; 255
    220e:	93 ec       	ldi	r25, 0xC3	; 195
    2210:	29 e0       	ldi	r18, 0x09	; 9
    2212:	81 50       	subi	r24, 0x01	; 1
    2214:	90 40       	sbci	r25, 0x00	; 0
    2216:	20 40       	sbci	r18, 0x00	; 0
    2218:	e1 f7       	brne	.-8      	; 0x2212 <loop+0x3c8>
    221a:	00 c0       	rjmp	.+0      	; 0x221c <loop+0x3d2>
    221c:	00 00       	nop
				_delay_ms(200);
                avanzaStato(TinputTarga);
    221e:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <TinputTarga>
    2222:	70 91 2b 01 	lds	r23, 0x012B	; 0x80012b <TinputTarga+0x1>
    2226:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <TinputTarga+0x2>
    222a:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <TinputTarga+0x3>
    222e:	0e 94 b6 03 	call	0x76c	; 0x76c <_Z11avanzaStatom>
      {
        TARGA = "";
        KM = "";

        /*****************************************************/
        String ATe = "ERRORE";
    2232:	ce 01       	movw	r24, r28
    2234:	47 96       	adiw	r24, 0x17	; 23
    2236:	12 c6       	rjmp	.+3108   	; 0x2e5c <loop+0x1012>
		}    
      }
      break;
    case 2:
      {
        lcd.setCursor(0, 0);
    2238:	40 e0       	ldi	r20, 0x00	; 0
    223a:	60 e0       	ldi	r22, 0x00	; 0
    223c:	87 e6       	ldi	r24, 0x67	; 103
    223e:	9b e0       	ldi	r25, 0x0B	; 11
    2240:	0e 94 d7 30 	call	0x61ae	; 0x61ae <_ZN3LCD9setCursorEhh>
        lcd.print((char)1);  // STAMPA LA CLESSIDRA
    2244:	61 e0       	ldi	r22, 0x01	; 1
    2246:	87 e6       	ldi	r24, 0x67	; 103
    2248:	9b e0       	ldi	r25, 0x0B	; 11
    224a:	0e 94 62 39 	call	0x72c4	; 0x72c4 <_ZN5Print5printEc>
        lcd.print("Tempo: " + String((UltimoPassaggioStato + Timer - secs - 1)) + " sec ");
    224e:	40 91 ab 0a 	lds	r20, 0x0AAB	; 0x800aab <UltimoPassaggioStato>
    2252:	50 91 ac 0a 	lds	r21, 0x0AAC	; 0x800aac <UltimoPassaggioStato+0x1>
    2256:	60 91 ad 0a 	lds	r22, 0x0AAD	; 0x800aad <UltimoPassaggioStato+0x2>
    225a:	70 91 ae 0a 	lds	r23, 0x0AAE	; 0x800aae <UltimoPassaggioStato+0x3>
    225e:	80 91 a7 0a 	lds	r24, 0x0AA7	; 0x800aa7 <Timer>
    2262:	90 91 a8 0a 	lds	r25, 0x0AA8	; 0x800aa8 <Timer+0x1>
    2266:	a0 91 a9 0a 	lds	r26, 0x0AA9	; 0x800aa9 <Timer+0x2>
    226a:	b0 91 aa 0a 	lds	r27, 0x0AAA	; 0x800aaa <Timer+0x3>
    226e:	48 0f       	add	r20, r24
    2270:	59 1f       	adc	r21, r25
    2272:	6a 1f       	adc	r22, r26
    2274:	7b 1f       	adc	r23, r27
    2276:	41 50       	subi	r20, 0x01	; 1
    2278:	51 09       	sbc	r21, r1
    227a:	61 09       	sbc	r22, r1
    227c:	71 09       	sbc	r23, r1
    227e:	80 91 af 0a 	lds	r24, 0x0AAF	; 0x800aaf <secs>
    2282:	90 91 b0 0a 	lds	r25, 0x0AB0	; 0x800ab0 <secs+0x1>
    2286:	a0 91 b1 0a 	lds	r26, 0x0AB1	; 0x800ab1 <secs+0x2>
    228a:	b0 91 b2 0a 	lds	r27, 0x0AB2	; 0x800ab2 <secs+0x3>
    228e:	48 1b       	sub	r20, r24
    2290:	59 0b       	sbc	r21, r25
    2292:	6a 0b       	sbc	r22, r26
    2294:	7b 0b       	sbc	r23, r27
    2296:	2a e0       	ldi	r18, 0x0A	; 10
    2298:	ce 01       	movw	r24, r28
    229a:	0f 96       	adiw	r24, 0x0f	; 15
    229c:	0e 94 51 3d 	call	0x7aa2	; 0x7aa2 <_ZN6StringC1Emh>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    22a0:	6e e2       	ldi	r22, 0x2E	; 46
    22a2:	77 e0       	ldi	r23, 0x07	; 7
    22a4:	ce 01       	movw	r24, r28
    22a6:	01 96       	adiw	r24, 0x01	; 1
    22a8:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
    22ac:	be 01       	movw	r22, r28
    22ae:	61 5f       	subi	r22, 0xF1	; 241
    22b0:	7f 4f       	sbci	r23, 0xFF	; 255
    22b2:	ce 01       	movw	r24, r28
    22b4:	01 96       	adiw	r24, 0x01	; 1
    22b6:	0e 94 fc 3d 	call	0x7bf8	; 0x7bf8 <_ZplRK15StringSumHelperRK6String>
    22ba:	6c e0       	ldi	r22, 0x0C	; 12
    22bc:	77 e0       	ldi	r23, 0x07	; 7
    22be:	0e 94 0d 3e 	call	0x7c1a	; 0x7c1a <_ZplRK15StringSumHelperPKc>
    22c2:	bc 01       	movw	r22, r24
    22c4:	87 e6       	ldi	r24, 0x67	; 103
    22c6:	9b e0       	ldi	r25, 0x0B	; 11
    22c8:	0e 94 53 39 	call	0x72a6	; 0x72a6 <_ZN5Print5printERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    22cc:	ce 01       	movw	r24, r28
    22ce:	01 96       	adiw	r24, 0x01	; 1
    22d0:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
    22d4:	ce 01       	movw	r24, r28
    22d6:	0f 96       	adiw	r24, 0x0f	; 15
    22d8:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
        // da commentare
        // Carburante = "D"; // Simulo Abilitazione Diesel
        // da commentare
        // Carburante = "B"; // Simulo Abilitazione Benzina
        /*****************************************************************/
        gpio.setCONFREG(0x3C);
    22dc:	6c e3       	ldi	r22, 0x3C	; 60
    22de:	82 e9       	ldi	r24, 0x92	; 146
    22e0:	9a e0       	ldi	r25, 0x0A	; 10
    22e2:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <_ZN7PCA953410setCONFREGEh>
        uint8_t c = gpio.Read_IP_REGISTER();
    22e6:	82 e9       	ldi	r24, 0x92	; 146
    22e8:	9a e0       	ldi	r25, 0x0A	; 10
    22ea:	0e 94 71 1e 	call	0x3ce2	; 0x3ce2 <_ZN7PCA953416Read_IP_REGISTEREv>
    22ee:	e8 2e       	mov	r14, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    22f0:	42 e0       	ldi	r20, 0x02	; 2
    22f2:	be 01       	movw	r22, r28
    22f4:	69 5e       	subi	r22, 0xE9	; 233
    22f6:	7f 4f       	sbci	r23, 0xFF	; 255
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	0e 94 fb 42 	call	0x85f6	; 0x85f6 <__itoa_ncheck>
        char buf[8];
        itoa(c, buf, 2);
        gpio.setCONFREG(0xC3);
    22fe:	63 ec       	ldi	r22, 0xC3	; 195
    2300:	82 e9       	ldi	r24, 0x92	; 146
    2302:	9a e0       	ldi	r25, 0x0A	; 10
    2304:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <_ZN7PCA953410setCONFREGEh>
        uint8_t r = gpio.Read_IP_REGISTER();
    2308:	82 e9       	ldi	r24, 0x92	; 146
    230a:	9a e0       	ldi	r25, 0x0A	; 10
    230c:	0e 94 71 1e 	call	0x3ce2	; 0x3ce2 <_ZN7PCA953416Read_IP_REGISTEREv>
    2310:	f8 2e       	mov	r15, r24
    2312:	42 e0       	ldi	r20, 0x02	; 2
    2314:	be 01       	movw	r22, r28
    2316:	61 5f       	subi	r22, 0xF1	; 241
    2318:	7f 4f       	sbci	r23, 0xFF	; 255
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	0e 94 fb 42 	call	0x85f6	; 0x85f6 <__itoa_ncheck>
        char bufr[8];
        itoa(r, bufr, 2);
        char ris[8];
        uint8_t z = (r ^ c);
        itoa(z, ris, 2);
    2320:	fe 24       	eor	r15, r14
    2322:	ef 2c       	mov	r14, r15
    2324:	f1 2c       	mov	r15, r1
    2326:	42 e0       	ldi	r20, 0x02	; 2
    2328:	be 01       	movw	r22, r28
    232a:	6f 5f       	subi	r22, 0xFF	; 255
    232c:	7f 4f       	sbci	r23, 0xFF	; 255
    232e:	c7 01       	movw	r24, r14
    2330:	0e 94 fb 42 	call	0x85f6	; 0x85f6 <__itoa_ncheck>
        char T = getCharKeypad(int(z));
    2334:	c7 01       	movw	r24, r14
    2336:	0e 94 9b 02 	call	0x536	; 0x536 <_Z13getCharKeypadi>
    233a:	2f ef       	ldi	r18, 0xFF	; 255
    233c:	39 ef       	ldi	r19, 0xF9	; 249
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	21 50       	subi	r18, 0x01	; 1
    2342:	30 40       	sbci	r19, 0x00	; 0
    2344:	90 40       	sbci	r25, 0x00	; 0
    2346:	e1 f7       	brne	.-8      	; 0x2340 <loop+0x4f6>
    2348:	00 c0       	rjmp	.+0      	; 0x234a <loop+0x500>
        _delay_ms(20);
        /*****************************************************************/
        inputTarga(T);
    234a:	00 00       	nop
    234c:	3a d9       	rcall	.-3468   	; 0x15c2 <_Z10inputTargac>
      }
      break;
    234e:	88 c5       	rjmp	.+2832   	; 0x2e60 <loop+0x1016>
    case 3:
      {
        lcd.setCursor(0, 0);
    2350:	40 e0       	ldi	r20, 0x00	; 0
    2352:	60 e0       	ldi	r22, 0x00	; 0
    2354:	87 e6       	ldi	r24, 0x67	; 103
    2356:	9b e0       	ldi	r25, 0x0B	; 11
    2358:	0e 94 d7 30 	call	0x61ae	; 0x61ae <_ZN3LCD9setCursorEhh>
        lcd.print((char)1);  // STAMPA LA CLESSIDRA
    235c:	61 e0       	ldi	r22, 0x01	; 1
    235e:	87 e6       	ldi	r24, 0x67	; 103
    2360:	9b e0       	ldi	r25, 0x0B	; 11
    2362:	0e 94 62 39 	call	0x72c4	; 0x72c4 <_ZN5Print5printEc>
        lcd.print("Tempo: " + String((UltimoPassaggioStato + Timer - secs - 1)) + " sec ");
    2366:	40 91 ab 0a 	lds	r20, 0x0AAB	; 0x800aab <UltimoPassaggioStato>
    236a:	50 91 ac 0a 	lds	r21, 0x0AAC	; 0x800aac <UltimoPassaggioStato+0x1>
    236e:	60 91 ad 0a 	lds	r22, 0x0AAD	; 0x800aad <UltimoPassaggioStato+0x2>
    2372:	70 91 ae 0a 	lds	r23, 0x0AAE	; 0x800aae <UltimoPassaggioStato+0x3>
    2376:	80 91 a7 0a 	lds	r24, 0x0AA7	; 0x800aa7 <Timer>
    237a:	90 91 a8 0a 	lds	r25, 0x0AA8	; 0x800aa8 <Timer+0x1>
    237e:	a0 91 a9 0a 	lds	r26, 0x0AA9	; 0x800aa9 <Timer+0x2>
    2382:	b0 91 aa 0a 	lds	r27, 0x0AAA	; 0x800aaa <Timer+0x3>
    2386:	48 0f       	add	r20, r24
    2388:	59 1f       	adc	r21, r25
    238a:	6a 1f       	adc	r22, r26
    238c:	7b 1f       	adc	r23, r27
    238e:	41 50       	subi	r20, 0x01	; 1
    2390:	51 09       	sbc	r21, r1
    2392:	61 09       	sbc	r22, r1
    2394:	71 09       	sbc	r23, r1
    2396:	80 91 af 0a 	lds	r24, 0x0AAF	; 0x800aaf <secs>
    239a:	90 91 b0 0a 	lds	r25, 0x0AB0	; 0x800ab0 <secs+0x1>
    239e:	a0 91 b1 0a 	lds	r26, 0x0AB1	; 0x800ab1 <secs+0x2>
    23a2:	b0 91 b2 0a 	lds	r27, 0x0AB2	; 0x800ab2 <secs+0x3>
    23a6:	48 1b       	sub	r20, r24
    23a8:	59 0b       	sbc	r21, r25
    23aa:	6a 0b       	sbc	r22, r26
    23ac:	7b 0b       	sbc	r23, r27
    23ae:	2a e0       	ldi	r18, 0x0A	; 10
    23b0:	ce 01       	movw	r24, r28
    23b2:	0f 96       	adiw	r24, 0x0f	; 15
    23b4:	0e 94 51 3d 	call	0x7aa2	; 0x7aa2 <_ZN6StringC1Emh>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    23b8:	6e e2       	ldi	r22, 0x2E	; 46
    23ba:	77 e0       	ldi	r23, 0x07	; 7
    23bc:	ce 01       	movw	r24, r28
    23be:	01 96       	adiw	r24, 0x01	; 1
    23c0:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
    23c4:	be 01       	movw	r22, r28
    23c6:	61 5f       	subi	r22, 0xF1	; 241
    23c8:	7f 4f       	sbci	r23, 0xFF	; 255
    23ca:	ce 01       	movw	r24, r28
    23cc:	01 96       	adiw	r24, 0x01	; 1
    23ce:	0e 94 fc 3d 	call	0x7bf8	; 0x7bf8 <_ZplRK15StringSumHelperRK6String>
    23d2:	6c e0       	ldi	r22, 0x0C	; 12
    23d4:	77 e0       	ldi	r23, 0x07	; 7
    23d6:	0e 94 0d 3e 	call	0x7c1a	; 0x7c1a <_ZplRK15StringSumHelperPKc>
    23da:	bc 01       	movw	r22, r24
    23dc:	87 e6       	ldi	r24, 0x67	; 103
    23de:	9b e0       	ldi	r25, 0x0B	; 11
    23e0:	0e 94 53 39 	call	0x72a6	; 0x72a6 <_ZN5Print5printERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    23e4:	ce 01       	movw	r24, r28
    23e6:	01 96       	adiw	r24, 0x01	; 1
    23e8:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
    23ec:	ce 01       	movw	r24, r28
    23ee:	0f 96       	adiw	r24, 0x0f	; 15
    23f0:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>

        if (TARGA.length() == 5)
    23f4:	80 91 9f 0a 	lds	r24, 0x0A9F	; 0x800a9f <TARGA+0x4>
    23f8:	90 91 a0 0a 	lds	r25, 0x0AA0	; 0x800aa0 <TARGA+0x5>
    23fc:	05 97       	sbiw	r24, 0x05	; 5
    23fe:	e9 f4       	brne	.+58     	; 0x243a <loop+0x5f0>
        {
          mezzo.Carb = "X";
    2400:	67 e1       	ldi	r22, 0x17	; 23
    2402:	75 e0       	ldi	r23, 0x05	; 5
    2404:	89 e8       	ldi	r24, 0x89	; 137
    2406:	9b e0       	ldi	r25, 0x0B	; 11
    2408:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringaSEPKc>
          mezzo.TARGA = TARGA;
    240c:	6b e9       	ldi	r22, 0x9B	; 155
    240e:	7a e0       	ldi	r23, 0x0A	; 10
    2410:	8f e8       	ldi	r24, 0x8F	; 143
    2412:	9b e0       	ldi	r25, 0x0B	; 11
    2414:	0e 94 7e 3c 	call	0x78fc	; 0x78fc <_ZN6StringaSERKS_>
          mezzo.KM = "0";
    2418:	61 eb       	ldi	r22, 0xB1	; 177
    241a:	78 e0       	ldi	r23, 0x08	; 8
    241c:	85 e9       	ldi	r24, 0x95	; 149
    241e:	9b e0       	ldi	r25, 0x0B	; 11
    2420:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringaSEPKc>
          distr_selezionato = 0;
    2424:	10 92 3f 0b 	sts	0x0B3F, r1	; 0x800b3f <distr_selezionato>
          avanzaStato(TselDistributore);
    2428:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <TselDistributore>
    242c:	70 91 23 01 	lds	r23, 0x0123	; 0x800123 <TselDistributore+0x1>
    2430:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <TselDistributore+0x2>
    2434:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <TselDistributore+0x3>
    2438:	29 c7       	rjmp	.+3666   	; 0x328c <loop+0x1442>
        }
        else {
          String mezzoString = leggiTAG_Mezzo(false); // con TRUE scrive sul blocco 4 della card NFC DEL MEZZO
    243a:	60 e0       	ldi	r22, 0x00	; 0
    243c:	ce 01       	movw	r24, r28
    243e:	0f 96       	adiw	r24, 0x0f	; 15
    2440:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <_Z14leggiTAG_Mezzob>
    2444:	8f e3       	ldi	r24, 0x3F	; 63
    2446:	9c e9       	ldi	r25, 0x9C	; 156
    2448:	01 97       	sbiw	r24, 0x01	; 1
    244a:	f1 f7       	brne	.-4      	; 0x2448 <loop+0x5fe>
    244c:	00 c0       	rjmp	.+0      	; 0x244e <loop+0x604>
    244e:	00 00       	nop
          _delay_ms(10);

          Serial.println(mezzoString);
    2450:	be 01       	movw	r22, r28
    2452:	61 5f       	subi	r22, 0xF1	; 241
    2454:	7f 4f       	sbci	r23, 0xFF	; 255
    2456:	8e e2       	ldi	r24, 0x2E	; 46
    2458:	9d e0       	ldi	r25, 0x0D	; 13
    245a:	0e 94 7c 39 	call	0x72f8	; 0x72f8 <_ZN5Print7printlnERK6String>
	int indexOf( const String &str, unsigned int fromIndex ) const;
	int lastIndexOf( char ch ) const;
	int lastIndexOf( char ch, unsigned int fromIndex ) const;
	int lastIndexOf( const String &str ) const;
	int lastIndexOf( const String &str, unsigned int fromIndex ) const;
	String substring( unsigned int beginIndex ) const { return substring(beginIndex, len); };
    245e:	2b 89       	ldd	r18, Y+19	; 0x13
    2460:	3c 89       	ldd	r19, Y+20	; 0x14
    2462:	45 e0       	ldi	r20, 0x05	; 5
    2464:	50 e0       	ldi	r21, 0x00	; 0
    2466:	be 01       	movw	r22, r28
    2468:	61 5f       	subi	r22, 0xF1	; 241
    246a:	7f 4f       	sbci	r23, 0xFF	; 255
    246c:	ce 01       	movw	r24, r28
    246e:	01 96       	adiw	r24, 0x01	; 1
    2470:	0e 94 7c 3e 	call	0x7cf8	; 0x7cf8 <_ZNK6String9substringEjj>

          mezzo.Carb = mezzoString.substring(5);
    2474:	be 01       	movw	r22, r28
    2476:	6f 5f       	subi	r22, 0xFF	; 255
    2478:	7f 4f       	sbci	r23, 0xFF	; 255
    247a:	89 e8       	ldi	r24, 0x89	; 137
    247c:	9b e0       	ldi	r25, 0x0B	; 11
    247e:	0e 94 9b 3c 	call	0x7936	; 0x7936 <_ZN6StringaSEOS_>
    2482:	ce 01       	movw	r24, r28
    2484:	01 96       	adiw	r24, 0x01	; 1
    2486:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
          mezzo.TARGA = mezzoString.substring(0, 5);
    248a:	25 e0       	ldi	r18, 0x05	; 5
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	40 e0       	ldi	r20, 0x00	; 0
    2490:	50 e0       	ldi	r21, 0x00	; 0
    2492:	be 01       	movw	r22, r28
    2494:	61 5f       	subi	r22, 0xF1	; 241
    2496:	7f 4f       	sbci	r23, 0xFF	; 255
    2498:	ce 01       	movw	r24, r28
    249a:	01 96       	adiw	r24, 0x01	; 1
    249c:	0e 94 7c 3e 	call	0x7cf8	; 0x7cf8 <_ZNK6String9substringEjj>
    24a0:	be 01       	movw	r22, r28
    24a2:	6f 5f       	subi	r22, 0xFF	; 255
    24a4:	7f 4f       	sbci	r23, 0xFF	; 255
    24a6:	8f e8       	ldi	r24, 0x8F	; 143
    24a8:	9b e0       	ldi	r25, 0x0B	; 11
    24aa:	0e 94 9b 3c 	call	0x7936	; 0x7936 <_ZN6StringaSEOS_>
    24ae:	ce 01       	movw	r24, r28
    24b0:	01 96       	adiw	r24, 0x01	; 1
    24b2:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
          mezzo.KM = "0";
    24b6:	61 eb       	ldi	r22, 0xB1	; 177
    24b8:	78 e0       	ldi	r23, 0x08	; 8
    24ba:	85 e9       	ldi	r24, 0x95	; 149
    24bc:	9b e0       	ldi	r25, 0x0B	; 11
    24be:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringaSEPKc>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    24c2:	62 e1       	ldi	r22, 0x12	; 18
    24c4:	77 e0       	ldi	r23, 0x07	; 7
    24c6:	ce 01       	movw	r24, r28
    24c8:	01 96       	adiw	r24, 0x01	; 1
    24ca:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>

          Serial.println("TIPO CARBURANTE: " + mezzo.Carb);
    24ce:	69 e8       	ldi	r22, 0x89	; 137
    24d0:	7b e0       	ldi	r23, 0x0B	; 11
    24d2:	ce 01       	movw	r24, r28
    24d4:	01 96       	adiw	r24, 0x01	; 1
    24d6:	0e 94 fc 3d 	call	0x7bf8	; 0x7bf8 <_ZplRK15StringSumHelperRK6String>
    24da:	bc 01       	movw	r22, r24
    24dc:	8e e2       	ldi	r24, 0x2E	; 46
    24de:	9d e0       	ldi	r25, 0x0D	; 13
    24e0:	0e 94 7c 39 	call	0x72f8	; 0x72f8 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    24e4:	ce 01       	movw	r24, r28
    24e6:	01 96       	adiw	r24, 0x01	; 1
    24e8:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    24ec:	64 e2       	ldi	r22, 0x24	; 36
    24ee:	77 e0       	ldi	r23, 0x07	; 7
    24f0:	ce 01       	movw	r24, r28
    24f2:	01 96       	adiw	r24, 0x01	; 1
    24f4:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
          Serial.println("TARGA: " + mezzo.TARGA);
    24f8:	6f e8       	ldi	r22, 0x8F	; 143
    24fa:	7b e0       	ldi	r23, 0x0B	; 11
    24fc:	ce 01       	movw	r24, r28
    24fe:	01 96       	adiw	r24, 0x01	; 1
    2500:	0e 94 fc 3d 	call	0x7bf8	; 0x7bf8 <_ZplRK15StringSumHelperRK6String>
    2504:	bc 01       	movw	r22, r24
    2506:	8e e2       	ldi	r24, 0x2E	; 46
    2508:	9d e0       	ldi	r25, 0x0D	; 13
    250a:	0e 94 7c 39 	call	0x72f8	; 0x72f8 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    250e:	ce 01       	movw	r24, r28
    2510:	01 96       	adiw	r24, 0x01	; 1
    2512:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    2516:	61 ec       	ldi	r22, 0xC1	; 193
    2518:	75 e0       	ldi	r23, 0x05	; 5
    251a:	89 e8       	ldi	r24, 0x89	; 137
    251c:	9b e0       	ldi	r25, 0x0B	; 11
    251e:	0e 94 30 3e 	call	0x7c60	; 0x7c60 <_ZNK6String6equalsEPKc>

          if ((mezzo.Carb == "B") || (mezzo.Carb == "D")) {
    2522:	81 11       	cpse	r24, r1
    2524:	2e c5       	rjmp	.+2652   	; 0x2f82 <loop+0x1138>
    2526:	6f eb       	ldi	r22, 0xBF	; 191
    2528:	75 e0       	ldi	r23, 0x05	; 5
    252a:	89 e8       	ldi	r24, 0x89	; 137
    252c:	9b e0       	ldi	r25, 0x0B	; 11
    252e:	0e 94 30 3e 	call	0x7c60	; 0x7c60 <_ZNK6String6equalsEPKc>
    2532:	81 11       	cpse	r24, r1
    2534:	26 c5       	rjmp	.+2636   	; 0x2f82 <loop+0x1138>
          mezzo.KM = "0";
          distr_selezionato = 0;
          avanzaStato(TselDistributore);
        }
        else {
          String mezzoString = leggiTAG_Mezzo(false); // con TRUE scrive sul blocco 4 della card NFC DEL MEZZO
    2536:	ce 01       	movw	r24, r28
    2538:	0f 96       	adiw	r24, 0x0f	; 15
    253a:	90 c4       	rjmp	.+2336   	; 0x2e5c <loop+0x1012>
        }
      }
      break;
    case 4:
      {
        lcd.setCursor(0, 0);
    253c:	40 e0       	ldi	r20, 0x00	; 0
    253e:	60 e0       	ldi	r22, 0x00	; 0
    2540:	87 e6       	ldi	r24, 0x67	; 103
    2542:	9b e0       	ldi	r25, 0x0B	; 11
    2544:	0e 94 d7 30 	call	0x61ae	; 0x61ae <_ZN3LCD9setCursorEhh>
        lcd.print((char)1);  // STAMPA LA CLESSIDRA
    2548:	61 e0       	ldi	r22, 0x01	; 1
    254a:	87 e6       	ldi	r24, 0x67	; 103
    254c:	9b e0       	ldi	r25, 0x0B	; 11
    254e:	0e 94 62 39 	call	0x72c4	; 0x72c4 <_ZN5Print5printEc>
        lcd.print("Tempo: " + String((UltimoPassaggioStato + Timer - secs - 1)) + " sec ");
    2552:	40 91 ab 0a 	lds	r20, 0x0AAB	; 0x800aab <UltimoPassaggioStato>
    2556:	50 91 ac 0a 	lds	r21, 0x0AAC	; 0x800aac <UltimoPassaggioStato+0x1>
    255a:	60 91 ad 0a 	lds	r22, 0x0AAD	; 0x800aad <UltimoPassaggioStato+0x2>
    255e:	70 91 ae 0a 	lds	r23, 0x0AAE	; 0x800aae <UltimoPassaggioStato+0x3>
    2562:	80 91 a7 0a 	lds	r24, 0x0AA7	; 0x800aa7 <Timer>
    2566:	90 91 a8 0a 	lds	r25, 0x0AA8	; 0x800aa8 <Timer+0x1>
    256a:	a0 91 a9 0a 	lds	r26, 0x0AA9	; 0x800aa9 <Timer+0x2>
    256e:	b0 91 aa 0a 	lds	r27, 0x0AAA	; 0x800aaa <Timer+0x3>
    2572:	48 0f       	add	r20, r24
    2574:	59 1f       	adc	r21, r25
    2576:	6a 1f       	adc	r22, r26
    2578:	7b 1f       	adc	r23, r27
    257a:	41 50       	subi	r20, 0x01	; 1
    257c:	51 09       	sbc	r21, r1
    257e:	61 09       	sbc	r22, r1
    2580:	71 09       	sbc	r23, r1
    2582:	80 91 af 0a 	lds	r24, 0x0AAF	; 0x800aaf <secs>
    2586:	90 91 b0 0a 	lds	r25, 0x0AB0	; 0x800ab0 <secs+0x1>
    258a:	a0 91 b1 0a 	lds	r26, 0x0AB1	; 0x800ab1 <secs+0x2>
    258e:	b0 91 b2 0a 	lds	r27, 0x0AB2	; 0x800ab2 <secs+0x3>
    2592:	48 1b       	sub	r20, r24
    2594:	59 0b       	sbc	r21, r25
    2596:	6a 0b       	sbc	r22, r26
    2598:	7b 0b       	sbc	r23, r27
    259a:	2a e0       	ldi	r18, 0x0A	; 10
    259c:	ce 01       	movw	r24, r28
    259e:	0f 96       	adiw	r24, 0x0f	; 15
    25a0:	0e 94 51 3d 	call	0x7aa2	; 0x7aa2 <_ZN6StringC1Emh>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    25a4:	6e e2       	ldi	r22, 0x2E	; 46
    25a6:	77 e0       	ldi	r23, 0x07	; 7
    25a8:	ce 01       	movw	r24, r28
    25aa:	01 96       	adiw	r24, 0x01	; 1
    25ac:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
    25b0:	be 01       	movw	r22, r28
    25b2:	61 5f       	subi	r22, 0xF1	; 241
    25b4:	7f 4f       	sbci	r23, 0xFF	; 255
    25b6:	ce 01       	movw	r24, r28
    25b8:	01 96       	adiw	r24, 0x01	; 1
    25ba:	0e 94 fc 3d 	call	0x7bf8	; 0x7bf8 <_ZplRK15StringSumHelperRK6String>
    25be:	6c e0       	ldi	r22, 0x0C	; 12
    25c0:	77 e0       	ldi	r23, 0x07	; 7
    25c2:	0e 94 0d 3e 	call	0x7c1a	; 0x7c1a <_ZplRK15StringSumHelperPKc>
    25c6:	bc 01       	movw	r22, r24
    25c8:	87 e6       	ldi	r24, 0x67	; 103
    25ca:	9b e0       	ldi	r25, 0x0B	; 11
    25cc:	0e 94 53 39 	call	0x72a6	; 0x72a6 <_ZN5Print5printERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    25d0:	ce 01       	movw	r24, r28
    25d2:	01 96       	adiw	r24, 0x01	; 1
    25d4:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
    25d8:	ce 01       	movw	r24, r28
    25da:	0f 96       	adiw	r24, 0x0f	; 15
    25dc:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    25e0:	61 ec       	ldi	r22, 0xC1	; 193
    25e2:	75 e0       	ldi	r23, 0x05	; 5
    25e4:	89 e8       	ldi	r24, 0x89	; 137
    25e6:	9b e0       	ldi	r25, 0x0B	; 11
    25e8:	0e 94 30 3e 	call	0x7c60	; 0x7c60 <_ZNK6String6equalsEPKc>

        // Verifica scelta distributore

        if ((mezzo.Carb == "B") || (distr_selezionato == 2))
    25ec:	81 11       	cpse	r24, r1
    25ee:	00 c5       	rjmp	.+2560   	; 0x2ff0 <loop+0x11a6>
    25f0:	80 91 3f 0b 	lds	r24, 0x0B3F	; 0x800b3f <distr_selezionato>
    25f4:	82 30       	cpi	r24, 0x02	; 2
    25f6:	09 f0       	breq	.+2      	; 0x25fa <loop+0x7b0>
    25f8:	27 c5       	rjmp	.+2638   	; 0x3048 <loop+0x11fe>
    25fa:	fa c4       	rjmp	.+2548   	; 0x2ff0 <loop+0x11a6>
        }
      }
      break;
    case 5:
      {
        lcd.setCursor(0, 0);
    25fc:	40 e0       	ldi	r20, 0x00	; 0
    25fe:	60 e0       	ldi	r22, 0x00	; 0
    2600:	87 e6       	ldi	r24, 0x67	; 103
    2602:	9b e0       	ldi	r25, 0x0B	; 11
    2604:	0e 94 d7 30 	call	0x61ae	; 0x61ae <_ZN3LCD9setCursorEhh>
        lcd.print((char)1);  // STAMPA LA CLESSIDRA
    2608:	61 e0       	ldi	r22, 0x01	; 1
    260a:	87 e6       	ldi	r24, 0x67	; 103
    260c:	9b e0       	ldi	r25, 0x0B	; 11
    260e:	0e 94 62 39 	call	0x72c4	; 0x72c4 <_ZN5Print5printEc>
        lcd.print("Tempo: " + String((UltimoPassaggioStato + Timer - secs - 1)) + " sec ");
    2612:	40 91 ab 0a 	lds	r20, 0x0AAB	; 0x800aab <UltimoPassaggioStato>
    2616:	50 91 ac 0a 	lds	r21, 0x0AAC	; 0x800aac <UltimoPassaggioStato+0x1>
    261a:	60 91 ad 0a 	lds	r22, 0x0AAD	; 0x800aad <UltimoPassaggioStato+0x2>
    261e:	70 91 ae 0a 	lds	r23, 0x0AAE	; 0x800aae <UltimoPassaggioStato+0x3>
    2622:	80 91 a7 0a 	lds	r24, 0x0AA7	; 0x800aa7 <Timer>
    2626:	90 91 a8 0a 	lds	r25, 0x0AA8	; 0x800aa8 <Timer+0x1>
    262a:	a0 91 a9 0a 	lds	r26, 0x0AA9	; 0x800aa9 <Timer+0x2>
    262e:	b0 91 aa 0a 	lds	r27, 0x0AAA	; 0x800aaa <Timer+0x3>
    2632:	48 0f       	add	r20, r24
    2634:	59 1f       	adc	r21, r25
    2636:	6a 1f       	adc	r22, r26
    2638:	7b 1f       	adc	r23, r27
    263a:	41 50       	subi	r20, 0x01	; 1
    263c:	51 09       	sbc	r21, r1
    263e:	61 09       	sbc	r22, r1
    2640:	71 09       	sbc	r23, r1
    2642:	80 91 af 0a 	lds	r24, 0x0AAF	; 0x800aaf <secs>
    2646:	90 91 b0 0a 	lds	r25, 0x0AB0	; 0x800ab0 <secs+0x1>
    264a:	a0 91 b1 0a 	lds	r26, 0x0AB1	; 0x800ab1 <secs+0x2>
    264e:	b0 91 b2 0a 	lds	r27, 0x0AB2	; 0x800ab2 <secs+0x3>
    2652:	48 1b       	sub	r20, r24
    2654:	59 0b       	sbc	r21, r25
    2656:	6a 0b       	sbc	r22, r26
    2658:	7b 0b       	sbc	r23, r27
    265a:	2a e0       	ldi	r18, 0x0A	; 10
    265c:	ce 01       	movw	r24, r28
    265e:	0f 96       	adiw	r24, 0x0f	; 15
    2660:	0e 94 51 3d 	call	0x7aa2	; 0x7aa2 <_ZN6StringC1Emh>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2664:	6e e2       	ldi	r22, 0x2E	; 46
    2666:	77 e0       	ldi	r23, 0x07	; 7
    2668:	ce 01       	movw	r24, r28
    266a:	01 96       	adiw	r24, 0x01	; 1
    266c:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
    2670:	be 01       	movw	r22, r28
    2672:	61 5f       	subi	r22, 0xF1	; 241
    2674:	7f 4f       	sbci	r23, 0xFF	; 255
    2676:	ce 01       	movw	r24, r28
    2678:	01 96       	adiw	r24, 0x01	; 1
    267a:	0e 94 fc 3d 	call	0x7bf8	; 0x7bf8 <_ZplRK15StringSumHelperRK6String>
    267e:	6c e0       	ldi	r22, 0x0C	; 12
    2680:	77 e0       	ldi	r23, 0x07	; 7
    2682:	0e 94 0d 3e 	call	0x7c1a	; 0x7c1a <_ZplRK15StringSumHelperPKc>
    2686:	bc 01       	movw	r22, r24
    2688:	87 e6       	ldi	r24, 0x67	; 103
    268a:	9b e0       	ldi	r25, 0x0B	; 11
    268c:	0e 94 53 39 	call	0x72a6	; 0x72a6 <_ZN5Print5printERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2690:	ce 01       	movw	r24, r28
    2692:	01 96       	adiw	r24, 0x01	; 1
    2694:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
    2698:	ce 01       	movw	r24, r28
    269a:	0f 96       	adiw	r24, 0x0f	; 15
    269c:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
        // RaccoltaDati[4] = "1234";        
        /*****************************************************************/
        gpio.setCONFREG(0x3C);
    26a0:	6c e3       	ldi	r22, 0x3C	; 60
    26a2:	82 e9       	ldi	r24, 0x92	; 146
    26a4:	9a e0       	ldi	r25, 0x0A	; 10
    26a6:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <_ZN7PCA953410setCONFREGEh>
        uint8_t c = gpio.Read_IP_REGISTER();
    26aa:	82 e9       	ldi	r24, 0x92	; 146
    26ac:	9a e0       	ldi	r25, 0x0A	; 10
    26ae:	0e 94 71 1e 	call	0x3ce2	; 0x3ce2 <_ZN7PCA953416Read_IP_REGISTEREv>
    26b2:	e8 2e       	mov	r14, r24
    26b4:	42 e0       	ldi	r20, 0x02	; 2
    26b6:	be 01       	movw	r22, r28
    26b8:	69 5e       	subi	r22, 0xE9	; 233
    26ba:	7f 4f       	sbci	r23, 0xFF	; 255
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	0e 94 fb 42 	call	0x85f6	; 0x85f6 <__itoa_ncheck>
        char buf[8];
        itoa(c, buf, 2);
        gpio.setCONFREG(0xC3);
    26c2:	63 ec       	ldi	r22, 0xC3	; 195
    26c4:	82 e9       	ldi	r24, 0x92	; 146
    26c6:	9a e0       	ldi	r25, 0x0A	; 10
    26c8:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <_ZN7PCA953410setCONFREGEh>
        uint8_t r = gpio.Read_IP_REGISTER();
    26cc:	82 e9       	ldi	r24, 0x92	; 146
    26ce:	9a e0       	ldi	r25, 0x0A	; 10
    26d0:	0e 94 71 1e 	call	0x3ce2	; 0x3ce2 <_ZN7PCA953416Read_IP_REGISTEREv>
    26d4:	f8 2e       	mov	r15, r24
    26d6:	42 e0       	ldi	r20, 0x02	; 2
    26d8:	be 01       	movw	r22, r28
    26da:	61 5f       	subi	r22, 0xF1	; 241
    26dc:	7f 4f       	sbci	r23, 0xFF	; 255
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	0e 94 fb 42 	call	0x85f6	; 0x85f6 <__itoa_ncheck>
        char bufr[8];
        itoa(r, bufr, 2);
        char ris[8];
        uint8_t z = (r ^ c);
        itoa(z, ris, 2);
    26e4:	fe 24       	eor	r15, r14
    26e6:	ef 2c       	mov	r14, r15
    26e8:	f1 2c       	mov	r15, r1
    26ea:	42 e0       	ldi	r20, 0x02	; 2
    26ec:	be 01       	movw	r22, r28
    26ee:	6f 5f       	subi	r22, 0xFF	; 255
    26f0:	7f 4f       	sbci	r23, 0xFF	; 255
    26f2:	c7 01       	movw	r24, r14
    26f4:	0e 94 fb 42 	call	0x85f6	; 0x85f6 <__itoa_ncheck>
        char K = getCharKeypad(int(z));
    26f8:	c7 01       	movw	r24, r14
    26fa:	0e 94 9b 02 	call	0x536	; 0x536 <_Z13getCharKeypadi>
    26fe:	9f ef       	ldi	r25, 0xFF	; 255
    2700:	29 ef       	ldi	r18, 0xF9	; 249
    2702:	30 e0       	ldi	r19, 0x00	; 0
    2704:	91 50       	subi	r25, 0x01	; 1
    2706:	20 40       	sbci	r18, 0x00	; 0
    2708:	30 40       	sbci	r19, 0x00	; 0
    270a:	e1 f7       	brne	.-8      	; 0x2704 <loop+0x8ba>
    270c:	00 c0       	rjmp	.+0      	; 0x270e <loop+0x8c4>
        _delay_ms(20);
        /*****************************************************************/

        inputKM(K);
    270e:	00 00       	nop
    2710:	87 d8       	rcall	.-3826   	; 0x1820 <_Z7inputKMc>
        impulsi = 0;
    2712:	10 92 41 0b 	sts	0x0B41, r1	; 0x800b41 <impulsi+0x1>
    2716:	10 92 40 0b 	sts	0x0B40, r1	; 0x800b40 <impulsi>
      }
      break;
    271a:	a2 c3       	rjmp	.+1860   	; 0x2e60 <loop+0x1016>
	case 6: 
	{ 
		lcd.setCursor(0, 0);
    271c:	40 e0       	ldi	r20, 0x00	; 0
    271e:	60 e0       	ldi	r22, 0x00	; 0
    2720:	87 e6       	ldi	r24, 0x67	; 103
    2722:	9b e0       	ldi	r25, 0x0B	; 11
    2724:	0e 94 d7 30 	call	0x61ae	; 0x61ae <_ZN3LCD9setCursorEhh>
		lcd.print((char)1);  // STAMPA LA CLESSIDRA
    2728:	61 e0       	ldi	r22, 0x01	; 1
    272a:	87 e6       	ldi	r24, 0x67	; 103
    272c:	9b e0       	ldi	r25, 0x0B	; 11
    272e:	0e 94 62 39 	call	0x72c4	; 0x72c4 <_ZN5Print5printEc>
		lcd.print("Tempo: " + String((UltimoPassaggioStato + Timer - secs - 1)) + " sec ");
    2732:	40 91 ab 0a 	lds	r20, 0x0AAB	; 0x800aab <UltimoPassaggioStato>
    2736:	50 91 ac 0a 	lds	r21, 0x0AAC	; 0x800aac <UltimoPassaggioStato+0x1>
    273a:	60 91 ad 0a 	lds	r22, 0x0AAD	; 0x800aad <UltimoPassaggioStato+0x2>
    273e:	70 91 ae 0a 	lds	r23, 0x0AAE	; 0x800aae <UltimoPassaggioStato+0x3>
    2742:	80 91 a7 0a 	lds	r24, 0x0AA7	; 0x800aa7 <Timer>
    2746:	90 91 a8 0a 	lds	r25, 0x0AA8	; 0x800aa8 <Timer+0x1>
    274a:	a0 91 a9 0a 	lds	r26, 0x0AA9	; 0x800aa9 <Timer+0x2>
    274e:	b0 91 aa 0a 	lds	r27, 0x0AAA	; 0x800aaa <Timer+0x3>
    2752:	48 0f       	add	r20, r24
    2754:	59 1f       	adc	r21, r25
    2756:	6a 1f       	adc	r22, r26
    2758:	7b 1f       	adc	r23, r27
    275a:	41 50       	subi	r20, 0x01	; 1
    275c:	51 09       	sbc	r21, r1
    275e:	61 09       	sbc	r22, r1
    2760:	71 09       	sbc	r23, r1
    2762:	80 91 af 0a 	lds	r24, 0x0AAF	; 0x800aaf <secs>
    2766:	90 91 b0 0a 	lds	r25, 0x0AB0	; 0x800ab0 <secs+0x1>
    276a:	a0 91 b1 0a 	lds	r26, 0x0AB1	; 0x800ab1 <secs+0x2>
    276e:	b0 91 b2 0a 	lds	r27, 0x0AB2	; 0x800ab2 <secs+0x3>
    2772:	48 1b       	sub	r20, r24
    2774:	59 0b       	sbc	r21, r25
    2776:	6a 0b       	sbc	r22, r26
    2778:	7b 0b       	sbc	r23, r27
    277a:	2a e0       	ldi	r18, 0x0A	; 10
    277c:	ce 01       	movw	r24, r28
    277e:	0f 96       	adiw	r24, 0x0f	; 15
    2780:	0e 94 51 3d 	call	0x7aa2	; 0x7aa2 <_ZN6StringC1Emh>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2784:	6e e2       	ldi	r22, 0x2E	; 46
    2786:	77 e0       	ldi	r23, 0x07	; 7
    2788:	ce 01       	movw	r24, r28
    278a:	01 96       	adiw	r24, 0x01	; 1
    278c:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
    2790:	be 01       	movw	r22, r28
    2792:	61 5f       	subi	r22, 0xF1	; 241
    2794:	7f 4f       	sbci	r23, 0xFF	; 255
    2796:	ce 01       	movw	r24, r28
    2798:	01 96       	adiw	r24, 0x01	; 1
    279a:	0e 94 fc 3d 	call	0x7bf8	; 0x7bf8 <_ZplRK15StringSumHelperRK6String>
    279e:	6c e0       	ldi	r22, 0x0C	; 12
    27a0:	77 e0       	ldi	r23, 0x07	; 7
    27a2:	0e 94 0d 3e 	call	0x7c1a	; 0x7c1a <_ZplRK15StringSumHelperPKc>
    27a6:	bc 01       	movw	r22, r24
    27a8:	87 e6       	ldi	r24, 0x67	; 103
    27aa:	9b e0       	ldi	r25, 0x0B	; 11
    27ac:	0e 94 53 39 	call	0x72a6	; 0x72a6 <_ZN5Print5printERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    27b0:	ce 01       	movw	r24, r28
    27b2:	01 96       	adiw	r24, 0x01	; 1
    27b4:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
    27b8:	ce 01       	movw	r24, r28
    27ba:	0f 96       	adiw	r24, 0x0f	; 15
    27bc:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
		 
		if (testbit(PINA,1) && (mezzo.Carb == "D"))
    27c0:	01 9b       	sbis	0x00, 1	; 0
    27c2:	08 c0       	rjmp	.+16     	; 0x27d4 <loop+0x98a>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    27c4:	6f eb       	ldi	r22, 0xBF	; 191
    27c6:	75 e0       	ldi	r23, 0x05	; 5
    27c8:	89 e8       	ldi	r24, 0x89	; 137
    27ca:	9b e0       	ldi	r25, 0x0B	; 11
    27cc:	0e 94 30 3e 	call	0x7c60	; 0x7c60 <_ZNK6String6equalsEPKc>
    27d0:	81 11       	cpse	r24, r1
    27d2:	7d c4       	rjmp	.+2298   	; 0x30ce <loop+0x1284>
			avanzaStato(TmaxErogazione); 
		}
		
		// CONTATTO PISTOLA BENZINA

		if  (testbit(PINB,1) && (mezzo.Carb == "B"))
    27d4:	19 9b       	sbis	0x03, 1	; 3
    27d6:	44 c3       	rjmp	.+1672   	; 0x2e60 <loop+0x1016>
    27d8:	61 ec       	ldi	r22, 0xC1	; 193
    27da:	75 e0       	ldi	r23, 0x05	; 5
    27dc:	89 e8       	ldi	r24, 0x89	; 137
    27de:	9b e0       	ldi	r25, 0x0B	; 11
    27e0:	0e 94 30 3e 	call	0x7c60	; 0x7c60 <_ZNK6String6equalsEPKc>
    27e4:	81 11       	cpse	r24, r1
    27e6:	b6 c4       	rjmp	.+2412   	; 0x3154 <loop+0x130a>
    27e8:	3b c3       	rjmp	.+1654   	; 0x2e60 <loop+0x1016>
		 
	}
	break;
    case 7:
      {
        lcd.setCursor(0, 0);
    27ea:	40 e0       	ldi	r20, 0x00	; 0
    27ec:	60 e0       	ldi	r22, 0x00	; 0
    27ee:	87 e6       	ldi	r24, 0x67	; 103
    27f0:	9b e0       	ldi	r25, 0x0B	; 11
    27f2:	0e 94 d7 30 	call	0x61ae	; 0x61ae <_ZN3LCD9setCursorEhh>
        lcd.print((char)1);  // STAMPA LA CLESSIDRA
    27f6:	61 e0       	ldi	r22, 0x01	; 1
    27f8:	87 e6       	ldi	r24, 0x67	; 103
    27fa:	9b e0       	ldi	r25, 0x0B	; 11
    27fc:	0e 94 62 39 	call	0x72c4	; 0x72c4 <_ZN5Print5printEc>
        lcd.print("  Tempo: " + String((UltimoPassaggioStato + Timer - secs - 1)) + " sec ");
    2800:	40 91 ab 0a 	lds	r20, 0x0AAB	; 0x800aab <UltimoPassaggioStato>
    2804:	50 91 ac 0a 	lds	r21, 0x0AAC	; 0x800aac <UltimoPassaggioStato+0x1>
    2808:	60 91 ad 0a 	lds	r22, 0x0AAD	; 0x800aad <UltimoPassaggioStato+0x2>
    280c:	70 91 ae 0a 	lds	r23, 0x0AAE	; 0x800aae <UltimoPassaggioStato+0x3>
    2810:	80 91 a7 0a 	lds	r24, 0x0AA7	; 0x800aa7 <Timer>
    2814:	90 91 a8 0a 	lds	r25, 0x0AA8	; 0x800aa8 <Timer+0x1>
    2818:	a0 91 a9 0a 	lds	r26, 0x0AA9	; 0x800aa9 <Timer+0x2>
    281c:	b0 91 aa 0a 	lds	r27, 0x0AAA	; 0x800aaa <Timer+0x3>
    2820:	48 0f       	add	r20, r24
    2822:	59 1f       	adc	r21, r25
    2824:	6a 1f       	adc	r22, r26
    2826:	7b 1f       	adc	r23, r27
    2828:	41 50       	subi	r20, 0x01	; 1
    282a:	51 09       	sbc	r21, r1
    282c:	61 09       	sbc	r22, r1
    282e:	71 09       	sbc	r23, r1
    2830:	80 91 af 0a 	lds	r24, 0x0AAF	; 0x800aaf <secs>
    2834:	90 91 b0 0a 	lds	r25, 0x0AB0	; 0x800ab0 <secs+0x1>
    2838:	a0 91 b1 0a 	lds	r26, 0x0AB1	; 0x800ab1 <secs+0x2>
    283c:	b0 91 b2 0a 	lds	r27, 0x0AB2	; 0x800ab2 <secs+0x3>
    2840:	48 1b       	sub	r20, r24
    2842:	59 0b       	sbc	r21, r25
    2844:	6a 0b       	sbc	r22, r26
    2846:	7b 0b       	sbc	r23, r27
    2848:	2a e0       	ldi	r18, 0x0A	; 10
    284a:	ce 01       	movw	r24, r28
    284c:	0f 96       	adiw	r24, 0x0f	; 15
    284e:	0e 94 51 3d 	call	0x7aa2	; 0x7aa2 <_ZN6StringC1Emh>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2852:	6c e2       	ldi	r22, 0x2C	; 44
    2854:	77 e0       	ldi	r23, 0x07	; 7
    2856:	ce 01       	movw	r24, r28
    2858:	01 96       	adiw	r24, 0x01	; 1
    285a:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
    285e:	be 01       	movw	r22, r28
    2860:	61 5f       	subi	r22, 0xF1	; 241
    2862:	7f 4f       	sbci	r23, 0xFF	; 255
    2864:	ce 01       	movw	r24, r28
    2866:	01 96       	adiw	r24, 0x01	; 1
    2868:	0e 94 fc 3d 	call	0x7bf8	; 0x7bf8 <_ZplRK15StringSumHelperRK6String>
    286c:	6c e0       	ldi	r22, 0x0C	; 12
    286e:	77 e0       	ldi	r23, 0x07	; 7
    2870:	0e 94 0d 3e 	call	0x7c1a	; 0x7c1a <_ZplRK15StringSumHelperPKc>
    2874:	bc 01       	movw	r22, r24
    2876:	87 e6       	ldi	r24, 0x67	; 103
    2878:	9b e0       	ldi	r25, 0x0B	; 11
    287a:	0e 94 53 39 	call	0x72a6	; 0x72a6 <_ZN5Print5printERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    287e:	ce 01       	movw	r24, r28
    2880:	01 96       	adiw	r24, 0x01	; 1
    2882:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
    2886:	ce 01       	movw	r24, r28
    2888:	0f 96       	adiw	r24, 0x0f	; 15
    288a:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>

        double lt = impulsiToLitri(impulsi);
    288e:	80 91 40 0b 	lds	r24, 0x0B40	; 0x800b40 <impulsi>
    2892:	90 91 41 0b 	lds	r25, 0x0B41	; 0x800b41 <impulsi+0x1>
    2896:	0e 94 8e 09 	call	0x131c	; 0x131c <_Z14impulsiToLitrii>
    289a:	6b 01       	movw	r12, r22
    289c:	7c 01       	movw	r14, r24

        righeDisplay[1] = "LITRI :" + String(lt);
    289e:	22 e0       	ldi	r18, 0x02	; 2
    28a0:	ab 01       	movw	r20, r22
    28a2:	bc 01       	movw	r22, r24
    28a4:	ce 01       	movw	r24, r28
    28a6:	0f 96       	adiw	r24, 0x0f	; 15
    28a8:	0e 94 7c 3d 	call	0x7af8	; 0x7af8 <_ZN6StringC1Edh>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    28ac:	66 e3       	ldi	r22, 0x36	; 54
    28ae:	77 e0       	ldi	r23, 0x07	; 7
    28b0:	ce 01       	movw	r24, r28
    28b2:	01 96       	adiw	r24, 0x01	; 1
    28b4:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
    28b8:	be 01       	movw	r22, r28
    28ba:	61 5f       	subi	r22, 0xF1	; 241
    28bc:	7f 4f       	sbci	r23, 0xFF	; 255
    28be:	ce 01       	movw	r24, r28
    28c0:	01 96       	adiw	r24, 0x01	; 1
    28c2:	0e 94 fc 3d 	call	0x7bf8	; 0x7bf8 <_ZplRK15StringSumHelperRK6String>
    28c6:	bc 01       	movw	r22, r24
    28c8:	87 ef       	ldi	r24, 0xF7	; 247
    28ca:	9a e0       	ldi	r25, 0x0A	; 10
    28cc:	0e 94 7e 3c 	call	0x78fc	; 0x78fc <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    28d0:	ce 01       	movw	r24, r28
    28d2:	01 96       	adiw	r24, 0x01	; 1
    28d4:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
    28d8:	ce 01       	movw	r24, r28
    28da:	0f 96       	adiw	r24, 0x0f	; 15
    28dc:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    28e0:	68 ee       	ldi	r22, 0xE8	; 232
    28e2:	75 e0       	ldi	r23, 0x05	; 5
    28e4:	ce 01       	movw	r24, r28
    28e6:	01 96       	adiw	r24, 0x01	; 1
    28e8:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
		righeDisplay[2] = "TARGA:" + mezzo.TARGA;
    28ec:	6f e8       	ldi	r22, 0x8F	; 143
    28ee:	7b e0       	ldi	r23, 0x0B	; 11
    28f0:	ce 01       	movw	r24, r28
    28f2:	01 96       	adiw	r24, 0x01	; 1
    28f4:	0e 94 fc 3d 	call	0x7bf8	; 0x7bf8 <_ZplRK15StringSumHelperRK6String>
    28f8:	bc 01       	movw	r22, r24
    28fa:	8d ef       	ldi	r24, 0xFD	; 253
    28fc:	9a e0       	ldi	r25, 0x0A	; 10
    28fe:	0e 94 7e 3c 	call	0x78fc	; 0x78fc <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2902:	ce 01       	movw	r24, r28
    2904:	01 96       	adiw	r24, 0x01	; 1
    2906:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    290a:	6e e3       	ldi	r22, 0x3E	; 62
    290c:	77 e0       	ldi	r23, 0x07	; 7
    290e:	ce 01       	movw	r24, r28
    2910:	01 96       	adiw	r24, 0x01	; 1
    2912:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
        //righeDisplay[2] = "imp :" + String(impulsi);
        righeDisplay[3] = "Erogazione: " + StatoAttuale;
    2916:	6a e4       	ldi	r22, 0x4A	; 74
    2918:	7b e0       	ldi	r23, 0x0B	; 11
    291a:	ce 01       	movw	r24, r28
    291c:	01 96       	adiw	r24, 0x01	; 1
    291e:	0e 94 fc 3d 	call	0x7bf8	; 0x7bf8 <_ZplRK15StringSumHelperRK6String>
    2922:	bc 01       	movw	r22, r24
    2924:	83 e0       	ldi	r24, 0x03	; 3
    2926:	9b e0       	ldi	r25, 0x0B	; 11
    2928:	0e 94 7e 3c 	call	0x78fc	; 0x78fc <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    292c:	ce 01       	movw	r24, r28
    292e:	01 96       	adiw	r24, 0x01	; 1
    2930:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>

        lcd.setCursor(0, 1);
    2934:	41 e0       	ldi	r20, 0x01	; 1
    2936:	60 e0       	ldi	r22, 0x00	; 0
    2938:	87 e6       	ldi	r24, 0x67	; 103
    293a:	9b e0       	ldi	r25, 0x0B	; 11
    293c:	0e 94 d7 30 	call	0x61ae	; 0x61ae <_ZN3LCD9setCursorEhh>
        lcd.print(righeDisplay[1]);
    2940:	67 ef       	ldi	r22, 0xF7	; 247
    2942:	7a e0       	ldi	r23, 0x0A	; 10
    2944:	87 e6       	ldi	r24, 0x67	; 103
    2946:	9b e0       	ldi	r25, 0x0B	; 11
    2948:	0e 94 53 39 	call	0x72a6	; 0x72a6 <_ZN5Print5printERK6String>
        lcd.setCursor(0, 2);
    294c:	42 e0       	ldi	r20, 0x02	; 2
    294e:	60 e0       	ldi	r22, 0x00	; 0
    2950:	87 e6       	ldi	r24, 0x67	; 103
    2952:	9b e0       	ldi	r25, 0x0B	; 11
    2954:	0e 94 d7 30 	call	0x61ae	; 0x61ae <_ZN3LCD9setCursorEhh>
        lcd.print(righeDisplay[2]);
    2958:	6d ef       	ldi	r22, 0xFD	; 253
    295a:	7a e0       	ldi	r23, 0x0A	; 10
    295c:	87 e6       	ldi	r24, 0x67	; 103
    295e:	9b e0       	ldi	r25, 0x0B	; 11
    2960:	0e 94 53 39 	call	0x72a6	; 0x72a6 <_ZN5Print5printERK6String>
        lcd.setCursor(0, 3);
    2964:	43 e0       	ldi	r20, 0x03	; 3
    2966:	60 e0       	ldi	r22, 0x00	; 0
    2968:	87 e6       	ldi	r24, 0x67	; 103
    296a:	9b e0       	ldi	r25, 0x0B	; 11
    296c:	0e 94 d7 30 	call	0x61ae	; 0x61ae <_ZN3LCD9setCursorEhh>
        lcd.print(righeDisplay[3]);
    2970:	63 e0       	ldi	r22, 0x03	; 3
    2972:	7b e0       	ldi	r23, 0x0B	; 11
    2974:	87 e6       	ldi	r24, 0x67	; 103
    2976:	9b e0       	ldi	r25, 0x0B	; 11
    2978:	0e 94 53 39 	call	0x72a6	; 0x72a6 <_ZN5Print5printERK6String>

        // CONTATTO PISTOLA DIESEL

 		if (!testbit(PINA,1) && (mezzo.Carb == "D"))
    297c:	01 99       	sbic	0x00, 1	; 0
    297e:	08 c0       	rjmp	.+16     	; 0x2990 <loop+0xb46>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    2980:	6f eb       	ldi	r22, 0xBF	; 191
    2982:	75 e0       	ldi	r23, 0x05	; 5
    2984:	89 e8       	ldi	r24, 0x89	; 137
    2986:	9b e0       	ldi	r25, 0x0B	; 11
    2988:	0e 94 30 3e 	call	0x7c60	; 0x7c60 <_ZNK6String6equalsEPKc>
    298c:	81 11       	cpse	r24, r1
    298e:	23 c4       	rjmp	.+2118   	; 0x31d6 <loop+0x138c>
          avanzaStato(TmaxInviodati);
        }

        // CONTATTO PISTOLA BENZINA

		if (!testbit(PINB,1) && (mezzo.Carb == "B"))
    2990:	19 99       	sbic	0x03, 1	; 3
    2992:	66 c2       	rjmp	.+1228   	; 0x2e60 <loop+0x1016>
    2994:	61 ec       	ldi	r22, 0xC1	; 193
    2996:	75 e0       	ldi	r23, 0x05	; 5
    2998:	89 e8       	ldi	r24, 0x89	; 137
    299a:	9b e0       	ldi	r25, 0x0B	; 11
    299c:	0e 94 30 3e 	call	0x7c60	; 0x7c60 <_ZNK6String6equalsEPKc>
    29a0:	81 11       	cpse	r24, r1
    29a2:	48 c4       	rjmp	.+2192   	; 0x3234 <loop+0x13ea>
    29a4:	5d c2       	rjmp	.+1210   	; 0x2e60 <loop+0x1016>
        }        
      }
      break;
    case 8 :
      {
        righeDisplay[1] =  StatoAttuale;
    29a6:	6a e4       	ldi	r22, 0x4A	; 74
    29a8:	7b e0       	ldi	r23, 0x0B	; 11
    29aa:	87 ef       	ldi	r24, 0xF7	; 247
    29ac:	9a e0       	ldi	r25, 0x0A	; 10
    29ae:	0e 94 7e 3c 	call	0x78fc	; 0x78fc <_ZN6StringaSERKS_>
        righeDisplay[2] = "Invio........";
    29b2:	6b e4       	ldi	r22, 0x4B	; 75
    29b4:	77 e0       	ldi	r23, 0x07	; 7
    29b6:	8d ef       	ldi	r24, 0xFD	; 253
    29b8:	9a e0       	ldi	r25, 0x0A	; 10
    29ba:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringaSEPKc>
        righeDisplay[3] =  "";      
    29be:	6f ee       	ldi	r22, 0xEF	; 239
    29c0:	71 e0       	ldi	r23, 0x01	; 1
    29c2:	83 e0       	ldi	r24, 0x03	; 3
    29c4:	9b e0       	ldi	r25, 0x0B	; 11
    29c6:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringaSEPKc>
        displayLCD(righeDisplay, stato_procedura, 100);
    29ca:	60 91 42 0b 	lds	r22, 0x0B42	; 0x800b42 <stato_procedura>
    29ce:	70 91 43 0b 	lds	r23, 0x0B43	; 0x800b43 <stato_procedura+0x1>
    29d2:	44 e6       	ldi	r20, 0x64	; 100
    29d4:	50 e0       	ldi	r21, 0x00	; 0
    29d6:	81 ef       	ldi	r24, 0xF1	; 241
    29d8:	9a e0       	ldi	r25, 0x0A	; 10
    29da:	0e 94 81 03 	call	0x702	; 0x702 <_Z10displayLCDP6Stringii>
        Messaggio = "";
    29de:	6f ee       	ldi	r22, 0xEF	; 239
    29e0:	71 e0       	ldi	r23, 0x01	; 1
    29e2:	89 e0       	ldi	r24, 0x09	; 9
    29e4:	9b e0       	ldi	r25, 0x0B	; 11
    29e6:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringaSEPKc>
    29ea:	05 e1       	ldi	r16, 0x15	; 21
    29ec:	1b e0       	ldi	r17, 0x0B	; 11
    29ee:	29 e3       	ldi	r18, 0x39	; 57
    29f0:	e2 2e       	mov	r14, r18
    29f2:	2b e0       	ldi	r18, 0x0B	; 11
    29f4:	f2 2e       	mov	r15, r18
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
    29f6:	b8 01       	movw	r22, r16
    29f8:	ce 01       	movw	r24, r28
    29fa:	01 96       	adiw	r24, 0x01	; 1
    29fc:	0e 94 93 3c 	call	0x7926	; 0x7926 <_ZN6StringC1ERKS_>

        for (int k = 0; k < 6; k++)
          Messaggio.concat(RaccoltaDati[k] + ";");
    2a00:	69 e5       	ldi	r22, 0x59	; 89
    2a02:	77 e0       	ldi	r23, 0x07	; 7
    2a04:	ce 01       	movw	r24, r28
    2a06:	01 96       	adiw	r24, 0x01	; 1
    2a08:	0e 94 0d 3e 	call	0x7c1a	; 0x7c1a <_ZplRK15StringSumHelperPKc>
    2a0c:	bc 01       	movw	r22, r24
    2a0e:	89 e0       	ldi	r24, 0x09	; 9
    2a10:	9b e0       	ldi	r25, 0x0B	; 11
    2a12:	0e 94 d6 3d 	call	0x7bac	; 0x7bac <_ZN6String6concatERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2a16:	ce 01       	movw	r24, r28
    2a18:	01 96       	adiw	r24, 0x01	; 1
    2a1a:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
    2a1e:	0a 5f       	subi	r16, 0xFA	; 250
    2a20:	1f 4f       	sbci	r17, 0xFF	; 255
        righeDisplay[2] = "Invio........";
        righeDisplay[3] =  "";      
        displayLCD(righeDisplay, stato_procedura, 100);
        Messaggio = "";

        for (int k = 0; k < 6; k++)
    2a22:	e0 16       	cp	r14, r16
    2a24:	f1 06       	cpc	r15, r17
    2a26:	39 f7       	brne	.-50     	; 0x29f6 <loop+0xbac>
          Messaggio.concat(RaccoltaDati[k] + ";");

        Messaggio.concat(CodSede);
    2a28:	6a e4       	ldi	r22, 0x4A	; 74
    2a2a:	71 e0       	ldi	r23, 0x01	; 1
    2a2c:	89 e0       	ldi	r24, 0x09	; 9
    2a2e:	9b e0       	ldi	r25, 0x0B	; 11
    2a30:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <_ZN6String6concatEPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2a34:	6b e5       	ldi	r22, 0x5B	; 91
    2a36:	77 e0       	ldi	r23, 0x07	; 7
    2a38:	ce 01       	movw	r24, r28
    2a3a:	01 96       	adiw	r24, 0x01	; 1
    2a3c:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
        Serial.println("Messaggio:" + Messaggio);
    2a40:	69 e0       	ldi	r22, 0x09	; 9
    2a42:	7b e0       	ldi	r23, 0x0B	; 11
    2a44:	ce 01       	movw	r24, r28
    2a46:	01 96       	adiw	r24, 0x01	; 1
    2a48:	0e 94 fc 3d 	call	0x7bf8	; 0x7bf8 <_ZplRK15StringSumHelperRK6String>
    2a4c:	bc 01       	movw	r22, r24
    2a4e:	8e e2       	ldi	r24, 0x2E	; 46
    2a50:	9d e0       	ldi	r25, 0x0D	; 13
    2a52:	0e 94 7c 39 	call	0x72f8	; 0x72f8 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2a56:	ce 01       	movw	r24, r28
    2a58:	01 96       	adiw	r24, 0x01	; 1
    2a5a:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
        // Messaggio = "DD92743A;28530;D;15.03;1234;000;SA10012";
        /*****************************************************************/
        disable_ETH();
    2a5e:	0e 94 95 01 	call	0x32a	; 0x32a <_ZL11disable_ETHv>
    2a62:	8f e3       	ldi	r24, 0x3F	; 63
    2a64:	9f e1       	ldi	r25, 0x1F	; 31
    2a66:	01 97       	sbiw	r24, 0x01	; 1
    2a68:	f1 f7       	brne	.-4      	; 0x2a66 <loop+0xc1c>
    2a6a:	00 c0       	rjmp	.+0      	; 0x2a6c <loop+0xc22>
    2a6c:	00 00       	nop
        _delay_ms(2);
        enable_ETH();
    2a6e:	0e 94 93 01 	call	0x326	; 0x326 <_ZL10enable_ETHv>
    2a72:	9f ef       	ldi	r25, 0xFF	; 255
    2a74:	29 e6       	ldi	r18, 0x69	; 105
    2a76:	38 e1       	ldi	r19, 0x18	; 24
    2a78:	91 50       	subi	r25, 0x01	; 1
    2a7a:	20 40       	sbci	r18, 0x00	; 0
    2a7c:	30 40       	sbci	r19, 0x00	; 0
    2a7e:	e1 f7       	brne	.-8      	; 0x2a78 <loop+0xc2e>
    2a80:	00 c0       	rjmp	.+0      	; 0x2a82 <loop+0xc38>
    2a82:	00 00       	nop
        /*****************************************************************/
        _delay_ms(500); // prima era _delay_ms(1000);
		lcd.noBacklight();
    2a84:	87 e6       	ldi	r24, 0x67	; 103
    2a86:	9b e0       	ldi	r25, 0x0B	; 11
    2a88:	0e 94 c1 30 	call	0x6182	; 0x6182 <_ZN3LCD11noBacklightEv>
        avanzaStato(30); 
    2a8c:	6e e1       	ldi	r22, 0x1E	; 30
    2a8e:	70 e0       	ldi	r23, 0x00	; 0
    2a90:	80 e0       	ldi	r24, 0x00	; 0
    2a92:	90 e0       	ldi	r25, 0x00	; 0
    2a94:	fb c3       	rjmp	.+2038   	; 0x328c <loop+0x1442>
      }
      break;
    case 9:
      {        
        //if (BIT_IS_CLEAR(PORTC, 4))
		if (bitislow(PORTC,CS_W5500))
    2a96:	44 99       	sbic	0x08, 4	; 8
    2a98:	e3 c1       	rjmp	.+966    	; 0x2e60 <loop+0x1016>
        {
          displayLCD(righeDisplay, stato_procedura, 10);
    2a9a:	4a e0       	ldi	r20, 0x0A	; 10
    2a9c:	50 e0       	ldi	r21, 0x00	; 0
    2a9e:	69 e0       	ldi	r22, 0x09	; 9
    2aa0:	70 e0       	ldi	r23, 0x00	; 0
    2aa2:	81 ef       	ldi	r24, 0xF1	; 241
    2aa4:	9a e0       	ldi	r25, 0x0A	; 10
    2aa6:	0e 94 81 03 	call	0x702	; 0x702 <_Z10displayLCDP6Stringii>
          Messaggio = "";
    2aaa:	6f ee       	ldi	r22, 0xEF	; 239
    2aac:	71 e0       	ldi	r23, 0x01	; 1
    2aae:	89 e0       	ldi	r24, 0x09	; 9
    2ab0:	9b e0       	ldi	r25, 0x0B	; 11
    2ab2:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringaSEPKc>
    2ab6:	05 e1       	ldi	r16, 0x15	; 21
    2ab8:	1b e0       	ldi	r17, 0x0B	; 11
    2aba:	99 e3       	ldi	r25, 0x39	; 57
    2abc:	e9 2e       	mov	r14, r25
    2abe:	9b e0       	ldi	r25, 0x0B	; 11
    2ac0:	f9 2e       	mov	r15, r25
{
public:
	StringSumHelper(const String &s) : String(s) {}
    2ac2:	b8 01       	movw	r22, r16
    2ac4:	ce 01       	movw	r24, r28
    2ac6:	01 96       	adiw	r24, 0x01	; 1
    2ac8:	0e 94 93 3c 	call	0x7926	; 0x7926 <_ZN6StringC1ERKS_>

          for (int k = 0; k < 6; k++)
            Messaggio.concat(RaccoltaDati[k] + ";");
    2acc:	69 e5       	ldi	r22, 0x59	; 89
    2ace:	77 e0       	ldi	r23, 0x07	; 7
    2ad0:	ce 01       	movw	r24, r28
    2ad2:	01 96       	adiw	r24, 0x01	; 1
    2ad4:	0e 94 0d 3e 	call	0x7c1a	; 0x7c1a <_ZplRK15StringSumHelperPKc>
    2ad8:	bc 01       	movw	r22, r24
    2ada:	89 e0       	ldi	r24, 0x09	; 9
    2adc:	9b e0       	ldi	r25, 0x0B	; 11
    2ade:	0e 94 d6 3d 	call	0x7bac	; 0x7bac <_ZN6String6concatERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2ae2:	ce 01       	movw	r24, r28
    2ae4:	01 96       	adiw	r24, 0x01	; 1
    2ae6:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
    2aea:	0a 5f       	subi	r16, 0xFA	; 250
    2aec:	1f 4f       	sbci	r17, 0xFF	; 255
		if (bitislow(PORTC,CS_W5500))
        {
          displayLCD(righeDisplay, stato_procedura, 10);
          Messaggio = "";

          for (int k = 0; k < 6; k++)
    2aee:	e0 16       	cp	r14, r16
    2af0:	f1 06       	cpc	r15, r17
    2af2:	39 f7       	brne	.-50     	; 0x2ac2 <loop+0xc78>
            Messaggio.concat(RaccoltaDati[k] + ";");

          Messaggio.concat(CodSede);
    2af4:	6a e4       	ldi	r22, 0x4A	; 74
    2af6:	71 e0       	ldi	r23, 0x01	; 1
    2af8:	89 e0       	ldi	r24, 0x09	; 9
    2afa:	9b e0       	ldi	r25, 0x0B	; 11
    2afc:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <_ZN6String6concatEPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2b00:	6b e5       	ldi	r22, 0x5B	; 91
    2b02:	77 e0       	ldi	r23, 0x07	; 7
    2b04:	ce 01       	movw	r24, r28
    2b06:	01 96       	adiw	r24, 0x01	; 1
    2b08:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
          Serial.println("Messaggio:" + Messaggio);
    2b0c:	69 e0       	ldi	r22, 0x09	; 9
    2b0e:	7b e0       	ldi	r23, 0x0B	; 11
    2b10:	ce 01       	movw	r24, r28
    2b12:	01 96       	adiw	r24, 0x01	; 1
    2b14:	0e 94 fc 3d 	call	0x7bf8	; 0x7bf8 <_ZplRK15StringSumHelperRK6String>
    2b18:	bc 01       	movw	r22, r24
    2b1a:	8e e2       	ldi	r24, 0x2E	; 46
    2b1c:	9d e0       	ldi	r25, 0x0D	; 13
    2b1e:	0e 94 7c 39 	call	0x72f8	; 0x72f8 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2b22:	ce 01       	movw	r24, r28
    2b24:	01 96       	adiw	r24, 0x01	; 1
    2b26:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
    2b2a:	8f ef       	ldi	r24, 0xFF	; 255
    2b2c:	93 ec       	ldi	r25, 0xC3	; 195
    2b2e:	29 e0       	ldi	r18, 0x09	; 9
    2b30:	81 50       	subi	r24, 0x01	; 1
    2b32:	90 40       	sbci	r25, 0x00	; 0
    2b34:	20 40       	sbci	r18, 0x00	; 0
    2b36:	e1 f7       	brne	.-8      	; 0x2b30 <loop+0xce6>
    2b38:	00 c0       	rjmp	.+0      	; 0x2b3a <loop+0xcf0>

          // Messaggio = "DD92743A;28530;D;15.03;1234;000;SA10012";

          _delay_ms(200); // prima era _delay_ms(1000);

          if (PostErogazioneGAC(80, serverREST, clientLOCAL, Messaggio))
    2b3a:	00 00       	nop
    2b3c:	69 e0       	ldi	r22, 0x09	; 9
    2b3e:	7b e0       	ldi	r23, 0x0B	; 11
    2b40:	ce 01       	movw	r24, r28
    2b42:	0f 96       	adiw	r24, 0x0f	; 15
    2b44:	0e 94 93 3c 	call	0x7926	; 0x7926 <_ZN6StringC1ERKS_>
    2b48:	6c ec       	ldi	r22, 0xCC	; 204
    2b4a:	7a e0       	ldi	r23, 0x0A	; 10
    2b4c:	ce 01       	movw	r24, r28
    2b4e:	01 96       	adiw	r24, 0x01	; 1
    2b50:	58 d9       	rcall	.-3408   	; 0x1e02 <_ZN14EthernetClientC1ERKS_>
    2b52:	9e 01       	movw	r18, r28
    2b54:	21 5f       	subi	r18, 0xF1	; 241
    2b56:	3f 4f       	sbci	r19, 0xFF	; 255
    2b58:	ae 01       	movw	r20, r28
    2b5a:	4f 5f       	subi	r20, 0xFF	; 255
    2b5c:	5f 4f       	sbci	r21, 0xFF	; 255
    2b5e:	68 e3       	ldi	r22, 0x38	; 56
    2b60:	71 e0       	ldi	r23, 0x01	; 1
    2b62:	80 e5       	ldi	r24, 0x50	; 80
    2b64:	90 e0       	ldi	r25, 0x00	; 0
    2b66:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <_Z17PostErogazioneGACiPc14EthernetClient6String>
    2b6a:	18 2f       	mov	r17, r24
    2b6c:	ce 01       	movw	r24, r28
    2b6e:	0f 96       	adiw	r24, 0x0f	; 15
    2b70:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
    2b74:	11 23       	and	r17, r17
    2b76:	51 f1       	breq	.+84     	; 0x2bcc <loop+0xd82>
          {
            disable_ETH();
    2b78:	0e 94 95 01 	call	0x32a	; 0x32a <_ZL11disable_ETHv>
    2b7c:	3f ef       	ldi	r19, 0xFF	; 255
    2b7e:	83 ec       	ldi	r24, 0xC3	; 195
    2b80:	99 e0       	ldi	r25, 0x09	; 9
    2b82:	31 50       	subi	r19, 0x01	; 1
    2b84:	80 40       	sbci	r24, 0x00	; 0
    2b86:	90 40       	sbci	r25, 0x00	; 0
    2b88:	e1 f7       	brne	.-8      	; 0x2b82 <loop+0xd38>
    2b8a:	00 c0       	rjmp	.+0      	; 0x2b8c <loop+0xd42>
    2b8c:	00 00       	nop
            _delay_ms(200);
            Serial.println("PostErogazioneGAC - OK" );   
    2b8e:	66 e6       	ldi	r22, 0x66	; 102
    2b90:	77 e0       	ldi	r23, 0x07	; 7
    2b92:	8e e2       	ldi	r24, 0x2E	; 46
    2b94:	9d e0       	ldi	r25, 0x0D	; 13
    2b96:	0e 94 8c 39 	call	0x7318	; 0x7318 <_ZN5Print7printlnEPKc>
            Serial.println("Tento la ritrasmisssione di erogazioni salvate non trasmesse" );             
    2b9a:	6d e7       	ldi	r22, 0x7D	; 125
    2b9c:	77 e0       	ldi	r23, 0x07	; 7
    2b9e:	8e e2       	ldi	r24, 0x2E	; 46
    2ba0:	9d e0       	ldi	r25, 0x0D	; 13
    2ba2:	0e 94 8c 39 	call	0x7318	; 0x7318 <_ZN5Print7printlnEPKc>
    2ba6:	8f e3       	ldi	r24, 0x3F	; 63
    2ba8:	9f e1       	ldi	r25, 0x1F	; 31
    2baa:	01 97       	sbiw	r24, 0x01	; 1
    2bac:	f1 f7       	brne	.-4      	; 0x2baa <loop+0xd60>
    2bae:	00 c0       	rjmp	.+0      	; 0x2bb0 <loop+0xd66>
    2bb0:	00 00       	nop
            _delay_ms(2);
            enable_ETH();
    2bb2:	0e 94 93 01 	call	0x326	; 0x326 <_ZL10enable_ETHv>
    2bb6:	8f e3       	ldi	r24, 0x3F	; 63
    2bb8:	9f e1       	ldi	r25, 0x1F	; 31
    2bba:	01 97       	sbiw	r24, 0x01	; 1
    2bbc:	f1 f7       	brne	.-4      	; 0x2bba <loop+0xd70>
    2bbe:	00 c0       	rjmp	.+0      	; 0x2bc0 <loop+0xd76>
    2bc0:	00 00       	nop
            _delay_ms(2);
            avanzaStato(60);                                
    2bc2:	6c e3       	ldi	r22, 0x3C	; 60
    2bc4:	70 e0       	ldi	r23, 0x00	; 0
    2bc6:	80 e0       	ldi	r24, 0x00	; 0
    2bc8:	90 e0       	ldi	r25, 0x00	; 0
    2bca:	60 c3       	rjmp	.+1728   	; 0x328c <loop+0x1442>
          }
          else
          {
             disable_ETH();   
    2bcc:	0e 94 95 01 	call	0x32a	; 0x32a <_ZL11disable_ETHv>
             String ultima_indirizzo  = read_eeprom_string(4,1035);
    2bd0:	4b e0       	ldi	r20, 0x0B	; 11
    2bd2:	54 e0       	ldi	r21, 0x04	; 4
    2bd4:	64 e0       	ldi	r22, 0x04	; 4
    2bd6:	70 e0       	ldi	r23, 0x00	; 0
    2bd8:	ce 01       	movw	r24, r28
    2bda:	4f 96       	adiw	r24, 0x1f	; 31
    2bdc:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <_Z18read_eeprom_stringii>
             int indirizzo = ultima_indirizzo.toInt();
    2be0:	ce 01       	movw	r24, r28
    2be2:	4f 96       	adiw	r24, 0x1f	; 31
    2be4:	0e 94 18 3f 	call	0x7e30	; 0x7e30 <_ZNK6String5toIntEv>
    2be8:	6b 01       	movw	r12, r22
            // bool write_eeprom_string(String erog,int lunBuffer,int start_ind)
            if (write_eeprom_string(Messaggio,Messaggio.length(),indirizzo))
    2bea:	7c 01       	movw	r14, r24
    2bec:	00 91 0d 0b 	lds	r16, 0x0B0D	; 0x800b0d <Messaggio+0x4>
    2bf0:	10 91 0e 0b 	lds	r17, 0x0B0E	; 0x800b0e <Messaggio+0x5>
    2bf4:	69 e0       	ldi	r22, 0x09	; 9
    2bf6:	7b e0       	ldi	r23, 0x0B	; 11
    2bf8:	ce 01       	movw	r24, r28
    2bfa:	01 96       	adiw	r24, 0x01	; 1
    2bfc:	0e 94 93 3c 	call	0x7926	; 0x7926 <_ZN6StringC1ERKS_>
    2c00:	a6 01       	movw	r20, r12
    2c02:	b8 01       	movw	r22, r16
    2c04:	ce 01       	movw	r24, r28
    2c06:	01 96       	adiw	r24, 0x01	; 1
    2c08:	2b d8       	rcall	.-4010   	; 0x1c60 <_Z19write_eeprom_string6Stringii>
    2c0a:	18 2f       	mov	r17, r24
    2c0c:	ce 01       	movw	r24, r28
    2c0e:	01 96       	adiw	r24, 0x01	; 1
    2c10:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
    2c14:	11 23       	and	r17, r17
    2c16:	09 f4       	brne	.+2      	; 0x2c1a <loop+0xdd0>
    2c18:	1d c1       	rjmp	.+570    	; 0x2e54 <loop+0x100a>
              {
                Serial.println("WRITE OK AT address :" + String(indirizzo));
    2c1a:	4a e0       	ldi	r20, 0x0A	; 10
    2c1c:	b6 01       	movw	r22, r12
    2c1e:	ce 01       	movw	r24, r28
    2c20:	0f 96       	adiw	r24, 0x0f	; 15
    2c22:	0e 94 fd 3c 	call	0x79fa	; 0x79fa <_ZN6StringC1Eih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2c26:	6a eb       	ldi	r22, 0xBA	; 186
    2c28:	77 e0       	ldi	r23, 0x07	; 7
    2c2a:	ce 01       	movw	r24, r28
    2c2c:	01 96       	adiw	r24, 0x01	; 1
    2c2e:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
    2c32:	be 01       	movw	r22, r28
    2c34:	61 5f       	subi	r22, 0xF1	; 241
    2c36:	7f 4f       	sbci	r23, 0xFF	; 255
    2c38:	ce 01       	movw	r24, r28
    2c3a:	01 96       	adiw	r24, 0x01	; 1
    2c3c:	0e 94 fc 3d 	call	0x7bf8	; 0x7bf8 <_ZplRK15StringSumHelperRK6String>
    2c40:	bc 01       	movw	r22, r24
    2c42:	8e e2       	ldi	r24, 0x2E	; 46
    2c44:	9d e0       	ldi	r25, 0x0D	; 13
    2c46:	0e 94 7c 39 	call	0x72f8	; 0x72f8 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2c4a:	ce 01       	movw	r24, r28
    2c4c:	01 96       	adiw	r24, 0x01	; 1
    2c4e:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
    2c52:	ce 01       	movw	r24, r28
    2c54:	0f 96       	adiw	r24, 0x0f	; 15
    2c56:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
                indirizzo = indirizzo + 50;  
    2c5a:	92 e3       	ldi	r25, 0x32	; 50
    2c5c:	c9 0e       	add	r12, r25
    2c5e:	d1 1c       	adc	r13, r1
                if (indirizzo > 3000) {indirizzo = 2000; }   
    2c60:	29 eb       	ldi	r18, 0xB9	; 185
    2c62:	c2 16       	cp	r12, r18
    2c64:	2b e0       	ldi	r18, 0x0B	; 11
    2c66:	d2 06       	cpc	r13, r18
    2c68:	24 f0       	brlt	.+8      	; 0x2c72 <loop+0xe28>
    2c6a:	80 ed       	ldi	r24, 0xD0	; 208
    2c6c:	c8 2e       	mov	r12, r24
    2c6e:	87 e0       	ldi	r24, 0x07	; 7
    2c70:	d8 2e       	mov	r13, r24
                String update_ultima_indirizzo = String(indirizzo);
    2c72:	4a e0       	ldi	r20, 0x0A	; 10
    2c74:	b6 01       	movw	r22, r12
    2c76:	ce 01       	movw	r24, r28
    2c78:	47 96       	adiw	r24, 0x17	; 23
    2c7a:	0e 94 fd 3c 	call	0x79fa	; 0x79fa <_ZN6StringC1Eih>
                if (write_eeprom_string(update_ultima_indirizzo,update_ultima_indirizzo.length(),1035))
    2c7e:	0b 8d       	ldd	r16, Y+27	; 0x1b
    2c80:	1c 8d       	ldd	r17, Y+28	; 0x1c
    2c82:	be 01       	movw	r22, r28
    2c84:	69 5e       	subi	r22, 0xE9	; 233
    2c86:	7f 4f       	sbci	r23, 0xFF	; 255
    2c88:	ce 01       	movw	r24, r28
    2c8a:	01 96       	adiw	r24, 0x01	; 1
    2c8c:	0e 94 93 3c 	call	0x7926	; 0x7926 <_ZN6StringC1ERKS_>
    2c90:	4b e0       	ldi	r20, 0x0B	; 11
    2c92:	54 e0       	ldi	r21, 0x04	; 4
    2c94:	b8 01       	movw	r22, r16
    2c96:	ce 01       	movw	r24, r28
    2c98:	01 96       	adiw	r24, 0x01	; 1
    2c9a:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <_Z19write_eeprom_string6Stringii>
    2c9e:	18 2f       	mov	r17, r24
    2ca0:	ce 01       	movw	r24, r28
    2ca2:	01 96       	adiw	r24, 0x01	; 1
    2ca4:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
    2ca8:	11 23       	and	r17, r17
    2caa:	01 f1       	breq	.+64     	; 0x2cec <loop+0xea2>
                  Serial.println("UPDATE OK address :" + String(indirizzo));  
    2cac:	4a e0       	ldi	r20, 0x0A	; 10
    2cae:	b6 01       	movw	r22, r12
    2cb0:	ce 01       	movw	r24, r28
    2cb2:	0f 96       	adiw	r24, 0x0f	; 15
    2cb4:	0e 94 fd 3c 	call	0x79fa	; 0x79fa <_ZN6StringC1Eih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2cb8:	60 ed       	ldi	r22, 0xD0	; 208
    2cba:	77 e0       	ldi	r23, 0x07	; 7
    2cbc:	ce 01       	movw	r24, r28
    2cbe:	01 96       	adiw	r24, 0x01	; 1
    2cc0:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
    2cc4:	be 01       	movw	r22, r28
    2cc6:	61 5f       	subi	r22, 0xF1	; 241
    2cc8:	7f 4f       	sbci	r23, 0xFF	; 255
    2cca:	ce 01       	movw	r24, r28
    2ccc:	01 96       	adiw	r24, 0x01	; 1
    2cce:	0e 94 fc 3d 	call	0x7bf8	; 0x7bf8 <_ZplRK15StringSumHelperRK6String>
    2cd2:	bc 01       	movw	r22, r24
    2cd4:	8e e2       	ldi	r24, 0x2E	; 46
    2cd6:	9d e0       	ldi	r25, 0x0D	; 13
    2cd8:	0e 94 7c 39 	call	0x72f8	; 0x72f8 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2cdc:	ce 01       	movw	r24, r28
    2cde:	01 96       	adiw	r24, 0x01	; 1
    2ce0:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
    2ce4:	ce 01       	movw	r24, r28
    2ce6:	0f 96       	adiw	r24, 0x0f	; 15
    2ce8:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
            if (write_eeprom_string(Messaggio,Messaggio.length(),indirizzo))
              {
                Serial.println("WRITE OK AT address :" + String(indirizzo));
                indirizzo = indirizzo + 50;  
                if (indirizzo > 3000) {indirizzo = 2000; }   
                String update_ultima_indirizzo = String(indirizzo);
    2cec:	ce 01       	movw	r24, r28
    2cee:	47 96       	adiw	r24, 0x17	; 23
    2cf0:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
    2cf4:	af c0       	rjmp	.+350    	; 0x2e54 <loop+0x100a>
        }
      }
      break;
    case 10:
      {
			 Buzzer(1,100);
    2cf6:	44 e6       	ldi	r20, 0x64	; 100
    2cf8:	50 e0       	ldi	r21, 0x00	; 0
    2cfa:	60 e0       	ldi	r22, 0x00	; 0
    2cfc:	70 e0       	ldi	r23, 0x00	; 0
    2cfe:	81 e0       	ldi	r24, 0x01	; 1
    2d00:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z6Buzzerhm>
    2d04:	3f ef       	ldi	r19, 0xFF	; 255
    2d06:	81 ee       	ldi	r24, 0xE1	; 225
    2d08:	94 e0       	ldi	r25, 0x04	; 4
    2d0a:	31 50       	subi	r19, 0x01	; 1
    2d0c:	80 40       	sbci	r24, 0x00	; 0
    2d0e:	90 40       	sbci	r25, 0x00	; 0
    2d10:	e1 f7       	brne	.-8      	; 0x2d0a <loop+0xec0>
    2d12:	00 c0       	rjmp	.+0      	; 0x2d14 <loop+0xeca>
    2d14:	00 00       	nop
			 _delay_ms(100);
			 Buzzer(1,100);
    2d16:	44 e6       	ldi	r20, 0x64	; 100
    2d18:	50 e0       	ldi	r21, 0x00	; 0
    2d1a:	60 e0       	ldi	r22, 0x00	; 0
    2d1c:	70 e0       	ldi	r23, 0x00	; 0
    2d1e:	81 e0       	ldi	r24, 0x01	; 1
    2d20:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z6Buzzerhm>
    2d24:	2f ef       	ldi	r18, 0xFF	; 255
    2d26:	31 ee       	ldi	r19, 0xE1	; 225
    2d28:	84 e0       	ldi	r24, 0x04	; 4
    2d2a:	21 50       	subi	r18, 0x01	; 1
    2d2c:	30 40       	sbci	r19, 0x00	; 0
    2d2e:	80 40       	sbci	r24, 0x00	; 0
    2d30:	e1 f7       	brne	.-8      	; 0x2d2a <loop+0xee0>
    2d32:	00 c0       	rjmp	.+0      	; 0x2d34 <loop+0xeea>
    2d34:	00 00       	nop
			 _delay_ms(100);
			 Buzzer(1,100);
    2d36:	44 e6       	ldi	r20, 0x64	; 100
    2d38:	50 e0       	ldi	r21, 0x00	; 0
    2d3a:	60 e0       	ldi	r22, 0x00	; 0
    2d3c:	70 e0       	ldi	r23, 0x00	; 0
    2d3e:	81 e0       	ldi	r24, 0x01	; 1
    2d40:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z6Buzzerhm>
    2d44:	9f ef       	ldi	r25, 0xFF	; 255
    2d46:	21 ee       	ldi	r18, 0xE1	; 225
    2d48:	34 e0       	ldi	r19, 0x04	; 4
    2d4a:	91 50       	subi	r25, 0x01	; 1
    2d4c:	20 40       	sbci	r18, 0x00	; 0
    2d4e:	30 40       	sbci	r19, 0x00	; 0
    2d50:	e1 f7       	brne	.-8      	; 0x2d4a <loop+0xf00>
    2d52:	00 c0       	rjmp	.+0      	; 0x2d54 <loop+0xf0a>
    2d54:	00 00       	nop
			 _delay_ms(100);
			 
			 disabilitaPulser('D');
    2d56:	84 e4       	ldi	r24, 0x44	; 68
    2d58:	0e 94 79 09 	call	0x12f2	; 0x12f2 <_Z16disabilitaPulserc>
			 disabilitaPulser('B');
    2d5c:	82 e4       	ldi	r24, 0x42	; 66
    2d5e:	0e 94 79 09 	call	0x12f2	; 0x12f2 <_Z16disabilitaPulserc>
			 
             String str_indirizzo  = read_eeprom_string(4,1035);
    2d62:	4b e0       	ldi	r20, 0x0B	; 11
    2d64:	54 e0       	ldi	r21, 0x04	; 4
    2d66:	64 e0       	ldi	r22, 0x04	; 4
    2d68:	70 e0       	ldi	r23, 0x00	; 0
    2d6a:	ce 01       	movw	r24, r28
    2d6c:	4f 96       	adiw	r24, 0x1f	; 31
    2d6e:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <_Z18read_eeprom_stringii>
             int ultimo_indirizzo = (str_indirizzo.toInt());
    2d72:	ce 01       	movw	r24, r28
    2d74:	4f 96       	adiw	r24, 0x1f	; 31
    2d76:	0e 94 18 3f 	call	0x7e30	; 0x7e30 <_ZNK6String5toIntEv>
    2d7a:	7b 01       	movw	r14, r22
             int start = 2000;
    2d7c:	00 ed       	ldi	r16, 0xD0	; 208
    2d7e:	17 e0       	ldi	r17, 0x07	; 7
             bool tx = false;
             
             while ((start < ultimo_indirizzo))
    2d80:	0e 15       	cp	r16, r14
    2d82:	1f 05       	cpc	r17, r15
    2d84:	0c f0       	brlt	.+2      	; 0x2d88 <loop+0xf3e>
    2d86:	4b c0       	rjmp	.+150    	; 0x2e1e <loop+0xfd4>
             {
               String e  = read_eeprom_string(50,start);
    2d88:	a8 01       	movw	r20, r16
    2d8a:	62 e3       	ldi	r22, 0x32	; 50
    2d8c:	70 e0       	ldi	r23, 0x00	; 0
    2d8e:	ce 01       	movw	r24, r28
    2d90:	47 96       	adiw	r24, 0x17	; 23
    2d92:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <_Z18read_eeprom_stringii>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2d96:	64 ee       	ldi	r22, 0xE4	; 228
    2d98:	77 e0       	ldi	r23, 0x07	; 7
    2d9a:	ce 01       	movw	r24, r28
    2d9c:	01 96       	adiw	r24, 0x01	; 1
    2d9e:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
               Serial.println("DA TRASMETTERE: " + e);
    2da2:	be 01       	movw	r22, r28
    2da4:	69 5e       	subi	r22, 0xE9	; 233
    2da6:	7f 4f       	sbci	r23, 0xFF	; 255
    2da8:	ce 01       	movw	r24, r28
    2daa:	01 96       	adiw	r24, 0x01	; 1
    2dac:	0e 94 fc 3d 	call	0x7bf8	; 0x7bf8 <_ZplRK15StringSumHelperRK6String>
    2db0:	bc 01       	movw	r22, r24
    2db2:	8e e2       	ldi	r24, 0x2E	; 46
    2db4:	9d e0       	ldi	r25, 0x0D	; 13
    2db6:	0e 94 7c 39 	call	0x72f8	; 0x72f8 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2dba:	ce 01       	movw	r24, r28
    2dbc:	01 96       	adiw	r24, 0x01	; 1
    2dbe:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
               tx = PostErogazioneGAC(80, serverREST, clientLOCAL, e);
    2dc2:	be 01       	movw	r22, r28
    2dc4:	69 5e       	subi	r22, 0xE9	; 233
    2dc6:	7f 4f       	sbci	r23, 0xFF	; 255
    2dc8:	ce 01       	movw	r24, r28
    2dca:	0f 96       	adiw	r24, 0x0f	; 15
    2dcc:	0e 94 93 3c 	call	0x7926	; 0x7926 <_ZN6StringC1ERKS_>
    2dd0:	6c ec       	ldi	r22, 0xCC	; 204
    2dd2:	7a e0       	ldi	r23, 0x0A	; 10
    2dd4:	ce 01       	movw	r24, r28
    2dd6:	01 96       	adiw	r24, 0x01	; 1
    2dd8:	14 d8       	rcall	.-4056   	; 0x1e02 <_ZN14EthernetClientC1ERKS_>
    2dda:	9e 01       	movw	r18, r28
    2ddc:	21 5f       	subi	r18, 0xF1	; 241
    2dde:	3f 4f       	sbci	r19, 0xFF	; 255
    2de0:	ae 01       	movw	r20, r28
    2de2:	4f 5f       	subi	r20, 0xFF	; 255
    2de4:	5f 4f       	sbci	r21, 0xFF	; 255
    2de6:	68 e3       	ldi	r22, 0x38	; 56
    2de8:	71 e0       	ldi	r23, 0x01	; 1
    2dea:	80 e5       	ldi	r24, 0x50	; 80
    2dec:	90 e0       	ldi	r25, 0x00	; 0
    2dee:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <_Z17PostErogazioneGACiPc14EthernetClient6String>
    2df2:	ce 01       	movw	r24, r28
    2df4:	0f 96       	adiw	r24, 0x0f	; 15
    2df6:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
               start = start + 50;    
    2dfa:	0e 5c       	subi	r16, 0xCE	; 206
    2dfc:	1f 4f       	sbci	r17, 0xFF	; 255
    2dfe:	8f ef       	ldi	r24, 0xFF	; 255
    2e00:	93 ec       	ldi	r25, 0xC3	; 195
    2e02:	29 e0       	ldi	r18, 0x09	; 9
    2e04:	81 50       	subi	r24, 0x01	; 1
    2e06:	90 40       	sbci	r25, 0x00	; 0
    2e08:	20 40       	sbci	r18, 0x00	; 0
    2e0a:	e1 f7       	brne	.-8      	; 0x2e04 <loop+0xfba>
    2e0c:	00 c0       	rjmp	.+0      	; 0x2e0e <loop+0xfc4>
    2e0e:	00 00       	nop
                _delay_ms(200); // Attendo un pochino tra un atrasmissione e l'altra           
               printLine();                
    2e10:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
             int start = 2000;
             bool tx = false;
             
             while ((start < ultimo_indirizzo))
             {
               String e  = read_eeprom_string(50,start);
    2e14:	ce 01       	movw	r24, r28
    2e16:	47 96       	adiw	r24, 0x17	; 23
    2e18:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
             String str_indirizzo  = read_eeprom_string(4,1035);
             int ultimo_indirizzo = (str_indirizzo.toInt());
             int start = 2000;
             bool tx = false;
             
             while ((start < ultimo_indirizzo))
    2e1c:	b1 cf       	rjmp	.-158    	; 0x2d80 <loop+0xf36>
               start = start + 50;    
                _delay_ms(200); // Attendo un pochino tra un atrasmissione e l'altra           
               printLine();                
             }
             
             if (start >  2000){
    2e1e:	01 3d       	cpi	r16, 0xD1	; 209
    2e20:	37 e0       	ldi	r19, 0x07	; 7
    2e22:	13 07       	cpc	r17, r19
    2e24:	bc f0       	brlt	.+46     	; 0x2e54 <loop+0x100a>
                write_eeprom_string("2000",4,1035);
    2e26:	65 ef       	ldi	r22, 0xF5	; 245
    2e28:	77 e0       	ldi	r23, 0x07	; 7
    2e2a:	ce 01       	movw	r24, r28
    2e2c:	01 96       	adiw	r24, 0x01	; 1
    2e2e:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
    2e32:	4b e0       	ldi	r20, 0x0B	; 11
    2e34:	54 e0       	ldi	r21, 0x04	; 4
    2e36:	64 e0       	ldi	r22, 0x04	; 4
    2e38:	70 e0       	ldi	r23, 0x00	; 0
    2e3a:	ce 01       	movw	r24, r28
    2e3c:	01 96       	adiw	r24, 0x01	; 1
    2e3e:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <_Z19write_eeprom_string6Stringii>
    2e42:	ce 01       	movw	r24, r28
    2e44:	01 96       	adiw	r24, 0x01	; 1
    2e46:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
                clearEEPROM(2000,start);
    2e4a:	b8 01       	movw	r22, r16
    2e4c:	80 ed       	ldi	r24, 0xD0	; 208
    2e4e:	97 e0       	ldi	r25, 0x07	; 7
    2e50:	0e 94 46 02 	call	0x48c	; 0x48c <_Z11clearEEPROMii>
              }              
        Azzera();
    2e54:	0e 94 38 0a 	call	0x1470	; 0x1470 <_Z6Azzerav>
			 _delay_ms(100);
			 
			 disabilitaPulser('D');
			 disabilitaPulser('B');
			 
             String str_indirizzo  = read_eeprom_string(4,1035);
    2e58:	ce 01       	movw	r24, r28
    2e5a:	4f 96       	adiw	r24, 0x1f	; 31
    2e5c:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
      {
      }
      break;
  }
  
  nowTimer = DS3231M.now();
    2e60:	63 eb       	ldi	r22, 0xB3	; 179
    2e62:	7a e0       	ldi	r23, 0x0A	; 10
    2e64:	ce 01       	movw	r24, r28
    2e66:	01 96       	adiw	r24, 0x01	; 1
    2e68:	0e 94 13 24 	call	0x4826	; 0x4826 <_ZN13DS3231M_Class3nowEv>
    2e6c:	86 e0       	ldi	r24, 0x06	; 6
    2e6e:	fe 01       	movw	r30, r28
    2e70:	31 96       	adiw	r30, 0x01	; 1
    2e72:	a1 ea       	ldi	r26, 0xA1	; 161
    2e74:	ba e0       	ldi	r27, 0x0A	; 10
    2e76:	01 90       	ld	r0, Z+
    2e78:	0d 92       	st	X+, r0
    2e7a:	8a 95       	dec	r24
    2e7c:	e1 f7       	brne	.-8      	; 0x2e76 <loop+0x102c>
  secs = nowTimer.secondstime();  
    2e7e:	81 ea       	ldi	r24, 0xA1	; 161
    2e80:	9a e0       	ldi	r25, 0x0A	; 10
    2e82:	0e 94 64 23 	call	0x46c8	; 0x46c8 <_ZNK8DateTime11secondstimeEv>
    2e86:	60 93 af 0a 	sts	0x0AAF, r22	; 0x800aaf <secs>
    2e8a:	70 93 b0 0a 	sts	0x0AB0, r23	; 0x800ab0 <secs+0x1>
    2e8e:	80 93 b1 0a 	sts	0x0AB1, r24	; 0x800ab1 <secs+0x2>
    2e92:	90 93 b2 0a 	sts	0x0AB2, r25	; 0x800ab2 <secs+0x3>
  if (((UltimoPassaggioStato + Timer - secs) <= 1) && (stato_procedura != stato_erogazione)) Azzera();
    2e96:	00 91 ab 0a 	lds	r16, 0x0AAB	; 0x800aab <UltimoPassaggioStato>
    2e9a:	10 91 ac 0a 	lds	r17, 0x0AAC	; 0x800aac <UltimoPassaggioStato+0x1>
    2e9e:	20 91 ad 0a 	lds	r18, 0x0AAD	; 0x800aad <UltimoPassaggioStato+0x2>
    2ea2:	30 91 ae 0a 	lds	r19, 0x0AAE	; 0x800aae <UltimoPassaggioStato+0x3>
    2ea6:	c0 90 a7 0a 	lds	r12, 0x0AA7	; 0x800aa7 <Timer>
    2eaa:	d0 90 a8 0a 	lds	r13, 0x0AA8	; 0x800aa8 <Timer+0x1>
    2eae:	e0 90 a9 0a 	lds	r14, 0x0AA9	; 0x800aa9 <Timer+0x2>
    2eb2:	f0 90 aa 0a 	lds	r15, 0x0AAA	; 0x800aaa <Timer+0x3>
    2eb6:	0c 0d       	add	r16, r12
    2eb8:	1d 1d       	adc	r17, r13
    2eba:	2e 1d       	adc	r18, r14
    2ebc:	3f 1d       	adc	r19, r15
    2ebe:	68 01       	movw	r12, r16
    2ec0:	79 01       	movw	r14, r18
    2ec2:	c6 1a       	sub	r12, r22
    2ec4:	d7 0a       	sbc	r13, r23
    2ec6:	e8 0a       	sbc	r14, r24
    2ec8:	f9 0a       	sbc	r15, r25
    2eca:	d7 01       	movw	r26, r14
    2ecc:	c6 01       	movw	r24, r12
    2ece:	02 97       	sbiw	r24, 0x02	; 2
    2ed0:	a1 05       	cpc	r26, r1
    2ed2:	b1 05       	cpc	r27, r1
    2ed4:	98 f4       	brcc	.+38     	; 0x2efc <loop+0x10b2>
    2ed6:	80 91 42 0b 	lds	r24, 0x0B42	; 0x800b42 <stato_procedura>
    2eda:	90 91 43 0b 	lds	r25, 0x0B43	; 0x800b43 <stato_procedura+0x1>
    2ede:	07 97       	sbiw	r24, 0x07	; 7
    2ee0:	19 f0       	breq	.+6      	; 0x2ee8 <loop+0x109e>
    2ee2:	0e 94 38 0a 	call	0x1470	; 0x1470 <_Z6Azzerav>
    2ee6:	0a c0       	rjmp	.+20     	; 0x2efc <loop+0x10b2>
  else if (((UltimoPassaggioStato + Timer - secs) <= 1) && (stato_procedura == stato_erogazione)) avanzaStato(TmaxInviodati);
    2ee8:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <TmaxInviodati>
    2eec:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <TmaxInviodati+0x1>
    2ef0:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <TmaxInviodati+0x2>
    2ef4:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <TmaxInviodati+0x3>
    2ef8:	0e 94 b6 03 	call	0x76c	; 0x76c <_Z11avanzaStatom>
  
  wdt_reset(); // Reset watchdog Timer
    2efc:	a8 95       	wdr
}
    2efe:	aa 96       	adiw	r28, 0x2a	; 42
    2f00:	0f b6       	in	r0, 0x3f	; 63
    2f02:	f8 94       	cli
    2f04:	de bf       	out	0x3e, r29	; 62
    2f06:	0f be       	out	0x3f, r0	; 63
    2f08:	cd bf       	out	0x3d, r28	; 61
    2f0a:	df 91       	pop	r29
    2f0c:	cf 91       	pop	r28
    2f0e:	1f 91       	pop	r17
    2f10:	0f 91       	pop	r16
    2f12:	ff 90       	pop	r15
    2f14:	ef 90       	pop	r14
    2f16:	df 90       	pop	r13
    2f18:	cf 90       	pop	r12
    2f1a:	08 95       	ret
                avanzaStato(TinputTarga);
         } 
         else 
         {
                //SET_BIT(PORTC,PC4);
				SET_BIT(PORTC,CS_W5500);
    2f1c:	44 9a       	sbi	0x08, 4	; 8
                RaccoltaDati[5] = "111";                
    2f1e:	60 ed       	ldi	r22, 0xD0	; 208
    2f20:	76 e0       	ldi	r23, 0x06	; 6
    2f22:	83 e3       	ldi	r24, 0x33	; 51
    2f24:	9b e0       	ldi	r25, 0x0B	; 11
    2f26:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringaSEPKc>
                lcd.clear();
    2f2a:	87 e6       	ldi	r24, 0x67	; 103
    2f2c:	9b e0       	ldi	r25, 0x0B	; 11
    2f2e:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <_ZN3LCD5clearEv>
                righeDisplay[1] = "***** ERRORE ******";
    2f32:	64 ed       	ldi	r22, 0xD4	; 212
    2f34:	76 e0       	ldi	r23, 0x06	; 6
    2f36:	87 ef       	ldi	r24, 0xF7	; 247
    2f38:	9a e0       	ldi	r25, 0x0A	; 10
    2f3a:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringaSEPKc>
                righeDisplay[2] = "  Ate NON VALIDA ";
    2f3e:	68 ee       	ldi	r22, 0xE8	; 232
    2f40:	76 e0       	ldi	r23, 0x06	; 6
    2f42:	8d ef       	ldi	r24, 0xFD	; 253
    2f44:	9a e0       	ldi	r25, 0x0A	; 10
    2f46:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringaSEPKc>
                righeDisplay[3] = " Problema di Rete";
    2f4a:	6a ef       	ldi	r22, 0xFA	; 250
    2f4c:	76 e0       	ldi	r23, 0x06	; 6
    2f4e:	83 e0       	ldi	r24, 0x03	; 3
    2f50:	9b e0       	ldi	r25, 0x0B	; 11
    2f52:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringaSEPKc>
                displayLCD(righeDisplay,stato_procedura,10);
    2f56:	60 91 42 0b 	lds	r22, 0x0B42	; 0x800b42 <stato_procedura>
    2f5a:	70 91 43 0b 	lds	r23, 0x0B43	; 0x800b43 <stato_procedura+0x1>
    2f5e:	4a e0       	ldi	r20, 0x0A	; 10
    2f60:	50 e0       	ldi	r21, 0x00	; 0
    2f62:	81 ef       	ldi	r24, 0xF1	; 241
    2f64:	9a e0       	ldi	r25, 0x0A	; 10
    2f66:	0e 94 81 03 	call	0x702	; 0x702 <_Z10displayLCDP6Stringii>
    2f6a:	3f ef       	ldi	r19, 0xFF	; 255
    2f6c:	83 ed       	ldi	r24, 0xD3	; 211
    2f6e:	90 e3       	ldi	r25, 0x30	; 48
    2f70:	31 50       	subi	r19, 0x01	; 1
    2f72:	80 40       	sbci	r24, 0x00	; 0
    2f74:	90 40       	sbci	r25, 0x00	; 0
    2f76:	e1 f7       	brne	.-8      	; 0x2f70 <loop+0x1126>
    2f78:	00 c0       	rjmp	.+0      	; 0x2f7a <loop+0x1130>
    2f7a:	00 00       	nop
                _delay_ms(1000);
                Azzera();
    2f7c:	0e 94 38 0a 	call	0x1470	; 0x1470 <_Z6Azzerav>
    2f80:	58 c9       	rjmp	.-3408   	; 0x2232 <loop+0x3e8>

          Serial.println("TIPO CARBURANTE: " + mezzo.Carb);
          Serial.println("TARGA: " + mezzo.TARGA);

          if ((mezzo.Carb == "B") || (mezzo.Carb == "D")) {
            RaccoltaDati[1] = mezzo.TARGA;
    2f82:	6f e8       	ldi	r22, 0x8F	; 143
    2f84:	7b e0       	ldi	r23, 0x0B	; 11
    2f86:	8b e1       	ldi	r24, 0x1B	; 27
    2f88:	9b e0       	ldi	r25, 0x0B	; 11
    2f8a:	0e 94 7e 3c 	call	0x78fc	; 0x78fc <_ZN6StringaSERKS_>
            RaccoltaDati[2] = mezzo.Carb;
    2f8e:	69 e8       	ldi	r22, 0x89	; 137
    2f90:	7b e0       	ldi	r23, 0x0B	; 11
    2f92:	81 e2       	ldi	r24, 0x21	; 33
    2f94:	9b e0       	ldi	r25, 0x0B	; 11
    2f96:	0e 94 7e 3c 	call	0x78fc	; 0x78fc <_ZN6StringaSERKS_>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2f9a:	64 e2       	ldi	r22, 0x24	; 36
    2f9c:	77 e0       	ldi	r23, 0x07	; 7
    2f9e:	ce 01       	movw	r24, r28
    2fa0:	01 96       	adiw	r24, 0x01	; 1
    2fa2:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
            righeDisplay[3] = "TARGA: " +  mezzo.TARGA;
    2fa6:	6f e8       	ldi	r22, 0x8F	; 143
    2fa8:	7b e0       	ldi	r23, 0x0B	; 11
    2faa:	ce 01       	movw	r24, r28
    2fac:	01 96       	adiw	r24, 0x01	; 1
    2fae:	0e 94 fc 3d 	call	0x7bf8	; 0x7bf8 <_ZplRK15StringSumHelperRK6String>
    2fb2:	bc 01       	movw	r22, r24
    2fb4:	83 e0       	ldi	r24, 0x03	; 3
    2fb6:	9b e0       	ldi	r25, 0x0B	; 11
    2fb8:	0e 94 7e 3c 	call	0x78fc	; 0x78fc <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2fbc:	ce 01       	movw	r24, r28
    2fbe:	01 96       	adiw	r24, 0x01	; 1
    2fc0:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
    2fc4:	8f ef       	ldi	r24, 0xFF	; 255
    2fc6:	99 e6       	ldi	r25, 0x69	; 105
    2fc8:	28 e1       	ldi	r18, 0x18	; 24
    2fca:	81 50       	subi	r24, 0x01	; 1
    2fcc:	90 40       	sbci	r25, 0x00	; 0
    2fce:	20 40       	sbci	r18, 0x00	; 0
    2fd0:	e1 f7       	brne	.-8      	; 0x2fca <loop+0x1180>
    2fd2:	00 c0       	rjmp	.+0      	; 0x2fd4 <loop+0x118a>
    2fd4:	00 00       	nop
            _delay_ms(500);
            distr_selezionato = 0;
    2fd6:	10 92 3f 0b 	sts	0x0B3F, r1	; 0x800b3f <distr_selezionato>
            avanzaStato(TselDistributore);
    2fda:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <TselDistributore>
    2fde:	70 91 23 01 	lds	r23, 0x0123	; 0x800123 <TselDistributore+0x1>
    2fe2:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <TselDistributore+0x2>
    2fe6:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <TselDistributore+0x3>
    2fea:	0e 94 b6 03 	call	0x76c	; 0x76c <_Z11avanzaStatom>
    2fee:	a3 ca       	rjmp	.-2746   	; 0x2536 <loop+0x6ec>

        // Verifica scelta distributore

        if ((mezzo.Carb == "B") || (distr_selezionato == 2))
        {
          mezzo.Carb = "B";
    2ff0:	61 ec       	ldi	r22, 0xC1	; 193
    2ff2:	75 e0       	ldi	r23, 0x05	; 5
    2ff4:	89 e8       	ldi	r24, 0x89	; 137
    2ff6:	9b e0       	ldi	r25, 0x0B	; 11
    2ff8:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringaSEPKc>
          StatoAttuale = "POMPA 2";
    2ffc:	6e e2       	ldi	r22, 0x2E	; 46
    2ffe:	76 e0       	ldi	r23, 0x06	; 6
    3000:	8a e4       	ldi	r24, 0x4A	; 74
    3002:	9b e0       	ldi	r25, 0x0B	; 11
    3004:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringaSEPKc>
          RaccoltaDati[2] = mezzo.Carb;
    3008:	69 e8       	ldi	r22, 0x89	; 137
    300a:	7b e0       	ldi	r23, 0x0B	; 11
    300c:	81 e2       	ldi	r24, 0x21	; 33
    300e:	9b e0       	ldi	r25, 0x0B	; 11
    3010:	0e 94 7e 3c 	call	0x78fc	; 0x78fc <_ZN6StringaSERKS_>
          righeDisplay[1] =  "****** KM ******";
    3014:	66 e3       	ldi	r22, 0x36	; 54
    3016:	76 e0       	ldi	r23, 0x06	; 6
    3018:	87 ef       	ldi	r24, 0xF7	; 247
    301a:	9a e0       	ldi	r25, 0x0A	; 10
    301c:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringaSEPKc>
          righeDisplay[2] = "KM:";
    3020:	67 e4       	ldi	r22, 0x47	; 71
    3022:	76 e0       	ldi	r23, 0x06	; 6
    3024:	8d ef       	ldi	r24, 0xFD	; 253
    3026:	9a e0       	ldi	r25, 0x0A	; 10
    3028:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringaSEPKc>
          righeDisplay[3] = "#:Conferma";       
    302c:	6b e4       	ldi	r22, 0x4B	; 75
    302e:	76 e0       	ldi	r23, 0x06	; 6
    3030:	83 e0       	ldi	r24, 0x03	; 3
    3032:	9b e0       	ldi	r25, 0x0B	; 11
    3034:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringaSEPKc>
    3038:	3f ef       	ldi	r19, 0xFF	; 255
    303a:	81 ee       	ldi	r24, 0xE1	; 225
    303c:	94 e0       	ldi	r25, 0x04	; 4
    303e:	31 50       	subi	r19, 0x01	; 1
    3040:	80 40       	sbci	r24, 0x00	; 0
    3042:	90 40       	sbci	r25, 0x00	; 0
    3044:	e1 f7       	brne	.-8      	; 0x303e <loop+0x11f4>
    3046:	38 c0       	rjmp	.+112    	; 0x30b8 <loop+0x126e>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    3048:	6f eb       	ldi	r22, 0xBF	; 191
    304a:	75 e0       	ldi	r23, 0x05	; 5
    304c:	89 e8       	ldi	r24, 0x89	; 137
    304e:	9b e0       	ldi	r25, 0x0B	; 11
    3050:	0e 94 30 3e 	call	0x7c60	; 0x7c60 <_ZNK6String6equalsEPKc>
          _delay_ms(100);    
          avanzaStato(TinputKM);
        }
        else if ((mezzo.Carb == "D") || (distr_selezionato == 1))
    3054:	81 11       	cpse	r24, r1
    3056:	05 c0       	rjmp	.+10     	; 0x3062 <loop+0x1218>
    3058:	80 91 3f 0b 	lds	r24, 0x0B3F	; 0x800b3f <distr_selezionato>
    305c:	81 30       	cpi	r24, 0x01	; 1
    305e:	09 f0       	breq	.+2      	; 0x3062 <loop+0x1218>
    3060:	ff ce       	rjmp	.-514    	; 0x2e60 <loop+0x1016>
        {
          mezzo.Carb = "D";
    3062:	6f eb       	ldi	r22, 0xBF	; 191
    3064:	75 e0       	ldi	r23, 0x05	; 5
    3066:	89 e8       	ldi	r24, 0x89	; 137
    3068:	9b e0       	ldi	r25, 0x0B	; 11
    306a:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringaSEPKc>
          StatoAttuale = "POMPA 1";
    306e:	6f e1       	ldi	r22, 0x1F	; 31
    3070:	76 e0       	ldi	r23, 0x06	; 6
    3072:	8a e4       	ldi	r24, 0x4A	; 74
    3074:	9b e0       	ldi	r25, 0x0B	; 11
    3076:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringaSEPKc>
          RaccoltaDati[2] = mezzo.Carb;
    307a:	69 e8       	ldi	r22, 0x89	; 137
    307c:	7b e0       	ldi	r23, 0x0B	; 11
    307e:	81 e2       	ldi	r24, 0x21	; 33
    3080:	9b e0       	ldi	r25, 0x0B	; 11
    3082:	0e 94 7e 3c 	call	0x78fc	; 0x78fc <_ZN6StringaSERKS_>
          righeDisplay[1] =  "****** KM ******";
    3086:	66 e3       	ldi	r22, 0x36	; 54
    3088:	76 e0       	ldi	r23, 0x06	; 6
    308a:	87 ef       	ldi	r24, 0xF7	; 247
    308c:	9a e0       	ldi	r25, 0x0A	; 10
    308e:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringaSEPKc>
          righeDisplay[2] = "KM:";
    3092:	67 e4       	ldi	r22, 0x47	; 71
    3094:	76 e0       	ldi	r23, 0x06	; 6
    3096:	8d ef       	ldi	r24, 0xFD	; 253
    3098:	9a e0       	ldi	r25, 0x0A	; 10
    309a:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringaSEPKc>
          righeDisplay[3] = "#:Conferma";      
    309e:	6b e4       	ldi	r22, 0x4B	; 75
    30a0:	76 e0       	ldi	r23, 0x06	; 6
    30a2:	83 e0       	ldi	r24, 0x03	; 3
    30a4:	9b e0       	ldi	r25, 0x0B	; 11
    30a6:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringaSEPKc>
    30aa:	2f ef       	ldi	r18, 0xFF	; 255
    30ac:	31 ee       	ldi	r19, 0xE1	; 225
    30ae:	84 e0       	ldi	r24, 0x04	; 4
    30b0:	21 50       	subi	r18, 0x01	; 1
    30b2:	30 40       	sbci	r19, 0x00	; 0
    30b4:	80 40       	sbci	r24, 0x00	; 0
    30b6:	e1 f7       	brne	.-8      	; 0x30b0 <loop+0x1266>
    30b8:	00 c0       	rjmp	.+0      	; 0x30ba <loop+0x1270>
    30ba:	00 00       	nop
          _delay_ms(100);     
         avanzaStato(TinputKM);
    30bc:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <TinputKM>
    30c0:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <TinputKM+0x1>
    30c4:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <TinputKM+0x2>
    30c8:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <TinputKM+0x3>
    30cc:	df c0       	rjmp	.+446    	; 0x328c <loop+0x1442>
		lcd.print((char)1);  // STAMPA LA CLESSIDRA
		lcd.print("Tempo: " + String((UltimoPassaggioStato + Timer - secs - 1)) + " sec ");
		 
		if (testbit(PINA,1) && (mezzo.Carb == "D"))
		{
			cli(); // GLOBAL INTERRUPT DISABLE
    30ce:	f8 94       	cli
            righeDisplay[1] = "LITRI : 0.00";
    30d0:	66 ea       	ldi	r22, 0xA6	; 166
    30d2:	78 e0       	ldi	r23, 0x08	; 8
    30d4:	87 ef       	ldi	r24, 0xF7	; 247
    30d6:	9a e0       	ldi	r25, 0x0A	; 10
    30d8:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringaSEPKc>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    30dc:	68 ee       	ldi	r22, 0xE8	; 232
    30de:	75 e0       	ldi	r23, 0x05	; 5
    30e0:	ce 01       	movw	r24, r28
    30e2:	01 96       	adiw	r24, 0x01	; 1
    30e4:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
			righeDisplay[2] = "TARGA:" + mezzo.TARGA;
    30e8:	6f e8       	ldi	r22, 0x8F	; 143
    30ea:	7b e0       	ldi	r23, 0x0B	; 11
    30ec:	ce 01       	movw	r24, r28
    30ee:	01 96       	adiw	r24, 0x01	; 1
    30f0:	0e 94 fc 3d 	call	0x7bf8	; 0x7bf8 <_ZplRK15StringSumHelperRK6String>
    30f4:	bc 01       	movw	r22, r24
    30f6:	8d ef       	ldi	r24, 0xFD	; 253
    30f8:	9a e0       	ldi	r25, 0x0A	; 10
    30fa:	0e 94 7e 3c 	call	0x78fc	; 0x78fc <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    30fe:	ce 01       	movw	r24, r28
    3100:	01 96       	adiw	r24, 0x01	; 1
    3102:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    3106:	6e e3       	ldi	r22, 0x3E	; 62
    3108:	77 e0       	ldi	r23, 0x07	; 7
    310a:	ce 01       	movw	r24, r28
    310c:	01 96       	adiw	r24, 0x01	; 1
    310e:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
 		    // righeDisplay[2] = "imp :" + String(impulsi);
 			righeDisplay[3] = "Erogazione: " + StatoAttuale;
    3112:	6a e4       	ldi	r22, 0x4A	; 74
    3114:	7b e0       	ldi	r23, 0x0B	; 11
    3116:	ce 01       	movw	r24, r28
    3118:	01 96       	adiw	r24, 0x01	; 1
    311a:	0e 94 fc 3d 	call	0x7bf8	; 0x7bf8 <_ZplRK15StringSumHelperRK6String>
    311e:	bc 01       	movw	r22, r24
    3120:	83 e0       	ldi	r24, 0x03	; 3
    3122:	9b e0       	ldi	r25, 0x0B	; 11
    3124:	0e 94 7e 3c 	call	0x78fc	; 0x78fc <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    3128:	ce 01       	movw	r24, r28
    312a:	01 96       	adiw	r24, 0x01	; 1
    312c:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
			abilitaPulser('D');
    3130:	84 e4       	ldi	r24, 0x44	; 68
    3132:	0e 94 62 09 	call	0x12c4	; 0x12c4 <_Z13abilitaPulserc>
			impulsi = 0;
    3136:	10 92 41 0b 	sts	0x0B41, r1	; 0x800b41 <impulsi+0x1>
    313a:	10 92 40 0b 	sts	0x0B40, r1	; 0x800b40 <impulsi>
			avanzaStato(TmaxErogazione); 
    313e:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <TmaxErogazione>
    3142:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <TmaxErogazione+0x1>
    3146:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <TmaxErogazione+0x2>
    314a:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <TmaxErogazione+0x3>
    314e:	0e 94 b6 03 	call	0x76c	; 0x76c <_Z11avanzaStatom>
    3152:	40 cb       	rjmp	.-2432   	; 0x27d4 <loop+0x98a>
		
		// CONTATTO PISTOLA BENZINA

		if  (testbit(PINB,1) && (mezzo.Carb == "B"))
		{
			 cli(); // GLOBAL INTERRUPT DISABLE
    3154:	f8 94       	cli
             righeDisplay[1] = "LITRI : 0.00";
    3156:	66 ea       	ldi	r22, 0xA6	; 166
    3158:	78 e0       	ldi	r23, 0x08	; 8
    315a:	87 ef       	ldi	r24, 0xF7	; 247
    315c:	9a e0       	ldi	r25, 0x0A	; 10
    315e:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringaSEPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    3162:	68 ee       	ldi	r22, 0xE8	; 232
    3164:	75 e0       	ldi	r23, 0x05	; 5
    3166:	ce 01       	movw	r24, r28
    3168:	01 96       	adiw	r24, 0x01	; 1
    316a:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
			 righeDisplay[2] = "TARGA:" + mezzo.TARGA;
    316e:	6f e8       	ldi	r22, 0x8F	; 143
    3170:	7b e0       	ldi	r23, 0x0B	; 11
    3172:	ce 01       	movw	r24, r28
    3174:	01 96       	adiw	r24, 0x01	; 1
    3176:	0e 94 fc 3d 	call	0x7bf8	; 0x7bf8 <_ZplRK15StringSumHelperRK6String>
    317a:	bc 01       	movw	r22, r24
    317c:	8d ef       	ldi	r24, 0xFD	; 253
    317e:	9a e0       	ldi	r25, 0x0A	; 10
    3180:	0e 94 7e 3c 	call	0x78fc	; 0x78fc <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    3184:	ce 01       	movw	r24, r28
    3186:	01 96       	adiw	r24, 0x01	; 1
    3188:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    318c:	6e e3       	ldi	r22, 0x3E	; 62
    318e:	77 e0       	ldi	r23, 0x07	; 7
    3190:	ce 01       	movw	r24, r28
    3192:	01 96       	adiw	r24, 0x01	; 1
    3194:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
             // righeDisplay[2] = "imp :" + String(impulsi);
             righeDisplay[3] = "Erogazione: " + StatoAttuale;
    3198:	6a e4       	ldi	r22, 0x4A	; 74
    319a:	7b e0       	ldi	r23, 0x0B	; 11
    319c:	ce 01       	movw	r24, r28
    319e:	01 96       	adiw	r24, 0x01	; 1
    31a0:	0e 94 fc 3d 	call	0x7bf8	; 0x7bf8 <_ZplRK15StringSumHelperRK6String>
    31a4:	bc 01       	movw	r22, r24
    31a6:	83 e0       	ldi	r24, 0x03	; 3
    31a8:	9b e0       	ldi	r25, 0x0B	; 11
    31aa:	0e 94 7e 3c 	call	0x78fc	; 0x78fc <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    31ae:	ce 01       	movw	r24, r28
    31b0:	01 96       	adiw	r24, 0x01	; 1
    31b2:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
			 abilitaPulser('B');
    31b6:	82 e4       	ldi	r24, 0x42	; 66
    31b8:	0e 94 62 09 	call	0x12c4	; 0x12c4 <_Z13abilitaPulserc>
			 impulsi = 0;
    31bc:	10 92 41 0b 	sts	0x0B41, r1	; 0x800b41 <impulsi+0x1>
    31c0:	10 92 40 0b 	sts	0x0B40, r1	; 0x800b40 <impulsi>
             avanzaStato(TmaxErogazione);
    31c4:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <TmaxErogazione>
    31c8:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <TmaxErogazione+0x1>
    31cc:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <TmaxErogazione+0x2>
    31d0:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <TmaxErogazione+0x3>
    31d4:	5b c0       	rjmp	.+182    	; 0x328c <loop+0x1442>

        // CONTATTO PISTOLA DIESEL

 		if (!testbit(PINA,1) && (mezzo.Carb == "D"))
        {
          RaccoltaDati[3] = String(lt);
    31d6:	22 e0       	ldi	r18, 0x02	; 2
    31d8:	b7 01       	movw	r22, r14
    31da:	a6 01       	movw	r20, r12
    31dc:	ce 01       	movw	r24, r28
    31de:	01 96       	adiw	r24, 0x01	; 1
    31e0:	0e 94 7c 3d 	call	0x7af8	; 0x7af8 <_ZN6StringC1Edh>
    31e4:	be 01       	movw	r22, r28
    31e6:	6f 5f       	subi	r22, 0xFF	; 255
    31e8:	7f 4f       	sbci	r23, 0xFF	; 255
    31ea:	87 e2       	ldi	r24, 0x27	; 39
    31ec:	9b e0       	ldi	r25, 0x0B	; 11
    31ee:	0e 94 9b 3c 	call	0x7936	; 0x7936 <_ZN6StringaSEOS_>
    31f2:	ce 01       	movw	r24, r28
    31f4:	01 96       	adiw	r24, 0x01	; 1
    31f6:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
          StatoAttuale = "STOP EROGAZIONE";
    31fa:	63 eb       	ldi	r22, 0xB3	; 179
    31fc:	78 e0       	ldi	r23, 0x08	; 8
    31fe:	8a e4       	ldi	r24, 0x4A	; 74
    3200:	9b e0       	ldi	r25, 0x0B	; 11
    3202:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringaSEPKc>
          Rele_Abilitazione2(1, 7); //  apri relè
    3206:	67 e0       	ldi	r22, 0x07	; 7
    3208:	70 e0       	ldi	r23, 0x00	; 0
    320a:	81 e0       	ldi	r24, 0x01	; 1
    320c:	90 e0       	ldi	r25, 0x00	; 0
    320e:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <_Z18Rele_Abilitazione2ii>
          Rele_Abilitazione1(1, 7); //  apri relè
    3212:	67 e0       	ldi	r22, 0x07	; 7
    3214:	70 e0       	ldi	r23, 0x00	; 0
    3216:	81 e0       	ldi	r24, 0x01	; 1
    3218:	90 e0       	ldi	r25, 0x00	; 0
    321a:	0e 94 b9 09 	call	0x1372	; 0x1372 <_Z18Rele_Abilitazione1ii>
          //TOGGLE_BIT(PORTA, 1);
          avanzaStato(TmaxInviodati);
    321e:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <TmaxInviodati>
    3222:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <TmaxInviodati+0x1>
    3226:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <TmaxInviodati+0x2>
    322a:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <TmaxInviodati+0x3>
    322e:	0e 94 b6 03 	call	0x76c	; 0x76c <_Z11avanzaStatom>
    3232:	ae cb       	rjmp	.-2212   	; 0x2990 <loop+0xb46>

        // CONTATTO PISTOLA BENZINA

		if (!testbit(PINB,1) && (mezzo.Carb == "B"))
        {
          RaccoltaDati[3] = String(lt);
    3234:	22 e0       	ldi	r18, 0x02	; 2
    3236:	b7 01       	movw	r22, r14
    3238:	a6 01       	movw	r20, r12
    323a:	ce 01       	movw	r24, r28
    323c:	01 96       	adiw	r24, 0x01	; 1
    323e:	0e 94 7c 3d 	call	0x7af8	; 0x7af8 <_ZN6StringC1Edh>
    3242:	be 01       	movw	r22, r28
    3244:	6f 5f       	subi	r22, 0xFF	; 255
    3246:	7f 4f       	sbci	r23, 0xFF	; 255
    3248:	87 e2       	ldi	r24, 0x27	; 39
    324a:	9b e0       	ldi	r25, 0x0B	; 11
    324c:	0e 94 9b 3c 	call	0x7936	; 0x7936 <_ZN6StringaSEOS_>
    3250:	ce 01       	movw	r24, r28
    3252:	01 96       	adiw	r24, 0x01	; 1
    3254:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
          StatoAttuale = "STOP EROGAZIONE";
    3258:	63 eb       	ldi	r22, 0xB3	; 179
    325a:	78 e0       	ldi	r23, 0x08	; 8
    325c:	8a e4       	ldi	r24, 0x4A	; 74
    325e:	9b e0       	ldi	r25, 0x0B	; 11
    3260:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringaSEPKc>
          Rele_Abilitazione2(1, 7); //  apri relè
    3264:	67 e0       	ldi	r22, 0x07	; 7
    3266:	70 e0       	ldi	r23, 0x00	; 0
    3268:	81 e0       	ldi	r24, 0x01	; 1
    326a:	90 e0       	ldi	r25, 0x00	; 0
    326c:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <_Z18Rele_Abilitazione2ii>
          Rele_Abilitazione1(1, 7); //  apri relè
    3270:	67 e0       	ldi	r22, 0x07	; 7
    3272:	70 e0       	ldi	r23, 0x00	; 0
    3274:	81 e0       	ldi	r24, 0x01	; 1
    3276:	90 e0       	ldi	r25, 0x00	; 0
    3278:	0e 94 b9 09 	call	0x1372	; 0x1372 <_Z18Rele_Abilitazione1ii>
          avanzaStato(TmaxInviodati);
    327c:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <TmaxInviodati>
    3280:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <TmaxInviodati+0x1>
    3284:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <TmaxInviodati+0x2>
    3288:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <TmaxInviodati+0x3>
    328c:	0e 94 b6 03 	call	0x76c	; 0x76c <_Z11avanzaStatom>
    3290:	e7 cd       	rjmp	.-1074   	; 0x2e60 <loop+0x1016>

00003292 <__vector_4>:
  73 litri al minuto
  73/60 = 1,22 lt/sec
  1,22*100 = 122 Hz
***********************************************************************/

ISR(PCINT0_vect) {
    3292:	1f 92       	push	r1
    3294:	0f 92       	push	r0
    3296:	0f b6       	in	r0, 0x3f	; 63
    3298:	0f 92       	push	r0
    329a:	11 24       	eor	r1, r1
    329c:	0b b6       	in	r0, 0x3b	; 59
    329e:	0f 92       	push	r0
    32a0:	2f 93       	push	r18
    32a2:	3f 93       	push	r19
    32a4:	4f 93       	push	r20
    32a6:	5f 93       	push	r21
    32a8:	6f 93       	push	r22
    32aa:	7f 93       	push	r23
    32ac:	8f 93       	push	r24
    32ae:	9f 93       	push	r25
    32b0:	af 93       	push	r26
    32b2:	bf 93       	push	r27
    32b4:	ef 93       	push	r30
    32b6:	ff 93       	push	r31
  if ((stato_procedura == stato_erogazione) && (impulsi < MaxErogabile))
    32b8:	80 91 42 0b 	lds	r24, 0x0B42	; 0x800b42 <stato_procedura>
    32bc:	90 91 43 0b 	lds	r25, 0x0B43	; 0x800b43 <stato_procedura+0x1>
    32c0:	07 97       	sbiw	r24, 0x07	; 7
    32c2:	99 f5       	brne	.+102    	; 0x332a <__vector_4+0x98>
    32c4:	20 91 40 0b 	lds	r18, 0x0B40	; 0x800b40 <impulsi>
    32c8:	30 91 41 0b 	lds	r19, 0x0B41	; 0x800b41 <impulsi+0x1>
    32cc:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <MaxErogabile>
    32d0:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <MaxErogabile+0x1>
    32d4:	28 17       	cp	r18, r24
    32d6:	39 07       	cpc	r19, r25
    32d8:	40 f5       	brcc	.+80     	; 0x332a <__vector_4+0x98>
  {
	  
	  if ((PINA & _BV(PA5)) && (mezzo.Carb == "D")) {
    32da:	05 9b       	sbis	0x00, 5	; 0
    32dc:	08 c0       	rjmp	.+16     	; 0x32ee <__vector_4+0x5c>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    32de:	6f eb       	ldi	r22, 0xBF	; 191
    32e0:	75 e0       	ldi	r23, 0x05	; 5
    32e2:	89 e8       	ldi	r24, 0x89	; 137
    32e4:	9b e0       	ldi	r25, 0x0B	; 11
    32e6:	0e 94 30 3e 	call	0x7c60	; 0x7c60 <_ZNK6String6equalsEPKc>
    32ea:	81 11       	cpse	r24, r1
    32ec:	14 c0       	rjmp	.+40     	; 0x3316 <__vector_4+0x84>
		impulsi++;
	  }
	  
      if ((PINA & _BV(PA6)) && (mezzo.Carb == "B")) {
    32ee:	06 9b       	sbis	0x00, 6	; 0
    32f0:	1c c0       	rjmp	.+56     	; 0x332a <__vector_4+0x98>
    32f2:	61 ec       	ldi	r22, 0xC1	; 193
    32f4:	75 e0       	ldi	r23, 0x05	; 5
    32f6:	89 e8       	ldi	r24, 0x89	; 137
    32f8:	9b e0       	ldi	r25, 0x0B	; 11
    32fa:	0e 94 30 3e 	call	0x7c60	; 0x7c60 <_ZNK6String6equalsEPKc>
    32fe:	88 23       	and	r24, r24
    3300:	a1 f0       	breq	.+40     	; 0x332a <__vector_4+0x98>
		impulsi++;
    3302:	80 91 40 0b 	lds	r24, 0x0B40	; 0x800b40 <impulsi>
    3306:	90 91 41 0b 	lds	r25, 0x0B41	; 0x800b41 <impulsi+0x1>
    330a:	01 96       	adiw	r24, 0x01	; 1
    330c:	90 93 41 0b 	sts	0x0B41, r25	; 0x800b41 <impulsi+0x1>
    3310:	80 93 40 0b 	sts	0x0B40, r24	; 0x800b40 <impulsi>
    3314:	0a c0       	rjmp	.+20     	; 0x332a <__vector_4+0x98>
ISR(PCINT0_vect) {
  if ((stato_procedura == stato_erogazione) && (impulsi < MaxErogabile))
  {
	  
	  if ((PINA & _BV(PA5)) && (mezzo.Carb == "D")) {
		impulsi++;
    3316:	80 91 40 0b 	lds	r24, 0x0B40	; 0x800b40 <impulsi>
    331a:	90 91 41 0b 	lds	r25, 0x0B41	; 0x800b41 <impulsi+0x1>
    331e:	01 96       	adiw	r24, 0x01	; 1
    3320:	90 93 41 0b 	sts	0x0B41, r25	; 0x800b41 <impulsi+0x1>
    3324:	80 93 40 0b 	sts	0x0B40, r24	; 0x800b40 <impulsi>
    3328:	e2 cf       	rjmp	.-60     	; 0x32ee <__vector_4+0x5c>
	  
      if ((PINA & _BV(PA6)) && (mezzo.Carb == "B")) {
		impulsi++;
	  }
 }
}
    332a:	ff 91       	pop	r31
    332c:	ef 91       	pop	r30
    332e:	bf 91       	pop	r27
    3330:	af 91       	pop	r26
    3332:	9f 91       	pop	r25
    3334:	8f 91       	pop	r24
    3336:	7f 91       	pop	r23
    3338:	6f 91       	pop	r22
    333a:	5f 91       	pop	r21
    333c:	4f 91       	pop	r20
    333e:	3f 91       	pop	r19
    3340:	2f 91       	pop	r18
    3342:	0f 90       	pop	r0
    3344:	0b be       	out	0x3b, r0	; 59
    3346:	0f 90       	pop	r0
    3348:	0f be       	out	0x3f, r0	; 63
    334a:	0f 90       	pop	r0
    334c:	1f 90       	pop	r1
    334e:	18 95       	reti

00003350 <__vector_7>:
/***********************************************************************/

// interrupt per pulsanti abilitazione diesele benzina

ISR(PCINT3_vect) {
    3350:	1f 92       	push	r1
    3352:	0f 92       	push	r0
    3354:	0f b6       	in	r0, 0x3f	; 63
    3356:	0f 92       	push	r0
    3358:	11 24       	eor	r1, r1
    335a:	8f 93       	push	r24
    335c:	9f 93       	push	r25

  if (stato_procedura == stato_distributore)
    335e:	80 91 42 0b 	lds	r24, 0x0B42	; 0x800b42 <stato_procedura>
    3362:	90 91 43 0b 	lds	r25, 0x0B43	; 0x800b43 <stato_procedura+0x1>
    3366:	04 97       	sbiw	r24, 0x04	; 4
    3368:	09 f0       	breq	.+2      	; 0x336c <__vector_7+0x1c>
    336a:	6a c0       	rjmp	.+212    	; 0x3440 <__vector_7+0xf0>
  {
    if (PIND & _BV(PD6))
    336c:	4e 9b       	sbis	0x09, 6	; 9
    336e:	1c c0       	rjmp	.+56     	; 0x33a8 <__vector_7+0x58>
    {
      intConsecutivePresses++;  // increment counter for number of presses           
    3370:	80 91 9d 0b 	lds	r24, 0x0B9D	; 0x800b9d <intConsecutivePresses>
    3374:	90 91 9e 0b 	lds	r25, 0x0B9E	; 0x800b9e <intConsecutivePresses+0x1>
    3378:	01 96       	adiw	r24, 0x01	; 1
    337a:	90 93 9e 0b 	sts	0x0B9E, r25	; 0x800b9e <intConsecutivePresses+0x1>
    337e:	80 93 9d 0b 	sts	0x0B9D, r24	; 0x800b9d <intConsecutivePresses>
      if (intConsecutivePresses >= NUM_OF_CONSECUTIVE_PRESSES)
    3382:	80 91 9d 0b 	lds	r24, 0x0B9D	; 0x800b9d <intConsecutivePresses>
    3386:	90 91 9e 0b 	lds	r25, 0x0B9E	; 0x800b9e <intConsecutivePresses+0x1>
    338a:	18 16       	cp	r1, r24
    338c:	19 06       	cpc	r1, r25
    338e:	1c f5       	brge	.+70     	; 0x33d6 <__vector_7+0x86>
      { // if enough presses to constitute a press
        intConsecutivePresses = 0;                    // and reset press counts
    3390:	10 92 9e 0b 	sts	0x0B9E, r1	; 0x800b9e <intConsecutivePresses+0x1>
    3394:	10 92 9d 0b 	sts	0x0B9D, r1	; 0x800b9d <intConsecutivePresses>
        intConsecutiveNonPresses = 0;        
    3398:	10 92 9c 0b 	sts	0x0B9C, r1	; 0x800b9c <intConsecutiveNonPresses+0x1>
    339c:	10 92 9b 0b 	sts	0x0B9B, r1	; 0x800b9b <intConsecutiveNonPresses>
        distr_selezionato = 2;
    33a0:	82 e0       	ldi	r24, 0x02	; 2
    33a2:	80 93 3f 0b 	sts	0x0B3F, r24	; 0x800b3f <distr_selezionato>
    33a6:	17 c0       	rjmp	.+46     	; 0x33d6 <__vector_7+0x86>
      }
    }
    else  {           // else if button is not pressed (logic low)
      intConsecutiveNonPresses++;
    33a8:	80 91 9b 0b 	lds	r24, 0x0B9B	; 0x800b9b <intConsecutiveNonPresses>
    33ac:	90 91 9c 0b 	lds	r25, 0x0B9C	; 0x800b9c <intConsecutiveNonPresses+0x1>
    33b0:	01 96       	adiw	r24, 0x01	; 1
    33b2:	90 93 9c 0b 	sts	0x0B9C, r25	; 0x800b9c <intConsecutiveNonPresses+0x1>
    33b6:	80 93 9b 0b 	sts	0x0B9B, r24	; 0x800b9b <intConsecutiveNonPresses>
      if (intConsecutiveNonPresses >= NUM_OF_CONSECUTIVE_NON_PRESSES) {
    33ba:	80 91 9b 0b 	lds	r24, 0x0B9B	; 0x800b9b <intConsecutiveNonPresses>
    33be:	90 91 9c 0b 	lds	r25, 0x0B9C	; 0x800b9c <intConsecutiveNonPresses+0x1>
    33c2:	02 97       	sbiw	r24, 0x02	; 2
    33c4:	44 f0       	brlt	.+16     	; 0x33d6 <__vector_7+0x86>
        intConsecutivePresses = 0;                      // reset press counts
    33c6:	10 92 9e 0b 	sts	0x0B9E, r1	; 0x800b9e <intConsecutivePresses+0x1>
    33ca:	10 92 9d 0b 	sts	0x0B9D, r1	; 0x800b9d <intConsecutivePresses>
        intConsecutiveNonPresses = 0;
    33ce:	10 92 9c 0b 	sts	0x0B9C, r1	; 0x800b9c <intConsecutiveNonPresses+0x1>
    33d2:	10 92 9b 0b 	sts	0x0B9B, r1	; 0x800b9b <intConsecutiveNonPresses>
      }
    }

    if (PIND & _BV(PD7))
    33d6:	4f 9b       	sbis	0x09, 7	; 9
    33d8:	1c c0       	rjmp	.+56     	; 0x3412 <__vector_7+0xc2>
    {      
      intConsecutivePresses++;  // increment counter for number of presses
    33da:	80 91 9d 0b 	lds	r24, 0x0B9D	; 0x800b9d <intConsecutivePresses>
    33de:	90 91 9e 0b 	lds	r25, 0x0B9E	; 0x800b9e <intConsecutivePresses+0x1>
    33e2:	01 96       	adiw	r24, 0x01	; 1
    33e4:	90 93 9e 0b 	sts	0x0B9E, r25	; 0x800b9e <intConsecutivePresses+0x1>
    33e8:	80 93 9d 0b 	sts	0x0B9D, r24	; 0x800b9d <intConsecutivePresses>
      if (intConsecutivePresses >= NUM_OF_CONSECUTIVE_PRESSES)
    33ec:	80 91 9d 0b 	lds	r24, 0x0B9D	; 0x800b9d <intConsecutivePresses>
    33f0:	90 91 9e 0b 	lds	r25, 0x0B9E	; 0x800b9e <intConsecutivePresses+0x1>
    33f4:	18 16       	cp	r1, r24
    33f6:	19 06       	cpc	r1, r25
    33f8:	1c f5       	brge	.+70     	; 0x3440 <__vector_7+0xf0>
      { // if enough presses to constitute a press
        intConsecutivePresses = 0;                    // and reset press counts
    33fa:	10 92 9e 0b 	sts	0x0B9E, r1	; 0x800b9e <intConsecutivePresses+0x1>
    33fe:	10 92 9d 0b 	sts	0x0B9D, r1	; 0x800b9d <intConsecutivePresses>
        intConsecutiveNonPresses = 0;        
    3402:	10 92 9c 0b 	sts	0x0B9C, r1	; 0x800b9c <intConsecutiveNonPresses+0x1>
    3406:	10 92 9b 0b 	sts	0x0B9B, r1	; 0x800b9b <intConsecutiveNonPresses>
        distr_selezionato = 1;
    340a:	81 e0       	ldi	r24, 0x01	; 1
    340c:	80 93 3f 0b 	sts	0x0B3F, r24	; 0x800b3f <distr_selezionato>
    3410:	17 c0       	rjmp	.+46     	; 0x3440 <__vector_7+0xf0>
      }
    }
    else  {            // else if button is not pressed (logic low)
      intConsecutiveNonPresses++;
    3412:	80 91 9b 0b 	lds	r24, 0x0B9B	; 0x800b9b <intConsecutiveNonPresses>
    3416:	90 91 9c 0b 	lds	r25, 0x0B9C	; 0x800b9c <intConsecutiveNonPresses+0x1>
    341a:	01 96       	adiw	r24, 0x01	; 1
    341c:	90 93 9c 0b 	sts	0x0B9C, r25	; 0x800b9c <intConsecutiveNonPresses+0x1>
    3420:	80 93 9b 0b 	sts	0x0B9B, r24	; 0x800b9b <intConsecutiveNonPresses>
      if (intConsecutiveNonPresses >= NUM_OF_CONSECUTIVE_NON_PRESSES) {
    3424:	80 91 9b 0b 	lds	r24, 0x0B9B	; 0x800b9b <intConsecutiveNonPresses>
    3428:	90 91 9c 0b 	lds	r25, 0x0B9C	; 0x800b9c <intConsecutiveNonPresses+0x1>
    342c:	02 97       	sbiw	r24, 0x02	; 2
    342e:	44 f0       	brlt	.+16     	; 0x3440 <__vector_7+0xf0>
        intConsecutivePresses = 0;                     // reset press counts
    3430:	10 92 9e 0b 	sts	0x0B9E, r1	; 0x800b9e <intConsecutivePresses+0x1>
    3434:	10 92 9d 0b 	sts	0x0B9D, r1	; 0x800b9d <intConsecutivePresses>
        intConsecutiveNonPresses = 0;
    3438:	10 92 9c 0b 	sts	0x0B9C, r1	; 0x800b9c <intConsecutiveNonPresses+0x1>
    343c:	10 92 9b 0b 	sts	0x0B9B, r1	; 0x800b9b <intConsecutiveNonPresses>
      }
    }
  }
    3440:	9f 91       	pop	r25
    3442:	8f 91       	pop	r24
    3444:	0f 90       	pop	r0
    3446:	0f be       	out	0x3f, r0	; 63
    3448:	0f 90       	pop	r0
    344a:	1f 90       	pop	r1
    344c:	18 95       	reti

0000344e <_GLOBAL__sub_I_ParametriCCEC>:
    344e:	8f 92       	push	r8
    3450:	af 92       	push	r10
    3452:	cf 92       	push	r12
    3454:	ef 92       	push	r14
    3456:	0f 93       	push	r16
    3458:	cf 93       	push	r28
    345a:	df 93       	push	r29
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    345c:	00 e0       	ldi	r16, 0x00	; 0
    345e:	20 e0       	ldi	r18, 0x00	; 0
    3460:	40 e0       	ldi	r20, 0x00	; 0
    3462:	60 e0       	ldi	r22, 0x00	; 0
    3464:	89 ed       	ldi	r24, 0xD9	; 217
    3466:	9b e0       	ldi	r25, 0x0B	; 11
    3468:	0e 94 ce 38 	call	0x719c	; 0x719c <_ZN9IPAddressC1Ehhhh>
ParametriCCEC_TypeDef Parametri[numero_parametri] =
{ {"DNS NAME SERVER\0", "ccec.sa.dipvvf.it\0", 1000},
  {"IP CCEC\0", "192.168.0.50\0", 1020},
  {"Ultima Erogazione Salvata\0", "2000\0", 1035},
  {"Codice Sede\0", "SA1001\0", 1040}
    346c:	63 e7       	ldi	r22, 0x73	; 115
    346e:	71 e0       	ldi	r23, 0x01	; 1
    3470:	8f e9       	ldi	r24, 0x9F	; 159
    3472:	9b e0       	ldi	r25, 0x0B	; 11
    3474:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
    3478:	64 e8       	ldi	r22, 0x84	; 132
    347a:	71 e0       	ldi	r23, 0x01	; 1
    347c:	85 ea       	ldi	r24, 0xA5	; 165
    347e:	9b e0       	ldi	r25, 0x0B	; 11
    3480:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
    3484:	cf e9       	ldi	r28, 0x9F	; 159
    3486:	db e0       	ldi	r29, 0x0B	; 11
    3488:	88 ee       	ldi	r24, 0xE8	; 232
    348a:	93 e0       	ldi	r25, 0x03	; 3
    348c:	9d 87       	std	Y+13, r25	; 0x0d
    348e:	8c 87       	std	Y+12, r24	; 0x0c
    3490:	67 e9       	ldi	r22, 0x97	; 151
    3492:	71 e0       	ldi	r23, 0x01	; 1
    3494:	8d ea       	ldi	r24, 0xAD	; 173
    3496:	9b e0       	ldi	r25, 0x0B	; 11
    3498:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
    349c:	60 ea       	ldi	r22, 0xA0	; 160
    349e:	71 e0       	ldi	r23, 0x01	; 1
    34a0:	83 eb       	ldi	r24, 0xB3	; 179
    34a2:	9b e0       	ldi	r25, 0x0B	; 11
    34a4:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
    34a8:	8c ef       	ldi	r24, 0xFC	; 252
    34aa:	93 e0       	ldi	r25, 0x03	; 3
    34ac:	9b 8f       	std	Y+27, r25	; 0x1b
    34ae:	8a 8f       	std	Y+26, r24	; 0x1a
    34b0:	6e ea       	ldi	r22, 0xAE	; 174
    34b2:	71 e0       	ldi	r23, 0x01	; 1
    34b4:	8b eb       	ldi	r24, 0xBB	; 187
    34b6:	9b e0       	ldi	r25, 0x0B	; 11
    34b8:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
    34bc:	69 ec       	ldi	r22, 0xC9	; 201
    34be:	71 e0       	ldi	r23, 0x01	; 1
    34c0:	81 ec       	ldi	r24, 0xC1	; 193
    34c2:	9b e0       	ldi	r25, 0x0B	; 11
    34c4:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
    34c8:	8b e0       	ldi	r24, 0x0B	; 11
    34ca:	94 e0       	ldi	r25, 0x04	; 4
    34cc:	99 a7       	std	Y+41, r25	; 0x29
    34ce:	88 a7       	std	Y+40, r24	; 0x28
    34d0:	6f ec       	ldi	r22, 0xCF	; 207
    34d2:	71 e0       	ldi	r23, 0x01	; 1
    34d4:	89 ec       	ldi	r24, 0xC9	; 201
    34d6:	9b e0       	ldi	r25, 0x0B	; 11
    34d8:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
    34dc:	6c ed       	ldi	r22, 0xDC	; 220
    34de:	71 e0       	ldi	r23, 0x01	; 1
    34e0:	8f ec       	ldi	r24, 0xCF	; 207
    34e2:	9b e0       	ldi	r25, 0x0B	; 11
    34e4:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
    34e8:	80 e1       	ldi	r24, 0x10	; 16
    34ea:	94 e0       	ldi	r25, 0x04	; 4
    34ec:	9f ab       	std	Y+55, r25	; 0x37
    34ee:	8e ab       	std	Y+54, r24	; 0x36

volatile int intConsecutivePresses = 0;
volatile int intConsecutiveNonPresses = 0;
const uint8_t I2C_PCA9534_ADDR = 0x20;

struct mezzoType {
    34f0:	6f ee       	ldi	r22, 0xEF	; 239
    34f2:	71 e0       	ldi	r23, 0x01	; 1
    34f4:	89 e8       	ldi	r24, 0x89	; 137
    34f6:	9b e0       	ldi	r25, 0x0B	; 11
    34f8:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
    34fc:	6f ee       	ldi	r22, 0xEF	; 239
    34fe:	71 e0       	ldi	r23, 0x01	; 1
    3500:	8f e8       	ldi	r24, 0x8F	; 143
    3502:	9b e0       	ldi	r25, 0x0B	; 11
    3504:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
    3508:	6f ee       	ldi	r22, 0xEF	; 239
    350a:	71 e0       	ldi	r23, 0x01	; 1
    350c:	85 e9       	ldi	r24, 0x95	; 149
    350e:	9b e0       	ldi	r25, 0x0B	; 11
    3510:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
uint8_t uid[] = { 0, 0, 0, 0, 0, 0, 0 };       // Buffer dove memorizzo la UID del Badge
uint8_t uidLength;                             // Length of the UID (4 or 7 bytes depending on ISO14443A card type)
uint8_t uidMezzo[] = { 0, 0, 0, 0, 0, 0, 0 };  // Buffer dove memorizzo la UID del Badge Mezzo
boolean alreadyTimbrata = false;

LiquidCrystal_I2C lcd(0x27, 2, 1, 0, 4, 5, 6, 7, 3, POSITIVE);  // Set the LCD I2C address
    3514:	1f 92       	push	r1
    3516:	83 e0       	ldi	r24, 0x03	; 3
    3518:	8f 93       	push	r24
    351a:	87 e0       	ldi	r24, 0x07	; 7
    351c:	88 2e       	mov	r8, r24
    351e:	96 e0       	ldi	r25, 0x06	; 6
    3520:	a9 2e       	mov	r10, r25
    3522:	25 e0       	ldi	r18, 0x05	; 5
    3524:	c2 2e       	mov	r12, r18
    3526:	34 e0       	ldi	r19, 0x04	; 4
    3528:	e3 2e       	mov	r14, r19
    352a:	21 e0       	ldi	r18, 0x01	; 1
    352c:	42 e0       	ldi	r20, 0x02	; 2
    352e:	67 e2       	ldi	r22, 0x27	; 39
    3530:	87 e6       	ldi	r24, 0x67	; 103
    3532:	9b e0       	ldi	r25, 0x0B	; 11
    3534:	0e 94 56 32 	call	0x64ac	; 0x64ac <_ZN17LiquidCrystal_I2CC1Ehhhhhhhhh13t_backlighPol>
uint8_t Clessidra[8] = {0x1F, 0x11, 0x0A, 0x04, 0x04, 0x0E, 0x1F, 0x1F,};
NFC_PN532 nfc(PN532_IRQ, PN532_RESET);
    3538:	43 e0       	ldi	r20, 0x03	; 3
    353a:	64 e0       	ldi	r22, 0x04	; 4
    353c:	80 e5       	ldi	r24, 0x50	; 80
    353e:	9b e0       	ldi	r25, 0x0B	; 11
    3540:	fa d3       	rcall	.+2036   	; 0x3d36 <_ZN9NFC_PN532C1Ehh>

String StatoAttuale = "START...";
    3542:	63 ec       	ldi	r22, 0xC3	; 195
    3544:	78 e0       	ldi	r23, 0x08	; 8
    3546:	8a e4       	ldi	r24, 0x4A	; 74
    3548:	9b e0       	ldi	r25, 0x0B	; 11
    354a:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
String strURLAPI = "";
    354e:	6f ee       	ldi	r22, 0xEF	; 239
    3550:	71 e0       	ldi	r23, 0x01	; 1
    3552:	84 e4       	ldi	r24, 0x44	; 68
    3554:	9b e0       	ldi	r25, 0x0B	; 11
    3556:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>

uint8_t distr_selezionato = 0;
/*** GESTIONE HTTP REQUEST ***/

int HTTP_len_response = 12;
String RispostaHTTP = "";
    355a:	6f ee       	ldi	r22, 0xEF	; 239
    355c:	71 e0       	ldi	r23, 0x01	; 1
    355e:	89 e3       	ldi	r24, 0x39	; 57
    3560:	9b e0       	ldi	r25, 0x0B	; 11
    3562:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
// Ate;TARGA;CARB;LT;KM;
String RaccoltaDati[] = {"", "", "", "", "", ""};
    3566:	6f ee       	ldi	r22, 0xEF	; 239
    3568:	71 e0       	ldi	r23, 0x01	; 1
    356a:	85 e1       	ldi	r24, 0x15	; 21
    356c:	9b e0       	ldi	r25, 0x0B	; 11
    356e:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
    3572:	6f ee       	ldi	r22, 0xEF	; 239
    3574:	71 e0       	ldi	r23, 0x01	; 1
    3576:	8b e1       	ldi	r24, 0x1B	; 27
    3578:	9b e0       	ldi	r25, 0x0B	; 11
    357a:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
    357e:	6f ee       	ldi	r22, 0xEF	; 239
    3580:	71 e0       	ldi	r23, 0x01	; 1
    3582:	81 e2       	ldi	r24, 0x21	; 33
    3584:	9b e0       	ldi	r25, 0x0B	; 11
    3586:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
    358a:	6f ee       	ldi	r22, 0xEF	; 239
    358c:	71 e0       	ldi	r23, 0x01	; 1
    358e:	87 e2       	ldi	r24, 0x27	; 39
    3590:	9b e0       	ldi	r25, 0x0B	; 11
    3592:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
    3596:	6f ee       	ldi	r22, 0xEF	; 239
    3598:	71 e0       	ldi	r23, 0x01	; 1
    359a:	8d e2       	ldi	r24, 0x2D	; 45
    359c:	9b e0       	ldi	r25, 0x0B	; 11
    359e:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
    35a2:	6f ee       	ldi	r22, 0xEF	; 239
    35a4:	71 e0       	ldi	r23, 0x01	; 1
    35a6:	83 e3       	ldi	r24, 0x33	; 51
    35a8:	9b e0       	ldi	r25, 0x0B	; 11
    35aa:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
// String Carburante = "X";
String Risposta = "";
    35ae:	6f ee       	ldi	r22, 0xEF	; 239
    35b0:	71 e0       	ldi	r23, 0x01	; 1
    35b2:	8f e0       	ldi	r24, 0x0F	; 15
    35b4:	9b e0       	ldi	r25, 0x0B	; 11
    35b6:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
String Messaggio = "";
    35ba:	6f ee       	ldi	r22, 0xEF	; 239
    35bc:	71 e0       	ldi	r23, 0x01	; 1
    35be:	89 e0       	ldi	r24, 0x09	; 9
    35c0:	9b e0       	ldi	r25, 0x0B	; 11
    35c2:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
String righeDisplay[] = {"X", "X", "X", "X"};
    35c6:	67 e1       	ldi	r22, 0x17	; 23
    35c8:	75 e0       	ldi	r23, 0x05	; 5
    35ca:	81 ef       	ldi	r24, 0xF1	; 241
    35cc:	9a e0       	ldi	r25, 0x0A	; 10
    35ce:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
    35d2:	67 e1       	ldi	r22, 0x17	; 23
    35d4:	75 e0       	ldi	r23, 0x05	; 5
    35d6:	87 ef       	ldi	r24, 0xF7	; 247
    35d8:	9a e0       	ldi	r25, 0x0A	; 10
    35da:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
    35de:	67 e1       	ldi	r22, 0x17	; 23
    35e0:	75 e0       	ldi	r23, 0x05	; 5
    35e2:	8d ef       	ldi	r24, 0xFD	; 253
    35e4:	9a e0       	ldi	r25, 0x0A	; 10
    35e6:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
    35ea:	67 e1       	ldi	r22, 0x17	; 23
    35ec:	75 e0       	ldi	r23, 0x05	; 5
    35ee:	83 e0       	ldi	r24, 0x03	; 3
    35f0:	9b e0       	ldi	r25, 0x0B	; 11
    35f2:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
char CodSede[] = "SA1001";
/********************************************************************************************/
/*                    Configurazione Rete                       */
/********************************************************************************************/

IPAddress ipCCEC(192, 168, 0, 50);
    35f6:	02 e3       	ldi	r16, 0x32	; 50
    35f8:	20 e0       	ldi	r18, 0x00	; 0
    35fa:	48 ea       	ldi	r20, 0xA8	; 168
    35fc:	60 ec       	ldi	r22, 0xC0	; 192
    35fe:	8b ee       	ldi	r24, 0xEB	; 235
    3600:	9a e0       	ldi	r25, 0x0A	; 10
    3602:	0e 94 ce 38 	call	0x719c	; 0x719c <_ZN9IPAddressC1Ehhhh>
IPAddress myDns(192, 168, 1, 21); // DNS
    3606:	05 e1       	ldi	r16, 0x15	; 21
    3608:	21 e0       	ldi	r18, 0x01	; 1
    360a:	48 ea       	ldi	r20, 0xA8	; 168
    360c:	60 ec       	ldi	r22, 0xC0	; 192
    360e:	85 ee       	ldi	r24, 0xE5	; 229
    3610:	9a e0       	ldi	r25, 0x0A	; 10
    3612:	0e 94 ce 38 	call	0x719c	; 0x719c <_ZN9IPAddressC1Ehhhh>
IPAddress gateway(192, 168, 0, 1); // GATEWAY
    3616:	01 e0       	ldi	r16, 0x01	; 1
    3618:	20 e0       	ldi	r18, 0x00	; 0
    361a:	48 ea       	ldi	r20, 0xA8	; 168
    361c:	60 ec       	ldi	r22, 0xC0	; 192
    361e:	8f ed       	ldi	r24, 0xDF	; 223
    3620:	9a e0       	ldi	r25, 0x0A	; 10
    3622:	0e 94 ce 38 	call	0x719c	; 0x719c <_ZN9IPAddressC1Ehhhh>
IPAddress subnet(255, 255, 0, 0); // SUBNET
    3626:	00 e0       	ldi	r16, 0x00	; 0
    3628:	20 e0       	ldi	r18, 0x00	; 0
    362a:	4f ef       	ldi	r20, 0xFF	; 255
    362c:	6f ef       	ldi	r22, 0xFF	; 255
    362e:	89 ed       	ldi	r24, 0xD9	; 217
    3630:	9a e0       	ldi	r25, 0x0A	; 10
    3632:	0e 94 ce 38 	call	0x719c	; 0x719c <_ZN9IPAddressC1Ehhhh>

char serverATE[]  = "wbpate-test.dipvvf.it";
char serverGAC[]  = "gacweb-test.dipvvf.it";
char serverREST[] = "ccec.sa.dipvvf.it";

EthernetClient clientLOCAL;
    3636:	8c ec       	ldi	r24, 0xCC	; 204
    3638:	9a e0       	ldi	r25, 0x0A	; 10
    363a:	0e 94 bc 29 	call	0x5378	; 0x5378 <_ZN14EthernetClientC1Ev>
EthernetClient clientATE;
    363e:	8f eb       	ldi	r24, 0xBF	; 191
    3640:	9a e0       	ldi	r25, 0x0A	; 10
    3642:	0e 94 bc 29 	call	0x5378	; 0x5378 <_ZN14EthernetClientC1Ev>

byte mac[] = {0x00, 0x0E, 0x0C, 0xB0, 0x25, 0x6F};
/********************************************************************************************/
/*                    Real Time Clock                       */
/********************************************************************************************/
DS3231M_Class DS3231M;
    3646:	83 eb       	ldi	r24, 0xB3	; 179
    3648:	9a e0       	ldi	r25, 0x0A	; 10
    364a:	0e 94 99 23 	call	0x4732	; 0x4732 <_ZN13DS3231M_ClassC1Ev>
const uint8_t SPRINTF_BUFFER_SIZE =     32;
char          inputBuffer[SPRINTF_BUFFER_SIZE];
unsigned long secs;                            // store the seconds value
unsigned long UltimoPassaggioStato = 0;        // Timer Stati Procedura
unsigned long Timer = 0;                       // Timer
DateTime nowTimer;
    364e:	40 e0       	ldi	r20, 0x00	; 0
    3650:	50 e0       	ldi	r21, 0x00	; 0
    3652:	ba 01       	movw	r22, r20
    3654:	81 ea       	ldi	r24, 0xA1	; 161
    3656:	9a e0       	ldi	r25, 0x0A	; 10
    3658:	00 d7       	rcall	.+3584   	; 0x445a <_ZN8DateTimeC1Em>
/********************************************************************************************/

const byte ROWS = 4; //four rows
const byte COLS = 4; //four columns

String TARGA = "";
    365a:	6f ee       	ldi	r22, 0xEF	; 239
    365c:	71 e0       	ldi	r23, 0x01	; 1
    365e:	8b e9       	ldi	r24, 0x9B	; 155
    3660:	9a e0       	ldi	r25, 0x0A	; 10
    3662:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
String KM = "";
    3666:	6f ee       	ldi	r22, 0xEF	; 239
    3668:	71 e0       	ldi	r23, 0x01	; 1
    366a:	85 e9       	ldi	r24, 0x95	; 149
    366c:	9a e0       	ldi	r25, 0x0A	; 10
    366e:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', '.'}
};

PCA9534 gpio;
    3672:	0f 90       	pop	r0
    3674:	0f 90       	pop	r0
    3676:	82 e9       	ldi	r24, 0x92	; 146
    3678:	9a e0       	ldi	r25, 0x0A	; 10
        intConsecutivePresses = 0;                     // reset press counts
        intConsecutiveNonPresses = 0;
      }
    }
  }
    367a:	df 91       	pop	r29
    367c:	cf 91       	pop	r28
    367e:	0f 91       	pop	r16
    3680:	ef 90       	pop	r14
    3682:	cf 90       	pop	r12
    3684:	af 90       	pop	r10
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', '.'}
};

PCA9534 gpio;
    3686:	8f 90       	pop	r8
    3688:	b6 c2       	rjmp	.+1388   	; 0x3bf6 <_ZN7PCA9534C1Ev>

0000368a <_GLOBAL__sub_D_ParametriCCEC>:
        intConsecutivePresses = 0;                     // reset press counts
        intConsecutiveNonPresses = 0;
      }
    }
  }
    368a:	cf 93       	push	r28
    368c:	df 93       	push	r29

const byte ROWS = 4; //four rows
const byte COLS = 4; //four columns

String TARGA = "";
String KM = "";
    368e:	85 e9       	ldi	r24, 0x95	; 149
    3690:	9a e0       	ldi	r25, 0x0A	; 10
    3692:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
/********************************************************************************************/

const byte ROWS = 4; //four rows
const byte COLS = 4; //four columns

String TARGA = "";
    3696:	8b e9       	ldi	r24, 0x9B	; 155
    3698:	9a e0       	ldi	r25, 0x0A	; 10
    369a:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>

byte mac[] = {0x00, 0x0E, 0x0C, 0xB0, 0x25, 0x6F};
/********************************************************************************************/
/*                    Real Time Clock                       */
/********************************************************************************************/
DS3231M_Class DS3231M;
    369e:	83 eb       	ldi	r24, 0xB3	; 179
    36a0:	9a e0       	ldi	r25, 0x0A	; 10
    36a2:	0e 94 a0 23 	call	0x4740	; 0x4740 <_ZN13DS3231M_ClassD1Ev>
// Ate;TARGA;CARB;LT;KM;
String RaccoltaDati[] = {"", "", "", "", "", ""};
// String Carburante = "X";
String Risposta = "";
String Messaggio = "";
String righeDisplay[] = {"X", "X", "X", "X"};
    36a6:	83 e0       	ldi	r24, 0x03	; 3
    36a8:	9b e0       	ldi	r25, 0x0B	; 11
    36aa:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
    36ae:	8d ef       	ldi	r24, 0xFD	; 253
    36b0:	9a e0       	ldi	r25, 0x0A	; 10
    36b2:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
    36b6:	87 ef       	ldi	r24, 0xF7	; 247
    36b8:	9a e0       	ldi	r25, 0x0A	; 10
    36ba:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
    36be:	81 ef       	ldi	r24, 0xF1	; 241
    36c0:	9a e0       	ldi	r25, 0x0A	; 10
    36c2:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
String RispostaHTTP = "";
// Ate;TARGA;CARB;LT;KM;
String RaccoltaDati[] = {"", "", "", "", "", ""};
// String Carburante = "X";
String Risposta = "";
String Messaggio = "";
    36c6:	89 e0       	ldi	r24, 0x09	; 9
    36c8:	9b e0       	ldi	r25, 0x0B	; 11
    36ca:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
int HTTP_len_response = 12;
String RispostaHTTP = "";
// Ate;TARGA;CARB;LT;KM;
String RaccoltaDati[] = {"", "", "", "", "", ""};
// String Carburante = "X";
String Risposta = "";
    36ce:	8f e0       	ldi	r24, 0x0F	; 15
    36d0:	9b e0       	ldi	r25, 0x0B	; 11
    36d2:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
/*** GESTIONE HTTP REQUEST ***/

int HTTP_len_response = 12;
String RispostaHTTP = "";
// Ate;TARGA;CARB;LT;KM;
String RaccoltaDati[] = {"", "", "", "", "", ""};
    36d6:	c9 e3       	ldi	r28, 0x39	; 57
    36d8:	db e0       	ldi	r29, 0x0B	; 11
    36da:	26 97       	sbiw	r28, 0x06	; 6
    36dc:	ce 01       	movw	r24, r28
    36de:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
    36e2:	8b e0       	ldi	r24, 0x0B	; 11
    36e4:	c5 31       	cpi	r28, 0x15	; 21
    36e6:	d8 07       	cpc	r29, r24
    36e8:	c1 f7       	brne	.-16     	; 0x36da <_GLOBAL__sub_D_ParametriCCEC+0x50>

uint8_t distr_selezionato = 0;
/*** GESTIONE HTTP REQUEST ***/

int HTTP_len_response = 12;
String RispostaHTTP = "";
    36ea:	89 e3       	ldi	r24, 0x39	; 57
    36ec:	9b e0       	ldi	r25, 0x0B	; 11
    36ee:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
LiquidCrystal_I2C lcd(0x27, 2, 1, 0, 4, 5, 6, 7, 3, POSITIVE);  // Set the LCD I2C address
uint8_t Clessidra[8] = {0x1F, 0x11, 0x0A, 0x04, 0x04, 0x0E, 0x1F, 0x1F,};
NFC_PN532 nfc(PN532_IRQ, PN532_RESET);

String StatoAttuale = "START...";
String strURLAPI = "";
    36f2:	84 e4       	ldi	r24, 0x44	; 68
    36f4:	9b e0       	ldi	r25, 0x0B	; 11
    36f6:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>

LiquidCrystal_I2C lcd(0x27, 2, 1, 0, 4, 5, 6, 7, 3, POSITIVE);  // Set the LCD I2C address
uint8_t Clessidra[8] = {0x1F, 0x11, 0x0A, 0x04, 0x04, 0x0E, 0x1F, 0x1F,};
NFC_PN532 nfc(PN532_IRQ, PN532_RESET);

String StatoAttuale = "START...";
    36fa:	8a e4       	ldi	r24, 0x4A	; 74
    36fc:	9b e0       	ldi	r25, 0x0B	; 11
    36fe:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>

volatile int intConsecutivePresses = 0;
volatile int intConsecutiveNonPresses = 0;
const uint8_t I2C_PCA9534_ADDR = 0x20;

struct mezzoType {
    3702:	85 e9       	ldi	r24, 0x95	; 149
    3704:	9b e0       	ldi	r25, 0x0B	; 11
    3706:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
    370a:	8f e8       	ldi	r24, 0x8F	; 143
    370c:	9b e0       	ldi	r25, 0x0B	; 11
    370e:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
    3712:	89 e8       	ldi	r24, 0x89	; 137
    3714:	9b e0       	ldi	r25, 0x0B	; 11
    3716:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>

ParametriCCEC_TypeDef *ParametriCCEC; //puntatore  a Map memoria

#define numero_parametri 4

ParametriCCEC_TypeDef Parametri[numero_parametri] =
    371a:	89 ec       	ldi	r24, 0xC9	; 201
    371c:	9b e0       	ldi	r25, 0x0B	; 11
    371e:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <_ZN20ParametriCCEC_structD1Ev>
    3722:	8b eb       	ldi	r24, 0xBB	; 187
    3724:	9b e0       	ldi	r25, 0x0B	; 11
    3726:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <_ZN20ParametriCCEC_structD1Ev>
    372a:	8d ea       	ldi	r24, 0xAD	; 173
    372c:	9b e0       	ldi	r25, 0x0B	; 11
    372e:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <_ZN20ParametriCCEC_structD1Ev>
    3732:	8f e9       	ldi	r24, 0x9F	; 159
    3734:	9b e0       	ldi	r25, 0x0B	; 11
        intConsecutivePresses = 0;                     // reset press counts
        intConsecutiveNonPresses = 0;
      }
    }
  }
    3736:	df 91       	pop	r29
    3738:	cf 91       	pop	r28
    373a:	0c 94 f6 0e 	jmp	0x1dec	; 0x1dec <_ZN20ParametriCCEC_structD1Ev>

0000373e <setup>:
	Serial.println(" ");
	Serial.println(" ");
}
/************************************************************/

void setup() {
    373e:	cf 92       	push	r12
    3740:	df 92       	push	r13
    3742:	ef 92       	push	r14
    3744:	ff 92       	push	r15
    3746:	0f 93       	push	r16
    3748:	1f 93       	push	r17
    374a:	cf 93       	push	r28
    374c:	df 93       	push	r29
    374e:	00 d0       	rcall	.+0      	; 0x3750 <setup+0x12>
    3750:	00 d0       	rcall	.+0      	; 0x3752 <setup+0x14>
    3752:	00 d0       	rcall	.+0      	; 0x3754 <setup+0x16>
    3754:	cd b7       	in	r28, 0x3d	; 61
    3756:	de b7       	in	r29, 0x3e	; 62
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
						_BV(WDE) | (value & 0x07)) )
				: "r0"
		);
    3758:	99 e2       	ldi	r25, 0x29	; 41
    375a:	88 e1       	ldi	r24, 0x18	; 24
    375c:	0f b6       	in	r0, 0x3f	; 63
    375e:	f8 94       	cli
    3760:	a8 95       	wdr
    3762:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3766:	0f be       	out	0x3f, r0	; 63
    3768:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
static const uint8_t RELE1 = PORTC7;
static const uint8_t RELE2 = PORTA7;
/*********************************************************************************************/
static inline void initSS_FLASH()  { DDRB |= (1 << SS_FLASH); } // set DDRB bit 4, sets PB4 for output
static inline void initSS_ETH()    { DDRC |= (1 << CS_W5500); } // set DDRC bit 4, sets PC4 for output
static inline void initSS_LORA()   { DDRA |= (1 << SS_LORA); }
    376c:	0c 9a       	sbi	0x01, 4	; 1
    376e:	8f e3       	ldi	r24, 0x3F	; 63
    3770:	9c e9       	ldi	r25, 0x9C	; 156
    3772:	01 97       	sbiw	r24, 0x01	; 1
    3774:	f1 f7       	brne	.-4      	; 0x3772 <setup+0x34>
    3776:	00 c0       	rjmp	.+0      	; 0x3778 <setup+0x3a>
    3778:	00 00       	nop
static inline void initSS_MOSGSM() { DDRD |= (1 << MOS_GSM); }
    377a:	55 9a       	sbi	0x0a, 5	; 10
    377c:	8f e3       	ldi	r24, 0x3F	; 63
    377e:	9c e9       	ldi	r25, 0x9C	; 156
    3780:	01 97       	sbiw	r24, 0x01	; 1
    3782:	f1 f7       	brne	.-4      	; 0x3780 <setup+0x42>
    3784:	00 c0       	rjmp	.+0      	; 0x3786 <setup+0x48>
    3786:	00 00       	nop
    3788:	8f e3       	ldi	r24, 0x3F	; 63
    378a:	9c e9       	ldi	r25, 0x9C	; 156
    378c:	01 97       	sbiw	r24, 0x01	; 1
    378e:	f1 f7       	brne	.-4      	; 0x378c <setup+0x4e>
    3790:	00 c0       	rjmp	.+0      	; 0x3792 <setup+0x54>
    3792:	00 00       	nop
static inline void initSS_DTRGSM() { DDRB |= (1 << DTR_GSM); }
static inline void initSS_WIFI()   { DDRB |= (1 << EN_WIFI); }
    3794:	23 9a       	sbi	0x04, 3	; 4
    3796:	8f e3       	ldi	r24, 0x3F	; 63
    3798:	9c e9       	ldi	r25, 0x9C	; 156
    379a:	01 97       	sbiw	r24, 0x01	; 1
    379c:	f1 f7       	brne	.-4      	; 0x379a <setup+0x5c>
    379e:	00 c0       	rjmp	.+0      	; 0x37a0 <setup+0x62>
    37a0:	00 00       	nop
/*********************************************************************************************/
static const uint8_t RELE1 = PORTC7;
static const uint8_t RELE2 = PORTA7;
/*********************************************************************************************/
static inline void initSS_FLASH()  { DDRB |= (1 << SS_FLASH); } // set DDRB bit 4, sets PB4 for output
static inline void initSS_ETH()    { DDRC |= (1 << CS_W5500); } // set DDRC bit 4, sets PC4 for output
    37a2:	3c 9a       	sbi	0x07, 4	; 7
    37a4:	8f e3       	ldi	r24, 0x3F	; 63
    37a6:	9c e9       	ldi	r25, 0x9C	; 156
    37a8:	01 97       	sbiw	r24, 0x01	; 1
    37aa:	f1 f7       	brne	.-4      	; 0x37a8 <setup+0x6a>
    37ac:	00 c0       	rjmp	.+0      	; 0x37ae <setup+0x70>
    37ae:	00 00       	nop
static inline void initSS_LORA()   { DDRA |= (1 << SS_LORA); }
static inline void initSS_MOSGSM() { DDRD |= (1 << MOS_GSM); }
    37b0:	55 9a       	sbi	0x0a, 5	; 10
    37b2:	8f e3       	ldi	r24, 0x3F	; 63
    37b4:	9c e9       	ldi	r25, 0x9C	; 156
    37b6:	01 97       	sbiw	r24, 0x01	; 1
    37b8:	f1 f7       	brne	.-4      	; 0x37b6 <setup+0x78>
    37ba:	00 c0       	rjmp	.+0      	; 0x37bc <setup+0x7e>
    37bc:	00 00       	nop
static inline void initSS_DTRGSM() { DDRB |= (1 << DTR_GSM); }
    37be:	20 9a       	sbi	0x04, 0	; 4
    37c0:	9f ef       	ldi	r25, 0xFF	; 255
    37c2:	21 ee       	ldi	r18, 0xE1	; 225
    37c4:	84 e0       	ldi	r24, 0x04	; 4
    37c6:	91 50       	subi	r25, 0x01	; 1
    37c8:	20 40       	sbci	r18, 0x00	; 0
    37ca:	80 40       	sbci	r24, 0x00	; 0
    37cc:	e1 f7       	brne	.-8      	; 0x37c6 <setup+0x88>
    37ce:	00 c0       	rjmp	.+0      	; 0x37d0 <setup+0x92>
    37d0:	00 00       	nop

   /************************************************************/
   /*  DISABILITO PERIFERICHE								   */
   /************************************************************/
   _delay_ms(100);
   disable_ETH();
    37d2:	0e 94 95 01 	call	0x32a	; 0x32a <_ZL11disable_ETHv>
    37d6:	9f ef       	ldi	r25, 0xFF	; 255
    37d8:	21 ee       	ldi	r18, 0xE1	; 225
    37da:	84 e0       	ldi	r24, 0x04	; 4
    37dc:	91 50       	subi	r25, 0x01	; 1
    37de:	20 40       	sbci	r18, 0x00	; 0
    37e0:	80 40       	sbci	r24, 0x00	; 0
    37e2:	e1 f7       	brne	.-8      	; 0x37dc <setup+0x9e>
    37e4:	00 c0       	rjmp	.+0      	; 0x37e6 <setup+0xa8>
    37e6:	00 00       	nop
	
static inline void enable_ETH()    { PORTC &= ~(1 << CS_W5500); } // Set 0 Bit 4 PORTC Register
static inline void enable_FLASH()  { PORTB &= ~(1 << SS_FLASH); } // Set 0 Bit 4 PORTB Register

static inline void disable_ETH()   { PORTC |= (1 << CS_W5500);	} // Set 1 Bit 4 PORTC Register
static inline void disable_FLASH() { PORTB |= (1 << SS_FLASH);  }
    37e8:	2c 9a       	sbi	0x05, 4	; 5
    37ea:	9f ef       	ldi	r25, 0xFF	; 255
    37ec:	21 ee       	ldi	r18, 0xE1	; 225
    37ee:	84 e0       	ldi	r24, 0x04	; 4
    37f0:	91 50       	subi	r25, 0x01	; 1
    37f2:	20 40       	sbci	r18, 0x00	; 0
    37f4:	80 40       	sbci	r24, 0x00	; 0
    37f6:	e1 f7       	brne	.-8      	; 0x37f0 <setup+0xb2>
    37f8:	00 c0       	rjmp	.+0      	; 0x37fa <setup+0xbc>
    37fa:	00 00       	nop
static inline void disable_LORA()  { PORTA |= (1 << SS_LORA);	}
static inline void disable_MOSGSM(){ PORTD &= ~(1 << MOS_GSM);	}
static inline void disable_DTRGSM(){ PORTB |= (1 << DTR_GSM);	}
    37fc:	28 9a       	sbi	0x05, 0	; 5
    37fe:	9f ef       	ldi	r25, 0xFF	; 255
    3800:	21 ee       	ldi	r18, 0xE1	; 225
    3802:	84 e0       	ldi	r24, 0x04	; 4
    3804:	91 50       	subi	r25, 0x01	; 1
    3806:	20 40       	sbci	r18, 0x00	; 0
    3808:	80 40       	sbci	r24, 0x00	; 0
    380a:	e1 f7       	brne	.-8      	; 0x3804 <setup+0xc6>
    380c:	00 c0       	rjmp	.+0      	; 0x380e <setup+0xd0>
    380e:	00 00       	nop
	
static inline void enable_ETH()    { PORTC &= ~(1 << CS_W5500); } // Set 0 Bit 4 PORTC Register
static inline void enable_FLASH()  { PORTB &= ~(1 << SS_FLASH); } // Set 0 Bit 4 PORTB Register

static inline void disable_ETH()   { PORTC |= (1 << CS_W5500);	} // Set 1 Bit 4 PORTC Register
static inline void disable_FLASH() { PORTB |= (1 << SS_FLASH);  }
    3810:	2c 9a       	sbi	0x05, 4	; 5
    3812:	9f ef       	ldi	r25, 0xFF	; 255
    3814:	21 ee       	ldi	r18, 0xE1	; 225
    3816:	84 e0       	ldi	r24, 0x04	; 4
    3818:	91 50       	subi	r25, 0x01	; 1
    381a:	20 40       	sbci	r18, 0x00	; 0
    381c:	80 40       	sbci	r24, 0x00	; 0
    381e:	e1 f7       	brne	.-8      	; 0x3818 <setup+0xda>
    3820:	00 c0       	rjmp	.+0      	; 0x3822 <setup+0xe4>
    3822:	00 00       	nop
static inline void disable_LORA()  { PORTA |= (1 << SS_LORA);	}
    3824:	14 9a       	sbi	0x02, 4	; 2
    3826:	9f ef       	ldi	r25, 0xFF	; 255
    3828:	21 ee       	ldi	r18, 0xE1	; 225
    382a:	84 e0       	ldi	r24, 0x04	; 4
    382c:	91 50       	subi	r25, 0x01	; 1
    382e:	20 40       	sbci	r18, 0x00	; 0
    3830:	80 40       	sbci	r24, 0x00	; 0
    3832:	e1 f7       	brne	.-8      	; 0x382c <setup+0xee>
    3834:	00 c0       	rjmp	.+0      	; 0x3836 <setup+0xf8>
    3836:	00 00       	nop
static inline void disable_MOSGSM(){ PORTD &= ~(1 << MOS_GSM);	}
static inline void disable_DTRGSM(){ PORTB |= (1 << DTR_GSM);	}
static inline void disable_WIFI()  { PORTB &= ~(1 << EN_WIFI);  }	
    3838:	2b 98       	cbi	0x05, 3	; 5
    383a:	9f ef       	ldi	r25, 0xFF	; 255
    383c:	21 ee       	ldi	r18, 0xE1	; 225
    383e:	84 e0       	ldi	r24, 0x04	; 4
    3840:	91 50       	subi	r25, 0x01	; 1
    3842:	20 40       	sbci	r18, 0x00	; 0
    3844:	80 40       	sbci	r24, 0x00	; 0
    3846:	e1 f7       	brne	.-8      	; 0x3840 <setup+0x102>
    3848:	00 c0       	rjmp	.+0      	; 0x384a <setup+0x10c>
    384a:	00 00       	nop
    384c:	9f ef       	ldi	r25, 0xFF	; 255
    384e:	21 ee       	ldi	r18, 0xE1	; 225
    3850:	84 e0       	ldi	r24, 0x04	; 4
    3852:	91 50       	subi	r25, 0x01	; 1
    3854:	20 40       	sbci	r18, 0x00	; 0
    3856:	80 40       	sbci	r24, 0x00	; 0
    3858:	e1 f7       	brne	.-8      	; 0x3852 <setup+0x114>
    385a:	00 c0       	rjmp	.+0      	; 0x385c <setup+0x11e>
    385c:	00 00       	nop
   disable_WIFI();
   _delay_ms(100);
   /*******************************************************************************************/
  // Serial.begin(115200);
  _delay_ms(100);
  Serial.println(" inizio Setup ......");
    385e:	6c ec       	ldi	r22, 0xCC	; 204
    3860:	78 e0       	ldi	r23, 0x08	; 8
    3862:	8e e2       	ldi	r24, 0x2E	; 46
    3864:	9d e0       	ldi	r25, 0x0D	; 13
    3866:	0e 94 8c 39 	call	0x7318	; 0x7318 <_ZN5Print7printlnEPKc>
  printLine();
    386a:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>

  /*******************************************************************************************/
  ParametriCCEC = Parametri;  
    386e:	8f e9       	ldi	r24, 0x9F	; 159
    3870:	9b e0       	ldi	r25, 0x0B	; 11
    3872:	90 93 d8 0b 	sts	0x0BD8, r25	; 0x800bd8 <ParametriCCEC+0x1>
    3876:	80 93 d7 0b 	sts	0x0BD7, r24	; 0x800bd7 <ParametriCCEC>
  printLine();
    387a:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
  Serial.print("EEPROM utilizzata (byte): ");
    387e:	61 ee       	ldi	r22, 0xE1	; 225
    3880:	78 e0       	ldi	r23, 0x08	; 8
    3882:	8e e2       	ldi	r24, 0x2E	; 46
    3884:	9d e0       	ldi	r25, 0x0D	; 13
    3886:	0e 94 61 39 	call	0x72c2	; 0x72c2 <_ZN5Print5printEPKc>
  Serial.print(EEPROM.length());
    388a:	4a e0       	ldi	r20, 0x0A	; 10
    388c:	50 e0       	ldi	r21, 0x00	; 0
    388e:	60 e0       	ldi	r22, 0x00	; 0
    3890:	70 e1       	ldi	r23, 0x10	; 16
    3892:	8e e2       	ldi	r24, 0x2E	; 46
    3894:	9d e0       	ldi	r25, 0x0D	; 13
    3896:	0e 94 f5 39 	call	0x73ea	; 0x73ea <_ZN5Print5printEji>
  Serial.println(" ");
    389a:	62 ef       	ldi	r22, 0xF2	; 242
    389c:	71 e0       	ldi	r23, 0x01	; 1
    389e:	8e e2       	ldi	r24, 0x2E	; 46
    38a0:	9d e0       	ldi	r25, 0x0D	; 13
    38a2:	0e 94 8c 39 	call	0x7318	; 0x7318 <_ZN5Print7printlnEPKc>
  Serial.print("Scrittura Parametri CCEC");
    38a6:	6c ef       	ldi	r22, 0xFC	; 252
    38a8:	78 e0       	ldi	r23, 0x08	; 8
    38aa:	8e e2       	ldi	r24, 0x2E	; 46
    38ac:	9d e0       	ldi	r25, 0x0D	; 13
    38ae:	0e 94 61 39 	call	0x72c2	; 0x72c2 <_ZN5Print5printEPKc>

  String app = "";
    38b2:	6f ee       	ldi	r22, 0xEF	; 239
    38b4:	71 e0       	ldi	r23, 0x01	; 1
    38b6:	ce 01       	movw	r24, r28
    38b8:	01 96       	adiw	r24, 0x01	; 1
    38ba:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
//   if (write_eeprom_string_struct(ParametriCCEC[0])) { Serial.println("WRITE OK");}
//   if (write_eeprom_string_struct(ParametriCCEC[1])) { Serial.println("WRITE OK");}
//   if (write_eeprom_string_struct(ParametriCCEC[2])) { Serial.println("WRITE OK");}
//   if (write_eeprom_string_struct(ParametriCCEC[3])) { Serial.println("WRITE OK");}

  printLine();  
    38be:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
/*******************************************************************************************/
  DDRC |= (1 << BUZZER); // set pin BUZZER (PC6) for output
    38c2:	3e 9a       	sbi	0x07, 6	; 7
  DDRC |= (1 << RELE1);  // Rele1
    38c4:	3f 9a       	sbi	0x07, 7	; 7
  DDRA |= (1 << RELE2);  // Rele2   // set PA7 e PC7 come output
    38c6:	0f 9a       	sbi	0x01, 7	; 1
    38c8:	8f e3       	ldi	r24, 0x3F	; 63
    38ca:	9c e9       	ldi	r25, 0x9C	; 156
    38cc:	01 97       	sbiw	r24, 0x01	; 1
    38ce:	f1 f7       	brne	.-4      	; 0x38cc <setup+0x18e>
    38d0:	00 c0       	rjmp	.+0      	; 0x38d2 <setup+0x194>
    38d2:	00 00       	nop
  _delay_ms(10);
  SET_BIT(PORTC, RELE1); // Apri RELE1
    38d4:	47 9a       	sbi	0x08, 7	; 8
    38d6:	8f e3       	ldi	r24, 0x3F	; 63
    38d8:	9c e9       	ldi	r25, 0x9C	; 156
    38da:	01 97       	sbiw	r24, 0x01	; 1
    38dc:	f1 f7       	brne	.-4      	; 0x38da <setup+0x19c>
    38de:	00 c0       	rjmp	.+0      	; 0x38e0 <setup+0x1a2>
    38e0:	00 00       	nop
  _delay_ms(10);
  SET_BIT(PORTA, RELE2); // Apri RELE2
    38e2:	17 9a       	sbi	0x02, 7	; 2
  printLine();
    38e4:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
  /***************************LCD******************************/
  lcd.begin(20, 4);	 // Inizializza display LCD 20x4 e accendi e spegni 2 volte
    38e8:	20 e0       	ldi	r18, 0x00	; 0
    38ea:	44 e0       	ldi	r20, 0x04	; 4
    38ec:	64 e1       	ldi	r22, 0x14	; 20
    38ee:	87 e6       	ldi	r24, 0x67	; 103
    38f0:	9b e0       	ldi	r25, 0x0B	; 11
    38f2:	0e 94 dc 32 	call	0x65b8	; 0x65b8 <_ZN17LiquidCrystal_I2C5beginEhhh>

  // ------- 2 blinks -------------
  for (int i = 0; i < 2; i++)
  {
    lcd.backlight();
    38f6:	87 e6       	ldi	r24, 0x67	; 103
    38f8:	9b e0       	ldi	r25, 0x0B	; 11
    38fa:	0e 94 b9 30 	call	0x6172	; 0x6172 <_ZN3LCD9backlightEv>
    38fe:	9f ef       	ldi	r25, 0xFF	; 255
    3900:	24 e3       	ldi	r18, 0x34	; 52
    3902:	8c e0       	ldi	r24, 0x0C	; 12
    3904:	91 50       	subi	r25, 0x01	; 1
    3906:	20 40       	sbci	r18, 0x00	; 0
    3908:	80 40       	sbci	r24, 0x00	; 0
    390a:	e1 f7       	brne	.-8      	; 0x3904 <setup+0x1c6>
    390c:	00 c0       	rjmp	.+0      	; 0x390e <setup+0x1d0>
    390e:	00 00       	nop
    _delay_ms(250);
    lcd.noBacklight();
    3910:	87 e6       	ldi	r24, 0x67	; 103
    3912:	9b e0       	ldi	r25, 0x0B	; 11
    3914:	0e 94 c1 30 	call	0x6182	; 0x6182 <_ZN3LCD11noBacklightEv>
    3918:	9f ef       	ldi	r25, 0xFF	; 255
    391a:	24 e3       	ldi	r18, 0x34	; 52
    391c:	8c e0       	ldi	r24, 0x0C	; 12
    391e:	91 50       	subi	r25, 0x01	; 1
    3920:	20 40       	sbci	r18, 0x00	; 0
    3922:	80 40       	sbci	r24, 0x00	; 0
    3924:	e1 f7       	brne	.-8      	; 0x391e <setup+0x1e0>
    3926:	00 c0       	rjmp	.+0      	; 0x3928 <setup+0x1ea>
    3928:	00 00       	nop
  lcd.begin(20, 4);	 // Inizializza display LCD 20x4 e accendi e spegni 2 volte

  // ------- 2 blinks -------------
  for (int i = 0; i < 2; i++)
  {
    lcd.backlight();
    392a:	87 e6       	ldi	r24, 0x67	; 103
    392c:	9b e0       	ldi	r25, 0x0B	; 11
    392e:	0e 94 b9 30 	call	0x6172	; 0x6172 <_ZN3LCD9backlightEv>
    3932:	9f ef       	ldi	r25, 0xFF	; 255
    3934:	24 e3       	ldi	r18, 0x34	; 52
    3936:	8c e0       	ldi	r24, 0x0C	; 12
    3938:	91 50       	subi	r25, 0x01	; 1
    393a:	20 40       	sbci	r18, 0x00	; 0
    393c:	80 40       	sbci	r24, 0x00	; 0
    393e:	e1 f7       	brne	.-8      	; 0x3938 <setup+0x1fa>
    3940:	00 c0       	rjmp	.+0      	; 0x3942 <setup+0x204>
    3942:	00 00       	nop
    _delay_ms(250);
    lcd.noBacklight();
    3944:	87 e6       	ldi	r24, 0x67	; 103
    3946:	9b e0       	ldi	r25, 0x0B	; 11
    3948:	0e 94 c1 30 	call	0x6182	; 0x6182 <_ZN3LCD11noBacklightEv>
    394c:	9f ef       	ldi	r25, 0xFF	; 255
    394e:	24 e3       	ldi	r18, 0x34	; 52
    3950:	8c e0       	ldi	r24, 0x0C	; 12
    3952:	91 50       	subi	r25, 0x01	; 1
    3954:	20 40       	sbci	r18, 0x00	; 0
    3956:	80 40       	sbci	r24, 0x00	; 0
    3958:	e1 f7       	brne	.-8      	; 0x3952 <setup+0x214>
    395a:	00 c0       	rjmp	.+0      	; 0x395c <setup+0x21e>
    395c:	00 00       	nop
    _delay_ms(250);
  }

  lcd.createChar(1, Clessidra); // Creo CHAR Clessidra
    395e:	47 e5       	ldi	r20, 0x57	; 87
    3960:	51 e0       	ldi	r21, 0x01	; 1
    3962:	61 e0       	ldi	r22, 0x01	; 1
    3964:	87 e6       	ldi	r24, 0x67	; 103
    3966:	9b e0       	ldi	r25, 0x0B	; 11
    3968:	0e 94 9f 31 	call	0x633e	; 0x633e <_ZN3LCD10createCharEhPh>
    396c:	9f ef       	ldi	r25, 0xFF	; 255
    396e:	29 ef       	ldi	r18, 0xF9	; 249
    3970:	80 e0       	ldi	r24, 0x00	; 0
    3972:	91 50       	subi	r25, 0x01	; 1
    3974:	20 40       	sbci	r18, 0x00	; 0
    3976:	80 40       	sbci	r24, 0x00	; 0
    3978:	e1 f7       	brne	.-8      	; 0x3972 <setup+0x234>
    397a:	00 c0       	rjmp	.+0      	; 0x397c <setup+0x23e>
    397c:	00 00       	nop
  _delay_ms(20);
  lcd.backlight();
    397e:	87 e6       	ldi	r24, 0x67	; 103
    3980:	9b e0       	ldi	r25, 0x0B	; 11
    3982:	0e 94 b9 30 	call	0x6172	; 0x6172 <_ZN3LCD9backlightEv>
    3986:	01 ef       	ldi	r16, 0xF1	; 241
    3988:	1a e0       	ldi	r17, 0x0A	; 10

  for (int r = 0; r < 4; r++)
    righeDisplay[r] = "";
    398a:	6f ee       	ldi	r22, 0xEF	; 239
    398c:	71 e0       	ldi	r23, 0x01	; 1
    398e:	c8 01       	movw	r24, r16
    3990:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringaSEPKc>
    3994:	0a 5f       	subi	r16, 0xFA	; 250
    3996:	1f 4f       	sbci	r17, 0xFF	; 255

  lcd.createChar(1, Clessidra); // Creo CHAR Clessidra
  _delay_ms(20);
  lcd.backlight();

  for (int r = 0; r < 4; r++)
    3998:	9b e0       	ldi	r25, 0x0B	; 11
    399a:	09 30       	cpi	r16, 0x09	; 9
    399c:	19 07       	cpc	r17, r25
    399e:	a9 f7       	brne	.-22     	; 0x398a <setup+0x24c>
    righeDisplay[r] = "";

  printLine();
    39a0:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>

  /***************************NFC*************************/

  nfc.begin();
    39a4:	80 e5       	ldi	r24, 0x50	; 80
    39a6:	9b e0       	ldi	r25, 0x0B	; 11
    39a8:	d7 d1       	rcall	.+942    	; 0x3d58 <_ZN9NFC_PN5325beginEv>
    39aa:	2f ef       	ldi	r18, 0xFF	; 255
    39ac:	80 e7       	ldi	r24, 0x70	; 112
    39ae:	92 e0       	ldi	r25, 0x02	; 2
    39b0:	21 50       	subi	r18, 0x01	; 1
    39b2:	80 40       	sbci	r24, 0x00	; 0
    39b4:	90 40       	sbci	r25, 0x00	; 0
    39b6:	e1 f7       	brne	.-8      	; 0x39b0 <setup+0x272>
    39b8:	00 c0       	rjmp	.+0      	; 0x39ba <setup+0x27c>
    39ba:	00 00       	nop

  _delay_ms(50);

  uint32_t versiondata = nfc.getFirmwareVersion();
    39bc:	80 e5       	ldi	r24, 0x50	; 80
    39be:	9b e0       	ldi	r25, 0x0B	; 11
    39c0:	70 d3       	rcall	.+1760   	; 0x40a2 <_ZN9NFC_PN53218getFirmwareVersionEv>
    39c2:	6b 01       	movw	r12, r22
    39c4:	7c 01       	movw	r14, r24
  if (! versiondata) {
    39c6:	67 2b       	or	r22, r23
    39c8:	68 2b       	or	r22, r24
    39ca:	69 2b       	or	r22, r25
    39cc:	69 f5       	brne	.+90     	; 0x3a28 <setup+0x2ea>
    Serial.print("Modulo PN532 non trovato");
    39ce:	65 e1       	ldi	r22, 0x15	; 21
    39d0:	79 e0       	ldi	r23, 0x09	; 9
    39d2:	8e e2       	ldi	r24, 0x2E	; 46
    39d4:	9d e0       	ldi	r25, 0x0D	; 13
    39d6:	0e 94 61 39 	call	0x72c2	; 0x72c2 <_ZN5Print5printEPKc>
    lcd.backlight();
    39da:	87 e6       	ldi	r24, 0x67	; 103
    39dc:	9b e0       	ldi	r25, 0x0B	; 11
    39de:	0e 94 b9 30 	call	0x6172	; 0x6172 <_ZN3LCD9backlightEv>
    39e2:	2f ef       	ldi	r18, 0xFF	; 255
    39e4:	84 e3       	ldi	r24, 0x34	; 52
    39e6:	9c e0       	ldi	r25, 0x0C	; 12
    39e8:	21 50       	subi	r18, 0x01	; 1
    39ea:	80 40       	sbci	r24, 0x00	; 0
    39ec:	90 40       	sbci	r25, 0x00	; 0
    39ee:	e1 f7       	brne	.-8      	; 0x39e8 <setup+0x2aa>
    39f0:	00 c0       	rjmp	.+0      	; 0x39f2 <setup+0x2b4>
    39f2:	00 00       	nop
    _delay_ms(250);
    lcd.clear();
    39f4:	87 e6       	ldi	r24, 0x67	; 103
    39f6:	9b e0       	ldi	r25, 0x0B	; 11
    39f8:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <_ZN3LCD5clearEv>
    lcd.print("Modulo PN532 non trovato ");
    39fc:	6e e2       	ldi	r22, 0x2E	; 46
    39fe:	79 e0       	ldi	r23, 0x09	; 9
    3a00:	87 e6       	ldi	r24, 0x67	; 103
    3a02:	9b e0       	ldi	r25, 0x0B	; 11
    3a04:	0e 94 61 39 	call	0x72c2	; 0x72c2 <_ZN5Print5printEPKc>
    3a08:	2f ef       	ldi	r18, 0xFF	; 255
    3a0a:	87 ea       	ldi	r24, 0xA7	; 167
    3a0c:	91 e6       	ldi	r25, 0x61	; 97
    3a0e:	21 50       	subi	r18, 0x01	; 1
    3a10:	80 40       	sbci	r24, 0x00	; 0
    3a12:	90 40       	sbci	r25, 0x00	; 0
    3a14:	e1 f7       	brne	.-8      	; 0x3a0e <setup+0x2d0>
    3a16:	00 c0       	rjmp	.+0      	; 0x3a18 <setup+0x2da>
    3a18:	00 00       	nop
    _delay_ms(2000);
    StatoAttuale  = " CHIAMA ASSISTENZA";
    3a1a:	68 e4       	ldi	r22, 0x48	; 72
    3a1c:	79 e0       	ldi	r23, 0x09	; 9
    3a1e:	8a e4       	ldi	r24, 0x4A	; 74
    3a20:	9b e0       	ldi	r25, 0x0B	; 11
    3a22:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringaSEPKc>
    3a26:	06 c0       	rjmp	.+12     	; 0x3a34 <setup+0x2f6>
    //while (1); // halt  // Aspetta per sempre
  } else {
    Serial.println("Modulo NFC OK ......");
    3a28:	6b e5       	ldi	r22, 0x5B	; 91
    3a2a:	79 e0       	ldi	r23, 0x09	; 9
    3a2c:	8e e2       	ldi	r24, 0x2E	; 46
    3a2e:	9d e0       	ldi	r25, 0x0D	; 13
    3a30:	0e 94 8c 39 	call	0x7318	; 0x7318 <_ZN5Print7printlnEPKc>
  }

  Serial.print("Found chip PN5"); Serial.println((versiondata >> 24) & 0xFF, HEX);
    3a34:	60 e7       	ldi	r22, 0x70	; 112
    3a36:	79 e0       	ldi	r23, 0x09	; 9
    3a38:	8e e2       	ldi	r24, 0x2E	; 46
    3a3a:	9d e0       	ldi	r25, 0x0D	; 13
    3a3c:	0e 94 61 39 	call	0x72c2	; 0x72c2 <_ZN5Print5printEPKc>
    3a40:	4f 2d       	mov	r20, r15
    3a42:	55 27       	eor	r21, r21
    3a44:	66 27       	eor	r22, r22
    3a46:	77 27       	eor	r23, r23
    3a48:	20 e1       	ldi	r18, 0x10	; 16
    3a4a:	30 e0       	ldi	r19, 0x00	; 0
    3a4c:	8e e2       	ldi	r24, 0x2E	; 46
    3a4e:	9d e0       	ldi	r25, 0x0D	; 13
    3a50:	0e 94 fa 39 	call	0x73f4	; 0x73f4 <_ZN5Print7printlnEmi>
  Serial.print("Firmware ver. "); Serial.print((versiondata >> 16) & 0xFF, DEC);
    3a54:	6f e7       	ldi	r22, 0x7F	; 127
    3a56:	79 e0       	ldi	r23, 0x09	; 9
    3a58:	8e e2       	ldi	r24, 0x2E	; 46
    3a5a:	9d e0       	ldi	r25, 0x0D	; 13
    3a5c:	0e 94 61 39 	call	0x72c2	; 0x72c2 <_ZN5Print5printEPKc>
    3a60:	4e 2d       	mov	r20, r14
    3a62:	50 e0       	ldi	r21, 0x00	; 0
    3a64:	60 e0       	ldi	r22, 0x00	; 0
    3a66:	70 e0       	ldi	r23, 0x00	; 0
    3a68:	2a e0       	ldi	r18, 0x0A	; 10
    3a6a:	30 e0       	ldi	r19, 0x00	; 0
    3a6c:	8e e2       	ldi	r24, 0x2E	; 46
    3a6e:	9d e0       	ldi	r25, 0x0D	; 13
    3a70:	0e 94 e3 39 	call	0x73c6	; 0x73c6 <_ZN5Print5printEmi>
  Serial.print('.'); Serial.println((versiondata >> 8) & 0xFF, DEC);
    3a74:	6e e2       	ldi	r22, 0x2E	; 46
    3a76:	8e e2       	ldi	r24, 0x2E	; 46
    3a78:	9d e0       	ldi	r25, 0x0D	; 13
    3a7a:	0e 94 62 39 	call	0x72c4	; 0x72c4 <_ZN5Print5printEc>
    3a7e:	4d 2d       	mov	r20, r13
    3a80:	50 e0       	ldi	r21, 0x00	; 0
    3a82:	60 e0       	ldi	r22, 0x00	; 0
    3a84:	70 e0       	ldi	r23, 0x00	; 0
    3a86:	2a e0       	ldi	r18, 0x0A	; 10
    3a88:	30 e0       	ldi	r19, 0x00	; 0
    3a8a:	8e e2       	ldi	r24, 0x2E	; 46
    3a8c:	9d e0       	ldi	r25, 0x0D	; 13
    3a8e:	0e 94 fa 39 	call	0x73f4	; 0x73f4 <_ZN5Print7printlnEmi>

  nfc.setPassiveActivationRetries(0xFF);
    3a92:	6f ef       	ldi	r22, 0xFF	; 255
    3a94:	80 e5       	ldi	r24, 0x50	; 80
    3a96:	9b e0       	ldi	r25, 0x0B	; 11
    3a98:	7a d3       	rcall	.+1780   	; 0x418e <_ZN9NFC_PN53227setPassiveActivationRetriesEh>
  nfc.SAMConfig();
    3a9a:	80 e5       	ldi	r24, 0x50	; 80
    3a9c:	9b e0       	ldi	r25, 0x0B	; 11
    3a9e:	49 d3       	rcall	.+1682   	; 0x4132 <_ZN9NFC_PN5329SAMConfigEv>
    3aa0:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
  printLine();
    3aa4:	40 ea       	ldi	r20, 0xA0	; 160
  
  /*************************** RTC **********************************/
  while (!DS3231M.begin()) {
    3aa6:	56 e8       	ldi	r21, 0x86	; 134
    3aa8:	61 e0       	ldi	r22, 0x01	; 1
    3aaa:	70 e0       	ldi	r23, 0x00	; 0
    3aac:	83 eb       	ldi	r24, 0xB3	; 179
    3aae:	9a e0       	ldi	r25, 0x0A	; 10
    3ab0:	8a d6       	rcall	.+3348   	; 0x47c6 <_ZN13DS3231M_Class5beginEm>
    3ab2:	81 11       	cpse	r24, r1
    3ab4:	10 c0       	rjmp	.+32     	; 0x3ad6 <setup+0x398>
    3ab6:	64 ee       	ldi	r22, 0xE4	; 228
    Serial.println(F("non trovo modulo RTC DS3231MM. Riprovo tra 3s."));
    3ab8:	71 e0       	ldi	r23, 0x01	; 1
    3aba:	8e e2       	ldi	r24, 0x2E	; 46
    3abc:	9d e0       	ldi	r25, 0x0D	; 13
    3abe:	0e 94 6c 39 	call	0x72d8	; 0x72d8 <_ZN5Print7printlnEPK19__FlashStringHelper>
    3ac2:	2f ef       	ldi	r18, 0xFF	; 255
    3ac4:	83 ed       	ldi	r24, 0xD3	; 211
    3ac6:	90 e3       	ldi	r25, 0x30	; 48
    3ac8:	21 50       	subi	r18, 0x01	; 1
    3aca:	80 40       	sbci	r24, 0x00	; 0
    3acc:	90 40       	sbci	r25, 0x00	; 0
    3ace:	e1 f7       	brne	.-8      	; 0x3ac8 <setup+0x38a>
    3ad0:	00 c0       	rjmp	.+0      	; 0x3ad2 <setup+0x394>
    3ad2:	00 00       	nop
    3ad4:	e7 cf       	rjmp	.-50     	; 0x3aa4 <setup+0x366>
    3ad6:	2f ef       	ldi	r18, 0xFF	; 255
    3ad8:	80 e7       	ldi	r24, 0x70	; 112
    3ada:	92 e0       	ldi	r25, 0x02	; 2
    3adc:	21 50       	subi	r18, 0x01	; 1
    3ade:	80 40       	sbci	r24, 0x00	; 0
    3ae0:	90 40       	sbci	r25, 0x00	; 0
    3ae2:	e1 f7       	brne	.-8      	; 0x3adc <setup+0x39e>
    3ae4:	00 c0       	rjmp	.+0      	; 0x3ae6 <setup+0x3a8>
    3ae6:	00 00       	nop
    3ae8:	66 ec       	ldi	r22, 0xC6	; 198
    _delay_ms(1000);
  }
  _delay_ms(50);

  Serial.println(F("RTC chip DS3231M initialized."));
    3aea:	71 e0       	ldi	r23, 0x01	; 1
    3aec:	8e e2       	ldi	r24, 0x2E	; 46
    3aee:	9d e0       	ldi	r25, 0x0D	; 13
    3af0:	0e 94 6c 39 	call	0x72d8	; 0x72d8 <_ZN5Print7printlnEPK19__FlashStringHelper>
  DS3231M.adjust();
    3af4:	83 eb       	ldi	r24, 0xB3	; 179
    3af6:	9a e0       	ldi	r25, 0x0A	; 10
    3af8:	c4 d7       	rcall	.+3976   	; 0x4a82 <_ZN13DS3231M_Class6adjustEv>
    3afa:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
  printLine();
    3afe:	6e e8       	ldi	r22, 0x8E	; 142
  /*************************** POTENZIOMETRI ************************/
  Serial.println("Inizializzo POTENZIOMETRI per livello pulser.......");
    3b00:	79 e0       	ldi	r23, 0x09	; 9
    3b02:	8e e2       	ldi	r24, 0x2E	; 46
    3b04:	9d e0       	ldi	r25, 0x0D	; 13
    3b06:	0e 94 8c 39 	call	0x7318	; 0x7318 <_ZN5Print7printlnEPKc>
    3b0a:	88 ed       	ldi	r24, 0xD8	; 216

  Wire.begin(); // join i2c bus (address optional for master)
    3b0c:	9c e0       	ldi	r25, 0x0C	; 12
    3b0e:	0e 94 3f 36 	call	0x6c7e	; 0x6c7e <_ZN7TwoWire5beginEv>
    3b12:	68 e2       	ldi	r22, 0x28	; 40
  Wire.beginTransmission(0x28);  // (0x50) POTENZIOMETRO U11
    3b14:	70 e0       	ldi	r23, 0x00	; 0
    3b16:	88 ed       	ldi	r24, 0xD8	; 216
    3b18:	9c e0       	ldi	r25, 0x0C	; 12
    3b1a:	0e 94 5c 36 	call	0x6cb8	; 0x6cb8 <_ZN7TwoWire17beginTransmissionEi>
    3b1e:	60 e0       	ldi	r22, 0x00	; 0
  Wire.write(byte(0x00));        // Wiper Register
    3b20:	88 ed       	ldi	r24, 0xD8	; 216
    3b22:	9c e0       	ldi	r25, 0x0C	; 12
    3b24:	0e 94 01 36 	call	0x6c02	; 0x6c02 <_ZN7TwoWire5writeEh>
    3b28:	60 e5       	ldi	r22, 0x50	; 80
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    3b2a:	88 ed       	ldi	r24, 0xD8	; 216
    3b2c:	9c e0       	ldi	r25, 0x0C	; 12
    3b2e:	0e 94 01 36 	call	0x6c02	; 0x6c02 <_ZN7TwoWire5writeEh>
    3b32:	88 ed       	ldi	r24, 0xD8	; 216
  Wire.write(80);              // Valore del potenziomentro
  Wire.endTransmission();
    3b34:	9c e0       	ldi	r25, 0x0C	; 12
    3b36:	0e 94 d3 36 	call	0x6da6	; 0x6da6 <_ZN7TwoWire15endTransmissionEv>
    3b3a:	2f ef       	ldi	r18, 0xFF	; 255
    3b3c:	80 e7       	ldi	r24, 0x70	; 112
    3b3e:	92 e0       	ldi	r25, 0x02	; 2
    3b40:	21 50       	subi	r18, 0x01	; 1
    3b42:	80 40       	sbci	r24, 0x00	; 0
    3b44:	90 40       	sbci	r25, 0x00	; 0
    3b46:	e1 f7       	brne	.-8      	; 0x3b40 <setup+0x402>
    3b48:	00 c0       	rjmp	.+0      	; 0x3b4a <setup+0x40c>
    3b4a:	00 00       	nop
    3b4c:	62 e5       	ldi	r22, 0x52	; 82

  _delay_ms(50);

  Wire.beginTransmission(0x52);  // (0x52) POTENZIOMETRO U12
    3b4e:	70 e0       	ldi	r23, 0x00	; 0
    3b50:	88 ed       	ldi	r24, 0xD8	; 216
    3b52:	9c e0       	ldi	r25, 0x0C	; 12
    3b54:	0e 94 5c 36 	call	0x6cb8	; 0x6cb8 <_ZN7TwoWire17beginTransmissionEi>
    3b58:	60 e0       	ldi	r22, 0x00	; 0
  Wire.write(byte(0x00));        // Wiper Register
    3b5a:	88 ed       	ldi	r24, 0xD8	; 216
    3b5c:	9c e0       	ldi	r25, 0x0C	; 12
    3b5e:	0e 94 01 36 	call	0x6c02	; 0x6c02 <_ZN7TwoWire5writeEh>
    3b62:	60 e5       	ldi	r22, 0x50	; 80
    3b64:	88 ed       	ldi	r24, 0xD8	; 216
    3b66:	9c e0       	ldi	r25, 0x0C	; 12
    3b68:	0e 94 01 36 	call	0x6c02	; 0x6c02 <_ZN7TwoWire5writeEh>
    3b6c:	88 ed       	ldi	r24, 0xD8	; 216
  Wire.write(80);                // Valore del potenziomentro circa 6 volt
  Wire.endTransmission();
    3b6e:	9c e0       	ldi	r25, 0x0C	; 12
    3b70:	0e 94 d3 36 	call	0x6da6	; 0x6da6 <_ZN7TwoWire15endTransmissionEv>
    3b74:	88 ed       	ldi	r24, 0xD8	; 216
  Wire.end();
    3b76:	9c e0       	ldi	r25, 0x0C	; 12
    3b78:	0e 94 4e 36 	call	0x6c9c	; 0x6c9c <_ZN7TwoWire3endEv>
    3b7c:	62 ec       	ldi	r22, 0xC2	; 194
  Serial.println("POTENZIOMETRI OK");
    3b7e:	79 e0       	ldi	r23, 0x09	; 9
    3b80:	8e e2       	ldi	r24, 0x2E	; 46
    3b82:	9d e0       	ldi	r25, 0x0D	; 13
    3b84:	0e 94 8c 39 	call	0x7318	; 0x7318 <_ZN5Print7printlnEPKc>
    3b88:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
  printLine();
  /*************************KEYPAD*********************/
  gpio.begin(I2C_PCA9534_ADDR);
    3b8c:	60 e2       	ldi	r22, 0x20	; 32
    3b8e:	82 e9       	ldi	r24, 0x92	; 146
    3b90:	9a e0       	ldi	r25, 0x0A	; 10
    3b92:	36 d0       	rcall	.+108    	; 0x3c00 <_ZN7PCA95345beginEh>
  // set REG IOexpander OPREG 11000011,INVREG 00000000,CONFREG 00111100
  gpio.setporteIoExp(0xC3, 0x00, 0x3C);
    3b94:	2c e3       	ldi	r18, 0x3C	; 60
    3b96:	40 e0       	ldi	r20, 0x00	; 0
    3b98:	63 ec       	ldi	r22, 0xC3	; 195
    3b9a:	82 e9       	ldi	r24, 0x92	; 146
    3b9c:	9a e0       	ldi	r25, 0x0A	; 10
    3b9e:	36 d0       	rcall	.+108    	; 0x3c0c <_ZN7PCA953413setporteIoExpEhhh>
    3ba0:	8e ef       	ldi	r24, 0xFE	; 254
  /**************** SETTING INIZIALI ******************/

  stato_procedura = - 2; // set stato di partenza
    3ba2:	9f ef       	ldi	r25, 0xFF	; 255
    3ba4:	90 93 43 0b 	sts	0x0B43, r25	; 0x800b43 <stato_procedura+0x1>
    3ba8:	80 93 42 0b 	sts	0x0B42, r24	; 0x800b42 <stato_procedura>
    3bac:	63 ed       	ldi	r22, 0xD3	; 211
  StatoAttuale = "Starting ....";
    3bae:	79 e0       	ldi	r23, 0x09	; 9
    3bb0:	8a e4       	ldi	r24, 0x4A	; 74
    3bb2:	9b e0       	ldi	r25, 0x0B	; 11
    3bb4:	0e 94 a6 3c 	call	0x794c	; 0x794c <_ZN6StringaSEPKc>
    3bb8:	6a e4       	ldi	r22, 0x4A	; 74
  Serial.println(StatoAttuale);
    3bba:	7b e0       	ldi	r23, 0x0B	; 11
    3bbc:	8e e2       	ldi	r24, 0x2E	; 46
    3bbe:	9d e0       	ldi	r25, 0x0D	; 13
    3bc0:	0e 94 7c 39 	call	0x72f8	; 0x72f8 <_ZN5Print7printlnERK6String>
    3bc4:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
  printLine();
    3bc8:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
  printLine();
    3bcc:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
  printLine();
    3bd0:	ce 01       	movw	r24, r28
  Serial.print("EEPROM utilizzata (byte): ");
  Serial.print(EEPROM.length());
  Serial.println(" ");
  Serial.print("Scrittura Parametri CCEC");

  String app = "";
    3bd2:	01 96       	adiw	r24, 0x01	; 1
    3bd4:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
    3bd8:	26 96       	adiw	r28, 0x06	; 6
  StatoAttuale = "Starting ....";
  Serial.println(StatoAttuale);
  printLine();
  printLine();
  printLine();
}
    3bda:	0f b6       	in	r0, 0x3f	; 63
    3bdc:	f8 94       	cli
    3bde:	de bf       	out	0x3e, r29	; 62
    3be0:	0f be       	out	0x3f, r0	; 63
    3be2:	cd bf       	out	0x3d, r28	; 61
    3be4:	df 91       	pop	r29
    3be6:	cf 91       	pop	r28
    3be8:	1f 91       	pop	r17
    3bea:	0f 91       	pop	r16
    3bec:	ff 90       	pop	r15
    3bee:	ef 90       	pop	r14
    3bf0:	df 90       	pop	r13
    3bf2:	cf 90       	pop	r12
    3bf4:	08 95       	ret

00003bf6 <_ZN7PCA9534C1Ev>:
    3bf6:	fc 01       	movw	r30, r24
	Wire.requestFrom(_i2caddr, 1);
	while (Wire.available()) {
		buff = Wire.read();
	}
	return (buff & (1 << pin)) ? HIGH : LOW;
}
    3bf8:	10 82       	st	Z, r1
    3bfa:	11 82       	std	Z+1, r1	; 0x01
    3bfc:	12 82       	std	Z+2, r1	; 0x02
    3bfe:	08 95       	ret

00003c00 <_ZN7PCA95345beginEh>:
    3c00:	fc 01       	movw	r30, r24
    3c02:	60 83       	st	Z, r22
    3c04:	88 ed       	ldi	r24, 0xD8	; 216
    3c06:	9c e0       	ldi	r25, 0x0C	; 12
    3c08:	0c 94 3f 36 	jmp	0x6c7e	; 0x6c7e <_ZN7TwoWire5beginEv>

00003c0c <_ZN7PCA953413setporteIoExpEhhh>:
    3c0c:	ff 92       	push	r15
    3c0e:	0f 93       	push	r16
    3c10:	1f 93       	push	r17
    3c12:	cf 93       	push	r28
    3c14:	df 93       	push	r29
    3c16:	ec 01       	movw	r28, r24
    3c18:	f6 2e       	mov	r15, r22
    3c1a:	04 2f       	mov	r16, r20
    3c1c:	12 2f       	mov	r17, r18
    3c1e:	68 81       	ld	r22, Y
    3c20:	88 ed       	ldi	r24, 0xD8	; 216
    3c22:	9c e0       	ldi	r25, 0x0C	; 12
    3c24:	0e 94 52 36 	call	0x6ca4	; 0x6ca4 <_ZN7TwoWire17beginTransmissionEh>
    3c28:	61 e0       	ldi	r22, 0x01	; 1
    3c2a:	88 ed       	ldi	r24, 0xD8	; 216
    3c2c:	9c e0       	ldi	r25, 0x0C	; 12
    3c2e:	0e 94 01 36 	call	0x6c02	; 0x6c02 <_ZN7TwoWire5writeEh>
    3c32:	6f 2d       	mov	r22, r15
    3c34:	88 ed       	ldi	r24, 0xD8	; 216
    3c36:	9c e0       	ldi	r25, 0x0C	; 12
    3c38:	0e 94 01 36 	call	0x6c02	; 0x6c02 <_ZN7TwoWire5writeEh>
    3c3c:	88 ed       	ldi	r24, 0xD8	; 216
    3c3e:	9c e0       	ldi	r25, 0x0C	; 12
    3c40:	0e 94 d3 36 	call	0x6da6	; 0x6da6 <_ZN7TwoWire15endTransmissionEv>
    3c44:	68 81       	ld	r22, Y
    3c46:	88 ed       	ldi	r24, 0xD8	; 216
    3c48:	9c e0       	ldi	r25, 0x0C	; 12
    3c4a:	0e 94 52 36 	call	0x6ca4	; 0x6ca4 <_ZN7TwoWire17beginTransmissionEh>
    3c4e:	62 e0       	ldi	r22, 0x02	; 2
    3c50:	88 ed       	ldi	r24, 0xD8	; 216
    3c52:	9c e0       	ldi	r25, 0x0C	; 12
    3c54:	0e 94 01 36 	call	0x6c02	; 0x6c02 <_ZN7TwoWire5writeEh>
    3c58:	60 2f       	mov	r22, r16
    3c5a:	88 ed       	ldi	r24, 0xD8	; 216
    3c5c:	9c e0       	ldi	r25, 0x0C	; 12
    3c5e:	0e 94 01 36 	call	0x6c02	; 0x6c02 <_ZN7TwoWire5writeEh>
    3c62:	88 ed       	ldi	r24, 0xD8	; 216
    3c64:	9c e0       	ldi	r25, 0x0C	; 12
    3c66:	0e 94 d3 36 	call	0x6da6	; 0x6da6 <_ZN7TwoWire15endTransmissionEv>
    3c6a:	8f e3       	ldi	r24, 0x3F	; 63
    3c6c:	9c e9       	ldi	r25, 0x9C	; 156
    3c6e:	01 97       	sbiw	r24, 0x01	; 1
    3c70:	f1 f7       	brne	.-4      	; 0x3c6e <_ZN7PCA953413setporteIoExpEhhh+0x62>
    3c72:	00 c0       	rjmp	.+0      	; 0x3c74 <_ZN7PCA953413setporteIoExpEhhh+0x68>
    3c74:	00 00       	nop
    3c76:	68 81       	ld	r22, Y
    3c78:	88 ed       	ldi	r24, 0xD8	; 216
    3c7a:	9c e0       	ldi	r25, 0x0C	; 12
    3c7c:	0e 94 52 36 	call	0x6ca4	; 0x6ca4 <_ZN7TwoWire17beginTransmissionEh>
    3c80:	63 e0       	ldi	r22, 0x03	; 3
    3c82:	88 ed       	ldi	r24, 0xD8	; 216
    3c84:	9c e0       	ldi	r25, 0x0C	; 12
    3c86:	0e 94 01 36 	call	0x6c02	; 0x6c02 <_ZN7TwoWire5writeEh>
    3c8a:	61 2f       	mov	r22, r17
    3c8c:	88 ed       	ldi	r24, 0xD8	; 216
    3c8e:	9c e0       	ldi	r25, 0x0C	; 12
    3c90:	0e 94 01 36 	call	0x6c02	; 0x6c02 <_ZN7TwoWire5writeEh>
    3c94:	88 ed       	ldi	r24, 0xD8	; 216
    3c96:	9c e0       	ldi	r25, 0x0C	; 12
    3c98:	0e 94 d3 36 	call	0x6da6	; 0x6da6 <_ZN7TwoWire15endTransmissionEv>
    3c9c:	8f e3       	ldi	r24, 0x3F	; 63
    3c9e:	9c e9       	ldi	r25, 0x9C	; 156
    3ca0:	01 97       	sbiw	r24, 0x01	; 1
    3ca2:	f1 f7       	brne	.-4      	; 0x3ca0 <_ZN7PCA953413setporteIoExpEhhh+0x94>
    3ca4:	00 c0       	rjmp	.+0      	; 0x3ca6 <_ZN7PCA953413setporteIoExpEhhh+0x9a>
    3ca6:	00 00       	nop
    3ca8:	df 91       	pop	r29
    3caa:	cf 91       	pop	r28
    3cac:	1f 91       	pop	r17
    3cae:	0f 91       	pop	r16
    3cb0:	ff 90       	pop	r15
    3cb2:	08 95       	ret

00003cb4 <_ZN7PCA953410setCONFREGEh>:
    3cb4:	cf 93       	push	r28
    3cb6:	c6 2f       	mov	r28, r22
    3cb8:	fc 01       	movw	r30, r24
    3cba:	60 81       	ld	r22, Z
    3cbc:	88 ed       	ldi	r24, 0xD8	; 216
    3cbe:	9c e0       	ldi	r25, 0x0C	; 12
    3cc0:	0e 94 52 36 	call	0x6ca4	; 0x6ca4 <_ZN7TwoWire17beginTransmissionEh>
    3cc4:	63 e0       	ldi	r22, 0x03	; 3
    3cc6:	88 ed       	ldi	r24, 0xD8	; 216
    3cc8:	9c e0       	ldi	r25, 0x0C	; 12
    3cca:	0e 94 01 36 	call	0x6c02	; 0x6c02 <_ZN7TwoWire5writeEh>
    3cce:	6c 2f       	mov	r22, r28
    3cd0:	88 ed       	ldi	r24, 0xD8	; 216
    3cd2:	9c e0       	ldi	r25, 0x0C	; 12
    3cd4:	0e 94 01 36 	call	0x6c02	; 0x6c02 <_ZN7TwoWire5writeEh>
    3cd8:	88 ed       	ldi	r24, 0xD8	; 216
    3cda:	9c e0       	ldi	r25, 0x0C	; 12
    3cdc:	cf 91       	pop	r28
    3cde:	0c 94 d3 36 	jmp	0x6da6	; 0x6da6 <_ZN7TwoWire15endTransmissionEv>

00003ce2 <_ZN7PCA953416Read_IP_REGISTEREv>:

uint8_t PCA9534::Read_IP_REGISTER() {
    3ce2:	cf 93       	push	r28
    3ce4:	df 93       	push	r29
    3ce6:	ec 01       	movw	r28, r24
	uint8_t buff = 0;

	//_i2caddr = i2caddr;

	Wire.beginTransmission(_i2caddr);
    3ce8:	68 81       	ld	r22, Y
    3cea:	88 ed       	ldi	r24, 0xD8	; 216
    3cec:	9c e0       	ldi	r25, 0x0C	; 12
    3cee:	0e 94 52 36 	call	0x6ca4	; 0x6ca4 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(PCA9534_IP_REGISTER);
    3cf2:	60 e0       	ldi	r22, 0x00	; 0
    3cf4:	88 ed       	ldi	r24, 0xD8	; 216
    3cf6:	9c e0       	ldi	r25, 0x0C	; 12
    3cf8:	0e 94 01 36 	call	0x6c02	; 0x6c02 <_ZN7TwoWire5writeEh>
	// Wire.write(_port);
	Wire.endTransmission();
    3cfc:	88 ed       	ldi	r24, 0xD8	; 216
    3cfe:	9c e0       	ldi	r25, 0x0C	; 12
    3d00:	0e 94 d3 36 	call	0x6da6	; 0x6da6 <_ZN7TwoWire15endTransmissionEv>

	// We only need to read 1 byte of data to get the pins
	Wire.requestFrom(_i2caddr, 1);
    3d04:	68 81       	ld	r22, Y
    3d06:	70 e0       	ldi	r23, 0x00	; 0
    3d08:	41 e0       	ldi	r20, 0x01	; 1
    3d0a:	50 e0       	ldi	r21, 0x00	; 0
    3d0c:	88 ed       	ldi	r24, 0xD8	; 216
    3d0e:	9c e0       	ldi	r25, 0x0C	; 12
    3d10:	0e 94 d1 36 	call	0x6da2	; 0x6da2 <_ZN7TwoWire11requestFromEii>
	}
	return (buff & (1 << pin)) ? HIGH : LOW;
}

uint8_t PCA9534::Read_IP_REGISTER() {
	uint8_t buff = 0;
    3d14:	c0 e0       	ldi	r28, 0x00	; 0
	// Wire.write(_port);
	Wire.endTransmission();

	// We only need to read 1 byte of data to get the pins
	Wire.requestFrom(_i2caddr, 1);
	while (Wire.available()) {
    3d16:	88 ed       	ldi	r24, 0xD8	; 216
    3d18:	9c e0       	ldi	r25, 0x0C	; 12
    3d1a:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN7TwoWire9availableEv>
    3d1e:	89 2b       	or	r24, r25
    3d20:	31 f0       	breq	.+12     	; 0x3d2e <_ZN7PCA953416Read_IP_REGISTEREv+0x4c>
		buff = Wire.read();
    3d22:	88 ed       	ldi	r24, 0xD8	; 216
    3d24:	9c e0       	ldi	r25, 0x0C	; 12
    3d26:	0e 94 7b 35 	call	0x6af6	; 0x6af6 <_ZN7TwoWire4readEv>
    3d2a:	c8 2f       	mov	r28, r24
	// Wire.write(_port);
	Wire.endTransmission();

	// We only need to read 1 byte of data to get the pins
	Wire.requestFrom(_i2caddr, 1);
	while (Wire.available()) {
    3d2c:	f4 cf       	rjmp	.-24     	; 0x3d16 <_ZN7PCA953416Read_IP_REGISTEREv+0x34>
		buff = Wire.read();
	}
	return buff;
    3d2e:	8c 2f       	mov	r24, r28
    3d30:	df 91       	pop	r29
    3d32:	cf 91       	pop	r28
    3d34:	08 95       	ret

00003d36 <_ZN9NFC_PN532C1Ehh>:
    #endif
    return false;
  }

  return true;
}
    3d36:	cf 93       	push	r28
    3d38:	df 93       	push	r29
    3d3a:	ec 01       	movw	r28, r24
    3d3c:	86 2f       	mov	r24, r22
    3d3e:	6c 83       	std	Y+4, r22	; 0x04
    3d40:	4d 83       	std	Y+5, r20	; 0x05
    3d42:	1d 8a       	std	Y+21, r1	; 0x15
    3d44:	1e 8a       	std	Y+22, r1	; 0x16
    3d46:	60 e0       	ldi	r22, 0x00	; 0
    3d48:	0e 94 2d 3b 	call	0x765a	; 0x765a <pinMode>
    3d4c:	61 e0       	ldi	r22, 0x01	; 1
    3d4e:	8d 81       	ldd	r24, Y+5	; 0x05
    3d50:	df 91       	pop	r29
    3d52:	cf 91       	pop	r28
    3d54:	0c 94 2d 3b 	jmp	0x765a	; 0x765a <pinMode>

00003d58 <_ZN9NFC_PN5325beginEv>:
    3d58:	cf 93       	push	r28
    3d5a:	df 93       	push	r29
    3d5c:	ec 01       	movw	r28, r24
    3d5e:	88 ed       	ldi	r24, 0xD8	; 216
    3d60:	9c e0       	ldi	r25, 0x0C	; 12
    3d62:	0e 94 3f 36 	call	0x6c7e	; 0x6c7e <_ZN7TwoWire5beginEv>
    3d66:	61 e0       	ldi	r22, 0x01	; 1
    3d68:	8d 81       	ldd	r24, Y+5	; 0x05
    3d6a:	0e 94 69 3b 	call	0x76d2	; 0x76d2 <digitalWrite>
    3d6e:	60 e0       	ldi	r22, 0x00	; 0
    3d70:	8d 81       	ldd	r24, Y+5	; 0x05
    3d72:	0e 94 69 3b 	call	0x76d2	; 0x76d2 <digitalWrite>
    3d76:	60 e9       	ldi	r22, 0x90	; 144
    3d78:	71 e0       	ldi	r23, 0x01	; 1
    3d7a:	80 e0       	ldi	r24, 0x00	; 0
    3d7c:	90 e0       	ldi	r25, 0x00	; 0
    3d7e:	0e 94 85 3a 	call	0x750a	; 0x750a <delay>
    3d82:	61 e0       	ldi	r22, 0x01	; 1
    3d84:	8d 81       	ldd	r24, Y+5	; 0x05
    3d86:	0e 94 69 3b 	call	0x76d2	; 0x76d2 <digitalWrite>
    3d8a:	6a e0       	ldi	r22, 0x0A	; 10
    3d8c:	70 e0       	ldi	r23, 0x00	; 0
    3d8e:	80 e0       	ldi	r24, 0x00	; 0
    3d90:	90 e0       	ldi	r25, 0x00	; 0
    3d92:	df 91       	pop	r29
    3d94:	cf 91       	pop	r28
    3d96:	0c 94 85 3a 	jmp	0x750a	; 0x750a <delay>

00003d9a <_ZN9NFC_PN53210GetHexCodeEPKhm>:
    3d9a:	4f 92       	push	r4
    3d9c:	5f 92       	push	r5
    3d9e:	6f 92       	push	r6
    3da0:	7f 92       	push	r7
    3da2:	8f 92       	push	r8
    3da4:	9f 92       	push	r9
    3da6:	af 92       	push	r10
    3da8:	bf 92       	push	r11
    3daa:	ef 92       	push	r14
    3dac:	ff 92       	push	r15
    3dae:	0f 93       	push	r16
    3db0:	1f 93       	push	r17
    3db2:	cf 93       	push	r28
    3db4:	df 93       	push	r29
    3db6:	cd b7       	in	r28, 0x3d	; 61
    3db8:	de b7       	in	r29, 0x3e	; 62
    3dba:	2c 97       	sbiw	r28, 0x0c	; 12
    3dbc:	0f b6       	in	r0, 0x3f	; 63
    3dbe:	f8 94       	cli
    3dc0:	de bf       	out	0x3e, r29	; 62
    3dc2:	0f be       	out	0x3f, r0	; 63
    3dc4:	cd bf       	out	0x3d, r28	; 61
    3dc6:	7c 01       	movw	r14, r24
    3dc8:	5a 01       	movw	r10, r20
    3dca:	28 01       	movw	r4, r16
    3dcc:	39 01       	movw	r6, r18
    3dce:	6f ee       	ldi	r22, 0xEF	; 239
    3dd0:	71 e0       	ldi	r23, 0x01	; 1
    3dd2:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1EPKc>
    3dd6:	85 01       	movw	r16, r10
    3dd8:	81 2c       	mov	r8, r1
    3dda:	91 2c       	mov	r9, r1
    3ddc:	54 01       	movw	r10, r8
    3dde:	84 14       	cp	r8, r4
    3de0:	95 04       	cpc	r9, r5
    3de2:	a6 04       	cpc	r10, r6
    3de4:	b7 04       	cpc	r11, r7
    3de6:	09 f4       	brne	.+2      	; 0x3dea <_ZN9NFC_PN53210GetHexCodeEPKhm+0x50>
    3de8:	46 c0       	rjmp	.+140    	; 0x3e76 <_ZN9NFC_PN53210GetHexCodeEPKhm+0xdc>
    3dea:	f8 01       	movw	r30, r16
    3dec:	61 91       	ld	r22, Z+
    3dee:	8f 01       	movw	r16, r30
    3df0:	40 e1       	ldi	r20, 0x10	; 16
    3df2:	ce 01       	movw	r24, r28
    3df4:	60 31       	cpi	r22, 0x10	; 16
    3df6:	f0 f4       	brcc	.+60     	; 0x3e34 <_ZN9NFC_PN53210GetHexCodeEPKhm+0x9a>
    3df8:	01 96       	adiw	r24, 0x01	; 1
    3dfa:	0e 94 d2 3c 	call	0x79a4	; 0x79a4 <_ZN6StringC1Ehh>
    3dfe:	b7 01       	movw	r22, r14
    3e00:	ce 01       	movw	r24, r28
    3e02:	07 96       	adiw	r24, 0x07	; 7
    3e04:	0e 94 93 3c 	call	0x7926	; 0x7926 <_ZN6StringC1ERKS_>
    3e08:	61 eb       	ldi	r22, 0xB1	; 177
    3e0a:	78 e0       	ldi	r23, 0x08	; 8
    3e0c:	ce 01       	movw	r24, r28
    3e0e:	07 96       	adiw	r24, 0x07	; 7
    3e10:	0e 94 0d 3e 	call	0x7c1a	; 0x7c1a <_ZplRK15StringSumHelperPKc>
    3e14:	be 01       	movw	r22, r28
    3e16:	6f 5f       	subi	r22, 0xFF	; 255
    3e18:	7f 4f       	sbci	r23, 0xFF	; 255
    3e1a:	0e 94 fc 3d 	call	0x7bf8	; 0x7bf8 <_ZplRK15StringSumHelperRK6String>
    3e1e:	bc 01       	movw	r22, r24
    3e20:	c7 01       	movw	r24, r14
    3e22:	0e 94 7e 3c 	call	0x78fc	; 0x78fc <_ZN6StringaSERKS_>
    3e26:	ce 01       	movw	r24, r28
    3e28:	07 96       	adiw	r24, 0x07	; 7
    3e2a:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
    3e2e:	ce 01       	movw	r24, r28
    3e30:	01 96       	adiw	r24, 0x01	; 1
    3e32:	19 c0       	rjmp	.+50     	; 0x3e66 <_ZN9NFC_PN53210GetHexCodeEPKhm+0xcc>
    3e34:	07 96       	adiw	r24, 0x07	; 7
    3e36:	0e 94 d2 3c 	call	0x79a4	; 0x79a4 <_ZN6StringC1Ehh>
    3e3a:	b7 01       	movw	r22, r14
    3e3c:	ce 01       	movw	r24, r28
    3e3e:	01 96       	adiw	r24, 0x01	; 1
    3e40:	0e 94 93 3c 	call	0x7926	; 0x7926 <_ZN6StringC1ERKS_>
    3e44:	be 01       	movw	r22, r28
    3e46:	69 5f       	subi	r22, 0xF9	; 249
    3e48:	7f 4f       	sbci	r23, 0xFF	; 255
    3e4a:	ce 01       	movw	r24, r28
    3e4c:	01 96       	adiw	r24, 0x01	; 1
    3e4e:	0e 94 fc 3d 	call	0x7bf8	; 0x7bf8 <_ZplRK15StringSumHelperRK6String>
    3e52:	bc 01       	movw	r22, r24
    3e54:	c7 01       	movw	r24, r14
    3e56:	0e 94 7e 3c 	call	0x78fc	; 0x78fc <_ZN6StringaSERKS_>
    3e5a:	ce 01       	movw	r24, r28
    3e5c:	01 96       	adiw	r24, 0x01	; 1
    3e5e:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
    3e62:	ce 01       	movw	r24, r28
    3e64:	07 96       	adiw	r24, 0x07	; 7
    3e66:	0e 94 c0 3b 	call	0x7780	; 0x7780 <_ZN6StringD1Ev>
    3e6a:	ff ef       	ldi	r31, 0xFF	; 255
    3e6c:	8f 1a       	sub	r8, r31
    3e6e:	9f 0a       	sbc	r9, r31
    3e70:	af 0a       	sbc	r10, r31
    3e72:	bf 0a       	sbc	r11, r31
    3e74:	b4 cf       	rjmp	.-152    	; 0x3dde <_ZN9NFC_PN53210GetHexCodeEPKhm+0x44>
    3e76:	8e e2       	ldi	r24, 0x2E	; 46
    3e78:	9d e0       	ldi	r25, 0x0D	; 13
    3e7a:	0e 94 69 39 	call	0x72d2	; 0x72d2 <_ZN5Print7printlnEv>
    3e7e:	c7 01       	movw	r24, r14
    3e80:	2c 96       	adiw	r28, 0x0c	; 12
    3e82:	0f b6       	in	r0, 0x3f	; 63
    3e84:	f8 94       	cli
    3e86:	de bf       	out	0x3e, r29	; 62
    3e88:	0f be       	out	0x3f, r0	; 63
    3e8a:	cd bf       	out	0x3d, r28	; 61
    3e8c:	df 91       	pop	r29
    3e8e:	cf 91       	pop	r28
    3e90:	1f 91       	pop	r17
    3e92:	0f 91       	pop	r16
    3e94:	ff 90       	pop	r15
    3e96:	ef 90       	pop	r14
    3e98:	bf 90       	pop	r11
    3e9a:	af 90       	pop	r10
    3e9c:	9f 90       	pop	r9
    3e9e:	8f 90       	pop	r8
    3ea0:	7f 90       	pop	r7
    3ea2:	6f 90       	pop	r6
    3ea4:	5f 90       	pop	r5
    3ea6:	4f 90       	pop	r4
    3ea8:	08 95       	ret

00003eaa <_ZN9NFC_PN5327isreadyEv>:
    3eaa:	fc 01       	movw	r30, r24
    3eac:	84 81       	ldd	r24, Z+4	; 0x04
    3eae:	0e 94 97 3b 	call	0x772e	; 0x772e <digitalRead>
    3eb2:	91 e0       	ldi	r25, 0x01	; 1
    3eb4:	81 11       	cpse	r24, r1
    3eb6:	90 e0       	ldi	r25, 0x00	; 0
    3eb8:	89 2f       	mov	r24, r25
    3eba:	08 95       	ret

00003ebc <_ZN9NFC_PN5329waitreadyEj>:
    3ebc:	cf 92       	push	r12
    3ebe:	df 92       	push	r13
    3ec0:	ef 92       	push	r14
    3ec2:	ff 92       	push	r15
    3ec4:	1f 93       	push	r17
    3ec6:	cf 93       	push	r28
    3ec8:	df 93       	push	r29
    3eca:	6c 01       	movw	r12, r24
    3ecc:	7b 01       	movw	r14, r22
    3ece:	c0 e0       	ldi	r28, 0x00	; 0
    3ed0:	d0 e0       	ldi	r29, 0x00	; 0
    3ed2:	c6 01       	movw	r24, r12
    3ed4:	ea df       	rcall	.-44     	; 0x3eaa <_ZN9NFC_PN5327isreadyEv>
    3ed6:	18 2f       	mov	r17, r24
    3ed8:	81 11       	cpse	r24, r1
    3eda:	15 c0       	rjmp	.+42     	; 0x3f06 <_ZN9NFC_PN5329waitreadyEj+0x4a>
    3edc:	e1 14       	cp	r14, r1
    3ede:	f1 04       	cpc	r15, r1
    3ee0:	59 f0       	breq	.+22     	; 0x3ef8 <_ZN9NFC_PN5329waitreadyEj+0x3c>
    3ee2:	2a 96       	adiw	r28, 0x0a	; 10
    3ee4:	ec 16       	cp	r14, r28
    3ee6:	fd 06       	cpc	r15, r29
    3ee8:	38 f4       	brcc	.+14     	; 0x3ef8 <_ZN9NFC_PN5329waitreadyEj+0x3c>
    3eea:	61 ee       	ldi	r22, 0xE1	; 225
    3eec:	79 e0       	ldi	r23, 0x09	; 9
    3eee:	8e e2       	ldi	r24, 0x2E	; 46
    3ef0:	9d e0       	ldi	r25, 0x0D	; 13
    3ef2:	0e 94 8c 39 	call	0x7318	; 0x7318 <_ZN5Print7printlnEPKc>
    3ef6:	07 c0       	rjmp	.+14     	; 0x3f06 <_ZN9NFC_PN5329waitreadyEj+0x4a>
    3ef8:	6a e0       	ldi	r22, 0x0A	; 10
    3efa:	70 e0       	ldi	r23, 0x00	; 0
    3efc:	80 e0       	ldi	r24, 0x00	; 0
    3efe:	90 e0       	ldi	r25, 0x00	; 0
    3f00:	0e 94 85 3a 	call	0x750a	; 0x750a <delay>
    3f04:	e6 cf       	rjmp	.-52     	; 0x3ed2 <_ZN9NFC_PN5329waitreadyEj+0x16>
    3f06:	81 2f       	mov	r24, r17
    3f08:	df 91       	pop	r29
    3f0a:	cf 91       	pop	r28
    3f0c:	1f 91       	pop	r17
    3f0e:	ff 90       	pop	r15
    3f10:	ef 90       	pop	r14
    3f12:	df 90       	pop	r13
    3f14:	cf 90       	pop	r12
    3f16:	08 95       	ret

00003f18 <_ZN9NFC_PN5328readdataEPhh>:
    3f18:	ff 92       	push	r15
    3f1a:	0f 93       	push	r16
    3f1c:	1f 93       	push	r17
    3f1e:	cf 93       	push	r28
    3f20:	df 93       	push	r29
    3f22:	f6 2e       	mov	r15, r22
    3f24:	07 2f       	mov	r16, r23
    3f26:	14 2f       	mov	r17, r20
    3f28:	62 e0       	ldi	r22, 0x02	; 2
    3f2a:	70 e0       	ldi	r23, 0x00	; 0
    3f2c:	80 e0       	ldi	r24, 0x00	; 0
    3f2e:	90 e0       	ldi	r25, 0x00	; 0
    3f30:	0e 94 85 3a 	call	0x750a	; 0x750a <delay>
    3f34:	42 e0       	ldi	r20, 0x02	; 2
    3f36:	41 0f       	add	r20, r17
    3f38:	64 e2       	ldi	r22, 0x24	; 36
    3f3a:	88 ed       	ldi	r24, 0xD8	; 216
    3f3c:	9c e0       	ldi	r25, 0x0C	; 12
    3f3e:	0e 94 cf 36 	call	0x6d9e	; 0x6d9e <_ZN7TwoWire11requestFromEhh>
    3f42:	88 ed       	ldi	r24, 0xD8	; 216
    3f44:	9c e0       	ldi	r25, 0x0C	; 12
    3f46:	0e 94 7b 35 	call	0x6af6	; 0x6af6 <_ZN7TwoWire4readEv>
    3f4a:	cf 2d       	mov	r28, r15
    3f4c:	d0 2f       	mov	r29, r16
    3f4e:	ce 01       	movw	r24, r28
    3f50:	81 0f       	add	r24, r17
    3f52:	91 1d       	adc	r25, r1
    3f54:	8c 01       	movw	r16, r24
    3f56:	c0 17       	cp	r28, r16
    3f58:	d1 07       	cpc	r29, r17
    3f5a:	61 f0       	breq	.+24     	; 0x3f74 <_ZN9NFC_PN5328readdataEPhh+0x5c>
    3f5c:	61 e0       	ldi	r22, 0x01	; 1
    3f5e:	70 e0       	ldi	r23, 0x00	; 0
    3f60:	80 e0       	ldi	r24, 0x00	; 0
    3f62:	90 e0       	ldi	r25, 0x00	; 0
    3f64:	0e 94 85 3a 	call	0x750a	; 0x750a <delay>
    3f68:	88 ed       	ldi	r24, 0xD8	; 216
    3f6a:	9c e0       	ldi	r25, 0x0C	; 12
    3f6c:	0e 94 7b 35 	call	0x6af6	; 0x6af6 <_ZN7TwoWire4readEv>
    3f70:	89 93       	st	Y+, r24
    3f72:	f1 cf       	rjmp	.-30     	; 0x3f56 <_ZN9NFC_PN5328readdataEPhh+0x3e>
    3f74:	df 91       	pop	r29
    3f76:	cf 91       	pop	r28
    3f78:	1f 91       	pop	r17
    3f7a:	0f 91       	pop	r16
    3f7c:	ff 90       	pop	r15
    3f7e:	08 95       	ret

00003f80 <_ZN9NFC_PN5327readackEv>:
    3f80:	cf 93       	push	r28
    3f82:	df 93       	push	r29
    3f84:	00 d0       	rcall	.+0      	; 0x3f86 <_ZN9NFC_PN5327readackEv+0x6>
    3f86:	00 d0       	rcall	.+0      	; 0x3f88 <_ZN9NFC_PN5327readackEv+0x8>
    3f88:	00 d0       	rcall	.+0      	; 0x3f8a <_ZN9NFC_PN5327readackEv+0xa>
    3f8a:	cd b7       	in	r28, 0x3d	; 61
    3f8c:	de b7       	in	r29, 0x3e	; 62
    3f8e:	46 e0       	ldi	r20, 0x06	; 6
    3f90:	be 01       	movw	r22, r28
    3f92:	6f 5f       	subi	r22, 0xFF	; 255
    3f94:	7f 4f       	sbci	r23, 0xFF	; 255
    3f96:	c0 df       	rcall	.-128    	; 0x3f18 <_ZN9NFC_PN5328readdataEPhh>
    3f98:	46 e0       	ldi	r20, 0x06	; 6
    3f9a:	50 e0       	ldi	r21, 0x00	; 0
    3f9c:	65 e6       	ldi	r22, 0x65	; 101
    3f9e:	71 e0       	ldi	r23, 0x01	; 1
    3fa0:	ce 01       	movw	r24, r28
    3fa2:	01 96       	adiw	r24, 0x01	; 1
    3fa4:	0e 94 d4 42 	call	0x85a8	; 0x85a8 <strncmp>
    3fa8:	21 e0       	ldi	r18, 0x01	; 1
    3faa:	89 2b       	or	r24, r25
    3fac:	09 f0       	breq	.+2      	; 0x3fb0 <_ZN9NFC_PN5327readackEv+0x30>
    3fae:	20 e0       	ldi	r18, 0x00	; 0
    3fb0:	82 2f       	mov	r24, r18
    3fb2:	26 96       	adiw	r28, 0x06	; 6
    3fb4:	0f b6       	in	r0, 0x3f	; 63
    3fb6:	f8 94       	cli
    3fb8:	de bf       	out	0x3e, r29	; 62
    3fba:	0f be       	out	0x3f, r0	; 63
    3fbc:	cd bf       	out	0x3d, r28	; 61
    3fbe:	df 91       	pop	r29
    3fc0:	cf 91       	pop	r28
    3fc2:	08 95       	ret

00003fc4 <_ZL8i2c_sendh>:
    3fc4:	68 2f       	mov	r22, r24
    3fc6:	88 ed       	ldi	r24, 0xD8	; 216
    3fc8:	9c e0       	ldi	r25, 0x0C	; 12
    3fca:	0c 94 01 36 	jmp	0x6c02	; 0x6c02 <_ZN7TwoWire5writeEh>

00003fce <_ZN9NFC_PN53212writecommandEPhh>:
    3fce:	cf 92       	push	r12
    3fd0:	df 92       	push	r13
    3fd2:	ef 92       	push	r14
    3fd4:	ff 92       	push	r15
    3fd6:	0f 93       	push	r16
    3fd8:	1f 93       	push	r17
    3fda:	cf 93       	push	r28
    3fdc:	df 93       	push	r29
    3fde:	7b 01       	movw	r14, r22
    3fe0:	c1 e0       	ldi	r28, 0x01	; 1
    3fe2:	c4 0f       	add	r28, r20
    3fe4:	62 e0       	ldi	r22, 0x02	; 2
    3fe6:	70 e0       	ldi	r23, 0x00	; 0
    3fe8:	80 e0       	ldi	r24, 0x00	; 0
    3fea:	90 e0       	ldi	r25, 0x00	; 0
    3fec:	0e 94 85 3a 	call	0x750a	; 0x750a <delay>
    3ff0:	64 e2       	ldi	r22, 0x24	; 36
    3ff2:	70 e0       	ldi	r23, 0x00	; 0
    3ff4:	88 ed       	ldi	r24, 0xD8	; 216
    3ff6:	9c e0       	ldi	r25, 0x0C	; 12
    3ff8:	0e 94 5c 36 	call	0x6cb8	; 0x6cb8 <_ZN7TwoWire17beginTransmissionEi>
    3ffc:	80 e0       	ldi	r24, 0x00	; 0
    3ffe:	e2 df       	rcall	.-60     	; 0x3fc4 <_ZL8i2c_sendh>
    4000:	80 e0       	ldi	r24, 0x00	; 0
    4002:	e0 df       	rcall	.-64     	; 0x3fc4 <_ZL8i2c_sendh>
    4004:	8f ef       	ldi	r24, 0xFF	; 255
    4006:	de df       	rcall	.-68     	; 0x3fc4 <_ZL8i2c_sendh>
    4008:	8c 2f       	mov	r24, r28
    400a:	dc df       	rcall	.-72     	; 0x3fc4 <_ZL8i2c_sendh>
    400c:	8c 2f       	mov	r24, r28
    400e:	81 95       	neg	r24
    4010:	d9 df       	rcall	.-78     	; 0x3fc4 <_ZL8i2c_sendh>
    4012:	84 ed       	ldi	r24, 0xD4	; 212
    4014:	d7 df       	rcall	.-82     	; 0x3fc4 <_ZL8i2c_sendh>
    4016:	c1 2c       	mov	r12, r1
    4018:	83 ed       	ldi	r24, 0xD3	; 211
    401a:	d8 2e       	mov	r13, r24
    401c:	d0 e0       	ldi	r29, 0x00	; 0
    401e:	21 97       	sbiw	r28, 0x01	; 1
    4020:	0c 2d       	mov	r16, r12
    4022:	10 e0       	ldi	r17, 0x00	; 0
    4024:	0c 17       	cp	r16, r28
    4026:	1d 07       	cpc	r17, r29
    4028:	54 f4       	brge	.+20     	; 0x403e <_ZN9NFC_PN53212writecommandEPhh+0x70>
    402a:	0e 0d       	add	r16, r14
    402c:	1f 1d       	adc	r17, r15
    402e:	f8 01       	movw	r30, r16
    4030:	80 81       	ld	r24, Z
    4032:	c8 df       	rcall	.-112    	; 0x3fc4 <_ZL8i2c_sendh>
    4034:	f8 01       	movw	r30, r16
    4036:	80 81       	ld	r24, Z
    4038:	d8 0e       	add	r13, r24
    403a:	c3 94       	inc	r12
    403c:	f1 cf       	rjmp	.-30     	; 0x4020 <_ZN9NFC_PN53212writecommandEPhh+0x52>
    403e:	8d 2d       	mov	r24, r13
    4040:	80 95       	com	r24
    4042:	c0 df       	rcall	.-128    	; 0x3fc4 <_ZL8i2c_sendh>
    4044:	80 e0       	ldi	r24, 0x00	; 0
    4046:	be df       	rcall	.-132    	; 0x3fc4 <_ZL8i2c_sendh>
    4048:	88 ed       	ldi	r24, 0xD8	; 216
    404a:	9c e0       	ldi	r25, 0x0C	; 12
    404c:	df 91       	pop	r29
    404e:	cf 91       	pop	r28
    4050:	1f 91       	pop	r17
    4052:	0f 91       	pop	r16
    4054:	ff 90       	pop	r15
    4056:	ef 90       	pop	r14
    4058:	df 90       	pop	r13
    405a:	cf 90       	pop	r12
    405c:	0c 94 d3 36 	jmp	0x6da6	; 0x6da6 <_ZN7TwoWire15endTransmissionEv>

00004060 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>:
    4060:	0f 93       	push	r16
    4062:	1f 93       	push	r17
    4064:	cf 93       	push	r28
    4066:	df 93       	push	r29
    4068:	ec 01       	movw	r28, r24
    406a:	89 01       	movw	r16, r18
    406c:	b0 df       	rcall	.-160    	; 0x3fce <_ZN9NFC_PN53212writecommandEPhh>
    406e:	b8 01       	movw	r22, r16
    4070:	ce 01       	movw	r24, r28
    4072:	24 df       	rcall	.-440    	; 0x3ebc <_ZN9NFC_PN5329waitreadyEj>
    4074:	81 11       	cpse	r24, r1
    4076:	02 c0       	rjmp	.+4      	; 0x407c <_ZN9NFC_PN53219sendCommandCheckAckEPhhj+0x1c>
    4078:	80 e0       	ldi	r24, 0x00	; 0
    407a:	0e c0       	rjmp	.+28     	; 0x4098 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj+0x38>
    407c:	ce 01       	movw	r24, r28
    407e:	80 df       	rcall	.-256    	; 0x3f80 <_ZN9NFC_PN5327readackEv>
    4080:	88 23       	and	r24, r24
    4082:	d1 f3       	breq	.-12     	; 0x4078 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj+0x18>
    4084:	9d 89       	ldd	r25, Y+21	; 0x15
    4086:	99 23       	and	r25, r25
    4088:	39 f0       	breq	.+14     	; 0x4098 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj+0x38>
    408a:	b8 01       	movw	r22, r16
    408c:	ce 01       	movw	r24, r28
    408e:	df 91       	pop	r29
    4090:	cf 91       	pop	r28
    4092:	1f 91       	pop	r17
    4094:	0f 91       	pop	r16
    4096:	12 cf       	rjmp	.-476    	; 0x3ebc <_ZN9NFC_PN5329waitreadyEj>
    4098:	df 91       	pop	r29
    409a:	cf 91       	pop	r28
    409c:	1f 91       	pop	r17
    409e:	0f 91       	pop	r16
    40a0:	08 95       	ret

000040a2 <_ZN9NFC_PN53218getFirmwareVersionEv>:
    40a2:	cf 93       	push	r28
    40a4:	df 93       	push	r29
    40a6:	ec 01       	movw	r28, r24
    40a8:	82 e0       	ldi	r24, 0x02	; 2
    40aa:	80 93 df 0b 	sts	0x0BDF, r24	; 0x800bdf <pn532_packetbuffer>
    40ae:	28 ee       	ldi	r18, 0xE8	; 232
    40b0:	33 e0       	ldi	r19, 0x03	; 3
    40b2:	41 e0       	ldi	r20, 0x01	; 1
    40b4:	6f ed       	ldi	r22, 0xDF	; 223
    40b6:	7b e0       	ldi	r23, 0x0B	; 11
    40b8:	ce 01       	movw	r24, r28
    40ba:	d2 df       	rcall	.-92     	; 0x4060 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    40bc:	81 11       	cpse	r24, r1
    40be:	04 c0       	rjmp	.+8      	; 0x40c8 <_ZN9NFC_PN53218getFirmwareVersionEv+0x26>
    40c0:	60 e0       	ldi	r22, 0x00	; 0
    40c2:	70 e0       	ldi	r23, 0x00	; 0
    40c4:	cb 01       	movw	r24, r22
    40c6:	32 c0       	rjmp	.+100    	; 0x412c <__stack+0x2d>
    40c8:	4c e0       	ldi	r20, 0x0C	; 12
    40ca:	6f ed       	ldi	r22, 0xDF	; 223
    40cc:	7b e0       	ldi	r23, 0x0B	; 11
    40ce:	ce 01       	movw	r24, r28
    40d0:	23 df       	rcall	.-442    	; 0x3f18 <_ZN9NFC_PN5328readdataEPhh>
    40d2:	46 e0       	ldi	r20, 0x06	; 6
    40d4:	50 e0       	ldi	r21, 0x00	; 0
    40d6:	6f e5       	ldi	r22, 0x5F	; 95
    40d8:	71 e0       	ldi	r23, 0x01	; 1
    40da:	8f ed       	ldi	r24, 0xDF	; 223
    40dc:	9b e0       	ldi	r25, 0x0B	; 11
    40de:	0e 94 d4 42 	call	0x85a8	; 0x85a8 <strncmp>
    40e2:	89 2b       	or	r24, r25
    40e4:	69 f7       	brne	.-38     	; 0x40c0 <_ZN9NFC_PN53218getFirmwareVersionEv+0x1e>
    40e6:	8d 89       	ldd	r24, Y+21	; 0x15
    40e8:	81 11       	cpse	r24, r1
    40ea:	03 c0       	rjmp	.+6      	; 0x40f2 <_ZN9NFC_PN53218getFirmwareVersionEv+0x50>
    40ec:	e7 e0       	ldi	r30, 0x07	; 7
    40ee:	f0 e0       	ldi	r31, 0x00	; 0
    40f0:	02 c0       	rjmp	.+4      	; 0x40f6 <_ZN9NFC_PN53218getFirmwareVersionEv+0x54>
    40f2:	e6 e0       	ldi	r30, 0x06	; 6
    40f4:	f0 e0       	ldi	r31, 0x00	; 0
    40f6:	e1 52       	subi	r30, 0x21	; 33
    40f8:	f4 4f       	sbci	r31, 0xF4	; 244
    40fa:	60 81       	ld	r22, Z
    40fc:	86 2f       	mov	r24, r22
    40fe:	90 e0       	ldi	r25, 0x00	; 0
    4100:	a0 e0       	ldi	r26, 0x00	; 0
    4102:	b0 e0       	ldi	r27, 0x00	; 0
    4104:	ba 2f       	mov	r27, r26
    4106:	a9 2f       	mov	r26, r25
    4108:	98 2f       	mov	r25, r24
    410a:	88 27       	eor	r24, r24
    410c:	21 81       	ldd	r18, Z+1	; 0x01
    410e:	82 2b       	or	r24, r18
    4110:	ba 2f       	mov	r27, r26
    4112:	a9 2f       	mov	r26, r25
    4114:	98 2f       	mov	r25, r24
    4116:	88 27       	eor	r24, r24
    4118:	22 81       	ldd	r18, Z+2	; 0x02
    411a:	82 2b       	or	r24, r18
    411c:	ba 2f       	mov	r27, r26
    411e:	a9 2f       	mov	r26, r25
    4120:	98 2f       	mov	r25, r24
    4122:	88 27       	eor	r24, r24
    4124:	23 81       	ldd	r18, Z+3	; 0x03
    4126:	bc 01       	movw	r22, r24
    4128:	cd 01       	movw	r24, r26
    412a:	62 2b       	or	r22, r18
    412c:	df 91       	pop	r29
    412e:	cf 91       	pop	r28
    4130:	08 95       	ret

00004132 <_ZN9NFC_PN5329SAMConfigEv>:
    4132:	cf 93       	push	r28
    4134:	df 93       	push	r29
    4136:	ec 01       	movw	r28, r24
    4138:	94 e1       	ldi	r25, 0x14	; 20
    413a:	90 93 df 0b 	sts	0x0BDF, r25	; 0x800bdf <pn532_packetbuffer>
    413e:	81 e0       	ldi	r24, 0x01	; 1
    4140:	80 93 e0 0b 	sts	0x0BE0, r24	; 0x800be0 <pn532_packetbuffer+0x1>
    4144:	90 93 e1 0b 	sts	0x0BE1, r25	; 0x800be1 <pn532_packetbuffer+0x2>
    4148:	80 93 e2 0b 	sts	0x0BE2, r24	; 0x800be2 <pn532_packetbuffer+0x3>
    414c:	28 ee       	ldi	r18, 0xE8	; 232
    414e:	33 e0       	ldi	r19, 0x03	; 3
    4150:	44 e0       	ldi	r20, 0x04	; 4
    4152:	6f ed       	ldi	r22, 0xDF	; 223
    4154:	7b e0       	ldi	r23, 0x0B	; 11
    4156:	ce 01       	movw	r24, r28
    4158:	83 df       	rcall	.-250    	; 0x4060 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    415a:	88 23       	and	r24, r24
    415c:	a9 f0       	breq	.+42     	; 0x4188 <_ZN9NFC_PN5329SAMConfigEv+0x56>
    415e:	48 e0       	ldi	r20, 0x08	; 8
    4160:	6f ed       	ldi	r22, 0xDF	; 223
    4162:	7b e0       	ldi	r23, 0x0B	; 11
    4164:	ce 01       	movw	r24, r28
    4166:	d8 de       	rcall	.-592    	; 0x3f18 <_ZN9NFC_PN5328readdataEPhh>
    4168:	8d 89       	ldd	r24, Y+21	; 0x15
    416a:	81 11       	cpse	r24, r1
    416c:	03 c0       	rjmp	.+6      	; 0x4174 <_ZN9NFC_PN5329SAMConfigEv+0x42>
    416e:	86 e0       	ldi	r24, 0x06	; 6
    4170:	90 e0       	ldi	r25, 0x00	; 0
    4172:	02 c0       	rjmp	.+4      	; 0x4178 <_ZN9NFC_PN5329SAMConfigEv+0x46>
    4174:	85 e0       	ldi	r24, 0x05	; 5
    4176:	90 e0       	ldi	r25, 0x00	; 0
    4178:	fc 01       	movw	r30, r24
    417a:	e1 52       	subi	r30, 0x21	; 33
    417c:	f4 4f       	sbci	r31, 0xF4	; 244
    417e:	81 e0       	ldi	r24, 0x01	; 1
    4180:	90 81       	ld	r25, Z
    4182:	95 31       	cpi	r25, 0x15	; 21
    4184:	09 f0       	breq	.+2      	; 0x4188 <_ZN9NFC_PN5329SAMConfigEv+0x56>
    4186:	80 e0       	ldi	r24, 0x00	; 0
    4188:	df 91       	pop	r29
    418a:	cf 91       	pop	r28
    418c:	08 95       	ret

0000418e <_ZN9NFC_PN53227setPassiveActivationRetriesEh>:
    418e:	ef ed       	ldi	r30, 0xDF	; 223
    4190:	fb e0       	ldi	r31, 0x0B	; 11
    4192:	22 e3       	ldi	r18, 0x32	; 50
    4194:	20 83       	st	Z, r18
    4196:	25 e0       	ldi	r18, 0x05	; 5
    4198:	21 83       	std	Z+1, r18	; 0x01
    419a:	2f ef       	ldi	r18, 0xFF	; 255
    419c:	22 83       	std	Z+2, r18	; 0x02
    419e:	21 e0       	ldi	r18, 0x01	; 1
    41a0:	23 83       	std	Z+3, r18	; 0x03
    41a2:	64 83       	std	Z+4, r22	; 0x04
    41a4:	28 ee       	ldi	r18, 0xE8	; 232
    41a6:	33 e0       	ldi	r19, 0x03	; 3
    41a8:	45 e0       	ldi	r20, 0x05	; 5
    41aa:	bf 01       	movw	r22, r30
    41ac:	59 cf       	rjmp	.-334    	; 0x4060 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>

000041ae <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j>:
    41ae:	af 92       	push	r10
    41b0:	bf 92       	push	r11
    41b2:	cf 92       	push	r12
    41b4:	df 92       	push	r13
    41b6:	ef 92       	push	r14
    41b8:	ff 92       	push	r15
    41ba:	0f 93       	push	r16
    41bc:	1f 93       	push	r17
    41be:	cf 93       	push	r28
    41c0:	df 93       	push	r29
    41c2:	ec 01       	movw	r28, r24
    41c4:	7a 01       	movw	r14, r20
    41c6:	59 01       	movw	r10, r18
    41c8:	68 01       	movw	r12, r16
    41ca:	8a e4       	ldi	r24, 0x4A	; 74
    41cc:	80 93 df 0b 	sts	0x0BDF, r24	; 0x800bdf <pn532_packetbuffer>
    41d0:	81 e0       	ldi	r24, 0x01	; 1
    41d2:	80 93 e0 0b 	sts	0x0BE0, r24	; 0x800be0 <pn532_packetbuffer+0x1>
    41d6:	60 93 e1 0b 	sts	0x0BE1, r22	; 0x800be1 <pn532_packetbuffer+0x2>
    41da:	98 01       	movw	r18, r16
    41dc:	43 e0       	ldi	r20, 0x03	; 3
    41de:	6f ed       	ldi	r22, 0xDF	; 223
    41e0:	7b e0       	ldi	r23, 0x0B	; 11
    41e2:	ce 01       	movw	r24, r28
    41e4:	3d df       	rcall	.-390    	; 0x4060 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    41e6:	18 2f       	mov	r17, r24
    41e8:	88 23       	and	r24, r24
    41ea:	41 f1       	breq	.+80     	; 0x423c <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x8e>
    41ec:	8d 89       	ldd	r24, Y+21	; 0x15
    41ee:	88 23       	and	r24, r24
    41f0:	79 f0       	breq	.+30     	; 0x4210 <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x62>
    41f2:	44 e1       	ldi	r20, 0x14	; 20
    41f4:	6f ed       	ldi	r22, 0xDF	; 223
    41f6:	7b e0       	ldi	r23, 0x0B	; 11
    41f8:	ce 01       	movw	r24, r28
    41fa:	8e de       	rcall	.-740    	; 0x3f18 <_ZN9NFC_PN5328readdataEPhh>
    41fc:	80 91 e6 0b 	lds	r24, 0x0BE6	; 0x800be6 <pn532_packetbuffer+0x7>
    4200:	81 30       	cpi	r24, 0x01	; 1
    4202:	e1 f4       	brne	.+56     	; 0x423c <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x8e>
    4204:	80 91 eb 0b 	lds	r24, 0x0BEB	; 0x800beb <pn532_packetbuffer+0xc>
    4208:	f5 01       	movw	r30, r10
    420a:	80 83       	st	Z, r24
    420c:	80 e0       	ldi	r24, 0x00	; 0
    420e:	06 c0       	rjmp	.+12     	; 0x421c <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x6e>
    4210:	b6 01       	movw	r22, r12
    4212:	ce 01       	movw	r24, r28
    4214:	53 de       	rcall	.-858    	; 0x3ebc <_ZN9NFC_PN5329waitreadyEj>
    4216:	81 11       	cpse	r24, r1
    4218:	ec cf       	rjmp	.-40     	; 0x41f2 <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x44>
    421a:	10 c0       	rjmp	.+32     	; 0x423c <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x8e>
    421c:	90 91 eb 0b 	lds	r25, 0x0BEB	; 0x800beb <pn532_packetbuffer+0xc>
    4220:	89 17       	cp	r24, r25
    4222:	68 f4       	brcc	.+26     	; 0x423e <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x90>
    4224:	28 2f       	mov	r18, r24
    4226:	30 e0       	ldi	r19, 0x00	; 0
    4228:	f9 01       	movw	r30, r18
    422a:	e1 52       	subi	r30, 0x21	; 33
    422c:	f4 4f       	sbci	r31, 0xF4	; 244
    422e:	95 85       	ldd	r25, Z+13	; 0x0d
    4230:	f7 01       	movw	r30, r14
    4232:	e2 0f       	add	r30, r18
    4234:	f3 1f       	adc	r31, r19
    4236:	90 83       	st	Z, r25
    4238:	8f 5f       	subi	r24, 0xFF	; 255
    423a:	f0 cf       	rjmp	.-32     	; 0x421c <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x6e>
    423c:	10 e0       	ldi	r17, 0x00	; 0
    423e:	81 2f       	mov	r24, r17
    4240:	df 91       	pop	r29
    4242:	cf 91       	pop	r28
    4244:	1f 91       	pop	r17
    4246:	0f 91       	pop	r16
    4248:	ff 90       	pop	r15
    424a:	ef 90       	pop	r14
    424c:	df 90       	pop	r13
    424e:	cf 90       	pop	r12
    4250:	bf 90       	pop	r11
    4252:	af 90       	pop	r10
    4254:	08 95       	ret

00004256 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_>:

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
uint8_t NFC_PN532::mifareclassic_AuthenticateBlock (uint8_t * uid, uint8_t uidLen, uint32_t blockNumber, uint8_t keyNumber, uint8_t * keyData)
{
    4256:	af 92       	push	r10
    4258:	bf 92       	push	r11
    425a:	cf 92       	push	r12
    425c:	df 92       	push	r13
    425e:	ef 92       	push	r14
    4260:	0f 93       	push	r16
    4262:	1f 93       	push	r17
    4264:	cf 93       	push	r28
    4266:	df 93       	push	r29
    4268:	ec 01       	movw	r28, r24
    426a:	14 2f       	mov	r17, r20
  uint8_t len;
  uint8_t i;

  // Hang on to the key and uid data
  memcpy (_key, keyData, 6);
    426c:	5c 01       	movw	r10, r24
    426e:	8e e0       	ldi	r24, 0x0E	; 14
    4270:	a8 0e       	add	r10, r24
    4272:	b1 1c       	adc	r11, r1
    4274:	86 e0       	ldi	r24, 0x06	; 6
    4276:	f6 01       	movw	r30, r12
    4278:	d5 01       	movw	r26, r10
    427a:	01 90       	ld	r0, Z+
    427c:	0d 92       	st	X+, r0
    427e:	8a 95       	dec	r24
    4280:	e1 f7       	brne	.-8      	; 0x427a <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x24>
  memcpy (_uid, uid, uidLen);
    4282:	50 e0       	ldi	r21, 0x00	; 0
    4284:	ce 01       	movw	r24, r28
    4286:	06 96       	adiw	r24, 0x06	; 6
    4288:	0e 94 bb 42 	call	0x8576	; 0x8576 <memcpy>
  _uidLen = uidLen;
    428c:	1d 87       	std	Y+13, r17	; 0x0d
    PN532DEBUGPRINT.print(F("Using authentication KEY "));PN532DEBUGPRINT.print(keyNumber ? 'B' : 'A');PN532DEBUGPRINT.print(F(": "));
    NFC_PN532::PrintHex(_key, 6);
  #endif

  // Prepare the authentication command //
  pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;   /* Data Exchange Header */
    428e:	80 e4       	ldi	r24, 0x40	; 64
    4290:	80 93 df 0b 	sts	0x0BDF, r24	; 0x800bdf <pn532_packetbuffer>
  pn532_packetbuffer[1] = 1;                              /* Max card numbers */
    4294:	81 e0       	ldi	r24, 0x01	; 1
    4296:	80 93 e0 0b 	sts	0x0BE0, r24	; 0x800be0 <pn532_packetbuffer+0x1>
  pn532_packetbuffer[2] = (keyNumber) ? MIFARE_CMD_AUTH_B : MIFARE_CMD_AUTH_A;
    429a:	e1 10       	cpse	r14, r1
    429c:	02 c0       	rjmp	.+4      	; 0x42a2 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x4c>
    429e:	80 e6       	ldi	r24, 0x60	; 96
    42a0:	01 c0       	rjmp	.+2      	; 0x42a4 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x4e>
    42a2:	81 e6       	ldi	r24, 0x61	; 97
    42a4:	80 93 e1 0b 	sts	0x0BE1, r24	; 0x800be1 <pn532_packetbuffer+0x2>
  pn532_packetbuffer[3] = blockNumber;                    /* Block Number (1K = 0..63, 4K = 0..255 */
    42a8:	00 93 e2 0b 	sts	0x0BE2, r16	; 0x800be2 <pn532_packetbuffer+0x3>
  memcpy (pn532_packetbuffer+4, _key, 6);
    42ac:	86 e0       	ldi	r24, 0x06	; 6
    42ae:	f5 01       	movw	r30, r10
    42b0:	a3 ee       	ldi	r26, 0xE3	; 227
    42b2:	bb e0       	ldi	r27, 0x0B	; 11
    42b4:	01 90       	ld	r0, Z+
    42b6:	0d 92       	st	X+, r0
    42b8:	8a 95       	dec	r24
    42ba:	e1 f7       	brne	.-8      	; 0x42b4 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x5e>
  for (i = 0; i < _uidLen; i++)
    42bc:	80 e0       	ldi	r24, 0x00	; 0
    42be:	4d 85       	ldd	r20, Y+13	; 0x0d
    42c0:	84 17       	cp	r24, r20
    42c2:	60 f4       	brcc	.+24     	; 0x42dc <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x86>
  {
    pn532_packetbuffer[10+i] = _uid[i];                /* 4 byte card ID */
    42c4:	28 2f       	mov	r18, r24
    42c6:	30 e0       	ldi	r19, 0x00	; 0
    42c8:	fe 01       	movw	r30, r28
    42ca:	e2 0f       	add	r30, r18
    42cc:	f3 1f       	adc	r31, r19
    42ce:	96 81       	ldd	r25, Z+6	; 0x06
    42d0:	f9 01       	movw	r30, r18
    42d2:	e1 52       	subi	r30, 0x21	; 33
    42d4:	f4 4f       	sbci	r31, 0xF4	; 244
    42d6:	92 87       	std	Z+10, r25	; 0x0a
  pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;   /* Data Exchange Header */
  pn532_packetbuffer[1] = 1;                              /* Max card numbers */
  pn532_packetbuffer[2] = (keyNumber) ? MIFARE_CMD_AUTH_B : MIFARE_CMD_AUTH_A;
  pn532_packetbuffer[3] = blockNumber;                    /* Block Number (1K = 0..63, 4K = 0..255 */
  memcpy (pn532_packetbuffer+4, _key, 6);
  for (i = 0; i < _uidLen; i++)
    42d8:	8f 5f       	subi	r24, 0xFF	; 255
    42da:	f1 cf       	rjmp	.-30     	; 0x42be <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x68>
  {
    pn532_packetbuffer[10+i] = _uid[i];                /* 4 byte card ID */
  }

  if (! sendCommandCheckAck(pn532_packetbuffer, 10+_uidLen))
    42dc:	46 5f       	subi	r20, 0xF6	; 246
    42de:	28 ee       	ldi	r18, 0xE8	; 232
    42e0:	33 e0       	ldi	r19, 0x03	; 3
    42e2:	6f ed       	ldi	r22, 0xDF	; 223
    42e4:	7b e0       	ldi	r23, 0x0B	; 11
    42e6:	ce 01       	movw	r24, r28
    42e8:	bb de       	rcall	.-650    	; 0x4060 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    42ea:	88 23       	and	r24, r24
    42ec:	49 f0       	breq	.+18     	; 0x4300 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0xaa>
    return 0;

  // Read the response packet
  readdata(pn532_packetbuffer, 12);
    42ee:	4c e0       	ldi	r20, 0x0C	; 12
    42f0:	6f ed       	ldi	r22, 0xDF	; 223
    42f2:	7b e0       	ldi	r23, 0x0B	; 11
    42f4:	ce 01       	movw	r24, r28
    42f6:	10 de       	rcall	.-992    	; 0x3f18 <_ZN9NFC_PN5328readdataEPhh>
  {
    pn532_packetbuffer[10+i] = _uid[i];                /* 4 byte card ID */
  }

  if (! sendCommandCheckAck(pn532_packetbuffer, 10+_uidLen))
    return 0;
    42f8:	81 e0       	ldi	r24, 0x01	; 1
    42fa:	90 91 e6 0b 	lds	r25, 0x0BE6	; 0x800be6 <pn532_packetbuffer+0x7>
    42fe:	91 11       	cpse	r25, r1
    4300:	80 e0       	ldi	r24, 0x00	; 0
    #endif
    return 0;
  }

  return 1;
}
    4302:	df 91       	pop	r29
    4304:	cf 91       	pop	r28
    4306:	1f 91       	pop	r17
    4308:	0f 91       	pop	r16
    430a:	ef 90       	pop	r14
    430c:	df 90       	pop	r13
    430e:	cf 90       	pop	r12
    4310:	bf 90       	pop	r11
    4312:	af 90       	pop	r10
    4314:	08 95       	ret

00004316 <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh>:

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
uint8_t NFC_PN532::mifareclassic_ReadDataBlock (uint8_t blockNumber, uint8_t * data)
{
    4316:	0f 93       	push	r16
    4318:	1f 93       	push	r17
    431a:	cf 93       	push	r28
    431c:	df 93       	push	r29
    431e:	ec 01       	movw	r28, r24
    4320:	8a 01       	movw	r16, r20
  #ifdef MIFAREDEBUG
    PN532DEBUGPRINT.print(F("Trying to read 16 bytes from block "));PN532DEBUGPRINT.println(blockNumber);
  #endif

  /* Prepare the command */
  pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;
    4322:	80 e4       	ldi	r24, 0x40	; 64
    4324:	80 93 df 0b 	sts	0x0BDF, r24	; 0x800bdf <pn532_packetbuffer>
  pn532_packetbuffer[1] = 1;                      /* Card number */
    4328:	81 e0       	ldi	r24, 0x01	; 1
    432a:	80 93 e0 0b 	sts	0x0BE0, r24	; 0x800be0 <pn532_packetbuffer+0x1>
  pn532_packetbuffer[2] = MIFARE_CMD_READ;        /* Mifare Read command = 0x30 */
    432e:	80 e3       	ldi	r24, 0x30	; 48
    4330:	80 93 e1 0b 	sts	0x0BE1, r24	; 0x800be1 <pn532_packetbuffer+0x2>
  pn532_packetbuffer[3] = blockNumber;            /* Block Number (0..63 for 1K, 0..255 for 4K) */
    4334:	60 93 e2 0b 	sts	0x0BE2, r22	; 0x800be2 <pn532_packetbuffer+0x3>

  /* Send the command */
  if (! sendCommandCheckAck(pn532_packetbuffer, 4))
    4338:	28 ee       	ldi	r18, 0xE8	; 232
    433a:	33 e0       	ldi	r19, 0x03	; 3
    433c:	44 e0       	ldi	r20, 0x04	; 4
    433e:	6f ed       	ldi	r22, 0xDF	; 223
    4340:	7b e0       	ldi	r23, 0x0B	; 11
    4342:	ce 01       	movw	r24, r28
    4344:	8d de       	rcall	.-742    	; 0x4060 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    4346:	81 11       	cpse	r24, r1
    4348:	02 c0       	rjmp	.+4      	; 0x434e <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh+0x38>
  {
    #ifdef MIFAREDEBUG
      PN532DEBUGPRINT.println(F("Failed to receive ACK for read command"));
    #endif
    return 0;
    434a:	80 e0       	ldi	r24, 0x00	; 0
    434c:	12 c0       	rjmp	.+36     	; 0x4372 <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh+0x5c>
  }

  /* Read the response packet */
  readdata(pn532_packetbuffer, 26);
    434e:	4a e1       	ldi	r20, 0x1A	; 26
    4350:	6f ed       	ldi	r22, 0xDF	; 223
    4352:	7b e0       	ldi	r23, 0x0B	; 11
    4354:	ce 01       	movw	r24, r28
    4356:	e0 dd       	rcall	.-1088   	; 0x3f18 <_ZN9NFC_PN5328readdataEPhh>

  /* If byte 8 isn't 0x00 we probably have an error */
  if (pn532_packetbuffer[7] != 0x00)
    4358:	80 91 e6 0b 	lds	r24, 0x0BE6	; 0x800be6 <pn532_packetbuffer+0x7>
    435c:	81 11       	cpse	r24, r1
    435e:	f5 cf       	rjmp	.-22     	; 0x434a <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh+0x34>
    return 0;
  }

  /* Copy the 16 data bytes to the output buffer        */
  /* Block content starts at byte 9 of a valid response */
  memcpy (data, pn532_packetbuffer+8, 16);
    4360:	80 e1       	ldi	r24, 0x10	; 16
    4362:	e7 ee       	ldi	r30, 0xE7	; 231
    4364:	fb e0       	ldi	r31, 0x0B	; 11
    4366:	d8 01       	movw	r26, r16
    4368:	01 90       	ld	r0, Z+
    436a:	0d 92       	st	X+, r0
    436c:	8a 95       	dec	r24
    436e:	e1 f7       	brne	.-8      	; 0x4368 <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh+0x52>
    PN532DEBUGPRINT.print(F("Block "));
    PN532DEBUGPRINT.println(blockNumber);
    NFC_PN532::PrintHexChar(data, 16);
  #endif

  return 1;
    4370:	81 e0       	ldi	r24, 0x01	; 1
}
    4372:	df 91       	pop	r29
    4374:	cf 91       	pop	r28
    4376:	1f 91       	pop	r17
    4378:	0f 91       	pop	r16
    437a:	08 95       	ret

0000437c <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh>:

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
uint8_t NFC_PN532::mifareclassic_WriteDataBlock (uint8_t blockNumber, uint8_t * data)
{
    437c:	cf 93       	push	r28
    437e:	df 93       	push	r29
    4380:	ec 01       	movw	r28, r24
  #ifdef MIFAREDEBUG
    PN532DEBUGPRINT.print(F("Trying to write 16 bytes to block "));PN532DEBUGPRINT.println(blockNumber);
  #endif

  /* Prepare the first command */
  pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;
    4382:	80 e4       	ldi	r24, 0x40	; 64
    4384:	80 93 df 0b 	sts	0x0BDF, r24	; 0x800bdf <pn532_packetbuffer>
  pn532_packetbuffer[1] = 1;                      /* Card number */
    4388:	81 e0       	ldi	r24, 0x01	; 1
    438a:	80 93 e0 0b 	sts	0x0BE0, r24	; 0x800be0 <pn532_packetbuffer+0x1>
  pn532_packetbuffer[2] = MIFARE_CMD_WRITE;       /* Mifare Write command = 0xA0 */
    438e:	80 ea       	ldi	r24, 0xA0	; 160
    4390:	80 93 e1 0b 	sts	0x0BE1, r24	; 0x800be1 <pn532_packetbuffer+0x2>
  pn532_packetbuffer[3] = blockNumber;            /* Block Number (0..63 for 1K, 0..255 for 4K) */
    4394:	60 93 e2 0b 	sts	0x0BE2, r22	; 0x800be2 <pn532_packetbuffer+0x3>
  memcpy (pn532_packetbuffer+4, data, 16);          /* Data Payload */
    4398:	80 e1       	ldi	r24, 0x10	; 16
    439a:	fa 01       	movw	r30, r20
    439c:	a3 ee       	ldi	r26, 0xE3	; 227
    439e:	bb e0       	ldi	r27, 0x0B	; 11
    43a0:	01 90       	ld	r0, Z+
    43a2:	0d 92       	st	X+, r0
    43a4:	8a 95       	dec	r24
    43a6:	e1 f7       	brne	.-8      	; 0x43a0 <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh+0x24>

  /* Send the command */
  if (! sendCommandCheckAck(pn532_packetbuffer, 20))
    43a8:	28 ee       	ldi	r18, 0xE8	; 232
    43aa:	33 e0       	ldi	r19, 0x03	; 3
    43ac:	44 e1       	ldi	r20, 0x14	; 20
    43ae:	6f ed       	ldi	r22, 0xDF	; 223
    43b0:	7b e0       	ldi	r23, 0x0B	; 11
    43b2:	ce 01       	movw	r24, r28
    43b4:	55 de       	rcall	.-854    	; 0x4060 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    43b6:	88 23       	and	r24, r24
    43b8:	69 f0       	breq	.+26     	; 0x43d4 <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh+0x58>
    #endif

    // Return Failed Signal
    return 0;
  }
  delay(10);
    43ba:	6a e0       	ldi	r22, 0x0A	; 10
    43bc:	70 e0       	ldi	r23, 0x00	; 0
    43be:	80 e0       	ldi	r24, 0x00	; 0
    43c0:	90 e0       	ldi	r25, 0x00	; 0
    43c2:	0e 94 85 3a 	call	0x750a	; 0x750a <delay>

  /* Read the response packet */
  readdata(pn532_packetbuffer, 26);
    43c6:	4a e1       	ldi	r20, 0x1A	; 26
    43c8:	6f ed       	ldi	r22, 0xDF	; 223
    43ca:	7b e0       	ldi	r23, 0x0B	; 11
    43cc:	ce 01       	movw	r24, r28
    43ce:	a4 dd       	rcall	.-1208   	; 0x3f18 <_ZN9NFC_PN5328readdataEPhh>
    43d0:	81 e0       	ldi	r24, 0x01	; 1
    43d2:	01 c0       	rjmp	.+2      	; 0x43d6 <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh+0x5a>
  if (! sendCommandCheckAck(pn532_packetbuffer, 20))
  {
    #ifdef MIFAREDEBUG
      PN532DEBUGPRINT.println(F("Failed to receive ACK for write command"));
    #endif
    return 0;
    43d4:	80 e0       	ldi	r24, 0x00	; 0

  /* Read the response packet */
  readdata(pn532_packetbuffer, 26);

  return 1;
}
    43d6:	df 91       	pop	r29
    43d8:	cf 91       	pop	r28
    43da:	08 95       	ret

000043dc <_ZL9date2daysjhh>:
} // of method pinAlarm()                                                     //                                  //
/*******************************************************************************************************************
** Method pinSquareWave() will set the control register flag to make the INT/SQW Pin produce a 1Hz signal         **
*******************************************************************************************************************/
void DS3231M_Class::pinSquareWave() {                                         //                                  //
  writeByte(DS3231M_CONTROL,readByte(DS3231M_CONTROL)|0x4);                   // Set bit 3 to off                 //
    43dc:	80 3d       	cpi	r24, 0xD0	; 208
    43de:	27 e0       	ldi	r18, 0x07	; 7
    43e0:	92 07       	cpc	r25, r18
    43e2:	10 f0       	brcs	.+4      	; 0x43e8 <_ZL9date2daysjhh+0xc>
    43e4:	80 5d       	subi	r24, 0xD0	; 208
    43e6:	97 40       	sbci	r25, 0x07	; 7
    43e8:	50 e0       	ldi	r21, 0x00	; 0
    43ea:	e8 e2       	ldi	r30, 0x28	; 40
    43ec:	f2 e0       	ldi	r31, 0x02	; 2
    43ee:	21 e0       	ldi	r18, 0x01	; 1
    43f0:	26 17       	cp	r18, r22
    43f2:	30 f4       	brcc	.+12     	; 0x4400 <_ZL9date2daysjhh+0x24>
    43f4:	34 91       	lpm	r19, Z
    43f6:	43 0f       	add	r20, r19
    43f8:	51 1d       	adc	r21, r1
    43fa:	2f 5f       	subi	r18, 0xFF	; 255
    43fc:	31 96       	adiw	r30, 0x01	; 1
    43fe:	f8 cf       	rjmp	.-16     	; 0x43f0 <_ZL9date2daysjhh+0x14>
    4400:	63 30       	cpi	r22, 0x03	; 3
    4402:	38 f0       	brcs	.+14     	; 0x4412 <_ZL9date2daysjhh+0x36>
    4404:	9c 01       	movw	r18, r24
    4406:	23 70       	andi	r18, 0x03	; 3
    4408:	33 27       	eor	r19, r19
    440a:	23 2b       	or	r18, r19
    440c:	11 f4       	brne	.+4      	; 0x4412 <_ZL9date2daysjhh+0x36>
    440e:	4f 5f       	subi	r20, 0xFF	; 255
    4410:	5f 4f       	sbci	r21, 0xFF	; 255
    4412:	bc 01       	movw	r22, r24
    4414:	6d 5f       	subi	r22, 0xFD	; 253
    4416:	7f 4f       	sbci	r23, 0xFF	; 255
    4418:	76 95       	lsr	r23
    441a:	67 95       	ror	r22
    441c:	76 95       	lsr	r23
    441e:	67 95       	ror	r22
    4420:	ed e6       	ldi	r30, 0x6D	; 109
    4422:	f1 e0       	ldi	r31, 0x01	; 1
    4424:	8e 9f       	mul	r24, r30
    4426:	90 01       	movw	r18, r0
    4428:	8f 9f       	mul	r24, r31
    442a:	30 0d       	add	r19, r0
    442c:	9e 9f       	mul	r25, r30
    442e:	30 0d       	add	r19, r0
    4430:	11 24       	eor	r1, r1
    4432:	c9 01       	movw	r24, r18
    4434:	01 97       	sbiw	r24, 0x01	; 1
    4436:	86 0f       	add	r24, r22
    4438:	97 1f       	adc	r25, r23
    443a:	84 0f       	add	r24, r20
    443c:	95 1f       	adc	r25, r21
    443e:	08 95       	ret

00004440 <_ZL6conv2dPKc>:
    4440:	fc 01       	movw	r30, r24
    4442:	90 81       	ld	r25, Z
    4444:	90 53       	subi	r25, 0x30	; 48
    4446:	9a 30       	cpi	r25, 0x0A	; 10
    4448:	08 f0       	brcs	.+2      	; 0x444c <_ZL6conv2dPKc+0xc>
    444a:	90 e0       	ldi	r25, 0x00	; 0
    444c:	81 81       	ldd	r24, Z+1	; 0x01
    444e:	80 53       	subi	r24, 0x30	; 48
    4450:	2a e0       	ldi	r18, 0x0A	; 10
    4452:	92 9f       	mul	r25, r18
    4454:	80 0d       	add	r24, r0
    4456:	11 24       	eor	r1, r1
    4458:	08 95       	ret

0000445a <_ZN8DateTimeC1Em>:
    445a:	8f 92       	push	r8
    445c:	9f 92       	push	r9
    445e:	af 92       	push	r10
    4460:	bf 92       	push	r11
    4462:	cf 92       	push	r12
    4464:	df 92       	push	r13
    4466:	ef 92       	push	r14
    4468:	ff 92       	push	r15
    446a:	cf 93       	push	r28
    446c:	df 93       	push	r29
    446e:	ec 01       	movw	r28, r24
    4470:	6a 01       	movw	r12, r20
    4472:	7b 01       	movw	r14, r22
    4474:	80 e8       	ldi	r24, 0x80	; 128
    4476:	c8 1a       	sub	r12, r24
    4478:	83 e4       	ldi	r24, 0x43	; 67
    447a:	d8 0a       	sbc	r13, r24
    447c:	8d e6       	ldi	r24, 0x6D	; 109
    447e:	e8 0a       	sbc	r14, r24
    4480:	88 e3       	ldi	r24, 0x38	; 56
    4482:	f8 0a       	sbc	r15, r24
    4484:	8c e3       	ldi	r24, 0x3C	; 60
    4486:	88 2e       	mov	r8, r24
    4488:	91 2c       	mov	r9, r1
    448a:	a1 2c       	mov	r10, r1
    448c:	b1 2c       	mov	r11, r1
    448e:	c7 01       	movw	r24, r14
    4490:	b6 01       	movw	r22, r12
    4492:	a5 01       	movw	r20, r10
    4494:	94 01       	movw	r18, r8
    4496:	0e 94 1c 40 	call	0x8038	; 0x8038 <__udivmodsi4>
    449a:	6d 83       	std	Y+5, r22	; 0x05
    449c:	ca 01       	movw	r24, r20
    449e:	b9 01       	movw	r22, r18
    44a0:	a5 01       	movw	r20, r10
    44a2:	94 01       	movw	r18, r8
    44a4:	0e 94 1c 40 	call	0x8038	; 0x8038 <__udivmodsi4>
    44a8:	6c 83       	std	Y+4, r22	; 0x04
    44aa:	c7 01       	movw	r24, r14
    44ac:	b6 01       	movw	r22, r12
    44ae:	20 e1       	ldi	r18, 0x10	; 16
    44b0:	3e e0       	ldi	r19, 0x0E	; 14
    44b2:	40 e0       	ldi	r20, 0x00	; 0
    44b4:	50 e0       	ldi	r21, 0x00	; 0
    44b6:	0e 94 1c 40 	call	0x8038	; 0x8038 <__udivmodsi4>
    44ba:	ca 01       	movw	r24, r20
    44bc:	b9 01       	movw	r22, r18
    44be:	28 e1       	ldi	r18, 0x18	; 24
    44c0:	30 e0       	ldi	r19, 0x00	; 0
    44c2:	40 e0       	ldi	r20, 0x00	; 0
    44c4:	50 e0       	ldi	r21, 0x00	; 0
    44c6:	0e 94 1c 40 	call	0x8038	; 0x8038 <__udivmodsi4>
    44ca:	6b 83       	std	Y+3, r22	; 0x03
    44cc:	c7 01       	movw	r24, r14
    44ce:	b6 01       	movw	r22, r12
    44d0:	20 e8       	ldi	r18, 0x80	; 128
    44d2:	31 e5       	ldi	r19, 0x51	; 81
    44d4:	41 e0       	ldi	r20, 0x01	; 1
    44d6:	50 e0       	ldi	r21, 0x00	; 0
    44d8:	0e 94 1c 40 	call	0x8038	; 0x8038 <__udivmodsi4>
    44dc:	18 82       	st	Y, r1
    44de:	88 81       	ld	r24, Y
    44e0:	98 2f       	mov	r25, r24
    44e2:	93 70       	andi	r25, 0x03	; 3
    44e4:	41 e0       	ldi	r20, 0x01	; 1
    44e6:	50 e0       	ldi	r21, 0x00	; 0
    44e8:	11 f0       	breq	.+4      	; 0x44ee <_ZN8DateTimeC1Em+0x94>
    44ea:	40 e0       	ldi	r20, 0x00	; 0
    44ec:	50 e0       	ldi	r21, 0x00	; 0
    44ee:	ba 01       	movw	r22, r20
    44f0:	63 59       	subi	r22, 0x93	; 147
    44f2:	7e 4f       	sbci	r23, 0xFE	; 254
    44f4:	26 17       	cp	r18, r22
    44f6:	37 07       	cpc	r19, r23
    44f8:	38 f0       	brcs	.+14     	; 0x4508 <_ZN8DateTimeC1Em+0xae>
    44fa:	24 1b       	sub	r18, r20
    44fc:	35 0b       	sbc	r19, r21
    44fe:	2d 56       	subi	r18, 0x6D	; 109
    4500:	31 40       	sbci	r19, 0x01	; 1
    4502:	8f 5f       	subi	r24, 0xFF	; 255
    4504:	88 83       	st	Y, r24
    4506:	eb cf       	rjmp	.-42     	; 0x44de <_ZN8DateTimeC1Em+0x84>
    4508:	81 e0       	ldi	r24, 0x01	; 1
    450a:	89 83       	std	Y+1, r24	; 0x01
    450c:	89 81       	ldd	r24, Y+1	; 0x01
    450e:	e8 2f       	mov	r30, r24
    4510:	f0 e0       	ldi	r31, 0x00	; 0
    4512:	e9 5d       	subi	r30, 0xD9	; 217
    4514:	fd 4f       	sbci	r31, 0xFD	; 253
    4516:	e4 91       	lpm	r30, Z
    4518:	91 11       	cpse	r25, r1
    451a:	03 c0       	rjmp	.+6      	; 0x4522 <_ZN8DateTimeC1Em+0xc8>
    451c:	82 30       	cpi	r24, 0x02	; 2
    451e:	09 f4       	brne	.+2      	; 0x4522 <_ZN8DateTimeC1Em+0xc8>
    4520:	ef 5f       	subi	r30, 0xFF	; 255
    4522:	f0 e0       	ldi	r31, 0x00	; 0
    4524:	2e 17       	cp	r18, r30
    4526:	3f 07       	cpc	r19, r31
    4528:	20 f0       	brcs	.+8      	; 0x4532 <_ZN8DateTimeC1Em+0xd8>
    452a:	2e 1b       	sub	r18, r30
    452c:	3f 0b       	sbc	r19, r31
    452e:	8f 5f       	subi	r24, 0xFF	; 255
    4530:	ec cf       	rjmp	.-40     	; 0x450a <_ZN8DateTimeC1Em+0xb0>
    4532:	2f 5f       	subi	r18, 0xFF	; 255
    4534:	2a 83       	std	Y+2, r18	; 0x02
    4536:	df 91       	pop	r29
    4538:	cf 91       	pop	r28
    453a:	ff 90       	pop	r15
    453c:	ef 90       	pop	r14
    453e:	df 90       	pop	r13
    4540:	cf 90       	pop	r12
    4542:	bf 90       	pop	r11
    4544:	af 90       	pop	r10
    4546:	9f 90       	pop	r9
    4548:	8f 90       	pop	r8
    454a:	08 95       	ret

0000454c <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>:
    454c:	ef 92       	push	r14
    454e:	ff 92       	push	r15
    4550:	0f 93       	push	r16
    4552:	1f 93       	push	r17
    4554:	cf 93       	push	r28
    4556:	df 93       	push	r29
    4558:	cd b7       	in	r28, 0x3d	; 61
    455a:	de b7       	in	r29, 0x3e	; 62
    455c:	2b 97       	sbiw	r28, 0x0b	; 11
    455e:	0f b6       	in	r0, 0x3f	; 63
    4560:	f8 94       	cli
    4562:	de bf       	out	0x3e, r29	; 62
    4564:	0f be       	out	0x3f, r0	; 63
    4566:	cd bf       	out	0x3d, r28	; 61
    4568:	8c 01       	movw	r16, r24
    456a:	7a 01       	movw	r14, r20
    456c:	4b e0       	ldi	r20, 0x0B	; 11
    456e:	50 e0       	ldi	r21, 0x00	; 0
    4570:	ce 01       	movw	r24, r28
    4572:	01 96       	adiw	r24, 0x01	; 1
    4574:	0e 94 b2 42 	call	0x8564	; 0x8564 <memcpy_P>
    4578:	ce 01       	movw	r24, r28
    457a:	0a 96       	adiw	r24, 0x0a	; 10
    457c:	61 df       	rcall	.-318    	; 0x4440 <_ZL6conv2dPKc>
    457e:	f8 01       	movw	r30, r16
    4580:	80 83       	st	Z, r24
    4582:	e9 81       	ldd	r30, Y+1	; 0x01
    4584:	8e 2f       	mov	r24, r30
    4586:	90 e0       	ldi	r25, 0x00	; 0
    4588:	fc 01       	movw	r30, r24
    458a:	e1 54       	subi	r30, 0x41	; 65
    458c:	f1 09       	sbc	r31, r1
    458e:	e3 31       	cpi	r30, 0x13	; 19
    4590:	f1 05       	cpc	r31, r1
    4592:	48 f5       	brcc	.+82     	; 0x45e6 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
    4594:	ed 5a       	subi	r30, 0xAD	; 173
    4596:	ff 4f       	sbci	r31, 0xFF	; 255
    4598:	0c 94 3e 40 	jmp	0x807c	; 0x807c <__tablejump2__>
    459c:	8a 81       	ldd	r24, Y+2	; 0x02
    459e:	81 36       	cpi	r24, 0x61	; 97
    45a0:	29 f0       	breq	.+10     	; 0x45ac <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x60>
    45a2:	8b 81       	ldd	r24, Y+3	; 0x03
    45a4:	8e 36       	cpi	r24, 0x6E	; 110
    45a6:	21 f0       	breq	.+8      	; 0x45b0 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x64>
    45a8:	87 e0       	ldi	r24, 0x07	; 7
    45aa:	1b c0       	rjmp	.+54     	; 0x45e2 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    45ac:	81 e0       	ldi	r24, 0x01	; 1
    45ae:	19 c0       	rjmp	.+50     	; 0x45e2 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    45b0:	86 e0       	ldi	r24, 0x06	; 6
    45b2:	17 c0       	rjmp	.+46     	; 0x45e2 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    45b4:	82 e0       	ldi	r24, 0x02	; 2
    45b6:	15 c0       	rjmp	.+42     	; 0x45e2 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    45b8:	8b 81       	ldd	r24, Y+3	; 0x03
    45ba:	82 37       	cpi	r24, 0x72	; 114
    45bc:	11 f0       	breq	.+4      	; 0x45c2 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x76>
    45be:	88 e0       	ldi	r24, 0x08	; 8
    45c0:	10 c0       	rjmp	.+32     	; 0x45e2 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    45c2:	84 e0       	ldi	r24, 0x04	; 4
    45c4:	0e c0       	rjmp	.+28     	; 0x45e2 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    45c6:	8b 81       	ldd	r24, Y+3	; 0x03
    45c8:	82 37       	cpi	r24, 0x72	; 114
    45ca:	11 f0       	breq	.+4      	; 0x45d0 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x84>
    45cc:	85 e0       	ldi	r24, 0x05	; 5
    45ce:	09 c0       	rjmp	.+18     	; 0x45e2 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    45d0:	83 e0       	ldi	r24, 0x03	; 3
    45d2:	07 c0       	rjmp	.+14     	; 0x45e2 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    45d4:	89 e0       	ldi	r24, 0x09	; 9
    45d6:	05 c0       	rjmp	.+10     	; 0x45e2 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    45d8:	8a e0       	ldi	r24, 0x0A	; 10
    45da:	03 c0       	rjmp	.+6      	; 0x45e2 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    45dc:	8b e0       	ldi	r24, 0x0B	; 11
    45de:	01 c0       	rjmp	.+2      	; 0x45e2 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    45e0:	8c e0       	ldi	r24, 0x0C	; 12
    45e2:	f8 01       	movw	r30, r16
    45e4:	81 83       	std	Z+1, r24	; 0x01
    45e6:	ce 01       	movw	r24, r28
    45e8:	05 96       	adiw	r24, 0x05	; 5
    45ea:	2a df       	rcall	.-428    	; 0x4440 <_ZL6conv2dPKc>
    45ec:	f8 01       	movw	r30, r16
    45ee:	82 83       	std	Z+2, r24	; 0x02
    45f0:	48 e0       	ldi	r20, 0x08	; 8
    45f2:	50 e0       	ldi	r21, 0x00	; 0
    45f4:	b7 01       	movw	r22, r14
    45f6:	ce 01       	movw	r24, r28
    45f8:	01 96       	adiw	r24, 0x01	; 1
    45fa:	0e 94 b2 42 	call	0x8564	; 0x8564 <memcpy_P>
    45fe:	ce 01       	movw	r24, r28
    4600:	01 96       	adiw	r24, 0x01	; 1
    4602:	1e df       	rcall	.-452    	; 0x4440 <_ZL6conv2dPKc>
    4604:	f8 01       	movw	r30, r16
    4606:	83 83       	std	Z+3, r24	; 0x03
    4608:	ce 01       	movw	r24, r28
    460a:	04 96       	adiw	r24, 0x04	; 4
    460c:	19 df       	rcall	.-462    	; 0x4440 <_ZL6conv2dPKc>
    460e:	f8 01       	movw	r30, r16
    4610:	84 83       	std	Z+4, r24	; 0x04
    4612:	ce 01       	movw	r24, r28
    4614:	07 96       	adiw	r24, 0x07	; 7
    4616:	14 df       	rcall	.-472    	; 0x4440 <_ZL6conv2dPKc>
    4618:	f8 01       	movw	r30, r16
    461a:	85 83       	std	Z+5, r24	; 0x05
    461c:	2b 96       	adiw	r28, 0x0b	; 11
    461e:	0f b6       	in	r0, 0x3f	; 63
    4620:	f8 94       	cli
    4622:	de bf       	out	0x3e, r29	; 62
    4624:	0f be       	out	0x3f, r0	; 63
    4626:	cd bf       	out	0x3d, r28	; 61
    4628:	df 91       	pop	r29
    462a:	cf 91       	pop	r28
    462c:	1f 91       	pop	r17
    462e:	0f 91       	pop	r16
    4630:	ff 90       	pop	r15
    4632:	ef 90       	pop	r14
    4634:	08 95       	ret

00004636 <_ZNK8DateTime12dayOfTheWeekEv>:
    4636:	fc 01       	movw	r30, r24
    4638:	80 81       	ld	r24, Z
    463a:	42 81       	ldd	r20, Z+2	; 0x02
    463c:	61 81       	ldd	r22, Z+1	; 0x01
    463e:	90 e0       	ldi	r25, 0x00	; 0
    4640:	cd de       	rcall	.-614    	; 0x43dc <_ZL9date2daysjhh>
    4642:	06 96       	adiw	r24, 0x06	; 6
    4644:	67 e0       	ldi	r22, 0x07	; 7
    4646:	70 e0       	ldi	r23, 0x00	; 0
    4648:	0c 94 08 40 	jmp	0x8010	; 0x8010 <__udivmodhi4>
    464c:	08 95       	ret

0000464e <_ZNK8DateTime8unixtimeEv>:
    464e:	ef 92       	push	r14
    4650:	ff 92       	push	r15
    4652:	0f 93       	push	r16
    4654:	1f 93       	push	r17
    4656:	cf 93       	push	r28
    4658:	df 93       	push	r29
    465a:	ec 01       	movw	r28, r24
    465c:	88 81       	ld	r24, Y
    465e:	4a 81       	ldd	r20, Y+2	; 0x02
    4660:	69 81       	ldd	r22, Y+1	; 0x01
    4662:	90 e0       	ldi	r25, 0x00	; 0
    4664:	bb de       	rcall	.-650    	; 0x43dc <_ZL9date2daysjhh>
    4666:	9c 01       	movw	r18, r24
    4668:	a8 e1       	ldi	r26, 0x18	; 24
    466a:	b0 e0       	ldi	r27, 0x00	; 0
    466c:	0e 94 47 40 	call	0x808e	; 0x808e <__umulhisi3>
    4670:	2b 81       	ldd	r18, Y+3	; 0x03
    4672:	7b 01       	movw	r14, r22
    4674:	8c 01       	movw	r16, r24
    4676:	e2 0e       	add	r14, r18
    4678:	f1 1c       	adc	r15, r1
    467a:	01 1d       	adc	r16, r1
    467c:	11 1d       	adc	r17, r1
    467e:	a8 01       	movw	r20, r16
    4680:	97 01       	movw	r18, r14
    4682:	ac e3       	ldi	r26, 0x3C	; 60
    4684:	b0 e0       	ldi	r27, 0x00	; 0
    4686:	0e 94 56 40 	call	0x80ac	; 0x80ac <__muluhisi3>
    468a:	2c 81       	ldd	r18, Y+4	; 0x04
    468c:	7b 01       	movw	r14, r22
    468e:	8c 01       	movw	r16, r24
    4690:	e2 0e       	add	r14, r18
    4692:	f1 1c       	adc	r15, r1
    4694:	01 1d       	adc	r16, r1
    4696:	11 1d       	adc	r17, r1
    4698:	a8 01       	movw	r20, r16
    469a:	97 01       	movw	r18, r14
    469c:	0e 94 56 40 	call	0x80ac	; 0x80ac <__muluhisi3>
    46a0:	2d 81       	ldd	r18, Y+5	; 0x05
    46a2:	dc 01       	movw	r26, r24
    46a4:	cb 01       	movw	r24, r22
    46a6:	82 0f       	add	r24, r18
    46a8:	91 1d       	adc	r25, r1
    46aa:	a1 1d       	adc	r26, r1
    46ac:	b1 1d       	adc	r27, r1
    46ae:	bc 01       	movw	r22, r24
    46b0:	cd 01       	movw	r24, r26
    46b2:	60 58       	subi	r22, 0x80	; 128
    46b4:	7c 4b       	sbci	r23, 0xBC	; 188
    46b6:	82 49       	sbci	r24, 0x92	; 146
    46b8:	97 4c       	sbci	r25, 0xC7	; 199
    46ba:	df 91       	pop	r29
    46bc:	cf 91       	pop	r28
    46be:	1f 91       	pop	r17
    46c0:	0f 91       	pop	r16
    46c2:	ff 90       	pop	r15
    46c4:	ef 90       	pop	r14
    46c6:	08 95       	ret

000046c8 <_ZNK8DateTime11secondstimeEv>:
    46c8:	ef 92       	push	r14
    46ca:	ff 92       	push	r15
    46cc:	0f 93       	push	r16
    46ce:	1f 93       	push	r17
    46d0:	cf 93       	push	r28
    46d2:	df 93       	push	r29
    46d4:	ec 01       	movw	r28, r24
    46d6:	88 81       	ld	r24, Y
    46d8:	4a 81       	ldd	r20, Y+2	; 0x02
    46da:	69 81       	ldd	r22, Y+1	; 0x01
    46dc:	90 e0       	ldi	r25, 0x00	; 0
    46de:	7e de       	rcall	.-772    	; 0x43dc <_ZL9date2daysjhh>
    46e0:	9c 01       	movw	r18, r24
    46e2:	a8 e1       	ldi	r26, 0x18	; 24
    46e4:	b0 e0       	ldi	r27, 0x00	; 0
    46e6:	0e 94 47 40 	call	0x808e	; 0x808e <__umulhisi3>
    46ea:	2b 81       	ldd	r18, Y+3	; 0x03
    46ec:	7b 01       	movw	r14, r22
    46ee:	8c 01       	movw	r16, r24
    46f0:	e2 0e       	add	r14, r18
    46f2:	f1 1c       	adc	r15, r1
    46f4:	01 1d       	adc	r16, r1
    46f6:	11 1d       	adc	r17, r1
    46f8:	a8 01       	movw	r20, r16
    46fa:	97 01       	movw	r18, r14
    46fc:	ac e3       	ldi	r26, 0x3C	; 60
    46fe:	b0 e0       	ldi	r27, 0x00	; 0
    4700:	0e 94 56 40 	call	0x80ac	; 0x80ac <__muluhisi3>
    4704:	2c 81       	ldd	r18, Y+4	; 0x04
    4706:	7b 01       	movw	r14, r22
    4708:	8c 01       	movw	r16, r24
    470a:	e2 0e       	add	r14, r18
    470c:	f1 1c       	adc	r15, r1
    470e:	01 1d       	adc	r16, r1
    4710:	11 1d       	adc	r17, r1
    4712:	a8 01       	movw	r20, r16
    4714:	97 01       	movw	r18, r14
    4716:	0e 94 56 40 	call	0x80ac	; 0x80ac <__muluhisi3>
    471a:	2d 81       	ldd	r18, Y+5	; 0x05
    471c:	62 0f       	add	r22, r18
    471e:	71 1d       	adc	r23, r1
    4720:	81 1d       	adc	r24, r1
    4722:	91 1d       	adc	r25, r1
    4724:	df 91       	pop	r29
    4726:	cf 91       	pop	r28
    4728:	1f 91       	pop	r17
    472a:	0f 91       	pop	r16
    472c:	ff 90       	pop	r15
    472e:	ef 90       	pop	r14
    4730:	08 95       	ret

00004732 <_ZN13DS3231M_ClassC1Ev>:
    4732:	fc 01       	movw	r30, r24
    4734:	10 82       	st	Z, r1
    4736:	11 82       	std	Z+1, r1	; 0x01
    4738:	12 82       	std	Z+2, r1	; 0x02
    473a:	13 82       	std	Z+3, r1	; 0x03
    473c:	14 82       	std	Z+4, r1	; 0x04
    473e:	08 95       	ret

00004740 <_ZN13DS3231M_ClassD1Ev>:
    4740:	08 95       	ret

00004742 <_ZN13DS3231M_Class9writeByteEhh>:
    4742:	0f 93       	push	r16
    4744:	1f 93       	push	r17
    4746:	cf 93       	push	r28
    4748:	df 93       	push	r29
    474a:	ec 01       	movw	r28, r24
    474c:	06 2f       	mov	r16, r22
    474e:	14 2f       	mov	r17, r20
    4750:	68 e6       	ldi	r22, 0x68	; 104
    4752:	88 ed       	ldi	r24, 0xD8	; 216
    4754:	9c e0       	ldi	r25, 0x0C	; 12
    4756:	0e 94 52 36 	call	0x6ca4	; 0x6ca4 <_ZN7TwoWire17beginTransmissionEh>
    475a:	60 2f       	mov	r22, r16
    475c:	88 ed       	ldi	r24, 0xD8	; 216
    475e:	9c e0       	ldi	r25, 0x0C	; 12
    4760:	0e 94 01 36 	call	0x6c02	; 0x6c02 <_ZN7TwoWire5writeEh>
    4764:	61 2f       	mov	r22, r17
    4766:	88 ed       	ldi	r24, 0xD8	; 216
    4768:	9c e0       	ldi	r25, 0x0C	; 12
    476a:	0e 94 01 36 	call	0x6c02	; 0x6c02 <_ZN7TwoWire5writeEh>
    476e:	88 ed       	ldi	r24, 0xD8	; 216
    4770:	9c e0       	ldi	r25, 0x0C	; 12
    4772:	0e 94 d3 36 	call	0x6da6	; 0x6da6 <_ZN7TwoWire15endTransmissionEv>
    4776:	88 83       	st	Y, r24
    4778:	df 91       	pop	r29
    477a:	cf 91       	pop	r28
    477c:	1f 91       	pop	r17
    477e:	0f 91       	pop	r16
    4780:	08 95       	ret

00004782 <_ZN13DS3231M_Class8readByteEh>:
    4782:	1f 93       	push	r17
    4784:	cf 93       	push	r28
    4786:	df 93       	push	r29
    4788:	ec 01       	movw	r28, r24
    478a:	16 2f       	mov	r17, r22
    478c:	68 e6       	ldi	r22, 0x68	; 104
    478e:	88 ed       	ldi	r24, 0xD8	; 216
    4790:	9c e0       	ldi	r25, 0x0C	; 12
    4792:	0e 94 52 36 	call	0x6ca4	; 0x6ca4 <_ZN7TwoWire17beginTransmissionEh>
    4796:	61 2f       	mov	r22, r17
    4798:	88 ed       	ldi	r24, 0xD8	; 216
    479a:	9c e0       	ldi	r25, 0x0C	; 12
    479c:	0e 94 01 36 	call	0x6c02	; 0x6c02 <_ZN7TwoWire5writeEh>
    47a0:	88 ed       	ldi	r24, 0xD8	; 216
    47a2:	9c e0       	ldi	r25, 0x0C	; 12
    47a4:	0e 94 d3 36 	call	0x6da6	; 0x6da6 <_ZN7TwoWire15endTransmissionEv>
    47a8:	88 83       	st	Y, r24
    47aa:	41 e0       	ldi	r20, 0x01	; 1
    47ac:	68 e6       	ldi	r22, 0x68	; 104
    47ae:	88 ed       	ldi	r24, 0xD8	; 216
    47b0:	9c e0       	ldi	r25, 0x0C	; 12
    47b2:	0e 94 cf 36 	call	0x6d9e	; 0x6d9e <_ZN7TwoWire11requestFromEhh>
    47b6:	88 ed       	ldi	r24, 0xD8	; 216
    47b8:	9c e0       	ldi	r25, 0x0C	; 12
    47ba:	0e 94 7b 35 	call	0x6af6	; 0x6af6 <_ZN7TwoWire4readEv>
    47be:	df 91       	pop	r29
    47c0:	cf 91       	pop	r28
    47c2:	1f 91       	pop	r17
    47c4:	08 95       	ret

000047c6 <_ZN13DS3231M_Class5beginEm>:
    47c6:	cf 92       	push	r12
    47c8:	df 92       	push	r13
    47ca:	ef 92       	push	r14
    47cc:	ff 92       	push	r15
    47ce:	cf 93       	push	r28
    47d0:	df 93       	push	r29
    47d2:	ec 01       	movw	r28, r24
    47d4:	6a 01       	movw	r12, r20
    47d6:	7b 01       	movw	r14, r22
    47d8:	88 ed       	ldi	r24, 0xD8	; 216
    47da:	9c e0       	ldi	r25, 0x0C	; 12
    47dc:	0e 94 3f 36 	call	0x6c7e	; 0x6c7e <_ZN7TwoWire5beginEv>
    47e0:	b7 01       	movw	r22, r14
    47e2:	a6 01       	movw	r20, r12
    47e4:	88 ed       	ldi	r24, 0xD8	; 216
    47e6:	9c e0       	ldi	r25, 0x0C	; 12
    47e8:	0e 94 4f 36 	call	0x6c9e	; 0x6c9e <_ZN7TwoWire8setClockEm>
    47ec:	68 e6       	ldi	r22, 0x68	; 104
    47ee:	88 ed       	ldi	r24, 0xD8	; 216
    47f0:	9c e0       	ldi	r25, 0x0C	; 12
    47f2:	0e 94 52 36 	call	0x6ca4	; 0x6ca4 <_ZN7TwoWire17beginTransmissionEh>
    47f6:	88 ed       	ldi	r24, 0xD8	; 216
    47f8:	9c e0       	ldi	r25, 0x0C	; 12
    47fa:	0e 94 d3 36 	call	0x6da6	; 0x6da6 <_ZN7TwoWire15endTransmissionEv>
    47fe:	81 11       	cpse	r24, r1
    4800:	0a c0       	rjmp	.+20     	; 0x4816 <_ZN13DS3231M_Class5beginEm+0x50>
    4802:	62 e0       	ldi	r22, 0x02	; 2
    4804:	ce 01       	movw	r24, r28
    4806:	bd df       	rcall	.-134    	; 0x4782 <_ZN13DS3231M_Class8readByteEh>
    4808:	48 2f       	mov	r20, r24
    480a:	4f 7b       	andi	r20, 0xBF	; 191
    480c:	62 e0       	ldi	r22, 0x02	; 2
    480e:	ce 01       	movw	r24, r28
    4810:	98 df       	rcall	.-208    	; 0x4742 <_ZN13DS3231M_Class9writeByteEhh>
    4812:	81 e0       	ldi	r24, 0x01	; 1
    4814:	01 c0       	rjmp	.+2      	; 0x4818 <_ZN13DS3231M_Class5beginEm+0x52>
    4816:	80 e0       	ldi	r24, 0x00	; 0
    4818:	df 91       	pop	r29
    481a:	cf 91       	pop	r28
    481c:	ff 90       	pop	r15
    481e:	ef 90       	pop	r14
    4820:	df 90       	pop	r13
    4822:	cf 90       	pop	r12
    4824:	08 95       	ret

00004826 <_ZN13DS3231M_Class3nowEv>:
/*******************************************************************************************************************
** Method now() returns the current date/time                                                                     **
** then the power down time is returned, if the timeType = 2 then the power up time is returned. These options are**
** not documented as the official calls are "getPowerOffDate" and "getPowerOnDate"                                **
*******************************************************************************************************************/
DateTime DS3231M_Class::now(){                                                // Return current date/time         //
    4826:	0f 93       	push	r16
    4828:	1f 93       	push	r17
    482a:	cf 93       	push	r28
    482c:	df 93       	push	r29
    482e:	8c 01       	movw	r16, r24
    4830:	eb 01       	movw	r28, r22
  Wire.beginTransmission(DS3231M_ADDRESS);                                    // Address the I2C device           //
    4832:	68 e6       	ldi	r22, 0x68	; 104
    4834:	88 ed       	ldi	r24, 0xD8	; 216
    4836:	9c e0       	ldi	r25, 0x0C	; 12
    4838:	0e 94 52 36 	call	0x6ca4	; 0x6ca4 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(DS3231M_RTCSEC);                                                 // Start at specified register      //
    483c:	60 e0       	ldi	r22, 0x00	; 0
    483e:	88 ed       	ldi	r24, 0xD8	; 216
    4840:	9c e0       	ldi	r25, 0x0C	; 12
    4842:	0e 94 01 36 	call	0x6c02	; 0x6c02 <_ZN7TwoWire5writeEh>
  _TransmissionStatus = Wire.endTransmission();                               // Close transmission               //
    4846:	88 ed       	ldi	r24, 0xD8	; 216
    4848:	9c e0       	ldi	r25, 0x0C	; 12
    484a:	0e 94 d3 36 	call	0x6da6	; 0x6da6 <_ZN7TwoWire15endTransmissionEv>
    484e:	88 83       	st	Y, r24
  Wire.requestFrom(DS3231M_ADDRESS, (uint8_t)7);                              // Request 7 bytes of data          //
    4850:	47 e0       	ldi	r20, 0x07	; 7
    4852:	68 e6       	ldi	r22, 0x68	; 104
    4854:	88 ed       	ldi	r24, 0xD8	; 216
    4856:	9c e0       	ldi	r25, 0x0C	; 12
    4858:	0e 94 cf 36 	call	0x6d9e	; 0x6d9e <_ZN7TwoWire11requestFromEhh>
  if(Wire.available()==7) {                                                   // Wait until the data is ready     //
    485c:	88 ed       	ldi	r24, 0xD8	; 216
    485e:	9c e0       	ldi	r25, 0x0C	; 12
    4860:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN7TwoWire9availableEv>
    4864:	07 97       	sbiw	r24, 0x07	; 7
    4866:	09 f0       	breq	.+2      	; 0x486a <_ZN13DS3231M_Class3nowEv+0x44>
    4868:	64 c0       	rjmp	.+200    	; 0x4932 <_ZN13DS3231M_Class3nowEv+0x10c>
    _ss = bcd2int(Wire.read() & 0x7F);                                        // Mask high bit in seconds         //
    486a:	88 ed       	ldi	r24, 0xD8	; 216
    486c:	9c e0       	ldi	r25, 0x0C	; 12
    486e:	0e 94 7b 35 	call	0x6af6	; 0x6af6 <_ZN7TwoWire4readEv>
    4872:	98 2f       	mov	r25, r24
    4874:	96 95       	lsr	r25
    4876:	96 95       	lsr	r25
    4878:	96 95       	lsr	r25
    487a:	9e 70       	andi	r25, 0x0E	; 14
    487c:	29 2f       	mov	r18, r25
    487e:	22 0f       	add	r18, r18
    4880:	22 0f       	add	r18, r18
    4882:	92 0f       	add	r25, r18
    4884:	8f 70       	andi	r24, 0x0F	; 15
    4886:	89 0f       	add	r24, r25
    4888:	8d 83       	std	Y+5, r24	; 0x05
    _mm = bcd2int(Wire.read() & 0x7F);                                        // Mask high bit in minutes         //
    488a:	88 ed       	ldi	r24, 0xD8	; 216
    488c:	9c e0       	ldi	r25, 0x0C	; 12
    488e:	0e 94 7b 35 	call	0x6af6	; 0x6af6 <_ZN7TwoWire4readEv>
    4892:	98 2f       	mov	r25, r24
    4894:	96 95       	lsr	r25
    4896:	96 95       	lsr	r25
    4898:	96 95       	lsr	r25
    489a:	9e 70       	andi	r25, 0x0E	; 14
    489c:	29 2f       	mov	r18, r25
    489e:	22 0f       	add	r18, r18
    48a0:	22 0f       	add	r18, r18
    48a2:	92 0f       	add	r25, r18
    48a4:	8f 70       	andi	r24, 0x0F	; 15
    48a6:	89 0f       	add	r24, r25
    48a8:	8e 83       	std	Y+6, r24	; 0x06
    _hh = bcd2int(Wire.read() & 0x7F);                                        // Mask high bit in hours           //
    48aa:	88 ed       	ldi	r24, 0xD8	; 216
    48ac:	9c e0       	ldi	r25, 0x0C	; 12
    48ae:	0e 94 7b 35 	call	0x6af6	; 0x6af6 <_ZN7TwoWire4readEv>
    48b2:	98 2f       	mov	r25, r24
    48b4:	96 95       	lsr	r25
    48b6:	96 95       	lsr	r25
    48b8:	96 95       	lsr	r25
    48ba:	9e 70       	andi	r25, 0x0E	; 14
    48bc:	29 2f       	mov	r18, r25
    48be:	22 0f       	add	r18, r18
    48c0:	22 0f       	add	r18, r18
    48c2:	92 0f       	add	r25, r18
    48c4:	8f 70       	andi	r24, 0x0F	; 15
    48c6:	89 0f       	add	r24, r25
    48c8:	8f 83       	std	Y+7, r24	; 0x07
    Wire.read();                                                              // Ignore Day-Of-Week register      //
    48ca:	88 ed       	ldi	r24, 0xD8	; 216
    48cc:	9c e0       	ldi	r25, 0x0C	; 12
    48ce:	0e 94 7b 35 	call	0x6af6	; 0x6af6 <_ZN7TwoWire4readEv>
    _d = bcd2int(Wire.read()  & 0x3F);                                        // Mask 2 high bits for day of month//
    48d2:	88 ed       	ldi	r24, 0xD8	; 216
    48d4:	9c e0       	ldi	r25, 0x0C	; 12
    48d6:	0e 94 7b 35 	call	0x6af6	; 0x6af6 <_ZN7TwoWire4readEv>
    48da:	98 2f       	mov	r25, r24
    48dc:	96 95       	lsr	r25
    48de:	96 95       	lsr	r25
    48e0:	96 95       	lsr	r25
    48e2:	96 70       	andi	r25, 0x06	; 6
    48e4:	29 2f       	mov	r18, r25
    48e6:	22 0f       	add	r18, r18
    48e8:	22 0f       	add	r18, r18
    48ea:	92 0f       	add	r25, r18
    48ec:	8f 70       	andi	r24, 0x0F	; 15
    48ee:	89 0f       	add	r24, r25
    48f0:	88 87       	std	Y+8, r24	; 0x08
    _m = bcd2int(Wire.read()  & 0x1F);                                        // Mask 3 high bits for Month       //
    48f2:	88 ed       	ldi	r24, 0xD8	; 216
    48f4:	9c e0       	ldi	r25, 0x0C	; 12
    48f6:	0e 94 7b 35 	call	0x6af6	; 0x6af6 <_ZN7TwoWire4readEv>
    48fa:	84 fb       	bst	r24, 4
    48fc:	99 27       	eor	r25, r25
    48fe:	90 f9       	bld	r25, 0
    4900:	99 0f       	add	r25, r25
    4902:	29 2f       	mov	r18, r25
    4904:	22 0f       	add	r18, r18
    4906:	22 0f       	add	r18, r18
    4908:	92 0f       	add	r25, r18
    490a:	8f 70       	andi	r24, 0x0F	; 15
    490c:	89 0f       	add	r24, r25
    490e:	89 87       	std	Y+9, r24	; 0x09
    _y = bcd2int(Wire.read()) + 2000;                                         // Add 2000 to internal year        //
    4910:	88 ed       	ldi	r24, 0xD8	; 216
    4912:	9c e0       	ldi	r25, 0x0C	; 12
    4914:	0e 94 7b 35 	call	0x6af6	; 0x6af6 <_ZN7TwoWire4readEv>
    4918:	98 2f       	mov	r25, r24
    491a:	92 95       	swap	r25
    491c:	9f 70       	andi	r25, 0x0F	; 15
    491e:	8f 70       	andi	r24, 0x0F	; 15
    4920:	2a e0       	ldi	r18, 0x0A	; 10
    4922:	92 9f       	mul	r25, r18
    4924:	80 0d       	add	r24, r0
    4926:	11 24       	eor	r1, r1
    4928:	90 e0       	ldi	r25, 0x00	; 0
    492a:	80 53       	subi	r24, 0x30	; 48
    492c:	98 4f       	sbci	r25, 0xF8	; 248
    492e:	9b 87       	std	Y+11, r25	; 0x0b
    4930:	8a 87       	std	Y+10, r24	; 0x0a
  } // of if-then there is data to be read                                    //                                  //
  return DateTime (_y, _m, _d, _hh, _mm, _ss);                                // Return class value               //
    4932:	2d 81       	ldd	r18, Y+5	; 0x05
    4934:	3e 81       	ldd	r19, Y+6	; 0x06
    4936:	4f 81       	ldd	r20, Y+7	; 0x07
    4938:	58 85       	ldd	r21, Y+8	; 0x08
    493a:	69 85       	ldd	r22, Y+9	; 0x09
    493c:	8a 85       	ldd	r24, Y+10	; 0x0a
    493e:	9b 85       	ldd	r25, Y+11	; 0x0b
  } // of for-next each month                                                 //                                  //
  d = days + 1;                                                               //                                  //
} // of method DateTime()                                                     //----------------------------------//
DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour,  //                                  //
                    uint8_t min, uint8_t sec) {                               //                                  //
  if (year >= 2000)                                                           //                                  //
    4940:	80 3d       	cpi	r24, 0xD0	; 208
    4942:	77 e0       	ldi	r23, 0x07	; 7
    4944:	97 07       	cpc	r25, r23
    4946:	10 f0       	brcs	.+4      	; 0x494c <_ZN13DS3231M_Class3nowEv+0x126>
  year -= 2000;                                                               //                                  //
    4948:	80 5d       	subi	r24, 0xD0	; 208
    494a:	97 40       	sbci	r25, 0x07	; 7
  yOff = year;                                                                //                                  //
    494c:	f8 01       	movw	r30, r16
    494e:	80 83       	st	Z, r24
  m = month;                                                                  //                                  //
    4950:	61 83       	std	Z+1, r22	; 0x01
  d = day;                                                                    //                                  //
    4952:	52 83       	std	Z+2, r21	; 0x02
  hh = hour;                                                                  //                                  //
    4954:	43 83       	std	Z+3, r20	; 0x03
  mm = min;                                                                   //                                  //
    4956:	34 83       	std	Z+4, r19	; 0x04
  ss = sec;                                                                   //                                  //
    4958:	25 83       	std	Z+5, r18	; 0x05
    _d = bcd2int(Wire.read()  & 0x3F);                                        // Mask 2 high bits for day of month//
    _m = bcd2int(Wire.read()  & 0x1F);                                        // Mask 3 high bits for Month       //
    _y = bcd2int(Wire.read()) + 2000;                                         // Add 2000 to internal year        //
  } // of if-then there is data to be read                                    //                                  //
  return DateTime (_y, _m, _d, _hh, _mm, _ss);                                // Return class value               //
} // of method now                                                            //                                  //
    495a:	c8 01       	movw	r24, r16
    495c:	df 91       	pop	r29
    495e:	cf 91       	pop	r28
    4960:	1f 91       	pop	r17
    4962:	0f 91       	pop	r16
    4964:	08 95       	ret

00004966 <_ZN13DS3231M_Class6adjustERK8DateTime>:
** oscillator is stopped during the process and needs to be restarted upon completion.                            **
*******************************************************************************************************************/
void DS3231M_Class::adjust() {                                                // Set the RTC date and Time        //
  adjust(DateTime(F(__DATE__), F(__TIME__)));                                 // Set to compile time              //
} // of method adjust                                                         /-----------------------------------//
void DS3231M_Class::adjust(const DateTime& dt) {                              // Set the RTC date and Time        //
    4966:	df 92       	push	r13
    4968:	ef 92       	push	r14
    496a:	ff 92       	push	r15
    496c:	0f 93       	push	r16
    496e:	1f 93       	push	r17
    4970:	cf 93       	push	r28
    4972:	df 93       	push	r29
    4974:	00 d0       	rcall	.+0      	; 0x4976 <_ZN13DS3231M_Class6adjustERK8DateTime+0x10>
    4976:	00 d0       	rcall	.+0      	; 0x4978 <_ZN13DS3231M_Class6adjustERK8DateTime+0x12>
    4978:	00 d0       	rcall	.+0      	; 0x497a <_ZN13DS3231M_Class6adjustERK8DateTime+0x14>
    497a:	cd b7       	in	r28, 0x3d	; 61
    497c:	de b7       	in	r29, 0x3e	; 62
    497e:	8c 01       	movw	r16, r24
    4980:	7b 01       	movw	r14, r22
    4982:	fb 01       	movw	r30, r22
    4984:	85 81       	ldd	r24, Z+5	; 0x05
  writeByte(DS3231M_RTCSEC,int2bcd(dt.second()));                             // Write seconds, keep device off   //
    4986:	9a e0       	ldi	r25, 0x0A	; 10
    4988:	d9 2e       	mov	r13, r25
    498a:	6d 2d       	mov	r22, r13
    498c:	0e 94 fc 3f 	call	0x7ff8	; 0x7ff8 <__udivmodqi4>
    4990:	49 2f       	mov	r20, r25
    4992:	f0 e1       	ldi	r31, 0x10	; 16
    4994:	8f 9f       	mul	r24, r31
    4996:	40 0d       	add	r20, r0
    4998:	11 24       	eor	r1, r1
    499a:	60 e0       	ldi	r22, 0x00	; 0
    499c:	c8 01       	movw	r24, r16
    499e:	d1 de       	rcall	.-606    	; 0x4742 <_ZN13DS3231M_Class9writeByteEhh>
    49a0:	f7 01       	movw	r30, r14
    49a2:	84 81       	ldd	r24, Z+4	; 0x04
  writeByte(DS3231M_RTCMIN,int2bcd(dt.minute()));                             // Write the minutes value          //
    49a4:	6d 2d       	mov	r22, r13
    49a6:	0e 94 fc 3f 	call	0x7ff8	; 0x7ff8 <__udivmodqi4>
    49aa:	49 2f       	mov	r20, r25
    49ac:	f0 e1       	ldi	r31, 0x10	; 16
    49ae:	8f 9f       	mul	r24, r31
    49b0:	40 0d       	add	r20, r0
    49b2:	11 24       	eor	r1, r1
    49b4:	61 e0       	ldi	r22, 0x01	; 1
    49b6:	c8 01       	movw	r24, r16
    49b8:	c4 de       	rcall	.-632    	; 0x4742 <_ZN13DS3231M_Class9writeByteEhh>
    49ba:	f7 01       	movw	r30, r14
    49bc:	83 81       	ldd	r24, Z+3	; 0x03
  writeByte(DS3231M_RTCHOUR,int2bcd(dt.hour()));                              // Also re-sets the 24Hour clock on //
    49be:	6d 2d       	mov	r22, r13
    49c0:	0e 94 fc 3f 	call	0x7ff8	; 0x7ff8 <__udivmodqi4>
    49c4:	49 2f       	mov	r20, r25
    49c6:	f0 e1       	ldi	r31, 0x10	; 16
    49c8:	8f 9f       	mul	r24, r31
    49ca:	40 0d       	add	r20, r0
    49cc:	11 24       	eor	r1, r1
    49ce:	62 e0       	ldi	r22, 0x02	; 2
    49d0:	c8 01       	movw	r24, r16
  writeByte(DS3231M_RTCWKDAY,dt.dayOfTheWeek());                              // Update the weekday               //
    49d2:	b7 de       	rcall	.-658    	; 0x4742 <_ZN13DS3231M_Class9writeByteEhh>
    49d4:	c7 01       	movw	r24, r14
    49d6:	2f de       	rcall	.-930    	; 0x4636 <_ZNK8DateTime12dayOfTheWeekEv>
    49d8:	48 2f       	mov	r20, r24
    49da:	63 e0       	ldi	r22, 0x03	; 3
    49dc:	c8 01       	movw	r24, r16
    49de:	b1 de       	rcall	.-670    	; 0x4742 <_ZN13DS3231M_Class9writeByteEhh>
    49e0:	f7 01       	movw	r30, r14
    49e2:	82 81       	ldd	r24, Z+2	; 0x02
  writeByte(DS3231M_RTCDATE,int2bcd(dt.day()));                               // Write the day of month           //
    49e4:	6d 2d       	mov	r22, r13
    49e6:	0e 94 fc 3f 	call	0x7ff8	; 0x7ff8 <__udivmodqi4>
    49ea:	49 2f       	mov	r20, r25
    49ec:	f0 e1       	ldi	r31, 0x10	; 16
    49ee:	8f 9f       	mul	r24, r31
    49f0:	40 0d       	add	r20, r0
    49f2:	11 24       	eor	r1, r1
    49f4:	64 e0       	ldi	r22, 0x04	; 4
    49f6:	c8 01       	movw	r24, r16
    49f8:	a4 de       	rcall	.-696    	; 0x4742 <_ZN13DS3231M_Class9writeByteEhh>
    49fa:	f7 01       	movw	r30, r14
    49fc:	81 81       	ldd	r24, Z+1	; 0x01
  writeByte(DS3231M_RTCMTH,int2bcd(dt.month()));                              // Month, ignore century bit        //
    49fe:	6d 2d       	mov	r22, r13
    4a00:	0e 94 fc 3f 	call	0x7ff8	; 0x7ff8 <__udivmodqi4>
    4a04:	49 2f       	mov	r20, r25
    4a06:	f0 e1       	ldi	r31, 0x10	; 16
    4a08:	8f 9f       	mul	r24, r31
    4a0a:	40 0d       	add	r20, r0
    4a0c:	11 24       	eor	r1, r1
    4a0e:	65 e0       	ldi	r22, 0x05	; 5
    4a10:	c8 01       	movw	r24, r16
    4a12:	97 de       	rcall	.-722    	; 0x4742 <_ZN13DS3231M_Class9writeByteEhh>
  writeByte(DS3231M_RTCYEAR,int2bcd(dt.year()-2000));                         // Write the year                   //
    4a14:	f7 01       	movw	r30, r14
    4a16:	80 81       	ld	r24, Z
    4a18:	6d 2d       	mov	r22, r13
    4a1a:	0e 94 fc 3f 	call	0x7ff8	; 0x7ff8 <__udivmodqi4>
    4a1e:	49 2f       	mov	r20, r25
    4a20:	f0 e1       	ldi	r31, 0x10	; 16
    4a22:	8f 9f       	mul	r24, r31
    4a24:	40 0d       	add	r20, r0
    4a26:	11 24       	eor	r1, r1
    4a28:	66 e0       	ldi	r22, 0x06	; 6
    4a2a:	c8 01       	movw	r24, r16
  writeByte(DS3231M_STATUS,readByte(DS3231M_STATUS)&B01111111);               // Unset OSC flag bit if set        //
    4a2c:	8a de       	rcall	.-748    	; 0x4742 <_ZN13DS3231M_Class9writeByteEhh>
    4a2e:	6f e0       	ldi	r22, 0x0F	; 15
    4a30:	c8 01       	movw	r24, r16
    4a32:	a7 de       	rcall	.-690    	; 0x4782 <_ZN13DS3231M_Class8readByteEh>
    4a34:	48 2f       	mov	r20, r24
    4a36:	4f 77       	andi	r20, 0x7F	; 127
    4a38:	6f e0       	ldi	r22, 0x0F	; 15
    4a3a:	c8 01       	movw	r24, r16
  writeByte(DS3231M_CONTROL,readByte(DS3231M_CONTROL)&B01111111);             // Unset EOSC flag bit if set       //
    4a3c:	82 de       	rcall	.-764    	; 0x4742 <_ZN13DS3231M_Class9writeByteEhh>
    4a3e:	6e e0       	ldi	r22, 0x0E	; 14
    4a40:	c8 01       	movw	r24, r16
    4a42:	9f de       	rcall	.-706    	; 0x4782 <_ZN13DS3231M_Class8readByteEh>
    4a44:	48 2f       	mov	r20, r24
    4a46:	4f 77       	andi	r20, 0x7F	; 127
    4a48:	6e e0       	ldi	r22, 0x0E	; 14
    4a4a:	c8 01       	movw	r24, r16
  _SetUnixTime = now().unixtime();                                            // Store time of last change        //
    4a4c:	7a de       	rcall	.-780    	; 0x4742 <_ZN13DS3231M_Class9writeByteEhh>
    4a4e:	b8 01       	movw	r22, r16
    4a50:	ce 01       	movw	r24, r28
    4a52:	01 96       	adiw	r24, 0x01	; 1
    4a54:	e8 de       	rcall	.-560    	; 0x4826 <_ZN13DS3231M_Class3nowEv>
    4a56:	ce 01       	movw	r24, r28
    4a58:	01 96       	adiw	r24, 0x01	; 1
    4a5a:	f9 dd       	rcall	.-1038   	; 0x464e <_ZNK8DateTime8unixtimeEv>
    4a5c:	f8 01       	movw	r30, r16
    4a5e:	61 83       	std	Z+1, r22	; 0x01
    4a60:	72 83       	std	Z+2, r23	; 0x02
    4a62:	83 83       	std	Z+3, r24	; 0x03
    4a64:	94 83       	std	Z+4, r25	; 0x04
    4a66:	26 96       	adiw	r28, 0x06	; 6
} // of method adjust                                                         //                                  //
    4a68:	0f b6       	in	r0, 0x3f	; 63
    4a6a:	f8 94       	cli
    4a6c:	de bf       	out	0x3e, r29	; 62
    4a6e:	0f be       	out	0x3f, r0	; 63
    4a70:	cd bf       	out	0x3d, r28	; 61
    4a72:	df 91       	pop	r29
    4a74:	cf 91       	pop	r28
    4a76:	1f 91       	pop	r17
    4a78:	0f 91       	pop	r16
    4a7a:	ff 90       	pop	r15
    4a7c:	ef 90       	pop	r14
    4a7e:	df 90       	pop	r13
    4a80:	08 95       	ret

00004a82 <_ZN13DS3231M_Class6adjustEv>:
    4a82:	0f 93       	push	r16
/*******************************************************************************************************************
** Method adjust set the current date/time. This is an overloaded function, if called with no parameters then the **
** RTC is set to the date/time when the program was compiled and uploaded. Otherwise the values are set, but the  **
** oscillator is stopped during the process and needs to be restarted upon completion.                            **
*******************************************************************************************************************/
void DS3231M_Class::adjust() {                                                // Set the RTC date and Time        //
    4a84:	1f 93       	push	r17
    4a86:	cf 93       	push	r28
    4a88:	df 93       	push	r29
    4a8a:	00 d0       	rcall	.+0      	; 0x4a8c <_ZN13DS3231M_Class6adjustEv+0xa>
    4a8c:	00 d0       	rcall	.+0      	; 0x4a8e <_ZN13DS3231M_Class6adjustEv+0xc>
    4a8e:	00 d0       	rcall	.+0      	; 0x4a90 <_ZN13DS3231M_Class6adjustEv+0xe>
    4a90:	cd b7       	in	r28, 0x3d	; 61
    4a92:	de b7       	in	r29, 0x3e	; 62
    4a94:	8c 01       	movw	r16, r24
  adjust(DateTime(F(__DATE__), F(__TIME__)));                                 // Set to compile time              //
    4a96:	4f e1       	ldi	r20, 0x1F	; 31
    4a98:	52 e0       	ldi	r21, 0x02	; 2
    4a9a:	63 e1       	ldi	r22, 0x13	; 19
    4a9c:	72 e0       	ldi	r23, 0x02	; 2
    4a9e:	ce 01       	movw	r24, r28
    4aa0:	01 96       	adiw	r24, 0x01	; 1
    4aa2:	54 dd       	rcall	.-1368   	; 0x454c <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>
    4aa4:	be 01       	movw	r22, r28
    4aa6:	6f 5f       	subi	r22, 0xFF	; 255
    4aa8:	7f 4f       	sbci	r23, 0xFF	; 255
    4aaa:	c8 01       	movw	r24, r16
    4aac:	5c df       	rcall	.-328    	; 0x4966 <_ZN13DS3231M_Class6adjustERK8DateTime>
} // of method adjust                                                         /-----------------------------------//
    4aae:	26 96       	adiw	r28, 0x06	; 6
    4ab0:	0f b6       	in	r0, 0x3f	; 63
    4ab2:	f8 94       	cli
    4ab4:	de bf       	out	0x3e, r29	; 62
    4ab6:	0f be       	out	0x3f, r0	; 63
    4ab8:	cd bf       	out	0x3d, r28	; 61
    4aba:	df 91       	pop	r29
    4abc:	cf 91       	pop	r28
    4abe:	1f 91       	pop	r17
    4ac0:	0f 91       	pop	r16
    4ac2:	08 95       	ret

00004ac4 <_GLOBAL__sub_I__ZN9DhcpClass13beginWithDHCPEPhmm>:
    unsigned long m = n;
    n /= 16;
    char c = m - 16 * n;
    *str-- = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);
}
    4ac4:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    4ac6:	00 e0       	ldi	r16, 0x00	; 0
    4ac8:	20 e0       	ldi	r18, 0x00	; 0
    4aca:	40 e0       	ldi	r20, 0x00	; 0
    4acc:	60 e0       	ldi	r22, 0x00	; 0
    4ace:	8f e1       	ldi	r24, 0x1F	; 31
    4ad0:	9c e0       	ldi	r25, 0x0C	; 12
    4ad2:	0e 94 ce 38 	call	0x719c	; 0x719c <_ZN9IPAddressC1Ehhhh>
    4ad6:	0f 91       	pop	r16
    4ad8:	08 95       	ret

00004ada <_ZN9DNSClient5beginERK9IPAddress>:
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    4ada:	fb 01       	movw	r30, r22
    4adc:	42 81       	ldd	r20, Z+2	; 0x02
    4ade:	53 81       	ldd	r21, Z+3	; 0x03
    4ae0:	64 81       	ldd	r22, Z+4	; 0x04
    4ae2:	75 81       	ldd	r23, Z+5	; 0x05
    4ae4:	fc 01       	movw	r30, r24
    4ae6:	42 83       	std	Z+2, r20	; 0x02
    4ae8:	53 83       	std	Z+3, r21	; 0x03
    4aea:	64 83       	std	Z+4, r22	; 0x04
    4aec:	75 83       	std	Z+5, r23	; 0x05
#define INVALID_RESPONSE -4

void DNSClient::begin(const IPAddress& aDNSServer)
{
    iDNSServer = aDNSServer;
    iRequestId = 0;
    4aee:	17 82       	std	Z+7, r1	; 0x07
    4af0:	16 82       	std	Z+6, r1	; 0x06
    4af2:	08 95       	ret

00004af4 <_ZN9DNSClient9inet_atonEPKcR9IPAddress>:
}


int DNSClient::inet_aton(const char* aIPAddrString, IPAddress& aResult)
{
    4af4:	cf 93       	push	r28
    4af6:	df 93       	push	r29
    4af8:	da 01       	movw	r26, r20
    4afa:	fb 01       	movw	r30, r22
    4afc:	eb 01       	movw	r28, r22
    // See if we've been given a valid IP address
    const char* p =aIPAddrString;
    while (*p &&
    4afe:	89 91       	ld	r24, Y+
    4b00:	81 11       	cpse	r24, r1
    4b02:	fd cf       	rjmp	.-6      	; 0x4afe <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0xa>
    4b04:	80 e0       	ldi	r24, 0x00	; 0
    4b06:	90 e0       	ldi	r25, 0x00	; 0
    4b08:	20 e0       	ldi	r18, 0x00	; 0
    4b0a:	30 e0       	ldi	r19, 0x00	; 0
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
    4b0c:	4a e0       	ldi	r20, 0x0A	; 10
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
        int segmentValue =0;
        while (*p && (segment < 4))
    4b0e:	51 91       	ld	r21, Z+
    4b10:	55 23       	and	r21, r21
    4b12:	e9 f0       	breq	.+58     	; 0x4b4e <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x5a>
    4b14:	24 30       	cpi	r18, 0x04	; 4
    4b16:	31 05       	cpc	r19, r1
    4b18:	44 f5       	brge	.+80     	; 0x4b6a <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
        {
            if (*p == '.')
    4b1a:	5e 32       	cpi	r21, 0x2E	; 46
    4b1c:	69 f4       	brne	.+26     	; 0x4b38 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x44>
            {
                // We've reached the end of a segment
                if (segmentValue > 255)
    4b1e:	8f 3f       	cpi	r24, 0xFF	; 255
    4b20:	91 05       	cpc	r25, r1
    4b22:	09 f0       	breq	.+2      	; 0x4b26 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x32>
    4b24:	14 f5       	brge	.+68     	; 0x4b6a <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
                    // You can't have IP address segments that don't fit in a byte
                    return 0;
                }
                else
                {
                    aResult[segment] = (byte)segmentValue;
    4b26:	ed 01       	movw	r28, r26
    4b28:	c2 0f       	add	r28, r18
    4b2a:	d3 1f       	adc	r29, r19
    4b2c:	8a 83       	std	Y+2, r24	; 0x02
                    segment++;
    4b2e:	2f 5f       	subi	r18, 0xFF	; 255
    4b30:	3f 4f       	sbci	r19, 0xFF	; 255
                    segmentValue = 0;
    4b32:	80 e0       	ldi	r24, 0x00	; 0
    4b34:	90 e0       	ldi	r25, 0x00	; 0
    4b36:	eb cf       	rjmp	.-42     	; 0x4b0e <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x1a>
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
    4b38:	48 9f       	mul	r20, r24
    4b3a:	b0 01       	movw	r22, r0
    4b3c:	49 9f       	mul	r20, r25
    4b3e:	70 0d       	add	r23, r0
    4b40:	11 24       	eor	r1, r1
    4b42:	85 2f       	mov	r24, r21
    4b44:	90 e0       	ldi	r25, 0x00	; 0
    4b46:	c0 97       	sbiw	r24, 0x30	; 48
    4b48:	86 0f       	add	r24, r22
    4b4a:	97 1f       	adc	r25, r23
    4b4c:	e0 cf       	rjmp	.-64     	; 0x4b0e <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x1a>
            }
            p++;
        }
        // We've reached the end of address, but there'll still be the last
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
    4b4e:	8f 3f       	cpi	r24, 0xFF	; 255
    4b50:	91 05       	cpc	r25, r1
    4b52:	09 f0       	breq	.+2      	; 0x4b56 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x62>
    4b54:	54 f4       	brge	.+20     	; 0x4b6a <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
    4b56:	24 30       	cpi	r18, 0x04	; 4
    4b58:	31 05       	cpc	r19, r1
    4b5a:	3c f4       	brge	.+14     	; 0x4b6a <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
            // or more than four segments
            return 0;
        }
        else
        {
            aResult[segment] = (byte)segmentValue;
    4b5c:	fd 01       	movw	r30, r26
    4b5e:	e2 0f       	add	r30, r18
    4b60:	f3 1f       	adc	r31, r19
    4b62:	82 83       	std	Z+2, r24	; 0x02
            return 1;
    4b64:	81 e0       	ldi	r24, 0x01	; 1
    4b66:	90 e0       	ldi	r25, 0x00	; 0
    4b68:	02 c0       	rjmp	.+4      	; 0x4b6e <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x7a>
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
        {
            // You can't have IP address segments that don't fit in a byte,
            // or more than four segments
            return 0;
    4b6a:	80 e0       	ldi	r24, 0x00	; 0
    4b6c:	90 e0       	ldi	r25, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    4b6e:	df 91       	pop	r29
    4b70:	cf 91       	pop	r28
    4b72:	08 95       	ret

00004b74 <_GLOBAL__sub_I__ZN9DNSClient5beginERK9IPAddress>:
    // Mark the entire packet as read
    iUdp.flush();

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
}
    4b74:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    4b76:	00 e0       	ldi	r16, 0x00	; 0
    4b78:	20 e0       	ldi	r18, 0x00	; 0
    4b7a:	40 e0       	ldi	r20, 0x00	; 0
    4b7c:	60 e0       	ldi	r22, 0x00	; 0
    4b7e:	85 e2       	ldi	r24, 0x25	; 37
    4b80:	9c e0       	ldi	r25, 0x0C	; 12
    4b82:	0e 94 ce 38 	call	0x719c	; 0x719c <_ZN9IPAddressC1Ehhhh>
    4b86:	0f 91       	pop	r16
    4b88:	08 95       	ret

00004b8a <_ZN9DNSClient12BuildRequestEPKc>:

    return ret;
}

uint16_t DNSClient::BuildRequest(const char* aName)
{
    4b8a:	8f 92       	push	r8
    4b8c:	9f 92       	push	r9
    4b8e:	af 92       	push	r10
    4b90:	bf 92       	push	r11
    4b92:	cf 92       	push	r12
    4b94:	df 92       	push	r13
    4b96:	ef 92       	push	r14
    4b98:	ff 92       	push	r15
    4b9a:	0f 93       	push	r16
    4b9c:	1f 93       	push	r17
    4b9e:	cf 93       	push	r28
    4ba0:	df 93       	push	r29
    4ba2:	00 d0       	rcall	.+0      	; 0x4ba4 <_ZN9DNSClient12BuildRequestEPKc+0x1a>
    4ba4:	1f 92       	push	r1
    4ba6:	cd b7       	in	r28, 0x3d	; 61
    4ba8:	de b7       	in	r29, 0x3e	; 62
    4baa:	6c 01       	movw	r12, r24
    4bac:	7b 01       	movw	r14, r22
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    //    |                    ARCOUNT                    |
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    // As we only support one request at a time at present, we can simplify
    // some of this header
    iRequestId = millis(); // generate a random ID
    4bae:	0e 94 54 3a 	call	0x74a8	; 0x74a8 <millis>
    4bb2:	f6 01       	movw	r30, r12
    4bb4:	77 83       	std	Z+7, r23	; 0x07
    4bb6:	66 83       	std	Z+6, r22	; 0x06
    uint16_t twoByteBuffer;

    // FIXME We should also check that there's enough space available to write to, rather
    // FIXME than assume there's enough space (as the code does at present)
    iUdp.write((uint8_t*)&iRequestId, sizeof(iRequestId));
    4bb8:	86 01       	movw	r16, r12
    4bba:	08 5f       	subi	r16, 0xF8	; 248
    4bbc:	1f 4f       	sbci	r17, 0xFF	; 255
    4bbe:	b6 01       	movw	r22, r12
    4bc0:	6a 5f       	subi	r22, 0xFA	; 250
    4bc2:	7f 4f       	sbci	r23, 0xFF	; 255
    4bc4:	42 e0       	ldi	r20, 0x02	; 2
    4bc6:	50 e0       	ldi	r21, 0x00	; 0
    4bc8:	c8 01       	movw	r24, r16
    4bca:	30 d5       	rcall	.+2656   	; 0x562c <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = htons(QUERY_FLAG | OPCODE_STANDARD_QUERY | RECURSION_DESIRED_FLAG);
    4bcc:	81 e0       	ldi	r24, 0x01	; 1
    4bce:	90 e0       	ldi	r25, 0x00	; 0
    4bd0:	9a 83       	std	Y+2, r25	; 0x02
    4bd2:	89 83       	std	Y+1, r24	; 0x01
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    4bd4:	42 e0       	ldi	r20, 0x02	; 2
    4bd6:	50 e0       	ldi	r21, 0x00	; 0
    4bd8:	be 01       	movw	r22, r28
    4bda:	6f 5f       	subi	r22, 0xFF	; 255
    4bdc:	7f 4f       	sbci	r23, 0xFF	; 255
    4bde:	c8 01       	movw	r24, r16
    4be0:	25 d5       	rcall	.+2634   	; 0x562c <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = htons(1);  // One question record
    4be2:	80 e0       	ldi	r24, 0x00	; 0
    4be4:	91 e0       	ldi	r25, 0x01	; 1
    4be6:	9a 83       	std	Y+2, r25	; 0x02
    4be8:	89 83       	std	Y+1, r24	; 0x01
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    4bea:	42 e0       	ldi	r20, 0x02	; 2
    4bec:	50 e0       	ldi	r21, 0x00	; 0
    4bee:	be 01       	movw	r22, r28
    4bf0:	6f 5f       	subi	r22, 0xFF	; 255
    4bf2:	7f 4f       	sbci	r23, 0xFF	; 255
    4bf4:	c8 01       	movw	r24, r16
    4bf6:	1a d5       	rcall	.+2612   	; 0x562c <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = 0;  // Zero answer records
    4bf8:	1a 82       	std	Y+2, r1	; 0x02
    4bfa:	19 82       	std	Y+1, r1	; 0x01
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    4bfc:	42 e0       	ldi	r20, 0x02	; 2
    4bfe:	50 e0       	ldi	r21, 0x00	; 0
    4c00:	be 01       	movw	r22, r28
    4c02:	6f 5f       	subi	r22, 0xFF	; 255
    4c04:	7f 4f       	sbci	r23, 0xFF	; 255
    4c06:	c8 01       	movw	r24, r16
    4c08:	11 d5       	rcall	.+2594   	; 0x562c <_ZN11EthernetUDP5writeEPKhj>

    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    4c0a:	42 e0       	ldi	r20, 0x02	; 2
    4c0c:	50 e0       	ldi	r21, 0x00	; 0
    4c0e:	be 01       	movw	r22, r28
    4c10:	6f 5f       	subi	r22, 0xFF	; 255
    4c12:	7f 4f       	sbci	r23, 0xFF	; 255
    4c14:	c8 01       	movw	r24, r16
    4c16:	0a d5       	rcall	.+2580   	; 0x562c <_ZN11EthernetUDP5writeEPKhj>
    // and zero additional records
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    4c18:	42 e0       	ldi	r20, 0x02	; 2
    4c1a:	50 e0       	ldi	r21, 0x00	; 0
    4c1c:	be 01       	movw	r22, r28
    4c1e:	6f 5f       	subi	r22, 0xFF	; 255
    4c20:	7f 4f       	sbci	r23, 0xFF	; 255
    4c22:	c8 01       	movw	r24, r16
    4c24:	03 d5       	rcall	.+2566   	; 0x562c <_ZN11EthernetUDP5writeEPKhj>

    // Build question
    const char* start =aName;
    const char* end =start;
    4c26:	57 01       	movw	r10, r14
    uint8_t len;
    // Run through the name being requested
    while (*end)
    4c28:	f5 01       	movw	r30, r10
    4c2a:	80 81       	ld	r24, Z
    4c2c:	88 23       	and	r24, r24
    4c2e:	f9 f0       	breq	.+62     	; 0x4c6e <_ZN9DNSClient12BuildRequestEPKc+0xe4>
    4c30:	a7 01       	movw	r20, r14
    4c32:	5a 01       	movw	r10, r20
    {
        // Find out how long this section of the name is
        end = start;
        while (*end && (*end != '.') )
    4c34:	f5 01       	movw	r30, r10
    4c36:	81 91       	ld	r24, Z+
    4c38:	6f 01       	movw	r12, r30
    4c3a:	88 23       	and	r24, r24
    4c3c:	21 f0       	breq	.+8      	; 0x4c46 <_ZN9DNSClient12BuildRequestEPKc+0xbc>
    4c3e:	8e 32       	cpi	r24, 0x2E	; 46
    4c40:	11 f0       	breq	.+4      	; 0x4c46 <_ZN9DNSClient12BuildRequestEPKc+0xbc>
    4c42:	a6 01       	movw	r20, r12
    4c44:	f6 cf       	rjmp	.-20     	; 0x4c32 <_ZN9DNSClient12BuildRequestEPKc+0xa8>
        {
            end++;
        }

        if (end-start > 0)
    4c46:	4a 01       	movw	r8, r20
    4c48:	8e 18       	sub	r8, r14
    4c4a:	9f 08       	sbc	r9, r15
    4c4c:	18 14       	cp	r1, r8
    4c4e:	19 04       	cpc	r1, r9
    4c50:	64 f4       	brge	.+24     	; 0x4c6a <_ZN9DNSClient12BuildRequestEPKc+0xe0>
        {
            // Write out the size of this section
            len = end-start;
    4c52:	8b 82       	std	Y+3, r8	; 0x03
            iUdp.write(&len, sizeof(len));
    4c54:	41 e0       	ldi	r20, 0x01	; 1
    4c56:	50 e0       	ldi	r21, 0x00	; 0
    4c58:	be 01       	movw	r22, r28
    4c5a:	6d 5f       	subi	r22, 0xFD	; 253
    4c5c:	7f 4f       	sbci	r23, 0xFF	; 255
    4c5e:	c8 01       	movw	r24, r16
            // And then write out the section
            iUdp.write((uint8_t*)start, end-start);
    4c60:	e5 d4       	rcall	.+2506   	; 0x562c <_ZN11EthernetUDP5writeEPKhj>
    4c62:	a4 01       	movw	r20, r8
    4c64:	b7 01       	movw	r22, r14
    4c66:	c8 01       	movw	r24, r16
    4c68:	e1 d4       	rcall	.+2498   	; 0x562c <_ZN11EthernetUDP5writeEPKhj>
        }
        start = end+1;
    4c6a:	76 01       	movw	r14, r12
    }

    // We've got to the end of the question name, so
    // terminate it with a zero-length section
    len = 0;
    4c6c:	dd cf       	rjmp	.-70     	; 0x4c28 <_ZN9DNSClient12BuildRequestEPKc+0x9e>
    iUdp.write(&len, sizeof(len));
    4c6e:	1b 82       	std	Y+3, r1	; 0x03
    4c70:	41 e0       	ldi	r20, 0x01	; 1
    4c72:	50 e0       	ldi	r21, 0x00	; 0
    4c74:	be 01       	movw	r22, r28
    4c76:	6d 5f       	subi	r22, 0xFD	; 253
    4c78:	7f 4f       	sbci	r23, 0xFF	; 255
    4c7a:	c8 01       	movw	r24, r16
    4c7c:	d7 d4       	rcall	.+2478   	; 0x562c <_ZN11EthernetUDP5writeEPKhj>
    // Finally the type and class of question
    twoByteBuffer = htons(TYPE_A);
    4c7e:	e1 2c       	mov	r14, r1
    4c80:	ff 24       	eor	r15, r15
    4c82:	f3 94       	inc	r15
    4c84:	fa 82       	std	Y+2, r15	; 0x02
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    4c86:	e9 82       	std	Y+1, r14	; 0x01
    4c88:	42 e0       	ldi	r20, 0x02	; 2
    4c8a:	50 e0       	ldi	r21, 0x00	; 0
    4c8c:	be 01       	movw	r22, r28
    4c8e:	6f 5f       	subi	r22, 0xFF	; 255
    4c90:	7f 4f       	sbci	r23, 0xFF	; 255
    4c92:	c8 01       	movw	r24, r16

    twoByteBuffer = htons(CLASS_IN);  // Internet class of question
    4c94:	cb d4       	rcall	.+2454   	; 0x562c <_ZN11EthernetUDP5writeEPKhj>
    4c96:	fa 82       	std	Y+2, r15	; 0x02
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    4c98:	e9 82       	std	Y+1, r14	; 0x01
    4c9a:	42 e0       	ldi	r20, 0x02	; 2
    4c9c:	50 e0       	ldi	r21, 0x00	; 0
    4c9e:	be 01       	movw	r22, r28
    4ca0:	6f 5f       	subi	r22, 0xFF	; 255
    4ca2:	7f 4f       	sbci	r23, 0xFF	; 255
    4ca4:	c8 01       	movw	r24, r16
    4ca6:	c2 d4       	rcall	.+2436   	; 0x562c <_ZN11EthernetUDP5writeEPKhj>
    // Success!  Everything buffered okay
    return 1;
}
    4ca8:	81 e0       	ldi	r24, 0x01	; 1
    4caa:	90 e0       	ldi	r25, 0x00	; 0
    4cac:	0f 90       	pop	r0
    4cae:	0f 90       	pop	r0
    4cb0:	0f 90       	pop	r0
    4cb2:	df 91       	pop	r29
    4cb4:	cf 91       	pop	r28
    4cb6:	1f 91       	pop	r17
    4cb8:	0f 91       	pop	r16
    4cba:	ff 90       	pop	r15
    4cbc:	ef 90       	pop	r14
    4cbe:	df 90       	pop	r13
    4cc0:	cf 90       	pop	r12
    4cc2:	bf 90       	pop	r11
    4cc4:	af 90       	pop	r10
    4cc6:	9f 90       	pop	r9
    4cc8:	8f 90       	pop	r8
    4cca:	08 95       	ret

00004ccc <_ZN9DNSClient15ProcessResponseEjR9IPAddress>:


uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    4ccc:	2f 92       	push	r2
    4cce:	3f 92       	push	r3
    4cd0:	4f 92       	push	r4
    4cd2:	5f 92       	push	r5
    4cd4:	6f 92       	push	r6
    4cd6:	7f 92       	push	r7
    4cd8:	8f 92       	push	r8
    4cda:	9f 92       	push	r9
    4cdc:	af 92       	push	r10
    4cde:	bf 92       	push	r11
    4ce0:	cf 92       	push	r12
    4ce2:	df 92       	push	r13
    4ce4:	ef 92       	push	r14
    4ce6:	ff 92       	push	r15
    4ce8:	0f 93       	push	r16
    4cea:	1f 93       	push	r17
    4cec:	cf 93       	push	r28
    4cee:	df 93       	push	r29
    4cf0:	cd b7       	in	r28, 0x3d	; 61
    4cf2:	de b7       	in	r29, 0x3e	; 62
    4cf4:	63 97       	sbiw	r28, 0x13	; 19
    4cf6:	0f b6       	in	r0, 0x3f	; 63
    4cf8:	f8 94       	cli
    4cfa:	de bf       	out	0x3e, r29	; 62
    4cfc:	0f be       	out	0x3f, r0	; 63
    4cfe:	cd bf       	out	0x3d, r28	; 61
    4d00:	7c 01       	movw	r14, r24
    4d02:	6b 01       	movw	r12, r22
    4d04:	1a 01       	movw	r2, r20
    uint32_t startTime = millis();
    4d06:	0e 94 54 3a 	call	0x74a8	; 0x74a8 <millis>
    4d0a:	4b 01       	movw	r8, r22
    4d0c:	5c 01       	movw	r10, r24

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    4d0e:	87 01       	movw	r16, r14
    4d10:	08 5f       	subi	r16, 0xF8	; 248
    4d12:	1f 4f       	sbci	r17, 0xFF	; 255
    {
        if((millis() - startTime) > aTimeout)
    4d14:	26 01       	movw	r4, r12
    4d16:	61 2c       	mov	r6, r1
    4d18:	71 2c       	mov	r7, r1
uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    4d1a:	c8 01       	movw	r24, r16
    4d1c:	29 d5       	rcall	.+2642   	; 0x5770 <_ZN11EthernetUDP11parsePacketEv>
    4d1e:	18 16       	cp	r1, r24
    4d20:	19 06       	cpc	r1, r25
    4d22:	a4 f0       	brlt	.+40     	; 0x4d4c <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x80>
    {
        if((millis() - startTime) > aTimeout)
    4d24:	0e 94 54 3a 	call	0x74a8	; 0x74a8 <millis>
    4d28:	dc 01       	movw	r26, r24
    4d2a:	cb 01       	movw	r24, r22
    4d2c:	88 19       	sub	r24, r8
    4d2e:	99 09       	sbc	r25, r9
    4d30:	aa 09       	sbc	r26, r10
    4d32:	bb 09       	sbc	r27, r11
    4d34:	48 16       	cp	r4, r24
    4d36:	59 06       	cpc	r5, r25
    4d38:	6a 06       	cpc	r6, r26
    4d3a:	7b 06       	cpc	r7, r27
    4d3c:	d0 f0       	brcs	.+52     	; 0x4d72 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xa6>
            return TIMED_OUT;
        delay(50);
    4d3e:	62 e3       	ldi	r22, 0x32	; 50
    4d40:	70 e0       	ldi	r23, 0x00	; 0
    4d42:	80 e0       	ldi	r24, 0x00	; 0
    4d44:	90 e0       	ldi	r25, 0x00	; 0
    4d46:	0e 94 85 3a 	call	0x750a	; 0x750a <delay>
uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    4d4a:	e7 cf       	rjmp	.-50     	; 0x4d1a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x4e>

    // We've had a reply!
    // Read the UDP header
    uint8_t header[DNS_HEADER_SIZE]; // Enough space to reuse for the DNS header
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
    4d4c:	f7 01       	movw	r30, r14
    4d4e:	42 81       	ldd	r20, Z+2	; 0x02
    4d50:	53 81       	ldd	r21, Z+3	; 0x03
    4d52:	64 81       	ldd	r22, Z+4	; 0x04
    4d54:	75 81       	ldd	r23, Z+5	; 0x05
    4d56:	81 8d       	ldd	r24, Z+25	; 0x19
    4d58:	92 8d       	ldd	r25, Z+26	; 0x1a
    4d5a:	a3 8d       	ldd	r26, Z+27	; 0x1b
    4d5c:	b4 8d       	ldd	r27, Z+28	; 0x1c
    4d5e:	48 17       	cp	r20, r24
    4d60:	59 07       	cpc	r21, r25
    4d62:	6a 07       	cpc	r22, r26
    4d64:	7b 07       	cpc	r23, r27
    4d66:	49 f4       	brne	.+18     	; 0x4d7a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xae>
    4d68:	85 8d       	ldd	r24, Z+29	; 0x1d
    4d6a:	96 8d       	ldd	r25, Z+30	; 0x1e
    4d6c:	c5 97       	sbiw	r24, 0x35	; 53
    4d6e:	29 f4       	brne	.+10     	; 0x4d7a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xae>
    4d70:	09 c0       	rjmp	.+18     	; 0x4d84 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xb8>

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    {
        if((millis() - startTime) > aTimeout)
            return TIMED_OUT;
    4d72:	ee 24       	eor	r14, r14
    4d74:	ea 94       	dec	r14
    4d76:	fe 2c       	mov	r15, r14
    4d78:	f0 c0       	rjmp	.+480    	; 0x4f5a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
        (iUdp.remotePort() != DNS_PORT) )
    {
        // It's not from who we expected
        return INVALID_SERVER;
    4d7a:	9e ef       	ldi	r25, 0xFE	; 254
    4d7c:	e9 2e       	mov	r14, r25
    4d7e:	ff 24       	eor	r15, r15
    4d80:	fa 94       	dec	r15
    4d82:	eb c0       	rjmp	.+470    	; 0x4f5a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    4d84:	c8 01       	movw	r24, r16
    4d86:	08 d4       	rcall	.+2064   	; 0x5598 <_ZN11EthernetUDP9availableEv>
    4d88:	0c 97       	sbiw	r24, 0x0c	; 12
    4d8a:	0c f4       	brge	.+2      	; 0x4d8e <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xc2>
    4d8c:	e2 c0       	rjmp	.+452    	; 0x4f52 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x286>
    {
        return TRUNCATED;
    }
    iUdp.read(header, DNS_HEADER_SIZE);
    4d8e:	4c e0       	ldi	r20, 0x0C	; 12
    4d90:	50 e0       	ldi	r21, 0x00	; 0
    4d92:	be 01       	movw	r22, r28
    4d94:	6f 5f       	subi	r22, 0xFF	; 255
    4d96:	7f 4f       	sbci	r23, 0xFF	; 255
    4d98:	c8 01       	movw	r24, r16
    4d9a:	83 d4       	rcall	.+2310   	; 0x56a2 <_ZN11EthernetUDP4readEPhj>

    uint16_t header_flags = htons(*((uint16_t*)&header[2]));
    4d9c:	8b 81       	ldd	r24, Y+3	; 0x03
    4d9e:	9c 81       	ldd	r25, Y+4	; 0x04
    4da0:	98 27       	eor	r25, r24
    4da2:	89 27       	eor	r24, r25
    4da4:	98 27       	eor	r25, r24
    4da6:	9a 8b       	std	Y+18, r25	; 0x12
    4da8:	89 8b       	std	Y+17, r24	; 0x11
    // Check that it's a response to this request
    if ( ( iRequestId != (*((uint16_t*)&header[0])) ) ||
    4daa:	f7 01       	movw	r30, r14
    4dac:	46 81       	ldd	r20, Z+6	; 0x06
    4dae:	57 81       	ldd	r21, Z+7	; 0x07
    4db0:	29 81       	ldd	r18, Y+1	; 0x01
    4db2:	3a 81       	ldd	r19, Y+2	; 0x02
    4db4:	42 17       	cp	r20, r18
    4db6:	53 07       	cpc	r21, r19
    4db8:	11 f4       	brne	.+4      	; 0x4dbe <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xf2>
    4dba:	97 fd       	sbrc	r25, 7
        ((header_flags & QUERY_RESPONSE_MASK) != (uint16_t)RESPONSE_FLAG) )
    {
        // Mark the entire packet as read
        iUdp.flush();
    4dbc:	07 c0       	rjmp	.+14     	; 0x4dcc <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x100>
    4dbe:	c8 01       	movw	r24, r16
    4dc0:	05 d4       	rcall	.+2058   	; 0x55cc <_ZN11EthernetUDP5flushEv>
        return INVALID_RESPONSE;
    4dc2:	7c ef       	ldi	r23, 0xFC	; 252
    4dc4:	e7 2e       	mov	r14, r23
    4dc6:	ff 24       	eor	r15, r15
    4dc8:	fa 94       	dec	r15
    4dca:	c7 c0       	rjmp	.+398    	; 0x4f5a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    }
    // Check for any errors in the response (or in our request)
    // although we don't do anything to get round these
    if ( (header_flags & TRUNCATION_FLAG) || (header_flags & RESP_MASK) )
    4dcc:	8f 70       	andi	r24, 0x0F	; 15
    4dce:	92 70       	andi	r25, 0x02	; 2
    4dd0:	89 2b       	or	r24, r25
    {
        // Mark the entire packet as read
        iUdp.flush();
    4dd2:	39 f0       	breq	.+14     	; 0x4de2 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x116>
    4dd4:	c8 01       	movw	r24, r16
    4dd6:	fa d3       	rcall	.+2036   	; 0x55cc <_ZN11EthernetUDP5flushEv>
        return -5; //INVALID_RESPONSE;
    4dd8:	6b ef       	ldi	r22, 0xFB	; 251
    4dda:	e6 2e       	mov	r14, r22
    4ddc:	ff 24       	eor	r15, r15
    4dde:	fa 94       	dec	r15
    4de0:	bc c0       	rjmp	.+376    	; 0x4f5a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    }

    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
    4de2:	cf 80       	ldd	r12, Y+7	; 0x07
    4de4:	d8 84       	ldd	r13, Y+8	; 0x08
    4de6:	dc 24       	eor	r13, r12
    4de8:	cd 24       	eor	r12, r13
    4dea:	dc 24       	eor	r13, r12
    if (answerCount == 0 )
    4dec:	c1 14       	cp	r12, r1
    4dee:	d1 04       	cpc	r13, r1
    4df0:	19 f0       	breq	.+6      	; 0x4df8 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x12c>
    4df2:	e1 2c       	mov	r14, r1
    4df4:	f1 2c       	mov	r15, r1
    {
        // Mark the entire packet as read
        iUdp.flush();
    4df6:	1f c0       	rjmp	.+62     	; 0x4e36 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x16a>
    4df8:	c8 01       	movw	r24, r16
    4dfa:	e8 d3       	rcall	.+2000   	; 0x55cc <_ZN11EthernetUDP5flushEv>
        return -6; //INVALID_RESPONSE;
    4dfc:	5a ef       	ldi	r21, 0xFA	; 250
    4dfe:	e5 2e       	mov	r14, r21
    4e00:	ff 24       	eor	r15, r15
    4e02:	fa 94       	dec	r15
    4e04:	aa c0       	rjmp	.+340    	; 0x4f5a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    {
        // Skip over the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    4e06:	41 e0       	ldi	r20, 0x01	; 1
    4e08:	50 e0       	ldi	r21, 0x00	; 0
    4e0a:	be 01       	movw	r22, r28
    4e0c:	63 5f       	subi	r22, 0xF3	; 243
    4e0e:	7f 4f       	sbci	r23, 0xFF	; 255
    4e10:	c8 01       	movw	r24, r16
    4e12:	47 d4       	rcall	.+2190   	; 0x56a2 <_ZN11EthernetUDP4readEPhj>
            if (len > 0)
    4e14:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e16:	81 11       	cpse	r24, r1
                while(len--)
                {
                    iUdp.read(); // we don't care about the returned byte
                }
            }
        } while (len != 0);
    4e18:	17 c0       	rjmp	.+46     	; 0x4e48 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x17c>
    4e1a:	8d 85       	ldd	r24, Y+13	; 0x0d

        // Now jump over the type and class
        for (int i =0; i < 4; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    4e1c:	81 11       	cpse	r24, r1
    4e1e:	f3 cf       	rjmp	.-26     	; 0x4e06 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x13a>
    4e20:	c8 01       	movw	r24, r16
    4e22:	17 d4       	rcall	.+2094   	; 0x5652 <_ZN11EthernetUDP4readEv>
    4e24:	c8 01       	movw	r24, r16
    4e26:	15 d4       	rcall	.+2090   	; 0x5652 <_ZN11EthernetUDP4readEv>
    4e28:	c8 01       	movw	r24, r16
    4e2a:	13 d4       	rcall	.+2086   	; 0x5652 <_ZN11EthernetUDP4readEv>
    4e2c:	c8 01       	movw	r24, r16
    4e2e:	11 d4       	rcall	.+2082   	; 0x5652 <_ZN11EthernetUDP4readEv>
    4e30:	ff ef       	ldi	r31, 0xFF	; 255
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    4e32:	ef 1a       	sub	r14, r31
    4e34:	ff 0a       	sbc	r15, r31
    4e36:	8d 81       	ldd	r24, Y+5	; 0x05
    4e38:	9e 81       	ldd	r25, Y+6	; 0x06
    4e3a:	98 27       	eor	r25, r24
    4e3c:	89 27       	eor	r24, r25
    4e3e:	98 27       	eor	r25, r24
    4e40:	e8 16       	cp	r14, r24
    4e42:	f9 06       	cpc	r15, r25
    4e44:	00 f3       	brcs	.-64     	; 0x4e06 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x13a>
    4e46:	09 c0       	rjmp	.+18     	; 0x4e5a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x18e>
            iUdp.read(&len, sizeof(len));
            if (len > 0)
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
    4e48:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e4a:	9f ef       	ldi	r25, 0xFF	; 255
    4e4c:	98 0f       	add	r25, r24
    4e4e:	9d 87       	std	Y+13, r25	; 0x0d
    4e50:	88 23       	and	r24, r24
    4e52:	19 f3       	breq	.-58     	; 0x4e1a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x14e>
                {
                    iUdp.read(); // we don't care about the returned byte
    4e54:	c8 01       	movw	r24, r16
    4e56:	fd d3       	rcall	.+2042   	; 0x5652 <_ZN11EthernetUDP4readEv>
            iUdp.read(&len, sizeof(len));
            if (len > 0)
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
    4e58:	f7 cf       	rjmp	.-18     	; 0x4e48 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x17c>
    4e5a:	a1 2c       	mov	r10, r1
    4e5c:	b1 2c       	mov	r11, r1
    {
        // Skip the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    4e5e:	41 e0       	ldi	r20, 0x01	; 1
    4e60:	50 e0       	ldi	r21, 0x00	; 0
    4e62:	be 01       	movw	r22, r28
    4e64:	6d 5e       	subi	r22, 0xED	; 237
    4e66:	7f 4f       	sbci	r23, 0xFF	; 255
    4e68:	c8 01       	movw	r24, r16
    4e6a:	1b d4       	rcall	.+2102   	; 0x56a2 <_ZN11EthernetUDP4readEPhj>
    4e6c:	8b 89       	ldd	r24, Y+19	; 0x13
            if ((len & LABEL_COMPRESSION_MASK) == 0)
    4e6e:	98 2f       	mov	r25, r24
    4e70:	90 7c       	andi	r25, 0xC0	; 192
    4e72:	59 f4       	brne	.+22     	; 0x4e8a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1be>
            {
                // It's just a normal label
                if (len > 0)
    4e74:	88 23       	and	r24, r24
    4e76:	79 f0       	breq	.+30     	; 0x4e96 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1ca>
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
    4e78:	8b 89       	ldd	r24, Y+19	; 0x13
    4e7a:	9f ef       	ldi	r25, 0xFF	; 255
    4e7c:	98 0f       	add	r25, r24
    4e7e:	9b 8b       	std	Y+19, r25	; 0x13
    4e80:	88 23       	and	r24, r24
    4e82:	31 f0       	breq	.+12     	; 0x4e90 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1c4>
                    {
                        iUdp.read(); // we don't care about the returned byte
    4e84:	c8 01       	movw	r24, r16
    4e86:	e5 d3       	rcall	.+1994   	; 0x5652 <_ZN11EthernetUDP4readEv>
                if (len > 0)
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
    4e88:	f7 cf       	rjmp	.-18     	; 0x4e78 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1ac>
                // says that a name is either a sequence of labels ended with a
                // 0 length octet or a pointer or a sequence of labels ending in
                // a pointer.  Either way, when we get here we're at the end of
                // the name
                // Skip over the pointer
                iUdp.read(); // we don't care about the returned byte
    4e8a:	c8 01       	movw	r24, r16
    4e8c:	e2 d3       	rcall	.+1988   	; 0x5652 <_ZN11EthernetUDP4readEv>
    4e8e:	1b 8a       	std	Y+19, r1	; 0x13
                // And set len so that we drop out of the name loop
                len = 0;
    4e90:	8b 89       	ldd	r24, Y+19	; 0x13
            }
        } while (len != 0);
    4e92:	81 11       	cpse	r24, r1
    4e94:	e4 cf       	rjmp	.-56     	; 0x4e5e <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x192>

        // Check the type and class
        uint16_t answerType;
        uint16_t answerClass;
        iUdp.read((uint8_t*)&answerType, sizeof(answerType));
    4e96:	42 e0       	ldi	r20, 0x02	; 2
    4e98:	50 e0       	ldi	r21, 0x00	; 0
    4e9a:	be 01       	movw	r22, r28
    4e9c:	61 5f       	subi	r22, 0xF1	; 241
    4e9e:	7f 4f       	sbci	r23, 0xFF	; 255
        iUdp.read((uint8_t*)&answerClass, sizeof(answerClass));
    4ea0:	c8 01       	movw	r24, r16
    4ea2:	ff d3       	rcall	.+2046   	; 0x56a2 <_ZN11EthernetUDP4readEPhj>
    4ea4:	42 e0       	ldi	r20, 0x02	; 2
    4ea6:	50 e0       	ldi	r21, 0x00	; 0
    4ea8:	be 01       	movw	r22, r28
    4eaa:	63 5f       	subi	r22, 0xF3	; 243
    4eac:	7f 4f       	sbci	r23, 0xFF	; 255

        // Ignore the Time-To-Live as we don't do any caching
        for (int i =0; i < TTL_SIZE; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    4eae:	c8 01       	movw	r24, r16
    4eb0:	f8 d3       	rcall	.+2032   	; 0x56a2 <_ZN11EthernetUDP4readEPhj>
    4eb2:	c8 01       	movw	r24, r16
    4eb4:	ce d3       	rcall	.+1948   	; 0x5652 <_ZN11EthernetUDP4readEv>
    4eb6:	c8 01       	movw	r24, r16
    4eb8:	cc d3       	rcall	.+1944   	; 0x5652 <_ZN11EthernetUDP4readEv>
    4eba:	c8 01       	movw	r24, r16
    4ebc:	ca d3       	rcall	.+1940   	; 0x5652 <_ZN11EthernetUDP4readEv>
    4ebe:	c8 01       	movw	r24, r16
    4ec0:	c8 d3       	rcall	.+1936   	; 0x5652 <_ZN11EthernetUDP4readEv>
    4ec2:	42 e0       	ldi	r20, 0x02	; 2
    4ec4:	50 e0       	ldi	r21, 0x00	; 0
        }

        // And read out the length of this answer
        // Don't need header_flags anymore, so we can reuse it here
        iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));
    4ec6:	be 01       	movw	r22, r28
    4ec8:	6f 5e       	subi	r22, 0xEF	; 239
    4eca:	7f 4f       	sbci	r23, 0xFF	; 255
    4ecc:	c8 01       	movw	r24, r16
    4ece:	e9 d3       	rcall	.+2002   	; 0x56a2 <_ZN11EthernetUDP4readEPhj>
    4ed0:	8f 85       	ldd	r24, Y+15	; 0x0f
    4ed2:	98 89       	ldd	r25, Y+16	; 0x10
    4ed4:	81 15       	cp	r24, r1

        if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) )
    4ed6:	91 40       	sbci	r25, 0x01	; 1
    4ed8:	49 f4       	brne	.+18     	; 0x4eec <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x220>
    4eda:	ed 84       	ldd	r14, Y+13	; 0x0d
    4edc:	fe 84       	ldd	r15, Y+14	; 0x0e
    4ede:	fe 24       	eor	r15, r14
    4ee0:	ef 24       	eor	r14, r15
    4ee2:	fe 24       	eor	r15, r14
    4ee4:	81 e0       	ldi	r24, 0x01	; 1
    4ee6:	e8 16       	cp	r14, r24
    4ee8:	f1 04       	cpc	r15, r1
    4eea:	19 f0       	breq	.+6      	; 0x4ef2 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x226>
    4eec:	e1 2c       	mov	r14, r1
    4eee:	f1 2c       	mov	r15, r1
    4ef0:	14 c0       	rjmp	.+40     	; 0x4f1a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x24e>
    4ef2:	89 89       	ldd	r24, Y+17	; 0x11
        {
            if (htons(header_flags) != 4)
    4ef4:	9a 89       	ldd	r25, Y+18	; 0x12
    4ef6:	81 15       	cp	r24, r1
    4ef8:	94 40       	sbci	r25, 0x04	; 4
    4efa:	39 f0       	breq	.+14     	; 0x4f0a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x23e>
    4efc:	c8 01       	movw	r24, r16
            {
                // It's a weird size
                // Mark the entire packet as read
                iUdp.flush();
    4efe:	66 d3       	rcall	.+1740   	; 0x55cc <_ZN11EthernetUDP5flushEv>
    4f00:	47 ef       	ldi	r20, 0xF7	; 247
                return -9;//INVALID_RESPONSE;
    4f02:	e4 2e       	mov	r14, r20
    4f04:	ff 24       	eor	r15, r15
    4f06:	fa 94       	dec	r15
    4f08:	28 c0       	rjmp	.+80     	; 0x4f5a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    4f0a:	b1 01       	movw	r22, r2

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    4f0c:	6e 5f       	subi	r22, 0xFE	; 254
    4f0e:	7f 4f       	sbci	r23, 0xFF	; 255
    4f10:	44 e0       	ldi	r20, 0x04	; 4
            }
            iUdp.read(aAddress.raw_address(), 4);
    4f12:	50 e0       	ldi	r21, 0x00	; 0
    4f14:	c8 01       	movw	r24, r16
    4f16:	c5 d3       	rcall	.+1930   	; 0x56a2 <_ZN11EthernetUDP4readEPhj>
    4f18:	20 c0       	rjmp	.+64     	; 0x4f5a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
            return SUCCESS;
    4f1a:	89 89       	ldd	r24, Y+17	; 0x11
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    4f1c:	9a 89       	ldd	r25, Y+18	; 0x12
    4f1e:	98 27       	eor	r25, r24
    4f20:	89 27       	eor	r24, r25
    4f22:	98 27       	eor	r25, r24
    4f24:	e8 16       	cp	r14, r24
    4f26:	f9 06       	cpc	r15, r25
    4f28:	30 f4       	brcc	.+12     	; 0x4f36 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x26a>
    4f2a:	c8 01       	movw	r24, r16
            {
                iUdp.read(); // we don't care about the returned byte
    4f2c:	92 d3       	rcall	.+1828   	; 0x5652 <_ZN11EthernetUDP4readEv>
    4f2e:	ff ef       	ldi	r31, 0xFF	; 255
    4f30:	ef 1a       	sub	r14, r31
            return SUCCESS;
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    4f32:	ff 0a       	sbc	r15, r31
    4f34:	f2 cf       	rjmp	.-28     	; 0x4f1a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x24e>
    4f36:	2f ef       	ldi	r18, 0xFF	; 255
    4f38:	a2 1a       	sub	r10, r18
    // Now we're up to the bit we're interested in, the answer
    // There might be more than one answer (although we'll just use the first
    // type A answer) and some authority and additional resource records but
    // we're going to ignore all of them.

    for (uint16_t i =0; i < answerCount; i++)
    4f3a:	b2 0a       	sbc	r11, r18
    4f3c:	ca 14       	cp	r12, r10
    4f3e:	db 04       	cpc	r13, r11
    4f40:	09 f0       	breq	.+2      	; 0x4f44 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x278>
    4f42:	8d cf       	rjmp	.-230    	; 0x4e5e <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x192>
    4f44:	c8 01       	movw	r24, r16
    4f46:	42 d3       	rcall	.+1668   	; 0x55cc <_ZN11EthernetUDP5flushEv>
            }
        }
    }

    // Mark the entire packet as read
    iUdp.flush();
    4f48:	36 ef       	ldi	r19, 0xF6	; 246
    4f4a:	e3 2e       	mov	r14, r19
    4f4c:	ff 24       	eor	r15, r15

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
    4f4e:	fa 94       	dec	r15
    4f50:	04 c0       	rjmp	.+8      	; 0x4f5a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    4f52:	8d ef       	ldi	r24, 0xFD	; 253
    4f54:	e8 2e       	mov	r14, r24
    4f56:	ff 24       	eor	r15, r15
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    {
        return TRUNCATED;
    4f58:	fa 94       	dec	r15
    4f5a:	c7 01       	movw	r24, r14
    4f5c:	63 96       	adiw	r28, 0x13	; 19
    4f5e:	0f b6       	in	r0, 0x3f	; 63
    // Mark the entire packet as read
    iUdp.flush();

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
}
    4f60:	f8 94       	cli
    4f62:	de bf       	out	0x3e, r29	; 62
    4f64:	0f be       	out	0x3f, r0	; 63
    4f66:	cd bf       	out	0x3d, r28	; 61
    4f68:	df 91       	pop	r29
    4f6a:	cf 91       	pop	r28
    4f6c:	1f 91       	pop	r17
    4f6e:	0f 91       	pop	r16
    4f70:	ff 90       	pop	r15
    4f72:	ef 90       	pop	r14
    4f74:	df 90       	pop	r13
    4f76:	cf 90       	pop	r12
    4f78:	bf 90       	pop	r11
    4f7a:	af 90       	pop	r10
    4f7c:	9f 90       	pop	r9
    4f7e:	8f 90       	pop	r8
    4f80:	7f 90       	pop	r7
    4f82:	6f 90       	pop	r6
    4f84:	5f 90       	pop	r5
    4f86:	4f 90       	pop	r4
    4f88:	3f 90       	pop	r3
    4f8a:	2f 90       	pop	r2
    4f8c:	08 95       	ret

00004f8e <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>:
    4f8e:	8f 92       	push	r8
    4f90:	9f 92       	push	r9
    4f92:	af 92       	push	r10
        return 0;
    }
}

int DNSClient::getHostByName(const char* aHostname, IPAddress& aResult)
{
    4f94:	bf 92       	push	r11
    4f96:	cf 92       	push	r12
    4f98:	df 92       	push	r13
    4f9a:	ef 92       	push	r14
    4f9c:	ff 92       	push	r15
    4f9e:	0f 93       	push	r16
    4fa0:	1f 93       	push	r17
    4fa2:	cf 93       	push	r28
    4fa4:	df 93       	push	r29
    4fa6:	00 d0       	rcall	.+0      	; 0x4fa8 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x1a>
    4fa8:	00 d0       	rcall	.+0      	; 0x4faa <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x1c>
    4faa:	00 d0       	rcall	.+0      	; 0x4fac <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x1e>
    4fac:	cd b7       	in	r28, 0x3d	; 61
    4fae:	de b7       	in	r29, 0x3e	; 62
    4fb0:	7c 01       	movw	r14, r24
    4fb2:	4b 01       	movw	r8, r22
    4fb4:	5a 01       	movw	r10, r20
    int ret =0;

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
    4fb6:	9e dd       	rcall	.-1220   	; 0x4af4 <_ZN9DNSClient9inet_atonEPKcR9IPAddress>
    4fb8:	8c 01       	movw	r16, r24
    4fba:	89 2b       	or	r24, r25
    4fbc:	09 f0       	breq	.+2      	; 0x4fc0 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x32>
    4fbe:	57 c0       	rjmp	.+174    	; 0x506e <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xe0>
        // It is, our work here is done
        return 1;
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    4fc0:	f7 01       	movw	r30, r14
    4fc2:	42 81       	ldd	r20, Z+2	; 0x02
    4fc4:	53 81       	ldd	r21, Z+3	; 0x03
    4fc6:	64 81       	ldd	r22, Z+4	; 0x04
    4fc8:	75 81       	ldd	r23, Z+5	; 0x05
    4fca:	80 91 27 0c 	lds	r24, 0x0C27	; 0x800c27 <_ZL11INADDR_NONE+0x2>
    4fce:	90 91 28 0c 	lds	r25, 0x0C28	; 0x800c28 <_ZL11INADDR_NONE+0x3>
    4fd2:	a0 91 29 0c 	lds	r26, 0x0C29	; 0x800c29 <_ZL11INADDR_NONE+0x4>
    4fd6:	b0 91 2a 0c 	lds	r27, 0x0C2A	; 0x800c2a <_ZL11INADDR_NONE+0x5>
    4fda:	48 17       	cp	r20, r24
    4fdc:	59 07       	cpc	r21, r25
    4fde:	6a 07       	cpc	r22, r26
    4fe0:	7b 07       	cpc	r23, r27
    4fe2:	09 f4       	brne	.+2      	; 0x4fe6 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x58>
    4fe4:	47 c0       	rjmp	.+142    	; 0x5074 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xe6>
    {
        return INVALID_SERVER;
    }
	
    // Find a socket to use
    if (iUdp.begin(1024+(millis() & 0xF)) == 1)
    4fe6:	0e 94 54 3a 	call	0x74a8	; 0x74a8 <millis>
    4fea:	67 01       	movw	r12, r14
    4fec:	f8 e0       	ldi	r31, 0x08	; 8
    4fee:	cf 0e       	add	r12, r31
    4ff0:	d1 1c       	adc	r13, r1
    4ff2:	6f 70       	andi	r22, 0x0F	; 15
    4ff4:	77 27       	eor	r23, r23
    4ff6:	7c 5f       	subi	r23, 0xFC	; 252
    4ff8:	c6 01       	movw	r24, r12
    4ffa:	89 d3       	rcall	.+1810   	; 0x570e <_ZN11EthernetUDP5beginEj>
    4ffc:	81 30       	cpi	r24, 0x01	; 1
    4ffe:	09 f0       	breq	.+2      	; 0x5002 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x74>
    5000:	3b c0       	rjmp	.+118    	; 0x5078 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xea>
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    5002:	82 e7       	ldi	r24, 0x72	; 114
    5004:	9a e0       	ldi	r25, 0x0A	; 10
    5006:	9a 83       	std	Y+2, r25	; 0x02
    5008:	89 83       	std	Y+1, r24	; 0x01
    500a:	f7 01       	movw	r30, r14
    500c:	82 81       	ldd	r24, Z+2	; 0x02
    500e:	93 81       	ldd	r25, Z+3	; 0x03
    5010:	a4 81       	ldd	r26, Z+4	; 0x04
    5012:	b5 81       	ldd	r27, Z+5	; 0x05
    5014:	8b 83       	std	Y+3, r24	; 0x03
    5016:	9c 83       	std	Y+4, r25	; 0x04
    5018:	ad 83       	std	Y+5, r26	; 0x05
    501a:	be 83       	std	Y+6, r27	; 0x06
        // Try up to three times
        int retries = 0;
//        while ((retries < 3) && (ret <= 0))
        {
            // Send DNS request
            ret = iUdp.beginPacket(iDNSServer, DNS_PORT);
    501c:	45 e3       	ldi	r20, 0x35	; 53
    501e:	50 e0       	ldi	r21, 0x00	; 0
    5020:	be 01       	movw	r22, r28
    5022:	6f 5f       	subi	r22, 0xFF	; 255
    5024:	7f 4f       	sbci	r23, 0xFF	; 255
    5026:	c6 01       	movw	r24, r12
    5028:	f7 d2       	rcall	.+1518   	; 0x5618 <_ZN11EthernetUDP11beginPacketE9IPAddressj>
            if (ret != 0)
    502a:	89 2b       	or	r24, r25
    502c:	19 f4       	brne	.+6      	; 0x5034 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xa6>
    502e:	00 e0       	ldi	r16, 0x00	; 0
    5030:	10 e0       	ldi	r17, 0x00	; 0
            {
                // Now output the request data
                ret = BuildRequest(aHostname);
    5032:	1a c0       	rjmp	.+52     	; 0x5068 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xda>
    5034:	b4 01       	movw	r22, r8
    5036:	c7 01       	movw	r24, r14
                if (ret != 0)
    5038:	a8 dd       	rcall	.-1200   	; 0x4b8a <_ZN9DNSClient12BuildRequestEPKc>
    503a:	89 2b       	or	r24, r25
                {
                    // And finally send the request
                    ret = iUdp.endPacket();
    503c:	c1 f3       	breq	.-16     	; 0x502e <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xa0>
    503e:	c6 01       	movw	r24, r12
    5040:	f2 d2       	rcall	.+1508   	; 0x5626 <_ZN11EthernetUDP9endPacketEv>
                    if (ret != 0)
    5042:	89 2b       	or	r24, r25
    5044:	a1 f3       	breq	.-24     	; 0x502e <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xa0>
    5046:	83 e0       	ldi	r24, 0x03	; 3
    5048:	88 2e       	mov	r8, r24
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
                        {
                            ret = ProcessResponse(5000, aResult);
    504a:	91 2c       	mov	r9, r1
    504c:	a5 01       	movw	r20, r10
    504e:	68 e8       	ldi	r22, 0x88	; 136
    5050:	73 e1       	ldi	r23, 0x13	; 19
    5052:	c7 01       	movw	r24, r14
    5054:	3b de       	rcall	.-906    	; 0x4ccc <_ZN9DNSClient15ProcessResponseEjR9IPAddress>
    5056:	8c 01       	movw	r16, r24
    5058:	21 e0       	ldi	r18, 0x01	; 1
    505a:	82 1a       	sub	r8, r18
    505c:	91 08       	sbc	r9, r1
                    if (ret != 0)
                    {
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
    505e:	21 f0       	breq	.+8      	; 0x5068 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xda>
    5060:	0f 3f       	cpi	r16, 0xFF	; 255
    5062:	ff ef       	ldi	r31, 0xFF	; 255
    5064:	1f 07       	cpc	r17, r31
            }
            retries++;
        }

        // We're done with the socket now
        iUdp.stop();
    5066:	91 f3       	breq	.-28     	; 0x504c <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xbe>
    5068:	c6 01       	movw	r24, r12
    506a:	c2 d2       	rcall	.+1412   	; 0x55f0 <_ZN11EthernetUDP4stopEv>
    506c:	05 c0       	rjmp	.+10     	; 0x5078 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xea>

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
    {
        // It is, our work here is done
        return 1;
    506e:	01 e0       	ldi	r16, 0x01	; 1
    5070:	10 e0       	ldi	r17, 0x00	; 0
    5072:	02 c0       	rjmp	.+4      	; 0x5078 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xea>
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    {
        return INVALID_SERVER;
    5074:	0e ef       	ldi	r16, 0xFE	; 254
    5076:	1f ef       	ldi	r17, 0xFF	; 255
        // We're done with the socket now
        iUdp.stop();
    }

    return ret;
}
    5078:	c8 01       	movw	r24, r16
    507a:	26 96       	adiw	r28, 0x06	; 6
    507c:	0f b6       	in	r0, 0x3f	; 63
    507e:	f8 94       	cli
    5080:	de bf       	out	0x3e, r29	; 62
    5082:	0f be       	out	0x3f, r0	; 63
    5084:	cd bf       	out	0x3d, r28	; 61
    5086:	df 91       	pop	r29
    5088:	cf 91       	pop	r28
    508a:	1f 91       	pop	r17
    508c:	0f 91       	pop	r16
    508e:	ff 90       	pop	r15
    5090:	ef 90       	pop	r14
    5092:	df 90       	pop	r13
    5094:	cf 90       	pop	r12
    5096:	bf 90       	pop	r11
    5098:	af 90       	pop	r10
    509a:	9f 90       	pop	r9
    509c:	8f 90       	pop	r8
    509e:	08 95       	ret

000050a0 <_ZN10W5500Class8writeGAREPh>:
    return _dnsDomainName;
}

char* EthernetClass::hostName(){
    return _hostName;
}
    50a0:	24 e0       	ldi	r18, 0x04	; 4
    50a2:	30 e0       	ldi	r19, 0x00	; 0
    50a4:	ac 01       	movw	r20, r24
    50a6:	64 e0       	ldi	r22, 0x04	; 4
    50a8:	81 e0       	ldi	r24, 0x01	; 1
    50aa:	90 e0       	ldi	r25, 0x00	; 0
    50ac:	35 c6       	rjmp	.+3178   	; 0x5d18 <_ZN10W5500Class5writeEjhPKhj>

000050ae <_ZN10W5500Class9writeSUBREPh>:
    50ae:	24 e0       	ldi	r18, 0x04	; 4
    50b0:	30 e0       	ldi	r19, 0x00	; 0
    50b2:	ac 01       	movw	r20, r24
    50b4:	64 e0       	ldi	r22, 0x04	; 4
    50b6:	85 e0       	ldi	r24, 0x05	; 5
    50b8:	90 e0       	ldi	r25, 0x00	; 0
    50ba:	2e c6       	rjmp	.+3164   	; 0x5d18 <_ZN10W5500Class5writeEjhPKhj>

000050bc <_ZN10W5500Class9writeSHAREPh>:
    50bc:	26 e0       	ldi	r18, 0x06	; 6
    50be:	30 e0       	ldi	r19, 0x00	; 0
    50c0:	ac 01       	movw	r20, r24
    50c2:	64 e0       	ldi	r22, 0x04	; 4
    50c4:	89 e0       	ldi	r24, 0x09	; 9
    50c6:	90 e0       	ldi	r25, 0x00	; 0
    50c8:	27 c6       	rjmp	.+3150   	; 0x5d18 <_ZN10W5500Class5writeEjhPKhj>

000050ca <_ZN10W5500Class9writeSIPREPh>:
    50ca:	24 e0       	ldi	r18, 0x04	; 4
    50cc:	30 e0       	ldi	r19, 0x00	; 0
    50ce:	ac 01       	movw	r20, r24
    50d0:	64 e0       	ldi	r22, 0x04	; 4
    50d2:	8f e0       	ldi	r24, 0x0F	; 15
    50d4:	90 e0       	ldi	r25, 0x00	; 0
    50d6:	20 c6       	rjmp	.+3136   	; 0x5d18 <_ZN10W5500Class5writeEjhPKhj>

000050d8 <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_>:
    50d8:	8f 92       	push	r8
    50da:	9f 92       	push	r9
    50dc:	af 92       	push	r10
    50de:	bf 92       	push	r11
    50e0:	cf 92       	push	r12
    50e2:	df 92       	push	r13
    50e4:	ef 92       	push	r14
    50e6:	ff 92       	push	r15
    50e8:	0f 93       	push	r16
    50ea:	1f 93       	push	r17
    50ec:	cf 93       	push	r28
    50ee:	df 93       	push	r29
    50f0:	4c 01       	movw	r8, r24
    50f2:	5b 01       	movw	r10, r22
    50f4:	6a 01       	movw	r12, r20
    50f6:	e9 01       	movw	r28, r18
    50f8:	fc 01       	movw	r30, r24
    50fa:	64 85       	ldd	r22, Z+12	; 0x0c
    50fc:	85 e6       	ldi	r24, 0x65	; 101
    50fe:	9c e0       	ldi	r25, 0x0C	; 12
    5100:	53 d6       	rcall	.+3238   	; 0x5da8 <_ZN10W5500Class4initEh>
    5102:	c5 01       	movw	r24, r10
    5104:	db df       	rcall	.-74     	; 0x50bc <_ZN10W5500Class9writeSHAREPh>
    5106:	c6 01       	movw	r24, r12
    5108:	02 96       	adiw	r24, 0x02	; 2
    510a:	df df       	rcall	.-66     	; 0x50ca <_ZN10W5500Class9writeSIPREPh>
    510c:	c8 01       	movw	r24, r16
    510e:	02 96       	adiw	r24, 0x02	; 2
    5110:	c7 df       	rcall	.-114    	; 0x50a0 <_ZN10W5500Class8writeGAREPh>
    5112:	c7 01       	movw	r24, r14
    5114:	02 96       	adiw	r24, 0x02	; 2
    5116:	cb df       	rcall	.-106    	; 0x50ae <_ZN10W5500Class9writeSUBREPh>
    5118:	8a 81       	ldd	r24, Y+2	; 0x02
    511a:	9b 81       	ldd	r25, Y+3	; 0x03
    511c:	ac 81       	ldd	r26, Y+4	; 0x04
    511e:	bd 81       	ldd	r27, Y+5	; 0x05
    5120:	f4 01       	movw	r30, r8
    5122:	82 83       	std	Z+2, r24	; 0x02
    5124:	93 83       	std	Z+3, r25	; 0x03
    5126:	a4 83       	std	Z+4, r26	; 0x04
    5128:	b5 83       	std	Z+5, r27	; 0x05
    512a:	df 91       	pop	r29
    512c:	cf 91       	pop	r28
    512e:	1f 91       	pop	r17
    5130:	0f 91       	pop	r16
    5132:	ff 90       	pop	r15
    5134:	ef 90       	pop	r14
    5136:	df 90       	pop	r13
    5138:	cf 90       	pop	r12
    513a:	bf 90       	pop	r11
    513c:	af 90       	pop	r10
    513e:	9f 90       	pop	r9
    5140:	8f 90       	pop	r8
    5142:	08 95       	ret

00005144 <_ZN13EthernetClass11dnsServerIPEv>:
    5144:	22 e7       	ldi	r18, 0x72	; 114
    5146:	3a e0       	ldi	r19, 0x0A	; 10
    5148:	fc 01       	movw	r30, r24
    514a:	31 83       	std	Z+1, r19	; 0x01
    514c:	20 83       	st	Z, r18
    514e:	fb 01       	movw	r30, r22
    5150:	42 81       	ldd	r20, Z+2	; 0x02
    5152:	53 81       	ldd	r21, Z+3	; 0x03
    5154:	64 81       	ldd	r22, Z+4	; 0x04
    5156:	75 81       	ldd	r23, Z+5	; 0x05
    5158:	fc 01       	movw	r30, r24
    515a:	42 83       	std	Z+2, r20	; 0x02
    515c:	53 83       	std	Z+3, r21	; 0x03
    515e:	64 83       	std	Z+4, r22	; 0x04
    5160:	75 83       	std	Z+5, r23	; 0x05
    5162:	08 95       	ret

00005164 <_GLOBAL__sub_I__ZN13EthernetClass6_stateE>:

EthernetClass Ethernet;
    5164:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    5166:	00 e0       	ldi	r16, 0x00	; 0
    5168:	20 e0       	ldi	r18, 0x00	; 0
    516a:	40 e0       	ldi	r20, 0x00	; 0
    516c:	60 e0       	ldi	r22, 0x00	; 0
    516e:	88 e4       	ldi	r24, 0x48	; 72
    5170:	9c e0       	ldi	r25, 0x0C	; 12
    5172:	0e 94 ce 38 	call	0x719c	; 0x719c <_ZN9IPAddressC1Ehhhh>
  uint8_t w5500_cspin;

  static uint8_t _state[MAX_SOCK_NUM];
  static uint16_t _server_port[MAX_SOCK_NUM];

  EthernetClass() { _dhcp = NULL; w5500_cspin = 10; }
    5176:	8b e2       	ldi	r24, 0x2B	; 43
    5178:	9c e0       	ldi	r25, 0x0C	; 12
    517a:	0e 94 c4 38 	call	0x7188	; 0x7188 <_ZN9IPAddressC1Ev>
    517e:	eb e2       	ldi	r30, 0x2B	; 43
    5180:	fc e0       	ldi	r31, 0x0C	; 12
    5182:	13 86       	std	Z+11, r1	; 0x0b
    5184:	12 86       	std	Z+10, r1	; 0x0a
    5186:	8a e0       	ldi	r24, 0x0A	; 10
    5188:	84 87       	std	Z+12, r24	; 0x0c
    518a:	0f 91       	pop	r16
    518c:	08 95       	ret

0000518e <_ZN14EthernetClientneERKS_>:
uint16_t EthernetClient::_srcport = 1024;

EthernetClient::EthernetClient() : _sock(MAX_SOCK_NUM) {
}

EthernetClient::EthernetClient(uint8_t sock) : _sock(sock) {
    518e:	dc 01       	movw	r26, r24
    5190:	ed 91       	ld	r30, X+
    5192:	fc 91       	ld	r31, X
    5194:	02 8c       	ldd	r0, Z+26	; 0x1a
    5196:	f3 8d       	ldd	r31, Z+27	; 0x1b
    5198:	e0 2d       	mov	r30, r0
    519a:	09 95       	icall
    519c:	91 e0       	ldi	r25, 0x01	; 1
    519e:	89 27       	eor	r24, r25
    51a0:	08 95       	ret

000051a2 <_ZN14EthernetClient5writeEh>:
    51a2:	cf 93       	push	r28
    51a4:	df 93       	push	r29
    51a6:	1f 92       	push	r1
    51a8:	cd b7       	in	r28, 0x3d	; 61
    51aa:	de b7       	in	r29, 0x3e	; 62
    51ac:	69 83       	std	Y+1, r22	; 0x01
    51ae:	dc 01       	movw	r26, r24
    51b0:	ed 91       	ld	r30, X+
    51b2:	fc 91       	ld	r31, X
    51b4:	02 80       	ldd	r0, Z+2	; 0x02
    51b6:	f3 81       	ldd	r31, Z+3	; 0x03
    51b8:	e0 2d       	mov	r30, r0
    51ba:	41 e0       	ldi	r20, 0x01	; 1
    51bc:	50 e0       	ldi	r21, 0x00	; 0
    51be:	be 01       	movw	r22, r28
    51c0:	6f 5f       	subi	r22, 0xFF	; 255
    51c2:	7f 4f       	sbci	r23, 0xFF	; 255
    51c4:	09 95       	icall
    51c6:	0f 90       	pop	r0
    51c8:	df 91       	pop	r29
    51ca:	cf 91       	pop	r28
    51cc:	08 95       	ret

000051ce <_ZN14EthernetClientcvbEv>:
    51ce:	21 e0       	ldi	r18, 0x01	; 1
    51d0:	fc 01       	movw	r30, r24
    51d2:	84 85       	ldd	r24, Z+12	; 0x0c
    51d4:	88 30       	cpi	r24, 0x08	; 8
    51d6:	09 f4       	brne	.+2      	; 0x51da <_ZN14EthernetClientcvbEv+0xc>
    51d8:	20 e0       	ldi	r18, 0x00	; 0
    51da:	82 2f       	mov	r24, r18
    51dc:	08 95       	ret

000051de <_ZN14EthernetClienteqERKS_>:
    51de:	fc 01       	movw	r30, r24
    51e0:	94 85       	ldd	r25, Z+12	; 0x0c
    51e2:	fb 01       	movw	r30, r22
    51e4:	84 85       	ldd	r24, Z+12	; 0x0c
    51e6:	98 13       	cpse	r25, r24
    51e8:	03 c0       	rjmp	.+6      	; 0x51f0 <_ZN14EthernetClienteqERKS_+0x12>
    51ea:	81 e0       	ldi	r24, 0x01	; 1
    51ec:	98 30       	cpi	r25, 0x08	; 8
    51ee:	09 f4       	brne	.+2      	; 0x51f2 <_ZN14EthernetClienteqERKS_+0x14>
    51f0:	80 e0       	ldi	r24, 0x00	; 0
    51f2:	08 95       	ret

000051f4 <_ZN14EthernetClient7connectEPKcj>:
    51f4:	cf 92       	push	r12
    51f6:	df 92       	push	r13
    51f8:	ef 92       	push	r14
    51fa:	ff 92       	push	r15
    51fc:	0f 93       	push	r16
    51fe:	1f 93       	push	r17
    5200:	cf 93       	push	r28
    5202:	df 93       	push	r29
    5204:	cd b7       	in	r28, 0x3d	; 61
    5206:	de b7       	in	r29, 0x3e	; 62
    5208:	af 97       	sbiw	r28, 0x2f	; 47
    520a:	0f b6       	in	r0, 0x3f	; 63
    520c:	f8 94       	cli
    520e:	de bf       	out	0x3e, r29	; 62
    5210:	0f be       	out	0x3f, r0	; 63
    5212:	cd bf       	out	0x3d, r28	; 61
    5214:	8c 01       	movw	r16, r24
    5216:	6b 01       	movw	r12, r22
    5218:	7a 01       	movw	r14, r20
    521a:	ce 01       	movw	r24, r28
    521c:	01 96       	adiw	r24, 0x01	; 1
    521e:	0e 94 c4 38 	call	0x7188	; 0x7188 <_ZN9IPAddressC1Ev>
    5222:	ce 01       	movw	r24, r28
    5224:	09 96       	adiw	r24, 0x09	; 9
    5226:	f3 d2       	rcall	.+1510   	; 0x580e <_ZN11EthernetUDPC1Ev>
    5228:	ce 01       	movw	r24, r28
    522a:	8a 96       	adiw	r24, 0x2a	; 42
    522c:	0e 94 c4 38 	call	0x7188	; 0x7188 <_ZN9IPAddressC1Ev>
    5230:	6b e2       	ldi	r22, 0x2B	; 43
    5232:	7c e0       	ldi	r23, 0x0C	; 12
    5234:	ce 01       	movw	r24, r28
    5236:	84 96       	adiw	r24, 0x24	; 36
    5238:	85 df       	rcall	.-246    	; 0x5144 <_ZN13EthernetClass11dnsServerIPEv>
    523a:	be 01       	movw	r22, r28
    523c:	6c 5d       	subi	r22, 0xDC	; 220
    523e:	7f 4f       	sbci	r23, 0xFF	; 255
    5240:	ce 01       	movw	r24, r28
    5242:	01 96       	adiw	r24, 0x01	; 1
    5244:	4a dc       	rcall	.-1900   	; 0x4ada <_ZN9DNSClient5beginERK9IPAddress>
    5246:	ae 01       	movw	r20, r28
    5248:	46 5d       	subi	r20, 0xD6	; 214
    524a:	5f 4f       	sbci	r21, 0xFF	; 255
    524c:	b6 01       	movw	r22, r12
    524e:	ce 01       	movw	r24, r28
    5250:	01 96       	adiw	r24, 0x01	; 1
    5252:	9d de       	rcall	.-710    	; 0x4f8e <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>
    5254:	81 30       	cpi	r24, 0x01	; 1
    5256:	91 05       	cpc	r25, r1
    5258:	c1 f4       	brne	.+48     	; 0x528a <_ZN14EthernetClient7connectEPKcj+0x96>
    525a:	d8 01       	movw	r26, r16
    525c:	ed 91       	ld	r30, X+
    525e:	fc 91       	ld	r31, X
    5260:	06 84       	ldd	r0, Z+14	; 0x0e
    5262:	f7 85       	ldd	r31, Z+15	; 0x0f
    5264:	e0 2d       	mov	r30, r0
    5266:	82 e7       	ldi	r24, 0x72	; 114
    5268:	9a e0       	ldi	r25, 0x0A	; 10
    526a:	9d a3       	std	Y+37, r25	; 0x25
    526c:	8c a3       	std	Y+36, r24	; 0x24
    526e:	8c a5       	ldd	r24, Y+44	; 0x2c
    5270:	9d a5       	ldd	r25, Y+45	; 0x2d
    5272:	ae a5       	ldd	r26, Y+46	; 0x2e
    5274:	bf a5       	ldd	r27, Y+47	; 0x2f
    5276:	8e a3       	std	Y+38, r24	; 0x26
    5278:	9f a3       	std	Y+39, r25	; 0x27
    527a:	a8 a7       	std	Y+40, r26	; 0x28
    527c:	b9 a7       	std	Y+41, r27	; 0x29
    527e:	a7 01       	movw	r20, r14
    5280:	be 01       	movw	r22, r28
    5282:	6c 5d       	subi	r22, 0xDC	; 220
    5284:	7f 4f       	sbci	r23, 0xFF	; 255
    5286:	c8 01       	movw	r24, r16
    5288:	09 95       	icall
    528a:	af 96       	adiw	r28, 0x2f	; 47
    528c:	0f b6       	in	r0, 0x3f	; 63
    528e:	f8 94       	cli
    5290:	de bf       	out	0x3e, r29	; 62
    5292:	0f be       	out	0x3f, r0	; 63
    5294:	cd bf       	out	0x3d, r28	; 61
    5296:	df 91       	pop	r29
    5298:	cf 91       	pop	r28
    529a:	1f 91       	pop	r17
    529c:	0f 91       	pop	r16
    529e:	ff 90       	pop	r15
    52a0:	ef 90       	pop	r14
    52a2:	df 90       	pop	r13
    52a4:	cf 90       	pop	r12
    52a6:	08 95       	ret

000052a8 <_ZN14EthernetClient5writeEPKhj>:
    52a8:	0f 93       	push	r16
    52aa:	1f 93       	push	r17
    52ac:	cf 93       	push	r28
    52ae:	df 93       	push	r29
    52b0:	8c 01       	movw	r16, r24
    52b2:	d4 2f       	mov	r29, r20
    52b4:	c5 2f       	mov	r28, r21
    52b6:	fc 01       	movw	r30, r24
    52b8:	84 85       	ldd	r24, Z+12	; 0x0c
    52ba:	88 30       	cpi	r24, 0x08	; 8
    52bc:	41 f4       	brne	.+16     	; 0x52ce <_ZN14EthernetClient5writeEPKhj+0x26>
    52be:	81 e0       	ldi	r24, 0x01	; 1
    52c0:	90 e0       	ldi	r25, 0x00	; 0
    52c2:	f8 01       	movw	r30, r16
    52c4:	93 83       	std	Z+3, r25	; 0x03
    52c6:	82 83       	std	Z+2, r24	; 0x02
    52c8:	80 e0       	ldi	r24, 0x00	; 0
    52ca:	90 e0       	ldi	r25, 0x00	; 0
    52cc:	05 c0       	rjmp	.+10     	; 0x52d8 <_ZN14EthernetClient5writeEPKhj+0x30>
    52ce:	cf d3       	rcall	.+1950   	; 0x5a6e <_Z4sendhPKhj>
    52d0:	89 2b       	or	r24, r25
    52d2:	a9 f3       	breq	.-22     	; 0x52be <_ZN14EthernetClient5writeEPKhj+0x16>
    52d4:	8d 2f       	mov	r24, r29
    52d6:	9c 2f       	mov	r25, r28
    52d8:	df 91       	pop	r29
    52da:	cf 91       	pop	r28
    52dc:	1f 91       	pop	r17
    52de:	0f 91       	pop	r16
    52e0:	08 95       	ret

000052e2 <_ZN14EthernetClient9availableEv>:
    52e2:	fc 01       	movw	r30, r24
    52e4:	64 85       	ldd	r22, Z+12	; 0x0c
    52e6:	68 30       	cpi	r22, 0x08	; 8
    52e8:	19 f0       	breq	.+6      	; 0x52f0 <_ZN14EthernetClient9availableEv+0xe>
    52ea:	85 e6       	ldi	r24, 0x65	; 101
    52ec:	9c e0       	ldi	r25, 0x0C	; 12
    52ee:	d0 c5       	rjmp	.+2976   	; 0x5e90 <_ZN10W5500Class17getRXReceivedSizeEh>
    52f0:	80 e0       	ldi	r24, 0x00	; 0
    52f2:	90 e0       	ldi	r25, 0x00	; 0
    52f4:	08 95       	ret

000052f6 <_ZN14EthernetClient4readEv>:
    52f6:	cf 93       	push	r28
    52f8:	df 93       	push	r29
    52fa:	1f 92       	push	r1
    52fc:	cd b7       	in	r28, 0x3d	; 61
    52fe:	de b7       	in	r29, 0x3e	; 62
    5300:	41 e0       	ldi	r20, 0x01	; 1
    5302:	50 e0       	ldi	r21, 0x00	; 0
    5304:	be 01       	movw	r22, r28
    5306:	6f 5f       	subi	r22, 0xFF	; 255
    5308:	7f 4f       	sbci	r23, 0xFF	; 255
    530a:	fc 01       	movw	r30, r24
    530c:	84 85       	ldd	r24, Z+12	; 0x0c
    530e:	f7 d3       	rcall	.+2030   	; 0x5afe <_Z4recvhPhi>
    5310:	18 16       	cp	r1, r24
    5312:	19 06       	cpc	r1, r25
    5314:	1c f4       	brge	.+6      	; 0x531c <_ZN14EthernetClient4readEv+0x26>
    5316:	89 81       	ldd	r24, Y+1	; 0x01
    5318:	90 e0       	ldi	r25, 0x00	; 0
    531a:	02 c0       	rjmp	.+4      	; 0x5320 <_ZN14EthernetClient4readEv+0x2a>
    531c:	8f ef       	ldi	r24, 0xFF	; 255
    531e:	9f ef       	ldi	r25, 0xFF	; 255
    5320:	0f 90       	pop	r0
    5322:	df 91       	pop	r29
    5324:	cf 91       	pop	r28
    5326:	08 95       	ret

00005328 <_ZN14EthernetClient4readEPhj>:
    5328:	fc 01       	movw	r30, r24
    532a:	84 85       	ldd	r24, Z+12	; 0x0c
    532c:	e8 c3       	rjmp	.+2000   	; 0x5afe <_Z4recvhPhi>

0000532e <_ZN14EthernetClient4peekEv>:
    532e:	0f 93       	push	r16
    5330:	1f 93       	push	r17
    5332:	cf 93       	push	r28
    5334:	df 93       	push	r29
    5336:	1f 92       	push	r1
    5338:	cd b7       	in	r28, 0x3d	; 61
    533a:	de b7       	in	r29, 0x3e	; 62
    533c:	8c 01       	movw	r16, r24
    533e:	dc 01       	movw	r26, r24
    5340:	ed 91       	ld	r30, X+
    5342:	fc 91       	ld	r31, X
    5344:	00 84       	ldd	r0, Z+8	; 0x08
    5346:	f1 85       	ldd	r31, Z+9	; 0x09
    5348:	e0 2d       	mov	r30, r0
    534a:	09 95       	icall
    534c:	89 2b       	or	r24, r25
    534e:	49 f0       	breq	.+18     	; 0x5362 <_ZN14EthernetClient4peekEv+0x34>
    5350:	be 01       	movw	r22, r28
    5352:	6f 5f       	subi	r22, 0xFF	; 255
    5354:	7f 4f       	sbci	r23, 0xFF	; 255
    5356:	f8 01       	movw	r30, r16
    5358:	84 85       	ldd	r24, Z+12	; 0x0c
    535a:	12 d4       	rcall	.+2084   	; 0x5b80 <_Z4peekhPh>
    535c:	89 81       	ldd	r24, Y+1	; 0x01
    535e:	90 e0       	ldi	r25, 0x00	; 0
    5360:	02 c0       	rjmp	.+4      	; 0x5366 <_ZN14EthernetClient4peekEv+0x38>
    5362:	8f ef       	ldi	r24, 0xFF	; 255
    5364:	9f ef       	ldi	r25, 0xFF	; 255
    5366:	0f 90       	pop	r0
    5368:	df 91       	pop	r29
    536a:	cf 91       	pop	r28
    536c:	1f 91       	pop	r17
    536e:	0f 91       	pop	r16
    5370:	08 95       	ret

00005372 <_ZN14EthernetClient5flushEv>:
    5372:	fc 01       	movw	r30, r24
    5374:	84 85       	ldd	r24, Z+12	; 0x0c
    5376:	11 c4       	rjmp	.+2082   	; 0x5b9a <_Z5flushh>

00005378 <_ZN14EthernetClientC1Ev>:
    5378:	fc 01       	movw	r30, r24
    537a:	13 82       	std	Z+3, r1	; 0x03
    537c:	12 82       	std	Z+2, r1	; 0x02
    537e:	88 ee       	ldi	r24, 0xE8	; 232
    5380:	93 e0       	ldi	r25, 0x03	; 3
    5382:	a0 e0       	ldi	r26, 0x00	; 0
    5384:	b0 e0       	ldi	r27, 0x00	; 0
    5386:	84 83       	std	Z+4, r24	; 0x04
    5388:	95 83       	std	Z+5, r25	; 0x05
    538a:	a6 83       	std	Z+6, r26	; 0x06
    538c:	b7 83       	std	Z+7, r27	; 0x07
    538e:	8e ee       	ldi	r24, 0xEE	; 238
    5390:	99 e0       	ldi	r25, 0x09	; 9
    5392:	91 83       	std	Z+1, r25	; 0x01
    5394:	80 83       	st	Z, r24
    5396:	88 e0       	ldi	r24, 0x08	; 8
    5398:	84 87       	std	Z+12, r24	; 0x0c
    539a:	08 95       	ret

0000539c <_ZN14EthernetClient6statusEv>:
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
}

uint8_t EthernetClient::status() {
  if (_sock == MAX_SOCK_NUM) return SnSR::CLOSED;
    539c:	fc 01       	movw	r30, r24
    539e:	64 85       	ldd	r22, Z+12	; 0x0c
    53a0:	68 30       	cpi	r22, 0x08	; 8
    53a2:	39 f0       	breq	.+14     	; 0x53b2 <_ZN14EthernetClient6statusEv+0x16>

extern W5500Class w5500;

uint8_t W5500Class::readSn(SOCKET _s, uint16_t _addr) {
    uint8_t cntl_byte = (_s<<5)+0x08;
    return read(_addr, cntl_byte);
    53a4:	62 95       	swap	r22
    53a6:	66 0f       	add	r22, r22
    53a8:	60 7e       	andi	r22, 0xE0	; 224
    53aa:	68 5f       	subi	r22, 0xF8	; 248
    53ac:	83 e0       	ldi	r24, 0x03	; 3
    53ae:	90 e0       	ldi	r25, 0x00	; 0
    53b0:	df c4       	rjmp	.+2494   	; 0x5d70 <_ZN10W5500Class4readEjh>
  return w5500.readSnSR(_sock);
}
    53b2:	80 e0       	ldi	r24, 0x00	; 0
    53b4:	08 95       	ret

000053b6 <_ZN14EthernetClient9connectedEv>:

  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
    53b6:	cf 93       	push	r28
    53b8:	df 93       	push	r29
  if (_sock == MAX_SOCK_NUM) return 0;
    53ba:	fc 01       	movw	r30, r24
    53bc:	24 85       	ldd	r18, Z+12	; 0x0c
    53be:	28 30       	cpi	r18, 0x08	; 8
    53c0:	c9 f0       	breq	.+50     	; 0x53f4 <_ZN14EthernetClient9connectedEv+0x3e>
    53c2:	ec 01       	movw	r28, r24
  
  uint8_t s = status();
    53c4:	eb df       	rcall	.-42     	; 0x539c <_ZN14EthernetClient6statusEv>
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
    53c6:	84 31       	cpi	r24, 0x14	; 20
    53c8:	81 f0       	breq	.+32     	; 0x53ea <_ZN14EthernetClient9connectedEv+0x34>

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
  
  uint8_t s = status();
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    53ca:	88 23       	and	r24, r24
    53cc:	71 f0       	breq	.+28     	; 0x53ea <_ZN14EthernetClient9connectedEv+0x34>
    53ce:	88 31       	cpi	r24, 0x18	; 24
    53d0:	61 f0       	breq	.+24     	; 0x53ea <_ZN14EthernetClient9connectedEv+0x34>
    (s == SnSR::CLOSE_WAIT && !available()));
    53d2:	8c 31       	cpi	r24, 0x1C	; 28
    53d4:	61 f4       	brne	.+24     	; 0x53ee <_ZN14EthernetClient9connectedEv+0x38>
    53d6:	e8 81       	ld	r30, Y
    53d8:	f9 81       	ldd	r31, Y+1	; 0x01
    53da:	00 84       	ldd	r0, Z+8	; 0x08
    53dc:	f1 85       	ldd	r31, Z+9	; 0x09
    53de:	e0 2d       	mov	r30, r0
    53e0:	ce 01       	movw	r24, r28
    53e2:	09 95       	icall
    53e4:	21 e0       	ldi	r18, 0x01	; 1
    53e6:	89 2b       	or	r24, r25
    53e8:	19 f4       	brne	.+6      	; 0x53f0 <_ZN14EthernetClient9connectedEv+0x3a>
    53ea:	20 e0       	ldi	r18, 0x00	; 0
    53ec:	01 c0       	rjmp	.+2      	; 0x53f0 <_ZN14EthernetClient9connectedEv+0x3a>
    53ee:	21 e0       	ldi	r18, 0x01	; 1
    53f0:	82 2f       	mov	r24, r18
    53f2:	01 c0       	rjmp	.+2      	; 0x53f6 <_ZN14EthernetClient9connectedEv+0x40>
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
    53f4:	80 e0       	ldi	r24, 0x00	; 0
  
  uint8_t s = status();
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
}
    53f6:	df 91       	pop	r29
    53f8:	cf 91       	pop	r28
    53fa:	08 95       	ret

000053fc <_ZN14EthernetClient4stopEv>:

void EthernetClient::flush() {
  ::flush(_sock);
}

void EthernetClient::stop() {
    53fc:	cf 92       	push	r12
    53fe:	df 92       	push	r13
    5400:	ef 92       	push	r14
    5402:	ff 92       	push	r15
    5404:	cf 93       	push	r28
    5406:	df 93       	push	r29
    5408:	ec 01       	movw	r28, r24
  if (_sock == MAX_SOCK_NUM)
    540a:	8c 85       	ldd	r24, Y+12	; 0x0c
    540c:	88 30       	cpi	r24, 0x08	; 8
    540e:	69 f1       	breq	.+90     	; 0x546a <_ZN14EthernetClient4stopEv+0x6e>
    return;

  // attempt to close the connection gracefully (send a FIN to other side)
  disconnect(_sock);
    5410:	29 d3       	rcall	.+1618   	; 0x5a64 <_Z10disconnecth>
  unsigned long start = millis();
    5412:	0e 94 54 3a 	call	0x74a8	; 0x74a8 <millis>
    5416:	6b 01       	movw	r12, r22
    5418:	7c 01       	movw	r14, r24

  // wait a second for the connection to close
  while (status() != SnSR::CLOSED && millis() - start < 1000)
    541a:	ce 01       	movw	r24, r28
    541c:	bf df       	rcall	.-130    	; 0x539c <_ZN14EthernetClient6statusEv>
    541e:	88 23       	and	r24, r24
    5420:	a1 f0       	breq	.+40     	; 0x544a <_ZN14EthernetClient4stopEv+0x4e>
    5422:	0e 94 54 3a 	call	0x74a8	; 0x74a8 <millis>
    5426:	dc 01       	movw	r26, r24
    5428:	cb 01       	movw	r24, r22
    542a:	8c 19       	sub	r24, r12
    542c:	9d 09       	sbc	r25, r13
    542e:	ae 09       	sbc	r26, r14
    5430:	bf 09       	sbc	r27, r15
    5432:	88 3e       	cpi	r24, 0xE8	; 232
    5434:	93 40       	sbci	r25, 0x03	; 3
    5436:	a1 05       	cpc	r26, r1
    5438:	b1 05       	cpc	r27, r1
    543a:	38 f4       	brcc	.+14     	; 0x544a <_ZN14EthernetClient4stopEv+0x4e>
    delay(1);
    543c:	61 e0       	ldi	r22, 0x01	; 1
    543e:	70 e0       	ldi	r23, 0x00	; 0
    5440:	80 e0       	ldi	r24, 0x00	; 0
    5442:	90 e0       	ldi	r25, 0x00	; 0
    5444:	0e 94 85 3a 	call	0x750a	; 0x750a <delay>

  // if it hasn't closed, close it forcefully
  if (status() != SnSR::CLOSED)
    5448:	e8 cf       	rjmp	.-48     	; 0x541a <_ZN14EthernetClient4stopEv+0x1e>
    544a:	ce 01       	movw	r24, r28
    544c:	a7 df       	rcall	.-178    	; 0x539c <_ZN14EthernetClient6statusEv>
    544e:	88 23       	and	r24, r24
    close(_sock);
    5450:	11 f0       	breq	.+4      	; 0x5456 <_ZN14EthernetClient4stopEv+0x5a>
    5452:	8c 85       	ldd	r24, Y+12	; 0x0c
    5454:	96 d2       	rcall	.+1324   	; 0x5982 <_Z5closeh>

  EthernetClass::_server_port[_sock] = 0;
    5456:	ec 85       	ldd	r30, Y+12	; 0x0c
    5458:	f0 e0       	ldi	r31, 0x00	; 0
    545a:	ee 0f       	add	r30, r30
    545c:	ff 1f       	adc	r31, r31
    545e:	e8 5c       	subi	r30, 0xC8	; 200
    5460:	f3 4f       	sbci	r31, 0xF3	; 243
    5462:	11 82       	std	Z+1, r1	; 0x01
    5464:	10 82       	st	Z, r1
  _sock = MAX_SOCK_NUM;
    5466:	88 e0       	ldi	r24, 0x08	; 8
    5468:	8c 87       	std	Y+12, r24	; 0x0c
}
    546a:	df 91       	pop	r29
    546c:	cf 91       	pop	r28
    546e:	ff 90       	pop	r15
    5470:	ef 90       	pop	r14
    5472:	df 90       	pop	r13
    5474:	cf 90       	pop	r12
    5476:	08 95       	ret

00005478 <_ZN14EthernetClient7connectE9IPAddressj>:
  } else {
    return ret;
  }
}

int EthernetClient::connect(IPAddress ip, uint16_t port) {
    5478:	cf 92       	push	r12
    547a:	df 92       	push	r13
    547c:	ff 92       	push	r15
    547e:	0f 93       	push	r16
    5480:	1f 93       	push	r17
    5482:	cf 93       	push	r28
    5484:	df 93       	push	r29
  if (_sock != MAX_SOCK_NUM)
    5486:	fc 01       	movw	r30, r24
    5488:	24 85       	ldd	r18, Z+12	; 0x0c
    548a:	28 30       	cpi	r18, 0x08	; 8
    548c:	c1 f5       	brne	.+112    	; 0x54fe <_ZN14EthernetClient7connectE9IPAddressj+0x86>
    548e:	6a 01       	movw	r12, r20
    5490:	8b 01       	movw	r16, r22
    5492:	ec 01       	movw	r28, r24
    5494:	f1 2c       	mov	r15, r1
    5496:	6f 2d       	mov	r22, r15
    5498:	62 95       	swap	r22
    549a:	66 0f       	add	r22, r22
    549c:	60 7e       	andi	r22, 0xE0	; 224
    549e:	68 5f       	subi	r22, 0xF8	; 248
    54a0:	83 e0       	ldi	r24, 0x03	; 3
    54a2:	90 e0       	ldi	r25, 0x00	; 0
    54a4:	65 d4       	rcall	.+2250   	; 0x5d70 <_ZN10W5500Class4readEjh>
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
    54a6:	81 11       	cpse	r24, r1
    54a8:	02 c0       	rjmp	.+4      	; 0x54ae <_ZN14EthernetClient7connectE9IPAddressj+0x36>
      _sock = i;
    54aa:	fc 86       	std	Y+12, r15	; 0x0c
    54ac:	07 c0       	rjmp	.+14     	; 0x54bc <_ZN14EthernetClient7connectE9IPAddressj+0x44>
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
    54ae:	8b 7f       	andi	r24, 0xFB	; 251
    54b0:	88 31       	cpi	r24, 0x18	; 24
    54b2:	d9 f3       	breq	.-10     	; 0x54aa <_ZN14EthernetClient7connectE9IPAddressj+0x32>
    54b4:	f3 94       	inc	r15

int EthernetClient::connect(IPAddress ip, uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    54b6:	f8 e0       	ldi	r31, 0x08	; 8
    54b8:	ff 12       	cpse	r15, r31
    54ba:	ed cf       	rjmp	.-38     	; 0x5496 <_ZN14EthernetClient7connectE9IPAddressj+0x1e>
      _sock = i;
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
    54bc:	8c 85       	ldd	r24, Y+12	; 0x0c
    54be:	88 30       	cpi	r24, 0x08	; 8
    54c0:	f1 f0       	breq	.+60     	; 0x54fe <_ZN14EthernetClient7connectE9IPAddressj+0x86>
    return 0;

  _srcport++;
    54c2:	20 91 6b 01 	lds	r18, 0x016B	; 0x80016b <_ZN14EthernetClient8_srcportE>
    54c6:	30 91 6c 01 	lds	r19, 0x016C	; 0x80016c <_ZN14EthernetClient8_srcportE+0x1>
    54ca:	2f 5f       	subi	r18, 0xFF	; 255
    54cc:	3f 4f       	sbci	r19, 0xFF	; 255
  if (_srcport == 0) _srcport = 1024;
    54ce:	11 f4       	brne	.+4      	; 0x54d4 <_ZN14EthernetClient7connectE9IPAddressj+0x5c>
    54d0:	20 e0       	ldi	r18, 0x00	; 0
    54d2:	34 e0       	ldi	r19, 0x04	; 4
    54d4:	30 93 6c 01 	sts	0x016C, r19	; 0x80016c <_ZN14EthernetClient8_srcportE+0x1>
    54d8:	20 93 6b 01 	sts	0x016B, r18	; 0x80016b <_ZN14EthernetClient8_srcportE>
  socket(_sock, SnMR::TCP, _srcport, 0);
    54dc:	40 91 6b 01 	lds	r20, 0x016B	; 0x80016b <_ZN14EthernetClient8_srcportE>
    54e0:	50 91 6c 01 	lds	r21, 0x016C	; 0x80016c <_ZN14EthernetClient8_srcportE+0x1>
    54e4:	20 e0       	ldi	r18, 0x00	; 0
    54e6:	61 e0       	ldi	r22, 0x01	; 1
    54e8:	57 d2       	rcall	.+1198   	; 0x5998 <_Z6sockethhjh>

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    54ea:	b8 01       	movw	r22, r16
    54ec:	6e 5f       	subi	r22, 0xFE	; 254
    54ee:	7f 4f       	sbci	r23, 0xFF	; 255

  if (!::connect(_sock, rawIPAddress(ip), port)) {
    54f0:	a6 01       	movw	r20, r12
    54f2:	8c 85       	ldd	r24, Y+12	; 0x0c
    54f4:	84 d2       	rcall	.+1288   	; 0x59fe <_Z7connecthPhj>
    54f6:	81 11       	cpse	r24, r1
    54f8:	05 c0       	rjmp	.+10     	; 0x5504 <_ZN14EthernetClient7connectE9IPAddressj+0x8c>
    _sock = MAX_SOCK_NUM;
    54fa:	88 e0       	ldi	r24, 0x08	; 8
    54fc:	8c 87       	std	Y+12, r24	; 0x0c
    return 0;
    54fe:	80 e0       	ldi	r24, 0x00	; 0
    5500:	90 e0       	ldi	r25, 0x00	; 0
  }

  while (status() != SnSR::ESTABLISHED) {
    5502:	0f c0       	rjmp	.+30     	; 0x5522 <_ZN14EthernetClient7connectE9IPAddressj+0xaa>
    5504:	ce 01       	movw	r24, r28
    5506:	4a df       	rcall	.-364    	; 0x539c <_ZN14EthernetClient6statusEv>
    5508:	87 31       	cpi	r24, 0x17	; 23
    550a:	49 f0       	breq	.+18     	; 0x551e <_ZN14EthernetClient7connectE9IPAddressj+0xa6>
    delay(1);
    550c:	61 e0       	ldi	r22, 0x01	; 1
    550e:	70 e0       	ldi	r23, 0x00	; 0
    5510:	80 e0       	ldi	r24, 0x00	; 0
    5512:	90 e0       	ldi	r25, 0x00	; 0
    5514:	0e 94 85 3a 	call	0x750a	; 0x750a <delay>
    if (status() == SnSR::CLOSED) {
    5518:	ce 01       	movw	r24, r28
    551a:	40 df       	rcall	.-384    	; 0x539c <_ZN14EthernetClient6statusEv>
    551c:	ec cf       	rjmp	.-40     	; 0x54f6 <_ZN14EthernetClient7connectE9IPAddressj+0x7e>
      _sock = MAX_SOCK_NUM;
      return 0;
    }
  }

  return 1;
    551e:	81 e0       	ldi	r24, 0x01	; 1
    5520:	90 e0       	ldi	r25, 0x00	; 0
}
    5522:	df 91       	pop	r29
    5524:	cf 91       	pop	r28
    5526:	1f 91       	pop	r17
    5528:	0f 91       	pop	r16
    552a:	ff 90       	pop	r15
    552c:	df 90       	pop	r13
    552e:	cf 90       	pop	r12
    5530:	08 95       	ret

00005532 <_GLOBAL__sub_I__ZN14EthernetClient8_srcportE>:
  return _sock != MAX_SOCK_NUM;
}

bool EthernetClient::operator==(const EthernetClient& rhs) {
  return _sock == rhs._sock && _sock != MAX_SOCK_NUM && rhs._sock != MAX_SOCK_NUM;
}
    5532:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    5534:	00 e0       	ldi	r16, 0x00	; 0
    5536:	20 e0       	ldi	r18, 0x00	; 0
    5538:	40 e0       	ldi	r20, 0x00	; 0
    553a:	60 e0       	ldi	r22, 0x00	; 0
    553c:	8e e4       	ldi	r24, 0x4E	; 78
    553e:	9c e0       	ldi	r25, 0x0C	; 12
    5540:	0e 94 ce 38 	call	0x719c	; 0x719c <_ZN9IPAddressC1Ehhhh>
    5544:	0f 91       	pop	r16
    5546:	08 95       	ret

00005548 <_GLOBAL__sub_I__ZN14EthernetServerC2Ej>:
      n += client.write(buffer, size);
    }
  }
  
  return n;
}
    5548:	0f 93       	push	r16
    554a:	00 e0       	ldi	r16, 0x00	; 0
    554c:	20 e0       	ldi	r18, 0x00	; 0
    554e:	40 e0       	ldi	r20, 0x00	; 0
    5550:	60 e0       	ldi	r22, 0x00	; 0
    5552:	84 e5       	ldi	r24, 0x54	; 84
    5554:	9c e0       	ldi	r25, 0x0C	; 12
    5556:	0e 94 ce 38 	call	0x719c	; 0x719c <_ZN9IPAddressC1Ehhhh>
    555a:	0f 91       	pop	r16
    555c:	08 95       	ret

0000555e <_ZN3UDP14beginMulticastE9IPAddressj>:

class UDP : public Stream {

public:
  virtual uint8_t begin(uint16_t) =0;  // initialize, start listening on specified port. Returns 1 if successful, 0 if there are no sockets available to use
  virtual uint8_t beginMulticast(IPAddress, uint16_t) { return 0; }  // initialize, start listening on specified multicast IP address and port. Returns 1 if successful, 0 on failure
    555e:	80 e0       	ldi	r24, 0x00	; 0
    5560:	08 95       	ret

00005562 <_ZN11EthernetUDP4readEPcj>:
  // Read up to len bytes from the current packet and place them into buffer
  // Returns the number of bytes read, or 0 if none are available
  virtual int read(unsigned char* buffer, size_t len);
  // Read up to len characters from the current packet and place them into buffer
  // Returns the number of characters read, or 0 if none are available
  virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
    5562:	dc 01       	movw	r26, r24
    5564:	ed 91       	ld	r30, X+
    5566:	fc 91       	ld	r31, X
    5568:	04 8c       	ldd	r0, Z+28	; 0x1c
    556a:	f5 8d       	ldd	r31, Z+29	; 0x1d
    556c:	e0 2d       	mov	r30, r0
    556e:	09 94       	ijmp

00005570 <_ZN11EthernetUDP8remoteIPEv>:
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    5570:	22 e7       	ldi	r18, 0x72	; 114
    5572:	3a e0       	ldi	r19, 0x0A	; 10
    5574:	fc 01       	movw	r30, r24
    5576:	31 83       	std	Z+1, r19	; 0x01
    5578:	20 83       	st	Z, r18
    557a:	fb 01       	movw	r30, r22
    557c:	41 89       	ldd	r20, Z+17	; 0x11
    557e:	52 89       	ldd	r21, Z+18	; 0x12
    5580:	63 89       	ldd	r22, Z+19	; 0x13
    5582:	74 89       	ldd	r23, Z+20	; 0x14
    5584:	fc 01       	movw	r30, r24
    5586:	42 83       	std	Z+2, r20	; 0x02
    5588:	53 83       	std	Z+3, r21	; 0x03
    558a:	64 83       	std	Z+4, r22	; 0x04
    558c:	75 83       	std	Z+5, r23	; 0x05
  // Return the next byte from the current packet without moving on to the next byte
  virtual int peek();
  virtual void flush();	// Finish reading the current packet

  // Return the IP address of the host who sent the current incoming packet
  virtual IPAddress remoteIP() { return _remoteIP; };
    558e:	08 95       	ret

00005590 <_ZN11EthernetUDP10remotePortEv>:
  // Return the port of the host who sent the current incoming packet
  virtual uint16_t remotePort() { return _remotePort; };
    5590:	fc 01       	movw	r30, r24
    5592:	85 89       	ldd	r24, Z+21	; 0x15
    5594:	96 89       	ldd	r25, Z+22	; 0x16
    5596:	08 95       	ret

00005598 <_ZN11EthernetUDP9availableEv>:

/* return number of bytes available in the current packet,
   will return zero if parsePacket hasn't been called yet */
int EthernetUDP::available() {
  return _remaining;
}
    5598:	fc 01       	movw	r30, r24
    559a:	81 8d       	ldd	r24, Z+25	; 0x19
    559c:	92 8d       	ldd	r25, Z+26	; 0x1a
    559e:	08 95       	ret

000055a0 <_ZN11EthernetUDP5writeEh>:
{
  return sendUDP(_sock);
}

size_t EthernetUDP::write(uint8_t byte)
{
    55a0:	cf 93       	push	r28
    55a2:	df 93       	push	r29
    55a4:	1f 92       	push	r1
    55a6:	cd b7       	in	r28, 0x3d	; 61
    55a8:	de b7       	in	r29, 0x3e	; 62
    55aa:	69 83       	std	Y+1, r22	; 0x01
  return write(&byte, 1);
    55ac:	dc 01       	movw	r26, r24
    55ae:	ed 91       	ld	r30, X+
    55b0:	fc 91       	ld	r31, X
    55b2:	02 80       	ldd	r0, Z+2	; 0x02
    55b4:	f3 81       	ldd	r31, Z+3	; 0x03
    55b6:	e0 2d       	mov	r30, r0
    55b8:	41 e0       	ldi	r20, 0x01	; 1
    55ba:	50 e0       	ldi	r21, 0x00	; 0
    55bc:	be 01       	movw	r22, r28
    55be:	6f 5f       	subi	r22, 0xFF	; 255
    55c0:	7f 4f       	sbci	r23, 0xFF	; 255
    55c2:	09 95       	icall
}
    55c4:	0f 90       	pop	r0
    55c6:	df 91       	pop	r29
    55c8:	cf 91       	pop	r28
    55ca:	08 95       	ret

000055cc <_ZN11EthernetUDP5flushEv>:
  ::peek(_sock, &b);
  return b;
}

void EthernetUDP::flush()
{
    55cc:	cf 93       	push	r28
    55ce:	df 93       	push	r29
    55d0:	ec 01       	movw	r28, r24
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5500 always behaves :)

  while (_remaining)
    55d2:	89 8d       	ldd	r24, Y+25	; 0x19
    55d4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    55d6:	89 2b       	or	r24, r25
    55d8:	41 f0       	breq	.+16     	; 0x55ea <_ZN11EthernetUDP5flushEv+0x1e>
  {
    read();
    55da:	e8 81       	ld	r30, Y
    55dc:	f9 81       	ldd	r31, Y+1	; 0x01
    55de:	02 84       	ldd	r0, Z+10	; 0x0a
    55e0:	f3 85       	ldd	r31, Z+11	; 0x0b
    55e2:	e0 2d       	mov	r30, r0
    55e4:	ce 01       	movw	r24, r28
    55e6:	09 95       	icall
{
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5500 always behaves :)

  while (_remaining)
    55e8:	f4 cf       	rjmp	.-24     	; 0x55d2 <_ZN11EthernetUDP5flushEv+0x6>
  {
    read();
  }
}
    55ea:	df 91       	pop	r29
    55ec:	cf 91       	pop	r28
    55ee:	08 95       	ret

000055f0 <_ZN11EthernetUDP4stopEv>:
  return _remaining;
}

/* Release any resources being used by this EthernetUDP instance */
void EthernetUDP::stop()
{
    55f0:	cf 93       	push	r28
    55f2:	df 93       	push	r29
    55f4:	ec 01       	movw	r28, r24
  if (_sock == MAX_SOCK_NUM)
    55f6:	8c 85       	ldd	r24, Y+12	; 0x0c
    55f8:	88 30       	cpi	r24, 0x08	; 8
    55fa:	59 f0       	breq	.+22     	; 0x5612 <_ZN11EthernetUDP4stopEv+0x22>
    return;

  close(_sock);
    55fc:	c2 d1       	rcall	.+900    	; 0x5982 <_Z5closeh>

  EthernetClass::_server_port[_sock] = 0;
    55fe:	ec 85       	ldd	r30, Y+12	; 0x0c
    5600:	f0 e0       	ldi	r31, 0x00	; 0
    5602:	ee 0f       	add	r30, r30
    5604:	ff 1f       	adc	r31, r31
    5606:	e8 5c       	subi	r30, 0xC8	; 200
    5608:	f3 4f       	sbci	r31, 0xF3	; 243
    560a:	11 82       	std	Z+1, r1	; 0x01
    560c:	10 82       	st	Z, r1
  _sock = MAX_SOCK_NUM;
    560e:	88 e0       	ldi	r24, 0x08	; 8
    5610:	8c 87       	std	Y+12, r24	; 0x0c
}
    5612:	df 91       	pop	r29
    5614:	cf 91       	pop	r28
    5616:	08 95       	ret

00005618 <_ZN11EthernetUDP11beginPacketE9IPAddressj>:
  }
}

int EthernetUDP::beginPacket(IPAddress ip, uint16_t port)
{
  _offset = 0;
    5618:	fc 01       	movw	r30, r24
    561a:	10 8e       	std	Z+24, r1	; 0x18
    561c:	17 8a       	std	Z+23, r1	; 0x17

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    561e:	6e 5f       	subi	r22, 0xFE	; 254
    5620:	7f 4f       	sbci	r23, 0xFF	; 255
  return startUDP(_sock, rawIPAddress(ip), port);
    5622:	84 85       	ldd	r24, Z+12	; 0x0c
    5624:	e6 c2       	rjmp	.+1484   	; 0x5bf2 <_Z8startUDPhPhj>

00005626 <_ZN11EthernetUDP9endPacketEv>:
}

int EthernetUDP::endPacket()
{
  return sendUDP(_sock);
    5626:	fc 01       	movw	r30, r24
    5628:	84 85       	ldd	r24, Z+12	; 0x0c
    562a:	06 c3       	rjmp	.+1548   	; 0x5c38 <_Z7sendUDPh>

0000562c <_ZN11EthernetUDP5writeEPKhj>:
{
  return write(&byte, 1);
}

size_t EthernetUDP::write(const uint8_t *buffer, size_t size)
{
    562c:	cf 93       	push	r28
    562e:	df 93       	push	r29
    5630:	ec 01       	movw	r28, r24
    5632:	9a 01       	movw	r18, r20
  uint16_t bytes_written = bufferData(_sock, _offset, buffer, size);
    5634:	8f 89       	ldd	r24, Y+23	; 0x17
    5636:	98 8d       	ldd	r25, Y+24	; 0x18
    5638:	ab 01       	movw	r20, r22
    563a:	bc 01       	movw	r22, r24
    563c:	8c 85       	ldd	r24, Y+12	; 0x0c
    563e:	ae d2       	rcall	.+1372   	; 0x5b9c <_Z10bufferDatahjPKhj>
  _offset += bytes_written;
    5640:	2f 89       	ldd	r18, Y+23	; 0x17
    5642:	38 8d       	ldd	r19, Y+24	; 0x18
    5644:	28 0f       	add	r18, r24
    5646:	39 1f       	adc	r19, r25
    5648:	38 8f       	std	Y+24, r19	; 0x18
    564a:	2f 8b       	std	Y+23, r18	; 0x17
  return bytes_written;
}
    564c:	df 91       	pop	r29
    564e:	cf 91       	pop	r28
    5650:	08 95       	ret

00005652 <_ZN11EthernetUDP4readEv>:
  // There aren't any packets available
  return 0;
}

int EthernetUDP::read()
{
    5652:	0f 93       	push	r16
    5654:	1f 93       	push	r17
    5656:	cf 93       	push	r28
    5658:	df 93       	push	r29
    565a:	1f 92       	push	r1
    565c:	cd b7       	in	r28, 0x3d	; 61
    565e:	de b7       	in	r29, 0x3e	; 62
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
    5660:	fc 01       	movw	r30, r24
    5662:	21 8d       	ldd	r18, Z+25	; 0x19
    5664:	32 8d       	ldd	r19, Z+26	; 0x1a
    5666:	23 2b       	or	r18, r19
    5668:	59 f0       	breq	.+22     	; 0x5680 <_ZN11EthernetUDP4readEv+0x2e>
    566a:	8c 01       	movw	r16, r24
    566c:	41 e0       	ldi	r20, 0x01	; 1
    566e:	50 e0       	ldi	r21, 0x00	; 0
    5670:	be 01       	movw	r22, r28
    5672:	6f 5f       	subi	r22, 0xFF	; 255
    5674:	7f 4f       	sbci	r23, 0xFF	; 255
    5676:	84 85       	ldd	r24, Z+12	; 0x0c
    5678:	42 d2       	rcall	.+1156   	; 0x5afe <_Z4recvhPhi>
    567a:	18 16       	cp	r1, r24
    567c:	19 06       	cpc	r1, r25
    567e:	1c f0       	brlt	.+6      	; 0x5686 <_ZN11EthernetUDP4readEv+0x34>
    _remaining--;
    return byte;
  }

  // If we get here, there's no data available
  return -1;
    5680:	8f ef       	ldi	r24, 0xFF	; 255
    5682:	9f ef       	ldi	r25, 0xFF	; 255
    5684:	08 c0       	rjmp	.+16     	; 0x5696 <_ZN11EthernetUDP4readEv+0x44>
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
  {
    // We read things without any problems
    _remaining--;
    5686:	f8 01       	movw	r30, r16
    5688:	81 8d       	ldd	r24, Z+25	; 0x19
    568a:	92 8d       	ldd	r25, Z+26	; 0x1a
    568c:	01 97       	sbiw	r24, 0x01	; 1
    568e:	92 8f       	std	Z+26, r25	; 0x1a
    5690:	81 8f       	std	Z+25, r24	; 0x19
    return byte;
    5692:	89 81       	ldd	r24, Y+1	; 0x01
    5694:	90 e0       	ldi	r25, 0x00	; 0
  }

  // If we get here, there's no data available
  return -1;
}
    5696:	0f 90       	pop	r0
    5698:	df 91       	pop	r29
    569a:	cf 91       	pop	r28
    569c:	1f 91       	pop	r17
    569e:	0f 91       	pop	r16
    56a0:	08 95       	ret

000056a2 <_ZN11EthernetUDP4readEPhj>:

int EthernetUDP::read(unsigned char* buffer, size_t len)
{
    56a2:	cf 93       	push	r28
    56a4:	df 93       	push	r29

  if (_remaining > 0)
    56a6:	fc 01       	movw	r30, r24
    56a8:	21 8d       	ldd	r18, Z+25	; 0x19
    56aa:	32 8d       	ldd	r19, Z+26	; 0x1a
    56ac:	21 15       	cp	r18, r1
    56ae:	31 05       	cpc	r19, r1
    56b0:	19 f4       	brne	.+6      	; 0x56b8 <_ZN11EthernetUDP4readEPhj+0x16>
    }

  }

  // If we get here, there's no data available or recv failed
  return -1;
    56b2:	8f ef       	ldi	r24, 0xFF	; 255
    56b4:	9f ef       	ldi	r25, 0xFF	; 255
    56b6:	10 c0       	rjmp	.+32     	; 0x56d8 <_ZN11EthernetUDP4readEPhj+0x36>
    56b8:	ec 01       	movw	r28, r24
  if (_remaining > 0)
  {

    int got;

    if (_remaining <= len)
    56ba:	42 17       	cp	r20, r18
    56bc:	53 07       	cpc	r21, r19
    56be:	08 f0       	brcs	.+2      	; 0x56c2 <_ZN11EthernetUDP4readEPhj+0x20>
    {
      // data should fit in the buffer
      got = recv(_sock, buffer, _remaining);
    56c0:	a9 01       	movw	r20, r18
    }
    else
    {
      // too much data for the buffer, 
      // grab as much as will fit
      got = recv(_sock, buffer, len);
    56c2:	8c 85       	ldd	r24, Y+12	; 0x0c
    56c4:	1c d2       	rcall	.+1080   	; 0x5afe <_Z4recvhPhi>
    }

    if (got > 0)
    56c6:	18 16       	cp	r1, r24
    56c8:	19 06       	cpc	r1, r25
    56ca:	9c f7       	brge	.-26     	; 0x56b2 <_ZN11EthernetUDP4readEPhj+0x10>
    {
      _remaining -= got;
    56cc:	29 8d       	ldd	r18, Y+25	; 0x19
    56ce:	3a 8d       	ldd	r19, Y+26	; 0x1a
    56d0:	28 1b       	sub	r18, r24
    56d2:	39 0b       	sbc	r19, r25
    56d4:	3a 8f       	std	Y+26, r19	; 0x1a
    56d6:	29 8f       	std	Y+25, r18	; 0x19
  }

  // If we get here, there's no data available or recv failed
  return -1;

}
    56d8:	df 91       	pop	r29
    56da:	cf 91       	pop	r28
    56dc:	08 95       	ret

000056de <_ZN11EthernetUDP4peekEv>:

int EthernetUDP::peek()
{
    56de:	cf 93       	push	r28
    56e0:	df 93       	push	r29
    56e2:	1f 92       	push	r1
    56e4:	cd b7       	in	r28, 0x3d	; 61
    56e6:	de b7       	in	r29, 0x3e	; 62
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
    56e8:	fc 01       	movw	r30, r24
    56ea:	21 8d       	ldd	r18, Z+25	; 0x19
    56ec:	32 8d       	ldd	r19, Z+26	; 0x1a
    56ee:	23 2b       	or	r18, r19
    56f0:	41 f0       	breq	.+16     	; 0x5702 <_ZN11EthernetUDP4peekEv+0x24>
    return -1;
  ::peek(_sock, &b);
    56f2:	be 01       	movw	r22, r28
    56f4:	6f 5f       	subi	r22, 0xFF	; 255
    56f6:	7f 4f       	sbci	r23, 0xFF	; 255
    56f8:	84 85       	ldd	r24, Z+12	; 0x0c
    56fa:	42 d2       	rcall	.+1156   	; 0x5b80 <_Z4peekhPh>
  return b;
    56fc:	89 81       	ldd	r24, Y+1	; 0x01
    56fe:	90 e0       	ldi	r25, 0x00	; 0
    5700:	02 c0       	rjmp	.+4      	; 0x5706 <_ZN11EthernetUDP4peekEv+0x28>
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
    return -1;
    5702:	8f ef       	ldi	r24, 0xFF	; 255
    5704:	9f ef       	ldi	r25, 0xFF	; 255
  ::peek(_sock, &b);
  return b;
}
    5706:	0f 90       	pop	r0
    5708:	df 91       	pop	r29
    570a:	cf 91       	pop	r28
    570c:	08 95       	ret

0000570e <_ZN11EthernetUDP5beginEj>:

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
    570e:	ef 92       	push	r14
    5710:	ff 92       	push	r15
    5712:	1f 93       	push	r17
    5714:	cf 93       	push	r28
    5716:	df 93       	push	r29
  if (_sock != MAX_SOCK_NUM)
    5718:	fc 01       	movw	r30, r24
    571a:	24 85       	ldd	r18, Z+12	; 0x0c
    571c:	28 30       	cpi	r18, 0x08	; 8
    571e:	11 f0       	breq	.+4      	; 0x5724 <_ZN11EthernetUDP5beginEj+0x16>
    return 0;
    5720:	80 e0       	ldi	r24, 0x00	; 0
    5722:	20 c0       	rjmp	.+64     	; 0x5764 <_ZN11EthernetUDP5beginEj+0x56>
    5724:	7b 01       	movw	r14, r22
    5726:	ec 01       	movw	r28, r24
    5728:	10 e0       	ldi	r17, 0x00	; 0
    572a:	61 2f       	mov	r22, r17
    572c:	62 95       	swap	r22
    572e:	66 0f       	add	r22, r22
    5730:	60 7e       	andi	r22, 0xE0	; 224
    5732:	68 5f       	subi	r22, 0xF8	; 248
    5734:	83 e0       	ldi	r24, 0x03	; 3
    5736:	90 e0       	ldi	r25, 0x00	; 0
    5738:	1b d3       	rcall	.+1590   	; 0x5d70 <_ZN10W5500Class4readEjh>

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
    573a:	81 11       	cpse	r24, r1
    573c:	02 c0       	rjmp	.+4      	; 0x5742 <_ZN11EthernetUDP5beginEj+0x34>
      _sock = i;
    573e:	1c 87       	std	Y+12, r17	; 0x0c
    5740:	05 c0       	rjmp	.+10     	; 0x574c <_ZN11EthernetUDP5beginEj+0x3e>
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
    5742:	88 31       	cpi	r24, 0x18	; 24
    5744:	e1 f3       	breq	.-8      	; 0x573e <_ZN11EthernetUDP5beginEj+0x30>
    5746:	1f 5f       	subi	r17, 0xFF	; 255
/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    5748:	18 30       	cpi	r17, 0x08	; 8
    574a:	79 f7       	brne	.-34     	; 0x572a <_ZN11EthernetUDP5beginEj+0x1c>
      _sock = i;
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
    574c:	8c 85       	ldd	r24, Y+12	; 0x0c
    574e:	88 30       	cpi	r24, 0x08	; 8
    5750:	39 f3       	breq	.-50     	; 0x5720 <_ZN11EthernetUDP5beginEj+0x12>
    return 0;

  _port = port;
    5752:	fe 86       	std	Y+14, r15	; 0x0e
    5754:	ed 86       	std	Y+13, r14	; 0x0d
  _remaining = 0;
    5756:	1a 8e       	std	Y+26, r1	; 0x1a
    5758:	19 8e       	std	Y+25, r1	; 0x19
  socket(_sock, SnMR::UDP, _port, 0);
    575a:	20 e0       	ldi	r18, 0x00	; 0
    575c:	a7 01       	movw	r20, r14
    575e:	62 e0       	ldi	r22, 0x02	; 2
    5760:	1b d1       	rcall	.+566    	; 0x5998 <_Z6sockethhjh>

  return 1;
    5762:	81 e0       	ldi	r24, 0x01	; 1
}
    5764:	df 91       	pop	r29
    5766:	cf 91       	pop	r28
    5768:	1f 91       	pop	r17
    576a:	ff 90       	pop	r15
    576c:	ef 90       	pop	r14
    576e:	08 95       	ret

00005770 <_ZN11EthernetUDP11parsePacketEv>:
  _offset += bytes_written;
  return bytes_written;
}

int EthernetUDP::parsePacket()
{
    5770:	0f 93       	push	r16
    5772:	1f 93       	push	r17
    5774:	cf 93       	push	r28
    5776:	df 93       	push	r29
    5778:	cd b7       	in	r28, 0x3d	; 61
    577a:	de b7       	in	r29, 0x3e	; 62
    577c:	28 97       	sbiw	r28, 0x08	; 8
    577e:	0f b6       	in	r0, 0x3f	; 63
    5780:	f8 94       	cli
    5782:	de bf       	out	0x3e, r29	; 62
    5784:	0f be       	out	0x3f, r0	; 63
    5786:	cd bf       	out	0x3d, r28	; 61
    5788:	8c 01       	movw	r16, r24
  // discard any remaining bytes in the last packet
  flush();
    578a:	dc 01       	movw	r26, r24
    578c:	ed 91       	ld	r30, X+
    578e:	fc 91       	ld	r31, X
    5790:	06 80       	ldd	r0, Z+6	; 0x06
    5792:	f7 81       	ldd	r31, Z+7	; 0x07
    5794:	e0 2d       	mov	r30, r0
    5796:	09 95       	icall

  if (w5500.getRXReceivedSize(_sock) > 0)
    5798:	f8 01       	movw	r30, r16
    579a:	64 85       	ldd	r22, Z+12	; 0x0c
    579c:	85 e6       	ldi	r24, 0x65	; 101
    579e:	9c e0       	ldi	r25, 0x0C	; 12
    57a0:	77 d3       	rcall	.+1774   	; 0x5e90 <_ZN10W5500Class17getRXReceivedSizeEh>
    57a2:	89 2b       	or	r24, r25
    57a4:	39 f1       	breq	.+78     	; 0x57f4 <_ZN11EthernetUDP11parsePacketEv+0x84>
  {
    //HACK - hand-parse the UDP packet using TCP recv method
    uint8_t tmpBuf[8];
    int ret =0; 
    //read 8 header bytes and get IP and port from it
    ret = recv(_sock,tmpBuf,8);
    57a6:	48 e0       	ldi	r20, 0x08	; 8
    57a8:	50 e0       	ldi	r21, 0x00	; 0
    57aa:	be 01       	movw	r22, r28
    57ac:	6f 5f       	subi	r22, 0xFF	; 255
    57ae:	7f 4f       	sbci	r23, 0xFF	; 255
    57b0:	d8 01       	movw	r26, r16
    57b2:	1c 96       	adiw	r26, 0x0c	; 12
    57b4:	8c 91       	ld	r24, X
    57b6:	a3 d1       	rcall	.+838    	; 0x5afe <_Z4recvhPhi>
    if (ret > 0)
    57b8:	18 16       	cp	r1, r24
    57ba:	19 06       	cpc	r1, r25
    57bc:	ec f4       	brge	.+58     	; 0x57f8 <_ZN11EthernetUDP11parsePacketEv+0x88>
    {
      _remoteIP = tmpBuf;
    57be:	be 01       	movw	r22, r28
    57c0:	6f 5f       	subi	r22, 0xFF	; 255
    57c2:	7f 4f       	sbci	r23, 0xFF	; 255
    57c4:	c8 01       	movw	r24, r16
    57c6:	0f 96       	adiw	r24, 0x0f	; 15
    57c8:	0e 94 da 38 	call	0x71b4	; 0x71b4 <_ZN9IPAddressaSEPKh>
      _remotePort = tmpBuf[4];
      _remotePort = (_remotePort << 8) + tmpBuf[5];
    57cc:	8d 81       	ldd	r24, Y+5	; 0x05
    57ce:	90 e0       	ldi	r25, 0x00	; 0
    57d0:	98 2f       	mov	r25, r24
    57d2:	88 27       	eor	r24, r24
    57d4:	2e 81       	ldd	r18, Y+6	; 0x06
    57d6:	82 0f       	add	r24, r18
    57d8:	91 1d       	adc	r25, r1
    57da:	f8 01       	movw	r30, r16
    57dc:	96 8b       	std	Z+22, r25	; 0x16
    57de:	85 8b       	std	Z+21, r24	; 0x15
      _remaining = tmpBuf[6];
      _remaining = (_remaining << 8) + tmpBuf[7];
    57e0:	8f 81       	ldd	r24, Y+7	; 0x07
    57e2:	90 e0       	ldi	r25, 0x00	; 0
    57e4:	98 2f       	mov	r25, r24
    57e6:	88 27       	eor	r24, r24
    57e8:	28 85       	ldd	r18, Y+8	; 0x08
    57ea:	82 0f       	add	r24, r18
    57ec:	91 1d       	adc	r25, r1
    57ee:	92 8f       	std	Z+26, r25	; 0x1a
    57f0:	81 8f       	std	Z+25, r24	; 0x19
    57f2:	02 c0       	rjmp	.+4      	; 0x57f8 <_ZN11EthernetUDP11parsePacketEv+0x88>
      ret = _remaining;
    }
    return ret;
  }
  // There aren't any packets available
  return 0;
    57f4:	80 e0       	ldi	r24, 0x00	; 0
    57f6:	90 e0       	ldi	r25, 0x00	; 0
}
    57f8:	28 96       	adiw	r28, 0x08	; 8
    57fa:	0f b6       	in	r0, 0x3f	; 63
    57fc:	f8 94       	cli
    57fe:	de bf       	out	0x3e, r29	; 62
    5800:	0f be       	out	0x3f, r0	; 63
    5802:	cd bf       	out	0x3d, r28	; 61
    5804:	df 91       	pop	r29
    5806:	cf 91       	pop	r28
    5808:	1f 91       	pop	r17
    580a:	0f 91       	pop	r16
    580c:	08 95       	ret

0000580e <_ZN11EthernetUDPC1Ev>:
#include "Ethernet2.h"
#include "Udp.h"
#include "Dns.h"

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}
    580e:	fc 01       	movw	r30, r24
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    5810:	13 82       	std	Z+3, r1	; 0x03
    5812:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    5814:	88 ee       	ldi	r24, 0xE8	; 232
    5816:	93 e0       	ldi	r25, 0x03	; 3
    5818:	a0 e0       	ldi	r26, 0x00	; 0
    581a:	b0 e0       	ldi	r27, 0x00	; 0
    581c:	84 83       	std	Z+4, r24	; 0x04
    581e:	95 83       	std	Z+5, r25	; 0x05
    5820:	a6 83       	std	Z+6, r26	; 0x06
    5822:	b7 83       	std	Z+7, r27	; 0x07
    5824:	80 e1       	ldi	r24, 0x10	; 16
    5826:	9a e0       	ldi	r25, 0x0A	; 10
    5828:	91 83       	std	Z+1, r25	; 0x01
    582a:	80 83       	st	Z, r24
    582c:	88 e0       	ldi	r24, 0x08	; 8
    582e:	84 87       	std	Z+12, r24	; 0x0c
    5830:	cf 01       	movw	r24, r30
    5832:	0f 96       	adiw	r24, 0x0f	; 15
    5834:	0c 94 c4 38 	jmp	0x7188	; 0x7188 <_ZN9IPAddressC1Ev>

00005838 <_ZN11EthernetUDP11beginPacketEPKcj>:
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

int EthernetUDP::beginPacket(const char *host, uint16_t port)
{
    5838:	cf 92       	push	r12
    583a:	df 92       	push	r13
    583c:	ef 92       	push	r14
    583e:	ff 92       	push	r15
    5840:	0f 93       	push	r16
    5842:	1f 93       	push	r17
    5844:	cf 93       	push	r28
    5846:	df 93       	push	r29
    5848:	cd b7       	in	r28, 0x3d	; 61
    584a:	de b7       	in	r29, 0x3e	; 62
    584c:	af 97       	sbiw	r28, 0x2f	; 47
    584e:	0f b6       	in	r0, 0x3f	; 63
    5850:	f8 94       	cli
    5852:	de bf       	out	0x3e, r29	; 62
    5854:	0f be       	out	0x3f, r0	; 63
    5856:	cd bf       	out	0x3d, r28	; 61
    5858:	8c 01       	movw	r16, r24
    585a:	6b 01       	movw	r12, r22
    585c:	7a 01       	movw	r14, r20
#ifndef DNSClient_h
#define DNSClient_h

#include <EthernetUdp2.h>

class DNSClient
    585e:	ce 01       	movw	r24, r28
    5860:	01 96       	adiw	r24, 0x01	; 1
    5862:	0e 94 c4 38 	call	0x7188	; 0x7188 <_ZN9IPAddressC1Ev>
    5866:	ce 01       	movw	r24, r28
    5868:	09 96       	adiw	r24, 0x09	; 9
    586a:	d1 df       	rcall	.-94     	; 0x580e <_ZN11EthernetUDPC1Ev>
  // Look up the host first
  int ret = 0;
  DNSClient dns;
  IPAddress remote_addr;
    586c:	ce 01       	movw	r24, r28
    586e:	8a 96       	adiw	r24, 0x2a	; 42
    5870:	0e 94 c4 38 	call	0x7188	; 0x7188 <_ZN9IPAddressC1Ev>

  dns.begin(Ethernet.dnsServerIP());
    5874:	6b e2       	ldi	r22, 0x2B	; 43
    5876:	7c e0       	ldi	r23, 0x0C	; 12
    5878:	ce 01       	movw	r24, r28
    587a:	84 96       	adiw	r24, 0x24	; 36
    587c:	63 dc       	rcall	.-1850   	; 0x5144 <_ZN13EthernetClass11dnsServerIPEv>
    587e:	be 01       	movw	r22, r28
    5880:	6c 5d       	subi	r22, 0xDC	; 220
    5882:	7f 4f       	sbci	r23, 0xFF	; 255
    5884:	ce 01       	movw	r24, r28
    5886:	01 96       	adiw	r24, 0x01	; 1
    5888:	28 d9       	rcall	.-3504   	; 0x4ada <_ZN9DNSClient5beginERK9IPAddress>
  ret = dns.getHostByName(host, remote_addr);
    588a:	ae 01       	movw	r20, r28
    588c:	46 5d       	subi	r20, 0xD6	; 214
    588e:	5f 4f       	sbci	r21, 0xFF	; 255
    5890:	b6 01       	movw	r22, r12
    5892:	ce 01       	movw	r24, r28
    5894:	01 96       	adiw	r24, 0x01	; 1
    5896:	7b db       	rcall	.-2314   	; 0x4f8e <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>
  if (ret == 1) {
    5898:	81 30       	cpi	r24, 0x01	; 1
    589a:	91 05       	cpc	r25, r1
    589c:	c1 f4       	brne	.+48     	; 0x58ce <_ZN11EthernetUDP11beginPacketEPKcj+0x96>
    return beginPacket(remote_addr, port);
    589e:	d8 01       	movw	r26, r16
    58a0:	ed 91       	ld	r30, X+
    58a2:	fc 91       	ld	r31, X
    58a4:	04 88       	ldd	r0, Z+20	; 0x14
    58a6:	f5 89       	ldd	r31, Z+21	; 0x15
    58a8:	e0 2d       	mov	r30, r0
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    58aa:	82 e7       	ldi	r24, 0x72	; 114
    58ac:	9a e0       	ldi	r25, 0x0A	; 10
    58ae:	9d a3       	std	Y+37, r25	; 0x25
    58b0:	8c a3       	std	Y+36, r24	; 0x24
    58b2:	8c a5       	ldd	r24, Y+44	; 0x2c
    58b4:	9d a5       	ldd	r25, Y+45	; 0x2d
    58b6:	ae a5       	ldd	r26, Y+46	; 0x2e
    58b8:	bf a5       	ldd	r27, Y+47	; 0x2f
    58ba:	8e a3       	std	Y+38, r24	; 0x26
    58bc:	9f a3       	std	Y+39, r25	; 0x27
    58be:	a8 a7       	std	Y+40, r26	; 0x28
    58c0:	b9 a7       	std	Y+41, r27	; 0x29
    58c2:	a7 01       	movw	r20, r14
    58c4:	be 01       	movw	r22, r28
    58c6:	6c 5d       	subi	r22, 0xDC	; 220
    58c8:	7f 4f       	sbci	r23, 0xFF	; 255
    58ca:	c8 01       	movw	r24, r16
    58cc:	09 95       	icall
  } else {
    return ret;
  }
}
    58ce:	af 96       	adiw	r28, 0x2f	; 47
    58d0:	0f b6       	in	r0, 0x3f	; 63
    58d2:	f8 94       	cli
    58d4:	de bf       	out	0x3e, r29	; 62
    58d6:	0f be       	out	0x3f, r0	; 63
    58d8:	cd bf       	out	0x3d, r28	; 61
    58da:	df 91       	pop	r29
    58dc:	cf 91       	pop	r28
    58de:	1f 91       	pop	r17
    58e0:	0f 91       	pop	r16
    58e2:	ff 90       	pop	r15
    58e4:	ef 90       	pop	r14
    58e6:	df 90       	pop	r13
    58e8:	cf 90       	pop	r12
    58ea:	08 95       	ret

000058ec <_GLOBAL__sub_I__ZN11EthernetUDPC2Ev>:

  while (_remaining)
  {
    read();
  }
}
    58ec:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    58ee:	00 e0       	ldi	r16, 0x00	; 0
    58f0:	20 e0       	ldi	r18, 0x00	; 0
    58f2:	40 e0       	ldi	r20, 0x00	; 0
    58f4:	60 e0       	ldi	r22, 0x00	; 0
    58f6:	8a e5       	ldi	r24, 0x5A	; 90
    58f8:	9c e0       	ldi	r25, 0x0C	; 12
    58fa:	0e 94 ce 38 	call	0x719c	; 0x719c <_ZN9IPAddressC1Ehhhh>
    58fe:	0f 91       	pop	r16
    5900:	08 95       	ret

00005902 <_ZN10W5500Class11writeSnDIPREhPh>:
    }
  }

  w5500.writeSnIR(s, SnIR::SEND_OK);
  return ret;
}
    5902:	ab 01       	movw	r20, r22
    5904:	82 95       	swap	r24
    5906:	88 0f       	add	r24, r24
    5908:	80 7e       	andi	r24, 0xE0	; 224
    590a:	6c e0       	ldi	r22, 0x0C	; 12
    590c:	68 0f       	add	r22, r24
    590e:	24 e0       	ldi	r18, 0x04	; 4
    5910:	30 e0       	ldi	r19, 0x00	; 0
    5912:	8c e0       	ldi	r24, 0x0C	; 12
    5914:	90 e0       	ldi	r25, 0x00	; 0
    5916:	00 c2       	rjmp	.+1024   	; 0x5d18 <_ZN10W5500Class5writeEjhPKhj>

00005918 <_ZN10W5500Class6readSnEhj>:
    5918:	9b 01       	movw	r18, r22
    591a:	82 95       	swap	r24
    591c:	88 0f       	add	r24, r24
    591e:	80 7e       	andi	r24, 0xE0	; 224
    5920:	68 e0       	ldi	r22, 0x08	; 8
    5922:	68 0f       	add	r22, r24
    5924:	c9 01       	movw	r24, r18
    5926:	24 c2       	rjmp	.+1096   	; 0x5d70 <_ZN10W5500Class4readEjh>

00005928 <_ZN10W5500Class8readSnIREh>:
    5928:	62 e0       	ldi	r22, 0x02	; 2
    592a:	70 e0       	ldi	r23, 0x00	; 0
    592c:	f5 cf       	rjmp	.-22     	; 0x5918 <_ZN10W5500Class6readSnEhj>

0000592e <_ZN10W5500Class7writeSnEhjh>:
    592e:	9b 01       	movw	r18, r22
    5930:	82 95       	swap	r24
    5932:	88 0f       	add	r24, r24
    5934:	80 7e       	andi	r24, 0xE0	; 224
    5936:	6c e0       	ldi	r22, 0x0C	; 12
    5938:	68 0f       	add	r22, r24
    593a:	c9 01       	movw	r24, r18
    593c:	cf c1       	rjmp	.+926    	; 0x5cdc <_ZN10W5500Class5writeEjhh>

0000593e <_ZN10W5500Class11writeSnPORTEhj>:
    593e:	cf 93       	push	r28
    5940:	df 93       	push	r29
    5942:	c8 2f       	mov	r28, r24
    5944:	d6 2f       	mov	r29, r22
    5946:	47 2f       	mov	r20, r23
    5948:	64 e0       	ldi	r22, 0x04	; 4
    594a:	70 e0       	ldi	r23, 0x00	; 0
    594c:	f0 df       	rcall	.-32     	; 0x592e <_ZN10W5500Class7writeSnEhjh>
    594e:	4d 2f       	mov	r20, r29
    5950:	65 e0       	ldi	r22, 0x05	; 5
    5952:	70 e0       	ldi	r23, 0x00	; 0
    5954:	8c 2f       	mov	r24, r28
    5956:	df 91       	pop	r29
    5958:	cf 91       	pop	r28
    595a:	e9 cf       	rjmp	.-46     	; 0x592e <_ZN10W5500Class7writeSnEhjh>

0000595c <_ZN10W5500Class9writeSnIREhh>:
    595c:	46 2f       	mov	r20, r22
    595e:	62 e0       	ldi	r22, 0x02	; 2
    5960:	70 e0       	ldi	r23, 0x00	; 0
    5962:	e5 cf       	rjmp	.-54     	; 0x592e <_ZN10W5500Class7writeSnEhjh>

00005964 <_ZN10W5500Class12writeSnDPORTEhj>:
    5964:	cf 93       	push	r28
    5966:	df 93       	push	r29
    5968:	c8 2f       	mov	r28, r24
    596a:	d6 2f       	mov	r29, r22
    596c:	47 2f       	mov	r20, r23
    596e:	60 e1       	ldi	r22, 0x10	; 16
    5970:	70 e0       	ldi	r23, 0x00	; 0
    5972:	dd df       	rcall	.-70     	; 0x592e <_ZN10W5500Class7writeSnEhjh>
    5974:	4d 2f       	mov	r20, r29
    5976:	61 e1       	ldi	r22, 0x11	; 17
    5978:	70 e0       	ldi	r23, 0x00	; 0
    597a:	8c 2f       	mov	r24, r28
    597c:	df 91       	pop	r29
    597e:	cf 91       	pop	r28
    5980:	d6 cf       	rjmp	.-84     	; 0x592e <_ZN10W5500Class7writeSnEhjh>

00005982 <_Z5closeh>:
    5982:	cf 93       	push	r28
    5984:	c8 2f       	mov	r28, r24
    5986:	40 e1       	ldi	r20, 0x10	; 16
    5988:	68 2f       	mov	r22, r24
    598a:	85 e6       	ldi	r24, 0x65	; 101
    598c:	9c e0       	ldi	r25, 0x0C	; 12
    598e:	70 d3       	rcall	.+1760   	; 0x6070 <_ZN10W5500Class9execCmdSnEh7SockCMD>
    5990:	6f ef       	ldi	r22, 0xFF	; 255
    5992:	8c 2f       	mov	r24, r28
    5994:	cf 91       	pop	r28
    5996:	e2 cf       	rjmp	.-60     	; 0x595c <_ZN10W5500Class9writeSnIREhh>

00005998 <_Z6sockethhjh>:
    5998:	ff 92       	push	r15
    599a:	0f 93       	push	r16
    599c:	1f 93       	push	r17
    599e:	cf 93       	push	r28
    59a0:	df 93       	push	r29
    59a2:	9f ef       	ldi	r25, 0xFF	; 255
    59a4:	96 0f       	add	r25, r22
    59a6:	95 30       	cpi	r25, 0x05	; 5
    59a8:	18 f5       	brcc	.+70     	; 0x59f0 <_Z6sockethhjh+0x58>
    59aa:	d2 2f       	mov	r29, r18
    59ac:	8a 01       	movw	r16, r20
    59ae:	f6 2e       	mov	r15, r22
    59b0:	c8 2f       	mov	r28, r24
    59b2:	e7 df       	rcall	.-50     	; 0x5982 <_Z5closeh>
    59b4:	4f 2d       	mov	r20, r15
    59b6:	4d 2b       	or	r20, r29
    59b8:	60 e0       	ldi	r22, 0x00	; 0
    59ba:	70 e0       	ldi	r23, 0x00	; 0
    59bc:	8c 2f       	mov	r24, r28
    59be:	b7 df       	rcall	.-146    	; 0x592e <_ZN10W5500Class7writeSnEhjh>
    59c0:	01 15       	cp	r16, r1
    59c2:	11 05       	cpc	r17, r1
    59c4:	11 f0       	breq	.+4      	; 0x59ca <_Z6sockethhjh+0x32>
    59c6:	b8 01       	movw	r22, r16
    59c8:	0a c0       	rjmp	.+20     	; 0x59de <_Z6sockethhjh+0x46>
    59ca:	60 91 60 0c 	lds	r22, 0x0C60	; 0x800c60 <_ZL10local_port>
    59ce:	70 91 61 0c 	lds	r23, 0x0C61	; 0x800c61 <_ZL10local_port+0x1>
    59d2:	6f 5f       	subi	r22, 0xFF	; 255
    59d4:	7f 4f       	sbci	r23, 0xFF	; 255
    59d6:	70 93 61 0c 	sts	0x0C61, r23	; 0x800c61 <_ZL10local_port+0x1>
    59da:	60 93 60 0c 	sts	0x0C60, r22	; 0x800c60 <_ZL10local_port>
    59de:	8c 2f       	mov	r24, r28
    59e0:	ae df       	rcall	.-164    	; 0x593e <_ZN10W5500Class11writeSnPORTEhj>
    59e2:	41 e0       	ldi	r20, 0x01	; 1
    59e4:	6c 2f       	mov	r22, r28
    59e6:	85 e6       	ldi	r24, 0x65	; 101
    59e8:	9c e0       	ldi	r25, 0x0C	; 12
    59ea:	42 d3       	rcall	.+1668   	; 0x6070 <_ZN10W5500Class9execCmdSnEh7SockCMD>
    59ec:	81 e0       	ldi	r24, 0x01	; 1
    59ee:	01 c0       	rjmp	.+2      	; 0x59f2 <_Z6sockethhjh+0x5a>
    59f0:	80 e0       	ldi	r24, 0x00	; 0
    59f2:	df 91       	pop	r29
    59f4:	cf 91       	pop	r28
    59f6:	1f 91       	pop	r17
    59f8:	0f 91       	pop	r16
    59fa:	ff 90       	pop	r15
    59fc:	08 95       	ret

000059fe <_Z7connecthPhj>:
    59fe:	0f 93       	push	r16
    5a00:	1f 93       	push	r17
    5a02:	cf 93       	push	r28
    5a04:	fb 01       	movw	r30, r22
    5a06:	90 81       	ld	r25, Z
    5a08:	9f 3f       	cpi	r25, 0xFF	; 255
    5a0a:	51 f4       	brne	.+20     	; 0x5a20 <_Z7connecthPhj+0x22>
    5a0c:	91 81       	ldd	r25, Z+1	; 0x01
    5a0e:	9f 3f       	cpi	r25, 0xFF	; 255
    5a10:	91 f4       	brne	.+36     	; 0x5a36 <_Z7connecthPhj+0x38>
    5a12:	92 81       	ldd	r25, Z+2	; 0x02
    5a14:	9f 3f       	cpi	r25, 0xFF	; 255
    5a16:	79 f4       	brne	.+30     	; 0x5a36 <_Z7connecthPhj+0x38>
    5a18:	93 81       	ldd	r25, Z+3	; 0x03
    5a1a:	9f 3f       	cpi	r25, 0xFF	; 255
    5a1c:	61 f4       	brne	.+24     	; 0x5a36 <_Z7connecthPhj+0x38>
    5a1e:	1c c0       	rjmp	.+56     	; 0x5a58 <_Z7connecthPhj+0x5a>
    5a20:	91 11       	cpse	r25, r1
    5a22:	09 c0       	rjmp	.+18     	; 0x5a36 <_Z7connecthPhj+0x38>
    5a24:	91 81       	ldd	r25, Z+1	; 0x01
    5a26:	91 11       	cpse	r25, r1
    5a28:	06 c0       	rjmp	.+12     	; 0x5a36 <_Z7connecthPhj+0x38>
    5a2a:	92 81       	ldd	r25, Z+2	; 0x02
    5a2c:	91 11       	cpse	r25, r1
    5a2e:	03 c0       	rjmp	.+6      	; 0x5a36 <_Z7connecthPhj+0x38>
    5a30:	93 81       	ldd	r25, Z+3	; 0x03
    5a32:	99 23       	and	r25, r25
    5a34:	91 f0       	breq	.+36     	; 0x5a5a <_Z7connecthPhj+0x5c>
    5a36:	41 15       	cp	r20, r1
    5a38:	51 05       	cpc	r21, r1
    5a3a:	71 f0       	breq	.+28     	; 0x5a58 <_Z7connecthPhj+0x5a>
    5a3c:	8a 01       	movw	r16, r20
    5a3e:	bf 01       	movw	r22, r30
    5a40:	c8 2f       	mov	r28, r24
    5a42:	5f df       	rcall	.-322    	; 0x5902 <_ZN10W5500Class11writeSnDIPREhPh>
    5a44:	b8 01       	movw	r22, r16
    5a46:	8c 2f       	mov	r24, r28
    5a48:	8d df       	rcall	.-230    	; 0x5964 <_ZN10W5500Class12writeSnDPORTEhj>
    5a4a:	44 e0       	ldi	r20, 0x04	; 4
    5a4c:	6c 2f       	mov	r22, r28
    5a4e:	85 e6       	ldi	r24, 0x65	; 101
    5a50:	9c e0       	ldi	r25, 0x0C	; 12
    5a52:	0e d3       	rcall	.+1564   	; 0x6070 <_ZN10W5500Class9execCmdSnEh7SockCMD>
    5a54:	91 e0       	ldi	r25, 0x01	; 1
    5a56:	01 c0       	rjmp	.+2      	; 0x5a5a <_Z7connecthPhj+0x5c>
    5a58:	90 e0       	ldi	r25, 0x00	; 0
    5a5a:	89 2f       	mov	r24, r25
    5a5c:	cf 91       	pop	r28
    5a5e:	1f 91       	pop	r17
    5a60:	0f 91       	pop	r16
    5a62:	08 95       	ret

00005a64 <_Z10disconnecth>:
    5a64:	48 e0       	ldi	r20, 0x08	; 8
    5a66:	68 2f       	mov	r22, r24
    5a68:	85 e6       	ldi	r24, 0x65	; 101
    5a6a:	9c e0       	ldi	r25, 0x0C	; 12
    5a6c:	01 c3       	rjmp	.+1538   	; 0x6070 <_ZN10W5500Class9execCmdSnEh7SockCMD>

00005a6e <_Z4sendhPKhj>:
    5a6e:	cf 92       	push	r12
    5a70:	df 92       	push	r13
    5a72:	ef 92       	push	r14
    5a74:	ff 92       	push	r15
    5a76:	0f 93       	push	r16
    5a78:	1f 93       	push	r17
    5a7a:	cf 93       	push	r28
    5a7c:	c8 2f       	mov	r28, r24
    5a7e:	7b 01       	movw	r14, r22
    5a80:	8a 01       	movw	r16, r20
    5a82:	41 30       	cpi	r20, 0x01	; 1
    5a84:	58 40       	sbci	r21, 0x08	; 8
    5a86:	10 f0       	brcs	.+4      	; 0x5a8c <_Z4sendhPKhj+0x1e>
    5a88:	00 e0       	ldi	r16, 0x00	; 0
    5a8a:	18 e0       	ldi	r17, 0x08	; 8
    5a8c:	6c 2f       	mov	r22, r28
    5a8e:	85 e6       	ldi	r24, 0x65	; 101
    5a90:	9c e0       	ldi	r25, 0x0C	; 12
    5a92:	cd d1       	rcall	.+922    	; 0x5e2e <_ZN10W5500Class13getTXFreeSizeEh>
    5a94:	6c 01       	movw	r12, r24
    5a96:	63 e0       	ldi	r22, 0x03	; 3
    5a98:	70 e0       	ldi	r23, 0x00	; 0
    5a9a:	8c 2f       	mov	r24, r28
    5a9c:	3d df       	rcall	.-390    	; 0x5918 <_ZN10W5500Class6readSnEhj>
    5a9e:	87 31       	cpi	r24, 0x17	; 23
    5aa0:	11 f0       	breq	.+4      	; 0x5aa6 <_Z4sendhPKhj+0x38>
    5aa2:	8c 31       	cpi	r24, 0x1C	; 28
    5aa4:	21 f4       	brne	.+8      	; 0x5aae <_Z4sendhPKhj+0x40>
    5aa6:	c0 16       	cp	r12, r16
    5aa8:	d1 06       	cpc	r13, r17
    5aaa:	80 f3       	brcs	.-32     	; 0x5a8c <_Z4sendhPKhj+0x1e>
    5aac:	02 c0       	rjmp	.+4      	; 0x5ab2 <_Z4sendhPKhj+0x44>
    5aae:	00 e0       	ldi	r16, 0x00	; 0
    5ab0:	10 e0       	ldi	r17, 0x00	; 0
    5ab2:	98 01       	movw	r18, r16
    5ab4:	a7 01       	movw	r20, r14
    5ab6:	6c 2f       	mov	r22, r28
    5ab8:	85 e6       	ldi	r24, 0x65	; 101
    5aba:	9c e0       	ldi	r25, 0x0C	; 12
    5abc:	3d d2       	rcall	.+1146   	; 0x5f38 <_ZN10W5500Class20send_data_processingEhPKhj>
    5abe:	40 e2       	ldi	r20, 0x20	; 32
    5ac0:	6c 2f       	mov	r22, r28
    5ac2:	85 e6       	ldi	r24, 0x65	; 101
    5ac4:	9c e0       	ldi	r25, 0x0C	; 12
    5ac6:	d4 d2       	rcall	.+1448   	; 0x6070 <_ZN10W5500Class9execCmdSnEh7SockCMD>
    5ac8:	8c 2f       	mov	r24, r28
    5aca:	2e df       	rcall	.-420    	; 0x5928 <_ZN10W5500Class8readSnIREh>
    5acc:	84 fd       	sbrc	r24, 4
    5ace:	0b c0       	rjmp	.+22     	; 0x5ae6 <_Z4sendhPKhj+0x78>
    5ad0:	63 e0       	ldi	r22, 0x03	; 3
    5ad2:	70 e0       	ldi	r23, 0x00	; 0
    5ad4:	8c 2f       	mov	r24, r28
    5ad6:	20 df       	rcall	.-448    	; 0x5918 <_ZN10W5500Class6readSnEhj>
    5ad8:	81 11       	cpse	r24, r1
    5ada:	f6 cf       	rjmp	.-20     	; 0x5ac8 <_Z4sendhPKhj+0x5a>
    5adc:	8c 2f       	mov	r24, r28
    5ade:	51 df       	rcall	.-350    	; 0x5982 <_Z5closeh>
    5ae0:	80 e0       	ldi	r24, 0x00	; 0
    5ae2:	90 e0       	ldi	r25, 0x00	; 0
    5ae4:	04 c0       	rjmp	.+8      	; 0x5aee <_Z4sendhPKhj+0x80>
    5ae6:	60 e1       	ldi	r22, 0x10	; 16
    5ae8:	8c 2f       	mov	r24, r28
    5aea:	38 df       	rcall	.-400    	; 0x595c <_ZN10W5500Class9writeSnIREhh>
    5aec:	c8 01       	movw	r24, r16
    5aee:	cf 91       	pop	r28
    5af0:	1f 91       	pop	r17
    5af2:	0f 91       	pop	r16
    5af4:	ff 90       	pop	r15
    5af6:	ef 90       	pop	r14
    5af8:	df 90       	pop	r13
    5afa:	cf 90       	pop	r12
    5afc:	08 95       	ret

00005afe <_Z4recvhPhi>:
    5afe:	cf 92       	push	r12
    5b00:	df 92       	push	r13
    5b02:	ef 92       	push	r14
    5b04:	ff 92       	push	r15
    5b06:	0f 93       	push	r16
    5b08:	1f 93       	push	r17
    5b0a:	cf 93       	push	r28
    5b0c:	df 93       	push	r29
    5b0e:	18 2f       	mov	r17, r24
    5b10:	6b 01       	movw	r12, r22
    5b12:	7a 01       	movw	r14, r20
    5b14:	68 2f       	mov	r22, r24
    5b16:	85 e6       	ldi	r24, 0x65	; 101
    5b18:	9c e0       	ldi	r25, 0x0C	; 12
    5b1a:	ba d1       	rcall	.+884    	; 0x5e90 <_ZN10W5500Class17getRXReceivedSizeEh>
    5b1c:	ec 01       	movw	r28, r24
    5b1e:	00 97       	sbiw	r24, 0x00	; 0
    5b20:	91 f4       	brne	.+36     	; 0x5b46 <_Z4recvhPhi+0x48>
    5b22:	63 e0       	ldi	r22, 0x03	; 3
    5b24:	70 e0       	ldi	r23, 0x00	; 0
    5b26:	81 2f       	mov	r24, r17
    5b28:	f7 de       	rcall	.-530    	; 0x5918 <_ZN10W5500Class6readSnEhj>
    5b2a:	84 31       	cpi	r24, 0x14	; 20
    5b2c:	f9 f0       	breq	.+62     	; 0x5b6c <_Z4recvhPhi+0x6e>
    5b2e:	88 23       	and	r24, r24
    5b30:	e9 f0       	breq	.+58     	; 0x5b6c <_Z4recvhPhi+0x6e>
    5b32:	c1 e0       	ldi	r28, 0x01	; 1
    5b34:	d0 e0       	ldi	r29, 0x00	; 0
    5b36:	8c 31       	cpi	r24, 0x1C	; 28
    5b38:	11 f4       	brne	.+4      	; 0x5b3e <_Z4recvhPhi+0x40>
    5b3a:	c0 e0       	ldi	r28, 0x00	; 0
    5b3c:	d0 e0       	ldi	r29, 0x00	; 0
    5b3e:	d1 95       	neg	r29
    5b40:	c1 95       	neg	r28
    5b42:	d1 09       	sbc	r29, r1
    5b44:	13 c0       	rjmp	.+38     	; 0x5b6c <_Z4recvhPhi+0x6e>
    5b46:	e8 16       	cp	r14, r24
    5b48:	f9 06       	cpc	r15, r25
    5b4a:	0c f4       	brge	.+2      	; 0x5b4e <_Z4recvhPhi+0x50>
    5b4c:	e7 01       	movw	r28, r14
    5b4e:	1c 16       	cp	r1, r28
    5b50:	1d 06       	cpc	r1, r29
    5b52:	64 f4       	brge	.+24     	; 0x5b6c <_Z4recvhPhi+0x6e>
    5b54:	00 e0       	ldi	r16, 0x00	; 0
    5b56:	9e 01       	movw	r18, r28
    5b58:	a6 01       	movw	r20, r12
    5b5a:	61 2f       	mov	r22, r17
    5b5c:	85 e6       	ldi	r24, 0x65	; 101
    5b5e:	9c e0       	ldi	r25, 0x0C	; 12
    5b60:	3a d2       	rcall	.+1140   	; 0x5fd6 <_ZN10W5500Class20recv_data_processingEhPhjh>
    5b62:	40 e4       	ldi	r20, 0x40	; 64
    5b64:	61 2f       	mov	r22, r17
    5b66:	85 e6       	ldi	r24, 0x65	; 101
    5b68:	9c e0       	ldi	r25, 0x0C	; 12
    5b6a:	82 d2       	rcall	.+1284   	; 0x6070 <_ZN10W5500Class9execCmdSnEh7SockCMD>
    5b6c:	ce 01       	movw	r24, r28
    5b6e:	df 91       	pop	r29
    5b70:	cf 91       	pop	r28
    5b72:	1f 91       	pop	r17
    5b74:	0f 91       	pop	r16
    5b76:	ff 90       	pop	r15
    5b78:	ef 90       	pop	r14
    5b7a:	df 90       	pop	r13
    5b7c:	cf 90       	pop	r12
    5b7e:	08 95       	ret

00005b80 <_Z4peekhPh>:
    5b80:	0f 93       	push	r16
    5b82:	ab 01       	movw	r20, r22
    5b84:	01 e0       	ldi	r16, 0x01	; 1
    5b86:	21 e0       	ldi	r18, 0x01	; 1
    5b88:	30 e0       	ldi	r19, 0x00	; 0
    5b8a:	68 2f       	mov	r22, r24
    5b8c:	85 e6       	ldi	r24, 0x65	; 101
    5b8e:	9c e0       	ldi	r25, 0x0C	; 12
    5b90:	22 d2       	rcall	.+1092   	; 0x5fd6 <_ZN10W5500Class20recv_data_processingEhPhjh>
    5b92:	81 e0       	ldi	r24, 0x01	; 1
    5b94:	90 e0       	ldi	r25, 0x00	; 0
    5b96:	0f 91       	pop	r16
    5b98:	08 95       	ret

00005b9a <_Z5flushh>:
    5b9a:	08 95       	ret

00005b9c <_Z10bufferDatahjPKhj>:

uint16_t bufferData(SOCKET s, uint16_t offset, const uint8_t* buf, uint16_t len)
{
    5b9c:	af 92       	push	r10
    5b9e:	bf 92       	push	r11
    5ba0:	cf 92       	push	r12
    5ba2:	df 92       	push	r13
    5ba4:	ff 92       	push	r15
    5ba6:	0f 93       	push	r16
    5ba8:	1f 93       	push	r17
    5baa:	cf 93       	push	r28
    5bac:	df 93       	push	r29
    5bae:	f8 2e       	mov	r15, r24
    5bb0:	6b 01       	movw	r12, r22
    5bb2:	5a 01       	movw	r10, r20
    5bb4:	e9 01       	movw	r28, r18
  uint16_t ret =0;
  if (len > w5500.getTXFreeSize(s))
    5bb6:	68 2f       	mov	r22, r24
    5bb8:	85 e6       	ldi	r24, 0x65	; 101
    5bba:	9c e0       	ldi	r25, 0x0C	; 12
    5bbc:	38 d1       	rcall	.+624    	; 0x5e2e <_ZN10W5500Class13getTXFreeSizeEh>
    5bbe:	8c 17       	cp	r24, r28
    5bc0:	9d 07       	cpc	r25, r29
    5bc2:	28 f4       	brcc	.+10     	; 0x5bce <_Z10bufferDatahjPKhj+0x32>
  {
    ret = w5500.getTXFreeSize(s); // check size not to exceed MAX size.
    5bc4:	6f 2d       	mov	r22, r15
    5bc6:	85 e6       	ldi	r24, 0x65	; 101
    5bc8:	9c e0       	ldi	r25, 0x0C	; 12
    5bca:	31 d1       	rcall	.+610    	; 0x5e2e <_ZN10W5500Class13getTXFreeSizeEh>
    5bcc:	ec 01       	movw	r28, r24
  }
  else
  {
    ret = len;
  }
  w5500.send_data_processing_offset(s, offset, buf, ret);
    5bce:	8e 01       	movw	r16, r28
    5bd0:	95 01       	movw	r18, r10
    5bd2:	a6 01       	movw	r20, r12
    5bd4:	6f 2d       	mov	r22, r15
    5bd6:	85 e6       	ldi	r24, 0x65	; 101
    5bd8:	9c e0       	ldi	r25, 0x0C	; 12
    5bda:	74 d1       	rcall	.+744    	; 0x5ec4 <_ZN10W5500Class27send_data_processing_offsetEhjPKhj>
  return ret;
}
    5bdc:	ce 01       	movw	r24, r28
    5bde:	df 91       	pop	r29
    5be0:	cf 91       	pop	r28
    5be2:	1f 91       	pop	r17
    5be4:	0f 91       	pop	r16
    5be6:	ff 90       	pop	r15
    5be8:	df 90       	pop	r13
    5bea:	cf 90       	pop	r12
    5bec:	bf 90       	pop	r11
    5bee:	af 90       	pop	r10
    5bf0:	08 95       	ret

00005bf2 <_Z8startUDPhPhj>:

int startUDP(SOCKET s, uint8_t* addr, uint16_t port)
{
    5bf2:	0f 93       	push	r16
    5bf4:	1f 93       	push	r17
    5bf6:	cf 93       	push	r28
    5bf8:	fb 01       	movw	r30, r22
  if
    5bfa:	90 81       	ld	r25, Z
    5bfc:	91 11       	cpse	r25, r1
    5bfe:	09 c0       	rjmp	.+18     	; 0x5c12 <_Z8startUDPhPhj+0x20>
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
    5c00:	91 81       	ldd	r25, Z+1	; 0x01
    5c02:	91 11       	cpse	r25, r1
    5c04:	06 c0       	rjmp	.+12     	; 0x5c12 <_Z8startUDPhPhj+0x20>
    5c06:	92 81       	ldd	r25, Z+2	; 0x02
    5c08:	91 11       	cpse	r25, r1
    5c0a:	03 c0       	rjmp	.+6      	; 0x5c12 <_Z8startUDPhPhj+0x20>
    5c0c:	93 81       	ldd	r25, Z+3	; 0x03
    5c0e:	99 23       	and	r25, r25
    5c10:	69 f0       	breq	.+26     	; 0x5c2c <_Z8startUDPhPhj+0x3a>
    5c12:	41 15       	cp	r20, r1
    5c14:	51 05       	cpc	r21, r1
    5c16:	51 f0       	breq	.+20     	; 0x5c2c <_Z8startUDPhPhj+0x3a>
    5c18:	8a 01       	movw	r16, r20
    5c1a:	bf 01       	movw	r22, r30
    5c1c:	c8 2f       	mov	r28, r24
  {
    return 0;
  }
  else
  {
    w5500.writeSnDIPR(s, addr);
    5c1e:	71 de       	rcall	.-798    	; 0x5902 <_ZN10W5500Class11writeSnDIPREhPh>
    w5500.writeSnDPORT(s, port);
    5c20:	b8 01       	movw	r22, r16
    5c22:	8c 2f       	mov	r24, r28
    5c24:	9f de       	rcall	.-706    	; 0x5964 <_ZN10W5500Class12writeSnDPORTEhj>
    return 1;
    5c26:	81 e0       	ldi	r24, 0x01	; 1
    5c28:	90 e0       	ldi	r25, 0x00	; 0
    5c2a:	02 c0       	rjmp	.+4      	; 0x5c30 <_Z8startUDPhPhj+0x3e>
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
     ((port == 0x00))
    ) 
  {
    return 0;
    5c2c:	80 e0       	ldi	r24, 0x00	; 0
    5c2e:	90 e0       	ldi	r25, 0x00	; 0
  {
    w5500.writeSnDIPR(s, addr);
    w5500.writeSnDPORT(s, port);
    return 1;
  }
}
    5c30:	cf 91       	pop	r28
    5c32:	1f 91       	pop	r17
    5c34:	0f 91       	pop	r16
    5c36:	08 95       	ret

00005c38 <_Z7sendUDPh>:

int sendUDP(SOCKET s)
{
    5c38:	cf 93       	push	r28
    5c3a:	c8 2f       	mov	r28, r24
  w5500.execCmdSn(s, Sock_SEND);
    5c3c:	40 e2       	ldi	r20, 0x20	; 32
    5c3e:	68 2f       	mov	r22, r24
    5c40:	85 e6       	ldi	r24, 0x65	; 101
    5c42:	9c e0       	ldi	r25, 0x0C	; 12
    5c44:	15 d2       	rcall	.+1066   	; 0x6070 <_ZN10W5500Class9execCmdSnEh7SockCMD>
		
  /* +2008.01 bj */
  while ( (w5500.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
    5c46:	8c 2f       	mov	r24, r28
    5c48:	6f de       	rcall	.-802    	; 0x5928 <_ZN10W5500Class8readSnIREh>
    5c4a:	84 fd       	sbrc	r24, 4
    5c4c:	0a c0       	rjmp	.+20     	; 0x5c62 <_Z7sendUDPh+0x2a>
  {
    if (w5500.readSnIR(s) & SnIR::TIMEOUT)
    5c4e:	8c 2f       	mov	r24, r28
    5c50:	6b de       	rcall	.-810    	; 0x5928 <_ZN10W5500Class8readSnIREh>
    5c52:	83 ff       	sbrs	r24, 3
    5c54:	f8 cf       	rjmp	.-16     	; 0x5c46 <_Z7sendUDPh+0xe>
    {
      /* +2008.01 [bj]: clear interrupt */
      w5500.writeSnIR(s, (SnIR::SEND_OK|SnIR::TIMEOUT));
    5c56:	68 e1       	ldi	r22, 0x18	; 24
    5c58:	8c 2f       	mov	r24, r28
    5c5a:	80 de       	rcall	.-768    	; 0x595c <_ZN10W5500Class9writeSnIREhh>
    5c5c:	80 e0       	ldi	r24, 0x00	; 0
      return 0;
    5c5e:	90 e0       	ldi	r25, 0x00	; 0
    5c60:	05 c0       	rjmp	.+10     	; 0x5c6c <_Z7sendUDPh+0x34>
    }
  }

  /* +2008.01 bj */	
  w5500.writeSnIR(s, SnIR::SEND_OK);
    5c62:	60 e1       	ldi	r22, 0x10	; 16
    5c64:	8c 2f       	mov	r24, r28
    5c66:	7a de       	rcall	.-780    	; 0x595c <_ZN10W5500Class9writeSnIREhh>
    5c68:	81 e0       	ldi	r24, 0x01	; 1

  /* Sent ok */
  return 1;
    5c6a:	90 e0       	ldi	r25, 0x00	; 0
    5c6c:	cf 91       	pop	r28
}
    5c6e:	08 95       	ret

00005c70 <_ZN8SPIClass16beginTransactionE11SPISettings>:
    5c70:	20 91 68 0c 	lds	r18, 0x0C68	; 0x800c68 <_ZN8SPIClass13interruptModeE>
    uint8_t _data = SPI.transfer(0);
    resetSS();
    SPI.endTransaction();

    return _data;
}
    5c74:	22 23       	and	r18, r18
    5c76:	99 f0       	breq	.+38     	; 0x5c9e <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    5c78:	4f b7       	in	r20, 0x3f	; 63
    5c7a:	f8 94       	cli
    5c7c:	20 91 68 0c 	lds	r18, 0x0C68	; 0x800c68 <_ZN8SPIClass13interruptModeE>
    5c80:	21 30       	cpi	r18, 0x01	; 1
    5c82:	59 f4       	brne	.+22     	; 0x5c9a <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
    5c84:	2d b3       	in	r18, 0x1d	; 29
    5c86:	20 93 66 0c 	sts	0x0C66, r18	; 0x800c66 <_ZN8SPIClass13interruptSaveE>
    5c8a:	3d b3       	in	r19, 0x1d	; 29
    5c8c:	20 91 67 0c 	lds	r18, 0x0C67	; 0x800c67 <_ZN8SPIClass13interruptMaskE>
    5c90:	20 95       	com	r18
    5c92:	23 23       	and	r18, r19
    5c94:	2d bb       	out	0x1d, r18	; 29
    5c96:	4f bf       	out	0x3f, r20	; 63
    5c98:	02 c0       	rjmp	.+4      	; 0x5c9e <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    5c9a:	40 93 66 0c 	sts	0x0C66, r20	; 0x800c66 <_ZN8SPIClass13interruptSaveE>
    5c9e:	8c bd       	out	0x2c, r24	; 44
    5ca0:	9d bd       	out	0x2d, r25	; 45
    5ca2:	08 95       	ret

00005ca4 <_ZN8SPIClass8transferEh>:
    5ca4:	8e bd       	out	0x2e, r24	; 46
    5ca6:	00 00       	nop
    5ca8:	0d b4       	in	r0, 0x2d	; 45
    5caa:	07 fe       	sbrs	r0, 7
    5cac:	fd cf       	rjmp	.-6      	; 0x5ca8 <_ZN8SPIClass8transferEh+0x4>
    5cae:	8e b5       	in	r24, 0x2e	; 46
    5cb0:	08 95       	ret

00005cb2 <_ZN8SPIClass14endTransactionEv>:
    5cb2:	80 91 68 0c 	lds	r24, 0x0C68	; 0x800c68 <_ZN8SPIClass13interruptModeE>
    5cb6:	88 23       	and	r24, r24
    5cb8:	61 f0       	breq	.+24     	; 0x5cd2 <_ZN8SPIClass14endTransactionEv+0x20>
    5cba:	9f b7       	in	r25, 0x3f	; 63
    5cbc:	f8 94       	cli
    5cbe:	20 91 68 0c 	lds	r18, 0x0C68	; 0x800c68 <_ZN8SPIClass13interruptModeE>
    5cc2:	80 91 66 0c 	lds	r24, 0x0C66	; 0x800c66 <_ZN8SPIClass13interruptSaveE>
    5cc6:	21 30       	cpi	r18, 0x01	; 1
    5cc8:	19 f4       	brne	.+6      	; 0x5cd0 <_ZN8SPIClass14endTransactionEv+0x1e>
    5cca:	8d bb       	out	0x1d, r24	; 29
    5ccc:	9f bf       	out	0x3f, r25	; 63
    5cce:	08 95       	ret
    5cd0:	8f bf       	out	0x3f, r24	; 63
    5cd2:	08 95       	ret

00005cd4 <_ZN10W5500Class5setSSEv>:
    5cd4:	44 98       	cbi	0x08, 4	; 8
    5cd6:	08 95       	ret

00005cd8 <_ZN10W5500Class7resetSSEv>:
    5cd8:	44 9a       	sbi	0x08, 4	; 8
    5cda:	08 95       	ret

00005cdc <_ZN10W5500Class5writeEjhh>:
    5cdc:	0f 93       	push	r16
    5cde:	1f 93       	push	r17
    5ce0:	cf 93       	push	r28
    5ce2:	df 93       	push	r29
    5ce4:	18 2f       	mov	r17, r24
    5ce6:	09 2f       	mov	r16, r25
    5ce8:	d6 2f       	mov	r29, r22
    5cea:	c4 2f       	mov	r28, r20
    5cec:	80 91 63 0c 	lds	r24, 0x0C63	; 0x800c63 <wiznet_SPI_settings>
    5cf0:	90 91 64 0c 	lds	r25, 0x0C64	; 0x800c64 <wiznet_SPI_settings+0x1>
    5cf4:	bd df       	rcall	.-134    	; 0x5c70 <_ZN8SPIClass16beginTransactionE11SPISettings>
    5cf6:	ee df       	rcall	.-36     	; 0x5cd4 <_ZN10W5500Class5setSSEv>
    5cf8:	80 2f       	mov	r24, r16
    5cfa:	d4 df       	rcall	.-88     	; 0x5ca4 <_ZN8SPIClass8transferEh>
    5cfc:	81 2f       	mov	r24, r17
    5cfe:	d2 df       	rcall	.-92     	; 0x5ca4 <_ZN8SPIClass8transferEh>
    5d00:	8d 2f       	mov	r24, r29
    5d02:	d0 df       	rcall	.-96     	; 0x5ca4 <_ZN8SPIClass8transferEh>
    5d04:	8c 2f       	mov	r24, r28
    5d06:	ce df       	rcall	.-100    	; 0x5ca4 <_ZN8SPIClass8transferEh>
    5d08:	e7 df       	rcall	.-50     	; 0x5cd8 <_ZN10W5500Class7resetSSEv>
    5d0a:	d3 df       	rcall	.-90     	; 0x5cb2 <_ZN8SPIClass14endTransactionEv>
    5d0c:	81 e0       	ldi	r24, 0x01	; 1
    5d0e:	df 91       	pop	r29
    5d10:	cf 91       	pop	r28
    5d12:	1f 91       	pop	r17
    5d14:	0f 91       	pop	r16
    5d16:	08 95       	ret

00005d18 <_ZN10W5500Class5writeEjhPKhj>:
    5d18:	df 92       	push	r13
    5d1a:	ef 92       	push	r14
    5d1c:	ff 92       	push	r15
    5d1e:	0f 93       	push	r16
    5d20:	1f 93       	push	r17
    5d22:	cf 93       	push	r28
    5d24:	df 93       	push	r29
    5d26:	d8 2f       	mov	r29, r24
    5d28:	d9 2e       	mov	r13, r25
    5d2a:	c6 2f       	mov	r28, r22
    5d2c:	7a 01       	movw	r14, r20
    5d2e:	89 01       	movw	r16, r18
    5d30:	80 91 63 0c 	lds	r24, 0x0C63	; 0x800c63 <wiznet_SPI_settings>
    5d34:	90 91 64 0c 	lds	r25, 0x0C64	; 0x800c64 <wiznet_SPI_settings+0x1>
    5d38:	9b df       	rcall	.-202    	; 0x5c70 <_ZN8SPIClass16beginTransactionE11SPISettings>
    5d3a:	cc df       	rcall	.-104    	; 0x5cd4 <_ZN10W5500Class5setSSEv>
    5d3c:	8d 2d       	mov	r24, r13
    5d3e:	b2 df       	rcall	.-156    	; 0x5ca4 <_ZN8SPIClass8transferEh>
    5d40:	8d 2f       	mov	r24, r29
    5d42:	b0 df       	rcall	.-160    	; 0x5ca4 <_ZN8SPIClass8transferEh>
    5d44:	8c 2f       	mov	r24, r28
    5d46:	ae df       	rcall	.-164    	; 0x5ca4 <_ZN8SPIClass8transferEh>
    5d48:	e7 01       	movw	r28, r14
    5d4a:	e0 0e       	add	r14, r16
    5d4c:	f1 1e       	adc	r15, r17
    5d4e:	ce 15       	cp	r28, r14
    5d50:	df 05       	cpc	r29, r15
    5d52:	19 f0       	breq	.+6      	; 0x5d5a <_ZN10W5500Class5writeEjhPKhj+0x42>
    5d54:	89 91       	ld	r24, Y+
    5d56:	a6 df       	rcall	.-180    	; 0x5ca4 <_ZN8SPIClass8transferEh>
    5d58:	fa cf       	rjmp	.-12     	; 0x5d4e <_ZN10W5500Class5writeEjhPKhj+0x36>
    5d5a:	be df       	rcall	.-132    	; 0x5cd8 <_ZN10W5500Class7resetSSEv>
    5d5c:	aa df       	rcall	.-172    	; 0x5cb2 <_ZN8SPIClass14endTransactionEv>
    5d5e:	c8 01       	movw	r24, r16
    5d60:	df 91       	pop	r29
    5d62:	cf 91       	pop	r28
    5d64:	1f 91       	pop	r17
    5d66:	0f 91       	pop	r16
    5d68:	ff 90       	pop	r15
    5d6a:	ef 90       	pop	r14
    5d6c:	df 90       	pop	r13
    5d6e:	08 95       	ret

00005d70 <_ZN10W5500Class4readEjh>:
    5d70:	1f 93       	push	r17
    5d72:	cf 93       	push	r28
    5d74:	df 93       	push	r29
    5d76:	d8 2f       	mov	r29, r24
    5d78:	19 2f       	mov	r17, r25
    5d7a:	c6 2f       	mov	r28, r22
    5d7c:	80 91 63 0c 	lds	r24, 0x0C63	; 0x800c63 <wiznet_SPI_settings>
    5d80:	90 91 64 0c 	lds	r25, 0x0C64	; 0x800c64 <wiznet_SPI_settings+0x1>
    5d84:	75 df       	rcall	.-278    	; 0x5c70 <_ZN8SPIClass16beginTransactionE11SPISettings>
    5d86:	a6 df       	rcall	.-180    	; 0x5cd4 <_ZN10W5500Class5setSSEv>
    5d88:	81 2f       	mov	r24, r17
    5d8a:	8c df       	rcall	.-232    	; 0x5ca4 <_ZN8SPIClass8transferEh>
    5d8c:	8d 2f       	mov	r24, r29
    5d8e:	8a df       	rcall	.-236    	; 0x5ca4 <_ZN8SPIClass8transferEh>
    5d90:	8c 2f       	mov	r24, r28
    5d92:	88 df       	rcall	.-240    	; 0x5ca4 <_ZN8SPIClass8transferEh>
    5d94:	80 e0       	ldi	r24, 0x00	; 0
    5d96:	86 df       	rcall	.-244    	; 0x5ca4 <_ZN8SPIClass8transferEh>
    5d98:	c8 2f       	mov	r28, r24
    5d9a:	9e df       	rcall	.-196    	; 0x5cd8 <_ZN10W5500Class7resetSSEv>
    5d9c:	8a df       	rcall	.-236    	; 0x5cb2 <_ZN8SPIClass14endTransactionEv>
    5d9e:	8c 2f       	mov	r24, r28
    5da0:	df 91       	pop	r29
    5da2:	cf 91       	pop	r28
    5da4:	1f 91       	pop	r17
    5da6:	08 95       	ret

00005da8 <_ZN10W5500Class4initEh>:
    5da8:	cf 93       	push	r28
    5daa:	df 93       	push	r29
    5dac:	60 93 62 0c 	sts	0x0C62, r22	; 0x800c62 <SPI_CS>
    5db0:	68 ee       	ldi	r22, 0xE8	; 232
    5db2:	73 e0       	ldi	r23, 0x03	; 3
    5db4:	80 e0       	ldi	r24, 0x00	; 0
    5db6:	90 e0       	ldi	r25, 0x00	; 0
    5db8:	0e 94 85 3a 	call	0x750a	; 0x750a <delay>
    5dbc:	3c 9a       	sbi	0x07, 4	; 7
    5dbe:	10 d4       	rcall	.+2080   	; 0x65e0 <_ZN8SPIClass5beginEv>
    5dc0:	60 e0       	ldi	r22, 0x00	; 0
    5dc2:	80 e0       	ldi	r24, 0x00	; 0
    5dc4:	90 e0       	ldi	r25, 0x00	; 0
    5dc6:	d4 df       	rcall	.-88     	; 0x5d70 <_ZN10W5500Class4readEjh>
    5dc8:	48 2f       	mov	r20, r24
    5dca:	40 68       	ori	r20, 0x80	; 128
    5dcc:	64 e0       	ldi	r22, 0x04	; 4
    5dce:	80 e0       	ldi	r24, 0x00	; 0
    5dd0:	90 e0       	ldi	r25, 0x00	; 0
    5dd2:	84 df       	rcall	.-248    	; 0x5cdc <_ZN10W5500Class5writeEjhh>
    5dd4:	c0 e0       	ldi	r28, 0x00	; 0
    5dd6:	dc 2f       	mov	r29, r28
    5dd8:	d2 95       	swap	r29
    5dda:	dd 0f       	add	r29, r29
    5ddc:	d0 7e       	andi	r29, 0xE0	; 224
    5dde:	d4 5f       	subi	r29, 0xF4	; 244
    5de0:	42 e0       	ldi	r20, 0x02	; 2
    5de2:	6d 2f       	mov	r22, r29
    5de4:	8e e1       	ldi	r24, 0x1E	; 30
    5de6:	90 e0       	ldi	r25, 0x00	; 0
    5de8:	79 df       	rcall	.-270    	; 0x5cdc <_ZN10W5500Class5writeEjhh>
    5dea:	42 e0       	ldi	r20, 0x02	; 2
    5dec:	6d 2f       	mov	r22, r29
    5dee:	8f e1       	ldi	r24, 0x1F	; 31
    5df0:	90 e0       	ldi	r25, 0x00	; 0
    5df2:	74 df       	rcall	.-280    	; 0x5cdc <_ZN10W5500Class5writeEjhh>
    5df4:	cf 5f       	subi	r28, 0xFF	; 255
    5df6:	c8 30       	cpi	r28, 0x08	; 8
    5df8:	71 f7       	brne	.-36     	; 0x5dd6 <_ZN10W5500Class4initEh+0x2e>
    5dfa:	df 91       	pop	r29
    5dfc:	cf 91       	pop	r28
    5dfe:	08 95       	ret

00005e00 <_ZN10W5500Class12readSnTX_FSREh>:
    5e00:	1f 93       	push	r17
    5e02:	cf 93       	push	r28
    5e04:	df 93       	push	r29
    5e06:	18 2f       	mov	r17, r24
    5e08:	60 e2       	ldi	r22, 0x20	; 32
    5e0a:	70 e0       	ldi	r23, 0x00	; 0
    5e0c:	85 dd       	rcall	.-1270   	; 0x5918 <_ZN10W5500Class6readSnEhj>
    5e0e:	c8 2f       	mov	r28, r24
    5e10:	d0 e0       	ldi	r29, 0x00	; 0
    5e12:	dc 2f       	mov	r29, r28
    5e14:	cc 27       	eor	r28, r28
    5e16:	61 e2       	ldi	r22, 0x21	; 33
    5e18:	70 e0       	ldi	r23, 0x00	; 0
    5e1a:	81 2f       	mov	r24, r17
    5e1c:	7d dd       	rcall	.-1286   	; 0x5918 <_ZN10W5500Class6readSnEhj>
    5e1e:	9e 01       	movw	r18, r28
    5e20:	28 0f       	add	r18, r24
    5e22:	31 1d       	adc	r19, r1
    5e24:	c9 01       	movw	r24, r18
    5e26:	df 91       	pop	r29
    5e28:	cf 91       	pop	r28
    5e2a:	1f 91       	pop	r17
    5e2c:	08 95       	ret

00005e2e <_ZN10W5500Class13getTXFreeSizeEh>:
    5e2e:	ff 92       	push	r15
    5e30:	0f 93       	push	r16
    5e32:	1f 93       	push	r17
    5e34:	cf 93       	push	r28
    5e36:	df 93       	push	r29
    5e38:	f6 2e       	mov	r15, r22
    5e3a:	c0 e0       	ldi	r28, 0x00	; 0
    5e3c:	d0 e0       	ldi	r29, 0x00	; 0
    5e3e:	8f 2d       	mov	r24, r15
    5e40:	df df       	rcall	.-66     	; 0x5e00 <_ZN10W5500Class12readSnTX_FSREh>
    5e42:	8c 01       	movw	r16, r24
    5e44:	89 2b       	or	r24, r25
    5e46:	19 f0       	breq	.+6      	; 0x5e4e <_ZN10W5500Class13getTXFreeSizeEh+0x20>
    5e48:	8f 2d       	mov	r24, r15
    5e4a:	da df       	rcall	.-76     	; 0x5e00 <_ZN10W5500Class12readSnTX_FSREh>
    5e4c:	ec 01       	movw	r28, r24
    5e4e:	c0 17       	cp	r28, r16
    5e50:	d1 07       	cpc	r29, r17
    5e52:	a9 f7       	brne	.-22     	; 0x5e3e <_ZN10W5500Class13getTXFreeSizeEh+0x10>
    5e54:	ce 01       	movw	r24, r28
    5e56:	df 91       	pop	r29
    5e58:	cf 91       	pop	r28
    5e5a:	1f 91       	pop	r17
    5e5c:	0f 91       	pop	r16
    5e5e:	ff 90       	pop	r15
    5e60:	08 95       	ret

00005e62 <_ZN10W5500Class12readSnRX_RSREh>:
    5e62:	1f 93       	push	r17
    5e64:	cf 93       	push	r28
    5e66:	df 93       	push	r29
    5e68:	18 2f       	mov	r17, r24
    5e6a:	66 e2       	ldi	r22, 0x26	; 38
    5e6c:	70 e0       	ldi	r23, 0x00	; 0
    5e6e:	54 dd       	rcall	.-1368   	; 0x5918 <_ZN10W5500Class6readSnEhj>
    5e70:	c8 2f       	mov	r28, r24
    5e72:	d0 e0       	ldi	r29, 0x00	; 0
    5e74:	dc 2f       	mov	r29, r28
    5e76:	cc 27       	eor	r28, r28
    5e78:	67 e2       	ldi	r22, 0x27	; 39
    5e7a:	70 e0       	ldi	r23, 0x00	; 0
    5e7c:	81 2f       	mov	r24, r17
    5e7e:	4c dd       	rcall	.-1384   	; 0x5918 <_ZN10W5500Class6readSnEhj>
    5e80:	9e 01       	movw	r18, r28
    5e82:	28 0f       	add	r18, r24
    5e84:	31 1d       	adc	r19, r1
    5e86:	c9 01       	movw	r24, r18
    5e88:	df 91       	pop	r29
    5e8a:	cf 91       	pop	r28
    5e8c:	1f 91       	pop	r17
    5e8e:	08 95       	ret

00005e90 <_ZN10W5500Class17getRXReceivedSizeEh>:
    5e90:	ff 92       	push	r15
    5e92:	0f 93       	push	r16
    5e94:	1f 93       	push	r17
    5e96:	cf 93       	push	r28
    5e98:	df 93       	push	r29
    5e9a:	f6 2e       	mov	r15, r22
    5e9c:	c0 e0       	ldi	r28, 0x00	; 0
    5e9e:	d0 e0       	ldi	r29, 0x00	; 0
    5ea0:	8f 2d       	mov	r24, r15
    5ea2:	df df       	rcall	.-66     	; 0x5e62 <_ZN10W5500Class12readSnRX_RSREh>
    5ea4:	8c 01       	movw	r16, r24
    5ea6:	89 2b       	or	r24, r25
    5ea8:	19 f0       	breq	.+6      	; 0x5eb0 <_ZN10W5500Class17getRXReceivedSizeEh+0x20>
    5eaa:	8f 2d       	mov	r24, r15
    5eac:	da df       	rcall	.-76     	; 0x5e62 <_ZN10W5500Class12readSnRX_RSREh>
    5eae:	ec 01       	movw	r28, r24
    5eb0:	c0 17       	cp	r28, r16
    5eb2:	d1 07       	cpc	r29, r17
    5eb4:	a9 f7       	brne	.-22     	; 0x5ea0 <_ZN10W5500Class17getRXReceivedSizeEh+0x10>
    5eb6:	ce 01       	movw	r24, r28
    5eb8:	df 91       	pop	r29
    5eba:	cf 91       	pop	r28
    5ebc:	1f 91       	pop	r17
    5ebe:	0f 91       	pop	r16
    5ec0:	ff 90       	pop	r15
    5ec2:	08 95       	ret

00005ec4 <_ZN10W5500Class27send_data_processing_offsetEhjPKhj>:
    5ec4:	af 92       	push	r10
    5ec6:	bf 92       	push	r11
    5ec8:	df 92       	push	r13
    5eca:	ef 92       	push	r14
    5ecc:	ff 92       	push	r15
    5ece:	0f 93       	push	r16
    5ed0:	1f 93       	push	r17
    5ed2:	cf 93       	push	r28
    5ed4:	df 93       	push	r29
    5ed6:	d6 2e       	mov	r13, r22
    5ed8:	7a 01       	movw	r14, r20
    5eda:	59 01       	movw	r10, r18
    5edc:	64 e2       	ldi	r22, 0x24	; 36
    5ede:	70 e0       	ldi	r23, 0x00	; 0
    5ee0:	8d 2d       	mov	r24, r13
    5ee2:	1a dd       	rcall	.-1484   	; 0x5918 <_ZN10W5500Class6readSnEhj>
    5ee4:	c8 2f       	mov	r28, r24
    5ee6:	65 e2       	ldi	r22, 0x25	; 37
    5ee8:	70 e0       	ldi	r23, 0x00	; 0
    5eea:	8d 2d       	mov	r24, r13
    5eec:	15 dd       	rcall	.-1494   	; 0x5918 <_ZN10W5500Class6readSnEhj>
    5eee:	d0 e0       	ldi	r29, 0x00	; 0
    5ef0:	dc 2f       	mov	r29, r28
    5ef2:	cc 27       	eor	r28, r28
    5ef4:	e8 0e       	add	r14, r24
    5ef6:	f1 1c       	adc	r15, r1
    5ef8:	ce 0d       	add	r28, r14
    5efa:	df 1d       	adc	r29, r15
    5efc:	6d 2d       	mov	r22, r13
    5efe:	62 95       	swap	r22
    5f00:	66 0f       	add	r22, r22
    5f02:	60 7e       	andi	r22, 0xE0	; 224
    5f04:	6c 5e       	subi	r22, 0xEC	; 236
    5f06:	98 01       	movw	r18, r16
    5f08:	a5 01       	movw	r20, r10
    5f0a:	ce 01       	movw	r24, r28
    5f0c:	05 df       	rcall	.-502    	; 0x5d18 <_ZN10W5500Class5writeEjhPKhj>
    5f0e:	c0 0f       	add	r28, r16
    5f10:	d1 1f       	adc	r29, r17
    5f12:	4d 2f       	mov	r20, r29
    5f14:	64 e2       	ldi	r22, 0x24	; 36
    5f16:	70 e0       	ldi	r23, 0x00	; 0
    5f18:	8d 2d       	mov	r24, r13
    5f1a:	09 dd       	rcall	.-1518   	; 0x592e <_ZN10W5500Class7writeSnEhjh>
    5f1c:	4c 2f       	mov	r20, r28
    5f1e:	65 e2       	ldi	r22, 0x25	; 37
    5f20:	70 e0       	ldi	r23, 0x00	; 0
    5f22:	8d 2d       	mov	r24, r13
    5f24:	df 91       	pop	r29
    5f26:	cf 91       	pop	r28
    5f28:	1f 91       	pop	r17
    5f2a:	0f 91       	pop	r16
    5f2c:	ff 90       	pop	r15
    5f2e:	ef 90       	pop	r14
    5f30:	df 90       	pop	r13
    5f32:	bf 90       	pop	r11
    5f34:	af 90       	pop	r10
    5f36:	fb cc       	rjmp	.-1546   	; 0x592e <_ZN10W5500Class7writeSnEhjh>

00005f38 <_ZN10W5500Class20send_data_processingEhPKhj>:
    5f38:	0f 93       	push	r16
    5f3a:	1f 93       	push	r17
    5f3c:	89 01       	movw	r16, r18
    5f3e:	9a 01       	movw	r18, r20
    5f40:	40 e0       	ldi	r20, 0x00	; 0
    5f42:	50 e0       	ldi	r21, 0x00	; 0
    5f44:	bf df       	rcall	.-130    	; 0x5ec4 <_ZN10W5500Class27send_data_processing_offsetEhjPKhj>
    5f46:	1f 91       	pop	r17
    5f48:	0f 91       	pop	r16
    5f4a:	08 95       	ret

00005f4c <_ZN10W5500Class4readEjhPhj>:
    5f4c:	df 92       	push	r13
    5f4e:	ef 92       	push	r14
    5f50:	ff 92       	push	r15
    5f52:	0f 93       	push	r16
    5f54:	1f 93       	push	r17
    5f56:	cf 93       	push	r28
    5f58:	df 93       	push	r29
    5f5a:	d8 2f       	mov	r29, r24
    5f5c:	d9 2e       	mov	r13, r25
    5f5e:	c6 2f       	mov	r28, r22
    5f60:	7a 01       	movw	r14, r20
    5f62:	89 01       	movw	r16, r18
    5f64:	80 91 63 0c 	lds	r24, 0x0C63	; 0x800c63 <wiznet_SPI_settings>
    5f68:	90 91 64 0c 	lds	r25, 0x0C64	; 0x800c64 <wiznet_SPI_settings+0x1>
    5f6c:	81 de       	rcall	.-766    	; 0x5c70 <_ZN8SPIClass16beginTransactionE11SPISettings>
    5f6e:	b2 de       	rcall	.-668    	; 0x5cd4 <_ZN10W5500Class5setSSEv>
    5f70:	8d 2d       	mov	r24, r13
    5f72:	98 de       	rcall	.-720    	; 0x5ca4 <_ZN8SPIClass8transferEh>
    5f74:	8d 2f       	mov	r24, r29
    5f76:	96 de       	rcall	.-724    	; 0x5ca4 <_ZN8SPIClass8transferEh>
    5f78:	8c 2f       	mov	r24, r28
    5f7a:	94 de       	rcall	.-728    	; 0x5ca4 <_ZN8SPIClass8transferEh>
    5f7c:	e7 01       	movw	r28, r14
    5f7e:	e0 0e       	add	r14, r16
    5f80:	f1 1e       	adc	r15, r17
    5f82:	ce 15       	cp	r28, r14
    5f84:	df 05       	cpc	r29, r15
    5f86:	21 f0       	breq	.+8      	; 0x5f90 <_ZN10W5500Class4readEjhPhj+0x44>
    5f88:	80 e0       	ldi	r24, 0x00	; 0
    5f8a:	8c de       	rcall	.-744    	; 0x5ca4 <_ZN8SPIClass8transferEh>
    5f8c:	89 93       	st	Y+, r24
    5f8e:	f9 cf       	rjmp	.-14     	; 0x5f82 <_ZN10W5500Class4readEjhPhj+0x36>
    5f90:	a3 de       	rcall	.-698    	; 0x5cd8 <_ZN10W5500Class7resetSSEv>
    5f92:	8f de       	rcall	.-738    	; 0x5cb2 <_ZN8SPIClass14endTransactionEv>
    5f94:	c8 01       	movw	r24, r16
    5f96:	df 91       	pop	r29
    5f98:	cf 91       	pop	r28
    5f9a:	1f 91       	pop	r17
    5f9c:	0f 91       	pop	r16
    5f9e:	ff 90       	pop	r15
    5fa0:	ef 90       	pop	r14
    5fa2:	df 90       	pop	r13
    5fa4:	08 95       	ret

00005fa6 <_ZN10W5500Class9read_dataEhjPVhj>:
    5fa6:	0f 93       	push	r16
    5fa8:	1f 93       	push	r17
    5faa:	cf 93       	push	r28
    5fac:	df 93       	push	r29
    5fae:	00 d0       	rcall	.+0      	; 0x5fb0 <_ZN10W5500Class9read_dataEhjPVhj+0xa>
    5fb0:	cd b7       	in	r28, 0x3d	; 61
    5fb2:	de b7       	in	r29, 0x3e	; 62
    5fb4:	5a 83       	std	Y+2, r21	; 0x02
    5fb6:	49 83       	std	Y+1, r20	; 0x01
    5fb8:	a9 01       	movw	r20, r18
    5fba:	98 01       	movw	r18, r16
    5fbc:	89 81       	ldd	r24, Y+1	; 0x01
    5fbe:	9a 81       	ldd	r25, Y+2	; 0x02
    5fc0:	62 95       	swap	r22
    5fc2:	66 0f       	add	r22, r22
    5fc4:	60 7e       	andi	r22, 0xE0	; 224
    5fc6:	68 5e       	subi	r22, 0xE8	; 232
    5fc8:	0f 90       	pop	r0
    5fca:	0f 90       	pop	r0
    5fcc:	df 91       	pop	r29
    5fce:	cf 91       	pop	r28
    5fd0:	1f 91       	pop	r17
    5fd2:	0f 91       	pop	r16
    5fd4:	bb cf       	rjmp	.-138    	; 0x5f4c <_ZN10W5500Class4readEjhPhj>

00005fd6 <_ZN10W5500Class20recv_data_processingEhPhjh>:
    5fd6:	8f 92       	push	r8
    5fd8:	9f 92       	push	r9
    5fda:	af 92       	push	r10
    5fdc:	bf 92       	push	r11
    5fde:	cf 92       	push	r12
    5fe0:	df 92       	push	r13
    5fe2:	ef 92       	push	r14
    5fe4:	ff 92       	push	r15
    5fe6:	0f 93       	push	r16
    5fe8:	1f 93       	push	r17
    5fea:	cf 93       	push	r28
    5fec:	df 93       	push	r29
    5fee:	6c 01       	movw	r12, r24
    5ff0:	96 2e       	mov	r9, r22
    5ff2:	5a 01       	movw	r10, r20
    5ff4:	79 01       	movw	r14, r18
    5ff6:	80 2e       	mov	r8, r16
    5ff8:	68 e2       	ldi	r22, 0x28	; 40
    5ffa:	70 e0       	ldi	r23, 0x00	; 0
    5ffc:	89 2d       	mov	r24, r9
    5ffe:	8c dc       	rcall	.-1768   	; 0x5918 <_ZN10W5500Class6readSnEhj>
    6000:	08 2f       	mov	r16, r24
    6002:	69 e2       	ldi	r22, 0x29	; 41
    6004:	70 e0       	ldi	r23, 0x00	; 0
    6006:	89 2d       	mov	r24, r9
    6008:	87 dc       	rcall	.-1778   	; 0x5918 <_ZN10W5500Class6readSnEhj>
    600a:	10 e0       	ldi	r17, 0x00	; 0
    600c:	10 2f       	mov	r17, r16
    600e:	00 27       	eor	r16, r16
    6010:	e8 01       	movw	r28, r16
    6012:	c8 0f       	add	r28, r24
    6014:	d1 1d       	adc	r29, r1
    6016:	87 01       	movw	r16, r14
    6018:	95 01       	movw	r18, r10
    601a:	ae 01       	movw	r20, r28
    601c:	69 2d       	mov	r22, r9
    601e:	c6 01       	movw	r24, r12
    6020:	c2 df       	rcall	.-124    	; 0x5fa6 <_ZN10W5500Class9read_dataEhjPVhj>
    6022:	81 10       	cpse	r8, r1
    6024:	18 c0       	rjmp	.+48     	; 0x6056 <_ZN10W5500Class20recv_data_processingEhPhjh+0x80>
    6026:	0c 0f       	add	r16, r28
    6028:	1d 1f       	adc	r17, r29
    602a:	41 2f       	mov	r20, r17
    602c:	68 e2       	ldi	r22, 0x28	; 40
    602e:	70 e0       	ldi	r23, 0x00	; 0
    6030:	89 2d       	mov	r24, r9
    6032:	7d dc       	rcall	.-1798   	; 0x592e <_ZN10W5500Class7writeSnEhjh>
    6034:	40 2f       	mov	r20, r16
    6036:	69 e2       	ldi	r22, 0x29	; 41
    6038:	70 e0       	ldi	r23, 0x00	; 0
    603a:	89 2d       	mov	r24, r9
    603c:	df 91       	pop	r29
    603e:	cf 91       	pop	r28
    6040:	1f 91       	pop	r17
    6042:	0f 91       	pop	r16
    6044:	ff 90       	pop	r15
    6046:	ef 90       	pop	r14
    6048:	df 90       	pop	r13
    604a:	cf 90       	pop	r12
    604c:	bf 90       	pop	r11
    604e:	af 90       	pop	r10
    6050:	9f 90       	pop	r9
    6052:	8f 90       	pop	r8
    6054:	6c cc       	rjmp	.-1832   	; 0x592e <_ZN10W5500Class7writeSnEhjh>
    6056:	df 91       	pop	r29
    6058:	cf 91       	pop	r28
    605a:	1f 91       	pop	r17
    605c:	0f 91       	pop	r16
    605e:	ff 90       	pop	r15
    6060:	ef 90       	pop	r14
    6062:	df 90       	pop	r13
    6064:	cf 90       	pop	r12
    6066:	bf 90       	pop	r11
    6068:	af 90       	pop	r10
    606a:	9f 90       	pop	r9
    606c:	8f 90       	pop	r8
    606e:	08 95       	ret

00006070 <_ZN10W5500Class9execCmdSnEh7SockCMD>:
    6070:	cf 93       	push	r28
    6072:	c6 2f       	mov	r28, r22
    6074:	61 e0       	ldi	r22, 0x01	; 1
    6076:	70 e0       	ldi	r23, 0x00	; 0
    6078:	8c 2f       	mov	r24, r28
    607a:	59 dc       	rcall	.-1870   	; 0x592e <_ZN10W5500Class7writeSnEhjh>
    607c:	61 e0       	ldi	r22, 0x01	; 1
    607e:	70 e0       	ldi	r23, 0x00	; 0
    6080:	8c 2f       	mov	r24, r28
    6082:	4a dc       	rcall	.-1900   	; 0x5918 <_ZN10W5500Class6readSnEhj>
    6084:	81 11       	cpse	r24, r1
    6086:	fa cf       	rjmp	.-12     	; 0x607c <_ZN10W5500Class9execCmdSnEh7SockCMD+0xc>
    6088:	cf 91       	pop	r28
    608a:	08 95       	ret

0000608c <_GLOBAL__sub_I_w5500>:
    // Invert the SPI2X bit
    clockDiv ^= 0x1;

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    608c:	e3 e6       	ldi	r30, 0x63	; 99
    608e:	fc e0       	ldi	r31, 0x0C	; 12
    6090:	80 e5       	ldi	r24, 0x50	; 80
    6092:	80 83       	st	Z, r24
    spsr = clockDiv & SPI_2XCLOCK_MASK;
    6094:	81 e0       	ldi	r24, 0x01	; 1
    6096:	81 83       	std	Z+1, r24	; 0x01
    6098:	08 95       	ret

0000609a <_ZN5I2CIOC1Ev>:
      // Remove the values which are not inputs and get the value of the pin
      pinVal = this->read() & _dirMask;
      pinVal = ( pinVal >> pin ) & 0x01; // Get the pin value
   }
   return (pinVal);
}
    609a:	fc 01       	movw	r30, r24
    609c:	12 82       	std	Z+2, r1	; 0x02
    609e:	8f ef       	ldi	r24, 0xFF	; 255
    60a0:	81 83       	std	Z+1, r24	; 0x01
    60a2:	10 82       	st	Z, r1
    60a4:	13 82       	std	Z+3, r1	; 0x03
    60a6:	08 95       	ret

000060a8 <_ZN5I2CIO8portModeEh>:
    60a8:	fc 01       	movw	r30, r24
    60aa:	83 81       	ldd	r24, Z+3	; 0x03
    60ac:	88 23       	and	r24, r24
    60ae:	31 f0       	breq	.+12     	; 0x60bc <_ZN5I2CIO8portModeEh+0x14>
    60b0:	61 11       	cpse	r22, r1
    60b2:	03 c0       	rjmp	.+6      	; 0x60ba <_ZN5I2CIO8portModeEh+0x12>
    60b4:	8f ef       	ldi	r24, 0xFF	; 255
    60b6:	81 83       	std	Z+1, r24	; 0x01
    60b8:	08 95       	ret
    60ba:	11 82       	std	Z+1, r1	; 0x01
    60bc:	08 95       	ret

000060be <_ZN5I2CIO11isAvailableEh>:
    60be:	88 ed       	ldi	r24, 0xD8	; 216
    60c0:	9c e0       	ldi	r25, 0x0C	; 12
    60c2:	f0 d5       	rcall	.+3040   	; 0x6ca4 <_ZN7TwoWire17beginTransmissionEh>
    60c4:	88 ed       	ldi	r24, 0xD8	; 216
    60c6:	9c e0       	ldi	r25, 0x0C	; 12
    60c8:	6e d6       	rcall	.+3292   	; 0x6da6 <_ZN7TwoWire15endTransmissionEv>
    60ca:	91 e0       	ldi	r25, 0x01	; 1
    60cc:	81 11       	cpse	r24, r1
    60ce:	90 e0       	ldi	r25, 0x00	; 0
    60d0:	89 2f       	mov	r24, r25
    60d2:	08 95       	ret

000060d4 <_ZN5I2CIO5beginEh>:
    60d4:	cf 93       	push	r28
    60d6:	df 93       	push	r29
    60d8:	ec 01       	movw	r28, r24
    60da:	6a 83       	std	Y+2, r22	; 0x02
    60dc:	88 ed       	ldi	r24, 0xD8	; 216
    60de:	9c e0       	ldi	r25, 0x0C	; 12
    60e0:	ce d5       	rcall	.+2972   	; 0x6c7e <_ZN7TwoWire5beginEv>
    60e2:	6a 81       	ldd	r22, Y+2	; 0x02
    60e4:	ce 01       	movw	r24, r28
    60e6:	eb df       	rcall	.-42     	; 0x60be <_ZN5I2CIO11isAvailableEh>
    60e8:	8b 83       	std	Y+3, r24	; 0x03
    60ea:	88 23       	and	r24, r24
    60ec:	21 f0       	breq	.+8      	; 0x60f6 <_ZN5I2CIO5beginEh+0x22>
    60ee:	88 ed       	ldi	r24, 0xD8	; 216
    60f0:	9c e0       	ldi	r25, 0x0C	; 12
    60f2:	01 d5       	rcall	.+2562   	; 0x6af6 <_ZN7TwoWire4readEv>
    60f4:	88 83       	st	Y, r24
    60f6:	8b 81       	ldd	r24, Y+3	; 0x03
    60f8:	90 e0       	ldi	r25, 0x00	; 0
    60fa:	df 91       	pop	r29
    60fc:	cf 91       	pop	r28
    60fe:	08 95       	ret

00006100 <_ZN5I2CIO5writeEh>:
}

//
// write
int I2CIO::write ( uint8_t value )
{
    6100:	cf 93       	push	r28
    6102:	df 93       	push	r29
   int status = 0;
   
   if ( _initialised )
    6104:	fc 01       	movw	r30, r24
    6106:	23 81       	ldd	r18, Z+3	; 0x03
    6108:	22 23       	and	r18, r18
    610a:	99 f0       	breq	.+38     	; 0x6132 <_ZN5I2CIO5writeEh+0x32>
    610c:	ec 01       	movw	r28, r24
   {
      // Only write HIGH the values of the ports that have been initialised as
      // outputs updating the output shadow of the device
      _shadow = ( value & ~(_dirMask) );
    610e:	81 81       	ldd	r24, Z+1	; 0x01
    6110:	80 95       	com	r24
    6112:	68 23       	and	r22, r24
    6114:	60 83       	st	Z, r22
   
      Wire.beginTransmission ( _i2cAddr );
    6116:	62 81       	ldd	r22, Z+2	; 0x02
    6118:	88 ed       	ldi	r24, 0xD8	; 216
    611a:	9c e0       	ldi	r25, 0x0C	; 12
    611c:	c3 d5       	rcall	.+2950   	; 0x6ca4 <_ZN7TwoWire17beginTransmissionEh>
#if (ARDUINO <  100)
      Wire.send ( _shadow );
#else
      Wire.write ( _shadow );
    611e:	68 81       	ld	r22, Y
    6120:	88 ed       	ldi	r24, 0xD8	; 216
    6122:	9c e0       	ldi	r25, 0x0C	; 12
    6124:	6e d5       	rcall	.+2780   	; 0x6c02 <_ZN7TwoWire5writeEh>
#endif  
      status = Wire.endTransmission ();
    6126:	88 ed       	ldi	r24, 0xD8	; 216
    6128:	9c e0       	ldi	r25, 0x0C	; 12
    612a:	3d d6       	rcall	.+3194   	; 0x6da6 <_ZN7TwoWire15endTransmissionEv>
    612c:	28 2f       	mov	r18, r24
    612e:	30 e0       	ldi	r19, 0x00	; 0
    6130:	02 c0       	rjmp	.+4      	; 0x6136 <_ZN5I2CIO5writeEh+0x36>

//
// write
int I2CIO::write ( uint8_t value )
{
   int status = 0;
    6132:	20 e0       	ldi	r18, 0x00	; 0
    6134:	30 e0       	ldi	r19, 0x00	; 0
#else
      Wire.write ( _shadow );
#endif  
      status = Wire.endTransmission ();
   }
   return ( (status == 0) );
    6136:	81 e0       	ldi	r24, 0x01	; 1
    6138:	90 e0       	ldi	r25, 0x00	; 0
    613a:	23 2b       	or	r18, r19
    613c:	11 f0       	breq	.+4      	; 0x6142 <_ZN5I2CIO5writeEh+0x42>
    613e:	80 e0       	ldi	r24, 0x00	; 0
    6140:	90 e0       	ldi	r25, 0x00	; 0
}
    6142:	df 91       	pop	r29
    6144:	cf 91       	pop	r28
    6146:	08 95       	ret

00006148 <_ZN3LCD15setBacklightPinEh13t_backlighPol>:

// This will 'left justify' text from the cursor
void LCD::noAutoscroll(void) 
{
   _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
   command(LCD_ENTRYMODESET | _displaymode);
    6148:	08 95       	ret

0000614a <_ZN3LCD12setBacklightEh>:
    614a:	08 95       	ret

0000614c <_ZN3LCD5writeEh>:
    614c:	dc 01       	movw	r26, r24
    614e:	ed 91       	ld	r30, X+
    6150:	fc 91       	ld	r31, X
    6152:	06 84       	ldd	r0, Z+14	; 0x0e
    6154:	f7 85       	ldd	r31, Z+15	; 0x0f
    6156:	e0 2d       	mov	r30, r0
    6158:	41 e0       	ldi	r20, 0x01	; 1
    615a:	09 95       	icall
    615c:	81 e0       	ldi	r24, 0x01	; 1
    615e:	90 e0       	ldi	r25, 0x00	; 0
    6160:	08 95       	ret

00006162 <_ZN3LCDC1Ev>:
    6162:	fc 01       	movw	r30, r24
    6164:	13 82       	std	Z+3, r1	; 0x03
    6166:	12 82       	std	Z+2, r1	; 0x02
    6168:	28 e3       	ldi	r18, 0x38	; 56
    616a:	3a e0       	ldi	r19, 0x0A	; 10
    616c:	31 83       	std	Z+1, r19	; 0x01
    616e:	20 83       	st	Z, r18
    6170:	08 95       	ret

00006172 <_ZN3LCD9backlightEv>:
    6172:	dc 01       	movw	r26, r24
    6174:	ed 91       	ld	r30, X+
    6176:	fc 91       	ld	r31, X
    6178:	04 84       	ldd	r0, Z+12	; 0x0c
    617a:	f5 85       	ldd	r31, Z+13	; 0x0d
    617c:	e0 2d       	mov	r30, r0
    617e:	6f ef       	ldi	r22, 0xFF	; 255
    6180:	09 94       	ijmp

00006182 <_ZN3LCD11noBacklightEv>:
    6182:	dc 01       	movw	r26, r24
    6184:	ed 91       	ld	r30, X+
    6186:	fc 91       	ld	r31, X
    6188:	04 84       	ldd	r0, Z+12	; 0x0c
    618a:	f5 85       	ldd	r31, Z+13	; 0x0d
    618c:	e0 2d       	mov	r30, r0
    618e:	60 e0       	ldi	r22, 0x00	; 0
    6190:	09 94       	ijmp

00006192 <_ZN3LCD7commandEh>:
    6192:	dc 01       	movw	r26, r24
    6194:	ed 91       	ld	r30, X+
    6196:	fc 91       	ld	r31, X
    6198:	06 84       	ldd	r0, Z+14	; 0x0e
    619a:	f7 85       	ldd	r31, Z+15	; 0x0f
    619c:	e0 2d       	mov	r30, r0
    619e:	40 e0       	ldi	r20, 0x00	; 0
    61a0:	09 94       	ijmp

000061a2 <_ZN3LCD5clearEv>:
    61a2:	61 e0       	ldi	r22, 0x01	; 1
    61a4:	f6 df       	rcall	.-20     	; 0x6192 <_ZN3LCD7commandEh>
    61a6:	80 ed       	ldi	r24, 0xD0	; 208
    61a8:	97 e0       	ldi	r25, 0x07	; 7
    61aa:	0c 94 be 3a 	jmp	0x757c	; 0x757c <delayMicroseconds>

000061ae <_ZN3LCD9setCursorEhh>:
    61ae:	cf 93       	push	r28
    61b0:	df 93       	push	r29
    61b2:	cd b7       	in	r28, 0x3d	; 61
    61b4:	de b7       	in	r29, 0x3e	; 62
    61b6:	28 97       	sbiw	r28, 0x08	; 8
    61b8:	0f b6       	in	r0, 0x3f	; 63
    61ba:	f8 94       	cli
    61bc:	de bf       	out	0x3e, r29	; 62
    61be:	0f be       	out	0x3f, r0	; 63
    61c0:	cd bf       	out	0x3d, r28	; 61
    61c2:	fc 01       	movw	r30, r24
    61c4:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <_ZN14EthernetClient8_srcportE+0x79>
    61c8:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <_ZN14EthernetClient8_srcportE+0x7a>
    61cc:	a0 91 e6 01 	lds	r26, 0x01E6	; 0x8001e6 <_ZN14EthernetClient8_srcportE+0x7b>
    61d0:	b0 91 e7 01 	lds	r27, 0x01E7	; 0x8001e7 <_ZN14EthernetClient8_srcportE+0x7c>
    61d4:	8d 83       	std	Y+5, r24	; 0x05
    61d6:	9e 83       	std	Y+6, r25	; 0x06
    61d8:	af 83       	std	Y+7, r26	; 0x07
    61da:	b8 87       	std	Y+8, r27	; 0x08
    61dc:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <_ZN14EthernetClient8_srcportE+0x7d>
    61e0:	90 91 e9 01 	lds	r25, 0x01E9	; 0x8001e9 <_ZN14EthernetClient8_srcportE+0x7e>
    61e4:	a0 91 ea 01 	lds	r26, 0x01EA	; 0x8001ea <_ZN14EthernetClient8_srcportE+0x7f>
    61e8:	b0 91 eb 01 	lds	r27, 0x01EB	; 0x8001eb <_ZN14EthernetClient8_srcportE+0x80>
    61ec:	89 83       	std	Y+1, r24	; 0x01
    61ee:	9a 83       	std	Y+2, r25	; 0x02
    61f0:	ab 83       	std	Y+3, r26	; 0x03
    61f2:	bc 83       	std	Y+4, r27	; 0x04
    61f4:	87 81       	ldd	r24, Z+7	; 0x07
    61f6:	48 17       	cp	r20, r24
    61f8:	10 f0       	brcs	.+4      	; 0x61fe <_ZN3LCD9setCursorEhh+0x50>
    61fa:	4f ef       	ldi	r20, 0xFF	; 255
    61fc:	48 0f       	add	r20, r24
    61fe:	90 85       	ldd	r25, Z+8	; 0x08
    6200:	50 e0       	ldi	r21, 0x00	; 0
    6202:	de 01       	movw	r26, r28
    6204:	a4 0f       	add	r26, r20
    6206:	b5 1f       	adc	r27, r21
    6208:	90 31       	cpi	r25, 0x10	; 16
    620a:	29 f4       	brne	.+10     	; 0x6216 <_ZN3LCD9setCursorEhh+0x68>
    620c:	84 30       	cpi	r24, 0x04	; 4
    620e:	19 f4       	brne	.+6      	; 0x6216 <_ZN3LCD9setCursorEhh+0x68>
    6210:	11 96       	adiw	r26, 0x01	; 1
    6212:	9c 91       	ld	r25, X
    6214:	02 c0       	rjmp	.+4      	; 0x621a <_ZN3LCD9setCursorEhh+0x6c>
    6216:	15 96       	adiw	r26, 0x05	; 5
    6218:	9c 91       	ld	r25, X
    621a:	69 0f       	add	r22, r25
    621c:	60 68       	ori	r22, 0x80	; 128
    621e:	cf 01       	movw	r24, r30
    6220:	28 96       	adiw	r28, 0x08	; 8
    6222:	0f b6       	in	r0, 0x3f	; 63
    6224:	f8 94       	cli
    6226:	de bf       	out	0x3e, r29	; 62
    6228:	0f be       	out	0x3f, r0	; 63
    622a:	cd bf       	out	0x3d, r28	; 61
    622c:	df 91       	pop	r29
    622e:	cf 91       	pop	r28
    6230:	b0 cf       	rjmp	.-160    	; 0x6192 <_ZN3LCD7commandEh>

00006232 <_ZN3LCD9noDisplayEv>:
    6232:	fc 01       	movw	r30, r24
    6234:	65 81       	ldd	r22, Z+5	; 0x05
    6236:	6b 7f       	andi	r22, 0xFB	; 251
    6238:	65 83       	std	Z+5, r22	; 0x05
    623a:	68 60       	ori	r22, 0x08	; 8
    623c:	aa cf       	rjmp	.-172    	; 0x6192 <_ZN3LCD7commandEh>

0000623e <_ZN3LCD7displayEv>:
    623e:	fc 01       	movw	r30, r24
    6240:	65 81       	ldd	r22, Z+5	; 0x05
    6242:	26 2f       	mov	r18, r22
    6244:	24 60       	ori	r18, 0x04	; 4
    6246:	25 83       	std	Z+5, r18	; 0x05
    6248:	6c 60       	ori	r22, 0x0C	; 12
    624a:	a3 cf       	rjmp	.-186    	; 0x6192 <_ZN3LCD7commandEh>

0000624c <_ZN3LCD5beginEhhh>:
    624c:	cf 93       	push	r28
    624e:	df 93       	push	r29
    6250:	ec 01       	movw	r28, r24
    6252:	42 30       	cpi	r20, 0x02	; 2
    6254:	18 f0       	brcs	.+6      	; 0x625c <_ZN3LCD5beginEhhh+0x10>
    6256:	8c 81       	ldd	r24, Y+4	; 0x04
    6258:	88 60       	ori	r24, 0x08	; 8
    625a:	8c 83       	std	Y+4, r24	; 0x04
    625c:	4f 83       	std	Y+7, r20	; 0x07
    625e:	68 87       	std	Y+8, r22	; 0x08
    6260:	22 23       	and	r18, r18
    6262:	29 f0       	breq	.+10     	; 0x626e <_ZN3LCD5beginEhhh+0x22>
    6264:	41 30       	cpi	r20, 0x01	; 1
    6266:	19 f4       	brne	.+6      	; 0x626e <_ZN3LCD5beginEhhh+0x22>
    6268:	8c 81       	ldd	r24, Y+4	; 0x04
    626a:	84 60       	ori	r24, 0x04	; 4
    626c:	8c 83       	std	Y+4, r24	; 0x04
    626e:	64 e6       	ldi	r22, 0x64	; 100
    6270:	70 e0       	ldi	r23, 0x00	; 0
    6272:	80 e0       	ldi	r24, 0x00	; 0
    6274:	90 e0       	ldi	r25, 0x00	; 0
    6276:	0e 94 85 3a 	call	0x750a	; 0x750a <delay>
    627a:	6c 81       	ldd	r22, Y+4	; 0x04
    627c:	64 fd       	sbrc	r22, 4
    627e:	31 c0       	rjmp	.+98     	; 0x62e2 <_ZN3LCD5beginEhhh+0x96>
    6280:	e8 81       	ld	r30, Y
    6282:	f9 81       	ldd	r31, Y+1	; 0x01
    6284:	06 84       	ldd	r0, Z+14	; 0x0e
    6286:	f7 85       	ldd	r31, Z+15	; 0x0f
    6288:	e0 2d       	mov	r30, r0
    628a:	42 e0       	ldi	r20, 0x02	; 2
    628c:	63 e0       	ldi	r22, 0x03	; 3
    628e:	ce 01       	movw	r24, r28
    6290:	09 95       	icall
    6292:	84 e9       	ldi	r24, 0x94	; 148
    6294:	91 e1       	ldi	r25, 0x11	; 17
    6296:	0e 94 be 3a 	call	0x757c	; 0x757c <delayMicroseconds>
    629a:	e8 81       	ld	r30, Y
    629c:	f9 81       	ldd	r31, Y+1	; 0x01
    629e:	06 84       	ldd	r0, Z+14	; 0x0e
    62a0:	f7 85       	ldd	r31, Z+15	; 0x0f
    62a2:	e0 2d       	mov	r30, r0
    62a4:	42 e0       	ldi	r20, 0x02	; 2
    62a6:	63 e0       	ldi	r22, 0x03	; 3
    62a8:	ce 01       	movw	r24, r28
    62aa:	09 95       	icall
    62ac:	86 e9       	ldi	r24, 0x96	; 150
    62ae:	90 e0       	ldi	r25, 0x00	; 0
    62b0:	0e 94 be 3a 	call	0x757c	; 0x757c <delayMicroseconds>
    62b4:	e8 81       	ld	r30, Y
    62b6:	f9 81       	ldd	r31, Y+1	; 0x01
    62b8:	06 84       	ldd	r0, Z+14	; 0x0e
    62ba:	f7 85       	ldd	r31, Z+15	; 0x0f
    62bc:	e0 2d       	mov	r30, r0
    62be:	42 e0       	ldi	r20, 0x02	; 2
    62c0:	63 e0       	ldi	r22, 0x03	; 3
    62c2:	ce 01       	movw	r24, r28
    62c4:	09 95       	icall
    62c6:	86 e9       	ldi	r24, 0x96	; 150
    62c8:	90 e0       	ldi	r25, 0x00	; 0
    62ca:	0e 94 be 3a 	call	0x757c	; 0x757c <delayMicroseconds>
    62ce:	e8 81       	ld	r30, Y
    62d0:	f9 81       	ldd	r31, Y+1	; 0x01
    62d2:	06 84       	ldd	r0, Z+14	; 0x0e
    62d4:	f7 85       	ldd	r31, Z+15	; 0x0f
    62d6:	e0 2d       	mov	r30, r0
    62d8:	42 e0       	ldi	r20, 0x02	; 2
    62da:	62 e0       	ldi	r22, 0x02	; 2
    62dc:	ce 01       	movw	r24, r28
    62de:	09 95       	icall
    62e0:	13 c0       	rjmp	.+38     	; 0x6308 <_ZN3LCD5beginEhhh+0xbc>
    62e2:	60 62       	ori	r22, 0x20	; 32
    62e4:	ce 01       	movw	r24, r28
    62e6:	55 df       	rcall	.-342    	; 0x6192 <_ZN3LCD7commandEh>
    62e8:	84 e9       	ldi	r24, 0x94	; 148
    62ea:	91 e1       	ldi	r25, 0x11	; 17
    62ec:	0e 94 be 3a 	call	0x757c	; 0x757c <delayMicroseconds>
    62f0:	6c 81       	ldd	r22, Y+4	; 0x04
    62f2:	60 62       	ori	r22, 0x20	; 32
    62f4:	ce 01       	movw	r24, r28
    62f6:	4d df       	rcall	.-358    	; 0x6192 <_ZN3LCD7commandEh>
    62f8:	86 e9       	ldi	r24, 0x96	; 150
    62fa:	90 e0       	ldi	r25, 0x00	; 0
    62fc:	0e 94 be 3a 	call	0x757c	; 0x757c <delayMicroseconds>
    6300:	6c 81       	ldd	r22, Y+4	; 0x04
    6302:	60 62       	ori	r22, 0x20	; 32
    6304:	ce 01       	movw	r24, r28
    6306:	45 df       	rcall	.-374    	; 0x6192 <_ZN3LCD7commandEh>
    6308:	86 e9       	ldi	r24, 0x96	; 150
    630a:	90 e0       	ldi	r25, 0x00	; 0
    630c:	0e 94 be 3a 	call	0x757c	; 0x757c <delayMicroseconds>
    6310:	6c 81       	ldd	r22, Y+4	; 0x04
    6312:	60 62       	ori	r22, 0x20	; 32
    6314:	ce 01       	movw	r24, r28
    6316:	3d df       	rcall	.-390    	; 0x6192 <_ZN3LCD7commandEh>
    6318:	8c e3       	ldi	r24, 0x3C	; 60
    631a:	90 e0       	ldi	r25, 0x00	; 0
    631c:	0e 94 be 3a 	call	0x757c	; 0x757c <delayMicroseconds>
    6320:	84 e0       	ldi	r24, 0x04	; 4
    6322:	8d 83       	std	Y+5, r24	; 0x05
    6324:	ce 01       	movw	r24, r28
    6326:	8b df       	rcall	.-234    	; 0x623e <_ZN3LCD7displayEv>
    6328:	ce 01       	movw	r24, r28
    632a:	3b df       	rcall	.-394    	; 0x61a2 <_ZN3LCD5clearEv>
    632c:	82 e0       	ldi	r24, 0x02	; 2
    632e:	8e 83       	std	Y+6, r24	; 0x06
    6330:	66 e0       	ldi	r22, 0x06	; 6
    6332:	ce 01       	movw	r24, r28
    6334:	2e df       	rcall	.-420    	; 0x6192 <_ZN3LCD7commandEh>
    6336:	ce 01       	movw	r24, r28
    6338:	df 91       	pop	r29
    633a:	cf 91       	pop	r28
    633c:	1a cf       	rjmp	.-460    	; 0x6172 <_ZN3LCD9backlightEv>

0000633e <_ZN3LCD10createCharEhPh>:
}

// Write to CGRAM of new characters
void LCD::createChar(uint8_t location, uint8_t charmap[]) 
{
    633e:	ef 92       	push	r14
    6340:	ff 92       	push	r15
    6342:	0f 93       	push	r16
    6344:	1f 93       	push	r17
    6346:	cf 93       	push	r28
    6348:	df 93       	push	r29
    634a:	8c 01       	movw	r16, r24
    634c:	7a 01       	movw	r14, r20
   location &= 0x7;            // we only have 8 locations 0-7
   
   command(LCD_SETCGRAMADDR | (location << 3));
    634e:	67 70       	andi	r22, 0x07	; 7
    6350:	88 e0       	ldi	r24, 0x08	; 8
    6352:	68 9f       	mul	r22, r24
    6354:	b0 01       	movw	r22, r0
    6356:	11 24       	eor	r1, r1
    6358:	60 64       	ori	r22, 0x40	; 64
    635a:	c8 01       	movw	r24, r16
    635c:	1a df       	rcall	.-460    	; 0x6192 <_ZN3LCD7commandEh>
   delayMicroseconds(30);
    635e:	8e e1       	ldi	r24, 0x1E	; 30
    6360:	90 e0       	ldi	r25, 0x00	; 0
    6362:	0e 94 be 3a 	call	0x757c	; 0x757c <delayMicroseconds>
    6366:	e7 01       	movw	r28, r14
    6368:	a8 e0       	ldi	r26, 0x08	; 8
    636a:	ea 0e       	add	r14, r26
    636c:	f1 1c       	adc	r15, r1
   
   for (uint8_t i = 0; i < 8; i++)
   {
      write(charmap[i]);      // call the virtual write method
    636e:	69 91       	ld	r22, Y+
    6370:	d8 01       	movw	r26, r16
    6372:	ed 91       	ld	r30, X+
    6374:	fc 91       	ld	r31, X
    6376:	01 90       	ld	r0, Z+
    6378:	f0 81       	ld	r31, Z
    637a:	e0 2d       	mov	r30, r0
    637c:	c8 01       	movw	r24, r16
    637e:	09 95       	icall
      delayMicroseconds(40);
    6380:	88 e2       	ldi	r24, 0x28	; 40
    6382:	90 e0       	ldi	r25, 0x00	; 0
    6384:	0e 94 be 3a 	call	0x757c	; 0x757c <delayMicroseconds>
   location &= 0x7;            // we only have 8 locations 0-7
   
   command(LCD_SETCGRAMADDR | (location << 3));
   delayMicroseconds(30);
   
   for (uint8_t i = 0; i < 8; i++)
    6388:	ce 15       	cp	r28, r14
    638a:	df 05       	cpc	r29, r15
    638c:	81 f7       	brne	.-32     	; 0x636e <_ZN3LCD10createCharEhPh+0x30>
   {
      write(charmap[i]);      // call the virtual write method
      delayMicroseconds(40);
   }
}
    638e:	df 91       	pop	r29
    6390:	cf 91       	pop	r28
    6392:	1f 91       	pop	r17
    6394:	0f 91       	pop	r16
    6396:	ff 90       	pop	r15
    6398:	ef 90       	pop	r14
    639a:	08 95       	ret

0000639c <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol>:
LiquidCrystal_I2C::LiquidCrystal_I2C(uint8_t lcd_Addr, uint8_t En, uint8_t Rw,
                                     uint8_t Rs, uint8_t d4, uint8_t d5,
                                     uint8_t d6, uint8_t d7 )
{
   config(lcd_Addr, En, Rw, Rs, d4, d5, d6, d7);
}
    639c:	21 e0       	ldi	r18, 0x01	; 1
    639e:	01 c0       	rjmp	.+2      	; 0x63a2 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol+0x6>
    63a0:	22 0f       	add	r18, r18
    63a2:	6a 95       	dec	r22
    63a4:	ea f7       	brpl	.-6      	; 0x63a0 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol+0x4>
    63a6:	dc 01       	movw	r26, r24
    63a8:	1b 96       	adiw	r26, 0x0b	; 11
    63aa:	2c 93       	st	X, r18
    63ac:	1b 97       	sbiw	r26, 0x0b	; 11
    63ae:	19 96       	adiw	r26, 0x09	; 9
    63b0:	4c 93       	st	X, r20
    63b2:	19 97       	sbiw	r26, 0x09	; 9
    63b4:	ed 91       	ld	r30, X+
    63b6:	fc 91       	ld	r31, X
    63b8:	04 84       	ldd	r0, Z+12	; 0x0c
    63ba:	f5 85       	ldd	r31, Z+13	; 0x0d
    63bc:	e0 2d       	mov	r30, r0
    63be:	60 e0       	ldi	r22, 0x00	; 0
    63c0:	09 94       	ijmp

000063c2 <_ZN17LiquidCrystal_I2C12setBacklightEh>:
    63c2:	fc 01       	movw	r30, r24
    63c4:	83 85       	ldd	r24, Z+11	; 0x0b
    63c6:	88 23       	and	r24, r24
    63c8:	89 f0       	breq	.+34     	; 0x63ec <_ZN17LiquidCrystal_I2C12setBacklightEh+0x2a>
    63ca:	91 85       	ldd	r25, Z+9	; 0x09
    63cc:	91 11       	cpse	r25, r1
    63ce:	03 c0       	rjmp	.+6      	; 0x63d6 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x14>
    63d0:	61 11       	cpse	r22, r1
    63d2:	05 c0       	rjmp	.+10     	; 0x63de <_ZN17LiquidCrystal_I2C12setBacklightEh+0x1c>
    63d4:	06 c0       	rjmp	.+12     	; 0x63e2 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    63d6:	91 30       	cpi	r25, 0x01	; 1
    63d8:	21 f4       	brne	.+8      	; 0x63e2 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    63da:	61 11       	cpse	r22, r1
    63dc:	02 c0       	rjmp	.+4      	; 0x63e2 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    63de:	84 87       	std	Z+12, r24	; 0x0c
    63e0:	01 c0       	rjmp	.+2      	; 0x63e4 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x22>
    63e2:	14 86       	std	Z+12, r1	; 0x0c
    63e4:	64 85       	ldd	r22, Z+12	; 0x0c
    63e6:	cf 01       	movw	r24, r30
    63e8:	0d 96       	adiw	r24, 0x0d	; 13
    63ea:	8a ce       	rjmp	.-748    	; 0x6100 <_ZN5I2CIO5writeEh>
    63ec:	08 95       	ret

000063ee <_ZN17LiquidCrystal_I2C4initEv>:
    63ee:	0f 93       	push	r16
    63f0:	1f 93       	push	r17
    63f2:	cf 93       	push	r28
    63f4:	df 93       	push	r29
    63f6:	8c 01       	movw	r16, r24
    63f8:	ec 01       	movw	r28, r24
    63fa:	2d 96       	adiw	r28, 0x0d	; 13
    63fc:	fc 01       	movw	r30, r24
    63fe:	62 85       	ldd	r22, Z+10	; 0x0a
    6400:	ce 01       	movw	r24, r28
    6402:	68 de       	rcall	.-816    	; 0x60d4 <_ZN5I2CIO5beginEh>
    6404:	01 97       	sbiw	r24, 0x01	; 1
    6406:	59 f4       	brne	.+22     	; 0x641e <_ZN17LiquidCrystal_I2C4initEv+0x30>
    6408:	61 e0       	ldi	r22, 0x01	; 1
    640a:	ce 01       	movw	r24, r28
    640c:	4d de       	rcall	.-870    	; 0x60a8 <_ZN5I2CIO8portModeEh>
    640e:	f8 01       	movw	r30, r16
    6410:	14 82       	std	Z+4, r1	; 0x04
    6412:	60 e0       	ldi	r22, 0x00	; 0
    6414:	ce 01       	movw	r24, r28
    6416:	74 de       	rcall	.-792    	; 0x6100 <_ZN5I2CIO5writeEh>
    6418:	81 e0       	ldi	r24, 0x01	; 1
    641a:	90 e0       	ldi	r25, 0x00	; 0
    641c:	02 c0       	rjmp	.+4      	; 0x6422 <_ZN17LiquidCrystal_I2C4initEv+0x34>
    641e:	80 e0       	ldi	r24, 0x00	; 0
    6420:	90 e0       	ldi	r25, 0x00	; 0
    6422:	df 91       	pop	r29
    6424:	cf 91       	pop	r28
    6426:	1f 91       	pop	r17
    6428:	0f 91       	pop	r16
    642a:	08 95       	ret

0000642c <_ZN17LiquidCrystal_I2C6configEhhhhhhhh>:
    642c:	8f 92       	push	r8
    642e:	af 92       	push	r10
    6430:	cf 92       	push	r12
    6432:	ef 92       	push	r14
    6434:	0f 93       	push	r16
    6436:	cf 93       	push	r28
    6438:	df 93       	push	r29
    643a:	cd b7       	in	r28, 0x3d	; 61
    643c:	de b7       	in	r29, 0x3e	; 62
    643e:	fc 01       	movw	r30, r24
    6440:	62 87       	std	Z+10, r22	; 0x0a
    6442:	13 86       	std	Z+11, r1	; 0x0b
    6444:	14 86       	std	Z+12, r1	; 0x0c
    6446:	11 86       	std	Z+9, r1	; 0x09
    6448:	81 e0       	ldi	r24, 0x01	; 1
    644a:	98 2f       	mov	r25, r24
    644c:	01 c0       	rjmp	.+2      	; 0x6450 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x24>
    644e:	99 0f       	add	r25, r25
    6450:	4a 95       	dec	r20
    6452:	ea f7       	brpl	.-6      	; 0x644e <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x22>
    6454:	91 8b       	std	Z+17, r25	; 0x11
    6456:	98 2f       	mov	r25, r24
    6458:	01 c0       	rjmp	.+2      	; 0x645c <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x30>
    645a:	99 0f       	add	r25, r25
    645c:	2a 95       	dec	r18
    645e:	ea f7       	brpl	.-6      	; 0x645a <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x2e>
    6460:	92 8b       	std	Z+18, r25	; 0x12
    6462:	98 2f       	mov	r25, r24
    6464:	01 c0       	rjmp	.+2      	; 0x6468 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x3c>
    6466:	99 0f       	add	r25, r25
    6468:	0a 95       	dec	r16
    646a:	ea f7       	brpl	.-6      	; 0x6466 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x3a>
    646c:	93 8b       	std	Z+19, r25	; 0x13
    646e:	98 2f       	mov	r25, r24
    6470:	01 c0       	rjmp	.+2      	; 0x6474 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x48>
    6472:	99 0f       	add	r25, r25
    6474:	ea 94       	dec	r14
    6476:	ea f7       	brpl	.-6      	; 0x6472 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x46>
    6478:	94 8b       	std	Z+20, r25	; 0x14
    647a:	98 2f       	mov	r25, r24
    647c:	01 c0       	rjmp	.+2      	; 0x6480 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x54>
    647e:	99 0f       	add	r25, r25
    6480:	ca 94       	dec	r12
    6482:	ea f7       	brpl	.-6      	; 0x647e <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x52>
    6484:	95 8b       	std	Z+21, r25	; 0x15
    6486:	98 2f       	mov	r25, r24
    6488:	01 c0       	rjmp	.+2      	; 0x648c <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x60>
    648a:	99 0f       	add	r25, r25
    648c:	aa 94       	dec	r10
    648e:	ea f7       	brpl	.-6      	; 0x648a <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x5e>
    6490:	96 8b       	std	Z+22, r25	; 0x16
    6492:	01 c0       	rjmp	.+2      	; 0x6496 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x6a>
    6494:	88 0f       	add	r24, r24
    6496:	8a 94       	dec	r8
    6498:	ea f7       	brpl	.-6      	; 0x6494 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x68>
    649a:	87 8b       	std	Z+23, r24	; 0x17
    649c:	df 91       	pop	r29
    649e:	cf 91       	pop	r28
    64a0:	0f 91       	pop	r16
    64a2:	ef 90       	pop	r14
    64a4:	cf 90       	pop	r12
    64a6:	af 90       	pop	r10
    64a8:	8f 90       	pop	r8
    64aa:	08 95       	ret

000064ac <_ZN17LiquidCrystal_I2CC1Ehhhhhhhhh13t_backlighPol>:

LiquidCrystal_I2C::LiquidCrystal_I2C(uint8_t lcd_Addr, uint8_t En, uint8_t Rw,
    64ac:	6f 92       	push	r6
    64ae:	7f 92       	push	r7
    64b0:	8f 92       	push	r8
    64b2:	9f 92       	push	r9
    64b4:	af 92       	push	r10
    64b6:	bf 92       	push	r11
    64b8:	cf 92       	push	r12
    64ba:	df 92       	push	r13
    64bc:	ef 92       	push	r14
    64be:	ff 92       	push	r15
    64c0:	0f 93       	push	r16
    64c2:	1f 93       	push	r17
    64c4:	cf 93       	push	r28
    64c6:	df 93       	push	r29
    64c8:	cd b7       	in	r28, 0x3d	; 61
    64ca:	de b7       	in	r29, 0x3e	; 62
    64cc:	3c 01       	movw	r6, r24
    64ce:	d6 2e       	mov	r13, r22
    64d0:	b4 2e       	mov	r11, r20
    64d2:	92 2e       	mov	r9, r18
    64d4:	19 89       	ldd	r17, Y+17	; 0x11
    64d6:	fa 88       	ldd	r15, Y+18	; 0x12
                                     uint8_t Rs, uint8_t d4, uint8_t d5,
                                     uint8_t d6, uint8_t d7, uint8_t backlighPin, 
                                     t_backlighPol pol = POSITIVE )
    64d8:	44 de       	rcall	.-888    	; 0x6162 <_ZN3LCDC1Ev>
    64da:	8c e4       	ldi	r24, 0x4C	; 76
    64dc:	9a e0       	ldi	r25, 0x0A	; 10
    64de:	f3 01       	movw	r30, r6
    64e0:	91 83       	std	Z+1, r25	; 0x01
    64e2:	80 83       	st	Z, r24
    64e4:	c3 01       	movw	r24, r6
    64e6:	0d 96       	adiw	r24, 0x0d	; 13
    64e8:	d8 dd       	rcall	.-1104   	; 0x609a <_ZN5I2CIOC1Ev>
{
   config(lcd_Addr, En, Rw, Rs, d4, d5, d6, d7);
    64ea:	29 2d       	mov	r18, r9
    64ec:	4b 2d       	mov	r20, r11
    64ee:	6d 2d       	mov	r22, r13
    64f0:	c3 01       	movw	r24, r6
    64f2:	9c df       	rcall	.-200    	; 0x642c <_ZN17LiquidCrystal_I2C6configEhhhhhhhh>
   setBacklightPin(backlighPin, pol);
    64f4:	4f 2d       	mov	r20, r15
    64f6:	61 2f       	mov	r22, r17
    64f8:	c3 01       	movw	r24, r6
}
    64fa:	df 91       	pop	r29
    64fc:	cf 91       	pop	r28
    64fe:	1f 91       	pop	r17
    6500:	0f 91       	pop	r16
    6502:	ff 90       	pop	r15
    6504:	ef 90       	pop	r14
    6506:	df 90       	pop	r13
    6508:	cf 90       	pop	r12
    650a:	bf 90       	pop	r11
    650c:	af 90       	pop	r10
    650e:	9f 90       	pop	r9
    6510:	8f 90       	pop	r8
    6512:	7f 90       	pop	r7
                                     uint8_t Rs, uint8_t d4, uint8_t d5,
                                     uint8_t d6, uint8_t d7, uint8_t backlighPin, 
                                     t_backlighPol pol = POSITIVE )
{
   config(lcd_Addr, En, Rw, Rs, d4, d5, d6, d7);
   setBacklightPin(backlighPin, pol);
    6514:	6f 90       	pop	r6
    6516:	42 cf       	rjmp	.-380    	; 0x639c <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol>

00006518 <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
}

//
// pulseEnable
void LiquidCrystal_I2C::pulseEnable (uint8_t data)
{
    6518:	ef 92       	push	r14
    651a:	ff 92       	push	r15
    651c:	0f 93       	push	r16
    651e:	1f 93       	push	r17
    6520:	cf 93       	push	r28
    6522:	8c 01       	movw	r16, r24
    6524:	c6 2f       	mov	r28, r22
   _i2cio.write (data | _En);   // En HIGH
    6526:	7c 01       	movw	r14, r24
    6528:	8d e0       	ldi	r24, 0x0D	; 13
    652a:	e8 0e       	add	r14, r24
    652c:	f1 1c       	adc	r15, r1
    652e:	f8 01       	movw	r30, r16
    6530:	61 89       	ldd	r22, Z+17	; 0x11
    6532:	6c 2b       	or	r22, r28
    6534:	c7 01       	movw	r24, r14
    6536:	e4 dd       	rcall	.-1080   	; 0x6100 <_ZN5I2CIO5writeEh>
   _i2cio.write (data & ~_En);  // En LOW
    6538:	f8 01       	movw	r30, r16
    653a:	61 89       	ldd	r22, Z+17	; 0x11
    653c:	60 95       	com	r22
    653e:	6c 23       	and	r22, r28
    6540:	c7 01       	movw	r24, r14
    6542:	cf 91       	pop	r28
    6544:	1f 91       	pop	r17
    6546:	0f 91       	pop	r16
    6548:	ff 90       	pop	r15
//
// pulseEnable
void LiquidCrystal_I2C::pulseEnable (uint8_t data)
{
   _i2cio.write (data | _En);   // En HIGH
   _i2cio.write (data & ~_En);  // En LOW
    654a:	ef 90       	pop	r14
    654c:	d9 cd       	rjmp	.-1102   	; 0x6100 <_ZN5I2CIO5writeEh>

0000654e <_ZN17LiquidCrystal_I2C10write4bitsEhh>:
}

//
// write4bits
void LiquidCrystal_I2C::write4bits ( uint8_t value, uint8_t mode ) 
{
    654e:	fc 01       	movw	r30, r24
    6550:	96 2f       	mov	r25, r22
    6552:	df 01       	movw	r26, r30
    6554:	84 e0       	ldi	r24, 0x04	; 4
   uint8_t pinMapValue = 0;
    6556:	60 e0       	ldi	r22, 0x00	; 0
   
   // Map the value to LCD pin mapping
   // --------------------------------
   for ( uint8_t i = 0; i < 4; i++ )
   {
      if ( ( value & 0x1 ) == 1 )
    6558:	90 ff       	sbrs	r25, 0
    655a:	04 c0       	rjmp	.+8      	; 0x6564 <_ZN17LiquidCrystal_I2C10write4bitsEhh+0x16>
      {
         pinMapValue |= _data_pins[i];
    655c:	54 96       	adiw	r26, 0x14	; 20
    655e:	2c 91       	ld	r18, X
    6560:	54 97       	sbiw	r26, 0x14	; 20
    6562:	62 2b       	or	r22, r18
      }
      value = ( value >> 1 );
    6564:	96 95       	lsr	r25
    6566:	81 50       	subi	r24, 0x01	; 1
    6568:	11 96       	adiw	r26, 0x01	; 1
{
   uint8_t pinMapValue = 0;
   
   // Map the value to LCD pin mapping
   // --------------------------------
   for ( uint8_t i = 0; i < 4; i++ )
    656a:	81 11       	cpse	r24, r1
    656c:	f5 cf       	rjmp	.-22     	; 0x6558 <_ZN17LiquidCrystal_I2C10write4bitsEhh+0xa>
      value = ( value >> 1 );
   }
   
   // Is it a command or data
   // -----------------------
   if ( mode == DATA )
    656e:	41 30       	cpi	r20, 0x01	; 1
    6570:	09 f4       	brne	.+2      	; 0x6574 <_ZN17LiquidCrystal_I2C10write4bitsEhh+0x26>
   {
      mode = _Rs;
    6572:	43 89       	ldd	r20, Z+19	; 0x13
    6574:	94 85       	ldd	r25, Z+12	; 0x0c
    6576:	69 2b       	or	r22, r25
   }
   
   pinMapValue |= mode | _backlightStsMask;
   pulseEnable ( pinMapValue );
    6578:	64 2b       	or	r22, r20
    657a:	cf 01       	movw	r24, r30
    657c:	cd cf       	rjmp	.-102    	; 0x6518 <_ZN17LiquidCrystal_I2C11pulseEnableEh>

0000657e <_ZN17LiquidCrystal_I2C4sendEhh>:
//----------------------------------------------------------------------------

//
// send - write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) 
{
    657e:	0f 93       	push	r16
    6580:	1f 93       	push	r17
    6582:	cf 93       	push	r28
    6584:	df 93       	push	r29
    6586:	06 2f       	mov	r16, r22
    6588:	0f 70       	andi	r16, 0x0F	; 15
   // No need to use the delay routines since the time taken to write takes
   // longer that what is needed both for toggling and enable pin an to execute
   // the command.
   
   if ( mode == FOUR_BITS )
    658a:	42 30       	cpi	r20, 0x02	; 2
    658c:	19 f4       	brne	.+6      	; 0x6594 <_ZN17LiquidCrystal_I2C4sendEhh+0x16>
   {
      write4bits( (value & 0x0F), COMMAND );
    658e:	40 e0       	ldi	r20, 0x00	; 0
    6590:	60 2f       	mov	r22, r16
    6592:	0d c0       	rjmp	.+26     	; 0x65ae <_ZN17LiquidCrystal_I2C4sendEhh+0x30>
    6594:	14 2f       	mov	r17, r20
    6596:	ec 01       	movw	r28, r24
   }
   else 
   {
      write4bits( (value >> 4), mode );
    6598:	70 e0       	ldi	r23, 0x00	; 0
    659a:	84 e0       	ldi	r24, 0x04	; 4
    659c:	75 95       	asr	r23
    659e:	67 95       	ror	r22
    65a0:	8a 95       	dec	r24
    65a2:	e1 f7       	brne	.-8      	; 0x659c <_ZN17LiquidCrystal_I2C4sendEhh+0x1e>
    65a4:	ce 01       	movw	r24, r28
    65a6:	d3 df       	rcall	.-90     	; 0x654e <_ZN17LiquidCrystal_I2C10write4bitsEhh>
      write4bits( (value & 0x0F), mode);
    65a8:	41 2f       	mov	r20, r17
    65aa:	60 2f       	mov	r22, r16
    65ac:	ce 01       	movw	r24, r28
   }
}
    65ae:	df 91       	pop	r29
    65b0:	cf 91       	pop	r28
    65b2:	1f 91       	pop	r17
      write4bits( (value & 0x0F), COMMAND );
   }
   else 
   {
      write4bits( (value >> 4), mode );
      write4bits( (value & 0x0F), mode);
    65b4:	0f 91       	pop	r16
    65b6:	cb cf       	rjmp	.-106    	; 0x654e <_ZN17LiquidCrystal_I2C10write4bitsEhh>

000065b8 <_ZN17LiquidCrystal_I2C5beginEhhh>:
// ---------------------------------------------------------------------------

//
// begin
void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) 
{
    65b8:	ff 92       	push	r15
    65ba:	0f 93       	push	r16
    65bc:	1f 93       	push	r17
    65be:	cf 93       	push	r28
    65c0:	df 93       	push	r29
    65c2:	ec 01       	movw	r28, r24
    65c4:	16 2f       	mov	r17, r22
    65c6:	04 2f       	mov	r16, r20
    65c8:	f2 2e       	mov	r15, r18
   
   init();     // Initialise the I2C expander interface
    65ca:	11 df       	rcall	.-478    	; 0x63ee <_ZN17LiquidCrystal_I2C4initEv>
   LCD::begin ( cols, lines, dotsize );   
    65cc:	2f 2d       	mov	r18, r15
    65ce:	40 2f       	mov	r20, r16
    65d0:	61 2f       	mov	r22, r17
    65d2:	ce 01       	movw	r24, r28
}
    65d4:	df 91       	pop	r29
    65d6:	cf 91       	pop	r28
    65d8:	1f 91       	pop	r17
    65da:	0f 91       	pop	r16
// begin
void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) 
{
   
   init();     // Initialise the I2C expander interface
   LCD::begin ( cols, lines, dotsize );   
    65dc:	ff 90       	pop	r15
    65de:	36 ce       	rjmp	.-916    	; 0x624c <_ZN3LCD5beginEhhh>

000065e0 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    65e0:	cf 93       	push	r28
  uint8_t sreg = SREG;
    65e2:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    65e4:	f8 94       	cli
  if (!initialized) {
    65e6:	80 91 69 0c 	lds	r24, 0x0C69	; 0x800c69 <_ZN8SPIClass11initializedE>
    65ea:	81 11       	cpse	r24, r1
    65ec:	27 c0       	rjmp	.+78     	; 0x663c <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    65ee:	ee e7       	ldi	r30, 0x7E	; 126
    65f0:	f2 e0       	ldi	r31, 0x02	; 2
    65f2:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    65f4:	ee e5       	ldi	r30, 0x5E	; 94
    65f6:	f2 e0       	ldi	r31, 0x02	; 2
    65f8:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    65fa:	e8 2f       	mov	r30, r24
    65fc:	f0 e0       	ldi	r31, 0x00	; 0
    65fe:	ee 0f       	add	r30, r30
    6600:	ff 1f       	adc	r31, r31
    6602:	e8 55       	subi	r30, 0x58	; 88
    6604:	fd 4f       	sbci	r31, 0xFD	; 253
    6606:	a5 91       	lpm	r26, Z+
    6608:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    660a:	ec 91       	ld	r30, X
    660c:	e9 23       	and	r30, r25
    660e:	21 f4       	brne	.+8      	; 0x6618 <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    6610:	61 e0       	ldi	r22, 0x01	; 1
    6612:	8a e0       	ldi	r24, 0x0A	; 10
    6614:	0e 94 69 3b 	call	0x76d2	; 0x76d2 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    6618:	61 e0       	ldi	r22, 0x01	; 1
    661a:	8a e0       	ldi	r24, 0x0A	; 10
    661c:	0e 94 2d 3b 	call	0x765a	; 0x765a <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    6620:	8c b5       	in	r24, 0x2c	; 44
    6622:	80 61       	ori	r24, 0x10	; 16
    6624:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    6626:	8c b5       	in	r24, 0x2c	; 44
    6628:	80 64       	ori	r24, 0x40	; 64
    662a:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    662c:	61 e0       	ldi	r22, 0x01	; 1
    662e:	8d e0       	ldi	r24, 0x0D	; 13
    6630:	0e 94 2d 3b 	call	0x765a	; 0x765a <pinMode>
    pinMode(MOSI, OUTPUT);
    6634:	61 e0       	ldi	r22, 0x01	; 1
    6636:	8b e0       	ldi	r24, 0x0B	; 11
    6638:	0e 94 2d 3b 	call	0x765a	; 0x765a <pinMode>
  }
  initialized++; // reference count
    663c:	80 91 69 0c 	lds	r24, 0x0C69	; 0x800c69 <_ZN8SPIClass11initializedE>
    6640:	8f 5f       	subi	r24, 0xFF	; 255
    6642:	80 93 69 0c 	sts	0x0C69, r24	; 0x800c69 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    6646:	cf bf       	out	0x3f, r28	; 63
}
    6648:	cf 91       	pop	r28
    664a:	08 95       	ret

0000664c <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    664c:	10 92 d7 0c 	sts	0x0CD7, r1	; 0x800cd7 <twi_state>
    6650:	81 e0       	ldi	r24, 0x01	; 1
    6652:	80 93 d5 0c 	sts	0x0CD5, r24	; 0x800cd5 <twi_sendStop>
    6656:	10 92 d4 0c 	sts	0x0CD4, r1	; 0x800cd4 <twi_inRepStart>
    665a:	61 e0       	ldi	r22, 0x01	; 1
    665c:	8d e1       	ldi	r24, 0x1D	; 29
    665e:	0e 94 69 3b 	call	0x76d2	; 0x76d2 <digitalWrite>
    6662:	61 e0       	ldi	r22, 0x01	; 1
    6664:	8c e1       	ldi	r24, 0x1C	; 28
    6666:	0e 94 69 3b 	call	0x76d2	; 0x76d2 <digitalWrite>
    666a:	e9 eb       	ldi	r30, 0xB9	; 185
    666c:	f0 e0       	ldi	r31, 0x00	; 0
    666e:	80 81       	ld	r24, Z
    6670:	8e 7f       	andi	r24, 0xFE	; 254
    6672:	80 83       	st	Z, r24
    6674:	80 81       	ld	r24, Z
    6676:	8d 7f       	andi	r24, 0xFD	; 253
    6678:	80 83       	st	Z, r24
    667a:	88 e4       	ldi	r24, 0x48	; 72
    667c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    6680:	85 e4       	ldi	r24, 0x45	; 69
    6682:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    6686:	08 95       	ret

00006688 <twi_disable>:
    6688:	ec eb       	ldi	r30, 0xBC	; 188
    668a:	f0 e0       	ldi	r31, 0x00	; 0
    668c:	80 81       	ld	r24, Z
    668e:	8a 7b       	andi	r24, 0xBA	; 186
    6690:	80 83       	st	Z, r24
    6692:	60 e0       	ldi	r22, 0x00	; 0
    6694:	8d e1       	ldi	r24, 0x1D	; 29
    6696:	0e 94 69 3b 	call	0x76d2	; 0x76d2 <digitalWrite>
    669a:	60 e0       	ldi	r22, 0x00	; 0
    669c:	8c e1       	ldi	r24, 0x1C	; 28
    669e:	0c 94 69 3b 	jmp	0x76d2	; 0x76d2 <digitalWrite>

000066a2 <twi_setFrequency>:
    66a2:	9b 01       	movw	r18, r22
    66a4:	ac 01       	movw	r20, r24
    66a6:	60 e0       	ldi	r22, 0x00	; 0
    66a8:	74 e2       	ldi	r23, 0x24	; 36
    66aa:	84 ef       	ldi	r24, 0xF4	; 244
    66ac:	90 e0       	ldi	r25, 0x00	; 0
    66ae:	0e 94 1c 40 	call	0x8038	; 0x8038 <__udivmodsi4>
    66b2:	da 01       	movw	r26, r20
    66b4:	c9 01       	movw	r24, r18
    66b6:	40 97       	sbiw	r24, 0x10	; 16
    66b8:	a1 09       	sbc	r26, r1
    66ba:	b1 09       	sbc	r27, r1
    66bc:	b6 95       	lsr	r27
    66be:	a7 95       	ror	r26
    66c0:	97 95       	ror	r25
    66c2:	87 95       	ror	r24
    66c4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    66c8:	08 95       	ret

000066ca <twi_readFrom>:
    66ca:	41 32       	cpi	r20, 0x21	; 33
    66cc:	08 f0       	brcs	.+2      	; 0x66d0 <twi_readFrom+0x6>
    66ce:	43 c0       	rjmp	.+134    	; 0x6756 <twi_readFrom+0x8c>
    66d0:	90 91 d7 0c 	lds	r25, 0x0CD7	; 0x800cd7 <twi_state>
    66d4:	91 11       	cpse	r25, r1
    66d6:	fc cf       	rjmp	.-8      	; 0x66d0 <twi_readFrom+0x6>
    66d8:	91 e0       	ldi	r25, 0x01	; 1
    66da:	90 93 d7 0c 	sts	0x0CD7, r25	; 0x800cd7 <twi_state>
    66de:	20 93 d5 0c 	sts	0x0CD5, r18	; 0x800cd5 <twi_sendStop>
    66e2:	2f ef       	ldi	r18, 0xFF	; 255
    66e4:	20 93 6a 0c 	sts	0x0C6A, r18	; 0x800c6a <twi_error>
    66e8:	10 92 af 0c 	sts	0x0CAF, r1	; 0x800caf <twi_masterBufferIndex>
    66ec:	24 0f       	add	r18, r20
    66ee:	20 93 ae 0c 	sts	0x0CAE, r18	; 0x800cae <twi_masterBufferLength>
    66f2:	90 93 d6 0c 	sts	0x0CD6, r25	; 0x800cd6 <twi_slarw>
    66f6:	90 91 d6 0c 	lds	r25, 0x0CD6	; 0x800cd6 <twi_slarw>
    66fa:	88 0f       	add	r24, r24
    66fc:	89 2b       	or	r24, r25
    66fe:	80 93 d6 0c 	sts	0x0CD6, r24	; 0x800cd6 <twi_slarw>
    6702:	80 91 d4 0c 	lds	r24, 0x0CD4	; 0x800cd4 <twi_inRepStart>
    6706:	81 30       	cpi	r24, 0x01	; 1
    6708:	61 f4       	brne	.+24     	; 0x6722 <twi_readFrom+0x58>
    670a:	10 92 d4 0c 	sts	0x0CD4, r1	; 0x800cd4 <twi_inRepStart>
    670e:	80 91 d6 0c 	lds	r24, 0x0CD6	; 0x800cd6 <twi_slarw>
    6712:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    6716:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    671a:	83 fd       	sbrc	r24, 3
    671c:	f8 cf       	rjmp	.-16     	; 0x670e <twi_readFrom+0x44>
    671e:	85 ec       	ldi	r24, 0xC5	; 197
    6720:	01 c0       	rjmp	.+2      	; 0x6724 <twi_readFrom+0x5a>
    6722:	85 ee       	ldi	r24, 0xE5	; 229
    6724:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    6728:	80 91 d7 0c 	lds	r24, 0x0CD7	; 0x800cd7 <twi_state>
    672c:	81 30       	cpi	r24, 0x01	; 1
    672e:	e1 f3       	breq	.-8      	; 0x6728 <twi_readFrom+0x5e>
    6730:	80 91 af 0c 	lds	r24, 0x0CAF	; 0x800caf <twi_masterBufferIndex>
    6734:	84 17       	cp	r24, r20
    6736:	10 f4       	brcc	.+4      	; 0x673c <twi_readFrom+0x72>
    6738:	40 91 af 0c 	lds	r20, 0x0CAF	; 0x800caf <twi_masterBufferIndex>
    673c:	a0 eb       	ldi	r26, 0xB0	; 176
    673e:	bc e0       	ldi	r27, 0x0C	; 12
    6740:	96 2f       	mov	r25, r22
    6742:	fb 01       	movw	r30, r22
    6744:	8e 2f       	mov	r24, r30
    6746:	89 1b       	sub	r24, r25
    6748:	84 17       	cp	r24, r20
    674a:	18 f4       	brcc	.+6      	; 0x6752 <twi_readFrom+0x88>
    674c:	8d 91       	ld	r24, X+
    674e:	81 93       	st	Z+, r24
    6750:	f9 cf       	rjmp	.-14     	; 0x6744 <twi_readFrom+0x7a>
    6752:	84 2f       	mov	r24, r20
    6754:	08 95       	ret
    6756:	80 e0       	ldi	r24, 0x00	; 0
    6758:	08 95       	ret

0000675a <twi_writeTo>:
    675a:	0f 93       	push	r16
    675c:	41 32       	cpi	r20, 0x21	; 33
    675e:	08 f0       	brcs	.+2      	; 0x6762 <twi_writeTo+0x8>
    6760:	4a c0       	rjmp	.+148    	; 0x67f6 <twi_writeTo+0x9c>
    6762:	90 91 d7 0c 	lds	r25, 0x0CD7	; 0x800cd7 <twi_state>
    6766:	91 11       	cpse	r25, r1
    6768:	fc cf       	rjmp	.-8      	; 0x6762 <twi_writeTo+0x8>
    676a:	32 e0       	ldi	r19, 0x02	; 2
    676c:	30 93 d7 0c 	sts	0x0CD7, r19	; 0x800cd7 <twi_state>
    6770:	00 93 d5 0c 	sts	0x0CD5, r16	; 0x800cd5 <twi_sendStop>
    6774:	3f ef       	ldi	r19, 0xFF	; 255
    6776:	30 93 6a 0c 	sts	0x0C6A, r19	; 0x800c6a <twi_error>
    677a:	10 92 af 0c 	sts	0x0CAF, r1	; 0x800caf <twi_masterBufferIndex>
    677e:	40 93 ae 0c 	sts	0x0CAE, r20	; 0x800cae <twi_masterBufferLength>
    6782:	56 2f       	mov	r21, r22
    6784:	a0 eb       	ldi	r26, 0xB0	; 176
    6786:	bc e0       	ldi	r27, 0x0C	; 12
    6788:	fb 01       	movw	r30, r22
    678a:	3e 2f       	mov	r19, r30
    678c:	35 1b       	sub	r19, r21
    678e:	34 17       	cp	r19, r20
    6790:	18 f4       	brcc	.+6      	; 0x6798 <twi_writeTo+0x3e>
    6792:	31 91       	ld	r19, Z+
    6794:	3d 93       	st	X+, r19
    6796:	f9 cf       	rjmp	.-14     	; 0x678a <twi_writeTo+0x30>
    6798:	10 92 d6 0c 	sts	0x0CD6, r1	; 0x800cd6 <twi_slarw>
    679c:	30 91 d6 0c 	lds	r19, 0x0CD6	; 0x800cd6 <twi_slarw>
    67a0:	88 0f       	add	r24, r24
    67a2:	83 2b       	or	r24, r19
    67a4:	80 93 d6 0c 	sts	0x0CD6, r24	; 0x800cd6 <twi_slarw>
    67a8:	80 91 d4 0c 	lds	r24, 0x0CD4	; 0x800cd4 <twi_inRepStart>
    67ac:	81 30       	cpi	r24, 0x01	; 1
    67ae:	61 f4       	brne	.+24     	; 0x67c8 <twi_writeTo+0x6e>
    67b0:	10 92 d4 0c 	sts	0x0CD4, r1	; 0x800cd4 <twi_inRepStart>
    67b4:	80 91 d6 0c 	lds	r24, 0x0CD6	; 0x800cd6 <twi_slarw>
    67b8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    67bc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    67c0:	83 fd       	sbrc	r24, 3
    67c2:	f8 cf       	rjmp	.-16     	; 0x67b4 <twi_writeTo+0x5a>
    67c4:	85 ec       	ldi	r24, 0xC5	; 197
    67c6:	01 c0       	rjmp	.+2      	; 0x67ca <twi_writeTo+0x70>
    67c8:	85 ee       	ldi	r24, 0xE5	; 229
    67ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    67ce:	22 23       	and	r18, r18
    67d0:	21 f0       	breq	.+8      	; 0x67da <twi_writeTo+0x80>
    67d2:	80 91 d7 0c 	lds	r24, 0x0CD7	; 0x800cd7 <twi_state>
    67d6:	82 30       	cpi	r24, 0x02	; 2
    67d8:	d1 f3       	breq	.-12     	; 0x67ce <twi_writeTo+0x74>
    67da:	80 91 6a 0c 	lds	r24, 0x0C6A	; 0x800c6a <twi_error>
    67de:	8f 3f       	cpi	r24, 0xFF	; 255
    67e0:	79 f0       	breq	.+30     	; 0x6800 <twi_writeTo+0xa6>
    67e2:	80 91 6a 0c 	lds	r24, 0x0C6A	; 0x800c6a <twi_error>
    67e6:	80 32       	cpi	r24, 0x20	; 32
    67e8:	41 f0       	breq	.+16     	; 0x67fa <twi_writeTo+0xa0>
    67ea:	80 91 6a 0c 	lds	r24, 0x0C6A	; 0x800c6a <twi_error>
    67ee:	80 33       	cpi	r24, 0x30	; 48
    67f0:	31 f0       	breq	.+12     	; 0x67fe <twi_writeTo+0xa4>
    67f2:	94 e0       	ldi	r25, 0x04	; 4
    67f4:	05 c0       	rjmp	.+10     	; 0x6800 <twi_writeTo+0xa6>
    67f6:	91 e0       	ldi	r25, 0x01	; 1
    67f8:	03 c0       	rjmp	.+6      	; 0x6800 <twi_writeTo+0xa6>
    67fa:	92 e0       	ldi	r25, 0x02	; 2
    67fc:	01 c0       	rjmp	.+2      	; 0x6800 <twi_writeTo+0xa6>
    67fe:	93 e0       	ldi	r25, 0x03	; 3
    6800:	89 2f       	mov	r24, r25
    6802:	0f 91       	pop	r16
    6804:	08 95       	ret

00006806 <twi_transmit>:
    6806:	40 91 8c 0c 	lds	r20, 0x0C8C	; 0x800c8c <twi_txBufferLength>
    680a:	26 2f       	mov	r18, r22
    680c:	30 e0       	ldi	r19, 0x00	; 0
    680e:	24 0f       	add	r18, r20
    6810:	31 1d       	adc	r19, r1
    6812:	21 32       	cpi	r18, 0x21	; 33
    6814:	31 05       	cpc	r19, r1
    6816:	dc f4       	brge	.+54     	; 0x684e <twi_transmit+0x48>
    6818:	20 91 d7 0c 	lds	r18, 0x0CD7	; 0x800cd7 <twi_state>
    681c:	24 30       	cpi	r18, 0x04	; 4
    681e:	c9 f4       	brne	.+50     	; 0x6852 <twi_transmit+0x4c>
    6820:	fc 01       	movw	r30, r24
    6822:	80 e0       	ldi	r24, 0x00	; 0
    6824:	90 e0       	ldi	r25, 0x00	; 0
    6826:	86 17       	cp	r24, r22
    6828:	58 f4       	brcc	.+22     	; 0x6840 <twi_transmit+0x3a>
    682a:	30 91 8c 0c 	lds	r19, 0x0C8C	; 0x800c8c <twi_txBufferLength>
    682e:	21 91       	ld	r18, Z+
    6830:	dc 01       	movw	r26, r24
    6832:	a2 57       	subi	r26, 0x72	; 114
    6834:	b3 4f       	sbci	r27, 0xF3	; 243
    6836:	a3 0f       	add	r26, r19
    6838:	b1 1d       	adc	r27, r1
    683a:	2c 93       	st	X, r18
    683c:	01 96       	adiw	r24, 0x01	; 1
    683e:	f3 cf       	rjmp	.-26     	; 0x6826 <twi_transmit+0x20>
    6840:	80 91 8c 0c 	lds	r24, 0x0C8C	; 0x800c8c <twi_txBufferLength>
    6844:	68 0f       	add	r22, r24
    6846:	60 93 8c 0c 	sts	0x0C8C, r22	; 0x800c8c <twi_txBufferLength>
    684a:	80 e0       	ldi	r24, 0x00	; 0
    684c:	08 95       	ret
    684e:	81 e0       	ldi	r24, 0x01	; 1
    6850:	08 95       	ret
    6852:	82 e0       	ldi	r24, 0x02	; 2
    6854:	08 95       	ret

00006856 <twi_attachSlaveRxEvent>:
    6856:	90 93 d1 0c 	sts	0x0CD1, r25	; 0x800cd1 <twi_onSlaveReceive+0x1>
    685a:	80 93 d0 0c 	sts	0x0CD0, r24	; 0x800cd0 <twi_onSlaveReceive>
    685e:	08 95       	ret

00006860 <twi_attachSlaveTxEvent>:
    6860:	90 93 d3 0c 	sts	0x0CD3, r25	; 0x800cd3 <twi_onSlaveTransmit+0x1>
    6864:	80 93 d2 0c 	sts	0x0CD2, r24	; 0x800cd2 <twi_onSlaveTransmit>
    6868:	08 95       	ret

0000686a <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    686a:	85 ed       	ldi	r24, 0xD5	; 213
    686c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    6870:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    6874:	84 fd       	sbrc	r24, 4
    6876:	fc cf       	rjmp	.-8      	; 0x6870 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    6878:	10 92 d7 0c 	sts	0x0CD7, r1	; 0x800cd7 <twi_state>
    687c:	08 95       	ret

0000687e <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    687e:	85 ec       	ldi	r24, 0xC5	; 197
    6880:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    6884:	10 92 d7 0c 	sts	0x0CD7, r1	; 0x800cd7 <twi_state>
    6888:	08 95       	ret

0000688a <__vector_26>:
}

ISR(TWI_vect)
{
    688a:	1f 92       	push	r1
    688c:	0f 92       	push	r0
    688e:	0f b6       	in	r0, 0x3f	; 63
    6890:	0f 92       	push	r0
    6892:	11 24       	eor	r1, r1
    6894:	0b b6       	in	r0, 0x3b	; 59
    6896:	0f 92       	push	r0
    6898:	2f 93       	push	r18
    689a:	3f 93       	push	r19
    689c:	4f 93       	push	r20
    689e:	5f 93       	push	r21
    68a0:	6f 93       	push	r22
    68a2:	7f 93       	push	r23
    68a4:	8f 93       	push	r24
    68a6:	9f 93       	push	r25
    68a8:	af 93       	push	r26
    68aa:	bf 93       	push	r27
    68ac:	ef 93       	push	r30
    68ae:	ff 93       	push	r31
  switch(TW_STATUS){
    68b0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    68b4:	88 7f       	andi	r24, 0xF8	; 248
    68b6:	80 36       	cpi	r24, 0x60	; 96
    68b8:	09 f4       	brne	.+2      	; 0x68bc <__vector_26+0x32>
    68ba:	9d c0       	rjmp	.+314    	; 0x69f6 <__vector_26+0x16c>
    68bc:	70 f5       	brcc	.+92     	; 0x691a <__vector_26+0x90>
    68be:	88 32       	cpi	r24, 0x28	; 40
    68c0:	09 f4       	brne	.+2      	; 0x68c4 <__vector_26+0x3a>
    68c2:	5c c0       	rjmp	.+184    	; 0x697c <__vector_26+0xf2>
    68c4:	90 f4       	brcc	.+36     	; 0x68ea <__vector_26+0x60>
    68c6:	80 31       	cpi	r24, 0x10	; 16
    68c8:	09 f4       	brne	.+2      	; 0x68cc <__vector_26+0x42>
    68ca:	55 c0       	rjmp	.+170    	; 0x6976 <__vector_26+0xec>
    68cc:	38 f4       	brcc	.+14     	; 0x68dc <__vector_26+0x52>
    68ce:	88 23       	and	r24, r24
    68d0:	09 f4       	brne	.+2      	; 0x68d4 <__vector_26+0x4a>
    68d2:	f3 c0       	rjmp	.+486    	; 0x6aba <__vector_26+0x230>
    68d4:	88 30       	cpi	r24, 0x08	; 8
    68d6:	09 f4       	brne	.+2      	; 0x68da <__vector_26+0x50>
    68d8:	4e c0       	rjmp	.+156    	; 0x6976 <__vector_26+0xec>
    68da:	f2 c0       	rjmp	.+484    	; 0x6ac0 <__vector_26+0x236>
    68dc:	88 31       	cpi	r24, 0x18	; 24
    68de:	09 f4       	brne	.+2      	; 0x68e2 <__vector_26+0x58>
    68e0:	4d c0       	rjmp	.+154    	; 0x697c <__vector_26+0xf2>
    68e2:	80 32       	cpi	r24, 0x20	; 32
    68e4:	09 f4       	brne	.+2      	; 0x68e8 <__vector_26+0x5e>
    68e6:	5e c0       	rjmp	.+188    	; 0x69a4 <__vector_26+0x11a>
    68e8:	eb c0       	rjmp	.+470    	; 0x6ac0 <__vector_26+0x236>
    68ea:	80 34       	cpi	r24, 0x40	; 64
    68ec:	09 f4       	brne	.+2      	; 0x68f0 <__vector_26+0x66>
    68ee:	69 c0       	rjmp	.+210    	; 0x69c2 <__vector_26+0x138>
    68f0:	50 f4       	brcc	.+20     	; 0x6906 <__vector_26+0x7c>
    68f2:	80 33       	cpi	r24, 0x30	; 48
    68f4:	09 f4       	brne	.+2      	; 0x68f8 <__vector_26+0x6e>
    68f6:	56 c0       	rjmp	.+172    	; 0x69a4 <__vector_26+0x11a>
    68f8:	88 33       	cpi	r24, 0x38	; 56
    68fa:	09 f0       	breq	.+2      	; 0x68fe <__vector_26+0x74>
    68fc:	e1 c0       	rjmp	.+450    	; 0x6ac0 <__vector_26+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    68fe:	80 93 6a 0c 	sts	0x0C6A, r24	; 0x800c6a <twi_error>
      twi_releaseBus();
    6902:	bd df       	rcall	.-134    	; 0x687e <twi_releaseBus>
      break;
    6904:	dd c0       	rjmp	.+442    	; 0x6ac0 <__vector_26+0x236>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    6906:	80 35       	cpi	r24, 0x50	; 80
    6908:	09 f4       	brne	.+2      	; 0x690c <__vector_26+0x82>
    690a:	4f c0       	rjmp	.+158    	; 0x69aa <__vector_26+0x120>
    690c:	88 35       	cpi	r24, 0x58	; 88
    690e:	09 f4       	brne	.+2      	; 0x6912 <__vector_26+0x88>
    6910:	5d c0       	rjmp	.+186    	; 0x69cc <__vector_26+0x142>
    6912:	88 34       	cpi	r24, 0x48	; 72
    6914:	09 f0       	breq	.+2      	; 0x6918 <__vector_26+0x8e>
    6916:	d4 c0       	rjmp	.+424    	; 0x6ac0 <__vector_26+0x236>
    6918:	d2 c0       	rjmp	.+420    	; 0x6abe <__vector_26+0x234>
    691a:	88 39       	cpi	r24, 0x98	; 152
    691c:	09 f4       	brne	.+2      	; 0x6920 <__vector_26+0x96>
    691e:	c3 c0       	rjmp	.+390    	; 0x6aa6 <__vector_26+0x21c>
    6920:	a8 f4       	brcc	.+42     	; 0x694c <__vector_26+0xc2>
    6922:	88 37       	cpi	r24, 0x78	; 120
    6924:	09 f4       	brne	.+2      	; 0x6928 <__vector_26+0x9e>
    6926:	67 c0       	rjmp	.+206    	; 0x69f6 <__vector_26+0x16c>
    6928:	38 f4       	brcc	.+14     	; 0x6938 <__vector_26+0xae>
    692a:	88 36       	cpi	r24, 0x68	; 104
    692c:	09 f4       	brne	.+2      	; 0x6930 <__vector_26+0xa6>
    692e:	63 c0       	rjmp	.+198    	; 0x69f6 <__vector_26+0x16c>
    6930:	80 37       	cpi	r24, 0x70	; 112
    6932:	09 f4       	brne	.+2      	; 0x6936 <__vector_26+0xac>
    6934:	60 c0       	rjmp	.+192    	; 0x69f6 <__vector_26+0x16c>
    6936:	c4 c0       	rjmp	.+392    	; 0x6ac0 <__vector_26+0x236>
    6938:	88 38       	cpi	r24, 0x88	; 136
    693a:	09 f4       	brne	.+2      	; 0x693e <__vector_26+0xb4>
    693c:	b4 c0       	rjmp	.+360    	; 0x6aa6 <__vector_26+0x21c>
    693e:	80 39       	cpi	r24, 0x90	; 144
    6940:	09 f4       	brne	.+2      	; 0x6944 <__vector_26+0xba>
    6942:	5f c0       	rjmp	.+190    	; 0x6a02 <__vector_26+0x178>
    6944:	80 38       	cpi	r24, 0x80	; 128
    6946:	09 f0       	breq	.+2      	; 0x694a <__vector_26+0xc0>
    6948:	bb c0       	rjmp	.+374    	; 0x6ac0 <__vector_26+0x236>
    694a:	5b c0       	rjmp	.+182    	; 0x6a02 <__vector_26+0x178>
    694c:	80 3b       	cpi	r24, 0xB0	; 176
    694e:	09 f4       	brne	.+2      	; 0x6952 <__vector_26+0xc8>
    6950:	82 c0       	rjmp	.+260    	; 0x6a56 <__vector_26+0x1cc>
    6952:	38 f4       	brcc	.+14     	; 0x6962 <__vector_26+0xd8>
    6954:	80 3a       	cpi	r24, 0xA0	; 160
    6956:	09 f4       	brne	.+2      	; 0x695a <__vector_26+0xd0>
    6958:	66 c0       	rjmp	.+204    	; 0x6a26 <__vector_26+0x19c>
    695a:	88 3a       	cpi	r24, 0xA8	; 168
    695c:	09 f4       	brne	.+2      	; 0x6960 <__vector_26+0xd6>
    695e:	7b c0       	rjmp	.+246    	; 0x6a56 <__vector_26+0x1cc>
    6960:	af c0       	rjmp	.+350    	; 0x6ac0 <__vector_26+0x236>
    6962:	80 3c       	cpi	r24, 0xC0	; 192
    6964:	09 f4       	brne	.+2      	; 0x6968 <__vector_26+0xde>
    6966:	a3 c0       	rjmp	.+326    	; 0x6aae <__vector_26+0x224>
    6968:	88 3c       	cpi	r24, 0xC8	; 200
    696a:	09 f4       	brne	.+2      	; 0x696e <__vector_26+0xe4>
    696c:	a0 c0       	rjmp	.+320    	; 0x6aae <__vector_26+0x224>
    696e:	88 3b       	cpi	r24, 0xB8	; 184
    6970:	09 f4       	brne	.+2      	; 0x6974 <__vector_26+0xea>
    6972:	86 c0       	rjmp	.+268    	; 0x6a80 <__vector_26+0x1f6>
    6974:	a5 c0       	rjmp	.+330    	; 0x6ac0 <__vector_26+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    6976:	80 91 d6 0c 	lds	r24, 0x0CD6	; 0x800cd6 <twi_slarw>
    697a:	10 c0       	rjmp	.+32     	; 0x699c <__vector_26+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    697c:	90 91 af 0c 	lds	r25, 0x0CAF	; 0x800caf <twi_masterBufferIndex>
    6980:	80 91 ae 0c 	lds	r24, 0x0CAE	; 0x800cae <twi_masterBufferLength>
    6984:	98 17       	cp	r25, r24
    6986:	70 f5       	brcc	.+92     	; 0x69e4 <__vector_26+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    6988:	e0 91 af 0c 	lds	r30, 0x0CAF	; 0x800caf <twi_masterBufferIndex>
    698c:	81 e0       	ldi	r24, 0x01	; 1
    698e:	8e 0f       	add	r24, r30
    6990:	80 93 af 0c 	sts	0x0CAF, r24	; 0x800caf <twi_masterBufferIndex>
    6994:	f0 e0       	ldi	r31, 0x00	; 0
    6996:	e0 55       	subi	r30, 0x50	; 80
    6998:	f3 4f       	sbci	r31, 0xF3	; 243
    699a:	80 81       	ld	r24, Z
    699c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    69a0:	85 ec       	ldi	r24, 0xC5	; 197
    69a2:	82 c0       	rjmp	.+260    	; 0x6aa8 <__vector_26+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    69a4:	80 93 6a 0c 	sts	0x0C6A, r24	; 0x800c6a <twi_error>
    69a8:	8a c0       	rjmp	.+276    	; 0x6abe <__vector_26+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    69aa:	e0 91 af 0c 	lds	r30, 0x0CAF	; 0x800caf <twi_masterBufferIndex>
    69ae:	81 e0       	ldi	r24, 0x01	; 1
    69b0:	8e 0f       	add	r24, r30
    69b2:	80 93 af 0c 	sts	0x0CAF, r24	; 0x800caf <twi_masterBufferIndex>
    69b6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    69ba:	f0 e0       	ldi	r31, 0x00	; 0
    69bc:	e0 55       	subi	r30, 0x50	; 80
    69be:	f3 4f       	sbci	r31, 0xF3	; 243
    69c0:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    69c2:	90 91 af 0c 	lds	r25, 0x0CAF	; 0x800caf <twi_masterBufferIndex>
    69c6:	80 91 ae 0c 	lds	r24, 0x0CAE	; 0x800cae <twi_masterBufferLength>
    69ca:	6a c0       	rjmp	.+212    	; 0x6aa0 <__vector_26+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    69cc:	e0 91 af 0c 	lds	r30, 0x0CAF	; 0x800caf <twi_masterBufferIndex>
    69d0:	81 e0       	ldi	r24, 0x01	; 1
    69d2:	8e 0f       	add	r24, r30
    69d4:	80 93 af 0c 	sts	0x0CAF, r24	; 0x800caf <twi_masterBufferIndex>
    69d8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    69dc:	f0 e0       	ldi	r31, 0x00	; 0
    69de:	e0 55       	subi	r30, 0x50	; 80
    69e0:	f3 4f       	sbci	r31, 0xF3	; 243
    69e2:	80 83       	st	Z, r24
	if (twi_sendStop)
    69e4:	80 91 d5 0c 	lds	r24, 0x0CD5	; 0x800cd5 <twi_sendStop>
    69e8:	81 11       	cpse	r24, r1
    69ea:	69 c0       	rjmp	.+210    	; 0x6abe <__vector_26+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    69ec:	81 e0       	ldi	r24, 0x01	; 1
    69ee:	80 93 d4 0c 	sts	0x0CD4, r24	; 0x800cd4 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    69f2:	84 ea       	ldi	r24, 0xA4	; 164
    69f4:	5d c0       	rjmp	.+186    	; 0x6ab0 <__vector_26+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    69f6:	83 e0       	ldi	r24, 0x03	; 3
    69f8:	80 93 d7 0c 	sts	0x0CD7, r24	; 0x800cd7 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    69fc:	10 92 6b 0c 	sts	0x0C6B, r1	; 0x800c6b <twi_rxBufferIndex>
    6a00:	cf cf       	rjmp	.-98     	; 0x69a0 <__vector_26+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    6a02:	80 91 6b 0c 	lds	r24, 0x0C6B	; 0x800c6b <twi_rxBufferIndex>
    6a06:	80 32       	cpi	r24, 0x20	; 32
    6a08:	08 f0       	brcs	.+2      	; 0x6a0c <__vector_26+0x182>
    6a0a:	4d c0       	rjmp	.+154    	; 0x6aa6 <__vector_26+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    6a0c:	e0 91 6b 0c 	lds	r30, 0x0C6B	; 0x800c6b <twi_rxBufferIndex>
    6a10:	81 e0       	ldi	r24, 0x01	; 1
    6a12:	8e 0f       	add	r24, r30
    6a14:	80 93 6b 0c 	sts	0x0C6B, r24	; 0x800c6b <twi_rxBufferIndex>
    6a18:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    6a1c:	f0 e0       	ldi	r31, 0x00	; 0
    6a1e:	e4 59       	subi	r30, 0x94	; 148
    6a20:	f3 4f       	sbci	r31, 0xF3	; 243
    6a22:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    6a24:	bd cf       	rjmp	.-134    	; 0x69a0 <__vector_26+0x116>
    6a26:	2b df       	rcall	.-426    	; 0x687e <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    6a28:	80 91 6b 0c 	lds	r24, 0x0C6B	; 0x800c6b <twi_rxBufferIndex>
    6a2c:	80 32       	cpi	r24, 0x20	; 32
    6a2e:	30 f4       	brcc	.+12     	; 0x6a3c <__vector_26+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    6a30:	e0 91 6b 0c 	lds	r30, 0x0C6B	; 0x800c6b <twi_rxBufferIndex>
    6a34:	f0 e0       	ldi	r31, 0x00	; 0
    6a36:	e4 59       	subi	r30, 0x94	; 148
    6a38:	f3 4f       	sbci	r31, 0xF3	; 243
    6a3a:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    6a3c:	60 91 6b 0c 	lds	r22, 0x0C6B	; 0x800c6b <twi_rxBufferIndex>
    6a40:	70 e0       	ldi	r23, 0x00	; 0
    6a42:	e0 91 d0 0c 	lds	r30, 0x0CD0	; 0x800cd0 <twi_onSlaveReceive>
    6a46:	f0 91 d1 0c 	lds	r31, 0x0CD1	; 0x800cd1 <twi_onSlaveReceive+0x1>
    6a4a:	8c e6       	ldi	r24, 0x6C	; 108
    6a4c:	9c e0       	ldi	r25, 0x0C	; 12
    6a4e:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    6a50:	10 92 6b 0c 	sts	0x0C6B, r1	; 0x800c6b <twi_rxBufferIndex>
      break;
    6a54:	35 c0       	rjmp	.+106    	; 0x6ac0 <__vector_26+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    6a56:	84 e0       	ldi	r24, 0x04	; 4
    6a58:	80 93 d7 0c 	sts	0x0CD7, r24	; 0x800cd7 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    6a5c:	10 92 8d 0c 	sts	0x0C8D, r1	; 0x800c8d <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    6a60:	10 92 8c 0c 	sts	0x0C8C, r1	; 0x800c8c <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    6a64:	e0 91 d2 0c 	lds	r30, 0x0CD2	; 0x800cd2 <twi_onSlaveTransmit>
    6a68:	f0 91 d3 0c 	lds	r31, 0x0CD3	; 0x800cd3 <twi_onSlaveTransmit+0x1>
    6a6c:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    6a6e:	80 91 8c 0c 	lds	r24, 0x0C8C	; 0x800c8c <twi_txBufferLength>
    6a72:	81 11       	cpse	r24, r1
    6a74:	05 c0       	rjmp	.+10     	; 0x6a80 <__vector_26+0x1f6>
        twi_txBufferLength = 1;
    6a76:	81 e0       	ldi	r24, 0x01	; 1
    6a78:	80 93 8c 0c 	sts	0x0C8C, r24	; 0x800c8c <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    6a7c:	10 92 8e 0c 	sts	0x0C8E, r1	; 0x800c8e <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    6a80:	e0 91 8d 0c 	lds	r30, 0x0C8D	; 0x800c8d <twi_txBufferIndex>
    6a84:	81 e0       	ldi	r24, 0x01	; 1
    6a86:	8e 0f       	add	r24, r30
    6a88:	80 93 8d 0c 	sts	0x0C8D, r24	; 0x800c8d <twi_txBufferIndex>
    6a8c:	f0 e0       	ldi	r31, 0x00	; 0
    6a8e:	e2 57       	subi	r30, 0x72	; 114
    6a90:	f3 4f       	sbci	r31, 0xF3	; 243
    6a92:	80 81       	ld	r24, Z
    6a94:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    6a98:	90 91 8d 0c 	lds	r25, 0x0C8D	; 0x800c8d <twi_txBufferIndex>
    6a9c:	80 91 8c 0c 	lds	r24, 0x0C8C	; 0x800c8c <twi_txBufferLength>
    6aa0:	98 17       	cp	r25, r24
    6aa2:	08 f4       	brcc	.+2      	; 0x6aa6 <__vector_26+0x21c>
    6aa4:	7d cf       	rjmp	.-262    	; 0x69a0 <__vector_26+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    6aa6:	85 e8       	ldi	r24, 0x85	; 133
    6aa8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    6aac:	09 c0       	rjmp	.+18     	; 0x6ac0 <__vector_26+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    6aae:	85 ec       	ldi	r24, 0xC5	; 197
    6ab0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    6ab4:	10 92 d7 0c 	sts	0x0CD7, r1	; 0x800cd7 <twi_state>
      break;
    6ab8:	03 c0       	rjmp	.+6      	; 0x6ac0 <__vector_26+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    6aba:	10 92 6a 0c 	sts	0x0C6A, r1	; 0x800c6a <twi_error>
      twi_stop();
    6abe:	d5 de       	rcall	.-598    	; 0x686a <twi_stop>
      break;
  }
}
    6ac0:	ff 91       	pop	r31
    6ac2:	ef 91       	pop	r30
    6ac4:	bf 91       	pop	r27
    6ac6:	af 91       	pop	r26
    6ac8:	9f 91       	pop	r25
    6aca:	8f 91       	pop	r24
    6acc:	7f 91       	pop	r23
    6ace:	6f 91       	pop	r22
    6ad0:	5f 91       	pop	r21
    6ad2:	4f 91       	pop	r20
    6ad4:	3f 91       	pop	r19
    6ad6:	2f 91       	pop	r18
    6ad8:	0f 90       	pop	r0
    6ada:	0b be       	out	0x3b, r0	; 59
    6adc:	0f 90       	pop	r0
    6ade:	0f be       	out	0x3f, r0	; 63
    6ae0:	0f 90       	pop	r0
    6ae2:	1f 90       	pop	r1
    6ae4:	18 95       	reti

00006ae6 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    6ae6:	80 91 0c 0d 	lds	r24, 0x0D0C	; 0x800d0c <_ZN7TwoWire14rxBufferLengthE>
    6aea:	90 e0       	ldi	r25, 0x00	; 0
    6aec:	20 91 0d 0d 	lds	r18, 0x0D0D	; 0x800d0d <_ZN7TwoWire13rxBufferIndexE>
    6af0:	82 1b       	sub	r24, r18
    6af2:	91 09       	sbc	r25, r1
    6af4:	08 95       	ret

00006af6 <_ZN7TwoWire4readEv>:
    6af6:	90 91 0d 0d 	lds	r25, 0x0D0D	; 0x800d0d <_ZN7TwoWire13rxBufferIndexE>
    6afa:	80 91 0c 0d 	lds	r24, 0x0D0C	; 0x800d0c <_ZN7TwoWire14rxBufferLengthE>
    6afe:	98 17       	cp	r25, r24
    6b00:	50 f4       	brcc	.+20     	; 0x6b16 <_ZN7TwoWire4readEv+0x20>
    6b02:	e9 2f       	mov	r30, r25
    6b04:	f0 e0       	ldi	r31, 0x00	; 0
    6b06:	e2 5f       	subi	r30, 0xF2	; 242
    6b08:	f2 4f       	sbci	r31, 0xF2	; 242
    6b0a:	20 81       	ld	r18, Z
    6b0c:	30 e0       	ldi	r19, 0x00	; 0
    6b0e:	9f 5f       	subi	r25, 0xFF	; 255
    6b10:	90 93 0d 0d 	sts	0x0D0D, r25	; 0x800d0d <_ZN7TwoWire13rxBufferIndexE>
    6b14:	02 c0       	rjmp	.+4      	; 0x6b1a <_ZN7TwoWire4readEv+0x24>
    6b16:	2f ef       	ldi	r18, 0xFF	; 255
    6b18:	3f ef       	ldi	r19, 0xFF	; 255
    6b1a:	c9 01       	movw	r24, r18
    6b1c:	08 95       	ret

00006b1e <_ZN7TwoWire4peekEv>:
    6b1e:	e0 91 0d 0d 	lds	r30, 0x0D0D	; 0x800d0d <_ZN7TwoWire13rxBufferIndexE>
    6b22:	80 91 0c 0d 	lds	r24, 0x0D0C	; 0x800d0c <_ZN7TwoWire14rxBufferLengthE>
    6b26:	e8 17       	cp	r30, r24
    6b28:	30 f4       	brcc	.+12     	; 0x6b36 <_ZN7TwoWire4peekEv+0x18>
    6b2a:	f0 e0       	ldi	r31, 0x00	; 0
    6b2c:	e2 5f       	subi	r30, 0xF2	; 242
    6b2e:	f2 4f       	sbci	r31, 0xF2	; 242
    6b30:	80 81       	ld	r24, Z
    6b32:	90 e0       	ldi	r25, 0x00	; 0
    6b34:	08 95       	ret
    6b36:	8f ef       	ldi	r24, 0xFF	; 255
    6b38:	9f ef       	ldi	r25, 0xFF	; 255
    6b3a:	08 95       	ret

00006b3c <_ZN7TwoWire5flushEv>:
    6b3c:	08 95       	ret

00006b3e <_ZN7TwoWire16onReceiveServiceEPhi>:
    6b3e:	cf 93       	push	r28
    6b40:	df 93       	push	r29
    6b42:	ec 01       	movw	r28, r24
    6b44:	e0 91 e4 0c 	lds	r30, 0x0CE4	; 0x800ce4 <_ZN7TwoWire14user_onReceiveE>
    6b48:	f0 91 e5 0c 	lds	r31, 0x0CE5	; 0x800ce5 <_ZN7TwoWire14user_onReceiveE+0x1>
    6b4c:	30 97       	sbiw	r30, 0x00	; 0
    6b4e:	f1 f0       	breq	.+60     	; 0x6b8c <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    6b50:	90 91 0d 0d 	lds	r25, 0x0D0D	; 0x800d0d <_ZN7TwoWire13rxBufferIndexE>
    6b54:	80 91 0c 0d 	lds	r24, 0x0D0C	; 0x800d0c <_ZN7TwoWire14rxBufferLengthE>
    6b58:	98 17       	cp	r25, r24
    6b5a:	c0 f0       	brcs	.+48     	; 0x6b8c <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    6b5c:	90 e0       	ldi	r25, 0x00	; 0
    6b5e:	29 2f       	mov	r18, r25
    6b60:	30 e0       	ldi	r19, 0x00	; 0
    6b62:	26 17       	cp	r18, r22
    6b64:	37 07       	cpc	r19, r23
    6b66:	54 f4       	brge	.+20     	; 0x6b7c <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    6b68:	de 01       	movw	r26, r28
    6b6a:	a2 0f       	add	r26, r18
    6b6c:	b3 1f       	adc	r27, r19
    6b6e:	4c 91       	ld	r20, X
    6b70:	d9 01       	movw	r26, r18
    6b72:	a2 5f       	subi	r26, 0xF2	; 242
    6b74:	b2 4f       	sbci	r27, 0xF2	; 242
    6b76:	4c 93       	st	X, r20
    6b78:	9f 5f       	subi	r25, 0xFF	; 255
    6b7a:	f1 cf       	rjmp	.-30     	; 0x6b5e <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    6b7c:	10 92 0d 0d 	sts	0x0D0D, r1	; 0x800d0d <_ZN7TwoWire13rxBufferIndexE>
    6b80:	60 93 0c 0d 	sts	0x0D0C, r22	; 0x800d0c <_ZN7TwoWire14rxBufferLengthE>
    6b84:	cb 01       	movw	r24, r22
    6b86:	df 91       	pop	r29
    6b88:	cf 91       	pop	r28
    6b8a:	09 94       	ijmp
    6b8c:	df 91       	pop	r29
    6b8e:	cf 91       	pop	r28
    6b90:	08 95       	ret

00006b92 <_ZN7TwoWire16onRequestServiceEv>:
    6b92:	e0 91 e6 0c 	lds	r30, 0x0CE6	; 0x800ce6 <_ZN7TwoWire14user_onRequestE>
    6b96:	f0 91 e7 0c 	lds	r31, 0x0CE7	; 0x800ce7 <_ZN7TwoWire14user_onRequestE+0x1>
    6b9a:	30 97       	sbiw	r30, 0x00	; 0
    6b9c:	29 f0       	breq	.+10     	; 0x6ba8 <_ZN7TwoWire16onRequestServiceEv+0x16>
    6b9e:	10 92 ea 0c 	sts	0x0CEA, r1	; 0x800cea <_ZN7TwoWire13txBufferIndexE>
    6ba2:	10 92 e9 0c 	sts	0x0CE9, r1	; 0x800ce9 <_ZN7TwoWire14txBufferLengthE>
    6ba6:	09 94       	ijmp
    6ba8:	08 95       	ret

00006baa <_ZN7TwoWire5writeEPKhj>:
    6baa:	cf 92       	push	r12
    6bac:	df 92       	push	r13
    6bae:	ef 92       	push	r14
    6bb0:	ff 92       	push	r15
    6bb2:	0f 93       	push	r16
    6bb4:	1f 93       	push	r17
    6bb6:	cf 93       	push	r28
    6bb8:	df 93       	push	r29
    6bba:	7c 01       	movw	r14, r24
    6bbc:	cb 01       	movw	r24, r22
    6bbe:	8a 01       	movw	r16, r20
    6bc0:	20 91 e8 0c 	lds	r18, 0x0CE8	; 0x800ce8 <_ZN7TwoWire12transmittingE>
    6bc4:	22 23       	and	r18, r18
    6bc6:	89 f0       	breq	.+34     	; 0x6bea <_ZN7TwoWire5writeEPKhj+0x40>
    6bc8:	eb 01       	movw	r28, r22
    6bca:	6b 01       	movw	r12, r22
    6bcc:	c4 0e       	add	r12, r20
    6bce:	d5 1e       	adc	r13, r21
    6bd0:	cc 15       	cp	r28, r12
    6bd2:	dd 05       	cpc	r29, r13
    6bd4:	61 f0       	breq	.+24     	; 0x6bee <_ZN7TwoWire5writeEPKhj+0x44>
    6bd6:	69 91       	ld	r22, Y+
    6bd8:	d7 01       	movw	r26, r14
    6bda:	ed 91       	ld	r30, X+
    6bdc:	fc 91       	ld	r31, X
    6bde:	01 90       	ld	r0, Z+
    6be0:	f0 81       	ld	r31, Z
    6be2:	e0 2d       	mov	r30, r0
    6be4:	c7 01       	movw	r24, r14
    6be6:	09 95       	icall
    6be8:	f3 cf       	rjmp	.-26     	; 0x6bd0 <_ZN7TwoWire5writeEPKhj+0x26>
    6bea:	64 2f       	mov	r22, r20
    6bec:	0c de       	rcall	.-1000   	; 0x6806 <twi_transmit>
    6bee:	c8 01       	movw	r24, r16
    6bf0:	df 91       	pop	r29
    6bf2:	cf 91       	pop	r28
    6bf4:	1f 91       	pop	r17
    6bf6:	0f 91       	pop	r16
    6bf8:	ff 90       	pop	r15
    6bfa:	ef 90       	pop	r14
    6bfc:	df 90       	pop	r13
    6bfe:	cf 90       	pop	r12
    6c00:	08 95       	ret

00006c02 <_ZN7TwoWire5writeEh>:
    6c02:	cf 93       	push	r28
    6c04:	df 93       	push	r29
    6c06:	1f 92       	push	r1
    6c08:	cd b7       	in	r28, 0x3d	; 61
    6c0a:	de b7       	in	r29, 0x3e	; 62
    6c0c:	69 83       	std	Y+1, r22	; 0x01
    6c0e:	20 91 e8 0c 	lds	r18, 0x0CE8	; 0x800ce8 <_ZN7TwoWire12transmittingE>
    6c12:	22 23       	and	r18, r18
    6c14:	d1 f0       	breq	.+52     	; 0x6c4a <_ZN7TwoWire5writeEh+0x48>
    6c16:	20 91 e9 0c 	lds	r18, 0x0CE9	; 0x800ce9 <_ZN7TwoWire14txBufferLengthE>
    6c1a:	20 32       	cpi	r18, 0x20	; 32
    6c1c:	40 f0       	brcs	.+16     	; 0x6c2e <_ZN7TwoWire5writeEh+0x2c>
    6c1e:	21 e0       	ldi	r18, 0x01	; 1
    6c20:	30 e0       	ldi	r19, 0x00	; 0
    6c22:	fc 01       	movw	r30, r24
    6c24:	33 83       	std	Z+3, r19	; 0x03
    6c26:	22 83       	std	Z+2, r18	; 0x02
    6c28:	80 e0       	ldi	r24, 0x00	; 0
    6c2a:	90 e0       	ldi	r25, 0x00	; 0
    6c2c:	14 c0       	rjmp	.+40     	; 0x6c56 <_ZN7TwoWire5writeEh+0x54>
    6c2e:	80 91 ea 0c 	lds	r24, 0x0CEA	; 0x800cea <_ZN7TwoWire13txBufferIndexE>
    6c32:	e8 2f       	mov	r30, r24
    6c34:	f0 e0       	ldi	r31, 0x00	; 0
    6c36:	e5 51       	subi	r30, 0x15	; 21
    6c38:	f3 4f       	sbci	r31, 0xF3	; 243
    6c3a:	99 81       	ldd	r25, Y+1	; 0x01
    6c3c:	90 83       	st	Z, r25
    6c3e:	8f 5f       	subi	r24, 0xFF	; 255
    6c40:	80 93 ea 0c 	sts	0x0CEA, r24	; 0x800cea <_ZN7TwoWire13txBufferIndexE>
    6c44:	80 93 e9 0c 	sts	0x0CE9, r24	; 0x800ce9 <_ZN7TwoWire14txBufferLengthE>
    6c48:	04 c0       	rjmp	.+8      	; 0x6c52 <_ZN7TwoWire5writeEh+0x50>
    6c4a:	61 e0       	ldi	r22, 0x01	; 1
    6c4c:	ce 01       	movw	r24, r28
    6c4e:	01 96       	adiw	r24, 0x01	; 1
    6c50:	da dd       	rcall	.-1100   	; 0x6806 <twi_transmit>
    6c52:	81 e0       	ldi	r24, 0x01	; 1
    6c54:	90 e0       	ldi	r25, 0x00	; 0
    6c56:	0f 90       	pop	r0
    6c58:	df 91       	pop	r29
    6c5a:	cf 91       	pop	r28
    6c5c:	08 95       	ret

00006c5e <_ZN7TwoWireC1Ev>:
    6c5e:	fc 01       	movw	r30, r24
    6c60:	13 82       	std	Z+3, r1	; 0x03
    6c62:	12 82       	std	Z+2, r1	; 0x02
    6c64:	88 ee       	ldi	r24, 0xE8	; 232
    6c66:	93 e0       	ldi	r25, 0x03	; 3
    6c68:	a0 e0       	ldi	r26, 0x00	; 0
    6c6a:	b0 e0       	ldi	r27, 0x00	; 0
    6c6c:	84 83       	std	Z+4, r24	; 0x04
    6c6e:	95 83       	std	Z+5, r25	; 0x05
    6c70:	a6 83       	std	Z+6, r26	; 0x06
    6c72:	b7 83       	std	Z+7, r27	; 0x07
    6c74:	80 e6       	ldi	r24, 0x60	; 96
    6c76:	9a e0       	ldi	r25, 0x0A	; 10
    6c78:	91 83       	std	Z+1, r25	; 0x01
    6c7a:	80 83       	st	Z, r24
    6c7c:	08 95       	ret

00006c7e <_ZN7TwoWire5beginEv>:
    6c7e:	10 92 0d 0d 	sts	0x0D0D, r1	; 0x800d0d <_ZN7TwoWire13rxBufferIndexE>
    6c82:	10 92 0c 0d 	sts	0x0D0C, r1	; 0x800d0c <_ZN7TwoWire14rxBufferLengthE>
    6c86:	10 92 ea 0c 	sts	0x0CEA, r1	; 0x800cea <_ZN7TwoWire13txBufferIndexE>
    6c8a:	10 92 e9 0c 	sts	0x0CE9, r1	; 0x800ce9 <_ZN7TwoWire14txBufferLengthE>
    6c8e:	de dc       	rcall	.-1604   	; 0x664c <twi_init>
    6c90:	89 ec       	ldi	r24, 0xC9	; 201
    6c92:	95 e3       	ldi	r25, 0x35	; 53
    6c94:	e5 dd       	rcall	.-1078   	; 0x6860 <twi_attachSlaveTxEvent>
    6c96:	8f e9       	ldi	r24, 0x9F	; 159
    6c98:	95 e3       	ldi	r25, 0x35	; 53
    6c9a:	dd cd       	rjmp	.-1094   	; 0x6856 <twi_attachSlaveRxEvent>

00006c9c <_ZN7TwoWire3endEv>:
    6c9c:	f5 cc       	rjmp	.-1558   	; 0x6688 <twi_disable>

00006c9e <_ZN7TwoWire8setClockEm>:
    6c9e:	cb 01       	movw	r24, r22
    6ca0:	ba 01       	movw	r22, r20
    6ca2:	ff cc       	rjmp	.-1538   	; 0x66a2 <twi_setFrequency>

00006ca4 <_ZN7TwoWire17beginTransmissionEh>:
    6ca4:	81 e0       	ldi	r24, 0x01	; 1
    6ca6:	80 93 e8 0c 	sts	0x0CE8, r24	; 0x800ce8 <_ZN7TwoWire12transmittingE>
    6caa:	60 93 0b 0d 	sts	0x0D0B, r22	; 0x800d0b <_ZN7TwoWire9txAddressE>
    6cae:	10 92 ea 0c 	sts	0x0CEA, r1	; 0x800cea <_ZN7TwoWire13txBufferIndexE>
    6cb2:	10 92 e9 0c 	sts	0x0CE9, r1	; 0x800ce9 <_ZN7TwoWire14txBufferLengthE>
    6cb6:	08 95       	ret

00006cb8 <_ZN7TwoWire17beginTransmissionEi>:
    6cb8:	f5 cf       	rjmp	.-22     	; 0x6ca4 <_ZN7TwoWire17beginTransmissionEh>

00006cba <_ZN7TwoWire15endTransmissionEh>:
    6cba:	0f 93       	push	r16
    6cbc:	06 2f       	mov	r16, r22
    6cbe:	21 e0       	ldi	r18, 0x01	; 1
    6cc0:	40 91 e9 0c 	lds	r20, 0x0CE9	; 0x800ce9 <_ZN7TwoWire14txBufferLengthE>
    6cc4:	6b ee       	ldi	r22, 0xEB	; 235
    6cc6:	7c e0       	ldi	r23, 0x0C	; 12
    6cc8:	80 91 0b 0d 	lds	r24, 0x0D0B	; 0x800d0b <_ZN7TwoWire9txAddressE>
    6ccc:	46 dd       	rcall	.-1396   	; 0x675a <twi_writeTo>
    6cce:	10 92 ea 0c 	sts	0x0CEA, r1	; 0x800cea <_ZN7TwoWire13txBufferIndexE>
    6cd2:	10 92 e9 0c 	sts	0x0CE9, r1	; 0x800ce9 <_ZN7TwoWire14txBufferLengthE>
    6cd6:	10 92 e8 0c 	sts	0x0CE8, r1	; 0x800ce8 <_ZN7TwoWire12transmittingE>
    6cda:	0f 91       	pop	r16
    6cdc:	08 95       	ret

00006cde <_ZN7TwoWire11requestFromEhhmhh>:
    6cde:	4f 92       	push	r4
    6ce0:	5f 92       	push	r5
    6ce2:	6f 92       	push	r6
    6ce4:	7f 92       	push	r7
    6ce6:	af 92       	push	r10
    6ce8:	bf 92       	push	r11
    6cea:	cf 92       	push	r12
    6cec:	ef 92       	push	r14
    6cee:	ff 92       	push	r15
    6cf0:	0f 93       	push	r16
    6cf2:	1f 93       	push	r17
    6cf4:	cf 93       	push	r28
    6cf6:	df 93       	push	r29
    6cf8:	5c 01       	movw	r10, r24
    6cfa:	f6 2e       	mov	r15, r22
    6cfc:	d4 2f       	mov	r29, r20
    6cfe:	28 01       	movw	r4, r16
    6d00:	39 01       	movw	r6, r18
    6d02:	ee 20       	and	r14, r14
    6d04:	11 f1       	breq	.+68     	; 0x6d4a <_ZN7TwoWire11requestFromEhhmhh+0x6c>
    6d06:	ce df       	rcall	.-100    	; 0x6ca4 <_ZN7TwoWire17beginTransmissionEh>
    6d08:	ce 2d       	mov	r28, r14
    6d0a:	c4 30       	cpi	r28, 0x04	; 4
    6d0c:	08 f0       	brcs	.+2      	; 0x6d10 <_ZN7TwoWire11requestFromEhhmhh+0x32>
    6d0e:	c3 e0       	ldi	r28, 0x03	; 3
    6d10:	c1 50       	subi	r28, 0x01	; 1
    6d12:	c0 f0       	brcs	.+48     	; 0x6d44 <_ZN7TwoWire11requestFromEhhmhh+0x66>
    6d14:	28 e0       	ldi	r18, 0x08	; 8
    6d16:	c2 9f       	mul	r28, r18
    6d18:	c0 01       	movw	r24, r0
    6d1a:	11 24       	eor	r1, r1
    6d1c:	a3 01       	movw	r20, r6
    6d1e:	92 01       	movw	r18, r4
    6d20:	04 c0       	rjmp	.+8      	; 0x6d2a <_ZN7TwoWire11requestFromEhhmhh+0x4c>
    6d22:	56 95       	lsr	r21
    6d24:	47 95       	ror	r20
    6d26:	37 95       	ror	r19
    6d28:	27 95       	ror	r18
    6d2a:	8a 95       	dec	r24
    6d2c:	d2 f7       	brpl	.-12     	; 0x6d22 <_ZN7TwoWire11requestFromEhhmhh+0x44>
    6d2e:	ca 01       	movw	r24, r20
    6d30:	b9 01       	movw	r22, r18
    6d32:	d5 01       	movw	r26, r10
    6d34:	ed 91       	ld	r30, X+
    6d36:	fc 91       	ld	r31, X
    6d38:	01 90       	ld	r0, Z+
    6d3a:	f0 81       	ld	r31, Z
    6d3c:	e0 2d       	mov	r30, r0
    6d3e:	c5 01       	movw	r24, r10
    6d40:	09 95       	icall
    6d42:	e6 cf       	rjmp	.-52     	; 0x6d10 <_ZN7TwoWire11requestFromEhhmhh+0x32>
    6d44:	60 e0       	ldi	r22, 0x00	; 0
    6d46:	c5 01       	movw	r24, r10
    6d48:	b8 df       	rcall	.-144    	; 0x6cba <_ZN7TwoWire15endTransmissionEh>
    6d4a:	4d 2f       	mov	r20, r29
    6d4c:	d1 32       	cpi	r29, 0x21	; 33
    6d4e:	08 f0       	brcs	.+2      	; 0x6d52 <_ZN7TwoWire11requestFromEhhmhh+0x74>
    6d50:	40 e2       	ldi	r20, 0x20	; 32
    6d52:	2c 2d       	mov	r18, r12
    6d54:	6e e0       	ldi	r22, 0x0E	; 14
    6d56:	7d e0       	ldi	r23, 0x0D	; 13
    6d58:	8f 2d       	mov	r24, r15
    6d5a:	b7 dc       	rcall	.-1682   	; 0x66ca <twi_readFrom>
    6d5c:	10 92 0d 0d 	sts	0x0D0D, r1	; 0x800d0d <_ZN7TwoWire13rxBufferIndexE>
    6d60:	80 93 0c 0d 	sts	0x0D0C, r24	; 0x800d0c <_ZN7TwoWire14rxBufferLengthE>
    6d64:	df 91       	pop	r29
    6d66:	cf 91       	pop	r28
    6d68:	1f 91       	pop	r17
    6d6a:	0f 91       	pop	r16
    6d6c:	ff 90       	pop	r15
    6d6e:	ef 90       	pop	r14
    6d70:	cf 90       	pop	r12
    6d72:	bf 90       	pop	r11
    6d74:	af 90       	pop	r10
    6d76:	7f 90       	pop	r7
    6d78:	6f 90       	pop	r6
    6d7a:	5f 90       	pop	r5
    6d7c:	4f 90       	pop	r4
    6d7e:	08 95       	ret

00006d80 <_ZN7TwoWire11requestFromEhhh>:
    6d80:	cf 92       	push	r12
    6d82:	ef 92       	push	r14
    6d84:	0f 93       	push	r16
    6d86:	1f 93       	push	r17
    6d88:	c2 2e       	mov	r12, r18
    6d8a:	e1 2c       	mov	r14, r1
    6d8c:	00 e0       	ldi	r16, 0x00	; 0
    6d8e:	10 e0       	ldi	r17, 0x00	; 0
    6d90:	98 01       	movw	r18, r16
    6d92:	a5 df       	rcall	.-182    	; 0x6cde <_ZN7TwoWire11requestFromEhhmhh>
    6d94:	1f 91       	pop	r17
    6d96:	0f 91       	pop	r16
    6d98:	ef 90       	pop	r14
    6d9a:	cf 90       	pop	r12
    6d9c:	08 95       	ret

00006d9e <_ZN7TwoWire11requestFromEhh>:
    6d9e:	21 e0       	ldi	r18, 0x01	; 1
    6da0:	ef cf       	rjmp	.-34     	; 0x6d80 <_ZN7TwoWire11requestFromEhhh>

00006da2 <_ZN7TwoWire11requestFromEii>:
    6da2:	21 e0       	ldi	r18, 0x01	; 1
    6da4:	ed cf       	rjmp	.-38     	; 0x6d80 <_ZN7TwoWire11requestFromEhhh>

00006da6 <_ZN7TwoWire15endTransmissionEv>:
    6da6:	61 e0       	ldi	r22, 0x01	; 1
    6da8:	88 cf       	rjmp	.-240    	; 0x6cba <_ZN7TwoWire15endTransmissionEh>

00006daa <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    6daa:	88 ed       	ldi	r24, 0xD8	; 216
    6dac:	9c e0       	ldi	r25, 0x0C	; 12
    6dae:	57 cf       	rjmp	.-338    	; 0x6c5e <_ZN7TwoWireC1Ev>

00006db0 <__cmpsf2>:
    6db0:	a8 d0       	rcall	.+336    	; 0x6f02 <__fp_cmp>
    6db2:	08 f4       	brcc	.+2      	; 0x6db6 <__cmpsf2+0x6>
    6db4:	81 e0       	ldi	r24, 0x01	; 1
    6db6:	08 95       	ret

00006db8 <__divsf3>:
    6db8:	0c d0       	rcall	.+24     	; 0x6dd2 <__divsf3x>
    6dba:	de c0       	rjmp	.+444    	; 0x6f78 <__fp_round>
    6dbc:	d6 d0       	rcall	.+428    	; 0x6f6a <__fp_pscB>
    6dbe:	40 f0       	brcs	.+16     	; 0x6dd0 <__divsf3+0x18>
    6dc0:	cd d0       	rcall	.+410    	; 0x6f5c <__fp_pscA>
    6dc2:	30 f0       	brcs	.+12     	; 0x6dd0 <__divsf3+0x18>
    6dc4:	21 f4       	brne	.+8      	; 0x6dce <__divsf3+0x16>
    6dc6:	5f 3f       	cpi	r21, 0xFF	; 255
    6dc8:	19 f0       	breq	.+6      	; 0x6dd0 <__divsf3+0x18>
    6dca:	bf c0       	rjmp	.+382    	; 0x6f4a <__fp_inf>
    6dcc:	51 11       	cpse	r21, r1
    6dce:	08 c1       	rjmp	.+528    	; 0x6fe0 <__fp_szero>
    6dd0:	c2 c0       	rjmp	.+388    	; 0x6f56 <__fp_nan>

00006dd2 <__divsf3x>:
    6dd2:	e3 d0       	rcall	.+454    	; 0x6f9a <__fp_split3>
    6dd4:	98 f3       	brcs	.-26     	; 0x6dbc <__divsf3+0x4>

00006dd6 <__divsf3_pse>:
    6dd6:	99 23       	and	r25, r25
    6dd8:	c9 f3       	breq	.-14     	; 0x6dcc <__divsf3+0x14>
    6dda:	55 23       	and	r21, r21
    6ddc:	b1 f3       	breq	.-20     	; 0x6dca <__divsf3+0x12>
    6dde:	95 1b       	sub	r25, r21
    6de0:	55 0b       	sbc	r21, r21
    6de2:	bb 27       	eor	r27, r27
    6de4:	aa 27       	eor	r26, r26
    6de6:	62 17       	cp	r22, r18
    6de8:	73 07       	cpc	r23, r19
    6dea:	84 07       	cpc	r24, r20
    6dec:	38 f0       	brcs	.+14     	; 0x6dfc <__divsf3_pse+0x26>
    6dee:	9f 5f       	subi	r25, 0xFF	; 255
    6df0:	5f 4f       	sbci	r21, 0xFF	; 255
    6df2:	22 0f       	add	r18, r18
    6df4:	33 1f       	adc	r19, r19
    6df6:	44 1f       	adc	r20, r20
    6df8:	aa 1f       	adc	r26, r26
    6dfa:	a9 f3       	breq	.-22     	; 0x6de6 <__divsf3_pse+0x10>
    6dfc:	33 d0       	rcall	.+102    	; 0x6e64 <__divsf3_pse+0x8e>
    6dfe:	0e 2e       	mov	r0, r30
    6e00:	3a f0       	brmi	.+14     	; 0x6e10 <__divsf3_pse+0x3a>
    6e02:	e0 e8       	ldi	r30, 0x80	; 128
    6e04:	30 d0       	rcall	.+96     	; 0x6e66 <__divsf3_pse+0x90>
    6e06:	91 50       	subi	r25, 0x01	; 1
    6e08:	50 40       	sbci	r21, 0x00	; 0
    6e0a:	e6 95       	lsr	r30
    6e0c:	00 1c       	adc	r0, r0
    6e0e:	ca f7       	brpl	.-14     	; 0x6e02 <__divsf3_pse+0x2c>
    6e10:	29 d0       	rcall	.+82     	; 0x6e64 <__divsf3_pse+0x8e>
    6e12:	fe 2f       	mov	r31, r30
    6e14:	27 d0       	rcall	.+78     	; 0x6e64 <__divsf3_pse+0x8e>
    6e16:	66 0f       	add	r22, r22
    6e18:	77 1f       	adc	r23, r23
    6e1a:	88 1f       	adc	r24, r24
    6e1c:	bb 1f       	adc	r27, r27
    6e1e:	26 17       	cp	r18, r22
    6e20:	37 07       	cpc	r19, r23
    6e22:	48 07       	cpc	r20, r24
    6e24:	ab 07       	cpc	r26, r27
    6e26:	b0 e8       	ldi	r27, 0x80	; 128
    6e28:	09 f0       	breq	.+2      	; 0x6e2c <__divsf3_pse+0x56>
    6e2a:	bb 0b       	sbc	r27, r27
    6e2c:	80 2d       	mov	r24, r0
    6e2e:	bf 01       	movw	r22, r30
    6e30:	ff 27       	eor	r31, r31
    6e32:	93 58       	subi	r25, 0x83	; 131
    6e34:	5f 4f       	sbci	r21, 0xFF	; 255
    6e36:	2a f0       	brmi	.+10     	; 0x6e42 <__divsf3_pse+0x6c>
    6e38:	9e 3f       	cpi	r25, 0xFE	; 254
    6e3a:	51 05       	cpc	r21, r1
    6e3c:	68 f0       	brcs	.+26     	; 0x6e58 <__divsf3_pse+0x82>
    6e3e:	85 c0       	rjmp	.+266    	; 0x6f4a <__fp_inf>
    6e40:	cf c0       	rjmp	.+414    	; 0x6fe0 <__fp_szero>
    6e42:	5f 3f       	cpi	r21, 0xFF	; 255
    6e44:	ec f3       	brlt	.-6      	; 0x6e40 <__divsf3_pse+0x6a>
    6e46:	98 3e       	cpi	r25, 0xE8	; 232
    6e48:	dc f3       	brlt	.-10     	; 0x6e40 <__divsf3_pse+0x6a>
    6e4a:	86 95       	lsr	r24
    6e4c:	77 95       	ror	r23
    6e4e:	67 95       	ror	r22
    6e50:	b7 95       	ror	r27
    6e52:	f7 95       	ror	r31
    6e54:	9f 5f       	subi	r25, 0xFF	; 255
    6e56:	c9 f7       	brne	.-14     	; 0x6e4a <__divsf3_pse+0x74>
    6e58:	88 0f       	add	r24, r24
    6e5a:	91 1d       	adc	r25, r1
    6e5c:	96 95       	lsr	r25
    6e5e:	87 95       	ror	r24
    6e60:	97 f9       	bld	r25, 7
    6e62:	08 95       	ret
    6e64:	e1 e0       	ldi	r30, 0x01	; 1
    6e66:	66 0f       	add	r22, r22
    6e68:	77 1f       	adc	r23, r23
    6e6a:	88 1f       	adc	r24, r24
    6e6c:	bb 1f       	adc	r27, r27
    6e6e:	62 17       	cp	r22, r18
    6e70:	73 07       	cpc	r23, r19
    6e72:	84 07       	cpc	r24, r20
    6e74:	ba 07       	cpc	r27, r26
    6e76:	20 f0       	brcs	.+8      	; 0x6e80 <__divsf3_pse+0xaa>
    6e78:	62 1b       	sub	r22, r18
    6e7a:	73 0b       	sbc	r23, r19
    6e7c:	84 0b       	sbc	r24, r20
    6e7e:	ba 0b       	sbc	r27, r26
    6e80:	ee 1f       	adc	r30, r30
    6e82:	88 f7       	brcc	.-30     	; 0x6e66 <__divsf3_pse+0x90>
    6e84:	e0 95       	com	r30
    6e86:	08 95       	ret

00006e88 <__floatunsisf>:
    6e88:	e8 94       	clt
    6e8a:	09 c0       	rjmp	.+18     	; 0x6e9e <__floatsisf+0x12>

00006e8c <__floatsisf>:
    6e8c:	97 fb       	bst	r25, 7
    6e8e:	3e f4       	brtc	.+14     	; 0x6e9e <__floatsisf+0x12>
    6e90:	90 95       	com	r25
    6e92:	80 95       	com	r24
    6e94:	70 95       	com	r23
    6e96:	61 95       	neg	r22
    6e98:	7f 4f       	sbci	r23, 0xFF	; 255
    6e9a:	8f 4f       	sbci	r24, 0xFF	; 255
    6e9c:	9f 4f       	sbci	r25, 0xFF	; 255
    6e9e:	99 23       	and	r25, r25
    6ea0:	a9 f0       	breq	.+42     	; 0x6ecc <__floatsisf+0x40>
    6ea2:	f9 2f       	mov	r31, r25
    6ea4:	96 e9       	ldi	r25, 0x96	; 150
    6ea6:	bb 27       	eor	r27, r27
    6ea8:	93 95       	inc	r25
    6eaa:	f6 95       	lsr	r31
    6eac:	87 95       	ror	r24
    6eae:	77 95       	ror	r23
    6eb0:	67 95       	ror	r22
    6eb2:	b7 95       	ror	r27
    6eb4:	f1 11       	cpse	r31, r1
    6eb6:	f8 cf       	rjmp	.-16     	; 0x6ea8 <__floatsisf+0x1c>
    6eb8:	fa f4       	brpl	.+62     	; 0x6ef8 <__floatsisf+0x6c>
    6eba:	bb 0f       	add	r27, r27
    6ebc:	11 f4       	brne	.+4      	; 0x6ec2 <__floatsisf+0x36>
    6ebe:	60 ff       	sbrs	r22, 0
    6ec0:	1b c0       	rjmp	.+54     	; 0x6ef8 <__floatsisf+0x6c>
    6ec2:	6f 5f       	subi	r22, 0xFF	; 255
    6ec4:	7f 4f       	sbci	r23, 0xFF	; 255
    6ec6:	8f 4f       	sbci	r24, 0xFF	; 255
    6ec8:	9f 4f       	sbci	r25, 0xFF	; 255
    6eca:	16 c0       	rjmp	.+44     	; 0x6ef8 <__floatsisf+0x6c>
    6ecc:	88 23       	and	r24, r24
    6ece:	11 f0       	breq	.+4      	; 0x6ed4 <__floatsisf+0x48>
    6ed0:	96 e9       	ldi	r25, 0x96	; 150
    6ed2:	11 c0       	rjmp	.+34     	; 0x6ef6 <__floatsisf+0x6a>
    6ed4:	77 23       	and	r23, r23
    6ed6:	21 f0       	breq	.+8      	; 0x6ee0 <__floatsisf+0x54>
    6ed8:	9e e8       	ldi	r25, 0x8E	; 142
    6eda:	87 2f       	mov	r24, r23
    6edc:	76 2f       	mov	r23, r22
    6ede:	05 c0       	rjmp	.+10     	; 0x6eea <__floatsisf+0x5e>
    6ee0:	66 23       	and	r22, r22
    6ee2:	71 f0       	breq	.+28     	; 0x6f00 <__floatsisf+0x74>
    6ee4:	96 e8       	ldi	r25, 0x86	; 134
    6ee6:	86 2f       	mov	r24, r22
    6ee8:	70 e0       	ldi	r23, 0x00	; 0
    6eea:	60 e0       	ldi	r22, 0x00	; 0
    6eec:	2a f0       	brmi	.+10     	; 0x6ef8 <__floatsisf+0x6c>
    6eee:	9a 95       	dec	r25
    6ef0:	66 0f       	add	r22, r22
    6ef2:	77 1f       	adc	r23, r23
    6ef4:	88 1f       	adc	r24, r24
    6ef6:	da f7       	brpl	.-10     	; 0x6eee <__floatsisf+0x62>
    6ef8:	88 0f       	add	r24, r24
    6efa:	96 95       	lsr	r25
    6efc:	87 95       	ror	r24
    6efe:	97 f9       	bld	r25, 7
    6f00:	08 95       	ret

00006f02 <__fp_cmp>:
    6f02:	99 0f       	add	r25, r25
    6f04:	00 08       	sbc	r0, r0
    6f06:	55 0f       	add	r21, r21
    6f08:	aa 0b       	sbc	r26, r26
    6f0a:	e0 e8       	ldi	r30, 0x80	; 128
    6f0c:	fe ef       	ldi	r31, 0xFE	; 254
    6f0e:	16 16       	cp	r1, r22
    6f10:	17 06       	cpc	r1, r23
    6f12:	e8 07       	cpc	r30, r24
    6f14:	f9 07       	cpc	r31, r25
    6f16:	c0 f0       	brcs	.+48     	; 0x6f48 <__fp_cmp+0x46>
    6f18:	12 16       	cp	r1, r18
    6f1a:	13 06       	cpc	r1, r19
    6f1c:	e4 07       	cpc	r30, r20
    6f1e:	f5 07       	cpc	r31, r21
    6f20:	98 f0       	brcs	.+38     	; 0x6f48 <__fp_cmp+0x46>
    6f22:	62 1b       	sub	r22, r18
    6f24:	73 0b       	sbc	r23, r19
    6f26:	84 0b       	sbc	r24, r20
    6f28:	95 0b       	sbc	r25, r21
    6f2a:	39 f4       	brne	.+14     	; 0x6f3a <__fp_cmp+0x38>
    6f2c:	0a 26       	eor	r0, r26
    6f2e:	61 f0       	breq	.+24     	; 0x6f48 <__fp_cmp+0x46>
    6f30:	23 2b       	or	r18, r19
    6f32:	24 2b       	or	r18, r20
    6f34:	25 2b       	or	r18, r21
    6f36:	21 f4       	brne	.+8      	; 0x6f40 <__fp_cmp+0x3e>
    6f38:	08 95       	ret
    6f3a:	0a 26       	eor	r0, r26
    6f3c:	09 f4       	brne	.+2      	; 0x6f40 <__fp_cmp+0x3e>
    6f3e:	a1 40       	sbci	r26, 0x01	; 1
    6f40:	a6 95       	lsr	r26
    6f42:	8f ef       	ldi	r24, 0xFF	; 255
    6f44:	81 1d       	adc	r24, r1
    6f46:	81 1d       	adc	r24, r1
    6f48:	08 95       	ret

00006f4a <__fp_inf>:
    6f4a:	97 f9       	bld	r25, 7
    6f4c:	9f 67       	ori	r25, 0x7F	; 127
    6f4e:	80 e8       	ldi	r24, 0x80	; 128
    6f50:	70 e0       	ldi	r23, 0x00	; 0
    6f52:	60 e0       	ldi	r22, 0x00	; 0
    6f54:	08 95       	ret

00006f56 <__fp_nan>:
    6f56:	9f ef       	ldi	r25, 0xFF	; 255
    6f58:	80 ec       	ldi	r24, 0xC0	; 192
    6f5a:	08 95       	ret

00006f5c <__fp_pscA>:
    6f5c:	00 24       	eor	r0, r0
    6f5e:	0a 94       	dec	r0
    6f60:	16 16       	cp	r1, r22
    6f62:	17 06       	cpc	r1, r23
    6f64:	18 06       	cpc	r1, r24
    6f66:	09 06       	cpc	r0, r25
    6f68:	08 95       	ret

00006f6a <__fp_pscB>:
    6f6a:	00 24       	eor	r0, r0
    6f6c:	0a 94       	dec	r0
    6f6e:	12 16       	cp	r1, r18
    6f70:	13 06       	cpc	r1, r19
    6f72:	14 06       	cpc	r1, r20
    6f74:	05 06       	cpc	r0, r21
    6f76:	08 95       	ret

00006f78 <__fp_round>:
    6f78:	09 2e       	mov	r0, r25
    6f7a:	03 94       	inc	r0
    6f7c:	00 0c       	add	r0, r0
    6f7e:	11 f4       	brne	.+4      	; 0x6f84 <__fp_round+0xc>
    6f80:	88 23       	and	r24, r24
    6f82:	52 f0       	brmi	.+20     	; 0x6f98 <__fp_round+0x20>
    6f84:	bb 0f       	add	r27, r27
    6f86:	40 f4       	brcc	.+16     	; 0x6f98 <__fp_round+0x20>
    6f88:	bf 2b       	or	r27, r31
    6f8a:	11 f4       	brne	.+4      	; 0x6f90 <__fp_round+0x18>
    6f8c:	60 ff       	sbrs	r22, 0
    6f8e:	04 c0       	rjmp	.+8      	; 0x6f98 <__fp_round+0x20>
    6f90:	6f 5f       	subi	r22, 0xFF	; 255
    6f92:	7f 4f       	sbci	r23, 0xFF	; 255
    6f94:	8f 4f       	sbci	r24, 0xFF	; 255
    6f96:	9f 4f       	sbci	r25, 0xFF	; 255
    6f98:	08 95       	ret

00006f9a <__fp_split3>:
    6f9a:	57 fd       	sbrc	r21, 7
    6f9c:	90 58       	subi	r25, 0x80	; 128
    6f9e:	44 0f       	add	r20, r20
    6fa0:	55 1f       	adc	r21, r21
    6fa2:	59 f0       	breq	.+22     	; 0x6fba <__fp_splitA+0x10>
    6fa4:	5f 3f       	cpi	r21, 0xFF	; 255
    6fa6:	71 f0       	breq	.+28     	; 0x6fc4 <__fp_splitA+0x1a>
    6fa8:	47 95       	ror	r20

00006faa <__fp_splitA>:
    6faa:	88 0f       	add	r24, r24
    6fac:	97 fb       	bst	r25, 7
    6fae:	99 1f       	adc	r25, r25
    6fb0:	61 f0       	breq	.+24     	; 0x6fca <__fp_splitA+0x20>
    6fb2:	9f 3f       	cpi	r25, 0xFF	; 255
    6fb4:	79 f0       	breq	.+30     	; 0x6fd4 <__fp_splitA+0x2a>
    6fb6:	87 95       	ror	r24
    6fb8:	08 95       	ret
    6fba:	12 16       	cp	r1, r18
    6fbc:	13 06       	cpc	r1, r19
    6fbe:	14 06       	cpc	r1, r20
    6fc0:	55 1f       	adc	r21, r21
    6fc2:	f2 cf       	rjmp	.-28     	; 0x6fa8 <__fp_split3+0xe>
    6fc4:	46 95       	lsr	r20
    6fc6:	f1 df       	rcall	.-30     	; 0x6faa <__fp_splitA>
    6fc8:	08 c0       	rjmp	.+16     	; 0x6fda <__fp_splitA+0x30>
    6fca:	16 16       	cp	r1, r22
    6fcc:	17 06       	cpc	r1, r23
    6fce:	18 06       	cpc	r1, r24
    6fd0:	99 1f       	adc	r25, r25
    6fd2:	f1 cf       	rjmp	.-30     	; 0x6fb6 <__fp_splitA+0xc>
    6fd4:	86 95       	lsr	r24
    6fd6:	71 05       	cpc	r23, r1
    6fd8:	61 05       	cpc	r22, r1
    6fda:	08 94       	sec
    6fdc:	08 95       	ret

00006fde <__fp_zero>:
    6fde:	e8 94       	clt

00006fe0 <__fp_szero>:
    6fe0:	bb 27       	eor	r27, r27
    6fe2:	66 27       	eor	r22, r22
    6fe4:	77 27       	eor	r23, r23
    6fe6:	cb 01       	movw	r24, r22
    6fe8:	97 f9       	bld	r25, 7
    6fea:	08 95       	ret

00006fec <__cxa_pure_virtual>:
    6fec:	0e 94 80 42 	call	0x8500	; 0x8500 <abort>

00006ff0 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    6ff0:	1f 92       	push	r1
    6ff2:	0f 92       	push	r0
    6ff4:	0f b6       	in	r0, 0x3f	; 63
    6ff6:	0f 92       	push	r0
    6ff8:	11 24       	eor	r1, r1
    6ffa:	2f 93       	push	r18
    6ffc:	8f 93       	push	r24
    6ffe:	9f 93       	push	r25
    7000:	ef 93       	push	r30
    7002:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    7004:	e0 91 3e 0d 	lds	r30, 0x0D3E	; 0x800d3e <Serial+0x10>
    7008:	f0 91 3f 0d 	lds	r31, 0x0D3F	; 0x800d3f <Serial+0x11>
    700c:	80 81       	ld	r24, Z
    700e:	e0 91 44 0d 	lds	r30, 0x0D44	; 0x800d44 <Serial+0x16>
    7012:	f0 91 45 0d 	lds	r31, 0x0D45	; 0x800d45 <Serial+0x17>
    7016:	82 fd       	sbrc	r24, 2
    7018:	12 c0       	rjmp	.+36     	; 0x703e <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    701a:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    701c:	80 91 47 0d 	lds	r24, 0x0D47	; 0x800d47 <Serial+0x19>
    7020:	8f 5f       	subi	r24, 0xFF	; 255
    7022:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    7024:	20 91 48 0d 	lds	r18, 0x0D48	; 0x800d48 <Serial+0x1a>
    7028:	82 17       	cp	r24, r18
    702a:	51 f0       	breq	.+20     	; 0x7040 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    702c:	e0 91 47 0d 	lds	r30, 0x0D47	; 0x800d47 <Serial+0x19>
    7030:	f0 e0       	ldi	r31, 0x00	; 0
    7032:	e2 5d       	subi	r30, 0xD2	; 210
    7034:	f2 4f       	sbci	r31, 0xF2	; 242
    7036:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    7038:	80 93 47 0d 	sts	0x0D47, r24	; 0x800d47 <Serial+0x19>
    703c:	01 c0       	rjmp	.+2      	; 0x7040 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    703e:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    7040:	ff 91       	pop	r31
    7042:	ef 91       	pop	r30
    7044:	9f 91       	pop	r25
    7046:	8f 91       	pop	r24
    7048:	2f 91       	pop	r18
    704a:	0f 90       	pop	r0
    704c:	0f be       	out	0x3f, r0	; 63
    704e:	0f 90       	pop	r0
    7050:	1f 90       	pop	r1
    7052:	18 95       	reti

00007054 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    7054:	1f 92       	push	r1
    7056:	0f 92       	push	r0
    7058:	0f b6       	in	r0, 0x3f	; 63
    705a:	0f 92       	push	r0
    705c:	11 24       	eor	r1, r1
    705e:	2f 93       	push	r18
    7060:	3f 93       	push	r19
    7062:	4f 93       	push	r20
    7064:	5f 93       	push	r21
    7066:	6f 93       	push	r22
    7068:	7f 93       	push	r23
    706a:	8f 93       	push	r24
    706c:	9f 93       	push	r25
    706e:	af 93       	push	r26
    7070:	bf 93       	push	r27
    7072:	ef 93       	push	r30
    7074:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    7076:	8e e2       	ldi	r24, 0x2E	; 46
    7078:	9d e0       	ldi	r25, 0x0D	; 13
    707a:	2e d7       	rcall	.+3676   	; 0x7ed8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    707c:	ff 91       	pop	r31
    707e:	ef 91       	pop	r30
    7080:	bf 91       	pop	r27
    7082:	af 91       	pop	r26
    7084:	9f 91       	pop	r25
    7086:	8f 91       	pop	r24
    7088:	7f 91       	pop	r23
    708a:	6f 91       	pop	r22
    708c:	5f 91       	pop	r21
    708e:	4f 91       	pop	r20
    7090:	3f 91       	pop	r19
    7092:	2f 91       	pop	r18
    7094:	0f 90       	pop	r0
    7096:	0f be       	out	0x3f, r0	; 63
    7098:	0f 90       	pop	r0
    709a:	1f 90       	pop	r1
    709c:	18 95       	reti

0000709e <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    709e:	8e e2       	ldi	r24, 0x2E	; 46
    70a0:	9d e0       	ldi	r25, 0x0D	; 13
    70a2:	d0 d6       	rcall	.+3488   	; 0x7e44 <_ZN14HardwareSerial9availableEv>
    70a4:	21 e0       	ldi	r18, 0x01	; 1
    70a6:	89 2b       	or	r24, r25
    70a8:	09 f4       	brne	.+2      	; 0x70ac <_Z17Serial0_availablev+0xe>
    70aa:	20 e0       	ldi	r18, 0x00	; 0
}
    70ac:	82 2f       	mov	r24, r18
    70ae:	08 95       	ret

000070b0 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    70b0:	ee e2       	ldi	r30, 0x2E	; 46
    70b2:	fd e0       	ldi	r31, 0x0D	; 13
    70b4:	13 82       	std	Z+3, r1	; 0x03
    70b6:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    70b8:	88 ee       	ldi	r24, 0xE8	; 232
    70ba:	93 e0       	ldi	r25, 0x03	; 3
    70bc:	a0 e0       	ldi	r26, 0x00	; 0
    70be:	b0 e0       	ldi	r27, 0x00	; 0
    70c0:	84 83       	std	Z+4, r24	; 0x04
    70c2:	95 83       	std	Z+5, r25	; 0x05
    70c4:	a6 83       	std	Z+6, r26	; 0x06
    70c6:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    70c8:	84 e8       	ldi	r24, 0x84	; 132
    70ca:	9a e0       	ldi	r25, 0x0A	; 10
    70cc:	91 83       	std	Z+1, r25	; 0x01
    70ce:	80 83       	st	Z, r24
    70d0:	85 ec       	ldi	r24, 0xC5	; 197
    70d2:	90 e0       	ldi	r25, 0x00	; 0
    70d4:	95 87       	std	Z+13, r25	; 0x0d
    70d6:	84 87       	std	Z+12, r24	; 0x0c
    70d8:	84 ec       	ldi	r24, 0xC4	; 196
    70da:	90 e0       	ldi	r25, 0x00	; 0
    70dc:	97 87       	std	Z+15, r25	; 0x0f
    70de:	86 87       	std	Z+14, r24	; 0x0e
    70e0:	80 ec       	ldi	r24, 0xC0	; 192
    70e2:	90 e0       	ldi	r25, 0x00	; 0
    70e4:	91 8b       	std	Z+17, r25	; 0x11
    70e6:	80 8b       	std	Z+16, r24	; 0x10
    70e8:	81 ec       	ldi	r24, 0xC1	; 193
    70ea:	90 e0       	ldi	r25, 0x00	; 0
    70ec:	93 8b       	std	Z+19, r25	; 0x13
    70ee:	82 8b       	std	Z+18, r24	; 0x12
    70f0:	82 ec       	ldi	r24, 0xC2	; 194
    70f2:	90 e0       	ldi	r25, 0x00	; 0
    70f4:	95 8b       	std	Z+21, r25	; 0x15
    70f6:	84 8b       	std	Z+20, r24	; 0x14
    70f8:	86 ec       	ldi	r24, 0xC6	; 198
    70fa:	90 e0       	ldi	r25, 0x00	; 0
    70fc:	97 8b       	std	Z+23, r25	; 0x17
    70fe:	86 8b       	std	Z+22, r24	; 0x16
    7100:	11 8e       	std	Z+25, r1	; 0x19
    7102:	12 8e       	std	Z+26, r1	; 0x1a
    7104:	13 8e       	std	Z+27, r1	; 0x1b
    7106:	14 8e       	std	Z+28, r1	; 0x1c
    7108:	08 95       	ret

0000710a <_ZNK9IPAddress7printToER5Print>:
        // Too few dots (there must be 3 dots)
        return false;
    }
    _address.bytes[3] = acc;
    return true;
}
    710a:	8f 92       	push	r8
    710c:	9f 92       	push	r9
    710e:	af 92       	push	r10
    7110:	bf 92       	push	r11
    7112:	cf 92       	push	r12
    7114:	df 92       	push	r13
    7116:	ef 92       	push	r14
    7118:	ff 92       	push	r15
    711a:	0f 93       	push	r16
    711c:	1f 93       	push	r17
    711e:	cf 93       	push	r28
    7120:	df 93       	push	r29
    7122:	7c 01       	movw	r14, r24
    7124:	8b 01       	movw	r16, r22
    7126:	4c 01       	movw	r8, r24
    7128:	82 e0       	ldi	r24, 0x02	; 2
    712a:	88 0e       	add	r8, r24
    712c:	91 1c       	adc	r9, r1
    712e:	57 01       	movw	r10, r14
    7130:	e5 e0       	ldi	r30, 0x05	; 5
    7132:	ae 0e       	add	r10, r30
    7134:	b1 1c       	adc	r11, r1
    7136:	c0 e0       	ldi	r28, 0x00	; 0
    7138:	d0 e0       	ldi	r29, 0x00	; 0
    713a:	f4 01       	movw	r30, r8
    713c:	61 91       	ld	r22, Z+
    713e:	4f 01       	movw	r8, r30
    7140:	4a e0       	ldi	r20, 0x0A	; 10
    7142:	50 e0       	ldi	r21, 0x00	; 0
    7144:	c8 01       	movw	r24, r16
    7146:	4b d1       	rcall	.+662    	; 0x73de <_ZN5Print5printEhi>
    7148:	6c 01       	movw	r12, r24
    714a:	6e e2       	ldi	r22, 0x2E	; 46
    714c:	c8 01       	movw	r24, r16
    714e:	ba d0       	rcall	.+372    	; 0x72c4 <_ZN5Print5printEc>
    7150:	8c 0d       	add	r24, r12
    7152:	9d 1d       	adc	r25, r13
    7154:	c8 0f       	add	r28, r24
    7156:	d9 1f       	adc	r29, r25
    7158:	8a 14       	cp	r8, r10
    715a:	9b 04       	cpc	r9, r11
    715c:	71 f7       	brne	.-36     	; 0x713a <_ZNK9IPAddress7printToER5Print+0x30>
    715e:	4a e0       	ldi	r20, 0x0A	; 10
    7160:	50 e0       	ldi	r21, 0x00	; 0
    7162:	f7 01       	movw	r30, r14
    7164:	65 81       	ldd	r22, Z+5	; 0x05
    7166:	c8 01       	movw	r24, r16
    7168:	3a d1       	rcall	.+628    	; 0x73de <_ZN5Print5printEhi>
    716a:	8c 0f       	add	r24, r28
    716c:	9d 1f       	adc	r25, r29
    716e:	df 91       	pop	r29
    7170:	cf 91       	pop	r28
    7172:	1f 91       	pop	r17
    7174:	0f 91       	pop	r16
    7176:	ff 90       	pop	r15
    7178:	ef 90       	pop	r14
    717a:	df 90       	pop	r13
    717c:	cf 90       	pop	r12
    717e:	bf 90       	pop	r11
    7180:	af 90       	pop	r10
    7182:	9f 90       	pop	r9
    7184:	8f 90       	pop	r8
    7186:	08 95       	ret

00007188 <_ZN9IPAddressC1Ev>:
    7188:	22 e7       	ldi	r18, 0x72	; 114
    718a:	3a e0       	ldi	r19, 0x0A	; 10
    718c:	fc 01       	movw	r30, r24
    718e:	31 83       	std	Z+1, r19	; 0x01
    7190:	20 83       	st	Z, r18
    7192:	12 82       	std	Z+2, r1	; 0x02
    7194:	13 82       	std	Z+3, r1	; 0x03
    7196:	14 82       	std	Z+4, r1	; 0x04
    7198:	15 82       	std	Z+5, r1	; 0x05
    719a:	08 95       	ret

0000719c <_ZN9IPAddressC1Ehhhh>:
    719c:	0f 93       	push	r16
    719e:	fc 01       	movw	r30, r24
    71a0:	82 e7       	ldi	r24, 0x72	; 114
    71a2:	9a e0       	ldi	r25, 0x0A	; 10
    71a4:	91 83       	std	Z+1, r25	; 0x01
    71a6:	80 83       	st	Z, r24
    71a8:	62 83       	std	Z+2, r22	; 0x02
    71aa:	43 83       	std	Z+3, r20	; 0x03
    71ac:	24 83       	std	Z+4, r18	; 0x04
    71ae:	05 83       	std	Z+5, r16	; 0x05
    71b0:	0f 91       	pop	r16
    71b2:	08 95       	ret

000071b4 <_ZN9IPAddressaSEPKh>:

IPAddress& IPAddress::operator=(const uint8_t *address)
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
    71b4:	dc 01       	movw	r26, r24
    71b6:	12 96       	adiw	r26, 0x02	; 2
    71b8:	24 e0       	ldi	r18, 0x04	; 4
    71ba:	fb 01       	movw	r30, r22
    71bc:	01 90       	ld	r0, Z+
    71be:	0d 92       	st	X+, r0
    71c0:	2a 95       	dec	r18
    71c2:	e1 f7       	brne	.-8      	; 0x71bc <_ZN9IPAddressaSEPKh+0x8>
    return *this;
}
    71c4:	08 95       	ret

000071c6 <initVariant>:
    71c6:	08 95       	ret

000071c8 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    71c8:	e4 d1       	rcall	.+968    	; 0x7592 <init>

	initVariant();
    71ca:	fd df       	rcall	.-6      	; 0x71c6 <initVariant>
    71cc:	0e 94 9f 1b 	call	0x373e	; 0x373e <setup>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    71d0:	cf e5       	ldi	r28, 0x5F	; 95
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    71d2:	df e3       	ldi	r29, 0x3F	; 63
    71d4:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <loop>
#endif
	
	setup();
    
	for (;;) {
		loop();
    71d8:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
    71da:	e1 f3       	breq	.-8      	; 0x71d4 <main+0xc>
    71dc:	70 d6       	rcall	.+3296   	; 0x7ebe <_Z14serialEventRunv>
    71de:	fa cf       	rjmp	.-12     	; 0x71d4 <main+0xc>

000071e0 <_ZN5Print5writeEPKhj>:
    71e0:	cf 92       	push	r12
size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    71e2:	df 92       	push	r13
    71e4:	ef 92       	push	r14
    71e6:	ff 92       	push	r15
    71e8:	0f 93       	push	r16
    71ea:	1f 93       	push	r17
    71ec:	cf 93       	push	r28
    71ee:	df 93       	push	r29
    71f0:	6c 01       	movw	r12, r24
    71f2:	7a 01       	movw	r14, r20
    71f4:	8b 01       	movw	r16, r22
    71f6:	c0 e0       	ldi	r28, 0x00	; 0
    71f8:	d0 e0       	ldi	r29, 0x00	; 0
    71fa:	ce 15       	cp	r28, r14
    71fc:	df 05       	cpc	r29, r15
    71fe:	81 f0       	breq	.+32     	; 0x7220 <_ZN5Print5writeEPKhj+0x40>
    7200:	d8 01       	movw	r26, r16
    7202:	6d 91       	ld	r22, X+
    7204:	8d 01       	movw	r16, r26
    7206:	d6 01       	movw	r26, r12
    7208:	ed 91       	ld	r30, X+
    720a:	fc 91       	ld	r31, X
    720c:	01 90       	ld	r0, Z+
    720e:	f0 81       	ld	r31, Z
    7210:	e0 2d       	mov	r30, r0
    7212:	c6 01       	movw	r24, r12
    7214:	09 95       	icall
    7216:	89 2b       	or	r24, r25
    7218:	11 f0       	breq	.+4      	; 0x721e <_ZN5Print5writeEPKhj+0x3e>
    721a:	21 96       	adiw	r28, 0x01	; 1
    721c:	ee cf       	rjmp	.-36     	; 0x71fa <_ZN5Print5writeEPKhj+0x1a>
    721e:	7e 01       	movw	r14, r28
    7220:	c7 01       	movw	r24, r14
    7222:	df 91       	pop	r29
    7224:	cf 91       	pop	r28
    7226:	1f 91       	pop	r17
    7228:	0f 91       	pop	r16
    722a:	ff 90       	pop	r15
    722c:	ef 90       	pop	r14
    722e:	df 90       	pop	r13
    7230:	cf 90       	pop	r12
    7232:	08 95       	ret

00007234 <_ZN5Print5writeEPKc>:
    7234:	61 15       	cp	r22, r1
    7236:	71 05       	cpc	r23, r1
    7238:	79 f0       	breq	.+30     	; 0x7258 <_ZN5Print5writeEPKc+0x24>
    723a:	fb 01       	movw	r30, r22
    723c:	01 90       	ld	r0, Z+
    723e:	00 20       	and	r0, r0
    7240:	e9 f7       	brne	.-6      	; 0x723c <_ZN5Print5writeEPKc+0x8>
    7242:	31 97       	sbiw	r30, 0x01	; 1
    7244:	af 01       	movw	r20, r30
    7246:	46 1b       	sub	r20, r22
    7248:	57 0b       	sbc	r21, r23
    724a:	dc 01       	movw	r26, r24
    724c:	ed 91       	ld	r30, X+
    724e:	fc 91       	ld	r31, X
    7250:	02 80       	ldd	r0, Z+2	; 0x02
    7252:	f3 81       	ldd	r31, Z+3	; 0x03
    7254:	e0 2d       	mov	r30, r0
    7256:	09 94       	ijmp
    7258:	80 e0       	ldi	r24, 0x00	; 0
    725a:	90 e0       	ldi	r25, 0x00	; 0
    725c:	08 95       	ret

0000725e <_ZN5Print5printEPK19__FlashStringHelper>:
    725e:	ef 92       	push	r14
    7260:	ff 92       	push	r15
    7262:	0f 93       	push	r16
    7264:	1f 93       	push	r17
    7266:	cf 93       	push	r28
    7268:	df 93       	push	r29
    726a:	8c 01       	movw	r16, r24
    726c:	7b 01       	movw	r14, r22
    726e:	c0 e0       	ldi	r28, 0x00	; 0
    7270:	d0 e0       	ldi	r29, 0x00	; 0
    7272:	f7 01       	movw	r30, r14
    7274:	ec 0f       	add	r30, r28
    7276:	fd 1f       	adc	r31, r29
    7278:	64 91       	lpm	r22, Z
    727a:	66 23       	and	r22, r22
    727c:	61 f0       	breq	.+24     	; 0x7296 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    727e:	d8 01       	movw	r26, r16
    7280:	ed 91       	ld	r30, X+
    7282:	fc 91       	ld	r31, X
    7284:	01 90       	ld	r0, Z+
    7286:	f0 81       	ld	r31, Z
    7288:	e0 2d       	mov	r30, r0
    728a:	c8 01       	movw	r24, r16
    728c:	09 95       	icall
    728e:	89 2b       	or	r24, r25
    7290:	11 f0       	breq	.+4      	; 0x7296 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    7292:	21 96       	adiw	r28, 0x01	; 1
    7294:	ee cf       	rjmp	.-36     	; 0x7272 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    7296:	ce 01       	movw	r24, r28
    7298:	df 91       	pop	r29
    729a:	cf 91       	pop	r28
    729c:	1f 91       	pop	r17
    729e:	0f 91       	pop	r16
    72a0:	ff 90       	pop	r15
    72a2:	ef 90       	pop	r14
    72a4:	08 95       	ret

000072a6 <_ZN5Print5printERK6String>:
    72a6:	db 01       	movw	r26, r22
    72a8:	14 96       	adiw	r26, 0x04	; 4
    72aa:	4d 91       	ld	r20, X+
    72ac:	5c 91       	ld	r21, X
    72ae:	15 97       	sbiw	r26, 0x05	; 5
    72b0:	6d 91       	ld	r22, X+
    72b2:	7c 91       	ld	r23, X
    72b4:	dc 01       	movw	r26, r24
    72b6:	ed 91       	ld	r30, X+
    72b8:	fc 91       	ld	r31, X
    72ba:	02 80       	ldd	r0, Z+2	; 0x02
    72bc:	f3 81       	ldd	r31, Z+3	; 0x03
    72be:	e0 2d       	mov	r30, r0
    72c0:	09 94       	ijmp

000072c2 <_ZN5Print5printEPKc>:
    72c2:	b8 cf       	rjmp	.-144    	; 0x7234 <_ZN5Print5writeEPKc>

000072c4 <_ZN5Print5printEc>:
    72c4:	dc 01       	movw	r26, r24
    72c6:	ed 91       	ld	r30, X+
    72c8:	fc 91       	ld	r31, X
    72ca:	01 90       	ld	r0, Z+
    72cc:	f0 81       	ld	r31, Z
    72ce:	e0 2d       	mov	r30, r0
    72d0:	09 94       	ijmp

000072d2 <_ZN5Print7printlnEv>:
    72d2:	6a e1       	ldi	r22, 0x1A	; 26
    72d4:	73 e0       	ldi	r23, 0x03	; 3
    72d6:	ae cf       	rjmp	.-164    	; 0x7234 <_ZN5Print5writeEPKc>

000072d8 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    72d8:	0f 93       	push	r16
    72da:	1f 93       	push	r17
    72dc:	cf 93       	push	r28
    72de:	df 93       	push	r29
    72e0:	ec 01       	movw	r28, r24
    72e2:	bd df       	rcall	.-134    	; 0x725e <_ZN5Print5printEPK19__FlashStringHelper>
    72e4:	8c 01       	movw	r16, r24
    72e6:	ce 01       	movw	r24, r28
    72e8:	f4 df       	rcall	.-24     	; 0x72d2 <_ZN5Print7printlnEv>
    72ea:	80 0f       	add	r24, r16
    72ec:	91 1f       	adc	r25, r17
    72ee:	df 91       	pop	r29
    72f0:	cf 91       	pop	r28
    72f2:	1f 91       	pop	r17
    72f4:	0f 91       	pop	r16
    72f6:	08 95       	ret

000072f8 <_ZN5Print7printlnERK6String>:
    72f8:	0f 93       	push	r16
    72fa:	1f 93       	push	r17
    72fc:	cf 93       	push	r28
    72fe:	df 93       	push	r29
    7300:	ec 01       	movw	r28, r24
    7302:	d1 df       	rcall	.-94     	; 0x72a6 <_ZN5Print5printERK6String>
    7304:	8c 01       	movw	r16, r24
    7306:	ce 01       	movw	r24, r28
    7308:	e4 df       	rcall	.-56     	; 0x72d2 <_ZN5Print7printlnEv>
    730a:	80 0f       	add	r24, r16
    730c:	91 1f       	adc	r25, r17
    730e:	df 91       	pop	r29
    7310:	cf 91       	pop	r28
    7312:	1f 91       	pop	r17
    7314:	0f 91       	pop	r16
    7316:	08 95       	ret

00007318 <_ZN5Print7printlnEPKc>:
    7318:	0f 93       	push	r16
    731a:	1f 93       	push	r17
    731c:	cf 93       	push	r28
    731e:	df 93       	push	r29
    7320:	ec 01       	movw	r28, r24
    7322:	88 df       	rcall	.-240    	; 0x7234 <_ZN5Print5writeEPKc>
    7324:	8c 01       	movw	r16, r24
    7326:	ce 01       	movw	r24, r28
    7328:	d4 df       	rcall	.-88     	; 0x72d2 <_ZN5Print7printlnEv>
    732a:	80 0f       	add	r24, r16
    732c:	91 1f       	adc	r25, r17
    732e:	df 91       	pop	r29
    7330:	cf 91       	pop	r28
    7332:	1f 91       	pop	r17
    7334:	0f 91       	pop	r16
    7336:	08 95       	ret

00007338 <_ZN5Print11printNumberEmh>:
    7338:	8f 92       	push	r8
    733a:	9f 92       	push	r9
    733c:	af 92       	push	r10
    733e:	bf 92       	push	r11
    7340:	ef 92       	push	r14
    7342:	ff 92       	push	r15
    7344:	0f 93       	push	r16
    7346:	1f 93       	push	r17
    7348:	cf 93       	push	r28
    734a:	df 93       	push	r29
    734c:	cd b7       	in	r28, 0x3d	; 61
    734e:	de b7       	in	r29, 0x3e	; 62
    7350:	a1 97       	sbiw	r28, 0x21	; 33
    7352:	0f b6       	in	r0, 0x3f	; 63
    7354:	f8 94       	cli
    7356:	de bf       	out	0x3e, r29	; 62
    7358:	0f be       	out	0x3f, r0	; 63
    735a:	cd bf       	out	0x3d, r28	; 61
    735c:	7c 01       	movw	r14, r24
    735e:	fa 01       	movw	r30, r20
    7360:	cb 01       	movw	r24, r22
    7362:	19 a2       	std	Y+33, r1	; 0x21
    7364:	22 30       	cpi	r18, 0x02	; 2
    7366:	08 f4       	brcc	.+2      	; 0x736a <_ZN5Print11printNumberEmh+0x32>
    7368:	2a e0       	ldi	r18, 0x0A	; 10
    736a:	8e 01       	movw	r16, r28
    736c:	0f 5d       	subi	r16, 0xDF	; 223
    736e:	1f 4f       	sbci	r17, 0xFF	; 255
    7370:	82 2e       	mov	r8, r18
    7372:	91 2c       	mov	r9, r1
    7374:	a1 2c       	mov	r10, r1
    7376:	b1 2c       	mov	r11, r1
    7378:	bf 01       	movw	r22, r30
    737a:	a5 01       	movw	r20, r10
    737c:	94 01       	movw	r18, r8
    737e:	5c d6       	rcall	.+3256   	; 0x8038 <__udivmodsi4>
    7380:	f9 01       	movw	r30, r18
    7382:	ca 01       	movw	r24, r20
    7384:	01 50       	subi	r16, 0x01	; 1
    7386:	11 09       	sbc	r17, r1
    7388:	6a 30       	cpi	r22, 0x0A	; 10
    738a:	10 f4       	brcc	.+4      	; 0x7390 <_ZN5Print11printNumberEmh+0x58>
    738c:	60 5d       	subi	r22, 0xD0	; 208
    738e:	01 c0       	rjmp	.+2      	; 0x7392 <_ZN5Print11printNumberEmh+0x5a>
    7390:	69 5c       	subi	r22, 0xC9	; 201
    7392:	d8 01       	movw	r26, r16
    7394:	6c 93       	st	X, r22
    7396:	23 2b       	or	r18, r19
    7398:	24 2b       	or	r18, r20
    739a:	25 2b       	or	r18, r21
    739c:	69 f7       	brne	.-38     	; 0x7378 <_ZN5Print11printNumberEmh+0x40>
    739e:	b8 01       	movw	r22, r16
    73a0:	c7 01       	movw	r24, r14
    73a2:	48 df       	rcall	.-368    	; 0x7234 <_ZN5Print5writeEPKc>
    73a4:	a1 96       	adiw	r28, 0x21	; 33
    73a6:	0f b6       	in	r0, 0x3f	; 63
    73a8:	f8 94       	cli
    73aa:	de bf       	out	0x3e, r29	; 62
    73ac:	0f be       	out	0x3f, r0	; 63
    73ae:	cd bf       	out	0x3d, r28	; 61
    73b0:	df 91       	pop	r29
    73b2:	cf 91       	pop	r28
    73b4:	1f 91       	pop	r17
    73b6:	0f 91       	pop	r16
    73b8:	ff 90       	pop	r15
    73ba:	ef 90       	pop	r14
    73bc:	bf 90       	pop	r11
    73be:	af 90       	pop	r10
    73c0:	9f 90       	pop	r9
    73c2:	8f 90       	pop	r8
    73c4:	08 95       	ret

000073c6 <_ZN5Print5printEmi>:
    73c6:	21 15       	cp	r18, r1
    73c8:	31 05       	cpc	r19, r1
    73ca:	41 f4       	brne	.+16     	; 0x73dc <_ZN5Print5printEmi+0x16>
    73cc:	dc 01       	movw	r26, r24
    73ce:	ed 91       	ld	r30, X+
    73d0:	fc 91       	ld	r31, X
    73d2:	01 90       	ld	r0, Z+
    73d4:	f0 81       	ld	r31, Z
    73d6:	e0 2d       	mov	r30, r0
    73d8:	64 2f       	mov	r22, r20
    73da:	09 94       	ijmp
    73dc:	ad cf       	rjmp	.-166    	; 0x7338 <_ZN5Print11printNumberEmh>

000073de <_ZN5Print5printEhi>:
    73de:	9a 01       	movw	r18, r20
    73e0:	46 2f       	mov	r20, r22
    73e2:	50 e0       	ldi	r21, 0x00	; 0
    73e4:	60 e0       	ldi	r22, 0x00	; 0
    73e6:	70 e0       	ldi	r23, 0x00	; 0
    73e8:	ee cf       	rjmp	.-36     	; 0x73c6 <_ZN5Print5printEmi>

000073ea <_ZN5Print5printEji>:
    73ea:	9a 01       	movw	r18, r20
    73ec:	ab 01       	movw	r20, r22
    73ee:	60 e0       	ldi	r22, 0x00	; 0
    73f0:	70 e0       	ldi	r23, 0x00	; 0
    73f2:	e9 cf       	rjmp	.-46     	; 0x73c6 <_ZN5Print5printEmi>

000073f4 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    73f4:	0f 93       	push	r16
    73f6:	1f 93       	push	r17
    73f8:	cf 93       	push	r28
    73fa:	df 93       	push	r29
    73fc:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    73fe:	e3 df       	rcall	.-58     	; 0x73c6 <_ZN5Print5printEmi>
    7400:	8c 01       	movw	r16, r24
  n += println();
    7402:	ce 01       	movw	r24, r28
    7404:	66 df       	rcall	.-308    	; 0x72d2 <_ZN5Print7printlnEv>
  return n;
}
    7406:	80 0f       	add	r24, r16
    7408:	91 1f       	adc	r25, r17
    740a:	df 91       	pop	r29
    740c:	cf 91       	pop	r28
    740e:	1f 91       	pop	r17
    7410:	0f 91       	pop	r16
    7412:	08 95       	ret

00007414 <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    7414:	1f 92       	push	r1
    7416:	0f 92       	push	r0
    7418:	0f b6       	in	r0, 0x3f	; 63
    741a:	0f 92       	push	r0
    741c:	11 24       	eor	r1, r1
    741e:	2f 93       	push	r18
    7420:	3f 93       	push	r19
    7422:	8f 93       	push	r24
    7424:	9f 93       	push	r25
    7426:	af 93       	push	r26
    7428:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    742a:	80 91 cc 0d 	lds	r24, 0x0DCC	; 0x800dcc <timer0_millis>
    742e:	90 91 cd 0d 	lds	r25, 0x0DCD	; 0x800dcd <timer0_millis+0x1>
    7432:	a0 91 ce 0d 	lds	r26, 0x0DCE	; 0x800dce <timer0_millis+0x2>
    7436:	b0 91 cf 0d 	lds	r27, 0x0DCF	; 0x800dcf <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    743a:	30 91 cb 0d 	lds	r19, 0x0DCB	; 0x800dcb <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    743e:	23 e0       	ldi	r18, 0x03	; 3
    7440:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    7442:	2d 37       	cpi	r18, 0x7D	; 125
    7444:	20 f4       	brcc	.+8      	; 0x744e <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    7446:	01 96       	adiw	r24, 0x01	; 1
    7448:	a1 1d       	adc	r26, r1
    744a:	b1 1d       	adc	r27, r1
    744c:	05 c0       	rjmp	.+10     	; 0x7458 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    744e:	26 e8       	ldi	r18, 0x86	; 134
    7450:	23 0f       	add	r18, r19
		m += 1;
    7452:	02 96       	adiw	r24, 0x02	; 2
    7454:	a1 1d       	adc	r26, r1
    7456:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    7458:	20 93 cb 0d 	sts	0x0DCB, r18	; 0x800dcb <timer0_fract>
	timer0_millis = m;
    745c:	80 93 cc 0d 	sts	0x0DCC, r24	; 0x800dcc <timer0_millis>
    7460:	90 93 cd 0d 	sts	0x0DCD, r25	; 0x800dcd <timer0_millis+0x1>
    7464:	a0 93 ce 0d 	sts	0x0DCE, r26	; 0x800dce <timer0_millis+0x2>
    7468:	b0 93 cf 0d 	sts	0x0DCF, r27	; 0x800dcf <timer0_millis+0x3>
	timer0_overflow_count++;
    746c:	80 91 d0 0d 	lds	r24, 0x0DD0	; 0x800dd0 <timer0_overflow_count>
    7470:	90 91 d1 0d 	lds	r25, 0x0DD1	; 0x800dd1 <timer0_overflow_count+0x1>
    7474:	a0 91 d2 0d 	lds	r26, 0x0DD2	; 0x800dd2 <timer0_overflow_count+0x2>
    7478:	b0 91 d3 0d 	lds	r27, 0x0DD3	; 0x800dd3 <timer0_overflow_count+0x3>
    747c:	01 96       	adiw	r24, 0x01	; 1
    747e:	a1 1d       	adc	r26, r1
    7480:	b1 1d       	adc	r27, r1
    7482:	80 93 d0 0d 	sts	0x0DD0, r24	; 0x800dd0 <timer0_overflow_count>
    7486:	90 93 d1 0d 	sts	0x0DD1, r25	; 0x800dd1 <timer0_overflow_count+0x1>
    748a:	a0 93 d2 0d 	sts	0x0DD2, r26	; 0x800dd2 <timer0_overflow_count+0x2>
    748e:	b0 93 d3 0d 	sts	0x0DD3, r27	; 0x800dd3 <timer0_overflow_count+0x3>
}
    7492:	bf 91       	pop	r27
    7494:	af 91       	pop	r26
    7496:	9f 91       	pop	r25
    7498:	8f 91       	pop	r24
    749a:	3f 91       	pop	r19
    749c:	2f 91       	pop	r18
    749e:	0f 90       	pop	r0
    74a0:	0f be       	out	0x3f, r0	; 63
    74a2:	0f 90       	pop	r0
    74a4:	1f 90       	pop	r1
    74a6:	18 95       	reti

000074a8 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    74a8:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    74aa:	f8 94       	cli
	m = timer0_millis;
    74ac:	60 91 cc 0d 	lds	r22, 0x0DCC	; 0x800dcc <timer0_millis>
    74b0:	70 91 cd 0d 	lds	r23, 0x0DCD	; 0x800dcd <timer0_millis+0x1>
    74b4:	80 91 ce 0d 	lds	r24, 0x0DCE	; 0x800dce <timer0_millis+0x2>
    74b8:	90 91 cf 0d 	lds	r25, 0x0DCF	; 0x800dcf <timer0_millis+0x3>
	SREG = oldSREG;
    74bc:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    74be:	08 95       	ret

000074c0 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    74c0:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    74c2:	f8 94       	cli
	m = timer0_overflow_count;
    74c4:	80 91 d0 0d 	lds	r24, 0x0DD0	; 0x800dd0 <timer0_overflow_count>
    74c8:	90 91 d1 0d 	lds	r25, 0x0DD1	; 0x800dd1 <timer0_overflow_count+0x1>
    74cc:	a0 91 d2 0d 	lds	r26, 0x0DD2	; 0x800dd2 <timer0_overflow_count+0x2>
    74d0:	b0 91 d3 0d 	lds	r27, 0x0DD3	; 0x800dd3 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    74d4:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    74d6:	a8 9b       	sbis	0x15, 0	; 21
    74d8:	05 c0       	rjmp	.+10     	; 0x74e4 <micros+0x24>
    74da:	2f 3f       	cpi	r18, 0xFF	; 255
    74dc:	19 f0       	breq	.+6      	; 0x74e4 <micros+0x24>
		m++;
    74de:	01 96       	adiw	r24, 0x01	; 1
    74e0:	a1 1d       	adc	r26, r1
    74e2:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    74e4:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    74e6:	ba 2f       	mov	r27, r26
    74e8:	a9 2f       	mov	r26, r25
    74ea:	98 2f       	mov	r25, r24
    74ec:	88 27       	eor	r24, r24
    74ee:	82 0f       	add	r24, r18
    74f0:	91 1d       	adc	r25, r1
    74f2:	a1 1d       	adc	r26, r1
    74f4:	b1 1d       	adc	r27, r1
    74f6:	bc 01       	movw	r22, r24
    74f8:	cd 01       	movw	r24, r26
    74fa:	42 e0       	ldi	r20, 0x02	; 2
    74fc:	66 0f       	add	r22, r22
    74fe:	77 1f       	adc	r23, r23
    7500:	88 1f       	adc	r24, r24
    7502:	99 1f       	adc	r25, r25
    7504:	4a 95       	dec	r20
    7506:	d1 f7       	brne	.-12     	; 0x74fc <micros+0x3c>
}
    7508:	08 95       	ret

0000750a <delay>:

void delay(unsigned long ms)
{
    750a:	8f 92       	push	r8
    750c:	9f 92       	push	r9
    750e:	af 92       	push	r10
    7510:	bf 92       	push	r11
    7512:	cf 92       	push	r12
    7514:	df 92       	push	r13
    7516:	ef 92       	push	r14
    7518:	ff 92       	push	r15
    751a:	6b 01       	movw	r12, r22
    751c:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    751e:	d0 df       	rcall	.-96     	; 0x74c0 <micros>
    7520:	4b 01       	movw	r8, r22
    7522:	5c 01       	movw	r10, r24

	while (ms > 0) {
    7524:	c1 14       	cp	r12, r1
    7526:	d1 04       	cpc	r13, r1
    7528:	e1 04       	cpc	r14, r1
    752a:	f1 04       	cpc	r15, r1
		yield();
    752c:	f1 f0       	breq	.+60     	; 0x756a <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    752e:	63 d5       	rcall	.+2758   	; 0x7ff6 <yield>
    7530:	c7 df       	rcall	.-114    	; 0x74c0 <micros>
    7532:	dc 01       	movw	r26, r24
    7534:	cb 01       	movw	r24, r22
    7536:	88 19       	sub	r24, r8
    7538:	99 09       	sbc	r25, r9
    753a:	aa 09       	sbc	r26, r10
    753c:	bb 09       	sbc	r27, r11
    753e:	88 3e       	cpi	r24, 0xE8	; 232
    7540:	93 40       	sbci	r25, 0x03	; 3
    7542:	a1 05       	cpc	r26, r1
    7544:	b1 05       	cpc	r27, r1
    7546:	70 f3       	brcs	.-36     	; 0x7524 <delay+0x1a>
			ms--;
    7548:	21 e0       	ldi	r18, 0x01	; 1
    754a:	c2 1a       	sub	r12, r18
    754c:	d1 08       	sbc	r13, r1
    754e:	e1 08       	sbc	r14, r1
    7550:	f1 08       	sbc	r15, r1
			start += 1000;
    7552:	88 ee       	ldi	r24, 0xE8	; 232
    7554:	88 0e       	add	r8, r24
    7556:	83 e0       	ldi	r24, 0x03	; 3
    7558:	98 1e       	adc	r9, r24
    755a:	a1 1c       	adc	r10, r1
    755c:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    755e:	c1 14       	cp	r12, r1
    7560:	d1 04       	cpc	r13, r1
    7562:	e1 04       	cpc	r14, r1
    7564:	f1 04       	cpc	r15, r1
    7566:	21 f7       	brne	.-56     	; 0x7530 <delay+0x26>
    7568:	dd cf       	rjmp	.-70     	; 0x7524 <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    756a:	ff 90       	pop	r15
    756c:	ef 90       	pop	r14
    756e:	df 90       	pop	r13
    7570:	cf 90       	pop	r12
    7572:	bf 90       	pop	r11
    7574:	af 90       	pop	r10
    7576:	9f 90       	pop	r9
    7578:	8f 90       	pop	r8
    757a:	08 95       	ret

0000757c <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    757c:	82 30       	cpi	r24, 0x02	; 2
    757e:	91 05       	cpc	r25, r1
    7580:	38 f0       	brcs	.+14     	; 0x7590 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    7582:	88 0f       	add	r24, r24
    7584:	99 1f       	adc	r25, r25
    7586:	88 0f       	add	r24, r24
    7588:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    758a:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    758c:	01 97       	sbiw	r24, 0x01	; 1
    758e:	f1 f7       	brne	.-4      	; 0x758c <delayMicroseconds+0x10>
    7590:	08 95       	ret

00007592 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    7592:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    7594:	84 b5       	in	r24, 0x24	; 36
    7596:	82 60       	ori	r24, 0x02	; 2
    7598:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    759a:	84 b5       	in	r24, 0x24	; 36
    759c:	81 60       	ori	r24, 0x01	; 1
    759e:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    75a0:	85 b5       	in	r24, 0x25	; 37
    75a2:	82 60       	ori	r24, 0x02	; 2
    75a4:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    75a6:	85 b5       	in	r24, 0x25	; 37
    75a8:	81 60       	ori	r24, 0x01	; 1
    75aa:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    75ac:	ee e6       	ldi	r30, 0x6E	; 110
    75ae:	f0 e0       	ldi	r31, 0x00	; 0
    75b0:	80 81       	ld	r24, Z
    75b2:	81 60       	ori	r24, 0x01	; 1
    75b4:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    75b6:	e1 e8       	ldi	r30, 0x81	; 129
    75b8:	f0 e0       	ldi	r31, 0x00	; 0
    75ba:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    75bc:	80 81       	ld	r24, Z
    75be:	82 60       	ori	r24, 0x02	; 2
    75c0:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    75c2:	80 81       	ld	r24, Z
    75c4:	81 60       	ori	r24, 0x01	; 1
    75c6:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    75c8:	e0 e8       	ldi	r30, 0x80	; 128
    75ca:	f0 e0       	ldi	r31, 0x00	; 0
    75cc:	80 81       	ld	r24, Z
    75ce:	81 60       	ori	r24, 0x01	; 1
    75d0:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    75d2:	e1 eb       	ldi	r30, 0xB1	; 177
    75d4:	f0 e0       	ldi	r31, 0x00	; 0
    75d6:	80 81       	ld	r24, Z
    75d8:	84 60       	ori	r24, 0x04	; 4
    75da:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    75dc:	e0 eb       	ldi	r30, 0xB0	; 176
    75de:	f0 e0       	ldi	r31, 0x00	; 0
    75e0:	80 81       	ld	r24, Z
    75e2:	81 60       	ori	r24, 0x01	; 1
    75e4:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    75e6:	ea e7       	ldi	r30, 0x7A	; 122
    75e8:	f0 e0       	ldi	r31, 0x00	; 0
    75ea:	80 81       	ld	r24, Z
    75ec:	84 60       	ori	r24, 0x04	; 4
    75ee:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    75f0:	80 81       	ld	r24, Z
    75f2:	82 60       	ori	r24, 0x02	; 2
    75f4:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    75f6:	80 81       	ld	r24, Z
    75f8:	81 60       	ori	r24, 0x01	; 1
    75fa:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    75fc:	80 81       	ld	r24, Z
    75fe:	80 68       	ori	r24, 0x80	; 128
    7600:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    7602:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    7606:	08 95       	ret

00007608 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    7608:	83 30       	cpi	r24, 0x03	; 3
    760a:	81 f0       	breq	.+32     	; 0x762c <turnOffPWM+0x24>
    760c:	28 f4       	brcc	.+10     	; 0x7618 <turnOffPWM+0x10>
    760e:	81 30       	cpi	r24, 0x01	; 1
    7610:	99 f0       	breq	.+38     	; 0x7638 <turnOffPWM+0x30>
    7612:	82 30       	cpi	r24, 0x02	; 2
    7614:	a1 f0       	breq	.+40     	; 0x763e <turnOffPWM+0x36>
    7616:	08 95       	ret
    7618:	87 30       	cpi	r24, 0x07	; 7
    761a:	a9 f0       	breq	.+42     	; 0x7646 <turnOffPWM+0x3e>
    761c:	88 30       	cpi	r24, 0x08	; 8
    761e:	b9 f0       	breq	.+46     	; 0x764e <turnOffPWM+0x46>
    7620:	84 30       	cpi	r24, 0x04	; 4
    7622:	d1 f4       	brne	.+52     	; 0x7658 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    7624:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    7628:	8f 7d       	andi	r24, 0xDF	; 223
    762a:	03 c0       	rjmp	.+6      	; 0x7632 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    762c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    7630:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    7632:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    7636:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    7638:	84 b5       	in	r24, 0x24	; 36
    763a:	8f 77       	andi	r24, 0x7F	; 127
    763c:	02 c0       	rjmp	.+4      	; 0x7642 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    763e:	84 b5       	in	r24, 0x24	; 36
    7640:	8f 7d       	andi	r24, 0xDF	; 223
    7642:	84 bd       	out	0x24, r24	; 36
    7644:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    7646:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    764a:	8f 77       	andi	r24, 0x7F	; 127
    764c:	03 c0       	rjmp	.+6      	; 0x7654 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    764e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    7652:	8f 7d       	andi	r24, 0xDF	; 223
    7654:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    7658:	08 95       	ret

0000765a <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    765a:	cf 93       	push	r28
    765c:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    765e:	90 e0       	ldi	r25, 0x00	; 0
    7660:	fc 01       	movw	r30, r24
    7662:	ec 5a       	subi	r30, 0xAC	; 172
    7664:	fd 4f       	sbci	r31, 0xFD	; 253
    7666:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    7668:	fc 01       	movw	r30, r24
    766a:	ec 58       	subi	r30, 0x8C	; 140
    766c:	fd 4f       	sbci	r31, 0xFD	; 253
    766e:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    7670:	88 23       	and	r24, r24
    7672:	61 f1       	breq	.+88     	; 0x76cc <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    7674:	90 e0       	ldi	r25, 0x00	; 0
    7676:	88 0f       	add	r24, r24
    7678:	99 1f       	adc	r25, r25
    767a:	fc 01       	movw	r30, r24
    767c:	e8 55       	subi	r30, 0x58	; 88
    767e:	fd 4f       	sbci	r31, 0xFD	; 253
    7680:	c5 91       	lpm	r28, Z+
    7682:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    7684:	fc 01       	movw	r30, r24
    7686:	e2 56       	subi	r30, 0x62	; 98
    7688:	fd 4f       	sbci	r31, 0xFD	; 253
    768a:	a5 91       	lpm	r26, Z+
    768c:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    768e:	61 11       	cpse	r22, r1
    7690:	09 c0       	rjmp	.+18     	; 0x76a4 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    7692:	9f b7       	in	r25, 0x3f	; 63
                cli();
    7694:	f8 94       	cli
		*reg &= ~bit;
    7696:	88 81       	ld	r24, Y
    7698:	20 95       	com	r18
    769a:	82 23       	and	r24, r18
    769c:	88 83       	st	Y, r24
		*out &= ~bit;
    769e:	ec 91       	ld	r30, X
    76a0:	2e 23       	and	r18, r30
    76a2:	0b c0       	rjmp	.+22     	; 0x76ba <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    76a4:	62 30       	cpi	r22, 0x02	; 2
    76a6:	61 f4       	brne	.+24     	; 0x76c0 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    76a8:	9f b7       	in	r25, 0x3f	; 63
                cli();
    76aa:	f8 94       	cli
		*reg &= ~bit;
    76ac:	88 81       	ld	r24, Y
    76ae:	32 2f       	mov	r19, r18
    76b0:	30 95       	com	r19
    76b2:	83 23       	and	r24, r19
    76b4:	88 83       	st	Y, r24
		*out |= bit;
    76b6:	ec 91       	ld	r30, X
    76b8:	2e 2b       	or	r18, r30
    76ba:	2c 93       	st	X, r18
		SREG = oldSREG;
    76bc:	9f bf       	out	0x3f, r25	; 63
    76be:	06 c0       	rjmp	.+12     	; 0x76cc <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    76c0:	8f b7       	in	r24, 0x3f	; 63
                cli();
    76c2:	f8 94       	cli
		*reg |= bit;
    76c4:	e8 81       	ld	r30, Y
    76c6:	2e 2b       	or	r18, r30
    76c8:	28 83       	st	Y, r18
		SREG = oldSREG;
    76ca:	8f bf       	out	0x3f, r24	; 63
	}
}
    76cc:	df 91       	pop	r29
    76ce:	cf 91       	pop	r28
    76d0:	08 95       	ret

000076d2 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    76d2:	1f 93       	push	r17
    76d4:	cf 93       	push	r28
    76d6:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    76d8:	28 2f       	mov	r18, r24
    76da:	30 e0       	ldi	r19, 0x00	; 0
    76dc:	f9 01       	movw	r30, r18
    76de:	ec 5c       	subi	r30, 0xCC	; 204
    76e0:	fd 4f       	sbci	r31, 0xFD	; 253
    76e2:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    76e4:	f9 01       	movw	r30, r18
    76e6:	ec 5a       	subi	r30, 0xAC	; 172
    76e8:	fd 4f       	sbci	r31, 0xFD	; 253
    76ea:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    76ec:	f9 01       	movw	r30, r18
    76ee:	ec 58       	subi	r30, 0x8C	; 140
    76f0:	fd 4f       	sbci	r31, 0xFD	; 253
    76f2:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    76f4:	cc 23       	and	r28, r28
    76f6:	b9 f0       	breq	.+46     	; 0x7726 <digitalWrite+0x54>
    76f8:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    76fa:	81 11       	cpse	r24, r1
    76fc:	85 df       	rcall	.-246    	; 0x7608 <turnOffPWM>

	out = portOutputRegister(port);
    76fe:	ec 2f       	mov	r30, r28
    7700:	f0 e0       	ldi	r31, 0x00	; 0
    7702:	ee 0f       	add	r30, r30
    7704:	ff 1f       	adc	r31, r31
    7706:	e2 56       	subi	r30, 0x62	; 98
    7708:	fd 4f       	sbci	r31, 0xFD	; 253
    770a:	a5 91       	lpm	r26, Z+
    770c:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    770e:	9f b7       	in	r25, 0x3f	; 63
	cli();
    7710:	f8 94       	cli

	if (val == LOW) {
    7712:	11 11       	cpse	r17, r1
    7714:	04 c0       	rjmp	.+8      	; 0x771e <digitalWrite+0x4c>
		*out &= ~bit;
    7716:	8c 91       	ld	r24, X
    7718:	d0 95       	com	r29
    771a:	d8 23       	and	r29, r24
    771c:	02 c0       	rjmp	.+4      	; 0x7722 <digitalWrite+0x50>
	} else {
		*out |= bit;
    771e:	ec 91       	ld	r30, X
    7720:	de 2b       	or	r29, r30
    7722:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    7724:	9f bf       	out	0x3f, r25	; 63
}
    7726:	df 91       	pop	r29
    7728:	cf 91       	pop	r28
    772a:	1f 91       	pop	r17
    772c:	08 95       	ret

0000772e <digitalRead>:

int digitalRead(uint8_t pin)
{
    772e:	cf 93       	push	r28
    7730:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    7732:	28 2f       	mov	r18, r24
    7734:	30 e0       	ldi	r19, 0x00	; 0
    7736:	f9 01       	movw	r30, r18
    7738:	ec 5c       	subi	r30, 0xCC	; 204
    773a:	fd 4f       	sbci	r31, 0xFD	; 253
    773c:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    773e:	f9 01       	movw	r30, r18
    7740:	ec 5a       	subi	r30, 0xAC	; 172
    7742:	fd 4f       	sbci	r31, 0xFD	; 253
    7744:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    7746:	f9 01       	movw	r30, r18
    7748:	ec 58       	subi	r30, 0x8C	; 140
    774a:	fd 4f       	sbci	r31, 0xFD	; 253
    774c:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    774e:	cc 23       	and	r28, r28
    7750:	89 f0       	breq	.+34     	; 0x7774 <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    7752:	81 11       	cpse	r24, r1
    7754:	59 df       	rcall	.-334    	; 0x7608 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    7756:	ec 2f       	mov	r30, r28
    7758:	f0 e0       	ldi	r31, 0x00	; 0
    775a:	ee 0f       	add	r30, r30
    775c:	ff 1f       	adc	r31, r31
    775e:	ec 56       	subi	r30, 0x6C	; 108
    7760:	fd 4f       	sbci	r31, 0xFD	; 253
    7762:	a5 91       	lpm	r26, Z+
    7764:	b4 91       	lpm	r27, Z
    7766:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    7768:	ed 23       	and	r30, r29
    776a:	81 e0       	ldi	r24, 0x01	; 1
    776c:	90 e0       	ldi	r25, 0x00	; 0
    776e:	21 f4       	brne	.+8      	; 0x7778 <digitalRead+0x4a>
    7770:	80 e0       	ldi	r24, 0x00	; 0
    7772:	02 c0       	rjmp	.+4      	; 0x7778 <digitalRead+0x4a>
    7774:	80 e0       	ldi	r24, 0x00	; 0
    7776:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    7778:	df 91       	pop	r29
    777a:	cf 91       	pop	r28
    777c:	08 95       	ret

0000777e <_ZNK6String14StringIfHelperEv>:
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
		*p = toupper(*p);
	}
}
    777e:	08 95       	ret

00007780 <_ZN6StringD1Ev>:
    7780:	fc 01       	movw	r30, r24
    7782:	80 81       	ld	r24, Z
    7784:	91 81       	ldd	r25, Z+1	; 0x01
    7786:	53 c5       	rjmp	.+2726   	; 0x822e <free>

00007788 <_ZN6String10invalidateEv>:
    7788:	cf 93       	push	r28
    778a:	df 93       	push	r29
    778c:	ec 01       	movw	r28, r24
    778e:	88 81       	ld	r24, Y
    7790:	99 81       	ldd	r25, Y+1	; 0x01
    7792:	00 97       	sbiw	r24, 0x00	; 0
    7794:	09 f0       	breq	.+2      	; 0x7798 <_ZN6String10invalidateEv+0x10>
    7796:	4b d5       	rcall	.+2710   	; 0x822e <free>
    7798:	19 82       	std	Y+1, r1	; 0x01
    779a:	18 82       	st	Y, r1
    779c:	1d 82       	std	Y+5, r1	; 0x05
    779e:	1c 82       	std	Y+4, r1	; 0x04
    77a0:	1b 82       	std	Y+3, r1	; 0x03
    77a2:	1a 82       	std	Y+2, r1	; 0x02
    77a4:	df 91       	pop	r29
    77a6:	cf 91       	pop	r28
    77a8:	08 95       	ret

000077aa <_ZN6String12changeBufferEj>:
    77aa:	0f 93       	push	r16
    77ac:	1f 93       	push	r17
    77ae:	cf 93       	push	r28
    77b0:	df 93       	push	r29
    77b2:	ec 01       	movw	r28, r24
    77b4:	8b 01       	movw	r16, r22
    77b6:	6f 5f       	subi	r22, 0xFF	; 255
    77b8:	7f 4f       	sbci	r23, 0xFF	; 255
    77ba:	88 81       	ld	r24, Y
    77bc:	99 81       	ldd	r25, Y+1	; 0x01
    77be:	c0 d5       	rcall	.+2944   	; 0x8340 <realloc>
    77c0:	00 97       	sbiw	r24, 0x00	; 0
    77c2:	31 f0       	breq	.+12     	; 0x77d0 <_ZN6String12changeBufferEj+0x26>
    77c4:	99 83       	std	Y+1, r25	; 0x01
    77c6:	88 83       	st	Y, r24
    77c8:	1b 83       	std	Y+3, r17	; 0x03
    77ca:	0a 83       	std	Y+2, r16	; 0x02
    77cc:	81 e0       	ldi	r24, 0x01	; 1
    77ce:	01 c0       	rjmp	.+2      	; 0x77d2 <_ZN6String12changeBufferEj+0x28>
    77d0:	80 e0       	ldi	r24, 0x00	; 0
    77d2:	df 91       	pop	r29
    77d4:	cf 91       	pop	r28
    77d6:	1f 91       	pop	r17
    77d8:	0f 91       	pop	r16
    77da:	08 95       	ret

000077dc <_ZN6String7reserveEj>:
    77dc:	cf 93       	push	r28
    77de:	df 93       	push	r29
    77e0:	ec 01       	movw	r28, r24
    77e2:	88 81       	ld	r24, Y
    77e4:	99 81       	ldd	r25, Y+1	; 0x01
    77e6:	89 2b       	or	r24, r25
    77e8:	29 f0       	breq	.+10     	; 0x77f4 <_ZN6String7reserveEj+0x18>
    77ea:	8a 81       	ldd	r24, Y+2	; 0x02
    77ec:	9b 81       	ldd	r25, Y+3	; 0x03
    77ee:	86 17       	cp	r24, r22
    77f0:	97 07       	cpc	r25, r23
    77f2:	58 f4       	brcc	.+22     	; 0x780a <_ZN6String7reserveEj+0x2e>
    77f4:	ce 01       	movw	r24, r28
    77f6:	d9 df       	rcall	.-78     	; 0x77aa <_ZN6String12changeBufferEj>
    77f8:	88 23       	and	r24, r24
    77fa:	41 f0       	breq	.+16     	; 0x780c <_ZN6String7reserveEj+0x30>
    77fc:	8c 81       	ldd	r24, Y+4	; 0x04
    77fe:	9d 81       	ldd	r25, Y+5	; 0x05
    7800:	89 2b       	or	r24, r25
    7802:	19 f4       	brne	.+6      	; 0x780a <_ZN6String7reserveEj+0x2e>
    7804:	e8 81       	ld	r30, Y
    7806:	f9 81       	ldd	r31, Y+1	; 0x01
    7808:	10 82       	st	Z, r1
    780a:	81 e0       	ldi	r24, 0x01	; 1
    780c:	df 91       	pop	r29
    780e:	cf 91       	pop	r28
    7810:	08 95       	ret

00007812 <_ZN6String4copyEPKcj>:
    7812:	ef 92       	push	r14
    7814:	ff 92       	push	r15
    7816:	0f 93       	push	r16
    7818:	1f 93       	push	r17
    781a:	cf 93       	push	r28
    781c:	df 93       	push	r29
    781e:	ec 01       	movw	r28, r24
    7820:	7b 01       	movw	r14, r22
    7822:	8a 01       	movw	r16, r20
    7824:	ba 01       	movw	r22, r20
    7826:	da df       	rcall	.-76     	; 0x77dc <_ZN6String7reserveEj>
    7828:	81 11       	cpse	r24, r1
    782a:	03 c0       	rjmp	.+6      	; 0x7832 <_ZN6String4copyEPKcj+0x20>
    782c:	ce 01       	movw	r24, r28
    782e:	ac df       	rcall	.-168    	; 0x7788 <_ZN6String10invalidateEv>
    7830:	06 c0       	rjmp	.+12     	; 0x783e <_ZN6String4copyEPKcj+0x2c>
    7832:	1d 83       	std	Y+5, r17	; 0x05
    7834:	0c 83       	std	Y+4, r16	; 0x04
    7836:	b7 01       	movw	r22, r14
    7838:	88 81       	ld	r24, Y
    783a:	99 81       	ldd	r25, Y+1	; 0x01
    783c:	ae d6       	rcall	.+3420   	; 0x859a <strcpy>
    783e:	ce 01       	movw	r24, r28
    7840:	df 91       	pop	r29
    7842:	cf 91       	pop	r28
    7844:	1f 91       	pop	r17
    7846:	0f 91       	pop	r16
    7848:	ff 90       	pop	r15
    784a:	ef 90       	pop	r14
    784c:	08 95       	ret

0000784e <_ZN6StringC1EPKc>:
    784e:	fc 01       	movw	r30, r24
    7850:	11 82       	std	Z+1, r1	; 0x01
    7852:	10 82       	st	Z, r1
    7854:	13 82       	std	Z+3, r1	; 0x03
    7856:	12 82       	std	Z+2, r1	; 0x02
    7858:	15 82       	std	Z+5, r1	; 0x05
    785a:	14 82       	std	Z+4, r1	; 0x04
    785c:	61 15       	cp	r22, r1
    785e:	71 05       	cpc	r23, r1
    7860:	49 f0       	breq	.+18     	; 0x7874 <_ZN6StringC1EPKc+0x26>
    7862:	fb 01       	movw	r30, r22
    7864:	01 90       	ld	r0, Z+
    7866:	00 20       	and	r0, r0
    7868:	e9 f7       	brne	.-6      	; 0x7864 <_ZN6StringC1EPKc+0x16>
    786a:	31 97       	sbiw	r30, 0x01	; 1
    786c:	af 01       	movw	r20, r30
    786e:	46 1b       	sub	r20, r22
    7870:	57 0b       	sbc	r21, r23
    7872:	cf cf       	rjmp	.-98     	; 0x7812 <_ZN6String4copyEPKcj>
    7874:	08 95       	ret

00007876 <_ZN6String4moveERS_>:
    7876:	0f 93       	push	r16
    7878:	1f 93       	push	r17
    787a:	cf 93       	push	r28
    787c:	df 93       	push	r29
    787e:	8c 01       	movw	r16, r24
    7880:	eb 01       	movw	r28, r22
    7882:	fc 01       	movw	r30, r24
    7884:	80 81       	ld	r24, Z
    7886:	91 81       	ldd	r25, Z+1	; 0x01
    7888:	00 97       	sbiw	r24, 0x00	; 0
    788a:	c1 f0       	breq	.+48     	; 0x78bc <_ZN6String4moveERS_+0x46>
    788c:	68 81       	ld	r22, Y
    788e:	79 81       	ldd	r23, Y+1	; 0x01
    7890:	61 15       	cp	r22, r1
    7892:	71 05       	cpc	r23, r1
    7894:	91 f0       	breq	.+36     	; 0x78ba <_ZN6String4moveERS_+0x44>
    7896:	2f eb       	ldi	r18, 0xBF	; 191
    7898:	3b e3       	ldi	r19, 0x3B	; 59
    789a:	23 2b       	or	r18, r19
    789c:	71 f0       	breq	.+28     	; 0x78ba <_ZN6String4moveERS_+0x44>
    789e:	42 81       	ldd	r20, Z+2	; 0x02
    78a0:	53 81       	ldd	r21, Z+3	; 0x03
    78a2:	2c 81       	ldd	r18, Y+4	; 0x04
    78a4:	3d 81       	ldd	r19, Y+5	; 0x05
    78a6:	42 17       	cp	r20, r18
    78a8:	53 07       	cpc	r21, r19
    78aa:	38 f0       	brcs	.+14     	; 0x78ba <_ZN6String4moveERS_+0x44>
    78ac:	76 d6       	rcall	.+3308   	; 0x859a <strcpy>
    78ae:	8c 81       	ldd	r24, Y+4	; 0x04
    78b0:	9d 81       	ldd	r25, Y+5	; 0x05
    78b2:	f8 01       	movw	r30, r16
    78b4:	95 83       	std	Z+5, r25	; 0x05
    78b6:	84 83       	std	Z+4, r24	; 0x04
    78b8:	12 c0       	rjmp	.+36     	; 0x78de <_ZN6String4moveERS_+0x68>
    78ba:	b9 d4       	rcall	.+2418   	; 0x822e <free>
    78bc:	88 81       	ld	r24, Y
    78be:	99 81       	ldd	r25, Y+1	; 0x01
    78c0:	f8 01       	movw	r30, r16
    78c2:	91 83       	std	Z+1, r25	; 0x01
    78c4:	80 83       	st	Z, r24
    78c6:	8a 81       	ldd	r24, Y+2	; 0x02
    78c8:	9b 81       	ldd	r25, Y+3	; 0x03
    78ca:	93 83       	std	Z+3, r25	; 0x03
    78cc:	82 83       	std	Z+2, r24	; 0x02
    78ce:	8c 81       	ldd	r24, Y+4	; 0x04
    78d0:	9d 81       	ldd	r25, Y+5	; 0x05
    78d2:	95 83       	std	Z+5, r25	; 0x05
    78d4:	84 83       	std	Z+4, r24	; 0x04
    78d6:	19 82       	std	Y+1, r1	; 0x01
    78d8:	18 82       	st	Y, r1
    78da:	1b 82       	std	Y+3, r1	; 0x03
    78dc:	1a 82       	std	Y+2, r1	; 0x02
    78de:	1d 82       	std	Y+5, r1	; 0x05
    78e0:	1c 82       	std	Y+4, r1	; 0x04
    78e2:	df 91       	pop	r29
    78e4:	cf 91       	pop	r28
    78e6:	1f 91       	pop	r17
    78e8:	0f 91       	pop	r16
    78ea:	08 95       	ret

000078ec <_ZN6StringC1EOS_>:
    78ec:	fc 01       	movw	r30, r24
    78ee:	11 82       	std	Z+1, r1	; 0x01
    78f0:	10 82       	st	Z, r1
    78f2:	13 82       	std	Z+3, r1	; 0x03
    78f4:	12 82       	std	Z+2, r1	; 0x02
    78f6:	15 82       	std	Z+5, r1	; 0x05
    78f8:	14 82       	std	Z+4, r1	; 0x04
    78fa:	bd cf       	rjmp	.-134    	; 0x7876 <_ZN6String4moveERS_>

000078fc <_ZN6StringaSERKS_>:
    78fc:	cf 93       	push	r28
    78fe:	df 93       	push	r29
    7900:	ec 01       	movw	r28, r24
    7902:	fb 01       	movw	r30, r22
    7904:	86 17       	cp	r24, r22
    7906:	97 07       	cpc	r25, r23
    7908:	51 f0       	breq	.+20     	; 0x791e <_ZN6StringaSERKS_+0x22>
    790a:	60 81       	ld	r22, Z
    790c:	71 81       	ldd	r23, Z+1	; 0x01
    790e:	61 15       	cp	r22, r1
    7910:	71 05       	cpc	r23, r1
    7912:	21 f0       	breq	.+8      	; 0x791c <_ZN6StringaSERKS_+0x20>
    7914:	44 81       	ldd	r20, Z+4	; 0x04
    7916:	55 81       	ldd	r21, Z+5	; 0x05
    7918:	7c df       	rcall	.-264    	; 0x7812 <_ZN6String4copyEPKcj>
    791a:	01 c0       	rjmp	.+2      	; 0x791e <_ZN6StringaSERKS_+0x22>
    791c:	35 df       	rcall	.-406    	; 0x7788 <_ZN6String10invalidateEv>
    791e:	ce 01       	movw	r24, r28
    7920:	df 91       	pop	r29
    7922:	cf 91       	pop	r28
    7924:	08 95       	ret

00007926 <_ZN6StringC1ERKS_>:
    7926:	fc 01       	movw	r30, r24
    7928:	11 82       	std	Z+1, r1	; 0x01
    792a:	10 82       	st	Z, r1
    792c:	13 82       	std	Z+3, r1	; 0x03
    792e:	12 82       	std	Z+2, r1	; 0x02
    7930:	15 82       	std	Z+5, r1	; 0x05
    7932:	14 82       	std	Z+4, r1	; 0x04
    7934:	e3 cf       	rjmp	.-58     	; 0x78fc <_ZN6StringaSERKS_>

00007936 <_ZN6StringaSEOS_>:
    7936:	cf 93       	push	r28
    7938:	df 93       	push	r29
    793a:	ec 01       	movw	r28, r24
    793c:	86 17       	cp	r24, r22
    793e:	97 07       	cpc	r25, r23
    7940:	09 f0       	breq	.+2      	; 0x7944 <_ZN6StringaSEOS_+0xe>
    7942:	99 df       	rcall	.-206    	; 0x7876 <_ZN6String4moveERS_>
    7944:	ce 01       	movw	r24, r28
    7946:	df 91       	pop	r29
    7948:	cf 91       	pop	r28
    794a:	08 95       	ret

0000794c <_ZN6StringaSEPKc>:
    794c:	cf 93       	push	r28
    794e:	df 93       	push	r29
    7950:	ec 01       	movw	r28, r24
    7952:	61 15       	cp	r22, r1
    7954:	71 05       	cpc	r23, r1
    7956:	51 f0       	breq	.+20     	; 0x796c <_ZN6StringaSEPKc+0x20>
    7958:	fb 01       	movw	r30, r22
    795a:	01 90       	ld	r0, Z+
    795c:	00 20       	and	r0, r0
    795e:	e9 f7       	brne	.-6      	; 0x795a <_ZN6StringaSEPKc+0xe>
    7960:	31 97       	sbiw	r30, 0x01	; 1
    7962:	af 01       	movw	r20, r30
    7964:	46 1b       	sub	r20, r22
    7966:	57 0b       	sbc	r21, r23
    7968:	54 df       	rcall	.-344    	; 0x7812 <_ZN6String4copyEPKcj>
    796a:	01 c0       	rjmp	.+2      	; 0x796e <_ZN6StringaSEPKc+0x22>
    796c:	0d df       	rcall	.-486    	; 0x7788 <_ZN6String10invalidateEv>
    796e:	ce 01       	movw	r24, r28
    7970:	df 91       	pop	r29
    7972:	cf 91       	pop	r28
    7974:	08 95       	ret

00007976 <_ZN6StringC1Ec>:
    7976:	cf 93       	push	r28
    7978:	df 93       	push	r29
    797a:	00 d0       	rcall	.+0      	; 0x797c <_ZN6StringC1Ec+0x6>
    797c:	cd b7       	in	r28, 0x3d	; 61
    797e:	de b7       	in	r29, 0x3e	; 62
    7980:	fc 01       	movw	r30, r24
    7982:	11 82       	std	Z+1, r1	; 0x01
    7984:	10 82       	st	Z, r1
    7986:	13 82       	std	Z+3, r1	; 0x03
    7988:	12 82       	std	Z+2, r1	; 0x02
    798a:	15 82       	std	Z+5, r1	; 0x05
    798c:	14 82       	std	Z+4, r1	; 0x04
    798e:	69 83       	std	Y+1, r22	; 0x01
    7990:	1a 82       	std	Y+2, r1	; 0x02
    7992:	be 01       	movw	r22, r28
    7994:	6f 5f       	subi	r22, 0xFF	; 255
    7996:	7f 4f       	sbci	r23, 0xFF	; 255
    7998:	d9 df       	rcall	.-78     	; 0x794c <_ZN6StringaSEPKc>
    799a:	0f 90       	pop	r0
    799c:	0f 90       	pop	r0
    799e:	df 91       	pop	r29
    79a0:	cf 91       	pop	r28
    79a2:	08 95       	ret

000079a4 <_ZN6StringC1Ehh>:
    79a4:	0f 93       	push	r16
    79a6:	1f 93       	push	r17
    79a8:	cf 93       	push	r28
    79aa:	df 93       	push	r29
    79ac:	cd b7       	in	r28, 0x3d	; 61
    79ae:	de b7       	in	r29, 0x3e	; 62
    79b0:	29 97       	sbiw	r28, 0x09	; 9
    79b2:	0f b6       	in	r0, 0x3f	; 63
    79b4:	f8 94       	cli
    79b6:	de bf       	out	0x3e, r29	; 62
    79b8:	0f be       	out	0x3f, r0	; 63
    79ba:	cd bf       	out	0x3d, r28	; 61
    79bc:	8c 01       	movw	r16, r24
    79be:	86 2f       	mov	r24, r22
    79c0:	f8 01       	movw	r30, r16
    79c2:	11 82       	std	Z+1, r1	; 0x01
    79c4:	10 82       	st	Z, r1
    79c6:	13 82       	std	Z+3, r1	; 0x03
    79c8:	12 82       	std	Z+2, r1	; 0x02
    79ca:	15 82       	std	Z+5, r1	; 0x05
    79cc:	14 82       	std	Z+4, r1	; 0x04
    79ce:	50 e0       	ldi	r21, 0x00	; 0
    79d0:	be 01       	movw	r22, r28
    79d2:	6f 5f       	subi	r22, 0xFF	; 255
    79d4:	7f 4f       	sbci	r23, 0xFF	; 255
    79d6:	90 e0       	ldi	r25, 0x00	; 0
    79d8:	58 d6       	rcall	.+3248   	; 0x868a <utoa>
    79da:	be 01       	movw	r22, r28
    79dc:	6f 5f       	subi	r22, 0xFF	; 255
    79de:	7f 4f       	sbci	r23, 0xFF	; 255
    79e0:	c8 01       	movw	r24, r16
    79e2:	b4 df       	rcall	.-152    	; 0x794c <_ZN6StringaSEPKc>
    79e4:	29 96       	adiw	r28, 0x09	; 9
    79e6:	0f b6       	in	r0, 0x3f	; 63
    79e8:	f8 94       	cli
    79ea:	de bf       	out	0x3e, r29	; 62
    79ec:	0f be       	out	0x3f, r0	; 63
    79ee:	cd bf       	out	0x3d, r28	; 61
    79f0:	df 91       	pop	r29
    79f2:	cf 91       	pop	r28
    79f4:	1f 91       	pop	r17
    79f6:	0f 91       	pop	r16
    79f8:	08 95       	ret

000079fa <_ZN6StringC1Eih>:
    79fa:	0f 93       	push	r16
    79fc:	1f 93       	push	r17
    79fe:	cf 93       	push	r28
    7a00:	df 93       	push	r29
    7a02:	cd b7       	in	r28, 0x3d	; 61
    7a04:	de b7       	in	r29, 0x3e	; 62
    7a06:	62 97       	sbiw	r28, 0x12	; 18
    7a08:	0f b6       	in	r0, 0x3f	; 63
    7a0a:	f8 94       	cli
    7a0c:	de bf       	out	0x3e, r29	; 62
    7a0e:	0f be       	out	0x3f, r0	; 63
    7a10:	cd bf       	out	0x3d, r28	; 61
    7a12:	8c 01       	movw	r16, r24
    7a14:	cb 01       	movw	r24, r22
    7a16:	f8 01       	movw	r30, r16
    7a18:	11 82       	std	Z+1, r1	; 0x01
    7a1a:	10 82       	st	Z, r1
    7a1c:	13 82       	std	Z+3, r1	; 0x03
    7a1e:	12 82       	std	Z+2, r1	; 0x02
    7a20:	15 82       	std	Z+5, r1	; 0x05
    7a22:	14 82       	std	Z+4, r1	; 0x04
    7a24:	50 e0       	ldi	r21, 0x00	; 0
    7a26:	be 01       	movw	r22, r28
    7a28:	6f 5f       	subi	r22, 0xFF	; 255
    7a2a:	7f 4f       	sbci	r23, 0xFF	; 255
    7a2c:	da d5       	rcall	.+2996   	; 0x85e2 <itoa>
    7a2e:	be 01       	movw	r22, r28
    7a30:	6f 5f       	subi	r22, 0xFF	; 255
    7a32:	7f 4f       	sbci	r23, 0xFF	; 255
    7a34:	c8 01       	movw	r24, r16
    7a36:	8a df       	rcall	.-236    	; 0x794c <_ZN6StringaSEPKc>
    7a38:	62 96       	adiw	r28, 0x12	; 18
    7a3a:	0f b6       	in	r0, 0x3f	; 63
    7a3c:	f8 94       	cli
    7a3e:	de bf       	out	0x3e, r29	; 62
    7a40:	0f be       	out	0x3f, r0	; 63
    7a42:	cd bf       	out	0x3d, r28	; 61
    7a44:	df 91       	pop	r29
    7a46:	cf 91       	pop	r28
    7a48:	1f 91       	pop	r17
    7a4a:	0f 91       	pop	r16
    7a4c:	08 95       	ret

00007a4e <_ZN6StringC1Ejh>:
    7a4e:	0f 93       	push	r16
    7a50:	1f 93       	push	r17
    7a52:	cf 93       	push	r28
    7a54:	df 93       	push	r29
    7a56:	cd b7       	in	r28, 0x3d	; 61
    7a58:	de b7       	in	r29, 0x3e	; 62
    7a5a:	61 97       	sbiw	r28, 0x11	; 17
    7a5c:	0f b6       	in	r0, 0x3f	; 63
    7a5e:	f8 94       	cli
    7a60:	de bf       	out	0x3e, r29	; 62
    7a62:	0f be       	out	0x3f, r0	; 63
    7a64:	cd bf       	out	0x3d, r28	; 61
    7a66:	8c 01       	movw	r16, r24
    7a68:	cb 01       	movw	r24, r22
    7a6a:	f8 01       	movw	r30, r16
    7a6c:	11 82       	std	Z+1, r1	; 0x01
    7a6e:	10 82       	st	Z, r1
    7a70:	13 82       	std	Z+3, r1	; 0x03
    7a72:	12 82       	std	Z+2, r1	; 0x02
    7a74:	15 82       	std	Z+5, r1	; 0x05
    7a76:	14 82       	std	Z+4, r1	; 0x04
    7a78:	50 e0       	ldi	r21, 0x00	; 0
    7a7a:	be 01       	movw	r22, r28
    7a7c:	6f 5f       	subi	r22, 0xFF	; 255
    7a7e:	7f 4f       	sbci	r23, 0xFF	; 255
    7a80:	04 d6       	rcall	.+3080   	; 0x868a <utoa>
    7a82:	be 01       	movw	r22, r28
    7a84:	6f 5f       	subi	r22, 0xFF	; 255
    7a86:	7f 4f       	sbci	r23, 0xFF	; 255
    7a88:	c8 01       	movw	r24, r16
    7a8a:	60 df       	rcall	.-320    	; 0x794c <_ZN6StringaSEPKc>
    7a8c:	61 96       	adiw	r28, 0x11	; 17
    7a8e:	0f b6       	in	r0, 0x3f	; 63
    7a90:	f8 94       	cli
    7a92:	de bf       	out	0x3e, r29	; 62
    7a94:	0f be       	out	0x3f, r0	; 63
    7a96:	cd bf       	out	0x3d, r28	; 61
    7a98:	df 91       	pop	r29
    7a9a:	cf 91       	pop	r28
    7a9c:	1f 91       	pop	r17
    7a9e:	0f 91       	pop	r16
    7aa0:	08 95       	ret

00007aa2 <_ZN6StringC1Emh>:
    7aa2:	0f 93       	push	r16
    7aa4:	1f 93       	push	r17
    7aa6:	cf 93       	push	r28
    7aa8:	df 93       	push	r29
    7aaa:	cd b7       	in	r28, 0x3d	; 61
    7aac:	de b7       	in	r29, 0x3e	; 62
    7aae:	a1 97       	sbiw	r28, 0x21	; 33
    7ab0:	0f b6       	in	r0, 0x3f	; 63
    7ab2:	f8 94       	cli
    7ab4:	de bf       	out	0x3e, r29	; 62
    7ab6:	0f be       	out	0x3f, r0	; 63
    7ab8:	cd bf       	out	0x3d, r28	; 61
    7aba:	8c 01       	movw	r16, r24
    7abc:	cb 01       	movw	r24, r22
    7abe:	ba 01       	movw	r22, r20
    7ac0:	f8 01       	movw	r30, r16
    7ac2:	11 82       	std	Z+1, r1	; 0x01
    7ac4:	10 82       	st	Z, r1
    7ac6:	13 82       	std	Z+3, r1	; 0x03
    7ac8:	12 82       	std	Z+2, r1	; 0x02
    7aca:	15 82       	std	Z+5, r1	; 0x05
    7acc:	14 82       	std	Z+4, r1	; 0x04
    7ace:	30 e0       	ldi	r19, 0x00	; 0
    7ad0:	ae 01       	movw	r20, r28
    7ad2:	4f 5f       	subi	r20, 0xFF	; 255
    7ad4:	5f 4f       	sbci	r21, 0xFF	; 255
    7ad6:	ae d5       	rcall	.+2908   	; 0x8634 <ultoa>
    7ad8:	be 01       	movw	r22, r28
    7ada:	6f 5f       	subi	r22, 0xFF	; 255
    7adc:	7f 4f       	sbci	r23, 0xFF	; 255
    7ade:	c8 01       	movw	r24, r16
    7ae0:	35 df       	rcall	.-406    	; 0x794c <_ZN6StringaSEPKc>
    7ae2:	a1 96       	adiw	r28, 0x21	; 33
    7ae4:	0f b6       	in	r0, 0x3f	; 63
    7ae6:	f8 94       	cli
    7ae8:	de bf       	out	0x3e, r29	; 62
    7aea:	0f be       	out	0x3f, r0	; 63
    7aec:	cd bf       	out	0x3d, r28	; 61
    7aee:	df 91       	pop	r29
    7af0:	cf 91       	pop	r28
    7af2:	1f 91       	pop	r17
    7af4:	0f 91       	pop	r16
    7af6:	08 95       	ret

00007af8 <_ZN6StringC1Edh>:
    7af8:	ef 92       	push	r14
    7afa:	ff 92       	push	r15
    7afc:	0f 93       	push	r16
    7afe:	1f 93       	push	r17
    7b00:	cf 93       	push	r28
    7b02:	df 93       	push	r29
    7b04:	cd b7       	in	r28, 0x3d	; 61
    7b06:	de b7       	in	r29, 0x3e	; 62
    7b08:	a1 97       	sbiw	r28, 0x21	; 33
    7b0a:	0f b6       	in	r0, 0x3f	; 63
    7b0c:	f8 94       	cli
    7b0e:	de bf       	out	0x3e, r29	; 62
    7b10:	0f be       	out	0x3f, r0	; 63
    7b12:	cd bf       	out	0x3d, r28	; 61
    7b14:	7c 01       	movw	r14, r24
    7b16:	cb 01       	movw	r24, r22
    7b18:	ba 01       	movw	r22, r20
    7b1a:	f7 01       	movw	r30, r14
    7b1c:	11 82       	std	Z+1, r1	; 0x01
    7b1e:	10 82       	st	Z, r1
    7b20:	13 82       	std	Z+3, r1	; 0x03
    7b22:	12 82       	std	Z+2, r1	; 0x02
    7b24:	15 82       	std	Z+5, r1	; 0x05
    7b26:	14 82       	std	Z+4, r1	; 0x04
    7b28:	42 e0       	ldi	r20, 0x02	; 2
    7b2a:	42 0f       	add	r20, r18
    7b2c:	8e 01       	movw	r16, r28
    7b2e:	0f 5f       	subi	r16, 0xFF	; 255
    7b30:	1f 4f       	sbci	r17, 0xFF	; 255
    7b32:	c6 d2       	rcall	.+1420   	; 0x80c0 <dtostrf>
    7b34:	bc 01       	movw	r22, r24
    7b36:	c7 01       	movw	r24, r14
    7b38:	09 df       	rcall	.-494    	; 0x794c <_ZN6StringaSEPKc>
    7b3a:	a1 96       	adiw	r28, 0x21	; 33
    7b3c:	0f b6       	in	r0, 0x3f	; 63
    7b3e:	f8 94       	cli
    7b40:	de bf       	out	0x3e, r29	; 62
    7b42:	0f be       	out	0x3f, r0	; 63
    7b44:	cd bf       	out	0x3d, r28	; 61
    7b46:	df 91       	pop	r29
    7b48:	cf 91       	pop	r28
    7b4a:	1f 91       	pop	r17
    7b4c:	0f 91       	pop	r16
    7b4e:	ff 90       	pop	r15
    7b50:	ef 90       	pop	r14
    7b52:	08 95       	ret

00007b54 <_ZN6String6concatEPKcj>:
    7b54:	ef 92       	push	r14
    7b56:	ff 92       	push	r15
    7b58:	0f 93       	push	r16
    7b5a:	1f 93       	push	r17
    7b5c:	cf 93       	push	r28
    7b5e:	df 93       	push	r29
    7b60:	61 15       	cp	r22, r1
    7b62:	71 05       	cpc	r23, r1
    7b64:	11 f4       	brne	.+4      	; 0x7b6a <_ZN6String6concatEPKcj+0x16>
    7b66:	80 e0       	ldi	r24, 0x00	; 0
    7b68:	1a c0       	rjmp	.+52     	; 0x7b9e <_ZN6String6concatEPKcj+0x4a>
    7b6a:	41 15       	cp	r20, r1
    7b6c:	51 05       	cpc	r21, r1
    7b6e:	b1 f0       	breq	.+44     	; 0x7b9c <_ZN6String6concatEPKcj+0x48>
    7b70:	7b 01       	movw	r14, r22
    7b72:	ec 01       	movw	r28, r24
    7b74:	8c 81       	ldd	r24, Y+4	; 0x04
    7b76:	9d 81       	ldd	r25, Y+5	; 0x05
    7b78:	8a 01       	movw	r16, r20
    7b7a:	08 0f       	add	r16, r24
    7b7c:	19 1f       	adc	r17, r25
    7b7e:	b8 01       	movw	r22, r16
    7b80:	ce 01       	movw	r24, r28
    7b82:	2c de       	rcall	.-936    	; 0x77dc <_ZN6String7reserveEj>
    7b84:	88 23       	and	r24, r24
    7b86:	79 f3       	breq	.-34     	; 0x7b66 <_ZN6String6concatEPKcj+0x12>
    7b88:	28 81       	ld	r18, Y
    7b8a:	39 81       	ldd	r19, Y+1	; 0x01
    7b8c:	8c 81       	ldd	r24, Y+4	; 0x04
    7b8e:	9d 81       	ldd	r25, Y+5	; 0x05
    7b90:	b7 01       	movw	r22, r14
    7b92:	82 0f       	add	r24, r18
    7b94:	93 1f       	adc	r25, r19
    7b96:	01 d5       	rcall	.+2562   	; 0x859a <strcpy>
    7b98:	1d 83       	std	Y+5, r17	; 0x05
    7b9a:	0c 83       	std	Y+4, r16	; 0x04
    7b9c:	81 e0       	ldi	r24, 0x01	; 1
    7b9e:	df 91       	pop	r29
    7ba0:	cf 91       	pop	r28
    7ba2:	1f 91       	pop	r17
    7ba4:	0f 91       	pop	r16
    7ba6:	ff 90       	pop	r15
    7ba8:	ef 90       	pop	r14
    7baa:	08 95       	ret

00007bac <_ZN6String6concatERKS_>:
    7bac:	fb 01       	movw	r30, r22
    7bae:	44 81       	ldd	r20, Z+4	; 0x04
    7bb0:	55 81       	ldd	r21, Z+5	; 0x05
    7bb2:	60 81       	ld	r22, Z
    7bb4:	71 81       	ldd	r23, Z+1	; 0x01
    7bb6:	ce cf       	rjmp	.-100    	; 0x7b54 <_ZN6String6concatEPKcj>

00007bb8 <_ZN6String6concatEPKc>:
    7bb8:	61 15       	cp	r22, r1
    7bba:	71 05       	cpc	r23, r1
    7bbc:	49 f0       	breq	.+18     	; 0x7bd0 <_ZN6String6concatEPKc+0x18>
    7bbe:	fb 01       	movw	r30, r22
    7bc0:	01 90       	ld	r0, Z+
    7bc2:	00 20       	and	r0, r0
    7bc4:	e9 f7       	brne	.-6      	; 0x7bc0 <_ZN6String6concatEPKc+0x8>
    7bc6:	31 97       	sbiw	r30, 0x01	; 1
    7bc8:	af 01       	movw	r20, r30
    7bca:	46 1b       	sub	r20, r22
    7bcc:	57 0b       	sbc	r21, r23
    7bce:	c2 cf       	rjmp	.-124    	; 0x7b54 <_ZN6String6concatEPKcj>
    7bd0:	80 e0       	ldi	r24, 0x00	; 0
    7bd2:	08 95       	ret

00007bd4 <_ZN6String6concatEc>:
    7bd4:	cf 93       	push	r28
    7bd6:	df 93       	push	r29
    7bd8:	00 d0       	rcall	.+0      	; 0x7bda <_ZN6String6concatEc+0x6>
    7bda:	cd b7       	in	r28, 0x3d	; 61
    7bdc:	de b7       	in	r29, 0x3e	; 62
    7bde:	69 83       	std	Y+1, r22	; 0x01
    7be0:	1a 82       	std	Y+2, r1	; 0x02
    7be2:	41 e0       	ldi	r20, 0x01	; 1
    7be4:	50 e0       	ldi	r21, 0x00	; 0
    7be6:	be 01       	movw	r22, r28
    7be8:	6f 5f       	subi	r22, 0xFF	; 255
    7bea:	7f 4f       	sbci	r23, 0xFF	; 255
    7bec:	b3 df       	rcall	.-154    	; 0x7b54 <_ZN6String6concatEPKcj>
    7bee:	0f 90       	pop	r0
    7bf0:	0f 90       	pop	r0
    7bf2:	df 91       	pop	r29
    7bf4:	cf 91       	pop	r28
    7bf6:	08 95       	ret

00007bf8 <_ZplRK15StringSumHelperRK6String>:
    7bf8:	cf 93       	push	r28
    7bfa:	df 93       	push	r29
    7bfc:	ec 01       	movw	r28, r24
    7bfe:	fb 01       	movw	r30, r22
    7c00:	44 81       	ldd	r20, Z+4	; 0x04
    7c02:	55 81       	ldd	r21, Z+5	; 0x05
    7c04:	60 81       	ld	r22, Z
    7c06:	71 81       	ldd	r23, Z+1	; 0x01
    7c08:	a5 df       	rcall	.-182    	; 0x7b54 <_ZN6String6concatEPKcj>
    7c0a:	81 11       	cpse	r24, r1
    7c0c:	02 c0       	rjmp	.+4      	; 0x7c12 <_ZplRK15StringSumHelperRK6String+0x1a>
    7c0e:	ce 01       	movw	r24, r28
    7c10:	bb dd       	rcall	.-1162   	; 0x7788 <_ZN6String10invalidateEv>
    7c12:	ce 01       	movw	r24, r28
    7c14:	df 91       	pop	r29
    7c16:	cf 91       	pop	r28
    7c18:	08 95       	ret

00007c1a <_ZplRK15StringSumHelperPKc>:
    7c1a:	cf 93       	push	r28
    7c1c:	df 93       	push	r29
    7c1e:	ec 01       	movw	r28, r24
    7c20:	61 15       	cp	r22, r1
    7c22:	71 05       	cpc	r23, r1
    7c24:	59 f0       	breq	.+22     	; 0x7c3c <_ZplRK15StringSumHelperPKc+0x22>
    7c26:	fb 01       	movw	r30, r22
    7c28:	01 90       	ld	r0, Z+
    7c2a:	00 20       	and	r0, r0
    7c2c:	e9 f7       	brne	.-6      	; 0x7c28 <_ZplRK15StringSumHelperPKc+0xe>
    7c2e:	31 97       	sbiw	r30, 0x01	; 1
    7c30:	af 01       	movw	r20, r30
    7c32:	46 1b       	sub	r20, r22
    7c34:	57 0b       	sbc	r21, r23
    7c36:	8e df       	rcall	.-228    	; 0x7b54 <_ZN6String6concatEPKcj>
    7c38:	81 11       	cpse	r24, r1
    7c3a:	02 c0       	rjmp	.+4      	; 0x7c40 <_ZplRK15StringSumHelperPKc+0x26>
    7c3c:	ce 01       	movw	r24, r28
    7c3e:	a4 dd       	rcall	.-1208   	; 0x7788 <_ZN6String10invalidateEv>
    7c40:	ce 01       	movw	r24, r28
    7c42:	df 91       	pop	r29
    7c44:	cf 91       	pop	r28
    7c46:	08 95       	ret

00007c48 <_ZplRK15StringSumHelperc>:
    7c48:	cf 93       	push	r28
    7c4a:	df 93       	push	r29
    7c4c:	ec 01       	movw	r28, r24
    7c4e:	c2 df       	rcall	.-124    	; 0x7bd4 <_ZN6String6concatEc>
    7c50:	81 11       	cpse	r24, r1
    7c52:	02 c0       	rjmp	.+4      	; 0x7c58 <_ZplRK15StringSumHelperc+0x10>
    7c54:	ce 01       	movw	r24, r28
    7c56:	98 dd       	rcall	.-1232   	; 0x7788 <_ZN6String10invalidateEv>
    7c58:	ce 01       	movw	r24, r28
    7c5a:	df 91       	pop	r29
    7c5c:	cf 91       	pop	r28
    7c5e:	08 95       	ret

00007c60 <_ZNK6String6equalsEPKc>:
    7c60:	fc 01       	movw	r30, r24
    7c62:	24 81       	ldd	r18, Z+4	; 0x04
    7c64:	35 81       	ldd	r19, Z+5	; 0x05
    7c66:	23 2b       	or	r18, r19
    7c68:	31 f4       	brne	.+12     	; 0x7c76 <_ZNK6String6equalsEPKc+0x16>
    7c6a:	21 e0       	ldi	r18, 0x01	; 1
    7c6c:	61 15       	cp	r22, r1
    7c6e:	71 05       	cpc	r23, r1
    7c70:	99 f0       	breq	.+38     	; 0x7c98 <_ZNK6String6equalsEPKc+0x38>
    7c72:	fb 01       	movw	r30, r22
    7c74:	08 c0       	rjmp	.+16     	; 0x7c86 <_ZNK6String6equalsEPKc+0x26>
    7c76:	fc 01       	movw	r30, r24
    7c78:	80 81       	ld	r24, Z
    7c7a:	91 81       	ldd	r25, Z+1	; 0x01
    7c7c:	61 15       	cp	r22, r1
    7c7e:	71 05       	cpc	r23, r1
    7c80:	31 f4       	brne	.+12     	; 0x7c8e <_ZNK6String6equalsEPKc+0x2e>
    7c82:	21 e0       	ldi	r18, 0x01	; 1
    7c84:	fc 01       	movw	r30, r24
    7c86:	80 81       	ld	r24, Z
    7c88:	88 23       	and	r24, r24
    7c8a:	31 f0       	breq	.+12     	; 0x7c98 <_ZNK6String6equalsEPKc+0x38>
    7c8c:	04 c0       	rjmp	.+8      	; 0x7c96 <_ZNK6String6equalsEPKc+0x36>
    7c8e:	7c d4       	rcall	.+2296   	; 0x8588 <strcmp>
    7c90:	21 e0       	ldi	r18, 0x01	; 1
    7c92:	89 2b       	or	r24, r25
    7c94:	09 f0       	breq	.+2      	; 0x7c98 <_ZNK6String6equalsEPKc+0x38>
    7c96:	20 e0       	ldi	r18, 0x00	; 0
    7c98:	82 2f       	mov	r24, r18
    7c9a:	08 95       	ret

00007c9c <_ZNK6String8getBytesEPhjj>:
    7c9c:	0f 93       	push	r16
    7c9e:	1f 93       	push	r17
    7ca0:	cf 93       	push	r28
    7ca2:	df 93       	push	r29
    7ca4:	41 15       	cp	r20, r1
    7ca6:	51 05       	cpc	r21, r1
    7ca8:	11 f1       	breq	.+68     	; 0x7cee <_ZNK6String8getBytesEPhjj+0x52>
    7caa:	61 15       	cp	r22, r1
    7cac:	71 05       	cpc	r23, r1
    7cae:	f9 f0       	breq	.+62     	; 0x7cee <_ZNK6String8getBytesEPhjj+0x52>
    7cb0:	dc 01       	movw	r26, r24
    7cb2:	14 96       	adiw	r26, 0x04	; 4
    7cb4:	ed 91       	ld	r30, X+
    7cb6:	fc 91       	ld	r31, X
    7cb8:	15 97       	sbiw	r26, 0x05	; 5
    7cba:	2e 17       	cp	r18, r30
    7cbc:	3f 07       	cpc	r19, r31
    7cbe:	18 f0       	brcs	.+6      	; 0x7cc6 <_ZNK6String8getBytesEPhjj+0x2a>
    7cc0:	fb 01       	movw	r30, r22
    7cc2:	10 82       	st	Z, r1
    7cc4:	14 c0       	rjmp	.+40     	; 0x7cee <_ZNK6String8getBytesEPhjj+0x52>
    7cc6:	e2 1b       	sub	r30, r18
    7cc8:	f3 0b       	sbc	r31, r19
    7cca:	ea 01       	movw	r28, r20
    7ccc:	21 97       	sbiw	r28, 0x01	; 1
    7cce:	ec 17       	cp	r30, r28
    7cd0:	fd 07       	cpc	r31, r29
    7cd2:	08 f4       	brcc	.+2      	; 0x7cd6 <_ZNK6String8getBytesEPhjj+0x3a>
    7cd4:	ef 01       	movw	r28, r30
    7cd6:	8b 01       	movw	r16, r22
    7cd8:	fc 01       	movw	r30, r24
    7cda:	60 81       	ld	r22, Z
    7cdc:	71 81       	ldd	r23, Z+1	; 0x01
    7cde:	62 0f       	add	r22, r18
    7ce0:	73 1f       	adc	r23, r19
    7ce2:	ae 01       	movw	r20, r28
    7ce4:	c8 01       	movw	r24, r16
    7ce6:	6e d4       	rcall	.+2268   	; 0x85c4 <strncpy>
    7ce8:	c0 0f       	add	r28, r16
    7cea:	d1 1f       	adc	r29, r17
    7cec:	18 82       	st	Y, r1
    7cee:	df 91       	pop	r29
    7cf0:	cf 91       	pop	r28
    7cf2:	1f 91       	pop	r17
    7cf4:	0f 91       	pop	r16
    7cf6:	08 95       	ret

00007cf8 <_ZNK6String9substringEjj>:
    7cf8:	bf 92       	push	r11
    7cfa:	cf 92       	push	r12
    7cfc:	df 92       	push	r13
    7cfe:	ef 92       	push	r14
    7d00:	ff 92       	push	r15
    7d02:	0f 93       	push	r16
    7d04:	1f 93       	push	r17
    7d06:	cf 93       	push	r28
    7d08:	df 93       	push	r29
    7d0a:	7c 01       	movw	r14, r24
    7d0c:	6b 01       	movw	r12, r22
    7d0e:	8a 01       	movw	r16, r20
    7d10:	e9 01       	movw	r28, r18
    7d12:	24 17       	cp	r18, r20
    7d14:	35 07       	cpc	r19, r21
    7d16:	20 f4       	brcc	.+8      	; 0x7d20 <_ZNK6String9substringEjj+0x28>
    7d18:	81 2f       	mov	r24, r17
    7d1a:	89 01       	movw	r16, r18
    7d1c:	c4 2f       	mov	r28, r20
    7d1e:	d8 2f       	mov	r29, r24
    7d20:	6f ee       	ldi	r22, 0xEF	; 239
    7d22:	71 e0       	ldi	r23, 0x01	; 1
    7d24:	c7 01       	movw	r24, r14
    7d26:	93 dd       	rcall	.-1242   	; 0x784e <_ZN6StringC1EPKc>
    7d28:	d6 01       	movw	r26, r12
    7d2a:	14 96       	adiw	r26, 0x04	; 4
    7d2c:	8d 91       	ld	r24, X+
    7d2e:	9c 91       	ld	r25, X
    7d30:	15 97       	sbiw	r26, 0x05	; 5
    7d32:	08 17       	cp	r16, r24
    7d34:	19 07       	cpc	r17, r25
    7d36:	c0 f4       	brcc	.+48     	; 0x7d68 <_ZNK6String9substringEjj+0x70>
    7d38:	8c 17       	cp	r24, r28
    7d3a:	9d 07       	cpc	r25, r29
    7d3c:	08 f4       	brcc	.+2      	; 0x7d40 <_ZNK6String9substringEjj+0x48>
    7d3e:	ec 01       	movw	r28, r24
    7d40:	d6 01       	movw	r26, r12
    7d42:	ed 91       	ld	r30, X+
    7d44:	fc 91       	ld	r31, X
    7d46:	11 97       	sbiw	r26, 0x01	; 1
    7d48:	ec 0f       	add	r30, r28
    7d4a:	fd 1f       	adc	r31, r29
    7d4c:	b0 80       	ld	r11, Z
    7d4e:	10 82       	st	Z, r1
    7d50:	6d 91       	ld	r22, X+
    7d52:	7c 91       	ld	r23, X
    7d54:	60 0f       	add	r22, r16
    7d56:	71 1f       	adc	r23, r17
    7d58:	c7 01       	movw	r24, r14
    7d5a:	f8 dd       	rcall	.-1040   	; 0x794c <_ZN6StringaSEPKc>
    7d5c:	d6 01       	movw	r26, r12
    7d5e:	ed 91       	ld	r30, X+
    7d60:	fc 91       	ld	r31, X
    7d62:	ec 0f       	add	r30, r28
    7d64:	fd 1f       	adc	r31, r29
    7d66:	b0 82       	st	Z, r11
    7d68:	c7 01       	movw	r24, r14
    7d6a:	df 91       	pop	r29
    7d6c:	cf 91       	pop	r28
    7d6e:	1f 91       	pop	r17
    7d70:	0f 91       	pop	r16
    7d72:	ff 90       	pop	r15
    7d74:	ef 90       	pop	r14
    7d76:	df 90       	pop	r13
    7d78:	cf 90       	pop	r12
    7d7a:	bf 90       	pop	r11
    7d7c:	08 95       	ret

00007d7e <_ZN6String4trimEv>:

void String::trim(void)
{
    7d7e:	af 92       	push	r10
    7d80:	bf 92       	push	r11
    7d82:	cf 92       	push	r12
    7d84:	df 92       	push	r13
    7d86:	ef 92       	push	r14
    7d88:	ff 92       	push	r15
    7d8a:	0f 93       	push	r16
    7d8c:	1f 93       	push	r17
    7d8e:	cf 93       	push	r28
    7d90:	df 93       	push	r29
	if (!buffer || len == 0) return;
    7d92:	dc 01       	movw	r26, r24
    7d94:	cd 90       	ld	r12, X+
    7d96:	dc 90       	ld	r13, X
    7d98:	11 97       	sbiw	r26, 0x01	; 1
    7d9a:	c1 14       	cp	r12, r1
    7d9c:	d1 04       	cpc	r13, r1
    7d9e:	09 f4       	brne	.+2      	; 0x7da2 <_ZN6String4trimEv+0x24>
    7da0:	3c c0       	rjmp	.+120    	; 0x7e1a <_ZN6String4trimEv+0x9c>
    7da2:	14 96       	adiw	r26, 0x04	; 4
    7da4:	cd 91       	ld	r28, X+
    7da6:	dc 91       	ld	r29, X
    7da8:	15 97       	sbiw	r26, 0x05	; 5
    7daa:	20 97       	sbiw	r28, 0x00	; 0
    7dac:	b1 f1       	breq	.+108    	; 0x7e1a <_ZN6String4trimEv+0x9c>
    7dae:	8c 01       	movw	r16, r24
    7db0:	76 01       	movw	r14, r12
    7db2:	57 01       	movw	r10, r14
    7db4:	bf ef       	ldi	r27, 0xFF	; 255
    7db6:	ab 1a       	sub	r10, r27
    7db8:	bb 0a       	sbc	r11, r27
	char *begin = buffer;
	while (isspace(*begin)) begin++;
    7dba:	f7 01       	movw	r30, r14
    7dbc:	80 81       	ld	r24, Z
    7dbe:	90 e0       	ldi	r25, 0x00	; 0
    7dc0:	c9 d3       	rcall	.+1938   	; 0x8554 <isspace>
    7dc2:	89 2b       	or	r24, r25
    7dc4:	11 f0       	breq	.+4      	; 0x7dca <_ZN6String4trimEv+0x4c>
    7dc6:	75 01       	movw	r14, r10
    7dc8:	f4 cf       	rjmp	.-24     	; 0x7db2 <_ZN6String4trimEv+0x34>
	char *end = buffer + len - 1;
    7dca:	21 97       	sbiw	r28, 0x01	; 1
    7dcc:	cc 0d       	add	r28, r12
    7dce:	dd 1d       	adc	r29, r13
	while (isspace(*end) && end >= begin) end--;
    7dd0:	88 81       	ld	r24, Y
    7dd2:	90 e0       	ldi	r25, 0x00	; 0
    7dd4:	bf d3       	rcall	.+1918   	; 0x8554 <isspace>
    7dd6:	89 2b       	or	r24, r25
    7dd8:	29 f0       	breq	.+10     	; 0x7de4 <_ZN6String4trimEv+0x66>
    7dda:	ce 15       	cp	r28, r14
    7ddc:	df 05       	cpc	r29, r15
    7dde:	10 f0       	brcs	.+4      	; 0x7de4 <_ZN6String4trimEv+0x66>
    7de0:	21 97       	sbiw	r28, 0x01	; 1
    7de2:	f6 cf       	rjmp	.-20     	; 0x7dd0 <_ZN6String4trimEv+0x52>
	len = end + 1 - begin;
    7de4:	ae 01       	movw	r20, r28
    7de6:	4f 5f       	subi	r20, 0xFF	; 255
    7de8:	5f 4f       	sbci	r21, 0xFF	; 255
    7dea:	4e 19       	sub	r20, r14
    7dec:	5f 09       	sbc	r21, r15
    7dee:	d8 01       	movw	r26, r16
    7df0:	15 96       	adiw	r26, 0x05	; 5
    7df2:	5c 93       	st	X, r21
    7df4:	4e 93       	st	-X, r20
    7df6:	14 97       	sbiw	r26, 0x04	; 4
	if (begin > buffer) memcpy(buffer, begin, len);
    7df8:	ce 14       	cp	r12, r14
    7dfa:	df 04       	cpc	r13, r15
    7dfc:	18 f4       	brcc	.+6      	; 0x7e04 <_ZN6String4trimEv+0x86>
    7dfe:	b7 01       	movw	r22, r14
    7e00:	c6 01       	movw	r24, r12
    7e02:	b9 d3       	rcall	.+1906   	; 0x8576 <memcpy>
	buffer[len] = 0;
    7e04:	d8 01       	movw	r26, r16
    7e06:	ed 91       	ld	r30, X+
    7e08:	fc 91       	ld	r31, X
    7e0a:	11 97       	sbiw	r26, 0x01	; 1
    7e0c:	14 96       	adiw	r26, 0x04	; 4
    7e0e:	8d 91       	ld	r24, X+
    7e10:	9c 91       	ld	r25, X
    7e12:	15 97       	sbiw	r26, 0x05	; 5
    7e14:	e8 0f       	add	r30, r24
    7e16:	f9 1f       	adc	r31, r25
    7e18:	10 82       	st	Z, r1
}
    7e1a:	df 91       	pop	r29
    7e1c:	cf 91       	pop	r28
    7e1e:	1f 91       	pop	r17
    7e20:	0f 91       	pop	r16
    7e22:	ff 90       	pop	r15
    7e24:	ef 90       	pop	r14
    7e26:	df 90       	pop	r13
    7e28:	cf 90       	pop	r12
    7e2a:	bf 90       	pop	r11
    7e2c:	af 90       	pop	r10
    7e2e:	08 95       	ret

00007e30 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
    7e30:	fc 01       	movw	r30, r24
    7e32:	80 81       	ld	r24, Z
    7e34:	91 81       	ldd	r25, Z+1	; 0x01
    7e36:	00 97       	sbiw	r24, 0x00	; 0
    7e38:	09 f0       	breq	.+2      	; 0x7e3c <_ZNK6String5toIntEv+0xc>
    7e3a:	66 c3       	rjmp	.+1740   	; 0x8508 <atol>
	return 0;
}
    7e3c:	60 e0       	ldi	r22, 0x00	; 0
    7e3e:	70 e0       	ldi	r23, 0x00	; 0
    7e40:	cb 01       	movw	r24, r22
    7e42:	08 95       	ret

00007e44 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    7e44:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    7e46:	91 8d       	ldd	r25, Z+25	; 0x19
    7e48:	22 8d       	ldd	r18, Z+26	; 0x1a
    7e4a:	89 2f       	mov	r24, r25
    7e4c:	90 e0       	ldi	r25, 0x00	; 0
    7e4e:	80 5c       	subi	r24, 0xC0	; 192
    7e50:	9f 4f       	sbci	r25, 0xFF	; 255
    7e52:	82 1b       	sub	r24, r18
    7e54:	91 09       	sbc	r25, r1
}
    7e56:	8f 73       	andi	r24, 0x3F	; 63
    7e58:	99 27       	eor	r25, r25
    7e5a:	08 95       	ret

00007e5c <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    7e5c:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    7e5e:	91 8d       	ldd	r25, Z+25	; 0x19
    7e60:	82 8d       	ldd	r24, Z+26	; 0x1a
    7e62:	98 17       	cp	r25, r24
    7e64:	31 f0       	breq	.+12     	; 0x7e72 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    7e66:	82 8d       	ldd	r24, Z+26	; 0x1a
    7e68:	e8 0f       	add	r30, r24
    7e6a:	f1 1d       	adc	r31, r1
    7e6c:	85 8d       	ldd	r24, Z+29	; 0x1d
    7e6e:	90 e0       	ldi	r25, 0x00	; 0
    7e70:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    7e72:	8f ef       	ldi	r24, 0xFF	; 255
    7e74:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    7e76:	08 95       	ret

00007e78 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    7e78:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    7e7a:	91 8d       	ldd	r25, Z+25	; 0x19
    7e7c:	82 8d       	ldd	r24, Z+26	; 0x1a
    7e7e:	98 17       	cp	r25, r24
    7e80:	61 f0       	breq	.+24     	; 0x7e9a <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    7e82:	82 8d       	ldd	r24, Z+26	; 0x1a
    7e84:	df 01       	movw	r26, r30
    7e86:	a8 0f       	add	r26, r24
    7e88:	b1 1d       	adc	r27, r1
    7e8a:	5d 96       	adiw	r26, 0x1d	; 29
    7e8c:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    7e8e:	92 8d       	ldd	r25, Z+26	; 0x1a
    7e90:	9f 5f       	subi	r25, 0xFF	; 255
    7e92:	9f 73       	andi	r25, 0x3F	; 63
    7e94:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    7e96:	90 e0       	ldi	r25, 0x00	; 0
    7e98:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    7e9a:	8f ef       	ldi	r24, 0xFF	; 255
    7e9c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    7e9e:	08 95       	ret

00007ea0 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    7ea0:	fc 01       	movw	r30, r24
    7ea2:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    7ea4:	44 8d       	ldd	r20, Z+28	; 0x1c
    7ea6:	25 2f       	mov	r18, r21
    7ea8:	30 e0       	ldi	r19, 0x00	; 0
    7eaa:	84 2f       	mov	r24, r20
    7eac:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    7eae:	82 1b       	sub	r24, r18
    7eb0:	93 0b       	sbc	r25, r19
    7eb2:	54 17       	cp	r21, r20
    7eb4:	10 f0       	brcs	.+4      	; 0x7eba <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    7eb6:	cf 96       	adiw	r24, 0x3f	; 63
    7eb8:	08 95       	ret
  return tail - head - 1;
    7eba:	01 97       	sbiw	r24, 0x01	; 1
}
    7ebc:	08 95       	ret

00007ebe <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    7ebe:	8f e4       	ldi	r24, 0x4F	; 79
    7ec0:	98 e3       	ldi	r25, 0x38	; 56
    7ec2:	89 2b       	or	r24, r25
    7ec4:	41 f0       	breq	.+16     	; 0x7ed6 <_Z14serialEventRunv+0x18>
    7ec6:	80 e0       	ldi	r24, 0x00	; 0
    7ec8:	90 e0       	ldi	r25, 0x00	; 0
    7eca:	89 2b       	or	r24, r25
    7ecc:	21 f0       	breq	.+8      	; 0x7ed6 <_Z14serialEventRunv+0x18>
    7ece:	e7 d8       	rcall	.-3634   	; 0x709e <_Z17Serial0_availablev>
    7ed0:	81 11       	cpse	r24, r1
    7ed2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    7ed6:	08 95       	ret

00007ed8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    7ed8:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    7eda:	84 8d       	ldd	r24, Z+28	; 0x1c
    7edc:	df 01       	movw	r26, r30
    7ede:	a8 0f       	add	r26, r24
    7ee0:	b1 1d       	adc	r27, r1
    7ee2:	a3 5a       	subi	r26, 0xA3	; 163
    7ee4:	bf 4f       	sbci	r27, 0xFF	; 255
    7ee6:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    7ee8:	84 8d       	ldd	r24, Z+28	; 0x1c
    7eea:	90 e0       	ldi	r25, 0x00	; 0
    7eec:	01 96       	adiw	r24, 0x01	; 1
    7eee:	8f 73       	andi	r24, 0x3F	; 63
    7ef0:	99 27       	eor	r25, r25
    7ef2:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    7ef4:	a6 89       	ldd	r26, Z+22	; 0x16
    7ef6:	b7 89       	ldd	r27, Z+23	; 0x17
    7ef8:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    7efa:	a0 89       	ldd	r26, Z+16	; 0x10
    7efc:	b1 89       	ldd	r27, Z+17	; 0x11
    7efe:	8c 91       	ld	r24, X
    7f00:	83 70       	andi	r24, 0x03	; 3
    7f02:	80 64       	ori	r24, 0x40	; 64
    7f04:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    7f06:	93 8d       	ldd	r25, Z+27	; 0x1b
    7f08:	84 8d       	ldd	r24, Z+28	; 0x1c
    7f0a:	98 13       	cpse	r25, r24
    7f0c:	06 c0       	rjmp	.+12     	; 0x7f1a <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    7f0e:	02 88       	ldd	r0, Z+18	; 0x12
    7f10:	f3 89       	ldd	r31, Z+19	; 0x13
    7f12:	e0 2d       	mov	r30, r0
    7f14:	80 81       	ld	r24, Z
    7f16:	8f 7d       	andi	r24, 0xDF	; 223
    7f18:	80 83       	st	Z, r24
    7f1a:	08 95       	ret

00007f1c <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    7f1c:	ef 92       	push	r14
    7f1e:	ff 92       	push	r15
    7f20:	0f 93       	push	r16
    7f22:	1f 93       	push	r17
    7f24:	cf 93       	push	r28
    7f26:	df 93       	push	r29
    7f28:	ec 01       	movw	r28, r24
  _written = true;
    7f2a:	81 e0       	ldi	r24, 0x01	; 1
    7f2c:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    7f2e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    7f30:	8c 8d       	ldd	r24, Y+28	; 0x1c
    7f32:	98 13       	cpse	r25, r24
    7f34:	05 c0       	rjmp	.+10     	; 0x7f40 <_ZN14HardwareSerial5writeEh+0x24>
    7f36:	e8 89       	ldd	r30, Y+16	; 0x10
    7f38:	f9 89       	ldd	r31, Y+17	; 0x11
    7f3a:	80 81       	ld	r24, Z
    7f3c:	85 fd       	sbrc	r24, 5
    7f3e:	25 c0       	rjmp	.+74     	; 0x7f8a <_ZN14HardwareSerial5writeEh+0x6e>
    7f40:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    7f42:	0b 8d       	ldd	r16, Y+27	; 0x1b
    7f44:	10 e0       	ldi	r17, 0x00	; 0
    7f46:	0f 5f       	subi	r16, 0xFF	; 255
    7f48:	1f 4f       	sbci	r17, 0xFF	; 255
    7f4a:	0f 73       	andi	r16, 0x3F	; 63
    7f4c:	11 27       	eor	r17, r17
    7f4e:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    7f50:	8c 8d       	ldd	r24, Y+28	; 0x1c
    7f52:	e8 12       	cpse	r14, r24
    7f54:	0b c0       	rjmp	.+22     	; 0x7f6c <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    7f56:	0f b6       	in	r0, 0x3f	; 63
    7f58:	07 fc       	sbrc	r0, 7
    7f5a:	fa cf       	rjmp	.-12     	; 0x7f50 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    7f5c:	e8 89       	ldd	r30, Y+16	; 0x10
    7f5e:	f9 89       	ldd	r31, Y+17	; 0x11
    7f60:	80 81       	ld	r24, Z
    7f62:	85 ff       	sbrs	r24, 5
    7f64:	f5 cf       	rjmp	.-22     	; 0x7f50 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    7f66:	ce 01       	movw	r24, r28
    7f68:	b7 df       	rcall	.-146    	; 0x7ed8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    7f6a:	f2 cf       	rjmp	.-28     	; 0x7f50 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    7f6c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7f6e:	fe 01       	movw	r30, r28
    7f70:	e8 0f       	add	r30, r24
    7f72:	f1 1d       	adc	r31, r1
    7f74:	e3 5a       	subi	r30, 0xA3	; 163
    7f76:	ff 4f       	sbci	r31, 0xFF	; 255
    7f78:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    7f7a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    7f7c:	f8 94       	cli
    _tx_buffer_head = i;
    7f7e:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    7f80:	ea 89       	ldd	r30, Y+18	; 0x12
    7f82:	fb 89       	ldd	r31, Y+19	; 0x13
    7f84:	80 81       	ld	r24, Z
    7f86:	80 62       	ori	r24, 0x20	; 32
    7f88:	0a c0       	rjmp	.+20     	; 0x7f9e <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    7f8a:	9f b7       	in	r25, 0x3f	; 63
    7f8c:	f8 94       	cli
      *_udr = c;
    7f8e:	ee 89       	ldd	r30, Y+22	; 0x16
    7f90:	ff 89       	ldd	r31, Y+23	; 0x17
    7f92:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    7f94:	e8 89       	ldd	r30, Y+16	; 0x10
    7f96:	f9 89       	ldd	r31, Y+17	; 0x11
    7f98:	80 81       	ld	r24, Z
    7f9a:	83 70       	andi	r24, 0x03	; 3
    7f9c:	80 64       	ori	r24, 0x40	; 64
    7f9e:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    7fa0:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    7fa2:	81 e0       	ldi	r24, 0x01	; 1
    7fa4:	90 e0       	ldi	r25, 0x00	; 0
    7fa6:	df 91       	pop	r29
    7fa8:	cf 91       	pop	r28
    7faa:	1f 91       	pop	r17
    7fac:	0f 91       	pop	r16
    7fae:	ff 90       	pop	r15
    7fb0:	ef 90       	pop	r14
    7fb2:	08 95       	ret

00007fb4 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    7fb4:	cf 93       	push	r28
    7fb6:	df 93       	push	r29
    7fb8:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    7fba:	88 8d       	ldd	r24, Y+24	; 0x18
    7fbc:	88 23       	and	r24, r24
    7fbe:	c1 f0       	breq	.+48     	; 0x7ff0 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    7fc0:	ea 89       	ldd	r30, Y+18	; 0x12
    7fc2:	fb 89       	ldd	r31, Y+19	; 0x13
    7fc4:	80 81       	ld	r24, Z
    7fc6:	85 fd       	sbrc	r24, 5
    7fc8:	05 c0       	rjmp	.+10     	; 0x7fd4 <_ZN14HardwareSerial5flushEv+0x20>
    7fca:	a8 89       	ldd	r26, Y+16	; 0x10
    7fcc:	b9 89       	ldd	r27, Y+17	; 0x11
    7fce:	8c 91       	ld	r24, X
    7fd0:	86 fd       	sbrc	r24, 6
    7fd2:	0e c0       	rjmp	.+28     	; 0x7ff0 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    7fd4:	0f b6       	in	r0, 0x3f	; 63
    7fd6:	07 fc       	sbrc	r0, 7
    7fd8:	f5 cf       	rjmp	.-22     	; 0x7fc4 <_ZN14HardwareSerial5flushEv+0x10>
    7fda:	80 81       	ld	r24, Z
    7fdc:	85 ff       	sbrs	r24, 5
    7fde:	f2 cf       	rjmp	.-28     	; 0x7fc4 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    7fe0:	a8 89       	ldd	r26, Y+16	; 0x10
    7fe2:	b9 89       	ldd	r27, Y+17	; 0x11
    7fe4:	8c 91       	ld	r24, X
    7fe6:	85 ff       	sbrs	r24, 5
    7fe8:	ed cf       	rjmp	.-38     	; 0x7fc4 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    7fea:	ce 01       	movw	r24, r28
    7fec:	75 df       	rcall	.-278    	; 0x7ed8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    7fee:	e8 cf       	rjmp	.-48     	; 0x7fc0 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    7ff0:	df 91       	pop	r29
    7ff2:	cf 91       	pop	r28
    7ff4:	08 95       	ret

00007ff6 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    7ff6:	08 95       	ret

00007ff8 <__udivmodqi4>:
    7ff8:	99 1b       	sub	r25, r25
    7ffa:	79 e0       	ldi	r23, 0x09	; 9
    7ffc:	04 c0       	rjmp	.+8      	; 0x8006 <__udivmodqi4_ep>

00007ffe <__udivmodqi4_loop>:
    7ffe:	99 1f       	adc	r25, r25
    8000:	96 17       	cp	r25, r22
    8002:	08 f0       	brcs	.+2      	; 0x8006 <__udivmodqi4_ep>
    8004:	96 1b       	sub	r25, r22

00008006 <__udivmodqi4_ep>:
    8006:	88 1f       	adc	r24, r24
    8008:	7a 95       	dec	r23
    800a:	c9 f7       	brne	.-14     	; 0x7ffe <__udivmodqi4_loop>
    800c:	80 95       	com	r24
    800e:	08 95       	ret

00008010 <__udivmodhi4>:
    8010:	aa 1b       	sub	r26, r26
    8012:	bb 1b       	sub	r27, r27
    8014:	51 e1       	ldi	r21, 0x11	; 17
    8016:	07 c0       	rjmp	.+14     	; 0x8026 <__udivmodhi4_ep>

00008018 <__udivmodhi4_loop>:
    8018:	aa 1f       	adc	r26, r26
    801a:	bb 1f       	adc	r27, r27
    801c:	a6 17       	cp	r26, r22
    801e:	b7 07       	cpc	r27, r23
    8020:	10 f0       	brcs	.+4      	; 0x8026 <__udivmodhi4_ep>
    8022:	a6 1b       	sub	r26, r22
    8024:	b7 0b       	sbc	r27, r23

00008026 <__udivmodhi4_ep>:
    8026:	88 1f       	adc	r24, r24
    8028:	99 1f       	adc	r25, r25
    802a:	5a 95       	dec	r21
    802c:	a9 f7       	brne	.-22     	; 0x8018 <__udivmodhi4_loop>
    802e:	80 95       	com	r24
    8030:	90 95       	com	r25
    8032:	bc 01       	movw	r22, r24
    8034:	cd 01       	movw	r24, r26
    8036:	08 95       	ret

00008038 <__udivmodsi4>:
    8038:	a1 e2       	ldi	r26, 0x21	; 33
    803a:	1a 2e       	mov	r1, r26
    803c:	aa 1b       	sub	r26, r26
    803e:	bb 1b       	sub	r27, r27
    8040:	fd 01       	movw	r30, r26
    8042:	0d c0       	rjmp	.+26     	; 0x805e <__udivmodsi4_ep>

00008044 <__udivmodsi4_loop>:
    8044:	aa 1f       	adc	r26, r26
    8046:	bb 1f       	adc	r27, r27
    8048:	ee 1f       	adc	r30, r30
    804a:	ff 1f       	adc	r31, r31
    804c:	a2 17       	cp	r26, r18
    804e:	b3 07       	cpc	r27, r19
    8050:	e4 07       	cpc	r30, r20
    8052:	f5 07       	cpc	r31, r21
    8054:	20 f0       	brcs	.+8      	; 0x805e <__udivmodsi4_ep>
    8056:	a2 1b       	sub	r26, r18
    8058:	b3 0b       	sbc	r27, r19
    805a:	e4 0b       	sbc	r30, r20
    805c:	f5 0b       	sbc	r31, r21

0000805e <__udivmodsi4_ep>:
    805e:	66 1f       	adc	r22, r22
    8060:	77 1f       	adc	r23, r23
    8062:	88 1f       	adc	r24, r24
    8064:	99 1f       	adc	r25, r25
    8066:	1a 94       	dec	r1
    8068:	69 f7       	brne	.-38     	; 0x8044 <__udivmodsi4_loop>
    806a:	60 95       	com	r22
    806c:	70 95       	com	r23
    806e:	80 95       	com	r24
    8070:	90 95       	com	r25
    8072:	9b 01       	movw	r18, r22
    8074:	ac 01       	movw	r20, r24
    8076:	bd 01       	movw	r22, r26
    8078:	cf 01       	movw	r24, r30
    807a:	08 95       	ret

0000807c <__tablejump2__>:
    807c:	ee 0f       	add	r30, r30
    807e:	ff 1f       	adc	r31, r31
    8080:	00 24       	eor	r0, r0
    8082:	00 1c       	adc	r0, r0
    8084:	0b be       	out	0x3b, r0	; 59
    8086:	07 90       	elpm	r0, Z+
    8088:	f6 91       	elpm	r31, Z
    808a:	e0 2d       	mov	r30, r0
    808c:	09 94       	ijmp

0000808e <__umulhisi3>:
    808e:	a2 9f       	mul	r26, r18
    8090:	b0 01       	movw	r22, r0
    8092:	b3 9f       	mul	r27, r19
    8094:	c0 01       	movw	r24, r0
    8096:	a3 9f       	mul	r26, r19
    8098:	70 0d       	add	r23, r0
    809a:	81 1d       	adc	r24, r1
    809c:	11 24       	eor	r1, r1
    809e:	91 1d       	adc	r25, r1
    80a0:	b2 9f       	mul	r27, r18
    80a2:	70 0d       	add	r23, r0
    80a4:	81 1d       	adc	r24, r1
    80a6:	11 24       	eor	r1, r1
    80a8:	91 1d       	adc	r25, r1
    80aa:	08 95       	ret

000080ac <__muluhisi3>:
    80ac:	f0 df       	rcall	.-32     	; 0x808e <__umulhisi3>
    80ae:	a5 9f       	mul	r26, r21
    80b0:	90 0d       	add	r25, r0
    80b2:	b4 9f       	mul	r27, r20
    80b4:	90 0d       	add	r25, r0
    80b6:	a4 9f       	mul	r26, r20
    80b8:	80 0d       	add	r24, r0
    80ba:	91 1d       	adc	r25, r1
    80bc:	11 24       	eor	r1, r1
    80be:	08 95       	ret

000080c0 <dtostrf>:
    80c0:	ef 92       	push	r14
    80c2:	0f 93       	push	r16
    80c4:	1f 93       	push	r17
    80c6:	cf 93       	push	r28
    80c8:	df 93       	push	r29
    80ca:	e8 01       	movw	r28, r16
    80cc:	47 fd       	sbrc	r20, 7
    80ce:	02 c0       	rjmp	.+4      	; 0x80d4 <dtostrf+0x14>
    80d0:	34 e0       	ldi	r19, 0x04	; 4
    80d2:	01 c0       	rjmp	.+2      	; 0x80d6 <dtostrf+0x16>
    80d4:	34 e1       	ldi	r19, 0x14	; 20
    80d6:	04 2e       	mov	r0, r20
    80d8:	00 0c       	add	r0, r0
    80da:	55 0b       	sbc	r21, r21
    80dc:	57 ff       	sbrs	r21, 7
    80de:	03 c0       	rjmp	.+6      	; 0x80e6 <dtostrf+0x26>
    80e0:	51 95       	neg	r21
    80e2:	41 95       	neg	r20
    80e4:	51 09       	sbc	r21, r1
    80e6:	e3 2e       	mov	r14, r19
    80e8:	02 2f       	mov	r16, r18
    80ea:	24 2f       	mov	r18, r20
    80ec:	ae 01       	movw	r20, r28
    80ee:	f0 d2       	rcall	.+1504   	; 0x86d0 <dtoa_prf>
    80f0:	ce 01       	movw	r24, r28
    80f2:	df 91       	pop	r29
    80f4:	cf 91       	pop	r28
    80f6:	1f 91       	pop	r17
    80f8:	0f 91       	pop	r16
    80fa:	ef 90       	pop	r14
    80fc:	08 95       	ret

000080fe <malloc>:
    80fe:	0f 93       	push	r16
    8100:	1f 93       	push	r17
    8102:	cf 93       	push	r28
    8104:	df 93       	push	r29
    8106:	82 30       	cpi	r24, 0x02	; 2
    8108:	91 05       	cpc	r25, r1
    810a:	10 f4       	brcc	.+4      	; 0x8110 <malloc+0x12>
    810c:	82 e0       	ldi	r24, 0x02	; 2
    810e:	90 e0       	ldi	r25, 0x00	; 0
    8110:	e0 91 d6 0d 	lds	r30, 0x0DD6	; 0x800dd6 <__flp>
    8114:	f0 91 d7 0d 	lds	r31, 0x0DD7	; 0x800dd7 <__flp+0x1>
    8118:	20 e0       	ldi	r18, 0x00	; 0
    811a:	30 e0       	ldi	r19, 0x00	; 0
    811c:	a0 e0       	ldi	r26, 0x00	; 0
    811e:	b0 e0       	ldi	r27, 0x00	; 0
    8120:	30 97       	sbiw	r30, 0x00	; 0
    8122:	19 f1       	breq	.+70     	; 0x816a <malloc+0x6c>
    8124:	40 81       	ld	r20, Z
    8126:	51 81       	ldd	r21, Z+1	; 0x01
    8128:	02 81       	ldd	r16, Z+2	; 0x02
    812a:	13 81       	ldd	r17, Z+3	; 0x03
    812c:	48 17       	cp	r20, r24
    812e:	59 07       	cpc	r21, r25
    8130:	c8 f0       	brcs	.+50     	; 0x8164 <malloc+0x66>
    8132:	84 17       	cp	r24, r20
    8134:	95 07       	cpc	r25, r21
    8136:	69 f4       	brne	.+26     	; 0x8152 <malloc+0x54>
    8138:	10 97       	sbiw	r26, 0x00	; 0
    813a:	31 f0       	breq	.+12     	; 0x8148 <malloc+0x4a>
    813c:	12 96       	adiw	r26, 0x02	; 2
    813e:	0c 93       	st	X, r16
    8140:	12 97       	sbiw	r26, 0x02	; 2
    8142:	13 96       	adiw	r26, 0x03	; 3
    8144:	1c 93       	st	X, r17
    8146:	27 c0       	rjmp	.+78     	; 0x8196 <malloc+0x98>
    8148:	00 93 d6 0d 	sts	0x0DD6, r16	; 0x800dd6 <__flp>
    814c:	10 93 d7 0d 	sts	0x0DD7, r17	; 0x800dd7 <__flp+0x1>
    8150:	22 c0       	rjmp	.+68     	; 0x8196 <malloc+0x98>
    8152:	21 15       	cp	r18, r1
    8154:	31 05       	cpc	r19, r1
    8156:	19 f0       	breq	.+6      	; 0x815e <malloc+0x60>
    8158:	42 17       	cp	r20, r18
    815a:	53 07       	cpc	r21, r19
    815c:	18 f4       	brcc	.+6      	; 0x8164 <malloc+0x66>
    815e:	9a 01       	movw	r18, r20
    8160:	bd 01       	movw	r22, r26
    8162:	ef 01       	movw	r28, r30
    8164:	df 01       	movw	r26, r30
    8166:	f8 01       	movw	r30, r16
    8168:	db cf       	rjmp	.-74     	; 0x8120 <malloc+0x22>
    816a:	21 15       	cp	r18, r1
    816c:	31 05       	cpc	r19, r1
    816e:	f9 f0       	breq	.+62     	; 0x81ae <malloc+0xb0>
    8170:	28 1b       	sub	r18, r24
    8172:	39 0b       	sbc	r19, r25
    8174:	24 30       	cpi	r18, 0x04	; 4
    8176:	31 05       	cpc	r19, r1
    8178:	80 f4       	brcc	.+32     	; 0x819a <malloc+0x9c>
    817a:	8a 81       	ldd	r24, Y+2	; 0x02
    817c:	9b 81       	ldd	r25, Y+3	; 0x03
    817e:	61 15       	cp	r22, r1
    8180:	71 05       	cpc	r23, r1
    8182:	21 f0       	breq	.+8      	; 0x818c <malloc+0x8e>
    8184:	fb 01       	movw	r30, r22
    8186:	93 83       	std	Z+3, r25	; 0x03
    8188:	82 83       	std	Z+2, r24	; 0x02
    818a:	04 c0       	rjmp	.+8      	; 0x8194 <malloc+0x96>
    818c:	90 93 d7 0d 	sts	0x0DD7, r25	; 0x800dd7 <__flp+0x1>
    8190:	80 93 d6 0d 	sts	0x0DD6, r24	; 0x800dd6 <__flp>
    8194:	fe 01       	movw	r30, r28
    8196:	32 96       	adiw	r30, 0x02	; 2
    8198:	44 c0       	rjmp	.+136    	; 0x8222 <malloc+0x124>
    819a:	fe 01       	movw	r30, r28
    819c:	e2 0f       	add	r30, r18
    819e:	f3 1f       	adc	r31, r19
    81a0:	81 93       	st	Z+, r24
    81a2:	91 93       	st	Z+, r25
    81a4:	22 50       	subi	r18, 0x02	; 2
    81a6:	31 09       	sbc	r19, r1
    81a8:	39 83       	std	Y+1, r19	; 0x01
    81aa:	28 83       	st	Y, r18
    81ac:	3a c0       	rjmp	.+116    	; 0x8222 <malloc+0x124>
    81ae:	20 91 d4 0d 	lds	r18, 0x0DD4	; 0x800dd4 <__brkval>
    81b2:	30 91 d5 0d 	lds	r19, 0x0DD5	; 0x800dd5 <__brkval+0x1>
    81b6:	23 2b       	or	r18, r19
    81b8:	41 f4       	brne	.+16     	; 0x81ca <malloc+0xcc>
    81ba:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    81be:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    81c2:	30 93 d5 0d 	sts	0x0DD5, r19	; 0x800dd5 <__brkval+0x1>
    81c6:	20 93 d4 0d 	sts	0x0DD4, r18	; 0x800dd4 <__brkval>
    81ca:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    81ce:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    81d2:	21 15       	cp	r18, r1
    81d4:	31 05       	cpc	r19, r1
    81d6:	41 f4       	brne	.+16     	; 0x81e8 <malloc+0xea>
    81d8:	2d b7       	in	r18, 0x3d	; 61
    81da:	3e b7       	in	r19, 0x3e	; 62
    81dc:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    81e0:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    81e4:	24 1b       	sub	r18, r20
    81e6:	35 0b       	sbc	r19, r21
    81e8:	e0 91 d4 0d 	lds	r30, 0x0DD4	; 0x800dd4 <__brkval>
    81ec:	f0 91 d5 0d 	lds	r31, 0x0DD5	; 0x800dd5 <__brkval+0x1>
    81f0:	e2 17       	cp	r30, r18
    81f2:	f3 07       	cpc	r31, r19
    81f4:	a0 f4       	brcc	.+40     	; 0x821e <malloc+0x120>
    81f6:	2e 1b       	sub	r18, r30
    81f8:	3f 0b       	sbc	r19, r31
    81fa:	28 17       	cp	r18, r24
    81fc:	39 07       	cpc	r19, r25
    81fe:	78 f0       	brcs	.+30     	; 0x821e <malloc+0x120>
    8200:	ac 01       	movw	r20, r24
    8202:	4e 5f       	subi	r20, 0xFE	; 254
    8204:	5f 4f       	sbci	r21, 0xFF	; 255
    8206:	24 17       	cp	r18, r20
    8208:	35 07       	cpc	r19, r21
    820a:	48 f0       	brcs	.+18     	; 0x821e <malloc+0x120>
    820c:	4e 0f       	add	r20, r30
    820e:	5f 1f       	adc	r21, r31
    8210:	50 93 d5 0d 	sts	0x0DD5, r21	; 0x800dd5 <__brkval+0x1>
    8214:	40 93 d4 0d 	sts	0x0DD4, r20	; 0x800dd4 <__brkval>
    8218:	81 93       	st	Z+, r24
    821a:	91 93       	st	Z+, r25
    821c:	02 c0       	rjmp	.+4      	; 0x8222 <malloc+0x124>
    821e:	e0 e0       	ldi	r30, 0x00	; 0
    8220:	f0 e0       	ldi	r31, 0x00	; 0
    8222:	cf 01       	movw	r24, r30
    8224:	df 91       	pop	r29
    8226:	cf 91       	pop	r28
    8228:	1f 91       	pop	r17
    822a:	0f 91       	pop	r16
    822c:	08 95       	ret

0000822e <free>:
    822e:	cf 93       	push	r28
    8230:	df 93       	push	r29
    8232:	00 97       	sbiw	r24, 0x00	; 0
    8234:	09 f4       	brne	.+2      	; 0x8238 <free+0xa>
    8236:	81 c0       	rjmp	.+258    	; 0x833a <free+0x10c>
    8238:	fc 01       	movw	r30, r24
    823a:	32 97       	sbiw	r30, 0x02	; 2
    823c:	13 82       	std	Z+3, r1	; 0x03
    823e:	12 82       	std	Z+2, r1	; 0x02
    8240:	a0 91 d6 0d 	lds	r26, 0x0DD6	; 0x800dd6 <__flp>
    8244:	b0 91 d7 0d 	lds	r27, 0x0DD7	; 0x800dd7 <__flp+0x1>
    8248:	10 97       	sbiw	r26, 0x00	; 0
    824a:	81 f4       	brne	.+32     	; 0x826c <free+0x3e>
    824c:	20 81       	ld	r18, Z
    824e:	31 81       	ldd	r19, Z+1	; 0x01
    8250:	82 0f       	add	r24, r18
    8252:	93 1f       	adc	r25, r19
    8254:	20 91 d4 0d 	lds	r18, 0x0DD4	; 0x800dd4 <__brkval>
    8258:	30 91 d5 0d 	lds	r19, 0x0DD5	; 0x800dd5 <__brkval+0x1>
    825c:	28 17       	cp	r18, r24
    825e:	39 07       	cpc	r19, r25
    8260:	51 f5       	brne	.+84     	; 0x82b6 <free+0x88>
    8262:	f0 93 d5 0d 	sts	0x0DD5, r31	; 0x800dd5 <__brkval+0x1>
    8266:	e0 93 d4 0d 	sts	0x0DD4, r30	; 0x800dd4 <__brkval>
    826a:	67 c0       	rjmp	.+206    	; 0x833a <free+0x10c>
    826c:	ed 01       	movw	r28, r26
    826e:	20 e0       	ldi	r18, 0x00	; 0
    8270:	30 e0       	ldi	r19, 0x00	; 0
    8272:	ce 17       	cp	r28, r30
    8274:	df 07       	cpc	r29, r31
    8276:	40 f4       	brcc	.+16     	; 0x8288 <free+0x5a>
    8278:	4a 81       	ldd	r20, Y+2	; 0x02
    827a:	5b 81       	ldd	r21, Y+3	; 0x03
    827c:	9e 01       	movw	r18, r28
    827e:	41 15       	cp	r20, r1
    8280:	51 05       	cpc	r21, r1
    8282:	f1 f0       	breq	.+60     	; 0x82c0 <free+0x92>
    8284:	ea 01       	movw	r28, r20
    8286:	f5 cf       	rjmp	.-22     	; 0x8272 <free+0x44>
    8288:	d3 83       	std	Z+3, r29	; 0x03
    828a:	c2 83       	std	Z+2, r28	; 0x02
    828c:	40 81       	ld	r20, Z
    828e:	51 81       	ldd	r21, Z+1	; 0x01
    8290:	84 0f       	add	r24, r20
    8292:	95 1f       	adc	r25, r21
    8294:	c8 17       	cp	r28, r24
    8296:	d9 07       	cpc	r29, r25
    8298:	59 f4       	brne	.+22     	; 0x82b0 <free+0x82>
    829a:	88 81       	ld	r24, Y
    829c:	99 81       	ldd	r25, Y+1	; 0x01
    829e:	84 0f       	add	r24, r20
    82a0:	95 1f       	adc	r25, r21
    82a2:	02 96       	adiw	r24, 0x02	; 2
    82a4:	91 83       	std	Z+1, r25	; 0x01
    82a6:	80 83       	st	Z, r24
    82a8:	8a 81       	ldd	r24, Y+2	; 0x02
    82aa:	9b 81       	ldd	r25, Y+3	; 0x03
    82ac:	93 83       	std	Z+3, r25	; 0x03
    82ae:	82 83       	std	Z+2, r24	; 0x02
    82b0:	21 15       	cp	r18, r1
    82b2:	31 05       	cpc	r19, r1
    82b4:	29 f4       	brne	.+10     	; 0x82c0 <free+0x92>
    82b6:	f0 93 d7 0d 	sts	0x0DD7, r31	; 0x800dd7 <__flp+0x1>
    82ba:	e0 93 d6 0d 	sts	0x0DD6, r30	; 0x800dd6 <__flp>
    82be:	3d c0       	rjmp	.+122    	; 0x833a <free+0x10c>
    82c0:	e9 01       	movw	r28, r18
    82c2:	fb 83       	std	Y+3, r31	; 0x03
    82c4:	ea 83       	std	Y+2, r30	; 0x02
    82c6:	49 91       	ld	r20, Y+
    82c8:	59 91       	ld	r21, Y+
    82ca:	c4 0f       	add	r28, r20
    82cc:	d5 1f       	adc	r29, r21
    82ce:	ec 17       	cp	r30, r28
    82d0:	fd 07       	cpc	r31, r29
    82d2:	61 f4       	brne	.+24     	; 0x82ec <free+0xbe>
    82d4:	80 81       	ld	r24, Z
    82d6:	91 81       	ldd	r25, Z+1	; 0x01
    82d8:	84 0f       	add	r24, r20
    82da:	95 1f       	adc	r25, r21
    82dc:	02 96       	adiw	r24, 0x02	; 2
    82de:	e9 01       	movw	r28, r18
    82e0:	99 83       	std	Y+1, r25	; 0x01
    82e2:	88 83       	st	Y, r24
    82e4:	82 81       	ldd	r24, Z+2	; 0x02
    82e6:	93 81       	ldd	r25, Z+3	; 0x03
    82e8:	9b 83       	std	Y+3, r25	; 0x03
    82ea:	8a 83       	std	Y+2, r24	; 0x02
    82ec:	e0 e0       	ldi	r30, 0x00	; 0
    82ee:	f0 e0       	ldi	r31, 0x00	; 0
    82f0:	12 96       	adiw	r26, 0x02	; 2
    82f2:	8d 91       	ld	r24, X+
    82f4:	9c 91       	ld	r25, X
    82f6:	13 97       	sbiw	r26, 0x03	; 3
    82f8:	00 97       	sbiw	r24, 0x00	; 0
    82fa:	19 f0       	breq	.+6      	; 0x8302 <free+0xd4>
    82fc:	fd 01       	movw	r30, r26
    82fe:	dc 01       	movw	r26, r24
    8300:	f7 cf       	rjmp	.-18     	; 0x82f0 <free+0xc2>
    8302:	8d 91       	ld	r24, X+
    8304:	9c 91       	ld	r25, X
    8306:	11 97       	sbiw	r26, 0x01	; 1
    8308:	9d 01       	movw	r18, r26
    830a:	2e 5f       	subi	r18, 0xFE	; 254
    830c:	3f 4f       	sbci	r19, 0xFF	; 255
    830e:	82 0f       	add	r24, r18
    8310:	93 1f       	adc	r25, r19
    8312:	20 91 d4 0d 	lds	r18, 0x0DD4	; 0x800dd4 <__brkval>
    8316:	30 91 d5 0d 	lds	r19, 0x0DD5	; 0x800dd5 <__brkval+0x1>
    831a:	28 17       	cp	r18, r24
    831c:	39 07       	cpc	r19, r25
    831e:	69 f4       	brne	.+26     	; 0x833a <free+0x10c>
    8320:	30 97       	sbiw	r30, 0x00	; 0
    8322:	29 f4       	brne	.+10     	; 0x832e <free+0x100>
    8324:	10 92 d7 0d 	sts	0x0DD7, r1	; 0x800dd7 <__flp+0x1>
    8328:	10 92 d6 0d 	sts	0x0DD6, r1	; 0x800dd6 <__flp>
    832c:	02 c0       	rjmp	.+4      	; 0x8332 <free+0x104>
    832e:	13 82       	std	Z+3, r1	; 0x03
    8330:	12 82       	std	Z+2, r1	; 0x02
    8332:	b0 93 d5 0d 	sts	0x0DD5, r27	; 0x800dd5 <__brkval+0x1>
    8336:	a0 93 d4 0d 	sts	0x0DD4, r26	; 0x800dd4 <__brkval>
    833a:	df 91       	pop	r29
    833c:	cf 91       	pop	r28
    833e:	08 95       	ret

00008340 <realloc>:
    8340:	6f 92       	push	r6
    8342:	7f 92       	push	r7
    8344:	8f 92       	push	r8
    8346:	9f 92       	push	r9
    8348:	af 92       	push	r10
    834a:	bf 92       	push	r11
    834c:	cf 92       	push	r12
    834e:	df 92       	push	r13
    8350:	ef 92       	push	r14
    8352:	ff 92       	push	r15
    8354:	0f 93       	push	r16
    8356:	1f 93       	push	r17
    8358:	cf 93       	push	r28
    835a:	df 93       	push	r29
    835c:	00 97       	sbiw	r24, 0x00	; 0
    835e:	81 f4       	brne	.+32     	; 0x8380 <realloc+0x40>
    8360:	cb 01       	movw	r24, r22
    8362:	df 91       	pop	r29
    8364:	cf 91       	pop	r28
    8366:	1f 91       	pop	r17
    8368:	0f 91       	pop	r16
    836a:	ff 90       	pop	r15
    836c:	ef 90       	pop	r14
    836e:	df 90       	pop	r13
    8370:	cf 90       	pop	r12
    8372:	bf 90       	pop	r11
    8374:	af 90       	pop	r10
    8376:	9f 90       	pop	r9
    8378:	8f 90       	pop	r8
    837a:	7f 90       	pop	r7
    837c:	6f 90       	pop	r6
    837e:	bf ce       	rjmp	.-642    	; 0x80fe <malloc>
    8380:	fc 01       	movw	r30, r24
    8382:	e6 0f       	add	r30, r22
    8384:	f7 1f       	adc	r31, r23
    8386:	9c 01       	movw	r18, r24
    8388:	22 50       	subi	r18, 0x02	; 2
    838a:	31 09       	sbc	r19, r1
    838c:	e2 17       	cp	r30, r18
    838e:	f3 07       	cpc	r31, r19
    8390:	08 f4       	brcc	.+2      	; 0x8394 <realloc+0x54>
    8392:	a5 c0       	rjmp	.+330    	; 0x84de <realloc+0x19e>
    8394:	ec 01       	movw	r28, r24
    8396:	d9 01       	movw	r26, r18
    8398:	0d 91       	ld	r16, X+
    839a:	1c 91       	ld	r17, X
    839c:	11 97       	sbiw	r26, 0x01	; 1
    839e:	06 17       	cp	r16, r22
    83a0:	17 07       	cpc	r17, r23
    83a2:	a8 f0       	brcs	.+42     	; 0x83ce <realloc+0x8e>
    83a4:	05 30       	cpi	r16, 0x05	; 5
    83a6:	11 05       	cpc	r17, r1
    83a8:	08 f4       	brcc	.+2      	; 0x83ac <realloc+0x6c>
    83aa:	97 c0       	rjmp	.+302    	; 0x84da <realloc+0x19a>
    83ac:	c8 01       	movw	r24, r16
    83ae:	04 97       	sbiw	r24, 0x04	; 4
    83b0:	86 17       	cp	r24, r22
    83b2:	97 07       	cpc	r25, r23
    83b4:	08 f4       	brcc	.+2      	; 0x83b8 <realloc+0x78>
    83b6:	91 c0       	rjmp	.+290    	; 0x84da <realloc+0x19a>
    83b8:	02 50       	subi	r16, 0x02	; 2
    83ba:	11 09       	sbc	r17, r1
    83bc:	06 1b       	sub	r16, r22
    83be:	17 0b       	sbc	r17, r23
    83c0:	01 93       	st	Z+, r16
    83c2:	11 93       	st	Z+, r17
    83c4:	6d 93       	st	X+, r22
    83c6:	7c 93       	st	X, r23
    83c8:	cf 01       	movw	r24, r30
    83ca:	31 df       	rcall	.-414    	; 0x822e <free>
    83cc:	86 c0       	rjmp	.+268    	; 0x84da <realloc+0x19a>
    83ce:	5b 01       	movw	r10, r22
    83d0:	a0 1a       	sub	r10, r16
    83d2:	b1 0a       	sbc	r11, r17
    83d4:	4c 01       	movw	r8, r24
    83d6:	80 0e       	add	r8, r16
    83d8:	91 1e       	adc	r9, r17
    83da:	a0 91 d6 0d 	lds	r26, 0x0DD6	; 0x800dd6 <__flp>
    83de:	b0 91 d7 0d 	lds	r27, 0x0DD7	; 0x800dd7 <__flp+0x1>
    83e2:	61 2c       	mov	r6, r1
    83e4:	71 2c       	mov	r7, r1
    83e6:	e1 2c       	mov	r14, r1
    83e8:	f1 2c       	mov	r15, r1
    83ea:	10 97       	sbiw	r26, 0x00	; 0
    83ec:	09 f4       	brne	.+2      	; 0x83f0 <realloc+0xb0>
    83ee:	46 c0       	rjmp	.+140    	; 0x847c <realloc+0x13c>
    83f0:	8d 91       	ld	r24, X+
    83f2:	9c 91       	ld	r25, X
    83f4:	11 97       	sbiw	r26, 0x01	; 1
    83f6:	a8 15       	cp	r26, r8
    83f8:	b9 05       	cpc	r27, r9
    83fa:	b1 f5       	brne	.+108    	; 0x8468 <realloc+0x128>
    83fc:	6c 01       	movw	r12, r24
    83fe:	42 e0       	ldi	r20, 0x02	; 2
    8400:	c4 0e       	add	r12, r20
    8402:	d1 1c       	adc	r13, r1
    8404:	ca 14       	cp	r12, r10
    8406:	db 04       	cpc	r13, r11
    8408:	78 f1       	brcs	.+94     	; 0x8468 <realloc+0x128>
    840a:	4c 01       	movw	r8, r24
    840c:	8a 18       	sub	r8, r10
    840e:	9b 08       	sbc	r9, r11
    8410:	64 01       	movw	r12, r8
    8412:	42 e0       	ldi	r20, 0x02	; 2
    8414:	c4 0e       	add	r12, r20
    8416:	d1 1c       	adc	r13, r1
    8418:	12 96       	adiw	r26, 0x02	; 2
    841a:	bc 90       	ld	r11, X
    841c:	12 97       	sbiw	r26, 0x02	; 2
    841e:	13 96       	adiw	r26, 0x03	; 3
    8420:	ac 91       	ld	r26, X
    8422:	b5 e0       	ldi	r27, 0x05	; 5
    8424:	cb 16       	cp	r12, r27
    8426:	d1 04       	cpc	r13, r1
    8428:	40 f0       	brcs	.+16     	; 0x843a <realloc+0xfa>
    842a:	b2 82       	std	Z+2, r11	; 0x02
    842c:	a3 83       	std	Z+3, r26	; 0x03
    842e:	91 82       	std	Z+1, r9	; 0x01
    8430:	80 82       	st	Z, r8
    8432:	d9 01       	movw	r26, r18
    8434:	6d 93       	st	X+, r22
    8436:	7c 93       	st	X, r23
    8438:	09 c0       	rjmp	.+18     	; 0x844c <realloc+0x10c>
    843a:	0e 5f       	subi	r16, 0xFE	; 254
    843c:	1f 4f       	sbci	r17, 0xFF	; 255
    843e:	80 0f       	add	r24, r16
    8440:	91 1f       	adc	r25, r17
    8442:	f9 01       	movw	r30, r18
    8444:	91 83       	std	Z+1, r25	; 0x01
    8446:	80 83       	st	Z, r24
    8448:	eb 2d       	mov	r30, r11
    844a:	fa 2f       	mov	r31, r26
    844c:	e1 14       	cp	r14, r1
    844e:	f1 04       	cpc	r15, r1
    8450:	31 f0       	breq	.+12     	; 0x845e <realloc+0x11e>
    8452:	d7 01       	movw	r26, r14
    8454:	13 96       	adiw	r26, 0x03	; 3
    8456:	fc 93       	st	X, r31
    8458:	ee 93       	st	-X, r30
    845a:	12 97       	sbiw	r26, 0x02	; 2
    845c:	3e c0       	rjmp	.+124    	; 0x84da <realloc+0x19a>
    845e:	f0 93 d7 0d 	sts	0x0DD7, r31	; 0x800dd7 <__flp+0x1>
    8462:	e0 93 d6 0d 	sts	0x0DD6, r30	; 0x800dd6 <__flp>
    8466:	39 c0       	rjmp	.+114    	; 0x84da <realloc+0x19a>
    8468:	68 16       	cp	r6, r24
    846a:	79 06       	cpc	r7, r25
    846c:	08 f4       	brcc	.+2      	; 0x8470 <realloc+0x130>
    846e:	3c 01       	movw	r6, r24
    8470:	7d 01       	movw	r14, r26
    8472:	12 96       	adiw	r26, 0x02	; 2
    8474:	0d 90       	ld	r0, X+
    8476:	bc 91       	ld	r27, X
    8478:	a0 2d       	mov	r26, r0
    847a:	b7 cf       	rjmp	.-146    	; 0x83ea <realloc+0xaa>
    847c:	80 91 d4 0d 	lds	r24, 0x0DD4	; 0x800dd4 <__brkval>
    8480:	90 91 d5 0d 	lds	r25, 0x0DD5	; 0x800dd5 <__brkval+0x1>
    8484:	88 16       	cp	r8, r24
    8486:	99 06       	cpc	r9, r25
    8488:	e1 f4       	brne	.+56     	; 0x84c2 <realloc+0x182>
    848a:	66 16       	cp	r6, r22
    848c:	77 06       	cpc	r7, r23
    848e:	c8 f4       	brcc	.+50     	; 0x84c2 <realloc+0x182>
    8490:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    8494:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    8498:	00 97       	sbiw	r24, 0x00	; 0
    849a:	41 f4       	brne	.+16     	; 0x84ac <realloc+0x16c>
    849c:	8d b7       	in	r24, 0x3d	; 61
    849e:	9e b7       	in	r25, 0x3e	; 62
    84a0:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    84a4:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    84a8:	84 1b       	sub	r24, r20
    84aa:	95 0b       	sbc	r25, r21
    84ac:	e8 17       	cp	r30, r24
    84ae:	f9 07       	cpc	r31, r25
    84b0:	b0 f4       	brcc	.+44     	; 0x84de <realloc+0x19e>
    84b2:	f0 93 d5 0d 	sts	0x0DD5, r31	; 0x800dd5 <__brkval+0x1>
    84b6:	e0 93 d4 0d 	sts	0x0DD4, r30	; 0x800dd4 <__brkval>
    84ba:	f9 01       	movw	r30, r18
    84bc:	71 83       	std	Z+1, r23	; 0x01
    84be:	60 83       	st	Z, r22
    84c0:	0c c0       	rjmp	.+24     	; 0x84da <realloc+0x19a>
    84c2:	cb 01       	movw	r24, r22
    84c4:	1c de       	rcall	.-968    	; 0x80fe <malloc>
    84c6:	7c 01       	movw	r14, r24
    84c8:	00 97       	sbiw	r24, 0x00	; 0
    84ca:	49 f0       	breq	.+18     	; 0x84de <realloc+0x19e>
    84cc:	a8 01       	movw	r20, r16
    84ce:	be 01       	movw	r22, r28
    84d0:	52 d0       	rcall	.+164    	; 0x8576 <memcpy>
    84d2:	ce 01       	movw	r24, r28
    84d4:	ac de       	rcall	.-680    	; 0x822e <free>
    84d6:	c7 01       	movw	r24, r14
    84d8:	04 c0       	rjmp	.+8      	; 0x84e2 <realloc+0x1a2>
    84da:	ce 01       	movw	r24, r28
    84dc:	02 c0       	rjmp	.+4      	; 0x84e2 <realloc+0x1a2>
    84de:	80 e0       	ldi	r24, 0x00	; 0
    84e0:	90 e0       	ldi	r25, 0x00	; 0
    84e2:	df 91       	pop	r29
    84e4:	cf 91       	pop	r28
    84e6:	1f 91       	pop	r17
    84e8:	0f 91       	pop	r16
    84ea:	ff 90       	pop	r15
    84ec:	ef 90       	pop	r14
    84ee:	df 90       	pop	r13
    84f0:	cf 90       	pop	r12
    84f2:	bf 90       	pop	r11
    84f4:	af 90       	pop	r10
    84f6:	9f 90       	pop	r9
    84f8:	8f 90       	pop	r8
    84fa:	7f 90       	pop	r7
    84fc:	6f 90       	pop	r6
    84fe:	08 95       	ret

00008500 <abort>:
    8500:	81 e0       	ldi	r24, 0x01	; 1
    8502:	90 e0       	ldi	r25, 0x00	; 0
    8504:	f8 94       	cli
    8506:	5b c3       	rjmp	.+1718   	; 0x8bbe <__do_global_dtors>

00008508 <atol>:
    8508:	1f 93       	push	r17
    850a:	fc 01       	movw	r30, r24
    850c:	99 27       	eor	r25, r25
    850e:	88 27       	eor	r24, r24
    8510:	bc 01       	movw	r22, r24
    8512:	e8 94       	clt
    8514:	11 91       	ld	r17, Z+
    8516:	10 32       	cpi	r17, 0x20	; 32
    8518:	e9 f3       	breq	.-6      	; 0x8514 <atol+0xc>
    851a:	19 30       	cpi	r17, 0x09	; 9
    851c:	10 f0       	brcs	.+4      	; 0x8522 <atol+0x1a>
    851e:	1e 30       	cpi	r17, 0x0E	; 14
    8520:	c8 f3       	brcs	.-14     	; 0x8514 <atol+0xc>
    8522:	1b 32       	cpi	r17, 0x2B	; 43
    8524:	49 f0       	breq	.+18     	; 0x8538 <atol+0x30>
    8526:	1d 32       	cpi	r17, 0x2D	; 45
    8528:	41 f4       	brne	.+16     	; 0x853a <atol+0x32>
    852a:	68 94       	set
    852c:	05 c0       	rjmp	.+10     	; 0x8538 <atol+0x30>
    852e:	6d d0       	rcall	.+218    	; 0x860a <__mulsi_const_10>
    8530:	61 0f       	add	r22, r17
    8532:	71 1d       	adc	r23, r1
    8534:	81 1d       	adc	r24, r1
    8536:	91 1d       	adc	r25, r1
    8538:	11 91       	ld	r17, Z+
    853a:	10 53       	subi	r17, 0x30	; 48
    853c:	1a 30       	cpi	r17, 0x0A	; 10
    853e:	b8 f3       	brcs	.-18     	; 0x852e <atol+0x26>
    8540:	3e f4       	brtc	.+14     	; 0x8550 <atol+0x48>
    8542:	90 95       	com	r25
    8544:	80 95       	com	r24
    8546:	70 95       	com	r23
    8548:	61 95       	neg	r22
    854a:	7f 4f       	sbci	r23, 0xFF	; 255
    854c:	8f 4f       	sbci	r24, 0xFF	; 255
    854e:	9f 4f       	sbci	r25, 0xFF	; 255
    8550:	1f 91       	pop	r17
    8552:	08 95       	ret

00008554 <isspace>:
    8554:	91 11       	cpse	r25, r1
    8556:	0a c3       	rjmp	.+1556   	; 0x8b6c <__ctype_isfalse>
    8558:	80 32       	cpi	r24, 0x20	; 32
    855a:	19 f0       	breq	.+6      	; 0x8562 <isspace+0xe>
    855c:	89 50       	subi	r24, 0x09	; 9
    855e:	85 50       	subi	r24, 0x05	; 5
    8560:	d0 f7       	brcc	.-12     	; 0x8556 <isspace+0x2>
    8562:	08 95       	ret

00008564 <memcpy_P>:
    8564:	fb 01       	movw	r30, r22
    8566:	dc 01       	movw	r26, r24
    8568:	02 c0       	rjmp	.+4      	; 0x856e <memcpy_P+0xa>
    856a:	05 90       	lpm	r0, Z+
    856c:	0d 92       	st	X+, r0
    856e:	41 50       	subi	r20, 0x01	; 1
    8570:	50 40       	sbci	r21, 0x00	; 0
    8572:	d8 f7       	brcc	.-10     	; 0x856a <memcpy_P+0x6>
    8574:	08 95       	ret

00008576 <memcpy>:
    8576:	fb 01       	movw	r30, r22
    8578:	dc 01       	movw	r26, r24
    857a:	02 c0       	rjmp	.+4      	; 0x8580 <memcpy+0xa>
    857c:	01 90       	ld	r0, Z+
    857e:	0d 92       	st	X+, r0
    8580:	41 50       	subi	r20, 0x01	; 1
    8582:	50 40       	sbci	r21, 0x00	; 0
    8584:	d8 f7       	brcc	.-10     	; 0x857c <memcpy+0x6>
    8586:	08 95       	ret

00008588 <strcmp>:
    8588:	fb 01       	movw	r30, r22
    858a:	dc 01       	movw	r26, r24
    858c:	8d 91       	ld	r24, X+
    858e:	01 90       	ld	r0, Z+
    8590:	80 19       	sub	r24, r0
    8592:	01 10       	cpse	r0, r1
    8594:	d9 f3       	breq	.-10     	; 0x858c <strcmp+0x4>
    8596:	99 0b       	sbc	r25, r25
    8598:	08 95       	ret

0000859a <strcpy>:
    859a:	fb 01       	movw	r30, r22
    859c:	dc 01       	movw	r26, r24
    859e:	01 90       	ld	r0, Z+
    85a0:	0d 92       	st	X+, r0
    85a2:	00 20       	and	r0, r0
    85a4:	e1 f7       	brne	.-8      	; 0x859e <strcpy+0x4>
    85a6:	08 95       	ret

000085a8 <strncmp>:
    85a8:	fb 01       	movw	r30, r22
    85aa:	dc 01       	movw	r26, r24
    85ac:	41 50       	subi	r20, 0x01	; 1
    85ae:	50 40       	sbci	r21, 0x00	; 0
    85b0:	30 f0       	brcs	.+12     	; 0x85be <strncmp+0x16>
    85b2:	8d 91       	ld	r24, X+
    85b4:	01 90       	ld	r0, Z+
    85b6:	80 19       	sub	r24, r0
    85b8:	19 f4       	brne	.+6      	; 0x85c0 <strncmp+0x18>
    85ba:	00 20       	and	r0, r0
    85bc:	b9 f7       	brne	.-18     	; 0x85ac <strncmp+0x4>
    85be:	88 1b       	sub	r24, r24
    85c0:	99 0b       	sbc	r25, r25
    85c2:	08 95       	ret

000085c4 <strncpy>:
    85c4:	fb 01       	movw	r30, r22
    85c6:	dc 01       	movw	r26, r24
    85c8:	41 50       	subi	r20, 0x01	; 1
    85ca:	50 40       	sbci	r21, 0x00	; 0
    85cc:	48 f0       	brcs	.+18     	; 0x85e0 <strncpy+0x1c>
    85ce:	01 90       	ld	r0, Z+
    85d0:	0d 92       	st	X+, r0
    85d2:	00 20       	and	r0, r0
    85d4:	c9 f7       	brne	.-14     	; 0x85c8 <strncpy+0x4>
    85d6:	01 c0       	rjmp	.+2      	; 0x85da <strncpy+0x16>
    85d8:	1d 92       	st	X+, r1
    85da:	41 50       	subi	r20, 0x01	; 1
    85dc:	50 40       	sbci	r21, 0x00	; 0
    85de:	e0 f7       	brcc	.-8      	; 0x85d8 <strncpy+0x14>
    85e0:	08 95       	ret

000085e2 <itoa>:
    85e2:	45 32       	cpi	r20, 0x25	; 37
    85e4:	51 05       	cpc	r21, r1
    85e6:	18 f4       	brcc	.+6      	; 0x85ee <itoa+0xc>
    85e8:	42 30       	cpi	r20, 0x02	; 2
    85ea:	08 f0       	brcs	.+2      	; 0x85ee <itoa+0xc>
    85ec:	04 c0       	rjmp	.+8      	; 0x85f6 <__itoa_ncheck>
    85ee:	fb 01       	movw	r30, r22
    85f0:	10 82       	st	Z, r1
    85f2:	cb 01       	movw	r24, r22
    85f4:	08 95       	ret

000085f6 <__itoa_ncheck>:
    85f6:	bb 27       	eor	r27, r27
    85f8:	4a 30       	cpi	r20, 0x0A	; 10
    85fa:	31 f4       	brne	.+12     	; 0x8608 <__itoa_ncheck+0x12>
    85fc:	99 23       	and	r25, r25
    85fe:	22 f4       	brpl	.+8      	; 0x8608 <__itoa_ncheck+0x12>
    8600:	bd e2       	ldi	r27, 0x2D	; 45
    8602:	90 95       	com	r25
    8604:	81 95       	neg	r24
    8606:	9f 4f       	sbci	r25, 0xFF	; 255
    8608:	4b c0       	rjmp	.+150    	; 0x86a0 <__utoa_common>

0000860a <__mulsi_const_10>:
    860a:	59 2f       	mov	r21, r25
    860c:	48 2f       	mov	r20, r24
    860e:	37 2f       	mov	r19, r23
    8610:	26 2f       	mov	r18, r22
    8612:	66 0f       	add	r22, r22
    8614:	77 1f       	adc	r23, r23
    8616:	88 1f       	adc	r24, r24
    8618:	99 1f       	adc	r25, r25
    861a:	66 0f       	add	r22, r22
    861c:	77 1f       	adc	r23, r23
    861e:	88 1f       	adc	r24, r24
    8620:	99 1f       	adc	r25, r25
    8622:	62 0f       	add	r22, r18
    8624:	73 1f       	adc	r23, r19
    8626:	84 1f       	adc	r24, r20
    8628:	95 1f       	adc	r25, r21
    862a:	66 0f       	add	r22, r22
    862c:	77 1f       	adc	r23, r23
    862e:	88 1f       	adc	r24, r24
    8630:	99 1f       	adc	r25, r25
    8632:	08 95       	ret

00008634 <ultoa>:
    8634:	25 32       	cpi	r18, 0x25	; 37
    8636:	31 05       	cpc	r19, r1
    8638:	18 f4       	brcc	.+6      	; 0x8640 <ultoa+0xc>
    863a:	22 30       	cpi	r18, 0x02	; 2
    863c:	08 f0       	brcs	.+2      	; 0x8640 <ultoa+0xc>
    863e:	04 c0       	rjmp	.+8      	; 0x8648 <__ultoa_ncheck>
    8640:	fa 01       	movw	r30, r20
    8642:	10 82       	st	Z, r1
    8644:	ca 01       	movw	r24, r20
    8646:	08 95       	ret

00008648 <__ultoa_ncheck>:
    8648:	bb 27       	eor	r27, r27

0000864a <__ultoa_common>:
    864a:	fa 01       	movw	r30, r20
    864c:	a6 2f       	mov	r26, r22
    864e:	62 17       	cp	r22, r18
    8650:	71 05       	cpc	r23, r1
    8652:	81 05       	cpc	r24, r1
    8654:	91 05       	cpc	r25, r1
    8656:	33 0b       	sbc	r19, r19
    8658:	30 fb       	bst	r19, 0
    865a:	66 f0       	brts	.+24     	; 0x8674 <__ultoa_common+0x2a>
    865c:	aa 27       	eor	r26, r26
    865e:	66 0f       	add	r22, r22
    8660:	77 1f       	adc	r23, r23
    8662:	88 1f       	adc	r24, r24
    8664:	99 1f       	adc	r25, r25
    8666:	aa 1f       	adc	r26, r26
    8668:	a2 17       	cp	r26, r18
    866a:	10 f0       	brcs	.+4      	; 0x8670 <__ultoa_common+0x26>
    866c:	a2 1b       	sub	r26, r18
    866e:	63 95       	inc	r22
    8670:	38 50       	subi	r19, 0x08	; 8
    8672:	a9 f7       	brne	.-22     	; 0x865e <__ultoa_common+0x14>
    8674:	a0 5d       	subi	r26, 0xD0	; 208
    8676:	aa 33       	cpi	r26, 0x3A	; 58
    8678:	08 f0       	brcs	.+2      	; 0x867c <__ultoa_common+0x32>
    867a:	a9 5d       	subi	r26, 0xD9	; 217
    867c:	a1 93       	st	Z+, r26
    867e:	36 f7       	brtc	.-52     	; 0x864c <__ultoa_common+0x2>
    8680:	b1 11       	cpse	r27, r1
    8682:	b1 93       	st	Z+, r27
    8684:	10 82       	st	Z, r1
    8686:	ca 01       	movw	r24, r20
    8688:	74 c2       	rjmp	.+1256   	; 0x8b72 <strrev>

0000868a <utoa>:
    868a:	45 32       	cpi	r20, 0x25	; 37
    868c:	51 05       	cpc	r21, r1
    868e:	18 f4       	brcc	.+6      	; 0x8696 <utoa+0xc>
    8690:	42 30       	cpi	r20, 0x02	; 2
    8692:	08 f0       	brcs	.+2      	; 0x8696 <utoa+0xc>
    8694:	04 c0       	rjmp	.+8      	; 0x869e <__utoa_ncheck>
    8696:	fb 01       	movw	r30, r22
    8698:	10 82       	st	Z, r1
    869a:	cb 01       	movw	r24, r22
    869c:	08 95       	ret

0000869e <__utoa_ncheck>:
    869e:	bb 27       	eor	r27, r27

000086a0 <__utoa_common>:
    86a0:	fb 01       	movw	r30, r22
    86a2:	55 27       	eor	r21, r21
    86a4:	aa 27       	eor	r26, r26
    86a6:	88 0f       	add	r24, r24
    86a8:	99 1f       	adc	r25, r25
    86aa:	aa 1f       	adc	r26, r26
    86ac:	a4 17       	cp	r26, r20
    86ae:	10 f0       	brcs	.+4      	; 0x86b4 <__utoa_common+0x14>
    86b0:	a4 1b       	sub	r26, r20
    86b2:	83 95       	inc	r24
    86b4:	50 51       	subi	r21, 0x10	; 16
    86b6:	b9 f7       	brne	.-18     	; 0x86a6 <__utoa_common+0x6>
    86b8:	a0 5d       	subi	r26, 0xD0	; 208
    86ba:	aa 33       	cpi	r26, 0x3A	; 58
    86bc:	08 f0       	brcs	.+2      	; 0x86c0 <__utoa_common+0x20>
    86be:	a9 5d       	subi	r26, 0xD9	; 217
    86c0:	a1 93       	st	Z+, r26
    86c2:	00 97       	sbiw	r24, 0x00	; 0
    86c4:	79 f7       	brne	.-34     	; 0x86a4 <__utoa_common+0x4>
    86c6:	b1 11       	cpse	r27, r1
    86c8:	b1 93       	st	Z+, r27
    86ca:	11 92       	st	Z+, r1
    86cc:	cb 01       	movw	r24, r22
    86ce:	51 c2       	rjmp	.+1186   	; 0x8b72 <strrev>

000086d0 <dtoa_prf>:
    86d0:	8f 92       	push	r8
    86d2:	9f 92       	push	r9
    86d4:	af 92       	push	r10
    86d6:	bf 92       	push	r11
    86d8:	cf 92       	push	r12
    86da:	df 92       	push	r13
    86dc:	ef 92       	push	r14
    86de:	ff 92       	push	r15
    86e0:	0f 93       	push	r16
    86e2:	1f 93       	push	r17
    86e4:	cf 93       	push	r28
    86e6:	df 93       	push	r29
    86e8:	cd b7       	in	r28, 0x3d	; 61
    86ea:	de b7       	in	r29, 0x3e	; 62
    86ec:	29 97       	sbiw	r28, 0x09	; 9
    86ee:	0f b6       	in	r0, 0x3f	; 63
    86f0:	f8 94       	cli
    86f2:	de bf       	out	0x3e, r29	; 62
    86f4:	0f be       	out	0x3f, r0	; 63
    86f6:	cd bf       	out	0x3d, r28	; 61
    86f8:	6a 01       	movw	r12, r20
    86fa:	12 2f       	mov	r17, r18
    86fc:	b0 2e       	mov	r11, r16
    86fe:	2b e3       	ldi	r18, 0x3B	; 59
    8700:	20 17       	cp	r18, r16
    8702:	20 f0       	brcs	.+8      	; 0x870c <dtoa_prf+0x3c>
    8704:	ff 24       	eor	r15, r15
    8706:	f3 94       	inc	r15
    8708:	f0 0e       	add	r15, r16
    870a:	02 c0       	rjmp	.+4      	; 0x8710 <dtoa_prf+0x40>
    870c:	2c e3       	ldi	r18, 0x3C	; 60
    870e:	f2 2e       	mov	r15, r18
    8710:	0f 2d       	mov	r16, r15
    8712:	27 e0       	ldi	r18, 0x07	; 7
    8714:	ae 01       	movw	r20, r28
    8716:	4f 5f       	subi	r20, 0xFF	; 255
    8718:	5f 4f       	sbci	r21, 0xFF	; 255
    871a:	50 d1       	rcall	.+672    	; 0x89bc <__ftoa_engine>
    871c:	bc 01       	movw	r22, r24
    871e:	49 81       	ldd	r20, Y+1	; 0x01
    8720:	84 2f       	mov	r24, r20
    8722:	89 70       	andi	r24, 0x09	; 9
    8724:	81 30       	cpi	r24, 0x01	; 1
    8726:	31 f0       	breq	.+12     	; 0x8734 <dtoa_prf+0x64>
    8728:	e1 fc       	sbrc	r14, 1
    872a:	06 c0       	rjmp	.+12     	; 0x8738 <dtoa_prf+0x68>
    872c:	e0 fe       	sbrs	r14, 0
    872e:	06 c0       	rjmp	.+12     	; 0x873c <dtoa_prf+0x6c>
    8730:	90 e2       	ldi	r25, 0x20	; 32
    8732:	05 c0       	rjmp	.+10     	; 0x873e <dtoa_prf+0x6e>
    8734:	9d e2       	ldi	r25, 0x2D	; 45
    8736:	03 c0       	rjmp	.+6      	; 0x873e <dtoa_prf+0x6e>
    8738:	9b e2       	ldi	r25, 0x2B	; 43
    873a:	01 c0       	rjmp	.+2      	; 0x873e <dtoa_prf+0x6e>
    873c:	90 e0       	ldi	r25, 0x00	; 0
    873e:	5e 2d       	mov	r21, r14
    8740:	50 71       	andi	r21, 0x10	; 16
    8742:	43 ff       	sbrs	r20, 3
    8744:	3c c0       	rjmp	.+120    	; 0x87be <dtoa_prf+0xee>
    8746:	91 11       	cpse	r25, r1
    8748:	02 c0       	rjmp	.+4      	; 0x874e <dtoa_prf+0x7e>
    874a:	83 e0       	ldi	r24, 0x03	; 3
    874c:	01 c0       	rjmp	.+2      	; 0x8750 <dtoa_prf+0x80>
    874e:	84 e0       	ldi	r24, 0x04	; 4
    8750:	81 17       	cp	r24, r17
    8752:	18 f4       	brcc	.+6      	; 0x875a <dtoa_prf+0x8a>
    8754:	21 2f       	mov	r18, r17
    8756:	28 1b       	sub	r18, r24
    8758:	01 c0       	rjmp	.+2      	; 0x875c <dtoa_prf+0x8c>
    875a:	20 e0       	ldi	r18, 0x00	; 0
    875c:	51 11       	cpse	r21, r1
    875e:	0b c0       	rjmp	.+22     	; 0x8776 <dtoa_prf+0xa6>
    8760:	f6 01       	movw	r30, r12
    8762:	82 2f       	mov	r24, r18
    8764:	30 e2       	ldi	r19, 0x20	; 32
    8766:	88 23       	and	r24, r24
    8768:	19 f0       	breq	.+6      	; 0x8770 <dtoa_prf+0xa0>
    876a:	31 93       	st	Z+, r19
    876c:	81 50       	subi	r24, 0x01	; 1
    876e:	fb cf       	rjmp	.-10     	; 0x8766 <dtoa_prf+0x96>
    8770:	c2 0e       	add	r12, r18
    8772:	d1 1c       	adc	r13, r1
    8774:	20 e0       	ldi	r18, 0x00	; 0
    8776:	99 23       	and	r25, r25
    8778:	29 f0       	breq	.+10     	; 0x8784 <dtoa_prf+0xb4>
    877a:	d6 01       	movw	r26, r12
    877c:	9c 93       	st	X, r25
    877e:	f6 01       	movw	r30, r12
    8780:	31 96       	adiw	r30, 0x01	; 1
    8782:	6f 01       	movw	r12, r30
    8784:	c6 01       	movw	r24, r12
    8786:	03 96       	adiw	r24, 0x03	; 3
    8788:	e2 fe       	sbrs	r14, 2
    878a:	0a c0       	rjmp	.+20     	; 0x87a0 <dtoa_prf+0xd0>
    878c:	3e e4       	ldi	r19, 0x4E	; 78
    878e:	d6 01       	movw	r26, r12
    8790:	3c 93       	st	X, r19
    8792:	41 e4       	ldi	r20, 0x41	; 65
    8794:	11 96       	adiw	r26, 0x01	; 1
    8796:	4c 93       	st	X, r20
    8798:	11 97       	sbiw	r26, 0x01	; 1
    879a:	12 96       	adiw	r26, 0x02	; 2
    879c:	3c 93       	st	X, r19
    879e:	06 c0       	rjmp	.+12     	; 0x87ac <dtoa_prf+0xdc>
    87a0:	3e e6       	ldi	r19, 0x6E	; 110
    87a2:	f6 01       	movw	r30, r12
    87a4:	30 83       	st	Z, r19
    87a6:	41 e6       	ldi	r20, 0x61	; 97
    87a8:	41 83       	std	Z+1, r20	; 0x01
    87aa:	32 83       	std	Z+2, r19	; 0x02
    87ac:	fc 01       	movw	r30, r24
    87ae:	32 2f       	mov	r19, r18
    87b0:	40 e2       	ldi	r20, 0x20	; 32
    87b2:	33 23       	and	r19, r19
    87b4:	09 f4       	brne	.+2      	; 0x87b8 <dtoa_prf+0xe8>
    87b6:	42 c0       	rjmp	.+132    	; 0x883c <dtoa_prf+0x16c>
    87b8:	41 93       	st	Z+, r20
    87ba:	31 50       	subi	r19, 0x01	; 1
    87bc:	fa cf       	rjmp	.-12     	; 0x87b2 <dtoa_prf+0xe2>
    87be:	42 ff       	sbrs	r20, 2
    87c0:	44 c0       	rjmp	.+136    	; 0x884a <dtoa_prf+0x17a>
    87c2:	91 11       	cpse	r25, r1
    87c4:	02 c0       	rjmp	.+4      	; 0x87ca <dtoa_prf+0xfa>
    87c6:	83 e0       	ldi	r24, 0x03	; 3
    87c8:	01 c0       	rjmp	.+2      	; 0x87cc <dtoa_prf+0xfc>
    87ca:	84 e0       	ldi	r24, 0x04	; 4
    87cc:	81 17       	cp	r24, r17
    87ce:	18 f4       	brcc	.+6      	; 0x87d6 <dtoa_prf+0x106>
    87d0:	21 2f       	mov	r18, r17
    87d2:	28 1b       	sub	r18, r24
    87d4:	01 c0       	rjmp	.+2      	; 0x87d8 <dtoa_prf+0x108>
    87d6:	20 e0       	ldi	r18, 0x00	; 0
    87d8:	51 11       	cpse	r21, r1
    87da:	0b c0       	rjmp	.+22     	; 0x87f2 <dtoa_prf+0x122>
    87dc:	f6 01       	movw	r30, r12
    87de:	82 2f       	mov	r24, r18
    87e0:	30 e2       	ldi	r19, 0x20	; 32
    87e2:	88 23       	and	r24, r24
    87e4:	19 f0       	breq	.+6      	; 0x87ec <dtoa_prf+0x11c>
    87e6:	31 93       	st	Z+, r19
    87e8:	81 50       	subi	r24, 0x01	; 1
    87ea:	fb cf       	rjmp	.-10     	; 0x87e2 <dtoa_prf+0x112>
    87ec:	c2 0e       	add	r12, r18
    87ee:	d1 1c       	adc	r13, r1
    87f0:	20 e0       	ldi	r18, 0x00	; 0
    87f2:	99 23       	and	r25, r25
    87f4:	29 f0       	breq	.+10     	; 0x8800 <dtoa_prf+0x130>
    87f6:	d6 01       	movw	r26, r12
    87f8:	9c 93       	st	X, r25
    87fa:	f6 01       	movw	r30, r12
    87fc:	31 96       	adiw	r30, 0x01	; 1
    87fe:	6f 01       	movw	r12, r30
    8800:	c6 01       	movw	r24, r12
    8802:	03 96       	adiw	r24, 0x03	; 3
    8804:	e2 fe       	sbrs	r14, 2
    8806:	0b c0       	rjmp	.+22     	; 0x881e <dtoa_prf+0x14e>
    8808:	39 e4       	ldi	r19, 0x49	; 73
    880a:	d6 01       	movw	r26, r12
    880c:	3c 93       	st	X, r19
    880e:	3e e4       	ldi	r19, 0x4E	; 78
    8810:	11 96       	adiw	r26, 0x01	; 1
    8812:	3c 93       	st	X, r19
    8814:	11 97       	sbiw	r26, 0x01	; 1
    8816:	36 e4       	ldi	r19, 0x46	; 70
    8818:	12 96       	adiw	r26, 0x02	; 2
    881a:	3c 93       	st	X, r19
    881c:	07 c0       	rjmp	.+14     	; 0x882c <dtoa_prf+0x15c>
    881e:	39 e6       	ldi	r19, 0x69	; 105
    8820:	f6 01       	movw	r30, r12
    8822:	30 83       	st	Z, r19
    8824:	3e e6       	ldi	r19, 0x6E	; 110
    8826:	31 83       	std	Z+1, r19	; 0x01
    8828:	36 e6       	ldi	r19, 0x66	; 102
    882a:	32 83       	std	Z+2, r19	; 0x02
    882c:	fc 01       	movw	r30, r24
    882e:	32 2f       	mov	r19, r18
    8830:	40 e2       	ldi	r20, 0x20	; 32
    8832:	33 23       	and	r19, r19
    8834:	19 f0       	breq	.+6      	; 0x883c <dtoa_prf+0x16c>
    8836:	41 93       	st	Z+, r20
    8838:	31 50       	subi	r19, 0x01	; 1
    883a:	fb cf       	rjmp	.-10     	; 0x8832 <dtoa_prf+0x162>
    883c:	fc 01       	movw	r30, r24
    883e:	e2 0f       	add	r30, r18
    8840:	f1 1d       	adc	r31, r1
    8842:	10 82       	st	Z, r1
    8844:	8e ef       	ldi	r24, 0xFE	; 254
    8846:	9f ef       	ldi	r25, 0xFF	; 255
    8848:	a6 c0       	rjmp	.+332    	; 0x8996 <dtoa_prf+0x2c6>
    884a:	21 e0       	ldi	r18, 0x01	; 1
    884c:	30 e0       	ldi	r19, 0x00	; 0
    884e:	91 11       	cpse	r25, r1
    8850:	02 c0       	rjmp	.+4      	; 0x8856 <dtoa_prf+0x186>
    8852:	20 e0       	ldi	r18, 0x00	; 0
    8854:	30 e0       	ldi	r19, 0x00	; 0
    8856:	16 16       	cp	r1, r22
    8858:	17 06       	cpc	r1, r23
    885a:	1c f4       	brge	.+6      	; 0x8862 <dtoa_prf+0x192>
    885c:	fb 01       	movw	r30, r22
    885e:	31 96       	adiw	r30, 0x01	; 1
    8860:	02 c0       	rjmp	.+4      	; 0x8866 <dtoa_prf+0x196>
    8862:	e1 e0       	ldi	r30, 0x01	; 1
    8864:	f0 e0       	ldi	r31, 0x00	; 0
    8866:	2e 0f       	add	r18, r30
    8868:	3f 1f       	adc	r19, r31
    886a:	bb 20       	and	r11, r11
    886c:	21 f0       	breq	.+8      	; 0x8876 <dtoa_prf+0x1a6>
    886e:	eb 2d       	mov	r30, r11
    8870:	f0 e0       	ldi	r31, 0x00	; 0
    8872:	31 96       	adiw	r30, 0x01	; 1
    8874:	02 c0       	rjmp	.+4      	; 0x887a <dtoa_prf+0x1aa>
    8876:	e0 e0       	ldi	r30, 0x00	; 0
    8878:	f0 e0       	ldi	r31, 0x00	; 0
    887a:	2e 0f       	add	r18, r30
    887c:	3f 1f       	adc	r19, r31
    887e:	e1 2f       	mov	r30, r17
    8880:	f0 e0       	ldi	r31, 0x00	; 0
    8882:	2e 17       	cp	r18, r30
    8884:	3f 07       	cpc	r19, r31
    8886:	1c f4       	brge	.+6      	; 0x888e <dtoa_prf+0x1be>
    8888:	12 1b       	sub	r17, r18
    888a:	21 2f       	mov	r18, r17
    888c:	01 c0       	rjmp	.+2      	; 0x8890 <dtoa_prf+0x1c0>
    888e:	20 e0       	ldi	r18, 0x00	; 0
    8890:	8e 2d       	mov	r24, r14
    8892:	88 71       	andi	r24, 0x18	; 24
    8894:	59 f4       	brne	.+22     	; 0x88ac <dtoa_prf+0x1dc>
    8896:	f6 01       	movw	r30, r12
    8898:	82 2f       	mov	r24, r18
    889a:	30 e2       	ldi	r19, 0x20	; 32
    889c:	88 23       	and	r24, r24
    889e:	19 f0       	breq	.+6      	; 0x88a6 <dtoa_prf+0x1d6>
    88a0:	31 93       	st	Z+, r19
    88a2:	81 50       	subi	r24, 0x01	; 1
    88a4:	fb cf       	rjmp	.-10     	; 0x889c <dtoa_prf+0x1cc>
    88a6:	c2 0e       	add	r12, r18
    88a8:	d1 1c       	adc	r13, r1
    88aa:	20 e0       	ldi	r18, 0x00	; 0
    88ac:	99 23       	and	r25, r25
    88ae:	29 f0       	breq	.+10     	; 0x88ba <dtoa_prf+0x1ea>
    88b0:	d6 01       	movw	r26, r12
    88b2:	9c 93       	st	X, r25
    88b4:	f6 01       	movw	r30, r12
    88b6:	31 96       	adiw	r30, 0x01	; 1
    88b8:	6f 01       	movw	r12, r30
    88ba:	51 11       	cpse	r21, r1
    88bc:	0b c0       	rjmp	.+22     	; 0x88d4 <dtoa_prf+0x204>
    88be:	f6 01       	movw	r30, r12
    88c0:	82 2f       	mov	r24, r18
    88c2:	90 e3       	ldi	r25, 0x30	; 48
    88c4:	88 23       	and	r24, r24
    88c6:	19 f0       	breq	.+6      	; 0x88ce <dtoa_prf+0x1fe>
    88c8:	91 93       	st	Z+, r25
    88ca:	81 50       	subi	r24, 0x01	; 1
    88cc:	fb cf       	rjmp	.-10     	; 0x88c4 <dtoa_prf+0x1f4>
    88ce:	c2 0e       	add	r12, r18
    88d0:	d1 1c       	adc	r13, r1
    88d2:	20 e0       	ldi	r18, 0x00	; 0
    88d4:	0f 2d       	mov	r16, r15
    88d6:	06 0f       	add	r16, r22
    88d8:	9a 81       	ldd	r25, Y+2	; 0x02
    88da:	34 2f       	mov	r19, r20
    88dc:	30 71       	andi	r19, 0x10	; 16
    88de:	44 ff       	sbrs	r20, 4
    88e0:	03 c0       	rjmp	.+6      	; 0x88e8 <dtoa_prf+0x218>
    88e2:	91 33       	cpi	r25, 0x31	; 49
    88e4:	09 f4       	brne	.+2      	; 0x88e8 <dtoa_prf+0x218>
    88e6:	01 50       	subi	r16, 0x01	; 1
    88e8:	10 16       	cp	r1, r16
    88ea:	24 f4       	brge	.+8      	; 0x88f4 <dtoa_prf+0x224>
    88ec:	09 30       	cpi	r16, 0x09	; 9
    88ee:	18 f0       	brcs	.+6      	; 0x88f6 <dtoa_prf+0x226>
    88f0:	08 e0       	ldi	r16, 0x08	; 8
    88f2:	01 c0       	rjmp	.+2      	; 0x88f6 <dtoa_prf+0x226>
    88f4:	01 e0       	ldi	r16, 0x01	; 1
    88f6:	ab 01       	movw	r20, r22
    88f8:	77 ff       	sbrs	r23, 7
    88fa:	02 c0       	rjmp	.+4      	; 0x8900 <dtoa_prf+0x230>
    88fc:	40 e0       	ldi	r20, 0x00	; 0
    88fe:	50 e0       	ldi	r21, 0x00	; 0
    8900:	fb 01       	movw	r30, r22
    8902:	e4 1b       	sub	r30, r20
    8904:	f5 0b       	sbc	r31, r21
    8906:	a1 e0       	ldi	r26, 0x01	; 1
    8908:	b0 e0       	ldi	r27, 0x00	; 0
    890a:	ac 0f       	add	r26, r28
    890c:	bd 1f       	adc	r27, r29
    890e:	ea 0f       	add	r30, r26
    8910:	fb 1f       	adc	r31, r27
    8912:	8e e2       	ldi	r24, 0x2E	; 46
    8914:	a8 2e       	mov	r10, r24
    8916:	4b 01       	movw	r8, r22
    8918:	80 1a       	sub	r8, r16
    891a:	91 08       	sbc	r9, r1
    891c:	0b 2d       	mov	r16, r11
    891e:	10 e0       	ldi	r17, 0x00	; 0
    8920:	11 95       	neg	r17
    8922:	01 95       	neg	r16
    8924:	11 09       	sbc	r17, r1
    8926:	4f 3f       	cpi	r20, 0xFF	; 255
    8928:	bf ef       	ldi	r27, 0xFF	; 255
    892a:	5b 07       	cpc	r21, r27
    892c:	21 f4       	brne	.+8      	; 0x8936 <dtoa_prf+0x266>
    892e:	d6 01       	movw	r26, r12
    8930:	ac 92       	st	X, r10
    8932:	11 96       	adiw	r26, 0x01	; 1
    8934:	6d 01       	movw	r12, r26
    8936:	64 17       	cp	r22, r20
    8938:	75 07       	cpc	r23, r21
    893a:	2c f0       	brlt	.+10     	; 0x8946 <dtoa_prf+0x276>
    893c:	84 16       	cp	r8, r20
    893e:	95 06       	cpc	r9, r21
    8940:	14 f4       	brge	.+4      	; 0x8946 <dtoa_prf+0x276>
    8942:	81 81       	ldd	r24, Z+1	; 0x01
    8944:	01 c0       	rjmp	.+2      	; 0x8948 <dtoa_prf+0x278>
    8946:	80 e3       	ldi	r24, 0x30	; 48
    8948:	41 50       	subi	r20, 0x01	; 1
    894a:	51 09       	sbc	r21, r1
    894c:	31 96       	adiw	r30, 0x01	; 1
    894e:	d6 01       	movw	r26, r12
    8950:	11 96       	adiw	r26, 0x01	; 1
    8952:	7d 01       	movw	r14, r26
    8954:	40 17       	cp	r20, r16
    8956:	51 07       	cpc	r21, r17
    8958:	24 f0       	brlt	.+8      	; 0x8962 <dtoa_prf+0x292>
    895a:	d6 01       	movw	r26, r12
    895c:	8c 93       	st	X, r24
    895e:	67 01       	movw	r12, r14
    8960:	e2 cf       	rjmp	.-60     	; 0x8926 <dtoa_prf+0x256>
    8962:	64 17       	cp	r22, r20
    8964:	75 07       	cpc	r23, r21
    8966:	39 f4       	brne	.+14     	; 0x8976 <dtoa_prf+0x2a6>
    8968:	96 33       	cpi	r25, 0x36	; 54
    896a:	20 f4       	brcc	.+8      	; 0x8974 <dtoa_prf+0x2a4>
    896c:	95 33       	cpi	r25, 0x35	; 53
    896e:	19 f4       	brne	.+6      	; 0x8976 <dtoa_prf+0x2a6>
    8970:	31 11       	cpse	r19, r1
    8972:	01 c0       	rjmp	.+2      	; 0x8976 <dtoa_prf+0x2a6>
    8974:	81 e3       	ldi	r24, 0x31	; 49
    8976:	f6 01       	movw	r30, r12
    8978:	80 83       	st	Z, r24
    897a:	f7 01       	movw	r30, r14
    897c:	82 2f       	mov	r24, r18
    897e:	90 e2       	ldi	r25, 0x20	; 32
    8980:	88 23       	and	r24, r24
    8982:	19 f0       	breq	.+6      	; 0x898a <dtoa_prf+0x2ba>
    8984:	91 93       	st	Z+, r25
    8986:	81 50       	subi	r24, 0x01	; 1
    8988:	fb cf       	rjmp	.-10     	; 0x8980 <dtoa_prf+0x2b0>
    898a:	f7 01       	movw	r30, r14
    898c:	e2 0f       	add	r30, r18
    898e:	f1 1d       	adc	r31, r1
    8990:	10 82       	st	Z, r1
    8992:	80 e0       	ldi	r24, 0x00	; 0
    8994:	90 e0       	ldi	r25, 0x00	; 0
    8996:	29 96       	adiw	r28, 0x09	; 9
    8998:	0f b6       	in	r0, 0x3f	; 63
    899a:	f8 94       	cli
    899c:	de bf       	out	0x3e, r29	; 62
    899e:	0f be       	out	0x3f, r0	; 63
    89a0:	cd bf       	out	0x3d, r28	; 61
    89a2:	df 91       	pop	r29
    89a4:	cf 91       	pop	r28
    89a6:	1f 91       	pop	r17
    89a8:	0f 91       	pop	r16
    89aa:	ff 90       	pop	r15
    89ac:	ef 90       	pop	r14
    89ae:	df 90       	pop	r13
    89b0:	cf 90       	pop	r12
    89b2:	bf 90       	pop	r11
    89b4:	af 90       	pop	r10
    89b6:	9f 90       	pop	r9
    89b8:	8f 90       	pop	r8
    89ba:	08 95       	ret

000089bc <__ftoa_engine>:
    89bc:	28 30       	cpi	r18, 0x08	; 8
    89be:	08 f0       	brcs	.+2      	; 0x89c2 <__ftoa_engine+0x6>
    89c0:	27 e0       	ldi	r18, 0x07	; 7
    89c2:	33 27       	eor	r19, r19
    89c4:	da 01       	movw	r26, r20
    89c6:	99 0f       	add	r25, r25
    89c8:	31 1d       	adc	r19, r1
    89ca:	87 fd       	sbrc	r24, 7
    89cc:	91 60       	ori	r25, 0x01	; 1
    89ce:	00 96       	adiw	r24, 0x00	; 0
    89d0:	61 05       	cpc	r22, r1
    89d2:	71 05       	cpc	r23, r1
    89d4:	39 f4       	brne	.+14     	; 0x89e4 <__ftoa_engine+0x28>
    89d6:	32 60       	ori	r19, 0x02	; 2
    89d8:	2e 5f       	subi	r18, 0xFE	; 254
    89da:	3d 93       	st	X+, r19
    89dc:	30 e3       	ldi	r19, 0x30	; 48
    89de:	2a 95       	dec	r18
    89e0:	e1 f7       	brne	.-8      	; 0x89da <__ftoa_engine+0x1e>
    89e2:	08 95       	ret
    89e4:	9f 3f       	cpi	r25, 0xFF	; 255
    89e6:	30 f0       	brcs	.+12     	; 0x89f4 <__ftoa_engine+0x38>
    89e8:	80 38       	cpi	r24, 0x80	; 128
    89ea:	71 05       	cpc	r23, r1
    89ec:	61 05       	cpc	r22, r1
    89ee:	09 f0       	breq	.+2      	; 0x89f2 <__ftoa_engine+0x36>
    89f0:	3c 5f       	subi	r19, 0xFC	; 252
    89f2:	3c 5f       	subi	r19, 0xFC	; 252
    89f4:	3d 93       	st	X+, r19
    89f6:	91 30       	cpi	r25, 0x01	; 1
    89f8:	08 f0       	brcs	.+2      	; 0x89fc <__ftoa_engine+0x40>
    89fa:	80 68       	ori	r24, 0x80	; 128
    89fc:	91 1d       	adc	r25, r1
    89fe:	df 93       	push	r29
    8a00:	cf 93       	push	r28
    8a02:	1f 93       	push	r17
    8a04:	0f 93       	push	r16
    8a06:	ff 92       	push	r15
    8a08:	ef 92       	push	r14
    8a0a:	19 2f       	mov	r17, r25
    8a0c:	98 7f       	andi	r25, 0xF8	; 248
    8a0e:	96 95       	lsr	r25
    8a10:	e9 2f       	mov	r30, r25
    8a12:	96 95       	lsr	r25
    8a14:	96 95       	lsr	r25
    8a16:	e9 0f       	add	r30, r25
    8a18:	ff 27       	eor	r31, r31
    8a1a:	ea 5d       	subi	r30, 0xDA	; 218
    8a1c:	fe 4f       	sbci	r31, 0xFE	; 254
    8a1e:	99 27       	eor	r25, r25
    8a20:	33 27       	eor	r19, r19
    8a22:	ee 24       	eor	r14, r14
    8a24:	ff 24       	eor	r15, r15
    8a26:	a7 01       	movw	r20, r14
    8a28:	e7 01       	movw	r28, r14
    8a2a:	05 90       	lpm	r0, Z+
    8a2c:	08 94       	sec
    8a2e:	07 94       	ror	r0
    8a30:	28 f4       	brcc	.+10     	; 0x8a3c <__ftoa_engine+0x80>
    8a32:	36 0f       	add	r19, r22
    8a34:	e7 1e       	adc	r14, r23
    8a36:	f8 1e       	adc	r15, r24
    8a38:	49 1f       	adc	r20, r25
    8a3a:	51 1d       	adc	r21, r1
    8a3c:	66 0f       	add	r22, r22
    8a3e:	77 1f       	adc	r23, r23
    8a40:	88 1f       	adc	r24, r24
    8a42:	99 1f       	adc	r25, r25
    8a44:	06 94       	lsr	r0
    8a46:	a1 f7       	brne	.-24     	; 0x8a30 <__ftoa_engine+0x74>
    8a48:	05 90       	lpm	r0, Z+
    8a4a:	07 94       	ror	r0
    8a4c:	28 f4       	brcc	.+10     	; 0x8a58 <__ftoa_engine+0x9c>
    8a4e:	e7 0e       	add	r14, r23
    8a50:	f8 1e       	adc	r15, r24
    8a52:	49 1f       	adc	r20, r25
    8a54:	56 1f       	adc	r21, r22
    8a56:	c1 1d       	adc	r28, r1
    8a58:	77 0f       	add	r23, r23
    8a5a:	88 1f       	adc	r24, r24
    8a5c:	99 1f       	adc	r25, r25
    8a5e:	66 1f       	adc	r22, r22
    8a60:	06 94       	lsr	r0
    8a62:	a1 f7       	brne	.-24     	; 0x8a4c <__ftoa_engine+0x90>
    8a64:	05 90       	lpm	r0, Z+
    8a66:	07 94       	ror	r0
    8a68:	28 f4       	brcc	.+10     	; 0x8a74 <__ftoa_engine+0xb8>
    8a6a:	f8 0e       	add	r15, r24
    8a6c:	49 1f       	adc	r20, r25
    8a6e:	56 1f       	adc	r21, r22
    8a70:	c7 1f       	adc	r28, r23
    8a72:	d1 1d       	adc	r29, r1
    8a74:	88 0f       	add	r24, r24
    8a76:	99 1f       	adc	r25, r25
    8a78:	66 1f       	adc	r22, r22
    8a7a:	77 1f       	adc	r23, r23
    8a7c:	06 94       	lsr	r0
    8a7e:	a1 f7       	brne	.-24     	; 0x8a68 <__ftoa_engine+0xac>
    8a80:	05 90       	lpm	r0, Z+
    8a82:	07 94       	ror	r0
    8a84:	20 f4       	brcc	.+8      	; 0x8a8e <__ftoa_engine+0xd2>
    8a86:	49 0f       	add	r20, r25
    8a88:	56 1f       	adc	r21, r22
    8a8a:	c7 1f       	adc	r28, r23
    8a8c:	d8 1f       	adc	r29, r24
    8a8e:	99 0f       	add	r25, r25
    8a90:	66 1f       	adc	r22, r22
    8a92:	77 1f       	adc	r23, r23
    8a94:	88 1f       	adc	r24, r24
    8a96:	06 94       	lsr	r0
    8a98:	a9 f7       	brne	.-22     	; 0x8a84 <__ftoa_engine+0xc8>
    8a9a:	84 91       	lpm	r24, Z
    8a9c:	10 95       	com	r17
    8a9e:	17 70       	andi	r17, 0x07	; 7
    8aa0:	41 f0       	breq	.+16     	; 0x8ab2 <__ftoa_engine+0xf6>
    8aa2:	d6 95       	lsr	r29
    8aa4:	c7 95       	ror	r28
    8aa6:	57 95       	ror	r21
    8aa8:	47 95       	ror	r20
    8aaa:	f7 94       	ror	r15
    8aac:	e7 94       	ror	r14
    8aae:	1a 95       	dec	r17
    8ab0:	c1 f7       	brne	.-16     	; 0x8aa2 <__ftoa_engine+0xe6>
    8ab2:	ec ec       	ldi	r30, 0xCC	; 204
    8ab4:	f0 e0       	ldi	r31, 0x00	; 0
    8ab6:	68 94       	set
    8ab8:	15 90       	lpm	r1, Z+
    8aba:	15 91       	lpm	r17, Z+
    8abc:	35 91       	lpm	r19, Z+
    8abe:	65 91       	lpm	r22, Z+
    8ac0:	95 91       	lpm	r25, Z+
    8ac2:	05 90       	lpm	r0, Z+
    8ac4:	7f e2       	ldi	r23, 0x2F	; 47
    8ac6:	73 95       	inc	r23
    8ac8:	e1 18       	sub	r14, r1
    8aca:	f1 0a       	sbc	r15, r17
    8acc:	43 0b       	sbc	r20, r19
    8ace:	56 0b       	sbc	r21, r22
    8ad0:	c9 0b       	sbc	r28, r25
    8ad2:	d0 09       	sbc	r29, r0
    8ad4:	c0 f7       	brcc	.-16     	; 0x8ac6 <__ftoa_engine+0x10a>
    8ad6:	e1 0c       	add	r14, r1
    8ad8:	f1 1e       	adc	r15, r17
    8ada:	43 1f       	adc	r20, r19
    8adc:	56 1f       	adc	r21, r22
    8ade:	c9 1f       	adc	r28, r25
    8ae0:	d0 1d       	adc	r29, r0
    8ae2:	7e f4       	brtc	.+30     	; 0x8b02 <__ftoa_engine+0x146>
    8ae4:	70 33       	cpi	r23, 0x30	; 48
    8ae6:	11 f4       	brne	.+4      	; 0x8aec <__ftoa_engine+0x130>
    8ae8:	8a 95       	dec	r24
    8aea:	e6 cf       	rjmp	.-52     	; 0x8ab8 <__ftoa_engine+0xfc>
    8aec:	e8 94       	clt
    8aee:	01 50       	subi	r16, 0x01	; 1
    8af0:	30 f0       	brcs	.+12     	; 0x8afe <__ftoa_engine+0x142>
    8af2:	08 0f       	add	r16, r24
    8af4:	0a f4       	brpl	.+2      	; 0x8af8 <__ftoa_engine+0x13c>
    8af6:	00 27       	eor	r16, r16
    8af8:	02 17       	cp	r16, r18
    8afa:	08 f4       	brcc	.+2      	; 0x8afe <__ftoa_engine+0x142>
    8afc:	20 2f       	mov	r18, r16
    8afe:	23 95       	inc	r18
    8b00:	02 2f       	mov	r16, r18
    8b02:	7a 33       	cpi	r23, 0x3A	; 58
    8b04:	28 f0       	brcs	.+10     	; 0x8b10 <__ftoa_engine+0x154>
    8b06:	79 e3       	ldi	r23, 0x39	; 57
    8b08:	7d 93       	st	X+, r23
    8b0a:	2a 95       	dec	r18
    8b0c:	e9 f7       	brne	.-6      	; 0x8b08 <__ftoa_engine+0x14c>
    8b0e:	10 c0       	rjmp	.+32     	; 0x8b30 <__ftoa_engine+0x174>
    8b10:	7d 93       	st	X+, r23
    8b12:	2a 95       	dec	r18
    8b14:	89 f6       	brne	.-94     	; 0x8ab8 <__ftoa_engine+0xfc>
    8b16:	06 94       	lsr	r0
    8b18:	97 95       	ror	r25
    8b1a:	67 95       	ror	r22
    8b1c:	37 95       	ror	r19
    8b1e:	17 95       	ror	r17
    8b20:	17 94       	ror	r1
    8b22:	e1 18       	sub	r14, r1
    8b24:	f1 0a       	sbc	r15, r17
    8b26:	43 0b       	sbc	r20, r19
    8b28:	56 0b       	sbc	r21, r22
    8b2a:	c9 0b       	sbc	r28, r25
    8b2c:	d0 09       	sbc	r29, r0
    8b2e:	98 f0       	brcs	.+38     	; 0x8b56 <__ftoa_engine+0x19a>
    8b30:	23 95       	inc	r18
    8b32:	7e 91       	ld	r23, -X
    8b34:	73 95       	inc	r23
    8b36:	7a 33       	cpi	r23, 0x3A	; 58
    8b38:	08 f0       	brcs	.+2      	; 0x8b3c <__ftoa_engine+0x180>
    8b3a:	70 e3       	ldi	r23, 0x30	; 48
    8b3c:	7c 93       	st	X, r23
    8b3e:	20 13       	cpse	r18, r16
    8b40:	b8 f7       	brcc	.-18     	; 0x8b30 <__ftoa_engine+0x174>
    8b42:	7e 91       	ld	r23, -X
    8b44:	70 61       	ori	r23, 0x10	; 16
    8b46:	7d 93       	st	X+, r23
    8b48:	30 f0       	brcs	.+12     	; 0x8b56 <__ftoa_engine+0x19a>
    8b4a:	83 95       	inc	r24
    8b4c:	71 e3       	ldi	r23, 0x31	; 49
    8b4e:	7d 93       	st	X+, r23
    8b50:	70 e3       	ldi	r23, 0x30	; 48
    8b52:	2a 95       	dec	r18
    8b54:	e1 f7       	brne	.-8      	; 0x8b4e <__ftoa_engine+0x192>
    8b56:	11 24       	eor	r1, r1
    8b58:	ef 90       	pop	r14
    8b5a:	ff 90       	pop	r15
    8b5c:	0f 91       	pop	r16
    8b5e:	1f 91       	pop	r17
    8b60:	cf 91       	pop	r28
    8b62:	df 91       	pop	r29
    8b64:	99 27       	eor	r25, r25
    8b66:	87 fd       	sbrc	r24, 7
    8b68:	90 95       	com	r25
    8b6a:	08 95       	ret

00008b6c <__ctype_isfalse>:
    8b6c:	99 27       	eor	r25, r25
    8b6e:	88 27       	eor	r24, r24

00008b70 <__ctype_istrue>:
    8b70:	08 95       	ret

00008b72 <strrev>:
    8b72:	dc 01       	movw	r26, r24
    8b74:	fc 01       	movw	r30, r24
    8b76:	67 2f       	mov	r22, r23
    8b78:	71 91       	ld	r23, Z+
    8b7a:	77 23       	and	r23, r23
    8b7c:	e1 f7       	brne	.-8      	; 0x8b76 <strrev+0x4>
    8b7e:	32 97       	sbiw	r30, 0x02	; 2
    8b80:	04 c0       	rjmp	.+8      	; 0x8b8a <strrev+0x18>
    8b82:	7c 91       	ld	r23, X
    8b84:	6d 93       	st	X+, r22
    8b86:	70 83       	st	Z, r23
    8b88:	62 91       	ld	r22, -Z
    8b8a:	ae 17       	cp	r26, r30
    8b8c:	bf 07       	cpc	r27, r31
    8b8e:	c8 f3       	brcs	.-14     	; 0x8b82 <strrev+0x10>
    8b90:	08 95       	ret

00008b92 <eeprom_read_byte>:
    8b92:	f9 99       	sbic	0x1f, 1	; 31
    8b94:	fe cf       	rjmp	.-4      	; 0x8b92 <eeprom_read_byte>
    8b96:	92 bd       	out	0x22, r25	; 34
    8b98:	81 bd       	out	0x21, r24	; 33
    8b9a:	f8 9a       	sbi	0x1f, 0	; 31
    8b9c:	99 27       	eor	r25, r25
    8b9e:	80 b5       	in	r24, 0x20	; 32
    8ba0:	08 95       	ret

00008ba2 <eeprom_write_byte>:
    8ba2:	26 2f       	mov	r18, r22

00008ba4 <eeprom_write_r18>:
    8ba4:	f9 99       	sbic	0x1f, 1	; 31
    8ba6:	fe cf       	rjmp	.-4      	; 0x8ba4 <eeprom_write_r18>
    8ba8:	1f ba       	out	0x1f, r1	; 31
    8baa:	92 bd       	out	0x22, r25	; 34
    8bac:	81 bd       	out	0x21, r24	; 33
    8bae:	20 bd       	out	0x20, r18	; 32
    8bb0:	0f b6       	in	r0, 0x3f	; 63
    8bb2:	f8 94       	cli
    8bb4:	fa 9a       	sbi	0x1f, 2	; 31
    8bb6:	f9 9a       	sbi	0x1f, 1	; 31
    8bb8:	0f be       	out	0x3f, r0	; 63
    8bba:	01 96       	adiw	r24, 0x01	; 1
    8bbc:	08 95       	ret

00008bbe <__do_global_dtors>:
    8bbe:	11 e0       	ldi	r17, 0x01	; 1
    8bc0:	c3 e6       	ldi	r28, 0x63	; 99
    8bc2:	d1 e0       	ldi	r29, 0x01	; 1
    8bc4:	03 c0       	rjmp	.+6      	; 0x8bcc <__do_global_dtors+0xe>
    8bc6:	fe 01       	movw	r30, r28
    8bc8:	59 da       	rcall	.-2894   	; 0x807c <__tablejump2__>
    8bca:	21 96       	adiw	r28, 0x01	; 1
    8bcc:	c4 36       	cpi	r28, 0x64	; 100
    8bce:	d1 07       	cpc	r29, r17
    8bd0:	d1 f7       	brne	.-12     	; 0x8bc6 <__do_global_dtors+0x8>
    8bd2:	f8 94       	cli

00008bd4 <__stop_program>:
    8bd4:	ff cf       	rjmp	.-2      	; 0x8bd4 <__stop_program>
