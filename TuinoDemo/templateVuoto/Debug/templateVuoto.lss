
templateVuoto.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000007c6  00800100  000075b8  0000764c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000075b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000308  008008c6  008008c6  00007e12  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00007e12  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007e44  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00001260  00000000  00000000  00007e84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000397cb  00000000  00000000  000090e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000075ed  00000000  00000000  000428af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000b849  00000000  00000000  00049e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000406c  00000000  00000000  000556e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00008321  00000000  00000000  00059754  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001857a  00000000  00000000  00061a75  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001348  00000000  00000000  00079fef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	62 c1       	rjmp	.+708    	; 0x2c6 <__dtors_end>
       2:	00 00       	nop
       4:	8a c1       	rjmp	.+788    	; 0x31a <__bad_interrupt>
       6:	00 00       	nop
       8:	88 c1       	rjmp	.+784    	; 0x31a <__bad_interrupt>
       a:	00 00       	nop
       c:	86 c1       	rjmp	.+780    	; 0x31a <__bad_interrupt>
       e:	00 00       	nop
      10:	0c 94 02 10 	jmp	0x2004	; 0x2004 <__vector_4>
      14:	82 c1       	rjmp	.+772    	; 0x31a <__bad_interrupt>
      16:	00 00       	nop
      18:	80 c1       	rjmp	.+768    	; 0x31a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	0c 94 26 10 	jmp	0x204c	; 0x204c <__vector_7>
      20:	7c c1       	rjmp	.+760    	; 0x31a <__bad_interrupt>
      22:	00 00       	nop
      24:	7a c1       	rjmp	.+756    	; 0x31a <__bad_interrupt>
      26:	00 00       	nop
      28:	78 c1       	rjmp	.+752    	; 0x31a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	76 c1       	rjmp	.+748    	; 0x31a <__bad_interrupt>
      2e:	00 00       	nop
      30:	74 c1       	rjmp	.+744    	; 0x31a <__bad_interrupt>
      32:	00 00       	nop
      34:	72 c1       	rjmp	.+740    	; 0x31a <__bad_interrupt>
      36:	00 00       	nop
      38:	70 c1       	rjmp	.+736    	; 0x31a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6e c1       	rjmp	.+732    	; 0x31a <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 c7 2f 	jmp	0x5f8e	; 0x5f8e <__vector_16>
      44:	6a c1       	rjmp	.+724    	; 0x31a <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 ba 2d 	jmp	0x5b74	; 0x5b74 <__vector_18>
      4c:	0c 94 ec 2d 	jmp	0x5bd8	; 0x5bd8 <__vector_19>
      50:	64 c1       	rjmp	.+712    	; 0x31a <__bad_interrupt>
      52:	00 00       	nop
      54:	62 c1       	rjmp	.+708    	; 0x31a <__bad_interrupt>
      56:	00 00       	nop
      58:	60 c1       	rjmp	.+704    	; 0x31a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5e c1       	rjmp	.+700    	; 0x31a <__bad_interrupt>
      5e:	00 00       	nop
      60:	5c c1       	rjmp	.+696    	; 0x31a <__bad_interrupt>
      62:	00 00       	nop
      64:	5a c1       	rjmp	.+692    	; 0x31a <__bad_interrupt>
      66:	00 00       	nop
      68:	0c 94 07 2a 	jmp	0x540e	; 0x540e <__vector_26>
      6c:	56 c1       	rjmp	.+684    	; 0x31a <__bad_interrupt>
      6e:	00 00       	nop
      70:	54 c1       	rjmp	.+680    	; 0x31a <__bad_interrupt>
      72:	00 00       	nop
      74:	52 c1       	rjmp	.+676    	; 0x31a <__bad_interrupt>
      76:	00 00       	nop
      78:	50 c1       	rjmp	.+672    	; 0x31a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4e c1       	rjmp	.+668    	; 0x31a <__bad_interrupt>
      7e:	00 00       	nop
      80:	4c c1       	rjmp	.+664    	; 0x31a <__bad_interrupt>
      82:	00 00       	nop
      84:	4a c1       	rjmp	.+660    	; 0x31a <__bad_interrupt>
      86:	00 00       	nop
      88:	48 c1       	rjmp	.+656    	; 0x31a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	86 0a       	sbc	r8, r22
      8e:	a9 0a       	sbc	r10, r25
      90:	be 0a       	sbc	r11, r30
      92:	ef 0a       	sbc	r14, r31
      94:	e7 0b       	sbc	r30, r23
      96:	4c 0c       	add	r4, r12
      98:	19 0d       	add	r17, r9
      9a:	6a 0d       	add	r22, r10
      9c:	a8 0d       	add	r26, r8
      9e:	13 0e       	add	r1, r19
      a0:	d4 0e       	add	r13, r20
      a2:	d4 0e       	add	r13, r20
      a4:	9e 18       	sub	r9, r14
      a6:	b5 18       	sub	r11, r5
      a8:	b5 18       	sub	r11, r5
      aa:	b2 18       	sub	r11, r2
      ac:	b5 18       	sub	r11, r5
      ae:	9c 18       	sub	r9, r12
      b0:	b5 18       	sub	r11, r5
      b2:	b5 18       	sub	r11, r5
      b4:	b5 18       	sub	r11, r5
      b6:	90 18       	sub	r9, r0
      b8:	b5 18       	sub	r11, r5
      ba:	b5 18       	sub	r11, r5
      bc:	a5 18       	sub	r10, r5
      be:	b0 18       	sub	r11, r0
      c0:	ae 18       	sub	r10, r14
      c2:	b5 18       	sub	r11, r5
      c4:	b5 18       	sub	r11, r5
      c6:	b5 18       	sub	r11, r5
      c8:	ac 18       	sub	r10, r12

000000ca <__trampolines_end>:
      ca:	00 40       	sbci	r16, 0x00	; 0
      cc:	7a 10       	cpse	r7, r10
      ce:	f3 5a       	subi	r31, 0xA3	; 163
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	72 4e       	sbci	r23, 0xE2	; 226
      d4:	18 09       	sbc	r17, r8
      d6:	00 10       	cpse	r0, r0
      d8:	a5 d4       	rcall	.+2378   	; 0xa24 <_Z14GetCodeRfidATev+0x54>
      da:	e8 00       	.word	0x00e8	; ????
      dc:	00 e8       	ldi	r16, 0x80	; 128
      de:	76 48       	sbci	r23, 0x86	; 134
      e0:	17 00       	.word	0x0017	; ????
      e2:	00 e4       	ldi	r16, 0x40	; 64
      e4:	0b 54       	subi	r16, 0x4B	; 75
      e6:	02 00       	.word	0x0002	; ????
      e8:	00 ca       	rjmp	.-3072   	; 0xfffff4ea <__eeprom_end+0xff7ef4ea>
      ea:	9a 3b       	cpi	r25, 0xBA	; 186
      ec:	00 00       	nop
      ee:	00 e1       	ldi	r16, 0x10	; 16
      f0:	f5 05       	cpc	r31, r5
      f2:	00 00       	nop
      f4:	80 96       	adiw	r24, 0x20	; 32
      f6:	98 00       	.word	0x0098	; ????
      f8:	00 00       	nop
      fa:	40 42       	sbci	r20, 0x20	; 32
      fc:	0f 00       	.word	0x000f	; ????
      fe:	00 00       	nop
     100:	a0 86       	std	Z+8, r10	; 0x08
     102:	01 00       	.word	0x0001	; ????
     104:	00 00       	nop
     106:	10 27       	eor	r17, r16
     108:	00 00       	nop
     10a:	00 00       	nop
     10c:	e8 03       	fmulsu	r22, r16
     10e:	00 00       	nop
     110:	00 00       	nop
     112:	64 00       	.word	0x0064	; ????
     114:	00 00       	nop
     116:	00 00       	nop
     118:	0a 00       	.word	0x000a	; ????
     11a:	00 00       	nop
     11c:	00 00       	nop
     11e:	01 00       	.word	0x0001	; ????
     120:	00 00       	nop
     122:	00 00       	nop
     124:	2c 76       	andi	r18, 0x6C	; 108
     126:	d8 88       	ldd	r13, Y+16	; 0x10
     128:	dc 67       	ori	r29, 0x7C	; 124
     12a:	4f 08       	sbc	r4, r15
     12c:	23 df       	rcall	.-442    	; 0xffffff74 <__eeprom_end+0xff7eff74>
     12e:	c1 df       	rcall	.-126    	; 0xb2 <__SREG__+0x73>
     130:	ae 59       	subi	r26, 0x9E	; 158
     132:	e1 b1       	in	r30, 0x01	; 1
     134:	b7 96       	adiw	r30, 0x27	; 39
     136:	e5 e3       	ldi	r30, 0x35	; 53
     138:	e4 53       	subi	r30, 0x34	; 52
     13a:	c6 3a       	cpi	r28, 0xA6	; 166
     13c:	e6 51       	subi	r30, 0x16	; 22
     13e:	99 76       	andi	r25, 0x69	; 105
     140:	96 e8       	ldi	r25, 0x86	; 134
     142:	e6 c2       	rjmp	.+1484   	; 0x710 <_Z10displayLCDP6Stringii+0x82>
     144:	84 26       	eor	r8, r20
     146:	eb 89       	ldd	r30, Y+19	; 0x13
     148:	8c 9b       	sbis	0x11, 4	; 17
     14a:	62 ed       	ldi	r22, 0xD2	; 210
     14c:	40 7c       	andi	r20, 0xC0	; 192
     14e:	6f fc       	.word	0xfc6f	; ????
     150:	ef bc       	out	0x2f, r14	; 47
     152:	9c 9f       	mul	r25, r28
     154:	40 f2       	brcs	.-112    	; 0xe6 <__trampolines_end+0x1c>
     156:	ba a5       	ldd	r27, Y+42	; 0x2a
     158:	6f a5       	ldd	r22, Y+47	; 0x2f
     15a:	f4 90       	lpm	r15, Z
     15c:	05 5a       	subi	r16, 0xA5	; 165
     15e:	2a f7       	brpl	.-54     	; 0x12a <__trampolines_end+0x60>
     160:	5c 93       	st	X, r21
     162:	6b 6c       	ori	r22, 0xCB	; 203
     164:	f9 67       	ori	r31, 0x79	; 121
     166:	6d c1       	rjmp	.+730    	; 0x442 <_Z8printTabh+0xe>
     168:	1b fc       	.word	0xfc1b	; ????
     16a:	e0 e4       	ldi	r30, 0x40	; 64
     16c:	0d 47       	sbci	r16, 0x7D	; 125
     16e:	fe f5       	brtc	.+126    	; 0x1ee <_ZZ5setupE3__c+0xc>
     170:	20 e6       	ldi	r18, 0x60	; 96
     172:	b5 00       	.word	0x00b5	; ????
     174:	d0 ed       	ldi	r29, 0xD0	; 208
     176:	90 2e       	mov	r9, r16
     178:	03 00       	.word	0x0003	; ????
     17a:	94 35       	cpi	r25, 0x54	; 84
     17c:	77 05       	cpc	r23, r7
     17e:	00 80       	ld	r0, Z
     180:	84 1e       	adc	r8, r20
     182:	08 00       	.word	0x0008	; ????
     184:	00 20       	and	r0, r0
     186:	4e 0a       	sbc	r4, r30
     188:	00 00       	nop
     18a:	00 c8       	rjmp	.-4096   	; 0xfffff18c <__eeprom_end+0xff7ef18c>
     18c:	0c 33       	cpi	r16, 0x3C	; 60
     18e:	33 33       	cpi	r19, 0x33	; 51
     190:	33 0f       	add	r19, r19
     192:	98 6e       	ori	r25, 0xE8	; 232
     194:	12 83       	std	Z+2, r17	; 0x02
     196:	11 41       	sbci	r17, 0x11	; 17
     198:	ef 8d       	ldd	r30, Y+31	; 0x1f
     19a:	21 14       	cp	r2, r1
     19c:	89 3b       	cpi	r24, 0xB9	; 185
     19e:	e6 55       	subi	r30, 0x56	; 86
     1a0:	16 cf       	rjmp	.-468    	; 0xffffffce <__eeprom_end+0xff7effce>
     1a2:	fe e6       	ldi	r31, 0x6E	; 110
     1a4:	db 18       	sub	r13, r11
     1a6:	d1 84       	ldd	r13, Z+9	; 0x09
     1a8:	4b 38       	cpi	r20, 0x8B	; 139
     1aa:	1b f7       	brvc	.-58     	; 0x172 <__trampolines_end+0xa8>
     1ac:	7c 1d       	adc	r23, r12
     1ae:	90 1d       	adc	r25, r0
     1b0:	a4 bb       	out	0x14, r26	; 20
     1b2:	e4 24       	eor	r14, r4
     1b4:	20 32       	cpi	r18, 0x20	; 32
     1b6:	84 72       	andi	r24, 0x24	; 36
     1b8:	5e 22       	and	r5, r30
     1ba:	81 00       	.word	0x0081	; ????
     1bc:	c9 f1       	breq	.+114    	; 0x230 <_ZL11daysInMonth+0xa>
     1be:	24 ec       	ldi	r18, 0xC4	; 196
     1c0:	a1 e5       	ldi	r26, 0x51	; 81
     1c2:	3d 27       	eor	r19, r29

000001c4 <_ZZ5setupE3__c_0>:
     1c4:	52 54 43 20 63 68 69 70 20 44 53 33 32 33 31 4d     RTC chip DS3231M
     1d4:	20 69 6e 69 74 69 61 6c 69 7a 65 64 2e 00            initialized..

000001e2 <_ZZ5setupE3__c>:
     1e2:	55 6e 61 62 6c 65 20 74 6f 20 66 69 6e 64 20 44     Unable to find D
     1f2:	53 33 32 33 31 4d 4d 2e 20 43 68 65 63 6b 69 6e     S3231MM. Checkin
     202:	67 20 61 67 61 69 6e 20 69 6e 20 33 73 2e 00        g again in 3s..

00000211 <_ZZN13DS3231M_Class6adjustEvE3__c>:
     211:	53 65 70 20 31 37 20 32 30 32 30 00                 Sep 17 2020.

0000021d <_ZZN13DS3231M_Class6adjustEvE3__c_0>:
     21d:	31 31 3a 35 36 3a 35 35 00                          11:56:55.

00000226 <_ZL11daysInMonth>:
     226:	1f 1c 1f 1e 1f 1e 1f 1f 1e 1f 1e 1f                 ............

00000232 <digital_pin_to_timer_PGM>:
     232:	00 00 00 00 04 03 08 07 00 00 02 00 09 0a 00 00     ................
	...
     24e:	00 00 00 01                                         ....

00000252 <digital_pin_to_bit_mask_PGM>:
     252:	01 02 04 08 10 20 40 80 01 02 10 20 40 80 10 20     ..... @.... @.. 
     262:	40 80 10 08 20 04 40 80 01 02 04 08 01 02 04 08     @... .@.........

00000272 <digital_pin_to_port_PGM>:
     272:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 01 01     ................
     282:	01 01 03 03 03 03 03 03 01 01 01 01 03 03 02 02     ................

00000292 <port_to_input_PGM>:
     292:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

0000029c <port_to_output_PGM>:
     29c:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000002a6 <port_to_mode_PGM>:
     2a6:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000002b0 <__ctors_start>:
     2b0:	e6 10       	cpse	r14, r6
     2b2:	24 1b       	sub	r18, r20
     2b4:	7c 1b       	sub	r23, r28
     2b6:	74 1e       	adc	r7, r20
     2b8:	5b 20       	and	r5, r11
     2ba:	66 20       	and	r6, r6
     2bc:	38 22       	and	r3, r24
     2be:	08 26       	eor	r0, r24
     2c0:	97 2c       	mov	r9, r7
     2c2:	1a 2e       	mov	r1, r26

000002c4 <__ctors_end>:
     2c4:	b7 11       	cpse	r27, r7

000002c6 <__dtors_end>:
     2c6:	11 24       	eor	r1, r1
     2c8:	1f be       	out	0x3f, r1	; 63
     2ca:	cf ef       	ldi	r28, 0xFF	; 255
     2cc:	d0 e4       	ldi	r29, 0x40	; 64
     2ce:	de bf       	out	0x3e, r29	; 62
     2d0:	cd bf       	out	0x3d, r28	; 61

000002d2 <__do_copy_data>:
     2d2:	18 e0       	ldi	r17, 0x08	; 8
     2d4:	a0 e0       	ldi	r26, 0x00	; 0
     2d6:	b1 e0       	ldi	r27, 0x01	; 1
     2d8:	e8 eb       	ldi	r30, 0xB8	; 184
     2da:	f5 e7       	ldi	r31, 0x75	; 117
     2dc:	00 e0       	ldi	r16, 0x00	; 0
     2de:	0b bf       	out	0x3b, r16	; 59
     2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <__do_copy_data+0x14>
     2e2:	07 90       	elpm	r0, Z+
     2e4:	0d 92       	st	X+, r0
     2e6:	a6 3c       	cpi	r26, 0xC6	; 198
     2e8:	b1 07       	cpc	r27, r17
     2ea:	d9 f7       	brne	.-10     	; 0x2e2 <__do_copy_data+0x10>

000002ec <__do_clear_bss>:
     2ec:	2b e0       	ldi	r18, 0x0B	; 11
     2ee:	a6 ec       	ldi	r26, 0xC6	; 198
     2f0:	b8 e0       	ldi	r27, 0x08	; 8
     2f2:	01 c0       	rjmp	.+2      	; 0x2f6 <.do_clear_bss_start>

000002f4 <.do_clear_bss_loop>:
     2f4:	1d 92       	st	X+, r1

000002f6 <.do_clear_bss_start>:
     2f6:	ae 3c       	cpi	r26, 0xCE	; 206
     2f8:	b2 07       	cpc	r27, r18
     2fa:	e1 f7       	brne	.-8      	; 0x2f4 <.do_clear_bss_loop>

000002fc <__do_global_ctors>:
     2fc:	11 e0       	ldi	r17, 0x01	; 1
     2fe:	c2 e6       	ldi	r28, 0x62	; 98
     300:	d1 e0       	ldi	r29, 0x01	; 1
     302:	04 c0       	rjmp	.+8      	; 0x30c <__do_global_ctors+0x10>
     304:	21 97       	sbiw	r28, 0x01	; 1
     306:	fe 01       	movw	r30, r28
     308:	0e 94 99 35 	call	0x6b32	; 0x6b32 <__tablejump2__>
     30c:	c8 35       	cpi	r28, 0x58	; 88
     30e:	d1 07       	cpc	r29, r17
     310:	c9 f7       	brne	.-14     	; 0x304 <__do_global_ctors+0x8>
     312:	0e 94 a6 2e 	call	0x5d4c	; 0x5d4c <main>
     316:	0c 94 d0 3a 	jmp	0x75a0	; 0x75a0 <__do_global_dtors>

0000031a <__bad_interrupt>:
     31a:	72 ce       	rjmp	.-796    	; 0x0 <__vectors>

0000031c <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     31c:	80 e0       	ldi	r24, 0x00	; 0
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	08 95       	ret

00000322 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     322:	08 95       	ret

00000324 <_ZL11disable_ETHv>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     324:	44 9a       	sbi	0x08, 4	; 8
     326:	08 95       	ret

00000328 <_Z19InizializzaEthernetv>:
     328:	ef 92       	push	r14
     32a:	ff 92       	push	r15
     32c:	0f 93       	push	r16
     32e:	1f 93       	push	r17
     330:	cf 93       	push	r28
     332:	df 93       	push	r29
     334:	cd b7       	in	r28, 0x3d	; 61
     336:	de b7       	in	r29, 0x3e	; 62
     338:	68 97       	sbiw	r28, 0x18	; 24
     33a:	0f b6       	in	r0, 0x3f	; 63
     33c:	f8 94       	cli
     33e:	de bf       	out	0x3e, r29	; 62
     340:	0f be       	out	0x3f, r0	; 63
     342:	cd bf       	out	0x3d, r28	; 61
     344:	85 ea       	ldi	r24, 0xA5	; 165
     346:	98 e0       	ldi	r25, 0x08	; 8
     348:	9a 83       	std	Y+2, r25	; 0x02
     34a:	89 83       	std	Y+1, r24	; 0x01
     34c:	40 91 09 09 	lds	r20, 0x0909	; 0x800909 <subnet+0x2>
     350:	50 91 0a 09 	lds	r21, 0x090A	; 0x80090a <subnet+0x3>
     354:	60 91 0b 09 	lds	r22, 0x090B	; 0x80090b <subnet+0x4>
     358:	70 91 0c 09 	lds	r23, 0x090C	; 0x80090c <subnet+0x5>
     35c:	4b 83       	std	Y+3, r20	; 0x03
     35e:	5c 83       	std	Y+4, r21	; 0x04
     360:	6d 83       	std	Y+5, r22	; 0x05
     362:	7e 83       	std	Y+6, r23	; 0x06
     364:	98 87       	std	Y+8, r25	; 0x08
     366:	8f 83       	std	Y+7, r24	; 0x07
     368:	40 91 0f 09 	lds	r20, 0x090F	; 0x80090f <gateway+0x2>
     36c:	50 91 10 09 	lds	r21, 0x0910	; 0x800910 <gateway+0x3>
     370:	60 91 11 09 	lds	r22, 0x0911	; 0x800911 <gateway+0x4>
     374:	70 91 12 09 	lds	r23, 0x0912	; 0x800912 <gateway+0x5>
     378:	49 87       	std	Y+9, r20	; 0x09
     37a:	5a 87       	std	Y+10, r21	; 0x0a
     37c:	6b 87       	std	Y+11, r22	; 0x0b
     37e:	7c 87       	std	Y+12, r23	; 0x0c
     380:	9e 87       	std	Y+14, r25	; 0x0e
     382:	8d 87       	std	Y+13, r24	; 0x0d
     384:	40 91 15 09 	lds	r20, 0x0915	; 0x800915 <myDns+0x2>
     388:	50 91 16 09 	lds	r21, 0x0916	; 0x800916 <myDns+0x3>
     38c:	60 91 17 09 	lds	r22, 0x0917	; 0x800917 <myDns+0x4>
     390:	70 91 18 09 	lds	r23, 0x0918	; 0x800918 <myDns+0x5>
     394:	4f 87       	std	Y+15, r20	; 0x0f
     396:	58 8b       	std	Y+16, r21	; 0x10
     398:	69 8b       	std	Y+17, r22	; 0x11
     39a:	7a 8b       	std	Y+18, r23	; 0x12
     39c:	9c 8b       	std	Y+20, r25	; 0x14
     39e:	8b 8b       	std	Y+19, r24	; 0x13
     3a0:	80 91 1b 09 	lds	r24, 0x091B	; 0x80091b <ipCCEC+0x2>
     3a4:	90 91 1c 09 	lds	r25, 0x091C	; 0x80091c <ipCCEC+0x3>
     3a8:	a0 91 1d 09 	lds	r26, 0x091D	; 0x80091d <ipCCEC+0x4>
     3ac:	b0 91 1e 09 	lds	r27, 0x091E	; 0x80091e <ipCCEC+0x5>
     3b0:	8d 8b       	std	Y+21, r24	; 0x15
     3b2:	9e 8b       	std	Y+22, r25	; 0x16
     3b4:	af 8b       	std	Y+23, r26	; 0x17
     3b6:	b8 8f       	std	Y+24, r27	; 0x18
     3b8:	ce 01       	movw	r24, r28
     3ba:	01 96       	adiw	r24, 0x01	; 1
     3bc:	7c 01       	movw	r14, r24
     3be:	8e 01       	movw	r16, r28
     3c0:	09 5f       	subi	r16, 0xF9	; 249
     3c2:	1f 4f       	sbci	r17, 0xFF	; 255
     3c4:	9e 01       	movw	r18, r28
     3c6:	23 5f       	subi	r18, 0xF3	; 243
     3c8:	3f 4f       	sbci	r19, 0xFF	; 255
     3ca:	ae 01       	movw	r20, r28
     3cc:	4d 5e       	subi	r20, 0xED	; 237
     3ce:	5f 4f       	sbci	r21, 0xFF	; 255
     3d0:	66 e2       	ldi	r22, 0x26	; 38
     3d2:	71 e0       	ldi	r23, 0x01	; 1
     3d4:	81 e2       	ldi	r24, 0x21	; 33
     3d6:	9a e0       	ldi	r25, 0x0A	; 10
     3d8:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_>
     3dc:	68 96       	adiw	r28, 0x18	; 24
     3de:	0f b6       	in	r0, 0x3f	; 63
     3e0:	f8 94       	cli
     3e2:	de bf       	out	0x3e, r29	; 62
     3e4:	0f be       	out	0x3f, r0	; 63
     3e6:	cd bf       	out	0x3d, r28	; 61
     3e8:	df 91       	pop	r29
     3ea:	cf 91       	pop	r28
     3ec:	1f 91       	pop	r17
     3ee:	0f 91       	pop	r16
     3f0:	ff 90       	pop	r15
     3f2:	ef 90       	pop	r14
     3f4:	08 95       	ret

000003f6 <_Z11my_delay_msi>:
     3f6:	18 16       	cp	r1, r24
     3f8:	19 06       	cpc	r1, r25
     3fa:	44 f4       	brge	.+16     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     3fc:	ef e9       	ldi	r30, 0x9F	; 159
     3fe:	ff e0       	ldi	r31, 0x0F	; 15
     400:	31 97       	sbiw	r30, 0x01	; 1
     402:	f1 f7       	brne	.-4      	; 0x400 <__LOCK_REGION_LENGTH__>
     404:	00 c0       	rjmp	.+0      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     406:	00 00       	nop
     408:	01 97       	sbiw	r24, 0x01	; 1
     40a:	f5 cf       	rjmp	.-22     	; 0x3f6 <_Z11my_delay_msi>
     40c:	08 95       	ret

0000040e <_Z9printLinev>:
     40e:	cf 93       	push	r28
     410:	84 e2       	ldi	r24, 0x24	; 36
     412:	9b e0       	ldi	r25, 0x0B	; 11
     414:	0e 94 2b 2f 	call	0x5e56	; 0x5e56 <_ZN5Print7printlnEv>
     418:	cd e7       	ldi	r28, 0x7D	; 125
     41a:	61 e8       	ldi	r22, 0x81	; 129
     41c:	71 e0       	ldi	r23, 0x01	; 1
     41e:	84 e2       	ldi	r24, 0x24	; 36
     420:	9b e0       	ldi	r25, 0x0B	; 11
     422:	0e 94 23 2f 	call	0x5e46	; 0x5e46 <_ZN5Print5printEPKc>
     426:	c1 50       	subi	r28, 0x01	; 1
     428:	c1 f7       	brne	.-16     	; 0x41a <_Z9printLinev+0xc>
     42a:	84 e2       	ldi	r24, 0x24	; 36
     42c:	9b e0       	ldi	r25, 0x0B	; 11
     42e:	cf 91       	pop	r28
     430:	0c 94 2b 2f 	jmp	0x5e56	; 0x5e56 <_ZN5Print7printlnEv>

00000434 <_Z8printTabh>:
     434:	cf 93       	push	r28
     436:	df 93       	push	r29
     438:	d8 2f       	mov	r29, r24
     43a:	c0 e0       	ldi	r28, 0x00	; 0
     43c:	cd 17       	cp	r28, r29
     43e:	41 f0       	breq	.+16     	; 0x450 <_Z8printTabh+0x1c>
     440:	63 e8       	ldi	r22, 0x83	; 131
     442:	71 e0       	ldi	r23, 0x01	; 1
     444:	84 e2       	ldi	r24, 0x24	; 36
     446:	9b e0       	ldi	r25, 0x0B	; 11
     448:	0e 94 23 2f 	call	0x5e46	; 0x5e46 <_ZN5Print5printEPKc>
     44c:	cf 5f       	subi	r28, 0xFF	; 255
     44e:	f6 cf       	rjmp	.-20     	; 0x43c <_Z8printTabh+0x8>
     450:	df 91       	pop	r29
     452:	cf 91       	pop	r28
     454:	08 95       	ret

00000456 <_Z4passb>:
     456:	cf 93       	push	r28
     458:	c8 2f       	mov	r28, r24
     45a:	81 e0       	ldi	r24, 0x01	; 1
     45c:	eb df       	rcall	.-42     	; 0x434 <_Z8printTabh>
     45e:	65 e8       	ldi	r22, 0x85	; 133
     460:	71 e0       	ldi	r23, 0x01	; 1
     462:	84 e2       	ldi	r24, 0x24	; 36
     464:	9b e0       	ldi	r25, 0x0B	; 11
     466:	0e 94 23 2f 	call	0x5e46	; 0x5e46 <_ZN5Print5printEPKc>
     46a:	cc 23       	and	r28, r28
     46c:	19 f0       	breq	.+6      	; 0x474 <_Z4passb+0x1e>
     46e:	69 e8       	ldi	r22, 0x89	; 137
     470:	71 e0       	ldi	r23, 0x01	; 1
     472:	02 c0       	rjmp	.+4      	; 0x478 <_Z4passb+0x22>
     474:	6e e8       	ldi	r22, 0x8E	; 142
     476:	71 e0       	ldi	r23, 0x01	; 1
     478:	84 e2       	ldi	r24, 0x24	; 36
     47a:	9b e0       	ldi	r25, 0x0B	; 11
     47c:	0e 94 23 2f 	call	0x5e46	; 0x5e46 <_ZN5Print5printEPKc>
     480:	81 e0       	ldi	r24, 0x01	; 1
     482:	cf 91       	pop	r28
     484:	d7 cf       	rjmp	.-82     	; 0x434 <_Z8printTabh>

00000486 <_Z6Buzzerhm>:
     486:	cf 92       	push	r12
     488:	df 92       	push	r13
     48a:	ef 92       	push	r14
     48c:	ff 92       	push	r15
     48e:	0f 93       	push	r16
     490:	1f 93       	push	r17
     492:	cf 93       	push	r28
     494:	df 93       	push	r29
     496:	6a 01       	movw	r12, r20
     498:	7b 01       	movw	r14, r22
     49a:	c0 e0       	ldi	r28, 0x00	; 0
     49c:	d0 e0       	ldi	r29, 0x00	; 0
     49e:	08 2f       	mov	r16, r24
     4a0:	10 e0       	ldi	r17, 0x00	; 0
     4a2:	c0 17       	cp	r28, r16
     4a4:	d1 07       	cpc	r29, r17
     4a6:	24 f4       	brge	.+8      	; 0x4b0 <_Z6Buzzerhm+0x2a>
     4a8:	c6 01       	movw	r24, r12
     4aa:	a5 df       	rcall	.-182    	; 0x3f6 <_Z11my_delay_msi>
     4ac:	21 96       	adiw	r28, 0x01	; 1
     4ae:	f9 cf       	rjmp	.-14     	; 0x4a2 <_Z6Buzzerhm+0x1c>
     4b0:	df 91       	pop	r29
     4b2:	cf 91       	pop	r28
     4b4:	1f 91       	pop	r17
     4b6:	0f 91       	pop	r16
     4b8:	ff 90       	pop	r15
     4ba:	ef 90       	pop	r14
     4bc:	df 90       	pop	r13
     4be:	cf 90       	pop	r12
     4c0:	08 95       	ret

000004c2 <_Z13getCharKeypadi>:
     4c2:	82 32       	cpi	r24, 0x22	; 34
     4c4:	91 05       	cpc	r25, r1
     4c6:	09 f4       	brne	.+2      	; 0x4ca <_Z13getCharKeypadi+0x8>
     4c8:	9a c0       	rjmp	.+308    	; 0x5fe <_Z13getCharKeypadi+0x13c>
     4ca:	6c f5       	brge	.+90     	; 0x526 <_Z13getCharKeypadi+0x64>
     4cc:	8a 30       	cpi	r24, 0x0A	; 10
     4ce:	91 05       	cpc	r25, r1
     4d0:	09 f4       	brne	.+2      	; 0x4d4 <_Z13getCharKeypadi+0x12>
     4d2:	83 c0       	rjmp	.+262    	; 0x5da <_Z13getCharKeypadi+0x118>
     4d4:	a4 f4       	brge	.+40     	; 0x4fe <_Z13getCharKeypadi+0x3c>
     4d6:	86 30       	cpi	r24, 0x06	; 6
     4d8:	91 05       	cpc	r25, r1
     4da:	09 f4       	brne	.+2      	; 0x4de <_Z13getCharKeypadi+0x1c>
     4dc:	75 c0       	rjmp	.+234    	; 0x5c8 <_Z13getCharKeypadi+0x106>
     4de:	89 30       	cpi	r24, 0x09	; 9
     4e0:	91 05       	cpc	r25, r1
     4e2:	09 f4       	brne	.+2      	; 0x4e6 <_Z13getCharKeypadi+0x24>
     4e4:	5d c0       	rjmp	.+186    	; 0x5a0 <_Z13getCharKeypadi+0xde>
     4e6:	05 97       	sbiw	r24, 0x05	; 5
     4e8:	09 f0       	breq	.+2      	; 0x4ec <_Z13getCharKeypadi+0x2a>
     4ea:	cf c0       	rjmp	.+414    	; 0x68a <_Z13getCharKeypadi+0x1c8>
     4ec:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <MappaKeys>
     4f0:	84 e2       	ldi	r24, 0x24	; 36
     4f2:	9b e0       	ldi	r25, 0x0B	; 11
     4f4:	0e 94 24 2f 	call	0x5e48	; 0x5e48 <_ZN5Print5printEc>
     4f8:	20 e0       	ldi	r18, 0x00	; 0
     4fa:	30 e0       	ldi	r19, 0x00	; 0
     4fc:	59 c0       	rjmp	.+178    	; 0x5b0 <_Z13getCharKeypadi+0xee>
     4fe:	82 31       	cpi	r24, 0x12	; 18
     500:	91 05       	cpc	r25, r1
     502:	09 f4       	brne	.+2      	; 0x506 <_Z13getCharKeypadi+0x44>
     504:	73 c0       	rjmp	.+230    	; 0x5ec <_Z13getCharKeypadi+0x12a>
     506:	81 32       	cpi	r24, 0x21	; 33
     508:	91 05       	cpc	r25, r1
     50a:	09 f4       	brne	.+2      	; 0x50e <_Z13getCharKeypadi+0x4c>
     50c:	54 c0       	rjmp	.+168    	; 0x5b6 <_Z13getCharKeypadi+0xf4>
     50e:	41 97       	sbiw	r24, 0x11	; 17
     510:	09 f0       	breq	.+2      	; 0x514 <_Z13getCharKeypadi+0x52>
     512:	bb c0       	rjmp	.+374    	; 0x68a <_Z13getCharKeypadi+0x1c8>
     514:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <MappaKeys+0x2>
     518:	84 e2       	ldi	r24, 0x24	; 36
     51a:	9b e0       	ldi	r25, 0x0B	; 11
     51c:	0e 94 24 2f 	call	0x5e48	; 0x5e48 <_ZN5Print5printEc>
     520:	22 e0       	ldi	r18, 0x02	; 2
     522:	30 e0       	ldi	r19, 0x00	; 0
     524:	45 c0       	rjmp	.+138    	; 0x5b0 <_Z13getCharKeypadi+0xee>
     526:	80 36       	cpi	r24, 0x60	; 96
     528:	91 05       	cpc	r25, r1
     52a:	09 f4       	brne	.+2      	; 0x52e <_Z13getCharKeypadi+0x6c>
     52c:	99 c0       	rjmp	.+306    	; 0x660 <_Z13getCharKeypadi+0x19e>
     52e:	ac f4       	brge	.+42     	; 0x55a <_Z13getCharKeypadi+0x98>
     530:	88 34       	cpi	r24, 0x48	; 72
     532:	91 05       	cpc	r25, r1
     534:	09 f4       	brne	.+2      	; 0x538 <_Z13getCharKeypadi+0x76>
     536:	82 c0       	rjmp	.+260    	; 0x63c <_Z13getCharKeypadi+0x17a>
     538:	80 35       	cpi	r24, 0x50	; 80
     53a:	91 05       	cpc	r25, r1
     53c:	09 f4       	brne	.+2      	; 0x540 <_Z13getCharKeypadi+0x7e>
     53e:	87 c0       	rjmp	.+270    	; 0x64e <_Z13getCharKeypadi+0x18c>
     540:	84 34       	cpi	r24, 0x44	; 68
     542:	91 05       	cpc	r25, r1
     544:	09 f0       	breq	.+2      	; 0x548 <_Z13getCharKeypadi+0x86>
     546:	a1 c0       	rjmp	.+322    	; 0x68a <_Z13getCharKeypadi+0x1c8>
     548:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <MappaKeys+0xc>
     54c:	84 e2       	ldi	r24, 0x24	; 36
     54e:	9b e0       	ldi	r25, 0x0B	; 11
     550:	0e 94 24 2f 	call	0x5e48	; 0x5e48 <_ZN5Print5printEc>
     554:	20 e0       	ldi	r18, 0x00	; 0
     556:	30 e0       	ldi	r19, 0x00	; 0
     558:	8b c0       	rjmp	.+278    	; 0x670 <_Z13getCharKeypadi+0x1ae>
     55a:	88 38       	cpi	r24, 0x88	; 136
     55c:	91 05       	cpc	r25, r1
     55e:	09 f4       	brne	.+2      	; 0x562 <_Z13getCharKeypadi+0xa0>
     560:	59 c0       	rjmp	.+178    	; 0x614 <_Z13getCharKeypadi+0x152>
     562:	6c f4       	brge	.+26     	; 0x57e <_Z13getCharKeypadi+0xbc>
     564:	84 38       	cpi	r24, 0x84	; 132
     566:	91 05       	cpc	r25, r1
     568:	09 f0       	breq	.+2      	; 0x56c <_Z13getCharKeypadi+0xaa>
     56a:	8f c0       	rjmp	.+286    	; 0x68a <_Z13getCharKeypadi+0x1c8>
     56c:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <MappaKeys+0x8>
     570:	84 e2       	ldi	r24, 0x24	; 36
     572:	9b e0       	ldi	r25, 0x0B	; 11
     574:	0e 94 24 2f 	call	0x5e48	; 0x5e48 <_ZN5Print5printEc>
     578:	20 e0       	ldi	r18, 0x00	; 0
     57a:	30 e0       	ldi	r19, 0x00	; 0
     57c:	5c c0       	rjmp	.+184    	; 0x636 <_Z13getCharKeypadi+0x174>
     57e:	80 39       	cpi	r24, 0x90	; 144
     580:	91 05       	cpc	r25, r1
     582:	09 f4       	brne	.+2      	; 0x586 <_Z13getCharKeypadi+0xc4>
     584:	50 c0       	rjmp	.+160    	; 0x626 <_Z13getCharKeypadi+0x164>
     586:	80 3a       	cpi	r24, 0xA0	; 160
     588:	91 05       	cpc	r25, r1
     58a:	09 f0       	breq	.+2      	; 0x58e <_Z13getCharKeypadi+0xcc>
     58c:	7e c0       	rjmp	.+252    	; 0x68a <_Z13getCharKeypadi+0x1c8>
     58e:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <MappaKeys+0xb>
     592:	84 e2       	ldi	r24, 0x24	; 36
     594:	9b e0       	ldi	r25, 0x0B	; 11
     596:	0e 94 24 2f 	call	0x5e48	; 0x5e48 <_ZN5Print5printEc>
     59a:	23 e0       	ldi	r18, 0x03	; 3
     59c:	30 e0       	ldi	r19, 0x00	; 0
     59e:	4b c0       	rjmp	.+150    	; 0x636 <_Z13getCharKeypadi+0x174>
     5a0:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <MappaKeys+0x1>
     5a4:	84 e2       	ldi	r24, 0x24	; 36
     5a6:	9b e0       	ldi	r25, 0x0B	; 11
     5a8:	0e 94 24 2f 	call	0x5e48	; 0x5e48 <_ZN5Print5printEc>
     5ac:	21 e0       	ldi	r18, 0x01	; 1
     5ae:	30 e0       	ldi	r19, 0x00	; 0
     5b0:	80 e0       	ldi	r24, 0x00	; 0
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	5f c0       	rjmp	.+190    	; 0x674 <_Z13getCharKeypadi+0x1b2>
     5b6:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <MappaKeys+0x3>
     5ba:	84 e2       	ldi	r24, 0x24	; 36
     5bc:	9b e0       	ldi	r25, 0x0B	; 11
     5be:	0e 94 24 2f 	call	0x5e48	; 0x5e48 <_ZN5Print5printEc>
     5c2:	23 e0       	ldi	r18, 0x03	; 3
     5c4:	30 e0       	ldi	r19, 0x00	; 0
     5c6:	f4 cf       	rjmp	.-24     	; 0x5b0 <_Z13getCharKeypadi+0xee>
     5c8:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <MappaKeys+0x4>
     5cc:	84 e2       	ldi	r24, 0x24	; 36
     5ce:	9b e0       	ldi	r25, 0x0B	; 11
     5d0:	0e 94 24 2f 	call	0x5e48	; 0x5e48 <_ZN5Print5printEc>
     5d4:	20 e0       	ldi	r18, 0x00	; 0
     5d6:	30 e0       	ldi	r19, 0x00	; 0
     5d8:	1a c0       	rjmp	.+52     	; 0x60e <_Z13getCharKeypadi+0x14c>
     5da:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <MappaKeys+0x5>
     5de:	84 e2       	ldi	r24, 0x24	; 36
     5e0:	9b e0       	ldi	r25, 0x0B	; 11
     5e2:	0e 94 24 2f 	call	0x5e48	; 0x5e48 <_ZN5Print5printEc>
     5e6:	21 e0       	ldi	r18, 0x01	; 1
     5e8:	30 e0       	ldi	r19, 0x00	; 0
     5ea:	11 c0       	rjmp	.+34     	; 0x60e <_Z13getCharKeypadi+0x14c>
     5ec:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <MappaKeys+0x6>
     5f0:	84 e2       	ldi	r24, 0x24	; 36
     5f2:	9b e0       	ldi	r25, 0x0B	; 11
     5f4:	0e 94 24 2f 	call	0x5e48	; 0x5e48 <_ZN5Print5printEc>
     5f8:	22 e0       	ldi	r18, 0x02	; 2
     5fa:	30 e0       	ldi	r19, 0x00	; 0
     5fc:	08 c0       	rjmp	.+16     	; 0x60e <_Z13getCharKeypadi+0x14c>
     5fe:	60 91 0d 01 	lds	r22, 0x010D	; 0x80010d <MappaKeys+0x7>
     602:	84 e2       	ldi	r24, 0x24	; 36
     604:	9b e0       	ldi	r25, 0x0B	; 11
     606:	0e 94 24 2f 	call	0x5e48	; 0x5e48 <_ZN5Print5printEc>
     60a:	23 e0       	ldi	r18, 0x03	; 3
     60c:	30 e0       	ldi	r19, 0x00	; 0
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	30 c0       	rjmp	.+96     	; 0x674 <_Z13getCharKeypadi+0x1b2>
     614:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <MappaKeys+0x9>
     618:	84 e2       	ldi	r24, 0x24	; 36
     61a:	9b e0       	ldi	r25, 0x0B	; 11
     61c:	0e 94 24 2f 	call	0x5e48	; 0x5e48 <_ZN5Print5printEc>
     620:	21 e0       	ldi	r18, 0x01	; 1
     622:	30 e0       	ldi	r19, 0x00	; 0
     624:	08 c0       	rjmp	.+16     	; 0x636 <_Z13getCharKeypadi+0x174>
     626:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <MappaKeys+0xa>
     62a:	84 e2       	ldi	r24, 0x24	; 36
     62c:	9b e0       	ldi	r25, 0x0B	; 11
     62e:	0e 94 24 2f 	call	0x5e48	; 0x5e48 <_ZN5Print5printEc>
     632:	22 e0       	ldi	r18, 0x02	; 2
     634:	30 e0       	ldi	r19, 0x00	; 0
     636:	82 e0       	ldi	r24, 0x02	; 2
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	1c c0       	rjmp	.+56     	; 0x674 <_Z13getCharKeypadi+0x1b2>
     63c:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <MappaKeys+0xd>
     640:	84 e2       	ldi	r24, 0x24	; 36
     642:	9b e0       	ldi	r25, 0x0B	; 11
     644:	0e 94 24 2f 	call	0x5e48	; 0x5e48 <_ZN5Print5printEc>
     648:	21 e0       	ldi	r18, 0x01	; 1
     64a:	30 e0       	ldi	r19, 0x00	; 0
     64c:	11 c0       	rjmp	.+34     	; 0x670 <_Z13getCharKeypadi+0x1ae>
     64e:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <MappaKeys+0xe>
     652:	84 e2       	ldi	r24, 0x24	; 36
     654:	9b e0       	ldi	r25, 0x0B	; 11
     656:	0e 94 24 2f 	call	0x5e48	; 0x5e48 <_ZN5Print5printEc>
     65a:	22 e0       	ldi	r18, 0x02	; 2
     65c:	30 e0       	ldi	r19, 0x00	; 0
     65e:	08 c0       	rjmp	.+16     	; 0x670 <_Z13getCharKeypadi+0x1ae>
     660:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <MappaKeys+0xf>
     664:	84 e2       	ldi	r24, 0x24	; 36
     666:	9b e0       	ldi	r25, 0x0B	; 11
     668:	0e 94 24 2f 	call	0x5e48	; 0x5e48 <_ZN5Print5printEc>
     66c:	23 e0       	ldi	r18, 0x03	; 3
     66e:	30 e0       	ldi	r19, 0x00	; 0
     670:	83 e0       	ldi	r24, 0x03	; 3
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	88 0f       	add	r24, r24
     676:	99 1f       	adc	r25, r25
     678:	88 0f       	add	r24, r24
     67a:	99 1f       	adc	r25, r25
     67c:	8a 5f       	subi	r24, 0xFA	; 250
     67e:	9e 4f       	sbci	r25, 0xFE	; 254
     680:	fc 01       	movw	r30, r24
     682:	e2 0f       	add	r30, r18
     684:	f3 1f       	adc	r31, r19
     686:	80 81       	ld	r24, Z
     688:	08 95       	ret
     68a:	8e e4       	ldi	r24, 0x4E	; 78
     68c:	08 95       	ret

0000068e <_Z10displayLCDP6Stringii>:
     68e:	cf 92       	push	r12
     690:	df 92       	push	r13
     692:	ef 92       	push	r14
     694:	ff 92       	push	r15
     696:	0f 93       	push	r16
     698:	1f 93       	push	r17
     69a:	cf 93       	push	r28
     69c:	df 93       	push	r29
     69e:	cd b7       	in	r28, 0x3d	; 61
     6a0:	de b7       	in	r29, 0x3e	; 62
     6a2:	2c 97       	sbiw	r28, 0x0c	; 12
     6a4:	0f b6       	in	r0, 0x3f	; 63
     6a6:	f8 94       	cli
     6a8:	de bf       	out	0x3e, r29	; 62
     6aa:	0f be       	out	0x3f, r0	; 63
     6ac:	cd bf       	out	0x3d, r28	; 61
     6ae:	8c 01       	movw	r16, r24
     6b0:	6b 01       	movw	r12, r22
     6b2:	7a 01       	movw	r14, r20
     6b4:	8c e9       	ldi	r24, 0x9C	; 156
     6b6:	99 e0       	ldi	r25, 0x09	; 9
     6b8:	0e 94 93 26 	call	0x4d26	; 0x4d26 <_ZN3LCD5clearEv>
     6bc:	82 e0       	ldi	r24, 0x02	; 2
     6be:	c8 16       	cp	r12, r24
     6c0:	d1 04       	cpc	r13, r1
     6c2:	0c f4       	brge	.+2      	; 0x6c6 <_Z10displayLCDP6Stringii+0x38>
     6c4:	47 c0       	rjmp	.+142    	; 0x754 <_Z10displayLCDP6Stringii+0xc6>
     6c6:	40 91 d9 08 	lds	r20, 0x08D9	; 0x8008d9 <UltimoPassaggioStato>
     6ca:	50 91 da 08 	lds	r21, 0x08DA	; 0x8008da <UltimoPassaggioStato+0x1>
     6ce:	60 91 db 08 	lds	r22, 0x08DB	; 0x8008db <UltimoPassaggioStato+0x2>
     6d2:	70 91 dc 08 	lds	r23, 0x08DC	; 0x8008dc <UltimoPassaggioStato+0x3>
     6d6:	80 91 d5 08 	lds	r24, 0x08D5	; 0x8008d5 <Timer>
     6da:	90 91 d6 08 	lds	r25, 0x08D6	; 0x8008d6 <Timer+0x1>
     6de:	a0 91 d7 08 	lds	r26, 0x08D7	; 0x8008d7 <Timer+0x2>
     6e2:	b0 91 d8 08 	lds	r27, 0x08D8	; 0x8008d8 <Timer+0x3>
     6e6:	48 0f       	add	r20, r24
     6e8:	59 1f       	adc	r21, r25
     6ea:	6a 1f       	adc	r22, r26
     6ec:	7b 1f       	adc	r23, r27
     6ee:	41 50       	subi	r20, 0x01	; 1
     6f0:	51 09       	sbc	r21, r1
     6f2:	61 09       	sbc	r22, r1
     6f4:	71 09       	sbc	r23, r1
     6f6:	80 91 dd 08 	lds	r24, 0x08DD	; 0x8008dd <secs>
     6fa:	90 91 de 08 	lds	r25, 0x08DE	; 0x8008de <secs+0x1>
     6fe:	a0 91 df 08 	lds	r26, 0x08DF	; 0x8008df <secs+0x2>
     702:	b0 91 e0 08 	lds	r27, 0x08E0	; 0x8008e0 <secs+0x3>
     706:	48 1b       	sub	r20, r24
     708:	59 0b       	sbc	r21, r25
     70a:	6a 0b       	sbc	r22, r26
     70c:	7b 0b       	sbc	r23, r27
     70e:	2a e0       	ldi	r18, 0x0A	; 10
     710:	ce 01       	movw	r24, r28
     712:	07 96       	adiw	r24, 0x07	; 7
     714:	0e 94 e4 32 	call	0x65c8	; 0x65c8 <_ZN6StringC1Emh>
     718:	63 e9       	ldi	r22, 0x93	; 147
     71a:	71 e0       	ldi	r23, 0x01	; 1
     71c:	ce 01       	movw	r24, r28
     71e:	01 96       	adiw	r24, 0x01	; 1
     720:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <_ZN6StringC1EPKc>
     724:	be 01       	movw	r22, r28
     726:	69 5f       	subi	r22, 0xF9	; 249
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	ce 01       	movw	r24, r28
     72c:	01 96       	adiw	r24, 0x01	; 1
     72e:	0e 94 8f 33 	call	0x671e	; 0x671e <_ZplRK15StringSumHelperRK6String>
     732:	6b e9       	ldi	r22, 0x9B	; 155
     734:	71 e0       	ldi	r23, 0x01	; 1
     736:	0e 94 a0 33 	call	0x6740	; 0x6740 <_ZplRK15StringSumHelperPKc>
     73a:	bc 01       	movw	r22, r24
     73c:	8c e9       	ldi	r24, 0x9C	; 156
     73e:	99 e0       	ldi	r25, 0x09	; 9
     740:	0e 94 15 2f 	call	0x5e2a	; 0x5e2a <_ZN5Print5printERK6String>
     744:	ce 01       	movw	r24, r28
     746:	01 96       	adiw	r24, 0x01	; 1
     748:	0e 94 7d 31 	call	0x62fa	; 0x62fa <_ZN6StringD1Ev>
     74c:	ce 01       	movw	r24, r28
     74e:	07 96       	adiw	r24, 0x07	; 7
     750:	0e 94 7d 31 	call	0x62fa	; 0x62fa <_ZN6StringD1Ev>
     754:	61 e0       	ldi	r22, 0x01	; 1
     756:	8c e9       	ldi	r24, 0x9C	; 156
     758:	99 e0       	ldi	r25, 0x09	; 9
     75a:	0e 94 24 2f 	call	0x5e48	; 0x5e48 <_ZN5Print5printEc>
     75e:	41 e0       	ldi	r20, 0x01	; 1
     760:	60 e0       	ldi	r22, 0x00	; 0
     762:	8c e9       	ldi	r24, 0x9C	; 156
     764:	99 e0       	ldi	r25, 0x09	; 9
     766:	0e 94 99 26 	call	0x4d32	; 0x4d32 <_ZN3LCD9setCursorEhh>
     76a:	b8 01       	movw	r22, r16
     76c:	6a 5f       	subi	r22, 0xFA	; 250
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	8c e9       	ldi	r24, 0x9C	; 156
     772:	99 e0       	ldi	r25, 0x09	; 9
     774:	0e 94 15 2f 	call	0x5e2a	; 0x5e2a <_ZN5Print5printERK6String>
     778:	42 e0       	ldi	r20, 0x02	; 2
     77a:	60 e0       	ldi	r22, 0x00	; 0
     77c:	8c e9       	ldi	r24, 0x9C	; 156
     77e:	99 e0       	ldi	r25, 0x09	; 9
     780:	0e 94 99 26 	call	0x4d32	; 0x4d32 <_ZN3LCD9setCursorEhh>
     784:	b8 01       	movw	r22, r16
     786:	64 5f       	subi	r22, 0xF4	; 244
     788:	7f 4f       	sbci	r23, 0xFF	; 255
     78a:	8c e9       	ldi	r24, 0x9C	; 156
     78c:	99 e0       	ldi	r25, 0x09	; 9
     78e:	0e 94 15 2f 	call	0x5e2a	; 0x5e2a <_ZN5Print5printERK6String>
     792:	43 e0       	ldi	r20, 0x03	; 3
     794:	60 e0       	ldi	r22, 0x00	; 0
     796:	8c e9       	ldi	r24, 0x9C	; 156
     798:	99 e0       	ldi	r25, 0x09	; 9
     79a:	0e 94 99 26 	call	0x4d32	; 0x4d32 <_ZN3LCD9setCursorEhh>
     79e:	b8 01       	movw	r22, r16
     7a0:	6e 5e       	subi	r22, 0xEE	; 238
     7a2:	7f 4f       	sbci	r23, 0xFF	; 255
     7a4:	8c e9       	ldi	r24, 0x9C	; 156
     7a6:	99 e0       	ldi	r25, 0x09	; 9
     7a8:	0e 94 15 2f 	call	0x5e2a	; 0x5e2a <_ZN5Print5printERK6String>
     7ac:	c7 01       	movw	r24, r14
     7ae:	23 de       	rcall	.-954    	; 0x3f6 <_Z11my_delay_msi>
     7b0:	2c 96       	adiw	r28, 0x0c	; 12
     7b2:	0f b6       	in	r0, 0x3f	; 63
     7b4:	f8 94       	cli
     7b6:	de bf       	out	0x3e, r29	; 62
     7b8:	0f be       	out	0x3f, r0	; 63
     7ba:	cd bf       	out	0x3d, r28	; 61
     7bc:	df 91       	pop	r29
     7be:	cf 91       	pop	r28
     7c0:	1f 91       	pop	r17
     7c2:	0f 91       	pop	r16
     7c4:	ff 90       	pop	r15
     7c6:	ef 90       	pop	r14
     7c8:	df 90       	pop	r13
     7ca:	cf 90       	pop	r12
     7cc:	08 95       	ret

000007ce <_Z11avanzaStatom>:
     7ce:	60 93 d5 08 	sts	0x08D5, r22	; 0x8008d5 <Timer>
     7d2:	70 93 d6 08 	sts	0x08D6, r23	; 0x8008d6 <Timer+0x1>
     7d6:	80 93 d7 08 	sts	0x08D7, r24	; 0x8008d7 <Timer+0x2>
     7da:	90 93 d8 08 	sts	0x08D8, r25	; 0x8008d8 <Timer+0x3>
     7de:	8f ec       	ldi	r24, 0xCF	; 207
     7e0:	98 e0       	ldi	r25, 0x08	; 8
     7e2:	0e 94 26 19 	call	0x324c	; 0x324c <_ZNK8DateTime11secondstimeEv>
     7e6:	60 93 d9 08 	sts	0x08D9, r22	; 0x8008d9 <UltimoPassaggioStato>
     7ea:	70 93 da 08 	sts	0x08DA, r23	; 0x8008da <UltimoPassaggioStato+0x1>
     7ee:	80 93 db 08 	sts	0x08DB, r24	; 0x8008db <UltimoPassaggioStato+0x2>
     7f2:	90 93 dc 08 	sts	0x08DC, r25	; 0x8008dc <UltimoPassaggioStato+0x3>
     7f6:	80 91 75 09 	lds	r24, 0x0975	; 0x800975 <stato_procedura>
     7fa:	90 91 76 09 	lds	r25, 0x0976	; 0x800976 <stato_procedura+0x1>
     7fe:	01 96       	adiw	r24, 0x01	; 1
     800:	90 93 76 09 	sts	0x0976, r25	; 0x800976 <stato_procedura+0x1>
     804:	80 93 75 09 	sts	0x0975, r24	; 0x800975 <stato_procedura>
     808:	08 95       	ret

0000080a <_Z14leggiTAG_Mezzob>:
     80a:	af 92       	push	r10
     80c:	bf 92       	push	r11
     80e:	cf 92       	push	r12
     810:	df 92       	push	r13
     812:	ef 92       	push	r14
     814:	ff 92       	push	r15
     816:	0f 93       	push	r16
     818:	1f 93       	push	r17
     81a:	cf 93       	push	r28
     81c:	df 93       	push	r29
     81e:	cd b7       	in	r28, 0x3d	; 61
     820:	de b7       	in	r29, 0x3e	; 62
     822:	a2 97       	sbiw	r28, 0x22	; 34
     824:	0f b6       	in	r0, 0x3f	; 63
     826:	f8 94       	cli
     828:	de bf       	out	0x3e, r29	; 62
     82a:	0f be       	out	0x3f, r0	; 63
     82c:	cd bf       	out	0x3d, r28	; 61
     82e:	5c 01       	movw	r10, r24
     830:	f6 2e       	mov	r15, r22
     832:	64 e8       	ldi	r22, 0x84	; 132
     834:	71 e0       	ldi	r23, 0x01	; 1
     836:	ce 01       	movw	r24, r28
     838:	4d 96       	adiw	r24, 0x1d	; 29
     83a:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <_ZN6StringC1EPKc>
     83e:	08 ec       	ldi	r16, 0xC8	; 200
     840:	10 e0       	ldi	r17, 0x00	; 0
     842:	2c eb       	ldi	r18, 0xBC	; 188
     844:	39 e0       	ldi	r19, 0x09	; 9
     846:	45 eb       	ldi	r20, 0xB5	; 181
     848:	59 e0       	ldi	r21, 0x09	; 9
     84a:	60 e0       	ldi	r22, 0x00	; 0
     84c:	85 e8       	ldi	r24, 0x85	; 133
     84e:	99 e0       	ldi	r25, 0x09	; 9
     850:	0e 94 99 16 	call	0x2d32	; 0x2d32 <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j>
     854:	80 93 bd 09 	sts	0x09BD, r24	; 0x8009bd <success>
     858:	88 23       	and	r24, r24
     85a:	09 f4       	brne	.+2      	; 0x85e <_Z14leggiTAG_Mezzob+0x54>
     85c:	9d c0       	rjmp	.+314    	; 0x998 <_Z14leggiTAG_Mezzob+0x18e>
     85e:	4e e1       	ldi	r20, 0x1E	; 30
     860:	50 e0       	ldi	r21, 0x00	; 0
     862:	60 e0       	ldi	r22, 0x00	; 0
     864:	70 e0       	ldi	r23, 0x00	; 0
     866:	82 e0       	ldi	r24, 0x02	; 2
     868:	0e de       	rcall	.-996    	; 0x486 <_Z6Buzzerhm>
     86a:	80 91 bc 09 	lds	r24, 0x09BC	; 0x8009bc <uidLength>
     86e:	84 30       	cpi	r24, 0x04	; 4
     870:	09 f0       	breq	.+2      	; 0x874 <_Z14leggiTAG_Mezzob+0x6a>
     872:	8c c0       	rjmp	.+280    	; 0x98c <_Z14leggiTAG_Mezzob+0x182>
     874:	86 e0       	ldi	r24, 0x06	; 6
     876:	e3 e7       	ldi	r30, 0x73	; 115
     878:	f1 e0       	ldi	r31, 0x01	; 1
     87a:	de 01       	movw	r26, r28
     87c:	57 96       	adiw	r26, 0x17	; 23
     87e:	01 90       	ld	r0, Z+
     880:	0d 92       	st	X+, r0
     882:	8a 95       	dec	r24
     884:	e1 f7       	brne	.-8      	; 0x87e <_Z14leggiTAG_Mezzob+0x74>
     886:	ce 01       	movw	r24, r28
     888:	47 96       	adiw	r24, 0x17	; 23
     88a:	6c 01       	movw	r12, r24
     88c:	e1 2c       	mov	r14, r1
     88e:	04 e0       	ldi	r16, 0x04	; 4
     890:	10 e0       	ldi	r17, 0x00	; 0
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	44 e0       	ldi	r20, 0x04	; 4
     898:	65 eb       	ldi	r22, 0xB5	; 181
     89a:	79 e0       	ldi	r23, 0x09	; 9
     89c:	85 e8       	ldi	r24, 0x85	; 133
     89e:	99 e0       	ldi	r25, 0x09	; 9
     8a0:	0e 94 ed 16 	call	0x2dda	; 0x2dda <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_>
     8a4:	80 93 bd 09 	sts	0x09BD, r24	; 0x8009bd <success>
     8a8:	88 23       	and	r24, r24
     8aa:	09 f4       	brne	.+2      	; 0x8ae <_Z14leggiTAG_Mezzob+0xa4>
     8ac:	5f c0       	rjmp	.+190    	; 0x96c <_Z14leggiTAG_Mezzob+0x162>
     8ae:	ff 20       	and	r15, r15
     8b0:	99 f0       	breq	.+38     	; 0x8d8 <_Z14leggiTAG_Mezzob+0xce>
     8b2:	80 e1       	ldi	r24, 0x10	; 16
     8b4:	e4 e0       	ldi	r30, 0x04	; 4
     8b6:	f8 e0       	ldi	r31, 0x08	; 8
     8b8:	de 01       	movw	r26, r28
     8ba:	11 96       	adiw	r26, 0x01	; 1
     8bc:	01 90       	ld	r0, Z+
     8be:	0d 92       	st	X+, r0
     8c0:	8a 95       	dec	r24
     8c2:	e1 f7       	brne	.-8      	; 0x8bc <_Z14leggiTAG_Mezzob+0xb2>
     8c4:	ae 01       	movw	r20, r28
     8c6:	4f 5f       	subi	r20, 0xFF	; 255
     8c8:	5f 4f       	sbci	r21, 0xFF	; 255
     8ca:	64 e0       	ldi	r22, 0x04	; 4
     8cc:	85 e8       	ldi	r24, 0x85	; 133
     8ce:	99 e0       	ldi	r25, 0x09	; 9
     8d0:	0e 94 80 17 	call	0x2f00	; 0x2f00 <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh>
     8d4:	80 93 bd 09 	sts	0x09BD, r24	; 0x8009bd <success>
     8d8:	ae 01       	movw	r20, r28
     8da:	4f 5f       	subi	r20, 0xFF	; 255
     8dc:	5f 4f       	sbci	r21, 0xFF	; 255
     8de:	64 e0       	ldi	r22, 0x04	; 4
     8e0:	85 e8       	ldi	r24, 0x85	; 133
     8e2:	99 e0       	ldi	r25, 0x09	; 9
     8e4:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh>
     8e8:	80 93 bd 09 	sts	0x09BD, r24	; 0x8009bd <success>
     8ec:	88 23       	and	r24, r24
     8ee:	89 f1       	breq	.+98     	; 0x952 <_Z14leggiTAG_Mezzob+0x148>
     8f0:	61 ea       	ldi	r22, 0xA1	; 161
     8f2:	71 e0       	ldi	r23, 0x01	; 1
     8f4:	84 e2       	ldi	r24, 0x24	; 36
     8f6:	9b e0       	ldi	r25, 0x0B	; 11
     8f8:	0e 94 4e 2f 	call	0x5e9c	; 0x5e9c <_ZN5Print7printlnEPKc>
     8fc:	be 01       	movw	r22, r28
     8fe:	6f 5f       	subi	r22, 0xFF	; 255
     900:	7f 4f       	sbci	r23, 0xFF	; 255
     902:	ce 01       	movw	r24, r28
     904:	41 96       	adiw	r24, 0x11	; 17
     906:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <_ZN6StringC1EPKc>
     90a:	be 01       	movw	r22, r28
     90c:	6f 5e       	subi	r22, 0xEF	; 239
     90e:	7f 4f       	sbci	r23, 0xFF	; 255
     910:	84 e2       	ldi	r24, 0x24	; 36
     912:	9b e0       	ldi	r25, 0x0B	; 11
     914:	0e 94 3e 2f 	call	0x5e7c	; 0x5e7c <_ZN5Print7printlnERK6String>
     918:	8d 89       	ldd	r24, Y+21	; 0x15
     91a:	9e 89       	ldd	r25, Y+22	; 0x16
     91c:	06 97       	sbiw	r24, 0x06	; 6
     91e:	59 f4       	brne	.+22     	; 0x936 <_Z14leggiTAG_Mezzob+0x12c>
     920:	be 01       	movw	r22, r28
     922:	6f 5e       	subi	r22, 0xEF	; 239
     924:	7f 4f       	sbci	r23, 0xFF	; 255
     926:	c5 01       	movw	r24, r10
     928:	0e 94 33 32 	call	0x6466	; 0x6466 <_ZN6StringC1EOS_>
     92c:	ce 01       	movw	r24, r28
     92e:	41 96       	adiw	r24, 0x11	; 17
     930:	0e 94 7d 31 	call	0x62fa	; 0x62fa <_ZN6StringD1Ev>
     934:	37 c0       	rjmp	.+110    	; 0x9a4 <_Z14leggiTAG_Mezzob+0x19a>
     936:	9f ef       	ldi	r25, 0xFF	; 255
     938:	21 ee       	ldi	r18, 0xE1	; 225
     93a:	84 e0       	ldi	r24, 0x04	; 4
     93c:	91 50       	subi	r25, 0x01	; 1
     93e:	20 40       	sbci	r18, 0x00	; 0
     940:	80 40       	sbci	r24, 0x00	; 0
     942:	e1 f7       	brne	.-8      	; 0x93c <_Z14leggiTAG_Mezzob+0x132>
     944:	00 c0       	rjmp	.+0      	; 0x946 <_Z14leggiTAG_Mezzob+0x13c>
     946:	00 00       	nop
     948:	ce 01       	movw	r24, r28
     94a:	41 96       	adiw	r24, 0x11	; 17
     94c:	0e 94 7d 31 	call	0x62fa	; 0x62fa <_ZN6StringD1Ev>
     950:	1d c0       	rjmp	.+58     	; 0x98c <_Z14leggiTAG_Mezzob+0x182>
     952:	8c e9       	ldi	r24, 0x9C	; 156
     954:	99 e0       	ldi	r25, 0x09	; 9
     956:	0e 94 93 26 	call	0x4d26	; 0x4d26 <_ZN3LCD5clearEv>
     95a:	41 e0       	ldi	r20, 0x01	; 1
     95c:	60 e0       	ldi	r22, 0x00	; 0
     95e:	8c e9       	ldi	r24, 0x9C	; 156
     960:	99 e0       	ldi	r25, 0x09	; 9
     962:	0e 94 99 26 	call	0x4d32	; 0x4d32 <_ZN3LCD9setCursorEhh>
     966:	6f ea       	ldi	r22, 0xAF	; 175
     968:	71 e0       	ldi	r23, 0x01	; 1
     96a:	0c c0       	rjmp	.+24     	; 0x984 <_Z14leggiTAG_Mezzob+0x17a>
     96c:	8c e9       	ldi	r24, 0x9C	; 156
     96e:	99 e0       	ldi	r25, 0x09	; 9
     970:	0e 94 93 26 	call	0x4d26	; 0x4d26 <_ZN3LCD5clearEv>
     974:	41 e0       	ldi	r20, 0x01	; 1
     976:	60 e0       	ldi	r22, 0x00	; 0
     978:	8c e9       	ldi	r24, 0x9C	; 156
     97a:	99 e0       	ldi	r25, 0x09	; 9
     97c:	0e 94 99 26 	call	0x4d32	; 0x4d32 <_ZN3LCD9setCursorEhh>
     980:	69 eb       	ldi	r22, 0xB9	; 185
     982:	71 e0       	ldi	r23, 0x01	; 1
     984:	8c e9       	ldi	r24, 0x9C	; 156
     986:	99 e0       	ldi	r25, 0x09	; 9
     988:	0e 94 23 2f 	call	0x5e46	; 0x5e46 <_ZN5Print5printEPKc>
     98c:	64 e8       	ldi	r22, 0x84	; 132
     98e:	71 e0       	ldi	r23, 0x01	; 1
     990:	84 e2       	ldi	r24, 0x24	; 36
     992:	9b e0       	ldi	r25, 0x0B	; 11
     994:	0e 94 4e 2f 	call	0x5e9c	; 0x5e9c <_ZN5Print7printlnEPKc>
     998:	be 01       	movw	r22, r28
     99a:	63 5e       	subi	r22, 0xE3	; 227
     99c:	7f 4f       	sbci	r23, 0xFF	; 255
     99e:	c5 01       	movw	r24, r10
     9a0:	0e 94 33 32 	call	0x6466	; 0x6466 <_ZN6StringC1EOS_>
     9a4:	ce 01       	movw	r24, r28
     9a6:	4d 96       	adiw	r24, 0x1d	; 29
     9a8:	0e 94 7d 31 	call	0x62fa	; 0x62fa <_ZN6StringD1Ev>
     9ac:	c5 01       	movw	r24, r10
     9ae:	a2 96       	adiw	r28, 0x22	; 34
     9b0:	0f b6       	in	r0, 0x3f	; 63
     9b2:	f8 94       	cli
     9b4:	de bf       	out	0x3e, r29	; 62
     9b6:	0f be       	out	0x3f, r0	; 63
     9b8:	cd bf       	out	0x3d, r28	; 61
     9ba:	df 91       	pop	r29
     9bc:	cf 91       	pop	r28
     9be:	1f 91       	pop	r17
     9c0:	0f 91       	pop	r16
     9c2:	ff 90       	pop	r15
     9c4:	ef 90       	pop	r14
     9c6:	df 90       	pop	r13
     9c8:	cf 90       	pop	r12
     9ca:	bf 90       	pop	r11
     9cc:	af 90       	pop	r10
     9ce:	08 95       	ret

000009d0 <_Z14GetCodeRfidATev>:
     9d0:	cf 92       	push	r12
     9d2:	df 92       	push	r13
     9d4:	ef 92       	push	r14
     9d6:	ff 92       	push	r15
     9d8:	0f 93       	push	r16
     9da:	1f 93       	push	r17
     9dc:	cf 93       	push	r28
     9de:	df 93       	push	r29
     9e0:	cd b7       	in	r28, 0x3d	; 61
     9e2:	de b7       	in	r29, 0x3e	; 62
     9e4:	64 97       	sbiw	r28, 0x14	; 20
     9e6:	0f b6       	in	r0, 0x3f	; 63
     9e8:	f8 94       	cli
     9ea:	de bf       	out	0x3e, r29	; 62
     9ec:	0f be       	out	0x3f, r0	; 63
     9ee:	cd bf       	out	0x3d, r28	; 61
     9f0:	7c 01       	movw	r14, r24
     9f2:	ce 01       	movw	r24, r28
     9f4:	01 96       	adiw	r24, 0x01	; 1
     9f6:	6c 01       	movw	r12, r24
     9f8:	87 e0       	ldi	r24, 0x07	; 7
     9fa:	f6 01       	movw	r30, r12
     9fc:	11 92       	st	Z+, r1
     9fe:	8a 95       	dec	r24
     a00:	e9 f7       	brne	.-6      	; 0x9fc <_Z14GetCodeRfidATev+0x2c>
     a02:	61 ec       	ldi	r22, 0xC1	; 193
     a04:	71 e0       	ldi	r23, 0x01	; 1
     a06:	c7 01       	movw	r24, r14
     a08:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <_ZN6StringC1EPKc>
     a0c:	00 e0       	ldi	r16, 0x00	; 0
     a0e:	10 e0       	ldi	r17, 0x00	; 0
     a10:	9e 01       	movw	r18, r28
     a12:	2c 5e       	subi	r18, 0xEC	; 236
     a14:	3f 4f       	sbci	r19, 0xFF	; 255
     a16:	a6 01       	movw	r20, r12
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	85 e8       	ldi	r24, 0x85	; 133
     a1c:	99 e0       	ldi	r25, 0x09	; 9
     a1e:	0e 94 99 16 	call	0x2d32	; 0x2d32 <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j>
     a22:	88 23       	and	r24, r24
     a24:	59 f1       	breq	.+86     	; 0xa7c <_Z14GetCodeRfidATev+0xac>
     a26:	0c 89       	ldd	r16, Y+20	; 0x14
     a28:	10 e0       	ldi	r17, 0x00	; 0
     a2a:	20 e0       	ldi	r18, 0x00	; 0
     a2c:	30 e0       	ldi	r19, 0x00	; 0
     a2e:	a6 01       	movw	r20, r12
     a30:	65 e8       	ldi	r22, 0x85	; 133
     a32:	79 e0       	ldi	r23, 0x09	; 9
     a34:	ce 01       	movw	r24, r28
     a36:	0e 96       	adiw	r24, 0x0e	; 14
     a38:	0e 94 98 14 	call	0x2930	; 0x2930 <_ZN9NFC_PN53210GetHexCodeEPKhm>
     a3c:	ce 01       	movw	r24, r28
     a3e:	0e 96       	adiw	r24, 0x0e	; 14
     a40:	0e 94 24 34 	call	0x6848	; 0x6848 <_ZN6String4trimEv>
     a44:	28 e0       	ldi	r18, 0x08	; 8
     a46:	30 e0       	ldi	r19, 0x00	; 0
     a48:	40 e0       	ldi	r20, 0x00	; 0
     a4a:	50 e0       	ldi	r21, 0x00	; 0
     a4c:	be 01       	movw	r22, r28
     a4e:	62 5f       	subi	r22, 0xF2	; 242
     a50:	7f 4f       	sbci	r23, 0xFF	; 255
     a52:	ce 01       	movw	r24, r28
     a54:	08 96       	adiw	r24, 0x08	; 8
     a56:	0e 94 e1 33 	call	0x67c2	; 0x67c2 <_ZNK6String9substringEjj>
     a5a:	be 01       	movw	r22, r28
     a5c:	68 5f       	subi	r22, 0xF8	; 248
     a5e:	7f 4f       	sbci	r23, 0xFF	; 255
     a60:	c7 01       	movw	r24, r14
     a62:	0e 94 58 32 	call	0x64b0	; 0x64b0 <_ZN6StringaSEOS_>
     a66:	ce 01       	movw	r24, r28
     a68:	08 96       	adiw	r24, 0x08	; 8
     a6a:	0e 94 7d 31 	call	0x62fa	; 0x62fa <_ZN6StringD1Ev>
     a6e:	81 e0       	ldi	r24, 0x01	; 1
     a70:	80 93 b4 09 	sts	0x09B4, r24	; 0x8009b4 <alreadyTimbrata>
     a74:	ce 01       	movw	r24, r28
     a76:	0e 96       	adiw	r24, 0x0e	; 14
     a78:	0e 94 7d 31 	call	0x62fa	; 0x62fa <_ZN6StringD1Ev>
     a7c:	c7 01       	movw	r24, r14
     a7e:	64 96       	adiw	r28, 0x14	; 20
     a80:	0f b6       	in	r0, 0x3f	; 63
     a82:	f8 94       	cli
     a84:	de bf       	out	0x3e, r29	; 62
     a86:	0f be       	out	0x3f, r0	; 63
     a88:	cd bf       	out	0x3d, r28	; 61
     a8a:	df 91       	pop	r29
     a8c:	cf 91       	pop	r28
     a8e:	1f 91       	pop	r17
     a90:	0f 91       	pop	r16
     a92:	ff 90       	pop	r15
     a94:	ef 90       	pop	r14
     a96:	df 90       	pop	r13
     a98:	cf 90       	pop	r12
     a9a:	08 95       	ret

00000a9c <_Z19GetHTTPResponseCode6String>:
     a9c:	ef 92       	push	r14
     a9e:	ff 92       	push	r15
     aa0:	0f 93       	push	r16
     aa2:	1f 93       	push	r17
     aa4:	cf 93       	push	r28
     aa6:	df 93       	push	r29
     aa8:	cd b7       	in	r28, 0x3d	; 61
     aaa:	de b7       	in	r29, 0x3e	; 62
     aac:	2c 97       	sbiw	r28, 0x0c	; 12
     aae:	0f b6       	in	r0, 0x3f	; 63
     ab0:	f8 94       	cli
     ab2:	de bf       	out	0x3e, r29	; 62
     ab4:	0f be       	out	0x3f, r0	; 63
     ab6:	cd bf       	out	0x3d, r28	; 61
     ab8:	8c 01       	movw	r16, r24
     aba:	7b 01       	movw	r14, r22
     abc:	68 ec       	ldi	r22, 0xC8	; 200
     abe:	71 e0       	ldi	r23, 0x01	; 1
     ac0:	ce 01       	movw	r24, r28
     ac2:	07 96       	adiw	r24, 0x07	; 7
     ac4:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <_ZN6StringC1EPKc>
     ac8:	a2 dc       	rcall	.-1724   	; 0x40e <_Z9printLinev>
     aca:	60 ed       	ldi	r22, 0xD0	; 208
     acc:	71 e0       	ldi	r23, 0x01	; 1
     ace:	84 e2       	ldi	r24, 0x24	; 36
     ad0:	9b e0       	ldi	r25, 0x0B	; 11
     ad2:	0e 94 4e 2f 	call	0x5e9c	; 0x5e9c <_ZN5Print7printlnEPKc>
     ad6:	20 91 5b 01 	lds	r18, 0x015B	; 0x80015b <HTTP_len_response>
     ada:	30 91 5c 01 	lds	r19, 0x015C	; 0x80015c <HTTP_len_response+0x1>
     ade:	f7 01       	movw	r30, r14
     ae0:	84 81       	ldd	r24, Z+4	; 0x04
     ae2:	95 81       	ldd	r25, Z+5	; 0x05
     ae4:	28 17       	cp	r18, r24
     ae6:	39 07       	cpc	r19, r25
     ae8:	a9 f4       	brne	.+42     	; 0xb14 <_Z19GetHTTPResponseCode6String+0x78>
     aea:	a9 01       	movw	r20, r18
     aec:	43 50       	subi	r20, 0x03	; 3
     aee:	51 09       	sbc	r21, r1
     af0:	b7 01       	movw	r22, r14
     af2:	ce 01       	movw	r24, r28
     af4:	01 96       	adiw	r24, 0x01	; 1
     af6:	0e 94 e1 33 	call	0x67c2	; 0x67c2 <_ZNK6String9substringEjj>
     afa:	81 e0       	ldi	r24, 0x01	; 1
     afc:	ac dc       	rcall	.-1704   	; 0x456 <_Z4passb>
     afe:	be 01       	movw	r22, r28
     b00:	6f 5f       	subi	r22, 0xFF	; 255
     b02:	7f 4f       	sbci	r23, 0xFF	; 255
     b04:	c8 01       	movw	r24, r16
     b06:	0e 94 33 32 	call	0x6466	; 0x6466 <_ZN6StringC1EOS_>
     b0a:	ce 01       	movw	r24, r28
     b0c:	01 96       	adiw	r24, 0x01	; 1
     b0e:	0e 94 7d 31 	call	0x62fa	; 0x62fa <_ZN6StringD1Ev>
     b12:	09 c0       	rjmp	.+18     	; 0xb26 <_Z19GetHTTPResponseCode6String+0x8a>
     b14:	80 e0       	ldi	r24, 0x00	; 0
     b16:	9f dc       	rcall	.-1730   	; 0x456 <_Z4passb>
     b18:	7a dc       	rcall	.-1804   	; 0x40e <_Z9printLinev>
     b1a:	be 01       	movw	r22, r28
     b1c:	69 5f       	subi	r22, 0xF9	; 249
     b1e:	7f 4f       	sbci	r23, 0xFF	; 255
     b20:	c8 01       	movw	r24, r16
     b22:	0e 94 33 32 	call	0x6466	; 0x6466 <_ZN6StringC1EOS_>
     b26:	ce 01       	movw	r24, r28
     b28:	07 96       	adiw	r24, 0x07	; 7
     b2a:	0e 94 7d 31 	call	0x62fa	; 0x62fa <_ZN6StringD1Ev>
     b2e:	c8 01       	movw	r24, r16
     b30:	2c 96       	adiw	r28, 0x0c	; 12
     b32:	0f b6       	in	r0, 0x3f	; 63
     b34:	f8 94       	cli
     b36:	de bf       	out	0x3e, r29	; 62
     b38:	0f be       	out	0x3f, r0	; 63
     b3a:	cd bf       	out	0x3d, r28	; 61
     b3c:	df 91       	pop	r29
     b3e:	cf 91       	pop	r28
     b40:	1f 91       	pop	r17
     b42:	0f 91       	pop	r16
     b44:	ff 90       	pop	r15
     b46:	ef 90       	pop	r14
     b48:	08 95       	ret

00000b4a <_Z16GetAteValidationiPc14EthernetClient6String>:
     b4a:	af 92       	push	r10
     b4c:	bf 92       	push	r11
     b4e:	cf 92       	push	r12
     b50:	df 92       	push	r13
     b52:	ef 92       	push	r14
     b54:	ff 92       	push	r15
     b56:	0f 93       	push	r16
     b58:	1f 93       	push	r17
     b5a:	cf 93       	push	r28
     b5c:	df 93       	push	r29
     b5e:	cd b7       	in	r28, 0x3d	; 61
     b60:	de b7       	in	r29, 0x3e	; 62
     b62:	2c 97       	sbiw	r28, 0x0c	; 12
     b64:	0f b6       	in	r0, 0x3f	; 63
     b66:	f8 94       	cli
     b68:	de bf       	out	0x3e, r29	; 62
     b6a:	0f be       	out	0x3f, r0	; 63
     b6c:	cd bf       	out	0x3d, r28	; 61
     b6e:	5c 01       	movw	r10, r24
     b70:	6b 01       	movw	r12, r22
     b72:	8a 01       	movw	r16, r20
     b74:	79 01       	movw	r14, r18
     b76:	4b dc       	rcall	.-1898   	; 0x40e <_Z9printLinev>
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	5c dc       	rcall	.-1864   	; 0x434 <_Z8printTabh>
     b7c:	68 ee       	ldi	r22, 0xE8	; 232
     b7e:	71 e0       	ldi	r23, 0x01	; 1
     b80:	84 e2       	ldi	r24, 0x24	; 36
     b82:	9b e0       	ldi	r25, 0x0B	; 11
     b84:	0e 94 23 2f 	call	0x5e46	; 0x5e46 <_ZN5Print5printEPKc>
     b88:	a5 01       	movw	r20, r10
     b8a:	b6 01       	movw	r22, r12
     b8c:	c8 01       	movw	r24, r16
     b8e:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <_ZN14EthernetClient7connectEPKcj>
     b92:	89 2b       	or	r24, r25
     b94:	09 f4       	brne	.+2      	; 0xb98 <_Z16GetAteValidationiPc14EthernetClient6String+0x4e>
     b96:	77 c0       	rjmp	.+238    	; 0xc86 <_Z16GetAteValidationiPc14EthernetClient6String+0x13c>
     b98:	6e e0       	ldi	r22, 0x0E	; 14
     b9a:	72 e0       	ldi	r23, 0x02	; 2
     b9c:	ce 01       	movw	r24, r28
     b9e:	01 96       	adiw	r24, 0x01	; 1
     ba0:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <_ZN6StringC1EPKc>
     ba4:	b7 01       	movw	r22, r14
     ba6:	ce 01       	movw	r24, r28
     ba8:	01 96       	adiw	r24, 0x01	; 1
     baa:	0e 94 8f 33 	call	0x671e	; 0x671e <_ZplRK15StringSumHelperRK6String>
     bae:	6f e3       	ldi	r22, 0x3F	; 63
     bb0:	72 e0       	ldi	r23, 0x02	; 2
     bb2:	0e 94 a0 33 	call	0x6740	; 0x6740 <_ZplRK15StringSumHelperPKc>
     bb6:	bc 01       	movw	r22, r24
     bb8:	89 e7       	ldi	r24, 0x79	; 121
     bba:	99 e0       	ldi	r25, 0x09	; 9
     bbc:	0e 94 3b 32 	call	0x6476	; 0x6476 <_ZN6StringaSERKS_>
     bc0:	ce 01       	movw	r24, r28
     bc2:	01 96       	adiw	r24, 0x01	; 1
     bc4:	0e 94 7d 31 	call	0x62fa	; 0x62fa <_ZN6StringD1Ev>
     bc8:	6c e4       	ldi	r22, 0x4C	; 76
     bca:	72 e0       	ldi	r23, 0x02	; 2
     bcc:	89 e7       	ldi	r24, 0x79	; 121
     bce:	99 e0       	ldi	r25, 0x09	; 9
     bd0:	0e 94 6f 33 	call	0x66de	; 0x66de <_ZN6String6concatEPKc>
     bd4:	66 e6       	ldi	r22, 0x66	; 102
     bd6:	74 e0       	ldi	r23, 0x04	; 4
     bd8:	89 e7       	ldi	r24, 0x79	; 121
     bda:	99 e0       	ldi	r25, 0x09	; 9
     bdc:	0e 94 6f 33 	call	0x66de	; 0x66de <_ZN6String6concatEPKc>
     be0:	68 e6       	ldi	r22, 0x68	; 104
     be2:	72 e0       	ldi	r23, 0x02	; 2
     be4:	89 e7       	ldi	r24, 0x79	; 121
     be6:	99 e0       	ldi	r25, 0x09	; 9
     be8:	0e 94 6f 33 	call	0x66de	; 0x66de <_ZN6String6concatEPKc>
     bec:	66 e6       	ldi	r22, 0x66	; 102
     bee:	74 e0       	ldi	r23, 0x04	; 4
     bf0:	89 e7       	ldi	r24, 0x79	; 121
     bf2:	99 e0       	ldi	r25, 0x09	; 9
     bf4:	0e 94 6f 33 	call	0x66de	; 0x66de <_ZN6String6concatEPKc>
     bf8:	61 e8       	ldi	r22, 0x81	; 129
     bfa:	72 e0       	ldi	r23, 0x02	; 2
     bfc:	89 e7       	ldi	r24, 0x79	; 121
     bfe:	99 e0       	ldi	r25, 0x09	; 9
     c00:	0e 94 6f 33 	call	0x66de	; 0x66de <_ZN6String6concatEPKc>
     c04:	66 e6       	ldi	r22, 0x66	; 102
     c06:	74 e0       	ldi	r23, 0x04	; 4
     c08:	89 e7       	ldi	r24, 0x79	; 121
     c0a:	99 e0       	ldi	r25, 0x09	; 9
     c0c:	0e 94 6f 33 	call	0x66de	; 0x66de <_ZN6String6concatEPKc>
     c10:	60 ea       	ldi	r22, 0xA0	; 160
     c12:	72 e0       	ldi	r23, 0x02	; 2
     c14:	89 e7       	ldi	r24, 0x79	; 121
     c16:	99 e0       	ldi	r25, 0x09	; 9
     c18:	0e 94 6f 33 	call	0x66de	; 0x66de <_ZN6String6concatEPKc>
     c1c:	66 e6       	ldi	r22, 0x66	; 102
     c1e:	74 e0       	ldi	r23, 0x04	; 4
     c20:	89 e7       	ldi	r24, 0x79	; 121
     c22:	99 e0       	ldi	r25, 0x09	; 9
     c24:	0e 94 6f 33 	call	0x66de	; 0x66de <_ZN6String6concatEPKc>
     c28:	60 ec       	ldi	r22, 0xC0	; 192
     c2a:	72 e0       	ldi	r23, 0x02	; 2
     c2c:	89 e7       	ldi	r24, 0x79	; 121
     c2e:	99 e0       	ldi	r25, 0x09	; 9
     c30:	0e 94 6f 33 	call	0x66de	; 0x66de <_ZN6String6concatEPKc>
     c34:	66 e6       	ldi	r22, 0x66	; 102
     c36:	74 e0       	ldi	r23, 0x04	; 4
     c38:	89 e7       	ldi	r24, 0x79	; 121
     c3a:	99 e0       	ldi	r25, 0x09	; 9
     c3c:	0e 94 6f 33 	call	0x66de	; 0x66de <_ZN6String6concatEPKc>
     c40:	6a e6       	ldi	r22, 0x6A	; 106
     c42:	73 e0       	ldi	r23, 0x03	; 3
     c44:	89 e7       	ldi	r24, 0x79	; 121
     c46:	99 e0       	ldi	r25, 0x09	; 9
     c48:	0e 94 6f 33 	call	0x66de	; 0x66de <_ZN6String6concatEPKc>
     c4c:	66 e6       	ldi	r22, 0x66	; 102
     c4e:	74 e0       	ldi	r23, 0x04	; 4
     c50:	89 e7       	ldi	r24, 0x79	; 121
     c52:	99 e0       	ldi	r25, 0x09	; 9
     c54:	0e 94 6f 33 	call	0x66de	; 0x66de <_ZN6String6concatEPKc>
     c58:	69 e7       	ldi	r22, 0x79	; 121
     c5a:	79 e0       	ldi	r23, 0x09	; 9
     c5c:	c8 01       	movw	r24, r16
     c5e:	0e 94 15 2f 	call	0x5e2a	; 0x5e2a <_ZN5Print5printERK6String>
     c62:	2f ef       	ldi	r18, 0xFF	; 255
     c64:	87 ee       	ldi	r24, 0xE7	; 231
     c66:	93 e0       	ldi	r25, 0x03	; 3
     c68:	21 50       	subi	r18, 0x01	; 1
     c6a:	80 40       	sbci	r24, 0x00	; 0
     c6c:	90 40       	sbci	r25, 0x00	; 0
     c6e:	e1 f7       	brne	.-8      	; 0xc68 <_Z16GetAteValidationiPc14EthernetClient6String+0x11e>
     c70:	00 c0       	rjmp	.+0      	; 0xc72 <_Z16GetAteValidationiPc14EthernetClient6String+0x128>
     c72:	00 00       	nop
     c74:	69 e8       	ldi	r22, 0x89	; 137
     c76:	73 e0       	ldi	r23, 0x03	; 3
     c78:	c8 01       	movw	r24, r16
     c7a:	0e 94 4e 2f 	call	0x5e9c	; 0x5e9c <_ZN5Print7printlnEPKc>
     c7e:	c8 01       	movw	r24, r16
     c80:	0e 94 2b 2f 	call	0x5e56	; 0x5e56 <_ZN5Print7printlnEv>
     c84:	25 c0       	rjmp	.+74     	; 0xcd0 <_Z16GetAteValidationiPc14EthernetClient6String+0x186>
     c86:	8c e9       	ldi	r24, 0x9C	; 156
     c88:	99 e0       	ldi	r25, 0x09	; 9
     c8a:	0e 94 93 26 	call	0x4d26	; 0x4d26 <_ZN3LCD5clearEv>
     c8e:	41 e0       	ldi	r20, 0x01	; 1
     c90:	60 e0       	ldi	r22, 0x00	; 0
     c92:	8c e9       	ldi	r24, 0x9C	; 156
     c94:	99 e0       	ldi	r25, 0x09	; 9
     c96:	0e 94 99 26 	call	0x4d32	; 0x4d32 <_ZN3LCD9setCursorEhh>
     c9a:	6b e9       	ldi	r22, 0x9B	; 155
     c9c:	73 e0       	ldi	r23, 0x03	; 3
     c9e:	8c e9       	ldi	r24, 0x9C	; 156
     ca0:	99 e0       	ldi	r25, 0x09	; 9
     ca2:	0e 94 23 2f 	call	0x5e46	; 0x5e46 <_ZN5Print5printEPKc>
     ca6:	43 e0       	ldi	r20, 0x03	; 3
     ca8:	60 e0       	ldi	r22, 0x00	; 0
     caa:	8c e9       	ldi	r24, 0x9C	; 156
     cac:	99 e0       	ldi	r25, 0x09	; 9
     cae:	0e 94 99 26 	call	0x4d32	; 0x4d32 <_ZN3LCD9setCursorEhh>
     cb2:	60 eb       	ldi	r22, 0xB0	; 176
     cb4:	73 e0       	ldi	r23, 0x03	; 3
     cb6:	8c e9       	ldi	r24, 0x9C	; 156
     cb8:	99 e0       	ldi	r25, 0x09	; 9
     cba:	0e 94 23 2f 	call	0x5e46	; 0x5e46 <_ZN5Print5printEPKc>
     cbe:	2f ef       	ldi	r18, 0xFF	; 255
     cc0:	83 ed       	ldi	r24, 0xD3	; 211
     cc2:	90 e3       	ldi	r25, 0x30	; 48
     cc4:	21 50       	subi	r18, 0x01	; 1
     cc6:	80 40       	sbci	r24, 0x00	; 0
     cc8:	90 40       	sbci	r25, 0x00	; 0
     cca:	e1 f7       	brne	.-8      	; 0xcc4 <_Z16GetAteValidationiPc14EthernetClient6String+0x17a>
     ccc:	00 c0       	rjmp	.+0      	; 0xcce <_Z16GetAteValidationiPc14EthernetClient6String+0x184>
     cce:	00 00       	nop
     cd0:	2f ef       	ldi	r18, 0xFF	; 255
     cd2:	81 ee       	ldi	r24, 0xE1	; 225
     cd4:	94 e0       	ldi	r25, 0x04	; 4
     cd6:	21 50       	subi	r18, 0x01	; 1
     cd8:	80 40       	sbci	r24, 0x00	; 0
     cda:	90 40       	sbci	r25, 0x00	; 0
     cdc:	e1 f7       	brne	.-8      	; 0xcd6 <_Z16GetAteValidationiPc14EthernetClient6String+0x18c>
     cde:	00 c0       	rjmp	.+0      	; 0xce0 <_Z16GetAteValidationiPc14EthernetClient6String+0x196>
     ce0:	00 00       	nop
     ce2:	f1 2c       	mov	r15, r1
     ce4:	c8 01       	movw	r24, r16
     ce6:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <_ZN14EthernetClient9availableEv>
     cea:	89 2b       	or	r24, r25
     cec:	09 f4       	brne	.+2      	; 0xcf0 <_Z16GetAteValidationiPc14EthernetClient6String+0x1a6>
     cee:	56 c0       	rjmp	.+172    	; 0xd9c <_Z16GetAteValidationiPc14EthernetClient6String+0x252>
     cf0:	c8 01       	movw	r24, r16
     cf2:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <_ZN14EthernetClient4readEv>
     cf6:	e8 2e       	mov	r14, r24
     cf8:	6d e6       	ldi	r22, 0x6D	; 109
     cfa:	79 e0       	ldi	r23, 0x09	; 9
     cfc:	ce 01       	movw	r24, r28
     cfe:	01 96       	adiw	r24, 0x01	; 1
     d00:	0e 94 50 32 	call	0x64a0	; 0x64a0 <_ZN6StringC1ERKS_>
     d04:	6e 2d       	mov	r22, r14
     d06:	ce 01       	movw	r24, r28
     d08:	01 96       	adiw	r24, 0x01	; 1
     d0a:	0e 94 b7 33 	call	0x676e	; 0x676e <_ZplRK15StringSumHelperc>
     d0e:	bc 01       	movw	r22, r24
     d10:	8d e6       	ldi	r24, 0x6D	; 109
     d12:	99 e0       	ldi	r25, 0x09	; 9
     d14:	0e 94 3b 32 	call	0x6476	; 0x6476 <_ZN6StringaSERKS_>
     d18:	ce 01       	movw	r24, r28
     d1a:	01 96       	adiw	r24, 0x01	; 1
     d1c:	0e 94 7d 31 	call	0x62fa	; 0x62fa <_ZN6StringD1Ev>
     d20:	20 91 5b 01 	lds	r18, 0x015B	; 0x80015b <HTTP_len_response>
     d24:	30 91 5c 01 	lds	r19, 0x015C	; 0x80015c <HTTP_len_response+0x1>
     d28:	80 91 71 09 	lds	r24, 0x0971	; 0x800971 <RispostaHTTP+0x4>
     d2c:	90 91 72 09 	lds	r25, 0x0972	; 0x800972 <RispostaHTTP+0x5>
     d30:	28 17       	cp	r18, r24
     d32:	39 07       	cpc	r19, r25
     d34:	b9 f6       	brne	.-82     	; 0xce4 <_Z16GetAteValidationiPc14EthernetClient6String+0x19a>
     d36:	6d e6       	ldi	r22, 0x6D	; 109
     d38:	79 e0       	ldi	r23, 0x09	; 9
     d3a:	ce 01       	movw	r24, r28
     d3c:	01 96       	adiw	r24, 0x01	; 1
     d3e:	0e 94 50 32 	call	0x64a0	; 0x64a0 <_ZN6StringC1ERKS_>
     d42:	be 01       	movw	r22, r28
     d44:	6f 5f       	subi	r22, 0xFF	; 255
     d46:	7f 4f       	sbci	r23, 0xFF	; 255
     d48:	ce 01       	movw	r24, r28
     d4a:	07 96       	adiw	r24, 0x07	; 7
     d4c:	a7 de       	rcall	.-690    	; 0xa9c <_Z19GetHTTPResponseCode6String>
     d4e:	ce 01       	movw	r24, r28
     d50:	01 96       	adiw	r24, 0x01	; 1
     d52:	0e 94 7d 31 	call	0x62fa	; 0x62fa <_ZN6StringD1Ev>
     d56:	2f ef       	ldi	r18, 0xFF	; 255
     d58:	87 ee       	ldi	r24, 0xE7	; 231
     d5a:	93 e0       	ldi	r25, 0x03	; 3
     d5c:	21 50       	subi	r18, 0x01	; 1
     d5e:	80 40       	sbci	r24, 0x00	; 0
     d60:	90 40       	sbci	r25, 0x00	; 0
     d62:	e1 f7       	brne	.-8      	; 0xd5c <_Z16GetAteValidationiPc14EthernetClient6String+0x212>
     d64:	00 c0       	rjmp	.+0      	; 0xd66 <_Z16GetAteValidationiPc14EthernetClient6String+0x21c>
     d66:	00 00       	nop
     d68:	6f eb       	ldi	r22, 0xBF	; 191
     d6a:	73 e0       	ldi	r23, 0x03	; 3
     d6c:	ce 01       	movw	r24, r28
     d6e:	07 96       	adiw	r24, 0x07	; 7
     d70:	0e 94 c3 33 	call	0x6786	; 0x6786 <_ZNK6String6equalsEPKc>
     d74:	88 23       	and	r24, r24
     d76:	21 f0       	breq	.+8      	; 0xd80 <_Z16GetAteValidationiPc14EthernetClient6String+0x236>
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	6d db       	rcall	.-2342   	; 0x456 <_Z4passb>
     d7c:	ff 24       	eor	r15, r15
     d7e:	f3 94       	inc	r15
     d80:	2f ef       	ldi	r18, 0xFF	; 255
     d82:	87 ee       	ldi	r24, 0xE7	; 231
     d84:	93 e0       	ldi	r25, 0x03	; 3
     d86:	21 50       	subi	r18, 0x01	; 1
     d88:	80 40       	sbci	r24, 0x00	; 0
     d8a:	90 40       	sbci	r25, 0x00	; 0
     d8c:	e1 f7       	brne	.-8      	; 0xd86 <_Z16GetAteValidationiPc14EthernetClient6String+0x23c>
     d8e:	00 c0       	rjmp	.+0      	; 0xd90 <_Z16GetAteValidationiPc14EthernetClient6String+0x246>
     d90:	00 00       	nop
     d92:	ce 01       	movw	r24, r28
     d94:	07 96       	adiw	r24, 0x07	; 7
     d96:	0e 94 7d 31 	call	0x62fa	; 0x62fa <_ZN6StringD1Ev>
     d9a:	a4 cf       	rjmp	.-184    	; 0xce4 <_Z16GetAteValidationiPc14EthernetClient6String+0x19a>
     d9c:	38 db       	rcall	.-2448   	; 0x40e <_Z9printLinev>
     d9e:	8f 2d       	mov	r24, r15
     da0:	2c 96       	adiw	r28, 0x0c	; 12
     da2:	0f b6       	in	r0, 0x3f	; 63
     da4:	f8 94       	cli
     da6:	de bf       	out	0x3e, r29	; 62
     da8:	0f be       	out	0x3f, r0	; 63
     daa:	cd bf       	out	0x3d, r28	; 61
     dac:	df 91       	pop	r29
     dae:	cf 91       	pop	r28
     db0:	1f 91       	pop	r17
     db2:	0f 91       	pop	r16
     db4:	ff 90       	pop	r15
     db6:	ef 90       	pop	r14
     db8:	df 90       	pop	r13
     dba:	cf 90       	pop	r12
     dbc:	bf 90       	pop	r11
     dbe:	af 90       	pop	r10
     dc0:	08 95       	ret

00000dc2 <_Z14PostErogazioneiPc14EthernetClient6String>:
     dc2:	af 92       	push	r10
     dc4:	bf 92       	push	r11
     dc6:	cf 92       	push	r12
     dc8:	df 92       	push	r13
     dca:	ef 92       	push	r14
     dcc:	ff 92       	push	r15
     dce:	0f 93       	push	r16
     dd0:	1f 93       	push	r17
     dd2:	cf 93       	push	r28
     dd4:	df 93       	push	r29
     dd6:	cd b7       	in	r28, 0x3d	; 61
     dd8:	de b7       	in	r29, 0x3e	; 62
     dda:	2c 97       	sbiw	r28, 0x0c	; 12
     ddc:	0f b6       	in	r0, 0x3f	; 63
     dde:	f8 94       	cli
     de0:	de bf       	out	0x3e, r29	; 62
     de2:	0f be       	out	0x3f, r0	; 63
     de4:	cd bf       	out	0x3d, r28	; 61
     de6:	5c 01       	movw	r10, r24
     de8:	6b 01       	movw	r12, r22
     dea:	8a 01       	movw	r16, r20
     dec:	79 01       	movw	r14, r18
     dee:	0f db       	rcall	.-2530   	; 0x40e <_Z9printLinev>
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	20 db       	rcall	.-2496   	; 0x434 <_Z8printTabh>
     df4:	63 ec       	ldi	r22, 0xC3	; 195
     df6:	73 e0       	ldi	r23, 0x03	; 3
     df8:	84 e2       	ldi	r24, 0x24	; 36
     dfa:	9b e0       	ldi	r25, 0x0B	; 11
     dfc:	0e 94 23 2f 	call	0x5e46	; 0x5e46 <_ZN5Print5printEPKc>
     e00:	a5 01       	movw	r20, r10
     e02:	b6 01       	movw	r22, r12
     e04:	c8 01       	movw	r24, r16
     e06:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <_ZN14EthernetClient7connectEPKcj>
     e0a:	89 2b       	or	r24, r25
     e0c:	09 f4       	brne	.+2      	; 0xe10 <_Z14PostErogazioneiPc14EthernetClient6String+0x4e>
     e0e:	b0 c0       	rjmp	.+352    	; 0xf70 <_Z14PostErogazioneiPc14EthernetClient6String+0x1ae>
     e10:	2f ef       	ldi	r18, 0xFF	; 255
     e12:	81 ee       	ldi	r24, 0xE1	; 225
     e14:	94 e0       	ldi	r25, 0x04	; 4
     e16:	21 50       	subi	r18, 0x01	; 1
     e18:	80 40       	sbci	r24, 0x00	; 0
     e1a:	90 40       	sbci	r25, 0x00	; 0
     e1c:	e1 f7       	brne	.-8      	; 0xe16 <_Z14PostErogazioneiPc14EthernetClient6String+0x54>
     e1e:	00 c0       	rjmp	.+0      	; 0xe20 <_Z14PostErogazioneiPc14EthernetClient6String+0x5e>
     e20:	00 00       	nop
     e22:	62 ef       	ldi	r22, 0xF2	; 242
     e24:	73 e0       	ldi	r23, 0x03	; 3
     e26:	89 e7       	ldi	r24, 0x79	; 121
     e28:	99 e0       	ldi	r25, 0x09	; 9
     e2a:	0e 94 63 32 	call	0x64c6	; 0x64c6 <_ZN6StringaSEPKc>
     e2e:	63 e1       	ldi	r22, 0x13	; 19
     e30:	74 e0       	ldi	r23, 0x04	; 4
     e32:	89 e7       	ldi	r24, 0x79	; 121
     e34:	99 e0       	ldi	r25, 0x09	; 9
     e36:	0e 94 6f 33 	call	0x66de	; 0x66de <_ZN6String6concatEPKc>
     e3a:	66 e6       	ldi	r22, 0x66	; 102
     e3c:	74 e0       	ldi	r23, 0x04	; 4
     e3e:	89 e7       	ldi	r24, 0x79	; 121
     e40:	99 e0       	ldi	r25, 0x09	; 9
     e42:	0e 94 6f 33 	call	0x66de	; 0x66de <_ZN6String6concatEPKc>
     e46:	60 ec       	ldi	r22, 0xC0	; 192
     e48:	72 e0       	ldi	r23, 0x02	; 2
     e4a:	89 e7       	ldi	r24, 0x79	; 121
     e4c:	99 e0       	ldi	r25, 0x09	; 9
     e4e:	0e 94 6f 33 	call	0x66de	; 0x66de <_ZN6String6concatEPKc>
     e52:	66 e6       	ldi	r22, 0x66	; 102
     e54:	74 e0       	ldi	r23, 0x04	; 4
     e56:	89 e7       	ldi	r24, 0x79	; 121
     e58:	99 e0       	ldi	r25, 0x09	; 9
     e5a:	0e 94 6f 33 	call	0x66de	; 0x66de <_ZN6String6concatEPKc>
     e5e:	6a e6       	ldi	r22, 0x6A	; 106
     e60:	73 e0       	ldi	r23, 0x03	; 3
     e62:	89 e7       	ldi	r24, 0x79	; 121
     e64:	99 e0       	ldi	r25, 0x09	; 9
     e66:	0e 94 6f 33 	call	0x66de	; 0x66de <_ZN6String6concatEPKc>
     e6a:	66 e6       	ldi	r22, 0x66	; 102
     e6c:	74 e0       	ldi	r23, 0x04	; 4
     e6e:	89 e7       	ldi	r24, 0x79	; 121
     e70:	99 e0       	ldi	r25, 0x09	; 9
     e72:	0e 94 6f 33 	call	0x66de	; 0x66de <_ZN6String6concatEPKc>
     e76:	65 e3       	ldi	r22, 0x35	; 53
     e78:	74 e0       	ldi	r23, 0x04	; 4
     e7a:	89 e7       	ldi	r24, 0x79	; 121
     e7c:	99 e0       	ldi	r25, 0x09	; 9
     e7e:	0e 94 6f 33 	call	0x66de	; 0x66de <_ZN6String6concatEPKc>
     e82:	66 e6       	ldi	r22, 0x66	; 102
     e84:	74 e0       	ldi	r23, 0x04	; 4
     e86:	89 e7       	ldi	r24, 0x79	; 121
     e88:	99 e0       	ldi	r25, 0x09	; 9
     e8a:	0e 94 6f 33 	call	0x66de	; 0x66de <_ZN6String6concatEPKc>
     e8e:	f7 01       	movw	r30, r14
     e90:	64 81       	ldd	r22, Z+4	; 0x04
     e92:	75 81       	ldd	r23, Z+5	; 0x05
     e94:	6b 5e       	subi	r22, 0xEB	; 235
     e96:	7f 4f       	sbci	r23, 0xFF	; 255
     e98:	4a e0       	ldi	r20, 0x0A	; 10
     e9a:	ce 01       	movw	r24, r28
     e9c:	07 96       	adiw	r24, 0x07	; 7
     e9e:	0e 94 ba 32 	call	0x6574	; 0x6574 <_ZN6StringC1Ejh>
     ea2:	61 e4       	ldi	r22, 0x41	; 65
     ea4:	74 e0       	ldi	r23, 0x04	; 4
     ea6:	ce 01       	movw	r24, r28
     ea8:	01 96       	adiw	r24, 0x01	; 1
     eaa:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <_ZN6StringC1EPKc>
     eae:	be 01       	movw	r22, r28
     eb0:	69 5f       	subi	r22, 0xF9	; 249
     eb2:	7f 4f       	sbci	r23, 0xFF	; 255
     eb4:	ce 01       	movw	r24, r28
     eb6:	01 96       	adiw	r24, 0x01	; 1
     eb8:	0e 94 8f 33 	call	0x671e	; 0x671e <_ZplRK15StringSumHelperRK6String>
     ebc:	bc 01       	movw	r22, r24
     ebe:	89 e7       	ldi	r24, 0x79	; 121
     ec0:	99 e0       	ldi	r25, 0x09	; 9
     ec2:	0e 94 69 33 	call	0x66d2	; 0x66d2 <_ZN6String6concatERKS_>
     ec6:	ce 01       	movw	r24, r28
     ec8:	01 96       	adiw	r24, 0x01	; 1
     eca:	0e 94 7d 31 	call	0x62fa	; 0x62fa <_ZN6StringD1Ev>
     ece:	ce 01       	movw	r24, r28
     ed0:	07 96       	adiw	r24, 0x07	; 7
     ed2:	0e 94 7d 31 	call	0x62fa	; 0x62fa <_ZN6StringD1Ev>
     ed6:	66 e6       	ldi	r22, 0x66	; 102
     ed8:	74 e0       	ldi	r23, 0x04	; 4
     eda:	89 e7       	ldi	r24, 0x79	; 121
     edc:	99 e0       	ldi	r25, 0x09	; 9
     ede:	0e 94 6f 33 	call	0x66de	; 0x66de <_ZN6String6concatEPKc>
     ee2:	66 e6       	ldi	r22, 0x66	; 102
     ee4:	74 e0       	ldi	r23, 0x04	; 4
     ee6:	89 e7       	ldi	r24, 0x79	; 121
     ee8:	99 e0       	ldi	r25, 0x09	; 9
     eea:	0e 94 6f 33 	call	0x66de	; 0x66de <_ZN6String6concatEPKc>
     eee:	62 e5       	ldi	r22, 0x52	; 82
     ef0:	74 e0       	ldi	r23, 0x04	; 4
     ef2:	89 e7       	ldi	r24, 0x79	; 121
     ef4:	99 e0       	ldi	r25, 0x09	; 9
     ef6:	0e 94 6f 33 	call	0x66de	; 0x66de <_ZN6String6concatEPKc>
     efa:	66 e5       	ldi	r22, 0x56	; 86
     efc:	74 e0       	ldi	r23, 0x04	; 4
     efe:	ce 01       	movw	r24, r28
     f00:	01 96       	adiw	r24, 0x01	; 1
     f02:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <_ZN6StringC1EPKc>
     f06:	b7 01       	movw	r22, r14
     f08:	ce 01       	movw	r24, r28
     f0a:	01 96       	adiw	r24, 0x01	; 1
     f0c:	0e 94 8f 33 	call	0x671e	; 0x671e <_ZplRK15StringSumHelperRK6String>
     f10:	65 e6       	ldi	r22, 0x65	; 101
     f12:	74 e0       	ldi	r23, 0x04	; 4
     f14:	0e 94 a0 33 	call	0x6740	; 0x6740 <_ZplRK15StringSumHelperPKc>
     f18:	bc 01       	movw	r22, r24
     f1a:	89 e7       	ldi	r24, 0x79	; 121
     f1c:	99 e0       	ldi	r25, 0x09	; 9
     f1e:	0e 94 69 33 	call	0x66d2	; 0x66d2 <_ZN6String6concatERKS_>
     f22:	ce 01       	movw	r24, r28
     f24:	01 96       	adiw	r24, 0x01	; 1
     f26:	0e 94 7d 31 	call	0x62fa	; 0x62fa <_ZN6StringD1Ev>
     f2a:	69 e6       	ldi	r22, 0x69	; 105
     f2c:	74 e0       	ldi	r23, 0x04	; 4
     f2e:	89 e7       	ldi	r24, 0x79	; 121
     f30:	99 e0       	ldi	r25, 0x09	; 9
     f32:	0e 94 6f 33 	call	0x66de	; 0x66de <_ZN6String6concatEPKc>
     f36:	69 e7       	ldi	r22, 0x79	; 121
     f38:	79 e0       	ldi	r23, 0x09	; 9
     f3a:	84 e2       	ldi	r24, 0x24	; 36
     f3c:	9b e0       	ldi	r25, 0x0B	; 11
     f3e:	0e 94 3e 2f 	call	0x5e7c	; 0x5e7c <_ZN5Print7printlnERK6String>
     f42:	69 e7       	ldi	r22, 0x79	; 121
     f44:	79 e0       	ldi	r23, 0x09	; 9
     f46:	c8 01       	movw	r24, r16
     f48:	0e 94 15 2f 	call	0x5e2a	; 0x5e2a <_ZN5Print5printERK6String>
     f4c:	ff ef       	ldi	r31, 0xFF	; 255
     f4e:	27 ee       	ldi	r18, 0xE7	; 231
     f50:	83 e0       	ldi	r24, 0x03	; 3
     f52:	f1 50       	subi	r31, 0x01	; 1
     f54:	20 40       	sbci	r18, 0x00	; 0
     f56:	80 40       	sbci	r24, 0x00	; 0
     f58:	e1 f7       	brne	.-8      	; 0xf52 <_Z14PostErogazioneiPc14EthernetClient6String+0x190>
     f5a:	00 c0       	rjmp	.+0      	; 0xf5c <_Z14PostErogazioneiPc14EthernetClient6String+0x19a>
     f5c:	00 00       	nop
     f5e:	69 e8       	ldi	r22, 0x89	; 137
     f60:	73 e0       	ldi	r23, 0x03	; 3
     f62:	c8 01       	movw	r24, r16
     f64:	0e 94 4e 2f 	call	0x5e9c	; 0x5e9c <_ZN5Print7printlnEPKc>
     f68:	c8 01       	movw	r24, r16
     f6a:	0e 94 2b 2f 	call	0x5e56	; 0x5e56 <_ZN5Print7printlnEv>
     f6e:	25 c0       	rjmp	.+74     	; 0xfba <_Z14PostErogazioneiPc14EthernetClient6String+0x1f8>
     f70:	8c e9       	ldi	r24, 0x9C	; 156
     f72:	99 e0       	ldi	r25, 0x09	; 9
     f74:	0e 94 93 26 	call	0x4d26	; 0x4d26 <_ZN3LCD5clearEv>
     f78:	41 e0       	ldi	r20, 0x01	; 1
     f7a:	60 e0       	ldi	r22, 0x00	; 0
     f7c:	8c e9       	ldi	r24, 0x9C	; 156
     f7e:	99 e0       	ldi	r25, 0x09	; 9
     f80:	0e 94 99 26 	call	0x4d32	; 0x4d32 <_ZN3LCD9setCursorEhh>
     f84:	6b e9       	ldi	r22, 0x9B	; 155
     f86:	73 e0       	ldi	r23, 0x03	; 3
     f88:	8c e9       	ldi	r24, 0x9C	; 156
     f8a:	99 e0       	ldi	r25, 0x09	; 9
     f8c:	0e 94 23 2f 	call	0x5e46	; 0x5e46 <_ZN5Print5printEPKc>
     f90:	43 e0       	ldi	r20, 0x03	; 3
     f92:	60 e0       	ldi	r22, 0x00	; 0
     f94:	8c e9       	ldi	r24, 0x9C	; 156
     f96:	99 e0       	ldi	r25, 0x09	; 9
     f98:	0e 94 99 26 	call	0x4d32	; 0x4d32 <_ZN3LCD9setCursorEhh>
     f9c:	60 eb       	ldi	r22, 0xB0	; 176
     f9e:	73 e0       	ldi	r23, 0x03	; 3
     fa0:	8c e9       	ldi	r24, 0x9C	; 156
     fa2:	99 e0       	ldi	r25, 0x09	; 9
     fa4:	0e 94 23 2f 	call	0x5e46	; 0x5e46 <_ZN5Print5printEPKc>
     fa8:	9f ef       	ldi	r25, 0xFF	; 255
     faa:	e3 ed       	ldi	r30, 0xD3	; 211
     fac:	f0 e3       	ldi	r31, 0x30	; 48
     fae:	91 50       	subi	r25, 0x01	; 1
     fb0:	e0 40       	sbci	r30, 0x00	; 0
     fb2:	f0 40       	sbci	r31, 0x00	; 0
     fb4:	e1 f7       	brne	.-8      	; 0xfae <_Z14PostErogazioneiPc14EthernetClient6String+0x1ec>
     fb6:	00 c0       	rjmp	.+0      	; 0xfb8 <_Z14PostErogazioneiPc14EthernetClient6String+0x1f6>
     fb8:	00 00       	nop
     fba:	2f ef       	ldi	r18, 0xFF	; 255
     fbc:	81 ee       	ldi	r24, 0xE1	; 225
     fbe:	94 e0       	ldi	r25, 0x04	; 4
     fc0:	21 50       	subi	r18, 0x01	; 1
     fc2:	80 40       	sbci	r24, 0x00	; 0
     fc4:	90 40       	sbci	r25, 0x00	; 0
     fc6:	e1 f7       	brne	.-8      	; 0xfc0 <_Z14PostErogazioneiPc14EthernetClient6String+0x1fe>
     fc8:	00 c0       	rjmp	.+0      	; 0xfca <_Z14PostErogazioneiPc14EthernetClient6String+0x208>
     fca:	00 00       	nop
     fcc:	f1 2c       	mov	r15, r1
     fce:	c8 01       	movw	r24, r16
     fd0:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <_ZN14EthernetClient9availableEv>
     fd4:	89 2b       	or	r24, r25
     fd6:	09 f4       	brne	.+2      	; 0xfda <_Z14PostErogazioneiPc14EthernetClient6String+0x218>
     fd8:	56 c0       	rjmp	.+172    	; 0x1086 <_Z14PostErogazioneiPc14EthernetClient6String+0x2c4>
     fda:	c8 01       	movw	r24, r16
     fdc:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <_ZN14EthernetClient4readEv>
     fe0:	e8 2e       	mov	r14, r24
     fe2:	6d e6       	ldi	r22, 0x6D	; 109
     fe4:	79 e0       	ldi	r23, 0x09	; 9
     fe6:	ce 01       	movw	r24, r28
     fe8:	01 96       	adiw	r24, 0x01	; 1
     fea:	0e 94 50 32 	call	0x64a0	; 0x64a0 <_ZN6StringC1ERKS_>
     fee:	6e 2d       	mov	r22, r14
     ff0:	ce 01       	movw	r24, r28
     ff2:	01 96       	adiw	r24, 0x01	; 1
     ff4:	0e 94 b7 33 	call	0x676e	; 0x676e <_ZplRK15StringSumHelperc>
     ff8:	bc 01       	movw	r22, r24
     ffa:	8d e6       	ldi	r24, 0x6D	; 109
     ffc:	99 e0       	ldi	r25, 0x09	; 9
     ffe:	0e 94 3b 32 	call	0x6476	; 0x6476 <_ZN6StringaSERKS_>
    1002:	ce 01       	movw	r24, r28
    1004:	01 96       	adiw	r24, 0x01	; 1
    1006:	0e 94 7d 31 	call	0x62fa	; 0x62fa <_ZN6StringD1Ev>
    100a:	20 91 5b 01 	lds	r18, 0x015B	; 0x80015b <HTTP_len_response>
    100e:	30 91 5c 01 	lds	r19, 0x015C	; 0x80015c <HTTP_len_response+0x1>
    1012:	80 91 71 09 	lds	r24, 0x0971	; 0x800971 <RispostaHTTP+0x4>
    1016:	90 91 72 09 	lds	r25, 0x0972	; 0x800972 <RispostaHTTP+0x5>
    101a:	28 17       	cp	r18, r24
    101c:	39 07       	cpc	r19, r25
    101e:	b9 f6       	brne	.-82     	; 0xfce <_Z14PostErogazioneiPc14EthernetClient6String+0x20c>
    1020:	6d e6       	ldi	r22, 0x6D	; 109
    1022:	79 e0       	ldi	r23, 0x09	; 9
    1024:	ce 01       	movw	r24, r28
    1026:	01 96       	adiw	r24, 0x01	; 1
    1028:	0e 94 50 32 	call	0x64a0	; 0x64a0 <_ZN6StringC1ERKS_>
    102c:	be 01       	movw	r22, r28
    102e:	6f 5f       	subi	r22, 0xFF	; 255
    1030:	7f 4f       	sbci	r23, 0xFF	; 255
    1032:	ce 01       	movw	r24, r28
    1034:	07 96       	adiw	r24, 0x07	; 7
    1036:	32 dd       	rcall	.-1436   	; 0xa9c <_Z19GetHTTPResponseCode6String>
    1038:	ce 01       	movw	r24, r28
    103a:	01 96       	adiw	r24, 0x01	; 1
    103c:	0e 94 7d 31 	call	0x62fa	; 0x62fa <_ZN6StringD1Ev>
    1040:	ef ef       	ldi	r30, 0xFF	; 255
    1042:	f7 ee       	ldi	r31, 0xE7	; 231
    1044:	23 e0       	ldi	r18, 0x03	; 3
    1046:	e1 50       	subi	r30, 0x01	; 1
    1048:	f0 40       	sbci	r31, 0x00	; 0
    104a:	20 40       	sbci	r18, 0x00	; 0
    104c:	e1 f7       	brne	.-8      	; 0x1046 <_Z14PostErogazioneiPc14EthernetClient6String+0x284>
    104e:	00 c0       	rjmp	.+0      	; 0x1050 <_Z14PostErogazioneiPc14EthernetClient6String+0x28e>
    1050:	00 00       	nop
    1052:	6f eb       	ldi	r22, 0xBF	; 191
    1054:	73 e0       	ldi	r23, 0x03	; 3
    1056:	ce 01       	movw	r24, r28
    1058:	07 96       	adiw	r24, 0x07	; 7
    105a:	0e 94 c3 33 	call	0x6786	; 0x6786 <_ZNK6String6equalsEPKc>
    105e:	88 23       	and	r24, r24
    1060:	21 f0       	breq	.+8      	; 0x106a <_Z14PostErogazioneiPc14EthernetClient6String+0x2a8>
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	f8 d9       	rcall	.-3088   	; 0x456 <_Z4passb>
    1066:	ff 24       	eor	r15, r15
    1068:	f3 94       	inc	r15
    106a:	8f ef       	ldi	r24, 0xFF	; 255
    106c:	97 ee       	ldi	r25, 0xE7	; 231
    106e:	e3 e0       	ldi	r30, 0x03	; 3
    1070:	81 50       	subi	r24, 0x01	; 1
    1072:	90 40       	sbci	r25, 0x00	; 0
    1074:	e0 40       	sbci	r30, 0x00	; 0
    1076:	e1 f7       	brne	.-8      	; 0x1070 <_Z14PostErogazioneiPc14EthernetClient6String+0x2ae>
    1078:	00 c0       	rjmp	.+0      	; 0x107a <_Z14PostErogazioneiPc14EthernetClient6String+0x2b8>
    107a:	00 00       	nop
    107c:	ce 01       	movw	r24, r28
    107e:	07 96       	adiw	r24, 0x07	; 7
    1080:	0e 94 7d 31 	call	0x62fa	; 0x62fa <_ZN6StringD1Ev>
    1084:	a4 cf       	rjmp	.-184    	; 0xfce <_Z14PostErogazioneiPc14EthernetClient6String+0x20c>
    1086:	c3 d9       	rcall	.-3194   	; 0x40e <_Z9printLinev>
    1088:	ff ef       	ldi	r31, 0xFF	; 255
    108a:	20 e7       	ldi	r18, 0x70	; 112
    108c:	82 e0       	ldi	r24, 0x02	; 2
    108e:	f1 50       	subi	r31, 0x01	; 1
    1090:	20 40       	sbci	r18, 0x00	; 0
    1092:	80 40       	sbci	r24, 0x00	; 0
    1094:	e1 f7       	brne	.-8      	; 0x108e <_Z14PostErogazioneiPc14EthernetClient6String+0x2cc>
    1096:	00 c0       	rjmp	.+0      	; 0x1098 <_Z14PostErogazioneiPc14EthernetClient6String+0x2d6>
    1098:	00 00       	nop
    109a:	8f 2d       	mov	r24, r15
    109c:	2c 96       	adiw	r28, 0x0c	; 12
    109e:	0f b6       	in	r0, 0x3f	; 63
    10a0:	f8 94       	cli
    10a2:	de bf       	out	0x3e, r29	; 62
    10a4:	0f be       	out	0x3f, r0	; 63
    10a6:	cd bf       	out	0x3d, r28	; 61
    10a8:	df 91       	pop	r29
    10aa:	cf 91       	pop	r28
    10ac:	1f 91       	pop	r17
    10ae:	0f 91       	pop	r16
    10b0:	ff 90       	pop	r15
    10b2:	ef 90       	pop	r14
    10b4:	df 90       	pop	r13
    10b6:	cf 90       	pop	r12
    10b8:	bf 90       	pop	r11
    10ba:	af 90       	pop	r10
    10bc:	08 95       	ret

000010be <_Z15abilitaPulsantiv>:
    10be:	57 98       	cbi	0x0a, 7	; 10
    10c0:	56 98       	cbi	0x0a, 6	; 10
    10c2:	88 e0       	ldi	r24, 0x08	; 8
    10c4:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    10c8:	80 ec       	ldi	r24, 0xC0	; 192
    10ca:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    10ce:	78 94       	sei
    10d0:	08 95       	ret

000010d2 <_Z22abilitaContattiPistolav>:
    10d2:	09 98       	cbi	0x01, 1	; 1
    10d4:	0a 98       	cbi	0x01, 2	; 1
    10d6:	08 95       	ret

000010d8 <_Z13abilitaPulserc>:
    10d8:	91 e0       	ldi	r25, 0x01	; 1
    10da:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    10de:	84 34       	cpi	r24, 0x44	; 68
    10e0:	19 f4       	brne	.+6      	; 0x10e8 <_Z13abilitaPulserc+0x10>
    10e2:	0d 98       	cbi	0x01, 5	; 1
    10e4:	80 e2       	ldi	r24, 0x20	; 32
    10e6:	02 c0       	rjmp	.+4      	; 0x10ec <_Z13abilitaPulserc+0x14>
    10e8:	0e 98       	cbi	0x01, 6	; 1
    10ea:	80 e4       	ldi	r24, 0x40	; 64
    10ec:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
    10f0:	78 94       	sei
    10f2:	08 95       	ret

000010f4 <_Z14impulsiToLitrii>:
    _delay_ms(4);
  }
}

double impulsiToLitri(int P_impulsi)
{
    10f4:	cf 92       	push	r12
    10f6:	df 92       	push	r13
    10f8:	ef 92       	push	r14
    10fa:	ff 92       	push	r15
  //double imp = (double)(P_impulsi-1);
  double imp = (double)(P_impulsi);
    10fc:	bc 01       	movw	r22, r24
    10fe:	99 0f       	add	r25, r25
    1100:	88 0b       	sbc	r24, r24
    1102:	99 0b       	sbc	r25, r25
    1104:	0e 94 08 2d 	call	0x5a10	; 0x5a10 <__floatsisf>
    1108:	6b 01       	movw	r12, r22
    110a:	7c 01       	movw	r14, r24
  if (imp < 0) {imp = 0;}
    110c:	20 e0       	ldi	r18, 0x00	; 0
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	a9 01       	movw	r20, r18
    1112:	0e 94 9a 2c 	call	0x5934	; 0x5934 <__cmpsf2>
    1116:	87 ff       	sbrs	r24, 7
    1118:	03 c0       	rjmp	.+6      	; 0x1120 <_Z14impulsiToLitrii+0x2c>
    111a:	c1 2c       	mov	r12, r1
    111c:	d1 2c       	mov	r13, r1
    111e:	76 01       	movw	r14, r12
  double lt = (imp / ImpulsiLitro);
  double totale = lt;
  return totale;
    1120:	60 91 59 01 	lds	r22, 0x0159	; 0x800159 <ImpulsiLitro>
    1124:	70 91 5a 01 	lds	r23, 0x015A	; 0x80015a <ImpulsiLitro+0x1>
    1128:	07 2e       	mov	r0, r23
    112a:	00 0c       	add	r0, r0
    112c:	88 0b       	sbc	r24, r24
    112e:	99 0b       	sbc	r25, r25
    1130:	0e 94 08 2d 	call	0x5a10	; 0x5a10 <__floatsisf>
    1134:	9b 01       	movw	r18, r22
    1136:	ac 01       	movw	r20, r24
    1138:	c7 01       	movw	r24, r14
    113a:	b6 01       	movw	r22, r12
    113c:	0e 94 9e 2c 	call	0x593c	; 0x593c <__divsf3>
}
    1140:	ff 90       	pop	r15
    1142:	ef 90       	pop	r14
    1144:	df 90       	pop	r13
    1146:	cf 90       	pop	r12
    1148:	08 95       	ret

0000114a <_Z18Rele_Abilitazione1ii>:

void Rele_Abilitazione1(int p_azione,int p_bit) {
  
  DDRC |= (1 << PC7);  // Rele1 
    114a:	3f 9a       	sbi	0x07, 7	; 7
  
  switch (p_azione) {
    114c:	81 30       	cpi	r24, 0x01	; 1
    114e:	91 05       	cpc	r25, r1
    1150:	71 f0       	breq	.+28     	; 0x116e <_Z18Rele_Abilitazione1ii+0x24>
    1152:	82 30       	cpi	r24, 0x02	; 2
    1154:	91 05       	cpc	r25, r1
    1156:	e1 f0       	breq	.+56     	; 0x1190 <_Z18Rele_Abilitazione1ii+0x46>
    1158:	89 2b       	or	r24, r25
    115a:	89 f5       	brne	.+98     	; 0x11be <_Z18Rele_Abilitazione1ii+0x74>
    case 0: // chiudi relè
    {     
      CLEAR_BIT(PORTC,PC7); // Rele1*/
    115c:	47 98       	cbi	0x08, 7	; 8
    115e:	2f ef       	ldi	r18, 0xFF	; 255
    1160:	30 e7       	ldi	r19, 0x70	; 112
    1162:	42 e0       	ldi	r20, 0x02	; 2
    1164:	21 50       	subi	r18, 0x01	; 1
    1166:	30 40       	sbci	r19, 0x00	; 0
    1168:	40 40       	sbci	r20, 0x00	; 0
    116a:	e1 f7       	brne	.-8      	; 0x1164 <_Z18Rele_Abilitazione1ii+0x1a>
    116c:	0e c0       	rjmp	.+28     	; 0x118a <_Z18Rele_Abilitazione1ii+0x40>
      _delay_ms(50);
    }
    break;
    case 1: // apri relè
    {
      SET_BIT(PORTC,p_bit); // Rele1
    116e:	28 b1       	in	r18, 0x08	; 8
    1170:	01 c0       	rjmp	.+2      	; 0x1174 <_Z18Rele_Abilitazione1ii+0x2a>
    1172:	88 0f       	add	r24, r24
    1174:	6a 95       	dec	r22
    1176:	ea f7       	brpl	.-6      	; 0x1172 <_Z18Rele_Abilitazione1ii+0x28>
    1178:	82 2b       	or	r24, r18
    117a:	88 b9       	out	0x08, r24	; 8
    117c:	8f ef       	ldi	r24, 0xFF	; 255
    117e:	90 e7       	ldi	r25, 0x70	; 112
    1180:	22 e0       	ldi	r18, 0x02	; 2
    1182:	81 50       	subi	r24, 0x01	; 1
    1184:	90 40       	sbci	r25, 0x00	; 0
    1186:	20 40       	sbci	r18, 0x00	; 0
    1188:	e1 f7       	brne	.-8      	; 0x1182 <_Z18Rele_Abilitazione1ii+0x38>
    118a:	00 c0       	rjmp	.+0      	; 0x118c <_Z18Rele_Abilitazione1ii+0x42>
    118c:	00 00       	nop
    118e:	08 95       	ret
      _delay_ms(50);      
    }
    break;
    case 2: // chiudi e apri relè
    {
      CLEAR_BIT(PORTC,p_bit); // Rele1
    1190:	28 b1       	in	r18, 0x08	; 8
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	01 c0       	rjmp	.+2      	; 0x119a <_Z18Rele_Abilitazione1ii+0x50>
    1198:	88 0f       	add	r24, r24
    119a:	6a 95       	dec	r22
    119c:	ea f7       	brpl	.-6      	; 0x1198 <_Z18Rele_Abilitazione1ii+0x4e>
    119e:	98 2f       	mov	r25, r24
    11a0:	90 95       	com	r25
    11a2:	92 23       	and	r25, r18
    11a4:	98 b9       	out	0x08, r25	; 8
    11a6:	3f ef       	ldi	r19, 0xFF	; 255
    11a8:	45 ea       	ldi	r20, 0xA5	; 165
    11aa:	2e e0       	ldi	r18, 0x0E	; 14
    11ac:	31 50       	subi	r19, 0x01	; 1
    11ae:	40 40       	sbci	r20, 0x00	; 0
    11b0:	20 40       	sbci	r18, 0x00	; 0
    11b2:	e1 f7       	brne	.-8      	; 0x11ac <_Z18Rele_Abilitazione1ii+0x62>
    11b4:	00 c0       	rjmp	.+0      	; 0x11b6 <_Z18Rele_Abilitazione1ii+0x6c>
    11b6:	00 00       	nop
      _delay_ms(300);
      SET_BIT(PORTC,p_bit); // Rele1
    11b8:	98 b1       	in	r25, 0x08	; 8
    11ba:	89 2b       	or	r24, r25
    11bc:	88 b9       	out	0x08, r24	; 8
    11be:	08 95       	ret

000011c0 <_Z18Rele_Abilitazione2ii>:
  }
}

void Rele_Abilitazione2(int p_azione,int p_bit) {
  
  DDRA |= (1 << PA7);  // Rele2
    11c0:	0f 9a       	sbi	0x01, 7	; 1
  
  switch (p_azione) {
    11c2:	81 30       	cpi	r24, 0x01	; 1
    11c4:	91 05       	cpc	r25, r1
    11c6:	b9 f0       	breq	.+46     	; 0x11f6 <_Z18Rele_Abilitazione2ii+0x36>
    11c8:	82 30       	cpi	r24, 0x02	; 2
    11ca:	91 05       	cpc	r25, r1
    11cc:	29 f1       	breq	.+74     	; 0x1218 <_Z18Rele_Abilitazione2ii+0x58>
    11ce:	89 2b       	or	r24, r25
    11d0:	d1 f5       	brne	.+116    	; 0x1246 <_Z18Rele_Abilitazione2ii+0x86>
    case 0:
    {
      CLEAR_BIT(PORTA,p_bit); // Rele2
    11d2:	22 b1       	in	r18, 0x02	; 2
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	01 c0       	rjmp	.+2      	; 0x11dc <_Z18Rele_Abilitazione2ii+0x1c>
    11da:	88 0f       	add	r24, r24
    11dc:	6a 95       	dec	r22
    11de:	ea f7       	brpl	.-6      	; 0x11da <_Z18Rele_Abilitazione2ii+0x1a>
    11e0:	80 95       	com	r24
    11e2:	82 23       	and	r24, r18
    11e4:	82 b9       	out	0x02, r24	; 2
    11e6:	2f ef       	ldi	r18, 0xFF	; 255
    11e8:	30 e7       	ldi	r19, 0x70	; 112
    11ea:	42 e0       	ldi	r20, 0x02	; 2
    11ec:	21 50       	subi	r18, 0x01	; 1
    11ee:	30 40       	sbci	r19, 0x00	; 0
    11f0:	40 40       	sbci	r20, 0x00	; 0
    11f2:	e1 f7       	brne	.-8      	; 0x11ec <_Z18Rele_Abilitazione2ii+0x2c>
    11f4:	0e c0       	rjmp	.+28     	; 0x1212 <_Z18Rele_Abilitazione2ii+0x52>
      _delay_ms(50);
    }
    break;
    case 1:
    {
      SET_BIT(PORTA,p_bit); // Rele2
    11f6:	22 b1       	in	r18, 0x02	; 2
    11f8:	01 c0       	rjmp	.+2      	; 0x11fc <_Z18Rele_Abilitazione2ii+0x3c>
    11fa:	88 0f       	add	r24, r24
    11fc:	6a 95       	dec	r22
    11fe:	ea f7       	brpl	.-6      	; 0x11fa <_Z18Rele_Abilitazione2ii+0x3a>
    1200:	82 2b       	or	r24, r18
    1202:	82 b9       	out	0x02, r24	; 2
    1204:	8f ef       	ldi	r24, 0xFF	; 255
    1206:	90 e7       	ldi	r25, 0x70	; 112
    1208:	22 e0       	ldi	r18, 0x02	; 2
    120a:	81 50       	subi	r24, 0x01	; 1
    120c:	90 40       	sbci	r25, 0x00	; 0
    120e:	20 40       	sbci	r18, 0x00	; 0
    1210:	e1 f7       	brne	.-8      	; 0x120a <_Z18Rele_Abilitazione2ii+0x4a>
    1212:	00 c0       	rjmp	.+0      	; 0x1214 <_Z18Rele_Abilitazione2ii+0x54>
    1214:	00 00       	nop
    1216:	08 95       	ret
      _delay_ms(50);
    }
    break;
    case 2:
    {
      CLEAR_BIT(PORTA,p_bit); // Rele2
    1218:	22 b1       	in	r18, 0x02	; 2
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	01 c0       	rjmp	.+2      	; 0x1222 <_Z18Rele_Abilitazione2ii+0x62>
    1220:	88 0f       	add	r24, r24
    1222:	6a 95       	dec	r22
    1224:	ea f7       	brpl	.-6      	; 0x1220 <_Z18Rele_Abilitazione2ii+0x60>
    1226:	98 2f       	mov	r25, r24
    1228:	90 95       	com	r25
    122a:	92 23       	and	r25, r18
    122c:	92 b9       	out	0x02, r25	; 2
    122e:	3f ef       	ldi	r19, 0xFF	; 255
    1230:	45 ea       	ldi	r20, 0xA5	; 165
    1232:	2e e0       	ldi	r18, 0x0E	; 14
    1234:	31 50       	subi	r19, 0x01	; 1
    1236:	40 40       	sbci	r20, 0x00	; 0
    1238:	20 40       	sbci	r18, 0x00	; 0
    123a:	e1 f7       	brne	.-8      	; 0x1234 <_Z18Rele_Abilitazione2ii+0x74>
    123c:	00 c0       	rjmp	.+0      	; 0x123e <_Z18Rele_Abilitazione2ii+0x7e>
    123e:	00 00       	nop
      _delay_ms(300);
      SET_BIT(PORTA,p_bit); // Rele2      
    1240:	92 b1       	in	r25, 0x02	; 2
    1242:	89 2b       	or	r24, r25
    1244:	82 b9       	out	0x02, r24	; 2
    1246:	08 95       	ret

00001248 <_Z12Control_WIFIi>:
    break;
  }
}

void Control_WIFI(int azione) {
   DDRB |= (1 << PB3);  // set DDRB bit 3,  sets PB3 for output
    1248:	23 9a       	sbi	0x04, 3	; 4
    124a:	2f ef       	ldi	r18, 0xFF	; 255
    124c:	36 e7       	ldi	r19, 0x76	; 118
    124e:	41 e0       	ldi	r20, 0x01	; 1
    1250:	21 50       	subi	r18, 0x01	; 1
    1252:	30 40       	sbci	r19, 0x00	; 0
    1254:	40 40       	sbci	r20, 0x00	; 0
    1256:	e1 f7       	brne	.-8      	; 0x1250 <_Z12Control_WIFIi+0x8>
    1258:	00 c0       	rjmp	.+0      	; 0x125a <_Z12Control_WIFIi+0x12>
    125a:	00 00       	nop
   _delay_ms(30);
   if (azione == 1) {SET_BIT(PORTB,3);} else if (azione == 0) { CLEAR_BIT(PORTB,3); }
    125c:	81 30       	cpi	r24, 0x01	; 1
    125e:	91 05       	cpc	r25, r1
    1260:	11 f4       	brne	.+4      	; 0x1266 <_Z12Control_WIFIi+0x1e>
    1262:	2b 9a       	sbi	0x05, 3	; 5
    1264:	08 95       	ret
    1266:	89 2b       	or	r24, r25
    1268:	09 f4       	brne	.+2      	; 0x126c <_Z12Control_WIFIi+0x24>
    126a:	2b 98       	cbi	0x05, 3	; 5
    126c:	08 95       	ret

0000126e <_Z6Azzerav>:
}

void Azzera()
{
   RispostaHTTP = "";
    126e:	64 e8       	ldi	r22, 0x84	; 132
    1270:	71 e0       	ldi	r23, 0x01	; 1
    1272:	8d e6       	ldi	r24, 0x6D	; 109
    1274:	99 e0       	ldi	r25, 0x09	; 9
    1276:	0e 94 63 32 	call	0x64c6	; 0x64c6 <_ZN6StringaSEPKc>
   impulsi = 0;
    127a:	10 92 74 09 	sts	0x0974, r1	; 0x800974 <impulsi+0x1>
    127e:	10 92 73 09 	sts	0x0973, r1	; 0x800973 <impulsi>
   alreadyTimbrata = false;
    1282:	10 92 b4 09 	sts	0x09B4, r1	; 0x8009b4 <alreadyTimbrata>
   
   Carburante = "X";
    1286:	64 ee       	ldi	r22, 0xE4	; 228
    1288:	74 e0       	ldi	r23, 0x04	; 4
    128a:	83 e4       	ldi	r24, 0x43	; 67
    128c:	99 e0       	ldi	r25, 0x09	; 9
    128e:	0e 94 63 32 	call	0x64c6	; 0x64c6 <_ZN6StringaSEPKc>
   
   Rele_Abilitazione1(1,7);
    1292:	67 e0       	ldi	r22, 0x07	; 7
    1294:	70 e0       	ldi	r23, 0x00	; 0
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	57 df       	rcall	.-338    	; 0x114a <_Z18Rele_Abilitazione1ii>
   Rele_Abilitazione2(1,7);
    129c:	67 e0       	ldi	r22, 0x07	; 7
    129e:	70 e0       	ldi	r23, 0x00	; 0
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	8d df       	rcall	.-230    	; 0x11c0 <_Z18Rele_Abilitazione2ii>
   Control_WIFI(0);
    12a6:	80 e0       	ldi	r24, 0x00	; 0
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	ce df       	rcall	.-100    	; 0x1248 <_Z12Control_WIFIi>
    12ac:	8f e1       	ldi	r24, 0x1F	; 31
    12ae:	9e e4       	ldi	r25, 0x4E	; 78
    12b0:	01 97       	sbiw	r24, 0x01	; 1
    12b2:	f1 f7       	brne	.-4      	; 0x12b0 <_Z6Azzerav+0x42>
    12b4:	00 c0       	rjmp	.+0      	; 0x12b6 <_Z6Azzerav+0x48>
    12b6:	00 00       	nop
   
   //clientToServizio.flush();
   //clientToServizio.stop();
   
   _delay_ms(5);
   clientATE.flush();
    12b8:	8d ee       	ldi	r24, 0xED	; 237
    12ba:	98 e0       	ldi	r25, 0x08	; 8
    12bc:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <_ZN14EthernetClient5flushEv>
   clientATE.stop();
    12c0:	8d ee       	ldi	r24, 0xED	; 237
    12c2:	98 e0       	ldi	r25, 0x08	; 8
    12c4:	0e 94 c0 1f 	call	0x3f80	; 0x3f80 <_ZN14EthernetClient4stopEv>
    12c8:	8f e1       	ldi	r24, 0x1F	; 31
    12ca:	9e e4       	ldi	r25, 0x4E	; 78
    12cc:	01 97       	sbiw	r24, 0x01	; 1
    12ce:	f1 f7       	brne	.-4      	; 0x12cc <_Z6Azzerav+0x5e>
    12d0:	00 c0       	rjmp	.+0      	; 0x12d2 <_Z6Azzerav+0x64>
    12d2:	00 00       	nop
   _delay_ms(5);
   clientLOCAL.flush();
    12d4:	8a ef       	ldi	r24, 0xFA	; 250
    12d6:	98 e0       	ldi	r25, 0x08	; 8
    12d8:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <_ZN14EthernetClient5flushEv>
   clientLOCAL.stop();
    12dc:	8a ef       	ldi	r24, 0xFA	; 250
    12de:	98 e0       	ldi	r25, 0x08	; 8
    12e0:	0e 94 c0 1f 	call	0x3f80	; 0x3f80 <_ZN14EthernetClient4stopEv>
   Connected = false;
    12e4:	10 92 78 09 	sts	0x0978, r1	; 0x800978 <Connected+0x1>
    12e8:	10 92 77 09 	sts	0x0977, r1	; 0x800977 <Connected>
    12ec:	8f e1       	ldi	r24, 0x1F	; 31
    12ee:	9e e4       	ldi	r25, 0x4E	; 78
    12f0:	01 97       	sbiw	r24, 0x01	; 1
    12f2:	f1 f7       	brne	.-4      	; 0x12f0 <_Z6Azzerav+0x82>
    12f4:	00 c0       	rjmp	.+0      	; 0x12f6 <_Z6Azzerav+0x88>
    12f6:	00 00       	nop
static const uint8_t RELE2 = PORTA7;
/*********************************************************************************************/
static inline void initSS_FLASH()  { DDRB |= (1 << PB4); } // set DDRB bit 4, sets PB4 for output
static inline void initSS_ETH()    { DDRC |= (1 << PC4); } // set DDRC bit 4, sets PC4 for output
static inline void enable_ETH()    { PORTC &= ~(1 << PC4); } // Set 0 Bit 4 PORTC Register
static inline void enable_FLASH()  { PORTB &= ~(1 << PB4); } // Set 0 Bit 4 PORTB Register
    12f8:	2c 98       	cbi	0x05, 4	; 5
    12fa:	8f e1       	ldi	r24, 0x1F	; 31
    12fc:	9e e4       	ldi	r25, 0x4E	; 78
    12fe:	01 97       	sbiw	r24, 0x01	; 1
    1300:	f1 f7       	brne	.-4      	; 0x12fe <_Z6Azzerav+0x90>
    1302:	00 c0       	rjmp	.+0      	; 0x1304 <_Z6Azzerav+0x96>
    1304:	00 00       	nop
static inline void disable_ETH()   { PORTC |= (1 << PC4);  } // Set 1 Bit 4 PORTC Register
static inline void disable_FLASH() { PORTB |= (1 << PB4);  } // Set 1 Bit 4 PORTB Register
    1306:	2c 9a       	sbi	0x05, 4	; 5
    1308:	8f e1       	ldi	r24, 0x1F	; 31
    130a:	9e e4       	ldi	r25, 0x4E	; 78
    130c:	01 97       	sbiw	r24, 0x01	; 1
    130e:	f1 f7       	brne	.-4      	; 0x130c <_Z6Azzerav+0x9e>
    1310:	00 c0       	rjmp	.+0      	; 0x1312 <_Z6Azzerav+0xa4>
   _delay_ms(5);
   enable_FLASH();
   _delay_ms(5);
   disable_FLASH();
   _delay_ms(5);
   disable_ETH();
    1312:	00 00       	nop
    1314:	07 d8       	rcall	.-4082   	; 0x324 <_ZL11disable_ETHv>
    1316:	8f e1       	ldi	r24, 0x1F	; 31
    1318:	9e e4       	ldi	r25, 0x4E	; 78
    131a:	01 97       	sbiw	r24, 0x01	; 1
    131c:	f1 f7       	brne	.-4      	; 0x131a <_Z6Azzerav+0xac>
    131e:	00 c0       	rjmp	.+0      	; 0x1320 <_Z6Azzerav+0xb2>
    1320:	00 00       	nop
static const uint8_t RELE1 = PORTC7;
static const uint8_t RELE2 = PORTA7;
/*********************************************************************************************/
static inline void initSS_FLASH()  { DDRB |= (1 << PB4); } // set DDRB bit 4, sets PB4 for output
static inline void initSS_ETH()    { DDRC |= (1 << PC4); } // set DDRC bit 4, sets PC4 for output
static inline void enable_ETH()    { PORTC &= ~(1 << PC4); } // Set 0 Bit 4 PORTC Register
    1322:	44 98       	cbi	0x08, 4	; 8
   _delay_ms(5);
   disable_ETH();
   _delay_ms(5); 
   enable_ETH(); 
     
   SET_BIT(PORTA,A1);
    1324:	82 b1       	in	r24, 0x02	; 2
    1326:	82 b9       	out	0x02, r24	; 2
   SET_BIT(PORTA,A2);
    1328:	82 b1       	in	r24, 0x02	; 2
    132a:	82 b9       	out	0x02, r24	; 2
   
   righeDisplay[1] =  "";
    132c:	64 e8       	ldi	r22, 0x84	; 132
    132e:	71 e0       	ldi	r23, 0x01	; 1
    1330:	85 e2       	ldi	r24, 0x25	; 37
    1332:	99 e0       	ldi	r25, 0x09	; 9
    1334:	0e 94 63 32 	call	0x64c6	; 0x64c6 <_ZN6StringaSEPKc>
   righeDisplay[2] =  "";
    1338:	64 e8       	ldi	r22, 0x84	; 132
    133a:	71 e0       	ldi	r23, 0x01	; 1
    133c:	8b e2       	ldi	r24, 0x2B	; 43
    133e:	99 e0       	ldi	r25, 0x09	; 9
    1340:	0e 94 63 32 	call	0x64c6	; 0x64c6 <_ZN6StringaSEPKc>
   righeDisplay[2] =  "";
    1344:	64 e8       	ldi	r22, 0x84	; 132
    1346:	71 e0       	ldi	r23, 0x01	; 1
    1348:	8b e2       	ldi	r24, 0x2B	; 43
    134a:	99 e0       	ldi	r25, 0x09	; 9
    134c:	0e 94 63 32 	call	0x64c6	; 0x64c6 <_ZN6StringaSEPKc>
   
   lcd.noBacklight();
    1350:	8c e9       	ldi	r24, 0x9C	; 156
    1352:	99 e0       	ldi	r25, 0x09	; 9
    1354:	0e 94 83 26 	call	0x4d06	; 0x4d06 <_ZN3LCD11noBacklightEv>
   lcd.noDisplay();
    1358:	8c e9       	ldi	r24, 0x9C	; 156
    135a:	99 e0       	ldi	r25, 0x09	; 9
    135c:	0e 94 db 26 	call	0x4db6	; 0x4db6 <_ZN3LCD9noDisplayEv>
   secs = 0;
    1360:	10 92 dd 08 	sts	0x08DD, r1	; 0x8008dd <secs>
    1364:	10 92 de 08 	sts	0x08DE, r1	; 0x8008de <secs+0x1>
    1368:	10 92 df 08 	sts	0x08DF, r1	; 0x8008df <secs+0x2>
    136c:	10 92 e0 08 	sts	0x08E0, r1	; 0x8008e0 <secs+0x3>
   UltimoPassaggioStato = 0;
    1370:	10 92 d9 08 	sts	0x08D9, r1	; 0x8008d9 <UltimoPassaggioStato>
    1374:	10 92 da 08 	sts	0x08DA, r1	; 0x8008da <UltimoPassaggioStato+0x1>
    1378:	10 92 db 08 	sts	0x08DB, r1	; 0x8008db <UltimoPassaggioStato+0x2>
    137c:	10 92 dc 08 	sts	0x08DC, r1	; 0x8008dc <UltimoPassaggioStato+0x3>
   
   printLine();
    1380:	46 d8       	rcall	.-3956   	; 0x40e <_Z9printLinev>
   Serial.println("Azzera....... OK");
    1382:	66 ee       	ldi	r22, 0xE6	; 230
    1384:	74 e0       	ldi	r23, 0x04	; 4
    1386:	84 e2       	ldi	r24, 0x24	; 36
    1388:	9b e0       	ldi	r25, 0x0B	; 11
    138a:	0e 94 4e 2f 	call	0x5e9c	; 0x5e9c <_ZN5Print7printlnEPKc>
   printLine();
    138e:	3f d8       	rcall	.-3970   	; 0x40e <_Z9printLinev>
   TARGA = "";
    1390:	64 e8       	ldi	r22, 0x84	; 132
    1392:	71 e0       	ldi	r23, 0x01	; 1
    1394:	89 ec       	ldi	r24, 0xC9	; 201
    1396:	98 e0       	ldi	r25, 0x08	; 8
    1398:	0e 94 63 32 	call	0x64c6	; 0x64c6 <_ZN6StringaSEPKc>
   stato_procedura = -2;
    139c:	8e ef       	ldi	r24, 0xFE	; 254
    139e:	9f ef       	ldi	r25, 0xFF	; 255
    13a0:	90 93 76 09 	sts	0x0976, r25	; 0x800976 <stato_procedura+0x1>
    13a4:	80 93 75 09 	sts	0x0975, r24	; 0x800975 <stato_procedura>
    13a8:	08 95       	ret

000013aa <_Z10inputTargac>:
}

void inputTarga(char T) {
    13aa:	cf 93       	push	r28
    13ac:	df 93       	push	r29
    13ae:	00 d0       	rcall	.+0      	; 0x13b0 <_Z10inputTargac+0x6>
    13b0:	00 d0       	rcall	.+0      	; 0x13b2 <_Z10inputTargac+0x8>
    13b2:	00 d0       	rcall	.+0      	; 0x13b4 <_Z10inputTargac+0xa>
    13b4:	cd b7       	in	r28, 0x3d	; 61
    13b6:	de b7       	in	r29, 0x3e	; 62
	
	switch (T) {
    13b8:	82 34       	cpi	r24, 0x42	; 66
    13ba:	19 f1       	breq	.+70     	; 0x1402 <_Z10inputTargac+0x58>
    13bc:	b0 f4       	brcc	.+44     	; 0x13ea <_Z10inputTargac+0x40>
    13be:	83 32       	cpi	r24, 0x23	; 35
    13c0:	09 f4       	brne	.+2      	; 0x13c4 <_Z10inputTargac+0x1a>
    13c2:	49 c0       	rjmp	.+146    	; 0x1456 <_Z10inputTargac+0xac>
    13c4:	81 34       	cpi	r24, 0x41	; 65
    13c6:	09 f0       	breq	.+2      	; 0x13ca <_Z10inputTargac+0x20>
    13c8:	62 c0       	rjmp	.+196    	; 0x148e <_Z10inputTargac+0xe4>
		case ('N'): {
			Serial.print("NIENTE");
		}
		break;
		case ('A'): {
			TARGA = "";
    13ca:	64 e8       	ldi	r22, 0x84	; 132
    13cc:	71 e0       	ldi	r23, 0x01	; 1
    13ce:	89 ec       	ldi	r24, 0xC9	; 201
    13d0:	98 e0       	ldi	r25, 0x08	; 8
    13d2:	0e 94 63 32 	call	0x64c6	; 0x64c6 <_ZN6StringaSEPKc>
			avanzaStato(TinputTarga);
    13d6:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <TinputTarga>
    13da:	70 91 23 01 	lds	r23, 0x0123	; 0x800123 <TinputTarga+0x1>
    13de:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <TinputTarga+0x2>
    13e2:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <TinputTarga+0x3>
    13e6:	f3 d9       	rcall	.-3098   	; 0x7ce <_Z11avanzaStatom>
    13e8:	0c c0       	rjmp	.+24     	; 0x1402 <_Z10inputTargac+0x58>
   stato_procedura = -2;
}

void inputTarga(char T) {
	
	switch (T) {
    13ea:	83 34       	cpi	r24, 0x43	; 67
    13ec:	c1 f0       	breq	.+48     	; 0x141e <_Z10inputTargac+0x74>
    13ee:	8e 34       	cpi	r24, 0x4E	; 78
    13f0:	09 f0       	breq	.+2      	; 0x13f4 <_Z10inputTargac+0x4a>
    13f2:	4d c0       	rjmp	.+154    	; 0x148e <_Z10inputTargac+0xe4>
		case ('N'): {
			Serial.print("NIENTE");
    13f4:	67 ef       	ldi	r22, 0xF7	; 247
    13f6:	74 e0       	ldi	r23, 0x04	; 4
    13f8:	84 e2       	ldi	r24, 0x24	; 36
    13fa:	9b e0       	ldi	r25, 0x0B	; 11
    13fc:	0e 94 23 2f 	call	0x5e46	; 0x5e46 <_ZN5Print5printEPKc>
		}
		break;
    1400:	5f c0       	rjmp	.+190    	; 0x14c0 <_Z10inputTargac+0x116>
		case ('A'): {
			TARGA = "";
			avanzaStato(TinputTarga);
		}
		case ('B'): {
			String mezzoString = leggiTAG_Mezzo(true); // con TRUE scrive sul blocco 4 della card NFC DEL MEZZO
    1402:	61 e0       	ldi	r22, 0x01	; 1
    1404:	ce 01       	movw	r24, r28
    1406:	01 96       	adiw	r24, 0x01	; 1
    1408:	00 da       	rcall	.-3072   	; 0x80a <_Z14leggiTAG_Mezzob>
    140a:	8f e3       	ldi	r24, 0x3F	; 63
    140c:	9c e9       	ldi	r25, 0x9C	; 156
    140e:	01 97       	sbiw	r24, 0x01	; 1
    1410:	f1 f7       	brne	.-4      	; 0x140e <_Z10inputTargac+0x64>
    1412:	00 c0       	rjmp	.+0      	; 0x1414 <_Z10inputTargac+0x6a>
    1414:	00 00       	nop
    1416:	ce 01       	movw	r24, r28
    1418:	01 96       	adiw	r24, 0x01	; 1
    141a:	0e 94 7d 31 	call	0x62fa	; 0x62fa <_ZN6StringD1Ev>
    141e:	20 91 cd 08 	lds	r18, 0x08CD	; 0x8008cd <TARGA+0x4>
    1422:	30 91 ce 08 	lds	r19, 0x08CE	; 0x8008ce <TARGA+0x5>
			_delay_ms(10);
		}
		case ('C'): {
			if (TARGA.length() > 0)
    1426:	21 15       	cp	r18, r1
    1428:	31 05       	cpc	r19, r1
    142a:	a9 f0       	breq	.+42     	; 0x1456 <_Z10inputTargac+0xac>
			TARGA = TARGA.substring(0,TARGA.length()-1);
    142c:	21 50       	subi	r18, 0x01	; 1
    142e:	31 09       	sbc	r19, r1
    1430:	40 e0       	ldi	r20, 0x00	; 0
    1432:	50 e0       	ldi	r21, 0x00	; 0
    1434:	69 ec       	ldi	r22, 0xC9	; 201
    1436:	78 e0       	ldi	r23, 0x08	; 8
    1438:	ce 01       	movw	r24, r28
    143a:	01 96       	adiw	r24, 0x01	; 1
    143c:	0e 94 e1 33 	call	0x67c2	; 0x67c2 <_ZNK6String9substringEjj>
    1440:	be 01       	movw	r22, r28
    1442:	6f 5f       	subi	r22, 0xFF	; 255
    1444:	7f 4f       	sbci	r23, 0xFF	; 255
    1446:	89 ec       	ldi	r24, 0xC9	; 201
    1448:	98 e0       	ldi	r25, 0x08	; 8
    144a:	0e 94 58 32 	call	0x64b0	; 0x64b0 <_ZN6StringaSEOS_>
    144e:	ce 01       	movw	r24, r28
    1450:	01 96       	adiw	r24, 0x01	; 1
    1452:	0e 94 7d 31 	call	0x62fa	; 0x62fa <_ZN6StringD1Ev>
		}
		case ('#'): {
			if (TARGA.length() == 5) {
    1456:	80 91 cd 08 	lds	r24, 0x08CD	; 0x8008cd <TARGA+0x4>
    145a:	90 91 ce 08 	lds	r25, 0x08CE	; 0x8008ce <TARGA+0x5>
    145e:	05 97       	sbiw	r24, 0x05	; 5
    1460:	79 f5       	brne	.+94     	; 0x14c0 <_Z10inputTargac+0x116>
				mezzo.TARGA = TARGA;
    1462:	69 ec       	ldi	r22, 0xC9	; 201
    1464:	78 e0       	ldi	r23, 0x08	; 8
    1466:	84 ec       	ldi	r24, 0xC4	; 196
    1468:	99 e0       	ldi	r25, 0x09	; 9
    146a:	0e 94 3b 32 	call	0x6476	; 0x6476 <_ZN6StringaSERKS_>
				RaccoltaDati[1] = mezzo.TARGA;
    146e:	64 ec       	ldi	r22, 0xC4	; 196
    1470:	79 e0       	ldi	r23, 0x09	; 9
    1472:	8f e4       	ldi	r24, 0x4F	; 79
    1474:	99 e0       	ldi	r25, 0x09	; 9
    1476:	0e 94 3b 32 	call	0x6476	; 0x6476 <_ZN6StringaSERKS_>
				avanzaStato(TinputTarga);
    147a:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <TinputTarga>
    147e:	70 91 23 01 	lds	r23, 0x0123	; 0x800123 <TinputTarga+0x1>
    1482:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <TinputTarga+0x2>
    1486:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <TinputTarga+0x3>
    148a:	a1 d9       	rcall	.-3262   	; 0x7ce <_Z11avanzaStatom>
    148c:	19 c0       	rjmp	.+50     	; 0x14c0 <_Z10inputTargac+0x116>
			}
		}
		break;
		default:  {
			TARGA += String(T);
    148e:	68 2f       	mov	r22, r24
    1490:	ce 01       	movw	r24, r28
    1492:	01 96       	adiw	r24, 0x01	; 1
    1494:	0e 94 78 32 	call	0x64f0	; 0x64f0 <_ZN6StringC1Ec>
	unsigned char concat(double num);
	unsigned char concat(const __FlashStringHelper * str);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    1498:	be 01       	movw	r22, r28
    149a:	6f 5f       	subi	r22, 0xFF	; 255
    149c:	7f 4f       	sbci	r23, 0xFF	; 255
    149e:	89 ec       	ldi	r24, 0xC9	; 201
    14a0:	98 e0       	ldi	r25, 0x08	; 8
    14a2:	0e 94 69 33 	call	0x66d2	; 0x66d2 <_ZN6String6concatERKS_>
    14a6:	ce 01       	movw	r24, r28
    14a8:	01 96       	adiw	r24, 0x01	; 1
    14aa:	0e 94 7d 31 	call	0x62fa	; 0x62fa <_ZN6StringD1Ev>
    14ae:	9f ef       	ldi	r25, 0xFF	; 255
    14b0:	29 ef       	ldi	r18, 0xF9	; 249
    14b2:	80 e0       	ldi	r24, 0x00	; 0
    14b4:	91 50       	subi	r25, 0x01	; 1
    14b6:	20 40       	sbci	r18, 0x00	; 0
    14b8:	80 40       	sbci	r24, 0x00	; 0
    14ba:	e1 f7       	brne	.-8      	; 0x14b4 <_Z10inputTargac+0x10a>
    14bc:	00 c0       	rjmp	.+0      	; 0x14be <_Z10inputTargac+0x114>
    14be:	00 00       	nop
			_delay_ms(20);
		}
		break;
	}
}
    14c0:	26 96       	adiw	r28, 0x06	; 6
    14c2:	0f b6       	in	r0, 0x3f	; 63
    14c4:	f8 94       	cli
    14c6:	de bf       	out	0x3e, r29	; 62
    14c8:	0f be       	out	0x3f, r0	; 63
    14ca:	cd bf       	out	0x3d, r28	; 61
    14cc:	df 91       	pop	r29
    14ce:	cf 91       	pop	r28
    14d0:	08 95       	ret

000014d2 <loop>:

/**************************LOOP PROCEDURA************************************/
void loop() {
    14d2:	cf 92       	push	r12
    14d4:	df 92       	push	r13
    14d6:	ef 92       	push	r14
    14d8:	ff 92       	push	r15
    14da:	0f 93       	push	r16
    14dc:	1f 93       	push	r17
    14de:	cf 93       	push	r28
    14e0:	df 93       	push	r29
    14e2:	cd b7       	in	r28, 0x3d	; 61
    14e4:	de b7       	in	r29, 0x3e	; 62
    14e6:	a3 97       	sbiw	r28, 0x23	; 35
    14e8:	0f b6       	in	r0, 0x3f	; 63
    14ea:	f8 94       	cli
    14ec:	de bf       	out	0x3e, r29	; 62
    14ee:	0f be       	out	0x3f, r0	; 63
    14f0:	cd bf       	out	0x3d, r28	; 61
      
  switch (stato_procedura) {
    14f2:	e0 91 75 09 	lds	r30, 0x0975	; 0x800975 <stato_procedura>
    14f6:	f0 91 76 09 	lds	r31, 0x0976	; 0x800976 <stato_procedura+0x1>
    14fa:	32 96       	adiw	r30, 0x02	; 2
    14fc:	ec 30       	cpi	r30, 0x0C	; 12
    14fe:	f1 05       	cpc	r31, r1
    1500:	08 f0       	brcs	.+2      	; 0x1504 <loop+0x32>
    1502:	53 c4       	rjmp	.+2214   	; 0x1daa <loop+0x8d8>
    1504:	ea 5b       	subi	r30, 0xBA	; 186
    1506:	ff 4f       	sbci	r31, 0xFF	; 255
    1508:	0c 94 99 35 	jmp	0x6b32	; 0x6b32 <__tablejump2__>
    case -2:
    { //cli(); // disable interrupt      
            
      righeDisplay[1] =  "";
    150c:	64 e8       	ldi	r22, 0x84	; 132
    150e:	71 e0       	ldi	r23, 0x01	; 1
    1510:	85 e2       	ldi	r24, 0x25	; 37
    1512:	99 e0       	ldi	r25, 0x09	; 9
    1514:	0e 94 63 32 	call	0x64c6	; 0x64c6 <_ZN6StringaSEPKc>
      righeDisplay[2] = "Setting....";
    1518:	6e ef       	ldi	r22, 0xFE	; 254
    151a:	74 e0       	ldi	r23, 0x04	; 4
    151c:	8b e2       	ldi	r24, 0x2B	; 43
    151e:	99 e0       	ldi	r25, 0x09	; 9
    1520:	0e 94 63 32 	call	0x64c6	; 0x64c6 <_ZN6StringaSEPKc>
      righeDisplay[3] =  "";
    1524:	64 e8       	ldi	r22, 0x84	; 132
    1526:	71 e0       	ldi	r23, 0x01	; 1
    1528:	81 e3       	ldi	r24, 0x31	; 49
    152a:	99 e0       	ldi	r25, 0x09	; 9
    152c:	0e 94 63 32 	call	0x64c6	; 0x64c6 <_ZN6StringaSEPKc>
      
      displayLCD(righeDisplay,stato_procedura,100);
    1530:	60 91 75 09 	lds	r22, 0x0975	; 0x800975 <stato_procedura>
    1534:	70 91 76 09 	lds	r23, 0x0976	; 0x800976 <stato_procedura+0x1>
    1538:	44 e6       	ldi	r20, 0x64	; 100
    153a:	50 e0       	ldi	r21, 0x00	; 0
    153c:	8f e1       	ldi	r24, 0x1F	; 31
    153e:	99 e0       	ldi	r25, 0x09	; 9
    1540:	a6 d8       	rcall	.-3764   	; 0x68e <_Z10displayLCDP6Stringii>
    1542:	2f ef       	ldi	r18, 0xFF	; 255
    1544:	33 ec       	ldi	r19, 0xC3	; 195
    1546:	89 e0       	ldi	r24, 0x09	; 9
    1548:	21 50       	subi	r18, 0x01	; 1
    154a:	30 40       	sbci	r19, 0x00	; 0
    154c:	80 40       	sbci	r24, 0x00	; 0
    154e:	e1 f7       	brne	.-8      	; 0x1548 <loop+0x76>
      stato_procedura++;
    }
    break;
    case -1:
    {             
    abilitaPulsanti();
    1550:	43 c0       	rjmp	.+134    	; 0x15d8 <loop+0x106>
    1552:	b5 dd       	rcall	.-1174   	; 0x10be <_Z15abilitaPulsantiv>
    1554:	9f ef       	ldi	r25, 0xFF	; 255
    1556:	29 ef       	ldi	r18, 0xF9	; 249
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	91 50       	subi	r25, 0x01	; 1
    155c:	20 40       	sbci	r18, 0x00	; 0
    155e:	30 40       	sbci	r19, 0x00	; 0
    1560:	e1 f7       	brne	.-8      	; 0x155a <loop+0x88>
    1562:	00 c0       	rjmp	.+0      	; 0x1564 <loop+0x92>
    _delay_ms(20);
    abilitaContattiPistola();
    1564:	00 00       	nop
    1566:	b5 dd       	rcall	.-1174   	; 0x10d2 <_Z22abilitaContattiPistolav>
    
    stato_procedura++;
    1568:	80 91 75 09 	lds	r24, 0x0975	; 0x800975 <stato_procedura>
    156c:	90 91 76 09 	lds	r25, 0x0976	; 0x800976 <stato_procedura+0x1>
    1570:	01 96       	adiw	r24, 0x01	; 1
    1572:	90 93 76 09 	sts	0x0976, r25	; 0x800976 <stato_procedura+0x1>
    1576:	80 93 75 09 	sts	0x0975, r24	; 0x800975 <stato_procedura>
    }
    break;
    157a:	17 c4       	rjmp	.+2094   	; 0x1daa <loop+0x8d8>
    case 0:
    { 
      righeDisplay[1] =  "";
    157c:	64 e8       	ldi	r22, 0x84	; 132
    157e:	71 e0       	ldi	r23, 0x01	; 1
    1580:	85 e2       	ldi	r24, 0x25	; 37
    1582:	99 e0       	ldi	r25, 0x09	; 9
    1584:	0e 94 63 32 	call	0x64c6	; 0x64c6 <_ZN6StringaSEPKc>
      righeDisplay[2] =  "";
    1588:	64 e8       	ldi	r22, 0x84	; 132
    158a:	71 e0       	ldi	r23, 0x01	; 1
    158c:	8b e2       	ldi	r24, 0x2B	; 43
    158e:	99 e0       	ldi	r25, 0x09	; 9
    1590:	0e 94 63 32 	call	0x64c6	; 0x64c6 <_ZN6StringaSEPKc>
      righeDisplay[3] =  "";
    1594:	64 e8       	ldi	r22, 0x84	; 132
    1596:	71 e0       	ldi	r23, 0x01	; 1
    1598:	81 e3       	ldi	r24, 0x31	; 49
    159a:	99 e0       	ldi	r25, 0x09	; 9
    159c:	0e 94 63 32 	call	0x64c6	; 0x64c6 <_ZN6StringaSEPKc>
          
      displayLCD(righeDisplay,stato_procedura,100);
    15a0:	60 91 75 09 	lds	r22, 0x0975	; 0x800975 <stato_procedura>
    15a4:	70 91 76 09 	lds	r23, 0x0976	; 0x800976 <stato_procedura+0x1>
    15a8:	44 e6       	ldi	r20, 0x64	; 100
    15aa:	50 e0       	ldi	r21, 0x00	; 0
    15ac:	8f e1       	ldi	r24, 0x1F	; 31
    15ae:	99 e0       	ldi	r25, 0x09	; 9
    15b0:	6e d8       	rcall	.-3876   	; 0x68e <_Z10displayLCDP6Stringii>
    15b2:	8f ef       	ldi	r24, 0xFF	; 255
    15b4:	97 ea       	ldi	r25, 0xA7	; 167
    15b6:	21 e6       	ldi	r18, 0x61	; 97
    15b8:	81 50       	subi	r24, 0x01	; 1
    15ba:	90 40       	sbci	r25, 0x00	; 0
    15bc:	20 40       	sbci	r18, 0x00	; 0
    15be:	e1 f7       	brne	.-8      	; 0x15b8 <loop+0xe6>
    15c0:	00 c0       	rjmp	.+0      	; 0x15c2 <loop+0xf0>
    15c2:	00 00       	nop
      _delay_ms(2000);
      alreadyTimbrata = false;  
    15c4:	10 92 b4 09 	sts	0x09B4, r1	; 0x8009b4 <alreadyTimbrata>
static const uint8_t RELE1 = PORTC7;
static const uint8_t RELE2 = PORTA7;
/*********************************************************************************************/
static inline void initSS_FLASH()  { DDRB |= (1 << PB4); } // set DDRB bit 4, sets PB4 for output
static inline void initSS_ETH()    { DDRC |= (1 << PC4); } // set DDRC bit 4, sets PC4 for output
static inline void enable_ETH()    { PORTC &= ~(1 << PC4); } // Set 0 Bit 4 PORTC Register
    15c8:	44 98       	cbi	0x08, 4	; 8
    15ca:	3f ef       	ldi	r19, 0xFF	; 255
    15cc:	83 ed       	ldi	r24, 0xD3	; 211
    15ce:	90 e3       	ldi	r25, 0x30	; 48
    15d0:	31 50       	subi	r19, 0x01	; 1
    15d2:	80 40       	sbci	r24, 0x00	; 0
    15d4:	90 40       	sbci	r25, 0x00	; 0
    15d6:	e1 f7       	brne	.-8      	; 0x15d0 <loop+0xfe>
    15d8:	00 c0       	rjmp	.+0      	; 0x15da <loop+0x108>
    15da:	00 00       	nop
    15dc:	c5 cf       	rjmp	.-118    	; 0x1568 <loop+0x96>
      stato_procedura++;
    }
    break;
    case 1:
    { 
		TARGA = "";
    15de:	64 e8       	ldi	r22, 0x84	; 132
    15e0:	71 e0       	ldi	r23, 0x01	; 1
    15e2:	89 ec       	ldi	r24, 0xC9	; 201
    15e4:	98 e0       	ldi	r25, 0x08	; 8
    15e6:	0e 94 63 32 	call	0x64c6	; 0x64c6 <_ZN6StringaSEPKc>
			
		righeDisplay[1] = " * AUTENTICAZIONE *";
    15ea:	6a e0       	ldi	r22, 0x0A	; 10
    15ec:	75 e0       	ldi	r23, 0x05	; 5
    15ee:	85 e2       	ldi	r24, 0x25	; 37
    15f0:	99 e0       	ldi	r25, 0x09	; 9
    15f2:	0e 94 63 32 	call	0x64c6	; 0x64c6 <_ZN6StringaSEPKc>
		righeDisplay[2] = "";
    15f6:	64 e8       	ldi	r22, 0x84	; 132
    15f8:	71 e0       	ldi	r23, 0x01	; 1
    15fa:	8b e2       	ldi	r24, 0x2B	; 43
    15fc:	99 e0       	ldi	r25, 0x09	; 9
    15fe:	0e 94 63 32 	call	0x64c6	; 0x64c6 <_ZN6StringaSEPKc>
		righeDisplay[3] = "    Avvicina ATE  ";
    1602:	6e e1       	ldi	r22, 0x1E	; 30
    1604:	75 e0       	ldi	r23, 0x05	; 5
    1606:	81 e3       	ldi	r24, 0x31	; 49
    1608:	99 e0       	ldi	r25, 0x09	; 9
    160a:	0e 94 63 32 	call	0x64c6	; 0x64c6 <_ZN6StringaSEPKc>
    
		displayLCD(righeDisplay,stato_procedura,100);     
    160e:	60 91 75 09 	lds	r22, 0x0975	; 0x800975 <stato_procedura>
    1612:	70 91 76 09 	lds	r23, 0x0976	; 0x800976 <stato_procedura+0x1>
    1616:	44 e6       	ldi	r20, 0x64	; 100
    1618:	50 e0       	ldi	r21, 0x00	; 0
    161a:	8f e1       	ldi	r24, 0x1F	; 31
    161c:	99 e0       	ldi	r25, 0x09	; 9
    161e:	37 d8       	rcall	.-3986   	; 0x68e <_Z10displayLCDP6Stringii>
		_delay_ms(10);
		avanzaStato(TinputTarga);
		/*****************************************/

		/*****************************************************/
		String ATe = "ERRORE";
    1620:	61 ec       	ldi	r22, 0xC1	; 193
    1622:	71 e0       	ldi	r23, 0x01	; 1
    1624:	ce 01       	movw	r24, r28
    1626:	46 96       	adiw	r24, 0x16	; 22
    1628:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <_ZN6StringC1EPKc>
		if (!alreadyTimbrata) {ATe = GetCodeRfidATe(); Buzzer(2,100);}
    162c:	80 91 b4 09 	lds	r24, 0x09B4	; 0x8009b4 <alreadyTimbrata>
    1630:	81 11       	cpse	r24, r1
    1632:	15 c0       	rjmp	.+42     	; 0x165e <loop+0x18c>
    1634:	ce 01       	movw	r24, r28
    1636:	01 96       	adiw	r24, 0x01	; 1
    1638:	cb d9       	rcall	.-3178   	; 0x9d0 <_Z14GetCodeRfidATev>
    163a:	be 01       	movw	r22, r28
    163c:	6f 5f       	subi	r22, 0xFF	; 255
    163e:	7f 4f       	sbci	r23, 0xFF	; 255
    1640:	ce 01       	movw	r24, r28
    1642:	46 96       	adiw	r24, 0x16	; 22
    1644:	0e 94 58 32 	call	0x64b0	; 0x64b0 <_ZN6StringaSEOS_>
    1648:	ce 01       	movw	r24, r28
    164a:	01 96       	adiw	r24, 0x01	; 1
    164c:	0e 94 7d 31 	call	0x62fa	; 0x62fa <_ZN6StringD1Ev>
    1650:	44 e6       	ldi	r20, 0x64	; 100
    1652:	50 e0       	ldi	r21, 0x00	; 0
    1654:	60 e0       	ldi	r22, 0x00	; 0
    1656:	70 e0       	ldi	r23, 0x00	; 0
    1658:	82 e0       	ldi	r24, 0x02	; 2
    165a:	0e 94 43 02 	call	0x486	; 0x486 <_Z6Buzzerhm>
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
    165e:	61 ec       	ldi	r22, 0xC1	; 193
    1660:	71 e0       	ldi	r23, 0x01	; 1
    1662:	ce 01       	movw	r24, r28
    1664:	46 96       	adiw	r24, 0x16	; 22
    1666:	0e 94 c3 33 	call	0x6786	; 0x6786 <_ZNK6String6equalsEPKc>
            
        if ((ATe != "ERRORE") && (BIT_IS_CLEAR(PORTC,4)))
    166a:	81 11       	cpse	r24, r1
    166c:	02 c0       	rjmp	.+4      	; 0x1672 <loop+0x1a0>
    166e:	44 9b       	sbis	0x08, 4	; 8
    1670:	da c3       	rjmp	.+1972   	; 0x1e26 <loop+0x954>
                                  
          // Effettua chiamata REST per validare CARD NFC
          // Se la CARD è valida memorizza in memoria l'operazione e prosegui
          // Altrimenti Memorizza in Memoria e Azzera la procedura. // DA IMPLEMENTARE
     
        if (GetAteValidation(80,serverATE,clientATE,ATe)) 
    1672:	be 01       	movw	r22, r28
    1674:	6a 5e       	subi	r22, 0xEA	; 234
    1676:	7f 4f       	sbci	r23, 0xFF	; 255
    1678:	ce 01       	movw	r24, r28
    167a:	0e 96       	adiw	r24, 0x0e	; 14
    167c:	0e 94 50 32 	call	0x64a0	; 0x64a0 <_ZN6StringC1ERKS_>
#ifdef BIN // Prevent warnings if BIN is previously defined in "iotnx4.h" or similar
#undef BIN
#endif
#define BIN 2

class Print
    1680:	80 91 ef 08 	lds	r24, 0x08EF	; 0x8008ef <clientATE+0x2>
    1684:	90 91 f0 08 	lds	r25, 0x08F0	; 0x8008f0 <clientATE+0x3>
    1688:	9c 83       	std	Y+4, r25	; 0x04
    168a:	8b 83       	std	Y+3, r24	; 0x03
    SKIP_WHITESPACE // Only tabs, spaces, line feeds & carriage returns are skipped.
};

#define NO_IGNORE_CHAR  '\x01' // a char not found in a valid ASCII numeric field

class Stream : public Print
    168c:	80 91 f1 08 	lds	r24, 0x08F1	; 0x8008f1 <clientATE+0x4>
    1690:	90 91 f2 08 	lds	r25, 0x08F2	; 0x8008f2 <clientATE+0x5>
    1694:	a0 91 f3 08 	lds	r26, 0x08F3	; 0x8008f3 <clientATE+0x6>
    1698:	b0 91 f4 08 	lds	r27, 0x08F4	; 0x8008f4 <clientATE+0x7>
    169c:	8d 83       	std	Y+5, r24	; 0x05
    169e:	9e 83       	std	Y+6, r25	; 0x06
    16a0:	af 83       	std	Y+7, r26	; 0x07
    16a2:	b8 87       	std	Y+8, r27	; 0x08
    16a4:	80 91 f5 08 	lds	r24, 0x08F5	; 0x8008f5 <clientATE+0x8>
    16a8:	90 91 f6 08 	lds	r25, 0x08F6	; 0x8008f6 <clientATE+0x9>
    16ac:	a0 91 f7 08 	lds	r26, 0x08F7	; 0x8008f7 <clientATE+0xa>
    16b0:	b0 91 f8 08 	lds	r27, 0x08F8	; 0x8008f8 <clientATE+0xb>
    16b4:	89 87       	std	Y+9, r24	; 0x09
    16b6:	9a 87       	std	Y+10, r25	; 0x0a
    16b8:	ab 87       	std	Y+11, r26	; 0x0b
    16ba:	bc 87       	std	Y+12, r27	; 0x0c
#include "Arduino.h"	
#include "Print.h"
#include "Client.h"
#include "IPAddress.h"

class EthernetClient : public Client {
    16bc:	81 e2       	ldi	r24, 0x21	; 33
    16be:	98 e0       	ldi	r25, 0x08	; 8
    16c0:	9a 83       	std	Y+2, r25	; 0x02
    16c2:	89 83       	std	Y+1, r24	; 0x01
    16c4:	80 91 f9 08 	lds	r24, 0x08F9	; 0x8008f9 <clientATE+0xc>
    16c8:	8d 87       	std	Y+13, r24	; 0x0d
    16ca:	9e 01       	movw	r18, r28
    16cc:	22 5f       	subi	r18, 0xF2	; 242
    16ce:	3f 4f       	sbci	r19, 0xFF	; 255
    16d0:	ae 01       	movw	r20, r28
    16d2:	4f 5f       	subi	r20, 0xFF	; 255
    16d4:	5f 4f       	sbci	r21, 0xFF	; 255
    16d6:	63 e4       	ldi	r22, 0x43	; 67
    16d8:	71 e0       	ldi	r23, 0x01	; 1
    16da:	80 e5       	ldi	r24, 0x50	; 80
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	35 da       	rcall	.-2966   	; 0xb4a <_Z16GetAteValidationiPc14EthernetClient6String>
    16e0:	18 2f       	mov	r17, r24
    16e2:	ce 01       	movw	r24, r28
    16e4:	0e 96       	adiw	r24, 0x0e	; 14
    16e6:	0e 94 7d 31 	call	0x62fa	; 0x62fa <_ZN6StringD1Ev>
    16ea:	11 23       	and	r17, r17
    16ec:	91 f1       	breq	.+100    	; 0x1752 <loop+0x280>
        { 
			RaccoltaDati[5] = "000";
    16ee:	61 e3       	ldi	r22, 0x31	; 49
    16f0:	75 e0       	ldi	r23, 0x05	; 5
    16f2:	87 e6       	ldi	r24, 0x67	; 103
    16f4:	99 e0       	ldi	r25, 0x09	; 9
    16f6:	0e 94 63 32 	call	0x64c6	; 0x64c6 <_ZN6StringaSEPKc>
            SET_BIT(PORTC,PC4);
    16fa:	44 9a       	sbi	0x08, 4	; 8
            Buzzer(1,400); 		
    16fc:	40 e9       	ldi	r20, 0x90	; 144
    16fe:	51 e0       	ldi	r21, 0x01	; 1
    1700:	60 e0       	ldi	r22, 0x00	; 0
    1702:	70 e0       	ldi	r23, 0x00	; 0
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	0e 94 43 02 	call	0x486	; 0x486 <_Z6Buzzerhm>
			righeDisplay[1] =  "****** TARGA ******";
    170a:	65 e3       	ldi	r22, 0x35	; 53
    170c:	75 e0       	ldi	r23, 0x05	; 5
    170e:	85 e2       	ldi	r24, 0x25	; 37
    1710:	99 e0       	ldi	r25, 0x09	; 9
    1712:	0e 94 63 32 	call	0x64c6	; 0x64c6 <_ZN6StringaSEPKc>
			righeDisplay[2] =  "";
    1716:	64 e8       	ldi	r22, 0x84	; 132
    1718:	71 e0       	ldi	r23, 0x01	; 1
    171a:	8b e2       	ldi	r24, 0x2B	; 43
    171c:	99 e0       	ldi	r25, 0x09	; 9
    171e:	0e 94 63 32 	call	0x64c6	; 0x64c6 <_ZN6StringaSEPKc>
			righeDisplay[3] = "TARGA:";            
    1722:	69 e4       	ldi	r22, 0x49	; 73
    1724:	75 e0       	ldi	r23, 0x05	; 5
    1726:	81 e3       	ldi	r24, 0x31	; 49
    1728:	99 e0       	ldi	r25, 0x09	; 9
    172a:	0e 94 63 32 	call	0x64c6	; 0x64c6 <_ZN6StringaSEPKc>
            displayLCD(righeDisplay,stato_procedura,10);   			
    172e:	60 91 75 09 	lds	r22, 0x0975	; 0x800975 <stato_procedura>
    1732:	70 91 76 09 	lds	r23, 0x0976	; 0x800976 <stato_procedura+0x1>
    1736:	4a e0       	ldi	r20, 0x0A	; 10
    1738:	50 e0       	ldi	r21, 0x00	; 0
    173a:	8f e1       	ldi	r24, 0x1F	; 31
    173c:	99 e0       	ldi	r25, 0x09	; 9
    173e:	0e 94 47 03 	call	0x68e	; 0x68e <_Z10displayLCDP6Stringii>
    1742:	2f ef       	ldi	r18, 0xFF	; 255
    1744:	30 e7       	ldi	r19, 0x70	; 112
    1746:	82 e0       	ldi	r24, 0x02	; 2
    1748:	21 50       	subi	r18, 0x01	; 1
    174a:	30 40       	sbci	r19, 0x00	; 0
    174c:	80 40       	sbci	r24, 0x00	; 0
    174e:	e1 f7       	brne	.-8      	; 0x1748 <loop+0x276>
    1750:	30 c0       	rjmp	.+96     	; 0x17b2 <loop+0x2e0>
			_delay_ms(50);			
		    avanzaStato(TinputTarga); 
          } 
         else 
          { 
			RaccoltaDati[5] = "111";
    1752:	60 e5       	ldi	r22, 0x50	; 80
    1754:	75 e0       	ldi	r23, 0x05	; 5
    1756:	87 e6       	ldi	r24, 0x67	; 103
    1758:	99 e0       	ldi	r25, 0x09	; 9
    175a:	0e 94 63 32 	call	0x64c6	; 0x64c6 <_ZN6StringaSEPKc>
            Buzzer(3,200);
    175e:	48 ec       	ldi	r20, 0xC8	; 200
    1760:	50 e0       	ldi	r21, 0x00	; 0
    1762:	60 e0       	ldi	r22, 0x00	; 0
    1764:	70 e0       	ldi	r23, 0x00	; 0
    1766:	83 e0       	ldi	r24, 0x03	; 3
    1768:	0e 94 43 02 	call	0x486	; 0x486 <_Z6Buzzerhm>
			righeDisplay[1] =  "****** TARGA ******";			
    176c:	65 e3       	ldi	r22, 0x35	; 53
    176e:	75 e0       	ldi	r23, 0x05	; 5
    1770:	85 e2       	ldi	r24, 0x25	; 37
    1772:	99 e0       	ldi	r25, 0x09	; 9
    1774:	0e 94 63 32 	call	0x64c6	; 0x64c6 <_ZN6StringaSEPKc>
			righeDisplay[2] = "TARGA:";
    1778:	69 e4       	ldi	r22, 0x49	; 73
    177a:	75 e0       	ldi	r23, 0x05	; 5
    177c:	8b e2       	ldi	r24, 0x2B	; 43
    177e:	99 e0       	ldi	r25, 0x09	; 9
    1780:	0e 94 63 32 	call	0x64c6	; 0x64c6 <_ZN6StringaSEPKc>
			righeDisplay[3] = "#:Conferma A:Avanti";
    1784:	64 e5       	ldi	r22, 0x54	; 84
    1786:	75 e0       	ldi	r23, 0x05	; 5
    1788:	81 e3       	ldi	r24, 0x31	; 49
    178a:	99 e0       	ldi	r25, 0x09	; 9
    178c:	0e 94 63 32 	call	0x64c6	; 0x64c6 <_ZN6StringaSEPKc>
            displayLCD(righeDisplay,stato_procedura,10);       
    1790:	60 91 75 09 	lds	r22, 0x0975	; 0x800975 <stato_procedura>
    1794:	70 91 76 09 	lds	r23, 0x0976	; 0x800976 <stato_procedura+0x1>
    1798:	4a e0       	ldi	r20, 0x0A	; 10
    179a:	50 e0       	ldi	r21, 0x00	; 0
    179c:	8f e1       	ldi	r24, 0x1F	; 31
    179e:	99 e0       	ldi	r25, 0x09	; 9
    17a0:	0e 94 47 03 	call	0x68e	; 0x68e <_Z10displayLCDP6Stringii>
    17a4:	9f ef       	ldi	r25, 0xFF	; 255
    17a6:	20 e7       	ldi	r18, 0x70	; 112
    17a8:	32 e0       	ldi	r19, 0x02	; 2
    17aa:	91 50       	subi	r25, 0x01	; 1
    17ac:	20 40       	sbci	r18, 0x00	; 0
    17ae:	30 40       	sbci	r19, 0x00	; 0
    17b0:	e1 f7       	brne	.-8      	; 0x17aa <loop+0x2d8>
    17b2:	00 c0       	rjmp	.+0      	; 0x17b4 <loop+0x2e2>
    17b4:	00 00       	nop
			_delay_ms(50);    
            avanzaStato(TinputTarga);
    17b6:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <TinputTarga>
    17ba:	70 91 23 01 	lds	r23, 0x0123	; 0x800123 <TinputTarga+0x1>
    17be:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <TinputTarga+0x2>
    17c2:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <TinputTarga+0x3>
    17c6:	03 d8       	rcall	.-4090   	; 0x7ce <_Z11avanzaStatom>
		_delay_ms(10);
		avanzaStato(TinputTarga);
		/*****************************************/

		/*****************************************************/
		String ATe = "ERRORE";
    17c8:	ce 01       	movw	r24, r28
    17ca:	46 96       	adiw	r24, 0x16	; 22
    17cc:	2f c1       	rjmp	.+606    	; 0x1a2c <loop+0x55a>
      // da commentare
      // Carburante = "D"; // Simulo Abilitazione Diesel
      // da commentare
      // Carburante = "B"; // Simulo Abilitazione Benzina
	  /*****************************************************************/
	  gpio.setCONFREG(0x3C);
    17ce:	6c e3       	ldi	r22, 0x3C	; 60
    17d0:	86 ec       	ldi	r24, 0xC6	; 198
    17d2:	98 e0       	ldi	r25, 0x08	; 8
    17d4:	0e 94 21 14 	call	0x2842	; 0x2842 <_ZN7PCA953410setCONFREGEh>
	  uint8_t c = gpio.Read_IP_REGISTER();
    17d8:	86 ec       	ldi	r24, 0xC6	; 198
    17da:	98 e0       	ldi	r25, 0x08	; 8
    17dc:	0e 94 38 14 	call	0x2870	; 0x2870 <_ZN7PCA953416Read_IP_REGISTEREv>
    17e0:	08 2f       	mov	r16, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    17e2:	42 e0       	ldi	r20, 0x02	; 2
    17e4:	be 01       	movw	r22, r28
    17e6:	6a 5e       	subi	r22, 0xEA	; 234
    17e8:	7f 4f       	sbci	r23, 0xFF	; 255
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	0e 94 17 38 	call	0x702e	; 0x702e <__itoa_ncheck>
	  char buf[8];
	  itoa(c,buf,2);
	  gpio.setCONFREG(0xC3);
    17f0:	63 ec       	ldi	r22, 0xC3	; 195
    17f2:	86 ec       	ldi	r24, 0xC6	; 198
    17f4:	98 e0       	ldi	r25, 0x08	; 8
    17f6:	0e 94 21 14 	call	0x2842	; 0x2842 <_ZN7PCA953410setCONFREGEh>
	  uint8_t r = gpio.Read_IP_REGISTER();
    17fa:	86 ec       	ldi	r24, 0xC6	; 198
    17fc:	98 e0       	ldi	r25, 0x08	; 8
    17fe:	0e 94 38 14 	call	0x2870	; 0x2870 <_ZN7PCA953416Read_IP_REGISTEREv>
    1802:	18 2f       	mov	r17, r24
    1804:	42 e0       	ldi	r20, 0x02	; 2
    1806:	be 01       	movw	r22, r28
    1808:	62 5f       	subi	r22, 0xF2	; 242
    180a:	7f 4f       	sbci	r23, 0xFF	; 255
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	0e 94 17 38 	call	0x702e	; 0x702e <__itoa_ncheck>
	  char bufr[8];
	  itoa(r,bufr,2);
	  char ris[8];
	  uint8_t z = (r ^ c);
	  itoa(z,ris,2);
    1812:	10 27       	eor	r17, r16
    1814:	01 2f       	mov	r16, r17
    1816:	10 e0       	ldi	r17, 0x00	; 0
    1818:	42 e0       	ldi	r20, 0x02	; 2
    181a:	be 01       	movw	r22, r28
    181c:	6f 5f       	subi	r22, 0xFF	; 255
    181e:	7f 4f       	sbci	r23, 0xFF	; 255
    1820:	c8 01       	movw	r24, r16
    1822:	0e 94 17 38 	call	0x702e	; 0x702e <__itoa_ncheck>
	  char T = getCharKeypad(int(z));
    1826:	c8 01       	movw	r24, r16
    1828:	0e 94 61 02 	call	0x4c2	; 0x4c2 <_Z13getCharKeypadi>
    182c:	9f ef       	ldi	r25, 0xFF	; 255
    182e:	29 ef       	ldi	r18, 0xF9	; 249
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	91 50       	subi	r25, 0x01	; 1
    1834:	20 40       	sbci	r18, 0x00	; 0
    1836:	30 40       	sbci	r19, 0x00	; 0
    1838:	e1 f7       	brne	.-8      	; 0x1832 <loop+0x360>
    183a:	00 c0       	rjmp	.+0      	; 0x183c <loop+0x36a>
	  _delay_ms(20);
	  /*****************************************************************/
	  
	  inputTarga(T); 
    183c:	00 00       	nop
    183e:	b5 dd       	rcall	.-1174   	; 0x13aa <_Z10inputTargac>
	  
	  righeDisplay[1] =  "****** TARGA ******";
    1840:	65 e3       	ldi	r22, 0x35	; 53
    1842:	75 e0       	ldi	r23, 0x05	; 5
    1844:	85 e2       	ldi	r24, 0x25	; 37
    1846:	99 e0       	ldi	r25, 0x09	; 9
    1848:	0e 94 63 32 	call	0x64c6	; 0x64c6 <_ZN6StringaSEPKc>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    184c:	69 e4       	ldi	r22, 0x49	; 73
    184e:	75 e0       	ldi	r23, 0x05	; 5
    1850:	ce 01       	movw	r24, r28
    1852:	4e 96       	adiw	r24, 0x1e	; 30
    1854:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <_ZN6StringC1EPKc>
	  righeDisplay[2] = "TARGA:" + TARGA;
    1858:	69 ec       	ldi	r22, 0xC9	; 201
    185a:	78 e0       	ldi	r23, 0x08	; 8
    185c:	ce 01       	movw	r24, r28
    185e:	4e 96       	adiw	r24, 0x1e	; 30
    1860:	0e 94 8f 33 	call	0x671e	; 0x671e <_ZplRK15StringSumHelperRK6String>
    1864:	bc 01       	movw	r22, r24
    1866:	8b e2       	ldi	r24, 0x2B	; 43
    1868:	99 e0       	ldi	r25, 0x09	; 9
    186a:	0e 94 3b 32 	call	0x6476	; 0x6476 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    186e:	ce 01       	movw	r24, r28
    1870:	4e 96       	adiw	r24, 0x1e	; 30
    1872:	0e 94 7d 31 	call	0x62fa	; 0x62fa <_ZN6StringD1Ev>
	  righeDisplay[3] = "#:Conferma A:Usa TAG";
    1876:	68 e6       	ldi	r22, 0x68	; 104
    1878:	75 e0       	ldi	r23, 0x05	; 5
    187a:	81 e3       	ldi	r24, 0x31	; 49
    187c:	99 e0       	ldi	r25, 0x09	; 9
    187e:	0e 94 63 32 	call	0x64c6	; 0x64c6 <_ZN6StringaSEPKc>
	  displayLCD(righeDisplay,stato_procedura,10); 
    1882:	60 91 75 09 	lds	r22, 0x0975	; 0x800975 <stato_procedura>
    1886:	70 91 76 09 	lds	r23, 0x0976	; 0x800976 <stato_procedura+0x1>
    188a:	4a e0       	ldi	r20, 0x0A	; 10
    188c:	50 e0       	ldi	r21, 0x00	; 0
    188e:	8f e1       	ldi	r24, 0x1F	; 31
    1890:	99 e0       	ldi	r25, 0x09	; 9
    1892:	0e 94 47 03 	call	0x68e	; 0x68e <_Z10displayLCDP6Stringii>
    }
    break;
    1896:	89 c2       	rjmp	.+1298   	; 0x1daa <loop+0x8d8>
    case 3:
    {  
	  if (TARGA.length() == 5) {
    1898:	80 91 cd 08 	lds	r24, 0x08CD	; 0x8008cd <TARGA+0x4>
    189c:	90 91 ce 08 	lds	r25, 0x08CE	; 0x8008ce <TARGA+0x5>
    18a0:	05 97       	sbiw	r24, 0x05	; 5
    18a2:	b9 f4       	brne	.+46     	; 0x18d2 <loop+0x400>
		  mezzo.Carb = "X";
    18a4:	64 ee       	ldi	r22, 0xE4	; 228
    18a6:	74 e0       	ldi	r23, 0x04	; 4
    18a8:	8e eb       	ldi	r24, 0xBE	; 190
    18aa:	99 e0       	ldi	r25, 0x09	; 9
    18ac:	0e 94 63 32 	call	0x64c6	; 0x64c6 <_ZN6StringaSEPKc>
		  mezzo.TARGA = TARGA;
    18b0:	69 ec       	ldi	r22, 0xC9	; 201
    18b2:	78 e0       	ldi	r23, 0x08	; 8
    18b4:	84 ec       	ldi	r24, 0xC4	; 196
    18b6:	99 e0       	ldi	r25, 0x09	; 9
    18b8:	0e 94 3b 32 	call	0x6476	; 0x6476 <_ZN6StringaSERKS_>
		  mezzo.KM = 0;
    18bc:	10 92 ca 09 	sts	0x09CA, r1	; 0x8009ca <mezzo+0xc>
		  avanzaStato(TselDistributore); 
    18c0:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <TselDistributore>
    18c4:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <TselDistributore+0x1>
    18c8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <TselDistributore+0x2>
    18cc:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <TselDistributore+0x3>
    18d0:	eb c0       	rjmp	.+470    	; 0x1aa8 <loop+0x5d6>
	  }	  else
	  {
		  righeDisplay[1] =  "AVVICINA TAG MEZZO";
    18d2:	6d e7       	ldi	r22, 0x7D	; 125
    18d4:	75 e0       	ldi	r23, 0x05	; 5
    18d6:	85 e2       	ldi	r24, 0x25	; 37
    18d8:	99 e0       	ldi	r25, 0x09	; 9
    18da:	0e 94 63 32 	call	0x64c6	; 0x64c6 <_ZN6StringaSEPKc>
		  righeDisplay[2] =  "";
    18de:	64 e8       	ldi	r22, 0x84	; 132
    18e0:	71 e0       	ldi	r23, 0x01	; 1
    18e2:	8b e2       	ldi	r24, 0x2B	; 43
    18e4:	99 e0       	ldi	r25, 0x09	; 9
    18e6:	0e 94 63 32 	call	0x64c6	; 0x64c6 <_ZN6StringaSEPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    18ea:	60 e9       	ldi	r22, 0x90	; 144
    18ec:	75 e0       	ldi	r23, 0x05	; 5
    18ee:	ce 01       	movw	r24, r28
    18f0:	01 96       	adiw	r24, 0x01	; 1
    18f2:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <_ZN6StringC1EPKc>
		  righeDisplay[3] = "TARGA: "+  mezzo.TARGA;
    18f6:	64 ec       	ldi	r22, 0xC4	; 196
    18f8:	79 e0       	ldi	r23, 0x09	; 9
    18fa:	ce 01       	movw	r24, r28
    18fc:	01 96       	adiw	r24, 0x01	; 1
    18fe:	0e 94 8f 33 	call	0x671e	; 0x671e <_ZplRK15StringSumHelperRK6String>
    1902:	bc 01       	movw	r22, r24
    1904:	81 e3       	ldi	r24, 0x31	; 49
    1906:	99 e0       	ldi	r25, 0x09	; 9
    1908:	0e 94 3b 32 	call	0x6476	; 0x6476 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    190c:	ce 01       	movw	r24, r28
    190e:	01 96       	adiw	r24, 0x01	; 1
    1910:	0e 94 7d 31 	call	0x62fa	; 0x62fa <_ZN6StringD1Ev>
		  displayLCD(righeDisplay,stato_procedura,10);
    1914:	60 91 75 09 	lds	r22, 0x0975	; 0x800975 <stato_procedura>
    1918:	70 91 76 09 	lds	r23, 0x0976	; 0x800976 <stato_procedura+0x1>
    191c:	4a e0       	ldi	r20, 0x0A	; 10
    191e:	50 e0       	ldi	r21, 0x00	; 0
    1920:	8f e1       	ldi	r24, 0x1F	; 31
    1922:	99 e0       	ldi	r25, 0x09	; 9
    1924:	0e 94 47 03 	call	0x68e	; 0x68e <_Z10displayLCDP6Stringii>
				
		  String mezzoString = leggiTAG_Mezzo(false); // con TRUE scrive sul blocco 4 della card NFC DEL MEZZO
    1928:	60 e0       	ldi	r22, 0x00	; 0
    192a:	ce 01       	movw	r24, r28
    192c:	0e 96       	adiw	r24, 0x0e	; 14
    192e:	0e 94 05 04 	call	0x80a	; 0x80a <_Z14leggiTAG_Mezzob>
    1932:	8f e3       	ldi	r24, 0x3F	; 63
    1934:	9c e9       	ldi	r25, 0x9C	; 156
    1936:	01 97       	sbiw	r24, 0x01	; 1
    1938:	f1 f7       	brne	.-4      	; 0x1936 <loop+0x464>
    193a:	00 c0       	rjmp	.+0      	; 0x193c <loop+0x46a>
    193c:	00 00       	nop
		  _delay_ms(10);

		  Serial.println(mezzoString);
    193e:	be 01       	movw	r22, r28
    1940:	62 5f       	subi	r22, 0xF2	; 242
    1942:	7f 4f       	sbci	r23, 0xFF	; 255
    1944:	84 e2       	ldi	r24, 0x24	; 36
    1946:	9b e0       	ldi	r25, 0x0B	; 11
    1948:	0e 94 3e 2f 	call	0x5e7c	; 0x5e7c <_ZN5Print7printlnERK6String>
	int indexOf( const String &str, unsigned int fromIndex ) const;
	int lastIndexOf( char ch ) const;
	int lastIndexOf( char ch, unsigned int fromIndex ) const;
	int lastIndexOf( const String &str ) const;
	int lastIndexOf( const String &str, unsigned int fromIndex ) const;
	String substring( unsigned int beginIndex ) const { return substring(beginIndex, len); };
    194c:	2a 89       	ldd	r18, Y+18	; 0x12
    194e:	3b 89       	ldd	r19, Y+19	; 0x13
    1950:	45 e0       	ldi	r20, 0x05	; 5
    1952:	50 e0       	ldi	r21, 0x00	; 0
    1954:	be 01       	movw	r22, r28
    1956:	62 5f       	subi	r22, 0xF2	; 242
    1958:	7f 4f       	sbci	r23, 0xFF	; 255
    195a:	ce 01       	movw	r24, r28
    195c:	01 96       	adiw	r24, 0x01	; 1
    195e:	0e 94 e1 33 	call	0x67c2	; 0x67c2 <_ZNK6String9substringEjj>
      
		  mezzo.Carb = mezzoString.substring(5);
    1962:	be 01       	movw	r22, r28
    1964:	6f 5f       	subi	r22, 0xFF	; 255
    1966:	7f 4f       	sbci	r23, 0xFF	; 255
    1968:	8e eb       	ldi	r24, 0xBE	; 190
    196a:	99 e0       	ldi	r25, 0x09	; 9
    196c:	0e 94 58 32 	call	0x64b0	; 0x64b0 <_ZN6StringaSEOS_>
    1970:	ce 01       	movw	r24, r28
    1972:	01 96       	adiw	r24, 0x01	; 1
    1974:	0e 94 7d 31 	call	0x62fa	; 0x62fa <_ZN6StringD1Ev>
		  mezzo.TARGA = mezzoString.substring(0,5);
    1978:	25 e0       	ldi	r18, 0x05	; 5
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	40 e0       	ldi	r20, 0x00	; 0
    197e:	50 e0       	ldi	r21, 0x00	; 0
    1980:	be 01       	movw	r22, r28
    1982:	62 5f       	subi	r22, 0xF2	; 242
    1984:	7f 4f       	sbci	r23, 0xFF	; 255
    1986:	ce 01       	movw	r24, r28
    1988:	01 96       	adiw	r24, 0x01	; 1
    198a:	0e 94 e1 33 	call	0x67c2	; 0x67c2 <_ZNK6String9substringEjj>
    198e:	be 01       	movw	r22, r28
    1990:	6f 5f       	subi	r22, 0xFF	; 255
    1992:	7f 4f       	sbci	r23, 0xFF	; 255
    1994:	84 ec       	ldi	r24, 0xC4	; 196
    1996:	99 e0       	ldi	r25, 0x09	; 9
    1998:	0e 94 58 32 	call	0x64b0	; 0x64b0 <_ZN6StringaSEOS_>
    199c:	ce 01       	movw	r24, r28
    199e:	01 96       	adiw	r24, 0x01	; 1
    19a0:	0e 94 7d 31 	call	0x62fa	; 0x62fa <_ZN6StringD1Ev>
		  mezzo.KM = 0;
    19a4:	10 92 ca 09 	sts	0x09CA, r1	; 0x8009ca <mezzo+0xc>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    19a8:	68 e9       	ldi	r22, 0x98	; 152
    19aa:	75 e0       	ldi	r23, 0x05	; 5
    19ac:	ce 01       	movw	r24, r28
    19ae:	01 96       	adiw	r24, 0x01	; 1
    19b0:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <_ZN6StringC1EPKc>

		  Serial.println("TIPO CARBURANTE: " + mezzo.Carb);    
    19b4:	6e eb       	ldi	r22, 0xBE	; 190
    19b6:	79 e0       	ldi	r23, 0x09	; 9
    19b8:	ce 01       	movw	r24, r28
    19ba:	01 96       	adiw	r24, 0x01	; 1
    19bc:	0e 94 8f 33 	call	0x671e	; 0x671e <_ZplRK15StringSumHelperRK6String>
    19c0:	bc 01       	movw	r22, r24
    19c2:	84 e2       	ldi	r24, 0x24	; 36
    19c4:	9b e0       	ldi	r25, 0x0B	; 11
    19c6:	0e 94 3e 2f 	call	0x5e7c	; 0x5e7c <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    19ca:	ce 01       	movw	r24, r28
    19cc:	01 96       	adiw	r24, 0x01	; 1
    19ce:	0e 94 7d 31 	call	0x62fa	; 0x62fa <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    19d2:	60 e9       	ldi	r22, 0x90	; 144
    19d4:	75 e0       	ldi	r23, 0x05	; 5
    19d6:	ce 01       	movw	r24, r28
    19d8:	01 96       	adiw	r24, 0x01	; 1
    19da:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <_ZN6StringC1EPKc>
		  Serial.println("TARGA: " + mezzo.TARGA);              
    19de:	64 ec       	ldi	r22, 0xC4	; 196
    19e0:	79 e0       	ldi	r23, 0x09	; 9
    19e2:	ce 01       	movw	r24, r28
    19e4:	01 96       	adiw	r24, 0x01	; 1
    19e6:	0e 94 8f 33 	call	0x671e	; 0x671e <_ZplRK15StringSumHelperRK6String>
    19ea:	bc 01       	movw	r22, r24
    19ec:	84 e2       	ldi	r24, 0x24	; 36
    19ee:	9b e0       	ldi	r25, 0x0B	; 11
    19f0:	0e 94 3e 2f 	call	0x5e7c	; 0x5e7c <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    19f4:	ce 01       	movw	r24, r28
    19f6:	01 96       	adiw	r24, 0x01	; 1
    19f8:	0e 94 7d 31 	call	0x62fa	; 0x62fa <_ZN6StringD1Ev>

		  Carburante = mezzo.Carb;                 
    19fc:	6e eb       	ldi	r22, 0xBE	; 190
    19fe:	79 e0       	ldi	r23, 0x09	; 9
    1a00:	83 e4       	ldi	r24, 0x43	; 67
    1a02:	99 e0       	ldi	r25, 0x09	; 9
    1a04:	0e 94 3b 32 	call	0x6476	; 0x6476 <_ZN6StringaSERKS_>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    1a08:	6a ea       	ldi	r22, 0xAA	; 170
    1a0a:	75 e0       	ldi	r23, 0x05	; 5
    1a0c:	8e eb       	ldi	r24, 0xBE	; 190
    1a0e:	99 e0       	ldi	r25, 0x09	; 9
    1a10:	0e 94 c3 33 	call	0x6786	; 0x6786 <_ZNK6String6equalsEPKc>
		  if ((mezzo.Carb == "B") || (mezzo.Carb == "D")) {
    1a14:	81 11       	cpse	r24, r1
    1a16:	78 c2       	rjmp	.+1264   	; 0x1f08 <loop+0xa36>
    1a18:	6c ea       	ldi	r22, 0xAC	; 172
    1a1a:	75 e0       	ldi	r23, 0x05	; 5
    1a1c:	8e eb       	ldi	r24, 0xBE	; 190
    1a1e:	99 e0       	ldi	r25, 0x09	; 9
    1a20:	0e 94 c3 33 	call	0x6786	; 0x6786 <_ZNK6String6equalsEPKc>
    1a24:	81 11       	cpse	r24, r1
    1a26:	70 c2       	rjmp	.+1248   	; 0x1f08 <loop+0xa36>
		  righeDisplay[1] =  "AVVICINA TAG MEZZO";
		  righeDisplay[2] =  "";
		  righeDisplay[3] = "TARGA: "+  mezzo.TARGA;
		  displayLCD(righeDisplay,stato_procedura,10);
				
		  String mezzoString = leggiTAG_Mezzo(false); // con TRUE scrive sul blocco 4 della card NFC DEL MEZZO
    1a28:	ce 01       	movw	r24, r28
    1a2a:	0e 96       	adiw	r24, 0x0e	; 14
    1a2c:	0e 94 7d 31 	call	0x62fa	; 0x62fa <_ZN6StringD1Ev>
    1a30:	bc c1       	rjmp	.+888    	; 0x1daa <loop+0x8d8>
	  }
    }
    break;
    case 4:
    { 
    righeDisplay[1] =  "****** DISTRIBUTORE ******";
    1a32:	6e ea       	ldi	r22, 0xAE	; 174
    1a34:	75 e0       	ldi	r23, 0x05	; 5
    1a36:	85 e2       	ldi	r24, 0x25	; 37
    1a38:	99 e0       	ldi	r25, 0x09	; 9
    1a3a:	0e 94 63 32 	call	0x64c6	; 0x64c6 <_ZN6StringaSEPKc>
    righeDisplay[2] =  "";
    1a3e:	64 e8       	ldi	r22, 0x84	; 132
    1a40:	71 e0       	ldi	r23, 0x01	; 1
    1a42:	8b e2       	ldi	r24, 0x2B	; 43
    1a44:	99 e0       	ldi	r25, 0x09	; 9
    1a46:	0e 94 63 32 	call	0x64c6	; 0x64c6 <_ZN6StringaSEPKc>
    righeDisplay[3] = "**** SCEGLI ****";
    1a4a:	69 ec       	ldi	r22, 0xC9	; 201
    1a4c:	75 e0       	ldi	r23, 0x05	; 5
    1a4e:	81 e3       	ldi	r24, 0x31	; 49
    1a50:	99 e0       	ldi	r25, 0x09	; 9
    1a52:	0e 94 63 32 	call	0x64c6	; 0x64c6 <_ZN6StringaSEPKc>

    displayLCD(righeDisplay,stato_procedura,100);
    1a56:	60 91 75 09 	lds	r22, 0x0975	; 0x800975 <stato_procedura>
    1a5a:	70 91 76 09 	lds	r23, 0x0976	; 0x800976 <stato_procedura+0x1>
    1a5e:	44 e6       	ldi	r20, 0x64	; 100
    1a60:	50 e0       	ldi	r21, 0x00	; 0
    1a62:	8f e1       	ldi	r24, 0x1F	; 31
    1a64:	99 e0       	ldi	r25, 0x09	; 9
    1a66:	0e 94 47 03 	call	0x68e	; 0x68e <_Z10displayLCDP6Stringii>
    1a6a:	6a ea       	ldi	r22, 0xAA	; 170
    1a6c:	75 e0       	ldi	r23, 0x05	; 5
    1a6e:	8e eb       	ldi	r24, 0xBE	; 190
    1a70:	99 e0       	ldi	r25, 0x09	; 9
    1a72:	0e 94 c3 33 	call	0x6786	; 0x6786 <_ZNK6String6equalsEPKc>

    // Verifica scelta distributore
    
      if (mezzo.Carb == "B")
      {
        abilitaPulser('B');
    1a76:	88 23       	and	r24, r24
    1a78:	d1 f0       	breq	.+52     	; 0x1aae <loop+0x5dc>
    1a7a:	82 e4       	ldi	r24, 0x42	; 66
        Rele_Abilitazione2(0,7); // chiudi relè
    1a7c:	2d db       	rcall	.-2470   	; 0x10d8 <_Z13abilitaPulserc>
    1a7e:	67 e0       	ldi	r22, 0x07	; 7
    1a80:	70 e0       	ldi	r23, 0x00	; 0
    1a82:	80 e0       	ldi	r24, 0x00	; 0
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	9c db       	rcall	.-2248   	; 0x11c0 <_Z18Rele_Abilitazione2ii>
        StatoAttuale = "BENZINA";
    1a88:	6a ed       	ldi	r22, 0xDA	; 218
    1a8a:	75 e0       	ldi	r23, 0x05	; 5
    1a8c:	8f e7       	ldi	r24, 0x7F	; 127
    1a8e:	99 e0       	ldi	r25, 0x09	; 9
    1a90:	0e 94 63 32 	call	0x64c6	; 0x64c6 <_ZN6StringaSEPKc>
		RaccoltaDati[2] = mezzo.Carb;
    1a94:	6e eb       	ldi	r22, 0xBE	; 190
    1a96:	79 e0       	ldi	r23, 0x09	; 9
    1a98:	85 e5       	ldi	r24, 0x55	; 85
    1a9a:	99 e0       	ldi	r25, 0x09	; 9
    1a9c:	0e 94 3b 32 	call	0x6476	; 0x6476 <_ZN6StringaSERKS_>
        avanzaStato(10);
    1aa0:	6a e0       	ldi	r22, 0x0A	; 10
    1aa2:	70 e0       	ldi	r23, 0x00	; 0
    1aa4:	80 e0       	ldi	r24, 0x00	; 0
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	0e 94 e7 03 	call	0x7ce	; 0x7ce <_Z11avanzaStatom>
    1aac:	7e c1       	rjmp	.+764    	; 0x1daa <loop+0x8d8>
    1aae:	6c ea       	ldi	r22, 0xAC	; 172
    1ab0:	75 e0       	ldi	r23, 0x05	; 5
    1ab2:	8e eb       	ldi	r24, 0xBE	; 190
    1ab4:	99 e0       	ldi	r25, 0x09	; 9
    1ab6:	0e 94 c3 33 	call	0x6786	; 0x6786 <_ZNK6String6equalsEPKc>
      }
      else if (mezzo.Carb == "D")
    1aba:	88 23       	and	r24, r24
    1abc:	09 f4       	brne	.+2      	; 0x1ac0 <loop+0x5ee>
      {
        abilitaPulser('D');
    1abe:	75 c1       	rjmp	.+746    	; 0x1daa <loop+0x8d8>
    1ac0:	84 e4       	ldi	r24, 0x44	; 68
    1ac2:	0a db       	rcall	.-2540   	; 0x10d8 <_Z13abilitaPulserc>
        Rele_Abilitazione1(0,7); // chiudi relè
    1ac4:	67 e0       	ldi	r22, 0x07	; 7
    1ac6:	70 e0       	ldi	r23, 0x00	; 0
    1ac8:	80 e0       	ldi	r24, 0x00	; 0
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	3e db       	rcall	.-2436   	; 0x114a <_Z18Rele_Abilitazione1ii>
    1ace:	62 ee       	ldi	r22, 0xE2	; 226
        StatoAttuale = "GASOLIO";
    1ad0:	75 e0       	ldi	r23, 0x05	; 5
    1ad2:	dc cf       	rjmp	.-72     	; 0x1a8c <loop+0x5ba>
    1ad4:	6a ee       	ldi	r22, 0xEA	; 234
    break;
    case 5:
    {             
      // VALIDA MEZZO CON WBSERVICES
	  
	  RaccoltaDati[4] = "1234";
    1ad6:	75 e0       	ldi	r23, 0x05	; 5
    1ad8:	81 e6       	ldi	r24, 0x61	; 97
    1ada:	99 e0       	ldi	r25, 0x09	; 9
    1adc:	0e 94 63 32 	call	0x64c6	; 0x64c6 <_ZN6StringaSEPKc>
    1ae0:	10 92 74 09 	sts	0x0974, r1	; 0x800974 <impulsi+0x1>
      
      impulsi = 0;
    1ae4:	10 92 73 09 	sts	0x0973, r1	; 0x800973 <impulsi>
    1ae8:	6f ee       	ldi	r22, 0xEF	; 239
      
      righeDisplay[1] = "**** Distributore ****";
    1aea:	75 e0       	ldi	r23, 0x05	; 5
    1aec:	85 e2       	ldi	r24, 0x25	; 37
    1aee:	99 e0       	ldi	r25, 0x09	; 9
    1af0:	0e 94 63 32 	call	0x64c6	; 0x64c6 <_ZN6StringaSEPKc>
    1af4:	64 e8       	ldi	r22, 0x84	; 132
      righeDisplay[2] =  "";
    1af6:	71 e0       	ldi	r23, 0x01	; 1
    1af8:	8b e2       	ldi	r24, 0x2B	; 43
    1afa:	99 e0       	ldi	r25, 0x09	; 9
    1afc:	0e 94 63 32 	call	0x64c6	; 0x64c6 <_ZN6StringaSEPKc>
    1b00:	66 e0       	ldi	r22, 0x06	; 6

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1b02:	76 e0       	ldi	r23, 0x06	; 6
    1b04:	ce 01       	movw	r24, r28
    1b06:	01 96       	adiw	r24, 0x01	; 1
    1b08:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <_ZN6StringC1EPKc>
    1b0c:	6f e7       	ldi	r22, 0x7F	; 127
      righeDisplay[3] = "***** " + StatoAttuale + " *****";
    1b0e:	79 e0       	ldi	r23, 0x09	; 9
    1b10:	ce 01       	movw	r24, r28
    1b12:	01 96       	adiw	r24, 0x01	; 1
    1b14:	0e 94 8f 33 	call	0x671e	; 0x671e <_ZplRK15StringSumHelperRK6String>
    1b18:	6d e0       	ldi	r22, 0x0D	; 13
    1b1a:	76 e0       	ldi	r23, 0x06	; 6
    1b1c:	0e 94 a0 33 	call	0x6740	; 0x6740 <_ZplRK15StringSumHelperPKc>
    1b20:	bc 01       	movw	r22, r24
    1b22:	81 e3       	ldi	r24, 0x31	; 49
    1b24:	99 e0       	ldi	r25, 0x09	; 9
    1b26:	0e 94 3b 32 	call	0x6476	; 0x6476 <_ZN6StringaSERKS_>
    1b2a:	ce 01       	movw	r24, r28
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1b2c:	01 96       	adiw	r24, 0x01	; 1
    1b2e:	0e 94 7d 31 	call	0x62fa	; 0x62fa <_ZN6StringD1Ev>
    1b32:	60 91 75 09 	lds	r22, 0x0975	; 0x800975 <stato_procedura>
      
      displayLCD(righeDisplay,stato_procedura,100);
    1b36:	70 91 76 09 	lds	r23, 0x0976	; 0x800976 <stato_procedura+0x1>
    1b3a:	44 e6       	ldi	r20, 0x64	; 100
    1b3c:	50 e0       	ldi	r21, 0x00	; 0
    1b3e:	8f e1       	ldi	r24, 0x1F	; 31
    1b40:	99 e0       	ldi	r25, 0x09	; 9
    1b42:	0e 94 47 03 	call	0x68e	; 0x68e <_Z10displayLCDP6Stringii>
    1b46:	64 e1       	ldi	r22, 0x14	; 20

      avanzaStato(20);
    1b48:	70 e0       	ldi	r23, 0x00	; 0
    1b4a:	80 e0       	ldi	r24, 0x00	; 0
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	ac cf       	rjmp	.-168    	; 0x1aa8 <loop+0x5d6>
    1b50:	0e 94 92 01 	call	0x324	; 0x324 <_ZL11disable_ETHv>
    1b54:	8f e3       	ldi	r24, 0x3F	; 63
    1b56:	9f e1       	ldi	r25, 0x1F	; 31
    1b58:	01 97       	sbiw	r24, 0x01	; 1
    1b5a:	f1 f7       	brne	.-4      	; 0x1b58 <loop+0x686>
    1b5c:	00 c0       	rjmp	.+0      	; 0x1b5e <loop+0x68c>
    1b5e:	00 00       	nop
static const uint8_t RELE1 = PORTC7;
static const uint8_t RELE2 = PORTA7;
/*********************************************************************************************/
static inline void initSS_FLASH()  { DDRB |= (1 << PB4); } // set DDRB bit 4, sets PB4 for output
static inline void initSS_ETH()    { DDRC |= (1 << PC4); } // set DDRC bit 4, sets PC4 for output
static inline void enable_ETH()    { PORTC &= ~(1 << PC4); } // Set 0 Bit 4 PORTC Register
    1b60:	44 98       	cbi	0x08, 4	; 8
    { 
    disable_ETH();
    _delay_ms(2);
    enable_ETH();
    
      double lt = impulsiToLitri(impulsi);      
    1b62:	80 91 73 09 	lds	r24, 0x0973	; 0x800973 <impulsi>
    1b66:	90 91 74 09 	lds	r25, 0x0974	; 0x800974 <impulsi+0x1>
    1b6a:	c4 da       	rcall	.-2680   	; 0x10f4 <_Z14impulsiToLitrii>
    1b6c:	6b 01       	movw	r12, r22
    1b6e:	7c 01       	movw	r14, r24
    1b70:	22 e0       	ldi	r18, 0x02	; 2
      
      righeDisplay[1] = "LITRI :" + String(lt);
    1b72:	ab 01       	movw	r20, r22
    1b74:	bc 01       	movw	r22, r24
    1b76:	ce 01       	movw	r24, r28
    1b78:	0e 96       	adiw	r24, 0x0e	; 14
    1b7a:	0e 94 0f 33 	call	0x661e	; 0x661e <_ZN6StringC1Edh>
    1b7e:	64 e1       	ldi	r22, 0x14	; 20
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1b80:	76 e0       	ldi	r23, 0x06	; 6
    1b82:	ce 01       	movw	r24, r28
    1b84:	01 96       	adiw	r24, 0x01	; 1
    1b86:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <_ZN6StringC1EPKc>
    1b8a:	be 01       	movw	r22, r28
    1b8c:	62 5f       	subi	r22, 0xF2	; 242
    1b8e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b90:	ce 01       	movw	r24, r28
    1b92:	01 96       	adiw	r24, 0x01	; 1
    1b94:	0e 94 8f 33 	call	0x671e	; 0x671e <_ZplRK15StringSumHelperRK6String>
    1b98:	bc 01       	movw	r22, r24
    1b9a:	85 e2       	ldi	r24, 0x25	; 37
    1b9c:	99 e0       	ldi	r25, 0x09	; 9
    1b9e:	0e 94 3b 32 	call	0x6476	; 0x6476 <_ZN6StringaSERKS_>
    1ba2:	ce 01       	movw	r24, r28
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1ba4:	01 96       	adiw	r24, 0x01	; 1
    1ba6:	0e 94 7d 31 	call	0x62fa	; 0x62fa <_ZN6StringD1Ev>
    1baa:	ce 01       	movw	r24, r28
    1bac:	0e 96       	adiw	r24, 0x0e	; 14
    1bae:	0e 94 7d 31 	call	0x62fa	; 0x62fa <_ZN6StringD1Ev>
    1bb2:	64 e8       	ldi	r22, 0x84	; 132
      righeDisplay[2] = "";     
    1bb4:	71 e0       	ldi	r23, 0x01	; 1
    1bb6:	8b e2       	ldi	r24, 0x2B	; 43
    1bb8:	99 e0       	ldi	r25, 0x09	; 9
    1bba:	0e 94 63 32 	call	0x64c6	; 0x64c6 <_ZN6StringaSEPKc>
    1bbe:	6c e1       	ldi	r22, 0x1C	; 28
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1bc0:	76 e0       	ldi	r23, 0x06	; 6
    1bc2:	ce 01       	movw	r24, r28
    1bc4:	01 96       	adiw	r24, 0x01	; 1
    1bc6:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <_ZN6StringC1EPKc>
    1bca:	6f e7       	ldi	r22, 0x7F	; 127
      righeDisplay[3] = "Erogazione: " + StatoAttuale;
    1bcc:	79 e0       	ldi	r23, 0x09	; 9
    1bce:	ce 01       	movw	r24, r28
    1bd0:	01 96       	adiw	r24, 0x01	; 1
    1bd2:	0e 94 8f 33 	call	0x671e	; 0x671e <_ZplRK15StringSumHelperRK6String>
    1bd6:	bc 01       	movw	r22, r24
    1bd8:	81 e3       	ldi	r24, 0x31	; 49
    1bda:	99 e0       	ldi	r25, 0x09	; 9
    1bdc:	0e 94 3b 32 	call	0x6476	; 0x6476 <_ZN6StringaSERKS_>
    1be0:	ce 01       	movw	r24, r28
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1be2:	01 96       	adiw	r24, 0x01	; 1
    1be4:	0e 94 7d 31 	call	0x62fa	; 0x62fa <_ZN6StringD1Ev>
    1be8:	60 91 75 09 	lds	r22, 0x0975	; 0x800975 <stato_procedura>
      
      displayLCD(righeDisplay,stato_procedura,100);   
    1bec:	70 91 76 09 	lds	r23, 0x0976	; 0x800976 <stato_procedura+0x1>
    1bf0:	44 e6       	ldi	r20, 0x64	; 100
    1bf2:	50 e0       	ldi	r21, 0x00	; 0
    1bf4:	8f e1       	ldi	r24, 0x1F	; 31
    1bf6:	99 e0       	ldi	r25, 0x09	; 9
    1bf8:	0e 94 47 03 	call	0x68e	; 0x68e <_Z10displayLCDP6Stringii>
    1bfc:	01 9b       	sbis	0x00, 1	; 0

      /* CONTATTO PISTOLA DIESEL*/
      
      if ((PINA & _BV(PA1)) && (Carburante == "D"))
    1bfe:	08 c0       	rjmp	.+16     	; 0x1c10 <loop+0x73e>
    1c00:	6c ea       	ldi	r22, 0xAC	; 172
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    1c02:	75 e0       	ldi	r23, 0x05	; 5
    1c04:	83 e4       	ldi	r24, 0x43	; 67
    1c06:	99 e0       	ldi	r25, 0x09	; 9
    1c08:	0e 94 c3 33 	call	0x6786	; 0x6786 <_ZNK6String6equalsEPKc>
    1c0c:	81 11       	cpse	r24, r1
    1c0e:	93 c1       	rjmp	.+806    	; 0x1f36 <loop+0xa64>
    1c10:	19 9b       	sbis	0x03, 1	; 3
        avanzaStato(10);
      }
      
      /* CONTATTO PISTOLA BENZINA*/
      
      if  ((PINB & _BV(PB1)) && (Carburante == "B"))
    1c12:	cb c0       	rjmp	.+406    	; 0x1daa <loop+0x8d8>
    1c14:	6a ea       	ldi	r22, 0xAA	; 170
    1c16:	75 e0       	ldi	r23, 0x05	; 5
    1c18:	83 e4       	ldi	r24, 0x43	; 67
    1c1a:	99 e0       	ldi	r25, 0x09	; 9
    1c1c:	0e 94 c3 33 	call	0x6786	; 0x6786 <_ZNK6String6equalsEPKc>
    1c20:	81 11       	cpse	r24, r1
    1c22:	b6 c1       	rjmp	.+876    	; 0x1f90 <loop+0xabe>
    1c24:	c2 c0       	rjmp	.+388    	; 0x1daa <loop+0x8d8>
    1c26:	64 e8       	ldi	r22, 0x84	; 132
      /**************************************
       Control_WIFI(1);
       _delay_ms(2000);
      /**************************************/
      
      righeDisplay[1] =  "";      
    1c28:	71 e0       	ldi	r23, 0x01	; 1
    1c2a:	85 e2       	ldi	r24, 0x25	; 37
    1c2c:	99 e0       	ldi	r25, 0x09	; 9
    1c2e:	0e 94 63 32 	call	0x64c6	; 0x64c6 <_ZN6StringaSEPKc>
    1c32:	69 e2       	ldi	r22, 0x29	; 41
      righeDisplay[2] = "Invio........";
    1c34:	76 e0       	ldi	r23, 0x06	; 6
    1c36:	8b e2       	ldi	r24, 0x2B	; 43
    1c38:	99 e0       	ldi	r25, 0x09	; 9
    1c3a:	0e 94 63 32 	call	0x64c6	; 0x64c6 <_ZN6StringaSEPKc>
    1c3e:	64 e8       	ldi	r22, 0x84	; 132
      righeDisplay[3] =  "";
    1c40:	71 e0       	ldi	r23, 0x01	; 1
    1c42:	81 e3       	ldi	r24, 0x31	; 49
    1c44:	99 e0       	ldi	r25, 0x09	; 9
    1c46:	0e 94 63 32 	call	0x64c6	; 0x64c6 <_ZN6StringaSEPKc>
    1c4a:	44 99       	sbic	0x08, 4	; 8
          
      if (BIT_IS_CLEAR(PORTC,4)) 
    1c4c:	ae c0       	rjmp	.+348    	; 0x1daa <loop+0x8d8>
    1c4e:	60 91 75 09 	lds	r22, 0x0975	; 0x800975 <stato_procedura>
      {
        displayLCD(righeDisplay,stato_procedura,10);  
    1c52:	70 91 76 09 	lds	r23, 0x0976	; 0x800976 <stato_procedura+0x1>
    1c56:	4a e0       	ldi	r20, 0x0A	; 10
    1c58:	50 e0       	ldi	r21, 0x00	; 0
    1c5a:	8f e1       	ldi	r24, 0x1F	; 31
    1c5c:	99 e0       	ldi	r25, 0x09	; 9
    1c5e:	0e 94 47 03 	call	0x68e	; 0x68e <_Z10displayLCDP6Stringii>
    1c62:	64 e8       	ldi	r22, 0x84	; 132

        Messaggio = ""; 
    1c64:	71 e0       	ldi	r23, 0x01	; 1
    1c66:	87 e3       	ldi	r24, 0x37	; 55
    1c68:	99 e0       	ldi	r25, 0x09	; 9
    1c6a:	0e 94 63 32 	call	0x64c6	; 0x64c6 <_ZN6StringaSEPKc>
    1c6e:	09 e4       	ldi	r16, 0x49	; 73
    1c70:	19 e0       	ldi	r17, 0x09	; 9
    1c72:	8d e6       	ldi	r24, 0x6D	; 109
    1c74:	e8 2e       	mov	r14, r24
    1c76:	89 e0       	ldi	r24, 0x09	; 9
    1c78:	f8 2e       	mov	r15, r24
    1c7a:	b8 01       	movw	r22, r16
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
    1c7c:	ce 01       	movw	r24, r28
    1c7e:	01 96       	adiw	r24, 0x01	; 1
    1c80:	0e 94 50 32 	call	0x64a0	; 0x64a0 <_ZN6StringC1ERKS_>
    1c84:	67 e3       	ldi	r22, 0x37	; 55
        
        for (int k = 0;k<6;k++)
          Messaggio.concat(RaccoltaDati[k]+";");  
    1c86:	76 e0       	ldi	r23, 0x06	; 6
    1c88:	ce 01       	movw	r24, r28
    1c8a:	01 96       	adiw	r24, 0x01	; 1
    1c8c:	0e 94 a0 33 	call	0x6740	; 0x6740 <_ZplRK15StringSumHelperPKc>
    1c90:	bc 01       	movw	r22, r24
    1c92:	87 e3       	ldi	r24, 0x37	; 55
    1c94:	99 e0       	ldi	r25, 0x09	; 9
    1c96:	0e 94 69 33 	call	0x66d2	; 0x66d2 <_ZN6String6concatERKS_>
    1c9a:	ce 01       	movw	r24, r28
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1c9c:	01 96       	adiw	r24, 0x01	; 1
    1c9e:	0e 94 7d 31 	call	0x62fa	; 0x62fa <_ZN6StringD1Ev>
    1ca2:	0a 5f       	subi	r16, 0xFA	; 250
    1ca4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ca6:	e0 16       	cp	r14, r16
      {
        displayLCD(righeDisplay,stato_procedura,10);  

        Messaggio = ""; 
        
        for (int k = 0;k<6;k++)
    1ca8:	f1 06       	cpc	r15, r17
    1caa:	39 f7       	brne	.-50     	; 0x1c7a <loop+0x7a8>
    1cac:	69 e3       	ldi	r22, 0x39	; 57
          Messaggio.concat(RaccoltaDati[k]+";");  
      
	Messaggio.concat("SA1001");
    1cae:	76 e0       	ldi	r23, 0x06	; 6
    1cb0:	87 e3       	ldi	r24, 0x37	; 55
    1cb2:	99 e0       	ldi	r25, 0x09	; 9
    1cb4:	0e 94 6f 33 	call	0x66de	; 0x66de <_ZN6String6concatEPKc>
    1cb8:	9f ef       	ldi	r25, 0xFF	; 255
    1cba:	23 ed       	ldi	r18, 0xD3	; 211
    1cbc:	30 e3       	ldi	r19, 0x30	; 48
    1cbe:	91 50       	subi	r25, 0x01	; 1
    1cc0:	20 40       	sbci	r18, 0x00	; 0
    1cc2:	30 40       	sbci	r19, 0x00	; 0
    1cc4:	e1 f7       	brne	.-8      	; 0x1cbe <loop+0x7ec>
    1cc6:	00 c0       	rjmp	.+0      	; 0x1cc8 <loop+0x7f6>
    1cc8:	00 00       	nop
    1cca:	67 e3       	ldi	r22, 0x37	; 55
	
    _delay_ms(1000);      
        
    if (PostErogazione(5001,serverREST,clientLOCAL,Messaggio))
    1ccc:	79 e0       	ldi	r23, 0x09	; 9
    1cce:	ce 01       	movw	r24, r28
    1cd0:	0e 96       	adiw	r24, 0x0e	; 14
    1cd2:	0e 94 50 32 	call	0x64a0	; 0x64a0 <_ZN6StringC1ERKS_>
    1cd6:	80 91 fc 08 	lds	r24, 0x08FC	; 0x8008fc <clientLOCAL+0x2>
    1cda:	90 91 fd 08 	lds	r25, 0x08FD	; 0x8008fd <clientLOCAL+0x3>
    1cde:	9c 83       	std	Y+4, r25	; 0x04
    1ce0:	8b 83       	std	Y+3, r24	; 0x03
    1ce2:	80 91 fe 08 	lds	r24, 0x08FE	; 0x8008fe <clientLOCAL+0x4>
    1ce6:	90 91 ff 08 	lds	r25, 0x08FF	; 0x8008ff <clientLOCAL+0x5>
    1cea:	a0 91 00 09 	lds	r26, 0x0900	; 0x800900 <clientLOCAL+0x6>
    1cee:	b0 91 01 09 	lds	r27, 0x0901	; 0x800901 <clientLOCAL+0x7>
    1cf2:	8d 83       	std	Y+5, r24	; 0x05
    1cf4:	9e 83       	std	Y+6, r25	; 0x06
    1cf6:	af 83       	std	Y+7, r26	; 0x07
    1cf8:	b8 87       	std	Y+8, r27	; 0x08
    1cfa:	80 91 02 09 	lds	r24, 0x0902	; 0x800902 <clientLOCAL+0x8>
    1cfe:	90 91 03 09 	lds	r25, 0x0903	; 0x800903 <clientLOCAL+0x9>
    1d02:	a0 91 04 09 	lds	r26, 0x0904	; 0x800904 <clientLOCAL+0xa>
    1d06:	b0 91 05 09 	lds	r27, 0x0905	; 0x800905 <clientLOCAL+0xb>
    1d0a:	89 87       	std	Y+9, r24	; 0x09
    1d0c:	9a 87       	std	Y+10, r25	; 0x0a
    1d0e:	ab 87       	std	Y+11, r26	; 0x0b
    1d10:	bc 87       	std	Y+12, r27	; 0x0c
    1d12:	81 e2       	ldi	r24, 0x21	; 33
    1d14:	98 e0       	ldi	r25, 0x08	; 8
    1d16:	9a 83       	std	Y+2, r25	; 0x02
    1d18:	89 83       	std	Y+1, r24	; 0x01
    1d1a:	80 91 06 09 	lds	r24, 0x0906	; 0x800906 <clientLOCAL+0xc>
    1d1e:	8d 87       	std	Y+13, r24	; 0x0d
    1d20:	9e 01       	movw	r18, r28
    1d22:	22 5f       	subi	r18, 0xF2	; 242
    1d24:	3f 4f       	sbci	r19, 0xFF	; 255
    1d26:	ae 01       	movw	r20, r28
    1d28:	4f 5f       	subi	r20, 0xFF	; 255
    1d2a:	5f 4f       	sbci	r21, 0xFF	; 255
    1d2c:	6c e2       	ldi	r22, 0x2C	; 44
    1d2e:	71 e0       	ldi	r23, 0x01	; 1
    1d30:	89 e8       	ldi	r24, 0x89	; 137
    1d32:	93 e1       	ldi	r25, 0x13	; 19
    1d34:	46 d8       	rcall	.-3956   	; 0xdc2 <_Z14PostErogazioneiPc14EthernetClient6String>
    1d36:	18 2f       	mov	r17, r24
    1d38:	ce 01       	movw	r24, r28
    1d3a:	0e 96       	adiw	r24, 0x0e	; 14
    1d3c:	0e 94 7d 31 	call	0x62fa	; 0x62fa <_ZN6StringD1Ev>
    1d40:	11 23       	and	r17, r17
    1d42:	39 f1       	breq	.+78     	; 0x1d92 <loop+0x8c0>
    1d44:	0e 94 92 01 	call	0x324	; 0x324 <_ZL11disable_ETHv>
    {
      disable_ETH();
    1d48:	64 e8       	ldi	r22, 0x84	; 132
    
      righeDisplay[1] = "";
    1d4a:	71 e0       	ldi	r23, 0x01	; 1
    1d4c:	85 e2       	ldi	r24, 0x25	; 37
    1d4e:	99 e0       	ldi	r25, 0x09	; 9
    1d50:	0e 94 63 32 	call	0x64c6	; 0x64c6 <_ZN6StringaSEPKc>
    1d54:	60 e4       	ldi	r22, 0x40	; 64
      righeDisplay[2] = " Dati Inviati ";
    1d56:	76 e0       	ldi	r23, 0x06	; 6
    1d58:	8b e2       	ldi	r24, 0x2B	; 43
    1d5a:	99 e0       	ldi	r25, 0x09	; 9
    1d5c:	0e 94 63 32 	call	0x64c6	; 0x64c6 <_ZN6StringaSEPKc>
    1d60:	64 e8       	ldi	r22, 0x84	; 132
      righeDisplay[3] =  "";
    1d62:	71 e0       	ldi	r23, 0x01	; 1
    1d64:	81 e3       	ldi	r24, 0x31	; 49
    1d66:	99 e0       	ldi	r25, 0x09	; 9
    1d68:	0e 94 63 32 	call	0x64c6	; 0x64c6 <_ZN6StringaSEPKc>
    1d6c:	60 91 75 09 	lds	r22, 0x0975	; 0x800975 <stato_procedura>
    
      displayLCD(righeDisplay,stato_procedura,100);
    1d70:	70 91 76 09 	lds	r23, 0x0976	; 0x800976 <stato_procedura+0x1>
    1d74:	44 e6       	ldi	r20, 0x64	; 100
    1d76:	50 e0       	ldi	r21, 0x00	; 0
    1d78:	8f e1       	ldi	r24, 0x1F	; 31
    1d7a:	99 e0       	ldi	r25, 0x09	; 9
    1d7c:	0e 94 47 03 	call	0x68e	; 0x68e <_Z10displayLCDP6Stringii>
    1d80:	8f ef       	ldi	r24, 0xFF	; 255
    1d82:	99 ef       	ldi	r25, 0xF9	; 249
    1d84:	20 e0       	ldi	r18, 0x00	; 0
    1d86:	81 50       	subi	r24, 0x01	; 1
    1d88:	90 40       	sbci	r25, 0x00	; 0
    1d8a:	20 40       	sbci	r18, 0x00	; 0
    1d8c:	e1 f7       	brne	.-8      	; 0x1d86 <loop+0x8b4>
    1d8e:	00 c0       	rjmp	.+0      	; 0x1d90 <loop+0x8be>
    1d90:	00 00       	nop
    
      _delay_ms(20);
    }
    
  disable_ETH();
    1d92:	0e 94 92 01 	call	0x324	; 0x324 <_ZL11disable_ETHv>
  avanzaStato(TmaxSalvataggio);
    1d96:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <TmaxSalvataggio>
    1d9a:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <TmaxSalvataggio+0x1>
    1d9e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <TmaxSalvataggio+0x2>
    1da2:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <TmaxSalvataggio+0x3>
    1da6:	80 ce       	rjmp	.-768    	; 0x1aa8 <loop+0x5d6>
   Azzera();    
    }
    break;
    case 9:
    {        
      Azzera();    
    1da8:	62 da       	rcall	.-2876   	; 0x126e <_Z6Azzerav>
    1daa:	61 ee       	ldi	r22, 0xE1	; 225
    {      
    }
    break;
  }

  nowTimer = DS3231M.now();
    1dac:	78 e0       	ldi	r23, 0x08	; 8
    1dae:	ce 01       	movw	r24, r28
    1db0:	01 96       	adiw	r24, 0x01	; 1
    1db2:	0e 94 d5 19 	call	0x33aa	; 0x33aa <_ZN13DS3231M_Class3nowEv>
    1db6:	86 e0       	ldi	r24, 0x06	; 6
    1db8:	fe 01       	movw	r30, r28
    1dba:	31 96       	adiw	r30, 0x01	; 1
    1dbc:	af ec       	ldi	r26, 0xCF	; 207
    1dbe:	b8 e0       	ldi	r27, 0x08	; 8
    1dc0:	01 90       	ld	r0, Z+
    1dc2:	0d 92       	st	X+, r0
    1dc4:	8a 95       	dec	r24
    1dc6:	e1 f7       	brne	.-8      	; 0x1dc0 <loop+0x8ee>
    1dc8:	8f ec       	ldi	r24, 0xCF	; 207
  secs = nowTimer.secondstime();
    1dca:	98 e0       	ldi	r25, 0x08	; 8
    1dcc:	0e 94 26 19 	call	0x324c	; 0x324c <_ZNK8DateTime11secondstimeEv>
    1dd0:	60 93 dd 08 	sts	0x08DD, r22	; 0x8008dd <secs>
    1dd4:	70 93 de 08 	sts	0x08DE, r23	; 0x8008de <secs+0x1>
    1dd8:	80 93 df 08 	sts	0x08DF, r24	; 0x8008df <secs+0x2>
    1ddc:	90 93 e0 08 	sts	0x08E0, r25	; 0x8008e0 <secs+0x3>
    1de0:	00 91 d9 08 	lds	r16, 0x08D9	; 0x8008d9 <UltimoPassaggioStato>
  if ((UltimoPassaggioStato+Timer-secs) <= 1) Azzera();
    1de4:	10 91 da 08 	lds	r17, 0x08DA	; 0x8008da <UltimoPassaggioStato+0x1>
    1de8:	20 91 db 08 	lds	r18, 0x08DB	; 0x8008db <UltimoPassaggioStato+0x2>
    1dec:	30 91 dc 08 	lds	r19, 0x08DC	; 0x8008dc <UltimoPassaggioStato+0x3>
    1df0:	c0 90 d5 08 	lds	r12, 0x08D5	; 0x8008d5 <Timer>
    1df4:	d0 90 d6 08 	lds	r13, 0x08D6	; 0x8008d6 <Timer+0x1>
    1df8:	e0 90 d7 08 	lds	r14, 0x08D7	; 0x8008d7 <Timer+0x2>
    1dfc:	f0 90 d8 08 	lds	r15, 0x08D8	; 0x8008d8 <Timer+0x3>
    1e00:	0c 0d       	add	r16, r12
    1e02:	1d 1d       	adc	r17, r13
    1e04:	2e 1d       	adc	r18, r14
    1e06:	3f 1d       	adc	r19, r15
    1e08:	68 01       	movw	r12, r16
    1e0a:	79 01       	movw	r14, r18
    1e0c:	c6 1a       	sub	r12, r22
    1e0e:	d7 0a       	sbc	r13, r23
    1e10:	e8 0a       	sbc	r14, r24
    1e12:	f9 0a       	sbc	r15, r25
    1e14:	d7 01       	movw	r26, r14
    1e16:	c6 01       	movw	r24, r12
    1e18:	02 97       	sbiw	r24, 0x02	; 2
    1e1a:	a1 05       	cpc	r26, r1
    1e1c:	b1 05       	cpc	r27, r1
    1e1e:	08 f0       	brcs	.+2      	; 0x1e22 <loop+0x950>
    1e20:	e2 c0       	rjmp	.+452    	; 0x1fe6 <loop+0xb14>
    1e22:	25 da       	rcall	.-2998   	; 0x126e <_Z6Azzerav>
    1e24:	e0 c0       	rjmp	.+448    	; 0x1fe6 <loop+0xb14>

}
    1e26:	64 e8       	ldi	r22, 0x84	; 132
		String ATe = "ERRORE";
		if (!alreadyTimbrata) {ATe = GetCodeRfidATe(); Buzzer(2,100);}
            
        if ((ATe != "ERRORE") && (BIT_IS_CLEAR(PORTC,4)))
        { 
           Serial.println("");
    1e28:	71 e0       	ldi	r23, 0x01	; 1
    1e2a:	84 e2       	ldi	r24, 0x24	; 36
    1e2c:	9b e0       	ldi	r25, 0x0B	; 11
    1e2e:	0e 94 4e 2f 	call	0x5e9c	; 0x5e9c <_ZN5Print7printlnEPKc>
    1e32:	6f e4       	ldi	r22, 0x4F	; 79
           Serial.print("***************************************************************");
    1e34:	76 e0       	ldi	r23, 0x06	; 6
    1e36:	84 e2       	ldi	r24, 0x24	; 36
    1e38:	9b e0       	ldi	r25, 0x0B	; 11
    1e3a:	0e 94 23 2f 	call	0x5e46	; 0x5e46 <_ZN5Print5printEPKc>
    1e3e:	6f e8       	ldi	r22, 0x8F	; 143
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1e40:	76 e0       	ldi	r23, 0x06	; 6
    1e42:	ce 01       	movw	r24, r28
    1e44:	01 96       	adiw	r24, 0x01	; 1
    1e46:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <_ZN6StringC1EPKc>
    1e4a:	be 01       	movw	r22, r28
           Serial.println(" Tessera ID : " + ATe);
    1e4c:	6a 5e       	subi	r22, 0xEA	; 234
    1e4e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e50:	ce 01       	movw	r24, r28
    1e52:	01 96       	adiw	r24, 0x01	; 1
    1e54:	0e 94 8f 33 	call	0x671e	; 0x671e <_ZplRK15StringSumHelperRK6String>
    1e58:	bc 01       	movw	r22, r24
    1e5a:	84 e2       	ldi	r24, 0x24	; 36
    1e5c:	9b e0       	ldi	r25, 0x0B	; 11
    1e5e:	0e 94 3e 2f 	call	0x5e7c	; 0x5e7c <_ZN5Print7printlnERK6String>
    1e62:	ce 01       	movw	r24, r28
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1e64:	01 96       	adiw	r24, 0x01	; 1
    1e66:	0e 94 7d 31 	call	0x62fa	; 0x62fa <_ZN6StringD1Ev>
    1e6a:	6f e4       	ldi	r22, 0x4F	; 79
           Serial.print("***************************************************************");
    1e6c:	76 e0       	ldi	r23, 0x06	; 6
    1e6e:	84 e2       	ldi	r24, 0x24	; 36
    1e70:	9b e0       	ldi	r25, 0x0B	; 11
    1e72:	0e 94 23 2f 	call	0x5e46	; 0x5e46 <_ZN5Print5printEPKc>
    1e76:	6e e9       	ldi	r22, 0x9E	; 158
           Serial.println("Riconoscimento Tessera .............");
    1e78:	76 e0       	ldi	r23, 0x06	; 6
    1e7a:	84 e2       	ldi	r24, 0x24	; 36
    1e7c:	9b e0       	ldi	r25, 0x0B	; 11
    1e7e:	0e 94 4e 2f 	call	0x5e9c	; 0x5e9c <_ZN5Print7printlnEPKc>
    1e82:	be 01       	movw	r22, r28
                     
           RaccoltaDati[0] = ATe;
    1e84:	6a 5e       	subi	r22, 0xEA	; 234
    1e86:	7f 4f       	sbci	r23, 0xFF	; 255
    1e88:	89 e4       	ldi	r24, 0x49	; 73
    1e8a:	99 e0       	ldi	r25, 0x09	; 9
    1e8c:	0e 94 3b 32 	call	0x6476	; 0x6476 <_ZN6StringaSERKS_>
    1e90:	61 e3       	ldi	r22, 0x31	; 49
		   RaccoltaDati[5] = "000";
    1e92:	75 e0       	ldi	r23, 0x05	; 5
    1e94:	87 e6       	ldi	r24, 0x67	; 103
    1e96:	99 e0       	ldi	r25, 0x09	; 9
    1e98:	0e 94 63 32 	call	0x64c6	; 0x64c6 <_ZN6StringaSEPKc>
    1e9c:	8c e9       	ldi	r24, 0x9C	; 156
           
           lcd.backlight();
    1e9e:	99 e0       	ldi	r25, 0x09	; 9
    1ea0:	0e 94 7b 26 	call	0x4cf6	; 0x4cf6 <_ZN3LCD9backlightEv>
    1ea4:	8c e9       	ldi	r24, 0x9C	; 156
           lcd.display();          
    1ea6:	99 e0       	ldi	r25, 0x09	; 9
    1ea8:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <_ZN3LCD7displayEv>
    1eac:	8f e3       	ldi	r24, 0x3F	; 63
    1eae:	9c e9       	ldi	r25, 0x9C	; 156
    1eb0:	01 97       	sbiw	r24, 0x01	; 1
    1eb2:	f1 f7       	brne	.-4      	; 0x1eb0 <loop+0x9de>
    1eb4:	00 c0       	rjmp	.+0      	; 0x1eb6 <loop+0x9e4>
    1eb6:	00 00       	nop
    1eb8:	63 ec       	ldi	r22, 0xC3	; 195
           _delay_ms(10);               
		   
		   righeDisplay[1] = "  RICONOSCIMENTO ";
    1eba:	76 e0       	ldi	r23, 0x06	; 6
    1ebc:	85 e2       	ldi	r24, 0x25	; 37
    1ebe:	99 e0       	ldi	r25, 0x09	; 9
    1ec0:	0e 94 63 32 	call	0x64c6	; 0x64c6 <_ZN6StringaSEPKc>
    1ec4:	65 ed       	ldi	r22, 0xD5	; 213
		   righeDisplay[2] = ".....In Corso.....";
    1ec6:	76 e0       	ldi	r23, 0x06	; 6
    1ec8:	8b e2       	ldi	r24, 0x2B	; 43
    1eca:	99 e0       	ldi	r25, 0x09	; 9
    1ecc:	0e 94 63 32 	call	0x64c6	; 0x64c6 <_ZN6StringaSEPKc>
    1ed0:	68 ee       	ldi	r22, 0xE8	; 232
		   //righeDisplay[3] = "   Rfid: " + ATe;
		   righeDisplay[3] = "Attendere.........";
    1ed2:	76 e0       	ldi	r23, 0x06	; 6
    1ed4:	81 e3       	ldi	r24, 0x31	; 49
    1ed6:	99 e0       	ldi	r25, 0x09	; 9
    1ed8:	0e 94 63 32 	call	0x64c6	; 0x64c6 <_ZN6StringaSEPKc>
    1edc:	60 91 75 09 	lds	r22, 0x0975	; 0x800975 <stato_procedura>
		       
		   displayLCD(righeDisplay,stato_procedura,100);   
    1ee0:	70 91 76 09 	lds	r23, 0x0976	; 0x800976 <stato_procedura+0x1>
    1ee4:	44 e6       	ldi	r20, 0x64	; 100
    1ee6:	50 e0       	ldi	r21, 0x00	; 0
    1ee8:	8f e1       	ldi	r24, 0x1F	; 31
    1eea:	99 e0       	ldi	r25, 0x09	; 9
    1eec:	0e 94 47 03 	call	0x68e	; 0x68e <_Z10displayLCDP6Stringii>
    1ef0:	0e 94 94 01 	call	0x328	; 0x328 <_Z19InizializzaEthernetv>
      
           InizializzaEthernet();
    1ef4:	9f ef       	ldi	r25, 0xFF	; 255
    1ef6:	23 ed       	ldi	r18, 0xD3	; 211
    1ef8:	30 e3       	ldi	r19, 0x30	; 48
    1efa:	91 50       	subi	r25, 0x01	; 1
    1efc:	20 40       	sbci	r18, 0x00	; 0
    1efe:	30 40       	sbci	r19, 0x00	; 0
    1f00:	e1 f7       	brne	.-8      	; 0x1efa <loop+0xa28>
    1f02:	00 c0       	rjmp	.+0      	; 0x1f04 <loop+0xa32>
    1f04:	00 00       	nop
    1f06:	b5 cb       	rjmp	.-2198   	; 0x1672 <loop+0x1a0>
    1f08:	64 ec       	ldi	r22, 0xC4	; 196
		  Serial.println("TIPO CARBURANTE: " + mezzo.Carb);    
		  Serial.println("TARGA: " + mezzo.TARGA);              

		  Carburante = mezzo.Carb;                 
		  if ((mezzo.Carb == "B") || (mezzo.Carb == "D")) {
			RaccoltaDati[1] = mezzo.TARGA;
    1f0a:	79 e0       	ldi	r23, 0x09	; 9
    1f0c:	8f e4       	ldi	r24, 0x4F	; 79
    1f0e:	99 e0       	ldi	r25, 0x09	; 9
    1f10:	0e 94 3b 32 	call	0x6476	; 0x6476 <_ZN6StringaSERKS_>
    1f14:	6e eb       	ldi	r22, 0xBE	; 190
			RaccoltaDati[2] = mezzo.Carb;
    1f16:	79 e0       	ldi	r23, 0x09	; 9
    1f18:	85 e5       	ldi	r24, 0x55	; 85
    1f1a:	99 e0       	ldi	r25, 0x09	; 9
    1f1c:	0e 94 3b 32 	call	0x6476	; 0x6476 <_ZN6StringaSERKS_>
    1f20:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <TselDistributore>
			avanzaStato(TselDistributore); 
    1f24:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <TselDistributore+0x1>
    1f28:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <TselDistributore+0x2>
    1f2c:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <TselDistributore+0x3>
    1f30:	0e 94 e7 03 	call	0x7ce	; 0x7ce <_Z11avanzaStatom>
    1f34:	79 cd       	rjmp	.-1294   	; 0x1a28 <loop+0x556>
    1f36:	22 e0       	ldi	r18, 0x02	; 2

      /* CONTATTO PISTOLA DIESEL*/
      
      if ((PINA & _BV(PA1)) && (Carburante == "D"))
      {       
        RaccoltaDati[3] = String(lt);
    1f38:	b7 01       	movw	r22, r14
    1f3a:	a6 01       	movw	r20, r12
    1f3c:	ce 01       	movw	r24, r28
    1f3e:	01 96       	adiw	r24, 0x01	; 1
    1f40:	0e 94 0f 33 	call	0x661e	; 0x661e <_ZN6StringC1Edh>
    1f44:	be 01       	movw	r22, r28
    1f46:	6f 5f       	subi	r22, 0xFF	; 255
    1f48:	7f 4f       	sbci	r23, 0xFF	; 255
    1f4a:	8b e5       	ldi	r24, 0x5B	; 91
    1f4c:	99 e0       	ldi	r25, 0x09	; 9
    1f4e:	0e 94 58 32 	call	0x64b0	; 0x64b0 <_ZN6StringaSEOS_>
    1f52:	ce 01       	movw	r24, r28
    1f54:	01 96       	adiw	r24, 0x01	; 1
    1f56:	0e 94 7d 31 	call	0x62fa	; 0x62fa <_ZN6StringD1Ev>
        
        StatoAttuale = "STOP EROGAZIONE";
    1f5a:	6b ef       	ldi	r22, 0xFB	; 251
    1f5c:	76 e0       	ldi	r23, 0x06	; 6
    1f5e:	8f e7       	ldi	r24, 0x7F	; 127
    1f60:	99 e0       	ldi	r25, 0x09	; 9
    1f62:	0e 94 63 32 	call	0x64c6	; 0x64c6 <_ZN6StringaSEPKc>
        Rele_Abilitazione2(1,7); //  apri relè
    1f66:	67 e0       	ldi	r22, 0x07	; 7
    1f68:	70 e0       	ldi	r23, 0x00	; 0
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	28 d9       	rcall	.-3504   	; 0x11c0 <_Z18Rele_Abilitazione2ii>
    1f70:	67 e0       	ldi	r22, 0x07	; 7
        Rele_Abilitazione1(1,7); //  apri relè  
    1f72:	70 e0       	ldi	r23, 0x00	; 0
    1f74:	81 e0       	ldi	r24, 0x01	; 1
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	e8 d8       	rcall	.-3632   	; 0x114a <_Z18Rele_Abilitazione1ii>
    1f7a:	92 b1       	in	r25, 0x02	; 2
    1f7c:	82 e0       	ldi	r24, 0x02	; 2
        TOGGLE_BIT(PORTA,1);      
    1f7e:	89 27       	eor	r24, r25
    1f80:	82 b9       	out	0x02, r24	; 2
    1f82:	6a e0       	ldi	r22, 0x0A	; 10
    1f84:	70 e0       	ldi	r23, 0x00	; 0
        avanzaStato(10);
    1f86:	80 e0       	ldi	r24, 0x00	; 0
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	0e 94 e7 03 	call	0x7ce	; 0x7ce <_Z11avanzaStatom>
    1f8e:	40 ce       	rjmp	.-896    	; 0x1c10 <loop+0x73e>
    1f90:	22 e0       	ldi	r18, 0x02	; 2
    1f92:	b7 01       	movw	r22, r14
      
      /* CONTATTO PISTOLA BENZINA*/
      
      if  ((PINB & _BV(PB1)) && (Carburante == "B"))
      {
        RaccoltaDati[3] = String(lt);
    1f94:	a6 01       	movw	r20, r12
    1f96:	ce 01       	movw	r24, r28
    1f98:	01 96       	adiw	r24, 0x01	; 1
    1f9a:	0e 94 0f 33 	call	0x661e	; 0x661e <_ZN6StringC1Edh>
    1f9e:	be 01       	movw	r22, r28
    1fa0:	6f 5f       	subi	r22, 0xFF	; 255
    1fa2:	7f 4f       	sbci	r23, 0xFF	; 255
    1fa4:	8b e5       	ldi	r24, 0x5B	; 91
    1fa6:	99 e0       	ldi	r25, 0x09	; 9
    1fa8:	0e 94 58 32 	call	0x64b0	; 0x64b0 <_ZN6StringaSEOS_>
    1fac:	ce 01       	movw	r24, r28
    1fae:	01 96       	adiw	r24, 0x01	; 1
    1fb0:	0e 94 7d 31 	call	0x62fa	; 0x62fa <_ZN6StringD1Ev>
        
        StatoAttuale = "STOP EROGAZIONE";
    1fb4:	6b ef       	ldi	r22, 0xFB	; 251
    1fb6:	76 e0       	ldi	r23, 0x06	; 6
    1fb8:	8f e7       	ldi	r24, 0x7F	; 127
    1fba:	99 e0       	ldi	r25, 0x09	; 9
    1fbc:	0e 94 63 32 	call	0x64c6	; 0x64c6 <_ZN6StringaSEPKc>
        Rele_Abilitazione2(1,7); //  apri relè
    1fc0:	67 e0       	ldi	r22, 0x07	; 7
    1fc2:	70 e0       	ldi	r23, 0x00	; 0
    1fc4:	81 e0       	ldi	r24, 0x01	; 1
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	fb d8       	rcall	.-3594   	; 0x11c0 <_Z18Rele_Abilitazione2ii>
    1fca:	67 e0       	ldi	r22, 0x07	; 7
        Rele_Abilitazione1(1,7); //  apri relè        
    1fcc:	70 e0       	ldi	r23, 0x00	; 0
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	bb d8       	rcall	.-3722   	; 0x114a <_Z18Rele_Abilitazione1ii>
    1fd4:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <TmaxInviodati>
        avanzaStato(TmaxInviodati);
    1fd8:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <TmaxInviodati+0x1>
    1fdc:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <TmaxInviodati+0x2>
    1fe0:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <TmaxInviodati+0x3>
    1fe4:	61 cd       	rjmp	.-1342   	; 0x1aa8 <loop+0x5d6>
    1fe6:	a3 96       	adiw	r28, 0x23	; 35
    1fe8:	0f b6       	in	r0, 0x3f	; 63

  nowTimer = DS3231M.now();
  secs = nowTimer.secondstime();
  if ((UltimoPassaggioStato+Timer-secs) <= 1) Azzera();

}
    1fea:	f8 94       	cli
    1fec:	de bf       	out	0x3e, r29	; 62
    1fee:	0f be       	out	0x3f, r0	; 63
    1ff0:	cd bf       	out	0x3d, r28	; 61
    1ff2:	df 91       	pop	r29
    1ff4:	cf 91       	pop	r28
    1ff6:	1f 91       	pop	r17
    1ff8:	0f 91       	pop	r16
    1ffa:	ff 90       	pop	r15
    1ffc:	ef 90       	pop	r14
    1ffe:	df 90       	pop	r13
    2000:	cf 90       	pop	r12
    2002:	08 95       	ret

00002004 <__vector_4>:
    2004:	1f 92       	push	r1
    2006:	0f 92       	push	r0

/********************FINE LOOP PROCEDURA************************************/

// interrupt per conteggio impulsi

ISR(PCINT0_vect) {
    2008:	0f b6       	in	r0, 0x3f	; 63
    200a:	0f 92       	push	r0
    200c:	11 24       	eor	r1, r1
    200e:	8f 93       	push	r24
    2010:	9f 93       	push	r25
       if (PINA & _BV(PA5)){
    2012:	05 9b       	sbis	0x00, 5	; 0
    2014:	09 c0       	rjmp	.+18     	; 0x2028 <__vector_4+0x24>
              impulsi++;
    2016:	80 91 73 09 	lds	r24, 0x0973	; 0x800973 <impulsi>
    201a:	90 91 74 09 	lds	r25, 0x0974	; 0x800974 <impulsi+0x1>
    201e:	01 96       	adiw	r24, 0x01	; 1
    2020:	90 93 74 09 	sts	0x0974, r25	; 0x800974 <impulsi+0x1>
    2024:	80 93 73 09 	sts	0x0973, r24	; 0x800973 <impulsi>
       }
       if (PINA & _BV(PA6)){
    2028:	06 9b       	sbis	0x00, 6	; 0
    202a:	09 c0       	rjmp	.+18     	; 0x203e <__vector_4+0x3a>
              impulsi++;
    202c:	80 91 73 09 	lds	r24, 0x0973	; 0x800973 <impulsi>
    2030:	90 91 74 09 	lds	r25, 0x0974	; 0x800974 <impulsi+0x1>
    2034:	01 96       	adiw	r24, 0x01	; 1
    2036:	90 93 74 09 	sts	0x0974, r25	; 0x800974 <impulsi+0x1>
    203a:	80 93 73 09 	sts	0x0973, r24	; 0x800973 <impulsi>
       }
}
    203e:	9f 91       	pop	r25
    2040:	8f 91       	pop	r24
    2042:	0f 90       	pop	r0
    2044:	0f be       	out	0x3f, r0	; 63
    2046:	0f 90       	pop	r0
    2048:	1f 90       	pop	r1
    204a:	18 95       	reti

0000204c <__vector_7>:

// interrupt per pulsanti abilitazione diesele benzina

ISR(PCINT3_vect) {    
    204c:	1f 92       	push	r1
    204e:	0f 92       	push	r0
    2050:	0f b6       	in	r0, 0x3f	; 63
    2052:	0f 92       	push	r0
    2054:	11 24       	eor	r1, r1
    2056:	0b b6       	in	r0, 0x3b	; 59
    2058:	0f 92       	push	r0
    205a:	2f 93       	push	r18
    205c:	3f 93       	push	r19
    205e:	4f 93       	push	r20
    2060:	5f 93       	push	r21
    2062:	6f 93       	push	r22
    2064:	7f 93       	push	r23
    2066:	8f 93       	push	r24
    2068:	9f 93       	push	r25
    206a:	af 93       	push	r26
    206c:	bf 93       	push	r27
    206e:	ef 93       	push	r30
    2070:	ff 93       	push	r31
  
  if (stato_procedura == 4)
    2072:	80 91 75 09 	lds	r24, 0x0975	; 0x800975 <stato_procedura>
    2076:	90 91 76 09 	lds	r25, 0x0976	; 0x800976 <stato_procedura+0x1>
    207a:	04 97       	sbiw	r24, 0x04	; 4
    207c:	09 f0       	breq	.+2      	; 0x2080 <__vector_7+0x34>
    207e:	93 c0       	rjmp	.+294    	; 0x21a6 <__vector_7+0x15a>
  {
    if (PIND & _BV(PD6))
    2080:	4e 9b       	sbis	0x09, 6	; 9
    2082:	30 c0       	rjmp	.+96     	; 0x20e4 <__vector_7+0x98>
    {   
      intConsecutivePresses++;                      // increment counter for number of presses
    2084:	80 91 cd 09 	lds	r24, 0x09CD	; 0x8009cd <intConsecutivePresses>
    2088:	90 91 ce 09 	lds	r25, 0x09CE	; 0x8009ce <intConsecutivePresses+0x1>
    208c:	01 96       	adiw	r24, 0x01	; 1
    208e:	90 93 ce 09 	sts	0x09CE, r25	; 0x8009ce <intConsecutivePresses+0x1>
    2092:	80 93 cd 09 	sts	0x09CD, r24	; 0x8009cd <intConsecutivePresses>
      if(intConsecutivePresses >= NUM_OF_CONSECUTIVE_PRESSES) 
    2096:	80 91 cd 09 	lds	r24, 0x09CD	; 0x8009cd <intConsecutivePresses>
    209a:	90 91 ce 09 	lds	r25, 0x09CE	; 0x8009ce <intConsecutivePresses+0x1>
    209e:	18 16       	cp	r1, r24
    20a0:	19 06       	cpc	r1, r25
    20a2:	bc f5       	brge	.+110    	; 0x2112 <__vector_7+0xc6>
      {     // if enough presses to constitute a press
        abilitaPulser('B');
    20a4:	82 e4       	ldi	r24, 0x42	; 66
    20a6:	18 d8       	rcall	.-4048   	; 0x10d8 <_Z13abilitaPulserc>
        Rele_Abilitazione2(0,7); // chiudi relè
    20a8:	67 e0       	ldi	r22, 0x07	; 7
    20aa:	70 e0       	ldi	r23, 0x00	; 0
    20ac:	80 e0       	ldi	r24, 0x00	; 0
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	87 d8       	rcall	.-3826   	; 0x11c0 <_Z18Rele_Abilitazione2ii>
        Carburante = "B";
    20b2:	6a ea       	ldi	r22, 0xAA	; 170
    20b4:	75 e0       	ldi	r23, 0x05	; 5
    20b6:	83 e4       	ldi	r24, 0x43	; 67
    20b8:	99 e0       	ldi	r25, 0x09	; 9
    20ba:	0e 94 63 32 	call	0x64c6	; 0x64c6 <_ZN6StringaSEPKc>
		RaccoltaDati[2] = Carburante;
    20be:	63 e4       	ldi	r22, 0x43	; 67
    20c0:	79 e0       	ldi	r23, 0x09	; 9
    20c2:	85 e5       	ldi	r24, 0x55	; 85
    20c4:	99 e0       	ldi	r25, 0x09	; 9
    20c6:	0e 94 3b 32 	call	0x6476	; 0x6476 <_ZN6StringaSERKS_>
        StatoAttuale = "BENZINA";       
    20ca:	6a ed       	ldi	r22, 0xDA	; 218
    20cc:	75 e0       	ldi	r23, 0x05	; 5
    20ce:	8f e7       	ldi	r24, 0x7F	; 127
    20d0:	99 e0       	ldi	r25, 0x09	; 9
    20d2:	0e 94 63 32 	call	0x64c6	; 0x64c6 <_ZN6StringaSEPKc>
        avanzaStato(10);                            
    20d6:	6a e0       	ldi	r22, 0x0A	; 10
    20d8:	70 e0       	ldi	r23, 0x00	; 0
    20da:	80 e0       	ldi	r24, 0x00	; 0
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	0e 94 e7 03 	call	0x7ce	; 0x7ce <_Z11avanzaStatom>
    20e2:	0f c0       	rjmp	.+30     	; 0x2102 <__vector_7+0xb6>
        intConsecutivePresses = 0;                    // and reset press counts
        intConsecutiveNonPresses = 0;
      }
    }
    else  {           // else if button is not pressed (logic low)
    intConsecutiveNonPresses++;
    20e4:	80 91 cb 09 	lds	r24, 0x09CB	; 0x8009cb <intConsecutiveNonPresses>
    20e8:	90 91 cc 09 	lds	r25, 0x09CC	; 0x8009cc <intConsecutiveNonPresses+0x1>
    20ec:	01 96       	adiw	r24, 0x01	; 1
    20ee:	90 93 cc 09 	sts	0x09CC, r25	; 0x8009cc <intConsecutiveNonPresses+0x1>
    20f2:	80 93 cb 09 	sts	0x09CB, r24	; 0x8009cb <intConsecutiveNonPresses>
    if(intConsecutiveNonPresses >= NUM_OF_CONSECUTIVE_NON_PRESSES) {
    20f6:	80 91 cb 09 	lds	r24, 0x09CB	; 0x8009cb <intConsecutiveNonPresses>
    20fa:	90 91 cc 09 	lds	r25, 0x09CC	; 0x8009cc <intConsecutiveNonPresses+0x1>
    20fe:	02 97       	sbiw	r24, 0x02	; 2
    2100:	44 f0       	brlt	.+16     	; 0x2112 <__vector_7+0xc6>
      intConsecutivePresses = 0;                      // reset press counts
    2102:	10 92 ce 09 	sts	0x09CE, r1	; 0x8009ce <intConsecutivePresses+0x1>
    2106:	10 92 cd 09 	sts	0x09CD, r1	; 0x8009cd <intConsecutivePresses>
      intConsecutiveNonPresses = 0;
    210a:	10 92 cc 09 	sts	0x09CC, r1	; 0x8009cc <intConsecutiveNonPresses+0x1>
    210e:	10 92 cb 09 	sts	0x09CB, r1	; 0x8009cb <intConsecutiveNonPresses>
    }
    }     
      
    if (PIND & _BV(PD7))
    2112:	4f 9b       	sbis	0x09, 7	; 9
    2114:	31 c0       	rjmp	.+98     	; 0x2178 <__vector_7+0x12c>
    {     
      intConsecutivePresses++;                      // increment counter for number of presses
    2116:	80 91 cd 09 	lds	r24, 0x09CD	; 0x8009cd <intConsecutivePresses>
    211a:	90 91 ce 09 	lds	r25, 0x09CE	; 0x8009ce <intConsecutivePresses+0x1>
    211e:	01 96       	adiw	r24, 0x01	; 1
    2120:	90 93 ce 09 	sts	0x09CE, r25	; 0x8009ce <intConsecutivePresses+0x1>
    2124:	80 93 cd 09 	sts	0x09CD, r24	; 0x8009cd <intConsecutivePresses>
      if(intConsecutivePresses >= NUM_OF_CONSECUTIVE_PRESSES) 
    2128:	80 91 cd 09 	lds	r24, 0x09CD	; 0x8009cd <intConsecutivePresses>
    212c:	90 91 ce 09 	lds	r25, 0x09CE	; 0x8009ce <intConsecutivePresses+0x1>
    2130:	18 16       	cp	r1, r24
    2132:	19 06       	cpc	r1, r25
    2134:	c4 f5       	brge	.+112    	; 0x21a6 <__vector_7+0x15a>
      {     // if enough presses to constitute a press        
        abilitaPulser('D');
    2136:	84 e4       	ldi	r24, 0x44	; 68
    2138:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <_Z13abilitaPulserc>
        Rele_Abilitazione1(0,7); // chiudi relè
    213c:	67 e0       	ldi	r22, 0x07	; 7
    213e:	70 e0       	ldi	r23, 0x00	; 0
    2140:	80 e0       	ldi	r24, 0x00	; 0
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	02 d8       	rcall	.-4092   	; 0x114a <_Z18Rele_Abilitazione1ii>
        Carburante = "D";
    2146:	6c ea       	ldi	r22, 0xAC	; 172
    2148:	75 e0       	ldi	r23, 0x05	; 5
    214a:	83 e4       	ldi	r24, 0x43	; 67
    214c:	99 e0       	ldi	r25, 0x09	; 9
    214e:	0e 94 63 32 	call	0x64c6	; 0x64c6 <_ZN6StringaSEPKc>
		RaccoltaDati[2] = Carburante;
    2152:	63 e4       	ldi	r22, 0x43	; 67
    2154:	79 e0       	ldi	r23, 0x09	; 9
    2156:	85 e5       	ldi	r24, 0x55	; 85
    2158:	99 e0       	ldi	r25, 0x09	; 9
    215a:	0e 94 3b 32 	call	0x6476	; 0x6476 <_ZN6StringaSERKS_>
        StatoAttuale = "GASOLIO";
    215e:	62 ee       	ldi	r22, 0xE2	; 226
    2160:	75 e0       	ldi	r23, 0x05	; 5
    2162:	8f e7       	ldi	r24, 0x7F	; 127
    2164:	99 e0       	ldi	r25, 0x09	; 9
    2166:	0e 94 63 32 	call	0x64c6	; 0x64c6 <_ZN6StringaSEPKc>
        avanzaStato(10);
    216a:	6a e0       	ldi	r22, 0x0A	; 10
    216c:	70 e0       	ldi	r23, 0x00	; 0
    216e:	80 e0       	ldi	r24, 0x00	; 0
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	0e 94 e7 03 	call	0x7ce	; 0x7ce <_Z11avanzaStatom>
    2176:	0f c0       	rjmp	.+30     	; 0x2196 <__vector_7+0x14a>
        intConsecutivePresses = 0;                    // and reset press counts
        intConsecutiveNonPresses = 0;
        }
     }
     else  {            // else if button is not pressed (logic low)
     intConsecutiveNonPresses++;
    2178:	80 91 cb 09 	lds	r24, 0x09CB	; 0x8009cb <intConsecutiveNonPresses>
    217c:	90 91 cc 09 	lds	r25, 0x09CC	; 0x8009cc <intConsecutiveNonPresses+0x1>
    2180:	01 96       	adiw	r24, 0x01	; 1
    2182:	90 93 cc 09 	sts	0x09CC, r25	; 0x8009cc <intConsecutiveNonPresses+0x1>
    2186:	80 93 cb 09 	sts	0x09CB, r24	; 0x8009cb <intConsecutiveNonPresses>
     if(intConsecutiveNonPresses >= NUM_OF_CONSECUTIVE_NON_PRESSES) {
    218a:	80 91 cb 09 	lds	r24, 0x09CB	; 0x8009cb <intConsecutiveNonPresses>
    218e:	90 91 cc 09 	lds	r25, 0x09CC	; 0x8009cc <intConsecutiveNonPresses+0x1>
    2192:	02 97       	sbiw	r24, 0x02	; 2
    2194:	44 f0       	brlt	.+16     	; 0x21a6 <__vector_7+0x15a>
       intConsecutivePresses = 0;                     // reset press counts
    2196:	10 92 ce 09 	sts	0x09CE, r1	; 0x8009ce <intConsecutivePresses+0x1>
    219a:	10 92 cd 09 	sts	0x09CD, r1	; 0x8009cd <intConsecutivePresses>
       intConsecutiveNonPresses = 0;
    219e:	10 92 cc 09 	sts	0x09CC, r1	; 0x8009cc <intConsecutiveNonPresses+0x1>
    21a2:	10 92 cb 09 	sts	0x09CB, r1	; 0x8009cb <intConsecutiveNonPresses>
     }
    }
  }               
}
    21a6:	ff 91       	pop	r31
    21a8:	ef 91       	pop	r30
    21aa:	bf 91       	pop	r27
    21ac:	af 91       	pop	r26
    21ae:	9f 91       	pop	r25
    21b0:	8f 91       	pop	r24
    21b2:	7f 91       	pop	r23
    21b4:	6f 91       	pop	r22
    21b6:	5f 91       	pop	r21
    21b8:	4f 91       	pop	r20
    21ba:	3f 91       	pop	r19
    21bc:	2f 91       	pop	r18
    21be:	0f 90       	pop	r0
    21c0:	0b be       	out	0x3b, r0	; 59
    21c2:	0f 90       	pop	r0
    21c4:	0f be       	out	0x3f, r0	; 63
    21c6:	0f 90       	pop	r0
    21c8:	1f 90       	pop	r1
    21ca:	18 95       	reti

000021cc <_GLOBAL__sub_I_intConsecutivePresses>:
    21cc:	8f 92       	push	r8
    21ce:	af 92       	push	r10
    21d0:	cf 92       	push	r12
    21d2:	ef 92       	push	r14
    21d4:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    21d6:	00 e0       	ldi	r16, 0x00	; 0
    21d8:	20 e0       	ldi	r18, 0x00	; 0
    21da:	40 e0       	ldi	r20, 0x00	; 0
    21dc:	60 e0       	ldi	r22, 0x00	; 0
    21de:	8f ec       	ldi	r24, 0xCF	; 207
    21e0:	99 e0       	ldi	r25, 0x09	; 9
    21e2:	0e 94 90 2e 	call	0x5d20	; 0x5d20 <_ZN9IPAddressC1Ehhhh>
const uint8_t I2C_PCA9534_ADDR = 0x20;

volatile int intConsecutivePresses = 0;
volatile int intConsecutiveNonPresses = 0;

struct mezzoType {
    21e6:	64 e8       	ldi	r22, 0x84	; 132
    21e8:	71 e0       	ldi	r23, 0x01	; 1
    21ea:	8e eb       	ldi	r24, 0xBE	; 190
    21ec:	99 e0       	ldi	r25, 0x09	; 9
    21ee:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <_ZN6StringC1EPKc>
    21f2:	64 e8       	ldi	r22, 0x84	; 132
    21f4:	71 e0       	ldi	r23, 0x01	; 1
    21f6:	84 ec       	ldi	r24, 0xC4	; 196
    21f8:	99 e0       	ldi	r25, 0x09	; 9
    21fa:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <_ZN6StringC1EPKc>
uint8_t uid[] = { 0, 0, 0, 0, 0, 0, 0 };       // Buffer dove memorizzo la UID del Badge
uint8_t uidLength;                             // Length of the UID (4 or 7 bytes depending on ISO14443A card type)
uint8_t uidMezzo[] = { 0, 0, 0, 0, 0, 0, 0 };  // Buffer dove memorizzo la UID del Badge Mezzo
boolean alreadyTimbrata = false;

LiquidCrystal_I2C lcd(0x27, 2, 1, 0, 4, 5, 6, 7, 3, POSITIVE);  // Set the LCD I2C address
    21fe:	1f 92       	push	r1
    2200:	83 e0       	ldi	r24, 0x03	; 3
    2202:	8f 93       	push	r24
    2204:	87 e0       	ldi	r24, 0x07	; 7
    2206:	88 2e       	mov	r8, r24
    2208:	96 e0       	ldi	r25, 0x06	; 6
    220a:	a9 2e       	mov	r10, r25
    220c:	25 e0       	ldi	r18, 0x05	; 5
    220e:	c2 2e       	mov	r12, r18
    2210:	34 e0       	ldi	r19, 0x04	; 4
    2212:	e3 2e       	mov	r14, r19
    2214:	21 e0       	ldi	r18, 0x01	; 1
    2216:	42 e0       	ldi	r20, 0x02	; 2
    2218:	67 e2       	ldi	r22, 0x27	; 39
    221a:	8c e9       	ldi	r24, 0x9C	; 156
    221c:	99 e0       	ldi	r25, 0x09	; 9
    221e:	0e 94 18 28 	call	0x5030	; 0x5030 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhhh13t_backlighPol>
uint8_t Clessidra[8] = {0x1F, 0x11, 0x0A, 0x04, 0x04, 0x0E, 0x1F, 0x1F,}; 
NFC_PN532 nfc(PN532_IRQ, PN532_RESET);
    2222:	43 e0       	ldi	r20, 0x03	; 3
    2224:	64 e0       	ldi	r22, 0x04	; 4
    2226:	85 e8       	ldi	r24, 0x85	; 133
    2228:	99 e0       	ldi	r25, 0x09	; 9
    222a:	4c d3       	rcall	.+1688   	; 0x28c4 <_ZN9NFC_PN532C1Ehh>

String StatoAttuale ="START...";
    222c:	6b e0       	ldi	r22, 0x0B	; 11
    222e:	77 e0       	ldi	r23, 0x07	; 7
    2230:	8f e7       	ldi	r24, 0x7F	; 127
    2232:	99 e0       	ldi	r25, 0x09	; 9
    2234:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <_ZN6StringC1EPKc>
String strURLAPI = "";
    2238:	64 e8       	ldi	r22, 0x84	; 132
    223a:	71 e0       	ldi	r23, 0x01	; 1
    223c:	89 e7       	ldi	r24, 0x79	; 121
    223e:	99 e0       	ldi	r25, 0x09	; 9
    2240:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <_ZN6StringC1EPKc>
volatile int impulsi = 0;   // Variabile per il conteggio degli impulsi generati dal pulser

/*** GESTIONE HTTP REQUEST ***/

int HTTP_len_response = 12;
String RispostaHTTP = "";
    2244:	64 e8       	ldi	r22, 0x84	; 132
    2246:	71 e0       	ldi	r23, 0x01	; 1
    2248:	8d e6       	ldi	r24, 0x6D	; 109
    224a:	99 e0       	ldi	r25, 0x09	; 9
    224c:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <_ZN6StringC1EPKc>
// Ate;TARGA;CARB;LT;KM;
String RaccoltaDati[] = {"","","","","",""};
    2250:	64 e8       	ldi	r22, 0x84	; 132
    2252:	71 e0       	ldi	r23, 0x01	; 1
    2254:	89 e4       	ldi	r24, 0x49	; 73
    2256:	99 e0       	ldi	r25, 0x09	; 9
    2258:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <_ZN6StringC1EPKc>
    225c:	64 e8       	ldi	r22, 0x84	; 132
    225e:	71 e0       	ldi	r23, 0x01	; 1
    2260:	8f e4       	ldi	r24, 0x4F	; 79
    2262:	99 e0       	ldi	r25, 0x09	; 9
    2264:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <_ZN6StringC1EPKc>
    2268:	64 e8       	ldi	r22, 0x84	; 132
    226a:	71 e0       	ldi	r23, 0x01	; 1
    226c:	85 e5       	ldi	r24, 0x55	; 85
    226e:	99 e0       	ldi	r25, 0x09	; 9
    2270:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <_ZN6StringC1EPKc>
    2274:	64 e8       	ldi	r22, 0x84	; 132
    2276:	71 e0       	ldi	r23, 0x01	; 1
    2278:	8b e5       	ldi	r24, 0x5B	; 91
    227a:	99 e0       	ldi	r25, 0x09	; 9
    227c:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <_ZN6StringC1EPKc>
    2280:	64 e8       	ldi	r22, 0x84	; 132
    2282:	71 e0       	ldi	r23, 0x01	; 1
    2284:	81 e6       	ldi	r24, 0x61	; 97
    2286:	99 e0       	ldi	r25, 0x09	; 9
    2288:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <_ZN6StringC1EPKc>
    228c:	64 e8       	ldi	r22, 0x84	; 132
    228e:	71 e0       	ldi	r23, 0x01	; 1
    2290:	87 e6       	ldi	r24, 0x67	; 103
    2292:	99 e0       	ldi	r25, 0x09	; 9
    2294:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <_ZN6StringC1EPKc>
String Carburante = "X";
    2298:	64 ee       	ldi	r22, 0xE4	; 228
    229a:	74 e0       	ldi	r23, 0x04	; 4
    229c:	83 e4       	ldi	r24, 0x43	; 67
    229e:	99 e0       	ldi	r25, 0x09	; 9
    22a0:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <_ZN6StringC1EPKc>
String Risposta = "";
    22a4:	64 e8       	ldi	r22, 0x84	; 132
    22a6:	71 e0       	ldi	r23, 0x01	; 1
    22a8:	8d e3       	ldi	r24, 0x3D	; 61
    22aa:	99 e0       	ldi	r25, 0x09	; 9
    22ac:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <_ZN6StringC1EPKc>
String Messaggio = "";
    22b0:	64 e8       	ldi	r22, 0x84	; 132
    22b2:	71 e0       	ldi	r23, 0x01	; 1
    22b4:	87 e3       	ldi	r24, 0x37	; 55
    22b6:	99 e0       	ldi	r25, 0x09	; 9
    22b8:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <_ZN6StringC1EPKc>
String righeDisplay[] = {"X","X","X","X"};
    22bc:	64 ee       	ldi	r22, 0xE4	; 228
    22be:	74 e0       	ldi	r23, 0x04	; 4
    22c0:	8f e1       	ldi	r24, 0x1F	; 31
    22c2:	99 e0       	ldi	r25, 0x09	; 9
    22c4:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <_ZN6StringC1EPKc>
    22c8:	64 ee       	ldi	r22, 0xE4	; 228
    22ca:	74 e0       	ldi	r23, 0x04	; 4
    22cc:	85 e2       	ldi	r24, 0x25	; 37
    22ce:	99 e0       	ldi	r25, 0x09	; 9
    22d0:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <_ZN6StringC1EPKc>
    22d4:	64 ee       	ldi	r22, 0xE4	; 228
    22d6:	74 e0       	ldi	r23, 0x04	; 4
    22d8:	8b e2       	ldi	r24, 0x2B	; 43
    22da:	99 e0       	ldi	r25, 0x09	; 9
    22dc:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <_ZN6StringC1EPKc>
    22e0:	64 ee       	ldi	r22, 0xE4	; 228
    22e2:	74 e0       	ldi	r23, 0x04	; 4
    22e4:	81 e3       	ldi	r24, 0x31	; 49
    22e6:	99 e0       	ldi	r25, 0x09	; 9
    22e8:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <_ZN6StringC1EPKc>

/********************************************************************************************/
/*                    Configurazione Rete                       */
/********************************************************************************************/
 
IPAddress ipCCEC(192, 168, 0, 50);
    22ec:	02 e3       	ldi	r16, 0x32	; 50
    22ee:	20 e0       	ldi	r18, 0x00	; 0
    22f0:	48 ea       	ldi	r20, 0xA8	; 168
    22f2:	60 ec       	ldi	r22, 0xC0	; 192
    22f4:	89 e1       	ldi	r24, 0x19	; 25
    22f6:	99 e0       	ldi	r25, 0x09	; 9
    22f8:	0e 94 90 2e 	call	0x5d20	; 0x5d20 <_ZN9IPAddressC1Ehhhh>
IPAddress myDns(192,168,1, 21); // DNS
    22fc:	05 e1       	ldi	r16, 0x15	; 21
    22fe:	21 e0       	ldi	r18, 0x01	; 1
    2300:	48 ea       	ldi	r20, 0xA8	; 168
    2302:	60 ec       	ldi	r22, 0xC0	; 192
    2304:	83 e1       	ldi	r24, 0x13	; 19
    2306:	99 e0       	ldi	r25, 0x09	; 9
    2308:	0e 94 90 2e 	call	0x5d20	; 0x5d20 <_ZN9IPAddressC1Ehhhh>
IPAddress gateway(192, 168, 0, 1); // GATEWAY
    230c:	01 e0       	ldi	r16, 0x01	; 1
    230e:	20 e0       	ldi	r18, 0x00	; 0
    2310:	48 ea       	ldi	r20, 0xA8	; 168
    2312:	60 ec       	ldi	r22, 0xC0	; 192
    2314:	8d e0       	ldi	r24, 0x0D	; 13
    2316:	99 e0       	ldi	r25, 0x09	; 9
    2318:	0e 94 90 2e 	call	0x5d20	; 0x5d20 <_ZN9IPAddressC1Ehhhh>
IPAddress subnet(255, 255, 0, 0); // SUBNET
    231c:	00 e0       	ldi	r16, 0x00	; 0
    231e:	20 e0       	ldi	r18, 0x00	; 0
    2320:	4f ef       	ldi	r20, 0xFF	; 255
    2322:	6f ef       	ldi	r22, 0xFF	; 255
    2324:	87 e0       	ldi	r24, 0x07	; 7
    2326:	99 e0       	ldi	r25, 0x09	; 9
    2328:	0e 94 90 2e 	call	0x5d20	; 0x5d20 <_ZN9IPAddressC1Ehhhh>

char serverATE[]  = "wbpate-test.dipvvf.it";
char serverGAC[]  = "gacweb-test.dipvvf.it";
char serverREST[] = "geoserver.sa.dipvvf.it";

EthernetClient clientLOCAL;
    232c:	8a ef       	ldi	r24, 0xFA	; 250
    232e:	98 e0       	ldi	r25, 0x08	; 8
    2330:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <_ZN14EthernetClientC1Ev>
EthernetClient clientATE;
    2334:	8d ee       	ldi	r24, 0xED	; 237
    2336:	98 e0       	ldi	r25, 0x08	; 8
    2338:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <_ZN14EthernetClientC1Ev>

byte mac[] = {0x00, 0x0E, 0x0C, 0xB0, 0x25, 0x6F};
/********************************************************************************************/
/************ GESTIONE RTC **********/
DS3231M_Class DS3231M;  
    233c:	81 ee       	ldi	r24, 0xE1	; 225
    233e:	98 e0       	ldi	r25, 0x08	; 8
    2340:	ba d7       	rcall	.+3956   	; 0x32b6 <_ZN13DS3231M_ClassC1Ev>
const uint8_t SPRINTF_BUFFER_SIZE =     32;  
char          inputBuffer[SPRINTF_BUFFER_SIZE];  
unsigned long secs;                            // store the seconds value
unsigned long UltimoPassaggioStato = 0;        // Timer Stati Procedura
unsigned long Timer = 0;                       // Timer
DateTime nowTimer;
    2342:	40 e0       	ldi	r20, 0x00	; 0
    2344:	50 e0       	ldi	r21, 0x00	; 0
    2346:	ba 01       	movw	r22, r20
    2348:	8f ec       	ldi	r24, 0xCF	; 207
    234a:	98 e0       	ldi	r25, 0x08	; 8
    234c:	48 d6       	rcall	.+3216   	; 0x2fde <_ZN8DateTimeC1Em>
/********************************************************************************************/

const byte ROWS = 4; //four rows
const byte COLS = 4; //four columns

String TARGA = "";
    234e:	64 e8       	ldi	r22, 0x84	; 132
    2350:	71 e0       	ldi	r23, 0x01	; 1
    2352:	89 ec       	ldi	r24, 0xC9	; 201
    2354:	98 e0       	ldi	r25, 0x08	; 8
    2356:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <_ZN6StringC1EPKc>
  {'4','5','6','B'},
  {'7','8','9','C'},
  {'*','0','#','.'}
};

PCA9534 gpio;
    235a:	0f 90       	pop	r0
    235c:	0f 90       	pop	r0
    235e:	86 ec       	ldi	r24, 0xC6	; 198
    2360:	98 e0       	ldi	r25, 0x08	; 8
       intConsecutivePresses = 0;                     // reset press counts
       intConsecutiveNonPresses = 0;
     }
    }
  }               
}
    2362:	0f 91       	pop	r16
    2364:	ef 90       	pop	r14
    2366:	cf 90       	pop	r12
    2368:	af 90       	pop	r10
  {'4','5','6','B'},
  {'7','8','9','C'},
  {'*','0','#','.'}
};

PCA9534 gpio;
    236a:	8f 90       	pop	r8
    236c:	0b c2       	rjmp	.+1046   	; 0x2784 <_ZN7PCA9534C1Ev>

0000236e <_GLOBAL__sub_D_intConsecutivePresses>:
       intConsecutivePresses = 0;                     // reset press counts
       intConsecutiveNonPresses = 0;
     }
    }
  }               
}
    236e:	cf 93       	push	r28
    2370:	df 93       	push	r29
/********************************************************************************************/

const byte ROWS = 4; //four rows
const byte COLS = 4; //four columns

String TARGA = "";
    2372:	89 ec       	ldi	r24, 0xC9	; 201
    2374:	98 e0       	ldi	r25, 0x08	; 8
    2376:	0e 94 7d 31 	call	0x62fa	; 0x62fa <_ZN6StringD1Ev>
EthernetClient clientATE;

byte mac[] = {0x00, 0x0E, 0x0C, 0xB0, 0x25, 0x6F};
/********************************************************************************************/
/************ GESTIONE RTC **********/
DS3231M_Class DS3231M;  
    237a:	81 ee       	ldi	r24, 0xE1	; 225
    237c:	98 e0       	ldi	r25, 0x08	; 8
    237e:	a2 d7       	rcall	.+3908   	; 0x32c4 <_ZN13DS3231M_ClassD1Ev>
// Ate;TARGA;CARB;LT;KM;
String RaccoltaDati[] = {"","","","","",""};
String Carburante = "X";
String Risposta = "";
String Messaggio = "";
String righeDisplay[] = {"X","X","X","X"};
    2380:	81 e3       	ldi	r24, 0x31	; 49
    2382:	99 e0       	ldi	r25, 0x09	; 9
    2384:	0e 94 7d 31 	call	0x62fa	; 0x62fa <_ZN6StringD1Ev>
    2388:	8b e2       	ldi	r24, 0x2B	; 43
    238a:	99 e0       	ldi	r25, 0x09	; 9
    238c:	0e 94 7d 31 	call	0x62fa	; 0x62fa <_ZN6StringD1Ev>
    2390:	85 e2       	ldi	r24, 0x25	; 37
    2392:	99 e0       	ldi	r25, 0x09	; 9
    2394:	0e 94 7d 31 	call	0x62fa	; 0x62fa <_ZN6StringD1Ev>
    2398:	8f e1       	ldi	r24, 0x1F	; 31
    239a:	99 e0       	ldi	r25, 0x09	; 9
    239c:	0e 94 7d 31 	call	0x62fa	; 0x62fa <_ZN6StringD1Ev>
String RispostaHTTP = "";
// Ate;TARGA;CARB;LT;KM;
String RaccoltaDati[] = {"","","","","",""};
String Carburante = "X";
String Risposta = "";
String Messaggio = "";
    23a0:	87 e3       	ldi	r24, 0x37	; 55
    23a2:	99 e0       	ldi	r25, 0x09	; 9
    23a4:	0e 94 7d 31 	call	0x62fa	; 0x62fa <_ZN6StringD1Ev>
int HTTP_len_response = 12;
String RispostaHTTP = "";
// Ate;TARGA;CARB;LT;KM;
String RaccoltaDati[] = {"","","","","",""};
String Carburante = "X";
String Risposta = "";
    23a8:	8d e3       	ldi	r24, 0x3D	; 61
    23aa:	99 e0       	ldi	r25, 0x09	; 9
    23ac:	0e 94 7d 31 	call	0x62fa	; 0x62fa <_ZN6StringD1Ev>

int HTTP_len_response = 12;
String RispostaHTTP = "";
// Ate;TARGA;CARB;LT;KM;
String RaccoltaDati[] = {"","","","","",""};
String Carburante = "X";
    23b0:	83 e4       	ldi	r24, 0x43	; 67
    23b2:	99 e0       	ldi	r25, 0x09	; 9
    23b4:	0e 94 7d 31 	call	0x62fa	; 0x62fa <_ZN6StringD1Ev>
/*** GESTIONE HTTP REQUEST ***/

int HTTP_len_response = 12;
String RispostaHTTP = "";
// Ate;TARGA;CARB;LT;KM;
String RaccoltaDati[] = {"","","","","",""};
    23b8:	cd e6       	ldi	r28, 0x6D	; 109
    23ba:	d9 e0       	ldi	r29, 0x09	; 9
    23bc:	26 97       	sbiw	r28, 0x06	; 6
    23be:	ce 01       	movw	r24, r28
    23c0:	0e 94 7d 31 	call	0x62fa	; 0x62fa <_ZN6StringD1Ev>
    23c4:	89 e0       	ldi	r24, 0x09	; 9
    23c6:	c9 34       	cpi	r28, 0x49	; 73
    23c8:	d8 07       	cpc	r29, r24
    23ca:	c1 f7       	brne	.-16     	; 0x23bc <_GLOBAL__sub_D_intConsecutivePresses+0x4e>
volatile int impulsi = 0;   // Variabile per il conteggio degli impulsi generati dal pulser

/*** GESTIONE HTTP REQUEST ***/

int HTTP_len_response = 12;
String RispostaHTTP = "";
    23cc:	8d e6       	ldi	r24, 0x6D	; 109
    23ce:	99 e0       	ldi	r25, 0x09	; 9
    23d0:	0e 94 7d 31 	call	0x62fa	; 0x62fa <_ZN6StringD1Ev>
LiquidCrystal_I2C lcd(0x27, 2, 1, 0, 4, 5, 6, 7, 3, POSITIVE);  // Set the LCD I2C address
uint8_t Clessidra[8] = {0x1F, 0x11, 0x0A, 0x04, 0x04, 0x0E, 0x1F, 0x1F,}; 
NFC_PN532 nfc(PN532_IRQ, PN532_RESET);

String StatoAttuale ="START...";
String strURLAPI = "";
    23d4:	89 e7       	ldi	r24, 0x79	; 121
    23d6:	99 e0       	ldi	r25, 0x09	; 9
    23d8:	0e 94 7d 31 	call	0x62fa	; 0x62fa <_ZN6StringD1Ev>

LiquidCrystal_I2C lcd(0x27, 2, 1, 0, 4, 5, 6, 7, 3, POSITIVE);  // Set the LCD I2C address
uint8_t Clessidra[8] = {0x1F, 0x11, 0x0A, 0x04, 0x04, 0x0E, 0x1F, 0x1F,}; 
NFC_PN532 nfc(PN532_IRQ, PN532_RESET);

String StatoAttuale ="START...";
    23dc:	8f e7       	ldi	r24, 0x7F	; 127
    23de:	99 e0       	ldi	r25, 0x09	; 9
    23e0:	0e 94 7d 31 	call	0x62fa	; 0x62fa <_ZN6StringD1Ev>
const uint8_t I2C_PCA9534_ADDR = 0x20;

volatile int intConsecutivePresses = 0;
volatile int intConsecutiveNonPresses = 0;

struct mezzoType {
    23e4:	84 ec       	ldi	r24, 0xC4	; 196
    23e6:	99 e0       	ldi	r25, 0x09	; 9
    23e8:	0e 94 7d 31 	call	0x62fa	; 0x62fa <_ZN6StringD1Ev>
    23ec:	8e eb       	ldi	r24, 0xBE	; 190
    23ee:	99 e0       	ldi	r25, 0x09	; 9
       intConsecutivePresses = 0;                     // reset press counts
       intConsecutiveNonPresses = 0;
     }
    }
  }               
}
    23f0:	df 91       	pop	r29
    23f2:	cf 91       	pop	r28
const uint8_t I2C_PCA9534_ADDR = 0x20;

volatile int intConsecutivePresses = 0;
volatile int intConsecutiveNonPresses = 0;

struct mezzoType {
    23f4:	0c 94 7d 31 	jmp	0x62fa	; 0x62fa <_ZN6StringD1Ev>

000023f8 <setup>:
  }
  printTab(1);
}
/************************************************************/

void setup() {
    23f8:	cf 92       	push	r12
    23fa:	df 92       	push	r13
    23fc:	ef 92       	push	r14
    23fe:	ff 92       	push	r15
    2400:	0f 93       	push	r16
    2402:	1f 93       	push	r17
    2404:	cf 93       	push	r28
    2406:	df 93       	push	r29
    2408:	00 d0       	rcall	.+0      	; 0x240a <setup+0x12>
    240a:	00 d0       	rcall	.+0      	; 0x240c <setup+0x14>
    240c:	00 d0       	rcall	.+0      	; 0x240e <setup+0x16>
    240e:	cd b7       	in	r28, 0x3d	; 61
    2410:	de b7       	in	r29, 0x3e	; 62
    2412:	2f ef       	ldi	r18, 0xFF	; 255
    2414:	81 ee       	ldi	r24, 0xE1	; 225
    2416:	94 e0       	ldi	r25, 0x04	; 4
    2418:	21 50       	subi	r18, 0x01	; 1
    241a:	80 40       	sbci	r24, 0x00	; 0
    241c:	90 40       	sbci	r25, 0x00	; 0
    241e:	e1 f7       	brne	.-8      	; 0x2418 <setup+0x20>
    2420:	00 c0       	rjmp	.+0      	; 0x2422 <setup+0x2a>
    2422:	00 00       	nop
/*********************************************************************************************/
static const uint8_t RELE1 = PORTC7;
static const uint8_t RELE2 = PORTA7;
/*********************************************************************************************/
static inline void initSS_FLASH()  { DDRB |= (1 << PB4); } // set DDRB bit 4, sets PB4 for output
static inline void initSS_ETH()    { DDRC |= (1 << PC4); } // set DDRC bit 4, sets PC4 for output
    2424:	3c 9a       	sbi	0x07, 4	; 7
    2426:	8f e1       	ldi	r24, 0x1F	; 31
    2428:	9e e4       	ldi	r25, 0x4E	; 78
    242a:	01 97       	sbiw	r24, 0x01	; 1
    242c:	f1 f7       	brne	.-4      	; 0x242a <setup+0x32>
    242e:	00 c0       	rjmp	.+0      	; 0x2430 <setup+0x38>
    2430:	00 00       	nop
	
	_delay_ms(100);

   initSS_ETH();
   _delay_ms(5);
   disable_ETH();
    2432:	0e 94 92 01 	call	0x324	; 0x324 <_ZL11disable_ETHv>
   
   // Serial.begin(9600);
   Serial.println(" inizio Setup ......");
    2436:	64 e1       	ldi	r22, 0x14	; 20
    2438:	77 e0       	ldi	r23, 0x07	; 7
    243a:	84 e2       	ldi	r24, 0x24	; 36
    243c:	9b e0       	ldi	r25, 0x0B	; 11
    243e:	0e 94 4e 2f 	call	0x5e9c	; 0x5e9c <_ZN5Print7printlnEPKc>
 
  /*******************************************************************************************/
  DDRC |= (1 << BUZZER); // set BUZZER (PC6) for output
    2442:	3e 9a       	sbi	0x07, 6	; 7
  DDRC |= (1 << RELE1);  // Rele1
    2444:	3f 9a       	sbi	0x07, 7	; 7
  DDRA |= (1 << RELE2);  // Rele2   // set PA7 e PC7 come output 
    2446:	0f 9a       	sbi	0x01, 7	; 1
    2448:	8f e3       	ldi	r24, 0x3F	; 63
    244a:	9c e9       	ldi	r25, 0x9C	; 156
    244c:	01 97       	sbiw	r24, 0x01	; 1
    244e:	f1 f7       	brne	.-4      	; 0x244c <setup+0x54>
    2450:	00 c0       	rjmp	.+0      	; 0x2452 <setup+0x5a>
    2452:	00 00       	nop
  _delay_ms(10);
  SET_BIT(PORTC,RELE1); // Apri RELE1
    2454:	47 9a       	sbi	0x08, 7	; 8
    2456:	8f e3       	ldi	r24, 0x3F	; 63
    2458:	9c e9       	ldi	r25, 0x9C	; 156
    245a:	01 97       	sbiw	r24, 0x01	; 1
    245c:	f1 f7       	brne	.-4      	; 0x245a <setup+0x62>
    245e:	00 c0       	rjmp	.+0      	; 0x2460 <setup+0x68>
    2460:	00 00       	nop
  _delay_ms(10);
  SET_BIT(PORTA,RELE2); // Apri RELE2
    2462:	17 9a       	sbi	0x02, 7	; 2
  printLine(); 
    2464:	0e 94 07 02 	call	0x40e	; 0x40e <_Z9printLinev>
  
  /***************************LCD******************************/
  
  lcd.begin(20,4);         // Inizializza display LCD 20x4 e accendi e spegni 2 volte
    2468:	20 e0       	ldi	r18, 0x00	; 0
    246a:	44 e0       	ldi	r20, 0x04	; 4
    246c:	64 e1       	ldi	r22, 0x14	; 20
    246e:	8c e9       	ldi	r24, 0x9C	; 156
    2470:	99 e0       	ldi	r25, 0x09	; 9
    2472:	0e 94 9e 28 	call	0x513c	; 0x513c <_ZN17LiquidCrystal_I2C5beginEhhh>

  // ------- 2 blinks -------------
  for(int i = 0; i< 2; i++)
  {
    lcd.backlight();
    2476:	8c e9       	ldi	r24, 0x9C	; 156
    2478:	99 e0       	ldi	r25, 0x09	; 9
    247a:	0e 94 7b 26 	call	0x4cf6	; 0x4cf6 <_ZN3LCD9backlightEv>
    247e:	9f ef       	ldi	r25, 0xFF	; 255
    2480:	24 e3       	ldi	r18, 0x34	; 52
    2482:	8c e0       	ldi	r24, 0x0C	; 12
    2484:	91 50       	subi	r25, 0x01	; 1
    2486:	20 40       	sbci	r18, 0x00	; 0
    2488:	80 40       	sbci	r24, 0x00	; 0
    248a:	e1 f7       	brne	.-8      	; 0x2484 <setup+0x8c>
    248c:	00 c0       	rjmp	.+0      	; 0x248e <setup+0x96>
    248e:	00 00       	nop
    _delay_ms(250);
    lcd.noBacklight();
    2490:	8c e9       	ldi	r24, 0x9C	; 156
    2492:	99 e0       	ldi	r25, 0x09	; 9
    2494:	0e 94 83 26 	call	0x4d06	; 0x4d06 <_ZN3LCD11noBacklightEv>
    2498:	9f ef       	ldi	r25, 0xFF	; 255
    249a:	24 e3       	ldi	r18, 0x34	; 52
    249c:	8c e0       	ldi	r24, 0x0C	; 12
    249e:	91 50       	subi	r25, 0x01	; 1
    24a0:	20 40       	sbci	r18, 0x00	; 0
    24a2:	80 40       	sbci	r24, 0x00	; 0
    24a4:	e1 f7       	brne	.-8      	; 0x249e <setup+0xa6>
    24a6:	00 c0       	rjmp	.+0      	; 0x24a8 <setup+0xb0>
    24a8:	00 00       	nop
  lcd.begin(20,4);         // Inizializza display LCD 20x4 e accendi e spegni 2 volte

  // ------- 2 blinks -------------
  for(int i = 0; i< 2; i++)
  {
    lcd.backlight();
    24aa:	8c e9       	ldi	r24, 0x9C	; 156
    24ac:	99 e0       	ldi	r25, 0x09	; 9
    24ae:	0e 94 7b 26 	call	0x4cf6	; 0x4cf6 <_ZN3LCD9backlightEv>
    24b2:	9f ef       	ldi	r25, 0xFF	; 255
    24b4:	24 e3       	ldi	r18, 0x34	; 52
    24b6:	8c e0       	ldi	r24, 0x0C	; 12
    24b8:	91 50       	subi	r25, 0x01	; 1
    24ba:	20 40       	sbci	r18, 0x00	; 0
    24bc:	80 40       	sbci	r24, 0x00	; 0
    24be:	e1 f7       	brne	.-8      	; 0x24b8 <setup+0xc0>
    24c0:	00 c0       	rjmp	.+0      	; 0x24c2 <setup+0xca>
    24c2:	00 00       	nop
    _delay_ms(250);
    lcd.noBacklight();
    24c4:	8c e9       	ldi	r24, 0x9C	; 156
    24c6:	99 e0       	ldi	r25, 0x09	; 9
    24c8:	0e 94 83 26 	call	0x4d06	; 0x4d06 <_ZN3LCD11noBacklightEv>
    24cc:	9f ef       	ldi	r25, 0xFF	; 255
    24ce:	24 e3       	ldi	r18, 0x34	; 52
    24d0:	8c e0       	ldi	r24, 0x0C	; 12
    24d2:	91 50       	subi	r25, 0x01	; 1
    24d4:	20 40       	sbci	r18, 0x00	; 0
    24d6:	80 40       	sbci	r24, 0x00	; 0
    24d8:	e1 f7       	brne	.-8      	; 0x24d2 <setup+0xda>
    24da:	00 c0       	rjmp	.+0      	; 0x24dc <setup+0xe4>
    24dc:	00 00       	nop
    _delay_ms(250);
  }

  lcd.createChar(1, Clessidra); // Creo CHAR Clessidra
    24de:	4d e5       	ldi	r20, 0x5D	; 93
    24e0:	51 e0       	ldi	r21, 0x01	; 1
    24e2:	61 e0       	ldi	r22, 0x01	; 1
    24e4:	8c e9       	ldi	r24, 0x9C	; 156
    24e6:	99 e0       	ldi	r25, 0x09	; 9
    24e8:	0e 94 61 27 	call	0x4ec2	; 0x4ec2 <_ZN3LCD10createCharEhPh>
    24ec:	9f ef       	ldi	r25, 0xFF	; 255
    24ee:	29 ef       	ldi	r18, 0xF9	; 249
    24f0:	80 e0       	ldi	r24, 0x00	; 0
    24f2:	91 50       	subi	r25, 0x01	; 1
    24f4:	20 40       	sbci	r18, 0x00	; 0
    24f6:	80 40       	sbci	r24, 0x00	; 0
    24f8:	e1 f7       	brne	.-8      	; 0x24f2 <setup+0xfa>
    24fa:	00 c0       	rjmp	.+0      	; 0x24fc <setup+0x104>
    24fc:	00 00       	nop
  _delay_ms(20);
  lcd.backlight();
    24fe:	8c e9       	ldi	r24, 0x9C	; 156
    2500:	99 e0       	ldi	r25, 0x09	; 9
    2502:	0e 94 7b 26 	call	0x4cf6	; 0x4cf6 <_ZN3LCD9backlightEv>
    2506:	0f e1       	ldi	r16, 0x1F	; 31
    2508:	19 e0       	ldi	r17, 0x09	; 9

  for (int r=0;r<4;r++)
    righeDisplay[r]="";
    250a:	64 e8       	ldi	r22, 0x84	; 132
    250c:	71 e0       	ldi	r23, 0x01	; 1
    250e:	c8 01       	movw	r24, r16
    2510:	0e 94 63 32 	call	0x64c6	; 0x64c6 <_ZN6StringaSEPKc>
    2514:	0a 5f       	subi	r16, 0xFA	; 250
    2516:	1f 4f       	sbci	r17, 0xFF	; 255

  lcd.createChar(1, Clessidra); // Creo CHAR Clessidra
  _delay_ms(20);
  lcd.backlight();

  for (int r=0;r<4;r++)
    2518:	99 e0       	ldi	r25, 0x09	; 9
    251a:	07 33       	cpi	r16, 0x37	; 55
    251c:	19 07       	cpc	r17, r25
    251e:	a9 f7       	brne	.-22     	; 0x250a <setup+0x112>
    righeDisplay[r]="";
  
   printLine();
    2520:	0e 94 07 02 	call	0x40e	; 0x40e <_Z9printLinev>
   
  /***************************NFC*************************/ 
  
  nfc.begin(); 
    2524:	85 e8       	ldi	r24, 0x85	; 133
    2526:	99 e0       	ldi	r25, 0x09	; 9
    2528:	de d1       	rcall	.+956    	; 0x28e6 <_ZN9NFC_PN5325beginEv>
    252a:	2f ef       	ldi	r18, 0xFF	; 255
    252c:	80 e7       	ldi	r24, 0x70	; 112
    252e:	92 e0       	ldi	r25, 0x02	; 2
    2530:	21 50       	subi	r18, 0x01	; 1
    2532:	80 40       	sbci	r24, 0x00	; 0
    2534:	90 40       	sbci	r25, 0x00	; 0
    2536:	e1 f7       	brne	.-8      	; 0x2530 <setup+0x138>
    2538:	00 c0       	rjmp	.+0      	; 0x253a <setup+0x142>
    253a:	00 00       	nop
  
  _delay_ms(50);

  uint32_t versiondata = nfc.getFirmwareVersion();
    253c:	85 e8       	ldi	r24, 0x85	; 133
    253e:	99 e0       	ldi	r25, 0x09	; 9
    2540:	72 d3       	rcall	.+1764   	; 0x2c26 <_ZN9NFC_PN53218getFirmwareVersionEv>
    2542:	6b 01       	movw	r12, r22
    2544:	7c 01       	movw	r14, r24
  if (! versiondata) {
    2546:	67 2b       	or	r22, r23
    2548:	68 2b       	or	r22, r24
    254a:	69 2b       	or	r22, r25
    254c:	69 f5       	brne	.+90     	; 0x25a8 <setup+0x1b0>
    Serial.print("Modulo PN532 non trovato");
    254e:	69 e2       	ldi	r22, 0x29	; 41
    2550:	77 e0       	ldi	r23, 0x07	; 7
    2552:	84 e2       	ldi	r24, 0x24	; 36
    2554:	9b e0       	ldi	r25, 0x0B	; 11
    2556:	0e 94 23 2f 	call	0x5e46	; 0x5e46 <_ZN5Print5printEPKc>
    lcd.backlight();
    255a:	8c e9       	ldi	r24, 0x9C	; 156
    255c:	99 e0       	ldi	r25, 0x09	; 9
    255e:	0e 94 7b 26 	call	0x4cf6	; 0x4cf6 <_ZN3LCD9backlightEv>
    2562:	2f ef       	ldi	r18, 0xFF	; 255
    2564:	84 e3       	ldi	r24, 0x34	; 52
    2566:	9c e0       	ldi	r25, 0x0C	; 12
    2568:	21 50       	subi	r18, 0x01	; 1
    256a:	80 40       	sbci	r24, 0x00	; 0
    256c:	90 40       	sbci	r25, 0x00	; 0
    256e:	e1 f7       	brne	.-8      	; 0x2568 <setup+0x170>
    2570:	00 c0       	rjmp	.+0      	; 0x2572 <setup+0x17a>
    2572:	00 00       	nop
    _delay_ms(250);
    lcd.clear();
    2574:	8c e9       	ldi	r24, 0x9C	; 156
    2576:	99 e0       	ldi	r25, 0x09	; 9
    2578:	0e 94 93 26 	call	0x4d26	; 0x4d26 <_ZN3LCD5clearEv>
    lcd.print("Modulo PN532 non trovato ");    
    257c:	62 e4       	ldi	r22, 0x42	; 66
    257e:	77 e0       	ldi	r23, 0x07	; 7
    2580:	8c e9       	ldi	r24, 0x9C	; 156
    2582:	99 e0       	ldi	r25, 0x09	; 9
    2584:	0e 94 23 2f 	call	0x5e46	; 0x5e46 <_ZN5Print5printEPKc>
    2588:	2f ef       	ldi	r18, 0xFF	; 255
    258a:	87 ea       	ldi	r24, 0xA7	; 167
    258c:	91 e6       	ldi	r25, 0x61	; 97
    258e:	21 50       	subi	r18, 0x01	; 1
    2590:	80 40       	sbci	r24, 0x00	; 0
    2592:	90 40       	sbci	r25, 0x00	; 0
    2594:	e1 f7       	brne	.-8      	; 0x258e <setup+0x196>
    2596:	00 c0       	rjmp	.+0      	; 0x2598 <setup+0x1a0>
    2598:	00 00       	nop
    _delay_ms(2000);                            
    StatoAttuale  = " CHIAMA ASSISTENZA";   
    259a:	6c e5       	ldi	r22, 0x5C	; 92
    259c:	77 e0       	ldi	r23, 0x07	; 7
    259e:	8f e7       	ldi	r24, 0x7F	; 127
    25a0:	99 e0       	ldi	r25, 0x09	; 9
    25a2:	0e 94 63 32 	call	0x64c6	; 0x64c6 <_ZN6StringaSEPKc>
    25a6:	06 c0       	rjmp	.+12     	; 0x25b4 <setup+0x1bc>
    //while (1); // halt  // Aspetta per sempre
  } else {Serial.println("Modulo NFC OK ......");}
    25a8:	6f e6       	ldi	r22, 0x6F	; 111
    25aa:	77 e0       	ldi	r23, 0x07	; 7
    25ac:	84 e2       	ldi	r24, 0x24	; 36
    25ae:	9b e0       	ldi	r25, 0x0B	; 11
    25b0:	0e 94 4e 2f 	call	0x5e9c	; 0x5e9c <_ZN5Print7printlnEPKc>
  
  Serial.print("Found chip PN5"); Serial.println((versiondata>>24) & 0xFF, HEX);
    25b4:	64 e8       	ldi	r22, 0x84	; 132
    25b6:	77 e0       	ldi	r23, 0x07	; 7
    25b8:	84 e2       	ldi	r24, 0x24	; 36
    25ba:	9b e0       	ldi	r25, 0x0B	; 11
    25bc:	0e 94 23 2f 	call	0x5e46	; 0x5e46 <_ZN5Print5printEPKc>
    25c0:	4f 2d       	mov	r20, r15
    25c2:	55 27       	eor	r21, r21
    25c4:	66 27       	eor	r22, r22
    25c6:	77 27       	eor	r23, r23
    25c8:	20 e1       	ldi	r18, 0x10	; 16
    25ca:	30 e0       	ldi	r19, 0x00	; 0
    25cc:	84 e2       	ldi	r24, 0x24	; 36
    25ce:	9b e0       	ldi	r25, 0x0B	; 11
    25d0:	0e 94 b7 2f 	call	0x5f6e	; 0x5f6e <_ZN5Print7printlnEmi>
  Serial.print("Firmware ver. "); Serial.print((versiondata>>16) & 0xFF, DEC);
    25d4:	63 e9       	ldi	r22, 0x93	; 147
    25d6:	77 e0       	ldi	r23, 0x07	; 7
    25d8:	84 e2       	ldi	r24, 0x24	; 36
    25da:	9b e0       	ldi	r25, 0x0B	; 11
    25dc:	0e 94 23 2f 	call	0x5e46	; 0x5e46 <_ZN5Print5printEPKc>
    25e0:	4e 2d       	mov	r20, r14
    25e2:	50 e0       	ldi	r21, 0x00	; 0
    25e4:	60 e0       	ldi	r22, 0x00	; 0
    25e6:	70 e0       	ldi	r23, 0x00	; 0
    25e8:	2a e0       	ldi	r18, 0x0A	; 10
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	84 e2       	ldi	r24, 0x24	; 36
    25ee:	9b e0       	ldi	r25, 0x0B	; 11
    25f0:	0e 94 a5 2f 	call	0x5f4a	; 0x5f4a <_ZN5Print5printEmi>
  Serial.print('.'); Serial.println((versiondata>>8) & 0xFF, DEC);
    25f4:	6e e2       	ldi	r22, 0x2E	; 46
    25f6:	84 e2       	ldi	r24, 0x24	; 36
    25f8:	9b e0       	ldi	r25, 0x0B	; 11
    25fa:	0e 94 24 2f 	call	0x5e48	; 0x5e48 <_ZN5Print5printEc>
    25fe:	4d 2d       	mov	r20, r13
    2600:	50 e0       	ldi	r21, 0x00	; 0
    2602:	60 e0       	ldi	r22, 0x00	; 0
    2604:	70 e0       	ldi	r23, 0x00	; 0
    2606:	2a e0       	ldi	r18, 0x0A	; 10
    2608:	30 e0       	ldi	r19, 0x00	; 0
    260a:	84 e2       	ldi	r24, 0x24	; 36
    260c:	9b e0       	ldi	r25, 0x0B	; 11
    260e:	0e 94 b7 2f 	call	0x5f6e	; 0x5f6e <_ZN5Print7printlnEmi>

  nfc.setPassiveActivationRetries(0xFF);   
    2612:	6f ef       	ldi	r22, 0xFF	; 255
    2614:	85 e8       	ldi	r24, 0x85	; 133
    2616:	99 e0       	ldi	r25, 0x09	; 9
    2618:	7c d3       	rcall	.+1784   	; 0x2d12 <_ZN9NFC_PN53227setPassiveActivationRetriesEh>
  nfc.SAMConfig();
    261a:	85 e8       	ldi	r24, 0x85	; 133
    261c:	99 e0       	ldi	r25, 0x09	; 9
    261e:	4b d3       	rcall	.+1686   	; 0x2cb6 <_ZN9NFC_PN5329SAMConfigEv>
    2620:	0e 94 07 02 	call	0x40e	; 0x40e <_Z9printLinev>
  printLine();
    2624:	40 ea       	ldi	r20, 0xA0	; 160
  /***************************SPY FLASH*************************/  
  
  /*************************** RTC ************************/
  while (!DS3231M.begin()) {                                                 
    2626:	56 e8       	ldi	r21, 0x86	; 134
    2628:	61 e0       	ldi	r22, 0x01	; 1
    262a:	70 e0       	ldi	r23, 0x00	; 0
    262c:	81 ee       	ldi	r24, 0xE1	; 225
    262e:	98 e0       	ldi	r25, 0x08	; 8
    2630:	8c d6       	rcall	.+3352   	; 0x334a <_ZN13DS3231M_Class5beginEm>
    2632:	81 11       	cpse	r24, r1
    2634:	10 c0       	rjmp	.+32     	; 0x2656 <setup+0x25e>
    2636:	62 ee       	ldi	r22, 0xE2	; 226
    Serial.println(F("Unable to find DS3231MM. Checking again in 3s."));     
    2638:	71 e0       	ldi	r23, 0x01	; 1
    263a:	84 e2       	ldi	r24, 0x24	; 36
    263c:	9b e0       	ldi	r25, 0x0B	; 11
    263e:	0e 94 2e 2f 	call	0x5e5c	; 0x5e5c <_ZN5Print7printlnEPK19__FlashStringHelper>
    2642:	2f ef       	ldi	r18, 0xFF	; 255
    2644:	83 ed       	ldi	r24, 0xD3	; 211
    2646:	90 e3       	ldi	r25, 0x30	; 48
    2648:	21 50       	subi	r18, 0x01	; 1
    264a:	80 40       	sbci	r24, 0x00	; 0
    264c:	90 40       	sbci	r25, 0x00	; 0
    264e:	e1 f7       	brne	.-8      	; 0x2648 <setup+0x250>
    2650:	00 c0       	rjmp	.+0      	; 0x2652 <setup+0x25a>
    2652:	00 00       	nop
    2654:	e7 cf       	rjmp	.-50     	; 0x2624 <setup+0x22c>
    2656:	2f ef       	ldi	r18, 0xFF	; 255
    2658:	80 e7       	ldi	r24, 0x70	; 112
    265a:	92 e0       	ldi	r25, 0x02	; 2
    265c:	21 50       	subi	r18, 0x01	; 1
    265e:	80 40       	sbci	r24, 0x00	; 0
    2660:	90 40       	sbci	r25, 0x00	; 0
    2662:	e1 f7       	brne	.-8      	; 0x265c <setup+0x264>
    2664:	00 c0       	rjmp	.+0      	; 0x2666 <setup+0x26e>
    2666:	00 00       	nop
    2668:	64 ec       	ldi	r22, 0xC4	; 196
    _delay_ms(1000);                                                         
  } 
  _delay_ms(50);

  Serial.println(F("RTC chip DS3231M initialized."));                                 
    266a:	71 e0       	ldi	r23, 0x01	; 1
    266c:	84 e2       	ldi	r24, 0x24	; 36
    266e:	9b e0       	ldi	r25, 0x0B	; 11
    2670:	0e 94 2e 2f 	call	0x5e5c	; 0x5e5c <_ZN5Print7printlnEPK19__FlashStringHelper>
  DS3231M.adjust();
    2674:	81 ee       	ldi	r24, 0xE1	; 225
    2676:	98 e0       	ldi	r25, 0x08	; 8
    2678:	c6 d7       	rcall	.+3980   	; 0x3606 <_ZN13DS3231M_Class6adjustEv>
    267a:	0e 94 07 02 	call	0x40e	; 0x40e <_Z9printLinev>
  printLine();
    267e:	62 ea       	ldi	r22, 0xA2	; 162
  /*************************** POTENZIOMETRI ************************/
  Serial.println("Inizializzo POTENZIOMETRI per livello pulser.......");
    2680:	77 e0       	ldi	r23, 0x07	; 7
    2682:	84 e2       	ldi	r24, 0x24	; 36
    2684:	9b e0       	ldi	r25, 0x0B	; 11
    2686:	0e 94 4e 2f 	call	0x5e9c	; 0x5e9c <_ZN5Print7printlnEPKc>
    268a:	8e ec       	ldi	r24, 0xCE	; 206
  
  Wire.begin(); // join i2c bus (address optional for master) 
    268c:	9a e0       	ldi	r25, 0x0A	; 10
    268e:	0e 94 01 2c 	call	0x5802	; 0x5802 <_ZN7TwoWire5beginEv>
    2692:	68 e2       	ldi	r22, 0x28	; 40
  
  Wire.beginTransmission(0x28);  // (0x50) POTENZIOMETRO U11
    2694:	70 e0       	ldi	r23, 0x00	; 0
    2696:	8e ec       	ldi	r24, 0xCE	; 206
    2698:	9a e0       	ldi	r25, 0x0A	; 10
    269a:	0e 94 1e 2c 	call	0x583c	; 0x583c <_ZN7TwoWire17beginTransmissionEi>
    269e:	60 e0       	ldi	r22, 0x00	; 0
  Wire.write(byte(0x00));        // Wiper Register
    26a0:	8e ec       	ldi	r24, 0xCE	; 206
    26a2:	9a e0       	ldi	r25, 0x0A	; 10
    26a4:	0e 94 c3 2b 	call	0x5786	; 0x5786 <_ZN7TwoWire5writeEh>
    26a8:	62 e3       	ldi	r22, 0x32	; 50
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    26aa:	8e ec       	ldi	r24, 0xCE	; 206
    26ac:	9a e0       	ldi	r25, 0x0A	; 10
    26ae:	0e 94 c3 2b 	call	0x5786	; 0x5786 <_ZN7TwoWire5writeEh>
    26b2:	8e ec       	ldi	r24, 0xCE	; 206
  Wire.write(50);                // Valore del potenziomentro circa 6 volt
  Wire.endTransmission(); 
    26b4:	9a e0       	ldi	r25, 0x0A	; 10
    26b6:	0e 94 95 2c 	call	0x592a	; 0x592a <_ZN7TwoWire15endTransmissionEv>
    26ba:	2f ef       	ldi	r18, 0xFF	; 255
    26bc:	80 e7       	ldi	r24, 0x70	; 112
    26be:	92 e0       	ldi	r25, 0x02	; 2
    26c0:	21 50       	subi	r18, 0x01	; 1
    26c2:	80 40       	sbci	r24, 0x00	; 0
    26c4:	90 40       	sbci	r25, 0x00	; 0
    26c6:	e1 f7       	brne	.-8      	; 0x26c0 <setup+0x2c8>
    26c8:	00 c0       	rjmp	.+0      	; 0x26ca <setup+0x2d2>
    26ca:	00 00       	nop
    26cc:	62 e5       	ldi	r22, 0x52	; 82
   
   _delay_ms(50);     
   
   Wire.beginTransmission(0x52);  // (0x52) POTENZIOMETRO U12
    26ce:	70 e0       	ldi	r23, 0x00	; 0
    26d0:	8e ec       	ldi	r24, 0xCE	; 206
    26d2:	9a e0       	ldi	r25, 0x0A	; 10
    26d4:	0e 94 1e 2c 	call	0x583c	; 0x583c <_ZN7TwoWire17beginTransmissionEi>
    26d8:	60 e0       	ldi	r22, 0x00	; 0
   Wire.write(byte(0x00));        // Wiper Register
    26da:	8e ec       	ldi	r24, 0xCE	; 206
    26dc:	9a e0       	ldi	r25, 0x0A	; 10
    26de:	0e 94 c3 2b 	call	0x5786	; 0x5786 <_ZN7TwoWire5writeEh>
    26e2:	62 e3       	ldi	r22, 0x32	; 50
    26e4:	8e ec       	ldi	r24, 0xCE	; 206
    26e6:	9a e0       	ldi	r25, 0x0A	; 10
    26e8:	0e 94 c3 2b 	call	0x5786	; 0x5786 <_ZN7TwoWire5writeEh>
    26ec:	8e ec       	ldi	r24, 0xCE	; 206
   Wire.write(50);                // Valore del potenziomentro circa 6 volt
   Wire.endTransmission(); 
    26ee:	9a e0       	ldi	r25, 0x0A	; 10
    26f0:	0e 94 95 2c 	call	0x592a	; 0x592a <_ZN7TwoWire15endTransmissionEv>
    26f4:	8e ec       	ldi	r24, 0xCE	; 206
  
   Wire.end();
    26f6:	9a e0       	ldi	r25, 0x0A	; 10
    26f8:	0e 94 10 2c 	call	0x5820	; 0x5820 <_ZN7TwoWire3endEv>
    26fc:	66 ed       	ldi	r22, 0xD6	; 214

   Serial.println("POTENZIOMETRI OK");
    26fe:	77 e0       	ldi	r23, 0x07	; 7
    2700:	84 e2       	ldi	r24, 0x24	; 36
    2702:	9b e0       	ldi	r25, 0x0B	; 11
    2704:	0e 94 4e 2f 	call	0x5e9c	; 0x5e9c <_ZN5Print7printlnEPKc>
    2708:	0e 94 07 02 	call	0x40e	; 0x40e <_Z9printLinev>
   printLine();
  /*************************KEYPAD*********************/
   gpio.begin(I2C_PCA9534_ADDR);
    270c:	60 e2       	ldi	r22, 0x20	; 32
    270e:	86 ec       	ldi	r24, 0xC6	; 198
    2710:	98 e0       	ldi	r25, 0x08	; 8
    2712:	3d d0       	rcall	.+122    	; 0x278e <_ZN7PCA95345beginEh>
   
  // set REG IOexpander OPREG 11000011,INVREG 00000000,CONFREG 00111100
   gpio.setporteIoExp(0xC3,0x00,0x3C); 
    2714:	2c e3       	ldi	r18, 0x3C	; 60
    2716:	40 e0       	ldi	r20, 0x00	; 0
    2718:	63 ec       	ldi	r22, 0xC3	; 195
    271a:	86 ec       	ldi	r24, 0xC6	; 198
    271c:	98 e0       	ldi	r25, 0x08	; 8
    271e:	3d d0       	rcall	.+122    	; 0x279a <_ZN7PCA953413setporteIoExpEhhh>
    2720:	8e ef       	ldi	r24, 0xFE	; 254
  /**************** SETTING INIZIALI ******************/      
  
  stato_procedura = - 2; // set stato di partenza
    2722:	9f ef       	ldi	r25, 0xFF	; 255
    2724:	90 93 76 09 	sts	0x0976, r25	; 0x800976 <stato_procedura+0x1>
    2728:	80 93 75 09 	sts	0x0975, r24	; 0x800975 <stato_procedura>
    272c:	67 ee       	ldi	r22, 0xE7	; 231
  
  StatoAttuale = "Starting ...."; 
    272e:	77 e0       	ldi	r23, 0x07	; 7
    2730:	8f e7       	ldi	r24, 0x7F	; 127
    2732:	99 e0       	ldi	r25, 0x09	; 9
    2734:	0e 94 63 32 	call	0x64c6	; 0x64c6 <_ZN6StringaSEPKc>
    2738:	65 ef       	ldi	r22, 0xF5	; 245
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    273a:	77 e0       	ldi	r23, 0x07	; 7
    273c:	ce 01       	movw	r24, r28
    273e:	01 96       	adiw	r24, 0x01	; 1
    2740:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <_ZN6StringC1EPKc>
    2744:	6f e7       	ldi	r22, 0x7F	; 127
  
  Serial.println("Stato Iniziale" + StatoAttuale);
    2746:	79 e0       	ldi	r23, 0x09	; 9
    2748:	ce 01       	movw	r24, r28
    274a:	01 96       	adiw	r24, 0x01	; 1
    274c:	0e 94 8f 33 	call	0x671e	; 0x671e <_ZplRK15StringSumHelperRK6String>
    2750:	bc 01       	movw	r22, r24
    2752:	84 e2       	ldi	r24, 0x24	; 36
    2754:	9b e0       	ldi	r25, 0x0B	; 11
    2756:	0e 94 3e 2f 	call	0x5e7c	; 0x5e7c <_ZN5Print7printlnERK6String>
    275a:	ce 01       	movw	r24, r28
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    275c:	01 96       	adiw	r24, 0x01	; 1
    275e:	0e 94 7d 31 	call	0x62fa	; 0x62fa <_ZN6StringD1Ev>
    2762:	0e 94 07 02 	call	0x40e	; 0x40e <_Z9printLinev>
  
  printLine();
    2766:	26 96       	adiw	r28, 0x06	; 6
}
    2768:	0f b6       	in	r0, 0x3f	; 63
    276a:	f8 94       	cli
    276c:	de bf       	out	0x3e, r29	; 62
    276e:	0f be       	out	0x3f, r0	; 63
    2770:	cd bf       	out	0x3d, r28	; 61
    2772:	df 91       	pop	r29
    2774:	cf 91       	pop	r28
    2776:	1f 91       	pop	r17
    2778:	0f 91       	pop	r16
    277a:	ff 90       	pop	r15
    277c:	ef 90       	pop	r14
    277e:	df 90       	pop	r13
    2780:	cf 90       	pop	r12
    2782:	08 95       	ret

00002784 <_ZN7PCA9534C1Ev>:
    2784:	fc 01       	movw	r30, r24
	Wire.requestFrom(_i2caddr, 1);
	while (Wire.available()) {
		buff = Wire.read();
	}
	return (buff & (1 << pin)) ? HIGH : LOW;
}
    2786:	10 82       	st	Z, r1
    2788:	11 82       	std	Z+1, r1	; 0x01
    278a:	12 82       	std	Z+2, r1	; 0x02
    278c:	08 95       	ret

0000278e <_ZN7PCA95345beginEh>:
    278e:	fc 01       	movw	r30, r24
    2790:	60 83       	st	Z, r22
    2792:	8e ec       	ldi	r24, 0xCE	; 206
    2794:	9a e0       	ldi	r25, 0x0A	; 10
    2796:	0c 94 01 2c 	jmp	0x5802	; 0x5802 <_ZN7TwoWire5beginEv>

0000279a <_ZN7PCA953413setporteIoExpEhhh>:
    279a:	ff 92       	push	r15
    279c:	0f 93       	push	r16
    279e:	1f 93       	push	r17
    27a0:	cf 93       	push	r28
    27a2:	df 93       	push	r29
    27a4:	ec 01       	movw	r28, r24
    27a6:	f6 2e       	mov	r15, r22
    27a8:	04 2f       	mov	r16, r20
    27aa:	12 2f       	mov	r17, r18
    27ac:	68 81       	ld	r22, Y
    27ae:	8e ec       	ldi	r24, 0xCE	; 206
    27b0:	9a e0       	ldi	r25, 0x0A	; 10
    27b2:	0e 94 14 2c 	call	0x5828	; 0x5828 <_ZN7TwoWire17beginTransmissionEh>
    27b6:	61 e0       	ldi	r22, 0x01	; 1
    27b8:	8e ec       	ldi	r24, 0xCE	; 206
    27ba:	9a e0       	ldi	r25, 0x0A	; 10
    27bc:	0e 94 c3 2b 	call	0x5786	; 0x5786 <_ZN7TwoWire5writeEh>
    27c0:	6f 2d       	mov	r22, r15
    27c2:	8e ec       	ldi	r24, 0xCE	; 206
    27c4:	9a e0       	ldi	r25, 0x0A	; 10
    27c6:	0e 94 c3 2b 	call	0x5786	; 0x5786 <_ZN7TwoWire5writeEh>
    27ca:	8e ec       	ldi	r24, 0xCE	; 206
    27cc:	9a e0       	ldi	r25, 0x0A	; 10
    27ce:	0e 94 95 2c 	call	0x592a	; 0x592a <_ZN7TwoWire15endTransmissionEv>
    27d2:	68 81       	ld	r22, Y
    27d4:	8e ec       	ldi	r24, 0xCE	; 206
    27d6:	9a e0       	ldi	r25, 0x0A	; 10
    27d8:	0e 94 14 2c 	call	0x5828	; 0x5828 <_ZN7TwoWire17beginTransmissionEh>
    27dc:	62 e0       	ldi	r22, 0x02	; 2
    27de:	8e ec       	ldi	r24, 0xCE	; 206
    27e0:	9a e0       	ldi	r25, 0x0A	; 10
    27e2:	0e 94 c3 2b 	call	0x5786	; 0x5786 <_ZN7TwoWire5writeEh>
    27e6:	60 2f       	mov	r22, r16
    27e8:	8e ec       	ldi	r24, 0xCE	; 206
    27ea:	9a e0       	ldi	r25, 0x0A	; 10
    27ec:	0e 94 c3 2b 	call	0x5786	; 0x5786 <_ZN7TwoWire5writeEh>
    27f0:	8e ec       	ldi	r24, 0xCE	; 206
    27f2:	9a e0       	ldi	r25, 0x0A	; 10
    27f4:	0e 94 95 2c 	call	0x592a	; 0x592a <_ZN7TwoWire15endTransmissionEv>
    27f8:	8f e3       	ldi	r24, 0x3F	; 63
    27fa:	9c e9       	ldi	r25, 0x9C	; 156
    27fc:	01 97       	sbiw	r24, 0x01	; 1
    27fe:	f1 f7       	brne	.-4      	; 0x27fc <_ZN7PCA953413setporteIoExpEhhh+0x62>
    2800:	00 c0       	rjmp	.+0      	; 0x2802 <_ZN7PCA953413setporteIoExpEhhh+0x68>
    2802:	00 00       	nop
    2804:	68 81       	ld	r22, Y
    2806:	8e ec       	ldi	r24, 0xCE	; 206
    2808:	9a e0       	ldi	r25, 0x0A	; 10
    280a:	0e 94 14 2c 	call	0x5828	; 0x5828 <_ZN7TwoWire17beginTransmissionEh>
    280e:	63 e0       	ldi	r22, 0x03	; 3
    2810:	8e ec       	ldi	r24, 0xCE	; 206
    2812:	9a e0       	ldi	r25, 0x0A	; 10
    2814:	0e 94 c3 2b 	call	0x5786	; 0x5786 <_ZN7TwoWire5writeEh>
    2818:	61 2f       	mov	r22, r17
    281a:	8e ec       	ldi	r24, 0xCE	; 206
    281c:	9a e0       	ldi	r25, 0x0A	; 10
    281e:	0e 94 c3 2b 	call	0x5786	; 0x5786 <_ZN7TwoWire5writeEh>
    2822:	8e ec       	ldi	r24, 0xCE	; 206
    2824:	9a e0       	ldi	r25, 0x0A	; 10
    2826:	0e 94 95 2c 	call	0x592a	; 0x592a <_ZN7TwoWire15endTransmissionEv>
    282a:	8f e3       	ldi	r24, 0x3F	; 63
    282c:	9c e9       	ldi	r25, 0x9C	; 156
    282e:	01 97       	sbiw	r24, 0x01	; 1
    2830:	f1 f7       	brne	.-4      	; 0x282e <_ZN7PCA953413setporteIoExpEhhh+0x94>
    2832:	00 c0       	rjmp	.+0      	; 0x2834 <_ZN7PCA953413setporteIoExpEhhh+0x9a>
    2834:	00 00       	nop
    2836:	df 91       	pop	r29
    2838:	cf 91       	pop	r28
    283a:	1f 91       	pop	r17
    283c:	0f 91       	pop	r16
    283e:	ff 90       	pop	r15
    2840:	08 95       	ret

00002842 <_ZN7PCA953410setCONFREGEh>:
    2842:	cf 93       	push	r28
    2844:	c6 2f       	mov	r28, r22
    2846:	fc 01       	movw	r30, r24
    2848:	60 81       	ld	r22, Z
    284a:	8e ec       	ldi	r24, 0xCE	; 206
    284c:	9a e0       	ldi	r25, 0x0A	; 10
    284e:	0e 94 14 2c 	call	0x5828	; 0x5828 <_ZN7TwoWire17beginTransmissionEh>
    2852:	63 e0       	ldi	r22, 0x03	; 3
    2854:	8e ec       	ldi	r24, 0xCE	; 206
    2856:	9a e0       	ldi	r25, 0x0A	; 10
    2858:	0e 94 c3 2b 	call	0x5786	; 0x5786 <_ZN7TwoWire5writeEh>
    285c:	6c 2f       	mov	r22, r28
    285e:	8e ec       	ldi	r24, 0xCE	; 206
    2860:	9a e0       	ldi	r25, 0x0A	; 10
    2862:	0e 94 c3 2b 	call	0x5786	; 0x5786 <_ZN7TwoWire5writeEh>
    2866:	8e ec       	ldi	r24, 0xCE	; 206
    2868:	9a e0       	ldi	r25, 0x0A	; 10
    286a:	cf 91       	pop	r28
    286c:	0c 94 95 2c 	jmp	0x592a	; 0x592a <_ZN7TwoWire15endTransmissionEv>

00002870 <_ZN7PCA953416Read_IP_REGISTEREv>:

uint8_t PCA9534::Read_IP_REGISTER() {
    2870:	cf 93       	push	r28
    2872:	df 93       	push	r29
    2874:	ec 01       	movw	r28, r24
	uint8_t buff = 0;

	//_i2caddr = i2caddr;

	Wire.beginTransmission(_i2caddr);
    2876:	68 81       	ld	r22, Y
    2878:	8e ec       	ldi	r24, 0xCE	; 206
    287a:	9a e0       	ldi	r25, 0x0A	; 10
    287c:	0e 94 14 2c 	call	0x5828	; 0x5828 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(PCA9534_IP_REGISTER);
    2880:	60 e0       	ldi	r22, 0x00	; 0
    2882:	8e ec       	ldi	r24, 0xCE	; 206
    2884:	9a e0       	ldi	r25, 0x0A	; 10
    2886:	0e 94 c3 2b 	call	0x5786	; 0x5786 <_ZN7TwoWire5writeEh>
	// Wire.write(_port);
	Wire.endTransmission();
    288a:	8e ec       	ldi	r24, 0xCE	; 206
    288c:	9a e0       	ldi	r25, 0x0A	; 10
    288e:	0e 94 95 2c 	call	0x592a	; 0x592a <_ZN7TwoWire15endTransmissionEv>

	// We only need to read 1 byte of data to get the pins
	Wire.requestFrom(_i2caddr, 1);
    2892:	68 81       	ld	r22, Y
    2894:	70 e0       	ldi	r23, 0x00	; 0
    2896:	41 e0       	ldi	r20, 0x01	; 1
    2898:	50 e0       	ldi	r21, 0x00	; 0
    289a:	8e ec       	ldi	r24, 0xCE	; 206
    289c:	9a e0       	ldi	r25, 0x0A	; 10
    289e:	0e 94 93 2c 	call	0x5926	; 0x5926 <_ZN7TwoWire11requestFromEii>
	}
	return (buff & (1 << pin)) ? HIGH : LOW;
}

uint8_t PCA9534::Read_IP_REGISTER() {
	uint8_t buff = 0;
    28a2:	c0 e0       	ldi	r28, 0x00	; 0
	// Wire.write(_port);
	Wire.endTransmission();

	// We only need to read 1 byte of data to get the pins
	Wire.requestFrom(_i2caddr, 1);
	while (Wire.available()) {
    28a4:	8e ec       	ldi	r24, 0xCE	; 206
    28a6:	9a e0       	ldi	r25, 0x0A	; 10
    28a8:	0e 94 35 2b 	call	0x566a	; 0x566a <_ZN7TwoWire9availableEv>
    28ac:	89 2b       	or	r24, r25
    28ae:	31 f0       	breq	.+12     	; 0x28bc <_ZN7PCA953416Read_IP_REGISTEREv+0x4c>
		buff = Wire.read();
    28b0:	8e ec       	ldi	r24, 0xCE	; 206
    28b2:	9a e0       	ldi	r25, 0x0A	; 10
    28b4:	0e 94 3d 2b 	call	0x567a	; 0x567a <_ZN7TwoWire4readEv>
    28b8:	c8 2f       	mov	r28, r24
	// Wire.write(_port);
	Wire.endTransmission();

	// We only need to read 1 byte of data to get the pins
	Wire.requestFrom(_i2caddr, 1);
	while (Wire.available()) {
    28ba:	f4 cf       	rjmp	.-24     	; 0x28a4 <_ZN7PCA953416Read_IP_REGISTEREv+0x34>
		buff = Wire.read();
	}
	return buff;
    28bc:	8c 2f       	mov	r24, r28
    28be:	df 91       	pop	r29
    28c0:	cf 91       	pop	r28
    28c2:	08 95       	ret

000028c4 <_ZN9NFC_PN532C1Ehh>:
    #endif
    return false;
  }

  return true;
}
    28c4:	cf 93       	push	r28
    28c6:	df 93       	push	r29
    28c8:	ec 01       	movw	r28, r24
    28ca:	86 2f       	mov	r24, r22
    28cc:	6c 83       	std	Y+4, r22	; 0x04
    28ce:	4d 83       	std	Y+5, r20	; 0x05
    28d0:	1d 8a       	std	Y+21, r1	; 0x15
    28d2:	1e 8a       	std	Y+22, r1	; 0x16
    28d4:	60 e0       	ldi	r22, 0x00	; 0
    28d6:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <pinMode>
    28da:	61 e0       	ldi	r22, 0x01	; 1
    28dc:	8d 81       	ldd	r24, Y+5	; 0x05
    28de:	df 91       	pop	r29
    28e0:	cf 91       	pop	r28
    28e2:	0c 94 ea 30 	jmp	0x61d4	; 0x61d4 <pinMode>

000028e6 <_ZN9NFC_PN5325beginEv>:
    28e6:	cf 93       	push	r28
    28e8:	df 93       	push	r29
    28ea:	ec 01       	movw	r28, r24
    28ec:	8e ec       	ldi	r24, 0xCE	; 206
    28ee:	9a e0       	ldi	r25, 0x0A	; 10
    28f0:	0e 94 01 2c 	call	0x5802	; 0x5802 <_ZN7TwoWire5beginEv>
    28f4:	61 e0       	ldi	r22, 0x01	; 1
    28f6:	8d 81       	ldd	r24, Y+5	; 0x05
    28f8:	0e 94 26 31 	call	0x624c	; 0x624c <digitalWrite>
    28fc:	60 e0       	ldi	r22, 0x00	; 0
    28fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2900:	0e 94 26 31 	call	0x624c	; 0x624c <digitalWrite>
    2904:	2f ef       	ldi	r18, 0xFF	; 255
    2906:	87 e8       	ldi	r24, 0x87	; 135
    2908:	93 e1       	ldi	r25, 0x13	; 19
    290a:	21 50       	subi	r18, 0x01	; 1
    290c:	80 40       	sbci	r24, 0x00	; 0
    290e:	90 40       	sbci	r25, 0x00	; 0
    2910:	e1 f7       	brne	.-8      	; 0x290a <_ZN9NFC_PN5325beginEv+0x24>
    2912:	00 c0       	rjmp	.+0      	; 0x2914 <_ZN9NFC_PN5325beginEv+0x2e>
    2914:	00 00       	nop
    2916:	61 e0       	ldi	r22, 0x01	; 1
    2918:	8d 81       	ldd	r24, Y+5	; 0x05
    291a:	0e 94 26 31 	call	0x624c	; 0x624c <digitalWrite>
    291e:	8f e3       	ldi	r24, 0x3F	; 63
    2920:	9c e9       	ldi	r25, 0x9C	; 156
    2922:	01 97       	sbiw	r24, 0x01	; 1
    2924:	f1 f7       	brne	.-4      	; 0x2922 <_ZN9NFC_PN5325beginEv+0x3c>
    2926:	00 c0       	rjmp	.+0      	; 0x2928 <_ZN9NFC_PN5325beginEv+0x42>
    2928:	00 00       	nop
    292a:	df 91       	pop	r29
    292c:	cf 91       	pop	r28
    292e:	08 95       	ret

00002930 <_ZN9NFC_PN53210GetHexCodeEPKhm>:
    2930:	4f 92       	push	r4
    2932:	5f 92       	push	r5
    2934:	6f 92       	push	r6
    2936:	7f 92       	push	r7
    2938:	8f 92       	push	r8
    293a:	9f 92       	push	r9
    293c:	af 92       	push	r10
    293e:	bf 92       	push	r11
    2940:	ef 92       	push	r14
    2942:	ff 92       	push	r15
    2944:	0f 93       	push	r16
    2946:	1f 93       	push	r17
    2948:	cf 93       	push	r28
    294a:	df 93       	push	r29
    294c:	cd b7       	in	r28, 0x3d	; 61
    294e:	de b7       	in	r29, 0x3e	; 62
    2950:	2c 97       	sbiw	r28, 0x0c	; 12
    2952:	0f b6       	in	r0, 0x3f	; 63
    2954:	f8 94       	cli
    2956:	de bf       	out	0x3e, r29	; 62
    2958:	0f be       	out	0x3f, r0	; 63
    295a:	cd bf       	out	0x3d, r28	; 61
    295c:	7c 01       	movw	r14, r24
    295e:	5a 01       	movw	r10, r20
    2960:	28 01       	movw	r4, r16
    2962:	39 01       	movw	r6, r18
    2964:	64 e8       	ldi	r22, 0x84	; 132
    2966:	71 e0       	ldi	r23, 0x01	; 1
    2968:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <_ZN6StringC1EPKc>
    296c:	85 01       	movw	r16, r10
    296e:	81 2c       	mov	r8, r1
    2970:	91 2c       	mov	r9, r1
    2972:	54 01       	movw	r10, r8
    2974:	84 14       	cp	r8, r4
    2976:	95 04       	cpc	r9, r5
    2978:	a6 04       	cpc	r10, r6
    297a:	b7 04       	cpc	r11, r7
    297c:	09 f4       	brne	.+2      	; 0x2980 <_ZN9NFC_PN53210GetHexCodeEPKhm+0x50>
    297e:	46 c0       	rjmp	.+140    	; 0x2a0c <_ZN9NFC_PN53210GetHexCodeEPKhm+0xdc>
    2980:	f8 01       	movw	r30, r16
    2982:	61 91       	ld	r22, Z+
    2984:	8f 01       	movw	r16, r30
    2986:	40 e1       	ldi	r20, 0x10	; 16
    2988:	ce 01       	movw	r24, r28
    298a:	60 31       	cpi	r22, 0x10	; 16
    298c:	f0 f4       	brcc	.+60     	; 0x29ca <_ZN9NFC_PN53210GetHexCodeEPKhm+0x9a>
    298e:	01 96       	adiw	r24, 0x01	; 1
    2990:	0e 94 8f 32 	call	0x651e	; 0x651e <_ZN6StringC1Ehh>
    2994:	b7 01       	movw	r22, r14
    2996:	ce 01       	movw	r24, r28
    2998:	07 96       	adiw	r24, 0x07	; 7
    299a:	0e 94 50 32 	call	0x64a0	; 0x64a0 <_ZN6StringC1ERKS_>
    299e:	63 e3       	ldi	r22, 0x33	; 51
    29a0:	75 e0       	ldi	r23, 0x05	; 5
    29a2:	ce 01       	movw	r24, r28
    29a4:	07 96       	adiw	r24, 0x07	; 7
    29a6:	0e 94 a0 33 	call	0x6740	; 0x6740 <_ZplRK15StringSumHelperPKc>
    29aa:	be 01       	movw	r22, r28
    29ac:	6f 5f       	subi	r22, 0xFF	; 255
    29ae:	7f 4f       	sbci	r23, 0xFF	; 255
    29b0:	0e 94 8f 33 	call	0x671e	; 0x671e <_ZplRK15StringSumHelperRK6String>
    29b4:	bc 01       	movw	r22, r24
    29b6:	c7 01       	movw	r24, r14
    29b8:	0e 94 3b 32 	call	0x6476	; 0x6476 <_ZN6StringaSERKS_>
    29bc:	ce 01       	movw	r24, r28
    29be:	07 96       	adiw	r24, 0x07	; 7
    29c0:	0e 94 7d 31 	call	0x62fa	; 0x62fa <_ZN6StringD1Ev>
    29c4:	ce 01       	movw	r24, r28
    29c6:	01 96       	adiw	r24, 0x01	; 1
    29c8:	19 c0       	rjmp	.+50     	; 0x29fc <_ZN9NFC_PN53210GetHexCodeEPKhm+0xcc>
    29ca:	07 96       	adiw	r24, 0x07	; 7
    29cc:	0e 94 8f 32 	call	0x651e	; 0x651e <_ZN6StringC1Ehh>
    29d0:	b7 01       	movw	r22, r14
    29d2:	ce 01       	movw	r24, r28
    29d4:	01 96       	adiw	r24, 0x01	; 1
    29d6:	0e 94 50 32 	call	0x64a0	; 0x64a0 <_ZN6StringC1ERKS_>
    29da:	be 01       	movw	r22, r28
    29dc:	69 5f       	subi	r22, 0xF9	; 249
    29de:	7f 4f       	sbci	r23, 0xFF	; 255
    29e0:	ce 01       	movw	r24, r28
    29e2:	01 96       	adiw	r24, 0x01	; 1
    29e4:	0e 94 8f 33 	call	0x671e	; 0x671e <_ZplRK15StringSumHelperRK6String>
    29e8:	bc 01       	movw	r22, r24
    29ea:	c7 01       	movw	r24, r14
    29ec:	0e 94 3b 32 	call	0x6476	; 0x6476 <_ZN6StringaSERKS_>
    29f0:	ce 01       	movw	r24, r28
    29f2:	01 96       	adiw	r24, 0x01	; 1
    29f4:	0e 94 7d 31 	call	0x62fa	; 0x62fa <_ZN6StringD1Ev>
    29f8:	ce 01       	movw	r24, r28
    29fa:	07 96       	adiw	r24, 0x07	; 7
    29fc:	0e 94 7d 31 	call	0x62fa	; 0x62fa <_ZN6StringD1Ev>
    2a00:	ff ef       	ldi	r31, 0xFF	; 255
    2a02:	8f 1a       	sub	r8, r31
    2a04:	9f 0a       	sbc	r9, r31
    2a06:	af 0a       	sbc	r10, r31
    2a08:	bf 0a       	sbc	r11, r31
    2a0a:	b4 cf       	rjmp	.-152    	; 0x2974 <_ZN9NFC_PN53210GetHexCodeEPKhm+0x44>
    2a0c:	84 e2       	ldi	r24, 0x24	; 36
    2a0e:	9b e0       	ldi	r25, 0x0B	; 11
    2a10:	0e 94 2b 2f 	call	0x5e56	; 0x5e56 <_ZN5Print7printlnEv>
    2a14:	c7 01       	movw	r24, r14
    2a16:	2c 96       	adiw	r28, 0x0c	; 12
    2a18:	0f b6       	in	r0, 0x3f	; 63
    2a1a:	f8 94       	cli
    2a1c:	de bf       	out	0x3e, r29	; 62
    2a1e:	0f be       	out	0x3f, r0	; 63
    2a20:	cd bf       	out	0x3d, r28	; 61
    2a22:	df 91       	pop	r29
    2a24:	cf 91       	pop	r28
    2a26:	1f 91       	pop	r17
    2a28:	0f 91       	pop	r16
    2a2a:	ff 90       	pop	r15
    2a2c:	ef 90       	pop	r14
    2a2e:	bf 90       	pop	r11
    2a30:	af 90       	pop	r10
    2a32:	9f 90       	pop	r9
    2a34:	8f 90       	pop	r8
    2a36:	7f 90       	pop	r7
    2a38:	6f 90       	pop	r6
    2a3a:	5f 90       	pop	r5
    2a3c:	4f 90       	pop	r4
    2a3e:	08 95       	ret

00002a40 <_ZN9NFC_PN5327isreadyEv>:
    2a40:	fc 01       	movw	r30, r24
    2a42:	84 81       	ldd	r24, Z+4	; 0x04
    2a44:	0e 94 54 31 	call	0x62a8	; 0x62a8 <digitalRead>
    2a48:	91 e0       	ldi	r25, 0x01	; 1
    2a4a:	81 11       	cpse	r24, r1
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	89 2f       	mov	r24, r25
    2a50:	08 95       	ret

00002a52 <_ZN9NFC_PN5329waitreadyEj>:
    2a52:	cf 92       	push	r12
    2a54:	df 92       	push	r13
    2a56:	ef 92       	push	r14
    2a58:	ff 92       	push	r15
    2a5a:	1f 93       	push	r17
    2a5c:	cf 93       	push	r28
    2a5e:	df 93       	push	r29
    2a60:	6c 01       	movw	r12, r24
    2a62:	7b 01       	movw	r14, r22
    2a64:	c0 e0       	ldi	r28, 0x00	; 0
    2a66:	d0 e0       	ldi	r29, 0x00	; 0
    2a68:	c6 01       	movw	r24, r12
    2a6a:	ea df       	rcall	.-44     	; 0x2a40 <_ZN9NFC_PN5327isreadyEv>
    2a6c:	18 2f       	mov	r17, r24
    2a6e:	81 11       	cpse	r24, r1
    2a70:	15 c0       	rjmp	.+42     	; 0x2a9c <_ZN9NFC_PN5329waitreadyEj+0x4a>
    2a72:	e1 14       	cp	r14, r1
    2a74:	f1 04       	cpc	r15, r1
    2a76:	59 f0       	breq	.+22     	; 0x2a8e <_ZN9NFC_PN5329waitreadyEj+0x3c>
    2a78:	2a 96       	adiw	r28, 0x0a	; 10
    2a7a:	ec 16       	cp	r14, r28
    2a7c:	fd 06       	cpc	r15, r29
    2a7e:	38 f4       	brcc	.+14     	; 0x2a8e <_ZN9NFC_PN5329waitreadyEj+0x3c>
    2a80:	64 e1       	ldi	r22, 0x14	; 20
    2a82:	78 e0       	ldi	r23, 0x08	; 8
    2a84:	84 e2       	ldi	r24, 0x24	; 36
    2a86:	9b e0       	ldi	r25, 0x0B	; 11
    2a88:	0e 94 4e 2f 	call	0x5e9c	; 0x5e9c <_ZN5Print7printlnEPKc>
    2a8c:	07 c0       	rjmp	.+14     	; 0x2a9c <_ZN9NFC_PN5329waitreadyEj+0x4a>
    2a8e:	8f e3       	ldi	r24, 0x3F	; 63
    2a90:	9c e9       	ldi	r25, 0x9C	; 156
    2a92:	01 97       	sbiw	r24, 0x01	; 1
    2a94:	f1 f7       	brne	.-4      	; 0x2a92 <_ZN9NFC_PN5329waitreadyEj+0x40>
    2a96:	00 c0       	rjmp	.+0      	; 0x2a98 <_ZN9NFC_PN5329waitreadyEj+0x46>
    2a98:	00 00       	nop
    2a9a:	e6 cf       	rjmp	.-52     	; 0x2a68 <_ZN9NFC_PN5329waitreadyEj+0x16>
    2a9c:	81 2f       	mov	r24, r17
    2a9e:	df 91       	pop	r29
    2aa0:	cf 91       	pop	r28
    2aa2:	1f 91       	pop	r17
    2aa4:	ff 90       	pop	r15
    2aa6:	ef 90       	pop	r14
    2aa8:	df 90       	pop	r13
    2aaa:	cf 90       	pop	r12
    2aac:	08 95       	ret

00002aae <_ZN9NFC_PN5328readdataEPhh>:
    2aae:	ff 92       	push	r15
    2ab0:	0f 93       	push	r16
    2ab2:	1f 93       	push	r17
    2ab4:	cf 93       	push	r28
    2ab6:	df 93       	push	r29
    2ab8:	f6 2e       	mov	r15, r22
    2aba:	07 2f       	mov	r16, r23
    2abc:	14 2f       	mov	r17, r20
    2abe:	8f e3       	ldi	r24, 0x3F	; 63
    2ac0:	9f e1       	ldi	r25, 0x1F	; 31
    2ac2:	01 97       	sbiw	r24, 0x01	; 1
    2ac4:	f1 f7       	brne	.-4      	; 0x2ac2 <_ZN9NFC_PN5328readdataEPhh+0x14>
    2ac6:	00 c0       	rjmp	.+0      	; 0x2ac8 <_ZN9NFC_PN5328readdataEPhh+0x1a>
    2ac8:	00 00       	nop
    2aca:	42 e0       	ldi	r20, 0x02	; 2
    2acc:	41 0f       	add	r20, r17
    2ace:	64 e2       	ldi	r22, 0x24	; 36
    2ad0:	8e ec       	ldi	r24, 0xCE	; 206
    2ad2:	9a e0       	ldi	r25, 0x0A	; 10
    2ad4:	0e 94 91 2c 	call	0x5922	; 0x5922 <_ZN7TwoWire11requestFromEhh>
    2ad8:	8e ec       	ldi	r24, 0xCE	; 206
    2ada:	9a e0       	ldi	r25, 0x0A	; 10
    2adc:	0e 94 3d 2b 	call	0x567a	; 0x567a <_ZN7TwoWire4readEv>
    2ae0:	cf 2d       	mov	r28, r15
    2ae2:	d0 2f       	mov	r29, r16
    2ae4:	ce 01       	movw	r24, r28
    2ae6:	81 0f       	add	r24, r17
    2ae8:	91 1d       	adc	r25, r1
    2aea:	8c 01       	movw	r16, r24
    2aec:	c0 17       	cp	r28, r16
    2aee:	d1 07       	cpc	r29, r17
    2af0:	61 f0       	breq	.+24     	; 0x2b0a <_ZN9NFC_PN5328readdataEPhh+0x5c>
    2af2:	8f e9       	ldi	r24, 0x9F	; 159
    2af4:	9f e0       	ldi	r25, 0x0F	; 15
    2af6:	01 97       	sbiw	r24, 0x01	; 1
    2af8:	f1 f7       	brne	.-4      	; 0x2af6 <_ZN9NFC_PN5328readdataEPhh+0x48>
    2afa:	00 c0       	rjmp	.+0      	; 0x2afc <_ZN9NFC_PN5328readdataEPhh+0x4e>
    2afc:	00 00       	nop
    2afe:	8e ec       	ldi	r24, 0xCE	; 206
    2b00:	9a e0       	ldi	r25, 0x0A	; 10
    2b02:	0e 94 3d 2b 	call	0x567a	; 0x567a <_ZN7TwoWire4readEv>
    2b06:	89 93       	st	Y+, r24
    2b08:	f1 cf       	rjmp	.-30     	; 0x2aec <_ZN9NFC_PN5328readdataEPhh+0x3e>
    2b0a:	df 91       	pop	r29
    2b0c:	cf 91       	pop	r28
    2b0e:	1f 91       	pop	r17
    2b10:	0f 91       	pop	r16
    2b12:	ff 90       	pop	r15
    2b14:	08 95       	ret

00002b16 <_ZN9NFC_PN5327readackEv>:
    2b16:	cf 93       	push	r28
    2b18:	df 93       	push	r29
    2b1a:	00 d0       	rcall	.+0      	; 0x2b1c <_ZN9NFC_PN5327readackEv+0x6>
    2b1c:	00 d0       	rcall	.+0      	; 0x2b1e <_ZN9NFC_PN5327readackEv+0x8>
    2b1e:	00 d0       	rcall	.+0      	; 0x2b20 <_ZN9NFC_PN5327readackEv+0xa>
    2b20:	cd b7       	in	r28, 0x3d	; 61
    2b22:	de b7       	in	r29, 0x3e	; 62
    2b24:	46 e0       	ldi	r20, 0x06	; 6
    2b26:	be 01       	movw	r22, r28
    2b28:	6f 5f       	subi	r22, 0xFF	; 255
    2b2a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b2c:	c0 df       	rcall	.-128    	; 0x2aae <_ZN9NFC_PN5328readdataEPhh>
    2b2e:	46 e0       	ldi	r20, 0x06	; 6
    2b30:	50 e0       	ldi	r21, 0x00	; 0
    2b32:	6b e6       	ldi	r22, 0x6B	; 107
    2b34:	71 e0       	ldi	r23, 0x01	; 1
    2b36:	ce 01       	movw	r24, r28
    2b38:	01 96       	adiw	r24, 0x01	; 1
    2b3a:	0e 94 09 38 	call	0x7012	; 0x7012 <strncmp>
    2b3e:	21 e0       	ldi	r18, 0x01	; 1
    2b40:	89 2b       	or	r24, r25
    2b42:	09 f0       	breq	.+2      	; 0x2b46 <_ZN9NFC_PN5327readackEv+0x30>
    2b44:	20 e0       	ldi	r18, 0x00	; 0
    2b46:	82 2f       	mov	r24, r18
    2b48:	26 96       	adiw	r28, 0x06	; 6
    2b4a:	0f b6       	in	r0, 0x3f	; 63
    2b4c:	f8 94       	cli
    2b4e:	de bf       	out	0x3e, r29	; 62
    2b50:	0f be       	out	0x3f, r0	; 63
    2b52:	cd bf       	out	0x3d, r28	; 61
    2b54:	df 91       	pop	r29
    2b56:	cf 91       	pop	r28
    2b58:	08 95       	ret

00002b5a <_ZL8i2c_sendh>:
    2b5a:	68 2f       	mov	r22, r24
    2b5c:	8e ec       	ldi	r24, 0xCE	; 206
    2b5e:	9a e0       	ldi	r25, 0x0A	; 10
    2b60:	0c 94 c3 2b 	jmp	0x5786	; 0x5786 <_ZN7TwoWire5writeEh>

00002b64 <_ZN9NFC_PN53212writecommandEPhh>:
    2b64:	cf 92       	push	r12
    2b66:	df 92       	push	r13
    2b68:	ef 92       	push	r14
    2b6a:	ff 92       	push	r15
    2b6c:	0f 93       	push	r16
    2b6e:	1f 93       	push	r17
    2b70:	cf 93       	push	r28
    2b72:	df 93       	push	r29
    2b74:	7b 01       	movw	r14, r22
    2b76:	c1 e0       	ldi	r28, 0x01	; 1
    2b78:	c4 0f       	add	r28, r20
    2b7a:	8f e3       	ldi	r24, 0x3F	; 63
    2b7c:	9f e1       	ldi	r25, 0x1F	; 31
    2b7e:	01 97       	sbiw	r24, 0x01	; 1
    2b80:	f1 f7       	brne	.-4      	; 0x2b7e <_ZN9NFC_PN53212writecommandEPhh+0x1a>
    2b82:	00 c0       	rjmp	.+0      	; 0x2b84 <_ZN9NFC_PN53212writecommandEPhh+0x20>
    2b84:	00 00       	nop
    2b86:	64 e2       	ldi	r22, 0x24	; 36
    2b88:	70 e0       	ldi	r23, 0x00	; 0
    2b8a:	8e ec       	ldi	r24, 0xCE	; 206
    2b8c:	9a e0       	ldi	r25, 0x0A	; 10
    2b8e:	0e 94 1e 2c 	call	0x583c	; 0x583c <_ZN7TwoWire17beginTransmissionEi>
    2b92:	80 e0       	ldi	r24, 0x00	; 0
    2b94:	e2 df       	rcall	.-60     	; 0x2b5a <_ZL8i2c_sendh>
    2b96:	80 e0       	ldi	r24, 0x00	; 0
    2b98:	e0 df       	rcall	.-64     	; 0x2b5a <_ZL8i2c_sendh>
    2b9a:	8f ef       	ldi	r24, 0xFF	; 255
    2b9c:	de df       	rcall	.-68     	; 0x2b5a <_ZL8i2c_sendh>
    2b9e:	8c 2f       	mov	r24, r28
    2ba0:	dc df       	rcall	.-72     	; 0x2b5a <_ZL8i2c_sendh>
    2ba2:	8c 2f       	mov	r24, r28
    2ba4:	81 95       	neg	r24
    2ba6:	d9 df       	rcall	.-78     	; 0x2b5a <_ZL8i2c_sendh>
    2ba8:	84 ed       	ldi	r24, 0xD4	; 212
    2baa:	d7 df       	rcall	.-82     	; 0x2b5a <_ZL8i2c_sendh>
    2bac:	c1 2c       	mov	r12, r1
    2bae:	83 ed       	ldi	r24, 0xD3	; 211
    2bb0:	d8 2e       	mov	r13, r24
    2bb2:	d0 e0       	ldi	r29, 0x00	; 0
    2bb4:	21 97       	sbiw	r28, 0x01	; 1
    2bb6:	0c 2d       	mov	r16, r12
    2bb8:	10 e0       	ldi	r17, 0x00	; 0
    2bba:	0c 17       	cp	r16, r28
    2bbc:	1d 07       	cpc	r17, r29
    2bbe:	54 f4       	brge	.+20     	; 0x2bd4 <_ZN9NFC_PN53212writecommandEPhh+0x70>
    2bc0:	0e 0d       	add	r16, r14
    2bc2:	1f 1d       	adc	r17, r15
    2bc4:	f8 01       	movw	r30, r16
    2bc6:	80 81       	ld	r24, Z
    2bc8:	c8 df       	rcall	.-112    	; 0x2b5a <_ZL8i2c_sendh>
    2bca:	f8 01       	movw	r30, r16
    2bcc:	80 81       	ld	r24, Z
    2bce:	d8 0e       	add	r13, r24
    2bd0:	c3 94       	inc	r12
    2bd2:	f1 cf       	rjmp	.-30     	; 0x2bb6 <_ZN9NFC_PN53212writecommandEPhh+0x52>
    2bd4:	8d 2d       	mov	r24, r13
    2bd6:	80 95       	com	r24
    2bd8:	c0 df       	rcall	.-128    	; 0x2b5a <_ZL8i2c_sendh>
    2bda:	80 e0       	ldi	r24, 0x00	; 0
    2bdc:	be df       	rcall	.-132    	; 0x2b5a <_ZL8i2c_sendh>
    2bde:	8e ec       	ldi	r24, 0xCE	; 206
    2be0:	9a e0       	ldi	r25, 0x0A	; 10
    2be2:	df 91       	pop	r29
    2be4:	cf 91       	pop	r28
    2be6:	1f 91       	pop	r17
    2be8:	0f 91       	pop	r16
    2bea:	ff 90       	pop	r15
    2bec:	ef 90       	pop	r14
    2bee:	df 90       	pop	r13
    2bf0:	cf 90       	pop	r12
    2bf2:	0c 94 95 2c 	jmp	0x592a	; 0x592a <_ZN7TwoWire15endTransmissionEv>

00002bf6 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>:
    2bf6:	0f 93       	push	r16
    2bf8:	1f 93       	push	r17
    2bfa:	cf 93       	push	r28
    2bfc:	df 93       	push	r29
    2bfe:	ec 01       	movw	r28, r24
    2c00:	89 01       	movw	r16, r18
    2c02:	b0 df       	rcall	.-160    	; 0x2b64 <_ZN9NFC_PN53212writecommandEPhh>
    2c04:	b8 01       	movw	r22, r16
    2c06:	ce 01       	movw	r24, r28
    2c08:	24 df       	rcall	.-440    	; 0x2a52 <_ZN9NFC_PN5329waitreadyEj>
    2c0a:	88 23       	and	r24, r24
    2c0c:	31 f0       	breq	.+12     	; 0x2c1a <_ZN9NFC_PN53219sendCommandCheckAckEPhhj+0x24>
    2c0e:	ce 01       	movw	r24, r28
    2c10:	df 91       	pop	r29
    2c12:	cf 91       	pop	r28
    2c14:	1f 91       	pop	r17
    2c16:	0f 91       	pop	r16
    2c18:	7e cf       	rjmp	.-260    	; 0x2b16 <_ZN9NFC_PN5327readackEv>
    2c1a:	80 e0       	ldi	r24, 0x00	; 0
    2c1c:	df 91       	pop	r29
    2c1e:	cf 91       	pop	r28
    2c20:	1f 91       	pop	r17
    2c22:	0f 91       	pop	r16
    2c24:	08 95       	ret

00002c26 <_ZN9NFC_PN53218getFirmwareVersionEv>:
    2c26:	cf 93       	push	r28
    2c28:	df 93       	push	r29
    2c2a:	ec 01       	movw	r28, r24
    2c2c:	82 e0       	ldi	r24, 0x02	; 2
    2c2e:	80 93 d5 09 	sts	0x09D5, r24	; 0x8009d5 <pn532_packetbuffer>
    2c32:	28 ee       	ldi	r18, 0xE8	; 232
    2c34:	33 e0       	ldi	r19, 0x03	; 3
    2c36:	41 e0       	ldi	r20, 0x01	; 1
    2c38:	65 ed       	ldi	r22, 0xD5	; 213
    2c3a:	79 e0       	ldi	r23, 0x09	; 9
    2c3c:	ce 01       	movw	r24, r28
    2c3e:	db df       	rcall	.-74     	; 0x2bf6 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    2c40:	81 11       	cpse	r24, r1
    2c42:	04 c0       	rjmp	.+8      	; 0x2c4c <_ZN9NFC_PN53218getFirmwareVersionEv+0x26>
    2c44:	60 e0       	ldi	r22, 0x00	; 0
    2c46:	70 e0       	ldi	r23, 0x00	; 0
    2c48:	cb 01       	movw	r24, r22
    2c4a:	32 c0       	rjmp	.+100    	; 0x2cb0 <_ZN9NFC_PN53218getFirmwareVersionEv+0x8a>
    2c4c:	4c e0       	ldi	r20, 0x0C	; 12
    2c4e:	65 ed       	ldi	r22, 0xD5	; 213
    2c50:	79 e0       	ldi	r23, 0x09	; 9
    2c52:	ce 01       	movw	r24, r28
    2c54:	2c df       	rcall	.-424    	; 0x2aae <_ZN9NFC_PN5328readdataEPhh>
    2c56:	46 e0       	ldi	r20, 0x06	; 6
    2c58:	50 e0       	ldi	r21, 0x00	; 0
    2c5a:	65 e6       	ldi	r22, 0x65	; 101
    2c5c:	71 e0       	ldi	r23, 0x01	; 1
    2c5e:	85 ed       	ldi	r24, 0xD5	; 213
    2c60:	99 e0       	ldi	r25, 0x09	; 9
    2c62:	0e 94 09 38 	call	0x7012	; 0x7012 <strncmp>
    2c66:	89 2b       	or	r24, r25
    2c68:	69 f7       	brne	.-38     	; 0x2c44 <_ZN9NFC_PN53218getFirmwareVersionEv+0x1e>
    2c6a:	8d 89       	ldd	r24, Y+21	; 0x15
    2c6c:	81 11       	cpse	r24, r1
    2c6e:	03 c0       	rjmp	.+6      	; 0x2c76 <_ZN9NFC_PN53218getFirmwareVersionEv+0x50>
    2c70:	e7 e0       	ldi	r30, 0x07	; 7
    2c72:	f0 e0       	ldi	r31, 0x00	; 0
    2c74:	02 c0       	rjmp	.+4      	; 0x2c7a <_ZN9NFC_PN53218getFirmwareVersionEv+0x54>
    2c76:	e6 e0       	ldi	r30, 0x06	; 6
    2c78:	f0 e0       	ldi	r31, 0x00	; 0
    2c7a:	eb 52       	subi	r30, 0x2B	; 43
    2c7c:	f6 4f       	sbci	r31, 0xF6	; 246
    2c7e:	60 81       	ld	r22, Z
    2c80:	86 2f       	mov	r24, r22
    2c82:	90 e0       	ldi	r25, 0x00	; 0
    2c84:	a0 e0       	ldi	r26, 0x00	; 0
    2c86:	b0 e0       	ldi	r27, 0x00	; 0
    2c88:	ba 2f       	mov	r27, r26
    2c8a:	a9 2f       	mov	r26, r25
    2c8c:	98 2f       	mov	r25, r24
    2c8e:	88 27       	eor	r24, r24
    2c90:	21 81       	ldd	r18, Z+1	; 0x01
    2c92:	82 2b       	or	r24, r18
    2c94:	ba 2f       	mov	r27, r26
    2c96:	a9 2f       	mov	r26, r25
    2c98:	98 2f       	mov	r25, r24
    2c9a:	88 27       	eor	r24, r24
    2c9c:	22 81       	ldd	r18, Z+2	; 0x02
    2c9e:	82 2b       	or	r24, r18
    2ca0:	ba 2f       	mov	r27, r26
    2ca2:	a9 2f       	mov	r26, r25
    2ca4:	98 2f       	mov	r25, r24
    2ca6:	88 27       	eor	r24, r24
    2ca8:	23 81       	ldd	r18, Z+3	; 0x03
    2caa:	bc 01       	movw	r22, r24
    2cac:	cd 01       	movw	r24, r26
    2cae:	62 2b       	or	r22, r18
    2cb0:	df 91       	pop	r29
    2cb2:	cf 91       	pop	r28
    2cb4:	08 95       	ret

00002cb6 <_ZN9NFC_PN5329SAMConfigEv>:
    2cb6:	cf 93       	push	r28
    2cb8:	df 93       	push	r29
    2cba:	ec 01       	movw	r28, r24
    2cbc:	94 e1       	ldi	r25, 0x14	; 20
    2cbe:	90 93 d5 09 	sts	0x09D5, r25	; 0x8009d5 <pn532_packetbuffer>
    2cc2:	81 e0       	ldi	r24, 0x01	; 1
    2cc4:	80 93 d6 09 	sts	0x09D6, r24	; 0x8009d6 <pn532_packetbuffer+0x1>
    2cc8:	90 93 d7 09 	sts	0x09D7, r25	; 0x8009d7 <pn532_packetbuffer+0x2>
    2ccc:	80 93 d8 09 	sts	0x09D8, r24	; 0x8009d8 <pn532_packetbuffer+0x3>
    2cd0:	28 ee       	ldi	r18, 0xE8	; 232
    2cd2:	33 e0       	ldi	r19, 0x03	; 3
    2cd4:	44 e0       	ldi	r20, 0x04	; 4
    2cd6:	65 ed       	ldi	r22, 0xD5	; 213
    2cd8:	79 e0       	ldi	r23, 0x09	; 9
    2cda:	ce 01       	movw	r24, r28
    2cdc:	8c df       	rcall	.-232    	; 0x2bf6 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    2cde:	88 23       	and	r24, r24
    2ce0:	a9 f0       	breq	.+42     	; 0x2d0c <_ZN9NFC_PN5329SAMConfigEv+0x56>
    2ce2:	48 e0       	ldi	r20, 0x08	; 8
    2ce4:	65 ed       	ldi	r22, 0xD5	; 213
    2ce6:	79 e0       	ldi	r23, 0x09	; 9
    2ce8:	ce 01       	movw	r24, r28
    2cea:	e1 de       	rcall	.-574    	; 0x2aae <_ZN9NFC_PN5328readdataEPhh>
    2cec:	8d 89       	ldd	r24, Y+21	; 0x15
    2cee:	81 11       	cpse	r24, r1
    2cf0:	03 c0       	rjmp	.+6      	; 0x2cf8 <_ZN9NFC_PN5329SAMConfigEv+0x42>
    2cf2:	86 e0       	ldi	r24, 0x06	; 6
    2cf4:	90 e0       	ldi	r25, 0x00	; 0
    2cf6:	02 c0       	rjmp	.+4      	; 0x2cfc <_ZN9NFC_PN5329SAMConfigEv+0x46>
    2cf8:	85 e0       	ldi	r24, 0x05	; 5
    2cfa:	90 e0       	ldi	r25, 0x00	; 0
    2cfc:	fc 01       	movw	r30, r24
    2cfe:	eb 52       	subi	r30, 0x2B	; 43
    2d00:	f6 4f       	sbci	r31, 0xF6	; 246
    2d02:	81 e0       	ldi	r24, 0x01	; 1
    2d04:	90 81       	ld	r25, Z
    2d06:	95 31       	cpi	r25, 0x15	; 21
    2d08:	09 f0       	breq	.+2      	; 0x2d0c <_ZN9NFC_PN5329SAMConfigEv+0x56>
    2d0a:	80 e0       	ldi	r24, 0x00	; 0
    2d0c:	df 91       	pop	r29
    2d0e:	cf 91       	pop	r28
    2d10:	08 95       	ret

00002d12 <_ZN9NFC_PN53227setPassiveActivationRetriesEh>:
    2d12:	e5 ed       	ldi	r30, 0xD5	; 213
    2d14:	f9 e0       	ldi	r31, 0x09	; 9
    2d16:	22 e3       	ldi	r18, 0x32	; 50
    2d18:	20 83       	st	Z, r18
    2d1a:	25 e0       	ldi	r18, 0x05	; 5
    2d1c:	21 83       	std	Z+1, r18	; 0x01
    2d1e:	2f ef       	ldi	r18, 0xFF	; 255
    2d20:	22 83       	std	Z+2, r18	; 0x02
    2d22:	21 e0       	ldi	r18, 0x01	; 1
    2d24:	23 83       	std	Z+3, r18	; 0x03
    2d26:	64 83       	std	Z+4, r22	; 0x04
    2d28:	28 ee       	ldi	r18, 0xE8	; 232
    2d2a:	33 e0       	ldi	r19, 0x03	; 3
    2d2c:	45 e0       	ldi	r20, 0x05	; 5
    2d2e:	bf 01       	movw	r22, r30
    2d30:	62 cf       	rjmp	.-316    	; 0x2bf6 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>

00002d32 <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j>:
    2d32:	af 92       	push	r10
    2d34:	bf 92       	push	r11
    2d36:	cf 92       	push	r12
    2d38:	df 92       	push	r13
    2d3a:	ef 92       	push	r14
    2d3c:	ff 92       	push	r15
    2d3e:	0f 93       	push	r16
    2d40:	1f 93       	push	r17
    2d42:	cf 93       	push	r28
    2d44:	df 93       	push	r29
    2d46:	ec 01       	movw	r28, r24
    2d48:	7a 01       	movw	r14, r20
    2d4a:	59 01       	movw	r10, r18
    2d4c:	68 01       	movw	r12, r16
    2d4e:	8a e4       	ldi	r24, 0x4A	; 74
    2d50:	80 93 d5 09 	sts	0x09D5, r24	; 0x8009d5 <pn532_packetbuffer>
    2d54:	81 e0       	ldi	r24, 0x01	; 1
    2d56:	80 93 d6 09 	sts	0x09D6, r24	; 0x8009d6 <pn532_packetbuffer+0x1>
    2d5a:	60 93 d7 09 	sts	0x09D7, r22	; 0x8009d7 <pn532_packetbuffer+0x2>
    2d5e:	98 01       	movw	r18, r16
    2d60:	43 e0       	ldi	r20, 0x03	; 3
    2d62:	65 ed       	ldi	r22, 0xD5	; 213
    2d64:	79 e0       	ldi	r23, 0x09	; 9
    2d66:	ce 01       	movw	r24, r28
    2d68:	46 df       	rcall	.-372    	; 0x2bf6 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    2d6a:	18 2f       	mov	r17, r24
    2d6c:	88 23       	and	r24, r24
    2d6e:	41 f1       	breq	.+80     	; 0x2dc0 <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x8e>
    2d70:	8d 89       	ldd	r24, Y+21	; 0x15
    2d72:	88 23       	and	r24, r24
    2d74:	79 f0       	breq	.+30     	; 0x2d94 <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x62>
    2d76:	44 e1       	ldi	r20, 0x14	; 20
    2d78:	65 ed       	ldi	r22, 0xD5	; 213
    2d7a:	79 e0       	ldi	r23, 0x09	; 9
    2d7c:	ce 01       	movw	r24, r28
    2d7e:	97 de       	rcall	.-722    	; 0x2aae <_ZN9NFC_PN5328readdataEPhh>
    2d80:	80 91 dc 09 	lds	r24, 0x09DC	; 0x8009dc <pn532_packetbuffer+0x7>
    2d84:	81 30       	cpi	r24, 0x01	; 1
    2d86:	e1 f4       	brne	.+56     	; 0x2dc0 <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x8e>
    2d88:	80 91 e1 09 	lds	r24, 0x09E1	; 0x8009e1 <pn532_packetbuffer+0xc>
    2d8c:	f5 01       	movw	r30, r10
    2d8e:	80 83       	st	Z, r24
    2d90:	80 e0       	ldi	r24, 0x00	; 0
    2d92:	06 c0       	rjmp	.+12     	; 0x2da0 <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x6e>
    2d94:	b6 01       	movw	r22, r12
    2d96:	ce 01       	movw	r24, r28
    2d98:	5c de       	rcall	.-840    	; 0x2a52 <_ZN9NFC_PN5329waitreadyEj>
    2d9a:	81 11       	cpse	r24, r1
    2d9c:	ec cf       	rjmp	.-40     	; 0x2d76 <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x44>
    2d9e:	10 c0       	rjmp	.+32     	; 0x2dc0 <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x8e>
    2da0:	90 91 e1 09 	lds	r25, 0x09E1	; 0x8009e1 <pn532_packetbuffer+0xc>
    2da4:	89 17       	cp	r24, r25
    2da6:	68 f4       	brcc	.+26     	; 0x2dc2 <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x90>
    2da8:	28 2f       	mov	r18, r24
    2daa:	30 e0       	ldi	r19, 0x00	; 0
    2dac:	f9 01       	movw	r30, r18
    2dae:	eb 52       	subi	r30, 0x2B	; 43
    2db0:	f6 4f       	sbci	r31, 0xF6	; 246
    2db2:	95 85       	ldd	r25, Z+13	; 0x0d
    2db4:	f7 01       	movw	r30, r14
    2db6:	e2 0f       	add	r30, r18
    2db8:	f3 1f       	adc	r31, r19
    2dba:	90 83       	st	Z, r25
    2dbc:	8f 5f       	subi	r24, 0xFF	; 255
    2dbe:	f0 cf       	rjmp	.-32     	; 0x2da0 <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x6e>
    2dc0:	10 e0       	ldi	r17, 0x00	; 0
    2dc2:	81 2f       	mov	r24, r17
    2dc4:	df 91       	pop	r29
    2dc6:	cf 91       	pop	r28
    2dc8:	1f 91       	pop	r17
    2dca:	0f 91       	pop	r16
    2dcc:	ff 90       	pop	r15
    2dce:	ef 90       	pop	r14
    2dd0:	df 90       	pop	r13
    2dd2:	cf 90       	pop	r12
    2dd4:	bf 90       	pop	r11
    2dd6:	af 90       	pop	r10
    2dd8:	08 95       	ret

00002dda <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_>:

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
uint8_t NFC_PN532::mifareclassic_AuthenticateBlock (uint8_t * uid, uint8_t uidLen, uint32_t blockNumber, uint8_t keyNumber, uint8_t * keyData)
{
    2dda:	af 92       	push	r10
    2ddc:	bf 92       	push	r11
    2dde:	cf 92       	push	r12
    2de0:	df 92       	push	r13
    2de2:	ef 92       	push	r14
    2de4:	0f 93       	push	r16
    2de6:	1f 93       	push	r17
    2de8:	cf 93       	push	r28
    2dea:	df 93       	push	r29
    2dec:	ec 01       	movw	r28, r24
    2dee:	14 2f       	mov	r17, r20
  uint8_t len;
  uint8_t i;

  // Hang on to the key and uid data
  memcpy (_key, keyData, 6);
    2df0:	5c 01       	movw	r10, r24
    2df2:	8e e0       	ldi	r24, 0x0E	; 14
    2df4:	a8 0e       	add	r10, r24
    2df6:	b1 1c       	adc	r11, r1
    2df8:	86 e0       	ldi	r24, 0x06	; 6
    2dfa:	f6 01       	movw	r30, r12
    2dfc:	d5 01       	movw	r26, r10
    2dfe:	01 90       	ld	r0, Z+
    2e00:	0d 92       	st	X+, r0
    2e02:	8a 95       	dec	r24
    2e04:	e1 f7       	brne	.-8      	; 0x2dfe <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x24>
  memcpy (_uid, uid, uidLen);
    2e06:	50 e0       	ldi	r21, 0x00	; 0
    2e08:	ce 01       	movw	r24, r28
    2e0a:	06 96       	adiw	r24, 0x06	; 6
    2e0c:	0e 94 f0 37 	call	0x6fe0	; 0x6fe0 <memcpy>
  _uidLen = uidLen;
    2e10:	1d 87       	std	Y+13, r17	; 0x0d
    PN532DEBUGPRINT.print(F("Using authentication KEY "));PN532DEBUGPRINT.print(keyNumber ? 'B' : 'A');PN532DEBUGPRINT.print(F(": "));
    NFC_PN532::PrintHex(_key, 6);
  #endif

  // Prepare the authentication command //
  pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;   /* Data Exchange Header */
    2e12:	80 e4       	ldi	r24, 0x40	; 64
    2e14:	80 93 d5 09 	sts	0x09D5, r24	; 0x8009d5 <pn532_packetbuffer>
  pn532_packetbuffer[1] = 1;                              /* Max card numbers */
    2e18:	81 e0       	ldi	r24, 0x01	; 1
    2e1a:	80 93 d6 09 	sts	0x09D6, r24	; 0x8009d6 <pn532_packetbuffer+0x1>
  pn532_packetbuffer[2] = (keyNumber) ? MIFARE_CMD_AUTH_B : MIFARE_CMD_AUTH_A;
    2e1e:	e1 10       	cpse	r14, r1
    2e20:	02 c0       	rjmp	.+4      	; 0x2e26 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x4c>
    2e22:	80 e6       	ldi	r24, 0x60	; 96
    2e24:	01 c0       	rjmp	.+2      	; 0x2e28 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x4e>
    2e26:	81 e6       	ldi	r24, 0x61	; 97
    2e28:	80 93 d7 09 	sts	0x09D7, r24	; 0x8009d7 <pn532_packetbuffer+0x2>
  pn532_packetbuffer[3] = blockNumber;                    /* Block Number (1K = 0..63, 4K = 0..255 */
    2e2c:	00 93 d8 09 	sts	0x09D8, r16	; 0x8009d8 <pn532_packetbuffer+0x3>
  memcpy (pn532_packetbuffer+4, _key, 6);
    2e30:	86 e0       	ldi	r24, 0x06	; 6
    2e32:	f5 01       	movw	r30, r10
    2e34:	a9 ed       	ldi	r26, 0xD9	; 217
    2e36:	b9 e0       	ldi	r27, 0x09	; 9
    2e38:	01 90       	ld	r0, Z+
    2e3a:	0d 92       	st	X+, r0
    2e3c:	8a 95       	dec	r24
    2e3e:	e1 f7       	brne	.-8      	; 0x2e38 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x5e>
  for (i = 0; i < _uidLen; i++)
    2e40:	80 e0       	ldi	r24, 0x00	; 0
    2e42:	4d 85       	ldd	r20, Y+13	; 0x0d
    2e44:	84 17       	cp	r24, r20
    2e46:	60 f4       	brcc	.+24     	; 0x2e60 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x86>
  {
    pn532_packetbuffer[10+i] = _uid[i];                /* 4 byte card ID */
    2e48:	28 2f       	mov	r18, r24
    2e4a:	30 e0       	ldi	r19, 0x00	; 0
    2e4c:	fe 01       	movw	r30, r28
    2e4e:	e2 0f       	add	r30, r18
    2e50:	f3 1f       	adc	r31, r19
    2e52:	96 81       	ldd	r25, Z+6	; 0x06
    2e54:	f9 01       	movw	r30, r18
    2e56:	eb 52       	subi	r30, 0x2B	; 43
    2e58:	f6 4f       	sbci	r31, 0xF6	; 246
    2e5a:	92 87       	std	Z+10, r25	; 0x0a
  pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;   /* Data Exchange Header */
  pn532_packetbuffer[1] = 1;                              /* Max card numbers */
  pn532_packetbuffer[2] = (keyNumber) ? MIFARE_CMD_AUTH_B : MIFARE_CMD_AUTH_A;
  pn532_packetbuffer[3] = blockNumber;                    /* Block Number (1K = 0..63, 4K = 0..255 */
  memcpy (pn532_packetbuffer+4, _key, 6);
  for (i = 0; i < _uidLen; i++)
    2e5c:	8f 5f       	subi	r24, 0xFF	; 255
    2e5e:	f1 cf       	rjmp	.-30     	; 0x2e42 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x68>
  {
    pn532_packetbuffer[10+i] = _uid[i];                /* 4 byte card ID */
  }

  if (! sendCommandCheckAck(pn532_packetbuffer, 10+_uidLen))
    2e60:	46 5f       	subi	r20, 0xF6	; 246
    2e62:	28 ee       	ldi	r18, 0xE8	; 232
    2e64:	33 e0       	ldi	r19, 0x03	; 3
    2e66:	65 ed       	ldi	r22, 0xD5	; 213
    2e68:	79 e0       	ldi	r23, 0x09	; 9
    2e6a:	ce 01       	movw	r24, r28
    2e6c:	c4 de       	rcall	.-632    	; 0x2bf6 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    2e6e:	88 23       	and	r24, r24
    2e70:	49 f0       	breq	.+18     	; 0x2e84 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0xaa>
    return 0;

  // Read the response packet
  readdata(pn532_packetbuffer, 12);
    2e72:	4c e0       	ldi	r20, 0x0C	; 12
    2e74:	65 ed       	ldi	r22, 0xD5	; 213
    2e76:	79 e0       	ldi	r23, 0x09	; 9
    2e78:	ce 01       	movw	r24, r28
    2e7a:	19 de       	rcall	.-974    	; 0x2aae <_ZN9NFC_PN5328readdataEPhh>
  {
    pn532_packetbuffer[10+i] = _uid[i];                /* 4 byte card ID */
  }

  if (! sendCommandCheckAck(pn532_packetbuffer, 10+_uidLen))
    return 0;
    2e7c:	81 e0       	ldi	r24, 0x01	; 1
    2e7e:	90 91 dc 09 	lds	r25, 0x09DC	; 0x8009dc <pn532_packetbuffer+0x7>
    2e82:	91 11       	cpse	r25, r1
    2e84:	80 e0       	ldi	r24, 0x00	; 0
    #endif
    return 0;
  }

  return 1;
}
    2e86:	df 91       	pop	r29
    2e88:	cf 91       	pop	r28
    2e8a:	1f 91       	pop	r17
    2e8c:	0f 91       	pop	r16
    2e8e:	ef 90       	pop	r14
    2e90:	df 90       	pop	r13
    2e92:	cf 90       	pop	r12
    2e94:	bf 90       	pop	r11
    2e96:	af 90       	pop	r10
    2e98:	08 95       	ret

00002e9a <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh>:

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
uint8_t NFC_PN532::mifareclassic_ReadDataBlock (uint8_t blockNumber, uint8_t * data)
{
    2e9a:	0f 93       	push	r16
    2e9c:	1f 93       	push	r17
    2e9e:	cf 93       	push	r28
    2ea0:	df 93       	push	r29
    2ea2:	ec 01       	movw	r28, r24
    2ea4:	8a 01       	movw	r16, r20
  #ifdef MIFAREDEBUG
    PN532DEBUGPRINT.print(F("Trying to read 16 bytes from block "));PN532DEBUGPRINT.println(blockNumber);
  #endif

  /* Prepare the command */
  pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;
    2ea6:	80 e4       	ldi	r24, 0x40	; 64
    2ea8:	80 93 d5 09 	sts	0x09D5, r24	; 0x8009d5 <pn532_packetbuffer>
  pn532_packetbuffer[1] = 1;                      /* Card number */
    2eac:	81 e0       	ldi	r24, 0x01	; 1
    2eae:	80 93 d6 09 	sts	0x09D6, r24	; 0x8009d6 <pn532_packetbuffer+0x1>
  pn532_packetbuffer[2] = MIFARE_CMD_READ;        /* Mifare Read command = 0x30 */
    2eb2:	80 e3       	ldi	r24, 0x30	; 48
    2eb4:	80 93 d7 09 	sts	0x09D7, r24	; 0x8009d7 <pn532_packetbuffer+0x2>
  pn532_packetbuffer[3] = blockNumber;            /* Block Number (0..63 for 1K, 0..255 for 4K) */
    2eb8:	60 93 d8 09 	sts	0x09D8, r22	; 0x8009d8 <pn532_packetbuffer+0x3>

  /* Send the command */
  if (! sendCommandCheckAck(pn532_packetbuffer, 4))
    2ebc:	28 ee       	ldi	r18, 0xE8	; 232
    2ebe:	33 e0       	ldi	r19, 0x03	; 3
    2ec0:	44 e0       	ldi	r20, 0x04	; 4
    2ec2:	65 ed       	ldi	r22, 0xD5	; 213
    2ec4:	79 e0       	ldi	r23, 0x09	; 9
    2ec6:	ce 01       	movw	r24, r28
    2ec8:	96 de       	rcall	.-724    	; 0x2bf6 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    2eca:	81 11       	cpse	r24, r1
    2ecc:	02 c0       	rjmp	.+4      	; 0x2ed2 <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh+0x38>
  {
    #ifdef MIFAREDEBUG
      PN532DEBUGPRINT.println(F("Failed to receive ACK for read command"));
    #endif
    return 0;
    2ece:	80 e0       	ldi	r24, 0x00	; 0
    2ed0:	12 c0       	rjmp	.+36     	; 0x2ef6 <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh+0x5c>
  }

  /* Read the response packet */
  readdata(pn532_packetbuffer, 26);
    2ed2:	4a e1       	ldi	r20, 0x1A	; 26
    2ed4:	65 ed       	ldi	r22, 0xD5	; 213
    2ed6:	79 e0       	ldi	r23, 0x09	; 9
    2ed8:	ce 01       	movw	r24, r28
    2eda:	e9 dd       	rcall	.-1070   	; 0x2aae <_ZN9NFC_PN5328readdataEPhh>

  /* If byte 8 isn't 0x00 we probably have an error */
  if (pn532_packetbuffer[7] != 0x00)
    2edc:	80 91 dc 09 	lds	r24, 0x09DC	; 0x8009dc <pn532_packetbuffer+0x7>
    2ee0:	81 11       	cpse	r24, r1
    2ee2:	f5 cf       	rjmp	.-22     	; 0x2ece <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh+0x34>
    return 0;
  }

  /* Copy the 16 data bytes to the output buffer        */
  /* Block content starts at byte 9 of a valid response */
  memcpy (data, pn532_packetbuffer+8, 16);
    2ee4:	80 e1       	ldi	r24, 0x10	; 16
    2ee6:	ed ed       	ldi	r30, 0xDD	; 221
    2ee8:	f9 e0       	ldi	r31, 0x09	; 9
    2eea:	d8 01       	movw	r26, r16
    2eec:	01 90       	ld	r0, Z+
    2eee:	0d 92       	st	X+, r0
    2ef0:	8a 95       	dec	r24
    2ef2:	e1 f7       	brne	.-8      	; 0x2eec <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh+0x52>
    PN532DEBUGPRINT.print(F("Block "));
    PN532DEBUGPRINT.println(blockNumber);
    NFC_PN532::PrintHexChar(data, 16);
  #endif

  return 1;
    2ef4:	81 e0       	ldi	r24, 0x01	; 1
}
    2ef6:	df 91       	pop	r29
    2ef8:	cf 91       	pop	r28
    2efa:	1f 91       	pop	r17
    2efc:	0f 91       	pop	r16
    2efe:	08 95       	ret

00002f00 <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh>:

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
uint8_t NFC_PN532::mifareclassic_WriteDataBlock (uint8_t blockNumber, uint8_t * data)
{
    2f00:	cf 93       	push	r28
    2f02:	df 93       	push	r29
    2f04:	ec 01       	movw	r28, r24
  #ifdef MIFAREDEBUG
    PN532DEBUGPRINT.print(F("Trying to write 16 bytes to block "));PN532DEBUGPRINT.println(blockNumber);
  #endif

  /* Prepare the first command */
  pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;
    2f06:	80 e4       	ldi	r24, 0x40	; 64
    2f08:	80 93 d5 09 	sts	0x09D5, r24	; 0x8009d5 <pn532_packetbuffer>
  pn532_packetbuffer[1] = 1;                      /* Card number */
    2f0c:	81 e0       	ldi	r24, 0x01	; 1
    2f0e:	80 93 d6 09 	sts	0x09D6, r24	; 0x8009d6 <pn532_packetbuffer+0x1>
  pn532_packetbuffer[2] = MIFARE_CMD_WRITE;       /* Mifare Write command = 0xA0 */
    2f12:	80 ea       	ldi	r24, 0xA0	; 160
    2f14:	80 93 d7 09 	sts	0x09D7, r24	; 0x8009d7 <pn532_packetbuffer+0x2>
  pn532_packetbuffer[3] = blockNumber;            /* Block Number (0..63 for 1K, 0..255 for 4K) */
    2f18:	60 93 d8 09 	sts	0x09D8, r22	; 0x8009d8 <pn532_packetbuffer+0x3>
  memcpy (pn532_packetbuffer+4, data, 16);          /* Data Payload */
    2f1c:	80 e1       	ldi	r24, 0x10	; 16
    2f1e:	fa 01       	movw	r30, r20
    2f20:	a9 ed       	ldi	r26, 0xD9	; 217
    2f22:	b9 e0       	ldi	r27, 0x09	; 9
    2f24:	01 90       	ld	r0, Z+
    2f26:	0d 92       	st	X+, r0
    2f28:	8a 95       	dec	r24
    2f2a:	e1 f7       	brne	.-8      	; 0x2f24 <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh+0x24>

  /* Send the command */
  if (! sendCommandCheckAck(pn532_packetbuffer, 20))
    2f2c:	28 ee       	ldi	r18, 0xE8	; 232
    2f2e:	33 e0       	ldi	r19, 0x03	; 3
    2f30:	44 e1       	ldi	r20, 0x14	; 20
    2f32:	65 ed       	ldi	r22, 0xD5	; 213
    2f34:	79 e0       	ldi	r23, 0x09	; 9
    2f36:	ce 01       	movw	r24, r28
    2f38:	5e de       	rcall	.-836    	; 0x2bf6 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    2f3a:	88 23       	and	r24, r24
    2f3c:	69 f0       	breq	.+26     	; 0x2f58 <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh+0x58>
    2f3e:	8f e3       	ldi	r24, 0x3F	; 63
    2f40:	9c e9       	ldi	r25, 0x9C	; 156
    2f42:	01 97       	sbiw	r24, 0x01	; 1
    2f44:	f1 f7       	brne	.-4      	; 0x2f42 <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh+0x42>
    2f46:	00 c0       	rjmp	.+0      	; 0x2f48 <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh+0x48>
    2f48:	00 00       	nop
    return 0;
  }
  _delay_ms(10);

  /* Read the response packet */
  readdata(pn532_packetbuffer, 26);
    2f4a:	4a e1       	ldi	r20, 0x1A	; 26
    2f4c:	65 ed       	ldi	r22, 0xD5	; 213
    2f4e:	79 e0       	ldi	r23, 0x09	; 9
    2f50:	ce 01       	movw	r24, r28
    2f52:	ad dd       	rcall	.-1190   	; 0x2aae <_ZN9NFC_PN5328readdataEPhh>
    2f54:	81 e0       	ldi	r24, 0x01	; 1
    2f56:	01 c0       	rjmp	.+2      	; 0x2f5a <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh+0x5a>
  if (! sendCommandCheckAck(pn532_packetbuffer, 20))
  {
    #ifdef MIFAREDEBUG
      PN532DEBUGPRINT.println(F("Failed to receive ACK for write command"));
    #endif
    return 0;
    2f58:	80 e0       	ldi	r24, 0x00	; 0

  /* Read the response packet */
  readdata(pn532_packetbuffer, 26);

  return 1;
}
    2f5a:	df 91       	pop	r29
    2f5c:	cf 91       	pop	r28
    2f5e:	08 95       	ret

00002f60 <_ZL9date2daysjhh>:
} // of method pinAlarm()                                                     //                                  //
/*******************************************************************************************************************
** Method pinSquareWave() will set the control register flag to make the INT/SQW Pin produce a 1Hz signal         **
*******************************************************************************************************************/
void DS3231M_Class::pinSquareWave() {                                         //                                  //
  writeByte(DS3231M_CONTROL,readByte(DS3231M_CONTROL)|0x4);                   // Set bit 3 to off                 //
    2f60:	80 3d       	cpi	r24, 0xD0	; 208
    2f62:	27 e0       	ldi	r18, 0x07	; 7
    2f64:	92 07       	cpc	r25, r18
    2f66:	10 f0       	brcs	.+4      	; 0x2f6c <_ZL9date2daysjhh+0xc>
    2f68:	80 5d       	subi	r24, 0xD0	; 208
    2f6a:	97 40       	sbci	r25, 0x07	; 7
    2f6c:	50 e0       	ldi	r21, 0x00	; 0
    2f6e:	e6 e2       	ldi	r30, 0x26	; 38
    2f70:	f2 e0       	ldi	r31, 0x02	; 2
    2f72:	21 e0       	ldi	r18, 0x01	; 1
    2f74:	26 17       	cp	r18, r22
    2f76:	30 f4       	brcc	.+12     	; 0x2f84 <_ZL9date2daysjhh+0x24>
    2f78:	34 91       	lpm	r19, Z
    2f7a:	43 0f       	add	r20, r19
    2f7c:	51 1d       	adc	r21, r1
    2f7e:	2f 5f       	subi	r18, 0xFF	; 255
    2f80:	31 96       	adiw	r30, 0x01	; 1
    2f82:	f8 cf       	rjmp	.-16     	; 0x2f74 <_ZL9date2daysjhh+0x14>
    2f84:	63 30       	cpi	r22, 0x03	; 3
    2f86:	38 f0       	brcs	.+14     	; 0x2f96 <_ZL9date2daysjhh+0x36>
    2f88:	9c 01       	movw	r18, r24
    2f8a:	23 70       	andi	r18, 0x03	; 3
    2f8c:	33 27       	eor	r19, r19
    2f8e:	23 2b       	or	r18, r19
    2f90:	11 f4       	brne	.+4      	; 0x2f96 <_ZL9date2daysjhh+0x36>
    2f92:	4f 5f       	subi	r20, 0xFF	; 255
    2f94:	5f 4f       	sbci	r21, 0xFF	; 255
    2f96:	bc 01       	movw	r22, r24
    2f98:	6d 5f       	subi	r22, 0xFD	; 253
    2f9a:	7f 4f       	sbci	r23, 0xFF	; 255
    2f9c:	76 95       	lsr	r23
    2f9e:	67 95       	ror	r22
    2fa0:	76 95       	lsr	r23
    2fa2:	67 95       	ror	r22
    2fa4:	ed e6       	ldi	r30, 0x6D	; 109
    2fa6:	f1 e0       	ldi	r31, 0x01	; 1
    2fa8:	8e 9f       	mul	r24, r30
    2faa:	90 01       	movw	r18, r0
    2fac:	8f 9f       	mul	r24, r31
    2fae:	30 0d       	add	r19, r0
    2fb0:	9e 9f       	mul	r25, r30
    2fb2:	30 0d       	add	r19, r0
    2fb4:	11 24       	eor	r1, r1
    2fb6:	c9 01       	movw	r24, r18
    2fb8:	01 97       	sbiw	r24, 0x01	; 1
    2fba:	86 0f       	add	r24, r22
    2fbc:	97 1f       	adc	r25, r23
    2fbe:	84 0f       	add	r24, r20
    2fc0:	95 1f       	adc	r25, r21
    2fc2:	08 95       	ret

00002fc4 <_ZL6conv2dPKc>:
    2fc4:	fc 01       	movw	r30, r24
    2fc6:	90 81       	ld	r25, Z
    2fc8:	90 53       	subi	r25, 0x30	; 48
    2fca:	9a 30       	cpi	r25, 0x0A	; 10
    2fcc:	08 f0       	brcs	.+2      	; 0x2fd0 <_ZL6conv2dPKc+0xc>
    2fce:	90 e0       	ldi	r25, 0x00	; 0
    2fd0:	81 81       	ldd	r24, Z+1	; 0x01
    2fd2:	80 53       	subi	r24, 0x30	; 48
    2fd4:	2a e0       	ldi	r18, 0x0A	; 10
    2fd6:	92 9f       	mul	r25, r18
    2fd8:	80 0d       	add	r24, r0
    2fda:	11 24       	eor	r1, r1
    2fdc:	08 95       	ret

00002fde <_ZN8DateTimeC1Em>:
    2fde:	8f 92       	push	r8
    2fe0:	9f 92       	push	r9
    2fe2:	af 92       	push	r10
    2fe4:	bf 92       	push	r11
    2fe6:	cf 92       	push	r12
    2fe8:	df 92       	push	r13
    2fea:	ef 92       	push	r14
    2fec:	ff 92       	push	r15
    2fee:	cf 93       	push	r28
    2ff0:	df 93       	push	r29
    2ff2:	ec 01       	movw	r28, r24
    2ff4:	6a 01       	movw	r12, r20
    2ff6:	7b 01       	movw	r14, r22
    2ff8:	80 e8       	ldi	r24, 0x80	; 128
    2ffa:	c8 1a       	sub	r12, r24
    2ffc:	83 e4       	ldi	r24, 0x43	; 67
    2ffe:	d8 0a       	sbc	r13, r24
    3000:	8d e6       	ldi	r24, 0x6D	; 109
    3002:	e8 0a       	sbc	r14, r24
    3004:	88 e3       	ldi	r24, 0x38	; 56
    3006:	f8 0a       	sbc	r15, r24
    3008:	8c e3       	ldi	r24, 0x3C	; 60
    300a:	88 2e       	mov	r8, r24
    300c:	91 2c       	mov	r9, r1
    300e:	a1 2c       	mov	r10, r1
    3010:	b1 2c       	mov	r11, r1
    3012:	c7 01       	movw	r24, r14
    3014:	b6 01       	movw	r22, r12
    3016:	a5 01       	movw	r20, r10
    3018:	94 01       	movw	r18, r8
    301a:	0e 94 77 35 	call	0x6aee	; 0x6aee <__udivmodsi4>
    301e:	6d 83       	std	Y+5, r22	; 0x05
    3020:	ca 01       	movw	r24, r20
    3022:	b9 01       	movw	r22, r18
    3024:	a5 01       	movw	r20, r10
    3026:	94 01       	movw	r18, r8
    3028:	0e 94 77 35 	call	0x6aee	; 0x6aee <__udivmodsi4>
    302c:	6c 83       	std	Y+4, r22	; 0x04
    302e:	c7 01       	movw	r24, r14
    3030:	b6 01       	movw	r22, r12
    3032:	20 e1       	ldi	r18, 0x10	; 16
    3034:	3e e0       	ldi	r19, 0x0E	; 14
    3036:	40 e0       	ldi	r20, 0x00	; 0
    3038:	50 e0       	ldi	r21, 0x00	; 0
    303a:	0e 94 77 35 	call	0x6aee	; 0x6aee <__udivmodsi4>
    303e:	ca 01       	movw	r24, r20
    3040:	b9 01       	movw	r22, r18
    3042:	28 e1       	ldi	r18, 0x18	; 24
    3044:	30 e0       	ldi	r19, 0x00	; 0
    3046:	40 e0       	ldi	r20, 0x00	; 0
    3048:	50 e0       	ldi	r21, 0x00	; 0
    304a:	0e 94 77 35 	call	0x6aee	; 0x6aee <__udivmodsi4>
    304e:	6b 83       	std	Y+3, r22	; 0x03
    3050:	c7 01       	movw	r24, r14
    3052:	b6 01       	movw	r22, r12
    3054:	20 e8       	ldi	r18, 0x80	; 128
    3056:	31 e5       	ldi	r19, 0x51	; 81
    3058:	41 e0       	ldi	r20, 0x01	; 1
    305a:	50 e0       	ldi	r21, 0x00	; 0
    305c:	0e 94 77 35 	call	0x6aee	; 0x6aee <__udivmodsi4>
    3060:	18 82       	st	Y, r1
    3062:	88 81       	ld	r24, Y
    3064:	98 2f       	mov	r25, r24
    3066:	93 70       	andi	r25, 0x03	; 3
    3068:	41 e0       	ldi	r20, 0x01	; 1
    306a:	50 e0       	ldi	r21, 0x00	; 0
    306c:	11 f0       	breq	.+4      	; 0x3072 <_ZN8DateTimeC1Em+0x94>
    306e:	40 e0       	ldi	r20, 0x00	; 0
    3070:	50 e0       	ldi	r21, 0x00	; 0
    3072:	ba 01       	movw	r22, r20
    3074:	63 59       	subi	r22, 0x93	; 147
    3076:	7e 4f       	sbci	r23, 0xFE	; 254
    3078:	26 17       	cp	r18, r22
    307a:	37 07       	cpc	r19, r23
    307c:	38 f0       	brcs	.+14     	; 0x308c <_ZN8DateTimeC1Em+0xae>
    307e:	24 1b       	sub	r18, r20
    3080:	35 0b       	sbc	r19, r21
    3082:	2d 56       	subi	r18, 0x6D	; 109
    3084:	31 40       	sbci	r19, 0x01	; 1
    3086:	8f 5f       	subi	r24, 0xFF	; 255
    3088:	88 83       	st	Y, r24
    308a:	eb cf       	rjmp	.-42     	; 0x3062 <_ZN8DateTimeC1Em+0x84>
    308c:	81 e0       	ldi	r24, 0x01	; 1
    308e:	89 83       	std	Y+1, r24	; 0x01
    3090:	89 81       	ldd	r24, Y+1	; 0x01
    3092:	e8 2f       	mov	r30, r24
    3094:	f0 e0       	ldi	r31, 0x00	; 0
    3096:	eb 5d       	subi	r30, 0xDB	; 219
    3098:	fd 4f       	sbci	r31, 0xFD	; 253
    309a:	e4 91       	lpm	r30, Z
    309c:	91 11       	cpse	r25, r1
    309e:	03 c0       	rjmp	.+6      	; 0x30a6 <_ZN8DateTimeC1Em+0xc8>
    30a0:	82 30       	cpi	r24, 0x02	; 2
    30a2:	09 f4       	brne	.+2      	; 0x30a6 <_ZN8DateTimeC1Em+0xc8>
    30a4:	ef 5f       	subi	r30, 0xFF	; 255
    30a6:	f0 e0       	ldi	r31, 0x00	; 0
    30a8:	2e 17       	cp	r18, r30
    30aa:	3f 07       	cpc	r19, r31
    30ac:	20 f0       	brcs	.+8      	; 0x30b6 <_ZN8DateTimeC1Em+0xd8>
    30ae:	2e 1b       	sub	r18, r30
    30b0:	3f 0b       	sbc	r19, r31
    30b2:	8f 5f       	subi	r24, 0xFF	; 255
    30b4:	ec cf       	rjmp	.-40     	; 0x308e <_ZN8DateTimeC1Em+0xb0>
    30b6:	2f 5f       	subi	r18, 0xFF	; 255
    30b8:	2a 83       	std	Y+2, r18	; 0x02
    30ba:	df 91       	pop	r29
    30bc:	cf 91       	pop	r28
    30be:	ff 90       	pop	r15
    30c0:	ef 90       	pop	r14
    30c2:	df 90       	pop	r13
    30c4:	cf 90       	pop	r12
    30c6:	bf 90       	pop	r11
    30c8:	af 90       	pop	r10
    30ca:	9f 90       	pop	r9
    30cc:	8f 90       	pop	r8
    30ce:	08 95       	ret

000030d0 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>:
    30d0:	ef 92       	push	r14
    30d2:	ff 92       	push	r15
    30d4:	0f 93       	push	r16
    30d6:	1f 93       	push	r17
    30d8:	cf 93       	push	r28
    30da:	df 93       	push	r29
    30dc:	cd b7       	in	r28, 0x3d	; 61
    30de:	de b7       	in	r29, 0x3e	; 62
    30e0:	2b 97       	sbiw	r28, 0x0b	; 11
    30e2:	0f b6       	in	r0, 0x3f	; 63
    30e4:	f8 94       	cli
    30e6:	de bf       	out	0x3e, r29	; 62
    30e8:	0f be       	out	0x3f, r0	; 63
    30ea:	cd bf       	out	0x3d, r28	; 61
    30ec:	8c 01       	movw	r16, r24
    30ee:	7a 01       	movw	r14, r20
    30f0:	4b e0       	ldi	r20, 0x0B	; 11
    30f2:	50 e0       	ldi	r21, 0x00	; 0
    30f4:	ce 01       	movw	r24, r28
    30f6:	01 96       	adiw	r24, 0x01	; 1
    30f8:	0e 94 e7 37 	call	0x6fce	; 0x6fce <memcpy_P>
    30fc:	ce 01       	movw	r24, r28
    30fe:	0a 96       	adiw	r24, 0x0a	; 10
    3100:	61 df       	rcall	.-318    	; 0x2fc4 <_ZL6conv2dPKc>
    3102:	f8 01       	movw	r30, r16
    3104:	80 83       	st	Z, r24
    3106:	e9 81       	ldd	r30, Y+1	; 0x01
    3108:	8e 2f       	mov	r24, r30
    310a:	90 e0       	ldi	r25, 0x00	; 0
    310c:	fc 01       	movw	r30, r24
    310e:	e1 54       	subi	r30, 0x41	; 65
    3110:	f1 09       	sbc	r31, r1
    3112:	e3 31       	cpi	r30, 0x13	; 19
    3114:	f1 05       	cpc	r31, r1
    3116:	48 f5       	brcc	.+82     	; 0x316a <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
    3118:	ee 5a       	subi	r30, 0xAE	; 174
    311a:	ff 4f       	sbci	r31, 0xFF	; 255
    311c:	0c 94 99 35 	jmp	0x6b32	; 0x6b32 <__tablejump2__>
    3120:	8a 81       	ldd	r24, Y+2	; 0x02
    3122:	81 36       	cpi	r24, 0x61	; 97
    3124:	29 f0       	breq	.+10     	; 0x3130 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x60>
    3126:	8b 81       	ldd	r24, Y+3	; 0x03
    3128:	8e 36       	cpi	r24, 0x6E	; 110
    312a:	21 f0       	breq	.+8      	; 0x3134 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x64>
    312c:	87 e0       	ldi	r24, 0x07	; 7
    312e:	1b c0       	rjmp	.+54     	; 0x3166 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    3130:	81 e0       	ldi	r24, 0x01	; 1
    3132:	19 c0       	rjmp	.+50     	; 0x3166 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    3134:	86 e0       	ldi	r24, 0x06	; 6
    3136:	17 c0       	rjmp	.+46     	; 0x3166 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    3138:	82 e0       	ldi	r24, 0x02	; 2
    313a:	15 c0       	rjmp	.+42     	; 0x3166 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    313c:	8b 81       	ldd	r24, Y+3	; 0x03
    313e:	82 37       	cpi	r24, 0x72	; 114
    3140:	11 f0       	breq	.+4      	; 0x3146 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x76>
    3142:	88 e0       	ldi	r24, 0x08	; 8
    3144:	10 c0       	rjmp	.+32     	; 0x3166 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    3146:	84 e0       	ldi	r24, 0x04	; 4
    3148:	0e c0       	rjmp	.+28     	; 0x3166 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    314a:	8b 81       	ldd	r24, Y+3	; 0x03
    314c:	82 37       	cpi	r24, 0x72	; 114
    314e:	11 f0       	breq	.+4      	; 0x3154 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x84>
    3150:	85 e0       	ldi	r24, 0x05	; 5
    3152:	09 c0       	rjmp	.+18     	; 0x3166 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    3154:	83 e0       	ldi	r24, 0x03	; 3
    3156:	07 c0       	rjmp	.+14     	; 0x3166 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    3158:	89 e0       	ldi	r24, 0x09	; 9
    315a:	05 c0       	rjmp	.+10     	; 0x3166 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    315c:	8a e0       	ldi	r24, 0x0A	; 10
    315e:	03 c0       	rjmp	.+6      	; 0x3166 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    3160:	8b e0       	ldi	r24, 0x0B	; 11
    3162:	01 c0       	rjmp	.+2      	; 0x3166 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    3164:	8c e0       	ldi	r24, 0x0C	; 12
    3166:	f8 01       	movw	r30, r16
    3168:	81 83       	std	Z+1, r24	; 0x01
    316a:	ce 01       	movw	r24, r28
    316c:	05 96       	adiw	r24, 0x05	; 5
    316e:	2a df       	rcall	.-428    	; 0x2fc4 <_ZL6conv2dPKc>
    3170:	f8 01       	movw	r30, r16
    3172:	82 83       	std	Z+2, r24	; 0x02
    3174:	48 e0       	ldi	r20, 0x08	; 8
    3176:	50 e0       	ldi	r21, 0x00	; 0
    3178:	b7 01       	movw	r22, r14
    317a:	ce 01       	movw	r24, r28
    317c:	01 96       	adiw	r24, 0x01	; 1
    317e:	0e 94 e7 37 	call	0x6fce	; 0x6fce <memcpy_P>
    3182:	ce 01       	movw	r24, r28
    3184:	01 96       	adiw	r24, 0x01	; 1
    3186:	1e df       	rcall	.-452    	; 0x2fc4 <_ZL6conv2dPKc>
    3188:	f8 01       	movw	r30, r16
    318a:	83 83       	std	Z+3, r24	; 0x03
    318c:	ce 01       	movw	r24, r28
    318e:	04 96       	adiw	r24, 0x04	; 4
    3190:	19 df       	rcall	.-462    	; 0x2fc4 <_ZL6conv2dPKc>
    3192:	f8 01       	movw	r30, r16
    3194:	84 83       	std	Z+4, r24	; 0x04
    3196:	ce 01       	movw	r24, r28
    3198:	07 96       	adiw	r24, 0x07	; 7
    319a:	14 df       	rcall	.-472    	; 0x2fc4 <_ZL6conv2dPKc>
    319c:	f8 01       	movw	r30, r16
    319e:	85 83       	std	Z+5, r24	; 0x05
    31a0:	2b 96       	adiw	r28, 0x0b	; 11
    31a2:	0f b6       	in	r0, 0x3f	; 63
    31a4:	f8 94       	cli
    31a6:	de bf       	out	0x3e, r29	; 62
    31a8:	0f be       	out	0x3f, r0	; 63
    31aa:	cd bf       	out	0x3d, r28	; 61
    31ac:	df 91       	pop	r29
    31ae:	cf 91       	pop	r28
    31b0:	1f 91       	pop	r17
    31b2:	0f 91       	pop	r16
    31b4:	ff 90       	pop	r15
    31b6:	ef 90       	pop	r14
    31b8:	08 95       	ret

000031ba <_ZNK8DateTime12dayOfTheWeekEv>:
    31ba:	fc 01       	movw	r30, r24
    31bc:	80 81       	ld	r24, Z
    31be:	42 81       	ldd	r20, Z+2	; 0x02
    31c0:	61 81       	ldd	r22, Z+1	; 0x01
    31c2:	90 e0       	ldi	r25, 0x00	; 0
    31c4:	cd de       	rcall	.-614    	; 0x2f60 <_ZL9date2daysjhh>
    31c6:	06 96       	adiw	r24, 0x06	; 6
    31c8:	67 e0       	ldi	r22, 0x07	; 7
    31ca:	70 e0       	ldi	r23, 0x00	; 0
    31cc:	0c 94 63 35 	jmp	0x6ac6	; 0x6ac6 <__udivmodhi4>
    31d0:	08 95       	ret

000031d2 <_ZNK8DateTime8unixtimeEv>:
    31d2:	ef 92       	push	r14
    31d4:	ff 92       	push	r15
    31d6:	0f 93       	push	r16
    31d8:	1f 93       	push	r17
    31da:	cf 93       	push	r28
    31dc:	df 93       	push	r29
    31de:	ec 01       	movw	r28, r24
    31e0:	88 81       	ld	r24, Y
    31e2:	4a 81       	ldd	r20, Y+2	; 0x02
    31e4:	69 81       	ldd	r22, Y+1	; 0x01
    31e6:	90 e0       	ldi	r25, 0x00	; 0
    31e8:	bb de       	rcall	.-650    	; 0x2f60 <_ZL9date2daysjhh>
    31ea:	9c 01       	movw	r18, r24
    31ec:	a8 e1       	ldi	r26, 0x18	; 24
    31ee:	b0 e0       	ldi	r27, 0x00	; 0
    31f0:	0e 94 a2 35 	call	0x6b44	; 0x6b44 <__umulhisi3>
    31f4:	2b 81       	ldd	r18, Y+3	; 0x03
    31f6:	7b 01       	movw	r14, r22
    31f8:	8c 01       	movw	r16, r24
    31fa:	e2 0e       	add	r14, r18
    31fc:	f1 1c       	adc	r15, r1
    31fe:	01 1d       	adc	r16, r1
    3200:	11 1d       	adc	r17, r1
    3202:	a8 01       	movw	r20, r16
    3204:	97 01       	movw	r18, r14
    3206:	ac e3       	ldi	r26, 0x3C	; 60
    3208:	b0 e0       	ldi	r27, 0x00	; 0
    320a:	0e 94 b1 35 	call	0x6b62	; 0x6b62 <__muluhisi3>
    320e:	2c 81       	ldd	r18, Y+4	; 0x04
    3210:	7b 01       	movw	r14, r22
    3212:	8c 01       	movw	r16, r24
    3214:	e2 0e       	add	r14, r18
    3216:	f1 1c       	adc	r15, r1
    3218:	01 1d       	adc	r16, r1
    321a:	11 1d       	adc	r17, r1
    321c:	a8 01       	movw	r20, r16
    321e:	97 01       	movw	r18, r14
    3220:	0e 94 b1 35 	call	0x6b62	; 0x6b62 <__muluhisi3>
    3224:	2d 81       	ldd	r18, Y+5	; 0x05
    3226:	dc 01       	movw	r26, r24
    3228:	cb 01       	movw	r24, r22
    322a:	82 0f       	add	r24, r18
    322c:	91 1d       	adc	r25, r1
    322e:	a1 1d       	adc	r26, r1
    3230:	b1 1d       	adc	r27, r1
    3232:	bc 01       	movw	r22, r24
    3234:	cd 01       	movw	r24, r26
    3236:	60 58       	subi	r22, 0x80	; 128
    3238:	7c 4b       	sbci	r23, 0xBC	; 188
    323a:	82 49       	sbci	r24, 0x92	; 146
    323c:	97 4c       	sbci	r25, 0xC7	; 199
    323e:	df 91       	pop	r29
    3240:	cf 91       	pop	r28
    3242:	1f 91       	pop	r17
    3244:	0f 91       	pop	r16
    3246:	ff 90       	pop	r15
    3248:	ef 90       	pop	r14
    324a:	08 95       	ret

0000324c <_ZNK8DateTime11secondstimeEv>:
    324c:	ef 92       	push	r14
    324e:	ff 92       	push	r15
    3250:	0f 93       	push	r16
    3252:	1f 93       	push	r17
    3254:	cf 93       	push	r28
    3256:	df 93       	push	r29
    3258:	ec 01       	movw	r28, r24
    325a:	88 81       	ld	r24, Y
    325c:	4a 81       	ldd	r20, Y+2	; 0x02
    325e:	69 81       	ldd	r22, Y+1	; 0x01
    3260:	90 e0       	ldi	r25, 0x00	; 0
    3262:	7e de       	rcall	.-772    	; 0x2f60 <_ZL9date2daysjhh>
    3264:	9c 01       	movw	r18, r24
    3266:	a8 e1       	ldi	r26, 0x18	; 24
    3268:	b0 e0       	ldi	r27, 0x00	; 0
    326a:	0e 94 a2 35 	call	0x6b44	; 0x6b44 <__umulhisi3>
    326e:	2b 81       	ldd	r18, Y+3	; 0x03
    3270:	7b 01       	movw	r14, r22
    3272:	8c 01       	movw	r16, r24
    3274:	e2 0e       	add	r14, r18
    3276:	f1 1c       	adc	r15, r1
    3278:	01 1d       	adc	r16, r1
    327a:	11 1d       	adc	r17, r1
    327c:	a8 01       	movw	r20, r16
    327e:	97 01       	movw	r18, r14
    3280:	ac e3       	ldi	r26, 0x3C	; 60
    3282:	b0 e0       	ldi	r27, 0x00	; 0
    3284:	0e 94 b1 35 	call	0x6b62	; 0x6b62 <__muluhisi3>
    3288:	2c 81       	ldd	r18, Y+4	; 0x04
    328a:	7b 01       	movw	r14, r22
    328c:	8c 01       	movw	r16, r24
    328e:	e2 0e       	add	r14, r18
    3290:	f1 1c       	adc	r15, r1
    3292:	01 1d       	adc	r16, r1
    3294:	11 1d       	adc	r17, r1
    3296:	a8 01       	movw	r20, r16
    3298:	97 01       	movw	r18, r14
    329a:	0e 94 b1 35 	call	0x6b62	; 0x6b62 <__muluhisi3>
    329e:	2d 81       	ldd	r18, Y+5	; 0x05
    32a0:	62 0f       	add	r22, r18
    32a2:	71 1d       	adc	r23, r1
    32a4:	81 1d       	adc	r24, r1
    32a6:	91 1d       	adc	r25, r1
    32a8:	df 91       	pop	r29
    32aa:	cf 91       	pop	r28
    32ac:	1f 91       	pop	r17
    32ae:	0f 91       	pop	r16
    32b0:	ff 90       	pop	r15
    32b2:	ef 90       	pop	r14
    32b4:	08 95       	ret

000032b6 <_ZN13DS3231M_ClassC1Ev>:
    32b6:	fc 01       	movw	r30, r24
    32b8:	10 82       	st	Z, r1
    32ba:	11 82       	std	Z+1, r1	; 0x01
    32bc:	12 82       	std	Z+2, r1	; 0x02
    32be:	13 82       	std	Z+3, r1	; 0x03
    32c0:	14 82       	std	Z+4, r1	; 0x04
    32c2:	08 95       	ret

000032c4 <_ZN13DS3231M_ClassD1Ev>:
    32c4:	08 95       	ret

000032c6 <_ZN13DS3231M_Class9writeByteEhh>:
    32c6:	0f 93       	push	r16
    32c8:	1f 93       	push	r17
    32ca:	cf 93       	push	r28
    32cc:	df 93       	push	r29
    32ce:	ec 01       	movw	r28, r24
    32d0:	06 2f       	mov	r16, r22
    32d2:	14 2f       	mov	r17, r20
    32d4:	68 e6       	ldi	r22, 0x68	; 104
    32d6:	8e ec       	ldi	r24, 0xCE	; 206
    32d8:	9a e0       	ldi	r25, 0x0A	; 10
    32da:	0e 94 14 2c 	call	0x5828	; 0x5828 <_ZN7TwoWire17beginTransmissionEh>
    32de:	60 2f       	mov	r22, r16
    32e0:	8e ec       	ldi	r24, 0xCE	; 206
    32e2:	9a e0       	ldi	r25, 0x0A	; 10
    32e4:	0e 94 c3 2b 	call	0x5786	; 0x5786 <_ZN7TwoWire5writeEh>
    32e8:	61 2f       	mov	r22, r17
    32ea:	8e ec       	ldi	r24, 0xCE	; 206
    32ec:	9a e0       	ldi	r25, 0x0A	; 10
    32ee:	0e 94 c3 2b 	call	0x5786	; 0x5786 <_ZN7TwoWire5writeEh>
    32f2:	8e ec       	ldi	r24, 0xCE	; 206
    32f4:	9a e0       	ldi	r25, 0x0A	; 10
    32f6:	0e 94 95 2c 	call	0x592a	; 0x592a <_ZN7TwoWire15endTransmissionEv>
    32fa:	88 83       	st	Y, r24
    32fc:	df 91       	pop	r29
    32fe:	cf 91       	pop	r28
    3300:	1f 91       	pop	r17
    3302:	0f 91       	pop	r16
    3304:	08 95       	ret

00003306 <_ZN13DS3231M_Class8readByteEh>:
    3306:	1f 93       	push	r17
    3308:	cf 93       	push	r28
    330a:	df 93       	push	r29
    330c:	ec 01       	movw	r28, r24
    330e:	16 2f       	mov	r17, r22
    3310:	68 e6       	ldi	r22, 0x68	; 104
    3312:	8e ec       	ldi	r24, 0xCE	; 206
    3314:	9a e0       	ldi	r25, 0x0A	; 10
    3316:	0e 94 14 2c 	call	0x5828	; 0x5828 <_ZN7TwoWire17beginTransmissionEh>
    331a:	61 2f       	mov	r22, r17
    331c:	8e ec       	ldi	r24, 0xCE	; 206
    331e:	9a e0       	ldi	r25, 0x0A	; 10
    3320:	0e 94 c3 2b 	call	0x5786	; 0x5786 <_ZN7TwoWire5writeEh>
    3324:	8e ec       	ldi	r24, 0xCE	; 206
    3326:	9a e0       	ldi	r25, 0x0A	; 10
    3328:	0e 94 95 2c 	call	0x592a	; 0x592a <_ZN7TwoWire15endTransmissionEv>
    332c:	88 83       	st	Y, r24
    332e:	41 e0       	ldi	r20, 0x01	; 1
    3330:	68 e6       	ldi	r22, 0x68	; 104
    3332:	8e ec       	ldi	r24, 0xCE	; 206
    3334:	9a e0       	ldi	r25, 0x0A	; 10
    3336:	0e 94 91 2c 	call	0x5922	; 0x5922 <_ZN7TwoWire11requestFromEhh>
    333a:	8e ec       	ldi	r24, 0xCE	; 206
    333c:	9a e0       	ldi	r25, 0x0A	; 10
    333e:	0e 94 3d 2b 	call	0x567a	; 0x567a <_ZN7TwoWire4readEv>
    3342:	df 91       	pop	r29
    3344:	cf 91       	pop	r28
    3346:	1f 91       	pop	r17
    3348:	08 95       	ret

0000334a <_ZN13DS3231M_Class5beginEm>:
    334a:	cf 92       	push	r12
    334c:	df 92       	push	r13
    334e:	ef 92       	push	r14
    3350:	ff 92       	push	r15
    3352:	cf 93       	push	r28
    3354:	df 93       	push	r29
    3356:	ec 01       	movw	r28, r24
    3358:	6a 01       	movw	r12, r20
    335a:	7b 01       	movw	r14, r22
    335c:	8e ec       	ldi	r24, 0xCE	; 206
    335e:	9a e0       	ldi	r25, 0x0A	; 10
    3360:	0e 94 01 2c 	call	0x5802	; 0x5802 <_ZN7TwoWire5beginEv>
    3364:	b7 01       	movw	r22, r14
    3366:	a6 01       	movw	r20, r12
    3368:	8e ec       	ldi	r24, 0xCE	; 206
    336a:	9a e0       	ldi	r25, 0x0A	; 10
    336c:	0e 94 11 2c 	call	0x5822	; 0x5822 <_ZN7TwoWire8setClockEm>
    3370:	68 e6       	ldi	r22, 0x68	; 104
    3372:	8e ec       	ldi	r24, 0xCE	; 206
    3374:	9a e0       	ldi	r25, 0x0A	; 10
    3376:	0e 94 14 2c 	call	0x5828	; 0x5828 <_ZN7TwoWire17beginTransmissionEh>
    337a:	8e ec       	ldi	r24, 0xCE	; 206
    337c:	9a e0       	ldi	r25, 0x0A	; 10
    337e:	0e 94 95 2c 	call	0x592a	; 0x592a <_ZN7TwoWire15endTransmissionEv>
    3382:	81 11       	cpse	r24, r1
    3384:	0a c0       	rjmp	.+20     	; 0x339a <_ZN13DS3231M_Class5beginEm+0x50>
    3386:	62 e0       	ldi	r22, 0x02	; 2
    3388:	ce 01       	movw	r24, r28
    338a:	bd df       	rcall	.-134    	; 0x3306 <_ZN13DS3231M_Class8readByteEh>
    338c:	48 2f       	mov	r20, r24
    338e:	4f 7b       	andi	r20, 0xBF	; 191
    3390:	62 e0       	ldi	r22, 0x02	; 2
    3392:	ce 01       	movw	r24, r28
    3394:	98 df       	rcall	.-208    	; 0x32c6 <_ZN13DS3231M_Class9writeByteEhh>
    3396:	81 e0       	ldi	r24, 0x01	; 1
    3398:	01 c0       	rjmp	.+2      	; 0x339c <_ZN13DS3231M_Class5beginEm+0x52>
    339a:	80 e0       	ldi	r24, 0x00	; 0
    339c:	df 91       	pop	r29
    339e:	cf 91       	pop	r28
    33a0:	ff 90       	pop	r15
    33a2:	ef 90       	pop	r14
    33a4:	df 90       	pop	r13
    33a6:	cf 90       	pop	r12
    33a8:	08 95       	ret

000033aa <_ZN13DS3231M_Class3nowEv>:
/*******************************************************************************************************************
** Method now() returns the current date/time                                                                     **
** then the power down time is returned, if the timeType = 2 then the power up time is returned. These options are**
** not documented as the official calls are "getPowerOffDate" and "getPowerOnDate"                                **
*******************************************************************************************************************/
DateTime DS3231M_Class::now(){                                                // Return current date/time         //
    33aa:	0f 93       	push	r16
    33ac:	1f 93       	push	r17
    33ae:	cf 93       	push	r28
    33b0:	df 93       	push	r29
    33b2:	8c 01       	movw	r16, r24
    33b4:	eb 01       	movw	r28, r22
  Wire.beginTransmission(DS3231M_ADDRESS);                                    // Address the I2C device           //
    33b6:	68 e6       	ldi	r22, 0x68	; 104
    33b8:	8e ec       	ldi	r24, 0xCE	; 206
    33ba:	9a e0       	ldi	r25, 0x0A	; 10
    33bc:	0e 94 14 2c 	call	0x5828	; 0x5828 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(DS3231M_RTCSEC);                                                 // Start at specified register      //
    33c0:	60 e0       	ldi	r22, 0x00	; 0
    33c2:	8e ec       	ldi	r24, 0xCE	; 206
    33c4:	9a e0       	ldi	r25, 0x0A	; 10
    33c6:	0e 94 c3 2b 	call	0x5786	; 0x5786 <_ZN7TwoWire5writeEh>
  _TransmissionStatus = Wire.endTransmission();                               // Close transmission               //
    33ca:	8e ec       	ldi	r24, 0xCE	; 206
    33cc:	9a e0       	ldi	r25, 0x0A	; 10
    33ce:	0e 94 95 2c 	call	0x592a	; 0x592a <_ZN7TwoWire15endTransmissionEv>
    33d2:	88 83       	st	Y, r24
  Wire.requestFrom(DS3231M_ADDRESS, (uint8_t)7);                              // Request 7 bytes of data          //
    33d4:	47 e0       	ldi	r20, 0x07	; 7
    33d6:	68 e6       	ldi	r22, 0x68	; 104
    33d8:	8e ec       	ldi	r24, 0xCE	; 206
    33da:	9a e0       	ldi	r25, 0x0A	; 10
    33dc:	0e 94 91 2c 	call	0x5922	; 0x5922 <_ZN7TwoWire11requestFromEhh>
  if(Wire.available()==7) {                                                   // Wait until the data is ready     //
    33e0:	8e ec       	ldi	r24, 0xCE	; 206
    33e2:	9a e0       	ldi	r25, 0x0A	; 10
    33e4:	0e 94 35 2b 	call	0x566a	; 0x566a <_ZN7TwoWire9availableEv>
    33e8:	07 97       	sbiw	r24, 0x07	; 7
    33ea:	09 f0       	breq	.+2      	; 0x33ee <_ZN13DS3231M_Class3nowEv+0x44>
    33ec:	64 c0       	rjmp	.+200    	; 0x34b6 <_ZN13DS3231M_Class3nowEv+0x10c>
    _ss = bcd2int(Wire.read() & 0x7F);                                        // Mask high bit in seconds         //
    33ee:	8e ec       	ldi	r24, 0xCE	; 206
    33f0:	9a e0       	ldi	r25, 0x0A	; 10
    33f2:	0e 94 3d 2b 	call	0x567a	; 0x567a <_ZN7TwoWire4readEv>
    33f6:	98 2f       	mov	r25, r24
    33f8:	96 95       	lsr	r25
    33fa:	96 95       	lsr	r25
    33fc:	96 95       	lsr	r25
    33fe:	9e 70       	andi	r25, 0x0E	; 14
    3400:	29 2f       	mov	r18, r25
    3402:	22 0f       	add	r18, r18
    3404:	22 0f       	add	r18, r18
    3406:	92 0f       	add	r25, r18
    3408:	8f 70       	andi	r24, 0x0F	; 15
    340a:	89 0f       	add	r24, r25
    340c:	8d 83       	std	Y+5, r24	; 0x05
    _mm = bcd2int(Wire.read() & 0x7F);                                        // Mask high bit in minutes         //
    340e:	8e ec       	ldi	r24, 0xCE	; 206
    3410:	9a e0       	ldi	r25, 0x0A	; 10
    3412:	0e 94 3d 2b 	call	0x567a	; 0x567a <_ZN7TwoWire4readEv>
    3416:	98 2f       	mov	r25, r24
    3418:	96 95       	lsr	r25
    341a:	96 95       	lsr	r25
    341c:	96 95       	lsr	r25
    341e:	9e 70       	andi	r25, 0x0E	; 14
    3420:	29 2f       	mov	r18, r25
    3422:	22 0f       	add	r18, r18
    3424:	22 0f       	add	r18, r18
    3426:	92 0f       	add	r25, r18
    3428:	8f 70       	andi	r24, 0x0F	; 15
    342a:	89 0f       	add	r24, r25
    342c:	8e 83       	std	Y+6, r24	; 0x06
    _hh = bcd2int(Wire.read() & 0x7F);                                        // Mask high bit in hours           //
    342e:	8e ec       	ldi	r24, 0xCE	; 206
    3430:	9a e0       	ldi	r25, 0x0A	; 10
    3432:	0e 94 3d 2b 	call	0x567a	; 0x567a <_ZN7TwoWire4readEv>
    3436:	98 2f       	mov	r25, r24
    3438:	96 95       	lsr	r25
    343a:	96 95       	lsr	r25
    343c:	96 95       	lsr	r25
    343e:	9e 70       	andi	r25, 0x0E	; 14
    3440:	29 2f       	mov	r18, r25
    3442:	22 0f       	add	r18, r18
    3444:	22 0f       	add	r18, r18
    3446:	92 0f       	add	r25, r18
    3448:	8f 70       	andi	r24, 0x0F	; 15
    344a:	89 0f       	add	r24, r25
    344c:	8f 83       	std	Y+7, r24	; 0x07
    Wire.read();                                                              // Ignore Day-Of-Week register      //
    344e:	8e ec       	ldi	r24, 0xCE	; 206
    3450:	9a e0       	ldi	r25, 0x0A	; 10
    3452:	0e 94 3d 2b 	call	0x567a	; 0x567a <_ZN7TwoWire4readEv>
    _d = bcd2int(Wire.read()  & 0x3F);                                        // Mask 2 high bits for day of month//
    3456:	8e ec       	ldi	r24, 0xCE	; 206
    3458:	9a e0       	ldi	r25, 0x0A	; 10
    345a:	0e 94 3d 2b 	call	0x567a	; 0x567a <_ZN7TwoWire4readEv>
    345e:	98 2f       	mov	r25, r24
    3460:	96 95       	lsr	r25
    3462:	96 95       	lsr	r25
    3464:	96 95       	lsr	r25
    3466:	96 70       	andi	r25, 0x06	; 6
    3468:	29 2f       	mov	r18, r25
    346a:	22 0f       	add	r18, r18
    346c:	22 0f       	add	r18, r18
    346e:	92 0f       	add	r25, r18
    3470:	8f 70       	andi	r24, 0x0F	; 15
    3472:	89 0f       	add	r24, r25
    3474:	88 87       	std	Y+8, r24	; 0x08
    _m = bcd2int(Wire.read()  & 0x1F);                                        // Mask 3 high bits for Month       //
    3476:	8e ec       	ldi	r24, 0xCE	; 206
    3478:	9a e0       	ldi	r25, 0x0A	; 10
    347a:	0e 94 3d 2b 	call	0x567a	; 0x567a <_ZN7TwoWire4readEv>
    347e:	84 fb       	bst	r24, 4
    3480:	99 27       	eor	r25, r25
    3482:	90 f9       	bld	r25, 0
    3484:	99 0f       	add	r25, r25
    3486:	29 2f       	mov	r18, r25
    3488:	22 0f       	add	r18, r18
    348a:	22 0f       	add	r18, r18
    348c:	92 0f       	add	r25, r18
    348e:	8f 70       	andi	r24, 0x0F	; 15
    3490:	89 0f       	add	r24, r25
    3492:	89 87       	std	Y+9, r24	; 0x09
    _y = bcd2int(Wire.read()) + 2000;                                         // Add 2000 to internal year        //
    3494:	8e ec       	ldi	r24, 0xCE	; 206
    3496:	9a e0       	ldi	r25, 0x0A	; 10
    3498:	0e 94 3d 2b 	call	0x567a	; 0x567a <_ZN7TwoWire4readEv>
    349c:	98 2f       	mov	r25, r24
    349e:	92 95       	swap	r25
    34a0:	9f 70       	andi	r25, 0x0F	; 15
    34a2:	8f 70       	andi	r24, 0x0F	; 15
    34a4:	2a e0       	ldi	r18, 0x0A	; 10
    34a6:	92 9f       	mul	r25, r18
    34a8:	80 0d       	add	r24, r0
    34aa:	11 24       	eor	r1, r1
    34ac:	90 e0       	ldi	r25, 0x00	; 0
    34ae:	80 53       	subi	r24, 0x30	; 48
    34b0:	98 4f       	sbci	r25, 0xF8	; 248
    34b2:	9b 87       	std	Y+11, r25	; 0x0b
    34b4:	8a 87       	std	Y+10, r24	; 0x0a
  } // of if-then there is data to be read                                    //                                  //
  return DateTime (_y, _m, _d, _hh, _mm, _ss);                                // Return class value               //
    34b6:	2d 81       	ldd	r18, Y+5	; 0x05
    34b8:	3e 81       	ldd	r19, Y+6	; 0x06
    34ba:	4f 81       	ldd	r20, Y+7	; 0x07
    34bc:	58 85       	ldd	r21, Y+8	; 0x08
    34be:	69 85       	ldd	r22, Y+9	; 0x09
    34c0:	8a 85       	ldd	r24, Y+10	; 0x0a
    34c2:	9b 85       	ldd	r25, Y+11	; 0x0b
  } // of for-next each month                                                 //                                  //
  d = days + 1;                                                               //                                  //
} // of method DateTime()                                                     //----------------------------------//
DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour,  //                                  //
                    uint8_t min, uint8_t sec) {                               //                                  //
  if (year >= 2000)                                                           //                                  //
    34c4:	80 3d       	cpi	r24, 0xD0	; 208
    34c6:	77 e0       	ldi	r23, 0x07	; 7
    34c8:	97 07       	cpc	r25, r23
    34ca:	10 f0       	brcs	.+4      	; 0x34d0 <_ZN13DS3231M_Class3nowEv+0x126>
  year -= 2000;                                                               //                                  //
    34cc:	80 5d       	subi	r24, 0xD0	; 208
    34ce:	97 40       	sbci	r25, 0x07	; 7
  yOff = year;                                                                //                                  //
    34d0:	f8 01       	movw	r30, r16
    34d2:	80 83       	st	Z, r24
  m = month;                                                                  //                                  //
    34d4:	61 83       	std	Z+1, r22	; 0x01
  d = day;                                                                    //                                  //
    34d6:	52 83       	std	Z+2, r21	; 0x02
  hh = hour;                                                                  //                                  //
    34d8:	43 83       	std	Z+3, r20	; 0x03
  mm = min;                                                                   //                                  //
    34da:	34 83       	std	Z+4, r19	; 0x04
  ss = sec;                                                                   //                                  //
    34dc:	25 83       	std	Z+5, r18	; 0x05
    _d = bcd2int(Wire.read()  & 0x3F);                                        // Mask 2 high bits for day of month//
    _m = bcd2int(Wire.read()  & 0x1F);                                        // Mask 3 high bits for Month       //
    _y = bcd2int(Wire.read()) + 2000;                                         // Add 2000 to internal year        //
  } // of if-then there is data to be read                                    //                                  //
  return DateTime (_y, _m, _d, _hh, _mm, _ss);                                // Return class value               //
} // of method now                                                            //                                  //
    34de:	c8 01       	movw	r24, r16
    34e0:	df 91       	pop	r29
    34e2:	cf 91       	pop	r28
    34e4:	1f 91       	pop	r17
    34e6:	0f 91       	pop	r16
    34e8:	08 95       	ret

000034ea <_ZN13DS3231M_Class6adjustERK8DateTime>:
** oscillator is stopped during the process and needs to be restarted upon completion.                            **
*******************************************************************************************************************/
void DS3231M_Class::adjust() {                                                // Set the RTC date and Time        //
  adjust(DateTime(F(__DATE__), F(__TIME__)));                                 // Set to compile time              //
} // of method adjust                                                         /-----------------------------------//
void DS3231M_Class::adjust(const DateTime& dt) {                              // Set the RTC date and Time        //
    34ea:	df 92       	push	r13
    34ec:	ef 92       	push	r14
    34ee:	ff 92       	push	r15
    34f0:	0f 93       	push	r16
    34f2:	1f 93       	push	r17
    34f4:	cf 93       	push	r28
    34f6:	df 93       	push	r29
    34f8:	00 d0       	rcall	.+0      	; 0x34fa <_ZN13DS3231M_Class6adjustERK8DateTime+0x10>
    34fa:	00 d0       	rcall	.+0      	; 0x34fc <_ZN13DS3231M_Class6adjustERK8DateTime+0x12>
    34fc:	00 d0       	rcall	.+0      	; 0x34fe <_ZN13DS3231M_Class6adjustERK8DateTime+0x14>
    34fe:	cd b7       	in	r28, 0x3d	; 61
    3500:	de b7       	in	r29, 0x3e	; 62
    3502:	8c 01       	movw	r16, r24
    3504:	7b 01       	movw	r14, r22
    3506:	fb 01       	movw	r30, r22
    3508:	85 81       	ldd	r24, Z+5	; 0x05
  writeByte(DS3231M_RTCSEC,int2bcd(dt.second()));                             // Write seconds, keep device off   //
    350a:	9a e0       	ldi	r25, 0x0A	; 10
    350c:	d9 2e       	mov	r13, r25
    350e:	6d 2d       	mov	r22, r13
    3510:	0e 94 57 35 	call	0x6aae	; 0x6aae <__udivmodqi4>
    3514:	49 2f       	mov	r20, r25
    3516:	f0 e1       	ldi	r31, 0x10	; 16
    3518:	8f 9f       	mul	r24, r31
    351a:	40 0d       	add	r20, r0
    351c:	11 24       	eor	r1, r1
    351e:	60 e0       	ldi	r22, 0x00	; 0
    3520:	c8 01       	movw	r24, r16
    3522:	d1 de       	rcall	.-606    	; 0x32c6 <_ZN13DS3231M_Class9writeByteEhh>
    3524:	f7 01       	movw	r30, r14
    3526:	84 81       	ldd	r24, Z+4	; 0x04
  writeByte(DS3231M_RTCMIN,int2bcd(dt.minute()));                             // Write the minutes value          //
    3528:	6d 2d       	mov	r22, r13
    352a:	0e 94 57 35 	call	0x6aae	; 0x6aae <__udivmodqi4>
    352e:	49 2f       	mov	r20, r25
    3530:	f0 e1       	ldi	r31, 0x10	; 16
    3532:	8f 9f       	mul	r24, r31
    3534:	40 0d       	add	r20, r0
    3536:	11 24       	eor	r1, r1
    3538:	61 e0       	ldi	r22, 0x01	; 1
    353a:	c8 01       	movw	r24, r16
    353c:	c4 de       	rcall	.-632    	; 0x32c6 <_ZN13DS3231M_Class9writeByteEhh>
    353e:	f7 01       	movw	r30, r14
    3540:	83 81       	ldd	r24, Z+3	; 0x03
  writeByte(DS3231M_RTCHOUR,int2bcd(dt.hour()));                              // Also re-sets the 24Hour clock on //
    3542:	6d 2d       	mov	r22, r13
    3544:	0e 94 57 35 	call	0x6aae	; 0x6aae <__udivmodqi4>
    3548:	49 2f       	mov	r20, r25
    354a:	f0 e1       	ldi	r31, 0x10	; 16
    354c:	8f 9f       	mul	r24, r31
    354e:	40 0d       	add	r20, r0
    3550:	11 24       	eor	r1, r1
    3552:	62 e0       	ldi	r22, 0x02	; 2
    3554:	c8 01       	movw	r24, r16
  writeByte(DS3231M_RTCWKDAY,dt.dayOfTheWeek());                              // Update the weekday               //
    3556:	b7 de       	rcall	.-658    	; 0x32c6 <_ZN13DS3231M_Class9writeByteEhh>
    3558:	c7 01       	movw	r24, r14
    355a:	2f de       	rcall	.-930    	; 0x31ba <_ZNK8DateTime12dayOfTheWeekEv>
    355c:	48 2f       	mov	r20, r24
    355e:	63 e0       	ldi	r22, 0x03	; 3
    3560:	c8 01       	movw	r24, r16
    3562:	b1 de       	rcall	.-670    	; 0x32c6 <_ZN13DS3231M_Class9writeByteEhh>
    3564:	f7 01       	movw	r30, r14
    3566:	82 81       	ldd	r24, Z+2	; 0x02
  writeByte(DS3231M_RTCDATE,int2bcd(dt.day()));                               // Write the day of month           //
    3568:	6d 2d       	mov	r22, r13
    356a:	0e 94 57 35 	call	0x6aae	; 0x6aae <__udivmodqi4>
    356e:	49 2f       	mov	r20, r25
    3570:	f0 e1       	ldi	r31, 0x10	; 16
    3572:	8f 9f       	mul	r24, r31
    3574:	40 0d       	add	r20, r0
    3576:	11 24       	eor	r1, r1
    3578:	64 e0       	ldi	r22, 0x04	; 4
    357a:	c8 01       	movw	r24, r16
    357c:	a4 de       	rcall	.-696    	; 0x32c6 <_ZN13DS3231M_Class9writeByteEhh>
    357e:	f7 01       	movw	r30, r14
    3580:	81 81       	ldd	r24, Z+1	; 0x01
  writeByte(DS3231M_RTCMTH,int2bcd(dt.month()));                              // Month, ignore century bit        //
    3582:	6d 2d       	mov	r22, r13
    3584:	0e 94 57 35 	call	0x6aae	; 0x6aae <__udivmodqi4>
    3588:	49 2f       	mov	r20, r25
    358a:	f0 e1       	ldi	r31, 0x10	; 16
    358c:	8f 9f       	mul	r24, r31
    358e:	40 0d       	add	r20, r0
    3590:	11 24       	eor	r1, r1
    3592:	65 e0       	ldi	r22, 0x05	; 5
    3594:	c8 01       	movw	r24, r16
    3596:	97 de       	rcall	.-722    	; 0x32c6 <_ZN13DS3231M_Class9writeByteEhh>
  writeByte(DS3231M_RTCYEAR,int2bcd(dt.year()-2000));                         // Write the year                   //
    3598:	f7 01       	movw	r30, r14
    359a:	80 81       	ld	r24, Z
    359c:	6d 2d       	mov	r22, r13
    359e:	0e 94 57 35 	call	0x6aae	; 0x6aae <__udivmodqi4>
    35a2:	49 2f       	mov	r20, r25
    35a4:	f0 e1       	ldi	r31, 0x10	; 16
    35a6:	8f 9f       	mul	r24, r31
    35a8:	40 0d       	add	r20, r0
    35aa:	11 24       	eor	r1, r1
    35ac:	66 e0       	ldi	r22, 0x06	; 6
    35ae:	c8 01       	movw	r24, r16
  writeByte(DS3231M_STATUS,readByte(DS3231M_STATUS)&B01111111);               // Unset OSC flag bit if set        //
    35b0:	8a de       	rcall	.-748    	; 0x32c6 <_ZN13DS3231M_Class9writeByteEhh>
    35b2:	6f e0       	ldi	r22, 0x0F	; 15
    35b4:	c8 01       	movw	r24, r16
    35b6:	a7 de       	rcall	.-690    	; 0x3306 <_ZN13DS3231M_Class8readByteEh>
    35b8:	48 2f       	mov	r20, r24
    35ba:	4f 77       	andi	r20, 0x7F	; 127
    35bc:	6f e0       	ldi	r22, 0x0F	; 15
    35be:	c8 01       	movw	r24, r16
  writeByte(DS3231M_CONTROL,readByte(DS3231M_CONTROL)&B01111111);             // Unset EOSC flag bit if set       //
    35c0:	82 de       	rcall	.-764    	; 0x32c6 <_ZN13DS3231M_Class9writeByteEhh>
    35c2:	6e e0       	ldi	r22, 0x0E	; 14
    35c4:	c8 01       	movw	r24, r16
    35c6:	9f de       	rcall	.-706    	; 0x3306 <_ZN13DS3231M_Class8readByteEh>
    35c8:	48 2f       	mov	r20, r24
    35ca:	4f 77       	andi	r20, 0x7F	; 127
    35cc:	6e e0       	ldi	r22, 0x0E	; 14
    35ce:	c8 01       	movw	r24, r16
  _SetUnixTime = now().unixtime();                                            // Store time of last change        //
    35d0:	7a de       	rcall	.-780    	; 0x32c6 <_ZN13DS3231M_Class9writeByteEhh>
    35d2:	b8 01       	movw	r22, r16
    35d4:	ce 01       	movw	r24, r28
    35d6:	01 96       	adiw	r24, 0x01	; 1
    35d8:	e8 de       	rcall	.-560    	; 0x33aa <_ZN13DS3231M_Class3nowEv>
    35da:	ce 01       	movw	r24, r28
    35dc:	01 96       	adiw	r24, 0x01	; 1
    35de:	f9 dd       	rcall	.-1038   	; 0x31d2 <_ZNK8DateTime8unixtimeEv>
    35e0:	f8 01       	movw	r30, r16
    35e2:	61 83       	std	Z+1, r22	; 0x01
    35e4:	72 83       	std	Z+2, r23	; 0x02
    35e6:	83 83       	std	Z+3, r24	; 0x03
    35e8:	94 83       	std	Z+4, r25	; 0x04
    35ea:	26 96       	adiw	r28, 0x06	; 6
} // of method adjust                                                         //                                  //
    35ec:	0f b6       	in	r0, 0x3f	; 63
    35ee:	f8 94       	cli
    35f0:	de bf       	out	0x3e, r29	; 62
    35f2:	0f be       	out	0x3f, r0	; 63
    35f4:	cd bf       	out	0x3d, r28	; 61
    35f6:	df 91       	pop	r29
    35f8:	cf 91       	pop	r28
    35fa:	1f 91       	pop	r17
    35fc:	0f 91       	pop	r16
    35fe:	ff 90       	pop	r15
    3600:	ef 90       	pop	r14
    3602:	df 90       	pop	r13
    3604:	08 95       	ret

00003606 <_ZN13DS3231M_Class6adjustEv>:
    3606:	0f 93       	push	r16
/*******************************************************************************************************************
** Method adjust set the current date/time. This is an overloaded function, if called with no parameters then the **
** RTC is set to the date/time when the program was compiled and uploaded. Otherwise the values are set, but the  **
** oscillator is stopped during the process and needs to be restarted upon completion.                            **
*******************************************************************************************************************/
void DS3231M_Class::adjust() {                                                // Set the RTC date and Time        //
    3608:	1f 93       	push	r17
    360a:	cf 93       	push	r28
    360c:	df 93       	push	r29
    360e:	00 d0       	rcall	.+0      	; 0x3610 <_ZN13DS3231M_Class6adjustEv+0xa>
    3610:	00 d0       	rcall	.+0      	; 0x3612 <_ZN13DS3231M_Class6adjustEv+0xc>
    3612:	00 d0       	rcall	.+0      	; 0x3614 <_ZN13DS3231M_Class6adjustEv+0xe>
    3614:	cd b7       	in	r28, 0x3d	; 61
    3616:	de b7       	in	r29, 0x3e	; 62
    3618:	8c 01       	movw	r16, r24
  adjust(DateTime(F(__DATE__), F(__TIME__)));                                 // Set to compile time              //
    361a:	4d e1       	ldi	r20, 0x1D	; 29
    361c:	52 e0       	ldi	r21, 0x02	; 2
    361e:	61 e1       	ldi	r22, 0x11	; 17
    3620:	72 e0       	ldi	r23, 0x02	; 2
    3622:	ce 01       	movw	r24, r28
    3624:	01 96       	adiw	r24, 0x01	; 1
    3626:	54 dd       	rcall	.-1368   	; 0x30d0 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>
    3628:	be 01       	movw	r22, r28
    362a:	6f 5f       	subi	r22, 0xFF	; 255
    362c:	7f 4f       	sbci	r23, 0xFF	; 255
    362e:	c8 01       	movw	r24, r16
    3630:	5c df       	rcall	.-328    	; 0x34ea <_ZN13DS3231M_Class6adjustERK8DateTime>
} // of method adjust                                                         /-----------------------------------//
    3632:	26 96       	adiw	r28, 0x06	; 6
    3634:	0f b6       	in	r0, 0x3f	; 63
    3636:	f8 94       	cli
    3638:	de bf       	out	0x3e, r29	; 62
    363a:	0f be       	out	0x3f, r0	; 63
    363c:	cd bf       	out	0x3d, r28	; 61
    363e:	df 91       	pop	r29
    3640:	cf 91       	pop	r28
    3642:	1f 91       	pop	r17
    3644:	0f 91       	pop	r16
    3646:	08 95       	ret

00003648 <_GLOBAL__sub_I__ZN9DhcpClass13beginWithDHCPEPhmm>:
    unsigned long m = n;
    n /= 16;
    char c = m - 16 * n;
    *str-- = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);
}
    3648:	0f 93       	push	r16
    364a:	00 e0       	ldi	r16, 0x00	; 0
    364c:	20 e0       	ldi	r18, 0x00	; 0
    364e:	40 e0       	ldi	r20, 0x00	; 0
    3650:	60 e0       	ldi	r22, 0x00	; 0
    3652:	85 e1       	ldi	r24, 0x15	; 21
    3654:	9a e0       	ldi	r25, 0x0A	; 10
    3656:	0e 94 90 2e 	call	0x5d20	; 0x5d20 <_ZN9IPAddressC1Ehhhh>
    365a:	0f 91       	pop	r16
    365c:	08 95       	ret

0000365e <_ZN9DNSClient5beginERK9IPAddress>:
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    365e:	fb 01       	movw	r30, r22
    3660:	42 81       	ldd	r20, Z+2	; 0x02
    3662:	53 81       	ldd	r21, Z+3	; 0x03
    3664:	64 81       	ldd	r22, Z+4	; 0x04
    3666:	75 81       	ldd	r23, Z+5	; 0x05
    3668:	fc 01       	movw	r30, r24
    366a:	42 83       	std	Z+2, r20	; 0x02
    366c:	53 83       	std	Z+3, r21	; 0x03
    366e:	64 83       	std	Z+4, r22	; 0x04
    3670:	75 83       	std	Z+5, r23	; 0x05
#define INVALID_RESPONSE -4

void DNSClient::begin(const IPAddress& aDNSServer)
{
    iDNSServer = aDNSServer;
    iRequestId = 0;
    3672:	17 82       	std	Z+7, r1	; 0x07
    3674:	16 82       	std	Z+6, r1	; 0x06
    3676:	08 95       	ret

00003678 <_ZN9DNSClient9inet_atonEPKcR9IPAddress>:
}


int DNSClient::inet_aton(const char* aIPAddrString, IPAddress& aResult)
{
    3678:	cf 93       	push	r28
    367a:	df 93       	push	r29
    367c:	da 01       	movw	r26, r20
    367e:	fb 01       	movw	r30, r22
    3680:	eb 01       	movw	r28, r22
    // See if we've been given a valid IP address
    const char* p =aIPAddrString;
    while (*p &&
    3682:	89 91       	ld	r24, Y+
    3684:	81 11       	cpse	r24, r1
    3686:	fd cf       	rjmp	.-6      	; 0x3682 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0xa>
    3688:	80 e0       	ldi	r24, 0x00	; 0
    368a:	90 e0       	ldi	r25, 0x00	; 0
    368c:	20 e0       	ldi	r18, 0x00	; 0
    368e:	30 e0       	ldi	r19, 0x00	; 0
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
    3690:	4a e0       	ldi	r20, 0x0A	; 10
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
        int segmentValue =0;
        while (*p && (segment < 4))
    3692:	51 91       	ld	r21, Z+
    3694:	55 23       	and	r21, r21
    3696:	e9 f0       	breq	.+58     	; 0x36d2 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x5a>
    3698:	24 30       	cpi	r18, 0x04	; 4
    369a:	31 05       	cpc	r19, r1
    369c:	44 f5       	brge	.+80     	; 0x36ee <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
        {
            if (*p == '.')
    369e:	5e 32       	cpi	r21, 0x2E	; 46
    36a0:	69 f4       	brne	.+26     	; 0x36bc <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x44>
            {
                // We've reached the end of a segment
                if (segmentValue > 255)
    36a2:	8f 3f       	cpi	r24, 0xFF	; 255
    36a4:	91 05       	cpc	r25, r1
    36a6:	09 f0       	breq	.+2      	; 0x36aa <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x32>
    36a8:	14 f5       	brge	.+68     	; 0x36ee <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
                    // You can't have IP address segments that don't fit in a byte
                    return 0;
                }
                else
                {
                    aResult[segment] = (byte)segmentValue;
    36aa:	ed 01       	movw	r28, r26
    36ac:	c2 0f       	add	r28, r18
    36ae:	d3 1f       	adc	r29, r19
    36b0:	8a 83       	std	Y+2, r24	; 0x02
                    segment++;
    36b2:	2f 5f       	subi	r18, 0xFF	; 255
    36b4:	3f 4f       	sbci	r19, 0xFF	; 255
                    segmentValue = 0;
    36b6:	80 e0       	ldi	r24, 0x00	; 0
    36b8:	90 e0       	ldi	r25, 0x00	; 0
    36ba:	eb cf       	rjmp	.-42     	; 0x3692 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x1a>
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
    36bc:	48 9f       	mul	r20, r24
    36be:	b0 01       	movw	r22, r0
    36c0:	49 9f       	mul	r20, r25
    36c2:	70 0d       	add	r23, r0
    36c4:	11 24       	eor	r1, r1
    36c6:	85 2f       	mov	r24, r21
    36c8:	90 e0       	ldi	r25, 0x00	; 0
    36ca:	c0 97       	sbiw	r24, 0x30	; 48
    36cc:	86 0f       	add	r24, r22
    36ce:	97 1f       	adc	r25, r23
    36d0:	e0 cf       	rjmp	.-64     	; 0x3692 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x1a>
            }
            p++;
        }
        // We've reached the end of address, but there'll still be the last
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
    36d2:	8f 3f       	cpi	r24, 0xFF	; 255
    36d4:	91 05       	cpc	r25, r1
    36d6:	09 f0       	breq	.+2      	; 0x36da <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x62>
    36d8:	54 f4       	brge	.+20     	; 0x36ee <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
    36da:	24 30       	cpi	r18, 0x04	; 4
    36dc:	31 05       	cpc	r19, r1
    36de:	3c f4       	brge	.+14     	; 0x36ee <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
            // or more than four segments
            return 0;
        }
        else
        {
            aResult[segment] = (byte)segmentValue;
    36e0:	fd 01       	movw	r30, r26
    36e2:	e2 0f       	add	r30, r18
    36e4:	f3 1f       	adc	r31, r19
    36e6:	82 83       	std	Z+2, r24	; 0x02
            return 1;
    36e8:	81 e0       	ldi	r24, 0x01	; 1
    36ea:	90 e0       	ldi	r25, 0x00	; 0
    36ec:	02 c0       	rjmp	.+4      	; 0x36f2 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x7a>
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
        {
            // You can't have IP address segments that don't fit in a byte,
            // or more than four segments
            return 0;
    36ee:	80 e0       	ldi	r24, 0x00	; 0
    36f0:	90 e0       	ldi	r25, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    36f2:	df 91       	pop	r29
    36f4:	cf 91       	pop	r28
    36f6:	08 95       	ret

000036f8 <_GLOBAL__sub_I__ZN9DNSClient5beginERK9IPAddress>:
    // Mark the entire packet as read
    iUdp.flush();

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
}
    36f8:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    36fa:	00 e0       	ldi	r16, 0x00	; 0
    36fc:	20 e0       	ldi	r18, 0x00	; 0
    36fe:	40 e0       	ldi	r20, 0x00	; 0
    3700:	60 e0       	ldi	r22, 0x00	; 0
    3702:	8b e1       	ldi	r24, 0x1B	; 27
    3704:	9a e0       	ldi	r25, 0x0A	; 10
    3706:	0e 94 90 2e 	call	0x5d20	; 0x5d20 <_ZN9IPAddressC1Ehhhh>
    370a:	0f 91       	pop	r16
    370c:	08 95       	ret

0000370e <_ZN9DNSClient12BuildRequestEPKc>:

    return ret;
}

uint16_t DNSClient::BuildRequest(const char* aName)
{
    370e:	8f 92       	push	r8
    3710:	9f 92       	push	r9
    3712:	af 92       	push	r10
    3714:	bf 92       	push	r11
    3716:	cf 92       	push	r12
    3718:	df 92       	push	r13
    371a:	ef 92       	push	r14
    371c:	ff 92       	push	r15
    371e:	0f 93       	push	r16
    3720:	1f 93       	push	r17
    3722:	cf 93       	push	r28
    3724:	df 93       	push	r29
    3726:	00 d0       	rcall	.+0      	; 0x3728 <_ZN9DNSClient12BuildRequestEPKc+0x1a>
    3728:	1f 92       	push	r1
    372a:	cd b7       	in	r28, 0x3d	; 61
    372c:	de b7       	in	r29, 0x3e	; 62
    372e:	6c 01       	movw	r12, r24
    3730:	7b 01       	movw	r14, r22
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    //    |                    ARCOUNT                    |
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    // As we only support one request at a time at present, we can simplify
    // some of this header
    iRequestId = millis(); // generate a random ID
    3732:	0e 94 11 30 	call	0x6022	; 0x6022 <millis>
    3736:	f6 01       	movw	r30, r12
    3738:	77 83       	std	Z+7, r23	; 0x07
    373a:	66 83       	std	Z+6, r22	; 0x06
    uint16_t twoByteBuffer;

    // FIXME We should also check that there's enough space available to write to, rather
    // FIXME than assume there's enough space (as the code does at present)
    iUdp.write((uint8_t*)&iRequestId, sizeof(iRequestId));
    373c:	86 01       	movw	r16, r12
    373e:	08 5f       	subi	r16, 0xF8	; 248
    3740:	1f 4f       	sbci	r17, 0xFF	; 255
    3742:	b6 01       	movw	r22, r12
    3744:	6a 5f       	subi	r22, 0xFA	; 250
    3746:	7f 4f       	sbci	r23, 0xFF	; 255
    3748:	42 e0       	ldi	r20, 0x02	; 2
    374a:	50 e0       	ldi	r21, 0x00	; 0
    374c:	c8 01       	movw	r24, r16
    374e:	30 d5       	rcall	.+2656   	; 0x41b0 <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = htons(QUERY_FLAG | OPCODE_STANDARD_QUERY | RECURSION_DESIRED_FLAG);
    3750:	81 e0       	ldi	r24, 0x01	; 1
    3752:	90 e0       	ldi	r25, 0x00	; 0
    3754:	9a 83       	std	Y+2, r25	; 0x02
    3756:	89 83       	std	Y+1, r24	; 0x01
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    3758:	42 e0       	ldi	r20, 0x02	; 2
    375a:	50 e0       	ldi	r21, 0x00	; 0
    375c:	be 01       	movw	r22, r28
    375e:	6f 5f       	subi	r22, 0xFF	; 255
    3760:	7f 4f       	sbci	r23, 0xFF	; 255
    3762:	c8 01       	movw	r24, r16
    3764:	25 d5       	rcall	.+2634   	; 0x41b0 <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = htons(1);  // One question record
    3766:	80 e0       	ldi	r24, 0x00	; 0
    3768:	91 e0       	ldi	r25, 0x01	; 1
    376a:	9a 83       	std	Y+2, r25	; 0x02
    376c:	89 83       	std	Y+1, r24	; 0x01
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    376e:	42 e0       	ldi	r20, 0x02	; 2
    3770:	50 e0       	ldi	r21, 0x00	; 0
    3772:	be 01       	movw	r22, r28
    3774:	6f 5f       	subi	r22, 0xFF	; 255
    3776:	7f 4f       	sbci	r23, 0xFF	; 255
    3778:	c8 01       	movw	r24, r16
    377a:	1a d5       	rcall	.+2612   	; 0x41b0 <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = 0;  // Zero answer records
    377c:	1a 82       	std	Y+2, r1	; 0x02
    377e:	19 82       	std	Y+1, r1	; 0x01
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    3780:	42 e0       	ldi	r20, 0x02	; 2
    3782:	50 e0       	ldi	r21, 0x00	; 0
    3784:	be 01       	movw	r22, r28
    3786:	6f 5f       	subi	r22, 0xFF	; 255
    3788:	7f 4f       	sbci	r23, 0xFF	; 255
    378a:	c8 01       	movw	r24, r16
    378c:	11 d5       	rcall	.+2594   	; 0x41b0 <_ZN11EthernetUDP5writeEPKhj>

    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    378e:	42 e0       	ldi	r20, 0x02	; 2
    3790:	50 e0       	ldi	r21, 0x00	; 0
    3792:	be 01       	movw	r22, r28
    3794:	6f 5f       	subi	r22, 0xFF	; 255
    3796:	7f 4f       	sbci	r23, 0xFF	; 255
    3798:	c8 01       	movw	r24, r16
    379a:	0a d5       	rcall	.+2580   	; 0x41b0 <_ZN11EthernetUDP5writeEPKhj>
    // and zero additional records
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    379c:	42 e0       	ldi	r20, 0x02	; 2
    379e:	50 e0       	ldi	r21, 0x00	; 0
    37a0:	be 01       	movw	r22, r28
    37a2:	6f 5f       	subi	r22, 0xFF	; 255
    37a4:	7f 4f       	sbci	r23, 0xFF	; 255
    37a6:	c8 01       	movw	r24, r16
    37a8:	03 d5       	rcall	.+2566   	; 0x41b0 <_ZN11EthernetUDP5writeEPKhj>

    // Build question
    const char* start =aName;
    const char* end =start;
    37aa:	57 01       	movw	r10, r14
    uint8_t len;
    // Run through the name being requested
    while (*end)
    37ac:	f5 01       	movw	r30, r10
    37ae:	80 81       	ld	r24, Z
    37b0:	88 23       	and	r24, r24
    37b2:	f9 f0       	breq	.+62     	; 0x37f2 <_ZN9DNSClient12BuildRequestEPKc+0xe4>
    37b4:	a7 01       	movw	r20, r14
    37b6:	5a 01       	movw	r10, r20
    {
        // Find out how long this section of the name is
        end = start;
        while (*end && (*end != '.') )
    37b8:	f5 01       	movw	r30, r10
    37ba:	81 91       	ld	r24, Z+
    37bc:	6f 01       	movw	r12, r30
    37be:	88 23       	and	r24, r24
    37c0:	21 f0       	breq	.+8      	; 0x37ca <_ZN9DNSClient12BuildRequestEPKc+0xbc>
    37c2:	8e 32       	cpi	r24, 0x2E	; 46
    37c4:	11 f0       	breq	.+4      	; 0x37ca <_ZN9DNSClient12BuildRequestEPKc+0xbc>
    37c6:	a6 01       	movw	r20, r12
    37c8:	f6 cf       	rjmp	.-20     	; 0x37b6 <_ZN9DNSClient12BuildRequestEPKc+0xa8>
        {
            end++;
        }

        if (end-start > 0)
    37ca:	4a 01       	movw	r8, r20
    37cc:	8e 18       	sub	r8, r14
    37ce:	9f 08       	sbc	r9, r15
    37d0:	18 14       	cp	r1, r8
    37d2:	19 04       	cpc	r1, r9
    37d4:	64 f4       	brge	.+24     	; 0x37ee <_ZN9DNSClient12BuildRequestEPKc+0xe0>
        {
            // Write out the size of this section
            len = end-start;
    37d6:	8b 82       	std	Y+3, r8	; 0x03
            iUdp.write(&len, sizeof(len));
    37d8:	41 e0       	ldi	r20, 0x01	; 1
    37da:	50 e0       	ldi	r21, 0x00	; 0
    37dc:	be 01       	movw	r22, r28
    37de:	6d 5f       	subi	r22, 0xFD	; 253
    37e0:	7f 4f       	sbci	r23, 0xFF	; 255
    37e2:	c8 01       	movw	r24, r16
            // And then write out the section
            iUdp.write((uint8_t*)start, end-start);
    37e4:	e5 d4       	rcall	.+2506   	; 0x41b0 <_ZN11EthernetUDP5writeEPKhj>
    37e6:	a4 01       	movw	r20, r8
    37e8:	b7 01       	movw	r22, r14
    37ea:	c8 01       	movw	r24, r16
    37ec:	e1 d4       	rcall	.+2498   	; 0x41b0 <_ZN11EthernetUDP5writeEPKhj>
        }
        start = end+1;
    37ee:	76 01       	movw	r14, r12
    }

    // We've got to the end of the question name, so
    // terminate it with a zero-length section
    len = 0;
    37f0:	dd cf       	rjmp	.-70     	; 0x37ac <_ZN9DNSClient12BuildRequestEPKc+0x9e>
    iUdp.write(&len, sizeof(len));
    37f2:	1b 82       	std	Y+3, r1	; 0x03
    37f4:	41 e0       	ldi	r20, 0x01	; 1
    37f6:	50 e0       	ldi	r21, 0x00	; 0
    37f8:	be 01       	movw	r22, r28
    37fa:	6d 5f       	subi	r22, 0xFD	; 253
    37fc:	7f 4f       	sbci	r23, 0xFF	; 255
    37fe:	c8 01       	movw	r24, r16
    3800:	d7 d4       	rcall	.+2478   	; 0x41b0 <_ZN11EthernetUDP5writeEPKhj>
    // Finally the type and class of question
    twoByteBuffer = htons(TYPE_A);
    3802:	e1 2c       	mov	r14, r1
    3804:	ff 24       	eor	r15, r15
    3806:	f3 94       	inc	r15
    3808:	fa 82       	std	Y+2, r15	; 0x02
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    380a:	e9 82       	std	Y+1, r14	; 0x01
    380c:	42 e0       	ldi	r20, 0x02	; 2
    380e:	50 e0       	ldi	r21, 0x00	; 0
    3810:	be 01       	movw	r22, r28
    3812:	6f 5f       	subi	r22, 0xFF	; 255
    3814:	7f 4f       	sbci	r23, 0xFF	; 255
    3816:	c8 01       	movw	r24, r16

    twoByteBuffer = htons(CLASS_IN);  // Internet class of question
    3818:	cb d4       	rcall	.+2454   	; 0x41b0 <_ZN11EthernetUDP5writeEPKhj>
    381a:	fa 82       	std	Y+2, r15	; 0x02
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    381c:	e9 82       	std	Y+1, r14	; 0x01
    381e:	42 e0       	ldi	r20, 0x02	; 2
    3820:	50 e0       	ldi	r21, 0x00	; 0
    3822:	be 01       	movw	r22, r28
    3824:	6f 5f       	subi	r22, 0xFF	; 255
    3826:	7f 4f       	sbci	r23, 0xFF	; 255
    3828:	c8 01       	movw	r24, r16
    382a:	c2 d4       	rcall	.+2436   	; 0x41b0 <_ZN11EthernetUDP5writeEPKhj>
    // Success!  Everything buffered okay
    return 1;
}
    382c:	81 e0       	ldi	r24, 0x01	; 1
    382e:	90 e0       	ldi	r25, 0x00	; 0
    3830:	0f 90       	pop	r0
    3832:	0f 90       	pop	r0
    3834:	0f 90       	pop	r0
    3836:	df 91       	pop	r29
    3838:	cf 91       	pop	r28
    383a:	1f 91       	pop	r17
    383c:	0f 91       	pop	r16
    383e:	ff 90       	pop	r15
    3840:	ef 90       	pop	r14
    3842:	df 90       	pop	r13
    3844:	cf 90       	pop	r12
    3846:	bf 90       	pop	r11
    3848:	af 90       	pop	r10
    384a:	9f 90       	pop	r9
    384c:	8f 90       	pop	r8
    384e:	08 95       	ret

00003850 <_ZN9DNSClient15ProcessResponseEjR9IPAddress>:


uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    3850:	2f 92       	push	r2
    3852:	3f 92       	push	r3
    3854:	4f 92       	push	r4
    3856:	5f 92       	push	r5
    3858:	6f 92       	push	r6
    385a:	7f 92       	push	r7
    385c:	8f 92       	push	r8
    385e:	9f 92       	push	r9
    3860:	af 92       	push	r10
    3862:	bf 92       	push	r11
    3864:	cf 92       	push	r12
    3866:	df 92       	push	r13
    3868:	ef 92       	push	r14
    386a:	ff 92       	push	r15
    386c:	0f 93       	push	r16
    386e:	1f 93       	push	r17
    3870:	cf 93       	push	r28
    3872:	df 93       	push	r29
    3874:	cd b7       	in	r28, 0x3d	; 61
    3876:	de b7       	in	r29, 0x3e	; 62
    3878:	63 97       	sbiw	r28, 0x13	; 19
    387a:	0f b6       	in	r0, 0x3f	; 63
    387c:	f8 94       	cli
    387e:	de bf       	out	0x3e, r29	; 62
    3880:	0f be       	out	0x3f, r0	; 63
    3882:	cd bf       	out	0x3d, r28	; 61
    3884:	7c 01       	movw	r14, r24
    3886:	6b 01       	movw	r12, r22
    3888:	1a 01       	movw	r2, r20
    uint32_t startTime = millis();
    388a:	0e 94 11 30 	call	0x6022	; 0x6022 <millis>
    388e:	4b 01       	movw	r8, r22
    3890:	5c 01       	movw	r10, r24

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    3892:	87 01       	movw	r16, r14
    3894:	08 5f       	subi	r16, 0xF8	; 248
    3896:	1f 4f       	sbci	r17, 0xFF	; 255
    {
        if((millis() - startTime) > aTimeout)
    3898:	26 01       	movw	r4, r12
    389a:	61 2c       	mov	r6, r1
    389c:	71 2c       	mov	r7, r1
uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    389e:	c8 01       	movw	r24, r16
    38a0:	29 d5       	rcall	.+2642   	; 0x42f4 <_ZN11EthernetUDP11parsePacketEv>
    38a2:	18 16       	cp	r1, r24
    38a4:	19 06       	cpc	r1, r25
    38a6:	a4 f0       	brlt	.+40     	; 0x38d0 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x80>
    {
        if((millis() - startTime) > aTimeout)
    38a8:	0e 94 11 30 	call	0x6022	; 0x6022 <millis>
    38ac:	dc 01       	movw	r26, r24
    38ae:	cb 01       	movw	r24, r22
    38b0:	88 19       	sub	r24, r8
    38b2:	99 09       	sbc	r25, r9
    38b4:	aa 09       	sbc	r26, r10
    38b6:	bb 09       	sbc	r27, r11
    38b8:	48 16       	cp	r4, r24
    38ba:	59 06       	cpc	r5, r25
    38bc:	6a 06       	cpc	r6, r26
    38be:	7b 06       	cpc	r7, r27
    38c0:	d0 f0       	brcs	.+52     	; 0x38f6 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xa6>
            return TIMED_OUT;
        delay(50);
    38c2:	62 e3       	ldi	r22, 0x32	; 50
    38c4:	70 e0       	ldi	r23, 0x00	; 0
    38c6:	80 e0       	ldi	r24, 0x00	; 0
    38c8:	90 e0       	ldi	r25, 0x00	; 0
    38ca:	0e 94 42 30 	call	0x6084	; 0x6084 <delay>
uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    38ce:	e7 cf       	rjmp	.-50     	; 0x389e <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x4e>

    // We've had a reply!
    // Read the UDP header
    uint8_t header[DNS_HEADER_SIZE]; // Enough space to reuse for the DNS header
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
    38d0:	f7 01       	movw	r30, r14
    38d2:	42 81       	ldd	r20, Z+2	; 0x02
    38d4:	53 81       	ldd	r21, Z+3	; 0x03
    38d6:	64 81       	ldd	r22, Z+4	; 0x04
    38d8:	75 81       	ldd	r23, Z+5	; 0x05
    38da:	81 8d       	ldd	r24, Z+25	; 0x19
    38dc:	92 8d       	ldd	r25, Z+26	; 0x1a
    38de:	a3 8d       	ldd	r26, Z+27	; 0x1b
    38e0:	b4 8d       	ldd	r27, Z+28	; 0x1c
    38e2:	48 17       	cp	r20, r24
    38e4:	59 07       	cpc	r21, r25
    38e6:	6a 07       	cpc	r22, r26
    38e8:	7b 07       	cpc	r23, r27
    38ea:	49 f4       	brne	.+18     	; 0x38fe <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xae>
    38ec:	85 8d       	ldd	r24, Z+29	; 0x1d
    38ee:	96 8d       	ldd	r25, Z+30	; 0x1e
    38f0:	c5 97       	sbiw	r24, 0x35	; 53
    38f2:	29 f4       	brne	.+10     	; 0x38fe <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xae>
    38f4:	09 c0       	rjmp	.+18     	; 0x3908 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xb8>

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    {
        if((millis() - startTime) > aTimeout)
            return TIMED_OUT;
    38f6:	ee 24       	eor	r14, r14
    38f8:	ea 94       	dec	r14
    38fa:	fe 2c       	mov	r15, r14
    38fc:	f0 c0       	rjmp	.+480    	; 0x3ade <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
        (iUdp.remotePort() != DNS_PORT) )
    {
        // It's not from who we expected
        return INVALID_SERVER;
    38fe:	9e ef       	ldi	r25, 0xFE	; 254
    3900:	e9 2e       	mov	r14, r25
    3902:	ff 24       	eor	r15, r15
    3904:	fa 94       	dec	r15
    3906:	eb c0       	rjmp	.+470    	; 0x3ade <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    3908:	c8 01       	movw	r24, r16
    390a:	08 d4       	rcall	.+2064   	; 0x411c <_ZN11EthernetUDP9availableEv>
    390c:	0c 97       	sbiw	r24, 0x0c	; 12
    390e:	0c f4       	brge	.+2      	; 0x3912 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xc2>
    3910:	e2 c0       	rjmp	.+452    	; 0x3ad6 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x286>
    {
        return TRUNCATED;
    }
    iUdp.read(header, DNS_HEADER_SIZE);
    3912:	4c e0       	ldi	r20, 0x0C	; 12
    3914:	50 e0       	ldi	r21, 0x00	; 0
    3916:	be 01       	movw	r22, r28
    3918:	6f 5f       	subi	r22, 0xFF	; 255
    391a:	7f 4f       	sbci	r23, 0xFF	; 255
    391c:	c8 01       	movw	r24, r16
    391e:	83 d4       	rcall	.+2310   	; 0x4226 <_ZN11EthernetUDP4readEPhj>

    uint16_t header_flags = htons(*((uint16_t*)&header[2]));
    3920:	8b 81       	ldd	r24, Y+3	; 0x03
    3922:	9c 81       	ldd	r25, Y+4	; 0x04
    3924:	98 27       	eor	r25, r24
    3926:	89 27       	eor	r24, r25
    3928:	98 27       	eor	r25, r24
    392a:	9a 8b       	std	Y+18, r25	; 0x12
    392c:	89 8b       	std	Y+17, r24	; 0x11
    // Check that it's a response to this request
    if ( ( iRequestId != (*((uint16_t*)&header[0])) ) ||
    392e:	f7 01       	movw	r30, r14
    3930:	46 81       	ldd	r20, Z+6	; 0x06
    3932:	57 81       	ldd	r21, Z+7	; 0x07
    3934:	29 81       	ldd	r18, Y+1	; 0x01
    3936:	3a 81       	ldd	r19, Y+2	; 0x02
    3938:	42 17       	cp	r20, r18
    393a:	53 07       	cpc	r21, r19
    393c:	11 f4       	brne	.+4      	; 0x3942 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xf2>
    393e:	97 fd       	sbrc	r25, 7
        ((header_flags & QUERY_RESPONSE_MASK) != (uint16_t)RESPONSE_FLAG) )
    {
        // Mark the entire packet as read
        iUdp.flush();
    3940:	07 c0       	rjmp	.+14     	; 0x3950 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x100>
    3942:	c8 01       	movw	r24, r16
    3944:	05 d4       	rcall	.+2058   	; 0x4150 <_ZN11EthernetUDP5flushEv>
        return INVALID_RESPONSE;
    3946:	7c ef       	ldi	r23, 0xFC	; 252
    3948:	e7 2e       	mov	r14, r23
    394a:	ff 24       	eor	r15, r15
    394c:	fa 94       	dec	r15
    394e:	c7 c0       	rjmp	.+398    	; 0x3ade <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    }
    // Check for any errors in the response (or in our request)
    // although we don't do anything to get round these
    if ( (header_flags & TRUNCATION_FLAG) || (header_flags & RESP_MASK) )
    3950:	8f 70       	andi	r24, 0x0F	; 15
    3952:	92 70       	andi	r25, 0x02	; 2
    3954:	89 2b       	or	r24, r25
    {
        // Mark the entire packet as read
        iUdp.flush();
    3956:	39 f0       	breq	.+14     	; 0x3966 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x116>
    3958:	c8 01       	movw	r24, r16
    395a:	fa d3       	rcall	.+2036   	; 0x4150 <_ZN11EthernetUDP5flushEv>
        return -5; //INVALID_RESPONSE;
    395c:	6b ef       	ldi	r22, 0xFB	; 251
    395e:	e6 2e       	mov	r14, r22
    3960:	ff 24       	eor	r15, r15
    3962:	fa 94       	dec	r15
    3964:	bc c0       	rjmp	.+376    	; 0x3ade <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    }

    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
    3966:	cf 80       	ldd	r12, Y+7	; 0x07
    3968:	d8 84       	ldd	r13, Y+8	; 0x08
    396a:	dc 24       	eor	r13, r12
    396c:	cd 24       	eor	r12, r13
    396e:	dc 24       	eor	r13, r12
    if (answerCount == 0 )
    3970:	c1 14       	cp	r12, r1
    3972:	d1 04       	cpc	r13, r1
    3974:	19 f0       	breq	.+6      	; 0x397c <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x12c>
    3976:	e1 2c       	mov	r14, r1
    3978:	f1 2c       	mov	r15, r1
    {
        // Mark the entire packet as read
        iUdp.flush();
    397a:	1f c0       	rjmp	.+62     	; 0x39ba <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x16a>
    397c:	c8 01       	movw	r24, r16
    397e:	e8 d3       	rcall	.+2000   	; 0x4150 <_ZN11EthernetUDP5flushEv>
        return -6; //INVALID_RESPONSE;
    3980:	5a ef       	ldi	r21, 0xFA	; 250
    3982:	e5 2e       	mov	r14, r21
    3984:	ff 24       	eor	r15, r15
    3986:	fa 94       	dec	r15
    3988:	aa c0       	rjmp	.+340    	; 0x3ade <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    {
        // Skip over the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    398a:	41 e0       	ldi	r20, 0x01	; 1
    398c:	50 e0       	ldi	r21, 0x00	; 0
    398e:	be 01       	movw	r22, r28
    3990:	63 5f       	subi	r22, 0xF3	; 243
    3992:	7f 4f       	sbci	r23, 0xFF	; 255
    3994:	c8 01       	movw	r24, r16
    3996:	47 d4       	rcall	.+2190   	; 0x4226 <_ZN11EthernetUDP4readEPhj>
            if (len > 0)
    3998:	8d 85       	ldd	r24, Y+13	; 0x0d
    399a:	81 11       	cpse	r24, r1
                while(len--)
                {
                    iUdp.read(); // we don't care about the returned byte
                }
            }
        } while (len != 0);
    399c:	17 c0       	rjmp	.+46     	; 0x39cc <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x17c>
    399e:	8d 85       	ldd	r24, Y+13	; 0x0d

        // Now jump over the type and class
        for (int i =0; i < 4; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    39a0:	81 11       	cpse	r24, r1
    39a2:	f3 cf       	rjmp	.-26     	; 0x398a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x13a>
    39a4:	c8 01       	movw	r24, r16
    39a6:	17 d4       	rcall	.+2094   	; 0x41d6 <_ZN11EthernetUDP4readEv>
    39a8:	c8 01       	movw	r24, r16
    39aa:	15 d4       	rcall	.+2090   	; 0x41d6 <_ZN11EthernetUDP4readEv>
    39ac:	c8 01       	movw	r24, r16
    39ae:	13 d4       	rcall	.+2086   	; 0x41d6 <_ZN11EthernetUDP4readEv>
    39b0:	c8 01       	movw	r24, r16
    39b2:	11 d4       	rcall	.+2082   	; 0x41d6 <_ZN11EthernetUDP4readEv>
    39b4:	ff ef       	ldi	r31, 0xFF	; 255
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    39b6:	ef 1a       	sub	r14, r31
    39b8:	ff 0a       	sbc	r15, r31
    39ba:	8d 81       	ldd	r24, Y+5	; 0x05
    39bc:	9e 81       	ldd	r25, Y+6	; 0x06
    39be:	98 27       	eor	r25, r24
    39c0:	89 27       	eor	r24, r25
    39c2:	98 27       	eor	r25, r24
    39c4:	e8 16       	cp	r14, r24
    39c6:	f9 06       	cpc	r15, r25
    39c8:	00 f3       	brcs	.-64     	; 0x398a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x13a>
    39ca:	09 c0       	rjmp	.+18     	; 0x39de <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x18e>
            iUdp.read(&len, sizeof(len));
            if (len > 0)
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
    39cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    39ce:	9f ef       	ldi	r25, 0xFF	; 255
    39d0:	98 0f       	add	r25, r24
    39d2:	9d 87       	std	Y+13, r25	; 0x0d
    39d4:	88 23       	and	r24, r24
    39d6:	19 f3       	breq	.-58     	; 0x399e <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x14e>
                {
                    iUdp.read(); // we don't care about the returned byte
    39d8:	c8 01       	movw	r24, r16
    39da:	fd d3       	rcall	.+2042   	; 0x41d6 <_ZN11EthernetUDP4readEv>
            iUdp.read(&len, sizeof(len));
            if (len > 0)
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
    39dc:	f7 cf       	rjmp	.-18     	; 0x39cc <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x17c>
    39de:	a1 2c       	mov	r10, r1
    39e0:	b1 2c       	mov	r11, r1
    {
        // Skip the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    39e2:	41 e0       	ldi	r20, 0x01	; 1
    39e4:	50 e0       	ldi	r21, 0x00	; 0
    39e6:	be 01       	movw	r22, r28
    39e8:	6d 5e       	subi	r22, 0xED	; 237
    39ea:	7f 4f       	sbci	r23, 0xFF	; 255
    39ec:	c8 01       	movw	r24, r16
    39ee:	1b d4       	rcall	.+2102   	; 0x4226 <_ZN11EthernetUDP4readEPhj>
    39f0:	8b 89       	ldd	r24, Y+19	; 0x13
            if ((len & LABEL_COMPRESSION_MASK) == 0)
    39f2:	98 2f       	mov	r25, r24
    39f4:	90 7c       	andi	r25, 0xC0	; 192
    39f6:	59 f4       	brne	.+22     	; 0x3a0e <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1be>
            {
                // It's just a normal label
                if (len > 0)
    39f8:	88 23       	and	r24, r24
    39fa:	79 f0       	breq	.+30     	; 0x3a1a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1ca>
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
    39fc:	8b 89       	ldd	r24, Y+19	; 0x13
    39fe:	9f ef       	ldi	r25, 0xFF	; 255
    3a00:	98 0f       	add	r25, r24
    3a02:	9b 8b       	std	Y+19, r25	; 0x13
    3a04:	88 23       	and	r24, r24
    3a06:	31 f0       	breq	.+12     	; 0x3a14 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1c4>
                    {
                        iUdp.read(); // we don't care about the returned byte
    3a08:	c8 01       	movw	r24, r16
    3a0a:	e5 d3       	rcall	.+1994   	; 0x41d6 <_ZN11EthernetUDP4readEv>
                if (len > 0)
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
    3a0c:	f7 cf       	rjmp	.-18     	; 0x39fc <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1ac>
                // says that a name is either a sequence of labels ended with a
                // 0 length octet or a pointer or a sequence of labels ending in
                // a pointer.  Either way, when we get here we're at the end of
                // the name
                // Skip over the pointer
                iUdp.read(); // we don't care about the returned byte
    3a0e:	c8 01       	movw	r24, r16
    3a10:	e2 d3       	rcall	.+1988   	; 0x41d6 <_ZN11EthernetUDP4readEv>
    3a12:	1b 8a       	std	Y+19, r1	; 0x13
                // And set len so that we drop out of the name loop
                len = 0;
    3a14:	8b 89       	ldd	r24, Y+19	; 0x13
            }
        } while (len != 0);
    3a16:	81 11       	cpse	r24, r1
    3a18:	e4 cf       	rjmp	.-56     	; 0x39e2 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x192>

        // Check the type and class
        uint16_t answerType;
        uint16_t answerClass;
        iUdp.read((uint8_t*)&answerType, sizeof(answerType));
    3a1a:	42 e0       	ldi	r20, 0x02	; 2
    3a1c:	50 e0       	ldi	r21, 0x00	; 0
    3a1e:	be 01       	movw	r22, r28
    3a20:	61 5f       	subi	r22, 0xF1	; 241
    3a22:	7f 4f       	sbci	r23, 0xFF	; 255
        iUdp.read((uint8_t*)&answerClass, sizeof(answerClass));
    3a24:	c8 01       	movw	r24, r16
    3a26:	ff d3       	rcall	.+2046   	; 0x4226 <_ZN11EthernetUDP4readEPhj>
    3a28:	42 e0       	ldi	r20, 0x02	; 2
    3a2a:	50 e0       	ldi	r21, 0x00	; 0
    3a2c:	be 01       	movw	r22, r28
    3a2e:	63 5f       	subi	r22, 0xF3	; 243
    3a30:	7f 4f       	sbci	r23, 0xFF	; 255

        // Ignore the Time-To-Live as we don't do any caching
        for (int i =0; i < TTL_SIZE; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    3a32:	c8 01       	movw	r24, r16
    3a34:	f8 d3       	rcall	.+2032   	; 0x4226 <_ZN11EthernetUDP4readEPhj>
    3a36:	c8 01       	movw	r24, r16
    3a38:	ce d3       	rcall	.+1948   	; 0x41d6 <_ZN11EthernetUDP4readEv>
    3a3a:	c8 01       	movw	r24, r16
    3a3c:	cc d3       	rcall	.+1944   	; 0x41d6 <_ZN11EthernetUDP4readEv>
    3a3e:	c8 01       	movw	r24, r16
    3a40:	ca d3       	rcall	.+1940   	; 0x41d6 <_ZN11EthernetUDP4readEv>
    3a42:	c8 01       	movw	r24, r16
    3a44:	c8 d3       	rcall	.+1936   	; 0x41d6 <_ZN11EthernetUDP4readEv>
    3a46:	42 e0       	ldi	r20, 0x02	; 2
    3a48:	50 e0       	ldi	r21, 0x00	; 0
        }

        // And read out the length of this answer
        // Don't need header_flags anymore, so we can reuse it here
        iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));
    3a4a:	be 01       	movw	r22, r28
    3a4c:	6f 5e       	subi	r22, 0xEF	; 239
    3a4e:	7f 4f       	sbci	r23, 0xFF	; 255
    3a50:	c8 01       	movw	r24, r16
    3a52:	e9 d3       	rcall	.+2002   	; 0x4226 <_ZN11EthernetUDP4readEPhj>
    3a54:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a56:	98 89       	ldd	r25, Y+16	; 0x10
    3a58:	81 15       	cp	r24, r1

        if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) )
    3a5a:	91 40       	sbci	r25, 0x01	; 1
    3a5c:	49 f4       	brne	.+18     	; 0x3a70 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x220>
    3a5e:	ed 84       	ldd	r14, Y+13	; 0x0d
    3a60:	fe 84       	ldd	r15, Y+14	; 0x0e
    3a62:	fe 24       	eor	r15, r14
    3a64:	ef 24       	eor	r14, r15
    3a66:	fe 24       	eor	r15, r14
    3a68:	81 e0       	ldi	r24, 0x01	; 1
    3a6a:	e8 16       	cp	r14, r24
    3a6c:	f1 04       	cpc	r15, r1
    3a6e:	19 f0       	breq	.+6      	; 0x3a76 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x226>
    3a70:	e1 2c       	mov	r14, r1
    3a72:	f1 2c       	mov	r15, r1
    3a74:	14 c0       	rjmp	.+40     	; 0x3a9e <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x24e>
    3a76:	89 89       	ldd	r24, Y+17	; 0x11
        {
            if (htons(header_flags) != 4)
    3a78:	9a 89       	ldd	r25, Y+18	; 0x12
    3a7a:	81 15       	cp	r24, r1
    3a7c:	94 40       	sbci	r25, 0x04	; 4
    3a7e:	39 f0       	breq	.+14     	; 0x3a8e <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x23e>
    3a80:	c8 01       	movw	r24, r16
            {
                // It's a weird size
                // Mark the entire packet as read
                iUdp.flush();
    3a82:	66 d3       	rcall	.+1740   	; 0x4150 <_ZN11EthernetUDP5flushEv>
    3a84:	47 ef       	ldi	r20, 0xF7	; 247
                return -9;//INVALID_RESPONSE;
    3a86:	e4 2e       	mov	r14, r20
    3a88:	ff 24       	eor	r15, r15
    3a8a:	fa 94       	dec	r15
    3a8c:	28 c0       	rjmp	.+80     	; 0x3ade <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    3a8e:	b1 01       	movw	r22, r2

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    3a90:	6e 5f       	subi	r22, 0xFE	; 254
    3a92:	7f 4f       	sbci	r23, 0xFF	; 255
    3a94:	44 e0       	ldi	r20, 0x04	; 4
            }
            iUdp.read(aAddress.raw_address(), 4);
    3a96:	50 e0       	ldi	r21, 0x00	; 0
    3a98:	c8 01       	movw	r24, r16
    3a9a:	c5 d3       	rcall	.+1930   	; 0x4226 <_ZN11EthernetUDP4readEPhj>
    3a9c:	20 c0       	rjmp	.+64     	; 0x3ade <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
            return SUCCESS;
    3a9e:	89 89       	ldd	r24, Y+17	; 0x11
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    3aa0:	9a 89       	ldd	r25, Y+18	; 0x12
    3aa2:	98 27       	eor	r25, r24
    3aa4:	89 27       	eor	r24, r25
    3aa6:	98 27       	eor	r25, r24
    3aa8:	e8 16       	cp	r14, r24
    3aaa:	f9 06       	cpc	r15, r25
    3aac:	30 f4       	brcc	.+12     	; 0x3aba <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x26a>
    3aae:	c8 01       	movw	r24, r16
            {
                iUdp.read(); // we don't care about the returned byte
    3ab0:	92 d3       	rcall	.+1828   	; 0x41d6 <_ZN11EthernetUDP4readEv>
    3ab2:	ff ef       	ldi	r31, 0xFF	; 255
    3ab4:	ef 1a       	sub	r14, r31
            return SUCCESS;
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    3ab6:	ff 0a       	sbc	r15, r31
    3ab8:	f2 cf       	rjmp	.-28     	; 0x3a9e <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x24e>
    3aba:	2f ef       	ldi	r18, 0xFF	; 255
    3abc:	a2 1a       	sub	r10, r18
    // Now we're up to the bit we're interested in, the answer
    // There might be more than one answer (although we'll just use the first
    // type A answer) and some authority and additional resource records but
    // we're going to ignore all of them.

    for (uint16_t i =0; i < answerCount; i++)
    3abe:	b2 0a       	sbc	r11, r18
    3ac0:	ca 14       	cp	r12, r10
    3ac2:	db 04       	cpc	r13, r11
    3ac4:	09 f0       	breq	.+2      	; 0x3ac8 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x278>
    3ac6:	8d cf       	rjmp	.-230    	; 0x39e2 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x192>
    3ac8:	c8 01       	movw	r24, r16
    3aca:	42 d3       	rcall	.+1668   	; 0x4150 <_ZN11EthernetUDP5flushEv>
            }
        }
    }

    // Mark the entire packet as read
    iUdp.flush();
    3acc:	36 ef       	ldi	r19, 0xF6	; 246
    3ace:	e3 2e       	mov	r14, r19
    3ad0:	ff 24       	eor	r15, r15

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
    3ad2:	fa 94       	dec	r15
    3ad4:	04 c0       	rjmp	.+8      	; 0x3ade <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    3ad6:	8d ef       	ldi	r24, 0xFD	; 253
    3ad8:	e8 2e       	mov	r14, r24
    3ada:	ff 24       	eor	r15, r15
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    {
        return TRUNCATED;
    3adc:	fa 94       	dec	r15
    3ade:	c7 01       	movw	r24, r14
    3ae0:	63 96       	adiw	r28, 0x13	; 19
    3ae2:	0f b6       	in	r0, 0x3f	; 63
    // Mark the entire packet as read
    iUdp.flush();

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
}
    3ae4:	f8 94       	cli
    3ae6:	de bf       	out	0x3e, r29	; 62
    3ae8:	0f be       	out	0x3f, r0	; 63
    3aea:	cd bf       	out	0x3d, r28	; 61
    3aec:	df 91       	pop	r29
    3aee:	cf 91       	pop	r28
    3af0:	1f 91       	pop	r17
    3af2:	0f 91       	pop	r16
    3af4:	ff 90       	pop	r15
    3af6:	ef 90       	pop	r14
    3af8:	df 90       	pop	r13
    3afa:	cf 90       	pop	r12
    3afc:	bf 90       	pop	r11
    3afe:	af 90       	pop	r10
    3b00:	9f 90       	pop	r9
    3b02:	8f 90       	pop	r8
    3b04:	7f 90       	pop	r7
    3b06:	6f 90       	pop	r6
    3b08:	5f 90       	pop	r5
    3b0a:	4f 90       	pop	r4
    3b0c:	3f 90       	pop	r3
    3b0e:	2f 90       	pop	r2
    3b10:	08 95       	ret

00003b12 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>:
    3b12:	8f 92       	push	r8
    3b14:	9f 92       	push	r9
    3b16:	af 92       	push	r10
        return 0;
    }
}

int DNSClient::getHostByName(const char* aHostname, IPAddress& aResult)
{
    3b18:	bf 92       	push	r11
    3b1a:	cf 92       	push	r12
    3b1c:	df 92       	push	r13
    3b1e:	ef 92       	push	r14
    3b20:	ff 92       	push	r15
    3b22:	0f 93       	push	r16
    3b24:	1f 93       	push	r17
    3b26:	cf 93       	push	r28
    3b28:	df 93       	push	r29
    3b2a:	00 d0       	rcall	.+0      	; 0x3b2c <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x1a>
    3b2c:	00 d0       	rcall	.+0      	; 0x3b2e <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x1c>
    3b2e:	00 d0       	rcall	.+0      	; 0x3b30 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x1e>
    3b30:	cd b7       	in	r28, 0x3d	; 61
    3b32:	de b7       	in	r29, 0x3e	; 62
    3b34:	7c 01       	movw	r14, r24
    3b36:	4b 01       	movw	r8, r22
    3b38:	5a 01       	movw	r10, r20
    int ret =0;

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
    3b3a:	9e dd       	rcall	.-1220   	; 0x3678 <_ZN9DNSClient9inet_atonEPKcR9IPAddress>
    3b3c:	8c 01       	movw	r16, r24
    3b3e:	89 2b       	or	r24, r25
    3b40:	09 f0       	breq	.+2      	; 0x3b44 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x32>
    3b42:	57 c0       	rjmp	.+174    	; 0x3bf2 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xe0>
        // It is, our work here is done
        return 1;
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    3b44:	f7 01       	movw	r30, r14
    3b46:	42 81       	ldd	r20, Z+2	; 0x02
    3b48:	53 81       	ldd	r21, Z+3	; 0x03
    3b4a:	64 81       	ldd	r22, Z+4	; 0x04
    3b4c:	75 81       	ldd	r23, Z+5	; 0x05
    3b4e:	80 91 1d 0a 	lds	r24, 0x0A1D	; 0x800a1d <_ZL11INADDR_NONE+0x2>
    3b52:	90 91 1e 0a 	lds	r25, 0x0A1E	; 0x800a1e <_ZL11INADDR_NONE+0x3>
    3b56:	a0 91 1f 0a 	lds	r26, 0x0A1F	; 0x800a1f <_ZL11INADDR_NONE+0x4>
    3b5a:	b0 91 20 0a 	lds	r27, 0x0A20	; 0x800a20 <_ZL11INADDR_NONE+0x5>
    3b5e:	48 17       	cp	r20, r24
    3b60:	59 07       	cpc	r21, r25
    3b62:	6a 07       	cpc	r22, r26
    3b64:	7b 07       	cpc	r23, r27
    3b66:	09 f4       	brne	.+2      	; 0x3b6a <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x58>
    3b68:	47 c0       	rjmp	.+142    	; 0x3bf8 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xe6>
    {
        return INVALID_SERVER;
    }
	
    // Find a socket to use
    if (iUdp.begin(1024+(millis() & 0xF)) == 1)
    3b6a:	0e 94 11 30 	call	0x6022	; 0x6022 <millis>
    3b6e:	67 01       	movw	r12, r14
    3b70:	f8 e0       	ldi	r31, 0x08	; 8
    3b72:	cf 0e       	add	r12, r31
    3b74:	d1 1c       	adc	r13, r1
    3b76:	6f 70       	andi	r22, 0x0F	; 15
    3b78:	77 27       	eor	r23, r23
    3b7a:	7c 5f       	subi	r23, 0xFC	; 252
    3b7c:	c6 01       	movw	r24, r12
    3b7e:	89 d3       	rcall	.+1810   	; 0x4292 <_ZN11EthernetUDP5beginEj>
    3b80:	81 30       	cpi	r24, 0x01	; 1
    3b82:	09 f0       	breq	.+2      	; 0x3b86 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x74>
    3b84:	3b c0       	rjmp	.+118    	; 0x3bfc <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xea>
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    3b86:	85 ea       	ldi	r24, 0xA5	; 165
    3b88:	98 e0       	ldi	r25, 0x08	; 8
    3b8a:	9a 83       	std	Y+2, r25	; 0x02
    3b8c:	89 83       	std	Y+1, r24	; 0x01
    3b8e:	f7 01       	movw	r30, r14
    3b90:	82 81       	ldd	r24, Z+2	; 0x02
    3b92:	93 81       	ldd	r25, Z+3	; 0x03
    3b94:	a4 81       	ldd	r26, Z+4	; 0x04
    3b96:	b5 81       	ldd	r27, Z+5	; 0x05
    3b98:	8b 83       	std	Y+3, r24	; 0x03
    3b9a:	9c 83       	std	Y+4, r25	; 0x04
    3b9c:	ad 83       	std	Y+5, r26	; 0x05
    3b9e:	be 83       	std	Y+6, r27	; 0x06
        // Try up to three times
        int retries = 0;
//        while ((retries < 3) && (ret <= 0))
        {
            // Send DNS request
            ret = iUdp.beginPacket(iDNSServer, DNS_PORT);
    3ba0:	45 e3       	ldi	r20, 0x35	; 53
    3ba2:	50 e0       	ldi	r21, 0x00	; 0
    3ba4:	be 01       	movw	r22, r28
    3ba6:	6f 5f       	subi	r22, 0xFF	; 255
    3ba8:	7f 4f       	sbci	r23, 0xFF	; 255
    3baa:	c6 01       	movw	r24, r12
    3bac:	f7 d2       	rcall	.+1518   	; 0x419c <_ZN11EthernetUDP11beginPacketE9IPAddressj>
            if (ret != 0)
    3bae:	89 2b       	or	r24, r25
    3bb0:	19 f4       	brne	.+6      	; 0x3bb8 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xa6>
    3bb2:	00 e0       	ldi	r16, 0x00	; 0
    3bb4:	10 e0       	ldi	r17, 0x00	; 0
            {
                // Now output the request data
                ret = BuildRequest(aHostname);
    3bb6:	1a c0       	rjmp	.+52     	; 0x3bec <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xda>
    3bb8:	b4 01       	movw	r22, r8
    3bba:	c7 01       	movw	r24, r14
                if (ret != 0)
    3bbc:	a8 dd       	rcall	.-1200   	; 0x370e <_ZN9DNSClient12BuildRequestEPKc>
    3bbe:	89 2b       	or	r24, r25
                {
                    // And finally send the request
                    ret = iUdp.endPacket();
    3bc0:	c1 f3       	breq	.-16     	; 0x3bb2 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xa0>
    3bc2:	c6 01       	movw	r24, r12
    3bc4:	f2 d2       	rcall	.+1508   	; 0x41aa <_ZN11EthernetUDP9endPacketEv>
                    if (ret != 0)
    3bc6:	89 2b       	or	r24, r25
    3bc8:	a1 f3       	breq	.-24     	; 0x3bb2 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xa0>
    3bca:	83 e0       	ldi	r24, 0x03	; 3
    3bcc:	88 2e       	mov	r8, r24
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
                        {
                            ret = ProcessResponse(5000, aResult);
    3bce:	91 2c       	mov	r9, r1
    3bd0:	a5 01       	movw	r20, r10
    3bd2:	68 e8       	ldi	r22, 0x88	; 136
    3bd4:	73 e1       	ldi	r23, 0x13	; 19
    3bd6:	c7 01       	movw	r24, r14
    3bd8:	3b de       	rcall	.-906    	; 0x3850 <_ZN9DNSClient15ProcessResponseEjR9IPAddress>
    3bda:	8c 01       	movw	r16, r24
    3bdc:	21 e0       	ldi	r18, 0x01	; 1
    3bde:	82 1a       	sub	r8, r18
    3be0:	91 08       	sbc	r9, r1
                    if (ret != 0)
                    {
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
    3be2:	21 f0       	breq	.+8      	; 0x3bec <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xda>
    3be4:	0f 3f       	cpi	r16, 0xFF	; 255
    3be6:	ff ef       	ldi	r31, 0xFF	; 255
    3be8:	1f 07       	cpc	r17, r31
            }
            retries++;
        }

        // We're done with the socket now
        iUdp.stop();
    3bea:	91 f3       	breq	.-28     	; 0x3bd0 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xbe>
    3bec:	c6 01       	movw	r24, r12
    3bee:	c2 d2       	rcall	.+1412   	; 0x4174 <_ZN11EthernetUDP4stopEv>
    3bf0:	05 c0       	rjmp	.+10     	; 0x3bfc <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xea>

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
    {
        // It is, our work here is done
        return 1;
    3bf2:	01 e0       	ldi	r16, 0x01	; 1
    3bf4:	10 e0       	ldi	r17, 0x00	; 0
    3bf6:	02 c0       	rjmp	.+4      	; 0x3bfc <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xea>
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    {
        return INVALID_SERVER;
    3bf8:	0e ef       	ldi	r16, 0xFE	; 254
    3bfa:	1f ef       	ldi	r17, 0xFF	; 255
        // We're done with the socket now
        iUdp.stop();
    }

    return ret;
}
    3bfc:	c8 01       	movw	r24, r16
    3bfe:	26 96       	adiw	r28, 0x06	; 6
    3c00:	0f b6       	in	r0, 0x3f	; 63
    3c02:	f8 94       	cli
    3c04:	de bf       	out	0x3e, r29	; 62
    3c06:	0f be       	out	0x3f, r0	; 63
    3c08:	cd bf       	out	0x3d, r28	; 61
    3c0a:	df 91       	pop	r29
    3c0c:	cf 91       	pop	r28
    3c0e:	1f 91       	pop	r17
    3c10:	0f 91       	pop	r16
    3c12:	ff 90       	pop	r15
    3c14:	ef 90       	pop	r14
    3c16:	df 90       	pop	r13
    3c18:	cf 90       	pop	r12
    3c1a:	bf 90       	pop	r11
    3c1c:	af 90       	pop	r10
    3c1e:	9f 90       	pop	r9
    3c20:	8f 90       	pop	r8
    3c22:	08 95       	ret

00003c24 <_ZN10W5500Class8writeGAREPh>:
    return _dnsDomainName;
}

char* EthernetClass::hostName(){
    return _hostName;
}
    3c24:	24 e0       	ldi	r18, 0x04	; 4
    3c26:	30 e0       	ldi	r19, 0x00	; 0
    3c28:	ac 01       	movw	r20, r24
    3c2a:	64 e0       	ldi	r22, 0x04	; 4
    3c2c:	81 e0       	ldi	r24, 0x01	; 1
    3c2e:	90 e0       	ldi	r25, 0x00	; 0
    3c30:	35 c6       	rjmp	.+3178   	; 0x489c <_ZN10W5500Class5writeEjhPKhj>

00003c32 <_ZN10W5500Class9writeSUBREPh>:
    3c32:	24 e0       	ldi	r18, 0x04	; 4
    3c34:	30 e0       	ldi	r19, 0x00	; 0
    3c36:	ac 01       	movw	r20, r24
    3c38:	64 e0       	ldi	r22, 0x04	; 4
    3c3a:	85 e0       	ldi	r24, 0x05	; 5
    3c3c:	90 e0       	ldi	r25, 0x00	; 0
    3c3e:	2e c6       	rjmp	.+3164   	; 0x489c <_ZN10W5500Class5writeEjhPKhj>

00003c40 <_ZN10W5500Class9writeSHAREPh>:
    3c40:	26 e0       	ldi	r18, 0x06	; 6
    3c42:	30 e0       	ldi	r19, 0x00	; 0
    3c44:	ac 01       	movw	r20, r24
    3c46:	64 e0       	ldi	r22, 0x04	; 4
    3c48:	89 e0       	ldi	r24, 0x09	; 9
    3c4a:	90 e0       	ldi	r25, 0x00	; 0
    3c4c:	27 c6       	rjmp	.+3150   	; 0x489c <_ZN10W5500Class5writeEjhPKhj>

00003c4e <_ZN10W5500Class9writeSIPREPh>:
    3c4e:	24 e0       	ldi	r18, 0x04	; 4
    3c50:	30 e0       	ldi	r19, 0x00	; 0
    3c52:	ac 01       	movw	r20, r24
    3c54:	64 e0       	ldi	r22, 0x04	; 4
    3c56:	8f e0       	ldi	r24, 0x0F	; 15
    3c58:	90 e0       	ldi	r25, 0x00	; 0
    3c5a:	20 c6       	rjmp	.+3136   	; 0x489c <_ZN10W5500Class5writeEjhPKhj>

00003c5c <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_>:
    3c5c:	8f 92       	push	r8
    3c5e:	9f 92       	push	r9
    3c60:	af 92       	push	r10
    3c62:	bf 92       	push	r11
    3c64:	cf 92       	push	r12
    3c66:	df 92       	push	r13
    3c68:	ef 92       	push	r14
    3c6a:	ff 92       	push	r15
    3c6c:	0f 93       	push	r16
    3c6e:	1f 93       	push	r17
    3c70:	cf 93       	push	r28
    3c72:	df 93       	push	r29
    3c74:	4c 01       	movw	r8, r24
    3c76:	5b 01       	movw	r10, r22
    3c78:	6a 01       	movw	r12, r20
    3c7a:	e9 01       	movw	r28, r18
    3c7c:	fc 01       	movw	r30, r24
    3c7e:	64 85       	ldd	r22, Z+12	; 0x0c
    3c80:	8b e5       	ldi	r24, 0x5B	; 91
    3c82:	9a e0       	ldi	r25, 0x0A	; 10
    3c84:	53 d6       	rcall	.+3238   	; 0x492c <_ZN10W5500Class4initEh>
    3c86:	c5 01       	movw	r24, r10
    3c88:	db df       	rcall	.-74     	; 0x3c40 <_ZN10W5500Class9writeSHAREPh>
    3c8a:	c6 01       	movw	r24, r12
    3c8c:	02 96       	adiw	r24, 0x02	; 2
    3c8e:	df df       	rcall	.-66     	; 0x3c4e <_ZN10W5500Class9writeSIPREPh>
    3c90:	c8 01       	movw	r24, r16
    3c92:	02 96       	adiw	r24, 0x02	; 2
    3c94:	c7 df       	rcall	.-114    	; 0x3c24 <_ZN10W5500Class8writeGAREPh>
    3c96:	c7 01       	movw	r24, r14
    3c98:	02 96       	adiw	r24, 0x02	; 2
    3c9a:	cb df       	rcall	.-106    	; 0x3c32 <_ZN10W5500Class9writeSUBREPh>
    3c9c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c9e:	9b 81       	ldd	r25, Y+3	; 0x03
    3ca0:	ac 81       	ldd	r26, Y+4	; 0x04
    3ca2:	bd 81       	ldd	r27, Y+5	; 0x05
    3ca4:	f4 01       	movw	r30, r8
    3ca6:	82 83       	std	Z+2, r24	; 0x02
    3ca8:	93 83       	std	Z+3, r25	; 0x03
    3caa:	a4 83       	std	Z+4, r26	; 0x04
    3cac:	b5 83       	std	Z+5, r27	; 0x05
    3cae:	df 91       	pop	r29
    3cb0:	cf 91       	pop	r28
    3cb2:	1f 91       	pop	r17
    3cb4:	0f 91       	pop	r16
    3cb6:	ff 90       	pop	r15
    3cb8:	ef 90       	pop	r14
    3cba:	df 90       	pop	r13
    3cbc:	cf 90       	pop	r12
    3cbe:	bf 90       	pop	r11
    3cc0:	af 90       	pop	r10
    3cc2:	9f 90       	pop	r9
    3cc4:	8f 90       	pop	r8
    3cc6:	08 95       	ret

00003cc8 <_ZN13EthernetClass11dnsServerIPEv>:
    3cc8:	25 ea       	ldi	r18, 0xA5	; 165
    3cca:	38 e0       	ldi	r19, 0x08	; 8
    3ccc:	fc 01       	movw	r30, r24
    3cce:	31 83       	std	Z+1, r19	; 0x01
    3cd0:	20 83       	st	Z, r18
    3cd2:	fb 01       	movw	r30, r22
    3cd4:	42 81       	ldd	r20, Z+2	; 0x02
    3cd6:	53 81       	ldd	r21, Z+3	; 0x03
    3cd8:	64 81       	ldd	r22, Z+4	; 0x04
    3cda:	75 81       	ldd	r23, Z+5	; 0x05
    3cdc:	fc 01       	movw	r30, r24
    3cde:	42 83       	std	Z+2, r20	; 0x02
    3ce0:	53 83       	std	Z+3, r21	; 0x03
    3ce2:	64 83       	std	Z+4, r22	; 0x04
    3ce4:	75 83       	std	Z+5, r23	; 0x05
    3ce6:	08 95       	ret

00003ce8 <_GLOBAL__sub_I__ZN13EthernetClass6_stateE>:

EthernetClass Ethernet;
    3ce8:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    3cea:	00 e0       	ldi	r16, 0x00	; 0
    3cec:	20 e0       	ldi	r18, 0x00	; 0
    3cee:	40 e0       	ldi	r20, 0x00	; 0
    3cf0:	60 e0       	ldi	r22, 0x00	; 0
    3cf2:	8e e3       	ldi	r24, 0x3E	; 62
    3cf4:	9a e0       	ldi	r25, 0x0A	; 10
    3cf6:	0e 94 90 2e 	call	0x5d20	; 0x5d20 <_ZN9IPAddressC1Ehhhh>
  uint8_t w5500_cspin;

  static uint8_t _state[MAX_SOCK_NUM];
  static uint16_t _server_port[MAX_SOCK_NUM];

  EthernetClass() { _dhcp = NULL; w5500_cspin = 10; }
    3cfa:	81 e2       	ldi	r24, 0x21	; 33
    3cfc:	9a e0       	ldi	r25, 0x0A	; 10
    3cfe:	0e 94 86 2e 	call	0x5d0c	; 0x5d0c <_ZN9IPAddressC1Ev>
    3d02:	e1 e2       	ldi	r30, 0x21	; 33
    3d04:	fa e0       	ldi	r31, 0x0A	; 10
    3d06:	13 86       	std	Z+11, r1	; 0x0b
    3d08:	12 86       	std	Z+10, r1	; 0x0a
    3d0a:	8a e0       	ldi	r24, 0x0A	; 10
    3d0c:	84 87       	std	Z+12, r24	; 0x0c
    3d0e:	0f 91       	pop	r16
    3d10:	08 95       	ret

00003d12 <_ZN14EthernetClientneERKS_>:
uint16_t EthernetClient::_srcport = 1024;

EthernetClient::EthernetClient() : _sock(MAX_SOCK_NUM) {
}

EthernetClient::EthernetClient(uint8_t sock) : _sock(sock) {
    3d12:	dc 01       	movw	r26, r24
    3d14:	ed 91       	ld	r30, X+
    3d16:	fc 91       	ld	r31, X
    3d18:	02 8c       	ldd	r0, Z+26	; 0x1a
    3d1a:	f3 8d       	ldd	r31, Z+27	; 0x1b
    3d1c:	e0 2d       	mov	r30, r0
    3d1e:	09 95       	icall
    3d20:	91 e0       	ldi	r25, 0x01	; 1
    3d22:	89 27       	eor	r24, r25
    3d24:	08 95       	ret

00003d26 <_ZN14EthernetClient5writeEh>:
    3d26:	cf 93       	push	r28
    3d28:	df 93       	push	r29
    3d2a:	1f 92       	push	r1
    3d2c:	cd b7       	in	r28, 0x3d	; 61
    3d2e:	de b7       	in	r29, 0x3e	; 62
    3d30:	69 83       	std	Y+1, r22	; 0x01
    3d32:	dc 01       	movw	r26, r24
    3d34:	ed 91       	ld	r30, X+
    3d36:	fc 91       	ld	r31, X
    3d38:	02 80       	ldd	r0, Z+2	; 0x02
    3d3a:	f3 81       	ldd	r31, Z+3	; 0x03
    3d3c:	e0 2d       	mov	r30, r0
    3d3e:	41 e0       	ldi	r20, 0x01	; 1
    3d40:	50 e0       	ldi	r21, 0x00	; 0
    3d42:	be 01       	movw	r22, r28
    3d44:	6f 5f       	subi	r22, 0xFF	; 255
    3d46:	7f 4f       	sbci	r23, 0xFF	; 255
    3d48:	09 95       	icall
    3d4a:	0f 90       	pop	r0
    3d4c:	df 91       	pop	r29
    3d4e:	cf 91       	pop	r28
    3d50:	08 95       	ret

00003d52 <_ZN14EthernetClientcvbEv>:
    3d52:	21 e0       	ldi	r18, 0x01	; 1
    3d54:	fc 01       	movw	r30, r24
    3d56:	84 85       	ldd	r24, Z+12	; 0x0c
    3d58:	88 30       	cpi	r24, 0x08	; 8
    3d5a:	09 f4       	brne	.+2      	; 0x3d5e <_ZN14EthernetClientcvbEv+0xc>
    3d5c:	20 e0       	ldi	r18, 0x00	; 0
    3d5e:	82 2f       	mov	r24, r18
    3d60:	08 95       	ret

00003d62 <_ZN14EthernetClienteqERKS_>:
    3d62:	fc 01       	movw	r30, r24
    3d64:	94 85       	ldd	r25, Z+12	; 0x0c
    3d66:	fb 01       	movw	r30, r22
    3d68:	84 85       	ldd	r24, Z+12	; 0x0c
    3d6a:	98 13       	cpse	r25, r24
    3d6c:	03 c0       	rjmp	.+6      	; 0x3d74 <_ZN14EthernetClienteqERKS_+0x12>
    3d6e:	81 e0       	ldi	r24, 0x01	; 1
    3d70:	98 30       	cpi	r25, 0x08	; 8
    3d72:	09 f4       	brne	.+2      	; 0x3d76 <_ZN14EthernetClienteqERKS_+0x14>
    3d74:	80 e0       	ldi	r24, 0x00	; 0
    3d76:	08 95       	ret

00003d78 <_ZN14EthernetClient7connectEPKcj>:
    3d78:	cf 92       	push	r12
    3d7a:	df 92       	push	r13
    3d7c:	ef 92       	push	r14
    3d7e:	ff 92       	push	r15
    3d80:	0f 93       	push	r16
    3d82:	1f 93       	push	r17
    3d84:	cf 93       	push	r28
    3d86:	df 93       	push	r29
    3d88:	cd b7       	in	r28, 0x3d	; 61
    3d8a:	de b7       	in	r29, 0x3e	; 62
    3d8c:	af 97       	sbiw	r28, 0x2f	; 47
    3d8e:	0f b6       	in	r0, 0x3f	; 63
    3d90:	f8 94       	cli
    3d92:	de bf       	out	0x3e, r29	; 62
    3d94:	0f be       	out	0x3f, r0	; 63
    3d96:	cd bf       	out	0x3d, r28	; 61
    3d98:	8c 01       	movw	r16, r24
    3d9a:	6b 01       	movw	r12, r22
    3d9c:	7a 01       	movw	r14, r20
    3d9e:	ce 01       	movw	r24, r28
    3da0:	01 96       	adiw	r24, 0x01	; 1
    3da2:	0e 94 86 2e 	call	0x5d0c	; 0x5d0c <_ZN9IPAddressC1Ev>
    3da6:	ce 01       	movw	r24, r28
    3da8:	09 96       	adiw	r24, 0x09	; 9
    3daa:	f3 d2       	rcall	.+1510   	; 0x4392 <_ZN11EthernetUDPC1Ev>
    3dac:	ce 01       	movw	r24, r28
    3dae:	8a 96       	adiw	r24, 0x2a	; 42
    3db0:	0e 94 86 2e 	call	0x5d0c	; 0x5d0c <_ZN9IPAddressC1Ev>
    3db4:	61 e2       	ldi	r22, 0x21	; 33
    3db6:	7a e0       	ldi	r23, 0x0A	; 10
    3db8:	ce 01       	movw	r24, r28
    3dba:	84 96       	adiw	r24, 0x24	; 36
    3dbc:	85 df       	rcall	.-246    	; 0x3cc8 <_ZN13EthernetClass11dnsServerIPEv>
    3dbe:	be 01       	movw	r22, r28
    3dc0:	6c 5d       	subi	r22, 0xDC	; 220
    3dc2:	7f 4f       	sbci	r23, 0xFF	; 255
    3dc4:	ce 01       	movw	r24, r28
    3dc6:	01 96       	adiw	r24, 0x01	; 1
    3dc8:	4a dc       	rcall	.-1900   	; 0x365e <_ZN9DNSClient5beginERK9IPAddress>
    3dca:	ae 01       	movw	r20, r28
    3dcc:	46 5d       	subi	r20, 0xD6	; 214
    3dce:	5f 4f       	sbci	r21, 0xFF	; 255
    3dd0:	b6 01       	movw	r22, r12
    3dd2:	ce 01       	movw	r24, r28
    3dd4:	01 96       	adiw	r24, 0x01	; 1
    3dd6:	9d de       	rcall	.-710    	; 0x3b12 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>
    3dd8:	81 30       	cpi	r24, 0x01	; 1
    3dda:	91 05       	cpc	r25, r1
    3ddc:	c1 f4       	brne	.+48     	; 0x3e0e <_ZN14EthernetClient7connectEPKcj+0x96>
    3dde:	d8 01       	movw	r26, r16
    3de0:	ed 91       	ld	r30, X+
    3de2:	fc 91       	ld	r31, X
    3de4:	06 84       	ldd	r0, Z+14	; 0x0e
    3de6:	f7 85       	ldd	r31, Z+15	; 0x0f
    3de8:	e0 2d       	mov	r30, r0
    3dea:	85 ea       	ldi	r24, 0xA5	; 165
    3dec:	98 e0       	ldi	r25, 0x08	; 8
    3dee:	9d a3       	std	Y+37, r25	; 0x25
    3df0:	8c a3       	std	Y+36, r24	; 0x24
    3df2:	8c a5       	ldd	r24, Y+44	; 0x2c
    3df4:	9d a5       	ldd	r25, Y+45	; 0x2d
    3df6:	ae a5       	ldd	r26, Y+46	; 0x2e
    3df8:	bf a5       	ldd	r27, Y+47	; 0x2f
    3dfa:	8e a3       	std	Y+38, r24	; 0x26
    3dfc:	9f a3       	std	Y+39, r25	; 0x27
    3dfe:	a8 a7       	std	Y+40, r26	; 0x28
    3e00:	b9 a7       	std	Y+41, r27	; 0x29
    3e02:	a7 01       	movw	r20, r14
    3e04:	be 01       	movw	r22, r28
    3e06:	6c 5d       	subi	r22, 0xDC	; 220
    3e08:	7f 4f       	sbci	r23, 0xFF	; 255
    3e0a:	c8 01       	movw	r24, r16
    3e0c:	09 95       	icall
    3e0e:	af 96       	adiw	r28, 0x2f	; 47
    3e10:	0f b6       	in	r0, 0x3f	; 63
    3e12:	f8 94       	cli
    3e14:	de bf       	out	0x3e, r29	; 62
    3e16:	0f be       	out	0x3f, r0	; 63
    3e18:	cd bf       	out	0x3d, r28	; 61
    3e1a:	df 91       	pop	r29
    3e1c:	cf 91       	pop	r28
    3e1e:	1f 91       	pop	r17
    3e20:	0f 91       	pop	r16
    3e22:	ff 90       	pop	r15
    3e24:	ef 90       	pop	r14
    3e26:	df 90       	pop	r13
    3e28:	cf 90       	pop	r12
    3e2a:	08 95       	ret

00003e2c <_ZN14EthernetClient5writeEPKhj>:
    3e2c:	0f 93       	push	r16
    3e2e:	1f 93       	push	r17
    3e30:	cf 93       	push	r28
    3e32:	df 93       	push	r29
    3e34:	8c 01       	movw	r16, r24
    3e36:	d4 2f       	mov	r29, r20
    3e38:	c5 2f       	mov	r28, r21
    3e3a:	fc 01       	movw	r30, r24
    3e3c:	84 85       	ldd	r24, Z+12	; 0x0c
    3e3e:	88 30       	cpi	r24, 0x08	; 8
    3e40:	41 f4       	brne	.+16     	; 0x3e52 <_ZN14EthernetClient5writeEPKhj+0x26>
    3e42:	81 e0       	ldi	r24, 0x01	; 1
    3e44:	90 e0       	ldi	r25, 0x00	; 0
    3e46:	f8 01       	movw	r30, r16
    3e48:	93 83       	std	Z+3, r25	; 0x03
    3e4a:	82 83       	std	Z+2, r24	; 0x02
    3e4c:	80 e0       	ldi	r24, 0x00	; 0
    3e4e:	90 e0       	ldi	r25, 0x00	; 0
    3e50:	05 c0       	rjmp	.+10     	; 0x3e5c <_ZN14EthernetClient5writeEPKhj+0x30>
    3e52:	cf d3       	rcall	.+1950   	; 0x45f2 <_Z4sendhPKhj>
    3e54:	89 2b       	or	r24, r25
    3e56:	a9 f3       	breq	.-22     	; 0x3e42 <_ZN14EthernetClient5writeEPKhj+0x16>
    3e58:	8d 2f       	mov	r24, r29
    3e5a:	9c 2f       	mov	r25, r28
    3e5c:	df 91       	pop	r29
    3e5e:	cf 91       	pop	r28
    3e60:	1f 91       	pop	r17
    3e62:	0f 91       	pop	r16
    3e64:	08 95       	ret

00003e66 <_ZN14EthernetClient9availableEv>:
    3e66:	fc 01       	movw	r30, r24
    3e68:	64 85       	ldd	r22, Z+12	; 0x0c
    3e6a:	68 30       	cpi	r22, 0x08	; 8
    3e6c:	19 f0       	breq	.+6      	; 0x3e74 <_ZN14EthernetClient9availableEv+0xe>
    3e6e:	8b e5       	ldi	r24, 0x5B	; 91
    3e70:	9a e0       	ldi	r25, 0x0A	; 10
    3e72:	d0 c5       	rjmp	.+2976   	; 0x4a14 <_ZN10W5500Class17getRXReceivedSizeEh>
    3e74:	80 e0       	ldi	r24, 0x00	; 0
    3e76:	90 e0       	ldi	r25, 0x00	; 0
    3e78:	08 95       	ret

00003e7a <_ZN14EthernetClient4readEv>:
    3e7a:	cf 93       	push	r28
    3e7c:	df 93       	push	r29
    3e7e:	1f 92       	push	r1
    3e80:	cd b7       	in	r28, 0x3d	; 61
    3e82:	de b7       	in	r29, 0x3e	; 62
    3e84:	41 e0       	ldi	r20, 0x01	; 1
    3e86:	50 e0       	ldi	r21, 0x00	; 0
    3e88:	be 01       	movw	r22, r28
    3e8a:	6f 5f       	subi	r22, 0xFF	; 255
    3e8c:	7f 4f       	sbci	r23, 0xFF	; 255
    3e8e:	fc 01       	movw	r30, r24
    3e90:	84 85       	ldd	r24, Z+12	; 0x0c
    3e92:	f7 d3       	rcall	.+2030   	; 0x4682 <_Z4recvhPhi>
    3e94:	18 16       	cp	r1, r24
    3e96:	19 06       	cpc	r1, r25
    3e98:	1c f4       	brge	.+6      	; 0x3ea0 <_ZN14EthernetClient4readEv+0x26>
    3e9a:	89 81       	ldd	r24, Y+1	; 0x01
    3e9c:	90 e0       	ldi	r25, 0x00	; 0
    3e9e:	02 c0       	rjmp	.+4      	; 0x3ea4 <_ZN14EthernetClient4readEv+0x2a>
    3ea0:	8f ef       	ldi	r24, 0xFF	; 255
    3ea2:	9f ef       	ldi	r25, 0xFF	; 255
    3ea4:	0f 90       	pop	r0
    3ea6:	df 91       	pop	r29
    3ea8:	cf 91       	pop	r28
    3eaa:	08 95       	ret

00003eac <_ZN14EthernetClient4readEPhj>:
    3eac:	fc 01       	movw	r30, r24
    3eae:	84 85       	ldd	r24, Z+12	; 0x0c
    3eb0:	e8 c3       	rjmp	.+2000   	; 0x4682 <_Z4recvhPhi>

00003eb2 <_ZN14EthernetClient4peekEv>:
    3eb2:	0f 93       	push	r16
    3eb4:	1f 93       	push	r17
    3eb6:	cf 93       	push	r28
    3eb8:	df 93       	push	r29
    3eba:	1f 92       	push	r1
    3ebc:	cd b7       	in	r28, 0x3d	; 61
    3ebe:	de b7       	in	r29, 0x3e	; 62
    3ec0:	8c 01       	movw	r16, r24
    3ec2:	dc 01       	movw	r26, r24
    3ec4:	ed 91       	ld	r30, X+
    3ec6:	fc 91       	ld	r31, X
    3ec8:	00 84       	ldd	r0, Z+8	; 0x08
    3eca:	f1 85       	ldd	r31, Z+9	; 0x09
    3ecc:	e0 2d       	mov	r30, r0
    3ece:	09 95       	icall
    3ed0:	89 2b       	or	r24, r25
    3ed2:	49 f0       	breq	.+18     	; 0x3ee6 <_ZN14EthernetClient4peekEv+0x34>
    3ed4:	be 01       	movw	r22, r28
    3ed6:	6f 5f       	subi	r22, 0xFF	; 255
    3ed8:	7f 4f       	sbci	r23, 0xFF	; 255
    3eda:	f8 01       	movw	r30, r16
    3edc:	84 85       	ldd	r24, Z+12	; 0x0c
    3ede:	12 d4       	rcall	.+2084   	; 0x4704 <_Z4peekhPh>
    3ee0:	89 81       	ldd	r24, Y+1	; 0x01
    3ee2:	90 e0       	ldi	r25, 0x00	; 0
    3ee4:	02 c0       	rjmp	.+4      	; 0x3eea <_ZN14EthernetClient4peekEv+0x38>
    3ee6:	8f ef       	ldi	r24, 0xFF	; 255
    3ee8:	9f ef       	ldi	r25, 0xFF	; 255
    3eea:	0f 90       	pop	r0
    3eec:	df 91       	pop	r29
    3eee:	cf 91       	pop	r28
    3ef0:	1f 91       	pop	r17
    3ef2:	0f 91       	pop	r16
    3ef4:	08 95       	ret

00003ef6 <_ZN14EthernetClient5flushEv>:
    3ef6:	fc 01       	movw	r30, r24
    3ef8:	84 85       	ldd	r24, Z+12	; 0x0c
    3efa:	11 c4       	rjmp	.+2082   	; 0x471e <_Z5flushh>

00003efc <_ZN14EthernetClientC1Ev>:
    3efc:	fc 01       	movw	r30, r24
    3efe:	13 82       	std	Z+3, r1	; 0x03
    3f00:	12 82       	std	Z+2, r1	; 0x02
    3f02:	88 ee       	ldi	r24, 0xE8	; 232
    3f04:	93 e0       	ldi	r25, 0x03	; 3
    3f06:	a0 e0       	ldi	r26, 0x00	; 0
    3f08:	b0 e0       	ldi	r27, 0x00	; 0
    3f0a:	84 83       	std	Z+4, r24	; 0x04
    3f0c:	95 83       	std	Z+5, r25	; 0x05
    3f0e:	a6 83       	std	Z+6, r26	; 0x06
    3f10:	b7 83       	std	Z+7, r27	; 0x07
    3f12:	81 e2       	ldi	r24, 0x21	; 33
    3f14:	98 e0       	ldi	r25, 0x08	; 8
    3f16:	91 83       	std	Z+1, r25	; 0x01
    3f18:	80 83       	st	Z, r24
    3f1a:	88 e0       	ldi	r24, 0x08	; 8
    3f1c:	84 87       	std	Z+12, r24	; 0x0c
    3f1e:	08 95       	ret

00003f20 <_ZN14EthernetClient6statusEv>:
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
}

uint8_t EthernetClient::status() {
  if (_sock == MAX_SOCK_NUM) return SnSR::CLOSED;
    3f20:	fc 01       	movw	r30, r24
    3f22:	64 85       	ldd	r22, Z+12	; 0x0c
    3f24:	68 30       	cpi	r22, 0x08	; 8
    3f26:	39 f0       	breq	.+14     	; 0x3f36 <_ZN14EthernetClient6statusEv+0x16>

extern W5500Class w5500;

uint8_t W5500Class::readSn(SOCKET _s, uint16_t _addr) {
    uint8_t cntl_byte = (_s<<5)+0x08;
    return read(_addr, cntl_byte);
    3f28:	62 95       	swap	r22
    3f2a:	66 0f       	add	r22, r22
    3f2c:	60 7e       	andi	r22, 0xE0	; 224
    3f2e:	68 5f       	subi	r22, 0xF8	; 248
    3f30:	83 e0       	ldi	r24, 0x03	; 3
    3f32:	90 e0       	ldi	r25, 0x00	; 0
    3f34:	df c4       	rjmp	.+2494   	; 0x48f4 <_ZN10W5500Class4readEjh>
  return w5500.readSnSR(_sock);
}
    3f36:	80 e0       	ldi	r24, 0x00	; 0
    3f38:	08 95       	ret

00003f3a <_ZN14EthernetClient9connectedEv>:

  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
    3f3a:	cf 93       	push	r28
    3f3c:	df 93       	push	r29
  if (_sock == MAX_SOCK_NUM) return 0;
    3f3e:	fc 01       	movw	r30, r24
    3f40:	24 85       	ldd	r18, Z+12	; 0x0c
    3f42:	28 30       	cpi	r18, 0x08	; 8
    3f44:	c9 f0       	breq	.+50     	; 0x3f78 <_ZN14EthernetClient9connectedEv+0x3e>
    3f46:	ec 01       	movw	r28, r24
  
  uint8_t s = status();
    3f48:	eb df       	rcall	.-42     	; 0x3f20 <_ZN14EthernetClient6statusEv>
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
    3f4a:	84 31       	cpi	r24, 0x14	; 20
    3f4c:	81 f0       	breq	.+32     	; 0x3f6e <_ZN14EthernetClient9connectedEv+0x34>

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
  
  uint8_t s = status();
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    3f4e:	88 23       	and	r24, r24
    3f50:	71 f0       	breq	.+28     	; 0x3f6e <_ZN14EthernetClient9connectedEv+0x34>
    3f52:	88 31       	cpi	r24, 0x18	; 24
    3f54:	61 f0       	breq	.+24     	; 0x3f6e <_ZN14EthernetClient9connectedEv+0x34>
    (s == SnSR::CLOSE_WAIT && !available()));
    3f56:	8c 31       	cpi	r24, 0x1C	; 28
    3f58:	61 f4       	brne	.+24     	; 0x3f72 <_ZN14EthernetClient9connectedEv+0x38>
    3f5a:	e8 81       	ld	r30, Y
    3f5c:	f9 81       	ldd	r31, Y+1	; 0x01
    3f5e:	00 84       	ldd	r0, Z+8	; 0x08
    3f60:	f1 85       	ldd	r31, Z+9	; 0x09
    3f62:	e0 2d       	mov	r30, r0
    3f64:	ce 01       	movw	r24, r28
    3f66:	09 95       	icall
    3f68:	21 e0       	ldi	r18, 0x01	; 1
    3f6a:	89 2b       	or	r24, r25
    3f6c:	19 f4       	brne	.+6      	; 0x3f74 <_ZN14EthernetClient9connectedEv+0x3a>
    3f6e:	20 e0       	ldi	r18, 0x00	; 0
    3f70:	01 c0       	rjmp	.+2      	; 0x3f74 <_ZN14EthernetClient9connectedEv+0x3a>
    3f72:	21 e0       	ldi	r18, 0x01	; 1
    3f74:	82 2f       	mov	r24, r18
    3f76:	01 c0       	rjmp	.+2      	; 0x3f7a <_ZN14EthernetClient9connectedEv+0x40>
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
    3f78:	80 e0       	ldi	r24, 0x00	; 0
  
  uint8_t s = status();
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
}
    3f7a:	df 91       	pop	r29
    3f7c:	cf 91       	pop	r28
    3f7e:	08 95       	ret

00003f80 <_ZN14EthernetClient4stopEv>:

void EthernetClient::flush() {
  ::flush(_sock);
}

void EthernetClient::stop() {
    3f80:	cf 92       	push	r12
    3f82:	df 92       	push	r13
    3f84:	ef 92       	push	r14
    3f86:	ff 92       	push	r15
    3f88:	cf 93       	push	r28
    3f8a:	df 93       	push	r29
    3f8c:	ec 01       	movw	r28, r24
  if (_sock == MAX_SOCK_NUM)
    3f8e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3f90:	88 30       	cpi	r24, 0x08	; 8
    3f92:	69 f1       	breq	.+90     	; 0x3fee <_ZN14EthernetClient4stopEv+0x6e>
    return;

  // attempt to close the connection gracefully (send a FIN to other side)
  disconnect(_sock);
    3f94:	29 d3       	rcall	.+1618   	; 0x45e8 <_Z10disconnecth>
  unsigned long start = millis();
    3f96:	0e 94 11 30 	call	0x6022	; 0x6022 <millis>
    3f9a:	6b 01       	movw	r12, r22
    3f9c:	7c 01       	movw	r14, r24

  // wait a second for the connection to close
  while (status() != SnSR::CLOSED && millis() - start < 1000)
    3f9e:	ce 01       	movw	r24, r28
    3fa0:	bf df       	rcall	.-130    	; 0x3f20 <_ZN14EthernetClient6statusEv>
    3fa2:	88 23       	and	r24, r24
    3fa4:	a1 f0       	breq	.+40     	; 0x3fce <_ZN14EthernetClient4stopEv+0x4e>
    3fa6:	0e 94 11 30 	call	0x6022	; 0x6022 <millis>
    3faa:	dc 01       	movw	r26, r24
    3fac:	cb 01       	movw	r24, r22
    3fae:	8c 19       	sub	r24, r12
    3fb0:	9d 09       	sbc	r25, r13
    3fb2:	ae 09       	sbc	r26, r14
    3fb4:	bf 09       	sbc	r27, r15
    3fb6:	88 3e       	cpi	r24, 0xE8	; 232
    3fb8:	93 40       	sbci	r25, 0x03	; 3
    3fba:	a1 05       	cpc	r26, r1
    3fbc:	b1 05       	cpc	r27, r1
    3fbe:	38 f4       	brcc	.+14     	; 0x3fce <_ZN14EthernetClient4stopEv+0x4e>
    delay(1);
    3fc0:	61 e0       	ldi	r22, 0x01	; 1
    3fc2:	70 e0       	ldi	r23, 0x00	; 0
    3fc4:	80 e0       	ldi	r24, 0x00	; 0
    3fc6:	90 e0       	ldi	r25, 0x00	; 0
    3fc8:	0e 94 42 30 	call	0x6084	; 0x6084 <delay>

  // if it hasn't closed, close it forcefully
  if (status() != SnSR::CLOSED)
    3fcc:	e8 cf       	rjmp	.-48     	; 0x3f9e <_ZN14EthernetClient4stopEv+0x1e>
    3fce:	ce 01       	movw	r24, r28
    3fd0:	a7 df       	rcall	.-178    	; 0x3f20 <_ZN14EthernetClient6statusEv>
    3fd2:	88 23       	and	r24, r24
    close(_sock);
    3fd4:	11 f0       	breq	.+4      	; 0x3fda <_ZN14EthernetClient4stopEv+0x5a>
    3fd6:	8c 85       	ldd	r24, Y+12	; 0x0c
    3fd8:	96 d2       	rcall	.+1324   	; 0x4506 <_Z5closeh>

  EthernetClass::_server_port[_sock] = 0;
    3fda:	ec 85       	ldd	r30, Y+12	; 0x0c
    3fdc:	f0 e0       	ldi	r31, 0x00	; 0
    3fde:	ee 0f       	add	r30, r30
    3fe0:	ff 1f       	adc	r31, r31
    3fe2:	e2 5d       	subi	r30, 0xD2	; 210
    3fe4:	f5 4f       	sbci	r31, 0xF5	; 245
    3fe6:	11 82       	std	Z+1, r1	; 0x01
    3fe8:	10 82       	st	Z, r1
  _sock = MAX_SOCK_NUM;
    3fea:	88 e0       	ldi	r24, 0x08	; 8
    3fec:	8c 87       	std	Y+12, r24	; 0x0c
}
    3fee:	df 91       	pop	r29
    3ff0:	cf 91       	pop	r28
    3ff2:	ff 90       	pop	r15
    3ff4:	ef 90       	pop	r14
    3ff6:	df 90       	pop	r13
    3ff8:	cf 90       	pop	r12
    3ffa:	08 95       	ret

00003ffc <_ZN14EthernetClient7connectE9IPAddressj>:
  } else {
    return ret;
  }
}

int EthernetClient::connect(IPAddress ip, uint16_t port) {
    3ffc:	cf 92       	push	r12
    3ffe:	df 92       	push	r13
    4000:	ff 92       	push	r15
    4002:	0f 93       	push	r16
    4004:	1f 93       	push	r17
    4006:	cf 93       	push	r28
    4008:	df 93       	push	r29
  if (_sock != MAX_SOCK_NUM)
    400a:	fc 01       	movw	r30, r24
    400c:	24 85       	ldd	r18, Z+12	; 0x0c
    400e:	28 30       	cpi	r18, 0x08	; 8
    4010:	c1 f5       	brne	.+112    	; 0x4082 <_ZN14EthernetClient7connectE9IPAddressj+0x86>
    4012:	6a 01       	movw	r12, r20
    4014:	8b 01       	movw	r16, r22
    4016:	ec 01       	movw	r28, r24
    4018:	f1 2c       	mov	r15, r1
    401a:	6f 2d       	mov	r22, r15
    401c:	62 95       	swap	r22
    401e:	66 0f       	add	r22, r22
    4020:	60 7e       	andi	r22, 0xE0	; 224
    4022:	68 5f       	subi	r22, 0xF8	; 248
    4024:	83 e0       	ldi	r24, 0x03	; 3
    4026:	90 e0       	ldi	r25, 0x00	; 0
    4028:	65 d4       	rcall	.+2250   	; 0x48f4 <_ZN10W5500Class4readEjh>
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
    402a:	81 11       	cpse	r24, r1
    402c:	02 c0       	rjmp	.+4      	; 0x4032 <_ZN14EthernetClient7connectE9IPAddressj+0x36>
      _sock = i;
    402e:	fc 86       	std	Y+12, r15	; 0x0c
    4030:	07 c0       	rjmp	.+14     	; 0x4040 <_ZN14EthernetClient7connectE9IPAddressj+0x44>
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
    4032:	8b 7f       	andi	r24, 0xFB	; 251
    4034:	88 31       	cpi	r24, 0x18	; 24
    4036:	d9 f3       	breq	.-10     	; 0x402e <_ZN14EthernetClient7connectE9IPAddressj+0x32>
    4038:	f3 94       	inc	r15

int EthernetClient::connect(IPAddress ip, uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    403a:	f8 e0       	ldi	r31, 0x08	; 8
    403c:	ff 12       	cpse	r15, r31
    403e:	ed cf       	rjmp	.-38     	; 0x401a <_ZN14EthernetClient7connectE9IPAddressj+0x1e>
      _sock = i;
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
    4040:	8c 85       	ldd	r24, Y+12	; 0x0c
    4042:	88 30       	cpi	r24, 0x08	; 8
    4044:	f1 f0       	breq	.+60     	; 0x4082 <_ZN14EthernetClient7connectE9IPAddressj+0x86>
    return 0;

  _srcport++;
    4046:	20 91 71 01 	lds	r18, 0x0171	; 0x800171 <_ZN14EthernetClient8_srcportE>
    404a:	30 91 72 01 	lds	r19, 0x0172	; 0x800172 <_ZN14EthernetClient8_srcportE+0x1>
    404e:	2f 5f       	subi	r18, 0xFF	; 255
    4050:	3f 4f       	sbci	r19, 0xFF	; 255
  if (_srcport == 0) _srcport = 1024;
    4052:	11 f4       	brne	.+4      	; 0x4058 <_ZN14EthernetClient7connectE9IPAddressj+0x5c>
    4054:	20 e0       	ldi	r18, 0x00	; 0
    4056:	34 e0       	ldi	r19, 0x04	; 4
    4058:	30 93 72 01 	sts	0x0172, r19	; 0x800172 <_ZN14EthernetClient8_srcportE+0x1>
    405c:	20 93 71 01 	sts	0x0171, r18	; 0x800171 <_ZN14EthernetClient8_srcportE>
  socket(_sock, SnMR::TCP, _srcport, 0);
    4060:	40 91 71 01 	lds	r20, 0x0171	; 0x800171 <_ZN14EthernetClient8_srcportE>
    4064:	50 91 72 01 	lds	r21, 0x0172	; 0x800172 <_ZN14EthernetClient8_srcportE+0x1>
    4068:	20 e0       	ldi	r18, 0x00	; 0
    406a:	61 e0       	ldi	r22, 0x01	; 1
    406c:	57 d2       	rcall	.+1198   	; 0x451c <_Z6sockethhjh>

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    406e:	b8 01       	movw	r22, r16
    4070:	6e 5f       	subi	r22, 0xFE	; 254
    4072:	7f 4f       	sbci	r23, 0xFF	; 255

  if (!::connect(_sock, rawIPAddress(ip), port)) {
    4074:	a6 01       	movw	r20, r12
    4076:	8c 85       	ldd	r24, Y+12	; 0x0c
    4078:	84 d2       	rcall	.+1288   	; 0x4582 <_Z7connecthPhj>
    407a:	81 11       	cpse	r24, r1
    407c:	05 c0       	rjmp	.+10     	; 0x4088 <_ZN14EthernetClient7connectE9IPAddressj+0x8c>
    _sock = MAX_SOCK_NUM;
    407e:	88 e0       	ldi	r24, 0x08	; 8
    4080:	8c 87       	std	Y+12, r24	; 0x0c
    return 0;
    4082:	80 e0       	ldi	r24, 0x00	; 0
    4084:	90 e0       	ldi	r25, 0x00	; 0
  }

  while (status() != SnSR::ESTABLISHED) {
    4086:	0f c0       	rjmp	.+30     	; 0x40a6 <_ZN14EthernetClient7connectE9IPAddressj+0xaa>
    4088:	ce 01       	movw	r24, r28
    408a:	4a df       	rcall	.-364    	; 0x3f20 <_ZN14EthernetClient6statusEv>
    408c:	87 31       	cpi	r24, 0x17	; 23
    408e:	49 f0       	breq	.+18     	; 0x40a2 <_ZN14EthernetClient7connectE9IPAddressj+0xa6>
    delay(1);
    4090:	61 e0       	ldi	r22, 0x01	; 1
    4092:	70 e0       	ldi	r23, 0x00	; 0
    4094:	80 e0       	ldi	r24, 0x00	; 0
    4096:	90 e0       	ldi	r25, 0x00	; 0
    4098:	0e 94 42 30 	call	0x6084	; 0x6084 <delay>
    if (status() == SnSR::CLOSED) {
    409c:	ce 01       	movw	r24, r28
    409e:	40 df       	rcall	.-384    	; 0x3f20 <_ZN14EthernetClient6statusEv>
    40a0:	ec cf       	rjmp	.-40     	; 0x407a <_ZN14EthernetClient7connectE9IPAddressj+0x7e>
      _sock = MAX_SOCK_NUM;
      return 0;
    }
  }

  return 1;
    40a2:	81 e0       	ldi	r24, 0x01	; 1
    40a4:	90 e0       	ldi	r25, 0x00	; 0
}
    40a6:	df 91       	pop	r29
    40a8:	cf 91       	pop	r28
    40aa:	1f 91       	pop	r17
    40ac:	0f 91       	pop	r16
    40ae:	ff 90       	pop	r15
    40b0:	df 90       	pop	r13
    40b2:	cf 90       	pop	r12
    40b4:	08 95       	ret

000040b6 <_GLOBAL__sub_I__ZN14EthernetClient8_srcportE>:
  return _sock != MAX_SOCK_NUM;
}

bool EthernetClient::operator==(const EthernetClient& rhs) {
  return _sock == rhs._sock && _sock != MAX_SOCK_NUM && rhs._sock != MAX_SOCK_NUM;
}
    40b6:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    40b8:	00 e0       	ldi	r16, 0x00	; 0
    40ba:	20 e0       	ldi	r18, 0x00	; 0
    40bc:	40 e0       	ldi	r20, 0x00	; 0
    40be:	60 e0       	ldi	r22, 0x00	; 0
    40c0:	84 e4       	ldi	r24, 0x44	; 68
    40c2:	9a e0       	ldi	r25, 0x0A	; 10
    40c4:	0e 94 90 2e 	call	0x5d20	; 0x5d20 <_ZN9IPAddressC1Ehhhh>
    40c8:	0f 91       	pop	r16
    40ca:	08 95       	ret

000040cc <_GLOBAL__sub_I__ZN14EthernetServerC2Ej>:
      n += client.write(buffer, size);
    }
  }
  
  return n;
}
    40cc:	0f 93       	push	r16
    40ce:	00 e0       	ldi	r16, 0x00	; 0
    40d0:	20 e0       	ldi	r18, 0x00	; 0
    40d2:	40 e0       	ldi	r20, 0x00	; 0
    40d4:	60 e0       	ldi	r22, 0x00	; 0
    40d6:	8a e4       	ldi	r24, 0x4A	; 74
    40d8:	9a e0       	ldi	r25, 0x0A	; 10
    40da:	0e 94 90 2e 	call	0x5d20	; 0x5d20 <_ZN9IPAddressC1Ehhhh>
    40de:	0f 91       	pop	r16
    40e0:	08 95       	ret

000040e2 <_ZN3UDP14beginMulticastE9IPAddressj>:

class UDP : public Stream {

public:
  virtual uint8_t begin(uint16_t) =0;  // initialize, start listening on specified port. Returns 1 if successful, 0 if there are no sockets available to use
  virtual uint8_t beginMulticast(IPAddress, uint16_t) { return 0; }  // initialize, start listening on specified multicast IP address and port. Returns 1 if successful, 0 on failure
    40e2:	80 e0       	ldi	r24, 0x00	; 0
    40e4:	08 95       	ret

000040e6 <_ZN11EthernetUDP4readEPcj>:
  // Read up to len bytes from the current packet and place them into buffer
  // Returns the number of bytes read, or 0 if none are available
  virtual int read(unsigned char* buffer, size_t len);
  // Read up to len characters from the current packet and place them into buffer
  // Returns the number of characters read, or 0 if none are available
  virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
    40e6:	dc 01       	movw	r26, r24
    40e8:	ed 91       	ld	r30, X+
    40ea:	fc 91       	ld	r31, X
    40ec:	04 8c       	ldd	r0, Z+28	; 0x1c
    40ee:	f5 8d       	ldd	r31, Z+29	; 0x1d
    40f0:	e0 2d       	mov	r30, r0
    40f2:	09 94       	ijmp

000040f4 <_ZN11EthernetUDP8remoteIPEv>:
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    40f4:	25 ea       	ldi	r18, 0xA5	; 165
    40f6:	38 e0       	ldi	r19, 0x08	; 8
    40f8:	fc 01       	movw	r30, r24
    40fa:	31 83       	std	Z+1, r19	; 0x01
    40fc:	20 83       	st	Z, r18
    40fe:	fb 01       	movw	r30, r22
    4100:	41 89       	ldd	r20, Z+17	; 0x11
    4102:	52 89       	ldd	r21, Z+18	; 0x12
    4104:	63 89       	ldd	r22, Z+19	; 0x13
    4106:	74 89       	ldd	r23, Z+20	; 0x14
    4108:	fc 01       	movw	r30, r24
    410a:	42 83       	std	Z+2, r20	; 0x02
    410c:	53 83       	std	Z+3, r21	; 0x03
    410e:	64 83       	std	Z+4, r22	; 0x04
    4110:	75 83       	std	Z+5, r23	; 0x05
  // Return the next byte from the current packet without moving on to the next byte
  virtual int peek();
  virtual void flush();	// Finish reading the current packet

  // Return the IP address of the host who sent the current incoming packet
  virtual IPAddress remoteIP() { return _remoteIP; };
    4112:	08 95       	ret

00004114 <_ZN11EthernetUDP10remotePortEv>:
  // Return the port of the host who sent the current incoming packet
  virtual uint16_t remotePort() { return _remotePort; };
    4114:	fc 01       	movw	r30, r24
    4116:	85 89       	ldd	r24, Z+21	; 0x15
    4118:	96 89       	ldd	r25, Z+22	; 0x16
    411a:	08 95       	ret

0000411c <_ZN11EthernetUDP9availableEv>:

/* return number of bytes available in the current packet,
   will return zero if parsePacket hasn't been called yet */
int EthernetUDP::available() {
  return _remaining;
}
    411c:	fc 01       	movw	r30, r24
    411e:	81 8d       	ldd	r24, Z+25	; 0x19
    4120:	92 8d       	ldd	r25, Z+26	; 0x1a
    4122:	08 95       	ret

00004124 <_ZN11EthernetUDP5writeEh>:
{
  return sendUDP(_sock);
}

size_t EthernetUDP::write(uint8_t byte)
{
    4124:	cf 93       	push	r28
    4126:	df 93       	push	r29
    4128:	1f 92       	push	r1
    412a:	cd b7       	in	r28, 0x3d	; 61
    412c:	de b7       	in	r29, 0x3e	; 62
    412e:	69 83       	std	Y+1, r22	; 0x01
  return write(&byte, 1);
    4130:	dc 01       	movw	r26, r24
    4132:	ed 91       	ld	r30, X+
    4134:	fc 91       	ld	r31, X
    4136:	02 80       	ldd	r0, Z+2	; 0x02
    4138:	f3 81       	ldd	r31, Z+3	; 0x03
    413a:	e0 2d       	mov	r30, r0
    413c:	41 e0       	ldi	r20, 0x01	; 1
    413e:	50 e0       	ldi	r21, 0x00	; 0
    4140:	be 01       	movw	r22, r28
    4142:	6f 5f       	subi	r22, 0xFF	; 255
    4144:	7f 4f       	sbci	r23, 0xFF	; 255
    4146:	09 95       	icall
}
    4148:	0f 90       	pop	r0
    414a:	df 91       	pop	r29
    414c:	cf 91       	pop	r28
    414e:	08 95       	ret

00004150 <_ZN11EthernetUDP5flushEv>:
  ::peek(_sock, &b);
  return b;
}

void EthernetUDP::flush()
{
    4150:	cf 93       	push	r28
    4152:	df 93       	push	r29
    4154:	ec 01       	movw	r28, r24
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5500 always behaves :)

  while (_remaining)
    4156:	89 8d       	ldd	r24, Y+25	; 0x19
    4158:	9a 8d       	ldd	r25, Y+26	; 0x1a
    415a:	89 2b       	or	r24, r25
    415c:	41 f0       	breq	.+16     	; 0x416e <_ZN11EthernetUDP5flushEv+0x1e>
  {
    read();
    415e:	e8 81       	ld	r30, Y
    4160:	f9 81       	ldd	r31, Y+1	; 0x01
    4162:	02 84       	ldd	r0, Z+10	; 0x0a
    4164:	f3 85       	ldd	r31, Z+11	; 0x0b
    4166:	e0 2d       	mov	r30, r0
    4168:	ce 01       	movw	r24, r28
    416a:	09 95       	icall
{
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5500 always behaves :)

  while (_remaining)
    416c:	f4 cf       	rjmp	.-24     	; 0x4156 <_ZN11EthernetUDP5flushEv+0x6>
  {
    read();
  }
}
    416e:	df 91       	pop	r29
    4170:	cf 91       	pop	r28
    4172:	08 95       	ret

00004174 <_ZN11EthernetUDP4stopEv>:
  return _remaining;
}

/* Release any resources being used by this EthernetUDP instance */
void EthernetUDP::stop()
{
    4174:	cf 93       	push	r28
    4176:	df 93       	push	r29
    4178:	ec 01       	movw	r28, r24
  if (_sock == MAX_SOCK_NUM)
    417a:	8c 85       	ldd	r24, Y+12	; 0x0c
    417c:	88 30       	cpi	r24, 0x08	; 8
    417e:	59 f0       	breq	.+22     	; 0x4196 <_ZN11EthernetUDP4stopEv+0x22>
    return;

  close(_sock);
    4180:	c2 d1       	rcall	.+900    	; 0x4506 <_Z5closeh>

  EthernetClass::_server_port[_sock] = 0;
    4182:	ec 85       	ldd	r30, Y+12	; 0x0c
    4184:	f0 e0       	ldi	r31, 0x00	; 0
    4186:	ee 0f       	add	r30, r30
    4188:	ff 1f       	adc	r31, r31
    418a:	e2 5d       	subi	r30, 0xD2	; 210
    418c:	f5 4f       	sbci	r31, 0xF5	; 245
    418e:	11 82       	std	Z+1, r1	; 0x01
    4190:	10 82       	st	Z, r1
  _sock = MAX_SOCK_NUM;
    4192:	88 e0       	ldi	r24, 0x08	; 8
    4194:	8c 87       	std	Y+12, r24	; 0x0c
}
    4196:	df 91       	pop	r29
    4198:	cf 91       	pop	r28
    419a:	08 95       	ret

0000419c <_ZN11EthernetUDP11beginPacketE9IPAddressj>:
  }
}

int EthernetUDP::beginPacket(IPAddress ip, uint16_t port)
{
  _offset = 0;
    419c:	fc 01       	movw	r30, r24
    419e:	10 8e       	std	Z+24, r1	; 0x18
    41a0:	17 8a       	std	Z+23, r1	; 0x17

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    41a2:	6e 5f       	subi	r22, 0xFE	; 254
    41a4:	7f 4f       	sbci	r23, 0xFF	; 255
  return startUDP(_sock, rawIPAddress(ip), port);
    41a6:	84 85       	ldd	r24, Z+12	; 0x0c
    41a8:	e6 c2       	rjmp	.+1484   	; 0x4776 <_Z8startUDPhPhj>

000041aa <_ZN11EthernetUDP9endPacketEv>:
}

int EthernetUDP::endPacket()
{
  return sendUDP(_sock);
    41aa:	fc 01       	movw	r30, r24
    41ac:	84 85       	ldd	r24, Z+12	; 0x0c
    41ae:	06 c3       	rjmp	.+1548   	; 0x47bc <_Z7sendUDPh>

000041b0 <_ZN11EthernetUDP5writeEPKhj>:
{
  return write(&byte, 1);
}

size_t EthernetUDP::write(const uint8_t *buffer, size_t size)
{
    41b0:	cf 93       	push	r28
    41b2:	df 93       	push	r29
    41b4:	ec 01       	movw	r28, r24
    41b6:	9a 01       	movw	r18, r20
  uint16_t bytes_written = bufferData(_sock, _offset, buffer, size);
    41b8:	8f 89       	ldd	r24, Y+23	; 0x17
    41ba:	98 8d       	ldd	r25, Y+24	; 0x18
    41bc:	ab 01       	movw	r20, r22
    41be:	bc 01       	movw	r22, r24
    41c0:	8c 85       	ldd	r24, Y+12	; 0x0c
    41c2:	ae d2       	rcall	.+1372   	; 0x4720 <_Z10bufferDatahjPKhj>
  _offset += bytes_written;
    41c4:	2f 89       	ldd	r18, Y+23	; 0x17
    41c6:	38 8d       	ldd	r19, Y+24	; 0x18
    41c8:	28 0f       	add	r18, r24
    41ca:	39 1f       	adc	r19, r25
    41cc:	38 8f       	std	Y+24, r19	; 0x18
    41ce:	2f 8b       	std	Y+23, r18	; 0x17
  return bytes_written;
}
    41d0:	df 91       	pop	r29
    41d2:	cf 91       	pop	r28
    41d4:	08 95       	ret

000041d6 <_ZN11EthernetUDP4readEv>:
  // There aren't any packets available
  return 0;
}

int EthernetUDP::read()
{
    41d6:	0f 93       	push	r16
    41d8:	1f 93       	push	r17
    41da:	cf 93       	push	r28
    41dc:	df 93       	push	r29
    41de:	1f 92       	push	r1
    41e0:	cd b7       	in	r28, 0x3d	; 61
    41e2:	de b7       	in	r29, 0x3e	; 62
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
    41e4:	fc 01       	movw	r30, r24
    41e6:	21 8d       	ldd	r18, Z+25	; 0x19
    41e8:	32 8d       	ldd	r19, Z+26	; 0x1a
    41ea:	23 2b       	or	r18, r19
    41ec:	59 f0       	breq	.+22     	; 0x4204 <_ZN11EthernetUDP4readEv+0x2e>
    41ee:	8c 01       	movw	r16, r24
    41f0:	41 e0       	ldi	r20, 0x01	; 1
    41f2:	50 e0       	ldi	r21, 0x00	; 0
    41f4:	be 01       	movw	r22, r28
    41f6:	6f 5f       	subi	r22, 0xFF	; 255
    41f8:	7f 4f       	sbci	r23, 0xFF	; 255
    41fa:	84 85       	ldd	r24, Z+12	; 0x0c
    41fc:	42 d2       	rcall	.+1156   	; 0x4682 <_Z4recvhPhi>
    41fe:	18 16       	cp	r1, r24
    4200:	19 06       	cpc	r1, r25
    4202:	1c f0       	brlt	.+6      	; 0x420a <_ZN11EthernetUDP4readEv+0x34>
    _remaining--;
    return byte;
  }

  // If we get here, there's no data available
  return -1;
    4204:	8f ef       	ldi	r24, 0xFF	; 255
    4206:	9f ef       	ldi	r25, 0xFF	; 255
    4208:	08 c0       	rjmp	.+16     	; 0x421a <_ZN11EthernetUDP4readEv+0x44>
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
  {
    // We read things without any problems
    _remaining--;
    420a:	f8 01       	movw	r30, r16
    420c:	81 8d       	ldd	r24, Z+25	; 0x19
    420e:	92 8d       	ldd	r25, Z+26	; 0x1a
    4210:	01 97       	sbiw	r24, 0x01	; 1
    4212:	92 8f       	std	Z+26, r25	; 0x1a
    4214:	81 8f       	std	Z+25, r24	; 0x19
    return byte;
    4216:	89 81       	ldd	r24, Y+1	; 0x01
    4218:	90 e0       	ldi	r25, 0x00	; 0
  }

  // If we get here, there's no data available
  return -1;
}
    421a:	0f 90       	pop	r0
    421c:	df 91       	pop	r29
    421e:	cf 91       	pop	r28
    4220:	1f 91       	pop	r17
    4222:	0f 91       	pop	r16
    4224:	08 95       	ret

00004226 <_ZN11EthernetUDP4readEPhj>:

int EthernetUDP::read(unsigned char* buffer, size_t len)
{
    4226:	cf 93       	push	r28
    4228:	df 93       	push	r29

  if (_remaining > 0)
    422a:	fc 01       	movw	r30, r24
    422c:	21 8d       	ldd	r18, Z+25	; 0x19
    422e:	32 8d       	ldd	r19, Z+26	; 0x1a
    4230:	21 15       	cp	r18, r1
    4232:	31 05       	cpc	r19, r1
    4234:	19 f4       	brne	.+6      	; 0x423c <_ZN11EthernetUDP4readEPhj+0x16>
    }

  }

  // If we get here, there's no data available or recv failed
  return -1;
    4236:	8f ef       	ldi	r24, 0xFF	; 255
    4238:	9f ef       	ldi	r25, 0xFF	; 255
    423a:	10 c0       	rjmp	.+32     	; 0x425c <_ZN11EthernetUDP4readEPhj+0x36>
    423c:	ec 01       	movw	r28, r24
  if (_remaining > 0)
  {

    int got;

    if (_remaining <= len)
    423e:	42 17       	cp	r20, r18
    4240:	53 07       	cpc	r21, r19
    4242:	08 f0       	brcs	.+2      	; 0x4246 <_ZN11EthernetUDP4readEPhj+0x20>
    {
      // data should fit in the buffer
      got = recv(_sock, buffer, _remaining);
    4244:	a9 01       	movw	r20, r18
    }
    else
    {
      // too much data for the buffer, 
      // grab as much as will fit
      got = recv(_sock, buffer, len);
    4246:	8c 85       	ldd	r24, Y+12	; 0x0c
    4248:	1c d2       	rcall	.+1080   	; 0x4682 <_Z4recvhPhi>
    }

    if (got > 0)
    424a:	18 16       	cp	r1, r24
    424c:	19 06       	cpc	r1, r25
    424e:	9c f7       	brge	.-26     	; 0x4236 <_ZN11EthernetUDP4readEPhj+0x10>
    {
      _remaining -= got;
    4250:	29 8d       	ldd	r18, Y+25	; 0x19
    4252:	3a 8d       	ldd	r19, Y+26	; 0x1a
    4254:	28 1b       	sub	r18, r24
    4256:	39 0b       	sbc	r19, r25
    4258:	3a 8f       	std	Y+26, r19	; 0x1a
    425a:	29 8f       	std	Y+25, r18	; 0x19
  }

  // If we get here, there's no data available or recv failed
  return -1;

}
    425c:	df 91       	pop	r29
    425e:	cf 91       	pop	r28
    4260:	08 95       	ret

00004262 <_ZN11EthernetUDP4peekEv>:

int EthernetUDP::peek()
{
    4262:	cf 93       	push	r28
    4264:	df 93       	push	r29
    4266:	1f 92       	push	r1
    4268:	cd b7       	in	r28, 0x3d	; 61
    426a:	de b7       	in	r29, 0x3e	; 62
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
    426c:	fc 01       	movw	r30, r24
    426e:	21 8d       	ldd	r18, Z+25	; 0x19
    4270:	32 8d       	ldd	r19, Z+26	; 0x1a
    4272:	23 2b       	or	r18, r19
    4274:	41 f0       	breq	.+16     	; 0x4286 <_ZN11EthernetUDP4peekEv+0x24>
    return -1;
  ::peek(_sock, &b);
    4276:	be 01       	movw	r22, r28
    4278:	6f 5f       	subi	r22, 0xFF	; 255
    427a:	7f 4f       	sbci	r23, 0xFF	; 255
    427c:	84 85       	ldd	r24, Z+12	; 0x0c
    427e:	42 d2       	rcall	.+1156   	; 0x4704 <_Z4peekhPh>
  return b;
    4280:	89 81       	ldd	r24, Y+1	; 0x01
    4282:	90 e0       	ldi	r25, 0x00	; 0
    4284:	02 c0       	rjmp	.+4      	; 0x428a <_ZN11EthernetUDP4peekEv+0x28>
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
    return -1;
    4286:	8f ef       	ldi	r24, 0xFF	; 255
    4288:	9f ef       	ldi	r25, 0xFF	; 255
  ::peek(_sock, &b);
  return b;
}
    428a:	0f 90       	pop	r0
    428c:	df 91       	pop	r29
    428e:	cf 91       	pop	r28
    4290:	08 95       	ret

00004292 <_ZN11EthernetUDP5beginEj>:

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
    4292:	ef 92       	push	r14
    4294:	ff 92       	push	r15
    4296:	1f 93       	push	r17
    4298:	cf 93       	push	r28
    429a:	df 93       	push	r29
  if (_sock != MAX_SOCK_NUM)
    429c:	fc 01       	movw	r30, r24
    429e:	24 85       	ldd	r18, Z+12	; 0x0c
    42a0:	28 30       	cpi	r18, 0x08	; 8
    42a2:	11 f0       	breq	.+4      	; 0x42a8 <_ZN11EthernetUDP5beginEj+0x16>
    return 0;
    42a4:	80 e0       	ldi	r24, 0x00	; 0
    42a6:	20 c0       	rjmp	.+64     	; 0x42e8 <_ZN11EthernetUDP5beginEj+0x56>
    42a8:	7b 01       	movw	r14, r22
    42aa:	ec 01       	movw	r28, r24
    42ac:	10 e0       	ldi	r17, 0x00	; 0
    42ae:	61 2f       	mov	r22, r17
    42b0:	62 95       	swap	r22
    42b2:	66 0f       	add	r22, r22
    42b4:	60 7e       	andi	r22, 0xE0	; 224
    42b6:	68 5f       	subi	r22, 0xF8	; 248
    42b8:	83 e0       	ldi	r24, 0x03	; 3
    42ba:	90 e0       	ldi	r25, 0x00	; 0
    42bc:	1b d3       	rcall	.+1590   	; 0x48f4 <_ZN10W5500Class4readEjh>

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
    42be:	81 11       	cpse	r24, r1
    42c0:	02 c0       	rjmp	.+4      	; 0x42c6 <_ZN11EthernetUDP5beginEj+0x34>
      _sock = i;
    42c2:	1c 87       	std	Y+12, r17	; 0x0c
    42c4:	05 c0       	rjmp	.+10     	; 0x42d0 <_ZN11EthernetUDP5beginEj+0x3e>
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
    42c6:	88 31       	cpi	r24, 0x18	; 24
    42c8:	e1 f3       	breq	.-8      	; 0x42c2 <_ZN11EthernetUDP5beginEj+0x30>
    42ca:	1f 5f       	subi	r17, 0xFF	; 255
/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    42cc:	18 30       	cpi	r17, 0x08	; 8
    42ce:	79 f7       	brne	.-34     	; 0x42ae <_ZN11EthernetUDP5beginEj+0x1c>
      _sock = i;
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
    42d0:	8c 85       	ldd	r24, Y+12	; 0x0c
    42d2:	88 30       	cpi	r24, 0x08	; 8
    42d4:	39 f3       	breq	.-50     	; 0x42a4 <_ZN11EthernetUDP5beginEj+0x12>
    return 0;

  _port = port;
    42d6:	fe 86       	std	Y+14, r15	; 0x0e
    42d8:	ed 86       	std	Y+13, r14	; 0x0d
  _remaining = 0;
    42da:	1a 8e       	std	Y+26, r1	; 0x1a
    42dc:	19 8e       	std	Y+25, r1	; 0x19
  socket(_sock, SnMR::UDP, _port, 0);
    42de:	20 e0       	ldi	r18, 0x00	; 0
    42e0:	a7 01       	movw	r20, r14
    42e2:	62 e0       	ldi	r22, 0x02	; 2
    42e4:	1b d1       	rcall	.+566    	; 0x451c <_Z6sockethhjh>

  return 1;
    42e6:	81 e0       	ldi	r24, 0x01	; 1
}
    42e8:	df 91       	pop	r29
    42ea:	cf 91       	pop	r28
    42ec:	1f 91       	pop	r17
    42ee:	ff 90       	pop	r15
    42f0:	ef 90       	pop	r14
    42f2:	08 95       	ret

000042f4 <_ZN11EthernetUDP11parsePacketEv>:
  _offset += bytes_written;
  return bytes_written;
}

int EthernetUDP::parsePacket()
{
    42f4:	0f 93       	push	r16
    42f6:	1f 93       	push	r17
    42f8:	cf 93       	push	r28
    42fa:	df 93       	push	r29
    42fc:	cd b7       	in	r28, 0x3d	; 61
    42fe:	de b7       	in	r29, 0x3e	; 62
    4300:	28 97       	sbiw	r28, 0x08	; 8
    4302:	0f b6       	in	r0, 0x3f	; 63
    4304:	f8 94       	cli
    4306:	de bf       	out	0x3e, r29	; 62
    4308:	0f be       	out	0x3f, r0	; 63
    430a:	cd bf       	out	0x3d, r28	; 61
    430c:	8c 01       	movw	r16, r24
  // discard any remaining bytes in the last packet
  flush();
    430e:	dc 01       	movw	r26, r24
    4310:	ed 91       	ld	r30, X+
    4312:	fc 91       	ld	r31, X
    4314:	06 80       	ldd	r0, Z+6	; 0x06
    4316:	f7 81       	ldd	r31, Z+7	; 0x07
    4318:	e0 2d       	mov	r30, r0
    431a:	09 95       	icall

  if (w5500.getRXReceivedSize(_sock) > 0)
    431c:	f8 01       	movw	r30, r16
    431e:	64 85       	ldd	r22, Z+12	; 0x0c
    4320:	8b e5       	ldi	r24, 0x5B	; 91
    4322:	9a e0       	ldi	r25, 0x0A	; 10
    4324:	77 d3       	rcall	.+1774   	; 0x4a14 <_ZN10W5500Class17getRXReceivedSizeEh>
    4326:	89 2b       	or	r24, r25
    4328:	39 f1       	breq	.+78     	; 0x4378 <_ZN11EthernetUDP11parsePacketEv+0x84>
  {
    //HACK - hand-parse the UDP packet using TCP recv method
    uint8_t tmpBuf[8];
    int ret =0; 
    //read 8 header bytes and get IP and port from it
    ret = recv(_sock,tmpBuf,8);
    432a:	48 e0       	ldi	r20, 0x08	; 8
    432c:	50 e0       	ldi	r21, 0x00	; 0
    432e:	be 01       	movw	r22, r28
    4330:	6f 5f       	subi	r22, 0xFF	; 255
    4332:	7f 4f       	sbci	r23, 0xFF	; 255
    4334:	d8 01       	movw	r26, r16
    4336:	1c 96       	adiw	r26, 0x0c	; 12
    4338:	8c 91       	ld	r24, X
    433a:	a3 d1       	rcall	.+838    	; 0x4682 <_Z4recvhPhi>
    if (ret > 0)
    433c:	18 16       	cp	r1, r24
    433e:	19 06       	cpc	r1, r25
    4340:	ec f4       	brge	.+58     	; 0x437c <_ZN11EthernetUDP11parsePacketEv+0x88>
    {
      _remoteIP = tmpBuf;
    4342:	be 01       	movw	r22, r28
    4344:	6f 5f       	subi	r22, 0xFF	; 255
    4346:	7f 4f       	sbci	r23, 0xFF	; 255
    4348:	c8 01       	movw	r24, r16
    434a:	0f 96       	adiw	r24, 0x0f	; 15
    434c:	0e 94 9c 2e 	call	0x5d38	; 0x5d38 <_ZN9IPAddressaSEPKh>
      _remotePort = tmpBuf[4];
      _remotePort = (_remotePort << 8) + tmpBuf[5];
    4350:	8d 81       	ldd	r24, Y+5	; 0x05
    4352:	90 e0       	ldi	r25, 0x00	; 0
    4354:	98 2f       	mov	r25, r24
    4356:	88 27       	eor	r24, r24
    4358:	2e 81       	ldd	r18, Y+6	; 0x06
    435a:	82 0f       	add	r24, r18
    435c:	91 1d       	adc	r25, r1
    435e:	f8 01       	movw	r30, r16
    4360:	96 8b       	std	Z+22, r25	; 0x16
    4362:	85 8b       	std	Z+21, r24	; 0x15
      _remaining = tmpBuf[6];
      _remaining = (_remaining << 8) + tmpBuf[7];
    4364:	8f 81       	ldd	r24, Y+7	; 0x07
    4366:	90 e0       	ldi	r25, 0x00	; 0
    4368:	98 2f       	mov	r25, r24
    436a:	88 27       	eor	r24, r24
    436c:	28 85       	ldd	r18, Y+8	; 0x08
    436e:	82 0f       	add	r24, r18
    4370:	91 1d       	adc	r25, r1
    4372:	92 8f       	std	Z+26, r25	; 0x1a
    4374:	81 8f       	std	Z+25, r24	; 0x19
    4376:	02 c0       	rjmp	.+4      	; 0x437c <_ZN11EthernetUDP11parsePacketEv+0x88>
      ret = _remaining;
    }
    return ret;
  }
  // There aren't any packets available
  return 0;
    4378:	80 e0       	ldi	r24, 0x00	; 0
    437a:	90 e0       	ldi	r25, 0x00	; 0
}
    437c:	28 96       	adiw	r28, 0x08	; 8
    437e:	0f b6       	in	r0, 0x3f	; 63
    4380:	f8 94       	cli
    4382:	de bf       	out	0x3e, r29	; 62
    4384:	0f be       	out	0x3f, r0	; 63
    4386:	cd bf       	out	0x3d, r28	; 61
    4388:	df 91       	pop	r29
    438a:	cf 91       	pop	r28
    438c:	1f 91       	pop	r17
    438e:	0f 91       	pop	r16
    4390:	08 95       	ret

00004392 <_ZN11EthernetUDPC1Ev>:
#include "Ethernet2.h"
#include "Udp.h"
#include "Dns.h"

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}
    4392:	fc 01       	movw	r30, r24
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    4394:	13 82       	std	Z+3, r1	; 0x03
    4396:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    4398:	88 ee       	ldi	r24, 0xE8	; 232
    439a:	93 e0       	ldi	r25, 0x03	; 3
    439c:	a0 e0       	ldi	r26, 0x00	; 0
    439e:	b0 e0       	ldi	r27, 0x00	; 0
    43a0:	84 83       	std	Z+4, r24	; 0x04
    43a2:	95 83       	std	Z+5, r25	; 0x05
    43a4:	a6 83       	std	Z+6, r26	; 0x06
    43a6:	b7 83       	std	Z+7, r27	; 0x07
    43a8:	83 e4       	ldi	r24, 0x43	; 67
    43aa:	98 e0       	ldi	r25, 0x08	; 8
    43ac:	91 83       	std	Z+1, r25	; 0x01
    43ae:	80 83       	st	Z, r24
    43b0:	88 e0       	ldi	r24, 0x08	; 8
    43b2:	84 87       	std	Z+12, r24	; 0x0c
    43b4:	cf 01       	movw	r24, r30
    43b6:	0f 96       	adiw	r24, 0x0f	; 15
    43b8:	0c 94 86 2e 	jmp	0x5d0c	; 0x5d0c <_ZN9IPAddressC1Ev>

000043bc <_ZN11EthernetUDP11beginPacketEPKcj>:
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

int EthernetUDP::beginPacket(const char *host, uint16_t port)
{
    43bc:	cf 92       	push	r12
    43be:	df 92       	push	r13
    43c0:	ef 92       	push	r14
    43c2:	ff 92       	push	r15
    43c4:	0f 93       	push	r16
    43c6:	1f 93       	push	r17
    43c8:	cf 93       	push	r28
    43ca:	df 93       	push	r29
    43cc:	cd b7       	in	r28, 0x3d	; 61
    43ce:	de b7       	in	r29, 0x3e	; 62
    43d0:	af 97       	sbiw	r28, 0x2f	; 47
    43d2:	0f b6       	in	r0, 0x3f	; 63
    43d4:	f8 94       	cli
    43d6:	de bf       	out	0x3e, r29	; 62
    43d8:	0f be       	out	0x3f, r0	; 63
    43da:	cd bf       	out	0x3d, r28	; 61
    43dc:	8c 01       	movw	r16, r24
    43de:	6b 01       	movw	r12, r22
    43e0:	7a 01       	movw	r14, r20
#ifndef DNSClient_h
#define DNSClient_h

#include <EthernetUdp2.h>

class DNSClient
    43e2:	ce 01       	movw	r24, r28
    43e4:	01 96       	adiw	r24, 0x01	; 1
    43e6:	0e 94 86 2e 	call	0x5d0c	; 0x5d0c <_ZN9IPAddressC1Ev>
    43ea:	ce 01       	movw	r24, r28
    43ec:	09 96       	adiw	r24, 0x09	; 9
    43ee:	d1 df       	rcall	.-94     	; 0x4392 <_ZN11EthernetUDPC1Ev>
  // Look up the host first
  int ret = 0;
  DNSClient dns;
  IPAddress remote_addr;
    43f0:	ce 01       	movw	r24, r28
    43f2:	8a 96       	adiw	r24, 0x2a	; 42
    43f4:	0e 94 86 2e 	call	0x5d0c	; 0x5d0c <_ZN9IPAddressC1Ev>

  dns.begin(Ethernet.dnsServerIP());
    43f8:	61 e2       	ldi	r22, 0x21	; 33
    43fa:	7a e0       	ldi	r23, 0x0A	; 10
    43fc:	ce 01       	movw	r24, r28
    43fe:	84 96       	adiw	r24, 0x24	; 36
    4400:	63 dc       	rcall	.-1850   	; 0x3cc8 <_ZN13EthernetClass11dnsServerIPEv>
    4402:	be 01       	movw	r22, r28
    4404:	6c 5d       	subi	r22, 0xDC	; 220
    4406:	7f 4f       	sbci	r23, 0xFF	; 255
    4408:	ce 01       	movw	r24, r28
    440a:	01 96       	adiw	r24, 0x01	; 1
    440c:	28 d9       	rcall	.-3504   	; 0x365e <_ZN9DNSClient5beginERK9IPAddress>
  ret = dns.getHostByName(host, remote_addr);
    440e:	ae 01       	movw	r20, r28
    4410:	46 5d       	subi	r20, 0xD6	; 214
    4412:	5f 4f       	sbci	r21, 0xFF	; 255
    4414:	b6 01       	movw	r22, r12
    4416:	ce 01       	movw	r24, r28
    4418:	01 96       	adiw	r24, 0x01	; 1
    441a:	7b db       	rcall	.-2314   	; 0x3b12 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>
  if (ret == 1) {
    441c:	81 30       	cpi	r24, 0x01	; 1
    441e:	91 05       	cpc	r25, r1
    4420:	c1 f4       	brne	.+48     	; 0x4452 <_ZN11EthernetUDP11beginPacketEPKcj+0x96>
    return beginPacket(remote_addr, port);
    4422:	d8 01       	movw	r26, r16
    4424:	ed 91       	ld	r30, X+
    4426:	fc 91       	ld	r31, X
    4428:	04 88       	ldd	r0, Z+20	; 0x14
    442a:	f5 89       	ldd	r31, Z+21	; 0x15
    442c:	e0 2d       	mov	r30, r0
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    442e:	85 ea       	ldi	r24, 0xA5	; 165
    4430:	98 e0       	ldi	r25, 0x08	; 8
    4432:	9d a3       	std	Y+37, r25	; 0x25
    4434:	8c a3       	std	Y+36, r24	; 0x24
    4436:	8c a5       	ldd	r24, Y+44	; 0x2c
    4438:	9d a5       	ldd	r25, Y+45	; 0x2d
    443a:	ae a5       	ldd	r26, Y+46	; 0x2e
    443c:	bf a5       	ldd	r27, Y+47	; 0x2f
    443e:	8e a3       	std	Y+38, r24	; 0x26
    4440:	9f a3       	std	Y+39, r25	; 0x27
    4442:	a8 a7       	std	Y+40, r26	; 0x28
    4444:	b9 a7       	std	Y+41, r27	; 0x29
    4446:	a7 01       	movw	r20, r14
    4448:	be 01       	movw	r22, r28
    444a:	6c 5d       	subi	r22, 0xDC	; 220
    444c:	7f 4f       	sbci	r23, 0xFF	; 255
    444e:	c8 01       	movw	r24, r16
    4450:	09 95       	icall
  } else {
    return ret;
  }
}
    4452:	af 96       	adiw	r28, 0x2f	; 47
    4454:	0f b6       	in	r0, 0x3f	; 63
    4456:	f8 94       	cli
    4458:	de bf       	out	0x3e, r29	; 62
    445a:	0f be       	out	0x3f, r0	; 63
    445c:	cd bf       	out	0x3d, r28	; 61
    445e:	df 91       	pop	r29
    4460:	cf 91       	pop	r28
    4462:	1f 91       	pop	r17
    4464:	0f 91       	pop	r16
    4466:	ff 90       	pop	r15
    4468:	ef 90       	pop	r14
    446a:	df 90       	pop	r13
    446c:	cf 90       	pop	r12
    446e:	08 95       	ret

00004470 <_GLOBAL__sub_I__ZN11EthernetUDPC2Ev>:

  while (_remaining)
  {
    read();
  }
}
    4470:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    4472:	00 e0       	ldi	r16, 0x00	; 0
    4474:	20 e0       	ldi	r18, 0x00	; 0
    4476:	40 e0       	ldi	r20, 0x00	; 0
    4478:	60 e0       	ldi	r22, 0x00	; 0
    447a:	80 e5       	ldi	r24, 0x50	; 80
    447c:	9a e0       	ldi	r25, 0x0A	; 10
    447e:	0e 94 90 2e 	call	0x5d20	; 0x5d20 <_ZN9IPAddressC1Ehhhh>
    4482:	0f 91       	pop	r16
    4484:	08 95       	ret

00004486 <_ZN10W5500Class11writeSnDIPREhPh>:
    }
  }

  w5500.writeSnIR(s, SnIR::SEND_OK);
  return ret;
}
    4486:	ab 01       	movw	r20, r22
    4488:	82 95       	swap	r24
    448a:	88 0f       	add	r24, r24
    448c:	80 7e       	andi	r24, 0xE0	; 224
    448e:	6c e0       	ldi	r22, 0x0C	; 12
    4490:	68 0f       	add	r22, r24
    4492:	24 e0       	ldi	r18, 0x04	; 4
    4494:	30 e0       	ldi	r19, 0x00	; 0
    4496:	8c e0       	ldi	r24, 0x0C	; 12
    4498:	90 e0       	ldi	r25, 0x00	; 0
    449a:	00 c2       	rjmp	.+1024   	; 0x489c <_ZN10W5500Class5writeEjhPKhj>

0000449c <_ZN10W5500Class6readSnEhj>:
    449c:	9b 01       	movw	r18, r22
    449e:	82 95       	swap	r24
    44a0:	88 0f       	add	r24, r24
    44a2:	80 7e       	andi	r24, 0xE0	; 224
    44a4:	68 e0       	ldi	r22, 0x08	; 8
    44a6:	68 0f       	add	r22, r24
    44a8:	c9 01       	movw	r24, r18
    44aa:	24 c2       	rjmp	.+1096   	; 0x48f4 <_ZN10W5500Class4readEjh>

000044ac <_ZN10W5500Class8readSnIREh>:
    44ac:	62 e0       	ldi	r22, 0x02	; 2
    44ae:	70 e0       	ldi	r23, 0x00	; 0
    44b0:	f5 cf       	rjmp	.-22     	; 0x449c <_ZN10W5500Class6readSnEhj>

000044b2 <_ZN10W5500Class7writeSnEhjh>:
    44b2:	9b 01       	movw	r18, r22
    44b4:	82 95       	swap	r24
    44b6:	88 0f       	add	r24, r24
    44b8:	80 7e       	andi	r24, 0xE0	; 224
    44ba:	6c e0       	ldi	r22, 0x0C	; 12
    44bc:	68 0f       	add	r22, r24
    44be:	c9 01       	movw	r24, r18
    44c0:	cf c1       	rjmp	.+926    	; 0x4860 <_ZN10W5500Class5writeEjhh>

000044c2 <_ZN10W5500Class11writeSnPORTEhj>:
    44c2:	cf 93       	push	r28
    44c4:	df 93       	push	r29
    44c6:	c8 2f       	mov	r28, r24
    44c8:	d6 2f       	mov	r29, r22
    44ca:	47 2f       	mov	r20, r23
    44cc:	64 e0       	ldi	r22, 0x04	; 4
    44ce:	70 e0       	ldi	r23, 0x00	; 0
    44d0:	f0 df       	rcall	.-32     	; 0x44b2 <_ZN10W5500Class7writeSnEhjh>
    44d2:	4d 2f       	mov	r20, r29
    44d4:	65 e0       	ldi	r22, 0x05	; 5
    44d6:	70 e0       	ldi	r23, 0x00	; 0
    44d8:	8c 2f       	mov	r24, r28
    44da:	df 91       	pop	r29
    44dc:	cf 91       	pop	r28
    44de:	e9 cf       	rjmp	.-46     	; 0x44b2 <_ZN10W5500Class7writeSnEhjh>

000044e0 <_ZN10W5500Class9writeSnIREhh>:
    44e0:	46 2f       	mov	r20, r22
    44e2:	62 e0       	ldi	r22, 0x02	; 2
    44e4:	70 e0       	ldi	r23, 0x00	; 0
    44e6:	e5 cf       	rjmp	.-54     	; 0x44b2 <_ZN10W5500Class7writeSnEhjh>

000044e8 <_ZN10W5500Class12writeSnDPORTEhj>:
    44e8:	cf 93       	push	r28
    44ea:	df 93       	push	r29
    44ec:	c8 2f       	mov	r28, r24
    44ee:	d6 2f       	mov	r29, r22
    44f0:	47 2f       	mov	r20, r23
    44f2:	60 e1       	ldi	r22, 0x10	; 16
    44f4:	70 e0       	ldi	r23, 0x00	; 0
    44f6:	dd df       	rcall	.-70     	; 0x44b2 <_ZN10W5500Class7writeSnEhjh>
    44f8:	4d 2f       	mov	r20, r29
    44fa:	61 e1       	ldi	r22, 0x11	; 17
    44fc:	70 e0       	ldi	r23, 0x00	; 0
    44fe:	8c 2f       	mov	r24, r28
    4500:	df 91       	pop	r29
    4502:	cf 91       	pop	r28
    4504:	d6 cf       	rjmp	.-84     	; 0x44b2 <_ZN10W5500Class7writeSnEhjh>

00004506 <_Z5closeh>:
    4506:	cf 93       	push	r28
    4508:	c8 2f       	mov	r28, r24
    450a:	40 e1       	ldi	r20, 0x10	; 16
    450c:	68 2f       	mov	r22, r24
    450e:	8b e5       	ldi	r24, 0x5B	; 91
    4510:	9a e0       	ldi	r25, 0x0A	; 10
    4512:	70 d3       	rcall	.+1760   	; 0x4bf4 <_ZN10W5500Class9execCmdSnEh7SockCMD>
    4514:	6f ef       	ldi	r22, 0xFF	; 255
    4516:	8c 2f       	mov	r24, r28
    4518:	cf 91       	pop	r28
    451a:	e2 cf       	rjmp	.-60     	; 0x44e0 <_ZN10W5500Class9writeSnIREhh>

0000451c <_Z6sockethhjh>:
    451c:	ff 92       	push	r15
    451e:	0f 93       	push	r16
    4520:	1f 93       	push	r17
    4522:	cf 93       	push	r28
    4524:	df 93       	push	r29
    4526:	9f ef       	ldi	r25, 0xFF	; 255
    4528:	96 0f       	add	r25, r22
    452a:	95 30       	cpi	r25, 0x05	; 5
    452c:	18 f5       	brcc	.+70     	; 0x4574 <_Z6sockethhjh+0x58>
    452e:	d2 2f       	mov	r29, r18
    4530:	8a 01       	movw	r16, r20
    4532:	f6 2e       	mov	r15, r22
    4534:	c8 2f       	mov	r28, r24
    4536:	e7 df       	rcall	.-50     	; 0x4506 <_Z5closeh>
    4538:	4f 2d       	mov	r20, r15
    453a:	4d 2b       	or	r20, r29
    453c:	60 e0       	ldi	r22, 0x00	; 0
    453e:	70 e0       	ldi	r23, 0x00	; 0
    4540:	8c 2f       	mov	r24, r28
    4542:	b7 df       	rcall	.-146    	; 0x44b2 <_ZN10W5500Class7writeSnEhjh>
    4544:	01 15       	cp	r16, r1
    4546:	11 05       	cpc	r17, r1
    4548:	11 f0       	breq	.+4      	; 0x454e <_Z6sockethhjh+0x32>
    454a:	b8 01       	movw	r22, r16
    454c:	0a c0       	rjmp	.+20     	; 0x4562 <_Z6sockethhjh+0x46>
    454e:	60 91 56 0a 	lds	r22, 0x0A56	; 0x800a56 <_ZL10local_port>
    4552:	70 91 57 0a 	lds	r23, 0x0A57	; 0x800a57 <_ZL10local_port+0x1>
    4556:	6f 5f       	subi	r22, 0xFF	; 255
    4558:	7f 4f       	sbci	r23, 0xFF	; 255
    455a:	70 93 57 0a 	sts	0x0A57, r23	; 0x800a57 <_ZL10local_port+0x1>
    455e:	60 93 56 0a 	sts	0x0A56, r22	; 0x800a56 <_ZL10local_port>
    4562:	8c 2f       	mov	r24, r28
    4564:	ae df       	rcall	.-164    	; 0x44c2 <_ZN10W5500Class11writeSnPORTEhj>
    4566:	41 e0       	ldi	r20, 0x01	; 1
    4568:	6c 2f       	mov	r22, r28
    456a:	8b e5       	ldi	r24, 0x5B	; 91
    456c:	9a e0       	ldi	r25, 0x0A	; 10
    456e:	42 d3       	rcall	.+1668   	; 0x4bf4 <_ZN10W5500Class9execCmdSnEh7SockCMD>
    4570:	81 e0       	ldi	r24, 0x01	; 1
    4572:	01 c0       	rjmp	.+2      	; 0x4576 <_Z6sockethhjh+0x5a>
    4574:	80 e0       	ldi	r24, 0x00	; 0
    4576:	df 91       	pop	r29
    4578:	cf 91       	pop	r28
    457a:	1f 91       	pop	r17
    457c:	0f 91       	pop	r16
    457e:	ff 90       	pop	r15
    4580:	08 95       	ret

00004582 <_Z7connecthPhj>:
    4582:	0f 93       	push	r16
    4584:	1f 93       	push	r17
    4586:	cf 93       	push	r28
    4588:	fb 01       	movw	r30, r22
    458a:	90 81       	ld	r25, Z
    458c:	9f 3f       	cpi	r25, 0xFF	; 255
    458e:	51 f4       	brne	.+20     	; 0x45a4 <_Z7connecthPhj+0x22>
    4590:	91 81       	ldd	r25, Z+1	; 0x01
    4592:	9f 3f       	cpi	r25, 0xFF	; 255
    4594:	91 f4       	brne	.+36     	; 0x45ba <_Z7connecthPhj+0x38>
    4596:	92 81       	ldd	r25, Z+2	; 0x02
    4598:	9f 3f       	cpi	r25, 0xFF	; 255
    459a:	79 f4       	brne	.+30     	; 0x45ba <_Z7connecthPhj+0x38>
    459c:	93 81       	ldd	r25, Z+3	; 0x03
    459e:	9f 3f       	cpi	r25, 0xFF	; 255
    45a0:	61 f4       	brne	.+24     	; 0x45ba <_Z7connecthPhj+0x38>
    45a2:	1c c0       	rjmp	.+56     	; 0x45dc <_Z7connecthPhj+0x5a>
    45a4:	91 11       	cpse	r25, r1
    45a6:	09 c0       	rjmp	.+18     	; 0x45ba <_Z7connecthPhj+0x38>
    45a8:	91 81       	ldd	r25, Z+1	; 0x01
    45aa:	91 11       	cpse	r25, r1
    45ac:	06 c0       	rjmp	.+12     	; 0x45ba <_Z7connecthPhj+0x38>
    45ae:	92 81       	ldd	r25, Z+2	; 0x02
    45b0:	91 11       	cpse	r25, r1
    45b2:	03 c0       	rjmp	.+6      	; 0x45ba <_Z7connecthPhj+0x38>
    45b4:	93 81       	ldd	r25, Z+3	; 0x03
    45b6:	99 23       	and	r25, r25
    45b8:	91 f0       	breq	.+36     	; 0x45de <_Z7connecthPhj+0x5c>
    45ba:	41 15       	cp	r20, r1
    45bc:	51 05       	cpc	r21, r1
    45be:	71 f0       	breq	.+28     	; 0x45dc <_Z7connecthPhj+0x5a>
    45c0:	8a 01       	movw	r16, r20
    45c2:	bf 01       	movw	r22, r30
    45c4:	c8 2f       	mov	r28, r24
    45c6:	5f df       	rcall	.-322    	; 0x4486 <_ZN10W5500Class11writeSnDIPREhPh>
    45c8:	b8 01       	movw	r22, r16
    45ca:	8c 2f       	mov	r24, r28
    45cc:	8d df       	rcall	.-230    	; 0x44e8 <_ZN10W5500Class12writeSnDPORTEhj>
    45ce:	44 e0       	ldi	r20, 0x04	; 4
    45d0:	6c 2f       	mov	r22, r28
    45d2:	8b e5       	ldi	r24, 0x5B	; 91
    45d4:	9a e0       	ldi	r25, 0x0A	; 10
    45d6:	0e d3       	rcall	.+1564   	; 0x4bf4 <_ZN10W5500Class9execCmdSnEh7SockCMD>
    45d8:	91 e0       	ldi	r25, 0x01	; 1
    45da:	01 c0       	rjmp	.+2      	; 0x45de <_Z7connecthPhj+0x5c>
    45dc:	90 e0       	ldi	r25, 0x00	; 0
    45de:	89 2f       	mov	r24, r25
    45e0:	cf 91       	pop	r28
    45e2:	1f 91       	pop	r17
    45e4:	0f 91       	pop	r16
    45e6:	08 95       	ret

000045e8 <_Z10disconnecth>:
    45e8:	48 e0       	ldi	r20, 0x08	; 8
    45ea:	68 2f       	mov	r22, r24
    45ec:	8b e5       	ldi	r24, 0x5B	; 91
    45ee:	9a e0       	ldi	r25, 0x0A	; 10
    45f0:	01 c3       	rjmp	.+1538   	; 0x4bf4 <_ZN10W5500Class9execCmdSnEh7SockCMD>

000045f2 <_Z4sendhPKhj>:
    45f2:	cf 92       	push	r12
    45f4:	df 92       	push	r13
    45f6:	ef 92       	push	r14
    45f8:	ff 92       	push	r15
    45fa:	0f 93       	push	r16
    45fc:	1f 93       	push	r17
    45fe:	cf 93       	push	r28
    4600:	c8 2f       	mov	r28, r24
    4602:	7b 01       	movw	r14, r22
    4604:	8a 01       	movw	r16, r20
    4606:	41 30       	cpi	r20, 0x01	; 1
    4608:	58 40       	sbci	r21, 0x08	; 8
    460a:	10 f0       	brcs	.+4      	; 0x4610 <_Z4sendhPKhj+0x1e>
    460c:	00 e0       	ldi	r16, 0x00	; 0
    460e:	18 e0       	ldi	r17, 0x08	; 8
    4610:	6c 2f       	mov	r22, r28
    4612:	8b e5       	ldi	r24, 0x5B	; 91
    4614:	9a e0       	ldi	r25, 0x0A	; 10
    4616:	cd d1       	rcall	.+922    	; 0x49b2 <_ZN10W5500Class13getTXFreeSizeEh>
    4618:	6c 01       	movw	r12, r24
    461a:	63 e0       	ldi	r22, 0x03	; 3
    461c:	70 e0       	ldi	r23, 0x00	; 0
    461e:	8c 2f       	mov	r24, r28
    4620:	3d df       	rcall	.-390    	; 0x449c <_ZN10W5500Class6readSnEhj>
    4622:	87 31       	cpi	r24, 0x17	; 23
    4624:	11 f0       	breq	.+4      	; 0x462a <_Z4sendhPKhj+0x38>
    4626:	8c 31       	cpi	r24, 0x1C	; 28
    4628:	21 f4       	brne	.+8      	; 0x4632 <_Z4sendhPKhj+0x40>
    462a:	c0 16       	cp	r12, r16
    462c:	d1 06       	cpc	r13, r17
    462e:	80 f3       	brcs	.-32     	; 0x4610 <_Z4sendhPKhj+0x1e>
    4630:	02 c0       	rjmp	.+4      	; 0x4636 <_Z4sendhPKhj+0x44>
    4632:	00 e0       	ldi	r16, 0x00	; 0
    4634:	10 e0       	ldi	r17, 0x00	; 0
    4636:	98 01       	movw	r18, r16
    4638:	a7 01       	movw	r20, r14
    463a:	6c 2f       	mov	r22, r28
    463c:	8b e5       	ldi	r24, 0x5B	; 91
    463e:	9a e0       	ldi	r25, 0x0A	; 10
    4640:	3d d2       	rcall	.+1146   	; 0x4abc <_ZN10W5500Class20send_data_processingEhPKhj>
    4642:	40 e2       	ldi	r20, 0x20	; 32
    4644:	6c 2f       	mov	r22, r28
    4646:	8b e5       	ldi	r24, 0x5B	; 91
    4648:	9a e0       	ldi	r25, 0x0A	; 10
    464a:	d4 d2       	rcall	.+1448   	; 0x4bf4 <_ZN10W5500Class9execCmdSnEh7SockCMD>
    464c:	8c 2f       	mov	r24, r28
    464e:	2e df       	rcall	.-420    	; 0x44ac <_ZN10W5500Class8readSnIREh>
    4650:	84 fd       	sbrc	r24, 4
    4652:	0b c0       	rjmp	.+22     	; 0x466a <_Z4sendhPKhj+0x78>
    4654:	63 e0       	ldi	r22, 0x03	; 3
    4656:	70 e0       	ldi	r23, 0x00	; 0
    4658:	8c 2f       	mov	r24, r28
    465a:	20 df       	rcall	.-448    	; 0x449c <_ZN10W5500Class6readSnEhj>
    465c:	81 11       	cpse	r24, r1
    465e:	f6 cf       	rjmp	.-20     	; 0x464c <_Z4sendhPKhj+0x5a>
    4660:	8c 2f       	mov	r24, r28
    4662:	51 df       	rcall	.-350    	; 0x4506 <_Z5closeh>
    4664:	80 e0       	ldi	r24, 0x00	; 0
    4666:	90 e0       	ldi	r25, 0x00	; 0
    4668:	04 c0       	rjmp	.+8      	; 0x4672 <_Z4sendhPKhj+0x80>
    466a:	60 e1       	ldi	r22, 0x10	; 16
    466c:	8c 2f       	mov	r24, r28
    466e:	38 df       	rcall	.-400    	; 0x44e0 <_ZN10W5500Class9writeSnIREhh>
    4670:	c8 01       	movw	r24, r16
    4672:	cf 91       	pop	r28
    4674:	1f 91       	pop	r17
    4676:	0f 91       	pop	r16
    4678:	ff 90       	pop	r15
    467a:	ef 90       	pop	r14
    467c:	df 90       	pop	r13
    467e:	cf 90       	pop	r12
    4680:	08 95       	ret

00004682 <_Z4recvhPhi>:
    4682:	cf 92       	push	r12
    4684:	df 92       	push	r13
    4686:	ef 92       	push	r14
    4688:	ff 92       	push	r15
    468a:	0f 93       	push	r16
    468c:	1f 93       	push	r17
    468e:	cf 93       	push	r28
    4690:	df 93       	push	r29
    4692:	18 2f       	mov	r17, r24
    4694:	6b 01       	movw	r12, r22
    4696:	7a 01       	movw	r14, r20
    4698:	68 2f       	mov	r22, r24
    469a:	8b e5       	ldi	r24, 0x5B	; 91
    469c:	9a e0       	ldi	r25, 0x0A	; 10
    469e:	ba d1       	rcall	.+884    	; 0x4a14 <_ZN10W5500Class17getRXReceivedSizeEh>
    46a0:	ec 01       	movw	r28, r24
    46a2:	00 97       	sbiw	r24, 0x00	; 0
    46a4:	91 f4       	brne	.+36     	; 0x46ca <_Z4recvhPhi+0x48>
    46a6:	63 e0       	ldi	r22, 0x03	; 3
    46a8:	70 e0       	ldi	r23, 0x00	; 0
    46aa:	81 2f       	mov	r24, r17
    46ac:	f7 de       	rcall	.-530    	; 0x449c <_ZN10W5500Class6readSnEhj>
    46ae:	84 31       	cpi	r24, 0x14	; 20
    46b0:	f9 f0       	breq	.+62     	; 0x46f0 <_Z4recvhPhi+0x6e>
    46b2:	88 23       	and	r24, r24
    46b4:	e9 f0       	breq	.+58     	; 0x46f0 <_Z4recvhPhi+0x6e>
    46b6:	c1 e0       	ldi	r28, 0x01	; 1
    46b8:	d0 e0       	ldi	r29, 0x00	; 0
    46ba:	8c 31       	cpi	r24, 0x1C	; 28
    46bc:	11 f4       	brne	.+4      	; 0x46c2 <_Z4recvhPhi+0x40>
    46be:	c0 e0       	ldi	r28, 0x00	; 0
    46c0:	d0 e0       	ldi	r29, 0x00	; 0
    46c2:	d1 95       	neg	r29
    46c4:	c1 95       	neg	r28
    46c6:	d1 09       	sbc	r29, r1
    46c8:	13 c0       	rjmp	.+38     	; 0x46f0 <_Z4recvhPhi+0x6e>
    46ca:	e8 16       	cp	r14, r24
    46cc:	f9 06       	cpc	r15, r25
    46ce:	0c f4       	brge	.+2      	; 0x46d2 <_Z4recvhPhi+0x50>
    46d0:	e7 01       	movw	r28, r14
    46d2:	1c 16       	cp	r1, r28
    46d4:	1d 06       	cpc	r1, r29
    46d6:	64 f4       	brge	.+24     	; 0x46f0 <_Z4recvhPhi+0x6e>
    46d8:	00 e0       	ldi	r16, 0x00	; 0
    46da:	9e 01       	movw	r18, r28
    46dc:	a6 01       	movw	r20, r12
    46de:	61 2f       	mov	r22, r17
    46e0:	8b e5       	ldi	r24, 0x5B	; 91
    46e2:	9a e0       	ldi	r25, 0x0A	; 10
    46e4:	3a d2       	rcall	.+1140   	; 0x4b5a <_ZN10W5500Class20recv_data_processingEhPhjh>
    46e6:	40 e4       	ldi	r20, 0x40	; 64
    46e8:	61 2f       	mov	r22, r17
    46ea:	8b e5       	ldi	r24, 0x5B	; 91
    46ec:	9a e0       	ldi	r25, 0x0A	; 10
    46ee:	82 d2       	rcall	.+1284   	; 0x4bf4 <_ZN10W5500Class9execCmdSnEh7SockCMD>
    46f0:	ce 01       	movw	r24, r28
    46f2:	df 91       	pop	r29
    46f4:	cf 91       	pop	r28
    46f6:	1f 91       	pop	r17
    46f8:	0f 91       	pop	r16
    46fa:	ff 90       	pop	r15
    46fc:	ef 90       	pop	r14
    46fe:	df 90       	pop	r13
    4700:	cf 90       	pop	r12
    4702:	08 95       	ret

00004704 <_Z4peekhPh>:
    4704:	0f 93       	push	r16
    4706:	ab 01       	movw	r20, r22
    4708:	01 e0       	ldi	r16, 0x01	; 1
    470a:	21 e0       	ldi	r18, 0x01	; 1
    470c:	30 e0       	ldi	r19, 0x00	; 0
    470e:	68 2f       	mov	r22, r24
    4710:	8b e5       	ldi	r24, 0x5B	; 91
    4712:	9a e0       	ldi	r25, 0x0A	; 10
    4714:	22 d2       	rcall	.+1092   	; 0x4b5a <_ZN10W5500Class20recv_data_processingEhPhjh>
    4716:	81 e0       	ldi	r24, 0x01	; 1
    4718:	90 e0       	ldi	r25, 0x00	; 0
    471a:	0f 91       	pop	r16
    471c:	08 95       	ret

0000471e <_Z5flushh>:
    471e:	08 95       	ret

00004720 <_Z10bufferDatahjPKhj>:

uint16_t bufferData(SOCKET s, uint16_t offset, const uint8_t* buf, uint16_t len)
{
    4720:	af 92       	push	r10
    4722:	bf 92       	push	r11
    4724:	cf 92       	push	r12
    4726:	df 92       	push	r13
    4728:	ff 92       	push	r15
    472a:	0f 93       	push	r16
    472c:	1f 93       	push	r17
    472e:	cf 93       	push	r28
    4730:	df 93       	push	r29
    4732:	f8 2e       	mov	r15, r24
    4734:	6b 01       	movw	r12, r22
    4736:	5a 01       	movw	r10, r20
    4738:	e9 01       	movw	r28, r18
  uint16_t ret =0;
  if (len > w5500.getTXFreeSize(s))
    473a:	68 2f       	mov	r22, r24
    473c:	8b e5       	ldi	r24, 0x5B	; 91
    473e:	9a e0       	ldi	r25, 0x0A	; 10
    4740:	38 d1       	rcall	.+624    	; 0x49b2 <_ZN10W5500Class13getTXFreeSizeEh>
    4742:	8c 17       	cp	r24, r28
    4744:	9d 07       	cpc	r25, r29
    4746:	28 f4       	brcc	.+10     	; 0x4752 <_Z10bufferDatahjPKhj+0x32>
  {
    ret = w5500.getTXFreeSize(s); // check size not to exceed MAX size.
    4748:	6f 2d       	mov	r22, r15
    474a:	8b e5       	ldi	r24, 0x5B	; 91
    474c:	9a e0       	ldi	r25, 0x0A	; 10
    474e:	31 d1       	rcall	.+610    	; 0x49b2 <_ZN10W5500Class13getTXFreeSizeEh>
    4750:	ec 01       	movw	r28, r24
  }
  else
  {
    ret = len;
  }
  w5500.send_data_processing_offset(s, offset, buf, ret);
    4752:	8e 01       	movw	r16, r28
    4754:	95 01       	movw	r18, r10
    4756:	a6 01       	movw	r20, r12
    4758:	6f 2d       	mov	r22, r15
    475a:	8b e5       	ldi	r24, 0x5B	; 91
    475c:	9a e0       	ldi	r25, 0x0A	; 10
    475e:	74 d1       	rcall	.+744    	; 0x4a48 <_ZN10W5500Class27send_data_processing_offsetEhjPKhj>
  return ret;
}
    4760:	ce 01       	movw	r24, r28
    4762:	df 91       	pop	r29
    4764:	cf 91       	pop	r28
    4766:	1f 91       	pop	r17
    4768:	0f 91       	pop	r16
    476a:	ff 90       	pop	r15
    476c:	df 90       	pop	r13
    476e:	cf 90       	pop	r12
    4770:	bf 90       	pop	r11
    4772:	af 90       	pop	r10
    4774:	08 95       	ret

00004776 <_Z8startUDPhPhj>:

int startUDP(SOCKET s, uint8_t* addr, uint16_t port)
{
    4776:	0f 93       	push	r16
    4778:	1f 93       	push	r17
    477a:	cf 93       	push	r28
    477c:	fb 01       	movw	r30, r22
  if
    477e:	90 81       	ld	r25, Z
    4780:	91 11       	cpse	r25, r1
    4782:	09 c0       	rjmp	.+18     	; 0x4796 <_Z8startUDPhPhj+0x20>
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
    4784:	91 81       	ldd	r25, Z+1	; 0x01
    4786:	91 11       	cpse	r25, r1
    4788:	06 c0       	rjmp	.+12     	; 0x4796 <_Z8startUDPhPhj+0x20>
    478a:	92 81       	ldd	r25, Z+2	; 0x02
    478c:	91 11       	cpse	r25, r1
    478e:	03 c0       	rjmp	.+6      	; 0x4796 <_Z8startUDPhPhj+0x20>
    4790:	93 81       	ldd	r25, Z+3	; 0x03
    4792:	99 23       	and	r25, r25
    4794:	69 f0       	breq	.+26     	; 0x47b0 <_Z8startUDPhPhj+0x3a>
    4796:	41 15       	cp	r20, r1
    4798:	51 05       	cpc	r21, r1
    479a:	51 f0       	breq	.+20     	; 0x47b0 <_Z8startUDPhPhj+0x3a>
    479c:	8a 01       	movw	r16, r20
    479e:	bf 01       	movw	r22, r30
    47a0:	c8 2f       	mov	r28, r24
  {
    return 0;
  }
  else
  {
    w5500.writeSnDIPR(s, addr);
    47a2:	71 de       	rcall	.-798    	; 0x4486 <_ZN10W5500Class11writeSnDIPREhPh>
    w5500.writeSnDPORT(s, port);
    47a4:	b8 01       	movw	r22, r16
    47a6:	8c 2f       	mov	r24, r28
    47a8:	9f de       	rcall	.-706    	; 0x44e8 <_ZN10W5500Class12writeSnDPORTEhj>
    return 1;
    47aa:	81 e0       	ldi	r24, 0x01	; 1
    47ac:	90 e0       	ldi	r25, 0x00	; 0
    47ae:	02 c0       	rjmp	.+4      	; 0x47b4 <_Z8startUDPhPhj+0x3e>
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
     ((port == 0x00))
    ) 
  {
    return 0;
    47b0:	80 e0       	ldi	r24, 0x00	; 0
    47b2:	90 e0       	ldi	r25, 0x00	; 0
  {
    w5500.writeSnDIPR(s, addr);
    w5500.writeSnDPORT(s, port);
    return 1;
  }
}
    47b4:	cf 91       	pop	r28
    47b6:	1f 91       	pop	r17
    47b8:	0f 91       	pop	r16
    47ba:	08 95       	ret

000047bc <_Z7sendUDPh>:

int sendUDP(SOCKET s)
{
    47bc:	cf 93       	push	r28
    47be:	c8 2f       	mov	r28, r24
  w5500.execCmdSn(s, Sock_SEND);
    47c0:	40 e2       	ldi	r20, 0x20	; 32
    47c2:	68 2f       	mov	r22, r24
    47c4:	8b e5       	ldi	r24, 0x5B	; 91
    47c6:	9a e0       	ldi	r25, 0x0A	; 10
    47c8:	15 d2       	rcall	.+1066   	; 0x4bf4 <_ZN10W5500Class9execCmdSnEh7SockCMD>
		
  /* +2008.01 bj */
  while ( (w5500.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
    47ca:	8c 2f       	mov	r24, r28
    47cc:	6f de       	rcall	.-802    	; 0x44ac <_ZN10W5500Class8readSnIREh>
    47ce:	84 fd       	sbrc	r24, 4
    47d0:	0a c0       	rjmp	.+20     	; 0x47e6 <_Z7sendUDPh+0x2a>
  {
    if (w5500.readSnIR(s) & SnIR::TIMEOUT)
    47d2:	8c 2f       	mov	r24, r28
    47d4:	6b de       	rcall	.-810    	; 0x44ac <_ZN10W5500Class8readSnIREh>
    47d6:	83 ff       	sbrs	r24, 3
    47d8:	f8 cf       	rjmp	.-16     	; 0x47ca <_Z7sendUDPh+0xe>
    {
      /* +2008.01 [bj]: clear interrupt */
      w5500.writeSnIR(s, (SnIR::SEND_OK|SnIR::TIMEOUT));
    47da:	68 e1       	ldi	r22, 0x18	; 24
    47dc:	8c 2f       	mov	r24, r28
    47de:	80 de       	rcall	.-768    	; 0x44e0 <_ZN10W5500Class9writeSnIREhh>
    47e0:	80 e0       	ldi	r24, 0x00	; 0
      return 0;
    47e2:	90 e0       	ldi	r25, 0x00	; 0
    47e4:	05 c0       	rjmp	.+10     	; 0x47f0 <_Z7sendUDPh+0x34>
    }
  }

  /* +2008.01 bj */	
  w5500.writeSnIR(s, SnIR::SEND_OK);
    47e6:	60 e1       	ldi	r22, 0x10	; 16
    47e8:	8c 2f       	mov	r24, r28
    47ea:	7a de       	rcall	.-780    	; 0x44e0 <_ZN10W5500Class9writeSnIREhh>
    47ec:	81 e0       	ldi	r24, 0x01	; 1

  /* Sent ok */
  return 1;
    47ee:	90 e0       	ldi	r25, 0x00	; 0
    47f0:	cf 91       	pop	r28
}
    47f2:	08 95       	ret

000047f4 <_ZN8SPIClass16beginTransactionE11SPISettings>:
    47f4:	20 91 5e 0a 	lds	r18, 0x0A5E	; 0x800a5e <_ZN8SPIClass13interruptModeE>
    uint8_t _data = SPI.transfer(0);
    resetSS();
    SPI.endTransaction();

    return _data;
}
    47f8:	22 23       	and	r18, r18
    47fa:	99 f0       	breq	.+38     	; 0x4822 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    47fc:	4f b7       	in	r20, 0x3f	; 63
    47fe:	f8 94       	cli
    4800:	20 91 5e 0a 	lds	r18, 0x0A5E	; 0x800a5e <_ZN8SPIClass13interruptModeE>
    4804:	21 30       	cpi	r18, 0x01	; 1
    4806:	59 f4       	brne	.+22     	; 0x481e <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
    4808:	2d b3       	in	r18, 0x1d	; 29
    480a:	20 93 5c 0a 	sts	0x0A5C, r18	; 0x800a5c <_ZN8SPIClass13interruptSaveE>
    480e:	3d b3       	in	r19, 0x1d	; 29
    4810:	20 91 5d 0a 	lds	r18, 0x0A5D	; 0x800a5d <_ZN8SPIClass13interruptMaskE>
    4814:	20 95       	com	r18
    4816:	23 23       	and	r18, r19
    4818:	2d bb       	out	0x1d, r18	; 29
    481a:	4f bf       	out	0x3f, r20	; 63
    481c:	02 c0       	rjmp	.+4      	; 0x4822 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    481e:	40 93 5c 0a 	sts	0x0A5C, r20	; 0x800a5c <_ZN8SPIClass13interruptSaveE>
    4822:	8c bd       	out	0x2c, r24	; 44
    4824:	9d bd       	out	0x2d, r25	; 45
    4826:	08 95       	ret

00004828 <_ZN8SPIClass8transferEh>:
    4828:	8e bd       	out	0x2e, r24	; 46
    482a:	00 00       	nop
    482c:	0d b4       	in	r0, 0x2d	; 45
    482e:	07 fe       	sbrs	r0, 7
    4830:	fd cf       	rjmp	.-6      	; 0x482c <_ZN8SPIClass8transferEh+0x4>
    4832:	8e b5       	in	r24, 0x2e	; 46
    4834:	08 95       	ret

00004836 <_ZN8SPIClass14endTransactionEv>:
    4836:	80 91 5e 0a 	lds	r24, 0x0A5E	; 0x800a5e <_ZN8SPIClass13interruptModeE>
    483a:	88 23       	and	r24, r24
    483c:	61 f0       	breq	.+24     	; 0x4856 <_ZN8SPIClass14endTransactionEv+0x20>
    483e:	9f b7       	in	r25, 0x3f	; 63
    4840:	f8 94       	cli
    4842:	20 91 5e 0a 	lds	r18, 0x0A5E	; 0x800a5e <_ZN8SPIClass13interruptModeE>
    4846:	80 91 5c 0a 	lds	r24, 0x0A5C	; 0x800a5c <_ZN8SPIClass13interruptSaveE>
    484a:	21 30       	cpi	r18, 0x01	; 1
    484c:	19 f4       	brne	.+6      	; 0x4854 <_ZN8SPIClass14endTransactionEv+0x1e>
    484e:	8d bb       	out	0x1d, r24	; 29
    4850:	9f bf       	out	0x3f, r25	; 63
    4852:	08 95       	ret
    4854:	8f bf       	out	0x3f, r24	; 63
    4856:	08 95       	ret

00004858 <_ZN10W5500Class5setSSEv>:
    4858:	44 98       	cbi	0x08, 4	; 8
    485a:	08 95       	ret

0000485c <_ZN10W5500Class7resetSSEv>:
    485c:	44 9a       	sbi	0x08, 4	; 8
    485e:	08 95       	ret

00004860 <_ZN10W5500Class5writeEjhh>:
    4860:	0f 93       	push	r16
    4862:	1f 93       	push	r17
    4864:	cf 93       	push	r28
    4866:	df 93       	push	r29
    4868:	18 2f       	mov	r17, r24
    486a:	09 2f       	mov	r16, r25
    486c:	d6 2f       	mov	r29, r22
    486e:	c4 2f       	mov	r28, r20
    4870:	80 91 59 0a 	lds	r24, 0x0A59	; 0x800a59 <wiznet_SPI_settings>
    4874:	90 91 5a 0a 	lds	r25, 0x0A5A	; 0x800a5a <wiznet_SPI_settings+0x1>
    4878:	bd df       	rcall	.-134    	; 0x47f4 <_ZN8SPIClass16beginTransactionE11SPISettings>
    487a:	ee df       	rcall	.-36     	; 0x4858 <_ZN10W5500Class5setSSEv>
    487c:	80 2f       	mov	r24, r16
    487e:	d4 df       	rcall	.-88     	; 0x4828 <_ZN8SPIClass8transferEh>
    4880:	81 2f       	mov	r24, r17
    4882:	d2 df       	rcall	.-92     	; 0x4828 <_ZN8SPIClass8transferEh>
    4884:	8d 2f       	mov	r24, r29
    4886:	d0 df       	rcall	.-96     	; 0x4828 <_ZN8SPIClass8transferEh>
    4888:	8c 2f       	mov	r24, r28
    488a:	ce df       	rcall	.-100    	; 0x4828 <_ZN8SPIClass8transferEh>
    488c:	e7 df       	rcall	.-50     	; 0x485c <_ZN10W5500Class7resetSSEv>
    488e:	d3 df       	rcall	.-90     	; 0x4836 <_ZN8SPIClass14endTransactionEv>
    4890:	81 e0       	ldi	r24, 0x01	; 1
    4892:	df 91       	pop	r29
    4894:	cf 91       	pop	r28
    4896:	1f 91       	pop	r17
    4898:	0f 91       	pop	r16
    489a:	08 95       	ret

0000489c <_ZN10W5500Class5writeEjhPKhj>:
    489c:	df 92       	push	r13
    489e:	ef 92       	push	r14
    48a0:	ff 92       	push	r15
    48a2:	0f 93       	push	r16
    48a4:	1f 93       	push	r17
    48a6:	cf 93       	push	r28
    48a8:	df 93       	push	r29
    48aa:	d8 2f       	mov	r29, r24
    48ac:	d9 2e       	mov	r13, r25
    48ae:	c6 2f       	mov	r28, r22
    48b0:	7a 01       	movw	r14, r20
    48b2:	89 01       	movw	r16, r18
    48b4:	80 91 59 0a 	lds	r24, 0x0A59	; 0x800a59 <wiznet_SPI_settings>
    48b8:	90 91 5a 0a 	lds	r25, 0x0A5A	; 0x800a5a <wiznet_SPI_settings+0x1>
    48bc:	9b df       	rcall	.-202    	; 0x47f4 <_ZN8SPIClass16beginTransactionE11SPISettings>
    48be:	cc df       	rcall	.-104    	; 0x4858 <_ZN10W5500Class5setSSEv>
    48c0:	8d 2d       	mov	r24, r13
    48c2:	b2 df       	rcall	.-156    	; 0x4828 <_ZN8SPIClass8transferEh>
    48c4:	8d 2f       	mov	r24, r29
    48c6:	b0 df       	rcall	.-160    	; 0x4828 <_ZN8SPIClass8transferEh>
    48c8:	8c 2f       	mov	r24, r28
    48ca:	ae df       	rcall	.-164    	; 0x4828 <_ZN8SPIClass8transferEh>
    48cc:	e7 01       	movw	r28, r14
    48ce:	e0 0e       	add	r14, r16
    48d0:	f1 1e       	adc	r15, r17
    48d2:	ce 15       	cp	r28, r14
    48d4:	df 05       	cpc	r29, r15
    48d6:	19 f0       	breq	.+6      	; 0x48de <_ZN10W5500Class5writeEjhPKhj+0x42>
    48d8:	89 91       	ld	r24, Y+
    48da:	a6 df       	rcall	.-180    	; 0x4828 <_ZN8SPIClass8transferEh>
    48dc:	fa cf       	rjmp	.-12     	; 0x48d2 <_ZN10W5500Class5writeEjhPKhj+0x36>
    48de:	be df       	rcall	.-132    	; 0x485c <_ZN10W5500Class7resetSSEv>
    48e0:	aa df       	rcall	.-172    	; 0x4836 <_ZN8SPIClass14endTransactionEv>
    48e2:	c8 01       	movw	r24, r16
    48e4:	df 91       	pop	r29
    48e6:	cf 91       	pop	r28
    48e8:	1f 91       	pop	r17
    48ea:	0f 91       	pop	r16
    48ec:	ff 90       	pop	r15
    48ee:	ef 90       	pop	r14
    48f0:	df 90       	pop	r13
    48f2:	08 95       	ret

000048f4 <_ZN10W5500Class4readEjh>:
    48f4:	1f 93       	push	r17
    48f6:	cf 93       	push	r28
    48f8:	df 93       	push	r29
    48fa:	d8 2f       	mov	r29, r24
    48fc:	19 2f       	mov	r17, r25
    48fe:	c6 2f       	mov	r28, r22
    4900:	80 91 59 0a 	lds	r24, 0x0A59	; 0x800a59 <wiznet_SPI_settings>
    4904:	90 91 5a 0a 	lds	r25, 0x0A5A	; 0x800a5a <wiznet_SPI_settings+0x1>
    4908:	75 df       	rcall	.-278    	; 0x47f4 <_ZN8SPIClass16beginTransactionE11SPISettings>
    490a:	a6 df       	rcall	.-180    	; 0x4858 <_ZN10W5500Class5setSSEv>
    490c:	81 2f       	mov	r24, r17
    490e:	8c df       	rcall	.-232    	; 0x4828 <_ZN8SPIClass8transferEh>
    4910:	8d 2f       	mov	r24, r29
    4912:	8a df       	rcall	.-236    	; 0x4828 <_ZN8SPIClass8transferEh>
    4914:	8c 2f       	mov	r24, r28
    4916:	88 df       	rcall	.-240    	; 0x4828 <_ZN8SPIClass8transferEh>
    4918:	80 e0       	ldi	r24, 0x00	; 0
    491a:	86 df       	rcall	.-244    	; 0x4828 <_ZN8SPIClass8transferEh>
    491c:	c8 2f       	mov	r28, r24
    491e:	9e df       	rcall	.-196    	; 0x485c <_ZN10W5500Class7resetSSEv>
    4920:	8a df       	rcall	.-236    	; 0x4836 <_ZN8SPIClass14endTransactionEv>
    4922:	8c 2f       	mov	r24, r28
    4924:	df 91       	pop	r29
    4926:	cf 91       	pop	r28
    4928:	1f 91       	pop	r17
    492a:	08 95       	ret

0000492c <_ZN10W5500Class4initEh>:
    492c:	cf 93       	push	r28
    492e:	df 93       	push	r29
    4930:	60 93 58 0a 	sts	0x0A58, r22	; 0x800a58 <SPI_CS>
    4934:	68 ee       	ldi	r22, 0xE8	; 232
    4936:	73 e0       	ldi	r23, 0x03	; 3
    4938:	80 e0       	ldi	r24, 0x00	; 0
    493a:	90 e0       	ldi	r25, 0x00	; 0
    493c:	0e 94 42 30 	call	0x6084	; 0x6084 <delay>
    4940:	3c 9a       	sbi	0x07, 4	; 7
    4942:	10 d4       	rcall	.+2080   	; 0x5164 <_ZN8SPIClass5beginEv>
    4944:	60 e0       	ldi	r22, 0x00	; 0
    4946:	80 e0       	ldi	r24, 0x00	; 0
    4948:	90 e0       	ldi	r25, 0x00	; 0
    494a:	d4 df       	rcall	.-88     	; 0x48f4 <_ZN10W5500Class4readEjh>
    494c:	48 2f       	mov	r20, r24
    494e:	40 68       	ori	r20, 0x80	; 128
    4950:	64 e0       	ldi	r22, 0x04	; 4
    4952:	80 e0       	ldi	r24, 0x00	; 0
    4954:	90 e0       	ldi	r25, 0x00	; 0
    4956:	84 df       	rcall	.-248    	; 0x4860 <_ZN10W5500Class5writeEjhh>
    4958:	c0 e0       	ldi	r28, 0x00	; 0
    495a:	dc 2f       	mov	r29, r28
    495c:	d2 95       	swap	r29
    495e:	dd 0f       	add	r29, r29
    4960:	d0 7e       	andi	r29, 0xE0	; 224
    4962:	d4 5f       	subi	r29, 0xF4	; 244
    4964:	42 e0       	ldi	r20, 0x02	; 2
    4966:	6d 2f       	mov	r22, r29
    4968:	8e e1       	ldi	r24, 0x1E	; 30
    496a:	90 e0       	ldi	r25, 0x00	; 0
    496c:	79 df       	rcall	.-270    	; 0x4860 <_ZN10W5500Class5writeEjhh>
    496e:	42 e0       	ldi	r20, 0x02	; 2
    4970:	6d 2f       	mov	r22, r29
    4972:	8f e1       	ldi	r24, 0x1F	; 31
    4974:	90 e0       	ldi	r25, 0x00	; 0
    4976:	74 df       	rcall	.-280    	; 0x4860 <_ZN10W5500Class5writeEjhh>
    4978:	cf 5f       	subi	r28, 0xFF	; 255
    497a:	c8 30       	cpi	r28, 0x08	; 8
    497c:	71 f7       	brne	.-36     	; 0x495a <_ZN10W5500Class4initEh+0x2e>
    497e:	df 91       	pop	r29
    4980:	cf 91       	pop	r28
    4982:	08 95       	ret

00004984 <_ZN10W5500Class12readSnTX_FSREh>:
    4984:	1f 93       	push	r17
    4986:	cf 93       	push	r28
    4988:	df 93       	push	r29
    498a:	18 2f       	mov	r17, r24
    498c:	60 e2       	ldi	r22, 0x20	; 32
    498e:	70 e0       	ldi	r23, 0x00	; 0
    4990:	85 dd       	rcall	.-1270   	; 0x449c <_ZN10W5500Class6readSnEhj>
    4992:	c8 2f       	mov	r28, r24
    4994:	d0 e0       	ldi	r29, 0x00	; 0
    4996:	dc 2f       	mov	r29, r28
    4998:	cc 27       	eor	r28, r28
    499a:	61 e2       	ldi	r22, 0x21	; 33
    499c:	70 e0       	ldi	r23, 0x00	; 0
    499e:	81 2f       	mov	r24, r17
    49a0:	7d dd       	rcall	.-1286   	; 0x449c <_ZN10W5500Class6readSnEhj>
    49a2:	9e 01       	movw	r18, r28
    49a4:	28 0f       	add	r18, r24
    49a6:	31 1d       	adc	r19, r1
    49a8:	c9 01       	movw	r24, r18
    49aa:	df 91       	pop	r29
    49ac:	cf 91       	pop	r28
    49ae:	1f 91       	pop	r17
    49b0:	08 95       	ret

000049b2 <_ZN10W5500Class13getTXFreeSizeEh>:
    49b2:	ff 92       	push	r15
    49b4:	0f 93       	push	r16
    49b6:	1f 93       	push	r17
    49b8:	cf 93       	push	r28
    49ba:	df 93       	push	r29
    49bc:	f6 2e       	mov	r15, r22
    49be:	c0 e0       	ldi	r28, 0x00	; 0
    49c0:	d0 e0       	ldi	r29, 0x00	; 0
    49c2:	8f 2d       	mov	r24, r15
    49c4:	df df       	rcall	.-66     	; 0x4984 <_ZN10W5500Class12readSnTX_FSREh>
    49c6:	8c 01       	movw	r16, r24
    49c8:	89 2b       	or	r24, r25
    49ca:	19 f0       	breq	.+6      	; 0x49d2 <_ZN10W5500Class13getTXFreeSizeEh+0x20>
    49cc:	8f 2d       	mov	r24, r15
    49ce:	da df       	rcall	.-76     	; 0x4984 <_ZN10W5500Class12readSnTX_FSREh>
    49d0:	ec 01       	movw	r28, r24
    49d2:	c0 17       	cp	r28, r16
    49d4:	d1 07       	cpc	r29, r17
    49d6:	a9 f7       	brne	.-22     	; 0x49c2 <_ZN10W5500Class13getTXFreeSizeEh+0x10>
    49d8:	ce 01       	movw	r24, r28
    49da:	df 91       	pop	r29
    49dc:	cf 91       	pop	r28
    49de:	1f 91       	pop	r17
    49e0:	0f 91       	pop	r16
    49e2:	ff 90       	pop	r15
    49e4:	08 95       	ret

000049e6 <_ZN10W5500Class12readSnRX_RSREh>:
    49e6:	1f 93       	push	r17
    49e8:	cf 93       	push	r28
    49ea:	df 93       	push	r29
    49ec:	18 2f       	mov	r17, r24
    49ee:	66 e2       	ldi	r22, 0x26	; 38
    49f0:	70 e0       	ldi	r23, 0x00	; 0
    49f2:	54 dd       	rcall	.-1368   	; 0x449c <_ZN10W5500Class6readSnEhj>
    49f4:	c8 2f       	mov	r28, r24
    49f6:	d0 e0       	ldi	r29, 0x00	; 0
    49f8:	dc 2f       	mov	r29, r28
    49fa:	cc 27       	eor	r28, r28
    49fc:	67 e2       	ldi	r22, 0x27	; 39
    49fe:	70 e0       	ldi	r23, 0x00	; 0
    4a00:	81 2f       	mov	r24, r17
    4a02:	4c dd       	rcall	.-1384   	; 0x449c <_ZN10W5500Class6readSnEhj>
    4a04:	9e 01       	movw	r18, r28
    4a06:	28 0f       	add	r18, r24
    4a08:	31 1d       	adc	r19, r1
    4a0a:	c9 01       	movw	r24, r18
    4a0c:	df 91       	pop	r29
    4a0e:	cf 91       	pop	r28
    4a10:	1f 91       	pop	r17
    4a12:	08 95       	ret

00004a14 <_ZN10W5500Class17getRXReceivedSizeEh>:
    4a14:	ff 92       	push	r15
    4a16:	0f 93       	push	r16
    4a18:	1f 93       	push	r17
    4a1a:	cf 93       	push	r28
    4a1c:	df 93       	push	r29
    4a1e:	f6 2e       	mov	r15, r22
    4a20:	c0 e0       	ldi	r28, 0x00	; 0
    4a22:	d0 e0       	ldi	r29, 0x00	; 0
    4a24:	8f 2d       	mov	r24, r15
    4a26:	df df       	rcall	.-66     	; 0x49e6 <_ZN10W5500Class12readSnRX_RSREh>
    4a28:	8c 01       	movw	r16, r24
    4a2a:	89 2b       	or	r24, r25
    4a2c:	19 f0       	breq	.+6      	; 0x4a34 <_ZN10W5500Class17getRXReceivedSizeEh+0x20>
    4a2e:	8f 2d       	mov	r24, r15
    4a30:	da df       	rcall	.-76     	; 0x49e6 <_ZN10W5500Class12readSnRX_RSREh>
    4a32:	ec 01       	movw	r28, r24
    4a34:	c0 17       	cp	r28, r16
    4a36:	d1 07       	cpc	r29, r17
    4a38:	a9 f7       	brne	.-22     	; 0x4a24 <_ZN10W5500Class17getRXReceivedSizeEh+0x10>
    4a3a:	ce 01       	movw	r24, r28
    4a3c:	df 91       	pop	r29
    4a3e:	cf 91       	pop	r28
    4a40:	1f 91       	pop	r17
    4a42:	0f 91       	pop	r16
    4a44:	ff 90       	pop	r15
    4a46:	08 95       	ret

00004a48 <_ZN10W5500Class27send_data_processing_offsetEhjPKhj>:
    4a48:	af 92       	push	r10
    4a4a:	bf 92       	push	r11
    4a4c:	df 92       	push	r13
    4a4e:	ef 92       	push	r14
    4a50:	ff 92       	push	r15
    4a52:	0f 93       	push	r16
    4a54:	1f 93       	push	r17
    4a56:	cf 93       	push	r28
    4a58:	df 93       	push	r29
    4a5a:	d6 2e       	mov	r13, r22
    4a5c:	7a 01       	movw	r14, r20
    4a5e:	59 01       	movw	r10, r18
    4a60:	64 e2       	ldi	r22, 0x24	; 36
    4a62:	70 e0       	ldi	r23, 0x00	; 0
    4a64:	8d 2d       	mov	r24, r13
    4a66:	1a dd       	rcall	.-1484   	; 0x449c <_ZN10W5500Class6readSnEhj>
    4a68:	c8 2f       	mov	r28, r24
    4a6a:	65 e2       	ldi	r22, 0x25	; 37
    4a6c:	70 e0       	ldi	r23, 0x00	; 0
    4a6e:	8d 2d       	mov	r24, r13
    4a70:	15 dd       	rcall	.-1494   	; 0x449c <_ZN10W5500Class6readSnEhj>
    4a72:	d0 e0       	ldi	r29, 0x00	; 0
    4a74:	dc 2f       	mov	r29, r28
    4a76:	cc 27       	eor	r28, r28
    4a78:	e8 0e       	add	r14, r24
    4a7a:	f1 1c       	adc	r15, r1
    4a7c:	ce 0d       	add	r28, r14
    4a7e:	df 1d       	adc	r29, r15
    4a80:	6d 2d       	mov	r22, r13
    4a82:	62 95       	swap	r22
    4a84:	66 0f       	add	r22, r22
    4a86:	60 7e       	andi	r22, 0xE0	; 224
    4a88:	6c 5e       	subi	r22, 0xEC	; 236
    4a8a:	98 01       	movw	r18, r16
    4a8c:	a5 01       	movw	r20, r10
    4a8e:	ce 01       	movw	r24, r28
    4a90:	05 df       	rcall	.-502    	; 0x489c <_ZN10W5500Class5writeEjhPKhj>
    4a92:	c0 0f       	add	r28, r16
    4a94:	d1 1f       	adc	r29, r17
    4a96:	4d 2f       	mov	r20, r29
    4a98:	64 e2       	ldi	r22, 0x24	; 36
    4a9a:	70 e0       	ldi	r23, 0x00	; 0
    4a9c:	8d 2d       	mov	r24, r13
    4a9e:	09 dd       	rcall	.-1518   	; 0x44b2 <_ZN10W5500Class7writeSnEhjh>
    4aa0:	4c 2f       	mov	r20, r28
    4aa2:	65 e2       	ldi	r22, 0x25	; 37
    4aa4:	70 e0       	ldi	r23, 0x00	; 0
    4aa6:	8d 2d       	mov	r24, r13
    4aa8:	df 91       	pop	r29
    4aaa:	cf 91       	pop	r28
    4aac:	1f 91       	pop	r17
    4aae:	0f 91       	pop	r16
    4ab0:	ff 90       	pop	r15
    4ab2:	ef 90       	pop	r14
    4ab4:	df 90       	pop	r13
    4ab6:	bf 90       	pop	r11
    4ab8:	af 90       	pop	r10
    4aba:	fb cc       	rjmp	.-1546   	; 0x44b2 <_ZN10W5500Class7writeSnEhjh>

00004abc <_ZN10W5500Class20send_data_processingEhPKhj>:
    4abc:	0f 93       	push	r16
    4abe:	1f 93       	push	r17
    4ac0:	89 01       	movw	r16, r18
    4ac2:	9a 01       	movw	r18, r20
    4ac4:	40 e0       	ldi	r20, 0x00	; 0
    4ac6:	50 e0       	ldi	r21, 0x00	; 0
    4ac8:	bf df       	rcall	.-130    	; 0x4a48 <_ZN10W5500Class27send_data_processing_offsetEhjPKhj>
    4aca:	1f 91       	pop	r17
    4acc:	0f 91       	pop	r16
    4ace:	08 95       	ret

00004ad0 <_ZN10W5500Class4readEjhPhj>:
    4ad0:	df 92       	push	r13
    4ad2:	ef 92       	push	r14
    4ad4:	ff 92       	push	r15
    4ad6:	0f 93       	push	r16
    4ad8:	1f 93       	push	r17
    4ada:	cf 93       	push	r28
    4adc:	df 93       	push	r29
    4ade:	d8 2f       	mov	r29, r24
    4ae0:	d9 2e       	mov	r13, r25
    4ae2:	c6 2f       	mov	r28, r22
    4ae4:	7a 01       	movw	r14, r20
    4ae6:	89 01       	movw	r16, r18
    4ae8:	80 91 59 0a 	lds	r24, 0x0A59	; 0x800a59 <wiznet_SPI_settings>
    4aec:	90 91 5a 0a 	lds	r25, 0x0A5A	; 0x800a5a <wiznet_SPI_settings+0x1>
    4af0:	81 de       	rcall	.-766    	; 0x47f4 <_ZN8SPIClass16beginTransactionE11SPISettings>
    4af2:	b2 de       	rcall	.-668    	; 0x4858 <_ZN10W5500Class5setSSEv>
    4af4:	8d 2d       	mov	r24, r13
    4af6:	98 de       	rcall	.-720    	; 0x4828 <_ZN8SPIClass8transferEh>
    4af8:	8d 2f       	mov	r24, r29
    4afa:	96 de       	rcall	.-724    	; 0x4828 <_ZN8SPIClass8transferEh>
    4afc:	8c 2f       	mov	r24, r28
    4afe:	94 de       	rcall	.-728    	; 0x4828 <_ZN8SPIClass8transferEh>
    4b00:	e7 01       	movw	r28, r14
    4b02:	e0 0e       	add	r14, r16
    4b04:	f1 1e       	adc	r15, r17
    4b06:	ce 15       	cp	r28, r14
    4b08:	df 05       	cpc	r29, r15
    4b0a:	21 f0       	breq	.+8      	; 0x4b14 <_ZN10W5500Class4readEjhPhj+0x44>
    4b0c:	80 e0       	ldi	r24, 0x00	; 0
    4b0e:	8c de       	rcall	.-744    	; 0x4828 <_ZN8SPIClass8transferEh>
    4b10:	89 93       	st	Y+, r24
    4b12:	f9 cf       	rjmp	.-14     	; 0x4b06 <_ZN10W5500Class4readEjhPhj+0x36>
    4b14:	a3 de       	rcall	.-698    	; 0x485c <_ZN10W5500Class7resetSSEv>
    4b16:	8f de       	rcall	.-738    	; 0x4836 <_ZN8SPIClass14endTransactionEv>
    4b18:	c8 01       	movw	r24, r16
    4b1a:	df 91       	pop	r29
    4b1c:	cf 91       	pop	r28
    4b1e:	1f 91       	pop	r17
    4b20:	0f 91       	pop	r16
    4b22:	ff 90       	pop	r15
    4b24:	ef 90       	pop	r14
    4b26:	df 90       	pop	r13
    4b28:	08 95       	ret

00004b2a <_ZN10W5500Class9read_dataEhjPVhj>:
    4b2a:	0f 93       	push	r16
    4b2c:	1f 93       	push	r17
    4b2e:	cf 93       	push	r28
    4b30:	df 93       	push	r29
    4b32:	00 d0       	rcall	.+0      	; 0x4b34 <_ZN10W5500Class9read_dataEhjPVhj+0xa>
    4b34:	cd b7       	in	r28, 0x3d	; 61
    4b36:	de b7       	in	r29, 0x3e	; 62
    4b38:	5a 83       	std	Y+2, r21	; 0x02
    4b3a:	49 83       	std	Y+1, r20	; 0x01
    4b3c:	a9 01       	movw	r20, r18
    4b3e:	98 01       	movw	r18, r16
    4b40:	89 81       	ldd	r24, Y+1	; 0x01
    4b42:	9a 81       	ldd	r25, Y+2	; 0x02
    4b44:	62 95       	swap	r22
    4b46:	66 0f       	add	r22, r22
    4b48:	60 7e       	andi	r22, 0xE0	; 224
    4b4a:	68 5e       	subi	r22, 0xE8	; 232
    4b4c:	0f 90       	pop	r0
    4b4e:	0f 90       	pop	r0
    4b50:	df 91       	pop	r29
    4b52:	cf 91       	pop	r28
    4b54:	1f 91       	pop	r17
    4b56:	0f 91       	pop	r16
    4b58:	bb cf       	rjmp	.-138    	; 0x4ad0 <_ZN10W5500Class4readEjhPhj>

00004b5a <_ZN10W5500Class20recv_data_processingEhPhjh>:
    4b5a:	8f 92       	push	r8
    4b5c:	9f 92       	push	r9
    4b5e:	af 92       	push	r10
    4b60:	bf 92       	push	r11
    4b62:	cf 92       	push	r12
    4b64:	df 92       	push	r13
    4b66:	ef 92       	push	r14
    4b68:	ff 92       	push	r15
    4b6a:	0f 93       	push	r16
    4b6c:	1f 93       	push	r17
    4b6e:	cf 93       	push	r28
    4b70:	df 93       	push	r29
    4b72:	6c 01       	movw	r12, r24
    4b74:	96 2e       	mov	r9, r22
    4b76:	5a 01       	movw	r10, r20
    4b78:	79 01       	movw	r14, r18
    4b7a:	80 2e       	mov	r8, r16
    4b7c:	68 e2       	ldi	r22, 0x28	; 40
    4b7e:	70 e0       	ldi	r23, 0x00	; 0
    4b80:	89 2d       	mov	r24, r9
    4b82:	8c dc       	rcall	.-1768   	; 0x449c <_ZN10W5500Class6readSnEhj>
    4b84:	08 2f       	mov	r16, r24
    4b86:	69 e2       	ldi	r22, 0x29	; 41
    4b88:	70 e0       	ldi	r23, 0x00	; 0
    4b8a:	89 2d       	mov	r24, r9
    4b8c:	87 dc       	rcall	.-1778   	; 0x449c <_ZN10W5500Class6readSnEhj>
    4b8e:	10 e0       	ldi	r17, 0x00	; 0
    4b90:	10 2f       	mov	r17, r16
    4b92:	00 27       	eor	r16, r16
    4b94:	e8 01       	movw	r28, r16
    4b96:	c8 0f       	add	r28, r24
    4b98:	d1 1d       	adc	r29, r1
    4b9a:	87 01       	movw	r16, r14
    4b9c:	95 01       	movw	r18, r10
    4b9e:	ae 01       	movw	r20, r28
    4ba0:	69 2d       	mov	r22, r9
    4ba2:	c6 01       	movw	r24, r12
    4ba4:	c2 df       	rcall	.-124    	; 0x4b2a <_ZN10W5500Class9read_dataEhjPVhj>
    4ba6:	81 10       	cpse	r8, r1
    4ba8:	18 c0       	rjmp	.+48     	; 0x4bda <_ZN10W5500Class20recv_data_processingEhPhjh+0x80>
    4baa:	0c 0f       	add	r16, r28
    4bac:	1d 1f       	adc	r17, r29
    4bae:	41 2f       	mov	r20, r17
    4bb0:	68 e2       	ldi	r22, 0x28	; 40
    4bb2:	70 e0       	ldi	r23, 0x00	; 0
    4bb4:	89 2d       	mov	r24, r9
    4bb6:	7d dc       	rcall	.-1798   	; 0x44b2 <_ZN10W5500Class7writeSnEhjh>
    4bb8:	40 2f       	mov	r20, r16
    4bba:	69 e2       	ldi	r22, 0x29	; 41
    4bbc:	70 e0       	ldi	r23, 0x00	; 0
    4bbe:	89 2d       	mov	r24, r9
    4bc0:	df 91       	pop	r29
    4bc2:	cf 91       	pop	r28
    4bc4:	1f 91       	pop	r17
    4bc6:	0f 91       	pop	r16
    4bc8:	ff 90       	pop	r15
    4bca:	ef 90       	pop	r14
    4bcc:	df 90       	pop	r13
    4bce:	cf 90       	pop	r12
    4bd0:	bf 90       	pop	r11
    4bd2:	af 90       	pop	r10
    4bd4:	9f 90       	pop	r9
    4bd6:	8f 90       	pop	r8
    4bd8:	6c cc       	rjmp	.-1832   	; 0x44b2 <_ZN10W5500Class7writeSnEhjh>
    4bda:	df 91       	pop	r29
    4bdc:	cf 91       	pop	r28
    4bde:	1f 91       	pop	r17
    4be0:	0f 91       	pop	r16
    4be2:	ff 90       	pop	r15
    4be4:	ef 90       	pop	r14
    4be6:	df 90       	pop	r13
    4be8:	cf 90       	pop	r12
    4bea:	bf 90       	pop	r11
    4bec:	af 90       	pop	r10
    4bee:	9f 90       	pop	r9
    4bf0:	8f 90       	pop	r8
    4bf2:	08 95       	ret

00004bf4 <_ZN10W5500Class9execCmdSnEh7SockCMD>:
    4bf4:	cf 93       	push	r28
    4bf6:	c6 2f       	mov	r28, r22
    4bf8:	61 e0       	ldi	r22, 0x01	; 1
    4bfa:	70 e0       	ldi	r23, 0x00	; 0
    4bfc:	8c 2f       	mov	r24, r28
    4bfe:	59 dc       	rcall	.-1870   	; 0x44b2 <_ZN10W5500Class7writeSnEhjh>
    4c00:	61 e0       	ldi	r22, 0x01	; 1
    4c02:	70 e0       	ldi	r23, 0x00	; 0
    4c04:	8c 2f       	mov	r24, r28
    4c06:	4a dc       	rcall	.-1900   	; 0x449c <_ZN10W5500Class6readSnEhj>
    4c08:	81 11       	cpse	r24, r1
    4c0a:	fa cf       	rjmp	.-12     	; 0x4c00 <_ZN10W5500Class9execCmdSnEh7SockCMD+0xc>
    4c0c:	cf 91       	pop	r28
    4c0e:	08 95       	ret

00004c10 <_GLOBAL__sub_I_w5500>:
    // Invert the SPI2X bit
    clockDiv ^= 0x1;

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    4c10:	e9 e5       	ldi	r30, 0x59	; 89
    4c12:	fa e0       	ldi	r31, 0x0A	; 10
    4c14:	80 e5       	ldi	r24, 0x50	; 80
    4c16:	80 83       	st	Z, r24
    spsr = clockDiv & SPI_2XCLOCK_MASK;
    4c18:	81 e0       	ldi	r24, 0x01	; 1
    4c1a:	81 83       	std	Z+1, r24	; 0x01
    4c1c:	08 95       	ret

00004c1e <_ZN5I2CIOC1Ev>:
      // Remove the values which are not inputs and get the value of the pin
      pinVal = this->read() & _dirMask;
      pinVal = ( pinVal >> pin ) & 0x01; // Get the pin value
   }
   return (pinVal);
}
    4c1e:	fc 01       	movw	r30, r24
    4c20:	12 82       	std	Z+2, r1	; 0x02
    4c22:	8f ef       	ldi	r24, 0xFF	; 255
    4c24:	81 83       	std	Z+1, r24	; 0x01
    4c26:	10 82       	st	Z, r1
    4c28:	13 82       	std	Z+3, r1	; 0x03
    4c2a:	08 95       	ret

00004c2c <_ZN5I2CIO8portModeEh>:
    4c2c:	fc 01       	movw	r30, r24
    4c2e:	83 81       	ldd	r24, Z+3	; 0x03
    4c30:	88 23       	and	r24, r24
    4c32:	31 f0       	breq	.+12     	; 0x4c40 <_ZN5I2CIO8portModeEh+0x14>
    4c34:	61 11       	cpse	r22, r1
    4c36:	03 c0       	rjmp	.+6      	; 0x4c3e <_ZN5I2CIO8portModeEh+0x12>
    4c38:	8f ef       	ldi	r24, 0xFF	; 255
    4c3a:	81 83       	std	Z+1, r24	; 0x01
    4c3c:	08 95       	ret
    4c3e:	11 82       	std	Z+1, r1	; 0x01
    4c40:	08 95       	ret

00004c42 <_ZN5I2CIO11isAvailableEh>:
    4c42:	8e ec       	ldi	r24, 0xCE	; 206
    4c44:	9a e0       	ldi	r25, 0x0A	; 10
    4c46:	f0 d5       	rcall	.+3040   	; 0x5828 <_ZN7TwoWire17beginTransmissionEh>
    4c48:	8e ec       	ldi	r24, 0xCE	; 206
    4c4a:	9a e0       	ldi	r25, 0x0A	; 10
    4c4c:	6e d6       	rcall	.+3292   	; 0x592a <_ZN7TwoWire15endTransmissionEv>
    4c4e:	91 e0       	ldi	r25, 0x01	; 1
    4c50:	81 11       	cpse	r24, r1
    4c52:	90 e0       	ldi	r25, 0x00	; 0
    4c54:	89 2f       	mov	r24, r25
    4c56:	08 95       	ret

00004c58 <_ZN5I2CIO5beginEh>:
    4c58:	cf 93       	push	r28
    4c5a:	df 93       	push	r29
    4c5c:	ec 01       	movw	r28, r24
    4c5e:	6a 83       	std	Y+2, r22	; 0x02
    4c60:	8e ec       	ldi	r24, 0xCE	; 206
    4c62:	9a e0       	ldi	r25, 0x0A	; 10
    4c64:	ce d5       	rcall	.+2972   	; 0x5802 <_ZN7TwoWire5beginEv>
    4c66:	6a 81       	ldd	r22, Y+2	; 0x02
    4c68:	ce 01       	movw	r24, r28
    4c6a:	eb df       	rcall	.-42     	; 0x4c42 <_ZN5I2CIO11isAvailableEh>
    4c6c:	8b 83       	std	Y+3, r24	; 0x03
    4c6e:	88 23       	and	r24, r24
    4c70:	21 f0       	breq	.+8      	; 0x4c7a <_ZN5I2CIO5beginEh+0x22>
    4c72:	8e ec       	ldi	r24, 0xCE	; 206
    4c74:	9a e0       	ldi	r25, 0x0A	; 10
    4c76:	01 d5       	rcall	.+2562   	; 0x567a <_ZN7TwoWire4readEv>
    4c78:	88 83       	st	Y, r24
    4c7a:	8b 81       	ldd	r24, Y+3	; 0x03
    4c7c:	90 e0       	ldi	r25, 0x00	; 0
    4c7e:	df 91       	pop	r29
    4c80:	cf 91       	pop	r28
    4c82:	08 95       	ret

00004c84 <_ZN5I2CIO5writeEh>:
}

//
// write
int I2CIO::write ( uint8_t value )
{
    4c84:	cf 93       	push	r28
    4c86:	df 93       	push	r29
   int status = 0;
   
   if ( _initialised )
    4c88:	fc 01       	movw	r30, r24
    4c8a:	23 81       	ldd	r18, Z+3	; 0x03
    4c8c:	22 23       	and	r18, r18
    4c8e:	99 f0       	breq	.+38     	; 0x4cb6 <_ZN5I2CIO5writeEh+0x32>
    4c90:	ec 01       	movw	r28, r24
   {
      // Only write HIGH the values of the ports that have been initialised as
      // outputs updating the output shadow of the device
      _shadow = ( value & ~(_dirMask) );
    4c92:	81 81       	ldd	r24, Z+1	; 0x01
    4c94:	80 95       	com	r24
    4c96:	68 23       	and	r22, r24
    4c98:	60 83       	st	Z, r22
   
      Wire.beginTransmission ( _i2cAddr );
    4c9a:	62 81       	ldd	r22, Z+2	; 0x02
    4c9c:	8e ec       	ldi	r24, 0xCE	; 206
    4c9e:	9a e0       	ldi	r25, 0x0A	; 10
    4ca0:	c3 d5       	rcall	.+2950   	; 0x5828 <_ZN7TwoWire17beginTransmissionEh>
#if (ARDUINO <  100)
      Wire.send ( _shadow );
#else
      Wire.write ( _shadow );
    4ca2:	68 81       	ld	r22, Y
    4ca4:	8e ec       	ldi	r24, 0xCE	; 206
    4ca6:	9a e0       	ldi	r25, 0x0A	; 10
    4ca8:	6e d5       	rcall	.+2780   	; 0x5786 <_ZN7TwoWire5writeEh>
#endif  
      status = Wire.endTransmission ();
    4caa:	8e ec       	ldi	r24, 0xCE	; 206
    4cac:	9a e0       	ldi	r25, 0x0A	; 10
    4cae:	3d d6       	rcall	.+3194   	; 0x592a <_ZN7TwoWire15endTransmissionEv>
    4cb0:	28 2f       	mov	r18, r24
    4cb2:	30 e0       	ldi	r19, 0x00	; 0
    4cb4:	02 c0       	rjmp	.+4      	; 0x4cba <_ZN5I2CIO5writeEh+0x36>

//
// write
int I2CIO::write ( uint8_t value )
{
   int status = 0;
    4cb6:	20 e0       	ldi	r18, 0x00	; 0
    4cb8:	30 e0       	ldi	r19, 0x00	; 0
#else
      Wire.write ( _shadow );
#endif  
      status = Wire.endTransmission ();
   }
   return ( (status == 0) );
    4cba:	81 e0       	ldi	r24, 0x01	; 1
    4cbc:	90 e0       	ldi	r25, 0x00	; 0
    4cbe:	23 2b       	or	r18, r19
    4cc0:	11 f0       	breq	.+4      	; 0x4cc6 <_ZN5I2CIO5writeEh+0x42>
    4cc2:	80 e0       	ldi	r24, 0x00	; 0
    4cc4:	90 e0       	ldi	r25, 0x00	; 0
}
    4cc6:	df 91       	pop	r29
    4cc8:	cf 91       	pop	r28
    4cca:	08 95       	ret

00004ccc <_ZN3LCD15setBacklightPinEh13t_backlighPol>:

// This will 'left justify' text from the cursor
void LCD::noAutoscroll(void) 
{
   _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
   command(LCD_ENTRYMODESET | _displaymode);
    4ccc:	08 95       	ret

00004cce <_ZN3LCD12setBacklightEh>:
    4cce:	08 95       	ret

00004cd0 <_ZN3LCD5writeEh>:
    4cd0:	dc 01       	movw	r26, r24
    4cd2:	ed 91       	ld	r30, X+
    4cd4:	fc 91       	ld	r31, X
    4cd6:	06 84       	ldd	r0, Z+14	; 0x0e
    4cd8:	f7 85       	ldd	r31, Z+15	; 0x0f
    4cda:	e0 2d       	mov	r30, r0
    4cdc:	41 e0       	ldi	r20, 0x01	; 1
    4cde:	09 95       	icall
    4ce0:	81 e0       	ldi	r24, 0x01	; 1
    4ce2:	90 e0       	ldi	r25, 0x00	; 0
    4ce4:	08 95       	ret

00004ce6 <_ZN3LCDC1Ev>:
    4ce6:	fc 01       	movw	r30, r24
    4ce8:	13 82       	std	Z+3, r1	; 0x03
    4cea:	12 82       	std	Z+2, r1	; 0x02
    4cec:	2b e6       	ldi	r18, 0x6B	; 107
    4cee:	38 e0       	ldi	r19, 0x08	; 8
    4cf0:	31 83       	std	Z+1, r19	; 0x01
    4cf2:	20 83       	st	Z, r18
    4cf4:	08 95       	ret

00004cf6 <_ZN3LCD9backlightEv>:
    4cf6:	dc 01       	movw	r26, r24
    4cf8:	ed 91       	ld	r30, X+
    4cfa:	fc 91       	ld	r31, X
    4cfc:	04 84       	ldd	r0, Z+12	; 0x0c
    4cfe:	f5 85       	ldd	r31, Z+13	; 0x0d
    4d00:	e0 2d       	mov	r30, r0
    4d02:	6f ef       	ldi	r22, 0xFF	; 255
    4d04:	09 94       	ijmp

00004d06 <_ZN3LCD11noBacklightEv>:
    4d06:	dc 01       	movw	r26, r24
    4d08:	ed 91       	ld	r30, X+
    4d0a:	fc 91       	ld	r31, X
    4d0c:	04 84       	ldd	r0, Z+12	; 0x0c
    4d0e:	f5 85       	ldd	r31, Z+13	; 0x0d
    4d10:	e0 2d       	mov	r30, r0
    4d12:	60 e0       	ldi	r22, 0x00	; 0
    4d14:	09 94       	ijmp

00004d16 <_ZN3LCD7commandEh>:
    4d16:	dc 01       	movw	r26, r24
    4d18:	ed 91       	ld	r30, X+
    4d1a:	fc 91       	ld	r31, X
    4d1c:	06 84       	ldd	r0, Z+14	; 0x0e
    4d1e:	f7 85       	ldd	r31, Z+15	; 0x0f
    4d20:	e0 2d       	mov	r30, r0
    4d22:	40 e0       	ldi	r20, 0x00	; 0
    4d24:	09 94       	ijmp

00004d26 <_ZN3LCD5clearEv>:
    4d26:	61 e0       	ldi	r22, 0x01	; 1
    4d28:	f6 df       	rcall	.-20     	; 0x4d16 <_ZN3LCD7commandEh>
    4d2a:	80 ed       	ldi	r24, 0xD0	; 208
    4d2c:	97 e0       	ldi	r25, 0x07	; 7
    4d2e:	0c 94 7b 30 	jmp	0x60f6	; 0x60f6 <delayMicroseconds>

00004d32 <_ZN3LCD9setCursorEhh>:
    4d32:	cf 93       	push	r28
    4d34:	df 93       	push	r29
    4d36:	cd b7       	in	r28, 0x3d	; 61
    4d38:	de b7       	in	r29, 0x3e	; 62
    4d3a:	28 97       	sbiw	r28, 0x08	; 8
    4d3c:	0f b6       	in	r0, 0x3f	; 63
    4d3e:	f8 94       	cli
    4d40:	de bf       	out	0x3e, r29	; 62
    4d42:	0f be       	out	0x3f, r0	; 63
    4d44:	cd bf       	out	0x3d, r28	; 61
    4d46:	fc 01       	movw	r30, r24
    4d48:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <_ZN14EthernetClient8_srcportE+0x8>
    4d4c:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <_ZN14EthernetClient8_srcportE+0x9>
    4d50:	a0 91 7b 01 	lds	r26, 0x017B	; 0x80017b <_ZN14EthernetClient8_srcportE+0xa>
    4d54:	b0 91 7c 01 	lds	r27, 0x017C	; 0x80017c <_ZN14EthernetClient8_srcportE+0xb>
    4d58:	8d 83       	std	Y+5, r24	; 0x05
    4d5a:	9e 83       	std	Y+6, r25	; 0x06
    4d5c:	af 83       	std	Y+7, r26	; 0x07
    4d5e:	b8 87       	std	Y+8, r27	; 0x08
    4d60:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <_ZN14EthernetClient8_srcportE+0xc>
    4d64:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <_ZN14EthernetClient8_srcportE+0xd>
    4d68:	a0 91 7f 01 	lds	r26, 0x017F	; 0x80017f <_ZN14EthernetClient8_srcportE+0xe>
    4d6c:	b0 91 80 01 	lds	r27, 0x0180	; 0x800180 <_ZN14EthernetClient8_srcportE+0xf>
    4d70:	89 83       	std	Y+1, r24	; 0x01
    4d72:	9a 83       	std	Y+2, r25	; 0x02
    4d74:	ab 83       	std	Y+3, r26	; 0x03
    4d76:	bc 83       	std	Y+4, r27	; 0x04
    4d78:	87 81       	ldd	r24, Z+7	; 0x07
    4d7a:	48 17       	cp	r20, r24
    4d7c:	10 f0       	brcs	.+4      	; 0x4d82 <_ZN3LCD9setCursorEhh+0x50>
    4d7e:	4f ef       	ldi	r20, 0xFF	; 255
    4d80:	48 0f       	add	r20, r24
    4d82:	90 85       	ldd	r25, Z+8	; 0x08
    4d84:	50 e0       	ldi	r21, 0x00	; 0
    4d86:	de 01       	movw	r26, r28
    4d88:	a4 0f       	add	r26, r20
    4d8a:	b5 1f       	adc	r27, r21
    4d8c:	90 31       	cpi	r25, 0x10	; 16
    4d8e:	29 f4       	brne	.+10     	; 0x4d9a <_ZN3LCD9setCursorEhh+0x68>
    4d90:	84 30       	cpi	r24, 0x04	; 4
    4d92:	19 f4       	brne	.+6      	; 0x4d9a <_ZN3LCD9setCursorEhh+0x68>
    4d94:	11 96       	adiw	r26, 0x01	; 1
    4d96:	9c 91       	ld	r25, X
    4d98:	02 c0       	rjmp	.+4      	; 0x4d9e <_ZN3LCD9setCursorEhh+0x6c>
    4d9a:	15 96       	adiw	r26, 0x05	; 5
    4d9c:	9c 91       	ld	r25, X
    4d9e:	69 0f       	add	r22, r25
    4da0:	60 68       	ori	r22, 0x80	; 128
    4da2:	cf 01       	movw	r24, r30
    4da4:	28 96       	adiw	r28, 0x08	; 8
    4da6:	0f b6       	in	r0, 0x3f	; 63
    4da8:	f8 94       	cli
    4daa:	de bf       	out	0x3e, r29	; 62
    4dac:	0f be       	out	0x3f, r0	; 63
    4dae:	cd bf       	out	0x3d, r28	; 61
    4db0:	df 91       	pop	r29
    4db2:	cf 91       	pop	r28
    4db4:	b0 cf       	rjmp	.-160    	; 0x4d16 <_ZN3LCD7commandEh>

00004db6 <_ZN3LCD9noDisplayEv>:
    4db6:	fc 01       	movw	r30, r24
    4db8:	65 81       	ldd	r22, Z+5	; 0x05
    4dba:	6b 7f       	andi	r22, 0xFB	; 251
    4dbc:	65 83       	std	Z+5, r22	; 0x05
    4dbe:	68 60       	ori	r22, 0x08	; 8
    4dc0:	aa cf       	rjmp	.-172    	; 0x4d16 <_ZN3LCD7commandEh>

00004dc2 <_ZN3LCD7displayEv>:
    4dc2:	fc 01       	movw	r30, r24
    4dc4:	65 81       	ldd	r22, Z+5	; 0x05
    4dc6:	26 2f       	mov	r18, r22
    4dc8:	24 60       	ori	r18, 0x04	; 4
    4dca:	25 83       	std	Z+5, r18	; 0x05
    4dcc:	6c 60       	ori	r22, 0x0C	; 12
    4dce:	a3 cf       	rjmp	.-186    	; 0x4d16 <_ZN3LCD7commandEh>

00004dd0 <_ZN3LCD5beginEhhh>:
    4dd0:	cf 93       	push	r28
    4dd2:	df 93       	push	r29
    4dd4:	ec 01       	movw	r28, r24
    4dd6:	42 30       	cpi	r20, 0x02	; 2
    4dd8:	18 f0       	brcs	.+6      	; 0x4de0 <_ZN3LCD5beginEhhh+0x10>
    4dda:	8c 81       	ldd	r24, Y+4	; 0x04
    4ddc:	88 60       	ori	r24, 0x08	; 8
    4dde:	8c 83       	std	Y+4, r24	; 0x04
    4de0:	4f 83       	std	Y+7, r20	; 0x07
    4de2:	68 87       	std	Y+8, r22	; 0x08
    4de4:	22 23       	and	r18, r18
    4de6:	29 f0       	breq	.+10     	; 0x4df2 <_ZN3LCD5beginEhhh+0x22>
    4de8:	41 30       	cpi	r20, 0x01	; 1
    4dea:	19 f4       	brne	.+6      	; 0x4df2 <_ZN3LCD5beginEhhh+0x22>
    4dec:	8c 81       	ldd	r24, Y+4	; 0x04
    4dee:	84 60       	ori	r24, 0x04	; 4
    4df0:	8c 83       	std	Y+4, r24	; 0x04
    4df2:	64 e6       	ldi	r22, 0x64	; 100
    4df4:	70 e0       	ldi	r23, 0x00	; 0
    4df6:	80 e0       	ldi	r24, 0x00	; 0
    4df8:	90 e0       	ldi	r25, 0x00	; 0
    4dfa:	0e 94 42 30 	call	0x6084	; 0x6084 <delay>
    4dfe:	6c 81       	ldd	r22, Y+4	; 0x04
    4e00:	64 fd       	sbrc	r22, 4
    4e02:	31 c0       	rjmp	.+98     	; 0x4e66 <_ZN3LCD5beginEhhh+0x96>
    4e04:	e8 81       	ld	r30, Y
    4e06:	f9 81       	ldd	r31, Y+1	; 0x01
    4e08:	06 84       	ldd	r0, Z+14	; 0x0e
    4e0a:	f7 85       	ldd	r31, Z+15	; 0x0f
    4e0c:	e0 2d       	mov	r30, r0
    4e0e:	42 e0       	ldi	r20, 0x02	; 2
    4e10:	63 e0       	ldi	r22, 0x03	; 3
    4e12:	ce 01       	movw	r24, r28
    4e14:	09 95       	icall
    4e16:	84 e9       	ldi	r24, 0x94	; 148
    4e18:	91 e1       	ldi	r25, 0x11	; 17
    4e1a:	0e 94 7b 30 	call	0x60f6	; 0x60f6 <delayMicroseconds>
    4e1e:	e8 81       	ld	r30, Y
    4e20:	f9 81       	ldd	r31, Y+1	; 0x01
    4e22:	06 84       	ldd	r0, Z+14	; 0x0e
    4e24:	f7 85       	ldd	r31, Z+15	; 0x0f
    4e26:	e0 2d       	mov	r30, r0
    4e28:	42 e0       	ldi	r20, 0x02	; 2
    4e2a:	63 e0       	ldi	r22, 0x03	; 3
    4e2c:	ce 01       	movw	r24, r28
    4e2e:	09 95       	icall
    4e30:	86 e9       	ldi	r24, 0x96	; 150
    4e32:	90 e0       	ldi	r25, 0x00	; 0
    4e34:	0e 94 7b 30 	call	0x60f6	; 0x60f6 <delayMicroseconds>
    4e38:	e8 81       	ld	r30, Y
    4e3a:	f9 81       	ldd	r31, Y+1	; 0x01
    4e3c:	06 84       	ldd	r0, Z+14	; 0x0e
    4e3e:	f7 85       	ldd	r31, Z+15	; 0x0f
    4e40:	e0 2d       	mov	r30, r0
    4e42:	42 e0       	ldi	r20, 0x02	; 2
    4e44:	63 e0       	ldi	r22, 0x03	; 3
    4e46:	ce 01       	movw	r24, r28
    4e48:	09 95       	icall
    4e4a:	86 e9       	ldi	r24, 0x96	; 150
    4e4c:	90 e0       	ldi	r25, 0x00	; 0
    4e4e:	0e 94 7b 30 	call	0x60f6	; 0x60f6 <delayMicroseconds>
    4e52:	e8 81       	ld	r30, Y
    4e54:	f9 81       	ldd	r31, Y+1	; 0x01
    4e56:	06 84       	ldd	r0, Z+14	; 0x0e
    4e58:	f7 85       	ldd	r31, Z+15	; 0x0f
    4e5a:	e0 2d       	mov	r30, r0
    4e5c:	42 e0       	ldi	r20, 0x02	; 2
    4e5e:	62 e0       	ldi	r22, 0x02	; 2
    4e60:	ce 01       	movw	r24, r28
    4e62:	09 95       	icall
    4e64:	13 c0       	rjmp	.+38     	; 0x4e8c <_ZN3LCD5beginEhhh+0xbc>
    4e66:	60 62       	ori	r22, 0x20	; 32
    4e68:	ce 01       	movw	r24, r28
    4e6a:	55 df       	rcall	.-342    	; 0x4d16 <_ZN3LCD7commandEh>
    4e6c:	84 e9       	ldi	r24, 0x94	; 148
    4e6e:	91 e1       	ldi	r25, 0x11	; 17
    4e70:	0e 94 7b 30 	call	0x60f6	; 0x60f6 <delayMicroseconds>
    4e74:	6c 81       	ldd	r22, Y+4	; 0x04
    4e76:	60 62       	ori	r22, 0x20	; 32
    4e78:	ce 01       	movw	r24, r28
    4e7a:	4d df       	rcall	.-358    	; 0x4d16 <_ZN3LCD7commandEh>
    4e7c:	86 e9       	ldi	r24, 0x96	; 150
    4e7e:	90 e0       	ldi	r25, 0x00	; 0
    4e80:	0e 94 7b 30 	call	0x60f6	; 0x60f6 <delayMicroseconds>
    4e84:	6c 81       	ldd	r22, Y+4	; 0x04
    4e86:	60 62       	ori	r22, 0x20	; 32
    4e88:	ce 01       	movw	r24, r28
    4e8a:	45 df       	rcall	.-374    	; 0x4d16 <_ZN3LCD7commandEh>
    4e8c:	86 e9       	ldi	r24, 0x96	; 150
    4e8e:	90 e0       	ldi	r25, 0x00	; 0
    4e90:	0e 94 7b 30 	call	0x60f6	; 0x60f6 <delayMicroseconds>
    4e94:	6c 81       	ldd	r22, Y+4	; 0x04
    4e96:	60 62       	ori	r22, 0x20	; 32
    4e98:	ce 01       	movw	r24, r28
    4e9a:	3d df       	rcall	.-390    	; 0x4d16 <_ZN3LCD7commandEh>
    4e9c:	8c e3       	ldi	r24, 0x3C	; 60
    4e9e:	90 e0       	ldi	r25, 0x00	; 0
    4ea0:	0e 94 7b 30 	call	0x60f6	; 0x60f6 <delayMicroseconds>
    4ea4:	84 e0       	ldi	r24, 0x04	; 4
    4ea6:	8d 83       	std	Y+5, r24	; 0x05
    4ea8:	ce 01       	movw	r24, r28
    4eaa:	8b df       	rcall	.-234    	; 0x4dc2 <_ZN3LCD7displayEv>
    4eac:	ce 01       	movw	r24, r28
    4eae:	3b df       	rcall	.-394    	; 0x4d26 <_ZN3LCD5clearEv>
    4eb0:	82 e0       	ldi	r24, 0x02	; 2
    4eb2:	8e 83       	std	Y+6, r24	; 0x06
    4eb4:	66 e0       	ldi	r22, 0x06	; 6
    4eb6:	ce 01       	movw	r24, r28
    4eb8:	2e df       	rcall	.-420    	; 0x4d16 <_ZN3LCD7commandEh>
    4eba:	ce 01       	movw	r24, r28
    4ebc:	df 91       	pop	r29
    4ebe:	cf 91       	pop	r28
    4ec0:	1a cf       	rjmp	.-460    	; 0x4cf6 <_ZN3LCD9backlightEv>

00004ec2 <_ZN3LCD10createCharEhPh>:
}

// Write to CGRAM of new characters
void LCD::createChar(uint8_t location, uint8_t charmap[]) 
{
    4ec2:	ef 92       	push	r14
    4ec4:	ff 92       	push	r15
    4ec6:	0f 93       	push	r16
    4ec8:	1f 93       	push	r17
    4eca:	cf 93       	push	r28
    4ecc:	df 93       	push	r29
    4ece:	8c 01       	movw	r16, r24
    4ed0:	7a 01       	movw	r14, r20
   location &= 0x7;            // we only have 8 locations 0-7
   
   command(LCD_SETCGRAMADDR | (location << 3));
    4ed2:	67 70       	andi	r22, 0x07	; 7
    4ed4:	88 e0       	ldi	r24, 0x08	; 8
    4ed6:	68 9f       	mul	r22, r24
    4ed8:	b0 01       	movw	r22, r0
    4eda:	11 24       	eor	r1, r1
    4edc:	60 64       	ori	r22, 0x40	; 64
    4ede:	c8 01       	movw	r24, r16
    4ee0:	1a df       	rcall	.-460    	; 0x4d16 <_ZN3LCD7commandEh>
   delayMicroseconds(30);
    4ee2:	8e e1       	ldi	r24, 0x1E	; 30
    4ee4:	90 e0       	ldi	r25, 0x00	; 0
    4ee6:	0e 94 7b 30 	call	0x60f6	; 0x60f6 <delayMicroseconds>
    4eea:	e7 01       	movw	r28, r14
    4eec:	a8 e0       	ldi	r26, 0x08	; 8
    4eee:	ea 0e       	add	r14, r26
    4ef0:	f1 1c       	adc	r15, r1
   
   for (uint8_t i = 0; i < 8; i++)
   {
      write(charmap[i]);      // call the virtual write method
    4ef2:	69 91       	ld	r22, Y+
    4ef4:	d8 01       	movw	r26, r16
    4ef6:	ed 91       	ld	r30, X+
    4ef8:	fc 91       	ld	r31, X
    4efa:	01 90       	ld	r0, Z+
    4efc:	f0 81       	ld	r31, Z
    4efe:	e0 2d       	mov	r30, r0
    4f00:	c8 01       	movw	r24, r16
    4f02:	09 95       	icall
      delayMicroseconds(40);
    4f04:	88 e2       	ldi	r24, 0x28	; 40
    4f06:	90 e0       	ldi	r25, 0x00	; 0
    4f08:	0e 94 7b 30 	call	0x60f6	; 0x60f6 <delayMicroseconds>
   location &= 0x7;            // we only have 8 locations 0-7
   
   command(LCD_SETCGRAMADDR | (location << 3));
   delayMicroseconds(30);
   
   for (uint8_t i = 0; i < 8; i++)
    4f0c:	ce 15       	cp	r28, r14
    4f0e:	df 05       	cpc	r29, r15
    4f10:	81 f7       	brne	.-32     	; 0x4ef2 <_ZN3LCD10createCharEhPh+0x30>
   {
      write(charmap[i]);      // call the virtual write method
      delayMicroseconds(40);
   }
}
    4f12:	df 91       	pop	r29
    4f14:	cf 91       	pop	r28
    4f16:	1f 91       	pop	r17
    4f18:	0f 91       	pop	r16
    4f1a:	ff 90       	pop	r15
    4f1c:	ef 90       	pop	r14
    4f1e:	08 95       	ret

00004f20 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol>:
LiquidCrystal_I2C::LiquidCrystal_I2C(uint8_t lcd_Addr, uint8_t En, uint8_t Rw,
                                     uint8_t Rs, uint8_t d4, uint8_t d5,
                                     uint8_t d6, uint8_t d7 )
{
   config(lcd_Addr, En, Rw, Rs, d4, d5, d6, d7);
}
    4f20:	21 e0       	ldi	r18, 0x01	; 1
    4f22:	01 c0       	rjmp	.+2      	; 0x4f26 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol+0x6>
    4f24:	22 0f       	add	r18, r18
    4f26:	6a 95       	dec	r22
    4f28:	ea f7       	brpl	.-6      	; 0x4f24 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol+0x4>
    4f2a:	dc 01       	movw	r26, r24
    4f2c:	1b 96       	adiw	r26, 0x0b	; 11
    4f2e:	2c 93       	st	X, r18
    4f30:	1b 97       	sbiw	r26, 0x0b	; 11
    4f32:	19 96       	adiw	r26, 0x09	; 9
    4f34:	4c 93       	st	X, r20
    4f36:	19 97       	sbiw	r26, 0x09	; 9
    4f38:	ed 91       	ld	r30, X+
    4f3a:	fc 91       	ld	r31, X
    4f3c:	04 84       	ldd	r0, Z+12	; 0x0c
    4f3e:	f5 85       	ldd	r31, Z+13	; 0x0d
    4f40:	e0 2d       	mov	r30, r0
    4f42:	60 e0       	ldi	r22, 0x00	; 0
    4f44:	09 94       	ijmp

00004f46 <_ZN17LiquidCrystal_I2C12setBacklightEh>:
    4f46:	fc 01       	movw	r30, r24
    4f48:	83 85       	ldd	r24, Z+11	; 0x0b
    4f4a:	88 23       	and	r24, r24
    4f4c:	89 f0       	breq	.+34     	; 0x4f70 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x2a>
    4f4e:	91 85       	ldd	r25, Z+9	; 0x09
    4f50:	91 11       	cpse	r25, r1
    4f52:	03 c0       	rjmp	.+6      	; 0x4f5a <_ZN17LiquidCrystal_I2C12setBacklightEh+0x14>
    4f54:	61 11       	cpse	r22, r1
    4f56:	05 c0       	rjmp	.+10     	; 0x4f62 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x1c>
    4f58:	06 c0       	rjmp	.+12     	; 0x4f66 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    4f5a:	91 30       	cpi	r25, 0x01	; 1
    4f5c:	21 f4       	brne	.+8      	; 0x4f66 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    4f5e:	61 11       	cpse	r22, r1
    4f60:	02 c0       	rjmp	.+4      	; 0x4f66 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    4f62:	84 87       	std	Z+12, r24	; 0x0c
    4f64:	01 c0       	rjmp	.+2      	; 0x4f68 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x22>
    4f66:	14 86       	std	Z+12, r1	; 0x0c
    4f68:	64 85       	ldd	r22, Z+12	; 0x0c
    4f6a:	cf 01       	movw	r24, r30
    4f6c:	0d 96       	adiw	r24, 0x0d	; 13
    4f6e:	8a ce       	rjmp	.-748    	; 0x4c84 <_ZN5I2CIO5writeEh>
    4f70:	08 95       	ret

00004f72 <_ZN17LiquidCrystal_I2C4initEv>:
    4f72:	0f 93       	push	r16
    4f74:	1f 93       	push	r17
    4f76:	cf 93       	push	r28
    4f78:	df 93       	push	r29
    4f7a:	8c 01       	movw	r16, r24
    4f7c:	ec 01       	movw	r28, r24
    4f7e:	2d 96       	adiw	r28, 0x0d	; 13
    4f80:	fc 01       	movw	r30, r24
    4f82:	62 85       	ldd	r22, Z+10	; 0x0a
    4f84:	ce 01       	movw	r24, r28
    4f86:	68 de       	rcall	.-816    	; 0x4c58 <_ZN5I2CIO5beginEh>
    4f88:	01 97       	sbiw	r24, 0x01	; 1
    4f8a:	59 f4       	brne	.+22     	; 0x4fa2 <_ZN17LiquidCrystal_I2C4initEv+0x30>
    4f8c:	61 e0       	ldi	r22, 0x01	; 1
    4f8e:	ce 01       	movw	r24, r28
    4f90:	4d de       	rcall	.-870    	; 0x4c2c <_ZN5I2CIO8portModeEh>
    4f92:	f8 01       	movw	r30, r16
    4f94:	14 82       	std	Z+4, r1	; 0x04
    4f96:	60 e0       	ldi	r22, 0x00	; 0
    4f98:	ce 01       	movw	r24, r28
    4f9a:	74 de       	rcall	.-792    	; 0x4c84 <_ZN5I2CIO5writeEh>
    4f9c:	81 e0       	ldi	r24, 0x01	; 1
    4f9e:	90 e0       	ldi	r25, 0x00	; 0
    4fa0:	02 c0       	rjmp	.+4      	; 0x4fa6 <_ZN17LiquidCrystal_I2C4initEv+0x34>
    4fa2:	80 e0       	ldi	r24, 0x00	; 0
    4fa4:	90 e0       	ldi	r25, 0x00	; 0
    4fa6:	df 91       	pop	r29
    4fa8:	cf 91       	pop	r28
    4faa:	1f 91       	pop	r17
    4fac:	0f 91       	pop	r16
    4fae:	08 95       	ret

00004fb0 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh>:
    4fb0:	8f 92       	push	r8
    4fb2:	af 92       	push	r10
    4fb4:	cf 92       	push	r12
    4fb6:	ef 92       	push	r14
    4fb8:	0f 93       	push	r16
    4fba:	cf 93       	push	r28
    4fbc:	df 93       	push	r29
    4fbe:	cd b7       	in	r28, 0x3d	; 61
    4fc0:	de b7       	in	r29, 0x3e	; 62
    4fc2:	fc 01       	movw	r30, r24
    4fc4:	62 87       	std	Z+10, r22	; 0x0a
    4fc6:	13 86       	std	Z+11, r1	; 0x0b
    4fc8:	14 86       	std	Z+12, r1	; 0x0c
    4fca:	11 86       	std	Z+9, r1	; 0x09
    4fcc:	81 e0       	ldi	r24, 0x01	; 1
    4fce:	98 2f       	mov	r25, r24
    4fd0:	01 c0       	rjmp	.+2      	; 0x4fd4 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x24>
    4fd2:	99 0f       	add	r25, r25
    4fd4:	4a 95       	dec	r20
    4fd6:	ea f7       	brpl	.-6      	; 0x4fd2 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x22>
    4fd8:	91 8b       	std	Z+17, r25	; 0x11
    4fda:	98 2f       	mov	r25, r24
    4fdc:	01 c0       	rjmp	.+2      	; 0x4fe0 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x30>
    4fde:	99 0f       	add	r25, r25
    4fe0:	2a 95       	dec	r18
    4fe2:	ea f7       	brpl	.-6      	; 0x4fde <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x2e>
    4fe4:	92 8b       	std	Z+18, r25	; 0x12
    4fe6:	98 2f       	mov	r25, r24
    4fe8:	01 c0       	rjmp	.+2      	; 0x4fec <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x3c>
    4fea:	99 0f       	add	r25, r25
    4fec:	0a 95       	dec	r16
    4fee:	ea f7       	brpl	.-6      	; 0x4fea <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x3a>
    4ff0:	93 8b       	std	Z+19, r25	; 0x13
    4ff2:	98 2f       	mov	r25, r24
    4ff4:	01 c0       	rjmp	.+2      	; 0x4ff8 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x48>
    4ff6:	99 0f       	add	r25, r25
    4ff8:	ea 94       	dec	r14
    4ffa:	ea f7       	brpl	.-6      	; 0x4ff6 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x46>
    4ffc:	94 8b       	std	Z+20, r25	; 0x14
    4ffe:	98 2f       	mov	r25, r24
    5000:	01 c0       	rjmp	.+2      	; 0x5004 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x54>
    5002:	99 0f       	add	r25, r25
    5004:	ca 94       	dec	r12
    5006:	ea f7       	brpl	.-6      	; 0x5002 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x52>
    5008:	95 8b       	std	Z+21, r25	; 0x15
    500a:	98 2f       	mov	r25, r24
    500c:	01 c0       	rjmp	.+2      	; 0x5010 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x60>
    500e:	99 0f       	add	r25, r25
    5010:	aa 94       	dec	r10
    5012:	ea f7       	brpl	.-6      	; 0x500e <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x5e>
    5014:	96 8b       	std	Z+22, r25	; 0x16
    5016:	01 c0       	rjmp	.+2      	; 0x501a <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x6a>
    5018:	88 0f       	add	r24, r24
    501a:	8a 94       	dec	r8
    501c:	ea f7       	brpl	.-6      	; 0x5018 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x68>
    501e:	87 8b       	std	Z+23, r24	; 0x17
    5020:	df 91       	pop	r29
    5022:	cf 91       	pop	r28
    5024:	0f 91       	pop	r16
    5026:	ef 90       	pop	r14
    5028:	cf 90       	pop	r12
    502a:	af 90       	pop	r10
    502c:	8f 90       	pop	r8
    502e:	08 95       	ret

00005030 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhhh13t_backlighPol>:

LiquidCrystal_I2C::LiquidCrystal_I2C(uint8_t lcd_Addr, uint8_t En, uint8_t Rw,
    5030:	6f 92       	push	r6
    5032:	7f 92       	push	r7
    5034:	8f 92       	push	r8
    5036:	9f 92       	push	r9
    5038:	af 92       	push	r10
    503a:	bf 92       	push	r11
    503c:	cf 92       	push	r12
    503e:	df 92       	push	r13
    5040:	ef 92       	push	r14
    5042:	ff 92       	push	r15
    5044:	0f 93       	push	r16
    5046:	1f 93       	push	r17
    5048:	cf 93       	push	r28
    504a:	df 93       	push	r29
    504c:	cd b7       	in	r28, 0x3d	; 61
    504e:	de b7       	in	r29, 0x3e	; 62
    5050:	3c 01       	movw	r6, r24
    5052:	d6 2e       	mov	r13, r22
    5054:	b4 2e       	mov	r11, r20
    5056:	92 2e       	mov	r9, r18
    5058:	19 89       	ldd	r17, Y+17	; 0x11
    505a:	fa 88       	ldd	r15, Y+18	; 0x12
                                     uint8_t Rs, uint8_t d4, uint8_t d5,
                                     uint8_t d6, uint8_t d7, uint8_t backlighPin, 
                                     t_backlighPol pol = POSITIVE )
    505c:	44 de       	rcall	.-888    	; 0x4ce6 <_ZN3LCDC1Ev>
    505e:	8f e7       	ldi	r24, 0x7F	; 127
    5060:	98 e0       	ldi	r25, 0x08	; 8
    5062:	f3 01       	movw	r30, r6
    5064:	91 83       	std	Z+1, r25	; 0x01
    5066:	80 83       	st	Z, r24
    5068:	c3 01       	movw	r24, r6
    506a:	0d 96       	adiw	r24, 0x0d	; 13
    506c:	d8 dd       	rcall	.-1104   	; 0x4c1e <_ZN5I2CIOC1Ev>
{
   config(lcd_Addr, En, Rw, Rs, d4, d5, d6, d7);
    506e:	29 2d       	mov	r18, r9
    5070:	4b 2d       	mov	r20, r11
    5072:	6d 2d       	mov	r22, r13
    5074:	c3 01       	movw	r24, r6
    5076:	9c df       	rcall	.-200    	; 0x4fb0 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh>
   setBacklightPin(backlighPin, pol);
    5078:	4f 2d       	mov	r20, r15
    507a:	61 2f       	mov	r22, r17
    507c:	c3 01       	movw	r24, r6
}
    507e:	df 91       	pop	r29
    5080:	cf 91       	pop	r28
    5082:	1f 91       	pop	r17
    5084:	0f 91       	pop	r16
    5086:	ff 90       	pop	r15
    5088:	ef 90       	pop	r14
    508a:	df 90       	pop	r13
    508c:	cf 90       	pop	r12
    508e:	bf 90       	pop	r11
    5090:	af 90       	pop	r10
    5092:	9f 90       	pop	r9
    5094:	8f 90       	pop	r8
    5096:	7f 90       	pop	r7
                                     uint8_t Rs, uint8_t d4, uint8_t d5,
                                     uint8_t d6, uint8_t d7, uint8_t backlighPin, 
                                     t_backlighPol pol = POSITIVE )
{
   config(lcd_Addr, En, Rw, Rs, d4, d5, d6, d7);
   setBacklightPin(backlighPin, pol);
    5098:	6f 90       	pop	r6
    509a:	42 cf       	rjmp	.-380    	; 0x4f20 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol>

0000509c <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
}

//
// pulseEnable
void LiquidCrystal_I2C::pulseEnable (uint8_t data)
{
    509c:	ef 92       	push	r14
    509e:	ff 92       	push	r15
    50a0:	0f 93       	push	r16
    50a2:	1f 93       	push	r17
    50a4:	cf 93       	push	r28
    50a6:	8c 01       	movw	r16, r24
    50a8:	c6 2f       	mov	r28, r22
   _i2cio.write (data | _En);   // En HIGH
    50aa:	7c 01       	movw	r14, r24
    50ac:	8d e0       	ldi	r24, 0x0D	; 13
    50ae:	e8 0e       	add	r14, r24
    50b0:	f1 1c       	adc	r15, r1
    50b2:	f8 01       	movw	r30, r16
    50b4:	61 89       	ldd	r22, Z+17	; 0x11
    50b6:	6c 2b       	or	r22, r28
    50b8:	c7 01       	movw	r24, r14
    50ba:	e4 dd       	rcall	.-1080   	; 0x4c84 <_ZN5I2CIO5writeEh>
   _i2cio.write (data & ~_En);  // En LOW
    50bc:	f8 01       	movw	r30, r16
    50be:	61 89       	ldd	r22, Z+17	; 0x11
    50c0:	60 95       	com	r22
    50c2:	6c 23       	and	r22, r28
    50c4:	c7 01       	movw	r24, r14
    50c6:	cf 91       	pop	r28
    50c8:	1f 91       	pop	r17
    50ca:	0f 91       	pop	r16
    50cc:	ff 90       	pop	r15
//
// pulseEnable
void LiquidCrystal_I2C::pulseEnable (uint8_t data)
{
   _i2cio.write (data | _En);   // En HIGH
   _i2cio.write (data & ~_En);  // En LOW
    50ce:	ef 90       	pop	r14
    50d0:	d9 cd       	rjmp	.-1102   	; 0x4c84 <_ZN5I2CIO5writeEh>

000050d2 <_ZN17LiquidCrystal_I2C10write4bitsEhh>:
}

//
// write4bits
void LiquidCrystal_I2C::write4bits ( uint8_t value, uint8_t mode ) 
{
    50d2:	fc 01       	movw	r30, r24
    50d4:	96 2f       	mov	r25, r22
    50d6:	df 01       	movw	r26, r30
    50d8:	84 e0       	ldi	r24, 0x04	; 4
   uint8_t pinMapValue = 0;
    50da:	60 e0       	ldi	r22, 0x00	; 0
   
   // Map the value to LCD pin mapping
   // --------------------------------
   for ( uint8_t i = 0; i < 4; i++ )
   {
      if ( ( value & 0x1 ) == 1 )
    50dc:	90 ff       	sbrs	r25, 0
    50de:	04 c0       	rjmp	.+8      	; 0x50e8 <_ZN17LiquidCrystal_I2C10write4bitsEhh+0x16>
      {
         pinMapValue |= _data_pins[i];
    50e0:	54 96       	adiw	r26, 0x14	; 20
    50e2:	2c 91       	ld	r18, X
    50e4:	54 97       	sbiw	r26, 0x14	; 20
    50e6:	62 2b       	or	r22, r18
      }
      value = ( value >> 1 );
    50e8:	96 95       	lsr	r25
    50ea:	81 50       	subi	r24, 0x01	; 1
    50ec:	11 96       	adiw	r26, 0x01	; 1
{
   uint8_t pinMapValue = 0;
   
   // Map the value to LCD pin mapping
   // --------------------------------
   for ( uint8_t i = 0; i < 4; i++ )
    50ee:	81 11       	cpse	r24, r1
    50f0:	f5 cf       	rjmp	.-22     	; 0x50dc <_ZN17LiquidCrystal_I2C10write4bitsEhh+0xa>
      value = ( value >> 1 );
   }
   
   // Is it a command or data
   // -----------------------
   if ( mode == DATA )
    50f2:	41 30       	cpi	r20, 0x01	; 1
    50f4:	09 f4       	brne	.+2      	; 0x50f8 <_ZN17LiquidCrystal_I2C10write4bitsEhh+0x26>
   {
      mode = _Rs;
    50f6:	43 89       	ldd	r20, Z+19	; 0x13
    50f8:	94 85       	ldd	r25, Z+12	; 0x0c
    50fa:	69 2b       	or	r22, r25
   }
   
   pinMapValue |= mode | _backlightStsMask;
   pulseEnable ( pinMapValue );
    50fc:	64 2b       	or	r22, r20
    50fe:	cf 01       	movw	r24, r30
    5100:	cd cf       	rjmp	.-102    	; 0x509c <_ZN17LiquidCrystal_I2C11pulseEnableEh>

00005102 <_ZN17LiquidCrystal_I2C4sendEhh>:
//----------------------------------------------------------------------------

//
// send - write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) 
{
    5102:	0f 93       	push	r16
    5104:	1f 93       	push	r17
    5106:	cf 93       	push	r28
    5108:	df 93       	push	r29
    510a:	06 2f       	mov	r16, r22
    510c:	0f 70       	andi	r16, 0x0F	; 15
   // No need to use the delay routines since the time taken to write takes
   // longer that what is needed both for toggling and enable pin an to execute
   // the command.
   
   if ( mode == FOUR_BITS )
    510e:	42 30       	cpi	r20, 0x02	; 2
    5110:	19 f4       	brne	.+6      	; 0x5118 <_ZN17LiquidCrystal_I2C4sendEhh+0x16>
   {
      write4bits( (value & 0x0F), COMMAND );
    5112:	40 e0       	ldi	r20, 0x00	; 0
    5114:	60 2f       	mov	r22, r16
    5116:	0d c0       	rjmp	.+26     	; 0x5132 <_ZN17LiquidCrystal_I2C4sendEhh+0x30>
    5118:	14 2f       	mov	r17, r20
    511a:	ec 01       	movw	r28, r24
   }
   else 
   {
      write4bits( (value >> 4), mode );
    511c:	70 e0       	ldi	r23, 0x00	; 0
    511e:	84 e0       	ldi	r24, 0x04	; 4
    5120:	75 95       	asr	r23
    5122:	67 95       	ror	r22
    5124:	8a 95       	dec	r24
    5126:	e1 f7       	brne	.-8      	; 0x5120 <_ZN17LiquidCrystal_I2C4sendEhh+0x1e>
    5128:	ce 01       	movw	r24, r28
    512a:	d3 df       	rcall	.-90     	; 0x50d2 <_ZN17LiquidCrystal_I2C10write4bitsEhh>
      write4bits( (value & 0x0F), mode);
    512c:	41 2f       	mov	r20, r17
    512e:	60 2f       	mov	r22, r16
    5130:	ce 01       	movw	r24, r28
   }
}
    5132:	df 91       	pop	r29
    5134:	cf 91       	pop	r28
    5136:	1f 91       	pop	r17
      write4bits( (value & 0x0F), COMMAND );
   }
   else 
   {
      write4bits( (value >> 4), mode );
      write4bits( (value & 0x0F), mode);
    5138:	0f 91       	pop	r16
    513a:	cb cf       	rjmp	.-106    	; 0x50d2 <_ZN17LiquidCrystal_I2C10write4bitsEhh>

0000513c <_ZN17LiquidCrystal_I2C5beginEhhh>:
// ---------------------------------------------------------------------------

//
// begin
void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) 
{
    513c:	ff 92       	push	r15
    513e:	0f 93       	push	r16
    5140:	1f 93       	push	r17
    5142:	cf 93       	push	r28
    5144:	df 93       	push	r29
    5146:	ec 01       	movw	r28, r24
    5148:	16 2f       	mov	r17, r22
    514a:	04 2f       	mov	r16, r20
    514c:	f2 2e       	mov	r15, r18
   
   init();     // Initialise the I2C expander interface
    514e:	11 df       	rcall	.-478    	; 0x4f72 <_ZN17LiquidCrystal_I2C4initEv>
   LCD::begin ( cols, lines, dotsize );   
    5150:	2f 2d       	mov	r18, r15
    5152:	40 2f       	mov	r20, r16
    5154:	61 2f       	mov	r22, r17
    5156:	ce 01       	movw	r24, r28
}
    5158:	df 91       	pop	r29
    515a:	cf 91       	pop	r28
    515c:	1f 91       	pop	r17
    515e:	0f 91       	pop	r16
// begin
void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) 
{
   
   init();     // Initialise the I2C expander interface
   LCD::begin ( cols, lines, dotsize );   
    5160:	ff 90       	pop	r15
    5162:	36 ce       	rjmp	.-916    	; 0x4dd0 <_ZN3LCD5beginEhhh>

00005164 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    5164:	cf 93       	push	r28
  uint8_t sreg = SREG;
    5166:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    5168:	f8 94       	cli
  if (!initialized) {
    516a:	80 91 5f 0a 	lds	r24, 0x0A5F	; 0x800a5f <_ZN8SPIClass11initializedE>
    516e:	81 11       	cpse	r24, r1
    5170:	27 c0       	rjmp	.+78     	; 0x51c0 <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    5172:	ec e7       	ldi	r30, 0x7C	; 124
    5174:	f2 e0       	ldi	r31, 0x02	; 2
    5176:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    5178:	ec e5       	ldi	r30, 0x5C	; 92
    517a:	f2 e0       	ldi	r31, 0x02	; 2
    517c:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    517e:	e8 2f       	mov	r30, r24
    5180:	f0 e0       	ldi	r31, 0x00	; 0
    5182:	ee 0f       	add	r30, r30
    5184:	ff 1f       	adc	r31, r31
    5186:	ea 55       	subi	r30, 0x5A	; 90
    5188:	fd 4f       	sbci	r31, 0xFD	; 253
    518a:	a5 91       	lpm	r26, Z+
    518c:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    518e:	ec 91       	ld	r30, X
    5190:	e9 23       	and	r30, r25
    5192:	21 f4       	brne	.+8      	; 0x519c <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    5194:	61 e0       	ldi	r22, 0x01	; 1
    5196:	8a e0       	ldi	r24, 0x0A	; 10
    5198:	0e 94 26 31 	call	0x624c	; 0x624c <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    519c:	61 e0       	ldi	r22, 0x01	; 1
    519e:	8a e0       	ldi	r24, 0x0A	; 10
    51a0:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    51a4:	8c b5       	in	r24, 0x2c	; 44
    51a6:	80 61       	ori	r24, 0x10	; 16
    51a8:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    51aa:	8c b5       	in	r24, 0x2c	; 44
    51ac:	80 64       	ori	r24, 0x40	; 64
    51ae:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    51b0:	61 e0       	ldi	r22, 0x01	; 1
    51b2:	8d e0       	ldi	r24, 0x0D	; 13
    51b4:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <pinMode>
    pinMode(MOSI, OUTPUT);
    51b8:	61 e0       	ldi	r22, 0x01	; 1
    51ba:	8b e0       	ldi	r24, 0x0B	; 11
    51bc:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <pinMode>
  }
  initialized++; // reference count
    51c0:	80 91 5f 0a 	lds	r24, 0x0A5F	; 0x800a5f <_ZN8SPIClass11initializedE>
    51c4:	8f 5f       	subi	r24, 0xFF	; 255
    51c6:	80 93 5f 0a 	sts	0x0A5F, r24	; 0x800a5f <_ZN8SPIClass11initializedE>
  SREG = sreg;
    51ca:	cf bf       	out	0x3f, r28	; 63
}
    51cc:	cf 91       	pop	r28
    51ce:	08 95       	ret

000051d0 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    51d0:	10 92 cd 0a 	sts	0x0ACD, r1	; 0x800acd <twi_state>
    51d4:	81 e0       	ldi	r24, 0x01	; 1
    51d6:	80 93 cb 0a 	sts	0x0ACB, r24	; 0x800acb <twi_sendStop>
    51da:	10 92 ca 0a 	sts	0x0ACA, r1	; 0x800aca <twi_inRepStart>
    51de:	61 e0       	ldi	r22, 0x01	; 1
    51e0:	8d e1       	ldi	r24, 0x1D	; 29
    51e2:	0e 94 26 31 	call	0x624c	; 0x624c <digitalWrite>
    51e6:	61 e0       	ldi	r22, 0x01	; 1
    51e8:	8c e1       	ldi	r24, 0x1C	; 28
    51ea:	0e 94 26 31 	call	0x624c	; 0x624c <digitalWrite>
    51ee:	e9 eb       	ldi	r30, 0xB9	; 185
    51f0:	f0 e0       	ldi	r31, 0x00	; 0
    51f2:	80 81       	ld	r24, Z
    51f4:	8e 7f       	andi	r24, 0xFE	; 254
    51f6:	80 83       	st	Z, r24
    51f8:	80 81       	ld	r24, Z
    51fa:	8d 7f       	andi	r24, 0xFD	; 253
    51fc:	80 83       	st	Z, r24
    51fe:	88 e4       	ldi	r24, 0x48	; 72
    5200:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    5204:	85 e4       	ldi	r24, 0x45	; 69
    5206:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    520a:	08 95       	ret

0000520c <twi_disable>:
    520c:	ec eb       	ldi	r30, 0xBC	; 188
    520e:	f0 e0       	ldi	r31, 0x00	; 0
    5210:	80 81       	ld	r24, Z
    5212:	8a 7b       	andi	r24, 0xBA	; 186
    5214:	80 83       	st	Z, r24
    5216:	60 e0       	ldi	r22, 0x00	; 0
    5218:	8d e1       	ldi	r24, 0x1D	; 29
    521a:	0e 94 26 31 	call	0x624c	; 0x624c <digitalWrite>
    521e:	60 e0       	ldi	r22, 0x00	; 0
    5220:	8c e1       	ldi	r24, 0x1C	; 28
    5222:	0c 94 26 31 	jmp	0x624c	; 0x624c <digitalWrite>

00005226 <twi_setFrequency>:
    5226:	9b 01       	movw	r18, r22
    5228:	ac 01       	movw	r20, r24
    522a:	60 e0       	ldi	r22, 0x00	; 0
    522c:	74 e2       	ldi	r23, 0x24	; 36
    522e:	84 ef       	ldi	r24, 0xF4	; 244
    5230:	90 e0       	ldi	r25, 0x00	; 0
    5232:	0e 94 77 35 	call	0x6aee	; 0x6aee <__udivmodsi4>
    5236:	da 01       	movw	r26, r20
    5238:	c9 01       	movw	r24, r18
    523a:	40 97       	sbiw	r24, 0x10	; 16
    523c:	a1 09       	sbc	r26, r1
    523e:	b1 09       	sbc	r27, r1
    5240:	b6 95       	lsr	r27
    5242:	a7 95       	ror	r26
    5244:	97 95       	ror	r25
    5246:	87 95       	ror	r24
    5248:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    524c:	08 95       	ret

0000524e <twi_readFrom>:
    524e:	41 32       	cpi	r20, 0x21	; 33
    5250:	08 f0       	brcs	.+2      	; 0x5254 <twi_readFrom+0x6>
    5252:	43 c0       	rjmp	.+134    	; 0x52da <twi_readFrom+0x8c>
    5254:	90 91 cd 0a 	lds	r25, 0x0ACD	; 0x800acd <twi_state>
    5258:	91 11       	cpse	r25, r1
    525a:	fc cf       	rjmp	.-8      	; 0x5254 <twi_readFrom+0x6>
    525c:	91 e0       	ldi	r25, 0x01	; 1
    525e:	90 93 cd 0a 	sts	0x0ACD, r25	; 0x800acd <twi_state>
    5262:	20 93 cb 0a 	sts	0x0ACB, r18	; 0x800acb <twi_sendStop>
    5266:	2f ef       	ldi	r18, 0xFF	; 255
    5268:	20 93 60 0a 	sts	0x0A60, r18	; 0x800a60 <twi_error>
    526c:	10 92 a5 0a 	sts	0x0AA5, r1	; 0x800aa5 <twi_masterBufferIndex>
    5270:	24 0f       	add	r18, r20
    5272:	20 93 a4 0a 	sts	0x0AA4, r18	; 0x800aa4 <twi_masterBufferLength>
    5276:	90 93 cc 0a 	sts	0x0ACC, r25	; 0x800acc <twi_slarw>
    527a:	90 91 cc 0a 	lds	r25, 0x0ACC	; 0x800acc <twi_slarw>
    527e:	88 0f       	add	r24, r24
    5280:	89 2b       	or	r24, r25
    5282:	80 93 cc 0a 	sts	0x0ACC, r24	; 0x800acc <twi_slarw>
    5286:	80 91 ca 0a 	lds	r24, 0x0ACA	; 0x800aca <twi_inRepStart>
    528a:	81 30       	cpi	r24, 0x01	; 1
    528c:	61 f4       	brne	.+24     	; 0x52a6 <twi_readFrom+0x58>
    528e:	10 92 ca 0a 	sts	0x0ACA, r1	; 0x800aca <twi_inRepStart>
    5292:	80 91 cc 0a 	lds	r24, 0x0ACC	; 0x800acc <twi_slarw>
    5296:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    529a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    529e:	83 fd       	sbrc	r24, 3
    52a0:	f8 cf       	rjmp	.-16     	; 0x5292 <twi_readFrom+0x44>
    52a2:	85 ec       	ldi	r24, 0xC5	; 197
    52a4:	01 c0       	rjmp	.+2      	; 0x52a8 <twi_readFrom+0x5a>
    52a6:	85 ee       	ldi	r24, 0xE5	; 229
    52a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    52ac:	80 91 cd 0a 	lds	r24, 0x0ACD	; 0x800acd <twi_state>
    52b0:	81 30       	cpi	r24, 0x01	; 1
    52b2:	e1 f3       	breq	.-8      	; 0x52ac <twi_readFrom+0x5e>
    52b4:	80 91 a5 0a 	lds	r24, 0x0AA5	; 0x800aa5 <twi_masterBufferIndex>
    52b8:	84 17       	cp	r24, r20
    52ba:	10 f4       	brcc	.+4      	; 0x52c0 <twi_readFrom+0x72>
    52bc:	40 91 a5 0a 	lds	r20, 0x0AA5	; 0x800aa5 <twi_masterBufferIndex>
    52c0:	a6 ea       	ldi	r26, 0xA6	; 166
    52c2:	ba e0       	ldi	r27, 0x0A	; 10
    52c4:	96 2f       	mov	r25, r22
    52c6:	fb 01       	movw	r30, r22
    52c8:	8e 2f       	mov	r24, r30
    52ca:	89 1b       	sub	r24, r25
    52cc:	84 17       	cp	r24, r20
    52ce:	18 f4       	brcc	.+6      	; 0x52d6 <twi_readFrom+0x88>
    52d0:	8d 91       	ld	r24, X+
    52d2:	81 93       	st	Z+, r24
    52d4:	f9 cf       	rjmp	.-14     	; 0x52c8 <twi_readFrom+0x7a>
    52d6:	84 2f       	mov	r24, r20
    52d8:	08 95       	ret
    52da:	80 e0       	ldi	r24, 0x00	; 0
    52dc:	08 95       	ret

000052de <twi_writeTo>:
    52de:	0f 93       	push	r16
    52e0:	41 32       	cpi	r20, 0x21	; 33
    52e2:	08 f0       	brcs	.+2      	; 0x52e6 <twi_writeTo+0x8>
    52e4:	4a c0       	rjmp	.+148    	; 0x537a <twi_writeTo+0x9c>
    52e6:	90 91 cd 0a 	lds	r25, 0x0ACD	; 0x800acd <twi_state>
    52ea:	91 11       	cpse	r25, r1
    52ec:	fc cf       	rjmp	.-8      	; 0x52e6 <twi_writeTo+0x8>
    52ee:	32 e0       	ldi	r19, 0x02	; 2
    52f0:	30 93 cd 0a 	sts	0x0ACD, r19	; 0x800acd <twi_state>
    52f4:	00 93 cb 0a 	sts	0x0ACB, r16	; 0x800acb <twi_sendStop>
    52f8:	3f ef       	ldi	r19, 0xFF	; 255
    52fa:	30 93 60 0a 	sts	0x0A60, r19	; 0x800a60 <twi_error>
    52fe:	10 92 a5 0a 	sts	0x0AA5, r1	; 0x800aa5 <twi_masterBufferIndex>
    5302:	40 93 a4 0a 	sts	0x0AA4, r20	; 0x800aa4 <twi_masterBufferLength>
    5306:	56 2f       	mov	r21, r22
    5308:	a6 ea       	ldi	r26, 0xA6	; 166
    530a:	ba e0       	ldi	r27, 0x0A	; 10
    530c:	fb 01       	movw	r30, r22
    530e:	3e 2f       	mov	r19, r30
    5310:	35 1b       	sub	r19, r21
    5312:	34 17       	cp	r19, r20
    5314:	18 f4       	brcc	.+6      	; 0x531c <twi_writeTo+0x3e>
    5316:	31 91       	ld	r19, Z+
    5318:	3d 93       	st	X+, r19
    531a:	f9 cf       	rjmp	.-14     	; 0x530e <twi_writeTo+0x30>
    531c:	10 92 cc 0a 	sts	0x0ACC, r1	; 0x800acc <twi_slarw>
    5320:	30 91 cc 0a 	lds	r19, 0x0ACC	; 0x800acc <twi_slarw>
    5324:	88 0f       	add	r24, r24
    5326:	83 2b       	or	r24, r19
    5328:	80 93 cc 0a 	sts	0x0ACC, r24	; 0x800acc <twi_slarw>
    532c:	80 91 ca 0a 	lds	r24, 0x0ACA	; 0x800aca <twi_inRepStart>
    5330:	81 30       	cpi	r24, 0x01	; 1
    5332:	61 f4       	brne	.+24     	; 0x534c <twi_writeTo+0x6e>
    5334:	10 92 ca 0a 	sts	0x0ACA, r1	; 0x800aca <twi_inRepStart>
    5338:	80 91 cc 0a 	lds	r24, 0x0ACC	; 0x800acc <twi_slarw>
    533c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5340:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5344:	83 fd       	sbrc	r24, 3
    5346:	f8 cf       	rjmp	.-16     	; 0x5338 <twi_writeTo+0x5a>
    5348:	85 ec       	ldi	r24, 0xC5	; 197
    534a:	01 c0       	rjmp	.+2      	; 0x534e <twi_writeTo+0x70>
    534c:	85 ee       	ldi	r24, 0xE5	; 229
    534e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5352:	22 23       	and	r18, r18
    5354:	21 f0       	breq	.+8      	; 0x535e <twi_writeTo+0x80>
    5356:	80 91 cd 0a 	lds	r24, 0x0ACD	; 0x800acd <twi_state>
    535a:	82 30       	cpi	r24, 0x02	; 2
    535c:	d1 f3       	breq	.-12     	; 0x5352 <twi_writeTo+0x74>
    535e:	80 91 60 0a 	lds	r24, 0x0A60	; 0x800a60 <twi_error>
    5362:	8f 3f       	cpi	r24, 0xFF	; 255
    5364:	79 f0       	breq	.+30     	; 0x5384 <twi_writeTo+0xa6>
    5366:	80 91 60 0a 	lds	r24, 0x0A60	; 0x800a60 <twi_error>
    536a:	80 32       	cpi	r24, 0x20	; 32
    536c:	41 f0       	breq	.+16     	; 0x537e <twi_writeTo+0xa0>
    536e:	80 91 60 0a 	lds	r24, 0x0A60	; 0x800a60 <twi_error>
    5372:	80 33       	cpi	r24, 0x30	; 48
    5374:	31 f0       	breq	.+12     	; 0x5382 <twi_writeTo+0xa4>
    5376:	94 e0       	ldi	r25, 0x04	; 4
    5378:	05 c0       	rjmp	.+10     	; 0x5384 <twi_writeTo+0xa6>
    537a:	91 e0       	ldi	r25, 0x01	; 1
    537c:	03 c0       	rjmp	.+6      	; 0x5384 <twi_writeTo+0xa6>
    537e:	92 e0       	ldi	r25, 0x02	; 2
    5380:	01 c0       	rjmp	.+2      	; 0x5384 <twi_writeTo+0xa6>
    5382:	93 e0       	ldi	r25, 0x03	; 3
    5384:	89 2f       	mov	r24, r25
    5386:	0f 91       	pop	r16
    5388:	08 95       	ret

0000538a <twi_transmit>:
    538a:	40 91 82 0a 	lds	r20, 0x0A82	; 0x800a82 <twi_txBufferLength>
    538e:	26 2f       	mov	r18, r22
    5390:	30 e0       	ldi	r19, 0x00	; 0
    5392:	24 0f       	add	r18, r20
    5394:	31 1d       	adc	r19, r1
    5396:	21 32       	cpi	r18, 0x21	; 33
    5398:	31 05       	cpc	r19, r1
    539a:	dc f4       	brge	.+54     	; 0x53d2 <twi_transmit+0x48>
    539c:	20 91 cd 0a 	lds	r18, 0x0ACD	; 0x800acd <twi_state>
    53a0:	24 30       	cpi	r18, 0x04	; 4
    53a2:	c9 f4       	brne	.+50     	; 0x53d6 <twi_transmit+0x4c>
    53a4:	fc 01       	movw	r30, r24
    53a6:	80 e0       	ldi	r24, 0x00	; 0
    53a8:	90 e0       	ldi	r25, 0x00	; 0
    53aa:	86 17       	cp	r24, r22
    53ac:	58 f4       	brcc	.+22     	; 0x53c4 <twi_transmit+0x3a>
    53ae:	30 91 82 0a 	lds	r19, 0x0A82	; 0x800a82 <twi_txBufferLength>
    53b2:	21 91       	ld	r18, Z+
    53b4:	dc 01       	movw	r26, r24
    53b6:	ac 57       	subi	r26, 0x7C	; 124
    53b8:	b5 4f       	sbci	r27, 0xF5	; 245
    53ba:	a3 0f       	add	r26, r19
    53bc:	b1 1d       	adc	r27, r1
    53be:	2c 93       	st	X, r18
    53c0:	01 96       	adiw	r24, 0x01	; 1
    53c2:	f3 cf       	rjmp	.-26     	; 0x53aa <twi_transmit+0x20>
    53c4:	80 91 82 0a 	lds	r24, 0x0A82	; 0x800a82 <twi_txBufferLength>
    53c8:	68 0f       	add	r22, r24
    53ca:	60 93 82 0a 	sts	0x0A82, r22	; 0x800a82 <twi_txBufferLength>
    53ce:	80 e0       	ldi	r24, 0x00	; 0
    53d0:	08 95       	ret
    53d2:	81 e0       	ldi	r24, 0x01	; 1
    53d4:	08 95       	ret
    53d6:	82 e0       	ldi	r24, 0x02	; 2
    53d8:	08 95       	ret

000053da <twi_attachSlaveRxEvent>:
    53da:	90 93 c7 0a 	sts	0x0AC7, r25	; 0x800ac7 <twi_onSlaveReceive+0x1>
    53de:	80 93 c6 0a 	sts	0x0AC6, r24	; 0x800ac6 <twi_onSlaveReceive>
    53e2:	08 95       	ret

000053e4 <twi_attachSlaveTxEvent>:
    53e4:	90 93 c9 0a 	sts	0x0AC9, r25	; 0x800ac9 <twi_onSlaveTransmit+0x1>
    53e8:	80 93 c8 0a 	sts	0x0AC8, r24	; 0x800ac8 <twi_onSlaveTransmit>
    53ec:	08 95       	ret

000053ee <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    53ee:	85 ed       	ldi	r24, 0xD5	; 213
    53f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    53f4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    53f8:	84 fd       	sbrc	r24, 4
    53fa:	fc cf       	rjmp	.-8      	; 0x53f4 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    53fc:	10 92 cd 0a 	sts	0x0ACD, r1	; 0x800acd <twi_state>
    5400:	08 95       	ret

00005402 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    5402:	85 ec       	ldi	r24, 0xC5	; 197
    5404:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    5408:	10 92 cd 0a 	sts	0x0ACD, r1	; 0x800acd <twi_state>
    540c:	08 95       	ret

0000540e <__vector_26>:
}

ISR(TWI_vect)
{
    540e:	1f 92       	push	r1
    5410:	0f 92       	push	r0
    5412:	0f b6       	in	r0, 0x3f	; 63
    5414:	0f 92       	push	r0
    5416:	11 24       	eor	r1, r1
    5418:	0b b6       	in	r0, 0x3b	; 59
    541a:	0f 92       	push	r0
    541c:	2f 93       	push	r18
    541e:	3f 93       	push	r19
    5420:	4f 93       	push	r20
    5422:	5f 93       	push	r21
    5424:	6f 93       	push	r22
    5426:	7f 93       	push	r23
    5428:	8f 93       	push	r24
    542a:	9f 93       	push	r25
    542c:	af 93       	push	r26
    542e:	bf 93       	push	r27
    5430:	ef 93       	push	r30
    5432:	ff 93       	push	r31
  switch(TW_STATUS){
    5434:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5438:	88 7f       	andi	r24, 0xF8	; 248
    543a:	80 36       	cpi	r24, 0x60	; 96
    543c:	09 f4       	brne	.+2      	; 0x5440 <__vector_26+0x32>
    543e:	9d c0       	rjmp	.+314    	; 0x557a <__vector_26+0x16c>
    5440:	70 f5       	brcc	.+92     	; 0x549e <__vector_26+0x90>
    5442:	88 32       	cpi	r24, 0x28	; 40
    5444:	09 f4       	brne	.+2      	; 0x5448 <__vector_26+0x3a>
    5446:	5c c0       	rjmp	.+184    	; 0x5500 <__vector_26+0xf2>
    5448:	90 f4       	brcc	.+36     	; 0x546e <__vector_26+0x60>
    544a:	80 31       	cpi	r24, 0x10	; 16
    544c:	09 f4       	brne	.+2      	; 0x5450 <__vector_26+0x42>
    544e:	55 c0       	rjmp	.+170    	; 0x54fa <__vector_26+0xec>
    5450:	38 f4       	brcc	.+14     	; 0x5460 <__vector_26+0x52>
    5452:	88 23       	and	r24, r24
    5454:	09 f4       	brne	.+2      	; 0x5458 <__vector_26+0x4a>
    5456:	f3 c0       	rjmp	.+486    	; 0x563e <__vector_26+0x230>
    5458:	88 30       	cpi	r24, 0x08	; 8
    545a:	09 f4       	brne	.+2      	; 0x545e <__vector_26+0x50>
    545c:	4e c0       	rjmp	.+156    	; 0x54fa <__vector_26+0xec>
    545e:	f2 c0       	rjmp	.+484    	; 0x5644 <__vector_26+0x236>
    5460:	88 31       	cpi	r24, 0x18	; 24
    5462:	09 f4       	brne	.+2      	; 0x5466 <__vector_26+0x58>
    5464:	4d c0       	rjmp	.+154    	; 0x5500 <__vector_26+0xf2>
    5466:	80 32       	cpi	r24, 0x20	; 32
    5468:	09 f4       	brne	.+2      	; 0x546c <__vector_26+0x5e>
    546a:	5e c0       	rjmp	.+188    	; 0x5528 <__vector_26+0x11a>
    546c:	eb c0       	rjmp	.+470    	; 0x5644 <__vector_26+0x236>
    546e:	80 34       	cpi	r24, 0x40	; 64
    5470:	09 f4       	brne	.+2      	; 0x5474 <__vector_26+0x66>
    5472:	69 c0       	rjmp	.+210    	; 0x5546 <__vector_26+0x138>
    5474:	50 f4       	brcc	.+20     	; 0x548a <__vector_26+0x7c>
    5476:	80 33       	cpi	r24, 0x30	; 48
    5478:	09 f4       	brne	.+2      	; 0x547c <__vector_26+0x6e>
    547a:	56 c0       	rjmp	.+172    	; 0x5528 <__vector_26+0x11a>
    547c:	88 33       	cpi	r24, 0x38	; 56
    547e:	09 f0       	breq	.+2      	; 0x5482 <__vector_26+0x74>
    5480:	e1 c0       	rjmp	.+450    	; 0x5644 <__vector_26+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    5482:	80 93 60 0a 	sts	0x0A60, r24	; 0x800a60 <twi_error>
      twi_releaseBus();
    5486:	bd df       	rcall	.-134    	; 0x5402 <twi_releaseBus>
      break;
    5488:	dd c0       	rjmp	.+442    	; 0x5644 <__vector_26+0x236>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    548a:	80 35       	cpi	r24, 0x50	; 80
    548c:	09 f4       	brne	.+2      	; 0x5490 <__vector_26+0x82>
    548e:	4f c0       	rjmp	.+158    	; 0x552e <__vector_26+0x120>
    5490:	88 35       	cpi	r24, 0x58	; 88
    5492:	09 f4       	brne	.+2      	; 0x5496 <__vector_26+0x88>
    5494:	5d c0       	rjmp	.+186    	; 0x5550 <__vector_26+0x142>
    5496:	88 34       	cpi	r24, 0x48	; 72
    5498:	09 f0       	breq	.+2      	; 0x549c <__vector_26+0x8e>
    549a:	d4 c0       	rjmp	.+424    	; 0x5644 <__vector_26+0x236>
    549c:	d2 c0       	rjmp	.+420    	; 0x5642 <__vector_26+0x234>
    549e:	88 39       	cpi	r24, 0x98	; 152
    54a0:	09 f4       	brne	.+2      	; 0x54a4 <__vector_26+0x96>
    54a2:	c3 c0       	rjmp	.+390    	; 0x562a <__vector_26+0x21c>
    54a4:	a8 f4       	brcc	.+42     	; 0x54d0 <__vector_26+0xc2>
    54a6:	88 37       	cpi	r24, 0x78	; 120
    54a8:	09 f4       	brne	.+2      	; 0x54ac <__vector_26+0x9e>
    54aa:	67 c0       	rjmp	.+206    	; 0x557a <__vector_26+0x16c>
    54ac:	38 f4       	brcc	.+14     	; 0x54bc <__vector_26+0xae>
    54ae:	88 36       	cpi	r24, 0x68	; 104
    54b0:	09 f4       	brne	.+2      	; 0x54b4 <__vector_26+0xa6>
    54b2:	63 c0       	rjmp	.+198    	; 0x557a <__vector_26+0x16c>
    54b4:	80 37       	cpi	r24, 0x70	; 112
    54b6:	09 f4       	brne	.+2      	; 0x54ba <__vector_26+0xac>
    54b8:	60 c0       	rjmp	.+192    	; 0x557a <__vector_26+0x16c>
    54ba:	c4 c0       	rjmp	.+392    	; 0x5644 <__vector_26+0x236>
    54bc:	88 38       	cpi	r24, 0x88	; 136
    54be:	09 f4       	brne	.+2      	; 0x54c2 <__vector_26+0xb4>
    54c0:	b4 c0       	rjmp	.+360    	; 0x562a <__vector_26+0x21c>
    54c2:	80 39       	cpi	r24, 0x90	; 144
    54c4:	09 f4       	brne	.+2      	; 0x54c8 <__vector_26+0xba>
    54c6:	5f c0       	rjmp	.+190    	; 0x5586 <__vector_26+0x178>
    54c8:	80 38       	cpi	r24, 0x80	; 128
    54ca:	09 f0       	breq	.+2      	; 0x54ce <__vector_26+0xc0>
    54cc:	bb c0       	rjmp	.+374    	; 0x5644 <__vector_26+0x236>
    54ce:	5b c0       	rjmp	.+182    	; 0x5586 <__vector_26+0x178>
    54d0:	80 3b       	cpi	r24, 0xB0	; 176
    54d2:	09 f4       	brne	.+2      	; 0x54d6 <__vector_26+0xc8>
    54d4:	82 c0       	rjmp	.+260    	; 0x55da <__vector_26+0x1cc>
    54d6:	38 f4       	brcc	.+14     	; 0x54e6 <__vector_26+0xd8>
    54d8:	80 3a       	cpi	r24, 0xA0	; 160
    54da:	09 f4       	brne	.+2      	; 0x54de <__vector_26+0xd0>
    54dc:	66 c0       	rjmp	.+204    	; 0x55aa <__vector_26+0x19c>
    54de:	88 3a       	cpi	r24, 0xA8	; 168
    54e0:	09 f4       	brne	.+2      	; 0x54e4 <__vector_26+0xd6>
    54e2:	7b c0       	rjmp	.+246    	; 0x55da <__vector_26+0x1cc>
    54e4:	af c0       	rjmp	.+350    	; 0x5644 <__vector_26+0x236>
    54e6:	80 3c       	cpi	r24, 0xC0	; 192
    54e8:	09 f4       	brne	.+2      	; 0x54ec <__vector_26+0xde>
    54ea:	a3 c0       	rjmp	.+326    	; 0x5632 <__vector_26+0x224>
    54ec:	88 3c       	cpi	r24, 0xC8	; 200
    54ee:	09 f4       	brne	.+2      	; 0x54f2 <__vector_26+0xe4>
    54f0:	a0 c0       	rjmp	.+320    	; 0x5632 <__vector_26+0x224>
    54f2:	88 3b       	cpi	r24, 0xB8	; 184
    54f4:	09 f4       	brne	.+2      	; 0x54f8 <__vector_26+0xea>
    54f6:	86 c0       	rjmp	.+268    	; 0x5604 <__vector_26+0x1f6>
    54f8:	a5 c0       	rjmp	.+330    	; 0x5644 <__vector_26+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    54fa:	80 91 cc 0a 	lds	r24, 0x0ACC	; 0x800acc <twi_slarw>
    54fe:	10 c0       	rjmp	.+32     	; 0x5520 <__vector_26+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    5500:	90 91 a5 0a 	lds	r25, 0x0AA5	; 0x800aa5 <twi_masterBufferIndex>
    5504:	80 91 a4 0a 	lds	r24, 0x0AA4	; 0x800aa4 <twi_masterBufferLength>
    5508:	98 17       	cp	r25, r24
    550a:	70 f5       	brcc	.+92     	; 0x5568 <__vector_26+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    550c:	e0 91 a5 0a 	lds	r30, 0x0AA5	; 0x800aa5 <twi_masterBufferIndex>
    5510:	81 e0       	ldi	r24, 0x01	; 1
    5512:	8e 0f       	add	r24, r30
    5514:	80 93 a5 0a 	sts	0x0AA5, r24	; 0x800aa5 <twi_masterBufferIndex>
    5518:	f0 e0       	ldi	r31, 0x00	; 0
    551a:	ea 55       	subi	r30, 0x5A	; 90
    551c:	f5 4f       	sbci	r31, 0xF5	; 245
    551e:	80 81       	ld	r24, Z
    5520:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    5524:	85 ec       	ldi	r24, 0xC5	; 197
    5526:	82 c0       	rjmp	.+260    	; 0x562c <__vector_26+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    5528:	80 93 60 0a 	sts	0x0A60, r24	; 0x800a60 <twi_error>
    552c:	8a c0       	rjmp	.+276    	; 0x5642 <__vector_26+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    552e:	e0 91 a5 0a 	lds	r30, 0x0AA5	; 0x800aa5 <twi_masterBufferIndex>
    5532:	81 e0       	ldi	r24, 0x01	; 1
    5534:	8e 0f       	add	r24, r30
    5536:	80 93 a5 0a 	sts	0x0AA5, r24	; 0x800aa5 <twi_masterBufferIndex>
    553a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    553e:	f0 e0       	ldi	r31, 0x00	; 0
    5540:	ea 55       	subi	r30, 0x5A	; 90
    5542:	f5 4f       	sbci	r31, 0xF5	; 245
    5544:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    5546:	90 91 a5 0a 	lds	r25, 0x0AA5	; 0x800aa5 <twi_masterBufferIndex>
    554a:	80 91 a4 0a 	lds	r24, 0x0AA4	; 0x800aa4 <twi_masterBufferLength>
    554e:	6a c0       	rjmp	.+212    	; 0x5624 <__vector_26+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    5550:	e0 91 a5 0a 	lds	r30, 0x0AA5	; 0x800aa5 <twi_masterBufferIndex>
    5554:	81 e0       	ldi	r24, 0x01	; 1
    5556:	8e 0f       	add	r24, r30
    5558:	80 93 a5 0a 	sts	0x0AA5, r24	; 0x800aa5 <twi_masterBufferIndex>
    555c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5560:	f0 e0       	ldi	r31, 0x00	; 0
    5562:	ea 55       	subi	r30, 0x5A	; 90
    5564:	f5 4f       	sbci	r31, 0xF5	; 245
    5566:	80 83       	st	Z, r24
	if (twi_sendStop)
    5568:	80 91 cb 0a 	lds	r24, 0x0ACB	; 0x800acb <twi_sendStop>
    556c:	81 11       	cpse	r24, r1
    556e:	69 c0       	rjmp	.+210    	; 0x5642 <__vector_26+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    5570:	81 e0       	ldi	r24, 0x01	; 1
    5572:	80 93 ca 0a 	sts	0x0ACA, r24	; 0x800aca <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    5576:	84 ea       	ldi	r24, 0xA4	; 164
    5578:	5d c0       	rjmp	.+186    	; 0x5634 <__vector_26+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    557a:	83 e0       	ldi	r24, 0x03	; 3
    557c:	80 93 cd 0a 	sts	0x0ACD, r24	; 0x800acd <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    5580:	10 92 61 0a 	sts	0x0A61, r1	; 0x800a61 <twi_rxBufferIndex>
    5584:	cf cf       	rjmp	.-98     	; 0x5524 <__vector_26+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    5586:	80 91 61 0a 	lds	r24, 0x0A61	; 0x800a61 <twi_rxBufferIndex>
    558a:	80 32       	cpi	r24, 0x20	; 32
    558c:	08 f0       	brcs	.+2      	; 0x5590 <__vector_26+0x182>
    558e:	4d c0       	rjmp	.+154    	; 0x562a <__vector_26+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    5590:	e0 91 61 0a 	lds	r30, 0x0A61	; 0x800a61 <twi_rxBufferIndex>
    5594:	81 e0       	ldi	r24, 0x01	; 1
    5596:	8e 0f       	add	r24, r30
    5598:	80 93 61 0a 	sts	0x0A61, r24	; 0x800a61 <twi_rxBufferIndex>
    559c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    55a0:	f0 e0       	ldi	r31, 0x00	; 0
    55a2:	ee 59       	subi	r30, 0x9E	; 158
    55a4:	f5 4f       	sbci	r31, 0xF5	; 245
    55a6:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    55a8:	bd cf       	rjmp	.-134    	; 0x5524 <__vector_26+0x116>
    55aa:	2b df       	rcall	.-426    	; 0x5402 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    55ac:	80 91 61 0a 	lds	r24, 0x0A61	; 0x800a61 <twi_rxBufferIndex>
    55b0:	80 32       	cpi	r24, 0x20	; 32
    55b2:	30 f4       	brcc	.+12     	; 0x55c0 <__vector_26+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    55b4:	e0 91 61 0a 	lds	r30, 0x0A61	; 0x800a61 <twi_rxBufferIndex>
    55b8:	f0 e0       	ldi	r31, 0x00	; 0
    55ba:	ee 59       	subi	r30, 0x9E	; 158
    55bc:	f5 4f       	sbci	r31, 0xF5	; 245
    55be:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    55c0:	60 91 61 0a 	lds	r22, 0x0A61	; 0x800a61 <twi_rxBufferIndex>
    55c4:	70 e0       	ldi	r23, 0x00	; 0
    55c6:	e0 91 c6 0a 	lds	r30, 0x0AC6	; 0x800ac6 <twi_onSlaveReceive>
    55ca:	f0 91 c7 0a 	lds	r31, 0x0AC7	; 0x800ac7 <twi_onSlaveReceive+0x1>
    55ce:	82 e6       	ldi	r24, 0x62	; 98
    55d0:	9a e0       	ldi	r25, 0x0A	; 10
    55d2:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    55d4:	10 92 61 0a 	sts	0x0A61, r1	; 0x800a61 <twi_rxBufferIndex>
      break;
    55d8:	35 c0       	rjmp	.+106    	; 0x5644 <__vector_26+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    55da:	84 e0       	ldi	r24, 0x04	; 4
    55dc:	80 93 cd 0a 	sts	0x0ACD, r24	; 0x800acd <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    55e0:	10 92 83 0a 	sts	0x0A83, r1	; 0x800a83 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    55e4:	10 92 82 0a 	sts	0x0A82, r1	; 0x800a82 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    55e8:	e0 91 c8 0a 	lds	r30, 0x0AC8	; 0x800ac8 <twi_onSlaveTransmit>
    55ec:	f0 91 c9 0a 	lds	r31, 0x0AC9	; 0x800ac9 <twi_onSlaveTransmit+0x1>
    55f0:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    55f2:	80 91 82 0a 	lds	r24, 0x0A82	; 0x800a82 <twi_txBufferLength>
    55f6:	81 11       	cpse	r24, r1
    55f8:	05 c0       	rjmp	.+10     	; 0x5604 <__vector_26+0x1f6>
        twi_txBufferLength = 1;
    55fa:	81 e0       	ldi	r24, 0x01	; 1
    55fc:	80 93 82 0a 	sts	0x0A82, r24	; 0x800a82 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    5600:	10 92 84 0a 	sts	0x0A84, r1	; 0x800a84 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    5604:	e0 91 83 0a 	lds	r30, 0x0A83	; 0x800a83 <twi_txBufferIndex>
    5608:	81 e0       	ldi	r24, 0x01	; 1
    560a:	8e 0f       	add	r24, r30
    560c:	80 93 83 0a 	sts	0x0A83, r24	; 0x800a83 <twi_txBufferIndex>
    5610:	f0 e0       	ldi	r31, 0x00	; 0
    5612:	ec 57       	subi	r30, 0x7C	; 124
    5614:	f5 4f       	sbci	r31, 0xF5	; 245
    5616:	80 81       	ld	r24, Z
    5618:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    561c:	90 91 83 0a 	lds	r25, 0x0A83	; 0x800a83 <twi_txBufferIndex>
    5620:	80 91 82 0a 	lds	r24, 0x0A82	; 0x800a82 <twi_txBufferLength>
    5624:	98 17       	cp	r25, r24
    5626:	08 f4       	brcc	.+2      	; 0x562a <__vector_26+0x21c>
    5628:	7d cf       	rjmp	.-262    	; 0x5524 <__vector_26+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    562a:	85 e8       	ldi	r24, 0x85	; 133
    562c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5630:	09 c0       	rjmp	.+18     	; 0x5644 <__vector_26+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    5632:	85 ec       	ldi	r24, 0xC5	; 197
    5634:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    5638:	10 92 cd 0a 	sts	0x0ACD, r1	; 0x800acd <twi_state>
      break;
    563c:	03 c0       	rjmp	.+6      	; 0x5644 <__vector_26+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    563e:	10 92 60 0a 	sts	0x0A60, r1	; 0x800a60 <twi_error>
      twi_stop();
    5642:	d5 de       	rcall	.-598    	; 0x53ee <twi_stop>
      break;
  }
}
    5644:	ff 91       	pop	r31
    5646:	ef 91       	pop	r30
    5648:	bf 91       	pop	r27
    564a:	af 91       	pop	r26
    564c:	9f 91       	pop	r25
    564e:	8f 91       	pop	r24
    5650:	7f 91       	pop	r23
    5652:	6f 91       	pop	r22
    5654:	5f 91       	pop	r21
    5656:	4f 91       	pop	r20
    5658:	3f 91       	pop	r19
    565a:	2f 91       	pop	r18
    565c:	0f 90       	pop	r0
    565e:	0b be       	out	0x3b, r0	; 59
    5660:	0f 90       	pop	r0
    5662:	0f be       	out	0x3f, r0	; 63
    5664:	0f 90       	pop	r0
    5666:	1f 90       	pop	r1
    5668:	18 95       	reti

0000566a <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    566a:	80 91 02 0b 	lds	r24, 0x0B02	; 0x800b02 <_ZN7TwoWire14rxBufferLengthE>
    566e:	90 e0       	ldi	r25, 0x00	; 0
    5670:	20 91 03 0b 	lds	r18, 0x0B03	; 0x800b03 <_ZN7TwoWire13rxBufferIndexE>
    5674:	82 1b       	sub	r24, r18
    5676:	91 09       	sbc	r25, r1
    5678:	08 95       	ret

0000567a <_ZN7TwoWire4readEv>:
    567a:	90 91 03 0b 	lds	r25, 0x0B03	; 0x800b03 <_ZN7TwoWire13rxBufferIndexE>
    567e:	80 91 02 0b 	lds	r24, 0x0B02	; 0x800b02 <_ZN7TwoWire14rxBufferLengthE>
    5682:	98 17       	cp	r25, r24
    5684:	50 f4       	brcc	.+20     	; 0x569a <_ZN7TwoWire4readEv+0x20>
    5686:	e9 2f       	mov	r30, r25
    5688:	f0 e0       	ldi	r31, 0x00	; 0
    568a:	ec 5f       	subi	r30, 0xFC	; 252
    568c:	f4 4f       	sbci	r31, 0xF4	; 244
    568e:	20 81       	ld	r18, Z
    5690:	30 e0       	ldi	r19, 0x00	; 0
    5692:	9f 5f       	subi	r25, 0xFF	; 255
    5694:	90 93 03 0b 	sts	0x0B03, r25	; 0x800b03 <_ZN7TwoWire13rxBufferIndexE>
    5698:	02 c0       	rjmp	.+4      	; 0x569e <_ZN7TwoWire4readEv+0x24>
    569a:	2f ef       	ldi	r18, 0xFF	; 255
    569c:	3f ef       	ldi	r19, 0xFF	; 255
    569e:	c9 01       	movw	r24, r18
    56a0:	08 95       	ret

000056a2 <_ZN7TwoWire4peekEv>:
    56a2:	e0 91 03 0b 	lds	r30, 0x0B03	; 0x800b03 <_ZN7TwoWire13rxBufferIndexE>
    56a6:	80 91 02 0b 	lds	r24, 0x0B02	; 0x800b02 <_ZN7TwoWire14rxBufferLengthE>
    56aa:	e8 17       	cp	r30, r24
    56ac:	30 f4       	brcc	.+12     	; 0x56ba <_ZN7TwoWire4peekEv+0x18>
    56ae:	f0 e0       	ldi	r31, 0x00	; 0
    56b0:	ec 5f       	subi	r30, 0xFC	; 252
    56b2:	f4 4f       	sbci	r31, 0xF4	; 244
    56b4:	80 81       	ld	r24, Z
    56b6:	90 e0       	ldi	r25, 0x00	; 0
    56b8:	08 95       	ret
    56ba:	8f ef       	ldi	r24, 0xFF	; 255
    56bc:	9f ef       	ldi	r25, 0xFF	; 255
    56be:	08 95       	ret

000056c0 <_ZN7TwoWire5flushEv>:
    56c0:	08 95       	ret

000056c2 <_ZN7TwoWire16onReceiveServiceEPhi>:
    56c2:	cf 93       	push	r28
    56c4:	df 93       	push	r29
    56c6:	ec 01       	movw	r28, r24
    56c8:	e0 91 da 0a 	lds	r30, 0x0ADA	; 0x800ada <_ZN7TwoWire14user_onReceiveE>
    56cc:	f0 91 db 0a 	lds	r31, 0x0ADB	; 0x800adb <_ZN7TwoWire14user_onReceiveE+0x1>
    56d0:	30 97       	sbiw	r30, 0x00	; 0
    56d2:	f1 f0       	breq	.+60     	; 0x5710 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    56d4:	90 91 03 0b 	lds	r25, 0x0B03	; 0x800b03 <_ZN7TwoWire13rxBufferIndexE>
    56d8:	80 91 02 0b 	lds	r24, 0x0B02	; 0x800b02 <_ZN7TwoWire14rxBufferLengthE>
    56dc:	98 17       	cp	r25, r24
    56de:	c0 f0       	brcs	.+48     	; 0x5710 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    56e0:	90 e0       	ldi	r25, 0x00	; 0
    56e2:	29 2f       	mov	r18, r25
    56e4:	30 e0       	ldi	r19, 0x00	; 0
    56e6:	26 17       	cp	r18, r22
    56e8:	37 07       	cpc	r19, r23
    56ea:	54 f4       	brge	.+20     	; 0x5700 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    56ec:	de 01       	movw	r26, r28
    56ee:	a2 0f       	add	r26, r18
    56f0:	b3 1f       	adc	r27, r19
    56f2:	4c 91       	ld	r20, X
    56f4:	d9 01       	movw	r26, r18
    56f6:	ac 5f       	subi	r26, 0xFC	; 252
    56f8:	b4 4f       	sbci	r27, 0xF4	; 244
    56fa:	4c 93       	st	X, r20
    56fc:	9f 5f       	subi	r25, 0xFF	; 255
    56fe:	f1 cf       	rjmp	.-30     	; 0x56e2 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    5700:	10 92 03 0b 	sts	0x0B03, r1	; 0x800b03 <_ZN7TwoWire13rxBufferIndexE>
    5704:	60 93 02 0b 	sts	0x0B02, r22	; 0x800b02 <_ZN7TwoWire14rxBufferLengthE>
    5708:	cb 01       	movw	r24, r22
    570a:	df 91       	pop	r29
    570c:	cf 91       	pop	r28
    570e:	09 94       	ijmp
    5710:	df 91       	pop	r29
    5712:	cf 91       	pop	r28
    5714:	08 95       	ret

00005716 <_ZN7TwoWire16onRequestServiceEv>:
    5716:	e0 91 dc 0a 	lds	r30, 0x0ADC	; 0x800adc <_ZN7TwoWire14user_onRequestE>
    571a:	f0 91 dd 0a 	lds	r31, 0x0ADD	; 0x800add <_ZN7TwoWire14user_onRequestE+0x1>
    571e:	30 97       	sbiw	r30, 0x00	; 0
    5720:	29 f0       	breq	.+10     	; 0x572c <_ZN7TwoWire16onRequestServiceEv+0x16>
    5722:	10 92 e0 0a 	sts	0x0AE0, r1	; 0x800ae0 <_ZN7TwoWire13txBufferIndexE>
    5726:	10 92 df 0a 	sts	0x0ADF, r1	; 0x800adf <_ZN7TwoWire14txBufferLengthE>
    572a:	09 94       	ijmp
    572c:	08 95       	ret

0000572e <_ZN7TwoWire5writeEPKhj>:
    572e:	cf 92       	push	r12
    5730:	df 92       	push	r13
    5732:	ef 92       	push	r14
    5734:	ff 92       	push	r15
    5736:	0f 93       	push	r16
    5738:	1f 93       	push	r17
    573a:	cf 93       	push	r28
    573c:	df 93       	push	r29
    573e:	7c 01       	movw	r14, r24
    5740:	cb 01       	movw	r24, r22
    5742:	8a 01       	movw	r16, r20
    5744:	20 91 de 0a 	lds	r18, 0x0ADE	; 0x800ade <_ZN7TwoWire12transmittingE>
    5748:	22 23       	and	r18, r18
    574a:	89 f0       	breq	.+34     	; 0x576e <_ZN7TwoWire5writeEPKhj+0x40>
    574c:	eb 01       	movw	r28, r22
    574e:	6b 01       	movw	r12, r22
    5750:	c4 0e       	add	r12, r20
    5752:	d5 1e       	adc	r13, r21
    5754:	cc 15       	cp	r28, r12
    5756:	dd 05       	cpc	r29, r13
    5758:	61 f0       	breq	.+24     	; 0x5772 <_ZN7TwoWire5writeEPKhj+0x44>
    575a:	69 91       	ld	r22, Y+
    575c:	d7 01       	movw	r26, r14
    575e:	ed 91       	ld	r30, X+
    5760:	fc 91       	ld	r31, X
    5762:	01 90       	ld	r0, Z+
    5764:	f0 81       	ld	r31, Z
    5766:	e0 2d       	mov	r30, r0
    5768:	c7 01       	movw	r24, r14
    576a:	09 95       	icall
    576c:	f3 cf       	rjmp	.-26     	; 0x5754 <_ZN7TwoWire5writeEPKhj+0x26>
    576e:	64 2f       	mov	r22, r20
    5770:	0c de       	rcall	.-1000   	; 0x538a <twi_transmit>
    5772:	c8 01       	movw	r24, r16
    5774:	df 91       	pop	r29
    5776:	cf 91       	pop	r28
    5778:	1f 91       	pop	r17
    577a:	0f 91       	pop	r16
    577c:	ff 90       	pop	r15
    577e:	ef 90       	pop	r14
    5780:	df 90       	pop	r13
    5782:	cf 90       	pop	r12
    5784:	08 95       	ret

00005786 <_ZN7TwoWire5writeEh>:
    5786:	cf 93       	push	r28
    5788:	df 93       	push	r29
    578a:	1f 92       	push	r1
    578c:	cd b7       	in	r28, 0x3d	; 61
    578e:	de b7       	in	r29, 0x3e	; 62
    5790:	69 83       	std	Y+1, r22	; 0x01
    5792:	20 91 de 0a 	lds	r18, 0x0ADE	; 0x800ade <_ZN7TwoWire12transmittingE>
    5796:	22 23       	and	r18, r18
    5798:	d1 f0       	breq	.+52     	; 0x57ce <_ZN7TwoWire5writeEh+0x48>
    579a:	20 91 df 0a 	lds	r18, 0x0ADF	; 0x800adf <_ZN7TwoWire14txBufferLengthE>
    579e:	20 32       	cpi	r18, 0x20	; 32
    57a0:	40 f0       	brcs	.+16     	; 0x57b2 <_ZN7TwoWire5writeEh+0x2c>
    57a2:	21 e0       	ldi	r18, 0x01	; 1
    57a4:	30 e0       	ldi	r19, 0x00	; 0
    57a6:	fc 01       	movw	r30, r24
    57a8:	33 83       	std	Z+3, r19	; 0x03
    57aa:	22 83       	std	Z+2, r18	; 0x02
    57ac:	80 e0       	ldi	r24, 0x00	; 0
    57ae:	90 e0       	ldi	r25, 0x00	; 0
    57b0:	14 c0       	rjmp	.+40     	; 0x57da <_ZN7TwoWire5writeEh+0x54>
    57b2:	80 91 e0 0a 	lds	r24, 0x0AE0	; 0x800ae0 <_ZN7TwoWire13txBufferIndexE>
    57b6:	e8 2f       	mov	r30, r24
    57b8:	f0 e0       	ldi	r31, 0x00	; 0
    57ba:	ef 51       	subi	r30, 0x1F	; 31
    57bc:	f5 4f       	sbci	r31, 0xF5	; 245
    57be:	99 81       	ldd	r25, Y+1	; 0x01
    57c0:	90 83       	st	Z, r25
    57c2:	8f 5f       	subi	r24, 0xFF	; 255
    57c4:	80 93 e0 0a 	sts	0x0AE0, r24	; 0x800ae0 <_ZN7TwoWire13txBufferIndexE>
    57c8:	80 93 df 0a 	sts	0x0ADF, r24	; 0x800adf <_ZN7TwoWire14txBufferLengthE>
    57cc:	04 c0       	rjmp	.+8      	; 0x57d6 <_ZN7TwoWire5writeEh+0x50>
    57ce:	61 e0       	ldi	r22, 0x01	; 1
    57d0:	ce 01       	movw	r24, r28
    57d2:	01 96       	adiw	r24, 0x01	; 1
    57d4:	da dd       	rcall	.-1100   	; 0x538a <twi_transmit>
    57d6:	81 e0       	ldi	r24, 0x01	; 1
    57d8:	90 e0       	ldi	r25, 0x00	; 0
    57da:	0f 90       	pop	r0
    57dc:	df 91       	pop	r29
    57de:	cf 91       	pop	r28
    57e0:	08 95       	ret

000057e2 <_ZN7TwoWireC1Ev>:
    57e2:	fc 01       	movw	r30, r24
    57e4:	13 82       	std	Z+3, r1	; 0x03
    57e6:	12 82       	std	Z+2, r1	; 0x02
    57e8:	88 ee       	ldi	r24, 0xE8	; 232
    57ea:	93 e0       	ldi	r25, 0x03	; 3
    57ec:	a0 e0       	ldi	r26, 0x00	; 0
    57ee:	b0 e0       	ldi	r27, 0x00	; 0
    57f0:	84 83       	std	Z+4, r24	; 0x04
    57f2:	95 83       	std	Z+5, r25	; 0x05
    57f4:	a6 83       	std	Z+6, r26	; 0x06
    57f6:	b7 83       	std	Z+7, r27	; 0x07
    57f8:	83 e9       	ldi	r24, 0x93	; 147
    57fa:	98 e0       	ldi	r25, 0x08	; 8
    57fc:	91 83       	std	Z+1, r25	; 0x01
    57fe:	80 83       	st	Z, r24
    5800:	08 95       	ret

00005802 <_ZN7TwoWire5beginEv>:
    5802:	10 92 03 0b 	sts	0x0B03, r1	; 0x800b03 <_ZN7TwoWire13rxBufferIndexE>
    5806:	10 92 02 0b 	sts	0x0B02, r1	; 0x800b02 <_ZN7TwoWire14rxBufferLengthE>
    580a:	10 92 e0 0a 	sts	0x0AE0, r1	; 0x800ae0 <_ZN7TwoWire13txBufferIndexE>
    580e:	10 92 df 0a 	sts	0x0ADF, r1	; 0x800adf <_ZN7TwoWire14txBufferLengthE>
    5812:	de dc       	rcall	.-1604   	; 0x51d0 <twi_init>
    5814:	8b e8       	ldi	r24, 0x8B	; 139
    5816:	9b e2       	ldi	r25, 0x2B	; 43
    5818:	e5 dd       	rcall	.-1078   	; 0x53e4 <twi_attachSlaveTxEvent>
    581a:	81 e6       	ldi	r24, 0x61	; 97
    581c:	9b e2       	ldi	r25, 0x2B	; 43
    581e:	dd cd       	rjmp	.-1094   	; 0x53da <twi_attachSlaveRxEvent>

00005820 <_ZN7TwoWire3endEv>:
    5820:	f5 cc       	rjmp	.-1558   	; 0x520c <twi_disable>

00005822 <_ZN7TwoWire8setClockEm>:
    5822:	cb 01       	movw	r24, r22
    5824:	ba 01       	movw	r22, r20
    5826:	ff cc       	rjmp	.-1538   	; 0x5226 <twi_setFrequency>

00005828 <_ZN7TwoWire17beginTransmissionEh>:
    5828:	81 e0       	ldi	r24, 0x01	; 1
    582a:	80 93 de 0a 	sts	0x0ADE, r24	; 0x800ade <_ZN7TwoWire12transmittingE>
    582e:	60 93 01 0b 	sts	0x0B01, r22	; 0x800b01 <_ZN7TwoWire9txAddressE>
    5832:	10 92 e0 0a 	sts	0x0AE0, r1	; 0x800ae0 <_ZN7TwoWire13txBufferIndexE>
    5836:	10 92 df 0a 	sts	0x0ADF, r1	; 0x800adf <_ZN7TwoWire14txBufferLengthE>
    583a:	08 95       	ret

0000583c <_ZN7TwoWire17beginTransmissionEi>:
    583c:	f5 cf       	rjmp	.-22     	; 0x5828 <_ZN7TwoWire17beginTransmissionEh>

0000583e <_ZN7TwoWire15endTransmissionEh>:
    583e:	0f 93       	push	r16
    5840:	06 2f       	mov	r16, r22
    5842:	21 e0       	ldi	r18, 0x01	; 1
    5844:	40 91 df 0a 	lds	r20, 0x0ADF	; 0x800adf <_ZN7TwoWire14txBufferLengthE>
    5848:	61 ee       	ldi	r22, 0xE1	; 225
    584a:	7a e0       	ldi	r23, 0x0A	; 10
    584c:	80 91 01 0b 	lds	r24, 0x0B01	; 0x800b01 <_ZN7TwoWire9txAddressE>
    5850:	46 dd       	rcall	.-1396   	; 0x52de <twi_writeTo>
    5852:	10 92 e0 0a 	sts	0x0AE0, r1	; 0x800ae0 <_ZN7TwoWire13txBufferIndexE>
    5856:	10 92 df 0a 	sts	0x0ADF, r1	; 0x800adf <_ZN7TwoWire14txBufferLengthE>
    585a:	10 92 de 0a 	sts	0x0ADE, r1	; 0x800ade <_ZN7TwoWire12transmittingE>
    585e:	0f 91       	pop	r16
    5860:	08 95       	ret

00005862 <_ZN7TwoWire11requestFromEhhmhh>:
    5862:	4f 92       	push	r4
    5864:	5f 92       	push	r5
    5866:	6f 92       	push	r6
    5868:	7f 92       	push	r7
    586a:	af 92       	push	r10
    586c:	bf 92       	push	r11
    586e:	cf 92       	push	r12
    5870:	ef 92       	push	r14
    5872:	ff 92       	push	r15
    5874:	0f 93       	push	r16
    5876:	1f 93       	push	r17
    5878:	cf 93       	push	r28
    587a:	df 93       	push	r29
    587c:	5c 01       	movw	r10, r24
    587e:	f6 2e       	mov	r15, r22
    5880:	d4 2f       	mov	r29, r20
    5882:	28 01       	movw	r4, r16
    5884:	39 01       	movw	r6, r18
    5886:	ee 20       	and	r14, r14
    5888:	11 f1       	breq	.+68     	; 0x58ce <_ZN7TwoWire11requestFromEhhmhh+0x6c>
    588a:	ce df       	rcall	.-100    	; 0x5828 <_ZN7TwoWire17beginTransmissionEh>
    588c:	ce 2d       	mov	r28, r14
    588e:	c4 30       	cpi	r28, 0x04	; 4
    5890:	08 f0       	brcs	.+2      	; 0x5894 <_ZN7TwoWire11requestFromEhhmhh+0x32>
    5892:	c3 e0       	ldi	r28, 0x03	; 3
    5894:	c1 50       	subi	r28, 0x01	; 1
    5896:	c0 f0       	brcs	.+48     	; 0x58c8 <_ZN7TwoWire11requestFromEhhmhh+0x66>
    5898:	28 e0       	ldi	r18, 0x08	; 8
    589a:	c2 9f       	mul	r28, r18
    589c:	c0 01       	movw	r24, r0
    589e:	11 24       	eor	r1, r1
    58a0:	a3 01       	movw	r20, r6
    58a2:	92 01       	movw	r18, r4
    58a4:	04 c0       	rjmp	.+8      	; 0x58ae <_ZN7TwoWire11requestFromEhhmhh+0x4c>
    58a6:	56 95       	lsr	r21
    58a8:	47 95       	ror	r20
    58aa:	37 95       	ror	r19
    58ac:	27 95       	ror	r18
    58ae:	8a 95       	dec	r24
    58b0:	d2 f7       	brpl	.-12     	; 0x58a6 <_ZN7TwoWire11requestFromEhhmhh+0x44>
    58b2:	ca 01       	movw	r24, r20
    58b4:	b9 01       	movw	r22, r18
    58b6:	d5 01       	movw	r26, r10
    58b8:	ed 91       	ld	r30, X+
    58ba:	fc 91       	ld	r31, X
    58bc:	01 90       	ld	r0, Z+
    58be:	f0 81       	ld	r31, Z
    58c0:	e0 2d       	mov	r30, r0
    58c2:	c5 01       	movw	r24, r10
    58c4:	09 95       	icall
    58c6:	e6 cf       	rjmp	.-52     	; 0x5894 <_ZN7TwoWire11requestFromEhhmhh+0x32>
    58c8:	60 e0       	ldi	r22, 0x00	; 0
    58ca:	c5 01       	movw	r24, r10
    58cc:	b8 df       	rcall	.-144    	; 0x583e <_ZN7TwoWire15endTransmissionEh>
    58ce:	4d 2f       	mov	r20, r29
    58d0:	d1 32       	cpi	r29, 0x21	; 33
    58d2:	08 f0       	brcs	.+2      	; 0x58d6 <_ZN7TwoWire11requestFromEhhmhh+0x74>
    58d4:	40 e2       	ldi	r20, 0x20	; 32
    58d6:	2c 2d       	mov	r18, r12
    58d8:	64 e0       	ldi	r22, 0x04	; 4
    58da:	7b e0       	ldi	r23, 0x0B	; 11
    58dc:	8f 2d       	mov	r24, r15
    58de:	b7 dc       	rcall	.-1682   	; 0x524e <twi_readFrom>
    58e0:	10 92 03 0b 	sts	0x0B03, r1	; 0x800b03 <_ZN7TwoWire13rxBufferIndexE>
    58e4:	80 93 02 0b 	sts	0x0B02, r24	; 0x800b02 <_ZN7TwoWire14rxBufferLengthE>
    58e8:	df 91       	pop	r29
    58ea:	cf 91       	pop	r28
    58ec:	1f 91       	pop	r17
    58ee:	0f 91       	pop	r16
    58f0:	ff 90       	pop	r15
    58f2:	ef 90       	pop	r14
    58f4:	cf 90       	pop	r12
    58f6:	bf 90       	pop	r11
    58f8:	af 90       	pop	r10
    58fa:	7f 90       	pop	r7
    58fc:	6f 90       	pop	r6
    58fe:	5f 90       	pop	r5
    5900:	4f 90       	pop	r4
    5902:	08 95       	ret

00005904 <_ZN7TwoWire11requestFromEhhh>:
    5904:	cf 92       	push	r12
    5906:	ef 92       	push	r14
    5908:	0f 93       	push	r16
    590a:	1f 93       	push	r17
    590c:	c2 2e       	mov	r12, r18
    590e:	e1 2c       	mov	r14, r1
    5910:	00 e0       	ldi	r16, 0x00	; 0
    5912:	10 e0       	ldi	r17, 0x00	; 0
    5914:	98 01       	movw	r18, r16
    5916:	a5 df       	rcall	.-182    	; 0x5862 <_ZN7TwoWire11requestFromEhhmhh>
    5918:	1f 91       	pop	r17
    591a:	0f 91       	pop	r16
    591c:	ef 90       	pop	r14
    591e:	cf 90       	pop	r12
    5920:	08 95       	ret

00005922 <_ZN7TwoWire11requestFromEhh>:
    5922:	21 e0       	ldi	r18, 0x01	; 1
    5924:	ef cf       	rjmp	.-34     	; 0x5904 <_ZN7TwoWire11requestFromEhhh>

00005926 <_ZN7TwoWire11requestFromEii>:
    5926:	21 e0       	ldi	r18, 0x01	; 1
    5928:	ed cf       	rjmp	.-38     	; 0x5904 <_ZN7TwoWire11requestFromEhhh>

0000592a <_ZN7TwoWire15endTransmissionEv>:
    592a:	61 e0       	ldi	r22, 0x01	; 1
    592c:	88 cf       	rjmp	.-240    	; 0x583e <_ZN7TwoWire15endTransmissionEh>

0000592e <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    592e:	8e ec       	ldi	r24, 0xCE	; 206
    5930:	9a e0       	ldi	r25, 0x0A	; 10
    5932:	57 cf       	rjmp	.-338    	; 0x57e2 <_ZN7TwoWireC1Ev>

00005934 <__cmpsf2>:
    5934:	a8 d0       	rcall	.+336    	; 0x5a86 <__fp_cmp>
    5936:	08 f4       	brcc	.+2      	; 0x593a <__cmpsf2+0x6>
    5938:	81 e0       	ldi	r24, 0x01	; 1
    593a:	08 95       	ret

0000593c <__divsf3>:
    593c:	0c d0       	rcall	.+24     	; 0x5956 <__divsf3x>
    593e:	de c0       	rjmp	.+444    	; 0x5afc <__fp_round>
    5940:	d6 d0       	rcall	.+428    	; 0x5aee <__fp_pscB>
    5942:	40 f0       	brcs	.+16     	; 0x5954 <__divsf3+0x18>
    5944:	cd d0       	rcall	.+410    	; 0x5ae0 <__fp_pscA>
    5946:	30 f0       	brcs	.+12     	; 0x5954 <__divsf3+0x18>
    5948:	21 f4       	brne	.+8      	; 0x5952 <__divsf3+0x16>
    594a:	5f 3f       	cpi	r21, 0xFF	; 255
    594c:	19 f0       	breq	.+6      	; 0x5954 <__divsf3+0x18>
    594e:	bf c0       	rjmp	.+382    	; 0x5ace <__fp_inf>
    5950:	51 11       	cpse	r21, r1
    5952:	08 c1       	rjmp	.+528    	; 0x5b64 <__fp_szero>
    5954:	c2 c0       	rjmp	.+388    	; 0x5ada <__fp_nan>

00005956 <__divsf3x>:
    5956:	e3 d0       	rcall	.+454    	; 0x5b1e <__fp_split3>
    5958:	98 f3       	brcs	.-26     	; 0x5940 <__divsf3+0x4>

0000595a <__divsf3_pse>:
    595a:	99 23       	and	r25, r25
    595c:	c9 f3       	breq	.-14     	; 0x5950 <__divsf3+0x14>
    595e:	55 23       	and	r21, r21
    5960:	b1 f3       	breq	.-20     	; 0x594e <__divsf3+0x12>
    5962:	95 1b       	sub	r25, r21
    5964:	55 0b       	sbc	r21, r21
    5966:	bb 27       	eor	r27, r27
    5968:	aa 27       	eor	r26, r26
    596a:	62 17       	cp	r22, r18
    596c:	73 07       	cpc	r23, r19
    596e:	84 07       	cpc	r24, r20
    5970:	38 f0       	brcs	.+14     	; 0x5980 <__divsf3_pse+0x26>
    5972:	9f 5f       	subi	r25, 0xFF	; 255
    5974:	5f 4f       	sbci	r21, 0xFF	; 255
    5976:	22 0f       	add	r18, r18
    5978:	33 1f       	adc	r19, r19
    597a:	44 1f       	adc	r20, r20
    597c:	aa 1f       	adc	r26, r26
    597e:	a9 f3       	breq	.-22     	; 0x596a <__divsf3_pse+0x10>
    5980:	33 d0       	rcall	.+102    	; 0x59e8 <__divsf3_pse+0x8e>
    5982:	0e 2e       	mov	r0, r30
    5984:	3a f0       	brmi	.+14     	; 0x5994 <__divsf3_pse+0x3a>
    5986:	e0 e8       	ldi	r30, 0x80	; 128
    5988:	30 d0       	rcall	.+96     	; 0x59ea <__divsf3_pse+0x90>
    598a:	91 50       	subi	r25, 0x01	; 1
    598c:	50 40       	sbci	r21, 0x00	; 0
    598e:	e6 95       	lsr	r30
    5990:	00 1c       	adc	r0, r0
    5992:	ca f7       	brpl	.-14     	; 0x5986 <__divsf3_pse+0x2c>
    5994:	29 d0       	rcall	.+82     	; 0x59e8 <__divsf3_pse+0x8e>
    5996:	fe 2f       	mov	r31, r30
    5998:	27 d0       	rcall	.+78     	; 0x59e8 <__divsf3_pse+0x8e>
    599a:	66 0f       	add	r22, r22
    599c:	77 1f       	adc	r23, r23
    599e:	88 1f       	adc	r24, r24
    59a0:	bb 1f       	adc	r27, r27
    59a2:	26 17       	cp	r18, r22
    59a4:	37 07       	cpc	r19, r23
    59a6:	48 07       	cpc	r20, r24
    59a8:	ab 07       	cpc	r26, r27
    59aa:	b0 e8       	ldi	r27, 0x80	; 128
    59ac:	09 f0       	breq	.+2      	; 0x59b0 <__divsf3_pse+0x56>
    59ae:	bb 0b       	sbc	r27, r27
    59b0:	80 2d       	mov	r24, r0
    59b2:	bf 01       	movw	r22, r30
    59b4:	ff 27       	eor	r31, r31
    59b6:	93 58       	subi	r25, 0x83	; 131
    59b8:	5f 4f       	sbci	r21, 0xFF	; 255
    59ba:	2a f0       	brmi	.+10     	; 0x59c6 <__divsf3_pse+0x6c>
    59bc:	9e 3f       	cpi	r25, 0xFE	; 254
    59be:	51 05       	cpc	r21, r1
    59c0:	68 f0       	brcs	.+26     	; 0x59dc <__divsf3_pse+0x82>
    59c2:	85 c0       	rjmp	.+266    	; 0x5ace <__fp_inf>
    59c4:	cf c0       	rjmp	.+414    	; 0x5b64 <__fp_szero>
    59c6:	5f 3f       	cpi	r21, 0xFF	; 255
    59c8:	ec f3       	brlt	.-6      	; 0x59c4 <__divsf3_pse+0x6a>
    59ca:	98 3e       	cpi	r25, 0xE8	; 232
    59cc:	dc f3       	brlt	.-10     	; 0x59c4 <__divsf3_pse+0x6a>
    59ce:	86 95       	lsr	r24
    59d0:	77 95       	ror	r23
    59d2:	67 95       	ror	r22
    59d4:	b7 95       	ror	r27
    59d6:	f7 95       	ror	r31
    59d8:	9f 5f       	subi	r25, 0xFF	; 255
    59da:	c9 f7       	brne	.-14     	; 0x59ce <__divsf3_pse+0x74>
    59dc:	88 0f       	add	r24, r24
    59de:	91 1d       	adc	r25, r1
    59e0:	96 95       	lsr	r25
    59e2:	87 95       	ror	r24
    59e4:	97 f9       	bld	r25, 7
    59e6:	08 95       	ret
    59e8:	e1 e0       	ldi	r30, 0x01	; 1
    59ea:	66 0f       	add	r22, r22
    59ec:	77 1f       	adc	r23, r23
    59ee:	88 1f       	adc	r24, r24
    59f0:	bb 1f       	adc	r27, r27
    59f2:	62 17       	cp	r22, r18
    59f4:	73 07       	cpc	r23, r19
    59f6:	84 07       	cpc	r24, r20
    59f8:	ba 07       	cpc	r27, r26
    59fa:	20 f0       	brcs	.+8      	; 0x5a04 <__divsf3_pse+0xaa>
    59fc:	62 1b       	sub	r22, r18
    59fe:	73 0b       	sbc	r23, r19
    5a00:	84 0b       	sbc	r24, r20
    5a02:	ba 0b       	sbc	r27, r26
    5a04:	ee 1f       	adc	r30, r30
    5a06:	88 f7       	brcc	.-30     	; 0x59ea <__divsf3_pse+0x90>
    5a08:	e0 95       	com	r30
    5a0a:	08 95       	ret

00005a0c <__floatunsisf>:
    5a0c:	e8 94       	clt
    5a0e:	09 c0       	rjmp	.+18     	; 0x5a22 <__floatsisf+0x12>

00005a10 <__floatsisf>:
    5a10:	97 fb       	bst	r25, 7
    5a12:	3e f4       	brtc	.+14     	; 0x5a22 <__floatsisf+0x12>
    5a14:	90 95       	com	r25
    5a16:	80 95       	com	r24
    5a18:	70 95       	com	r23
    5a1a:	61 95       	neg	r22
    5a1c:	7f 4f       	sbci	r23, 0xFF	; 255
    5a1e:	8f 4f       	sbci	r24, 0xFF	; 255
    5a20:	9f 4f       	sbci	r25, 0xFF	; 255
    5a22:	99 23       	and	r25, r25
    5a24:	a9 f0       	breq	.+42     	; 0x5a50 <__floatsisf+0x40>
    5a26:	f9 2f       	mov	r31, r25
    5a28:	96 e9       	ldi	r25, 0x96	; 150
    5a2a:	bb 27       	eor	r27, r27
    5a2c:	93 95       	inc	r25
    5a2e:	f6 95       	lsr	r31
    5a30:	87 95       	ror	r24
    5a32:	77 95       	ror	r23
    5a34:	67 95       	ror	r22
    5a36:	b7 95       	ror	r27
    5a38:	f1 11       	cpse	r31, r1
    5a3a:	f8 cf       	rjmp	.-16     	; 0x5a2c <__floatsisf+0x1c>
    5a3c:	fa f4       	brpl	.+62     	; 0x5a7c <__floatsisf+0x6c>
    5a3e:	bb 0f       	add	r27, r27
    5a40:	11 f4       	brne	.+4      	; 0x5a46 <__floatsisf+0x36>
    5a42:	60 ff       	sbrs	r22, 0
    5a44:	1b c0       	rjmp	.+54     	; 0x5a7c <__floatsisf+0x6c>
    5a46:	6f 5f       	subi	r22, 0xFF	; 255
    5a48:	7f 4f       	sbci	r23, 0xFF	; 255
    5a4a:	8f 4f       	sbci	r24, 0xFF	; 255
    5a4c:	9f 4f       	sbci	r25, 0xFF	; 255
    5a4e:	16 c0       	rjmp	.+44     	; 0x5a7c <__floatsisf+0x6c>
    5a50:	88 23       	and	r24, r24
    5a52:	11 f0       	breq	.+4      	; 0x5a58 <__floatsisf+0x48>
    5a54:	96 e9       	ldi	r25, 0x96	; 150
    5a56:	11 c0       	rjmp	.+34     	; 0x5a7a <__floatsisf+0x6a>
    5a58:	77 23       	and	r23, r23
    5a5a:	21 f0       	breq	.+8      	; 0x5a64 <__floatsisf+0x54>
    5a5c:	9e e8       	ldi	r25, 0x8E	; 142
    5a5e:	87 2f       	mov	r24, r23
    5a60:	76 2f       	mov	r23, r22
    5a62:	05 c0       	rjmp	.+10     	; 0x5a6e <__floatsisf+0x5e>
    5a64:	66 23       	and	r22, r22
    5a66:	71 f0       	breq	.+28     	; 0x5a84 <__floatsisf+0x74>
    5a68:	96 e8       	ldi	r25, 0x86	; 134
    5a6a:	86 2f       	mov	r24, r22
    5a6c:	70 e0       	ldi	r23, 0x00	; 0
    5a6e:	60 e0       	ldi	r22, 0x00	; 0
    5a70:	2a f0       	brmi	.+10     	; 0x5a7c <__floatsisf+0x6c>
    5a72:	9a 95       	dec	r25
    5a74:	66 0f       	add	r22, r22
    5a76:	77 1f       	adc	r23, r23
    5a78:	88 1f       	adc	r24, r24
    5a7a:	da f7       	brpl	.-10     	; 0x5a72 <__floatsisf+0x62>
    5a7c:	88 0f       	add	r24, r24
    5a7e:	96 95       	lsr	r25
    5a80:	87 95       	ror	r24
    5a82:	97 f9       	bld	r25, 7
    5a84:	08 95       	ret

00005a86 <__fp_cmp>:
    5a86:	99 0f       	add	r25, r25
    5a88:	00 08       	sbc	r0, r0
    5a8a:	55 0f       	add	r21, r21
    5a8c:	aa 0b       	sbc	r26, r26
    5a8e:	e0 e8       	ldi	r30, 0x80	; 128
    5a90:	fe ef       	ldi	r31, 0xFE	; 254
    5a92:	16 16       	cp	r1, r22
    5a94:	17 06       	cpc	r1, r23
    5a96:	e8 07       	cpc	r30, r24
    5a98:	f9 07       	cpc	r31, r25
    5a9a:	c0 f0       	brcs	.+48     	; 0x5acc <__fp_cmp+0x46>
    5a9c:	12 16       	cp	r1, r18
    5a9e:	13 06       	cpc	r1, r19
    5aa0:	e4 07       	cpc	r30, r20
    5aa2:	f5 07       	cpc	r31, r21
    5aa4:	98 f0       	brcs	.+38     	; 0x5acc <__fp_cmp+0x46>
    5aa6:	62 1b       	sub	r22, r18
    5aa8:	73 0b       	sbc	r23, r19
    5aaa:	84 0b       	sbc	r24, r20
    5aac:	95 0b       	sbc	r25, r21
    5aae:	39 f4       	brne	.+14     	; 0x5abe <__fp_cmp+0x38>
    5ab0:	0a 26       	eor	r0, r26
    5ab2:	61 f0       	breq	.+24     	; 0x5acc <__fp_cmp+0x46>
    5ab4:	23 2b       	or	r18, r19
    5ab6:	24 2b       	or	r18, r20
    5ab8:	25 2b       	or	r18, r21
    5aba:	21 f4       	brne	.+8      	; 0x5ac4 <__fp_cmp+0x3e>
    5abc:	08 95       	ret
    5abe:	0a 26       	eor	r0, r26
    5ac0:	09 f4       	brne	.+2      	; 0x5ac4 <__fp_cmp+0x3e>
    5ac2:	a1 40       	sbci	r26, 0x01	; 1
    5ac4:	a6 95       	lsr	r26
    5ac6:	8f ef       	ldi	r24, 0xFF	; 255
    5ac8:	81 1d       	adc	r24, r1
    5aca:	81 1d       	adc	r24, r1
    5acc:	08 95       	ret

00005ace <__fp_inf>:
    5ace:	97 f9       	bld	r25, 7
    5ad0:	9f 67       	ori	r25, 0x7F	; 127
    5ad2:	80 e8       	ldi	r24, 0x80	; 128
    5ad4:	70 e0       	ldi	r23, 0x00	; 0
    5ad6:	60 e0       	ldi	r22, 0x00	; 0
    5ad8:	08 95       	ret

00005ada <__fp_nan>:
    5ada:	9f ef       	ldi	r25, 0xFF	; 255
    5adc:	80 ec       	ldi	r24, 0xC0	; 192
    5ade:	08 95       	ret

00005ae0 <__fp_pscA>:
    5ae0:	00 24       	eor	r0, r0
    5ae2:	0a 94       	dec	r0
    5ae4:	16 16       	cp	r1, r22
    5ae6:	17 06       	cpc	r1, r23
    5ae8:	18 06       	cpc	r1, r24
    5aea:	09 06       	cpc	r0, r25
    5aec:	08 95       	ret

00005aee <__fp_pscB>:
    5aee:	00 24       	eor	r0, r0
    5af0:	0a 94       	dec	r0
    5af2:	12 16       	cp	r1, r18
    5af4:	13 06       	cpc	r1, r19
    5af6:	14 06       	cpc	r1, r20
    5af8:	05 06       	cpc	r0, r21
    5afa:	08 95       	ret

00005afc <__fp_round>:
    5afc:	09 2e       	mov	r0, r25
    5afe:	03 94       	inc	r0
    5b00:	00 0c       	add	r0, r0
    5b02:	11 f4       	brne	.+4      	; 0x5b08 <__fp_round+0xc>
    5b04:	88 23       	and	r24, r24
    5b06:	52 f0       	brmi	.+20     	; 0x5b1c <__fp_round+0x20>
    5b08:	bb 0f       	add	r27, r27
    5b0a:	40 f4       	brcc	.+16     	; 0x5b1c <__fp_round+0x20>
    5b0c:	bf 2b       	or	r27, r31
    5b0e:	11 f4       	brne	.+4      	; 0x5b14 <__fp_round+0x18>
    5b10:	60 ff       	sbrs	r22, 0
    5b12:	04 c0       	rjmp	.+8      	; 0x5b1c <__fp_round+0x20>
    5b14:	6f 5f       	subi	r22, 0xFF	; 255
    5b16:	7f 4f       	sbci	r23, 0xFF	; 255
    5b18:	8f 4f       	sbci	r24, 0xFF	; 255
    5b1a:	9f 4f       	sbci	r25, 0xFF	; 255
    5b1c:	08 95       	ret

00005b1e <__fp_split3>:
    5b1e:	57 fd       	sbrc	r21, 7
    5b20:	90 58       	subi	r25, 0x80	; 128
    5b22:	44 0f       	add	r20, r20
    5b24:	55 1f       	adc	r21, r21
    5b26:	59 f0       	breq	.+22     	; 0x5b3e <__fp_splitA+0x10>
    5b28:	5f 3f       	cpi	r21, 0xFF	; 255
    5b2a:	71 f0       	breq	.+28     	; 0x5b48 <__fp_splitA+0x1a>
    5b2c:	47 95       	ror	r20

00005b2e <__fp_splitA>:
    5b2e:	88 0f       	add	r24, r24
    5b30:	97 fb       	bst	r25, 7
    5b32:	99 1f       	adc	r25, r25
    5b34:	61 f0       	breq	.+24     	; 0x5b4e <__fp_splitA+0x20>
    5b36:	9f 3f       	cpi	r25, 0xFF	; 255
    5b38:	79 f0       	breq	.+30     	; 0x5b58 <__fp_splitA+0x2a>
    5b3a:	87 95       	ror	r24
    5b3c:	08 95       	ret
    5b3e:	12 16       	cp	r1, r18
    5b40:	13 06       	cpc	r1, r19
    5b42:	14 06       	cpc	r1, r20
    5b44:	55 1f       	adc	r21, r21
    5b46:	f2 cf       	rjmp	.-28     	; 0x5b2c <__fp_split3+0xe>
    5b48:	46 95       	lsr	r20
    5b4a:	f1 df       	rcall	.-30     	; 0x5b2e <__fp_splitA>
    5b4c:	08 c0       	rjmp	.+16     	; 0x5b5e <__fp_splitA+0x30>
    5b4e:	16 16       	cp	r1, r22
    5b50:	17 06       	cpc	r1, r23
    5b52:	18 06       	cpc	r1, r24
    5b54:	99 1f       	adc	r25, r25
    5b56:	f1 cf       	rjmp	.-30     	; 0x5b3a <__fp_splitA+0xc>
    5b58:	86 95       	lsr	r24
    5b5a:	71 05       	cpc	r23, r1
    5b5c:	61 05       	cpc	r22, r1
    5b5e:	08 94       	sec
    5b60:	08 95       	ret

00005b62 <__fp_zero>:
    5b62:	e8 94       	clt

00005b64 <__fp_szero>:
    5b64:	bb 27       	eor	r27, r27
    5b66:	66 27       	eor	r22, r22
    5b68:	77 27       	eor	r23, r23
    5b6a:	cb 01       	movw	r24, r22
    5b6c:	97 f9       	bld	r25, 7
    5b6e:	08 95       	ret

00005b70 <__cxa_pure_virtual>:
    5b70:	0e 94 db 37 	call	0x6fb6	; 0x6fb6 <abort>

00005b74 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    5b74:	1f 92       	push	r1
    5b76:	0f 92       	push	r0
    5b78:	0f b6       	in	r0, 0x3f	; 63
    5b7a:	0f 92       	push	r0
    5b7c:	11 24       	eor	r1, r1
    5b7e:	2f 93       	push	r18
    5b80:	8f 93       	push	r24
    5b82:	9f 93       	push	r25
    5b84:	ef 93       	push	r30
    5b86:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    5b88:	e0 91 34 0b 	lds	r30, 0x0B34	; 0x800b34 <Serial+0x10>
    5b8c:	f0 91 35 0b 	lds	r31, 0x0B35	; 0x800b35 <Serial+0x11>
    5b90:	80 81       	ld	r24, Z
    5b92:	e0 91 3a 0b 	lds	r30, 0x0B3A	; 0x800b3a <Serial+0x16>
    5b96:	f0 91 3b 0b 	lds	r31, 0x0B3B	; 0x800b3b <Serial+0x17>
    5b9a:	82 fd       	sbrc	r24, 2
    5b9c:	12 c0       	rjmp	.+36     	; 0x5bc2 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    5b9e:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    5ba0:	80 91 3d 0b 	lds	r24, 0x0B3D	; 0x800b3d <Serial+0x19>
    5ba4:	8f 5f       	subi	r24, 0xFF	; 255
    5ba6:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    5ba8:	20 91 3e 0b 	lds	r18, 0x0B3E	; 0x800b3e <Serial+0x1a>
    5bac:	82 17       	cp	r24, r18
    5bae:	51 f0       	breq	.+20     	; 0x5bc4 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    5bb0:	e0 91 3d 0b 	lds	r30, 0x0B3D	; 0x800b3d <Serial+0x19>
    5bb4:	f0 e0       	ldi	r31, 0x00	; 0
    5bb6:	ec 5d       	subi	r30, 0xDC	; 220
    5bb8:	f4 4f       	sbci	r31, 0xF4	; 244
    5bba:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    5bbc:	80 93 3d 0b 	sts	0x0B3D, r24	; 0x800b3d <Serial+0x19>
    5bc0:	01 c0       	rjmp	.+2      	; 0x5bc4 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    5bc2:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    5bc4:	ff 91       	pop	r31
    5bc6:	ef 91       	pop	r30
    5bc8:	9f 91       	pop	r25
    5bca:	8f 91       	pop	r24
    5bcc:	2f 91       	pop	r18
    5bce:	0f 90       	pop	r0
    5bd0:	0f be       	out	0x3f, r0	; 63
    5bd2:	0f 90       	pop	r0
    5bd4:	1f 90       	pop	r1
    5bd6:	18 95       	reti

00005bd8 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    5bd8:	1f 92       	push	r1
    5bda:	0f 92       	push	r0
    5bdc:	0f b6       	in	r0, 0x3f	; 63
    5bde:	0f 92       	push	r0
    5be0:	11 24       	eor	r1, r1
    5be2:	2f 93       	push	r18
    5be4:	3f 93       	push	r19
    5be6:	4f 93       	push	r20
    5be8:	5f 93       	push	r21
    5bea:	6f 93       	push	r22
    5bec:	7f 93       	push	r23
    5bee:	8f 93       	push	r24
    5bf0:	9f 93       	push	r25
    5bf2:	af 93       	push	r26
    5bf4:	bf 93       	push	r27
    5bf6:	ef 93       	push	r30
    5bf8:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    5bfa:	84 e2       	ldi	r24, 0x24	; 36
    5bfc:	9b e0       	ldi	r25, 0x0B	; 11
    5bfe:	c7 d6       	rcall	.+3470   	; 0x698e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    5c00:	ff 91       	pop	r31
    5c02:	ef 91       	pop	r30
    5c04:	bf 91       	pop	r27
    5c06:	af 91       	pop	r26
    5c08:	9f 91       	pop	r25
    5c0a:	8f 91       	pop	r24
    5c0c:	7f 91       	pop	r23
    5c0e:	6f 91       	pop	r22
    5c10:	5f 91       	pop	r21
    5c12:	4f 91       	pop	r20
    5c14:	3f 91       	pop	r19
    5c16:	2f 91       	pop	r18
    5c18:	0f 90       	pop	r0
    5c1a:	0f be       	out	0x3f, r0	; 63
    5c1c:	0f 90       	pop	r0
    5c1e:	1f 90       	pop	r1
    5c20:	18 95       	reti

00005c22 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    5c22:	84 e2       	ldi	r24, 0x24	; 36
    5c24:	9b e0       	ldi	r25, 0x0B	; 11
    5c26:	69 d6       	rcall	.+3282   	; 0x68fa <_ZN14HardwareSerial9availableEv>
    5c28:	21 e0       	ldi	r18, 0x01	; 1
    5c2a:	89 2b       	or	r24, r25
    5c2c:	09 f4       	brne	.+2      	; 0x5c30 <_Z17Serial0_availablev+0xe>
    5c2e:	20 e0       	ldi	r18, 0x00	; 0
}
    5c30:	82 2f       	mov	r24, r18
    5c32:	08 95       	ret

00005c34 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    5c34:	e4 e2       	ldi	r30, 0x24	; 36
    5c36:	fb e0       	ldi	r31, 0x0B	; 11
    5c38:	13 82       	std	Z+3, r1	; 0x03
    5c3a:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    5c3c:	88 ee       	ldi	r24, 0xE8	; 232
    5c3e:	93 e0       	ldi	r25, 0x03	; 3
    5c40:	a0 e0       	ldi	r26, 0x00	; 0
    5c42:	b0 e0       	ldi	r27, 0x00	; 0
    5c44:	84 83       	std	Z+4, r24	; 0x04
    5c46:	95 83       	std	Z+5, r25	; 0x05
    5c48:	a6 83       	std	Z+6, r26	; 0x06
    5c4a:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    5c4c:	87 eb       	ldi	r24, 0xB7	; 183
    5c4e:	98 e0       	ldi	r25, 0x08	; 8
    5c50:	91 83       	std	Z+1, r25	; 0x01
    5c52:	80 83       	st	Z, r24
    5c54:	85 ec       	ldi	r24, 0xC5	; 197
    5c56:	90 e0       	ldi	r25, 0x00	; 0
    5c58:	95 87       	std	Z+13, r25	; 0x0d
    5c5a:	84 87       	std	Z+12, r24	; 0x0c
    5c5c:	84 ec       	ldi	r24, 0xC4	; 196
    5c5e:	90 e0       	ldi	r25, 0x00	; 0
    5c60:	97 87       	std	Z+15, r25	; 0x0f
    5c62:	86 87       	std	Z+14, r24	; 0x0e
    5c64:	80 ec       	ldi	r24, 0xC0	; 192
    5c66:	90 e0       	ldi	r25, 0x00	; 0
    5c68:	91 8b       	std	Z+17, r25	; 0x11
    5c6a:	80 8b       	std	Z+16, r24	; 0x10
    5c6c:	81 ec       	ldi	r24, 0xC1	; 193
    5c6e:	90 e0       	ldi	r25, 0x00	; 0
    5c70:	93 8b       	std	Z+19, r25	; 0x13
    5c72:	82 8b       	std	Z+18, r24	; 0x12
    5c74:	82 ec       	ldi	r24, 0xC2	; 194
    5c76:	90 e0       	ldi	r25, 0x00	; 0
    5c78:	95 8b       	std	Z+21, r25	; 0x15
    5c7a:	84 8b       	std	Z+20, r24	; 0x14
    5c7c:	86 ec       	ldi	r24, 0xC6	; 198
    5c7e:	90 e0       	ldi	r25, 0x00	; 0
    5c80:	97 8b       	std	Z+23, r25	; 0x17
    5c82:	86 8b       	std	Z+22, r24	; 0x16
    5c84:	11 8e       	std	Z+25, r1	; 0x19
    5c86:	12 8e       	std	Z+26, r1	; 0x1a
    5c88:	13 8e       	std	Z+27, r1	; 0x1b
    5c8a:	14 8e       	std	Z+28, r1	; 0x1c
    5c8c:	08 95       	ret

00005c8e <_ZNK9IPAddress7printToER5Print>:
        // Too few dots (there must be 3 dots)
        return false;
    }
    _address.bytes[3] = acc;
    return true;
}
    5c8e:	8f 92       	push	r8
    5c90:	9f 92       	push	r9
    5c92:	af 92       	push	r10
    5c94:	bf 92       	push	r11
    5c96:	cf 92       	push	r12
    5c98:	df 92       	push	r13
    5c9a:	ef 92       	push	r14
    5c9c:	ff 92       	push	r15
    5c9e:	0f 93       	push	r16
    5ca0:	1f 93       	push	r17
    5ca2:	cf 93       	push	r28
    5ca4:	df 93       	push	r29
    5ca6:	7c 01       	movw	r14, r24
    5ca8:	8b 01       	movw	r16, r22
    5caa:	4c 01       	movw	r8, r24
    5cac:	82 e0       	ldi	r24, 0x02	; 2
    5cae:	88 0e       	add	r8, r24
    5cb0:	91 1c       	adc	r9, r1
    5cb2:	57 01       	movw	r10, r14
    5cb4:	e5 e0       	ldi	r30, 0x05	; 5
    5cb6:	ae 0e       	add	r10, r30
    5cb8:	b1 1c       	adc	r11, r1
    5cba:	c0 e0       	ldi	r28, 0x00	; 0
    5cbc:	d0 e0       	ldi	r29, 0x00	; 0
    5cbe:	f4 01       	movw	r30, r8
    5cc0:	61 91       	ld	r22, Z+
    5cc2:	4f 01       	movw	r8, r30
    5cc4:	4a e0       	ldi	r20, 0x0A	; 10
    5cc6:	50 e0       	ldi	r21, 0x00	; 0
    5cc8:	c8 01       	movw	r24, r16
    5cca:	4b d1       	rcall	.+662    	; 0x5f62 <_ZN5Print5printEhi>
    5ccc:	6c 01       	movw	r12, r24
    5cce:	6e e2       	ldi	r22, 0x2E	; 46
    5cd0:	c8 01       	movw	r24, r16
    5cd2:	ba d0       	rcall	.+372    	; 0x5e48 <_ZN5Print5printEc>
    5cd4:	8c 0d       	add	r24, r12
    5cd6:	9d 1d       	adc	r25, r13
    5cd8:	c8 0f       	add	r28, r24
    5cda:	d9 1f       	adc	r29, r25
    5cdc:	8a 14       	cp	r8, r10
    5cde:	9b 04       	cpc	r9, r11
    5ce0:	71 f7       	brne	.-36     	; 0x5cbe <_ZNK9IPAddress7printToER5Print+0x30>
    5ce2:	4a e0       	ldi	r20, 0x0A	; 10
    5ce4:	50 e0       	ldi	r21, 0x00	; 0
    5ce6:	f7 01       	movw	r30, r14
    5ce8:	65 81       	ldd	r22, Z+5	; 0x05
    5cea:	c8 01       	movw	r24, r16
    5cec:	3a d1       	rcall	.+628    	; 0x5f62 <_ZN5Print5printEhi>
    5cee:	8c 0f       	add	r24, r28
    5cf0:	9d 1f       	adc	r25, r29
    5cf2:	df 91       	pop	r29
    5cf4:	cf 91       	pop	r28
    5cf6:	1f 91       	pop	r17
    5cf8:	0f 91       	pop	r16
    5cfa:	ff 90       	pop	r15
    5cfc:	ef 90       	pop	r14
    5cfe:	df 90       	pop	r13
    5d00:	cf 90       	pop	r12
    5d02:	bf 90       	pop	r11
    5d04:	af 90       	pop	r10
    5d06:	9f 90       	pop	r9
    5d08:	8f 90       	pop	r8
    5d0a:	08 95       	ret

00005d0c <_ZN9IPAddressC1Ev>:
    5d0c:	25 ea       	ldi	r18, 0xA5	; 165
    5d0e:	38 e0       	ldi	r19, 0x08	; 8
    5d10:	fc 01       	movw	r30, r24
    5d12:	31 83       	std	Z+1, r19	; 0x01
    5d14:	20 83       	st	Z, r18
    5d16:	12 82       	std	Z+2, r1	; 0x02
    5d18:	13 82       	std	Z+3, r1	; 0x03
    5d1a:	14 82       	std	Z+4, r1	; 0x04
    5d1c:	15 82       	std	Z+5, r1	; 0x05
    5d1e:	08 95       	ret

00005d20 <_ZN9IPAddressC1Ehhhh>:
    5d20:	0f 93       	push	r16
    5d22:	fc 01       	movw	r30, r24
    5d24:	85 ea       	ldi	r24, 0xA5	; 165
    5d26:	98 e0       	ldi	r25, 0x08	; 8
    5d28:	91 83       	std	Z+1, r25	; 0x01
    5d2a:	80 83       	st	Z, r24
    5d2c:	62 83       	std	Z+2, r22	; 0x02
    5d2e:	43 83       	std	Z+3, r20	; 0x03
    5d30:	24 83       	std	Z+4, r18	; 0x04
    5d32:	05 83       	std	Z+5, r16	; 0x05
    5d34:	0f 91       	pop	r16
    5d36:	08 95       	ret

00005d38 <_ZN9IPAddressaSEPKh>:

IPAddress& IPAddress::operator=(const uint8_t *address)
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
    5d38:	dc 01       	movw	r26, r24
    5d3a:	12 96       	adiw	r26, 0x02	; 2
    5d3c:	24 e0       	ldi	r18, 0x04	; 4
    5d3e:	fb 01       	movw	r30, r22
    5d40:	01 90       	ld	r0, Z+
    5d42:	0d 92       	st	X+, r0
    5d44:	2a 95       	dec	r18
    5d46:	e1 f7       	brne	.-8      	; 0x5d40 <_ZN9IPAddressaSEPKh+0x8>
    return *this;
}
    5d48:	08 95       	ret

00005d4a <initVariant>:
    5d4a:	08 95       	ret

00005d4c <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    5d4c:	df d1       	rcall	.+958    	; 0x610c <init>

	initVariant();
    5d4e:	fd df       	rcall	.-6      	; 0x5d4a <initVariant>
    5d50:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <setup>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    5d54:	ca eb       	ldi	r28, 0xBA	; 186
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    5d56:	d4 e3       	ldi	r29, 0x34	; 52
    5d58:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <loop>
#endif
	
	setup();
    
	for (;;) {
		loop();
    5d5c:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
    5d5e:	e1 f3       	breq	.-8      	; 0x5d58 <main+0xc>
    5d60:	09 d6       	rcall	.+3090   	; 0x6974 <_Z14serialEventRunv>
    5d62:	fa cf       	rjmp	.-12     	; 0x5d58 <main+0xc>

00005d64 <_ZN5Print5writeEPKhj>:
    5d64:	cf 92       	push	r12
size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    5d66:	df 92       	push	r13
    5d68:	ef 92       	push	r14
    5d6a:	ff 92       	push	r15
    5d6c:	0f 93       	push	r16
    5d6e:	1f 93       	push	r17
    5d70:	cf 93       	push	r28
    5d72:	df 93       	push	r29
    5d74:	6c 01       	movw	r12, r24
    5d76:	7a 01       	movw	r14, r20
    5d78:	8b 01       	movw	r16, r22
    5d7a:	c0 e0       	ldi	r28, 0x00	; 0
    5d7c:	d0 e0       	ldi	r29, 0x00	; 0
    5d7e:	ce 15       	cp	r28, r14
    5d80:	df 05       	cpc	r29, r15
    5d82:	81 f0       	breq	.+32     	; 0x5da4 <_ZN5Print5writeEPKhj+0x40>
    5d84:	d8 01       	movw	r26, r16
    5d86:	6d 91       	ld	r22, X+
    5d88:	8d 01       	movw	r16, r26
    5d8a:	d6 01       	movw	r26, r12
    5d8c:	ed 91       	ld	r30, X+
    5d8e:	fc 91       	ld	r31, X
    5d90:	01 90       	ld	r0, Z+
    5d92:	f0 81       	ld	r31, Z
    5d94:	e0 2d       	mov	r30, r0
    5d96:	c6 01       	movw	r24, r12
    5d98:	09 95       	icall
    5d9a:	89 2b       	or	r24, r25
    5d9c:	11 f0       	breq	.+4      	; 0x5da2 <_ZN5Print5writeEPKhj+0x3e>
    5d9e:	21 96       	adiw	r28, 0x01	; 1
    5da0:	ee cf       	rjmp	.-36     	; 0x5d7e <_ZN5Print5writeEPKhj+0x1a>
    5da2:	7e 01       	movw	r14, r28
    5da4:	c7 01       	movw	r24, r14
    5da6:	df 91       	pop	r29
    5da8:	cf 91       	pop	r28
    5daa:	1f 91       	pop	r17
    5dac:	0f 91       	pop	r16
    5dae:	ff 90       	pop	r15
    5db0:	ef 90       	pop	r14
    5db2:	df 90       	pop	r13
    5db4:	cf 90       	pop	r12
    5db6:	08 95       	ret

00005db8 <_ZN5Print5writeEPKc>:
    5db8:	61 15       	cp	r22, r1
    5dba:	71 05       	cpc	r23, r1
    5dbc:	79 f0       	breq	.+30     	; 0x5ddc <_ZN5Print5writeEPKc+0x24>
    5dbe:	fb 01       	movw	r30, r22
    5dc0:	01 90       	ld	r0, Z+
    5dc2:	00 20       	and	r0, r0
    5dc4:	e9 f7       	brne	.-6      	; 0x5dc0 <_ZN5Print5writeEPKc+0x8>
    5dc6:	31 97       	sbiw	r30, 0x01	; 1
    5dc8:	af 01       	movw	r20, r30
    5dca:	46 1b       	sub	r20, r22
    5dcc:	57 0b       	sbc	r21, r23
    5dce:	dc 01       	movw	r26, r24
    5dd0:	ed 91       	ld	r30, X+
    5dd2:	fc 91       	ld	r31, X
    5dd4:	02 80       	ldd	r0, Z+2	; 0x02
    5dd6:	f3 81       	ldd	r31, Z+3	; 0x03
    5dd8:	e0 2d       	mov	r30, r0
    5dda:	09 94       	ijmp
    5ddc:	80 e0       	ldi	r24, 0x00	; 0
    5dde:	90 e0       	ldi	r25, 0x00	; 0
    5de0:	08 95       	ret

00005de2 <_ZN5Print5printEPK19__FlashStringHelper>:
    5de2:	ef 92       	push	r14
    5de4:	ff 92       	push	r15
    5de6:	0f 93       	push	r16
    5de8:	1f 93       	push	r17
    5dea:	cf 93       	push	r28
    5dec:	df 93       	push	r29
    5dee:	8c 01       	movw	r16, r24
    5df0:	7b 01       	movw	r14, r22
    5df2:	c0 e0       	ldi	r28, 0x00	; 0
    5df4:	d0 e0       	ldi	r29, 0x00	; 0
    5df6:	f7 01       	movw	r30, r14
    5df8:	ec 0f       	add	r30, r28
    5dfa:	fd 1f       	adc	r31, r29
    5dfc:	64 91       	lpm	r22, Z
    5dfe:	66 23       	and	r22, r22
    5e00:	61 f0       	breq	.+24     	; 0x5e1a <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    5e02:	d8 01       	movw	r26, r16
    5e04:	ed 91       	ld	r30, X+
    5e06:	fc 91       	ld	r31, X
    5e08:	01 90       	ld	r0, Z+
    5e0a:	f0 81       	ld	r31, Z
    5e0c:	e0 2d       	mov	r30, r0
    5e0e:	c8 01       	movw	r24, r16
    5e10:	09 95       	icall
    5e12:	89 2b       	or	r24, r25
    5e14:	11 f0       	breq	.+4      	; 0x5e1a <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    5e16:	21 96       	adiw	r28, 0x01	; 1
    5e18:	ee cf       	rjmp	.-36     	; 0x5df6 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    5e1a:	ce 01       	movw	r24, r28
    5e1c:	df 91       	pop	r29
    5e1e:	cf 91       	pop	r28
    5e20:	1f 91       	pop	r17
    5e22:	0f 91       	pop	r16
    5e24:	ff 90       	pop	r15
    5e26:	ef 90       	pop	r14
    5e28:	08 95       	ret

00005e2a <_ZN5Print5printERK6String>:
    5e2a:	db 01       	movw	r26, r22
    5e2c:	14 96       	adiw	r26, 0x04	; 4
    5e2e:	4d 91       	ld	r20, X+
    5e30:	5c 91       	ld	r21, X
    5e32:	15 97       	sbiw	r26, 0x05	; 5
    5e34:	6d 91       	ld	r22, X+
    5e36:	7c 91       	ld	r23, X
    5e38:	dc 01       	movw	r26, r24
    5e3a:	ed 91       	ld	r30, X+
    5e3c:	fc 91       	ld	r31, X
    5e3e:	02 80       	ldd	r0, Z+2	; 0x02
    5e40:	f3 81       	ldd	r31, Z+3	; 0x03
    5e42:	e0 2d       	mov	r30, r0
    5e44:	09 94       	ijmp

00005e46 <_ZN5Print5printEPKc>:
    5e46:	b8 cf       	rjmp	.-144    	; 0x5db8 <_ZN5Print5writeEPKc>

00005e48 <_ZN5Print5printEc>:
    5e48:	dc 01       	movw	r26, r24
    5e4a:	ed 91       	ld	r30, X+
    5e4c:	fc 91       	ld	r31, X
    5e4e:	01 90       	ld	r0, Z+
    5e50:	f0 81       	ld	r31, Z
    5e52:	e0 2d       	mov	r30, r0
    5e54:	09 94       	ijmp

00005e56 <_ZN5Print7printlnEv>:
    5e56:	66 e6       	ldi	r22, 0x66	; 102
    5e58:	74 e0       	ldi	r23, 0x04	; 4
    5e5a:	ae cf       	rjmp	.-164    	; 0x5db8 <_ZN5Print5writeEPKc>

00005e5c <_ZN5Print7printlnEPK19__FlashStringHelper>:
    5e5c:	0f 93       	push	r16
    5e5e:	1f 93       	push	r17
    5e60:	cf 93       	push	r28
    5e62:	df 93       	push	r29
    5e64:	ec 01       	movw	r28, r24
    5e66:	bd df       	rcall	.-134    	; 0x5de2 <_ZN5Print5printEPK19__FlashStringHelper>
    5e68:	8c 01       	movw	r16, r24
    5e6a:	ce 01       	movw	r24, r28
    5e6c:	f4 df       	rcall	.-24     	; 0x5e56 <_ZN5Print7printlnEv>
    5e6e:	80 0f       	add	r24, r16
    5e70:	91 1f       	adc	r25, r17
    5e72:	df 91       	pop	r29
    5e74:	cf 91       	pop	r28
    5e76:	1f 91       	pop	r17
    5e78:	0f 91       	pop	r16
    5e7a:	08 95       	ret

00005e7c <_ZN5Print7printlnERK6String>:
    5e7c:	0f 93       	push	r16
    5e7e:	1f 93       	push	r17
    5e80:	cf 93       	push	r28
    5e82:	df 93       	push	r29
    5e84:	ec 01       	movw	r28, r24
    5e86:	d1 df       	rcall	.-94     	; 0x5e2a <_ZN5Print5printERK6String>
    5e88:	8c 01       	movw	r16, r24
    5e8a:	ce 01       	movw	r24, r28
    5e8c:	e4 df       	rcall	.-56     	; 0x5e56 <_ZN5Print7printlnEv>
    5e8e:	80 0f       	add	r24, r16
    5e90:	91 1f       	adc	r25, r17
    5e92:	df 91       	pop	r29
    5e94:	cf 91       	pop	r28
    5e96:	1f 91       	pop	r17
    5e98:	0f 91       	pop	r16
    5e9a:	08 95       	ret

00005e9c <_ZN5Print7printlnEPKc>:
    5e9c:	0f 93       	push	r16
    5e9e:	1f 93       	push	r17
    5ea0:	cf 93       	push	r28
    5ea2:	df 93       	push	r29
    5ea4:	ec 01       	movw	r28, r24
    5ea6:	88 df       	rcall	.-240    	; 0x5db8 <_ZN5Print5writeEPKc>
    5ea8:	8c 01       	movw	r16, r24
    5eaa:	ce 01       	movw	r24, r28
    5eac:	d4 df       	rcall	.-88     	; 0x5e56 <_ZN5Print7printlnEv>
    5eae:	80 0f       	add	r24, r16
    5eb0:	91 1f       	adc	r25, r17
    5eb2:	df 91       	pop	r29
    5eb4:	cf 91       	pop	r28
    5eb6:	1f 91       	pop	r17
    5eb8:	0f 91       	pop	r16
    5eba:	08 95       	ret

00005ebc <_ZN5Print11printNumberEmh>:
    5ebc:	8f 92       	push	r8
    5ebe:	9f 92       	push	r9
    5ec0:	af 92       	push	r10
    5ec2:	bf 92       	push	r11
    5ec4:	ef 92       	push	r14
    5ec6:	ff 92       	push	r15
    5ec8:	0f 93       	push	r16
    5eca:	1f 93       	push	r17
    5ecc:	cf 93       	push	r28
    5ece:	df 93       	push	r29
    5ed0:	cd b7       	in	r28, 0x3d	; 61
    5ed2:	de b7       	in	r29, 0x3e	; 62
    5ed4:	a1 97       	sbiw	r28, 0x21	; 33
    5ed6:	0f b6       	in	r0, 0x3f	; 63
    5ed8:	f8 94       	cli
    5eda:	de bf       	out	0x3e, r29	; 62
    5edc:	0f be       	out	0x3f, r0	; 63
    5ede:	cd bf       	out	0x3d, r28	; 61
    5ee0:	7c 01       	movw	r14, r24
    5ee2:	fa 01       	movw	r30, r20
    5ee4:	cb 01       	movw	r24, r22
    5ee6:	19 a2       	std	Y+33, r1	; 0x21
    5ee8:	22 30       	cpi	r18, 0x02	; 2
    5eea:	08 f4       	brcc	.+2      	; 0x5eee <_ZN5Print11printNumberEmh+0x32>
    5eec:	2a e0       	ldi	r18, 0x0A	; 10
    5eee:	8e 01       	movw	r16, r28
    5ef0:	0f 5d       	subi	r16, 0xDF	; 223
    5ef2:	1f 4f       	sbci	r17, 0xFF	; 255
    5ef4:	82 2e       	mov	r8, r18
    5ef6:	91 2c       	mov	r9, r1
    5ef8:	a1 2c       	mov	r10, r1
    5efa:	b1 2c       	mov	r11, r1
    5efc:	bf 01       	movw	r22, r30
    5efe:	a5 01       	movw	r20, r10
    5f00:	94 01       	movw	r18, r8
    5f02:	f5 d5       	rcall	.+3050   	; 0x6aee <__udivmodsi4>
    5f04:	f9 01       	movw	r30, r18
    5f06:	ca 01       	movw	r24, r20
    5f08:	01 50       	subi	r16, 0x01	; 1
    5f0a:	11 09       	sbc	r17, r1
    5f0c:	6a 30       	cpi	r22, 0x0A	; 10
    5f0e:	10 f4       	brcc	.+4      	; 0x5f14 <_ZN5Print11printNumberEmh+0x58>
    5f10:	60 5d       	subi	r22, 0xD0	; 208
    5f12:	01 c0       	rjmp	.+2      	; 0x5f16 <_ZN5Print11printNumberEmh+0x5a>
    5f14:	69 5c       	subi	r22, 0xC9	; 201
    5f16:	d8 01       	movw	r26, r16
    5f18:	6c 93       	st	X, r22
    5f1a:	23 2b       	or	r18, r19
    5f1c:	24 2b       	or	r18, r20
    5f1e:	25 2b       	or	r18, r21
    5f20:	69 f7       	brne	.-38     	; 0x5efc <_ZN5Print11printNumberEmh+0x40>
    5f22:	b8 01       	movw	r22, r16
    5f24:	c7 01       	movw	r24, r14
    5f26:	48 df       	rcall	.-368    	; 0x5db8 <_ZN5Print5writeEPKc>
    5f28:	a1 96       	adiw	r28, 0x21	; 33
    5f2a:	0f b6       	in	r0, 0x3f	; 63
    5f2c:	f8 94       	cli
    5f2e:	de bf       	out	0x3e, r29	; 62
    5f30:	0f be       	out	0x3f, r0	; 63
    5f32:	cd bf       	out	0x3d, r28	; 61
    5f34:	df 91       	pop	r29
    5f36:	cf 91       	pop	r28
    5f38:	1f 91       	pop	r17
    5f3a:	0f 91       	pop	r16
    5f3c:	ff 90       	pop	r15
    5f3e:	ef 90       	pop	r14
    5f40:	bf 90       	pop	r11
    5f42:	af 90       	pop	r10
    5f44:	9f 90       	pop	r9
    5f46:	8f 90       	pop	r8
    5f48:	08 95       	ret

00005f4a <_ZN5Print5printEmi>:
    5f4a:	21 15       	cp	r18, r1
    5f4c:	31 05       	cpc	r19, r1
    5f4e:	41 f4       	brne	.+16     	; 0x5f60 <_ZN5Print5printEmi+0x16>
    5f50:	dc 01       	movw	r26, r24
    5f52:	ed 91       	ld	r30, X+
    5f54:	fc 91       	ld	r31, X
    5f56:	01 90       	ld	r0, Z+
    5f58:	f0 81       	ld	r31, Z
    5f5a:	e0 2d       	mov	r30, r0
    5f5c:	64 2f       	mov	r22, r20
    5f5e:	09 94       	ijmp
    5f60:	ad cf       	rjmp	.-166    	; 0x5ebc <_ZN5Print11printNumberEmh>

00005f62 <_ZN5Print5printEhi>:
    5f62:	9a 01       	movw	r18, r20
    5f64:	46 2f       	mov	r20, r22
    5f66:	50 e0       	ldi	r21, 0x00	; 0
    5f68:	60 e0       	ldi	r22, 0x00	; 0
    5f6a:	70 e0       	ldi	r23, 0x00	; 0
    5f6c:	ee cf       	rjmp	.-36     	; 0x5f4a <_ZN5Print5printEmi>

00005f6e <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    5f6e:	0f 93       	push	r16
    5f70:	1f 93       	push	r17
    5f72:	cf 93       	push	r28
    5f74:	df 93       	push	r29
    5f76:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    5f78:	e8 df       	rcall	.-48     	; 0x5f4a <_ZN5Print5printEmi>
    5f7a:	8c 01       	movw	r16, r24
  n += println();
    5f7c:	ce 01       	movw	r24, r28
    5f7e:	6b df       	rcall	.-298    	; 0x5e56 <_ZN5Print7printlnEv>
  return n;
}
    5f80:	80 0f       	add	r24, r16
    5f82:	91 1f       	adc	r25, r17
    5f84:	df 91       	pop	r29
    5f86:	cf 91       	pop	r28
    5f88:	1f 91       	pop	r17
    5f8a:	0f 91       	pop	r16
    5f8c:	08 95       	ret

00005f8e <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    5f8e:	1f 92       	push	r1
    5f90:	0f 92       	push	r0
    5f92:	0f b6       	in	r0, 0x3f	; 63
    5f94:	0f 92       	push	r0
    5f96:	11 24       	eor	r1, r1
    5f98:	2f 93       	push	r18
    5f9a:	3f 93       	push	r19
    5f9c:	8f 93       	push	r24
    5f9e:	9f 93       	push	r25
    5fa0:	af 93       	push	r26
    5fa2:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    5fa4:	80 91 c2 0b 	lds	r24, 0x0BC2	; 0x800bc2 <timer0_millis>
    5fa8:	90 91 c3 0b 	lds	r25, 0x0BC3	; 0x800bc3 <timer0_millis+0x1>
    5fac:	a0 91 c4 0b 	lds	r26, 0x0BC4	; 0x800bc4 <timer0_millis+0x2>
    5fb0:	b0 91 c5 0b 	lds	r27, 0x0BC5	; 0x800bc5 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    5fb4:	30 91 c1 0b 	lds	r19, 0x0BC1	; 0x800bc1 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    5fb8:	23 e0       	ldi	r18, 0x03	; 3
    5fba:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    5fbc:	2d 37       	cpi	r18, 0x7D	; 125
    5fbe:	20 f4       	brcc	.+8      	; 0x5fc8 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    5fc0:	01 96       	adiw	r24, 0x01	; 1
    5fc2:	a1 1d       	adc	r26, r1
    5fc4:	b1 1d       	adc	r27, r1
    5fc6:	05 c0       	rjmp	.+10     	; 0x5fd2 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    5fc8:	26 e8       	ldi	r18, 0x86	; 134
    5fca:	23 0f       	add	r18, r19
		m += 1;
    5fcc:	02 96       	adiw	r24, 0x02	; 2
    5fce:	a1 1d       	adc	r26, r1
    5fd0:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    5fd2:	20 93 c1 0b 	sts	0x0BC1, r18	; 0x800bc1 <timer0_fract>
	timer0_millis = m;
    5fd6:	80 93 c2 0b 	sts	0x0BC2, r24	; 0x800bc2 <timer0_millis>
    5fda:	90 93 c3 0b 	sts	0x0BC3, r25	; 0x800bc3 <timer0_millis+0x1>
    5fde:	a0 93 c4 0b 	sts	0x0BC4, r26	; 0x800bc4 <timer0_millis+0x2>
    5fe2:	b0 93 c5 0b 	sts	0x0BC5, r27	; 0x800bc5 <timer0_millis+0x3>
	timer0_overflow_count++;
    5fe6:	80 91 c6 0b 	lds	r24, 0x0BC6	; 0x800bc6 <timer0_overflow_count>
    5fea:	90 91 c7 0b 	lds	r25, 0x0BC7	; 0x800bc7 <timer0_overflow_count+0x1>
    5fee:	a0 91 c8 0b 	lds	r26, 0x0BC8	; 0x800bc8 <timer0_overflow_count+0x2>
    5ff2:	b0 91 c9 0b 	lds	r27, 0x0BC9	; 0x800bc9 <timer0_overflow_count+0x3>
    5ff6:	01 96       	adiw	r24, 0x01	; 1
    5ff8:	a1 1d       	adc	r26, r1
    5ffa:	b1 1d       	adc	r27, r1
    5ffc:	80 93 c6 0b 	sts	0x0BC6, r24	; 0x800bc6 <timer0_overflow_count>
    6000:	90 93 c7 0b 	sts	0x0BC7, r25	; 0x800bc7 <timer0_overflow_count+0x1>
    6004:	a0 93 c8 0b 	sts	0x0BC8, r26	; 0x800bc8 <timer0_overflow_count+0x2>
    6008:	b0 93 c9 0b 	sts	0x0BC9, r27	; 0x800bc9 <timer0_overflow_count+0x3>
}
    600c:	bf 91       	pop	r27
    600e:	af 91       	pop	r26
    6010:	9f 91       	pop	r25
    6012:	8f 91       	pop	r24
    6014:	3f 91       	pop	r19
    6016:	2f 91       	pop	r18
    6018:	0f 90       	pop	r0
    601a:	0f be       	out	0x3f, r0	; 63
    601c:	0f 90       	pop	r0
    601e:	1f 90       	pop	r1
    6020:	18 95       	reti

00006022 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    6022:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    6024:	f8 94       	cli
	m = timer0_millis;
    6026:	60 91 c2 0b 	lds	r22, 0x0BC2	; 0x800bc2 <timer0_millis>
    602a:	70 91 c3 0b 	lds	r23, 0x0BC3	; 0x800bc3 <timer0_millis+0x1>
    602e:	80 91 c4 0b 	lds	r24, 0x0BC4	; 0x800bc4 <timer0_millis+0x2>
    6032:	90 91 c5 0b 	lds	r25, 0x0BC5	; 0x800bc5 <timer0_millis+0x3>
	SREG = oldSREG;
    6036:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    6038:	08 95       	ret

0000603a <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    603a:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    603c:	f8 94       	cli
	m = timer0_overflow_count;
    603e:	80 91 c6 0b 	lds	r24, 0x0BC6	; 0x800bc6 <timer0_overflow_count>
    6042:	90 91 c7 0b 	lds	r25, 0x0BC7	; 0x800bc7 <timer0_overflow_count+0x1>
    6046:	a0 91 c8 0b 	lds	r26, 0x0BC8	; 0x800bc8 <timer0_overflow_count+0x2>
    604a:	b0 91 c9 0b 	lds	r27, 0x0BC9	; 0x800bc9 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    604e:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    6050:	a8 9b       	sbis	0x15, 0	; 21
    6052:	05 c0       	rjmp	.+10     	; 0x605e <micros+0x24>
    6054:	2f 3f       	cpi	r18, 0xFF	; 255
    6056:	19 f0       	breq	.+6      	; 0x605e <micros+0x24>
		m++;
    6058:	01 96       	adiw	r24, 0x01	; 1
    605a:	a1 1d       	adc	r26, r1
    605c:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    605e:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    6060:	ba 2f       	mov	r27, r26
    6062:	a9 2f       	mov	r26, r25
    6064:	98 2f       	mov	r25, r24
    6066:	88 27       	eor	r24, r24
    6068:	82 0f       	add	r24, r18
    606a:	91 1d       	adc	r25, r1
    606c:	a1 1d       	adc	r26, r1
    606e:	b1 1d       	adc	r27, r1
    6070:	bc 01       	movw	r22, r24
    6072:	cd 01       	movw	r24, r26
    6074:	42 e0       	ldi	r20, 0x02	; 2
    6076:	66 0f       	add	r22, r22
    6078:	77 1f       	adc	r23, r23
    607a:	88 1f       	adc	r24, r24
    607c:	99 1f       	adc	r25, r25
    607e:	4a 95       	dec	r20
    6080:	d1 f7       	brne	.-12     	; 0x6076 <micros+0x3c>
}
    6082:	08 95       	ret

00006084 <delay>:

void delay(unsigned long ms)
{
    6084:	8f 92       	push	r8
    6086:	9f 92       	push	r9
    6088:	af 92       	push	r10
    608a:	bf 92       	push	r11
    608c:	cf 92       	push	r12
    608e:	df 92       	push	r13
    6090:	ef 92       	push	r14
    6092:	ff 92       	push	r15
    6094:	6b 01       	movw	r12, r22
    6096:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    6098:	d0 df       	rcall	.-96     	; 0x603a <micros>
    609a:	4b 01       	movw	r8, r22
    609c:	5c 01       	movw	r10, r24

	while (ms > 0) {
    609e:	c1 14       	cp	r12, r1
    60a0:	d1 04       	cpc	r13, r1
    60a2:	e1 04       	cpc	r14, r1
    60a4:	f1 04       	cpc	r15, r1
		yield();
    60a6:	f1 f0       	breq	.+60     	; 0x60e4 <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    60a8:	01 d5       	rcall	.+2562   	; 0x6aac <yield>
    60aa:	c7 df       	rcall	.-114    	; 0x603a <micros>
    60ac:	dc 01       	movw	r26, r24
    60ae:	cb 01       	movw	r24, r22
    60b0:	88 19       	sub	r24, r8
    60b2:	99 09       	sbc	r25, r9
    60b4:	aa 09       	sbc	r26, r10
    60b6:	bb 09       	sbc	r27, r11
    60b8:	88 3e       	cpi	r24, 0xE8	; 232
    60ba:	93 40       	sbci	r25, 0x03	; 3
    60bc:	a1 05       	cpc	r26, r1
    60be:	b1 05       	cpc	r27, r1
    60c0:	70 f3       	brcs	.-36     	; 0x609e <delay+0x1a>
			ms--;
    60c2:	21 e0       	ldi	r18, 0x01	; 1
    60c4:	c2 1a       	sub	r12, r18
    60c6:	d1 08       	sbc	r13, r1
    60c8:	e1 08       	sbc	r14, r1
    60ca:	f1 08       	sbc	r15, r1
			start += 1000;
    60cc:	88 ee       	ldi	r24, 0xE8	; 232
    60ce:	88 0e       	add	r8, r24
    60d0:	83 e0       	ldi	r24, 0x03	; 3
    60d2:	98 1e       	adc	r9, r24
    60d4:	a1 1c       	adc	r10, r1
    60d6:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    60d8:	c1 14       	cp	r12, r1
    60da:	d1 04       	cpc	r13, r1
    60dc:	e1 04       	cpc	r14, r1
    60de:	f1 04       	cpc	r15, r1
    60e0:	21 f7       	brne	.-56     	; 0x60aa <delay+0x26>
    60e2:	dd cf       	rjmp	.-70     	; 0x609e <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    60e4:	ff 90       	pop	r15
    60e6:	ef 90       	pop	r14
    60e8:	df 90       	pop	r13
    60ea:	cf 90       	pop	r12
    60ec:	bf 90       	pop	r11
    60ee:	af 90       	pop	r10
    60f0:	9f 90       	pop	r9
    60f2:	8f 90       	pop	r8
    60f4:	08 95       	ret

000060f6 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    60f6:	82 30       	cpi	r24, 0x02	; 2
    60f8:	91 05       	cpc	r25, r1
    60fa:	38 f0       	brcs	.+14     	; 0x610a <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    60fc:	88 0f       	add	r24, r24
    60fe:	99 1f       	adc	r25, r25
    6100:	88 0f       	add	r24, r24
    6102:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    6104:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    6106:	01 97       	sbiw	r24, 0x01	; 1
    6108:	f1 f7       	brne	.-4      	; 0x6106 <delayMicroseconds+0x10>
    610a:	08 95       	ret

0000610c <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    610c:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    610e:	84 b5       	in	r24, 0x24	; 36
    6110:	82 60       	ori	r24, 0x02	; 2
    6112:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    6114:	84 b5       	in	r24, 0x24	; 36
    6116:	81 60       	ori	r24, 0x01	; 1
    6118:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    611a:	85 b5       	in	r24, 0x25	; 37
    611c:	82 60       	ori	r24, 0x02	; 2
    611e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    6120:	85 b5       	in	r24, 0x25	; 37
    6122:	81 60       	ori	r24, 0x01	; 1
    6124:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    6126:	ee e6       	ldi	r30, 0x6E	; 110
    6128:	f0 e0       	ldi	r31, 0x00	; 0
    612a:	80 81       	ld	r24, Z
    612c:	81 60       	ori	r24, 0x01	; 1
    612e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    6130:	e1 e8       	ldi	r30, 0x81	; 129
    6132:	f0 e0       	ldi	r31, 0x00	; 0
    6134:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    6136:	80 81       	ld	r24, Z
    6138:	82 60       	ori	r24, 0x02	; 2
    613a:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    613c:	80 81       	ld	r24, Z
    613e:	81 60       	ori	r24, 0x01	; 1
    6140:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    6142:	e0 e8       	ldi	r30, 0x80	; 128
    6144:	f0 e0       	ldi	r31, 0x00	; 0
    6146:	80 81       	ld	r24, Z
    6148:	81 60       	ori	r24, 0x01	; 1
    614a:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    614c:	e1 eb       	ldi	r30, 0xB1	; 177
    614e:	f0 e0       	ldi	r31, 0x00	; 0
    6150:	80 81       	ld	r24, Z
    6152:	84 60       	ori	r24, 0x04	; 4
    6154:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    6156:	e0 eb       	ldi	r30, 0xB0	; 176
    6158:	f0 e0       	ldi	r31, 0x00	; 0
    615a:	80 81       	ld	r24, Z
    615c:	81 60       	ori	r24, 0x01	; 1
    615e:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    6160:	ea e7       	ldi	r30, 0x7A	; 122
    6162:	f0 e0       	ldi	r31, 0x00	; 0
    6164:	80 81       	ld	r24, Z
    6166:	84 60       	ori	r24, 0x04	; 4
    6168:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    616a:	80 81       	ld	r24, Z
    616c:	82 60       	ori	r24, 0x02	; 2
    616e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    6170:	80 81       	ld	r24, Z
    6172:	81 60       	ori	r24, 0x01	; 1
    6174:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    6176:	80 81       	ld	r24, Z
    6178:	80 68       	ori	r24, 0x80	; 128
    617a:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    617c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    6180:	08 95       	ret

00006182 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    6182:	83 30       	cpi	r24, 0x03	; 3
    6184:	81 f0       	breq	.+32     	; 0x61a6 <turnOffPWM+0x24>
    6186:	28 f4       	brcc	.+10     	; 0x6192 <turnOffPWM+0x10>
    6188:	81 30       	cpi	r24, 0x01	; 1
    618a:	99 f0       	breq	.+38     	; 0x61b2 <turnOffPWM+0x30>
    618c:	82 30       	cpi	r24, 0x02	; 2
    618e:	a1 f0       	breq	.+40     	; 0x61b8 <turnOffPWM+0x36>
    6190:	08 95       	ret
    6192:	87 30       	cpi	r24, 0x07	; 7
    6194:	a9 f0       	breq	.+42     	; 0x61c0 <turnOffPWM+0x3e>
    6196:	88 30       	cpi	r24, 0x08	; 8
    6198:	b9 f0       	breq	.+46     	; 0x61c8 <turnOffPWM+0x46>
    619a:	84 30       	cpi	r24, 0x04	; 4
    619c:	d1 f4       	brne	.+52     	; 0x61d2 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    619e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    61a2:	8f 7d       	andi	r24, 0xDF	; 223
    61a4:	03 c0       	rjmp	.+6      	; 0x61ac <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    61a6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    61aa:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    61ac:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    61b0:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    61b2:	84 b5       	in	r24, 0x24	; 36
    61b4:	8f 77       	andi	r24, 0x7F	; 127
    61b6:	02 c0       	rjmp	.+4      	; 0x61bc <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    61b8:	84 b5       	in	r24, 0x24	; 36
    61ba:	8f 7d       	andi	r24, 0xDF	; 223
    61bc:	84 bd       	out	0x24, r24	; 36
    61be:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    61c0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    61c4:	8f 77       	andi	r24, 0x7F	; 127
    61c6:	03 c0       	rjmp	.+6      	; 0x61ce <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    61c8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    61cc:	8f 7d       	andi	r24, 0xDF	; 223
    61ce:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    61d2:	08 95       	ret

000061d4 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    61d4:	cf 93       	push	r28
    61d6:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    61d8:	90 e0       	ldi	r25, 0x00	; 0
    61da:	fc 01       	movw	r30, r24
    61dc:	ee 5a       	subi	r30, 0xAE	; 174
    61de:	fd 4f       	sbci	r31, 0xFD	; 253
    61e0:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    61e2:	fc 01       	movw	r30, r24
    61e4:	ee 58       	subi	r30, 0x8E	; 142
    61e6:	fd 4f       	sbci	r31, 0xFD	; 253
    61e8:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    61ea:	88 23       	and	r24, r24
    61ec:	61 f1       	breq	.+88     	; 0x6246 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    61ee:	90 e0       	ldi	r25, 0x00	; 0
    61f0:	88 0f       	add	r24, r24
    61f2:	99 1f       	adc	r25, r25
    61f4:	fc 01       	movw	r30, r24
    61f6:	ea 55       	subi	r30, 0x5A	; 90
    61f8:	fd 4f       	sbci	r31, 0xFD	; 253
    61fa:	c5 91       	lpm	r28, Z+
    61fc:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    61fe:	fc 01       	movw	r30, r24
    6200:	e4 56       	subi	r30, 0x64	; 100
    6202:	fd 4f       	sbci	r31, 0xFD	; 253
    6204:	a5 91       	lpm	r26, Z+
    6206:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    6208:	61 11       	cpse	r22, r1
    620a:	09 c0       	rjmp	.+18     	; 0x621e <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    620c:	9f b7       	in	r25, 0x3f	; 63
                cli();
    620e:	f8 94       	cli
		*reg &= ~bit;
    6210:	88 81       	ld	r24, Y
    6212:	20 95       	com	r18
    6214:	82 23       	and	r24, r18
    6216:	88 83       	st	Y, r24
		*out &= ~bit;
    6218:	ec 91       	ld	r30, X
    621a:	2e 23       	and	r18, r30
    621c:	0b c0       	rjmp	.+22     	; 0x6234 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    621e:	62 30       	cpi	r22, 0x02	; 2
    6220:	61 f4       	brne	.+24     	; 0x623a <pinMode+0x66>
		uint8_t oldSREG = SREG;
    6222:	9f b7       	in	r25, 0x3f	; 63
                cli();
    6224:	f8 94       	cli
		*reg &= ~bit;
    6226:	88 81       	ld	r24, Y
    6228:	32 2f       	mov	r19, r18
    622a:	30 95       	com	r19
    622c:	83 23       	and	r24, r19
    622e:	88 83       	st	Y, r24
		*out |= bit;
    6230:	ec 91       	ld	r30, X
    6232:	2e 2b       	or	r18, r30
    6234:	2c 93       	st	X, r18
		SREG = oldSREG;
    6236:	9f bf       	out	0x3f, r25	; 63
    6238:	06 c0       	rjmp	.+12     	; 0x6246 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    623a:	8f b7       	in	r24, 0x3f	; 63
                cli();
    623c:	f8 94       	cli
		*reg |= bit;
    623e:	e8 81       	ld	r30, Y
    6240:	2e 2b       	or	r18, r30
    6242:	28 83       	st	Y, r18
		SREG = oldSREG;
    6244:	8f bf       	out	0x3f, r24	; 63
	}
}
    6246:	df 91       	pop	r29
    6248:	cf 91       	pop	r28
    624a:	08 95       	ret

0000624c <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    624c:	1f 93       	push	r17
    624e:	cf 93       	push	r28
    6250:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    6252:	28 2f       	mov	r18, r24
    6254:	30 e0       	ldi	r19, 0x00	; 0
    6256:	f9 01       	movw	r30, r18
    6258:	ee 5c       	subi	r30, 0xCE	; 206
    625a:	fd 4f       	sbci	r31, 0xFD	; 253
    625c:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    625e:	f9 01       	movw	r30, r18
    6260:	ee 5a       	subi	r30, 0xAE	; 174
    6262:	fd 4f       	sbci	r31, 0xFD	; 253
    6264:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    6266:	f9 01       	movw	r30, r18
    6268:	ee 58       	subi	r30, 0x8E	; 142
    626a:	fd 4f       	sbci	r31, 0xFD	; 253
    626c:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    626e:	cc 23       	and	r28, r28
    6270:	b9 f0       	breq	.+46     	; 0x62a0 <digitalWrite+0x54>
    6272:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    6274:	81 11       	cpse	r24, r1
    6276:	85 df       	rcall	.-246    	; 0x6182 <turnOffPWM>

	out = portOutputRegister(port);
    6278:	ec 2f       	mov	r30, r28
    627a:	f0 e0       	ldi	r31, 0x00	; 0
    627c:	ee 0f       	add	r30, r30
    627e:	ff 1f       	adc	r31, r31
    6280:	e4 56       	subi	r30, 0x64	; 100
    6282:	fd 4f       	sbci	r31, 0xFD	; 253
    6284:	a5 91       	lpm	r26, Z+
    6286:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    6288:	9f b7       	in	r25, 0x3f	; 63
	cli();
    628a:	f8 94       	cli

	if (val == LOW) {
    628c:	11 11       	cpse	r17, r1
    628e:	04 c0       	rjmp	.+8      	; 0x6298 <digitalWrite+0x4c>
		*out &= ~bit;
    6290:	8c 91       	ld	r24, X
    6292:	d0 95       	com	r29
    6294:	d8 23       	and	r29, r24
    6296:	02 c0       	rjmp	.+4      	; 0x629c <digitalWrite+0x50>
	} else {
		*out |= bit;
    6298:	ec 91       	ld	r30, X
    629a:	de 2b       	or	r29, r30
    629c:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    629e:	9f bf       	out	0x3f, r25	; 63
}
    62a0:	df 91       	pop	r29
    62a2:	cf 91       	pop	r28
    62a4:	1f 91       	pop	r17
    62a6:	08 95       	ret

000062a8 <digitalRead>:

int digitalRead(uint8_t pin)
{
    62a8:	cf 93       	push	r28
    62aa:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    62ac:	28 2f       	mov	r18, r24
    62ae:	30 e0       	ldi	r19, 0x00	; 0
    62b0:	f9 01       	movw	r30, r18
    62b2:	ee 5c       	subi	r30, 0xCE	; 206
    62b4:	fd 4f       	sbci	r31, 0xFD	; 253
    62b6:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    62b8:	f9 01       	movw	r30, r18
    62ba:	ee 5a       	subi	r30, 0xAE	; 174
    62bc:	fd 4f       	sbci	r31, 0xFD	; 253
    62be:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    62c0:	f9 01       	movw	r30, r18
    62c2:	ee 58       	subi	r30, 0x8E	; 142
    62c4:	fd 4f       	sbci	r31, 0xFD	; 253
    62c6:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    62c8:	cc 23       	and	r28, r28
    62ca:	89 f0       	breq	.+34     	; 0x62ee <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    62cc:	81 11       	cpse	r24, r1
    62ce:	59 df       	rcall	.-334    	; 0x6182 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    62d0:	ec 2f       	mov	r30, r28
    62d2:	f0 e0       	ldi	r31, 0x00	; 0
    62d4:	ee 0f       	add	r30, r30
    62d6:	ff 1f       	adc	r31, r31
    62d8:	ee 56       	subi	r30, 0x6E	; 110
    62da:	fd 4f       	sbci	r31, 0xFD	; 253
    62dc:	a5 91       	lpm	r26, Z+
    62de:	b4 91       	lpm	r27, Z
    62e0:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    62e2:	ed 23       	and	r30, r29
    62e4:	81 e0       	ldi	r24, 0x01	; 1
    62e6:	90 e0       	ldi	r25, 0x00	; 0
    62e8:	21 f4       	brne	.+8      	; 0x62f2 <digitalRead+0x4a>
    62ea:	80 e0       	ldi	r24, 0x00	; 0
    62ec:	02 c0       	rjmp	.+4      	; 0x62f2 <digitalRead+0x4a>
    62ee:	80 e0       	ldi	r24, 0x00	; 0
    62f0:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    62f2:	df 91       	pop	r29
    62f4:	cf 91       	pop	r28
    62f6:	08 95       	ret

000062f8 <_ZNK6String14StringIfHelperEv>:
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
		*p = toupper(*p);
	}
}
    62f8:	08 95       	ret

000062fa <_ZN6StringD1Ev>:
    62fa:	fc 01       	movw	r30, r24
    62fc:	80 81       	ld	r24, Z
    62fe:	91 81       	ldd	r25, Z+1	; 0x01
    6300:	f1 c4       	rjmp	.+2530   	; 0x6ce4 <free>

00006302 <_ZN6String10invalidateEv>:
    6302:	cf 93       	push	r28
    6304:	df 93       	push	r29
    6306:	ec 01       	movw	r28, r24
    6308:	88 81       	ld	r24, Y
    630a:	99 81       	ldd	r25, Y+1	; 0x01
    630c:	00 97       	sbiw	r24, 0x00	; 0
    630e:	09 f0       	breq	.+2      	; 0x6312 <_ZN6String10invalidateEv+0x10>
    6310:	e9 d4       	rcall	.+2514   	; 0x6ce4 <free>
    6312:	19 82       	std	Y+1, r1	; 0x01
    6314:	18 82       	st	Y, r1
    6316:	1d 82       	std	Y+5, r1	; 0x05
    6318:	1c 82       	std	Y+4, r1	; 0x04
    631a:	1b 82       	std	Y+3, r1	; 0x03
    631c:	1a 82       	std	Y+2, r1	; 0x02
    631e:	df 91       	pop	r29
    6320:	cf 91       	pop	r28
    6322:	08 95       	ret

00006324 <_ZN6String12changeBufferEj>:
    6324:	0f 93       	push	r16
    6326:	1f 93       	push	r17
    6328:	cf 93       	push	r28
    632a:	df 93       	push	r29
    632c:	ec 01       	movw	r28, r24
    632e:	8b 01       	movw	r16, r22
    6330:	6f 5f       	subi	r22, 0xFF	; 255
    6332:	7f 4f       	sbci	r23, 0xFF	; 255
    6334:	88 81       	ld	r24, Y
    6336:	99 81       	ldd	r25, Y+1	; 0x01
    6338:	5e d5       	rcall	.+2748   	; 0x6df6 <realloc>
    633a:	00 97       	sbiw	r24, 0x00	; 0
    633c:	31 f0       	breq	.+12     	; 0x634a <_ZN6String12changeBufferEj+0x26>
    633e:	99 83       	std	Y+1, r25	; 0x01
    6340:	88 83       	st	Y, r24
    6342:	1b 83       	std	Y+3, r17	; 0x03
    6344:	0a 83       	std	Y+2, r16	; 0x02
    6346:	81 e0       	ldi	r24, 0x01	; 1
    6348:	01 c0       	rjmp	.+2      	; 0x634c <_ZN6String12changeBufferEj+0x28>
    634a:	80 e0       	ldi	r24, 0x00	; 0
    634c:	df 91       	pop	r29
    634e:	cf 91       	pop	r28
    6350:	1f 91       	pop	r17
    6352:	0f 91       	pop	r16
    6354:	08 95       	ret

00006356 <_ZN6String7reserveEj>:
    6356:	cf 93       	push	r28
    6358:	df 93       	push	r29
    635a:	ec 01       	movw	r28, r24
    635c:	88 81       	ld	r24, Y
    635e:	99 81       	ldd	r25, Y+1	; 0x01
    6360:	89 2b       	or	r24, r25
    6362:	29 f0       	breq	.+10     	; 0x636e <_ZN6String7reserveEj+0x18>
    6364:	8a 81       	ldd	r24, Y+2	; 0x02
    6366:	9b 81       	ldd	r25, Y+3	; 0x03
    6368:	86 17       	cp	r24, r22
    636a:	97 07       	cpc	r25, r23
    636c:	58 f4       	brcc	.+22     	; 0x6384 <_ZN6String7reserveEj+0x2e>
    636e:	ce 01       	movw	r24, r28
    6370:	d9 df       	rcall	.-78     	; 0x6324 <_ZN6String12changeBufferEj>
    6372:	88 23       	and	r24, r24
    6374:	41 f0       	breq	.+16     	; 0x6386 <_ZN6String7reserveEj+0x30>
    6376:	8c 81       	ldd	r24, Y+4	; 0x04
    6378:	9d 81       	ldd	r25, Y+5	; 0x05
    637a:	89 2b       	or	r24, r25
    637c:	19 f4       	brne	.+6      	; 0x6384 <_ZN6String7reserveEj+0x2e>
    637e:	e8 81       	ld	r30, Y
    6380:	f9 81       	ldd	r31, Y+1	; 0x01
    6382:	10 82       	st	Z, r1
    6384:	81 e0       	ldi	r24, 0x01	; 1
    6386:	df 91       	pop	r29
    6388:	cf 91       	pop	r28
    638a:	08 95       	ret

0000638c <_ZN6String4copyEPKcj>:
    638c:	ef 92       	push	r14
    638e:	ff 92       	push	r15
    6390:	0f 93       	push	r16
    6392:	1f 93       	push	r17
    6394:	cf 93       	push	r28
    6396:	df 93       	push	r29
    6398:	ec 01       	movw	r28, r24
    639a:	7b 01       	movw	r14, r22
    639c:	8a 01       	movw	r16, r20
    639e:	ba 01       	movw	r22, r20
    63a0:	da df       	rcall	.-76     	; 0x6356 <_ZN6String7reserveEj>
    63a2:	81 11       	cpse	r24, r1
    63a4:	03 c0       	rjmp	.+6      	; 0x63ac <_ZN6String4copyEPKcj+0x20>
    63a6:	ce 01       	movw	r24, r28
    63a8:	ac df       	rcall	.-168    	; 0x6302 <_ZN6String10invalidateEv>
    63aa:	06 c0       	rjmp	.+12     	; 0x63b8 <_ZN6String4copyEPKcj+0x2c>
    63ac:	1d 83       	std	Y+5, r17	; 0x05
    63ae:	0c 83       	std	Y+4, r16	; 0x04
    63b0:	b7 01       	movw	r22, r14
    63b2:	88 81       	ld	r24, Y
    63b4:	99 81       	ldd	r25, Y+1	; 0x01
    63b6:	26 d6       	rcall	.+3148   	; 0x7004 <strcpy>
    63b8:	ce 01       	movw	r24, r28
    63ba:	df 91       	pop	r29
    63bc:	cf 91       	pop	r28
    63be:	1f 91       	pop	r17
    63c0:	0f 91       	pop	r16
    63c2:	ff 90       	pop	r15
    63c4:	ef 90       	pop	r14
    63c6:	08 95       	ret

000063c8 <_ZN6StringC1EPKc>:
    63c8:	fc 01       	movw	r30, r24
    63ca:	11 82       	std	Z+1, r1	; 0x01
    63cc:	10 82       	st	Z, r1
    63ce:	13 82       	std	Z+3, r1	; 0x03
    63d0:	12 82       	std	Z+2, r1	; 0x02
    63d2:	15 82       	std	Z+5, r1	; 0x05
    63d4:	14 82       	std	Z+4, r1	; 0x04
    63d6:	61 15       	cp	r22, r1
    63d8:	71 05       	cpc	r23, r1
    63da:	49 f0       	breq	.+18     	; 0x63ee <_ZN6StringC1EPKc+0x26>
    63dc:	fb 01       	movw	r30, r22
    63de:	01 90       	ld	r0, Z+
    63e0:	00 20       	and	r0, r0
    63e2:	e9 f7       	brne	.-6      	; 0x63de <_ZN6StringC1EPKc+0x16>
    63e4:	31 97       	sbiw	r30, 0x01	; 1
    63e6:	af 01       	movw	r20, r30
    63e8:	46 1b       	sub	r20, r22
    63ea:	57 0b       	sbc	r21, r23
    63ec:	cf cf       	rjmp	.-98     	; 0x638c <_ZN6String4copyEPKcj>
    63ee:	08 95       	ret

000063f0 <_ZN6String4moveERS_>:
    63f0:	0f 93       	push	r16
    63f2:	1f 93       	push	r17
    63f4:	cf 93       	push	r28
    63f6:	df 93       	push	r29
    63f8:	8c 01       	movw	r16, r24
    63fa:	eb 01       	movw	r28, r22
    63fc:	fc 01       	movw	r30, r24
    63fe:	80 81       	ld	r24, Z
    6400:	91 81       	ldd	r25, Z+1	; 0x01
    6402:	00 97       	sbiw	r24, 0x00	; 0
    6404:	c1 f0       	breq	.+48     	; 0x6436 <_ZN6String4moveERS_+0x46>
    6406:	68 81       	ld	r22, Y
    6408:	79 81       	ldd	r23, Y+1	; 0x01
    640a:	61 15       	cp	r22, r1
    640c:	71 05       	cpc	r23, r1
    640e:	91 f0       	breq	.+36     	; 0x6434 <_ZN6String4moveERS_+0x44>
    6410:	2c e7       	ldi	r18, 0x7C	; 124
    6412:	31 e3       	ldi	r19, 0x31	; 49
    6414:	23 2b       	or	r18, r19
    6416:	71 f0       	breq	.+28     	; 0x6434 <_ZN6String4moveERS_+0x44>
    6418:	42 81       	ldd	r20, Z+2	; 0x02
    641a:	53 81       	ldd	r21, Z+3	; 0x03
    641c:	2c 81       	ldd	r18, Y+4	; 0x04
    641e:	3d 81       	ldd	r19, Y+5	; 0x05
    6420:	42 17       	cp	r20, r18
    6422:	53 07       	cpc	r21, r19
    6424:	38 f0       	brcs	.+14     	; 0x6434 <_ZN6String4moveERS_+0x44>
    6426:	ee d5       	rcall	.+3036   	; 0x7004 <strcpy>
    6428:	8c 81       	ldd	r24, Y+4	; 0x04
    642a:	9d 81       	ldd	r25, Y+5	; 0x05
    642c:	f8 01       	movw	r30, r16
    642e:	95 83       	std	Z+5, r25	; 0x05
    6430:	84 83       	std	Z+4, r24	; 0x04
    6432:	12 c0       	rjmp	.+36     	; 0x6458 <_ZN6String4moveERS_+0x68>
    6434:	57 d4       	rcall	.+2222   	; 0x6ce4 <free>
    6436:	88 81       	ld	r24, Y
    6438:	99 81       	ldd	r25, Y+1	; 0x01
    643a:	f8 01       	movw	r30, r16
    643c:	91 83       	std	Z+1, r25	; 0x01
    643e:	80 83       	st	Z, r24
    6440:	8a 81       	ldd	r24, Y+2	; 0x02
    6442:	9b 81       	ldd	r25, Y+3	; 0x03
    6444:	93 83       	std	Z+3, r25	; 0x03
    6446:	82 83       	std	Z+2, r24	; 0x02
    6448:	8c 81       	ldd	r24, Y+4	; 0x04
    644a:	9d 81       	ldd	r25, Y+5	; 0x05
    644c:	95 83       	std	Z+5, r25	; 0x05
    644e:	84 83       	std	Z+4, r24	; 0x04
    6450:	19 82       	std	Y+1, r1	; 0x01
    6452:	18 82       	st	Y, r1
    6454:	1b 82       	std	Y+3, r1	; 0x03
    6456:	1a 82       	std	Y+2, r1	; 0x02
    6458:	1d 82       	std	Y+5, r1	; 0x05
    645a:	1c 82       	std	Y+4, r1	; 0x04
    645c:	df 91       	pop	r29
    645e:	cf 91       	pop	r28
    6460:	1f 91       	pop	r17
    6462:	0f 91       	pop	r16
    6464:	08 95       	ret

00006466 <_ZN6StringC1EOS_>:
    6466:	fc 01       	movw	r30, r24
    6468:	11 82       	std	Z+1, r1	; 0x01
    646a:	10 82       	st	Z, r1
    646c:	13 82       	std	Z+3, r1	; 0x03
    646e:	12 82       	std	Z+2, r1	; 0x02
    6470:	15 82       	std	Z+5, r1	; 0x05
    6472:	14 82       	std	Z+4, r1	; 0x04
    6474:	bd cf       	rjmp	.-134    	; 0x63f0 <_ZN6String4moveERS_>

00006476 <_ZN6StringaSERKS_>:
    6476:	cf 93       	push	r28
    6478:	df 93       	push	r29
    647a:	ec 01       	movw	r28, r24
    647c:	fb 01       	movw	r30, r22
    647e:	86 17       	cp	r24, r22
    6480:	97 07       	cpc	r25, r23
    6482:	51 f0       	breq	.+20     	; 0x6498 <_ZN6StringaSERKS_+0x22>
    6484:	60 81       	ld	r22, Z
    6486:	71 81       	ldd	r23, Z+1	; 0x01
    6488:	61 15       	cp	r22, r1
    648a:	71 05       	cpc	r23, r1
    648c:	21 f0       	breq	.+8      	; 0x6496 <_ZN6StringaSERKS_+0x20>
    648e:	44 81       	ldd	r20, Z+4	; 0x04
    6490:	55 81       	ldd	r21, Z+5	; 0x05
    6492:	7c df       	rcall	.-264    	; 0x638c <_ZN6String4copyEPKcj>
    6494:	01 c0       	rjmp	.+2      	; 0x6498 <_ZN6StringaSERKS_+0x22>
    6496:	35 df       	rcall	.-406    	; 0x6302 <_ZN6String10invalidateEv>
    6498:	ce 01       	movw	r24, r28
    649a:	df 91       	pop	r29
    649c:	cf 91       	pop	r28
    649e:	08 95       	ret

000064a0 <_ZN6StringC1ERKS_>:
    64a0:	fc 01       	movw	r30, r24
    64a2:	11 82       	std	Z+1, r1	; 0x01
    64a4:	10 82       	st	Z, r1
    64a6:	13 82       	std	Z+3, r1	; 0x03
    64a8:	12 82       	std	Z+2, r1	; 0x02
    64aa:	15 82       	std	Z+5, r1	; 0x05
    64ac:	14 82       	std	Z+4, r1	; 0x04
    64ae:	e3 cf       	rjmp	.-58     	; 0x6476 <_ZN6StringaSERKS_>

000064b0 <_ZN6StringaSEOS_>:
    64b0:	cf 93       	push	r28
    64b2:	df 93       	push	r29
    64b4:	ec 01       	movw	r28, r24
    64b6:	86 17       	cp	r24, r22
    64b8:	97 07       	cpc	r25, r23
    64ba:	09 f0       	breq	.+2      	; 0x64be <_ZN6StringaSEOS_+0xe>
    64bc:	99 df       	rcall	.-206    	; 0x63f0 <_ZN6String4moveERS_>
    64be:	ce 01       	movw	r24, r28
    64c0:	df 91       	pop	r29
    64c2:	cf 91       	pop	r28
    64c4:	08 95       	ret

000064c6 <_ZN6StringaSEPKc>:
    64c6:	cf 93       	push	r28
    64c8:	df 93       	push	r29
    64ca:	ec 01       	movw	r28, r24
    64cc:	61 15       	cp	r22, r1
    64ce:	71 05       	cpc	r23, r1
    64d0:	51 f0       	breq	.+20     	; 0x64e6 <_ZN6StringaSEPKc+0x20>
    64d2:	fb 01       	movw	r30, r22
    64d4:	01 90       	ld	r0, Z+
    64d6:	00 20       	and	r0, r0
    64d8:	e9 f7       	brne	.-6      	; 0x64d4 <_ZN6StringaSEPKc+0xe>
    64da:	31 97       	sbiw	r30, 0x01	; 1
    64dc:	af 01       	movw	r20, r30
    64de:	46 1b       	sub	r20, r22
    64e0:	57 0b       	sbc	r21, r23
    64e2:	54 df       	rcall	.-344    	; 0x638c <_ZN6String4copyEPKcj>
    64e4:	01 c0       	rjmp	.+2      	; 0x64e8 <_ZN6StringaSEPKc+0x22>
    64e6:	0d df       	rcall	.-486    	; 0x6302 <_ZN6String10invalidateEv>
    64e8:	ce 01       	movw	r24, r28
    64ea:	df 91       	pop	r29
    64ec:	cf 91       	pop	r28
    64ee:	08 95       	ret

000064f0 <_ZN6StringC1Ec>:
    64f0:	cf 93       	push	r28
    64f2:	df 93       	push	r29
    64f4:	00 d0       	rcall	.+0      	; 0x64f6 <_ZN6StringC1Ec+0x6>
    64f6:	cd b7       	in	r28, 0x3d	; 61
    64f8:	de b7       	in	r29, 0x3e	; 62
    64fa:	fc 01       	movw	r30, r24
    64fc:	11 82       	std	Z+1, r1	; 0x01
    64fe:	10 82       	st	Z, r1
    6500:	13 82       	std	Z+3, r1	; 0x03
    6502:	12 82       	std	Z+2, r1	; 0x02
    6504:	15 82       	std	Z+5, r1	; 0x05
    6506:	14 82       	std	Z+4, r1	; 0x04
    6508:	69 83       	std	Y+1, r22	; 0x01
    650a:	1a 82       	std	Y+2, r1	; 0x02
    650c:	be 01       	movw	r22, r28
    650e:	6f 5f       	subi	r22, 0xFF	; 255
    6510:	7f 4f       	sbci	r23, 0xFF	; 255
    6512:	d9 df       	rcall	.-78     	; 0x64c6 <_ZN6StringaSEPKc>
    6514:	0f 90       	pop	r0
    6516:	0f 90       	pop	r0
    6518:	df 91       	pop	r29
    651a:	cf 91       	pop	r28
    651c:	08 95       	ret

0000651e <_ZN6StringC1Ehh>:
    651e:	0f 93       	push	r16
    6520:	1f 93       	push	r17
    6522:	cf 93       	push	r28
    6524:	df 93       	push	r29
    6526:	cd b7       	in	r28, 0x3d	; 61
    6528:	de b7       	in	r29, 0x3e	; 62
    652a:	29 97       	sbiw	r28, 0x09	; 9
    652c:	0f b6       	in	r0, 0x3f	; 63
    652e:	f8 94       	cli
    6530:	de bf       	out	0x3e, r29	; 62
    6532:	0f be       	out	0x3f, r0	; 63
    6534:	cd bf       	out	0x3d, r28	; 61
    6536:	8c 01       	movw	r16, r24
    6538:	86 2f       	mov	r24, r22
    653a:	f8 01       	movw	r30, r16
    653c:	11 82       	std	Z+1, r1	; 0x01
    653e:	10 82       	st	Z, r1
    6540:	13 82       	std	Z+3, r1	; 0x03
    6542:	12 82       	std	Z+2, r1	; 0x02
    6544:	15 82       	std	Z+5, r1	; 0x05
    6546:	14 82       	std	Z+4, r1	; 0x04
    6548:	50 e0       	ldi	r21, 0x00	; 0
    654a:	be 01       	movw	r22, r28
    654c:	6f 5f       	subi	r22, 0xFF	; 255
    654e:	7f 4f       	sbci	r23, 0xFF	; 255
    6550:	90 e0       	ldi	r25, 0x00	; 0
    6552:	a2 d5       	rcall	.+2884   	; 0x7098 <utoa>
    6554:	be 01       	movw	r22, r28
    6556:	6f 5f       	subi	r22, 0xFF	; 255
    6558:	7f 4f       	sbci	r23, 0xFF	; 255
    655a:	c8 01       	movw	r24, r16
    655c:	b4 df       	rcall	.-152    	; 0x64c6 <_ZN6StringaSEPKc>
    655e:	29 96       	adiw	r28, 0x09	; 9
    6560:	0f b6       	in	r0, 0x3f	; 63
    6562:	f8 94       	cli
    6564:	de bf       	out	0x3e, r29	; 62
    6566:	0f be       	out	0x3f, r0	; 63
    6568:	cd bf       	out	0x3d, r28	; 61
    656a:	df 91       	pop	r29
    656c:	cf 91       	pop	r28
    656e:	1f 91       	pop	r17
    6570:	0f 91       	pop	r16
    6572:	08 95       	ret

00006574 <_ZN6StringC1Ejh>:
    6574:	0f 93       	push	r16
    6576:	1f 93       	push	r17
    6578:	cf 93       	push	r28
    657a:	df 93       	push	r29
    657c:	cd b7       	in	r28, 0x3d	; 61
    657e:	de b7       	in	r29, 0x3e	; 62
    6580:	61 97       	sbiw	r28, 0x11	; 17
    6582:	0f b6       	in	r0, 0x3f	; 63
    6584:	f8 94       	cli
    6586:	de bf       	out	0x3e, r29	; 62
    6588:	0f be       	out	0x3f, r0	; 63
    658a:	cd bf       	out	0x3d, r28	; 61
    658c:	8c 01       	movw	r16, r24
    658e:	cb 01       	movw	r24, r22
    6590:	f8 01       	movw	r30, r16
    6592:	11 82       	std	Z+1, r1	; 0x01
    6594:	10 82       	st	Z, r1
    6596:	13 82       	std	Z+3, r1	; 0x03
    6598:	12 82       	std	Z+2, r1	; 0x02
    659a:	15 82       	std	Z+5, r1	; 0x05
    659c:	14 82       	std	Z+4, r1	; 0x04
    659e:	50 e0       	ldi	r21, 0x00	; 0
    65a0:	be 01       	movw	r22, r28
    65a2:	6f 5f       	subi	r22, 0xFF	; 255
    65a4:	7f 4f       	sbci	r23, 0xFF	; 255
    65a6:	78 d5       	rcall	.+2800   	; 0x7098 <utoa>
    65a8:	be 01       	movw	r22, r28
    65aa:	6f 5f       	subi	r22, 0xFF	; 255
    65ac:	7f 4f       	sbci	r23, 0xFF	; 255
    65ae:	c8 01       	movw	r24, r16
    65b0:	8a df       	rcall	.-236    	; 0x64c6 <_ZN6StringaSEPKc>
    65b2:	61 96       	adiw	r28, 0x11	; 17
    65b4:	0f b6       	in	r0, 0x3f	; 63
    65b6:	f8 94       	cli
    65b8:	de bf       	out	0x3e, r29	; 62
    65ba:	0f be       	out	0x3f, r0	; 63
    65bc:	cd bf       	out	0x3d, r28	; 61
    65be:	df 91       	pop	r29
    65c0:	cf 91       	pop	r28
    65c2:	1f 91       	pop	r17
    65c4:	0f 91       	pop	r16
    65c6:	08 95       	ret

000065c8 <_ZN6StringC1Emh>:
    65c8:	0f 93       	push	r16
    65ca:	1f 93       	push	r17
    65cc:	cf 93       	push	r28
    65ce:	df 93       	push	r29
    65d0:	cd b7       	in	r28, 0x3d	; 61
    65d2:	de b7       	in	r29, 0x3e	; 62
    65d4:	a1 97       	sbiw	r28, 0x21	; 33
    65d6:	0f b6       	in	r0, 0x3f	; 63
    65d8:	f8 94       	cli
    65da:	de bf       	out	0x3e, r29	; 62
    65dc:	0f be       	out	0x3f, r0	; 63
    65de:	cd bf       	out	0x3d, r28	; 61
    65e0:	8c 01       	movw	r16, r24
    65e2:	cb 01       	movw	r24, r22
    65e4:	ba 01       	movw	r22, r20
    65e6:	f8 01       	movw	r30, r16
    65e8:	11 82       	std	Z+1, r1	; 0x01
    65ea:	10 82       	st	Z, r1
    65ec:	13 82       	std	Z+3, r1	; 0x03
    65ee:	12 82       	std	Z+2, r1	; 0x02
    65f0:	15 82       	std	Z+5, r1	; 0x05
    65f2:	14 82       	std	Z+4, r1	; 0x04
    65f4:	30 e0       	ldi	r19, 0x00	; 0
    65f6:	ae 01       	movw	r20, r28
    65f8:	4f 5f       	subi	r20, 0xFF	; 255
    65fa:	5f 4f       	sbci	r21, 0xFF	; 255
    65fc:	22 d5       	rcall	.+2628   	; 0x7042 <ultoa>
    65fe:	be 01       	movw	r22, r28
    6600:	6f 5f       	subi	r22, 0xFF	; 255
    6602:	7f 4f       	sbci	r23, 0xFF	; 255
    6604:	c8 01       	movw	r24, r16
    6606:	5f df       	rcall	.-322    	; 0x64c6 <_ZN6StringaSEPKc>
    6608:	a1 96       	adiw	r28, 0x21	; 33
    660a:	0f b6       	in	r0, 0x3f	; 63
    660c:	f8 94       	cli
    660e:	de bf       	out	0x3e, r29	; 62
    6610:	0f be       	out	0x3f, r0	; 63
    6612:	cd bf       	out	0x3d, r28	; 61
    6614:	df 91       	pop	r29
    6616:	cf 91       	pop	r28
    6618:	1f 91       	pop	r17
    661a:	0f 91       	pop	r16
    661c:	08 95       	ret

0000661e <_ZN6StringC1Edh>:
    661e:	ef 92       	push	r14
    6620:	ff 92       	push	r15
    6622:	0f 93       	push	r16
    6624:	1f 93       	push	r17
    6626:	cf 93       	push	r28
    6628:	df 93       	push	r29
    662a:	cd b7       	in	r28, 0x3d	; 61
    662c:	de b7       	in	r29, 0x3e	; 62
    662e:	a1 97       	sbiw	r28, 0x21	; 33
    6630:	0f b6       	in	r0, 0x3f	; 63
    6632:	f8 94       	cli
    6634:	de bf       	out	0x3e, r29	; 62
    6636:	0f be       	out	0x3f, r0	; 63
    6638:	cd bf       	out	0x3d, r28	; 61
    663a:	7c 01       	movw	r14, r24
    663c:	cb 01       	movw	r24, r22
    663e:	ba 01       	movw	r22, r20
    6640:	f7 01       	movw	r30, r14
    6642:	11 82       	std	Z+1, r1	; 0x01
    6644:	10 82       	st	Z, r1
    6646:	13 82       	std	Z+3, r1	; 0x03
    6648:	12 82       	std	Z+2, r1	; 0x02
    664a:	15 82       	std	Z+5, r1	; 0x05
    664c:	14 82       	std	Z+4, r1	; 0x04
    664e:	42 e0       	ldi	r20, 0x02	; 2
    6650:	42 0f       	add	r20, r18
    6652:	8e 01       	movw	r16, r28
    6654:	0f 5f       	subi	r16, 0xFF	; 255
    6656:	1f 4f       	sbci	r17, 0xFF	; 255
    6658:	8e d2       	rcall	.+1308   	; 0x6b76 <dtostrf>
    665a:	bc 01       	movw	r22, r24
    665c:	c7 01       	movw	r24, r14
    665e:	33 df       	rcall	.-410    	; 0x64c6 <_ZN6StringaSEPKc>
    6660:	a1 96       	adiw	r28, 0x21	; 33
    6662:	0f b6       	in	r0, 0x3f	; 63
    6664:	f8 94       	cli
    6666:	de bf       	out	0x3e, r29	; 62
    6668:	0f be       	out	0x3f, r0	; 63
    666a:	cd bf       	out	0x3d, r28	; 61
    666c:	df 91       	pop	r29
    666e:	cf 91       	pop	r28
    6670:	1f 91       	pop	r17
    6672:	0f 91       	pop	r16
    6674:	ff 90       	pop	r15
    6676:	ef 90       	pop	r14
    6678:	08 95       	ret

0000667a <_ZN6String6concatEPKcj>:
    667a:	ef 92       	push	r14
    667c:	ff 92       	push	r15
    667e:	0f 93       	push	r16
    6680:	1f 93       	push	r17
    6682:	cf 93       	push	r28
    6684:	df 93       	push	r29
    6686:	61 15       	cp	r22, r1
    6688:	71 05       	cpc	r23, r1
    668a:	11 f4       	brne	.+4      	; 0x6690 <_ZN6String6concatEPKcj+0x16>
    668c:	80 e0       	ldi	r24, 0x00	; 0
    668e:	1a c0       	rjmp	.+52     	; 0x66c4 <_ZN6String6concatEPKcj+0x4a>
    6690:	41 15       	cp	r20, r1
    6692:	51 05       	cpc	r21, r1
    6694:	b1 f0       	breq	.+44     	; 0x66c2 <_ZN6String6concatEPKcj+0x48>
    6696:	7b 01       	movw	r14, r22
    6698:	ec 01       	movw	r28, r24
    669a:	8c 81       	ldd	r24, Y+4	; 0x04
    669c:	9d 81       	ldd	r25, Y+5	; 0x05
    669e:	8a 01       	movw	r16, r20
    66a0:	08 0f       	add	r16, r24
    66a2:	19 1f       	adc	r17, r25
    66a4:	b8 01       	movw	r22, r16
    66a6:	ce 01       	movw	r24, r28
    66a8:	56 de       	rcall	.-852    	; 0x6356 <_ZN6String7reserveEj>
    66aa:	88 23       	and	r24, r24
    66ac:	79 f3       	breq	.-34     	; 0x668c <_ZN6String6concatEPKcj+0x12>
    66ae:	28 81       	ld	r18, Y
    66b0:	39 81       	ldd	r19, Y+1	; 0x01
    66b2:	8c 81       	ldd	r24, Y+4	; 0x04
    66b4:	9d 81       	ldd	r25, Y+5	; 0x05
    66b6:	b7 01       	movw	r22, r14
    66b8:	82 0f       	add	r24, r18
    66ba:	93 1f       	adc	r25, r19
    66bc:	a3 d4       	rcall	.+2374   	; 0x7004 <strcpy>
    66be:	1d 83       	std	Y+5, r17	; 0x05
    66c0:	0c 83       	std	Y+4, r16	; 0x04
    66c2:	81 e0       	ldi	r24, 0x01	; 1
    66c4:	df 91       	pop	r29
    66c6:	cf 91       	pop	r28
    66c8:	1f 91       	pop	r17
    66ca:	0f 91       	pop	r16
    66cc:	ff 90       	pop	r15
    66ce:	ef 90       	pop	r14
    66d0:	08 95       	ret

000066d2 <_ZN6String6concatERKS_>:
    66d2:	fb 01       	movw	r30, r22
    66d4:	44 81       	ldd	r20, Z+4	; 0x04
    66d6:	55 81       	ldd	r21, Z+5	; 0x05
    66d8:	60 81       	ld	r22, Z
    66da:	71 81       	ldd	r23, Z+1	; 0x01
    66dc:	ce cf       	rjmp	.-100    	; 0x667a <_ZN6String6concatEPKcj>

000066de <_ZN6String6concatEPKc>:
    66de:	61 15       	cp	r22, r1
    66e0:	71 05       	cpc	r23, r1
    66e2:	49 f0       	breq	.+18     	; 0x66f6 <_ZN6String6concatEPKc+0x18>
    66e4:	fb 01       	movw	r30, r22
    66e6:	01 90       	ld	r0, Z+
    66e8:	00 20       	and	r0, r0
    66ea:	e9 f7       	brne	.-6      	; 0x66e6 <_ZN6String6concatEPKc+0x8>
    66ec:	31 97       	sbiw	r30, 0x01	; 1
    66ee:	af 01       	movw	r20, r30
    66f0:	46 1b       	sub	r20, r22
    66f2:	57 0b       	sbc	r21, r23
    66f4:	c2 cf       	rjmp	.-124    	; 0x667a <_ZN6String6concatEPKcj>
    66f6:	80 e0       	ldi	r24, 0x00	; 0
    66f8:	08 95       	ret

000066fa <_ZN6String6concatEc>:
    66fa:	cf 93       	push	r28
    66fc:	df 93       	push	r29
    66fe:	00 d0       	rcall	.+0      	; 0x6700 <_ZN6String6concatEc+0x6>
    6700:	cd b7       	in	r28, 0x3d	; 61
    6702:	de b7       	in	r29, 0x3e	; 62
    6704:	69 83       	std	Y+1, r22	; 0x01
    6706:	1a 82       	std	Y+2, r1	; 0x02
    6708:	41 e0       	ldi	r20, 0x01	; 1
    670a:	50 e0       	ldi	r21, 0x00	; 0
    670c:	be 01       	movw	r22, r28
    670e:	6f 5f       	subi	r22, 0xFF	; 255
    6710:	7f 4f       	sbci	r23, 0xFF	; 255
    6712:	b3 df       	rcall	.-154    	; 0x667a <_ZN6String6concatEPKcj>
    6714:	0f 90       	pop	r0
    6716:	0f 90       	pop	r0
    6718:	df 91       	pop	r29
    671a:	cf 91       	pop	r28
    671c:	08 95       	ret

0000671e <_ZplRK15StringSumHelperRK6String>:
    671e:	cf 93       	push	r28
    6720:	df 93       	push	r29
    6722:	ec 01       	movw	r28, r24
    6724:	fb 01       	movw	r30, r22
    6726:	44 81       	ldd	r20, Z+4	; 0x04
    6728:	55 81       	ldd	r21, Z+5	; 0x05
    672a:	60 81       	ld	r22, Z
    672c:	71 81       	ldd	r23, Z+1	; 0x01
    672e:	a5 df       	rcall	.-182    	; 0x667a <_ZN6String6concatEPKcj>
    6730:	81 11       	cpse	r24, r1
    6732:	02 c0       	rjmp	.+4      	; 0x6738 <_ZplRK15StringSumHelperRK6String+0x1a>
    6734:	ce 01       	movw	r24, r28
    6736:	e5 dd       	rcall	.-1078   	; 0x6302 <_ZN6String10invalidateEv>
    6738:	ce 01       	movw	r24, r28
    673a:	df 91       	pop	r29
    673c:	cf 91       	pop	r28
    673e:	08 95       	ret

00006740 <_ZplRK15StringSumHelperPKc>:
    6740:	cf 93       	push	r28
    6742:	df 93       	push	r29
    6744:	ec 01       	movw	r28, r24
    6746:	61 15       	cp	r22, r1
    6748:	71 05       	cpc	r23, r1
    674a:	59 f0       	breq	.+22     	; 0x6762 <_ZplRK15StringSumHelperPKc+0x22>
    674c:	fb 01       	movw	r30, r22
    674e:	01 90       	ld	r0, Z+
    6750:	00 20       	and	r0, r0
    6752:	e9 f7       	brne	.-6      	; 0x674e <_ZplRK15StringSumHelperPKc+0xe>
    6754:	31 97       	sbiw	r30, 0x01	; 1
    6756:	af 01       	movw	r20, r30
    6758:	46 1b       	sub	r20, r22
    675a:	57 0b       	sbc	r21, r23
    675c:	8e df       	rcall	.-228    	; 0x667a <_ZN6String6concatEPKcj>
    675e:	81 11       	cpse	r24, r1
    6760:	02 c0       	rjmp	.+4      	; 0x6766 <_ZplRK15StringSumHelperPKc+0x26>
    6762:	ce 01       	movw	r24, r28
    6764:	ce dd       	rcall	.-1124   	; 0x6302 <_ZN6String10invalidateEv>
    6766:	ce 01       	movw	r24, r28
    6768:	df 91       	pop	r29
    676a:	cf 91       	pop	r28
    676c:	08 95       	ret

0000676e <_ZplRK15StringSumHelperc>:
    676e:	cf 93       	push	r28
    6770:	df 93       	push	r29
    6772:	ec 01       	movw	r28, r24
    6774:	c2 df       	rcall	.-124    	; 0x66fa <_ZN6String6concatEc>
    6776:	81 11       	cpse	r24, r1
    6778:	02 c0       	rjmp	.+4      	; 0x677e <_ZplRK15StringSumHelperc+0x10>
    677a:	ce 01       	movw	r24, r28
    677c:	c2 dd       	rcall	.-1148   	; 0x6302 <_ZN6String10invalidateEv>
    677e:	ce 01       	movw	r24, r28
    6780:	df 91       	pop	r29
    6782:	cf 91       	pop	r28
    6784:	08 95       	ret

00006786 <_ZNK6String6equalsEPKc>:
    6786:	fc 01       	movw	r30, r24
    6788:	24 81       	ldd	r18, Z+4	; 0x04
    678a:	35 81       	ldd	r19, Z+5	; 0x05
    678c:	23 2b       	or	r18, r19
    678e:	31 f4       	brne	.+12     	; 0x679c <_ZNK6String6equalsEPKc+0x16>
    6790:	21 e0       	ldi	r18, 0x01	; 1
    6792:	61 15       	cp	r22, r1
    6794:	71 05       	cpc	r23, r1
    6796:	99 f0       	breq	.+38     	; 0x67be <_ZNK6String6equalsEPKc+0x38>
    6798:	fb 01       	movw	r30, r22
    679a:	08 c0       	rjmp	.+16     	; 0x67ac <_ZNK6String6equalsEPKc+0x26>
    679c:	fc 01       	movw	r30, r24
    679e:	80 81       	ld	r24, Z
    67a0:	91 81       	ldd	r25, Z+1	; 0x01
    67a2:	61 15       	cp	r22, r1
    67a4:	71 05       	cpc	r23, r1
    67a6:	31 f4       	brne	.+12     	; 0x67b4 <_ZNK6String6equalsEPKc+0x2e>
    67a8:	21 e0       	ldi	r18, 0x01	; 1
    67aa:	fc 01       	movw	r30, r24
    67ac:	80 81       	ld	r24, Z
    67ae:	88 23       	and	r24, r24
    67b0:	31 f0       	breq	.+12     	; 0x67be <_ZNK6String6equalsEPKc+0x38>
    67b2:	04 c0       	rjmp	.+8      	; 0x67bc <_ZNK6String6equalsEPKc+0x36>
    67b4:	1e d4       	rcall	.+2108   	; 0x6ff2 <strcmp>
    67b6:	21 e0       	ldi	r18, 0x01	; 1
    67b8:	89 2b       	or	r24, r25
    67ba:	09 f0       	breq	.+2      	; 0x67be <_ZNK6String6equalsEPKc+0x38>
    67bc:	20 e0       	ldi	r18, 0x00	; 0
    67be:	82 2f       	mov	r24, r18
    67c0:	08 95       	ret

000067c2 <_ZNK6String9substringEjj>:
    67c2:	bf 92       	push	r11
    67c4:	cf 92       	push	r12
    67c6:	df 92       	push	r13
    67c8:	ef 92       	push	r14
    67ca:	ff 92       	push	r15
    67cc:	0f 93       	push	r16
    67ce:	1f 93       	push	r17
    67d0:	cf 93       	push	r28
    67d2:	df 93       	push	r29
    67d4:	7c 01       	movw	r14, r24
    67d6:	6b 01       	movw	r12, r22
    67d8:	8a 01       	movw	r16, r20
    67da:	e9 01       	movw	r28, r18
    67dc:	24 17       	cp	r18, r20
    67de:	35 07       	cpc	r19, r21
    67e0:	20 f4       	brcc	.+8      	; 0x67ea <_ZNK6String9substringEjj+0x28>
    67e2:	81 2f       	mov	r24, r17
    67e4:	89 01       	movw	r16, r18
    67e6:	c4 2f       	mov	r28, r20
    67e8:	d8 2f       	mov	r29, r24
    67ea:	64 e8       	ldi	r22, 0x84	; 132
    67ec:	71 e0       	ldi	r23, 0x01	; 1
    67ee:	c7 01       	movw	r24, r14
    67f0:	eb dd       	rcall	.-1066   	; 0x63c8 <_ZN6StringC1EPKc>
    67f2:	d6 01       	movw	r26, r12
    67f4:	14 96       	adiw	r26, 0x04	; 4
    67f6:	8d 91       	ld	r24, X+
    67f8:	9c 91       	ld	r25, X
    67fa:	15 97       	sbiw	r26, 0x05	; 5
    67fc:	08 17       	cp	r16, r24
    67fe:	19 07       	cpc	r17, r25
    6800:	c0 f4       	brcc	.+48     	; 0x6832 <_ZNK6String9substringEjj+0x70>
    6802:	8c 17       	cp	r24, r28
    6804:	9d 07       	cpc	r25, r29
    6806:	08 f4       	brcc	.+2      	; 0x680a <_ZNK6String9substringEjj+0x48>
    6808:	ec 01       	movw	r28, r24
    680a:	d6 01       	movw	r26, r12
    680c:	ed 91       	ld	r30, X+
    680e:	fc 91       	ld	r31, X
    6810:	11 97       	sbiw	r26, 0x01	; 1
    6812:	ec 0f       	add	r30, r28
    6814:	fd 1f       	adc	r31, r29
    6816:	b0 80       	ld	r11, Z
    6818:	10 82       	st	Z, r1
    681a:	6d 91       	ld	r22, X+
    681c:	7c 91       	ld	r23, X
    681e:	60 0f       	add	r22, r16
    6820:	71 1f       	adc	r23, r17
    6822:	c7 01       	movw	r24, r14
    6824:	50 de       	rcall	.-864    	; 0x64c6 <_ZN6StringaSEPKc>
    6826:	d6 01       	movw	r26, r12
    6828:	ed 91       	ld	r30, X+
    682a:	fc 91       	ld	r31, X
    682c:	ec 0f       	add	r30, r28
    682e:	fd 1f       	adc	r31, r29
    6830:	b0 82       	st	Z, r11
    6832:	c7 01       	movw	r24, r14
    6834:	df 91       	pop	r29
    6836:	cf 91       	pop	r28
    6838:	1f 91       	pop	r17
    683a:	0f 91       	pop	r16
    683c:	ff 90       	pop	r15
    683e:	ef 90       	pop	r14
    6840:	df 90       	pop	r13
    6842:	cf 90       	pop	r12
    6844:	bf 90       	pop	r11
    6846:	08 95       	ret

00006848 <_ZN6String4trimEv>:

void String::trim(void)
{
    6848:	af 92       	push	r10
    684a:	bf 92       	push	r11
    684c:	cf 92       	push	r12
    684e:	df 92       	push	r13
    6850:	ef 92       	push	r14
    6852:	ff 92       	push	r15
    6854:	0f 93       	push	r16
    6856:	1f 93       	push	r17
    6858:	cf 93       	push	r28
    685a:	df 93       	push	r29
	if (!buffer || len == 0) return;
    685c:	dc 01       	movw	r26, r24
    685e:	cd 90       	ld	r12, X+
    6860:	dc 90       	ld	r13, X
    6862:	11 97       	sbiw	r26, 0x01	; 1
    6864:	c1 14       	cp	r12, r1
    6866:	d1 04       	cpc	r13, r1
    6868:	09 f4       	brne	.+2      	; 0x686c <_ZN6String4trimEv+0x24>
    686a:	3c c0       	rjmp	.+120    	; 0x68e4 <_ZN6String4trimEv+0x9c>
    686c:	14 96       	adiw	r26, 0x04	; 4
    686e:	cd 91       	ld	r28, X+
    6870:	dc 91       	ld	r29, X
    6872:	15 97       	sbiw	r26, 0x05	; 5
    6874:	20 97       	sbiw	r28, 0x00	; 0
    6876:	b1 f1       	breq	.+108    	; 0x68e4 <_ZN6String4trimEv+0x9c>
    6878:	8c 01       	movw	r16, r24
    687a:	76 01       	movw	r14, r12
    687c:	57 01       	movw	r10, r14
    687e:	bf ef       	ldi	r27, 0xFF	; 255
    6880:	ab 1a       	sub	r10, r27
    6882:	bb 0a       	sbc	r11, r27
	char *begin = buffer;
	while (isspace(*begin)) begin++;
    6884:	f7 01       	movw	r30, r14
    6886:	80 81       	ld	r24, Z
    6888:	90 e0       	ldi	r25, 0x00	; 0
    688a:	99 d3       	rcall	.+1842   	; 0x6fbe <isspace>
    688c:	89 2b       	or	r24, r25
    688e:	11 f0       	breq	.+4      	; 0x6894 <_ZN6String4trimEv+0x4c>
    6890:	75 01       	movw	r14, r10
    6892:	f4 cf       	rjmp	.-24     	; 0x687c <_ZN6String4trimEv+0x34>
	char *end = buffer + len - 1;
    6894:	21 97       	sbiw	r28, 0x01	; 1
    6896:	cc 0d       	add	r28, r12
    6898:	dd 1d       	adc	r29, r13
	while (isspace(*end) && end >= begin) end--;
    689a:	88 81       	ld	r24, Y
    689c:	90 e0       	ldi	r25, 0x00	; 0
    689e:	8f d3       	rcall	.+1822   	; 0x6fbe <isspace>
    68a0:	89 2b       	or	r24, r25
    68a2:	29 f0       	breq	.+10     	; 0x68ae <_ZN6String4trimEv+0x66>
    68a4:	ce 15       	cp	r28, r14
    68a6:	df 05       	cpc	r29, r15
    68a8:	10 f0       	brcs	.+4      	; 0x68ae <_ZN6String4trimEv+0x66>
    68aa:	21 97       	sbiw	r28, 0x01	; 1
    68ac:	f6 cf       	rjmp	.-20     	; 0x689a <_ZN6String4trimEv+0x52>
	len = end + 1 - begin;
    68ae:	ae 01       	movw	r20, r28
    68b0:	4f 5f       	subi	r20, 0xFF	; 255
    68b2:	5f 4f       	sbci	r21, 0xFF	; 255
    68b4:	4e 19       	sub	r20, r14
    68b6:	5f 09       	sbc	r21, r15
    68b8:	d8 01       	movw	r26, r16
    68ba:	15 96       	adiw	r26, 0x05	; 5
    68bc:	5c 93       	st	X, r21
    68be:	4e 93       	st	-X, r20
    68c0:	14 97       	sbiw	r26, 0x04	; 4
	if (begin > buffer) memcpy(buffer, begin, len);
    68c2:	ce 14       	cp	r12, r14
    68c4:	df 04       	cpc	r13, r15
    68c6:	18 f4       	brcc	.+6      	; 0x68ce <_ZN6String4trimEv+0x86>
    68c8:	b7 01       	movw	r22, r14
    68ca:	c6 01       	movw	r24, r12
    68cc:	89 d3       	rcall	.+1810   	; 0x6fe0 <memcpy>
	buffer[len] = 0;
    68ce:	d8 01       	movw	r26, r16
    68d0:	ed 91       	ld	r30, X+
    68d2:	fc 91       	ld	r31, X
    68d4:	11 97       	sbiw	r26, 0x01	; 1
    68d6:	14 96       	adiw	r26, 0x04	; 4
    68d8:	8d 91       	ld	r24, X+
    68da:	9c 91       	ld	r25, X
    68dc:	15 97       	sbiw	r26, 0x05	; 5
    68de:	e8 0f       	add	r30, r24
    68e0:	f9 1f       	adc	r31, r25
    68e2:	10 82       	st	Z, r1
}
    68e4:	df 91       	pop	r29
    68e6:	cf 91       	pop	r28
    68e8:	1f 91       	pop	r17
    68ea:	0f 91       	pop	r16
    68ec:	ff 90       	pop	r15
    68ee:	ef 90       	pop	r14
    68f0:	df 90       	pop	r13
    68f2:	cf 90       	pop	r12
    68f4:	bf 90       	pop	r11
    68f6:	af 90       	pop	r10
    68f8:	08 95       	ret

000068fa <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    68fa:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    68fc:	91 8d       	ldd	r25, Z+25	; 0x19
    68fe:	22 8d       	ldd	r18, Z+26	; 0x1a
    6900:	89 2f       	mov	r24, r25
    6902:	90 e0       	ldi	r25, 0x00	; 0
    6904:	80 5c       	subi	r24, 0xC0	; 192
    6906:	9f 4f       	sbci	r25, 0xFF	; 255
    6908:	82 1b       	sub	r24, r18
    690a:	91 09       	sbc	r25, r1
}
    690c:	8f 73       	andi	r24, 0x3F	; 63
    690e:	99 27       	eor	r25, r25
    6910:	08 95       	ret

00006912 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    6912:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    6914:	91 8d       	ldd	r25, Z+25	; 0x19
    6916:	82 8d       	ldd	r24, Z+26	; 0x1a
    6918:	98 17       	cp	r25, r24
    691a:	31 f0       	breq	.+12     	; 0x6928 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    691c:	82 8d       	ldd	r24, Z+26	; 0x1a
    691e:	e8 0f       	add	r30, r24
    6920:	f1 1d       	adc	r31, r1
    6922:	85 8d       	ldd	r24, Z+29	; 0x1d
    6924:	90 e0       	ldi	r25, 0x00	; 0
    6926:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    6928:	8f ef       	ldi	r24, 0xFF	; 255
    692a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    692c:	08 95       	ret

0000692e <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    692e:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    6930:	91 8d       	ldd	r25, Z+25	; 0x19
    6932:	82 8d       	ldd	r24, Z+26	; 0x1a
    6934:	98 17       	cp	r25, r24
    6936:	61 f0       	breq	.+24     	; 0x6950 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    6938:	82 8d       	ldd	r24, Z+26	; 0x1a
    693a:	df 01       	movw	r26, r30
    693c:	a8 0f       	add	r26, r24
    693e:	b1 1d       	adc	r27, r1
    6940:	5d 96       	adiw	r26, 0x1d	; 29
    6942:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    6944:	92 8d       	ldd	r25, Z+26	; 0x1a
    6946:	9f 5f       	subi	r25, 0xFF	; 255
    6948:	9f 73       	andi	r25, 0x3F	; 63
    694a:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    694c:	90 e0       	ldi	r25, 0x00	; 0
    694e:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    6950:	8f ef       	ldi	r24, 0xFF	; 255
    6952:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    6954:	08 95       	ret

00006956 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    6956:	fc 01       	movw	r30, r24
    6958:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    695a:	44 8d       	ldd	r20, Z+28	; 0x1c
    695c:	25 2f       	mov	r18, r21
    695e:	30 e0       	ldi	r19, 0x00	; 0
    6960:	84 2f       	mov	r24, r20
    6962:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    6964:	82 1b       	sub	r24, r18
    6966:	93 0b       	sbc	r25, r19
    6968:	54 17       	cp	r21, r20
    696a:	10 f0       	brcs	.+4      	; 0x6970 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    696c:	cf 96       	adiw	r24, 0x3f	; 63
    696e:	08 95       	ret
  return tail - head - 1;
    6970:	01 97       	sbiw	r24, 0x01	; 1
}
    6972:	08 95       	ret

00006974 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    6974:	81 e1       	ldi	r24, 0x11	; 17
    6976:	9e e2       	ldi	r25, 0x2E	; 46
    6978:	89 2b       	or	r24, r25
    697a:	41 f0       	breq	.+16     	; 0x698c <_Z14serialEventRunv+0x18>
    697c:	80 e0       	ldi	r24, 0x00	; 0
    697e:	90 e0       	ldi	r25, 0x00	; 0
    6980:	89 2b       	or	r24, r25
    6982:	21 f0       	breq	.+8      	; 0x698c <_Z14serialEventRunv+0x18>
    6984:	4e d9       	rcall	.-3428   	; 0x5c22 <_Z17Serial0_availablev>
    6986:	81 11       	cpse	r24, r1
    6988:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    698c:	08 95       	ret

0000698e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    698e:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    6990:	84 8d       	ldd	r24, Z+28	; 0x1c
    6992:	df 01       	movw	r26, r30
    6994:	a8 0f       	add	r26, r24
    6996:	b1 1d       	adc	r27, r1
    6998:	a3 5a       	subi	r26, 0xA3	; 163
    699a:	bf 4f       	sbci	r27, 0xFF	; 255
    699c:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    699e:	84 8d       	ldd	r24, Z+28	; 0x1c
    69a0:	90 e0       	ldi	r25, 0x00	; 0
    69a2:	01 96       	adiw	r24, 0x01	; 1
    69a4:	8f 73       	andi	r24, 0x3F	; 63
    69a6:	99 27       	eor	r25, r25
    69a8:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    69aa:	a6 89       	ldd	r26, Z+22	; 0x16
    69ac:	b7 89       	ldd	r27, Z+23	; 0x17
    69ae:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    69b0:	a0 89       	ldd	r26, Z+16	; 0x10
    69b2:	b1 89       	ldd	r27, Z+17	; 0x11
    69b4:	8c 91       	ld	r24, X
    69b6:	83 70       	andi	r24, 0x03	; 3
    69b8:	80 64       	ori	r24, 0x40	; 64
    69ba:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    69bc:	93 8d       	ldd	r25, Z+27	; 0x1b
    69be:	84 8d       	ldd	r24, Z+28	; 0x1c
    69c0:	98 13       	cpse	r25, r24
    69c2:	06 c0       	rjmp	.+12     	; 0x69d0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    69c4:	02 88       	ldd	r0, Z+18	; 0x12
    69c6:	f3 89       	ldd	r31, Z+19	; 0x13
    69c8:	e0 2d       	mov	r30, r0
    69ca:	80 81       	ld	r24, Z
    69cc:	8f 7d       	andi	r24, 0xDF	; 223
    69ce:	80 83       	st	Z, r24
    69d0:	08 95       	ret

000069d2 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    69d2:	ef 92       	push	r14
    69d4:	ff 92       	push	r15
    69d6:	0f 93       	push	r16
    69d8:	1f 93       	push	r17
    69da:	cf 93       	push	r28
    69dc:	df 93       	push	r29
    69de:	ec 01       	movw	r28, r24
  _written = true;
    69e0:	81 e0       	ldi	r24, 0x01	; 1
    69e2:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    69e4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    69e6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    69e8:	98 13       	cpse	r25, r24
    69ea:	05 c0       	rjmp	.+10     	; 0x69f6 <_ZN14HardwareSerial5writeEh+0x24>
    69ec:	e8 89       	ldd	r30, Y+16	; 0x10
    69ee:	f9 89       	ldd	r31, Y+17	; 0x11
    69f0:	80 81       	ld	r24, Z
    69f2:	85 fd       	sbrc	r24, 5
    69f4:	25 c0       	rjmp	.+74     	; 0x6a40 <_ZN14HardwareSerial5writeEh+0x6e>
    69f6:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    69f8:	0b 8d       	ldd	r16, Y+27	; 0x1b
    69fa:	10 e0       	ldi	r17, 0x00	; 0
    69fc:	0f 5f       	subi	r16, 0xFF	; 255
    69fe:	1f 4f       	sbci	r17, 0xFF	; 255
    6a00:	0f 73       	andi	r16, 0x3F	; 63
    6a02:	11 27       	eor	r17, r17
    6a04:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    6a06:	8c 8d       	ldd	r24, Y+28	; 0x1c
    6a08:	e8 12       	cpse	r14, r24
    6a0a:	0b c0       	rjmp	.+22     	; 0x6a22 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    6a0c:	0f b6       	in	r0, 0x3f	; 63
    6a0e:	07 fc       	sbrc	r0, 7
    6a10:	fa cf       	rjmp	.-12     	; 0x6a06 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    6a12:	e8 89       	ldd	r30, Y+16	; 0x10
    6a14:	f9 89       	ldd	r31, Y+17	; 0x11
    6a16:	80 81       	ld	r24, Z
    6a18:	85 ff       	sbrs	r24, 5
    6a1a:	f5 cf       	rjmp	.-22     	; 0x6a06 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    6a1c:	ce 01       	movw	r24, r28
    6a1e:	b7 df       	rcall	.-146    	; 0x698e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    6a20:	f2 cf       	rjmp	.-28     	; 0x6a06 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    6a22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6a24:	fe 01       	movw	r30, r28
    6a26:	e8 0f       	add	r30, r24
    6a28:	f1 1d       	adc	r31, r1
    6a2a:	e3 5a       	subi	r30, 0xA3	; 163
    6a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    6a2e:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    6a30:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    6a32:	f8 94       	cli
    _tx_buffer_head = i;
    6a34:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    6a36:	ea 89       	ldd	r30, Y+18	; 0x12
    6a38:	fb 89       	ldd	r31, Y+19	; 0x13
    6a3a:	80 81       	ld	r24, Z
    6a3c:	80 62       	ori	r24, 0x20	; 32
    6a3e:	0a c0       	rjmp	.+20     	; 0x6a54 <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    6a40:	9f b7       	in	r25, 0x3f	; 63
    6a42:	f8 94       	cli
      *_udr = c;
    6a44:	ee 89       	ldd	r30, Y+22	; 0x16
    6a46:	ff 89       	ldd	r31, Y+23	; 0x17
    6a48:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    6a4a:	e8 89       	ldd	r30, Y+16	; 0x10
    6a4c:	f9 89       	ldd	r31, Y+17	; 0x11
    6a4e:	80 81       	ld	r24, Z
    6a50:	83 70       	andi	r24, 0x03	; 3
    6a52:	80 64       	ori	r24, 0x40	; 64
    6a54:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    6a56:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    6a58:	81 e0       	ldi	r24, 0x01	; 1
    6a5a:	90 e0       	ldi	r25, 0x00	; 0
    6a5c:	df 91       	pop	r29
    6a5e:	cf 91       	pop	r28
    6a60:	1f 91       	pop	r17
    6a62:	0f 91       	pop	r16
    6a64:	ff 90       	pop	r15
    6a66:	ef 90       	pop	r14
    6a68:	08 95       	ret

00006a6a <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    6a6a:	cf 93       	push	r28
    6a6c:	df 93       	push	r29
    6a6e:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    6a70:	88 8d       	ldd	r24, Y+24	; 0x18
    6a72:	88 23       	and	r24, r24
    6a74:	c1 f0       	breq	.+48     	; 0x6aa6 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    6a76:	ea 89       	ldd	r30, Y+18	; 0x12
    6a78:	fb 89       	ldd	r31, Y+19	; 0x13
    6a7a:	80 81       	ld	r24, Z
    6a7c:	85 fd       	sbrc	r24, 5
    6a7e:	05 c0       	rjmp	.+10     	; 0x6a8a <_ZN14HardwareSerial5flushEv+0x20>
    6a80:	a8 89       	ldd	r26, Y+16	; 0x10
    6a82:	b9 89       	ldd	r27, Y+17	; 0x11
    6a84:	8c 91       	ld	r24, X
    6a86:	86 fd       	sbrc	r24, 6
    6a88:	0e c0       	rjmp	.+28     	; 0x6aa6 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    6a8a:	0f b6       	in	r0, 0x3f	; 63
    6a8c:	07 fc       	sbrc	r0, 7
    6a8e:	f5 cf       	rjmp	.-22     	; 0x6a7a <_ZN14HardwareSerial5flushEv+0x10>
    6a90:	80 81       	ld	r24, Z
    6a92:	85 ff       	sbrs	r24, 5
    6a94:	f2 cf       	rjmp	.-28     	; 0x6a7a <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    6a96:	a8 89       	ldd	r26, Y+16	; 0x10
    6a98:	b9 89       	ldd	r27, Y+17	; 0x11
    6a9a:	8c 91       	ld	r24, X
    6a9c:	85 ff       	sbrs	r24, 5
    6a9e:	ed cf       	rjmp	.-38     	; 0x6a7a <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    6aa0:	ce 01       	movw	r24, r28
    6aa2:	75 df       	rcall	.-278    	; 0x698e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    6aa4:	e8 cf       	rjmp	.-48     	; 0x6a76 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    6aa6:	df 91       	pop	r29
    6aa8:	cf 91       	pop	r28
    6aaa:	08 95       	ret

00006aac <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    6aac:	08 95       	ret

00006aae <__udivmodqi4>:
    6aae:	99 1b       	sub	r25, r25
    6ab0:	79 e0       	ldi	r23, 0x09	; 9
    6ab2:	04 c0       	rjmp	.+8      	; 0x6abc <__udivmodqi4_ep>

00006ab4 <__udivmodqi4_loop>:
    6ab4:	99 1f       	adc	r25, r25
    6ab6:	96 17       	cp	r25, r22
    6ab8:	08 f0       	brcs	.+2      	; 0x6abc <__udivmodqi4_ep>
    6aba:	96 1b       	sub	r25, r22

00006abc <__udivmodqi4_ep>:
    6abc:	88 1f       	adc	r24, r24
    6abe:	7a 95       	dec	r23
    6ac0:	c9 f7       	brne	.-14     	; 0x6ab4 <__udivmodqi4_loop>
    6ac2:	80 95       	com	r24
    6ac4:	08 95       	ret

00006ac6 <__udivmodhi4>:
    6ac6:	aa 1b       	sub	r26, r26
    6ac8:	bb 1b       	sub	r27, r27
    6aca:	51 e1       	ldi	r21, 0x11	; 17
    6acc:	07 c0       	rjmp	.+14     	; 0x6adc <__udivmodhi4_ep>

00006ace <__udivmodhi4_loop>:
    6ace:	aa 1f       	adc	r26, r26
    6ad0:	bb 1f       	adc	r27, r27
    6ad2:	a6 17       	cp	r26, r22
    6ad4:	b7 07       	cpc	r27, r23
    6ad6:	10 f0       	brcs	.+4      	; 0x6adc <__udivmodhi4_ep>
    6ad8:	a6 1b       	sub	r26, r22
    6ada:	b7 0b       	sbc	r27, r23

00006adc <__udivmodhi4_ep>:
    6adc:	88 1f       	adc	r24, r24
    6ade:	99 1f       	adc	r25, r25
    6ae0:	5a 95       	dec	r21
    6ae2:	a9 f7       	brne	.-22     	; 0x6ace <__udivmodhi4_loop>
    6ae4:	80 95       	com	r24
    6ae6:	90 95       	com	r25
    6ae8:	bc 01       	movw	r22, r24
    6aea:	cd 01       	movw	r24, r26
    6aec:	08 95       	ret

00006aee <__udivmodsi4>:
    6aee:	a1 e2       	ldi	r26, 0x21	; 33
    6af0:	1a 2e       	mov	r1, r26
    6af2:	aa 1b       	sub	r26, r26
    6af4:	bb 1b       	sub	r27, r27
    6af6:	fd 01       	movw	r30, r26
    6af8:	0d c0       	rjmp	.+26     	; 0x6b14 <__udivmodsi4_ep>

00006afa <__udivmodsi4_loop>:
    6afa:	aa 1f       	adc	r26, r26
    6afc:	bb 1f       	adc	r27, r27
    6afe:	ee 1f       	adc	r30, r30
    6b00:	ff 1f       	adc	r31, r31
    6b02:	a2 17       	cp	r26, r18
    6b04:	b3 07       	cpc	r27, r19
    6b06:	e4 07       	cpc	r30, r20
    6b08:	f5 07       	cpc	r31, r21
    6b0a:	20 f0       	brcs	.+8      	; 0x6b14 <__udivmodsi4_ep>
    6b0c:	a2 1b       	sub	r26, r18
    6b0e:	b3 0b       	sbc	r27, r19
    6b10:	e4 0b       	sbc	r30, r20
    6b12:	f5 0b       	sbc	r31, r21

00006b14 <__udivmodsi4_ep>:
    6b14:	66 1f       	adc	r22, r22
    6b16:	77 1f       	adc	r23, r23
    6b18:	88 1f       	adc	r24, r24
    6b1a:	99 1f       	adc	r25, r25
    6b1c:	1a 94       	dec	r1
    6b1e:	69 f7       	brne	.-38     	; 0x6afa <__udivmodsi4_loop>
    6b20:	60 95       	com	r22
    6b22:	70 95       	com	r23
    6b24:	80 95       	com	r24
    6b26:	90 95       	com	r25
    6b28:	9b 01       	movw	r18, r22
    6b2a:	ac 01       	movw	r20, r24
    6b2c:	bd 01       	movw	r22, r26
    6b2e:	cf 01       	movw	r24, r30
    6b30:	08 95       	ret

00006b32 <__tablejump2__>:
    6b32:	ee 0f       	add	r30, r30
    6b34:	ff 1f       	adc	r31, r31
    6b36:	00 24       	eor	r0, r0
    6b38:	00 1c       	adc	r0, r0
    6b3a:	0b be       	out	0x3b, r0	; 59
    6b3c:	07 90       	elpm	r0, Z+
    6b3e:	f6 91       	elpm	r31, Z
    6b40:	e0 2d       	mov	r30, r0
    6b42:	09 94       	ijmp

00006b44 <__umulhisi3>:
    6b44:	a2 9f       	mul	r26, r18
    6b46:	b0 01       	movw	r22, r0
    6b48:	b3 9f       	mul	r27, r19
    6b4a:	c0 01       	movw	r24, r0
    6b4c:	a3 9f       	mul	r26, r19
    6b4e:	70 0d       	add	r23, r0
    6b50:	81 1d       	adc	r24, r1
    6b52:	11 24       	eor	r1, r1
    6b54:	91 1d       	adc	r25, r1
    6b56:	b2 9f       	mul	r27, r18
    6b58:	70 0d       	add	r23, r0
    6b5a:	81 1d       	adc	r24, r1
    6b5c:	11 24       	eor	r1, r1
    6b5e:	91 1d       	adc	r25, r1
    6b60:	08 95       	ret

00006b62 <__muluhisi3>:
    6b62:	f0 df       	rcall	.-32     	; 0x6b44 <__umulhisi3>
    6b64:	a5 9f       	mul	r26, r21
    6b66:	90 0d       	add	r25, r0
    6b68:	b4 9f       	mul	r27, r20
    6b6a:	90 0d       	add	r25, r0
    6b6c:	a4 9f       	mul	r26, r20
    6b6e:	80 0d       	add	r24, r0
    6b70:	91 1d       	adc	r25, r1
    6b72:	11 24       	eor	r1, r1
    6b74:	08 95       	ret

00006b76 <dtostrf>:
    6b76:	ef 92       	push	r14
    6b78:	0f 93       	push	r16
    6b7a:	1f 93       	push	r17
    6b7c:	cf 93       	push	r28
    6b7e:	df 93       	push	r29
    6b80:	e8 01       	movw	r28, r16
    6b82:	47 fd       	sbrc	r20, 7
    6b84:	02 c0       	rjmp	.+4      	; 0x6b8a <dtostrf+0x14>
    6b86:	34 e0       	ldi	r19, 0x04	; 4
    6b88:	01 c0       	rjmp	.+2      	; 0x6b8c <dtostrf+0x16>
    6b8a:	34 e1       	ldi	r19, 0x14	; 20
    6b8c:	04 2e       	mov	r0, r20
    6b8e:	00 0c       	add	r0, r0
    6b90:	55 0b       	sbc	r21, r21
    6b92:	57 ff       	sbrs	r21, 7
    6b94:	03 c0       	rjmp	.+6      	; 0x6b9c <dtostrf+0x26>
    6b96:	51 95       	neg	r21
    6b98:	41 95       	neg	r20
    6b9a:	51 09       	sbc	r21, r1
    6b9c:	e3 2e       	mov	r14, r19
    6b9e:	02 2f       	mov	r16, r18
    6ba0:	24 2f       	mov	r18, r20
    6ba2:	ae 01       	movw	r20, r28
    6ba4:	9c d2       	rcall	.+1336   	; 0x70de <dtoa_prf>
    6ba6:	ce 01       	movw	r24, r28
    6ba8:	df 91       	pop	r29
    6baa:	cf 91       	pop	r28
    6bac:	1f 91       	pop	r17
    6bae:	0f 91       	pop	r16
    6bb0:	ef 90       	pop	r14
    6bb2:	08 95       	ret

00006bb4 <malloc>:
    6bb4:	0f 93       	push	r16
    6bb6:	1f 93       	push	r17
    6bb8:	cf 93       	push	r28
    6bba:	df 93       	push	r29
    6bbc:	82 30       	cpi	r24, 0x02	; 2
    6bbe:	91 05       	cpc	r25, r1
    6bc0:	10 f4       	brcc	.+4      	; 0x6bc6 <malloc+0x12>
    6bc2:	82 e0       	ldi	r24, 0x02	; 2
    6bc4:	90 e0       	ldi	r25, 0x00	; 0
    6bc6:	e0 91 cc 0b 	lds	r30, 0x0BCC	; 0x800bcc <__flp>
    6bca:	f0 91 cd 0b 	lds	r31, 0x0BCD	; 0x800bcd <__flp+0x1>
    6bce:	20 e0       	ldi	r18, 0x00	; 0
    6bd0:	30 e0       	ldi	r19, 0x00	; 0
    6bd2:	a0 e0       	ldi	r26, 0x00	; 0
    6bd4:	b0 e0       	ldi	r27, 0x00	; 0
    6bd6:	30 97       	sbiw	r30, 0x00	; 0
    6bd8:	19 f1       	breq	.+70     	; 0x6c20 <malloc+0x6c>
    6bda:	40 81       	ld	r20, Z
    6bdc:	51 81       	ldd	r21, Z+1	; 0x01
    6bde:	02 81       	ldd	r16, Z+2	; 0x02
    6be0:	13 81       	ldd	r17, Z+3	; 0x03
    6be2:	48 17       	cp	r20, r24
    6be4:	59 07       	cpc	r21, r25
    6be6:	c8 f0       	brcs	.+50     	; 0x6c1a <malloc+0x66>
    6be8:	84 17       	cp	r24, r20
    6bea:	95 07       	cpc	r25, r21
    6bec:	69 f4       	brne	.+26     	; 0x6c08 <malloc+0x54>
    6bee:	10 97       	sbiw	r26, 0x00	; 0
    6bf0:	31 f0       	breq	.+12     	; 0x6bfe <malloc+0x4a>
    6bf2:	12 96       	adiw	r26, 0x02	; 2
    6bf4:	0c 93       	st	X, r16
    6bf6:	12 97       	sbiw	r26, 0x02	; 2
    6bf8:	13 96       	adiw	r26, 0x03	; 3
    6bfa:	1c 93       	st	X, r17
    6bfc:	27 c0       	rjmp	.+78     	; 0x6c4c <malloc+0x98>
    6bfe:	00 93 cc 0b 	sts	0x0BCC, r16	; 0x800bcc <__flp>
    6c02:	10 93 cd 0b 	sts	0x0BCD, r17	; 0x800bcd <__flp+0x1>
    6c06:	22 c0       	rjmp	.+68     	; 0x6c4c <malloc+0x98>
    6c08:	21 15       	cp	r18, r1
    6c0a:	31 05       	cpc	r19, r1
    6c0c:	19 f0       	breq	.+6      	; 0x6c14 <malloc+0x60>
    6c0e:	42 17       	cp	r20, r18
    6c10:	53 07       	cpc	r21, r19
    6c12:	18 f4       	brcc	.+6      	; 0x6c1a <malloc+0x66>
    6c14:	9a 01       	movw	r18, r20
    6c16:	bd 01       	movw	r22, r26
    6c18:	ef 01       	movw	r28, r30
    6c1a:	df 01       	movw	r26, r30
    6c1c:	f8 01       	movw	r30, r16
    6c1e:	db cf       	rjmp	.-74     	; 0x6bd6 <malloc+0x22>
    6c20:	21 15       	cp	r18, r1
    6c22:	31 05       	cpc	r19, r1
    6c24:	f9 f0       	breq	.+62     	; 0x6c64 <malloc+0xb0>
    6c26:	28 1b       	sub	r18, r24
    6c28:	39 0b       	sbc	r19, r25
    6c2a:	24 30       	cpi	r18, 0x04	; 4
    6c2c:	31 05       	cpc	r19, r1
    6c2e:	80 f4       	brcc	.+32     	; 0x6c50 <malloc+0x9c>
    6c30:	8a 81       	ldd	r24, Y+2	; 0x02
    6c32:	9b 81       	ldd	r25, Y+3	; 0x03
    6c34:	61 15       	cp	r22, r1
    6c36:	71 05       	cpc	r23, r1
    6c38:	21 f0       	breq	.+8      	; 0x6c42 <malloc+0x8e>
    6c3a:	fb 01       	movw	r30, r22
    6c3c:	93 83       	std	Z+3, r25	; 0x03
    6c3e:	82 83       	std	Z+2, r24	; 0x02
    6c40:	04 c0       	rjmp	.+8      	; 0x6c4a <malloc+0x96>
    6c42:	90 93 cd 0b 	sts	0x0BCD, r25	; 0x800bcd <__flp+0x1>
    6c46:	80 93 cc 0b 	sts	0x0BCC, r24	; 0x800bcc <__flp>
    6c4a:	fe 01       	movw	r30, r28
    6c4c:	32 96       	adiw	r30, 0x02	; 2
    6c4e:	44 c0       	rjmp	.+136    	; 0x6cd8 <malloc+0x124>
    6c50:	fe 01       	movw	r30, r28
    6c52:	e2 0f       	add	r30, r18
    6c54:	f3 1f       	adc	r31, r19
    6c56:	81 93       	st	Z+, r24
    6c58:	91 93       	st	Z+, r25
    6c5a:	22 50       	subi	r18, 0x02	; 2
    6c5c:	31 09       	sbc	r19, r1
    6c5e:	39 83       	std	Y+1, r19	; 0x01
    6c60:	28 83       	st	Y, r18
    6c62:	3a c0       	rjmp	.+116    	; 0x6cd8 <malloc+0x124>
    6c64:	20 91 ca 0b 	lds	r18, 0x0BCA	; 0x800bca <__brkval>
    6c68:	30 91 cb 0b 	lds	r19, 0x0BCB	; 0x800bcb <__brkval+0x1>
    6c6c:	23 2b       	or	r18, r19
    6c6e:	41 f4       	brne	.+16     	; 0x6c80 <malloc+0xcc>
    6c70:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    6c74:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    6c78:	30 93 cb 0b 	sts	0x0BCB, r19	; 0x800bcb <__brkval+0x1>
    6c7c:	20 93 ca 0b 	sts	0x0BCA, r18	; 0x800bca <__brkval>
    6c80:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    6c84:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    6c88:	21 15       	cp	r18, r1
    6c8a:	31 05       	cpc	r19, r1
    6c8c:	41 f4       	brne	.+16     	; 0x6c9e <malloc+0xea>
    6c8e:	2d b7       	in	r18, 0x3d	; 61
    6c90:	3e b7       	in	r19, 0x3e	; 62
    6c92:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    6c96:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    6c9a:	24 1b       	sub	r18, r20
    6c9c:	35 0b       	sbc	r19, r21
    6c9e:	e0 91 ca 0b 	lds	r30, 0x0BCA	; 0x800bca <__brkval>
    6ca2:	f0 91 cb 0b 	lds	r31, 0x0BCB	; 0x800bcb <__brkval+0x1>
    6ca6:	e2 17       	cp	r30, r18
    6ca8:	f3 07       	cpc	r31, r19
    6caa:	a0 f4       	brcc	.+40     	; 0x6cd4 <malloc+0x120>
    6cac:	2e 1b       	sub	r18, r30
    6cae:	3f 0b       	sbc	r19, r31
    6cb0:	28 17       	cp	r18, r24
    6cb2:	39 07       	cpc	r19, r25
    6cb4:	78 f0       	brcs	.+30     	; 0x6cd4 <malloc+0x120>
    6cb6:	ac 01       	movw	r20, r24
    6cb8:	4e 5f       	subi	r20, 0xFE	; 254
    6cba:	5f 4f       	sbci	r21, 0xFF	; 255
    6cbc:	24 17       	cp	r18, r20
    6cbe:	35 07       	cpc	r19, r21
    6cc0:	48 f0       	brcs	.+18     	; 0x6cd4 <malloc+0x120>
    6cc2:	4e 0f       	add	r20, r30
    6cc4:	5f 1f       	adc	r21, r31
    6cc6:	50 93 cb 0b 	sts	0x0BCB, r21	; 0x800bcb <__brkval+0x1>
    6cca:	40 93 ca 0b 	sts	0x0BCA, r20	; 0x800bca <__brkval>
    6cce:	81 93       	st	Z+, r24
    6cd0:	91 93       	st	Z+, r25
    6cd2:	02 c0       	rjmp	.+4      	; 0x6cd8 <malloc+0x124>
    6cd4:	e0 e0       	ldi	r30, 0x00	; 0
    6cd6:	f0 e0       	ldi	r31, 0x00	; 0
    6cd8:	cf 01       	movw	r24, r30
    6cda:	df 91       	pop	r29
    6cdc:	cf 91       	pop	r28
    6cde:	1f 91       	pop	r17
    6ce0:	0f 91       	pop	r16
    6ce2:	08 95       	ret

00006ce4 <free>:
    6ce4:	cf 93       	push	r28
    6ce6:	df 93       	push	r29
    6ce8:	00 97       	sbiw	r24, 0x00	; 0
    6cea:	09 f4       	brne	.+2      	; 0x6cee <free+0xa>
    6cec:	81 c0       	rjmp	.+258    	; 0x6df0 <free+0x10c>
    6cee:	fc 01       	movw	r30, r24
    6cf0:	32 97       	sbiw	r30, 0x02	; 2
    6cf2:	13 82       	std	Z+3, r1	; 0x03
    6cf4:	12 82       	std	Z+2, r1	; 0x02
    6cf6:	a0 91 cc 0b 	lds	r26, 0x0BCC	; 0x800bcc <__flp>
    6cfa:	b0 91 cd 0b 	lds	r27, 0x0BCD	; 0x800bcd <__flp+0x1>
    6cfe:	10 97       	sbiw	r26, 0x00	; 0
    6d00:	81 f4       	brne	.+32     	; 0x6d22 <free+0x3e>
    6d02:	20 81       	ld	r18, Z
    6d04:	31 81       	ldd	r19, Z+1	; 0x01
    6d06:	82 0f       	add	r24, r18
    6d08:	93 1f       	adc	r25, r19
    6d0a:	20 91 ca 0b 	lds	r18, 0x0BCA	; 0x800bca <__brkval>
    6d0e:	30 91 cb 0b 	lds	r19, 0x0BCB	; 0x800bcb <__brkval+0x1>
    6d12:	28 17       	cp	r18, r24
    6d14:	39 07       	cpc	r19, r25
    6d16:	51 f5       	brne	.+84     	; 0x6d6c <free+0x88>
    6d18:	f0 93 cb 0b 	sts	0x0BCB, r31	; 0x800bcb <__brkval+0x1>
    6d1c:	e0 93 ca 0b 	sts	0x0BCA, r30	; 0x800bca <__brkval>
    6d20:	67 c0       	rjmp	.+206    	; 0x6df0 <free+0x10c>
    6d22:	ed 01       	movw	r28, r26
    6d24:	20 e0       	ldi	r18, 0x00	; 0
    6d26:	30 e0       	ldi	r19, 0x00	; 0
    6d28:	ce 17       	cp	r28, r30
    6d2a:	df 07       	cpc	r29, r31
    6d2c:	40 f4       	brcc	.+16     	; 0x6d3e <free+0x5a>
    6d2e:	4a 81       	ldd	r20, Y+2	; 0x02
    6d30:	5b 81       	ldd	r21, Y+3	; 0x03
    6d32:	9e 01       	movw	r18, r28
    6d34:	41 15       	cp	r20, r1
    6d36:	51 05       	cpc	r21, r1
    6d38:	f1 f0       	breq	.+60     	; 0x6d76 <free+0x92>
    6d3a:	ea 01       	movw	r28, r20
    6d3c:	f5 cf       	rjmp	.-22     	; 0x6d28 <free+0x44>
    6d3e:	d3 83       	std	Z+3, r29	; 0x03
    6d40:	c2 83       	std	Z+2, r28	; 0x02
    6d42:	40 81       	ld	r20, Z
    6d44:	51 81       	ldd	r21, Z+1	; 0x01
    6d46:	84 0f       	add	r24, r20
    6d48:	95 1f       	adc	r25, r21
    6d4a:	c8 17       	cp	r28, r24
    6d4c:	d9 07       	cpc	r29, r25
    6d4e:	59 f4       	brne	.+22     	; 0x6d66 <free+0x82>
    6d50:	88 81       	ld	r24, Y
    6d52:	99 81       	ldd	r25, Y+1	; 0x01
    6d54:	84 0f       	add	r24, r20
    6d56:	95 1f       	adc	r25, r21
    6d58:	02 96       	adiw	r24, 0x02	; 2
    6d5a:	91 83       	std	Z+1, r25	; 0x01
    6d5c:	80 83       	st	Z, r24
    6d5e:	8a 81       	ldd	r24, Y+2	; 0x02
    6d60:	9b 81       	ldd	r25, Y+3	; 0x03
    6d62:	93 83       	std	Z+3, r25	; 0x03
    6d64:	82 83       	std	Z+2, r24	; 0x02
    6d66:	21 15       	cp	r18, r1
    6d68:	31 05       	cpc	r19, r1
    6d6a:	29 f4       	brne	.+10     	; 0x6d76 <free+0x92>
    6d6c:	f0 93 cd 0b 	sts	0x0BCD, r31	; 0x800bcd <__flp+0x1>
    6d70:	e0 93 cc 0b 	sts	0x0BCC, r30	; 0x800bcc <__flp>
    6d74:	3d c0       	rjmp	.+122    	; 0x6df0 <free+0x10c>
    6d76:	e9 01       	movw	r28, r18
    6d78:	fb 83       	std	Y+3, r31	; 0x03
    6d7a:	ea 83       	std	Y+2, r30	; 0x02
    6d7c:	49 91       	ld	r20, Y+
    6d7e:	59 91       	ld	r21, Y+
    6d80:	c4 0f       	add	r28, r20
    6d82:	d5 1f       	adc	r29, r21
    6d84:	ec 17       	cp	r30, r28
    6d86:	fd 07       	cpc	r31, r29
    6d88:	61 f4       	brne	.+24     	; 0x6da2 <free+0xbe>
    6d8a:	80 81       	ld	r24, Z
    6d8c:	91 81       	ldd	r25, Z+1	; 0x01
    6d8e:	84 0f       	add	r24, r20
    6d90:	95 1f       	adc	r25, r21
    6d92:	02 96       	adiw	r24, 0x02	; 2
    6d94:	e9 01       	movw	r28, r18
    6d96:	99 83       	std	Y+1, r25	; 0x01
    6d98:	88 83       	st	Y, r24
    6d9a:	82 81       	ldd	r24, Z+2	; 0x02
    6d9c:	93 81       	ldd	r25, Z+3	; 0x03
    6d9e:	9b 83       	std	Y+3, r25	; 0x03
    6da0:	8a 83       	std	Y+2, r24	; 0x02
    6da2:	e0 e0       	ldi	r30, 0x00	; 0
    6da4:	f0 e0       	ldi	r31, 0x00	; 0
    6da6:	12 96       	adiw	r26, 0x02	; 2
    6da8:	8d 91       	ld	r24, X+
    6daa:	9c 91       	ld	r25, X
    6dac:	13 97       	sbiw	r26, 0x03	; 3
    6dae:	00 97       	sbiw	r24, 0x00	; 0
    6db0:	19 f0       	breq	.+6      	; 0x6db8 <free+0xd4>
    6db2:	fd 01       	movw	r30, r26
    6db4:	dc 01       	movw	r26, r24
    6db6:	f7 cf       	rjmp	.-18     	; 0x6da6 <free+0xc2>
    6db8:	8d 91       	ld	r24, X+
    6dba:	9c 91       	ld	r25, X
    6dbc:	11 97       	sbiw	r26, 0x01	; 1
    6dbe:	9d 01       	movw	r18, r26
    6dc0:	2e 5f       	subi	r18, 0xFE	; 254
    6dc2:	3f 4f       	sbci	r19, 0xFF	; 255
    6dc4:	82 0f       	add	r24, r18
    6dc6:	93 1f       	adc	r25, r19
    6dc8:	20 91 ca 0b 	lds	r18, 0x0BCA	; 0x800bca <__brkval>
    6dcc:	30 91 cb 0b 	lds	r19, 0x0BCB	; 0x800bcb <__brkval+0x1>
    6dd0:	28 17       	cp	r18, r24
    6dd2:	39 07       	cpc	r19, r25
    6dd4:	69 f4       	brne	.+26     	; 0x6df0 <free+0x10c>
    6dd6:	30 97       	sbiw	r30, 0x00	; 0
    6dd8:	29 f4       	brne	.+10     	; 0x6de4 <free+0x100>
    6dda:	10 92 cd 0b 	sts	0x0BCD, r1	; 0x800bcd <__flp+0x1>
    6dde:	10 92 cc 0b 	sts	0x0BCC, r1	; 0x800bcc <__flp>
    6de2:	02 c0       	rjmp	.+4      	; 0x6de8 <free+0x104>
    6de4:	13 82       	std	Z+3, r1	; 0x03
    6de6:	12 82       	std	Z+2, r1	; 0x02
    6de8:	b0 93 cb 0b 	sts	0x0BCB, r27	; 0x800bcb <__brkval+0x1>
    6dec:	a0 93 ca 0b 	sts	0x0BCA, r26	; 0x800bca <__brkval>
    6df0:	df 91       	pop	r29
    6df2:	cf 91       	pop	r28
    6df4:	08 95       	ret

00006df6 <realloc>:
    6df6:	6f 92       	push	r6
    6df8:	7f 92       	push	r7
    6dfa:	8f 92       	push	r8
    6dfc:	9f 92       	push	r9
    6dfe:	af 92       	push	r10
    6e00:	bf 92       	push	r11
    6e02:	cf 92       	push	r12
    6e04:	df 92       	push	r13
    6e06:	ef 92       	push	r14
    6e08:	ff 92       	push	r15
    6e0a:	0f 93       	push	r16
    6e0c:	1f 93       	push	r17
    6e0e:	cf 93       	push	r28
    6e10:	df 93       	push	r29
    6e12:	00 97       	sbiw	r24, 0x00	; 0
    6e14:	81 f4       	brne	.+32     	; 0x6e36 <realloc+0x40>
    6e16:	cb 01       	movw	r24, r22
    6e18:	df 91       	pop	r29
    6e1a:	cf 91       	pop	r28
    6e1c:	1f 91       	pop	r17
    6e1e:	0f 91       	pop	r16
    6e20:	ff 90       	pop	r15
    6e22:	ef 90       	pop	r14
    6e24:	df 90       	pop	r13
    6e26:	cf 90       	pop	r12
    6e28:	bf 90       	pop	r11
    6e2a:	af 90       	pop	r10
    6e2c:	9f 90       	pop	r9
    6e2e:	8f 90       	pop	r8
    6e30:	7f 90       	pop	r7
    6e32:	6f 90       	pop	r6
    6e34:	bf ce       	rjmp	.-642    	; 0x6bb4 <malloc>
    6e36:	fc 01       	movw	r30, r24
    6e38:	e6 0f       	add	r30, r22
    6e3a:	f7 1f       	adc	r31, r23
    6e3c:	9c 01       	movw	r18, r24
    6e3e:	22 50       	subi	r18, 0x02	; 2
    6e40:	31 09       	sbc	r19, r1
    6e42:	e2 17       	cp	r30, r18
    6e44:	f3 07       	cpc	r31, r19
    6e46:	08 f4       	brcc	.+2      	; 0x6e4a <realloc+0x54>
    6e48:	a5 c0       	rjmp	.+330    	; 0x6f94 <realloc+0x19e>
    6e4a:	ec 01       	movw	r28, r24
    6e4c:	d9 01       	movw	r26, r18
    6e4e:	0d 91       	ld	r16, X+
    6e50:	1c 91       	ld	r17, X
    6e52:	11 97       	sbiw	r26, 0x01	; 1
    6e54:	06 17       	cp	r16, r22
    6e56:	17 07       	cpc	r17, r23
    6e58:	a8 f0       	brcs	.+42     	; 0x6e84 <realloc+0x8e>
    6e5a:	05 30       	cpi	r16, 0x05	; 5
    6e5c:	11 05       	cpc	r17, r1
    6e5e:	08 f4       	brcc	.+2      	; 0x6e62 <realloc+0x6c>
    6e60:	97 c0       	rjmp	.+302    	; 0x6f90 <realloc+0x19a>
    6e62:	c8 01       	movw	r24, r16
    6e64:	04 97       	sbiw	r24, 0x04	; 4
    6e66:	86 17       	cp	r24, r22
    6e68:	97 07       	cpc	r25, r23
    6e6a:	08 f4       	brcc	.+2      	; 0x6e6e <realloc+0x78>
    6e6c:	91 c0       	rjmp	.+290    	; 0x6f90 <realloc+0x19a>
    6e6e:	02 50       	subi	r16, 0x02	; 2
    6e70:	11 09       	sbc	r17, r1
    6e72:	06 1b       	sub	r16, r22
    6e74:	17 0b       	sbc	r17, r23
    6e76:	01 93       	st	Z+, r16
    6e78:	11 93       	st	Z+, r17
    6e7a:	6d 93       	st	X+, r22
    6e7c:	7c 93       	st	X, r23
    6e7e:	cf 01       	movw	r24, r30
    6e80:	31 df       	rcall	.-414    	; 0x6ce4 <free>
    6e82:	86 c0       	rjmp	.+268    	; 0x6f90 <realloc+0x19a>
    6e84:	5b 01       	movw	r10, r22
    6e86:	a0 1a       	sub	r10, r16
    6e88:	b1 0a       	sbc	r11, r17
    6e8a:	4c 01       	movw	r8, r24
    6e8c:	80 0e       	add	r8, r16
    6e8e:	91 1e       	adc	r9, r17
    6e90:	a0 91 cc 0b 	lds	r26, 0x0BCC	; 0x800bcc <__flp>
    6e94:	b0 91 cd 0b 	lds	r27, 0x0BCD	; 0x800bcd <__flp+0x1>
    6e98:	61 2c       	mov	r6, r1
    6e9a:	71 2c       	mov	r7, r1
    6e9c:	e1 2c       	mov	r14, r1
    6e9e:	f1 2c       	mov	r15, r1
    6ea0:	10 97       	sbiw	r26, 0x00	; 0
    6ea2:	09 f4       	brne	.+2      	; 0x6ea6 <realloc+0xb0>
    6ea4:	46 c0       	rjmp	.+140    	; 0x6f32 <realloc+0x13c>
    6ea6:	8d 91       	ld	r24, X+
    6ea8:	9c 91       	ld	r25, X
    6eaa:	11 97       	sbiw	r26, 0x01	; 1
    6eac:	a8 15       	cp	r26, r8
    6eae:	b9 05       	cpc	r27, r9
    6eb0:	b1 f5       	brne	.+108    	; 0x6f1e <realloc+0x128>
    6eb2:	6c 01       	movw	r12, r24
    6eb4:	42 e0       	ldi	r20, 0x02	; 2
    6eb6:	c4 0e       	add	r12, r20
    6eb8:	d1 1c       	adc	r13, r1
    6eba:	ca 14       	cp	r12, r10
    6ebc:	db 04       	cpc	r13, r11
    6ebe:	78 f1       	brcs	.+94     	; 0x6f1e <realloc+0x128>
    6ec0:	4c 01       	movw	r8, r24
    6ec2:	8a 18       	sub	r8, r10
    6ec4:	9b 08       	sbc	r9, r11
    6ec6:	64 01       	movw	r12, r8
    6ec8:	42 e0       	ldi	r20, 0x02	; 2
    6eca:	c4 0e       	add	r12, r20
    6ecc:	d1 1c       	adc	r13, r1
    6ece:	12 96       	adiw	r26, 0x02	; 2
    6ed0:	bc 90       	ld	r11, X
    6ed2:	12 97       	sbiw	r26, 0x02	; 2
    6ed4:	13 96       	adiw	r26, 0x03	; 3
    6ed6:	ac 91       	ld	r26, X
    6ed8:	b5 e0       	ldi	r27, 0x05	; 5
    6eda:	cb 16       	cp	r12, r27
    6edc:	d1 04       	cpc	r13, r1
    6ede:	40 f0       	brcs	.+16     	; 0x6ef0 <realloc+0xfa>
    6ee0:	b2 82       	std	Z+2, r11	; 0x02
    6ee2:	a3 83       	std	Z+3, r26	; 0x03
    6ee4:	91 82       	std	Z+1, r9	; 0x01
    6ee6:	80 82       	st	Z, r8
    6ee8:	d9 01       	movw	r26, r18
    6eea:	6d 93       	st	X+, r22
    6eec:	7c 93       	st	X, r23
    6eee:	09 c0       	rjmp	.+18     	; 0x6f02 <realloc+0x10c>
    6ef0:	0e 5f       	subi	r16, 0xFE	; 254
    6ef2:	1f 4f       	sbci	r17, 0xFF	; 255
    6ef4:	80 0f       	add	r24, r16
    6ef6:	91 1f       	adc	r25, r17
    6ef8:	f9 01       	movw	r30, r18
    6efa:	91 83       	std	Z+1, r25	; 0x01
    6efc:	80 83       	st	Z, r24
    6efe:	eb 2d       	mov	r30, r11
    6f00:	fa 2f       	mov	r31, r26
    6f02:	e1 14       	cp	r14, r1
    6f04:	f1 04       	cpc	r15, r1
    6f06:	31 f0       	breq	.+12     	; 0x6f14 <realloc+0x11e>
    6f08:	d7 01       	movw	r26, r14
    6f0a:	13 96       	adiw	r26, 0x03	; 3
    6f0c:	fc 93       	st	X, r31
    6f0e:	ee 93       	st	-X, r30
    6f10:	12 97       	sbiw	r26, 0x02	; 2
    6f12:	3e c0       	rjmp	.+124    	; 0x6f90 <realloc+0x19a>
    6f14:	f0 93 cd 0b 	sts	0x0BCD, r31	; 0x800bcd <__flp+0x1>
    6f18:	e0 93 cc 0b 	sts	0x0BCC, r30	; 0x800bcc <__flp>
    6f1c:	39 c0       	rjmp	.+114    	; 0x6f90 <realloc+0x19a>
    6f1e:	68 16       	cp	r6, r24
    6f20:	79 06       	cpc	r7, r25
    6f22:	08 f4       	brcc	.+2      	; 0x6f26 <realloc+0x130>
    6f24:	3c 01       	movw	r6, r24
    6f26:	7d 01       	movw	r14, r26
    6f28:	12 96       	adiw	r26, 0x02	; 2
    6f2a:	0d 90       	ld	r0, X+
    6f2c:	bc 91       	ld	r27, X
    6f2e:	a0 2d       	mov	r26, r0
    6f30:	b7 cf       	rjmp	.-146    	; 0x6ea0 <realloc+0xaa>
    6f32:	80 91 ca 0b 	lds	r24, 0x0BCA	; 0x800bca <__brkval>
    6f36:	90 91 cb 0b 	lds	r25, 0x0BCB	; 0x800bcb <__brkval+0x1>
    6f3a:	88 16       	cp	r8, r24
    6f3c:	99 06       	cpc	r9, r25
    6f3e:	e1 f4       	brne	.+56     	; 0x6f78 <realloc+0x182>
    6f40:	66 16       	cp	r6, r22
    6f42:	77 06       	cpc	r7, r23
    6f44:	c8 f4       	brcc	.+50     	; 0x6f78 <realloc+0x182>
    6f46:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    6f4a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    6f4e:	00 97       	sbiw	r24, 0x00	; 0
    6f50:	41 f4       	brne	.+16     	; 0x6f62 <realloc+0x16c>
    6f52:	8d b7       	in	r24, 0x3d	; 61
    6f54:	9e b7       	in	r25, 0x3e	; 62
    6f56:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    6f5a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    6f5e:	84 1b       	sub	r24, r20
    6f60:	95 0b       	sbc	r25, r21
    6f62:	e8 17       	cp	r30, r24
    6f64:	f9 07       	cpc	r31, r25
    6f66:	b0 f4       	brcc	.+44     	; 0x6f94 <realloc+0x19e>
    6f68:	f0 93 cb 0b 	sts	0x0BCB, r31	; 0x800bcb <__brkval+0x1>
    6f6c:	e0 93 ca 0b 	sts	0x0BCA, r30	; 0x800bca <__brkval>
    6f70:	f9 01       	movw	r30, r18
    6f72:	71 83       	std	Z+1, r23	; 0x01
    6f74:	60 83       	st	Z, r22
    6f76:	0c c0       	rjmp	.+24     	; 0x6f90 <realloc+0x19a>
    6f78:	cb 01       	movw	r24, r22
    6f7a:	1c de       	rcall	.-968    	; 0x6bb4 <malloc>
    6f7c:	7c 01       	movw	r14, r24
    6f7e:	00 97       	sbiw	r24, 0x00	; 0
    6f80:	49 f0       	breq	.+18     	; 0x6f94 <realloc+0x19e>
    6f82:	a8 01       	movw	r20, r16
    6f84:	be 01       	movw	r22, r28
    6f86:	2c d0       	rcall	.+88     	; 0x6fe0 <memcpy>
    6f88:	ce 01       	movw	r24, r28
    6f8a:	ac de       	rcall	.-680    	; 0x6ce4 <free>
    6f8c:	c7 01       	movw	r24, r14
    6f8e:	04 c0       	rjmp	.+8      	; 0x6f98 <realloc+0x1a2>
    6f90:	ce 01       	movw	r24, r28
    6f92:	02 c0       	rjmp	.+4      	; 0x6f98 <realloc+0x1a2>
    6f94:	80 e0       	ldi	r24, 0x00	; 0
    6f96:	90 e0       	ldi	r25, 0x00	; 0
    6f98:	df 91       	pop	r29
    6f9a:	cf 91       	pop	r28
    6f9c:	1f 91       	pop	r17
    6f9e:	0f 91       	pop	r16
    6fa0:	ff 90       	pop	r15
    6fa2:	ef 90       	pop	r14
    6fa4:	df 90       	pop	r13
    6fa6:	cf 90       	pop	r12
    6fa8:	bf 90       	pop	r11
    6faa:	af 90       	pop	r10
    6fac:	9f 90       	pop	r9
    6fae:	8f 90       	pop	r8
    6fb0:	7f 90       	pop	r7
    6fb2:	6f 90       	pop	r6
    6fb4:	08 95       	ret

00006fb6 <abort>:
    6fb6:	81 e0       	ldi	r24, 0x01	; 1
    6fb8:	90 e0       	ldi	r25, 0x00	; 0
    6fba:	f8 94       	cli
    6fbc:	f1 c2       	rjmp	.+1506   	; 0x75a0 <__do_global_dtors>

00006fbe <isspace>:
    6fbe:	91 11       	cpse	r25, r1
    6fc0:	dc c2       	rjmp	.+1464   	; 0x757a <__ctype_isfalse>
    6fc2:	80 32       	cpi	r24, 0x20	; 32
    6fc4:	19 f0       	breq	.+6      	; 0x6fcc <isspace+0xe>
    6fc6:	89 50       	subi	r24, 0x09	; 9
    6fc8:	85 50       	subi	r24, 0x05	; 5
    6fca:	d0 f7       	brcc	.-12     	; 0x6fc0 <isspace+0x2>
    6fcc:	08 95       	ret

00006fce <memcpy_P>:
    6fce:	fb 01       	movw	r30, r22
    6fd0:	dc 01       	movw	r26, r24
    6fd2:	02 c0       	rjmp	.+4      	; 0x6fd8 <memcpy_P+0xa>
    6fd4:	05 90       	lpm	r0, Z+
    6fd6:	0d 92       	st	X+, r0
    6fd8:	41 50       	subi	r20, 0x01	; 1
    6fda:	50 40       	sbci	r21, 0x00	; 0
    6fdc:	d8 f7       	brcc	.-10     	; 0x6fd4 <memcpy_P+0x6>
    6fde:	08 95       	ret

00006fe0 <memcpy>:
    6fe0:	fb 01       	movw	r30, r22
    6fe2:	dc 01       	movw	r26, r24
    6fe4:	02 c0       	rjmp	.+4      	; 0x6fea <memcpy+0xa>
    6fe6:	01 90       	ld	r0, Z+
    6fe8:	0d 92       	st	X+, r0
    6fea:	41 50       	subi	r20, 0x01	; 1
    6fec:	50 40       	sbci	r21, 0x00	; 0
    6fee:	d8 f7       	brcc	.-10     	; 0x6fe6 <memcpy+0x6>
    6ff0:	08 95       	ret

00006ff2 <strcmp>:
    6ff2:	fb 01       	movw	r30, r22
    6ff4:	dc 01       	movw	r26, r24
    6ff6:	8d 91       	ld	r24, X+
    6ff8:	01 90       	ld	r0, Z+
    6ffa:	80 19       	sub	r24, r0
    6ffc:	01 10       	cpse	r0, r1
    6ffe:	d9 f3       	breq	.-10     	; 0x6ff6 <strcmp+0x4>
    7000:	99 0b       	sbc	r25, r25
    7002:	08 95       	ret

00007004 <strcpy>:
    7004:	fb 01       	movw	r30, r22
    7006:	dc 01       	movw	r26, r24
    7008:	01 90       	ld	r0, Z+
    700a:	0d 92       	st	X+, r0
    700c:	00 20       	and	r0, r0
    700e:	e1 f7       	brne	.-8      	; 0x7008 <strcpy+0x4>
    7010:	08 95       	ret

00007012 <strncmp>:
    7012:	fb 01       	movw	r30, r22
    7014:	dc 01       	movw	r26, r24
    7016:	41 50       	subi	r20, 0x01	; 1
    7018:	50 40       	sbci	r21, 0x00	; 0
    701a:	30 f0       	brcs	.+12     	; 0x7028 <strncmp+0x16>
    701c:	8d 91       	ld	r24, X+
    701e:	01 90       	ld	r0, Z+
    7020:	80 19       	sub	r24, r0
    7022:	19 f4       	brne	.+6      	; 0x702a <strncmp+0x18>
    7024:	00 20       	and	r0, r0
    7026:	b9 f7       	brne	.-18     	; 0x7016 <strncmp+0x4>
    7028:	88 1b       	sub	r24, r24
    702a:	99 0b       	sbc	r25, r25
    702c:	08 95       	ret

0000702e <__itoa_ncheck>:
    702e:	bb 27       	eor	r27, r27
    7030:	4a 30       	cpi	r20, 0x0A	; 10
    7032:	31 f4       	brne	.+12     	; 0x7040 <__itoa_ncheck+0x12>
    7034:	99 23       	and	r25, r25
    7036:	22 f4       	brpl	.+8      	; 0x7040 <__itoa_ncheck+0x12>
    7038:	bd e2       	ldi	r27, 0x2D	; 45
    703a:	90 95       	com	r25
    703c:	81 95       	neg	r24
    703e:	9f 4f       	sbci	r25, 0xFF	; 255
    7040:	36 c0       	rjmp	.+108    	; 0x70ae <__utoa_common>

00007042 <ultoa>:
    7042:	25 32       	cpi	r18, 0x25	; 37
    7044:	31 05       	cpc	r19, r1
    7046:	18 f4       	brcc	.+6      	; 0x704e <ultoa+0xc>
    7048:	22 30       	cpi	r18, 0x02	; 2
    704a:	08 f0       	brcs	.+2      	; 0x704e <ultoa+0xc>
    704c:	04 c0       	rjmp	.+8      	; 0x7056 <__ultoa_ncheck>
    704e:	fa 01       	movw	r30, r20
    7050:	10 82       	st	Z, r1
    7052:	ca 01       	movw	r24, r20
    7054:	08 95       	ret

00007056 <__ultoa_ncheck>:
    7056:	bb 27       	eor	r27, r27

00007058 <__ultoa_common>:
    7058:	fa 01       	movw	r30, r20
    705a:	a6 2f       	mov	r26, r22
    705c:	62 17       	cp	r22, r18
    705e:	71 05       	cpc	r23, r1
    7060:	81 05       	cpc	r24, r1
    7062:	91 05       	cpc	r25, r1
    7064:	33 0b       	sbc	r19, r19
    7066:	30 fb       	bst	r19, 0
    7068:	66 f0       	brts	.+24     	; 0x7082 <__ultoa_common+0x2a>
    706a:	aa 27       	eor	r26, r26
    706c:	66 0f       	add	r22, r22
    706e:	77 1f       	adc	r23, r23
    7070:	88 1f       	adc	r24, r24
    7072:	99 1f       	adc	r25, r25
    7074:	aa 1f       	adc	r26, r26
    7076:	a2 17       	cp	r26, r18
    7078:	10 f0       	brcs	.+4      	; 0x707e <__ultoa_common+0x26>
    707a:	a2 1b       	sub	r26, r18
    707c:	63 95       	inc	r22
    707e:	38 50       	subi	r19, 0x08	; 8
    7080:	a9 f7       	brne	.-22     	; 0x706c <__ultoa_common+0x14>
    7082:	a0 5d       	subi	r26, 0xD0	; 208
    7084:	aa 33       	cpi	r26, 0x3A	; 58
    7086:	08 f0       	brcs	.+2      	; 0x708a <__ultoa_common+0x32>
    7088:	a9 5d       	subi	r26, 0xD9	; 217
    708a:	a1 93       	st	Z+, r26
    708c:	36 f7       	brtc	.-52     	; 0x705a <__ultoa_common+0x2>
    708e:	b1 11       	cpse	r27, r1
    7090:	b1 93       	st	Z+, r27
    7092:	10 82       	st	Z, r1
    7094:	ca 01       	movw	r24, r20
    7096:	74 c2       	rjmp	.+1256   	; 0x7580 <strrev>

00007098 <utoa>:
    7098:	45 32       	cpi	r20, 0x25	; 37
    709a:	51 05       	cpc	r21, r1
    709c:	18 f4       	brcc	.+6      	; 0x70a4 <utoa+0xc>
    709e:	42 30       	cpi	r20, 0x02	; 2
    70a0:	08 f0       	brcs	.+2      	; 0x70a4 <utoa+0xc>
    70a2:	04 c0       	rjmp	.+8      	; 0x70ac <__utoa_ncheck>
    70a4:	fb 01       	movw	r30, r22
    70a6:	10 82       	st	Z, r1
    70a8:	cb 01       	movw	r24, r22
    70aa:	08 95       	ret

000070ac <__utoa_ncheck>:
    70ac:	bb 27       	eor	r27, r27

000070ae <__utoa_common>:
    70ae:	fb 01       	movw	r30, r22
    70b0:	55 27       	eor	r21, r21
    70b2:	aa 27       	eor	r26, r26
    70b4:	88 0f       	add	r24, r24
    70b6:	99 1f       	adc	r25, r25
    70b8:	aa 1f       	adc	r26, r26
    70ba:	a4 17       	cp	r26, r20
    70bc:	10 f0       	brcs	.+4      	; 0x70c2 <__utoa_common+0x14>
    70be:	a4 1b       	sub	r26, r20
    70c0:	83 95       	inc	r24
    70c2:	50 51       	subi	r21, 0x10	; 16
    70c4:	b9 f7       	brne	.-18     	; 0x70b4 <__utoa_common+0x6>
    70c6:	a0 5d       	subi	r26, 0xD0	; 208
    70c8:	aa 33       	cpi	r26, 0x3A	; 58
    70ca:	08 f0       	brcs	.+2      	; 0x70ce <__utoa_common+0x20>
    70cc:	a9 5d       	subi	r26, 0xD9	; 217
    70ce:	a1 93       	st	Z+, r26
    70d0:	00 97       	sbiw	r24, 0x00	; 0
    70d2:	79 f7       	brne	.-34     	; 0x70b2 <__utoa_common+0x4>
    70d4:	b1 11       	cpse	r27, r1
    70d6:	b1 93       	st	Z+, r27
    70d8:	11 92       	st	Z+, r1
    70da:	cb 01       	movw	r24, r22
    70dc:	51 c2       	rjmp	.+1186   	; 0x7580 <strrev>

000070de <dtoa_prf>:
    70de:	8f 92       	push	r8
    70e0:	9f 92       	push	r9
    70e2:	af 92       	push	r10
    70e4:	bf 92       	push	r11
    70e6:	cf 92       	push	r12
    70e8:	df 92       	push	r13
    70ea:	ef 92       	push	r14
    70ec:	ff 92       	push	r15
    70ee:	0f 93       	push	r16
    70f0:	1f 93       	push	r17
    70f2:	cf 93       	push	r28
    70f4:	df 93       	push	r29
    70f6:	cd b7       	in	r28, 0x3d	; 61
    70f8:	de b7       	in	r29, 0x3e	; 62
    70fa:	29 97       	sbiw	r28, 0x09	; 9
    70fc:	0f b6       	in	r0, 0x3f	; 63
    70fe:	f8 94       	cli
    7100:	de bf       	out	0x3e, r29	; 62
    7102:	0f be       	out	0x3f, r0	; 63
    7104:	cd bf       	out	0x3d, r28	; 61
    7106:	6a 01       	movw	r12, r20
    7108:	12 2f       	mov	r17, r18
    710a:	b0 2e       	mov	r11, r16
    710c:	2b e3       	ldi	r18, 0x3B	; 59
    710e:	20 17       	cp	r18, r16
    7110:	20 f0       	brcs	.+8      	; 0x711a <dtoa_prf+0x3c>
    7112:	ff 24       	eor	r15, r15
    7114:	f3 94       	inc	r15
    7116:	f0 0e       	add	r15, r16
    7118:	02 c0       	rjmp	.+4      	; 0x711e <dtoa_prf+0x40>
    711a:	2c e3       	ldi	r18, 0x3C	; 60
    711c:	f2 2e       	mov	r15, r18
    711e:	0f 2d       	mov	r16, r15
    7120:	27 e0       	ldi	r18, 0x07	; 7
    7122:	ae 01       	movw	r20, r28
    7124:	4f 5f       	subi	r20, 0xFF	; 255
    7126:	5f 4f       	sbci	r21, 0xFF	; 255
    7128:	50 d1       	rcall	.+672    	; 0x73ca <__ftoa_engine>
    712a:	bc 01       	movw	r22, r24
    712c:	49 81       	ldd	r20, Y+1	; 0x01
    712e:	84 2f       	mov	r24, r20
    7130:	89 70       	andi	r24, 0x09	; 9
    7132:	81 30       	cpi	r24, 0x01	; 1
    7134:	31 f0       	breq	.+12     	; 0x7142 <dtoa_prf+0x64>
    7136:	e1 fc       	sbrc	r14, 1
    7138:	06 c0       	rjmp	.+12     	; 0x7146 <dtoa_prf+0x68>
    713a:	e0 fe       	sbrs	r14, 0
    713c:	06 c0       	rjmp	.+12     	; 0x714a <dtoa_prf+0x6c>
    713e:	90 e2       	ldi	r25, 0x20	; 32
    7140:	05 c0       	rjmp	.+10     	; 0x714c <dtoa_prf+0x6e>
    7142:	9d e2       	ldi	r25, 0x2D	; 45
    7144:	03 c0       	rjmp	.+6      	; 0x714c <dtoa_prf+0x6e>
    7146:	9b e2       	ldi	r25, 0x2B	; 43
    7148:	01 c0       	rjmp	.+2      	; 0x714c <dtoa_prf+0x6e>
    714a:	90 e0       	ldi	r25, 0x00	; 0
    714c:	5e 2d       	mov	r21, r14
    714e:	50 71       	andi	r21, 0x10	; 16
    7150:	43 ff       	sbrs	r20, 3
    7152:	3c c0       	rjmp	.+120    	; 0x71cc <dtoa_prf+0xee>
    7154:	91 11       	cpse	r25, r1
    7156:	02 c0       	rjmp	.+4      	; 0x715c <dtoa_prf+0x7e>
    7158:	83 e0       	ldi	r24, 0x03	; 3
    715a:	01 c0       	rjmp	.+2      	; 0x715e <dtoa_prf+0x80>
    715c:	84 e0       	ldi	r24, 0x04	; 4
    715e:	81 17       	cp	r24, r17
    7160:	18 f4       	brcc	.+6      	; 0x7168 <dtoa_prf+0x8a>
    7162:	21 2f       	mov	r18, r17
    7164:	28 1b       	sub	r18, r24
    7166:	01 c0       	rjmp	.+2      	; 0x716a <dtoa_prf+0x8c>
    7168:	20 e0       	ldi	r18, 0x00	; 0
    716a:	51 11       	cpse	r21, r1
    716c:	0b c0       	rjmp	.+22     	; 0x7184 <dtoa_prf+0xa6>
    716e:	f6 01       	movw	r30, r12
    7170:	82 2f       	mov	r24, r18
    7172:	30 e2       	ldi	r19, 0x20	; 32
    7174:	88 23       	and	r24, r24
    7176:	19 f0       	breq	.+6      	; 0x717e <dtoa_prf+0xa0>
    7178:	31 93       	st	Z+, r19
    717a:	81 50       	subi	r24, 0x01	; 1
    717c:	fb cf       	rjmp	.-10     	; 0x7174 <dtoa_prf+0x96>
    717e:	c2 0e       	add	r12, r18
    7180:	d1 1c       	adc	r13, r1
    7182:	20 e0       	ldi	r18, 0x00	; 0
    7184:	99 23       	and	r25, r25
    7186:	29 f0       	breq	.+10     	; 0x7192 <dtoa_prf+0xb4>
    7188:	d6 01       	movw	r26, r12
    718a:	9c 93       	st	X, r25
    718c:	f6 01       	movw	r30, r12
    718e:	31 96       	adiw	r30, 0x01	; 1
    7190:	6f 01       	movw	r12, r30
    7192:	c6 01       	movw	r24, r12
    7194:	03 96       	adiw	r24, 0x03	; 3
    7196:	e2 fe       	sbrs	r14, 2
    7198:	0a c0       	rjmp	.+20     	; 0x71ae <dtoa_prf+0xd0>
    719a:	3e e4       	ldi	r19, 0x4E	; 78
    719c:	d6 01       	movw	r26, r12
    719e:	3c 93       	st	X, r19
    71a0:	41 e4       	ldi	r20, 0x41	; 65
    71a2:	11 96       	adiw	r26, 0x01	; 1
    71a4:	4c 93       	st	X, r20
    71a6:	11 97       	sbiw	r26, 0x01	; 1
    71a8:	12 96       	adiw	r26, 0x02	; 2
    71aa:	3c 93       	st	X, r19
    71ac:	06 c0       	rjmp	.+12     	; 0x71ba <dtoa_prf+0xdc>
    71ae:	3e e6       	ldi	r19, 0x6E	; 110
    71b0:	f6 01       	movw	r30, r12
    71b2:	30 83       	st	Z, r19
    71b4:	41 e6       	ldi	r20, 0x61	; 97
    71b6:	41 83       	std	Z+1, r20	; 0x01
    71b8:	32 83       	std	Z+2, r19	; 0x02
    71ba:	fc 01       	movw	r30, r24
    71bc:	32 2f       	mov	r19, r18
    71be:	40 e2       	ldi	r20, 0x20	; 32
    71c0:	33 23       	and	r19, r19
    71c2:	09 f4       	brne	.+2      	; 0x71c6 <dtoa_prf+0xe8>
    71c4:	42 c0       	rjmp	.+132    	; 0x724a <dtoa_prf+0x16c>
    71c6:	41 93       	st	Z+, r20
    71c8:	31 50       	subi	r19, 0x01	; 1
    71ca:	fa cf       	rjmp	.-12     	; 0x71c0 <dtoa_prf+0xe2>
    71cc:	42 ff       	sbrs	r20, 2
    71ce:	44 c0       	rjmp	.+136    	; 0x7258 <dtoa_prf+0x17a>
    71d0:	91 11       	cpse	r25, r1
    71d2:	02 c0       	rjmp	.+4      	; 0x71d8 <dtoa_prf+0xfa>
    71d4:	83 e0       	ldi	r24, 0x03	; 3
    71d6:	01 c0       	rjmp	.+2      	; 0x71da <dtoa_prf+0xfc>
    71d8:	84 e0       	ldi	r24, 0x04	; 4
    71da:	81 17       	cp	r24, r17
    71dc:	18 f4       	brcc	.+6      	; 0x71e4 <dtoa_prf+0x106>
    71de:	21 2f       	mov	r18, r17
    71e0:	28 1b       	sub	r18, r24
    71e2:	01 c0       	rjmp	.+2      	; 0x71e6 <dtoa_prf+0x108>
    71e4:	20 e0       	ldi	r18, 0x00	; 0
    71e6:	51 11       	cpse	r21, r1
    71e8:	0b c0       	rjmp	.+22     	; 0x7200 <dtoa_prf+0x122>
    71ea:	f6 01       	movw	r30, r12
    71ec:	82 2f       	mov	r24, r18
    71ee:	30 e2       	ldi	r19, 0x20	; 32
    71f0:	88 23       	and	r24, r24
    71f2:	19 f0       	breq	.+6      	; 0x71fa <dtoa_prf+0x11c>
    71f4:	31 93       	st	Z+, r19
    71f6:	81 50       	subi	r24, 0x01	; 1
    71f8:	fb cf       	rjmp	.-10     	; 0x71f0 <dtoa_prf+0x112>
    71fa:	c2 0e       	add	r12, r18
    71fc:	d1 1c       	adc	r13, r1
    71fe:	20 e0       	ldi	r18, 0x00	; 0
    7200:	99 23       	and	r25, r25
    7202:	29 f0       	breq	.+10     	; 0x720e <dtoa_prf+0x130>
    7204:	d6 01       	movw	r26, r12
    7206:	9c 93       	st	X, r25
    7208:	f6 01       	movw	r30, r12
    720a:	31 96       	adiw	r30, 0x01	; 1
    720c:	6f 01       	movw	r12, r30
    720e:	c6 01       	movw	r24, r12
    7210:	03 96       	adiw	r24, 0x03	; 3
    7212:	e2 fe       	sbrs	r14, 2
    7214:	0b c0       	rjmp	.+22     	; 0x722c <dtoa_prf+0x14e>
    7216:	39 e4       	ldi	r19, 0x49	; 73
    7218:	d6 01       	movw	r26, r12
    721a:	3c 93       	st	X, r19
    721c:	3e e4       	ldi	r19, 0x4E	; 78
    721e:	11 96       	adiw	r26, 0x01	; 1
    7220:	3c 93       	st	X, r19
    7222:	11 97       	sbiw	r26, 0x01	; 1
    7224:	36 e4       	ldi	r19, 0x46	; 70
    7226:	12 96       	adiw	r26, 0x02	; 2
    7228:	3c 93       	st	X, r19
    722a:	07 c0       	rjmp	.+14     	; 0x723a <dtoa_prf+0x15c>
    722c:	39 e6       	ldi	r19, 0x69	; 105
    722e:	f6 01       	movw	r30, r12
    7230:	30 83       	st	Z, r19
    7232:	3e e6       	ldi	r19, 0x6E	; 110
    7234:	31 83       	std	Z+1, r19	; 0x01
    7236:	36 e6       	ldi	r19, 0x66	; 102
    7238:	32 83       	std	Z+2, r19	; 0x02
    723a:	fc 01       	movw	r30, r24
    723c:	32 2f       	mov	r19, r18
    723e:	40 e2       	ldi	r20, 0x20	; 32
    7240:	33 23       	and	r19, r19
    7242:	19 f0       	breq	.+6      	; 0x724a <dtoa_prf+0x16c>
    7244:	41 93       	st	Z+, r20
    7246:	31 50       	subi	r19, 0x01	; 1
    7248:	fb cf       	rjmp	.-10     	; 0x7240 <dtoa_prf+0x162>
    724a:	fc 01       	movw	r30, r24
    724c:	e2 0f       	add	r30, r18
    724e:	f1 1d       	adc	r31, r1
    7250:	10 82       	st	Z, r1
    7252:	8e ef       	ldi	r24, 0xFE	; 254
    7254:	9f ef       	ldi	r25, 0xFF	; 255
    7256:	a6 c0       	rjmp	.+332    	; 0x73a4 <dtoa_prf+0x2c6>
    7258:	21 e0       	ldi	r18, 0x01	; 1
    725a:	30 e0       	ldi	r19, 0x00	; 0
    725c:	91 11       	cpse	r25, r1
    725e:	02 c0       	rjmp	.+4      	; 0x7264 <dtoa_prf+0x186>
    7260:	20 e0       	ldi	r18, 0x00	; 0
    7262:	30 e0       	ldi	r19, 0x00	; 0
    7264:	16 16       	cp	r1, r22
    7266:	17 06       	cpc	r1, r23
    7268:	1c f4       	brge	.+6      	; 0x7270 <dtoa_prf+0x192>
    726a:	fb 01       	movw	r30, r22
    726c:	31 96       	adiw	r30, 0x01	; 1
    726e:	02 c0       	rjmp	.+4      	; 0x7274 <dtoa_prf+0x196>
    7270:	e1 e0       	ldi	r30, 0x01	; 1
    7272:	f0 e0       	ldi	r31, 0x00	; 0
    7274:	2e 0f       	add	r18, r30
    7276:	3f 1f       	adc	r19, r31
    7278:	bb 20       	and	r11, r11
    727a:	21 f0       	breq	.+8      	; 0x7284 <dtoa_prf+0x1a6>
    727c:	eb 2d       	mov	r30, r11
    727e:	f0 e0       	ldi	r31, 0x00	; 0
    7280:	31 96       	adiw	r30, 0x01	; 1
    7282:	02 c0       	rjmp	.+4      	; 0x7288 <dtoa_prf+0x1aa>
    7284:	e0 e0       	ldi	r30, 0x00	; 0
    7286:	f0 e0       	ldi	r31, 0x00	; 0
    7288:	2e 0f       	add	r18, r30
    728a:	3f 1f       	adc	r19, r31
    728c:	e1 2f       	mov	r30, r17
    728e:	f0 e0       	ldi	r31, 0x00	; 0
    7290:	2e 17       	cp	r18, r30
    7292:	3f 07       	cpc	r19, r31
    7294:	1c f4       	brge	.+6      	; 0x729c <dtoa_prf+0x1be>
    7296:	12 1b       	sub	r17, r18
    7298:	21 2f       	mov	r18, r17
    729a:	01 c0       	rjmp	.+2      	; 0x729e <dtoa_prf+0x1c0>
    729c:	20 e0       	ldi	r18, 0x00	; 0
    729e:	8e 2d       	mov	r24, r14
    72a0:	88 71       	andi	r24, 0x18	; 24
    72a2:	59 f4       	brne	.+22     	; 0x72ba <dtoa_prf+0x1dc>
    72a4:	f6 01       	movw	r30, r12
    72a6:	82 2f       	mov	r24, r18
    72a8:	30 e2       	ldi	r19, 0x20	; 32
    72aa:	88 23       	and	r24, r24
    72ac:	19 f0       	breq	.+6      	; 0x72b4 <dtoa_prf+0x1d6>
    72ae:	31 93       	st	Z+, r19
    72b0:	81 50       	subi	r24, 0x01	; 1
    72b2:	fb cf       	rjmp	.-10     	; 0x72aa <dtoa_prf+0x1cc>
    72b4:	c2 0e       	add	r12, r18
    72b6:	d1 1c       	adc	r13, r1
    72b8:	20 e0       	ldi	r18, 0x00	; 0
    72ba:	99 23       	and	r25, r25
    72bc:	29 f0       	breq	.+10     	; 0x72c8 <dtoa_prf+0x1ea>
    72be:	d6 01       	movw	r26, r12
    72c0:	9c 93       	st	X, r25
    72c2:	f6 01       	movw	r30, r12
    72c4:	31 96       	adiw	r30, 0x01	; 1
    72c6:	6f 01       	movw	r12, r30
    72c8:	51 11       	cpse	r21, r1
    72ca:	0b c0       	rjmp	.+22     	; 0x72e2 <dtoa_prf+0x204>
    72cc:	f6 01       	movw	r30, r12
    72ce:	82 2f       	mov	r24, r18
    72d0:	90 e3       	ldi	r25, 0x30	; 48
    72d2:	88 23       	and	r24, r24
    72d4:	19 f0       	breq	.+6      	; 0x72dc <dtoa_prf+0x1fe>
    72d6:	91 93       	st	Z+, r25
    72d8:	81 50       	subi	r24, 0x01	; 1
    72da:	fb cf       	rjmp	.-10     	; 0x72d2 <dtoa_prf+0x1f4>
    72dc:	c2 0e       	add	r12, r18
    72de:	d1 1c       	adc	r13, r1
    72e0:	20 e0       	ldi	r18, 0x00	; 0
    72e2:	0f 2d       	mov	r16, r15
    72e4:	06 0f       	add	r16, r22
    72e6:	9a 81       	ldd	r25, Y+2	; 0x02
    72e8:	34 2f       	mov	r19, r20
    72ea:	30 71       	andi	r19, 0x10	; 16
    72ec:	44 ff       	sbrs	r20, 4
    72ee:	03 c0       	rjmp	.+6      	; 0x72f6 <dtoa_prf+0x218>
    72f0:	91 33       	cpi	r25, 0x31	; 49
    72f2:	09 f4       	brne	.+2      	; 0x72f6 <dtoa_prf+0x218>
    72f4:	01 50       	subi	r16, 0x01	; 1
    72f6:	10 16       	cp	r1, r16
    72f8:	24 f4       	brge	.+8      	; 0x7302 <dtoa_prf+0x224>
    72fa:	09 30       	cpi	r16, 0x09	; 9
    72fc:	18 f0       	brcs	.+6      	; 0x7304 <dtoa_prf+0x226>
    72fe:	08 e0       	ldi	r16, 0x08	; 8
    7300:	01 c0       	rjmp	.+2      	; 0x7304 <dtoa_prf+0x226>
    7302:	01 e0       	ldi	r16, 0x01	; 1
    7304:	ab 01       	movw	r20, r22
    7306:	77 ff       	sbrs	r23, 7
    7308:	02 c0       	rjmp	.+4      	; 0x730e <dtoa_prf+0x230>
    730a:	40 e0       	ldi	r20, 0x00	; 0
    730c:	50 e0       	ldi	r21, 0x00	; 0
    730e:	fb 01       	movw	r30, r22
    7310:	e4 1b       	sub	r30, r20
    7312:	f5 0b       	sbc	r31, r21
    7314:	a1 e0       	ldi	r26, 0x01	; 1
    7316:	b0 e0       	ldi	r27, 0x00	; 0
    7318:	ac 0f       	add	r26, r28
    731a:	bd 1f       	adc	r27, r29
    731c:	ea 0f       	add	r30, r26
    731e:	fb 1f       	adc	r31, r27
    7320:	8e e2       	ldi	r24, 0x2E	; 46
    7322:	a8 2e       	mov	r10, r24
    7324:	4b 01       	movw	r8, r22
    7326:	80 1a       	sub	r8, r16
    7328:	91 08       	sbc	r9, r1
    732a:	0b 2d       	mov	r16, r11
    732c:	10 e0       	ldi	r17, 0x00	; 0
    732e:	11 95       	neg	r17
    7330:	01 95       	neg	r16
    7332:	11 09       	sbc	r17, r1
    7334:	4f 3f       	cpi	r20, 0xFF	; 255
    7336:	bf ef       	ldi	r27, 0xFF	; 255
    7338:	5b 07       	cpc	r21, r27
    733a:	21 f4       	brne	.+8      	; 0x7344 <dtoa_prf+0x266>
    733c:	d6 01       	movw	r26, r12
    733e:	ac 92       	st	X, r10
    7340:	11 96       	adiw	r26, 0x01	; 1
    7342:	6d 01       	movw	r12, r26
    7344:	64 17       	cp	r22, r20
    7346:	75 07       	cpc	r23, r21
    7348:	2c f0       	brlt	.+10     	; 0x7354 <dtoa_prf+0x276>
    734a:	84 16       	cp	r8, r20
    734c:	95 06       	cpc	r9, r21
    734e:	14 f4       	brge	.+4      	; 0x7354 <dtoa_prf+0x276>
    7350:	81 81       	ldd	r24, Z+1	; 0x01
    7352:	01 c0       	rjmp	.+2      	; 0x7356 <dtoa_prf+0x278>
    7354:	80 e3       	ldi	r24, 0x30	; 48
    7356:	41 50       	subi	r20, 0x01	; 1
    7358:	51 09       	sbc	r21, r1
    735a:	31 96       	adiw	r30, 0x01	; 1
    735c:	d6 01       	movw	r26, r12
    735e:	11 96       	adiw	r26, 0x01	; 1
    7360:	7d 01       	movw	r14, r26
    7362:	40 17       	cp	r20, r16
    7364:	51 07       	cpc	r21, r17
    7366:	24 f0       	brlt	.+8      	; 0x7370 <dtoa_prf+0x292>
    7368:	d6 01       	movw	r26, r12
    736a:	8c 93       	st	X, r24
    736c:	67 01       	movw	r12, r14
    736e:	e2 cf       	rjmp	.-60     	; 0x7334 <dtoa_prf+0x256>
    7370:	64 17       	cp	r22, r20
    7372:	75 07       	cpc	r23, r21
    7374:	39 f4       	brne	.+14     	; 0x7384 <dtoa_prf+0x2a6>
    7376:	96 33       	cpi	r25, 0x36	; 54
    7378:	20 f4       	brcc	.+8      	; 0x7382 <dtoa_prf+0x2a4>
    737a:	95 33       	cpi	r25, 0x35	; 53
    737c:	19 f4       	brne	.+6      	; 0x7384 <dtoa_prf+0x2a6>
    737e:	31 11       	cpse	r19, r1
    7380:	01 c0       	rjmp	.+2      	; 0x7384 <dtoa_prf+0x2a6>
    7382:	81 e3       	ldi	r24, 0x31	; 49
    7384:	f6 01       	movw	r30, r12
    7386:	80 83       	st	Z, r24
    7388:	f7 01       	movw	r30, r14
    738a:	82 2f       	mov	r24, r18
    738c:	90 e2       	ldi	r25, 0x20	; 32
    738e:	88 23       	and	r24, r24
    7390:	19 f0       	breq	.+6      	; 0x7398 <dtoa_prf+0x2ba>
    7392:	91 93       	st	Z+, r25
    7394:	81 50       	subi	r24, 0x01	; 1
    7396:	fb cf       	rjmp	.-10     	; 0x738e <dtoa_prf+0x2b0>
    7398:	f7 01       	movw	r30, r14
    739a:	e2 0f       	add	r30, r18
    739c:	f1 1d       	adc	r31, r1
    739e:	10 82       	st	Z, r1
    73a0:	80 e0       	ldi	r24, 0x00	; 0
    73a2:	90 e0       	ldi	r25, 0x00	; 0
    73a4:	29 96       	adiw	r28, 0x09	; 9
    73a6:	0f b6       	in	r0, 0x3f	; 63
    73a8:	f8 94       	cli
    73aa:	de bf       	out	0x3e, r29	; 62
    73ac:	0f be       	out	0x3f, r0	; 63
    73ae:	cd bf       	out	0x3d, r28	; 61
    73b0:	df 91       	pop	r29
    73b2:	cf 91       	pop	r28
    73b4:	1f 91       	pop	r17
    73b6:	0f 91       	pop	r16
    73b8:	ff 90       	pop	r15
    73ba:	ef 90       	pop	r14
    73bc:	df 90       	pop	r13
    73be:	cf 90       	pop	r12
    73c0:	bf 90       	pop	r11
    73c2:	af 90       	pop	r10
    73c4:	9f 90       	pop	r9
    73c6:	8f 90       	pop	r8
    73c8:	08 95       	ret

000073ca <__ftoa_engine>:
    73ca:	28 30       	cpi	r18, 0x08	; 8
    73cc:	08 f0       	brcs	.+2      	; 0x73d0 <__ftoa_engine+0x6>
    73ce:	27 e0       	ldi	r18, 0x07	; 7
    73d0:	33 27       	eor	r19, r19
    73d2:	da 01       	movw	r26, r20
    73d4:	99 0f       	add	r25, r25
    73d6:	31 1d       	adc	r19, r1
    73d8:	87 fd       	sbrc	r24, 7
    73da:	91 60       	ori	r25, 0x01	; 1
    73dc:	00 96       	adiw	r24, 0x00	; 0
    73de:	61 05       	cpc	r22, r1
    73e0:	71 05       	cpc	r23, r1
    73e2:	39 f4       	brne	.+14     	; 0x73f2 <__ftoa_engine+0x28>
    73e4:	32 60       	ori	r19, 0x02	; 2
    73e6:	2e 5f       	subi	r18, 0xFE	; 254
    73e8:	3d 93       	st	X+, r19
    73ea:	30 e3       	ldi	r19, 0x30	; 48
    73ec:	2a 95       	dec	r18
    73ee:	e1 f7       	brne	.-8      	; 0x73e8 <__ftoa_engine+0x1e>
    73f0:	08 95       	ret
    73f2:	9f 3f       	cpi	r25, 0xFF	; 255
    73f4:	30 f0       	brcs	.+12     	; 0x7402 <__ftoa_engine+0x38>
    73f6:	80 38       	cpi	r24, 0x80	; 128
    73f8:	71 05       	cpc	r23, r1
    73fa:	61 05       	cpc	r22, r1
    73fc:	09 f0       	breq	.+2      	; 0x7400 <__ftoa_engine+0x36>
    73fe:	3c 5f       	subi	r19, 0xFC	; 252
    7400:	3c 5f       	subi	r19, 0xFC	; 252
    7402:	3d 93       	st	X+, r19
    7404:	91 30       	cpi	r25, 0x01	; 1
    7406:	08 f0       	brcs	.+2      	; 0x740a <__ftoa_engine+0x40>
    7408:	80 68       	ori	r24, 0x80	; 128
    740a:	91 1d       	adc	r25, r1
    740c:	df 93       	push	r29
    740e:	cf 93       	push	r28
    7410:	1f 93       	push	r17
    7412:	0f 93       	push	r16
    7414:	ff 92       	push	r15
    7416:	ef 92       	push	r14
    7418:	19 2f       	mov	r17, r25
    741a:	98 7f       	andi	r25, 0xF8	; 248
    741c:	96 95       	lsr	r25
    741e:	e9 2f       	mov	r30, r25
    7420:	96 95       	lsr	r25
    7422:	96 95       	lsr	r25
    7424:	e9 0f       	add	r30, r25
    7426:	ff 27       	eor	r31, r31
    7428:	ec 5d       	subi	r30, 0xDC	; 220
    742a:	fe 4f       	sbci	r31, 0xFE	; 254
    742c:	99 27       	eor	r25, r25
    742e:	33 27       	eor	r19, r19
    7430:	ee 24       	eor	r14, r14
    7432:	ff 24       	eor	r15, r15
    7434:	a7 01       	movw	r20, r14
    7436:	e7 01       	movw	r28, r14
    7438:	05 90       	lpm	r0, Z+
    743a:	08 94       	sec
    743c:	07 94       	ror	r0
    743e:	28 f4       	brcc	.+10     	; 0x744a <__ftoa_engine+0x80>
    7440:	36 0f       	add	r19, r22
    7442:	e7 1e       	adc	r14, r23
    7444:	f8 1e       	adc	r15, r24
    7446:	49 1f       	adc	r20, r25
    7448:	51 1d       	adc	r21, r1
    744a:	66 0f       	add	r22, r22
    744c:	77 1f       	adc	r23, r23
    744e:	88 1f       	adc	r24, r24
    7450:	99 1f       	adc	r25, r25
    7452:	06 94       	lsr	r0
    7454:	a1 f7       	brne	.-24     	; 0x743e <__ftoa_engine+0x74>
    7456:	05 90       	lpm	r0, Z+
    7458:	07 94       	ror	r0
    745a:	28 f4       	brcc	.+10     	; 0x7466 <__ftoa_engine+0x9c>
    745c:	e7 0e       	add	r14, r23
    745e:	f8 1e       	adc	r15, r24
    7460:	49 1f       	adc	r20, r25
    7462:	56 1f       	adc	r21, r22
    7464:	c1 1d       	adc	r28, r1
    7466:	77 0f       	add	r23, r23
    7468:	88 1f       	adc	r24, r24
    746a:	99 1f       	adc	r25, r25
    746c:	66 1f       	adc	r22, r22
    746e:	06 94       	lsr	r0
    7470:	a1 f7       	brne	.-24     	; 0x745a <__ftoa_engine+0x90>
    7472:	05 90       	lpm	r0, Z+
    7474:	07 94       	ror	r0
    7476:	28 f4       	brcc	.+10     	; 0x7482 <__ftoa_engine+0xb8>
    7478:	f8 0e       	add	r15, r24
    747a:	49 1f       	adc	r20, r25
    747c:	56 1f       	adc	r21, r22
    747e:	c7 1f       	adc	r28, r23
    7480:	d1 1d       	adc	r29, r1
    7482:	88 0f       	add	r24, r24
    7484:	99 1f       	adc	r25, r25
    7486:	66 1f       	adc	r22, r22
    7488:	77 1f       	adc	r23, r23
    748a:	06 94       	lsr	r0
    748c:	a1 f7       	brne	.-24     	; 0x7476 <__ftoa_engine+0xac>
    748e:	05 90       	lpm	r0, Z+
    7490:	07 94       	ror	r0
    7492:	20 f4       	brcc	.+8      	; 0x749c <__ftoa_engine+0xd2>
    7494:	49 0f       	add	r20, r25
    7496:	56 1f       	adc	r21, r22
    7498:	c7 1f       	adc	r28, r23
    749a:	d8 1f       	adc	r29, r24
    749c:	99 0f       	add	r25, r25
    749e:	66 1f       	adc	r22, r22
    74a0:	77 1f       	adc	r23, r23
    74a2:	88 1f       	adc	r24, r24
    74a4:	06 94       	lsr	r0
    74a6:	a9 f7       	brne	.-22     	; 0x7492 <__ftoa_engine+0xc8>
    74a8:	84 91       	lpm	r24, Z
    74aa:	10 95       	com	r17
    74ac:	17 70       	andi	r17, 0x07	; 7
    74ae:	41 f0       	breq	.+16     	; 0x74c0 <__ftoa_engine+0xf6>
    74b0:	d6 95       	lsr	r29
    74b2:	c7 95       	ror	r28
    74b4:	57 95       	ror	r21
    74b6:	47 95       	ror	r20
    74b8:	f7 94       	ror	r15
    74ba:	e7 94       	ror	r14
    74bc:	1a 95       	dec	r17
    74be:	c1 f7       	brne	.-16     	; 0x74b0 <__ftoa_engine+0xe6>
    74c0:	ea ec       	ldi	r30, 0xCA	; 202
    74c2:	f0 e0       	ldi	r31, 0x00	; 0
    74c4:	68 94       	set
    74c6:	15 90       	lpm	r1, Z+
    74c8:	15 91       	lpm	r17, Z+
    74ca:	35 91       	lpm	r19, Z+
    74cc:	65 91       	lpm	r22, Z+
    74ce:	95 91       	lpm	r25, Z+
    74d0:	05 90       	lpm	r0, Z+
    74d2:	7f e2       	ldi	r23, 0x2F	; 47
    74d4:	73 95       	inc	r23
    74d6:	e1 18       	sub	r14, r1
    74d8:	f1 0a       	sbc	r15, r17
    74da:	43 0b       	sbc	r20, r19
    74dc:	56 0b       	sbc	r21, r22
    74de:	c9 0b       	sbc	r28, r25
    74e0:	d0 09       	sbc	r29, r0
    74e2:	c0 f7       	brcc	.-16     	; 0x74d4 <__ftoa_engine+0x10a>
    74e4:	e1 0c       	add	r14, r1
    74e6:	f1 1e       	adc	r15, r17
    74e8:	43 1f       	adc	r20, r19
    74ea:	56 1f       	adc	r21, r22
    74ec:	c9 1f       	adc	r28, r25
    74ee:	d0 1d       	adc	r29, r0
    74f0:	7e f4       	brtc	.+30     	; 0x7510 <__ftoa_engine+0x146>
    74f2:	70 33       	cpi	r23, 0x30	; 48
    74f4:	11 f4       	brne	.+4      	; 0x74fa <__ftoa_engine+0x130>
    74f6:	8a 95       	dec	r24
    74f8:	e6 cf       	rjmp	.-52     	; 0x74c6 <__ftoa_engine+0xfc>
    74fa:	e8 94       	clt
    74fc:	01 50       	subi	r16, 0x01	; 1
    74fe:	30 f0       	brcs	.+12     	; 0x750c <__ftoa_engine+0x142>
    7500:	08 0f       	add	r16, r24
    7502:	0a f4       	brpl	.+2      	; 0x7506 <__ftoa_engine+0x13c>
    7504:	00 27       	eor	r16, r16
    7506:	02 17       	cp	r16, r18
    7508:	08 f4       	brcc	.+2      	; 0x750c <__ftoa_engine+0x142>
    750a:	20 2f       	mov	r18, r16
    750c:	23 95       	inc	r18
    750e:	02 2f       	mov	r16, r18
    7510:	7a 33       	cpi	r23, 0x3A	; 58
    7512:	28 f0       	brcs	.+10     	; 0x751e <__ftoa_engine+0x154>
    7514:	79 e3       	ldi	r23, 0x39	; 57
    7516:	7d 93       	st	X+, r23
    7518:	2a 95       	dec	r18
    751a:	e9 f7       	brne	.-6      	; 0x7516 <__ftoa_engine+0x14c>
    751c:	10 c0       	rjmp	.+32     	; 0x753e <__ftoa_engine+0x174>
    751e:	7d 93       	st	X+, r23
    7520:	2a 95       	dec	r18
    7522:	89 f6       	brne	.-94     	; 0x74c6 <__ftoa_engine+0xfc>
    7524:	06 94       	lsr	r0
    7526:	97 95       	ror	r25
    7528:	67 95       	ror	r22
    752a:	37 95       	ror	r19
    752c:	17 95       	ror	r17
    752e:	17 94       	ror	r1
    7530:	e1 18       	sub	r14, r1
    7532:	f1 0a       	sbc	r15, r17
    7534:	43 0b       	sbc	r20, r19
    7536:	56 0b       	sbc	r21, r22
    7538:	c9 0b       	sbc	r28, r25
    753a:	d0 09       	sbc	r29, r0
    753c:	98 f0       	brcs	.+38     	; 0x7564 <__ftoa_engine+0x19a>
    753e:	23 95       	inc	r18
    7540:	7e 91       	ld	r23, -X
    7542:	73 95       	inc	r23
    7544:	7a 33       	cpi	r23, 0x3A	; 58
    7546:	08 f0       	brcs	.+2      	; 0x754a <__ftoa_engine+0x180>
    7548:	70 e3       	ldi	r23, 0x30	; 48
    754a:	7c 93       	st	X, r23
    754c:	20 13       	cpse	r18, r16
    754e:	b8 f7       	brcc	.-18     	; 0x753e <__ftoa_engine+0x174>
    7550:	7e 91       	ld	r23, -X
    7552:	70 61       	ori	r23, 0x10	; 16
    7554:	7d 93       	st	X+, r23
    7556:	30 f0       	brcs	.+12     	; 0x7564 <__ftoa_engine+0x19a>
    7558:	83 95       	inc	r24
    755a:	71 e3       	ldi	r23, 0x31	; 49
    755c:	7d 93       	st	X+, r23
    755e:	70 e3       	ldi	r23, 0x30	; 48
    7560:	2a 95       	dec	r18
    7562:	e1 f7       	brne	.-8      	; 0x755c <__ftoa_engine+0x192>
    7564:	11 24       	eor	r1, r1
    7566:	ef 90       	pop	r14
    7568:	ff 90       	pop	r15
    756a:	0f 91       	pop	r16
    756c:	1f 91       	pop	r17
    756e:	cf 91       	pop	r28
    7570:	df 91       	pop	r29
    7572:	99 27       	eor	r25, r25
    7574:	87 fd       	sbrc	r24, 7
    7576:	90 95       	com	r25
    7578:	08 95       	ret

0000757a <__ctype_isfalse>:
    757a:	99 27       	eor	r25, r25
    757c:	88 27       	eor	r24, r24

0000757e <__ctype_istrue>:
    757e:	08 95       	ret

00007580 <strrev>:
    7580:	dc 01       	movw	r26, r24
    7582:	fc 01       	movw	r30, r24
    7584:	67 2f       	mov	r22, r23
    7586:	71 91       	ld	r23, Z+
    7588:	77 23       	and	r23, r23
    758a:	e1 f7       	brne	.-8      	; 0x7584 <strrev+0x4>
    758c:	32 97       	sbiw	r30, 0x02	; 2
    758e:	04 c0       	rjmp	.+8      	; 0x7598 <strrev+0x18>
    7590:	7c 91       	ld	r23, X
    7592:	6d 93       	st	X+, r22
    7594:	70 83       	st	Z, r23
    7596:	62 91       	ld	r22, -Z
    7598:	ae 17       	cp	r26, r30
    759a:	bf 07       	cpc	r27, r31
    759c:	c8 f3       	brcs	.-14     	; 0x7590 <strrev+0x10>
    759e:	08 95       	ret

000075a0 <__do_global_dtors>:
    75a0:	11 e0       	ldi	r17, 0x01	; 1
    75a2:	c2 e6       	ldi	r28, 0x62	; 98
    75a4:	d1 e0       	ldi	r29, 0x01	; 1
    75a6:	03 c0       	rjmp	.+6      	; 0x75ae <__do_global_dtors+0xe>
    75a8:	fe 01       	movw	r30, r28
    75aa:	c3 da       	rcall	.-2682   	; 0x6b32 <__tablejump2__>
    75ac:	21 96       	adiw	r28, 0x01	; 1
    75ae:	c3 36       	cpi	r28, 0x63	; 99
    75b0:	d1 07       	cpc	r29, r17
    75b2:	d1 f7       	brne	.-12     	; 0x75a8 <__do_global_dtors+0x8>
    75b4:	f8 94       	cli

000075b6 <__stop_program>:
    75b6:	ff cf       	rjmp	.-2      	; 0x75b6 <__stop_program>
