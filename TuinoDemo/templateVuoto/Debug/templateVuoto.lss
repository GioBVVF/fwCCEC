
templateVuoto.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000008f6  00800100  00008082  00008116  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00008082  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000359  008009f6  008009f6  00008a0c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00008a0c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00008a3c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000012d8  00000000  00000000  00008a80  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0003c1fe  00000000  00000000  00009d58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00007633  00000000  00000000  00045f56  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000c04d  00000000  00000000  0004d589  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000423c  00000000  00000000  000595d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00008911  00000000  00000000  0005d814  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00019229  00000000  00000000  00066125  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001398  00000000  00000000  0007f34e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	62 c1       	rjmp	.+708    	; 0x2c6 <__dtors_end>
       2:	00 00       	nop
       4:	8a c1       	rjmp	.+788    	; 0x31a <__bad_interrupt>
       6:	00 00       	nop
       8:	88 c1       	rjmp	.+784    	; 0x31a <__bad_interrupt>
       a:	00 00       	nop
       c:	86 c1       	rjmp	.+780    	; 0x31a <__bad_interrupt>
       e:	00 00       	nop
      10:	0c 94 fa 12 	jmp	0x25f4	; 0x25f4 <__vector_4>
      14:	82 c1       	rjmp	.+772    	; 0x31a <__bad_interrupt>
      16:	00 00       	nop
      18:	80 c1       	rjmp	.+768    	; 0x31a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	0c 94 2a 13 	jmp	0x2654	; 0x2654 <__vector_7>
      20:	7c c1       	rjmp	.+760    	; 0x31a <__bad_interrupt>
      22:	00 00       	nop
      24:	7a c1       	rjmp	.+756    	; 0x31a <__bad_interrupt>
      26:	00 00       	nop
      28:	78 c1       	rjmp	.+752    	; 0x31a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	76 c1       	rjmp	.+748    	; 0x31a <__bad_interrupt>
      2e:	00 00       	nop
      30:	74 c1       	rjmp	.+744    	; 0x31a <__bad_interrupt>
      32:	00 00       	nop
      34:	72 c1       	rjmp	.+740    	; 0x31a <__bad_interrupt>
      36:	00 00       	nop
      38:	70 c1       	rjmp	.+736    	; 0x31a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6e c1       	rjmp	.+732    	; 0x31a <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 7e 35 	jmp	0x6afc	; 0x6afc <__vector_16>
      44:	6a c1       	rjmp	.+724    	; 0x31a <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 6c 33 	jmp	0x66d8	; 0x66d8 <__vector_18>
      4c:	0c 94 9e 33 	jmp	0x673c	; 0x673c <__vector_19>
      50:	64 c1       	rjmp	.+712    	; 0x31a <__bad_interrupt>
      52:	00 00       	nop
      54:	62 c1       	rjmp	.+708    	; 0x31a <__bad_interrupt>
      56:	00 00       	nop
      58:	60 c1       	rjmp	.+704    	; 0x31a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5e c1       	rjmp	.+700    	; 0x31a <__bad_interrupt>
      5e:	00 00       	nop
      60:	5c c1       	rjmp	.+696    	; 0x31a <__bad_interrupt>
      62:	00 00       	nop
      64:	5a c1       	rjmp	.+692    	; 0x31a <__bad_interrupt>
      66:	00 00       	nop
      68:	0c 94 7d 2e 	jmp	0x5cfa	; 0x5cfa <__vector_26>
      6c:	56 c1       	rjmp	.+684    	; 0x31a <__bad_interrupt>
      6e:	00 00       	nop
      70:	54 c1       	rjmp	.+680    	; 0x31a <__bad_interrupt>
      72:	00 00       	nop
      74:	52 c1       	rjmp	.+676    	; 0x31a <__bad_interrupt>
      76:	00 00       	nop
      78:	50 c1       	rjmp	.+672    	; 0x31a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4e c1       	rjmp	.+668    	; 0x31a <__bad_interrupt>
      7e:	00 00       	nop
      80:	4c c1       	rjmp	.+664    	; 0x31a <__bad_interrupt>
      82:	00 00       	nop
      84:	4a c1       	rjmp	.+660    	; 0x31a <__bad_interrupt>
      86:	00 00       	nop
      88:	48 c1       	rjmp	.+656    	; 0x31a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	cf 0b       	sbc	r28, r31
      8e:	f5 0b       	sbc	r31, r21
      90:	0a 0c       	add	r0, r10
      92:	63 0c       	add	r6, r3
      94:	af 0c       	add	r10, r15
      96:	3b 0d       	add	r19, r11
      98:	49 0e       	add	r4, r25
      9a:	af 0e       	add	r10, r31
      9c:	3f 0f       	add	r19, r31
      9e:	2b 10       	cpse	r2, r11
      a0:	9d 11       	cpse	r25, r13
      a2:	9d 11       	cpse	r25, r13
      a4:	14 1d       	adc	r17, r4
      a6:	2b 1d       	adc	r18, r11
      a8:	2b 1d       	adc	r18, r11
      aa:	28 1d       	adc	r18, r8
      ac:	2b 1d       	adc	r18, r11
      ae:	12 1d       	adc	r17, r2
      b0:	2b 1d       	adc	r18, r11
      b2:	2b 1d       	adc	r18, r11
      b4:	2b 1d       	adc	r18, r11
      b6:	06 1d       	adc	r16, r6
      b8:	2b 1d       	adc	r18, r11
      ba:	2b 1d       	adc	r18, r11
      bc:	1b 1d       	adc	r17, r11
      be:	26 1d       	adc	r18, r6
      c0:	24 1d       	adc	r18, r4
      c2:	2b 1d       	adc	r18, r11
      c4:	2b 1d       	adc	r18, r11
      c6:	2b 1d       	adc	r18, r11
      c8:	22 1d       	adc	r18, r2

000000ca <__trampolines_end>:
      ca:	00 40       	sbci	r16, 0x00	; 0
      cc:	7a 10       	cpse	r7, r10
      ce:	f3 5a       	subi	r31, 0xA3	; 163
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	72 4e       	sbci	r23, 0xE2	; 226
      d4:	18 09       	sbc	r17, r8
      d6:	00 10       	cpse	r0, r0
      d8:	a5 d4       	rcall	.+2378   	; 0xa24 <_Z14GetCodeRfidATev+0xae>
      da:	e8 00       	.word	0x00e8	; ????
      dc:	00 e8       	ldi	r16, 0x80	; 128
      de:	76 48       	sbci	r23, 0x86	; 134
      e0:	17 00       	.word	0x0017	; ????
      e2:	00 e4       	ldi	r16, 0x40	; 64
      e4:	0b 54       	subi	r16, 0x4B	; 75
      e6:	02 00       	.word	0x0002	; ????
      e8:	00 ca       	rjmp	.-3072   	; 0xfffff4ea <__eeprom_end+0xff7ef4ea>
      ea:	9a 3b       	cpi	r25, 0xBA	; 186
      ec:	00 00       	nop
      ee:	00 e1       	ldi	r16, 0x10	; 16
      f0:	f5 05       	cpc	r31, r5
      f2:	00 00       	nop
      f4:	80 96       	adiw	r24, 0x20	; 32
      f6:	98 00       	.word	0x0098	; ????
      f8:	00 00       	nop
      fa:	40 42       	sbci	r20, 0x20	; 32
      fc:	0f 00       	.word	0x000f	; ????
      fe:	00 00       	nop
     100:	a0 86       	std	Z+8, r10	; 0x08
     102:	01 00       	.word	0x0001	; ????
     104:	00 00       	nop
     106:	10 27       	eor	r17, r16
     108:	00 00       	nop
     10a:	00 00       	nop
     10c:	e8 03       	fmulsu	r22, r16
     10e:	00 00       	nop
     110:	00 00       	nop
     112:	64 00       	.word	0x0064	; ????
     114:	00 00       	nop
     116:	00 00       	nop
     118:	0a 00       	.word	0x000a	; ????
     11a:	00 00       	nop
     11c:	00 00       	nop
     11e:	01 00       	.word	0x0001	; ????
     120:	00 00       	nop
     122:	00 00       	nop
     124:	2c 76       	andi	r18, 0x6C	; 108
     126:	d8 88       	ldd	r13, Y+16	; 0x10
     128:	dc 67       	ori	r29, 0x7C	; 124
     12a:	4f 08       	sbc	r4, r15
     12c:	23 df       	rcall	.-442    	; 0xffffff74 <__eeprom_end+0xff7eff74>
     12e:	c1 df       	rcall	.-126    	; 0xb2 <__SREG__+0x73>
     130:	ae 59       	subi	r26, 0x9E	; 158
     132:	e1 b1       	in	r30, 0x01	; 1
     134:	b7 96       	adiw	r30, 0x27	; 39
     136:	e5 e3       	ldi	r30, 0x35	; 53
     138:	e4 53       	subi	r30, 0x34	; 52
     13a:	c6 3a       	cpi	r28, 0xA6	; 166
     13c:	e6 51       	subi	r30, 0x16	; 22
     13e:	99 76       	andi	r25, 0x69	; 105
     140:	96 e8       	ldi	r25, 0x86	; 134
     142:	e6 c2       	rjmp	.+1484   	; 0x710 <_Z10displayLCDP6Stringii+0x3a>
     144:	84 26       	eor	r8, r20
     146:	eb 89       	ldd	r30, Y+19	; 0x13
     148:	8c 9b       	sbis	0x11, 4	; 17
     14a:	62 ed       	ldi	r22, 0xD2	; 210
     14c:	40 7c       	andi	r20, 0xC0	; 192
     14e:	6f fc       	.word	0xfc6f	; ????
     150:	ef bc       	out	0x2f, r14	; 47
     152:	9c 9f       	mul	r25, r28
     154:	40 f2       	brcs	.-112    	; 0xe6 <__trampolines_end+0x1c>
     156:	ba a5       	ldd	r27, Y+42	; 0x2a
     158:	6f a5       	ldd	r22, Y+47	; 0x2f
     15a:	f4 90       	lpm	r15, Z
     15c:	05 5a       	subi	r16, 0xA5	; 165
     15e:	2a f7       	brpl	.-54     	; 0x12a <__trampolines_end+0x60>
     160:	5c 93       	st	X, r21
     162:	6b 6c       	ori	r22, 0xCB	; 203
     164:	f9 67       	ori	r31, 0x79	; 121
     166:	6d c1       	rjmp	.+730    	; 0x442 <_Z8printTabh+0xe>
     168:	1b fc       	.word	0xfc1b	; ????
     16a:	e0 e4       	ldi	r30, 0x40	; 64
     16c:	0d 47       	sbci	r16, 0x7D	; 125
     16e:	fe f5       	brtc	.+126    	; 0x1ee <_ZZ5setupE3__c+0xc>
     170:	20 e6       	ldi	r18, 0x60	; 96
     172:	b5 00       	.word	0x00b5	; ????
     174:	d0 ed       	ldi	r29, 0xD0	; 208
     176:	90 2e       	mov	r9, r16
     178:	03 00       	.word	0x0003	; ????
     17a:	94 35       	cpi	r25, 0x54	; 84
     17c:	77 05       	cpc	r23, r7
     17e:	00 80       	ld	r0, Z
     180:	84 1e       	adc	r8, r20
     182:	08 00       	.word	0x0008	; ????
     184:	00 20       	and	r0, r0
     186:	4e 0a       	sbc	r4, r30
     188:	00 00       	nop
     18a:	00 c8       	rjmp	.-4096   	; 0xfffff18c <__eeprom_end+0xff7ef18c>
     18c:	0c 33       	cpi	r16, 0x3C	; 60
     18e:	33 33       	cpi	r19, 0x33	; 51
     190:	33 0f       	add	r19, r19
     192:	98 6e       	ori	r25, 0xE8	; 232
     194:	12 83       	std	Z+2, r17	; 0x02
     196:	11 41       	sbci	r17, 0x11	; 17
     198:	ef 8d       	ldd	r30, Y+31	; 0x1f
     19a:	21 14       	cp	r2, r1
     19c:	89 3b       	cpi	r24, 0xB9	; 185
     19e:	e6 55       	subi	r30, 0x56	; 86
     1a0:	16 cf       	rjmp	.-468    	; 0xffffffce <__eeprom_end+0xff7effce>
     1a2:	fe e6       	ldi	r31, 0x6E	; 110
     1a4:	db 18       	sub	r13, r11
     1a6:	d1 84       	ldd	r13, Z+9	; 0x09
     1a8:	4b 38       	cpi	r20, 0x8B	; 139
     1aa:	1b f7       	brvc	.-58     	; 0x172 <__trampolines_end+0xa8>
     1ac:	7c 1d       	adc	r23, r12
     1ae:	90 1d       	adc	r25, r0
     1b0:	a4 bb       	out	0x14, r26	; 20
     1b2:	e4 24       	eor	r14, r4
     1b4:	20 32       	cpi	r18, 0x20	; 32
     1b6:	84 72       	andi	r24, 0x24	; 36
     1b8:	5e 22       	and	r5, r30
     1ba:	81 00       	.word	0x0081	; ????
     1bc:	c9 f1       	breq	.+114    	; 0x230 <_ZL11daysInMonth+0xa>
     1be:	24 ec       	ldi	r18, 0xC4	; 196
     1c0:	a1 e5       	ldi	r26, 0x51	; 81
     1c2:	3d 27       	eor	r19, r29

000001c4 <_ZZ5setupE3__c_0>:
     1c4:	52 54 43 20 63 68 69 70 20 44 53 33 32 33 31 4d     RTC chip DS3231M
     1d4:	20 69 6e 69 74 69 61 6c 69 7a 65 64 2e 00            initialized..

000001e2 <_ZZ5setupE3__c>:
     1e2:	55 6e 61 62 6c 65 20 74 6f 20 66 69 6e 64 20 44     Unable to find D
     1f2:	53 33 32 33 31 4d 4d 2e 20 43 68 65 63 6b 69 6e     S3231MM. Checkin
     202:	67 20 61 67 61 69 6e 20 69 6e 20 33 73 2e 00        g again in 3s..

00000211 <_ZZN13DS3231M_Class6adjustEvE3__c>:
     211:	4d 61 79 20 32 33 20 32 30 32 31 00                 May 23 2021.

0000021d <_ZZN13DS3231M_Class6adjustEvE3__c_0>:
     21d:	31 36 3a 34 34 3a 32 38 00                          16:44:28.

00000226 <_ZL11daysInMonth>:
     226:	1f 1c 1f 1e 1f 1e 1f 1f 1e 1f 1e 1f                 ............

00000232 <digital_pin_to_timer_PGM>:
     232:	00 00 00 00 04 03 08 07 00 00 02 00 09 0a 00 00     ................
	...
     24e:	00 00 00 01                                         ....

00000252 <digital_pin_to_bit_mask_PGM>:
     252:	01 02 04 08 10 20 40 80 01 02 10 20 40 80 10 20     ..... @.... @.. 
     262:	40 80 10 08 20 04 40 80 01 02 04 08 01 02 04 08     @... .@.........

00000272 <digital_pin_to_port_PGM>:
     272:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 01 01     ................
     282:	01 01 03 03 03 03 03 03 01 01 01 01 03 03 02 02     ................

00000292 <port_to_input_PGM>:
     292:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

0000029c <port_to_output_PGM>:
     29c:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000002a6 <port_to_mode_PGM>:
     2a6:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000002b0 <__ctors_start>:
     2b0:	13 14       	cp	r1, r3
     2b2:	9a 1f       	adc	r25, r26
     2b4:	f2 1f       	adc	r31, r18
     2b6:	ea 22       	and	r14, r26
     2b8:	d1 24       	eor	r13, r1
     2ba:	dc 24       	eor	r13, r12
     2bc:	ae 26       	eor	r10, r30
     2be:	7e 2a       	or	r7, r30
     2c0:	0d 31       	cpi	r16, 0x1D	; 29
     2c2:	cc 33       	cpi	r28, 0x3C	; 60

000002c4 <__ctors_end>:
     2c4:	47 15       	cp	r20, r7

000002c6 <__dtors_end>:
     2c6:	11 24       	eor	r1, r1
     2c8:	1f be       	out	0x3f, r1	; 63
     2ca:	cf ef       	ldi	r28, 0xFF	; 255
     2cc:	d0 e4       	ldi	r29, 0x40	; 64
     2ce:	de bf       	out	0x3e, r29	; 62
     2d0:	cd bf       	out	0x3d, r28	; 61

000002d2 <__do_copy_data>:
     2d2:	19 e0       	ldi	r17, 0x09	; 9
     2d4:	a0 e0       	ldi	r26, 0x00	; 0
     2d6:	b1 e0       	ldi	r27, 0x01	; 1
     2d8:	e2 e8       	ldi	r30, 0x82	; 130
     2da:	f0 e8       	ldi	r31, 0x80	; 128
     2dc:	00 e0       	ldi	r16, 0x00	; 0
     2de:	0b bf       	out	0x3b, r16	; 59
     2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <__do_copy_data+0x14>
     2e2:	07 90       	elpm	r0, Z+
     2e4:	0d 92       	st	X+, r0
     2e6:	a6 3f       	cpi	r26, 0xF6	; 246
     2e8:	b1 07       	cpc	r27, r17
     2ea:	d9 f7       	brne	.-10     	; 0x2e2 <__do_copy_data+0x10>

000002ec <__do_clear_bss>:
     2ec:	2d e0       	ldi	r18, 0x0D	; 13
     2ee:	a6 ef       	ldi	r26, 0xF6	; 246
     2f0:	b9 e0       	ldi	r27, 0x09	; 9
     2f2:	01 c0       	rjmp	.+2      	; 0x2f6 <.do_clear_bss_start>

000002f4 <.do_clear_bss_loop>:
     2f4:	1d 92       	st	X+, r1

000002f6 <.do_clear_bss_start>:
     2f6:	af 34       	cpi	r26, 0x4F	; 79
     2f8:	b2 07       	cpc	r27, r18
     2fa:	e1 f7       	brne	.-8      	; 0x2f4 <.do_clear_bss_loop>

000002fc <__do_global_ctors>:
     2fc:	11 e0       	ldi	r17, 0x01	; 1
     2fe:	c2 e6       	ldi	r28, 0x62	; 98
     300:	d1 e0       	ldi	r29, 0x01	; 1
     302:	04 c0       	rjmp	.+8      	; 0x30c <__do_global_ctors+0x10>
     304:	21 97       	sbiw	r28, 0x01	; 1
     306:	fe 01       	movw	r30, r28
     308:	0e 94 cf 3a 	call	0x759e	; 0x759e <__tablejump2__>
     30c:	c8 35       	cpi	r28, 0x58	; 88
     30e:	d1 07       	cpc	r29, r17
     310:	c9 f7       	brne	.-14     	; 0x304 <__do_global_ctors+0x8>
     312:	0e 94 58 34 	call	0x68b0	; 0x68b0 <main>
     316:	0c 94 35 40 	jmp	0x806a	; 0x806a <__do_global_dtors>

0000031a <__bad_interrupt>:
     31a:	72 ce       	rjmp	.-796    	; 0x0 <__vectors>

0000031c <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     31c:	80 e0       	ldi	r24, 0x00	; 0
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	08 95       	ret

00000322 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     322:	08 95       	ret

00000324 <_ZL11disable_ETHv>:
    i++;
  }
  Serial.println(" ");

  return true;
}
     324:	44 9a       	sbi	0x08, 4	; 8
     326:	08 95       	ret

00000328 <_Z19InizializzaEthernetv>:
     328:	ef 92       	push	r14
     32a:	ff 92       	push	r15
     32c:	0f 93       	push	r16
     32e:	1f 93       	push	r17
     330:	cf 93       	push	r28
     332:	df 93       	push	r29
     334:	cd b7       	in	r28, 0x3d	; 61
     336:	de b7       	in	r29, 0x3e	; 62
     338:	68 97       	sbiw	r28, 0x18	; 24
     33a:	0f b6       	in	r0, 0x3f	; 63
     33c:	f8 94       	cli
     33e:	de bf       	out	0x3e, r29	; 62
     340:	0f be       	out	0x3f, r0	; 63
     342:	cd bf       	out	0x3d, r28	; 61
     344:	87 ee       	ldi	r24, 0xE7	; 231
     346:	99 e0       	ldi	r25, 0x09	; 9
     348:	9a 83       	std	Y+2, r25	; 0x02
     34a:	89 83       	std	Y+1, r24	; 0x01
     34c:	40 91 3f 0a 	lds	r20, 0x0A3F	; 0x800a3f <subnet+0x2>
     350:	50 91 40 0a 	lds	r21, 0x0A40	; 0x800a40 <subnet+0x3>
     354:	60 91 41 0a 	lds	r22, 0x0A41	; 0x800a41 <subnet+0x4>
     358:	70 91 42 0a 	lds	r23, 0x0A42	; 0x800a42 <subnet+0x5>
     35c:	4b 83       	std	Y+3, r20	; 0x03
     35e:	5c 83       	std	Y+4, r21	; 0x04
     360:	6d 83       	std	Y+5, r22	; 0x05
     362:	7e 83       	std	Y+6, r23	; 0x06
     364:	98 87       	std	Y+8, r25	; 0x08
     366:	8f 83       	std	Y+7, r24	; 0x07
     368:	40 91 45 0a 	lds	r20, 0x0A45	; 0x800a45 <gateway+0x2>
     36c:	50 91 46 0a 	lds	r21, 0x0A46	; 0x800a46 <gateway+0x3>
     370:	60 91 47 0a 	lds	r22, 0x0A47	; 0x800a47 <gateway+0x4>
     374:	70 91 48 0a 	lds	r23, 0x0A48	; 0x800a48 <gateway+0x5>
     378:	49 87       	std	Y+9, r20	; 0x09
     37a:	5a 87       	std	Y+10, r21	; 0x0a
     37c:	6b 87       	std	Y+11, r22	; 0x0b
     37e:	7c 87       	std	Y+12, r23	; 0x0c
     380:	9e 87       	std	Y+14, r25	; 0x0e
     382:	8d 87       	std	Y+13, r24	; 0x0d
     384:	40 91 4b 0a 	lds	r20, 0x0A4B	; 0x800a4b <myDns+0x2>
     388:	50 91 4c 0a 	lds	r21, 0x0A4C	; 0x800a4c <myDns+0x3>
     38c:	60 91 4d 0a 	lds	r22, 0x0A4D	; 0x800a4d <myDns+0x4>
     390:	70 91 4e 0a 	lds	r23, 0x0A4E	; 0x800a4e <myDns+0x5>
     394:	4f 87       	std	Y+15, r20	; 0x0f
     396:	58 8b       	std	Y+16, r21	; 0x10
     398:	69 8b       	std	Y+17, r22	; 0x11
     39a:	7a 8b       	std	Y+18, r23	; 0x12
     39c:	9c 8b       	std	Y+20, r25	; 0x14
     39e:	8b 8b       	std	Y+19, r24	; 0x13
     3a0:	80 91 51 0a 	lds	r24, 0x0A51	; 0x800a51 <ipCCEC+0x2>
     3a4:	90 91 52 0a 	lds	r25, 0x0A52	; 0x800a52 <ipCCEC+0x3>
     3a8:	a0 91 53 0a 	lds	r26, 0x0A53	; 0x800a53 <ipCCEC+0x4>
     3ac:	b0 91 54 0a 	lds	r27, 0x0A54	; 0x800a54 <ipCCEC+0x5>
     3b0:	8d 8b       	std	Y+21, r24	; 0x15
     3b2:	9e 8b       	std	Y+22, r25	; 0x16
     3b4:	af 8b       	std	Y+23, r26	; 0x17
     3b6:	b8 8f       	std	Y+24, r27	; 0x18
     3b8:	ce 01       	movw	r24, r28
     3ba:	01 96       	adiw	r24, 0x01	; 1
     3bc:	7c 01       	movw	r14, r24
     3be:	8e 01       	movw	r16, r28
     3c0:	09 5f       	subi	r16, 0xF9	; 249
     3c2:	1f 4f       	sbci	r17, 0xFF	; 255
     3c4:	9e 01       	movw	r18, r28
     3c6:	23 5f       	subi	r18, 0xF3	; 243
     3c8:	3f 4f       	sbci	r19, 0xFF	; 255
     3ca:	ae 01       	movw	r20, r28
     3cc:	4d 5e       	subi	r20, 0xED	; 237
     3ce:	5f 4f       	sbci	r21, 0xFF	; 255
     3d0:	66 e2       	ldi	r22, 0x26	; 38
     3d2:	71 e0       	ldi	r23, 0x01	; 1
     3d4:	82 ea       	ldi	r24, 0xA2	; 162
     3d6:	9b e0       	ldi	r25, 0x0B	; 11
     3d8:	0e 94 a4 22 	call	0x4548	; 0x4548 <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_>
     3dc:	68 96       	adiw	r28, 0x18	; 24
     3de:	0f b6       	in	r0, 0x3f	; 63
     3e0:	f8 94       	cli
     3e2:	de bf       	out	0x3e, r29	; 62
     3e4:	0f be       	out	0x3f, r0	; 63
     3e6:	cd bf       	out	0x3d, r28	; 61
     3e8:	df 91       	pop	r29
     3ea:	cf 91       	pop	r28
     3ec:	1f 91       	pop	r17
     3ee:	0f 91       	pop	r16
     3f0:	ff 90       	pop	r15
     3f2:	ef 90       	pop	r14
     3f4:	08 95       	ret

000003f6 <_Z11my_delay_msi>:
     3f6:	18 16       	cp	r1, r24
     3f8:	19 06       	cpc	r1, r25
     3fa:	44 f4       	brge	.+16     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     3fc:	ef e9       	ldi	r30, 0x9F	; 159
     3fe:	ff e0       	ldi	r31, 0x0F	; 15
     400:	31 97       	sbiw	r30, 0x01	; 1
     402:	f1 f7       	brne	.-4      	; 0x400 <__LOCK_REGION_LENGTH__>
     404:	00 c0       	rjmp	.+0      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     406:	00 00       	nop
     408:	01 97       	sbiw	r24, 0x01	; 1
     40a:	f5 cf       	rjmp	.-22     	; 0x3f6 <_Z11my_delay_msi>
     40c:	08 95       	ret

0000040e <_Z9printLinev>:
     40e:	cf 93       	push	r28
     410:	85 ea       	ldi	r24, 0xA5	; 165
     412:	9c e0       	ldi	r25, 0x0C	; 12
     414:	0e 94 dd 34 	call	0x69ba	; 0x69ba <_ZN5Print7printlnEv>
     418:	cd e7       	ldi	r28, 0x7D	; 125
     41a:	67 e3       	ldi	r22, 0x37	; 55
     41c:	72 e0       	ldi	r23, 0x02	; 2
     41e:	85 ea       	ldi	r24, 0xA5	; 165
     420:	9c e0       	ldi	r25, 0x0C	; 12
     422:	0e 94 d5 34 	call	0x69aa	; 0x69aa <_ZN5Print5printEPKc>
     426:	c1 50       	subi	r28, 0x01	; 1
     428:	c1 f7       	brne	.-16     	; 0x41a <_Z9printLinev+0xc>
     42a:	85 ea       	ldi	r24, 0xA5	; 165
     42c:	9c e0       	ldi	r25, 0x0C	; 12
     42e:	cf 91       	pop	r28
     430:	0c 94 dd 34 	jmp	0x69ba	; 0x69ba <_ZN5Print7printlnEv>

00000434 <_Z8printTabh>:
     434:	cf 93       	push	r28
     436:	df 93       	push	r29
     438:	d8 2f       	mov	r29, r24
     43a:	c0 e0       	ldi	r28, 0x00	; 0
     43c:	cd 17       	cp	r28, r29
     43e:	41 f0       	breq	.+16     	; 0x450 <_Z8printTabh+0x1c>
     440:	69 e3       	ldi	r22, 0x39	; 57
     442:	72 e0       	ldi	r23, 0x02	; 2
     444:	85 ea       	ldi	r24, 0xA5	; 165
     446:	9c e0       	ldi	r25, 0x0C	; 12
     448:	0e 94 d5 34 	call	0x69aa	; 0x69aa <_ZN5Print5printEPKc>
     44c:	cf 5f       	subi	r28, 0xFF	; 255
     44e:	f6 cf       	rjmp	.-20     	; 0x43c <_Z8printTabh+0x8>
     450:	df 91       	pop	r29
     452:	cf 91       	pop	r28
     454:	08 95       	ret

00000456 <_Z4passb>:
     456:	cf 93       	push	r28
     458:	c8 2f       	mov	r28, r24
     45a:	81 e0       	ldi	r24, 0x01	; 1
     45c:	eb df       	rcall	.-42     	; 0x434 <_Z8printTabh>
     45e:	6b e3       	ldi	r22, 0x3B	; 59
     460:	72 e0       	ldi	r23, 0x02	; 2
     462:	85 ea       	ldi	r24, 0xA5	; 165
     464:	9c e0       	ldi	r25, 0x0C	; 12
     466:	0e 94 d5 34 	call	0x69aa	; 0x69aa <_ZN5Print5printEPKc>
     46a:	cc 23       	and	r28, r28
     46c:	19 f0       	breq	.+6      	; 0x474 <_Z4passb+0x1e>
     46e:	6f e3       	ldi	r22, 0x3F	; 63
     470:	72 e0       	ldi	r23, 0x02	; 2
     472:	02 c0       	rjmp	.+4      	; 0x478 <_Z4passb+0x22>
     474:	64 e4       	ldi	r22, 0x44	; 68
     476:	72 e0       	ldi	r23, 0x02	; 2
     478:	85 ea       	ldi	r24, 0xA5	; 165
     47a:	9c e0       	ldi	r25, 0x0C	; 12
     47c:	0e 94 d5 34 	call	0x69aa	; 0x69aa <_ZN5Print5printEPKc>
     480:	81 e0       	ldi	r24, 0x01	; 1
     482:	cf 91       	pop	r28
     484:	d7 cf       	rjmp	.-82     	; 0x434 <_Z8printTabh>

00000486 <_ZN20ParametriCCEC_structC1ERKS_>:
     486:	0f 93       	push	r16
     488:	1f 93       	push	r17
     48a:	cf 93       	push	r28
     48c:	df 93       	push	r29
     48e:	ec 01       	movw	r28, r24
     490:	8b 01       	movw	r16, r22
     492:	0e 94 07 38 	call	0x700e	; 0x700e <_ZN6StringC1ERKS_>
     496:	b8 01       	movw	r22, r16
     498:	6a 5f       	subi	r22, 0xFA	; 250
     49a:	7f 4f       	sbci	r23, 0xFF	; 255
     49c:	ce 01       	movw	r24, r28
     49e:	06 96       	adiw	r24, 0x06	; 6
     4a0:	0e 94 07 38 	call	0x700e	; 0x700e <_ZN6StringC1ERKS_>
     4a4:	f8 01       	movw	r30, r16
     4a6:	84 85       	ldd	r24, Z+12	; 0x0c
     4a8:	95 85       	ldd	r25, Z+13	; 0x0d
     4aa:	9d 87       	std	Y+13, r25	; 0x0d
     4ac:	8c 87       	std	Y+12, r24	; 0x0c
     4ae:	df 91       	pop	r29
     4b0:	cf 91       	pop	r28
     4b2:	1f 91       	pop	r17
     4b4:	0f 91       	pop	r16
     4b6:	08 95       	ret

000004b8 <_ZN20ParametriCCEC_structD1Ev>:
     4b8:	cf 93       	push	r28
     4ba:	df 93       	push	r29
     4bc:	ec 01       	movw	r28, r24
     4be:	06 96       	adiw	r24, 0x06	; 6
     4c0:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
     4c4:	ce 01       	movw	r24, r28
     4c6:	df 91       	pop	r29
     4c8:	cf 91       	pop	r28
     4ca:	0c 94 34 37 	jmp	0x6e68	; 0x6e68 <_ZN6StringD1Ev>

000004ce <_Z6Buzzerhm>:
     4ce:	cf 92       	push	r12
     4d0:	df 92       	push	r13
     4d2:	ef 92       	push	r14
     4d4:	ff 92       	push	r15
     4d6:	0f 93       	push	r16
     4d8:	1f 93       	push	r17
     4da:	cf 93       	push	r28
     4dc:	df 93       	push	r29
     4de:	6a 01       	movw	r12, r20
     4e0:	7b 01       	movw	r14, r22
     4e2:	c0 e0       	ldi	r28, 0x00	; 0
     4e4:	d0 e0       	ldi	r29, 0x00	; 0
     4e6:	08 2f       	mov	r16, r24
     4e8:	10 e0       	ldi	r17, 0x00	; 0
     4ea:	c0 17       	cp	r28, r16
     4ec:	d1 07       	cpc	r29, r17
     4ee:	24 f4       	brge	.+8      	; 0x4f8 <_Z6Buzzerhm+0x2a>
     4f0:	c6 01       	movw	r24, r12
     4f2:	81 df       	rcall	.-254    	; 0x3f6 <_Z11my_delay_msi>
     4f4:	21 96       	adiw	r28, 0x01	; 1
     4f6:	f9 cf       	rjmp	.-14     	; 0x4ea <_Z6Buzzerhm+0x1c>
     4f8:	df 91       	pop	r29
     4fa:	cf 91       	pop	r28
     4fc:	1f 91       	pop	r17
     4fe:	0f 91       	pop	r16
     500:	ff 90       	pop	r15
     502:	ef 90       	pop	r14
     504:	df 90       	pop	r13
     506:	cf 90       	pop	r12
     508:	08 95       	ret

0000050a <_Z13getCharKeypadi>:
     50a:	82 32       	cpi	r24, 0x22	; 34
     50c:	91 05       	cpc	r25, r1
     50e:	09 f4       	brne	.+2      	; 0x512 <_Z13getCharKeypadi+0x8>
     510:	9a c0       	rjmp	.+308    	; 0x646 <_Z13getCharKeypadi+0x13c>
     512:	6c f5       	brge	.+90     	; 0x56e <_Z13getCharKeypadi+0x64>
     514:	8a 30       	cpi	r24, 0x0A	; 10
     516:	91 05       	cpc	r25, r1
     518:	09 f4       	brne	.+2      	; 0x51c <_Z13getCharKeypadi+0x12>
     51a:	83 c0       	rjmp	.+262    	; 0x622 <_Z13getCharKeypadi+0x118>
     51c:	a4 f4       	brge	.+40     	; 0x546 <_Z13getCharKeypadi+0x3c>
     51e:	86 30       	cpi	r24, 0x06	; 6
     520:	91 05       	cpc	r25, r1
     522:	09 f4       	brne	.+2      	; 0x526 <_Z13getCharKeypadi+0x1c>
     524:	75 c0       	rjmp	.+234    	; 0x610 <_Z13getCharKeypadi+0x106>
     526:	89 30       	cpi	r24, 0x09	; 9
     528:	91 05       	cpc	r25, r1
     52a:	09 f4       	brne	.+2      	; 0x52e <_Z13getCharKeypadi+0x24>
     52c:	5d c0       	rjmp	.+186    	; 0x5e8 <_Z13getCharKeypadi+0xde>
     52e:	05 97       	sbiw	r24, 0x05	; 5
     530:	09 f0       	breq	.+2      	; 0x534 <_Z13getCharKeypadi+0x2a>
     532:	cf c0       	rjmp	.+414    	; 0x6d2 <_Z13getCharKeypadi+0x1c8>
     534:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <MappaKeys>
     538:	85 ea       	ldi	r24, 0xA5	; 165
     53a:	9c e0       	ldi	r25, 0x0C	; 12
     53c:	0e 94 d6 34 	call	0x69ac	; 0x69ac <_ZN5Print5printEc>
     540:	20 e0       	ldi	r18, 0x00	; 0
     542:	30 e0       	ldi	r19, 0x00	; 0
     544:	59 c0       	rjmp	.+178    	; 0x5f8 <_Z13getCharKeypadi+0xee>
     546:	82 31       	cpi	r24, 0x12	; 18
     548:	91 05       	cpc	r25, r1
     54a:	09 f4       	brne	.+2      	; 0x54e <_Z13getCharKeypadi+0x44>
     54c:	73 c0       	rjmp	.+230    	; 0x634 <_Z13getCharKeypadi+0x12a>
     54e:	81 32       	cpi	r24, 0x21	; 33
     550:	91 05       	cpc	r25, r1
     552:	09 f4       	brne	.+2      	; 0x556 <_Z13getCharKeypadi+0x4c>
     554:	54 c0       	rjmp	.+168    	; 0x5fe <_Z13getCharKeypadi+0xf4>
     556:	41 97       	sbiw	r24, 0x11	; 17
     558:	09 f0       	breq	.+2      	; 0x55c <_Z13getCharKeypadi+0x52>
     55a:	bb c0       	rjmp	.+374    	; 0x6d2 <_Z13getCharKeypadi+0x1c8>
     55c:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <MappaKeys+0x2>
     560:	85 ea       	ldi	r24, 0xA5	; 165
     562:	9c e0       	ldi	r25, 0x0C	; 12
     564:	0e 94 d6 34 	call	0x69ac	; 0x69ac <_ZN5Print5printEc>
     568:	22 e0       	ldi	r18, 0x02	; 2
     56a:	30 e0       	ldi	r19, 0x00	; 0
     56c:	45 c0       	rjmp	.+138    	; 0x5f8 <_Z13getCharKeypadi+0xee>
     56e:	80 36       	cpi	r24, 0x60	; 96
     570:	91 05       	cpc	r25, r1
     572:	09 f4       	brne	.+2      	; 0x576 <_Z13getCharKeypadi+0x6c>
     574:	99 c0       	rjmp	.+306    	; 0x6a8 <_Z13getCharKeypadi+0x19e>
     576:	ac f4       	brge	.+42     	; 0x5a2 <_Z13getCharKeypadi+0x98>
     578:	88 34       	cpi	r24, 0x48	; 72
     57a:	91 05       	cpc	r25, r1
     57c:	09 f4       	brne	.+2      	; 0x580 <_Z13getCharKeypadi+0x76>
     57e:	82 c0       	rjmp	.+260    	; 0x684 <_Z13getCharKeypadi+0x17a>
     580:	80 35       	cpi	r24, 0x50	; 80
     582:	91 05       	cpc	r25, r1
     584:	09 f4       	brne	.+2      	; 0x588 <_Z13getCharKeypadi+0x7e>
     586:	87 c0       	rjmp	.+270    	; 0x696 <_Z13getCharKeypadi+0x18c>
     588:	84 34       	cpi	r24, 0x44	; 68
     58a:	91 05       	cpc	r25, r1
     58c:	09 f0       	breq	.+2      	; 0x590 <_Z13getCharKeypadi+0x86>
     58e:	a1 c0       	rjmp	.+322    	; 0x6d2 <_Z13getCharKeypadi+0x1c8>
     590:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <MappaKeys+0xc>
     594:	85 ea       	ldi	r24, 0xA5	; 165
     596:	9c e0       	ldi	r25, 0x0C	; 12
     598:	0e 94 d6 34 	call	0x69ac	; 0x69ac <_ZN5Print5printEc>
     59c:	20 e0       	ldi	r18, 0x00	; 0
     59e:	30 e0       	ldi	r19, 0x00	; 0
     5a0:	8b c0       	rjmp	.+278    	; 0x6b8 <_Z13getCharKeypadi+0x1ae>
     5a2:	88 38       	cpi	r24, 0x88	; 136
     5a4:	91 05       	cpc	r25, r1
     5a6:	09 f4       	brne	.+2      	; 0x5aa <_Z13getCharKeypadi+0xa0>
     5a8:	59 c0       	rjmp	.+178    	; 0x65c <_Z13getCharKeypadi+0x152>
     5aa:	6c f4       	brge	.+26     	; 0x5c6 <_Z13getCharKeypadi+0xbc>
     5ac:	84 38       	cpi	r24, 0x84	; 132
     5ae:	91 05       	cpc	r25, r1
     5b0:	09 f0       	breq	.+2      	; 0x5b4 <_Z13getCharKeypadi+0xaa>
     5b2:	8f c0       	rjmp	.+286    	; 0x6d2 <_Z13getCharKeypadi+0x1c8>
     5b4:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <MappaKeys+0x8>
     5b8:	85 ea       	ldi	r24, 0xA5	; 165
     5ba:	9c e0       	ldi	r25, 0x0C	; 12
     5bc:	0e 94 d6 34 	call	0x69ac	; 0x69ac <_ZN5Print5printEc>
     5c0:	20 e0       	ldi	r18, 0x00	; 0
     5c2:	30 e0       	ldi	r19, 0x00	; 0
     5c4:	5c c0       	rjmp	.+184    	; 0x67e <_Z13getCharKeypadi+0x174>
     5c6:	80 39       	cpi	r24, 0x90	; 144
     5c8:	91 05       	cpc	r25, r1
     5ca:	09 f4       	brne	.+2      	; 0x5ce <_Z13getCharKeypadi+0xc4>
     5cc:	50 c0       	rjmp	.+160    	; 0x66e <_Z13getCharKeypadi+0x164>
     5ce:	80 3a       	cpi	r24, 0xA0	; 160
     5d0:	91 05       	cpc	r25, r1
     5d2:	09 f0       	breq	.+2      	; 0x5d6 <_Z13getCharKeypadi+0xcc>
     5d4:	7e c0       	rjmp	.+252    	; 0x6d2 <_Z13getCharKeypadi+0x1c8>
     5d6:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <MappaKeys+0xb>
     5da:	85 ea       	ldi	r24, 0xA5	; 165
     5dc:	9c e0       	ldi	r25, 0x0C	; 12
     5de:	0e 94 d6 34 	call	0x69ac	; 0x69ac <_ZN5Print5printEc>
     5e2:	23 e0       	ldi	r18, 0x03	; 3
     5e4:	30 e0       	ldi	r19, 0x00	; 0
     5e6:	4b c0       	rjmp	.+150    	; 0x67e <_Z13getCharKeypadi+0x174>
     5e8:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <MappaKeys+0x1>
     5ec:	85 ea       	ldi	r24, 0xA5	; 165
     5ee:	9c e0       	ldi	r25, 0x0C	; 12
     5f0:	0e 94 d6 34 	call	0x69ac	; 0x69ac <_ZN5Print5printEc>
     5f4:	21 e0       	ldi	r18, 0x01	; 1
     5f6:	30 e0       	ldi	r19, 0x00	; 0
     5f8:	80 e0       	ldi	r24, 0x00	; 0
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	5f c0       	rjmp	.+190    	; 0x6bc <_Z13getCharKeypadi+0x1b2>
     5fe:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <MappaKeys+0x3>
     602:	85 ea       	ldi	r24, 0xA5	; 165
     604:	9c e0       	ldi	r25, 0x0C	; 12
     606:	0e 94 d6 34 	call	0x69ac	; 0x69ac <_ZN5Print5printEc>
     60a:	23 e0       	ldi	r18, 0x03	; 3
     60c:	30 e0       	ldi	r19, 0x00	; 0
     60e:	f4 cf       	rjmp	.-24     	; 0x5f8 <_Z13getCharKeypadi+0xee>
     610:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <MappaKeys+0x4>
     614:	85 ea       	ldi	r24, 0xA5	; 165
     616:	9c e0       	ldi	r25, 0x0C	; 12
     618:	0e 94 d6 34 	call	0x69ac	; 0x69ac <_ZN5Print5printEc>
     61c:	20 e0       	ldi	r18, 0x00	; 0
     61e:	30 e0       	ldi	r19, 0x00	; 0
     620:	1a c0       	rjmp	.+52     	; 0x656 <_Z13getCharKeypadi+0x14c>
     622:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <MappaKeys+0x5>
     626:	85 ea       	ldi	r24, 0xA5	; 165
     628:	9c e0       	ldi	r25, 0x0C	; 12
     62a:	0e 94 d6 34 	call	0x69ac	; 0x69ac <_ZN5Print5printEc>
     62e:	21 e0       	ldi	r18, 0x01	; 1
     630:	30 e0       	ldi	r19, 0x00	; 0
     632:	11 c0       	rjmp	.+34     	; 0x656 <_Z13getCharKeypadi+0x14c>
     634:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <MappaKeys+0x6>
     638:	85 ea       	ldi	r24, 0xA5	; 165
     63a:	9c e0       	ldi	r25, 0x0C	; 12
     63c:	0e 94 d6 34 	call	0x69ac	; 0x69ac <_ZN5Print5printEc>
     640:	22 e0       	ldi	r18, 0x02	; 2
     642:	30 e0       	ldi	r19, 0x00	; 0
     644:	08 c0       	rjmp	.+16     	; 0x656 <_Z13getCharKeypadi+0x14c>
     646:	60 91 0d 01 	lds	r22, 0x010D	; 0x80010d <MappaKeys+0x7>
     64a:	85 ea       	ldi	r24, 0xA5	; 165
     64c:	9c e0       	ldi	r25, 0x0C	; 12
     64e:	0e 94 d6 34 	call	0x69ac	; 0x69ac <_ZN5Print5printEc>
     652:	23 e0       	ldi	r18, 0x03	; 3
     654:	30 e0       	ldi	r19, 0x00	; 0
     656:	81 e0       	ldi	r24, 0x01	; 1
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	30 c0       	rjmp	.+96     	; 0x6bc <_Z13getCharKeypadi+0x1b2>
     65c:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <MappaKeys+0x9>
     660:	85 ea       	ldi	r24, 0xA5	; 165
     662:	9c e0       	ldi	r25, 0x0C	; 12
     664:	0e 94 d6 34 	call	0x69ac	; 0x69ac <_ZN5Print5printEc>
     668:	21 e0       	ldi	r18, 0x01	; 1
     66a:	30 e0       	ldi	r19, 0x00	; 0
     66c:	08 c0       	rjmp	.+16     	; 0x67e <_Z13getCharKeypadi+0x174>
     66e:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <MappaKeys+0xa>
     672:	85 ea       	ldi	r24, 0xA5	; 165
     674:	9c e0       	ldi	r25, 0x0C	; 12
     676:	0e 94 d6 34 	call	0x69ac	; 0x69ac <_ZN5Print5printEc>
     67a:	22 e0       	ldi	r18, 0x02	; 2
     67c:	30 e0       	ldi	r19, 0x00	; 0
     67e:	82 e0       	ldi	r24, 0x02	; 2
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	1c c0       	rjmp	.+56     	; 0x6bc <_Z13getCharKeypadi+0x1b2>
     684:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <MappaKeys+0xd>
     688:	85 ea       	ldi	r24, 0xA5	; 165
     68a:	9c e0       	ldi	r25, 0x0C	; 12
     68c:	0e 94 d6 34 	call	0x69ac	; 0x69ac <_ZN5Print5printEc>
     690:	21 e0       	ldi	r18, 0x01	; 1
     692:	30 e0       	ldi	r19, 0x00	; 0
     694:	11 c0       	rjmp	.+34     	; 0x6b8 <_Z13getCharKeypadi+0x1ae>
     696:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <MappaKeys+0xe>
     69a:	85 ea       	ldi	r24, 0xA5	; 165
     69c:	9c e0       	ldi	r25, 0x0C	; 12
     69e:	0e 94 d6 34 	call	0x69ac	; 0x69ac <_ZN5Print5printEc>
     6a2:	22 e0       	ldi	r18, 0x02	; 2
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	08 c0       	rjmp	.+16     	; 0x6b8 <_Z13getCharKeypadi+0x1ae>
     6a8:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <MappaKeys+0xf>
     6ac:	85 ea       	ldi	r24, 0xA5	; 165
     6ae:	9c e0       	ldi	r25, 0x0C	; 12
     6b0:	0e 94 d6 34 	call	0x69ac	; 0x69ac <_ZN5Print5printEc>
     6b4:	23 e0       	ldi	r18, 0x03	; 3
     6b6:	30 e0       	ldi	r19, 0x00	; 0
     6b8:	83 e0       	ldi	r24, 0x03	; 3
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	88 0f       	add	r24, r24
     6be:	99 1f       	adc	r25, r25
     6c0:	88 0f       	add	r24, r24
     6c2:	99 1f       	adc	r25, r25
     6c4:	8a 5f       	subi	r24, 0xFA	; 250
     6c6:	9e 4f       	sbci	r25, 0xFE	; 254
     6c8:	fc 01       	movw	r30, r24
     6ca:	e2 0f       	add	r30, r18
     6cc:	f3 1f       	adc	r31, r19
     6ce:	80 81       	ld	r24, Z
     6d0:	08 95       	ret
     6d2:	8e e4       	ldi	r24, 0x4E	; 78
     6d4:	08 95       	ret

000006d6 <_Z10displayLCDP6Stringii>:
     6d6:	0f 93       	push	r16
     6d8:	1f 93       	push	r17
     6da:	cf 93       	push	r28
     6dc:	df 93       	push	r29
     6de:	ec 01       	movw	r28, r24
     6e0:	8a 01       	movw	r16, r20
     6e2:	82 ed       	ldi	r24, 0xD2	; 210
     6e4:	9a e0       	ldi	r25, 0x0A	; 10
     6e6:	0e 94 09 2b 	call	0x5612	; 0x5612 <_ZN3LCD5clearEv>
     6ea:	61 e0       	ldi	r22, 0x01	; 1
     6ec:	82 ed       	ldi	r24, 0xD2	; 210
     6ee:	9a e0       	ldi	r25, 0x0A	; 10
     6f0:	0e 94 d6 34 	call	0x69ac	; 0x69ac <_ZN5Print5printEc>
     6f4:	41 e0       	ldi	r20, 0x01	; 1
     6f6:	60 e0       	ldi	r22, 0x00	; 0
     6f8:	82 ed       	ldi	r24, 0xD2	; 210
     6fa:	9a e0       	ldi	r25, 0x0A	; 10
     6fc:	0e 94 0f 2b 	call	0x561e	; 0x561e <_ZN3LCD9setCursorEhh>
     700:	be 01       	movw	r22, r28
     702:	6a 5f       	subi	r22, 0xFA	; 250
     704:	7f 4f       	sbci	r23, 0xFF	; 255
     706:	82 ed       	ldi	r24, 0xD2	; 210
     708:	9a e0       	ldi	r25, 0x0A	; 10
     70a:	0e 94 c7 34 	call	0x698e	; 0x698e <_ZN5Print5printERK6String>
     70e:	42 e0       	ldi	r20, 0x02	; 2
     710:	60 e0       	ldi	r22, 0x00	; 0
     712:	82 ed       	ldi	r24, 0xD2	; 210
     714:	9a e0       	ldi	r25, 0x0A	; 10
     716:	0e 94 0f 2b 	call	0x561e	; 0x561e <_ZN3LCD9setCursorEhh>
     71a:	be 01       	movw	r22, r28
     71c:	64 5f       	subi	r22, 0xF4	; 244
     71e:	7f 4f       	sbci	r23, 0xFF	; 255
     720:	82 ed       	ldi	r24, 0xD2	; 210
     722:	9a e0       	ldi	r25, 0x0A	; 10
     724:	0e 94 c7 34 	call	0x698e	; 0x698e <_ZN5Print5printERK6String>
     728:	43 e0       	ldi	r20, 0x03	; 3
     72a:	60 e0       	ldi	r22, 0x00	; 0
     72c:	82 ed       	ldi	r24, 0xD2	; 210
     72e:	9a e0       	ldi	r25, 0x0A	; 10
     730:	0e 94 0f 2b 	call	0x561e	; 0x561e <_ZN3LCD9setCursorEhh>
     734:	be 01       	movw	r22, r28
     736:	6e 5e       	subi	r22, 0xEE	; 238
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	82 ed       	ldi	r24, 0xD2	; 210
     73c:	9a e0       	ldi	r25, 0x0A	; 10
     73e:	0e 94 c7 34 	call	0x698e	; 0x698e <_ZN5Print5printERK6String>
     742:	c8 01       	movw	r24, r16
     744:	df 91       	pop	r29
     746:	cf 91       	pop	r28
     748:	1f 91       	pop	r17
     74a:	0f 91       	pop	r16
     74c:	54 ce       	rjmp	.-856    	; 0x3f6 <_Z11my_delay_msi>

0000074e <_Z11avanzaStatom>:
     74e:	cf 92       	push	r12
     750:	df 92       	push	r13
     752:	ef 92       	push	r14
     754:	ff 92       	push	r15
     756:	6b 01       	movw	r12, r22
     758:	7c 01       	movw	r14, r24
     75a:	60 91 ab 0a 	lds	r22, 0x0AAB	; 0x800aab <stato_procedura>
     75e:	70 91 ac 0a 	lds	r23, 0x0AAC	; 0x800aac <stato_procedura+0x1>
     762:	4a e0       	ldi	r20, 0x0A	; 10
     764:	50 e0       	ldi	r21, 0x00	; 0
     766:	85 e5       	ldi	r24, 0x55	; 85
     768:	9a e0       	ldi	r25, 0x0A	; 10
     76a:	b5 df       	rcall	.-150    	; 0x6d6 <_Z10displayLCDP6Stringii>
     76c:	c0 92 0b 0a 	sts	0x0A0B, r12	; 0x800a0b <Timer>
     770:	d0 92 0c 0a 	sts	0x0A0C, r13	; 0x800a0c <Timer+0x1>
     774:	e0 92 0d 0a 	sts	0x0A0D, r14	; 0x800a0d <Timer+0x2>
     778:	f0 92 0e 0a 	sts	0x0A0E, r15	; 0x800a0e <Timer+0x3>
     77c:	85 e0       	ldi	r24, 0x05	; 5
     77e:	9a e0       	ldi	r25, 0x0A	; 10
     780:	0e 94 9c 1d 	call	0x3b38	; 0x3b38 <_ZNK8DateTime11secondstimeEv>
     784:	60 93 0f 0a 	sts	0x0A0F, r22	; 0x800a0f <UltimoPassaggioStato>
     788:	70 93 10 0a 	sts	0x0A10, r23	; 0x800a10 <UltimoPassaggioStato+0x1>
     78c:	80 93 11 0a 	sts	0x0A11, r24	; 0x800a11 <UltimoPassaggioStato+0x2>
     790:	90 93 12 0a 	sts	0x0A12, r25	; 0x800a12 <UltimoPassaggioStato+0x3>
     794:	80 91 ab 0a 	lds	r24, 0x0AAB	; 0x800aab <stato_procedura>
     798:	90 91 ac 0a 	lds	r25, 0x0AAC	; 0x800aac <stato_procedura+0x1>
     79c:	01 96       	adiw	r24, 0x01	; 1
     79e:	90 93 ac 0a 	sts	0x0AAC, r25	; 0x800aac <stato_procedura+0x1>
     7a2:	80 93 ab 0a 	sts	0x0AAB, r24	; 0x800aab <stato_procedura>
     7a6:	ff 90       	pop	r15
     7a8:	ef 90       	pop	r14
     7aa:	df 90       	pop	r13
     7ac:	cf 90       	pop	r12
     7ae:	08 95       	ret

000007b0 <_Z14leggiTAG_Mezzob>:
     7b0:	af 92       	push	r10
     7b2:	bf 92       	push	r11
     7b4:	cf 92       	push	r12
     7b6:	df 92       	push	r13
     7b8:	ef 92       	push	r14
     7ba:	ff 92       	push	r15
     7bc:	0f 93       	push	r16
     7be:	1f 93       	push	r17
     7c0:	cf 93       	push	r28
     7c2:	df 93       	push	r29
     7c4:	cd b7       	in	r28, 0x3d	; 61
     7c6:	de b7       	in	r29, 0x3e	; 62
     7c8:	a2 97       	sbiw	r28, 0x22	; 34
     7ca:	0f b6       	in	r0, 0x3f	; 63
     7cc:	f8 94       	cli
     7ce:	de bf       	out	0x3e, r29	; 62
     7d0:	0f be       	out	0x3f, r0	; 63
     7d2:	cd bf       	out	0x3d, r28	; 61
     7d4:	5c 01       	movw	r10, r24
     7d6:	f6 2e       	mov	r15, r22
     7d8:	6a e3       	ldi	r22, 0x3A	; 58
     7da:	72 e0       	ldi	r23, 0x02	; 2
     7dc:	ce 01       	movw	r24, r28
     7de:	4d 96       	adiw	r24, 0x1d	; 29
     7e0:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <_ZN6StringC1EPKc>
     7e4:	08 ec       	ldi	r16, 0xC8	; 200
     7e6:	10 e0       	ldi	r17, 0x00	; 0
     7e8:	22 ef       	ldi	r18, 0xF2	; 242
     7ea:	3a e0       	ldi	r19, 0x0A	; 10
     7ec:	4b ee       	ldi	r20, 0xEB	; 235
     7ee:	5a e0       	ldi	r21, 0x0A	; 10
     7f0:	60 e0       	ldi	r22, 0x00	; 0
     7f2:	8b eb       	ldi	r24, 0xBB	; 187
     7f4:	9a e0       	ldi	r25, 0x0A	; 10
     7f6:	0e 94 0f 1b 	call	0x361e	; 0x361e <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j>
     7fa:	80 93 f3 0a 	sts	0x0AF3, r24	; 0x800af3 <success>
     7fe:	88 23       	and	r24, r24
     800:	09 f4       	brne	.+2      	; 0x804 <_Z14leggiTAG_Mezzob+0x54>
     802:	9d c0       	rjmp	.+314    	; 0x93e <_Z14leggiTAG_Mezzob+0x18e>
     804:	4e e1       	ldi	r20, 0x1E	; 30
     806:	50 e0       	ldi	r21, 0x00	; 0
     808:	60 e0       	ldi	r22, 0x00	; 0
     80a:	70 e0       	ldi	r23, 0x00	; 0
     80c:	82 e0       	ldi	r24, 0x02	; 2
     80e:	5f de       	rcall	.-834    	; 0x4ce <_Z6Buzzerhm>
     810:	80 91 f2 0a 	lds	r24, 0x0AF2	; 0x800af2 <uidLength>
     814:	84 30       	cpi	r24, 0x04	; 4
     816:	09 f0       	breq	.+2      	; 0x81a <_Z14leggiTAG_Mezzob+0x6a>
     818:	8c c0       	rjmp	.+280    	; 0x932 <_Z14leggiTAG_Mezzob+0x182>
     81a:	86 e0       	ldi	r24, 0x06	; 6
     81c:	ef e5       	ldi	r30, 0x5F	; 95
     81e:	f1 e0       	ldi	r31, 0x01	; 1
     820:	de 01       	movw	r26, r28
     822:	57 96       	adiw	r26, 0x17	; 23
     824:	01 90       	ld	r0, Z+
     826:	0d 92       	st	X+, r0
     828:	8a 95       	dec	r24
     82a:	e1 f7       	brne	.-8      	; 0x824 <_Z14leggiTAG_Mezzob+0x74>
     82c:	ce 01       	movw	r24, r28
     82e:	47 96       	adiw	r24, 0x17	; 23
     830:	6c 01       	movw	r12, r24
     832:	e1 2c       	mov	r14, r1
     834:	04 e0       	ldi	r16, 0x04	; 4
     836:	10 e0       	ldi	r17, 0x00	; 0
     838:	20 e0       	ldi	r18, 0x00	; 0
     83a:	30 e0       	ldi	r19, 0x00	; 0
     83c:	44 e0       	ldi	r20, 0x04	; 4
     83e:	6b ee       	ldi	r22, 0xEB	; 235
     840:	7a e0       	ldi	r23, 0x0A	; 10
     842:	8b eb       	ldi	r24, 0xBB	; 187
     844:	9a e0       	ldi	r25, 0x0A	; 10
     846:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_>
     84a:	80 93 f3 0a 	sts	0x0AF3, r24	; 0x800af3 <success>
     84e:	88 23       	and	r24, r24
     850:	09 f4       	brne	.+2      	; 0x854 <_Z14leggiTAG_Mezzob+0xa4>
     852:	5f c0       	rjmp	.+190    	; 0x912 <_Z14leggiTAG_Mezzob+0x162>
     854:	ff 20       	and	r15, r15
     856:	99 f0       	breq	.+38     	; 0x87e <_Z14leggiTAG_Mezzob+0xce>
     858:	80 e1       	ldi	r24, 0x10	; 16
     85a:	e4 e3       	ldi	r30, 0x34	; 52
     85c:	f9 e0       	ldi	r31, 0x09	; 9
     85e:	de 01       	movw	r26, r28
     860:	11 96       	adiw	r26, 0x01	; 1
     862:	01 90       	ld	r0, Z+
     864:	0d 92       	st	X+, r0
     866:	8a 95       	dec	r24
     868:	e1 f7       	brne	.-8      	; 0x862 <_Z14leggiTAG_Mezzob+0xb2>
     86a:	ae 01       	movw	r20, r28
     86c:	4f 5f       	subi	r20, 0xFF	; 255
     86e:	5f 4f       	sbci	r21, 0xFF	; 255
     870:	64 e0       	ldi	r22, 0x04	; 4
     872:	8b eb       	ldi	r24, 0xBB	; 187
     874:	9a e0       	ldi	r25, 0x0A	; 10
     876:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh>
     87a:	80 93 f3 0a 	sts	0x0AF3, r24	; 0x800af3 <success>
     87e:	ae 01       	movw	r20, r28
     880:	4f 5f       	subi	r20, 0xFF	; 255
     882:	5f 4f       	sbci	r21, 0xFF	; 255
     884:	64 e0       	ldi	r22, 0x04	; 4
     886:	8b eb       	ldi	r24, 0xBB	; 187
     888:	9a e0       	ldi	r25, 0x0A	; 10
     88a:	0e 94 c3 1b 	call	0x3786	; 0x3786 <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh>
     88e:	80 93 f3 0a 	sts	0x0AF3, r24	; 0x800af3 <success>
     892:	88 23       	and	r24, r24
     894:	89 f1       	breq	.+98     	; 0x8f8 <_Z14leggiTAG_Mezzob+0x148>
     896:	69 e4       	ldi	r22, 0x49	; 73
     898:	72 e0       	ldi	r23, 0x02	; 2
     89a:	85 ea       	ldi	r24, 0xA5	; 165
     89c:	9c e0       	ldi	r25, 0x0C	; 12
     89e:	0e 94 00 35 	call	0x6a00	; 0x6a00 <_ZN5Print7printlnEPKc>
     8a2:	be 01       	movw	r22, r28
     8a4:	6f 5f       	subi	r22, 0xFF	; 255
     8a6:	7f 4f       	sbci	r23, 0xFF	; 255
     8a8:	ce 01       	movw	r24, r28
     8aa:	41 96       	adiw	r24, 0x11	; 17
     8ac:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <_ZN6StringC1EPKc>
     8b0:	be 01       	movw	r22, r28
     8b2:	6f 5e       	subi	r22, 0xEF	; 239
     8b4:	7f 4f       	sbci	r23, 0xFF	; 255
     8b6:	85 ea       	ldi	r24, 0xA5	; 165
     8b8:	9c e0       	ldi	r25, 0x0C	; 12
     8ba:	0e 94 f0 34 	call	0x69e0	; 0x69e0 <_ZN5Print7printlnERK6String>
     8be:	8d 89       	ldd	r24, Y+21	; 0x15
     8c0:	9e 89       	ldd	r25, Y+22	; 0x16
     8c2:	06 97       	sbiw	r24, 0x06	; 6
     8c4:	59 f4       	brne	.+22     	; 0x8dc <_Z14leggiTAG_Mezzob+0x12c>
     8c6:	be 01       	movw	r22, r28
     8c8:	6f 5e       	subi	r22, 0xEF	; 239
     8ca:	7f 4f       	sbci	r23, 0xFF	; 255
     8cc:	c5 01       	movw	r24, r10
     8ce:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <_ZN6StringC1EOS_>
     8d2:	ce 01       	movw	r24, r28
     8d4:	41 96       	adiw	r24, 0x11	; 17
     8d6:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
     8da:	37 c0       	rjmp	.+110    	; 0x94a <_Z14leggiTAG_Mezzob+0x19a>
     8dc:	9f ef       	ldi	r25, 0xFF	; 255
     8de:	21 ee       	ldi	r18, 0xE1	; 225
     8e0:	84 e0       	ldi	r24, 0x04	; 4
     8e2:	91 50       	subi	r25, 0x01	; 1
     8e4:	20 40       	sbci	r18, 0x00	; 0
     8e6:	80 40       	sbci	r24, 0x00	; 0
     8e8:	e1 f7       	brne	.-8      	; 0x8e2 <_Z14leggiTAG_Mezzob+0x132>
     8ea:	00 c0       	rjmp	.+0      	; 0x8ec <_Z14leggiTAG_Mezzob+0x13c>
     8ec:	00 00       	nop
     8ee:	ce 01       	movw	r24, r28
     8f0:	41 96       	adiw	r24, 0x11	; 17
     8f2:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
     8f6:	1d c0       	rjmp	.+58     	; 0x932 <_Z14leggiTAG_Mezzob+0x182>
     8f8:	82 ed       	ldi	r24, 0xD2	; 210
     8fa:	9a e0       	ldi	r25, 0x0A	; 10
     8fc:	0e 94 09 2b 	call	0x5612	; 0x5612 <_ZN3LCD5clearEv>
     900:	41 e0       	ldi	r20, 0x01	; 1
     902:	60 e0       	ldi	r22, 0x00	; 0
     904:	82 ed       	ldi	r24, 0xD2	; 210
     906:	9a e0       	ldi	r25, 0x0A	; 10
     908:	0e 94 0f 2b 	call	0x561e	; 0x561e <_ZN3LCD9setCursorEhh>
     90c:	67 e5       	ldi	r22, 0x57	; 87
     90e:	72 e0       	ldi	r23, 0x02	; 2
     910:	0c c0       	rjmp	.+24     	; 0x92a <_Z14leggiTAG_Mezzob+0x17a>
     912:	82 ed       	ldi	r24, 0xD2	; 210
     914:	9a e0       	ldi	r25, 0x0A	; 10
     916:	0e 94 09 2b 	call	0x5612	; 0x5612 <_ZN3LCD5clearEv>
     91a:	41 e0       	ldi	r20, 0x01	; 1
     91c:	60 e0       	ldi	r22, 0x00	; 0
     91e:	82 ed       	ldi	r24, 0xD2	; 210
     920:	9a e0       	ldi	r25, 0x0A	; 10
     922:	0e 94 0f 2b 	call	0x561e	; 0x561e <_ZN3LCD9setCursorEhh>
     926:	61 e6       	ldi	r22, 0x61	; 97
     928:	72 e0       	ldi	r23, 0x02	; 2
     92a:	82 ed       	ldi	r24, 0xD2	; 210
     92c:	9a e0       	ldi	r25, 0x0A	; 10
     92e:	0e 94 d5 34 	call	0x69aa	; 0x69aa <_ZN5Print5printEPKc>
     932:	6a e3       	ldi	r22, 0x3A	; 58
     934:	72 e0       	ldi	r23, 0x02	; 2
     936:	85 ea       	ldi	r24, 0xA5	; 165
     938:	9c e0       	ldi	r25, 0x0C	; 12
     93a:	0e 94 00 35 	call	0x6a00	; 0x6a00 <_ZN5Print7printlnEPKc>
     93e:	be 01       	movw	r22, r28
     940:	63 5e       	subi	r22, 0xE3	; 227
     942:	7f 4f       	sbci	r23, 0xFF	; 255
     944:	c5 01       	movw	r24, r10
     946:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <_ZN6StringC1EOS_>
     94a:	ce 01       	movw	r24, r28
     94c:	4d 96       	adiw	r24, 0x1d	; 29
     94e:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
     952:	c5 01       	movw	r24, r10
     954:	a2 96       	adiw	r28, 0x22	; 34
     956:	0f b6       	in	r0, 0x3f	; 63
     958:	f8 94       	cli
     95a:	de bf       	out	0x3e, r29	; 62
     95c:	0f be       	out	0x3f, r0	; 63
     95e:	cd bf       	out	0x3d, r28	; 61
     960:	df 91       	pop	r29
     962:	cf 91       	pop	r28
     964:	1f 91       	pop	r17
     966:	0f 91       	pop	r16
     968:	ff 90       	pop	r15
     96a:	ef 90       	pop	r14
     96c:	df 90       	pop	r13
     96e:	cf 90       	pop	r12
     970:	bf 90       	pop	r11
     972:	af 90       	pop	r10
     974:	08 95       	ret

00000976 <_Z14GetCodeRfidATev>:
     976:	cf 92       	push	r12
     978:	df 92       	push	r13
     97a:	ef 92       	push	r14
     97c:	ff 92       	push	r15
     97e:	0f 93       	push	r16
     980:	1f 93       	push	r17
     982:	cf 93       	push	r28
     984:	df 93       	push	r29
     986:	cd b7       	in	r28, 0x3d	; 61
     988:	de b7       	in	r29, 0x3e	; 62
     98a:	64 97       	sbiw	r28, 0x14	; 20
     98c:	0f b6       	in	r0, 0x3f	; 63
     98e:	f8 94       	cli
     990:	de bf       	out	0x3e, r29	; 62
     992:	0f be       	out	0x3f, r0	; 63
     994:	cd bf       	out	0x3d, r28	; 61
     996:	7c 01       	movw	r14, r24
     998:	ce 01       	movw	r24, r28
     99a:	01 96       	adiw	r24, 0x01	; 1
     99c:	6c 01       	movw	r12, r24
     99e:	87 e0       	ldi	r24, 0x07	; 7
     9a0:	f6 01       	movw	r30, r12
     9a2:	11 92       	st	Z+, r1
     9a4:	8a 95       	dec	r24
     9a6:	e9 f7       	brne	.-6      	; 0x9a2 <_Z14GetCodeRfidATev+0x2c>
     9a8:	69 e6       	ldi	r22, 0x69	; 105
     9aa:	72 e0       	ldi	r23, 0x02	; 2
     9ac:	c7 01       	movw	r24, r14
     9ae:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <_ZN6StringC1EPKc>
     9b2:	00 e0       	ldi	r16, 0x00	; 0
     9b4:	10 e0       	ldi	r17, 0x00	; 0
     9b6:	9e 01       	movw	r18, r28
     9b8:	2c 5e       	subi	r18, 0xEC	; 236
     9ba:	3f 4f       	sbci	r19, 0xFF	; 255
     9bc:	a6 01       	movw	r20, r12
     9be:	60 e0       	ldi	r22, 0x00	; 0
     9c0:	8b eb       	ldi	r24, 0xBB	; 187
     9c2:	9a e0       	ldi	r25, 0x0A	; 10
     9c4:	0e 94 0f 1b 	call	0x361e	; 0x361e <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j>
     9c8:	88 23       	and	r24, r24
     9ca:	59 f1       	breq	.+86     	; 0xa22 <_Z14GetCodeRfidATev+0xac>
     9cc:	0c 89       	ldd	r16, Y+20	; 0x14
     9ce:	10 e0       	ldi	r17, 0x00	; 0
     9d0:	20 e0       	ldi	r18, 0x00	; 0
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	a6 01       	movw	r20, r12
     9d6:	6b eb       	ldi	r22, 0xBB	; 187
     9d8:	7a e0       	ldi	r23, 0x0A	; 10
     9da:	ce 01       	movw	r24, r28
     9dc:	0e 96       	adiw	r24, 0x0e	; 14
     9de:	0e 94 0e 19 	call	0x321c	; 0x321c <_ZN9NFC_PN53210GetHexCodeEPKhm>
     9e2:	ce 01       	movw	r24, r28
     9e4:	0e 96       	adiw	r24, 0x0e	; 14
     9e6:	0e 94 33 3a 	call	0x7466	; 0x7466 <_ZN6String4trimEv>
     9ea:	28 e0       	ldi	r18, 0x08	; 8
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	40 e0       	ldi	r20, 0x00	; 0
     9f0:	50 e0       	ldi	r21, 0x00	; 0
     9f2:	be 01       	movw	r22, r28
     9f4:	62 5f       	subi	r22, 0xF2	; 242
     9f6:	7f 4f       	sbci	r23, 0xFF	; 255
     9f8:	ce 01       	movw	r24, r28
     9fa:	08 96       	adiw	r24, 0x08	; 8
     9fc:	0e 94 f0 39 	call	0x73e0	; 0x73e0 <_ZNK6String9substringEjj>
     a00:	be 01       	movw	r22, r28
     a02:	68 5f       	subi	r22, 0xF8	; 248
     a04:	7f 4f       	sbci	r23, 0xFF	; 255
     a06:	c7 01       	movw	r24, r14
     a08:	0e 94 0f 38 	call	0x701e	; 0x701e <_ZN6StringaSEOS_>
     a0c:	ce 01       	movw	r24, r28
     a0e:	08 96       	adiw	r24, 0x08	; 8
     a10:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	80 93 ea 0a 	sts	0x0AEA, r24	; 0x800aea <alreadyTimbrata>
     a1a:	ce 01       	movw	r24, r28
     a1c:	0e 96       	adiw	r24, 0x0e	; 14
     a1e:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
     a22:	c7 01       	movw	r24, r14
     a24:	64 96       	adiw	r28, 0x14	; 20
     a26:	0f b6       	in	r0, 0x3f	; 63
     a28:	f8 94       	cli
     a2a:	de bf       	out	0x3e, r29	; 62
     a2c:	0f be       	out	0x3f, r0	; 63
     a2e:	cd bf       	out	0x3d, r28	; 61
     a30:	df 91       	pop	r29
     a32:	cf 91       	pop	r28
     a34:	1f 91       	pop	r17
     a36:	0f 91       	pop	r16
     a38:	ff 90       	pop	r15
     a3a:	ef 90       	pop	r14
     a3c:	df 90       	pop	r13
     a3e:	cf 90       	pop	r12
     a40:	08 95       	ret

00000a42 <_Z19GetHTTPResponseCode6String>:
     a42:	ef 92       	push	r14
     a44:	ff 92       	push	r15
     a46:	0f 93       	push	r16
     a48:	1f 93       	push	r17
     a4a:	cf 93       	push	r28
     a4c:	df 93       	push	r29
     a4e:	cd b7       	in	r28, 0x3d	; 61
     a50:	de b7       	in	r29, 0x3e	; 62
     a52:	62 97       	sbiw	r28, 0x12	; 18
     a54:	0f b6       	in	r0, 0x3f	; 63
     a56:	f8 94       	cli
     a58:	de bf       	out	0x3e, r29	; 62
     a5a:	0f be       	out	0x3f, r0	; 63
     a5c:	cd bf       	out	0x3d, r28	; 61
     a5e:	8c 01       	movw	r16, r24
     a60:	7b 01       	movw	r14, r22
     a62:	60 e7       	ldi	r22, 0x70	; 112
     a64:	72 e0       	ldi	r23, 0x02	; 2
     a66:	ce 01       	movw	r24, r28
     a68:	0d 96       	adiw	r24, 0x0d	; 13
     a6a:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <_ZN6StringC1EPKc>
     a6e:	cf dc       	rcall	.-1634   	; 0x40e <_Z9printLinev>
     a70:	68 e7       	ldi	r22, 0x78	; 120
     a72:	72 e0       	ldi	r23, 0x02	; 2
     a74:	85 ea       	ldi	r24, 0xA5	; 165
     a76:	9c e0       	ldi	r25, 0x0C	; 12
     a78:	0e 94 00 35 	call	0x6a00	; 0x6a00 <_ZN5Print7printlnEPKc>
     a7c:	20 91 47 01 	lds	r18, 0x0147	; 0x800147 <HTTP_len_response>
     a80:	30 91 48 01 	lds	r19, 0x0148	; 0x800148 <HTTP_len_response+0x1>
     a84:	f7 01       	movw	r30, r14
     a86:	84 81       	ldd	r24, Z+4	; 0x04
     a88:	95 81       	ldd	r25, Z+5	; 0x05
     a8a:	28 17       	cp	r18, r24
     a8c:	39 07       	cpc	r19, r25
     a8e:	49 f5       	brne	.+82     	; 0xae2 <_Z19GetHTTPResponseCode6String+0xa0>
     a90:	a9 01       	movw	r20, r18
     a92:	43 50       	subi	r20, 0x03	; 3
     a94:	51 09       	sbc	r21, r1
     a96:	b7 01       	movw	r22, r14
     a98:	ce 01       	movw	r24, r28
     a9a:	07 96       	adiw	r24, 0x07	; 7
     a9c:	0e 94 f0 39 	call	0x73e0	; 0x73e0 <_ZNK6String9substringEjj>
     aa0:	60 e9       	ldi	r22, 0x90	; 144
     aa2:	72 e0       	ldi	r23, 0x02	; 2
     aa4:	ce 01       	movw	r24, r28
     aa6:	01 96       	adiw	r24, 0x01	; 1
     aa8:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <_ZN6StringC1EPKc>
     aac:	be 01       	movw	r22, r28
     aae:	69 5f       	subi	r22, 0xF9	; 249
     ab0:	7f 4f       	sbci	r23, 0xFF	; 255
     ab2:	ce 01       	movw	r24, r28
     ab4:	01 96       	adiw	r24, 0x01	; 1
     ab6:	0e 94 70 39 	call	0x72e0	; 0x72e0 <_ZplRK15StringSumHelperRK6String>
     aba:	bc 01       	movw	r22, r24
     abc:	85 ea       	ldi	r24, 0xA5	; 165
     abe:	9c e0       	ldi	r25, 0x0C	; 12
     ac0:	0e 94 f0 34 	call	0x69e0	; 0x69e0 <_ZN5Print7printlnERK6String>
     ac4:	ce 01       	movw	r24, r28
     ac6:	01 96       	adiw	r24, 0x01	; 1
     ac8:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
     acc:	be 01       	movw	r22, r28
     ace:	69 5f       	subi	r22, 0xF9	; 249
     ad0:	7f 4f       	sbci	r23, 0xFF	; 255
     ad2:	c8 01       	movw	r24, r16
     ad4:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <_ZN6StringC1EOS_>
     ad8:	ce 01       	movw	r24, r28
     ada:	07 96       	adiw	r24, 0x07	; 7
     adc:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
     ae0:	09 c0       	rjmp	.+18     	; 0xaf4 <_Z19GetHTTPResponseCode6String+0xb2>
     ae2:	80 e0       	ldi	r24, 0x00	; 0
     ae4:	b8 dc       	rcall	.-1680   	; 0x456 <_Z4passb>
     ae6:	93 dc       	rcall	.-1754   	; 0x40e <_Z9printLinev>
     ae8:	be 01       	movw	r22, r28
     aea:	63 5f       	subi	r22, 0xF3	; 243
     aec:	7f 4f       	sbci	r23, 0xFF	; 255
     aee:	c8 01       	movw	r24, r16
     af0:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <_ZN6StringC1EOS_>
     af4:	ce 01       	movw	r24, r28
     af6:	0d 96       	adiw	r24, 0x0d	; 13
     af8:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
     afc:	c8 01       	movw	r24, r16
     afe:	62 96       	adiw	r28, 0x12	; 18
     b00:	0f b6       	in	r0, 0x3f	; 63
     b02:	f8 94       	cli
     b04:	de bf       	out	0x3e, r29	; 62
     b06:	0f be       	out	0x3f, r0	; 63
     b08:	cd bf       	out	0x3d, r28	; 61
     b0a:	df 91       	pop	r29
     b0c:	cf 91       	pop	r28
     b0e:	1f 91       	pop	r17
     b10:	0f 91       	pop	r16
     b12:	ff 90       	pop	r15
     b14:	ef 90       	pop	r14
     b16:	08 95       	ret

00000b18 <_Z17PostErogazioneGACiPc14EthernetClient6String>:
     b18:	af 92       	push	r10
     b1a:	bf 92       	push	r11
     b1c:	cf 92       	push	r12
     b1e:	df 92       	push	r13
     b20:	ef 92       	push	r14
     b22:	ff 92       	push	r15
     b24:	0f 93       	push	r16
     b26:	1f 93       	push	r17
     b28:	cf 93       	push	r28
     b2a:	df 93       	push	r29
     b2c:	cd b7       	in	r28, 0x3d	; 61
     b2e:	de b7       	in	r29, 0x3e	; 62
     b30:	62 97       	sbiw	r28, 0x12	; 18
     b32:	0f b6       	in	r0, 0x3f	; 63
     b34:	f8 94       	cli
     b36:	de bf       	out	0x3e, r29	; 62
     b38:	0f be       	out	0x3f, r0	; 63
     b3a:	cd bf       	out	0x3d, r28	; 61
     b3c:	5c 01       	movw	r10, r24
     b3e:	6b 01       	movw	r12, r22
     b40:	8a 01       	movw	r16, r20
     b42:	79 01       	movw	r14, r18
     b44:	64 dc       	rcall	.-1848   	; 0x40e <_Z9printLinev>
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	75 dc       	rcall	.-1814   	; 0x434 <_Z8printTabh>
     b4a:	64 e7       	ldi	r22, 0x74	; 116
     b4c:	74 e0       	ldi	r23, 0x04	; 4
     b4e:	85 ea       	ldi	r24, 0xA5	; 165
     b50:	9c e0       	ldi	r25, 0x0C	; 12
     b52:	0e 94 d5 34 	call	0x69aa	; 0x69aa <_ZN5Print5printEPKc>
     b56:	a5 01       	movw	r20, r10
     b58:	b6 01       	movw	r22, r12
     b5a:	c8 01       	movw	r24, r16
     b5c:	0e 94 32 23 	call	0x4664	; 0x4664 <_ZN14EthernetClient7connectEPKcj>
     b60:	89 2b       	or	r24, r25
     b62:	09 f4       	brne	.+2      	; 0xb66 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x4e>
     b64:	98 c0       	rjmp	.+304    	; 0xc96 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x17e>
     b66:	2f ef       	ldi	r18, 0xFF	; 255
     b68:	81 ee       	ldi	r24, 0xE1	; 225
     b6a:	94 e0       	ldi	r25, 0x04	; 4
     b6c:	21 50       	subi	r18, 0x01	; 1
     b6e:	80 40       	sbci	r24, 0x00	; 0
     b70:	90 40       	sbci	r25, 0x00	; 0
     b72:	e1 f7       	brne	.-8      	; 0xb6c <_Z17PostErogazioneGACiPc14EthernetClient6String+0x54>
     b74:	00 c0       	rjmp	.+0      	; 0xb76 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x5e>
     b76:	00 00       	nop
     b78:	63 ea       	ldi	r22, 0xA3	; 163
     b7a:	74 e0       	ldi	r23, 0x04	; 4
     b7c:	8f ea       	ldi	r24, 0xAF	; 175
     b7e:	9a e0       	ldi	r25, 0x0A	; 10
     b80:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>
     b84:	65 ec       	ldi	r22, 0xC5	; 197
     b86:	74 e0       	ldi	r23, 0x04	; 4
     b88:	8f ea       	ldi	r24, 0xAF	; 175
     b8a:	9a e0       	ldi	r25, 0x0A	; 10
     b8c:	0e 94 50 39 	call	0x72a0	; 0x72a0 <_ZN6String6concatEPKc>
     b90:	62 e4       	ldi	r22, 0x42	; 66
     b92:	75 e0       	ldi	r23, 0x05	; 5
     b94:	8f ea       	ldi	r24, 0xAF	; 175
     b96:	9a e0       	ldi	r25, 0x0A	; 10
     b98:	0e 94 50 39 	call	0x72a0	; 0x72a0 <_ZN6String6concatEPKc>
     b9c:	61 e7       	ldi	r22, 0x71	; 113
     b9e:	73 e0       	ldi	r23, 0x03	; 3
     ba0:	8f ea       	ldi	r24, 0xAF	; 175
     ba2:	9a e0       	ldi	r25, 0x0A	; 10
     ba4:	0e 94 50 39 	call	0x72a0	; 0x72a0 <_ZN6String6concatEPKc>
     ba8:	62 e4       	ldi	r22, 0x42	; 66
     baa:	75 e0       	ldi	r23, 0x05	; 5
     bac:	8f ea       	ldi	r24, 0xAF	; 175
     bae:	9a e0       	ldi	r25, 0x0A	; 10
     bb0:	0e 94 50 39 	call	0x72a0	; 0x72a0 <_ZN6String6concatEPKc>
     bb4:	6b e1       	ldi	r22, 0x1B	; 27
     bb6:	74 e0       	ldi	r23, 0x04	; 4
     bb8:	8f ea       	ldi	r24, 0xAF	; 175
     bba:	9a e0       	ldi	r25, 0x0A	; 10
     bbc:	0e 94 50 39 	call	0x72a0	; 0x72a0 <_ZN6String6concatEPKc>
     bc0:	62 e4       	ldi	r22, 0x42	; 66
     bc2:	75 e0       	ldi	r23, 0x05	; 5
     bc4:	8f ea       	ldi	r24, 0xAF	; 175
     bc6:	9a e0       	ldi	r25, 0x0A	; 10
     bc8:	0e 94 50 39 	call	0x72a0	; 0x72a0 <_ZN6String6concatEPKc>
     bcc:	6d ed       	ldi	r22, 0xDD	; 221
     bce:	74 e0       	ldi	r23, 0x04	; 4
     bd0:	8f ea       	ldi	r24, 0xAF	; 175
     bd2:	9a e0       	ldi	r25, 0x0A	; 10
     bd4:	0e 94 50 39 	call	0x72a0	; 0x72a0 <_ZN6String6concatEPKc>
     bd8:	62 e4       	ldi	r22, 0x42	; 66
     bda:	75 e0       	ldi	r23, 0x05	; 5
     bdc:	8f ea       	ldi	r24, 0xAF	; 175
     bde:	9a e0       	ldi	r25, 0x0A	; 10
     be0:	0e 94 50 39 	call	0x72a0	; 0x72a0 <_ZN6String6concatEPKc>
     be4:	f7 01       	movw	r30, r14
     be6:	64 81       	ldd	r22, Z+4	; 0x04
     be8:	75 81       	ldd	r23, Z+5	; 0x05
     bea:	6b 5e       	subi	r22, 0xEB	; 235
     bec:	7f 4f       	sbci	r23, 0xFF	; 255
     bee:	4a e0       	ldi	r20, 0x0A	; 10
     bf0:	ce 01       	movw	r24, r28
     bf2:	07 96       	adiw	r24, 0x07	; 7
     bf4:	0e 94 9b 38 	call	0x7136	; 0x7136 <_ZN6StringC1Ejh>
     bf8:	69 ee       	ldi	r22, 0xE9	; 233
     bfa:	74 e0       	ldi	r23, 0x04	; 4
     bfc:	ce 01       	movw	r24, r28
     bfe:	01 96       	adiw	r24, 0x01	; 1
     c00:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <_ZN6StringC1EPKc>
     c04:	be 01       	movw	r22, r28
     c06:	69 5f       	subi	r22, 0xF9	; 249
     c08:	7f 4f       	sbci	r23, 0xFF	; 255
     c0a:	ce 01       	movw	r24, r28
     c0c:	01 96       	adiw	r24, 0x01	; 1
     c0e:	0e 94 70 39 	call	0x72e0	; 0x72e0 <_ZplRK15StringSumHelperRK6String>
     c12:	bc 01       	movw	r22, r24
     c14:	8f ea       	ldi	r24, 0xAF	; 175
     c16:	9a e0       	ldi	r25, 0x0A	; 10
     c18:	0e 94 4a 39 	call	0x7294	; 0x7294 <_ZN6String6concatERKS_>
     c1c:	ce 01       	movw	r24, r28
     c1e:	01 96       	adiw	r24, 0x01	; 1
     c20:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
     c24:	ce 01       	movw	r24, r28
     c26:	07 96       	adiw	r24, 0x07	; 7
     c28:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
     c2c:	62 e4       	ldi	r22, 0x42	; 66
     c2e:	75 e0       	ldi	r23, 0x05	; 5
     c30:	8f ea       	ldi	r24, 0xAF	; 175
     c32:	9a e0       	ldi	r25, 0x0A	; 10
     c34:	0e 94 50 39 	call	0x72a0	; 0x72a0 <_ZN6String6concatEPKc>
     c38:	62 e4       	ldi	r22, 0x42	; 66
     c3a:	75 e0       	ldi	r23, 0x05	; 5
     c3c:	8f ea       	ldi	r24, 0xAF	; 175
     c3e:	9a e0       	ldi	r25, 0x0A	; 10
     c40:	0e 94 50 39 	call	0x72a0	; 0x72a0 <_ZN6String6concatEPKc>
     c44:	b7 01       	movw	r22, r14
     c46:	8f ea       	ldi	r24, 0xAF	; 175
     c48:	9a e0       	ldi	r25, 0x0A	; 10
     c4a:	0e 94 4a 39 	call	0x7294	; 0x7294 <_ZN6String6concatERKS_>
     c4e:	62 e4       	ldi	r22, 0x42	; 66
     c50:	75 e0       	ldi	r23, 0x05	; 5
     c52:	8f ea       	ldi	r24, 0xAF	; 175
     c54:	9a e0       	ldi	r25, 0x0A	; 10
     c56:	0e 94 50 39 	call	0x72a0	; 0x72a0 <_ZN6String6concatEPKc>
     c5a:	6f ea       	ldi	r22, 0xAF	; 175
     c5c:	7a e0       	ldi	r23, 0x0A	; 10
     c5e:	c8 01       	movw	r24, r16
     c60:	0e 94 c7 34 	call	0x698e	; 0x698e <_ZN5Print5printERK6String>
     c64:	ff ef       	ldi	r31, 0xFF	; 255
     c66:	27 ee       	ldi	r18, 0xE7	; 231
     c68:	83 e0       	ldi	r24, 0x03	; 3
     c6a:	f1 50       	subi	r31, 0x01	; 1
     c6c:	20 40       	sbci	r18, 0x00	; 0
     c6e:	80 40       	sbci	r24, 0x00	; 0
     c70:	e1 f7       	brne	.-8      	; 0xc6a <_Z17PostErogazioneGACiPc14EthernetClient6String+0x152>
     c72:	00 c0       	rjmp	.+0      	; 0xc74 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x15c>
     c74:	00 00       	nop
     c76:	6a e3       	ldi	r22, 0x3A	; 58
     c78:	74 e0       	ldi	r23, 0x04	; 4
     c7a:	c8 01       	movw	r24, r16
     c7c:	0e 94 00 35 	call	0x6a00	; 0x6a00 <_ZN5Print7printlnEPKc>
     c80:	c8 01       	movw	r24, r16
     c82:	0e 94 dd 34 	call	0x69ba	; 0x69ba <_ZN5Print7printlnEv>
     c86:	c3 db       	rcall	.-2170   	; 0x40e <_Z9printLinev>
     c88:	6f ea       	ldi	r22, 0xAF	; 175
     c8a:	7a e0       	ldi	r23, 0x0A	; 10
     c8c:	85 ea       	ldi	r24, 0xA5	; 165
     c8e:	9c e0       	ldi	r25, 0x0C	; 12
     c90:	0e 94 f0 34 	call	0x69e0	; 0x69e0 <_ZN5Print7printlnERK6String>
     c94:	25 c0       	rjmp	.+74     	; 0xce0 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x1c8>
     c96:	82 ed       	ldi	r24, 0xD2	; 210
     c98:	9a e0       	ldi	r25, 0x0A	; 10
     c9a:	0e 94 09 2b 	call	0x5612	; 0x5612 <_ZN3LCD5clearEv>
     c9e:	41 e0       	ldi	r20, 0x01	; 1
     ca0:	60 e0       	ldi	r22, 0x00	; 0
     ca2:	82 ed       	ldi	r24, 0xD2	; 210
     ca4:	9a e0       	ldi	r25, 0x0A	; 10
     ca6:	0e 94 0f 2b 	call	0x561e	; 0x561e <_ZN3LCD9setCursorEhh>
     caa:	6c e4       	ldi	r22, 0x4C	; 76
     cac:	74 e0       	ldi	r23, 0x04	; 4
     cae:	82 ed       	ldi	r24, 0xD2	; 210
     cb0:	9a e0       	ldi	r25, 0x0A	; 10
     cb2:	0e 94 d5 34 	call	0x69aa	; 0x69aa <_ZN5Print5printEPKc>
     cb6:	43 e0       	ldi	r20, 0x03	; 3
     cb8:	60 e0       	ldi	r22, 0x00	; 0
     cba:	82 ed       	ldi	r24, 0xD2	; 210
     cbc:	9a e0       	ldi	r25, 0x0A	; 10
     cbe:	0e 94 0f 2b 	call	0x561e	; 0x561e <_ZN3LCD9setCursorEhh>
     cc2:	61 e6       	ldi	r22, 0x61	; 97
     cc4:	74 e0       	ldi	r23, 0x04	; 4
     cc6:	82 ed       	ldi	r24, 0xD2	; 210
     cc8:	9a e0       	ldi	r25, 0x0A	; 10
     cca:	0e 94 d5 34 	call	0x69aa	; 0x69aa <_ZN5Print5printEPKc>
     cce:	9f ef       	ldi	r25, 0xFF	; 255
     cd0:	e3 ed       	ldi	r30, 0xD3	; 211
     cd2:	f0 e3       	ldi	r31, 0x30	; 48
     cd4:	91 50       	subi	r25, 0x01	; 1
     cd6:	e0 40       	sbci	r30, 0x00	; 0
     cd8:	f0 40       	sbci	r31, 0x00	; 0
     cda:	e1 f7       	brne	.-8      	; 0xcd4 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x1bc>
     cdc:	00 c0       	rjmp	.+0      	; 0xcde <_Z17PostErogazioneGACiPc14EthernetClient6String+0x1c6>
     cde:	00 00       	nop
     ce0:	2f ef       	ldi	r18, 0xFF	; 255
     ce2:	81 ee       	ldi	r24, 0xE1	; 225
     ce4:	94 e0       	ldi	r25, 0x04	; 4
     ce6:	21 50       	subi	r18, 0x01	; 1
     ce8:	80 40       	sbci	r24, 0x00	; 0
     cea:	90 40       	sbci	r25, 0x00	; 0
     cec:	e1 f7       	brne	.-8      	; 0xce6 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x1ce>
     cee:	00 c0       	rjmp	.+0      	; 0xcf0 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x1d8>
     cf0:	00 00       	nop
     cf2:	f1 2c       	mov	r15, r1
     cf4:	c8 01       	movw	r24, r16
     cf6:	0e 94 a9 23 	call	0x4752	; 0x4752 <_ZN14EthernetClient9availableEv>
     cfa:	89 2b       	or	r24, r25
     cfc:	09 f4       	brne	.+2      	; 0xd00 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x1e8>
     cfe:	83 c0       	rjmp	.+262    	; 0xe06 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x2ee>
     d00:	20 91 47 01 	lds	r18, 0x0147	; 0x800147 <HTTP_len_response>
     d04:	30 91 48 01 	lds	r19, 0x0148	; 0x800148 <HTTP_len_response+0x1>
     d08:	80 91 a7 0a 	lds	r24, 0x0AA7	; 0x800aa7 <RispostaHTTP+0x4>
     d0c:	90 91 a8 0a 	lds	r25, 0x0AA8	; 0x800aa8 <RispostaHTTP+0x5>
     d10:	82 17       	cp	r24, r18
     d12:	93 07       	cpc	r25, r19
     d14:	08 f0       	brcs	.+2      	; 0xd18 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x200>
     d16:	77 c0       	rjmp	.+238    	; 0xe06 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x2ee>
     d18:	6a ef       	ldi	r22, 0xFA	; 250
     d1a:	74 e0       	ldi	r23, 0x04	; 4
     d1c:	ce 01       	movw	r24, r28
     d1e:	0d 96       	adiw	r24, 0x0d	; 13
     d20:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <_ZN6StringC1EPKc>
     d24:	c8 01       	movw	r24, r16
     d26:	0e 94 b3 23 	call	0x4766	; 0x4766 <_ZN14EthernetClient4readEv>
     d2a:	e8 2e       	mov	r14, r24
     d2c:	63 ea       	ldi	r22, 0xA3	; 163
     d2e:	7a e0       	ldi	r23, 0x0A	; 10
     d30:	ce 01       	movw	r24, r28
     d32:	01 96       	adiw	r24, 0x01	; 1
     d34:	0e 94 07 38 	call	0x700e	; 0x700e <_ZN6StringC1ERKS_>
     d38:	6e 2d       	mov	r22, r14
     d3a:	ce 01       	movw	r24, r28
     d3c:	01 96       	adiw	r24, 0x01	; 1
     d3e:	0e 94 98 39 	call	0x7330	; 0x7330 <_ZplRK15StringSumHelperc>
     d42:	bc 01       	movw	r22, r24
     d44:	83 ea       	ldi	r24, 0xA3	; 163
     d46:	9a e0       	ldi	r25, 0x0A	; 10
     d48:	0e 94 f2 37 	call	0x6fe4	; 0x6fe4 <_ZN6StringaSERKS_>
     d4c:	ce 01       	movw	r24, r28
     d4e:	01 96       	adiw	r24, 0x01	; 1
     d50:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
     d54:	5c db       	rcall	.-2376   	; 0x40e <_Z9printLinev>
     d56:	63 ea       	ldi	r22, 0xA3	; 163
     d58:	7a e0       	ldi	r23, 0x0A	; 10
     d5a:	85 ea       	ldi	r24, 0xA5	; 165
     d5c:	9c e0       	ldi	r25, 0x0C	; 12
     d5e:	0e 94 f0 34 	call	0x69e0	; 0x69e0 <_ZN5Print7printlnERK6String>
     d62:	20 91 47 01 	lds	r18, 0x0147	; 0x800147 <HTTP_len_response>
     d66:	30 91 48 01 	lds	r19, 0x0148	; 0x800148 <HTTP_len_response+0x1>
     d6a:	80 91 a7 0a 	lds	r24, 0x0AA7	; 0x800aa7 <RispostaHTTP+0x4>
     d6e:	90 91 a8 0a 	lds	r25, 0x0AA8	; 0x800aa8 <RispostaHTTP+0x5>
     d72:	28 17       	cp	r18, r24
     d74:	39 07       	cpc	r19, r25
     d76:	09 f0       	breq	.+2      	; 0xd7a <_Z17PostErogazioneGACiPc14EthernetClient6String+0x262>
     d78:	41 c0       	rjmp	.+130    	; 0xdfc <_Z17PostErogazioneGACiPc14EthernetClient6String+0x2e4>
     d7a:	6a ef       	ldi	r22, 0xFA	; 250
     d7c:	74 e0       	ldi	r23, 0x04	; 4
     d7e:	ce 01       	movw	r24, r28
     d80:	0d 96       	adiw	r24, 0x0d	; 13
     d82:	0e 94 a4 39 	call	0x7348	; 0x7348 <_ZNK6String6equalsEPKc>
     d86:	88 23       	and	r24, r24
     d88:	c9 f1       	breq	.+114    	; 0xdfc <_Z17PostErogazioneGACiPc14EthernetClient6String+0x2e4>
     d8a:	63 ea       	ldi	r22, 0xA3	; 163
     d8c:	7a e0       	ldi	r23, 0x0A	; 10
     d8e:	ce 01       	movw	r24, r28
     d90:	07 96       	adiw	r24, 0x07	; 7
     d92:	0e 94 07 38 	call	0x700e	; 0x700e <_ZN6StringC1ERKS_>
     d96:	be 01       	movw	r22, r28
     d98:	69 5f       	subi	r22, 0xF9	; 249
     d9a:	7f 4f       	sbci	r23, 0xFF	; 255
     d9c:	ce 01       	movw	r24, r28
     d9e:	01 96       	adiw	r24, 0x01	; 1
     da0:	50 de       	rcall	.-864    	; 0xa42 <_Z19GetHTTPResponseCode6String>
     da2:	be 01       	movw	r22, r28
     da4:	6f 5f       	subi	r22, 0xFF	; 255
     da6:	7f 4f       	sbci	r23, 0xFF	; 255
     da8:	ce 01       	movw	r24, r28
     daa:	0d 96       	adiw	r24, 0x0d	; 13
     dac:	0e 94 0f 38 	call	0x701e	; 0x701e <_ZN6StringaSEOS_>
     db0:	ce 01       	movw	r24, r28
     db2:	01 96       	adiw	r24, 0x01	; 1
     db4:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
     db8:	ce 01       	movw	r24, r28
     dba:	07 96       	adiw	r24, 0x07	; 7
     dbc:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
     dc0:	ff ef       	ldi	r31, 0xFF	; 255
     dc2:	27 ee       	ldi	r18, 0xE7	; 231
     dc4:	83 e0       	ldi	r24, 0x03	; 3
     dc6:	f1 50       	subi	r31, 0x01	; 1
     dc8:	20 40       	sbci	r18, 0x00	; 0
     dca:	80 40       	sbci	r24, 0x00	; 0
     dcc:	e1 f7       	brne	.-8      	; 0xdc6 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x2ae>
     dce:	00 c0       	rjmp	.+0      	; 0xdd0 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x2b8>
     dd0:	00 00       	nop
     dd2:	60 e7       	ldi	r22, 0x70	; 112
     dd4:	74 e0       	ldi	r23, 0x04	; 4
     dd6:	ce 01       	movw	r24, r28
     dd8:	0d 96       	adiw	r24, 0x0d	; 13
     dda:	0e 94 a4 39 	call	0x7348	; 0x7348 <_ZNK6String6equalsEPKc>
     dde:	88 23       	and	r24, r24
     de0:	21 f0       	breq	.+8      	; 0xdea <_Z17PostErogazioneGACiPc14EthernetClient6String+0x2d2>
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	38 db       	rcall	.-2448   	; 0x456 <_Z4passb>
     de6:	ff 24       	eor	r15, r15
     de8:	f3 94       	inc	r15
     dea:	ef ef       	ldi	r30, 0xFF	; 255
     dec:	f7 ee       	ldi	r31, 0xE7	; 231
     dee:	23 e0       	ldi	r18, 0x03	; 3
     df0:	e1 50       	subi	r30, 0x01	; 1
     df2:	f0 40       	sbci	r31, 0x00	; 0
     df4:	20 40       	sbci	r18, 0x00	; 0
     df6:	e1 f7       	brne	.-8      	; 0xdf0 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x2d8>
     df8:	00 c0       	rjmp	.+0      	; 0xdfa <_Z17PostErogazioneGACiPc14EthernetClient6String+0x2e2>
     dfa:	00 00       	nop
     dfc:	ce 01       	movw	r24, r28
     dfe:	0d 96       	adiw	r24, 0x0d	; 13
     e00:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
     e04:	77 cf       	rjmp	.-274    	; 0xcf4 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x1dc>
     e06:	8f ef       	ldi	r24, 0xFF	; 255
     e08:	90 e7       	ldi	r25, 0x70	; 112
     e0a:	e2 e0       	ldi	r30, 0x02	; 2
     e0c:	81 50       	subi	r24, 0x01	; 1
     e0e:	90 40       	sbci	r25, 0x00	; 0
     e10:	e0 40       	sbci	r30, 0x00	; 0
     e12:	e1 f7       	brne	.-8      	; 0xe0c <_Z17PostErogazioneGACiPc14EthernetClient6String+0x2f4>
     e14:	00 c0       	rjmp	.+0      	; 0xe16 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x2fe>
     e16:	00 00       	nop
     e18:	8f 2d       	mov	r24, r15
     e1a:	62 96       	adiw	r28, 0x12	; 18
     e1c:	0f b6       	in	r0, 0x3f	; 63
     e1e:	f8 94       	cli
     e20:	de bf       	out	0x3e, r29	; 62
     e22:	0f be       	out	0x3f, r0	; 63
     e24:	cd bf       	out	0x3d, r28	; 61
     e26:	df 91       	pop	r29
     e28:	cf 91       	pop	r28
     e2a:	1f 91       	pop	r17
     e2c:	0f 91       	pop	r16
     e2e:	ff 90       	pop	r15
     e30:	ef 90       	pop	r14
     e32:	df 90       	pop	r13
     e34:	cf 90       	pop	r12
     e36:	bf 90       	pop	r11
     e38:	af 90       	pop	r10
     e3a:	08 95       	ret

00000e3c <_Z15abilitaPulsantiv>:
     e3c:	57 98       	cbi	0x0a, 7	; 10
     e3e:	56 98       	cbi	0x0a, 6	; 10
     e40:	88 e0       	ldi	r24, 0x08	; 8
     e42:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
     e46:	80 ec       	ldi	r24, 0xC0	; 192
     e48:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
     e4c:	78 94       	sei
     e4e:	08 95       	ret

00000e50 <_Z22abilitaContattiPistolav>:
     e50:	09 98       	cbi	0x01, 1	; 1
     e52:	0a 98       	cbi	0x01, 2	; 1
     e54:	08 95       	ret

00000e56 <_Z13abilitaPulserc>:
     e56:	91 e0       	ldi	r25, 0x01	; 1
     e58:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
     e5c:	84 34       	cpi	r24, 0x44	; 68
     e5e:	19 f4       	brne	.+6      	; 0xe66 <_Z13abilitaPulserc+0x10>
     e60:	0d 98       	cbi	0x01, 5	; 1
     e62:	80 e2       	ldi	r24, 0x20	; 32
     e64:	02 c0       	rjmp	.+4      	; 0xe6a <_Z13abilitaPulserc+0x14>
     e66:	0e 98       	cbi	0x01, 6	; 1
     e68:	80 e4       	ldi	r24, 0x40	; 64
     e6a:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
     e6e:	78 94       	sei
     e70:	08 95       	ret

00000e72 <_Z14impulsiToLitrii>:
     e72:	cf 92       	push	r12
     e74:	df 92       	push	r13
     e76:	ef 92       	push	r14
     e78:	ff 92       	push	r15
     e7a:	bc 01       	movw	r22, r24
     e7c:	99 0f       	add	r25, r25
     e7e:	88 0b       	sbc	r24, r24
     e80:	99 0b       	sbc	r25, r25
     e82:	0e 94 7e 31 	call	0x62fc	; 0x62fc <__floatsisf>
     e86:	6b 01       	movw	r12, r22
     e88:	7c 01       	movw	r14, r24
     e8a:	20 e0       	ldi	r18, 0x00	; 0
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	a9 01       	movw	r20, r18
     e90:	0e 94 10 31 	call	0x6220	; 0x6220 <__cmpsf2>
     e94:	87 ff       	sbrs	r24, 7
     e96:	03 c0       	rjmp	.+6      	; 0xe9e <_Z14impulsiToLitrii+0x2c>
     e98:	c1 2c       	mov	r12, r1
     e9a:	d1 2c       	mov	r13, r1
     e9c:	76 01       	movw	r14, r12
     e9e:	60 91 45 01 	lds	r22, 0x0145	; 0x800145 <ImpulsiLitro>
     ea2:	70 91 46 01 	lds	r23, 0x0146	; 0x800146 <ImpulsiLitro+0x1>
     ea6:	07 2e       	mov	r0, r23
     ea8:	00 0c       	add	r0, r0
     eaa:	88 0b       	sbc	r24, r24
     eac:	99 0b       	sbc	r25, r25
     eae:	0e 94 7e 31 	call	0x62fc	; 0x62fc <__floatsisf>
     eb2:	9b 01       	movw	r18, r22
     eb4:	ac 01       	movw	r20, r24
     eb6:	c7 01       	movw	r24, r14
     eb8:	b6 01       	movw	r22, r12
     eba:	0e 94 14 31 	call	0x6228	; 0x6228 <__divsf3>
     ebe:	ff 90       	pop	r15
     ec0:	ef 90       	pop	r14
     ec2:	df 90       	pop	r13
     ec4:	cf 90       	pop	r12
     ec6:	08 95       	ret

00000ec8 <_Z18Rele_Abilitazione1ii>:
     ec8:	3f 9a       	sbi	0x07, 7	; 7
     eca:	81 30       	cpi	r24, 0x01	; 1
     ecc:	91 05       	cpc	r25, r1
     ece:	71 f0       	breq	.+28     	; 0xeec <_Z18Rele_Abilitazione1ii+0x24>
     ed0:	82 30       	cpi	r24, 0x02	; 2
     ed2:	91 05       	cpc	r25, r1
     ed4:	e1 f0       	breq	.+56     	; 0xf0e <_Z18Rele_Abilitazione1ii+0x46>
     ed6:	89 2b       	or	r24, r25
     ed8:	89 f5       	brne	.+98     	; 0xf3c <_Z18Rele_Abilitazione1ii+0x74>
     eda:	47 98       	cbi	0x08, 7	; 8
     edc:	2f ef       	ldi	r18, 0xFF	; 255
     ede:	30 e7       	ldi	r19, 0x70	; 112
     ee0:	42 e0       	ldi	r20, 0x02	; 2
     ee2:	21 50       	subi	r18, 0x01	; 1
     ee4:	30 40       	sbci	r19, 0x00	; 0
     ee6:	40 40       	sbci	r20, 0x00	; 0
     ee8:	e1 f7       	brne	.-8      	; 0xee2 <_Z18Rele_Abilitazione1ii+0x1a>
     eea:	0e c0       	rjmp	.+28     	; 0xf08 <_Z18Rele_Abilitazione1ii+0x40>
     eec:	28 b1       	in	r18, 0x08	; 8
     eee:	01 c0       	rjmp	.+2      	; 0xef2 <_Z18Rele_Abilitazione1ii+0x2a>
     ef0:	88 0f       	add	r24, r24
     ef2:	6a 95       	dec	r22
     ef4:	ea f7       	brpl	.-6      	; 0xef0 <_Z18Rele_Abilitazione1ii+0x28>
     ef6:	82 2b       	or	r24, r18
     ef8:	88 b9       	out	0x08, r24	; 8
     efa:	8f ef       	ldi	r24, 0xFF	; 255
     efc:	90 e7       	ldi	r25, 0x70	; 112
     efe:	22 e0       	ldi	r18, 0x02	; 2
     f00:	81 50       	subi	r24, 0x01	; 1
     f02:	90 40       	sbci	r25, 0x00	; 0
     f04:	20 40       	sbci	r18, 0x00	; 0
     f06:	e1 f7       	brne	.-8      	; 0xf00 <_Z18Rele_Abilitazione1ii+0x38>
     f08:	00 c0       	rjmp	.+0      	; 0xf0a <_Z18Rele_Abilitazione1ii+0x42>
     f0a:	00 00       	nop
     f0c:	08 95       	ret
     f0e:	28 b1       	in	r18, 0x08	; 8
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	01 c0       	rjmp	.+2      	; 0xf18 <_Z18Rele_Abilitazione1ii+0x50>
     f16:	88 0f       	add	r24, r24
     f18:	6a 95       	dec	r22
     f1a:	ea f7       	brpl	.-6      	; 0xf16 <_Z18Rele_Abilitazione1ii+0x4e>
     f1c:	98 2f       	mov	r25, r24
     f1e:	90 95       	com	r25
     f20:	92 23       	and	r25, r18
     f22:	98 b9       	out	0x08, r25	; 8
     f24:	3f ef       	ldi	r19, 0xFF	; 255
     f26:	45 ea       	ldi	r20, 0xA5	; 165
     f28:	2e e0       	ldi	r18, 0x0E	; 14
     f2a:	31 50       	subi	r19, 0x01	; 1
     f2c:	40 40       	sbci	r20, 0x00	; 0
     f2e:	20 40       	sbci	r18, 0x00	; 0
     f30:	e1 f7       	brne	.-8      	; 0xf2a <_Z18Rele_Abilitazione1ii+0x62>
     f32:	00 c0       	rjmp	.+0      	; 0xf34 <_Z18Rele_Abilitazione1ii+0x6c>
     f34:	00 00       	nop
     f36:	98 b1       	in	r25, 0x08	; 8
     f38:	89 2b       	or	r24, r25
     f3a:	88 b9       	out	0x08, r24	; 8
     f3c:	08 95       	ret

00000f3e <_Z18Rele_Abilitazione2ii>:
     f3e:	0f 9a       	sbi	0x01, 7	; 1
     f40:	81 30       	cpi	r24, 0x01	; 1
     f42:	91 05       	cpc	r25, r1
     f44:	b9 f0       	breq	.+46     	; 0xf74 <_Z18Rele_Abilitazione2ii+0x36>
     f46:	82 30       	cpi	r24, 0x02	; 2
     f48:	91 05       	cpc	r25, r1
     f4a:	29 f1       	breq	.+74     	; 0xf96 <_Z18Rele_Abilitazione2ii+0x58>
     f4c:	89 2b       	or	r24, r25
     f4e:	d1 f5       	brne	.+116    	; 0xfc4 <_Z18Rele_Abilitazione2ii+0x86>
     f50:	22 b1       	in	r18, 0x02	; 2
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	01 c0       	rjmp	.+2      	; 0xf5a <_Z18Rele_Abilitazione2ii+0x1c>
     f58:	88 0f       	add	r24, r24
     f5a:	6a 95       	dec	r22
     f5c:	ea f7       	brpl	.-6      	; 0xf58 <_Z18Rele_Abilitazione2ii+0x1a>
     f5e:	80 95       	com	r24
     f60:	82 23       	and	r24, r18
     f62:	82 b9       	out	0x02, r24	; 2
     f64:	2f ef       	ldi	r18, 0xFF	; 255
     f66:	30 e7       	ldi	r19, 0x70	; 112
     f68:	42 e0       	ldi	r20, 0x02	; 2
     f6a:	21 50       	subi	r18, 0x01	; 1
     f6c:	30 40       	sbci	r19, 0x00	; 0
     f6e:	40 40       	sbci	r20, 0x00	; 0
     f70:	e1 f7       	brne	.-8      	; 0xf6a <_Z18Rele_Abilitazione2ii+0x2c>
     f72:	0e c0       	rjmp	.+28     	; 0xf90 <_Z18Rele_Abilitazione2ii+0x52>
     f74:	22 b1       	in	r18, 0x02	; 2
     f76:	01 c0       	rjmp	.+2      	; 0xf7a <_Z18Rele_Abilitazione2ii+0x3c>
     f78:	88 0f       	add	r24, r24
     f7a:	6a 95       	dec	r22
     f7c:	ea f7       	brpl	.-6      	; 0xf78 <_Z18Rele_Abilitazione2ii+0x3a>
     f7e:	82 2b       	or	r24, r18
     f80:	82 b9       	out	0x02, r24	; 2
     f82:	8f ef       	ldi	r24, 0xFF	; 255
     f84:	90 e7       	ldi	r25, 0x70	; 112
     f86:	22 e0       	ldi	r18, 0x02	; 2
     f88:	81 50       	subi	r24, 0x01	; 1
     f8a:	90 40       	sbci	r25, 0x00	; 0
     f8c:	20 40       	sbci	r18, 0x00	; 0
     f8e:	e1 f7       	brne	.-8      	; 0xf88 <_Z18Rele_Abilitazione2ii+0x4a>
     f90:	00 c0       	rjmp	.+0      	; 0xf92 <_Z18Rele_Abilitazione2ii+0x54>
     f92:	00 00       	nop
     f94:	08 95       	ret
     f96:	22 b1       	in	r18, 0x02	; 2
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	01 c0       	rjmp	.+2      	; 0xfa0 <_Z18Rele_Abilitazione2ii+0x62>
     f9e:	88 0f       	add	r24, r24
     fa0:	6a 95       	dec	r22
     fa2:	ea f7       	brpl	.-6      	; 0xf9e <_Z18Rele_Abilitazione2ii+0x60>
     fa4:	98 2f       	mov	r25, r24
     fa6:	90 95       	com	r25
     fa8:	92 23       	and	r25, r18
     faa:	92 b9       	out	0x02, r25	; 2
     fac:	3f ef       	ldi	r19, 0xFF	; 255
     fae:	45 ea       	ldi	r20, 0xA5	; 165
     fb0:	2e e0       	ldi	r18, 0x0E	; 14
     fb2:	31 50       	subi	r19, 0x01	; 1
     fb4:	40 40       	sbci	r20, 0x00	; 0
     fb6:	20 40       	sbci	r18, 0x00	; 0
     fb8:	e1 f7       	brne	.-8      	; 0xfb2 <_Z18Rele_Abilitazione2ii+0x74>
     fba:	00 c0       	rjmp	.+0      	; 0xfbc <_Z18Rele_Abilitazione2ii+0x7e>
     fbc:	00 00       	nop
     fbe:	92 b1       	in	r25, 0x02	; 2
     fc0:	89 2b       	or	r24, r25
     fc2:	82 b9       	out	0x02, r24	; 2
     fc4:	08 95       	ret

00000fc6 <_Z12Control_WIFIi>:
     fc6:	23 9a       	sbi	0x04, 3	; 4
     fc8:	2f ef       	ldi	r18, 0xFF	; 255
     fca:	36 e7       	ldi	r19, 0x76	; 118
     fcc:	41 e0       	ldi	r20, 0x01	; 1
     fce:	21 50       	subi	r18, 0x01	; 1
     fd0:	30 40       	sbci	r19, 0x00	; 0
     fd2:	40 40       	sbci	r20, 0x00	; 0
     fd4:	e1 f7       	brne	.-8      	; 0xfce <_Z12Control_WIFIi+0x8>
     fd6:	00 c0       	rjmp	.+0      	; 0xfd8 <_Z12Control_WIFIi+0x12>
     fd8:	00 00       	nop
     fda:	81 30       	cpi	r24, 0x01	; 1
     fdc:	91 05       	cpc	r25, r1
     fde:	11 f4       	brne	.+4      	; 0xfe4 <_Z12Control_WIFIi+0x1e>
     fe0:	2b 9a       	sbi	0x05, 3	; 5
     fe2:	08 95       	ret
     fe4:	89 2b       	or	r24, r25
     fe6:	09 f4       	brne	.+2      	; 0xfea <_Z12Control_WIFIi+0x24>
     fe8:	2b 98       	cbi	0x05, 3	; 5
     fea:	08 95       	ret

00000fec <_Z6Azzerav>:
     fec:	6a e3       	ldi	r22, 0x3A	; 58
     fee:	72 e0       	ldi	r23, 0x02	; 2
     ff0:	83 ea       	ldi	r24, 0xA3	; 163
     ff2:	9a e0       	ldi	r25, 0x0A	; 10
     ff4:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>
     ff8:	10 92 aa 0a 	sts	0x0AAA, r1	; 0x800aaa <impulsi+0x1>
     ffc:	10 92 a9 0a 	sts	0x0AA9, r1	; 0x800aa9 <impulsi>
    1000:	10 92 ea 0a 	sts	0x0AEA, r1	; 0x800aea <alreadyTimbrata>
    1004:	67 e7       	ldi	r22, 0x77	; 119
    1006:	75 e0       	ldi	r23, 0x05	; 5
    1008:	89 e7       	ldi	r24, 0x79	; 121
    100a:	9a e0       	ldi	r25, 0x0A	; 10
    100c:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>
    1010:	67 e0       	ldi	r22, 0x07	; 7
    1012:	70 e0       	ldi	r23, 0x00	; 0
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	57 df       	rcall	.-338    	; 0xec8 <_Z18Rele_Abilitazione1ii>
    101a:	67 e0       	ldi	r22, 0x07	; 7
    101c:	70 e0       	ldi	r23, 0x00	; 0
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	8d df       	rcall	.-230    	; 0xf3e <_Z18Rele_Abilitazione2ii>
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	ce df       	rcall	.-100    	; 0xfc6 <_Z12Control_WIFIi>
    102a:	8f e1       	ldi	r24, 0x1F	; 31
    102c:	9e e4       	ldi	r25, 0x4E	; 78
    102e:	01 97       	sbiw	r24, 0x01	; 1
    1030:	f1 f7       	brne	.-4      	; 0x102e <_Z6Azzerav+0x42>
    1032:	00 c0       	rjmp	.+0      	; 0x1034 <_Z6Azzerav+0x48>
    1034:	00 00       	nop
    1036:	83 e2       	ldi	r24, 0x23	; 35
    1038:	9a e0       	ldi	r25, 0x0A	; 10
    103a:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <_ZN14EthernetClient5flushEv>
    103e:	83 e2       	ldi	r24, 0x23	; 35
    1040:	9a e0       	ldi	r25, 0x0A	; 10
    1042:	0e 94 36 24 	call	0x486c	; 0x486c <_ZN14EthernetClient4stopEv>
    1046:	8f e1       	ldi	r24, 0x1F	; 31
    1048:	9e e4       	ldi	r25, 0x4E	; 78
    104a:	01 97       	sbiw	r24, 0x01	; 1
    104c:	f1 f7       	brne	.-4      	; 0x104a <_Z6Azzerav+0x5e>
    104e:	00 c0       	rjmp	.+0      	; 0x1050 <_Z6Azzerav+0x64>
    1050:	00 00       	nop
    1052:	80 e3       	ldi	r24, 0x30	; 48
    1054:	9a e0       	ldi	r25, 0x0A	; 10
    1056:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <_ZN14EthernetClient5flushEv>
    105a:	80 e3       	ldi	r24, 0x30	; 48
    105c:	9a e0       	ldi	r25, 0x0A	; 10
    105e:	0e 94 36 24 	call	0x486c	; 0x486c <_ZN14EthernetClient4stopEv>
    1062:	10 92 ae 0a 	sts	0x0AAE, r1	; 0x800aae <Connected+0x1>
    1066:	10 92 ad 0a 	sts	0x0AAD, r1	; 0x800aad <Connected>
    106a:	8f e1       	ldi	r24, 0x1F	; 31
    106c:	9e e4       	ldi	r25, 0x4E	; 78
    106e:	01 97       	sbiw	r24, 0x01	; 1
    1070:	f1 f7       	brne	.-4      	; 0x106e <_Z6Azzerav+0x82>
    1072:	00 c0       	rjmp	.+0      	; 0x1074 <_Z6Azzerav+0x88>
    1074:	00 00       	nop
    1076:	2c 98       	cbi	0x05, 4	; 5
    1078:	8f e1       	ldi	r24, 0x1F	; 31
    107a:	9e e4       	ldi	r25, 0x4E	; 78
    107c:	01 97       	sbiw	r24, 0x01	; 1
    107e:	f1 f7       	brne	.-4      	; 0x107c <_Z6Azzerav+0x90>
    1080:	00 c0       	rjmp	.+0      	; 0x1082 <_Z6Azzerav+0x96>
    1082:	00 00       	nop
    1084:	2c 9a       	sbi	0x05, 4	; 5
    1086:	8f e1       	ldi	r24, 0x1F	; 31
    1088:	9e e4       	ldi	r25, 0x4E	; 78
    108a:	01 97       	sbiw	r24, 0x01	; 1
    108c:	f1 f7       	brne	.-4      	; 0x108a <_Z6Azzerav+0x9e>
    108e:	00 c0       	rjmp	.+0      	; 0x1090 <_Z6Azzerav+0xa4>
    1090:	00 00       	nop
    1092:	48 d9       	rcall	.-3440   	; 0x324 <_ZL11disable_ETHv>
    1094:	8f e1       	ldi	r24, 0x1F	; 31
    1096:	9e e4       	ldi	r25, 0x4E	; 78
    1098:	01 97       	sbiw	r24, 0x01	; 1
    109a:	f1 f7       	brne	.-4      	; 0x1098 <_Z6Azzerav+0xac>
    109c:	00 c0       	rjmp	.+0      	; 0x109e <_Z6Azzerav+0xb2>
    109e:	00 00       	nop
    10a0:	44 98       	cbi	0x08, 4	; 8
    10a2:	82 b1       	in	r24, 0x02	; 2
    10a4:	82 b9       	out	0x02, r24	; 2
    10a6:	82 b1       	in	r24, 0x02	; 2
    10a8:	82 b9       	out	0x02, r24	; 2
    10aa:	6a e3       	ldi	r22, 0x3A	; 58
    10ac:	72 e0       	ldi	r23, 0x02	; 2
    10ae:	8b e5       	ldi	r24, 0x5B	; 91
    10b0:	9a e0       	ldi	r25, 0x0A	; 10
    10b2:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>
    10b6:	6a e3       	ldi	r22, 0x3A	; 58
    10b8:	72 e0       	ldi	r23, 0x02	; 2
    10ba:	81 e6       	ldi	r24, 0x61	; 97
    10bc:	9a e0       	ldi	r25, 0x0A	; 10
    10be:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>
    10c2:	6a e3       	ldi	r22, 0x3A	; 58
    10c4:	72 e0       	ldi	r23, 0x02	; 2
    10c6:	81 e6       	ldi	r24, 0x61	; 97
    10c8:	9a e0       	ldi	r25, 0x0A	; 10
    10ca:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>
    10ce:	82 ed       	ldi	r24, 0xD2	; 210
    10d0:	9a e0       	ldi	r25, 0x0A	; 10
    10d2:	0e 94 f9 2a 	call	0x55f2	; 0x55f2 <_ZN3LCD11noBacklightEv>
    10d6:	82 ed       	ldi	r24, 0xD2	; 210
    10d8:	9a e0       	ldi	r25, 0x0A	; 10
    10da:	0e 94 51 2b 	call	0x56a2	; 0x56a2 <_ZN3LCD9noDisplayEv>
    10de:	10 92 13 0a 	sts	0x0A13, r1	; 0x800a13 <secs>
    10e2:	10 92 14 0a 	sts	0x0A14, r1	; 0x800a14 <secs+0x1>
    10e6:	10 92 15 0a 	sts	0x0A15, r1	; 0x800a15 <secs+0x2>
    10ea:	10 92 16 0a 	sts	0x0A16, r1	; 0x800a16 <secs+0x3>
    10ee:	10 92 0f 0a 	sts	0x0A0F, r1	; 0x800a0f <UltimoPassaggioStato>
    10f2:	10 92 10 0a 	sts	0x0A10, r1	; 0x800a10 <UltimoPassaggioStato+0x1>
    10f6:	10 92 11 0a 	sts	0x0A11, r1	; 0x800a11 <UltimoPassaggioStato+0x2>
    10fa:	10 92 12 0a 	sts	0x0A12, r1	; 0x800a12 <UltimoPassaggioStato+0x3>
    10fe:	87 d9       	rcall	.-3314   	; 0x40e <_Z9printLinev>
    1100:	69 e7       	ldi	r22, 0x79	; 121
    1102:	75 e0       	ldi	r23, 0x05	; 5
    1104:	85 ea       	ldi	r24, 0xA5	; 165
    1106:	9c e0       	ldi	r25, 0x0C	; 12
    1108:	0e 94 00 35 	call	0x6a00	; 0x6a00 <_ZN5Print7printlnEPKc>
    110c:	80 d9       	rcall	.-3328   	; 0x40e <_Z9printLinev>
    110e:	6a e3       	ldi	r22, 0x3A	; 58
    1110:	72 e0       	ldi	r23, 0x02	; 2
    1112:	8f ef       	ldi	r24, 0xFF	; 255
    1114:	99 e0       	ldi	r25, 0x09	; 9
    1116:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>
    111a:	8e ef       	ldi	r24, 0xFE	; 254
    111c:	9f ef       	ldi	r25, 0xFF	; 255
    111e:	90 93 ac 0a 	sts	0x0AAC, r25	; 0x800aac <stato_procedura+0x1>
    1122:	80 93 ab 0a 	sts	0x0AAB, r24	; 0x800aab <stato_procedura>
    1126:	08 95       	ret

00001128 <_Z10inputTargac>:
    1128:	cf 93       	push	r28
    112a:	df 93       	push	r29
    112c:	00 d0       	rcall	.+0      	; 0x112e <_Z10inputTargac+0x6>
    112e:	00 d0       	rcall	.+0      	; 0x1130 <_Z10inputTargac+0x8>
    1130:	00 d0       	rcall	.+0      	; 0x1132 <_Z10inputTargac+0xa>
    1132:	cd b7       	in	r28, 0x3d	; 61
    1134:	de b7       	in	r29, 0x3e	; 62
    1136:	82 34       	cpi	r24, 0x42	; 66
    1138:	31 f1       	breq	.+76     	; 0x1186 <_Z10inputTargac+0x5e>
    113a:	f8 f4       	brcc	.+62     	; 0x117a <_Z10inputTargac+0x52>
    113c:	83 32       	cpi	r24, 0x23	; 35
    113e:	09 f4       	brne	.+2      	; 0x1142 <_Z10inputTargac+0x1a>
    1140:	4b c0       	rjmp	.+150    	; 0x11d8 <_Z10inputTargac+0xb0>
    1142:	81 34       	cpi	r24, 0x41	; 65
    1144:	09 f0       	breq	.+2      	; 0x1148 <_Z10inputTargac+0x20>
    1146:	61 c0       	rjmp	.+194    	; 0x120a <_Z10inputTargac+0xe2>
    1148:	6a e3       	ldi	r22, 0x3A	; 58
    114a:	72 e0       	ldi	r23, 0x02	; 2
    114c:	8f ef       	ldi	r24, 0xFF	; 255
    114e:	99 e0       	ldi	r25, 0x09	; 9
    1150:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>
    1154:	6a e8       	ldi	r22, 0x8A	; 138
    1156:	75 e0       	ldi	r23, 0x05	; 5
    1158:	8b e5       	ldi	r24, 0x5B	; 91
    115a:	9a e0       	ldi	r25, 0x0A	; 10
    115c:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>
    1160:	6a e3       	ldi	r22, 0x3A	; 58
    1162:	72 e0       	ldi	r23, 0x02	; 2
    1164:	81 e6       	ldi	r24, 0x61	; 97
    1166:	9a e0       	ldi	r25, 0x0A	; 10
    1168:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>
    116c:	6a e3       	ldi	r22, 0x3A	; 58
    116e:	72 e0       	ldi	r23, 0x02	; 2
    1170:	87 e6       	ldi	r24, 0x67	; 103
    1172:	9a e0       	ldi	r25, 0x0A	; 10
    1174:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>
    1178:	42 c0       	rjmp	.+132    	; 0x11fe <_Z10inputTargac+0xd6>
    117a:	83 34       	cpi	r24, 0x43	; 67
    117c:	99 f0       	breq	.+38     	; 0x11a4 <_Z10inputTargac+0x7c>
    117e:	8e 34       	cpi	r24, 0x4E	; 78
    1180:	09 f4       	brne	.+2      	; 0x1184 <_Z10inputTargac+0x5c>
    1182:	7d c0       	rjmp	.+250    	; 0x127e <_Z10inputTargac+0x156>
    1184:	42 c0       	rjmp	.+132    	; 0x120a <_Z10inputTargac+0xe2>
    1186:	60 e0       	ldi	r22, 0x00	; 0
    1188:	ce 01       	movw	r24, r28
    118a:	01 96       	adiw	r24, 0x01	; 1
    118c:	11 db       	rcall	.-2526   	; 0x7b0 <_Z14leggiTAG_Mezzob>
    118e:	8f e3       	ldi	r24, 0x3F	; 63
    1190:	9c e9       	ldi	r25, 0x9C	; 156
    1192:	01 97       	sbiw	r24, 0x01	; 1
    1194:	f1 f7       	brne	.-4      	; 0x1192 <_Z10inputTargac+0x6a>
    1196:	00 c0       	rjmp	.+0      	; 0x1198 <_Z10inputTargac+0x70>
    1198:	00 00       	nop
    119a:	ce 01       	movw	r24, r28
    119c:	01 96       	adiw	r24, 0x01	; 1
    119e:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
    11a2:	6d c0       	rjmp	.+218    	; 0x127e <_Z10inputTargac+0x156>
    11a4:	20 91 03 0a 	lds	r18, 0x0A03	; 0x800a03 <TARGA+0x4>
    11a8:	30 91 04 0a 	lds	r19, 0x0A04	; 0x800a04 <TARGA+0x5>
    11ac:	21 15       	cp	r18, r1
    11ae:	31 05       	cpc	r19, r1
    11b0:	09 f4       	brne	.+2      	; 0x11b4 <_Z10inputTargac+0x8c>
    11b2:	65 c0       	rjmp	.+202    	; 0x127e <_Z10inputTargac+0x156>
    11b4:	21 50       	subi	r18, 0x01	; 1
    11b6:	31 09       	sbc	r19, r1
    11b8:	40 e0       	ldi	r20, 0x00	; 0
    11ba:	50 e0       	ldi	r21, 0x00	; 0
    11bc:	6f ef       	ldi	r22, 0xFF	; 255
    11be:	79 e0       	ldi	r23, 0x09	; 9
    11c0:	ce 01       	movw	r24, r28
    11c2:	01 96       	adiw	r24, 0x01	; 1
    11c4:	0e 94 f0 39 	call	0x73e0	; 0x73e0 <_ZNK6String9substringEjj>
    11c8:	be 01       	movw	r22, r28
    11ca:	6f 5f       	subi	r22, 0xFF	; 255
    11cc:	7f 4f       	sbci	r23, 0xFF	; 255
    11ce:	8f ef       	ldi	r24, 0xFF	; 255
    11d0:	99 e0       	ldi	r25, 0x09	; 9
    11d2:	0e 94 0f 38 	call	0x701e	; 0x701e <_ZN6StringaSEOS_>
    11d6:	25 c0       	rjmp	.+74     	; 0x1222 <_Z10inputTargac+0xfa>
    11d8:	80 91 03 0a 	lds	r24, 0x0A03	; 0x800a03 <TARGA+0x4>
    11dc:	90 91 04 0a 	lds	r25, 0x0A04	; 0x800a04 <TARGA+0x5>
    11e0:	05 97       	sbiw	r24, 0x05	; 5
    11e2:	09 f0       	breq	.+2      	; 0x11e6 <_Z10inputTargac+0xbe>
    11e4:	4c c0       	rjmp	.+152    	; 0x127e <_Z10inputTargac+0x156>
    11e6:	6f ef       	ldi	r22, 0xFF	; 255
    11e8:	79 e0       	ldi	r23, 0x09	; 9
    11ea:	8a ef       	ldi	r24, 0xFA	; 250
    11ec:	9a e0       	ldi	r25, 0x0A	; 10
    11ee:	0e 94 f2 37 	call	0x6fe4	; 0x6fe4 <_ZN6StringaSERKS_>
    11f2:	6a ef       	ldi	r22, 0xFA	; 250
    11f4:	7a e0       	ldi	r23, 0x0A	; 10
    11f6:	85 e8       	ldi	r24, 0x85	; 133
    11f8:	9a e0       	ldi	r25, 0x0A	; 10
    11fa:	0e 94 f2 37 	call	0x6fe4	; 0x6fe4 <_ZN6StringaSERKS_>
    11fe:	61 e4       	ldi	r22, 0x41	; 65
    1200:	70 e0       	ldi	r23, 0x00	; 0
    1202:	80 e0       	ldi	r24, 0x00	; 0
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	a3 da       	rcall	.-2746   	; 0x74e <_Z11avanzaStatom>
    1208:	3a c0       	rjmp	.+116    	; 0x127e <_Z10inputTargac+0x156>
    120a:	68 2f       	mov	r22, r24
    120c:	ce 01       	movw	r24, r28
    120e:	01 96       	adiw	r24, 0x01	; 1
    1210:	0e 94 2f 38 	call	0x705e	; 0x705e <_ZN6StringC1Ec>
    1214:	be 01       	movw	r22, r28
    1216:	6f 5f       	subi	r22, 0xFF	; 255
    1218:	7f 4f       	sbci	r23, 0xFF	; 255
    121a:	8f ef       	ldi	r24, 0xFF	; 255
    121c:	99 e0       	ldi	r25, 0x09	; 9
    121e:	0e 94 4a 39 	call	0x7294	; 0x7294 <_ZN6String6concatERKS_>
    1222:	ce 01       	movw	r24, r28
    1224:	01 96       	adiw	r24, 0x01	; 1
    1226:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
    122a:	6d e9       	ldi	r22, 0x9D	; 157
    122c:	75 e0       	ldi	r23, 0x05	; 5
    122e:	8b e5       	ldi	r24, 0x5B	; 91
    1230:	9a e0       	ldi	r25, 0x0A	; 10
    1232:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>
    1236:	61 eb       	ldi	r22, 0xB1	; 177
    1238:	75 e0       	ldi	r23, 0x05	; 5
    123a:	ce 01       	movw	r24, r28
    123c:	01 96       	adiw	r24, 0x01	; 1
    123e:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <_ZN6StringC1EPKc>
    1242:	6f ef       	ldi	r22, 0xFF	; 255
    1244:	79 e0       	ldi	r23, 0x09	; 9
    1246:	ce 01       	movw	r24, r28
    1248:	01 96       	adiw	r24, 0x01	; 1
    124a:	0e 94 70 39 	call	0x72e0	; 0x72e0 <_ZplRK15StringSumHelperRK6String>
    124e:	bc 01       	movw	r22, r24
    1250:	81 e6       	ldi	r24, 0x61	; 97
    1252:	9a e0       	ldi	r25, 0x0A	; 10
    1254:	0e 94 f2 37 	call	0x6fe4	; 0x6fe4 <_ZN6StringaSERKS_>
    1258:	ce 01       	movw	r24, r28
    125a:	01 96       	adiw	r24, 0x01	; 1
    125c:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
    1260:	68 eb       	ldi	r22, 0xB8	; 184
    1262:	75 e0       	ldi	r23, 0x05	; 5
    1264:	87 e6       	ldi	r24, 0x67	; 103
    1266:	9a e0       	ldi	r25, 0x0A	; 10
    1268:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>
    126c:	60 91 ab 0a 	lds	r22, 0x0AAB	; 0x800aab <stato_procedura>
    1270:	70 91 ac 0a 	lds	r23, 0x0AAC	; 0x800aac <stato_procedura+0x1>
    1274:	4a e0       	ldi	r20, 0x0A	; 10
    1276:	50 e0       	ldi	r21, 0x00	; 0
    1278:	85 e5       	ldi	r24, 0x55	; 85
    127a:	9a e0       	ldi	r25, 0x0A	; 10
    127c:	2c da       	rcall	.-2984   	; 0x6d6 <_Z10displayLCDP6Stringii>
    127e:	26 96       	adiw	r28, 0x06	; 6
    1280:	0f b6       	in	r0, 0x3f	; 63
    1282:	f8 94       	cli
    1284:	de bf       	out	0x3e, r29	; 62
    1286:	0f be       	out	0x3f, r0	; 63
    1288:	cd bf       	out	0x3d, r28	; 61
    128a:	df 91       	pop	r29
    128c:	cf 91       	pop	r28
    128e:	08 95       	ret

00001290 <_Z7inputKMc>:
    1290:	cf 93       	push	r28
    1292:	df 93       	push	r29
    1294:	cd b7       	in	r28, 0x3d	; 61
    1296:	de b7       	in	r29, 0x3e	; 62
    1298:	2c 97       	sbiw	r28, 0x0c	; 12
    129a:	0f b6       	in	r0, 0x3f	; 63
    129c:	f8 94       	cli
    129e:	de bf       	out	0x3e, r29	; 62
    12a0:	0f be       	out	0x3f, r0	; 63
    12a2:	cd bf       	out	0x3d, r28	; 61
    12a4:	83 34       	cpi	r24, 0x43	; 67
    12a6:	39 f0       	breq	.+14     	; 0x12b6 <_Z7inputKMc+0x26>
    12a8:	8e 34       	cpi	r24, 0x4E	; 78
    12aa:	09 f4       	brne	.+2      	; 0x12ae <_Z7inputKMc+0x1e>
    12ac:	b8 c0       	rjmp	.+368    	; 0x141e <_Z7inputKMc+0x18e>
    12ae:	83 32       	cpi	r24, 0x23	; 35
    12b0:	09 f0       	breq	.+2      	; 0x12b4 <_Z7inputKMc+0x24>
    12b2:	7b c0       	rjmp	.+246    	; 0x13aa <_Z7inputKMc+0x11a>
    12b4:	1a c0       	rjmp	.+52     	; 0x12ea <_Z7inputKMc+0x5a>
    12b6:	20 91 fd 09 	lds	r18, 0x09FD	; 0x8009fd <KM+0x4>
    12ba:	30 91 fe 09 	lds	r19, 0x09FE	; 0x8009fe <KM+0x5>
    12be:	21 15       	cp	r18, r1
    12c0:	31 05       	cpc	r19, r1
    12c2:	09 f4       	brne	.+2      	; 0x12c6 <_Z7inputKMc+0x36>
    12c4:	82 c0       	rjmp	.+260    	; 0x13ca <_Z7inputKMc+0x13a>
    12c6:	21 50       	subi	r18, 0x01	; 1
    12c8:	31 09       	sbc	r19, r1
    12ca:	40 e0       	ldi	r20, 0x00	; 0
    12cc:	50 e0       	ldi	r21, 0x00	; 0
    12ce:	69 ef       	ldi	r22, 0xF9	; 249
    12d0:	79 e0       	ldi	r23, 0x09	; 9
    12d2:	ce 01       	movw	r24, r28
    12d4:	01 96       	adiw	r24, 0x01	; 1
    12d6:	0e 94 f0 39 	call	0x73e0	; 0x73e0 <_ZNK6String9substringEjj>
    12da:	be 01       	movw	r22, r28
    12dc:	6f 5f       	subi	r22, 0xFF	; 255
    12de:	7f 4f       	sbci	r23, 0xFF	; 255
    12e0:	89 ef       	ldi	r24, 0xF9	; 249
    12e2:	99 e0       	ldi	r25, 0x09	; 9
    12e4:	0e 94 0f 38 	call	0x701e	; 0x701e <_ZN6StringaSEOS_>
    12e8:	6c c0       	rjmp	.+216    	; 0x13c2 <_Z7inputKMc+0x132>
    12ea:	80 91 fd 09 	lds	r24, 0x09FD	; 0x8009fd <KM+0x4>
    12ee:	90 91 fe 09 	lds	r25, 0x09FE	; 0x8009fe <KM+0x5>
    12f2:	04 97       	sbiw	r24, 0x04	; 4
    12f4:	09 f0       	breq	.+2      	; 0x12f8 <_Z7inputKMc+0x68>
    12f6:	93 c0       	rjmp	.+294    	; 0x141e <_Z7inputKMc+0x18e>
    12f8:	69 ef       	ldi	r22, 0xF9	; 249
    12fa:	79 e0       	ldi	r23, 0x09	; 9
    12fc:	80 e0       	ldi	r24, 0x00	; 0
    12fe:	9b e0       	ldi	r25, 0x0B	; 11
    1300:	0e 94 f2 37 	call	0x6fe4	; 0x6fe4 <_ZN6StringaSERKS_>
    1304:	60 e0       	ldi	r22, 0x00	; 0
    1306:	7b e0       	ldi	r23, 0x0B	; 11
    1308:	87 e9       	ldi	r24, 0x97	; 151
    130a:	9a e0       	ldi	r25, 0x0A	; 10
    130c:	0e 94 f2 37 	call	0x6fe4	; 0x6fe4 <_ZN6StringaSERKS_>
    1310:	6d ee       	ldi	r22, 0xED	; 237
    1312:	75 e0       	ldi	r23, 0x05	; 5
    1314:	8b e5       	ldi	r24, 0x5B	; 91
    1316:	9a e0       	ldi	r25, 0x0A	; 10
    1318:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>
    131c:	60 91 a9 0a 	lds	r22, 0x0AA9	; 0x800aa9 <impulsi>
    1320:	70 91 aa 0a 	lds	r23, 0x0AAA	; 0x800aaa <impulsi+0x1>
    1324:	4a e0       	ldi	r20, 0x0A	; 10
    1326:	ce 01       	movw	r24, r28
    1328:	07 96       	adiw	r24, 0x07	; 7
    132a:	0e 94 71 38 	call	0x70e2	; 0x70e2 <_ZN6StringC1Eih>
    132e:	6a ef       	ldi	r22, 0xFA	; 250
    1330:	75 e0       	ldi	r23, 0x05	; 5
    1332:	ce 01       	movw	r24, r28
    1334:	01 96       	adiw	r24, 0x01	; 1
    1336:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <_ZN6StringC1EPKc>
    133a:	be 01       	movw	r22, r28
    133c:	69 5f       	subi	r22, 0xF9	; 249
    133e:	7f 4f       	sbci	r23, 0xFF	; 255
    1340:	ce 01       	movw	r24, r28
    1342:	01 96       	adiw	r24, 0x01	; 1
    1344:	0e 94 70 39 	call	0x72e0	; 0x72e0 <_ZplRK15StringSumHelperRK6String>
    1348:	bc 01       	movw	r22, r24
    134a:	81 e6       	ldi	r24, 0x61	; 97
    134c:	9a e0       	ldi	r25, 0x0A	; 10
    134e:	0e 94 f2 37 	call	0x6fe4	; 0x6fe4 <_ZN6StringaSERKS_>
    1352:	ce 01       	movw	r24, r28
    1354:	01 96       	adiw	r24, 0x01	; 1
    1356:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
    135a:	ce 01       	movw	r24, r28
    135c:	07 96       	adiw	r24, 0x07	; 7
    135e:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
    1362:	60 e0       	ldi	r22, 0x00	; 0
    1364:	76 e0       	ldi	r23, 0x06	; 6
    1366:	ce 01       	movw	r24, r28
    1368:	01 96       	adiw	r24, 0x01	; 1
    136a:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <_ZN6StringC1EPKc>
    136e:	65 eb       	ldi	r22, 0xB5	; 181
    1370:	7a e0       	ldi	r23, 0x0A	; 10
    1372:	ce 01       	movw	r24, r28
    1374:	01 96       	adiw	r24, 0x01	; 1
    1376:	0e 94 70 39 	call	0x72e0	; 0x72e0 <_ZplRK15StringSumHelperRK6String>
    137a:	bc 01       	movw	r22, r24
    137c:	87 e6       	ldi	r24, 0x67	; 103
    137e:	9a e0       	ldi	r25, 0x0A	; 10
    1380:	0e 94 f2 37 	call	0x6fe4	; 0x6fe4 <_ZN6StringaSERKS_>
    1384:	ce 01       	movw	r24, r28
    1386:	01 96       	adiw	r24, 0x01	; 1
    1388:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
    138c:	0e 94 92 01 	call	0x324	; 0x324 <_ZL11disable_ETHv>
    1390:	8f e3       	ldi	r24, 0x3F	; 63
    1392:	9f e1       	ldi	r25, 0x1F	; 31
    1394:	01 97       	sbiw	r24, 0x01	; 1
    1396:	f1 f7       	brne	.-4      	; 0x1394 <_Z7inputKMc+0x104>
    1398:	00 c0       	rjmp	.+0      	; 0x139a <_Z7inputKMc+0x10a>
    139a:	00 00       	nop
    139c:	44 98       	cbi	0x08, 4	; 8
    139e:	68 e7       	ldi	r22, 0x78	; 120
    13a0:	70 e0       	ldi	r23, 0x00	; 0
    13a2:	80 e0       	ldi	r24, 0x00	; 0
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	d3 d9       	rcall	.-3162   	; 0x74e <_Z11avanzaStatom>
    13a8:	3a c0       	rjmp	.+116    	; 0x141e <_Z7inputKMc+0x18e>
    13aa:	68 2f       	mov	r22, r24
    13ac:	ce 01       	movw	r24, r28
    13ae:	01 96       	adiw	r24, 0x01	; 1
    13b0:	0e 94 2f 38 	call	0x705e	; 0x705e <_ZN6StringC1Ec>
    13b4:	be 01       	movw	r22, r28
    13b6:	6f 5f       	subi	r22, 0xFF	; 255
    13b8:	7f 4f       	sbci	r23, 0xFF	; 255
    13ba:	89 ef       	ldi	r24, 0xF9	; 249
    13bc:	99 e0       	ldi	r25, 0x09	; 9
    13be:	0e 94 4a 39 	call	0x7294	; 0x7294 <_ZN6String6concatERKS_>
    13c2:	ce 01       	movw	r24, r28
    13c4:	01 96       	adiw	r24, 0x01	; 1
    13c6:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
    13ca:	6d ec       	ldi	r22, 0xCD	; 205
    13cc:	75 e0       	ldi	r23, 0x05	; 5
    13ce:	8b e5       	ldi	r24, 0x5B	; 91
    13d0:	9a e0       	ldi	r25, 0x0A	; 10
    13d2:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>
    13d6:	6e ed       	ldi	r22, 0xDE	; 222
    13d8:	75 e0       	ldi	r23, 0x05	; 5
    13da:	ce 01       	movw	r24, r28
    13dc:	01 96       	adiw	r24, 0x01	; 1
    13de:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <_ZN6StringC1EPKc>
    13e2:	69 ef       	ldi	r22, 0xF9	; 249
    13e4:	79 e0       	ldi	r23, 0x09	; 9
    13e6:	ce 01       	movw	r24, r28
    13e8:	01 96       	adiw	r24, 0x01	; 1
    13ea:	0e 94 70 39 	call	0x72e0	; 0x72e0 <_ZplRK15StringSumHelperRK6String>
    13ee:	bc 01       	movw	r22, r24
    13f0:	81 e6       	ldi	r24, 0x61	; 97
    13f2:	9a e0       	ldi	r25, 0x0A	; 10
    13f4:	0e 94 f2 37 	call	0x6fe4	; 0x6fe4 <_ZN6StringaSERKS_>
    13f8:	ce 01       	movw	r24, r28
    13fa:	01 96       	adiw	r24, 0x01	; 1
    13fc:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
    1400:	62 ee       	ldi	r22, 0xE2	; 226
    1402:	75 e0       	ldi	r23, 0x05	; 5
    1404:	87 e6       	ldi	r24, 0x67	; 103
    1406:	9a e0       	ldi	r25, 0x0A	; 10
    1408:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>
    140c:	60 91 ab 0a 	lds	r22, 0x0AAB	; 0x800aab <stato_procedura>
    1410:	70 91 ac 0a 	lds	r23, 0x0AAC	; 0x800aac <stato_procedura+0x1>
    1414:	4a e0       	ldi	r20, 0x0A	; 10
    1416:	50 e0       	ldi	r21, 0x00	; 0
    1418:	85 e5       	ldi	r24, 0x55	; 85
    141a:	9a e0       	ldi	r25, 0x0A	; 10
    141c:	5c d9       	rcall	.-3400   	; 0x6d6 <_Z10displayLCDP6Stringii>
    141e:	2c 96       	adiw	r28, 0x0c	; 12
    1420:	0f b6       	in	r0, 0x3f	; 63
    1422:	f8 94       	cli
    1424:	de bf       	out	0x3e, r29	; 62
    1426:	0f be       	out	0x3f, r0	; 63
    1428:	cd bf       	out	0x3d, r28	; 61
    142a:	df 91       	pop	r29
    142c:	cf 91       	pop	r28
    142e:	08 95       	ret

00001430 <_Z25read_eeprom_string_struct20ParametriCCEC_struct>:
    1430:	4f 92       	push	r4
    1432:	5f 92       	push	r5
    1434:	6f 92       	push	r6
    1436:	7f 92       	push	r7
    1438:	8f 92       	push	r8
    143a:	9f 92       	push	r9
    143c:	af 92       	push	r10
    143e:	bf 92       	push	r11
    1440:	cf 92       	push	r12
    1442:	df 92       	push	r13
    1444:	ef 92       	push	r14
    1446:	ff 92       	push	r15
    1448:	0f 93       	push	r16
    144a:	1f 93       	push	r17
    144c:	cf 93       	push	r28
    144e:	df 93       	push	r29
    1450:	00 d0       	rcall	.+0      	; 0x1452 <_Z25read_eeprom_string_struct20ParametriCCEC_struct+0x22>
    1452:	00 d0       	rcall	.+0      	; 0x1454 <_Z25read_eeprom_string_struct20ParametriCCEC_struct+0x24>
    1454:	00 d0       	rcall	.+0      	; 0x1456 <_Z25read_eeprom_string_struct20ParametriCCEC_struct+0x26>
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62
    145a:	7c 01       	movw	r14, r24
    145c:	5b 01       	movw	r10, r22
    145e:	4d b6       	in	r4, 0x3d	; 61
    1460:	5e b6       	in	r5, 0x3e	; 62
    1462:	69 e2       	ldi	r22, 0x29	; 41
    1464:	77 e0       	ldi	r23, 0x07	; 7
    1466:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <_ZN6StringC1EPKc>
    146a:	f5 01       	movw	r30, r10
    146c:	c2 84       	ldd	r12, Z+10	; 0x0a
    146e:	d3 84       	ldd	r13, Z+11	; 0x0b
    1470:	8d b7       	in	r24, 0x3d	; 61
    1472:	9e b7       	in	r25, 0x3e	; 62
    1474:	8c 19       	sub	r24, r12
    1476:	9d 09       	sbc	r25, r13
    1478:	0f b6       	in	r0, 0x3f	; 63
    147a:	f8 94       	cli
    147c:	9e bf       	out	0x3e, r25	; 62
    147e:	0f be       	out	0x3f, r0	; 63
    1480:	8d bf       	out	0x3d, r24	; 61
    1482:	ed b7       	in	r30, 0x3d	; 61
    1484:	fe b7       	in	r31, 0x3e	; 62
    1486:	31 96       	adiw	r30, 0x01	; 1
    1488:	4f 01       	movw	r8, r30
    148a:	3f 01       	movw	r6, r30
    148c:	f5 01       	movw	r30, r10
    148e:	04 85       	ldd	r16, Z+12	; 0x0c
    1490:	15 85       	ldd	r17, Z+13	; 0x0d
    1492:	c0 0e       	add	r12, r16
    1494:	d1 1e       	adc	r13, r17
    1496:	0c 15       	cp	r16, r12
    1498:	1d 05       	cpc	r17, r13
    149a:	4c f4       	brge	.+18     	; 0x14ae <_Z25read_eeprom_string_struct20ParametriCCEC_struct+0x7e>
    149c:	c8 01       	movw	r24, r16
    149e:	0e 94 1f 40 	call	0x803e	; 0x803e <eeprom_read_byte>
    14a2:	f3 01       	movw	r30, r6
    14a4:	81 93       	st	Z+, r24
    14a6:	3f 01       	movw	r6, r30
    14a8:	0f 5f       	subi	r16, 0xFF	; 255
    14aa:	1f 4f       	sbci	r17, 0xFF	; 255
    14ac:	f4 cf       	rjmp	.-24     	; 0x1496 <_Z25read_eeprom_string_struct20ParametriCCEC_struct+0x66>
    14ae:	6d e3       	ldi	r22, 0x3D	; 61
    14b0:	72 e0       	ldi	r23, 0x02	; 2
    14b2:	85 ea       	ldi	r24, 0xA5	; 165
    14b4:	9c e0       	ldi	r25, 0x0C	; 12
    14b6:	0e 94 00 35 	call	0x6a00	; 0x6a00 <_ZN5Print7printlnEPKc>
    14ba:	6d e3       	ldi	r22, 0x3D	; 61
    14bc:	72 e0       	ldi	r23, 0x02	; 2
    14be:	85 ea       	ldi	r24, 0xA5	; 165
    14c0:	9c e0       	ldi	r25, 0x0C	; 12
    14c2:	0e 94 00 35 	call	0x6a00	; 0x6a00 <_ZN5Print7printlnEPKc>
    14c6:	b4 01       	movw	r22, r8
    14c8:	ce 01       	movw	r24, r28
    14ca:	01 96       	adiw	r24, 0x01	; 1
    14cc:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <_ZN6StringC1EPKc>
    14d0:	be 01       	movw	r22, r28
    14d2:	6f 5f       	subi	r22, 0xFF	; 255
    14d4:	7f 4f       	sbci	r23, 0xFF	; 255
    14d6:	c7 01       	movw	r24, r14
    14d8:	0e 94 0f 38 	call	0x701e	; 0x701e <_ZN6StringaSEOS_>
    14dc:	ce 01       	movw	r24, r28
    14de:	01 96       	adiw	r24, 0x01	; 1
    14e0:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
    14e4:	b5 01       	movw	r22, r10
    14e6:	ce 01       	movw	r24, r28
    14e8:	01 96       	adiw	r24, 0x01	; 1
    14ea:	0e 94 07 38 	call	0x700e	; 0x700e <_ZN6StringC1ERKS_>
    14ee:	63 ea       	ldi	r22, 0xA3	; 163
    14f0:	77 e0       	ldi	r23, 0x07	; 7
    14f2:	ce 01       	movw	r24, r28
    14f4:	01 96       	adiw	r24, 0x01	; 1
    14f6:	0e 94 81 39 	call	0x7302	; 0x7302 <_ZplRK15StringSumHelperPKc>
    14fa:	bc 01       	movw	r22, r24
    14fc:	85 ea       	ldi	r24, 0xA5	; 165
    14fe:	9c e0       	ldi	r25, 0x0C	; 12
    1500:	0e 94 c7 34 	call	0x698e	; 0x698e <_ZN5Print5printERK6String>
    1504:	ce 01       	movw	r24, r28
    1506:	01 96       	adiw	r24, 0x01	; 1
    1508:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
    150c:	b7 01       	movw	r22, r14
    150e:	85 ea       	ldi	r24, 0xA5	; 165
    1510:	9c e0       	ldi	r25, 0x0C	; 12
    1512:	0e 94 f0 34 	call	0x69e0	; 0x69e0 <_ZN5Print7printlnERK6String>
    1516:	c7 01       	movw	r24, r14
    1518:	0f b6       	in	r0, 0x3f	; 63
    151a:	f8 94       	cli
    151c:	5e be       	out	0x3e, r5	; 62
    151e:	0f be       	out	0x3f, r0	; 63
    1520:	4d be       	out	0x3d, r4	; 61
    1522:	26 96       	adiw	r28, 0x06	; 6
    1524:	0f b6       	in	r0, 0x3f	; 63
    1526:	f8 94       	cli
    1528:	de bf       	out	0x3e, r29	; 62
    152a:	0f be       	out	0x3f, r0	; 63
    152c:	cd bf       	out	0x3d, r28	; 61
    152e:	df 91       	pop	r29
    1530:	cf 91       	pop	r28
    1532:	1f 91       	pop	r17
    1534:	0f 91       	pop	r16
    1536:	ff 90       	pop	r15
    1538:	ef 90       	pop	r14
    153a:	df 90       	pop	r13
    153c:	cf 90       	pop	r12
    153e:	bf 90       	pop	r11
    1540:	af 90       	pop	r10
    1542:	9f 90       	pop	r9
    1544:	8f 90       	pop	r8
    1546:	7f 90       	pop	r7
    1548:	6f 90       	pop	r6
    154a:	5f 90       	pop	r5
    154c:	4f 90       	pop	r4
    154e:	08 95       	ret

00001550 <_Z23write_erogazione_eeprom17Erogazioni_struct>:

bool write_erogazione_eeprom(Erogazioni_TypeDef dato) {
    1550:	8f 92       	push	r8
    1552:	9f 92       	push	r9
    1554:	af 92       	push	r10
    1556:	bf 92       	push	r11
    1558:	cf 92       	push	r12
    155a:	df 92       	push	r13
    155c:	ef 92       	push	r14
    155e:	ff 92       	push	r15
    1560:	0f 93       	push	r16
    1562:	1f 93       	push	r17
    1564:	cf 93       	push	r28
    1566:	df 93       	push	r29
    1568:	cd b7       	in	r28, 0x3d	; 61
    156a:	de b7       	in	r29, 0x3e	; 62
    156c:	2c 97       	sbiw	r28, 0x0c	; 12
    156e:	0f b6       	in	r0, 0x3f	; 63
    1570:	f8 94       	cli
    1572:	de bf       	out	0x3e, r29	; 62
    1574:	0f be       	out	0x3f, r0	; 63
    1576:	cd bf       	out	0x3d, r28	; 61
    1578:	5c 01       	movw	r10, r24
    i++;
  }
  Serial.println(" ");

  return true;
}
    157a:	8d b6       	in	r8, 0x3d	; 61
    157c:	9e b6       	in	r9, 0x3e	; 62
  return true;
}

bool write_erogazione_eeprom(Erogazioni_TypeDef dato) {

  int lunBuffer = dato.da_memorizzare.length();
    157e:	fc 01       	movw	r30, r24
    1580:	c4 80       	ldd	r12, Z+4	; 0x04
    1582:	d5 80       	ldd	r13, Z+5	; 0x05
  char buf[lunBuffer];
    1584:	8d b7       	in	r24, 0x3d	; 61
    1586:	9e b7       	in	r25, 0x3e	; 62
    1588:	8c 19       	sub	r24, r12
    158a:	9d 09       	sbc	r25, r13
    158c:	0f b6       	in	r0, 0x3f	; 63
    158e:	f8 94       	cli
    1590:	9e bf       	out	0x3e, r25	; 62
    1592:	0f be       	out	0x3f, r0	; 63
    1594:	8d bf       	out	0x3d, r24	; 61
    1596:	0d b7       	in	r16, 0x3d	; 61
    1598:	1e b7       	in	r17, 0x3e	; 62
    159a:	0f 5f       	subi	r16, 0xFF	; 255
    159c:	1f 4f       	sbci	r17, 0xFF	; 255
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{ getBytes((unsigned char *)buf, bufsize, index); }
    159e:	a6 01       	movw	r20, r12
    15a0:	4f 5f       	subi	r20, 0xFF	; 255
    15a2:	5f 4f       	sbci	r21, 0xFF	; 255
    15a4:	20 e0       	ldi	r18, 0x00	; 0
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	b8 01       	movw	r22, r16
    15aa:	c5 01       	movw	r24, r10
    15ac:	0e 94 c2 39 	call	0x7384	; 0x7384 <_ZNK6String8getBytesEPhjj>
  dato.da_memorizzare.toCharArray(buf, lunBuffer + 1);
  bool out = false;
  int i = 0;

  Serial.println(" len: " + String(lunBuffer));
    15b0:	4a e0       	ldi	r20, 0x0A	; 10
    15b2:	b6 01       	movw	r22, r12
    15b4:	ce 01       	movw	r24, r28
    15b6:	07 96       	adiw	r24, 0x07	; 7
    15b8:	0e 94 71 38 	call	0x70e2	; 0x70e2 <_ZN6StringC1Eih>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    15bc:	6d e0       	ldi	r22, 0x0D	; 13
    15be:	76 e0       	ldi	r23, 0x06	; 6
    15c0:	ce 01       	movw	r24, r28
    15c2:	01 96       	adiw	r24, 0x01	; 1
    15c4:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <_ZN6StringC1EPKc>
    15c8:	be 01       	movw	r22, r28
    15ca:	69 5f       	subi	r22, 0xF9	; 249
    15cc:	7f 4f       	sbci	r23, 0xFF	; 255
    15ce:	ce 01       	movw	r24, r28
    15d0:	01 96       	adiw	r24, 0x01	; 1
    15d2:	0e 94 70 39 	call	0x72e0	; 0x72e0 <_ZplRK15StringSumHelperRK6String>
    15d6:	bc 01       	movw	r22, r24
    15d8:	85 ea       	ldi	r24, 0xA5	; 165
    15da:	9c e0       	ldi	r25, 0x0C	; 12
    15dc:	0e 94 f0 34 	call	0x69e0	; 0x69e0 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    15e0:	ce 01       	movw	r24, r28
    15e2:	01 96       	adiw	r24, 0x01	; 1
    15e4:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
    15e8:	ce 01       	movw	r24, r28
    15ea:	07 96       	adiw	r24, 0x07	; 7
    15ec:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
  Serial.println("Eseguo scrittura nella EEPROM");
    15f0:	64 e1       	ldi	r22, 0x14	; 20
    15f2:	76 e0       	ldi	r23, 0x06	; 6
    15f4:	85 ea       	ldi	r24, 0xA5	; 165
    15f6:	9c e0       	ldi	r25, 0x0C	; 12
    15f8:	0e 94 00 35 	call	0x6a00	; 0x6a00 <_ZN5Print7printlnEPKc>
  Serial.println(" ");
    15fc:	6d e3       	ldi	r22, 0x3D	; 61
    15fe:	72 e0       	ldi	r23, 0x02	; 2
    1600:	85 ea       	ldi	r24, 0xA5	; 165
    1602:	9c e0       	ldi	r25, 0x0C	; 12
    1604:	0e 94 00 35 	call	0x6a00	; 0x6a00 <_ZN5Print7printlnEPKc>

  for (int ind = dato.startIND ; ind < (dato.startIND + lunBuffer); ind++) {
    1608:	f5 01       	movw	r30, r10
    160a:	e6 80       	ldd	r14, Z+6	; 0x06
    160c:	f7 80       	ldd	r15, Z+7	; 0x07
    160e:	f5 01       	movw	r30, r10
    1610:	86 81       	ldd	r24, Z+6	; 0x06
    1612:	97 81       	ldd	r25, Z+7	; 0x07
    1614:	8c 0d       	add	r24, r12
    1616:	9d 1d       	adc	r25, r13
    1618:	e8 16       	cp	r14, r24
    161a:	f9 06       	cpc	r15, r25
    161c:	64 f4       	brge	.+24     	; 0x1636 <_Z23write_erogazione_eeprom17Erogazioni_struct+0xe6>
    if (buf[i] != 0) {
    161e:	f8 01       	movw	r30, r16
    1620:	61 91       	ld	r22, Z+
    1622:	8f 01       	movw	r16, r30
    1624:	66 23       	and	r22, r22
    1626:	19 f0       	breq	.+6      	; 0x162e <_Z23write_erogazione_eeprom17Erogazioni_struct+0xde>
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator uint8_t() const             { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    1628:	c7 01       	movw	r24, r14
    162a:	0e 94 27 40 	call	0x804e	; 0x804e <eeprom_write_byte>

  Serial.println(" len: " + String(lunBuffer));
  Serial.println("Eseguo scrittura nella EEPROM");
  Serial.println(" ");

  for (int ind = dato.startIND ; ind < (dato.startIND + lunBuffer); ind++) {
    162e:	ff ef       	ldi	r31, 0xFF	; 255
    1630:	ef 1a       	sub	r14, r31
    1632:	ff 0a       	sbc	r15, r31
    1634:	ec cf       	rjmp	.-40     	; 0x160e <_Z23write_erogazione_eeprom17Erogazioni_struct+0xbe>
      EEPROM.write(ind, buf[i]);
      //Serial.print(" " + String(buf[i]));
    }
    i++;
  }
  Serial.println(" ");
    1636:	6d e3       	ldi	r22, 0x3D	; 61
    1638:	72 e0       	ldi	r23, 0x02	; 2
    163a:	85 ea       	ldi	r24, 0xA5	; 165
    163c:	9c e0       	ldi	r25, 0x0C	; 12
    163e:	0e 94 00 35 	call	0x6a00	; 0x6a00 <_ZN5Print7printlnEPKc>

  return true;
}
    1642:	81 e0       	ldi	r24, 0x01	; 1
    1644:	0f b6       	in	r0, 0x3f	; 63
    1646:	f8 94       	cli
    1648:	9e be       	out	0x3e, r9	; 62
    164a:	0f be       	out	0x3f, r0	; 63
    164c:	8d be       	out	0x3d, r8	; 61
    164e:	2c 96       	adiw	r28, 0x0c	; 12
    1650:	0f b6       	in	r0, 0x3f	; 63
    1652:	f8 94       	cli
    1654:	de bf       	out	0x3e, r29	; 62
    1656:	0f be       	out	0x3f, r0	; 63
    1658:	cd bf       	out	0x3d, r28	; 61
    165a:	df 91       	pop	r29
    165c:	cf 91       	pop	r28
    165e:	1f 91       	pop	r17
    1660:	0f 91       	pop	r16
    1662:	ff 90       	pop	r15
    1664:	ef 90       	pop	r14
    1666:	df 90       	pop	r13
    1668:	cf 90       	pop	r12
    166a:	bf 90       	pop	r11
    166c:	af 90       	pop	r10
    166e:	9f 90       	pop	r9
    1670:	8f 90       	pop	r8
    1672:	08 95       	ret

00001674 <_Z22read_erogazione_eeprom17Erogazioni_struct>:

String read_erogazione_eeprom(Erogazioni_TypeDef dato) {
    1674:	6f 92       	push	r6
    1676:	7f 92       	push	r7
    1678:	8f 92       	push	r8
    167a:	9f 92       	push	r9
    167c:	af 92       	push	r10
    167e:	bf 92       	push	r11
    1680:	cf 92       	push	r12
    1682:	df 92       	push	r13
    1684:	ef 92       	push	r14
    1686:	ff 92       	push	r15
    1688:	0f 93       	push	r16
    168a:	1f 93       	push	r17
    168c:	cf 93       	push	r28
    168e:	df 93       	push	r29
    1690:	00 d0       	rcall	.+0      	; 0x1692 <_Z22read_erogazione_eeprom17Erogazioni_struct+0x1e>
    1692:	00 d0       	rcall	.+0      	; 0x1694 <_Z22read_erogazione_eeprom17Erogazioni_struct+0x20>
    1694:	00 d0       	rcall	.+0      	; 0x1696 <_Z22read_erogazione_eeprom17Erogazioni_struct+0x22>
    1696:	cd b7       	in	r28, 0x3d	; 61
    1698:	de b7       	in	r29, 0x3e	; 62
    169a:	7c 01       	movw	r14, r24
    169c:	8b 01       	movw	r16, r22
  Serial.println(" ");
  Serial.println(" ");
  Salvata = String((char *)buf);
  Serial.println(Salvata);
  return Salvata;
}
    169e:	6d b6       	in	r6, 0x3d	; 61
    16a0:	7e b6       	in	r7, 0x3e	; 62
  return true;
}

String read_erogazione_eeprom(Erogazioni_TypeDef dato) {

  String Salvata = "OK";
    16a2:	69 e2       	ldi	r22, 0x29	; 41
    16a4:	77 e0       	ldi	r23, 0x07	; 7
    16a6:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <_ZN6StringC1EPKc>
  int lunBuffer = dato.da_memorizzare.length();
    16aa:	f8 01       	movw	r30, r16
    16ac:	c4 80       	ldd	r12, Z+4	; 0x04
    16ae:	d5 80       	ldd	r13, Z+5	; 0x05
  uint8_t buf[lunBuffer];
    16b0:	8d b7       	in	r24, 0x3d	; 61
    16b2:	9e b7       	in	r25, 0x3e	; 62
    16b4:	8c 19       	sub	r24, r12
    16b6:	9d 09       	sbc	r25, r13
    16b8:	0f b6       	in	r0, 0x3f	; 63
    16ba:	f8 94       	cli
    16bc:	9e bf       	out	0x3e, r25	; 62
    16be:	0f be       	out	0x3f, r0	; 63
    16c0:	8d bf       	out	0x3d, r24	; 61
    16c2:	ed b7       	in	r30, 0x3d	; 61
    16c4:	fe b7       	in	r31, 0x3e	; 62
    16c6:	31 96       	adiw	r30, 0x01	; 1
    16c8:	5f 01       	movw	r10, r30
    16ca:	4f 01       	movw	r8, r30
  int i = 0;

  for (int ind = dato.startIND ; ind < (dato.startIND + lunBuffer); ind++) {
    16cc:	f8 01       	movw	r30, r16
    16ce:	06 81       	ldd	r16, Z+6	; 0x06
    16d0:	17 81       	ldd	r17, Z+7	; 0x07
    16d2:	c0 0e       	add	r12, r16
    16d4:	d1 1e       	adc	r13, r17
    16d6:	0c 15       	cp	r16, r12
    16d8:	1d 05       	cpc	r17, r13
    16da:	4c f4       	brge	.+18     	; 0x16ee <_Z22read_erogazione_eeprom17Erogazioni_struct+0x7a>

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    16dc:	c8 01       	movw	r24, r16
    16de:	0e 94 1f 40 	call	0x803e	; 0x803e <eeprom_read_byte>
    buf[i] = EEPROM.read(ind);
    16e2:	f4 01       	movw	r30, r8
    16e4:	81 93       	st	Z+, r24
    16e6:	4f 01       	movw	r8, r30
  String Salvata = "OK";
  int lunBuffer = dato.da_memorizzare.length();
  uint8_t buf[lunBuffer];
  int i = 0;

  for (int ind = dato.startIND ; ind < (dato.startIND + lunBuffer); ind++) {
    16e8:	0f 5f       	subi	r16, 0xFF	; 255
    16ea:	1f 4f       	sbci	r17, 0xFF	; 255
    16ec:	f4 cf       	rjmp	.-24     	; 0x16d6 <_Z22read_erogazione_eeprom17Erogazioni_struct+0x62>
    //  Serial.print(" " +  String(buf[i]));
    // }
    i++;
  }

  Serial.println(" ");
    16ee:	6d e3       	ldi	r22, 0x3D	; 61
    16f0:	72 e0       	ldi	r23, 0x02	; 2
    16f2:	85 ea       	ldi	r24, 0xA5	; 165
    16f4:	9c e0       	ldi	r25, 0x0C	; 12
    16f6:	0e 94 00 35 	call	0x6a00	; 0x6a00 <_ZN5Print7printlnEPKc>
  Serial.println(" ");
    16fa:	6d e3       	ldi	r22, 0x3D	; 61
    16fc:	72 e0       	ldi	r23, 0x02	; 2
    16fe:	85 ea       	ldi	r24, 0xA5	; 165
    1700:	9c e0       	ldi	r25, 0x0C	; 12
    1702:	0e 94 00 35 	call	0x6a00	; 0x6a00 <_ZN5Print7printlnEPKc>
  Salvata = String((char *)buf);
    1706:	b5 01       	movw	r22, r10
    1708:	ce 01       	movw	r24, r28
    170a:	01 96       	adiw	r24, 0x01	; 1
    170c:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <_ZN6StringC1EPKc>
    1710:	be 01       	movw	r22, r28
    1712:	6f 5f       	subi	r22, 0xFF	; 255
    1714:	7f 4f       	sbci	r23, 0xFF	; 255
    1716:	c7 01       	movw	r24, r14
    1718:	0e 94 0f 38 	call	0x701e	; 0x701e <_ZN6StringaSEOS_>
    171c:	ce 01       	movw	r24, r28
    171e:	01 96       	adiw	r24, 0x01	; 1
    1720:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
  Serial.println(Salvata);
    1724:	b7 01       	movw	r22, r14
    1726:	85 ea       	ldi	r24, 0xA5	; 165
    1728:	9c e0       	ldi	r25, 0x0C	; 12
    172a:	0e 94 f0 34 	call	0x69e0	; 0x69e0 <_ZN5Print7printlnERK6String>
  return Salvata;
}
    172e:	c7 01       	movw	r24, r14
    1730:	0f b6       	in	r0, 0x3f	; 63
    1732:	f8 94       	cli
    1734:	7e be       	out	0x3e, r7	; 62
    1736:	0f be       	out	0x3f, r0	; 63
    1738:	6d be       	out	0x3d, r6	; 61
    173a:	26 96       	adiw	r28, 0x06	; 6
    173c:	0f b6       	in	r0, 0x3f	; 63
    173e:	f8 94       	cli
    1740:	de bf       	out	0x3e, r29	; 62
    1742:	0f be       	out	0x3f, r0	; 63
    1744:	cd bf       	out	0x3d, r28	; 61
    1746:	df 91       	pop	r29
    1748:	cf 91       	pop	r28
    174a:	1f 91       	pop	r17
    174c:	0f 91       	pop	r16
    174e:	ff 90       	pop	r15
    1750:	ef 90       	pop	r14
    1752:	df 90       	pop	r13
    1754:	cf 90       	pop	r12
    1756:	bf 90       	pop	r11
    1758:	af 90       	pop	r10
    175a:	9f 90       	pop	r9
    175c:	8f 90       	pop	r8
    175e:	7f 90       	pop	r7
    1760:	6f 90       	pop	r6
    1762:	08 95       	ret

00001764 <loop>:

/**************************LOOP PROCEDURA************************************/
void loop() {
    1764:	cf 92       	push	r12
    1766:	df 92       	push	r13
    1768:	ef 92       	push	r14
    176a:	ff 92       	push	r15
    176c:	0f 93       	push	r16
    176e:	1f 93       	push	r17
    1770:	cf 93       	push	r28
    1772:	df 93       	push	r29
    1774:	cd b7       	in	r28, 0x3d	; 61
    1776:	de b7       	in	r29, 0x3e	; 62
    1778:	6d 97       	sbiw	r28, 0x1d	; 29
    177a:	0f b6       	in	r0, 0x3f	; 63
    177c:	f8 94       	cli
    177e:	de bf       	out	0x3e, r29	; 62
    1780:	0f be       	out	0x3f, r0	; 63
    1782:	cd bf       	out	0x3d, r28	; 61

  switch (stato_procedura) {
    1784:	e0 91 ab 0a 	lds	r30, 0x0AAB	; 0x800aab <stato_procedura>
    1788:	f0 91 ac 0a 	lds	r31, 0x0AAC	; 0x800aac <stato_procedura+0x1>
    178c:	32 96       	adiw	r30, 0x02	; 2
    178e:	ec 30       	cpi	r30, 0x0C	; 12
    1790:	f1 05       	cpc	r31, r1
    1792:	08 f0       	brcs	.+2      	; 0x1796 <loop+0x32>
    1794:	d4 c5       	rjmp	.+2984   	; 0x233e <loop+0xbda>
    1796:	ea 5b       	subi	r30, 0xBA	; 186
    1798:	ff 4f       	sbci	r31, 0xFF	; 255
    179a:	0c 94 cf 3a 	jmp	0x759e	; 0x759e <__tablejump2__>
    case -2:
      { //cli(); // disable interrupt

        righeDisplay[1] =  "";
    179e:	6a e3       	ldi	r22, 0x3A	; 58
    17a0:	72 e0       	ldi	r23, 0x02	; 2
    17a2:	8b e5       	ldi	r24, 0x5B	; 91
    17a4:	9a e0       	ldi	r25, 0x0A	; 10
    17a6:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>
        righeDisplay[2] = "Setting....";
    17aa:	62 e3       	ldi	r22, 0x32	; 50
    17ac:	76 e0       	ldi	r23, 0x06	; 6
    17ae:	81 e6       	ldi	r24, 0x61	; 97
    17b0:	9a e0       	ldi	r25, 0x0A	; 10
    17b2:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>
        righeDisplay[3] =  "";
    17b6:	6a e3       	ldi	r22, 0x3A	; 58
    17b8:	72 e0       	ldi	r23, 0x02	; 2
    17ba:	87 e6       	ldi	r24, 0x67	; 103
    17bc:	9a e0       	ldi	r25, 0x0A	; 10
    17be:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>

        displayLCD(righeDisplay, stato_procedura, 100);
    17c2:	60 91 ab 0a 	lds	r22, 0x0AAB	; 0x800aab <stato_procedura>
    17c6:	70 91 ac 0a 	lds	r23, 0x0AAC	; 0x800aac <stato_procedura+0x1>
    17ca:	44 e6       	ldi	r20, 0x64	; 100
    17cc:	50 e0       	ldi	r21, 0x00	; 0
    17ce:	85 e5       	ldi	r24, 0x55	; 85
    17d0:	9a e0       	ldi	r25, 0x0A	; 10
    17d2:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_Z10displayLCDP6Stringii>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    17d6:	2f ef       	ldi	r18, 0xFF	; 255
    17d8:	33 ec       	ldi	r19, 0xC3	; 195
    17da:	89 e0       	ldi	r24, 0x09	; 9
    17dc:	21 50       	subi	r18, 0x01	; 1
    17de:	30 40       	sbci	r19, 0x00	; 0
    17e0:	80 40       	sbci	r24, 0x00	; 0
    17e2:	e1 f7       	brne	.-8      	; 0x17dc <loop+0x78>
    17e4:	00 c0       	rjmp	.+0      	; 0x17e6 <loop+0x82>
    17e6:	00 00       	nop
    17e8:	0b c0       	rjmp	.+22     	; 0x1800 <loop+0x9c>
        stato_procedura++;
      }
      break;
    case -1:
      {
        abilitaPulsanti();
    17ea:	28 db       	rcall	.-2480   	; 0xe3c <_Z15abilitaPulsantiv>
    17ec:	9f ef       	ldi	r25, 0xFF	; 255
    17ee:	e9 ef       	ldi	r30, 0xF9	; 249
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	91 50       	subi	r25, 0x01	; 1
    17f4:	e0 40       	sbci	r30, 0x00	; 0
    17f6:	f0 40       	sbci	r31, 0x00	; 0
    17f8:	e1 f7       	brne	.-8      	; 0x17f2 <loop+0x8e>
    17fa:	00 c0       	rjmp	.+0      	; 0x17fc <loop+0x98>
        _delay_ms(20);
        abilitaContattiPistola();
    17fc:	00 00       	nop
    17fe:	28 db       	rcall	.-2480   	; 0xe50 <_Z22abilitaContattiPistolav>
        stato_procedura++;
    1800:	80 91 ab 0a 	lds	r24, 0x0AAB	; 0x800aab <stato_procedura>
    1804:	90 91 ac 0a 	lds	r25, 0x0AAC	; 0x800aac <stato_procedura+0x1>
    1808:	01 96       	adiw	r24, 0x01	; 1
    180a:	90 93 ac 0a 	sts	0x0AAC, r25	; 0x800aac <stato_procedura+0x1>
    180e:	80 93 ab 0a 	sts	0x0AAB, r24	; 0x800aab <stato_procedura>
      }
      break;
    1812:	95 c5       	rjmp	.+2858   	; 0x233e <loop+0xbda>
    case 0:
      {
        righeDisplay[1] =  "";
    1814:	6a e3       	ldi	r22, 0x3A	; 58
    1816:	72 e0       	ldi	r23, 0x02	; 2
    1818:	8b e5       	ldi	r24, 0x5B	; 91
    181a:	9a e0       	ldi	r25, 0x0A	; 10
    181c:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>
        righeDisplay[2] =  "";
    1820:	6a e3       	ldi	r22, 0x3A	; 58
    1822:	72 e0       	ldi	r23, 0x02	; 2
    1824:	81 e6       	ldi	r24, 0x61	; 97
    1826:	9a e0       	ldi	r25, 0x0A	; 10
    1828:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>
        righeDisplay[3] =  "";
    182c:	6a e3       	ldi	r22, 0x3A	; 58
    182e:	72 e0       	ldi	r23, 0x02	; 2
    1830:	87 e6       	ldi	r24, 0x67	; 103
    1832:	9a e0       	ldi	r25, 0x0A	; 10
    1834:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>
    1838:	2f ef       	ldi	r18, 0xFF	; 255
    183a:	37 ea       	ldi	r19, 0xA7	; 167
    183c:	81 e6       	ldi	r24, 0x61	; 97
    183e:	21 50       	subi	r18, 0x01	; 1
    1840:	30 40       	sbci	r19, 0x00	; 0
    1842:	80 40       	sbci	r24, 0x00	; 0
    1844:	e1 f7       	brne	.-8      	; 0x183e <loop+0xda>
    1846:	00 c0       	rjmp	.+0      	; 0x1848 <loop+0xe4>
    1848:	00 00       	nop

        //displayLCD(righeDisplay,stato_procedura,100);
        _delay_ms(2000);
        alreadyTimbrata = false;
    184a:	10 92 ea 0a 	sts	0x0AEA, r1	; 0x800aea <alreadyTimbrata>
}
static inline void initSS_ETH()    {
  DDRC |= (1 << PC4);  // set DDRC bit 4, sets PC4 for output
}
static inline void enable_ETH()    {
  PORTC &= ~(1 << PC4);  // Set 0 Bit 4 PORTC Register
    184e:	44 98       	cbi	0x08, 4	; 8
        alreadyTimbrata = false;

        enable_ETH();

        /************************************************/
        righeDisplay[1] = " * AUTENTICAZIONE *";
    1850:	6e e3       	ldi	r22, 0x3E	; 62
    1852:	76 e0       	ldi	r23, 0x06	; 6
    1854:	8b e5       	ldi	r24, 0x5B	; 91
    1856:	9a e0       	ldi	r25, 0x0A	; 10
    1858:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>
        righeDisplay[2] = "";
    185c:	6a e3       	ldi	r22, 0x3A	; 58
    185e:	72 e0       	ldi	r23, 0x02	; 2
    1860:	81 e6       	ldi	r24, 0x61	; 97
    1862:	9a e0       	ldi	r25, 0x0A	; 10
    1864:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>
        righeDisplay[3] = "    Avvicina ATE  ";
    1868:	62 e5       	ldi	r22, 0x52	; 82
    186a:	76 e0       	ldi	r23, 0x06	; 6
    186c:	87 e6       	ldi	r24, 0x67	; 103
    186e:	9a e0       	ldi	r25, 0x0A	; 10
    1870:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>

        displayLCD(righeDisplay, stato_procedura, 100);
    1874:	60 91 ab 0a 	lds	r22, 0x0AAB	; 0x800aab <stato_procedura>
    1878:	70 91 ac 0a 	lds	r23, 0x0AAC	; 0x800aac <stato_procedura+0x1>
    187c:	44 e6       	ldi	r20, 0x64	; 100
    187e:	50 e0       	ldi	r21, 0x00	; 0
    1880:	85 e5       	ldi	r24, 0x55	; 85
    1882:	9a e0       	ldi	r25, 0x0A	; 10
    1884:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_Z10displayLCDP6Stringii>
        /************************************************/

        TinputTarga = 65;
    1888:	81 e4       	ldi	r24, 0x41	; 65
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	a0 e0       	ldi	r26, 0x00	; 0
    188e:	b0 e0       	ldi	r27, 0x00	; 0
    1890:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <TinputTarga>
    1894:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <TinputTarga+0x1>
    1898:	a0 93 24 01 	sts	0x0124, r26	; 0x800124 <TinputTarga+0x2>
    189c:	b0 93 25 01 	sts	0x0125, r27	; 0x800125 <TinputTarga+0x3>
        stato_procedura++;
    18a0:	80 91 ab 0a 	lds	r24, 0x0AAB	; 0x800aab <stato_procedura>
    18a4:	90 91 ac 0a 	lds	r25, 0x0AAC	; 0x800aac <stato_procedura+0x1>
    18a8:	01 96       	adiw	r24, 0x01	; 1
    18aa:	90 93 ac 0a 	sts	0x0AAC, r25	; 0x800aac <stato_procedura+0x1>
    18ae:	80 93 ab 0a 	sts	0x0AAB, r24	; 0x800aab <stato_procedura>
    18b2:	9f ef       	ldi	r25, 0xFF	; 255
    18b4:	e3 ed       	ldi	r30, 0xD3	; 211
    18b6:	f0 e3       	ldi	r31, 0x30	; 48
    18b8:	91 50       	subi	r25, 0x01	; 1
    18ba:	e0 40       	sbci	r30, 0x00	; 0
    18bc:	f0 40       	sbci	r31, 0x00	; 0
    18be:	e1 f7       	brne	.-8      	; 0x18b8 <loop+0x154>
    18c0:	00 c0       	rjmp	.+0      	; 0x18c2 <loop+0x15e>
    18c2:	00 00       	nop
    18c4:	3c c5       	rjmp	.+2680   	; 0x233e <loop+0xbda>
        _delay_ms(1000);
      }
      break;
    case 1:
      {
        TARGA = "";
    18c6:	6a e3       	ldi	r22, 0x3A	; 58
    18c8:	72 e0       	ldi	r23, 0x02	; 2
    18ca:	8f ef       	ldi	r24, 0xFF	; 255
    18cc:	99 e0       	ldi	r25, 0x09	; 9
    18ce:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>
        KM = "";
    18d2:	6a e3       	ldi	r22, 0x3A	; 58
    18d4:	72 e0       	ldi	r23, 0x02	; 2
    18d6:	89 ef       	ldi	r24, 0xF9	; 249
    18d8:	99 e0       	ldi	r25, 0x09	; 9
    18da:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>
          _delay_ms(10);
          avanzaStato(TinputTarga);
          /*****************************************/

        /*****************************************************/
        String ATe = "ERRORE";
    18de:	69 e6       	ldi	r22, 0x69	; 105
    18e0:	72 e0       	ldi	r23, 0x02	; 2
    18e2:	ce 01       	movw	r24, r28
    18e4:	0e 96       	adiw	r24, 0x0e	; 14
    18e6:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <_ZN6StringC1EPKc>
        if (!alreadyTimbrata) {
    18ea:	80 91 ea 0a 	lds	r24, 0x0AEA	; 0x800aea <alreadyTimbrata>
    18ee:	81 11       	cpse	r24, r1
    18f0:	15 c0       	rjmp	.+42     	; 0x191c <loop+0x1b8>
          ATe = GetCodeRfidATe();
    18f2:	ce 01       	movw	r24, r28
    18f4:	01 96       	adiw	r24, 0x01	; 1
    18f6:	3f d8       	rcall	.-3970   	; 0x976 <_Z14GetCodeRfidATev>
    18f8:	be 01       	movw	r22, r28
    18fa:	6f 5f       	subi	r22, 0xFF	; 255
    18fc:	7f 4f       	sbci	r23, 0xFF	; 255
    18fe:	ce 01       	movw	r24, r28
    1900:	0e 96       	adiw	r24, 0x0e	; 14
    1902:	0e 94 0f 38 	call	0x701e	; 0x701e <_ZN6StringaSEOS_>
    1906:	ce 01       	movw	r24, r28
    1908:	01 96       	adiw	r24, 0x01	; 1
    190a:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
          Buzzer(2, 100);
    190e:	44 e6       	ldi	r20, 0x64	; 100
    1910:	50 e0       	ldi	r21, 0x00	; 0
    1912:	60 e0       	ldi	r22, 0x00	; 0
    1914:	70 e0       	ldi	r23, 0x00	; 0
    1916:	82 e0       	ldi	r24, 0x02	; 2
    1918:	0e 94 67 02 	call	0x4ce	; 0x4ce <_Z6Buzzerhm>
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
    191c:	69 e6       	ldi	r22, 0x69	; 105
    191e:	72 e0       	ldi	r23, 0x02	; 2
    1920:	ce 01       	movw	r24, r28
    1922:	0e 96       	adiw	r24, 0x0e	; 14
    1924:	0e 94 a4 39 	call	0x7348	; 0x7348 <_ZNK6String6equalsEPKc>
        }

        if ((ATe != "ERRORE") && (BIT_IS_CLEAR(PORTC, 4)))
    1928:	81 11       	cpse	r24, r1
    192a:	02 c0       	rjmp	.+4      	; 0x1930 <loop+0x1cc>
    192c:	44 9b       	sbis	0x08, 4	; 8
    192e:	46 c5       	rjmp	.+2700   	; 0x23bc <loop+0xc58>
          _delay_ms(1000); // tempo per inizializzare la ethernet
        }

        // Effettua chiamata REST per validare CARD NFC

        righeDisplay[1] =  "****** TARGA ******";
    1930:	6d e9       	ldi	r22, 0x9D	; 157
    1932:	75 e0       	ldi	r23, 0x05	; 5
    1934:	8b e5       	ldi	r24, 0x5B	; 91
    1936:	9a e0       	ldi	r25, 0x0A	; 10
    1938:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>
        righeDisplay[2] = "TARGA:";
    193c:	61 eb       	ldi	r22, 0xB1	; 177
    193e:	75 e0       	ldi	r23, 0x05	; 5
    1940:	81 e6       	ldi	r24, 0x61	; 97
    1942:	9a e0       	ldi	r25, 0x0A	; 10
    1944:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>
        righeDisplay[3] = "#:Conferma A:Avanti";
    1948:	65 e6       	ldi	r22, 0x65	; 101
    194a:	76 e0       	ldi	r23, 0x06	; 6
    194c:	87 e6       	ldi	r24, 0x67	; 103
    194e:	9a e0       	ldi	r25, 0x0A	; 10
    1950:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>

        avanzaStato(65);
    1954:	61 e4       	ldi	r22, 0x41	; 65
    1956:	70 e0       	ldi	r23, 0x00	; 0
    1958:	80 e0       	ldi	r24, 0x00	; 0
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	db c5       	rjmp	.+2998   	; 0x2514 <loop+0xdb0>
        */
      }
      break;
    case 2:
      {
        lcd.setCursor(0, 0);
    195e:	40 e0       	ldi	r20, 0x00	; 0
    1960:	60 e0       	ldi	r22, 0x00	; 0
    1962:	82 ed       	ldi	r24, 0xD2	; 210
    1964:	9a e0       	ldi	r25, 0x0A	; 10
    1966:	0e 94 0f 2b 	call	0x561e	; 0x561e <_ZN3LCD9setCursorEhh>
        lcd.print((char)1);  // STAMPA LA CLESSIDRA
    196a:	61 e0       	ldi	r22, 0x01	; 1
    196c:	82 ed       	ldi	r24, 0xD2	; 210
    196e:	9a e0       	ldi	r25, 0x0A	; 10
    1970:	0e 94 d6 34 	call	0x69ac	; 0x69ac <_ZN5Print5printEc>
        lcd.print("Tempo: " + String((UltimoPassaggioStato + Timer - secs - 1)) + " sec ");
    1974:	40 91 0f 0a 	lds	r20, 0x0A0F	; 0x800a0f <UltimoPassaggioStato>
    1978:	50 91 10 0a 	lds	r21, 0x0A10	; 0x800a10 <UltimoPassaggioStato+0x1>
    197c:	60 91 11 0a 	lds	r22, 0x0A11	; 0x800a11 <UltimoPassaggioStato+0x2>
    1980:	70 91 12 0a 	lds	r23, 0x0A12	; 0x800a12 <UltimoPassaggioStato+0x3>
    1984:	80 91 0b 0a 	lds	r24, 0x0A0B	; 0x800a0b <Timer>
    1988:	90 91 0c 0a 	lds	r25, 0x0A0C	; 0x800a0c <Timer+0x1>
    198c:	a0 91 0d 0a 	lds	r26, 0x0A0D	; 0x800a0d <Timer+0x2>
    1990:	b0 91 0e 0a 	lds	r27, 0x0A0E	; 0x800a0e <Timer+0x3>
    1994:	48 0f       	add	r20, r24
    1996:	59 1f       	adc	r21, r25
    1998:	6a 1f       	adc	r22, r26
    199a:	7b 1f       	adc	r23, r27
    199c:	41 50       	subi	r20, 0x01	; 1
    199e:	51 09       	sbc	r21, r1
    19a0:	61 09       	sbc	r22, r1
    19a2:	71 09       	sbc	r23, r1
    19a4:	80 91 13 0a 	lds	r24, 0x0A13	; 0x800a13 <secs>
    19a8:	90 91 14 0a 	lds	r25, 0x0A14	; 0x800a14 <secs+0x1>
    19ac:	a0 91 15 0a 	lds	r26, 0x0A15	; 0x800a15 <secs+0x2>
    19b0:	b0 91 16 0a 	lds	r27, 0x0A16	; 0x800a16 <secs+0x3>
    19b4:	48 1b       	sub	r20, r24
    19b6:	59 0b       	sbc	r21, r25
    19b8:	6a 0b       	sbc	r22, r26
    19ba:	7b 0b       	sbc	r23, r27
    19bc:	2a e0       	ldi	r18, 0x0A	; 10
    19be:	ce 01       	movw	r24, r28
    19c0:	0e 96       	adiw	r24, 0x0e	; 14
    19c2:	0e 94 c5 38 	call	0x718a	; 0x718a <_ZN6StringC1Emh>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    19c6:	6b ed       	ldi	r22, 0xDB	; 219
    19c8:	76 e0       	ldi	r23, 0x06	; 6
    19ca:	ce 01       	movw	r24, r28
    19cc:	01 96       	adiw	r24, 0x01	; 1
    19ce:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <_ZN6StringC1EPKc>
    19d2:	be 01       	movw	r22, r28
    19d4:	62 5f       	subi	r22, 0xF2	; 242
    19d6:	7f 4f       	sbci	r23, 0xFF	; 255
    19d8:	ce 01       	movw	r24, r28
    19da:	01 96       	adiw	r24, 0x01	; 1
    19dc:	0e 94 70 39 	call	0x72e0	; 0x72e0 <_ZplRK15StringSumHelperRK6String>
    19e0:	69 e7       	ldi	r22, 0x79	; 121
    19e2:	76 e0       	ldi	r23, 0x06	; 6
    19e4:	0e 94 81 39 	call	0x7302	; 0x7302 <_ZplRK15StringSumHelperPKc>
    19e8:	bc 01       	movw	r22, r24
    19ea:	82 ed       	ldi	r24, 0xD2	; 210
    19ec:	9a e0       	ldi	r25, 0x0A	; 10
    19ee:	0e 94 c7 34 	call	0x698e	; 0x698e <_ZN5Print5printERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    19f2:	ce 01       	movw	r24, r28
    19f4:	01 96       	adiw	r24, 0x01	; 1
    19f6:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
    19fa:	ce 01       	movw	r24, r28
    19fc:	0e 96       	adiw	r24, 0x0e	; 14
    19fe:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
        // da commentare
        // Carburante = "D"; // Simulo Abilitazione Diesel
        // da commentare
        // Carburante = "B"; // Simulo Abilitazione Benzina
        /*****************************************************************/
        gpio.setCONFREG(0x3C);
    1a02:	6c e3       	ldi	r22, 0x3C	; 60
    1a04:	86 ef       	ldi	r24, 0xF6	; 246
    1a06:	99 e0       	ldi	r25, 0x09	; 9
    1a08:	0e 94 97 18 	call	0x312e	; 0x312e <_ZN7PCA953410setCONFREGEh>
        uint8_t c = gpio.Read_IP_REGISTER();
    1a0c:	86 ef       	ldi	r24, 0xF6	; 246
    1a0e:	99 e0       	ldi	r25, 0x09	; 9
    1a10:	0e 94 ae 18 	call	0x315c	; 0x315c <_ZN7PCA953416Read_IP_REGISTEREv>
    1a14:	08 2f       	mov	r16, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    1a16:	42 e0       	ldi	r20, 0x02	; 2
    1a18:	be 01       	movw	r22, r28
    1a1a:	6a 5e       	subi	r22, 0xEA	; 234
    1a1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	0e 94 66 3d 	call	0x7acc	; 0x7acc <__itoa_ncheck>
        char buf[8];
        itoa(c, buf, 2);
        gpio.setCONFREG(0xC3);
    1a24:	63 ec       	ldi	r22, 0xC3	; 195
    1a26:	86 ef       	ldi	r24, 0xF6	; 246
    1a28:	99 e0       	ldi	r25, 0x09	; 9
    1a2a:	0e 94 97 18 	call	0x312e	; 0x312e <_ZN7PCA953410setCONFREGEh>
        uint8_t r = gpio.Read_IP_REGISTER();
    1a2e:	86 ef       	ldi	r24, 0xF6	; 246
    1a30:	99 e0       	ldi	r25, 0x09	; 9
    1a32:	0e 94 ae 18 	call	0x315c	; 0x315c <_ZN7PCA953416Read_IP_REGISTEREv>
    1a36:	18 2f       	mov	r17, r24
    1a38:	42 e0       	ldi	r20, 0x02	; 2
    1a3a:	be 01       	movw	r22, r28
    1a3c:	62 5f       	subi	r22, 0xF2	; 242
    1a3e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	0e 94 66 3d 	call	0x7acc	; 0x7acc <__itoa_ncheck>
        char bufr[8];
        itoa(r, bufr, 2);
        char ris[8];
        uint8_t z = (r ^ c);
        itoa(z, ris, 2);
    1a46:	10 27       	eor	r17, r16
    1a48:	01 2f       	mov	r16, r17
    1a4a:	10 e0       	ldi	r17, 0x00	; 0
    1a4c:	42 e0       	ldi	r20, 0x02	; 2
    1a4e:	be 01       	movw	r22, r28
    1a50:	6f 5f       	subi	r22, 0xFF	; 255
    1a52:	7f 4f       	sbci	r23, 0xFF	; 255
    1a54:	c8 01       	movw	r24, r16
    1a56:	0e 94 66 3d 	call	0x7acc	; 0x7acc <__itoa_ncheck>
        char T = getCharKeypad(int(z));
    1a5a:	c8 01       	movw	r24, r16
    1a5c:	0e 94 85 02 	call	0x50a	; 0x50a <_Z13getCharKeypadi>
    1a60:	2f ef       	ldi	r18, 0xFF	; 255
    1a62:	39 ef       	ldi	r19, 0xF9	; 249
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	21 50       	subi	r18, 0x01	; 1
    1a68:	30 40       	sbci	r19, 0x00	; 0
    1a6a:	90 40       	sbci	r25, 0x00	; 0
    1a6c:	e1 f7       	brne	.-8      	; 0x1a66 <loop+0x302>
    1a6e:	00 c0       	rjmp	.+0      	; 0x1a70 <loop+0x30c>
        _delay_ms(20);
        /*****************************************************************/

        inputTarga(T);
    1a70:	00 00       	nop
    1a72:	5a db       	rcall	.-2380   	; 0x1128 <_Z10inputTargac>
      }
      break;
    1a74:	64 c4       	rjmp	.+2248   	; 0x233e <loop+0xbda>
    case 3:
      {
        lcd.setCursor(0, 0);
    1a76:	40 e0       	ldi	r20, 0x00	; 0
    1a78:	60 e0       	ldi	r22, 0x00	; 0
    1a7a:	82 ed       	ldi	r24, 0xD2	; 210
    1a7c:	9a e0       	ldi	r25, 0x0A	; 10
    1a7e:	0e 94 0f 2b 	call	0x561e	; 0x561e <_ZN3LCD9setCursorEhh>
        lcd.print((char)1);  // STAMPA LA CLESSIDRA
    1a82:	61 e0       	ldi	r22, 0x01	; 1
    1a84:	82 ed       	ldi	r24, 0xD2	; 210
    1a86:	9a e0       	ldi	r25, 0x0A	; 10
    1a88:	0e 94 d6 34 	call	0x69ac	; 0x69ac <_ZN5Print5printEc>
        lcd.print("Tempo: " + String((UltimoPassaggioStato + Timer - secs - 1)) + " sec ");
    1a8c:	40 91 0f 0a 	lds	r20, 0x0A0F	; 0x800a0f <UltimoPassaggioStato>
    1a90:	50 91 10 0a 	lds	r21, 0x0A10	; 0x800a10 <UltimoPassaggioStato+0x1>
    1a94:	60 91 11 0a 	lds	r22, 0x0A11	; 0x800a11 <UltimoPassaggioStato+0x2>
    1a98:	70 91 12 0a 	lds	r23, 0x0A12	; 0x800a12 <UltimoPassaggioStato+0x3>
    1a9c:	80 91 0b 0a 	lds	r24, 0x0A0B	; 0x800a0b <Timer>
    1aa0:	90 91 0c 0a 	lds	r25, 0x0A0C	; 0x800a0c <Timer+0x1>
    1aa4:	a0 91 0d 0a 	lds	r26, 0x0A0D	; 0x800a0d <Timer+0x2>
    1aa8:	b0 91 0e 0a 	lds	r27, 0x0A0E	; 0x800a0e <Timer+0x3>
    1aac:	48 0f       	add	r20, r24
    1aae:	59 1f       	adc	r21, r25
    1ab0:	6a 1f       	adc	r22, r26
    1ab2:	7b 1f       	adc	r23, r27
    1ab4:	41 50       	subi	r20, 0x01	; 1
    1ab6:	51 09       	sbc	r21, r1
    1ab8:	61 09       	sbc	r22, r1
    1aba:	71 09       	sbc	r23, r1
    1abc:	80 91 13 0a 	lds	r24, 0x0A13	; 0x800a13 <secs>
    1ac0:	90 91 14 0a 	lds	r25, 0x0A14	; 0x800a14 <secs+0x1>
    1ac4:	a0 91 15 0a 	lds	r26, 0x0A15	; 0x800a15 <secs+0x2>
    1ac8:	b0 91 16 0a 	lds	r27, 0x0A16	; 0x800a16 <secs+0x3>
    1acc:	48 1b       	sub	r20, r24
    1ace:	59 0b       	sbc	r21, r25
    1ad0:	6a 0b       	sbc	r22, r26
    1ad2:	7b 0b       	sbc	r23, r27
    1ad4:	2a e0       	ldi	r18, 0x0A	; 10
    1ad6:	ce 01       	movw	r24, r28
    1ad8:	0e 96       	adiw	r24, 0x0e	; 14
    1ada:	0e 94 c5 38 	call	0x718a	; 0x718a <_ZN6StringC1Emh>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1ade:	6b ed       	ldi	r22, 0xDB	; 219
    1ae0:	76 e0       	ldi	r23, 0x06	; 6
    1ae2:	ce 01       	movw	r24, r28
    1ae4:	01 96       	adiw	r24, 0x01	; 1
    1ae6:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <_ZN6StringC1EPKc>
    1aea:	be 01       	movw	r22, r28
    1aec:	62 5f       	subi	r22, 0xF2	; 242
    1aee:	7f 4f       	sbci	r23, 0xFF	; 255
    1af0:	ce 01       	movw	r24, r28
    1af2:	01 96       	adiw	r24, 0x01	; 1
    1af4:	0e 94 70 39 	call	0x72e0	; 0x72e0 <_ZplRK15StringSumHelperRK6String>
    1af8:	69 e7       	ldi	r22, 0x79	; 121
    1afa:	76 e0       	ldi	r23, 0x06	; 6
    1afc:	0e 94 81 39 	call	0x7302	; 0x7302 <_ZplRK15StringSumHelperPKc>
    1b00:	bc 01       	movw	r22, r24
    1b02:	82 ed       	ldi	r24, 0xD2	; 210
    1b04:	9a e0       	ldi	r25, 0x0A	; 10
    1b06:	0e 94 c7 34 	call	0x698e	; 0x698e <_ZN5Print5printERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1b0a:	ce 01       	movw	r24, r28
    1b0c:	01 96       	adiw	r24, 0x01	; 1
    1b0e:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
    1b12:	ce 01       	movw	r24, r28
    1b14:	0e 96       	adiw	r24, 0x0e	; 14
    1b16:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>

        if (TARGA.length() == 5)
    1b1a:	80 91 03 0a 	lds	r24, 0x0A03	; 0x800a03 <TARGA+0x4>
    1b1e:	90 91 04 0a 	lds	r25, 0x0A04	; 0x800a04 <TARGA+0x5>
    1b22:	05 97       	sbiw	r24, 0x05	; 5
    1b24:	69 f5       	brne	.+90     	; 0x1b80 <loop+0x41c>
        {
          mezzo.Carb = "X";
    1b26:	67 e7       	ldi	r22, 0x77	; 119
    1b28:	75 e0       	ldi	r23, 0x05	; 5
    1b2a:	84 ef       	ldi	r24, 0xF4	; 244
    1b2c:	9a e0       	ldi	r25, 0x0A	; 10
    1b2e:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>
          mezzo.TARGA = TARGA;
    1b32:	6f ef       	ldi	r22, 0xFF	; 255
    1b34:	79 e0       	ldi	r23, 0x09	; 9
    1b36:	8a ef       	ldi	r24, 0xFA	; 250
    1b38:	9a e0       	ldi	r25, 0x0A	; 10
    1b3a:	0e 94 f2 37 	call	0x6fe4	; 0x6fe4 <_ZN6StringaSERKS_>
          mezzo.KM = "0";
    1b3e:	68 ef       	ldi	r22, 0xF8	; 248
    1b40:	75 e0       	ldi	r23, 0x05	; 5
    1b42:	80 e0       	ldi	r24, 0x00	; 0
    1b44:	9b e0       	ldi	r25, 0x0B	; 11
    1b46:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>

          righeDisplay[1] =  "****** DISTRIBUTORE ******";
    1b4a:	6f e7       	ldi	r22, 0x7F	; 127
    1b4c:	76 e0       	ldi	r23, 0x06	; 6
    1b4e:	8b e5       	ldi	r24, 0x5B	; 91
    1b50:	9a e0       	ldi	r25, 0x0A	; 10
    1b52:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>
          righeDisplay[2] =  "";
    1b56:	6a e3       	ldi	r22, 0x3A	; 58
    1b58:	72 e0       	ldi	r23, 0x02	; 2
    1b5a:	81 e6       	ldi	r24, 0x61	; 97
    1b5c:	9a e0       	ldi	r25, 0x0A	; 10
    1b5e:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>
          righeDisplay[3] = "**** SCEGLI ****";
    1b62:	6a e9       	ldi	r22, 0x9A	; 154
    1b64:	76 e0       	ldi	r23, 0x06	; 6
    1b66:	87 e6       	ldi	r24, 0x67	; 103
    1b68:	9a e0       	ldi	r25, 0x0A	; 10
    1b6a:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>

          avanzaStato(TselDistributore);
    1b6e:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <TselDistributore>
    1b72:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <TselDistributore+0x1>
    1b76:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <TselDistributore+0x2>
    1b7a:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <TselDistributore+0x3>
    1b7e:	28 c5       	rjmp	.+2640   	; 0x25d0 <loop+0xe6c>
        }
        else {
          //String mezzoString = leggiTAG_Mezzo(false); // con TRUE scrive sul blocco 4 della card NFC DEL MEZZO
          String mezzoString = leggiTAG_Mezzo(true); // con TRUE scrive sul blocco 4 della card NFC DEL MEZZO
    1b80:	61 e0       	ldi	r22, 0x01	; 1
    1b82:	ce 01       	movw	r24, r28
    1b84:	0e 96       	adiw	r24, 0x0e	; 14
    1b86:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <_Z14leggiTAG_Mezzob>
    1b8a:	ef e3       	ldi	r30, 0x3F	; 63
    1b8c:	fc e9       	ldi	r31, 0x9C	; 156
    1b8e:	31 97       	sbiw	r30, 0x01	; 1
    1b90:	f1 f7       	brne	.-4      	; 0x1b8e <loop+0x42a>
    1b92:	00 c0       	rjmp	.+0      	; 0x1b94 <loop+0x430>
    1b94:	00 00       	nop
          _delay_ms(10);

          Serial.println(mezzoString);
    1b96:	be 01       	movw	r22, r28
    1b98:	62 5f       	subi	r22, 0xF2	; 242
    1b9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b9c:	85 ea       	ldi	r24, 0xA5	; 165
    1b9e:	9c e0       	ldi	r25, 0x0C	; 12
    1ba0:	0e 94 f0 34 	call	0x69e0	; 0x69e0 <_ZN5Print7printlnERK6String>
	int indexOf( const String &str, unsigned int fromIndex ) const;
	int lastIndexOf( char ch ) const;
	int lastIndexOf( char ch, unsigned int fromIndex ) const;
	int lastIndexOf( const String &str ) const;
	int lastIndexOf( const String &str, unsigned int fromIndex ) const;
	String substring( unsigned int beginIndex ) const { return substring(beginIndex, len); };
    1ba4:	2a 89       	ldd	r18, Y+18	; 0x12
    1ba6:	3b 89       	ldd	r19, Y+19	; 0x13
    1ba8:	45 e0       	ldi	r20, 0x05	; 5
    1baa:	50 e0       	ldi	r21, 0x00	; 0
    1bac:	be 01       	movw	r22, r28
    1bae:	62 5f       	subi	r22, 0xF2	; 242
    1bb0:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb2:	ce 01       	movw	r24, r28
    1bb4:	01 96       	adiw	r24, 0x01	; 1
    1bb6:	0e 94 f0 39 	call	0x73e0	; 0x73e0 <_ZNK6String9substringEjj>

          mezzo.Carb = mezzoString.substring(5);
    1bba:	be 01       	movw	r22, r28
    1bbc:	6f 5f       	subi	r22, 0xFF	; 255
    1bbe:	7f 4f       	sbci	r23, 0xFF	; 255
    1bc0:	84 ef       	ldi	r24, 0xF4	; 244
    1bc2:	9a e0       	ldi	r25, 0x0A	; 10
    1bc4:	0e 94 0f 38 	call	0x701e	; 0x701e <_ZN6StringaSEOS_>
    1bc8:	ce 01       	movw	r24, r28
    1bca:	01 96       	adiw	r24, 0x01	; 1
    1bcc:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
          mezzo.TARGA = mezzoString.substring(0, 5);
    1bd0:	25 e0       	ldi	r18, 0x05	; 5
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	40 e0       	ldi	r20, 0x00	; 0
    1bd6:	50 e0       	ldi	r21, 0x00	; 0
    1bd8:	be 01       	movw	r22, r28
    1bda:	62 5f       	subi	r22, 0xF2	; 242
    1bdc:	7f 4f       	sbci	r23, 0xFF	; 255
    1bde:	ce 01       	movw	r24, r28
    1be0:	01 96       	adiw	r24, 0x01	; 1
    1be2:	0e 94 f0 39 	call	0x73e0	; 0x73e0 <_ZNK6String9substringEjj>
    1be6:	be 01       	movw	r22, r28
    1be8:	6f 5f       	subi	r22, 0xFF	; 255
    1bea:	7f 4f       	sbci	r23, 0xFF	; 255
    1bec:	8a ef       	ldi	r24, 0xFA	; 250
    1bee:	9a e0       	ldi	r25, 0x0A	; 10
    1bf0:	0e 94 0f 38 	call	0x701e	; 0x701e <_ZN6StringaSEOS_>
    1bf4:	ce 01       	movw	r24, r28
    1bf6:	01 96       	adiw	r24, 0x01	; 1
    1bf8:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
          mezzo.KM = "0";
    1bfc:	68 ef       	ldi	r22, 0xF8	; 248
    1bfe:	75 e0       	ldi	r23, 0x05	; 5
    1c00:	80 e0       	ldi	r24, 0x00	; 0
    1c02:	9b e0       	ldi	r25, 0x0B	; 11
    1c04:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1c08:	6b ea       	ldi	r22, 0xAB	; 171
    1c0a:	76 e0       	ldi	r23, 0x06	; 6
    1c0c:	ce 01       	movw	r24, r28
    1c0e:	01 96       	adiw	r24, 0x01	; 1
    1c10:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <_ZN6StringC1EPKc>

          Serial.println("TIPO CARBURANTE: " + mezzo.Carb);
    1c14:	64 ef       	ldi	r22, 0xF4	; 244
    1c16:	7a e0       	ldi	r23, 0x0A	; 10
    1c18:	ce 01       	movw	r24, r28
    1c1a:	01 96       	adiw	r24, 0x01	; 1
    1c1c:	0e 94 70 39 	call	0x72e0	; 0x72e0 <_ZplRK15StringSumHelperRK6String>
    1c20:	bc 01       	movw	r22, r24
    1c22:	85 ea       	ldi	r24, 0xA5	; 165
    1c24:	9c e0       	ldi	r25, 0x0C	; 12
    1c26:	0e 94 f0 34 	call	0x69e0	; 0x69e0 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1c2a:	ce 01       	movw	r24, r28
    1c2c:	01 96       	adiw	r24, 0x01	; 1
    1c2e:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1c32:	6d eb       	ldi	r22, 0xBD	; 189
    1c34:	76 e0       	ldi	r23, 0x06	; 6
    1c36:	ce 01       	movw	r24, r28
    1c38:	01 96       	adiw	r24, 0x01	; 1
    1c3a:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <_ZN6StringC1EPKc>
          Serial.println("TARGA: " + mezzo.TARGA);
    1c3e:	6a ef       	ldi	r22, 0xFA	; 250
    1c40:	7a e0       	ldi	r23, 0x0A	; 10
    1c42:	ce 01       	movw	r24, r28
    1c44:	01 96       	adiw	r24, 0x01	; 1
    1c46:	0e 94 70 39 	call	0x72e0	; 0x72e0 <_ZplRK15StringSumHelperRK6String>
    1c4a:	bc 01       	movw	r22, r24
    1c4c:	85 ea       	ldi	r24, 0xA5	; 165
    1c4e:	9c e0       	ldi	r25, 0x0C	; 12
    1c50:	0e 94 f0 34 	call	0x69e0	; 0x69e0 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1c54:	ce 01       	movw	r24, r28
    1c56:	01 96       	adiw	r24, 0x01	; 1
    1c58:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>

          Carburante = mezzo.Carb;
    1c5c:	64 ef       	ldi	r22, 0xF4	; 244
    1c5e:	7a e0       	ldi	r23, 0x0A	; 10
    1c60:	89 e7       	ldi	r24, 0x79	; 121
    1c62:	9a e0       	ldi	r25, 0x0A	; 10
    1c64:	0e 94 f2 37 	call	0x6fe4	; 0x6fe4 <_ZN6StringaSERKS_>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    1c68:	65 ec       	ldi	r22, 0xC5	; 197
    1c6a:	76 e0       	ldi	r23, 0x06	; 6
    1c6c:	84 ef       	ldi	r24, 0xF4	; 244
    1c6e:	9a e0       	ldi	r25, 0x0A	; 10
    1c70:	0e 94 a4 39 	call	0x7348	; 0x7348 <_ZNK6String6equalsEPKc>
          if ((mezzo.Carb == "B") || (mezzo.Carb == "D")) {
    1c74:	81 11       	cpse	r24, r1
    1c76:	12 c4       	rjmp	.+2084   	; 0x249c <loop+0xd38>
    1c78:	67 ec       	ldi	r22, 0xC7	; 199
    1c7a:	76 e0       	ldi	r23, 0x06	; 6
    1c7c:	84 ef       	ldi	r24, 0xF4	; 244
    1c7e:	9a e0       	ldi	r25, 0x0A	; 10
    1c80:	0e 94 a4 39 	call	0x7348	; 0x7348 <_ZNK6String6equalsEPKc>
    1c84:	81 11       	cpse	r24, r1
    1c86:	0a c4       	rjmp	.+2068   	; 0x249c <loop+0xd38>

          avanzaStato(TselDistributore);
        }
        else {
          //String mezzoString = leggiTAG_Mezzo(false); // con TRUE scrive sul blocco 4 della card NFC DEL MEZZO
          String mezzoString = leggiTAG_Mezzo(true); // con TRUE scrive sul blocco 4 della card NFC DEL MEZZO
    1c88:	ce 01       	movw	r24, r28
    1c8a:	0e 96       	adiw	r24, 0x0e	; 14
    1c8c:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
    1c90:	56 c3       	rjmp	.+1708   	; 0x233e <loop+0xbda>
        }
      }
      break;
    case 4:
      {
        righeDisplay[1] =  "****** DISTRIBUTORE ******";
    1c92:	6f e7       	ldi	r22, 0x7F	; 127
    1c94:	76 e0       	ldi	r23, 0x06	; 6
    1c96:	8b e5       	ldi	r24, 0x5B	; 91
    1c98:	9a e0       	ldi	r25, 0x0A	; 10
    1c9a:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>
        righeDisplay[2] =  "";
    1c9e:	6a e3       	ldi	r22, 0x3A	; 58
    1ca0:	72 e0       	ldi	r23, 0x02	; 2
    1ca2:	81 e6       	ldi	r24, 0x61	; 97
    1ca4:	9a e0       	ldi	r25, 0x0A	; 10
    1ca6:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>
        righeDisplay[3] = "**** SCEGLI ****";
    1caa:	6a e9       	ldi	r22, 0x9A	; 154
    1cac:	76 e0       	ldi	r23, 0x06	; 6
    1cae:	87 e6       	ldi	r24, 0x67	; 103
    1cb0:	9a e0       	ldi	r25, 0x0A	; 10
    1cb2:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>
    1cb6:	65 ec       	ldi	r22, 0xC5	; 197
    1cb8:	76 e0       	ldi	r23, 0x06	; 6
    1cba:	84 ef       	ldi	r24, 0xF4	; 244
    1cbc:	9a e0       	ldi	r25, 0x0A	; 10
    1cbe:	0e 94 a4 39 	call	0x7348	; 0x7348 <_ZNK6String6equalsEPKc>

        //displayLCD(righeDisplay,stato_procedura,100);

        // Verifica scelta distributore

        if (mezzo.Carb == "B")
    1cc2:	88 23       	and	r24, r24
        {
          abilitaPulser('B');
    1cc4:	51 f0       	breq	.+20     	; 0x1cda <loop+0x576>
    1cc6:	82 e4       	ldi	r24, 0x42	; 66
          Rele_Abilitazione2(0, 7); // chiudi relè
    1cc8:	c6 d8       	rcall	.-3700   	; 0xe56 <_Z13abilitaPulserc>
    1cca:	67 e0       	ldi	r22, 0x07	; 7
    1ccc:	70 e0       	ldi	r23, 0x00	; 0
    1cce:	80 e0       	ldi	r24, 0x00	; 0
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	35 d9       	rcall	.-3478   	; 0xf3e <_Z18Rele_Abilitazione2ii>
          StatoAttuale = "POMPA 2";
    1cd4:	69 ec       	ldi	r22, 0xC9	; 201
    1cd6:	76 e0       	ldi	r23, 0x06	; 6
    1cd8:	12 c0       	rjmp	.+36     	; 0x1cfe <loop+0x59a>
    1cda:	67 ec       	ldi	r22, 0xC7	; 199
    1cdc:	76 e0       	ldi	r23, 0x06	; 6
    1cde:	84 ef       	ldi	r24, 0xF4	; 244
    1ce0:	9a e0       	ldi	r25, 0x0A	; 10
    1ce2:	0e 94 a4 39 	call	0x7348	; 0x7348 <_ZNK6String6equalsEPKc>
          righeDisplay[1] =  "****** KM ******";
          righeDisplay[2] = "KM:" + KM;
          righeDisplay[3] = "#:Conferma";
          avanzaStato(60);
        }
        else if (mezzo.Carb == "D")
    1ce6:	88 23       	and	r24, r24
    1ce8:	09 f4       	brne	.+2      	; 0x1cec <loop+0x588>
        {
          abilitaPulser('D');
    1cea:	29 c3       	rjmp	.+1618   	; 0x233e <loop+0xbda>
    1cec:	84 e4       	ldi	r24, 0x44	; 68
          Rele_Abilitazione1(0, 7); // chiudi relè
    1cee:	b3 d8       	rcall	.-3738   	; 0xe56 <_Z13abilitaPulserc>
    1cf0:	67 e0       	ldi	r22, 0x07	; 7
    1cf2:	70 e0       	ldi	r23, 0x00	; 0
    1cf4:	80 e0       	ldi	r24, 0x00	; 0
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	e7 d8       	rcall	.-3634   	; 0xec8 <_Z18Rele_Abilitazione1ii>
          StatoAttuale = "POMPA 1";
    1cfa:	61 ed       	ldi	r22, 0xD1	; 209
    1cfc:	76 e0       	ldi	r23, 0x06	; 6
    1cfe:	85 eb       	ldi	r24, 0xB5	; 181
    1d00:	9a e0       	ldi	r25, 0x0A	; 10
    1d02:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>
          RaccoltaDati[2] = mezzo.Carb;
    1d06:	64 ef       	ldi	r22, 0xF4	; 244
    1d08:	7a e0       	ldi	r23, 0x0A	; 10
    1d0a:	8b e8       	ldi	r24, 0x8B	; 139
    1d0c:	9a e0       	ldi	r25, 0x0A	; 10
    1d0e:	0e 94 f2 37 	call	0x6fe4	; 0x6fe4 <_ZN6StringaSERKS_>

          righeDisplay[1] =  "****** KM ******";
    1d12:	6d ec       	ldi	r22, 0xCD	; 205
    1d14:	75 e0       	ldi	r23, 0x05	; 5
    1d16:	8b e5       	ldi	r24, 0x5B	; 91
    1d18:	9a e0       	ldi	r25, 0x0A	; 10
    1d1a:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1d1e:	6e ed       	ldi	r22, 0xDE	; 222
    1d20:	75 e0       	ldi	r23, 0x05	; 5
    1d22:	ce 01       	movw	r24, r28
    1d24:	01 96       	adiw	r24, 0x01	; 1
    1d26:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <_ZN6StringC1EPKc>
          righeDisplay[2] = "KM:" + KM;
    1d2a:	69 ef       	ldi	r22, 0xF9	; 249
    1d2c:	79 e0       	ldi	r23, 0x09	; 9
    1d2e:	ce 01       	movw	r24, r28
    1d30:	01 96       	adiw	r24, 0x01	; 1
    1d32:	0e 94 70 39 	call	0x72e0	; 0x72e0 <_ZplRK15StringSumHelperRK6String>
    1d36:	bc 01       	movw	r22, r24
    1d38:	81 e6       	ldi	r24, 0x61	; 97
    1d3a:	9a e0       	ldi	r25, 0x0A	; 10
    1d3c:	0e 94 f2 37 	call	0x6fe4	; 0x6fe4 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1d40:	ce 01       	movw	r24, r28
    1d42:	01 96       	adiw	r24, 0x01	; 1
    1d44:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
          righeDisplay[3] = "#:Conferma";
    1d48:	62 ee       	ldi	r22, 0xE2	; 226
    1d4a:	75 e0       	ldi	r23, 0x05	; 5
    1d4c:	87 e6       	ldi	r24, 0x67	; 103
    1d4e:	9a e0       	ldi	r25, 0x0A	; 10
    1d50:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>
          avanzaStato(60);
    1d54:	6c e3       	ldi	r22, 0x3C	; 60
    1d56:	70 e0       	ldi	r23, 0x00	; 0
    1d58:	80 e0       	ldi	r24, 0x00	; 0
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	39 c4       	rjmp	.+2162   	; 0x25d0 <loop+0xe6c>
        }
      }
      break;
    case 5:
      {
        lcd.setCursor(0, 0);
    1d5e:	40 e0       	ldi	r20, 0x00	; 0
    1d60:	60 e0       	ldi	r22, 0x00	; 0
    1d62:	82 ed       	ldi	r24, 0xD2	; 210
    1d64:	9a e0       	ldi	r25, 0x0A	; 10
    1d66:	0e 94 0f 2b 	call	0x561e	; 0x561e <_ZN3LCD9setCursorEhh>
        lcd.print((char)1);  // STAMPA LA CLESSIDRA
    1d6a:	61 e0       	ldi	r22, 0x01	; 1
    1d6c:	82 ed       	ldi	r24, 0xD2	; 210
    1d6e:	9a e0       	ldi	r25, 0x0A	; 10
    1d70:	0e 94 d6 34 	call	0x69ac	; 0x69ac <_ZN5Print5printEc>
        lcd.print("Tempo: " + String((UltimoPassaggioStato + Timer - secs - 1)) + " sec ");
    1d74:	40 91 0f 0a 	lds	r20, 0x0A0F	; 0x800a0f <UltimoPassaggioStato>
    1d78:	50 91 10 0a 	lds	r21, 0x0A10	; 0x800a10 <UltimoPassaggioStato+0x1>
    1d7c:	60 91 11 0a 	lds	r22, 0x0A11	; 0x800a11 <UltimoPassaggioStato+0x2>
    1d80:	70 91 12 0a 	lds	r23, 0x0A12	; 0x800a12 <UltimoPassaggioStato+0x3>
    1d84:	80 91 0b 0a 	lds	r24, 0x0A0B	; 0x800a0b <Timer>
    1d88:	90 91 0c 0a 	lds	r25, 0x0A0C	; 0x800a0c <Timer+0x1>
    1d8c:	a0 91 0d 0a 	lds	r26, 0x0A0D	; 0x800a0d <Timer+0x2>
    1d90:	b0 91 0e 0a 	lds	r27, 0x0A0E	; 0x800a0e <Timer+0x3>
    1d94:	48 0f       	add	r20, r24
    1d96:	59 1f       	adc	r21, r25
    1d98:	6a 1f       	adc	r22, r26
    1d9a:	7b 1f       	adc	r23, r27
    1d9c:	41 50       	subi	r20, 0x01	; 1
    1d9e:	51 09       	sbc	r21, r1
    1da0:	61 09       	sbc	r22, r1
    1da2:	71 09       	sbc	r23, r1
    1da4:	80 91 13 0a 	lds	r24, 0x0A13	; 0x800a13 <secs>
    1da8:	90 91 14 0a 	lds	r25, 0x0A14	; 0x800a14 <secs+0x1>
    1dac:	a0 91 15 0a 	lds	r26, 0x0A15	; 0x800a15 <secs+0x2>
    1db0:	b0 91 16 0a 	lds	r27, 0x0A16	; 0x800a16 <secs+0x3>
    1db4:	48 1b       	sub	r20, r24
    1db6:	59 0b       	sbc	r21, r25
    1db8:	6a 0b       	sbc	r22, r26
    1dba:	7b 0b       	sbc	r23, r27
    1dbc:	2a e0       	ldi	r18, 0x0A	; 10
    1dbe:	ce 01       	movw	r24, r28
    1dc0:	0e 96       	adiw	r24, 0x0e	; 14
    1dc2:	0e 94 c5 38 	call	0x718a	; 0x718a <_ZN6StringC1Emh>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1dc6:	6b ed       	ldi	r22, 0xDB	; 219
    1dc8:	76 e0       	ldi	r23, 0x06	; 6
    1dca:	ce 01       	movw	r24, r28
    1dcc:	01 96       	adiw	r24, 0x01	; 1
    1dce:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <_ZN6StringC1EPKc>
    1dd2:	be 01       	movw	r22, r28
    1dd4:	62 5f       	subi	r22, 0xF2	; 242
    1dd6:	7f 4f       	sbci	r23, 0xFF	; 255
    1dd8:	ce 01       	movw	r24, r28
    1dda:	01 96       	adiw	r24, 0x01	; 1
    1ddc:	0e 94 70 39 	call	0x72e0	; 0x72e0 <_ZplRK15StringSumHelperRK6String>
    1de0:	69 e7       	ldi	r22, 0x79	; 121
    1de2:	76 e0       	ldi	r23, 0x06	; 6
    1de4:	0e 94 81 39 	call	0x7302	; 0x7302 <_ZplRK15StringSumHelperPKc>
    1de8:	bc 01       	movw	r22, r24
    1dea:	82 ed       	ldi	r24, 0xD2	; 210
    1dec:	9a e0       	ldi	r25, 0x0A	; 10
    1dee:	0e 94 c7 34 	call	0x698e	; 0x698e <_ZN5Print5printERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1df2:	ce 01       	movw	r24, r28
    1df4:	01 96       	adiw	r24, 0x01	; 1
    1df6:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
    1dfa:	ce 01       	movw	r24, r28
    1dfc:	0e 96       	adiw	r24, 0x0e	; 14
    1dfe:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>

        // RaccoltaDati[4] = "1234";
        /*****************************************************************/
        gpio.setCONFREG(0x3C);
    1e02:	6c e3       	ldi	r22, 0x3C	; 60
    1e04:	86 ef       	ldi	r24, 0xF6	; 246
    1e06:	99 e0       	ldi	r25, 0x09	; 9
    1e08:	0e 94 97 18 	call	0x312e	; 0x312e <_ZN7PCA953410setCONFREGEh>
        uint8_t c = gpio.Read_IP_REGISTER();
    1e0c:	86 ef       	ldi	r24, 0xF6	; 246
    1e0e:	99 e0       	ldi	r25, 0x09	; 9
    1e10:	0e 94 ae 18 	call	0x315c	; 0x315c <_ZN7PCA953416Read_IP_REGISTEREv>
    1e14:	08 2f       	mov	r16, r24
    1e16:	42 e0       	ldi	r20, 0x02	; 2
    1e18:	be 01       	movw	r22, r28
    1e1a:	6a 5e       	subi	r22, 0xEA	; 234
    1e1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	0e 94 66 3d 	call	0x7acc	; 0x7acc <__itoa_ncheck>
        char buf[8];
        itoa(c, buf, 2);
        gpio.setCONFREG(0xC3);
    1e24:	63 ec       	ldi	r22, 0xC3	; 195
    1e26:	86 ef       	ldi	r24, 0xF6	; 246
    1e28:	99 e0       	ldi	r25, 0x09	; 9
    1e2a:	0e 94 97 18 	call	0x312e	; 0x312e <_ZN7PCA953410setCONFREGEh>
        uint8_t r = gpio.Read_IP_REGISTER();
    1e2e:	86 ef       	ldi	r24, 0xF6	; 246
    1e30:	99 e0       	ldi	r25, 0x09	; 9
    1e32:	0e 94 ae 18 	call	0x315c	; 0x315c <_ZN7PCA953416Read_IP_REGISTEREv>
    1e36:	18 2f       	mov	r17, r24
    1e38:	42 e0       	ldi	r20, 0x02	; 2
    1e3a:	be 01       	movw	r22, r28
    1e3c:	62 5f       	subi	r22, 0xF2	; 242
    1e3e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	0e 94 66 3d 	call	0x7acc	; 0x7acc <__itoa_ncheck>
        char bufr[8];
        itoa(r, bufr, 2);
        char ris[8];
        uint8_t z = (r ^ c);
        itoa(z, ris, 2);
    1e46:	10 27       	eor	r17, r16
    1e48:	01 2f       	mov	r16, r17
    1e4a:	10 e0       	ldi	r17, 0x00	; 0
    1e4c:	42 e0       	ldi	r20, 0x02	; 2
    1e4e:	be 01       	movw	r22, r28
    1e50:	6f 5f       	subi	r22, 0xFF	; 255
    1e52:	7f 4f       	sbci	r23, 0xFF	; 255
    1e54:	c8 01       	movw	r24, r16
    1e56:	0e 94 66 3d 	call	0x7acc	; 0x7acc <__itoa_ncheck>
        char T = getCharKeypad(int(z));
    1e5a:	c8 01       	movw	r24, r16
    1e5c:	0e 94 85 02 	call	0x50a	; 0x50a <_Z13getCharKeypadi>
    1e60:	ff ef       	ldi	r31, 0xFF	; 255
    1e62:	29 ef       	ldi	r18, 0xF9	; 249
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	f1 50       	subi	r31, 0x01	; 1
    1e68:	20 40       	sbci	r18, 0x00	; 0
    1e6a:	30 40       	sbci	r19, 0x00	; 0
    1e6c:	e1 f7       	brne	.-8      	; 0x1e66 <loop+0x702>
    1e6e:	00 c0       	rjmp	.+0      	; 0x1e70 <loop+0x70c>
        _delay_ms(20);
        /*****************************************************************/

        inputKM(T);
    1e70:	00 00       	nop
    1e72:	0e da       	rcall	.-3044   	; 0x1290 <_Z7inputKMc>
        impulsi = 0;
    1e74:	10 92 aa 0a 	sts	0x0AAA, r1	; 0x800aaa <impulsi+0x1>
    1e78:	10 92 a9 0a 	sts	0x0AA9, r1	; 0x800aa9 <impulsi>
      }
      break;
    1e7c:	60 c2       	rjmp	.+1216   	; 0x233e <loop+0xbda>
    case 6:
      {
        lcd.setCursor(0, 0);
    1e7e:	40 e0       	ldi	r20, 0x00	; 0
    1e80:	60 e0       	ldi	r22, 0x00	; 0
    1e82:	82 ed       	ldi	r24, 0xD2	; 210
    1e84:	9a e0       	ldi	r25, 0x0A	; 10
    1e86:	0e 94 0f 2b 	call	0x561e	; 0x561e <_ZN3LCD9setCursorEhh>
        lcd.print((char)1);  // STAMPA LA CLESSIDRA
    1e8a:	61 e0       	ldi	r22, 0x01	; 1
    1e8c:	82 ed       	ldi	r24, 0xD2	; 210
    1e8e:	9a e0       	ldi	r25, 0x0A	; 10
    1e90:	0e 94 d6 34 	call	0x69ac	; 0x69ac <_ZN5Print5printEc>
        lcd.print("  Tempo: " + String((UltimoPassaggioStato + Timer - secs - 1)) + " sec ");
    1e94:	40 91 0f 0a 	lds	r20, 0x0A0F	; 0x800a0f <UltimoPassaggioStato>
    1e98:	50 91 10 0a 	lds	r21, 0x0A10	; 0x800a10 <UltimoPassaggioStato+0x1>
    1e9c:	60 91 11 0a 	lds	r22, 0x0A11	; 0x800a11 <UltimoPassaggioStato+0x2>
    1ea0:	70 91 12 0a 	lds	r23, 0x0A12	; 0x800a12 <UltimoPassaggioStato+0x3>
    1ea4:	80 91 0b 0a 	lds	r24, 0x0A0B	; 0x800a0b <Timer>
    1ea8:	90 91 0c 0a 	lds	r25, 0x0A0C	; 0x800a0c <Timer+0x1>
    1eac:	a0 91 0d 0a 	lds	r26, 0x0A0D	; 0x800a0d <Timer+0x2>
    1eb0:	b0 91 0e 0a 	lds	r27, 0x0A0E	; 0x800a0e <Timer+0x3>
    1eb4:	48 0f       	add	r20, r24
    1eb6:	59 1f       	adc	r21, r25
    1eb8:	6a 1f       	adc	r22, r26
    1eba:	7b 1f       	adc	r23, r27
    1ebc:	41 50       	subi	r20, 0x01	; 1
    1ebe:	51 09       	sbc	r21, r1
    1ec0:	61 09       	sbc	r22, r1
    1ec2:	71 09       	sbc	r23, r1
    1ec4:	80 91 13 0a 	lds	r24, 0x0A13	; 0x800a13 <secs>
    1ec8:	90 91 14 0a 	lds	r25, 0x0A14	; 0x800a14 <secs+0x1>
    1ecc:	a0 91 15 0a 	lds	r26, 0x0A15	; 0x800a15 <secs+0x2>
    1ed0:	b0 91 16 0a 	lds	r27, 0x0A16	; 0x800a16 <secs+0x3>
    1ed4:	48 1b       	sub	r20, r24
    1ed6:	59 0b       	sbc	r21, r25
    1ed8:	6a 0b       	sbc	r22, r26
    1eda:	7b 0b       	sbc	r23, r27
    1edc:	2a e0       	ldi	r18, 0x0A	; 10
    1ede:	ce 01       	movw	r24, r28
    1ee0:	0e 96       	adiw	r24, 0x0e	; 14
    1ee2:	0e 94 c5 38 	call	0x718a	; 0x718a <_ZN6StringC1Emh>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1ee6:	69 ed       	ldi	r22, 0xD9	; 217
    1ee8:	76 e0       	ldi	r23, 0x06	; 6
    1eea:	ce 01       	movw	r24, r28
    1eec:	01 96       	adiw	r24, 0x01	; 1
    1eee:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <_ZN6StringC1EPKc>
    1ef2:	be 01       	movw	r22, r28
    1ef4:	62 5f       	subi	r22, 0xF2	; 242
    1ef6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ef8:	ce 01       	movw	r24, r28
    1efa:	01 96       	adiw	r24, 0x01	; 1
    1efc:	0e 94 70 39 	call	0x72e0	; 0x72e0 <_ZplRK15StringSumHelperRK6String>
    1f00:	69 e7       	ldi	r22, 0x79	; 121
    1f02:	76 e0       	ldi	r23, 0x06	; 6
    1f04:	0e 94 81 39 	call	0x7302	; 0x7302 <_ZplRK15StringSumHelperPKc>
    1f08:	bc 01       	movw	r22, r24
    1f0a:	82 ed       	ldi	r24, 0xD2	; 210
    1f0c:	9a e0       	ldi	r25, 0x0A	; 10
    1f0e:	0e 94 c7 34 	call	0x698e	; 0x698e <_ZN5Print5printERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1f12:	ce 01       	movw	r24, r28
    1f14:	01 96       	adiw	r24, 0x01	; 1
    1f16:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
    1f1a:	ce 01       	movw	r24, r28
    1f1c:	0e 96       	adiw	r24, 0x0e	; 14
    1f1e:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
          disable_ETH();
          _delay_ms(2);
          enable_ETH();
          /*****************************************************************/

        double lt = impulsiToLitri(impulsi);
    1f22:	80 91 a9 0a 	lds	r24, 0x0AA9	; 0x800aa9 <impulsi>
    1f26:	90 91 aa 0a 	lds	r25, 0x0AAA	; 0x800aaa <impulsi+0x1>
    1f2a:	0e 94 39 07 	call	0xe72	; 0xe72 <_Z14impulsiToLitrii>
    1f2e:	6b 01       	movw	r12, r22
    1f30:	7c 01       	movw	r14, r24

        righeDisplay[1] = "LITRI :" + String(lt);
    1f32:	22 e0       	ldi	r18, 0x02	; 2
    1f34:	ab 01       	movw	r20, r22
    1f36:	bc 01       	movw	r22, r24
    1f38:	ce 01       	movw	r24, r28
    1f3a:	0e 96       	adiw	r24, 0x0e	; 14
    1f3c:	0e 94 f0 38 	call	0x71e0	; 0x71e0 <_ZN6StringC1Edh>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1f40:	63 ee       	ldi	r22, 0xE3	; 227
    1f42:	76 e0       	ldi	r23, 0x06	; 6
    1f44:	ce 01       	movw	r24, r28
    1f46:	01 96       	adiw	r24, 0x01	; 1
    1f48:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <_ZN6StringC1EPKc>
    1f4c:	be 01       	movw	r22, r28
    1f4e:	62 5f       	subi	r22, 0xF2	; 242
    1f50:	7f 4f       	sbci	r23, 0xFF	; 255
    1f52:	ce 01       	movw	r24, r28
    1f54:	01 96       	adiw	r24, 0x01	; 1
    1f56:	0e 94 70 39 	call	0x72e0	; 0x72e0 <_ZplRK15StringSumHelperRK6String>
    1f5a:	bc 01       	movw	r22, r24
    1f5c:	8b e5       	ldi	r24, 0x5B	; 91
    1f5e:	9a e0       	ldi	r25, 0x0A	; 10
    1f60:	0e 94 f2 37 	call	0x6fe4	; 0x6fe4 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1f64:	ce 01       	movw	r24, r28
    1f66:	01 96       	adiw	r24, 0x01	; 1
    1f68:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
    1f6c:	ce 01       	movw	r24, r28
    1f6e:	0e 96       	adiw	r24, 0x0e	; 14
    1f70:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
        righeDisplay[2] = "imp :" + String(impulsi);
    1f74:	60 91 a9 0a 	lds	r22, 0x0AA9	; 0x800aa9 <impulsi>
    1f78:	70 91 aa 0a 	lds	r23, 0x0AAA	; 0x800aaa <impulsi+0x1>
    1f7c:	4a e0       	ldi	r20, 0x0A	; 10
    1f7e:	ce 01       	movw	r24, r28
    1f80:	0e 96       	adiw	r24, 0x0e	; 14
    1f82:	0e 94 71 38 	call	0x70e2	; 0x70e2 <_ZN6StringC1Eih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1f86:	6a ef       	ldi	r22, 0xFA	; 250
    1f88:	75 e0       	ldi	r23, 0x05	; 5
    1f8a:	ce 01       	movw	r24, r28
    1f8c:	01 96       	adiw	r24, 0x01	; 1
    1f8e:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <_ZN6StringC1EPKc>
    1f92:	be 01       	movw	r22, r28
    1f94:	62 5f       	subi	r22, 0xF2	; 242
    1f96:	7f 4f       	sbci	r23, 0xFF	; 255
    1f98:	ce 01       	movw	r24, r28
    1f9a:	01 96       	adiw	r24, 0x01	; 1
    1f9c:	0e 94 70 39 	call	0x72e0	; 0x72e0 <_ZplRK15StringSumHelperRK6String>
    1fa0:	bc 01       	movw	r22, r24
    1fa2:	81 e6       	ldi	r24, 0x61	; 97
    1fa4:	9a e0       	ldi	r25, 0x0A	; 10
    1fa6:	0e 94 f2 37 	call	0x6fe4	; 0x6fe4 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1faa:	ce 01       	movw	r24, r28
    1fac:	01 96       	adiw	r24, 0x01	; 1
    1fae:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
    1fb2:	ce 01       	movw	r24, r28
    1fb4:	0e 96       	adiw	r24, 0x0e	; 14
    1fb6:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1fba:	60 e0       	ldi	r22, 0x00	; 0
    1fbc:	76 e0       	ldi	r23, 0x06	; 6
    1fbe:	ce 01       	movw	r24, r28
    1fc0:	01 96       	adiw	r24, 0x01	; 1
    1fc2:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <_ZN6StringC1EPKc>
        righeDisplay[3] = "Erogazione: " + StatoAttuale;
    1fc6:	65 eb       	ldi	r22, 0xB5	; 181
    1fc8:	7a e0       	ldi	r23, 0x0A	; 10
    1fca:	ce 01       	movw	r24, r28
    1fcc:	01 96       	adiw	r24, 0x01	; 1
    1fce:	0e 94 70 39 	call	0x72e0	; 0x72e0 <_ZplRK15StringSumHelperRK6String>
    1fd2:	bc 01       	movw	r22, r24
    1fd4:	87 e6       	ldi	r24, 0x67	; 103
    1fd6:	9a e0       	ldi	r25, 0x0A	; 10
    1fd8:	0e 94 f2 37 	call	0x6fe4	; 0x6fe4 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1fdc:	ce 01       	movw	r24, r28
    1fde:	01 96       	adiw	r24, 0x01	; 1
    1fe0:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>

        lcd.setCursor(0, 1);
    1fe4:	41 e0       	ldi	r20, 0x01	; 1
    1fe6:	60 e0       	ldi	r22, 0x00	; 0
    1fe8:	82 ed       	ldi	r24, 0xD2	; 210
    1fea:	9a e0       	ldi	r25, 0x0A	; 10
    1fec:	0e 94 0f 2b 	call	0x561e	; 0x561e <_ZN3LCD9setCursorEhh>
        lcd.print(righeDisplay[1]);
    1ff0:	6b e5       	ldi	r22, 0x5B	; 91
    1ff2:	7a e0       	ldi	r23, 0x0A	; 10
    1ff4:	82 ed       	ldi	r24, 0xD2	; 210
    1ff6:	9a e0       	ldi	r25, 0x0A	; 10
    1ff8:	0e 94 c7 34 	call	0x698e	; 0x698e <_ZN5Print5printERK6String>
        lcd.setCursor(0, 2);
    1ffc:	42 e0       	ldi	r20, 0x02	; 2
    1ffe:	60 e0       	ldi	r22, 0x00	; 0
    2000:	82 ed       	ldi	r24, 0xD2	; 210
    2002:	9a e0       	ldi	r25, 0x0A	; 10
    2004:	0e 94 0f 2b 	call	0x561e	; 0x561e <_ZN3LCD9setCursorEhh>
        lcd.print(righeDisplay[2]);
    2008:	61 e6       	ldi	r22, 0x61	; 97
    200a:	7a e0       	ldi	r23, 0x0A	; 10
    200c:	82 ed       	ldi	r24, 0xD2	; 210
    200e:	9a e0       	ldi	r25, 0x0A	; 10
    2010:	0e 94 c7 34 	call	0x698e	; 0x698e <_ZN5Print5printERK6String>
        lcd.setCursor(0, 3);
    2014:	43 e0       	ldi	r20, 0x03	; 3
    2016:	60 e0       	ldi	r22, 0x00	; 0
    2018:	82 ed       	ldi	r24, 0xD2	; 210
    201a:	9a e0       	ldi	r25, 0x0A	; 10
    201c:	0e 94 0f 2b 	call	0x561e	; 0x561e <_ZN3LCD9setCursorEhh>
        lcd.print(righeDisplay[3]);
    2020:	67 e6       	ldi	r22, 0x67	; 103
    2022:	7a e0       	ldi	r23, 0x0A	; 10
    2024:	82 ed       	ldi	r24, 0xD2	; 210
    2026:	9a e0       	ldi	r25, 0x0A	; 10
    2028:	0e 94 c7 34 	call	0x698e	; 0x698e <_ZN5Print5printERK6String>

        // CONTATTO PISTOLA DIESEL

        if ((PINA & _BV(PA1)) && (Carburante == "D"))
    202c:	01 9b       	sbis	0x00, 1	; 0
    202e:	08 c0       	rjmp	.+16     	; 0x2040 <loop+0x8dc>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    2030:	67 ec       	ldi	r22, 0xC7	; 199
    2032:	76 e0       	ldi	r23, 0x06	; 6
    2034:	89 e7       	ldi	r24, 0x79	; 121
    2036:	9a e0       	ldi	r25, 0x0A	; 10
    2038:	0e 94 a4 39 	call	0x7348	; 0x7348 <_ZNK6String6equalsEPKc>
    203c:	81 11       	cpse	r24, r1
    203e:	6d c2       	rjmp	.+1242   	; 0x251a <loop+0xdb6>
          avanzaStato(10);
        }

        // CONTATTO PISTOLA BENZINA

        if  ((PINB & _BV(PB1)) && (Carburante == "B"))
    2040:	19 9b       	sbis	0x03, 1	; 3
    2042:	7d c1       	rjmp	.+762    	; 0x233e <loop+0xbda>
    2044:	65 ec       	ldi	r22, 0xC5	; 197
    2046:	76 e0       	ldi	r23, 0x06	; 6
    2048:	89 e7       	ldi	r24, 0x79	; 121
    204a:	9a e0       	ldi	r25, 0x0A	; 10
    204c:	0e 94 a4 39 	call	0x7348	; 0x7348 <_ZNK6String6equalsEPKc>
    2050:	81 11       	cpse	r24, r1
    2052:	92 c2       	rjmp	.+1316   	; 0x2578 <loop+0xe14>
    2054:	74 c1       	rjmp	.+744    	; 0x233e <loop+0xbda>

      }
      break;
    case 7 :
      {
        righeDisplay[1] =  "";
    2056:	6a e3       	ldi	r22, 0x3A	; 58
    2058:	72 e0       	ldi	r23, 0x02	; 2
    205a:	8b e5       	ldi	r24, 0x5B	; 91
    205c:	9a e0       	ldi	r25, 0x0A	; 10
    205e:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>
        righeDisplay[2] = "Invio........";
    2062:	6b ee       	ldi	r22, 0xEB	; 235
    2064:	76 e0       	ldi	r23, 0x06	; 6
    2066:	81 e6       	ldi	r24, 0x61	; 97
    2068:	9a e0       	ldi	r25, 0x0A	; 10
    206a:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>
        righeDisplay[3] =  "";
    206e:	6a e3       	ldi	r22, 0x3A	; 58
    2070:	72 e0       	ldi	r23, 0x02	; 2
    2072:	87 e6       	ldi	r24, 0x67	; 103
    2074:	9a e0       	ldi	r25, 0x0A	; 10
    2076:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>

        if (BIT_IS_CLEAR(PORTC, 4))
    207a:	44 99       	sbic	0x08, 4	; 8
    207c:	60 c1       	rjmp	.+704    	; 0x233e <loop+0xbda>
        {
          displayLCD(righeDisplay, stato_procedura, 10);
    207e:	60 91 ab 0a 	lds	r22, 0x0AAB	; 0x800aab <stato_procedura>
    2082:	70 91 ac 0a 	lds	r23, 0x0AAC	; 0x800aac <stato_procedura+0x1>
    2086:	4a e0       	ldi	r20, 0x0A	; 10
    2088:	50 e0       	ldi	r21, 0x00	; 0
    208a:	85 e5       	ldi	r24, 0x55	; 85
    208c:	9a e0       	ldi	r25, 0x0A	; 10
    208e:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_Z10displayLCDP6Stringii>

          Messaggio = "";
    2092:	6a e3       	ldi	r22, 0x3A	; 58
    2094:	72 e0       	ldi	r23, 0x02	; 2
    2096:	8d e6       	ldi	r24, 0x6D	; 109
    2098:	9a e0       	ldi	r25, 0x0A	; 10
    209a:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>
    209e:	0f e7       	ldi	r16, 0x7F	; 127
    20a0:	1a e0       	ldi	r17, 0x0A	; 10
    20a2:	93 ea       	ldi	r25, 0xA3	; 163
    20a4:	e9 2e       	mov	r14, r25
    20a6:	9a e0       	ldi	r25, 0x0A	; 10
    20a8:	f9 2e       	mov	r15, r25
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
    20aa:	b8 01       	movw	r22, r16
    20ac:	ce 01       	movw	r24, r28
    20ae:	01 96       	adiw	r24, 0x01	; 1
    20b0:	0e 94 07 38 	call	0x700e	; 0x700e <_ZN6StringC1ERKS_>

          for (int k = 0; k < 6; k++)
            Messaggio.concat(RaccoltaDati[k] + ";");
    20b4:	69 ef       	ldi	r22, 0xF9	; 249
    20b6:	76 e0       	ldi	r23, 0x06	; 6
    20b8:	ce 01       	movw	r24, r28
    20ba:	01 96       	adiw	r24, 0x01	; 1
    20bc:	0e 94 81 39 	call	0x7302	; 0x7302 <_ZplRK15StringSumHelperPKc>
    20c0:	bc 01       	movw	r22, r24
    20c2:	8d e6       	ldi	r24, 0x6D	; 109
    20c4:	9a e0       	ldi	r25, 0x0A	; 10
    20c6:	0e 94 4a 39 	call	0x7294	; 0x7294 <_ZN6String6concatERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    20ca:	ce 01       	movw	r24, r28
    20cc:	01 96       	adiw	r24, 0x01	; 1
    20ce:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
    20d2:	0a 5f       	subi	r16, 0xFA	; 250
    20d4:	1f 4f       	sbci	r17, 0xFF	; 255
        {
          displayLCD(righeDisplay, stato_procedura, 10);

          Messaggio = "";

          for (int k = 0; k < 6; k++)
    20d6:	e0 16       	cp	r14, r16
    20d8:	f1 06       	cpc	r15, r17
    20da:	39 f7       	brne	.-50     	; 0x20aa <loop+0x946>
            Messaggio.concat(RaccoltaDati[k] + ";");

          Messaggio.concat(CodSede);
    20dc:	6e e3       	ldi	r22, 0x3E	; 62
    20de:	71 e0       	ldi	r23, 0x01	; 1
    20e0:	8d e6       	ldi	r24, 0x6D	; 109
    20e2:	9a e0       	ldi	r25, 0x0A	; 10
    20e4:	0e 94 50 39 	call	0x72a0	; 0x72a0 <_ZN6String6concatEPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    20e8:	6b ef       	ldi	r22, 0xFB	; 251
    20ea:	76 e0       	ldi	r23, 0x06	; 6
    20ec:	ce 01       	movw	r24, r28
    20ee:	01 96       	adiw	r24, 0x01	; 1
    20f0:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <_ZN6StringC1EPKc>
          Serial.println("Messaggio:" + Messaggio);
    20f4:	6d e6       	ldi	r22, 0x6D	; 109
    20f6:	7a e0       	ldi	r23, 0x0A	; 10
    20f8:	ce 01       	movw	r24, r28
    20fa:	01 96       	adiw	r24, 0x01	; 1
    20fc:	0e 94 70 39 	call	0x72e0	; 0x72e0 <_ZplRK15StringSumHelperRK6String>
    2100:	bc 01       	movw	r22, r24
    2102:	85 ea       	ldi	r24, 0xA5	; 165
    2104:	9c e0       	ldi	r25, 0x0C	; 12
    2106:	0e 94 f0 34 	call	0x69e0	; 0x69e0 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    210a:	ce 01       	movw	r24, r28
    210c:	01 96       	adiw	r24, 0x01	; 1
    210e:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
    2112:	8f ef       	ldi	r24, 0xFF	; 255
    2114:	93 ed       	ldi	r25, 0xD3	; 211
    2116:	e0 e3       	ldi	r30, 0x30	; 48
    2118:	81 50       	subi	r24, 0x01	; 1
    211a:	90 40       	sbci	r25, 0x00	; 0
    211c:	e0 40       	sbci	r30, 0x00	; 0
    211e:	e1 f7       	brne	.-8      	; 0x2118 <loop+0x9b4>
    2120:	00 c0       	rjmp	.+0      	; 0x2122 <loop+0x9be>
    2122:	00 00       	nop
          // Messaggio = "DD92743A;28530;D;15.03;1234;000;SA10012";

          _delay_ms(1000);

          //if (PostErogazione(5001,serverREST,clientLOCAL,Messaggio))
          if (PostErogazioneGAC(80, serverREST, clientLOCAL, Messaggio))
    2124:	6d e6       	ldi	r22, 0x6D	; 109
    2126:	7a e0       	ldi	r23, 0x0A	; 10
    2128:	ce 01       	movw	r24, r28
    212a:	0e 96       	adiw	r24, 0x0e	; 14
    212c:	0e 94 07 38 	call	0x700e	; 0x700e <_ZN6StringC1ERKS_>
#ifdef BIN // Prevent warnings if BIN is previously defined in "iotnx4.h" or similar
#undef BIN
#endif
#define BIN 2

class Print
    2130:	80 91 32 0a 	lds	r24, 0x0A32	; 0x800a32 <clientLOCAL+0x2>
    2134:	90 91 33 0a 	lds	r25, 0x0A33	; 0x800a33 <clientLOCAL+0x3>
    2138:	9c 83       	std	Y+4, r25	; 0x04
    213a:	8b 83       	std	Y+3, r24	; 0x03
    SKIP_WHITESPACE // Only tabs, spaces, line feeds & carriage returns are skipped.
};

#define NO_IGNORE_CHAR  '\x01' // a char not found in a valid ASCII numeric field

class Stream : public Print
    213c:	80 91 34 0a 	lds	r24, 0x0A34	; 0x800a34 <clientLOCAL+0x4>
    2140:	90 91 35 0a 	lds	r25, 0x0A35	; 0x800a35 <clientLOCAL+0x5>
    2144:	a0 91 36 0a 	lds	r26, 0x0A36	; 0x800a36 <clientLOCAL+0x6>
    2148:	b0 91 37 0a 	lds	r27, 0x0A37	; 0x800a37 <clientLOCAL+0x7>
    214c:	8d 83       	std	Y+5, r24	; 0x05
    214e:	9e 83       	std	Y+6, r25	; 0x06
    2150:	af 83       	std	Y+7, r26	; 0x07
    2152:	b8 87       	std	Y+8, r27	; 0x08
    2154:	80 91 38 0a 	lds	r24, 0x0A38	; 0x800a38 <clientLOCAL+0x8>
    2158:	90 91 39 0a 	lds	r25, 0x0A39	; 0x800a39 <clientLOCAL+0x9>
    215c:	a0 91 3a 0a 	lds	r26, 0x0A3A	; 0x800a3a <clientLOCAL+0xa>
    2160:	b0 91 3b 0a 	lds	r27, 0x0A3B	; 0x800a3b <clientLOCAL+0xb>
    2164:	89 87       	std	Y+9, r24	; 0x09
    2166:	9a 87       	std	Y+10, r25	; 0x0a
    2168:	ab 87       	std	Y+11, r26	; 0x0b
    216a:	bc 87       	std	Y+12, r27	; 0x0c
#include "Arduino.h"	
#include "Print.h"
#include "Client.h"
#include "IPAddress.h"

class EthernetClient : public Client {
    216c:	81 e5       	ldi	r24, 0x51	; 81
    216e:	99 e0       	ldi	r25, 0x09	; 9
    2170:	9a 83       	std	Y+2, r25	; 0x02
    2172:	89 83       	std	Y+1, r24	; 0x01
    2174:	80 91 3c 0a 	lds	r24, 0x0A3C	; 0x800a3c <clientLOCAL+0xc>
    2178:	8d 87       	std	Y+13, r24	; 0x0d
    217a:	9e 01       	movw	r18, r28
    217c:	22 5f       	subi	r18, 0xF2	; 242
    217e:	3f 4f       	sbci	r19, 0xFF	; 255
    2180:	ae 01       	movw	r20, r28
    2182:	4f 5f       	subi	r20, 0xFF	; 255
    2184:	5f 4f       	sbci	r21, 0xFF	; 255
    2186:	6c e2       	ldi	r22, 0x2C	; 44
    2188:	71 e0       	ldi	r23, 0x01	; 1
    218a:	80 e5       	ldi	r24, 0x50	; 80
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	0e 94 8c 05 	call	0xb18	; 0xb18 <_Z17PostErogazioneGACiPc14EthernetClient6String>
    2192:	18 2f       	mov	r17, r24
    2194:	ce 01       	movw	r24, r28
    2196:	0e 96       	adiw	r24, 0x0e	; 14
    2198:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
    219c:	11 23       	and	r17, r17
    219e:	51 f1       	breq	.+84     	; 0x21f4 <loop+0xa90>
          {
            disable_ETH();
    21a0:	0e 94 92 01 	call	0x324	; 0x324 <_ZL11disable_ETHv>
            righeDisplay[1] = "";
    21a4:	6a e3       	ldi	r22, 0x3A	; 58
    21a6:	72 e0       	ldi	r23, 0x02	; 2
    21a8:	8b e5       	ldi	r24, 0x5B	; 91
    21aa:	9a e0       	ldi	r25, 0x0A	; 10
    21ac:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>
            righeDisplay[2] = " Dati Inviati ";
    21b0:	66 e0       	ldi	r22, 0x06	; 6
    21b2:	77 e0       	ldi	r23, 0x07	; 7
    21b4:	81 e6       	ldi	r24, 0x61	; 97
    21b6:	9a e0       	ldi	r25, 0x0A	; 10
    21b8:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>
            righeDisplay[3] =  "";
    21bc:	6a e3       	ldi	r22, 0x3A	; 58
    21be:	72 e0       	ldi	r23, 0x02	; 2
    21c0:	87 e6       	ldi	r24, 0x67	; 103
    21c2:	9a e0       	ldi	r25, 0x0A	; 10
    21c4:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>
            displayLCD(righeDisplay, stato_procedura, 100);
    21c8:	60 91 ab 0a 	lds	r22, 0x0AAB	; 0x800aab <stato_procedura>
    21cc:	70 91 ac 0a 	lds	r23, 0x0AAC	; 0x800aac <stato_procedura+0x1>
    21d0:	44 e6       	ldi	r20, 0x64	; 100
    21d2:	50 e0       	ldi	r21, 0x00	; 0
    21d4:	85 e5       	ldi	r24, 0x55	; 85
    21d6:	9a e0       	ldi	r25, 0x0A	; 10
    21d8:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_Z10displayLCDP6Stringii>
    21dc:	ff ef       	ldi	r31, 0xFF	; 255
    21de:	29 ef       	ldi	r18, 0xF9	; 249
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	f1 50       	subi	r31, 0x01	; 1
    21e4:	20 40       	sbci	r18, 0x00	; 0
    21e6:	30 40       	sbci	r19, 0x00	; 0
    21e8:	e1 f7       	brne	.-8      	; 0x21e2 <loop+0xa7e>
    21ea:	00 c0       	rjmp	.+0      	; 0x21ec <loop+0xa88>
    21ec:	00 00       	nop
            _delay_ms(20);
            Serial.println("PostErogazioneGAC - OK" );
    21ee:	65 e1       	ldi	r22, 0x15	; 21
    21f0:	77 e0       	ldi	r23, 0x07	; 7
    21f2:	94 c0       	rjmp	.+296    	; 0x231c <loop+0xbb8>
          }
          else
          {
            ErogazioniEEPROM[0].da_memorizzare = Messaggio;
    21f4:	6d e6       	ldi	r22, 0x6D	; 109
    21f6:	7a e0       	ldi	r23, 0x0A	; 10
    21f8:	80 91 4c 0b 	lds	r24, 0x0B4C	; 0x800b4c <ErogazioniEEPROM>
    21fc:	90 91 4d 0b 	lds	r25, 0x0B4D	; 0x800b4d <ErogazioniEEPROM+0x1>
    2200:	0e 94 f2 37 	call	0x6fe4	; 0x6fe4 <_ZN6StringaSERKS_>
            if (write_erogazione_eeprom(ErogazioniEEPROM[0])) {
    2204:	00 91 4c 0b 	lds	r16, 0x0B4C	; 0x800b4c <ErogazioniEEPROM>
    2208:	10 91 4d 0b 	lds	r17, 0x0B4D	; 0x800b4d <ErogazioniEEPROM+0x1>
 *  Author: Giovanni Barbato
 */ 

#include <EEPROM.h>

typedef struct Erogazioni_struct
    220c:	b8 01       	movw	r22, r16
    220e:	ce 01       	movw	r24, r28
    2210:	01 96       	adiw	r24, 0x01	; 1
    2212:	0e 94 07 38 	call	0x700e	; 0x700e <_ZN6StringC1ERKS_>
    2216:	f8 01       	movw	r30, r16
    2218:	86 81       	ldd	r24, Z+6	; 0x06
    221a:	97 81       	ldd	r25, Z+7	; 0x07
    221c:	98 87       	std	Y+8, r25	; 0x08
    221e:	8f 83       	std	Y+7, r24	; 0x07
    2220:	ce 01       	movw	r24, r28
    2222:	01 96       	adiw	r24, 0x01	; 1
    2224:	95 d9       	rcall	.-3286   	; 0x1550 <_Z23write_erogazione_eeprom17Erogazioni_struct>
    2226:	18 2f       	mov	r17, r24
    2228:	ce 01       	movw	r24, r28
    222a:	01 96       	adiw	r24, 0x01	; 1
    222c:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
    2230:	11 23       	and	r17, r17
    2232:	31 f0       	breq	.+12     	; 0x2240 <loop+0xadc>
              Serial.println("WRITE OK");
    2234:	6c e2       	ldi	r22, 0x2C	; 44
    2236:	77 e0       	ldi	r23, 0x07	; 7
    2238:	85 ea       	ldi	r24, 0xA5	; 165
    223a:	9c e0       	ldi	r25, 0x0C	; 12
    223c:	0e 94 00 35 	call	0x6a00	; 0x6a00 <_ZN5Print7printlnEPKc>
  Serial.println(Salvata);
  return Salvata;
}

/**************************LOOP PROCEDURA************************************/
void loop() {
    2240:	00 e0       	ldi	r16, 0x00	; 0
    2242:	10 e0       	ldi	r17, 0x00	; 0
    2244:	81 e5       	ldi	r24, 0x51	; 81
    2246:	c8 2e       	mov	r12, r24
    2248:	89 e0       	ldi	r24, 0x09	; 9
    224a:	d8 2e       	mov	r13, r24
            ErogazioniEEPROM[0].da_memorizzare = Messaggio;
            if (write_erogazione_eeprom(ErogazioniEEPROM[0])) {
              Serial.println("WRITE OK");
            }
            int kkk = 0;
            while ((!PostErogazioneGAC(80, serverREST, clientLOCAL, Messaggio)) && (kkk < 5)) {
    224c:	6d e6       	ldi	r22, 0x6D	; 109
    224e:	7a e0       	ldi	r23, 0x0A	; 10
    2250:	ce 01       	movw	r24, r28
    2252:	0e 96       	adiw	r24, 0x0e	; 14
    2254:	0e 94 07 38 	call	0x700e	; 0x700e <_ZN6StringC1ERKS_>
    2258:	80 91 32 0a 	lds	r24, 0x0A32	; 0x800a32 <clientLOCAL+0x2>
    225c:	90 91 33 0a 	lds	r25, 0x0A33	; 0x800a33 <clientLOCAL+0x3>
    2260:	9c 83       	std	Y+4, r25	; 0x04
    2262:	8b 83       	std	Y+3, r24	; 0x03
    2264:	80 91 34 0a 	lds	r24, 0x0A34	; 0x800a34 <clientLOCAL+0x4>
    2268:	90 91 35 0a 	lds	r25, 0x0A35	; 0x800a35 <clientLOCAL+0x5>
    226c:	a0 91 36 0a 	lds	r26, 0x0A36	; 0x800a36 <clientLOCAL+0x6>
    2270:	b0 91 37 0a 	lds	r27, 0x0A37	; 0x800a37 <clientLOCAL+0x7>
    2274:	8d 83       	std	Y+5, r24	; 0x05
    2276:	9e 83       	std	Y+6, r25	; 0x06
    2278:	af 83       	std	Y+7, r26	; 0x07
    227a:	b8 87       	std	Y+8, r27	; 0x08
    227c:	80 91 38 0a 	lds	r24, 0x0A38	; 0x800a38 <clientLOCAL+0x8>
    2280:	90 91 39 0a 	lds	r25, 0x0A39	; 0x800a39 <clientLOCAL+0x9>
    2284:	a0 91 3a 0a 	lds	r26, 0x0A3A	; 0x800a3a <clientLOCAL+0xa>
    2288:	b0 91 3b 0a 	lds	r27, 0x0A3B	; 0x800a3b <clientLOCAL+0xb>
    228c:	89 87       	std	Y+9, r24	; 0x09
    228e:	9a 87       	std	Y+10, r25	; 0x0a
    2290:	ab 87       	std	Y+11, r26	; 0x0b
    2292:	bc 87       	std	Y+12, r27	; 0x0c
    2294:	da 82       	std	Y+2, r13	; 0x02
    2296:	c9 82       	std	Y+1, r12	; 0x01
    2298:	80 91 3c 0a 	lds	r24, 0x0A3C	; 0x800a3c <clientLOCAL+0xc>
    229c:	8d 87       	std	Y+13, r24	; 0x0d
    229e:	9e 01       	movw	r18, r28
    22a0:	22 5f       	subi	r18, 0xF2	; 242
    22a2:	3f 4f       	sbci	r19, 0xFF	; 255
    22a4:	ae 01       	movw	r20, r28
    22a6:	4f 5f       	subi	r20, 0xFF	; 255
    22a8:	5f 4f       	sbci	r21, 0xFF	; 255
    22aa:	6c e2       	ldi	r22, 0x2C	; 44
    22ac:	71 e0       	ldi	r23, 0x01	; 1
    22ae:	80 e5       	ldi	r24, 0x50	; 80
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	0e 94 8c 05 	call	0xb18	; 0xb18 <_Z17PostErogazioneGACiPc14EthernetClient6String>
    22b6:	81 11       	cpse	r24, r1
    22b8:	05 c0       	rjmp	.+10     	; 0x22c4 <loop+0xb60>
    22ba:	ff 24       	eor	r15, r15
    22bc:	f3 94       	inc	r15
    22be:	05 30       	cpi	r16, 0x05	; 5
    22c0:	11 05       	cpc	r17, r1
    22c2:	0c f0       	brlt	.+2      	; 0x22c6 <loop+0xb62>
    22c4:	f1 2c       	mov	r15, r1
    22c6:	ce 01       	movw	r24, r28
    22c8:	0e 96       	adiw	r24, 0x0e	; 14
    22ca:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
    22ce:	ff 20       	and	r15, r15
    22d0:	19 f1       	breq	.+70     	; 0x2318 <loop+0xbb4>
              kkk++;
    22d2:	0f 5f       	subi	r16, 0xFF	; 255
    22d4:	1f 4f       	sbci	r17, 0xFF	; 255
              Serial.println("TENTATIVO " + String(kkk));
    22d6:	4a e0       	ldi	r20, 0x0A	; 10
    22d8:	b8 01       	movw	r22, r16
    22da:	ce 01       	movw	r24, r28
    22dc:	0e 96       	adiw	r24, 0x0e	; 14
    22de:	0e 94 71 38 	call	0x70e2	; 0x70e2 <_ZN6StringC1Eih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    22e2:	65 e3       	ldi	r22, 0x35	; 53
    22e4:	77 e0       	ldi	r23, 0x07	; 7
    22e6:	ce 01       	movw	r24, r28
    22e8:	01 96       	adiw	r24, 0x01	; 1
    22ea:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <_ZN6StringC1EPKc>
    22ee:	be 01       	movw	r22, r28
    22f0:	62 5f       	subi	r22, 0xF2	; 242
    22f2:	7f 4f       	sbci	r23, 0xFF	; 255
    22f4:	ce 01       	movw	r24, r28
    22f6:	01 96       	adiw	r24, 0x01	; 1
    22f8:	0e 94 70 39 	call	0x72e0	; 0x72e0 <_ZplRK15StringSumHelperRK6String>
    22fc:	bc 01       	movw	r22, r24
    22fe:	85 ea       	ldi	r24, 0xA5	; 165
    2300:	9c e0       	ldi	r25, 0x0C	; 12
    2302:	0e 94 f0 34 	call	0x69e0	; 0x69e0 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2306:	ce 01       	movw	r24, r28
    2308:	01 96       	adiw	r24, 0x01	; 1
    230a:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
    230e:	ce 01       	movw	r24, r28
    2310:	0e 96       	adiw	r24, 0x0e	; 14
    2312:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
            ErogazioniEEPROM[0].da_memorizzare = Messaggio;
            if (write_erogazione_eeprom(ErogazioniEEPROM[0])) {
              Serial.println("WRITE OK");
            }
            int kkk = 0;
            while ((!PostErogazioneGAC(80, serverREST, clientLOCAL, Messaggio)) && (kkk < 5)) {
    2316:	9a cf       	rjmp	.-204    	; 0x224c <loop+0xae8>
              kkk++;
              Serial.println("TENTATIVO " + String(kkk));
            }
            Serial.println("PostErogazioneGAC - KO" );
    2318:	60 e4       	ldi	r22, 0x40	; 64
    231a:	77 e0       	ldi	r23, 0x07	; 7
    231c:	85 ea       	ldi	r24, 0xA5	; 165
    231e:	9c e0       	ldi	r25, 0x0C	; 12
    2320:	0e 94 00 35 	call	0x6a00	; 0x6a00 <_ZN5Print7printlnEPKc>
          }
          disable_ETH();
    2324:	0e 94 92 01 	call	0x324	; 0x324 <_ZL11disable_ETHv>
          avanzaStato(TmaxSalvataggio);
    2328:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <TmaxSalvataggio>
    232c:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <TmaxSalvataggio+0x1>
    2330:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <TmaxSalvataggio+0x2>
    2334:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <TmaxSalvataggio+0x3>
    2338:	4b c1       	rjmp	.+662    	; 0x25d0 <loop+0xe6c>
        Azzera();
      }
      break;
    case 9:
      {
        Azzera();
    233a:	0e 94 f6 07 	call	0xfec	; 0xfec <_Z6Azzerav>
      {
      }
      break;
  }

  nowTimer = DS3231M.now();
    233e:	67 e1       	ldi	r22, 0x17	; 23
    2340:	7a e0       	ldi	r23, 0x0A	; 10
    2342:	ce 01       	movw	r24, r28
    2344:	01 96       	adiw	r24, 0x01	; 1
    2346:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <_ZN13DS3231M_Class3nowEv>
    234a:	86 e0       	ldi	r24, 0x06	; 6
    234c:	fe 01       	movw	r30, r28
    234e:	31 96       	adiw	r30, 0x01	; 1
    2350:	a5 e0       	ldi	r26, 0x05	; 5
    2352:	ba e0       	ldi	r27, 0x0A	; 10
    2354:	01 90       	ld	r0, Z+
    2356:	0d 92       	st	X+, r0
    2358:	8a 95       	dec	r24
    235a:	e1 f7       	brne	.-8      	; 0x2354 <loop+0xbf0>
  secs = nowTimer.secondstime();
    235c:	85 e0       	ldi	r24, 0x05	; 5
    235e:	9a e0       	ldi	r25, 0x0A	; 10
    2360:	0e 94 9c 1d 	call	0x3b38	; 0x3b38 <_ZNK8DateTime11secondstimeEv>
    2364:	60 93 13 0a 	sts	0x0A13, r22	; 0x800a13 <secs>
    2368:	70 93 14 0a 	sts	0x0A14, r23	; 0x800a14 <secs+0x1>
    236c:	80 93 15 0a 	sts	0x0A15, r24	; 0x800a15 <secs+0x2>
    2370:	90 93 16 0a 	sts	0x0A16, r25	; 0x800a16 <secs+0x3>
  if ((UltimoPassaggioStato + Timer - secs) <= 1) Azzera();
    2374:	00 91 0f 0a 	lds	r16, 0x0A0F	; 0x800a0f <UltimoPassaggioStato>
    2378:	10 91 10 0a 	lds	r17, 0x0A10	; 0x800a10 <UltimoPassaggioStato+0x1>
    237c:	20 91 11 0a 	lds	r18, 0x0A11	; 0x800a11 <UltimoPassaggioStato+0x2>
    2380:	30 91 12 0a 	lds	r19, 0x0A12	; 0x800a12 <UltimoPassaggioStato+0x3>
    2384:	c0 90 0b 0a 	lds	r12, 0x0A0B	; 0x800a0b <Timer>
    2388:	d0 90 0c 0a 	lds	r13, 0x0A0C	; 0x800a0c <Timer+0x1>
    238c:	e0 90 0d 0a 	lds	r14, 0x0A0D	; 0x800a0d <Timer+0x2>
    2390:	f0 90 0e 0a 	lds	r15, 0x0A0E	; 0x800a0e <Timer+0x3>
    2394:	0c 0d       	add	r16, r12
    2396:	1d 1d       	adc	r17, r13
    2398:	2e 1d       	adc	r18, r14
    239a:	3f 1d       	adc	r19, r15
    239c:	68 01       	movw	r12, r16
    239e:	79 01       	movw	r14, r18
    23a0:	c6 1a       	sub	r12, r22
    23a2:	d7 0a       	sbc	r13, r23
    23a4:	e8 0a       	sbc	r14, r24
    23a6:	f9 0a       	sbc	r15, r25
    23a8:	d7 01       	movw	r26, r14
    23aa:	c6 01       	movw	r24, r12
    23ac:	02 97       	sbiw	r24, 0x02	; 2
    23ae:	a1 05       	cpc	r26, r1
    23b0:	b1 05       	cpc	r27, r1
    23b2:	08 f0       	brcs	.+2      	; 0x23b6 <loop+0xc52>
    23b4:	10 c1       	rjmp	.+544    	; 0x25d6 <loop+0xe72>
    23b6:	0e 94 f6 07 	call	0xfec	; 0xfec <_Z6Azzerav>

}
    23ba:	0d c1       	rjmp	.+538    	; 0x25d6 <loop+0xe72>
          Buzzer(2, 100);
        }

        if ((ATe != "ERRORE") && (BIT_IS_CLEAR(PORTC, 4)))
        {
          Serial.println("");
    23bc:	6a e3       	ldi	r22, 0x3A	; 58
    23be:	72 e0       	ldi	r23, 0x02	; 2
    23c0:	85 ea       	ldi	r24, 0xA5	; 165
    23c2:	9c e0       	ldi	r25, 0x0C	; 12
    23c4:	0e 94 00 35 	call	0x6a00	; 0x6a00 <_ZN5Print7printlnEPKc>
          Serial.print("***************************************************************");
    23c8:	67 e5       	ldi	r22, 0x57	; 87
    23ca:	77 e0       	ldi	r23, 0x07	; 7
    23cc:	85 ea       	ldi	r24, 0xA5	; 165
    23ce:	9c e0       	ldi	r25, 0x0C	; 12
    23d0:	0e 94 d5 34 	call	0x69aa	; 0x69aa <_ZN5Print5printEPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    23d4:	67 e9       	ldi	r22, 0x97	; 151
    23d6:	77 e0       	ldi	r23, 0x07	; 7
    23d8:	ce 01       	movw	r24, r28
    23da:	01 96       	adiw	r24, 0x01	; 1
    23dc:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <_ZN6StringC1EPKc>
          Serial.println(" Tessera ID : " + ATe);
    23e0:	be 01       	movw	r22, r28
    23e2:	62 5f       	subi	r22, 0xF2	; 242
    23e4:	7f 4f       	sbci	r23, 0xFF	; 255
    23e6:	ce 01       	movw	r24, r28
    23e8:	01 96       	adiw	r24, 0x01	; 1
    23ea:	0e 94 70 39 	call	0x72e0	; 0x72e0 <_ZplRK15StringSumHelperRK6String>
    23ee:	bc 01       	movw	r22, r24
    23f0:	85 ea       	ldi	r24, 0xA5	; 165
    23f2:	9c e0       	ldi	r25, 0x0C	; 12
    23f4:	0e 94 f0 34 	call	0x69e0	; 0x69e0 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    23f8:	ce 01       	movw	r24, r28
    23fa:	01 96       	adiw	r24, 0x01	; 1
    23fc:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
          Serial.print("***************************************************************");
    2400:	67 e5       	ldi	r22, 0x57	; 87
    2402:	77 e0       	ldi	r23, 0x07	; 7
    2404:	85 ea       	ldi	r24, 0xA5	; 165
    2406:	9c e0       	ldi	r25, 0x0C	; 12
    2408:	0e 94 d5 34 	call	0x69aa	; 0x69aa <_ZN5Print5printEPKc>
          Serial.println("Riconoscimento Tessera .............");
    240c:	66 ea       	ldi	r22, 0xA6	; 166
    240e:	77 e0       	ldi	r23, 0x07	; 7
    2410:	85 ea       	ldi	r24, 0xA5	; 165
    2412:	9c e0       	ldi	r25, 0x0C	; 12
    2414:	0e 94 00 35 	call	0x6a00	; 0x6a00 <_ZN5Print7printlnEPKc>

          //RaccoltaDati[0] = ATe;
          RaccoltaDati[0] = "DD92743A";
    2418:	6b ec       	ldi	r22, 0xCB	; 203
    241a:	77 e0       	ldi	r23, 0x07	; 7
    241c:	8f e7       	ldi	r24, 0x7F	; 127
    241e:	9a e0       	ldi	r25, 0x0A	; 10
    2420:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>
          RaccoltaDati[5] = "000";
    2424:	64 ed       	ldi	r22, 0xD4	; 212
    2426:	77 e0       	ldi	r23, 0x07	; 7
    2428:	8d e9       	ldi	r24, 0x9D	; 157
    242a:	9a e0       	ldi	r25, 0x0A	; 10
    242c:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>

          lcd.backlight();
    2430:	82 ed       	ldi	r24, 0xD2	; 210
    2432:	9a e0       	ldi	r25, 0x0A	; 10
    2434:	0e 94 f1 2a 	call	0x55e2	; 0x55e2 <_ZN3LCD9backlightEv>
          lcd.display();
    2438:	82 ed       	ldi	r24, 0xD2	; 210
    243a:	9a e0       	ldi	r25, 0x0A	; 10
    243c:	0e 94 57 2b 	call	0x56ae	; 0x56ae <_ZN3LCD7displayEv>
    2440:	8f e3       	ldi	r24, 0x3F	; 63
    2442:	9c e9       	ldi	r25, 0x9C	; 156
    2444:	01 97       	sbiw	r24, 0x01	; 1
    2446:	f1 f7       	brne	.-4      	; 0x2444 <loop+0xce0>
    2448:	00 c0       	rjmp	.+0      	; 0x244a <loop+0xce6>
    244a:	00 00       	nop
          _delay_ms(10);

          righeDisplay[1] = "  RICONOSCIMENTO ";
    244c:	68 ed       	ldi	r22, 0xD8	; 216
    244e:	77 e0       	ldi	r23, 0x07	; 7
    2450:	8b e5       	ldi	r24, 0x5B	; 91
    2452:	9a e0       	ldi	r25, 0x0A	; 10
    2454:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>
          righeDisplay[2] = ".....In Corso.....";
    2458:	6a ee       	ldi	r22, 0xEA	; 234
    245a:	77 e0       	ldi	r23, 0x07	; 7
    245c:	81 e6       	ldi	r24, 0x61	; 97
    245e:	9a e0       	ldi	r25, 0x0A	; 10
    2460:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>
          //righeDisplay[3] = "   Rfid: " + ATe;
          righeDisplay[3] = "Attendere.........";
    2464:	6d ef       	ldi	r22, 0xFD	; 253
    2466:	77 e0       	ldi	r23, 0x07	; 7
    2468:	87 e6       	ldi	r24, 0x67	; 103
    246a:	9a e0       	ldi	r25, 0x0A	; 10
    246c:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>

          displayLCD(righeDisplay, stato_procedura, 100);
    2470:	60 91 ab 0a 	lds	r22, 0x0AAB	; 0x800aab <stato_procedura>
    2474:	70 91 ac 0a 	lds	r23, 0x0AAC	; 0x800aac <stato_procedura+0x1>
    2478:	44 e6       	ldi	r20, 0x64	; 100
    247a:	50 e0       	ldi	r21, 0x00	; 0
    247c:	85 e5       	ldi	r24, 0x55	; 85
    247e:	9a e0       	ldi	r25, 0x0A	; 10
    2480:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_Z10displayLCDP6Stringii>

          InizializzaEthernet();
    2484:	0e 94 94 01 	call	0x328	; 0x328 <_Z19InizializzaEthernetv>
    2488:	9f ef       	ldi	r25, 0xFF	; 255
    248a:	e3 ed       	ldi	r30, 0xD3	; 211
    248c:	f0 e3       	ldi	r31, 0x30	; 48
    248e:	91 50       	subi	r25, 0x01	; 1
    2490:	e0 40       	sbci	r30, 0x00	; 0
    2492:	f0 40       	sbci	r31, 0x00	; 0
    2494:	e1 f7       	brne	.-8      	; 0x248e <loop+0xd2a>
    2496:	00 c0       	rjmp	.+0      	; 0x2498 <loop+0xd34>
    2498:	00 00       	nop
    249a:	4a ca       	rjmp	.-2924   	; 0x1930 <loop+0x1cc>
          Serial.println("TIPO CARBURANTE: " + mezzo.Carb);
          Serial.println("TARGA: " + mezzo.TARGA);

          Carburante = mezzo.Carb;
          if ((mezzo.Carb == "B") || (mezzo.Carb == "D")) {
            RaccoltaDati[1] = mezzo.TARGA;
    249c:	6a ef       	ldi	r22, 0xFA	; 250
    249e:	7a e0       	ldi	r23, 0x0A	; 10
    24a0:	85 e8       	ldi	r24, 0x85	; 133
    24a2:	9a e0       	ldi	r25, 0x0A	; 10
    24a4:	0e 94 f2 37 	call	0x6fe4	; 0x6fe4 <_ZN6StringaSERKS_>
            RaccoltaDati[2] = mezzo.Carb;
    24a8:	64 ef       	ldi	r22, 0xF4	; 244
    24aa:	7a e0       	ldi	r23, 0x0A	; 10
    24ac:	8b e8       	ldi	r24, 0x8B	; 139
    24ae:	9a e0       	ldi	r25, 0x0A	; 10
    24b0:	0e 94 f2 37 	call	0x6fe4	; 0x6fe4 <_ZN6StringaSERKS_>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    24b4:	6d eb       	ldi	r22, 0xBD	; 189
    24b6:	76 e0       	ldi	r23, 0x06	; 6
    24b8:	ce 01       	movw	r24, r28
    24ba:	01 96       	adiw	r24, 0x01	; 1
    24bc:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <_ZN6StringC1EPKc>
            righeDisplay[3] = "TARGA: " +  mezzo.TARGA;
    24c0:	6a ef       	ldi	r22, 0xFA	; 250
    24c2:	7a e0       	ldi	r23, 0x0A	; 10
    24c4:	ce 01       	movw	r24, r28
    24c6:	01 96       	adiw	r24, 0x01	; 1
    24c8:	0e 94 70 39 	call	0x72e0	; 0x72e0 <_ZplRK15StringSumHelperRK6String>
    24cc:	bc 01       	movw	r22, r24
    24ce:	87 e6       	ldi	r24, 0x67	; 103
    24d0:	9a e0       	ldi	r25, 0x0A	; 10
    24d2:	0e 94 f2 37 	call	0x6fe4	; 0x6fe4 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    24d6:	ce 01       	movw	r24, r28
    24d8:	01 96       	adiw	r24, 0x01	; 1
    24da:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
            displayLCD(righeDisplay, stato_procedura, 10);
    24de:	60 91 ab 0a 	lds	r22, 0x0AAB	; 0x800aab <stato_procedura>
    24e2:	70 91 ac 0a 	lds	r23, 0x0AAC	; 0x800aac <stato_procedura+0x1>
    24e6:	4a e0       	ldi	r20, 0x0A	; 10
    24e8:	50 e0       	ldi	r21, 0x00	; 0
    24ea:	85 e5       	ldi	r24, 0x55	; 85
    24ec:	9a e0       	ldi	r25, 0x0A	; 10
    24ee:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_Z10displayLCDP6Stringii>
    24f2:	2f ef       	ldi	r18, 0xFF	; 255
    24f4:	39 e6       	ldi	r19, 0x69	; 105
    24f6:	88 e1       	ldi	r24, 0x18	; 24
    24f8:	21 50       	subi	r18, 0x01	; 1
    24fa:	30 40       	sbci	r19, 0x00	; 0
    24fc:	80 40       	sbci	r24, 0x00	; 0
    24fe:	e1 f7       	brne	.-8      	; 0x24f8 <loop+0xd94>
    2500:	00 c0       	rjmp	.+0      	; 0x2502 <loop+0xd9e>
    2502:	00 00       	nop
            _delay_ms(500);
            avanzaStato(TselDistributore);
    2504:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <TselDistributore>
    2508:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <TselDistributore+0x1>
    250c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <TselDistributore+0x2>
    2510:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <TselDistributore+0x3>
    2514:	0e 94 a7 03 	call	0x74e	; 0x74e <_Z11avanzaStatom>
    2518:	b7 cb       	rjmp	.-2194   	; 0x1c88 <loop+0x524>

        // CONTATTO PISTOLA DIESEL

        if ((PINA & _BV(PA1)) && (Carburante == "D"))
        {
          RaccoltaDati[3] = String(lt);
    251a:	22 e0       	ldi	r18, 0x02	; 2
    251c:	b7 01       	movw	r22, r14
    251e:	a6 01       	movw	r20, r12
    2520:	ce 01       	movw	r24, r28
    2522:	01 96       	adiw	r24, 0x01	; 1
    2524:	0e 94 f0 38 	call	0x71e0	; 0x71e0 <_ZN6StringC1Edh>
    2528:	be 01       	movw	r22, r28
    252a:	6f 5f       	subi	r22, 0xFF	; 255
    252c:	7f 4f       	sbci	r23, 0xFF	; 255
    252e:	81 e9       	ldi	r24, 0x91	; 145
    2530:	9a e0       	ldi	r25, 0x0A	; 10
    2532:	0e 94 0f 38 	call	0x701e	; 0x701e <_ZN6StringaSEOS_>
    2536:	ce 01       	movw	r24, r28
    2538:	01 96       	adiw	r24, 0x01	; 1
    253a:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
          StatoAttuale = "STOP EROGAZIONE";
    253e:	60 e1       	ldi	r22, 0x10	; 16
    2540:	78 e0       	ldi	r23, 0x08	; 8
    2542:	85 eb       	ldi	r24, 0xB5	; 181
    2544:	9a e0       	ldi	r25, 0x0A	; 10
    2546:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>
          Rele_Abilitazione2(1, 7); //  apri relè
    254a:	67 e0       	ldi	r22, 0x07	; 7
    254c:	70 e0       	ldi	r23, 0x00	; 0
    254e:	81 e0       	ldi	r24, 0x01	; 1
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_Z18Rele_Abilitazione2ii>
          Rele_Abilitazione1(1, 7); //  apri relè
    2556:	67 e0       	ldi	r22, 0x07	; 7
    2558:	70 e0       	ldi	r23, 0x00	; 0
    255a:	81 e0       	ldi	r24, 0x01	; 1
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	0e 94 64 07 	call	0xec8	; 0xec8 <_Z18Rele_Abilitazione1ii>
          TOGGLE_BIT(PORTA, 1);
    2562:	92 b1       	in	r25, 0x02	; 2
    2564:	82 e0       	ldi	r24, 0x02	; 2
    2566:	89 27       	eor	r24, r25
    2568:	82 b9       	out	0x02, r24	; 2
          avanzaStato(10);
    256a:	6a e0       	ldi	r22, 0x0A	; 10
    256c:	70 e0       	ldi	r23, 0x00	; 0
    256e:	80 e0       	ldi	r24, 0x00	; 0
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	0e 94 a7 03 	call	0x74e	; 0x74e <_Z11avanzaStatom>
    2576:	64 cd       	rjmp	.-1336   	; 0x2040 <loop+0x8dc>

        // CONTATTO PISTOLA BENZINA

        if  ((PINB & _BV(PB1)) && (Carburante == "B"))
        {
          RaccoltaDati[3] = String(lt);
    2578:	22 e0       	ldi	r18, 0x02	; 2
    257a:	b7 01       	movw	r22, r14
    257c:	a6 01       	movw	r20, r12
    257e:	ce 01       	movw	r24, r28
    2580:	01 96       	adiw	r24, 0x01	; 1
    2582:	0e 94 f0 38 	call	0x71e0	; 0x71e0 <_ZN6StringC1Edh>
    2586:	be 01       	movw	r22, r28
    2588:	6f 5f       	subi	r22, 0xFF	; 255
    258a:	7f 4f       	sbci	r23, 0xFF	; 255
    258c:	81 e9       	ldi	r24, 0x91	; 145
    258e:	9a e0       	ldi	r25, 0x0A	; 10
    2590:	0e 94 0f 38 	call	0x701e	; 0x701e <_ZN6StringaSEOS_>
    2594:	ce 01       	movw	r24, r28
    2596:	01 96       	adiw	r24, 0x01	; 1
    2598:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>

          StatoAttuale = "STOP EROGAZIONE";
    259c:	60 e1       	ldi	r22, 0x10	; 16
    259e:	78 e0       	ldi	r23, 0x08	; 8
    25a0:	85 eb       	ldi	r24, 0xB5	; 181
    25a2:	9a e0       	ldi	r25, 0x0A	; 10
    25a4:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>
          Rele_Abilitazione2(1, 7); //  apri relè
    25a8:	67 e0       	ldi	r22, 0x07	; 7
    25aa:	70 e0       	ldi	r23, 0x00	; 0
    25ac:	81 e0       	ldi	r24, 0x01	; 1
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_Z18Rele_Abilitazione2ii>
          Rele_Abilitazione1(1, 7); //  apri relè
    25b4:	67 e0       	ldi	r22, 0x07	; 7
    25b6:	70 e0       	ldi	r23, 0x00	; 0
    25b8:	81 e0       	ldi	r24, 0x01	; 1
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	0e 94 64 07 	call	0xec8	; 0xec8 <_Z18Rele_Abilitazione1ii>
          avanzaStato(TmaxInviodati);
    25c0:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <TmaxInviodati>
    25c4:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <TmaxInviodati+0x1>
    25c8:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <TmaxInviodati+0x2>
    25cc:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <TmaxInviodati+0x3>
    25d0:	0e 94 a7 03 	call	0x74e	; 0x74e <_Z11avanzaStatom>
    25d4:	b4 ce       	rjmp	.-664    	; 0x233e <loop+0xbda>

  nowTimer = DS3231M.now();
  secs = nowTimer.secondstime();
  if ((UltimoPassaggioStato + Timer - secs) <= 1) Azzera();

}
    25d6:	6d 96       	adiw	r28, 0x1d	; 29
    25d8:	0f b6       	in	r0, 0x3f	; 63
    25da:	f8 94       	cli
    25dc:	de bf       	out	0x3e, r29	; 62
    25de:	0f be       	out	0x3f, r0	; 63
    25e0:	cd bf       	out	0x3d, r28	; 61
    25e2:	df 91       	pop	r29
    25e4:	cf 91       	pop	r28
    25e6:	1f 91       	pop	r17
    25e8:	0f 91       	pop	r16
    25ea:	ff 90       	pop	r15
    25ec:	ef 90       	pop	r14
    25ee:	df 90       	pop	r13
    25f0:	cf 90       	pop	r12
    25f2:	08 95       	ret

000025f4 <__vector_4>:
  73 litri al minuto
  73/60 = 1,22 lt/sec
  1,22*100 = 122 Hz
***********************************************************************/

ISR(PCINT0_vect) {
    25f4:	1f 92       	push	r1
    25f6:	0f 92       	push	r0
    25f8:	0f b6       	in	r0, 0x3f	; 63
    25fa:	0f 92       	push	r0
    25fc:	11 24       	eor	r1, r1
    25fe:	8f 93       	push	r24
    2600:	9f 93       	push	r25
  if (PINA & _BV(PA5)) {
    2602:	05 9b       	sbis	0x00, 5	; 0
    2604:	0f c0       	rjmp	.+30     	; 0x2624 <__vector_4+0x30>
    impulsi++;
    2606:	80 91 a9 0a 	lds	r24, 0x0AA9	; 0x800aa9 <impulsi>
    260a:	90 91 aa 0a 	lds	r25, 0x0AAA	; 0x800aaa <impulsi+0x1>
    260e:	01 96       	adiw	r24, 0x01	; 1
    2610:	90 93 aa 0a 	sts	0x0AAA, r25	; 0x800aaa <impulsi+0x1>
    2614:	80 93 a9 0a 	sts	0x0AA9, r24	; 0x800aa9 <impulsi>
    2618:	8f e1       	ldi	r24, 0x1F	; 31
    261a:	90 e8       	ldi	r25, 0x80	; 128
    261c:	01 97       	sbiw	r24, 0x01	; 1
    261e:	f1 f7       	brne	.-4      	; 0x261c <__vector_4+0x28>
    2620:	00 c0       	rjmp	.+0      	; 0x2622 <__vector_4+0x2e>
    2622:	00 00       	nop
    _delay_ms(8.2);
  }
  if (PINA & _BV(PA6)) {
    2624:	06 9b       	sbis	0x00, 6	; 0
    2626:	0f c0       	rjmp	.+30     	; 0x2646 <__vector_4+0x52>
    impulsi++;
    2628:	80 91 a9 0a 	lds	r24, 0x0AA9	; 0x800aa9 <impulsi>
    262c:	90 91 aa 0a 	lds	r25, 0x0AAA	; 0x800aaa <impulsi+0x1>
    2630:	01 96       	adiw	r24, 0x01	; 1
    2632:	90 93 aa 0a 	sts	0x0AAA, r25	; 0x800aaa <impulsi+0x1>
    2636:	80 93 a9 0a 	sts	0x0AA9, r24	; 0x800aa9 <impulsi>
    263a:	8f e1       	ldi	r24, 0x1F	; 31
    263c:	90 e8       	ldi	r25, 0x80	; 128
    263e:	01 97       	sbiw	r24, 0x01	; 1
    2640:	f1 f7       	brne	.-4      	; 0x263e <__vector_4+0x4a>
    2642:	00 c0       	rjmp	.+0      	; 0x2644 <__vector_4+0x50>
    2644:	00 00       	nop
    _delay_ms(8.2);
  }
}
    2646:	9f 91       	pop	r25
    2648:	8f 91       	pop	r24
    264a:	0f 90       	pop	r0
    264c:	0f be       	out	0x3f, r0	; 63
    264e:	0f 90       	pop	r0
    2650:	1f 90       	pop	r1
    2652:	18 95       	reti

00002654 <__vector_7>:
/***********************************************************************/

// interrupt per pulsanti abilitazione diesele benzina

ISR(PCINT3_vect) {
    2654:	1f 92       	push	r1
    2656:	0f 92       	push	r0
    2658:	0f b6       	in	r0, 0x3f	; 63
    265a:	0f 92       	push	r0
    265c:	11 24       	eor	r1, r1
    265e:	0b b6       	in	r0, 0x3b	; 59
    2660:	0f 92       	push	r0
    2662:	2f 93       	push	r18
    2664:	3f 93       	push	r19
    2666:	4f 93       	push	r20
    2668:	5f 93       	push	r21
    266a:	6f 93       	push	r22
    266c:	7f 93       	push	r23
    266e:	8f 93       	push	r24
    2670:	9f 93       	push	r25
    2672:	af 93       	push	r26
    2674:	bf 93       	push	r27
    2676:	ef 93       	push	r30
    2678:	ff 93       	push	r31

  if (stato_procedura == 4)
    267a:	80 91 ab 0a 	lds	r24, 0x0AAB	; 0x800aab <stato_procedura>
    267e:	90 91 ac 0a 	lds	r25, 0x0AAC	; 0x800aac <stato_procedura+0x1>
    2682:	04 97       	sbiw	r24, 0x04	; 4
    2684:	09 f0       	breq	.+2      	; 0x2688 <__vector_7+0x34>
    2686:	bc c0       	rjmp	.+376    	; 0x2800 <__vector_7+0x1ac>
  {
    if (PIND & _BV(PD6))
    2688:	4e 9b       	sbis	0x09, 6	; 9
    268a:	45 c0       	rjmp	.+138    	; 0x2716 <__vector_7+0xc2>
    {
      intConsecutivePresses++;                      // increment counter for number of presses
    268c:	80 91 08 0b 	lds	r24, 0x0B08	; 0x800b08 <intConsecutivePresses>
    2690:	90 91 09 0b 	lds	r25, 0x0B09	; 0x800b09 <intConsecutivePresses+0x1>
    2694:	01 96       	adiw	r24, 0x01	; 1
    2696:	90 93 09 0b 	sts	0x0B09, r25	; 0x800b09 <intConsecutivePresses+0x1>
    269a:	80 93 08 0b 	sts	0x0B08, r24	; 0x800b08 <intConsecutivePresses>
      if (intConsecutivePresses >= NUM_OF_CONSECUTIVE_PRESSES)
    269e:	80 91 08 0b 	lds	r24, 0x0B08	; 0x800b08 <intConsecutivePresses>
    26a2:	90 91 09 0b 	lds	r25, 0x0B09	; 0x800b09 <intConsecutivePresses+0x1>
    26a6:	18 16       	cp	r1, r24
    26a8:	19 06       	cpc	r1, r25
    26aa:	0c f0       	brlt	.+2      	; 0x26ae <__vector_7+0x5a>
    26ac:	4b c0       	rjmp	.+150    	; 0x2744 <__vector_7+0xf0>
      { // if enough presses to constitute a press
        abilitaPulser('B');
    26ae:	82 e4       	ldi	r24, 0x42	; 66
    26b0:	0e 94 2b 07 	call	0xe56	; 0xe56 <_Z13abilitaPulserc>
        Rele_Abilitazione2(0, 7); // chiudi relè
    26b4:	67 e0       	ldi	r22, 0x07	; 7
    26b6:	70 e0       	ldi	r23, 0x00	; 0
    26b8:	80 e0       	ldi	r24, 0x00	; 0
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_Z18Rele_Abilitazione2ii>
        Carburante = "B";
    26c0:	65 ec       	ldi	r22, 0xC5	; 197
    26c2:	76 e0       	ldi	r23, 0x06	; 6
    26c4:	89 e7       	ldi	r24, 0x79	; 121
    26c6:	9a e0       	ldi	r25, 0x0A	; 10
    26c8:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>
        RaccoltaDati[2] = Carburante;
    26cc:	69 e7       	ldi	r22, 0x79	; 121
    26ce:	7a e0       	ldi	r23, 0x0A	; 10
    26d0:	8b e8       	ldi	r24, 0x8B	; 139
    26d2:	9a e0       	ldi	r25, 0x0A	; 10
    26d4:	0e 94 f2 37 	call	0x6fe4	; 0x6fe4 <_ZN6StringaSERKS_>
        StatoAttuale = "POMPA 2";
    26d8:	69 ec       	ldi	r22, 0xC9	; 201
    26da:	76 e0       	ldi	r23, 0x06	; 6
    26dc:	85 eb       	ldi	r24, 0xB5	; 181
    26de:	9a e0       	ldi	r25, 0x0A	; 10
    26e0:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>
        righeDisplay[1] =  "****** KM ******";
    26e4:	6d ec       	ldi	r22, 0xCD	; 205
    26e6:	75 e0       	ldi	r23, 0x05	; 5
    26e8:	8b e5       	ldi	r24, 0x5B	; 91
    26ea:	9a e0       	ldi	r25, 0x0A	; 10
    26ec:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>
        righeDisplay[2] = "KM:";
    26f0:	6e ed       	ldi	r22, 0xDE	; 222
    26f2:	75 e0       	ldi	r23, 0x05	; 5
    26f4:	81 e6       	ldi	r24, 0x61	; 97
    26f6:	9a e0       	ldi	r25, 0x0A	; 10
    26f8:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>
        righeDisplay[3] = "#:Conferma";
    26fc:	62 ee       	ldi	r22, 0xE2	; 226
    26fe:	75 e0       	ldi	r23, 0x05	; 5
    2700:	87 e6       	ldi	r24, 0x67	; 103
    2702:	9a e0       	ldi	r25, 0x0A	; 10
    2704:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>
        avanzaStato(10);
    2708:	6a e0       	ldi	r22, 0x0A	; 10
    270a:	70 e0       	ldi	r23, 0x00	; 0
    270c:	80 e0       	ldi	r24, 0x00	; 0
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	0e 94 a7 03 	call	0x74e	; 0x74e <_Z11avanzaStatom>
    2714:	0f c0       	rjmp	.+30     	; 0x2734 <__vector_7+0xe0>
        intConsecutivePresses = 0;                    // and reset press counts
        intConsecutiveNonPresses = 0;
      }
    }
    else  {           // else if button is not pressed (logic low)
      intConsecutiveNonPresses++;
    2716:	80 91 06 0b 	lds	r24, 0x0B06	; 0x800b06 <intConsecutiveNonPresses>
    271a:	90 91 07 0b 	lds	r25, 0x0B07	; 0x800b07 <intConsecutiveNonPresses+0x1>
    271e:	01 96       	adiw	r24, 0x01	; 1
    2720:	90 93 07 0b 	sts	0x0B07, r25	; 0x800b07 <intConsecutiveNonPresses+0x1>
    2724:	80 93 06 0b 	sts	0x0B06, r24	; 0x800b06 <intConsecutiveNonPresses>
      if (intConsecutiveNonPresses >= NUM_OF_CONSECUTIVE_NON_PRESSES) {
    2728:	80 91 06 0b 	lds	r24, 0x0B06	; 0x800b06 <intConsecutiveNonPresses>
    272c:	90 91 07 0b 	lds	r25, 0x0B07	; 0x800b07 <intConsecutiveNonPresses+0x1>
    2730:	02 97       	sbiw	r24, 0x02	; 2
    2732:	44 f0       	brlt	.+16     	; 0x2744 <__vector_7+0xf0>
        intConsecutivePresses = 0;                      // reset press counts
    2734:	10 92 09 0b 	sts	0x0B09, r1	; 0x800b09 <intConsecutivePresses+0x1>
    2738:	10 92 08 0b 	sts	0x0B08, r1	; 0x800b08 <intConsecutivePresses>
        intConsecutiveNonPresses = 0;
    273c:	10 92 07 0b 	sts	0x0B07, r1	; 0x800b07 <intConsecutiveNonPresses+0x1>
    2740:	10 92 06 0b 	sts	0x0B06, r1	; 0x800b06 <intConsecutiveNonPresses>
      }
    }

    if (PIND & _BV(PD7))
    2744:	4f 9b       	sbis	0x09, 7	; 9
    2746:	45 c0       	rjmp	.+138    	; 0x27d2 <__vector_7+0x17e>
    {
      intConsecutivePresses++;                      // increment counter for number of presses
    2748:	80 91 08 0b 	lds	r24, 0x0B08	; 0x800b08 <intConsecutivePresses>
    274c:	90 91 09 0b 	lds	r25, 0x0B09	; 0x800b09 <intConsecutivePresses+0x1>
    2750:	01 96       	adiw	r24, 0x01	; 1
    2752:	90 93 09 0b 	sts	0x0B09, r25	; 0x800b09 <intConsecutivePresses+0x1>
    2756:	80 93 08 0b 	sts	0x0B08, r24	; 0x800b08 <intConsecutivePresses>
      if (intConsecutivePresses >= NUM_OF_CONSECUTIVE_PRESSES)
    275a:	80 91 08 0b 	lds	r24, 0x0B08	; 0x800b08 <intConsecutivePresses>
    275e:	90 91 09 0b 	lds	r25, 0x0B09	; 0x800b09 <intConsecutivePresses+0x1>
    2762:	18 16       	cp	r1, r24
    2764:	19 06       	cpc	r1, r25
    2766:	0c f0       	brlt	.+2      	; 0x276a <__vector_7+0x116>
    2768:	4b c0       	rjmp	.+150    	; 0x2800 <__vector_7+0x1ac>
      { // if enough presses to constitute a press
        abilitaPulser('D');
    276a:	84 e4       	ldi	r24, 0x44	; 68
    276c:	0e 94 2b 07 	call	0xe56	; 0xe56 <_Z13abilitaPulserc>
        Rele_Abilitazione1(0, 7); // chiudi relè
    2770:	67 e0       	ldi	r22, 0x07	; 7
    2772:	70 e0       	ldi	r23, 0x00	; 0
    2774:	80 e0       	ldi	r24, 0x00	; 0
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	0e 94 64 07 	call	0xec8	; 0xec8 <_Z18Rele_Abilitazione1ii>
        Carburante = "D";
    277c:	67 ec       	ldi	r22, 0xC7	; 199
    277e:	76 e0       	ldi	r23, 0x06	; 6
    2780:	89 e7       	ldi	r24, 0x79	; 121
    2782:	9a e0       	ldi	r25, 0x0A	; 10
    2784:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>
        RaccoltaDati[2] = Carburante;
    2788:	69 e7       	ldi	r22, 0x79	; 121
    278a:	7a e0       	ldi	r23, 0x0A	; 10
    278c:	8b e8       	ldi	r24, 0x8B	; 139
    278e:	9a e0       	ldi	r25, 0x0A	; 10
    2790:	0e 94 f2 37 	call	0x6fe4	; 0x6fe4 <_ZN6StringaSERKS_>
        StatoAttuale = "POMPA 1";
    2794:	61 ed       	ldi	r22, 0xD1	; 209
    2796:	76 e0       	ldi	r23, 0x06	; 6
    2798:	85 eb       	ldi	r24, 0xB5	; 181
    279a:	9a e0       	ldi	r25, 0x0A	; 10
    279c:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>
        righeDisplay[1] =  "****** KM ******";
    27a0:	6d ec       	ldi	r22, 0xCD	; 205
    27a2:	75 e0       	ldi	r23, 0x05	; 5
    27a4:	8b e5       	ldi	r24, 0x5B	; 91
    27a6:	9a e0       	ldi	r25, 0x0A	; 10
    27a8:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>
        righeDisplay[2] = "KM:";
    27ac:	6e ed       	ldi	r22, 0xDE	; 222
    27ae:	75 e0       	ldi	r23, 0x05	; 5
    27b0:	81 e6       	ldi	r24, 0x61	; 97
    27b2:	9a e0       	ldi	r25, 0x0A	; 10
    27b4:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>
        righeDisplay[3] = "#:Conferma";
    27b8:	62 ee       	ldi	r22, 0xE2	; 226
    27ba:	75 e0       	ldi	r23, 0x05	; 5
    27bc:	87 e6       	ldi	r24, 0x67	; 103
    27be:	9a e0       	ldi	r25, 0x0A	; 10
    27c0:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>
        avanzaStato(10);
    27c4:	6a e0       	ldi	r22, 0x0A	; 10
    27c6:	70 e0       	ldi	r23, 0x00	; 0
    27c8:	80 e0       	ldi	r24, 0x00	; 0
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	0e 94 a7 03 	call	0x74e	; 0x74e <_Z11avanzaStatom>
    27d0:	0f c0       	rjmp	.+30     	; 0x27f0 <__vector_7+0x19c>
        intConsecutivePresses = 0;                    // and reset press counts
        intConsecutiveNonPresses = 0;
      }
    }
    else  {            // else if button is not pressed (logic low)
      intConsecutiveNonPresses++;
    27d2:	80 91 06 0b 	lds	r24, 0x0B06	; 0x800b06 <intConsecutiveNonPresses>
    27d6:	90 91 07 0b 	lds	r25, 0x0B07	; 0x800b07 <intConsecutiveNonPresses+0x1>
    27da:	01 96       	adiw	r24, 0x01	; 1
    27dc:	90 93 07 0b 	sts	0x0B07, r25	; 0x800b07 <intConsecutiveNonPresses+0x1>
    27e0:	80 93 06 0b 	sts	0x0B06, r24	; 0x800b06 <intConsecutiveNonPresses>
      if (intConsecutiveNonPresses >= NUM_OF_CONSECUTIVE_NON_PRESSES) {
    27e4:	80 91 06 0b 	lds	r24, 0x0B06	; 0x800b06 <intConsecutiveNonPresses>
    27e8:	90 91 07 0b 	lds	r25, 0x0B07	; 0x800b07 <intConsecutiveNonPresses+0x1>
    27ec:	02 97       	sbiw	r24, 0x02	; 2
    27ee:	44 f0       	brlt	.+16     	; 0x2800 <__vector_7+0x1ac>
        intConsecutivePresses = 0;                     // reset press counts
    27f0:	10 92 09 0b 	sts	0x0B09, r1	; 0x800b09 <intConsecutivePresses+0x1>
    27f4:	10 92 08 0b 	sts	0x0B08, r1	; 0x800b08 <intConsecutivePresses>
        intConsecutiveNonPresses = 0;
    27f8:	10 92 07 0b 	sts	0x0B07, r1	; 0x800b07 <intConsecutiveNonPresses+0x1>
    27fc:	10 92 06 0b 	sts	0x0B06, r1	; 0x800b06 <intConsecutiveNonPresses>
      }
    }
  }
    2800:	ff 91       	pop	r31
    2802:	ef 91       	pop	r30
    2804:	bf 91       	pop	r27
    2806:	af 91       	pop	r26
    2808:	9f 91       	pop	r25
    280a:	8f 91       	pop	r24
    280c:	7f 91       	pop	r23
    280e:	6f 91       	pop	r22
    2810:	5f 91       	pop	r21
    2812:	4f 91       	pop	r20
    2814:	3f 91       	pop	r19
    2816:	2f 91       	pop	r18
    2818:	0f 90       	pop	r0
    281a:	0b be       	out	0x3b, r0	; 59
    281c:	0f 90       	pop	r0
    281e:	0f be       	out	0x3f, r0	; 63
    2820:	0f 90       	pop	r0
    2822:	1f 90       	pop	r1
    2824:	18 95       	reti

00002826 <_GLOBAL__sub_I_ParametriCCEC>:
    2826:	8f 92       	push	r8
    2828:	af 92       	push	r10
    282a:	cf 92       	push	r12
    282c:	ef 92       	push	r14
    282e:	0f 93       	push	r16
    2830:	cf 93       	push	r28
    2832:	df 93       	push	r29
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    2834:	00 e0       	ldi	r16, 0x00	; 0
    2836:	20 e0       	ldi	r18, 0x00	; 0
    2838:	40 e0       	ldi	r20, 0x00	; 0
    283a:	60 e0       	ldi	r22, 0x00	; 0
    283c:	80 e5       	ldi	r24, 0x50	; 80
    283e:	9b e0       	ldi	r25, 0x0B	; 11
    2840:	0e 94 42 34 	call	0x6884	; 0x6884 <_ZN9IPAddressC1Ehhhh>

ParametriCCEC_TypeDef Parametri[numero_parametri] =
{ {"DNS NAME SERVER\0", "ccec.sa.dipvvf.it\0", 1000},
{"IP CCEC\0", "192.168.0.50\0", 1020},
{"Impulsi al litro\0", "100\0", 1035}
};
    2844:	65 e6       	ldi	r22, 0x65	; 101
    2846:	71 e0       	ldi	r23, 0x01	; 1
    2848:	82 e2       	ldi	r24, 0x22	; 34
    284a:	9b e0       	ldi	r25, 0x0B	; 11
    284c:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <_ZN6StringC1EPKc>
    2850:	66 e7       	ldi	r22, 0x76	; 118
    2852:	71 e0       	ldi	r23, 0x01	; 1
    2854:	88 e2       	ldi	r24, 0x28	; 40
    2856:	9b e0       	ldi	r25, 0x0B	; 11
    2858:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <_ZN6StringC1EPKc>
    285c:	c2 e2       	ldi	r28, 0x22	; 34
    285e:	db e0       	ldi	r29, 0x0B	; 11
    2860:	88 ee       	ldi	r24, 0xE8	; 232
    2862:	93 e0       	ldi	r25, 0x03	; 3
    2864:	9d 87       	std	Y+13, r25	; 0x0d
    2866:	8c 87       	std	Y+12, r24	; 0x0c
    2868:	69 e8       	ldi	r22, 0x89	; 137
    286a:	71 e0       	ldi	r23, 0x01	; 1
    286c:	80 e3       	ldi	r24, 0x30	; 48
    286e:	9b e0       	ldi	r25, 0x0B	; 11
    2870:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <_ZN6StringC1EPKc>
    2874:	62 e9       	ldi	r22, 0x92	; 146
    2876:	71 e0       	ldi	r23, 0x01	; 1
    2878:	86 e3       	ldi	r24, 0x36	; 54
    287a:	9b e0       	ldi	r25, 0x0B	; 11
    287c:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <_ZN6StringC1EPKc>
    2880:	8c ef       	ldi	r24, 0xFC	; 252
    2882:	93 e0       	ldi	r25, 0x03	; 3
    2884:	9b 8f       	std	Y+27, r25	; 0x1b
    2886:	8a 8f       	std	Y+26, r24	; 0x1a
    2888:	60 ea       	ldi	r22, 0xA0	; 160
    288a:	71 e0       	ldi	r23, 0x01	; 1
    288c:	8e e3       	ldi	r24, 0x3E	; 62
    288e:	9b e0       	ldi	r25, 0x0B	; 11
    2890:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <_ZN6StringC1EPKc>
    2894:	62 eb       	ldi	r22, 0xB2	; 178
    2896:	71 e0       	ldi	r23, 0x01	; 1
    2898:	84 e4       	ldi	r24, 0x44	; 68
    289a:	9b e0       	ldi	r25, 0x0B	; 11
    289c:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <_ZN6StringC1EPKc>
    28a0:	8b e0       	ldi	r24, 0x0B	; 11
    28a2:	94 e0       	ldi	r25, 0x04	; 4
    28a4:	99 a7       	std	Y+41, r25	; 0x29
    28a6:	88 a7       	std	Y+40, r24	; 0x28

Erogazioni_TypeDef Erogazioni[numero_Erog_salvate] =
{	{"DD92743A;28530;D;50.37;1111;000;SA1001\0", 2000},
	{"DD92743A;22530;D;5.37;1111;000;SA1001\0", 2040},
	{"DD92743A;26530;D;180.37;1111;000;SA1001\0", 2080}
};
    28a8:	67 eb       	ldi	r22, 0xB7	; 183
    28aa:	71 e0       	ldi	r23, 0x01	; 1
    28ac:	8a e0       	ldi	r24, 0x0A	; 10
    28ae:	9b e0       	ldi	r25, 0x0B	; 11
    28b0:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <_ZN6StringC1EPKc>
    28b4:	ca e0       	ldi	r28, 0x0A	; 10
    28b6:	db e0       	ldi	r29, 0x0B	; 11
    28b8:	80 ed       	ldi	r24, 0xD0	; 208
    28ba:	97 e0       	ldi	r25, 0x07	; 7
    28bc:	9f 83       	std	Y+7, r25	; 0x07
    28be:	8e 83       	std	Y+6, r24	; 0x06
    28c0:	6f ed       	ldi	r22, 0xDF	; 223
    28c2:	71 e0       	ldi	r23, 0x01	; 1
    28c4:	82 e1       	ldi	r24, 0x12	; 18
    28c6:	9b e0       	ldi	r25, 0x0B	; 11
    28c8:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <_ZN6StringC1EPKc>
    28cc:	88 ef       	ldi	r24, 0xF8	; 248
    28ce:	97 e0       	ldi	r25, 0x07	; 7
    28d0:	9f 87       	std	Y+15, r25	; 0x0f
    28d2:	8e 87       	std	Y+14, r24	; 0x0e
    28d4:	66 e0       	ldi	r22, 0x06	; 6
    28d6:	72 e0       	ldi	r23, 0x02	; 2
    28d8:	8a e1       	ldi	r24, 0x1A	; 26
    28da:	9b e0       	ldi	r25, 0x0B	; 11
    28dc:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <_ZN6StringC1EPKc>
    28e0:	80 e2       	ldi	r24, 0x20	; 32
    28e2:	98 e0       	ldi	r25, 0x08	; 8
    28e4:	9f 8b       	std	Y+23, r25	; 0x17
    28e6:	8e 8b       	std	Y+22, r24	; 0x16
const uint8_t I2C_PCA9534_ADDR = 0x20;

volatile int intConsecutivePresses = 0;
volatile int intConsecutiveNonPresses = 0;

struct mezzoType {
    28e8:	6a e3       	ldi	r22, 0x3A	; 58
    28ea:	72 e0       	ldi	r23, 0x02	; 2
    28ec:	84 ef       	ldi	r24, 0xF4	; 244
    28ee:	9a e0       	ldi	r25, 0x0A	; 10
    28f0:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <_ZN6StringC1EPKc>
    28f4:	6a e3       	ldi	r22, 0x3A	; 58
    28f6:	72 e0       	ldi	r23, 0x02	; 2
    28f8:	8a ef       	ldi	r24, 0xFA	; 250
    28fa:	9a e0       	ldi	r25, 0x0A	; 10
    28fc:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <_ZN6StringC1EPKc>
    2900:	6a e3       	ldi	r22, 0x3A	; 58
    2902:	72 e0       	ldi	r23, 0x02	; 2
    2904:	80 e0       	ldi	r24, 0x00	; 0
    2906:	9b e0       	ldi	r25, 0x0B	; 11
    2908:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <_ZN6StringC1EPKc>
uint8_t uid[] = { 0, 0, 0, 0, 0, 0, 0 };       // Buffer dove memorizzo la UID del Badge
uint8_t uidLength;                             // Length of the UID (4 or 7 bytes depending on ISO14443A card type)
uint8_t uidMezzo[] = { 0, 0, 0, 0, 0, 0, 0 };  // Buffer dove memorizzo la UID del Badge Mezzo
boolean alreadyTimbrata = false;

LiquidCrystal_I2C lcd(0x27, 2, 1, 0, 4, 5, 6, 7, 3, POSITIVE);  // Set the LCD I2C address
    290c:	1f 92       	push	r1
    290e:	83 e0       	ldi	r24, 0x03	; 3
    2910:	8f 93       	push	r24
    2912:	87 e0       	ldi	r24, 0x07	; 7
    2914:	88 2e       	mov	r8, r24
    2916:	96 e0       	ldi	r25, 0x06	; 6
    2918:	a9 2e       	mov	r10, r25
    291a:	25 e0       	ldi	r18, 0x05	; 5
    291c:	c2 2e       	mov	r12, r18
    291e:	34 e0       	ldi	r19, 0x04	; 4
    2920:	e3 2e       	mov	r14, r19
    2922:	21 e0       	ldi	r18, 0x01	; 1
    2924:	42 e0       	ldi	r20, 0x02	; 2
    2926:	67 e2       	ldi	r22, 0x27	; 39
    2928:	82 ed       	ldi	r24, 0xD2	; 210
    292a:	9a e0       	ldi	r25, 0x0A	; 10
    292c:	0e 94 8e 2c 	call	0x591c	; 0x591c <_ZN17LiquidCrystal_I2CC1Ehhhhhhhhh13t_backlighPol>
uint8_t Clessidra[8] = {0x1F, 0x11, 0x0A, 0x04, 0x04, 0x0E, 0x1F, 0x1F,};
NFC_PN532 nfc(PN532_IRQ, PN532_RESET);
    2930:	43 e0       	ldi	r20, 0x03	; 3
    2932:	64 e0       	ldi	r22, 0x04	; 4
    2934:	8b eb       	ldi	r24, 0xBB	; 187
    2936:	9a e0       	ldi	r25, 0x0A	; 10
    2938:	3b d4       	rcall	.+2166   	; 0x31b0 <_ZN9NFC_PN532C1Ehh>

String StatoAttuale = "START...";
    293a:	60 e2       	ldi	r22, 0x20	; 32
    293c:	78 e0       	ldi	r23, 0x08	; 8
    293e:	85 eb       	ldi	r24, 0xB5	; 181
    2940:	9a e0       	ldi	r25, 0x0A	; 10
    2942:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <_ZN6StringC1EPKc>
String strURLAPI = "";
    2946:	6a e3       	ldi	r22, 0x3A	; 58
    2948:	72 e0       	ldi	r23, 0x02	; 2
    294a:	8f ea       	ldi	r24, 0xAF	; 175
    294c:	9a e0       	ldi	r25, 0x0A	; 10
    294e:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <_ZN6StringC1EPKc>
volatile int impulsi = 0;   // Variabile per il conteggio degli impulsi generati dal pulser

/*** GESTIONE HTTP REQUEST ***/

int HTTP_len_response = 12;
String RispostaHTTP = "";
    2952:	6a e3       	ldi	r22, 0x3A	; 58
    2954:	72 e0       	ldi	r23, 0x02	; 2
    2956:	83 ea       	ldi	r24, 0xA3	; 163
    2958:	9a e0       	ldi	r25, 0x0A	; 10
    295a:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <_ZN6StringC1EPKc>
// Ate;TARGA;CARB;LT;KM;
String RaccoltaDati[] = {"", "", "", "", "", ""};
    295e:	6a e3       	ldi	r22, 0x3A	; 58
    2960:	72 e0       	ldi	r23, 0x02	; 2
    2962:	8f e7       	ldi	r24, 0x7F	; 127
    2964:	9a e0       	ldi	r25, 0x0A	; 10
    2966:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <_ZN6StringC1EPKc>
    296a:	6a e3       	ldi	r22, 0x3A	; 58
    296c:	72 e0       	ldi	r23, 0x02	; 2
    296e:	85 e8       	ldi	r24, 0x85	; 133
    2970:	9a e0       	ldi	r25, 0x0A	; 10
    2972:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <_ZN6StringC1EPKc>
    2976:	6a e3       	ldi	r22, 0x3A	; 58
    2978:	72 e0       	ldi	r23, 0x02	; 2
    297a:	8b e8       	ldi	r24, 0x8B	; 139
    297c:	9a e0       	ldi	r25, 0x0A	; 10
    297e:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <_ZN6StringC1EPKc>
    2982:	6a e3       	ldi	r22, 0x3A	; 58
    2984:	72 e0       	ldi	r23, 0x02	; 2
    2986:	81 e9       	ldi	r24, 0x91	; 145
    2988:	9a e0       	ldi	r25, 0x0A	; 10
    298a:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <_ZN6StringC1EPKc>
    298e:	6a e3       	ldi	r22, 0x3A	; 58
    2990:	72 e0       	ldi	r23, 0x02	; 2
    2992:	87 e9       	ldi	r24, 0x97	; 151
    2994:	9a e0       	ldi	r25, 0x0A	; 10
    2996:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <_ZN6StringC1EPKc>
    299a:	6a e3       	ldi	r22, 0x3A	; 58
    299c:	72 e0       	ldi	r23, 0x02	; 2
    299e:	8d e9       	ldi	r24, 0x9D	; 157
    29a0:	9a e0       	ldi	r25, 0x0A	; 10
    29a2:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <_ZN6StringC1EPKc>
String Carburante = "X";
    29a6:	67 e7       	ldi	r22, 0x77	; 119
    29a8:	75 e0       	ldi	r23, 0x05	; 5
    29aa:	89 e7       	ldi	r24, 0x79	; 121
    29ac:	9a e0       	ldi	r25, 0x0A	; 10
    29ae:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <_ZN6StringC1EPKc>
String Risposta = "";
    29b2:	6a e3       	ldi	r22, 0x3A	; 58
    29b4:	72 e0       	ldi	r23, 0x02	; 2
    29b6:	83 e7       	ldi	r24, 0x73	; 115
    29b8:	9a e0       	ldi	r25, 0x0A	; 10
    29ba:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <_ZN6StringC1EPKc>
String Messaggio = "";
    29be:	6a e3       	ldi	r22, 0x3A	; 58
    29c0:	72 e0       	ldi	r23, 0x02	; 2
    29c2:	8d e6       	ldi	r24, 0x6D	; 109
    29c4:	9a e0       	ldi	r25, 0x0A	; 10
    29c6:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <_ZN6StringC1EPKc>
String righeDisplay[] = {"X", "X", "X", "X"};
    29ca:	67 e7       	ldi	r22, 0x77	; 119
    29cc:	75 e0       	ldi	r23, 0x05	; 5
    29ce:	85 e5       	ldi	r24, 0x55	; 85
    29d0:	9a e0       	ldi	r25, 0x0A	; 10
    29d2:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <_ZN6StringC1EPKc>
    29d6:	67 e7       	ldi	r22, 0x77	; 119
    29d8:	75 e0       	ldi	r23, 0x05	; 5
    29da:	8b e5       	ldi	r24, 0x5B	; 91
    29dc:	9a e0       	ldi	r25, 0x0A	; 10
    29de:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <_ZN6StringC1EPKc>
    29e2:	67 e7       	ldi	r22, 0x77	; 119
    29e4:	75 e0       	ldi	r23, 0x05	; 5
    29e6:	81 e6       	ldi	r24, 0x61	; 97
    29e8:	9a e0       	ldi	r25, 0x0A	; 10
    29ea:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <_ZN6StringC1EPKc>
    29ee:	67 e7       	ldi	r22, 0x77	; 119
    29f0:	75 e0       	ldi	r23, 0x05	; 5
    29f2:	87 e6       	ldi	r24, 0x67	; 103
    29f4:	9a e0       	ldi	r25, 0x0A	; 10
    29f6:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <_ZN6StringC1EPKc>
char CodSede[] = "SA1001";
/********************************************************************************************/
/*                    Configurazione Rete                       */
/********************************************************************************************/

IPAddress ipCCEC(192, 168, 0, 50);
    29fa:	02 e3       	ldi	r16, 0x32	; 50
    29fc:	20 e0       	ldi	r18, 0x00	; 0
    29fe:	48 ea       	ldi	r20, 0xA8	; 168
    2a00:	60 ec       	ldi	r22, 0xC0	; 192
    2a02:	8f e4       	ldi	r24, 0x4F	; 79
    2a04:	9a e0       	ldi	r25, 0x0A	; 10
    2a06:	0e 94 42 34 	call	0x6884	; 0x6884 <_ZN9IPAddressC1Ehhhh>
IPAddress myDns(192, 168, 1, 21); // DNS
    2a0a:	05 e1       	ldi	r16, 0x15	; 21
    2a0c:	21 e0       	ldi	r18, 0x01	; 1
    2a0e:	48 ea       	ldi	r20, 0xA8	; 168
    2a10:	60 ec       	ldi	r22, 0xC0	; 192
    2a12:	89 e4       	ldi	r24, 0x49	; 73
    2a14:	9a e0       	ldi	r25, 0x0A	; 10
    2a16:	0e 94 42 34 	call	0x6884	; 0x6884 <_ZN9IPAddressC1Ehhhh>
IPAddress gateway(192, 168, 0, 1); // GATEWAY
    2a1a:	01 e0       	ldi	r16, 0x01	; 1
    2a1c:	20 e0       	ldi	r18, 0x00	; 0
    2a1e:	48 ea       	ldi	r20, 0xA8	; 168
    2a20:	60 ec       	ldi	r22, 0xC0	; 192
    2a22:	83 e4       	ldi	r24, 0x43	; 67
    2a24:	9a e0       	ldi	r25, 0x0A	; 10
    2a26:	0e 94 42 34 	call	0x6884	; 0x6884 <_ZN9IPAddressC1Ehhhh>
IPAddress subnet(255, 255, 0, 0); // SUBNET
    2a2a:	00 e0       	ldi	r16, 0x00	; 0
    2a2c:	20 e0       	ldi	r18, 0x00	; 0
    2a2e:	4f ef       	ldi	r20, 0xFF	; 255
    2a30:	6f ef       	ldi	r22, 0xFF	; 255
    2a32:	8d e3       	ldi	r24, 0x3D	; 61
    2a34:	9a e0       	ldi	r25, 0x0A	; 10
    2a36:	0e 94 42 34 	call	0x6884	; 0x6884 <_ZN9IPAddressC1Ehhhh>

char serverATE[]  = "wbpate-test.dipvvf.it";
char serverGAC[]  = "gacweb-test.dipvvf.it";
char serverREST[] = "ccec.sa.dipvvf.it";

EthernetClient clientLOCAL;
    2a3a:	80 e3       	ldi	r24, 0x30	; 48
    2a3c:	9a e0       	ldi	r25, 0x0A	; 10
    2a3e:	0e 94 f4 23 	call	0x47e8	; 0x47e8 <_ZN14EthernetClientC1Ev>
EthernetClient clientATE;
    2a42:	83 e2       	ldi	r24, 0x23	; 35
    2a44:	9a e0       	ldi	r25, 0x0A	; 10
    2a46:	0e 94 f4 23 	call	0x47e8	; 0x47e8 <_ZN14EthernetClientC1Ev>

byte mac[] = {0x00, 0x0E, 0x0C, 0xB0, 0x25, 0x6F};
/********************************************************************************************/
/************ GESTIONE RTC **********/
DS3231M_Class DS3231M;
    2a4a:	87 e1       	ldi	r24, 0x17	; 23
    2a4c:	9a e0       	ldi	r25, 0x0A	; 10
    2a4e:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <_ZN13DS3231M_ClassC1Ev>
const uint8_t SPRINTF_BUFFER_SIZE =     32;
char          inputBuffer[SPRINTF_BUFFER_SIZE];
unsigned long secs;                            // store the seconds value
unsigned long UltimoPassaggioStato = 0;        // Timer Stati Procedura
unsigned long Timer = 0;                       // Timer
DateTime nowTimer;
    2a52:	40 e0       	ldi	r20, 0x00	; 0
    2a54:	50 e0       	ldi	r21, 0x00	; 0
    2a56:	ba 01       	movw	r22, r20
    2a58:	85 e0       	ldi	r24, 0x05	; 5
    2a5a:	9a e0       	ldi	r25, 0x0A	; 10
    2a5c:	36 d7       	rcall	.+3692   	; 0x38ca <_ZN8DateTimeC1Em>
/********************************************************************************************/

const byte ROWS = 4; //four rows
const byte COLS = 4; //four columns

String TARGA = "";
    2a5e:	6a e3       	ldi	r22, 0x3A	; 58
    2a60:	72 e0       	ldi	r23, 0x02	; 2
    2a62:	8f ef       	ldi	r24, 0xFF	; 255
    2a64:	99 e0       	ldi	r25, 0x09	; 9
    2a66:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <_ZN6StringC1EPKc>
String KM = "";
    2a6a:	6a e3       	ldi	r22, 0x3A	; 58
    2a6c:	72 e0       	ldi	r23, 0x02	; 2
    2a6e:	89 ef       	ldi	r24, 0xF9	; 249
    2a70:	99 e0       	ldi	r25, 0x09	; 9
    2a72:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <_ZN6StringC1EPKc>
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', '.'}
};

PCA9534 gpio;
    2a76:	0f 90       	pop	r0
    2a78:	0f 90       	pop	r0
    2a7a:	86 ef       	ldi	r24, 0xF6	; 246
    2a7c:	99 e0       	ldi	r25, 0x09	; 9
        intConsecutivePresses = 0;                     // reset press counts
        intConsecutiveNonPresses = 0;
      }
    }
  }
    2a7e:	df 91       	pop	r29
    2a80:	cf 91       	pop	r28
    2a82:	0f 91       	pop	r16
    2a84:	ef 90       	pop	r14
    2a86:	cf 90       	pop	r12
    2a88:	af 90       	pop	r10
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', '.'}
};

PCA9534 gpio;
    2a8a:	8f 90       	pop	r8
    2a8c:	f1 c2       	rjmp	.+1506   	; 0x3070 <_ZN7PCA9534C1Ev>

00002a8e <_GLOBAL__sub_D_ParametriCCEC>:
        intConsecutivePresses = 0;                     // reset press counts
        intConsecutiveNonPresses = 0;
      }
    }
  }
    2a8e:	cf 93       	push	r28
    2a90:	df 93       	push	r29

const byte ROWS = 4; //four rows
const byte COLS = 4; //four columns

String TARGA = "";
String KM = "";
    2a92:	89 ef       	ldi	r24, 0xF9	; 249
    2a94:	99 e0       	ldi	r25, 0x09	; 9
    2a96:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
/********************************************************************************************/

const byte ROWS = 4; //four rows
const byte COLS = 4; //four columns

String TARGA = "";
    2a9a:	8f ef       	ldi	r24, 0xFF	; 255
    2a9c:	99 e0       	ldi	r25, 0x09	; 9
    2a9e:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
EthernetClient clientATE;

byte mac[] = {0x00, 0x0E, 0x0C, 0xB0, 0x25, 0x6F};
/********************************************************************************************/
/************ GESTIONE RTC **********/
DS3231M_Class DS3231M;
    2aa2:	87 e1       	ldi	r24, 0x17	; 23
    2aa4:	9a e0       	ldi	r25, 0x0A	; 10
    2aa6:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <_ZN13DS3231M_ClassD1Ev>
// Ate;TARGA;CARB;LT;KM;
String RaccoltaDati[] = {"", "", "", "", "", ""};
String Carburante = "X";
String Risposta = "";
String Messaggio = "";
String righeDisplay[] = {"X", "X", "X", "X"};
    2aaa:	87 e6       	ldi	r24, 0x67	; 103
    2aac:	9a e0       	ldi	r25, 0x0A	; 10
    2aae:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
    2ab2:	81 e6       	ldi	r24, 0x61	; 97
    2ab4:	9a e0       	ldi	r25, 0x0A	; 10
    2ab6:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
    2aba:	8b e5       	ldi	r24, 0x5B	; 91
    2abc:	9a e0       	ldi	r25, 0x0A	; 10
    2abe:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
    2ac2:	85 e5       	ldi	r24, 0x55	; 85
    2ac4:	9a e0       	ldi	r25, 0x0A	; 10
    2ac6:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
String RispostaHTTP = "";
// Ate;TARGA;CARB;LT;KM;
String RaccoltaDati[] = {"", "", "", "", "", ""};
String Carburante = "X";
String Risposta = "";
String Messaggio = "";
    2aca:	8d e6       	ldi	r24, 0x6D	; 109
    2acc:	9a e0       	ldi	r25, 0x0A	; 10
    2ace:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
int HTTP_len_response = 12;
String RispostaHTTP = "";
// Ate;TARGA;CARB;LT;KM;
String RaccoltaDati[] = {"", "", "", "", "", ""};
String Carburante = "X";
String Risposta = "";
    2ad2:	83 e7       	ldi	r24, 0x73	; 115
    2ad4:	9a e0       	ldi	r25, 0x0A	; 10
    2ad6:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>

int HTTP_len_response = 12;
String RispostaHTTP = "";
// Ate;TARGA;CARB;LT;KM;
String RaccoltaDati[] = {"", "", "", "", "", ""};
String Carburante = "X";
    2ada:	89 e7       	ldi	r24, 0x79	; 121
    2adc:	9a e0       	ldi	r25, 0x0A	; 10
    2ade:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
/*** GESTIONE HTTP REQUEST ***/

int HTTP_len_response = 12;
String RispostaHTTP = "";
// Ate;TARGA;CARB;LT;KM;
String RaccoltaDati[] = {"", "", "", "", "", ""};
    2ae2:	c3 ea       	ldi	r28, 0xA3	; 163
    2ae4:	da e0       	ldi	r29, 0x0A	; 10
    2ae6:	26 97       	sbiw	r28, 0x06	; 6
    2ae8:	ce 01       	movw	r24, r28
    2aea:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
    2aee:	8a e0       	ldi	r24, 0x0A	; 10
    2af0:	cf 37       	cpi	r28, 0x7F	; 127
    2af2:	d8 07       	cpc	r29, r24
    2af4:	c1 f7       	brne	.-16     	; 0x2ae6 <_GLOBAL__sub_D_ParametriCCEC+0x58>
volatile int impulsi = 0;   // Variabile per il conteggio degli impulsi generati dal pulser

/*** GESTIONE HTTP REQUEST ***/

int HTTP_len_response = 12;
String RispostaHTTP = "";
    2af6:	83 ea       	ldi	r24, 0xA3	; 163
    2af8:	9a e0       	ldi	r25, 0x0A	; 10
    2afa:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
LiquidCrystal_I2C lcd(0x27, 2, 1, 0, 4, 5, 6, 7, 3, POSITIVE);  // Set the LCD I2C address
uint8_t Clessidra[8] = {0x1F, 0x11, 0x0A, 0x04, 0x04, 0x0E, 0x1F, 0x1F,};
NFC_PN532 nfc(PN532_IRQ, PN532_RESET);

String StatoAttuale = "START...";
String strURLAPI = "";
    2afe:	8f ea       	ldi	r24, 0xAF	; 175
    2b00:	9a e0       	ldi	r25, 0x0A	; 10
    2b02:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>

LiquidCrystal_I2C lcd(0x27, 2, 1, 0, 4, 5, 6, 7, 3, POSITIVE);  // Set the LCD I2C address
uint8_t Clessidra[8] = {0x1F, 0x11, 0x0A, 0x04, 0x04, 0x0E, 0x1F, 0x1F,};
NFC_PN532 nfc(PN532_IRQ, PN532_RESET);

String StatoAttuale = "START...";
    2b06:	85 eb       	ldi	r24, 0xB5	; 181
    2b08:	9a e0       	ldi	r25, 0x0A	; 10
    2b0a:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
const uint8_t I2C_PCA9534_ADDR = 0x20;

volatile int intConsecutivePresses = 0;
volatile int intConsecutiveNonPresses = 0;

struct mezzoType {
    2b0e:	80 e0       	ldi	r24, 0x00	; 0
    2b10:	9b e0       	ldi	r25, 0x0B	; 11
    2b12:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
    2b16:	8a ef       	ldi	r24, 0xFA	; 250
    2b18:	9a e0       	ldi	r25, 0x0A	; 10
    2b1a:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
    2b1e:	84 ef       	ldi	r24, 0xF4	; 244
    2b20:	9a e0       	ldi	r25, 0x0A	; 10
    2b22:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
 *  Author: Giovanni Barbato
 */ 

#include <EEPROM.h>

typedef struct Erogazioni_struct
    2b26:	8a e1       	ldi	r24, 0x1A	; 26
    2b28:	9b e0       	ldi	r25, 0x0B	; 11
    2b2a:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
    2b2e:	82 e1       	ldi	r24, 0x12	; 18
    2b30:	9b e0       	ldi	r25, 0x0B	; 11
    2b32:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
    2b36:	8a e0       	ldi	r24, 0x0A	; 10
    2b38:	9b e0       	ldi	r25, 0x0B	; 11
    2b3a:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>

Erogazioni_TypeDef *ErogazioniEEPROM; //puntatore  a Map memoria

#define numero_parametri 3

ParametriCCEC_TypeDef Parametri[numero_parametri] =
    2b3e:	8e e3       	ldi	r24, 0x3E	; 62
    2b40:	9b e0       	ldi	r25, 0x0B	; 11
    2b42:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <_ZN20ParametriCCEC_structD1Ev>
    2b46:	80 e3       	ldi	r24, 0x30	; 48
    2b48:	9b e0       	ldi	r25, 0x0B	; 11
    2b4a:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <_ZN20ParametriCCEC_structD1Ev>
    2b4e:	82 e2       	ldi	r24, 0x22	; 34
    2b50:	9b e0       	ldi	r25, 0x0B	; 11
        intConsecutivePresses = 0;                     // reset press counts
        intConsecutiveNonPresses = 0;
      }
    }
  }
    2b52:	df 91       	pop	r29
    2b54:	cf 91       	pop	r28
    2b56:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <_ZN20ParametriCCEC_structD1Ev>

00002b5a <setup>:
  }
  printTab(1);
}
/************************************************************/

void setup() {
    2b5a:	cf 92       	push	r12
    2b5c:	df 92       	push	r13
    2b5e:	ef 92       	push	r14
    2b60:	ff 92       	push	r15
    2b62:	0f 93       	push	r16
    2b64:	1f 93       	push	r17
    2b66:	cf 93       	push	r28
    2b68:	df 93       	push	r29
    2b6a:	cd b7       	in	r28, 0x3d	; 61
    2b6c:	de b7       	in	r29, 0x3e	; 62
    2b6e:	6a 97       	sbiw	r28, 0x1a	; 26
    2b70:	0f b6       	in	r0, 0x3f	; 63
    2b72:	f8 94       	cli
    2b74:	de bf       	out	0x3e, r29	; 62
    2b76:	0f be       	out	0x3f, r0	; 63
    2b78:	cd bf       	out	0x3d, r28	; 61
    2b7a:	2f ef       	ldi	r18, 0xFF	; 255
    2b7c:	81 ee       	ldi	r24, 0xE1	; 225
    2b7e:	94 e0       	ldi	r25, 0x04	; 4
    2b80:	21 50       	subi	r18, 0x01	; 1
    2b82:	80 40       	sbci	r24, 0x00	; 0
    2b84:	90 40       	sbci	r25, 0x00	; 0
    2b86:	e1 f7       	brne	.-8      	; 0x2b80 <setup+0x26>
    2b88:	00 c0       	rjmp	.+0      	; 0x2b8a <setup+0x30>
    2b8a:	00 00       	nop
/*********************************************************************************************/
static inline void initSS_FLASH()  {
  DDRB |= (1 << PB4);  // set DDRB bit 4, sets PB4 for output
}
static inline void initSS_ETH()    {
  DDRC |= (1 << PC4);  // set DDRC bit 4, sets PC4 for output
    2b8c:	3c 9a       	sbi	0x07, 4	; 7
    2b8e:	ef e1       	ldi	r30, 0x1F	; 31
    2b90:	fe e4       	ldi	r31, 0x4E	; 78
    2b92:	31 97       	sbiw	r30, 0x01	; 1
    2b94:	f1 f7       	brne	.-4      	; 0x2b92 <setup+0x38>
    2b96:	00 c0       	rjmp	.+0      	; 0x2b98 <setup+0x3e>
    2b98:	00 00       	nop

  _delay_ms(100);

  initSS_ETH();
  _delay_ms(5);
  disable_ETH();
    2b9a:	0e 94 92 01 	call	0x324	; 0x324 <_ZL11disable_ETHv>

  // Serial.begin(9600);
  Serial.println(" inizio Setup ......");
    2b9e:	69 e2       	ldi	r22, 0x29	; 41
    2ba0:	78 e0       	ldi	r23, 0x08	; 8
    2ba2:	85 ea       	ldi	r24, 0xA5	; 165
    2ba4:	9c e0       	ldi	r25, 0x0C	; 12
    2ba6:	0e 94 00 35 	call	0x6a00	; 0x6a00 <_ZN5Print7printlnEPKc>

  /*******************************************************************************************/
  ParametriCCEC = Parametri;
    2baa:	82 e2       	ldi	r24, 0x22	; 34
    2bac:	9b e0       	ldi	r25, 0x0B	; 11
    2bae:	90 93 4f 0b 	sts	0x0B4F, r25	; 0x800b4f <ParametriCCEC+0x1>
    2bb2:	80 93 4e 0b 	sts	0x0B4E, r24	; 0x800b4e <ParametriCCEC>

  ErogazioniEEPROM = Erogazioni;
    2bb6:	8a e0       	ldi	r24, 0x0A	; 10
    2bb8:	9b e0       	ldi	r25, 0x0B	; 11
    2bba:	90 93 4d 0b 	sts	0x0B4D, r25	; 0x800b4d <ErogazioniEEPROM+0x1>
    2bbe:	80 93 4c 0b 	sts	0x0B4C, r24	; 0x800b4c <ErogazioniEEPROM>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    2bc2:	26 e0       	ldi	r18, 0x06	; 6
    2bc4:	40 e8       	ldi	r20, 0x80	; 128
    2bc6:	55 e2       	ldi	r21, 0x25	; 37
    2bc8:	60 e0       	ldi	r22, 0x00	; 0
    2bca:	70 e0       	ldi	r23, 0x00	; 0
    2bcc:	85 ea       	ldi	r24, 0xA5	; 165
    2bce:	9c e0       	ldi	r25, 0x0C	; 12
    2bd0:	0e 94 09 33 	call	0x6612	; 0x6612 <_ZN14HardwareSerial5beginEmh>

  Serial.begin(9600);
  Serial.print("EEPROM utilizzata (byte): ");
    2bd4:	6e e3       	ldi	r22, 0x3E	; 62
    2bd6:	78 e0       	ldi	r23, 0x08	; 8
    2bd8:	85 ea       	ldi	r24, 0xA5	; 165
    2bda:	9c e0       	ldi	r25, 0x0C	; 12
    2bdc:	0e 94 d5 34 	call	0x69aa	; 0x69aa <_ZN5Print5printEPKc>
  Serial.print(EEPROM.length());
    2be0:	4a e0       	ldi	r20, 0x0A	; 10
    2be2:	50 e0       	ldi	r21, 0x00	; 0
    2be4:	60 e0       	ldi	r22, 0x00	; 0
    2be6:	70 e1       	ldi	r23, 0x10	; 16
    2be8:	85 ea       	ldi	r24, 0xA5	; 165
    2bea:	9c e0       	ldi	r25, 0x0C	; 12
    2bec:	0e 94 69 35 	call	0x6ad2	; 0x6ad2 <_ZN5Print5printEji>
  Serial.println(" ");
    2bf0:	6d e3       	ldi	r22, 0x3D	; 61
    2bf2:	72 e0       	ldi	r23, 0x02	; 2
    2bf4:	85 ea       	ldi	r24, 0xA5	; 165
    2bf6:	9c e0       	ldi	r25, 0x0C	; 12
    2bf8:	0e 94 00 35 	call	0x6a00	; 0x6a00 <_ZN5Print7printlnEPKc>

  String app = "";
    2bfc:	6a e3       	ldi	r22, 0x3A	; 58
    2bfe:	72 e0       	ldi	r23, 0x02	; 2
    2c00:	ce 01       	movw	r24, r28
    2c02:	45 96       	adiw	r24, 0x15	; 21
    2c04:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <_ZN6StringC1EPKc>

  //    if (write_eeprom_string_struct(ParametriCCEC[0])) { Serial.println("WRITE OK");}
  //    if (write_eeprom_string_struct(ParametriCCEC[1])) { Serial.println("WRITE OK");}
  //    if (write_eeprom_string_struct(ParametriCCEC[2])) { Serial.println("WRITE OK");}

  app = read_eeprom_string_struct(ParametriCCEC[0]);
    2c08:	60 91 4e 0b 	lds	r22, 0x0B4E	; 0x800b4e <ParametriCCEC>
    2c0c:	70 91 4f 0b 	lds	r23, 0x0B4F	; 0x800b4f <ParametriCCEC+0x1>
    2c10:	ce 01       	movw	r24, r28
    2c12:	01 96       	adiw	r24, 0x01	; 1
    2c14:	0e 94 43 02 	call	0x486	; 0x486 <_ZN20ParametriCCEC_structC1ERKS_>
    2c18:	be 01       	movw	r22, r28
    2c1a:	6f 5f       	subi	r22, 0xFF	; 255
    2c1c:	7f 4f       	sbci	r23, 0xFF	; 255
    2c1e:	ce 01       	movw	r24, r28
    2c20:	0f 96       	adiw	r24, 0x0f	; 15
    2c22:	0e 94 18 0a 	call	0x1430	; 0x1430 <_Z25read_eeprom_string_struct20ParametriCCEC_struct>
    2c26:	be 01       	movw	r22, r28
    2c28:	61 5f       	subi	r22, 0xF1	; 241
    2c2a:	7f 4f       	sbci	r23, 0xFF	; 255
    2c2c:	ce 01       	movw	r24, r28
    2c2e:	45 96       	adiw	r24, 0x15	; 21
    2c30:	0e 94 0f 38 	call	0x701e	; 0x701e <_ZN6StringaSEOS_>
    2c34:	ce 01       	movw	r24, r28
    2c36:	0f 96       	adiw	r24, 0x0f	; 15
    2c38:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
    2c3c:	ce 01       	movw	r24, r28
    2c3e:	01 96       	adiw	r24, 0x01	; 1
    2c40:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <_ZN20ParametriCCEC_structD1Ev>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{ getBytes((unsigned char *)buf, bufsize, index); }
    2c44:	49 8d       	ldd	r20, Y+25	; 0x19
    2c46:	5a 8d       	ldd	r21, Y+26	; 0x1a
    2c48:	20 e0       	ldi	r18, 0x00	; 0
    2c4a:	30 e0       	ldi	r19, 0x00	; 0
    2c4c:	6c e2       	ldi	r22, 0x2C	; 44
    2c4e:	71 e0       	ldi	r23, 0x01	; 1
    2c50:	ce 01       	movw	r24, r28
    2c52:	45 96       	adiw	r24, 0x15	; 21
    2c54:	0e 94 c2 39 	call	0x7384	; 0x7384 <_ZNK6String8getBytesEPhjj>
  app.toCharArray(serverREST,app.length());
  
  app = read_eeprom_string_struct(ParametriCCEC[1]);
    2c58:	60 91 4e 0b 	lds	r22, 0x0B4E	; 0x800b4e <ParametriCCEC>
    2c5c:	70 91 4f 0b 	lds	r23, 0x0B4F	; 0x800b4f <ParametriCCEC+0x1>
    2c60:	62 5f       	subi	r22, 0xF2	; 242
    2c62:	7f 4f       	sbci	r23, 0xFF	; 255
    2c64:	ce 01       	movw	r24, r28
    2c66:	01 96       	adiw	r24, 0x01	; 1
    2c68:	0e 94 43 02 	call	0x486	; 0x486 <_ZN20ParametriCCEC_structC1ERKS_>
    2c6c:	be 01       	movw	r22, r28
    2c6e:	6f 5f       	subi	r22, 0xFF	; 255
    2c70:	7f 4f       	sbci	r23, 0xFF	; 255
    2c72:	ce 01       	movw	r24, r28
    2c74:	0f 96       	adiw	r24, 0x0f	; 15
    2c76:	0e 94 18 0a 	call	0x1430	; 0x1430 <_Z25read_eeprom_string_struct20ParametriCCEC_struct>
    2c7a:	be 01       	movw	r22, r28
    2c7c:	61 5f       	subi	r22, 0xF1	; 241
    2c7e:	7f 4f       	sbci	r23, 0xFF	; 255
    2c80:	ce 01       	movw	r24, r28
    2c82:	45 96       	adiw	r24, 0x15	; 21
    2c84:	0e 94 0f 38 	call	0x701e	; 0x701e <_ZN6StringaSEOS_>
    2c88:	ce 01       	movw	r24, r28
    2c8a:	0f 96       	adiw	r24, 0x0f	; 15
    2c8c:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
    2c90:	ce 01       	movw	r24, r28
    2c92:	01 96       	adiw	r24, 0x01	; 1
    2c94:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <_ZN20ParametriCCEC_structD1Ev>
  app = read_eeprom_string_struct(ParametriCCEC[2]);
    2c98:	60 91 4e 0b 	lds	r22, 0x0B4E	; 0x800b4e <ParametriCCEC>
    2c9c:	70 91 4f 0b 	lds	r23, 0x0B4F	; 0x800b4f <ParametriCCEC+0x1>
    2ca0:	64 5e       	subi	r22, 0xE4	; 228
    2ca2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ca4:	ce 01       	movw	r24, r28
    2ca6:	01 96       	adiw	r24, 0x01	; 1
    2ca8:	0e 94 43 02 	call	0x486	; 0x486 <_ZN20ParametriCCEC_structC1ERKS_>
    2cac:	be 01       	movw	r22, r28
    2cae:	6f 5f       	subi	r22, 0xFF	; 255
    2cb0:	7f 4f       	sbci	r23, 0xFF	; 255
    2cb2:	ce 01       	movw	r24, r28
    2cb4:	0f 96       	adiw	r24, 0x0f	; 15
    2cb6:	0e 94 18 0a 	call	0x1430	; 0x1430 <_Z25read_eeprom_string_struct20ParametriCCEC_struct>
    2cba:	be 01       	movw	r22, r28
    2cbc:	61 5f       	subi	r22, 0xF1	; 241
    2cbe:	7f 4f       	sbci	r23, 0xFF	; 255
    2cc0:	ce 01       	movw	r24, r28
    2cc2:	45 96       	adiw	r24, 0x15	; 21
    2cc4:	0e 94 0f 38 	call	0x701e	; 0x701e <_ZN6StringaSEOS_>
    2cc8:	ce 01       	movw	r24, r28
    2cca:	0f 96       	adiw	r24, 0x0f	; 15
    2ccc:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
    2cd0:	ce 01       	movw	r24, r28
    2cd2:	01 96       	adiw	r24, 0x01	; 1
    2cd4:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <_ZN20ParametriCCEC_structD1Ev>
  app = read_erogazione_eeprom(ErogazioniEEPROM[0]);
    2cd8:	00 91 4c 0b 	lds	r16, 0x0B4C	; 0x800b4c <ErogazioniEEPROM>
    2cdc:	10 91 4d 0b 	lds	r17, 0x0B4D	; 0x800b4d <ErogazioniEEPROM+0x1>
 *  Author: Giovanni Barbato
 */ 

#include <EEPROM.h>

typedef struct Erogazioni_struct
    2ce0:	b8 01       	movw	r22, r16
    2ce2:	ce 01       	movw	r24, r28
    2ce4:	01 96       	adiw	r24, 0x01	; 1
    2ce6:	0e 94 07 38 	call	0x700e	; 0x700e <_ZN6StringC1ERKS_>
    2cea:	f8 01       	movw	r30, r16
    2cec:	86 81       	ldd	r24, Z+6	; 0x06
    2cee:	97 81       	ldd	r25, Z+7	; 0x07
    2cf0:	98 87       	std	Y+8, r25	; 0x08
    2cf2:	8f 83       	std	Y+7, r24	; 0x07
    2cf4:	be 01       	movw	r22, r28
    2cf6:	6f 5f       	subi	r22, 0xFF	; 255
    2cf8:	7f 4f       	sbci	r23, 0xFF	; 255
    2cfa:	ce 01       	movw	r24, r28
    2cfc:	0f 96       	adiw	r24, 0x0f	; 15
    2cfe:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_Z22read_erogazione_eeprom17Erogazioni_struct>
    2d02:	be 01       	movw	r22, r28
    2d04:	61 5f       	subi	r22, 0xF1	; 241
    2d06:	7f 4f       	sbci	r23, 0xFF	; 255
    2d08:	ce 01       	movw	r24, r28
    2d0a:	45 96       	adiw	r24, 0x15	; 21
    2d0c:	0e 94 0f 38 	call	0x701e	; 0x701e <_ZN6StringaSEOS_>
    2d10:	ce 01       	movw	r24, r28
    2d12:	0f 96       	adiw	r24, 0x0f	; 15
    2d14:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
    2d18:	ce 01       	movw	r24, r28
    2d1a:	01 96       	adiw	r24, 0x01	; 1
    2d1c:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>


  /*******************************************************************************************/
  DDRC |= (1 << BUZZER); // set BUZZER (PC6) for output
    2d20:	3e 9a       	sbi	0x07, 6	; 7
  DDRC |= (1 << RELE1);  // Rele1
    2d22:	3f 9a       	sbi	0x07, 7	; 7
  DDRA |= (1 << RELE2);  // Rele2   // set PA7 e PC7 come output
    2d24:	0f 9a       	sbi	0x01, 7	; 1
    2d26:	8f e3       	ldi	r24, 0x3F	; 63
    2d28:	9c e9       	ldi	r25, 0x9C	; 156
    2d2a:	01 97       	sbiw	r24, 0x01	; 1
    2d2c:	f1 f7       	brne	.-4      	; 0x2d2a <setup+0x1d0>
    2d2e:	00 c0       	rjmp	.+0      	; 0x2d30 <setup+0x1d6>
    2d30:	00 00       	nop
  _delay_ms(10);
  SET_BIT(PORTC, RELE1); // Apri RELE1
    2d32:	47 9a       	sbi	0x08, 7	; 8
    2d34:	ef e3       	ldi	r30, 0x3F	; 63
    2d36:	fc e9       	ldi	r31, 0x9C	; 156
    2d38:	31 97       	sbiw	r30, 0x01	; 1
    2d3a:	f1 f7       	brne	.-4      	; 0x2d38 <setup+0x1de>
    2d3c:	00 c0       	rjmp	.+0      	; 0x2d3e <setup+0x1e4>
    2d3e:	00 00       	nop
  _delay_ms(10);
  SET_BIT(PORTA, RELE2); // Apri RELE2
    2d40:	17 9a       	sbi	0x02, 7	; 2
  printLine();
    2d42:	0e 94 07 02 	call	0x40e	; 0x40e <_Z9printLinev>

  /***************************LCD******************************/

  lcd.begin(20, 4);        // Inizializza display LCD 20x4 e accendi e spegni 2 volte
    2d46:	20 e0       	ldi	r18, 0x00	; 0
    2d48:	44 e0       	ldi	r20, 0x04	; 4
    2d4a:	64 e1       	ldi	r22, 0x14	; 20
    2d4c:	82 ed       	ldi	r24, 0xD2	; 210
    2d4e:	9a e0       	ldi	r25, 0x0A	; 10
    2d50:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <_ZN17LiquidCrystal_I2C5beginEhhh>

  // ------- 2 blinks -------------
  for (int i = 0; i < 2; i++)
  {
    lcd.backlight();
    2d54:	82 ed       	ldi	r24, 0xD2	; 210
    2d56:	9a e0       	ldi	r25, 0x0A	; 10
    2d58:	0e 94 f1 2a 	call	0x55e2	; 0x55e2 <_ZN3LCD9backlightEv>
    2d5c:	ff ef       	ldi	r31, 0xFF	; 255
    2d5e:	24 e3       	ldi	r18, 0x34	; 52
    2d60:	8c e0       	ldi	r24, 0x0C	; 12
    2d62:	f1 50       	subi	r31, 0x01	; 1
    2d64:	20 40       	sbci	r18, 0x00	; 0
    2d66:	80 40       	sbci	r24, 0x00	; 0
    2d68:	e1 f7       	brne	.-8      	; 0x2d62 <setup+0x208>
    2d6a:	00 c0       	rjmp	.+0      	; 0x2d6c <setup+0x212>
    2d6c:	00 00       	nop
    _delay_ms(250);
    lcd.noBacklight();
    2d6e:	82 ed       	ldi	r24, 0xD2	; 210
    2d70:	9a e0       	ldi	r25, 0x0A	; 10
    2d72:	0e 94 f9 2a 	call	0x55f2	; 0x55f2 <_ZN3LCD11noBacklightEv>
    2d76:	9f ef       	ldi	r25, 0xFF	; 255
    2d78:	e4 e3       	ldi	r30, 0x34	; 52
    2d7a:	fc e0       	ldi	r31, 0x0C	; 12
    2d7c:	91 50       	subi	r25, 0x01	; 1
    2d7e:	e0 40       	sbci	r30, 0x00	; 0
    2d80:	f0 40       	sbci	r31, 0x00	; 0
    2d82:	e1 f7       	brne	.-8      	; 0x2d7c <setup+0x222>
    2d84:	00 c0       	rjmp	.+0      	; 0x2d86 <setup+0x22c>
    2d86:	00 00       	nop
  lcd.begin(20, 4);        // Inizializza display LCD 20x4 e accendi e spegni 2 volte

  // ------- 2 blinks -------------
  for (int i = 0; i < 2; i++)
  {
    lcd.backlight();
    2d88:	82 ed       	ldi	r24, 0xD2	; 210
    2d8a:	9a e0       	ldi	r25, 0x0A	; 10
    2d8c:	0e 94 f1 2a 	call	0x55e2	; 0x55e2 <_ZN3LCD9backlightEv>
    2d90:	2f ef       	ldi	r18, 0xFF	; 255
    2d92:	84 e3       	ldi	r24, 0x34	; 52
    2d94:	9c e0       	ldi	r25, 0x0C	; 12
    2d96:	21 50       	subi	r18, 0x01	; 1
    2d98:	80 40       	sbci	r24, 0x00	; 0
    2d9a:	90 40       	sbci	r25, 0x00	; 0
    2d9c:	e1 f7       	brne	.-8      	; 0x2d96 <setup+0x23c>
    2d9e:	00 c0       	rjmp	.+0      	; 0x2da0 <setup+0x246>
    2da0:	00 00       	nop
    _delay_ms(250);
    lcd.noBacklight();
    2da2:	82 ed       	ldi	r24, 0xD2	; 210
    2da4:	9a e0       	ldi	r25, 0x0A	; 10
    2da6:	0e 94 f9 2a 	call	0x55f2	; 0x55f2 <_ZN3LCD11noBacklightEv>
    2daa:	ef ef       	ldi	r30, 0xFF	; 255
    2dac:	f4 e3       	ldi	r31, 0x34	; 52
    2dae:	2c e0       	ldi	r18, 0x0C	; 12
    2db0:	e1 50       	subi	r30, 0x01	; 1
    2db2:	f0 40       	sbci	r31, 0x00	; 0
    2db4:	20 40       	sbci	r18, 0x00	; 0
    2db6:	e1 f7       	brne	.-8      	; 0x2db0 <setup+0x256>
    2db8:	00 c0       	rjmp	.+0      	; 0x2dba <setup+0x260>
    2dba:	00 00       	nop
    _delay_ms(250);
  }

  lcd.createChar(1, Clessidra); // Creo CHAR Clessidra
    2dbc:	49 e4       	ldi	r20, 0x49	; 73
    2dbe:	51 e0       	ldi	r21, 0x01	; 1
    2dc0:	61 e0       	ldi	r22, 0x01	; 1
    2dc2:	82 ed       	ldi	r24, 0xD2	; 210
    2dc4:	9a e0       	ldi	r25, 0x0A	; 10
    2dc6:	0e 94 d7 2b 	call	0x57ae	; 0x57ae <_ZN3LCD10createCharEhPh>
    2dca:	8f ef       	ldi	r24, 0xFF	; 255
    2dcc:	99 ef       	ldi	r25, 0xF9	; 249
    2dce:	e0 e0       	ldi	r30, 0x00	; 0
    2dd0:	81 50       	subi	r24, 0x01	; 1
    2dd2:	90 40       	sbci	r25, 0x00	; 0
    2dd4:	e0 40       	sbci	r30, 0x00	; 0
    2dd6:	e1 f7       	brne	.-8      	; 0x2dd0 <setup+0x276>
    2dd8:	00 c0       	rjmp	.+0      	; 0x2dda <setup+0x280>
    2dda:	00 00       	nop
  _delay_ms(20);
  lcd.backlight();
    2ddc:	82 ed       	ldi	r24, 0xD2	; 210
    2dde:	9a e0       	ldi	r25, 0x0A	; 10
    2de0:	0e 94 f1 2a 	call	0x55e2	; 0x55e2 <_ZN3LCD9backlightEv>
    2de4:	05 e5       	ldi	r16, 0x55	; 85
    2de6:	1a e0       	ldi	r17, 0x0A	; 10
    2de8:	9d e6       	ldi	r25, 0x6D	; 109
    2dea:	e9 2e       	mov	r14, r25
    2dec:	9a e0       	ldi	r25, 0x0A	; 10
    2dee:	f9 2e       	mov	r15, r25

  for (int r = 0; r < 4; r++)
    righeDisplay[r] = "";
    2df0:	6a e3       	ldi	r22, 0x3A	; 58
    2df2:	72 e0       	ldi	r23, 0x02	; 2
    2df4:	c8 01       	movw	r24, r16
    2df6:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>
    2dfa:	0a 5f       	subi	r16, 0xFA	; 250
    2dfc:	1f 4f       	sbci	r17, 0xFF	; 255

  lcd.createChar(1, Clessidra); // Creo CHAR Clessidra
  _delay_ms(20);
  lcd.backlight();

  for (int r = 0; r < 4; r++)
    2dfe:	e0 16       	cp	r14, r16
    2e00:	f1 06       	cpc	r15, r17
    2e02:	b1 f7       	brne	.-20     	; 0x2df0 <setup+0x296>
    righeDisplay[r] = "";

  printLine();
    2e04:	0e 94 07 02 	call	0x40e	; 0x40e <_Z9printLinev>

  /***************************NFC*************************/

  nfc.begin();
    2e08:	8b eb       	ldi	r24, 0xBB	; 187
    2e0a:	9a e0       	ldi	r25, 0x0A	; 10
    2e0c:	e2 d1       	rcall	.+964    	; 0x31d2 <_ZN9NFC_PN5325beginEv>
    2e0e:	ff ef       	ldi	r31, 0xFF	; 255
    2e10:	20 e7       	ldi	r18, 0x70	; 112
    2e12:	82 e0       	ldi	r24, 0x02	; 2
    2e14:	f1 50       	subi	r31, 0x01	; 1
    2e16:	20 40       	sbci	r18, 0x00	; 0
    2e18:	80 40       	sbci	r24, 0x00	; 0
    2e1a:	e1 f7       	brne	.-8      	; 0x2e14 <setup+0x2ba>
    2e1c:	00 c0       	rjmp	.+0      	; 0x2e1e <setup+0x2c4>
    2e1e:	00 00       	nop

  _delay_ms(50);

  uint32_t versiondata = nfc.getFirmwareVersion();
    2e20:	8b eb       	ldi	r24, 0xBB	; 187
    2e22:	9a e0       	ldi	r25, 0x0A	; 10
    2e24:	76 d3       	rcall	.+1772   	; 0x3512 <_ZN9NFC_PN53218getFirmwareVersionEv>
    2e26:	6b 01       	movw	r12, r22
    2e28:	7c 01       	movw	r14, r24
  if (! versiondata) {
    2e2a:	67 2b       	or	r22, r23
    2e2c:	68 2b       	or	r22, r24
    2e2e:	69 2b       	or	r22, r25
    2e30:	69 f5       	brne	.+90     	; 0x2e8c <setup+0x332>
    Serial.print("Modulo PN532 non trovato");
    2e32:	69 e5       	ldi	r22, 0x59	; 89
    2e34:	78 e0       	ldi	r23, 0x08	; 8
    2e36:	85 ea       	ldi	r24, 0xA5	; 165
    2e38:	9c e0       	ldi	r25, 0x0C	; 12
    2e3a:	0e 94 d5 34 	call	0x69aa	; 0x69aa <_ZN5Print5printEPKc>
    lcd.backlight();
    2e3e:	82 ed       	ldi	r24, 0xD2	; 210
    2e40:	9a e0       	ldi	r25, 0x0A	; 10
    2e42:	0e 94 f1 2a 	call	0x55e2	; 0x55e2 <_ZN3LCD9backlightEv>
    2e46:	9f ef       	ldi	r25, 0xFF	; 255
    2e48:	e4 e3       	ldi	r30, 0x34	; 52
    2e4a:	fc e0       	ldi	r31, 0x0C	; 12
    2e4c:	91 50       	subi	r25, 0x01	; 1
    2e4e:	e0 40       	sbci	r30, 0x00	; 0
    2e50:	f0 40       	sbci	r31, 0x00	; 0
    2e52:	e1 f7       	brne	.-8      	; 0x2e4c <setup+0x2f2>
    2e54:	00 c0       	rjmp	.+0      	; 0x2e56 <setup+0x2fc>
    2e56:	00 00       	nop
    _delay_ms(250);
    lcd.clear();
    2e58:	82 ed       	ldi	r24, 0xD2	; 210
    2e5a:	9a e0       	ldi	r25, 0x0A	; 10
    2e5c:	0e 94 09 2b 	call	0x5612	; 0x5612 <_ZN3LCD5clearEv>
    lcd.print("Modulo PN532 non trovato ");
    2e60:	62 e7       	ldi	r22, 0x72	; 114
    2e62:	78 e0       	ldi	r23, 0x08	; 8
    2e64:	82 ed       	ldi	r24, 0xD2	; 210
    2e66:	9a e0       	ldi	r25, 0x0A	; 10
    2e68:	0e 94 d5 34 	call	0x69aa	; 0x69aa <_ZN5Print5printEPKc>
    2e6c:	2f ef       	ldi	r18, 0xFF	; 255
    2e6e:	87 ea       	ldi	r24, 0xA7	; 167
    2e70:	91 e6       	ldi	r25, 0x61	; 97
    2e72:	21 50       	subi	r18, 0x01	; 1
    2e74:	80 40       	sbci	r24, 0x00	; 0
    2e76:	90 40       	sbci	r25, 0x00	; 0
    2e78:	e1 f7       	brne	.-8      	; 0x2e72 <setup+0x318>
    2e7a:	00 c0       	rjmp	.+0      	; 0x2e7c <setup+0x322>
    2e7c:	00 00       	nop
    _delay_ms(2000);
    StatoAttuale  = " CHIAMA ASSISTENZA";
    2e7e:	6c e8       	ldi	r22, 0x8C	; 140
    2e80:	78 e0       	ldi	r23, 0x08	; 8
    2e82:	85 eb       	ldi	r24, 0xB5	; 181
    2e84:	9a e0       	ldi	r25, 0x0A	; 10
    2e86:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>
    2e8a:	06 c0       	rjmp	.+12     	; 0x2e98 <setup+0x33e>
    //while (1); // halt  // Aspetta per sempre
  } else {
    Serial.println("Modulo NFC OK ......");
    2e8c:	6f e9       	ldi	r22, 0x9F	; 159
    2e8e:	78 e0       	ldi	r23, 0x08	; 8
    2e90:	85 ea       	ldi	r24, 0xA5	; 165
    2e92:	9c e0       	ldi	r25, 0x0C	; 12
    2e94:	0e 94 00 35 	call	0x6a00	; 0x6a00 <_ZN5Print7printlnEPKc>
  }

  Serial.print("Found chip PN5"); Serial.println((versiondata >> 24) & 0xFF, HEX);
    2e98:	64 eb       	ldi	r22, 0xB4	; 180
    2e9a:	78 e0       	ldi	r23, 0x08	; 8
    2e9c:	85 ea       	ldi	r24, 0xA5	; 165
    2e9e:	9c e0       	ldi	r25, 0x0C	; 12
    2ea0:	0e 94 d5 34 	call	0x69aa	; 0x69aa <_ZN5Print5printEPKc>
    2ea4:	4f 2d       	mov	r20, r15
    2ea6:	55 27       	eor	r21, r21
    2ea8:	66 27       	eor	r22, r22
    2eaa:	77 27       	eor	r23, r23
    2eac:	20 e1       	ldi	r18, 0x10	; 16
    2eae:	30 e0       	ldi	r19, 0x00	; 0
    2eb0:	85 ea       	ldi	r24, 0xA5	; 165
    2eb2:	9c e0       	ldi	r25, 0x0C	; 12
    2eb4:	0e 94 6e 35 	call	0x6adc	; 0x6adc <_ZN5Print7printlnEmi>
  Serial.print("Firmware ver. "); Serial.print((versiondata >> 16) & 0xFF, DEC);
    2eb8:	63 ec       	ldi	r22, 0xC3	; 195
    2eba:	78 e0       	ldi	r23, 0x08	; 8
    2ebc:	85 ea       	ldi	r24, 0xA5	; 165
    2ebe:	9c e0       	ldi	r25, 0x0C	; 12
    2ec0:	0e 94 d5 34 	call	0x69aa	; 0x69aa <_ZN5Print5printEPKc>
    2ec4:	4e 2d       	mov	r20, r14
    2ec6:	50 e0       	ldi	r21, 0x00	; 0
    2ec8:	60 e0       	ldi	r22, 0x00	; 0
    2eca:	70 e0       	ldi	r23, 0x00	; 0
    2ecc:	2a e0       	ldi	r18, 0x0A	; 10
    2ece:	30 e0       	ldi	r19, 0x00	; 0
    2ed0:	85 ea       	ldi	r24, 0xA5	; 165
    2ed2:	9c e0       	ldi	r25, 0x0C	; 12
    2ed4:	0e 94 57 35 	call	0x6aae	; 0x6aae <_ZN5Print5printEmi>
  Serial.print('.'); Serial.println((versiondata >> 8) & 0xFF, DEC);
    2ed8:	6e e2       	ldi	r22, 0x2E	; 46
    2eda:	85 ea       	ldi	r24, 0xA5	; 165
    2edc:	9c e0       	ldi	r25, 0x0C	; 12
    2ede:	0e 94 d6 34 	call	0x69ac	; 0x69ac <_ZN5Print5printEc>
    2ee2:	4d 2d       	mov	r20, r13
    2ee4:	50 e0       	ldi	r21, 0x00	; 0
    2ee6:	60 e0       	ldi	r22, 0x00	; 0
    2ee8:	70 e0       	ldi	r23, 0x00	; 0
    2eea:	2a e0       	ldi	r18, 0x0A	; 10
    2eec:	30 e0       	ldi	r19, 0x00	; 0
    2eee:	85 ea       	ldi	r24, 0xA5	; 165
    2ef0:	9c e0       	ldi	r25, 0x0C	; 12
    2ef2:	0e 94 6e 35 	call	0x6adc	; 0x6adc <_ZN5Print7printlnEmi>

  nfc.setPassiveActivationRetries(0xFF);
    2ef6:	6f ef       	ldi	r22, 0xFF	; 255
    2ef8:	8b eb       	ldi	r24, 0xBB	; 187
    2efa:	9a e0       	ldi	r25, 0x0A	; 10
    2efc:	80 d3       	rcall	.+1792   	; 0x35fe <_ZN9NFC_PN53227setPassiveActivationRetriesEh>
  nfc.SAMConfig();
    2efe:	8b eb       	ldi	r24, 0xBB	; 187
    2f00:	9a e0       	ldi	r25, 0x0A	; 10
    2f02:	4f d3       	rcall	.+1694   	; 0x35a2 <_ZN9NFC_PN5329SAMConfigEv>
    2f04:	0e 94 07 02 	call	0x40e	; 0x40e <_Z9printLinev>
  printLine();
    2f08:	40 ea       	ldi	r20, 0xA0	; 160
  /***************************SPY FLASH*************************/

  /*************************** RTC ************************/
  while (!DS3231M.begin()) {
    2f0a:	56 e8       	ldi	r21, 0x86	; 134
    2f0c:	61 e0       	ldi	r22, 0x01	; 1
    2f0e:	70 e0       	ldi	r23, 0x00	; 0
    2f10:	87 e1       	ldi	r24, 0x17	; 23
    2f12:	9a e0       	ldi	r25, 0x0A	; 10
    2f14:	90 d6       	rcall	.+3360   	; 0x3c36 <_ZN13DS3231M_Class5beginEm>
    2f16:	81 11       	cpse	r24, r1
    2f18:	10 c0       	rjmp	.+32     	; 0x2f3a <setup+0x3e0>
    2f1a:	62 ee       	ldi	r22, 0xE2	; 226
    Serial.println(F("Unable to find DS3231MM. Checking again in 3s."));
    2f1c:	71 e0       	ldi	r23, 0x01	; 1
    2f1e:	85 ea       	ldi	r24, 0xA5	; 165
    2f20:	9c e0       	ldi	r25, 0x0C	; 12
    2f22:	0e 94 e0 34 	call	0x69c0	; 0x69c0 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2f26:	ef ef       	ldi	r30, 0xFF	; 255
    2f28:	f3 ed       	ldi	r31, 0xD3	; 211
    2f2a:	20 e3       	ldi	r18, 0x30	; 48
    2f2c:	e1 50       	subi	r30, 0x01	; 1
    2f2e:	f0 40       	sbci	r31, 0x00	; 0
    2f30:	20 40       	sbci	r18, 0x00	; 0
    2f32:	e1 f7       	brne	.-8      	; 0x2f2c <setup+0x3d2>
    2f34:	00 c0       	rjmp	.+0      	; 0x2f36 <setup+0x3dc>
    2f36:	00 00       	nop
    2f38:	e7 cf       	rjmp	.-50     	; 0x2f08 <setup+0x3ae>
    2f3a:	8f ef       	ldi	r24, 0xFF	; 255
    2f3c:	90 e7       	ldi	r25, 0x70	; 112
    2f3e:	e2 e0       	ldi	r30, 0x02	; 2
    2f40:	81 50       	subi	r24, 0x01	; 1
    2f42:	90 40       	sbci	r25, 0x00	; 0
    2f44:	e0 40       	sbci	r30, 0x00	; 0
    2f46:	e1 f7       	brne	.-8      	; 0x2f40 <setup+0x3e6>
    2f48:	00 c0       	rjmp	.+0      	; 0x2f4a <setup+0x3f0>
    2f4a:	00 00       	nop
    2f4c:	64 ec       	ldi	r22, 0xC4	; 196
    _delay_ms(1000);
  }
  _delay_ms(50);

  Serial.println(F("RTC chip DS3231M initialized."));
    2f4e:	71 e0       	ldi	r23, 0x01	; 1
    2f50:	85 ea       	ldi	r24, 0xA5	; 165
    2f52:	9c e0       	ldi	r25, 0x0C	; 12
    2f54:	0e 94 e0 34 	call	0x69c0	; 0x69c0 <_ZN5Print7printlnEPK19__FlashStringHelper>
  DS3231M.adjust();
    2f58:	87 e1       	ldi	r24, 0x17	; 23
    2f5a:	9a e0       	ldi	r25, 0x0A	; 10
    2f5c:	ca d7       	rcall	.+3988   	; 0x3ef2 <_ZN13DS3231M_Class6adjustEv>
    2f5e:	0e 94 07 02 	call	0x40e	; 0x40e <_Z9printLinev>
  printLine();
    2f62:	62 ed       	ldi	r22, 0xD2	; 210
  /*************************** POTENZIOMETRI ************************/
  Serial.println("Inizializzo POTENZIOMETRI per livello pulser.......");
    2f64:	78 e0       	ldi	r23, 0x08	; 8
    2f66:	85 ea       	ldi	r24, 0xA5	; 165
    2f68:	9c e0       	ldi	r25, 0x0C	; 12
    2f6a:	0e 94 00 35 	call	0x6a00	; 0x6a00 <_ZN5Print7printlnEPKc>
    2f6e:	8f e4       	ldi	r24, 0x4F	; 79

  Wire.begin(); // join i2c bus (address optional for master)
    2f70:	9c e0       	ldi	r25, 0x0C	; 12
    2f72:	0e 94 77 30 	call	0x60ee	; 0x60ee <_ZN7TwoWire5beginEv>
    2f76:	68 e2       	ldi	r22, 0x28	; 40

  Wire.beginTransmission(0x28);  // (0x50) POTENZIOMETRO U11
    2f78:	70 e0       	ldi	r23, 0x00	; 0
    2f7a:	8f e4       	ldi	r24, 0x4F	; 79
    2f7c:	9c e0       	ldi	r25, 0x0C	; 12
    2f7e:	0e 94 94 30 	call	0x6128	; 0x6128 <_ZN7TwoWire17beginTransmissionEi>
    2f82:	60 e0       	ldi	r22, 0x00	; 0
  Wire.write(byte(0x00));        // Wiper Register
    2f84:	8f e4       	ldi	r24, 0x4F	; 79
    2f86:	9c e0       	ldi	r25, 0x0C	; 12
    2f88:	0e 94 39 30 	call	0x6072	; 0x6072 <_ZN7TwoWire5writeEh>
    2f8c:	62 e3       	ldi	r22, 0x32	; 50
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    2f8e:	8f e4       	ldi	r24, 0x4F	; 79
    2f90:	9c e0       	ldi	r25, 0x0C	; 12
    2f92:	0e 94 39 30 	call	0x6072	; 0x6072 <_ZN7TwoWire5writeEh>
    2f96:	8f e4       	ldi	r24, 0x4F	; 79
  Wire.write(50);                // Valore del potenziomentro circa 6 volt
  Wire.endTransmission();
    2f98:	9c e0       	ldi	r25, 0x0C	; 12
    2f9a:	0e 94 0b 31 	call	0x6216	; 0x6216 <_ZN7TwoWire15endTransmissionEv>
    2f9e:	ff ef       	ldi	r31, 0xFF	; 255
    2fa0:	20 e7       	ldi	r18, 0x70	; 112
    2fa2:	82 e0       	ldi	r24, 0x02	; 2
    2fa4:	f1 50       	subi	r31, 0x01	; 1
    2fa6:	20 40       	sbci	r18, 0x00	; 0
    2fa8:	80 40       	sbci	r24, 0x00	; 0
    2faa:	e1 f7       	brne	.-8      	; 0x2fa4 <setup+0x44a>
    2fac:	00 c0       	rjmp	.+0      	; 0x2fae <setup+0x454>
    2fae:	00 00       	nop
    2fb0:	62 e5       	ldi	r22, 0x52	; 82

  _delay_ms(50);

  Wire.beginTransmission(0x52);  // (0x52) POTENZIOMETRO U12
    2fb2:	70 e0       	ldi	r23, 0x00	; 0
    2fb4:	8f e4       	ldi	r24, 0x4F	; 79
    2fb6:	9c e0       	ldi	r25, 0x0C	; 12
    2fb8:	0e 94 94 30 	call	0x6128	; 0x6128 <_ZN7TwoWire17beginTransmissionEi>
    2fbc:	60 e0       	ldi	r22, 0x00	; 0
  Wire.write(byte(0x00));        // Wiper Register
    2fbe:	8f e4       	ldi	r24, 0x4F	; 79
    2fc0:	9c e0       	ldi	r25, 0x0C	; 12
    2fc2:	0e 94 39 30 	call	0x6072	; 0x6072 <_ZN7TwoWire5writeEh>
    2fc6:	62 e3       	ldi	r22, 0x32	; 50
    2fc8:	8f e4       	ldi	r24, 0x4F	; 79
    2fca:	9c e0       	ldi	r25, 0x0C	; 12
    2fcc:	0e 94 39 30 	call	0x6072	; 0x6072 <_ZN7TwoWire5writeEh>
    2fd0:	8f e4       	ldi	r24, 0x4F	; 79
  Wire.write(50);                // Valore del potenziomentro circa 6 volt
  Wire.endTransmission();
    2fd2:	9c e0       	ldi	r25, 0x0C	; 12
    2fd4:	0e 94 0b 31 	call	0x6216	; 0x6216 <_ZN7TwoWire15endTransmissionEv>
    2fd8:	8f e4       	ldi	r24, 0x4F	; 79

  Wire.end();
    2fda:	9c e0       	ldi	r25, 0x0C	; 12
    2fdc:	0e 94 86 30 	call	0x610c	; 0x610c <_ZN7TwoWire3endEv>
    2fe0:	66 e0       	ldi	r22, 0x06	; 6

  Serial.println("POTENZIOMETRI OK");
    2fe2:	79 e0       	ldi	r23, 0x09	; 9
    2fe4:	85 ea       	ldi	r24, 0xA5	; 165
    2fe6:	9c e0       	ldi	r25, 0x0C	; 12
    2fe8:	0e 94 00 35 	call	0x6a00	; 0x6a00 <_ZN5Print7printlnEPKc>
    2fec:	0e 94 07 02 	call	0x40e	; 0x40e <_Z9printLinev>
  printLine();
  /*************************KEYPAD*********************/
  gpio.begin(I2C_PCA9534_ADDR);
    2ff0:	60 e2       	ldi	r22, 0x20	; 32
    2ff2:	86 ef       	ldi	r24, 0xF6	; 246
    2ff4:	99 e0       	ldi	r25, 0x09	; 9
    2ff6:	41 d0       	rcall	.+130    	; 0x307a <_ZN7PCA95345beginEh>

  // set REG IOexpander OPREG 11000011,INVREG 00000000,CONFREG 00111100
  gpio.setporteIoExp(0xC3, 0x00, 0x3C);
    2ff8:	2c e3       	ldi	r18, 0x3C	; 60
    2ffa:	40 e0       	ldi	r20, 0x00	; 0
    2ffc:	63 ec       	ldi	r22, 0xC3	; 195
    2ffe:	86 ef       	ldi	r24, 0xF6	; 246
    3000:	99 e0       	ldi	r25, 0x09	; 9
    3002:	41 d0       	rcall	.+130    	; 0x3086 <_ZN7PCA953413setporteIoExpEhhh>
    3004:	8e ef       	ldi	r24, 0xFE	; 254
  /**************** SETTING INIZIALI ******************/

  stato_procedura = - 2; // set stato di partenza
    3006:	9f ef       	ldi	r25, 0xFF	; 255
    3008:	90 93 ac 0a 	sts	0x0AAC, r25	; 0x800aac <stato_procedura+0x1>
    300c:	80 93 ab 0a 	sts	0x0AAB, r24	; 0x800aab <stato_procedura>
    3010:	67 e1       	ldi	r22, 0x17	; 23

  StatoAttuale = "Starting ....";
    3012:	79 e0       	ldi	r23, 0x09	; 9
    3014:	85 eb       	ldi	r24, 0xB5	; 181
    3016:	9a e0       	ldi	r25, 0x0A	; 10
    3018:	0e 94 1a 38 	call	0x7034	; 0x7034 <_ZN6StringaSEPKc>
    301c:	65 e2       	ldi	r22, 0x25	; 37

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    301e:	79 e0       	ldi	r23, 0x09	; 9
    3020:	ce 01       	movw	r24, r28
    3022:	01 96       	adiw	r24, 0x01	; 1
    3024:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <_ZN6StringC1EPKc>
    3028:	65 eb       	ldi	r22, 0xB5	; 181

  Serial.println("Stato Iniziale" + StatoAttuale);
    302a:	7a e0       	ldi	r23, 0x0A	; 10
    302c:	ce 01       	movw	r24, r28
    302e:	01 96       	adiw	r24, 0x01	; 1
    3030:	0e 94 70 39 	call	0x72e0	; 0x72e0 <_ZplRK15StringSumHelperRK6String>
    3034:	bc 01       	movw	r22, r24
    3036:	85 ea       	ldi	r24, 0xA5	; 165
    3038:	9c e0       	ldi	r25, 0x0C	; 12
    303a:	0e 94 f0 34 	call	0x69e0	; 0x69e0 <_ZN5Print7printlnERK6String>
    303e:	ce 01       	movw	r24, r28
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    3040:	01 96       	adiw	r24, 0x01	; 1
    3042:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
    3046:	0e 94 07 02 	call	0x40e	; 0x40e <_Z9printLinev>

  printLine();
    304a:	ce 01       	movw	r24, r28
  Serial.begin(9600);
  Serial.print("EEPROM utilizzata (byte): ");
  Serial.print(EEPROM.length());
  Serial.println(" ");

  String app = "";
    304c:	45 96       	adiw	r24, 0x15	; 21
    304e:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
    3052:	6a 96       	adiw	r28, 0x1a	; 26
  StatoAttuale = "Starting ....";

  Serial.println("Stato Iniziale" + StatoAttuale);

  printLine();
}
    3054:	0f b6       	in	r0, 0x3f	; 63
    3056:	f8 94       	cli
    3058:	de bf       	out	0x3e, r29	; 62
    305a:	0f be       	out	0x3f, r0	; 63
    305c:	cd bf       	out	0x3d, r28	; 61
    305e:	df 91       	pop	r29
    3060:	cf 91       	pop	r28
    3062:	1f 91       	pop	r17
    3064:	0f 91       	pop	r16
    3066:	ff 90       	pop	r15
    3068:	ef 90       	pop	r14
    306a:	df 90       	pop	r13
    306c:	cf 90       	pop	r12
    306e:	08 95       	ret

00003070 <_ZN7PCA9534C1Ev>:
    3070:	fc 01       	movw	r30, r24
	Wire.requestFrom(_i2caddr, 1);
	while (Wire.available()) {
		buff = Wire.read();
	}
	return (buff & (1 << pin)) ? HIGH : LOW;
}
    3072:	10 82       	st	Z, r1
    3074:	11 82       	std	Z+1, r1	; 0x01
    3076:	12 82       	std	Z+2, r1	; 0x02
    3078:	08 95       	ret

0000307a <_ZN7PCA95345beginEh>:
    307a:	fc 01       	movw	r30, r24
    307c:	60 83       	st	Z, r22
    307e:	8f e4       	ldi	r24, 0x4F	; 79
    3080:	9c e0       	ldi	r25, 0x0C	; 12
    3082:	0c 94 77 30 	jmp	0x60ee	; 0x60ee <_ZN7TwoWire5beginEv>

00003086 <_ZN7PCA953413setporteIoExpEhhh>:
    3086:	ff 92       	push	r15
    3088:	0f 93       	push	r16
    308a:	1f 93       	push	r17
    308c:	cf 93       	push	r28
    308e:	df 93       	push	r29
    3090:	ec 01       	movw	r28, r24
    3092:	f6 2e       	mov	r15, r22
    3094:	04 2f       	mov	r16, r20
    3096:	12 2f       	mov	r17, r18
    3098:	68 81       	ld	r22, Y
    309a:	8f e4       	ldi	r24, 0x4F	; 79
    309c:	9c e0       	ldi	r25, 0x0C	; 12
    309e:	0e 94 8a 30 	call	0x6114	; 0x6114 <_ZN7TwoWire17beginTransmissionEh>
    30a2:	61 e0       	ldi	r22, 0x01	; 1
    30a4:	8f e4       	ldi	r24, 0x4F	; 79
    30a6:	9c e0       	ldi	r25, 0x0C	; 12
    30a8:	0e 94 39 30 	call	0x6072	; 0x6072 <_ZN7TwoWire5writeEh>
    30ac:	6f 2d       	mov	r22, r15
    30ae:	8f e4       	ldi	r24, 0x4F	; 79
    30b0:	9c e0       	ldi	r25, 0x0C	; 12
    30b2:	0e 94 39 30 	call	0x6072	; 0x6072 <_ZN7TwoWire5writeEh>
    30b6:	8f e4       	ldi	r24, 0x4F	; 79
    30b8:	9c e0       	ldi	r25, 0x0C	; 12
    30ba:	0e 94 0b 31 	call	0x6216	; 0x6216 <_ZN7TwoWire15endTransmissionEv>
    30be:	68 81       	ld	r22, Y
    30c0:	8f e4       	ldi	r24, 0x4F	; 79
    30c2:	9c e0       	ldi	r25, 0x0C	; 12
    30c4:	0e 94 8a 30 	call	0x6114	; 0x6114 <_ZN7TwoWire17beginTransmissionEh>
    30c8:	62 e0       	ldi	r22, 0x02	; 2
    30ca:	8f e4       	ldi	r24, 0x4F	; 79
    30cc:	9c e0       	ldi	r25, 0x0C	; 12
    30ce:	0e 94 39 30 	call	0x6072	; 0x6072 <_ZN7TwoWire5writeEh>
    30d2:	60 2f       	mov	r22, r16
    30d4:	8f e4       	ldi	r24, 0x4F	; 79
    30d6:	9c e0       	ldi	r25, 0x0C	; 12
    30d8:	0e 94 39 30 	call	0x6072	; 0x6072 <_ZN7TwoWire5writeEh>
    30dc:	8f e4       	ldi	r24, 0x4F	; 79
    30de:	9c e0       	ldi	r25, 0x0C	; 12
    30e0:	0e 94 0b 31 	call	0x6216	; 0x6216 <_ZN7TwoWire15endTransmissionEv>
    30e4:	8f e3       	ldi	r24, 0x3F	; 63
    30e6:	9c e9       	ldi	r25, 0x9C	; 156
    30e8:	01 97       	sbiw	r24, 0x01	; 1
    30ea:	f1 f7       	brne	.-4      	; 0x30e8 <_ZN7PCA953413setporteIoExpEhhh+0x62>
    30ec:	00 c0       	rjmp	.+0      	; 0x30ee <_ZN7PCA953413setporteIoExpEhhh+0x68>
    30ee:	00 00       	nop
    30f0:	68 81       	ld	r22, Y
    30f2:	8f e4       	ldi	r24, 0x4F	; 79
    30f4:	9c e0       	ldi	r25, 0x0C	; 12
    30f6:	0e 94 8a 30 	call	0x6114	; 0x6114 <_ZN7TwoWire17beginTransmissionEh>
    30fa:	63 e0       	ldi	r22, 0x03	; 3
    30fc:	8f e4       	ldi	r24, 0x4F	; 79
    30fe:	9c e0       	ldi	r25, 0x0C	; 12
    3100:	0e 94 39 30 	call	0x6072	; 0x6072 <_ZN7TwoWire5writeEh>
    3104:	61 2f       	mov	r22, r17
    3106:	8f e4       	ldi	r24, 0x4F	; 79
    3108:	9c e0       	ldi	r25, 0x0C	; 12
    310a:	0e 94 39 30 	call	0x6072	; 0x6072 <_ZN7TwoWire5writeEh>
    310e:	8f e4       	ldi	r24, 0x4F	; 79
    3110:	9c e0       	ldi	r25, 0x0C	; 12
    3112:	0e 94 0b 31 	call	0x6216	; 0x6216 <_ZN7TwoWire15endTransmissionEv>
    3116:	8f e3       	ldi	r24, 0x3F	; 63
    3118:	9c e9       	ldi	r25, 0x9C	; 156
    311a:	01 97       	sbiw	r24, 0x01	; 1
    311c:	f1 f7       	brne	.-4      	; 0x311a <_ZN7PCA953413setporteIoExpEhhh+0x94>
    311e:	00 c0       	rjmp	.+0      	; 0x3120 <_ZN7PCA953413setporteIoExpEhhh+0x9a>
    3120:	00 00       	nop
    3122:	df 91       	pop	r29
    3124:	cf 91       	pop	r28
    3126:	1f 91       	pop	r17
    3128:	0f 91       	pop	r16
    312a:	ff 90       	pop	r15
    312c:	08 95       	ret

0000312e <_ZN7PCA953410setCONFREGEh>:
    312e:	cf 93       	push	r28
    3130:	c6 2f       	mov	r28, r22
    3132:	fc 01       	movw	r30, r24
    3134:	60 81       	ld	r22, Z
    3136:	8f e4       	ldi	r24, 0x4F	; 79
    3138:	9c e0       	ldi	r25, 0x0C	; 12
    313a:	0e 94 8a 30 	call	0x6114	; 0x6114 <_ZN7TwoWire17beginTransmissionEh>
    313e:	63 e0       	ldi	r22, 0x03	; 3
    3140:	8f e4       	ldi	r24, 0x4F	; 79
    3142:	9c e0       	ldi	r25, 0x0C	; 12
    3144:	0e 94 39 30 	call	0x6072	; 0x6072 <_ZN7TwoWire5writeEh>
    3148:	6c 2f       	mov	r22, r28
    314a:	8f e4       	ldi	r24, 0x4F	; 79
    314c:	9c e0       	ldi	r25, 0x0C	; 12
    314e:	0e 94 39 30 	call	0x6072	; 0x6072 <_ZN7TwoWire5writeEh>
    3152:	8f e4       	ldi	r24, 0x4F	; 79
    3154:	9c e0       	ldi	r25, 0x0C	; 12
    3156:	cf 91       	pop	r28
    3158:	0c 94 0b 31 	jmp	0x6216	; 0x6216 <_ZN7TwoWire15endTransmissionEv>

0000315c <_ZN7PCA953416Read_IP_REGISTEREv>:

uint8_t PCA9534::Read_IP_REGISTER() {
    315c:	cf 93       	push	r28
    315e:	df 93       	push	r29
    3160:	ec 01       	movw	r28, r24
	uint8_t buff = 0;

	//_i2caddr = i2caddr;

	Wire.beginTransmission(_i2caddr);
    3162:	68 81       	ld	r22, Y
    3164:	8f e4       	ldi	r24, 0x4F	; 79
    3166:	9c e0       	ldi	r25, 0x0C	; 12
    3168:	0e 94 8a 30 	call	0x6114	; 0x6114 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(PCA9534_IP_REGISTER);
    316c:	60 e0       	ldi	r22, 0x00	; 0
    316e:	8f e4       	ldi	r24, 0x4F	; 79
    3170:	9c e0       	ldi	r25, 0x0C	; 12
    3172:	0e 94 39 30 	call	0x6072	; 0x6072 <_ZN7TwoWire5writeEh>
	// Wire.write(_port);
	Wire.endTransmission();
    3176:	8f e4       	ldi	r24, 0x4F	; 79
    3178:	9c e0       	ldi	r25, 0x0C	; 12
    317a:	0e 94 0b 31 	call	0x6216	; 0x6216 <_ZN7TwoWire15endTransmissionEv>

	// We only need to read 1 byte of data to get the pins
	Wire.requestFrom(_i2caddr, 1);
    317e:	68 81       	ld	r22, Y
    3180:	70 e0       	ldi	r23, 0x00	; 0
    3182:	41 e0       	ldi	r20, 0x01	; 1
    3184:	50 e0       	ldi	r21, 0x00	; 0
    3186:	8f e4       	ldi	r24, 0x4F	; 79
    3188:	9c e0       	ldi	r25, 0x0C	; 12
    318a:	0e 94 09 31 	call	0x6212	; 0x6212 <_ZN7TwoWire11requestFromEii>
	}
	return (buff & (1 << pin)) ? HIGH : LOW;
}

uint8_t PCA9534::Read_IP_REGISTER() {
	uint8_t buff = 0;
    318e:	c0 e0       	ldi	r28, 0x00	; 0
	// Wire.write(_port);
	Wire.endTransmission();

	// We only need to read 1 byte of data to get the pins
	Wire.requestFrom(_i2caddr, 1);
	while (Wire.available()) {
    3190:	8f e4       	ldi	r24, 0x4F	; 79
    3192:	9c e0       	ldi	r25, 0x0C	; 12
    3194:	0e 94 ab 2f 	call	0x5f56	; 0x5f56 <_ZN7TwoWire9availableEv>
    3198:	89 2b       	or	r24, r25
    319a:	31 f0       	breq	.+12     	; 0x31a8 <_ZN7PCA953416Read_IP_REGISTEREv+0x4c>
		buff = Wire.read();
    319c:	8f e4       	ldi	r24, 0x4F	; 79
    319e:	9c e0       	ldi	r25, 0x0C	; 12
    31a0:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <_ZN7TwoWire4readEv>
    31a4:	c8 2f       	mov	r28, r24
	// Wire.write(_port);
	Wire.endTransmission();

	// We only need to read 1 byte of data to get the pins
	Wire.requestFrom(_i2caddr, 1);
	while (Wire.available()) {
    31a6:	f4 cf       	rjmp	.-24     	; 0x3190 <_ZN7PCA953416Read_IP_REGISTEREv+0x34>
		buff = Wire.read();
	}
	return buff;
    31a8:	8c 2f       	mov	r24, r28
    31aa:	df 91       	pop	r29
    31ac:	cf 91       	pop	r28
    31ae:	08 95       	ret

000031b0 <_ZN9NFC_PN532C1Ehh>:
    #endif
    return false;
  }

  return true;
}
    31b0:	cf 93       	push	r28
    31b2:	df 93       	push	r29
    31b4:	ec 01       	movw	r28, r24
    31b6:	86 2f       	mov	r24, r22
    31b8:	6c 83       	std	Y+4, r22	; 0x04
    31ba:	4d 83       	std	Y+5, r20	; 0x05
    31bc:	1d 8a       	std	Y+21, r1	; 0x15
    31be:	1e 8a       	std	Y+22, r1	; 0x16
    31c0:	60 e0       	ldi	r22, 0x00	; 0
    31c2:	0e 94 a1 36 	call	0x6d42	; 0x6d42 <pinMode>
    31c6:	61 e0       	ldi	r22, 0x01	; 1
    31c8:	8d 81       	ldd	r24, Y+5	; 0x05
    31ca:	df 91       	pop	r29
    31cc:	cf 91       	pop	r28
    31ce:	0c 94 a1 36 	jmp	0x6d42	; 0x6d42 <pinMode>

000031d2 <_ZN9NFC_PN5325beginEv>:
    31d2:	cf 93       	push	r28
    31d4:	df 93       	push	r29
    31d6:	ec 01       	movw	r28, r24
    31d8:	8f e4       	ldi	r24, 0x4F	; 79
    31da:	9c e0       	ldi	r25, 0x0C	; 12
    31dc:	0e 94 77 30 	call	0x60ee	; 0x60ee <_ZN7TwoWire5beginEv>
    31e0:	61 e0       	ldi	r22, 0x01	; 1
    31e2:	8d 81       	ldd	r24, Y+5	; 0x05
    31e4:	0e 94 dd 36 	call	0x6dba	; 0x6dba <digitalWrite>
    31e8:	60 e0       	ldi	r22, 0x00	; 0
    31ea:	8d 81       	ldd	r24, Y+5	; 0x05
    31ec:	0e 94 dd 36 	call	0x6dba	; 0x6dba <digitalWrite>
    31f0:	2f ef       	ldi	r18, 0xFF	; 255
    31f2:	87 e8       	ldi	r24, 0x87	; 135
    31f4:	93 e1       	ldi	r25, 0x13	; 19
    31f6:	21 50       	subi	r18, 0x01	; 1
    31f8:	80 40       	sbci	r24, 0x00	; 0
    31fa:	90 40       	sbci	r25, 0x00	; 0
    31fc:	e1 f7       	brne	.-8      	; 0x31f6 <_ZN9NFC_PN5325beginEv+0x24>
    31fe:	00 c0       	rjmp	.+0      	; 0x3200 <_ZN9NFC_PN5325beginEv+0x2e>
    3200:	00 00       	nop
    3202:	61 e0       	ldi	r22, 0x01	; 1
    3204:	8d 81       	ldd	r24, Y+5	; 0x05
    3206:	0e 94 dd 36 	call	0x6dba	; 0x6dba <digitalWrite>
    320a:	8f e3       	ldi	r24, 0x3F	; 63
    320c:	9c e9       	ldi	r25, 0x9C	; 156
    320e:	01 97       	sbiw	r24, 0x01	; 1
    3210:	f1 f7       	brne	.-4      	; 0x320e <_ZN9NFC_PN5325beginEv+0x3c>
    3212:	00 c0       	rjmp	.+0      	; 0x3214 <_ZN9NFC_PN5325beginEv+0x42>
    3214:	00 00       	nop
    3216:	df 91       	pop	r29
    3218:	cf 91       	pop	r28
    321a:	08 95       	ret

0000321c <_ZN9NFC_PN53210GetHexCodeEPKhm>:
    321c:	4f 92       	push	r4
    321e:	5f 92       	push	r5
    3220:	6f 92       	push	r6
    3222:	7f 92       	push	r7
    3224:	8f 92       	push	r8
    3226:	9f 92       	push	r9
    3228:	af 92       	push	r10
    322a:	bf 92       	push	r11
    322c:	ef 92       	push	r14
    322e:	ff 92       	push	r15
    3230:	0f 93       	push	r16
    3232:	1f 93       	push	r17
    3234:	cf 93       	push	r28
    3236:	df 93       	push	r29
    3238:	cd b7       	in	r28, 0x3d	; 61
    323a:	de b7       	in	r29, 0x3e	; 62
    323c:	2c 97       	sbiw	r28, 0x0c	; 12
    323e:	0f b6       	in	r0, 0x3f	; 63
    3240:	f8 94       	cli
    3242:	de bf       	out	0x3e, r29	; 62
    3244:	0f be       	out	0x3f, r0	; 63
    3246:	cd bf       	out	0x3d, r28	; 61
    3248:	7c 01       	movw	r14, r24
    324a:	5a 01       	movw	r10, r20
    324c:	28 01       	movw	r4, r16
    324e:	39 01       	movw	r6, r18
    3250:	6a e3       	ldi	r22, 0x3A	; 58
    3252:	72 e0       	ldi	r23, 0x02	; 2
    3254:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <_ZN6StringC1EPKc>
    3258:	85 01       	movw	r16, r10
    325a:	81 2c       	mov	r8, r1
    325c:	91 2c       	mov	r9, r1
    325e:	54 01       	movw	r10, r8
    3260:	84 14       	cp	r8, r4
    3262:	95 04       	cpc	r9, r5
    3264:	a6 04       	cpc	r10, r6
    3266:	b7 04       	cpc	r11, r7
    3268:	09 f4       	brne	.+2      	; 0x326c <_ZN9NFC_PN53210GetHexCodeEPKhm+0x50>
    326a:	46 c0       	rjmp	.+140    	; 0x32f8 <_ZN9NFC_PN53210GetHexCodeEPKhm+0xdc>
    326c:	f8 01       	movw	r30, r16
    326e:	61 91       	ld	r22, Z+
    3270:	8f 01       	movw	r16, r30
    3272:	40 e1       	ldi	r20, 0x10	; 16
    3274:	ce 01       	movw	r24, r28
    3276:	60 31       	cpi	r22, 0x10	; 16
    3278:	f0 f4       	brcc	.+60     	; 0x32b6 <_ZN9NFC_PN53210GetHexCodeEPKhm+0x9a>
    327a:	01 96       	adiw	r24, 0x01	; 1
    327c:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1Ehh>
    3280:	b7 01       	movw	r22, r14
    3282:	ce 01       	movw	r24, r28
    3284:	07 96       	adiw	r24, 0x07	; 7
    3286:	0e 94 07 38 	call	0x700e	; 0x700e <_ZN6StringC1ERKS_>
    328a:	68 ef       	ldi	r22, 0xF8	; 248
    328c:	75 e0       	ldi	r23, 0x05	; 5
    328e:	ce 01       	movw	r24, r28
    3290:	07 96       	adiw	r24, 0x07	; 7
    3292:	0e 94 81 39 	call	0x7302	; 0x7302 <_ZplRK15StringSumHelperPKc>
    3296:	be 01       	movw	r22, r28
    3298:	6f 5f       	subi	r22, 0xFF	; 255
    329a:	7f 4f       	sbci	r23, 0xFF	; 255
    329c:	0e 94 70 39 	call	0x72e0	; 0x72e0 <_ZplRK15StringSumHelperRK6String>
    32a0:	bc 01       	movw	r22, r24
    32a2:	c7 01       	movw	r24, r14
    32a4:	0e 94 f2 37 	call	0x6fe4	; 0x6fe4 <_ZN6StringaSERKS_>
    32a8:	ce 01       	movw	r24, r28
    32aa:	07 96       	adiw	r24, 0x07	; 7
    32ac:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
    32b0:	ce 01       	movw	r24, r28
    32b2:	01 96       	adiw	r24, 0x01	; 1
    32b4:	19 c0       	rjmp	.+50     	; 0x32e8 <_ZN9NFC_PN53210GetHexCodeEPKhm+0xcc>
    32b6:	07 96       	adiw	r24, 0x07	; 7
    32b8:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1Ehh>
    32bc:	b7 01       	movw	r22, r14
    32be:	ce 01       	movw	r24, r28
    32c0:	01 96       	adiw	r24, 0x01	; 1
    32c2:	0e 94 07 38 	call	0x700e	; 0x700e <_ZN6StringC1ERKS_>
    32c6:	be 01       	movw	r22, r28
    32c8:	69 5f       	subi	r22, 0xF9	; 249
    32ca:	7f 4f       	sbci	r23, 0xFF	; 255
    32cc:	ce 01       	movw	r24, r28
    32ce:	01 96       	adiw	r24, 0x01	; 1
    32d0:	0e 94 70 39 	call	0x72e0	; 0x72e0 <_ZplRK15StringSumHelperRK6String>
    32d4:	bc 01       	movw	r22, r24
    32d6:	c7 01       	movw	r24, r14
    32d8:	0e 94 f2 37 	call	0x6fe4	; 0x6fe4 <_ZN6StringaSERKS_>
    32dc:	ce 01       	movw	r24, r28
    32de:	01 96       	adiw	r24, 0x01	; 1
    32e0:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
    32e4:	ce 01       	movw	r24, r28
    32e6:	07 96       	adiw	r24, 0x07	; 7
    32e8:	0e 94 34 37 	call	0x6e68	; 0x6e68 <_ZN6StringD1Ev>
    32ec:	ff ef       	ldi	r31, 0xFF	; 255
    32ee:	8f 1a       	sub	r8, r31
    32f0:	9f 0a       	sbc	r9, r31
    32f2:	af 0a       	sbc	r10, r31
    32f4:	bf 0a       	sbc	r11, r31
    32f6:	b4 cf       	rjmp	.-152    	; 0x3260 <_ZN9NFC_PN53210GetHexCodeEPKhm+0x44>
    32f8:	85 ea       	ldi	r24, 0xA5	; 165
    32fa:	9c e0       	ldi	r25, 0x0C	; 12
    32fc:	0e 94 dd 34 	call	0x69ba	; 0x69ba <_ZN5Print7printlnEv>
    3300:	c7 01       	movw	r24, r14
    3302:	2c 96       	adiw	r28, 0x0c	; 12
    3304:	0f b6       	in	r0, 0x3f	; 63
    3306:	f8 94       	cli
    3308:	de bf       	out	0x3e, r29	; 62
    330a:	0f be       	out	0x3f, r0	; 63
    330c:	cd bf       	out	0x3d, r28	; 61
    330e:	df 91       	pop	r29
    3310:	cf 91       	pop	r28
    3312:	1f 91       	pop	r17
    3314:	0f 91       	pop	r16
    3316:	ff 90       	pop	r15
    3318:	ef 90       	pop	r14
    331a:	bf 90       	pop	r11
    331c:	af 90       	pop	r10
    331e:	9f 90       	pop	r9
    3320:	8f 90       	pop	r8
    3322:	7f 90       	pop	r7
    3324:	6f 90       	pop	r6
    3326:	5f 90       	pop	r5
    3328:	4f 90       	pop	r4
    332a:	08 95       	ret

0000332c <_ZN9NFC_PN5327isreadyEv>:
    332c:	fc 01       	movw	r30, r24
    332e:	84 81       	ldd	r24, Z+4	; 0x04
    3330:	0e 94 0b 37 	call	0x6e16	; 0x6e16 <digitalRead>
    3334:	91 e0       	ldi	r25, 0x01	; 1
    3336:	81 11       	cpse	r24, r1
    3338:	90 e0       	ldi	r25, 0x00	; 0
    333a:	89 2f       	mov	r24, r25
    333c:	08 95       	ret

0000333e <_ZN9NFC_PN5329waitreadyEj>:
    333e:	cf 92       	push	r12
    3340:	df 92       	push	r13
    3342:	ef 92       	push	r14
    3344:	ff 92       	push	r15
    3346:	1f 93       	push	r17
    3348:	cf 93       	push	r28
    334a:	df 93       	push	r29
    334c:	6c 01       	movw	r12, r24
    334e:	7b 01       	movw	r14, r22
    3350:	c0 e0       	ldi	r28, 0x00	; 0
    3352:	d0 e0       	ldi	r29, 0x00	; 0
    3354:	c6 01       	movw	r24, r12
    3356:	ea df       	rcall	.-44     	; 0x332c <_ZN9NFC_PN5327isreadyEv>
    3358:	18 2f       	mov	r17, r24
    335a:	81 11       	cpse	r24, r1
    335c:	15 c0       	rjmp	.+42     	; 0x3388 <_ZN9NFC_PN5329waitreadyEj+0x4a>
    335e:	e1 14       	cp	r14, r1
    3360:	f1 04       	cpc	r15, r1
    3362:	59 f0       	breq	.+22     	; 0x337a <_ZN9NFC_PN5329waitreadyEj+0x3c>
    3364:	2a 96       	adiw	r28, 0x0a	; 10
    3366:	ec 16       	cp	r14, r28
    3368:	fd 06       	cpc	r15, r29
    336a:	38 f4       	brcc	.+14     	; 0x337a <_ZN9NFC_PN5329waitreadyEj+0x3c>
    336c:	64 e4       	ldi	r22, 0x44	; 68
    336e:	79 e0       	ldi	r23, 0x09	; 9
    3370:	85 ea       	ldi	r24, 0xA5	; 165
    3372:	9c e0       	ldi	r25, 0x0C	; 12
    3374:	0e 94 00 35 	call	0x6a00	; 0x6a00 <_ZN5Print7printlnEPKc>
    3378:	07 c0       	rjmp	.+14     	; 0x3388 <_ZN9NFC_PN5329waitreadyEj+0x4a>
    337a:	8f e3       	ldi	r24, 0x3F	; 63
    337c:	9c e9       	ldi	r25, 0x9C	; 156
    337e:	01 97       	sbiw	r24, 0x01	; 1
    3380:	f1 f7       	brne	.-4      	; 0x337e <_ZN9NFC_PN5329waitreadyEj+0x40>
    3382:	00 c0       	rjmp	.+0      	; 0x3384 <_ZN9NFC_PN5329waitreadyEj+0x46>
    3384:	00 00       	nop
    3386:	e6 cf       	rjmp	.-52     	; 0x3354 <_ZN9NFC_PN5329waitreadyEj+0x16>
    3388:	81 2f       	mov	r24, r17
    338a:	df 91       	pop	r29
    338c:	cf 91       	pop	r28
    338e:	1f 91       	pop	r17
    3390:	ff 90       	pop	r15
    3392:	ef 90       	pop	r14
    3394:	df 90       	pop	r13
    3396:	cf 90       	pop	r12
    3398:	08 95       	ret

0000339a <_ZN9NFC_PN5328readdataEPhh>:
    339a:	ff 92       	push	r15
    339c:	0f 93       	push	r16
    339e:	1f 93       	push	r17
    33a0:	cf 93       	push	r28
    33a2:	df 93       	push	r29
    33a4:	f6 2e       	mov	r15, r22
    33a6:	07 2f       	mov	r16, r23
    33a8:	14 2f       	mov	r17, r20
    33aa:	8f e3       	ldi	r24, 0x3F	; 63
    33ac:	9f e1       	ldi	r25, 0x1F	; 31
    33ae:	01 97       	sbiw	r24, 0x01	; 1
    33b0:	f1 f7       	brne	.-4      	; 0x33ae <_ZN9NFC_PN5328readdataEPhh+0x14>
    33b2:	00 c0       	rjmp	.+0      	; 0x33b4 <_ZN9NFC_PN5328readdataEPhh+0x1a>
    33b4:	00 00       	nop
    33b6:	42 e0       	ldi	r20, 0x02	; 2
    33b8:	41 0f       	add	r20, r17
    33ba:	64 e2       	ldi	r22, 0x24	; 36
    33bc:	8f e4       	ldi	r24, 0x4F	; 79
    33be:	9c e0       	ldi	r25, 0x0C	; 12
    33c0:	0e 94 07 31 	call	0x620e	; 0x620e <_ZN7TwoWire11requestFromEhh>
    33c4:	8f e4       	ldi	r24, 0x4F	; 79
    33c6:	9c e0       	ldi	r25, 0x0C	; 12
    33c8:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <_ZN7TwoWire4readEv>
    33cc:	cf 2d       	mov	r28, r15
    33ce:	d0 2f       	mov	r29, r16
    33d0:	ce 01       	movw	r24, r28
    33d2:	81 0f       	add	r24, r17
    33d4:	91 1d       	adc	r25, r1
    33d6:	8c 01       	movw	r16, r24
    33d8:	c0 17       	cp	r28, r16
    33da:	d1 07       	cpc	r29, r17
    33dc:	61 f0       	breq	.+24     	; 0x33f6 <_ZN9NFC_PN5328readdataEPhh+0x5c>
    33de:	8f e9       	ldi	r24, 0x9F	; 159
    33e0:	9f e0       	ldi	r25, 0x0F	; 15
    33e2:	01 97       	sbiw	r24, 0x01	; 1
    33e4:	f1 f7       	brne	.-4      	; 0x33e2 <_ZN9NFC_PN5328readdataEPhh+0x48>
    33e6:	00 c0       	rjmp	.+0      	; 0x33e8 <_ZN9NFC_PN5328readdataEPhh+0x4e>
    33e8:	00 00       	nop
    33ea:	8f e4       	ldi	r24, 0x4F	; 79
    33ec:	9c e0       	ldi	r25, 0x0C	; 12
    33ee:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <_ZN7TwoWire4readEv>
    33f2:	89 93       	st	Y+, r24
    33f4:	f1 cf       	rjmp	.-30     	; 0x33d8 <_ZN9NFC_PN5328readdataEPhh+0x3e>
    33f6:	df 91       	pop	r29
    33f8:	cf 91       	pop	r28
    33fa:	1f 91       	pop	r17
    33fc:	0f 91       	pop	r16
    33fe:	ff 90       	pop	r15
    3400:	08 95       	ret

00003402 <_ZN9NFC_PN5327readackEv>:
    3402:	cf 93       	push	r28
    3404:	df 93       	push	r29
    3406:	00 d0       	rcall	.+0      	; 0x3408 <_ZN9NFC_PN5327readackEv+0x6>
    3408:	00 d0       	rcall	.+0      	; 0x340a <_ZN9NFC_PN5327readackEv+0x8>
    340a:	00 d0       	rcall	.+0      	; 0x340c <_ZN9NFC_PN5327readackEv+0xa>
    340c:	cd b7       	in	r28, 0x3d	; 61
    340e:	de b7       	in	r29, 0x3e	; 62
    3410:	46 e0       	ldi	r20, 0x06	; 6
    3412:	be 01       	movw	r22, r28
    3414:	6f 5f       	subi	r22, 0xFF	; 255
    3416:	7f 4f       	sbci	r23, 0xFF	; 255
    3418:	c0 df       	rcall	.-128    	; 0x339a <_ZN9NFC_PN5328readdataEPhh>
    341a:	46 e0       	ldi	r20, 0x06	; 6
    341c:	50 e0       	ldi	r21, 0x00	; 0
    341e:	67 e5       	ldi	r22, 0x57	; 87
    3420:	71 e0       	ldi	r23, 0x01	; 1
    3422:	ce 01       	movw	r24, r28
    3424:	01 96       	adiw	r24, 0x01	; 1
    3426:	0e 94 3f 3d 	call	0x7a7e	; 0x7a7e <strncmp>
    342a:	21 e0       	ldi	r18, 0x01	; 1
    342c:	89 2b       	or	r24, r25
    342e:	09 f0       	breq	.+2      	; 0x3432 <_ZN9NFC_PN5327readackEv+0x30>
    3430:	20 e0       	ldi	r18, 0x00	; 0
    3432:	82 2f       	mov	r24, r18
    3434:	26 96       	adiw	r28, 0x06	; 6
    3436:	0f b6       	in	r0, 0x3f	; 63
    3438:	f8 94       	cli
    343a:	de bf       	out	0x3e, r29	; 62
    343c:	0f be       	out	0x3f, r0	; 63
    343e:	cd bf       	out	0x3d, r28	; 61
    3440:	df 91       	pop	r29
    3442:	cf 91       	pop	r28
    3444:	08 95       	ret

00003446 <_ZL8i2c_sendh>:
    3446:	68 2f       	mov	r22, r24
    3448:	8f e4       	ldi	r24, 0x4F	; 79
    344a:	9c e0       	ldi	r25, 0x0C	; 12
    344c:	0c 94 39 30 	jmp	0x6072	; 0x6072 <_ZN7TwoWire5writeEh>

00003450 <_ZN9NFC_PN53212writecommandEPhh>:
    3450:	cf 92       	push	r12
    3452:	df 92       	push	r13
    3454:	ef 92       	push	r14
    3456:	ff 92       	push	r15
    3458:	0f 93       	push	r16
    345a:	1f 93       	push	r17
    345c:	cf 93       	push	r28
    345e:	df 93       	push	r29
    3460:	7b 01       	movw	r14, r22
    3462:	c1 e0       	ldi	r28, 0x01	; 1
    3464:	c4 0f       	add	r28, r20
    3466:	8f e3       	ldi	r24, 0x3F	; 63
    3468:	9f e1       	ldi	r25, 0x1F	; 31
    346a:	01 97       	sbiw	r24, 0x01	; 1
    346c:	f1 f7       	brne	.-4      	; 0x346a <_ZN9NFC_PN53212writecommandEPhh+0x1a>
    346e:	00 c0       	rjmp	.+0      	; 0x3470 <_ZN9NFC_PN53212writecommandEPhh+0x20>
    3470:	00 00       	nop
    3472:	64 e2       	ldi	r22, 0x24	; 36
    3474:	70 e0       	ldi	r23, 0x00	; 0
    3476:	8f e4       	ldi	r24, 0x4F	; 79
    3478:	9c e0       	ldi	r25, 0x0C	; 12
    347a:	0e 94 94 30 	call	0x6128	; 0x6128 <_ZN7TwoWire17beginTransmissionEi>
    347e:	80 e0       	ldi	r24, 0x00	; 0
    3480:	e2 df       	rcall	.-60     	; 0x3446 <_ZL8i2c_sendh>
    3482:	80 e0       	ldi	r24, 0x00	; 0
    3484:	e0 df       	rcall	.-64     	; 0x3446 <_ZL8i2c_sendh>
    3486:	8f ef       	ldi	r24, 0xFF	; 255
    3488:	de df       	rcall	.-68     	; 0x3446 <_ZL8i2c_sendh>
    348a:	8c 2f       	mov	r24, r28
    348c:	dc df       	rcall	.-72     	; 0x3446 <_ZL8i2c_sendh>
    348e:	8c 2f       	mov	r24, r28
    3490:	81 95       	neg	r24
    3492:	d9 df       	rcall	.-78     	; 0x3446 <_ZL8i2c_sendh>
    3494:	84 ed       	ldi	r24, 0xD4	; 212
    3496:	d7 df       	rcall	.-82     	; 0x3446 <_ZL8i2c_sendh>
    3498:	c1 2c       	mov	r12, r1
    349a:	83 ed       	ldi	r24, 0xD3	; 211
    349c:	d8 2e       	mov	r13, r24
    349e:	d0 e0       	ldi	r29, 0x00	; 0
    34a0:	21 97       	sbiw	r28, 0x01	; 1
    34a2:	0c 2d       	mov	r16, r12
    34a4:	10 e0       	ldi	r17, 0x00	; 0
    34a6:	0c 17       	cp	r16, r28
    34a8:	1d 07       	cpc	r17, r29
    34aa:	54 f4       	brge	.+20     	; 0x34c0 <_ZN9NFC_PN53212writecommandEPhh+0x70>
    34ac:	0e 0d       	add	r16, r14
    34ae:	1f 1d       	adc	r17, r15
    34b0:	f8 01       	movw	r30, r16
    34b2:	80 81       	ld	r24, Z
    34b4:	c8 df       	rcall	.-112    	; 0x3446 <_ZL8i2c_sendh>
    34b6:	f8 01       	movw	r30, r16
    34b8:	80 81       	ld	r24, Z
    34ba:	d8 0e       	add	r13, r24
    34bc:	c3 94       	inc	r12
    34be:	f1 cf       	rjmp	.-30     	; 0x34a2 <_ZN9NFC_PN53212writecommandEPhh+0x52>
    34c0:	8d 2d       	mov	r24, r13
    34c2:	80 95       	com	r24
    34c4:	c0 df       	rcall	.-128    	; 0x3446 <_ZL8i2c_sendh>
    34c6:	80 e0       	ldi	r24, 0x00	; 0
    34c8:	be df       	rcall	.-132    	; 0x3446 <_ZL8i2c_sendh>
    34ca:	8f e4       	ldi	r24, 0x4F	; 79
    34cc:	9c e0       	ldi	r25, 0x0C	; 12
    34ce:	df 91       	pop	r29
    34d0:	cf 91       	pop	r28
    34d2:	1f 91       	pop	r17
    34d4:	0f 91       	pop	r16
    34d6:	ff 90       	pop	r15
    34d8:	ef 90       	pop	r14
    34da:	df 90       	pop	r13
    34dc:	cf 90       	pop	r12
    34de:	0c 94 0b 31 	jmp	0x6216	; 0x6216 <_ZN7TwoWire15endTransmissionEv>

000034e2 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>:
    34e2:	0f 93       	push	r16
    34e4:	1f 93       	push	r17
    34e6:	cf 93       	push	r28
    34e8:	df 93       	push	r29
    34ea:	ec 01       	movw	r28, r24
    34ec:	89 01       	movw	r16, r18
    34ee:	b0 df       	rcall	.-160    	; 0x3450 <_ZN9NFC_PN53212writecommandEPhh>
    34f0:	b8 01       	movw	r22, r16
    34f2:	ce 01       	movw	r24, r28
    34f4:	24 df       	rcall	.-440    	; 0x333e <_ZN9NFC_PN5329waitreadyEj>
    34f6:	88 23       	and	r24, r24
    34f8:	31 f0       	breq	.+12     	; 0x3506 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj+0x24>
    34fa:	ce 01       	movw	r24, r28
    34fc:	df 91       	pop	r29
    34fe:	cf 91       	pop	r28
    3500:	1f 91       	pop	r17
    3502:	0f 91       	pop	r16
    3504:	7e cf       	rjmp	.-260    	; 0x3402 <_ZN9NFC_PN5327readackEv>
    3506:	80 e0       	ldi	r24, 0x00	; 0
    3508:	df 91       	pop	r29
    350a:	cf 91       	pop	r28
    350c:	1f 91       	pop	r17
    350e:	0f 91       	pop	r16
    3510:	08 95       	ret

00003512 <_ZN9NFC_PN53218getFirmwareVersionEv>:
    3512:	cf 93       	push	r28
    3514:	df 93       	push	r29
    3516:	ec 01       	movw	r28, r24
    3518:	82 e0       	ldi	r24, 0x02	; 2
    351a:	80 93 56 0b 	sts	0x0B56, r24	; 0x800b56 <pn532_packetbuffer>
    351e:	28 ee       	ldi	r18, 0xE8	; 232
    3520:	33 e0       	ldi	r19, 0x03	; 3
    3522:	41 e0       	ldi	r20, 0x01	; 1
    3524:	66 e5       	ldi	r22, 0x56	; 86
    3526:	7b e0       	ldi	r23, 0x0B	; 11
    3528:	ce 01       	movw	r24, r28
    352a:	db df       	rcall	.-74     	; 0x34e2 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    352c:	81 11       	cpse	r24, r1
    352e:	04 c0       	rjmp	.+8      	; 0x3538 <_ZN9NFC_PN53218getFirmwareVersionEv+0x26>
    3530:	60 e0       	ldi	r22, 0x00	; 0
    3532:	70 e0       	ldi	r23, 0x00	; 0
    3534:	cb 01       	movw	r24, r22
    3536:	32 c0       	rjmp	.+100    	; 0x359c <_ZN9NFC_PN53218getFirmwareVersionEv+0x8a>
    3538:	4c e0       	ldi	r20, 0x0C	; 12
    353a:	66 e5       	ldi	r22, 0x56	; 86
    353c:	7b e0       	ldi	r23, 0x0B	; 11
    353e:	ce 01       	movw	r24, r28
    3540:	2c df       	rcall	.-424    	; 0x339a <_ZN9NFC_PN5328readdataEPhh>
    3542:	46 e0       	ldi	r20, 0x06	; 6
    3544:	50 e0       	ldi	r21, 0x00	; 0
    3546:	61 e5       	ldi	r22, 0x51	; 81
    3548:	71 e0       	ldi	r23, 0x01	; 1
    354a:	86 e5       	ldi	r24, 0x56	; 86
    354c:	9b e0       	ldi	r25, 0x0B	; 11
    354e:	0e 94 3f 3d 	call	0x7a7e	; 0x7a7e <strncmp>
    3552:	89 2b       	or	r24, r25
    3554:	69 f7       	brne	.-38     	; 0x3530 <_ZN9NFC_PN53218getFirmwareVersionEv+0x1e>
    3556:	8d 89       	ldd	r24, Y+21	; 0x15
    3558:	81 11       	cpse	r24, r1
    355a:	03 c0       	rjmp	.+6      	; 0x3562 <_ZN9NFC_PN53218getFirmwareVersionEv+0x50>
    355c:	e7 e0       	ldi	r30, 0x07	; 7
    355e:	f0 e0       	ldi	r31, 0x00	; 0
    3560:	02 c0       	rjmp	.+4      	; 0x3566 <_ZN9NFC_PN53218getFirmwareVersionEv+0x54>
    3562:	e6 e0       	ldi	r30, 0x06	; 6
    3564:	f0 e0       	ldi	r31, 0x00	; 0
    3566:	ea 5a       	subi	r30, 0xAA	; 170
    3568:	f4 4f       	sbci	r31, 0xF4	; 244
    356a:	60 81       	ld	r22, Z
    356c:	86 2f       	mov	r24, r22
    356e:	90 e0       	ldi	r25, 0x00	; 0
    3570:	a0 e0       	ldi	r26, 0x00	; 0
    3572:	b0 e0       	ldi	r27, 0x00	; 0
    3574:	ba 2f       	mov	r27, r26
    3576:	a9 2f       	mov	r26, r25
    3578:	98 2f       	mov	r25, r24
    357a:	88 27       	eor	r24, r24
    357c:	21 81       	ldd	r18, Z+1	; 0x01
    357e:	82 2b       	or	r24, r18
    3580:	ba 2f       	mov	r27, r26
    3582:	a9 2f       	mov	r26, r25
    3584:	98 2f       	mov	r25, r24
    3586:	88 27       	eor	r24, r24
    3588:	22 81       	ldd	r18, Z+2	; 0x02
    358a:	82 2b       	or	r24, r18
    358c:	ba 2f       	mov	r27, r26
    358e:	a9 2f       	mov	r26, r25
    3590:	98 2f       	mov	r25, r24
    3592:	88 27       	eor	r24, r24
    3594:	23 81       	ldd	r18, Z+3	; 0x03
    3596:	bc 01       	movw	r22, r24
    3598:	cd 01       	movw	r24, r26
    359a:	62 2b       	or	r22, r18
    359c:	df 91       	pop	r29
    359e:	cf 91       	pop	r28
    35a0:	08 95       	ret

000035a2 <_ZN9NFC_PN5329SAMConfigEv>:
    35a2:	cf 93       	push	r28
    35a4:	df 93       	push	r29
    35a6:	ec 01       	movw	r28, r24
    35a8:	94 e1       	ldi	r25, 0x14	; 20
    35aa:	90 93 56 0b 	sts	0x0B56, r25	; 0x800b56 <pn532_packetbuffer>
    35ae:	81 e0       	ldi	r24, 0x01	; 1
    35b0:	80 93 57 0b 	sts	0x0B57, r24	; 0x800b57 <pn532_packetbuffer+0x1>
    35b4:	90 93 58 0b 	sts	0x0B58, r25	; 0x800b58 <pn532_packetbuffer+0x2>
    35b8:	80 93 59 0b 	sts	0x0B59, r24	; 0x800b59 <pn532_packetbuffer+0x3>
    35bc:	28 ee       	ldi	r18, 0xE8	; 232
    35be:	33 e0       	ldi	r19, 0x03	; 3
    35c0:	44 e0       	ldi	r20, 0x04	; 4
    35c2:	66 e5       	ldi	r22, 0x56	; 86
    35c4:	7b e0       	ldi	r23, 0x0B	; 11
    35c6:	ce 01       	movw	r24, r28
    35c8:	8c df       	rcall	.-232    	; 0x34e2 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    35ca:	88 23       	and	r24, r24
    35cc:	a9 f0       	breq	.+42     	; 0x35f8 <_ZN9NFC_PN5329SAMConfigEv+0x56>
    35ce:	48 e0       	ldi	r20, 0x08	; 8
    35d0:	66 e5       	ldi	r22, 0x56	; 86
    35d2:	7b e0       	ldi	r23, 0x0B	; 11
    35d4:	ce 01       	movw	r24, r28
    35d6:	e1 de       	rcall	.-574    	; 0x339a <_ZN9NFC_PN5328readdataEPhh>
    35d8:	8d 89       	ldd	r24, Y+21	; 0x15
    35da:	81 11       	cpse	r24, r1
    35dc:	03 c0       	rjmp	.+6      	; 0x35e4 <_ZN9NFC_PN5329SAMConfigEv+0x42>
    35de:	86 e0       	ldi	r24, 0x06	; 6
    35e0:	90 e0       	ldi	r25, 0x00	; 0
    35e2:	02 c0       	rjmp	.+4      	; 0x35e8 <_ZN9NFC_PN5329SAMConfigEv+0x46>
    35e4:	85 e0       	ldi	r24, 0x05	; 5
    35e6:	90 e0       	ldi	r25, 0x00	; 0
    35e8:	fc 01       	movw	r30, r24
    35ea:	ea 5a       	subi	r30, 0xAA	; 170
    35ec:	f4 4f       	sbci	r31, 0xF4	; 244
    35ee:	81 e0       	ldi	r24, 0x01	; 1
    35f0:	90 81       	ld	r25, Z
    35f2:	95 31       	cpi	r25, 0x15	; 21
    35f4:	09 f0       	breq	.+2      	; 0x35f8 <_ZN9NFC_PN5329SAMConfigEv+0x56>
    35f6:	80 e0       	ldi	r24, 0x00	; 0
    35f8:	df 91       	pop	r29
    35fa:	cf 91       	pop	r28
    35fc:	08 95       	ret

000035fe <_ZN9NFC_PN53227setPassiveActivationRetriesEh>:
    35fe:	e6 e5       	ldi	r30, 0x56	; 86
    3600:	fb e0       	ldi	r31, 0x0B	; 11
    3602:	22 e3       	ldi	r18, 0x32	; 50
    3604:	20 83       	st	Z, r18
    3606:	25 e0       	ldi	r18, 0x05	; 5
    3608:	21 83       	std	Z+1, r18	; 0x01
    360a:	2f ef       	ldi	r18, 0xFF	; 255
    360c:	22 83       	std	Z+2, r18	; 0x02
    360e:	21 e0       	ldi	r18, 0x01	; 1
    3610:	23 83       	std	Z+3, r18	; 0x03
    3612:	64 83       	std	Z+4, r22	; 0x04
    3614:	28 ee       	ldi	r18, 0xE8	; 232
    3616:	33 e0       	ldi	r19, 0x03	; 3
    3618:	45 e0       	ldi	r20, 0x05	; 5
    361a:	bf 01       	movw	r22, r30
    361c:	62 cf       	rjmp	.-316    	; 0x34e2 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>

0000361e <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j>:
    361e:	af 92       	push	r10
    3620:	bf 92       	push	r11
    3622:	cf 92       	push	r12
    3624:	df 92       	push	r13
    3626:	ef 92       	push	r14
    3628:	ff 92       	push	r15
    362a:	0f 93       	push	r16
    362c:	1f 93       	push	r17
    362e:	cf 93       	push	r28
    3630:	df 93       	push	r29
    3632:	ec 01       	movw	r28, r24
    3634:	7a 01       	movw	r14, r20
    3636:	59 01       	movw	r10, r18
    3638:	68 01       	movw	r12, r16
    363a:	8a e4       	ldi	r24, 0x4A	; 74
    363c:	80 93 56 0b 	sts	0x0B56, r24	; 0x800b56 <pn532_packetbuffer>
    3640:	81 e0       	ldi	r24, 0x01	; 1
    3642:	80 93 57 0b 	sts	0x0B57, r24	; 0x800b57 <pn532_packetbuffer+0x1>
    3646:	60 93 58 0b 	sts	0x0B58, r22	; 0x800b58 <pn532_packetbuffer+0x2>
    364a:	98 01       	movw	r18, r16
    364c:	43 e0       	ldi	r20, 0x03	; 3
    364e:	66 e5       	ldi	r22, 0x56	; 86
    3650:	7b e0       	ldi	r23, 0x0B	; 11
    3652:	ce 01       	movw	r24, r28
    3654:	46 df       	rcall	.-372    	; 0x34e2 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    3656:	18 2f       	mov	r17, r24
    3658:	88 23       	and	r24, r24
    365a:	41 f1       	breq	.+80     	; 0x36ac <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x8e>
    365c:	8d 89       	ldd	r24, Y+21	; 0x15
    365e:	88 23       	and	r24, r24
    3660:	79 f0       	breq	.+30     	; 0x3680 <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x62>
    3662:	44 e1       	ldi	r20, 0x14	; 20
    3664:	66 e5       	ldi	r22, 0x56	; 86
    3666:	7b e0       	ldi	r23, 0x0B	; 11
    3668:	ce 01       	movw	r24, r28
    366a:	97 de       	rcall	.-722    	; 0x339a <_ZN9NFC_PN5328readdataEPhh>
    366c:	80 91 5d 0b 	lds	r24, 0x0B5D	; 0x800b5d <pn532_packetbuffer+0x7>
    3670:	81 30       	cpi	r24, 0x01	; 1
    3672:	e1 f4       	brne	.+56     	; 0x36ac <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x8e>
    3674:	80 91 62 0b 	lds	r24, 0x0B62	; 0x800b62 <pn532_packetbuffer+0xc>
    3678:	f5 01       	movw	r30, r10
    367a:	80 83       	st	Z, r24
    367c:	80 e0       	ldi	r24, 0x00	; 0
    367e:	06 c0       	rjmp	.+12     	; 0x368c <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x6e>
    3680:	b6 01       	movw	r22, r12
    3682:	ce 01       	movw	r24, r28
    3684:	5c de       	rcall	.-840    	; 0x333e <_ZN9NFC_PN5329waitreadyEj>
    3686:	81 11       	cpse	r24, r1
    3688:	ec cf       	rjmp	.-40     	; 0x3662 <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x44>
    368a:	10 c0       	rjmp	.+32     	; 0x36ac <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x8e>
    368c:	90 91 62 0b 	lds	r25, 0x0B62	; 0x800b62 <pn532_packetbuffer+0xc>
    3690:	89 17       	cp	r24, r25
    3692:	68 f4       	brcc	.+26     	; 0x36ae <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x90>
    3694:	28 2f       	mov	r18, r24
    3696:	30 e0       	ldi	r19, 0x00	; 0
    3698:	f9 01       	movw	r30, r18
    369a:	ea 5a       	subi	r30, 0xAA	; 170
    369c:	f4 4f       	sbci	r31, 0xF4	; 244
    369e:	95 85       	ldd	r25, Z+13	; 0x0d
    36a0:	f7 01       	movw	r30, r14
    36a2:	e2 0f       	add	r30, r18
    36a4:	f3 1f       	adc	r31, r19
    36a6:	90 83       	st	Z, r25
    36a8:	8f 5f       	subi	r24, 0xFF	; 255
    36aa:	f0 cf       	rjmp	.-32     	; 0x368c <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x6e>
    36ac:	10 e0       	ldi	r17, 0x00	; 0
    36ae:	81 2f       	mov	r24, r17
    36b0:	df 91       	pop	r29
    36b2:	cf 91       	pop	r28
    36b4:	1f 91       	pop	r17
    36b6:	0f 91       	pop	r16
    36b8:	ff 90       	pop	r15
    36ba:	ef 90       	pop	r14
    36bc:	df 90       	pop	r13
    36be:	cf 90       	pop	r12
    36c0:	bf 90       	pop	r11
    36c2:	af 90       	pop	r10
    36c4:	08 95       	ret

000036c6 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_>:

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
uint8_t NFC_PN532::mifareclassic_AuthenticateBlock (uint8_t * uid, uint8_t uidLen, uint32_t blockNumber, uint8_t keyNumber, uint8_t * keyData)
{
    36c6:	af 92       	push	r10
    36c8:	bf 92       	push	r11
    36ca:	cf 92       	push	r12
    36cc:	df 92       	push	r13
    36ce:	ef 92       	push	r14
    36d0:	0f 93       	push	r16
    36d2:	1f 93       	push	r17
    36d4:	cf 93       	push	r28
    36d6:	df 93       	push	r29
    36d8:	ec 01       	movw	r28, r24
    36da:	14 2f       	mov	r17, r20
  uint8_t len;
  uint8_t i;

  // Hang on to the key and uid data
  memcpy (_key, keyData, 6);
    36dc:	5c 01       	movw	r10, r24
    36de:	8e e0       	ldi	r24, 0x0E	; 14
    36e0:	a8 0e       	add	r10, r24
    36e2:	b1 1c       	adc	r11, r1
    36e4:	86 e0       	ldi	r24, 0x06	; 6
    36e6:	f6 01       	movw	r30, r12
    36e8:	d5 01       	movw	r26, r10
    36ea:	01 90       	ld	r0, Z+
    36ec:	0d 92       	st	X+, r0
    36ee:	8a 95       	dec	r24
    36f0:	e1 f7       	brne	.-8      	; 0x36ea <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x24>
  memcpy (_uid, uid, uidLen);
    36f2:	50 e0       	ldi	r21, 0x00	; 0
    36f4:	ce 01       	movw	r24, r28
    36f6:	06 96       	adiw	r24, 0x06	; 6
    36f8:	0e 94 26 3d 	call	0x7a4c	; 0x7a4c <memcpy>
  _uidLen = uidLen;
    36fc:	1d 87       	std	Y+13, r17	; 0x0d
    PN532DEBUGPRINT.print(F("Using authentication KEY "));PN532DEBUGPRINT.print(keyNumber ? 'B' : 'A');PN532DEBUGPRINT.print(F(": "));
    NFC_PN532::PrintHex(_key, 6);
  #endif

  // Prepare the authentication command //
  pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;   /* Data Exchange Header */
    36fe:	80 e4       	ldi	r24, 0x40	; 64
    3700:	80 93 56 0b 	sts	0x0B56, r24	; 0x800b56 <pn532_packetbuffer>
  pn532_packetbuffer[1] = 1;                              /* Max card numbers */
    3704:	81 e0       	ldi	r24, 0x01	; 1
    3706:	80 93 57 0b 	sts	0x0B57, r24	; 0x800b57 <pn532_packetbuffer+0x1>
  pn532_packetbuffer[2] = (keyNumber) ? MIFARE_CMD_AUTH_B : MIFARE_CMD_AUTH_A;
    370a:	e1 10       	cpse	r14, r1
    370c:	02 c0       	rjmp	.+4      	; 0x3712 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x4c>
    370e:	80 e6       	ldi	r24, 0x60	; 96
    3710:	01 c0       	rjmp	.+2      	; 0x3714 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x4e>
    3712:	81 e6       	ldi	r24, 0x61	; 97
    3714:	80 93 58 0b 	sts	0x0B58, r24	; 0x800b58 <pn532_packetbuffer+0x2>
  pn532_packetbuffer[3] = blockNumber;                    /* Block Number (1K = 0..63, 4K = 0..255 */
    3718:	00 93 59 0b 	sts	0x0B59, r16	; 0x800b59 <pn532_packetbuffer+0x3>
  memcpy (pn532_packetbuffer+4, _key, 6);
    371c:	86 e0       	ldi	r24, 0x06	; 6
    371e:	f5 01       	movw	r30, r10
    3720:	aa e5       	ldi	r26, 0x5A	; 90
    3722:	bb e0       	ldi	r27, 0x0B	; 11
    3724:	01 90       	ld	r0, Z+
    3726:	0d 92       	st	X+, r0
    3728:	8a 95       	dec	r24
    372a:	e1 f7       	brne	.-8      	; 0x3724 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x5e>
  for (i = 0; i < _uidLen; i++)
    372c:	80 e0       	ldi	r24, 0x00	; 0
    372e:	4d 85       	ldd	r20, Y+13	; 0x0d
    3730:	84 17       	cp	r24, r20
    3732:	60 f4       	brcc	.+24     	; 0x374c <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x86>
  {
    pn532_packetbuffer[10+i] = _uid[i];                /* 4 byte card ID */
    3734:	28 2f       	mov	r18, r24
    3736:	30 e0       	ldi	r19, 0x00	; 0
    3738:	fe 01       	movw	r30, r28
    373a:	e2 0f       	add	r30, r18
    373c:	f3 1f       	adc	r31, r19
    373e:	96 81       	ldd	r25, Z+6	; 0x06
    3740:	f9 01       	movw	r30, r18
    3742:	ea 5a       	subi	r30, 0xAA	; 170
    3744:	f4 4f       	sbci	r31, 0xF4	; 244
    3746:	92 87       	std	Z+10, r25	; 0x0a
  pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;   /* Data Exchange Header */
  pn532_packetbuffer[1] = 1;                              /* Max card numbers */
  pn532_packetbuffer[2] = (keyNumber) ? MIFARE_CMD_AUTH_B : MIFARE_CMD_AUTH_A;
  pn532_packetbuffer[3] = blockNumber;                    /* Block Number (1K = 0..63, 4K = 0..255 */
  memcpy (pn532_packetbuffer+4, _key, 6);
  for (i = 0; i < _uidLen; i++)
    3748:	8f 5f       	subi	r24, 0xFF	; 255
    374a:	f1 cf       	rjmp	.-30     	; 0x372e <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x68>
  {
    pn532_packetbuffer[10+i] = _uid[i];                /* 4 byte card ID */
  }

  if (! sendCommandCheckAck(pn532_packetbuffer, 10+_uidLen))
    374c:	46 5f       	subi	r20, 0xF6	; 246
    374e:	28 ee       	ldi	r18, 0xE8	; 232
    3750:	33 e0       	ldi	r19, 0x03	; 3
    3752:	66 e5       	ldi	r22, 0x56	; 86
    3754:	7b e0       	ldi	r23, 0x0B	; 11
    3756:	ce 01       	movw	r24, r28
    3758:	c4 de       	rcall	.-632    	; 0x34e2 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    375a:	88 23       	and	r24, r24
    375c:	49 f0       	breq	.+18     	; 0x3770 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0xaa>
    return 0;

  // Read the response packet
  readdata(pn532_packetbuffer, 12);
    375e:	4c e0       	ldi	r20, 0x0C	; 12
    3760:	66 e5       	ldi	r22, 0x56	; 86
    3762:	7b e0       	ldi	r23, 0x0B	; 11
    3764:	ce 01       	movw	r24, r28
    3766:	19 de       	rcall	.-974    	; 0x339a <_ZN9NFC_PN5328readdataEPhh>
  {
    pn532_packetbuffer[10+i] = _uid[i];                /* 4 byte card ID */
  }

  if (! sendCommandCheckAck(pn532_packetbuffer, 10+_uidLen))
    return 0;
    3768:	81 e0       	ldi	r24, 0x01	; 1
    376a:	90 91 5d 0b 	lds	r25, 0x0B5D	; 0x800b5d <pn532_packetbuffer+0x7>
    376e:	91 11       	cpse	r25, r1
    3770:	80 e0       	ldi	r24, 0x00	; 0
    #endif
    return 0;
  }

  return 1;
}
    3772:	df 91       	pop	r29
    3774:	cf 91       	pop	r28
    3776:	1f 91       	pop	r17
    3778:	0f 91       	pop	r16
    377a:	ef 90       	pop	r14
    377c:	df 90       	pop	r13
    377e:	cf 90       	pop	r12
    3780:	bf 90       	pop	r11
    3782:	af 90       	pop	r10
    3784:	08 95       	ret

00003786 <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh>:

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
uint8_t NFC_PN532::mifareclassic_ReadDataBlock (uint8_t blockNumber, uint8_t * data)
{
    3786:	0f 93       	push	r16
    3788:	1f 93       	push	r17
    378a:	cf 93       	push	r28
    378c:	df 93       	push	r29
    378e:	ec 01       	movw	r28, r24
    3790:	8a 01       	movw	r16, r20
  #ifdef MIFAREDEBUG
    PN532DEBUGPRINT.print(F("Trying to read 16 bytes from block "));PN532DEBUGPRINT.println(blockNumber);
  #endif

  /* Prepare the command */
  pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;
    3792:	80 e4       	ldi	r24, 0x40	; 64
    3794:	80 93 56 0b 	sts	0x0B56, r24	; 0x800b56 <pn532_packetbuffer>
  pn532_packetbuffer[1] = 1;                      /* Card number */
    3798:	81 e0       	ldi	r24, 0x01	; 1
    379a:	80 93 57 0b 	sts	0x0B57, r24	; 0x800b57 <pn532_packetbuffer+0x1>
  pn532_packetbuffer[2] = MIFARE_CMD_READ;        /* Mifare Read command = 0x30 */
    379e:	80 e3       	ldi	r24, 0x30	; 48
    37a0:	80 93 58 0b 	sts	0x0B58, r24	; 0x800b58 <pn532_packetbuffer+0x2>
  pn532_packetbuffer[3] = blockNumber;            /* Block Number (0..63 for 1K, 0..255 for 4K) */
    37a4:	60 93 59 0b 	sts	0x0B59, r22	; 0x800b59 <pn532_packetbuffer+0x3>

  /* Send the command */
  if (! sendCommandCheckAck(pn532_packetbuffer, 4))
    37a8:	28 ee       	ldi	r18, 0xE8	; 232
    37aa:	33 e0       	ldi	r19, 0x03	; 3
    37ac:	44 e0       	ldi	r20, 0x04	; 4
    37ae:	66 e5       	ldi	r22, 0x56	; 86
    37b0:	7b e0       	ldi	r23, 0x0B	; 11
    37b2:	ce 01       	movw	r24, r28
    37b4:	96 de       	rcall	.-724    	; 0x34e2 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    37b6:	81 11       	cpse	r24, r1
    37b8:	02 c0       	rjmp	.+4      	; 0x37be <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh+0x38>
  {
    #ifdef MIFAREDEBUG
      PN532DEBUGPRINT.println(F("Failed to receive ACK for read command"));
    #endif
    return 0;
    37ba:	80 e0       	ldi	r24, 0x00	; 0
    37bc:	12 c0       	rjmp	.+36     	; 0x37e2 <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh+0x5c>
  }

  /* Read the response packet */
  readdata(pn532_packetbuffer, 26);
    37be:	4a e1       	ldi	r20, 0x1A	; 26
    37c0:	66 e5       	ldi	r22, 0x56	; 86
    37c2:	7b e0       	ldi	r23, 0x0B	; 11
    37c4:	ce 01       	movw	r24, r28
    37c6:	e9 dd       	rcall	.-1070   	; 0x339a <_ZN9NFC_PN5328readdataEPhh>

  /* If byte 8 isn't 0x00 we probably have an error */
  if (pn532_packetbuffer[7] != 0x00)
    37c8:	80 91 5d 0b 	lds	r24, 0x0B5D	; 0x800b5d <pn532_packetbuffer+0x7>
    37cc:	81 11       	cpse	r24, r1
    37ce:	f5 cf       	rjmp	.-22     	; 0x37ba <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh+0x34>
    return 0;
  }

  /* Copy the 16 data bytes to the output buffer        */
  /* Block content starts at byte 9 of a valid response */
  memcpy (data, pn532_packetbuffer+8, 16);
    37d0:	80 e1       	ldi	r24, 0x10	; 16
    37d2:	ee e5       	ldi	r30, 0x5E	; 94
    37d4:	fb e0       	ldi	r31, 0x0B	; 11
    37d6:	d8 01       	movw	r26, r16
    37d8:	01 90       	ld	r0, Z+
    37da:	0d 92       	st	X+, r0
    37dc:	8a 95       	dec	r24
    37de:	e1 f7       	brne	.-8      	; 0x37d8 <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh+0x52>
    PN532DEBUGPRINT.print(F("Block "));
    PN532DEBUGPRINT.println(blockNumber);
    NFC_PN532::PrintHexChar(data, 16);
  #endif

  return 1;
    37e0:	81 e0       	ldi	r24, 0x01	; 1
}
    37e2:	df 91       	pop	r29
    37e4:	cf 91       	pop	r28
    37e6:	1f 91       	pop	r17
    37e8:	0f 91       	pop	r16
    37ea:	08 95       	ret

000037ec <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh>:

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
uint8_t NFC_PN532::mifareclassic_WriteDataBlock (uint8_t blockNumber, uint8_t * data)
{
    37ec:	cf 93       	push	r28
    37ee:	df 93       	push	r29
    37f0:	ec 01       	movw	r28, r24
  #ifdef MIFAREDEBUG
    PN532DEBUGPRINT.print(F("Trying to write 16 bytes to block "));PN532DEBUGPRINT.println(blockNumber);
  #endif

  /* Prepare the first command */
  pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;
    37f2:	80 e4       	ldi	r24, 0x40	; 64
    37f4:	80 93 56 0b 	sts	0x0B56, r24	; 0x800b56 <pn532_packetbuffer>
  pn532_packetbuffer[1] = 1;                      /* Card number */
    37f8:	81 e0       	ldi	r24, 0x01	; 1
    37fa:	80 93 57 0b 	sts	0x0B57, r24	; 0x800b57 <pn532_packetbuffer+0x1>
  pn532_packetbuffer[2] = MIFARE_CMD_WRITE;       /* Mifare Write command = 0xA0 */
    37fe:	80 ea       	ldi	r24, 0xA0	; 160
    3800:	80 93 58 0b 	sts	0x0B58, r24	; 0x800b58 <pn532_packetbuffer+0x2>
  pn532_packetbuffer[3] = blockNumber;            /* Block Number (0..63 for 1K, 0..255 for 4K) */
    3804:	60 93 59 0b 	sts	0x0B59, r22	; 0x800b59 <pn532_packetbuffer+0x3>
  memcpy (pn532_packetbuffer+4, data, 16);          /* Data Payload */
    3808:	80 e1       	ldi	r24, 0x10	; 16
    380a:	fa 01       	movw	r30, r20
    380c:	aa e5       	ldi	r26, 0x5A	; 90
    380e:	bb e0       	ldi	r27, 0x0B	; 11
    3810:	01 90       	ld	r0, Z+
    3812:	0d 92       	st	X+, r0
    3814:	8a 95       	dec	r24
    3816:	e1 f7       	brne	.-8      	; 0x3810 <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh+0x24>

  /* Send the command */
  if (! sendCommandCheckAck(pn532_packetbuffer, 20))
    3818:	28 ee       	ldi	r18, 0xE8	; 232
    381a:	33 e0       	ldi	r19, 0x03	; 3
    381c:	44 e1       	ldi	r20, 0x14	; 20
    381e:	66 e5       	ldi	r22, 0x56	; 86
    3820:	7b e0       	ldi	r23, 0x0B	; 11
    3822:	ce 01       	movw	r24, r28
    3824:	5e de       	rcall	.-836    	; 0x34e2 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    3826:	88 23       	and	r24, r24
    3828:	69 f0       	breq	.+26     	; 0x3844 <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh+0x58>
    382a:	8f e3       	ldi	r24, 0x3F	; 63
    382c:	9c e9       	ldi	r25, 0x9C	; 156
    382e:	01 97       	sbiw	r24, 0x01	; 1
    3830:	f1 f7       	brne	.-4      	; 0x382e <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh+0x42>
    3832:	00 c0       	rjmp	.+0      	; 0x3834 <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh+0x48>
    3834:	00 00       	nop
    return 0;
  }
  _delay_ms(10);

  /* Read the response packet */
  readdata(pn532_packetbuffer, 26);
    3836:	4a e1       	ldi	r20, 0x1A	; 26
    3838:	66 e5       	ldi	r22, 0x56	; 86
    383a:	7b e0       	ldi	r23, 0x0B	; 11
    383c:	ce 01       	movw	r24, r28
    383e:	ad dd       	rcall	.-1190   	; 0x339a <_ZN9NFC_PN5328readdataEPhh>
    3840:	81 e0       	ldi	r24, 0x01	; 1
    3842:	01 c0       	rjmp	.+2      	; 0x3846 <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh+0x5a>
  if (! sendCommandCheckAck(pn532_packetbuffer, 20))
  {
    #ifdef MIFAREDEBUG
      PN532DEBUGPRINT.println(F("Failed to receive ACK for write command"));
    #endif
    return 0;
    3844:	80 e0       	ldi	r24, 0x00	; 0

  /* Read the response packet */
  readdata(pn532_packetbuffer, 26);

  return 1;
}
    3846:	df 91       	pop	r29
    3848:	cf 91       	pop	r28
    384a:	08 95       	ret

0000384c <_ZL9date2daysjhh>:
} // of method pinAlarm()                                                     //                                  //
/*******************************************************************************************************************
** Method pinSquareWave() will set the control register flag to make the INT/SQW Pin produce a 1Hz signal         **
*******************************************************************************************************************/
void DS3231M_Class::pinSquareWave() {                                         //                                  //
  writeByte(DS3231M_CONTROL,readByte(DS3231M_CONTROL)|0x4);                   // Set bit 3 to off                 //
    384c:	80 3d       	cpi	r24, 0xD0	; 208
    384e:	27 e0       	ldi	r18, 0x07	; 7
    3850:	92 07       	cpc	r25, r18
    3852:	10 f0       	brcs	.+4      	; 0x3858 <_ZL9date2daysjhh+0xc>
    3854:	80 5d       	subi	r24, 0xD0	; 208
    3856:	97 40       	sbci	r25, 0x07	; 7
    3858:	50 e0       	ldi	r21, 0x00	; 0
    385a:	e6 e2       	ldi	r30, 0x26	; 38
    385c:	f2 e0       	ldi	r31, 0x02	; 2
    385e:	21 e0       	ldi	r18, 0x01	; 1
    3860:	26 17       	cp	r18, r22
    3862:	30 f4       	brcc	.+12     	; 0x3870 <_ZL9date2daysjhh+0x24>
    3864:	34 91       	lpm	r19, Z
    3866:	43 0f       	add	r20, r19
    3868:	51 1d       	adc	r21, r1
    386a:	2f 5f       	subi	r18, 0xFF	; 255
    386c:	31 96       	adiw	r30, 0x01	; 1
    386e:	f8 cf       	rjmp	.-16     	; 0x3860 <_ZL9date2daysjhh+0x14>
    3870:	63 30       	cpi	r22, 0x03	; 3
    3872:	38 f0       	brcs	.+14     	; 0x3882 <_ZL9date2daysjhh+0x36>
    3874:	9c 01       	movw	r18, r24
    3876:	23 70       	andi	r18, 0x03	; 3
    3878:	33 27       	eor	r19, r19
    387a:	23 2b       	or	r18, r19
    387c:	11 f4       	brne	.+4      	; 0x3882 <_ZL9date2daysjhh+0x36>
    387e:	4f 5f       	subi	r20, 0xFF	; 255
    3880:	5f 4f       	sbci	r21, 0xFF	; 255
    3882:	bc 01       	movw	r22, r24
    3884:	6d 5f       	subi	r22, 0xFD	; 253
    3886:	7f 4f       	sbci	r23, 0xFF	; 255
    3888:	76 95       	lsr	r23
    388a:	67 95       	ror	r22
    388c:	76 95       	lsr	r23
    388e:	67 95       	ror	r22
    3890:	ed e6       	ldi	r30, 0x6D	; 109
    3892:	f1 e0       	ldi	r31, 0x01	; 1
    3894:	8e 9f       	mul	r24, r30
    3896:	90 01       	movw	r18, r0
    3898:	8f 9f       	mul	r24, r31
    389a:	30 0d       	add	r19, r0
    389c:	9e 9f       	mul	r25, r30
    389e:	30 0d       	add	r19, r0
    38a0:	11 24       	eor	r1, r1
    38a2:	c9 01       	movw	r24, r18
    38a4:	01 97       	sbiw	r24, 0x01	; 1
    38a6:	86 0f       	add	r24, r22
    38a8:	97 1f       	adc	r25, r23
    38aa:	84 0f       	add	r24, r20
    38ac:	95 1f       	adc	r25, r21
    38ae:	08 95       	ret

000038b0 <_ZL6conv2dPKc>:
    38b0:	fc 01       	movw	r30, r24
    38b2:	90 81       	ld	r25, Z
    38b4:	90 53       	subi	r25, 0x30	; 48
    38b6:	9a 30       	cpi	r25, 0x0A	; 10
    38b8:	08 f0       	brcs	.+2      	; 0x38bc <_ZL6conv2dPKc+0xc>
    38ba:	90 e0       	ldi	r25, 0x00	; 0
    38bc:	81 81       	ldd	r24, Z+1	; 0x01
    38be:	80 53       	subi	r24, 0x30	; 48
    38c0:	2a e0       	ldi	r18, 0x0A	; 10
    38c2:	92 9f       	mul	r25, r18
    38c4:	80 0d       	add	r24, r0
    38c6:	11 24       	eor	r1, r1
    38c8:	08 95       	ret

000038ca <_ZN8DateTimeC1Em>:
    38ca:	8f 92       	push	r8
    38cc:	9f 92       	push	r9
    38ce:	af 92       	push	r10
    38d0:	bf 92       	push	r11
    38d2:	cf 92       	push	r12
    38d4:	df 92       	push	r13
    38d6:	ef 92       	push	r14
    38d8:	ff 92       	push	r15
    38da:	cf 93       	push	r28
    38dc:	df 93       	push	r29
    38de:	ec 01       	movw	r28, r24
    38e0:	6a 01       	movw	r12, r20
    38e2:	7b 01       	movw	r14, r22
    38e4:	80 e8       	ldi	r24, 0x80	; 128
    38e6:	c8 1a       	sub	r12, r24
    38e8:	83 e4       	ldi	r24, 0x43	; 67
    38ea:	d8 0a       	sbc	r13, r24
    38ec:	8d e6       	ldi	r24, 0x6D	; 109
    38ee:	e8 0a       	sbc	r14, r24
    38f0:	88 e3       	ldi	r24, 0x38	; 56
    38f2:	f8 0a       	sbc	r15, r24
    38f4:	8c e3       	ldi	r24, 0x3C	; 60
    38f6:	88 2e       	mov	r8, r24
    38f8:	91 2c       	mov	r9, r1
    38fa:	a1 2c       	mov	r10, r1
    38fc:	b1 2c       	mov	r11, r1
    38fe:	c7 01       	movw	r24, r14
    3900:	b6 01       	movw	r22, r12
    3902:	a5 01       	movw	r20, r10
    3904:	94 01       	movw	r18, r8
    3906:	0e 94 ad 3a 	call	0x755a	; 0x755a <__udivmodsi4>
    390a:	6d 83       	std	Y+5, r22	; 0x05
    390c:	ca 01       	movw	r24, r20
    390e:	b9 01       	movw	r22, r18
    3910:	a5 01       	movw	r20, r10
    3912:	94 01       	movw	r18, r8
    3914:	0e 94 ad 3a 	call	0x755a	; 0x755a <__udivmodsi4>
    3918:	6c 83       	std	Y+4, r22	; 0x04
    391a:	c7 01       	movw	r24, r14
    391c:	b6 01       	movw	r22, r12
    391e:	20 e1       	ldi	r18, 0x10	; 16
    3920:	3e e0       	ldi	r19, 0x0E	; 14
    3922:	40 e0       	ldi	r20, 0x00	; 0
    3924:	50 e0       	ldi	r21, 0x00	; 0
    3926:	0e 94 ad 3a 	call	0x755a	; 0x755a <__udivmodsi4>
    392a:	ca 01       	movw	r24, r20
    392c:	b9 01       	movw	r22, r18
    392e:	28 e1       	ldi	r18, 0x18	; 24
    3930:	30 e0       	ldi	r19, 0x00	; 0
    3932:	40 e0       	ldi	r20, 0x00	; 0
    3934:	50 e0       	ldi	r21, 0x00	; 0
    3936:	0e 94 ad 3a 	call	0x755a	; 0x755a <__udivmodsi4>
    393a:	6b 83       	std	Y+3, r22	; 0x03
    393c:	c7 01       	movw	r24, r14
    393e:	b6 01       	movw	r22, r12
    3940:	20 e8       	ldi	r18, 0x80	; 128
    3942:	31 e5       	ldi	r19, 0x51	; 81
    3944:	41 e0       	ldi	r20, 0x01	; 1
    3946:	50 e0       	ldi	r21, 0x00	; 0
    3948:	0e 94 ad 3a 	call	0x755a	; 0x755a <__udivmodsi4>
    394c:	18 82       	st	Y, r1
    394e:	88 81       	ld	r24, Y
    3950:	98 2f       	mov	r25, r24
    3952:	93 70       	andi	r25, 0x03	; 3
    3954:	41 e0       	ldi	r20, 0x01	; 1
    3956:	50 e0       	ldi	r21, 0x00	; 0
    3958:	11 f0       	breq	.+4      	; 0x395e <_ZN8DateTimeC1Em+0x94>
    395a:	40 e0       	ldi	r20, 0x00	; 0
    395c:	50 e0       	ldi	r21, 0x00	; 0
    395e:	ba 01       	movw	r22, r20
    3960:	63 59       	subi	r22, 0x93	; 147
    3962:	7e 4f       	sbci	r23, 0xFE	; 254
    3964:	26 17       	cp	r18, r22
    3966:	37 07       	cpc	r19, r23
    3968:	38 f0       	brcs	.+14     	; 0x3978 <_ZN8DateTimeC1Em+0xae>
    396a:	24 1b       	sub	r18, r20
    396c:	35 0b       	sbc	r19, r21
    396e:	2d 56       	subi	r18, 0x6D	; 109
    3970:	31 40       	sbci	r19, 0x01	; 1
    3972:	8f 5f       	subi	r24, 0xFF	; 255
    3974:	88 83       	st	Y, r24
    3976:	eb cf       	rjmp	.-42     	; 0x394e <_ZN8DateTimeC1Em+0x84>
    3978:	81 e0       	ldi	r24, 0x01	; 1
    397a:	89 83       	std	Y+1, r24	; 0x01
    397c:	89 81       	ldd	r24, Y+1	; 0x01
    397e:	e8 2f       	mov	r30, r24
    3980:	f0 e0       	ldi	r31, 0x00	; 0
    3982:	eb 5d       	subi	r30, 0xDB	; 219
    3984:	fd 4f       	sbci	r31, 0xFD	; 253
    3986:	e4 91       	lpm	r30, Z
    3988:	91 11       	cpse	r25, r1
    398a:	03 c0       	rjmp	.+6      	; 0x3992 <_ZN8DateTimeC1Em+0xc8>
    398c:	82 30       	cpi	r24, 0x02	; 2
    398e:	09 f4       	brne	.+2      	; 0x3992 <_ZN8DateTimeC1Em+0xc8>
    3990:	ef 5f       	subi	r30, 0xFF	; 255
    3992:	f0 e0       	ldi	r31, 0x00	; 0
    3994:	2e 17       	cp	r18, r30
    3996:	3f 07       	cpc	r19, r31
    3998:	20 f0       	brcs	.+8      	; 0x39a2 <_ZN8DateTimeC1Em+0xd8>
    399a:	2e 1b       	sub	r18, r30
    399c:	3f 0b       	sbc	r19, r31
    399e:	8f 5f       	subi	r24, 0xFF	; 255
    39a0:	ec cf       	rjmp	.-40     	; 0x397a <_ZN8DateTimeC1Em+0xb0>
    39a2:	2f 5f       	subi	r18, 0xFF	; 255
    39a4:	2a 83       	std	Y+2, r18	; 0x02
    39a6:	df 91       	pop	r29
    39a8:	cf 91       	pop	r28
    39aa:	ff 90       	pop	r15
    39ac:	ef 90       	pop	r14
    39ae:	df 90       	pop	r13
    39b0:	cf 90       	pop	r12
    39b2:	bf 90       	pop	r11
    39b4:	af 90       	pop	r10
    39b6:	9f 90       	pop	r9
    39b8:	8f 90       	pop	r8
    39ba:	08 95       	ret

000039bc <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>:
    39bc:	ef 92       	push	r14
    39be:	ff 92       	push	r15
    39c0:	0f 93       	push	r16
    39c2:	1f 93       	push	r17
    39c4:	cf 93       	push	r28
    39c6:	df 93       	push	r29
    39c8:	cd b7       	in	r28, 0x3d	; 61
    39ca:	de b7       	in	r29, 0x3e	; 62
    39cc:	2b 97       	sbiw	r28, 0x0b	; 11
    39ce:	0f b6       	in	r0, 0x3f	; 63
    39d0:	f8 94       	cli
    39d2:	de bf       	out	0x3e, r29	; 62
    39d4:	0f be       	out	0x3f, r0	; 63
    39d6:	cd bf       	out	0x3d, r28	; 61
    39d8:	8c 01       	movw	r16, r24
    39da:	7a 01       	movw	r14, r20
    39dc:	4b e0       	ldi	r20, 0x0B	; 11
    39de:	50 e0       	ldi	r21, 0x00	; 0
    39e0:	ce 01       	movw	r24, r28
    39e2:	01 96       	adiw	r24, 0x01	; 1
    39e4:	0e 94 1d 3d 	call	0x7a3a	; 0x7a3a <memcpy_P>
    39e8:	ce 01       	movw	r24, r28
    39ea:	0a 96       	adiw	r24, 0x0a	; 10
    39ec:	61 df       	rcall	.-318    	; 0x38b0 <_ZL6conv2dPKc>
    39ee:	f8 01       	movw	r30, r16
    39f0:	80 83       	st	Z, r24
    39f2:	e9 81       	ldd	r30, Y+1	; 0x01
    39f4:	8e 2f       	mov	r24, r30
    39f6:	90 e0       	ldi	r25, 0x00	; 0
    39f8:	fc 01       	movw	r30, r24
    39fa:	e1 54       	subi	r30, 0x41	; 65
    39fc:	f1 09       	sbc	r31, r1
    39fe:	e3 31       	cpi	r30, 0x13	; 19
    3a00:	f1 05       	cpc	r31, r1
    3a02:	48 f5       	brcc	.+82     	; 0x3a56 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
    3a04:	ee 5a       	subi	r30, 0xAE	; 174
    3a06:	ff 4f       	sbci	r31, 0xFF	; 255
    3a08:	0c 94 cf 3a 	jmp	0x759e	; 0x759e <__tablejump2__>
    3a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    3a0e:	81 36       	cpi	r24, 0x61	; 97
    3a10:	29 f0       	breq	.+10     	; 0x3a1c <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x60>
    3a12:	8b 81       	ldd	r24, Y+3	; 0x03
    3a14:	8e 36       	cpi	r24, 0x6E	; 110
    3a16:	21 f0       	breq	.+8      	; 0x3a20 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x64>
    3a18:	87 e0       	ldi	r24, 0x07	; 7
    3a1a:	1b c0       	rjmp	.+54     	; 0x3a52 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    3a1c:	81 e0       	ldi	r24, 0x01	; 1
    3a1e:	19 c0       	rjmp	.+50     	; 0x3a52 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    3a20:	86 e0       	ldi	r24, 0x06	; 6
    3a22:	17 c0       	rjmp	.+46     	; 0x3a52 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    3a24:	82 e0       	ldi	r24, 0x02	; 2
    3a26:	15 c0       	rjmp	.+42     	; 0x3a52 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    3a28:	8b 81       	ldd	r24, Y+3	; 0x03
    3a2a:	82 37       	cpi	r24, 0x72	; 114
    3a2c:	11 f0       	breq	.+4      	; 0x3a32 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x76>
    3a2e:	88 e0       	ldi	r24, 0x08	; 8
    3a30:	10 c0       	rjmp	.+32     	; 0x3a52 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    3a32:	84 e0       	ldi	r24, 0x04	; 4
    3a34:	0e c0       	rjmp	.+28     	; 0x3a52 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    3a36:	8b 81       	ldd	r24, Y+3	; 0x03
    3a38:	82 37       	cpi	r24, 0x72	; 114
    3a3a:	11 f0       	breq	.+4      	; 0x3a40 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x84>
    3a3c:	85 e0       	ldi	r24, 0x05	; 5
    3a3e:	09 c0       	rjmp	.+18     	; 0x3a52 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    3a40:	83 e0       	ldi	r24, 0x03	; 3
    3a42:	07 c0       	rjmp	.+14     	; 0x3a52 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    3a44:	89 e0       	ldi	r24, 0x09	; 9
    3a46:	05 c0       	rjmp	.+10     	; 0x3a52 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    3a48:	8a e0       	ldi	r24, 0x0A	; 10
    3a4a:	03 c0       	rjmp	.+6      	; 0x3a52 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    3a4c:	8b e0       	ldi	r24, 0x0B	; 11
    3a4e:	01 c0       	rjmp	.+2      	; 0x3a52 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    3a50:	8c e0       	ldi	r24, 0x0C	; 12
    3a52:	f8 01       	movw	r30, r16
    3a54:	81 83       	std	Z+1, r24	; 0x01
    3a56:	ce 01       	movw	r24, r28
    3a58:	05 96       	adiw	r24, 0x05	; 5
    3a5a:	2a df       	rcall	.-428    	; 0x38b0 <_ZL6conv2dPKc>
    3a5c:	f8 01       	movw	r30, r16
    3a5e:	82 83       	std	Z+2, r24	; 0x02
    3a60:	48 e0       	ldi	r20, 0x08	; 8
    3a62:	50 e0       	ldi	r21, 0x00	; 0
    3a64:	b7 01       	movw	r22, r14
    3a66:	ce 01       	movw	r24, r28
    3a68:	01 96       	adiw	r24, 0x01	; 1
    3a6a:	0e 94 1d 3d 	call	0x7a3a	; 0x7a3a <memcpy_P>
    3a6e:	ce 01       	movw	r24, r28
    3a70:	01 96       	adiw	r24, 0x01	; 1
    3a72:	1e df       	rcall	.-452    	; 0x38b0 <_ZL6conv2dPKc>
    3a74:	f8 01       	movw	r30, r16
    3a76:	83 83       	std	Z+3, r24	; 0x03
    3a78:	ce 01       	movw	r24, r28
    3a7a:	04 96       	adiw	r24, 0x04	; 4
    3a7c:	19 df       	rcall	.-462    	; 0x38b0 <_ZL6conv2dPKc>
    3a7e:	f8 01       	movw	r30, r16
    3a80:	84 83       	std	Z+4, r24	; 0x04
    3a82:	ce 01       	movw	r24, r28
    3a84:	07 96       	adiw	r24, 0x07	; 7
    3a86:	14 df       	rcall	.-472    	; 0x38b0 <_ZL6conv2dPKc>
    3a88:	f8 01       	movw	r30, r16
    3a8a:	85 83       	std	Z+5, r24	; 0x05
    3a8c:	2b 96       	adiw	r28, 0x0b	; 11
    3a8e:	0f b6       	in	r0, 0x3f	; 63
    3a90:	f8 94       	cli
    3a92:	de bf       	out	0x3e, r29	; 62
    3a94:	0f be       	out	0x3f, r0	; 63
    3a96:	cd bf       	out	0x3d, r28	; 61
    3a98:	df 91       	pop	r29
    3a9a:	cf 91       	pop	r28
    3a9c:	1f 91       	pop	r17
    3a9e:	0f 91       	pop	r16
    3aa0:	ff 90       	pop	r15
    3aa2:	ef 90       	pop	r14
    3aa4:	08 95       	ret

00003aa6 <_ZNK8DateTime12dayOfTheWeekEv>:
    3aa6:	fc 01       	movw	r30, r24
    3aa8:	80 81       	ld	r24, Z
    3aaa:	42 81       	ldd	r20, Z+2	; 0x02
    3aac:	61 81       	ldd	r22, Z+1	; 0x01
    3aae:	90 e0       	ldi	r25, 0x00	; 0
    3ab0:	cd de       	rcall	.-614    	; 0x384c <_ZL9date2daysjhh>
    3ab2:	06 96       	adiw	r24, 0x06	; 6
    3ab4:	67 e0       	ldi	r22, 0x07	; 7
    3ab6:	70 e0       	ldi	r23, 0x00	; 0
    3ab8:	0c 94 99 3a 	jmp	0x7532	; 0x7532 <__udivmodhi4>
    3abc:	08 95       	ret

00003abe <_ZNK8DateTime8unixtimeEv>:
    3abe:	ef 92       	push	r14
    3ac0:	ff 92       	push	r15
    3ac2:	0f 93       	push	r16
    3ac4:	1f 93       	push	r17
    3ac6:	cf 93       	push	r28
    3ac8:	df 93       	push	r29
    3aca:	ec 01       	movw	r28, r24
    3acc:	88 81       	ld	r24, Y
    3ace:	4a 81       	ldd	r20, Y+2	; 0x02
    3ad0:	69 81       	ldd	r22, Y+1	; 0x01
    3ad2:	90 e0       	ldi	r25, 0x00	; 0
    3ad4:	bb de       	rcall	.-650    	; 0x384c <_ZL9date2daysjhh>
    3ad6:	9c 01       	movw	r18, r24
    3ad8:	a8 e1       	ldi	r26, 0x18	; 24
    3ada:	b0 e0       	ldi	r27, 0x00	; 0
    3adc:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__umulhisi3>
    3ae0:	2b 81       	ldd	r18, Y+3	; 0x03
    3ae2:	7b 01       	movw	r14, r22
    3ae4:	8c 01       	movw	r16, r24
    3ae6:	e2 0e       	add	r14, r18
    3ae8:	f1 1c       	adc	r15, r1
    3aea:	01 1d       	adc	r16, r1
    3aec:	11 1d       	adc	r17, r1
    3aee:	a8 01       	movw	r20, r16
    3af0:	97 01       	movw	r18, r14
    3af2:	ac e3       	ldi	r26, 0x3C	; 60
    3af4:	b0 e0       	ldi	r27, 0x00	; 0
    3af6:	0e 94 e7 3a 	call	0x75ce	; 0x75ce <__muluhisi3>
    3afa:	2c 81       	ldd	r18, Y+4	; 0x04
    3afc:	7b 01       	movw	r14, r22
    3afe:	8c 01       	movw	r16, r24
    3b00:	e2 0e       	add	r14, r18
    3b02:	f1 1c       	adc	r15, r1
    3b04:	01 1d       	adc	r16, r1
    3b06:	11 1d       	adc	r17, r1
    3b08:	a8 01       	movw	r20, r16
    3b0a:	97 01       	movw	r18, r14
    3b0c:	0e 94 e7 3a 	call	0x75ce	; 0x75ce <__muluhisi3>
    3b10:	2d 81       	ldd	r18, Y+5	; 0x05
    3b12:	dc 01       	movw	r26, r24
    3b14:	cb 01       	movw	r24, r22
    3b16:	82 0f       	add	r24, r18
    3b18:	91 1d       	adc	r25, r1
    3b1a:	a1 1d       	adc	r26, r1
    3b1c:	b1 1d       	adc	r27, r1
    3b1e:	bc 01       	movw	r22, r24
    3b20:	cd 01       	movw	r24, r26
    3b22:	60 58       	subi	r22, 0x80	; 128
    3b24:	7c 4b       	sbci	r23, 0xBC	; 188
    3b26:	82 49       	sbci	r24, 0x92	; 146
    3b28:	97 4c       	sbci	r25, 0xC7	; 199
    3b2a:	df 91       	pop	r29
    3b2c:	cf 91       	pop	r28
    3b2e:	1f 91       	pop	r17
    3b30:	0f 91       	pop	r16
    3b32:	ff 90       	pop	r15
    3b34:	ef 90       	pop	r14
    3b36:	08 95       	ret

00003b38 <_ZNK8DateTime11secondstimeEv>:
    3b38:	ef 92       	push	r14
    3b3a:	ff 92       	push	r15
    3b3c:	0f 93       	push	r16
    3b3e:	1f 93       	push	r17
    3b40:	cf 93       	push	r28
    3b42:	df 93       	push	r29
    3b44:	ec 01       	movw	r28, r24
    3b46:	88 81       	ld	r24, Y
    3b48:	4a 81       	ldd	r20, Y+2	; 0x02
    3b4a:	69 81       	ldd	r22, Y+1	; 0x01
    3b4c:	90 e0       	ldi	r25, 0x00	; 0
    3b4e:	7e de       	rcall	.-772    	; 0x384c <_ZL9date2daysjhh>
    3b50:	9c 01       	movw	r18, r24
    3b52:	a8 e1       	ldi	r26, 0x18	; 24
    3b54:	b0 e0       	ldi	r27, 0x00	; 0
    3b56:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__umulhisi3>
    3b5a:	2b 81       	ldd	r18, Y+3	; 0x03
    3b5c:	7b 01       	movw	r14, r22
    3b5e:	8c 01       	movw	r16, r24
    3b60:	e2 0e       	add	r14, r18
    3b62:	f1 1c       	adc	r15, r1
    3b64:	01 1d       	adc	r16, r1
    3b66:	11 1d       	adc	r17, r1
    3b68:	a8 01       	movw	r20, r16
    3b6a:	97 01       	movw	r18, r14
    3b6c:	ac e3       	ldi	r26, 0x3C	; 60
    3b6e:	b0 e0       	ldi	r27, 0x00	; 0
    3b70:	0e 94 e7 3a 	call	0x75ce	; 0x75ce <__muluhisi3>
    3b74:	2c 81       	ldd	r18, Y+4	; 0x04
    3b76:	7b 01       	movw	r14, r22
    3b78:	8c 01       	movw	r16, r24
    3b7a:	e2 0e       	add	r14, r18
    3b7c:	f1 1c       	adc	r15, r1
    3b7e:	01 1d       	adc	r16, r1
    3b80:	11 1d       	adc	r17, r1
    3b82:	a8 01       	movw	r20, r16
    3b84:	97 01       	movw	r18, r14
    3b86:	0e 94 e7 3a 	call	0x75ce	; 0x75ce <__muluhisi3>
    3b8a:	2d 81       	ldd	r18, Y+5	; 0x05
    3b8c:	62 0f       	add	r22, r18
    3b8e:	71 1d       	adc	r23, r1
    3b90:	81 1d       	adc	r24, r1
    3b92:	91 1d       	adc	r25, r1
    3b94:	df 91       	pop	r29
    3b96:	cf 91       	pop	r28
    3b98:	1f 91       	pop	r17
    3b9a:	0f 91       	pop	r16
    3b9c:	ff 90       	pop	r15
    3b9e:	ef 90       	pop	r14
    3ba0:	08 95       	ret

00003ba2 <_ZN13DS3231M_ClassC1Ev>:
    3ba2:	fc 01       	movw	r30, r24
    3ba4:	10 82       	st	Z, r1
    3ba6:	11 82       	std	Z+1, r1	; 0x01
    3ba8:	12 82       	std	Z+2, r1	; 0x02
    3baa:	13 82       	std	Z+3, r1	; 0x03
    3bac:	14 82       	std	Z+4, r1	; 0x04
    3bae:	08 95       	ret

00003bb0 <_ZN13DS3231M_ClassD1Ev>:
    3bb0:	08 95       	ret

00003bb2 <_ZN13DS3231M_Class9writeByteEhh>:
    3bb2:	0f 93       	push	r16
    3bb4:	1f 93       	push	r17
    3bb6:	cf 93       	push	r28
    3bb8:	df 93       	push	r29
    3bba:	ec 01       	movw	r28, r24
    3bbc:	06 2f       	mov	r16, r22
    3bbe:	14 2f       	mov	r17, r20
    3bc0:	68 e6       	ldi	r22, 0x68	; 104
    3bc2:	8f e4       	ldi	r24, 0x4F	; 79
    3bc4:	9c e0       	ldi	r25, 0x0C	; 12
    3bc6:	0e 94 8a 30 	call	0x6114	; 0x6114 <_ZN7TwoWire17beginTransmissionEh>
    3bca:	60 2f       	mov	r22, r16
    3bcc:	8f e4       	ldi	r24, 0x4F	; 79
    3bce:	9c e0       	ldi	r25, 0x0C	; 12
    3bd0:	0e 94 39 30 	call	0x6072	; 0x6072 <_ZN7TwoWire5writeEh>
    3bd4:	61 2f       	mov	r22, r17
    3bd6:	8f e4       	ldi	r24, 0x4F	; 79
    3bd8:	9c e0       	ldi	r25, 0x0C	; 12
    3bda:	0e 94 39 30 	call	0x6072	; 0x6072 <_ZN7TwoWire5writeEh>
    3bde:	8f e4       	ldi	r24, 0x4F	; 79
    3be0:	9c e0       	ldi	r25, 0x0C	; 12
    3be2:	0e 94 0b 31 	call	0x6216	; 0x6216 <_ZN7TwoWire15endTransmissionEv>
    3be6:	88 83       	st	Y, r24
    3be8:	df 91       	pop	r29
    3bea:	cf 91       	pop	r28
    3bec:	1f 91       	pop	r17
    3bee:	0f 91       	pop	r16
    3bf0:	08 95       	ret

00003bf2 <_ZN13DS3231M_Class8readByteEh>:
    3bf2:	1f 93       	push	r17
    3bf4:	cf 93       	push	r28
    3bf6:	df 93       	push	r29
    3bf8:	ec 01       	movw	r28, r24
    3bfa:	16 2f       	mov	r17, r22
    3bfc:	68 e6       	ldi	r22, 0x68	; 104
    3bfe:	8f e4       	ldi	r24, 0x4F	; 79
    3c00:	9c e0       	ldi	r25, 0x0C	; 12
    3c02:	0e 94 8a 30 	call	0x6114	; 0x6114 <_ZN7TwoWire17beginTransmissionEh>
    3c06:	61 2f       	mov	r22, r17
    3c08:	8f e4       	ldi	r24, 0x4F	; 79
    3c0a:	9c e0       	ldi	r25, 0x0C	; 12
    3c0c:	0e 94 39 30 	call	0x6072	; 0x6072 <_ZN7TwoWire5writeEh>
    3c10:	8f e4       	ldi	r24, 0x4F	; 79
    3c12:	9c e0       	ldi	r25, 0x0C	; 12
    3c14:	0e 94 0b 31 	call	0x6216	; 0x6216 <_ZN7TwoWire15endTransmissionEv>
    3c18:	88 83       	st	Y, r24
    3c1a:	41 e0       	ldi	r20, 0x01	; 1
    3c1c:	68 e6       	ldi	r22, 0x68	; 104
    3c1e:	8f e4       	ldi	r24, 0x4F	; 79
    3c20:	9c e0       	ldi	r25, 0x0C	; 12
    3c22:	0e 94 07 31 	call	0x620e	; 0x620e <_ZN7TwoWire11requestFromEhh>
    3c26:	8f e4       	ldi	r24, 0x4F	; 79
    3c28:	9c e0       	ldi	r25, 0x0C	; 12
    3c2a:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <_ZN7TwoWire4readEv>
    3c2e:	df 91       	pop	r29
    3c30:	cf 91       	pop	r28
    3c32:	1f 91       	pop	r17
    3c34:	08 95       	ret

00003c36 <_ZN13DS3231M_Class5beginEm>:
    3c36:	cf 92       	push	r12
    3c38:	df 92       	push	r13
    3c3a:	ef 92       	push	r14
    3c3c:	ff 92       	push	r15
    3c3e:	cf 93       	push	r28
    3c40:	df 93       	push	r29
    3c42:	ec 01       	movw	r28, r24
    3c44:	6a 01       	movw	r12, r20
    3c46:	7b 01       	movw	r14, r22
    3c48:	8f e4       	ldi	r24, 0x4F	; 79
    3c4a:	9c e0       	ldi	r25, 0x0C	; 12
    3c4c:	0e 94 77 30 	call	0x60ee	; 0x60ee <_ZN7TwoWire5beginEv>
    3c50:	b7 01       	movw	r22, r14
    3c52:	a6 01       	movw	r20, r12
    3c54:	8f e4       	ldi	r24, 0x4F	; 79
    3c56:	9c e0       	ldi	r25, 0x0C	; 12
    3c58:	0e 94 87 30 	call	0x610e	; 0x610e <_ZN7TwoWire8setClockEm>
    3c5c:	68 e6       	ldi	r22, 0x68	; 104
    3c5e:	8f e4       	ldi	r24, 0x4F	; 79
    3c60:	9c e0       	ldi	r25, 0x0C	; 12
    3c62:	0e 94 8a 30 	call	0x6114	; 0x6114 <_ZN7TwoWire17beginTransmissionEh>
    3c66:	8f e4       	ldi	r24, 0x4F	; 79
    3c68:	9c e0       	ldi	r25, 0x0C	; 12
    3c6a:	0e 94 0b 31 	call	0x6216	; 0x6216 <_ZN7TwoWire15endTransmissionEv>
    3c6e:	81 11       	cpse	r24, r1
    3c70:	0a c0       	rjmp	.+20     	; 0x3c86 <_ZN13DS3231M_Class5beginEm+0x50>
    3c72:	62 e0       	ldi	r22, 0x02	; 2
    3c74:	ce 01       	movw	r24, r28
    3c76:	bd df       	rcall	.-134    	; 0x3bf2 <_ZN13DS3231M_Class8readByteEh>
    3c78:	48 2f       	mov	r20, r24
    3c7a:	4f 7b       	andi	r20, 0xBF	; 191
    3c7c:	62 e0       	ldi	r22, 0x02	; 2
    3c7e:	ce 01       	movw	r24, r28
    3c80:	98 df       	rcall	.-208    	; 0x3bb2 <_ZN13DS3231M_Class9writeByteEhh>
    3c82:	81 e0       	ldi	r24, 0x01	; 1
    3c84:	01 c0       	rjmp	.+2      	; 0x3c88 <_ZN13DS3231M_Class5beginEm+0x52>
    3c86:	80 e0       	ldi	r24, 0x00	; 0
    3c88:	df 91       	pop	r29
    3c8a:	cf 91       	pop	r28
    3c8c:	ff 90       	pop	r15
    3c8e:	ef 90       	pop	r14
    3c90:	df 90       	pop	r13
    3c92:	cf 90       	pop	r12
    3c94:	08 95       	ret

00003c96 <_ZN13DS3231M_Class3nowEv>:
/*******************************************************************************************************************
** Method now() returns the current date/time                                                                     **
** then the power down time is returned, if the timeType = 2 then the power up time is returned. These options are**
** not documented as the official calls are "getPowerOffDate" and "getPowerOnDate"                                **
*******************************************************************************************************************/
DateTime DS3231M_Class::now(){                                                // Return current date/time         //
    3c96:	0f 93       	push	r16
    3c98:	1f 93       	push	r17
    3c9a:	cf 93       	push	r28
    3c9c:	df 93       	push	r29
    3c9e:	8c 01       	movw	r16, r24
    3ca0:	eb 01       	movw	r28, r22
  Wire.beginTransmission(DS3231M_ADDRESS);                                    // Address the I2C device           //
    3ca2:	68 e6       	ldi	r22, 0x68	; 104
    3ca4:	8f e4       	ldi	r24, 0x4F	; 79
    3ca6:	9c e0       	ldi	r25, 0x0C	; 12
    3ca8:	0e 94 8a 30 	call	0x6114	; 0x6114 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(DS3231M_RTCSEC);                                                 // Start at specified register      //
    3cac:	60 e0       	ldi	r22, 0x00	; 0
    3cae:	8f e4       	ldi	r24, 0x4F	; 79
    3cb0:	9c e0       	ldi	r25, 0x0C	; 12
    3cb2:	0e 94 39 30 	call	0x6072	; 0x6072 <_ZN7TwoWire5writeEh>
  _TransmissionStatus = Wire.endTransmission();                               // Close transmission               //
    3cb6:	8f e4       	ldi	r24, 0x4F	; 79
    3cb8:	9c e0       	ldi	r25, 0x0C	; 12
    3cba:	0e 94 0b 31 	call	0x6216	; 0x6216 <_ZN7TwoWire15endTransmissionEv>
    3cbe:	88 83       	st	Y, r24
  Wire.requestFrom(DS3231M_ADDRESS, (uint8_t)7);                              // Request 7 bytes of data          //
    3cc0:	47 e0       	ldi	r20, 0x07	; 7
    3cc2:	68 e6       	ldi	r22, 0x68	; 104
    3cc4:	8f e4       	ldi	r24, 0x4F	; 79
    3cc6:	9c e0       	ldi	r25, 0x0C	; 12
    3cc8:	0e 94 07 31 	call	0x620e	; 0x620e <_ZN7TwoWire11requestFromEhh>
  if(Wire.available()==7) {                                                   // Wait until the data is ready     //
    3ccc:	8f e4       	ldi	r24, 0x4F	; 79
    3cce:	9c e0       	ldi	r25, 0x0C	; 12
    3cd0:	0e 94 ab 2f 	call	0x5f56	; 0x5f56 <_ZN7TwoWire9availableEv>
    3cd4:	07 97       	sbiw	r24, 0x07	; 7
    3cd6:	09 f0       	breq	.+2      	; 0x3cda <_ZN13DS3231M_Class3nowEv+0x44>
    3cd8:	64 c0       	rjmp	.+200    	; 0x3da2 <_ZN13DS3231M_Class3nowEv+0x10c>
    _ss = bcd2int(Wire.read() & 0x7F);                                        // Mask high bit in seconds         //
    3cda:	8f e4       	ldi	r24, 0x4F	; 79
    3cdc:	9c e0       	ldi	r25, 0x0C	; 12
    3cde:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <_ZN7TwoWire4readEv>
    3ce2:	98 2f       	mov	r25, r24
    3ce4:	96 95       	lsr	r25
    3ce6:	96 95       	lsr	r25
    3ce8:	96 95       	lsr	r25
    3cea:	9e 70       	andi	r25, 0x0E	; 14
    3cec:	29 2f       	mov	r18, r25
    3cee:	22 0f       	add	r18, r18
    3cf0:	22 0f       	add	r18, r18
    3cf2:	92 0f       	add	r25, r18
    3cf4:	8f 70       	andi	r24, 0x0F	; 15
    3cf6:	89 0f       	add	r24, r25
    3cf8:	8d 83       	std	Y+5, r24	; 0x05
    _mm = bcd2int(Wire.read() & 0x7F);                                        // Mask high bit in minutes         //
    3cfa:	8f e4       	ldi	r24, 0x4F	; 79
    3cfc:	9c e0       	ldi	r25, 0x0C	; 12
    3cfe:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <_ZN7TwoWire4readEv>
    3d02:	98 2f       	mov	r25, r24
    3d04:	96 95       	lsr	r25
    3d06:	96 95       	lsr	r25
    3d08:	96 95       	lsr	r25
    3d0a:	9e 70       	andi	r25, 0x0E	; 14
    3d0c:	29 2f       	mov	r18, r25
    3d0e:	22 0f       	add	r18, r18
    3d10:	22 0f       	add	r18, r18
    3d12:	92 0f       	add	r25, r18
    3d14:	8f 70       	andi	r24, 0x0F	; 15
    3d16:	89 0f       	add	r24, r25
    3d18:	8e 83       	std	Y+6, r24	; 0x06
    _hh = bcd2int(Wire.read() & 0x7F);                                        // Mask high bit in hours           //
    3d1a:	8f e4       	ldi	r24, 0x4F	; 79
    3d1c:	9c e0       	ldi	r25, 0x0C	; 12
    3d1e:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <_ZN7TwoWire4readEv>
    3d22:	98 2f       	mov	r25, r24
    3d24:	96 95       	lsr	r25
    3d26:	96 95       	lsr	r25
    3d28:	96 95       	lsr	r25
    3d2a:	9e 70       	andi	r25, 0x0E	; 14
    3d2c:	29 2f       	mov	r18, r25
    3d2e:	22 0f       	add	r18, r18
    3d30:	22 0f       	add	r18, r18
    3d32:	92 0f       	add	r25, r18
    3d34:	8f 70       	andi	r24, 0x0F	; 15
    3d36:	89 0f       	add	r24, r25
    3d38:	8f 83       	std	Y+7, r24	; 0x07
    Wire.read();                                                              // Ignore Day-Of-Week register      //
    3d3a:	8f e4       	ldi	r24, 0x4F	; 79
    3d3c:	9c e0       	ldi	r25, 0x0C	; 12
    3d3e:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <_ZN7TwoWire4readEv>
    _d = bcd2int(Wire.read()  & 0x3F);                                        // Mask 2 high bits for day of month//
    3d42:	8f e4       	ldi	r24, 0x4F	; 79
    3d44:	9c e0       	ldi	r25, 0x0C	; 12
    3d46:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <_ZN7TwoWire4readEv>
    3d4a:	98 2f       	mov	r25, r24
    3d4c:	96 95       	lsr	r25
    3d4e:	96 95       	lsr	r25
    3d50:	96 95       	lsr	r25
    3d52:	96 70       	andi	r25, 0x06	; 6
    3d54:	29 2f       	mov	r18, r25
    3d56:	22 0f       	add	r18, r18
    3d58:	22 0f       	add	r18, r18
    3d5a:	92 0f       	add	r25, r18
    3d5c:	8f 70       	andi	r24, 0x0F	; 15
    3d5e:	89 0f       	add	r24, r25
    3d60:	88 87       	std	Y+8, r24	; 0x08
    _m = bcd2int(Wire.read()  & 0x1F);                                        // Mask 3 high bits for Month       //
    3d62:	8f e4       	ldi	r24, 0x4F	; 79
    3d64:	9c e0       	ldi	r25, 0x0C	; 12
    3d66:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <_ZN7TwoWire4readEv>
    3d6a:	84 fb       	bst	r24, 4
    3d6c:	99 27       	eor	r25, r25
    3d6e:	90 f9       	bld	r25, 0
    3d70:	99 0f       	add	r25, r25
    3d72:	29 2f       	mov	r18, r25
    3d74:	22 0f       	add	r18, r18
    3d76:	22 0f       	add	r18, r18
    3d78:	92 0f       	add	r25, r18
    3d7a:	8f 70       	andi	r24, 0x0F	; 15
    3d7c:	89 0f       	add	r24, r25
    3d7e:	89 87       	std	Y+9, r24	; 0x09
    _y = bcd2int(Wire.read()) + 2000;                                         // Add 2000 to internal year        //
    3d80:	8f e4       	ldi	r24, 0x4F	; 79
    3d82:	9c e0       	ldi	r25, 0x0C	; 12
    3d84:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <_ZN7TwoWire4readEv>
    3d88:	98 2f       	mov	r25, r24
    3d8a:	92 95       	swap	r25
    3d8c:	9f 70       	andi	r25, 0x0F	; 15
    3d8e:	8f 70       	andi	r24, 0x0F	; 15
    3d90:	2a e0       	ldi	r18, 0x0A	; 10
    3d92:	92 9f       	mul	r25, r18
    3d94:	80 0d       	add	r24, r0
    3d96:	11 24       	eor	r1, r1
    3d98:	90 e0       	ldi	r25, 0x00	; 0
    3d9a:	80 53       	subi	r24, 0x30	; 48
    3d9c:	98 4f       	sbci	r25, 0xF8	; 248
    3d9e:	9b 87       	std	Y+11, r25	; 0x0b
    3da0:	8a 87       	std	Y+10, r24	; 0x0a
  } // of if-then there is data to be read                                    //                                  //
  return DateTime (_y, _m, _d, _hh, _mm, _ss);                                // Return class value               //
    3da2:	2d 81       	ldd	r18, Y+5	; 0x05
    3da4:	3e 81       	ldd	r19, Y+6	; 0x06
    3da6:	4f 81       	ldd	r20, Y+7	; 0x07
    3da8:	58 85       	ldd	r21, Y+8	; 0x08
    3daa:	69 85       	ldd	r22, Y+9	; 0x09
    3dac:	8a 85       	ldd	r24, Y+10	; 0x0a
    3dae:	9b 85       	ldd	r25, Y+11	; 0x0b
  } // of for-next each month                                                 //                                  //
  d = days + 1;                                                               //                                  //
} // of method DateTime()                                                     //----------------------------------//
DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour,  //                                  //
                    uint8_t min, uint8_t sec) {                               //                                  //
  if (year >= 2000)                                                           //                                  //
    3db0:	80 3d       	cpi	r24, 0xD0	; 208
    3db2:	77 e0       	ldi	r23, 0x07	; 7
    3db4:	97 07       	cpc	r25, r23
    3db6:	10 f0       	brcs	.+4      	; 0x3dbc <_ZN13DS3231M_Class3nowEv+0x126>
  year -= 2000;                                                               //                                  //
    3db8:	80 5d       	subi	r24, 0xD0	; 208
    3dba:	97 40       	sbci	r25, 0x07	; 7
  yOff = year;                                                                //                                  //
    3dbc:	f8 01       	movw	r30, r16
    3dbe:	80 83       	st	Z, r24
  m = month;                                                                  //                                  //
    3dc0:	61 83       	std	Z+1, r22	; 0x01
  d = day;                                                                    //                                  //
    3dc2:	52 83       	std	Z+2, r21	; 0x02
  hh = hour;                                                                  //                                  //
    3dc4:	43 83       	std	Z+3, r20	; 0x03
  mm = min;                                                                   //                                  //
    3dc6:	34 83       	std	Z+4, r19	; 0x04
  ss = sec;                                                                   //                                  //
    3dc8:	25 83       	std	Z+5, r18	; 0x05
    _d = bcd2int(Wire.read()  & 0x3F);                                        // Mask 2 high bits for day of month//
    _m = bcd2int(Wire.read()  & 0x1F);                                        // Mask 3 high bits for Month       //
    _y = bcd2int(Wire.read()) + 2000;                                         // Add 2000 to internal year        //
  } // of if-then there is data to be read                                    //                                  //
  return DateTime (_y, _m, _d, _hh, _mm, _ss);                                // Return class value               //
} // of method now                                                            //                                  //
    3dca:	c8 01       	movw	r24, r16
    3dcc:	df 91       	pop	r29
    3dce:	cf 91       	pop	r28
    3dd0:	1f 91       	pop	r17
    3dd2:	0f 91       	pop	r16
    3dd4:	08 95       	ret

00003dd6 <_ZN13DS3231M_Class6adjustERK8DateTime>:
** oscillator is stopped during the process and needs to be restarted upon completion.                            **
*******************************************************************************************************************/
void DS3231M_Class::adjust() {                                                // Set the RTC date and Time        //
  adjust(DateTime(F(__DATE__), F(__TIME__)));                                 // Set to compile time              //
} // of method adjust                                                         /-----------------------------------//
void DS3231M_Class::adjust(const DateTime& dt) {                              // Set the RTC date and Time        //
    3dd6:	df 92       	push	r13
    3dd8:	ef 92       	push	r14
    3dda:	ff 92       	push	r15
    3ddc:	0f 93       	push	r16
    3dde:	1f 93       	push	r17
    3de0:	cf 93       	push	r28
    3de2:	df 93       	push	r29
    3de4:	00 d0       	rcall	.+0      	; 0x3de6 <_ZN13DS3231M_Class6adjustERK8DateTime+0x10>
    3de6:	00 d0       	rcall	.+0      	; 0x3de8 <_ZN13DS3231M_Class6adjustERK8DateTime+0x12>
    3de8:	00 d0       	rcall	.+0      	; 0x3dea <_ZN13DS3231M_Class6adjustERK8DateTime+0x14>
    3dea:	cd b7       	in	r28, 0x3d	; 61
    3dec:	de b7       	in	r29, 0x3e	; 62
    3dee:	8c 01       	movw	r16, r24
    3df0:	7b 01       	movw	r14, r22
    3df2:	fb 01       	movw	r30, r22
    3df4:	85 81       	ldd	r24, Z+5	; 0x05
  writeByte(DS3231M_RTCSEC,int2bcd(dt.second()));                             // Write seconds, keep device off   //
    3df6:	9a e0       	ldi	r25, 0x0A	; 10
    3df8:	d9 2e       	mov	r13, r25
    3dfa:	6d 2d       	mov	r22, r13
    3dfc:	0e 94 8d 3a 	call	0x751a	; 0x751a <__udivmodqi4>
    3e00:	49 2f       	mov	r20, r25
    3e02:	f0 e1       	ldi	r31, 0x10	; 16
    3e04:	8f 9f       	mul	r24, r31
    3e06:	40 0d       	add	r20, r0
    3e08:	11 24       	eor	r1, r1
    3e0a:	60 e0       	ldi	r22, 0x00	; 0
    3e0c:	c8 01       	movw	r24, r16
    3e0e:	d1 de       	rcall	.-606    	; 0x3bb2 <_ZN13DS3231M_Class9writeByteEhh>
    3e10:	f7 01       	movw	r30, r14
    3e12:	84 81       	ldd	r24, Z+4	; 0x04
  writeByte(DS3231M_RTCMIN,int2bcd(dt.minute()));                             // Write the minutes value          //
    3e14:	6d 2d       	mov	r22, r13
    3e16:	0e 94 8d 3a 	call	0x751a	; 0x751a <__udivmodqi4>
    3e1a:	49 2f       	mov	r20, r25
    3e1c:	f0 e1       	ldi	r31, 0x10	; 16
    3e1e:	8f 9f       	mul	r24, r31
    3e20:	40 0d       	add	r20, r0
    3e22:	11 24       	eor	r1, r1
    3e24:	61 e0       	ldi	r22, 0x01	; 1
    3e26:	c8 01       	movw	r24, r16
    3e28:	c4 de       	rcall	.-632    	; 0x3bb2 <_ZN13DS3231M_Class9writeByteEhh>
    3e2a:	f7 01       	movw	r30, r14
    3e2c:	83 81       	ldd	r24, Z+3	; 0x03
  writeByte(DS3231M_RTCHOUR,int2bcd(dt.hour()));                              // Also re-sets the 24Hour clock on //
    3e2e:	6d 2d       	mov	r22, r13
    3e30:	0e 94 8d 3a 	call	0x751a	; 0x751a <__udivmodqi4>
    3e34:	49 2f       	mov	r20, r25
    3e36:	f0 e1       	ldi	r31, 0x10	; 16
    3e38:	8f 9f       	mul	r24, r31
    3e3a:	40 0d       	add	r20, r0
    3e3c:	11 24       	eor	r1, r1
    3e3e:	62 e0       	ldi	r22, 0x02	; 2
    3e40:	c8 01       	movw	r24, r16
  writeByte(DS3231M_RTCWKDAY,dt.dayOfTheWeek());                              // Update the weekday               //
    3e42:	b7 de       	rcall	.-658    	; 0x3bb2 <_ZN13DS3231M_Class9writeByteEhh>
    3e44:	c7 01       	movw	r24, r14
    3e46:	2f de       	rcall	.-930    	; 0x3aa6 <_ZNK8DateTime12dayOfTheWeekEv>
    3e48:	48 2f       	mov	r20, r24
    3e4a:	63 e0       	ldi	r22, 0x03	; 3
    3e4c:	c8 01       	movw	r24, r16
    3e4e:	b1 de       	rcall	.-670    	; 0x3bb2 <_ZN13DS3231M_Class9writeByteEhh>
    3e50:	f7 01       	movw	r30, r14
    3e52:	82 81       	ldd	r24, Z+2	; 0x02
  writeByte(DS3231M_RTCDATE,int2bcd(dt.day()));                               // Write the day of month           //
    3e54:	6d 2d       	mov	r22, r13
    3e56:	0e 94 8d 3a 	call	0x751a	; 0x751a <__udivmodqi4>
    3e5a:	49 2f       	mov	r20, r25
    3e5c:	f0 e1       	ldi	r31, 0x10	; 16
    3e5e:	8f 9f       	mul	r24, r31
    3e60:	40 0d       	add	r20, r0
    3e62:	11 24       	eor	r1, r1
    3e64:	64 e0       	ldi	r22, 0x04	; 4
    3e66:	c8 01       	movw	r24, r16
    3e68:	a4 de       	rcall	.-696    	; 0x3bb2 <_ZN13DS3231M_Class9writeByteEhh>
    3e6a:	f7 01       	movw	r30, r14
    3e6c:	81 81       	ldd	r24, Z+1	; 0x01
  writeByte(DS3231M_RTCMTH,int2bcd(dt.month()));                              // Month, ignore century bit        //
    3e6e:	6d 2d       	mov	r22, r13
    3e70:	0e 94 8d 3a 	call	0x751a	; 0x751a <__udivmodqi4>
    3e74:	49 2f       	mov	r20, r25
    3e76:	f0 e1       	ldi	r31, 0x10	; 16
    3e78:	8f 9f       	mul	r24, r31
    3e7a:	40 0d       	add	r20, r0
    3e7c:	11 24       	eor	r1, r1
    3e7e:	65 e0       	ldi	r22, 0x05	; 5
    3e80:	c8 01       	movw	r24, r16
    3e82:	97 de       	rcall	.-722    	; 0x3bb2 <_ZN13DS3231M_Class9writeByteEhh>
  writeByte(DS3231M_RTCYEAR,int2bcd(dt.year()-2000));                         // Write the year                   //
    3e84:	f7 01       	movw	r30, r14
    3e86:	80 81       	ld	r24, Z
    3e88:	6d 2d       	mov	r22, r13
    3e8a:	0e 94 8d 3a 	call	0x751a	; 0x751a <__udivmodqi4>
    3e8e:	49 2f       	mov	r20, r25
    3e90:	f0 e1       	ldi	r31, 0x10	; 16
    3e92:	8f 9f       	mul	r24, r31
    3e94:	40 0d       	add	r20, r0
    3e96:	11 24       	eor	r1, r1
    3e98:	66 e0       	ldi	r22, 0x06	; 6
    3e9a:	c8 01       	movw	r24, r16
  writeByte(DS3231M_STATUS,readByte(DS3231M_STATUS)&B01111111);               // Unset OSC flag bit if set        //
    3e9c:	8a de       	rcall	.-748    	; 0x3bb2 <_ZN13DS3231M_Class9writeByteEhh>
    3e9e:	6f e0       	ldi	r22, 0x0F	; 15
    3ea0:	c8 01       	movw	r24, r16
    3ea2:	a7 de       	rcall	.-690    	; 0x3bf2 <_ZN13DS3231M_Class8readByteEh>
    3ea4:	48 2f       	mov	r20, r24
    3ea6:	4f 77       	andi	r20, 0x7F	; 127
    3ea8:	6f e0       	ldi	r22, 0x0F	; 15
    3eaa:	c8 01       	movw	r24, r16
  writeByte(DS3231M_CONTROL,readByte(DS3231M_CONTROL)&B01111111);             // Unset EOSC flag bit if set       //
    3eac:	82 de       	rcall	.-764    	; 0x3bb2 <_ZN13DS3231M_Class9writeByteEhh>
    3eae:	6e e0       	ldi	r22, 0x0E	; 14
    3eb0:	c8 01       	movw	r24, r16
    3eb2:	9f de       	rcall	.-706    	; 0x3bf2 <_ZN13DS3231M_Class8readByteEh>
    3eb4:	48 2f       	mov	r20, r24
    3eb6:	4f 77       	andi	r20, 0x7F	; 127
    3eb8:	6e e0       	ldi	r22, 0x0E	; 14
    3eba:	c8 01       	movw	r24, r16
  _SetUnixTime = now().unixtime();                                            // Store time of last change        //
    3ebc:	7a de       	rcall	.-780    	; 0x3bb2 <_ZN13DS3231M_Class9writeByteEhh>
    3ebe:	b8 01       	movw	r22, r16
    3ec0:	ce 01       	movw	r24, r28
    3ec2:	01 96       	adiw	r24, 0x01	; 1
    3ec4:	e8 de       	rcall	.-560    	; 0x3c96 <_ZN13DS3231M_Class3nowEv>
    3ec6:	ce 01       	movw	r24, r28
    3ec8:	01 96       	adiw	r24, 0x01	; 1
    3eca:	f9 dd       	rcall	.-1038   	; 0x3abe <_ZNK8DateTime8unixtimeEv>
    3ecc:	f8 01       	movw	r30, r16
    3ece:	61 83       	std	Z+1, r22	; 0x01
    3ed0:	72 83       	std	Z+2, r23	; 0x02
    3ed2:	83 83       	std	Z+3, r24	; 0x03
    3ed4:	94 83       	std	Z+4, r25	; 0x04
    3ed6:	26 96       	adiw	r28, 0x06	; 6
} // of method adjust                                                         //                                  //
    3ed8:	0f b6       	in	r0, 0x3f	; 63
    3eda:	f8 94       	cli
    3edc:	de bf       	out	0x3e, r29	; 62
    3ede:	0f be       	out	0x3f, r0	; 63
    3ee0:	cd bf       	out	0x3d, r28	; 61
    3ee2:	df 91       	pop	r29
    3ee4:	cf 91       	pop	r28
    3ee6:	1f 91       	pop	r17
    3ee8:	0f 91       	pop	r16
    3eea:	ff 90       	pop	r15
    3eec:	ef 90       	pop	r14
    3eee:	df 90       	pop	r13
    3ef0:	08 95       	ret

00003ef2 <_ZN13DS3231M_Class6adjustEv>:
    3ef2:	0f 93       	push	r16
/*******************************************************************************************************************
** Method adjust set the current date/time. This is an overloaded function, if called with no parameters then the **
** RTC is set to the date/time when the program was compiled and uploaded. Otherwise the values are set, but the  **
** oscillator is stopped during the process and needs to be restarted upon completion.                            **
*******************************************************************************************************************/
void DS3231M_Class::adjust() {                                                // Set the RTC date and Time        //
    3ef4:	1f 93       	push	r17
    3ef6:	cf 93       	push	r28
    3ef8:	df 93       	push	r29
    3efa:	00 d0       	rcall	.+0      	; 0x3efc <_ZN13DS3231M_Class6adjustEv+0xa>
    3efc:	00 d0       	rcall	.+0      	; 0x3efe <_ZN13DS3231M_Class6adjustEv+0xc>
    3efe:	00 d0       	rcall	.+0      	; 0x3f00 <_ZN13DS3231M_Class6adjustEv+0xe>
    3f00:	cd b7       	in	r28, 0x3d	; 61
    3f02:	de b7       	in	r29, 0x3e	; 62
    3f04:	8c 01       	movw	r16, r24
  adjust(DateTime(F(__DATE__), F(__TIME__)));                                 // Set to compile time              //
    3f06:	4d e1       	ldi	r20, 0x1D	; 29
    3f08:	52 e0       	ldi	r21, 0x02	; 2
    3f0a:	61 e1       	ldi	r22, 0x11	; 17
    3f0c:	72 e0       	ldi	r23, 0x02	; 2
    3f0e:	ce 01       	movw	r24, r28
    3f10:	01 96       	adiw	r24, 0x01	; 1
    3f12:	54 dd       	rcall	.-1368   	; 0x39bc <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>
    3f14:	be 01       	movw	r22, r28
    3f16:	6f 5f       	subi	r22, 0xFF	; 255
    3f18:	7f 4f       	sbci	r23, 0xFF	; 255
    3f1a:	c8 01       	movw	r24, r16
    3f1c:	5c df       	rcall	.-328    	; 0x3dd6 <_ZN13DS3231M_Class6adjustERK8DateTime>
} // of method adjust                                                         /-----------------------------------//
    3f1e:	26 96       	adiw	r28, 0x06	; 6
    3f20:	0f b6       	in	r0, 0x3f	; 63
    3f22:	f8 94       	cli
    3f24:	de bf       	out	0x3e, r29	; 62
    3f26:	0f be       	out	0x3f, r0	; 63
    3f28:	cd bf       	out	0x3d, r28	; 61
    3f2a:	df 91       	pop	r29
    3f2c:	cf 91       	pop	r28
    3f2e:	1f 91       	pop	r17
    3f30:	0f 91       	pop	r16
    3f32:	08 95       	ret

00003f34 <_GLOBAL__sub_I__ZN9DhcpClass13beginWithDHCPEPhmm>:
    unsigned long m = n;
    n /= 16;
    char c = m - 16 * n;
    *str-- = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);
}
    3f34:	0f 93       	push	r16
    3f36:	00 e0       	ldi	r16, 0x00	; 0
    3f38:	20 e0       	ldi	r18, 0x00	; 0
    3f3a:	40 e0       	ldi	r20, 0x00	; 0
    3f3c:	60 e0       	ldi	r22, 0x00	; 0
    3f3e:	86 e9       	ldi	r24, 0x96	; 150
    3f40:	9b e0       	ldi	r25, 0x0B	; 11
    3f42:	0e 94 42 34 	call	0x6884	; 0x6884 <_ZN9IPAddressC1Ehhhh>
    3f46:	0f 91       	pop	r16
    3f48:	08 95       	ret

00003f4a <_ZN9DNSClient5beginERK9IPAddress>:
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    3f4a:	fb 01       	movw	r30, r22
    3f4c:	42 81       	ldd	r20, Z+2	; 0x02
    3f4e:	53 81       	ldd	r21, Z+3	; 0x03
    3f50:	64 81       	ldd	r22, Z+4	; 0x04
    3f52:	75 81       	ldd	r23, Z+5	; 0x05
    3f54:	fc 01       	movw	r30, r24
    3f56:	42 83       	std	Z+2, r20	; 0x02
    3f58:	53 83       	std	Z+3, r21	; 0x03
    3f5a:	64 83       	std	Z+4, r22	; 0x04
    3f5c:	75 83       	std	Z+5, r23	; 0x05
#define INVALID_RESPONSE -4

void DNSClient::begin(const IPAddress& aDNSServer)
{
    iDNSServer = aDNSServer;
    iRequestId = 0;
    3f5e:	17 82       	std	Z+7, r1	; 0x07
    3f60:	16 82       	std	Z+6, r1	; 0x06
    3f62:	08 95       	ret

00003f64 <_ZN9DNSClient9inet_atonEPKcR9IPAddress>:
}


int DNSClient::inet_aton(const char* aIPAddrString, IPAddress& aResult)
{
    3f64:	cf 93       	push	r28
    3f66:	df 93       	push	r29
    3f68:	da 01       	movw	r26, r20
    3f6a:	fb 01       	movw	r30, r22
    3f6c:	eb 01       	movw	r28, r22
    // See if we've been given a valid IP address
    const char* p =aIPAddrString;
    while (*p &&
    3f6e:	89 91       	ld	r24, Y+
    3f70:	81 11       	cpse	r24, r1
    3f72:	fd cf       	rjmp	.-6      	; 0x3f6e <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0xa>
    3f74:	80 e0       	ldi	r24, 0x00	; 0
    3f76:	90 e0       	ldi	r25, 0x00	; 0
    3f78:	20 e0       	ldi	r18, 0x00	; 0
    3f7a:	30 e0       	ldi	r19, 0x00	; 0
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
    3f7c:	4a e0       	ldi	r20, 0x0A	; 10
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
        int segmentValue =0;
        while (*p && (segment < 4))
    3f7e:	51 91       	ld	r21, Z+
    3f80:	55 23       	and	r21, r21
    3f82:	e9 f0       	breq	.+58     	; 0x3fbe <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x5a>
    3f84:	24 30       	cpi	r18, 0x04	; 4
    3f86:	31 05       	cpc	r19, r1
    3f88:	44 f5       	brge	.+80     	; 0x3fda <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
        {
            if (*p == '.')
    3f8a:	5e 32       	cpi	r21, 0x2E	; 46
    3f8c:	69 f4       	brne	.+26     	; 0x3fa8 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x44>
            {
                // We've reached the end of a segment
                if (segmentValue > 255)
    3f8e:	8f 3f       	cpi	r24, 0xFF	; 255
    3f90:	91 05       	cpc	r25, r1
    3f92:	09 f0       	breq	.+2      	; 0x3f96 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x32>
    3f94:	14 f5       	brge	.+68     	; 0x3fda <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
                    // You can't have IP address segments that don't fit in a byte
                    return 0;
                }
                else
                {
                    aResult[segment] = (byte)segmentValue;
    3f96:	ed 01       	movw	r28, r26
    3f98:	c2 0f       	add	r28, r18
    3f9a:	d3 1f       	adc	r29, r19
    3f9c:	8a 83       	std	Y+2, r24	; 0x02
                    segment++;
    3f9e:	2f 5f       	subi	r18, 0xFF	; 255
    3fa0:	3f 4f       	sbci	r19, 0xFF	; 255
                    segmentValue = 0;
    3fa2:	80 e0       	ldi	r24, 0x00	; 0
    3fa4:	90 e0       	ldi	r25, 0x00	; 0
    3fa6:	eb cf       	rjmp	.-42     	; 0x3f7e <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x1a>
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
    3fa8:	48 9f       	mul	r20, r24
    3faa:	b0 01       	movw	r22, r0
    3fac:	49 9f       	mul	r20, r25
    3fae:	70 0d       	add	r23, r0
    3fb0:	11 24       	eor	r1, r1
    3fb2:	85 2f       	mov	r24, r21
    3fb4:	90 e0       	ldi	r25, 0x00	; 0
    3fb6:	c0 97       	sbiw	r24, 0x30	; 48
    3fb8:	86 0f       	add	r24, r22
    3fba:	97 1f       	adc	r25, r23
    3fbc:	e0 cf       	rjmp	.-64     	; 0x3f7e <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x1a>
            }
            p++;
        }
        // We've reached the end of address, but there'll still be the last
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
    3fbe:	8f 3f       	cpi	r24, 0xFF	; 255
    3fc0:	91 05       	cpc	r25, r1
    3fc2:	09 f0       	breq	.+2      	; 0x3fc6 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x62>
    3fc4:	54 f4       	brge	.+20     	; 0x3fda <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
    3fc6:	24 30       	cpi	r18, 0x04	; 4
    3fc8:	31 05       	cpc	r19, r1
    3fca:	3c f4       	brge	.+14     	; 0x3fda <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
            // or more than four segments
            return 0;
        }
        else
        {
            aResult[segment] = (byte)segmentValue;
    3fcc:	fd 01       	movw	r30, r26
    3fce:	e2 0f       	add	r30, r18
    3fd0:	f3 1f       	adc	r31, r19
    3fd2:	82 83       	std	Z+2, r24	; 0x02
            return 1;
    3fd4:	81 e0       	ldi	r24, 0x01	; 1
    3fd6:	90 e0       	ldi	r25, 0x00	; 0
    3fd8:	02 c0       	rjmp	.+4      	; 0x3fde <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x7a>
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
        {
            // You can't have IP address segments that don't fit in a byte,
            // or more than four segments
            return 0;
    3fda:	80 e0       	ldi	r24, 0x00	; 0
    3fdc:	90 e0       	ldi	r25, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    3fde:	df 91       	pop	r29
    3fe0:	cf 91       	pop	r28
    3fe2:	08 95       	ret

00003fe4 <_GLOBAL__sub_I__ZN9DNSClient5beginERK9IPAddress>:
    // Mark the entire packet as read
    iUdp.flush();

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
}
    3fe4:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    3fe6:	00 e0       	ldi	r16, 0x00	; 0
    3fe8:	20 e0       	ldi	r18, 0x00	; 0
    3fea:	40 e0       	ldi	r20, 0x00	; 0
    3fec:	60 e0       	ldi	r22, 0x00	; 0
    3fee:	8c e9       	ldi	r24, 0x9C	; 156
    3ff0:	9b e0       	ldi	r25, 0x0B	; 11
    3ff2:	0e 94 42 34 	call	0x6884	; 0x6884 <_ZN9IPAddressC1Ehhhh>
    3ff6:	0f 91       	pop	r16
    3ff8:	08 95       	ret

00003ffa <_ZN9DNSClient12BuildRequestEPKc>:

    return ret;
}

uint16_t DNSClient::BuildRequest(const char* aName)
{
    3ffa:	8f 92       	push	r8
    3ffc:	9f 92       	push	r9
    3ffe:	af 92       	push	r10
    4000:	bf 92       	push	r11
    4002:	cf 92       	push	r12
    4004:	df 92       	push	r13
    4006:	ef 92       	push	r14
    4008:	ff 92       	push	r15
    400a:	0f 93       	push	r16
    400c:	1f 93       	push	r17
    400e:	cf 93       	push	r28
    4010:	df 93       	push	r29
    4012:	00 d0       	rcall	.+0      	; 0x4014 <_ZN9DNSClient12BuildRequestEPKc+0x1a>
    4014:	1f 92       	push	r1
    4016:	cd b7       	in	r28, 0x3d	; 61
    4018:	de b7       	in	r29, 0x3e	; 62
    401a:	6c 01       	movw	r12, r24
    401c:	7b 01       	movw	r14, r22
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    //    |                    ARCOUNT                    |
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    // As we only support one request at a time at present, we can simplify
    // some of this header
    iRequestId = millis(); // generate a random ID
    401e:	0e 94 c8 35 	call	0x6b90	; 0x6b90 <millis>
    4022:	f6 01       	movw	r30, r12
    4024:	77 83       	std	Z+7, r23	; 0x07
    4026:	66 83       	std	Z+6, r22	; 0x06
    uint16_t twoByteBuffer;

    // FIXME We should also check that there's enough space available to write to, rather
    // FIXME than assume there's enough space (as the code does at present)
    iUdp.write((uint8_t*)&iRequestId, sizeof(iRequestId));
    4028:	86 01       	movw	r16, r12
    402a:	08 5f       	subi	r16, 0xF8	; 248
    402c:	1f 4f       	sbci	r17, 0xFF	; 255
    402e:	b6 01       	movw	r22, r12
    4030:	6a 5f       	subi	r22, 0xFA	; 250
    4032:	7f 4f       	sbci	r23, 0xFF	; 255
    4034:	42 e0       	ldi	r20, 0x02	; 2
    4036:	50 e0       	ldi	r21, 0x00	; 0
    4038:	c8 01       	movw	r24, r16
    403a:	30 d5       	rcall	.+2656   	; 0x4a9c <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = htons(QUERY_FLAG | OPCODE_STANDARD_QUERY | RECURSION_DESIRED_FLAG);
    403c:	81 e0       	ldi	r24, 0x01	; 1
    403e:	90 e0       	ldi	r25, 0x00	; 0
    4040:	9a 83       	std	Y+2, r25	; 0x02
    4042:	89 83       	std	Y+1, r24	; 0x01
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    4044:	42 e0       	ldi	r20, 0x02	; 2
    4046:	50 e0       	ldi	r21, 0x00	; 0
    4048:	be 01       	movw	r22, r28
    404a:	6f 5f       	subi	r22, 0xFF	; 255
    404c:	7f 4f       	sbci	r23, 0xFF	; 255
    404e:	c8 01       	movw	r24, r16
    4050:	25 d5       	rcall	.+2634   	; 0x4a9c <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = htons(1);  // One question record
    4052:	80 e0       	ldi	r24, 0x00	; 0
    4054:	91 e0       	ldi	r25, 0x01	; 1
    4056:	9a 83       	std	Y+2, r25	; 0x02
    4058:	89 83       	std	Y+1, r24	; 0x01
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    405a:	42 e0       	ldi	r20, 0x02	; 2
    405c:	50 e0       	ldi	r21, 0x00	; 0
    405e:	be 01       	movw	r22, r28
    4060:	6f 5f       	subi	r22, 0xFF	; 255
    4062:	7f 4f       	sbci	r23, 0xFF	; 255
    4064:	c8 01       	movw	r24, r16
    4066:	1a d5       	rcall	.+2612   	; 0x4a9c <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = 0;  // Zero answer records
    4068:	1a 82       	std	Y+2, r1	; 0x02
    406a:	19 82       	std	Y+1, r1	; 0x01
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    406c:	42 e0       	ldi	r20, 0x02	; 2
    406e:	50 e0       	ldi	r21, 0x00	; 0
    4070:	be 01       	movw	r22, r28
    4072:	6f 5f       	subi	r22, 0xFF	; 255
    4074:	7f 4f       	sbci	r23, 0xFF	; 255
    4076:	c8 01       	movw	r24, r16
    4078:	11 d5       	rcall	.+2594   	; 0x4a9c <_ZN11EthernetUDP5writeEPKhj>

    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    407a:	42 e0       	ldi	r20, 0x02	; 2
    407c:	50 e0       	ldi	r21, 0x00	; 0
    407e:	be 01       	movw	r22, r28
    4080:	6f 5f       	subi	r22, 0xFF	; 255
    4082:	7f 4f       	sbci	r23, 0xFF	; 255
    4084:	c8 01       	movw	r24, r16
    4086:	0a d5       	rcall	.+2580   	; 0x4a9c <_ZN11EthernetUDP5writeEPKhj>
    // and zero additional records
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    4088:	42 e0       	ldi	r20, 0x02	; 2
    408a:	50 e0       	ldi	r21, 0x00	; 0
    408c:	be 01       	movw	r22, r28
    408e:	6f 5f       	subi	r22, 0xFF	; 255
    4090:	7f 4f       	sbci	r23, 0xFF	; 255
    4092:	c8 01       	movw	r24, r16
    4094:	03 d5       	rcall	.+2566   	; 0x4a9c <_ZN11EthernetUDP5writeEPKhj>

    // Build question
    const char* start =aName;
    const char* end =start;
    4096:	57 01       	movw	r10, r14
    uint8_t len;
    // Run through the name being requested
    while (*end)
    4098:	f5 01       	movw	r30, r10
    409a:	80 81       	ld	r24, Z
    409c:	88 23       	and	r24, r24
    409e:	f9 f0       	breq	.+62     	; 0x40de <_ZN9DNSClient12BuildRequestEPKc+0xe4>
    40a0:	a7 01       	movw	r20, r14
    40a2:	5a 01       	movw	r10, r20
    {
        // Find out how long this section of the name is
        end = start;
        while (*end && (*end != '.') )
    40a4:	f5 01       	movw	r30, r10
    40a6:	81 91       	ld	r24, Z+
    40a8:	6f 01       	movw	r12, r30
    40aa:	88 23       	and	r24, r24
    40ac:	21 f0       	breq	.+8      	; 0x40b6 <_ZN9DNSClient12BuildRequestEPKc+0xbc>
    40ae:	8e 32       	cpi	r24, 0x2E	; 46
    40b0:	11 f0       	breq	.+4      	; 0x40b6 <_ZN9DNSClient12BuildRequestEPKc+0xbc>
    40b2:	a6 01       	movw	r20, r12
    40b4:	f6 cf       	rjmp	.-20     	; 0x40a2 <_ZN9DNSClient12BuildRequestEPKc+0xa8>
        {
            end++;
        }

        if (end-start > 0)
    40b6:	4a 01       	movw	r8, r20
    40b8:	8e 18       	sub	r8, r14
    40ba:	9f 08       	sbc	r9, r15
    40bc:	18 14       	cp	r1, r8
    40be:	19 04       	cpc	r1, r9
    40c0:	64 f4       	brge	.+24     	; 0x40da <_ZN9DNSClient12BuildRequestEPKc+0xe0>
        {
            // Write out the size of this section
            len = end-start;
    40c2:	8b 82       	std	Y+3, r8	; 0x03
            iUdp.write(&len, sizeof(len));
    40c4:	41 e0       	ldi	r20, 0x01	; 1
    40c6:	50 e0       	ldi	r21, 0x00	; 0
    40c8:	be 01       	movw	r22, r28
    40ca:	6d 5f       	subi	r22, 0xFD	; 253
    40cc:	7f 4f       	sbci	r23, 0xFF	; 255
    40ce:	c8 01       	movw	r24, r16
            // And then write out the section
            iUdp.write((uint8_t*)start, end-start);
    40d0:	e5 d4       	rcall	.+2506   	; 0x4a9c <_ZN11EthernetUDP5writeEPKhj>
    40d2:	a4 01       	movw	r20, r8
    40d4:	b7 01       	movw	r22, r14
    40d6:	c8 01       	movw	r24, r16
    40d8:	e1 d4       	rcall	.+2498   	; 0x4a9c <_ZN11EthernetUDP5writeEPKhj>
        }
        start = end+1;
    40da:	76 01       	movw	r14, r12
    }

    // We've got to the end of the question name, so
    // terminate it with a zero-length section
    len = 0;
    40dc:	dd cf       	rjmp	.-70     	; 0x4098 <_ZN9DNSClient12BuildRequestEPKc+0x9e>
    iUdp.write(&len, sizeof(len));
    40de:	1b 82       	std	Y+3, r1	; 0x03
    40e0:	41 e0       	ldi	r20, 0x01	; 1
    40e2:	50 e0       	ldi	r21, 0x00	; 0
    40e4:	be 01       	movw	r22, r28
    40e6:	6d 5f       	subi	r22, 0xFD	; 253
    40e8:	7f 4f       	sbci	r23, 0xFF	; 255
    40ea:	c8 01       	movw	r24, r16
    40ec:	d7 d4       	rcall	.+2478   	; 0x4a9c <_ZN11EthernetUDP5writeEPKhj>
    // Finally the type and class of question
    twoByteBuffer = htons(TYPE_A);
    40ee:	e1 2c       	mov	r14, r1
    40f0:	ff 24       	eor	r15, r15
    40f2:	f3 94       	inc	r15
    40f4:	fa 82       	std	Y+2, r15	; 0x02
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    40f6:	e9 82       	std	Y+1, r14	; 0x01
    40f8:	42 e0       	ldi	r20, 0x02	; 2
    40fa:	50 e0       	ldi	r21, 0x00	; 0
    40fc:	be 01       	movw	r22, r28
    40fe:	6f 5f       	subi	r22, 0xFF	; 255
    4100:	7f 4f       	sbci	r23, 0xFF	; 255
    4102:	c8 01       	movw	r24, r16

    twoByteBuffer = htons(CLASS_IN);  // Internet class of question
    4104:	cb d4       	rcall	.+2454   	; 0x4a9c <_ZN11EthernetUDP5writeEPKhj>
    4106:	fa 82       	std	Y+2, r15	; 0x02
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    4108:	e9 82       	std	Y+1, r14	; 0x01
    410a:	42 e0       	ldi	r20, 0x02	; 2
    410c:	50 e0       	ldi	r21, 0x00	; 0
    410e:	be 01       	movw	r22, r28
    4110:	6f 5f       	subi	r22, 0xFF	; 255
    4112:	7f 4f       	sbci	r23, 0xFF	; 255
    4114:	c8 01       	movw	r24, r16
    4116:	c2 d4       	rcall	.+2436   	; 0x4a9c <_ZN11EthernetUDP5writeEPKhj>
    // Success!  Everything buffered okay
    return 1;
}
    4118:	81 e0       	ldi	r24, 0x01	; 1
    411a:	90 e0       	ldi	r25, 0x00	; 0
    411c:	0f 90       	pop	r0
    411e:	0f 90       	pop	r0
    4120:	0f 90       	pop	r0
    4122:	df 91       	pop	r29
    4124:	cf 91       	pop	r28
    4126:	1f 91       	pop	r17
    4128:	0f 91       	pop	r16
    412a:	ff 90       	pop	r15
    412c:	ef 90       	pop	r14
    412e:	df 90       	pop	r13
    4130:	cf 90       	pop	r12
    4132:	bf 90       	pop	r11
    4134:	af 90       	pop	r10
    4136:	9f 90       	pop	r9
    4138:	8f 90       	pop	r8
    413a:	08 95       	ret

0000413c <_ZN9DNSClient15ProcessResponseEjR9IPAddress>:


uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    413c:	2f 92       	push	r2
    413e:	3f 92       	push	r3
    4140:	4f 92       	push	r4
    4142:	5f 92       	push	r5
    4144:	6f 92       	push	r6
    4146:	7f 92       	push	r7
    4148:	8f 92       	push	r8
    414a:	9f 92       	push	r9
    414c:	af 92       	push	r10
    414e:	bf 92       	push	r11
    4150:	cf 92       	push	r12
    4152:	df 92       	push	r13
    4154:	ef 92       	push	r14
    4156:	ff 92       	push	r15
    4158:	0f 93       	push	r16
    415a:	1f 93       	push	r17
    415c:	cf 93       	push	r28
    415e:	df 93       	push	r29
    4160:	cd b7       	in	r28, 0x3d	; 61
    4162:	de b7       	in	r29, 0x3e	; 62
    4164:	63 97       	sbiw	r28, 0x13	; 19
    4166:	0f b6       	in	r0, 0x3f	; 63
    4168:	f8 94       	cli
    416a:	de bf       	out	0x3e, r29	; 62
    416c:	0f be       	out	0x3f, r0	; 63
    416e:	cd bf       	out	0x3d, r28	; 61
    4170:	7c 01       	movw	r14, r24
    4172:	6b 01       	movw	r12, r22
    4174:	1a 01       	movw	r2, r20
    uint32_t startTime = millis();
    4176:	0e 94 c8 35 	call	0x6b90	; 0x6b90 <millis>
    417a:	4b 01       	movw	r8, r22
    417c:	5c 01       	movw	r10, r24

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    417e:	87 01       	movw	r16, r14
    4180:	08 5f       	subi	r16, 0xF8	; 248
    4182:	1f 4f       	sbci	r17, 0xFF	; 255
    {
        if((millis() - startTime) > aTimeout)
    4184:	26 01       	movw	r4, r12
    4186:	61 2c       	mov	r6, r1
    4188:	71 2c       	mov	r7, r1
uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    418a:	c8 01       	movw	r24, r16
    418c:	29 d5       	rcall	.+2642   	; 0x4be0 <_ZN11EthernetUDP11parsePacketEv>
    418e:	18 16       	cp	r1, r24
    4190:	19 06       	cpc	r1, r25
    4192:	a4 f0       	brlt	.+40     	; 0x41bc <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x80>
    {
        if((millis() - startTime) > aTimeout)
    4194:	0e 94 c8 35 	call	0x6b90	; 0x6b90 <millis>
    4198:	dc 01       	movw	r26, r24
    419a:	cb 01       	movw	r24, r22
    419c:	88 19       	sub	r24, r8
    419e:	99 09       	sbc	r25, r9
    41a0:	aa 09       	sbc	r26, r10
    41a2:	bb 09       	sbc	r27, r11
    41a4:	48 16       	cp	r4, r24
    41a6:	59 06       	cpc	r5, r25
    41a8:	6a 06       	cpc	r6, r26
    41aa:	7b 06       	cpc	r7, r27
    41ac:	d0 f0       	brcs	.+52     	; 0x41e2 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xa6>
            return TIMED_OUT;
        delay(50);
    41ae:	62 e3       	ldi	r22, 0x32	; 50
    41b0:	70 e0       	ldi	r23, 0x00	; 0
    41b2:	80 e0       	ldi	r24, 0x00	; 0
    41b4:	90 e0       	ldi	r25, 0x00	; 0
    41b6:	0e 94 f9 35 	call	0x6bf2	; 0x6bf2 <delay>
uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    41ba:	e7 cf       	rjmp	.-50     	; 0x418a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x4e>

    // We've had a reply!
    // Read the UDP header
    uint8_t header[DNS_HEADER_SIZE]; // Enough space to reuse for the DNS header
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
    41bc:	f7 01       	movw	r30, r14
    41be:	42 81       	ldd	r20, Z+2	; 0x02
    41c0:	53 81       	ldd	r21, Z+3	; 0x03
    41c2:	64 81       	ldd	r22, Z+4	; 0x04
    41c4:	75 81       	ldd	r23, Z+5	; 0x05
    41c6:	81 8d       	ldd	r24, Z+25	; 0x19
    41c8:	92 8d       	ldd	r25, Z+26	; 0x1a
    41ca:	a3 8d       	ldd	r26, Z+27	; 0x1b
    41cc:	b4 8d       	ldd	r27, Z+28	; 0x1c
    41ce:	48 17       	cp	r20, r24
    41d0:	59 07       	cpc	r21, r25
    41d2:	6a 07       	cpc	r22, r26
    41d4:	7b 07       	cpc	r23, r27
    41d6:	49 f4       	brne	.+18     	; 0x41ea <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xae>
    41d8:	85 8d       	ldd	r24, Z+29	; 0x1d
    41da:	96 8d       	ldd	r25, Z+30	; 0x1e
    41dc:	c5 97       	sbiw	r24, 0x35	; 53
    41de:	29 f4       	brne	.+10     	; 0x41ea <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xae>
    41e0:	09 c0       	rjmp	.+18     	; 0x41f4 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xb8>

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    {
        if((millis() - startTime) > aTimeout)
            return TIMED_OUT;
    41e2:	ee 24       	eor	r14, r14
    41e4:	ea 94       	dec	r14
    41e6:	fe 2c       	mov	r15, r14
    41e8:	f0 c0       	rjmp	.+480    	; 0x43ca <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
        (iUdp.remotePort() != DNS_PORT) )
    {
        // It's not from who we expected
        return INVALID_SERVER;
    41ea:	9e ef       	ldi	r25, 0xFE	; 254
    41ec:	e9 2e       	mov	r14, r25
    41ee:	ff 24       	eor	r15, r15
    41f0:	fa 94       	dec	r15
    41f2:	eb c0       	rjmp	.+470    	; 0x43ca <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    41f4:	c8 01       	movw	r24, r16
    41f6:	08 d4       	rcall	.+2064   	; 0x4a08 <_ZN11EthernetUDP9availableEv>
    41f8:	0c 97       	sbiw	r24, 0x0c	; 12
    41fa:	0c f4       	brge	.+2      	; 0x41fe <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xc2>
    41fc:	e2 c0       	rjmp	.+452    	; 0x43c2 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x286>
    {
        return TRUNCATED;
    }
    iUdp.read(header, DNS_HEADER_SIZE);
    41fe:	4c e0       	ldi	r20, 0x0C	; 12
    4200:	50 e0       	ldi	r21, 0x00	; 0
    4202:	be 01       	movw	r22, r28
    4204:	6f 5f       	subi	r22, 0xFF	; 255
    4206:	7f 4f       	sbci	r23, 0xFF	; 255
    4208:	c8 01       	movw	r24, r16
    420a:	83 d4       	rcall	.+2310   	; 0x4b12 <_ZN11EthernetUDP4readEPhj>

    uint16_t header_flags = htons(*((uint16_t*)&header[2]));
    420c:	8b 81       	ldd	r24, Y+3	; 0x03
    420e:	9c 81       	ldd	r25, Y+4	; 0x04
    4210:	98 27       	eor	r25, r24
    4212:	89 27       	eor	r24, r25
    4214:	98 27       	eor	r25, r24
    4216:	9a 8b       	std	Y+18, r25	; 0x12
    4218:	89 8b       	std	Y+17, r24	; 0x11
    // Check that it's a response to this request
    if ( ( iRequestId != (*((uint16_t*)&header[0])) ) ||
    421a:	f7 01       	movw	r30, r14
    421c:	46 81       	ldd	r20, Z+6	; 0x06
    421e:	57 81       	ldd	r21, Z+7	; 0x07
    4220:	29 81       	ldd	r18, Y+1	; 0x01
    4222:	3a 81       	ldd	r19, Y+2	; 0x02
    4224:	42 17       	cp	r20, r18
    4226:	53 07       	cpc	r21, r19
    4228:	11 f4       	brne	.+4      	; 0x422e <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xf2>
    422a:	97 fd       	sbrc	r25, 7
        ((header_flags & QUERY_RESPONSE_MASK) != (uint16_t)RESPONSE_FLAG) )
    {
        // Mark the entire packet as read
        iUdp.flush();
    422c:	07 c0       	rjmp	.+14     	; 0x423c <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x100>
    422e:	c8 01       	movw	r24, r16
    4230:	05 d4       	rcall	.+2058   	; 0x4a3c <_ZN11EthernetUDP5flushEv>
        return INVALID_RESPONSE;
    4232:	7c ef       	ldi	r23, 0xFC	; 252
    4234:	e7 2e       	mov	r14, r23
    4236:	ff 24       	eor	r15, r15
    4238:	fa 94       	dec	r15
    423a:	c7 c0       	rjmp	.+398    	; 0x43ca <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    }
    // Check for any errors in the response (or in our request)
    // although we don't do anything to get round these
    if ( (header_flags & TRUNCATION_FLAG) || (header_flags & RESP_MASK) )
    423c:	8f 70       	andi	r24, 0x0F	; 15
    423e:	92 70       	andi	r25, 0x02	; 2
    4240:	89 2b       	or	r24, r25
    {
        // Mark the entire packet as read
        iUdp.flush();
    4242:	39 f0       	breq	.+14     	; 0x4252 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x116>
    4244:	c8 01       	movw	r24, r16
    4246:	fa d3       	rcall	.+2036   	; 0x4a3c <_ZN11EthernetUDP5flushEv>
        return -5; //INVALID_RESPONSE;
    4248:	6b ef       	ldi	r22, 0xFB	; 251
    424a:	e6 2e       	mov	r14, r22
    424c:	ff 24       	eor	r15, r15
    424e:	fa 94       	dec	r15
    4250:	bc c0       	rjmp	.+376    	; 0x43ca <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    }

    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
    4252:	cf 80       	ldd	r12, Y+7	; 0x07
    4254:	d8 84       	ldd	r13, Y+8	; 0x08
    4256:	dc 24       	eor	r13, r12
    4258:	cd 24       	eor	r12, r13
    425a:	dc 24       	eor	r13, r12
    if (answerCount == 0 )
    425c:	c1 14       	cp	r12, r1
    425e:	d1 04       	cpc	r13, r1
    4260:	19 f0       	breq	.+6      	; 0x4268 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x12c>
    4262:	e1 2c       	mov	r14, r1
    4264:	f1 2c       	mov	r15, r1
    {
        // Mark the entire packet as read
        iUdp.flush();
    4266:	1f c0       	rjmp	.+62     	; 0x42a6 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x16a>
    4268:	c8 01       	movw	r24, r16
    426a:	e8 d3       	rcall	.+2000   	; 0x4a3c <_ZN11EthernetUDP5flushEv>
        return -6; //INVALID_RESPONSE;
    426c:	5a ef       	ldi	r21, 0xFA	; 250
    426e:	e5 2e       	mov	r14, r21
    4270:	ff 24       	eor	r15, r15
    4272:	fa 94       	dec	r15
    4274:	aa c0       	rjmp	.+340    	; 0x43ca <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    {
        // Skip over the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    4276:	41 e0       	ldi	r20, 0x01	; 1
    4278:	50 e0       	ldi	r21, 0x00	; 0
    427a:	be 01       	movw	r22, r28
    427c:	63 5f       	subi	r22, 0xF3	; 243
    427e:	7f 4f       	sbci	r23, 0xFF	; 255
    4280:	c8 01       	movw	r24, r16
    4282:	47 d4       	rcall	.+2190   	; 0x4b12 <_ZN11EthernetUDP4readEPhj>
            if (len > 0)
    4284:	8d 85       	ldd	r24, Y+13	; 0x0d
    4286:	81 11       	cpse	r24, r1
                while(len--)
                {
                    iUdp.read(); // we don't care about the returned byte
                }
            }
        } while (len != 0);
    4288:	17 c0       	rjmp	.+46     	; 0x42b8 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x17c>
    428a:	8d 85       	ldd	r24, Y+13	; 0x0d

        // Now jump over the type and class
        for (int i =0; i < 4; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    428c:	81 11       	cpse	r24, r1
    428e:	f3 cf       	rjmp	.-26     	; 0x4276 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x13a>
    4290:	c8 01       	movw	r24, r16
    4292:	17 d4       	rcall	.+2094   	; 0x4ac2 <_ZN11EthernetUDP4readEv>
    4294:	c8 01       	movw	r24, r16
    4296:	15 d4       	rcall	.+2090   	; 0x4ac2 <_ZN11EthernetUDP4readEv>
    4298:	c8 01       	movw	r24, r16
    429a:	13 d4       	rcall	.+2086   	; 0x4ac2 <_ZN11EthernetUDP4readEv>
    429c:	c8 01       	movw	r24, r16
    429e:	11 d4       	rcall	.+2082   	; 0x4ac2 <_ZN11EthernetUDP4readEv>
    42a0:	ff ef       	ldi	r31, 0xFF	; 255
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    42a2:	ef 1a       	sub	r14, r31
    42a4:	ff 0a       	sbc	r15, r31
    42a6:	8d 81       	ldd	r24, Y+5	; 0x05
    42a8:	9e 81       	ldd	r25, Y+6	; 0x06
    42aa:	98 27       	eor	r25, r24
    42ac:	89 27       	eor	r24, r25
    42ae:	98 27       	eor	r25, r24
    42b0:	e8 16       	cp	r14, r24
    42b2:	f9 06       	cpc	r15, r25
    42b4:	00 f3       	brcs	.-64     	; 0x4276 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x13a>
    42b6:	09 c0       	rjmp	.+18     	; 0x42ca <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x18e>
            iUdp.read(&len, sizeof(len));
            if (len > 0)
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
    42b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    42ba:	9f ef       	ldi	r25, 0xFF	; 255
    42bc:	98 0f       	add	r25, r24
    42be:	9d 87       	std	Y+13, r25	; 0x0d
    42c0:	88 23       	and	r24, r24
    42c2:	19 f3       	breq	.-58     	; 0x428a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x14e>
                {
                    iUdp.read(); // we don't care about the returned byte
    42c4:	c8 01       	movw	r24, r16
    42c6:	fd d3       	rcall	.+2042   	; 0x4ac2 <_ZN11EthernetUDP4readEv>
            iUdp.read(&len, sizeof(len));
            if (len > 0)
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
    42c8:	f7 cf       	rjmp	.-18     	; 0x42b8 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x17c>
    42ca:	a1 2c       	mov	r10, r1
    42cc:	b1 2c       	mov	r11, r1
    {
        // Skip the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    42ce:	41 e0       	ldi	r20, 0x01	; 1
    42d0:	50 e0       	ldi	r21, 0x00	; 0
    42d2:	be 01       	movw	r22, r28
    42d4:	6d 5e       	subi	r22, 0xED	; 237
    42d6:	7f 4f       	sbci	r23, 0xFF	; 255
    42d8:	c8 01       	movw	r24, r16
    42da:	1b d4       	rcall	.+2102   	; 0x4b12 <_ZN11EthernetUDP4readEPhj>
    42dc:	8b 89       	ldd	r24, Y+19	; 0x13
            if ((len & LABEL_COMPRESSION_MASK) == 0)
    42de:	98 2f       	mov	r25, r24
    42e0:	90 7c       	andi	r25, 0xC0	; 192
    42e2:	59 f4       	brne	.+22     	; 0x42fa <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1be>
            {
                // It's just a normal label
                if (len > 0)
    42e4:	88 23       	and	r24, r24
    42e6:	79 f0       	breq	.+30     	; 0x4306 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1ca>
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
    42e8:	8b 89       	ldd	r24, Y+19	; 0x13
    42ea:	9f ef       	ldi	r25, 0xFF	; 255
    42ec:	98 0f       	add	r25, r24
    42ee:	9b 8b       	std	Y+19, r25	; 0x13
    42f0:	88 23       	and	r24, r24
    42f2:	31 f0       	breq	.+12     	; 0x4300 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1c4>
                    {
                        iUdp.read(); // we don't care about the returned byte
    42f4:	c8 01       	movw	r24, r16
    42f6:	e5 d3       	rcall	.+1994   	; 0x4ac2 <_ZN11EthernetUDP4readEv>
                if (len > 0)
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
    42f8:	f7 cf       	rjmp	.-18     	; 0x42e8 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1ac>
                // says that a name is either a sequence of labels ended with a
                // 0 length octet or a pointer or a sequence of labels ending in
                // a pointer.  Either way, when we get here we're at the end of
                // the name
                // Skip over the pointer
                iUdp.read(); // we don't care about the returned byte
    42fa:	c8 01       	movw	r24, r16
    42fc:	e2 d3       	rcall	.+1988   	; 0x4ac2 <_ZN11EthernetUDP4readEv>
    42fe:	1b 8a       	std	Y+19, r1	; 0x13
                // And set len so that we drop out of the name loop
                len = 0;
    4300:	8b 89       	ldd	r24, Y+19	; 0x13
            }
        } while (len != 0);
    4302:	81 11       	cpse	r24, r1
    4304:	e4 cf       	rjmp	.-56     	; 0x42ce <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x192>

        // Check the type and class
        uint16_t answerType;
        uint16_t answerClass;
        iUdp.read((uint8_t*)&answerType, sizeof(answerType));
    4306:	42 e0       	ldi	r20, 0x02	; 2
    4308:	50 e0       	ldi	r21, 0x00	; 0
    430a:	be 01       	movw	r22, r28
    430c:	61 5f       	subi	r22, 0xF1	; 241
    430e:	7f 4f       	sbci	r23, 0xFF	; 255
        iUdp.read((uint8_t*)&answerClass, sizeof(answerClass));
    4310:	c8 01       	movw	r24, r16
    4312:	ff d3       	rcall	.+2046   	; 0x4b12 <_ZN11EthernetUDP4readEPhj>
    4314:	42 e0       	ldi	r20, 0x02	; 2
    4316:	50 e0       	ldi	r21, 0x00	; 0
    4318:	be 01       	movw	r22, r28
    431a:	63 5f       	subi	r22, 0xF3	; 243
    431c:	7f 4f       	sbci	r23, 0xFF	; 255

        // Ignore the Time-To-Live as we don't do any caching
        for (int i =0; i < TTL_SIZE; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    431e:	c8 01       	movw	r24, r16
    4320:	f8 d3       	rcall	.+2032   	; 0x4b12 <_ZN11EthernetUDP4readEPhj>
    4322:	c8 01       	movw	r24, r16
    4324:	ce d3       	rcall	.+1948   	; 0x4ac2 <_ZN11EthernetUDP4readEv>
    4326:	c8 01       	movw	r24, r16
    4328:	cc d3       	rcall	.+1944   	; 0x4ac2 <_ZN11EthernetUDP4readEv>
    432a:	c8 01       	movw	r24, r16
    432c:	ca d3       	rcall	.+1940   	; 0x4ac2 <_ZN11EthernetUDP4readEv>
    432e:	c8 01       	movw	r24, r16
    4330:	c8 d3       	rcall	.+1936   	; 0x4ac2 <_ZN11EthernetUDP4readEv>
    4332:	42 e0       	ldi	r20, 0x02	; 2
    4334:	50 e0       	ldi	r21, 0x00	; 0
        }

        // And read out the length of this answer
        // Don't need header_flags anymore, so we can reuse it here
        iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));
    4336:	be 01       	movw	r22, r28
    4338:	6f 5e       	subi	r22, 0xEF	; 239
    433a:	7f 4f       	sbci	r23, 0xFF	; 255
    433c:	c8 01       	movw	r24, r16
    433e:	e9 d3       	rcall	.+2002   	; 0x4b12 <_ZN11EthernetUDP4readEPhj>
    4340:	8f 85       	ldd	r24, Y+15	; 0x0f
    4342:	98 89       	ldd	r25, Y+16	; 0x10
    4344:	81 15       	cp	r24, r1

        if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) )
    4346:	91 40       	sbci	r25, 0x01	; 1
    4348:	49 f4       	brne	.+18     	; 0x435c <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x220>
    434a:	ed 84       	ldd	r14, Y+13	; 0x0d
    434c:	fe 84       	ldd	r15, Y+14	; 0x0e
    434e:	fe 24       	eor	r15, r14
    4350:	ef 24       	eor	r14, r15
    4352:	fe 24       	eor	r15, r14
    4354:	81 e0       	ldi	r24, 0x01	; 1
    4356:	e8 16       	cp	r14, r24
    4358:	f1 04       	cpc	r15, r1
    435a:	19 f0       	breq	.+6      	; 0x4362 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x226>
    435c:	e1 2c       	mov	r14, r1
    435e:	f1 2c       	mov	r15, r1
    4360:	14 c0       	rjmp	.+40     	; 0x438a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x24e>
    4362:	89 89       	ldd	r24, Y+17	; 0x11
        {
            if (htons(header_flags) != 4)
    4364:	9a 89       	ldd	r25, Y+18	; 0x12
    4366:	81 15       	cp	r24, r1
    4368:	94 40       	sbci	r25, 0x04	; 4
    436a:	39 f0       	breq	.+14     	; 0x437a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x23e>
    436c:	c8 01       	movw	r24, r16
            {
                // It's a weird size
                // Mark the entire packet as read
                iUdp.flush();
    436e:	66 d3       	rcall	.+1740   	; 0x4a3c <_ZN11EthernetUDP5flushEv>
    4370:	47 ef       	ldi	r20, 0xF7	; 247
                return -9;//INVALID_RESPONSE;
    4372:	e4 2e       	mov	r14, r20
    4374:	ff 24       	eor	r15, r15
    4376:	fa 94       	dec	r15
    4378:	28 c0       	rjmp	.+80     	; 0x43ca <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    437a:	b1 01       	movw	r22, r2

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    437c:	6e 5f       	subi	r22, 0xFE	; 254
    437e:	7f 4f       	sbci	r23, 0xFF	; 255
    4380:	44 e0       	ldi	r20, 0x04	; 4
            }
            iUdp.read(aAddress.raw_address(), 4);
    4382:	50 e0       	ldi	r21, 0x00	; 0
    4384:	c8 01       	movw	r24, r16
    4386:	c5 d3       	rcall	.+1930   	; 0x4b12 <_ZN11EthernetUDP4readEPhj>
    4388:	20 c0       	rjmp	.+64     	; 0x43ca <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
            return SUCCESS;
    438a:	89 89       	ldd	r24, Y+17	; 0x11
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    438c:	9a 89       	ldd	r25, Y+18	; 0x12
    438e:	98 27       	eor	r25, r24
    4390:	89 27       	eor	r24, r25
    4392:	98 27       	eor	r25, r24
    4394:	e8 16       	cp	r14, r24
    4396:	f9 06       	cpc	r15, r25
    4398:	30 f4       	brcc	.+12     	; 0x43a6 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x26a>
    439a:	c8 01       	movw	r24, r16
            {
                iUdp.read(); // we don't care about the returned byte
    439c:	92 d3       	rcall	.+1828   	; 0x4ac2 <_ZN11EthernetUDP4readEv>
    439e:	ff ef       	ldi	r31, 0xFF	; 255
    43a0:	ef 1a       	sub	r14, r31
            return SUCCESS;
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    43a2:	ff 0a       	sbc	r15, r31
    43a4:	f2 cf       	rjmp	.-28     	; 0x438a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x24e>
    43a6:	2f ef       	ldi	r18, 0xFF	; 255
    43a8:	a2 1a       	sub	r10, r18
    // Now we're up to the bit we're interested in, the answer
    // There might be more than one answer (although we'll just use the first
    // type A answer) and some authority and additional resource records but
    // we're going to ignore all of them.

    for (uint16_t i =0; i < answerCount; i++)
    43aa:	b2 0a       	sbc	r11, r18
    43ac:	ca 14       	cp	r12, r10
    43ae:	db 04       	cpc	r13, r11
    43b0:	09 f0       	breq	.+2      	; 0x43b4 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x278>
    43b2:	8d cf       	rjmp	.-230    	; 0x42ce <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x192>
    43b4:	c8 01       	movw	r24, r16
    43b6:	42 d3       	rcall	.+1668   	; 0x4a3c <_ZN11EthernetUDP5flushEv>
            }
        }
    }

    // Mark the entire packet as read
    iUdp.flush();
    43b8:	36 ef       	ldi	r19, 0xF6	; 246
    43ba:	e3 2e       	mov	r14, r19
    43bc:	ff 24       	eor	r15, r15

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
    43be:	fa 94       	dec	r15
    43c0:	04 c0       	rjmp	.+8      	; 0x43ca <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    43c2:	8d ef       	ldi	r24, 0xFD	; 253
    43c4:	e8 2e       	mov	r14, r24
    43c6:	ff 24       	eor	r15, r15
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    {
        return TRUNCATED;
    43c8:	fa 94       	dec	r15
    43ca:	c7 01       	movw	r24, r14
    43cc:	63 96       	adiw	r28, 0x13	; 19
    43ce:	0f b6       	in	r0, 0x3f	; 63
    // Mark the entire packet as read
    iUdp.flush();

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
}
    43d0:	f8 94       	cli
    43d2:	de bf       	out	0x3e, r29	; 62
    43d4:	0f be       	out	0x3f, r0	; 63
    43d6:	cd bf       	out	0x3d, r28	; 61
    43d8:	df 91       	pop	r29
    43da:	cf 91       	pop	r28
    43dc:	1f 91       	pop	r17
    43de:	0f 91       	pop	r16
    43e0:	ff 90       	pop	r15
    43e2:	ef 90       	pop	r14
    43e4:	df 90       	pop	r13
    43e6:	cf 90       	pop	r12
    43e8:	bf 90       	pop	r11
    43ea:	af 90       	pop	r10
    43ec:	9f 90       	pop	r9
    43ee:	8f 90       	pop	r8
    43f0:	7f 90       	pop	r7
    43f2:	6f 90       	pop	r6
    43f4:	5f 90       	pop	r5
    43f6:	4f 90       	pop	r4
    43f8:	3f 90       	pop	r3
    43fa:	2f 90       	pop	r2
    43fc:	08 95       	ret

000043fe <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>:
    43fe:	8f 92       	push	r8
    4400:	9f 92       	push	r9
    4402:	af 92       	push	r10
        return 0;
    }
}

int DNSClient::getHostByName(const char* aHostname, IPAddress& aResult)
{
    4404:	bf 92       	push	r11
    4406:	cf 92       	push	r12
    4408:	df 92       	push	r13
    440a:	ef 92       	push	r14
    440c:	ff 92       	push	r15
    440e:	0f 93       	push	r16
    4410:	1f 93       	push	r17
    4412:	cf 93       	push	r28
    4414:	df 93       	push	r29
    4416:	00 d0       	rcall	.+0      	; 0x4418 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x1a>
    4418:	00 d0       	rcall	.+0      	; 0x441a <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x1c>
    441a:	00 d0       	rcall	.+0      	; 0x441c <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x1e>
    441c:	cd b7       	in	r28, 0x3d	; 61
    441e:	de b7       	in	r29, 0x3e	; 62
    4420:	7c 01       	movw	r14, r24
    4422:	4b 01       	movw	r8, r22
    4424:	5a 01       	movw	r10, r20
    int ret =0;

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
    4426:	9e dd       	rcall	.-1220   	; 0x3f64 <_ZN9DNSClient9inet_atonEPKcR9IPAddress>
    4428:	8c 01       	movw	r16, r24
    442a:	89 2b       	or	r24, r25
    442c:	09 f0       	breq	.+2      	; 0x4430 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x32>
    442e:	57 c0       	rjmp	.+174    	; 0x44de <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xe0>
        // It is, our work here is done
        return 1;
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    4430:	f7 01       	movw	r30, r14
    4432:	42 81       	ldd	r20, Z+2	; 0x02
    4434:	53 81       	ldd	r21, Z+3	; 0x03
    4436:	64 81       	ldd	r22, Z+4	; 0x04
    4438:	75 81       	ldd	r23, Z+5	; 0x05
    443a:	80 91 9e 0b 	lds	r24, 0x0B9E	; 0x800b9e <_ZL11INADDR_NONE+0x2>
    443e:	90 91 9f 0b 	lds	r25, 0x0B9F	; 0x800b9f <_ZL11INADDR_NONE+0x3>
    4442:	a0 91 a0 0b 	lds	r26, 0x0BA0	; 0x800ba0 <_ZL11INADDR_NONE+0x4>
    4446:	b0 91 a1 0b 	lds	r27, 0x0BA1	; 0x800ba1 <_ZL11INADDR_NONE+0x5>
    444a:	48 17       	cp	r20, r24
    444c:	59 07       	cpc	r21, r25
    444e:	6a 07       	cpc	r22, r26
    4450:	7b 07       	cpc	r23, r27
    4452:	09 f4       	brne	.+2      	; 0x4456 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x58>
    4454:	47 c0       	rjmp	.+142    	; 0x44e4 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xe6>
    {
        return INVALID_SERVER;
    }
	
    // Find a socket to use
    if (iUdp.begin(1024+(millis() & 0xF)) == 1)
    4456:	0e 94 c8 35 	call	0x6b90	; 0x6b90 <millis>
    445a:	67 01       	movw	r12, r14
    445c:	f8 e0       	ldi	r31, 0x08	; 8
    445e:	cf 0e       	add	r12, r31
    4460:	d1 1c       	adc	r13, r1
    4462:	6f 70       	andi	r22, 0x0F	; 15
    4464:	77 27       	eor	r23, r23
    4466:	7c 5f       	subi	r23, 0xFC	; 252
    4468:	c6 01       	movw	r24, r12
    446a:	89 d3       	rcall	.+1810   	; 0x4b7e <_ZN11EthernetUDP5beginEj>
    446c:	81 30       	cpi	r24, 0x01	; 1
    446e:	09 f0       	breq	.+2      	; 0x4472 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x74>
    4470:	3b c0       	rjmp	.+118    	; 0x44e8 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xea>
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    4472:	87 ee       	ldi	r24, 0xE7	; 231
    4474:	99 e0       	ldi	r25, 0x09	; 9
    4476:	9a 83       	std	Y+2, r25	; 0x02
    4478:	89 83       	std	Y+1, r24	; 0x01
    447a:	f7 01       	movw	r30, r14
    447c:	82 81       	ldd	r24, Z+2	; 0x02
    447e:	93 81       	ldd	r25, Z+3	; 0x03
    4480:	a4 81       	ldd	r26, Z+4	; 0x04
    4482:	b5 81       	ldd	r27, Z+5	; 0x05
    4484:	8b 83       	std	Y+3, r24	; 0x03
    4486:	9c 83       	std	Y+4, r25	; 0x04
    4488:	ad 83       	std	Y+5, r26	; 0x05
    448a:	be 83       	std	Y+6, r27	; 0x06
        // Try up to three times
        int retries = 0;
//        while ((retries < 3) && (ret <= 0))
        {
            // Send DNS request
            ret = iUdp.beginPacket(iDNSServer, DNS_PORT);
    448c:	45 e3       	ldi	r20, 0x35	; 53
    448e:	50 e0       	ldi	r21, 0x00	; 0
    4490:	be 01       	movw	r22, r28
    4492:	6f 5f       	subi	r22, 0xFF	; 255
    4494:	7f 4f       	sbci	r23, 0xFF	; 255
    4496:	c6 01       	movw	r24, r12
    4498:	f7 d2       	rcall	.+1518   	; 0x4a88 <_ZN11EthernetUDP11beginPacketE9IPAddressj>
            if (ret != 0)
    449a:	89 2b       	or	r24, r25
    449c:	19 f4       	brne	.+6      	; 0x44a4 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xa6>
    449e:	00 e0       	ldi	r16, 0x00	; 0
    44a0:	10 e0       	ldi	r17, 0x00	; 0
            {
                // Now output the request data
                ret = BuildRequest(aHostname);
    44a2:	1a c0       	rjmp	.+52     	; 0x44d8 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xda>
    44a4:	b4 01       	movw	r22, r8
    44a6:	c7 01       	movw	r24, r14
                if (ret != 0)
    44a8:	a8 dd       	rcall	.-1200   	; 0x3ffa <_ZN9DNSClient12BuildRequestEPKc>
    44aa:	89 2b       	or	r24, r25
                {
                    // And finally send the request
                    ret = iUdp.endPacket();
    44ac:	c1 f3       	breq	.-16     	; 0x449e <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xa0>
    44ae:	c6 01       	movw	r24, r12
    44b0:	f2 d2       	rcall	.+1508   	; 0x4a96 <_ZN11EthernetUDP9endPacketEv>
                    if (ret != 0)
    44b2:	89 2b       	or	r24, r25
    44b4:	a1 f3       	breq	.-24     	; 0x449e <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xa0>
    44b6:	83 e0       	ldi	r24, 0x03	; 3
    44b8:	88 2e       	mov	r8, r24
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
                        {
                            ret = ProcessResponse(5000, aResult);
    44ba:	91 2c       	mov	r9, r1
    44bc:	a5 01       	movw	r20, r10
    44be:	68 e8       	ldi	r22, 0x88	; 136
    44c0:	73 e1       	ldi	r23, 0x13	; 19
    44c2:	c7 01       	movw	r24, r14
    44c4:	3b de       	rcall	.-906    	; 0x413c <_ZN9DNSClient15ProcessResponseEjR9IPAddress>
    44c6:	8c 01       	movw	r16, r24
    44c8:	21 e0       	ldi	r18, 0x01	; 1
    44ca:	82 1a       	sub	r8, r18
    44cc:	91 08       	sbc	r9, r1
                    if (ret != 0)
                    {
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
    44ce:	21 f0       	breq	.+8      	; 0x44d8 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xda>
    44d0:	0f 3f       	cpi	r16, 0xFF	; 255
    44d2:	ff ef       	ldi	r31, 0xFF	; 255
    44d4:	1f 07       	cpc	r17, r31
            }
            retries++;
        }

        // We're done with the socket now
        iUdp.stop();
    44d6:	91 f3       	breq	.-28     	; 0x44bc <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xbe>
    44d8:	c6 01       	movw	r24, r12
    44da:	c2 d2       	rcall	.+1412   	; 0x4a60 <_ZN11EthernetUDP4stopEv>
    44dc:	05 c0       	rjmp	.+10     	; 0x44e8 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xea>

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
    {
        // It is, our work here is done
        return 1;
    44de:	01 e0       	ldi	r16, 0x01	; 1
    44e0:	10 e0       	ldi	r17, 0x00	; 0
    44e2:	02 c0       	rjmp	.+4      	; 0x44e8 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xea>
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    {
        return INVALID_SERVER;
    44e4:	0e ef       	ldi	r16, 0xFE	; 254
    44e6:	1f ef       	ldi	r17, 0xFF	; 255
        // We're done with the socket now
        iUdp.stop();
    }

    return ret;
}
    44e8:	c8 01       	movw	r24, r16
    44ea:	26 96       	adiw	r28, 0x06	; 6
    44ec:	0f b6       	in	r0, 0x3f	; 63
    44ee:	f8 94       	cli
    44f0:	de bf       	out	0x3e, r29	; 62
    44f2:	0f be       	out	0x3f, r0	; 63
    44f4:	cd bf       	out	0x3d, r28	; 61
    44f6:	df 91       	pop	r29
    44f8:	cf 91       	pop	r28
    44fa:	1f 91       	pop	r17
    44fc:	0f 91       	pop	r16
    44fe:	ff 90       	pop	r15
    4500:	ef 90       	pop	r14
    4502:	df 90       	pop	r13
    4504:	cf 90       	pop	r12
    4506:	bf 90       	pop	r11
    4508:	af 90       	pop	r10
    450a:	9f 90       	pop	r9
    450c:	8f 90       	pop	r8
    450e:	08 95       	ret

00004510 <_ZN10W5500Class8writeGAREPh>:
    return _dnsDomainName;
}

char* EthernetClass::hostName(){
    return _hostName;
}
    4510:	24 e0       	ldi	r18, 0x04	; 4
    4512:	30 e0       	ldi	r19, 0x00	; 0
    4514:	ac 01       	movw	r20, r24
    4516:	64 e0       	ldi	r22, 0x04	; 4
    4518:	81 e0       	ldi	r24, 0x01	; 1
    451a:	90 e0       	ldi	r25, 0x00	; 0
    451c:	35 c6       	rjmp	.+3178   	; 0x5188 <_ZN10W5500Class5writeEjhPKhj>

0000451e <_ZN10W5500Class9writeSUBREPh>:
    451e:	24 e0       	ldi	r18, 0x04	; 4
    4520:	30 e0       	ldi	r19, 0x00	; 0
    4522:	ac 01       	movw	r20, r24
    4524:	64 e0       	ldi	r22, 0x04	; 4
    4526:	85 e0       	ldi	r24, 0x05	; 5
    4528:	90 e0       	ldi	r25, 0x00	; 0
    452a:	2e c6       	rjmp	.+3164   	; 0x5188 <_ZN10W5500Class5writeEjhPKhj>

0000452c <_ZN10W5500Class9writeSHAREPh>:
    452c:	26 e0       	ldi	r18, 0x06	; 6
    452e:	30 e0       	ldi	r19, 0x00	; 0
    4530:	ac 01       	movw	r20, r24
    4532:	64 e0       	ldi	r22, 0x04	; 4
    4534:	89 e0       	ldi	r24, 0x09	; 9
    4536:	90 e0       	ldi	r25, 0x00	; 0
    4538:	27 c6       	rjmp	.+3150   	; 0x5188 <_ZN10W5500Class5writeEjhPKhj>

0000453a <_ZN10W5500Class9writeSIPREPh>:
    453a:	24 e0       	ldi	r18, 0x04	; 4
    453c:	30 e0       	ldi	r19, 0x00	; 0
    453e:	ac 01       	movw	r20, r24
    4540:	64 e0       	ldi	r22, 0x04	; 4
    4542:	8f e0       	ldi	r24, 0x0F	; 15
    4544:	90 e0       	ldi	r25, 0x00	; 0
    4546:	20 c6       	rjmp	.+3136   	; 0x5188 <_ZN10W5500Class5writeEjhPKhj>

00004548 <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_>:
    4548:	8f 92       	push	r8
    454a:	9f 92       	push	r9
    454c:	af 92       	push	r10
    454e:	bf 92       	push	r11
    4550:	cf 92       	push	r12
    4552:	df 92       	push	r13
    4554:	ef 92       	push	r14
    4556:	ff 92       	push	r15
    4558:	0f 93       	push	r16
    455a:	1f 93       	push	r17
    455c:	cf 93       	push	r28
    455e:	df 93       	push	r29
    4560:	4c 01       	movw	r8, r24
    4562:	5b 01       	movw	r10, r22
    4564:	6a 01       	movw	r12, r20
    4566:	e9 01       	movw	r28, r18
    4568:	fc 01       	movw	r30, r24
    456a:	64 85       	ldd	r22, Z+12	; 0x0c
    456c:	8c ed       	ldi	r24, 0xDC	; 220
    456e:	9b e0       	ldi	r25, 0x0B	; 11
    4570:	53 d6       	rcall	.+3238   	; 0x5218 <_ZN10W5500Class4initEh>
    4572:	c5 01       	movw	r24, r10
    4574:	db df       	rcall	.-74     	; 0x452c <_ZN10W5500Class9writeSHAREPh>
    4576:	c6 01       	movw	r24, r12
    4578:	02 96       	adiw	r24, 0x02	; 2
    457a:	df df       	rcall	.-66     	; 0x453a <_ZN10W5500Class9writeSIPREPh>
    457c:	c8 01       	movw	r24, r16
    457e:	02 96       	adiw	r24, 0x02	; 2
    4580:	c7 df       	rcall	.-114    	; 0x4510 <_ZN10W5500Class8writeGAREPh>
    4582:	c7 01       	movw	r24, r14
    4584:	02 96       	adiw	r24, 0x02	; 2
    4586:	cb df       	rcall	.-106    	; 0x451e <_ZN10W5500Class9writeSUBREPh>
    4588:	8a 81       	ldd	r24, Y+2	; 0x02
    458a:	9b 81       	ldd	r25, Y+3	; 0x03
    458c:	ac 81       	ldd	r26, Y+4	; 0x04
    458e:	bd 81       	ldd	r27, Y+5	; 0x05
    4590:	f4 01       	movw	r30, r8
    4592:	82 83       	std	Z+2, r24	; 0x02
    4594:	93 83       	std	Z+3, r25	; 0x03
    4596:	a4 83       	std	Z+4, r26	; 0x04
    4598:	b5 83       	std	Z+5, r27	; 0x05
    459a:	df 91       	pop	r29
    459c:	cf 91       	pop	r28
    459e:	1f 91       	pop	r17
    45a0:	0f 91       	pop	r16
    45a2:	ff 90       	pop	r15
    45a4:	ef 90       	pop	r14
    45a6:	df 90       	pop	r13
    45a8:	cf 90       	pop	r12
    45aa:	bf 90       	pop	r11
    45ac:	af 90       	pop	r10
    45ae:	9f 90       	pop	r9
    45b0:	8f 90       	pop	r8
    45b2:	08 95       	ret

000045b4 <_ZN13EthernetClass11dnsServerIPEv>:
    45b4:	27 ee       	ldi	r18, 0xE7	; 231
    45b6:	39 e0       	ldi	r19, 0x09	; 9
    45b8:	fc 01       	movw	r30, r24
    45ba:	31 83       	std	Z+1, r19	; 0x01
    45bc:	20 83       	st	Z, r18
    45be:	fb 01       	movw	r30, r22
    45c0:	42 81       	ldd	r20, Z+2	; 0x02
    45c2:	53 81       	ldd	r21, Z+3	; 0x03
    45c4:	64 81       	ldd	r22, Z+4	; 0x04
    45c6:	75 81       	ldd	r23, Z+5	; 0x05
    45c8:	fc 01       	movw	r30, r24
    45ca:	42 83       	std	Z+2, r20	; 0x02
    45cc:	53 83       	std	Z+3, r21	; 0x03
    45ce:	64 83       	std	Z+4, r22	; 0x04
    45d0:	75 83       	std	Z+5, r23	; 0x05
    45d2:	08 95       	ret

000045d4 <_GLOBAL__sub_I__ZN13EthernetClass6_stateE>:

EthernetClass Ethernet;
    45d4:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    45d6:	00 e0       	ldi	r16, 0x00	; 0
    45d8:	20 e0       	ldi	r18, 0x00	; 0
    45da:	40 e0       	ldi	r20, 0x00	; 0
    45dc:	60 e0       	ldi	r22, 0x00	; 0
    45de:	8f eb       	ldi	r24, 0xBF	; 191
    45e0:	9b e0       	ldi	r25, 0x0B	; 11
    45e2:	0e 94 42 34 	call	0x6884	; 0x6884 <_ZN9IPAddressC1Ehhhh>
  uint8_t w5500_cspin;

  static uint8_t _state[MAX_SOCK_NUM];
  static uint16_t _server_port[MAX_SOCK_NUM];

  EthernetClass() { _dhcp = NULL; w5500_cspin = 10; }
    45e6:	82 ea       	ldi	r24, 0xA2	; 162
    45e8:	9b e0       	ldi	r25, 0x0B	; 11
    45ea:	0e 94 38 34 	call	0x6870	; 0x6870 <_ZN9IPAddressC1Ev>
    45ee:	e2 ea       	ldi	r30, 0xA2	; 162
    45f0:	fb e0       	ldi	r31, 0x0B	; 11
    45f2:	13 86       	std	Z+11, r1	; 0x0b
    45f4:	12 86       	std	Z+10, r1	; 0x0a
    45f6:	8a e0       	ldi	r24, 0x0A	; 10
    45f8:	84 87       	std	Z+12, r24	; 0x0c
    45fa:	0f 91       	pop	r16
    45fc:	08 95       	ret

000045fe <_ZN14EthernetClientneERKS_>:
uint16_t EthernetClient::_srcport = 1024;

EthernetClient::EthernetClient() : _sock(MAX_SOCK_NUM) {
}

EthernetClient::EthernetClient(uint8_t sock) : _sock(sock) {
    45fe:	dc 01       	movw	r26, r24
    4600:	ed 91       	ld	r30, X+
    4602:	fc 91       	ld	r31, X
    4604:	02 8c       	ldd	r0, Z+26	; 0x1a
    4606:	f3 8d       	ldd	r31, Z+27	; 0x1b
    4608:	e0 2d       	mov	r30, r0
    460a:	09 95       	icall
    460c:	91 e0       	ldi	r25, 0x01	; 1
    460e:	89 27       	eor	r24, r25
    4610:	08 95       	ret

00004612 <_ZN14EthernetClient5writeEh>:
    4612:	cf 93       	push	r28
    4614:	df 93       	push	r29
    4616:	1f 92       	push	r1
    4618:	cd b7       	in	r28, 0x3d	; 61
    461a:	de b7       	in	r29, 0x3e	; 62
    461c:	69 83       	std	Y+1, r22	; 0x01
    461e:	dc 01       	movw	r26, r24
    4620:	ed 91       	ld	r30, X+
    4622:	fc 91       	ld	r31, X
    4624:	02 80       	ldd	r0, Z+2	; 0x02
    4626:	f3 81       	ldd	r31, Z+3	; 0x03
    4628:	e0 2d       	mov	r30, r0
    462a:	41 e0       	ldi	r20, 0x01	; 1
    462c:	50 e0       	ldi	r21, 0x00	; 0
    462e:	be 01       	movw	r22, r28
    4630:	6f 5f       	subi	r22, 0xFF	; 255
    4632:	7f 4f       	sbci	r23, 0xFF	; 255
    4634:	09 95       	icall
    4636:	0f 90       	pop	r0
    4638:	df 91       	pop	r29
    463a:	cf 91       	pop	r28
    463c:	08 95       	ret

0000463e <_ZN14EthernetClientcvbEv>:
    463e:	21 e0       	ldi	r18, 0x01	; 1
    4640:	fc 01       	movw	r30, r24
    4642:	84 85       	ldd	r24, Z+12	; 0x0c
    4644:	88 30       	cpi	r24, 0x08	; 8
    4646:	09 f4       	brne	.+2      	; 0x464a <_ZN14EthernetClientcvbEv+0xc>
    4648:	20 e0       	ldi	r18, 0x00	; 0
    464a:	82 2f       	mov	r24, r18
    464c:	08 95       	ret

0000464e <_ZN14EthernetClienteqERKS_>:
    464e:	fc 01       	movw	r30, r24
    4650:	94 85       	ldd	r25, Z+12	; 0x0c
    4652:	fb 01       	movw	r30, r22
    4654:	84 85       	ldd	r24, Z+12	; 0x0c
    4656:	98 13       	cpse	r25, r24
    4658:	03 c0       	rjmp	.+6      	; 0x4660 <_ZN14EthernetClienteqERKS_+0x12>
    465a:	81 e0       	ldi	r24, 0x01	; 1
    465c:	98 30       	cpi	r25, 0x08	; 8
    465e:	09 f4       	brne	.+2      	; 0x4662 <_ZN14EthernetClienteqERKS_+0x14>
    4660:	80 e0       	ldi	r24, 0x00	; 0
    4662:	08 95       	ret

00004664 <_ZN14EthernetClient7connectEPKcj>:
    4664:	cf 92       	push	r12
    4666:	df 92       	push	r13
    4668:	ef 92       	push	r14
    466a:	ff 92       	push	r15
    466c:	0f 93       	push	r16
    466e:	1f 93       	push	r17
    4670:	cf 93       	push	r28
    4672:	df 93       	push	r29
    4674:	cd b7       	in	r28, 0x3d	; 61
    4676:	de b7       	in	r29, 0x3e	; 62
    4678:	af 97       	sbiw	r28, 0x2f	; 47
    467a:	0f b6       	in	r0, 0x3f	; 63
    467c:	f8 94       	cli
    467e:	de bf       	out	0x3e, r29	; 62
    4680:	0f be       	out	0x3f, r0	; 63
    4682:	cd bf       	out	0x3d, r28	; 61
    4684:	8c 01       	movw	r16, r24
    4686:	6b 01       	movw	r12, r22
    4688:	7a 01       	movw	r14, r20
    468a:	ce 01       	movw	r24, r28
    468c:	01 96       	adiw	r24, 0x01	; 1
    468e:	0e 94 38 34 	call	0x6870	; 0x6870 <_ZN9IPAddressC1Ev>
    4692:	ce 01       	movw	r24, r28
    4694:	09 96       	adiw	r24, 0x09	; 9
    4696:	f3 d2       	rcall	.+1510   	; 0x4c7e <_ZN11EthernetUDPC1Ev>
    4698:	ce 01       	movw	r24, r28
    469a:	8a 96       	adiw	r24, 0x2a	; 42
    469c:	0e 94 38 34 	call	0x6870	; 0x6870 <_ZN9IPAddressC1Ev>
    46a0:	62 ea       	ldi	r22, 0xA2	; 162
    46a2:	7b e0       	ldi	r23, 0x0B	; 11
    46a4:	ce 01       	movw	r24, r28
    46a6:	84 96       	adiw	r24, 0x24	; 36
    46a8:	85 df       	rcall	.-246    	; 0x45b4 <_ZN13EthernetClass11dnsServerIPEv>
    46aa:	be 01       	movw	r22, r28
    46ac:	6c 5d       	subi	r22, 0xDC	; 220
    46ae:	7f 4f       	sbci	r23, 0xFF	; 255
    46b0:	ce 01       	movw	r24, r28
    46b2:	01 96       	adiw	r24, 0x01	; 1
    46b4:	4a dc       	rcall	.-1900   	; 0x3f4a <_ZN9DNSClient5beginERK9IPAddress>
    46b6:	ae 01       	movw	r20, r28
    46b8:	46 5d       	subi	r20, 0xD6	; 214
    46ba:	5f 4f       	sbci	r21, 0xFF	; 255
    46bc:	b6 01       	movw	r22, r12
    46be:	ce 01       	movw	r24, r28
    46c0:	01 96       	adiw	r24, 0x01	; 1
    46c2:	9d de       	rcall	.-710    	; 0x43fe <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>
    46c4:	81 30       	cpi	r24, 0x01	; 1
    46c6:	91 05       	cpc	r25, r1
    46c8:	c1 f4       	brne	.+48     	; 0x46fa <_ZN14EthernetClient7connectEPKcj+0x96>
    46ca:	d8 01       	movw	r26, r16
    46cc:	ed 91       	ld	r30, X+
    46ce:	fc 91       	ld	r31, X
    46d0:	06 84       	ldd	r0, Z+14	; 0x0e
    46d2:	f7 85       	ldd	r31, Z+15	; 0x0f
    46d4:	e0 2d       	mov	r30, r0
    46d6:	87 ee       	ldi	r24, 0xE7	; 231
    46d8:	99 e0       	ldi	r25, 0x09	; 9
    46da:	9d a3       	std	Y+37, r25	; 0x25
    46dc:	8c a3       	std	Y+36, r24	; 0x24
    46de:	8c a5       	ldd	r24, Y+44	; 0x2c
    46e0:	9d a5       	ldd	r25, Y+45	; 0x2d
    46e2:	ae a5       	ldd	r26, Y+46	; 0x2e
    46e4:	bf a5       	ldd	r27, Y+47	; 0x2f
    46e6:	8e a3       	std	Y+38, r24	; 0x26
    46e8:	9f a3       	std	Y+39, r25	; 0x27
    46ea:	a8 a7       	std	Y+40, r26	; 0x28
    46ec:	b9 a7       	std	Y+41, r27	; 0x29
    46ee:	a7 01       	movw	r20, r14
    46f0:	be 01       	movw	r22, r28
    46f2:	6c 5d       	subi	r22, 0xDC	; 220
    46f4:	7f 4f       	sbci	r23, 0xFF	; 255
    46f6:	c8 01       	movw	r24, r16
    46f8:	09 95       	icall
    46fa:	af 96       	adiw	r28, 0x2f	; 47
    46fc:	0f b6       	in	r0, 0x3f	; 63
    46fe:	f8 94       	cli
    4700:	de bf       	out	0x3e, r29	; 62
    4702:	0f be       	out	0x3f, r0	; 63
    4704:	cd bf       	out	0x3d, r28	; 61
    4706:	df 91       	pop	r29
    4708:	cf 91       	pop	r28
    470a:	1f 91       	pop	r17
    470c:	0f 91       	pop	r16
    470e:	ff 90       	pop	r15
    4710:	ef 90       	pop	r14
    4712:	df 90       	pop	r13
    4714:	cf 90       	pop	r12
    4716:	08 95       	ret

00004718 <_ZN14EthernetClient5writeEPKhj>:
    4718:	0f 93       	push	r16
    471a:	1f 93       	push	r17
    471c:	cf 93       	push	r28
    471e:	df 93       	push	r29
    4720:	8c 01       	movw	r16, r24
    4722:	d4 2f       	mov	r29, r20
    4724:	c5 2f       	mov	r28, r21
    4726:	fc 01       	movw	r30, r24
    4728:	84 85       	ldd	r24, Z+12	; 0x0c
    472a:	88 30       	cpi	r24, 0x08	; 8
    472c:	41 f4       	brne	.+16     	; 0x473e <_ZN14EthernetClient5writeEPKhj+0x26>
    472e:	81 e0       	ldi	r24, 0x01	; 1
    4730:	90 e0       	ldi	r25, 0x00	; 0
    4732:	f8 01       	movw	r30, r16
    4734:	93 83       	std	Z+3, r25	; 0x03
    4736:	82 83       	std	Z+2, r24	; 0x02
    4738:	80 e0       	ldi	r24, 0x00	; 0
    473a:	90 e0       	ldi	r25, 0x00	; 0
    473c:	05 c0       	rjmp	.+10     	; 0x4748 <_ZN14EthernetClient5writeEPKhj+0x30>
    473e:	cf d3       	rcall	.+1950   	; 0x4ede <_Z4sendhPKhj>
    4740:	89 2b       	or	r24, r25
    4742:	a9 f3       	breq	.-22     	; 0x472e <_ZN14EthernetClient5writeEPKhj+0x16>
    4744:	8d 2f       	mov	r24, r29
    4746:	9c 2f       	mov	r25, r28
    4748:	df 91       	pop	r29
    474a:	cf 91       	pop	r28
    474c:	1f 91       	pop	r17
    474e:	0f 91       	pop	r16
    4750:	08 95       	ret

00004752 <_ZN14EthernetClient9availableEv>:
    4752:	fc 01       	movw	r30, r24
    4754:	64 85       	ldd	r22, Z+12	; 0x0c
    4756:	68 30       	cpi	r22, 0x08	; 8
    4758:	19 f0       	breq	.+6      	; 0x4760 <_ZN14EthernetClient9availableEv+0xe>
    475a:	8c ed       	ldi	r24, 0xDC	; 220
    475c:	9b e0       	ldi	r25, 0x0B	; 11
    475e:	d0 c5       	rjmp	.+2976   	; 0x5300 <_ZN10W5500Class17getRXReceivedSizeEh>
    4760:	80 e0       	ldi	r24, 0x00	; 0
    4762:	90 e0       	ldi	r25, 0x00	; 0
    4764:	08 95       	ret

00004766 <_ZN14EthernetClient4readEv>:
    4766:	cf 93       	push	r28
    4768:	df 93       	push	r29
    476a:	1f 92       	push	r1
    476c:	cd b7       	in	r28, 0x3d	; 61
    476e:	de b7       	in	r29, 0x3e	; 62
    4770:	41 e0       	ldi	r20, 0x01	; 1
    4772:	50 e0       	ldi	r21, 0x00	; 0
    4774:	be 01       	movw	r22, r28
    4776:	6f 5f       	subi	r22, 0xFF	; 255
    4778:	7f 4f       	sbci	r23, 0xFF	; 255
    477a:	fc 01       	movw	r30, r24
    477c:	84 85       	ldd	r24, Z+12	; 0x0c
    477e:	f7 d3       	rcall	.+2030   	; 0x4f6e <_Z4recvhPhi>
    4780:	18 16       	cp	r1, r24
    4782:	19 06       	cpc	r1, r25
    4784:	1c f4       	brge	.+6      	; 0x478c <_ZN14EthernetClient4readEv+0x26>
    4786:	89 81       	ldd	r24, Y+1	; 0x01
    4788:	90 e0       	ldi	r25, 0x00	; 0
    478a:	02 c0       	rjmp	.+4      	; 0x4790 <_ZN14EthernetClient4readEv+0x2a>
    478c:	8f ef       	ldi	r24, 0xFF	; 255
    478e:	9f ef       	ldi	r25, 0xFF	; 255
    4790:	0f 90       	pop	r0
    4792:	df 91       	pop	r29
    4794:	cf 91       	pop	r28
    4796:	08 95       	ret

00004798 <_ZN14EthernetClient4readEPhj>:
    4798:	fc 01       	movw	r30, r24
    479a:	84 85       	ldd	r24, Z+12	; 0x0c
    479c:	e8 c3       	rjmp	.+2000   	; 0x4f6e <_Z4recvhPhi>

0000479e <_ZN14EthernetClient4peekEv>:
    479e:	0f 93       	push	r16
    47a0:	1f 93       	push	r17
    47a2:	cf 93       	push	r28
    47a4:	df 93       	push	r29
    47a6:	1f 92       	push	r1
    47a8:	cd b7       	in	r28, 0x3d	; 61
    47aa:	de b7       	in	r29, 0x3e	; 62
    47ac:	8c 01       	movw	r16, r24
    47ae:	dc 01       	movw	r26, r24
    47b0:	ed 91       	ld	r30, X+
    47b2:	fc 91       	ld	r31, X
    47b4:	00 84       	ldd	r0, Z+8	; 0x08
    47b6:	f1 85       	ldd	r31, Z+9	; 0x09
    47b8:	e0 2d       	mov	r30, r0
    47ba:	09 95       	icall
    47bc:	89 2b       	or	r24, r25
    47be:	49 f0       	breq	.+18     	; 0x47d2 <_ZN14EthernetClient4peekEv+0x34>
    47c0:	be 01       	movw	r22, r28
    47c2:	6f 5f       	subi	r22, 0xFF	; 255
    47c4:	7f 4f       	sbci	r23, 0xFF	; 255
    47c6:	f8 01       	movw	r30, r16
    47c8:	84 85       	ldd	r24, Z+12	; 0x0c
    47ca:	12 d4       	rcall	.+2084   	; 0x4ff0 <_Z4peekhPh>
    47cc:	89 81       	ldd	r24, Y+1	; 0x01
    47ce:	90 e0       	ldi	r25, 0x00	; 0
    47d0:	02 c0       	rjmp	.+4      	; 0x47d6 <_ZN14EthernetClient4peekEv+0x38>
    47d2:	8f ef       	ldi	r24, 0xFF	; 255
    47d4:	9f ef       	ldi	r25, 0xFF	; 255
    47d6:	0f 90       	pop	r0
    47d8:	df 91       	pop	r29
    47da:	cf 91       	pop	r28
    47dc:	1f 91       	pop	r17
    47de:	0f 91       	pop	r16
    47e0:	08 95       	ret

000047e2 <_ZN14EthernetClient5flushEv>:
    47e2:	fc 01       	movw	r30, r24
    47e4:	84 85       	ldd	r24, Z+12	; 0x0c
    47e6:	11 c4       	rjmp	.+2082   	; 0x500a <_Z5flushh>

000047e8 <_ZN14EthernetClientC1Ev>:
    47e8:	fc 01       	movw	r30, r24
    47ea:	13 82       	std	Z+3, r1	; 0x03
    47ec:	12 82       	std	Z+2, r1	; 0x02
    47ee:	88 ee       	ldi	r24, 0xE8	; 232
    47f0:	93 e0       	ldi	r25, 0x03	; 3
    47f2:	a0 e0       	ldi	r26, 0x00	; 0
    47f4:	b0 e0       	ldi	r27, 0x00	; 0
    47f6:	84 83       	std	Z+4, r24	; 0x04
    47f8:	95 83       	std	Z+5, r25	; 0x05
    47fa:	a6 83       	std	Z+6, r26	; 0x06
    47fc:	b7 83       	std	Z+7, r27	; 0x07
    47fe:	81 e5       	ldi	r24, 0x51	; 81
    4800:	99 e0       	ldi	r25, 0x09	; 9
    4802:	91 83       	std	Z+1, r25	; 0x01
    4804:	80 83       	st	Z, r24
    4806:	88 e0       	ldi	r24, 0x08	; 8
    4808:	84 87       	std	Z+12, r24	; 0x0c
    480a:	08 95       	ret

0000480c <_ZN14EthernetClient6statusEv>:
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
}

uint8_t EthernetClient::status() {
  if (_sock == MAX_SOCK_NUM) return SnSR::CLOSED;
    480c:	fc 01       	movw	r30, r24
    480e:	64 85       	ldd	r22, Z+12	; 0x0c
    4810:	68 30       	cpi	r22, 0x08	; 8
    4812:	39 f0       	breq	.+14     	; 0x4822 <_ZN14EthernetClient6statusEv+0x16>

extern W5500Class w5500;

uint8_t W5500Class::readSn(SOCKET _s, uint16_t _addr) {
    uint8_t cntl_byte = (_s<<5)+0x08;
    return read(_addr, cntl_byte);
    4814:	62 95       	swap	r22
    4816:	66 0f       	add	r22, r22
    4818:	60 7e       	andi	r22, 0xE0	; 224
    481a:	68 5f       	subi	r22, 0xF8	; 248
    481c:	83 e0       	ldi	r24, 0x03	; 3
    481e:	90 e0       	ldi	r25, 0x00	; 0
    4820:	df c4       	rjmp	.+2494   	; 0x51e0 <_ZN10W5500Class4readEjh>
  return w5500.readSnSR(_sock);
}
    4822:	80 e0       	ldi	r24, 0x00	; 0
    4824:	08 95       	ret

00004826 <_ZN14EthernetClient9connectedEv>:

  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
    4826:	cf 93       	push	r28
    4828:	df 93       	push	r29
  if (_sock == MAX_SOCK_NUM) return 0;
    482a:	fc 01       	movw	r30, r24
    482c:	24 85       	ldd	r18, Z+12	; 0x0c
    482e:	28 30       	cpi	r18, 0x08	; 8
    4830:	c9 f0       	breq	.+50     	; 0x4864 <_ZN14EthernetClient9connectedEv+0x3e>
    4832:	ec 01       	movw	r28, r24
  
  uint8_t s = status();
    4834:	eb df       	rcall	.-42     	; 0x480c <_ZN14EthernetClient6statusEv>
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
    4836:	84 31       	cpi	r24, 0x14	; 20
    4838:	81 f0       	breq	.+32     	; 0x485a <_ZN14EthernetClient9connectedEv+0x34>

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
  
  uint8_t s = status();
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    483a:	88 23       	and	r24, r24
    483c:	71 f0       	breq	.+28     	; 0x485a <_ZN14EthernetClient9connectedEv+0x34>
    483e:	88 31       	cpi	r24, 0x18	; 24
    4840:	61 f0       	breq	.+24     	; 0x485a <_ZN14EthernetClient9connectedEv+0x34>
    (s == SnSR::CLOSE_WAIT && !available()));
    4842:	8c 31       	cpi	r24, 0x1C	; 28
    4844:	61 f4       	brne	.+24     	; 0x485e <_ZN14EthernetClient9connectedEv+0x38>
    4846:	e8 81       	ld	r30, Y
    4848:	f9 81       	ldd	r31, Y+1	; 0x01
    484a:	00 84       	ldd	r0, Z+8	; 0x08
    484c:	f1 85       	ldd	r31, Z+9	; 0x09
    484e:	e0 2d       	mov	r30, r0
    4850:	ce 01       	movw	r24, r28
    4852:	09 95       	icall
    4854:	21 e0       	ldi	r18, 0x01	; 1
    4856:	89 2b       	or	r24, r25
    4858:	19 f4       	brne	.+6      	; 0x4860 <_ZN14EthernetClient9connectedEv+0x3a>
    485a:	20 e0       	ldi	r18, 0x00	; 0
    485c:	01 c0       	rjmp	.+2      	; 0x4860 <_ZN14EthernetClient9connectedEv+0x3a>
    485e:	21 e0       	ldi	r18, 0x01	; 1
    4860:	82 2f       	mov	r24, r18
    4862:	01 c0       	rjmp	.+2      	; 0x4866 <_ZN14EthernetClient9connectedEv+0x40>
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
    4864:	80 e0       	ldi	r24, 0x00	; 0
  
  uint8_t s = status();
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
}
    4866:	df 91       	pop	r29
    4868:	cf 91       	pop	r28
    486a:	08 95       	ret

0000486c <_ZN14EthernetClient4stopEv>:

void EthernetClient::flush() {
  ::flush(_sock);
}

void EthernetClient::stop() {
    486c:	cf 92       	push	r12
    486e:	df 92       	push	r13
    4870:	ef 92       	push	r14
    4872:	ff 92       	push	r15
    4874:	cf 93       	push	r28
    4876:	df 93       	push	r29
    4878:	ec 01       	movw	r28, r24
  if (_sock == MAX_SOCK_NUM)
    487a:	8c 85       	ldd	r24, Y+12	; 0x0c
    487c:	88 30       	cpi	r24, 0x08	; 8
    487e:	69 f1       	breq	.+90     	; 0x48da <_ZN14EthernetClient4stopEv+0x6e>
    return;

  // attempt to close the connection gracefully (send a FIN to other side)
  disconnect(_sock);
    4880:	29 d3       	rcall	.+1618   	; 0x4ed4 <_Z10disconnecth>
  unsigned long start = millis();
    4882:	0e 94 c8 35 	call	0x6b90	; 0x6b90 <millis>
    4886:	6b 01       	movw	r12, r22
    4888:	7c 01       	movw	r14, r24

  // wait a second for the connection to close
  while (status() != SnSR::CLOSED && millis() - start < 1000)
    488a:	ce 01       	movw	r24, r28
    488c:	bf df       	rcall	.-130    	; 0x480c <_ZN14EthernetClient6statusEv>
    488e:	88 23       	and	r24, r24
    4890:	a1 f0       	breq	.+40     	; 0x48ba <_ZN14EthernetClient4stopEv+0x4e>
    4892:	0e 94 c8 35 	call	0x6b90	; 0x6b90 <millis>
    4896:	dc 01       	movw	r26, r24
    4898:	cb 01       	movw	r24, r22
    489a:	8c 19       	sub	r24, r12
    489c:	9d 09       	sbc	r25, r13
    489e:	ae 09       	sbc	r26, r14
    48a0:	bf 09       	sbc	r27, r15
    48a2:	88 3e       	cpi	r24, 0xE8	; 232
    48a4:	93 40       	sbci	r25, 0x03	; 3
    48a6:	a1 05       	cpc	r26, r1
    48a8:	b1 05       	cpc	r27, r1
    48aa:	38 f4       	brcc	.+14     	; 0x48ba <_ZN14EthernetClient4stopEv+0x4e>
    delay(1);
    48ac:	61 e0       	ldi	r22, 0x01	; 1
    48ae:	70 e0       	ldi	r23, 0x00	; 0
    48b0:	80 e0       	ldi	r24, 0x00	; 0
    48b2:	90 e0       	ldi	r25, 0x00	; 0
    48b4:	0e 94 f9 35 	call	0x6bf2	; 0x6bf2 <delay>

  // if it hasn't closed, close it forcefully
  if (status() != SnSR::CLOSED)
    48b8:	e8 cf       	rjmp	.-48     	; 0x488a <_ZN14EthernetClient4stopEv+0x1e>
    48ba:	ce 01       	movw	r24, r28
    48bc:	a7 df       	rcall	.-178    	; 0x480c <_ZN14EthernetClient6statusEv>
    48be:	88 23       	and	r24, r24
    close(_sock);
    48c0:	11 f0       	breq	.+4      	; 0x48c6 <_ZN14EthernetClient4stopEv+0x5a>
    48c2:	8c 85       	ldd	r24, Y+12	; 0x0c
    48c4:	96 d2       	rcall	.+1324   	; 0x4df2 <_Z5closeh>

  EthernetClass::_server_port[_sock] = 0;
    48c6:	ec 85       	ldd	r30, Y+12	; 0x0c
    48c8:	f0 e0       	ldi	r31, 0x00	; 0
    48ca:	ee 0f       	add	r30, r30
    48cc:	ff 1f       	adc	r31, r31
    48ce:	e1 55       	subi	r30, 0x51	; 81
    48d0:	f4 4f       	sbci	r31, 0xF4	; 244
    48d2:	11 82       	std	Z+1, r1	; 0x01
    48d4:	10 82       	st	Z, r1
  _sock = MAX_SOCK_NUM;
    48d6:	88 e0       	ldi	r24, 0x08	; 8
    48d8:	8c 87       	std	Y+12, r24	; 0x0c
}
    48da:	df 91       	pop	r29
    48dc:	cf 91       	pop	r28
    48de:	ff 90       	pop	r15
    48e0:	ef 90       	pop	r14
    48e2:	df 90       	pop	r13
    48e4:	cf 90       	pop	r12
    48e6:	08 95       	ret

000048e8 <_ZN14EthernetClient7connectE9IPAddressj>:
  } else {
    return ret;
  }
}

int EthernetClient::connect(IPAddress ip, uint16_t port) {
    48e8:	cf 92       	push	r12
    48ea:	df 92       	push	r13
    48ec:	ff 92       	push	r15
    48ee:	0f 93       	push	r16
    48f0:	1f 93       	push	r17
    48f2:	cf 93       	push	r28
    48f4:	df 93       	push	r29
  if (_sock != MAX_SOCK_NUM)
    48f6:	fc 01       	movw	r30, r24
    48f8:	24 85       	ldd	r18, Z+12	; 0x0c
    48fa:	28 30       	cpi	r18, 0x08	; 8
    48fc:	c1 f5       	brne	.+112    	; 0x496e <_ZN14EthernetClient7connectE9IPAddressj+0x86>
    48fe:	6a 01       	movw	r12, r20
    4900:	8b 01       	movw	r16, r22
    4902:	ec 01       	movw	r28, r24
    4904:	f1 2c       	mov	r15, r1
    4906:	6f 2d       	mov	r22, r15
    4908:	62 95       	swap	r22
    490a:	66 0f       	add	r22, r22
    490c:	60 7e       	andi	r22, 0xE0	; 224
    490e:	68 5f       	subi	r22, 0xF8	; 248
    4910:	83 e0       	ldi	r24, 0x03	; 3
    4912:	90 e0       	ldi	r25, 0x00	; 0
    4914:	65 d4       	rcall	.+2250   	; 0x51e0 <_ZN10W5500Class4readEjh>
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
    4916:	81 11       	cpse	r24, r1
    4918:	02 c0       	rjmp	.+4      	; 0x491e <_ZN14EthernetClient7connectE9IPAddressj+0x36>
      _sock = i;
    491a:	fc 86       	std	Y+12, r15	; 0x0c
    491c:	07 c0       	rjmp	.+14     	; 0x492c <_ZN14EthernetClient7connectE9IPAddressj+0x44>
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
    491e:	8b 7f       	andi	r24, 0xFB	; 251
    4920:	88 31       	cpi	r24, 0x18	; 24
    4922:	d9 f3       	breq	.-10     	; 0x491a <_ZN14EthernetClient7connectE9IPAddressj+0x32>
    4924:	f3 94       	inc	r15

int EthernetClient::connect(IPAddress ip, uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    4926:	f8 e0       	ldi	r31, 0x08	; 8
    4928:	ff 12       	cpse	r15, r31
    492a:	ed cf       	rjmp	.-38     	; 0x4906 <_ZN14EthernetClient7connectE9IPAddressj+0x1e>
      _sock = i;
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
    492c:	8c 85       	ldd	r24, Y+12	; 0x0c
    492e:	88 30       	cpi	r24, 0x08	; 8
    4930:	f1 f0       	breq	.+60     	; 0x496e <_ZN14EthernetClient7connectE9IPAddressj+0x86>
    return 0;

  _srcport++;
    4932:	20 91 5d 01 	lds	r18, 0x015D	; 0x80015d <_ZN14EthernetClient8_srcportE>
    4936:	30 91 5e 01 	lds	r19, 0x015E	; 0x80015e <_ZN14EthernetClient8_srcportE+0x1>
    493a:	2f 5f       	subi	r18, 0xFF	; 255
    493c:	3f 4f       	sbci	r19, 0xFF	; 255
  if (_srcport == 0) _srcport = 1024;
    493e:	11 f4       	brne	.+4      	; 0x4944 <_ZN14EthernetClient7connectE9IPAddressj+0x5c>
    4940:	20 e0       	ldi	r18, 0x00	; 0
    4942:	34 e0       	ldi	r19, 0x04	; 4
    4944:	30 93 5e 01 	sts	0x015E, r19	; 0x80015e <_ZN14EthernetClient8_srcportE+0x1>
    4948:	20 93 5d 01 	sts	0x015D, r18	; 0x80015d <_ZN14EthernetClient8_srcportE>
  socket(_sock, SnMR::TCP, _srcport, 0);
    494c:	40 91 5d 01 	lds	r20, 0x015D	; 0x80015d <_ZN14EthernetClient8_srcportE>
    4950:	50 91 5e 01 	lds	r21, 0x015E	; 0x80015e <_ZN14EthernetClient8_srcportE+0x1>
    4954:	20 e0       	ldi	r18, 0x00	; 0
    4956:	61 e0       	ldi	r22, 0x01	; 1
    4958:	57 d2       	rcall	.+1198   	; 0x4e08 <_Z6sockethhjh>

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    495a:	b8 01       	movw	r22, r16
    495c:	6e 5f       	subi	r22, 0xFE	; 254
    495e:	7f 4f       	sbci	r23, 0xFF	; 255

  if (!::connect(_sock, rawIPAddress(ip), port)) {
    4960:	a6 01       	movw	r20, r12
    4962:	8c 85       	ldd	r24, Y+12	; 0x0c
    4964:	84 d2       	rcall	.+1288   	; 0x4e6e <_Z7connecthPhj>
    4966:	81 11       	cpse	r24, r1
    4968:	05 c0       	rjmp	.+10     	; 0x4974 <_ZN14EthernetClient7connectE9IPAddressj+0x8c>
    _sock = MAX_SOCK_NUM;
    496a:	88 e0       	ldi	r24, 0x08	; 8
    496c:	8c 87       	std	Y+12, r24	; 0x0c
    return 0;
    496e:	80 e0       	ldi	r24, 0x00	; 0
    4970:	90 e0       	ldi	r25, 0x00	; 0
  }

  while (status() != SnSR::ESTABLISHED) {
    4972:	0f c0       	rjmp	.+30     	; 0x4992 <_ZN14EthernetClient7connectE9IPAddressj+0xaa>
    4974:	ce 01       	movw	r24, r28
    4976:	4a df       	rcall	.-364    	; 0x480c <_ZN14EthernetClient6statusEv>
    4978:	87 31       	cpi	r24, 0x17	; 23
    497a:	49 f0       	breq	.+18     	; 0x498e <_ZN14EthernetClient7connectE9IPAddressj+0xa6>
    delay(1);
    497c:	61 e0       	ldi	r22, 0x01	; 1
    497e:	70 e0       	ldi	r23, 0x00	; 0
    4980:	80 e0       	ldi	r24, 0x00	; 0
    4982:	90 e0       	ldi	r25, 0x00	; 0
    4984:	0e 94 f9 35 	call	0x6bf2	; 0x6bf2 <delay>
    if (status() == SnSR::CLOSED) {
    4988:	ce 01       	movw	r24, r28
    498a:	40 df       	rcall	.-384    	; 0x480c <_ZN14EthernetClient6statusEv>
    498c:	ec cf       	rjmp	.-40     	; 0x4966 <_ZN14EthernetClient7connectE9IPAddressj+0x7e>
      _sock = MAX_SOCK_NUM;
      return 0;
    }
  }

  return 1;
    498e:	81 e0       	ldi	r24, 0x01	; 1
    4990:	90 e0       	ldi	r25, 0x00	; 0
}
    4992:	df 91       	pop	r29
    4994:	cf 91       	pop	r28
    4996:	1f 91       	pop	r17
    4998:	0f 91       	pop	r16
    499a:	ff 90       	pop	r15
    499c:	df 90       	pop	r13
    499e:	cf 90       	pop	r12
    49a0:	08 95       	ret

000049a2 <_GLOBAL__sub_I__ZN14EthernetClient8_srcportE>:
  return _sock != MAX_SOCK_NUM;
}

bool EthernetClient::operator==(const EthernetClient& rhs) {
  return _sock == rhs._sock && _sock != MAX_SOCK_NUM && rhs._sock != MAX_SOCK_NUM;
}
    49a2:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    49a4:	00 e0       	ldi	r16, 0x00	; 0
    49a6:	20 e0       	ldi	r18, 0x00	; 0
    49a8:	40 e0       	ldi	r20, 0x00	; 0
    49aa:	60 e0       	ldi	r22, 0x00	; 0
    49ac:	85 ec       	ldi	r24, 0xC5	; 197
    49ae:	9b e0       	ldi	r25, 0x0B	; 11
    49b0:	0e 94 42 34 	call	0x6884	; 0x6884 <_ZN9IPAddressC1Ehhhh>
    49b4:	0f 91       	pop	r16
    49b6:	08 95       	ret

000049b8 <_GLOBAL__sub_I__ZN14EthernetServerC2Ej>:
      n += client.write(buffer, size);
    }
  }
  
  return n;
}
    49b8:	0f 93       	push	r16
    49ba:	00 e0       	ldi	r16, 0x00	; 0
    49bc:	20 e0       	ldi	r18, 0x00	; 0
    49be:	40 e0       	ldi	r20, 0x00	; 0
    49c0:	60 e0       	ldi	r22, 0x00	; 0
    49c2:	8b ec       	ldi	r24, 0xCB	; 203
    49c4:	9b e0       	ldi	r25, 0x0B	; 11
    49c6:	0e 94 42 34 	call	0x6884	; 0x6884 <_ZN9IPAddressC1Ehhhh>
    49ca:	0f 91       	pop	r16
    49cc:	08 95       	ret

000049ce <_ZN3UDP14beginMulticastE9IPAddressj>:

class UDP : public Stream {

public:
  virtual uint8_t begin(uint16_t) =0;  // initialize, start listening on specified port. Returns 1 if successful, 0 if there are no sockets available to use
  virtual uint8_t beginMulticast(IPAddress, uint16_t) { return 0; }  // initialize, start listening on specified multicast IP address and port. Returns 1 if successful, 0 on failure
    49ce:	80 e0       	ldi	r24, 0x00	; 0
    49d0:	08 95       	ret

000049d2 <_ZN11EthernetUDP4readEPcj>:
  // Read up to len bytes from the current packet and place them into buffer
  // Returns the number of bytes read, or 0 if none are available
  virtual int read(unsigned char* buffer, size_t len);
  // Read up to len characters from the current packet and place them into buffer
  // Returns the number of characters read, or 0 if none are available
  virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
    49d2:	dc 01       	movw	r26, r24
    49d4:	ed 91       	ld	r30, X+
    49d6:	fc 91       	ld	r31, X
    49d8:	04 8c       	ldd	r0, Z+28	; 0x1c
    49da:	f5 8d       	ldd	r31, Z+29	; 0x1d
    49dc:	e0 2d       	mov	r30, r0
    49de:	09 94       	ijmp

000049e0 <_ZN11EthernetUDP8remoteIPEv>:
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    49e0:	27 ee       	ldi	r18, 0xE7	; 231
    49e2:	39 e0       	ldi	r19, 0x09	; 9
    49e4:	fc 01       	movw	r30, r24
    49e6:	31 83       	std	Z+1, r19	; 0x01
    49e8:	20 83       	st	Z, r18
    49ea:	fb 01       	movw	r30, r22
    49ec:	41 89       	ldd	r20, Z+17	; 0x11
    49ee:	52 89       	ldd	r21, Z+18	; 0x12
    49f0:	63 89       	ldd	r22, Z+19	; 0x13
    49f2:	74 89       	ldd	r23, Z+20	; 0x14
    49f4:	fc 01       	movw	r30, r24
    49f6:	42 83       	std	Z+2, r20	; 0x02
    49f8:	53 83       	std	Z+3, r21	; 0x03
    49fa:	64 83       	std	Z+4, r22	; 0x04
    49fc:	75 83       	std	Z+5, r23	; 0x05
  // Return the next byte from the current packet without moving on to the next byte
  virtual int peek();
  virtual void flush();	// Finish reading the current packet

  // Return the IP address of the host who sent the current incoming packet
  virtual IPAddress remoteIP() { return _remoteIP; };
    49fe:	08 95       	ret

00004a00 <_ZN11EthernetUDP10remotePortEv>:
  // Return the port of the host who sent the current incoming packet
  virtual uint16_t remotePort() { return _remotePort; };
    4a00:	fc 01       	movw	r30, r24
    4a02:	85 89       	ldd	r24, Z+21	; 0x15
    4a04:	96 89       	ldd	r25, Z+22	; 0x16
    4a06:	08 95       	ret

00004a08 <_ZN11EthernetUDP9availableEv>:

/* return number of bytes available in the current packet,
   will return zero if parsePacket hasn't been called yet */
int EthernetUDP::available() {
  return _remaining;
}
    4a08:	fc 01       	movw	r30, r24
    4a0a:	81 8d       	ldd	r24, Z+25	; 0x19
    4a0c:	92 8d       	ldd	r25, Z+26	; 0x1a
    4a0e:	08 95       	ret

00004a10 <_ZN11EthernetUDP5writeEh>:
{
  return sendUDP(_sock);
}

size_t EthernetUDP::write(uint8_t byte)
{
    4a10:	cf 93       	push	r28
    4a12:	df 93       	push	r29
    4a14:	1f 92       	push	r1
    4a16:	cd b7       	in	r28, 0x3d	; 61
    4a18:	de b7       	in	r29, 0x3e	; 62
    4a1a:	69 83       	std	Y+1, r22	; 0x01
  return write(&byte, 1);
    4a1c:	dc 01       	movw	r26, r24
    4a1e:	ed 91       	ld	r30, X+
    4a20:	fc 91       	ld	r31, X
    4a22:	02 80       	ldd	r0, Z+2	; 0x02
    4a24:	f3 81       	ldd	r31, Z+3	; 0x03
    4a26:	e0 2d       	mov	r30, r0
    4a28:	41 e0       	ldi	r20, 0x01	; 1
    4a2a:	50 e0       	ldi	r21, 0x00	; 0
    4a2c:	be 01       	movw	r22, r28
    4a2e:	6f 5f       	subi	r22, 0xFF	; 255
    4a30:	7f 4f       	sbci	r23, 0xFF	; 255
    4a32:	09 95       	icall
}
    4a34:	0f 90       	pop	r0
    4a36:	df 91       	pop	r29
    4a38:	cf 91       	pop	r28
    4a3a:	08 95       	ret

00004a3c <_ZN11EthernetUDP5flushEv>:
  ::peek(_sock, &b);
  return b;
}

void EthernetUDP::flush()
{
    4a3c:	cf 93       	push	r28
    4a3e:	df 93       	push	r29
    4a40:	ec 01       	movw	r28, r24
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5500 always behaves :)

  while (_remaining)
    4a42:	89 8d       	ldd	r24, Y+25	; 0x19
    4a44:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4a46:	89 2b       	or	r24, r25
    4a48:	41 f0       	breq	.+16     	; 0x4a5a <_ZN11EthernetUDP5flushEv+0x1e>
  {
    read();
    4a4a:	e8 81       	ld	r30, Y
    4a4c:	f9 81       	ldd	r31, Y+1	; 0x01
    4a4e:	02 84       	ldd	r0, Z+10	; 0x0a
    4a50:	f3 85       	ldd	r31, Z+11	; 0x0b
    4a52:	e0 2d       	mov	r30, r0
    4a54:	ce 01       	movw	r24, r28
    4a56:	09 95       	icall
{
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5500 always behaves :)

  while (_remaining)
    4a58:	f4 cf       	rjmp	.-24     	; 0x4a42 <_ZN11EthernetUDP5flushEv+0x6>
  {
    read();
  }
}
    4a5a:	df 91       	pop	r29
    4a5c:	cf 91       	pop	r28
    4a5e:	08 95       	ret

00004a60 <_ZN11EthernetUDP4stopEv>:
  return _remaining;
}

/* Release any resources being used by this EthernetUDP instance */
void EthernetUDP::stop()
{
    4a60:	cf 93       	push	r28
    4a62:	df 93       	push	r29
    4a64:	ec 01       	movw	r28, r24
  if (_sock == MAX_SOCK_NUM)
    4a66:	8c 85       	ldd	r24, Y+12	; 0x0c
    4a68:	88 30       	cpi	r24, 0x08	; 8
    4a6a:	59 f0       	breq	.+22     	; 0x4a82 <_ZN11EthernetUDP4stopEv+0x22>
    return;

  close(_sock);
    4a6c:	c2 d1       	rcall	.+900    	; 0x4df2 <_Z5closeh>

  EthernetClass::_server_port[_sock] = 0;
    4a6e:	ec 85       	ldd	r30, Y+12	; 0x0c
    4a70:	f0 e0       	ldi	r31, 0x00	; 0
    4a72:	ee 0f       	add	r30, r30
    4a74:	ff 1f       	adc	r31, r31
    4a76:	e1 55       	subi	r30, 0x51	; 81
    4a78:	f4 4f       	sbci	r31, 0xF4	; 244
    4a7a:	11 82       	std	Z+1, r1	; 0x01
    4a7c:	10 82       	st	Z, r1
  _sock = MAX_SOCK_NUM;
    4a7e:	88 e0       	ldi	r24, 0x08	; 8
    4a80:	8c 87       	std	Y+12, r24	; 0x0c
}
    4a82:	df 91       	pop	r29
    4a84:	cf 91       	pop	r28
    4a86:	08 95       	ret

00004a88 <_ZN11EthernetUDP11beginPacketE9IPAddressj>:
  }
}

int EthernetUDP::beginPacket(IPAddress ip, uint16_t port)
{
  _offset = 0;
    4a88:	fc 01       	movw	r30, r24
    4a8a:	10 8e       	std	Z+24, r1	; 0x18
    4a8c:	17 8a       	std	Z+23, r1	; 0x17

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    4a8e:	6e 5f       	subi	r22, 0xFE	; 254
    4a90:	7f 4f       	sbci	r23, 0xFF	; 255
  return startUDP(_sock, rawIPAddress(ip), port);
    4a92:	84 85       	ldd	r24, Z+12	; 0x0c
    4a94:	e6 c2       	rjmp	.+1484   	; 0x5062 <_Z8startUDPhPhj>

00004a96 <_ZN11EthernetUDP9endPacketEv>:
}

int EthernetUDP::endPacket()
{
  return sendUDP(_sock);
    4a96:	fc 01       	movw	r30, r24
    4a98:	84 85       	ldd	r24, Z+12	; 0x0c
    4a9a:	06 c3       	rjmp	.+1548   	; 0x50a8 <_Z7sendUDPh>

00004a9c <_ZN11EthernetUDP5writeEPKhj>:
{
  return write(&byte, 1);
}

size_t EthernetUDP::write(const uint8_t *buffer, size_t size)
{
    4a9c:	cf 93       	push	r28
    4a9e:	df 93       	push	r29
    4aa0:	ec 01       	movw	r28, r24
    4aa2:	9a 01       	movw	r18, r20
  uint16_t bytes_written = bufferData(_sock, _offset, buffer, size);
    4aa4:	8f 89       	ldd	r24, Y+23	; 0x17
    4aa6:	98 8d       	ldd	r25, Y+24	; 0x18
    4aa8:	ab 01       	movw	r20, r22
    4aaa:	bc 01       	movw	r22, r24
    4aac:	8c 85       	ldd	r24, Y+12	; 0x0c
    4aae:	ae d2       	rcall	.+1372   	; 0x500c <_Z10bufferDatahjPKhj>
  _offset += bytes_written;
    4ab0:	2f 89       	ldd	r18, Y+23	; 0x17
    4ab2:	38 8d       	ldd	r19, Y+24	; 0x18
    4ab4:	28 0f       	add	r18, r24
    4ab6:	39 1f       	adc	r19, r25
    4ab8:	38 8f       	std	Y+24, r19	; 0x18
    4aba:	2f 8b       	std	Y+23, r18	; 0x17
  return bytes_written;
}
    4abc:	df 91       	pop	r29
    4abe:	cf 91       	pop	r28
    4ac0:	08 95       	ret

00004ac2 <_ZN11EthernetUDP4readEv>:
  // There aren't any packets available
  return 0;
}

int EthernetUDP::read()
{
    4ac2:	0f 93       	push	r16
    4ac4:	1f 93       	push	r17
    4ac6:	cf 93       	push	r28
    4ac8:	df 93       	push	r29
    4aca:	1f 92       	push	r1
    4acc:	cd b7       	in	r28, 0x3d	; 61
    4ace:	de b7       	in	r29, 0x3e	; 62
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
    4ad0:	fc 01       	movw	r30, r24
    4ad2:	21 8d       	ldd	r18, Z+25	; 0x19
    4ad4:	32 8d       	ldd	r19, Z+26	; 0x1a
    4ad6:	23 2b       	or	r18, r19
    4ad8:	59 f0       	breq	.+22     	; 0x4af0 <_ZN11EthernetUDP4readEv+0x2e>
    4ada:	8c 01       	movw	r16, r24
    4adc:	41 e0       	ldi	r20, 0x01	; 1
    4ade:	50 e0       	ldi	r21, 0x00	; 0
    4ae0:	be 01       	movw	r22, r28
    4ae2:	6f 5f       	subi	r22, 0xFF	; 255
    4ae4:	7f 4f       	sbci	r23, 0xFF	; 255
    4ae6:	84 85       	ldd	r24, Z+12	; 0x0c
    4ae8:	42 d2       	rcall	.+1156   	; 0x4f6e <_Z4recvhPhi>
    4aea:	18 16       	cp	r1, r24
    4aec:	19 06       	cpc	r1, r25
    4aee:	1c f0       	brlt	.+6      	; 0x4af6 <_ZN11EthernetUDP4readEv+0x34>
    _remaining--;
    return byte;
  }

  // If we get here, there's no data available
  return -1;
    4af0:	8f ef       	ldi	r24, 0xFF	; 255
    4af2:	9f ef       	ldi	r25, 0xFF	; 255
    4af4:	08 c0       	rjmp	.+16     	; 0x4b06 <_ZN11EthernetUDP4readEv+0x44>
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
  {
    // We read things without any problems
    _remaining--;
    4af6:	f8 01       	movw	r30, r16
    4af8:	81 8d       	ldd	r24, Z+25	; 0x19
    4afa:	92 8d       	ldd	r25, Z+26	; 0x1a
    4afc:	01 97       	sbiw	r24, 0x01	; 1
    4afe:	92 8f       	std	Z+26, r25	; 0x1a
    4b00:	81 8f       	std	Z+25, r24	; 0x19
    return byte;
    4b02:	89 81       	ldd	r24, Y+1	; 0x01
    4b04:	90 e0       	ldi	r25, 0x00	; 0
  }

  // If we get here, there's no data available
  return -1;
}
    4b06:	0f 90       	pop	r0
    4b08:	df 91       	pop	r29
    4b0a:	cf 91       	pop	r28
    4b0c:	1f 91       	pop	r17
    4b0e:	0f 91       	pop	r16
    4b10:	08 95       	ret

00004b12 <_ZN11EthernetUDP4readEPhj>:

int EthernetUDP::read(unsigned char* buffer, size_t len)
{
    4b12:	cf 93       	push	r28
    4b14:	df 93       	push	r29

  if (_remaining > 0)
    4b16:	fc 01       	movw	r30, r24
    4b18:	21 8d       	ldd	r18, Z+25	; 0x19
    4b1a:	32 8d       	ldd	r19, Z+26	; 0x1a
    4b1c:	21 15       	cp	r18, r1
    4b1e:	31 05       	cpc	r19, r1
    4b20:	19 f4       	brne	.+6      	; 0x4b28 <_ZN11EthernetUDP4readEPhj+0x16>
    }

  }

  // If we get here, there's no data available or recv failed
  return -1;
    4b22:	8f ef       	ldi	r24, 0xFF	; 255
    4b24:	9f ef       	ldi	r25, 0xFF	; 255
    4b26:	10 c0       	rjmp	.+32     	; 0x4b48 <_ZN11EthernetUDP4readEPhj+0x36>
    4b28:	ec 01       	movw	r28, r24
  if (_remaining > 0)
  {

    int got;

    if (_remaining <= len)
    4b2a:	42 17       	cp	r20, r18
    4b2c:	53 07       	cpc	r21, r19
    4b2e:	08 f0       	brcs	.+2      	; 0x4b32 <_ZN11EthernetUDP4readEPhj+0x20>
    {
      // data should fit in the buffer
      got = recv(_sock, buffer, _remaining);
    4b30:	a9 01       	movw	r20, r18
    }
    else
    {
      // too much data for the buffer, 
      // grab as much as will fit
      got = recv(_sock, buffer, len);
    4b32:	8c 85       	ldd	r24, Y+12	; 0x0c
    4b34:	1c d2       	rcall	.+1080   	; 0x4f6e <_Z4recvhPhi>
    }

    if (got > 0)
    4b36:	18 16       	cp	r1, r24
    4b38:	19 06       	cpc	r1, r25
    4b3a:	9c f7       	brge	.-26     	; 0x4b22 <_ZN11EthernetUDP4readEPhj+0x10>
    {
      _remaining -= got;
    4b3c:	29 8d       	ldd	r18, Y+25	; 0x19
    4b3e:	3a 8d       	ldd	r19, Y+26	; 0x1a
    4b40:	28 1b       	sub	r18, r24
    4b42:	39 0b       	sbc	r19, r25
    4b44:	3a 8f       	std	Y+26, r19	; 0x1a
    4b46:	29 8f       	std	Y+25, r18	; 0x19
  }

  // If we get here, there's no data available or recv failed
  return -1;

}
    4b48:	df 91       	pop	r29
    4b4a:	cf 91       	pop	r28
    4b4c:	08 95       	ret

00004b4e <_ZN11EthernetUDP4peekEv>:

int EthernetUDP::peek()
{
    4b4e:	cf 93       	push	r28
    4b50:	df 93       	push	r29
    4b52:	1f 92       	push	r1
    4b54:	cd b7       	in	r28, 0x3d	; 61
    4b56:	de b7       	in	r29, 0x3e	; 62
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
    4b58:	fc 01       	movw	r30, r24
    4b5a:	21 8d       	ldd	r18, Z+25	; 0x19
    4b5c:	32 8d       	ldd	r19, Z+26	; 0x1a
    4b5e:	23 2b       	or	r18, r19
    4b60:	41 f0       	breq	.+16     	; 0x4b72 <_ZN11EthernetUDP4peekEv+0x24>
    return -1;
  ::peek(_sock, &b);
    4b62:	be 01       	movw	r22, r28
    4b64:	6f 5f       	subi	r22, 0xFF	; 255
    4b66:	7f 4f       	sbci	r23, 0xFF	; 255
    4b68:	84 85       	ldd	r24, Z+12	; 0x0c
    4b6a:	42 d2       	rcall	.+1156   	; 0x4ff0 <_Z4peekhPh>
  return b;
    4b6c:	89 81       	ldd	r24, Y+1	; 0x01
    4b6e:	90 e0       	ldi	r25, 0x00	; 0
    4b70:	02 c0       	rjmp	.+4      	; 0x4b76 <_ZN11EthernetUDP4peekEv+0x28>
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
    return -1;
    4b72:	8f ef       	ldi	r24, 0xFF	; 255
    4b74:	9f ef       	ldi	r25, 0xFF	; 255
  ::peek(_sock, &b);
  return b;
}
    4b76:	0f 90       	pop	r0
    4b78:	df 91       	pop	r29
    4b7a:	cf 91       	pop	r28
    4b7c:	08 95       	ret

00004b7e <_ZN11EthernetUDP5beginEj>:

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
    4b7e:	ef 92       	push	r14
    4b80:	ff 92       	push	r15
    4b82:	1f 93       	push	r17
    4b84:	cf 93       	push	r28
    4b86:	df 93       	push	r29
  if (_sock != MAX_SOCK_NUM)
    4b88:	fc 01       	movw	r30, r24
    4b8a:	24 85       	ldd	r18, Z+12	; 0x0c
    4b8c:	28 30       	cpi	r18, 0x08	; 8
    4b8e:	11 f0       	breq	.+4      	; 0x4b94 <_ZN11EthernetUDP5beginEj+0x16>
    return 0;
    4b90:	80 e0       	ldi	r24, 0x00	; 0
    4b92:	20 c0       	rjmp	.+64     	; 0x4bd4 <_ZN11EthernetUDP5beginEj+0x56>
    4b94:	7b 01       	movw	r14, r22
    4b96:	ec 01       	movw	r28, r24
    4b98:	10 e0       	ldi	r17, 0x00	; 0
    4b9a:	61 2f       	mov	r22, r17
    4b9c:	62 95       	swap	r22
    4b9e:	66 0f       	add	r22, r22
    4ba0:	60 7e       	andi	r22, 0xE0	; 224
    4ba2:	68 5f       	subi	r22, 0xF8	; 248
    4ba4:	83 e0       	ldi	r24, 0x03	; 3
    4ba6:	90 e0       	ldi	r25, 0x00	; 0
    4ba8:	1b d3       	rcall	.+1590   	; 0x51e0 <_ZN10W5500Class4readEjh>

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
    4baa:	81 11       	cpse	r24, r1
    4bac:	02 c0       	rjmp	.+4      	; 0x4bb2 <_ZN11EthernetUDP5beginEj+0x34>
      _sock = i;
    4bae:	1c 87       	std	Y+12, r17	; 0x0c
    4bb0:	05 c0       	rjmp	.+10     	; 0x4bbc <_ZN11EthernetUDP5beginEj+0x3e>
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
    4bb2:	88 31       	cpi	r24, 0x18	; 24
    4bb4:	e1 f3       	breq	.-8      	; 0x4bae <_ZN11EthernetUDP5beginEj+0x30>
    4bb6:	1f 5f       	subi	r17, 0xFF	; 255
/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    4bb8:	18 30       	cpi	r17, 0x08	; 8
    4bba:	79 f7       	brne	.-34     	; 0x4b9a <_ZN11EthernetUDP5beginEj+0x1c>
      _sock = i;
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
    4bbc:	8c 85       	ldd	r24, Y+12	; 0x0c
    4bbe:	88 30       	cpi	r24, 0x08	; 8
    4bc0:	39 f3       	breq	.-50     	; 0x4b90 <_ZN11EthernetUDP5beginEj+0x12>
    return 0;

  _port = port;
    4bc2:	fe 86       	std	Y+14, r15	; 0x0e
    4bc4:	ed 86       	std	Y+13, r14	; 0x0d
  _remaining = 0;
    4bc6:	1a 8e       	std	Y+26, r1	; 0x1a
    4bc8:	19 8e       	std	Y+25, r1	; 0x19
  socket(_sock, SnMR::UDP, _port, 0);
    4bca:	20 e0       	ldi	r18, 0x00	; 0
    4bcc:	a7 01       	movw	r20, r14
    4bce:	62 e0       	ldi	r22, 0x02	; 2
    4bd0:	1b d1       	rcall	.+566    	; 0x4e08 <_Z6sockethhjh>

  return 1;
    4bd2:	81 e0       	ldi	r24, 0x01	; 1
}
    4bd4:	df 91       	pop	r29
    4bd6:	cf 91       	pop	r28
    4bd8:	1f 91       	pop	r17
    4bda:	ff 90       	pop	r15
    4bdc:	ef 90       	pop	r14
    4bde:	08 95       	ret

00004be0 <_ZN11EthernetUDP11parsePacketEv>:
  _offset += bytes_written;
  return bytes_written;
}

int EthernetUDP::parsePacket()
{
    4be0:	0f 93       	push	r16
    4be2:	1f 93       	push	r17
    4be4:	cf 93       	push	r28
    4be6:	df 93       	push	r29
    4be8:	cd b7       	in	r28, 0x3d	; 61
    4bea:	de b7       	in	r29, 0x3e	; 62
    4bec:	28 97       	sbiw	r28, 0x08	; 8
    4bee:	0f b6       	in	r0, 0x3f	; 63
    4bf0:	f8 94       	cli
    4bf2:	de bf       	out	0x3e, r29	; 62
    4bf4:	0f be       	out	0x3f, r0	; 63
    4bf6:	cd bf       	out	0x3d, r28	; 61
    4bf8:	8c 01       	movw	r16, r24
  // discard any remaining bytes in the last packet
  flush();
    4bfa:	dc 01       	movw	r26, r24
    4bfc:	ed 91       	ld	r30, X+
    4bfe:	fc 91       	ld	r31, X
    4c00:	06 80       	ldd	r0, Z+6	; 0x06
    4c02:	f7 81       	ldd	r31, Z+7	; 0x07
    4c04:	e0 2d       	mov	r30, r0
    4c06:	09 95       	icall

  if (w5500.getRXReceivedSize(_sock) > 0)
    4c08:	f8 01       	movw	r30, r16
    4c0a:	64 85       	ldd	r22, Z+12	; 0x0c
    4c0c:	8c ed       	ldi	r24, 0xDC	; 220
    4c0e:	9b e0       	ldi	r25, 0x0B	; 11
    4c10:	77 d3       	rcall	.+1774   	; 0x5300 <_ZN10W5500Class17getRXReceivedSizeEh>
    4c12:	89 2b       	or	r24, r25
    4c14:	39 f1       	breq	.+78     	; 0x4c64 <_ZN11EthernetUDP11parsePacketEv+0x84>
  {
    //HACK - hand-parse the UDP packet using TCP recv method
    uint8_t tmpBuf[8];
    int ret =0; 
    //read 8 header bytes and get IP and port from it
    ret = recv(_sock,tmpBuf,8);
    4c16:	48 e0       	ldi	r20, 0x08	; 8
    4c18:	50 e0       	ldi	r21, 0x00	; 0
    4c1a:	be 01       	movw	r22, r28
    4c1c:	6f 5f       	subi	r22, 0xFF	; 255
    4c1e:	7f 4f       	sbci	r23, 0xFF	; 255
    4c20:	d8 01       	movw	r26, r16
    4c22:	1c 96       	adiw	r26, 0x0c	; 12
    4c24:	8c 91       	ld	r24, X
    4c26:	a3 d1       	rcall	.+838    	; 0x4f6e <_Z4recvhPhi>
    if (ret > 0)
    4c28:	18 16       	cp	r1, r24
    4c2a:	19 06       	cpc	r1, r25
    4c2c:	ec f4       	brge	.+58     	; 0x4c68 <_ZN11EthernetUDP11parsePacketEv+0x88>
    {
      _remoteIP = tmpBuf;
    4c2e:	be 01       	movw	r22, r28
    4c30:	6f 5f       	subi	r22, 0xFF	; 255
    4c32:	7f 4f       	sbci	r23, 0xFF	; 255
    4c34:	c8 01       	movw	r24, r16
    4c36:	0f 96       	adiw	r24, 0x0f	; 15
    4c38:	0e 94 4e 34 	call	0x689c	; 0x689c <_ZN9IPAddressaSEPKh>
      _remotePort = tmpBuf[4];
      _remotePort = (_remotePort << 8) + tmpBuf[5];
    4c3c:	8d 81       	ldd	r24, Y+5	; 0x05
    4c3e:	90 e0       	ldi	r25, 0x00	; 0
    4c40:	98 2f       	mov	r25, r24
    4c42:	88 27       	eor	r24, r24
    4c44:	2e 81       	ldd	r18, Y+6	; 0x06
    4c46:	82 0f       	add	r24, r18
    4c48:	91 1d       	adc	r25, r1
    4c4a:	f8 01       	movw	r30, r16
    4c4c:	96 8b       	std	Z+22, r25	; 0x16
    4c4e:	85 8b       	std	Z+21, r24	; 0x15
      _remaining = tmpBuf[6];
      _remaining = (_remaining << 8) + tmpBuf[7];
    4c50:	8f 81       	ldd	r24, Y+7	; 0x07
    4c52:	90 e0       	ldi	r25, 0x00	; 0
    4c54:	98 2f       	mov	r25, r24
    4c56:	88 27       	eor	r24, r24
    4c58:	28 85       	ldd	r18, Y+8	; 0x08
    4c5a:	82 0f       	add	r24, r18
    4c5c:	91 1d       	adc	r25, r1
    4c5e:	92 8f       	std	Z+26, r25	; 0x1a
    4c60:	81 8f       	std	Z+25, r24	; 0x19
    4c62:	02 c0       	rjmp	.+4      	; 0x4c68 <_ZN11EthernetUDP11parsePacketEv+0x88>
      ret = _remaining;
    }
    return ret;
  }
  // There aren't any packets available
  return 0;
    4c64:	80 e0       	ldi	r24, 0x00	; 0
    4c66:	90 e0       	ldi	r25, 0x00	; 0
}
    4c68:	28 96       	adiw	r28, 0x08	; 8
    4c6a:	0f b6       	in	r0, 0x3f	; 63
    4c6c:	f8 94       	cli
    4c6e:	de bf       	out	0x3e, r29	; 62
    4c70:	0f be       	out	0x3f, r0	; 63
    4c72:	cd bf       	out	0x3d, r28	; 61
    4c74:	df 91       	pop	r29
    4c76:	cf 91       	pop	r28
    4c78:	1f 91       	pop	r17
    4c7a:	0f 91       	pop	r16
    4c7c:	08 95       	ret

00004c7e <_ZN11EthernetUDPC1Ev>:
#include "Ethernet2.h"
#include "Udp.h"
#include "Dns.h"

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}
    4c7e:	fc 01       	movw	r30, r24
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    4c80:	13 82       	std	Z+3, r1	; 0x03
    4c82:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    4c84:	88 ee       	ldi	r24, 0xE8	; 232
    4c86:	93 e0       	ldi	r25, 0x03	; 3
    4c88:	a0 e0       	ldi	r26, 0x00	; 0
    4c8a:	b0 e0       	ldi	r27, 0x00	; 0
    4c8c:	84 83       	std	Z+4, r24	; 0x04
    4c8e:	95 83       	std	Z+5, r25	; 0x05
    4c90:	a6 83       	std	Z+6, r26	; 0x06
    4c92:	b7 83       	std	Z+7, r27	; 0x07
    4c94:	83 e7       	ldi	r24, 0x73	; 115
    4c96:	99 e0       	ldi	r25, 0x09	; 9
    4c98:	91 83       	std	Z+1, r25	; 0x01
    4c9a:	80 83       	st	Z, r24
    4c9c:	88 e0       	ldi	r24, 0x08	; 8
    4c9e:	84 87       	std	Z+12, r24	; 0x0c
    4ca0:	cf 01       	movw	r24, r30
    4ca2:	0f 96       	adiw	r24, 0x0f	; 15
    4ca4:	0c 94 38 34 	jmp	0x6870	; 0x6870 <_ZN9IPAddressC1Ev>

00004ca8 <_ZN11EthernetUDP11beginPacketEPKcj>:
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

int EthernetUDP::beginPacket(const char *host, uint16_t port)
{
    4ca8:	cf 92       	push	r12
    4caa:	df 92       	push	r13
    4cac:	ef 92       	push	r14
    4cae:	ff 92       	push	r15
    4cb0:	0f 93       	push	r16
    4cb2:	1f 93       	push	r17
    4cb4:	cf 93       	push	r28
    4cb6:	df 93       	push	r29
    4cb8:	cd b7       	in	r28, 0x3d	; 61
    4cba:	de b7       	in	r29, 0x3e	; 62
    4cbc:	af 97       	sbiw	r28, 0x2f	; 47
    4cbe:	0f b6       	in	r0, 0x3f	; 63
    4cc0:	f8 94       	cli
    4cc2:	de bf       	out	0x3e, r29	; 62
    4cc4:	0f be       	out	0x3f, r0	; 63
    4cc6:	cd bf       	out	0x3d, r28	; 61
    4cc8:	8c 01       	movw	r16, r24
    4cca:	6b 01       	movw	r12, r22
    4ccc:	7a 01       	movw	r14, r20
#ifndef DNSClient_h
#define DNSClient_h

#include <EthernetUdp2.h>

class DNSClient
    4cce:	ce 01       	movw	r24, r28
    4cd0:	01 96       	adiw	r24, 0x01	; 1
    4cd2:	0e 94 38 34 	call	0x6870	; 0x6870 <_ZN9IPAddressC1Ev>
    4cd6:	ce 01       	movw	r24, r28
    4cd8:	09 96       	adiw	r24, 0x09	; 9
    4cda:	d1 df       	rcall	.-94     	; 0x4c7e <_ZN11EthernetUDPC1Ev>
  // Look up the host first
  int ret = 0;
  DNSClient dns;
  IPAddress remote_addr;
    4cdc:	ce 01       	movw	r24, r28
    4cde:	8a 96       	adiw	r24, 0x2a	; 42
    4ce0:	0e 94 38 34 	call	0x6870	; 0x6870 <_ZN9IPAddressC1Ev>

  dns.begin(Ethernet.dnsServerIP());
    4ce4:	62 ea       	ldi	r22, 0xA2	; 162
    4ce6:	7b e0       	ldi	r23, 0x0B	; 11
    4ce8:	ce 01       	movw	r24, r28
    4cea:	84 96       	adiw	r24, 0x24	; 36
    4cec:	63 dc       	rcall	.-1850   	; 0x45b4 <_ZN13EthernetClass11dnsServerIPEv>
    4cee:	be 01       	movw	r22, r28
    4cf0:	6c 5d       	subi	r22, 0xDC	; 220
    4cf2:	7f 4f       	sbci	r23, 0xFF	; 255
    4cf4:	ce 01       	movw	r24, r28
    4cf6:	01 96       	adiw	r24, 0x01	; 1
    4cf8:	28 d9       	rcall	.-3504   	; 0x3f4a <_ZN9DNSClient5beginERK9IPAddress>
  ret = dns.getHostByName(host, remote_addr);
    4cfa:	ae 01       	movw	r20, r28
    4cfc:	46 5d       	subi	r20, 0xD6	; 214
    4cfe:	5f 4f       	sbci	r21, 0xFF	; 255
    4d00:	b6 01       	movw	r22, r12
    4d02:	ce 01       	movw	r24, r28
    4d04:	01 96       	adiw	r24, 0x01	; 1
    4d06:	7b db       	rcall	.-2314   	; 0x43fe <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>
  if (ret == 1) {
    4d08:	81 30       	cpi	r24, 0x01	; 1
    4d0a:	91 05       	cpc	r25, r1
    4d0c:	c1 f4       	brne	.+48     	; 0x4d3e <_ZN11EthernetUDP11beginPacketEPKcj+0x96>
    return beginPacket(remote_addr, port);
    4d0e:	d8 01       	movw	r26, r16
    4d10:	ed 91       	ld	r30, X+
    4d12:	fc 91       	ld	r31, X
    4d14:	04 88       	ldd	r0, Z+20	; 0x14
    4d16:	f5 89       	ldd	r31, Z+21	; 0x15
    4d18:	e0 2d       	mov	r30, r0
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    4d1a:	87 ee       	ldi	r24, 0xE7	; 231
    4d1c:	99 e0       	ldi	r25, 0x09	; 9
    4d1e:	9d a3       	std	Y+37, r25	; 0x25
    4d20:	8c a3       	std	Y+36, r24	; 0x24
    4d22:	8c a5       	ldd	r24, Y+44	; 0x2c
    4d24:	9d a5       	ldd	r25, Y+45	; 0x2d
    4d26:	ae a5       	ldd	r26, Y+46	; 0x2e
    4d28:	bf a5       	ldd	r27, Y+47	; 0x2f
    4d2a:	8e a3       	std	Y+38, r24	; 0x26
    4d2c:	9f a3       	std	Y+39, r25	; 0x27
    4d2e:	a8 a7       	std	Y+40, r26	; 0x28
    4d30:	b9 a7       	std	Y+41, r27	; 0x29
    4d32:	a7 01       	movw	r20, r14
    4d34:	be 01       	movw	r22, r28
    4d36:	6c 5d       	subi	r22, 0xDC	; 220
    4d38:	7f 4f       	sbci	r23, 0xFF	; 255
    4d3a:	c8 01       	movw	r24, r16
    4d3c:	09 95       	icall
  } else {
    return ret;
  }
}
    4d3e:	af 96       	adiw	r28, 0x2f	; 47
    4d40:	0f b6       	in	r0, 0x3f	; 63
    4d42:	f8 94       	cli
    4d44:	de bf       	out	0x3e, r29	; 62
    4d46:	0f be       	out	0x3f, r0	; 63
    4d48:	cd bf       	out	0x3d, r28	; 61
    4d4a:	df 91       	pop	r29
    4d4c:	cf 91       	pop	r28
    4d4e:	1f 91       	pop	r17
    4d50:	0f 91       	pop	r16
    4d52:	ff 90       	pop	r15
    4d54:	ef 90       	pop	r14
    4d56:	df 90       	pop	r13
    4d58:	cf 90       	pop	r12
    4d5a:	08 95       	ret

00004d5c <_GLOBAL__sub_I__ZN11EthernetUDPC2Ev>:

  while (_remaining)
  {
    read();
  }
}
    4d5c:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    4d5e:	00 e0       	ldi	r16, 0x00	; 0
    4d60:	20 e0       	ldi	r18, 0x00	; 0
    4d62:	40 e0       	ldi	r20, 0x00	; 0
    4d64:	60 e0       	ldi	r22, 0x00	; 0
    4d66:	81 ed       	ldi	r24, 0xD1	; 209
    4d68:	9b e0       	ldi	r25, 0x0B	; 11
    4d6a:	0e 94 42 34 	call	0x6884	; 0x6884 <_ZN9IPAddressC1Ehhhh>
    4d6e:	0f 91       	pop	r16
    4d70:	08 95       	ret

00004d72 <_ZN10W5500Class11writeSnDIPREhPh>:
    }
  }

  w5500.writeSnIR(s, SnIR::SEND_OK);
  return ret;
}
    4d72:	ab 01       	movw	r20, r22
    4d74:	82 95       	swap	r24
    4d76:	88 0f       	add	r24, r24
    4d78:	80 7e       	andi	r24, 0xE0	; 224
    4d7a:	6c e0       	ldi	r22, 0x0C	; 12
    4d7c:	68 0f       	add	r22, r24
    4d7e:	24 e0       	ldi	r18, 0x04	; 4
    4d80:	30 e0       	ldi	r19, 0x00	; 0
    4d82:	8c e0       	ldi	r24, 0x0C	; 12
    4d84:	90 e0       	ldi	r25, 0x00	; 0
    4d86:	00 c2       	rjmp	.+1024   	; 0x5188 <_ZN10W5500Class5writeEjhPKhj>

00004d88 <_ZN10W5500Class6readSnEhj>:
    4d88:	9b 01       	movw	r18, r22
    4d8a:	82 95       	swap	r24
    4d8c:	88 0f       	add	r24, r24
    4d8e:	80 7e       	andi	r24, 0xE0	; 224
    4d90:	68 e0       	ldi	r22, 0x08	; 8
    4d92:	68 0f       	add	r22, r24
    4d94:	c9 01       	movw	r24, r18
    4d96:	24 c2       	rjmp	.+1096   	; 0x51e0 <_ZN10W5500Class4readEjh>

00004d98 <_ZN10W5500Class8readSnIREh>:
    4d98:	62 e0       	ldi	r22, 0x02	; 2
    4d9a:	70 e0       	ldi	r23, 0x00	; 0
    4d9c:	f5 cf       	rjmp	.-22     	; 0x4d88 <_ZN10W5500Class6readSnEhj>

00004d9e <_ZN10W5500Class7writeSnEhjh>:
    4d9e:	9b 01       	movw	r18, r22
    4da0:	82 95       	swap	r24
    4da2:	88 0f       	add	r24, r24
    4da4:	80 7e       	andi	r24, 0xE0	; 224
    4da6:	6c e0       	ldi	r22, 0x0C	; 12
    4da8:	68 0f       	add	r22, r24
    4daa:	c9 01       	movw	r24, r18
    4dac:	cf c1       	rjmp	.+926    	; 0x514c <_ZN10W5500Class5writeEjhh>

00004dae <_ZN10W5500Class11writeSnPORTEhj>:
    4dae:	cf 93       	push	r28
    4db0:	df 93       	push	r29
    4db2:	c8 2f       	mov	r28, r24
    4db4:	d6 2f       	mov	r29, r22
    4db6:	47 2f       	mov	r20, r23
    4db8:	64 e0       	ldi	r22, 0x04	; 4
    4dba:	70 e0       	ldi	r23, 0x00	; 0
    4dbc:	f0 df       	rcall	.-32     	; 0x4d9e <_ZN10W5500Class7writeSnEhjh>
    4dbe:	4d 2f       	mov	r20, r29
    4dc0:	65 e0       	ldi	r22, 0x05	; 5
    4dc2:	70 e0       	ldi	r23, 0x00	; 0
    4dc4:	8c 2f       	mov	r24, r28
    4dc6:	df 91       	pop	r29
    4dc8:	cf 91       	pop	r28
    4dca:	e9 cf       	rjmp	.-46     	; 0x4d9e <_ZN10W5500Class7writeSnEhjh>

00004dcc <_ZN10W5500Class9writeSnIREhh>:
    4dcc:	46 2f       	mov	r20, r22
    4dce:	62 e0       	ldi	r22, 0x02	; 2
    4dd0:	70 e0       	ldi	r23, 0x00	; 0
    4dd2:	e5 cf       	rjmp	.-54     	; 0x4d9e <_ZN10W5500Class7writeSnEhjh>

00004dd4 <_ZN10W5500Class12writeSnDPORTEhj>:
    4dd4:	cf 93       	push	r28
    4dd6:	df 93       	push	r29
    4dd8:	c8 2f       	mov	r28, r24
    4dda:	d6 2f       	mov	r29, r22
    4ddc:	47 2f       	mov	r20, r23
    4dde:	60 e1       	ldi	r22, 0x10	; 16
    4de0:	70 e0       	ldi	r23, 0x00	; 0
    4de2:	dd df       	rcall	.-70     	; 0x4d9e <_ZN10W5500Class7writeSnEhjh>
    4de4:	4d 2f       	mov	r20, r29
    4de6:	61 e1       	ldi	r22, 0x11	; 17
    4de8:	70 e0       	ldi	r23, 0x00	; 0
    4dea:	8c 2f       	mov	r24, r28
    4dec:	df 91       	pop	r29
    4dee:	cf 91       	pop	r28
    4df0:	d6 cf       	rjmp	.-84     	; 0x4d9e <_ZN10W5500Class7writeSnEhjh>

00004df2 <_Z5closeh>:
    4df2:	cf 93       	push	r28
    4df4:	c8 2f       	mov	r28, r24
    4df6:	40 e1       	ldi	r20, 0x10	; 16
    4df8:	68 2f       	mov	r22, r24
    4dfa:	8c ed       	ldi	r24, 0xDC	; 220
    4dfc:	9b e0       	ldi	r25, 0x0B	; 11
    4dfe:	70 d3       	rcall	.+1760   	; 0x54e0 <_ZN10W5500Class9execCmdSnEh7SockCMD>
    4e00:	6f ef       	ldi	r22, 0xFF	; 255
    4e02:	8c 2f       	mov	r24, r28
    4e04:	cf 91       	pop	r28
    4e06:	e2 cf       	rjmp	.-60     	; 0x4dcc <_ZN10W5500Class9writeSnIREhh>

00004e08 <_Z6sockethhjh>:
    4e08:	ff 92       	push	r15
    4e0a:	0f 93       	push	r16
    4e0c:	1f 93       	push	r17
    4e0e:	cf 93       	push	r28
    4e10:	df 93       	push	r29
    4e12:	9f ef       	ldi	r25, 0xFF	; 255
    4e14:	96 0f       	add	r25, r22
    4e16:	95 30       	cpi	r25, 0x05	; 5
    4e18:	18 f5       	brcc	.+70     	; 0x4e60 <_Z6sockethhjh+0x58>
    4e1a:	d2 2f       	mov	r29, r18
    4e1c:	8a 01       	movw	r16, r20
    4e1e:	f6 2e       	mov	r15, r22
    4e20:	c8 2f       	mov	r28, r24
    4e22:	e7 df       	rcall	.-50     	; 0x4df2 <_Z5closeh>
    4e24:	4f 2d       	mov	r20, r15
    4e26:	4d 2b       	or	r20, r29
    4e28:	60 e0       	ldi	r22, 0x00	; 0
    4e2a:	70 e0       	ldi	r23, 0x00	; 0
    4e2c:	8c 2f       	mov	r24, r28
    4e2e:	b7 df       	rcall	.-146    	; 0x4d9e <_ZN10W5500Class7writeSnEhjh>
    4e30:	01 15       	cp	r16, r1
    4e32:	11 05       	cpc	r17, r1
    4e34:	11 f0       	breq	.+4      	; 0x4e3a <_Z6sockethhjh+0x32>
    4e36:	b8 01       	movw	r22, r16
    4e38:	0a c0       	rjmp	.+20     	; 0x4e4e <_Z6sockethhjh+0x46>
    4e3a:	60 91 d7 0b 	lds	r22, 0x0BD7	; 0x800bd7 <_ZL10local_port>
    4e3e:	70 91 d8 0b 	lds	r23, 0x0BD8	; 0x800bd8 <_ZL10local_port+0x1>
    4e42:	6f 5f       	subi	r22, 0xFF	; 255
    4e44:	7f 4f       	sbci	r23, 0xFF	; 255
    4e46:	70 93 d8 0b 	sts	0x0BD8, r23	; 0x800bd8 <_ZL10local_port+0x1>
    4e4a:	60 93 d7 0b 	sts	0x0BD7, r22	; 0x800bd7 <_ZL10local_port>
    4e4e:	8c 2f       	mov	r24, r28
    4e50:	ae df       	rcall	.-164    	; 0x4dae <_ZN10W5500Class11writeSnPORTEhj>
    4e52:	41 e0       	ldi	r20, 0x01	; 1
    4e54:	6c 2f       	mov	r22, r28
    4e56:	8c ed       	ldi	r24, 0xDC	; 220
    4e58:	9b e0       	ldi	r25, 0x0B	; 11
    4e5a:	42 d3       	rcall	.+1668   	; 0x54e0 <_ZN10W5500Class9execCmdSnEh7SockCMD>
    4e5c:	81 e0       	ldi	r24, 0x01	; 1
    4e5e:	01 c0       	rjmp	.+2      	; 0x4e62 <_Z6sockethhjh+0x5a>
    4e60:	80 e0       	ldi	r24, 0x00	; 0
    4e62:	df 91       	pop	r29
    4e64:	cf 91       	pop	r28
    4e66:	1f 91       	pop	r17
    4e68:	0f 91       	pop	r16
    4e6a:	ff 90       	pop	r15
    4e6c:	08 95       	ret

00004e6e <_Z7connecthPhj>:
    4e6e:	0f 93       	push	r16
    4e70:	1f 93       	push	r17
    4e72:	cf 93       	push	r28
    4e74:	fb 01       	movw	r30, r22
    4e76:	90 81       	ld	r25, Z
    4e78:	9f 3f       	cpi	r25, 0xFF	; 255
    4e7a:	51 f4       	brne	.+20     	; 0x4e90 <_Z7connecthPhj+0x22>
    4e7c:	91 81       	ldd	r25, Z+1	; 0x01
    4e7e:	9f 3f       	cpi	r25, 0xFF	; 255
    4e80:	91 f4       	brne	.+36     	; 0x4ea6 <_Z7connecthPhj+0x38>
    4e82:	92 81       	ldd	r25, Z+2	; 0x02
    4e84:	9f 3f       	cpi	r25, 0xFF	; 255
    4e86:	79 f4       	brne	.+30     	; 0x4ea6 <_Z7connecthPhj+0x38>
    4e88:	93 81       	ldd	r25, Z+3	; 0x03
    4e8a:	9f 3f       	cpi	r25, 0xFF	; 255
    4e8c:	61 f4       	brne	.+24     	; 0x4ea6 <_Z7connecthPhj+0x38>
    4e8e:	1c c0       	rjmp	.+56     	; 0x4ec8 <_Z7connecthPhj+0x5a>
    4e90:	91 11       	cpse	r25, r1
    4e92:	09 c0       	rjmp	.+18     	; 0x4ea6 <_Z7connecthPhj+0x38>
    4e94:	91 81       	ldd	r25, Z+1	; 0x01
    4e96:	91 11       	cpse	r25, r1
    4e98:	06 c0       	rjmp	.+12     	; 0x4ea6 <_Z7connecthPhj+0x38>
    4e9a:	92 81       	ldd	r25, Z+2	; 0x02
    4e9c:	91 11       	cpse	r25, r1
    4e9e:	03 c0       	rjmp	.+6      	; 0x4ea6 <_Z7connecthPhj+0x38>
    4ea0:	93 81       	ldd	r25, Z+3	; 0x03
    4ea2:	99 23       	and	r25, r25
    4ea4:	91 f0       	breq	.+36     	; 0x4eca <_Z7connecthPhj+0x5c>
    4ea6:	41 15       	cp	r20, r1
    4ea8:	51 05       	cpc	r21, r1
    4eaa:	71 f0       	breq	.+28     	; 0x4ec8 <_Z7connecthPhj+0x5a>
    4eac:	8a 01       	movw	r16, r20
    4eae:	bf 01       	movw	r22, r30
    4eb0:	c8 2f       	mov	r28, r24
    4eb2:	5f df       	rcall	.-322    	; 0x4d72 <_ZN10W5500Class11writeSnDIPREhPh>
    4eb4:	b8 01       	movw	r22, r16
    4eb6:	8c 2f       	mov	r24, r28
    4eb8:	8d df       	rcall	.-230    	; 0x4dd4 <_ZN10W5500Class12writeSnDPORTEhj>
    4eba:	44 e0       	ldi	r20, 0x04	; 4
    4ebc:	6c 2f       	mov	r22, r28
    4ebe:	8c ed       	ldi	r24, 0xDC	; 220
    4ec0:	9b e0       	ldi	r25, 0x0B	; 11
    4ec2:	0e d3       	rcall	.+1564   	; 0x54e0 <_ZN10W5500Class9execCmdSnEh7SockCMD>
    4ec4:	91 e0       	ldi	r25, 0x01	; 1
    4ec6:	01 c0       	rjmp	.+2      	; 0x4eca <_Z7connecthPhj+0x5c>
    4ec8:	90 e0       	ldi	r25, 0x00	; 0
    4eca:	89 2f       	mov	r24, r25
    4ecc:	cf 91       	pop	r28
    4ece:	1f 91       	pop	r17
    4ed0:	0f 91       	pop	r16
    4ed2:	08 95       	ret

00004ed4 <_Z10disconnecth>:
    4ed4:	48 e0       	ldi	r20, 0x08	; 8
    4ed6:	68 2f       	mov	r22, r24
    4ed8:	8c ed       	ldi	r24, 0xDC	; 220
    4eda:	9b e0       	ldi	r25, 0x0B	; 11
    4edc:	01 c3       	rjmp	.+1538   	; 0x54e0 <_ZN10W5500Class9execCmdSnEh7SockCMD>

00004ede <_Z4sendhPKhj>:
    4ede:	cf 92       	push	r12
    4ee0:	df 92       	push	r13
    4ee2:	ef 92       	push	r14
    4ee4:	ff 92       	push	r15
    4ee6:	0f 93       	push	r16
    4ee8:	1f 93       	push	r17
    4eea:	cf 93       	push	r28
    4eec:	c8 2f       	mov	r28, r24
    4eee:	7b 01       	movw	r14, r22
    4ef0:	8a 01       	movw	r16, r20
    4ef2:	41 30       	cpi	r20, 0x01	; 1
    4ef4:	58 40       	sbci	r21, 0x08	; 8
    4ef6:	10 f0       	brcs	.+4      	; 0x4efc <_Z4sendhPKhj+0x1e>
    4ef8:	00 e0       	ldi	r16, 0x00	; 0
    4efa:	18 e0       	ldi	r17, 0x08	; 8
    4efc:	6c 2f       	mov	r22, r28
    4efe:	8c ed       	ldi	r24, 0xDC	; 220
    4f00:	9b e0       	ldi	r25, 0x0B	; 11
    4f02:	cd d1       	rcall	.+922    	; 0x529e <_ZN10W5500Class13getTXFreeSizeEh>
    4f04:	6c 01       	movw	r12, r24
    4f06:	63 e0       	ldi	r22, 0x03	; 3
    4f08:	70 e0       	ldi	r23, 0x00	; 0
    4f0a:	8c 2f       	mov	r24, r28
    4f0c:	3d df       	rcall	.-390    	; 0x4d88 <_ZN10W5500Class6readSnEhj>
    4f0e:	87 31       	cpi	r24, 0x17	; 23
    4f10:	11 f0       	breq	.+4      	; 0x4f16 <_Z4sendhPKhj+0x38>
    4f12:	8c 31       	cpi	r24, 0x1C	; 28
    4f14:	21 f4       	brne	.+8      	; 0x4f1e <_Z4sendhPKhj+0x40>
    4f16:	c0 16       	cp	r12, r16
    4f18:	d1 06       	cpc	r13, r17
    4f1a:	80 f3       	brcs	.-32     	; 0x4efc <_Z4sendhPKhj+0x1e>
    4f1c:	02 c0       	rjmp	.+4      	; 0x4f22 <_Z4sendhPKhj+0x44>
    4f1e:	00 e0       	ldi	r16, 0x00	; 0
    4f20:	10 e0       	ldi	r17, 0x00	; 0
    4f22:	98 01       	movw	r18, r16
    4f24:	a7 01       	movw	r20, r14
    4f26:	6c 2f       	mov	r22, r28
    4f28:	8c ed       	ldi	r24, 0xDC	; 220
    4f2a:	9b e0       	ldi	r25, 0x0B	; 11
    4f2c:	3d d2       	rcall	.+1146   	; 0x53a8 <_ZN10W5500Class20send_data_processingEhPKhj>
    4f2e:	40 e2       	ldi	r20, 0x20	; 32
    4f30:	6c 2f       	mov	r22, r28
    4f32:	8c ed       	ldi	r24, 0xDC	; 220
    4f34:	9b e0       	ldi	r25, 0x0B	; 11
    4f36:	d4 d2       	rcall	.+1448   	; 0x54e0 <_ZN10W5500Class9execCmdSnEh7SockCMD>
    4f38:	8c 2f       	mov	r24, r28
    4f3a:	2e df       	rcall	.-420    	; 0x4d98 <_ZN10W5500Class8readSnIREh>
    4f3c:	84 fd       	sbrc	r24, 4
    4f3e:	0b c0       	rjmp	.+22     	; 0x4f56 <_Z4sendhPKhj+0x78>
    4f40:	63 e0       	ldi	r22, 0x03	; 3
    4f42:	70 e0       	ldi	r23, 0x00	; 0
    4f44:	8c 2f       	mov	r24, r28
    4f46:	20 df       	rcall	.-448    	; 0x4d88 <_ZN10W5500Class6readSnEhj>
    4f48:	81 11       	cpse	r24, r1
    4f4a:	f6 cf       	rjmp	.-20     	; 0x4f38 <_Z4sendhPKhj+0x5a>
    4f4c:	8c 2f       	mov	r24, r28
    4f4e:	51 df       	rcall	.-350    	; 0x4df2 <_Z5closeh>
    4f50:	80 e0       	ldi	r24, 0x00	; 0
    4f52:	90 e0       	ldi	r25, 0x00	; 0
    4f54:	04 c0       	rjmp	.+8      	; 0x4f5e <_Z4sendhPKhj+0x80>
    4f56:	60 e1       	ldi	r22, 0x10	; 16
    4f58:	8c 2f       	mov	r24, r28
    4f5a:	38 df       	rcall	.-400    	; 0x4dcc <_ZN10W5500Class9writeSnIREhh>
    4f5c:	c8 01       	movw	r24, r16
    4f5e:	cf 91       	pop	r28
    4f60:	1f 91       	pop	r17
    4f62:	0f 91       	pop	r16
    4f64:	ff 90       	pop	r15
    4f66:	ef 90       	pop	r14
    4f68:	df 90       	pop	r13
    4f6a:	cf 90       	pop	r12
    4f6c:	08 95       	ret

00004f6e <_Z4recvhPhi>:
    4f6e:	cf 92       	push	r12
    4f70:	df 92       	push	r13
    4f72:	ef 92       	push	r14
    4f74:	ff 92       	push	r15
    4f76:	0f 93       	push	r16
    4f78:	1f 93       	push	r17
    4f7a:	cf 93       	push	r28
    4f7c:	df 93       	push	r29
    4f7e:	18 2f       	mov	r17, r24
    4f80:	6b 01       	movw	r12, r22
    4f82:	7a 01       	movw	r14, r20
    4f84:	68 2f       	mov	r22, r24
    4f86:	8c ed       	ldi	r24, 0xDC	; 220
    4f88:	9b e0       	ldi	r25, 0x0B	; 11
    4f8a:	ba d1       	rcall	.+884    	; 0x5300 <_ZN10W5500Class17getRXReceivedSizeEh>
    4f8c:	ec 01       	movw	r28, r24
    4f8e:	00 97       	sbiw	r24, 0x00	; 0
    4f90:	91 f4       	brne	.+36     	; 0x4fb6 <_Z4recvhPhi+0x48>
    4f92:	63 e0       	ldi	r22, 0x03	; 3
    4f94:	70 e0       	ldi	r23, 0x00	; 0
    4f96:	81 2f       	mov	r24, r17
    4f98:	f7 de       	rcall	.-530    	; 0x4d88 <_ZN10W5500Class6readSnEhj>
    4f9a:	84 31       	cpi	r24, 0x14	; 20
    4f9c:	f9 f0       	breq	.+62     	; 0x4fdc <_Z4recvhPhi+0x6e>
    4f9e:	88 23       	and	r24, r24
    4fa0:	e9 f0       	breq	.+58     	; 0x4fdc <_Z4recvhPhi+0x6e>
    4fa2:	c1 e0       	ldi	r28, 0x01	; 1
    4fa4:	d0 e0       	ldi	r29, 0x00	; 0
    4fa6:	8c 31       	cpi	r24, 0x1C	; 28
    4fa8:	11 f4       	brne	.+4      	; 0x4fae <_Z4recvhPhi+0x40>
    4faa:	c0 e0       	ldi	r28, 0x00	; 0
    4fac:	d0 e0       	ldi	r29, 0x00	; 0
    4fae:	d1 95       	neg	r29
    4fb0:	c1 95       	neg	r28
    4fb2:	d1 09       	sbc	r29, r1
    4fb4:	13 c0       	rjmp	.+38     	; 0x4fdc <_Z4recvhPhi+0x6e>
    4fb6:	e8 16       	cp	r14, r24
    4fb8:	f9 06       	cpc	r15, r25
    4fba:	0c f4       	brge	.+2      	; 0x4fbe <_Z4recvhPhi+0x50>
    4fbc:	e7 01       	movw	r28, r14
    4fbe:	1c 16       	cp	r1, r28
    4fc0:	1d 06       	cpc	r1, r29
    4fc2:	64 f4       	brge	.+24     	; 0x4fdc <_Z4recvhPhi+0x6e>
    4fc4:	00 e0       	ldi	r16, 0x00	; 0
    4fc6:	9e 01       	movw	r18, r28
    4fc8:	a6 01       	movw	r20, r12
    4fca:	61 2f       	mov	r22, r17
    4fcc:	8c ed       	ldi	r24, 0xDC	; 220
    4fce:	9b e0       	ldi	r25, 0x0B	; 11
    4fd0:	3a d2       	rcall	.+1140   	; 0x5446 <_ZN10W5500Class20recv_data_processingEhPhjh>
    4fd2:	40 e4       	ldi	r20, 0x40	; 64
    4fd4:	61 2f       	mov	r22, r17
    4fd6:	8c ed       	ldi	r24, 0xDC	; 220
    4fd8:	9b e0       	ldi	r25, 0x0B	; 11
    4fda:	82 d2       	rcall	.+1284   	; 0x54e0 <_ZN10W5500Class9execCmdSnEh7SockCMD>
    4fdc:	ce 01       	movw	r24, r28
    4fde:	df 91       	pop	r29
    4fe0:	cf 91       	pop	r28
    4fe2:	1f 91       	pop	r17
    4fe4:	0f 91       	pop	r16
    4fe6:	ff 90       	pop	r15
    4fe8:	ef 90       	pop	r14
    4fea:	df 90       	pop	r13
    4fec:	cf 90       	pop	r12
    4fee:	08 95       	ret

00004ff0 <_Z4peekhPh>:
    4ff0:	0f 93       	push	r16
    4ff2:	ab 01       	movw	r20, r22
    4ff4:	01 e0       	ldi	r16, 0x01	; 1
    4ff6:	21 e0       	ldi	r18, 0x01	; 1
    4ff8:	30 e0       	ldi	r19, 0x00	; 0
    4ffa:	68 2f       	mov	r22, r24
    4ffc:	8c ed       	ldi	r24, 0xDC	; 220
    4ffe:	9b e0       	ldi	r25, 0x0B	; 11
    5000:	22 d2       	rcall	.+1092   	; 0x5446 <_ZN10W5500Class20recv_data_processingEhPhjh>
    5002:	81 e0       	ldi	r24, 0x01	; 1
    5004:	90 e0       	ldi	r25, 0x00	; 0
    5006:	0f 91       	pop	r16
    5008:	08 95       	ret

0000500a <_Z5flushh>:
    500a:	08 95       	ret

0000500c <_Z10bufferDatahjPKhj>:

uint16_t bufferData(SOCKET s, uint16_t offset, const uint8_t* buf, uint16_t len)
{
    500c:	af 92       	push	r10
    500e:	bf 92       	push	r11
    5010:	cf 92       	push	r12
    5012:	df 92       	push	r13
    5014:	ff 92       	push	r15
    5016:	0f 93       	push	r16
    5018:	1f 93       	push	r17
    501a:	cf 93       	push	r28
    501c:	df 93       	push	r29
    501e:	f8 2e       	mov	r15, r24
    5020:	6b 01       	movw	r12, r22
    5022:	5a 01       	movw	r10, r20
    5024:	e9 01       	movw	r28, r18
  uint16_t ret =0;
  if (len > w5500.getTXFreeSize(s))
    5026:	68 2f       	mov	r22, r24
    5028:	8c ed       	ldi	r24, 0xDC	; 220
    502a:	9b e0       	ldi	r25, 0x0B	; 11
    502c:	38 d1       	rcall	.+624    	; 0x529e <_ZN10W5500Class13getTXFreeSizeEh>
    502e:	8c 17       	cp	r24, r28
    5030:	9d 07       	cpc	r25, r29
    5032:	28 f4       	brcc	.+10     	; 0x503e <_Z10bufferDatahjPKhj+0x32>
  {
    ret = w5500.getTXFreeSize(s); // check size not to exceed MAX size.
    5034:	6f 2d       	mov	r22, r15
    5036:	8c ed       	ldi	r24, 0xDC	; 220
    5038:	9b e0       	ldi	r25, 0x0B	; 11
    503a:	31 d1       	rcall	.+610    	; 0x529e <_ZN10W5500Class13getTXFreeSizeEh>
    503c:	ec 01       	movw	r28, r24
  }
  else
  {
    ret = len;
  }
  w5500.send_data_processing_offset(s, offset, buf, ret);
    503e:	8e 01       	movw	r16, r28
    5040:	95 01       	movw	r18, r10
    5042:	a6 01       	movw	r20, r12
    5044:	6f 2d       	mov	r22, r15
    5046:	8c ed       	ldi	r24, 0xDC	; 220
    5048:	9b e0       	ldi	r25, 0x0B	; 11
    504a:	74 d1       	rcall	.+744    	; 0x5334 <_ZN10W5500Class27send_data_processing_offsetEhjPKhj>
  return ret;
}
    504c:	ce 01       	movw	r24, r28
    504e:	df 91       	pop	r29
    5050:	cf 91       	pop	r28
    5052:	1f 91       	pop	r17
    5054:	0f 91       	pop	r16
    5056:	ff 90       	pop	r15
    5058:	df 90       	pop	r13
    505a:	cf 90       	pop	r12
    505c:	bf 90       	pop	r11
    505e:	af 90       	pop	r10
    5060:	08 95       	ret

00005062 <_Z8startUDPhPhj>:

int startUDP(SOCKET s, uint8_t* addr, uint16_t port)
{
    5062:	0f 93       	push	r16
    5064:	1f 93       	push	r17
    5066:	cf 93       	push	r28
    5068:	fb 01       	movw	r30, r22
  if
    506a:	90 81       	ld	r25, Z
    506c:	91 11       	cpse	r25, r1
    506e:	09 c0       	rjmp	.+18     	; 0x5082 <_Z8startUDPhPhj+0x20>
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
    5070:	91 81       	ldd	r25, Z+1	; 0x01
    5072:	91 11       	cpse	r25, r1
    5074:	06 c0       	rjmp	.+12     	; 0x5082 <_Z8startUDPhPhj+0x20>
    5076:	92 81       	ldd	r25, Z+2	; 0x02
    5078:	91 11       	cpse	r25, r1
    507a:	03 c0       	rjmp	.+6      	; 0x5082 <_Z8startUDPhPhj+0x20>
    507c:	93 81       	ldd	r25, Z+3	; 0x03
    507e:	99 23       	and	r25, r25
    5080:	69 f0       	breq	.+26     	; 0x509c <_Z8startUDPhPhj+0x3a>
    5082:	41 15       	cp	r20, r1
    5084:	51 05       	cpc	r21, r1
    5086:	51 f0       	breq	.+20     	; 0x509c <_Z8startUDPhPhj+0x3a>
    5088:	8a 01       	movw	r16, r20
    508a:	bf 01       	movw	r22, r30
    508c:	c8 2f       	mov	r28, r24
  {
    return 0;
  }
  else
  {
    w5500.writeSnDIPR(s, addr);
    508e:	71 de       	rcall	.-798    	; 0x4d72 <_ZN10W5500Class11writeSnDIPREhPh>
    w5500.writeSnDPORT(s, port);
    5090:	b8 01       	movw	r22, r16
    5092:	8c 2f       	mov	r24, r28
    5094:	9f de       	rcall	.-706    	; 0x4dd4 <_ZN10W5500Class12writeSnDPORTEhj>
    return 1;
    5096:	81 e0       	ldi	r24, 0x01	; 1
    5098:	90 e0       	ldi	r25, 0x00	; 0
    509a:	02 c0       	rjmp	.+4      	; 0x50a0 <_Z8startUDPhPhj+0x3e>
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
     ((port == 0x00))
    ) 
  {
    return 0;
    509c:	80 e0       	ldi	r24, 0x00	; 0
    509e:	90 e0       	ldi	r25, 0x00	; 0
  {
    w5500.writeSnDIPR(s, addr);
    w5500.writeSnDPORT(s, port);
    return 1;
  }
}
    50a0:	cf 91       	pop	r28
    50a2:	1f 91       	pop	r17
    50a4:	0f 91       	pop	r16
    50a6:	08 95       	ret

000050a8 <_Z7sendUDPh>:

int sendUDP(SOCKET s)
{
    50a8:	cf 93       	push	r28
    50aa:	c8 2f       	mov	r28, r24
  w5500.execCmdSn(s, Sock_SEND);
    50ac:	40 e2       	ldi	r20, 0x20	; 32
    50ae:	68 2f       	mov	r22, r24
    50b0:	8c ed       	ldi	r24, 0xDC	; 220
    50b2:	9b e0       	ldi	r25, 0x0B	; 11
    50b4:	15 d2       	rcall	.+1066   	; 0x54e0 <_ZN10W5500Class9execCmdSnEh7SockCMD>
		
  /* +2008.01 bj */
  while ( (w5500.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
    50b6:	8c 2f       	mov	r24, r28
    50b8:	6f de       	rcall	.-802    	; 0x4d98 <_ZN10W5500Class8readSnIREh>
    50ba:	84 fd       	sbrc	r24, 4
    50bc:	0a c0       	rjmp	.+20     	; 0x50d2 <_Z7sendUDPh+0x2a>
  {
    if (w5500.readSnIR(s) & SnIR::TIMEOUT)
    50be:	8c 2f       	mov	r24, r28
    50c0:	6b de       	rcall	.-810    	; 0x4d98 <_ZN10W5500Class8readSnIREh>
    50c2:	83 ff       	sbrs	r24, 3
    50c4:	f8 cf       	rjmp	.-16     	; 0x50b6 <_Z7sendUDPh+0xe>
    {
      /* +2008.01 [bj]: clear interrupt */
      w5500.writeSnIR(s, (SnIR::SEND_OK|SnIR::TIMEOUT));
    50c6:	68 e1       	ldi	r22, 0x18	; 24
    50c8:	8c 2f       	mov	r24, r28
    50ca:	80 de       	rcall	.-768    	; 0x4dcc <_ZN10W5500Class9writeSnIREhh>
    50cc:	80 e0       	ldi	r24, 0x00	; 0
      return 0;
    50ce:	90 e0       	ldi	r25, 0x00	; 0
    50d0:	05 c0       	rjmp	.+10     	; 0x50dc <_Z7sendUDPh+0x34>
    }
  }

  /* +2008.01 bj */	
  w5500.writeSnIR(s, SnIR::SEND_OK);
    50d2:	60 e1       	ldi	r22, 0x10	; 16
    50d4:	8c 2f       	mov	r24, r28
    50d6:	7a de       	rcall	.-780    	; 0x4dcc <_ZN10W5500Class9writeSnIREhh>
    50d8:	81 e0       	ldi	r24, 0x01	; 1

  /* Sent ok */
  return 1;
    50da:	90 e0       	ldi	r25, 0x00	; 0
    50dc:	cf 91       	pop	r28
}
    50de:	08 95       	ret

000050e0 <_ZN8SPIClass16beginTransactionE11SPISettings>:
    50e0:	20 91 df 0b 	lds	r18, 0x0BDF	; 0x800bdf <_ZN8SPIClass13interruptModeE>
    uint8_t _data = SPI.transfer(0);
    resetSS();
    SPI.endTransaction();

    return _data;
}
    50e4:	22 23       	and	r18, r18
    50e6:	99 f0       	breq	.+38     	; 0x510e <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    50e8:	4f b7       	in	r20, 0x3f	; 63
    50ea:	f8 94       	cli
    50ec:	20 91 df 0b 	lds	r18, 0x0BDF	; 0x800bdf <_ZN8SPIClass13interruptModeE>
    50f0:	21 30       	cpi	r18, 0x01	; 1
    50f2:	59 f4       	brne	.+22     	; 0x510a <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
    50f4:	2d b3       	in	r18, 0x1d	; 29
    50f6:	20 93 dd 0b 	sts	0x0BDD, r18	; 0x800bdd <_ZN8SPIClass13interruptSaveE>
    50fa:	3d b3       	in	r19, 0x1d	; 29
    50fc:	20 91 de 0b 	lds	r18, 0x0BDE	; 0x800bde <_ZN8SPIClass13interruptMaskE>
    5100:	20 95       	com	r18
    5102:	23 23       	and	r18, r19
    5104:	2d bb       	out	0x1d, r18	; 29
    5106:	4f bf       	out	0x3f, r20	; 63
    5108:	02 c0       	rjmp	.+4      	; 0x510e <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    510a:	40 93 dd 0b 	sts	0x0BDD, r20	; 0x800bdd <_ZN8SPIClass13interruptSaveE>
    510e:	8c bd       	out	0x2c, r24	; 44
    5110:	9d bd       	out	0x2d, r25	; 45
    5112:	08 95       	ret

00005114 <_ZN8SPIClass8transferEh>:
    5114:	8e bd       	out	0x2e, r24	; 46
    5116:	00 00       	nop
    5118:	0d b4       	in	r0, 0x2d	; 45
    511a:	07 fe       	sbrs	r0, 7
    511c:	fd cf       	rjmp	.-6      	; 0x5118 <_ZN8SPIClass8transferEh+0x4>
    511e:	8e b5       	in	r24, 0x2e	; 46
    5120:	08 95       	ret

00005122 <_ZN8SPIClass14endTransactionEv>:
    5122:	80 91 df 0b 	lds	r24, 0x0BDF	; 0x800bdf <_ZN8SPIClass13interruptModeE>
    5126:	88 23       	and	r24, r24
    5128:	61 f0       	breq	.+24     	; 0x5142 <_ZN8SPIClass14endTransactionEv+0x20>
    512a:	9f b7       	in	r25, 0x3f	; 63
    512c:	f8 94       	cli
    512e:	20 91 df 0b 	lds	r18, 0x0BDF	; 0x800bdf <_ZN8SPIClass13interruptModeE>
    5132:	80 91 dd 0b 	lds	r24, 0x0BDD	; 0x800bdd <_ZN8SPIClass13interruptSaveE>
    5136:	21 30       	cpi	r18, 0x01	; 1
    5138:	19 f4       	brne	.+6      	; 0x5140 <_ZN8SPIClass14endTransactionEv+0x1e>
    513a:	8d bb       	out	0x1d, r24	; 29
    513c:	9f bf       	out	0x3f, r25	; 63
    513e:	08 95       	ret
    5140:	8f bf       	out	0x3f, r24	; 63
    5142:	08 95       	ret

00005144 <_ZN10W5500Class5setSSEv>:
    5144:	44 98       	cbi	0x08, 4	; 8
    5146:	08 95       	ret

00005148 <_ZN10W5500Class7resetSSEv>:
    5148:	44 9a       	sbi	0x08, 4	; 8
    514a:	08 95       	ret

0000514c <_ZN10W5500Class5writeEjhh>:
    514c:	0f 93       	push	r16
    514e:	1f 93       	push	r17
    5150:	cf 93       	push	r28
    5152:	df 93       	push	r29
    5154:	18 2f       	mov	r17, r24
    5156:	09 2f       	mov	r16, r25
    5158:	d6 2f       	mov	r29, r22
    515a:	c4 2f       	mov	r28, r20
    515c:	80 91 da 0b 	lds	r24, 0x0BDA	; 0x800bda <wiznet_SPI_settings>
    5160:	90 91 db 0b 	lds	r25, 0x0BDB	; 0x800bdb <wiznet_SPI_settings+0x1>
    5164:	bd df       	rcall	.-134    	; 0x50e0 <_ZN8SPIClass16beginTransactionE11SPISettings>
    5166:	ee df       	rcall	.-36     	; 0x5144 <_ZN10W5500Class5setSSEv>
    5168:	80 2f       	mov	r24, r16
    516a:	d4 df       	rcall	.-88     	; 0x5114 <_ZN8SPIClass8transferEh>
    516c:	81 2f       	mov	r24, r17
    516e:	d2 df       	rcall	.-92     	; 0x5114 <_ZN8SPIClass8transferEh>
    5170:	8d 2f       	mov	r24, r29
    5172:	d0 df       	rcall	.-96     	; 0x5114 <_ZN8SPIClass8transferEh>
    5174:	8c 2f       	mov	r24, r28
    5176:	ce df       	rcall	.-100    	; 0x5114 <_ZN8SPIClass8transferEh>
    5178:	e7 df       	rcall	.-50     	; 0x5148 <_ZN10W5500Class7resetSSEv>
    517a:	d3 df       	rcall	.-90     	; 0x5122 <_ZN8SPIClass14endTransactionEv>
    517c:	81 e0       	ldi	r24, 0x01	; 1
    517e:	df 91       	pop	r29
    5180:	cf 91       	pop	r28
    5182:	1f 91       	pop	r17
    5184:	0f 91       	pop	r16
    5186:	08 95       	ret

00005188 <_ZN10W5500Class5writeEjhPKhj>:
    5188:	df 92       	push	r13
    518a:	ef 92       	push	r14
    518c:	ff 92       	push	r15
    518e:	0f 93       	push	r16
    5190:	1f 93       	push	r17
    5192:	cf 93       	push	r28
    5194:	df 93       	push	r29
    5196:	d8 2f       	mov	r29, r24
    5198:	d9 2e       	mov	r13, r25
    519a:	c6 2f       	mov	r28, r22
    519c:	7a 01       	movw	r14, r20
    519e:	89 01       	movw	r16, r18
    51a0:	80 91 da 0b 	lds	r24, 0x0BDA	; 0x800bda <wiznet_SPI_settings>
    51a4:	90 91 db 0b 	lds	r25, 0x0BDB	; 0x800bdb <wiznet_SPI_settings+0x1>
    51a8:	9b df       	rcall	.-202    	; 0x50e0 <_ZN8SPIClass16beginTransactionE11SPISettings>
    51aa:	cc df       	rcall	.-104    	; 0x5144 <_ZN10W5500Class5setSSEv>
    51ac:	8d 2d       	mov	r24, r13
    51ae:	b2 df       	rcall	.-156    	; 0x5114 <_ZN8SPIClass8transferEh>
    51b0:	8d 2f       	mov	r24, r29
    51b2:	b0 df       	rcall	.-160    	; 0x5114 <_ZN8SPIClass8transferEh>
    51b4:	8c 2f       	mov	r24, r28
    51b6:	ae df       	rcall	.-164    	; 0x5114 <_ZN8SPIClass8transferEh>
    51b8:	e7 01       	movw	r28, r14
    51ba:	e0 0e       	add	r14, r16
    51bc:	f1 1e       	adc	r15, r17
    51be:	ce 15       	cp	r28, r14
    51c0:	df 05       	cpc	r29, r15
    51c2:	19 f0       	breq	.+6      	; 0x51ca <_ZN10W5500Class5writeEjhPKhj+0x42>
    51c4:	89 91       	ld	r24, Y+
    51c6:	a6 df       	rcall	.-180    	; 0x5114 <_ZN8SPIClass8transferEh>
    51c8:	fa cf       	rjmp	.-12     	; 0x51be <_ZN10W5500Class5writeEjhPKhj+0x36>
    51ca:	be df       	rcall	.-132    	; 0x5148 <_ZN10W5500Class7resetSSEv>
    51cc:	aa df       	rcall	.-172    	; 0x5122 <_ZN8SPIClass14endTransactionEv>
    51ce:	c8 01       	movw	r24, r16
    51d0:	df 91       	pop	r29
    51d2:	cf 91       	pop	r28
    51d4:	1f 91       	pop	r17
    51d6:	0f 91       	pop	r16
    51d8:	ff 90       	pop	r15
    51da:	ef 90       	pop	r14
    51dc:	df 90       	pop	r13
    51de:	08 95       	ret

000051e0 <_ZN10W5500Class4readEjh>:
    51e0:	1f 93       	push	r17
    51e2:	cf 93       	push	r28
    51e4:	df 93       	push	r29
    51e6:	d8 2f       	mov	r29, r24
    51e8:	19 2f       	mov	r17, r25
    51ea:	c6 2f       	mov	r28, r22
    51ec:	80 91 da 0b 	lds	r24, 0x0BDA	; 0x800bda <wiznet_SPI_settings>
    51f0:	90 91 db 0b 	lds	r25, 0x0BDB	; 0x800bdb <wiznet_SPI_settings+0x1>
    51f4:	75 df       	rcall	.-278    	; 0x50e0 <_ZN8SPIClass16beginTransactionE11SPISettings>
    51f6:	a6 df       	rcall	.-180    	; 0x5144 <_ZN10W5500Class5setSSEv>
    51f8:	81 2f       	mov	r24, r17
    51fa:	8c df       	rcall	.-232    	; 0x5114 <_ZN8SPIClass8transferEh>
    51fc:	8d 2f       	mov	r24, r29
    51fe:	8a df       	rcall	.-236    	; 0x5114 <_ZN8SPIClass8transferEh>
    5200:	8c 2f       	mov	r24, r28
    5202:	88 df       	rcall	.-240    	; 0x5114 <_ZN8SPIClass8transferEh>
    5204:	80 e0       	ldi	r24, 0x00	; 0
    5206:	86 df       	rcall	.-244    	; 0x5114 <_ZN8SPIClass8transferEh>
    5208:	c8 2f       	mov	r28, r24
    520a:	9e df       	rcall	.-196    	; 0x5148 <_ZN10W5500Class7resetSSEv>
    520c:	8a df       	rcall	.-236    	; 0x5122 <_ZN8SPIClass14endTransactionEv>
    520e:	8c 2f       	mov	r24, r28
    5210:	df 91       	pop	r29
    5212:	cf 91       	pop	r28
    5214:	1f 91       	pop	r17
    5216:	08 95       	ret

00005218 <_ZN10W5500Class4initEh>:
    5218:	cf 93       	push	r28
    521a:	df 93       	push	r29
    521c:	60 93 d9 0b 	sts	0x0BD9, r22	; 0x800bd9 <SPI_CS>
    5220:	68 ee       	ldi	r22, 0xE8	; 232
    5222:	73 e0       	ldi	r23, 0x03	; 3
    5224:	80 e0       	ldi	r24, 0x00	; 0
    5226:	90 e0       	ldi	r25, 0x00	; 0
    5228:	0e 94 f9 35 	call	0x6bf2	; 0x6bf2 <delay>
    522c:	3c 9a       	sbi	0x07, 4	; 7
    522e:	10 d4       	rcall	.+2080   	; 0x5a50 <_ZN8SPIClass5beginEv>
    5230:	60 e0       	ldi	r22, 0x00	; 0
    5232:	80 e0       	ldi	r24, 0x00	; 0
    5234:	90 e0       	ldi	r25, 0x00	; 0
    5236:	d4 df       	rcall	.-88     	; 0x51e0 <_ZN10W5500Class4readEjh>
    5238:	48 2f       	mov	r20, r24
    523a:	40 68       	ori	r20, 0x80	; 128
    523c:	64 e0       	ldi	r22, 0x04	; 4
    523e:	80 e0       	ldi	r24, 0x00	; 0
    5240:	90 e0       	ldi	r25, 0x00	; 0
    5242:	84 df       	rcall	.-248    	; 0x514c <_ZN10W5500Class5writeEjhh>
    5244:	c0 e0       	ldi	r28, 0x00	; 0
    5246:	dc 2f       	mov	r29, r28
    5248:	d2 95       	swap	r29
    524a:	dd 0f       	add	r29, r29
    524c:	d0 7e       	andi	r29, 0xE0	; 224
    524e:	d4 5f       	subi	r29, 0xF4	; 244
    5250:	42 e0       	ldi	r20, 0x02	; 2
    5252:	6d 2f       	mov	r22, r29
    5254:	8e e1       	ldi	r24, 0x1E	; 30
    5256:	90 e0       	ldi	r25, 0x00	; 0
    5258:	79 df       	rcall	.-270    	; 0x514c <_ZN10W5500Class5writeEjhh>
    525a:	42 e0       	ldi	r20, 0x02	; 2
    525c:	6d 2f       	mov	r22, r29
    525e:	8f e1       	ldi	r24, 0x1F	; 31
    5260:	90 e0       	ldi	r25, 0x00	; 0
    5262:	74 df       	rcall	.-280    	; 0x514c <_ZN10W5500Class5writeEjhh>
    5264:	cf 5f       	subi	r28, 0xFF	; 255
    5266:	c8 30       	cpi	r28, 0x08	; 8
    5268:	71 f7       	brne	.-36     	; 0x5246 <_ZN10W5500Class4initEh+0x2e>
    526a:	df 91       	pop	r29
    526c:	cf 91       	pop	r28
    526e:	08 95       	ret

00005270 <_ZN10W5500Class12readSnTX_FSREh>:
    5270:	1f 93       	push	r17
    5272:	cf 93       	push	r28
    5274:	df 93       	push	r29
    5276:	18 2f       	mov	r17, r24
    5278:	60 e2       	ldi	r22, 0x20	; 32
    527a:	70 e0       	ldi	r23, 0x00	; 0
    527c:	85 dd       	rcall	.-1270   	; 0x4d88 <_ZN10W5500Class6readSnEhj>
    527e:	c8 2f       	mov	r28, r24
    5280:	d0 e0       	ldi	r29, 0x00	; 0
    5282:	dc 2f       	mov	r29, r28
    5284:	cc 27       	eor	r28, r28
    5286:	61 e2       	ldi	r22, 0x21	; 33
    5288:	70 e0       	ldi	r23, 0x00	; 0
    528a:	81 2f       	mov	r24, r17
    528c:	7d dd       	rcall	.-1286   	; 0x4d88 <_ZN10W5500Class6readSnEhj>
    528e:	9e 01       	movw	r18, r28
    5290:	28 0f       	add	r18, r24
    5292:	31 1d       	adc	r19, r1
    5294:	c9 01       	movw	r24, r18
    5296:	df 91       	pop	r29
    5298:	cf 91       	pop	r28
    529a:	1f 91       	pop	r17
    529c:	08 95       	ret

0000529e <_ZN10W5500Class13getTXFreeSizeEh>:
    529e:	ff 92       	push	r15
    52a0:	0f 93       	push	r16
    52a2:	1f 93       	push	r17
    52a4:	cf 93       	push	r28
    52a6:	df 93       	push	r29
    52a8:	f6 2e       	mov	r15, r22
    52aa:	c0 e0       	ldi	r28, 0x00	; 0
    52ac:	d0 e0       	ldi	r29, 0x00	; 0
    52ae:	8f 2d       	mov	r24, r15
    52b0:	df df       	rcall	.-66     	; 0x5270 <_ZN10W5500Class12readSnTX_FSREh>
    52b2:	8c 01       	movw	r16, r24
    52b4:	89 2b       	or	r24, r25
    52b6:	19 f0       	breq	.+6      	; 0x52be <_ZN10W5500Class13getTXFreeSizeEh+0x20>
    52b8:	8f 2d       	mov	r24, r15
    52ba:	da df       	rcall	.-76     	; 0x5270 <_ZN10W5500Class12readSnTX_FSREh>
    52bc:	ec 01       	movw	r28, r24
    52be:	c0 17       	cp	r28, r16
    52c0:	d1 07       	cpc	r29, r17
    52c2:	a9 f7       	brne	.-22     	; 0x52ae <_ZN10W5500Class13getTXFreeSizeEh+0x10>
    52c4:	ce 01       	movw	r24, r28
    52c6:	df 91       	pop	r29
    52c8:	cf 91       	pop	r28
    52ca:	1f 91       	pop	r17
    52cc:	0f 91       	pop	r16
    52ce:	ff 90       	pop	r15
    52d0:	08 95       	ret

000052d2 <_ZN10W5500Class12readSnRX_RSREh>:
    52d2:	1f 93       	push	r17
    52d4:	cf 93       	push	r28
    52d6:	df 93       	push	r29
    52d8:	18 2f       	mov	r17, r24
    52da:	66 e2       	ldi	r22, 0x26	; 38
    52dc:	70 e0       	ldi	r23, 0x00	; 0
    52de:	54 dd       	rcall	.-1368   	; 0x4d88 <_ZN10W5500Class6readSnEhj>
    52e0:	c8 2f       	mov	r28, r24
    52e2:	d0 e0       	ldi	r29, 0x00	; 0
    52e4:	dc 2f       	mov	r29, r28
    52e6:	cc 27       	eor	r28, r28
    52e8:	67 e2       	ldi	r22, 0x27	; 39
    52ea:	70 e0       	ldi	r23, 0x00	; 0
    52ec:	81 2f       	mov	r24, r17
    52ee:	4c dd       	rcall	.-1384   	; 0x4d88 <_ZN10W5500Class6readSnEhj>
    52f0:	9e 01       	movw	r18, r28
    52f2:	28 0f       	add	r18, r24
    52f4:	31 1d       	adc	r19, r1
    52f6:	c9 01       	movw	r24, r18
    52f8:	df 91       	pop	r29
    52fa:	cf 91       	pop	r28
    52fc:	1f 91       	pop	r17
    52fe:	08 95       	ret

00005300 <_ZN10W5500Class17getRXReceivedSizeEh>:
    5300:	ff 92       	push	r15
    5302:	0f 93       	push	r16
    5304:	1f 93       	push	r17
    5306:	cf 93       	push	r28
    5308:	df 93       	push	r29
    530a:	f6 2e       	mov	r15, r22
    530c:	c0 e0       	ldi	r28, 0x00	; 0
    530e:	d0 e0       	ldi	r29, 0x00	; 0
    5310:	8f 2d       	mov	r24, r15
    5312:	df df       	rcall	.-66     	; 0x52d2 <_ZN10W5500Class12readSnRX_RSREh>
    5314:	8c 01       	movw	r16, r24
    5316:	89 2b       	or	r24, r25
    5318:	19 f0       	breq	.+6      	; 0x5320 <_ZN10W5500Class17getRXReceivedSizeEh+0x20>
    531a:	8f 2d       	mov	r24, r15
    531c:	da df       	rcall	.-76     	; 0x52d2 <_ZN10W5500Class12readSnRX_RSREh>
    531e:	ec 01       	movw	r28, r24
    5320:	c0 17       	cp	r28, r16
    5322:	d1 07       	cpc	r29, r17
    5324:	a9 f7       	brne	.-22     	; 0x5310 <_ZN10W5500Class17getRXReceivedSizeEh+0x10>
    5326:	ce 01       	movw	r24, r28
    5328:	df 91       	pop	r29
    532a:	cf 91       	pop	r28
    532c:	1f 91       	pop	r17
    532e:	0f 91       	pop	r16
    5330:	ff 90       	pop	r15
    5332:	08 95       	ret

00005334 <_ZN10W5500Class27send_data_processing_offsetEhjPKhj>:
    5334:	af 92       	push	r10
    5336:	bf 92       	push	r11
    5338:	df 92       	push	r13
    533a:	ef 92       	push	r14
    533c:	ff 92       	push	r15
    533e:	0f 93       	push	r16
    5340:	1f 93       	push	r17
    5342:	cf 93       	push	r28
    5344:	df 93       	push	r29
    5346:	d6 2e       	mov	r13, r22
    5348:	7a 01       	movw	r14, r20
    534a:	59 01       	movw	r10, r18
    534c:	64 e2       	ldi	r22, 0x24	; 36
    534e:	70 e0       	ldi	r23, 0x00	; 0
    5350:	8d 2d       	mov	r24, r13
    5352:	1a dd       	rcall	.-1484   	; 0x4d88 <_ZN10W5500Class6readSnEhj>
    5354:	c8 2f       	mov	r28, r24
    5356:	65 e2       	ldi	r22, 0x25	; 37
    5358:	70 e0       	ldi	r23, 0x00	; 0
    535a:	8d 2d       	mov	r24, r13
    535c:	15 dd       	rcall	.-1494   	; 0x4d88 <_ZN10W5500Class6readSnEhj>
    535e:	d0 e0       	ldi	r29, 0x00	; 0
    5360:	dc 2f       	mov	r29, r28
    5362:	cc 27       	eor	r28, r28
    5364:	e8 0e       	add	r14, r24
    5366:	f1 1c       	adc	r15, r1
    5368:	ce 0d       	add	r28, r14
    536a:	df 1d       	adc	r29, r15
    536c:	6d 2d       	mov	r22, r13
    536e:	62 95       	swap	r22
    5370:	66 0f       	add	r22, r22
    5372:	60 7e       	andi	r22, 0xE0	; 224
    5374:	6c 5e       	subi	r22, 0xEC	; 236
    5376:	98 01       	movw	r18, r16
    5378:	a5 01       	movw	r20, r10
    537a:	ce 01       	movw	r24, r28
    537c:	05 df       	rcall	.-502    	; 0x5188 <_ZN10W5500Class5writeEjhPKhj>
    537e:	c0 0f       	add	r28, r16
    5380:	d1 1f       	adc	r29, r17
    5382:	4d 2f       	mov	r20, r29
    5384:	64 e2       	ldi	r22, 0x24	; 36
    5386:	70 e0       	ldi	r23, 0x00	; 0
    5388:	8d 2d       	mov	r24, r13
    538a:	09 dd       	rcall	.-1518   	; 0x4d9e <_ZN10W5500Class7writeSnEhjh>
    538c:	4c 2f       	mov	r20, r28
    538e:	65 e2       	ldi	r22, 0x25	; 37
    5390:	70 e0       	ldi	r23, 0x00	; 0
    5392:	8d 2d       	mov	r24, r13
    5394:	df 91       	pop	r29
    5396:	cf 91       	pop	r28
    5398:	1f 91       	pop	r17
    539a:	0f 91       	pop	r16
    539c:	ff 90       	pop	r15
    539e:	ef 90       	pop	r14
    53a0:	df 90       	pop	r13
    53a2:	bf 90       	pop	r11
    53a4:	af 90       	pop	r10
    53a6:	fb cc       	rjmp	.-1546   	; 0x4d9e <_ZN10W5500Class7writeSnEhjh>

000053a8 <_ZN10W5500Class20send_data_processingEhPKhj>:
    53a8:	0f 93       	push	r16
    53aa:	1f 93       	push	r17
    53ac:	89 01       	movw	r16, r18
    53ae:	9a 01       	movw	r18, r20
    53b0:	40 e0       	ldi	r20, 0x00	; 0
    53b2:	50 e0       	ldi	r21, 0x00	; 0
    53b4:	bf df       	rcall	.-130    	; 0x5334 <_ZN10W5500Class27send_data_processing_offsetEhjPKhj>
    53b6:	1f 91       	pop	r17
    53b8:	0f 91       	pop	r16
    53ba:	08 95       	ret

000053bc <_ZN10W5500Class4readEjhPhj>:
    53bc:	df 92       	push	r13
    53be:	ef 92       	push	r14
    53c0:	ff 92       	push	r15
    53c2:	0f 93       	push	r16
    53c4:	1f 93       	push	r17
    53c6:	cf 93       	push	r28
    53c8:	df 93       	push	r29
    53ca:	d8 2f       	mov	r29, r24
    53cc:	d9 2e       	mov	r13, r25
    53ce:	c6 2f       	mov	r28, r22
    53d0:	7a 01       	movw	r14, r20
    53d2:	89 01       	movw	r16, r18
    53d4:	80 91 da 0b 	lds	r24, 0x0BDA	; 0x800bda <wiznet_SPI_settings>
    53d8:	90 91 db 0b 	lds	r25, 0x0BDB	; 0x800bdb <wiznet_SPI_settings+0x1>
    53dc:	81 de       	rcall	.-766    	; 0x50e0 <_ZN8SPIClass16beginTransactionE11SPISettings>
    53de:	b2 de       	rcall	.-668    	; 0x5144 <_ZN10W5500Class5setSSEv>
    53e0:	8d 2d       	mov	r24, r13
    53e2:	98 de       	rcall	.-720    	; 0x5114 <_ZN8SPIClass8transferEh>
    53e4:	8d 2f       	mov	r24, r29
    53e6:	96 de       	rcall	.-724    	; 0x5114 <_ZN8SPIClass8transferEh>
    53e8:	8c 2f       	mov	r24, r28
    53ea:	94 de       	rcall	.-728    	; 0x5114 <_ZN8SPIClass8transferEh>
    53ec:	e7 01       	movw	r28, r14
    53ee:	e0 0e       	add	r14, r16
    53f0:	f1 1e       	adc	r15, r17
    53f2:	ce 15       	cp	r28, r14
    53f4:	df 05       	cpc	r29, r15
    53f6:	21 f0       	breq	.+8      	; 0x5400 <_ZN10W5500Class4readEjhPhj+0x44>
    53f8:	80 e0       	ldi	r24, 0x00	; 0
    53fa:	8c de       	rcall	.-744    	; 0x5114 <_ZN8SPIClass8transferEh>
    53fc:	89 93       	st	Y+, r24
    53fe:	f9 cf       	rjmp	.-14     	; 0x53f2 <_ZN10W5500Class4readEjhPhj+0x36>
    5400:	a3 de       	rcall	.-698    	; 0x5148 <_ZN10W5500Class7resetSSEv>
    5402:	8f de       	rcall	.-738    	; 0x5122 <_ZN8SPIClass14endTransactionEv>
    5404:	c8 01       	movw	r24, r16
    5406:	df 91       	pop	r29
    5408:	cf 91       	pop	r28
    540a:	1f 91       	pop	r17
    540c:	0f 91       	pop	r16
    540e:	ff 90       	pop	r15
    5410:	ef 90       	pop	r14
    5412:	df 90       	pop	r13
    5414:	08 95       	ret

00005416 <_ZN10W5500Class9read_dataEhjPVhj>:
    5416:	0f 93       	push	r16
    5418:	1f 93       	push	r17
    541a:	cf 93       	push	r28
    541c:	df 93       	push	r29
    541e:	00 d0       	rcall	.+0      	; 0x5420 <_ZN10W5500Class9read_dataEhjPVhj+0xa>
    5420:	cd b7       	in	r28, 0x3d	; 61
    5422:	de b7       	in	r29, 0x3e	; 62
    5424:	5a 83       	std	Y+2, r21	; 0x02
    5426:	49 83       	std	Y+1, r20	; 0x01
    5428:	a9 01       	movw	r20, r18
    542a:	98 01       	movw	r18, r16
    542c:	89 81       	ldd	r24, Y+1	; 0x01
    542e:	9a 81       	ldd	r25, Y+2	; 0x02
    5430:	62 95       	swap	r22
    5432:	66 0f       	add	r22, r22
    5434:	60 7e       	andi	r22, 0xE0	; 224
    5436:	68 5e       	subi	r22, 0xE8	; 232
    5438:	0f 90       	pop	r0
    543a:	0f 90       	pop	r0
    543c:	df 91       	pop	r29
    543e:	cf 91       	pop	r28
    5440:	1f 91       	pop	r17
    5442:	0f 91       	pop	r16
    5444:	bb cf       	rjmp	.-138    	; 0x53bc <_ZN10W5500Class4readEjhPhj>

00005446 <_ZN10W5500Class20recv_data_processingEhPhjh>:
    5446:	8f 92       	push	r8
    5448:	9f 92       	push	r9
    544a:	af 92       	push	r10
    544c:	bf 92       	push	r11
    544e:	cf 92       	push	r12
    5450:	df 92       	push	r13
    5452:	ef 92       	push	r14
    5454:	ff 92       	push	r15
    5456:	0f 93       	push	r16
    5458:	1f 93       	push	r17
    545a:	cf 93       	push	r28
    545c:	df 93       	push	r29
    545e:	6c 01       	movw	r12, r24
    5460:	96 2e       	mov	r9, r22
    5462:	5a 01       	movw	r10, r20
    5464:	79 01       	movw	r14, r18
    5466:	80 2e       	mov	r8, r16
    5468:	68 e2       	ldi	r22, 0x28	; 40
    546a:	70 e0       	ldi	r23, 0x00	; 0
    546c:	89 2d       	mov	r24, r9
    546e:	8c dc       	rcall	.-1768   	; 0x4d88 <_ZN10W5500Class6readSnEhj>
    5470:	08 2f       	mov	r16, r24
    5472:	69 e2       	ldi	r22, 0x29	; 41
    5474:	70 e0       	ldi	r23, 0x00	; 0
    5476:	89 2d       	mov	r24, r9
    5478:	87 dc       	rcall	.-1778   	; 0x4d88 <_ZN10W5500Class6readSnEhj>
    547a:	10 e0       	ldi	r17, 0x00	; 0
    547c:	10 2f       	mov	r17, r16
    547e:	00 27       	eor	r16, r16
    5480:	e8 01       	movw	r28, r16
    5482:	c8 0f       	add	r28, r24
    5484:	d1 1d       	adc	r29, r1
    5486:	87 01       	movw	r16, r14
    5488:	95 01       	movw	r18, r10
    548a:	ae 01       	movw	r20, r28
    548c:	69 2d       	mov	r22, r9
    548e:	c6 01       	movw	r24, r12
    5490:	c2 df       	rcall	.-124    	; 0x5416 <_ZN10W5500Class9read_dataEhjPVhj>
    5492:	81 10       	cpse	r8, r1
    5494:	18 c0       	rjmp	.+48     	; 0x54c6 <_ZN10W5500Class20recv_data_processingEhPhjh+0x80>
    5496:	0c 0f       	add	r16, r28
    5498:	1d 1f       	adc	r17, r29
    549a:	41 2f       	mov	r20, r17
    549c:	68 e2       	ldi	r22, 0x28	; 40
    549e:	70 e0       	ldi	r23, 0x00	; 0
    54a0:	89 2d       	mov	r24, r9
    54a2:	7d dc       	rcall	.-1798   	; 0x4d9e <_ZN10W5500Class7writeSnEhjh>
    54a4:	40 2f       	mov	r20, r16
    54a6:	69 e2       	ldi	r22, 0x29	; 41
    54a8:	70 e0       	ldi	r23, 0x00	; 0
    54aa:	89 2d       	mov	r24, r9
    54ac:	df 91       	pop	r29
    54ae:	cf 91       	pop	r28
    54b0:	1f 91       	pop	r17
    54b2:	0f 91       	pop	r16
    54b4:	ff 90       	pop	r15
    54b6:	ef 90       	pop	r14
    54b8:	df 90       	pop	r13
    54ba:	cf 90       	pop	r12
    54bc:	bf 90       	pop	r11
    54be:	af 90       	pop	r10
    54c0:	9f 90       	pop	r9
    54c2:	8f 90       	pop	r8
    54c4:	6c cc       	rjmp	.-1832   	; 0x4d9e <_ZN10W5500Class7writeSnEhjh>
    54c6:	df 91       	pop	r29
    54c8:	cf 91       	pop	r28
    54ca:	1f 91       	pop	r17
    54cc:	0f 91       	pop	r16
    54ce:	ff 90       	pop	r15
    54d0:	ef 90       	pop	r14
    54d2:	df 90       	pop	r13
    54d4:	cf 90       	pop	r12
    54d6:	bf 90       	pop	r11
    54d8:	af 90       	pop	r10
    54da:	9f 90       	pop	r9
    54dc:	8f 90       	pop	r8
    54de:	08 95       	ret

000054e0 <_ZN10W5500Class9execCmdSnEh7SockCMD>:
    54e0:	cf 93       	push	r28
    54e2:	c6 2f       	mov	r28, r22
    54e4:	61 e0       	ldi	r22, 0x01	; 1
    54e6:	70 e0       	ldi	r23, 0x00	; 0
    54e8:	8c 2f       	mov	r24, r28
    54ea:	59 dc       	rcall	.-1870   	; 0x4d9e <_ZN10W5500Class7writeSnEhjh>
    54ec:	61 e0       	ldi	r22, 0x01	; 1
    54ee:	70 e0       	ldi	r23, 0x00	; 0
    54f0:	8c 2f       	mov	r24, r28
    54f2:	4a dc       	rcall	.-1900   	; 0x4d88 <_ZN10W5500Class6readSnEhj>
    54f4:	81 11       	cpse	r24, r1
    54f6:	fa cf       	rjmp	.-12     	; 0x54ec <_ZN10W5500Class9execCmdSnEh7SockCMD+0xc>
    54f8:	cf 91       	pop	r28
    54fa:	08 95       	ret

000054fc <_GLOBAL__sub_I_w5500>:
    // Invert the SPI2X bit
    clockDiv ^= 0x1;

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    54fc:	ea ed       	ldi	r30, 0xDA	; 218
    54fe:	fb e0       	ldi	r31, 0x0B	; 11
    5500:	80 e5       	ldi	r24, 0x50	; 80
    5502:	80 83       	st	Z, r24
    spsr = clockDiv & SPI_2XCLOCK_MASK;
    5504:	81 e0       	ldi	r24, 0x01	; 1
    5506:	81 83       	std	Z+1, r24	; 0x01
    5508:	08 95       	ret

0000550a <_ZN5I2CIOC1Ev>:
      // Remove the values which are not inputs and get the value of the pin
      pinVal = this->read() & _dirMask;
      pinVal = ( pinVal >> pin ) & 0x01; // Get the pin value
   }
   return (pinVal);
}
    550a:	fc 01       	movw	r30, r24
    550c:	12 82       	std	Z+2, r1	; 0x02
    550e:	8f ef       	ldi	r24, 0xFF	; 255
    5510:	81 83       	std	Z+1, r24	; 0x01
    5512:	10 82       	st	Z, r1
    5514:	13 82       	std	Z+3, r1	; 0x03
    5516:	08 95       	ret

00005518 <_ZN5I2CIO8portModeEh>:
    5518:	fc 01       	movw	r30, r24
    551a:	83 81       	ldd	r24, Z+3	; 0x03
    551c:	88 23       	and	r24, r24
    551e:	31 f0       	breq	.+12     	; 0x552c <_ZN5I2CIO8portModeEh+0x14>
    5520:	61 11       	cpse	r22, r1
    5522:	03 c0       	rjmp	.+6      	; 0x552a <_ZN5I2CIO8portModeEh+0x12>
    5524:	8f ef       	ldi	r24, 0xFF	; 255
    5526:	81 83       	std	Z+1, r24	; 0x01
    5528:	08 95       	ret
    552a:	11 82       	std	Z+1, r1	; 0x01
    552c:	08 95       	ret

0000552e <_ZN5I2CIO11isAvailableEh>:
    552e:	8f e4       	ldi	r24, 0x4F	; 79
    5530:	9c e0       	ldi	r25, 0x0C	; 12
    5532:	f0 d5       	rcall	.+3040   	; 0x6114 <_ZN7TwoWire17beginTransmissionEh>
    5534:	8f e4       	ldi	r24, 0x4F	; 79
    5536:	9c e0       	ldi	r25, 0x0C	; 12
    5538:	6e d6       	rcall	.+3292   	; 0x6216 <_ZN7TwoWire15endTransmissionEv>
    553a:	91 e0       	ldi	r25, 0x01	; 1
    553c:	81 11       	cpse	r24, r1
    553e:	90 e0       	ldi	r25, 0x00	; 0
    5540:	89 2f       	mov	r24, r25
    5542:	08 95       	ret

00005544 <_ZN5I2CIO5beginEh>:
    5544:	cf 93       	push	r28
    5546:	df 93       	push	r29
    5548:	ec 01       	movw	r28, r24
    554a:	6a 83       	std	Y+2, r22	; 0x02
    554c:	8f e4       	ldi	r24, 0x4F	; 79
    554e:	9c e0       	ldi	r25, 0x0C	; 12
    5550:	ce d5       	rcall	.+2972   	; 0x60ee <_ZN7TwoWire5beginEv>
    5552:	6a 81       	ldd	r22, Y+2	; 0x02
    5554:	ce 01       	movw	r24, r28
    5556:	eb df       	rcall	.-42     	; 0x552e <_ZN5I2CIO11isAvailableEh>
    5558:	8b 83       	std	Y+3, r24	; 0x03
    555a:	88 23       	and	r24, r24
    555c:	21 f0       	breq	.+8      	; 0x5566 <_ZN5I2CIO5beginEh+0x22>
    555e:	8f e4       	ldi	r24, 0x4F	; 79
    5560:	9c e0       	ldi	r25, 0x0C	; 12
    5562:	01 d5       	rcall	.+2562   	; 0x5f66 <_ZN7TwoWire4readEv>
    5564:	88 83       	st	Y, r24
    5566:	8b 81       	ldd	r24, Y+3	; 0x03
    5568:	90 e0       	ldi	r25, 0x00	; 0
    556a:	df 91       	pop	r29
    556c:	cf 91       	pop	r28
    556e:	08 95       	ret

00005570 <_ZN5I2CIO5writeEh>:
}

//
// write
int I2CIO::write ( uint8_t value )
{
    5570:	cf 93       	push	r28
    5572:	df 93       	push	r29
   int status = 0;
   
   if ( _initialised )
    5574:	fc 01       	movw	r30, r24
    5576:	23 81       	ldd	r18, Z+3	; 0x03
    5578:	22 23       	and	r18, r18
    557a:	99 f0       	breq	.+38     	; 0x55a2 <_ZN5I2CIO5writeEh+0x32>
    557c:	ec 01       	movw	r28, r24
   {
      // Only write HIGH the values of the ports that have been initialised as
      // outputs updating the output shadow of the device
      _shadow = ( value & ~(_dirMask) );
    557e:	81 81       	ldd	r24, Z+1	; 0x01
    5580:	80 95       	com	r24
    5582:	68 23       	and	r22, r24
    5584:	60 83       	st	Z, r22
   
      Wire.beginTransmission ( _i2cAddr );
    5586:	62 81       	ldd	r22, Z+2	; 0x02
    5588:	8f e4       	ldi	r24, 0x4F	; 79
    558a:	9c e0       	ldi	r25, 0x0C	; 12
    558c:	c3 d5       	rcall	.+2950   	; 0x6114 <_ZN7TwoWire17beginTransmissionEh>
#if (ARDUINO <  100)
      Wire.send ( _shadow );
#else
      Wire.write ( _shadow );
    558e:	68 81       	ld	r22, Y
    5590:	8f e4       	ldi	r24, 0x4F	; 79
    5592:	9c e0       	ldi	r25, 0x0C	; 12
    5594:	6e d5       	rcall	.+2780   	; 0x6072 <_ZN7TwoWire5writeEh>
#endif  
      status = Wire.endTransmission ();
    5596:	8f e4       	ldi	r24, 0x4F	; 79
    5598:	9c e0       	ldi	r25, 0x0C	; 12
    559a:	3d d6       	rcall	.+3194   	; 0x6216 <_ZN7TwoWire15endTransmissionEv>
    559c:	28 2f       	mov	r18, r24
    559e:	30 e0       	ldi	r19, 0x00	; 0
    55a0:	02 c0       	rjmp	.+4      	; 0x55a6 <_ZN5I2CIO5writeEh+0x36>

//
// write
int I2CIO::write ( uint8_t value )
{
   int status = 0;
    55a2:	20 e0       	ldi	r18, 0x00	; 0
    55a4:	30 e0       	ldi	r19, 0x00	; 0
#else
      Wire.write ( _shadow );
#endif  
      status = Wire.endTransmission ();
   }
   return ( (status == 0) );
    55a6:	81 e0       	ldi	r24, 0x01	; 1
    55a8:	90 e0       	ldi	r25, 0x00	; 0
    55aa:	23 2b       	or	r18, r19
    55ac:	11 f0       	breq	.+4      	; 0x55b2 <_ZN5I2CIO5writeEh+0x42>
    55ae:	80 e0       	ldi	r24, 0x00	; 0
    55b0:	90 e0       	ldi	r25, 0x00	; 0
}
    55b2:	df 91       	pop	r29
    55b4:	cf 91       	pop	r28
    55b6:	08 95       	ret

000055b8 <_ZN3LCD15setBacklightPinEh13t_backlighPol>:

// This will 'left justify' text from the cursor
void LCD::noAutoscroll(void) 
{
   _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
   command(LCD_ENTRYMODESET | _displaymode);
    55b8:	08 95       	ret

000055ba <_ZN3LCD12setBacklightEh>:
    55ba:	08 95       	ret

000055bc <_ZN3LCD5writeEh>:
    55bc:	dc 01       	movw	r26, r24
    55be:	ed 91       	ld	r30, X+
    55c0:	fc 91       	ld	r31, X
    55c2:	06 84       	ldd	r0, Z+14	; 0x0e
    55c4:	f7 85       	ldd	r31, Z+15	; 0x0f
    55c6:	e0 2d       	mov	r30, r0
    55c8:	41 e0       	ldi	r20, 0x01	; 1
    55ca:	09 95       	icall
    55cc:	81 e0       	ldi	r24, 0x01	; 1
    55ce:	90 e0       	ldi	r25, 0x00	; 0
    55d0:	08 95       	ret

000055d2 <_ZN3LCDC1Ev>:
    55d2:	fc 01       	movw	r30, r24
    55d4:	13 82       	std	Z+3, r1	; 0x03
    55d6:	12 82       	std	Z+2, r1	; 0x02
    55d8:	2b e9       	ldi	r18, 0x9B	; 155
    55da:	39 e0       	ldi	r19, 0x09	; 9
    55dc:	31 83       	std	Z+1, r19	; 0x01
    55de:	20 83       	st	Z, r18
    55e0:	08 95       	ret

000055e2 <_ZN3LCD9backlightEv>:
    55e2:	dc 01       	movw	r26, r24
    55e4:	ed 91       	ld	r30, X+
    55e6:	fc 91       	ld	r31, X
    55e8:	04 84       	ldd	r0, Z+12	; 0x0c
    55ea:	f5 85       	ldd	r31, Z+13	; 0x0d
    55ec:	e0 2d       	mov	r30, r0
    55ee:	6f ef       	ldi	r22, 0xFF	; 255
    55f0:	09 94       	ijmp

000055f2 <_ZN3LCD11noBacklightEv>:
    55f2:	dc 01       	movw	r26, r24
    55f4:	ed 91       	ld	r30, X+
    55f6:	fc 91       	ld	r31, X
    55f8:	04 84       	ldd	r0, Z+12	; 0x0c
    55fa:	f5 85       	ldd	r31, Z+13	; 0x0d
    55fc:	e0 2d       	mov	r30, r0
    55fe:	60 e0       	ldi	r22, 0x00	; 0
    5600:	09 94       	ijmp

00005602 <_ZN3LCD7commandEh>:
    5602:	dc 01       	movw	r26, r24
    5604:	ed 91       	ld	r30, X+
    5606:	fc 91       	ld	r31, X
    5608:	06 84       	ldd	r0, Z+14	; 0x0e
    560a:	f7 85       	ldd	r31, Z+15	; 0x0f
    560c:	e0 2d       	mov	r30, r0
    560e:	40 e0       	ldi	r20, 0x00	; 0
    5610:	09 94       	ijmp

00005612 <_ZN3LCD5clearEv>:
    5612:	61 e0       	ldi	r22, 0x01	; 1
    5614:	f6 df       	rcall	.-20     	; 0x5602 <_ZN3LCD7commandEh>
    5616:	80 ed       	ldi	r24, 0xD0	; 208
    5618:	97 e0       	ldi	r25, 0x07	; 7
    561a:	0c 94 32 36 	jmp	0x6c64	; 0x6c64 <delayMicroseconds>

0000561e <_ZN3LCD9setCursorEhh>:
    561e:	cf 93       	push	r28
    5620:	df 93       	push	r29
    5622:	cd b7       	in	r28, 0x3d	; 61
    5624:	de b7       	in	r29, 0x3e	; 62
    5626:	28 97       	sbiw	r28, 0x08	; 8
    5628:	0f b6       	in	r0, 0x3f	; 63
    562a:	f8 94       	cli
    562c:	de bf       	out	0x3e, r29	; 62
    562e:	0f be       	out	0x3f, r0	; 63
    5630:	cd bf       	out	0x3d, r28	; 61
    5632:	fc 01       	movw	r30, r24
    5634:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <_ZN14EthernetClient8_srcportE+0xd2>
    5638:	90 91 30 02 	lds	r25, 0x0230	; 0x800230 <_ZN14EthernetClient8_srcportE+0xd3>
    563c:	a0 91 31 02 	lds	r26, 0x0231	; 0x800231 <_ZN14EthernetClient8_srcportE+0xd4>
    5640:	b0 91 32 02 	lds	r27, 0x0232	; 0x800232 <_ZN14EthernetClient8_srcportE+0xd5>
    5644:	8d 83       	std	Y+5, r24	; 0x05
    5646:	9e 83       	std	Y+6, r25	; 0x06
    5648:	af 83       	std	Y+7, r26	; 0x07
    564a:	b8 87       	std	Y+8, r27	; 0x08
    564c:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <_ZN14EthernetClient8_srcportE+0xd6>
    5650:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <_ZN14EthernetClient8_srcportE+0xd7>
    5654:	a0 91 35 02 	lds	r26, 0x0235	; 0x800235 <_ZN14EthernetClient8_srcportE+0xd8>
    5658:	b0 91 36 02 	lds	r27, 0x0236	; 0x800236 <_ZN14EthernetClient8_srcportE+0xd9>
    565c:	89 83       	std	Y+1, r24	; 0x01
    565e:	9a 83       	std	Y+2, r25	; 0x02
    5660:	ab 83       	std	Y+3, r26	; 0x03
    5662:	bc 83       	std	Y+4, r27	; 0x04
    5664:	87 81       	ldd	r24, Z+7	; 0x07
    5666:	48 17       	cp	r20, r24
    5668:	10 f0       	brcs	.+4      	; 0x566e <_ZN3LCD9setCursorEhh+0x50>
    566a:	4f ef       	ldi	r20, 0xFF	; 255
    566c:	48 0f       	add	r20, r24
    566e:	90 85       	ldd	r25, Z+8	; 0x08
    5670:	50 e0       	ldi	r21, 0x00	; 0
    5672:	de 01       	movw	r26, r28
    5674:	a4 0f       	add	r26, r20
    5676:	b5 1f       	adc	r27, r21
    5678:	90 31       	cpi	r25, 0x10	; 16
    567a:	29 f4       	brne	.+10     	; 0x5686 <_ZN3LCD9setCursorEhh+0x68>
    567c:	84 30       	cpi	r24, 0x04	; 4
    567e:	19 f4       	brne	.+6      	; 0x5686 <_ZN3LCD9setCursorEhh+0x68>
    5680:	11 96       	adiw	r26, 0x01	; 1
    5682:	9c 91       	ld	r25, X
    5684:	02 c0       	rjmp	.+4      	; 0x568a <_ZN3LCD9setCursorEhh+0x6c>
    5686:	15 96       	adiw	r26, 0x05	; 5
    5688:	9c 91       	ld	r25, X
    568a:	69 0f       	add	r22, r25
    568c:	60 68       	ori	r22, 0x80	; 128
    568e:	cf 01       	movw	r24, r30
    5690:	28 96       	adiw	r28, 0x08	; 8
    5692:	0f b6       	in	r0, 0x3f	; 63
    5694:	f8 94       	cli
    5696:	de bf       	out	0x3e, r29	; 62
    5698:	0f be       	out	0x3f, r0	; 63
    569a:	cd bf       	out	0x3d, r28	; 61
    569c:	df 91       	pop	r29
    569e:	cf 91       	pop	r28
    56a0:	b0 cf       	rjmp	.-160    	; 0x5602 <_ZN3LCD7commandEh>

000056a2 <_ZN3LCD9noDisplayEv>:
    56a2:	fc 01       	movw	r30, r24
    56a4:	65 81       	ldd	r22, Z+5	; 0x05
    56a6:	6b 7f       	andi	r22, 0xFB	; 251
    56a8:	65 83       	std	Z+5, r22	; 0x05
    56aa:	68 60       	ori	r22, 0x08	; 8
    56ac:	aa cf       	rjmp	.-172    	; 0x5602 <_ZN3LCD7commandEh>

000056ae <_ZN3LCD7displayEv>:
    56ae:	fc 01       	movw	r30, r24
    56b0:	65 81       	ldd	r22, Z+5	; 0x05
    56b2:	26 2f       	mov	r18, r22
    56b4:	24 60       	ori	r18, 0x04	; 4
    56b6:	25 83       	std	Z+5, r18	; 0x05
    56b8:	6c 60       	ori	r22, 0x0C	; 12
    56ba:	a3 cf       	rjmp	.-186    	; 0x5602 <_ZN3LCD7commandEh>

000056bc <_ZN3LCD5beginEhhh>:
    56bc:	cf 93       	push	r28
    56be:	df 93       	push	r29
    56c0:	ec 01       	movw	r28, r24
    56c2:	42 30       	cpi	r20, 0x02	; 2
    56c4:	18 f0       	brcs	.+6      	; 0x56cc <_ZN3LCD5beginEhhh+0x10>
    56c6:	8c 81       	ldd	r24, Y+4	; 0x04
    56c8:	88 60       	ori	r24, 0x08	; 8
    56ca:	8c 83       	std	Y+4, r24	; 0x04
    56cc:	4f 83       	std	Y+7, r20	; 0x07
    56ce:	68 87       	std	Y+8, r22	; 0x08
    56d0:	22 23       	and	r18, r18
    56d2:	29 f0       	breq	.+10     	; 0x56de <_ZN3LCD5beginEhhh+0x22>
    56d4:	41 30       	cpi	r20, 0x01	; 1
    56d6:	19 f4       	brne	.+6      	; 0x56de <_ZN3LCD5beginEhhh+0x22>
    56d8:	8c 81       	ldd	r24, Y+4	; 0x04
    56da:	84 60       	ori	r24, 0x04	; 4
    56dc:	8c 83       	std	Y+4, r24	; 0x04
    56de:	64 e6       	ldi	r22, 0x64	; 100
    56e0:	70 e0       	ldi	r23, 0x00	; 0
    56e2:	80 e0       	ldi	r24, 0x00	; 0
    56e4:	90 e0       	ldi	r25, 0x00	; 0
    56e6:	0e 94 f9 35 	call	0x6bf2	; 0x6bf2 <delay>
    56ea:	6c 81       	ldd	r22, Y+4	; 0x04
    56ec:	64 fd       	sbrc	r22, 4
    56ee:	31 c0       	rjmp	.+98     	; 0x5752 <_ZN3LCD5beginEhhh+0x96>
    56f0:	e8 81       	ld	r30, Y
    56f2:	f9 81       	ldd	r31, Y+1	; 0x01
    56f4:	06 84       	ldd	r0, Z+14	; 0x0e
    56f6:	f7 85       	ldd	r31, Z+15	; 0x0f
    56f8:	e0 2d       	mov	r30, r0
    56fa:	42 e0       	ldi	r20, 0x02	; 2
    56fc:	63 e0       	ldi	r22, 0x03	; 3
    56fe:	ce 01       	movw	r24, r28
    5700:	09 95       	icall
    5702:	84 e9       	ldi	r24, 0x94	; 148
    5704:	91 e1       	ldi	r25, 0x11	; 17
    5706:	0e 94 32 36 	call	0x6c64	; 0x6c64 <delayMicroseconds>
    570a:	e8 81       	ld	r30, Y
    570c:	f9 81       	ldd	r31, Y+1	; 0x01
    570e:	06 84       	ldd	r0, Z+14	; 0x0e
    5710:	f7 85       	ldd	r31, Z+15	; 0x0f
    5712:	e0 2d       	mov	r30, r0
    5714:	42 e0       	ldi	r20, 0x02	; 2
    5716:	63 e0       	ldi	r22, 0x03	; 3
    5718:	ce 01       	movw	r24, r28
    571a:	09 95       	icall
    571c:	86 e9       	ldi	r24, 0x96	; 150
    571e:	90 e0       	ldi	r25, 0x00	; 0
    5720:	0e 94 32 36 	call	0x6c64	; 0x6c64 <delayMicroseconds>
    5724:	e8 81       	ld	r30, Y
    5726:	f9 81       	ldd	r31, Y+1	; 0x01
    5728:	06 84       	ldd	r0, Z+14	; 0x0e
    572a:	f7 85       	ldd	r31, Z+15	; 0x0f
    572c:	e0 2d       	mov	r30, r0
    572e:	42 e0       	ldi	r20, 0x02	; 2
    5730:	63 e0       	ldi	r22, 0x03	; 3
    5732:	ce 01       	movw	r24, r28
    5734:	09 95       	icall
    5736:	86 e9       	ldi	r24, 0x96	; 150
    5738:	90 e0       	ldi	r25, 0x00	; 0
    573a:	0e 94 32 36 	call	0x6c64	; 0x6c64 <delayMicroseconds>
    573e:	e8 81       	ld	r30, Y
    5740:	f9 81       	ldd	r31, Y+1	; 0x01
    5742:	06 84       	ldd	r0, Z+14	; 0x0e
    5744:	f7 85       	ldd	r31, Z+15	; 0x0f
    5746:	e0 2d       	mov	r30, r0
    5748:	42 e0       	ldi	r20, 0x02	; 2
    574a:	62 e0       	ldi	r22, 0x02	; 2
    574c:	ce 01       	movw	r24, r28
    574e:	09 95       	icall
    5750:	13 c0       	rjmp	.+38     	; 0x5778 <_ZN3LCD5beginEhhh+0xbc>
    5752:	60 62       	ori	r22, 0x20	; 32
    5754:	ce 01       	movw	r24, r28
    5756:	55 df       	rcall	.-342    	; 0x5602 <_ZN3LCD7commandEh>
    5758:	84 e9       	ldi	r24, 0x94	; 148
    575a:	91 e1       	ldi	r25, 0x11	; 17
    575c:	0e 94 32 36 	call	0x6c64	; 0x6c64 <delayMicroseconds>
    5760:	6c 81       	ldd	r22, Y+4	; 0x04
    5762:	60 62       	ori	r22, 0x20	; 32
    5764:	ce 01       	movw	r24, r28
    5766:	4d df       	rcall	.-358    	; 0x5602 <_ZN3LCD7commandEh>
    5768:	86 e9       	ldi	r24, 0x96	; 150
    576a:	90 e0       	ldi	r25, 0x00	; 0
    576c:	0e 94 32 36 	call	0x6c64	; 0x6c64 <delayMicroseconds>
    5770:	6c 81       	ldd	r22, Y+4	; 0x04
    5772:	60 62       	ori	r22, 0x20	; 32
    5774:	ce 01       	movw	r24, r28
    5776:	45 df       	rcall	.-374    	; 0x5602 <_ZN3LCD7commandEh>
    5778:	86 e9       	ldi	r24, 0x96	; 150
    577a:	90 e0       	ldi	r25, 0x00	; 0
    577c:	0e 94 32 36 	call	0x6c64	; 0x6c64 <delayMicroseconds>
    5780:	6c 81       	ldd	r22, Y+4	; 0x04
    5782:	60 62       	ori	r22, 0x20	; 32
    5784:	ce 01       	movw	r24, r28
    5786:	3d df       	rcall	.-390    	; 0x5602 <_ZN3LCD7commandEh>
    5788:	8c e3       	ldi	r24, 0x3C	; 60
    578a:	90 e0       	ldi	r25, 0x00	; 0
    578c:	0e 94 32 36 	call	0x6c64	; 0x6c64 <delayMicroseconds>
    5790:	84 e0       	ldi	r24, 0x04	; 4
    5792:	8d 83       	std	Y+5, r24	; 0x05
    5794:	ce 01       	movw	r24, r28
    5796:	8b df       	rcall	.-234    	; 0x56ae <_ZN3LCD7displayEv>
    5798:	ce 01       	movw	r24, r28
    579a:	3b df       	rcall	.-394    	; 0x5612 <_ZN3LCD5clearEv>
    579c:	82 e0       	ldi	r24, 0x02	; 2
    579e:	8e 83       	std	Y+6, r24	; 0x06
    57a0:	66 e0       	ldi	r22, 0x06	; 6
    57a2:	ce 01       	movw	r24, r28
    57a4:	2e df       	rcall	.-420    	; 0x5602 <_ZN3LCD7commandEh>
    57a6:	ce 01       	movw	r24, r28
    57a8:	df 91       	pop	r29
    57aa:	cf 91       	pop	r28
    57ac:	1a cf       	rjmp	.-460    	; 0x55e2 <_ZN3LCD9backlightEv>

000057ae <_ZN3LCD10createCharEhPh>:
}

// Write to CGRAM of new characters
void LCD::createChar(uint8_t location, uint8_t charmap[]) 
{
    57ae:	ef 92       	push	r14
    57b0:	ff 92       	push	r15
    57b2:	0f 93       	push	r16
    57b4:	1f 93       	push	r17
    57b6:	cf 93       	push	r28
    57b8:	df 93       	push	r29
    57ba:	8c 01       	movw	r16, r24
    57bc:	7a 01       	movw	r14, r20
   location &= 0x7;            // we only have 8 locations 0-7
   
   command(LCD_SETCGRAMADDR | (location << 3));
    57be:	67 70       	andi	r22, 0x07	; 7
    57c0:	88 e0       	ldi	r24, 0x08	; 8
    57c2:	68 9f       	mul	r22, r24
    57c4:	b0 01       	movw	r22, r0
    57c6:	11 24       	eor	r1, r1
    57c8:	60 64       	ori	r22, 0x40	; 64
    57ca:	c8 01       	movw	r24, r16
    57cc:	1a df       	rcall	.-460    	; 0x5602 <_ZN3LCD7commandEh>
   delayMicroseconds(30);
    57ce:	8e e1       	ldi	r24, 0x1E	; 30
    57d0:	90 e0       	ldi	r25, 0x00	; 0
    57d2:	0e 94 32 36 	call	0x6c64	; 0x6c64 <delayMicroseconds>
    57d6:	e7 01       	movw	r28, r14
    57d8:	a8 e0       	ldi	r26, 0x08	; 8
    57da:	ea 0e       	add	r14, r26
    57dc:	f1 1c       	adc	r15, r1
   
   for (uint8_t i = 0; i < 8; i++)
   {
      write(charmap[i]);      // call the virtual write method
    57de:	69 91       	ld	r22, Y+
    57e0:	d8 01       	movw	r26, r16
    57e2:	ed 91       	ld	r30, X+
    57e4:	fc 91       	ld	r31, X
    57e6:	01 90       	ld	r0, Z+
    57e8:	f0 81       	ld	r31, Z
    57ea:	e0 2d       	mov	r30, r0
    57ec:	c8 01       	movw	r24, r16
    57ee:	09 95       	icall
      delayMicroseconds(40);
    57f0:	88 e2       	ldi	r24, 0x28	; 40
    57f2:	90 e0       	ldi	r25, 0x00	; 0
    57f4:	0e 94 32 36 	call	0x6c64	; 0x6c64 <delayMicroseconds>
   location &= 0x7;            // we only have 8 locations 0-7
   
   command(LCD_SETCGRAMADDR | (location << 3));
   delayMicroseconds(30);
   
   for (uint8_t i = 0; i < 8; i++)
    57f8:	ce 15       	cp	r28, r14
    57fa:	df 05       	cpc	r29, r15
    57fc:	81 f7       	brne	.-32     	; 0x57de <_ZN3LCD10createCharEhPh+0x30>
   {
      write(charmap[i]);      // call the virtual write method
      delayMicroseconds(40);
   }
}
    57fe:	df 91       	pop	r29
    5800:	cf 91       	pop	r28
    5802:	1f 91       	pop	r17
    5804:	0f 91       	pop	r16
    5806:	ff 90       	pop	r15
    5808:	ef 90       	pop	r14
    580a:	08 95       	ret

0000580c <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol>:
LiquidCrystal_I2C::LiquidCrystal_I2C(uint8_t lcd_Addr, uint8_t En, uint8_t Rw,
                                     uint8_t Rs, uint8_t d4, uint8_t d5,
                                     uint8_t d6, uint8_t d7 )
{
   config(lcd_Addr, En, Rw, Rs, d4, d5, d6, d7);
}
    580c:	21 e0       	ldi	r18, 0x01	; 1
    580e:	01 c0       	rjmp	.+2      	; 0x5812 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol+0x6>
    5810:	22 0f       	add	r18, r18
    5812:	6a 95       	dec	r22
    5814:	ea f7       	brpl	.-6      	; 0x5810 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol+0x4>
    5816:	dc 01       	movw	r26, r24
    5818:	1b 96       	adiw	r26, 0x0b	; 11
    581a:	2c 93       	st	X, r18
    581c:	1b 97       	sbiw	r26, 0x0b	; 11
    581e:	19 96       	adiw	r26, 0x09	; 9
    5820:	4c 93       	st	X, r20
    5822:	19 97       	sbiw	r26, 0x09	; 9
    5824:	ed 91       	ld	r30, X+
    5826:	fc 91       	ld	r31, X
    5828:	04 84       	ldd	r0, Z+12	; 0x0c
    582a:	f5 85       	ldd	r31, Z+13	; 0x0d
    582c:	e0 2d       	mov	r30, r0
    582e:	60 e0       	ldi	r22, 0x00	; 0
    5830:	09 94       	ijmp

00005832 <_ZN17LiquidCrystal_I2C12setBacklightEh>:
    5832:	fc 01       	movw	r30, r24
    5834:	83 85       	ldd	r24, Z+11	; 0x0b
    5836:	88 23       	and	r24, r24
    5838:	89 f0       	breq	.+34     	; 0x585c <_ZN17LiquidCrystal_I2C12setBacklightEh+0x2a>
    583a:	91 85       	ldd	r25, Z+9	; 0x09
    583c:	91 11       	cpse	r25, r1
    583e:	03 c0       	rjmp	.+6      	; 0x5846 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x14>
    5840:	61 11       	cpse	r22, r1
    5842:	05 c0       	rjmp	.+10     	; 0x584e <_ZN17LiquidCrystal_I2C12setBacklightEh+0x1c>
    5844:	06 c0       	rjmp	.+12     	; 0x5852 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    5846:	91 30       	cpi	r25, 0x01	; 1
    5848:	21 f4       	brne	.+8      	; 0x5852 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    584a:	61 11       	cpse	r22, r1
    584c:	02 c0       	rjmp	.+4      	; 0x5852 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    584e:	84 87       	std	Z+12, r24	; 0x0c
    5850:	01 c0       	rjmp	.+2      	; 0x5854 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x22>
    5852:	14 86       	std	Z+12, r1	; 0x0c
    5854:	64 85       	ldd	r22, Z+12	; 0x0c
    5856:	cf 01       	movw	r24, r30
    5858:	0d 96       	adiw	r24, 0x0d	; 13
    585a:	8a ce       	rjmp	.-748    	; 0x5570 <_ZN5I2CIO5writeEh>
    585c:	08 95       	ret

0000585e <_ZN17LiquidCrystal_I2C4initEv>:
    585e:	0f 93       	push	r16
    5860:	1f 93       	push	r17
    5862:	cf 93       	push	r28
    5864:	df 93       	push	r29
    5866:	8c 01       	movw	r16, r24
    5868:	ec 01       	movw	r28, r24
    586a:	2d 96       	adiw	r28, 0x0d	; 13
    586c:	fc 01       	movw	r30, r24
    586e:	62 85       	ldd	r22, Z+10	; 0x0a
    5870:	ce 01       	movw	r24, r28
    5872:	68 de       	rcall	.-816    	; 0x5544 <_ZN5I2CIO5beginEh>
    5874:	01 97       	sbiw	r24, 0x01	; 1
    5876:	59 f4       	brne	.+22     	; 0x588e <_ZN17LiquidCrystal_I2C4initEv+0x30>
    5878:	61 e0       	ldi	r22, 0x01	; 1
    587a:	ce 01       	movw	r24, r28
    587c:	4d de       	rcall	.-870    	; 0x5518 <_ZN5I2CIO8portModeEh>
    587e:	f8 01       	movw	r30, r16
    5880:	14 82       	std	Z+4, r1	; 0x04
    5882:	60 e0       	ldi	r22, 0x00	; 0
    5884:	ce 01       	movw	r24, r28
    5886:	74 de       	rcall	.-792    	; 0x5570 <_ZN5I2CIO5writeEh>
    5888:	81 e0       	ldi	r24, 0x01	; 1
    588a:	90 e0       	ldi	r25, 0x00	; 0
    588c:	02 c0       	rjmp	.+4      	; 0x5892 <_ZN17LiquidCrystal_I2C4initEv+0x34>
    588e:	80 e0       	ldi	r24, 0x00	; 0
    5890:	90 e0       	ldi	r25, 0x00	; 0
    5892:	df 91       	pop	r29
    5894:	cf 91       	pop	r28
    5896:	1f 91       	pop	r17
    5898:	0f 91       	pop	r16
    589a:	08 95       	ret

0000589c <_ZN17LiquidCrystal_I2C6configEhhhhhhhh>:
    589c:	8f 92       	push	r8
    589e:	af 92       	push	r10
    58a0:	cf 92       	push	r12
    58a2:	ef 92       	push	r14
    58a4:	0f 93       	push	r16
    58a6:	cf 93       	push	r28
    58a8:	df 93       	push	r29
    58aa:	cd b7       	in	r28, 0x3d	; 61
    58ac:	de b7       	in	r29, 0x3e	; 62
    58ae:	fc 01       	movw	r30, r24
    58b0:	62 87       	std	Z+10, r22	; 0x0a
    58b2:	13 86       	std	Z+11, r1	; 0x0b
    58b4:	14 86       	std	Z+12, r1	; 0x0c
    58b6:	11 86       	std	Z+9, r1	; 0x09
    58b8:	81 e0       	ldi	r24, 0x01	; 1
    58ba:	98 2f       	mov	r25, r24
    58bc:	01 c0       	rjmp	.+2      	; 0x58c0 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x24>
    58be:	99 0f       	add	r25, r25
    58c0:	4a 95       	dec	r20
    58c2:	ea f7       	brpl	.-6      	; 0x58be <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x22>
    58c4:	91 8b       	std	Z+17, r25	; 0x11
    58c6:	98 2f       	mov	r25, r24
    58c8:	01 c0       	rjmp	.+2      	; 0x58cc <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x30>
    58ca:	99 0f       	add	r25, r25
    58cc:	2a 95       	dec	r18
    58ce:	ea f7       	brpl	.-6      	; 0x58ca <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x2e>
    58d0:	92 8b       	std	Z+18, r25	; 0x12
    58d2:	98 2f       	mov	r25, r24
    58d4:	01 c0       	rjmp	.+2      	; 0x58d8 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x3c>
    58d6:	99 0f       	add	r25, r25
    58d8:	0a 95       	dec	r16
    58da:	ea f7       	brpl	.-6      	; 0x58d6 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x3a>
    58dc:	93 8b       	std	Z+19, r25	; 0x13
    58de:	98 2f       	mov	r25, r24
    58e0:	01 c0       	rjmp	.+2      	; 0x58e4 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x48>
    58e2:	99 0f       	add	r25, r25
    58e4:	ea 94       	dec	r14
    58e6:	ea f7       	brpl	.-6      	; 0x58e2 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x46>
    58e8:	94 8b       	std	Z+20, r25	; 0x14
    58ea:	98 2f       	mov	r25, r24
    58ec:	01 c0       	rjmp	.+2      	; 0x58f0 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x54>
    58ee:	99 0f       	add	r25, r25
    58f0:	ca 94       	dec	r12
    58f2:	ea f7       	brpl	.-6      	; 0x58ee <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x52>
    58f4:	95 8b       	std	Z+21, r25	; 0x15
    58f6:	98 2f       	mov	r25, r24
    58f8:	01 c0       	rjmp	.+2      	; 0x58fc <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x60>
    58fa:	99 0f       	add	r25, r25
    58fc:	aa 94       	dec	r10
    58fe:	ea f7       	brpl	.-6      	; 0x58fa <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x5e>
    5900:	96 8b       	std	Z+22, r25	; 0x16
    5902:	01 c0       	rjmp	.+2      	; 0x5906 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x6a>
    5904:	88 0f       	add	r24, r24
    5906:	8a 94       	dec	r8
    5908:	ea f7       	brpl	.-6      	; 0x5904 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x68>
    590a:	87 8b       	std	Z+23, r24	; 0x17
    590c:	df 91       	pop	r29
    590e:	cf 91       	pop	r28
    5910:	0f 91       	pop	r16
    5912:	ef 90       	pop	r14
    5914:	cf 90       	pop	r12
    5916:	af 90       	pop	r10
    5918:	8f 90       	pop	r8
    591a:	08 95       	ret

0000591c <_ZN17LiquidCrystal_I2CC1Ehhhhhhhhh13t_backlighPol>:

LiquidCrystal_I2C::LiquidCrystal_I2C(uint8_t lcd_Addr, uint8_t En, uint8_t Rw,
    591c:	6f 92       	push	r6
    591e:	7f 92       	push	r7
    5920:	8f 92       	push	r8
    5922:	9f 92       	push	r9
    5924:	af 92       	push	r10
    5926:	bf 92       	push	r11
    5928:	cf 92       	push	r12
    592a:	df 92       	push	r13
    592c:	ef 92       	push	r14
    592e:	ff 92       	push	r15
    5930:	0f 93       	push	r16
    5932:	1f 93       	push	r17
    5934:	cf 93       	push	r28
    5936:	df 93       	push	r29
    5938:	cd b7       	in	r28, 0x3d	; 61
    593a:	de b7       	in	r29, 0x3e	; 62
    593c:	3c 01       	movw	r6, r24
    593e:	d6 2e       	mov	r13, r22
    5940:	b4 2e       	mov	r11, r20
    5942:	92 2e       	mov	r9, r18
    5944:	19 89       	ldd	r17, Y+17	; 0x11
    5946:	fa 88       	ldd	r15, Y+18	; 0x12
                                     uint8_t Rs, uint8_t d4, uint8_t d5,
                                     uint8_t d6, uint8_t d7, uint8_t backlighPin, 
                                     t_backlighPol pol = POSITIVE )
    5948:	44 de       	rcall	.-888    	; 0x55d2 <_ZN3LCDC1Ev>
    594a:	8f ea       	ldi	r24, 0xAF	; 175
    594c:	99 e0       	ldi	r25, 0x09	; 9
    594e:	f3 01       	movw	r30, r6
    5950:	91 83       	std	Z+1, r25	; 0x01
    5952:	80 83       	st	Z, r24
    5954:	c3 01       	movw	r24, r6
    5956:	0d 96       	adiw	r24, 0x0d	; 13
    5958:	d8 dd       	rcall	.-1104   	; 0x550a <_ZN5I2CIOC1Ev>
{
   config(lcd_Addr, En, Rw, Rs, d4, d5, d6, d7);
    595a:	29 2d       	mov	r18, r9
    595c:	4b 2d       	mov	r20, r11
    595e:	6d 2d       	mov	r22, r13
    5960:	c3 01       	movw	r24, r6
    5962:	9c df       	rcall	.-200    	; 0x589c <_ZN17LiquidCrystal_I2C6configEhhhhhhhh>
   setBacklightPin(backlighPin, pol);
    5964:	4f 2d       	mov	r20, r15
    5966:	61 2f       	mov	r22, r17
    5968:	c3 01       	movw	r24, r6
}
    596a:	df 91       	pop	r29
    596c:	cf 91       	pop	r28
    596e:	1f 91       	pop	r17
    5970:	0f 91       	pop	r16
    5972:	ff 90       	pop	r15
    5974:	ef 90       	pop	r14
    5976:	df 90       	pop	r13
    5978:	cf 90       	pop	r12
    597a:	bf 90       	pop	r11
    597c:	af 90       	pop	r10
    597e:	9f 90       	pop	r9
    5980:	8f 90       	pop	r8
    5982:	7f 90       	pop	r7
                                     uint8_t Rs, uint8_t d4, uint8_t d5,
                                     uint8_t d6, uint8_t d7, uint8_t backlighPin, 
                                     t_backlighPol pol = POSITIVE )
{
   config(lcd_Addr, En, Rw, Rs, d4, d5, d6, d7);
   setBacklightPin(backlighPin, pol);
    5984:	6f 90       	pop	r6
    5986:	42 cf       	rjmp	.-380    	; 0x580c <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol>

00005988 <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
}

//
// pulseEnable
void LiquidCrystal_I2C::pulseEnable (uint8_t data)
{
    5988:	ef 92       	push	r14
    598a:	ff 92       	push	r15
    598c:	0f 93       	push	r16
    598e:	1f 93       	push	r17
    5990:	cf 93       	push	r28
    5992:	8c 01       	movw	r16, r24
    5994:	c6 2f       	mov	r28, r22
   _i2cio.write (data | _En);   // En HIGH
    5996:	7c 01       	movw	r14, r24
    5998:	8d e0       	ldi	r24, 0x0D	; 13
    599a:	e8 0e       	add	r14, r24
    599c:	f1 1c       	adc	r15, r1
    599e:	f8 01       	movw	r30, r16
    59a0:	61 89       	ldd	r22, Z+17	; 0x11
    59a2:	6c 2b       	or	r22, r28
    59a4:	c7 01       	movw	r24, r14
    59a6:	e4 dd       	rcall	.-1080   	; 0x5570 <_ZN5I2CIO5writeEh>
   _i2cio.write (data & ~_En);  // En LOW
    59a8:	f8 01       	movw	r30, r16
    59aa:	61 89       	ldd	r22, Z+17	; 0x11
    59ac:	60 95       	com	r22
    59ae:	6c 23       	and	r22, r28
    59b0:	c7 01       	movw	r24, r14
    59b2:	cf 91       	pop	r28
    59b4:	1f 91       	pop	r17
    59b6:	0f 91       	pop	r16
    59b8:	ff 90       	pop	r15
//
// pulseEnable
void LiquidCrystal_I2C::pulseEnable (uint8_t data)
{
   _i2cio.write (data | _En);   // En HIGH
   _i2cio.write (data & ~_En);  // En LOW
    59ba:	ef 90       	pop	r14
    59bc:	d9 cd       	rjmp	.-1102   	; 0x5570 <_ZN5I2CIO5writeEh>

000059be <_ZN17LiquidCrystal_I2C10write4bitsEhh>:
}

//
// write4bits
void LiquidCrystal_I2C::write4bits ( uint8_t value, uint8_t mode ) 
{
    59be:	fc 01       	movw	r30, r24
    59c0:	96 2f       	mov	r25, r22
    59c2:	df 01       	movw	r26, r30
    59c4:	84 e0       	ldi	r24, 0x04	; 4
   uint8_t pinMapValue = 0;
    59c6:	60 e0       	ldi	r22, 0x00	; 0
   
   // Map the value to LCD pin mapping
   // --------------------------------
   for ( uint8_t i = 0; i < 4; i++ )
   {
      if ( ( value & 0x1 ) == 1 )
    59c8:	90 ff       	sbrs	r25, 0
    59ca:	04 c0       	rjmp	.+8      	; 0x59d4 <_ZN17LiquidCrystal_I2C10write4bitsEhh+0x16>
      {
         pinMapValue |= _data_pins[i];
    59cc:	54 96       	adiw	r26, 0x14	; 20
    59ce:	2c 91       	ld	r18, X
    59d0:	54 97       	sbiw	r26, 0x14	; 20
    59d2:	62 2b       	or	r22, r18
      }
      value = ( value >> 1 );
    59d4:	96 95       	lsr	r25
    59d6:	81 50       	subi	r24, 0x01	; 1
    59d8:	11 96       	adiw	r26, 0x01	; 1
{
   uint8_t pinMapValue = 0;
   
   // Map the value to LCD pin mapping
   // --------------------------------
   for ( uint8_t i = 0; i < 4; i++ )
    59da:	81 11       	cpse	r24, r1
    59dc:	f5 cf       	rjmp	.-22     	; 0x59c8 <_ZN17LiquidCrystal_I2C10write4bitsEhh+0xa>
      value = ( value >> 1 );
   }
   
   // Is it a command or data
   // -----------------------
   if ( mode == DATA )
    59de:	41 30       	cpi	r20, 0x01	; 1
    59e0:	09 f4       	brne	.+2      	; 0x59e4 <_ZN17LiquidCrystal_I2C10write4bitsEhh+0x26>
   {
      mode = _Rs;
    59e2:	43 89       	ldd	r20, Z+19	; 0x13
    59e4:	94 85       	ldd	r25, Z+12	; 0x0c
    59e6:	69 2b       	or	r22, r25
   }
   
   pinMapValue |= mode | _backlightStsMask;
   pulseEnable ( pinMapValue );
    59e8:	64 2b       	or	r22, r20
    59ea:	cf 01       	movw	r24, r30
    59ec:	cd cf       	rjmp	.-102    	; 0x5988 <_ZN17LiquidCrystal_I2C11pulseEnableEh>

000059ee <_ZN17LiquidCrystal_I2C4sendEhh>:
//----------------------------------------------------------------------------

//
// send - write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) 
{
    59ee:	0f 93       	push	r16
    59f0:	1f 93       	push	r17
    59f2:	cf 93       	push	r28
    59f4:	df 93       	push	r29
    59f6:	06 2f       	mov	r16, r22
    59f8:	0f 70       	andi	r16, 0x0F	; 15
   // No need to use the delay routines since the time taken to write takes
   // longer that what is needed both for toggling and enable pin an to execute
   // the command.
   
   if ( mode == FOUR_BITS )
    59fa:	42 30       	cpi	r20, 0x02	; 2
    59fc:	19 f4       	brne	.+6      	; 0x5a04 <_ZN17LiquidCrystal_I2C4sendEhh+0x16>
   {
      write4bits( (value & 0x0F), COMMAND );
    59fe:	40 e0       	ldi	r20, 0x00	; 0
    5a00:	60 2f       	mov	r22, r16
    5a02:	0d c0       	rjmp	.+26     	; 0x5a1e <_ZN17LiquidCrystal_I2C4sendEhh+0x30>
    5a04:	14 2f       	mov	r17, r20
    5a06:	ec 01       	movw	r28, r24
   }
   else 
   {
      write4bits( (value >> 4), mode );
    5a08:	70 e0       	ldi	r23, 0x00	; 0
    5a0a:	84 e0       	ldi	r24, 0x04	; 4
    5a0c:	75 95       	asr	r23
    5a0e:	67 95       	ror	r22
    5a10:	8a 95       	dec	r24
    5a12:	e1 f7       	brne	.-8      	; 0x5a0c <_ZN17LiquidCrystal_I2C4sendEhh+0x1e>
    5a14:	ce 01       	movw	r24, r28
    5a16:	d3 df       	rcall	.-90     	; 0x59be <_ZN17LiquidCrystal_I2C10write4bitsEhh>
      write4bits( (value & 0x0F), mode);
    5a18:	41 2f       	mov	r20, r17
    5a1a:	60 2f       	mov	r22, r16
    5a1c:	ce 01       	movw	r24, r28
   }
}
    5a1e:	df 91       	pop	r29
    5a20:	cf 91       	pop	r28
    5a22:	1f 91       	pop	r17
      write4bits( (value & 0x0F), COMMAND );
   }
   else 
   {
      write4bits( (value >> 4), mode );
      write4bits( (value & 0x0F), mode);
    5a24:	0f 91       	pop	r16
    5a26:	cb cf       	rjmp	.-106    	; 0x59be <_ZN17LiquidCrystal_I2C10write4bitsEhh>

00005a28 <_ZN17LiquidCrystal_I2C5beginEhhh>:
// ---------------------------------------------------------------------------

//
// begin
void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) 
{
    5a28:	ff 92       	push	r15
    5a2a:	0f 93       	push	r16
    5a2c:	1f 93       	push	r17
    5a2e:	cf 93       	push	r28
    5a30:	df 93       	push	r29
    5a32:	ec 01       	movw	r28, r24
    5a34:	16 2f       	mov	r17, r22
    5a36:	04 2f       	mov	r16, r20
    5a38:	f2 2e       	mov	r15, r18
   
   init();     // Initialise the I2C expander interface
    5a3a:	11 df       	rcall	.-478    	; 0x585e <_ZN17LiquidCrystal_I2C4initEv>
   LCD::begin ( cols, lines, dotsize );   
    5a3c:	2f 2d       	mov	r18, r15
    5a3e:	40 2f       	mov	r20, r16
    5a40:	61 2f       	mov	r22, r17
    5a42:	ce 01       	movw	r24, r28
}
    5a44:	df 91       	pop	r29
    5a46:	cf 91       	pop	r28
    5a48:	1f 91       	pop	r17
    5a4a:	0f 91       	pop	r16
// begin
void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) 
{
   
   init();     // Initialise the I2C expander interface
   LCD::begin ( cols, lines, dotsize );   
    5a4c:	ff 90       	pop	r15
    5a4e:	36 ce       	rjmp	.-916    	; 0x56bc <_ZN3LCD5beginEhhh>

00005a50 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    5a50:	cf 93       	push	r28
  uint8_t sreg = SREG;
    5a52:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    5a54:	f8 94       	cli
  if (!initialized) {
    5a56:	80 91 e0 0b 	lds	r24, 0x0BE0	; 0x800be0 <_ZN8SPIClass11initializedE>
    5a5a:	81 11       	cpse	r24, r1
    5a5c:	27 c0       	rjmp	.+78     	; 0x5aac <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    5a5e:	ec e7       	ldi	r30, 0x7C	; 124
    5a60:	f2 e0       	ldi	r31, 0x02	; 2
    5a62:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    5a64:	ec e5       	ldi	r30, 0x5C	; 92
    5a66:	f2 e0       	ldi	r31, 0x02	; 2
    5a68:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    5a6a:	e8 2f       	mov	r30, r24
    5a6c:	f0 e0       	ldi	r31, 0x00	; 0
    5a6e:	ee 0f       	add	r30, r30
    5a70:	ff 1f       	adc	r31, r31
    5a72:	ea 55       	subi	r30, 0x5A	; 90
    5a74:	fd 4f       	sbci	r31, 0xFD	; 253
    5a76:	a5 91       	lpm	r26, Z+
    5a78:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    5a7a:	ec 91       	ld	r30, X
    5a7c:	e9 23       	and	r30, r25
    5a7e:	21 f4       	brne	.+8      	; 0x5a88 <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    5a80:	61 e0       	ldi	r22, 0x01	; 1
    5a82:	8a e0       	ldi	r24, 0x0A	; 10
    5a84:	0e 94 dd 36 	call	0x6dba	; 0x6dba <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    5a88:	61 e0       	ldi	r22, 0x01	; 1
    5a8a:	8a e0       	ldi	r24, 0x0A	; 10
    5a8c:	0e 94 a1 36 	call	0x6d42	; 0x6d42 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    5a90:	8c b5       	in	r24, 0x2c	; 44
    5a92:	80 61       	ori	r24, 0x10	; 16
    5a94:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    5a96:	8c b5       	in	r24, 0x2c	; 44
    5a98:	80 64       	ori	r24, 0x40	; 64
    5a9a:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    5a9c:	61 e0       	ldi	r22, 0x01	; 1
    5a9e:	8d e0       	ldi	r24, 0x0D	; 13
    5aa0:	0e 94 a1 36 	call	0x6d42	; 0x6d42 <pinMode>
    pinMode(MOSI, OUTPUT);
    5aa4:	61 e0       	ldi	r22, 0x01	; 1
    5aa6:	8b e0       	ldi	r24, 0x0B	; 11
    5aa8:	0e 94 a1 36 	call	0x6d42	; 0x6d42 <pinMode>
  }
  initialized++; // reference count
    5aac:	80 91 e0 0b 	lds	r24, 0x0BE0	; 0x800be0 <_ZN8SPIClass11initializedE>
    5ab0:	8f 5f       	subi	r24, 0xFF	; 255
    5ab2:	80 93 e0 0b 	sts	0x0BE0, r24	; 0x800be0 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    5ab6:	cf bf       	out	0x3f, r28	; 63
}
    5ab8:	cf 91       	pop	r28
    5aba:	08 95       	ret

00005abc <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    5abc:	10 92 4e 0c 	sts	0x0C4E, r1	; 0x800c4e <twi_state>
    5ac0:	81 e0       	ldi	r24, 0x01	; 1
    5ac2:	80 93 4c 0c 	sts	0x0C4C, r24	; 0x800c4c <twi_sendStop>
    5ac6:	10 92 4b 0c 	sts	0x0C4B, r1	; 0x800c4b <twi_inRepStart>
    5aca:	61 e0       	ldi	r22, 0x01	; 1
    5acc:	8d e1       	ldi	r24, 0x1D	; 29
    5ace:	0e 94 dd 36 	call	0x6dba	; 0x6dba <digitalWrite>
    5ad2:	61 e0       	ldi	r22, 0x01	; 1
    5ad4:	8c e1       	ldi	r24, 0x1C	; 28
    5ad6:	0e 94 dd 36 	call	0x6dba	; 0x6dba <digitalWrite>
    5ada:	e9 eb       	ldi	r30, 0xB9	; 185
    5adc:	f0 e0       	ldi	r31, 0x00	; 0
    5ade:	80 81       	ld	r24, Z
    5ae0:	8e 7f       	andi	r24, 0xFE	; 254
    5ae2:	80 83       	st	Z, r24
    5ae4:	80 81       	ld	r24, Z
    5ae6:	8d 7f       	andi	r24, 0xFD	; 253
    5ae8:	80 83       	st	Z, r24
    5aea:	88 e4       	ldi	r24, 0x48	; 72
    5aec:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    5af0:	85 e4       	ldi	r24, 0x45	; 69
    5af2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5af6:	08 95       	ret

00005af8 <twi_disable>:
    5af8:	ec eb       	ldi	r30, 0xBC	; 188
    5afa:	f0 e0       	ldi	r31, 0x00	; 0
    5afc:	80 81       	ld	r24, Z
    5afe:	8a 7b       	andi	r24, 0xBA	; 186
    5b00:	80 83       	st	Z, r24
    5b02:	60 e0       	ldi	r22, 0x00	; 0
    5b04:	8d e1       	ldi	r24, 0x1D	; 29
    5b06:	0e 94 dd 36 	call	0x6dba	; 0x6dba <digitalWrite>
    5b0a:	60 e0       	ldi	r22, 0x00	; 0
    5b0c:	8c e1       	ldi	r24, 0x1C	; 28
    5b0e:	0c 94 dd 36 	jmp	0x6dba	; 0x6dba <digitalWrite>

00005b12 <twi_setFrequency>:
    5b12:	9b 01       	movw	r18, r22
    5b14:	ac 01       	movw	r20, r24
    5b16:	60 e0       	ldi	r22, 0x00	; 0
    5b18:	74 e2       	ldi	r23, 0x24	; 36
    5b1a:	84 ef       	ldi	r24, 0xF4	; 244
    5b1c:	90 e0       	ldi	r25, 0x00	; 0
    5b1e:	0e 94 ad 3a 	call	0x755a	; 0x755a <__udivmodsi4>
    5b22:	da 01       	movw	r26, r20
    5b24:	c9 01       	movw	r24, r18
    5b26:	40 97       	sbiw	r24, 0x10	; 16
    5b28:	a1 09       	sbc	r26, r1
    5b2a:	b1 09       	sbc	r27, r1
    5b2c:	b6 95       	lsr	r27
    5b2e:	a7 95       	ror	r26
    5b30:	97 95       	ror	r25
    5b32:	87 95       	ror	r24
    5b34:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    5b38:	08 95       	ret

00005b3a <twi_readFrom>:
    5b3a:	41 32       	cpi	r20, 0x21	; 33
    5b3c:	08 f0       	brcs	.+2      	; 0x5b40 <twi_readFrom+0x6>
    5b3e:	43 c0       	rjmp	.+134    	; 0x5bc6 <twi_readFrom+0x8c>
    5b40:	90 91 4e 0c 	lds	r25, 0x0C4E	; 0x800c4e <twi_state>
    5b44:	91 11       	cpse	r25, r1
    5b46:	fc cf       	rjmp	.-8      	; 0x5b40 <twi_readFrom+0x6>
    5b48:	91 e0       	ldi	r25, 0x01	; 1
    5b4a:	90 93 4e 0c 	sts	0x0C4E, r25	; 0x800c4e <twi_state>
    5b4e:	20 93 4c 0c 	sts	0x0C4C, r18	; 0x800c4c <twi_sendStop>
    5b52:	2f ef       	ldi	r18, 0xFF	; 255
    5b54:	20 93 e1 0b 	sts	0x0BE1, r18	; 0x800be1 <twi_error>
    5b58:	10 92 26 0c 	sts	0x0C26, r1	; 0x800c26 <twi_masterBufferIndex>
    5b5c:	24 0f       	add	r18, r20
    5b5e:	20 93 25 0c 	sts	0x0C25, r18	; 0x800c25 <twi_masterBufferLength>
    5b62:	90 93 4d 0c 	sts	0x0C4D, r25	; 0x800c4d <twi_slarw>
    5b66:	90 91 4d 0c 	lds	r25, 0x0C4D	; 0x800c4d <twi_slarw>
    5b6a:	88 0f       	add	r24, r24
    5b6c:	89 2b       	or	r24, r25
    5b6e:	80 93 4d 0c 	sts	0x0C4D, r24	; 0x800c4d <twi_slarw>
    5b72:	80 91 4b 0c 	lds	r24, 0x0C4B	; 0x800c4b <twi_inRepStart>
    5b76:	81 30       	cpi	r24, 0x01	; 1
    5b78:	61 f4       	brne	.+24     	; 0x5b92 <twi_readFrom+0x58>
    5b7a:	10 92 4b 0c 	sts	0x0C4B, r1	; 0x800c4b <twi_inRepStart>
    5b7e:	80 91 4d 0c 	lds	r24, 0x0C4D	; 0x800c4d <twi_slarw>
    5b82:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5b86:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5b8a:	83 fd       	sbrc	r24, 3
    5b8c:	f8 cf       	rjmp	.-16     	; 0x5b7e <twi_readFrom+0x44>
    5b8e:	85 ec       	ldi	r24, 0xC5	; 197
    5b90:	01 c0       	rjmp	.+2      	; 0x5b94 <twi_readFrom+0x5a>
    5b92:	85 ee       	ldi	r24, 0xE5	; 229
    5b94:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5b98:	80 91 4e 0c 	lds	r24, 0x0C4E	; 0x800c4e <twi_state>
    5b9c:	81 30       	cpi	r24, 0x01	; 1
    5b9e:	e1 f3       	breq	.-8      	; 0x5b98 <twi_readFrom+0x5e>
    5ba0:	80 91 26 0c 	lds	r24, 0x0C26	; 0x800c26 <twi_masterBufferIndex>
    5ba4:	84 17       	cp	r24, r20
    5ba6:	10 f4       	brcc	.+4      	; 0x5bac <twi_readFrom+0x72>
    5ba8:	40 91 26 0c 	lds	r20, 0x0C26	; 0x800c26 <twi_masterBufferIndex>
    5bac:	a7 e2       	ldi	r26, 0x27	; 39
    5bae:	bc e0       	ldi	r27, 0x0C	; 12
    5bb0:	96 2f       	mov	r25, r22
    5bb2:	fb 01       	movw	r30, r22
    5bb4:	8e 2f       	mov	r24, r30
    5bb6:	89 1b       	sub	r24, r25
    5bb8:	84 17       	cp	r24, r20
    5bba:	18 f4       	brcc	.+6      	; 0x5bc2 <twi_readFrom+0x88>
    5bbc:	8d 91       	ld	r24, X+
    5bbe:	81 93       	st	Z+, r24
    5bc0:	f9 cf       	rjmp	.-14     	; 0x5bb4 <twi_readFrom+0x7a>
    5bc2:	84 2f       	mov	r24, r20
    5bc4:	08 95       	ret
    5bc6:	80 e0       	ldi	r24, 0x00	; 0
    5bc8:	08 95       	ret

00005bca <twi_writeTo>:
    5bca:	0f 93       	push	r16
    5bcc:	41 32       	cpi	r20, 0x21	; 33
    5bce:	08 f0       	brcs	.+2      	; 0x5bd2 <twi_writeTo+0x8>
    5bd0:	4a c0       	rjmp	.+148    	; 0x5c66 <twi_writeTo+0x9c>
    5bd2:	90 91 4e 0c 	lds	r25, 0x0C4E	; 0x800c4e <twi_state>
    5bd6:	91 11       	cpse	r25, r1
    5bd8:	fc cf       	rjmp	.-8      	; 0x5bd2 <twi_writeTo+0x8>
    5bda:	32 e0       	ldi	r19, 0x02	; 2
    5bdc:	30 93 4e 0c 	sts	0x0C4E, r19	; 0x800c4e <twi_state>
    5be0:	00 93 4c 0c 	sts	0x0C4C, r16	; 0x800c4c <twi_sendStop>
    5be4:	3f ef       	ldi	r19, 0xFF	; 255
    5be6:	30 93 e1 0b 	sts	0x0BE1, r19	; 0x800be1 <twi_error>
    5bea:	10 92 26 0c 	sts	0x0C26, r1	; 0x800c26 <twi_masterBufferIndex>
    5bee:	40 93 25 0c 	sts	0x0C25, r20	; 0x800c25 <twi_masterBufferLength>
    5bf2:	56 2f       	mov	r21, r22
    5bf4:	a7 e2       	ldi	r26, 0x27	; 39
    5bf6:	bc e0       	ldi	r27, 0x0C	; 12
    5bf8:	fb 01       	movw	r30, r22
    5bfa:	3e 2f       	mov	r19, r30
    5bfc:	35 1b       	sub	r19, r21
    5bfe:	34 17       	cp	r19, r20
    5c00:	18 f4       	brcc	.+6      	; 0x5c08 <twi_writeTo+0x3e>
    5c02:	31 91       	ld	r19, Z+
    5c04:	3d 93       	st	X+, r19
    5c06:	f9 cf       	rjmp	.-14     	; 0x5bfa <twi_writeTo+0x30>
    5c08:	10 92 4d 0c 	sts	0x0C4D, r1	; 0x800c4d <twi_slarw>
    5c0c:	30 91 4d 0c 	lds	r19, 0x0C4D	; 0x800c4d <twi_slarw>
    5c10:	88 0f       	add	r24, r24
    5c12:	83 2b       	or	r24, r19
    5c14:	80 93 4d 0c 	sts	0x0C4D, r24	; 0x800c4d <twi_slarw>
    5c18:	80 91 4b 0c 	lds	r24, 0x0C4B	; 0x800c4b <twi_inRepStart>
    5c1c:	81 30       	cpi	r24, 0x01	; 1
    5c1e:	61 f4       	brne	.+24     	; 0x5c38 <twi_writeTo+0x6e>
    5c20:	10 92 4b 0c 	sts	0x0C4B, r1	; 0x800c4b <twi_inRepStart>
    5c24:	80 91 4d 0c 	lds	r24, 0x0C4D	; 0x800c4d <twi_slarw>
    5c28:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5c2c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5c30:	83 fd       	sbrc	r24, 3
    5c32:	f8 cf       	rjmp	.-16     	; 0x5c24 <twi_writeTo+0x5a>
    5c34:	85 ec       	ldi	r24, 0xC5	; 197
    5c36:	01 c0       	rjmp	.+2      	; 0x5c3a <twi_writeTo+0x70>
    5c38:	85 ee       	ldi	r24, 0xE5	; 229
    5c3a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5c3e:	22 23       	and	r18, r18
    5c40:	21 f0       	breq	.+8      	; 0x5c4a <twi_writeTo+0x80>
    5c42:	80 91 4e 0c 	lds	r24, 0x0C4E	; 0x800c4e <twi_state>
    5c46:	82 30       	cpi	r24, 0x02	; 2
    5c48:	d1 f3       	breq	.-12     	; 0x5c3e <twi_writeTo+0x74>
    5c4a:	80 91 e1 0b 	lds	r24, 0x0BE1	; 0x800be1 <twi_error>
    5c4e:	8f 3f       	cpi	r24, 0xFF	; 255
    5c50:	79 f0       	breq	.+30     	; 0x5c70 <twi_writeTo+0xa6>
    5c52:	80 91 e1 0b 	lds	r24, 0x0BE1	; 0x800be1 <twi_error>
    5c56:	80 32       	cpi	r24, 0x20	; 32
    5c58:	41 f0       	breq	.+16     	; 0x5c6a <twi_writeTo+0xa0>
    5c5a:	80 91 e1 0b 	lds	r24, 0x0BE1	; 0x800be1 <twi_error>
    5c5e:	80 33       	cpi	r24, 0x30	; 48
    5c60:	31 f0       	breq	.+12     	; 0x5c6e <twi_writeTo+0xa4>
    5c62:	94 e0       	ldi	r25, 0x04	; 4
    5c64:	05 c0       	rjmp	.+10     	; 0x5c70 <twi_writeTo+0xa6>
    5c66:	91 e0       	ldi	r25, 0x01	; 1
    5c68:	03 c0       	rjmp	.+6      	; 0x5c70 <twi_writeTo+0xa6>
    5c6a:	92 e0       	ldi	r25, 0x02	; 2
    5c6c:	01 c0       	rjmp	.+2      	; 0x5c70 <twi_writeTo+0xa6>
    5c6e:	93 e0       	ldi	r25, 0x03	; 3
    5c70:	89 2f       	mov	r24, r25
    5c72:	0f 91       	pop	r16
    5c74:	08 95       	ret

00005c76 <twi_transmit>:
    5c76:	40 91 03 0c 	lds	r20, 0x0C03	; 0x800c03 <twi_txBufferLength>
    5c7a:	26 2f       	mov	r18, r22
    5c7c:	30 e0       	ldi	r19, 0x00	; 0
    5c7e:	24 0f       	add	r18, r20
    5c80:	31 1d       	adc	r19, r1
    5c82:	21 32       	cpi	r18, 0x21	; 33
    5c84:	31 05       	cpc	r19, r1
    5c86:	dc f4       	brge	.+54     	; 0x5cbe <twi_transmit+0x48>
    5c88:	20 91 4e 0c 	lds	r18, 0x0C4E	; 0x800c4e <twi_state>
    5c8c:	24 30       	cpi	r18, 0x04	; 4
    5c8e:	c9 f4       	brne	.+50     	; 0x5cc2 <twi_transmit+0x4c>
    5c90:	fc 01       	movw	r30, r24
    5c92:	80 e0       	ldi	r24, 0x00	; 0
    5c94:	90 e0       	ldi	r25, 0x00	; 0
    5c96:	86 17       	cp	r24, r22
    5c98:	58 f4       	brcc	.+22     	; 0x5cb0 <twi_transmit+0x3a>
    5c9a:	30 91 03 0c 	lds	r19, 0x0C03	; 0x800c03 <twi_txBufferLength>
    5c9e:	21 91       	ld	r18, Z+
    5ca0:	dc 01       	movw	r26, r24
    5ca2:	ab 5f       	subi	r26, 0xFB	; 251
    5ca4:	b3 4f       	sbci	r27, 0xF3	; 243
    5ca6:	a3 0f       	add	r26, r19
    5ca8:	b1 1d       	adc	r27, r1
    5caa:	2c 93       	st	X, r18
    5cac:	01 96       	adiw	r24, 0x01	; 1
    5cae:	f3 cf       	rjmp	.-26     	; 0x5c96 <twi_transmit+0x20>
    5cb0:	80 91 03 0c 	lds	r24, 0x0C03	; 0x800c03 <twi_txBufferLength>
    5cb4:	68 0f       	add	r22, r24
    5cb6:	60 93 03 0c 	sts	0x0C03, r22	; 0x800c03 <twi_txBufferLength>
    5cba:	80 e0       	ldi	r24, 0x00	; 0
    5cbc:	08 95       	ret
    5cbe:	81 e0       	ldi	r24, 0x01	; 1
    5cc0:	08 95       	ret
    5cc2:	82 e0       	ldi	r24, 0x02	; 2
    5cc4:	08 95       	ret

00005cc6 <twi_attachSlaveRxEvent>:
    5cc6:	90 93 48 0c 	sts	0x0C48, r25	; 0x800c48 <twi_onSlaveReceive+0x1>
    5cca:	80 93 47 0c 	sts	0x0C47, r24	; 0x800c47 <twi_onSlaveReceive>
    5cce:	08 95       	ret

00005cd0 <twi_attachSlaveTxEvent>:
    5cd0:	90 93 4a 0c 	sts	0x0C4A, r25	; 0x800c4a <twi_onSlaveTransmit+0x1>
    5cd4:	80 93 49 0c 	sts	0x0C49, r24	; 0x800c49 <twi_onSlaveTransmit>
    5cd8:	08 95       	ret

00005cda <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    5cda:	85 ed       	ldi	r24, 0xD5	; 213
    5cdc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    5ce0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5ce4:	84 fd       	sbrc	r24, 4
    5ce6:	fc cf       	rjmp	.-8      	; 0x5ce0 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    5ce8:	10 92 4e 0c 	sts	0x0C4E, r1	; 0x800c4e <twi_state>
    5cec:	08 95       	ret

00005cee <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    5cee:	85 ec       	ldi	r24, 0xC5	; 197
    5cf0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    5cf4:	10 92 4e 0c 	sts	0x0C4E, r1	; 0x800c4e <twi_state>
    5cf8:	08 95       	ret

00005cfa <__vector_26>:
}

ISR(TWI_vect)
{
    5cfa:	1f 92       	push	r1
    5cfc:	0f 92       	push	r0
    5cfe:	0f b6       	in	r0, 0x3f	; 63
    5d00:	0f 92       	push	r0
    5d02:	11 24       	eor	r1, r1
    5d04:	0b b6       	in	r0, 0x3b	; 59
    5d06:	0f 92       	push	r0
    5d08:	2f 93       	push	r18
    5d0a:	3f 93       	push	r19
    5d0c:	4f 93       	push	r20
    5d0e:	5f 93       	push	r21
    5d10:	6f 93       	push	r22
    5d12:	7f 93       	push	r23
    5d14:	8f 93       	push	r24
    5d16:	9f 93       	push	r25
    5d18:	af 93       	push	r26
    5d1a:	bf 93       	push	r27
    5d1c:	ef 93       	push	r30
    5d1e:	ff 93       	push	r31
  switch(TW_STATUS){
    5d20:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5d24:	88 7f       	andi	r24, 0xF8	; 248
    5d26:	80 36       	cpi	r24, 0x60	; 96
    5d28:	09 f4       	brne	.+2      	; 0x5d2c <__vector_26+0x32>
    5d2a:	9d c0       	rjmp	.+314    	; 0x5e66 <__vector_26+0x16c>
    5d2c:	70 f5       	brcc	.+92     	; 0x5d8a <__vector_26+0x90>
    5d2e:	88 32       	cpi	r24, 0x28	; 40
    5d30:	09 f4       	brne	.+2      	; 0x5d34 <__vector_26+0x3a>
    5d32:	5c c0       	rjmp	.+184    	; 0x5dec <__vector_26+0xf2>
    5d34:	90 f4       	brcc	.+36     	; 0x5d5a <__vector_26+0x60>
    5d36:	80 31       	cpi	r24, 0x10	; 16
    5d38:	09 f4       	brne	.+2      	; 0x5d3c <__vector_26+0x42>
    5d3a:	55 c0       	rjmp	.+170    	; 0x5de6 <__vector_26+0xec>
    5d3c:	38 f4       	brcc	.+14     	; 0x5d4c <__vector_26+0x52>
    5d3e:	88 23       	and	r24, r24
    5d40:	09 f4       	brne	.+2      	; 0x5d44 <__vector_26+0x4a>
    5d42:	f3 c0       	rjmp	.+486    	; 0x5f2a <__vector_26+0x230>
    5d44:	88 30       	cpi	r24, 0x08	; 8
    5d46:	09 f4       	brne	.+2      	; 0x5d4a <__vector_26+0x50>
    5d48:	4e c0       	rjmp	.+156    	; 0x5de6 <__vector_26+0xec>
    5d4a:	f2 c0       	rjmp	.+484    	; 0x5f30 <__vector_26+0x236>
    5d4c:	88 31       	cpi	r24, 0x18	; 24
    5d4e:	09 f4       	brne	.+2      	; 0x5d52 <__vector_26+0x58>
    5d50:	4d c0       	rjmp	.+154    	; 0x5dec <__vector_26+0xf2>
    5d52:	80 32       	cpi	r24, 0x20	; 32
    5d54:	09 f4       	brne	.+2      	; 0x5d58 <__vector_26+0x5e>
    5d56:	5e c0       	rjmp	.+188    	; 0x5e14 <__vector_26+0x11a>
    5d58:	eb c0       	rjmp	.+470    	; 0x5f30 <__vector_26+0x236>
    5d5a:	80 34       	cpi	r24, 0x40	; 64
    5d5c:	09 f4       	brne	.+2      	; 0x5d60 <__vector_26+0x66>
    5d5e:	69 c0       	rjmp	.+210    	; 0x5e32 <__vector_26+0x138>
    5d60:	50 f4       	brcc	.+20     	; 0x5d76 <__vector_26+0x7c>
    5d62:	80 33       	cpi	r24, 0x30	; 48
    5d64:	09 f4       	brne	.+2      	; 0x5d68 <__vector_26+0x6e>
    5d66:	56 c0       	rjmp	.+172    	; 0x5e14 <__vector_26+0x11a>
    5d68:	88 33       	cpi	r24, 0x38	; 56
    5d6a:	09 f0       	breq	.+2      	; 0x5d6e <__vector_26+0x74>
    5d6c:	e1 c0       	rjmp	.+450    	; 0x5f30 <__vector_26+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    5d6e:	80 93 e1 0b 	sts	0x0BE1, r24	; 0x800be1 <twi_error>
      twi_releaseBus();
    5d72:	bd df       	rcall	.-134    	; 0x5cee <twi_releaseBus>
      break;
    5d74:	dd c0       	rjmp	.+442    	; 0x5f30 <__vector_26+0x236>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    5d76:	80 35       	cpi	r24, 0x50	; 80
    5d78:	09 f4       	brne	.+2      	; 0x5d7c <__vector_26+0x82>
    5d7a:	4f c0       	rjmp	.+158    	; 0x5e1a <__vector_26+0x120>
    5d7c:	88 35       	cpi	r24, 0x58	; 88
    5d7e:	09 f4       	brne	.+2      	; 0x5d82 <__vector_26+0x88>
    5d80:	5d c0       	rjmp	.+186    	; 0x5e3c <__vector_26+0x142>
    5d82:	88 34       	cpi	r24, 0x48	; 72
    5d84:	09 f0       	breq	.+2      	; 0x5d88 <__vector_26+0x8e>
    5d86:	d4 c0       	rjmp	.+424    	; 0x5f30 <__vector_26+0x236>
    5d88:	d2 c0       	rjmp	.+420    	; 0x5f2e <__vector_26+0x234>
    5d8a:	88 39       	cpi	r24, 0x98	; 152
    5d8c:	09 f4       	brne	.+2      	; 0x5d90 <__vector_26+0x96>
    5d8e:	c3 c0       	rjmp	.+390    	; 0x5f16 <__vector_26+0x21c>
    5d90:	a8 f4       	brcc	.+42     	; 0x5dbc <__vector_26+0xc2>
    5d92:	88 37       	cpi	r24, 0x78	; 120
    5d94:	09 f4       	brne	.+2      	; 0x5d98 <__vector_26+0x9e>
    5d96:	67 c0       	rjmp	.+206    	; 0x5e66 <__vector_26+0x16c>
    5d98:	38 f4       	brcc	.+14     	; 0x5da8 <__vector_26+0xae>
    5d9a:	88 36       	cpi	r24, 0x68	; 104
    5d9c:	09 f4       	brne	.+2      	; 0x5da0 <__vector_26+0xa6>
    5d9e:	63 c0       	rjmp	.+198    	; 0x5e66 <__vector_26+0x16c>
    5da0:	80 37       	cpi	r24, 0x70	; 112
    5da2:	09 f4       	brne	.+2      	; 0x5da6 <__vector_26+0xac>
    5da4:	60 c0       	rjmp	.+192    	; 0x5e66 <__vector_26+0x16c>
    5da6:	c4 c0       	rjmp	.+392    	; 0x5f30 <__vector_26+0x236>
    5da8:	88 38       	cpi	r24, 0x88	; 136
    5daa:	09 f4       	brne	.+2      	; 0x5dae <__vector_26+0xb4>
    5dac:	b4 c0       	rjmp	.+360    	; 0x5f16 <__vector_26+0x21c>
    5dae:	80 39       	cpi	r24, 0x90	; 144
    5db0:	09 f4       	brne	.+2      	; 0x5db4 <__vector_26+0xba>
    5db2:	5f c0       	rjmp	.+190    	; 0x5e72 <__vector_26+0x178>
    5db4:	80 38       	cpi	r24, 0x80	; 128
    5db6:	09 f0       	breq	.+2      	; 0x5dba <__vector_26+0xc0>
    5db8:	bb c0       	rjmp	.+374    	; 0x5f30 <__vector_26+0x236>
    5dba:	5b c0       	rjmp	.+182    	; 0x5e72 <__vector_26+0x178>
    5dbc:	80 3b       	cpi	r24, 0xB0	; 176
    5dbe:	09 f4       	brne	.+2      	; 0x5dc2 <__vector_26+0xc8>
    5dc0:	82 c0       	rjmp	.+260    	; 0x5ec6 <__vector_26+0x1cc>
    5dc2:	38 f4       	brcc	.+14     	; 0x5dd2 <__vector_26+0xd8>
    5dc4:	80 3a       	cpi	r24, 0xA0	; 160
    5dc6:	09 f4       	brne	.+2      	; 0x5dca <__vector_26+0xd0>
    5dc8:	66 c0       	rjmp	.+204    	; 0x5e96 <__vector_26+0x19c>
    5dca:	88 3a       	cpi	r24, 0xA8	; 168
    5dcc:	09 f4       	brne	.+2      	; 0x5dd0 <__vector_26+0xd6>
    5dce:	7b c0       	rjmp	.+246    	; 0x5ec6 <__vector_26+0x1cc>
    5dd0:	af c0       	rjmp	.+350    	; 0x5f30 <__vector_26+0x236>
    5dd2:	80 3c       	cpi	r24, 0xC0	; 192
    5dd4:	09 f4       	brne	.+2      	; 0x5dd8 <__vector_26+0xde>
    5dd6:	a3 c0       	rjmp	.+326    	; 0x5f1e <__vector_26+0x224>
    5dd8:	88 3c       	cpi	r24, 0xC8	; 200
    5dda:	09 f4       	brne	.+2      	; 0x5dde <__vector_26+0xe4>
    5ddc:	a0 c0       	rjmp	.+320    	; 0x5f1e <__vector_26+0x224>
    5dde:	88 3b       	cpi	r24, 0xB8	; 184
    5de0:	09 f4       	brne	.+2      	; 0x5de4 <__vector_26+0xea>
    5de2:	86 c0       	rjmp	.+268    	; 0x5ef0 <__vector_26+0x1f6>
    5de4:	a5 c0       	rjmp	.+330    	; 0x5f30 <__vector_26+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    5de6:	80 91 4d 0c 	lds	r24, 0x0C4D	; 0x800c4d <twi_slarw>
    5dea:	10 c0       	rjmp	.+32     	; 0x5e0c <__vector_26+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    5dec:	90 91 26 0c 	lds	r25, 0x0C26	; 0x800c26 <twi_masterBufferIndex>
    5df0:	80 91 25 0c 	lds	r24, 0x0C25	; 0x800c25 <twi_masterBufferLength>
    5df4:	98 17       	cp	r25, r24
    5df6:	70 f5       	brcc	.+92     	; 0x5e54 <__vector_26+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    5df8:	e0 91 26 0c 	lds	r30, 0x0C26	; 0x800c26 <twi_masterBufferIndex>
    5dfc:	81 e0       	ldi	r24, 0x01	; 1
    5dfe:	8e 0f       	add	r24, r30
    5e00:	80 93 26 0c 	sts	0x0C26, r24	; 0x800c26 <twi_masterBufferIndex>
    5e04:	f0 e0       	ldi	r31, 0x00	; 0
    5e06:	e9 5d       	subi	r30, 0xD9	; 217
    5e08:	f3 4f       	sbci	r31, 0xF3	; 243
    5e0a:	80 81       	ld	r24, Z
    5e0c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    5e10:	85 ec       	ldi	r24, 0xC5	; 197
    5e12:	82 c0       	rjmp	.+260    	; 0x5f18 <__vector_26+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    5e14:	80 93 e1 0b 	sts	0x0BE1, r24	; 0x800be1 <twi_error>
    5e18:	8a c0       	rjmp	.+276    	; 0x5f2e <__vector_26+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    5e1a:	e0 91 26 0c 	lds	r30, 0x0C26	; 0x800c26 <twi_masterBufferIndex>
    5e1e:	81 e0       	ldi	r24, 0x01	; 1
    5e20:	8e 0f       	add	r24, r30
    5e22:	80 93 26 0c 	sts	0x0C26, r24	; 0x800c26 <twi_masterBufferIndex>
    5e26:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5e2a:	f0 e0       	ldi	r31, 0x00	; 0
    5e2c:	e9 5d       	subi	r30, 0xD9	; 217
    5e2e:	f3 4f       	sbci	r31, 0xF3	; 243
    5e30:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    5e32:	90 91 26 0c 	lds	r25, 0x0C26	; 0x800c26 <twi_masterBufferIndex>
    5e36:	80 91 25 0c 	lds	r24, 0x0C25	; 0x800c25 <twi_masterBufferLength>
    5e3a:	6a c0       	rjmp	.+212    	; 0x5f10 <__vector_26+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    5e3c:	e0 91 26 0c 	lds	r30, 0x0C26	; 0x800c26 <twi_masterBufferIndex>
    5e40:	81 e0       	ldi	r24, 0x01	; 1
    5e42:	8e 0f       	add	r24, r30
    5e44:	80 93 26 0c 	sts	0x0C26, r24	; 0x800c26 <twi_masterBufferIndex>
    5e48:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5e4c:	f0 e0       	ldi	r31, 0x00	; 0
    5e4e:	e9 5d       	subi	r30, 0xD9	; 217
    5e50:	f3 4f       	sbci	r31, 0xF3	; 243
    5e52:	80 83       	st	Z, r24
	if (twi_sendStop)
    5e54:	80 91 4c 0c 	lds	r24, 0x0C4C	; 0x800c4c <twi_sendStop>
    5e58:	81 11       	cpse	r24, r1
    5e5a:	69 c0       	rjmp	.+210    	; 0x5f2e <__vector_26+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    5e5c:	81 e0       	ldi	r24, 0x01	; 1
    5e5e:	80 93 4b 0c 	sts	0x0C4B, r24	; 0x800c4b <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    5e62:	84 ea       	ldi	r24, 0xA4	; 164
    5e64:	5d c0       	rjmp	.+186    	; 0x5f20 <__vector_26+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    5e66:	83 e0       	ldi	r24, 0x03	; 3
    5e68:	80 93 4e 0c 	sts	0x0C4E, r24	; 0x800c4e <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    5e6c:	10 92 e2 0b 	sts	0x0BE2, r1	; 0x800be2 <twi_rxBufferIndex>
    5e70:	cf cf       	rjmp	.-98     	; 0x5e10 <__vector_26+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    5e72:	80 91 e2 0b 	lds	r24, 0x0BE2	; 0x800be2 <twi_rxBufferIndex>
    5e76:	80 32       	cpi	r24, 0x20	; 32
    5e78:	08 f0       	brcs	.+2      	; 0x5e7c <__vector_26+0x182>
    5e7a:	4d c0       	rjmp	.+154    	; 0x5f16 <__vector_26+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    5e7c:	e0 91 e2 0b 	lds	r30, 0x0BE2	; 0x800be2 <twi_rxBufferIndex>
    5e80:	81 e0       	ldi	r24, 0x01	; 1
    5e82:	8e 0f       	add	r24, r30
    5e84:	80 93 e2 0b 	sts	0x0BE2, r24	; 0x800be2 <twi_rxBufferIndex>
    5e88:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5e8c:	f0 e0       	ldi	r31, 0x00	; 0
    5e8e:	ed 51       	subi	r30, 0x1D	; 29
    5e90:	f4 4f       	sbci	r31, 0xF4	; 244
    5e92:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    5e94:	bd cf       	rjmp	.-134    	; 0x5e10 <__vector_26+0x116>
    5e96:	2b df       	rcall	.-426    	; 0x5cee <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    5e98:	80 91 e2 0b 	lds	r24, 0x0BE2	; 0x800be2 <twi_rxBufferIndex>
    5e9c:	80 32       	cpi	r24, 0x20	; 32
    5e9e:	30 f4       	brcc	.+12     	; 0x5eac <__vector_26+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    5ea0:	e0 91 e2 0b 	lds	r30, 0x0BE2	; 0x800be2 <twi_rxBufferIndex>
    5ea4:	f0 e0       	ldi	r31, 0x00	; 0
    5ea6:	ed 51       	subi	r30, 0x1D	; 29
    5ea8:	f4 4f       	sbci	r31, 0xF4	; 244
    5eaa:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    5eac:	60 91 e2 0b 	lds	r22, 0x0BE2	; 0x800be2 <twi_rxBufferIndex>
    5eb0:	70 e0       	ldi	r23, 0x00	; 0
    5eb2:	e0 91 47 0c 	lds	r30, 0x0C47	; 0x800c47 <twi_onSlaveReceive>
    5eb6:	f0 91 48 0c 	lds	r31, 0x0C48	; 0x800c48 <twi_onSlaveReceive+0x1>
    5eba:	83 ee       	ldi	r24, 0xE3	; 227
    5ebc:	9b e0       	ldi	r25, 0x0B	; 11
    5ebe:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    5ec0:	10 92 e2 0b 	sts	0x0BE2, r1	; 0x800be2 <twi_rxBufferIndex>
      break;
    5ec4:	35 c0       	rjmp	.+106    	; 0x5f30 <__vector_26+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    5ec6:	84 e0       	ldi	r24, 0x04	; 4
    5ec8:	80 93 4e 0c 	sts	0x0C4E, r24	; 0x800c4e <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    5ecc:	10 92 04 0c 	sts	0x0C04, r1	; 0x800c04 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    5ed0:	10 92 03 0c 	sts	0x0C03, r1	; 0x800c03 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    5ed4:	e0 91 49 0c 	lds	r30, 0x0C49	; 0x800c49 <twi_onSlaveTransmit>
    5ed8:	f0 91 4a 0c 	lds	r31, 0x0C4A	; 0x800c4a <twi_onSlaveTransmit+0x1>
    5edc:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    5ede:	80 91 03 0c 	lds	r24, 0x0C03	; 0x800c03 <twi_txBufferLength>
    5ee2:	81 11       	cpse	r24, r1
    5ee4:	05 c0       	rjmp	.+10     	; 0x5ef0 <__vector_26+0x1f6>
        twi_txBufferLength = 1;
    5ee6:	81 e0       	ldi	r24, 0x01	; 1
    5ee8:	80 93 03 0c 	sts	0x0C03, r24	; 0x800c03 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    5eec:	10 92 05 0c 	sts	0x0C05, r1	; 0x800c05 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    5ef0:	e0 91 04 0c 	lds	r30, 0x0C04	; 0x800c04 <twi_txBufferIndex>
    5ef4:	81 e0       	ldi	r24, 0x01	; 1
    5ef6:	8e 0f       	add	r24, r30
    5ef8:	80 93 04 0c 	sts	0x0C04, r24	; 0x800c04 <twi_txBufferIndex>
    5efc:	f0 e0       	ldi	r31, 0x00	; 0
    5efe:	eb 5f       	subi	r30, 0xFB	; 251
    5f00:	f3 4f       	sbci	r31, 0xF3	; 243
    5f02:	80 81       	ld	r24, Z
    5f04:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    5f08:	90 91 04 0c 	lds	r25, 0x0C04	; 0x800c04 <twi_txBufferIndex>
    5f0c:	80 91 03 0c 	lds	r24, 0x0C03	; 0x800c03 <twi_txBufferLength>
    5f10:	98 17       	cp	r25, r24
    5f12:	08 f4       	brcc	.+2      	; 0x5f16 <__vector_26+0x21c>
    5f14:	7d cf       	rjmp	.-262    	; 0x5e10 <__vector_26+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    5f16:	85 e8       	ldi	r24, 0x85	; 133
    5f18:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5f1c:	09 c0       	rjmp	.+18     	; 0x5f30 <__vector_26+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    5f1e:	85 ec       	ldi	r24, 0xC5	; 197
    5f20:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    5f24:	10 92 4e 0c 	sts	0x0C4E, r1	; 0x800c4e <twi_state>
      break;
    5f28:	03 c0       	rjmp	.+6      	; 0x5f30 <__vector_26+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    5f2a:	10 92 e1 0b 	sts	0x0BE1, r1	; 0x800be1 <twi_error>
      twi_stop();
    5f2e:	d5 de       	rcall	.-598    	; 0x5cda <twi_stop>
      break;
  }
}
    5f30:	ff 91       	pop	r31
    5f32:	ef 91       	pop	r30
    5f34:	bf 91       	pop	r27
    5f36:	af 91       	pop	r26
    5f38:	9f 91       	pop	r25
    5f3a:	8f 91       	pop	r24
    5f3c:	7f 91       	pop	r23
    5f3e:	6f 91       	pop	r22
    5f40:	5f 91       	pop	r21
    5f42:	4f 91       	pop	r20
    5f44:	3f 91       	pop	r19
    5f46:	2f 91       	pop	r18
    5f48:	0f 90       	pop	r0
    5f4a:	0b be       	out	0x3b, r0	; 59
    5f4c:	0f 90       	pop	r0
    5f4e:	0f be       	out	0x3f, r0	; 63
    5f50:	0f 90       	pop	r0
    5f52:	1f 90       	pop	r1
    5f54:	18 95       	reti

00005f56 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    5f56:	80 91 83 0c 	lds	r24, 0x0C83	; 0x800c83 <_ZN7TwoWire14rxBufferLengthE>
    5f5a:	90 e0       	ldi	r25, 0x00	; 0
    5f5c:	20 91 84 0c 	lds	r18, 0x0C84	; 0x800c84 <_ZN7TwoWire13rxBufferIndexE>
    5f60:	82 1b       	sub	r24, r18
    5f62:	91 09       	sbc	r25, r1
    5f64:	08 95       	ret

00005f66 <_ZN7TwoWire4readEv>:
    5f66:	90 91 84 0c 	lds	r25, 0x0C84	; 0x800c84 <_ZN7TwoWire13rxBufferIndexE>
    5f6a:	80 91 83 0c 	lds	r24, 0x0C83	; 0x800c83 <_ZN7TwoWire14rxBufferLengthE>
    5f6e:	98 17       	cp	r25, r24
    5f70:	50 f4       	brcc	.+20     	; 0x5f86 <_ZN7TwoWire4readEv+0x20>
    5f72:	e9 2f       	mov	r30, r25
    5f74:	f0 e0       	ldi	r31, 0x00	; 0
    5f76:	eb 57       	subi	r30, 0x7B	; 123
    5f78:	f3 4f       	sbci	r31, 0xF3	; 243
    5f7a:	20 81       	ld	r18, Z
    5f7c:	30 e0       	ldi	r19, 0x00	; 0
    5f7e:	9f 5f       	subi	r25, 0xFF	; 255
    5f80:	90 93 84 0c 	sts	0x0C84, r25	; 0x800c84 <_ZN7TwoWire13rxBufferIndexE>
    5f84:	02 c0       	rjmp	.+4      	; 0x5f8a <_ZN7TwoWire4readEv+0x24>
    5f86:	2f ef       	ldi	r18, 0xFF	; 255
    5f88:	3f ef       	ldi	r19, 0xFF	; 255
    5f8a:	c9 01       	movw	r24, r18
    5f8c:	08 95       	ret

00005f8e <_ZN7TwoWire4peekEv>:
    5f8e:	e0 91 84 0c 	lds	r30, 0x0C84	; 0x800c84 <_ZN7TwoWire13rxBufferIndexE>
    5f92:	80 91 83 0c 	lds	r24, 0x0C83	; 0x800c83 <_ZN7TwoWire14rxBufferLengthE>
    5f96:	e8 17       	cp	r30, r24
    5f98:	30 f4       	brcc	.+12     	; 0x5fa6 <_ZN7TwoWire4peekEv+0x18>
    5f9a:	f0 e0       	ldi	r31, 0x00	; 0
    5f9c:	eb 57       	subi	r30, 0x7B	; 123
    5f9e:	f3 4f       	sbci	r31, 0xF3	; 243
    5fa0:	80 81       	ld	r24, Z
    5fa2:	90 e0       	ldi	r25, 0x00	; 0
    5fa4:	08 95       	ret
    5fa6:	8f ef       	ldi	r24, 0xFF	; 255
    5fa8:	9f ef       	ldi	r25, 0xFF	; 255
    5faa:	08 95       	ret

00005fac <_ZN7TwoWire5flushEv>:
    5fac:	08 95       	ret

00005fae <_ZN7TwoWire16onReceiveServiceEPhi>:
    5fae:	cf 93       	push	r28
    5fb0:	df 93       	push	r29
    5fb2:	ec 01       	movw	r28, r24
    5fb4:	e0 91 5b 0c 	lds	r30, 0x0C5B	; 0x800c5b <_ZN7TwoWire14user_onReceiveE>
    5fb8:	f0 91 5c 0c 	lds	r31, 0x0C5C	; 0x800c5c <_ZN7TwoWire14user_onReceiveE+0x1>
    5fbc:	30 97       	sbiw	r30, 0x00	; 0
    5fbe:	f1 f0       	breq	.+60     	; 0x5ffc <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    5fc0:	90 91 84 0c 	lds	r25, 0x0C84	; 0x800c84 <_ZN7TwoWire13rxBufferIndexE>
    5fc4:	80 91 83 0c 	lds	r24, 0x0C83	; 0x800c83 <_ZN7TwoWire14rxBufferLengthE>
    5fc8:	98 17       	cp	r25, r24
    5fca:	c0 f0       	brcs	.+48     	; 0x5ffc <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    5fcc:	90 e0       	ldi	r25, 0x00	; 0
    5fce:	29 2f       	mov	r18, r25
    5fd0:	30 e0       	ldi	r19, 0x00	; 0
    5fd2:	26 17       	cp	r18, r22
    5fd4:	37 07       	cpc	r19, r23
    5fd6:	54 f4       	brge	.+20     	; 0x5fec <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    5fd8:	de 01       	movw	r26, r28
    5fda:	a2 0f       	add	r26, r18
    5fdc:	b3 1f       	adc	r27, r19
    5fde:	4c 91       	ld	r20, X
    5fe0:	d9 01       	movw	r26, r18
    5fe2:	ab 57       	subi	r26, 0x7B	; 123
    5fe4:	b3 4f       	sbci	r27, 0xF3	; 243
    5fe6:	4c 93       	st	X, r20
    5fe8:	9f 5f       	subi	r25, 0xFF	; 255
    5fea:	f1 cf       	rjmp	.-30     	; 0x5fce <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    5fec:	10 92 84 0c 	sts	0x0C84, r1	; 0x800c84 <_ZN7TwoWire13rxBufferIndexE>
    5ff0:	60 93 83 0c 	sts	0x0C83, r22	; 0x800c83 <_ZN7TwoWire14rxBufferLengthE>
    5ff4:	cb 01       	movw	r24, r22
    5ff6:	df 91       	pop	r29
    5ff8:	cf 91       	pop	r28
    5ffa:	09 94       	ijmp
    5ffc:	df 91       	pop	r29
    5ffe:	cf 91       	pop	r28
    6000:	08 95       	ret

00006002 <_ZN7TwoWire16onRequestServiceEv>:
    6002:	e0 91 5d 0c 	lds	r30, 0x0C5D	; 0x800c5d <_ZN7TwoWire14user_onRequestE>
    6006:	f0 91 5e 0c 	lds	r31, 0x0C5E	; 0x800c5e <_ZN7TwoWire14user_onRequestE+0x1>
    600a:	30 97       	sbiw	r30, 0x00	; 0
    600c:	29 f0       	breq	.+10     	; 0x6018 <_ZN7TwoWire16onRequestServiceEv+0x16>
    600e:	10 92 61 0c 	sts	0x0C61, r1	; 0x800c61 <_ZN7TwoWire13txBufferIndexE>
    6012:	10 92 60 0c 	sts	0x0C60, r1	; 0x800c60 <_ZN7TwoWire14txBufferLengthE>
    6016:	09 94       	ijmp
    6018:	08 95       	ret

0000601a <_ZN7TwoWire5writeEPKhj>:
    601a:	cf 92       	push	r12
    601c:	df 92       	push	r13
    601e:	ef 92       	push	r14
    6020:	ff 92       	push	r15
    6022:	0f 93       	push	r16
    6024:	1f 93       	push	r17
    6026:	cf 93       	push	r28
    6028:	df 93       	push	r29
    602a:	7c 01       	movw	r14, r24
    602c:	cb 01       	movw	r24, r22
    602e:	8a 01       	movw	r16, r20
    6030:	20 91 5f 0c 	lds	r18, 0x0C5F	; 0x800c5f <_ZN7TwoWire12transmittingE>
    6034:	22 23       	and	r18, r18
    6036:	89 f0       	breq	.+34     	; 0x605a <_ZN7TwoWire5writeEPKhj+0x40>
    6038:	eb 01       	movw	r28, r22
    603a:	6b 01       	movw	r12, r22
    603c:	c4 0e       	add	r12, r20
    603e:	d5 1e       	adc	r13, r21
    6040:	cc 15       	cp	r28, r12
    6042:	dd 05       	cpc	r29, r13
    6044:	61 f0       	breq	.+24     	; 0x605e <_ZN7TwoWire5writeEPKhj+0x44>
    6046:	69 91       	ld	r22, Y+
    6048:	d7 01       	movw	r26, r14
    604a:	ed 91       	ld	r30, X+
    604c:	fc 91       	ld	r31, X
    604e:	01 90       	ld	r0, Z+
    6050:	f0 81       	ld	r31, Z
    6052:	e0 2d       	mov	r30, r0
    6054:	c7 01       	movw	r24, r14
    6056:	09 95       	icall
    6058:	f3 cf       	rjmp	.-26     	; 0x6040 <_ZN7TwoWire5writeEPKhj+0x26>
    605a:	64 2f       	mov	r22, r20
    605c:	0c de       	rcall	.-1000   	; 0x5c76 <twi_transmit>
    605e:	c8 01       	movw	r24, r16
    6060:	df 91       	pop	r29
    6062:	cf 91       	pop	r28
    6064:	1f 91       	pop	r17
    6066:	0f 91       	pop	r16
    6068:	ff 90       	pop	r15
    606a:	ef 90       	pop	r14
    606c:	df 90       	pop	r13
    606e:	cf 90       	pop	r12
    6070:	08 95       	ret

00006072 <_ZN7TwoWire5writeEh>:
    6072:	cf 93       	push	r28
    6074:	df 93       	push	r29
    6076:	1f 92       	push	r1
    6078:	cd b7       	in	r28, 0x3d	; 61
    607a:	de b7       	in	r29, 0x3e	; 62
    607c:	69 83       	std	Y+1, r22	; 0x01
    607e:	20 91 5f 0c 	lds	r18, 0x0C5F	; 0x800c5f <_ZN7TwoWire12transmittingE>
    6082:	22 23       	and	r18, r18
    6084:	d1 f0       	breq	.+52     	; 0x60ba <_ZN7TwoWire5writeEh+0x48>
    6086:	20 91 60 0c 	lds	r18, 0x0C60	; 0x800c60 <_ZN7TwoWire14txBufferLengthE>
    608a:	20 32       	cpi	r18, 0x20	; 32
    608c:	40 f0       	brcs	.+16     	; 0x609e <_ZN7TwoWire5writeEh+0x2c>
    608e:	21 e0       	ldi	r18, 0x01	; 1
    6090:	30 e0       	ldi	r19, 0x00	; 0
    6092:	fc 01       	movw	r30, r24
    6094:	33 83       	std	Z+3, r19	; 0x03
    6096:	22 83       	std	Z+2, r18	; 0x02
    6098:	80 e0       	ldi	r24, 0x00	; 0
    609a:	90 e0       	ldi	r25, 0x00	; 0
    609c:	14 c0       	rjmp	.+40     	; 0x60c6 <_ZN7TwoWire5writeEh+0x54>
    609e:	80 91 61 0c 	lds	r24, 0x0C61	; 0x800c61 <_ZN7TwoWire13txBufferIndexE>
    60a2:	e8 2f       	mov	r30, r24
    60a4:	f0 e0       	ldi	r31, 0x00	; 0
    60a6:	ee 59       	subi	r30, 0x9E	; 158
    60a8:	f3 4f       	sbci	r31, 0xF3	; 243
    60aa:	99 81       	ldd	r25, Y+1	; 0x01
    60ac:	90 83       	st	Z, r25
    60ae:	8f 5f       	subi	r24, 0xFF	; 255
    60b0:	80 93 61 0c 	sts	0x0C61, r24	; 0x800c61 <_ZN7TwoWire13txBufferIndexE>
    60b4:	80 93 60 0c 	sts	0x0C60, r24	; 0x800c60 <_ZN7TwoWire14txBufferLengthE>
    60b8:	04 c0       	rjmp	.+8      	; 0x60c2 <_ZN7TwoWire5writeEh+0x50>
    60ba:	61 e0       	ldi	r22, 0x01	; 1
    60bc:	ce 01       	movw	r24, r28
    60be:	01 96       	adiw	r24, 0x01	; 1
    60c0:	da dd       	rcall	.-1100   	; 0x5c76 <twi_transmit>
    60c2:	81 e0       	ldi	r24, 0x01	; 1
    60c4:	90 e0       	ldi	r25, 0x00	; 0
    60c6:	0f 90       	pop	r0
    60c8:	df 91       	pop	r29
    60ca:	cf 91       	pop	r28
    60cc:	08 95       	ret

000060ce <_ZN7TwoWireC1Ev>:
    60ce:	fc 01       	movw	r30, r24
    60d0:	13 82       	std	Z+3, r1	; 0x03
    60d2:	12 82       	std	Z+2, r1	; 0x02
    60d4:	88 ee       	ldi	r24, 0xE8	; 232
    60d6:	93 e0       	ldi	r25, 0x03	; 3
    60d8:	a0 e0       	ldi	r26, 0x00	; 0
    60da:	b0 e0       	ldi	r27, 0x00	; 0
    60dc:	84 83       	std	Z+4, r24	; 0x04
    60de:	95 83       	std	Z+5, r25	; 0x05
    60e0:	a6 83       	std	Z+6, r26	; 0x06
    60e2:	b7 83       	std	Z+7, r27	; 0x07
    60e4:	83 ec       	ldi	r24, 0xC3	; 195
    60e6:	99 e0       	ldi	r25, 0x09	; 9
    60e8:	91 83       	std	Z+1, r25	; 0x01
    60ea:	80 83       	st	Z, r24
    60ec:	08 95       	ret

000060ee <_ZN7TwoWire5beginEv>:
    60ee:	10 92 84 0c 	sts	0x0C84, r1	; 0x800c84 <_ZN7TwoWire13rxBufferIndexE>
    60f2:	10 92 83 0c 	sts	0x0C83, r1	; 0x800c83 <_ZN7TwoWire14rxBufferLengthE>
    60f6:	10 92 61 0c 	sts	0x0C61, r1	; 0x800c61 <_ZN7TwoWire13txBufferIndexE>
    60fa:	10 92 60 0c 	sts	0x0C60, r1	; 0x800c60 <_ZN7TwoWire14txBufferLengthE>
    60fe:	de dc       	rcall	.-1604   	; 0x5abc <twi_init>
    6100:	81 e0       	ldi	r24, 0x01	; 1
    6102:	90 e3       	ldi	r25, 0x30	; 48
    6104:	e5 dd       	rcall	.-1078   	; 0x5cd0 <twi_attachSlaveTxEvent>
    6106:	87 ed       	ldi	r24, 0xD7	; 215
    6108:	9f e2       	ldi	r25, 0x2F	; 47
    610a:	dd cd       	rjmp	.-1094   	; 0x5cc6 <twi_attachSlaveRxEvent>

0000610c <_ZN7TwoWire3endEv>:
    610c:	f5 cc       	rjmp	.-1558   	; 0x5af8 <twi_disable>

0000610e <_ZN7TwoWire8setClockEm>:
    610e:	cb 01       	movw	r24, r22
    6110:	ba 01       	movw	r22, r20
    6112:	ff cc       	rjmp	.-1538   	; 0x5b12 <twi_setFrequency>

00006114 <_ZN7TwoWire17beginTransmissionEh>:
    6114:	81 e0       	ldi	r24, 0x01	; 1
    6116:	80 93 5f 0c 	sts	0x0C5F, r24	; 0x800c5f <_ZN7TwoWire12transmittingE>
    611a:	60 93 82 0c 	sts	0x0C82, r22	; 0x800c82 <_ZN7TwoWire9txAddressE>
    611e:	10 92 61 0c 	sts	0x0C61, r1	; 0x800c61 <_ZN7TwoWire13txBufferIndexE>
    6122:	10 92 60 0c 	sts	0x0C60, r1	; 0x800c60 <_ZN7TwoWire14txBufferLengthE>
    6126:	08 95       	ret

00006128 <_ZN7TwoWire17beginTransmissionEi>:
    6128:	f5 cf       	rjmp	.-22     	; 0x6114 <_ZN7TwoWire17beginTransmissionEh>

0000612a <_ZN7TwoWire15endTransmissionEh>:
    612a:	0f 93       	push	r16
    612c:	06 2f       	mov	r16, r22
    612e:	21 e0       	ldi	r18, 0x01	; 1
    6130:	40 91 60 0c 	lds	r20, 0x0C60	; 0x800c60 <_ZN7TwoWire14txBufferLengthE>
    6134:	62 e6       	ldi	r22, 0x62	; 98
    6136:	7c e0       	ldi	r23, 0x0C	; 12
    6138:	80 91 82 0c 	lds	r24, 0x0C82	; 0x800c82 <_ZN7TwoWire9txAddressE>
    613c:	46 dd       	rcall	.-1396   	; 0x5bca <twi_writeTo>
    613e:	10 92 61 0c 	sts	0x0C61, r1	; 0x800c61 <_ZN7TwoWire13txBufferIndexE>
    6142:	10 92 60 0c 	sts	0x0C60, r1	; 0x800c60 <_ZN7TwoWire14txBufferLengthE>
    6146:	10 92 5f 0c 	sts	0x0C5F, r1	; 0x800c5f <_ZN7TwoWire12transmittingE>
    614a:	0f 91       	pop	r16
    614c:	08 95       	ret

0000614e <_ZN7TwoWire11requestFromEhhmhh>:
    614e:	4f 92       	push	r4
    6150:	5f 92       	push	r5
    6152:	6f 92       	push	r6
    6154:	7f 92       	push	r7
    6156:	af 92       	push	r10
    6158:	bf 92       	push	r11
    615a:	cf 92       	push	r12
    615c:	ef 92       	push	r14
    615e:	ff 92       	push	r15
    6160:	0f 93       	push	r16
    6162:	1f 93       	push	r17
    6164:	cf 93       	push	r28
    6166:	df 93       	push	r29
    6168:	5c 01       	movw	r10, r24
    616a:	f6 2e       	mov	r15, r22
    616c:	d4 2f       	mov	r29, r20
    616e:	28 01       	movw	r4, r16
    6170:	39 01       	movw	r6, r18
    6172:	ee 20       	and	r14, r14
    6174:	11 f1       	breq	.+68     	; 0x61ba <_ZN7TwoWire11requestFromEhhmhh+0x6c>
    6176:	ce df       	rcall	.-100    	; 0x6114 <_ZN7TwoWire17beginTransmissionEh>
    6178:	ce 2d       	mov	r28, r14
    617a:	c4 30       	cpi	r28, 0x04	; 4
    617c:	08 f0       	brcs	.+2      	; 0x6180 <_ZN7TwoWire11requestFromEhhmhh+0x32>
    617e:	c3 e0       	ldi	r28, 0x03	; 3
    6180:	c1 50       	subi	r28, 0x01	; 1
    6182:	c0 f0       	brcs	.+48     	; 0x61b4 <_ZN7TwoWire11requestFromEhhmhh+0x66>
    6184:	28 e0       	ldi	r18, 0x08	; 8
    6186:	c2 9f       	mul	r28, r18
    6188:	c0 01       	movw	r24, r0
    618a:	11 24       	eor	r1, r1
    618c:	a3 01       	movw	r20, r6
    618e:	92 01       	movw	r18, r4
    6190:	04 c0       	rjmp	.+8      	; 0x619a <_ZN7TwoWire11requestFromEhhmhh+0x4c>
    6192:	56 95       	lsr	r21
    6194:	47 95       	ror	r20
    6196:	37 95       	ror	r19
    6198:	27 95       	ror	r18
    619a:	8a 95       	dec	r24
    619c:	d2 f7       	brpl	.-12     	; 0x6192 <_ZN7TwoWire11requestFromEhhmhh+0x44>
    619e:	ca 01       	movw	r24, r20
    61a0:	b9 01       	movw	r22, r18
    61a2:	d5 01       	movw	r26, r10
    61a4:	ed 91       	ld	r30, X+
    61a6:	fc 91       	ld	r31, X
    61a8:	01 90       	ld	r0, Z+
    61aa:	f0 81       	ld	r31, Z
    61ac:	e0 2d       	mov	r30, r0
    61ae:	c5 01       	movw	r24, r10
    61b0:	09 95       	icall
    61b2:	e6 cf       	rjmp	.-52     	; 0x6180 <_ZN7TwoWire11requestFromEhhmhh+0x32>
    61b4:	60 e0       	ldi	r22, 0x00	; 0
    61b6:	c5 01       	movw	r24, r10
    61b8:	b8 df       	rcall	.-144    	; 0x612a <_ZN7TwoWire15endTransmissionEh>
    61ba:	4d 2f       	mov	r20, r29
    61bc:	d1 32       	cpi	r29, 0x21	; 33
    61be:	08 f0       	brcs	.+2      	; 0x61c2 <_ZN7TwoWire11requestFromEhhmhh+0x74>
    61c0:	40 e2       	ldi	r20, 0x20	; 32
    61c2:	2c 2d       	mov	r18, r12
    61c4:	65 e8       	ldi	r22, 0x85	; 133
    61c6:	7c e0       	ldi	r23, 0x0C	; 12
    61c8:	8f 2d       	mov	r24, r15
    61ca:	b7 dc       	rcall	.-1682   	; 0x5b3a <twi_readFrom>
    61cc:	10 92 84 0c 	sts	0x0C84, r1	; 0x800c84 <_ZN7TwoWire13rxBufferIndexE>
    61d0:	80 93 83 0c 	sts	0x0C83, r24	; 0x800c83 <_ZN7TwoWire14rxBufferLengthE>
    61d4:	df 91       	pop	r29
    61d6:	cf 91       	pop	r28
    61d8:	1f 91       	pop	r17
    61da:	0f 91       	pop	r16
    61dc:	ff 90       	pop	r15
    61de:	ef 90       	pop	r14
    61e0:	cf 90       	pop	r12
    61e2:	bf 90       	pop	r11
    61e4:	af 90       	pop	r10
    61e6:	7f 90       	pop	r7
    61e8:	6f 90       	pop	r6
    61ea:	5f 90       	pop	r5
    61ec:	4f 90       	pop	r4
    61ee:	08 95       	ret

000061f0 <_ZN7TwoWire11requestFromEhhh>:
    61f0:	cf 92       	push	r12
    61f2:	ef 92       	push	r14
    61f4:	0f 93       	push	r16
    61f6:	1f 93       	push	r17
    61f8:	c2 2e       	mov	r12, r18
    61fa:	e1 2c       	mov	r14, r1
    61fc:	00 e0       	ldi	r16, 0x00	; 0
    61fe:	10 e0       	ldi	r17, 0x00	; 0
    6200:	98 01       	movw	r18, r16
    6202:	a5 df       	rcall	.-182    	; 0x614e <_ZN7TwoWire11requestFromEhhmhh>
    6204:	1f 91       	pop	r17
    6206:	0f 91       	pop	r16
    6208:	ef 90       	pop	r14
    620a:	cf 90       	pop	r12
    620c:	08 95       	ret

0000620e <_ZN7TwoWire11requestFromEhh>:
    620e:	21 e0       	ldi	r18, 0x01	; 1
    6210:	ef cf       	rjmp	.-34     	; 0x61f0 <_ZN7TwoWire11requestFromEhhh>

00006212 <_ZN7TwoWire11requestFromEii>:
    6212:	21 e0       	ldi	r18, 0x01	; 1
    6214:	ed cf       	rjmp	.-38     	; 0x61f0 <_ZN7TwoWire11requestFromEhhh>

00006216 <_ZN7TwoWire15endTransmissionEv>:
    6216:	61 e0       	ldi	r22, 0x01	; 1
    6218:	88 cf       	rjmp	.-240    	; 0x612a <_ZN7TwoWire15endTransmissionEh>

0000621a <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    621a:	8f e4       	ldi	r24, 0x4F	; 79
    621c:	9c e0       	ldi	r25, 0x0C	; 12
    621e:	57 cf       	rjmp	.-338    	; 0x60ce <_ZN7TwoWireC1Ev>

00006220 <__cmpsf2>:
    6220:	a8 d0       	rcall	.+336    	; 0x6372 <__fp_cmp>
    6222:	08 f4       	brcc	.+2      	; 0x6226 <__cmpsf2+0x6>
    6224:	81 e0       	ldi	r24, 0x01	; 1
    6226:	08 95       	ret

00006228 <__divsf3>:
    6228:	0c d0       	rcall	.+24     	; 0x6242 <__divsf3x>
    622a:	de c0       	rjmp	.+444    	; 0x63e8 <__fp_round>
    622c:	d6 d0       	rcall	.+428    	; 0x63da <__fp_pscB>
    622e:	40 f0       	brcs	.+16     	; 0x6240 <__divsf3+0x18>
    6230:	cd d0       	rcall	.+410    	; 0x63cc <__fp_pscA>
    6232:	30 f0       	brcs	.+12     	; 0x6240 <__divsf3+0x18>
    6234:	21 f4       	brne	.+8      	; 0x623e <__divsf3+0x16>
    6236:	5f 3f       	cpi	r21, 0xFF	; 255
    6238:	19 f0       	breq	.+6      	; 0x6240 <__divsf3+0x18>
    623a:	bf c0       	rjmp	.+382    	; 0x63ba <__fp_inf>
    623c:	51 11       	cpse	r21, r1
    623e:	08 c1       	rjmp	.+528    	; 0x6450 <__fp_szero>
    6240:	c2 c0       	rjmp	.+388    	; 0x63c6 <__fp_nan>

00006242 <__divsf3x>:
    6242:	e3 d0       	rcall	.+454    	; 0x640a <__fp_split3>
    6244:	98 f3       	brcs	.-26     	; 0x622c <__divsf3+0x4>

00006246 <__divsf3_pse>:
    6246:	99 23       	and	r25, r25
    6248:	c9 f3       	breq	.-14     	; 0x623c <__divsf3+0x14>
    624a:	55 23       	and	r21, r21
    624c:	b1 f3       	breq	.-20     	; 0x623a <__divsf3+0x12>
    624e:	95 1b       	sub	r25, r21
    6250:	55 0b       	sbc	r21, r21
    6252:	bb 27       	eor	r27, r27
    6254:	aa 27       	eor	r26, r26
    6256:	62 17       	cp	r22, r18
    6258:	73 07       	cpc	r23, r19
    625a:	84 07       	cpc	r24, r20
    625c:	38 f0       	brcs	.+14     	; 0x626c <__divsf3_pse+0x26>
    625e:	9f 5f       	subi	r25, 0xFF	; 255
    6260:	5f 4f       	sbci	r21, 0xFF	; 255
    6262:	22 0f       	add	r18, r18
    6264:	33 1f       	adc	r19, r19
    6266:	44 1f       	adc	r20, r20
    6268:	aa 1f       	adc	r26, r26
    626a:	a9 f3       	breq	.-22     	; 0x6256 <__divsf3_pse+0x10>
    626c:	33 d0       	rcall	.+102    	; 0x62d4 <__divsf3_pse+0x8e>
    626e:	0e 2e       	mov	r0, r30
    6270:	3a f0       	brmi	.+14     	; 0x6280 <__divsf3_pse+0x3a>
    6272:	e0 e8       	ldi	r30, 0x80	; 128
    6274:	30 d0       	rcall	.+96     	; 0x62d6 <__divsf3_pse+0x90>
    6276:	91 50       	subi	r25, 0x01	; 1
    6278:	50 40       	sbci	r21, 0x00	; 0
    627a:	e6 95       	lsr	r30
    627c:	00 1c       	adc	r0, r0
    627e:	ca f7       	brpl	.-14     	; 0x6272 <__divsf3_pse+0x2c>
    6280:	29 d0       	rcall	.+82     	; 0x62d4 <__divsf3_pse+0x8e>
    6282:	fe 2f       	mov	r31, r30
    6284:	27 d0       	rcall	.+78     	; 0x62d4 <__divsf3_pse+0x8e>
    6286:	66 0f       	add	r22, r22
    6288:	77 1f       	adc	r23, r23
    628a:	88 1f       	adc	r24, r24
    628c:	bb 1f       	adc	r27, r27
    628e:	26 17       	cp	r18, r22
    6290:	37 07       	cpc	r19, r23
    6292:	48 07       	cpc	r20, r24
    6294:	ab 07       	cpc	r26, r27
    6296:	b0 e8       	ldi	r27, 0x80	; 128
    6298:	09 f0       	breq	.+2      	; 0x629c <__divsf3_pse+0x56>
    629a:	bb 0b       	sbc	r27, r27
    629c:	80 2d       	mov	r24, r0
    629e:	bf 01       	movw	r22, r30
    62a0:	ff 27       	eor	r31, r31
    62a2:	93 58       	subi	r25, 0x83	; 131
    62a4:	5f 4f       	sbci	r21, 0xFF	; 255
    62a6:	2a f0       	brmi	.+10     	; 0x62b2 <__divsf3_pse+0x6c>
    62a8:	9e 3f       	cpi	r25, 0xFE	; 254
    62aa:	51 05       	cpc	r21, r1
    62ac:	68 f0       	brcs	.+26     	; 0x62c8 <__divsf3_pse+0x82>
    62ae:	85 c0       	rjmp	.+266    	; 0x63ba <__fp_inf>
    62b0:	cf c0       	rjmp	.+414    	; 0x6450 <__fp_szero>
    62b2:	5f 3f       	cpi	r21, 0xFF	; 255
    62b4:	ec f3       	brlt	.-6      	; 0x62b0 <__divsf3_pse+0x6a>
    62b6:	98 3e       	cpi	r25, 0xE8	; 232
    62b8:	dc f3       	brlt	.-10     	; 0x62b0 <__divsf3_pse+0x6a>
    62ba:	86 95       	lsr	r24
    62bc:	77 95       	ror	r23
    62be:	67 95       	ror	r22
    62c0:	b7 95       	ror	r27
    62c2:	f7 95       	ror	r31
    62c4:	9f 5f       	subi	r25, 0xFF	; 255
    62c6:	c9 f7       	brne	.-14     	; 0x62ba <__divsf3_pse+0x74>
    62c8:	88 0f       	add	r24, r24
    62ca:	91 1d       	adc	r25, r1
    62cc:	96 95       	lsr	r25
    62ce:	87 95       	ror	r24
    62d0:	97 f9       	bld	r25, 7
    62d2:	08 95       	ret
    62d4:	e1 e0       	ldi	r30, 0x01	; 1
    62d6:	66 0f       	add	r22, r22
    62d8:	77 1f       	adc	r23, r23
    62da:	88 1f       	adc	r24, r24
    62dc:	bb 1f       	adc	r27, r27
    62de:	62 17       	cp	r22, r18
    62e0:	73 07       	cpc	r23, r19
    62e2:	84 07       	cpc	r24, r20
    62e4:	ba 07       	cpc	r27, r26
    62e6:	20 f0       	brcs	.+8      	; 0x62f0 <__divsf3_pse+0xaa>
    62e8:	62 1b       	sub	r22, r18
    62ea:	73 0b       	sbc	r23, r19
    62ec:	84 0b       	sbc	r24, r20
    62ee:	ba 0b       	sbc	r27, r26
    62f0:	ee 1f       	adc	r30, r30
    62f2:	88 f7       	brcc	.-30     	; 0x62d6 <__divsf3_pse+0x90>
    62f4:	e0 95       	com	r30
    62f6:	08 95       	ret

000062f8 <__floatunsisf>:
    62f8:	e8 94       	clt
    62fa:	09 c0       	rjmp	.+18     	; 0x630e <__floatsisf+0x12>

000062fc <__floatsisf>:
    62fc:	97 fb       	bst	r25, 7
    62fe:	3e f4       	brtc	.+14     	; 0x630e <__floatsisf+0x12>
    6300:	90 95       	com	r25
    6302:	80 95       	com	r24
    6304:	70 95       	com	r23
    6306:	61 95       	neg	r22
    6308:	7f 4f       	sbci	r23, 0xFF	; 255
    630a:	8f 4f       	sbci	r24, 0xFF	; 255
    630c:	9f 4f       	sbci	r25, 0xFF	; 255
    630e:	99 23       	and	r25, r25
    6310:	a9 f0       	breq	.+42     	; 0x633c <__floatsisf+0x40>
    6312:	f9 2f       	mov	r31, r25
    6314:	96 e9       	ldi	r25, 0x96	; 150
    6316:	bb 27       	eor	r27, r27
    6318:	93 95       	inc	r25
    631a:	f6 95       	lsr	r31
    631c:	87 95       	ror	r24
    631e:	77 95       	ror	r23
    6320:	67 95       	ror	r22
    6322:	b7 95       	ror	r27
    6324:	f1 11       	cpse	r31, r1
    6326:	f8 cf       	rjmp	.-16     	; 0x6318 <__floatsisf+0x1c>
    6328:	fa f4       	brpl	.+62     	; 0x6368 <__floatsisf+0x6c>
    632a:	bb 0f       	add	r27, r27
    632c:	11 f4       	brne	.+4      	; 0x6332 <__floatsisf+0x36>
    632e:	60 ff       	sbrs	r22, 0
    6330:	1b c0       	rjmp	.+54     	; 0x6368 <__floatsisf+0x6c>
    6332:	6f 5f       	subi	r22, 0xFF	; 255
    6334:	7f 4f       	sbci	r23, 0xFF	; 255
    6336:	8f 4f       	sbci	r24, 0xFF	; 255
    6338:	9f 4f       	sbci	r25, 0xFF	; 255
    633a:	16 c0       	rjmp	.+44     	; 0x6368 <__floatsisf+0x6c>
    633c:	88 23       	and	r24, r24
    633e:	11 f0       	breq	.+4      	; 0x6344 <__floatsisf+0x48>
    6340:	96 e9       	ldi	r25, 0x96	; 150
    6342:	11 c0       	rjmp	.+34     	; 0x6366 <__floatsisf+0x6a>
    6344:	77 23       	and	r23, r23
    6346:	21 f0       	breq	.+8      	; 0x6350 <__floatsisf+0x54>
    6348:	9e e8       	ldi	r25, 0x8E	; 142
    634a:	87 2f       	mov	r24, r23
    634c:	76 2f       	mov	r23, r22
    634e:	05 c0       	rjmp	.+10     	; 0x635a <__floatsisf+0x5e>
    6350:	66 23       	and	r22, r22
    6352:	71 f0       	breq	.+28     	; 0x6370 <__floatsisf+0x74>
    6354:	96 e8       	ldi	r25, 0x86	; 134
    6356:	86 2f       	mov	r24, r22
    6358:	70 e0       	ldi	r23, 0x00	; 0
    635a:	60 e0       	ldi	r22, 0x00	; 0
    635c:	2a f0       	brmi	.+10     	; 0x6368 <__floatsisf+0x6c>
    635e:	9a 95       	dec	r25
    6360:	66 0f       	add	r22, r22
    6362:	77 1f       	adc	r23, r23
    6364:	88 1f       	adc	r24, r24
    6366:	da f7       	brpl	.-10     	; 0x635e <__floatsisf+0x62>
    6368:	88 0f       	add	r24, r24
    636a:	96 95       	lsr	r25
    636c:	87 95       	ror	r24
    636e:	97 f9       	bld	r25, 7
    6370:	08 95       	ret

00006372 <__fp_cmp>:
    6372:	99 0f       	add	r25, r25
    6374:	00 08       	sbc	r0, r0
    6376:	55 0f       	add	r21, r21
    6378:	aa 0b       	sbc	r26, r26
    637a:	e0 e8       	ldi	r30, 0x80	; 128
    637c:	fe ef       	ldi	r31, 0xFE	; 254
    637e:	16 16       	cp	r1, r22
    6380:	17 06       	cpc	r1, r23
    6382:	e8 07       	cpc	r30, r24
    6384:	f9 07       	cpc	r31, r25
    6386:	c0 f0       	brcs	.+48     	; 0x63b8 <__fp_cmp+0x46>
    6388:	12 16       	cp	r1, r18
    638a:	13 06       	cpc	r1, r19
    638c:	e4 07       	cpc	r30, r20
    638e:	f5 07       	cpc	r31, r21
    6390:	98 f0       	brcs	.+38     	; 0x63b8 <__fp_cmp+0x46>
    6392:	62 1b       	sub	r22, r18
    6394:	73 0b       	sbc	r23, r19
    6396:	84 0b       	sbc	r24, r20
    6398:	95 0b       	sbc	r25, r21
    639a:	39 f4       	brne	.+14     	; 0x63aa <__fp_cmp+0x38>
    639c:	0a 26       	eor	r0, r26
    639e:	61 f0       	breq	.+24     	; 0x63b8 <__fp_cmp+0x46>
    63a0:	23 2b       	or	r18, r19
    63a2:	24 2b       	or	r18, r20
    63a4:	25 2b       	or	r18, r21
    63a6:	21 f4       	brne	.+8      	; 0x63b0 <__fp_cmp+0x3e>
    63a8:	08 95       	ret
    63aa:	0a 26       	eor	r0, r26
    63ac:	09 f4       	brne	.+2      	; 0x63b0 <__fp_cmp+0x3e>
    63ae:	a1 40       	sbci	r26, 0x01	; 1
    63b0:	a6 95       	lsr	r26
    63b2:	8f ef       	ldi	r24, 0xFF	; 255
    63b4:	81 1d       	adc	r24, r1
    63b6:	81 1d       	adc	r24, r1
    63b8:	08 95       	ret

000063ba <__fp_inf>:
    63ba:	97 f9       	bld	r25, 7
    63bc:	9f 67       	ori	r25, 0x7F	; 127
    63be:	80 e8       	ldi	r24, 0x80	; 128
    63c0:	70 e0       	ldi	r23, 0x00	; 0
    63c2:	60 e0       	ldi	r22, 0x00	; 0
    63c4:	08 95       	ret

000063c6 <__fp_nan>:
    63c6:	9f ef       	ldi	r25, 0xFF	; 255
    63c8:	80 ec       	ldi	r24, 0xC0	; 192
    63ca:	08 95       	ret

000063cc <__fp_pscA>:
    63cc:	00 24       	eor	r0, r0
    63ce:	0a 94       	dec	r0
    63d0:	16 16       	cp	r1, r22
    63d2:	17 06       	cpc	r1, r23
    63d4:	18 06       	cpc	r1, r24
    63d6:	09 06       	cpc	r0, r25
    63d8:	08 95       	ret

000063da <__fp_pscB>:
    63da:	00 24       	eor	r0, r0
    63dc:	0a 94       	dec	r0
    63de:	12 16       	cp	r1, r18
    63e0:	13 06       	cpc	r1, r19
    63e2:	14 06       	cpc	r1, r20
    63e4:	05 06       	cpc	r0, r21
    63e6:	08 95       	ret

000063e8 <__fp_round>:
    63e8:	09 2e       	mov	r0, r25
    63ea:	03 94       	inc	r0
    63ec:	00 0c       	add	r0, r0
    63ee:	11 f4       	brne	.+4      	; 0x63f4 <__fp_round+0xc>
    63f0:	88 23       	and	r24, r24
    63f2:	52 f0       	brmi	.+20     	; 0x6408 <__fp_round+0x20>
    63f4:	bb 0f       	add	r27, r27
    63f6:	40 f4       	brcc	.+16     	; 0x6408 <__fp_round+0x20>
    63f8:	bf 2b       	or	r27, r31
    63fa:	11 f4       	brne	.+4      	; 0x6400 <__fp_round+0x18>
    63fc:	60 ff       	sbrs	r22, 0
    63fe:	04 c0       	rjmp	.+8      	; 0x6408 <__fp_round+0x20>
    6400:	6f 5f       	subi	r22, 0xFF	; 255
    6402:	7f 4f       	sbci	r23, 0xFF	; 255
    6404:	8f 4f       	sbci	r24, 0xFF	; 255
    6406:	9f 4f       	sbci	r25, 0xFF	; 255
    6408:	08 95       	ret

0000640a <__fp_split3>:
    640a:	57 fd       	sbrc	r21, 7
    640c:	90 58       	subi	r25, 0x80	; 128
    640e:	44 0f       	add	r20, r20
    6410:	55 1f       	adc	r21, r21
    6412:	59 f0       	breq	.+22     	; 0x642a <__fp_splitA+0x10>
    6414:	5f 3f       	cpi	r21, 0xFF	; 255
    6416:	71 f0       	breq	.+28     	; 0x6434 <__fp_splitA+0x1a>
    6418:	47 95       	ror	r20

0000641a <__fp_splitA>:
    641a:	88 0f       	add	r24, r24
    641c:	97 fb       	bst	r25, 7
    641e:	99 1f       	adc	r25, r25
    6420:	61 f0       	breq	.+24     	; 0x643a <__fp_splitA+0x20>
    6422:	9f 3f       	cpi	r25, 0xFF	; 255
    6424:	79 f0       	breq	.+30     	; 0x6444 <__fp_splitA+0x2a>
    6426:	87 95       	ror	r24
    6428:	08 95       	ret
    642a:	12 16       	cp	r1, r18
    642c:	13 06       	cpc	r1, r19
    642e:	14 06       	cpc	r1, r20
    6430:	55 1f       	adc	r21, r21
    6432:	f2 cf       	rjmp	.-28     	; 0x6418 <__fp_split3+0xe>
    6434:	46 95       	lsr	r20
    6436:	f1 df       	rcall	.-30     	; 0x641a <__fp_splitA>
    6438:	08 c0       	rjmp	.+16     	; 0x644a <__fp_splitA+0x30>
    643a:	16 16       	cp	r1, r22
    643c:	17 06       	cpc	r1, r23
    643e:	18 06       	cpc	r1, r24
    6440:	99 1f       	adc	r25, r25
    6442:	f1 cf       	rjmp	.-30     	; 0x6426 <__fp_splitA+0xc>
    6444:	86 95       	lsr	r24
    6446:	71 05       	cpc	r23, r1
    6448:	61 05       	cpc	r22, r1
    644a:	08 94       	sec
    644c:	08 95       	ret

0000644e <__fp_zero>:
    644e:	e8 94       	clt

00006450 <__fp_szero>:
    6450:	bb 27       	eor	r27, r27
    6452:	66 27       	eor	r22, r22
    6454:	77 27       	eor	r23, r23
    6456:	cb 01       	movw	r24, r22
    6458:	97 f9       	bld	r25, 7
    645a:	08 95       	ret

0000645c <__cxa_pure_virtual>:
    645c:	0e 94 11 3d 	call	0x7a22	; 0x7a22 <abort>

00006460 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    6460:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    6462:	91 8d       	ldd	r25, Z+25	; 0x19
    6464:	22 8d       	ldd	r18, Z+26	; 0x1a
    6466:	89 2f       	mov	r24, r25
    6468:	90 e0       	ldi	r25, 0x00	; 0
    646a:	80 5c       	subi	r24, 0xC0	; 192
    646c:	9f 4f       	sbci	r25, 0xFF	; 255
    646e:	82 1b       	sub	r24, r18
    6470:	91 09       	sbc	r25, r1
}
    6472:	8f 73       	andi	r24, 0x3F	; 63
    6474:	99 27       	eor	r25, r25
    6476:	08 95       	ret

00006478 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    6478:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    647a:	91 8d       	ldd	r25, Z+25	; 0x19
    647c:	82 8d       	ldd	r24, Z+26	; 0x1a
    647e:	98 17       	cp	r25, r24
    6480:	31 f0       	breq	.+12     	; 0x648e <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    6482:	82 8d       	ldd	r24, Z+26	; 0x1a
    6484:	e8 0f       	add	r30, r24
    6486:	f1 1d       	adc	r31, r1
    6488:	85 8d       	ldd	r24, Z+29	; 0x1d
    648a:	90 e0       	ldi	r25, 0x00	; 0
    648c:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    648e:	8f ef       	ldi	r24, 0xFF	; 255
    6490:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    6492:	08 95       	ret

00006494 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    6494:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    6496:	91 8d       	ldd	r25, Z+25	; 0x19
    6498:	82 8d       	ldd	r24, Z+26	; 0x1a
    649a:	98 17       	cp	r25, r24
    649c:	61 f0       	breq	.+24     	; 0x64b6 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    649e:	82 8d       	ldd	r24, Z+26	; 0x1a
    64a0:	df 01       	movw	r26, r30
    64a2:	a8 0f       	add	r26, r24
    64a4:	b1 1d       	adc	r27, r1
    64a6:	5d 96       	adiw	r26, 0x1d	; 29
    64a8:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    64aa:	92 8d       	ldd	r25, Z+26	; 0x1a
    64ac:	9f 5f       	subi	r25, 0xFF	; 255
    64ae:	9f 73       	andi	r25, 0x3F	; 63
    64b0:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    64b2:	90 e0       	ldi	r25, 0x00	; 0
    64b4:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    64b6:	8f ef       	ldi	r24, 0xFF	; 255
    64b8:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    64ba:	08 95       	ret

000064bc <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    64bc:	fc 01       	movw	r30, r24
    64be:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    64c0:	44 8d       	ldd	r20, Z+28	; 0x1c
    64c2:	25 2f       	mov	r18, r21
    64c4:	30 e0       	ldi	r19, 0x00	; 0
    64c6:	84 2f       	mov	r24, r20
    64c8:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    64ca:	82 1b       	sub	r24, r18
    64cc:	93 0b       	sbc	r25, r19
    64ce:	54 17       	cp	r21, r20
    64d0:	10 f0       	brcs	.+4      	; 0x64d6 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    64d2:	cf 96       	adiw	r24, 0x3f	; 63
    64d4:	08 95       	ret
  return tail - head - 1;
    64d6:	01 97       	sbiw	r24, 0x01	; 1
}
    64d8:	08 95       	ret

000064da <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    64da:	83 ec       	ldi	r24, 0xC3	; 195
    64dc:	93 e3       	ldi	r25, 0x33	; 51
    64de:	89 2b       	or	r24, r25
    64e0:	41 f0       	breq	.+16     	; 0x64f2 <_Z14serialEventRunv+0x18>
    64e2:	80 e0       	ldi	r24, 0x00	; 0
    64e4:	90 e0       	ldi	r25, 0x00	; 0
    64e6:	89 2b       	or	r24, r25
    64e8:	21 f0       	breq	.+8      	; 0x64f2 <_Z14serialEventRunv+0x18>
    64ea:	4d d1       	rcall	.+666    	; 0x6786 <_Z17Serial0_availablev>
    64ec:	81 11       	cpse	r24, r1
    64ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    64f2:	08 95       	ret

000064f4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    64f4:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    64f6:	84 8d       	ldd	r24, Z+28	; 0x1c
    64f8:	df 01       	movw	r26, r30
    64fa:	a8 0f       	add	r26, r24
    64fc:	b1 1d       	adc	r27, r1
    64fe:	a3 5a       	subi	r26, 0xA3	; 163
    6500:	bf 4f       	sbci	r27, 0xFF	; 255
    6502:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    6504:	84 8d       	ldd	r24, Z+28	; 0x1c
    6506:	90 e0       	ldi	r25, 0x00	; 0
    6508:	01 96       	adiw	r24, 0x01	; 1
    650a:	8f 73       	andi	r24, 0x3F	; 63
    650c:	99 27       	eor	r25, r25
    650e:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    6510:	a6 89       	ldd	r26, Z+22	; 0x16
    6512:	b7 89       	ldd	r27, Z+23	; 0x17
    6514:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    6516:	a0 89       	ldd	r26, Z+16	; 0x10
    6518:	b1 89       	ldd	r27, Z+17	; 0x11
    651a:	8c 91       	ld	r24, X
    651c:	83 70       	andi	r24, 0x03	; 3
    651e:	80 64       	ori	r24, 0x40	; 64
    6520:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    6522:	93 8d       	ldd	r25, Z+27	; 0x1b
    6524:	84 8d       	ldd	r24, Z+28	; 0x1c
    6526:	98 13       	cpse	r25, r24
    6528:	06 c0       	rjmp	.+12     	; 0x6536 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    652a:	02 88       	ldd	r0, Z+18	; 0x12
    652c:	f3 89       	ldd	r31, Z+19	; 0x13
    652e:	e0 2d       	mov	r30, r0
    6530:	80 81       	ld	r24, Z
    6532:	8f 7d       	andi	r24, 0xDF	; 223
    6534:	80 83       	st	Z, r24
    6536:	08 95       	ret

00006538 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    6538:	ef 92       	push	r14
    653a:	ff 92       	push	r15
    653c:	0f 93       	push	r16
    653e:	1f 93       	push	r17
    6540:	cf 93       	push	r28
    6542:	df 93       	push	r29
    6544:	ec 01       	movw	r28, r24
  _written = true;
    6546:	81 e0       	ldi	r24, 0x01	; 1
    6548:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    654a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    654c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    654e:	98 13       	cpse	r25, r24
    6550:	05 c0       	rjmp	.+10     	; 0x655c <_ZN14HardwareSerial5writeEh+0x24>
    6552:	e8 89       	ldd	r30, Y+16	; 0x10
    6554:	f9 89       	ldd	r31, Y+17	; 0x11
    6556:	80 81       	ld	r24, Z
    6558:	85 fd       	sbrc	r24, 5
    655a:	25 c0       	rjmp	.+74     	; 0x65a6 <_ZN14HardwareSerial5writeEh+0x6e>
    655c:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    655e:	0b 8d       	ldd	r16, Y+27	; 0x1b
    6560:	10 e0       	ldi	r17, 0x00	; 0
    6562:	0f 5f       	subi	r16, 0xFF	; 255
    6564:	1f 4f       	sbci	r17, 0xFF	; 255
    6566:	0f 73       	andi	r16, 0x3F	; 63
    6568:	11 27       	eor	r17, r17
    656a:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    656c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    656e:	e8 12       	cpse	r14, r24
    6570:	0b c0       	rjmp	.+22     	; 0x6588 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    6572:	0f b6       	in	r0, 0x3f	; 63
    6574:	07 fc       	sbrc	r0, 7
    6576:	fa cf       	rjmp	.-12     	; 0x656c <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    6578:	e8 89       	ldd	r30, Y+16	; 0x10
    657a:	f9 89       	ldd	r31, Y+17	; 0x11
    657c:	80 81       	ld	r24, Z
    657e:	85 ff       	sbrs	r24, 5
    6580:	f5 cf       	rjmp	.-22     	; 0x656c <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    6582:	ce 01       	movw	r24, r28
    6584:	b7 df       	rcall	.-146    	; 0x64f4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    6586:	f2 cf       	rjmp	.-28     	; 0x656c <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    6588:	8b 8d       	ldd	r24, Y+27	; 0x1b
    658a:	fe 01       	movw	r30, r28
    658c:	e8 0f       	add	r30, r24
    658e:	f1 1d       	adc	r31, r1
    6590:	e3 5a       	subi	r30, 0xA3	; 163
    6592:	ff 4f       	sbci	r31, 0xFF	; 255
    6594:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    6596:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    6598:	f8 94       	cli
    _tx_buffer_head = i;
    659a:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    659c:	ea 89       	ldd	r30, Y+18	; 0x12
    659e:	fb 89       	ldd	r31, Y+19	; 0x13
    65a0:	80 81       	ld	r24, Z
    65a2:	80 62       	ori	r24, 0x20	; 32
    65a4:	0a c0       	rjmp	.+20     	; 0x65ba <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    65a6:	9f b7       	in	r25, 0x3f	; 63
    65a8:	f8 94       	cli
      *_udr = c;
    65aa:	ee 89       	ldd	r30, Y+22	; 0x16
    65ac:	ff 89       	ldd	r31, Y+23	; 0x17
    65ae:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    65b0:	e8 89       	ldd	r30, Y+16	; 0x10
    65b2:	f9 89       	ldd	r31, Y+17	; 0x11
    65b4:	80 81       	ld	r24, Z
    65b6:	83 70       	andi	r24, 0x03	; 3
    65b8:	80 64       	ori	r24, 0x40	; 64
    65ba:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    65bc:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    65be:	81 e0       	ldi	r24, 0x01	; 1
    65c0:	90 e0       	ldi	r25, 0x00	; 0
    65c2:	df 91       	pop	r29
    65c4:	cf 91       	pop	r28
    65c6:	1f 91       	pop	r17
    65c8:	0f 91       	pop	r16
    65ca:	ff 90       	pop	r15
    65cc:	ef 90       	pop	r14
    65ce:	08 95       	ret

000065d0 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    65d0:	cf 93       	push	r28
    65d2:	df 93       	push	r29
    65d4:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    65d6:	88 8d       	ldd	r24, Y+24	; 0x18
    65d8:	88 23       	and	r24, r24
    65da:	c1 f0       	breq	.+48     	; 0x660c <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    65dc:	ea 89       	ldd	r30, Y+18	; 0x12
    65de:	fb 89       	ldd	r31, Y+19	; 0x13
    65e0:	80 81       	ld	r24, Z
    65e2:	85 fd       	sbrc	r24, 5
    65e4:	05 c0       	rjmp	.+10     	; 0x65f0 <_ZN14HardwareSerial5flushEv+0x20>
    65e6:	a8 89       	ldd	r26, Y+16	; 0x10
    65e8:	b9 89       	ldd	r27, Y+17	; 0x11
    65ea:	8c 91       	ld	r24, X
    65ec:	86 fd       	sbrc	r24, 6
    65ee:	0e c0       	rjmp	.+28     	; 0x660c <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    65f0:	0f b6       	in	r0, 0x3f	; 63
    65f2:	07 fc       	sbrc	r0, 7
    65f4:	f5 cf       	rjmp	.-22     	; 0x65e0 <_ZN14HardwareSerial5flushEv+0x10>
    65f6:	80 81       	ld	r24, Z
    65f8:	85 ff       	sbrs	r24, 5
    65fa:	f2 cf       	rjmp	.-28     	; 0x65e0 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    65fc:	a8 89       	ldd	r26, Y+16	; 0x10
    65fe:	b9 89       	ldd	r27, Y+17	; 0x11
    6600:	8c 91       	ld	r24, X
    6602:	85 ff       	sbrs	r24, 5
    6604:	ed cf       	rjmp	.-38     	; 0x65e0 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    6606:	ce 01       	movw	r24, r28
    6608:	75 df       	rcall	.-278    	; 0x64f4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    660a:	e8 cf       	rjmp	.-48     	; 0x65dc <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    660c:	df 91       	pop	r29
    660e:	cf 91       	pop	r28
    6610:	08 95       	ret

00006612 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    6612:	cf 92       	push	r12
    6614:	df 92       	push	r13
    6616:	ef 92       	push	r14
    6618:	ff 92       	push	r15
    661a:	1f 93       	push	r17
    661c:	cf 93       	push	r28
    661e:	df 93       	push	r29
    6620:	ec 01       	movw	r28, r24
    6622:	6a 01       	movw	r12, r20
    6624:	7b 01       	movw	r14, r22
    6626:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    6628:	e8 89       	ldd	r30, Y+16	; 0x10
    662a:	f9 89       	ldd	r31, Y+17	; 0x11
    662c:	82 e0       	ldi	r24, 0x02	; 2
    662e:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    6630:	41 15       	cp	r20, r1
    6632:	51 4e       	sbci	r21, 0xE1	; 225
    6634:	61 05       	cpc	r22, r1
    6636:	71 05       	cpc	r23, r1
    6638:	a9 f0       	breq	.+42     	; 0x6664 <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    663a:	60 e0       	ldi	r22, 0x00	; 0
    663c:	79 e0       	ldi	r23, 0x09	; 9
    663e:	8d e3       	ldi	r24, 0x3D	; 61
    6640:	90 e0       	ldi	r25, 0x00	; 0
    6642:	a7 01       	movw	r20, r14
    6644:	96 01       	movw	r18, r12
    6646:	89 d7       	rcall	.+3858   	; 0x755a <__udivmodsi4>
    6648:	da 01       	movw	r26, r20
    664a:	c9 01       	movw	r24, r18
    664c:	01 97       	sbiw	r24, 0x01	; 1
    664e:	a1 09       	sbc	r26, r1
    6650:	b1 09       	sbc	r27, r1
    6652:	b6 95       	lsr	r27
    6654:	a7 95       	ror	r26
    6656:	97 95       	ror	r25
    6658:	87 95       	ror	r24
    665a:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    665c:	21 15       	cp	r18, r1
    665e:	80 e1       	ldi	r24, 0x10	; 16
    6660:	38 07       	cpc	r19, r24
    6662:	a0 f0       	brcs	.+40     	; 0x668c <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
    6664:	e8 89       	ldd	r30, Y+16	; 0x10
    6666:	f9 89       	ldd	r31, Y+17	; 0x11
    6668:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    666a:	60 e8       	ldi	r22, 0x80	; 128
    666c:	74 e8       	ldi	r23, 0x84	; 132
    666e:	8e e1       	ldi	r24, 0x1E	; 30
    6670:	90 e0       	ldi	r25, 0x00	; 0
    6672:	a7 01       	movw	r20, r14
    6674:	96 01       	movw	r18, r12
    6676:	71 d7       	rcall	.+3810   	; 0x755a <__udivmodsi4>
    6678:	da 01       	movw	r26, r20
    667a:	c9 01       	movw	r24, r18
    667c:	01 97       	sbiw	r24, 0x01	; 1
    667e:	a1 09       	sbc	r26, r1
    6680:	b1 09       	sbc	r27, r1
    6682:	b6 95       	lsr	r27
    6684:	a7 95       	ror	r26
    6686:	97 95       	ror	r25
    6688:	87 95       	ror	r24
    668a:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    668c:	ec 85       	ldd	r30, Y+12	; 0x0c
    668e:	fd 85       	ldd	r31, Y+13	; 0x0d
    6690:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    6692:	ee 85       	ldd	r30, Y+14	; 0x0e
    6694:	ff 85       	ldd	r31, Y+15	; 0x0f
    6696:	20 83       	st	Z, r18

  _written = false;
    6698:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    669a:	ec 89       	ldd	r30, Y+20	; 0x14
    669c:	fd 89       	ldd	r31, Y+21	; 0x15
    669e:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    66a0:	ea 89       	ldd	r30, Y+18	; 0x12
    66a2:	fb 89       	ldd	r31, Y+19	; 0x13
    66a4:	80 81       	ld	r24, Z
    66a6:	80 61       	ori	r24, 0x10	; 16
    66a8:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    66aa:	ea 89       	ldd	r30, Y+18	; 0x12
    66ac:	fb 89       	ldd	r31, Y+19	; 0x13
    66ae:	80 81       	ld	r24, Z
    66b0:	88 60       	ori	r24, 0x08	; 8
    66b2:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    66b4:	ea 89       	ldd	r30, Y+18	; 0x12
    66b6:	fb 89       	ldd	r31, Y+19	; 0x13
    66b8:	80 81       	ld	r24, Z
    66ba:	80 68       	ori	r24, 0x80	; 128
    66bc:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    66be:	ea 89       	ldd	r30, Y+18	; 0x12
    66c0:	fb 89       	ldd	r31, Y+19	; 0x13
    66c2:	80 81       	ld	r24, Z
    66c4:	8f 7d       	andi	r24, 0xDF	; 223
    66c6:	80 83       	st	Z, r24
}
    66c8:	df 91       	pop	r29
    66ca:	cf 91       	pop	r28
    66cc:	1f 91       	pop	r17
    66ce:	ff 90       	pop	r15
    66d0:	ef 90       	pop	r14
    66d2:	df 90       	pop	r13
    66d4:	cf 90       	pop	r12
    66d6:	08 95       	ret

000066d8 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    66d8:	1f 92       	push	r1
    66da:	0f 92       	push	r0
    66dc:	0f b6       	in	r0, 0x3f	; 63
    66de:	0f 92       	push	r0
    66e0:	11 24       	eor	r1, r1
    66e2:	2f 93       	push	r18
    66e4:	8f 93       	push	r24
    66e6:	9f 93       	push	r25
    66e8:	ef 93       	push	r30
    66ea:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    66ec:	e0 91 b5 0c 	lds	r30, 0x0CB5	; 0x800cb5 <Serial+0x10>
    66f0:	f0 91 b6 0c 	lds	r31, 0x0CB6	; 0x800cb6 <Serial+0x11>
    66f4:	80 81       	ld	r24, Z
    66f6:	e0 91 bb 0c 	lds	r30, 0x0CBB	; 0x800cbb <Serial+0x16>
    66fa:	f0 91 bc 0c 	lds	r31, 0x0CBC	; 0x800cbc <Serial+0x17>
    66fe:	82 fd       	sbrc	r24, 2
    6700:	12 c0       	rjmp	.+36     	; 0x6726 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    6702:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    6704:	80 91 be 0c 	lds	r24, 0x0CBE	; 0x800cbe <Serial+0x19>
    6708:	8f 5f       	subi	r24, 0xFF	; 255
    670a:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    670c:	20 91 bf 0c 	lds	r18, 0x0CBF	; 0x800cbf <Serial+0x1a>
    6710:	82 17       	cp	r24, r18
    6712:	51 f0       	breq	.+20     	; 0x6728 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    6714:	e0 91 be 0c 	lds	r30, 0x0CBE	; 0x800cbe <Serial+0x19>
    6718:	f0 e0       	ldi	r31, 0x00	; 0
    671a:	eb 55       	subi	r30, 0x5B	; 91
    671c:	f3 4f       	sbci	r31, 0xF3	; 243
    671e:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    6720:	80 93 be 0c 	sts	0x0CBE, r24	; 0x800cbe <Serial+0x19>
    6724:	01 c0       	rjmp	.+2      	; 0x6728 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    6726:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    6728:	ff 91       	pop	r31
    672a:	ef 91       	pop	r30
    672c:	9f 91       	pop	r25
    672e:	8f 91       	pop	r24
    6730:	2f 91       	pop	r18
    6732:	0f 90       	pop	r0
    6734:	0f be       	out	0x3f, r0	; 63
    6736:	0f 90       	pop	r0
    6738:	1f 90       	pop	r1
    673a:	18 95       	reti

0000673c <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    673c:	1f 92       	push	r1
    673e:	0f 92       	push	r0
    6740:	0f b6       	in	r0, 0x3f	; 63
    6742:	0f 92       	push	r0
    6744:	11 24       	eor	r1, r1
    6746:	2f 93       	push	r18
    6748:	3f 93       	push	r19
    674a:	4f 93       	push	r20
    674c:	5f 93       	push	r21
    674e:	6f 93       	push	r22
    6750:	7f 93       	push	r23
    6752:	8f 93       	push	r24
    6754:	9f 93       	push	r25
    6756:	af 93       	push	r26
    6758:	bf 93       	push	r27
    675a:	ef 93       	push	r30
    675c:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    675e:	85 ea       	ldi	r24, 0xA5	; 165
    6760:	9c e0       	ldi	r25, 0x0C	; 12
    6762:	c8 de       	rcall	.-624    	; 0x64f4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    6764:	ff 91       	pop	r31
    6766:	ef 91       	pop	r30
    6768:	bf 91       	pop	r27
    676a:	af 91       	pop	r26
    676c:	9f 91       	pop	r25
    676e:	8f 91       	pop	r24
    6770:	7f 91       	pop	r23
    6772:	6f 91       	pop	r22
    6774:	5f 91       	pop	r21
    6776:	4f 91       	pop	r20
    6778:	3f 91       	pop	r19
    677a:	2f 91       	pop	r18
    677c:	0f 90       	pop	r0
    677e:	0f be       	out	0x3f, r0	; 63
    6780:	0f 90       	pop	r0
    6782:	1f 90       	pop	r1
    6784:	18 95       	reti

00006786 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    6786:	85 ea       	ldi	r24, 0xA5	; 165
    6788:	9c e0       	ldi	r25, 0x0C	; 12
    678a:	6a de       	rcall	.-812    	; 0x6460 <_ZN14HardwareSerial9availableEv>
    678c:	21 e0       	ldi	r18, 0x01	; 1
    678e:	89 2b       	or	r24, r25
    6790:	09 f4       	brne	.+2      	; 0x6794 <_Z17Serial0_availablev+0xe>
    6792:	20 e0       	ldi	r18, 0x00	; 0
}
    6794:	82 2f       	mov	r24, r18
    6796:	08 95       	ret

00006798 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    6798:	e5 ea       	ldi	r30, 0xA5	; 165
    679a:	fc e0       	ldi	r31, 0x0C	; 12
    679c:	13 82       	std	Z+3, r1	; 0x03
    679e:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    67a0:	88 ee       	ldi	r24, 0xE8	; 232
    67a2:	93 e0       	ldi	r25, 0x03	; 3
    67a4:	a0 e0       	ldi	r26, 0x00	; 0
    67a6:	b0 e0       	ldi	r27, 0x00	; 0
    67a8:	84 83       	std	Z+4, r24	; 0x04
    67aa:	95 83       	std	Z+5, r25	; 0x05
    67ac:	a6 83       	std	Z+6, r26	; 0x06
    67ae:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    67b0:	85 ed       	ldi	r24, 0xD5	; 213
    67b2:	99 e0       	ldi	r25, 0x09	; 9
    67b4:	91 83       	std	Z+1, r25	; 0x01
    67b6:	80 83       	st	Z, r24
    67b8:	85 ec       	ldi	r24, 0xC5	; 197
    67ba:	90 e0       	ldi	r25, 0x00	; 0
    67bc:	95 87       	std	Z+13, r25	; 0x0d
    67be:	84 87       	std	Z+12, r24	; 0x0c
    67c0:	84 ec       	ldi	r24, 0xC4	; 196
    67c2:	90 e0       	ldi	r25, 0x00	; 0
    67c4:	97 87       	std	Z+15, r25	; 0x0f
    67c6:	86 87       	std	Z+14, r24	; 0x0e
    67c8:	80 ec       	ldi	r24, 0xC0	; 192
    67ca:	90 e0       	ldi	r25, 0x00	; 0
    67cc:	91 8b       	std	Z+17, r25	; 0x11
    67ce:	80 8b       	std	Z+16, r24	; 0x10
    67d0:	81 ec       	ldi	r24, 0xC1	; 193
    67d2:	90 e0       	ldi	r25, 0x00	; 0
    67d4:	93 8b       	std	Z+19, r25	; 0x13
    67d6:	82 8b       	std	Z+18, r24	; 0x12
    67d8:	82 ec       	ldi	r24, 0xC2	; 194
    67da:	90 e0       	ldi	r25, 0x00	; 0
    67dc:	95 8b       	std	Z+21, r25	; 0x15
    67de:	84 8b       	std	Z+20, r24	; 0x14
    67e0:	86 ec       	ldi	r24, 0xC6	; 198
    67e2:	90 e0       	ldi	r25, 0x00	; 0
    67e4:	97 8b       	std	Z+23, r25	; 0x17
    67e6:	86 8b       	std	Z+22, r24	; 0x16
    67e8:	11 8e       	std	Z+25, r1	; 0x19
    67ea:	12 8e       	std	Z+26, r1	; 0x1a
    67ec:	13 8e       	std	Z+27, r1	; 0x1b
    67ee:	14 8e       	std	Z+28, r1	; 0x1c
    67f0:	08 95       	ret

000067f2 <_ZNK9IPAddress7printToER5Print>:
        // Too few dots (there must be 3 dots)
        return false;
    }
    _address.bytes[3] = acc;
    return true;
}
    67f2:	8f 92       	push	r8
    67f4:	9f 92       	push	r9
    67f6:	af 92       	push	r10
    67f8:	bf 92       	push	r11
    67fa:	cf 92       	push	r12
    67fc:	df 92       	push	r13
    67fe:	ef 92       	push	r14
    6800:	ff 92       	push	r15
    6802:	0f 93       	push	r16
    6804:	1f 93       	push	r17
    6806:	cf 93       	push	r28
    6808:	df 93       	push	r29
    680a:	7c 01       	movw	r14, r24
    680c:	8b 01       	movw	r16, r22
    680e:	4c 01       	movw	r8, r24
    6810:	82 e0       	ldi	r24, 0x02	; 2
    6812:	88 0e       	add	r8, r24
    6814:	91 1c       	adc	r9, r1
    6816:	57 01       	movw	r10, r14
    6818:	e5 e0       	ldi	r30, 0x05	; 5
    681a:	ae 0e       	add	r10, r30
    681c:	b1 1c       	adc	r11, r1
    681e:	c0 e0       	ldi	r28, 0x00	; 0
    6820:	d0 e0       	ldi	r29, 0x00	; 0
    6822:	f4 01       	movw	r30, r8
    6824:	61 91       	ld	r22, Z+
    6826:	4f 01       	movw	r8, r30
    6828:	4a e0       	ldi	r20, 0x0A	; 10
    682a:	50 e0       	ldi	r21, 0x00	; 0
    682c:	c8 01       	movw	r24, r16
    682e:	4b d1       	rcall	.+662    	; 0x6ac6 <_ZN5Print5printEhi>
    6830:	6c 01       	movw	r12, r24
    6832:	6e e2       	ldi	r22, 0x2E	; 46
    6834:	c8 01       	movw	r24, r16
    6836:	ba d0       	rcall	.+372    	; 0x69ac <_ZN5Print5printEc>
    6838:	8c 0d       	add	r24, r12
    683a:	9d 1d       	adc	r25, r13
    683c:	c8 0f       	add	r28, r24
    683e:	d9 1f       	adc	r29, r25
    6840:	8a 14       	cp	r8, r10
    6842:	9b 04       	cpc	r9, r11
    6844:	71 f7       	brne	.-36     	; 0x6822 <_ZNK9IPAddress7printToER5Print+0x30>
    6846:	4a e0       	ldi	r20, 0x0A	; 10
    6848:	50 e0       	ldi	r21, 0x00	; 0
    684a:	f7 01       	movw	r30, r14
    684c:	65 81       	ldd	r22, Z+5	; 0x05
    684e:	c8 01       	movw	r24, r16
    6850:	3a d1       	rcall	.+628    	; 0x6ac6 <_ZN5Print5printEhi>
    6852:	8c 0f       	add	r24, r28
    6854:	9d 1f       	adc	r25, r29
    6856:	df 91       	pop	r29
    6858:	cf 91       	pop	r28
    685a:	1f 91       	pop	r17
    685c:	0f 91       	pop	r16
    685e:	ff 90       	pop	r15
    6860:	ef 90       	pop	r14
    6862:	df 90       	pop	r13
    6864:	cf 90       	pop	r12
    6866:	bf 90       	pop	r11
    6868:	af 90       	pop	r10
    686a:	9f 90       	pop	r9
    686c:	8f 90       	pop	r8
    686e:	08 95       	ret

00006870 <_ZN9IPAddressC1Ev>:
    6870:	27 ee       	ldi	r18, 0xE7	; 231
    6872:	39 e0       	ldi	r19, 0x09	; 9
    6874:	fc 01       	movw	r30, r24
    6876:	31 83       	std	Z+1, r19	; 0x01
    6878:	20 83       	st	Z, r18
    687a:	12 82       	std	Z+2, r1	; 0x02
    687c:	13 82       	std	Z+3, r1	; 0x03
    687e:	14 82       	std	Z+4, r1	; 0x04
    6880:	15 82       	std	Z+5, r1	; 0x05
    6882:	08 95       	ret

00006884 <_ZN9IPAddressC1Ehhhh>:
    6884:	0f 93       	push	r16
    6886:	fc 01       	movw	r30, r24
    6888:	87 ee       	ldi	r24, 0xE7	; 231
    688a:	99 e0       	ldi	r25, 0x09	; 9
    688c:	91 83       	std	Z+1, r25	; 0x01
    688e:	80 83       	st	Z, r24
    6890:	62 83       	std	Z+2, r22	; 0x02
    6892:	43 83       	std	Z+3, r20	; 0x03
    6894:	24 83       	std	Z+4, r18	; 0x04
    6896:	05 83       	std	Z+5, r16	; 0x05
    6898:	0f 91       	pop	r16
    689a:	08 95       	ret

0000689c <_ZN9IPAddressaSEPKh>:

IPAddress& IPAddress::operator=(const uint8_t *address)
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
    689c:	dc 01       	movw	r26, r24
    689e:	12 96       	adiw	r26, 0x02	; 2
    68a0:	24 e0       	ldi	r18, 0x04	; 4
    68a2:	fb 01       	movw	r30, r22
    68a4:	01 90       	ld	r0, Z+
    68a6:	0d 92       	st	X+, r0
    68a8:	2a 95       	dec	r18
    68aa:	e1 f7       	brne	.-8      	; 0x68a4 <_ZN9IPAddressaSEPKh+0x8>
    return *this;
}
    68ac:	08 95       	ret

000068ae <initVariant>:
    68ae:	08 95       	ret

000068b0 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    68b0:	e4 d1       	rcall	.+968    	; 0x6c7a <init>

	initVariant();
    68b2:	fd df       	rcall	.-6      	; 0x68ae <initVariant>
    68b4:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <setup>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    68b8:	cd e6       	ldi	r28, 0x6D	; 109
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    68ba:	d2 e3       	ldi	r29, 0x32	; 50
    68bc:	0e 94 b2 0b 	call	0x1764	; 0x1764 <loop>
#endif
	
	setup();
    
	for (;;) {
		loop();
    68c0:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
    68c2:	e1 f3       	breq	.-8      	; 0x68bc <main+0xc>
    68c4:	0a de       	rcall	.-1004   	; 0x64da <_Z14serialEventRunv>
    68c6:	fa cf       	rjmp	.-12     	; 0x68bc <main+0xc>

000068c8 <_ZN5Print5writeEPKhj>:
    68c8:	cf 92       	push	r12
size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    68ca:	df 92       	push	r13
    68cc:	ef 92       	push	r14
    68ce:	ff 92       	push	r15
    68d0:	0f 93       	push	r16
    68d2:	1f 93       	push	r17
    68d4:	cf 93       	push	r28
    68d6:	df 93       	push	r29
    68d8:	6c 01       	movw	r12, r24
    68da:	7a 01       	movw	r14, r20
    68dc:	8b 01       	movw	r16, r22
    68de:	c0 e0       	ldi	r28, 0x00	; 0
    68e0:	d0 e0       	ldi	r29, 0x00	; 0
    68e2:	ce 15       	cp	r28, r14
    68e4:	df 05       	cpc	r29, r15
    68e6:	81 f0       	breq	.+32     	; 0x6908 <_ZN5Print5writeEPKhj+0x40>
    68e8:	d8 01       	movw	r26, r16
    68ea:	6d 91       	ld	r22, X+
    68ec:	8d 01       	movw	r16, r26
    68ee:	d6 01       	movw	r26, r12
    68f0:	ed 91       	ld	r30, X+
    68f2:	fc 91       	ld	r31, X
    68f4:	01 90       	ld	r0, Z+
    68f6:	f0 81       	ld	r31, Z
    68f8:	e0 2d       	mov	r30, r0
    68fa:	c6 01       	movw	r24, r12
    68fc:	09 95       	icall
    68fe:	89 2b       	or	r24, r25
    6900:	11 f0       	breq	.+4      	; 0x6906 <_ZN5Print5writeEPKhj+0x3e>
    6902:	21 96       	adiw	r28, 0x01	; 1
    6904:	ee cf       	rjmp	.-36     	; 0x68e2 <_ZN5Print5writeEPKhj+0x1a>
    6906:	7e 01       	movw	r14, r28
    6908:	c7 01       	movw	r24, r14
    690a:	df 91       	pop	r29
    690c:	cf 91       	pop	r28
    690e:	1f 91       	pop	r17
    6910:	0f 91       	pop	r16
    6912:	ff 90       	pop	r15
    6914:	ef 90       	pop	r14
    6916:	df 90       	pop	r13
    6918:	cf 90       	pop	r12
    691a:	08 95       	ret

0000691c <_ZN5Print5writeEPKc>:
    691c:	61 15       	cp	r22, r1
    691e:	71 05       	cpc	r23, r1
    6920:	79 f0       	breq	.+30     	; 0x6940 <_ZN5Print5writeEPKc+0x24>
    6922:	fb 01       	movw	r30, r22
    6924:	01 90       	ld	r0, Z+
    6926:	00 20       	and	r0, r0
    6928:	e9 f7       	brne	.-6      	; 0x6924 <_ZN5Print5writeEPKc+0x8>
    692a:	31 97       	sbiw	r30, 0x01	; 1
    692c:	af 01       	movw	r20, r30
    692e:	46 1b       	sub	r20, r22
    6930:	57 0b       	sbc	r21, r23
    6932:	dc 01       	movw	r26, r24
    6934:	ed 91       	ld	r30, X+
    6936:	fc 91       	ld	r31, X
    6938:	02 80       	ldd	r0, Z+2	; 0x02
    693a:	f3 81       	ldd	r31, Z+3	; 0x03
    693c:	e0 2d       	mov	r30, r0
    693e:	09 94       	ijmp
    6940:	80 e0       	ldi	r24, 0x00	; 0
    6942:	90 e0       	ldi	r25, 0x00	; 0
    6944:	08 95       	ret

00006946 <_ZN5Print5printEPK19__FlashStringHelper>:
    6946:	ef 92       	push	r14
    6948:	ff 92       	push	r15
    694a:	0f 93       	push	r16
    694c:	1f 93       	push	r17
    694e:	cf 93       	push	r28
    6950:	df 93       	push	r29
    6952:	8c 01       	movw	r16, r24
    6954:	7b 01       	movw	r14, r22
    6956:	c0 e0       	ldi	r28, 0x00	; 0
    6958:	d0 e0       	ldi	r29, 0x00	; 0
    695a:	f7 01       	movw	r30, r14
    695c:	ec 0f       	add	r30, r28
    695e:	fd 1f       	adc	r31, r29
    6960:	64 91       	lpm	r22, Z
    6962:	66 23       	and	r22, r22
    6964:	61 f0       	breq	.+24     	; 0x697e <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    6966:	d8 01       	movw	r26, r16
    6968:	ed 91       	ld	r30, X+
    696a:	fc 91       	ld	r31, X
    696c:	01 90       	ld	r0, Z+
    696e:	f0 81       	ld	r31, Z
    6970:	e0 2d       	mov	r30, r0
    6972:	c8 01       	movw	r24, r16
    6974:	09 95       	icall
    6976:	89 2b       	or	r24, r25
    6978:	11 f0       	breq	.+4      	; 0x697e <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    697a:	21 96       	adiw	r28, 0x01	; 1
    697c:	ee cf       	rjmp	.-36     	; 0x695a <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    697e:	ce 01       	movw	r24, r28
    6980:	df 91       	pop	r29
    6982:	cf 91       	pop	r28
    6984:	1f 91       	pop	r17
    6986:	0f 91       	pop	r16
    6988:	ff 90       	pop	r15
    698a:	ef 90       	pop	r14
    698c:	08 95       	ret

0000698e <_ZN5Print5printERK6String>:
    698e:	db 01       	movw	r26, r22
    6990:	14 96       	adiw	r26, 0x04	; 4
    6992:	4d 91       	ld	r20, X+
    6994:	5c 91       	ld	r21, X
    6996:	15 97       	sbiw	r26, 0x05	; 5
    6998:	6d 91       	ld	r22, X+
    699a:	7c 91       	ld	r23, X
    699c:	dc 01       	movw	r26, r24
    699e:	ed 91       	ld	r30, X+
    69a0:	fc 91       	ld	r31, X
    69a2:	02 80       	ldd	r0, Z+2	; 0x02
    69a4:	f3 81       	ldd	r31, Z+3	; 0x03
    69a6:	e0 2d       	mov	r30, r0
    69a8:	09 94       	ijmp

000069aa <_ZN5Print5printEPKc>:
    69aa:	b8 cf       	rjmp	.-144    	; 0x691c <_ZN5Print5writeEPKc>

000069ac <_ZN5Print5printEc>:
    69ac:	dc 01       	movw	r26, r24
    69ae:	ed 91       	ld	r30, X+
    69b0:	fc 91       	ld	r31, X
    69b2:	01 90       	ld	r0, Z+
    69b4:	f0 81       	ld	r31, Z
    69b6:	e0 2d       	mov	r30, r0
    69b8:	09 94       	ijmp

000069ba <_ZN5Print7printlnEv>:
    69ba:	62 e4       	ldi	r22, 0x42	; 66
    69bc:	75 e0       	ldi	r23, 0x05	; 5
    69be:	ae cf       	rjmp	.-164    	; 0x691c <_ZN5Print5writeEPKc>

000069c0 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    69c0:	0f 93       	push	r16
    69c2:	1f 93       	push	r17
    69c4:	cf 93       	push	r28
    69c6:	df 93       	push	r29
    69c8:	ec 01       	movw	r28, r24
    69ca:	bd df       	rcall	.-134    	; 0x6946 <_ZN5Print5printEPK19__FlashStringHelper>
    69cc:	8c 01       	movw	r16, r24
    69ce:	ce 01       	movw	r24, r28
    69d0:	f4 df       	rcall	.-24     	; 0x69ba <_ZN5Print7printlnEv>
    69d2:	80 0f       	add	r24, r16
    69d4:	91 1f       	adc	r25, r17
    69d6:	df 91       	pop	r29
    69d8:	cf 91       	pop	r28
    69da:	1f 91       	pop	r17
    69dc:	0f 91       	pop	r16
    69de:	08 95       	ret

000069e0 <_ZN5Print7printlnERK6String>:
    69e0:	0f 93       	push	r16
    69e2:	1f 93       	push	r17
    69e4:	cf 93       	push	r28
    69e6:	df 93       	push	r29
    69e8:	ec 01       	movw	r28, r24
    69ea:	d1 df       	rcall	.-94     	; 0x698e <_ZN5Print5printERK6String>
    69ec:	8c 01       	movw	r16, r24
    69ee:	ce 01       	movw	r24, r28
    69f0:	e4 df       	rcall	.-56     	; 0x69ba <_ZN5Print7printlnEv>
    69f2:	80 0f       	add	r24, r16
    69f4:	91 1f       	adc	r25, r17
    69f6:	df 91       	pop	r29
    69f8:	cf 91       	pop	r28
    69fa:	1f 91       	pop	r17
    69fc:	0f 91       	pop	r16
    69fe:	08 95       	ret

00006a00 <_ZN5Print7printlnEPKc>:
    6a00:	0f 93       	push	r16
    6a02:	1f 93       	push	r17
    6a04:	cf 93       	push	r28
    6a06:	df 93       	push	r29
    6a08:	ec 01       	movw	r28, r24
    6a0a:	88 df       	rcall	.-240    	; 0x691c <_ZN5Print5writeEPKc>
    6a0c:	8c 01       	movw	r16, r24
    6a0e:	ce 01       	movw	r24, r28
    6a10:	d4 df       	rcall	.-88     	; 0x69ba <_ZN5Print7printlnEv>
    6a12:	80 0f       	add	r24, r16
    6a14:	91 1f       	adc	r25, r17
    6a16:	df 91       	pop	r29
    6a18:	cf 91       	pop	r28
    6a1a:	1f 91       	pop	r17
    6a1c:	0f 91       	pop	r16
    6a1e:	08 95       	ret

00006a20 <_ZN5Print11printNumberEmh>:
    6a20:	8f 92       	push	r8
    6a22:	9f 92       	push	r9
    6a24:	af 92       	push	r10
    6a26:	bf 92       	push	r11
    6a28:	ef 92       	push	r14
    6a2a:	ff 92       	push	r15
    6a2c:	0f 93       	push	r16
    6a2e:	1f 93       	push	r17
    6a30:	cf 93       	push	r28
    6a32:	df 93       	push	r29
    6a34:	cd b7       	in	r28, 0x3d	; 61
    6a36:	de b7       	in	r29, 0x3e	; 62
    6a38:	a1 97       	sbiw	r28, 0x21	; 33
    6a3a:	0f b6       	in	r0, 0x3f	; 63
    6a3c:	f8 94       	cli
    6a3e:	de bf       	out	0x3e, r29	; 62
    6a40:	0f be       	out	0x3f, r0	; 63
    6a42:	cd bf       	out	0x3d, r28	; 61
    6a44:	7c 01       	movw	r14, r24
    6a46:	fa 01       	movw	r30, r20
    6a48:	cb 01       	movw	r24, r22
    6a4a:	19 a2       	std	Y+33, r1	; 0x21
    6a4c:	22 30       	cpi	r18, 0x02	; 2
    6a4e:	08 f4       	brcc	.+2      	; 0x6a52 <_ZN5Print11printNumberEmh+0x32>
    6a50:	2a e0       	ldi	r18, 0x0A	; 10
    6a52:	8e 01       	movw	r16, r28
    6a54:	0f 5d       	subi	r16, 0xDF	; 223
    6a56:	1f 4f       	sbci	r17, 0xFF	; 255
    6a58:	82 2e       	mov	r8, r18
    6a5a:	91 2c       	mov	r9, r1
    6a5c:	a1 2c       	mov	r10, r1
    6a5e:	b1 2c       	mov	r11, r1
    6a60:	bf 01       	movw	r22, r30
    6a62:	a5 01       	movw	r20, r10
    6a64:	94 01       	movw	r18, r8
    6a66:	79 d5       	rcall	.+2802   	; 0x755a <__udivmodsi4>
    6a68:	f9 01       	movw	r30, r18
    6a6a:	ca 01       	movw	r24, r20
    6a6c:	01 50       	subi	r16, 0x01	; 1
    6a6e:	11 09       	sbc	r17, r1
    6a70:	6a 30       	cpi	r22, 0x0A	; 10
    6a72:	10 f4       	brcc	.+4      	; 0x6a78 <_ZN5Print11printNumberEmh+0x58>
    6a74:	60 5d       	subi	r22, 0xD0	; 208
    6a76:	01 c0       	rjmp	.+2      	; 0x6a7a <_ZN5Print11printNumberEmh+0x5a>
    6a78:	69 5c       	subi	r22, 0xC9	; 201
    6a7a:	d8 01       	movw	r26, r16
    6a7c:	6c 93       	st	X, r22
    6a7e:	23 2b       	or	r18, r19
    6a80:	24 2b       	or	r18, r20
    6a82:	25 2b       	or	r18, r21
    6a84:	69 f7       	brne	.-38     	; 0x6a60 <_ZN5Print11printNumberEmh+0x40>
    6a86:	b8 01       	movw	r22, r16
    6a88:	c7 01       	movw	r24, r14
    6a8a:	48 df       	rcall	.-368    	; 0x691c <_ZN5Print5writeEPKc>
    6a8c:	a1 96       	adiw	r28, 0x21	; 33
    6a8e:	0f b6       	in	r0, 0x3f	; 63
    6a90:	f8 94       	cli
    6a92:	de bf       	out	0x3e, r29	; 62
    6a94:	0f be       	out	0x3f, r0	; 63
    6a96:	cd bf       	out	0x3d, r28	; 61
    6a98:	df 91       	pop	r29
    6a9a:	cf 91       	pop	r28
    6a9c:	1f 91       	pop	r17
    6a9e:	0f 91       	pop	r16
    6aa0:	ff 90       	pop	r15
    6aa2:	ef 90       	pop	r14
    6aa4:	bf 90       	pop	r11
    6aa6:	af 90       	pop	r10
    6aa8:	9f 90       	pop	r9
    6aaa:	8f 90       	pop	r8
    6aac:	08 95       	ret

00006aae <_ZN5Print5printEmi>:
    6aae:	21 15       	cp	r18, r1
    6ab0:	31 05       	cpc	r19, r1
    6ab2:	41 f4       	brne	.+16     	; 0x6ac4 <_ZN5Print5printEmi+0x16>
    6ab4:	dc 01       	movw	r26, r24
    6ab6:	ed 91       	ld	r30, X+
    6ab8:	fc 91       	ld	r31, X
    6aba:	01 90       	ld	r0, Z+
    6abc:	f0 81       	ld	r31, Z
    6abe:	e0 2d       	mov	r30, r0
    6ac0:	64 2f       	mov	r22, r20
    6ac2:	09 94       	ijmp
    6ac4:	ad cf       	rjmp	.-166    	; 0x6a20 <_ZN5Print11printNumberEmh>

00006ac6 <_ZN5Print5printEhi>:
    6ac6:	9a 01       	movw	r18, r20
    6ac8:	46 2f       	mov	r20, r22
    6aca:	50 e0       	ldi	r21, 0x00	; 0
    6acc:	60 e0       	ldi	r22, 0x00	; 0
    6ace:	70 e0       	ldi	r23, 0x00	; 0
    6ad0:	ee cf       	rjmp	.-36     	; 0x6aae <_ZN5Print5printEmi>

00006ad2 <_ZN5Print5printEji>:
    6ad2:	9a 01       	movw	r18, r20
    6ad4:	ab 01       	movw	r20, r22
    6ad6:	60 e0       	ldi	r22, 0x00	; 0
    6ad8:	70 e0       	ldi	r23, 0x00	; 0
    6ada:	e9 cf       	rjmp	.-46     	; 0x6aae <_ZN5Print5printEmi>

00006adc <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    6adc:	0f 93       	push	r16
    6ade:	1f 93       	push	r17
    6ae0:	cf 93       	push	r28
    6ae2:	df 93       	push	r29
    6ae4:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    6ae6:	e3 df       	rcall	.-58     	; 0x6aae <_ZN5Print5printEmi>
    6ae8:	8c 01       	movw	r16, r24
  n += println();
    6aea:	ce 01       	movw	r24, r28
    6aec:	66 df       	rcall	.-308    	; 0x69ba <_ZN5Print7printlnEv>
  return n;
}
    6aee:	80 0f       	add	r24, r16
    6af0:	91 1f       	adc	r25, r17
    6af2:	df 91       	pop	r29
    6af4:	cf 91       	pop	r28
    6af6:	1f 91       	pop	r17
    6af8:	0f 91       	pop	r16
    6afa:	08 95       	ret

00006afc <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    6afc:	1f 92       	push	r1
    6afe:	0f 92       	push	r0
    6b00:	0f b6       	in	r0, 0x3f	; 63
    6b02:	0f 92       	push	r0
    6b04:	11 24       	eor	r1, r1
    6b06:	2f 93       	push	r18
    6b08:	3f 93       	push	r19
    6b0a:	8f 93       	push	r24
    6b0c:	9f 93       	push	r25
    6b0e:	af 93       	push	r26
    6b10:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    6b12:	80 91 43 0d 	lds	r24, 0x0D43	; 0x800d43 <timer0_millis>
    6b16:	90 91 44 0d 	lds	r25, 0x0D44	; 0x800d44 <timer0_millis+0x1>
    6b1a:	a0 91 45 0d 	lds	r26, 0x0D45	; 0x800d45 <timer0_millis+0x2>
    6b1e:	b0 91 46 0d 	lds	r27, 0x0D46	; 0x800d46 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    6b22:	30 91 42 0d 	lds	r19, 0x0D42	; 0x800d42 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    6b26:	23 e0       	ldi	r18, 0x03	; 3
    6b28:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    6b2a:	2d 37       	cpi	r18, 0x7D	; 125
    6b2c:	20 f4       	brcc	.+8      	; 0x6b36 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    6b2e:	01 96       	adiw	r24, 0x01	; 1
    6b30:	a1 1d       	adc	r26, r1
    6b32:	b1 1d       	adc	r27, r1
    6b34:	05 c0       	rjmp	.+10     	; 0x6b40 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    6b36:	26 e8       	ldi	r18, 0x86	; 134
    6b38:	23 0f       	add	r18, r19
		m += 1;
    6b3a:	02 96       	adiw	r24, 0x02	; 2
    6b3c:	a1 1d       	adc	r26, r1
    6b3e:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    6b40:	20 93 42 0d 	sts	0x0D42, r18	; 0x800d42 <timer0_fract>
	timer0_millis = m;
    6b44:	80 93 43 0d 	sts	0x0D43, r24	; 0x800d43 <timer0_millis>
    6b48:	90 93 44 0d 	sts	0x0D44, r25	; 0x800d44 <timer0_millis+0x1>
    6b4c:	a0 93 45 0d 	sts	0x0D45, r26	; 0x800d45 <timer0_millis+0x2>
    6b50:	b0 93 46 0d 	sts	0x0D46, r27	; 0x800d46 <timer0_millis+0x3>
	timer0_overflow_count++;
    6b54:	80 91 47 0d 	lds	r24, 0x0D47	; 0x800d47 <timer0_overflow_count>
    6b58:	90 91 48 0d 	lds	r25, 0x0D48	; 0x800d48 <timer0_overflow_count+0x1>
    6b5c:	a0 91 49 0d 	lds	r26, 0x0D49	; 0x800d49 <timer0_overflow_count+0x2>
    6b60:	b0 91 4a 0d 	lds	r27, 0x0D4A	; 0x800d4a <timer0_overflow_count+0x3>
    6b64:	01 96       	adiw	r24, 0x01	; 1
    6b66:	a1 1d       	adc	r26, r1
    6b68:	b1 1d       	adc	r27, r1
    6b6a:	80 93 47 0d 	sts	0x0D47, r24	; 0x800d47 <timer0_overflow_count>
    6b6e:	90 93 48 0d 	sts	0x0D48, r25	; 0x800d48 <timer0_overflow_count+0x1>
    6b72:	a0 93 49 0d 	sts	0x0D49, r26	; 0x800d49 <timer0_overflow_count+0x2>
    6b76:	b0 93 4a 0d 	sts	0x0D4A, r27	; 0x800d4a <timer0_overflow_count+0x3>
}
    6b7a:	bf 91       	pop	r27
    6b7c:	af 91       	pop	r26
    6b7e:	9f 91       	pop	r25
    6b80:	8f 91       	pop	r24
    6b82:	3f 91       	pop	r19
    6b84:	2f 91       	pop	r18
    6b86:	0f 90       	pop	r0
    6b88:	0f be       	out	0x3f, r0	; 63
    6b8a:	0f 90       	pop	r0
    6b8c:	1f 90       	pop	r1
    6b8e:	18 95       	reti

00006b90 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    6b90:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    6b92:	f8 94       	cli
	m = timer0_millis;
    6b94:	60 91 43 0d 	lds	r22, 0x0D43	; 0x800d43 <timer0_millis>
    6b98:	70 91 44 0d 	lds	r23, 0x0D44	; 0x800d44 <timer0_millis+0x1>
    6b9c:	80 91 45 0d 	lds	r24, 0x0D45	; 0x800d45 <timer0_millis+0x2>
    6ba0:	90 91 46 0d 	lds	r25, 0x0D46	; 0x800d46 <timer0_millis+0x3>
	SREG = oldSREG;
    6ba4:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    6ba6:	08 95       	ret

00006ba8 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    6ba8:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    6baa:	f8 94       	cli
	m = timer0_overflow_count;
    6bac:	80 91 47 0d 	lds	r24, 0x0D47	; 0x800d47 <timer0_overflow_count>
    6bb0:	90 91 48 0d 	lds	r25, 0x0D48	; 0x800d48 <timer0_overflow_count+0x1>
    6bb4:	a0 91 49 0d 	lds	r26, 0x0D49	; 0x800d49 <timer0_overflow_count+0x2>
    6bb8:	b0 91 4a 0d 	lds	r27, 0x0D4A	; 0x800d4a <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    6bbc:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    6bbe:	a8 9b       	sbis	0x15, 0	; 21
    6bc0:	05 c0       	rjmp	.+10     	; 0x6bcc <micros+0x24>
    6bc2:	2f 3f       	cpi	r18, 0xFF	; 255
    6bc4:	19 f0       	breq	.+6      	; 0x6bcc <micros+0x24>
		m++;
    6bc6:	01 96       	adiw	r24, 0x01	; 1
    6bc8:	a1 1d       	adc	r26, r1
    6bca:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    6bcc:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    6bce:	ba 2f       	mov	r27, r26
    6bd0:	a9 2f       	mov	r26, r25
    6bd2:	98 2f       	mov	r25, r24
    6bd4:	88 27       	eor	r24, r24
    6bd6:	82 0f       	add	r24, r18
    6bd8:	91 1d       	adc	r25, r1
    6bda:	a1 1d       	adc	r26, r1
    6bdc:	b1 1d       	adc	r27, r1
    6bde:	bc 01       	movw	r22, r24
    6be0:	cd 01       	movw	r24, r26
    6be2:	42 e0       	ldi	r20, 0x02	; 2
    6be4:	66 0f       	add	r22, r22
    6be6:	77 1f       	adc	r23, r23
    6be8:	88 1f       	adc	r24, r24
    6bea:	99 1f       	adc	r25, r25
    6bec:	4a 95       	dec	r20
    6bee:	d1 f7       	brne	.-12     	; 0x6be4 <micros+0x3c>
}
    6bf0:	08 95       	ret

00006bf2 <delay>:

void delay(unsigned long ms)
{
    6bf2:	8f 92       	push	r8
    6bf4:	9f 92       	push	r9
    6bf6:	af 92       	push	r10
    6bf8:	bf 92       	push	r11
    6bfa:	cf 92       	push	r12
    6bfc:	df 92       	push	r13
    6bfe:	ef 92       	push	r14
    6c00:	ff 92       	push	r15
    6c02:	6b 01       	movw	r12, r22
    6c04:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    6c06:	d0 df       	rcall	.-96     	; 0x6ba8 <micros>
    6c08:	4b 01       	movw	r8, r22
    6c0a:	5c 01       	movw	r10, r24

	while (ms > 0) {
    6c0c:	c1 14       	cp	r12, r1
    6c0e:	d1 04       	cpc	r13, r1
    6c10:	e1 04       	cpc	r14, r1
    6c12:	f1 04       	cpc	r15, r1
		yield();
    6c14:	f1 f0       	breq	.+60     	; 0x6c52 <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    6c16:	80 d4       	rcall	.+2304   	; 0x7518 <yield>
    6c18:	c7 df       	rcall	.-114    	; 0x6ba8 <micros>
    6c1a:	dc 01       	movw	r26, r24
    6c1c:	cb 01       	movw	r24, r22
    6c1e:	88 19       	sub	r24, r8
    6c20:	99 09       	sbc	r25, r9
    6c22:	aa 09       	sbc	r26, r10
    6c24:	bb 09       	sbc	r27, r11
    6c26:	88 3e       	cpi	r24, 0xE8	; 232
    6c28:	93 40       	sbci	r25, 0x03	; 3
    6c2a:	a1 05       	cpc	r26, r1
    6c2c:	b1 05       	cpc	r27, r1
    6c2e:	70 f3       	brcs	.-36     	; 0x6c0c <delay+0x1a>
			ms--;
    6c30:	21 e0       	ldi	r18, 0x01	; 1
    6c32:	c2 1a       	sub	r12, r18
    6c34:	d1 08       	sbc	r13, r1
    6c36:	e1 08       	sbc	r14, r1
    6c38:	f1 08       	sbc	r15, r1
			start += 1000;
    6c3a:	88 ee       	ldi	r24, 0xE8	; 232
    6c3c:	88 0e       	add	r8, r24
    6c3e:	83 e0       	ldi	r24, 0x03	; 3
    6c40:	98 1e       	adc	r9, r24
    6c42:	a1 1c       	adc	r10, r1
    6c44:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    6c46:	c1 14       	cp	r12, r1
    6c48:	d1 04       	cpc	r13, r1
    6c4a:	e1 04       	cpc	r14, r1
    6c4c:	f1 04       	cpc	r15, r1
    6c4e:	21 f7       	brne	.-56     	; 0x6c18 <delay+0x26>
    6c50:	dd cf       	rjmp	.-70     	; 0x6c0c <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    6c52:	ff 90       	pop	r15
    6c54:	ef 90       	pop	r14
    6c56:	df 90       	pop	r13
    6c58:	cf 90       	pop	r12
    6c5a:	bf 90       	pop	r11
    6c5c:	af 90       	pop	r10
    6c5e:	9f 90       	pop	r9
    6c60:	8f 90       	pop	r8
    6c62:	08 95       	ret

00006c64 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    6c64:	82 30       	cpi	r24, 0x02	; 2
    6c66:	91 05       	cpc	r25, r1
    6c68:	38 f0       	brcs	.+14     	; 0x6c78 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    6c6a:	88 0f       	add	r24, r24
    6c6c:	99 1f       	adc	r25, r25
    6c6e:	88 0f       	add	r24, r24
    6c70:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    6c72:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    6c74:	01 97       	sbiw	r24, 0x01	; 1
    6c76:	f1 f7       	brne	.-4      	; 0x6c74 <delayMicroseconds+0x10>
    6c78:	08 95       	ret

00006c7a <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    6c7a:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    6c7c:	84 b5       	in	r24, 0x24	; 36
    6c7e:	82 60       	ori	r24, 0x02	; 2
    6c80:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    6c82:	84 b5       	in	r24, 0x24	; 36
    6c84:	81 60       	ori	r24, 0x01	; 1
    6c86:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    6c88:	85 b5       	in	r24, 0x25	; 37
    6c8a:	82 60       	ori	r24, 0x02	; 2
    6c8c:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    6c8e:	85 b5       	in	r24, 0x25	; 37
    6c90:	81 60       	ori	r24, 0x01	; 1
    6c92:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    6c94:	ee e6       	ldi	r30, 0x6E	; 110
    6c96:	f0 e0       	ldi	r31, 0x00	; 0
    6c98:	80 81       	ld	r24, Z
    6c9a:	81 60       	ori	r24, 0x01	; 1
    6c9c:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    6c9e:	e1 e8       	ldi	r30, 0x81	; 129
    6ca0:	f0 e0       	ldi	r31, 0x00	; 0
    6ca2:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    6ca4:	80 81       	ld	r24, Z
    6ca6:	82 60       	ori	r24, 0x02	; 2
    6ca8:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    6caa:	80 81       	ld	r24, Z
    6cac:	81 60       	ori	r24, 0x01	; 1
    6cae:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    6cb0:	e0 e8       	ldi	r30, 0x80	; 128
    6cb2:	f0 e0       	ldi	r31, 0x00	; 0
    6cb4:	80 81       	ld	r24, Z
    6cb6:	81 60       	ori	r24, 0x01	; 1
    6cb8:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    6cba:	e1 eb       	ldi	r30, 0xB1	; 177
    6cbc:	f0 e0       	ldi	r31, 0x00	; 0
    6cbe:	80 81       	ld	r24, Z
    6cc0:	84 60       	ori	r24, 0x04	; 4
    6cc2:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    6cc4:	e0 eb       	ldi	r30, 0xB0	; 176
    6cc6:	f0 e0       	ldi	r31, 0x00	; 0
    6cc8:	80 81       	ld	r24, Z
    6cca:	81 60       	ori	r24, 0x01	; 1
    6ccc:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    6cce:	ea e7       	ldi	r30, 0x7A	; 122
    6cd0:	f0 e0       	ldi	r31, 0x00	; 0
    6cd2:	80 81       	ld	r24, Z
    6cd4:	84 60       	ori	r24, 0x04	; 4
    6cd6:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    6cd8:	80 81       	ld	r24, Z
    6cda:	82 60       	ori	r24, 0x02	; 2
    6cdc:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    6cde:	80 81       	ld	r24, Z
    6ce0:	81 60       	ori	r24, 0x01	; 1
    6ce2:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    6ce4:	80 81       	ld	r24, Z
    6ce6:	80 68       	ori	r24, 0x80	; 128
    6ce8:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    6cea:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    6cee:	08 95       	ret

00006cf0 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    6cf0:	83 30       	cpi	r24, 0x03	; 3
    6cf2:	81 f0       	breq	.+32     	; 0x6d14 <turnOffPWM+0x24>
    6cf4:	28 f4       	brcc	.+10     	; 0x6d00 <turnOffPWM+0x10>
    6cf6:	81 30       	cpi	r24, 0x01	; 1
    6cf8:	99 f0       	breq	.+38     	; 0x6d20 <turnOffPWM+0x30>
    6cfa:	82 30       	cpi	r24, 0x02	; 2
    6cfc:	a1 f0       	breq	.+40     	; 0x6d26 <turnOffPWM+0x36>
    6cfe:	08 95       	ret
    6d00:	87 30       	cpi	r24, 0x07	; 7
    6d02:	a9 f0       	breq	.+42     	; 0x6d2e <turnOffPWM+0x3e>
    6d04:	88 30       	cpi	r24, 0x08	; 8
    6d06:	b9 f0       	breq	.+46     	; 0x6d36 <turnOffPWM+0x46>
    6d08:	84 30       	cpi	r24, 0x04	; 4
    6d0a:	d1 f4       	brne	.+52     	; 0x6d40 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    6d0c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    6d10:	8f 7d       	andi	r24, 0xDF	; 223
    6d12:	03 c0       	rjmp	.+6      	; 0x6d1a <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    6d14:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    6d18:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    6d1a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    6d1e:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    6d20:	84 b5       	in	r24, 0x24	; 36
    6d22:	8f 77       	andi	r24, 0x7F	; 127
    6d24:	02 c0       	rjmp	.+4      	; 0x6d2a <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    6d26:	84 b5       	in	r24, 0x24	; 36
    6d28:	8f 7d       	andi	r24, 0xDF	; 223
    6d2a:	84 bd       	out	0x24, r24	; 36
    6d2c:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    6d2e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    6d32:	8f 77       	andi	r24, 0x7F	; 127
    6d34:	03 c0       	rjmp	.+6      	; 0x6d3c <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    6d36:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    6d3a:	8f 7d       	andi	r24, 0xDF	; 223
    6d3c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    6d40:	08 95       	ret

00006d42 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    6d42:	cf 93       	push	r28
    6d44:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    6d46:	90 e0       	ldi	r25, 0x00	; 0
    6d48:	fc 01       	movw	r30, r24
    6d4a:	ee 5a       	subi	r30, 0xAE	; 174
    6d4c:	fd 4f       	sbci	r31, 0xFD	; 253
    6d4e:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    6d50:	fc 01       	movw	r30, r24
    6d52:	ee 58       	subi	r30, 0x8E	; 142
    6d54:	fd 4f       	sbci	r31, 0xFD	; 253
    6d56:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    6d58:	88 23       	and	r24, r24
    6d5a:	61 f1       	breq	.+88     	; 0x6db4 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    6d5c:	90 e0       	ldi	r25, 0x00	; 0
    6d5e:	88 0f       	add	r24, r24
    6d60:	99 1f       	adc	r25, r25
    6d62:	fc 01       	movw	r30, r24
    6d64:	ea 55       	subi	r30, 0x5A	; 90
    6d66:	fd 4f       	sbci	r31, 0xFD	; 253
    6d68:	c5 91       	lpm	r28, Z+
    6d6a:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    6d6c:	fc 01       	movw	r30, r24
    6d6e:	e4 56       	subi	r30, 0x64	; 100
    6d70:	fd 4f       	sbci	r31, 0xFD	; 253
    6d72:	a5 91       	lpm	r26, Z+
    6d74:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    6d76:	61 11       	cpse	r22, r1
    6d78:	09 c0       	rjmp	.+18     	; 0x6d8c <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    6d7a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    6d7c:	f8 94       	cli
		*reg &= ~bit;
    6d7e:	88 81       	ld	r24, Y
    6d80:	20 95       	com	r18
    6d82:	82 23       	and	r24, r18
    6d84:	88 83       	st	Y, r24
		*out &= ~bit;
    6d86:	ec 91       	ld	r30, X
    6d88:	2e 23       	and	r18, r30
    6d8a:	0b c0       	rjmp	.+22     	; 0x6da2 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    6d8c:	62 30       	cpi	r22, 0x02	; 2
    6d8e:	61 f4       	brne	.+24     	; 0x6da8 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    6d90:	9f b7       	in	r25, 0x3f	; 63
                cli();
    6d92:	f8 94       	cli
		*reg &= ~bit;
    6d94:	88 81       	ld	r24, Y
    6d96:	32 2f       	mov	r19, r18
    6d98:	30 95       	com	r19
    6d9a:	83 23       	and	r24, r19
    6d9c:	88 83       	st	Y, r24
		*out |= bit;
    6d9e:	ec 91       	ld	r30, X
    6da0:	2e 2b       	or	r18, r30
    6da2:	2c 93       	st	X, r18
		SREG = oldSREG;
    6da4:	9f bf       	out	0x3f, r25	; 63
    6da6:	06 c0       	rjmp	.+12     	; 0x6db4 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    6da8:	8f b7       	in	r24, 0x3f	; 63
                cli();
    6daa:	f8 94       	cli
		*reg |= bit;
    6dac:	e8 81       	ld	r30, Y
    6dae:	2e 2b       	or	r18, r30
    6db0:	28 83       	st	Y, r18
		SREG = oldSREG;
    6db2:	8f bf       	out	0x3f, r24	; 63
	}
}
    6db4:	df 91       	pop	r29
    6db6:	cf 91       	pop	r28
    6db8:	08 95       	ret

00006dba <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    6dba:	1f 93       	push	r17
    6dbc:	cf 93       	push	r28
    6dbe:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    6dc0:	28 2f       	mov	r18, r24
    6dc2:	30 e0       	ldi	r19, 0x00	; 0
    6dc4:	f9 01       	movw	r30, r18
    6dc6:	ee 5c       	subi	r30, 0xCE	; 206
    6dc8:	fd 4f       	sbci	r31, 0xFD	; 253
    6dca:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    6dcc:	f9 01       	movw	r30, r18
    6dce:	ee 5a       	subi	r30, 0xAE	; 174
    6dd0:	fd 4f       	sbci	r31, 0xFD	; 253
    6dd2:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    6dd4:	f9 01       	movw	r30, r18
    6dd6:	ee 58       	subi	r30, 0x8E	; 142
    6dd8:	fd 4f       	sbci	r31, 0xFD	; 253
    6dda:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    6ddc:	cc 23       	and	r28, r28
    6dde:	b9 f0       	breq	.+46     	; 0x6e0e <digitalWrite+0x54>
    6de0:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    6de2:	81 11       	cpse	r24, r1
    6de4:	85 df       	rcall	.-246    	; 0x6cf0 <turnOffPWM>

	out = portOutputRegister(port);
    6de6:	ec 2f       	mov	r30, r28
    6de8:	f0 e0       	ldi	r31, 0x00	; 0
    6dea:	ee 0f       	add	r30, r30
    6dec:	ff 1f       	adc	r31, r31
    6dee:	e4 56       	subi	r30, 0x64	; 100
    6df0:	fd 4f       	sbci	r31, 0xFD	; 253
    6df2:	a5 91       	lpm	r26, Z+
    6df4:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    6df6:	9f b7       	in	r25, 0x3f	; 63
	cli();
    6df8:	f8 94       	cli

	if (val == LOW) {
    6dfa:	11 11       	cpse	r17, r1
    6dfc:	04 c0       	rjmp	.+8      	; 0x6e06 <digitalWrite+0x4c>
		*out &= ~bit;
    6dfe:	8c 91       	ld	r24, X
    6e00:	d0 95       	com	r29
    6e02:	d8 23       	and	r29, r24
    6e04:	02 c0       	rjmp	.+4      	; 0x6e0a <digitalWrite+0x50>
	} else {
		*out |= bit;
    6e06:	ec 91       	ld	r30, X
    6e08:	de 2b       	or	r29, r30
    6e0a:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    6e0c:	9f bf       	out	0x3f, r25	; 63
}
    6e0e:	df 91       	pop	r29
    6e10:	cf 91       	pop	r28
    6e12:	1f 91       	pop	r17
    6e14:	08 95       	ret

00006e16 <digitalRead>:

int digitalRead(uint8_t pin)
{
    6e16:	cf 93       	push	r28
    6e18:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    6e1a:	28 2f       	mov	r18, r24
    6e1c:	30 e0       	ldi	r19, 0x00	; 0
    6e1e:	f9 01       	movw	r30, r18
    6e20:	ee 5c       	subi	r30, 0xCE	; 206
    6e22:	fd 4f       	sbci	r31, 0xFD	; 253
    6e24:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    6e26:	f9 01       	movw	r30, r18
    6e28:	ee 5a       	subi	r30, 0xAE	; 174
    6e2a:	fd 4f       	sbci	r31, 0xFD	; 253
    6e2c:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    6e2e:	f9 01       	movw	r30, r18
    6e30:	ee 58       	subi	r30, 0x8E	; 142
    6e32:	fd 4f       	sbci	r31, 0xFD	; 253
    6e34:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    6e36:	cc 23       	and	r28, r28
    6e38:	89 f0       	breq	.+34     	; 0x6e5c <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    6e3a:	81 11       	cpse	r24, r1
    6e3c:	59 df       	rcall	.-334    	; 0x6cf0 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    6e3e:	ec 2f       	mov	r30, r28
    6e40:	f0 e0       	ldi	r31, 0x00	; 0
    6e42:	ee 0f       	add	r30, r30
    6e44:	ff 1f       	adc	r31, r31
    6e46:	ee 56       	subi	r30, 0x6E	; 110
    6e48:	fd 4f       	sbci	r31, 0xFD	; 253
    6e4a:	a5 91       	lpm	r26, Z+
    6e4c:	b4 91       	lpm	r27, Z
    6e4e:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    6e50:	ed 23       	and	r30, r29
    6e52:	81 e0       	ldi	r24, 0x01	; 1
    6e54:	90 e0       	ldi	r25, 0x00	; 0
    6e56:	21 f4       	brne	.+8      	; 0x6e60 <digitalRead+0x4a>
    6e58:	80 e0       	ldi	r24, 0x00	; 0
    6e5a:	02 c0       	rjmp	.+4      	; 0x6e60 <digitalRead+0x4a>
    6e5c:	80 e0       	ldi	r24, 0x00	; 0
    6e5e:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    6e60:	df 91       	pop	r29
    6e62:	cf 91       	pop	r28
    6e64:	08 95       	ret

00006e66 <_ZNK6String14StringIfHelperEv>:
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
		*p = toupper(*p);
	}
}
    6e66:	08 95       	ret

00006e68 <_ZN6StringD1Ev>:
    6e68:	fc 01       	movw	r30, r24
    6e6a:	80 81       	ld	r24, Z
    6e6c:	91 81       	ldd	r25, Z+1	; 0x01
    6e6e:	70 c4       	rjmp	.+2272   	; 0x7750 <free>

00006e70 <_ZN6String10invalidateEv>:
    6e70:	cf 93       	push	r28
    6e72:	df 93       	push	r29
    6e74:	ec 01       	movw	r28, r24
    6e76:	88 81       	ld	r24, Y
    6e78:	99 81       	ldd	r25, Y+1	; 0x01
    6e7a:	00 97       	sbiw	r24, 0x00	; 0
    6e7c:	09 f0       	breq	.+2      	; 0x6e80 <_ZN6String10invalidateEv+0x10>
    6e7e:	68 d4       	rcall	.+2256   	; 0x7750 <free>
    6e80:	19 82       	std	Y+1, r1	; 0x01
    6e82:	18 82       	st	Y, r1
    6e84:	1d 82       	std	Y+5, r1	; 0x05
    6e86:	1c 82       	std	Y+4, r1	; 0x04
    6e88:	1b 82       	std	Y+3, r1	; 0x03
    6e8a:	1a 82       	std	Y+2, r1	; 0x02
    6e8c:	df 91       	pop	r29
    6e8e:	cf 91       	pop	r28
    6e90:	08 95       	ret

00006e92 <_ZN6String12changeBufferEj>:
    6e92:	0f 93       	push	r16
    6e94:	1f 93       	push	r17
    6e96:	cf 93       	push	r28
    6e98:	df 93       	push	r29
    6e9a:	ec 01       	movw	r28, r24
    6e9c:	8b 01       	movw	r16, r22
    6e9e:	6f 5f       	subi	r22, 0xFF	; 255
    6ea0:	7f 4f       	sbci	r23, 0xFF	; 255
    6ea2:	88 81       	ld	r24, Y
    6ea4:	99 81       	ldd	r25, Y+1	; 0x01
    6ea6:	dd d4       	rcall	.+2490   	; 0x7862 <realloc>
    6ea8:	00 97       	sbiw	r24, 0x00	; 0
    6eaa:	31 f0       	breq	.+12     	; 0x6eb8 <_ZN6String12changeBufferEj+0x26>
    6eac:	99 83       	std	Y+1, r25	; 0x01
    6eae:	88 83       	st	Y, r24
    6eb0:	1b 83       	std	Y+3, r17	; 0x03
    6eb2:	0a 83       	std	Y+2, r16	; 0x02
    6eb4:	81 e0       	ldi	r24, 0x01	; 1
    6eb6:	01 c0       	rjmp	.+2      	; 0x6eba <_ZN6String12changeBufferEj+0x28>
    6eb8:	80 e0       	ldi	r24, 0x00	; 0
    6eba:	df 91       	pop	r29
    6ebc:	cf 91       	pop	r28
    6ebe:	1f 91       	pop	r17
    6ec0:	0f 91       	pop	r16
    6ec2:	08 95       	ret

00006ec4 <_ZN6String7reserveEj>:
    6ec4:	cf 93       	push	r28
    6ec6:	df 93       	push	r29
    6ec8:	ec 01       	movw	r28, r24
    6eca:	88 81       	ld	r24, Y
    6ecc:	99 81       	ldd	r25, Y+1	; 0x01
    6ece:	89 2b       	or	r24, r25
    6ed0:	29 f0       	breq	.+10     	; 0x6edc <_ZN6String7reserveEj+0x18>
    6ed2:	8a 81       	ldd	r24, Y+2	; 0x02
    6ed4:	9b 81       	ldd	r25, Y+3	; 0x03
    6ed6:	86 17       	cp	r24, r22
    6ed8:	97 07       	cpc	r25, r23
    6eda:	58 f4       	brcc	.+22     	; 0x6ef2 <_ZN6String7reserveEj+0x2e>
    6edc:	ce 01       	movw	r24, r28
    6ede:	d9 df       	rcall	.-78     	; 0x6e92 <_ZN6String12changeBufferEj>
    6ee0:	88 23       	and	r24, r24
    6ee2:	41 f0       	breq	.+16     	; 0x6ef4 <_ZN6String7reserveEj+0x30>
    6ee4:	8c 81       	ldd	r24, Y+4	; 0x04
    6ee6:	9d 81       	ldd	r25, Y+5	; 0x05
    6ee8:	89 2b       	or	r24, r25
    6eea:	19 f4       	brne	.+6      	; 0x6ef2 <_ZN6String7reserveEj+0x2e>
    6eec:	e8 81       	ld	r30, Y
    6eee:	f9 81       	ldd	r31, Y+1	; 0x01
    6ef0:	10 82       	st	Z, r1
    6ef2:	81 e0       	ldi	r24, 0x01	; 1
    6ef4:	df 91       	pop	r29
    6ef6:	cf 91       	pop	r28
    6ef8:	08 95       	ret

00006efa <_ZN6String4copyEPKcj>:
    6efa:	ef 92       	push	r14
    6efc:	ff 92       	push	r15
    6efe:	0f 93       	push	r16
    6f00:	1f 93       	push	r17
    6f02:	cf 93       	push	r28
    6f04:	df 93       	push	r29
    6f06:	ec 01       	movw	r28, r24
    6f08:	7b 01       	movw	r14, r22
    6f0a:	8a 01       	movw	r16, r20
    6f0c:	ba 01       	movw	r22, r20
    6f0e:	da df       	rcall	.-76     	; 0x6ec4 <_ZN6String7reserveEj>
    6f10:	81 11       	cpse	r24, r1
    6f12:	03 c0       	rjmp	.+6      	; 0x6f1a <_ZN6String4copyEPKcj+0x20>
    6f14:	ce 01       	movw	r24, r28
    6f16:	ac df       	rcall	.-168    	; 0x6e70 <_ZN6String10invalidateEv>
    6f18:	06 c0       	rjmp	.+12     	; 0x6f26 <_ZN6String4copyEPKcj+0x2c>
    6f1a:	1d 83       	std	Y+5, r17	; 0x05
    6f1c:	0c 83       	std	Y+4, r16	; 0x04
    6f1e:	b7 01       	movw	r22, r14
    6f20:	88 81       	ld	r24, Y
    6f22:	99 81       	ldd	r25, Y+1	; 0x01
    6f24:	a5 d5       	rcall	.+2890   	; 0x7a70 <strcpy>
    6f26:	ce 01       	movw	r24, r28
    6f28:	df 91       	pop	r29
    6f2a:	cf 91       	pop	r28
    6f2c:	1f 91       	pop	r17
    6f2e:	0f 91       	pop	r16
    6f30:	ff 90       	pop	r15
    6f32:	ef 90       	pop	r14
    6f34:	08 95       	ret

00006f36 <_ZN6StringC1EPKc>:
    6f36:	fc 01       	movw	r30, r24
    6f38:	11 82       	std	Z+1, r1	; 0x01
    6f3a:	10 82       	st	Z, r1
    6f3c:	13 82       	std	Z+3, r1	; 0x03
    6f3e:	12 82       	std	Z+2, r1	; 0x02
    6f40:	15 82       	std	Z+5, r1	; 0x05
    6f42:	14 82       	std	Z+4, r1	; 0x04
    6f44:	61 15       	cp	r22, r1
    6f46:	71 05       	cpc	r23, r1
    6f48:	49 f0       	breq	.+18     	; 0x6f5c <_ZN6StringC1EPKc+0x26>
    6f4a:	fb 01       	movw	r30, r22
    6f4c:	01 90       	ld	r0, Z+
    6f4e:	00 20       	and	r0, r0
    6f50:	e9 f7       	brne	.-6      	; 0x6f4c <_ZN6StringC1EPKc+0x16>
    6f52:	31 97       	sbiw	r30, 0x01	; 1
    6f54:	af 01       	movw	r20, r30
    6f56:	46 1b       	sub	r20, r22
    6f58:	57 0b       	sbc	r21, r23
    6f5a:	cf cf       	rjmp	.-98     	; 0x6efa <_ZN6String4copyEPKcj>
    6f5c:	08 95       	ret

00006f5e <_ZN6String4moveERS_>:
    6f5e:	0f 93       	push	r16
    6f60:	1f 93       	push	r17
    6f62:	cf 93       	push	r28
    6f64:	df 93       	push	r29
    6f66:	8c 01       	movw	r16, r24
    6f68:	eb 01       	movw	r28, r22
    6f6a:	fc 01       	movw	r30, r24
    6f6c:	80 81       	ld	r24, Z
    6f6e:	91 81       	ldd	r25, Z+1	; 0x01
    6f70:	00 97       	sbiw	r24, 0x00	; 0
    6f72:	c1 f0       	breq	.+48     	; 0x6fa4 <_ZN6String4moveERS_+0x46>
    6f74:	68 81       	ld	r22, Y
    6f76:	79 81       	ldd	r23, Y+1	; 0x01
    6f78:	61 15       	cp	r22, r1
    6f7a:	71 05       	cpc	r23, r1
    6f7c:	91 f0       	breq	.+36     	; 0x6fa2 <_ZN6String4moveERS_+0x44>
    6f7e:	23 e3       	ldi	r18, 0x33	; 51
    6f80:	37 e3       	ldi	r19, 0x37	; 55
    6f82:	23 2b       	or	r18, r19
    6f84:	71 f0       	breq	.+28     	; 0x6fa2 <_ZN6String4moveERS_+0x44>
    6f86:	42 81       	ldd	r20, Z+2	; 0x02
    6f88:	53 81       	ldd	r21, Z+3	; 0x03
    6f8a:	2c 81       	ldd	r18, Y+4	; 0x04
    6f8c:	3d 81       	ldd	r19, Y+5	; 0x05
    6f8e:	42 17       	cp	r20, r18
    6f90:	53 07       	cpc	r21, r19
    6f92:	38 f0       	brcs	.+14     	; 0x6fa2 <_ZN6String4moveERS_+0x44>
    6f94:	6d d5       	rcall	.+2778   	; 0x7a70 <strcpy>
    6f96:	8c 81       	ldd	r24, Y+4	; 0x04
    6f98:	9d 81       	ldd	r25, Y+5	; 0x05
    6f9a:	f8 01       	movw	r30, r16
    6f9c:	95 83       	std	Z+5, r25	; 0x05
    6f9e:	84 83       	std	Z+4, r24	; 0x04
    6fa0:	12 c0       	rjmp	.+36     	; 0x6fc6 <_ZN6String4moveERS_+0x68>
    6fa2:	d6 d3       	rcall	.+1964   	; 0x7750 <free>
    6fa4:	88 81       	ld	r24, Y
    6fa6:	99 81       	ldd	r25, Y+1	; 0x01
    6fa8:	f8 01       	movw	r30, r16
    6faa:	91 83       	std	Z+1, r25	; 0x01
    6fac:	80 83       	st	Z, r24
    6fae:	8a 81       	ldd	r24, Y+2	; 0x02
    6fb0:	9b 81       	ldd	r25, Y+3	; 0x03
    6fb2:	93 83       	std	Z+3, r25	; 0x03
    6fb4:	82 83       	std	Z+2, r24	; 0x02
    6fb6:	8c 81       	ldd	r24, Y+4	; 0x04
    6fb8:	9d 81       	ldd	r25, Y+5	; 0x05
    6fba:	95 83       	std	Z+5, r25	; 0x05
    6fbc:	84 83       	std	Z+4, r24	; 0x04
    6fbe:	19 82       	std	Y+1, r1	; 0x01
    6fc0:	18 82       	st	Y, r1
    6fc2:	1b 82       	std	Y+3, r1	; 0x03
    6fc4:	1a 82       	std	Y+2, r1	; 0x02
    6fc6:	1d 82       	std	Y+5, r1	; 0x05
    6fc8:	1c 82       	std	Y+4, r1	; 0x04
    6fca:	df 91       	pop	r29
    6fcc:	cf 91       	pop	r28
    6fce:	1f 91       	pop	r17
    6fd0:	0f 91       	pop	r16
    6fd2:	08 95       	ret

00006fd4 <_ZN6StringC1EOS_>:
    6fd4:	fc 01       	movw	r30, r24
    6fd6:	11 82       	std	Z+1, r1	; 0x01
    6fd8:	10 82       	st	Z, r1
    6fda:	13 82       	std	Z+3, r1	; 0x03
    6fdc:	12 82       	std	Z+2, r1	; 0x02
    6fde:	15 82       	std	Z+5, r1	; 0x05
    6fe0:	14 82       	std	Z+4, r1	; 0x04
    6fe2:	bd cf       	rjmp	.-134    	; 0x6f5e <_ZN6String4moveERS_>

00006fe4 <_ZN6StringaSERKS_>:
    6fe4:	cf 93       	push	r28
    6fe6:	df 93       	push	r29
    6fe8:	ec 01       	movw	r28, r24
    6fea:	fb 01       	movw	r30, r22
    6fec:	86 17       	cp	r24, r22
    6fee:	97 07       	cpc	r25, r23
    6ff0:	51 f0       	breq	.+20     	; 0x7006 <_ZN6StringaSERKS_+0x22>
    6ff2:	60 81       	ld	r22, Z
    6ff4:	71 81       	ldd	r23, Z+1	; 0x01
    6ff6:	61 15       	cp	r22, r1
    6ff8:	71 05       	cpc	r23, r1
    6ffa:	21 f0       	breq	.+8      	; 0x7004 <_ZN6StringaSERKS_+0x20>
    6ffc:	44 81       	ldd	r20, Z+4	; 0x04
    6ffe:	55 81       	ldd	r21, Z+5	; 0x05
    7000:	7c df       	rcall	.-264    	; 0x6efa <_ZN6String4copyEPKcj>
    7002:	01 c0       	rjmp	.+2      	; 0x7006 <_ZN6StringaSERKS_+0x22>
    7004:	35 df       	rcall	.-406    	; 0x6e70 <_ZN6String10invalidateEv>
    7006:	ce 01       	movw	r24, r28
    7008:	df 91       	pop	r29
    700a:	cf 91       	pop	r28
    700c:	08 95       	ret

0000700e <_ZN6StringC1ERKS_>:
    700e:	fc 01       	movw	r30, r24
    7010:	11 82       	std	Z+1, r1	; 0x01
    7012:	10 82       	st	Z, r1
    7014:	13 82       	std	Z+3, r1	; 0x03
    7016:	12 82       	std	Z+2, r1	; 0x02
    7018:	15 82       	std	Z+5, r1	; 0x05
    701a:	14 82       	std	Z+4, r1	; 0x04
    701c:	e3 cf       	rjmp	.-58     	; 0x6fe4 <_ZN6StringaSERKS_>

0000701e <_ZN6StringaSEOS_>:
    701e:	cf 93       	push	r28
    7020:	df 93       	push	r29
    7022:	ec 01       	movw	r28, r24
    7024:	86 17       	cp	r24, r22
    7026:	97 07       	cpc	r25, r23
    7028:	09 f0       	breq	.+2      	; 0x702c <_ZN6StringaSEOS_+0xe>
    702a:	99 df       	rcall	.-206    	; 0x6f5e <_ZN6String4moveERS_>
    702c:	ce 01       	movw	r24, r28
    702e:	df 91       	pop	r29
    7030:	cf 91       	pop	r28
    7032:	08 95       	ret

00007034 <_ZN6StringaSEPKc>:
    7034:	cf 93       	push	r28
    7036:	df 93       	push	r29
    7038:	ec 01       	movw	r28, r24
    703a:	61 15       	cp	r22, r1
    703c:	71 05       	cpc	r23, r1
    703e:	51 f0       	breq	.+20     	; 0x7054 <_ZN6StringaSEPKc+0x20>
    7040:	fb 01       	movw	r30, r22
    7042:	01 90       	ld	r0, Z+
    7044:	00 20       	and	r0, r0
    7046:	e9 f7       	brne	.-6      	; 0x7042 <_ZN6StringaSEPKc+0xe>
    7048:	31 97       	sbiw	r30, 0x01	; 1
    704a:	af 01       	movw	r20, r30
    704c:	46 1b       	sub	r20, r22
    704e:	57 0b       	sbc	r21, r23
    7050:	54 df       	rcall	.-344    	; 0x6efa <_ZN6String4copyEPKcj>
    7052:	01 c0       	rjmp	.+2      	; 0x7056 <_ZN6StringaSEPKc+0x22>
    7054:	0d df       	rcall	.-486    	; 0x6e70 <_ZN6String10invalidateEv>
    7056:	ce 01       	movw	r24, r28
    7058:	df 91       	pop	r29
    705a:	cf 91       	pop	r28
    705c:	08 95       	ret

0000705e <_ZN6StringC1Ec>:
    705e:	cf 93       	push	r28
    7060:	df 93       	push	r29
    7062:	00 d0       	rcall	.+0      	; 0x7064 <_ZN6StringC1Ec+0x6>
    7064:	cd b7       	in	r28, 0x3d	; 61
    7066:	de b7       	in	r29, 0x3e	; 62
    7068:	fc 01       	movw	r30, r24
    706a:	11 82       	std	Z+1, r1	; 0x01
    706c:	10 82       	st	Z, r1
    706e:	13 82       	std	Z+3, r1	; 0x03
    7070:	12 82       	std	Z+2, r1	; 0x02
    7072:	15 82       	std	Z+5, r1	; 0x05
    7074:	14 82       	std	Z+4, r1	; 0x04
    7076:	69 83       	std	Y+1, r22	; 0x01
    7078:	1a 82       	std	Y+2, r1	; 0x02
    707a:	be 01       	movw	r22, r28
    707c:	6f 5f       	subi	r22, 0xFF	; 255
    707e:	7f 4f       	sbci	r23, 0xFF	; 255
    7080:	d9 df       	rcall	.-78     	; 0x7034 <_ZN6StringaSEPKc>
    7082:	0f 90       	pop	r0
    7084:	0f 90       	pop	r0
    7086:	df 91       	pop	r29
    7088:	cf 91       	pop	r28
    708a:	08 95       	ret

0000708c <_ZN6StringC1Ehh>:
    708c:	0f 93       	push	r16
    708e:	1f 93       	push	r17
    7090:	cf 93       	push	r28
    7092:	df 93       	push	r29
    7094:	cd b7       	in	r28, 0x3d	; 61
    7096:	de b7       	in	r29, 0x3e	; 62
    7098:	29 97       	sbiw	r28, 0x09	; 9
    709a:	0f b6       	in	r0, 0x3f	; 63
    709c:	f8 94       	cli
    709e:	de bf       	out	0x3e, r29	; 62
    70a0:	0f be       	out	0x3f, r0	; 63
    70a2:	cd bf       	out	0x3d, r28	; 61
    70a4:	8c 01       	movw	r16, r24
    70a6:	86 2f       	mov	r24, r22
    70a8:	f8 01       	movw	r30, r16
    70aa:	11 82       	std	Z+1, r1	; 0x01
    70ac:	10 82       	st	Z, r1
    70ae:	13 82       	std	Z+3, r1	; 0x03
    70b0:	12 82       	std	Z+2, r1	; 0x02
    70b2:	15 82       	std	Z+5, r1	; 0x05
    70b4:	14 82       	std	Z+4, r1	; 0x04
    70b6:	50 e0       	ldi	r21, 0x00	; 0
    70b8:	be 01       	movw	r22, r28
    70ba:	6f 5f       	subi	r22, 0xFF	; 255
    70bc:	7f 4f       	sbci	r23, 0xFF	; 255
    70be:	90 e0       	ldi	r25, 0x00	; 0
    70c0:	3a d5       	rcall	.+2676   	; 0x7b36 <utoa>
    70c2:	be 01       	movw	r22, r28
    70c4:	6f 5f       	subi	r22, 0xFF	; 255
    70c6:	7f 4f       	sbci	r23, 0xFF	; 255
    70c8:	c8 01       	movw	r24, r16
    70ca:	b4 df       	rcall	.-152    	; 0x7034 <_ZN6StringaSEPKc>
    70cc:	29 96       	adiw	r28, 0x09	; 9
    70ce:	0f b6       	in	r0, 0x3f	; 63
    70d0:	f8 94       	cli
    70d2:	de bf       	out	0x3e, r29	; 62
    70d4:	0f be       	out	0x3f, r0	; 63
    70d6:	cd bf       	out	0x3d, r28	; 61
    70d8:	df 91       	pop	r29
    70da:	cf 91       	pop	r28
    70dc:	1f 91       	pop	r17
    70de:	0f 91       	pop	r16
    70e0:	08 95       	ret

000070e2 <_ZN6StringC1Eih>:
    70e2:	0f 93       	push	r16
    70e4:	1f 93       	push	r17
    70e6:	cf 93       	push	r28
    70e8:	df 93       	push	r29
    70ea:	cd b7       	in	r28, 0x3d	; 61
    70ec:	de b7       	in	r29, 0x3e	; 62
    70ee:	62 97       	sbiw	r28, 0x12	; 18
    70f0:	0f b6       	in	r0, 0x3f	; 63
    70f2:	f8 94       	cli
    70f4:	de bf       	out	0x3e, r29	; 62
    70f6:	0f be       	out	0x3f, r0	; 63
    70f8:	cd bf       	out	0x3d, r28	; 61
    70fa:	8c 01       	movw	r16, r24
    70fc:	cb 01       	movw	r24, r22
    70fe:	f8 01       	movw	r30, r16
    7100:	11 82       	std	Z+1, r1	; 0x01
    7102:	10 82       	st	Z, r1
    7104:	13 82       	std	Z+3, r1	; 0x03
    7106:	12 82       	std	Z+2, r1	; 0x02
    7108:	15 82       	std	Z+5, r1	; 0x05
    710a:	14 82       	std	Z+4, r1	; 0x04
    710c:	50 e0       	ldi	r21, 0x00	; 0
    710e:	be 01       	movw	r22, r28
    7110:	6f 5f       	subi	r22, 0xFF	; 255
    7112:	7f 4f       	sbci	r23, 0xFF	; 255
    7114:	d1 d4       	rcall	.+2466   	; 0x7ab8 <itoa>
    7116:	be 01       	movw	r22, r28
    7118:	6f 5f       	subi	r22, 0xFF	; 255
    711a:	7f 4f       	sbci	r23, 0xFF	; 255
    711c:	c8 01       	movw	r24, r16
    711e:	8a df       	rcall	.-236    	; 0x7034 <_ZN6StringaSEPKc>
    7120:	62 96       	adiw	r28, 0x12	; 18
    7122:	0f b6       	in	r0, 0x3f	; 63
    7124:	f8 94       	cli
    7126:	de bf       	out	0x3e, r29	; 62
    7128:	0f be       	out	0x3f, r0	; 63
    712a:	cd bf       	out	0x3d, r28	; 61
    712c:	df 91       	pop	r29
    712e:	cf 91       	pop	r28
    7130:	1f 91       	pop	r17
    7132:	0f 91       	pop	r16
    7134:	08 95       	ret

00007136 <_ZN6StringC1Ejh>:
    7136:	0f 93       	push	r16
    7138:	1f 93       	push	r17
    713a:	cf 93       	push	r28
    713c:	df 93       	push	r29
    713e:	cd b7       	in	r28, 0x3d	; 61
    7140:	de b7       	in	r29, 0x3e	; 62
    7142:	61 97       	sbiw	r28, 0x11	; 17
    7144:	0f b6       	in	r0, 0x3f	; 63
    7146:	f8 94       	cli
    7148:	de bf       	out	0x3e, r29	; 62
    714a:	0f be       	out	0x3f, r0	; 63
    714c:	cd bf       	out	0x3d, r28	; 61
    714e:	8c 01       	movw	r16, r24
    7150:	cb 01       	movw	r24, r22
    7152:	f8 01       	movw	r30, r16
    7154:	11 82       	std	Z+1, r1	; 0x01
    7156:	10 82       	st	Z, r1
    7158:	13 82       	std	Z+3, r1	; 0x03
    715a:	12 82       	std	Z+2, r1	; 0x02
    715c:	15 82       	std	Z+5, r1	; 0x05
    715e:	14 82       	std	Z+4, r1	; 0x04
    7160:	50 e0       	ldi	r21, 0x00	; 0
    7162:	be 01       	movw	r22, r28
    7164:	6f 5f       	subi	r22, 0xFF	; 255
    7166:	7f 4f       	sbci	r23, 0xFF	; 255
    7168:	e6 d4       	rcall	.+2508   	; 0x7b36 <utoa>
    716a:	be 01       	movw	r22, r28
    716c:	6f 5f       	subi	r22, 0xFF	; 255
    716e:	7f 4f       	sbci	r23, 0xFF	; 255
    7170:	c8 01       	movw	r24, r16
    7172:	60 df       	rcall	.-320    	; 0x7034 <_ZN6StringaSEPKc>
    7174:	61 96       	adiw	r28, 0x11	; 17
    7176:	0f b6       	in	r0, 0x3f	; 63
    7178:	f8 94       	cli
    717a:	de bf       	out	0x3e, r29	; 62
    717c:	0f be       	out	0x3f, r0	; 63
    717e:	cd bf       	out	0x3d, r28	; 61
    7180:	df 91       	pop	r29
    7182:	cf 91       	pop	r28
    7184:	1f 91       	pop	r17
    7186:	0f 91       	pop	r16
    7188:	08 95       	ret

0000718a <_ZN6StringC1Emh>:
    718a:	0f 93       	push	r16
    718c:	1f 93       	push	r17
    718e:	cf 93       	push	r28
    7190:	df 93       	push	r29
    7192:	cd b7       	in	r28, 0x3d	; 61
    7194:	de b7       	in	r29, 0x3e	; 62
    7196:	a1 97       	sbiw	r28, 0x21	; 33
    7198:	0f b6       	in	r0, 0x3f	; 63
    719a:	f8 94       	cli
    719c:	de bf       	out	0x3e, r29	; 62
    719e:	0f be       	out	0x3f, r0	; 63
    71a0:	cd bf       	out	0x3d, r28	; 61
    71a2:	8c 01       	movw	r16, r24
    71a4:	cb 01       	movw	r24, r22
    71a6:	ba 01       	movw	r22, r20
    71a8:	f8 01       	movw	r30, r16
    71aa:	11 82       	std	Z+1, r1	; 0x01
    71ac:	10 82       	st	Z, r1
    71ae:	13 82       	std	Z+3, r1	; 0x03
    71b0:	12 82       	std	Z+2, r1	; 0x02
    71b2:	15 82       	std	Z+5, r1	; 0x05
    71b4:	14 82       	std	Z+4, r1	; 0x04
    71b6:	30 e0       	ldi	r19, 0x00	; 0
    71b8:	ae 01       	movw	r20, r28
    71ba:	4f 5f       	subi	r20, 0xFF	; 255
    71bc:	5f 4f       	sbci	r21, 0xFF	; 255
    71be:	90 d4       	rcall	.+2336   	; 0x7ae0 <ultoa>
    71c0:	be 01       	movw	r22, r28
    71c2:	6f 5f       	subi	r22, 0xFF	; 255
    71c4:	7f 4f       	sbci	r23, 0xFF	; 255
    71c6:	c8 01       	movw	r24, r16
    71c8:	35 df       	rcall	.-406    	; 0x7034 <_ZN6StringaSEPKc>
    71ca:	a1 96       	adiw	r28, 0x21	; 33
    71cc:	0f b6       	in	r0, 0x3f	; 63
    71ce:	f8 94       	cli
    71d0:	de bf       	out	0x3e, r29	; 62
    71d2:	0f be       	out	0x3f, r0	; 63
    71d4:	cd bf       	out	0x3d, r28	; 61
    71d6:	df 91       	pop	r29
    71d8:	cf 91       	pop	r28
    71da:	1f 91       	pop	r17
    71dc:	0f 91       	pop	r16
    71de:	08 95       	ret

000071e0 <_ZN6StringC1Edh>:
    71e0:	ef 92       	push	r14
    71e2:	ff 92       	push	r15
    71e4:	0f 93       	push	r16
    71e6:	1f 93       	push	r17
    71e8:	cf 93       	push	r28
    71ea:	df 93       	push	r29
    71ec:	cd b7       	in	r28, 0x3d	; 61
    71ee:	de b7       	in	r29, 0x3e	; 62
    71f0:	a1 97       	sbiw	r28, 0x21	; 33
    71f2:	0f b6       	in	r0, 0x3f	; 63
    71f4:	f8 94       	cli
    71f6:	de bf       	out	0x3e, r29	; 62
    71f8:	0f be       	out	0x3f, r0	; 63
    71fa:	cd bf       	out	0x3d, r28	; 61
    71fc:	7c 01       	movw	r14, r24
    71fe:	cb 01       	movw	r24, r22
    7200:	ba 01       	movw	r22, r20
    7202:	f7 01       	movw	r30, r14
    7204:	11 82       	std	Z+1, r1	; 0x01
    7206:	10 82       	st	Z, r1
    7208:	13 82       	std	Z+3, r1	; 0x03
    720a:	12 82       	std	Z+2, r1	; 0x02
    720c:	15 82       	std	Z+5, r1	; 0x05
    720e:	14 82       	std	Z+4, r1	; 0x04
    7210:	42 e0       	ldi	r20, 0x02	; 2
    7212:	42 0f       	add	r20, r18
    7214:	8e 01       	movw	r16, r28
    7216:	0f 5f       	subi	r16, 0xFF	; 255
    7218:	1f 4f       	sbci	r17, 0xFF	; 255
    721a:	e3 d1       	rcall	.+966    	; 0x75e2 <dtostrf>
    721c:	bc 01       	movw	r22, r24
    721e:	c7 01       	movw	r24, r14
    7220:	09 df       	rcall	.-494    	; 0x7034 <_ZN6StringaSEPKc>
    7222:	a1 96       	adiw	r28, 0x21	; 33
    7224:	0f b6       	in	r0, 0x3f	; 63
    7226:	f8 94       	cli
    7228:	de bf       	out	0x3e, r29	; 62
    722a:	0f be       	out	0x3f, r0	; 63
    722c:	cd bf       	out	0x3d, r28	; 61
    722e:	df 91       	pop	r29
    7230:	cf 91       	pop	r28
    7232:	1f 91       	pop	r17
    7234:	0f 91       	pop	r16
    7236:	ff 90       	pop	r15
    7238:	ef 90       	pop	r14
    723a:	08 95       	ret

0000723c <_ZN6String6concatEPKcj>:
    723c:	ef 92       	push	r14
    723e:	ff 92       	push	r15
    7240:	0f 93       	push	r16
    7242:	1f 93       	push	r17
    7244:	cf 93       	push	r28
    7246:	df 93       	push	r29
    7248:	61 15       	cp	r22, r1
    724a:	71 05       	cpc	r23, r1
    724c:	11 f4       	brne	.+4      	; 0x7252 <_ZN6String6concatEPKcj+0x16>
    724e:	80 e0       	ldi	r24, 0x00	; 0
    7250:	1a c0       	rjmp	.+52     	; 0x7286 <_ZN6String6concatEPKcj+0x4a>
    7252:	41 15       	cp	r20, r1
    7254:	51 05       	cpc	r21, r1
    7256:	b1 f0       	breq	.+44     	; 0x7284 <_ZN6String6concatEPKcj+0x48>
    7258:	7b 01       	movw	r14, r22
    725a:	ec 01       	movw	r28, r24
    725c:	8c 81       	ldd	r24, Y+4	; 0x04
    725e:	9d 81       	ldd	r25, Y+5	; 0x05
    7260:	8a 01       	movw	r16, r20
    7262:	08 0f       	add	r16, r24
    7264:	19 1f       	adc	r17, r25
    7266:	b8 01       	movw	r22, r16
    7268:	ce 01       	movw	r24, r28
    726a:	2c de       	rcall	.-936    	; 0x6ec4 <_ZN6String7reserveEj>
    726c:	88 23       	and	r24, r24
    726e:	79 f3       	breq	.-34     	; 0x724e <_ZN6String6concatEPKcj+0x12>
    7270:	28 81       	ld	r18, Y
    7272:	39 81       	ldd	r19, Y+1	; 0x01
    7274:	8c 81       	ldd	r24, Y+4	; 0x04
    7276:	9d 81       	ldd	r25, Y+5	; 0x05
    7278:	b7 01       	movw	r22, r14
    727a:	82 0f       	add	r24, r18
    727c:	93 1f       	adc	r25, r19
    727e:	f8 d3       	rcall	.+2032   	; 0x7a70 <strcpy>
    7280:	1d 83       	std	Y+5, r17	; 0x05
    7282:	0c 83       	std	Y+4, r16	; 0x04
    7284:	81 e0       	ldi	r24, 0x01	; 1
    7286:	df 91       	pop	r29
    7288:	cf 91       	pop	r28
    728a:	1f 91       	pop	r17
    728c:	0f 91       	pop	r16
    728e:	ff 90       	pop	r15
    7290:	ef 90       	pop	r14
    7292:	08 95       	ret

00007294 <_ZN6String6concatERKS_>:
    7294:	fb 01       	movw	r30, r22
    7296:	44 81       	ldd	r20, Z+4	; 0x04
    7298:	55 81       	ldd	r21, Z+5	; 0x05
    729a:	60 81       	ld	r22, Z
    729c:	71 81       	ldd	r23, Z+1	; 0x01
    729e:	ce cf       	rjmp	.-100    	; 0x723c <_ZN6String6concatEPKcj>

000072a0 <_ZN6String6concatEPKc>:
    72a0:	61 15       	cp	r22, r1
    72a2:	71 05       	cpc	r23, r1
    72a4:	49 f0       	breq	.+18     	; 0x72b8 <_ZN6String6concatEPKc+0x18>
    72a6:	fb 01       	movw	r30, r22
    72a8:	01 90       	ld	r0, Z+
    72aa:	00 20       	and	r0, r0
    72ac:	e9 f7       	brne	.-6      	; 0x72a8 <_ZN6String6concatEPKc+0x8>
    72ae:	31 97       	sbiw	r30, 0x01	; 1
    72b0:	af 01       	movw	r20, r30
    72b2:	46 1b       	sub	r20, r22
    72b4:	57 0b       	sbc	r21, r23
    72b6:	c2 cf       	rjmp	.-124    	; 0x723c <_ZN6String6concatEPKcj>
    72b8:	80 e0       	ldi	r24, 0x00	; 0
    72ba:	08 95       	ret

000072bc <_ZN6String6concatEc>:
    72bc:	cf 93       	push	r28
    72be:	df 93       	push	r29
    72c0:	00 d0       	rcall	.+0      	; 0x72c2 <_ZN6String6concatEc+0x6>
    72c2:	cd b7       	in	r28, 0x3d	; 61
    72c4:	de b7       	in	r29, 0x3e	; 62
    72c6:	69 83       	std	Y+1, r22	; 0x01
    72c8:	1a 82       	std	Y+2, r1	; 0x02
    72ca:	41 e0       	ldi	r20, 0x01	; 1
    72cc:	50 e0       	ldi	r21, 0x00	; 0
    72ce:	be 01       	movw	r22, r28
    72d0:	6f 5f       	subi	r22, 0xFF	; 255
    72d2:	7f 4f       	sbci	r23, 0xFF	; 255
    72d4:	b3 df       	rcall	.-154    	; 0x723c <_ZN6String6concatEPKcj>
    72d6:	0f 90       	pop	r0
    72d8:	0f 90       	pop	r0
    72da:	df 91       	pop	r29
    72dc:	cf 91       	pop	r28
    72de:	08 95       	ret

000072e0 <_ZplRK15StringSumHelperRK6String>:
    72e0:	cf 93       	push	r28
    72e2:	df 93       	push	r29
    72e4:	ec 01       	movw	r28, r24
    72e6:	fb 01       	movw	r30, r22
    72e8:	44 81       	ldd	r20, Z+4	; 0x04
    72ea:	55 81       	ldd	r21, Z+5	; 0x05
    72ec:	60 81       	ld	r22, Z
    72ee:	71 81       	ldd	r23, Z+1	; 0x01
    72f0:	a5 df       	rcall	.-182    	; 0x723c <_ZN6String6concatEPKcj>
    72f2:	81 11       	cpse	r24, r1
    72f4:	02 c0       	rjmp	.+4      	; 0x72fa <_ZplRK15StringSumHelperRK6String+0x1a>
    72f6:	ce 01       	movw	r24, r28
    72f8:	bb dd       	rcall	.-1162   	; 0x6e70 <_ZN6String10invalidateEv>
    72fa:	ce 01       	movw	r24, r28
    72fc:	df 91       	pop	r29
    72fe:	cf 91       	pop	r28
    7300:	08 95       	ret

00007302 <_ZplRK15StringSumHelperPKc>:
    7302:	cf 93       	push	r28
    7304:	df 93       	push	r29
    7306:	ec 01       	movw	r28, r24
    7308:	61 15       	cp	r22, r1
    730a:	71 05       	cpc	r23, r1
    730c:	59 f0       	breq	.+22     	; 0x7324 <_ZplRK15StringSumHelperPKc+0x22>
    730e:	fb 01       	movw	r30, r22
    7310:	01 90       	ld	r0, Z+
    7312:	00 20       	and	r0, r0
    7314:	e9 f7       	brne	.-6      	; 0x7310 <_ZplRK15StringSumHelperPKc+0xe>
    7316:	31 97       	sbiw	r30, 0x01	; 1
    7318:	af 01       	movw	r20, r30
    731a:	46 1b       	sub	r20, r22
    731c:	57 0b       	sbc	r21, r23
    731e:	8e df       	rcall	.-228    	; 0x723c <_ZN6String6concatEPKcj>
    7320:	81 11       	cpse	r24, r1
    7322:	02 c0       	rjmp	.+4      	; 0x7328 <_ZplRK15StringSumHelperPKc+0x26>
    7324:	ce 01       	movw	r24, r28
    7326:	a4 dd       	rcall	.-1208   	; 0x6e70 <_ZN6String10invalidateEv>
    7328:	ce 01       	movw	r24, r28
    732a:	df 91       	pop	r29
    732c:	cf 91       	pop	r28
    732e:	08 95       	ret

00007330 <_ZplRK15StringSumHelperc>:
    7330:	cf 93       	push	r28
    7332:	df 93       	push	r29
    7334:	ec 01       	movw	r28, r24
    7336:	c2 df       	rcall	.-124    	; 0x72bc <_ZN6String6concatEc>
    7338:	81 11       	cpse	r24, r1
    733a:	02 c0       	rjmp	.+4      	; 0x7340 <_ZplRK15StringSumHelperc+0x10>
    733c:	ce 01       	movw	r24, r28
    733e:	98 dd       	rcall	.-1232   	; 0x6e70 <_ZN6String10invalidateEv>
    7340:	ce 01       	movw	r24, r28
    7342:	df 91       	pop	r29
    7344:	cf 91       	pop	r28
    7346:	08 95       	ret

00007348 <_ZNK6String6equalsEPKc>:
    7348:	fc 01       	movw	r30, r24
    734a:	24 81       	ldd	r18, Z+4	; 0x04
    734c:	35 81       	ldd	r19, Z+5	; 0x05
    734e:	23 2b       	or	r18, r19
    7350:	31 f4       	brne	.+12     	; 0x735e <_ZNK6String6equalsEPKc+0x16>
    7352:	21 e0       	ldi	r18, 0x01	; 1
    7354:	61 15       	cp	r22, r1
    7356:	71 05       	cpc	r23, r1
    7358:	99 f0       	breq	.+38     	; 0x7380 <_ZNK6String6equalsEPKc+0x38>
    735a:	fb 01       	movw	r30, r22
    735c:	08 c0       	rjmp	.+16     	; 0x736e <_ZNK6String6equalsEPKc+0x26>
    735e:	fc 01       	movw	r30, r24
    7360:	80 81       	ld	r24, Z
    7362:	91 81       	ldd	r25, Z+1	; 0x01
    7364:	61 15       	cp	r22, r1
    7366:	71 05       	cpc	r23, r1
    7368:	31 f4       	brne	.+12     	; 0x7376 <_ZNK6String6equalsEPKc+0x2e>
    736a:	21 e0       	ldi	r18, 0x01	; 1
    736c:	fc 01       	movw	r30, r24
    736e:	80 81       	ld	r24, Z
    7370:	88 23       	and	r24, r24
    7372:	31 f0       	breq	.+12     	; 0x7380 <_ZNK6String6equalsEPKc+0x38>
    7374:	04 c0       	rjmp	.+8      	; 0x737e <_ZNK6String6equalsEPKc+0x36>
    7376:	73 d3       	rcall	.+1766   	; 0x7a5e <strcmp>
    7378:	21 e0       	ldi	r18, 0x01	; 1
    737a:	89 2b       	or	r24, r25
    737c:	09 f0       	breq	.+2      	; 0x7380 <_ZNK6String6equalsEPKc+0x38>
    737e:	20 e0       	ldi	r18, 0x00	; 0
    7380:	82 2f       	mov	r24, r18
    7382:	08 95       	ret

00007384 <_ZNK6String8getBytesEPhjj>:
    7384:	0f 93       	push	r16
    7386:	1f 93       	push	r17
    7388:	cf 93       	push	r28
    738a:	df 93       	push	r29
    738c:	41 15       	cp	r20, r1
    738e:	51 05       	cpc	r21, r1
    7390:	11 f1       	breq	.+68     	; 0x73d6 <_ZNK6String8getBytesEPhjj+0x52>
    7392:	61 15       	cp	r22, r1
    7394:	71 05       	cpc	r23, r1
    7396:	f9 f0       	breq	.+62     	; 0x73d6 <_ZNK6String8getBytesEPhjj+0x52>
    7398:	dc 01       	movw	r26, r24
    739a:	14 96       	adiw	r26, 0x04	; 4
    739c:	ed 91       	ld	r30, X+
    739e:	fc 91       	ld	r31, X
    73a0:	15 97       	sbiw	r26, 0x05	; 5
    73a2:	2e 17       	cp	r18, r30
    73a4:	3f 07       	cpc	r19, r31
    73a6:	18 f0       	brcs	.+6      	; 0x73ae <_ZNK6String8getBytesEPhjj+0x2a>
    73a8:	fb 01       	movw	r30, r22
    73aa:	10 82       	st	Z, r1
    73ac:	14 c0       	rjmp	.+40     	; 0x73d6 <_ZNK6String8getBytesEPhjj+0x52>
    73ae:	e2 1b       	sub	r30, r18
    73b0:	f3 0b       	sbc	r31, r19
    73b2:	ea 01       	movw	r28, r20
    73b4:	21 97       	sbiw	r28, 0x01	; 1
    73b6:	ec 17       	cp	r30, r28
    73b8:	fd 07       	cpc	r31, r29
    73ba:	08 f4       	brcc	.+2      	; 0x73be <_ZNK6String8getBytesEPhjj+0x3a>
    73bc:	ef 01       	movw	r28, r30
    73be:	8b 01       	movw	r16, r22
    73c0:	fc 01       	movw	r30, r24
    73c2:	60 81       	ld	r22, Z
    73c4:	71 81       	ldd	r23, Z+1	; 0x01
    73c6:	62 0f       	add	r22, r18
    73c8:	73 1f       	adc	r23, r19
    73ca:	ae 01       	movw	r20, r28
    73cc:	c8 01       	movw	r24, r16
    73ce:	65 d3       	rcall	.+1738   	; 0x7a9a <strncpy>
    73d0:	c0 0f       	add	r28, r16
    73d2:	d1 1f       	adc	r29, r17
    73d4:	18 82       	st	Y, r1
    73d6:	df 91       	pop	r29
    73d8:	cf 91       	pop	r28
    73da:	1f 91       	pop	r17
    73dc:	0f 91       	pop	r16
    73de:	08 95       	ret

000073e0 <_ZNK6String9substringEjj>:
    73e0:	bf 92       	push	r11
    73e2:	cf 92       	push	r12
    73e4:	df 92       	push	r13
    73e6:	ef 92       	push	r14
    73e8:	ff 92       	push	r15
    73ea:	0f 93       	push	r16
    73ec:	1f 93       	push	r17
    73ee:	cf 93       	push	r28
    73f0:	df 93       	push	r29
    73f2:	7c 01       	movw	r14, r24
    73f4:	6b 01       	movw	r12, r22
    73f6:	8a 01       	movw	r16, r20
    73f8:	e9 01       	movw	r28, r18
    73fa:	24 17       	cp	r18, r20
    73fc:	35 07       	cpc	r19, r21
    73fe:	20 f4       	brcc	.+8      	; 0x7408 <_ZNK6String9substringEjj+0x28>
    7400:	81 2f       	mov	r24, r17
    7402:	89 01       	movw	r16, r18
    7404:	c4 2f       	mov	r28, r20
    7406:	d8 2f       	mov	r29, r24
    7408:	6a e3       	ldi	r22, 0x3A	; 58
    740a:	72 e0       	ldi	r23, 0x02	; 2
    740c:	c7 01       	movw	r24, r14
    740e:	93 dd       	rcall	.-1242   	; 0x6f36 <_ZN6StringC1EPKc>
    7410:	d6 01       	movw	r26, r12
    7412:	14 96       	adiw	r26, 0x04	; 4
    7414:	8d 91       	ld	r24, X+
    7416:	9c 91       	ld	r25, X
    7418:	15 97       	sbiw	r26, 0x05	; 5
    741a:	08 17       	cp	r16, r24
    741c:	19 07       	cpc	r17, r25
    741e:	c0 f4       	brcc	.+48     	; 0x7450 <_ZNK6String9substringEjj+0x70>
    7420:	8c 17       	cp	r24, r28
    7422:	9d 07       	cpc	r25, r29
    7424:	08 f4       	brcc	.+2      	; 0x7428 <_ZNK6String9substringEjj+0x48>
    7426:	ec 01       	movw	r28, r24
    7428:	d6 01       	movw	r26, r12
    742a:	ed 91       	ld	r30, X+
    742c:	fc 91       	ld	r31, X
    742e:	11 97       	sbiw	r26, 0x01	; 1
    7430:	ec 0f       	add	r30, r28
    7432:	fd 1f       	adc	r31, r29
    7434:	b0 80       	ld	r11, Z
    7436:	10 82       	st	Z, r1
    7438:	6d 91       	ld	r22, X+
    743a:	7c 91       	ld	r23, X
    743c:	60 0f       	add	r22, r16
    743e:	71 1f       	adc	r23, r17
    7440:	c7 01       	movw	r24, r14
    7442:	f8 dd       	rcall	.-1040   	; 0x7034 <_ZN6StringaSEPKc>
    7444:	d6 01       	movw	r26, r12
    7446:	ed 91       	ld	r30, X+
    7448:	fc 91       	ld	r31, X
    744a:	ec 0f       	add	r30, r28
    744c:	fd 1f       	adc	r31, r29
    744e:	b0 82       	st	Z, r11
    7450:	c7 01       	movw	r24, r14
    7452:	df 91       	pop	r29
    7454:	cf 91       	pop	r28
    7456:	1f 91       	pop	r17
    7458:	0f 91       	pop	r16
    745a:	ff 90       	pop	r15
    745c:	ef 90       	pop	r14
    745e:	df 90       	pop	r13
    7460:	cf 90       	pop	r12
    7462:	bf 90       	pop	r11
    7464:	08 95       	ret

00007466 <_ZN6String4trimEv>:

void String::trim(void)
{
    7466:	af 92       	push	r10
    7468:	bf 92       	push	r11
    746a:	cf 92       	push	r12
    746c:	df 92       	push	r13
    746e:	ef 92       	push	r14
    7470:	ff 92       	push	r15
    7472:	0f 93       	push	r16
    7474:	1f 93       	push	r17
    7476:	cf 93       	push	r28
    7478:	df 93       	push	r29
	if (!buffer || len == 0) return;
    747a:	dc 01       	movw	r26, r24
    747c:	cd 90       	ld	r12, X+
    747e:	dc 90       	ld	r13, X
    7480:	11 97       	sbiw	r26, 0x01	; 1
    7482:	c1 14       	cp	r12, r1
    7484:	d1 04       	cpc	r13, r1
    7486:	09 f4       	brne	.+2      	; 0x748a <_ZN6String4trimEv+0x24>
    7488:	3c c0       	rjmp	.+120    	; 0x7502 <_ZN6String4trimEv+0x9c>
    748a:	14 96       	adiw	r26, 0x04	; 4
    748c:	cd 91       	ld	r28, X+
    748e:	dc 91       	ld	r29, X
    7490:	15 97       	sbiw	r26, 0x05	; 5
    7492:	20 97       	sbiw	r28, 0x00	; 0
    7494:	b1 f1       	breq	.+108    	; 0x7502 <_ZN6String4trimEv+0x9c>
    7496:	8c 01       	movw	r16, r24
    7498:	76 01       	movw	r14, r12
    749a:	57 01       	movw	r10, r14
    749c:	bf ef       	ldi	r27, 0xFF	; 255
    749e:	ab 1a       	sub	r10, r27
    74a0:	bb 0a       	sbc	r11, r27
	char *begin = buffer;
	while (isspace(*begin)) begin++;
    74a2:	f7 01       	movw	r30, r14
    74a4:	80 81       	ld	r24, Z
    74a6:	90 e0       	ldi	r25, 0x00	; 0
    74a8:	c0 d2       	rcall	.+1408   	; 0x7a2a <isspace>
    74aa:	89 2b       	or	r24, r25
    74ac:	11 f0       	breq	.+4      	; 0x74b2 <_ZN6String4trimEv+0x4c>
    74ae:	75 01       	movw	r14, r10
    74b0:	f4 cf       	rjmp	.-24     	; 0x749a <_ZN6String4trimEv+0x34>
	char *end = buffer + len - 1;
    74b2:	21 97       	sbiw	r28, 0x01	; 1
    74b4:	cc 0d       	add	r28, r12
    74b6:	dd 1d       	adc	r29, r13
	while (isspace(*end) && end >= begin) end--;
    74b8:	88 81       	ld	r24, Y
    74ba:	90 e0       	ldi	r25, 0x00	; 0
    74bc:	b6 d2       	rcall	.+1388   	; 0x7a2a <isspace>
    74be:	89 2b       	or	r24, r25
    74c0:	29 f0       	breq	.+10     	; 0x74cc <_ZN6String4trimEv+0x66>
    74c2:	ce 15       	cp	r28, r14
    74c4:	df 05       	cpc	r29, r15
    74c6:	10 f0       	brcs	.+4      	; 0x74cc <_ZN6String4trimEv+0x66>
    74c8:	21 97       	sbiw	r28, 0x01	; 1
    74ca:	f6 cf       	rjmp	.-20     	; 0x74b8 <_ZN6String4trimEv+0x52>
	len = end + 1 - begin;
    74cc:	ae 01       	movw	r20, r28
    74ce:	4f 5f       	subi	r20, 0xFF	; 255
    74d0:	5f 4f       	sbci	r21, 0xFF	; 255
    74d2:	4e 19       	sub	r20, r14
    74d4:	5f 09       	sbc	r21, r15
    74d6:	d8 01       	movw	r26, r16
    74d8:	15 96       	adiw	r26, 0x05	; 5
    74da:	5c 93       	st	X, r21
    74dc:	4e 93       	st	-X, r20
    74de:	14 97       	sbiw	r26, 0x04	; 4
	if (begin > buffer) memcpy(buffer, begin, len);
    74e0:	ce 14       	cp	r12, r14
    74e2:	df 04       	cpc	r13, r15
    74e4:	18 f4       	brcc	.+6      	; 0x74ec <_ZN6String4trimEv+0x86>
    74e6:	b7 01       	movw	r22, r14
    74e8:	c6 01       	movw	r24, r12
    74ea:	b0 d2       	rcall	.+1376   	; 0x7a4c <memcpy>
	buffer[len] = 0;
    74ec:	d8 01       	movw	r26, r16
    74ee:	ed 91       	ld	r30, X+
    74f0:	fc 91       	ld	r31, X
    74f2:	11 97       	sbiw	r26, 0x01	; 1
    74f4:	14 96       	adiw	r26, 0x04	; 4
    74f6:	8d 91       	ld	r24, X+
    74f8:	9c 91       	ld	r25, X
    74fa:	15 97       	sbiw	r26, 0x05	; 5
    74fc:	e8 0f       	add	r30, r24
    74fe:	f9 1f       	adc	r31, r25
    7500:	10 82       	st	Z, r1
}
    7502:	df 91       	pop	r29
    7504:	cf 91       	pop	r28
    7506:	1f 91       	pop	r17
    7508:	0f 91       	pop	r16
    750a:	ff 90       	pop	r15
    750c:	ef 90       	pop	r14
    750e:	df 90       	pop	r13
    7510:	cf 90       	pop	r12
    7512:	bf 90       	pop	r11
    7514:	af 90       	pop	r10
    7516:	08 95       	ret

00007518 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    7518:	08 95       	ret

0000751a <__udivmodqi4>:
    751a:	99 1b       	sub	r25, r25
    751c:	79 e0       	ldi	r23, 0x09	; 9
    751e:	04 c0       	rjmp	.+8      	; 0x7528 <__udivmodqi4_ep>

00007520 <__udivmodqi4_loop>:
    7520:	99 1f       	adc	r25, r25
    7522:	96 17       	cp	r25, r22
    7524:	08 f0       	brcs	.+2      	; 0x7528 <__udivmodqi4_ep>
    7526:	96 1b       	sub	r25, r22

00007528 <__udivmodqi4_ep>:
    7528:	88 1f       	adc	r24, r24
    752a:	7a 95       	dec	r23
    752c:	c9 f7       	brne	.-14     	; 0x7520 <__udivmodqi4_loop>
    752e:	80 95       	com	r24
    7530:	08 95       	ret

00007532 <__udivmodhi4>:
    7532:	aa 1b       	sub	r26, r26
    7534:	bb 1b       	sub	r27, r27
    7536:	51 e1       	ldi	r21, 0x11	; 17
    7538:	07 c0       	rjmp	.+14     	; 0x7548 <__udivmodhi4_ep>

0000753a <__udivmodhi4_loop>:
    753a:	aa 1f       	adc	r26, r26
    753c:	bb 1f       	adc	r27, r27
    753e:	a6 17       	cp	r26, r22
    7540:	b7 07       	cpc	r27, r23
    7542:	10 f0       	brcs	.+4      	; 0x7548 <__udivmodhi4_ep>
    7544:	a6 1b       	sub	r26, r22
    7546:	b7 0b       	sbc	r27, r23

00007548 <__udivmodhi4_ep>:
    7548:	88 1f       	adc	r24, r24
    754a:	99 1f       	adc	r25, r25
    754c:	5a 95       	dec	r21
    754e:	a9 f7       	brne	.-22     	; 0x753a <__udivmodhi4_loop>
    7550:	80 95       	com	r24
    7552:	90 95       	com	r25
    7554:	bc 01       	movw	r22, r24
    7556:	cd 01       	movw	r24, r26
    7558:	08 95       	ret

0000755a <__udivmodsi4>:
    755a:	a1 e2       	ldi	r26, 0x21	; 33
    755c:	1a 2e       	mov	r1, r26
    755e:	aa 1b       	sub	r26, r26
    7560:	bb 1b       	sub	r27, r27
    7562:	fd 01       	movw	r30, r26
    7564:	0d c0       	rjmp	.+26     	; 0x7580 <__udivmodsi4_ep>

00007566 <__udivmodsi4_loop>:
    7566:	aa 1f       	adc	r26, r26
    7568:	bb 1f       	adc	r27, r27
    756a:	ee 1f       	adc	r30, r30
    756c:	ff 1f       	adc	r31, r31
    756e:	a2 17       	cp	r26, r18
    7570:	b3 07       	cpc	r27, r19
    7572:	e4 07       	cpc	r30, r20
    7574:	f5 07       	cpc	r31, r21
    7576:	20 f0       	brcs	.+8      	; 0x7580 <__udivmodsi4_ep>
    7578:	a2 1b       	sub	r26, r18
    757a:	b3 0b       	sbc	r27, r19
    757c:	e4 0b       	sbc	r30, r20
    757e:	f5 0b       	sbc	r31, r21

00007580 <__udivmodsi4_ep>:
    7580:	66 1f       	adc	r22, r22
    7582:	77 1f       	adc	r23, r23
    7584:	88 1f       	adc	r24, r24
    7586:	99 1f       	adc	r25, r25
    7588:	1a 94       	dec	r1
    758a:	69 f7       	brne	.-38     	; 0x7566 <__udivmodsi4_loop>
    758c:	60 95       	com	r22
    758e:	70 95       	com	r23
    7590:	80 95       	com	r24
    7592:	90 95       	com	r25
    7594:	9b 01       	movw	r18, r22
    7596:	ac 01       	movw	r20, r24
    7598:	bd 01       	movw	r22, r26
    759a:	cf 01       	movw	r24, r30
    759c:	08 95       	ret

0000759e <__tablejump2__>:
    759e:	ee 0f       	add	r30, r30
    75a0:	ff 1f       	adc	r31, r31
    75a2:	00 24       	eor	r0, r0
    75a4:	00 1c       	adc	r0, r0
    75a6:	0b be       	out	0x3b, r0	; 59
    75a8:	07 90       	elpm	r0, Z+
    75aa:	f6 91       	elpm	r31, Z
    75ac:	e0 2d       	mov	r30, r0
    75ae:	09 94       	ijmp

000075b0 <__umulhisi3>:
    75b0:	a2 9f       	mul	r26, r18
    75b2:	b0 01       	movw	r22, r0
    75b4:	b3 9f       	mul	r27, r19
    75b6:	c0 01       	movw	r24, r0
    75b8:	a3 9f       	mul	r26, r19
    75ba:	70 0d       	add	r23, r0
    75bc:	81 1d       	adc	r24, r1
    75be:	11 24       	eor	r1, r1
    75c0:	91 1d       	adc	r25, r1
    75c2:	b2 9f       	mul	r27, r18
    75c4:	70 0d       	add	r23, r0
    75c6:	81 1d       	adc	r24, r1
    75c8:	11 24       	eor	r1, r1
    75ca:	91 1d       	adc	r25, r1
    75cc:	08 95       	ret

000075ce <__muluhisi3>:
    75ce:	f0 df       	rcall	.-32     	; 0x75b0 <__umulhisi3>
    75d0:	a5 9f       	mul	r26, r21
    75d2:	90 0d       	add	r25, r0
    75d4:	b4 9f       	mul	r27, r20
    75d6:	90 0d       	add	r25, r0
    75d8:	a4 9f       	mul	r26, r20
    75da:	80 0d       	add	r24, r0
    75dc:	91 1d       	adc	r25, r1
    75de:	11 24       	eor	r1, r1
    75e0:	08 95       	ret

000075e2 <dtostrf>:
    75e2:	ef 92       	push	r14
    75e4:	0f 93       	push	r16
    75e6:	1f 93       	push	r17
    75e8:	cf 93       	push	r28
    75ea:	df 93       	push	r29
    75ec:	e8 01       	movw	r28, r16
    75ee:	47 fd       	sbrc	r20, 7
    75f0:	02 c0       	rjmp	.+4      	; 0x75f6 <dtostrf+0x14>
    75f2:	34 e0       	ldi	r19, 0x04	; 4
    75f4:	01 c0       	rjmp	.+2      	; 0x75f8 <dtostrf+0x16>
    75f6:	34 e1       	ldi	r19, 0x14	; 20
    75f8:	04 2e       	mov	r0, r20
    75fa:	00 0c       	add	r0, r0
    75fc:	55 0b       	sbc	r21, r21
    75fe:	57 ff       	sbrs	r21, 7
    7600:	03 c0       	rjmp	.+6      	; 0x7608 <dtostrf+0x26>
    7602:	51 95       	neg	r21
    7604:	41 95       	neg	r20
    7606:	51 09       	sbc	r21, r1
    7608:	e3 2e       	mov	r14, r19
    760a:	02 2f       	mov	r16, r18
    760c:	24 2f       	mov	r18, r20
    760e:	ae 01       	movw	r20, r28
    7610:	b5 d2       	rcall	.+1386   	; 0x7b7c <dtoa_prf>
    7612:	ce 01       	movw	r24, r28
    7614:	df 91       	pop	r29
    7616:	cf 91       	pop	r28
    7618:	1f 91       	pop	r17
    761a:	0f 91       	pop	r16
    761c:	ef 90       	pop	r14
    761e:	08 95       	ret

00007620 <malloc>:
    7620:	0f 93       	push	r16
    7622:	1f 93       	push	r17
    7624:	cf 93       	push	r28
    7626:	df 93       	push	r29
    7628:	82 30       	cpi	r24, 0x02	; 2
    762a:	91 05       	cpc	r25, r1
    762c:	10 f4       	brcc	.+4      	; 0x7632 <malloc+0x12>
    762e:	82 e0       	ldi	r24, 0x02	; 2
    7630:	90 e0       	ldi	r25, 0x00	; 0
    7632:	e0 91 4d 0d 	lds	r30, 0x0D4D	; 0x800d4d <__flp>
    7636:	f0 91 4e 0d 	lds	r31, 0x0D4E	; 0x800d4e <__flp+0x1>
    763a:	20 e0       	ldi	r18, 0x00	; 0
    763c:	30 e0       	ldi	r19, 0x00	; 0
    763e:	a0 e0       	ldi	r26, 0x00	; 0
    7640:	b0 e0       	ldi	r27, 0x00	; 0
    7642:	30 97       	sbiw	r30, 0x00	; 0
    7644:	19 f1       	breq	.+70     	; 0x768c <malloc+0x6c>
    7646:	40 81       	ld	r20, Z
    7648:	51 81       	ldd	r21, Z+1	; 0x01
    764a:	02 81       	ldd	r16, Z+2	; 0x02
    764c:	13 81       	ldd	r17, Z+3	; 0x03
    764e:	48 17       	cp	r20, r24
    7650:	59 07       	cpc	r21, r25
    7652:	c8 f0       	brcs	.+50     	; 0x7686 <malloc+0x66>
    7654:	84 17       	cp	r24, r20
    7656:	95 07       	cpc	r25, r21
    7658:	69 f4       	brne	.+26     	; 0x7674 <malloc+0x54>
    765a:	10 97       	sbiw	r26, 0x00	; 0
    765c:	31 f0       	breq	.+12     	; 0x766a <malloc+0x4a>
    765e:	12 96       	adiw	r26, 0x02	; 2
    7660:	0c 93       	st	X, r16
    7662:	12 97       	sbiw	r26, 0x02	; 2
    7664:	13 96       	adiw	r26, 0x03	; 3
    7666:	1c 93       	st	X, r17
    7668:	27 c0       	rjmp	.+78     	; 0x76b8 <malloc+0x98>
    766a:	00 93 4d 0d 	sts	0x0D4D, r16	; 0x800d4d <__flp>
    766e:	10 93 4e 0d 	sts	0x0D4E, r17	; 0x800d4e <__flp+0x1>
    7672:	22 c0       	rjmp	.+68     	; 0x76b8 <malloc+0x98>
    7674:	21 15       	cp	r18, r1
    7676:	31 05       	cpc	r19, r1
    7678:	19 f0       	breq	.+6      	; 0x7680 <malloc+0x60>
    767a:	42 17       	cp	r20, r18
    767c:	53 07       	cpc	r21, r19
    767e:	18 f4       	brcc	.+6      	; 0x7686 <malloc+0x66>
    7680:	9a 01       	movw	r18, r20
    7682:	bd 01       	movw	r22, r26
    7684:	ef 01       	movw	r28, r30
    7686:	df 01       	movw	r26, r30
    7688:	f8 01       	movw	r30, r16
    768a:	db cf       	rjmp	.-74     	; 0x7642 <malloc+0x22>
    768c:	21 15       	cp	r18, r1
    768e:	31 05       	cpc	r19, r1
    7690:	f9 f0       	breq	.+62     	; 0x76d0 <malloc+0xb0>
    7692:	28 1b       	sub	r18, r24
    7694:	39 0b       	sbc	r19, r25
    7696:	24 30       	cpi	r18, 0x04	; 4
    7698:	31 05       	cpc	r19, r1
    769a:	80 f4       	brcc	.+32     	; 0x76bc <malloc+0x9c>
    769c:	8a 81       	ldd	r24, Y+2	; 0x02
    769e:	9b 81       	ldd	r25, Y+3	; 0x03
    76a0:	61 15       	cp	r22, r1
    76a2:	71 05       	cpc	r23, r1
    76a4:	21 f0       	breq	.+8      	; 0x76ae <malloc+0x8e>
    76a6:	fb 01       	movw	r30, r22
    76a8:	93 83       	std	Z+3, r25	; 0x03
    76aa:	82 83       	std	Z+2, r24	; 0x02
    76ac:	04 c0       	rjmp	.+8      	; 0x76b6 <malloc+0x96>
    76ae:	90 93 4e 0d 	sts	0x0D4E, r25	; 0x800d4e <__flp+0x1>
    76b2:	80 93 4d 0d 	sts	0x0D4D, r24	; 0x800d4d <__flp>
    76b6:	fe 01       	movw	r30, r28
    76b8:	32 96       	adiw	r30, 0x02	; 2
    76ba:	44 c0       	rjmp	.+136    	; 0x7744 <malloc+0x124>
    76bc:	fe 01       	movw	r30, r28
    76be:	e2 0f       	add	r30, r18
    76c0:	f3 1f       	adc	r31, r19
    76c2:	81 93       	st	Z+, r24
    76c4:	91 93       	st	Z+, r25
    76c6:	22 50       	subi	r18, 0x02	; 2
    76c8:	31 09       	sbc	r19, r1
    76ca:	39 83       	std	Y+1, r19	; 0x01
    76cc:	28 83       	st	Y, r18
    76ce:	3a c0       	rjmp	.+116    	; 0x7744 <malloc+0x124>
    76d0:	20 91 4b 0d 	lds	r18, 0x0D4B	; 0x800d4b <__brkval>
    76d4:	30 91 4c 0d 	lds	r19, 0x0D4C	; 0x800d4c <__brkval+0x1>
    76d8:	23 2b       	or	r18, r19
    76da:	41 f4       	brne	.+16     	; 0x76ec <malloc+0xcc>
    76dc:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    76e0:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    76e4:	30 93 4c 0d 	sts	0x0D4C, r19	; 0x800d4c <__brkval+0x1>
    76e8:	20 93 4b 0d 	sts	0x0D4B, r18	; 0x800d4b <__brkval>
    76ec:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    76f0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    76f4:	21 15       	cp	r18, r1
    76f6:	31 05       	cpc	r19, r1
    76f8:	41 f4       	brne	.+16     	; 0x770a <malloc+0xea>
    76fa:	2d b7       	in	r18, 0x3d	; 61
    76fc:	3e b7       	in	r19, 0x3e	; 62
    76fe:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    7702:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    7706:	24 1b       	sub	r18, r20
    7708:	35 0b       	sbc	r19, r21
    770a:	e0 91 4b 0d 	lds	r30, 0x0D4B	; 0x800d4b <__brkval>
    770e:	f0 91 4c 0d 	lds	r31, 0x0D4C	; 0x800d4c <__brkval+0x1>
    7712:	e2 17       	cp	r30, r18
    7714:	f3 07       	cpc	r31, r19
    7716:	a0 f4       	brcc	.+40     	; 0x7740 <malloc+0x120>
    7718:	2e 1b       	sub	r18, r30
    771a:	3f 0b       	sbc	r19, r31
    771c:	28 17       	cp	r18, r24
    771e:	39 07       	cpc	r19, r25
    7720:	78 f0       	brcs	.+30     	; 0x7740 <malloc+0x120>
    7722:	ac 01       	movw	r20, r24
    7724:	4e 5f       	subi	r20, 0xFE	; 254
    7726:	5f 4f       	sbci	r21, 0xFF	; 255
    7728:	24 17       	cp	r18, r20
    772a:	35 07       	cpc	r19, r21
    772c:	48 f0       	brcs	.+18     	; 0x7740 <malloc+0x120>
    772e:	4e 0f       	add	r20, r30
    7730:	5f 1f       	adc	r21, r31
    7732:	50 93 4c 0d 	sts	0x0D4C, r21	; 0x800d4c <__brkval+0x1>
    7736:	40 93 4b 0d 	sts	0x0D4B, r20	; 0x800d4b <__brkval>
    773a:	81 93       	st	Z+, r24
    773c:	91 93       	st	Z+, r25
    773e:	02 c0       	rjmp	.+4      	; 0x7744 <malloc+0x124>
    7740:	e0 e0       	ldi	r30, 0x00	; 0
    7742:	f0 e0       	ldi	r31, 0x00	; 0
    7744:	cf 01       	movw	r24, r30
    7746:	df 91       	pop	r29
    7748:	cf 91       	pop	r28
    774a:	1f 91       	pop	r17
    774c:	0f 91       	pop	r16
    774e:	08 95       	ret

00007750 <free>:
    7750:	cf 93       	push	r28
    7752:	df 93       	push	r29
    7754:	00 97       	sbiw	r24, 0x00	; 0
    7756:	09 f4       	brne	.+2      	; 0x775a <free+0xa>
    7758:	81 c0       	rjmp	.+258    	; 0x785c <free+0x10c>
    775a:	fc 01       	movw	r30, r24
    775c:	32 97       	sbiw	r30, 0x02	; 2
    775e:	13 82       	std	Z+3, r1	; 0x03
    7760:	12 82       	std	Z+2, r1	; 0x02
    7762:	a0 91 4d 0d 	lds	r26, 0x0D4D	; 0x800d4d <__flp>
    7766:	b0 91 4e 0d 	lds	r27, 0x0D4E	; 0x800d4e <__flp+0x1>
    776a:	10 97       	sbiw	r26, 0x00	; 0
    776c:	81 f4       	brne	.+32     	; 0x778e <free+0x3e>
    776e:	20 81       	ld	r18, Z
    7770:	31 81       	ldd	r19, Z+1	; 0x01
    7772:	82 0f       	add	r24, r18
    7774:	93 1f       	adc	r25, r19
    7776:	20 91 4b 0d 	lds	r18, 0x0D4B	; 0x800d4b <__brkval>
    777a:	30 91 4c 0d 	lds	r19, 0x0D4C	; 0x800d4c <__brkval+0x1>
    777e:	28 17       	cp	r18, r24
    7780:	39 07       	cpc	r19, r25
    7782:	51 f5       	brne	.+84     	; 0x77d8 <free+0x88>
    7784:	f0 93 4c 0d 	sts	0x0D4C, r31	; 0x800d4c <__brkval+0x1>
    7788:	e0 93 4b 0d 	sts	0x0D4B, r30	; 0x800d4b <__brkval>
    778c:	67 c0       	rjmp	.+206    	; 0x785c <free+0x10c>
    778e:	ed 01       	movw	r28, r26
    7790:	20 e0       	ldi	r18, 0x00	; 0
    7792:	30 e0       	ldi	r19, 0x00	; 0
    7794:	ce 17       	cp	r28, r30
    7796:	df 07       	cpc	r29, r31
    7798:	40 f4       	brcc	.+16     	; 0x77aa <free+0x5a>
    779a:	4a 81       	ldd	r20, Y+2	; 0x02
    779c:	5b 81       	ldd	r21, Y+3	; 0x03
    779e:	9e 01       	movw	r18, r28
    77a0:	41 15       	cp	r20, r1
    77a2:	51 05       	cpc	r21, r1
    77a4:	f1 f0       	breq	.+60     	; 0x77e2 <free+0x92>
    77a6:	ea 01       	movw	r28, r20
    77a8:	f5 cf       	rjmp	.-22     	; 0x7794 <free+0x44>
    77aa:	d3 83       	std	Z+3, r29	; 0x03
    77ac:	c2 83       	std	Z+2, r28	; 0x02
    77ae:	40 81       	ld	r20, Z
    77b0:	51 81       	ldd	r21, Z+1	; 0x01
    77b2:	84 0f       	add	r24, r20
    77b4:	95 1f       	adc	r25, r21
    77b6:	c8 17       	cp	r28, r24
    77b8:	d9 07       	cpc	r29, r25
    77ba:	59 f4       	brne	.+22     	; 0x77d2 <free+0x82>
    77bc:	88 81       	ld	r24, Y
    77be:	99 81       	ldd	r25, Y+1	; 0x01
    77c0:	84 0f       	add	r24, r20
    77c2:	95 1f       	adc	r25, r21
    77c4:	02 96       	adiw	r24, 0x02	; 2
    77c6:	91 83       	std	Z+1, r25	; 0x01
    77c8:	80 83       	st	Z, r24
    77ca:	8a 81       	ldd	r24, Y+2	; 0x02
    77cc:	9b 81       	ldd	r25, Y+3	; 0x03
    77ce:	93 83       	std	Z+3, r25	; 0x03
    77d0:	82 83       	std	Z+2, r24	; 0x02
    77d2:	21 15       	cp	r18, r1
    77d4:	31 05       	cpc	r19, r1
    77d6:	29 f4       	brne	.+10     	; 0x77e2 <free+0x92>
    77d8:	f0 93 4e 0d 	sts	0x0D4E, r31	; 0x800d4e <__flp+0x1>
    77dc:	e0 93 4d 0d 	sts	0x0D4D, r30	; 0x800d4d <__flp>
    77e0:	3d c0       	rjmp	.+122    	; 0x785c <free+0x10c>
    77e2:	e9 01       	movw	r28, r18
    77e4:	fb 83       	std	Y+3, r31	; 0x03
    77e6:	ea 83       	std	Y+2, r30	; 0x02
    77e8:	49 91       	ld	r20, Y+
    77ea:	59 91       	ld	r21, Y+
    77ec:	c4 0f       	add	r28, r20
    77ee:	d5 1f       	adc	r29, r21
    77f0:	ec 17       	cp	r30, r28
    77f2:	fd 07       	cpc	r31, r29
    77f4:	61 f4       	brne	.+24     	; 0x780e <free+0xbe>
    77f6:	80 81       	ld	r24, Z
    77f8:	91 81       	ldd	r25, Z+1	; 0x01
    77fa:	84 0f       	add	r24, r20
    77fc:	95 1f       	adc	r25, r21
    77fe:	02 96       	adiw	r24, 0x02	; 2
    7800:	e9 01       	movw	r28, r18
    7802:	99 83       	std	Y+1, r25	; 0x01
    7804:	88 83       	st	Y, r24
    7806:	82 81       	ldd	r24, Z+2	; 0x02
    7808:	93 81       	ldd	r25, Z+3	; 0x03
    780a:	9b 83       	std	Y+3, r25	; 0x03
    780c:	8a 83       	std	Y+2, r24	; 0x02
    780e:	e0 e0       	ldi	r30, 0x00	; 0
    7810:	f0 e0       	ldi	r31, 0x00	; 0
    7812:	12 96       	adiw	r26, 0x02	; 2
    7814:	8d 91       	ld	r24, X+
    7816:	9c 91       	ld	r25, X
    7818:	13 97       	sbiw	r26, 0x03	; 3
    781a:	00 97       	sbiw	r24, 0x00	; 0
    781c:	19 f0       	breq	.+6      	; 0x7824 <free+0xd4>
    781e:	fd 01       	movw	r30, r26
    7820:	dc 01       	movw	r26, r24
    7822:	f7 cf       	rjmp	.-18     	; 0x7812 <free+0xc2>
    7824:	8d 91       	ld	r24, X+
    7826:	9c 91       	ld	r25, X
    7828:	11 97       	sbiw	r26, 0x01	; 1
    782a:	9d 01       	movw	r18, r26
    782c:	2e 5f       	subi	r18, 0xFE	; 254
    782e:	3f 4f       	sbci	r19, 0xFF	; 255
    7830:	82 0f       	add	r24, r18
    7832:	93 1f       	adc	r25, r19
    7834:	20 91 4b 0d 	lds	r18, 0x0D4B	; 0x800d4b <__brkval>
    7838:	30 91 4c 0d 	lds	r19, 0x0D4C	; 0x800d4c <__brkval+0x1>
    783c:	28 17       	cp	r18, r24
    783e:	39 07       	cpc	r19, r25
    7840:	69 f4       	brne	.+26     	; 0x785c <free+0x10c>
    7842:	30 97       	sbiw	r30, 0x00	; 0
    7844:	29 f4       	brne	.+10     	; 0x7850 <free+0x100>
    7846:	10 92 4e 0d 	sts	0x0D4E, r1	; 0x800d4e <__flp+0x1>
    784a:	10 92 4d 0d 	sts	0x0D4D, r1	; 0x800d4d <__flp>
    784e:	02 c0       	rjmp	.+4      	; 0x7854 <free+0x104>
    7850:	13 82       	std	Z+3, r1	; 0x03
    7852:	12 82       	std	Z+2, r1	; 0x02
    7854:	b0 93 4c 0d 	sts	0x0D4C, r27	; 0x800d4c <__brkval+0x1>
    7858:	a0 93 4b 0d 	sts	0x0D4B, r26	; 0x800d4b <__brkval>
    785c:	df 91       	pop	r29
    785e:	cf 91       	pop	r28
    7860:	08 95       	ret

00007862 <realloc>:
    7862:	6f 92       	push	r6
    7864:	7f 92       	push	r7
    7866:	8f 92       	push	r8
    7868:	9f 92       	push	r9
    786a:	af 92       	push	r10
    786c:	bf 92       	push	r11
    786e:	cf 92       	push	r12
    7870:	df 92       	push	r13
    7872:	ef 92       	push	r14
    7874:	ff 92       	push	r15
    7876:	0f 93       	push	r16
    7878:	1f 93       	push	r17
    787a:	cf 93       	push	r28
    787c:	df 93       	push	r29
    787e:	00 97       	sbiw	r24, 0x00	; 0
    7880:	81 f4       	brne	.+32     	; 0x78a2 <realloc+0x40>
    7882:	cb 01       	movw	r24, r22
    7884:	df 91       	pop	r29
    7886:	cf 91       	pop	r28
    7888:	1f 91       	pop	r17
    788a:	0f 91       	pop	r16
    788c:	ff 90       	pop	r15
    788e:	ef 90       	pop	r14
    7890:	df 90       	pop	r13
    7892:	cf 90       	pop	r12
    7894:	bf 90       	pop	r11
    7896:	af 90       	pop	r10
    7898:	9f 90       	pop	r9
    789a:	8f 90       	pop	r8
    789c:	7f 90       	pop	r7
    789e:	6f 90       	pop	r6
    78a0:	bf ce       	rjmp	.-642    	; 0x7620 <malloc>
    78a2:	fc 01       	movw	r30, r24
    78a4:	e6 0f       	add	r30, r22
    78a6:	f7 1f       	adc	r31, r23
    78a8:	9c 01       	movw	r18, r24
    78aa:	22 50       	subi	r18, 0x02	; 2
    78ac:	31 09       	sbc	r19, r1
    78ae:	e2 17       	cp	r30, r18
    78b0:	f3 07       	cpc	r31, r19
    78b2:	08 f4       	brcc	.+2      	; 0x78b6 <realloc+0x54>
    78b4:	a5 c0       	rjmp	.+330    	; 0x7a00 <realloc+0x19e>
    78b6:	ec 01       	movw	r28, r24
    78b8:	d9 01       	movw	r26, r18
    78ba:	0d 91       	ld	r16, X+
    78bc:	1c 91       	ld	r17, X
    78be:	11 97       	sbiw	r26, 0x01	; 1
    78c0:	06 17       	cp	r16, r22
    78c2:	17 07       	cpc	r17, r23
    78c4:	a8 f0       	brcs	.+42     	; 0x78f0 <realloc+0x8e>
    78c6:	05 30       	cpi	r16, 0x05	; 5
    78c8:	11 05       	cpc	r17, r1
    78ca:	08 f4       	brcc	.+2      	; 0x78ce <realloc+0x6c>
    78cc:	97 c0       	rjmp	.+302    	; 0x79fc <realloc+0x19a>
    78ce:	c8 01       	movw	r24, r16
    78d0:	04 97       	sbiw	r24, 0x04	; 4
    78d2:	86 17       	cp	r24, r22
    78d4:	97 07       	cpc	r25, r23
    78d6:	08 f4       	brcc	.+2      	; 0x78da <realloc+0x78>
    78d8:	91 c0       	rjmp	.+290    	; 0x79fc <realloc+0x19a>
    78da:	02 50       	subi	r16, 0x02	; 2
    78dc:	11 09       	sbc	r17, r1
    78de:	06 1b       	sub	r16, r22
    78e0:	17 0b       	sbc	r17, r23
    78e2:	01 93       	st	Z+, r16
    78e4:	11 93       	st	Z+, r17
    78e6:	6d 93       	st	X+, r22
    78e8:	7c 93       	st	X, r23
    78ea:	cf 01       	movw	r24, r30
    78ec:	31 df       	rcall	.-414    	; 0x7750 <free>
    78ee:	86 c0       	rjmp	.+268    	; 0x79fc <realloc+0x19a>
    78f0:	5b 01       	movw	r10, r22
    78f2:	a0 1a       	sub	r10, r16
    78f4:	b1 0a       	sbc	r11, r17
    78f6:	4c 01       	movw	r8, r24
    78f8:	80 0e       	add	r8, r16
    78fa:	91 1e       	adc	r9, r17
    78fc:	a0 91 4d 0d 	lds	r26, 0x0D4D	; 0x800d4d <__flp>
    7900:	b0 91 4e 0d 	lds	r27, 0x0D4E	; 0x800d4e <__flp+0x1>
    7904:	61 2c       	mov	r6, r1
    7906:	71 2c       	mov	r7, r1
    7908:	e1 2c       	mov	r14, r1
    790a:	f1 2c       	mov	r15, r1
    790c:	10 97       	sbiw	r26, 0x00	; 0
    790e:	09 f4       	brne	.+2      	; 0x7912 <realloc+0xb0>
    7910:	46 c0       	rjmp	.+140    	; 0x799e <realloc+0x13c>
    7912:	8d 91       	ld	r24, X+
    7914:	9c 91       	ld	r25, X
    7916:	11 97       	sbiw	r26, 0x01	; 1
    7918:	a8 15       	cp	r26, r8
    791a:	b9 05       	cpc	r27, r9
    791c:	b1 f5       	brne	.+108    	; 0x798a <realloc+0x128>
    791e:	6c 01       	movw	r12, r24
    7920:	42 e0       	ldi	r20, 0x02	; 2
    7922:	c4 0e       	add	r12, r20
    7924:	d1 1c       	adc	r13, r1
    7926:	ca 14       	cp	r12, r10
    7928:	db 04       	cpc	r13, r11
    792a:	78 f1       	brcs	.+94     	; 0x798a <realloc+0x128>
    792c:	4c 01       	movw	r8, r24
    792e:	8a 18       	sub	r8, r10
    7930:	9b 08       	sbc	r9, r11
    7932:	64 01       	movw	r12, r8
    7934:	42 e0       	ldi	r20, 0x02	; 2
    7936:	c4 0e       	add	r12, r20
    7938:	d1 1c       	adc	r13, r1
    793a:	12 96       	adiw	r26, 0x02	; 2
    793c:	bc 90       	ld	r11, X
    793e:	12 97       	sbiw	r26, 0x02	; 2
    7940:	13 96       	adiw	r26, 0x03	; 3
    7942:	ac 91       	ld	r26, X
    7944:	b5 e0       	ldi	r27, 0x05	; 5
    7946:	cb 16       	cp	r12, r27
    7948:	d1 04       	cpc	r13, r1
    794a:	40 f0       	brcs	.+16     	; 0x795c <realloc+0xfa>
    794c:	b2 82       	std	Z+2, r11	; 0x02
    794e:	a3 83       	std	Z+3, r26	; 0x03
    7950:	91 82       	std	Z+1, r9	; 0x01
    7952:	80 82       	st	Z, r8
    7954:	d9 01       	movw	r26, r18
    7956:	6d 93       	st	X+, r22
    7958:	7c 93       	st	X, r23
    795a:	09 c0       	rjmp	.+18     	; 0x796e <realloc+0x10c>
    795c:	0e 5f       	subi	r16, 0xFE	; 254
    795e:	1f 4f       	sbci	r17, 0xFF	; 255
    7960:	80 0f       	add	r24, r16
    7962:	91 1f       	adc	r25, r17
    7964:	f9 01       	movw	r30, r18
    7966:	91 83       	std	Z+1, r25	; 0x01
    7968:	80 83       	st	Z, r24
    796a:	eb 2d       	mov	r30, r11
    796c:	fa 2f       	mov	r31, r26
    796e:	e1 14       	cp	r14, r1
    7970:	f1 04       	cpc	r15, r1
    7972:	31 f0       	breq	.+12     	; 0x7980 <realloc+0x11e>
    7974:	d7 01       	movw	r26, r14
    7976:	13 96       	adiw	r26, 0x03	; 3
    7978:	fc 93       	st	X, r31
    797a:	ee 93       	st	-X, r30
    797c:	12 97       	sbiw	r26, 0x02	; 2
    797e:	3e c0       	rjmp	.+124    	; 0x79fc <realloc+0x19a>
    7980:	f0 93 4e 0d 	sts	0x0D4E, r31	; 0x800d4e <__flp+0x1>
    7984:	e0 93 4d 0d 	sts	0x0D4D, r30	; 0x800d4d <__flp>
    7988:	39 c0       	rjmp	.+114    	; 0x79fc <realloc+0x19a>
    798a:	68 16       	cp	r6, r24
    798c:	79 06       	cpc	r7, r25
    798e:	08 f4       	brcc	.+2      	; 0x7992 <realloc+0x130>
    7990:	3c 01       	movw	r6, r24
    7992:	7d 01       	movw	r14, r26
    7994:	12 96       	adiw	r26, 0x02	; 2
    7996:	0d 90       	ld	r0, X+
    7998:	bc 91       	ld	r27, X
    799a:	a0 2d       	mov	r26, r0
    799c:	b7 cf       	rjmp	.-146    	; 0x790c <realloc+0xaa>
    799e:	80 91 4b 0d 	lds	r24, 0x0D4B	; 0x800d4b <__brkval>
    79a2:	90 91 4c 0d 	lds	r25, 0x0D4C	; 0x800d4c <__brkval+0x1>
    79a6:	88 16       	cp	r8, r24
    79a8:	99 06       	cpc	r9, r25
    79aa:	e1 f4       	brne	.+56     	; 0x79e4 <realloc+0x182>
    79ac:	66 16       	cp	r6, r22
    79ae:	77 06       	cpc	r7, r23
    79b0:	c8 f4       	brcc	.+50     	; 0x79e4 <realloc+0x182>
    79b2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    79b6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    79ba:	00 97       	sbiw	r24, 0x00	; 0
    79bc:	41 f4       	brne	.+16     	; 0x79ce <realloc+0x16c>
    79be:	8d b7       	in	r24, 0x3d	; 61
    79c0:	9e b7       	in	r25, 0x3e	; 62
    79c2:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    79c6:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    79ca:	84 1b       	sub	r24, r20
    79cc:	95 0b       	sbc	r25, r21
    79ce:	e8 17       	cp	r30, r24
    79d0:	f9 07       	cpc	r31, r25
    79d2:	b0 f4       	brcc	.+44     	; 0x7a00 <realloc+0x19e>
    79d4:	f0 93 4c 0d 	sts	0x0D4C, r31	; 0x800d4c <__brkval+0x1>
    79d8:	e0 93 4b 0d 	sts	0x0D4B, r30	; 0x800d4b <__brkval>
    79dc:	f9 01       	movw	r30, r18
    79de:	71 83       	std	Z+1, r23	; 0x01
    79e0:	60 83       	st	Z, r22
    79e2:	0c c0       	rjmp	.+24     	; 0x79fc <realloc+0x19a>
    79e4:	cb 01       	movw	r24, r22
    79e6:	1c de       	rcall	.-968    	; 0x7620 <malloc>
    79e8:	7c 01       	movw	r14, r24
    79ea:	00 97       	sbiw	r24, 0x00	; 0
    79ec:	49 f0       	breq	.+18     	; 0x7a00 <realloc+0x19e>
    79ee:	a8 01       	movw	r20, r16
    79f0:	be 01       	movw	r22, r28
    79f2:	2c d0       	rcall	.+88     	; 0x7a4c <memcpy>
    79f4:	ce 01       	movw	r24, r28
    79f6:	ac de       	rcall	.-680    	; 0x7750 <free>
    79f8:	c7 01       	movw	r24, r14
    79fa:	04 c0       	rjmp	.+8      	; 0x7a04 <realloc+0x1a2>
    79fc:	ce 01       	movw	r24, r28
    79fe:	02 c0       	rjmp	.+4      	; 0x7a04 <realloc+0x1a2>
    7a00:	80 e0       	ldi	r24, 0x00	; 0
    7a02:	90 e0       	ldi	r25, 0x00	; 0
    7a04:	df 91       	pop	r29
    7a06:	cf 91       	pop	r28
    7a08:	1f 91       	pop	r17
    7a0a:	0f 91       	pop	r16
    7a0c:	ff 90       	pop	r15
    7a0e:	ef 90       	pop	r14
    7a10:	df 90       	pop	r13
    7a12:	cf 90       	pop	r12
    7a14:	bf 90       	pop	r11
    7a16:	af 90       	pop	r10
    7a18:	9f 90       	pop	r9
    7a1a:	8f 90       	pop	r8
    7a1c:	7f 90       	pop	r7
    7a1e:	6f 90       	pop	r6
    7a20:	08 95       	ret

00007a22 <abort>:
    7a22:	81 e0       	ldi	r24, 0x01	; 1
    7a24:	90 e0       	ldi	r25, 0x00	; 0
    7a26:	f8 94       	cli
    7a28:	20 c3       	rjmp	.+1600   	; 0x806a <__do_global_dtors>

00007a2a <isspace>:
    7a2a:	91 11       	cpse	r25, r1
    7a2c:	f5 c2       	rjmp	.+1514   	; 0x8018 <__ctype_isfalse>
    7a2e:	80 32       	cpi	r24, 0x20	; 32
    7a30:	19 f0       	breq	.+6      	; 0x7a38 <isspace+0xe>
    7a32:	89 50       	subi	r24, 0x09	; 9
    7a34:	85 50       	subi	r24, 0x05	; 5
    7a36:	d0 f7       	brcc	.-12     	; 0x7a2c <isspace+0x2>
    7a38:	08 95       	ret

00007a3a <memcpy_P>:
    7a3a:	fb 01       	movw	r30, r22
    7a3c:	dc 01       	movw	r26, r24
    7a3e:	02 c0       	rjmp	.+4      	; 0x7a44 <memcpy_P+0xa>
    7a40:	05 90       	lpm	r0, Z+
    7a42:	0d 92       	st	X+, r0
    7a44:	41 50       	subi	r20, 0x01	; 1
    7a46:	50 40       	sbci	r21, 0x00	; 0
    7a48:	d8 f7       	brcc	.-10     	; 0x7a40 <memcpy_P+0x6>
    7a4a:	08 95       	ret

00007a4c <memcpy>:
    7a4c:	fb 01       	movw	r30, r22
    7a4e:	dc 01       	movw	r26, r24
    7a50:	02 c0       	rjmp	.+4      	; 0x7a56 <memcpy+0xa>
    7a52:	01 90       	ld	r0, Z+
    7a54:	0d 92       	st	X+, r0
    7a56:	41 50       	subi	r20, 0x01	; 1
    7a58:	50 40       	sbci	r21, 0x00	; 0
    7a5a:	d8 f7       	brcc	.-10     	; 0x7a52 <memcpy+0x6>
    7a5c:	08 95       	ret

00007a5e <strcmp>:
    7a5e:	fb 01       	movw	r30, r22
    7a60:	dc 01       	movw	r26, r24
    7a62:	8d 91       	ld	r24, X+
    7a64:	01 90       	ld	r0, Z+
    7a66:	80 19       	sub	r24, r0
    7a68:	01 10       	cpse	r0, r1
    7a6a:	d9 f3       	breq	.-10     	; 0x7a62 <strcmp+0x4>
    7a6c:	99 0b       	sbc	r25, r25
    7a6e:	08 95       	ret

00007a70 <strcpy>:
    7a70:	fb 01       	movw	r30, r22
    7a72:	dc 01       	movw	r26, r24
    7a74:	01 90       	ld	r0, Z+
    7a76:	0d 92       	st	X+, r0
    7a78:	00 20       	and	r0, r0
    7a7a:	e1 f7       	brne	.-8      	; 0x7a74 <strcpy+0x4>
    7a7c:	08 95       	ret

00007a7e <strncmp>:
    7a7e:	fb 01       	movw	r30, r22
    7a80:	dc 01       	movw	r26, r24
    7a82:	41 50       	subi	r20, 0x01	; 1
    7a84:	50 40       	sbci	r21, 0x00	; 0
    7a86:	30 f0       	brcs	.+12     	; 0x7a94 <strncmp+0x16>
    7a88:	8d 91       	ld	r24, X+
    7a8a:	01 90       	ld	r0, Z+
    7a8c:	80 19       	sub	r24, r0
    7a8e:	19 f4       	brne	.+6      	; 0x7a96 <strncmp+0x18>
    7a90:	00 20       	and	r0, r0
    7a92:	b9 f7       	brne	.-18     	; 0x7a82 <strncmp+0x4>
    7a94:	88 1b       	sub	r24, r24
    7a96:	99 0b       	sbc	r25, r25
    7a98:	08 95       	ret

00007a9a <strncpy>:
    7a9a:	fb 01       	movw	r30, r22
    7a9c:	dc 01       	movw	r26, r24
    7a9e:	41 50       	subi	r20, 0x01	; 1
    7aa0:	50 40       	sbci	r21, 0x00	; 0
    7aa2:	48 f0       	brcs	.+18     	; 0x7ab6 <strncpy+0x1c>
    7aa4:	01 90       	ld	r0, Z+
    7aa6:	0d 92       	st	X+, r0
    7aa8:	00 20       	and	r0, r0
    7aaa:	c9 f7       	brne	.-14     	; 0x7a9e <strncpy+0x4>
    7aac:	01 c0       	rjmp	.+2      	; 0x7ab0 <strncpy+0x16>
    7aae:	1d 92       	st	X+, r1
    7ab0:	41 50       	subi	r20, 0x01	; 1
    7ab2:	50 40       	sbci	r21, 0x00	; 0
    7ab4:	e0 f7       	brcc	.-8      	; 0x7aae <strncpy+0x14>
    7ab6:	08 95       	ret

00007ab8 <itoa>:
    7ab8:	45 32       	cpi	r20, 0x25	; 37
    7aba:	51 05       	cpc	r21, r1
    7abc:	18 f4       	brcc	.+6      	; 0x7ac4 <itoa+0xc>
    7abe:	42 30       	cpi	r20, 0x02	; 2
    7ac0:	08 f0       	brcs	.+2      	; 0x7ac4 <itoa+0xc>
    7ac2:	04 c0       	rjmp	.+8      	; 0x7acc <__itoa_ncheck>
    7ac4:	fb 01       	movw	r30, r22
    7ac6:	10 82       	st	Z, r1
    7ac8:	cb 01       	movw	r24, r22
    7aca:	08 95       	ret

00007acc <__itoa_ncheck>:
    7acc:	bb 27       	eor	r27, r27
    7ace:	4a 30       	cpi	r20, 0x0A	; 10
    7ad0:	31 f4       	brne	.+12     	; 0x7ade <__itoa_ncheck+0x12>
    7ad2:	99 23       	and	r25, r25
    7ad4:	22 f4       	brpl	.+8      	; 0x7ade <__itoa_ncheck+0x12>
    7ad6:	bd e2       	ldi	r27, 0x2D	; 45
    7ad8:	90 95       	com	r25
    7ada:	81 95       	neg	r24
    7adc:	9f 4f       	sbci	r25, 0xFF	; 255
    7ade:	36 c0       	rjmp	.+108    	; 0x7b4c <__utoa_common>

00007ae0 <ultoa>:
    7ae0:	25 32       	cpi	r18, 0x25	; 37
    7ae2:	31 05       	cpc	r19, r1
    7ae4:	18 f4       	brcc	.+6      	; 0x7aec <ultoa+0xc>
    7ae6:	22 30       	cpi	r18, 0x02	; 2
    7ae8:	08 f0       	brcs	.+2      	; 0x7aec <ultoa+0xc>
    7aea:	04 c0       	rjmp	.+8      	; 0x7af4 <__ultoa_ncheck>
    7aec:	fa 01       	movw	r30, r20
    7aee:	10 82       	st	Z, r1
    7af0:	ca 01       	movw	r24, r20
    7af2:	08 95       	ret

00007af4 <__ultoa_ncheck>:
    7af4:	bb 27       	eor	r27, r27

00007af6 <__ultoa_common>:
    7af6:	fa 01       	movw	r30, r20
    7af8:	a6 2f       	mov	r26, r22
    7afa:	62 17       	cp	r22, r18
    7afc:	71 05       	cpc	r23, r1
    7afe:	81 05       	cpc	r24, r1
    7b00:	91 05       	cpc	r25, r1
    7b02:	33 0b       	sbc	r19, r19
    7b04:	30 fb       	bst	r19, 0
    7b06:	66 f0       	brts	.+24     	; 0x7b20 <__ultoa_common+0x2a>
    7b08:	aa 27       	eor	r26, r26
    7b0a:	66 0f       	add	r22, r22
    7b0c:	77 1f       	adc	r23, r23
    7b0e:	88 1f       	adc	r24, r24
    7b10:	99 1f       	adc	r25, r25
    7b12:	aa 1f       	adc	r26, r26
    7b14:	a2 17       	cp	r26, r18
    7b16:	10 f0       	brcs	.+4      	; 0x7b1c <__ultoa_common+0x26>
    7b18:	a2 1b       	sub	r26, r18
    7b1a:	63 95       	inc	r22
    7b1c:	38 50       	subi	r19, 0x08	; 8
    7b1e:	a9 f7       	brne	.-22     	; 0x7b0a <__ultoa_common+0x14>
    7b20:	a0 5d       	subi	r26, 0xD0	; 208
    7b22:	aa 33       	cpi	r26, 0x3A	; 58
    7b24:	08 f0       	brcs	.+2      	; 0x7b28 <__ultoa_common+0x32>
    7b26:	a9 5d       	subi	r26, 0xD9	; 217
    7b28:	a1 93       	st	Z+, r26
    7b2a:	36 f7       	brtc	.-52     	; 0x7af8 <__ultoa_common+0x2>
    7b2c:	b1 11       	cpse	r27, r1
    7b2e:	b1 93       	st	Z+, r27
    7b30:	10 82       	st	Z, r1
    7b32:	ca 01       	movw	r24, r20
    7b34:	74 c2       	rjmp	.+1256   	; 0x801e <strrev>

00007b36 <utoa>:
    7b36:	45 32       	cpi	r20, 0x25	; 37
    7b38:	51 05       	cpc	r21, r1
    7b3a:	18 f4       	brcc	.+6      	; 0x7b42 <utoa+0xc>
    7b3c:	42 30       	cpi	r20, 0x02	; 2
    7b3e:	08 f0       	brcs	.+2      	; 0x7b42 <utoa+0xc>
    7b40:	04 c0       	rjmp	.+8      	; 0x7b4a <__utoa_ncheck>
    7b42:	fb 01       	movw	r30, r22
    7b44:	10 82       	st	Z, r1
    7b46:	cb 01       	movw	r24, r22
    7b48:	08 95       	ret

00007b4a <__utoa_ncheck>:
    7b4a:	bb 27       	eor	r27, r27

00007b4c <__utoa_common>:
    7b4c:	fb 01       	movw	r30, r22
    7b4e:	55 27       	eor	r21, r21
    7b50:	aa 27       	eor	r26, r26
    7b52:	88 0f       	add	r24, r24
    7b54:	99 1f       	adc	r25, r25
    7b56:	aa 1f       	adc	r26, r26
    7b58:	a4 17       	cp	r26, r20
    7b5a:	10 f0       	brcs	.+4      	; 0x7b60 <__utoa_common+0x14>
    7b5c:	a4 1b       	sub	r26, r20
    7b5e:	83 95       	inc	r24
    7b60:	50 51       	subi	r21, 0x10	; 16
    7b62:	b9 f7       	brne	.-18     	; 0x7b52 <__utoa_common+0x6>
    7b64:	a0 5d       	subi	r26, 0xD0	; 208
    7b66:	aa 33       	cpi	r26, 0x3A	; 58
    7b68:	08 f0       	brcs	.+2      	; 0x7b6c <__utoa_common+0x20>
    7b6a:	a9 5d       	subi	r26, 0xD9	; 217
    7b6c:	a1 93       	st	Z+, r26
    7b6e:	00 97       	sbiw	r24, 0x00	; 0
    7b70:	79 f7       	brne	.-34     	; 0x7b50 <__utoa_common+0x4>
    7b72:	b1 11       	cpse	r27, r1
    7b74:	b1 93       	st	Z+, r27
    7b76:	11 92       	st	Z+, r1
    7b78:	cb 01       	movw	r24, r22
    7b7a:	51 c2       	rjmp	.+1186   	; 0x801e <strrev>

00007b7c <dtoa_prf>:
    7b7c:	8f 92       	push	r8
    7b7e:	9f 92       	push	r9
    7b80:	af 92       	push	r10
    7b82:	bf 92       	push	r11
    7b84:	cf 92       	push	r12
    7b86:	df 92       	push	r13
    7b88:	ef 92       	push	r14
    7b8a:	ff 92       	push	r15
    7b8c:	0f 93       	push	r16
    7b8e:	1f 93       	push	r17
    7b90:	cf 93       	push	r28
    7b92:	df 93       	push	r29
    7b94:	cd b7       	in	r28, 0x3d	; 61
    7b96:	de b7       	in	r29, 0x3e	; 62
    7b98:	29 97       	sbiw	r28, 0x09	; 9
    7b9a:	0f b6       	in	r0, 0x3f	; 63
    7b9c:	f8 94       	cli
    7b9e:	de bf       	out	0x3e, r29	; 62
    7ba0:	0f be       	out	0x3f, r0	; 63
    7ba2:	cd bf       	out	0x3d, r28	; 61
    7ba4:	6a 01       	movw	r12, r20
    7ba6:	12 2f       	mov	r17, r18
    7ba8:	b0 2e       	mov	r11, r16
    7baa:	2b e3       	ldi	r18, 0x3B	; 59
    7bac:	20 17       	cp	r18, r16
    7bae:	20 f0       	brcs	.+8      	; 0x7bb8 <dtoa_prf+0x3c>
    7bb0:	ff 24       	eor	r15, r15
    7bb2:	f3 94       	inc	r15
    7bb4:	f0 0e       	add	r15, r16
    7bb6:	02 c0       	rjmp	.+4      	; 0x7bbc <dtoa_prf+0x40>
    7bb8:	2c e3       	ldi	r18, 0x3C	; 60
    7bba:	f2 2e       	mov	r15, r18
    7bbc:	0f 2d       	mov	r16, r15
    7bbe:	27 e0       	ldi	r18, 0x07	; 7
    7bc0:	ae 01       	movw	r20, r28
    7bc2:	4f 5f       	subi	r20, 0xFF	; 255
    7bc4:	5f 4f       	sbci	r21, 0xFF	; 255
    7bc6:	50 d1       	rcall	.+672    	; 0x7e68 <__ftoa_engine>
    7bc8:	bc 01       	movw	r22, r24
    7bca:	49 81       	ldd	r20, Y+1	; 0x01
    7bcc:	84 2f       	mov	r24, r20
    7bce:	89 70       	andi	r24, 0x09	; 9
    7bd0:	81 30       	cpi	r24, 0x01	; 1
    7bd2:	31 f0       	breq	.+12     	; 0x7be0 <dtoa_prf+0x64>
    7bd4:	e1 fc       	sbrc	r14, 1
    7bd6:	06 c0       	rjmp	.+12     	; 0x7be4 <dtoa_prf+0x68>
    7bd8:	e0 fe       	sbrs	r14, 0
    7bda:	06 c0       	rjmp	.+12     	; 0x7be8 <dtoa_prf+0x6c>
    7bdc:	90 e2       	ldi	r25, 0x20	; 32
    7bde:	05 c0       	rjmp	.+10     	; 0x7bea <dtoa_prf+0x6e>
    7be0:	9d e2       	ldi	r25, 0x2D	; 45
    7be2:	03 c0       	rjmp	.+6      	; 0x7bea <dtoa_prf+0x6e>
    7be4:	9b e2       	ldi	r25, 0x2B	; 43
    7be6:	01 c0       	rjmp	.+2      	; 0x7bea <dtoa_prf+0x6e>
    7be8:	90 e0       	ldi	r25, 0x00	; 0
    7bea:	5e 2d       	mov	r21, r14
    7bec:	50 71       	andi	r21, 0x10	; 16
    7bee:	43 ff       	sbrs	r20, 3
    7bf0:	3c c0       	rjmp	.+120    	; 0x7c6a <dtoa_prf+0xee>
    7bf2:	91 11       	cpse	r25, r1
    7bf4:	02 c0       	rjmp	.+4      	; 0x7bfa <dtoa_prf+0x7e>
    7bf6:	83 e0       	ldi	r24, 0x03	; 3
    7bf8:	01 c0       	rjmp	.+2      	; 0x7bfc <dtoa_prf+0x80>
    7bfa:	84 e0       	ldi	r24, 0x04	; 4
    7bfc:	81 17       	cp	r24, r17
    7bfe:	18 f4       	brcc	.+6      	; 0x7c06 <dtoa_prf+0x8a>
    7c00:	21 2f       	mov	r18, r17
    7c02:	28 1b       	sub	r18, r24
    7c04:	01 c0       	rjmp	.+2      	; 0x7c08 <dtoa_prf+0x8c>
    7c06:	20 e0       	ldi	r18, 0x00	; 0
    7c08:	51 11       	cpse	r21, r1
    7c0a:	0b c0       	rjmp	.+22     	; 0x7c22 <dtoa_prf+0xa6>
    7c0c:	f6 01       	movw	r30, r12
    7c0e:	82 2f       	mov	r24, r18
    7c10:	30 e2       	ldi	r19, 0x20	; 32
    7c12:	88 23       	and	r24, r24
    7c14:	19 f0       	breq	.+6      	; 0x7c1c <dtoa_prf+0xa0>
    7c16:	31 93       	st	Z+, r19
    7c18:	81 50       	subi	r24, 0x01	; 1
    7c1a:	fb cf       	rjmp	.-10     	; 0x7c12 <dtoa_prf+0x96>
    7c1c:	c2 0e       	add	r12, r18
    7c1e:	d1 1c       	adc	r13, r1
    7c20:	20 e0       	ldi	r18, 0x00	; 0
    7c22:	99 23       	and	r25, r25
    7c24:	29 f0       	breq	.+10     	; 0x7c30 <dtoa_prf+0xb4>
    7c26:	d6 01       	movw	r26, r12
    7c28:	9c 93       	st	X, r25
    7c2a:	f6 01       	movw	r30, r12
    7c2c:	31 96       	adiw	r30, 0x01	; 1
    7c2e:	6f 01       	movw	r12, r30
    7c30:	c6 01       	movw	r24, r12
    7c32:	03 96       	adiw	r24, 0x03	; 3
    7c34:	e2 fe       	sbrs	r14, 2
    7c36:	0a c0       	rjmp	.+20     	; 0x7c4c <dtoa_prf+0xd0>
    7c38:	3e e4       	ldi	r19, 0x4E	; 78
    7c3a:	d6 01       	movw	r26, r12
    7c3c:	3c 93       	st	X, r19
    7c3e:	41 e4       	ldi	r20, 0x41	; 65
    7c40:	11 96       	adiw	r26, 0x01	; 1
    7c42:	4c 93       	st	X, r20
    7c44:	11 97       	sbiw	r26, 0x01	; 1
    7c46:	12 96       	adiw	r26, 0x02	; 2
    7c48:	3c 93       	st	X, r19
    7c4a:	06 c0       	rjmp	.+12     	; 0x7c58 <dtoa_prf+0xdc>
    7c4c:	3e e6       	ldi	r19, 0x6E	; 110
    7c4e:	f6 01       	movw	r30, r12
    7c50:	30 83       	st	Z, r19
    7c52:	41 e6       	ldi	r20, 0x61	; 97
    7c54:	41 83       	std	Z+1, r20	; 0x01
    7c56:	32 83       	std	Z+2, r19	; 0x02
    7c58:	fc 01       	movw	r30, r24
    7c5a:	32 2f       	mov	r19, r18
    7c5c:	40 e2       	ldi	r20, 0x20	; 32
    7c5e:	33 23       	and	r19, r19
    7c60:	09 f4       	brne	.+2      	; 0x7c64 <dtoa_prf+0xe8>
    7c62:	42 c0       	rjmp	.+132    	; 0x7ce8 <dtoa_prf+0x16c>
    7c64:	41 93       	st	Z+, r20
    7c66:	31 50       	subi	r19, 0x01	; 1
    7c68:	fa cf       	rjmp	.-12     	; 0x7c5e <dtoa_prf+0xe2>
    7c6a:	42 ff       	sbrs	r20, 2
    7c6c:	44 c0       	rjmp	.+136    	; 0x7cf6 <dtoa_prf+0x17a>
    7c6e:	91 11       	cpse	r25, r1
    7c70:	02 c0       	rjmp	.+4      	; 0x7c76 <dtoa_prf+0xfa>
    7c72:	83 e0       	ldi	r24, 0x03	; 3
    7c74:	01 c0       	rjmp	.+2      	; 0x7c78 <dtoa_prf+0xfc>
    7c76:	84 e0       	ldi	r24, 0x04	; 4
    7c78:	81 17       	cp	r24, r17
    7c7a:	18 f4       	brcc	.+6      	; 0x7c82 <dtoa_prf+0x106>
    7c7c:	21 2f       	mov	r18, r17
    7c7e:	28 1b       	sub	r18, r24
    7c80:	01 c0       	rjmp	.+2      	; 0x7c84 <dtoa_prf+0x108>
    7c82:	20 e0       	ldi	r18, 0x00	; 0
    7c84:	51 11       	cpse	r21, r1
    7c86:	0b c0       	rjmp	.+22     	; 0x7c9e <dtoa_prf+0x122>
    7c88:	f6 01       	movw	r30, r12
    7c8a:	82 2f       	mov	r24, r18
    7c8c:	30 e2       	ldi	r19, 0x20	; 32
    7c8e:	88 23       	and	r24, r24
    7c90:	19 f0       	breq	.+6      	; 0x7c98 <dtoa_prf+0x11c>
    7c92:	31 93       	st	Z+, r19
    7c94:	81 50       	subi	r24, 0x01	; 1
    7c96:	fb cf       	rjmp	.-10     	; 0x7c8e <dtoa_prf+0x112>
    7c98:	c2 0e       	add	r12, r18
    7c9a:	d1 1c       	adc	r13, r1
    7c9c:	20 e0       	ldi	r18, 0x00	; 0
    7c9e:	99 23       	and	r25, r25
    7ca0:	29 f0       	breq	.+10     	; 0x7cac <dtoa_prf+0x130>
    7ca2:	d6 01       	movw	r26, r12
    7ca4:	9c 93       	st	X, r25
    7ca6:	f6 01       	movw	r30, r12
    7ca8:	31 96       	adiw	r30, 0x01	; 1
    7caa:	6f 01       	movw	r12, r30
    7cac:	c6 01       	movw	r24, r12
    7cae:	03 96       	adiw	r24, 0x03	; 3
    7cb0:	e2 fe       	sbrs	r14, 2
    7cb2:	0b c0       	rjmp	.+22     	; 0x7cca <dtoa_prf+0x14e>
    7cb4:	39 e4       	ldi	r19, 0x49	; 73
    7cb6:	d6 01       	movw	r26, r12
    7cb8:	3c 93       	st	X, r19
    7cba:	3e e4       	ldi	r19, 0x4E	; 78
    7cbc:	11 96       	adiw	r26, 0x01	; 1
    7cbe:	3c 93       	st	X, r19
    7cc0:	11 97       	sbiw	r26, 0x01	; 1
    7cc2:	36 e4       	ldi	r19, 0x46	; 70
    7cc4:	12 96       	adiw	r26, 0x02	; 2
    7cc6:	3c 93       	st	X, r19
    7cc8:	07 c0       	rjmp	.+14     	; 0x7cd8 <dtoa_prf+0x15c>
    7cca:	39 e6       	ldi	r19, 0x69	; 105
    7ccc:	f6 01       	movw	r30, r12
    7cce:	30 83       	st	Z, r19
    7cd0:	3e e6       	ldi	r19, 0x6E	; 110
    7cd2:	31 83       	std	Z+1, r19	; 0x01
    7cd4:	36 e6       	ldi	r19, 0x66	; 102
    7cd6:	32 83       	std	Z+2, r19	; 0x02
    7cd8:	fc 01       	movw	r30, r24
    7cda:	32 2f       	mov	r19, r18
    7cdc:	40 e2       	ldi	r20, 0x20	; 32
    7cde:	33 23       	and	r19, r19
    7ce0:	19 f0       	breq	.+6      	; 0x7ce8 <dtoa_prf+0x16c>
    7ce2:	41 93       	st	Z+, r20
    7ce4:	31 50       	subi	r19, 0x01	; 1
    7ce6:	fb cf       	rjmp	.-10     	; 0x7cde <dtoa_prf+0x162>
    7ce8:	fc 01       	movw	r30, r24
    7cea:	e2 0f       	add	r30, r18
    7cec:	f1 1d       	adc	r31, r1
    7cee:	10 82       	st	Z, r1
    7cf0:	8e ef       	ldi	r24, 0xFE	; 254
    7cf2:	9f ef       	ldi	r25, 0xFF	; 255
    7cf4:	a6 c0       	rjmp	.+332    	; 0x7e42 <dtoa_prf+0x2c6>
    7cf6:	21 e0       	ldi	r18, 0x01	; 1
    7cf8:	30 e0       	ldi	r19, 0x00	; 0
    7cfa:	91 11       	cpse	r25, r1
    7cfc:	02 c0       	rjmp	.+4      	; 0x7d02 <dtoa_prf+0x186>
    7cfe:	20 e0       	ldi	r18, 0x00	; 0
    7d00:	30 e0       	ldi	r19, 0x00	; 0
    7d02:	16 16       	cp	r1, r22
    7d04:	17 06       	cpc	r1, r23
    7d06:	1c f4       	brge	.+6      	; 0x7d0e <dtoa_prf+0x192>
    7d08:	fb 01       	movw	r30, r22
    7d0a:	31 96       	adiw	r30, 0x01	; 1
    7d0c:	02 c0       	rjmp	.+4      	; 0x7d12 <dtoa_prf+0x196>
    7d0e:	e1 e0       	ldi	r30, 0x01	; 1
    7d10:	f0 e0       	ldi	r31, 0x00	; 0
    7d12:	2e 0f       	add	r18, r30
    7d14:	3f 1f       	adc	r19, r31
    7d16:	bb 20       	and	r11, r11
    7d18:	21 f0       	breq	.+8      	; 0x7d22 <dtoa_prf+0x1a6>
    7d1a:	eb 2d       	mov	r30, r11
    7d1c:	f0 e0       	ldi	r31, 0x00	; 0
    7d1e:	31 96       	adiw	r30, 0x01	; 1
    7d20:	02 c0       	rjmp	.+4      	; 0x7d26 <dtoa_prf+0x1aa>
    7d22:	e0 e0       	ldi	r30, 0x00	; 0
    7d24:	f0 e0       	ldi	r31, 0x00	; 0
    7d26:	2e 0f       	add	r18, r30
    7d28:	3f 1f       	adc	r19, r31
    7d2a:	e1 2f       	mov	r30, r17
    7d2c:	f0 e0       	ldi	r31, 0x00	; 0
    7d2e:	2e 17       	cp	r18, r30
    7d30:	3f 07       	cpc	r19, r31
    7d32:	1c f4       	brge	.+6      	; 0x7d3a <dtoa_prf+0x1be>
    7d34:	12 1b       	sub	r17, r18
    7d36:	21 2f       	mov	r18, r17
    7d38:	01 c0       	rjmp	.+2      	; 0x7d3c <dtoa_prf+0x1c0>
    7d3a:	20 e0       	ldi	r18, 0x00	; 0
    7d3c:	8e 2d       	mov	r24, r14
    7d3e:	88 71       	andi	r24, 0x18	; 24
    7d40:	59 f4       	brne	.+22     	; 0x7d58 <dtoa_prf+0x1dc>
    7d42:	f6 01       	movw	r30, r12
    7d44:	82 2f       	mov	r24, r18
    7d46:	30 e2       	ldi	r19, 0x20	; 32
    7d48:	88 23       	and	r24, r24
    7d4a:	19 f0       	breq	.+6      	; 0x7d52 <dtoa_prf+0x1d6>
    7d4c:	31 93       	st	Z+, r19
    7d4e:	81 50       	subi	r24, 0x01	; 1
    7d50:	fb cf       	rjmp	.-10     	; 0x7d48 <dtoa_prf+0x1cc>
    7d52:	c2 0e       	add	r12, r18
    7d54:	d1 1c       	adc	r13, r1
    7d56:	20 e0       	ldi	r18, 0x00	; 0
    7d58:	99 23       	and	r25, r25
    7d5a:	29 f0       	breq	.+10     	; 0x7d66 <dtoa_prf+0x1ea>
    7d5c:	d6 01       	movw	r26, r12
    7d5e:	9c 93       	st	X, r25
    7d60:	f6 01       	movw	r30, r12
    7d62:	31 96       	adiw	r30, 0x01	; 1
    7d64:	6f 01       	movw	r12, r30
    7d66:	51 11       	cpse	r21, r1
    7d68:	0b c0       	rjmp	.+22     	; 0x7d80 <dtoa_prf+0x204>
    7d6a:	f6 01       	movw	r30, r12
    7d6c:	82 2f       	mov	r24, r18
    7d6e:	90 e3       	ldi	r25, 0x30	; 48
    7d70:	88 23       	and	r24, r24
    7d72:	19 f0       	breq	.+6      	; 0x7d7a <dtoa_prf+0x1fe>
    7d74:	91 93       	st	Z+, r25
    7d76:	81 50       	subi	r24, 0x01	; 1
    7d78:	fb cf       	rjmp	.-10     	; 0x7d70 <dtoa_prf+0x1f4>
    7d7a:	c2 0e       	add	r12, r18
    7d7c:	d1 1c       	adc	r13, r1
    7d7e:	20 e0       	ldi	r18, 0x00	; 0
    7d80:	0f 2d       	mov	r16, r15
    7d82:	06 0f       	add	r16, r22
    7d84:	9a 81       	ldd	r25, Y+2	; 0x02
    7d86:	34 2f       	mov	r19, r20
    7d88:	30 71       	andi	r19, 0x10	; 16
    7d8a:	44 ff       	sbrs	r20, 4
    7d8c:	03 c0       	rjmp	.+6      	; 0x7d94 <dtoa_prf+0x218>
    7d8e:	91 33       	cpi	r25, 0x31	; 49
    7d90:	09 f4       	brne	.+2      	; 0x7d94 <dtoa_prf+0x218>
    7d92:	01 50       	subi	r16, 0x01	; 1
    7d94:	10 16       	cp	r1, r16
    7d96:	24 f4       	brge	.+8      	; 0x7da0 <dtoa_prf+0x224>
    7d98:	09 30       	cpi	r16, 0x09	; 9
    7d9a:	18 f0       	brcs	.+6      	; 0x7da2 <dtoa_prf+0x226>
    7d9c:	08 e0       	ldi	r16, 0x08	; 8
    7d9e:	01 c0       	rjmp	.+2      	; 0x7da2 <dtoa_prf+0x226>
    7da0:	01 e0       	ldi	r16, 0x01	; 1
    7da2:	ab 01       	movw	r20, r22
    7da4:	77 ff       	sbrs	r23, 7
    7da6:	02 c0       	rjmp	.+4      	; 0x7dac <dtoa_prf+0x230>
    7da8:	40 e0       	ldi	r20, 0x00	; 0
    7daa:	50 e0       	ldi	r21, 0x00	; 0
    7dac:	fb 01       	movw	r30, r22
    7dae:	e4 1b       	sub	r30, r20
    7db0:	f5 0b       	sbc	r31, r21
    7db2:	a1 e0       	ldi	r26, 0x01	; 1
    7db4:	b0 e0       	ldi	r27, 0x00	; 0
    7db6:	ac 0f       	add	r26, r28
    7db8:	bd 1f       	adc	r27, r29
    7dba:	ea 0f       	add	r30, r26
    7dbc:	fb 1f       	adc	r31, r27
    7dbe:	8e e2       	ldi	r24, 0x2E	; 46
    7dc0:	a8 2e       	mov	r10, r24
    7dc2:	4b 01       	movw	r8, r22
    7dc4:	80 1a       	sub	r8, r16
    7dc6:	91 08       	sbc	r9, r1
    7dc8:	0b 2d       	mov	r16, r11
    7dca:	10 e0       	ldi	r17, 0x00	; 0
    7dcc:	11 95       	neg	r17
    7dce:	01 95       	neg	r16
    7dd0:	11 09       	sbc	r17, r1
    7dd2:	4f 3f       	cpi	r20, 0xFF	; 255
    7dd4:	bf ef       	ldi	r27, 0xFF	; 255
    7dd6:	5b 07       	cpc	r21, r27
    7dd8:	21 f4       	brne	.+8      	; 0x7de2 <dtoa_prf+0x266>
    7dda:	d6 01       	movw	r26, r12
    7ddc:	ac 92       	st	X, r10
    7dde:	11 96       	adiw	r26, 0x01	; 1
    7de0:	6d 01       	movw	r12, r26
    7de2:	64 17       	cp	r22, r20
    7de4:	75 07       	cpc	r23, r21
    7de6:	2c f0       	brlt	.+10     	; 0x7df2 <dtoa_prf+0x276>
    7de8:	84 16       	cp	r8, r20
    7dea:	95 06       	cpc	r9, r21
    7dec:	14 f4       	brge	.+4      	; 0x7df2 <dtoa_prf+0x276>
    7dee:	81 81       	ldd	r24, Z+1	; 0x01
    7df0:	01 c0       	rjmp	.+2      	; 0x7df4 <dtoa_prf+0x278>
    7df2:	80 e3       	ldi	r24, 0x30	; 48
    7df4:	41 50       	subi	r20, 0x01	; 1
    7df6:	51 09       	sbc	r21, r1
    7df8:	31 96       	adiw	r30, 0x01	; 1
    7dfa:	d6 01       	movw	r26, r12
    7dfc:	11 96       	adiw	r26, 0x01	; 1
    7dfe:	7d 01       	movw	r14, r26
    7e00:	40 17       	cp	r20, r16
    7e02:	51 07       	cpc	r21, r17
    7e04:	24 f0       	brlt	.+8      	; 0x7e0e <dtoa_prf+0x292>
    7e06:	d6 01       	movw	r26, r12
    7e08:	8c 93       	st	X, r24
    7e0a:	67 01       	movw	r12, r14
    7e0c:	e2 cf       	rjmp	.-60     	; 0x7dd2 <dtoa_prf+0x256>
    7e0e:	64 17       	cp	r22, r20
    7e10:	75 07       	cpc	r23, r21
    7e12:	39 f4       	brne	.+14     	; 0x7e22 <dtoa_prf+0x2a6>
    7e14:	96 33       	cpi	r25, 0x36	; 54
    7e16:	20 f4       	brcc	.+8      	; 0x7e20 <dtoa_prf+0x2a4>
    7e18:	95 33       	cpi	r25, 0x35	; 53
    7e1a:	19 f4       	brne	.+6      	; 0x7e22 <dtoa_prf+0x2a6>
    7e1c:	31 11       	cpse	r19, r1
    7e1e:	01 c0       	rjmp	.+2      	; 0x7e22 <dtoa_prf+0x2a6>
    7e20:	81 e3       	ldi	r24, 0x31	; 49
    7e22:	f6 01       	movw	r30, r12
    7e24:	80 83       	st	Z, r24
    7e26:	f7 01       	movw	r30, r14
    7e28:	82 2f       	mov	r24, r18
    7e2a:	90 e2       	ldi	r25, 0x20	; 32
    7e2c:	88 23       	and	r24, r24
    7e2e:	19 f0       	breq	.+6      	; 0x7e36 <dtoa_prf+0x2ba>
    7e30:	91 93       	st	Z+, r25
    7e32:	81 50       	subi	r24, 0x01	; 1
    7e34:	fb cf       	rjmp	.-10     	; 0x7e2c <dtoa_prf+0x2b0>
    7e36:	f7 01       	movw	r30, r14
    7e38:	e2 0f       	add	r30, r18
    7e3a:	f1 1d       	adc	r31, r1
    7e3c:	10 82       	st	Z, r1
    7e3e:	80 e0       	ldi	r24, 0x00	; 0
    7e40:	90 e0       	ldi	r25, 0x00	; 0
    7e42:	29 96       	adiw	r28, 0x09	; 9
    7e44:	0f b6       	in	r0, 0x3f	; 63
    7e46:	f8 94       	cli
    7e48:	de bf       	out	0x3e, r29	; 62
    7e4a:	0f be       	out	0x3f, r0	; 63
    7e4c:	cd bf       	out	0x3d, r28	; 61
    7e4e:	df 91       	pop	r29
    7e50:	cf 91       	pop	r28
    7e52:	1f 91       	pop	r17
    7e54:	0f 91       	pop	r16
    7e56:	ff 90       	pop	r15
    7e58:	ef 90       	pop	r14
    7e5a:	df 90       	pop	r13
    7e5c:	cf 90       	pop	r12
    7e5e:	bf 90       	pop	r11
    7e60:	af 90       	pop	r10
    7e62:	9f 90       	pop	r9
    7e64:	8f 90       	pop	r8
    7e66:	08 95       	ret

00007e68 <__ftoa_engine>:
    7e68:	28 30       	cpi	r18, 0x08	; 8
    7e6a:	08 f0       	brcs	.+2      	; 0x7e6e <__ftoa_engine+0x6>
    7e6c:	27 e0       	ldi	r18, 0x07	; 7
    7e6e:	33 27       	eor	r19, r19
    7e70:	da 01       	movw	r26, r20
    7e72:	99 0f       	add	r25, r25
    7e74:	31 1d       	adc	r19, r1
    7e76:	87 fd       	sbrc	r24, 7
    7e78:	91 60       	ori	r25, 0x01	; 1
    7e7a:	00 96       	adiw	r24, 0x00	; 0
    7e7c:	61 05       	cpc	r22, r1
    7e7e:	71 05       	cpc	r23, r1
    7e80:	39 f4       	brne	.+14     	; 0x7e90 <__ftoa_engine+0x28>
    7e82:	32 60       	ori	r19, 0x02	; 2
    7e84:	2e 5f       	subi	r18, 0xFE	; 254
    7e86:	3d 93       	st	X+, r19
    7e88:	30 e3       	ldi	r19, 0x30	; 48
    7e8a:	2a 95       	dec	r18
    7e8c:	e1 f7       	brne	.-8      	; 0x7e86 <__ftoa_engine+0x1e>
    7e8e:	08 95       	ret
    7e90:	9f 3f       	cpi	r25, 0xFF	; 255
    7e92:	30 f0       	brcs	.+12     	; 0x7ea0 <__ftoa_engine+0x38>
    7e94:	80 38       	cpi	r24, 0x80	; 128
    7e96:	71 05       	cpc	r23, r1
    7e98:	61 05       	cpc	r22, r1
    7e9a:	09 f0       	breq	.+2      	; 0x7e9e <__ftoa_engine+0x36>
    7e9c:	3c 5f       	subi	r19, 0xFC	; 252
    7e9e:	3c 5f       	subi	r19, 0xFC	; 252
    7ea0:	3d 93       	st	X+, r19
    7ea2:	91 30       	cpi	r25, 0x01	; 1
    7ea4:	08 f0       	brcs	.+2      	; 0x7ea8 <__ftoa_engine+0x40>
    7ea6:	80 68       	ori	r24, 0x80	; 128
    7ea8:	91 1d       	adc	r25, r1
    7eaa:	df 93       	push	r29
    7eac:	cf 93       	push	r28
    7eae:	1f 93       	push	r17
    7eb0:	0f 93       	push	r16
    7eb2:	ff 92       	push	r15
    7eb4:	ef 92       	push	r14
    7eb6:	19 2f       	mov	r17, r25
    7eb8:	98 7f       	andi	r25, 0xF8	; 248
    7eba:	96 95       	lsr	r25
    7ebc:	e9 2f       	mov	r30, r25
    7ebe:	96 95       	lsr	r25
    7ec0:	96 95       	lsr	r25
    7ec2:	e9 0f       	add	r30, r25
    7ec4:	ff 27       	eor	r31, r31
    7ec6:	ec 5d       	subi	r30, 0xDC	; 220
    7ec8:	fe 4f       	sbci	r31, 0xFE	; 254
    7eca:	99 27       	eor	r25, r25
    7ecc:	33 27       	eor	r19, r19
    7ece:	ee 24       	eor	r14, r14
    7ed0:	ff 24       	eor	r15, r15
    7ed2:	a7 01       	movw	r20, r14
    7ed4:	e7 01       	movw	r28, r14
    7ed6:	05 90       	lpm	r0, Z+
    7ed8:	08 94       	sec
    7eda:	07 94       	ror	r0
    7edc:	28 f4       	brcc	.+10     	; 0x7ee8 <__ftoa_engine+0x80>
    7ede:	36 0f       	add	r19, r22
    7ee0:	e7 1e       	adc	r14, r23
    7ee2:	f8 1e       	adc	r15, r24
    7ee4:	49 1f       	adc	r20, r25
    7ee6:	51 1d       	adc	r21, r1
    7ee8:	66 0f       	add	r22, r22
    7eea:	77 1f       	adc	r23, r23
    7eec:	88 1f       	adc	r24, r24
    7eee:	99 1f       	adc	r25, r25
    7ef0:	06 94       	lsr	r0
    7ef2:	a1 f7       	brne	.-24     	; 0x7edc <__ftoa_engine+0x74>
    7ef4:	05 90       	lpm	r0, Z+
    7ef6:	07 94       	ror	r0
    7ef8:	28 f4       	brcc	.+10     	; 0x7f04 <__ftoa_engine+0x9c>
    7efa:	e7 0e       	add	r14, r23
    7efc:	f8 1e       	adc	r15, r24
    7efe:	49 1f       	adc	r20, r25
    7f00:	56 1f       	adc	r21, r22
    7f02:	c1 1d       	adc	r28, r1
    7f04:	77 0f       	add	r23, r23
    7f06:	88 1f       	adc	r24, r24
    7f08:	99 1f       	adc	r25, r25
    7f0a:	66 1f       	adc	r22, r22
    7f0c:	06 94       	lsr	r0
    7f0e:	a1 f7       	brne	.-24     	; 0x7ef8 <__ftoa_engine+0x90>
    7f10:	05 90       	lpm	r0, Z+
    7f12:	07 94       	ror	r0
    7f14:	28 f4       	brcc	.+10     	; 0x7f20 <__ftoa_engine+0xb8>
    7f16:	f8 0e       	add	r15, r24
    7f18:	49 1f       	adc	r20, r25
    7f1a:	56 1f       	adc	r21, r22
    7f1c:	c7 1f       	adc	r28, r23
    7f1e:	d1 1d       	adc	r29, r1
    7f20:	88 0f       	add	r24, r24
    7f22:	99 1f       	adc	r25, r25
    7f24:	66 1f       	adc	r22, r22
    7f26:	77 1f       	adc	r23, r23
    7f28:	06 94       	lsr	r0
    7f2a:	a1 f7       	brne	.-24     	; 0x7f14 <__ftoa_engine+0xac>
    7f2c:	05 90       	lpm	r0, Z+
    7f2e:	07 94       	ror	r0
    7f30:	20 f4       	brcc	.+8      	; 0x7f3a <__ftoa_engine+0xd2>
    7f32:	49 0f       	add	r20, r25
    7f34:	56 1f       	adc	r21, r22
    7f36:	c7 1f       	adc	r28, r23
    7f38:	d8 1f       	adc	r29, r24
    7f3a:	99 0f       	add	r25, r25
    7f3c:	66 1f       	adc	r22, r22
    7f3e:	77 1f       	adc	r23, r23
    7f40:	88 1f       	adc	r24, r24
    7f42:	06 94       	lsr	r0
    7f44:	a9 f7       	brne	.-22     	; 0x7f30 <__ftoa_engine+0xc8>
    7f46:	84 91       	lpm	r24, Z
    7f48:	10 95       	com	r17
    7f4a:	17 70       	andi	r17, 0x07	; 7
    7f4c:	41 f0       	breq	.+16     	; 0x7f5e <__ftoa_engine+0xf6>
    7f4e:	d6 95       	lsr	r29
    7f50:	c7 95       	ror	r28
    7f52:	57 95       	ror	r21
    7f54:	47 95       	ror	r20
    7f56:	f7 94       	ror	r15
    7f58:	e7 94       	ror	r14
    7f5a:	1a 95       	dec	r17
    7f5c:	c1 f7       	brne	.-16     	; 0x7f4e <__ftoa_engine+0xe6>
    7f5e:	ea ec       	ldi	r30, 0xCA	; 202
    7f60:	f0 e0       	ldi	r31, 0x00	; 0
    7f62:	68 94       	set
    7f64:	15 90       	lpm	r1, Z+
    7f66:	15 91       	lpm	r17, Z+
    7f68:	35 91       	lpm	r19, Z+
    7f6a:	65 91       	lpm	r22, Z+
    7f6c:	95 91       	lpm	r25, Z+
    7f6e:	05 90       	lpm	r0, Z+
    7f70:	7f e2       	ldi	r23, 0x2F	; 47
    7f72:	73 95       	inc	r23
    7f74:	e1 18       	sub	r14, r1
    7f76:	f1 0a       	sbc	r15, r17
    7f78:	43 0b       	sbc	r20, r19
    7f7a:	56 0b       	sbc	r21, r22
    7f7c:	c9 0b       	sbc	r28, r25
    7f7e:	d0 09       	sbc	r29, r0
    7f80:	c0 f7       	brcc	.-16     	; 0x7f72 <__ftoa_engine+0x10a>
    7f82:	e1 0c       	add	r14, r1
    7f84:	f1 1e       	adc	r15, r17
    7f86:	43 1f       	adc	r20, r19
    7f88:	56 1f       	adc	r21, r22
    7f8a:	c9 1f       	adc	r28, r25
    7f8c:	d0 1d       	adc	r29, r0
    7f8e:	7e f4       	brtc	.+30     	; 0x7fae <__ftoa_engine+0x146>
    7f90:	70 33       	cpi	r23, 0x30	; 48
    7f92:	11 f4       	brne	.+4      	; 0x7f98 <__ftoa_engine+0x130>
    7f94:	8a 95       	dec	r24
    7f96:	e6 cf       	rjmp	.-52     	; 0x7f64 <__ftoa_engine+0xfc>
    7f98:	e8 94       	clt
    7f9a:	01 50       	subi	r16, 0x01	; 1
    7f9c:	30 f0       	brcs	.+12     	; 0x7faa <__ftoa_engine+0x142>
    7f9e:	08 0f       	add	r16, r24
    7fa0:	0a f4       	brpl	.+2      	; 0x7fa4 <__ftoa_engine+0x13c>
    7fa2:	00 27       	eor	r16, r16
    7fa4:	02 17       	cp	r16, r18
    7fa6:	08 f4       	brcc	.+2      	; 0x7faa <__ftoa_engine+0x142>
    7fa8:	20 2f       	mov	r18, r16
    7faa:	23 95       	inc	r18
    7fac:	02 2f       	mov	r16, r18
    7fae:	7a 33       	cpi	r23, 0x3A	; 58
    7fb0:	28 f0       	brcs	.+10     	; 0x7fbc <__ftoa_engine+0x154>
    7fb2:	79 e3       	ldi	r23, 0x39	; 57
    7fb4:	7d 93       	st	X+, r23
    7fb6:	2a 95       	dec	r18
    7fb8:	e9 f7       	brne	.-6      	; 0x7fb4 <__ftoa_engine+0x14c>
    7fba:	10 c0       	rjmp	.+32     	; 0x7fdc <__ftoa_engine+0x174>
    7fbc:	7d 93       	st	X+, r23
    7fbe:	2a 95       	dec	r18
    7fc0:	89 f6       	brne	.-94     	; 0x7f64 <__ftoa_engine+0xfc>
    7fc2:	06 94       	lsr	r0
    7fc4:	97 95       	ror	r25
    7fc6:	67 95       	ror	r22
    7fc8:	37 95       	ror	r19
    7fca:	17 95       	ror	r17
    7fcc:	17 94       	ror	r1
    7fce:	e1 18       	sub	r14, r1
    7fd0:	f1 0a       	sbc	r15, r17
    7fd2:	43 0b       	sbc	r20, r19
    7fd4:	56 0b       	sbc	r21, r22
    7fd6:	c9 0b       	sbc	r28, r25
    7fd8:	d0 09       	sbc	r29, r0
    7fda:	98 f0       	brcs	.+38     	; 0x8002 <__ftoa_engine+0x19a>
    7fdc:	23 95       	inc	r18
    7fde:	7e 91       	ld	r23, -X
    7fe0:	73 95       	inc	r23
    7fe2:	7a 33       	cpi	r23, 0x3A	; 58
    7fe4:	08 f0       	brcs	.+2      	; 0x7fe8 <__ftoa_engine+0x180>
    7fe6:	70 e3       	ldi	r23, 0x30	; 48
    7fe8:	7c 93       	st	X, r23
    7fea:	20 13       	cpse	r18, r16
    7fec:	b8 f7       	brcc	.-18     	; 0x7fdc <__ftoa_engine+0x174>
    7fee:	7e 91       	ld	r23, -X
    7ff0:	70 61       	ori	r23, 0x10	; 16
    7ff2:	7d 93       	st	X+, r23
    7ff4:	30 f0       	brcs	.+12     	; 0x8002 <__ftoa_engine+0x19a>
    7ff6:	83 95       	inc	r24
    7ff8:	71 e3       	ldi	r23, 0x31	; 49
    7ffa:	7d 93       	st	X+, r23
    7ffc:	70 e3       	ldi	r23, 0x30	; 48
    7ffe:	2a 95       	dec	r18
    8000:	e1 f7       	brne	.-8      	; 0x7ffa <__ftoa_engine+0x192>
    8002:	11 24       	eor	r1, r1
    8004:	ef 90       	pop	r14
    8006:	ff 90       	pop	r15
    8008:	0f 91       	pop	r16
    800a:	1f 91       	pop	r17
    800c:	cf 91       	pop	r28
    800e:	df 91       	pop	r29
    8010:	99 27       	eor	r25, r25
    8012:	87 fd       	sbrc	r24, 7
    8014:	90 95       	com	r25
    8016:	08 95       	ret

00008018 <__ctype_isfalse>:
    8018:	99 27       	eor	r25, r25
    801a:	88 27       	eor	r24, r24

0000801c <__ctype_istrue>:
    801c:	08 95       	ret

0000801e <strrev>:
    801e:	dc 01       	movw	r26, r24
    8020:	fc 01       	movw	r30, r24
    8022:	67 2f       	mov	r22, r23
    8024:	71 91       	ld	r23, Z+
    8026:	77 23       	and	r23, r23
    8028:	e1 f7       	brne	.-8      	; 0x8022 <strrev+0x4>
    802a:	32 97       	sbiw	r30, 0x02	; 2
    802c:	04 c0       	rjmp	.+8      	; 0x8036 <strrev+0x18>
    802e:	7c 91       	ld	r23, X
    8030:	6d 93       	st	X+, r22
    8032:	70 83       	st	Z, r23
    8034:	62 91       	ld	r22, -Z
    8036:	ae 17       	cp	r26, r30
    8038:	bf 07       	cpc	r27, r31
    803a:	c8 f3       	brcs	.-14     	; 0x802e <strrev+0x10>
    803c:	08 95       	ret

0000803e <eeprom_read_byte>:
    803e:	f9 99       	sbic	0x1f, 1	; 31
    8040:	fe cf       	rjmp	.-4      	; 0x803e <eeprom_read_byte>
    8042:	92 bd       	out	0x22, r25	; 34
    8044:	81 bd       	out	0x21, r24	; 33
    8046:	f8 9a       	sbi	0x1f, 0	; 31
    8048:	99 27       	eor	r25, r25
    804a:	80 b5       	in	r24, 0x20	; 32
    804c:	08 95       	ret

0000804e <eeprom_write_byte>:
    804e:	26 2f       	mov	r18, r22

00008050 <eeprom_write_r18>:
    8050:	f9 99       	sbic	0x1f, 1	; 31
    8052:	fe cf       	rjmp	.-4      	; 0x8050 <eeprom_write_r18>
    8054:	1f ba       	out	0x1f, r1	; 31
    8056:	92 bd       	out	0x22, r25	; 34
    8058:	81 bd       	out	0x21, r24	; 33
    805a:	20 bd       	out	0x20, r18	; 32
    805c:	0f b6       	in	r0, 0x3f	; 63
    805e:	f8 94       	cli
    8060:	fa 9a       	sbi	0x1f, 2	; 31
    8062:	f9 9a       	sbi	0x1f, 1	; 31
    8064:	0f be       	out	0x3f, r0	; 63
    8066:	01 96       	adiw	r24, 0x01	; 1
    8068:	08 95       	ret

0000806a <__do_global_dtors>:
    806a:	11 e0       	ldi	r17, 0x01	; 1
    806c:	c2 e6       	ldi	r28, 0x62	; 98
    806e:	d1 e0       	ldi	r29, 0x01	; 1
    8070:	03 c0       	rjmp	.+6      	; 0x8078 <__do_global_dtors+0xe>
    8072:	fe 01       	movw	r30, r28
    8074:	94 da       	rcall	.-2776   	; 0x759e <__tablejump2__>
    8076:	21 96       	adiw	r28, 0x01	; 1
    8078:	c3 36       	cpi	r28, 0x63	; 99
    807a:	d1 07       	cpc	r29, r17
    807c:	d1 f7       	brne	.-12     	; 0x8072 <__do_global_dtors+0x8>
    807e:	f8 94       	cli

00008080 <__stop_program>:
    8080:	ff cf       	rjmp	.-2      	; 0x8080 <__stop_program>
