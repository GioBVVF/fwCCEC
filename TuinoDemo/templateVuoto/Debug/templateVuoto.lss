
templateVuoto.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000097e  00800100  000089d6  00008a6a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000089d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000352  00800a7e  00800a7e  000093e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000093e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00009418  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000012f8  00000000  00000000  00009458  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0003d120  00000000  00000000  0000a750  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00007699  00000000  00000000  00047870  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000c467  00000000  00000000  0004ef09  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00004314  00000000  00000000  0005b370  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000089a9  00000000  00000000  0005f684  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00019a5a  00000000  00000000  0006802d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001388  00000000  00000000  00081a87  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	61 c1       	rjmp	.+706    	; 0x2c4 <__dtors_end>
       2:	00 00       	nop
       4:	89 c1       	rjmp	.+786    	; 0x318 <__bad_interrupt>
       6:	00 00       	nop
       8:	87 c1       	rjmp	.+782    	; 0x318 <__bad_interrupt>
       a:	00 00       	nop
       c:	85 c1       	rjmp	.+778    	; 0x318 <__bad_interrupt>
       e:	00 00       	nop
      10:	0c 94 0c 18 	jmp	0x3018	; 0x3018 <__vector_4>
      14:	81 c1       	rjmp	.+770    	; 0x318 <__bad_interrupt>
      16:	00 00       	nop
      18:	7f c1       	rjmp	.+766    	; 0x318 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	0c 94 62 18 	jmp	0x30c4	; 0x30c4 <__vector_7>
      20:	7b c1       	rjmp	.+758    	; 0x318 <__bad_interrupt>
      22:	00 00       	nop
      24:	79 c1       	rjmp	.+754    	; 0x318 <__bad_interrupt>
      26:	00 00       	nop
      28:	77 c1       	rjmp	.+750    	; 0x318 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	75 c1       	rjmp	.+746    	; 0x318 <__bad_interrupt>
      2e:	00 00       	nop
      30:	73 c1       	rjmp	.+742    	; 0x318 <__bad_interrupt>
      32:	00 00       	nop
      34:	71 c1       	rjmp	.+738    	; 0x318 <__bad_interrupt>
      36:	00 00       	nop
      38:	6f c1       	rjmp	.+734    	; 0x318 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6d c1       	rjmp	.+730    	; 0x318 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 0a 39 	jmp	0x7214	; 0x7214 <__vector_16>
      44:	69 c1       	rjmp	.+722    	; 0x318 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 f8 36 	jmp	0x6df0	; 0x6df0 <__vector_18>
      4c:	0c 94 2a 37 	jmp	0x6e54	; 0x6e54 <__vector_19>
      50:	63 c1       	rjmp	.+710    	; 0x318 <__bad_interrupt>
      52:	00 00       	nop
      54:	61 c1       	rjmp	.+706    	; 0x318 <__bad_interrupt>
      56:	00 00       	nop
      58:	5f c1       	rjmp	.+702    	; 0x318 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5d c1       	rjmp	.+698    	; 0x318 <__bad_interrupt>
      5e:	00 00       	nop
      60:	5b c1       	rjmp	.+694    	; 0x318 <__bad_interrupt>
      62:	00 00       	nop
      64:	59 c1       	rjmp	.+690    	; 0x318 <__bad_interrupt>
      66:	00 00       	nop
      68:	0c 94 14 33 	jmp	0x6628	; 0x6628 <__vector_26>
      6c:	55 c1       	rjmp	.+682    	; 0x318 <__bad_interrupt>
      6e:	00 00       	nop
      70:	53 c1       	rjmp	.+678    	; 0x318 <__bad_interrupt>
      72:	00 00       	nop
      74:	51 c1       	rjmp	.+674    	; 0x318 <__bad_interrupt>
      76:	00 00       	nop
      78:	4f c1       	rjmp	.+670    	; 0x318 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4d c1       	rjmp	.+666    	; 0x318 <__bad_interrupt>
      7e:	00 00       	nop
      80:	4b c1       	rjmp	.+662    	; 0x318 <__bad_interrupt>
      82:	00 00       	nop
      84:	49 c1       	rjmp	.+658    	; 0x318 <__bad_interrupt>
      86:	00 00       	nop
      88:	47 c1       	rjmp	.+654    	; 0x318 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	96 0f       	add	r25, r22
      8e:	ec 0f       	add	r30, r28
      90:	13 10       	cpse	r1, r3
      92:	4f 10       	cpse	r4, r15
      94:	32 11       	cpse	r19, r2
      96:	be 11       	cpse	r27, r14
      98:	b4 12       	cpse	r11, r20
      9a:	14 13       	cpse	r17, r20
      9c:	a4 13       	cpse	r26, r20
      9e:	90 14       	cp	r9, r0
      a0:	01 15       	cp	r16, r1
      a2:	ab 21       	and	r26, r11
      a4:	c2 21       	and	r28, r2
      a6:	c2 21       	and	r28, r2
      a8:	bf 21       	and	r27, r15
      aa:	c2 21       	and	r28, r2
      ac:	a9 21       	and	r26, r9
      ae:	c2 21       	and	r28, r2
      b0:	c2 21       	and	r28, r2
      b2:	c2 21       	and	r28, r2
      b4:	9d 21       	and	r25, r13
      b6:	c2 21       	and	r28, r2
      b8:	c2 21       	and	r28, r2
      ba:	b2 21       	and	r27, r2
      bc:	bd 21       	and	r27, r13
      be:	bb 21       	and	r27, r11
      c0:	c2 21       	and	r28, r2
      c2:	c2 21       	and	r28, r2
      c4:	c2 21       	and	r28, r2
      c6:	b9 21       	and	r27, r9

000000c8 <__trampolines_end>:
      c8:	00 40       	sbci	r16, 0x00	; 0
      ca:	7a 10       	cpse	r7, r10
      cc:	f3 5a       	subi	r31, 0xA3	; 163
      ce:	00 a0       	ldd	r0, Z+32	; 0x20
      d0:	72 4e       	sbci	r23, 0xE2	; 226
      d2:	18 09       	sbc	r17, r8
      d4:	00 10       	cpse	r0, r0
      d6:	a5 d4       	rcall	.+2378   	; 0xa22 <_Z14leggiTAG_Mezzob+0x94>
      d8:	e8 00       	.word	0x00e8	; ????
      da:	00 e8       	ldi	r16, 0x80	; 128
      dc:	76 48       	sbci	r23, 0x86	; 134
      de:	17 00       	.word	0x0017	; ????
      e0:	00 e4       	ldi	r16, 0x40	; 64
      e2:	0b 54       	subi	r16, 0x4B	; 75
      e4:	02 00       	.word	0x0002	; ????
      e6:	00 ca       	rjmp	.-3072   	; 0xfffff4e8 <__eeprom_end+0xff7ef4e8>
      e8:	9a 3b       	cpi	r25, 0xBA	; 186
      ea:	00 00       	nop
      ec:	00 e1       	ldi	r16, 0x10	; 16
      ee:	f5 05       	cpc	r31, r5
      f0:	00 00       	nop
      f2:	80 96       	adiw	r24, 0x20	; 32
      f4:	98 00       	.word	0x0098	; ????
      f6:	00 00       	nop
      f8:	40 42       	sbci	r20, 0x20	; 32
      fa:	0f 00       	.word	0x000f	; ????
      fc:	00 00       	nop
      fe:	a0 86       	std	Z+8, r10	; 0x08
     100:	01 00       	.word	0x0001	; ????
     102:	00 00       	nop
     104:	10 27       	eor	r17, r16
     106:	00 00       	nop
     108:	00 00       	nop
     10a:	e8 03       	fmulsu	r22, r16
     10c:	00 00       	nop
     10e:	00 00       	nop
     110:	64 00       	.word	0x0064	; ????
     112:	00 00       	nop
     114:	00 00       	nop
     116:	0a 00       	.word	0x000a	; ????
     118:	00 00       	nop
     11a:	00 00       	nop
     11c:	01 00       	.word	0x0001	; ????
     11e:	00 00       	nop
     120:	00 00       	nop
     122:	2c 76       	andi	r18, 0x6C	; 108
     124:	d8 88       	ldd	r13, Y+16	; 0x10
     126:	dc 67       	ori	r29, 0x7C	; 124
     128:	4f 08       	sbc	r4, r15
     12a:	23 df       	rcall	.-442    	; 0xffffff72 <__eeprom_end+0xff7eff72>
     12c:	c1 df       	rcall	.-126    	; 0xb0 <__SREG__+0x71>
     12e:	ae 59       	subi	r26, 0x9E	; 158
     130:	e1 b1       	in	r30, 0x01	; 1
     132:	b7 96       	adiw	r30, 0x27	; 39
     134:	e5 e3       	ldi	r30, 0x35	; 53
     136:	e4 53       	subi	r30, 0x34	; 52
     138:	c6 3a       	cpi	r28, 0xA6	; 166
     13a:	e6 51       	subi	r30, 0x16	; 22
     13c:	99 76       	andi	r25, 0x69	; 105
     13e:	96 e8       	ldi	r25, 0x86	; 134
     140:	e6 c2       	rjmp	.+1484   	; 0x70e <_Z10displayLCDP6Stringii+0x36>
     142:	84 26       	eor	r8, r20
     144:	eb 89       	ldd	r30, Y+19	; 0x13
     146:	8c 9b       	sbis	0x11, 4	; 17
     148:	62 ed       	ldi	r22, 0xD2	; 210
     14a:	40 7c       	andi	r20, 0xC0	; 192
     14c:	6f fc       	.word	0xfc6f	; ????
     14e:	ef bc       	out	0x2f, r14	; 47
     150:	9c 9f       	mul	r25, r28
     152:	40 f2       	brcs	.-112    	; 0xe4 <__trampolines_end+0x1c>
     154:	ba a5       	ldd	r27, Y+42	; 0x2a
     156:	6f a5       	ldd	r22, Y+47	; 0x2f
     158:	f4 90       	lpm	r15, Z
     15a:	05 5a       	subi	r16, 0xA5	; 165
     15c:	2a f7       	brpl	.-54     	; 0x128 <__trampolines_end+0x60>
     15e:	5c 93       	st	X, r21
     160:	6b 6c       	ori	r22, 0xCB	; 203
     162:	f9 67       	ori	r31, 0x79	; 121
     164:	6d c1       	rjmp	.+730    	; 0x440 <_Z8printTabh+0xa>
     166:	1b fc       	.word	0xfc1b	; ????
     168:	e0 e4       	ldi	r30, 0x40	; 64
     16a:	0d 47       	sbci	r16, 0x7D	; 125
     16c:	fe f5       	brtc	.+126    	; 0x1ec <_ZZ5setupE3__c+0xc>
     16e:	20 e6       	ldi	r18, 0x60	; 96
     170:	b5 00       	.word	0x00b5	; ????
     172:	d0 ed       	ldi	r29, 0xD0	; 208
     174:	90 2e       	mov	r9, r16
     176:	03 00       	.word	0x0003	; ????
     178:	94 35       	cpi	r25, 0x54	; 84
     17a:	77 05       	cpc	r23, r7
     17c:	00 80       	ld	r0, Z
     17e:	84 1e       	adc	r8, r20
     180:	08 00       	.word	0x0008	; ????
     182:	00 20       	and	r0, r0
     184:	4e 0a       	sbc	r4, r30
     186:	00 00       	nop
     188:	00 c8       	rjmp	.-4096   	; 0xfffff18a <__eeprom_end+0xff7ef18a>
     18a:	0c 33       	cpi	r16, 0x3C	; 60
     18c:	33 33       	cpi	r19, 0x33	; 51
     18e:	33 0f       	add	r19, r19
     190:	98 6e       	ori	r25, 0xE8	; 232
     192:	12 83       	std	Z+2, r17	; 0x02
     194:	11 41       	sbci	r17, 0x11	; 17
     196:	ef 8d       	ldd	r30, Y+31	; 0x1f
     198:	21 14       	cp	r2, r1
     19a:	89 3b       	cpi	r24, 0xB9	; 185
     19c:	e6 55       	subi	r30, 0x56	; 86
     19e:	16 cf       	rjmp	.-468    	; 0xffffffcc <__eeprom_end+0xff7effcc>
     1a0:	fe e6       	ldi	r31, 0x6E	; 110
     1a2:	db 18       	sub	r13, r11
     1a4:	d1 84       	ldd	r13, Z+9	; 0x09
     1a6:	4b 38       	cpi	r20, 0x8B	; 139
     1a8:	1b f7       	brvc	.-58     	; 0x170 <__trampolines_end+0xa8>
     1aa:	7c 1d       	adc	r23, r12
     1ac:	90 1d       	adc	r25, r0
     1ae:	a4 bb       	out	0x14, r26	; 20
     1b0:	e4 24       	eor	r14, r4
     1b2:	20 32       	cpi	r18, 0x20	; 32
     1b4:	84 72       	andi	r24, 0x24	; 36
     1b6:	5e 22       	and	r5, r30
     1b8:	81 00       	.word	0x0081	; ????
     1ba:	c9 f1       	breq	.+114    	; 0x22e <_ZL11daysInMonth+0xa>
     1bc:	24 ec       	ldi	r18, 0xC4	; 196
     1be:	a1 e5       	ldi	r26, 0x51	; 81
     1c0:	3d 27       	eor	r19, r29

000001c2 <_ZZ5setupE3__c_0>:
     1c2:	52 54 43 20 63 68 69 70 20 44 53 33 32 33 31 4d     RTC chip DS3231M
     1d2:	20 69 6e 69 74 69 61 6c 69 7a 65 64 2e 00            initialized..

000001e0 <_ZZ5setupE3__c>:
     1e0:	6e 6f 6e 20 74 72 6f 76 6f 20 6d 6f 64 75 6c 6f     non trovo modulo
     1f0:	20 52 54 43 20 44 53 33 32 33 31 4d 4d 2e 20 52      RTC DS3231MM. R
     200:	69 70 72 6f 76 6f 20 74 72 61 20 33 73 2e 00        iprovo tra 3s..

0000020f <_ZZN13DS3231M_Class6adjustEvE3__c>:
     20f:	4d 61 79 20 33 31 20 32 30 32 31 00                 May 31 2021.

0000021b <_ZZN13DS3231M_Class6adjustEvE3__c_0>:
     21b:	30 38 3a 35 31 3a 30 36 00                          08:51:06.

00000224 <_ZL11daysInMonth>:
     224:	1f 1c 1f 1e 1f 1e 1f 1f 1e 1f 1e 1f                 ............

00000230 <digital_pin_to_timer_PGM>:
     230:	00 00 00 00 04 03 08 07 00 00 02 00 09 0a 00 00     ................
	...
     24c:	00 00 00 01                                         ....

00000250 <digital_pin_to_bit_mask_PGM>:
     250:	01 02 04 08 10 20 40 80 01 02 10 20 40 80 10 20     ..... @.... @.. 
     260:	40 80 10 08 20 04 40 80 01 02 04 08 01 02 04 08     @... .@.........

00000270 <digital_pin_to_port_PGM>:
     270:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 01 01     ................
     280:	01 01 03 03 03 03 03 03 01 01 01 01 03 03 02 02     ................

00000290 <port_to_input_PGM>:
     290:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

0000029a <port_to_output_PGM>:
     29a:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000002a4 <port_to_mode_PGM>:
     2a4:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000002ae <__ctors_start>:
     2ae:	e1 18       	sub	r14, r1
     2b0:	31 24       	eor	r3, r1
     2b2:	89 24       	eor	r8, r9
     2b4:	81 27       	eor	r24, r17
     2b6:	68 29       	or	r22, r8
     2b8:	73 29       	or	r23, r3
     2ba:	45 2b       	or	r20, r21
     2bc:	15 2f       	mov	r17, r21
     2be:	a4 35       	cpi	r26, 0x54	; 84
     2c0:	58 37       	cpi	r21, 0x78	; 120

000002c2 <__ctors_end>:
     2c2:	0f 1a       	sub	r0, r31

000002c4 <__dtors_end>:
     2c4:	11 24       	eor	r1, r1
     2c6:	1f be       	out	0x3f, r1	; 63
     2c8:	cf ef       	ldi	r28, 0xFF	; 255
     2ca:	d0 e4       	ldi	r29, 0x40	; 64
     2cc:	de bf       	out	0x3e, r29	; 62
     2ce:	cd bf       	out	0x3d, r28	; 61

000002d0 <__do_copy_data>:
     2d0:	1a e0       	ldi	r17, 0x0A	; 10
     2d2:	a0 e0       	ldi	r26, 0x00	; 0
     2d4:	b1 e0       	ldi	r27, 0x01	; 1
     2d6:	e6 ed       	ldi	r30, 0xD6	; 214
     2d8:	f9 e8       	ldi	r31, 0x89	; 137
     2da:	00 e0       	ldi	r16, 0x00	; 0
     2dc:	0b bf       	out	0x3b, r16	; 59
     2de:	02 c0       	rjmp	.+4      	; 0x2e4 <__do_copy_data+0x14>
     2e0:	07 90       	elpm	r0, Z+
     2e2:	0d 92       	st	X+, r0
     2e4:	ae 37       	cpi	r26, 0x7E	; 126
     2e6:	b1 07       	cpc	r27, r17
     2e8:	d9 f7       	brne	.-10     	; 0x2e0 <__do_copy_data+0x10>

000002ea <__do_clear_bss>:
     2ea:	2d e0       	ldi	r18, 0x0D	; 13
     2ec:	ae e7       	ldi	r26, 0x7E	; 126
     2ee:	ba e0       	ldi	r27, 0x0A	; 10
     2f0:	01 c0       	rjmp	.+2      	; 0x2f4 <.do_clear_bss_start>

000002f2 <.do_clear_bss_loop>:
     2f2:	1d 92       	st	X+, r1

000002f4 <.do_clear_bss_start>:
     2f4:	a0 3d       	cpi	r26, 0xD0	; 208
     2f6:	b2 07       	cpc	r27, r18
     2f8:	e1 f7       	brne	.-8      	; 0x2f2 <.do_clear_bss_loop>

000002fa <__do_global_ctors>:
     2fa:	11 e0       	ldi	r17, 0x01	; 1
     2fc:	c1 e6       	ldi	r28, 0x61	; 97
     2fe:	d1 e0       	ldi	r29, 0x01	; 1
     300:	04 c0       	rjmp	.+8      	; 0x30a <__do_global_ctors+0x10>
     302:	21 97       	sbiw	r28, 0x01	; 1
     304:	fe 01       	movw	r30, r28
     306:	0e 94 3e 3f 	call	0x7e7c	; 0x7e7c <__tablejump2__>
     30a:	c7 35       	cpi	r28, 0x57	; 87
     30c:	d1 07       	cpc	r29, r17
     30e:	c9 f7       	brne	.-14     	; 0x302 <__do_global_ctors+0x8>
     310:	0e 94 e4 37 	call	0x6fc8	; 0x6fc8 <main>
     314:	0c 94 df 44 	jmp	0x89be	; 0x89be <__do_global_dtors>

00000318 <__bad_interrupt>:
     318:	73 ce       	rjmp	.-794    	; 0x0 <__vectors>

0000031a <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     31a:	80 e0       	ldi	r24, 0x00	; 0
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	08 95       	ret

00000320 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     320:	08 95       	ret

00000322 <_ZL10enable_ETHv>:
 Serial.println(" ");
 Serial.println(" ");
 Serial.print("Salvata nella EEPROM: ");
 Serial.println(Salvata);
 return Salvata;
}
     322:	44 98       	cbi	0x08, 4	; 8
     324:	08 95       	ret

00000326 <_ZL11disable_ETHv>:
     326:	44 9a       	sbi	0x08, 4	; 8
     328:	08 95       	ret

0000032a <_Z19InizializzaEthernetv>:
     32a:	ef 92       	push	r14
     32c:	ff 92       	push	r15
     32e:	0f 93       	push	r16
     330:	1f 93       	push	r17
     332:	cf 93       	push	r28
     334:	df 93       	push	r29
     336:	cd b7       	in	r28, 0x3d	; 61
     338:	de b7       	in	r29, 0x3e	; 62
     33a:	68 97       	sbiw	r28, 0x18	; 24
     33c:	0f b6       	in	r0, 0x3f	; 63
     33e:	f8 94       	cli
     340:	de bf       	out	0x3e, r29	; 62
     342:	0f be       	out	0x3f, r0	; 63
     344:	cd bf       	out	0x3d, r28	; 61
     346:	8d e5       	ldi	r24, 0x5D	; 93
     348:	9a e0       	ldi	r25, 0x0A	; 10
     34a:	9a 83       	std	Y+2, r25	; 0x02
     34c:	89 83       	std	Y+1, r24	; 0x01
     34e:	40 91 c7 0a 	lds	r20, 0x0AC7	; 0x800ac7 <subnet+0x2>
     352:	50 91 c8 0a 	lds	r21, 0x0AC8	; 0x800ac8 <subnet+0x3>
     356:	60 91 c9 0a 	lds	r22, 0x0AC9	; 0x800ac9 <subnet+0x4>
     35a:	70 91 ca 0a 	lds	r23, 0x0ACA	; 0x800aca <subnet+0x5>
     35e:	4b 83       	std	Y+3, r20	; 0x03
     360:	5c 83       	std	Y+4, r21	; 0x04
     362:	6d 83       	std	Y+5, r22	; 0x05
     364:	7e 83       	std	Y+6, r23	; 0x06
     366:	98 87       	std	Y+8, r25	; 0x08
     368:	8f 83       	std	Y+7, r24	; 0x07
     36a:	40 91 cd 0a 	lds	r20, 0x0ACD	; 0x800acd <gateway+0x2>
     36e:	50 91 ce 0a 	lds	r21, 0x0ACE	; 0x800ace <gateway+0x3>
     372:	60 91 cf 0a 	lds	r22, 0x0ACF	; 0x800acf <gateway+0x4>
     376:	70 91 d0 0a 	lds	r23, 0x0AD0	; 0x800ad0 <gateway+0x5>
     37a:	49 87       	std	Y+9, r20	; 0x09
     37c:	5a 87       	std	Y+10, r21	; 0x0a
     37e:	6b 87       	std	Y+11, r22	; 0x0b
     380:	7c 87       	std	Y+12, r23	; 0x0c
     382:	9e 87       	std	Y+14, r25	; 0x0e
     384:	8d 87       	std	Y+13, r24	; 0x0d
     386:	40 91 d3 0a 	lds	r20, 0x0AD3	; 0x800ad3 <myDns+0x2>
     38a:	50 91 d4 0a 	lds	r21, 0x0AD4	; 0x800ad4 <myDns+0x3>
     38e:	60 91 d5 0a 	lds	r22, 0x0AD5	; 0x800ad5 <myDns+0x4>
     392:	70 91 d6 0a 	lds	r23, 0x0AD6	; 0x800ad6 <myDns+0x5>
     396:	4f 87       	std	Y+15, r20	; 0x0f
     398:	58 8b       	std	Y+16, r21	; 0x10
     39a:	69 8b       	std	Y+17, r22	; 0x11
     39c:	7a 8b       	std	Y+18, r23	; 0x12
     39e:	9c 8b       	std	Y+20, r25	; 0x14
     3a0:	8b 8b       	std	Y+19, r24	; 0x13
     3a2:	80 91 d9 0a 	lds	r24, 0x0AD9	; 0x800ad9 <ipCCEC+0x2>
     3a6:	90 91 da 0a 	lds	r25, 0x0ADA	; 0x800ada <ipCCEC+0x3>
     3aa:	a0 91 db 0a 	lds	r26, 0x0ADB	; 0x800adb <ipCCEC+0x4>
     3ae:	b0 91 dc 0a 	lds	r27, 0x0ADC	; 0x800adc <ipCCEC+0x5>
     3b2:	8d 8b       	std	Y+21, r24	; 0x15
     3b4:	9e 8b       	std	Y+22, r25	; 0x16
     3b6:	af 8b       	std	Y+23, r26	; 0x17
     3b8:	b8 8f       	std	Y+24, r27	; 0x18
     3ba:	ce 01       	movw	r24, r28
     3bc:	01 96       	adiw	r24, 0x01	; 1
     3be:	7c 01       	movw	r14, r24
     3c0:	8e 01       	movw	r16, r28
     3c2:	09 5f       	subi	r16, 0xF9	; 249
     3c4:	1f 4f       	sbci	r17, 0xFF	; 255
     3c6:	9e 01       	movw	r18, r28
     3c8:	23 5f       	subi	r18, 0xF3	; 243
     3ca:	3f 4f       	sbci	r19, 0xFF	; 255
     3cc:	ae 01       	movw	r20, r28
     3ce:	4d 5e       	subi	r20, 0xED	; 237
     3d0:	5f 4f       	sbci	r21, 0xFF	; 255
     3d2:	6a e2       	ldi	r22, 0x2A	; 42
     3d4:	71 e0       	ldi	r23, 0x01	; 1
     3d6:	83 e2       	ldi	r24, 0x23	; 35
     3d8:	9c e0       	ldi	r25, 0x0C	; 12
     3da:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_>
     3de:	68 96       	adiw	r28, 0x18	; 24
     3e0:	0f b6       	in	r0, 0x3f	; 63
     3e2:	f8 94       	cli
     3e4:	de bf       	out	0x3e, r29	; 62
     3e6:	0f be       	out	0x3f, r0	; 63
     3e8:	cd bf       	out	0x3d, r28	; 61
     3ea:	df 91       	pop	r29
     3ec:	cf 91       	pop	r28
     3ee:	1f 91       	pop	r17
     3f0:	0f 91       	pop	r16
     3f2:	ff 90       	pop	r15
     3f4:	ef 90       	pop	r14
     3f6:	08 95       	ret

000003f8 <_Z11my_delay_msi>:
     3f8:	18 16       	cp	r1, r24
     3fa:	19 06       	cpc	r1, r25
     3fc:	44 f4       	brge	.+16     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     3fe:	ef e9       	ldi	r30, 0x9F	; 159
     400:	ff e0       	ldi	r31, 0x0F	; 15
     402:	31 97       	sbiw	r30, 0x01	; 1
     404:	f1 f7       	brne	.-4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     406:	00 c0       	rjmp	.+0      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     408:	00 00       	nop
     40a:	01 97       	sbiw	r24, 0x01	; 1
     40c:	f5 cf       	rjmp	.-22     	; 0x3f8 <_Z11my_delay_msi>
     40e:	08 95       	ret

00000410 <_Z9printLinev>:
     410:	cf 93       	push	r28
     412:	86 e2       	ldi	r24, 0x26	; 38
     414:	9d e0       	ldi	r25, 0x0D	; 13
     416:	0e 94 69 38 	call	0x70d2	; 0x70d2 <_ZN5Print7printlnEv>
     41a:	cd e7       	ldi	r28, 0x7D	; 125
     41c:	6f e3       	ldi	r22, 0x3F	; 63
     41e:	72 e0       	ldi	r23, 0x02	; 2
     420:	86 e2       	ldi	r24, 0x26	; 38
     422:	9d e0       	ldi	r25, 0x0D	; 13
     424:	0e 94 61 38 	call	0x70c2	; 0x70c2 <_ZN5Print5printEPKc>
     428:	c1 50       	subi	r28, 0x01	; 1
     42a:	c1 f7       	brne	.-16     	; 0x41c <_Z9printLinev+0xc>
     42c:	86 e2       	ldi	r24, 0x26	; 38
     42e:	9d e0       	ldi	r25, 0x0D	; 13
     430:	cf 91       	pop	r28
     432:	0c 94 69 38 	jmp	0x70d2	; 0x70d2 <_ZN5Print7printlnEv>

00000436 <_Z8printTabh>:
     436:	cf 93       	push	r28
     438:	df 93       	push	r29
     43a:	d8 2f       	mov	r29, r24
     43c:	c0 e0       	ldi	r28, 0x00	; 0
     43e:	cd 17       	cp	r28, r29
     440:	41 f0       	breq	.+16     	; 0x452 <_Z8printTabh+0x1c>
     442:	61 e4       	ldi	r22, 0x41	; 65
     444:	72 e0       	ldi	r23, 0x02	; 2
     446:	86 e2       	ldi	r24, 0x26	; 38
     448:	9d e0       	ldi	r25, 0x0D	; 13
     44a:	0e 94 61 38 	call	0x70c2	; 0x70c2 <_ZN5Print5printEPKc>
     44e:	cf 5f       	subi	r28, 0xFF	; 255
     450:	f6 cf       	rjmp	.-20     	; 0x43e <_Z8printTabh+0x8>
     452:	df 91       	pop	r29
     454:	cf 91       	pop	r28
     456:	08 95       	ret

00000458 <_Z4passb>:
     458:	cf 93       	push	r28
     45a:	c8 2f       	mov	r28, r24
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	eb df       	rcall	.-42     	; 0x436 <_Z8printTabh>
     460:	63 e4       	ldi	r22, 0x43	; 67
     462:	72 e0       	ldi	r23, 0x02	; 2
     464:	86 e2       	ldi	r24, 0x26	; 38
     466:	9d e0       	ldi	r25, 0x0D	; 13
     468:	0e 94 61 38 	call	0x70c2	; 0x70c2 <_ZN5Print5printEPKc>
     46c:	cc 23       	and	r28, r28
     46e:	19 f0       	breq	.+6      	; 0x476 <_Z4passb+0x1e>
     470:	67 e4       	ldi	r22, 0x47	; 71
     472:	72 e0       	ldi	r23, 0x02	; 2
     474:	02 c0       	rjmp	.+4      	; 0x47a <_Z4passb+0x22>
     476:	6c e4       	ldi	r22, 0x4C	; 76
     478:	72 e0       	ldi	r23, 0x02	; 2
     47a:	86 e2       	ldi	r24, 0x26	; 38
     47c:	9d e0       	ldi	r25, 0x0D	; 13
     47e:	0e 94 61 38 	call	0x70c2	; 0x70c2 <_ZN5Print5printEPKc>
     482:	81 e0       	ldi	r24, 0x01	; 1
     484:	cf 91       	pop	r28
     486:	d7 cf       	rjmp	.-82     	; 0x436 <_Z8printTabh>

00000488 <_ZN20ParametriCCEC_structC1ERKS_>:
     488:	0f 93       	push	r16
     48a:	1f 93       	push	r17
     48c:	cf 93       	push	r28
     48e:	df 93       	push	r29
     490:	ec 01       	movw	r28, r24
     492:	8b 01       	movw	r16, r22
     494:	0e 94 93 3b 	call	0x7726	; 0x7726 <_ZN6StringC1ERKS_>
     498:	b8 01       	movw	r22, r16
     49a:	6a 5f       	subi	r22, 0xFA	; 250
     49c:	7f 4f       	sbci	r23, 0xFF	; 255
     49e:	ce 01       	movw	r24, r28
     4a0:	06 96       	adiw	r24, 0x06	; 6
     4a2:	0e 94 93 3b 	call	0x7726	; 0x7726 <_ZN6StringC1ERKS_>
     4a6:	f8 01       	movw	r30, r16
     4a8:	84 85       	ldd	r24, Z+12	; 0x0c
     4aa:	95 85       	ldd	r25, Z+13	; 0x0d
     4ac:	9d 87       	std	Y+13, r25	; 0x0d
     4ae:	8c 87       	std	Y+12, r24	; 0x0c
     4b0:	df 91       	pop	r29
     4b2:	cf 91       	pop	r28
     4b4:	1f 91       	pop	r17
     4b6:	0f 91       	pop	r16
     4b8:	08 95       	ret

000004ba <_ZN20ParametriCCEC_structD1Ev>:
     4ba:	cf 93       	push	r28
     4bc:	df 93       	push	r29
     4be:	ec 01       	movw	r28, r24
     4c0:	06 96       	adiw	r24, 0x06	; 6
     4c2:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
     4c6:	ce 01       	movw	r24, r28
     4c8:	df 91       	pop	r29
     4ca:	cf 91       	pop	r28
     4cc:	0c 94 c0 3a 	jmp	0x7580	; 0x7580 <_ZN6StringD1Ev>

000004d0 <_Z6Buzzerhm>:
     4d0:	cf 92       	push	r12
     4d2:	df 92       	push	r13
     4d4:	ef 92       	push	r14
     4d6:	ff 92       	push	r15
     4d8:	0f 93       	push	r16
     4da:	1f 93       	push	r17
     4dc:	cf 93       	push	r28
     4de:	df 93       	push	r29
     4e0:	6a 01       	movw	r12, r20
     4e2:	7b 01       	movw	r14, r22
     4e4:	c0 e0       	ldi	r28, 0x00	; 0
     4e6:	d0 e0       	ldi	r29, 0x00	; 0
     4e8:	08 2f       	mov	r16, r24
     4ea:	10 e0       	ldi	r17, 0x00	; 0
     4ec:	c0 17       	cp	r28, r16
     4ee:	d1 07       	cpc	r29, r17
     4f0:	24 f4       	brge	.+8      	; 0x4fa <_Z6Buzzerhm+0x2a>
     4f2:	c6 01       	movw	r24, r12
     4f4:	81 df       	rcall	.-254    	; 0x3f8 <_Z11my_delay_msi>
     4f6:	21 96       	adiw	r28, 0x01	; 1
     4f8:	f9 cf       	rjmp	.-14     	; 0x4ec <_Z6Buzzerhm+0x1c>
     4fa:	df 91       	pop	r29
     4fc:	cf 91       	pop	r28
     4fe:	1f 91       	pop	r17
     500:	0f 91       	pop	r16
     502:	ff 90       	pop	r15
     504:	ef 90       	pop	r14
     506:	df 90       	pop	r13
     508:	cf 90       	pop	r12
     50a:	08 95       	ret

0000050c <_Z13getCharKeypadi>:
     50c:	82 32       	cpi	r24, 0x22	; 34
     50e:	91 05       	cpc	r25, r1
     510:	09 f4       	brne	.+2      	; 0x514 <_Z13getCharKeypadi+0x8>
     512:	9a c0       	rjmp	.+308    	; 0x648 <_Z13getCharKeypadi+0x13c>
     514:	6c f5       	brge	.+90     	; 0x570 <_Z13getCharKeypadi+0x64>
     516:	8a 30       	cpi	r24, 0x0A	; 10
     518:	91 05       	cpc	r25, r1
     51a:	09 f4       	brne	.+2      	; 0x51e <_Z13getCharKeypadi+0x12>
     51c:	83 c0       	rjmp	.+262    	; 0x624 <_Z13getCharKeypadi+0x118>
     51e:	a4 f4       	brge	.+40     	; 0x548 <_Z13getCharKeypadi+0x3c>
     520:	86 30       	cpi	r24, 0x06	; 6
     522:	91 05       	cpc	r25, r1
     524:	09 f4       	brne	.+2      	; 0x528 <_Z13getCharKeypadi+0x1c>
     526:	75 c0       	rjmp	.+234    	; 0x612 <_Z13getCharKeypadi+0x106>
     528:	89 30       	cpi	r24, 0x09	; 9
     52a:	91 05       	cpc	r25, r1
     52c:	09 f4       	brne	.+2      	; 0x530 <_Z13getCharKeypadi+0x24>
     52e:	5d c0       	rjmp	.+186    	; 0x5ea <_Z13getCharKeypadi+0xde>
     530:	05 97       	sbiw	r24, 0x05	; 5
     532:	09 f0       	breq	.+2      	; 0x536 <_Z13getCharKeypadi+0x2a>
     534:	cf c0       	rjmp	.+414    	; 0x6d4 <_Z13getCharKeypadi+0x1c8>
     536:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <MappaKeys>
     53a:	86 e2       	ldi	r24, 0x26	; 38
     53c:	9d e0       	ldi	r25, 0x0D	; 13
     53e:	0e 94 62 38 	call	0x70c4	; 0x70c4 <_ZN5Print5printEc>
     542:	20 e0       	ldi	r18, 0x00	; 0
     544:	30 e0       	ldi	r19, 0x00	; 0
     546:	59 c0       	rjmp	.+178    	; 0x5fa <_Z13getCharKeypadi+0xee>
     548:	82 31       	cpi	r24, 0x12	; 18
     54a:	91 05       	cpc	r25, r1
     54c:	09 f4       	brne	.+2      	; 0x550 <_Z13getCharKeypadi+0x44>
     54e:	73 c0       	rjmp	.+230    	; 0x636 <_Z13getCharKeypadi+0x12a>
     550:	81 32       	cpi	r24, 0x21	; 33
     552:	91 05       	cpc	r25, r1
     554:	09 f4       	brne	.+2      	; 0x558 <_Z13getCharKeypadi+0x4c>
     556:	54 c0       	rjmp	.+168    	; 0x600 <_Z13getCharKeypadi+0xf4>
     558:	41 97       	sbiw	r24, 0x11	; 17
     55a:	09 f0       	breq	.+2      	; 0x55e <_Z13getCharKeypadi+0x52>
     55c:	bb c0       	rjmp	.+374    	; 0x6d4 <_Z13getCharKeypadi+0x1c8>
     55e:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <MappaKeys+0x2>
     562:	86 e2       	ldi	r24, 0x26	; 38
     564:	9d e0       	ldi	r25, 0x0D	; 13
     566:	0e 94 62 38 	call	0x70c4	; 0x70c4 <_ZN5Print5printEc>
     56a:	22 e0       	ldi	r18, 0x02	; 2
     56c:	30 e0       	ldi	r19, 0x00	; 0
     56e:	45 c0       	rjmp	.+138    	; 0x5fa <_Z13getCharKeypadi+0xee>
     570:	80 36       	cpi	r24, 0x60	; 96
     572:	91 05       	cpc	r25, r1
     574:	09 f4       	brne	.+2      	; 0x578 <_Z13getCharKeypadi+0x6c>
     576:	99 c0       	rjmp	.+306    	; 0x6aa <_Z13getCharKeypadi+0x19e>
     578:	ac f4       	brge	.+42     	; 0x5a4 <_Z13getCharKeypadi+0x98>
     57a:	88 34       	cpi	r24, 0x48	; 72
     57c:	91 05       	cpc	r25, r1
     57e:	09 f4       	brne	.+2      	; 0x582 <_Z13getCharKeypadi+0x76>
     580:	82 c0       	rjmp	.+260    	; 0x686 <_Z13getCharKeypadi+0x17a>
     582:	80 35       	cpi	r24, 0x50	; 80
     584:	91 05       	cpc	r25, r1
     586:	09 f4       	brne	.+2      	; 0x58a <_Z13getCharKeypadi+0x7e>
     588:	87 c0       	rjmp	.+270    	; 0x698 <_Z13getCharKeypadi+0x18c>
     58a:	84 34       	cpi	r24, 0x44	; 68
     58c:	91 05       	cpc	r25, r1
     58e:	09 f0       	breq	.+2      	; 0x592 <_Z13getCharKeypadi+0x86>
     590:	a1 c0       	rjmp	.+322    	; 0x6d4 <_Z13getCharKeypadi+0x1c8>
     592:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <MappaKeys+0xc>
     596:	86 e2       	ldi	r24, 0x26	; 38
     598:	9d e0       	ldi	r25, 0x0D	; 13
     59a:	0e 94 62 38 	call	0x70c4	; 0x70c4 <_ZN5Print5printEc>
     59e:	20 e0       	ldi	r18, 0x00	; 0
     5a0:	30 e0       	ldi	r19, 0x00	; 0
     5a2:	8b c0       	rjmp	.+278    	; 0x6ba <_Z13getCharKeypadi+0x1ae>
     5a4:	88 38       	cpi	r24, 0x88	; 136
     5a6:	91 05       	cpc	r25, r1
     5a8:	09 f4       	brne	.+2      	; 0x5ac <_Z13getCharKeypadi+0xa0>
     5aa:	59 c0       	rjmp	.+178    	; 0x65e <_Z13getCharKeypadi+0x152>
     5ac:	6c f4       	brge	.+26     	; 0x5c8 <_Z13getCharKeypadi+0xbc>
     5ae:	84 38       	cpi	r24, 0x84	; 132
     5b0:	91 05       	cpc	r25, r1
     5b2:	09 f0       	breq	.+2      	; 0x5b6 <_Z13getCharKeypadi+0xaa>
     5b4:	8f c0       	rjmp	.+286    	; 0x6d4 <_Z13getCharKeypadi+0x1c8>
     5b6:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <MappaKeys+0x8>
     5ba:	86 e2       	ldi	r24, 0x26	; 38
     5bc:	9d e0       	ldi	r25, 0x0D	; 13
     5be:	0e 94 62 38 	call	0x70c4	; 0x70c4 <_ZN5Print5printEc>
     5c2:	20 e0       	ldi	r18, 0x00	; 0
     5c4:	30 e0       	ldi	r19, 0x00	; 0
     5c6:	5c c0       	rjmp	.+184    	; 0x680 <_Z13getCharKeypadi+0x174>
     5c8:	80 39       	cpi	r24, 0x90	; 144
     5ca:	91 05       	cpc	r25, r1
     5cc:	09 f4       	brne	.+2      	; 0x5d0 <_Z13getCharKeypadi+0xc4>
     5ce:	50 c0       	rjmp	.+160    	; 0x670 <_Z13getCharKeypadi+0x164>
     5d0:	80 3a       	cpi	r24, 0xA0	; 160
     5d2:	91 05       	cpc	r25, r1
     5d4:	09 f0       	breq	.+2      	; 0x5d8 <_Z13getCharKeypadi+0xcc>
     5d6:	7e c0       	rjmp	.+252    	; 0x6d4 <_Z13getCharKeypadi+0x1c8>
     5d8:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <MappaKeys+0xb>
     5dc:	86 e2       	ldi	r24, 0x26	; 38
     5de:	9d e0       	ldi	r25, 0x0D	; 13
     5e0:	0e 94 62 38 	call	0x70c4	; 0x70c4 <_ZN5Print5printEc>
     5e4:	23 e0       	ldi	r18, 0x03	; 3
     5e6:	30 e0       	ldi	r19, 0x00	; 0
     5e8:	4b c0       	rjmp	.+150    	; 0x680 <_Z13getCharKeypadi+0x174>
     5ea:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <MappaKeys+0x1>
     5ee:	86 e2       	ldi	r24, 0x26	; 38
     5f0:	9d e0       	ldi	r25, 0x0D	; 13
     5f2:	0e 94 62 38 	call	0x70c4	; 0x70c4 <_ZN5Print5printEc>
     5f6:	21 e0       	ldi	r18, 0x01	; 1
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	80 e0       	ldi	r24, 0x00	; 0
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	5f c0       	rjmp	.+190    	; 0x6be <_Z13getCharKeypadi+0x1b2>
     600:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <MappaKeys+0x3>
     604:	86 e2       	ldi	r24, 0x26	; 38
     606:	9d e0       	ldi	r25, 0x0D	; 13
     608:	0e 94 62 38 	call	0x70c4	; 0x70c4 <_ZN5Print5printEc>
     60c:	23 e0       	ldi	r18, 0x03	; 3
     60e:	30 e0       	ldi	r19, 0x00	; 0
     610:	f4 cf       	rjmp	.-24     	; 0x5fa <_Z13getCharKeypadi+0xee>
     612:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <MappaKeys+0x4>
     616:	86 e2       	ldi	r24, 0x26	; 38
     618:	9d e0       	ldi	r25, 0x0D	; 13
     61a:	0e 94 62 38 	call	0x70c4	; 0x70c4 <_ZN5Print5printEc>
     61e:	20 e0       	ldi	r18, 0x00	; 0
     620:	30 e0       	ldi	r19, 0x00	; 0
     622:	1a c0       	rjmp	.+52     	; 0x658 <_Z13getCharKeypadi+0x14c>
     624:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <MappaKeys+0x5>
     628:	86 e2       	ldi	r24, 0x26	; 38
     62a:	9d e0       	ldi	r25, 0x0D	; 13
     62c:	0e 94 62 38 	call	0x70c4	; 0x70c4 <_ZN5Print5printEc>
     630:	21 e0       	ldi	r18, 0x01	; 1
     632:	30 e0       	ldi	r19, 0x00	; 0
     634:	11 c0       	rjmp	.+34     	; 0x658 <_Z13getCharKeypadi+0x14c>
     636:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <MappaKeys+0x6>
     63a:	86 e2       	ldi	r24, 0x26	; 38
     63c:	9d e0       	ldi	r25, 0x0D	; 13
     63e:	0e 94 62 38 	call	0x70c4	; 0x70c4 <_ZN5Print5printEc>
     642:	22 e0       	ldi	r18, 0x02	; 2
     644:	30 e0       	ldi	r19, 0x00	; 0
     646:	08 c0       	rjmp	.+16     	; 0x658 <_Z13getCharKeypadi+0x14c>
     648:	60 91 0d 01 	lds	r22, 0x010D	; 0x80010d <MappaKeys+0x7>
     64c:	86 e2       	ldi	r24, 0x26	; 38
     64e:	9d e0       	ldi	r25, 0x0D	; 13
     650:	0e 94 62 38 	call	0x70c4	; 0x70c4 <_ZN5Print5printEc>
     654:	23 e0       	ldi	r18, 0x03	; 3
     656:	30 e0       	ldi	r19, 0x00	; 0
     658:	81 e0       	ldi	r24, 0x01	; 1
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	30 c0       	rjmp	.+96     	; 0x6be <_Z13getCharKeypadi+0x1b2>
     65e:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <MappaKeys+0x9>
     662:	86 e2       	ldi	r24, 0x26	; 38
     664:	9d e0       	ldi	r25, 0x0D	; 13
     666:	0e 94 62 38 	call	0x70c4	; 0x70c4 <_ZN5Print5printEc>
     66a:	21 e0       	ldi	r18, 0x01	; 1
     66c:	30 e0       	ldi	r19, 0x00	; 0
     66e:	08 c0       	rjmp	.+16     	; 0x680 <_Z13getCharKeypadi+0x174>
     670:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <MappaKeys+0xa>
     674:	86 e2       	ldi	r24, 0x26	; 38
     676:	9d e0       	ldi	r25, 0x0D	; 13
     678:	0e 94 62 38 	call	0x70c4	; 0x70c4 <_ZN5Print5printEc>
     67c:	22 e0       	ldi	r18, 0x02	; 2
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	82 e0       	ldi	r24, 0x02	; 2
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	1c c0       	rjmp	.+56     	; 0x6be <_Z13getCharKeypadi+0x1b2>
     686:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <MappaKeys+0xd>
     68a:	86 e2       	ldi	r24, 0x26	; 38
     68c:	9d e0       	ldi	r25, 0x0D	; 13
     68e:	0e 94 62 38 	call	0x70c4	; 0x70c4 <_ZN5Print5printEc>
     692:	21 e0       	ldi	r18, 0x01	; 1
     694:	30 e0       	ldi	r19, 0x00	; 0
     696:	11 c0       	rjmp	.+34     	; 0x6ba <_Z13getCharKeypadi+0x1ae>
     698:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <MappaKeys+0xe>
     69c:	86 e2       	ldi	r24, 0x26	; 38
     69e:	9d e0       	ldi	r25, 0x0D	; 13
     6a0:	0e 94 62 38 	call	0x70c4	; 0x70c4 <_ZN5Print5printEc>
     6a4:	22 e0       	ldi	r18, 0x02	; 2
     6a6:	30 e0       	ldi	r19, 0x00	; 0
     6a8:	08 c0       	rjmp	.+16     	; 0x6ba <_Z13getCharKeypadi+0x1ae>
     6aa:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <MappaKeys+0xf>
     6ae:	86 e2       	ldi	r24, 0x26	; 38
     6b0:	9d e0       	ldi	r25, 0x0D	; 13
     6b2:	0e 94 62 38 	call	0x70c4	; 0x70c4 <_ZN5Print5printEc>
     6b6:	23 e0       	ldi	r18, 0x03	; 3
     6b8:	30 e0       	ldi	r19, 0x00	; 0
     6ba:	83 e0       	ldi	r24, 0x03	; 3
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	88 0f       	add	r24, r24
     6c0:	99 1f       	adc	r25, r25
     6c2:	88 0f       	add	r24, r24
     6c4:	99 1f       	adc	r25, r25
     6c6:	8a 5f       	subi	r24, 0xFA	; 250
     6c8:	9e 4f       	sbci	r25, 0xFE	; 254
     6ca:	fc 01       	movw	r30, r24
     6cc:	e2 0f       	add	r30, r18
     6ce:	f3 1f       	adc	r31, r19
     6d0:	80 81       	ld	r24, Z
     6d2:	08 95       	ret
     6d4:	8e e4       	ldi	r24, 0x4E	; 78
     6d6:	08 95       	ret

000006d8 <_Z10displayLCDP6Stringii>:
     6d8:	cf 93       	push	r28
     6da:	df 93       	push	r29
     6dc:	ec 01       	movw	r28, r24
     6de:	85 e5       	ldi	r24, 0x55	; 85
     6e0:	9b e0       	ldi	r25, 0x0B	; 11
     6e2:	0e 94 a0 2f 	call	0x5f40	; 0x5f40 <_ZN3LCD5clearEv>
     6e6:	61 e0       	ldi	r22, 0x01	; 1
     6e8:	85 e5       	ldi	r24, 0x55	; 85
     6ea:	9b e0       	ldi	r25, 0x0B	; 11
     6ec:	0e 94 62 38 	call	0x70c4	; 0x70c4 <_ZN5Print5printEc>
     6f0:	41 e0       	ldi	r20, 0x01	; 1
     6f2:	60 e0       	ldi	r22, 0x00	; 0
     6f4:	85 e5       	ldi	r24, 0x55	; 85
     6f6:	9b e0       	ldi	r25, 0x0B	; 11
     6f8:	0e 94 a6 2f 	call	0x5f4c	; 0x5f4c <_ZN3LCD9setCursorEhh>
     6fc:	be 01       	movw	r22, r28
     6fe:	6a 5f       	subi	r22, 0xFA	; 250
     700:	7f 4f       	sbci	r23, 0xFF	; 255
     702:	85 e5       	ldi	r24, 0x55	; 85
     704:	9b e0       	ldi	r25, 0x0B	; 11
     706:	0e 94 53 38 	call	0x70a6	; 0x70a6 <_ZN5Print5printERK6String>
     70a:	42 e0       	ldi	r20, 0x02	; 2
     70c:	60 e0       	ldi	r22, 0x00	; 0
     70e:	85 e5       	ldi	r24, 0x55	; 85
     710:	9b e0       	ldi	r25, 0x0B	; 11
     712:	0e 94 a6 2f 	call	0x5f4c	; 0x5f4c <_ZN3LCD9setCursorEhh>
     716:	be 01       	movw	r22, r28
     718:	64 5f       	subi	r22, 0xF4	; 244
     71a:	7f 4f       	sbci	r23, 0xFF	; 255
     71c:	85 e5       	ldi	r24, 0x55	; 85
     71e:	9b e0       	ldi	r25, 0x0B	; 11
     720:	0e 94 53 38 	call	0x70a6	; 0x70a6 <_ZN5Print5printERK6String>
     724:	43 e0       	ldi	r20, 0x03	; 3
     726:	60 e0       	ldi	r22, 0x00	; 0
     728:	85 e5       	ldi	r24, 0x55	; 85
     72a:	9b e0       	ldi	r25, 0x0B	; 11
     72c:	0e 94 a6 2f 	call	0x5f4c	; 0x5f4c <_ZN3LCD9setCursorEhh>
     730:	be 01       	movw	r22, r28
     732:	6e 5e       	subi	r22, 0xEE	; 238
     734:	7f 4f       	sbci	r23, 0xFF	; 255
     736:	85 e5       	ldi	r24, 0x55	; 85
     738:	9b e0       	ldi	r25, 0x0B	; 11
     73a:	df 91       	pop	r29
     73c:	cf 91       	pop	r28
     73e:	0c 94 53 38 	jmp	0x70a6	; 0x70a6 <_ZN5Print5printERK6String>

00000742 <_Z11avanzaStatom>:
     742:	cf 92       	push	r12
     744:	df 92       	push	r13
     746:	ef 92       	push	r14
     748:	ff 92       	push	r15
     74a:	6b 01       	movw	r12, r22
     74c:	7c 01       	movw	r14, r24
     74e:	85 e5       	ldi	r24, 0x55	; 85
     750:	9b e0       	ldi	r25, 0x0B	; 11
     752:	0e 94 a0 2f 	call	0x5f40	; 0x5f40 <_ZN3LCD5clearEv>
     756:	60 91 2e 0b 	lds	r22, 0x0B2E	; 0x800b2e <stato_procedura>
     75a:	70 91 2f 0b 	lds	r23, 0x0B2F	; 0x800b2f <stato_procedura+0x1>
     75e:	4a e0       	ldi	r20, 0x0A	; 10
     760:	50 e0       	ldi	r21, 0x00	; 0
     762:	8d ed       	ldi	r24, 0xDD	; 221
     764:	9a e0       	ldi	r25, 0x0A	; 10
     766:	b8 df       	rcall	.-144    	; 0x6d8 <_Z10displayLCDP6Stringii>
     768:	c0 92 93 0a 	sts	0x0A93, r12	; 0x800a93 <Timer>
     76c:	d0 92 94 0a 	sts	0x0A94, r13	; 0x800a94 <Timer+0x1>
     770:	e0 92 95 0a 	sts	0x0A95, r14	; 0x800a95 <Timer+0x2>
     774:	f0 92 96 0a 	sts	0x0A96, r15	; 0x800a96 <Timer+0x3>
     778:	8f e1       	ldi	r24, 0x1F	; 31
     77a:	9e e4       	ldi	r25, 0x4E	; 78
     77c:	01 97       	sbiw	r24, 0x01	; 1
     77e:	f1 f7       	brne	.-4      	; 0x77c <_Z11avanzaStatom+0x3a>
     780:	00 c0       	rjmp	.+0      	; 0x782 <_Z11avanzaStatom+0x40>
     782:	00 00       	nop
     784:	8d e8       	ldi	r24, 0x8D	; 141
     786:	9a e0       	ldi	r25, 0x0A	; 10
     788:	0e 94 33 22 	call	0x4466	; 0x4466 <_ZNK8DateTime11secondstimeEv>
     78c:	60 93 97 0a 	sts	0x0A97, r22	; 0x800a97 <UltimoPassaggioStato>
     790:	70 93 98 0a 	sts	0x0A98, r23	; 0x800a98 <UltimoPassaggioStato+0x1>
     794:	80 93 99 0a 	sts	0x0A99, r24	; 0x800a99 <UltimoPassaggioStato+0x2>
     798:	90 93 9a 0a 	sts	0x0A9A, r25	; 0x800a9a <UltimoPassaggioStato+0x3>
     79c:	80 91 2e 0b 	lds	r24, 0x0B2E	; 0x800b2e <stato_procedura>
     7a0:	90 91 2f 0b 	lds	r25, 0x0B2F	; 0x800b2f <stato_procedura+0x1>
     7a4:	01 96       	adiw	r24, 0x01	; 1
     7a6:	90 93 2f 0b 	sts	0x0B2F, r25	; 0x800b2f <stato_procedura+0x1>
     7aa:	80 93 2e 0b 	sts	0x0B2E, r24	; 0x800b2e <stato_procedura>
     7ae:	ff 90       	pop	r15
     7b0:	ef 90       	pop	r14
     7b2:	df 90       	pop	r13
     7b4:	cf 90       	pop	r12
     7b6:	08 95       	ret

000007b8 <_Z16scrivi_TAG_MezzoPc>:
     7b8:	8f 92       	push	r8
     7ba:	9f 92       	push	r9
     7bc:	af 92       	push	r10
     7be:	bf 92       	push	r11
     7c0:	cf 92       	push	r12
     7c2:	df 92       	push	r13
     7c4:	ef 92       	push	r14
     7c6:	0f 93       	push	r16
     7c8:	1f 93       	push	r17
     7ca:	cf 93       	push	r28
     7cc:	df 93       	push	r29
     7ce:	cd b7       	in	r28, 0x3d	; 61
     7d0:	de b7       	in	r29, 0x3e	; 62
     7d2:	a2 97       	sbiw	r28, 0x22	; 34
     7d4:	0f b6       	in	r0, 0x3f	; 63
     7d6:	f8 94       	cli
     7d8:	de bf       	out	0x3e, r29	; 62
     7da:	0f be       	out	0x3f, r0	; 63
     7dc:	cd bf       	out	0x3d, r28	; 61
     7de:	5c 01       	movw	r10, r24
     7e0:	4b 01       	movw	r8, r22
     7e2:	62 e4       	ldi	r22, 0x42	; 66
     7e4:	72 e0       	ldi	r23, 0x02	; 2
     7e6:	ce 01       	movw	r24, r28
     7e8:	4d 96       	adiw	r24, 0x1d	; 29
     7ea:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
     7ee:	08 ec       	ldi	r16, 0xC8	; 200
     7f0:	10 e0       	ldi	r17, 0x00	; 0
     7f2:	25 e7       	ldi	r18, 0x75	; 117
     7f4:	3b e0       	ldi	r19, 0x0B	; 11
     7f6:	4e e6       	ldi	r20, 0x6E	; 110
     7f8:	5b e0       	ldi	r21, 0x0B	; 11
     7fa:	60 e0       	ldi	r22, 0x00	; 0
     7fc:	8e e3       	ldi	r24, 0x3E	; 62
     7fe:	9b e0       	ldi	r25, 0x0B	; 11
     800:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j>
     804:	80 93 76 0b 	sts	0x0B76, r24	; 0x800b76 <success>
     808:	88 23       	and	r24, r24
     80a:	09 f4       	brne	.+2      	; 0x80e <_Z16scrivi_TAG_MezzoPc+0x56>
     80c:	a3 c0       	rjmp	.+326    	; 0x954 <_Z16scrivi_TAG_MezzoPc+0x19c>
     80e:	80 91 75 0b 	lds	r24, 0x0B75	; 0x800b75 <uidLength>
     812:	84 30       	cpi	r24, 0x04	; 4
     814:	09 f0       	breq	.+2      	; 0x818 <_Z16scrivi_TAG_MezzoPc+0x60>
     816:	98 c0       	rjmp	.+304    	; 0x948 <_Z16scrivi_TAG_MezzoPc+0x190>
     818:	86 e0       	ldi	r24, 0x06	; 6
     81a:	e7 e6       	ldi	r30, 0x67	; 103
     81c:	f1 e0       	ldi	r31, 0x01	; 1
     81e:	de 01       	movw	r26, r28
     820:	57 96       	adiw	r26, 0x17	; 23
     822:	01 90       	ld	r0, Z+
     824:	0d 92       	st	X+, r0
     826:	8a 95       	dec	r24
     828:	e1 f7       	brne	.-8      	; 0x822 <_Z16scrivi_TAG_MezzoPc+0x6a>
     82a:	ce 01       	movw	r24, r28
     82c:	47 96       	adiw	r24, 0x17	; 23
     82e:	6c 01       	movw	r12, r24
     830:	e1 2c       	mov	r14, r1
     832:	04 e0       	ldi	r16, 0x04	; 4
     834:	10 e0       	ldi	r17, 0x00	; 0
     836:	20 e0       	ldi	r18, 0x00	; 0
     838:	30 e0       	ldi	r19, 0x00	; 0
     83a:	44 e0       	ldi	r20, 0x04	; 4
     83c:	6e e6       	ldi	r22, 0x6E	; 110
     83e:	7b e0       	ldi	r23, 0x0B	; 11
     840:	8e e3       	ldi	r24, 0x3E	; 62
     842:	9b e0       	ldi	r25, 0x0B	; 11
     844:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_>
     848:	80 93 76 0b 	sts	0x0B76, r24	; 0x800b76 <success>
     84c:	88 23       	and	r24, r24
     84e:	09 f4       	brne	.+2      	; 0x852 <_Z16scrivi_TAG_MezzoPc+0x9a>
     850:	6b c0       	rjmp	.+214    	; 0x928 <_Z16scrivi_TAG_MezzoPc+0x170>
     852:	80 e1       	ldi	r24, 0x10	; 16
     854:	f4 01       	movw	r30, r8
     856:	de 01       	movw	r26, r28
     858:	11 96       	adiw	r26, 0x01	; 1
     85a:	01 90       	ld	r0, Z+
     85c:	0d 92       	st	X+, r0
     85e:	8a 95       	dec	r24
     860:	e1 f7       	brne	.-8      	; 0x85a <_Z16scrivi_TAG_MezzoPc+0xa2>
     862:	ae 01       	movw	r20, r28
     864:	4f 5f       	subi	r20, 0xFF	; 255
     866:	5f 4f       	sbci	r21, 0xFF	; 255
     868:	64 e0       	ldi	r22, 0x04	; 4
     86a:	8e e3       	ldi	r24, 0x3E	; 62
     86c:	9b e0       	ldi	r25, 0x0B	; 11
     86e:	0e 94 8d 20 	call	0x411a	; 0x411a <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh>
     872:	80 93 76 0b 	sts	0x0B76, r24	; 0x800b76 <success>
     876:	9f ef       	ldi	r25, 0xFF	; 255
     878:	21 ee       	ldi	r18, 0xE1	; 225
     87a:	84 e0       	ldi	r24, 0x04	; 4
     87c:	91 50       	subi	r25, 0x01	; 1
     87e:	20 40       	sbci	r18, 0x00	; 0
     880:	80 40       	sbci	r24, 0x00	; 0
     882:	e1 f7       	brne	.-8      	; 0x87c <_Z16scrivi_TAG_MezzoPc+0xc4>
     884:	00 c0       	rjmp	.+0      	; 0x886 <_Z16scrivi_TAG_MezzoPc+0xce>
     886:	00 00       	nop
     888:	ae 01       	movw	r20, r28
     88a:	4f 5f       	subi	r20, 0xFF	; 255
     88c:	5f 4f       	sbci	r21, 0xFF	; 255
     88e:	64 e0       	ldi	r22, 0x04	; 4
     890:	8e e3       	ldi	r24, 0x3E	; 62
     892:	9b e0       	ldi	r25, 0x0B	; 11
     894:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh>
     898:	80 93 76 0b 	sts	0x0B76, r24	; 0x800b76 <success>
     89c:	61 e5       	ldi	r22, 0x51	; 81
     89e:	72 e0       	ldi	r23, 0x02	; 2
     8a0:	86 e2       	ldi	r24, 0x26	; 38
     8a2:	9d e0       	ldi	r25, 0x0D	; 13
     8a4:	0e 94 8c 38 	call	0x7118	; 0x7118 <_ZN5Print7printlnEPKc>
     8a8:	be 01       	movw	r22, r28
     8aa:	6f 5f       	subi	r22, 0xFF	; 255
     8ac:	7f 4f       	sbci	r23, 0xFF	; 255
     8ae:	ce 01       	movw	r24, r28
     8b0:	41 96       	adiw	r24, 0x11	; 17
     8b2:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
     8b6:	80 91 76 0b 	lds	r24, 0x0B76	; 0x800b76 <success>
     8ba:	88 23       	and	r24, r24
     8bc:	01 f1       	breq	.+64     	; 0x8fe <_Z16scrivi_TAG_MezzoPc+0x146>
     8be:	be 01       	movw	r22, r28
     8c0:	6f 5e       	subi	r22, 0xEF	; 239
     8c2:	7f 4f       	sbci	r23, 0xFF	; 255
     8c4:	86 e2       	ldi	r24, 0x26	; 38
     8c6:	9d e0       	ldi	r25, 0x0D	; 13
     8c8:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <_ZN5Print7printlnERK6String>
     8cc:	8d 89       	ldd	r24, Y+21	; 0x15
     8ce:	9e 89       	ldd	r25, Y+22	; 0x16
     8d0:	06 97       	sbiw	r24, 0x06	; 6
     8d2:	59 f4       	brne	.+22     	; 0x8ea <_Z16scrivi_TAG_MezzoPc+0x132>
     8d4:	be 01       	movw	r22, r28
     8d6:	6f 5e       	subi	r22, 0xEF	; 239
     8d8:	7f 4f       	sbci	r23, 0xFF	; 255
     8da:	c5 01       	movw	r24, r10
     8dc:	0e 94 76 3b 	call	0x76ec	; 0x76ec <_ZN6StringC1EOS_>
     8e0:	ce 01       	movw	r24, r28
     8e2:	41 96       	adiw	r24, 0x11	; 17
     8e4:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
     8e8:	3b c0       	rjmp	.+118    	; 0x960 <_Z16scrivi_TAG_MezzoPc+0x1a8>
     8ea:	9f ef       	ldi	r25, 0xFF	; 255
     8ec:	21 ee       	ldi	r18, 0xE1	; 225
     8ee:	84 e0       	ldi	r24, 0x04	; 4
     8f0:	91 50       	subi	r25, 0x01	; 1
     8f2:	20 40       	sbci	r18, 0x00	; 0
     8f4:	80 40       	sbci	r24, 0x00	; 0
     8f6:	e1 f7       	brne	.-8      	; 0x8f0 <_Z16scrivi_TAG_MezzoPc+0x138>
     8f8:	00 c0       	rjmp	.+0      	; 0x8fa <_Z16scrivi_TAG_MezzoPc+0x142>
     8fa:	00 00       	nop
     8fc:	10 c0       	rjmp	.+32     	; 0x91e <_Z16scrivi_TAG_MezzoPc+0x166>
     8fe:	85 e5       	ldi	r24, 0x55	; 85
     900:	9b e0       	ldi	r25, 0x0B	; 11
     902:	0e 94 a0 2f 	call	0x5f40	; 0x5f40 <_ZN3LCD5clearEv>
     906:	41 e0       	ldi	r20, 0x01	; 1
     908:	60 e0       	ldi	r22, 0x00	; 0
     90a:	85 e5       	ldi	r24, 0x55	; 85
     90c:	9b e0       	ldi	r25, 0x0B	; 11
     90e:	0e 94 a6 2f 	call	0x5f4c	; 0x5f4c <_ZN3LCD9setCursorEhh>
     912:	6f e5       	ldi	r22, 0x5F	; 95
     914:	72 e0       	ldi	r23, 0x02	; 2
     916:	85 e5       	ldi	r24, 0x55	; 85
     918:	9b e0       	ldi	r25, 0x0B	; 11
     91a:	0e 94 61 38 	call	0x70c2	; 0x70c2 <_ZN5Print5printEPKc>
     91e:	ce 01       	movw	r24, r28
     920:	41 96       	adiw	r24, 0x11	; 17
     922:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
     926:	10 c0       	rjmp	.+32     	; 0x948 <_Z16scrivi_TAG_MezzoPc+0x190>
     928:	85 e5       	ldi	r24, 0x55	; 85
     92a:	9b e0       	ldi	r25, 0x0B	; 11
     92c:	0e 94 a0 2f 	call	0x5f40	; 0x5f40 <_ZN3LCD5clearEv>
     930:	41 e0       	ldi	r20, 0x01	; 1
     932:	60 e0       	ldi	r22, 0x00	; 0
     934:	85 e5       	ldi	r24, 0x55	; 85
     936:	9b e0       	ldi	r25, 0x0B	; 11
     938:	0e 94 a6 2f 	call	0x5f4c	; 0x5f4c <_ZN3LCD9setCursorEhh>
     93c:	69 e6       	ldi	r22, 0x69	; 105
     93e:	72 e0       	ldi	r23, 0x02	; 2
     940:	85 e5       	ldi	r24, 0x55	; 85
     942:	9b e0       	ldi	r25, 0x0B	; 11
     944:	0e 94 61 38 	call	0x70c2	; 0x70c2 <_ZN5Print5printEPKc>
     948:	62 e4       	ldi	r22, 0x42	; 66
     94a:	72 e0       	ldi	r23, 0x02	; 2
     94c:	86 e2       	ldi	r24, 0x26	; 38
     94e:	9d e0       	ldi	r25, 0x0D	; 13
     950:	0e 94 8c 38 	call	0x7118	; 0x7118 <_ZN5Print7printlnEPKc>
     954:	be 01       	movw	r22, r28
     956:	63 5e       	subi	r22, 0xE3	; 227
     958:	7f 4f       	sbci	r23, 0xFF	; 255
     95a:	c5 01       	movw	r24, r10
     95c:	0e 94 76 3b 	call	0x76ec	; 0x76ec <_ZN6StringC1EOS_>
     960:	ce 01       	movw	r24, r28
     962:	4d 96       	adiw	r24, 0x1d	; 29
     964:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
     968:	c5 01       	movw	r24, r10
     96a:	a2 96       	adiw	r28, 0x22	; 34
     96c:	0f b6       	in	r0, 0x3f	; 63
     96e:	f8 94       	cli
     970:	de bf       	out	0x3e, r29	; 62
     972:	0f be       	out	0x3f, r0	; 63
     974:	cd bf       	out	0x3d, r28	; 61
     976:	df 91       	pop	r29
     978:	cf 91       	pop	r28
     97a:	1f 91       	pop	r17
     97c:	0f 91       	pop	r16
     97e:	ef 90       	pop	r14
     980:	df 90       	pop	r13
     982:	cf 90       	pop	r12
     984:	bf 90       	pop	r11
     986:	af 90       	pop	r10
     988:	9f 90       	pop	r9
     98a:	8f 90       	pop	r8
     98c:	08 95       	ret

0000098e <_Z14leggiTAG_Mezzob>:
     98e:	af 92       	push	r10
     990:	bf 92       	push	r11
     992:	cf 92       	push	r12
     994:	df 92       	push	r13
     996:	ef 92       	push	r14
     998:	ff 92       	push	r15
     99a:	0f 93       	push	r16
     99c:	1f 93       	push	r17
     99e:	cf 93       	push	r28
     9a0:	df 93       	push	r29
     9a2:	cd b7       	in	r28, 0x3d	; 61
     9a4:	de b7       	in	r29, 0x3e	; 62
     9a6:	a2 97       	sbiw	r28, 0x22	; 34
     9a8:	0f b6       	in	r0, 0x3f	; 63
     9aa:	f8 94       	cli
     9ac:	de bf       	out	0x3e, r29	; 62
     9ae:	0f be       	out	0x3f, r0	; 63
     9b0:	cd bf       	out	0x3d, r28	; 61
     9b2:	5c 01       	movw	r10, r24
     9b4:	f6 2e       	mov	r15, r22
     9b6:	62 e4       	ldi	r22, 0x42	; 66
     9b8:	72 e0       	ldi	r23, 0x02	; 2
     9ba:	ce 01       	movw	r24, r28
     9bc:	4d 96       	adiw	r24, 0x1d	; 29
     9be:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
     9c2:	08 ec       	ldi	r16, 0xC8	; 200
     9c4:	10 e0       	ldi	r17, 0x00	; 0
     9c6:	25 e7       	ldi	r18, 0x75	; 117
     9c8:	3b e0       	ldi	r19, 0x0B	; 11
     9ca:	4e e6       	ldi	r20, 0x6E	; 110
     9cc:	5b e0       	ldi	r21, 0x0B	; 11
     9ce:	60 e0       	ldi	r22, 0x00	; 0
     9d0:	8e e3       	ldi	r24, 0x3E	; 62
     9d2:	9b e0       	ldi	r25, 0x0B	; 11
     9d4:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j>
     9d8:	80 93 76 0b 	sts	0x0B76, r24	; 0x800b76 <success>
     9dc:	88 23       	and	r24, r24
     9de:	09 f4       	brne	.+2      	; 0x9e2 <_Z14leggiTAG_Mezzob+0x54>
     9e0:	9d c0       	rjmp	.+314    	; 0xb1c <_Z14leggiTAG_Mezzob+0x18e>
     9e2:	4e e1       	ldi	r20, 0x1E	; 30
     9e4:	50 e0       	ldi	r21, 0x00	; 0
     9e6:	60 e0       	ldi	r22, 0x00	; 0
     9e8:	70 e0       	ldi	r23, 0x00	; 0
     9ea:	82 e0       	ldi	r24, 0x02	; 2
     9ec:	71 dd       	rcall	.-1310   	; 0x4d0 <_Z6Buzzerhm>
     9ee:	80 91 75 0b 	lds	r24, 0x0B75	; 0x800b75 <uidLength>
     9f2:	84 30       	cpi	r24, 0x04	; 4
     9f4:	09 f0       	breq	.+2      	; 0x9f8 <_Z14leggiTAG_Mezzob+0x6a>
     9f6:	8c c0       	rjmp	.+280    	; 0xb10 <_Z14leggiTAG_Mezzob+0x182>
     9f8:	86 e0       	ldi	r24, 0x06	; 6
     9fa:	e7 e6       	ldi	r30, 0x67	; 103
     9fc:	f1 e0       	ldi	r31, 0x01	; 1
     9fe:	de 01       	movw	r26, r28
     a00:	57 96       	adiw	r26, 0x17	; 23
     a02:	01 90       	ld	r0, Z+
     a04:	0d 92       	st	X+, r0
     a06:	8a 95       	dec	r24
     a08:	e1 f7       	brne	.-8      	; 0xa02 <_Z14leggiTAG_Mezzob+0x74>
     a0a:	ce 01       	movw	r24, r28
     a0c:	47 96       	adiw	r24, 0x17	; 23
     a0e:	6c 01       	movw	r12, r24
     a10:	e1 2c       	mov	r14, r1
     a12:	04 e0       	ldi	r16, 0x04	; 4
     a14:	10 e0       	ldi	r17, 0x00	; 0
     a16:	20 e0       	ldi	r18, 0x00	; 0
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	44 e0       	ldi	r20, 0x04	; 4
     a1c:	6e e6       	ldi	r22, 0x6E	; 110
     a1e:	7b e0       	ldi	r23, 0x0B	; 11
     a20:	8e e3       	ldi	r24, 0x3E	; 62
     a22:	9b e0       	ldi	r25, 0x0B	; 11
     a24:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_>
     a28:	80 93 76 0b 	sts	0x0B76, r24	; 0x800b76 <success>
     a2c:	88 23       	and	r24, r24
     a2e:	09 f4       	brne	.+2      	; 0xa32 <_Z14leggiTAG_Mezzob+0xa4>
     a30:	5f c0       	rjmp	.+190    	; 0xaf0 <_Z14leggiTAG_Mezzob+0x162>
     a32:	ff 20       	and	r15, r15
     a34:	99 f0       	breq	.+38     	; 0xa5c <_Z14leggiTAG_Mezzob+0xce>
     a36:	80 e1       	ldi	r24, 0x10	; 16
     a38:	ec eb       	ldi	r30, 0xBC	; 188
     a3a:	f9 e0       	ldi	r31, 0x09	; 9
     a3c:	de 01       	movw	r26, r28
     a3e:	11 96       	adiw	r26, 0x01	; 1
     a40:	01 90       	ld	r0, Z+
     a42:	0d 92       	st	X+, r0
     a44:	8a 95       	dec	r24
     a46:	e1 f7       	brne	.-8      	; 0xa40 <_Z14leggiTAG_Mezzob+0xb2>
     a48:	ae 01       	movw	r20, r28
     a4a:	4f 5f       	subi	r20, 0xFF	; 255
     a4c:	5f 4f       	sbci	r21, 0xFF	; 255
     a4e:	64 e0       	ldi	r22, 0x04	; 4
     a50:	8e e3       	ldi	r24, 0x3E	; 62
     a52:	9b e0       	ldi	r25, 0x0B	; 11
     a54:	0e 94 8d 20 	call	0x411a	; 0x411a <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh>
     a58:	80 93 76 0b 	sts	0x0B76, r24	; 0x800b76 <success>
     a5c:	ae 01       	movw	r20, r28
     a5e:	4f 5f       	subi	r20, 0xFF	; 255
     a60:	5f 4f       	sbci	r21, 0xFF	; 255
     a62:	64 e0       	ldi	r22, 0x04	; 4
     a64:	8e e3       	ldi	r24, 0x3E	; 62
     a66:	9b e0       	ldi	r25, 0x0B	; 11
     a68:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh>
     a6c:	80 93 76 0b 	sts	0x0B76, r24	; 0x800b76 <success>
     a70:	88 23       	and	r24, r24
     a72:	89 f1       	breq	.+98     	; 0xad6 <_Z14leggiTAG_Mezzob+0x148>
     a74:	61 e5       	ldi	r22, 0x51	; 81
     a76:	72 e0       	ldi	r23, 0x02	; 2
     a78:	86 e2       	ldi	r24, 0x26	; 38
     a7a:	9d e0       	ldi	r25, 0x0D	; 13
     a7c:	0e 94 8c 38 	call	0x7118	; 0x7118 <_ZN5Print7printlnEPKc>
     a80:	be 01       	movw	r22, r28
     a82:	6f 5f       	subi	r22, 0xFF	; 255
     a84:	7f 4f       	sbci	r23, 0xFF	; 255
     a86:	ce 01       	movw	r24, r28
     a88:	41 96       	adiw	r24, 0x11	; 17
     a8a:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
     a8e:	be 01       	movw	r22, r28
     a90:	6f 5e       	subi	r22, 0xEF	; 239
     a92:	7f 4f       	sbci	r23, 0xFF	; 255
     a94:	86 e2       	ldi	r24, 0x26	; 38
     a96:	9d e0       	ldi	r25, 0x0D	; 13
     a98:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <_ZN5Print7printlnERK6String>
     a9c:	8d 89       	ldd	r24, Y+21	; 0x15
     a9e:	9e 89       	ldd	r25, Y+22	; 0x16
     aa0:	06 97       	sbiw	r24, 0x06	; 6
     aa2:	59 f4       	brne	.+22     	; 0xaba <_Z14leggiTAG_Mezzob+0x12c>
     aa4:	be 01       	movw	r22, r28
     aa6:	6f 5e       	subi	r22, 0xEF	; 239
     aa8:	7f 4f       	sbci	r23, 0xFF	; 255
     aaa:	c5 01       	movw	r24, r10
     aac:	0e 94 76 3b 	call	0x76ec	; 0x76ec <_ZN6StringC1EOS_>
     ab0:	ce 01       	movw	r24, r28
     ab2:	41 96       	adiw	r24, 0x11	; 17
     ab4:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
     ab8:	37 c0       	rjmp	.+110    	; 0xb28 <_Z14leggiTAG_Mezzob+0x19a>
     aba:	9f ef       	ldi	r25, 0xFF	; 255
     abc:	21 ee       	ldi	r18, 0xE1	; 225
     abe:	84 e0       	ldi	r24, 0x04	; 4
     ac0:	91 50       	subi	r25, 0x01	; 1
     ac2:	20 40       	sbci	r18, 0x00	; 0
     ac4:	80 40       	sbci	r24, 0x00	; 0
     ac6:	e1 f7       	brne	.-8      	; 0xac0 <_Z14leggiTAG_Mezzob+0x132>
     ac8:	00 c0       	rjmp	.+0      	; 0xaca <_Z14leggiTAG_Mezzob+0x13c>
     aca:	00 00       	nop
     acc:	ce 01       	movw	r24, r28
     ace:	41 96       	adiw	r24, 0x11	; 17
     ad0:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
     ad4:	1d c0       	rjmp	.+58     	; 0xb10 <_Z14leggiTAG_Mezzob+0x182>
     ad6:	85 e5       	ldi	r24, 0x55	; 85
     ad8:	9b e0       	ldi	r25, 0x0B	; 11
     ada:	0e 94 a0 2f 	call	0x5f40	; 0x5f40 <_ZN3LCD5clearEv>
     ade:	41 e0       	ldi	r20, 0x01	; 1
     ae0:	60 e0       	ldi	r22, 0x00	; 0
     ae2:	85 e5       	ldi	r24, 0x55	; 85
     ae4:	9b e0       	ldi	r25, 0x0B	; 11
     ae6:	0e 94 a6 2f 	call	0x5f4c	; 0x5f4c <_ZN3LCD9setCursorEhh>
     aea:	61 e7       	ldi	r22, 0x71	; 113
     aec:	72 e0       	ldi	r23, 0x02	; 2
     aee:	0c c0       	rjmp	.+24     	; 0xb08 <_Z14leggiTAG_Mezzob+0x17a>
     af0:	85 e5       	ldi	r24, 0x55	; 85
     af2:	9b e0       	ldi	r25, 0x0B	; 11
     af4:	0e 94 a0 2f 	call	0x5f40	; 0x5f40 <_ZN3LCD5clearEv>
     af8:	41 e0       	ldi	r20, 0x01	; 1
     afa:	60 e0       	ldi	r22, 0x00	; 0
     afc:	85 e5       	ldi	r24, 0x55	; 85
     afe:	9b e0       	ldi	r25, 0x0B	; 11
     b00:	0e 94 a6 2f 	call	0x5f4c	; 0x5f4c <_ZN3LCD9setCursorEhh>
     b04:	6e e7       	ldi	r22, 0x7E	; 126
     b06:	72 e0       	ldi	r23, 0x02	; 2
     b08:	85 e5       	ldi	r24, 0x55	; 85
     b0a:	9b e0       	ldi	r25, 0x0B	; 11
     b0c:	0e 94 61 38 	call	0x70c2	; 0x70c2 <_ZN5Print5printEPKc>
     b10:	62 e4       	ldi	r22, 0x42	; 66
     b12:	72 e0       	ldi	r23, 0x02	; 2
     b14:	86 e2       	ldi	r24, 0x26	; 38
     b16:	9d e0       	ldi	r25, 0x0D	; 13
     b18:	0e 94 8c 38 	call	0x7118	; 0x7118 <_ZN5Print7printlnEPKc>
     b1c:	be 01       	movw	r22, r28
     b1e:	63 5e       	subi	r22, 0xE3	; 227
     b20:	7f 4f       	sbci	r23, 0xFF	; 255
     b22:	c5 01       	movw	r24, r10
     b24:	0e 94 76 3b 	call	0x76ec	; 0x76ec <_ZN6StringC1EOS_>
     b28:	ce 01       	movw	r24, r28
     b2a:	4d 96       	adiw	r24, 0x1d	; 29
     b2c:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
     b30:	c5 01       	movw	r24, r10
     b32:	a2 96       	adiw	r28, 0x22	; 34
     b34:	0f b6       	in	r0, 0x3f	; 63
     b36:	f8 94       	cli
     b38:	de bf       	out	0x3e, r29	; 62
     b3a:	0f be       	out	0x3f, r0	; 63
     b3c:	cd bf       	out	0x3d, r28	; 61
     b3e:	df 91       	pop	r29
     b40:	cf 91       	pop	r28
     b42:	1f 91       	pop	r17
     b44:	0f 91       	pop	r16
     b46:	ff 90       	pop	r15
     b48:	ef 90       	pop	r14
     b4a:	df 90       	pop	r13
     b4c:	cf 90       	pop	r12
     b4e:	bf 90       	pop	r11
     b50:	af 90       	pop	r10
     b52:	08 95       	ret

00000b54 <_Z14GetCodeRfidATev>:
     b54:	cf 92       	push	r12
     b56:	df 92       	push	r13
     b58:	ef 92       	push	r14
     b5a:	ff 92       	push	r15
     b5c:	0f 93       	push	r16
     b5e:	1f 93       	push	r17
     b60:	cf 93       	push	r28
     b62:	df 93       	push	r29
     b64:	cd b7       	in	r28, 0x3d	; 61
     b66:	de b7       	in	r29, 0x3e	; 62
     b68:	64 97       	sbiw	r28, 0x14	; 20
     b6a:	0f b6       	in	r0, 0x3f	; 63
     b6c:	f8 94       	cli
     b6e:	de bf       	out	0x3e, r29	; 62
     b70:	0f be       	out	0x3f, r0	; 63
     b72:	cd bf       	out	0x3d, r28	; 61
     b74:	7c 01       	movw	r14, r24
     b76:	ce 01       	movw	r24, r28
     b78:	01 96       	adiw	r24, 0x01	; 1
     b7a:	6c 01       	movw	r12, r24
     b7c:	87 e0       	ldi	r24, 0x07	; 7
     b7e:	f6 01       	movw	r30, r12
     b80:	11 92       	st	Z+, r1
     b82:	8a 95       	dec	r24
     b84:	e9 f7       	brne	.-6      	; 0xb80 <_Z14GetCodeRfidATev+0x2c>
     b86:	6c e8       	ldi	r22, 0x8C	; 140
     b88:	72 e0       	ldi	r23, 0x02	; 2
     b8a:	c7 01       	movw	r24, r14
     b8c:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
     b90:	00 e0       	ldi	r16, 0x00	; 0
     b92:	10 e0       	ldi	r17, 0x00	; 0
     b94:	9e 01       	movw	r18, r28
     b96:	2c 5e       	subi	r18, 0xEC	; 236
     b98:	3f 4f       	sbci	r19, 0xFF	; 255
     b9a:	a6 01       	movw	r20, r12
     b9c:	60 e0       	ldi	r22, 0x00	; 0
     b9e:	8e e3       	ldi	r24, 0x3E	; 62
     ba0:	9b e0       	ldi	r25, 0x0B	; 11
     ba2:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j>
     ba6:	88 23       	and	r24, r24
     ba8:	59 f1       	breq	.+86     	; 0xc00 <_Z14GetCodeRfidATev+0xac>
     baa:	0c 89       	ldd	r16, Y+20	; 0x14
     bac:	10 e0       	ldi	r17, 0x00	; 0
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	a6 01       	movw	r20, r12
     bb4:	6e e3       	ldi	r22, 0x3E	; 62
     bb6:	7b e0       	ldi	r23, 0x0B	; 11
     bb8:	ce 01       	movw	r24, r28
     bba:	0e 96       	adiw	r24, 0x0e	; 14
     bbc:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <_ZN9NFC_PN53210GetHexCodeEPKhm>
     bc0:	ce 01       	movw	r24, r28
     bc2:	0e 96       	adiw	r24, 0x0e	; 14
     bc4:	0e 94 bf 3d 	call	0x7b7e	; 0x7b7e <_ZN6String4trimEv>
     bc8:	28 e0       	ldi	r18, 0x08	; 8
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	40 e0       	ldi	r20, 0x00	; 0
     bce:	50 e0       	ldi	r21, 0x00	; 0
     bd0:	be 01       	movw	r22, r28
     bd2:	62 5f       	subi	r22, 0xF2	; 242
     bd4:	7f 4f       	sbci	r23, 0xFF	; 255
     bd6:	ce 01       	movw	r24, r28
     bd8:	08 96       	adiw	r24, 0x08	; 8
     bda:	0e 94 7c 3d 	call	0x7af8	; 0x7af8 <_ZNK6String9substringEjj>
     bde:	be 01       	movw	r22, r28
     be0:	68 5f       	subi	r22, 0xF8	; 248
     be2:	7f 4f       	sbci	r23, 0xFF	; 255
     be4:	c7 01       	movw	r24, r14
     be6:	0e 94 9b 3b 	call	0x7736	; 0x7736 <_ZN6StringaSEOS_>
     bea:	ce 01       	movw	r24, r28
     bec:	08 96       	adiw	r24, 0x08	; 8
     bee:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	80 93 6d 0b 	sts	0x0B6D, r24	; 0x800b6d <alreadyTimbrata>
     bf8:	ce 01       	movw	r24, r28
     bfa:	0e 96       	adiw	r24, 0x0e	; 14
     bfc:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
     c00:	c7 01       	movw	r24, r14
     c02:	64 96       	adiw	r28, 0x14	; 20
     c04:	0f b6       	in	r0, 0x3f	; 63
     c06:	f8 94       	cli
     c08:	de bf       	out	0x3e, r29	; 62
     c0a:	0f be       	out	0x3f, r0	; 63
     c0c:	cd bf       	out	0x3d, r28	; 61
     c0e:	df 91       	pop	r29
     c10:	cf 91       	pop	r28
     c12:	1f 91       	pop	r17
     c14:	0f 91       	pop	r16
     c16:	ff 90       	pop	r15
     c18:	ef 90       	pop	r14
     c1a:	df 90       	pop	r13
     c1c:	cf 90       	pop	r12
     c1e:	08 95       	ret

00000c20 <_Z19GetHTTPResponseCode6String>:
     c20:	ef 92       	push	r14
     c22:	ff 92       	push	r15
     c24:	0f 93       	push	r16
     c26:	1f 93       	push	r17
     c28:	cf 93       	push	r28
     c2a:	df 93       	push	r29
     c2c:	cd b7       	in	r28, 0x3d	; 61
     c2e:	de b7       	in	r29, 0x3e	; 62
     c30:	62 97       	sbiw	r28, 0x12	; 18
     c32:	0f b6       	in	r0, 0x3f	; 63
     c34:	f8 94       	cli
     c36:	de bf       	out	0x3e, r29	; 62
     c38:	0f be       	out	0x3f, r0	; 63
     c3a:	cd bf       	out	0x3d, r28	; 61
     c3c:	8c 01       	movw	r16, r24
     c3e:	7b 01       	movw	r14, r22
     c40:	63 e9       	ldi	r22, 0x93	; 147
     c42:	72 e0       	ldi	r23, 0x02	; 2
     c44:	ce 01       	movw	r24, r28
     c46:	0d 96       	adiw	r24, 0x0d	; 13
     c48:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
     c4c:	e1 db       	rcall	.-2110   	; 0x410 <_Z9printLinev>
     c4e:	6b e9       	ldi	r22, 0x9B	; 155
     c50:	72 e0       	ldi	r23, 0x02	; 2
     c52:	86 e2       	ldi	r24, 0x26	; 38
     c54:	9d e0       	ldi	r25, 0x0D	; 13
     c56:	0e 94 8c 38 	call	0x7118	; 0x7118 <_ZN5Print7printlnEPKc>
     c5a:	20 91 4f 01 	lds	r18, 0x014F	; 0x80014f <HTTP_len_response>
     c5e:	30 91 50 01 	lds	r19, 0x0150	; 0x800150 <HTTP_len_response+0x1>
     c62:	f7 01       	movw	r30, r14
     c64:	84 81       	ldd	r24, Z+4	; 0x04
     c66:	95 81       	ldd	r25, Z+5	; 0x05
     c68:	28 17       	cp	r18, r24
     c6a:	39 07       	cpc	r19, r25
     c6c:	49 f5       	brne	.+82     	; 0xcc0 <_Z19GetHTTPResponseCode6String+0xa0>
     c6e:	a9 01       	movw	r20, r18
     c70:	43 50       	subi	r20, 0x03	; 3
     c72:	51 09       	sbc	r21, r1
     c74:	b7 01       	movw	r22, r14
     c76:	ce 01       	movw	r24, r28
     c78:	07 96       	adiw	r24, 0x07	; 7
     c7a:	0e 94 7c 3d 	call	0x7af8	; 0x7af8 <_ZNK6String9substringEjj>
     c7e:	63 eb       	ldi	r22, 0xB3	; 179
     c80:	72 e0       	ldi	r23, 0x02	; 2
     c82:	ce 01       	movw	r24, r28
     c84:	01 96       	adiw	r24, 0x01	; 1
     c86:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
     c8a:	be 01       	movw	r22, r28
     c8c:	69 5f       	subi	r22, 0xF9	; 249
     c8e:	7f 4f       	sbci	r23, 0xFF	; 255
     c90:	ce 01       	movw	r24, r28
     c92:	01 96       	adiw	r24, 0x01	; 1
     c94:	0e 94 fc 3c 	call	0x79f8	; 0x79f8 <_ZplRK15StringSumHelperRK6String>
     c98:	bc 01       	movw	r22, r24
     c9a:	86 e2       	ldi	r24, 0x26	; 38
     c9c:	9d e0       	ldi	r25, 0x0D	; 13
     c9e:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <_ZN5Print7printlnERK6String>
     ca2:	ce 01       	movw	r24, r28
     ca4:	01 96       	adiw	r24, 0x01	; 1
     ca6:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
     caa:	be 01       	movw	r22, r28
     cac:	69 5f       	subi	r22, 0xF9	; 249
     cae:	7f 4f       	sbci	r23, 0xFF	; 255
     cb0:	c8 01       	movw	r24, r16
     cb2:	0e 94 76 3b 	call	0x76ec	; 0x76ec <_ZN6StringC1EOS_>
     cb6:	ce 01       	movw	r24, r28
     cb8:	07 96       	adiw	r24, 0x07	; 7
     cba:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
     cbe:	09 c0       	rjmp	.+18     	; 0xcd2 <_Z19GetHTTPResponseCode6String+0xb2>
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	ca db       	rcall	.-2156   	; 0x458 <_Z4passb>
     cc4:	a5 db       	rcall	.-2230   	; 0x410 <_Z9printLinev>
     cc6:	be 01       	movw	r22, r28
     cc8:	63 5f       	subi	r22, 0xF3	; 243
     cca:	7f 4f       	sbci	r23, 0xFF	; 255
     ccc:	c8 01       	movw	r24, r16
     cce:	0e 94 76 3b 	call	0x76ec	; 0x76ec <_ZN6StringC1EOS_>
     cd2:	ce 01       	movw	r24, r28
     cd4:	0d 96       	adiw	r24, 0x0d	; 13
     cd6:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
     cda:	c8 01       	movw	r24, r16
     cdc:	62 96       	adiw	r28, 0x12	; 18
     cde:	0f b6       	in	r0, 0x3f	; 63
     ce0:	f8 94       	cli
     ce2:	de bf       	out	0x3e, r29	; 62
     ce4:	0f be       	out	0x3f, r0	; 63
     ce6:	cd bf       	out	0x3d, r28	; 61
     ce8:	df 91       	pop	r29
     cea:	cf 91       	pop	r28
     cec:	1f 91       	pop	r17
     cee:	0f 91       	pop	r16
     cf0:	ff 90       	pop	r15
     cf2:	ef 90       	pop	r14
     cf4:	08 95       	ret

00000cf6 <_Z11GetAteCheckiPc14EthernetClient6String>:
     cf6:	af 92       	push	r10
     cf8:	bf 92       	push	r11
     cfa:	cf 92       	push	r12
     cfc:	df 92       	push	r13
     cfe:	ef 92       	push	r14
     d00:	ff 92       	push	r15
     d02:	0f 93       	push	r16
     d04:	1f 93       	push	r17
     d06:	cf 93       	push	r28
     d08:	df 93       	push	r29
     d0a:	cd b7       	in	r28, 0x3d	; 61
     d0c:	de b7       	in	r29, 0x3e	; 62
     d0e:	62 97       	sbiw	r28, 0x12	; 18
     d10:	0f b6       	in	r0, 0x3f	; 63
     d12:	f8 94       	cli
     d14:	de bf       	out	0x3e, r29	; 62
     d16:	0f be       	out	0x3f, r0	; 63
     d18:	cd bf       	out	0x3d, r28	; 61
     d1a:	5c 01       	movw	r10, r24
     d1c:	7b 01       	movw	r14, r22
     d1e:	8a 01       	movw	r16, r20
     d20:	69 01       	movw	r12, r18
     d22:	76 db       	rcall	.-2324   	; 0x410 <_Z9printLinev>
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	87 db       	rcall	.-2290   	; 0x436 <_Z8printTabh>
     d28:	6d e9       	ldi	r22, 0x9D	; 157
     d2a:	74 e0       	ldi	r23, 0x04	; 4
     d2c:	86 e2       	ldi	r24, 0x26	; 38
     d2e:	9d e0       	ldi	r25, 0x0D	; 13
     d30:	0e 94 61 38 	call	0x70c2	; 0x70c2 <_ZN5Print5printEPKc>
     d34:	a5 01       	movw	r20, r10
     d36:	b7 01       	movw	r22, r14
     d38:	c8 01       	movw	r24, r16
     d3a:	0e 94 c9 27 	call	0x4f92	; 0x4f92 <_ZN14EthernetClient7connectEPKcj>
     d3e:	89 2b       	or	r24, r25
     d40:	09 f4       	brne	.+2      	; 0xd44 <_Z11GetAteCheckiPc14EthernetClient6String+0x4e>
     d42:	8d c0       	rjmp	.+282    	; 0xe5e <_Z11GetAteCheckiPc14EthernetClient6String+0x168>
     d44:	2f ef       	ldi	r18, 0xFF	; 255
     d46:	81 ee       	ldi	r24, 0xE1	; 225
     d48:	94 e0       	ldi	r25, 0x04	; 4
     d4a:	21 50       	subi	r18, 0x01	; 1
     d4c:	80 40       	sbci	r24, 0x00	; 0
     d4e:	90 40       	sbci	r25, 0x00	; 0
     d50:	e1 f7       	brne	.-8      	; 0xd4a <_Z11GetAteCheckiPc14EthernetClient6String+0x54>
     d52:	00 c0       	rjmp	.+0      	; 0xd54 <_Z11GetAteCheckiPc14EthernetClient6String+0x5e>
     d54:	00 00       	nop
     d56:	6a ed       	ldi	r22, 0xDA	; 218
     d58:	74 e0       	ldi	r23, 0x04	; 4
     d5a:	ce 01       	movw	r24, r28
     d5c:	01 96       	adiw	r24, 0x01	; 1
     d5e:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
     d62:	b6 01       	movw	r22, r12
     d64:	ce 01       	movw	r24, r28
     d66:	01 96       	adiw	r24, 0x01	; 1
     d68:	0e 94 fc 3c 	call	0x79f8	; 0x79f8 <_ZplRK15StringSumHelperRK6String>
     d6c:	64 e1       	ldi	r22, 0x14	; 20
     d6e:	73 e0       	ldi	r23, 0x03	; 3
     d70:	0e 94 0d 3d 	call	0x7a1a	; 0x7a1a <_ZplRK15StringSumHelperPKc>
     d74:	bc 01       	movw	r22, r24
     d76:	82 e3       	ldi	r24, 0x32	; 50
     d78:	9b e0       	ldi	r25, 0x0B	; 11
     d7a:	0e 94 7e 3b 	call	0x76fc	; 0x76fc <_ZN6StringaSERKS_>
     d7e:	ce 01       	movw	r24, r28
     d80:	01 96       	adiw	r24, 0x01	; 1
     d82:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
     d86:	b7 01       	movw	r22, r14
     d88:	ce 01       	movw	r24, r28
     d8a:	07 96       	adiw	r24, 0x07	; 7
     d8c:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
     d90:	67 e0       	ldi	r22, 0x07	; 7
     d92:	75 e0       	ldi	r23, 0x05	; 5
     d94:	ce 01       	movw	r24, r28
     d96:	01 96       	adiw	r24, 0x01	; 1
     d98:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
     d9c:	be 01       	movw	r22, r28
     d9e:	69 5f       	subi	r22, 0xF9	; 249
     da0:	7f 4f       	sbci	r23, 0xFF	; 255
     da2:	ce 01       	movw	r24, r28
     da4:	01 96       	adiw	r24, 0x01	; 1
     da6:	0e 94 fc 3c 	call	0x79f8	; 0x79f8 <_ZplRK15StringSumHelperRK6String>
     daa:	bc 01       	movw	r22, r24
     dac:	82 e3       	ldi	r24, 0x32	; 50
     dae:	9b e0       	ldi	r25, 0x0B	; 11
     db0:	0e 94 d6 3c 	call	0x79ac	; 0x79ac <_ZN6String6concatERKS_>
     db4:	ce 01       	movw	r24, r28
     db6:	01 96       	adiw	r24, 0x01	; 1
     db8:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
     dbc:	ce 01       	movw	r24, r28
     dbe:	07 96       	adiw	r24, 0x07	; 7
     dc0:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
     dc4:	6d e1       	ldi	r22, 0x1D	; 29
     dc6:	73 e0       	ldi	r23, 0x03	; 3
     dc8:	82 e3       	ldi	r24, 0x32	; 50
     dca:	9b e0       	ldi	r25, 0x0B	; 11
     dcc:	0e 94 dc 3c 	call	0x79b8	; 0x79b8 <_ZN6String6concatEPKc>
     dd0:	64 e9       	ldi	r22, 0x94	; 148
     dd2:	73 e0       	ldi	r23, 0x03	; 3
     dd4:	82 e3       	ldi	r24, 0x32	; 50
     dd6:	9b e0       	ldi	r25, 0x0B	; 11
     dd8:	0e 94 dc 3c 	call	0x79b8	; 0x79b8 <_ZN6String6concatEPKc>
     ddc:	6d e1       	ldi	r22, 0x1D	; 29
     dde:	73 e0       	ldi	r23, 0x03	; 3
     de0:	82 e3       	ldi	r24, 0x32	; 50
     de2:	9b e0       	ldi	r25, 0x0B	; 11
     de4:	0e 94 dc 3c 	call	0x79b8	; 0x79b8 <_ZN6String6concatEPKc>
     de8:	6e e3       	ldi	r22, 0x3E	; 62
     dea:	74 e0       	ldi	r23, 0x04	; 4
     dec:	82 e3       	ldi	r24, 0x32	; 50
     dee:	9b e0       	ldi	r25, 0x0B	; 11
     df0:	0e 94 dc 3c 	call	0x79b8	; 0x79b8 <_ZN6String6concatEPKc>
     df4:	6d e1       	ldi	r22, 0x1D	; 29
     df6:	73 e0       	ldi	r23, 0x03	; 3
     df8:	82 e3       	ldi	r24, 0x32	; 50
     dfa:	9b e0       	ldi	r25, 0x0B	; 11
     dfc:	0e 94 dc 3c 	call	0x79b8	; 0x79b8 <_ZN6String6concatEPKc>
     e00:	6e e0       	ldi	r22, 0x0E	; 14
     e02:	75 e0       	ldi	r23, 0x05	; 5
     e04:	82 e3       	ldi	r24, 0x32	; 50
     e06:	9b e0       	ldi	r25, 0x0B	; 11
     e08:	0e 94 dc 3c 	call	0x79b8	; 0x79b8 <_ZN6String6concatEPKc>
     e0c:	6d e1       	ldi	r22, 0x1D	; 29
     e0e:	73 e0       	ldi	r23, 0x03	; 3
     e10:	82 e3       	ldi	r24, 0x32	; 50
     e12:	9b e0       	ldi	r25, 0x0B	; 11
     e14:	0e 94 dc 3c 	call	0x79b8	; 0x79b8 <_ZN6String6concatEPKc>
     e18:	6d e1       	ldi	r22, 0x1D	; 29
     e1a:	73 e0       	ldi	r23, 0x03	; 3
     e1c:	82 e3       	ldi	r24, 0x32	; 50
     e1e:	9b e0       	ldi	r25, 0x0B	; 11
     e20:	0e 94 dc 3c 	call	0x79b8	; 0x79b8 <_ZN6String6concatEPKc>
     e24:	62 e3       	ldi	r22, 0x32	; 50
     e26:	7b e0       	ldi	r23, 0x0B	; 11
     e28:	86 e2       	ldi	r24, 0x26	; 38
     e2a:	9d e0       	ldi	r25, 0x0D	; 13
     e2c:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <_ZN5Print7printlnERK6String>
     e30:	62 e3       	ldi	r22, 0x32	; 50
     e32:	7b e0       	ldi	r23, 0x0B	; 11
     e34:	c8 01       	movw	r24, r16
     e36:	0e 94 53 38 	call	0x70a6	; 0x70a6 <_ZN5Print5printERK6String>
     e3a:	2f ef       	ldi	r18, 0xFF	; 255
     e3c:	83 ec       	ldi	r24, 0xC3	; 195
     e3e:	99 e0       	ldi	r25, 0x09	; 9
     e40:	21 50       	subi	r18, 0x01	; 1
     e42:	80 40       	sbci	r24, 0x00	; 0
     e44:	90 40       	sbci	r25, 0x00	; 0
     e46:	e1 f7       	brne	.-8      	; 0xe40 <_Z11GetAteCheckiPc14EthernetClient6String+0x14a>
     e48:	00 c0       	rjmp	.+0      	; 0xe4a <_Z11GetAteCheckiPc14EthernetClient6String+0x154>
     e4a:	00 00       	nop
     e4c:	6d e5       	ldi	r22, 0x5D	; 93
     e4e:	74 e0       	ldi	r23, 0x04	; 4
     e50:	c8 01       	movw	r24, r16
     e52:	0e 94 8c 38 	call	0x7118	; 0x7118 <_ZN5Print7printlnEPKc>
     e56:	c8 01       	movw	r24, r16
     e58:	0e 94 69 38 	call	0x70d2	; 0x70d2 <_ZN5Print7printlnEv>
     e5c:	25 c0       	rjmp	.+74     	; 0xea8 <_Z11GetAteCheckiPc14EthernetClient6String+0x1b2>
     e5e:	85 e5       	ldi	r24, 0x55	; 85
     e60:	9b e0       	ldi	r25, 0x0B	; 11
     e62:	0e 94 a0 2f 	call	0x5f40	; 0x5f40 <_ZN3LCD5clearEv>
     e66:	41 e0       	ldi	r20, 0x01	; 1
     e68:	60 e0       	ldi	r22, 0x00	; 0
     e6a:	85 e5       	ldi	r24, 0x55	; 85
     e6c:	9b e0       	ldi	r25, 0x0B	; 11
     e6e:	0e 94 a6 2f 	call	0x5f4c	; 0x5f4c <_ZN3LCD9setCursorEhh>
     e72:	6f e6       	ldi	r22, 0x6F	; 111
     e74:	74 e0       	ldi	r23, 0x04	; 4
     e76:	85 e5       	ldi	r24, 0x55	; 85
     e78:	9b e0       	ldi	r25, 0x0B	; 11
     e7a:	0e 94 61 38 	call	0x70c2	; 0x70c2 <_ZN5Print5printEPKc>
     e7e:	43 e0       	ldi	r20, 0x03	; 3
     e80:	60 e0       	ldi	r22, 0x00	; 0
     e82:	85 e5       	ldi	r24, 0x55	; 85
     e84:	9b e0       	ldi	r25, 0x0B	; 11
     e86:	0e 94 a6 2f 	call	0x5f4c	; 0x5f4c <_ZN3LCD9setCursorEhh>
     e8a:	64 e8       	ldi	r22, 0x84	; 132
     e8c:	74 e0       	ldi	r23, 0x04	; 4
     e8e:	85 e5       	ldi	r24, 0x55	; 85
     e90:	9b e0       	ldi	r25, 0x0B	; 11
     e92:	0e 94 61 38 	call	0x70c2	; 0x70c2 <_ZN5Print5printEPKc>
     e96:	2f ef       	ldi	r18, 0xFF	; 255
     e98:	83 ed       	ldi	r24, 0xD3	; 211
     e9a:	90 e3       	ldi	r25, 0x30	; 48
     e9c:	21 50       	subi	r18, 0x01	; 1
     e9e:	80 40       	sbci	r24, 0x00	; 0
     ea0:	90 40       	sbci	r25, 0x00	; 0
     ea2:	e1 f7       	brne	.-8      	; 0xe9c <_Z11GetAteCheckiPc14EthernetClient6String+0x1a6>
     ea4:	00 c0       	rjmp	.+0      	; 0xea6 <_Z11GetAteCheckiPc14EthernetClient6String+0x1b0>
     ea6:	00 00       	nop
     ea8:	8f e3       	ldi	r24, 0x3F	; 63
     eaa:	9c e9       	ldi	r25, 0x9C	; 156
     eac:	01 97       	sbiw	r24, 0x01	; 1
     eae:	f1 f7       	brne	.-4      	; 0xeac <_Z11GetAteCheckiPc14EthernetClient6String+0x1b6>
     eb0:	00 c0       	rjmp	.+0      	; 0xeb2 <_Z11GetAteCheckiPc14EthernetClient6String+0x1bc>
     eb2:	00 00       	nop
     eb4:	6a e1       	ldi	r22, 0x1A	; 26
     eb6:	75 e0       	ldi	r23, 0x05	; 5
     eb8:	ce 01       	movw	r24, r28
     eba:	0d 96       	adiw	r24, 0x0d	; 13
     ebc:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
     ec0:	c8 01       	movw	r24, r16
     ec2:	0e 94 40 28 	call	0x5080	; 0x5080 <_ZN14EthernetClient9availableEv>
     ec6:	89 2b       	or	r24, r25
     ec8:	21 f1       	breq	.+72     	; 0xf12 <_Z11GetAteCheckiPc14EthernetClient6String+0x21c>
     eca:	20 91 4f 01 	lds	r18, 0x014F	; 0x80014f <HTTP_len_response>
     ece:	30 91 50 01 	lds	r19, 0x0150	; 0x800150 <HTTP_len_response+0x1>
     ed2:	80 91 29 0b 	lds	r24, 0x0B29	; 0x800b29 <RispostaHTTP+0x4>
     ed6:	90 91 2a 0b 	lds	r25, 0x0B2A	; 0x800b2a <RispostaHTTP+0x5>
     eda:	82 17       	cp	r24, r18
     edc:	93 07       	cpc	r25, r19
     ede:	c8 f4       	brcc	.+50     	; 0xf12 <_Z11GetAteCheckiPc14EthernetClient6String+0x21c>
     ee0:	c8 01       	movw	r24, r16
     ee2:	0e 94 4a 28 	call	0x5094	; 0x5094 <_ZN14EthernetClient4readEv>
     ee6:	f8 2e       	mov	r15, r24
     ee8:	65 e2       	ldi	r22, 0x25	; 37
     eea:	7b e0       	ldi	r23, 0x0B	; 11
     eec:	ce 01       	movw	r24, r28
     eee:	01 96       	adiw	r24, 0x01	; 1
     ef0:	0e 94 93 3b 	call	0x7726	; 0x7726 <_ZN6StringC1ERKS_>
     ef4:	6f 2d       	mov	r22, r15
     ef6:	ce 01       	movw	r24, r28
     ef8:	01 96       	adiw	r24, 0x01	; 1
     efa:	0e 94 24 3d 	call	0x7a48	; 0x7a48 <_ZplRK15StringSumHelperc>
     efe:	bc 01       	movw	r22, r24
     f00:	85 e2       	ldi	r24, 0x25	; 37
     f02:	9b e0       	ldi	r25, 0x0B	; 11
     f04:	0e 94 7e 3b 	call	0x76fc	; 0x76fc <_ZN6StringaSERKS_>
     f08:	ce 01       	movw	r24, r28
     f0a:	01 96       	adiw	r24, 0x01	; 1
     f0c:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
     f10:	d7 cf       	rjmp	.-82     	; 0xec0 <_Z11GetAteCheckiPc14EthernetClient6String+0x1ca>
     f12:	65 e2       	ldi	r22, 0x25	; 37
     f14:	7b e0       	ldi	r23, 0x0B	; 11
     f16:	ce 01       	movw	r24, r28
     f18:	07 96       	adiw	r24, 0x07	; 7
     f1a:	0e 94 93 3b 	call	0x7726	; 0x7726 <_ZN6StringC1ERKS_>
     f1e:	be 01       	movw	r22, r28
     f20:	69 5f       	subi	r22, 0xF9	; 249
     f22:	7f 4f       	sbci	r23, 0xFF	; 255
     f24:	ce 01       	movw	r24, r28
     f26:	01 96       	adiw	r24, 0x01	; 1
     f28:	7b de       	rcall	.-778    	; 0xc20 <_Z19GetHTTPResponseCode6String>
     f2a:	be 01       	movw	r22, r28
     f2c:	6f 5f       	subi	r22, 0xFF	; 255
     f2e:	7f 4f       	sbci	r23, 0xFF	; 255
     f30:	ce 01       	movw	r24, r28
     f32:	0d 96       	adiw	r24, 0x0d	; 13
     f34:	0e 94 9b 3b 	call	0x7736	; 0x7736 <_ZN6StringaSEOS_>
     f38:	ce 01       	movw	r24, r28
     f3a:	01 96       	adiw	r24, 0x01	; 1
     f3c:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
     f40:	ce 01       	movw	r24, r28
     f42:	07 96       	adiw	r24, 0x07	; 7
     f44:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
     f48:	9f ef       	ldi	r25, 0xFF	; 255
     f4a:	27 ee       	ldi	r18, 0xE7	; 231
     f4c:	83 e0       	ldi	r24, 0x03	; 3
     f4e:	91 50       	subi	r25, 0x01	; 1
     f50:	20 40       	sbci	r18, 0x00	; 0
     f52:	80 40       	sbci	r24, 0x00	; 0
     f54:	e1 f7       	brne	.-8      	; 0xf4e <_Z11GetAteCheckiPc14EthernetClient6String+0x258>
     f56:	00 c0       	rjmp	.+0      	; 0xf58 <_Z11GetAteCheckiPc14EthernetClient6String+0x262>
     f58:	00 00       	nop
     f5a:	69 e9       	ldi	r22, 0x99	; 153
     f5c:	74 e0       	ldi	r23, 0x04	; 4
     f5e:	ce 01       	movw	r24, r28
     f60:	0d 96       	adiw	r24, 0x0d	; 13
     f62:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <_ZNK6String6equalsEPKc>
     f66:	88 23       	and	r24, r24
     f68:	29 f0       	breq	.+10     	; 0xf74 <_Z11GetAteCheckiPc14EthernetClient6String+0x27e>
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	75 da       	rcall	.-2838   	; 0x458 <_Z4passb>
     f6e:	50 da       	rcall	.-2912   	; 0x410 <_Z9printLinev>
     f70:	11 e0       	ldi	r17, 0x01	; 1
     f72:	01 c0       	rjmp	.+2      	; 0xf76 <_Z11GetAteCheckiPc14EthernetClient6String+0x280>
     f74:	10 e0       	ldi	r17, 0x00	; 0
     f76:	ce 01       	movw	r24, r28
     f78:	0d 96       	adiw	r24, 0x0d	; 13
     f7a:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
     f7e:	81 2f       	mov	r24, r17
     f80:	62 96       	adiw	r28, 0x12	; 18
     f82:	0f b6       	in	r0, 0x3f	; 63
     f84:	f8 94       	cli
     f86:	de bf       	out	0x3e, r29	; 62
     f88:	0f be       	out	0x3f, r0	; 63
     f8a:	cd bf       	out	0x3d, r28	; 61
     f8c:	df 91       	pop	r29
     f8e:	cf 91       	pop	r28
     f90:	1f 91       	pop	r17
     f92:	0f 91       	pop	r16
     f94:	ff 90       	pop	r15
     f96:	ef 90       	pop	r14
     f98:	df 90       	pop	r13
     f9a:	cf 90       	pop	r12
     f9c:	bf 90       	pop	r11
     f9e:	af 90       	pop	r10
     fa0:	08 95       	ret

00000fa2 <_Z17PostErogazioneGACiPc14EthernetClient6String>:
     fa2:	af 92       	push	r10
     fa4:	bf 92       	push	r11
     fa6:	cf 92       	push	r12
     fa8:	df 92       	push	r13
     faa:	ef 92       	push	r14
     fac:	ff 92       	push	r15
     fae:	0f 93       	push	r16
     fb0:	1f 93       	push	r17
     fb2:	cf 93       	push	r28
     fb4:	df 93       	push	r29
     fb6:	cd b7       	in	r28, 0x3d	; 61
     fb8:	de b7       	in	r29, 0x3e	; 62
     fba:	62 97       	sbiw	r28, 0x12	; 18
     fbc:	0f b6       	in	r0, 0x3f	; 63
     fbe:	f8 94       	cli
     fc0:	de bf       	out	0x3e, r29	; 62
     fc2:	0f be       	out	0x3f, r0	; 63
     fc4:	cd bf       	out	0x3d, r28	; 61
     fc6:	5c 01       	movw	r10, r24
     fc8:	6b 01       	movw	r12, r22
     fca:	8a 01       	movw	r16, r20
     fcc:	79 01       	movw	r14, r18
     fce:	20 da       	rcall	.-3008   	; 0x410 <_Z9printLinev>
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	31 da       	rcall	.-2974   	; 0x436 <_Z8printTabh>
     fd4:	6c e1       	ldi	r22, 0x1C	; 28
     fd6:	75 e0       	ldi	r23, 0x05	; 5
     fd8:	86 e2       	ldi	r24, 0x26	; 38
     fda:	9d e0       	ldi	r25, 0x0D	; 13
     fdc:	0e 94 61 38 	call	0x70c2	; 0x70c2 <_ZN5Print5printEPKc>
     fe0:	a5 01       	movw	r20, r10
     fe2:	b6 01       	movw	r22, r12
     fe4:	c8 01       	movw	r24, r16
     fe6:	0e 94 c9 27 	call	0x4f92	; 0x4f92 <_ZN14EthernetClient7connectEPKcj>
     fea:	89 2b       	or	r24, r25
     fec:	09 f4       	brne	.+2      	; 0xff0 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x4e>
     fee:	b0 c0       	rjmp	.+352    	; 0x1150 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x1ae>
     ff0:	2f ef       	ldi	r18, 0xFF	; 255
     ff2:	81 ee       	ldi	r24, 0xE1	; 225
     ff4:	94 e0       	ldi	r25, 0x04	; 4
     ff6:	21 50       	subi	r18, 0x01	; 1
     ff8:	80 40       	sbci	r24, 0x00	; 0
     ffa:	90 40       	sbci	r25, 0x00	; 0
     ffc:	e1 f7       	brne	.-8      	; 0xff6 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x54>
     ffe:	00 c0       	rjmp	.+0      	; 0x1000 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x5e>
    1000:	00 00       	nop
    1002:	6c e5       	ldi	r22, 0x5C	; 92
    1004:	75 e0       	ldi	r23, 0x05	; 5
    1006:	82 e3       	ldi	r24, 0x32	; 50
    1008:	9b e0       	ldi	r25, 0x0B	; 11
    100a:	0e 94 a6 3b 	call	0x774c	; 0x774c <_ZN6StringaSEPKc>
    100e:	b6 01       	movw	r22, r12
    1010:	ce 01       	movw	r24, r28
    1012:	07 96       	adiw	r24, 0x07	; 7
    1014:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
    1018:	67 e0       	ldi	r22, 0x07	; 7
    101a:	75 e0       	ldi	r23, 0x05	; 5
    101c:	ce 01       	movw	r24, r28
    101e:	01 96       	adiw	r24, 0x01	; 1
    1020:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
    1024:	be 01       	movw	r22, r28
    1026:	69 5f       	subi	r22, 0xF9	; 249
    1028:	7f 4f       	sbci	r23, 0xFF	; 255
    102a:	ce 01       	movw	r24, r28
    102c:	01 96       	adiw	r24, 0x01	; 1
    102e:	0e 94 fc 3c 	call	0x79f8	; 0x79f8 <_ZplRK15StringSumHelperRK6String>
    1032:	bc 01       	movw	r22, r24
    1034:	82 e3       	ldi	r24, 0x32	; 50
    1036:	9b e0       	ldi	r25, 0x0B	; 11
    1038:	0e 94 d6 3c 	call	0x79ac	; 0x79ac <_ZN6String6concatERKS_>
    103c:	ce 01       	movw	r24, r28
    103e:	01 96       	adiw	r24, 0x01	; 1
    1040:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
    1044:	ce 01       	movw	r24, r28
    1046:	07 96       	adiw	r24, 0x07	; 7
    1048:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
    104c:	6d e1       	ldi	r22, 0x1D	; 29
    104e:	73 e0       	ldi	r23, 0x03	; 3
    1050:	82 e3       	ldi	r24, 0x32	; 50
    1052:	9b e0       	ldi	r25, 0x0B	; 11
    1054:	0e 94 dc 3c 	call	0x79b8	; 0x79b8 <_ZN6String6concatEPKc>
    1058:	64 e9       	ldi	r22, 0x94	; 148
    105a:	73 e0       	ldi	r23, 0x03	; 3
    105c:	82 e3       	ldi	r24, 0x32	; 50
    105e:	9b e0       	ldi	r25, 0x0B	; 11
    1060:	0e 94 dc 3c 	call	0x79b8	; 0x79b8 <_ZN6String6concatEPKc>
    1064:	6d e1       	ldi	r22, 0x1D	; 29
    1066:	73 e0       	ldi	r23, 0x03	; 3
    1068:	82 e3       	ldi	r24, 0x32	; 50
    106a:	9b e0       	ldi	r25, 0x0B	; 11
    106c:	0e 94 dc 3c 	call	0x79b8	; 0x79b8 <_ZN6String6concatEPKc>
    1070:	6e e3       	ldi	r22, 0x3E	; 62
    1072:	74 e0       	ldi	r23, 0x04	; 4
    1074:	82 e3       	ldi	r24, 0x32	; 50
    1076:	9b e0       	ldi	r25, 0x0B	; 11
    1078:	0e 94 dc 3c 	call	0x79b8	; 0x79b8 <_ZN6String6concatEPKc>
    107c:	6d e1       	ldi	r22, 0x1D	; 29
    107e:	73 e0       	ldi	r23, 0x03	; 3
    1080:	82 e3       	ldi	r24, 0x32	; 50
    1082:	9b e0       	ldi	r25, 0x0B	; 11
    1084:	0e 94 dc 3c 	call	0x79b8	; 0x79b8 <_ZN6String6concatEPKc>
    1088:	6e e0       	ldi	r22, 0x0E	; 14
    108a:	75 e0       	ldi	r23, 0x05	; 5
    108c:	82 e3       	ldi	r24, 0x32	; 50
    108e:	9b e0       	ldi	r25, 0x0B	; 11
    1090:	0e 94 dc 3c 	call	0x79b8	; 0x79b8 <_ZN6String6concatEPKc>
    1094:	6d e1       	ldi	r22, 0x1D	; 29
    1096:	73 e0       	ldi	r23, 0x03	; 3
    1098:	82 e3       	ldi	r24, 0x32	; 50
    109a:	9b e0       	ldi	r25, 0x0B	; 11
    109c:	0e 94 dc 3c 	call	0x79b8	; 0x79b8 <_ZN6String6concatEPKc>
    10a0:	f7 01       	movw	r30, r14
    10a2:	64 81       	ldd	r22, Z+4	; 0x04
    10a4:	75 81       	ldd	r23, Z+5	; 0x05
    10a6:	6b 5e       	subi	r22, 0xEB	; 235
    10a8:	7f 4f       	sbci	r23, 0xFF	; 255
    10aa:	4a e0       	ldi	r20, 0x0A	; 10
    10ac:	ce 01       	movw	r24, r28
    10ae:	07 96       	adiw	r24, 0x07	; 7
    10b0:	0e 94 27 3c 	call	0x784e	; 0x784e <_ZN6StringC1Ejh>
    10b4:	6e e7       	ldi	r22, 0x7E	; 126
    10b6:	75 e0       	ldi	r23, 0x05	; 5
    10b8:	ce 01       	movw	r24, r28
    10ba:	01 96       	adiw	r24, 0x01	; 1
    10bc:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
    10c0:	be 01       	movw	r22, r28
    10c2:	69 5f       	subi	r22, 0xF9	; 249
    10c4:	7f 4f       	sbci	r23, 0xFF	; 255
    10c6:	ce 01       	movw	r24, r28
    10c8:	01 96       	adiw	r24, 0x01	; 1
    10ca:	0e 94 fc 3c 	call	0x79f8	; 0x79f8 <_ZplRK15StringSumHelperRK6String>
    10ce:	bc 01       	movw	r22, r24
    10d0:	82 e3       	ldi	r24, 0x32	; 50
    10d2:	9b e0       	ldi	r25, 0x0B	; 11
    10d4:	0e 94 d6 3c 	call	0x79ac	; 0x79ac <_ZN6String6concatERKS_>
    10d8:	ce 01       	movw	r24, r28
    10da:	01 96       	adiw	r24, 0x01	; 1
    10dc:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
    10e0:	ce 01       	movw	r24, r28
    10e2:	07 96       	adiw	r24, 0x07	; 7
    10e4:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
    10e8:	6d e1       	ldi	r22, 0x1D	; 29
    10ea:	73 e0       	ldi	r23, 0x03	; 3
    10ec:	82 e3       	ldi	r24, 0x32	; 50
    10ee:	9b e0       	ldi	r25, 0x0B	; 11
    10f0:	0e 94 dc 3c 	call	0x79b8	; 0x79b8 <_ZN6String6concatEPKc>
    10f4:	6d e1       	ldi	r22, 0x1D	; 29
    10f6:	73 e0       	ldi	r23, 0x03	; 3
    10f8:	82 e3       	ldi	r24, 0x32	; 50
    10fa:	9b e0       	ldi	r25, 0x0B	; 11
    10fc:	0e 94 dc 3c 	call	0x79b8	; 0x79b8 <_ZN6String6concatEPKc>
    1100:	b7 01       	movw	r22, r14
    1102:	82 e3       	ldi	r24, 0x32	; 50
    1104:	9b e0       	ldi	r25, 0x0B	; 11
    1106:	0e 94 d6 3c 	call	0x79ac	; 0x79ac <_ZN6String6concatERKS_>
    110a:	6d e1       	ldi	r22, 0x1D	; 29
    110c:	73 e0       	ldi	r23, 0x03	; 3
    110e:	82 e3       	ldi	r24, 0x32	; 50
    1110:	9b e0       	ldi	r25, 0x0B	; 11
    1112:	0e 94 dc 3c 	call	0x79b8	; 0x79b8 <_ZN6String6concatEPKc>
    1116:	62 e3       	ldi	r22, 0x32	; 50
    1118:	7b e0       	ldi	r23, 0x0B	; 11
    111a:	86 e2       	ldi	r24, 0x26	; 38
    111c:	9d e0       	ldi	r25, 0x0D	; 13
    111e:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <_ZN5Print7printlnERK6String>
    1122:	62 e3       	ldi	r22, 0x32	; 50
    1124:	7b e0       	ldi	r23, 0x0B	; 11
    1126:	c8 01       	movw	r24, r16
    1128:	0e 94 53 38 	call	0x70a6	; 0x70a6 <_ZN5Print5printERK6String>
    112c:	ff ef       	ldi	r31, 0xFF	; 255
    112e:	23 ec       	ldi	r18, 0xC3	; 195
    1130:	89 e0       	ldi	r24, 0x09	; 9
    1132:	f1 50       	subi	r31, 0x01	; 1
    1134:	20 40       	sbci	r18, 0x00	; 0
    1136:	80 40       	sbci	r24, 0x00	; 0
    1138:	e1 f7       	brne	.-8      	; 0x1132 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x190>
    113a:	00 c0       	rjmp	.+0      	; 0x113c <_Z17PostErogazioneGACiPc14EthernetClient6String+0x19a>
    113c:	00 00       	nop
    113e:	6d e5       	ldi	r22, 0x5D	; 93
    1140:	74 e0       	ldi	r23, 0x04	; 4
    1142:	c8 01       	movw	r24, r16
    1144:	0e 94 8c 38 	call	0x7118	; 0x7118 <_ZN5Print7printlnEPKc>
    1148:	c8 01       	movw	r24, r16
    114a:	0e 94 69 38 	call	0x70d2	; 0x70d2 <_ZN5Print7printlnEv>
    114e:	25 c0       	rjmp	.+74     	; 0x119a <_Z17PostErogazioneGACiPc14EthernetClient6String+0x1f8>
    1150:	85 e5       	ldi	r24, 0x55	; 85
    1152:	9b e0       	ldi	r25, 0x0B	; 11
    1154:	0e 94 a0 2f 	call	0x5f40	; 0x5f40 <_ZN3LCD5clearEv>
    1158:	41 e0       	ldi	r20, 0x01	; 1
    115a:	60 e0       	ldi	r22, 0x00	; 0
    115c:	85 e5       	ldi	r24, 0x55	; 85
    115e:	9b e0       	ldi	r25, 0x0B	; 11
    1160:	0e 94 a6 2f 	call	0x5f4c	; 0x5f4c <_ZN3LCD9setCursorEhh>
    1164:	6f e6       	ldi	r22, 0x6F	; 111
    1166:	74 e0       	ldi	r23, 0x04	; 4
    1168:	85 e5       	ldi	r24, 0x55	; 85
    116a:	9b e0       	ldi	r25, 0x0B	; 11
    116c:	0e 94 61 38 	call	0x70c2	; 0x70c2 <_ZN5Print5printEPKc>
    1170:	43 e0       	ldi	r20, 0x03	; 3
    1172:	60 e0       	ldi	r22, 0x00	; 0
    1174:	85 e5       	ldi	r24, 0x55	; 85
    1176:	9b e0       	ldi	r25, 0x0B	; 11
    1178:	0e 94 a6 2f 	call	0x5f4c	; 0x5f4c <_ZN3LCD9setCursorEhh>
    117c:	64 e8       	ldi	r22, 0x84	; 132
    117e:	74 e0       	ldi	r23, 0x04	; 4
    1180:	85 e5       	ldi	r24, 0x55	; 85
    1182:	9b e0       	ldi	r25, 0x0B	; 11
    1184:	0e 94 61 38 	call	0x70c2	; 0x70c2 <_ZN5Print5printEPKc>
    1188:	9f ef       	ldi	r25, 0xFF	; 255
    118a:	e3 ed       	ldi	r30, 0xD3	; 211
    118c:	f0 e3       	ldi	r31, 0x30	; 48
    118e:	91 50       	subi	r25, 0x01	; 1
    1190:	e0 40       	sbci	r30, 0x00	; 0
    1192:	f0 40       	sbci	r31, 0x00	; 0
    1194:	e1 f7       	brne	.-8      	; 0x118e <_Z17PostErogazioneGACiPc14EthernetClient6String+0x1ec>
    1196:	00 c0       	rjmp	.+0      	; 0x1198 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x1f6>
    1198:	00 00       	nop
    119a:	8f e3       	ldi	r24, 0x3F	; 63
    119c:	9c e9       	ldi	r25, 0x9C	; 156
    119e:	01 97       	sbiw	r24, 0x01	; 1
    11a0:	f1 f7       	brne	.-4      	; 0x119e <_Z17PostErogazioneGACiPc14EthernetClient6String+0x1fc>
    11a2:	00 c0       	rjmp	.+0      	; 0x11a4 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x202>
    11a4:	00 00       	nop
    11a6:	6a e1       	ldi	r22, 0x1A	; 26
    11a8:	75 e0       	ldi	r23, 0x05	; 5
    11aa:	ce 01       	movw	r24, r28
    11ac:	0d 96       	adiw	r24, 0x0d	; 13
    11ae:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
    11b2:	c8 01       	movw	r24, r16
    11b4:	0e 94 40 28 	call	0x5080	; 0x5080 <_ZN14EthernetClient9availableEv>
    11b8:	89 2b       	or	r24, r25
    11ba:	21 f1       	breq	.+72     	; 0x1204 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x262>
    11bc:	20 91 4f 01 	lds	r18, 0x014F	; 0x80014f <HTTP_len_response>
    11c0:	30 91 50 01 	lds	r19, 0x0150	; 0x800150 <HTTP_len_response+0x1>
    11c4:	80 91 29 0b 	lds	r24, 0x0B29	; 0x800b29 <RispostaHTTP+0x4>
    11c8:	90 91 2a 0b 	lds	r25, 0x0B2A	; 0x800b2a <RispostaHTTP+0x5>
    11cc:	82 17       	cp	r24, r18
    11ce:	93 07       	cpc	r25, r19
    11d0:	c8 f4       	brcc	.+50     	; 0x1204 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x262>
    11d2:	c8 01       	movw	r24, r16
    11d4:	0e 94 4a 28 	call	0x5094	; 0x5094 <_ZN14EthernetClient4readEv>
    11d8:	f8 2e       	mov	r15, r24
    11da:	65 e2       	ldi	r22, 0x25	; 37
    11dc:	7b e0       	ldi	r23, 0x0B	; 11
    11de:	ce 01       	movw	r24, r28
    11e0:	01 96       	adiw	r24, 0x01	; 1
    11e2:	0e 94 93 3b 	call	0x7726	; 0x7726 <_ZN6StringC1ERKS_>
    11e6:	6f 2d       	mov	r22, r15
    11e8:	ce 01       	movw	r24, r28
    11ea:	01 96       	adiw	r24, 0x01	; 1
    11ec:	0e 94 24 3d 	call	0x7a48	; 0x7a48 <_ZplRK15StringSumHelperc>
    11f0:	bc 01       	movw	r22, r24
    11f2:	85 e2       	ldi	r24, 0x25	; 37
    11f4:	9b e0       	ldi	r25, 0x0B	; 11
    11f6:	0e 94 7e 3b 	call	0x76fc	; 0x76fc <_ZN6StringaSERKS_>
    11fa:	ce 01       	movw	r24, r28
    11fc:	01 96       	adiw	r24, 0x01	; 1
    11fe:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
    1202:	d7 cf       	rjmp	.-82     	; 0x11b2 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x210>
    1204:	65 e2       	ldi	r22, 0x25	; 37
    1206:	7b e0       	ldi	r23, 0x0B	; 11
    1208:	ce 01       	movw	r24, r28
    120a:	07 96       	adiw	r24, 0x07	; 7
    120c:	0e 94 93 3b 	call	0x7726	; 0x7726 <_ZN6StringC1ERKS_>
    1210:	be 01       	movw	r22, r28
    1212:	69 5f       	subi	r22, 0xF9	; 249
    1214:	7f 4f       	sbci	r23, 0xFF	; 255
    1216:	ce 01       	movw	r24, r28
    1218:	01 96       	adiw	r24, 0x01	; 1
    121a:	02 dd       	rcall	.-1532   	; 0xc20 <_Z19GetHTTPResponseCode6String>
    121c:	be 01       	movw	r22, r28
    121e:	6f 5f       	subi	r22, 0xFF	; 255
    1220:	7f 4f       	sbci	r23, 0xFF	; 255
    1222:	ce 01       	movw	r24, r28
    1224:	0d 96       	adiw	r24, 0x0d	; 13
    1226:	0e 94 9b 3b 	call	0x7736	; 0x7736 <_ZN6StringaSEOS_>
    122a:	ce 01       	movw	r24, r28
    122c:	01 96       	adiw	r24, 0x01	; 1
    122e:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
    1232:	ce 01       	movw	r24, r28
    1234:	07 96       	adiw	r24, 0x07	; 7
    1236:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
    123a:	9f ef       	ldi	r25, 0xFF	; 255
    123c:	e7 ee       	ldi	r30, 0xE7	; 231
    123e:	f3 e0       	ldi	r31, 0x03	; 3
    1240:	91 50       	subi	r25, 0x01	; 1
    1242:	e0 40       	sbci	r30, 0x00	; 0
    1244:	f0 40       	sbci	r31, 0x00	; 0
    1246:	e1 f7       	brne	.-8      	; 0x1240 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x29e>
    1248:	00 c0       	rjmp	.+0      	; 0x124a <_Z17PostErogazioneGACiPc14EthernetClient6String+0x2a8>
    124a:	00 00       	nop
    124c:	69 e9       	ldi	r22, 0x99	; 153
    124e:	74 e0       	ldi	r23, 0x04	; 4
    1250:	ce 01       	movw	r24, r28
    1252:	0d 96       	adiw	r24, 0x0d	; 13
    1254:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <_ZNK6String6equalsEPKc>
    1258:	88 23       	and	r24, r24
    125a:	29 f0       	breq	.+10     	; 0x1266 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x2c4>
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	fc d8       	rcall	.-3592   	; 0x458 <_Z4passb>
    1260:	d7 d8       	rcall	.-3666   	; 0x410 <_Z9printLinev>
    1262:	11 e0       	ldi	r17, 0x01	; 1
    1264:	01 c0       	rjmp	.+2      	; 0x1268 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x2c6>
    1266:	10 e0       	ldi	r17, 0x00	; 0
    1268:	ce 01       	movw	r24, r28
    126a:	0d 96       	adiw	r24, 0x0d	; 13
    126c:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
    1270:	81 2f       	mov	r24, r17
    1272:	62 96       	adiw	r28, 0x12	; 18
    1274:	0f b6       	in	r0, 0x3f	; 63
    1276:	f8 94       	cli
    1278:	de bf       	out	0x3e, r29	; 62
    127a:	0f be       	out	0x3f, r0	; 63
    127c:	cd bf       	out	0x3d, r28	; 61
    127e:	df 91       	pop	r29
    1280:	cf 91       	pop	r28
    1282:	1f 91       	pop	r17
    1284:	0f 91       	pop	r16
    1286:	ff 90       	pop	r15
    1288:	ef 90       	pop	r14
    128a:	df 90       	pop	r13
    128c:	cf 90       	pop	r12
    128e:	bf 90       	pop	r11
    1290:	af 90       	pop	r10
    1292:	08 95       	ret

00001294 <_Z15abilitaPulsantiv>:
    1294:	57 98       	cbi	0x0a, 7	; 10
    1296:	56 98       	cbi	0x0a, 6	; 10
    1298:	88 e0       	ldi	r24, 0x08	; 8
    129a:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    129e:	80 ec       	ldi	r24, 0xC0	; 192
    12a0:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    12a4:	78 94       	sei
    12a6:	08 95       	ret

000012a8 <_Z22abilitaContattiPistolav>:
    12a8:	09 98       	cbi	0x01, 1	; 1
    12aa:	0a 98       	cbi	0x01, 2	; 1
    12ac:	08 95       	ret

000012ae <_Z13abilitaPulserc>:
    12ae:	91 e0       	ldi	r25, 0x01	; 1
    12b0:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    12b4:	84 34       	cpi	r24, 0x44	; 68
    12b6:	19 f4       	brne	.+6      	; 0x12be <_Z13abilitaPulserc+0x10>
    12b8:	0d 98       	cbi	0x01, 5	; 1
    12ba:	80 e2       	ldi	r24, 0x20	; 32
    12bc:	02 c0       	rjmp	.+4      	; 0x12c2 <_Z13abilitaPulserc+0x14>
    12be:	0e 98       	cbi	0x01, 6	; 1
    12c0:	80 e4       	ldi	r24, 0x40	; 64
    12c2:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
    12c6:	78 94       	sei
    12c8:	08 95       	ret

000012ca <_Z14impulsiToLitrii>:
    12ca:	cf 92       	push	r12
    12cc:	df 92       	push	r13
    12ce:	ef 92       	push	r14
    12d0:	ff 92       	push	r15
    12d2:	bc 01       	movw	r22, r24
    12d4:	99 0f       	add	r25, r25
    12d6:	88 0b       	sbc	r24, r24
    12d8:	99 0b       	sbc	r25, r25
    12da:	0e 94 46 36 	call	0x6c8c	; 0x6c8c <__floatsisf>
    12de:	6b 01       	movw	r12, r22
    12e0:	7c 01       	movw	r14, r24
    12e2:	20 e0       	ldi	r18, 0x00	; 0
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	a9 01       	movw	r20, r18
    12e8:	0e 94 a7 35 	call	0x6b4e	; 0x6b4e <__cmpsf2>
    12ec:	87 ff       	sbrs	r24, 7
    12ee:	03 c0       	rjmp	.+6      	; 0x12f6 <_Z14impulsiToLitrii+0x2c>
    12f0:	c1 2c       	mov	r12, r1
    12f2:	d1 2c       	mov	r13, r1
    12f4:	76 01       	movw	r14, r12
    12f6:	60 91 4d 01 	lds	r22, 0x014D	; 0x80014d <ImpulsiLitro>
    12fa:	70 91 4e 01 	lds	r23, 0x014E	; 0x80014e <ImpulsiLitro+0x1>
    12fe:	07 2e       	mov	r0, r23
    1300:	00 0c       	add	r0, r0
    1302:	88 0b       	sbc	r24, r24
    1304:	99 0b       	sbc	r25, r25
    1306:	0e 94 46 36 	call	0x6c8c	; 0x6c8c <__floatsisf>
    130a:	9b 01       	movw	r18, r22
    130c:	ac 01       	movw	r20, r24
    130e:	c7 01       	movw	r24, r14
    1310:	b6 01       	movw	r22, r12
    1312:	0e 94 ab 35 	call	0x6b56	; 0x6b56 <__divsf3>
    1316:	ff 90       	pop	r15
    1318:	ef 90       	pop	r14
    131a:	df 90       	pop	r13
    131c:	cf 90       	pop	r12
    131e:	08 95       	ret

00001320 <_Z18Rele_Abilitazione1ii>:
    1320:	3f 9a       	sbi	0x07, 7	; 7
    1322:	81 30       	cpi	r24, 0x01	; 1
    1324:	91 05       	cpc	r25, r1
    1326:	71 f0       	breq	.+28     	; 0x1344 <_Z18Rele_Abilitazione1ii+0x24>
    1328:	82 30       	cpi	r24, 0x02	; 2
    132a:	91 05       	cpc	r25, r1
    132c:	e1 f0       	breq	.+56     	; 0x1366 <_Z18Rele_Abilitazione1ii+0x46>
    132e:	89 2b       	or	r24, r25
    1330:	89 f5       	brne	.+98     	; 0x1394 <_Z18Rele_Abilitazione1ii+0x74>
    1332:	47 98       	cbi	0x08, 7	; 8
    1334:	2f ef       	ldi	r18, 0xFF	; 255
    1336:	30 e7       	ldi	r19, 0x70	; 112
    1338:	42 e0       	ldi	r20, 0x02	; 2
    133a:	21 50       	subi	r18, 0x01	; 1
    133c:	30 40       	sbci	r19, 0x00	; 0
    133e:	40 40       	sbci	r20, 0x00	; 0
    1340:	e1 f7       	brne	.-8      	; 0x133a <_Z18Rele_Abilitazione1ii+0x1a>
    1342:	0e c0       	rjmp	.+28     	; 0x1360 <_Z18Rele_Abilitazione1ii+0x40>
    1344:	28 b1       	in	r18, 0x08	; 8
    1346:	01 c0       	rjmp	.+2      	; 0x134a <_Z18Rele_Abilitazione1ii+0x2a>
    1348:	88 0f       	add	r24, r24
    134a:	6a 95       	dec	r22
    134c:	ea f7       	brpl	.-6      	; 0x1348 <_Z18Rele_Abilitazione1ii+0x28>
    134e:	82 2b       	or	r24, r18
    1350:	88 b9       	out	0x08, r24	; 8
    1352:	8f ef       	ldi	r24, 0xFF	; 255
    1354:	90 e7       	ldi	r25, 0x70	; 112
    1356:	22 e0       	ldi	r18, 0x02	; 2
    1358:	81 50       	subi	r24, 0x01	; 1
    135a:	90 40       	sbci	r25, 0x00	; 0
    135c:	20 40       	sbci	r18, 0x00	; 0
    135e:	e1 f7       	brne	.-8      	; 0x1358 <_Z18Rele_Abilitazione1ii+0x38>
    1360:	00 c0       	rjmp	.+0      	; 0x1362 <_Z18Rele_Abilitazione1ii+0x42>
    1362:	00 00       	nop
    1364:	08 95       	ret
    1366:	28 b1       	in	r18, 0x08	; 8
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	01 c0       	rjmp	.+2      	; 0x1370 <_Z18Rele_Abilitazione1ii+0x50>
    136e:	88 0f       	add	r24, r24
    1370:	6a 95       	dec	r22
    1372:	ea f7       	brpl	.-6      	; 0x136e <_Z18Rele_Abilitazione1ii+0x4e>
    1374:	98 2f       	mov	r25, r24
    1376:	90 95       	com	r25
    1378:	92 23       	and	r25, r18
    137a:	98 b9       	out	0x08, r25	; 8
    137c:	3f ef       	ldi	r19, 0xFF	; 255
    137e:	45 ea       	ldi	r20, 0xA5	; 165
    1380:	2e e0       	ldi	r18, 0x0E	; 14
    1382:	31 50       	subi	r19, 0x01	; 1
    1384:	40 40       	sbci	r20, 0x00	; 0
    1386:	20 40       	sbci	r18, 0x00	; 0
    1388:	e1 f7       	brne	.-8      	; 0x1382 <_Z18Rele_Abilitazione1ii+0x62>
    138a:	00 c0       	rjmp	.+0      	; 0x138c <_Z18Rele_Abilitazione1ii+0x6c>
    138c:	00 00       	nop
    138e:	98 b1       	in	r25, 0x08	; 8
    1390:	89 2b       	or	r24, r25
    1392:	88 b9       	out	0x08, r24	; 8
    1394:	08 95       	ret

00001396 <_Z18Rele_Abilitazione2ii>:
    1396:	0f 9a       	sbi	0x01, 7	; 1
    1398:	81 30       	cpi	r24, 0x01	; 1
    139a:	91 05       	cpc	r25, r1
    139c:	b9 f0       	breq	.+46     	; 0x13cc <_Z18Rele_Abilitazione2ii+0x36>
    139e:	82 30       	cpi	r24, 0x02	; 2
    13a0:	91 05       	cpc	r25, r1
    13a2:	29 f1       	breq	.+74     	; 0x13ee <_Z18Rele_Abilitazione2ii+0x58>
    13a4:	89 2b       	or	r24, r25
    13a6:	d1 f5       	brne	.+116    	; 0x141c <_Z18Rele_Abilitazione2ii+0x86>
    13a8:	22 b1       	in	r18, 0x02	; 2
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	01 c0       	rjmp	.+2      	; 0x13b2 <_Z18Rele_Abilitazione2ii+0x1c>
    13b0:	88 0f       	add	r24, r24
    13b2:	6a 95       	dec	r22
    13b4:	ea f7       	brpl	.-6      	; 0x13b0 <_Z18Rele_Abilitazione2ii+0x1a>
    13b6:	80 95       	com	r24
    13b8:	82 23       	and	r24, r18
    13ba:	82 b9       	out	0x02, r24	; 2
    13bc:	2f ef       	ldi	r18, 0xFF	; 255
    13be:	30 e7       	ldi	r19, 0x70	; 112
    13c0:	42 e0       	ldi	r20, 0x02	; 2
    13c2:	21 50       	subi	r18, 0x01	; 1
    13c4:	30 40       	sbci	r19, 0x00	; 0
    13c6:	40 40       	sbci	r20, 0x00	; 0
    13c8:	e1 f7       	brne	.-8      	; 0x13c2 <_Z18Rele_Abilitazione2ii+0x2c>
    13ca:	0e c0       	rjmp	.+28     	; 0x13e8 <_Z18Rele_Abilitazione2ii+0x52>
    13cc:	22 b1       	in	r18, 0x02	; 2
    13ce:	01 c0       	rjmp	.+2      	; 0x13d2 <_Z18Rele_Abilitazione2ii+0x3c>
    13d0:	88 0f       	add	r24, r24
    13d2:	6a 95       	dec	r22
    13d4:	ea f7       	brpl	.-6      	; 0x13d0 <_Z18Rele_Abilitazione2ii+0x3a>
    13d6:	82 2b       	or	r24, r18
    13d8:	82 b9       	out	0x02, r24	; 2
    13da:	8f ef       	ldi	r24, 0xFF	; 255
    13dc:	90 e7       	ldi	r25, 0x70	; 112
    13de:	22 e0       	ldi	r18, 0x02	; 2
    13e0:	81 50       	subi	r24, 0x01	; 1
    13e2:	90 40       	sbci	r25, 0x00	; 0
    13e4:	20 40       	sbci	r18, 0x00	; 0
    13e6:	e1 f7       	brne	.-8      	; 0x13e0 <_Z18Rele_Abilitazione2ii+0x4a>
    13e8:	00 c0       	rjmp	.+0      	; 0x13ea <_Z18Rele_Abilitazione2ii+0x54>
    13ea:	00 00       	nop
    13ec:	08 95       	ret
    13ee:	22 b1       	in	r18, 0x02	; 2
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	01 c0       	rjmp	.+2      	; 0x13f8 <_Z18Rele_Abilitazione2ii+0x62>
    13f6:	88 0f       	add	r24, r24
    13f8:	6a 95       	dec	r22
    13fa:	ea f7       	brpl	.-6      	; 0x13f6 <_Z18Rele_Abilitazione2ii+0x60>
    13fc:	98 2f       	mov	r25, r24
    13fe:	90 95       	com	r25
    1400:	92 23       	and	r25, r18
    1402:	92 b9       	out	0x02, r25	; 2
    1404:	3f ef       	ldi	r19, 0xFF	; 255
    1406:	45 ea       	ldi	r20, 0xA5	; 165
    1408:	2e e0       	ldi	r18, 0x0E	; 14
    140a:	31 50       	subi	r19, 0x01	; 1
    140c:	40 40       	sbci	r20, 0x00	; 0
    140e:	20 40       	sbci	r18, 0x00	; 0
    1410:	e1 f7       	brne	.-8      	; 0x140a <_Z18Rele_Abilitazione2ii+0x74>
    1412:	00 c0       	rjmp	.+0      	; 0x1414 <_Z18Rele_Abilitazione2ii+0x7e>
    1414:	00 00       	nop
    1416:	92 b1       	in	r25, 0x02	; 2
    1418:	89 2b       	or	r24, r25
    141a:	82 b9       	out	0x02, r24	; 2
    141c:	08 95       	ret

0000141e <_Z12Control_WIFIi>:
    141e:	23 9a       	sbi	0x04, 3	; 4
    1420:	2f ef       	ldi	r18, 0xFF	; 255
    1422:	36 e7       	ldi	r19, 0x76	; 118
    1424:	41 e0       	ldi	r20, 0x01	; 1
    1426:	21 50       	subi	r18, 0x01	; 1
    1428:	30 40       	sbci	r19, 0x00	; 0
    142a:	40 40       	sbci	r20, 0x00	; 0
    142c:	e1 f7       	brne	.-8      	; 0x1426 <_Z12Control_WIFIi+0x8>
    142e:	00 c0       	rjmp	.+0      	; 0x1430 <_Z12Control_WIFIi+0x12>
    1430:	00 00       	nop
    1432:	81 30       	cpi	r24, 0x01	; 1
    1434:	91 05       	cpc	r25, r1
    1436:	11 f4       	brne	.+4      	; 0x143c <_Z12Control_WIFIi+0x1e>
    1438:	2b 9a       	sbi	0x05, 3	; 5
    143a:	08 95       	ret
    143c:	89 2b       	or	r24, r25
    143e:	09 f4       	brne	.+2      	; 0x1442 <_Z12Control_WIFIi+0x24>
    1440:	2b 98       	cbi	0x05, 3	; 5
    1442:	08 95       	ret

00001444 <_Z6Azzerav>:
    1444:	62 e4       	ldi	r22, 0x42	; 66
    1446:	72 e0       	ldi	r23, 0x02	; 2
    1448:	85 e2       	ldi	r24, 0x25	; 37
    144a:	9b e0       	ldi	r25, 0x0B	; 11
    144c:	0e 94 a6 3b 	call	0x774c	; 0x774c <_ZN6StringaSEPKc>
    1450:	10 92 2d 0b 	sts	0x0B2D, r1	; 0x800b2d <impulsi+0x1>
    1454:	10 92 2c 0b 	sts	0x0B2C, r1	; 0x800b2c <impulsi>
    1458:	10 92 6d 0b 	sts	0x0B6D, r1	; 0x800b6d <alreadyTimbrata>
    145c:	6a e1       	ldi	r22, 0x1A	; 26
    145e:	75 e0       	ldi	r23, 0x05	; 5
    1460:	87 e7       	ldi	r24, 0x77	; 119
    1462:	9b e0       	ldi	r25, 0x0B	; 11
    1464:	0e 94 a6 3b 	call	0x774c	; 0x774c <_ZN6StringaSEPKc>
    1468:	6a e1       	ldi	r22, 0x1A	; 26
    146a:	75 e0       	ldi	r23, 0x05	; 5
    146c:	8d e7       	ldi	r24, 0x7D	; 125
    146e:	9b e0       	ldi	r25, 0x0B	; 11
    1470:	0e 94 a6 3b 	call	0x774c	; 0x774c <_ZN6StringaSEPKc>
    1474:	62 e4       	ldi	r22, 0x42	; 66
    1476:	76 e0       	ldi	r23, 0x06	; 6
    1478:	83 e8       	ldi	r24, 0x83	; 131
    147a:	9b e0       	ldi	r25, 0x0B	; 11
    147c:	0e 94 a6 3b 	call	0x774c	; 0x774c <_ZN6StringaSEPKc>
    1480:	10 92 2b 0b 	sts	0x0B2B, r1	; 0x800b2b <distr_selezionato>
    1484:	67 e0       	ldi	r22, 0x07	; 7
    1486:	70 e0       	ldi	r23, 0x00	; 0
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	49 df       	rcall	.-366    	; 0x1320 <_Z18Rele_Abilitazione1ii>
    148e:	67 e0       	ldi	r22, 0x07	; 7
    1490:	70 e0       	ldi	r23, 0x00	; 0
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	7f df       	rcall	.-258    	; 0x1396 <_Z18Rele_Abilitazione2ii>
    1498:	80 e0       	ldi	r24, 0x00	; 0
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	c0 df       	rcall	.-128    	; 0x141e <_Z12Control_WIFIi>
    149e:	8f e1       	ldi	r24, 0x1F	; 31
    14a0:	9e e4       	ldi	r25, 0x4E	; 78
    14a2:	01 97       	sbiw	r24, 0x01	; 1
    14a4:	f1 f7       	brne	.-4      	; 0x14a2 <_Z6Azzerav+0x5e>
    14a6:	00 c0       	rjmp	.+0      	; 0x14a8 <_Z6Azzerav+0x64>
    14a8:	00 00       	nop
    14aa:	8b ea       	ldi	r24, 0xAB	; 171
    14ac:	9a e0       	ldi	r25, 0x0A	; 10
    14ae:	0e 94 88 28 	call	0x5110	; 0x5110 <_ZN14EthernetClient5flushEv>
    14b2:	8b ea       	ldi	r24, 0xAB	; 171
    14b4:	9a e0       	ldi	r25, 0x0A	; 10
    14b6:	0e 94 cd 28 	call	0x519a	; 0x519a <_ZN14EthernetClient4stopEv>
    14ba:	8f e1       	ldi	r24, 0x1F	; 31
    14bc:	9e e4       	ldi	r25, 0x4E	; 78
    14be:	01 97       	sbiw	r24, 0x01	; 1
    14c0:	f1 f7       	brne	.-4      	; 0x14be <_Z6Azzerav+0x7a>
    14c2:	00 c0       	rjmp	.+0      	; 0x14c4 <_Z6Azzerav+0x80>
    14c4:	00 00       	nop
    14c6:	88 eb       	ldi	r24, 0xB8	; 184
    14c8:	9a e0       	ldi	r25, 0x0A	; 10
    14ca:	0e 94 88 28 	call	0x5110	; 0x5110 <_ZN14EthernetClient5flushEv>
    14ce:	88 eb       	ldi	r24, 0xB8	; 184
    14d0:	9a e0       	ldi	r25, 0x0A	; 10
    14d2:	0e 94 cd 28 	call	0x519a	; 0x519a <_ZN14EthernetClient4stopEv>
    14d6:	10 92 31 0b 	sts	0x0B31, r1	; 0x800b31 <Connected+0x1>
    14da:	10 92 30 0b 	sts	0x0B30, r1	; 0x800b30 <Connected>
    14de:	8f e1       	ldi	r24, 0x1F	; 31
    14e0:	9e e4       	ldi	r25, 0x4E	; 78
    14e2:	01 97       	sbiw	r24, 0x01	; 1
    14e4:	f1 f7       	brne	.-4      	; 0x14e2 <_Z6Azzerav+0x9e>
    14e6:	00 c0       	rjmp	.+0      	; 0x14e8 <_Z6Azzerav+0xa4>
    14e8:	00 00       	nop
    14ea:	2c 98       	cbi	0x05, 4	; 5
    14ec:	8f e1       	ldi	r24, 0x1F	; 31
    14ee:	9e e4       	ldi	r25, 0x4E	; 78
    14f0:	01 97       	sbiw	r24, 0x01	; 1
    14f2:	f1 f7       	brne	.-4      	; 0x14f0 <_Z6Azzerav+0xac>
    14f4:	00 c0       	rjmp	.+0      	; 0x14f6 <_Z6Azzerav+0xb2>
    14f6:	00 00       	nop
    14f8:	2c 9a       	sbi	0x05, 4	; 5
    14fa:	8f e1       	ldi	r24, 0x1F	; 31
    14fc:	9e e4       	ldi	r25, 0x4E	; 78
    14fe:	01 97       	sbiw	r24, 0x01	; 1
    1500:	f1 f7       	brne	.-4      	; 0x14fe <_Z6Azzerav+0xba>
    1502:	00 c0       	rjmp	.+0      	; 0x1504 <_Z6Azzerav+0xc0>
    1504:	00 00       	nop
    1506:	0e 94 93 01 	call	0x326	; 0x326 <_ZL11disable_ETHv>
    150a:	8f e1       	ldi	r24, 0x1F	; 31
    150c:	9e e4       	ldi	r25, 0x4E	; 78
    150e:	01 97       	sbiw	r24, 0x01	; 1
    1510:	f1 f7       	brne	.-4      	; 0x150e <_Z6Azzerav+0xca>
    1512:	00 c0       	rjmp	.+0      	; 0x1514 <_Z6Azzerav+0xd0>
    1514:	00 00       	nop
    1516:	0e 94 91 01 	call	0x322	; 0x322 <_ZL10enable_ETHv>
    151a:	82 b1       	in	r24, 0x02	; 2
    151c:	82 b9       	out	0x02, r24	; 2
    151e:	82 b1       	in	r24, 0x02	; 2
    1520:	82 b9       	out	0x02, r24	; 2
    1522:	62 e4       	ldi	r22, 0x42	; 66
    1524:	72 e0       	ldi	r23, 0x02	; 2
    1526:	83 ee       	ldi	r24, 0xE3	; 227
    1528:	9a e0       	ldi	r25, 0x0A	; 10
    152a:	0e 94 a6 3b 	call	0x774c	; 0x774c <_ZN6StringaSEPKc>
    152e:	62 e4       	ldi	r22, 0x42	; 66
    1530:	72 e0       	ldi	r23, 0x02	; 2
    1532:	89 ee       	ldi	r24, 0xE9	; 233
    1534:	9a e0       	ldi	r25, 0x0A	; 10
    1536:	0e 94 a6 3b 	call	0x774c	; 0x774c <_ZN6StringaSEPKc>
    153a:	62 e4       	ldi	r22, 0x42	; 66
    153c:	72 e0       	ldi	r23, 0x02	; 2
    153e:	89 ee       	ldi	r24, 0xE9	; 233
    1540:	9a e0       	ldi	r25, 0x0A	; 10
    1542:	0e 94 a6 3b 	call	0x774c	; 0x774c <_ZN6StringaSEPKc>
    1546:	85 e5       	ldi	r24, 0x55	; 85
    1548:	9b e0       	ldi	r25, 0x0B	; 11
    154a:	0e 94 90 2f 	call	0x5f20	; 0x5f20 <_ZN3LCD11noBacklightEv>
    154e:	85 e5       	ldi	r24, 0x55	; 85
    1550:	9b e0       	ldi	r25, 0x0B	; 11
    1552:	0e 94 e8 2f 	call	0x5fd0	; 0x5fd0 <_ZN3LCD9noDisplayEv>
    1556:	10 92 9b 0a 	sts	0x0A9B, r1	; 0x800a9b <secs>
    155a:	10 92 9c 0a 	sts	0x0A9C, r1	; 0x800a9c <secs+0x1>
    155e:	10 92 9d 0a 	sts	0x0A9D, r1	; 0x800a9d <secs+0x2>
    1562:	10 92 9e 0a 	sts	0x0A9E, r1	; 0x800a9e <secs+0x3>
    1566:	10 92 97 0a 	sts	0x0A97, r1	; 0x800a97 <UltimoPassaggioStato>
    156a:	10 92 98 0a 	sts	0x0A98, r1	; 0x800a98 <UltimoPassaggioStato+0x1>
    156e:	10 92 99 0a 	sts	0x0A99, r1	; 0x800a99 <UltimoPassaggioStato+0x2>
    1572:	10 92 9a 0a 	sts	0x0A9A, r1	; 0x800a9a <UltimoPassaggioStato+0x3>
    1576:	0e 94 08 02 	call	0x410	; 0x410 <_Z9printLinev>
    157a:	6f e8       	ldi	r22, 0x8F	; 143
    157c:	75 e0       	ldi	r23, 0x05	; 5
    157e:	86 e2       	ldi	r24, 0x26	; 38
    1580:	9d e0       	ldi	r25, 0x0D	; 13
    1582:	0e 94 8c 38 	call	0x7118	; 0x7118 <_ZN5Print7printlnEPKc>
    1586:	0e 94 08 02 	call	0x410	; 0x410 <_Z9printLinev>
    158a:	62 e4       	ldi	r22, 0x42	; 66
    158c:	72 e0       	ldi	r23, 0x02	; 2
    158e:	87 e8       	ldi	r24, 0x87	; 135
    1590:	9a e0       	ldi	r25, 0x0A	; 10
    1592:	0e 94 a6 3b 	call	0x774c	; 0x774c <_ZN6StringaSEPKc>
    1596:	8f ef       	ldi	r24, 0xFF	; 255
    1598:	9f ef       	ldi	r25, 0xFF	; 255
    159a:	90 93 2f 0b 	sts	0x0B2F, r25	; 0x800b2f <stato_procedura+0x1>
    159e:	80 93 2e 0b 	sts	0x0B2E, r24	; 0x800b2e <stato_procedura>
    15a2:	08 95       	ret

000015a4 <_Z10inputTargac>:
    15a4:	cf 93       	push	r28
    15a6:	df 93       	push	r29
    15a8:	cd b7       	in	r28, 0x3d	; 61
    15aa:	de b7       	in	r29, 0x3e	; 62
    15ac:	62 97       	sbiw	r28, 0x12	; 18
    15ae:	0f b6       	in	r0, 0x3f	; 63
    15b0:	f8 94       	cli
    15b2:	de bf       	out	0x3e, r29	; 62
    15b4:	0f be       	out	0x3f, r0	; 63
    15b6:	cd bf       	out	0x3d, r28	; 61
    15b8:	81 34       	cpi	r24, 0x41	; 65
    15ba:	21 f1       	breq	.+72     	; 0x1604 <_Z10inputTargac+0x60>
    15bc:	d8 f4       	brcc	.+54     	; 0x15f4 <_Z10inputTargac+0x50>
    15be:	83 32       	cpi	r24, 0x23	; 35
    15c0:	09 f4       	brne	.+2      	; 0x15c4 <_Z10inputTargac+0x20>
    15c2:	86 c0       	rjmp	.+268    	; 0x16d0 <_Z10inputTargac+0x12c>
    15c4:	8a 32       	cpi	r24, 0x2A	; 42
    15c6:	09 f0       	breq	.+2      	; 0x15ca <_Z10inputTargac+0x26>
    15c8:	b2 c0       	rjmp	.+356    	; 0x172e <_Z10inputTargac+0x18a>
    15ca:	62 e4       	ldi	r22, 0x42	; 66
    15cc:	72 e0       	ldi	r23, 0x02	; 2
    15ce:	87 e8       	ldi	r24, 0x87	; 135
    15d0:	9a e0       	ldi	r25, 0x0A	; 10
    15d2:	0e 94 a6 3b 	call	0x774c	; 0x774c <_ZN6StringaSEPKc>
    15d6:	64 ea       	ldi	r22, 0xA4	; 164
    15d8:	75 e0       	ldi	r23, 0x05	; 5
    15da:	83 ee       	ldi	r24, 0xE3	; 227
    15dc:	9a e0       	ldi	r25, 0x0A	; 10
    15de:	0e 94 a6 3b 	call	0x774c	; 0x774c <_ZN6StringaSEPKc>
    15e2:	62 e4       	ldi	r22, 0x42	; 66
    15e4:	72 e0       	ldi	r23, 0x02	; 2
    15e6:	89 ee       	ldi	r24, 0xE9	; 233
    15e8:	9a e0       	ldi	r25, 0x0A	; 10
    15ea:	0e 94 a6 3b 	call	0x774c	; 0x774c <_ZN6StringaSEPKc>
    15ee:	62 e4       	ldi	r22, 0x42	; 66
    15f0:	72 e0       	ldi	r23, 0x02	; 2
    15f2:	8f c0       	rjmp	.+286    	; 0x1712 <_Z10inputTargac+0x16e>
    15f4:	83 34       	cpi	r24, 0x43	; 67
    15f6:	09 f4       	brne	.+2      	; 0x15fa <_Z10inputTargac+0x56>
    15f8:	51 c0       	rjmp	.+162    	; 0x169c <_Z10inputTargac+0xf8>
    15fa:	a0 f0       	brcs	.+40     	; 0x1624 <_Z10inputTargac+0x80>
    15fc:	8e 34       	cpi	r24, 0x4E	; 78
    15fe:	09 f4       	brne	.+2      	; 0x1602 <_Z10inputTargac+0x5e>
    1600:	d1 c0       	rjmp	.+418    	; 0x17a4 <_Z10inputTargac+0x200>
    1602:	95 c0       	rjmp	.+298    	; 0x172e <_Z10inputTargac+0x18a>
    1604:	80 91 8b 0a 	lds	r24, 0x0A8B	; 0x800a8b <TARGA+0x4>
    1608:	90 91 8c 0a 	lds	r25, 0x0A8C	; 0x800a8c <TARGA+0x5>
    160c:	05 97       	sbiw	r24, 0x05	; 5
    160e:	09 f0       	breq	.+2      	; 0x1612 <_Z10inputTargac+0x6e>
    1610:	c9 c0       	rjmp	.+402    	; 0x17a4 <_Z10inputTargac+0x200>
    1612:	67 e8       	ldi	r22, 0x87	; 135
    1614:	7a e0       	ldi	r23, 0x0A	; 10
    1616:	ce 01       	movw	r24, r28
    1618:	01 96       	adiw	r24, 0x01	; 1
    161a:	0e 94 93 3b 	call	0x7726	; 0x7726 <_ZN6StringC1ERKS_>
    161e:	60 ea       	ldi	r22, 0xA0	; 160
    1620:	75 e0       	ldi	r23, 0x05	; 5
    1622:	0f c0       	rjmp	.+30     	; 0x1642 <_Z10inputTargac+0x9e>
    1624:	80 91 8b 0a 	lds	r24, 0x0A8B	; 0x800a8b <TARGA+0x4>
    1628:	90 91 8c 0a 	lds	r25, 0x0A8C	; 0x800a8c <TARGA+0x5>
    162c:	05 97       	sbiw	r24, 0x05	; 5
    162e:	09 f0       	breq	.+2      	; 0x1632 <_Z10inputTargac+0x8e>
    1630:	b9 c0       	rjmp	.+370    	; 0x17a4 <_Z10inputTargac+0x200>
    1632:	67 e8       	ldi	r22, 0x87	; 135
    1634:	7a e0       	ldi	r23, 0x0A	; 10
    1636:	ce 01       	movw	r24, r28
    1638:	01 96       	adiw	r24, 0x01	; 1
    163a:	0e 94 93 3b 	call	0x7726	; 0x7726 <_ZN6StringC1ERKS_>
    163e:	62 ea       	ldi	r22, 0xA2	; 162
    1640:	75 e0       	ldi	r23, 0x05	; 5
    1642:	ce 01       	movw	r24, r28
    1644:	01 96       	adiw	r24, 0x01	; 1
    1646:	0e 94 0d 3d 	call	0x7a1a	; 0x7a1a <_ZplRK15StringSumHelperPKc>
    164a:	bc 01       	movw	r22, r24
    164c:	ce 01       	movw	r24, r28
    164e:	07 96       	adiw	r24, 0x07	; 7
    1650:	0e 94 93 3b 	call	0x7726	; 0x7726 <_ZN6StringC1ERKS_>
    1654:	ce 01       	movw	r24, r28
    1656:	01 96       	adiw	r24, 0x01	; 1
    1658:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
    165c:	20 e0       	ldi	r18, 0x00	; 0
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	47 e0       	ldi	r20, 0x07	; 7
    1662:	50 e0       	ldi	r21, 0x00	; 0
    1664:	be 01       	movw	r22, r28
    1666:	63 5f       	subi	r22, 0xF3	; 243
    1668:	7f 4f       	sbci	r23, 0xFF	; 255
    166a:	ce 01       	movw	r24, r28
    166c:	07 96       	adiw	r24, 0x07	; 7
    166e:	0e 94 4e 3d 	call	0x7a9c	; 0x7a9c <_ZNK6String8getBytesEPhjj>
    1672:	be 01       	movw	r22, r28
    1674:	63 5f       	subi	r22, 0xF3	; 243
    1676:	7f 4f       	sbci	r23, 0xFF	; 255
    1678:	ce 01       	movw	r24, r28
    167a:	01 96       	adiw	r24, 0x01	; 1
    167c:	9d d8       	rcall	.-3782   	; 0x7b8 <_Z16scrivi_TAG_MezzoPc>
    167e:	8f e3       	ldi	r24, 0x3F	; 63
    1680:	9c e9       	ldi	r25, 0x9C	; 156
    1682:	01 97       	sbiw	r24, 0x01	; 1
    1684:	f1 f7       	brne	.-4      	; 0x1682 <_Z10inputTargac+0xde>
    1686:	00 c0       	rjmp	.+0      	; 0x1688 <_Z10inputTargac+0xe4>
    1688:	00 00       	nop
    168a:	ce 01       	movw	r24, r28
    168c:	01 96       	adiw	r24, 0x01	; 1
    168e:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
    1692:	ce 01       	movw	r24, r28
    1694:	07 96       	adiw	r24, 0x07	; 7
    1696:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
    169a:	84 c0       	rjmp	.+264    	; 0x17a4 <_Z10inputTargac+0x200>
    169c:	20 91 8b 0a 	lds	r18, 0x0A8B	; 0x800a8b <TARGA+0x4>
    16a0:	30 91 8c 0a 	lds	r19, 0x0A8C	; 0x800a8c <TARGA+0x5>
    16a4:	21 15       	cp	r18, r1
    16a6:	31 05       	cpc	r19, r1
    16a8:	09 f4       	brne	.+2      	; 0x16ac <_Z10inputTargac+0x108>
    16aa:	7c c0       	rjmp	.+248    	; 0x17a4 <_Z10inputTargac+0x200>
    16ac:	21 50       	subi	r18, 0x01	; 1
    16ae:	31 09       	sbc	r19, r1
    16b0:	40 e0       	ldi	r20, 0x00	; 0
    16b2:	50 e0       	ldi	r21, 0x00	; 0
    16b4:	67 e8       	ldi	r22, 0x87	; 135
    16b6:	7a e0       	ldi	r23, 0x0A	; 10
    16b8:	ce 01       	movw	r24, r28
    16ba:	01 96       	adiw	r24, 0x01	; 1
    16bc:	0e 94 7c 3d 	call	0x7af8	; 0x7af8 <_ZNK6String9substringEjj>
    16c0:	be 01       	movw	r22, r28
    16c2:	6f 5f       	subi	r22, 0xFF	; 255
    16c4:	7f 4f       	sbci	r23, 0xFF	; 255
    16c6:	87 e8       	ldi	r24, 0x87	; 135
    16c8:	9a e0       	ldi	r25, 0x0A	; 10
    16ca:	0e 94 9b 3b 	call	0x7736	; 0x7736 <_ZN6StringaSEOS_>
    16ce:	3b c0       	rjmp	.+118    	; 0x1746 <_Z10inputTargac+0x1a2>
    16d0:	80 91 8b 0a 	lds	r24, 0x0A8B	; 0x800a8b <TARGA+0x4>
    16d4:	90 91 8c 0a 	lds	r25, 0x0A8C	; 0x800a8c <TARGA+0x5>
    16d8:	05 97       	sbiw	r24, 0x05	; 5
    16da:	09 f0       	breq	.+2      	; 0x16de <_Z10inputTargac+0x13a>
    16dc:	63 c0       	rjmp	.+198    	; 0x17a4 <_Z10inputTargac+0x200>
    16de:	67 e8       	ldi	r22, 0x87	; 135
    16e0:	7a e0       	ldi	r23, 0x0A	; 10
    16e2:	8d e7       	ldi	r24, 0x7D	; 125
    16e4:	9b e0       	ldi	r25, 0x0B	; 11
    16e6:	0e 94 7e 3b 	call	0x76fc	; 0x76fc <_ZN6StringaSERKS_>
    16ea:	6d e7       	ldi	r22, 0x7D	; 125
    16ec:	7b e0       	ldi	r23, 0x0B	; 11
    16ee:	87 e0       	ldi	r24, 0x07	; 7
    16f0:	9b e0       	ldi	r25, 0x0B	; 11
    16f2:	0e 94 7e 3b 	call	0x76fc	; 0x76fc <_ZN6StringaSERKS_>
    16f6:	65 ee       	ldi	r22, 0xE5	; 229
    16f8:	75 e0       	ldi	r23, 0x05	; 5
    16fa:	83 ee       	ldi	r24, 0xE3	; 227
    16fc:	9a e0       	ldi	r25, 0x0A	; 10
    16fe:	0e 94 a6 3b 	call	0x774c	; 0x774c <_ZN6StringaSEPKc>
    1702:	69 ef       	ldi	r22, 0xF9	; 249
    1704:	75 e0       	ldi	r23, 0x05	; 5
    1706:	89 ee       	ldi	r24, 0xE9	; 233
    1708:	9a e0       	ldi	r25, 0x0A	; 10
    170a:	0e 94 a6 3b 	call	0x774c	; 0x774c <_ZN6StringaSEPKc>
    170e:	68 e0       	ldi	r22, 0x08	; 8
    1710:	76 e0       	ldi	r23, 0x06	; 6
    1712:	8f ee       	ldi	r24, 0xEF	; 239
    1714:	9a e0       	ldi	r25, 0x0A	; 10
    1716:	0e 94 a6 3b 	call	0x774c	; 0x774c <_ZN6StringaSEPKc>
    171a:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <TselDistributore>
    171e:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <TselDistributore+0x1>
    1722:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <TselDistributore+0x2>
    1726:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <TselDistributore+0x3>
    172a:	0b d8       	rcall	.-4074   	; 0x742 <_Z11avanzaStatom>
    172c:	3b c0       	rjmp	.+118    	; 0x17a4 <_Z10inputTargac+0x200>
    172e:	68 2f       	mov	r22, r24
    1730:	ce 01       	movw	r24, r28
    1732:	01 96       	adiw	r24, 0x01	; 1
    1734:	0e 94 bb 3b 	call	0x7776	; 0x7776 <_ZN6StringC1Ec>
    1738:	be 01       	movw	r22, r28
    173a:	6f 5f       	subi	r22, 0xFF	; 255
    173c:	7f 4f       	sbci	r23, 0xFF	; 255
    173e:	87 e8       	ldi	r24, 0x87	; 135
    1740:	9a e0       	ldi	r25, 0x0A	; 10
    1742:	0e 94 d6 3c 	call	0x79ac	; 0x79ac <_ZN6String6concatERKS_>
    1746:	ce 01       	movw	r24, r28
    1748:	01 96       	adiw	r24, 0x01	; 1
    174a:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
    174e:	67 eb       	ldi	r22, 0xB7	; 183
    1750:	75 e0       	ldi	r23, 0x05	; 5
    1752:	83 ee       	ldi	r24, 0xE3	; 227
    1754:	9a e0       	ldi	r25, 0x0A	; 10
    1756:	0e 94 a6 3b 	call	0x774c	; 0x774c <_ZN6StringaSEPKc>
    175a:	69 ec       	ldi	r22, 0xC9	; 201
    175c:	75 e0       	ldi	r23, 0x05	; 5
    175e:	ce 01       	movw	r24, r28
    1760:	01 96       	adiw	r24, 0x01	; 1
    1762:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
    1766:	67 e8       	ldi	r22, 0x87	; 135
    1768:	7a e0       	ldi	r23, 0x0A	; 10
    176a:	ce 01       	movw	r24, r28
    176c:	01 96       	adiw	r24, 0x01	; 1
    176e:	0e 94 fc 3c 	call	0x79f8	; 0x79f8 <_ZplRK15StringSumHelperRK6String>
    1772:	bc 01       	movw	r22, r24
    1774:	89 ee       	ldi	r24, 0xE9	; 233
    1776:	9a e0       	ldi	r25, 0x0A	; 10
    1778:	0e 94 7e 3b 	call	0x76fc	; 0x76fc <_ZN6StringaSERKS_>
    177c:	ce 01       	movw	r24, r28
    177e:	01 96       	adiw	r24, 0x01	; 1
    1780:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
    1784:	60 ed       	ldi	r22, 0xD0	; 208
    1786:	75 e0       	ldi	r23, 0x05	; 5
    1788:	8f ee       	ldi	r24, 0xEF	; 239
    178a:	9a e0       	ldi	r25, 0x0A	; 10
    178c:	0e 94 a6 3b 	call	0x774c	; 0x774c <_ZN6StringaSEPKc>
    1790:	60 91 2e 0b 	lds	r22, 0x0B2E	; 0x800b2e <stato_procedura>
    1794:	70 91 2f 0b 	lds	r23, 0x0B2F	; 0x800b2f <stato_procedura+0x1>
    1798:	4a e0       	ldi	r20, 0x0A	; 10
    179a:	50 e0       	ldi	r21, 0x00	; 0
    179c:	8d ed       	ldi	r24, 0xDD	; 221
    179e:	9a e0       	ldi	r25, 0x0A	; 10
    17a0:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <_Z10displayLCDP6Stringii>
    17a4:	62 96       	adiw	r28, 0x12	; 18
    17a6:	0f b6       	in	r0, 0x3f	; 63
    17a8:	f8 94       	cli
    17aa:	de bf       	out	0x3e, r29	; 62
    17ac:	0f be       	out	0x3f, r0	; 63
    17ae:	cd bf       	out	0x3d, r28	; 61
    17b0:	df 91       	pop	r29
    17b2:	cf 91       	pop	r28
    17b4:	08 95       	ret

000017b6 <_Z7inputKMc>:
    17b6:	cf 93       	push	r28
    17b8:	df 93       	push	r29
    17ba:	cd b7       	in	r28, 0x3d	; 61
    17bc:	de b7       	in	r29, 0x3e	; 62
    17be:	2c 97       	sbiw	r28, 0x0c	; 12
    17c0:	0f b6       	in	r0, 0x3f	; 63
    17c2:	f8 94       	cli
    17c4:	de bf       	out	0x3e, r29	; 62
    17c6:	0f be       	out	0x3f, r0	; 63
    17c8:	cd bf       	out	0x3d, r28	; 61
    17ca:	83 34       	cpi	r24, 0x43	; 67
    17cc:	60 f4       	brcc	.+24     	; 0x17e6 <_Z7inputKMc+0x30>
    17ce:	81 34       	cpi	r24, 0x41	; 65
    17d0:	08 f0       	brcs	.+2      	; 0x17d4 <_Z7inputKMc+0x1e>
    17d2:	ca c0       	rjmp	.+404    	; 0x1968 <_Z7inputKMc+0x1b2>
    17d4:	8a 32       	cpi	r24, 0x2A	; 42
    17d6:	09 f4       	brne	.+2      	; 0x17da <_Z7inputKMc+0x24>
    17d8:	c7 c0       	rjmp	.+398    	; 0x1968 <_Z7inputKMc+0x1b2>
    17da:	8e 32       	cpi	r24, 0x2E	; 46
    17dc:	09 f4       	brne	.+2      	; 0x17e0 <_Z7inputKMc+0x2a>
    17de:	c4 c0       	rjmp	.+392    	; 0x1968 <_Z7inputKMc+0x1b2>
    17e0:	83 32       	cpi	r24, 0x23	; 35
    17e2:	09 f1       	breq	.+66     	; 0x1826 <_Z7inputKMc+0x70>
    17e4:	86 c0       	rjmp	.+268    	; 0x18f2 <_Z7inputKMc+0x13c>
    17e6:	83 34       	cpi	r24, 0x43	; 67
    17e8:	21 f0       	breq	.+8      	; 0x17f2 <_Z7inputKMc+0x3c>
    17ea:	8e 34       	cpi	r24, 0x4E	; 78
    17ec:	09 f0       	breq	.+2      	; 0x17f0 <_Z7inputKMc+0x3a>
    17ee:	81 c0       	rjmp	.+258    	; 0x18f2 <_Z7inputKMc+0x13c>
    17f0:	bb c0       	rjmp	.+374    	; 0x1968 <_Z7inputKMc+0x1b2>
    17f2:	20 91 85 0a 	lds	r18, 0x0A85	; 0x800a85 <KM+0x4>
    17f6:	30 91 86 0a 	lds	r19, 0x0A86	; 0x800a86 <KM+0x5>
    17fa:	21 15       	cp	r18, r1
    17fc:	31 05       	cpc	r19, r1
    17fe:	09 f4       	brne	.+2      	; 0x1802 <_Z7inputKMc+0x4c>
    1800:	88 c0       	rjmp	.+272    	; 0x1912 <_Z7inputKMc+0x15c>
    1802:	21 50       	subi	r18, 0x01	; 1
    1804:	31 09       	sbc	r19, r1
    1806:	40 e0       	ldi	r20, 0x00	; 0
    1808:	50 e0       	ldi	r21, 0x00	; 0
    180a:	61 e8       	ldi	r22, 0x81	; 129
    180c:	7a e0       	ldi	r23, 0x0A	; 10
    180e:	ce 01       	movw	r24, r28
    1810:	01 96       	adiw	r24, 0x01	; 1
    1812:	0e 94 7c 3d 	call	0x7af8	; 0x7af8 <_ZNK6String9substringEjj>
    1816:	be 01       	movw	r22, r28
    1818:	6f 5f       	subi	r22, 0xFF	; 255
    181a:	7f 4f       	sbci	r23, 0xFF	; 255
    181c:	81 e8       	ldi	r24, 0x81	; 129
    181e:	9a e0       	ldi	r25, 0x0A	; 10
    1820:	0e 94 9b 3b 	call	0x7736	; 0x7736 <_ZN6StringaSEOS_>
    1824:	72 c0       	rjmp	.+228    	; 0x190a <_Z7inputKMc+0x154>
    1826:	80 91 85 0a 	lds	r24, 0x0A85	; 0x800a85 <KM+0x4>
    182a:	90 91 86 0a 	lds	r25, 0x0A86	; 0x800a86 <KM+0x5>
    182e:	04 97       	sbiw	r24, 0x04	; 4
    1830:	09 f0       	breq	.+2      	; 0x1834 <_Z7inputKMc+0x7e>
    1832:	9a c0       	rjmp	.+308    	; 0x1968 <_Z7inputKMc+0x1b2>
    1834:	61 e8       	ldi	r22, 0x81	; 129
    1836:	7a e0       	ldi	r23, 0x0A	; 10
    1838:	83 e8       	ldi	r24, 0x83	; 131
    183a:	9b e0       	ldi	r25, 0x0B	; 11
    183c:	0e 94 7e 3b 	call	0x76fc	; 0x76fc <_ZN6StringaSERKS_>
    1840:	63 e8       	ldi	r22, 0x83	; 131
    1842:	7b e0       	ldi	r23, 0x0B	; 11
    1844:	89 e1       	ldi	r24, 0x19	; 25
    1846:	9b e0       	ldi	r25, 0x0B	; 11
    1848:	0e 94 7e 3b 	call	0x76fc	; 0x76fc <_ZN6StringaSERKS_>
    184c:	67 e3       	ldi	r22, 0x37	; 55
    184e:	76 e0       	ldi	r23, 0x06	; 6
    1850:	83 ee       	ldi	r24, 0xE3	; 227
    1852:	9a e0       	ldi	r25, 0x0A	; 10
    1854:	0e 94 a6 3b 	call	0x774c	; 0x774c <_ZN6StringaSEPKc>
    1858:	60 91 2c 0b 	lds	r22, 0x0B2C	; 0x800b2c <impulsi>
    185c:	70 91 2d 0b 	lds	r23, 0x0B2D	; 0x800b2d <impulsi+0x1>
    1860:	4a e0       	ldi	r20, 0x0A	; 10
    1862:	ce 01       	movw	r24, r28
    1864:	07 96       	adiw	r24, 0x07	; 7
    1866:	0e 94 fd 3b 	call	0x77fa	; 0x77fa <_ZN6StringC1Eih>
    186a:	64 e4       	ldi	r22, 0x44	; 68
    186c:	76 e0       	ldi	r23, 0x06	; 6
    186e:	ce 01       	movw	r24, r28
    1870:	01 96       	adiw	r24, 0x01	; 1
    1872:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
    1876:	be 01       	movw	r22, r28
    1878:	69 5f       	subi	r22, 0xF9	; 249
    187a:	7f 4f       	sbci	r23, 0xFF	; 255
    187c:	ce 01       	movw	r24, r28
    187e:	01 96       	adiw	r24, 0x01	; 1
    1880:	0e 94 fc 3c 	call	0x79f8	; 0x79f8 <_ZplRK15StringSumHelperRK6String>
    1884:	bc 01       	movw	r22, r24
    1886:	89 ee       	ldi	r24, 0xE9	; 233
    1888:	9a e0       	ldi	r25, 0x0A	; 10
    188a:	0e 94 7e 3b 	call	0x76fc	; 0x76fc <_ZN6StringaSERKS_>
    188e:	ce 01       	movw	r24, r28
    1890:	01 96       	adiw	r24, 0x01	; 1
    1892:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
    1896:	ce 01       	movw	r24, r28
    1898:	07 96       	adiw	r24, 0x07	; 7
    189a:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
    189e:	6a e4       	ldi	r22, 0x4A	; 74
    18a0:	76 e0       	ldi	r23, 0x06	; 6
    18a2:	ce 01       	movw	r24, r28
    18a4:	01 96       	adiw	r24, 0x01	; 1
    18a6:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
    18aa:	68 e3       	ldi	r22, 0x38	; 56
    18ac:	7b e0       	ldi	r23, 0x0B	; 11
    18ae:	ce 01       	movw	r24, r28
    18b0:	01 96       	adiw	r24, 0x01	; 1
    18b2:	0e 94 fc 3c 	call	0x79f8	; 0x79f8 <_ZplRK15StringSumHelperRK6String>
    18b6:	bc 01       	movw	r22, r24
    18b8:	8f ee       	ldi	r24, 0xEF	; 239
    18ba:	9a e0       	ldi	r25, 0x0A	; 10
    18bc:	0e 94 7e 3b 	call	0x76fc	; 0x76fc <_ZN6StringaSERKS_>
    18c0:	ce 01       	movw	r24, r28
    18c2:	01 96       	adiw	r24, 0x01	; 1
    18c4:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
    18c8:	0e 94 93 01 	call	0x326	; 0x326 <_ZL11disable_ETHv>
    18cc:	8f e3       	ldi	r24, 0x3F	; 63
    18ce:	9f e1       	ldi	r25, 0x1F	; 31
    18d0:	01 97       	sbiw	r24, 0x01	; 1
    18d2:	f1 f7       	brne	.-4      	; 0x18d0 <_Z7inputKMc+0x11a>
    18d4:	00 c0       	rjmp	.+0      	; 0x18d6 <_Z7inputKMc+0x120>
    18d6:	00 00       	nop
    18d8:	0e 94 91 01 	call	0x322	; 0x322 <_ZL10enable_ETHv>
    18dc:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <TmaxErogazione>
    18e0:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <TmaxErogazione+0x1>
    18e4:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <TmaxErogazione+0x2>
    18e8:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <TmaxErogazione+0x3>
    18ec:	0e 94 a1 03 	call	0x742	; 0x742 <_Z11avanzaStatom>
    18f0:	3b c0       	rjmp	.+118    	; 0x1968 <_Z7inputKMc+0x1b2>
    18f2:	68 2f       	mov	r22, r24
    18f4:	ce 01       	movw	r24, r28
    18f6:	01 96       	adiw	r24, 0x01	; 1
    18f8:	0e 94 bb 3b 	call	0x7776	; 0x7776 <_ZN6StringC1Ec>
    18fc:	be 01       	movw	r22, r28
    18fe:	6f 5f       	subi	r22, 0xFF	; 255
    1900:	7f 4f       	sbci	r23, 0xFF	; 255
    1902:	81 e8       	ldi	r24, 0x81	; 129
    1904:	9a e0       	ldi	r25, 0x0A	; 10
    1906:	0e 94 d6 3c 	call	0x79ac	; 0x79ac <_ZN6String6concatERKS_>
    190a:	ce 01       	movw	r24, r28
    190c:	01 96       	adiw	r24, 0x01	; 1
    190e:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
    1912:	67 e1       	ldi	r22, 0x17	; 23
    1914:	76 e0       	ldi	r23, 0x06	; 6
    1916:	83 ee       	ldi	r24, 0xE3	; 227
    1918:	9a e0       	ldi	r25, 0x0A	; 10
    191a:	0e 94 a6 3b 	call	0x774c	; 0x774c <_ZN6StringaSEPKc>
    191e:	68 e2       	ldi	r22, 0x28	; 40
    1920:	76 e0       	ldi	r23, 0x06	; 6
    1922:	ce 01       	movw	r24, r28
    1924:	01 96       	adiw	r24, 0x01	; 1
    1926:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
    192a:	61 e8       	ldi	r22, 0x81	; 129
    192c:	7a e0       	ldi	r23, 0x0A	; 10
    192e:	ce 01       	movw	r24, r28
    1930:	01 96       	adiw	r24, 0x01	; 1
    1932:	0e 94 fc 3c 	call	0x79f8	; 0x79f8 <_ZplRK15StringSumHelperRK6String>
    1936:	bc 01       	movw	r22, r24
    1938:	89 ee       	ldi	r24, 0xE9	; 233
    193a:	9a e0       	ldi	r25, 0x0A	; 10
    193c:	0e 94 7e 3b 	call	0x76fc	; 0x76fc <_ZN6StringaSERKS_>
    1940:	ce 01       	movw	r24, r28
    1942:	01 96       	adiw	r24, 0x01	; 1
    1944:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
    1948:	6c e2       	ldi	r22, 0x2C	; 44
    194a:	76 e0       	ldi	r23, 0x06	; 6
    194c:	8f ee       	ldi	r24, 0xEF	; 239
    194e:	9a e0       	ldi	r25, 0x0A	; 10
    1950:	0e 94 a6 3b 	call	0x774c	; 0x774c <_ZN6StringaSEPKc>
    1954:	60 91 2e 0b 	lds	r22, 0x0B2E	; 0x800b2e <stato_procedura>
    1958:	70 91 2f 0b 	lds	r23, 0x0B2F	; 0x800b2f <stato_procedura+0x1>
    195c:	4a e0       	ldi	r20, 0x0A	; 10
    195e:	50 e0       	ldi	r21, 0x00	; 0
    1960:	8d ed       	ldi	r24, 0xDD	; 221
    1962:	9a e0       	ldi	r25, 0x0A	; 10
    1964:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <_Z10displayLCDP6Stringii>
    1968:	2c 96       	adiw	r28, 0x0c	; 12
    196a:	0f b6       	in	r0, 0x3f	; 63
    196c:	f8 94       	cli
    196e:	de bf       	out	0x3e, r29	; 62
    1970:	0f be       	out	0x3f, r0	; 63
    1972:	cd bf       	out	0x3d, r28	; 61
    1974:	df 91       	pop	r29
    1976:	cf 91       	pop	r28
    1978:	08 95       	ret

0000197a <_Z25read_eeprom_string_struct20ParametriCCEC_struct>:
    197a:	4f 92       	push	r4
    197c:	5f 92       	push	r5
    197e:	6f 92       	push	r6
    1980:	7f 92       	push	r7
    1982:	8f 92       	push	r8
    1984:	9f 92       	push	r9
    1986:	af 92       	push	r10
    1988:	bf 92       	push	r11
    198a:	cf 92       	push	r12
    198c:	df 92       	push	r13
    198e:	ef 92       	push	r14
    1990:	ff 92       	push	r15
    1992:	0f 93       	push	r16
    1994:	1f 93       	push	r17
    1996:	cf 93       	push	r28
    1998:	df 93       	push	r29
    199a:	00 d0       	rcall	.+0      	; 0x199c <_Z25read_eeprom_string_struct20ParametriCCEC_struct+0x22>
    199c:	00 d0       	rcall	.+0      	; 0x199e <_Z25read_eeprom_string_struct20ParametriCCEC_struct+0x24>
    199e:	00 d0       	rcall	.+0      	; 0x19a0 <_Z25read_eeprom_string_struct20ParametriCCEC_struct+0x26>
    19a0:	cd b7       	in	r28, 0x3d	; 61
    19a2:	de b7       	in	r29, 0x3e	; 62
    19a4:	7c 01       	movw	r14, r24
    19a6:	5b 01       	movw	r10, r22
    19a8:	4d b6       	in	r4, 0x3d	; 61
    19aa:	5e b6       	in	r5, 0x3e	; 62
    19ac:	63 ea       	ldi	r22, 0xA3	; 163
    19ae:	77 e0       	ldi	r23, 0x07	; 7
    19b0:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
    19b4:	f5 01       	movw	r30, r10
    19b6:	c2 84       	ldd	r12, Z+10	; 0x0a
    19b8:	d3 84       	ldd	r13, Z+11	; 0x0b
    19ba:	8d b7       	in	r24, 0x3d	; 61
    19bc:	9e b7       	in	r25, 0x3e	; 62
    19be:	8c 19       	sub	r24, r12
    19c0:	9d 09       	sbc	r25, r13
    19c2:	0f b6       	in	r0, 0x3f	; 63
    19c4:	f8 94       	cli
    19c6:	9e bf       	out	0x3e, r25	; 62
    19c8:	0f be       	out	0x3f, r0	; 63
    19ca:	8d bf       	out	0x3d, r24	; 61
    19cc:	ed b7       	in	r30, 0x3d	; 61
    19ce:	fe b7       	in	r31, 0x3e	; 62
    19d0:	31 96       	adiw	r30, 0x01	; 1
    19d2:	4f 01       	movw	r8, r30
    19d4:	3f 01       	movw	r6, r30
    19d6:	f5 01       	movw	r30, r10
    19d8:	04 85       	ldd	r16, Z+12	; 0x0c
    19da:	15 85       	ldd	r17, Z+13	; 0x0d
    19dc:	c0 0e       	add	r12, r16
    19de:	d1 1e       	adc	r13, r17
    19e0:	0c 15       	cp	r16, r12
    19e2:	1d 05       	cpc	r17, r13
    19e4:	4c f4       	brge	.+18     	; 0x19f8 <_Z25read_eeprom_string_struct20ParametriCCEC_struct+0x7e>
    19e6:	c8 01       	movw	r24, r16
    19e8:	0e 94 c9 44 	call	0x8992	; 0x8992 <eeprom_read_byte>
    19ec:	f3 01       	movw	r30, r6
    19ee:	81 93       	st	Z+, r24
    19f0:	3f 01       	movw	r6, r30
    19f2:	0f 5f       	subi	r16, 0xFF	; 255
    19f4:	1f 4f       	sbci	r17, 0xFF	; 255
    19f6:	f4 cf       	rjmp	.-24     	; 0x19e0 <_Z25read_eeprom_string_struct20ParametriCCEC_struct+0x66>
    19f8:	65 e4       	ldi	r22, 0x45	; 69
    19fa:	72 e0       	ldi	r23, 0x02	; 2
    19fc:	86 e2       	ldi	r24, 0x26	; 38
    19fe:	9d e0       	ldi	r25, 0x0D	; 13
    1a00:	0e 94 8c 38 	call	0x7118	; 0x7118 <_ZN5Print7printlnEPKc>
    1a04:	65 e4       	ldi	r22, 0x45	; 69
    1a06:	72 e0       	ldi	r23, 0x02	; 2
    1a08:	86 e2       	ldi	r24, 0x26	; 38
    1a0a:	9d e0       	ldi	r25, 0x0D	; 13
    1a0c:	0e 94 8c 38 	call	0x7118	; 0x7118 <_ZN5Print7printlnEPKc>
    1a10:	b4 01       	movw	r22, r8
    1a12:	ce 01       	movw	r24, r28
    1a14:	01 96       	adiw	r24, 0x01	; 1
    1a16:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
    1a1a:	be 01       	movw	r22, r28
    1a1c:	6f 5f       	subi	r22, 0xFF	; 255
    1a1e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a20:	c7 01       	movw	r24, r14
    1a22:	0e 94 9b 3b 	call	0x7736	; 0x7736 <_ZN6StringaSEOS_>
    1a26:	ce 01       	movw	r24, r28
    1a28:	01 96       	adiw	r24, 0x01	; 1
    1a2a:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
    1a2e:	b5 01       	movw	r22, r10
    1a30:	ce 01       	movw	r24, r28
    1a32:	01 96       	adiw	r24, 0x01	; 1
    1a34:	0e 94 93 3b 	call	0x7726	; 0x7726 <_ZN6StringC1ERKS_>
    1a38:	6c e1       	ldi	r22, 0x1C	; 28
    1a3a:	78 e0       	ldi	r23, 0x08	; 8
    1a3c:	ce 01       	movw	r24, r28
    1a3e:	01 96       	adiw	r24, 0x01	; 1
    1a40:	0e 94 0d 3d 	call	0x7a1a	; 0x7a1a <_ZplRK15StringSumHelperPKc>
    1a44:	bc 01       	movw	r22, r24
    1a46:	86 e2       	ldi	r24, 0x26	; 38
    1a48:	9d e0       	ldi	r25, 0x0D	; 13
    1a4a:	0e 94 53 38 	call	0x70a6	; 0x70a6 <_ZN5Print5printERK6String>
    1a4e:	ce 01       	movw	r24, r28
    1a50:	01 96       	adiw	r24, 0x01	; 1
    1a52:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
    1a56:	b7 01       	movw	r22, r14
    1a58:	86 e2       	ldi	r24, 0x26	; 38
    1a5a:	9d e0       	ldi	r25, 0x0D	; 13
    1a5c:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <_ZN5Print7printlnERK6String>
    1a60:	c7 01       	movw	r24, r14
    1a62:	0f b6       	in	r0, 0x3f	; 63
    1a64:	f8 94       	cli
    1a66:	5e be       	out	0x3e, r5	; 62
    1a68:	0f be       	out	0x3f, r0	; 63
    1a6a:	4d be       	out	0x3d, r4	; 61
    1a6c:	26 96       	adiw	r28, 0x06	; 6
    1a6e:	0f b6       	in	r0, 0x3f	; 63
    1a70:	f8 94       	cli
    1a72:	de bf       	out	0x3e, r29	; 62
    1a74:	0f be       	out	0x3f, r0	; 63
    1a76:	cd bf       	out	0x3d, r28	; 61
    1a78:	df 91       	pop	r29
    1a7a:	cf 91       	pop	r28
    1a7c:	1f 91       	pop	r17
    1a7e:	0f 91       	pop	r16
    1a80:	ff 90       	pop	r15
    1a82:	ef 90       	pop	r14
    1a84:	df 90       	pop	r13
    1a86:	cf 90       	pop	r12
    1a88:	bf 90       	pop	r11
    1a8a:	af 90       	pop	r10
    1a8c:	9f 90       	pop	r9
    1a8e:	8f 90       	pop	r8
    1a90:	7f 90       	pop	r7
    1a92:	6f 90       	pop	r6
    1a94:	5f 90       	pop	r5
    1a96:	4f 90       	pop	r4
    1a98:	08 95       	ret

00001a9a <_Z26write_eeprom_string_struct20ParametriCCEC_struct>:
    1a9a:	8f 92       	push	r8
    1a9c:	9f 92       	push	r9
    1a9e:	af 92       	push	r10
    1aa0:	bf 92       	push	r11
    1aa2:	cf 92       	push	r12
    1aa4:	df 92       	push	r13
    1aa6:	ef 92       	push	r14
    1aa8:	ff 92       	push	r15
    1aaa:	0f 93       	push	r16
    1aac:	1f 93       	push	r17
    1aae:	cf 93       	push	r28
    1ab0:	df 93       	push	r29
    1ab2:	cd b7       	in	r28, 0x3d	; 61
    1ab4:	de b7       	in	r29, 0x3e	; 62
    1ab6:	2c 97       	sbiw	r28, 0x0c	; 12
    1ab8:	0f b6       	in	r0, 0x3f	; 63
    1aba:	f8 94       	cli
    1abc:	de bf       	out	0x3e, r29	; 62
    1abe:	0f be       	out	0x3f, r0	; 63
    1ac0:	cd bf       	out	0x3d, r28	; 61
    1ac2:	5c 01       	movw	r10, r24
    1ac4:	8d b6       	in	r8, 0x3d	; 61
    1ac6:	9e b6       	in	r9, 0x3e	; 62
    1ac8:	fc 01       	movw	r30, r24
    1aca:	c2 84       	ldd	r12, Z+10	; 0x0a
    1acc:	d3 84       	ldd	r13, Z+11	; 0x0b
    1ace:	8d b7       	in	r24, 0x3d	; 61
    1ad0:	9e b7       	in	r25, 0x3e	; 62
    1ad2:	8c 19       	sub	r24, r12
    1ad4:	9d 09       	sbc	r25, r13
    1ad6:	0f b6       	in	r0, 0x3f	; 63
    1ad8:	f8 94       	cli
    1ada:	9e bf       	out	0x3e, r25	; 62
    1adc:	0f be       	out	0x3f, r0	; 63
    1ade:	8d bf       	out	0x3d, r24	; 61
    1ae0:	0d b7       	in	r16, 0x3d	; 61
    1ae2:	1e b7       	in	r17, 0x3e	; 62
    1ae4:	0f 5f       	subi	r16, 0xFF	; 255
    1ae6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ae8:	a6 01       	movw	r20, r12
    1aea:	4f 5f       	subi	r20, 0xFF	; 255
    1aec:	5f 4f       	sbci	r21, 0xFF	; 255
    1aee:	20 e0       	ldi	r18, 0x00	; 0
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	b8 01       	movw	r22, r16
    1af4:	c5 01       	movw	r24, r10
    1af6:	06 96       	adiw	r24, 0x06	; 6
    1af8:	0e 94 4e 3d 	call	0x7a9c	; 0x7a9c <_ZNK6String8getBytesEPhjj>
    1afc:	4a e0       	ldi	r20, 0x0A	; 10
    1afe:	b6 01       	movw	r22, r12
    1b00:	ce 01       	movw	r24, r28
    1b02:	07 96       	adiw	r24, 0x07	; 7
    1b04:	0e 94 fd 3b 	call	0x77fa	; 0x77fa <_ZN6StringC1Eih>
    1b08:	67 e5       	ldi	r22, 0x57	; 87
    1b0a:	76 e0       	ldi	r23, 0x06	; 6
    1b0c:	ce 01       	movw	r24, r28
    1b0e:	01 96       	adiw	r24, 0x01	; 1
    1b10:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
    1b14:	be 01       	movw	r22, r28
    1b16:	69 5f       	subi	r22, 0xF9	; 249
    1b18:	7f 4f       	sbci	r23, 0xFF	; 255
    1b1a:	ce 01       	movw	r24, r28
    1b1c:	01 96       	adiw	r24, 0x01	; 1
    1b1e:	0e 94 fc 3c 	call	0x79f8	; 0x79f8 <_ZplRK15StringSumHelperRK6String>
    1b22:	bc 01       	movw	r22, r24
    1b24:	86 e2       	ldi	r24, 0x26	; 38
    1b26:	9d e0       	ldi	r25, 0x0D	; 13
    1b28:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <_ZN5Print7printlnERK6String>
    1b2c:	ce 01       	movw	r24, r28
    1b2e:	01 96       	adiw	r24, 0x01	; 1
    1b30:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
    1b34:	ce 01       	movw	r24, r28
    1b36:	07 96       	adiw	r24, 0x07	; 7
    1b38:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
    1b3c:	6e e5       	ldi	r22, 0x5E	; 94
    1b3e:	76 e0       	ldi	r23, 0x06	; 6
    1b40:	86 e2       	ldi	r24, 0x26	; 38
    1b42:	9d e0       	ldi	r25, 0x0D	; 13
    1b44:	0e 94 8c 38 	call	0x7118	; 0x7118 <_ZN5Print7printlnEPKc>
    1b48:	65 e4       	ldi	r22, 0x45	; 69
    1b4a:	72 e0       	ldi	r23, 0x02	; 2
    1b4c:	86 e2       	ldi	r24, 0x26	; 38
    1b4e:	9d e0       	ldi	r25, 0x0D	; 13
    1b50:	0e 94 8c 38 	call	0x7118	; 0x7118 <_ZN5Print7printlnEPKc>
    1b54:	f5 01       	movw	r30, r10
    1b56:	e4 84       	ldd	r14, Z+12	; 0x0c
    1b58:	f5 84       	ldd	r15, Z+13	; 0x0d
    1b5a:	f5 01       	movw	r30, r10
    1b5c:	84 85       	ldd	r24, Z+12	; 0x0c
    1b5e:	95 85       	ldd	r25, Z+13	; 0x0d
    1b60:	8c 0d       	add	r24, r12
    1b62:	9d 1d       	adc	r25, r13
    1b64:	e8 16       	cp	r14, r24
    1b66:	f9 06       	cpc	r15, r25
    1b68:	64 f4       	brge	.+24     	; 0x1b82 <_Z26write_eeprom_string_struct20ParametriCCEC_struct+0xe8>
    1b6a:	f8 01       	movw	r30, r16
    1b6c:	61 91       	ld	r22, Z+
    1b6e:	8f 01       	movw	r16, r30
    1b70:	66 23       	and	r22, r22
    1b72:	19 f0       	breq	.+6      	; 0x1b7a <_Z26write_eeprom_string_struct20ParametriCCEC_struct+0xe0>
    1b74:	c7 01       	movw	r24, r14
    1b76:	0e 94 d1 44 	call	0x89a2	; 0x89a2 <eeprom_write_byte>
    1b7a:	ff ef       	ldi	r31, 0xFF	; 255
    1b7c:	ef 1a       	sub	r14, r31
    1b7e:	ff 0a       	sbc	r15, r31
    1b80:	ec cf       	rjmp	.-40     	; 0x1b5a <_Z26write_eeprom_string_struct20ParametriCCEC_struct+0xc0>
    1b82:	65 e4       	ldi	r22, 0x45	; 69
    1b84:	72 e0       	ldi	r23, 0x02	; 2
    1b86:	86 e2       	ldi	r24, 0x26	; 38
    1b88:	9d e0       	ldi	r25, 0x0D	; 13
    1b8a:	0e 94 8c 38 	call	0x7118	; 0x7118 <_ZN5Print7printlnEPKc>
    1b8e:	81 e0       	ldi	r24, 0x01	; 1
    1b90:	0f b6       	in	r0, 0x3f	; 63
    1b92:	f8 94       	cli
    1b94:	9e be       	out	0x3e, r9	; 62
    1b96:	0f be       	out	0x3f, r0	; 63
    1b98:	8d be       	out	0x3d, r8	; 61
    1b9a:	2c 96       	adiw	r28, 0x0c	; 12
    1b9c:	0f b6       	in	r0, 0x3f	; 63
    1b9e:	f8 94       	cli
    1ba0:	de bf       	out	0x3e, r29	; 62
    1ba2:	0f be       	out	0x3f, r0	; 63
    1ba4:	cd bf       	out	0x3d, r28	; 61
    1ba6:	df 91       	pop	r29
    1ba8:	cf 91       	pop	r28
    1baa:	1f 91       	pop	r17
    1bac:	0f 91       	pop	r16
    1bae:	ff 90       	pop	r15
    1bb0:	ef 90       	pop	r14
    1bb2:	df 90       	pop	r13
    1bb4:	cf 90       	pop	r12
    1bb6:	bf 90       	pop	r11
    1bb8:	af 90       	pop	r10
    1bba:	9f 90       	pop	r9
    1bbc:	8f 90       	pop	r8
    1bbe:	08 95       	ret

00001bc0 <_Z11clearEEPROMii>:
    1bc0:	0f 93       	push	r16
    1bc2:	1f 93       	push	r17
    1bc4:	cf 93       	push	r28
    1bc6:	df 93       	push	r29
    1bc8:	ec 01       	movw	r28, r24
    1bca:	8b 01       	movw	r16, r22
    1bcc:	65 e4       	ldi	r22, 0x45	; 69
    1bce:	72 e0       	ldi	r23, 0x02	; 2
    1bd0:	86 e2       	ldi	r24, 0x26	; 38
    1bd2:	9d e0       	ldi	r25, 0x0D	; 13
    1bd4:	0e 94 8c 38 	call	0x7118	; 0x7118 <_ZN5Print7printlnEPKc>
    1bd8:	65 e4       	ldi	r22, 0x45	; 69
    1bda:	72 e0       	ldi	r23, 0x02	; 2
    1bdc:	86 e2       	ldi	r24, 0x26	; 38
    1bde:	9d e0       	ldi	r25, 0x0D	; 13
    1be0:	0e 94 8c 38 	call	0x7118	; 0x7118 <_ZN5Print7printlnEPKc>
    1be4:	6c e7       	ldi	r22, 0x7C	; 124
    1be6:	76 e0       	ldi	r23, 0x06	; 6
    1be8:	86 e2       	ldi	r24, 0x26	; 38
    1bea:	9d e0       	ldi	r25, 0x0D	; 13
    1bec:	0e 94 8c 38 	call	0x7118	; 0x7118 <_ZN5Print7printlnEPKc>
    1bf0:	c0 17       	cp	r28, r16
    1bf2:	d1 07       	cpc	r29, r17
    1bf4:	34 f4       	brge	.+12     	; 0x1c02 <_Z11clearEEPROMii+0x42>
    1bf6:	60 e0       	ldi	r22, 0x00	; 0
    1bf8:	ce 01       	movw	r24, r28
    1bfa:	0e 94 d1 44 	call	0x89a2	; 0x89a2 <eeprom_write_byte>
    1bfe:	21 96       	adiw	r28, 0x01	; 1
    1c00:	f7 cf       	rjmp	.-18     	; 0x1bf0 <_Z11clearEEPROMii+0x30>
    1c02:	69 e9       	ldi	r22, 0x99	; 153
    1c04:	76 e0       	ldi	r23, 0x06	; 6
    1c06:	86 e2       	ldi	r24, 0x26	; 38
    1c08:	9d e0       	ldi	r25, 0x0D	; 13
    1c0a:	0e 94 8c 38 	call	0x7118	; 0x7118 <_ZN5Print7printlnEPKc>
    1c0e:	65 e4       	ldi	r22, 0x45	; 69
    1c10:	72 e0       	ldi	r23, 0x02	; 2
    1c12:	86 e2       	ldi	r24, 0x26	; 38
    1c14:	9d e0       	ldi	r25, 0x0D	; 13
    1c16:	0e 94 8c 38 	call	0x7118	; 0x7118 <_ZN5Print7printlnEPKc>
    1c1a:	65 e4       	ldi	r22, 0x45	; 69
    1c1c:	72 e0       	ldi	r23, 0x02	; 2
    1c1e:	86 e2       	ldi	r24, 0x26	; 38
    1c20:	9d e0       	ldi	r25, 0x0D	; 13
    1c22:	df 91       	pop	r29
    1c24:	cf 91       	pop	r28
    1c26:	1f 91       	pop	r17
    1c28:	0f 91       	pop	r16
    1c2a:	0c 94 8c 38 	jmp	0x7118	; 0x7118 <_ZN5Print7printlnEPKc>

00001c2e <_Z18read_eeprom_stringii>:
    1c2e:	4f 92       	push	r4
    1c30:	5f 92       	push	r5
    1c32:	6f 92       	push	r6
    1c34:	7f 92       	push	r7
    1c36:	8f 92       	push	r8
    1c38:	9f 92       	push	r9
    1c3a:	af 92       	push	r10
    1c3c:	bf 92       	push	r11
    1c3e:	cf 92       	push	r12
    1c40:	df 92       	push	r13
    1c42:	ef 92       	push	r14
    1c44:	ff 92       	push	r15
    1c46:	0f 93       	push	r16
    1c48:	1f 93       	push	r17
    1c4a:	cf 93       	push	r28
    1c4c:	df 93       	push	r29
    1c4e:	cd b7       	in	r28, 0x3d	; 61
    1c50:	de b7       	in	r29, 0x3e	; 62
    1c52:	2c 97       	sbiw	r28, 0x0c	; 12
    1c54:	0f b6       	in	r0, 0x3f	; 63
    1c56:	f8 94       	cli
    1c58:	de bf       	out	0x3e, r29	; 62
    1c5a:	0f be       	out	0x3f, r0	; 63
    1c5c:	cd bf       	out	0x3d, r28	; 61
    1c5e:	7c 01       	movw	r14, r24
    1c60:	6b 01       	movw	r12, r22
    1c62:	2a 01       	movw	r4, r20
    1c64:	6d b6       	in	r6, 0x3d	; 61
    1c66:	7e b6       	in	r7, 0x3e	; 62
    1c68:	63 ea       	ldi	r22, 0xA3	; 163
    1c6a:	77 e0       	ldi	r23, 0x07	; 7
    1c6c:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
    1c70:	8d b7       	in	r24, 0x3d	; 61
    1c72:	9e b7       	in	r25, 0x3e	; 62
    1c74:	8c 19       	sub	r24, r12
    1c76:	9d 09       	sbc	r25, r13
    1c78:	0f b6       	in	r0, 0x3f	; 63
    1c7a:	f8 94       	cli
    1c7c:	9e bf       	out	0x3e, r25	; 62
    1c7e:	0f be       	out	0x3f, r0	; 63
    1c80:	8d bf       	out	0x3d, r24	; 61
    1c82:	ed b7       	in	r30, 0x3d	; 61
    1c84:	fe b7       	in	r31, 0x3e	; 62
    1c86:	31 96       	adiw	r30, 0x01	; 1
    1c88:	5f 01       	movw	r10, r30
    1c8a:	65 e4       	ldi	r22, 0x45	; 69
    1c8c:	72 e0       	ldi	r23, 0x02	; 2
    1c8e:	86 e2       	ldi	r24, 0x26	; 38
    1c90:	9d e0       	ldi	r25, 0x0D	; 13
    1c92:	0e 94 8c 38 	call	0x7118	; 0x7118 <_ZN5Print7printlnEPKc>
    1c96:	6a ea       	ldi	r22, 0xAA	; 170
    1c98:	76 e0       	ldi	r23, 0x06	; 6
    1c9a:	86 e2       	ldi	r24, 0x26	; 38
    1c9c:	9d e0       	ldi	r25, 0x0D	; 13
    1c9e:	0e 94 8c 38 	call	0x7118	; 0x7118 <_ZN5Print7printlnEPKc>
    1ca2:	65 e4       	ldi	r22, 0x45	; 69
    1ca4:	72 e0       	ldi	r23, 0x02	; 2
    1ca6:	86 e2       	ldi	r24, 0x26	; 38
    1ca8:	9d e0       	ldi	r25, 0x0D	; 13
    1caa:	0e 94 8c 38 	call	0x7118	; 0x7118 <_ZN5Print7printlnEPKc>
    1cae:	45 01       	movw	r8, r10
    1cb0:	82 01       	movw	r16, r4
    1cb2:	c4 0c       	add	r12, r4
    1cb4:	d5 1c       	adc	r13, r5
    1cb6:	0c 15       	cp	r16, r12
    1cb8:	1d 05       	cpc	r17, r13
    1cba:	5c f5       	brge	.+86     	; 0x1d12 <_Z18read_eeprom_stringii+0xe4>
    1cbc:	c8 01       	movw	r24, r16
    1cbe:	0e 94 c9 44 	call	0x8992	; 0x8992 <eeprom_read_byte>
    1cc2:	f4 01       	movw	r30, r8
    1cc4:	81 93       	st	Z+, r24
    1cc6:	4f 01       	movw	r8, r30
    1cc8:	88 23       	and	r24, r24
    1cca:	01 f1       	breq	.+64     	; 0x1d0c <_Z18read_eeprom_stringii+0xde>
    1ccc:	4a e0       	ldi	r20, 0x0A	; 10
    1cce:	68 2f       	mov	r22, r24
    1cd0:	ce 01       	movw	r24, r28
    1cd2:	07 96       	adiw	r24, 0x07	; 7
    1cd4:	0e 94 d2 3b 	call	0x77a4	; 0x77a4 <_ZN6StringC1Ehh>
    1cd8:	65 e4       	ldi	r22, 0x45	; 69
    1cda:	72 e0       	ldi	r23, 0x02	; 2
    1cdc:	ce 01       	movw	r24, r28
    1cde:	01 96       	adiw	r24, 0x01	; 1
    1ce0:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
    1ce4:	be 01       	movw	r22, r28
    1ce6:	69 5f       	subi	r22, 0xF9	; 249
    1ce8:	7f 4f       	sbci	r23, 0xFF	; 255
    1cea:	ce 01       	movw	r24, r28
    1cec:	01 96       	adiw	r24, 0x01	; 1
    1cee:	0e 94 fc 3c 	call	0x79f8	; 0x79f8 <_ZplRK15StringSumHelperRK6String>
    1cf2:	bc 01       	movw	r22, r24
    1cf4:	86 e2       	ldi	r24, 0x26	; 38
    1cf6:	9d e0       	ldi	r25, 0x0D	; 13
    1cf8:	0e 94 53 38 	call	0x70a6	; 0x70a6 <_ZN5Print5printERK6String>
    1cfc:	ce 01       	movw	r24, r28
    1cfe:	01 96       	adiw	r24, 0x01	; 1
    1d00:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
    1d04:	ce 01       	movw	r24, r28
    1d06:	07 96       	adiw	r24, 0x07	; 7
    1d08:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
    1d0c:	0f 5f       	subi	r16, 0xFF	; 255
    1d0e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d10:	d2 cf       	rjmp	.-92     	; 0x1cb6 <_Z18read_eeprom_stringii+0x88>
    1d12:	65 e4       	ldi	r22, 0x45	; 69
    1d14:	72 e0       	ldi	r23, 0x02	; 2
    1d16:	86 e2       	ldi	r24, 0x26	; 38
    1d18:	9d e0       	ldi	r25, 0x0D	; 13
    1d1a:	0e 94 8c 38 	call	0x7118	; 0x7118 <_ZN5Print7printlnEPKc>
    1d1e:	65 e4       	ldi	r22, 0x45	; 69
    1d20:	72 e0       	ldi	r23, 0x02	; 2
    1d22:	86 e2       	ldi	r24, 0x26	; 38
    1d24:	9d e0       	ldi	r25, 0x0D	; 13
    1d26:	0e 94 8c 38 	call	0x7118	; 0x7118 <_ZN5Print7printlnEPKc>
    1d2a:	b5 01       	movw	r22, r10
    1d2c:	ce 01       	movw	r24, r28
    1d2e:	01 96       	adiw	r24, 0x01	; 1
    1d30:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
    1d34:	be 01       	movw	r22, r28
    1d36:	6f 5f       	subi	r22, 0xFF	; 255
    1d38:	7f 4f       	sbci	r23, 0xFF	; 255
    1d3a:	c7 01       	movw	r24, r14
    1d3c:	0e 94 9b 3b 	call	0x7736	; 0x7736 <_ZN6StringaSEOS_>
    1d40:	ce 01       	movw	r24, r28
    1d42:	01 96       	adiw	r24, 0x01	; 1
    1d44:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
    1d48:	6d eb       	ldi	r22, 0xBD	; 189
    1d4a:	76 e0       	ldi	r23, 0x06	; 6
    1d4c:	86 e2       	ldi	r24, 0x26	; 38
    1d4e:	9d e0       	ldi	r25, 0x0D	; 13
    1d50:	0e 94 61 38 	call	0x70c2	; 0x70c2 <_ZN5Print5printEPKc>
    1d54:	b7 01       	movw	r22, r14
    1d56:	86 e2       	ldi	r24, 0x26	; 38
    1d58:	9d e0       	ldi	r25, 0x0D	; 13
    1d5a:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <_ZN5Print7printlnERK6String>
    1d5e:	c7 01       	movw	r24, r14
    1d60:	0f b6       	in	r0, 0x3f	; 63
    1d62:	f8 94       	cli
    1d64:	7e be       	out	0x3e, r7	; 62
    1d66:	0f be       	out	0x3f, r0	; 63
    1d68:	6d be       	out	0x3d, r6	; 61
    1d6a:	2c 96       	adiw	r28, 0x0c	; 12
    1d6c:	0f b6       	in	r0, 0x3f	; 63
    1d6e:	f8 94       	cli
    1d70:	de bf       	out	0x3e, r29	; 62
    1d72:	0f be       	out	0x3f, r0	; 63
    1d74:	cd bf       	out	0x3d, r28	; 61
    1d76:	df 91       	pop	r29
    1d78:	cf 91       	pop	r28
    1d7a:	1f 91       	pop	r17
    1d7c:	0f 91       	pop	r16
    1d7e:	ff 90       	pop	r15
    1d80:	ef 90       	pop	r14
    1d82:	df 90       	pop	r13
    1d84:	cf 90       	pop	r12
    1d86:	bf 90       	pop	r11
    1d88:	af 90       	pop	r10
    1d8a:	9f 90       	pop	r9
    1d8c:	8f 90       	pop	r8
    1d8e:	7f 90       	pop	r7
    1d90:	6f 90       	pop	r6
    1d92:	5f 90       	pop	r5
    1d94:	4f 90       	pop	r4
    1d96:	08 95       	ret

00001d98 <_Z19write_eeprom_string6Stringii>:

bool write_eeprom_string(String erog,int lunBuffer,int start_ind) {
    1d98:	8f 92       	push	r8
    1d9a:	9f 92       	push	r9
    1d9c:	af 92       	push	r10
    1d9e:	bf 92       	push	r11
    1da0:	cf 92       	push	r12
    1da2:	df 92       	push	r13
    1da4:	ef 92       	push	r14
    1da6:	ff 92       	push	r15
    1da8:	0f 93       	push	r16
    1daa:	1f 93       	push	r17
    1dac:	cf 93       	push	r28
    1dae:	df 93       	push	r29
    1db0:	cd b7       	in	r28, 0x3d	; 61
    1db2:	de b7       	in	r29, 0x3e	; 62
    1db4:	2c 97       	sbiw	r28, 0x0c	; 12
    1db6:	0f b6       	in	r0, 0x3f	; 63
    1db8:	f8 94       	cli
    1dba:	de bf       	out	0x3e, r29	; 62
    1dbc:	0f be       	out	0x3f, r0	; 63
    1dbe:	cd bf       	out	0x3d, r28	; 61
    1dc0:	6b 01       	movw	r12, r22
    1dc2:	4a 01       	movw	r8, r20
       i++;
  }
 Serial.println(" ");
 
 return true;
}
    1dc4:	ad b6       	in	r10, 0x3d	; 61
    1dc6:	be b6       	in	r11, 0x3e	; 62
 return Salvata;
}

bool write_eeprom_string(String erog,int lunBuffer,int start_ind) {
 
 char buf[lunBuffer];
    1dc8:	2d b7       	in	r18, 0x3d	; 61
    1dca:	3e b7       	in	r19, 0x3e	; 62
    1dcc:	26 1b       	sub	r18, r22
    1dce:	37 0b       	sbc	r19, r23
    1dd0:	0f b6       	in	r0, 0x3f	; 63
    1dd2:	f8 94       	cli
    1dd4:	3e bf       	out	0x3e, r19	; 62
    1dd6:	0f be       	out	0x3f, r0	; 63
    1dd8:	2d bf       	out	0x3d, r18	; 61
    1dda:	ed b7       	in	r30, 0x3d	; 61
    1ddc:	fe b7       	in	r31, 0x3e	; 62
    1dde:	31 96       	adiw	r30, 0x01	; 1
    1de0:	7f 01       	movw	r14, r30
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{ getBytes((unsigned char *)buf, bufsize, index); }
    1de2:	fc 01       	movw	r30, r24
    1de4:	44 81       	ldd	r20, Z+4	; 0x04
    1de6:	55 81       	ldd	r21, Z+5	; 0x05
    1de8:	4f 5f       	subi	r20, 0xFF	; 255
    1dea:	5f 4f       	sbci	r21, 0xFF	; 255
    1dec:	20 e0       	ldi	r18, 0x00	; 0
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	b7 01       	movw	r22, r14
    1df2:	0e 94 4e 3d 	call	0x7a9c	; 0x7a9c <_ZNK6String8getBytesEPhjj>
 erog.toCharArray(buf, erog.length()+1);
 bool out = false;
 int i = 0;
 
 Serial.println(" len: " + String(lunBuffer));
    1df6:	4a e0       	ldi	r20, 0x0A	; 10
    1df8:	b6 01       	movw	r22, r12
    1dfa:	ce 01       	movw	r24, r28
    1dfc:	07 96       	adiw	r24, 0x07	; 7
    1dfe:	0e 94 fd 3b 	call	0x77fa	; 0x77fa <_ZN6StringC1Eih>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1e02:	67 e5       	ldi	r22, 0x57	; 87
    1e04:	76 e0       	ldi	r23, 0x06	; 6
    1e06:	ce 01       	movw	r24, r28
    1e08:	01 96       	adiw	r24, 0x01	; 1
    1e0a:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
    1e0e:	be 01       	movw	r22, r28
    1e10:	69 5f       	subi	r22, 0xF9	; 249
    1e12:	7f 4f       	sbci	r23, 0xFF	; 255
    1e14:	ce 01       	movw	r24, r28
    1e16:	01 96       	adiw	r24, 0x01	; 1
    1e18:	0e 94 fc 3c 	call	0x79f8	; 0x79f8 <_ZplRK15StringSumHelperRK6String>
    1e1c:	bc 01       	movw	r22, r24
    1e1e:	86 e2       	ldi	r24, 0x26	; 38
    1e20:	9d e0       	ldi	r25, 0x0D	; 13
    1e22:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1e26:	ce 01       	movw	r24, r28
    1e28:	01 96       	adiw	r24, 0x01	; 1
    1e2a:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
    1e2e:	ce 01       	movw	r24, r28
    1e30:	07 96       	adiw	r24, 0x07	; 7
    1e32:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
 Serial.println("Eseguo scrittura nella EEPROM");
    1e36:	6e e5       	ldi	r22, 0x5E	; 94
    1e38:	76 e0       	ldi	r23, 0x06	; 6
    1e3a:	86 e2       	ldi	r24, 0x26	; 38
    1e3c:	9d e0       	ldi	r25, 0x0D	; 13
    1e3e:	0e 94 8c 38 	call	0x7118	; 0x7118 <_ZN5Print7printlnEPKc>
 Serial.println(" ");
    1e42:	65 e4       	ldi	r22, 0x45	; 69
    1e44:	72 e0       	ldi	r23, 0x02	; 2
    1e46:	86 e2       	ldi	r24, 0x26	; 38
    1e48:	9d e0       	ldi	r25, 0x0D	; 13
    1e4a:	0e 94 8c 38 	call	0x7118	; 0x7118 <_ZN5Print7printlnEPKc>

  for (int ind = start_ind ; ind < (start_ind + lunBuffer) ; ind++) {
    1e4e:	84 01       	movw	r16, r8
    1e50:	c8 0c       	add	r12, r8
    1e52:	d9 1c       	adc	r13, r9
    1e54:	0c 15       	cp	r16, r12
    1e56:	1d 05       	cpc	r17, r13
    1e58:	6c f5       	brge	.+90     	; 0x1eb4 <_Z19write_eeprom_string6Stringii+0x11c>
     if (buf[i] != 0) {
    1e5a:	f7 01       	movw	r30, r14
    1e5c:	60 81       	ld	r22, Z
    1e5e:	66 23       	and	r22, r22
    1e60:	19 f1       	breq	.+70     	; 0x1ea8 <_Z19write_eeprom_string6Stringii+0x110>
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator uint8_t() const             { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    1e62:	c8 01       	movw	r24, r16
    1e64:	0e 94 d1 44 	call	0x89a2	; 0x89a2 <eeprom_write_byte>
      EEPROM.write(ind, buf[i]);
      Serial.print(" " + String(buf[i]));
    1e68:	f7 01       	movw	r30, r14
    1e6a:	60 81       	ld	r22, Z
    1e6c:	ce 01       	movw	r24, r28
    1e6e:	07 96       	adiw	r24, 0x07	; 7
    1e70:	0e 94 bb 3b 	call	0x7776	; 0x7776 <_ZN6StringC1Ec>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1e74:	65 e4       	ldi	r22, 0x45	; 69
    1e76:	72 e0       	ldi	r23, 0x02	; 2
    1e78:	ce 01       	movw	r24, r28
    1e7a:	01 96       	adiw	r24, 0x01	; 1
    1e7c:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
    1e80:	be 01       	movw	r22, r28
    1e82:	69 5f       	subi	r22, 0xF9	; 249
    1e84:	7f 4f       	sbci	r23, 0xFF	; 255
    1e86:	ce 01       	movw	r24, r28
    1e88:	01 96       	adiw	r24, 0x01	; 1
    1e8a:	0e 94 fc 3c 	call	0x79f8	; 0x79f8 <_ZplRK15StringSumHelperRK6String>
    1e8e:	bc 01       	movw	r22, r24
    1e90:	86 e2       	ldi	r24, 0x26	; 38
    1e92:	9d e0       	ldi	r25, 0x0D	; 13
    1e94:	0e 94 53 38 	call	0x70a6	; 0x70a6 <_ZN5Print5printERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1e98:	ce 01       	movw	r24, r28
    1e9a:	01 96       	adiw	r24, 0x01	; 1
    1e9c:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
    1ea0:	ce 01       	movw	r24, r28
    1ea2:	07 96       	adiw	r24, 0x07	; 7
    1ea4:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
 
 Serial.println(" len: " + String(lunBuffer));
 Serial.println("Eseguo scrittura nella EEPROM");
 Serial.println(" ");

  for (int ind = start_ind ; ind < (start_ind + lunBuffer) ; ind++) {
    1ea8:	0f 5f       	subi	r16, 0xFF	; 255
    1eaa:	1f 4f       	sbci	r17, 0xFF	; 255
    1eac:	ff ef       	ldi	r31, 0xFF	; 255
    1eae:	ef 1a       	sub	r14, r31
    1eb0:	ff 0a       	sbc	r15, r31
    1eb2:	d0 cf       	rjmp	.-96     	; 0x1e54 <_Z19write_eeprom_string6Stringii+0xbc>
      EEPROM.write(ind, buf[i]);
      Serial.print(" " + String(buf[i]));
     }
       i++;
  }
 Serial.println(" ");
    1eb4:	65 e4       	ldi	r22, 0x45	; 69
    1eb6:	72 e0       	ldi	r23, 0x02	; 2
    1eb8:	86 e2       	ldi	r24, 0x26	; 38
    1eba:	9d e0       	ldi	r25, 0x0D	; 13
    1ebc:	0e 94 8c 38 	call	0x7118	; 0x7118 <_ZN5Print7printlnEPKc>
 
 return true;
}
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    1ec2:	0f b6       	in	r0, 0x3f	; 63
    1ec4:	f8 94       	cli
    1ec6:	be be       	out	0x3e, r11	; 62
    1ec8:	0f be       	out	0x3f, r0	; 63
    1eca:	ad be       	out	0x3d, r10	; 61
    1ecc:	2c 96       	adiw	r28, 0x0c	; 12
    1ece:	0f b6       	in	r0, 0x3f	; 63
    1ed0:	f8 94       	cli
    1ed2:	de bf       	out	0x3e, r29	; 62
    1ed4:	0f be       	out	0x3f, r0	; 63
    1ed6:	cd bf       	out	0x3d, r28	; 61
    1ed8:	df 91       	pop	r29
    1eda:	cf 91       	pop	r28
    1edc:	1f 91       	pop	r17
    1ede:	0f 91       	pop	r16
    1ee0:	ff 90       	pop	r15
    1ee2:	ef 90       	pop	r14
    1ee4:	df 90       	pop	r13
    1ee6:	cf 90       	pop	r12
    1ee8:	bf 90       	pop	r11
    1eea:	af 90       	pop	r10
    1eec:	9f 90       	pop	r9
    1eee:	8f 90       	pop	r8
    1ef0:	08 95       	ret

00001ef2 <loop>:
/**************************LOOP PROCEDURA************************************/
void loop() {
    1ef2:	cf 92       	push	r12
    1ef4:	df 92       	push	r13
    1ef6:	ef 92       	push	r14
    1ef8:	ff 92       	push	r15
    1efa:	0f 93       	push	r16
    1efc:	1f 93       	push	r17
    1efe:	cf 93       	push	r28
    1f00:	df 93       	push	r29
    1f02:	cd b7       	in	r28, 0x3d	; 61
    1f04:	de b7       	in	r29, 0x3e	; 62
    1f06:	a4 97       	sbiw	r28, 0x24	; 36
    1f08:	0f b6       	in	r0, 0x3f	; 63
    1f0a:	f8 94       	cli
    1f0c:	de bf       	out	0x3e, r29	; 62
    1f0e:	0f be       	out	0x3f, r0	; 63
    1f10:	cd bf       	out	0x3d, r28	; 61

  switch (stato_procedura) {
    1f12:	e0 91 2e 0b 	lds	r30, 0x0B2E	; 0x800b2e <stato_procedura>
    1f16:	f0 91 2f 0b 	lds	r31, 0x0B2F	; 0x800b2f <stato_procedura+0x1>
    1f1a:	32 96       	adiw	r30, 0x02	; 2
    1f1c:	eb 30       	cpi	r30, 0x0B	; 11
    1f1e:	f1 05       	cpc	r31, r1
    1f20:	08 f0       	brcs	.+2      	; 0x1f24 <loop+0x32>
    1f22:	ac c6       	rjmp	.+3416   	; 0x2c7c <loop+0xd8a>
    1f24:	ea 5b       	subi	r30, 0xBA	; 186
    1f26:	ff 4f       	sbci	r31, 0xFF	; 255
    1f28:	0c 94 3e 3f 	jmp	0x7e7c	; 0x7e7c <__tablejump2__>
    case -2:
      { //cli(); // disable interrupt
        
        printLine();
    1f2c:	0e 94 08 02 	call	0x410	; 0x410 <_Z9printLinev>
        Serial.print("Parametri CCEC da EEPROM");
    1f30:	64 ed       	ldi	r22, 0xD4	; 212
    1f32:	76 e0       	ldi	r23, 0x06	; 6
    1f34:	86 e2       	ldi	r24, 0x26	; 38
    1f36:	9d e0       	ldi	r25, 0x0D	; 13
    1f38:	0e 94 61 38 	call	0x70c2	; 0x70c2 <_ZN5Print5printEPKc>
        String ServerCCEC = read_eeprom_string_struct(ParametriCCEC[0]);
    1f3c:	60 91 cf 0b 	lds	r22, 0x0BCF	; 0x800bcf <ParametriCCEC>
    1f40:	70 91 d0 0b 	lds	r23, 0x0BD0	; 0x800bd0 <ParametriCCEC+0x1>
    1f44:	ce 01       	movw	r24, r28
    1f46:	01 96       	adiw	r24, 0x01	; 1
    1f48:	0e 94 44 02 	call	0x488	; 0x488 <_ZN20ParametriCCEC_structC1ERKS_>
    1f4c:	be 01       	movw	r22, r28
    1f4e:	6f 5f       	subi	r22, 0xFF	; 255
    1f50:	7f 4f       	sbci	r23, 0xFF	; 255
    1f52:	ce 01       	movw	r24, r28
    1f54:	47 96       	adiw	r24, 0x17	; 23
    1f56:	11 dd       	rcall	.-1502   	; 0x197a <_Z25read_eeprom_string_struct20ParametriCCEC_struct>
    1f58:	ce 01       	movw	r24, r28
    1f5a:	01 96       	adiw	r24, 0x01	; 1
    1f5c:	0e 94 5d 02 	call	0x4ba	; 0x4ba <_ZN20ParametriCCEC_structD1Ev>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{ getBytes((unsigned char *)buf, bufsize, index); }
    1f60:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1f62:	5c 8d       	ldd	r21, Y+28	; 0x1c
    1f64:	4f 5f       	subi	r20, 0xFF	; 255
    1f66:	5f 4f       	sbci	r21, 0xFF	; 255
    1f68:	20 e0       	ldi	r18, 0x00	; 0
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	60 e3       	ldi	r22, 0x30	; 48
    1f6e:	71 e0       	ldi	r23, 0x01	; 1
    1f70:	ce 01       	movw	r24, r28
    1f72:	47 96       	adiw	r24, 0x17	; 23
    1f74:	0e 94 4e 3d 	call	0x7a9c	; 0x7a9c <_ZNK6String8getBytesEPhjj>
        ServerCCEC.toCharArray(serverREST,ServerCCEC.length()+1);
        // String IPCCEC = read_eeprom_string_struct(ParametriCCEC[1]);
        String CSEDE = read_eeprom_string_struct(ParametriCCEC[3]);
    1f78:	60 91 cf 0b 	lds	r22, 0x0BCF	; 0x800bcf <ParametriCCEC>
    1f7c:	70 91 d0 0b 	lds	r23, 0x0BD0	; 0x800bd0 <ParametriCCEC+0x1>
    1f80:	66 5d       	subi	r22, 0xD6	; 214
    1f82:	7f 4f       	sbci	r23, 0xFF	; 255
    1f84:	ce 01       	movw	r24, r28
    1f86:	01 96       	adiw	r24, 0x01	; 1
    1f88:	0e 94 44 02 	call	0x488	; 0x488 <_ZN20ParametriCCEC_structC1ERKS_>
    1f8c:	be 01       	movw	r22, r28
    1f8e:	6f 5f       	subi	r22, 0xFF	; 255
    1f90:	7f 4f       	sbci	r23, 0xFF	; 255
    1f92:	ce 01       	movw	r24, r28
    1f94:	0f 96       	adiw	r24, 0x0f	; 15
    1f96:	f1 dc       	rcall	.-1566   	; 0x197a <_Z25read_eeprom_string_struct20ParametriCCEC_struct>
    1f98:	ce 01       	movw	r24, r28
    1f9a:	01 96       	adiw	r24, 0x01	; 1
    1f9c:	0e 94 5d 02 	call	0x4ba	; 0x4ba <_ZN20ParametriCCEC_structD1Ev>
    1fa0:	4b 89       	ldd	r20, Y+19	; 0x13
    1fa2:	5c 89       	ldd	r21, Y+20	; 0x14
    1fa4:	4f 5f       	subi	r20, 0xFF	; 255
    1fa6:	5f 4f       	sbci	r21, 0xFF	; 255
    1fa8:	20 e0       	ldi	r18, 0x00	; 0
    1faa:	30 e0       	ldi	r19, 0x00	; 0
    1fac:	62 e4       	ldi	r22, 0x42	; 66
    1fae:	71 e0       	ldi	r23, 0x01	; 1
    1fb0:	ce 01       	movw	r24, r28
    1fb2:	0f 96       	adiw	r24, 0x0f	; 15
    1fb4:	0e 94 4e 3d 	call	0x7a9c	; 0x7a9c <_ZNK6String8getBytesEPhjj>
        CSEDE.toCharArray(CodSede,CSEDE.length()+1);
        // app = read_eeprom_string_struct(ParametriCCEC[2]);
        printLine();
    1fb8:	0e 94 08 02 	call	0x410	; 0x410 <_Z9printLinev>
        stato_procedura++;
    1fbc:	80 91 2e 0b 	lds	r24, 0x0B2E	; 0x800b2e <stato_procedura>
    1fc0:	90 91 2f 0b 	lds	r25, 0x0B2F	; 0x800b2f <stato_procedura+0x1>
    1fc4:	01 96       	adiw	r24, 0x01	; 1
    1fc6:	90 93 2f 0b 	sts	0x0B2F, r25	; 0x800b2f <stato_procedura+0x1>
    1fca:	80 93 2e 0b 	sts	0x0B2E, r24	; 0x800b2e <stato_procedura>
        printLine();
        Serial.print("Parametri CCEC da EEPROM");
        String ServerCCEC = read_eeprom_string_struct(ParametriCCEC[0]);
        ServerCCEC.toCharArray(serverREST,ServerCCEC.length()+1);
        // String IPCCEC = read_eeprom_string_struct(ParametriCCEC[1]);
        String CSEDE = read_eeprom_string_struct(ParametriCCEC[3]);
    1fce:	ce 01       	movw	r24, r28
    1fd0:	0f 96       	adiw	r24, 0x0f	; 15
    1fd2:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
    1fd6:	43 c1       	rjmp	.+646    	; 0x225e <loop+0x36c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1fd8:	2f ef       	ldi	r18, 0xFF	; 255
    1fda:	39 ef       	ldi	r19, 0xF9	; 249
    1fdc:	80 e0       	ldi	r24, 0x00	; 0
    1fde:	21 50       	subi	r18, 0x01	; 1
    1fe0:	30 40       	sbci	r19, 0x00	; 0
    1fe2:	80 40       	sbci	r24, 0x00	; 0
    1fe4:	e1 f7       	brne	.-8      	; 0x1fde <loop+0xec>
    1fe6:	00 c0       	rjmp	.+0      	; 0x1fe8 <loop+0xf6>
      }
      break;
    case -1:
      {       
        _delay_ms(20);
        abilitaPulsanti();
    1fe8:	00 00       	nop
    1fea:	54 d9       	rcall	.-3416   	; 0x1294 <_Z15abilitaPulsantiv>
    1fec:	9f ef       	ldi	r25, 0xFF	; 255
    1fee:	29 ef       	ldi	r18, 0xF9	; 249
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	91 50       	subi	r25, 0x01	; 1
    1ff4:	20 40       	sbci	r18, 0x00	; 0
    1ff6:	30 40       	sbci	r19, 0x00	; 0
    1ff8:	e1 f7       	brne	.-8      	; 0x1ff2 <loop+0x100>
    1ffa:	00 c0       	rjmp	.+0      	; 0x1ffc <loop+0x10a>
        _delay_ms(20);
        abilitaContattiPistola();
    1ffc:	00 00       	nop
    1ffe:	54 d9       	rcall	.-3416   	; 0x12a8 <_Z22abilitaContattiPistolav>
    2000:	8f ef       	ldi	r24, 0xFF	; 255
    2002:	99 ef       	ldi	r25, 0xF9	; 249
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	81 50       	subi	r24, 0x01	; 1
    2008:	90 40       	sbci	r25, 0x00	; 0
    200a:	20 40       	sbci	r18, 0x00	; 0
    200c:	e1 f7       	brne	.-8      	; 0x2006 <loop+0x114>
    200e:	00 c0       	rjmp	.+0      	; 0x2010 <loop+0x11e>
    2010:	00 00       	nop
        _delay_ms(20);
        stato_procedura++;
    2012:	80 91 2e 0b 	lds	r24, 0x0B2E	; 0x800b2e <stato_procedura>
    2016:	90 91 2f 0b 	lds	r25, 0x0B2F	; 0x800b2f <stato_procedura+0x1>
    201a:	01 96       	adiw	r24, 0x01	; 1
    201c:	90 93 2f 0b 	sts	0x0B2F, r25	; 0x800b2f <stato_procedura+0x1>
    2020:	80 93 2e 0b 	sts	0x0B2E, r24	; 0x800b2e <stato_procedura>
      }
      break;
    2024:	2b c6       	rjmp	.+3158   	; 0x2c7c <loop+0xd8a>
    2026:	3f ef       	ldi	r19, 0xFF	; 255
    2028:	83 ed       	ldi	r24, 0xD3	; 211
    202a:	90 e3       	ldi	r25, 0x30	; 48
    202c:	31 50       	subi	r19, 0x01	; 1
    202e:	80 40       	sbci	r24, 0x00	; 0
    2030:	90 40       	sbci	r25, 0x00	; 0
    2032:	e1 f7       	brne	.-8      	; 0x202c <loop+0x13a>
    2034:	00 c0       	rjmp	.+0      	; 0x2036 <loop+0x144>
    2036:	00 00       	nop
    case 0:
      {
        _delay_ms(1000);
        alreadyTimbrata = false;
    2038:	10 92 6d 0b 	sts	0x0B6D, r1	; 0x800b6d <alreadyTimbrata>
        enable_ETH();
    203c:	0e 94 91 01 	call	0x322	; 0x322 <_ZL10enable_ETHv>
        /************************************************/
        righeDisplay[1] = " * AUTENTICAZIONE *";
    2040:	6d ee       	ldi	r22, 0xED	; 237
    2042:	76 e0       	ldi	r23, 0x06	; 6
    2044:	83 ee       	ldi	r24, 0xE3	; 227
    2046:	9a e0       	ldi	r25, 0x0A	; 10
    2048:	0e 94 a6 3b 	call	0x774c	; 0x774c <_ZN6StringaSEPKc>
        righeDisplay[2] = "";
    204c:	62 e4       	ldi	r22, 0x42	; 66
    204e:	72 e0       	ldi	r23, 0x02	; 2
    2050:	89 ee       	ldi	r24, 0xE9	; 233
    2052:	9a e0       	ldi	r25, 0x0A	; 10
    2054:	0e 94 a6 3b 	call	0x774c	; 0x774c <_ZN6StringaSEPKc>
        righeDisplay[3] = "    Avvicina ATE  ";
    2058:	61 e0       	ldi	r22, 0x01	; 1
    205a:	77 e0       	ldi	r23, 0x07	; 7
    205c:	8f ee       	ldi	r24, 0xEF	; 239
    205e:	9a e0       	ldi	r25, 0x0A	; 10
    2060:	0e 94 a6 3b 	call	0x774c	; 0x774c <_ZN6StringaSEPKc>
        displayLCD(righeDisplay, stato_procedura, 50);
    2064:	60 91 2e 0b 	lds	r22, 0x0B2E	; 0x800b2e <stato_procedura>
    2068:	70 91 2f 0b 	lds	r23, 0x0B2F	; 0x800b2f <stato_procedura+0x1>
    206c:	42 e3       	ldi	r20, 0x32	; 50
    206e:	50 e0       	ldi	r21, 0x00	; 0
    2070:	8d ed       	ldi	r24, 0xDD	; 221
    2072:	9a e0       	ldi	r25, 0x0A	; 10
    2074:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <_Z10displayLCDP6Stringii>
        /************************************************/
        stato_procedura++;
    2078:	80 91 2e 0b 	lds	r24, 0x0B2E	; 0x800b2e <stato_procedura>
    207c:	90 91 2f 0b 	lds	r25, 0x0B2F	; 0x800b2f <stato_procedura+0x1>
    2080:	01 96       	adiw	r24, 0x01	; 1
    2082:	90 93 2f 0b 	sts	0x0B2F, r25	; 0x800b2f <stato_procedura+0x1>
    2086:	80 93 2e 0b 	sts	0x0B2E, r24	; 0x800b2e <stato_procedura>
    208a:	2f ef       	ldi	r18, 0xFF	; 255
    208c:	39 e6       	ldi	r19, 0x69	; 105
    208e:	88 e1       	ldi	r24, 0x18	; 24
    2090:	21 50       	subi	r18, 0x01	; 1
    2092:	30 40       	sbci	r19, 0x00	; 0
    2094:	80 40       	sbci	r24, 0x00	; 0
    2096:	e1 f7       	brne	.-8      	; 0x2090 <loop+0x19e>
    2098:	00 c0       	rjmp	.+0      	; 0x209a <loop+0x1a8>
    209a:	00 00       	nop
    209c:	ef c5       	rjmp	.+3038   	; 0x2c7c <loop+0xd8a>
        _delay_ms(500);
      }
      break;
    case 1:
      {
        TARGA = "";
    209e:	62 e4       	ldi	r22, 0x42	; 66
    20a0:	72 e0       	ldi	r23, 0x02	; 2
    20a2:	87 e8       	ldi	r24, 0x87	; 135
    20a4:	9a e0       	ldi	r25, 0x0A	; 10
    20a6:	0e 94 a6 3b 	call	0x774c	; 0x774c <_ZN6StringaSEPKc>
        KM = "";
    20aa:	62 e4       	ldi	r22, 0x42	; 66
    20ac:	72 e0       	ldi	r23, 0x02	; 2
    20ae:	81 e8       	ldi	r24, 0x81	; 129
    20b0:	9a e0       	ldi	r25, 0x0A	; 10
    20b2:	0e 94 a6 3b 	call	0x774c	; 0x774c <_ZN6StringaSEPKc>

        /*****************************************************/
        String ATe = "ERRORE";
    20b6:	6c e8       	ldi	r22, 0x8C	; 140
    20b8:	72 e0       	ldi	r23, 0x02	; 2
    20ba:	ce 01       	movw	r24, r28
    20bc:	47 96       	adiw	r24, 0x17	; 23
    20be:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
        
        if (!alreadyTimbrata) {
    20c2:	80 91 6d 0b 	lds	r24, 0x0B6D	; 0x800b6d <alreadyTimbrata>
    20c6:	81 11       	cpse	r24, r1
    20c8:	16 c0       	rjmp	.+44     	; 0x20f6 <loop+0x204>
          ATe = GetCodeRfidATe();
    20ca:	ce 01       	movw	r24, r28
    20cc:	01 96       	adiw	r24, 0x01	; 1
    20ce:	0e 94 aa 05 	call	0xb54	; 0xb54 <_Z14GetCodeRfidATev>
    20d2:	be 01       	movw	r22, r28
    20d4:	6f 5f       	subi	r22, 0xFF	; 255
    20d6:	7f 4f       	sbci	r23, 0xFF	; 255
    20d8:	ce 01       	movw	r24, r28
    20da:	47 96       	adiw	r24, 0x17	; 23
    20dc:	0e 94 9b 3b 	call	0x7736	; 0x7736 <_ZN6StringaSEOS_>
    20e0:	ce 01       	movw	r24, r28
    20e2:	01 96       	adiw	r24, 0x01	; 1
    20e4:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
          Buzzer(2, 100);
    20e8:	44 e6       	ldi	r20, 0x64	; 100
    20ea:	50 e0       	ldi	r21, 0x00	; 0
    20ec:	60 e0       	ldi	r22, 0x00	; 0
    20ee:	70 e0       	ldi	r23, 0x00	; 0
    20f0:	82 e0       	ldi	r24, 0x02	; 2
    20f2:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_Z6Buzzerhm>
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
    20f6:	6c e8       	ldi	r22, 0x8C	; 140
    20f8:	72 e0       	ldi	r23, 0x02	; 2
    20fa:	ce 01       	movw	r24, r28
    20fc:	47 96       	adiw	r24, 0x17	; 23
    20fe:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <_ZNK6String6equalsEPKc>
        }

        if ((ATe != "ERRORE") && (BIT_IS_CLEAR(PORTC, 4)))
    2102:	81 11       	cpse	r24, r1
    2104:	02 c0       	rjmp	.+4      	; 0x210a <loop+0x218>
    2106:	44 9b       	sbis	0x08, 4	; 8
    2108:	f8 c5       	rjmp	.+3056   	; 0x2cfa <loop+0xe08>
          _delay_ms(1000); // tempo per inizializzare la ethernet
        }

        // Effettua chiamata REST per validare CARD NFC
        
        righeDisplay[1] =  "** TARGA MEZZO **";
    210a:	67 eb       	ldi	r22, 0xB7	; 183
    210c:	75 e0       	ldi	r23, 0x05	; 5
    210e:	83 ee       	ldi	r24, 0xE3	; 227
    2110:	9a e0       	ldi	r25, 0x0A	; 10
    2112:	0e 94 a6 3b 	call	0x774c	; 0x774c <_ZN6StringaSEPKc>
        righeDisplay[2] = "TARGA:";
    2116:	69 ec       	ldi	r22, 0xC9	; 201
    2118:	75 e0       	ldi	r23, 0x05	; 5
    211a:	89 ee       	ldi	r24, 0xE9	; 233
    211c:	9a e0       	ldi	r25, 0x0A	; 10
    211e:	0e 94 a6 3b 	call	0x774c	; 0x774c <_ZN6StringaSEPKc>
        righeDisplay[3] = "#:Conferma *:Usa TAG";
    2122:	60 ed       	ldi	r22, 0xD0	; 208
    2124:	75 e0       	ldi	r23, 0x05	; 5
    2126:	8f ee       	ldi	r24, 0xEF	; 239
    2128:	9a e0       	ldi	r25, 0x0A	; 10
    212a:	0e 94 a6 3b 	call	0x774c	; 0x774c <_ZN6StringaSEPKc>

        // bool GetAteCheck(int Port, char serverREST[], EthernetClient ClientHTTP, String _idAte)

        if (GetAteCheck(80,serverREST,clientATE,ATe)) 
    212e:	be 01       	movw	r22, r28
    2130:	69 5e       	subi	r22, 0xE9	; 233
    2132:	7f 4f       	sbci	r23, 0xFF	; 255
    2134:	ce 01       	movw	r24, r28
    2136:	0f 96       	adiw	r24, 0x0f	; 15
    2138:	0e 94 93 3b 	call	0x7726	; 0x7726 <_ZN6StringC1ERKS_>
#ifdef BIN // Prevent warnings if BIN is previously defined in "iotnx4.h" or similar
#undef BIN
#endif
#define BIN 2

class Print
    213c:	80 91 ad 0a 	lds	r24, 0x0AAD	; 0x800aad <clientATE+0x2>
    2140:	90 91 ae 0a 	lds	r25, 0x0AAE	; 0x800aae <clientATE+0x3>
    2144:	9c 83       	std	Y+4, r25	; 0x04
    2146:	8b 83       	std	Y+3, r24	; 0x03
    SKIP_WHITESPACE // Only tabs, spaces, line feeds & carriage returns are skipped.
};

#define NO_IGNORE_CHAR  '\x01' // a char not found in a valid ASCII numeric field

class Stream : public Print
    2148:	80 91 af 0a 	lds	r24, 0x0AAF	; 0x800aaf <clientATE+0x4>
    214c:	90 91 b0 0a 	lds	r25, 0x0AB0	; 0x800ab0 <clientATE+0x5>
    2150:	a0 91 b1 0a 	lds	r26, 0x0AB1	; 0x800ab1 <clientATE+0x6>
    2154:	b0 91 b2 0a 	lds	r27, 0x0AB2	; 0x800ab2 <clientATE+0x7>
    2158:	8d 83       	std	Y+5, r24	; 0x05
    215a:	9e 83       	std	Y+6, r25	; 0x06
    215c:	af 83       	std	Y+7, r26	; 0x07
    215e:	b8 87       	std	Y+8, r27	; 0x08
    2160:	80 91 b3 0a 	lds	r24, 0x0AB3	; 0x800ab3 <clientATE+0x8>
    2164:	90 91 b4 0a 	lds	r25, 0x0AB4	; 0x800ab4 <clientATE+0x9>
    2168:	a0 91 b5 0a 	lds	r26, 0x0AB5	; 0x800ab5 <clientATE+0xa>
    216c:	b0 91 b6 0a 	lds	r27, 0x0AB6	; 0x800ab6 <clientATE+0xb>
    2170:	89 87       	std	Y+9, r24	; 0x09
    2172:	9a 87       	std	Y+10, r25	; 0x0a
    2174:	ab 87       	std	Y+11, r26	; 0x0b
    2176:	bc 87       	std	Y+12, r27	; 0x0c
#include "Arduino.h"	
#include "Print.h"
#include "Client.h"
#include "IPAddress.h"

class EthernetClient : public Client {
    2178:	89 ed       	ldi	r24, 0xD9	; 217
    217a:	99 e0       	ldi	r25, 0x09	; 9
    217c:	9a 83       	std	Y+2, r25	; 0x02
    217e:	89 83       	std	Y+1, r24	; 0x01
    2180:	80 91 b7 0a 	lds	r24, 0x0AB7	; 0x800ab7 <clientATE+0xc>
    2184:	8d 87       	std	Y+13, r24	; 0x0d
    2186:	9e 01       	movw	r18, r28
    2188:	21 5f       	subi	r18, 0xF1	; 241
    218a:	3f 4f       	sbci	r19, 0xFF	; 255
    218c:	ae 01       	movw	r20, r28
    218e:	4f 5f       	subi	r20, 0xFF	; 255
    2190:	5f 4f       	sbci	r21, 0xFF	; 255
    2192:	60 e3       	ldi	r22, 0x30	; 48
    2194:	71 e0       	ldi	r23, 0x01	; 1
    2196:	80 e5       	ldi	r24, 0x50	; 80
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <_Z11GetAteCheckiPc14EthernetClient6String>
    219e:	18 2f       	mov	r17, r24
    21a0:	ce 01       	movw	r24, r28
    21a2:	0f 96       	adiw	r24, 0x0f	; 15
    21a4:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
        {
                SET_BIT(PORTC,PC4);
    21a8:	44 9a       	sbi	0x08, 4	; 8
        righeDisplay[2] = "TARGA:";
        righeDisplay[3] = "#:Conferma *:Usa TAG";

        // bool GetAteCheck(int Port, char serverREST[], EthernetClient ClientHTTP, String _idAte)

        if (GetAteCheck(80,serverREST,clientATE,ATe)) 
    21aa:	11 23       	and	r17, r17
    21ac:	09 f1       	breq	.+66     	; 0x21f0 <loop+0x2fe>
        {
                SET_BIT(PORTC,PC4);
                RaccoltaDati[5] = "000";               
    21ae:	64 e1       	ldi	r22, 0x14	; 20
    21b0:	77 e0       	ldi	r23, 0x07	; 7
    21b2:	8f e1       	ldi	r24, 0x1F	; 31
    21b4:	9b e0       	ldi	r25, 0x0B	; 11
    21b6:	0e 94 a6 3b 	call	0x774c	; 0x774c <_ZN6StringaSEPKc>
                Buzzer(1,200);
    21ba:	48 ec       	ldi	r20, 0xC8	; 200
    21bc:	50 e0       	ldi	r21, 0x00	; 0
    21be:	60 e0       	ldi	r22, 0x00	; 0
    21c0:	70 e0       	ldi	r23, 0x00	; 0
    21c2:	81 e0       	ldi	r24, 0x01	; 1
    21c4:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_Z6Buzzerhm>
    21c8:	9f ef       	ldi	r25, 0xFF	; 255
    21ca:	20 e7       	ldi	r18, 0x70	; 112
    21cc:	32 e0       	ldi	r19, 0x02	; 2
    21ce:	91 50       	subi	r25, 0x01	; 1
    21d0:	20 40       	sbci	r18, 0x00	; 0
    21d2:	30 40       	sbci	r19, 0x00	; 0
    21d4:	e1 f7       	brne	.-8      	; 0x21ce <loop+0x2dc>
    21d6:	00 c0       	rjmp	.+0      	; 0x21d8 <loop+0x2e6>
    21d8:	00 00       	nop
                _delay_ms(50);
                avanzaStato(TinputTarga);
    21da:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <TinputTarga>
    21de:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <TinputTarga+0x1>
    21e2:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <TinputTarga+0x2>
    21e6:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <TinputTarga+0x3>
    21ea:	0e 94 a1 03 	call	0x742	; 0x742 <_Z11avanzaStatom>
    21ee:	37 c0       	rjmp	.+110    	; 0x225e <loop+0x36c>
         } 
         else 
         {
                SET_BIT(PORTC,PC4);
                RaccoltaDati[5] = "111";
    21f0:	68 e1       	ldi	r22, 0x18	; 24
    21f2:	77 e0       	ldi	r23, 0x07	; 7
    21f4:	8f e1       	ldi	r24, 0x1F	; 31
    21f6:	9b e0       	ldi	r25, 0x0B	; 11
    21f8:	0e 94 a6 3b 	call	0x774c	; 0x774c <_ZN6StringaSEPKc>
                Buzzer(3,200);
    21fc:	48 ec       	ldi	r20, 0xC8	; 200
    21fe:	50 e0       	ldi	r21, 0x00	; 0
    2200:	60 e0       	ldi	r22, 0x00	; 0
    2202:	70 e0       	ldi	r23, 0x00	; 0
    2204:	83 e0       	ldi	r24, 0x03	; 3
    2206:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_Z6Buzzerhm>
                lcd.clear();
    220a:	85 e5       	ldi	r24, 0x55	; 85
    220c:	9b e0       	ldi	r25, 0x0B	; 11
    220e:	0e 94 a0 2f 	call	0x5f40	; 0x5f40 <_ZN3LCD5clearEv>
                righeDisplay[1] = "***** ERRORE ******";
    2212:	6c e1       	ldi	r22, 0x1C	; 28
    2214:	77 e0       	ldi	r23, 0x07	; 7
    2216:	83 ee       	ldi	r24, 0xE3	; 227
    2218:	9a e0       	ldi	r25, 0x0A	; 10
    221a:	0e 94 a6 3b 	call	0x774c	; 0x774c <_ZN6StringaSEPKc>
                righeDisplay[2] = "  Ate NON VALIDA ";
    221e:	60 e3       	ldi	r22, 0x30	; 48
    2220:	77 e0       	ldi	r23, 0x07	; 7
    2222:	89 ee       	ldi	r24, 0xE9	; 233
    2224:	9a e0       	ldi	r25, 0x0A	; 10
    2226:	0e 94 a6 3b 	call	0x774c	; 0x774c <_ZN6StringaSEPKc>
                righeDisplay[3] = "";
    222a:	62 e4       	ldi	r22, 0x42	; 66
    222c:	72 e0       	ldi	r23, 0x02	; 2
    222e:	8f ee       	ldi	r24, 0xEF	; 239
    2230:	9a e0       	ldi	r25, 0x0A	; 10
    2232:	0e 94 a6 3b 	call	0x774c	; 0x774c <_ZN6StringaSEPKc>
                displayLCD(righeDisplay,stato_procedura,10);
    2236:	60 91 2e 0b 	lds	r22, 0x0B2E	; 0x800b2e <stato_procedura>
    223a:	70 91 2f 0b 	lds	r23, 0x0B2F	; 0x800b2f <stato_procedura+0x1>
    223e:	4a e0       	ldi	r20, 0x0A	; 10
    2240:	50 e0       	ldi	r21, 0x00	; 0
    2242:	8d ed       	ldi	r24, 0xDD	; 221
    2244:	9a e0       	ldi	r25, 0x0A	; 10
    2246:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <_Z10displayLCDP6Stringii>
    224a:	8f ef       	ldi	r24, 0xFF	; 255
    224c:	93 ed       	ldi	r25, 0xD3	; 211
    224e:	20 e3       	ldi	r18, 0x30	; 48
    2250:	81 50       	subi	r24, 0x01	; 1
    2252:	90 40       	sbci	r25, 0x00	; 0
    2254:	20 40       	sbci	r18, 0x00	; 0
    2256:	e1 f7       	brne	.-8      	; 0x2250 <loop+0x35e>
    2258:	00 c0       	rjmp	.+0      	; 0x225a <loop+0x368>
                _delay_ms(1000);
                Azzera();
    225a:	00 00       	nop
    225c:	f3 d8       	rcall	.-3610   	; 0x1444 <_Z6Azzerav>
      {
        TARGA = "";
        KM = "";

        /*****************************************************/
        String ATe = "ERRORE";
    225e:	ce 01       	movw	r24, r28
    2260:	47 96       	adiw	r24, 0x17	; 23
    2262:	0a c5       	rjmp	.+2580   	; 0x2c78 <loop+0xd86>
         }      
      }
      break;
    case 2:
      {
        lcd.setCursor(0, 0);
    2264:	40 e0       	ldi	r20, 0x00	; 0
    2266:	60 e0       	ldi	r22, 0x00	; 0
    2268:	85 e5       	ldi	r24, 0x55	; 85
    226a:	9b e0       	ldi	r25, 0x0B	; 11
    226c:	0e 94 a6 2f 	call	0x5f4c	; 0x5f4c <_ZN3LCD9setCursorEhh>
        lcd.print((char)1);  // STAMPA LA CLESSIDRA
    2270:	61 e0       	ldi	r22, 0x01	; 1
    2272:	85 e5       	ldi	r24, 0x55	; 85
    2274:	9b e0       	ldi	r25, 0x0B	; 11
    2276:	0e 94 62 38 	call	0x70c4	; 0x70c4 <_ZN5Print5printEc>
        lcd.print("Tempo: " + String((UltimoPassaggioStato + Timer - secs - 1)) + " sec ");
    227a:	40 91 97 0a 	lds	r20, 0x0A97	; 0x800a97 <UltimoPassaggioStato>
    227e:	50 91 98 0a 	lds	r21, 0x0A98	; 0x800a98 <UltimoPassaggioStato+0x1>
    2282:	60 91 99 0a 	lds	r22, 0x0A99	; 0x800a99 <UltimoPassaggioStato+0x2>
    2286:	70 91 9a 0a 	lds	r23, 0x0A9A	; 0x800a9a <UltimoPassaggioStato+0x3>
    228a:	80 91 93 0a 	lds	r24, 0x0A93	; 0x800a93 <Timer>
    228e:	90 91 94 0a 	lds	r25, 0x0A94	; 0x800a94 <Timer+0x1>
    2292:	a0 91 95 0a 	lds	r26, 0x0A95	; 0x800a95 <Timer+0x2>
    2296:	b0 91 96 0a 	lds	r27, 0x0A96	; 0x800a96 <Timer+0x3>
    229a:	48 0f       	add	r20, r24
    229c:	59 1f       	adc	r21, r25
    229e:	6a 1f       	adc	r22, r26
    22a0:	7b 1f       	adc	r23, r27
    22a2:	41 50       	subi	r20, 0x01	; 1
    22a4:	51 09       	sbc	r21, r1
    22a6:	61 09       	sbc	r22, r1
    22a8:	71 09       	sbc	r23, r1
    22aa:	80 91 9b 0a 	lds	r24, 0x0A9B	; 0x800a9b <secs>
    22ae:	90 91 9c 0a 	lds	r25, 0x0A9C	; 0x800a9c <secs+0x1>
    22b2:	a0 91 9d 0a 	lds	r26, 0x0A9D	; 0x800a9d <secs+0x2>
    22b6:	b0 91 9e 0a 	lds	r27, 0x0A9E	; 0x800a9e <secs+0x3>
    22ba:	48 1b       	sub	r20, r24
    22bc:	59 0b       	sbc	r21, r25
    22be:	6a 0b       	sbc	r22, r26
    22c0:	7b 0b       	sbc	r23, r27
    22c2:	2a e0       	ldi	r18, 0x0A	; 10
    22c4:	ce 01       	movw	r24, r28
    22c6:	0f 96       	adiw	r24, 0x0f	; 15
    22c8:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_ZN6StringC1Emh>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    22cc:	64 e6       	ldi	r22, 0x64	; 100
    22ce:	77 e0       	ldi	r23, 0x07	; 7
    22d0:	ce 01       	movw	r24, r28
    22d2:	01 96       	adiw	r24, 0x01	; 1
    22d4:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
    22d8:	be 01       	movw	r22, r28
    22da:	61 5f       	subi	r22, 0xF1	; 241
    22dc:	7f 4f       	sbci	r23, 0xFF	; 255
    22de:	ce 01       	movw	r24, r28
    22e0:	01 96       	adiw	r24, 0x01	; 1
    22e2:	0e 94 fc 3c 	call	0x79f8	; 0x79f8 <_ZplRK15StringSumHelperRK6String>
    22e6:	62 e4       	ldi	r22, 0x42	; 66
    22e8:	77 e0       	ldi	r23, 0x07	; 7
    22ea:	0e 94 0d 3d 	call	0x7a1a	; 0x7a1a <_ZplRK15StringSumHelperPKc>
    22ee:	bc 01       	movw	r22, r24
    22f0:	85 e5       	ldi	r24, 0x55	; 85
    22f2:	9b e0       	ldi	r25, 0x0B	; 11
    22f4:	0e 94 53 38 	call	0x70a6	; 0x70a6 <_ZN5Print5printERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    22f8:	ce 01       	movw	r24, r28
    22fa:	01 96       	adiw	r24, 0x01	; 1
    22fc:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
    2300:	ce 01       	movw	r24, r28
    2302:	0f 96       	adiw	r24, 0x0f	; 15
    2304:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
        // da commentare
        // Carburante = "D"; // Simulo Abilitazione Diesel
        // da commentare
        // Carburante = "B"; // Simulo Abilitazione Benzina
        /*****************************************************************/
        gpio.setCONFREG(0x3C);
    2308:	6c e3       	ldi	r22, 0x3C	; 60
    230a:	8e e7       	ldi	r24, 0x7E	; 126
    230c:	9a e0       	ldi	r25, 0x0A	; 10
    230e:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <_ZN7PCA953410setCONFREGEh>
        uint8_t c = gpio.Read_IP_REGISTER();
    2312:	8e e7       	ldi	r24, 0x7E	; 126
    2314:	9a e0       	ldi	r25, 0x0A	; 10
    2316:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <_ZN7PCA953416Read_IP_REGISTEREv>
    231a:	e8 2e       	mov	r14, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    231c:	42 e0       	ldi	r20, 0x02	; 2
    231e:	be 01       	movw	r22, r28
    2320:	69 5e       	subi	r22, 0xE9	; 233
    2322:	7f 4f       	sbci	r23, 0xFF	; 255
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	0e 94 fb 41 	call	0x83f6	; 0x83f6 <__itoa_ncheck>
        char buf[8];
        itoa(c, buf, 2);
        gpio.setCONFREG(0xC3);
    232a:	63 ec       	ldi	r22, 0xC3	; 195
    232c:	8e e7       	ldi	r24, 0x7E	; 126
    232e:	9a e0       	ldi	r25, 0x0A	; 10
    2330:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <_ZN7PCA953410setCONFREGEh>
        uint8_t r = gpio.Read_IP_REGISTER();
    2334:	8e e7       	ldi	r24, 0x7E	; 126
    2336:	9a e0       	ldi	r25, 0x0A	; 10
    2338:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <_ZN7PCA953416Read_IP_REGISTEREv>
    233c:	f8 2e       	mov	r15, r24
    233e:	42 e0       	ldi	r20, 0x02	; 2
    2340:	be 01       	movw	r22, r28
    2342:	61 5f       	subi	r22, 0xF1	; 241
    2344:	7f 4f       	sbci	r23, 0xFF	; 255
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	0e 94 fb 41 	call	0x83f6	; 0x83f6 <__itoa_ncheck>
        char bufr[8];
        itoa(r, bufr, 2);
        char ris[8];
        uint8_t z = (r ^ c);
        itoa(z, ris, 2);
    234c:	fe 24       	eor	r15, r14
    234e:	ef 2c       	mov	r14, r15
    2350:	f1 2c       	mov	r15, r1
    2352:	42 e0       	ldi	r20, 0x02	; 2
    2354:	be 01       	movw	r22, r28
    2356:	6f 5f       	subi	r22, 0xFF	; 255
    2358:	7f 4f       	sbci	r23, 0xFF	; 255
    235a:	c7 01       	movw	r24, r14
    235c:	0e 94 fb 41 	call	0x83f6	; 0x83f6 <__itoa_ncheck>
        char T = getCharKeypad(int(z));
    2360:	c7 01       	movw	r24, r14
    2362:	0e 94 86 02 	call	0x50c	; 0x50c <_Z13getCharKeypadi>
    2366:	3f ef       	ldi	r19, 0xFF	; 255
    2368:	99 ef       	ldi	r25, 0xF9	; 249
    236a:	20 e0       	ldi	r18, 0x00	; 0
    236c:	31 50       	subi	r19, 0x01	; 1
    236e:	90 40       	sbci	r25, 0x00	; 0
    2370:	20 40       	sbci	r18, 0x00	; 0
    2372:	e1 f7       	brne	.-8      	; 0x236c <loop+0x47a>
    2374:	00 c0       	rjmp	.+0      	; 0x2376 <loop+0x484>
        _delay_ms(20);
        /*****************************************************************/
        inputTarga(T);
    2376:	00 00       	nop
    2378:	15 d9       	rcall	.-3542   	; 0x15a4 <_Z10inputTargac>
      }
      break;
    237a:	80 c4       	rjmp	.+2304   	; 0x2c7c <loop+0xd8a>
    case 3:
      {
        lcd.setCursor(0, 0);
    237c:	40 e0       	ldi	r20, 0x00	; 0
    237e:	60 e0       	ldi	r22, 0x00	; 0
    2380:	85 e5       	ldi	r24, 0x55	; 85
    2382:	9b e0       	ldi	r25, 0x0B	; 11
    2384:	0e 94 a6 2f 	call	0x5f4c	; 0x5f4c <_ZN3LCD9setCursorEhh>
        lcd.print((char)1);  // STAMPA LA CLESSIDRA
    2388:	61 e0       	ldi	r22, 0x01	; 1
    238a:	85 e5       	ldi	r24, 0x55	; 85
    238c:	9b e0       	ldi	r25, 0x0B	; 11
    238e:	0e 94 62 38 	call	0x70c4	; 0x70c4 <_ZN5Print5printEc>
        lcd.print("Tempo: " + String((UltimoPassaggioStato + Timer - secs - 1)) + " sec ");
    2392:	40 91 97 0a 	lds	r20, 0x0A97	; 0x800a97 <UltimoPassaggioStato>
    2396:	50 91 98 0a 	lds	r21, 0x0A98	; 0x800a98 <UltimoPassaggioStato+0x1>
    239a:	60 91 99 0a 	lds	r22, 0x0A99	; 0x800a99 <UltimoPassaggioStato+0x2>
    239e:	70 91 9a 0a 	lds	r23, 0x0A9A	; 0x800a9a <UltimoPassaggioStato+0x3>
    23a2:	80 91 93 0a 	lds	r24, 0x0A93	; 0x800a93 <Timer>
    23a6:	90 91 94 0a 	lds	r25, 0x0A94	; 0x800a94 <Timer+0x1>
    23aa:	a0 91 95 0a 	lds	r26, 0x0A95	; 0x800a95 <Timer+0x2>
    23ae:	b0 91 96 0a 	lds	r27, 0x0A96	; 0x800a96 <Timer+0x3>
    23b2:	48 0f       	add	r20, r24
    23b4:	59 1f       	adc	r21, r25
    23b6:	6a 1f       	adc	r22, r26
    23b8:	7b 1f       	adc	r23, r27
    23ba:	41 50       	subi	r20, 0x01	; 1
    23bc:	51 09       	sbc	r21, r1
    23be:	61 09       	sbc	r22, r1
    23c0:	71 09       	sbc	r23, r1
    23c2:	80 91 9b 0a 	lds	r24, 0x0A9B	; 0x800a9b <secs>
    23c6:	90 91 9c 0a 	lds	r25, 0x0A9C	; 0x800a9c <secs+0x1>
    23ca:	a0 91 9d 0a 	lds	r26, 0x0A9D	; 0x800a9d <secs+0x2>
    23ce:	b0 91 9e 0a 	lds	r27, 0x0A9E	; 0x800a9e <secs+0x3>
    23d2:	48 1b       	sub	r20, r24
    23d4:	59 0b       	sbc	r21, r25
    23d6:	6a 0b       	sbc	r22, r26
    23d8:	7b 0b       	sbc	r23, r27
    23da:	2a e0       	ldi	r18, 0x0A	; 10
    23dc:	ce 01       	movw	r24, r28
    23de:	0f 96       	adiw	r24, 0x0f	; 15
    23e0:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_ZN6StringC1Emh>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    23e4:	64 e6       	ldi	r22, 0x64	; 100
    23e6:	77 e0       	ldi	r23, 0x07	; 7
    23e8:	ce 01       	movw	r24, r28
    23ea:	01 96       	adiw	r24, 0x01	; 1
    23ec:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
    23f0:	be 01       	movw	r22, r28
    23f2:	61 5f       	subi	r22, 0xF1	; 241
    23f4:	7f 4f       	sbci	r23, 0xFF	; 255
    23f6:	ce 01       	movw	r24, r28
    23f8:	01 96       	adiw	r24, 0x01	; 1
    23fa:	0e 94 fc 3c 	call	0x79f8	; 0x79f8 <_ZplRK15StringSumHelperRK6String>
    23fe:	62 e4       	ldi	r22, 0x42	; 66
    2400:	77 e0       	ldi	r23, 0x07	; 7
    2402:	0e 94 0d 3d 	call	0x7a1a	; 0x7a1a <_ZplRK15StringSumHelperPKc>
    2406:	bc 01       	movw	r22, r24
    2408:	85 e5       	ldi	r24, 0x55	; 85
    240a:	9b e0       	ldi	r25, 0x0B	; 11
    240c:	0e 94 53 38 	call	0x70a6	; 0x70a6 <_ZN5Print5printERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2410:	ce 01       	movw	r24, r28
    2412:	01 96       	adiw	r24, 0x01	; 1
    2414:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
    2418:	ce 01       	movw	r24, r28
    241a:	0f 96       	adiw	r24, 0x0f	; 15
    241c:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>

        if (TARGA.length() == 5)
    2420:	80 91 8b 0a 	lds	r24, 0x0A8B	; 0x800a8b <TARGA+0x4>
    2424:	90 91 8c 0a 	lds	r25, 0x0A8C	; 0x800a8c <TARGA+0x5>
    2428:	05 97       	sbiw	r24, 0x05	; 5
    242a:	e9 f4       	brne	.+58     	; 0x2466 <loop+0x574>
        {
          mezzo.Carb = "X";
    242c:	6a e1       	ldi	r22, 0x1A	; 26
    242e:	75 e0       	ldi	r23, 0x05	; 5
    2430:	87 e7       	ldi	r24, 0x77	; 119
    2432:	9b e0       	ldi	r25, 0x0B	; 11
    2434:	0e 94 a6 3b 	call	0x774c	; 0x774c <_ZN6StringaSEPKc>
          mezzo.TARGA = TARGA;
    2438:	67 e8       	ldi	r22, 0x87	; 135
    243a:	7a e0       	ldi	r23, 0x0A	; 10
    243c:	8d e7       	ldi	r24, 0x7D	; 125
    243e:	9b e0       	ldi	r25, 0x0B	; 11
    2440:	0e 94 7e 3b 	call	0x76fc	; 0x76fc <_ZN6StringaSERKS_>
          mezzo.KM = "0";
    2444:	62 e4       	ldi	r22, 0x42	; 66
    2446:	76 e0       	ldi	r23, 0x06	; 6
    2448:	83 e8       	ldi	r24, 0x83	; 131
    244a:	9b e0       	ldi	r25, 0x0B	; 11
    244c:	0e 94 a6 3b 	call	0x774c	; 0x774c <_ZN6StringaSEPKc>
          distr_selezionato = 0;
    2450:	10 92 2b 0b 	sts	0x0B2B, r1	; 0x800b2b <distr_selezionato>
          avanzaStato(TselDistributore);
    2454:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <TselDistributore>
    2458:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <TselDistributore+0x1>
    245c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <TselDistributore+0x2>
    2460:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <TselDistributore+0x3>
    2464:	c7 c5       	rjmp	.+2958   	; 0x2ff4 <loop+0x1102>
        }
        else {
          String mezzoString = leggiTAG_Mezzo(false); // con TRUE scrive sul blocco 4 della card NFC DEL MEZZO
    2466:	60 e0       	ldi	r22, 0x00	; 0
    2468:	ce 01       	movw	r24, r28
    246a:	0f 96       	adiw	r24, 0x0f	; 15
    246c:	0e 94 c7 04 	call	0x98e	; 0x98e <_Z14leggiTAG_Mezzob>
    2470:	8f e3       	ldi	r24, 0x3F	; 63
    2472:	9c e9       	ldi	r25, 0x9C	; 156
    2474:	01 97       	sbiw	r24, 0x01	; 1
    2476:	f1 f7       	brne	.-4      	; 0x2474 <loop+0x582>
    2478:	00 c0       	rjmp	.+0      	; 0x247a <loop+0x588>
    247a:	00 00       	nop
          _delay_ms(10);

          Serial.println(mezzoString);
    247c:	be 01       	movw	r22, r28
    247e:	61 5f       	subi	r22, 0xF1	; 241
    2480:	7f 4f       	sbci	r23, 0xFF	; 255
    2482:	86 e2       	ldi	r24, 0x26	; 38
    2484:	9d e0       	ldi	r25, 0x0D	; 13
    2486:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <_ZN5Print7printlnERK6String>
	int indexOf( const String &str, unsigned int fromIndex ) const;
	int lastIndexOf( char ch ) const;
	int lastIndexOf( char ch, unsigned int fromIndex ) const;
	int lastIndexOf( const String &str ) const;
	int lastIndexOf( const String &str, unsigned int fromIndex ) const;
	String substring( unsigned int beginIndex ) const { return substring(beginIndex, len); };
    248a:	2b 89       	ldd	r18, Y+19	; 0x13
    248c:	3c 89       	ldd	r19, Y+20	; 0x14
    248e:	45 e0       	ldi	r20, 0x05	; 5
    2490:	50 e0       	ldi	r21, 0x00	; 0
    2492:	be 01       	movw	r22, r28
    2494:	61 5f       	subi	r22, 0xF1	; 241
    2496:	7f 4f       	sbci	r23, 0xFF	; 255
    2498:	ce 01       	movw	r24, r28
    249a:	01 96       	adiw	r24, 0x01	; 1
    249c:	0e 94 7c 3d 	call	0x7af8	; 0x7af8 <_ZNK6String9substringEjj>

          mezzo.Carb = mezzoString.substring(5);
    24a0:	be 01       	movw	r22, r28
    24a2:	6f 5f       	subi	r22, 0xFF	; 255
    24a4:	7f 4f       	sbci	r23, 0xFF	; 255
    24a6:	87 e7       	ldi	r24, 0x77	; 119
    24a8:	9b e0       	ldi	r25, 0x0B	; 11
    24aa:	0e 94 9b 3b 	call	0x7736	; 0x7736 <_ZN6StringaSEOS_>
    24ae:	ce 01       	movw	r24, r28
    24b0:	01 96       	adiw	r24, 0x01	; 1
    24b2:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
          mezzo.TARGA = mezzoString.substring(0, 5);
    24b6:	25 e0       	ldi	r18, 0x05	; 5
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	40 e0       	ldi	r20, 0x00	; 0
    24bc:	50 e0       	ldi	r21, 0x00	; 0
    24be:	be 01       	movw	r22, r28
    24c0:	61 5f       	subi	r22, 0xF1	; 241
    24c2:	7f 4f       	sbci	r23, 0xFF	; 255
    24c4:	ce 01       	movw	r24, r28
    24c6:	01 96       	adiw	r24, 0x01	; 1
    24c8:	0e 94 7c 3d 	call	0x7af8	; 0x7af8 <_ZNK6String9substringEjj>
    24cc:	be 01       	movw	r22, r28
    24ce:	6f 5f       	subi	r22, 0xFF	; 255
    24d0:	7f 4f       	sbci	r23, 0xFF	; 255
    24d2:	8d e7       	ldi	r24, 0x7D	; 125
    24d4:	9b e0       	ldi	r25, 0x0B	; 11
    24d6:	0e 94 9b 3b 	call	0x7736	; 0x7736 <_ZN6StringaSEOS_>
    24da:	ce 01       	movw	r24, r28
    24dc:	01 96       	adiw	r24, 0x01	; 1
    24de:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
          mezzo.KM = "0";
    24e2:	62 e4       	ldi	r22, 0x42	; 66
    24e4:	76 e0       	ldi	r23, 0x06	; 6
    24e6:	83 e8       	ldi	r24, 0x83	; 131
    24e8:	9b e0       	ldi	r25, 0x0B	; 11
    24ea:	0e 94 a6 3b 	call	0x774c	; 0x774c <_ZN6StringaSEPKc>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    24ee:	68 e4       	ldi	r22, 0x48	; 72
    24f0:	77 e0       	ldi	r23, 0x07	; 7
    24f2:	ce 01       	movw	r24, r28
    24f4:	01 96       	adiw	r24, 0x01	; 1
    24f6:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>

          Serial.println("TIPO CARBURANTE: " + mezzo.Carb);
    24fa:	67 e7       	ldi	r22, 0x77	; 119
    24fc:	7b e0       	ldi	r23, 0x0B	; 11
    24fe:	ce 01       	movw	r24, r28
    2500:	01 96       	adiw	r24, 0x01	; 1
    2502:	0e 94 fc 3c 	call	0x79f8	; 0x79f8 <_ZplRK15StringSumHelperRK6String>
    2506:	bc 01       	movw	r22, r24
    2508:	86 e2       	ldi	r24, 0x26	; 38
    250a:	9d e0       	ldi	r25, 0x0D	; 13
    250c:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2510:	ce 01       	movw	r24, r28
    2512:	01 96       	adiw	r24, 0x01	; 1
    2514:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2518:	6a e5       	ldi	r22, 0x5A	; 90
    251a:	77 e0       	ldi	r23, 0x07	; 7
    251c:	ce 01       	movw	r24, r28
    251e:	01 96       	adiw	r24, 0x01	; 1
    2520:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
          Serial.println("TARGA: " + mezzo.TARGA);
    2524:	6d e7       	ldi	r22, 0x7D	; 125
    2526:	7b e0       	ldi	r23, 0x0B	; 11
    2528:	ce 01       	movw	r24, r28
    252a:	01 96       	adiw	r24, 0x01	; 1
    252c:	0e 94 fc 3c 	call	0x79f8	; 0x79f8 <_ZplRK15StringSumHelperRK6String>
    2530:	bc 01       	movw	r22, r24
    2532:	86 e2       	ldi	r24, 0x26	; 38
    2534:	9d e0       	ldi	r25, 0x0D	; 13
    2536:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    253a:	ce 01       	movw	r24, r28
    253c:	01 96       	adiw	r24, 0x01	; 1
    253e:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    2542:	62 ea       	ldi	r22, 0xA2	; 162
    2544:	75 e0       	ldi	r23, 0x05	; 5
    2546:	87 e7       	ldi	r24, 0x77	; 119
    2548:	9b e0       	ldi	r25, 0x0B	; 11
    254a:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <_ZNK6String6equalsEPKc>

//          Carburante = mezzo.Carb;
          if ((mezzo.Carb == "B") || (mezzo.Carb == "D")) {
    254e:	81 11       	cpse	r24, r1
    2550:	3e c4       	rjmp	.+2172   	; 0x2dce <loop+0xedc>
    2552:	60 ea       	ldi	r22, 0xA0	; 160
    2554:	75 e0       	ldi	r23, 0x05	; 5
    2556:	87 e7       	ldi	r24, 0x77	; 119
    2558:	9b e0       	ldi	r25, 0x0B	; 11
    255a:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <_ZNK6String6equalsEPKc>
    255e:	81 11       	cpse	r24, r1
    2560:	36 c4       	rjmp	.+2156   	; 0x2dce <loop+0xedc>
          mezzo.KM = "0";
          distr_selezionato = 0;
          avanzaStato(TselDistributore);
        }
        else {
          String mezzoString = leggiTAG_Mezzo(false); // con TRUE scrive sul blocco 4 della card NFC DEL MEZZO
    2562:	ce 01       	movw	r24, r28
    2564:	0f 96       	adiw	r24, 0x0f	; 15
    2566:	88 c3       	rjmp	.+1808   	; 0x2c78 <loop+0xd86>
        }
      }
      break;
    case 4:
      {
        lcd.setCursor(0, 0);
    2568:	40 e0       	ldi	r20, 0x00	; 0
    256a:	60 e0       	ldi	r22, 0x00	; 0
    256c:	85 e5       	ldi	r24, 0x55	; 85
    256e:	9b e0       	ldi	r25, 0x0B	; 11
    2570:	0e 94 a6 2f 	call	0x5f4c	; 0x5f4c <_ZN3LCD9setCursorEhh>
        lcd.print((char)1);  // STAMPA LA CLESSIDRA
    2574:	61 e0       	ldi	r22, 0x01	; 1
    2576:	85 e5       	ldi	r24, 0x55	; 85
    2578:	9b e0       	ldi	r25, 0x0B	; 11
    257a:	0e 94 62 38 	call	0x70c4	; 0x70c4 <_ZN5Print5printEc>
        lcd.print("Tempo: " + String((UltimoPassaggioStato + Timer - secs - 1)) + " sec ");
    257e:	40 91 97 0a 	lds	r20, 0x0A97	; 0x800a97 <UltimoPassaggioStato>
    2582:	50 91 98 0a 	lds	r21, 0x0A98	; 0x800a98 <UltimoPassaggioStato+0x1>
    2586:	60 91 99 0a 	lds	r22, 0x0A99	; 0x800a99 <UltimoPassaggioStato+0x2>
    258a:	70 91 9a 0a 	lds	r23, 0x0A9A	; 0x800a9a <UltimoPassaggioStato+0x3>
    258e:	80 91 93 0a 	lds	r24, 0x0A93	; 0x800a93 <Timer>
    2592:	90 91 94 0a 	lds	r25, 0x0A94	; 0x800a94 <Timer+0x1>
    2596:	a0 91 95 0a 	lds	r26, 0x0A95	; 0x800a95 <Timer+0x2>
    259a:	b0 91 96 0a 	lds	r27, 0x0A96	; 0x800a96 <Timer+0x3>
    259e:	48 0f       	add	r20, r24
    25a0:	59 1f       	adc	r21, r25
    25a2:	6a 1f       	adc	r22, r26
    25a4:	7b 1f       	adc	r23, r27
    25a6:	41 50       	subi	r20, 0x01	; 1
    25a8:	51 09       	sbc	r21, r1
    25aa:	61 09       	sbc	r22, r1
    25ac:	71 09       	sbc	r23, r1
    25ae:	80 91 9b 0a 	lds	r24, 0x0A9B	; 0x800a9b <secs>
    25b2:	90 91 9c 0a 	lds	r25, 0x0A9C	; 0x800a9c <secs+0x1>
    25b6:	a0 91 9d 0a 	lds	r26, 0x0A9D	; 0x800a9d <secs+0x2>
    25ba:	b0 91 9e 0a 	lds	r27, 0x0A9E	; 0x800a9e <secs+0x3>
    25be:	48 1b       	sub	r20, r24
    25c0:	59 0b       	sbc	r21, r25
    25c2:	6a 0b       	sbc	r22, r26
    25c4:	7b 0b       	sbc	r23, r27
    25c6:	2a e0       	ldi	r18, 0x0A	; 10
    25c8:	ce 01       	movw	r24, r28
    25ca:	0f 96       	adiw	r24, 0x0f	; 15
    25cc:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_ZN6StringC1Emh>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    25d0:	64 e6       	ldi	r22, 0x64	; 100
    25d2:	77 e0       	ldi	r23, 0x07	; 7
    25d4:	ce 01       	movw	r24, r28
    25d6:	01 96       	adiw	r24, 0x01	; 1
    25d8:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
    25dc:	be 01       	movw	r22, r28
    25de:	61 5f       	subi	r22, 0xF1	; 241
    25e0:	7f 4f       	sbci	r23, 0xFF	; 255
    25e2:	ce 01       	movw	r24, r28
    25e4:	01 96       	adiw	r24, 0x01	; 1
    25e6:	0e 94 fc 3c 	call	0x79f8	; 0x79f8 <_ZplRK15StringSumHelperRK6String>
    25ea:	62 e4       	ldi	r22, 0x42	; 66
    25ec:	77 e0       	ldi	r23, 0x07	; 7
    25ee:	0e 94 0d 3d 	call	0x7a1a	; 0x7a1a <_ZplRK15StringSumHelperPKc>
    25f2:	bc 01       	movw	r22, r24
    25f4:	85 e5       	ldi	r24, 0x55	; 85
    25f6:	9b e0       	ldi	r25, 0x0B	; 11
    25f8:	0e 94 53 38 	call	0x70a6	; 0x70a6 <_ZN5Print5printERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    25fc:	ce 01       	movw	r24, r28
    25fe:	01 96       	adiw	r24, 0x01	; 1
    2600:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
    2604:	ce 01       	movw	r24, r28
    2606:	0f 96       	adiw	r24, 0x0f	; 15
    2608:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    260c:	62 ea       	ldi	r22, 0xA2	; 162
    260e:	75 e0       	ldi	r23, 0x05	; 5
    2610:	87 e7       	ldi	r24, 0x77	; 119
    2612:	9b e0       	ldi	r25, 0x0B	; 11
    2614:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <_ZNK6String6equalsEPKc>

        // Verifica scelta distributore

        if ((mezzo.Carb == "B") || (distr_selezionato == 2))
    2618:	81 11       	cpse	r24, r1
    261a:	10 c4       	rjmp	.+2080   	; 0x2e3c <loop+0xf4a>
    261c:	80 91 2b 0b 	lds	r24, 0x0B2B	; 0x800b2b <distr_selezionato>
    2620:	82 30       	cpi	r24, 0x02	; 2
    2622:	09 f0       	breq	.+2      	; 0x2626 <loop+0x734>
    2624:	40 c4       	rjmp	.+2176   	; 0x2ea6 <loop+0xfb4>
    2626:	0a c4       	rjmp	.+2068   	; 0x2e3c <loop+0xf4a>
        }
      }
      break;
    case 5:
      {
        lcd.setCursor(0, 0);
    2628:	40 e0       	ldi	r20, 0x00	; 0
    262a:	60 e0       	ldi	r22, 0x00	; 0
    262c:	85 e5       	ldi	r24, 0x55	; 85
    262e:	9b e0       	ldi	r25, 0x0B	; 11
    2630:	0e 94 a6 2f 	call	0x5f4c	; 0x5f4c <_ZN3LCD9setCursorEhh>
        lcd.print((char)1);  // STAMPA LA CLESSIDRA
    2634:	61 e0       	ldi	r22, 0x01	; 1
    2636:	85 e5       	ldi	r24, 0x55	; 85
    2638:	9b e0       	ldi	r25, 0x0B	; 11
    263a:	0e 94 62 38 	call	0x70c4	; 0x70c4 <_ZN5Print5printEc>
        lcd.print("Tempo: " + String((UltimoPassaggioStato + Timer - secs - 1)) + " sec ");
    263e:	40 91 97 0a 	lds	r20, 0x0A97	; 0x800a97 <UltimoPassaggioStato>
    2642:	50 91 98 0a 	lds	r21, 0x0A98	; 0x800a98 <UltimoPassaggioStato+0x1>
    2646:	60 91 99 0a 	lds	r22, 0x0A99	; 0x800a99 <UltimoPassaggioStato+0x2>
    264a:	70 91 9a 0a 	lds	r23, 0x0A9A	; 0x800a9a <UltimoPassaggioStato+0x3>
    264e:	80 91 93 0a 	lds	r24, 0x0A93	; 0x800a93 <Timer>
    2652:	90 91 94 0a 	lds	r25, 0x0A94	; 0x800a94 <Timer+0x1>
    2656:	a0 91 95 0a 	lds	r26, 0x0A95	; 0x800a95 <Timer+0x2>
    265a:	b0 91 96 0a 	lds	r27, 0x0A96	; 0x800a96 <Timer+0x3>
    265e:	48 0f       	add	r20, r24
    2660:	59 1f       	adc	r21, r25
    2662:	6a 1f       	adc	r22, r26
    2664:	7b 1f       	adc	r23, r27
    2666:	41 50       	subi	r20, 0x01	; 1
    2668:	51 09       	sbc	r21, r1
    266a:	61 09       	sbc	r22, r1
    266c:	71 09       	sbc	r23, r1
    266e:	80 91 9b 0a 	lds	r24, 0x0A9B	; 0x800a9b <secs>
    2672:	90 91 9c 0a 	lds	r25, 0x0A9C	; 0x800a9c <secs+0x1>
    2676:	a0 91 9d 0a 	lds	r26, 0x0A9D	; 0x800a9d <secs+0x2>
    267a:	b0 91 9e 0a 	lds	r27, 0x0A9E	; 0x800a9e <secs+0x3>
    267e:	48 1b       	sub	r20, r24
    2680:	59 0b       	sbc	r21, r25
    2682:	6a 0b       	sbc	r22, r26
    2684:	7b 0b       	sbc	r23, r27
    2686:	2a e0       	ldi	r18, 0x0A	; 10
    2688:	ce 01       	movw	r24, r28
    268a:	0f 96       	adiw	r24, 0x0f	; 15
    268c:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_ZN6StringC1Emh>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2690:	64 e6       	ldi	r22, 0x64	; 100
    2692:	77 e0       	ldi	r23, 0x07	; 7
    2694:	ce 01       	movw	r24, r28
    2696:	01 96       	adiw	r24, 0x01	; 1
    2698:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
    269c:	be 01       	movw	r22, r28
    269e:	61 5f       	subi	r22, 0xF1	; 241
    26a0:	7f 4f       	sbci	r23, 0xFF	; 255
    26a2:	ce 01       	movw	r24, r28
    26a4:	01 96       	adiw	r24, 0x01	; 1
    26a6:	0e 94 fc 3c 	call	0x79f8	; 0x79f8 <_ZplRK15StringSumHelperRK6String>
    26aa:	62 e4       	ldi	r22, 0x42	; 66
    26ac:	77 e0       	ldi	r23, 0x07	; 7
    26ae:	0e 94 0d 3d 	call	0x7a1a	; 0x7a1a <_ZplRK15StringSumHelperPKc>
    26b2:	bc 01       	movw	r22, r24
    26b4:	85 e5       	ldi	r24, 0x55	; 85
    26b6:	9b e0       	ldi	r25, 0x0B	; 11
    26b8:	0e 94 53 38 	call	0x70a6	; 0x70a6 <_ZN5Print5printERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    26bc:	ce 01       	movw	r24, r28
    26be:	01 96       	adiw	r24, 0x01	; 1
    26c0:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
    26c4:	ce 01       	movw	r24, r28
    26c6:	0f 96       	adiw	r24, 0x0f	; 15
    26c8:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
        // RaccoltaDati[4] = "1234";        
        /*****************************************************************/
        gpio.setCONFREG(0x3C);
    26cc:	6c e3       	ldi	r22, 0x3C	; 60
    26ce:	8e e7       	ldi	r24, 0x7E	; 126
    26d0:	9a e0       	ldi	r25, 0x0A	; 10
    26d2:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <_ZN7PCA953410setCONFREGEh>
        uint8_t c = gpio.Read_IP_REGISTER();
    26d6:	8e e7       	ldi	r24, 0x7E	; 126
    26d8:	9a e0       	ldi	r25, 0x0A	; 10
    26da:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <_ZN7PCA953416Read_IP_REGISTEREv>
    26de:	e8 2e       	mov	r14, r24
    26e0:	42 e0       	ldi	r20, 0x02	; 2
    26e2:	be 01       	movw	r22, r28
    26e4:	69 5e       	subi	r22, 0xE9	; 233
    26e6:	7f 4f       	sbci	r23, 0xFF	; 255
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	0e 94 fb 41 	call	0x83f6	; 0x83f6 <__itoa_ncheck>
        char buf[8];
        itoa(c, buf, 2);
        gpio.setCONFREG(0xC3);
    26ee:	63 ec       	ldi	r22, 0xC3	; 195
    26f0:	8e e7       	ldi	r24, 0x7E	; 126
    26f2:	9a e0       	ldi	r25, 0x0A	; 10
    26f4:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <_ZN7PCA953410setCONFREGEh>
        uint8_t r = gpio.Read_IP_REGISTER();
    26f8:	8e e7       	ldi	r24, 0x7E	; 126
    26fa:	9a e0       	ldi	r25, 0x0A	; 10
    26fc:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <_ZN7PCA953416Read_IP_REGISTEREv>
    2700:	f8 2e       	mov	r15, r24
    2702:	42 e0       	ldi	r20, 0x02	; 2
    2704:	be 01       	movw	r22, r28
    2706:	61 5f       	subi	r22, 0xF1	; 241
    2708:	7f 4f       	sbci	r23, 0xFF	; 255
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	0e 94 fb 41 	call	0x83f6	; 0x83f6 <__itoa_ncheck>
        char bufr[8];
        itoa(r, bufr, 2);
        char ris[8];
        uint8_t z = (r ^ c);
        itoa(z, ris, 2);
    2710:	fe 24       	eor	r15, r14
    2712:	ef 2c       	mov	r14, r15
    2714:	f1 2c       	mov	r15, r1
    2716:	42 e0       	ldi	r20, 0x02	; 2
    2718:	be 01       	movw	r22, r28
    271a:	6f 5f       	subi	r22, 0xFF	; 255
    271c:	7f 4f       	sbci	r23, 0xFF	; 255
    271e:	c7 01       	movw	r24, r14
    2720:	0e 94 fb 41 	call	0x83f6	; 0x83f6 <__itoa_ncheck>
        char K = getCharKeypad(int(z));
    2724:	c7 01       	movw	r24, r14
    2726:	0e 94 86 02 	call	0x50c	; 0x50c <_Z13getCharKeypadi>
    272a:	9f ef       	ldi	r25, 0xFF	; 255
    272c:	29 ef       	ldi	r18, 0xF9	; 249
    272e:	30 e0       	ldi	r19, 0x00	; 0
    2730:	91 50       	subi	r25, 0x01	; 1
    2732:	20 40       	sbci	r18, 0x00	; 0
    2734:	30 40       	sbci	r19, 0x00	; 0
    2736:	e1 f7       	brne	.-8      	; 0x2730 <loop+0x83e>
    2738:	00 c0       	rjmp	.+0      	; 0x273a <loop+0x848>
        _delay_ms(20);
        /*****************************************************************/

        inputKM(K);
    273a:	00 00       	nop
    273c:	3c d8       	rcall	.-3976   	; 0x17b6 <_Z7inputKMc>
        impulsi = 0;
    273e:	10 92 2d 0b 	sts	0x0B2D, r1	; 0x800b2d <impulsi+0x1>
    2742:	10 92 2c 0b 	sts	0x0B2C, r1	; 0x800b2c <impulsi>
      }
      break;
    2746:	9a c2       	rjmp	.+1332   	; 0x2c7c <loop+0xd8a>
    case 6:
      {
        lcd.setCursor(0, 0);
    2748:	40 e0       	ldi	r20, 0x00	; 0
    274a:	60 e0       	ldi	r22, 0x00	; 0
    274c:	85 e5       	ldi	r24, 0x55	; 85
    274e:	9b e0       	ldi	r25, 0x0B	; 11
    2750:	0e 94 a6 2f 	call	0x5f4c	; 0x5f4c <_ZN3LCD9setCursorEhh>
        lcd.print((char)1);  // STAMPA LA CLESSIDRA
    2754:	61 e0       	ldi	r22, 0x01	; 1
    2756:	85 e5       	ldi	r24, 0x55	; 85
    2758:	9b e0       	ldi	r25, 0x0B	; 11
    275a:	0e 94 62 38 	call	0x70c4	; 0x70c4 <_ZN5Print5printEc>
        lcd.print("  Tempo: " + String((UltimoPassaggioStato + Timer - secs - 1)) + " sec ");
    275e:	40 91 97 0a 	lds	r20, 0x0A97	; 0x800a97 <UltimoPassaggioStato>
    2762:	50 91 98 0a 	lds	r21, 0x0A98	; 0x800a98 <UltimoPassaggioStato+0x1>
    2766:	60 91 99 0a 	lds	r22, 0x0A99	; 0x800a99 <UltimoPassaggioStato+0x2>
    276a:	70 91 9a 0a 	lds	r23, 0x0A9A	; 0x800a9a <UltimoPassaggioStato+0x3>
    276e:	80 91 93 0a 	lds	r24, 0x0A93	; 0x800a93 <Timer>
    2772:	90 91 94 0a 	lds	r25, 0x0A94	; 0x800a94 <Timer+0x1>
    2776:	a0 91 95 0a 	lds	r26, 0x0A95	; 0x800a95 <Timer+0x2>
    277a:	b0 91 96 0a 	lds	r27, 0x0A96	; 0x800a96 <Timer+0x3>
    277e:	48 0f       	add	r20, r24
    2780:	59 1f       	adc	r21, r25
    2782:	6a 1f       	adc	r22, r26
    2784:	7b 1f       	adc	r23, r27
    2786:	41 50       	subi	r20, 0x01	; 1
    2788:	51 09       	sbc	r21, r1
    278a:	61 09       	sbc	r22, r1
    278c:	71 09       	sbc	r23, r1
    278e:	80 91 9b 0a 	lds	r24, 0x0A9B	; 0x800a9b <secs>
    2792:	90 91 9c 0a 	lds	r25, 0x0A9C	; 0x800a9c <secs+0x1>
    2796:	a0 91 9d 0a 	lds	r26, 0x0A9D	; 0x800a9d <secs+0x2>
    279a:	b0 91 9e 0a 	lds	r27, 0x0A9E	; 0x800a9e <secs+0x3>
    279e:	48 1b       	sub	r20, r24
    27a0:	59 0b       	sbc	r21, r25
    27a2:	6a 0b       	sbc	r22, r26
    27a4:	7b 0b       	sbc	r23, r27
    27a6:	2a e0       	ldi	r18, 0x0A	; 10
    27a8:	ce 01       	movw	r24, r28
    27aa:	0f 96       	adiw	r24, 0x0f	; 15
    27ac:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_ZN6StringC1Emh>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    27b0:	62 e6       	ldi	r22, 0x62	; 98
    27b2:	77 e0       	ldi	r23, 0x07	; 7
    27b4:	ce 01       	movw	r24, r28
    27b6:	01 96       	adiw	r24, 0x01	; 1
    27b8:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
    27bc:	be 01       	movw	r22, r28
    27be:	61 5f       	subi	r22, 0xF1	; 241
    27c0:	7f 4f       	sbci	r23, 0xFF	; 255
    27c2:	ce 01       	movw	r24, r28
    27c4:	01 96       	adiw	r24, 0x01	; 1
    27c6:	0e 94 fc 3c 	call	0x79f8	; 0x79f8 <_ZplRK15StringSumHelperRK6String>
    27ca:	62 e4       	ldi	r22, 0x42	; 66
    27cc:	77 e0       	ldi	r23, 0x07	; 7
    27ce:	0e 94 0d 3d 	call	0x7a1a	; 0x7a1a <_ZplRK15StringSumHelperPKc>
    27d2:	bc 01       	movw	r22, r24
    27d4:	85 e5       	ldi	r24, 0x55	; 85
    27d6:	9b e0       	ldi	r25, 0x0B	; 11
    27d8:	0e 94 53 38 	call	0x70a6	; 0x70a6 <_ZN5Print5printERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    27dc:	ce 01       	movw	r24, r28
    27de:	01 96       	adiw	r24, 0x01	; 1
    27e0:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
    27e4:	ce 01       	movw	r24, r28
    27e6:	0f 96       	adiw	r24, 0x0f	; 15
    27e8:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
          disable_ETH();
          _delay_ms(2);
          enable_ETH();
          /*****************************************************************/

        double lt = impulsiToLitri(impulsi);
    27ec:	80 91 2c 0b 	lds	r24, 0x0B2C	; 0x800b2c <impulsi>
    27f0:	90 91 2d 0b 	lds	r25, 0x0B2D	; 0x800b2d <impulsi+0x1>
    27f4:	0e 94 65 09 	call	0x12ca	; 0x12ca <_Z14impulsiToLitrii>
    27f8:	6b 01       	movw	r12, r22
    27fa:	7c 01       	movw	r14, r24

        righeDisplay[1] = "LITRI :" + String(lt);
    27fc:	22 e0       	ldi	r18, 0x02	; 2
    27fe:	ab 01       	movw	r20, r22
    2800:	bc 01       	movw	r22, r24
    2802:	ce 01       	movw	r24, r28
    2804:	0f 96       	adiw	r24, 0x0f	; 15
    2806:	0e 94 7c 3c 	call	0x78f8	; 0x78f8 <_ZN6StringC1Edh>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    280a:	6c e6       	ldi	r22, 0x6C	; 108
    280c:	77 e0       	ldi	r23, 0x07	; 7
    280e:	ce 01       	movw	r24, r28
    2810:	01 96       	adiw	r24, 0x01	; 1
    2812:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
    2816:	be 01       	movw	r22, r28
    2818:	61 5f       	subi	r22, 0xF1	; 241
    281a:	7f 4f       	sbci	r23, 0xFF	; 255
    281c:	ce 01       	movw	r24, r28
    281e:	01 96       	adiw	r24, 0x01	; 1
    2820:	0e 94 fc 3c 	call	0x79f8	; 0x79f8 <_ZplRK15StringSumHelperRK6String>
    2824:	bc 01       	movw	r22, r24
    2826:	83 ee       	ldi	r24, 0xE3	; 227
    2828:	9a e0       	ldi	r25, 0x0A	; 10
    282a:	0e 94 7e 3b 	call	0x76fc	; 0x76fc <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    282e:	ce 01       	movw	r24, r28
    2830:	01 96       	adiw	r24, 0x01	; 1
    2832:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
    2836:	ce 01       	movw	r24, r28
    2838:	0f 96       	adiw	r24, 0x0f	; 15
    283a:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
        righeDisplay[2] = "imp :" + String(impulsi);
    283e:	60 91 2c 0b 	lds	r22, 0x0B2C	; 0x800b2c <impulsi>
    2842:	70 91 2d 0b 	lds	r23, 0x0B2D	; 0x800b2d <impulsi+0x1>
    2846:	4a e0       	ldi	r20, 0x0A	; 10
    2848:	ce 01       	movw	r24, r28
    284a:	0f 96       	adiw	r24, 0x0f	; 15
    284c:	0e 94 fd 3b 	call	0x77fa	; 0x77fa <_ZN6StringC1Eih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2850:	64 e4       	ldi	r22, 0x44	; 68
    2852:	76 e0       	ldi	r23, 0x06	; 6
    2854:	ce 01       	movw	r24, r28
    2856:	01 96       	adiw	r24, 0x01	; 1
    2858:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
    285c:	be 01       	movw	r22, r28
    285e:	61 5f       	subi	r22, 0xF1	; 241
    2860:	7f 4f       	sbci	r23, 0xFF	; 255
    2862:	ce 01       	movw	r24, r28
    2864:	01 96       	adiw	r24, 0x01	; 1
    2866:	0e 94 fc 3c 	call	0x79f8	; 0x79f8 <_ZplRK15StringSumHelperRK6String>
    286a:	bc 01       	movw	r22, r24
    286c:	89 ee       	ldi	r24, 0xE9	; 233
    286e:	9a e0       	ldi	r25, 0x0A	; 10
    2870:	0e 94 7e 3b 	call	0x76fc	; 0x76fc <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2874:	ce 01       	movw	r24, r28
    2876:	01 96       	adiw	r24, 0x01	; 1
    2878:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
    287c:	ce 01       	movw	r24, r28
    287e:	0f 96       	adiw	r24, 0x0f	; 15
    2880:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2884:	6a e4       	ldi	r22, 0x4A	; 74
    2886:	76 e0       	ldi	r23, 0x06	; 6
    2888:	ce 01       	movw	r24, r28
    288a:	01 96       	adiw	r24, 0x01	; 1
    288c:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
        righeDisplay[3] = "Erogazione: " + StatoAttuale;
    2890:	68 e3       	ldi	r22, 0x38	; 56
    2892:	7b e0       	ldi	r23, 0x0B	; 11
    2894:	ce 01       	movw	r24, r28
    2896:	01 96       	adiw	r24, 0x01	; 1
    2898:	0e 94 fc 3c 	call	0x79f8	; 0x79f8 <_ZplRK15StringSumHelperRK6String>
    289c:	bc 01       	movw	r22, r24
    289e:	8f ee       	ldi	r24, 0xEF	; 239
    28a0:	9a e0       	ldi	r25, 0x0A	; 10
    28a2:	0e 94 7e 3b 	call	0x76fc	; 0x76fc <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    28a6:	ce 01       	movw	r24, r28
    28a8:	01 96       	adiw	r24, 0x01	; 1
    28aa:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>

        lcd.setCursor(0, 1);
    28ae:	41 e0       	ldi	r20, 0x01	; 1
    28b0:	60 e0       	ldi	r22, 0x00	; 0
    28b2:	85 e5       	ldi	r24, 0x55	; 85
    28b4:	9b e0       	ldi	r25, 0x0B	; 11
    28b6:	0e 94 a6 2f 	call	0x5f4c	; 0x5f4c <_ZN3LCD9setCursorEhh>
        lcd.print(righeDisplay[1]);
    28ba:	63 ee       	ldi	r22, 0xE3	; 227
    28bc:	7a e0       	ldi	r23, 0x0A	; 10
    28be:	85 e5       	ldi	r24, 0x55	; 85
    28c0:	9b e0       	ldi	r25, 0x0B	; 11
    28c2:	0e 94 53 38 	call	0x70a6	; 0x70a6 <_ZN5Print5printERK6String>
        lcd.setCursor(0, 2);
    28c6:	42 e0       	ldi	r20, 0x02	; 2
    28c8:	60 e0       	ldi	r22, 0x00	; 0
    28ca:	85 e5       	ldi	r24, 0x55	; 85
    28cc:	9b e0       	ldi	r25, 0x0B	; 11
    28ce:	0e 94 a6 2f 	call	0x5f4c	; 0x5f4c <_ZN3LCD9setCursorEhh>
        lcd.print(righeDisplay[2]);
    28d2:	69 ee       	ldi	r22, 0xE9	; 233
    28d4:	7a e0       	ldi	r23, 0x0A	; 10
    28d6:	85 e5       	ldi	r24, 0x55	; 85
    28d8:	9b e0       	ldi	r25, 0x0B	; 11
    28da:	0e 94 53 38 	call	0x70a6	; 0x70a6 <_ZN5Print5printERK6String>
        lcd.setCursor(0, 3);
    28de:	43 e0       	ldi	r20, 0x03	; 3
    28e0:	60 e0       	ldi	r22, 0x00	; 0
    28e2:	85 e5       	ldi	r24, 0x55	; 85
    28e4:	9b e0       	ldi	r25, 0x0B	; 11
    28e6:	0e 94 a6 2f 	call	0x5f4c	; 0x5f4c <_ZN3LCD9setCursorEhh>
        lcd.print(righeDisplay[3]);
    28ea:	6f ee       	ldi	r22, 0xEF	; 239
    28ec:	7a e0       	ldi	r23, 0x0A	; 10
    28ee:	85 e5       	ldi	r24, 0x55	; 85
    28f0:	9b e0       	ldi	r25, 0x0B	; 11
    28f2:	0e 94 53 38 	call	0x70a6	; 0x70a6 <_ZN5Print5printERK6String>

        // CONTATTO PISTOLA DIESEL

        if ((PINA & _BV(PA1)) && (mezzo.Carb == "D"))
    28f6:	01 9b       	sbis	0x00, 1	; 0
    28f8:	08 c0       	rjmp	.+16     	; 0x290a <loop+0xa18>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    28fa:	60 ea       	ldi	r22, 0xA0	; 160
    28fc:	75 e0       	ldi	r23, 0x05	; 5
    28fe:	87 e7       	ldi	r24, 0x77	; 119
    2900:	9b e0       	ldi	r25, 0x0B	; 11
    2902:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <_ZNK6String6equalsEPKc>
    2906:	81 11       	cpse	r24, r1
    2908:	1a c3       	rjmp	.+1588   	; 0x2f3e <loop+0x104c>
          avanzaStato(TmaxInviodati);
        }

        // CONTATTO PISTOLA BENZINA

        if  ((PINB & _BV(PB1)) && (mezzo.Carb == "B"))
    290a:	19 9b       	sbis	0x03, 1	; 3
    290c:	b7 c1       	rjmp	.+878    	; 0x2c7c <loop+0xd8a>
    290e:	62 ea       	ldi	r22, 0xA2	; 162
    2910:	75 e0       	ldi	r23, 0x05	; 5
    2912:	87 e7       	ldi	r24, 0x77	; 119
    2914:	9b e0       	ldi	r25, 0x0B	; 11
    2916:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <_ZNK6String6equalsEPKc>
    291a:	81 11       	cpse	r24, r1
    291c:	3f c3       	rjmp	.+1662   	; 0x2f9c <loop+0x10aa>
    291e:	ae c1       	rjmp	.+860    	; 0x2c7c <loop+0xd8a>
        }
      }
      break;
    case 7 :
      {
        righeDisplay[1] =  "";
    2920:	62 e4       	ldi	r22, 0x42	; 66
    2922:	72 e0       	ldi	r23, 0x02	; 2
    2924:	83 ee       	ldi	r24, 0xE3	; 227
    2926:	9a e0       	ldi	r25, 0x0A	; 10
    2928:	0e 94 a6 3b 	call	0x774c	; 0x774c <_ZN6StringaSEPKc>
        righeDisplay[2] = "Invio........";
    292c:	64 e7       	ldi	r22, 0x74	; 116
    292e:	77 e0       	ldi	r23, 0x07	; 7
    2930:	89 ee       	ldi	r24, 0xE9	; 233
    2932:	9a e0       	ldi	r25, 0x0A	; 10
    2934:	0e 94 a6 3b 	call	0x774c	; 0x774c <_ZN6StringaSEPKc>
        righeDisplay[3] =  "";      
    2938:	62 e4       	ldi	r22, 0x42	; 66
    293a:	72 e0       	ldi	r23, 0x02	; 2
    293c:	8f ee       	ldi	r24, 0xEF	; 239
    293e:	9a e0       	ldi	r25, 0x0A	; 10
    2940:	0e 94 a6 3b 	call	0x774c	; 0x774c <_ZN6StringaSEPKc>
        displayLCD(righeDisplay, stato_procedura, 100);
    2944:	60 91 2e 0b 	lds	r22, 0x0B2E	; 0x800b2e <stato_procedura>
    2948:	70 91 2f 0b 	lds	r23, 0x0B2F	; 0x800b2f <stato_procedura+0x1>
    294c:	44 e6       	ldi	r20, 0x64	; 100
    294e:	50 e0       	ldi	r21, 0x00	; 0
    2950:	8d ed       	ldi	r24, 0xDD	; 221
    2952:	9a e0       	ldi	r25, 0x0A	; 10
    2954:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <_Z10displayLCDP6Stringii>
        Messaggio = "";
    2958:	62 e4       	ldi	r22, 0x42	; 66
    295a:	72 e0       	ldi	r23, 0x02	; 2
    295c:	85 ef       	ldi	r24, 0xF5	; 245
    295e:	9a e0       	ldi	r25, 0x0A	; 10
    2960:	0e 94 a6 3b 	call	0x774c	; 0x774c <_ZN6StringaSEPKc>
    2964:	01 e0       	ldi	r16, 0x01	; 1
    2966:	1b e0       	ldi	r17, 0x0B	; 11
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
    2968:	b8 01       	movw	r22, r16
    296a:	ce 01       	movw	r24, r28
    296c:	01 96       	adiw	r24, 0x01	; 1
    296e:	0e 94 93 3b 	call	0x7726	; 0x7726 <_ZN6StringC1ERKS_>

        for (int k = 0; k < 6; k++)
          Messaggio.concat(RaccoltaDati[k] + ";");
    2972:	62 e8       	ldi	r22, 0x82	; 130
    2974:	77 e0       	ldi	r23, 0x07	; 7
    2976:	ce 01       	movw	r24, r28
    2978:	01 96       	adiw	r24, 0x01	; 1
    297a:	0e 94 0d 3d 	call	0x7a1a	; 0x7a1a <_ZplRK15StringSumHelperPKc>
    297e:	bc 01       	movw	r22, r24
    2980:	85 ef       	ldi	r24, 0xF5	; 245
    2982:	9a e0       	ldi	r25, 0x0A	; 10
    2984:	0e 94 d6 3c 	call	0x79ac	; 0x79ac <_ZN6String6concatERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2988:	ce 01       	movw	r24, r28
    298a:	01 96       	adiw	r24, 0x01	; 1
    298c:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
    2990:	0a 5f       	subi	r16, 0xFA	; 250
    2992:	1f 4f       	sbci	r17, 0xFF	; 255
        righeDisplay[2] = "Invio........";
        righeDisplay[3] =  "";      
        displayLCD(righeDisplay, stato_procedura, 100);
        Messaggio = "";

        for (int k = 0; k < 6; k++)
    2994:	8b e0       	ldi	r24, 0x0B	; 11
    2996:	05 32       	cpi	r16, 0x25	; 37
    2998:	18 07       	cpc	r17, r24
    299a:	31 f7       	brne	.-52     	; 0x2968 <loop+0xa76>
          Messaggio.concat(RaccoltaDati[k] + ";");

        Messaggio.concat(CodSede);
    299c:	62 e4       	ldi	r22, 0x42	; 66
    299e:	71 e0       	ldi	r23, 0x01	; 1
    29a0:	85 ef       	ldi	r24, 0xF5	; 245
    29a2:	9a e0       	ldi	r25, 0x0A	; 10
    29a4:	0e 94 dc 3c 	call	0x79b8	; 0x79b8 <_ZN6String6concatEPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    29a8:	64 e8       	ldi	r22, 0x84	; 132
    29aa:	77 e0       	ldi	r23, 0x07	; 7
    29ac:	ce 01       	movw	r24, r28
    29ae:	01 96       	adiw	r24, 0x01	; 1
    29b0:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
        Serial.println("Messaggio:" + Messaggio);
    29b4:	65 ef       	ldi	r22, 0xF5	; 245
    29b6:	7a e0       	ldi	r23, 0x0A	; 10
    29b8:	ce 01       	movw	r24, r28
    29ba:	01 96       	adiw	r24, 0x01	; 1
    29bc:	0e 94 fc 3c 	call	0x79f8	; 0x79f8 <_ZplRK15StringSumHelperRK6String>
    29c0:	bc 01       	movw	r22, r24
    29c2:	86 e2       	ldi	r24, 0x26	; 38
    29c4:	9d e0       	ldi	r25, 0x0D	; 13
    29c6:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    29ca:	ce 01       	movw	r24, r28
    29cc:	01 96       	adiw	r24, 0x01	; 1
    29ce:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
         // Messaggio = "DD92743A;28530;D;15.03;1234;000;SA10012";
          /*****************************************************************/
          disable_ETH();
    29d2:	0e 94 93 01 	call	0x326	; 0x326 <_ZL11disable_ETHv>
    29d6:	8f e3       	ldi	r24, 0x3F	; 63
    29d8:	9f e1       	ldi	r25, 0x1F	; 31
    29da:	01 97       	sbiw	r24, 0x01	; 1
    29dc:	f1 f7       	brne	.-4      	; 0x29da <loop+0xae8>
    29de:	00 c0       	rjmp	.+0      	; 0x29e0 <loop+0xaee>
    29e0:	00 00       	nop
          _delay_ms(2);
          enable_ETH();
    29e2:	0e 94 91 01 	call	0x322	; 0x322 <_ZL10enable_ETHv>
    29e6:	9f ef       	ldi	r25, 0xFF	; 255
    29e8:	23 ed       	ldi	r18, 0xD3	; 211
    29ea:	30 e3       	ldi	r19, 0x30	; 48
    29ec:	91 50       	subi	r25, 0x01	; 1
    29ee:	20 40       	sbci	r18, 0x00	; 0
    29f0:	30 40       	sbci	r19, 0x00	; 0
    29f2:	e1 f7       	brne	.-8      	; 0x29ec <loop+0xafa>
    29f4:	00 c0       	rjmp	.+0      	; 0x29f6 <loop+0xb04>
    29f6:	00 00       	nop
          /*****************************************************************/
          _delay_ms(1000);
          avanzaStato(30); 
    29f8:	6e e1       	ldi	r22, 0x1E	; 30
    29fa:	70 e0       	ldi	r23, 0x00	; 0
    29fc:	80 e0       	ldi	r24, 0x00	; 0
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	f9 c2       	rjmp	.+1522   	; 0x2ff4 <loop+0x1102>
      }
      break;
    case 8:
      {        
        if (BIT_IS_CLEAR(PORTC, 4))
    2a02:	44 99       	sbic	0x08, 4	; 8
    2a04:	3b c1       	rjmp	.+630    	; 0x2c7c <loop+0xd8a>
        {
          displayLCD(righeDisplay, stato_procedura, 10);
    2a06:	4a e0       	ldi	r20, 0x0A	; 10
    2a08:	50 e0       	ldi	r21, 0x00	; 0
    2a0a:	68 e0       	ldi	r22, 0x08	; 8
    2a0c:	70 e0       	ldi	r23, 0x00	; 0
    2a0e:	8d ed       	ldi	r24, 0xDD	; 221
    2a10:	9a e0       	ldi	r25, 0x0A	; 10
    2a12:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <_Z10displayLCDP6Stringii>
          Messaggio = "";
    2a16:	62 e4       	ldi	r22, 0x42	; 66
    2a18:	72 e0       	ldi	r23, 0x02	; 2
    2a1a:	85 ef       	ldi	r24, 0xF5	; 245
    2a1c:	9a e0       	ldi	r25, 0x0A	; 10
    2a1e:	0e 94 a6 3b 	call	0x774c	; 0x774c <_ZN6StringaSEPKc>
    2a22:	01 e0       	ldi	r16, 0x01	; 1
    2a24:	1b e0       	ldi	r17, 0x0B	; 11
    2a26:	95 e2       	ldi	r25, 0x25	; 37
    2a28:	e9 2e       	mov	r14, r25
    2a2a:	9b e0       	ldi	r25, 0x0B	; 11
    2a2c:	f9 2e       	mov	r15, r25
{
public:
	StringSumHelper(const String &s) : String(s) {}
    2a2e:	b8 01       	movw	r22, r16
    2a30:	ce 01       	movw	r24, r28
    2a32:	01 96       	adiw	r24, 0x01	; 1
    2a34:	0e 94 93 3b 	call	0x7726	; 0x7726 <_ZN6StringC1ERKS_>

          for (int k = 0; k < 6; k++)
            Messaggio.concat(RaccoltaDati[k] + ";");
    2a38:	62 e8       	ldi	r22, 0x82	; 130
    2a3a:	77 e0       	ldi	r23, 0x07	; 7
    2a3c:	ce 01       	movw	r24, r28
    2a3e:	01 96       	adiw	r24, 0x01	; 1
    2a40:	0e 94 0d 3d 	call	0x7a1a	; 0x7a1a <_ZplRK15StringSumHelperPKc>
    2a44:	bc 01       	movw	r22, r24
    2a46:	85 ef       	ldi	r24, 0xF5	; 245
    2a48:	9a e0       	ldi	r25, 0x0A	; 10
    2a4a:	0e 94 d6 3c 	call	0x79ac	; 0x79ac <_ZN6String6concatERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2a4e:	ce 01       	movw	r24, r28
    2a50:	01 96       	adiw	r24, 0x01	; 1
    2a52:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
    2a56:	0a 5f       	subi	r16, 0xFA	; 250
    2a58:	1f 4f       	sbci	r17, 0xFF	; 255
        if (BIT_IS_CLEAR(PORTC, 4))
        {
          displayLCD(righeDisplay, stato_procedura, 10);
          Messaggio = "";

          for (int k = 0; k < 6; k++)
    2a5a:	e0 16       	cp	r14, r16
    2a5c:	f1 06       	cpc	r15, r17
    2a5e:	39 f7       	brne	.-50     	; 0x2a2e <loop+0xb3c>
            Messaggio.concat(RaccoltaDati[k] + ";");

          Messaggio.concat(CodSede);
    2a60:	62 e4       	ldi	r22, 0x42	; 66
    2a62:	71 e0       	ldi	r23, 0x01	; 1
    2a64:	85 ef       	ldi	r24, 0xF5	; 245
    2a66:	9a e0       	ldi	r25, 0x0A	; 10
    2a68:	0e 94 dc 3c 	call	0x79b8	; 0x79b8 <_ZN6String6concatEPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2a6c:	64 e8       	ldi	r22, 0x84	; 132
    2a6e:	77 e0       	ldi	r23, 0x07	; 7
    2a70:	ce 01       	movw	r24, r28
    2a72:	01 96       	adiw	r24, 0x01	; 1
    2a74:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
          Serial.println("Messaggio:" + Messaggio);
    2a78:	65 ef       	ldi	r22, 0xF5	; 245
    2a7a:	7a e0       	ldi	r23, 0x0A	; 10
    2a7c:	ce 01       	movw	r24, r28
    2a7e:	01 96       	adiw	r24, 0x01	; 1
    2a80:	0e 94 fc 3c 	call	0x79f8	; 0x79f8 <_ZplRK15StringSumHelperRK6String>
    2a84:	bc 01       	movw	r22, r24
    2a86:	86 e2       	ldi	r24, 0x26	; 38
    2a88:	9d e0       	ldi	r25, 0x0D	; 13
    2a8a:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2a8e:	ce 01       	movw	r24, r28
    2a90:	01 96       	adiw	r24, 0x01	; 1
    2a92:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
    2a96:	8f ef       	ldi	r24, 0xFF	; 255
    2a98:	93 ed       	ldi	r25, 0xD3	; 211
    2a9a:	20 e3       	ldi	r18, 0x30	; 48
    2a9c:	81 50       	subi	r24, 0x01	; 1
    2a9e:	90 40       	sbci	r25, 0x00	; 0
    2aa0:	20 40       	sbci	r18, 0x00	; 0
    2aa2:	e1 f7       	brne	.-8      	; 0x2a9c <loop+0xbaa>
    2aa4:	00 c0       	rjmp	.+0      	; 0x2aa6 <loop+0xbb4>
    2aa6:	00 00       	nop

          // Messaggio = "DD92743A;28530;D;15.03;1234;000;SA10012";

          _delay_ms(1000);

          if (PostErogazioneGAC(80, serverREST, clientLOCAL, Messaggio))
    2aa8:	65 ef       	ldi	r22, 0xF5	; 245
    2aaa:	7a e0       	ldi	r23, 0x0A	; 10
    2aac:	ce 01       	movw	r24, r28
    2aae:	0f 96       	adiw	r24, 0x0f	; 15
    2ab0:	0e 94 93 3b 	call	0x7726	; 0x7726 <_ZN6StringC1ERKS_>
    2ab4:	80 91 ba 0a 	lds	r24, 0x0ABA	; 0x800aba <clientLOCAL+0x2>
    2ab8:	90 91 bb 0a 	lds	r25, 0x0ABB	; 0x800abb <clientLOCAL+0x3>
    2abc:	9c 83       	std	Y+4, r25	; 0x04
    2abe:	8b 83       	std	Y+3, r24	; 0x03
    2ac0:	80 91 bc 0a 	lds	r24, 0x0ABC	; 0x800abc <clientLOCAL+0x4>
    2ac4:	90 91 bd 0a 	lds	r25, 0x0ABD	; 0x800abd <clientLOCAL+0x5>
    2ac8:	a0 91 be 0a 	lds	r26, 0x0ABE	; 0x800abe <clientLOCAL+0x6>
    2acc:	b0 91 bf 0a 	lds	r27, 0x0ABF	; 0x800abf <clientLOCAL+0x7>
    2ad0:	8d 83       	std	Y+5, r24	; 0x05
    2ad2:	9e 83       	std	Y+6, r25	; 0x06
    2ad4:	af 83       	std	Y+7, r26	; 0x07
    2ad6:	b8 87       	std	Y+8, r27	; 0x08
    2ad8:	80 91 c0 0a 	lds	r24, 0x0AC0	; 0x800ac0 <clientLOCAL+0x8>
    2adc:	90 91 c1 0a 	lds	r25, 0x0AC1	; 0x800ac1 <clientLOCAL+0x9>
    2ae0:	a0 91 c2 0a 	lds	r26, 0x0AC2	; 0x800ac2 <clientLOCAL+0xa>
    2ae4:	b0 91 c3 0a 	lds	r27, 0x0AC3	; 0x800ac3 <clientLOCAL+0xb>
    2ae8:	89 87       	std	Y+9, r24	; 0x09
    2aea:	9a 87       	std	Y+10, r25	; 0x0a
    2aec:	ab 87       	std	Y+11, r26	; 0x0b
    2aee:	bc 87       	std	Y+12, r27	; 0x0c
    2af0:	89 ed       	ldi	r24, 0xD9	; 217
    2af2:	99 e0       	ldi	r25, 0x09	; 9
    2af4:	9a 83       	std	Y+2, r25	; 0x02
    2af6:	89 83       	std	Y+1, r24	; 0x01
    2af8:	80 91 c4 0a 	lds	r24, 0x0AC4	; 0x800ac4 <clientLOCAL+0xc>
    2afc:	8d 87       	std	Y+13, r24	; 0x0d
    2afe:	9e 01       	movw	r18, r28
    2b00:	21 5f       	subi	r18, 0xF1	; 241
    2b02:	3f 4f       	sbci	r19, 0xFF	; 255
    2b04:	ae 01       	movw	r20, r28
    2b06:	4f 5f       	subi	r20, 0xFF	; 255
    2b08:	5f 4f       	sbci	r21, 0xFF	; 255
    2b0a:	60 e3       	ldi	r22, 0x30	; 48
    2b0c:	71 e0       	ldi	r23, 0x01	; 1
    2b0e:	80 e5       	ldi	r24, 0x50	; 80
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <_Z17PostErogazioneGACiPc14EthernetClient6String>
    2b16:	18 2f       	mov	r17, r24
    2b18:	ce 01       	movw	r24, r28
    2b1a:	0f 96       	adiw	r24, 0x0f	; 15
    2b1c:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
    2b20:	11 23       	and	r17, r17
    2b22:	a1 f0       	breq	.+40     	; 0x2b4c <loop+0xc5a>
          {
            disable_ETH();
    2b24:	0e 94 93 01 	call	0x326	; 0x326 <_ZL11disable_ETHv>
    2b28:	3f ef       	ldi	r19, 0xFF	; 255
    2b2a:	83 ec       	ldi	r24, 0xC3	; 195
    2b2c:	99 e0       	ldi	r25, 0x09	; 9
    2b2e:	31 50       	subi	r19, 0x01	; 1
    2b30:	80 40       	sbci	r24, 0x00	; 0
    2b32:	90 40       	sbci	r25, 0x00	; 0
    2b34:	e1 f7       	brne	.-8      	; 0x2b2e <loop+0xc3c>
    2b36:	00 c0       	rjmp	.+0      	; 0x2b38 <loop+0xc46>
    2b38:	00 00       	nop
            _delay_ms(200);
            Serial.println("PostErogazioneGAC - OK" );                      
    2b3a:	6f e8       	ldi	r22, 0x8F	; 143
    2b3c:	77 e0       	ldi	r23, 0x07	; 7
    2b3e:	86 e2       	ldi	r24, 0x26	; 38
    2b40:	9d e0       	ldi	r25, 0x0D	; 13
    2b42:	0e 94 8c 38 	call	0x7118	; 0x7118 <_ZN5Print7printlnEPKc>
            Azzera();  
    2b46:	0e 94 22 0a 	call	0x1444	; 0x1444 <_Z6Azzerav>
    2b4a:	98 c0       	rjmp	.+304    	; 0x2c7c <loop+0xd8a>
          }
          else
          {
             disable_ETH();   
    2b4c:	0e 94 93 01 	call	0x326	; 0x326 <_ZL11disable_ETHv>
             String ultima_indirizzo  = read_eeprom_string(4,1035);
    2b50:	4b e0       	ldi	r20, 0x0B	; 11
    2b52:	54 e0       	ldi	r21, 0x04	; 4
    2b54:	64 e0       	ldi	r22, 0x04	; 4
    2b56:	70 e0       	ldi	r23, 0x00	; 0
    2b58:	ce 01       	movw	r24, r28
    2b5a:	4f 96       	adiw	r24, 0x1f	; 31
    2b5c:	68 d8       	rcall	.-3888   	; 0x1c2e <_Z18read_eeprom_stringii>
             int indirizzo = ultima_indirizzo.toInt();
    2b5e:	ce 01       	movw	r24, r28
    2b60:	4f 96       	adiw	r24, 0x1f	; 31
    2b62:	0e 94 18 3e 	call	0x7c30	; 0x7c30 <_ZNK6String5toIntEv>
    2b66:	6b 01       	movw	r12, r22
    2b68:	7c 01       	movw	r14, r24
            // bool write_eeprom_string(String erog,int lunBuffer,int start_ind)
            if (write_eeprom_string(Messaggio,Messaggio.length(),indirizzo))
    2b6a:	00 91 f9 0a 	lds	r16, 0x0AF9	; 0x800af9 <Messaggio+0x4>
    2b6e:	10 91 fa 0a 	lds	r17, 0x0AFA	; 0x800afa <Messaggio+0x5>
    2b72:	65 ef       	ldi	r22, 0xF5	; 245
    2b74:	7a e0       	ldi	r23, 0x0A	; 10
    2b76:	ce 01       	movw	r24, r28
    2b78:	01 96       	adiw	r24, 0x01	; 1
    2b7a:	0e 94 93 3b 	call	0x7726	; 0x7726 <_ZN6StringC1ERKS_>
    2b7e:	a6 01       	movw	r20, r12
    2b80:	b8 01       	movw	r22, r16
    2b82:	ce 01       	movw	r24, r28
    2b84:	01 96       	adiw	r24, 0x01	; 1
    2b86:	08 d9       	rcall	.-3568   	; 0x1d98 <_Z19write_eeprom_string6Stringii>
    2b88:	18 2f       	mov	r17, r24
    2b8a:	ce 01       	movw	r24, r28
    2b8c:	01 96       	adiw	r24, 0x01	; 1
    2b8e:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
    2b92:	11 23       	and	r17, r17
    2b94:	09 f4       	brne	.+2      	; 0x2b98 <loop+0xca6>
    2b96:	6c c0       	rjmp	.+216    	; 0x2c70 <loop+0xd7e>
              {
                Serial.println("WRITE OK AT address :" + String(indirizzo));
    2b98:	4a e0       	ldi	r20, 0x0A	; 10
    2b9a:	b6 01       	movw	r22, r12
    2b9c:	ce 01       	movw	r24, r28
    2b9e:	0f 96       	adiw	r24, 0x0f	; 15
    2ba0:	0e 94 fd 3b 	call	0x77fa	; 0x77fa <_ZN6StringC1Eih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2ba4:	66 ea       	ldi	r22, 0xA6	; 166
    2ba6:	77 e0       	ldi	r23, 0x07	; 7
    2ba8:	ce 01       	movw	r24, r28
    2baa:	01 96       	adiw	r24, 0x01	; 1
    2bac:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
    2bb0:	be 01       	movw	r22, r28
    2bb2:	61 5f       	subi	r22, 0xF1	; 241
    2bb4:	7f 4f       	sbci	r23, 0xFF	; 255
    2bb6:	ce 01       	movw	r24, r28
    2bb8:	01 96       	adiw	r24, 0x01	; 1
    2bba:	0e 94 fc 3c 	call	0x79f8	; 0x79f8 <_ZplRK15StringSumHelperRK6String>
    2bbe:	bc 01       	movw	r22, r24
    2bc0:	86 e2       	ldi	r24, 0x26	; 38
    2bc2:	9d e0       	ldi	r25, 0x0D	; 13
    2bc4:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2bc8:	ce 01       	movw	r24, r28
    2bca:	01 96       	adiw	r24, 0x01	; 1
    2bcc:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
    2bd0:	ce 01       	movw	r24, r28
    2bd2:	0f 96       	adiw	r24, 0x0f	; 15
    2bd4:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
                indirizzo = indirizzo + 50;  
    2bd8:	22 e3       	ldi	r18, 0x32	; 50
    2bda:	c2 0e       	add	r12, r18
    2bdc:	d1 1c       	adc	r13, r1
                if (indirizzo > 3000) {indirizzo = 2000; }   
    2bde:	39 eb       	ldi	r19, 0xB9	; 185
    2be0:	c3 16       	cp	r12, r19
    2be2:	3b e0       	ldi	r19, 0x0B	; 11
    2be4:	d3 06       	cpc	r13, r19
    2be6:	24 f0       	brlt	.+8      	; 0x2bf0 <loop+0xcfe>
    2be8:	80 ed       	ldi	r24, 0xD0	; 208
    2bea:	c8 2e       	mov	r12, r24
    2bec:	87 e0       	ldi	r24, 0x07	; 7
    2bee:	d8 2e       	mov	r13, r24
                String update_ultima_indirizzo = String(indirizzo);
    2bf0:	4a e0       	ldi	r20, 0x0A	; 10
    2bf2:	b6 01       	movw	r22, r12
    2bf4:	ce 01       	movw	r24, r28
    2bf6:	47 96       	adiw	r24, 0x17	; 23
    2bf8:	0e 94 fd 3b 	call	0x77fa	; 0x77fa <_ZN6StringC1Eih>
                if (write_eeprom_string(update_ultima_indirizzo,update_ultima_indirizzo.length(),1035))
    2bfc:	0b 8d       	ldd	r16, Y+27	; 0x1b
    2bfe:	1c 8d       	ldd	r17, Y+28	; 0x1c
    2c00:	be 01       	movw	r22, r28
    2c02:	69 5e       	subi	r22, 0xE9	; 233
    2c04:	7f 4f       	sbci	r23, 0xFF	; 255
    2c06:	ce 01       	movw	r24, r28
    2c08:	01 96       	adiw	r24, 0x01	; 1
    2c0a:	0e 94 93 3b 	call	0x7726	; 0x7726 <_ZN6StringC1ERKS_>
    2c0e:	4b e0       	ldi	r20, 0x0B	; 11
    2c10:	54 e0       	ldi	r21, 0x04	; 4
    2c12:	b8 01       	movw	r22, r16
    2c14:	ce 01       	movw	r24, r28
    2c16:	01 96       	adiw	r24, 0x01	; 1
    2c18:	bf d8       	rcall	.-3714   	; 0x1d98 <_Z19write_eeprom_string6Stringii>
    2c1a:	18 2f       	mov	r17, r24
    2c1c:	ce 01       	movw	r24, r28
    2c1e:	01 96       	adiw	r24, 0x01	; 1
    2c20:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
    2c24:	11 23       	and	r17, r17
    2c26:	01 f1       	breq	.+64     	; 0x2c68 <loop+0xd76>
                  Serial.println("UPDATE OK address :" + String(indirizzo));  
    2c28:	4a e0       	ldi	r20, 0x0A	; 10
    2c2a:	b6 01       	movw	r22, r12
    2c2c:	ce 01       	movw	r24, r28
    2c2e:	0f 96       	adiw	r24, 0x0f	; 15
    2c30:	0e 94 fd 3b 	call	0x77fa	; 0x77fa <_ZN6StringC1Eih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2c34:	6c eb       	ldi	r22, 0xBC	; 188
    2c36:	77 e0       	ldi	r23, 0x07	; 7
    2c38:	ce 01       	movw	r24, r28
    2c3a:	01 96       	adiw	r24, 0x01	; 1
    2c3c:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
    2c40:	be 01       	movw	r22, r28
    2c42:	61 5f       	subi	r22, 0xF1	; 241
    2c44:	7f 4f       	sbci	r23, 0xFF	; 255
    2c46:	ce 01       	movw	r24, r28
    2c48:	01 96       	adiw	r24, 0x01	; 1
    2c4a:	0e 94 fc 3c 	call	0x79f8	; 0x79f8 <_ZplRK15StringSumHelperRK6String>
    2c4e:	bc 01       	movw	r22, r24
    2c50:	86 e2       	ldi	r24, 0x26	; 38
    2c52:	9d e0       	ldi	r25, 0x0D	; 13
    2c54:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2c58:	ce 01       	movw	r24, r28
    2c5a:	01 96       	adiw	r24, 0x01	; 1
    2c5c:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
    2c60:	ce 01       	movw	r24, r28
    2c62:	0f 96       	adiw	r24, 0x0f	; 15
    2c64:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
            if (write_eeprom_string(Messaggio,Messaggio.length(),indirizzo))
              {
                Serial.println("WRITE OK AT address :" + String(indirizzo));
                indirizzo = indirizzo + 50;  
                if (indirizzo > 3000) {indirizzo = 2000; }   
                String update_ultima_indirizzo = String(indirizzo);
    2c68:	ce 01       	movw	r24, r28
    2c6a:	47 96       	adiw	r24, 0x17	; 23
    2c6c:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
                if (write_eeprom_string(update_ultima_indirizzo,update_ultima_indirizzo.length(),1035))
                  Serial.println("UPDATE OK address :" + String(indirizzo));  
              }                
              Azzera();
    2c70:	0e 94 22 0a 	call	0x1444	; 0x1444 <_Z6Azzerav>
            Azzera();  
          }
          else
          {
             disable_ETH();   
             String ultima_indirizzo  = read_eeprom_string(4,1035);
    2c74:	ce 01       	movw	r24, r28
    2c76:	4f 96       	adiw	r24, 0x1f	; 31
    2c78:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
      {
      }
      break;
  }

  nowTimer = DS3231M.now();
    2c7c:	6f e9       	ldi	r22, 0x9F	; 159
    2c7e:	7a e0       	ldi	r23, 0x0A	; 10
    2c80:	ce 01       	movw	r24, r28
    2c82:	01 96       	adiw	r24, 0x01	; 1
    2c84:	0e 94 e2 22 	call	0x45c4	; 0x45c4 <_ZN13DS3231M_Class3nowEv>
    2c88:	86 e0       	ldi	r24, 0x06	; 6
    2c8a:	fe 01       	movw	r30, r28
    2c8c:	31 96       	adiw	r30, 0x01	; 1
    2c8e:	ad e8       	ldi	r26, 0x8D	; 141
    2c90:	ba e0       	ldi	r27, 0x0A	; 10
    2c92:	01 90       	ld	r0, Z+
    2c94:	0d 92       	st	X+, r0
    2c96:	8a 95       	dec	r24
    2c98:	e1 f7       	brne	.-8      	; 0x2c92 <loop+0xda0>
  secs = nowTimer.secondstime();
    2c9a:	8d e8       	ldi	r24, 0x8D	; 141
    2c9c:	9a e0       	ldi	r25, 0x0A	; 10
    2c9e:	0e 94 33 22 	call	0x4466	; 0x4466 <_ZNK8DateTime11secondstimeEv>
    2ca2:	60 93 9b 0a 	sts	0x0A9B, r22	; 0x800a9b <secs>
    2ca6:	70 93 9c 0a 	sts	0x0A9C, r23	; 0x800a9c <secs+0x1>
    2caa:	80 93 9d 0a 	sts	0x0A9D, r24	; 0x800a9d <secs+0x2>
    2cae:	90 93 9e 0a 	sts	0x0A9E, r25	; 0x800a9e <secs+0x3>
  if ((UltimoPassaggioStato + Timer - secs) <= 1) Azzera();
    2cb2:	00 91 97 0a 	lds	r16, 0x0A97	; 0x800a97 <UltimoPassaggioStato>
    2cb6:	10 91 98 0a 	lds	r17, 0x0A98	; 0x800a98 <UltimoPassaggioStato+0x1>
    2cba:	20 91 99 0a 	lds	r18, 0x0A99	; 0x800a99 <UltimoPassaggioStato+0x2>
    2cbe:	30 91 9a 0a 	lds	r19, 0x0A9A	; 0x800a9a <UltimoPassaggioStato+0x3>
    2cc2:	c0 90 93 0a 	lds	r12, 0x0A93	; 0x800a93 <Timer>
    2cc6:	d0 90 94 0a 	lds	r13, 0x0A94	; 0x800a94 <Timer+0x1>
    2cca:	e0 90 95 0a 	lds	r14, 0x0A95	; 0x800a95 <Timer+0x2>
    2cce:	f0 90 96 0a 	lds	r15, 0x0A96	; 0x800a96 <Timer+0x3>
    2cd2:	0c 0d       	add	r16, r12
    2cd4:	1d 1d       	adc	r17, r13
    2cd6:	2e 1d       	adc	r18, r14
    2cd8:	3f 1d       	adc	r19, r15
    2cda:	68 01       	movw	r12, r16
    2cdc:	79 01       	movw	r14, r18
    2cde:	c6 1a       	sub	r12, r22
    2ce0:	d7 0a       	sbc	r13, r23
    2ce2:	e8 0a       	sbc	r14, r24
    2ce4:	f9 0a       	sbc	r15, r25
    2ce6:	d7 01       	movw	r26, r14
    2ce8:	c6 01       	movw	r24, r12
    2cea:	02 97       	sbiw	r24, 0x02	; 2
    2cec:	a1 05       	cpc	r26, r1
    2cee:	b1 05       	cpc	r27, r1
    2cf0:	08 f0       	brcs	.+2      	; 0x2cf4 <loop+0xe02>
    2cf2:	83 c1       	rjmp	.+774    	; 0x2ffa <loop+0x1108>
    2cf4:	0e 94 22 0a 	call	0x1444	; 0x1444 <_Z6Azzerav>

}
    2cf8:	80 c1       	rjmp	.+768    	; 0x2ffa <loop+0x1108>
          Buzzer(2, 100);
        }

        if ((ATe != "ERRORE") && (BIT_IS_CLEAR(PORTC, 4)))
        {
          Serial.println("");
    2cfa:	62 e4       	ldi	r22, 0x42	; 66
    2cfc:	72 e0       	ldi	r23, 0x02	; 2
    2cfe:	86 e2       	ldi	r24, 0x26	; 38
    2d00:	9d e0       	ldi	r25, 0x0D	; 13
    2d02:	0e 94 8c 38 	call	0x7118	; 0x7118 <_ZN5Print7printlnEPKc>
          Serial.print("***************************************************************");
    2d06:	60 ed       	ldi	r22, 0xD0	; 208
    2d08:	77 e0       	ldi	r23, 0x07	; 7
    2d0a:	86 e2       	ldi	r24, 0x26	; 38
    2d0c:	9d e0       	ldi	r25, 0x0D	; 13
    2d0e:	0e 94 61 38 	call	0x70c2	; 0x70c2 <_ZN5Print5printEPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2d12:	60 e1       	ldi	r22, 0x10	; 16
    2d14:	78 e0       	ldi	r23, 0x08	; 8
    2d16:	ce 01       	movw	r24, r28
    2d18:	01 96       	adiw	r24, 0x01	; 1
    2d1a:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
          Serial.println(" Tessera ID : " + ATe);
    2d1e:	be 01       	movw	r22, r28
    2d20:	69 5e       	subi	r22, 0xE9	; 233
    2d22:	7f 4f       	sbci	r23, 0xFF	; 255
    2d24:	ce 01       	movw	r24, r28
    2d26:	01 96       	adiw	r24, 0x01	; 1
    2d28:	0e 94 fc 3c 	call	0x79f8	; 0x79f8 <_ZplRK15StringSumHelperRK6String>
    2d2c:	bc 01       	movw	r22, r24
    2d2e:	86 e2       	ldi	r24, 0x26	; 38
    2d30:	9d e0       	ldi	r25, 0x0D	; 13
    2d32:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2d36:	ce 01       	movw	r24, r28
    2d38:	01 96       	adiw	r24, 0x01	; 1
    2d3a:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
          Serial.print("***************************************************************");
    2d3e:	60 ed       	ldi	r22, 0xD0	; 208
    2d40:	77 e0       	ldi	r23, 0x07	; 7
    2d42:	86 e2       	ldi	r24, 0x26	; 38
    2d44:	9d e0       	ldi	r25, 0x0D	; 13
    2d46:	0e 94 61 38 	call	0x70c2	; 0x70c2 <_ZN5Print5printEPKc>
          Serial.println("Riconoscimento Tessera .............");
    2d4a:	6f e1       	ldi	r22, 0x1F	; 31
    2d4c:	78 e0       	ldi	r23, 0x08	; 8
    2d4e:	86 e2       	ldi	r24, 0x26	; 38
    2d50:	9d e0       	ldi	r25, 0x0D	; 13
    2d52:	0e 94 8c 38 	call	0x7118	; 0x7118 <_ZN5Print7printlnEPKc>

          //RaccoltaDati[0] = ATe;
          RaccoltaDati[0] = "DD92743A";
    2d56:	64 e4       	ldi	r22, 0x44	; 68
    2d58:	78 e0       	ldi	r23, 0x08	; 8
    2d5a:	81 e0       	ldi	r24, 0x01	; 1
    2d5c:	9b e0       	ldi	r25, 0x0B	; 11
    2d5e:	0e 94 a6 3b 	call	0x774c	; 0x774c <_ZN6StringaSEPKc>
          // RaccoltaDati[5] = "000";

          lcd.backlight();
    2d62:	85 e5       	ldi	r24, 0x55	; 85
    2d64:	9b e0       	ldi	r25, 0x0B	; 11
    2d66:	0e 94 88 2f 	call	0x5f10	; 0x5f10 <_ZN3LCD9backlightEv>
          lcd.display();
    2d6a:	85 e5       	ldi	r24, 0x55	; 85
    2d6c:	9b e0       	ldi	r25, 0x0B	; 11
    2d6e:	0e 94 ee 2f 	call	0x5fdc	; 0x5fdc <_ZN3LCD7displayEv>
    2d72:	8f e3       	ldi	r24, 0x3F	; 63
    2d74:	9c e9       	ldi	r25, 0x9C	; 156
    2d76:	01 97       	sbiw	r24, 0x01	; 1
    2d78:	f1 f7       	brne	.-4      	; 0x2d76 <loop+0xe84>
    2d7a:	00 c0       	rjmp	.+0      	; 0x2d7c <loop+0xe8a>
    2d7c:	00 00       	nop
          _delay_ms(10);

          righeDisplay[1] = "  RICONOSCIMENTO ";
    2d7e:	6d e4       	ldi	r22, 0x4D	; 77
    2d80:	78 e0       	ldi	r23, 0x08	; 8
    2d82:	83 ee       	ldi	r24, 0xE3	; 227
    2d84:	9a e0       	ldi	r25, 0x0A	; 10
    2d86:	0e 94 a6 3b 	call	0x774c	; 0x774c <_ZN6StringaSEPKc>
          righeDisplay[2] = ".....In Corso.....";
    2d8a:	6f e5       	ldi	r22, 0x5F	; 95
    2d8c:	78 e0       	ldi	r23, 0x08	; 8
    2d8e:	89 ee       	ldi	r24, 0xE9	; 233
    2d90:	9a e0       	ldi	r25, 0x0A	; 10
    2d92:	0e 94 a6 3b 	call	0x774c	; 0x774c <_ZN6StringaSEPKc>
          //righeDisplay[3] = "   Rfid: " + ATe;
          righeDisplay[3] = "Attendere.........";
    2d96:	62 e7       	ldi	r22, 0x72	; 114
    2d98:	78 e0       	ldi	r23, 0x08	; 8
    2d9a:	8f ee       	ldi	r24, 0xEF	; 239
    2d9c:	9a e0       	ldi	r25, 0x0A	; 10
    2d9e:	0e 94 a6 3b 	call	0x774c	; 0x774c <_ZN6StringaSEPKc>
          displayLCD(righeDisplay, stato_procedura, 100);
    2da2:	60 91 2e 0b 	lds	r22, 0x0B2E	; 0x800b2e <stato_procedura>
    2da6:	70 91 2f 0b 	lds	r23, 0x0B2F	; 0x800b2f <stato_procedura+0x1>
    2daa:	44 e6       	ldi	r20, 0x64	; 100
    2dac:	50 e0       	ldi	r21, 0x00	; 0
    2dae:	8d ed       	ldi	r24, 0xDD	; 221
    2db0:	9a e0       	ldi	r25, 0x0A	; 10
    2db2:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <_Z10displayLCDP6Stringii>
          InizializzaEthernet();
    2db6:	0e 94 95 01 	call	0x32a	; 0x32a <_Z19InizializzaEthernetv>
    2dba:	9f ef       	ldi	r25, 0xFF	; 255
    2dbc:	23 ed       	ldi	r18, 0xD3	; 211
    2dbe:	30 e3       	ldi	r19, 0x30	; 48
    2dc0:	91 50       	subi	r25, 0x01	; 1
    2dc2:	20 40       	sbci	r18, 0x00	; 0
    2dc4:	30 40       	sbci	r19, 0x00	; 0
    2dc6:	e1 f7       	brne	.-8      	; 0x2dc0 <loop+0xece>
    2dc8:	00 c0       	rjmp	.+0      	; 0x2dca <loop+0xed8>
    2dca:	00 00       	nop
    2dcc:	9e c9       	rjmp	.-3268   	; 0x210a <loop+0x218>
          Serial.println("TIPO CARBURANTE: " + mezzo.Carb);
          Serial.println("TARGA: " + mezzo.TARGA);

//          Carburante = mezzo.Carb;
          if ((mezzo.Carb == "B") || (mezzo.Carb == "D")) {
            RaccoltaDati[1] = mezzo.TARGA;
    2dce:	6d e7       	ldi	r22, 0x7D	; 125
    2dd0:	7b e0       	ldi	r23, 0x0B	; 11
    2dd2:	87 e0       	ldi	r24, 0x07	; 7
    2dd4:	9b e0       	ldi	r25, 0x0B	; 11
    2dd6:	0e 94 7e 3b 	call	0x76fc	; 0x76fc <_ZN6StringaSERKS_>
            RaccoltaDati[2] = mezzo.Carb;
    2dda:	67 e7       	ldi	r22, 0x77	; 119
    2ddc:	7b e0       	ldi	r23, 0x0B	; 11
    2dde:	8d e0       	ldi	r24, 0x0D	; 13
    2de0:	9b e0       	ldi	r25, 0x0B	; 11
    2de2:	0e 94 7e 3b 	call	0x76fc	; 0x76fc <_ZN6StringaSERKS_>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2de6:	6a e5       	ldi	r22, 0x5A	; 90
    2de8:	77 e0       	ldi	r23, 0x07	; 7
    2dea:	ce 01       	movw	r24, r28
    2dec:	01 96       	adiw	r24, 0x01	; 1
    2dee:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
            righeDisplay[3] = "TARGA: " +  mezzo.TARGA;
    2df2:	6d e7       	ldi	r22, 0x7D	; 125
    2df4:	7b e0       	ldi	r23, 0x0B	; 11
    2df6:	ce 01       	movw	r24, r28
    2df8:	01 96       	adiw	r24, 0x01	; 1
    2dfa:	0e 94 fc 3c 	call	0x79f8	; 0x79f8 <_ZplRK15StringSumHelperRK6String>
    2dfe:	bc 01       	movw	r22, r24
    2e00:	8f ee       	ldi	r24, 0xEF	; 239
    2e02:	9a e0       	ldi	r25, 0x0A	; 10
    2e04:	0e 94 7e 3b 	call	0x76fc	; 0x76fc <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2e08:	ce 01       	movw	r24, r28
    2e0a:	01 96       	adiw	r24, 0x01	; 1
    2e0c:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
    2e10:	8f ef       	ldi	r24, 0xFF	; 255
    2e12:	99 e6       	ldi	r25, 0x69	; 105
    2e14:	28 e1       	ldi	r18, 0x18	; 24
    2e16:	81 50       	subi	r24, 0x01	; 1
    2e18:	90 40       	sbci	r25, 0x00	; 0
    2e1a:	20 40       	sbci	r18, 0x00	; 0
    2e1c:	e1 f7       	brne	.-8      	; 0x2e16 <loop+0xf24>
    2e1e:	00 c0       	rjmp	.+0      	; 0x2e20 <loop+0xf2e>
    2e20:	00 00       	nop
            _delay_ms(500);
            distr_selezionato = 0;
    2e22:	10 92 2b 0b 	sts	0x0B2B, r1	; 0x800b2b <distr_selezionato>
            avanzaStato(TselDistributore);
    2e26:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <TselDistributore>
    2e2a:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <TselDistributore+0x1>
    2e2e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <TselDistributore+0x2>
    2e32:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <TselDistributore+0x3>
    2e36:	0e 94 a1 03 	call	0x742	; 0x742 <_Z11avanzaStatom>
    2e3a:	93 cb       	rjmp	.-2266   	; 0x2562 <loop+0x670>

        // Verifica scelta distributore

        if ((mezzo.Carb == "B") || (distr_selezionato == 2))
        {
          abilitaPulser('B');
    2e3c:	82 e4       	ldi	r24, 0x42	; 66
    2e3e:	0e 94 57 09 	call	0x12ae	; 0x12ae <_Z13abilitaPulserc>
          mezzo.Carb = "B";
    2e42:	62 ea       	ldi	r22, 0xA2	; 162
    2e44:	75 e0       	ldi	r23, 0x05	; 5
    2e46:	87 e7       	ldi	r24, 0x77	; 119
    2e48:	9b e0       	ldi	r25, 0x0B	; 11
    2e4a:	0e 94 a6 3b 	call	0x774c	; 0x774c <_ZN6StringaSEPKc>
          Rele_Abilitazione2(0, 7); // chiudi relè
    2e4e:	67 e0       	ldi	r22, 0x07	; 7
    2e50:	70 e0       	ldi	r23, 0x00	; 0
    2e52:	80 e0       	ldi	r24, 0x00	; 0
    2e54:	90 e0       	ldi	r25, 0x00	; 0
    2e56:	0e 94 cb 09 	call	0x1396	; 0x1396 <_Z18Rele_Abilitazione2ii>
          StatoAttuale = "POMPA 2";
    2e5a:	6f e0       	ldi	r22, 0x0F	; 15
    2e5c:	76 e0       	ldi	r23, 0x06	; 6
    2e5e:	88 e3       	ldi	r24, 0x38	; 56
    2e60:	9b e0       	ldi	r25, 0x0B	; 11
    2e62:	0e 94 a6 3b 	call	0x774c	; 0x774c <_ZN6StringaSEPKc>
          RaccoltaDati[2] = mezzo.Carb;
    2e66:	67 e7       	ldi	r22, 0x77	; 119
    2e68:	7b e0       	ldi	r23, 0x0B	; 11
    2e6a:	8d e0       	ldi	r24, 0x0D	; 13
    2e6c:	9b e0       	ldi	r25, 0x0B	; 11
    2e6e:	0e 94 7e 3b 	call	0x76fc	; 0x76fc <_ZN6StringaSERKS_>
          righeDisplay[1] =  "****** KM ******";
    2e72:	67 e1       	ldi	r22, 0x17	; 23
    2e74:	76 e0       	ldi	r23, 0x06	; 6
    2e76:	83 ee       	ldi	r24, 0xE3	; 227
    2e78:	9a e0       	ldi	r25, 0x0A	; 10
    2e7a:	0e 94 a6 3b 	call	0x774c	; 0x774c <_ZN6StringaSEPKc>
          righeDisplay[2] = "KM:";
    2e7e:	68 e2       	ldi	r22, 0x28	; 40
    2e80:	76 e0       	ldi	r23, 0x06	; 6
    2e82:	89 ee       	ldi	r24, 0xE9	; 233
    2e84:	9a e0       	ldi	r25, 0x0A	; 10
    2e86:	0e 94 a6 3b 	call	0x774c	; 0x774c <_ZN6StringaSEPKc>
          righeDisplay[3] = "#:Conferma";       
    2e8a:	6c e2       	ldi	r22, 0x2C	; 44
    2e8c:	76 e0       	ldi	r23, 0x06	; 6
    2e8e:	8f ee       	ldi	r24, 0xEF	; 239
    2e90:	9a e0       	ldi	r25, 0x0A	; 10
    2e92:	0e 94 a6 3b 	call	0x774c	; 0x774c <_ZN6StringaSEPKc>
    2e96:	3f ef       	ldi	r19, 0xFF	; 255
    2e98:	81 ee       	ldi	r24, 0xE1	; 225
    2e9a:	94 e0       	ldi	r25, 0x04	; 4
    2e9c:	31 50       	subi	r19, 0x01	; 1
    2e9e:	80 40       	sbci	r24, 0x00	; 0
    2ea0:	90 40       	sbci	r25, 0x00	; 0
    2ea2:	e1 f7       	brne	.-8      	; 0x2e9c <loop+0xfaa>
    2ea4:	41 c0       	rjmp	.+130    	; 0x2f28 <loop+0x1036>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    2ea6:	60 ea       	ldi	r22, 0xA0	; 160
    2ea8:	75 e0       	ldi	r23, 0x05	; 5
    2eaa:	87 e7       	ldi	r24, 0x77	; 119
    2eac:	9b e0       	ldi	r25, 0x0B	; 11
    2eae:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <_ZNK6String6equalsEPKc>
          _delay_ms(100);    
          avanzaStato(TinputKM);
        }
        else if ((mezzo.Carb == "D") || (distr_selezionato == 1))
    2eb2:	81 11       	cpse	r24, r1
    2eb4:	05 c0       	rjmp	.+10     	; 0x2ec0 <loop+0xfce>
    2eb6:	80 91 2b 0b 	lds	r24, 0x0B2B	; 0x800b2b <distr_selezionato>
    2eba:	81 30       	cpi	r24, 0x01	; 1
    2ebc:	09 f0       	breq	.+2      	; 0x2ec0 <loop+0xfce>
    2ebe:	de ce       	rjmp	.-580    	; 0x2c7c <loop+0xd8a>
        {
          mezzo.Carb = "D";
    2ec0:	60 ea       	ldi	r22, 0xA0	; 160
    2ec2:	75 e0       	ldi	r23, 0x05	; 5
    2ec4:	87 e7       	ldi	r24, 0x77	; 119
    2ec6:	9b e0       	ldi	r25, 0x0B	; 11
    2ec8:	0e 94 a6 3b 	call	0x774c	; 0x774c <_ZN6StringaSEPKc>
          abilitaPulser('D');          
    2ecc:	84 e4       	ldi	r24, 0x44	; 68
    2ece:	0e 94 57 09 	call	0x12ae	; 0x12ae <_Z13abilitaPulserc>
          Rele_Abilitazione1(0, 7); // chiudi relè
    2ed2:	67 e0       	ldi	r22, 0x07	; 7
    2ed4:	70 e0       	ldi	r23, 0x00	; 0
    2ed6:	80 e0       	ldi	r24, 0x00	; 0
    2ed8:	90 e0       	ldi	r25, 0x00	; 0
    2eda:	0e 94 90 09 	call	0x1320	; 0x1320 <_Z18Rele_Abilitazione1ii>
          StatoAttuale = "POMPA 1";
    2ede:	60 e0       	ldi	r22, 0x00	; 0
    2ee0:	76 e0       	ldi	r23, 0x06	; 6
    2ee2:	88 e3       	ldi	r24, 0x38	; 56
    2ee4:	9b e0       	ldi	r25, 0x0B	; 11
    2ee6:	0e 94 a6 3b 	call	0x774c	; 0x774c <_ZN6StringaSEPKc>
          RaccoltaDati[2] = mezzo.Carb;
    2eea:	67 e7       	ldi	r22, 0x77	; 119
    2eec:	7b e0       	ldi	r23, 0x0B	; 11
    2eee:	8d e0       	ldi	r24, 0x0D	; 13
    2ef0:	9b e0       	ldi	r25, 0x0B	; 11
    2ef2:	0e 94 7e 3b 	call	0x76fc	; 0x76fc <_ZN6StringaSERKS_>
          righeDisplay[1] =  "****** KM ******";
    2ef6:	67 e1       	ldi	r22, 0x17	; 23
    2ef8:	76 e0       	ldi	r23, 0x06	; 6
    2efa:	83 ee       	ldi	r24, 0xE3	; 227
    2efc:	9a e0       	ldi	r25, 0x0A	; 10
    2efe:	0e 94 a6 3b 	call	0x774c	; 0x774c <_ZN6StringaSEPKc>
          righeDisplay[2] = "KM:";
    2f02:	68 e2       	ldi	r22, 0x28	; 40
    2f04:	76 e0       	ldi	r23, 0x06	; 6
    2f06:	89 ee       	ldi	r24, 0xE9	; 233
    2f08:	9a e0       	ldi	r25, 0x0A	; 10
    2f0a:	0e 94 a6 3b 	call	0x774c	; 0x774c <_ZN6StringaSEPKc>
          righeDisplay[3] = "#:Conferma";      
    2f0e:	6c e2       	ldi	r22, 0x2C	; 44
    2f10:	76 e0       	ldi	r23, 0x06	; 6
    2f12:	8f ee       	ldi	r24, 0xEF	; 239
    2f14:	9a e0       	ldi	r25, 0x0A	; 10
    2f16:	0e 94 a6 3b 	call	0x774c	; 0x774c <_ZN6StringaSEPKc>
    2f1a:	2f ef       	ldi	r18, 0xFF	; 255
    2f1c:	31 ee       	ldi	r19, 0xE1	; 225
    2f1e:	84 e0       	ldi	r24, 0x04	; 4
    2f20:	21 50       	subi	r18, 0x01	; 1
    2f22:	30 40       	sbci	r19, 0x00	; 0
    2f24:	80 40       	sbci	r24, 0x00	; 0
    2f26:	e1 f7       	brne	.-8      	; 0x2f20 <loop+0x102e>
    2f28:	00 c0       	rjmp	.+0      	; 0x2f2a <loop+0x1038>
    2f2a:	00 00       	nop
          _delay_ms(100);     
          avanzaStato(TinputKM);
    2f2c:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <TinputKM>
    2f30:	70 91 23 01 	lds	r23, 0x0123	; 0x800123 <TinputKM+0x1>
    2f34:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <TinputKM+0x2>
    2f38:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <TinputKM+0x3>
    2f3c:	5b c0       	rjmp	.+182    	; 0x2ff4 <loop+0x1102>

        // CONTATTO PISTOLA DIESEL

        if ((PINA & _BV(PA1)) && (mezzo.Carb == "D"))
        {
          RaccoltaDati[3] = String(lt);
    2f3e:	22 e0       	ldi	r18, 0x02	; 2
    2f40:	b7 01       	movw	r22, r14
    2f42:	a6 01       	movw	r20, r12
    2f44:	ce 01       	movw	r24, r28
    2f46:	01 96       	adiw	r24, 0x01	; 1
    2f48:	0e 94 7c 3c 	call	0x78f8	; 0x78f8 <_ZN6StringC1Edh>
    2f4c:	be 01       	movw	r22, r28
    2f4e:	6f 5f       	subi	r22, 0xFF	; 255
    2f50:	7f 4f       	sbci	r23, 0xFF	; 255
    2f52:	83 e1       	ldi	r24, 0x13	; 19
    2f54:	9b e0       	ldi	r25, 0x0B	; 11
    2f56:	0e 94 9b 3b 	call	0x7736	; 0x7736 <_ZN6StringaSEOS_>
    2f5a:	ce 01       	movw	r24, r28
    2f5c:	01 96       	adiw	r24, 0x01	; 1
    2f5e:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
          StatoAttuale = "STOP EROGAZIONE";
    2f62:	65 e8       	ldi	r22, 0x85	; 133
    2f64:	78 e0       	ldi	r23, 0x08	; 8
    2f66:	88 e3       	ldi	r24, 0x38	; 56
    2f68:	9b e0       	ldi	r25, 0x0B	; 11
    2f6a:	0e 94 a6 3b 	call	0x774c	; 0x774c <_ZN6StringaSEPKc>
          Rele_Abilitazione2(1, 7); //  apri relè
    2f6e:	67 e0       	ldi	r22, 0x07	; 7
    2f70:	70 e0       	ldi	r23, 0x00	; 0
    2f72:	81 e0       	ldi	r24, 0x01	; 1
    2f74:	90 e0       	ldi	r25, 0x00	; 0
    2f76:	0e 94 cb 09 	call	0x1396	; 0x1396 <_Z18Rele_Abilitazione2ii>
          Rele_Abilitazione1(1, 7); //  apri relè
    2f7a:	67 e0       	ldi	r22, 0x07	; 7
    2f7c:	70 e0       	ldi	r23, 0x00	; 0
    2f7e:	81 e0       	ldi	r24, 0x01	; 1
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	0e 94 90 09 	call	0x1320	; 0x1320 <_Z18Rele_Abilitazione1ii>
          //TOGGLE_BIT(PORTA, 1);
          avanzaStato(TmaxInviodati);
    2f86:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <TmaxInviodati>
    2f8a:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <TmaxInviodati+0x1>
    2f8e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <TmaxInviodati+0x2>
    2f92:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <TmaxInviodati+0x3>
    2f96:	0e 94 a1 03 	call	0x742	; 0x742 <_Z11avanzaStatom>
    2f9a:	b7 cc       	rjmp	.-1682   	; 0x290a <loop+0xa18>

        // CONTATTO PISTOLA BENZINA

        if  ((PINB & _BV(PB1)) && (mezzo.Carb == "B"))
        {
          RaccoltaDati[3] = String(lt);
    2f9c:	22 e0       	ldi	r18, 0x02	; 2
    2f9e:	b7 01       	movw	r22, r14
    2fa0:	a6 01       	movw	r20, r12
    2fa2:	ce 01       	movw	r24, r28
    2fa4:	01 96       	adiw	r24, 0x01	; 1
    2fa6:	0e 94 7c 3c 	call	0x78f8	; 0x78f8 <_ZN6StringC1Edh>
    2faa:	be 01       	movw	r22, r28
    2fac:	6f 5f       	subi	r22, 0xFF	; 255
    2fae:	7f 4f       	sbci	r23, 0xFF	; 255
    2fb0:	83 e1       	ldi	r24, 0x13	; 19
    2fb2:	9b e0       	ldi	r25, 0x0B	; 11
    2fb4:	0e 94 9b 3b 	call	0x7736	; 0x7736 <_ZN6StringaSEOS_>
    2fb8:	ce 01       	movw	r24, r28
    2fba:	01 96       	adiw	r24, 0x01	; 1
    2fbc:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>

          StatoAttuale = "STOP EROGAZIONE";
    2fc0:	65 e8       	ldi	r22, 0x85	; 133
    2fc2:	78 e0       	ldi	r23, 0x08	; 8
    2fc4:	88 e3       	ldi	r24, 0x38	; 56
    2fc6:	9b e0       	ldi	r25, 0x0B	; 11
    2fc8:	0e 94 a6 3b 	call	0x774c	; 0x774c <_ZN6StringaSEPKc>
          Rele_Abilitazione2(1, 7); //  apri relè
    2fcc:	67 e0       	ldi	r22, 0x07	; 7
    2fce:	70 e0       	ldi	r23, 0x00	; 0
    2fd0:	81 e0       	ldi	r24, 0x01	; 1
    2fd2:	90 e0       	ldi	r25, 0x00	; 0
    2fd4:	0e 94 cb 09 	call	0x1396	; 0x1396 <_Z18Rele_Abilitazione2ii>
          Rele_Abilitazione1(1, 7); //  apri relè
    2fd8:	67 e0       	ldi	r22, 0x07	; 7
    2fda:	70 e0       	ldi	r23, 0x00	; 0
    2fdc:	81 e0       	ldi	r24, 0x01	; 1
    2fde:	90 e0       	ldi	r25, 0x00	; 0
    2fe0:	0e 94 90 09 	call	0x1320	; 0x1320 <_Z18Rele_Abilitazione1ii>
          avanzaStato(TmaxInviodati);
    2fe4:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <TmaxInviodati>
    2fe8:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <TmaxInviodati+0x1>
    2fec:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <TmaxInviodati+0x2>
    2ff0:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <TmaxInviodati+0x3>
    2ff4:	0e 94 a1 03 	call	0x742	; 0x742 <_Z11avanzaStatom>
    2ff8:	41 ce       	rjmp	.-894    	; 0x2c7c <loop+0xd8a>

  nowTimer = DS3231M.now();
  secs = nowTimer.secondstime();
  if ((UltimoPassaggioStato + Timer - secs) <= 1) Azzera();

}
    2ffa:	a4 96       	adiw	r28, 0x24	; 36
    2ffc:	0f b6       	in	r0, 0x3f	; 63
    2ffe:	f8 94       	cli
    3000:	de bf       	out	0x3e, r29	; 62
    3002:	0f be       	out	0x3f, r0	; 63
    3004:	cd bf       	out	0x3d, r28	; 61
    3006:	df 91       	pop	r29
    3008:	cf 91       	pop	r28
    300a:	1f 91       	pop	r17
    300c:	0f 91       	pop	r16
    300e:	ff 90       	pop	r15
    3010:	ef 90       	pop	r14
    3012:	df 90       	pop	r13
    3014:	cf 90       	pop	r12
    3016:	08 95       	ret

00003018 <__vector_4>:
  73 litri al minuto
  73/60 = 1,22 lt/sec
  1,22*100 = 122 Hz
***********************************************************************/

ISR(PCINT0_vect) {
    3018:	1f 92       	push	r1
    301a:	0f 92       	push	r0
    301c:	0f b6       	in	r0, 0x3f	; 63
    301e:	0f 92       	push	r0
    3020:	11 24       	eor	r1, r1
    3022:	0b b6       	in	r0, 0x3b	; 59
    3024:	0f 92       	push	r0
    3026:	2f 93       	push	r18
    3028:	3f 93       	push	r19
    302a:	4f 93       	push	r20
    302c:	5f 93       	push	r21
    302e:	6f 93       	push	r22
    3030:	7f 93       	push	r23
    3032:	8f 93       	push	r24
    3034:	9f 93       	push	r25
    3036:	af 93       	push	r26
    3038:	bf 93       	push	r27
    303a:	ef 93       	push	r30
    303c:	ff 93       	push	r31
  if (PINA & _BV(PA5)) {
    303e:	05 9b       	sbis	0x00, 5	; 0
    3040:	16 c0       	rjmp	.+44     	; 0x306e <__vector_4+0x56>
    impulsi++;
    3042:	80 91 2c 0b 	lds	r24, 0x0B2C	; 0x800b2c <impulsi>
    3046:	90 91 2d 0b 	lds	r25, 0x0B2D	; 0x800b2d <impulsi+0x1>
    304a:	01 96       	adiw	r24, 0x01	; 1
    304c:	90 93 2d 0b 	sts	0x0B2D, r25	; 0x800b2d <impulsi+0x1>
    3050:	80 93 2c 0b 	sts	0x0B2C, r24	; 0x800b2c <impulsi>
    my_delay_ms(debounceDelay);
    3054:	60 91 49 01 	lds	r22, 0x0149	; 0x800149 <debounceDelay>
    3058:	70 91 4a 01 	lds	r23, 0x014A	; 0x80014a <debounceDelay+0x1>
    305c:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <debounceDelay+0x2>
    3060:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <debounceDelay+0x3>
    3064:	0e 94 13 36 	call	0x6c26	; 0x6c26 <__fixsfsi>
    3068:	cb 01       	movw	r24, r22
    306a:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <_Z11my_delay_msi>
	//_delay_ms(8.20)
  }
  if (PINA & _BV(PA6)) {
    306e:	06 9b       	sbis	0x00, 6	; 0
    3070:	16 c0       	rjmp	.+44     	; 0x309e <__vector_4+0x86>
    impulsi++;
    3072:	80 91 2c 0b 	lds	r24, 0x0B2C	; 0x800b2c <impulsi>
    3076:	90 91 2d 0b 	lds	r25, 0x0B2D	; 0x800b2d <impulsi+0x1>
    307a:	01 96       	adiw	r24, 0x01	; 1
    307c:	90 93 2d 0b 	sts	0x0B2D, r25	; 0x800b2d <impulsi+0x1>
    3080:	80 93 2c 0b 	sts	0x0B2C, r24	; 0x800b2c <impulsi>
    my_delay_ms(debounceDelay);
    3084:	60 91 49 01 	lds	r22, 0x0149	; 0x800149 <debounceDelay>
    3088:	70 91 4a 01 	lds	r23, 0x014A	; 0x80014a <debounceDelay+0x1>
    308c:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <debounceDelay+0x2>
    3090:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <debounceDelay+0x3>
    3094:	0e 94 13 36 	call	0x6c26	; 0x6c26 <__fixsfsi>
    3098:	cb 01       	movw	r24, r22
    309a:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <_Z11my_delay_msi>
  }
}
    309e:	ff 91       	pop	r31
    30a0:	ef 91       	pop	r30
    30a2:	bf 91       	pop	r27
    30a4:	af 91       	pop	r26
    30a6:	9f 91       	pop	r25
    30a8:	8f 91       	pop	r24
    30aa:	7f 91       	pop	r23
    30ac:	6f 91       	pop	r22
    30ae:	5f 91       	pop	r21
    30b0:	4f 91       	pop	r20
    30b2:	3f 91       	pop	r19
    30b4:	2f 91       	pop	r18
    30b6:	0f 90       	pop	r0
    30b8:	0b be       	out	0x3b, r0	; 59
    30ba:	0f 90       	pop	r0
    30bc:	0f be       	out	0x3f, r0	; 63
    30be:	0f 90       	pop	r0
    30c0:	1f 90       	pop	r1
    30c2:	18 95       	reti

000030c4 <__vector_7>:
/***********************************************************************/

// interrupt per pulsanti abilitazione diesele benzina

ISR(PCINT3_vect) {
    30c4:	1f 92       	push	r1
    30c6:	0f 92       	push	r0
    30c8:	0f b6       	in	r0, 0x3f	; 63
    30ca:	0f 92       	push	r0
    30cc:	11 24       	eor	r1, r1
    30ce:	8f 93       	push	r24
    30d0:	9f 93       	push	r25

  if (stato_procedura == 4)
    30d2:	80 91 2e 0b 	lds	r24, 0x0B2E	; 0x800b2e <stato_procedura>
    30d6:	90 91 2f 0b 	lds	r25, 0x0B2F	; 0x800b2f <stato_procedura+0x1>
    30da:	04 97       	sbiw	r24, 0x04	; 4
    30dc:	09 f0       	breq	.+2      	; 0x30e0 <__vector_7+0x1c>
    30de:	6a c0       	rjmp	.+212    	; 0x31b4 <__vector_7+0xf0>
  {
    if (PIND & _BV(PD6))
    30e0:	4e 9b       	sbis	0x09, 6	; 9
    30e2:	1c c0       	rjmp	.+56     	; 0x311c <__vector_7+0x58>
    {
      intConsecutivePresses++;  // increment counter for number of presses           
    30e4:	80 91 8b 0b 	lds	r24, 0x0B8B	; 0x800b8b <intConsecutivePresses>
    30e8:	90 91 8c 0b 	lds	r25, 0x0B8C	; 0x800b8c <intConsecutivePresses+0x1>
    30ec:	01 96       	adiw	r24, 0x01	; 1
    30ee:	90 93 8c 0b 	sts	0x0B8C, r25	; 0x800b8c <intConsecutivePresses+0x1>
    30f2:	80 93 8b 0b 	sts	0x0B8B, r24	; 0x800b8b <intConsecutivePresses>
      if (intConsecutivePresses >= NUM_OF_CONSECUTIVE_PRESSES)
    30f6:	80 91 8b 0b 	lds	r24, 0x0B8B	; 0x800b8b <intConsecutivePresses>
    30fa:	90 91 8c 0b 	lds	r25, 0x0B8C	; 0x800b8c <intConsecutivePresses+0x1>
    30fe:	18 16       	cp	r1, r24
    3100:	19 06       	cpc	r1, r25
    3102:	1c f5       	brge	.+70     	; 0x314a <__vector_7+0x86>
      { // if enough presses to constitute a press
        intConsecutivePresses = 0;                    // and reset press counts
    3104:	10 92 8c 0b 	sts	0x0B8C, r1	; 0x800b8c <intConsecutivePresses+0x1>
    3108:	10 92 8b 0b 	sts	0x0B8B, r1	; 0x800b8b <intConsecutivePresses>
        intConsecutiveNonPresses = 0;        
    310c:	10 92 8a 0b 	sts	0x0B8A, r1	; 0x800b8a <intConsecutiveNonPresses+0x1>
    3110:	10 92 89 0b 	sts	0x0B89, r1	; 0x800b89 <intConsecutiveNonPresses>
        distr_selezionato = 2;
    3114:	82 e0       	ldi	r24, 0x02	; 2
    3116:	80 93 2b 0b 	sts	0x0B2B, r24	; 0x800b2b <distr_selezionato>
    311a:	17 c0       	rjmp	.+46     	; 0x314a <__vector_7+0x86>
      }
    }
    else  {           // else if button is not pressed (logic low)
      intConsecutiveNonPresses++;
    311c:	80 91 89 0b 	lds	r24, 0x0B89	; 0x800b89 <intConsecutiveNonPresses>
    3120:	90 91 8a 0b 	lds	r25, 0x0B8A	; 0x800b8a <intConsecutiveNonPresses+0x1>
    3124:	01 96       	adiw	r24, 0x01	; 1
    3126:	90 93 8a 0b 	sts	0x0B8A, r25	; 0x800b8a <intConsecutiveNonPresses+0x1>
    312a:	80 93 89 0b 	sts	0x0B89, r24	; 0x800b89 <intConsecutiveNonPresses>
      if (intConsecutiveNonPresses >= NUM_OF_CONSECUTIVE_NON_PRESSES) {
    312e:	80 91 89 0b 	lds	r24, 0x0B89	; 0x800b89 <intConsecutiveNonPresses>
    3132:	90 91 8a 0b 	lds	r25, 0x0B8A	; 0x800b8a <intConsecutiveNonPresses+0x1>
    3136:	02 97       	sbiw	r24, 0x02	; 2
    3138:	44 f0       	brlt	.+16     	; 0x314a <__vector_7+0x86>
        intConsecutivePresses = 0;                      // reset press counts
    313a:	10 92 8c 0b 	sts	0x0B8C, r1	; 0x800b8c <intConsecutivePresses+0x1>
    313e:	10 92 8b 0b 	sts	0x0B8B, r1	; 0x800b8b <intConsecutivePresses>
        intConsecutiveNonPresses = 0;
    3142:	10 92 8a 0b 	sts	0x0B8A, r1	; 0x800b8a <intConsecutiveNonPresses+0x1>
    3146:	10 92 89 0b 	sts	0x0B89, r1	; 0x800b89 <intConsecutiveNonPresses>
      }
    }

    if (PIND & _BV(PD7))
    314a:	4f 9b       	sbis	0x09, 7	; 9
    314c:	1c c0       	rjmp	.+56     	; 0x3186 <__vector_7+0xc2>
    {      
      intConsecutivePresses++;  // increment counter for number of presses
    314e:	80 91 8b 0b 	lds	r24, 0x0B8B	; 0x800b8b <intConsecutivePresses>
    3152:	90 91 8c 0b 	lds	r25, 0x0B8C	; 0x800b8c <intConsecutivePresses+0x1>
    3156:	01 96       	adiw	r24, 0x01	; 1
    3158:	90 93 8c 0b 	sts	0x0B8C, r25	; 0x800b8c <intConsecutivePresses+0x1>
    315c:	80 93 8b 0b 	sts	0x0B8B, r24	; 0x800b8b <intConsecutivePresses>
      if (intConsecutivePresses >= NUM_OF_CONSECUTIVE_PRESSES)
    3160:	80 91 8b 0b 	lds	r24, 0x0B8B	; 0x800b8b <intConsecutivePresses>
    3164:	90 91 8c 0b 	lds	r25, 0x0B8C	; 0x800b8c <intConsecutivePresses+0x1>
    3168:	18 16       	cp	r1, r24
    316a:	19 06       	cpc	r1, r25
    316c:	1c f5       	brge	.+70     	; 0x31b4 <__vector_7+0xf0>
      { // if enough presses to constitute a press
        intConsecutivePresses = 0;                    // and reset press counts
    316e:	10 92 8c 0b 	sts	0x0B8C, r1	; 0x800b8c <intConsecutivePresses+0x1>
    3172:	10 92 8b 0b 	sts	0x0B8B, r1	; 0x800b8b <intConsecutivePresses>
        intConsecutiveNonPresses = 0;        
    3176:	10 92 8a 0b 	sts	0x0B8A, r1	; 0x800b8a <intConsecutiveNonPresses+0x1>
    317a:	10 92 89 0b 	sts	0x0B89, r1	; 0x800b89 <intConsecutiveNonPresses>
        distr_selezionato = 1;
    317e:	81 e0       	ldi	r24, 0x01	; 1
    3180:	80 93 2b 0b 	sts	0x0B2B, r24	; 0x800b2b <distr_selezionato>
    3184:	17 c0       	rjmp	.+46     	; 0x31b4 <__vector_7+0xf0>
      }
    }
    else  {            // else if button is not pressed (logic low)
      intConsecutiveNonPresses++;
    3186:	80 91 89 0b 	lds	r24, 0x0B89	; 0x800b89 <intConsecutiveNonPresses>
    318a:	90 91 8a 0b 	lds	r25, 0x0B8A	; 0x800b8a <intConsecutiveNonPresses+0x1>
    318e:	01 96       	adiw	r24, 0x01	; 1
    3190:	90 93 8a 0b 	sts	0x0B8A, r25	; 0x800b8a <intConsecutiveNonPresses+0x1>
    3194:	80 93 89 0b 	sts	0x0B89, r24	; 0x800b89 <intConsecutiveNonPresses>
      if (intConsecutiveNonPresses >= NUM_OF_CONSECUTIVE_NON_PRESSES) {
    3198:	80 91 89 0b 	lds	r24, 0x0B89	; 0x800b89 <intConsecutiveNonPresses>
    319c:	90 91 8a 0b 	lds	r25, 0x0B8A	; 0x800b8a <intConsecutiveNonPresses+0x1>
    31a0:	02 97       	sbiw	r24, 0x02	; 2
    31a2:	44 f0       	brlt	.+16     	; 0x31b4 <__vector_7+0xf0>
        intConsecutivePresses = 0;                     // reset press counts
    31a4:	10 92 8c 0b 	sts	0x0B8C, r1	; 0x800b8c <intConsecutivePresses+0x1>
    31a8:	10 92 8b 0b 	sts	0x0B8B, r1	; 0x800b8b <intConsecutivePresses>
        intConsecutiveNonPresses = 0;
    31ac:	10 92 8a 0b 	sts	0x0B8A, r1	; 0x800b8a <intConsecutiveNonPresses+0x1>
    31b0:	10 92 89 0b 	sts	0x0B89, r1	; 0x800b89 <intConsecutiveNonPresses>
      }
    }
  }
    31b4:	9f 91       	pop	r25
    31b6:	8f 91       	pop	r24
    31b8:	0f 90       	pop	r0
    31ba:	0f be       	out	0x3f, r0	; 63
    31bc:	0f 90       	pop	r0
    31be:	1f 90       	pop	r1
    31c0:	18 95       	reti

000031c2 <_GLOBAL__sub_I_ParametriCCEC>:
    31c2:	8f 92       	push	r8
    31c4:	af 92       	push	r10
    31c6:	cf 92       	push	r12
    31c8:	ef 92       	push	r14
    31ca:	0f 93       	push	r16
    31cc:	cf 93       	push	r28
    31ce:	df 93       	push	r29
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    31d0:	00 e0       	ldi	r16, 0x00	; 0
    31d2:	20 e0       	ldi	r18, 0x00	; 0
    31d4:	40 e0       	ldi	r20, 0x00	; 0
    31d6:	60 e0       	ldi	r22, 0x00	; 0
    31d8:	81 ed       	ldi	r24, 0xD1	; 209
    31da:	9b e0       	ldi	r25, 0x0B	; 11
    31dc:	0e 94 ce 37 	call	0x6f9c	; 0x6f9c <_ZN9IPAddressC1Ehhhh>

ParametriCCEC_TypeDef Parametri[numero_parametri] =
{ {"DNS NAME SERVER\0", "ccec.sa.dipvvf.it\0", 1000},
{"IP CCEC\0", "192.168.0.50\0", 1020},
{"Impulsi al litro\0", "100\0", 1035}
};
    31e0:	6d e6       	ldi	r22, 0x6D	; 109
    31e2:	71 e0       	ldi	r23, 0x01	; 1
    31e4:	85 ea       	ldi	r24, 0xA5	; 165
    31e6:	9b e0       	ldi	r25, 0x0B	; 11
    31e8:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
    31ec:	6e e7       	ldi	r22, 0x7E	; 126
    31ee:	71 e0       	ldi	r23, 0x01	; 1
    31f0:	8b ea       	ldi	r24, 0xAB	; 171
    31f2:	9b e0       	ldi	r25, 0x0B	; 11
    31f4:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
    31f8:	c5 ea       	ldi	r28, 0xA5	; 165
    31fa:	db e0       	ldi	r29, 0x0B	; 11
    31fc:	88 ee       	ldi	r24, 0xE8	; 232
    31fe:	93 e0       	ldi	r25, 0x03	; 3
    3200:	9d 87       	std	Y+13, r25	; 0x0d
    3202:	8c 87       	std	Y+12, r24	; 0x0c
    3204:	61 e9       	ldi	r22, 0x91	; 145
    3206:	71 e0       	ldi	r23, 0x01	; 1
    3208:	83 eb       	ldi	r24, 0xB3	; 179
    320a:	9b e0       	ldi	r25, 0x0B	; 11
    320c:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
    3210:	6a e9       	ldi	r22, 0x9A	; 154
    3212:	71 e0       	ldi	r23, 0x01	; 1
    3214:	89 eb       	ldi	r24, 0xB9	; 185
    3216:	9b e0       	ldi	r25, 0x0B	; 11
    3218:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
    321c:	8c ef       	ldi	r24, 0xFC	; 252
    321e:	93 e0       	ldi	r25, 0x03	; 3
    3220:	9b 8f       	std	Y+27, r25	; 0x1b
    3222:	8a 8f       	std	Y+26, r24	; 0x1a
    3224:	68 ea       	ldi	r22, 0xA8	; 168
    3226:	71 e0       	ldi	r23, 0x01	; 1
    3228:	81 ec       	ldi	r24, 0xC1	; 193
    322a:	9b e0       	ldi	r25, 0x0B	; 11
    322c:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
    3230:	6a eb       	ldi	r22, 0xBA	; 186
    3232:	71 e0       	ldi	r23, 0x01	; 1
    3234:	87 ec       	ldi	r24, 0xC7	; 199
    3236:	9b e0       	ldi	r25, 0x0B	; 11
    3238:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
    323c:	8b e0       	ldi	r24, 0x0B	; 11
    323e:	94 e0       	ldi	r25, 0x04	; 4
    3240:	99 a7       	std	Y+41, r25	; 0x29
    3242:	88 a7       	std	Y+40, r24	; 0x28

Erogazioni_TypeDef Erogazioni[numero_Erog_salvate] =
{	{"DD92743A;28530;D;50.37;1111;000;SA1001\0", 2000},
	{"DD92743A;22530;D;5.37;1111;000;SA1001\0", 2040},
	{"DD92743A;26530;D;180.37;1111;000;SA1001\0", 2080}
};
    3244:	6f eb       	ldi	r22, 0xBF	; 191
    3246:	71 e0       	ldi	r23, 0x01	; 1
    3248:	8d e8       	ldi	r24, 0x8D	; 141
    324a:	9b e0       	ldi	r25, 0x0B	; 11
    324c:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
    3250:	cd e8       	ldi	r28, 0x8D	; 141
    3252:	db e0       	ldi	r29, 0x0B	; 11
    3254:	80 ed       	ldi	r24, 0xD0	; 208
    3256:	97 e0       	ldi	r25, 0x07	; 7
    3258:	9f 83       	std	Y+7, r25	; 0x07
    325a:	8e 83       	std	Y+6, r24	; 0x06
    325c:	67 ee       	ldi	r22, 0xE7	; 231
    325e:	71 e0       	ldi	r23, 0x01	; 1
    3260:	85 e9       	ldi	r24, 0x95	; 149
    3262:	9b e0       	ldi	r25, 0x0B	; 11
    3264:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
    3268:	88 ef       	ldi	r24, 0xF8	; 248
    326a:	97 e0       	ldi	r25, 0x07	; 7
    326c:	9f 87       	std	Y+15, r25	; 0x0f
    326e:	8e 87       	std	Y+14, r24	; 0x0e
    3270:	6e e0       	ldi	r22, 0x0E	; 14
    3272:	72 e0       	ldi	r23, 0x02	; 2
    3274:	8d e9       	ldi	r24, 0x9D	; 157
    3276:	9b e0       	ldi	r25, 0x0B	; 11
    3278:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
    327c:	80 e2       	ldi	r24, 0x20	; 32
    327e:	98 e0       	ldi	r25, 0x08	; 8
    3280:	9f 8b       	std	Y+23, r25	; 0x17
    3282:	8e 8b       	std	Y+22, r24	; 0x16

volatile int intConsecutivePresses = 0;
volatile int intConsecutiveNonPresses = 0;
const uint8_t I2C_PCA9534_ADDR = 0x20;

struct mezzoType {
    3284:	62 e4       	ldi	r22, 0x42	; 66
    3286:	72 e0       	ldi	r23, 0x02	; 2
    3288:	87 e7       	ldi	r24, 0x77	; 119
    328a:	9b e0       	ldi	r25, 0x0B	; 11
    328c:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
    3290:	62 e4       	ldi	r22, 0x42	; 66
    3292:	72 e0       	ldi	r23, 0x02	; 2
    3294:	8d e7       	ldi	r24, 0x7D	; 125
    3296:	9b e0       	ldi	r25, 0x0B	; 11
    3298:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
    329c:	62 e4       	ldi	r22, 0x42	; 66
    329e:	72 e0       	ldi	r23, 0x02	; 2
    32a0:	83 e8       	ldi	r24, 0x83	; 131
    32a2:	9b e0       	ldi	r25, 0x0B	; 11
    32a4:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
uint8_t uid[] = { 0, 0, 0, 0, 0, 0, 0 };       // Buffer dove memorizzo la UID del Badge
uint8_t uidLength;                             // Length of the UID (4 or 7 bytes depending on ISO14443A card type)
uint8_t uidMezzo[] = { 0, 0, 0, 0, 0, 0, 0 };  // Buffer dove memorizzo la UID del Badge Mezzo
boolean alreadyTimbrata = false;

LiquidCrystal_I2C lcd(0x27, 2, 1, 0, 4, 5, 6, 7, 3, POSITIVE);  // Set the LCD I2C address
    32a8:	1f 92       	push	r1
    32aa:	83 e0       	ldi	r24, 0x03	; 3
    32ac:	8f 93       	push	r24
    32ae:	87 e0       	ldi	r24, 0x07	; 7
    32b0:	88 2e       	mov	r8, r24
    32b2:	96 e0       	ldi	r25, 0x06	; 6
    32b4:	a9 2e       	mov	r10, r25
    32b6:	25 e0       	ldi	r18, 0x05	; 5
    32b8:	c2 2e       	mov	r12, r18
    32ba:	34 e0       	ldi	r19, 0x04	; 4
    32bc:	e3 2e       	mov	r14, r19
    32be:	21 e0       	ldi	r18, 0x01	; 1
    32c0:	42 e0       	ldi	r20, 0x02	; 2
    32c2:	67 e2       	ldi	r22, 0x27	; 39
    32c4:	85 e5       	ldi	r24, 0x55	; 85
    32c6:	9b e0       	ldi	r25, 0x0B	; 11
    32c8:	0e 94 25 31 	call	0x624a	; 0x624a <_ZN17LiquidCrystal_I2CC1Ehhhhhhhhh13t_backlighPol>
uint8_t Clessidra[8] = {0x1F, 0x11, 0x0A, 0x04, 0x04, 0x0E, 0x1F, 0x1F,};
NFC_PN532 nfc(PN532_IRQ, PN532_RESET);
    32cc:	43 e0       	ldi	r20, 0x03	; 3
    32ce:	64 e0       	ldi	r22, 0x04	; 4
    32d0:	8e e3       	ldi	r24, 0x3E	; 62
    32d2:	9b e0       	ldi	r25, 0x0B	; 11
    32d4:	04 d4       	rcall	.+2056   	; 0x3ade <_ZN9NFC_PN532C1Ehh>

String StatoAttuale = "START...";
    32d6:	65 e9       	ldi	r22, 0x95	; 149
    32d8:	78 e0       	ldi	r23, 0x08	; 8
    32da:	88 e3       	ldi	r24, 0x38	; 56
    32dc:	9b e0       	ldi	r25, 0x0B	; 11
    32de:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
String strURLAPI = "";
    32e2:	62 e4       	ldi	r22, 0x42	; 66
    32e4:	72 e0       	ldi	r23, 0x02	; 2
    32e6:	82 e3       	ldi	r24, 0x32	; 50
    32e8:	9b e0       	ldi	r25, 0x0B	; 11
    32ea:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>

uint8_t distr_selezionato = 0;
/*** GESTIONE HTTP REQUEST ***/

int HTTP_len_response = 12;
String RispostaHTTP = "";
    32ee:	62 e4       	ldi	r22, 0x42	; 66
    32f0:	72 e0       	ldi	r23, 0x02	; 2
    32f2:	85 e2       	ldi	r24, 0x25	; 37
    32f4:	9b e0       	ldi	r25, 0x0B	; 11
    32f6:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
// Ate;TARGA;CARB;LT;KM;
String RaccoltaDati[] = {"", "", "", "", "", ""};
    32fa:	62 e4       	ldi	r22, 0x42	; 66
    32fc:	72 e0       	ldi	r23, 0x02	; 2
    32fe:	81 e0       	ldi	r24, 0x01	; 1
    3300:	9b e0       	ldi	r25, 0x0B	; 11
    3302:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
    3306:	62 e4       	ldi	r22, 0x42	; 66
    3308:	72 e0       	ldi	r23, 0x02	; 2
    330a:	87 e0       	ldi	r24, 0x07	; 7
    330c:	9b e0       	ldi	r25, 0x0B	; 11
    330e:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
    3312:	62 e4       	ldi	r22, 0x42	; 66
    3314:	72 e0       	ldi	r23, 0x02	; 2
    3316:	8d e0       	ldi	r24, 0x0D	; 13
    3318:	9b e0       	ldi	r25, 0x0B	; 11
    331a:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
    331e:	62 e4       	ldi	r22, 0x42	; 66
    3320:	72 e0       	ldi	r23, 0x02	; 2
    3322:	83 e1       	ldi	r24, 0x13	; 19
    3324:	9b e0       	ldi	r25, 0x0B	; 11
    3326:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
    332a:	62 e4       	ldi	r22, 0x42	; 66
    332c:	72 e0       	ldi	r23, 0x02	; 2
    332e:	89 e1       	ldi	r24, 0x19	; 25
    3330:	9b e0       	ldi	r25, 0x0B	; 11
    3332:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
    3336:	62 e4       	ldi	r22, 0x42	; 66
    3338:	72 e0       	ldi	r23, 0x02	; 2
    333a:	8f e1       	ldi	r24, 0x1F	; 31
    333c:	9b e0       	ldi	r25, 0x0B	; 11
    333e:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
// String Carburante = "X";
String Risposta = "";
    3342:	62 e4       	ldi	r22, 0x42	; 66
    3344:	72 e0       	ldi	r23, 0x02	; 2
    3346:	8b ef       	ldi	r24, 0xFB	; 251
    3348:	9a e0       	ldi	r25, 0x0A	; 10
    334a:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
String Messaggio = "";
    334e:	62 e4       	ldi	r22, 0x42	; 66
    3350:	72 e0       	ldi	r23, 0x02	; 2
    3352:	85 ef       	ldi	r24, 0xF5	; 245
    3354:	9a e0       	ldi	r25, 0x0A	; 10
    3356:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
String righeDisplay[] = {"X", "X", "X", "X"};
    335a:	6a e1       	ldi	r22, 0x1A	; 26
    335c:	75 e0       	ldi	r23, 0x05	; 5
    335e:	8d ed       	ldi	r24, 0xDD	; 221
    3360:	9a e0       	ldi	r25, 0x0A	; 10
    3362:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
    3366:	6a e1       	ldi	r22, 0x1A	; 26
    3368:	75 e0       	ldi	r23, 0x05	; 5
    336a:	83 ee       	ldi	r24, 0xE3	; 227
    336c:	9a e0       	ldi	r25, 0x0A	; 10
    336e:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
    3372:	6a e1       	ldi	r22, 0x1A	; 26
    3374:	75 e0       	ldi	r23, 0x05	; 5
    3376:	89 ee       	ldi	r24, 0xE9	; 233
    3378:	9a e0       	ldi	r25, 0x0A	; 10
    337a:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
    337e:	6a e1       	ldi	r22, 0x1A	; 26
    3380:	75 e0       	ldi	r23, 0x05	; 5
    3382:	8f ee       	ldi	r24, 0xEF	; 239
    3384:	9a e0       	ldi	r25, 0x0A	; 10
    3386:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
char CodSede[] = "SA1001";
/********************************************************************************************/
/*                    Configurazione Rete                       */
/********************************************************************************************/

IPAddress ipCCEC(192, 168, 0, 50);
    338a:	02 e3       	ldi	r16, 0x32	; 50
    338c:	20 e0       	ldi	r18, 0x00	; 0
    338e:	48 ea       	ldi	r20, 0xA8	; 168
    3390:	60 ec       	ldi	r22, 0xC0	; 192
    3392:	87 ed       	ldi	r24, 0xD7	; 215
    3394:	9a e0       	ldi	r25, 0x0A	; 10
    3396:	0e 94 ce 37 	call	0x6f9c	; 0x6f9c <_ZN9IPAddressC1Ehhhh>
IPAddress myDns(192, 168, 1, 21); // DNS
    339a:	05 e1       	ldi	r16, 0x15	; 21
    339c:	21 e0       	ldi	r18, 0x01	; 1
    339e:	48 ea       	ldi	r20, 0xA8	; 168
    33a0:	60 ec       	ldi	r22, 0xC0	; 192
    33a2:	81 ed       	ldi	r24, 0xD1	; 209
    33a4:	9a e0       	ldi	r25, 0x0A	; 10
    33a6:	0e 94 ce 37 	call	0x6f9c	; 0x6f9c <_ZN9IPAddressC1Ehhhh>
IPAddress gateway(192, 168, 0, 1); // GATEWAY
    33aa:	01 e0       	ldi	r16, 0x01	; 1
    33ac:	20 e0       	ldi	r18, 0x00	; 0
    33ae:	48 ea       	ldi	r20, 0xA8	; 168
    33b0:	60 ec       	ldi	r22, 0xC0	; 192
    33b2:	8b ec       	ldi	r24, 0xCB	; 203
    33b4:	9a e0       	ldi	r25, 0x0A	; 10
    33b6:	0e 94 ce 37 	call	0x6f9c	; 0x6f9c <_ZN9IPAddressC1Ehhhh>
IPAddress subnet(255, 255, 0, 0); // SUBNET
    33ba:	00 e0       	ldi	r16, 0x00	; 0
    33bc:	20 e0       	ldi	r18, 0x00	; 0
    33be:	4f ef       	ldi	r20, 0xFF	; 255
    33c0:	6f ef       	ldi	r22, 0xFF	; 255
    33c2:	85 ec       	ldi	r24, 0xC5	; 197
    33c4:	9a e0       	ldi	r25, 0x0A	; 10
    33c6:	0e 94 ce 37 	call	0x6f9c	; 0x6f9c <_ZN9IPAddressC1Ehhhh>

char serverATE[]  = "wbpate-test.dipvvf.it";
char serverGAC[]  = "gacweb-test.dipvvf.it";
char serverREST[] = "ccec.sa.dipvvf.it";

EthernetClient clientLOCAL;
    33ca:	88 eb       	ldi	r24, 0xB8	; 184
    33cc:	9a e0       	ldi	r25, 0x0A	; 10
    33ce:	0e 94 8b 28 	call	0x5116	; 0x5116 <_ZN14EthernetClientC1Ev>
EthernetClient clientATE;
    33d2:	8b ea       	ldi	r24, 0xAB	; 171
    33d4:	9a e0       	ldi	r25, 0x0A	; 10
    33d6:	0e 94 8b 28 	call	0x5116	; 0x5116 <_ZN14EthernetClientC1Ev>

byte mac[] = {0x00, 0x0E, 0x0C, 0xB0, 0x25, 0x6F};
/********************************************************************************************/
/*                    Real Time Clock                       */
/********************************************************************************************/
DS3231M_Class DS3231M;
    33da:	8f e9       	ldi	r24, 0x9F	; 159
    33dc:	9a e0       	ldi	r25, 0x0A	; 10
    33de:	0e 94 68 22 	call	0x44d0	; 0x44d0 <_ZN13DS3231M_ClassC1Ev>
const uint8_t SPRINTF_BUFFER_SIZE =     32;
char          inputBuffer[SPRINTF_BUFFER_SIZE];
unsigned long secs;                            // store the seconds value
unsigned long UltimoPassaggioStato = 0;        // Timer Stati Procedura
unsigned long Timer = 0;                       // Timer
DateTime nowTimer;
    33e2:	40 e0       	ldi	r20, 0x00	; 0
    33e4:	50 e0       	ldi	r21, 0x00	; 0
    33e6:	ba 01       	movw	r22, r20
    33e8:	8d e8       	ldi	r24, 0x8D	; 141
    33ea:	9a e0       	ldi	r25, 0x0A	; 10
    33ec:	05 d7       	rcall	.+3594   	; 0x41f8 <_ZN8DateTimeC1Em>
/********************************************************************************************/

const byte ROWS = 4; //four rows
const byte COLS = 4; //four columns

String TARGA = "";
    33ee:	62 e4       	ldi	r22, 0x42	; 66
    33f0:	72 e0       	ldi	r23, 0x02	; 2
    33f2:	87 e8       	ldi	r24, 0x87	; 135
    33f4:	9a e0       	ldi	r25, 0x0A	; 10
    33f6:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
String KM = "";
    33fa:	62 e4       	ldi	r22, 0x42	; 66
    33fc:	72 e0       	ldi	r23, 0x02	; 2
    33fe:	81 e8       	ldi	r24, 0x81	; 129
    3400:	9a e0       	ldi	r25, 0x0A	; 10
    3402:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', '.'}
};

PCA9534 gpio;
    3406:	0f 90       	pop	r0
    3408:	0f 90       	pop	r0
    340a:	8e e7       	ldi	r24, 0x7E	; 126
    340c:	9a e0       	ldi	r25, 0x0A	; 10
        intConsecutivePresses = 0;                     // reset press counts
        intConsecutiveNonPresses = 0;
      }
    }
  }
    340e:	df 91       	pop	r29
    3410:	cf 91       	pop	r28
    3412:	0f 91       	pop	r16
    3414:	ef 90       	pop	r14
    3416:	cf 90       	pop	r12
    3418:	af 90       	pop	r10
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', '.'}
};

PCA9534 gpio;
    341a:	8f 90       	pop	r8
    341c:	c0 c2       	rjmp	.+1408   	; 0x399e <_ZN7PCA9534C1Ev>

0000341e <_GLOBAL__sub_D_ParametriCCEC>:
        intConsecutivePresses = 0;                     // reset press counts
        intConsecutiveNonPresses = 0;
      }
    }
  }
    341e:	cf 93       	push	r28
    3420:	df 93       	push	r29

const byte ROWS = 4; //four rows
const byte COLS = 4; //four columns

String TARGA = "";
String KM = "";
    3422:	81 e8       	ldi	r24, 0x81	; 129
    3424:	9a e0       	ldi	r25, 0x0A	; 10
    3426:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
/********************************************************************************************/

const byte ROWS = 4; //four rows
const byte COLS = 4; //four columns

String TARGA = "";
    342a:	87 e8       	ldi	r24, 0x87	; 135
    342c:	9a e0       	ldi	r25, 0x0A	; 10
    342e:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>

byte mac[] = {0x00, 0x0E, 0x0C, 0xB0, 0x25, 0x6F};
/********************************************************************************************/
/*                    Real Time Clock                       */
/********************************************************************************************/
DS3231M_Class DS3231M;
    3432:	8f e9       	ldi	r24, 0x9F	; 159
    3434:	9a e0       	ldi	r25, 0x0A	; 10
    3436:	0e 94 6f 22 	call	0x44de	; 0x44de <_ZN13DS3231M_ClassD1Ev>
// Ate;TARGA;CARB;LT;KM;
String RaccoltaDati[] = {"", "", "", "", "", ""};
// String Carburante = "X";
String Risposta = "";
String Messaggio = "";
String righeDisplay[] = {"X", "X", "X", "X"};
    343a:	8f ee       	ldi	r24, 0xEF	; 239
    343c:	9a e0       	ldi	r25, 0x0A	; 10
    343e:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
    3442:	89 ee       	ldi	r24, 0xE9	; 233
    3444:	9a e0       	ldi	r25, 0x0A	; 10
    3446:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
    344a:	83 ee       	ldi	r24, 0xE3	; 227
    344c:	9a e0       	ldi	r25, 0x0A	; 10
    344e:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
    3452:	8d ed       	ldi	r24, 0xDD	; 221
    3454:	9a e0       	ldi	r25, 0x0A	; 10
    3456:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
String RispostaHTTP = "";
// Ate;TARGA;CARB;LT;KM;
String RaccoltaDati[] = {"", "", "", "", "", ""};
// String Carburante = "X";
String Risposta = "";
String Messaggio = "";
    345a:	85 ef       	ldi	r24, 0xF5	; 245
    345c:	9a e0       	ldi	r25, 0x0A	; 10
    345e:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
int HTTP_len_response = 12;
String RispostaHTTP = "";
// Ate;TARGA;CARB;LT;KM;
String RaccoltaDati[] = {"", "", "", "", "", ""};
// String Carburante = "X";
String Risposta = "";
    3462:	8b ef       	ldi	r24, 0xFB	; 251
    3464:	9a e0       	ldi	r25, 0x0A	; 10
    3466:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
/*** GESTIONE HTTP REQUEST ***/

int HTTP_len_response = 12;
String RispostaHTTP = "";
// Ate;TARGA;CARB;LT;KM;
String RaccoltaDati[] = {"", "", "", "", "", ""};
    346a:	c5 e2       	ldi	r28, 0x25	; 37
    346c:	db e0       	ldi	r29, 0x0B	; 11
    346e:	26 97       	sbiw	r28, 0x06	; 6
    3470:	ce 01       	movw	r24, r28
    3472:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
    3476:	8b e0       	ldi	r24, 0x0B	; 11
    3478:	c1 30       	cpi	r28, 0x01	; 1
    347a:	d8 07       	cpc	r29, r24
    347c:	c1 f7       	brne	.-16     	; 0x346e <_GLOBAL__sub_D_ParametriCCEC+0x50>

uint8_t distr_selezionato = 0;
/*** GESTIONE HTTP REQUEST ***/

int HTTP_len_response = 12;
String RispostaHTTP = "";
    347e:	85 e2       	ldi	r24, 0x25	; 37
    3480:	9b e0       	ldi	r25, 0x0B	; 11
    3482:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
LiquidCrystal_I2C lcd(0x27, 2, 1, 0, 4, 5, 6, 7, 3, POSITIVE);  // Set the LCD I2C address
uint8_t Clessidra[8] = {0x1F, 0x11, 0x0A, 0x04, 0x04, 0x0E, 0x1F, 0x1F,};
NFC_PN532 nfc(PN532_IRQ, PN532_RESET);

String StatoAttuale = "START...";
String strURLAPI = "";
    3486:	82 e3       	ldi	r24, 0x32	; 50
    3488:	9b e0       	ldi	r25, 0x0B	; 11
    348a:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>

LiquidCrystal_I2C lcd(0x27, 2, 1, 0, 4, 5, 6, 7, 3, POSITIVE);  // Set the LCD I2C address
uint8_t Clessidra[8] = {0x1F, 0x11, 0x0A, 0x04, 0x04, 0x0E, 0x1F, 0x1F,};
NFC_PN532 nfc(PN532_IRQ, PN532_RESET);

String StatoAttuale = "START...";
    348e:	88 e3       	ldi	r24, 0x38	; 56
    3490:	9b e0       	ldi	r25, 0x0B	; 11
    3492:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>

volatile int intConsecutivePresses = 0;
volatile int intConsecutiveNonPresses = 0;
const uint8_t I2C_PCA9534_ADDR = 0x20;

struct mezzoType {
    3496:	83 e8       	ldi	r24, 0x83	; 131
    3498:	9b e0       	ldi	r25, 0x0B	; 11
    349a:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
    349e:	8d e7       	ldi	r24, 0x7D	; 125
    34a0:	9b e0       	ldi	r25, 0x0B	; 11
    34a2:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
    34a6:	87 e7       	ldi	r24, 0x77	; 119
    34a8:	9b e0       	ldi	r25, 0x0B	; 11
    34aa:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
 *  Author: Giovanni Barbato
 */ 

#include <EEPROM.h>

typedef struct Erogazioni_struct
    34ae:	8d e9       	ldi	r24, 0x9D	; 157
    34b0:	9b e0       	ldi	r25, 0x0B	; 11
    34b2:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
    34b6:	85 e9       	ldi	r24, 0x95	; 149
    34b8:	9b e0       	ldi	r25, 0x0B	; 11
    34ba:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
    34be:	8d e8       	ldi	r24, 0x8D	; 141
    34c0:	9b e0       	ldi	r25, 0x0B	; 11
    34c2:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>

Erogazioni_TypeDef *ErogazioniEEPROM; //puntatore  a Map memoria

#define numero_parametri 3

ParametriCCEC_TypeDef Parametri[numero_parametri] =
    34c6:	81 ec       	ldi	r24, 0xC1	; 193
    34c8:	9b e0       	ldi	r25, 0x0B	; 11
    34ca:	0e 94 5d 02 	call	0x4ba	; 0x4ba <_ZN20ParametriCCEC_structD1Ev>
    34ce:	83 eb       	ldi	r24, 0xB3	; 179
    34d0:	9b e0       	ldi	r25, 0x0B	; 11
    34d2:	0e 94 5d 02 	call	0x4ba	; 0x4ba <_ZN20ParametriCCEC_structD1Ev>
    34d6:	85 ea       	ldi	r24, 0xA5	; 165
    34d8:	9b e0       	ldi	r25, 0x0B	; 11
        intConsecutivePresses = 0;                     // reset press counts
        intConsecutiveNonPresses = 0;
      }
    }
  }
    34da:	df 91       	pop	r29
    34dc:	cf 91       	pop	r28
    34de:	0c 94 5d 02 	jmp	0x4ba	; 0x4ba <_ZN20ParametriCCEC_structD1Ev>

000034e2 <setup>:
  }
  printTab(1);
}
/************************************************************/

void setup() {
    34e2:	cf 92       	push	r12
    34e4:	df 92       	push	r13
    34e6:	ef 92       	push	r14
    34e8:	ff 92       	push	r15
    34ea:	0f 93       	push	r16
    34ec:	1f 93       	push	r17
    34ee:	cf 93       	push	r28
    34f0:	df 93       	push	r29
    34f2:	cd b7       	in	r28, 0x3d	; 61
    34f4:	de b7       	in	r29, 0x3e	; 62
    34f6:	64 97       	sbiw	r28, 0x14	; 20
    34f8:	0f b6       	in	r0, 0x3f	; 63
    34fa:	f8 94       	cli
    34fc:	de bf       	out	0x3e, r29	; 62
    34fe:	0f be       	out	0x3f, r0	; 63
    3500:	cd bf       	out	0x3d, r28	; 61
/*********************************************************************************************/
static const uint8_t RELE1 = PORTC7;
static const uint8_t RELE2 = PORTA7;
/*********************************************************************************************/
static inline void initSS_FLASH()  { DDRB |= (1 << PB4); } // set DDRB bit 4, sets PB4 for output
static inline void initSS_ETH()    { DDRC |= (1 << PC4); } // set DDRC bit 4, sets PC4 for output
    3502:	3c 9a       	sbi	0x07, 4	; 7
    3504:	8f e1       	ldi	r24, 0x1F	; 31
    3506:	9e e4       	ldi	r25, 0x4E	; 78
    3508:	01 97       	sbiw	r24, 0x01	; 1
    350a:	f1 f7       	brne	.-4      	; 0x3508 <setup+0x26>
    350c:	00 c0       	rjmp	.+0      	; 0x350e <setup+0x2c>
    350e:	00 00       	nop

void setup() {

   initSS_ETH();
   _delay_ms(5);
   disable_ETH();
    3510:	0e 94 93 01 	call	0x326	; 0x326 <_ZL11disable_ETHv>
    3514:	9f ef       	ldi	r25, 0xFF	; 255
    3516:	21 ee       	ldi	r18, 0xE1	; 225
    3518:	84 e0       	ldi	r24, 0x04	; 4
    351a:	91 50       	subi	r25, 0x01	; 1
    351c:	20 40       	sbci	r18, 0x00	; 0
    351e:	80 40       	sbci	r24, 0x00	; 0
    3520:	e1 f7       	brne	.-8      	; 0x351a <setup+0x38>
    3522:	00 c0       	rjmp	.+0      	; 0x3524 <setup+0x42>
    3524:	00 00       	nop

   // Serial.begin(115200);
   _delay_ms(100);

  Serial.println(" inizio Setup ......");
    3526:	6e e9       	ldi	r22, 0x9E	; 158
    3528:	78 e0       	ldi	r23, 0x08	; 8
    352a:	86 e2       	ldi	r24, 0x26	; 38
    352c:	9d e0       	ldi	r25, 0x0D	; 13
    352e:	0e 94 8c 38 	call	0x7118	; 0x7118 <_ZN5Print7printlnEPKc>
  printLine();
    3532:	0e 94 08 02 	call	0x410	; 0x410 <_Z9printLinev>

  /*******************************************************************************************/
  ParametriCCEC = Parametri;  
    3536:	85 ea       	ldi	r24, 0xA5	; 165
    3538:	9b e0       	ldi	r25, 0x0B	; 11
    353a:	90 93 d0 0b 	sts	0x0BD0, r25	; 0x800bd0 <ParametriCCEC+0x1>
    353e:	80 93 cf 0b 	sts	0x0BCF, r24	; 0x800bcf <ParametriCCEC>
  printLine();
    3542:	0e 94 08 02 	call	0x410	; 0x410 <_Z9printLinev>
  Serial.print("EEPROM utilizzata (byte): ");
    3546:	63 eb       	ldi	r22, 0xB3	; 179
    3548:	78 e0       	ldi	r23, 0x08	; 8
    354a:	86 e2       	ldi	r24, 0x26	; 38
    354c:	9d e0       	ldi	r25, 0x0D	; 13
    354e:	0e 94 61 38 	call	0x70c2	; 0x70c2 <_ZN5Print5printEPKc>
  Serial.print(EEPROM.length());
    3552:	4a e0       	ldi	r20, 0x0A	; 10
    3554:	50 e0       	ldi	r21, 0x00	; 0
    3556:	60 e0       	ldi	r22, 0x00	; 0
    3558:	70 e1       	ldi	r23, 0x10	; 16
    355a:	86 e2       	ldi	r24, 0x26	; 38
    355c:	9d e0       	ldi	r25, 0x0D	; 13
    355e:	0e 94 f5 38 	call	0x71ea	; 0x71ea <_ZN5Print5printEji>
  Serial.println(" ");
    3562:	65 e4       	ldi	r22, 0x45	; 69
    3564:	72 e0       	ldi	r23, 0x02	; 2
    3566:	86 e2       	ldi	r24, 0x26	; 38
    3568:	9d e0       	ldi	r25, 0x0D	; 13
    356a:	0e 94 8c 38 	call	0x7118	; 0x7118 <_ZN5Print7printlnEPKc>
  Serial.print("Scrittura Parametri CCEC");
    356e:	6e ec       	ldi	r22, 0xCE	; 206
    3570:	78 e0       	ldi	r23, 0x08	; 8
    3572:	86 e2       	ldi	r24, 0x26	; 38
    3574:	9d e0       	ldi	r25, 0x0D	; 13
    3576:	0e 94 61 38 	call	0x70c2	; 0x70c2 <_ZN5Print5printEPKc>

  String app = "";
    357a:	62 e4       	ldi	r22, 0x42	; 66
    357c:	72 e0       	ldi	r23, 0x02	; 2
    357e:	ce 01       	movw	r24, r28
    3580:	0f 96       	adiw	r24, 0x0f	; 15
    3582:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>

 clearEEPROM(0,EEPROM.length());
    3586:	60 e0       	ldi	r22, 0x00	; 0
    3588:	70 e1       	ldi	r23, 0x10	; 16
    358a:	80 e0       	ldi	r24, 0x00	; 0
    358c:	90 e0       	ldi	r25, 0x00	; 0
    358e:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <_Z11clearEEPROMii>
 if (write_eeprom_string_struct(ParametriCCEC[0])) { Serial.println("WRITE OK");}
    3592:	60 91 cf 0b 	lds	r22, 0x0BCF	; 0x800bcf <ParametriCCEC>
    3596:	70 91 d0 0b 	lds	r23, 0x0BD0	; 0x800bd0 <ParametriCCEC+0x1>
    359a:	ce 01       	movw	r24, r28
    359c:	01 96       	adiw	r24, 0x01	; 1
    359e:	0e 94 44 02 	call	0x488	; 0x488 <_ZN20ParametriCCEC_structC1ERKS_>
    35a2:	ce 01       	movw	r24, r28
    35a4:	01 96       	adiw	r24, 0x01	; 1
    35a6:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <_Z26write_eeprom_string_struct20ParametriCCEC_struct>
    35aa:	18 2f       	mov	r17, r24
    35ac:	ce 01       	movw	r24, r28
    35ae:	01 96       	adiw	r24, 0x01	; 1
    35b0:	0e 94 5d 02 	call	0x4ba	; 0x4ba <_ZN20ParametriCCEC_structD1Ev>
    35b4:	11 23       	and	r17, r17
    35b6:	31 f0       	breq	.+12     	; 0x35c4 <setup+0xe2>
    35b8:	67 ee       	ldi	r22, 0xE7	; 231
    35ba:	78 e0       	ldi	r23, 0x08	; 8
    35bc:	86 e2       	ldi	r24, 0x26	; 38
    35be:	9d e0       	ldi	r25, 0x0D	; 13
    35c0:	0e 94 8c 38 	call	0x7118	; 0x7118 <_ZN5Print7printlnEPKc>
 if (write_eeprom_string_struct(ParametriCCEC[1])) { Serial.println("WRITE OK");}
    35c4:	60 91 cf 0b 	lds	r22, 0x0BCF	; 0x800bcf <ParametriCCEC>
    35c8:	70 91 d0 0b 	lds	r23, 0x0BD0	; 0x800bd0 <ParametriCCEC+0x1>
    35cc:	62 5f       	subi	r22, 0xF2	; 242
    35ce:	7f 4f       	sbci	r23, 0xFF	; 255
    35d0:	ce 01       	movw	r24, r28
    35d2:	01 96       	adiw	r24, 0x01	; 1
    35d4:	0e 94 44 02 	call	0x488	; 0x488 <_ZN20ParametriCCEC_structC1ERKS_>
    35d8:	ce 01       	movw	r24, r28
    35da:	01 96       	adiw	r24, 0x01	; 1
    35dc:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <_Z26write_eeprom_string_struct20ParametriCCEC_struct>
    35e0:	18 2f       	mov	r17, r24
    35e2:	ce 01       	movw	r24, r28
    35e4:	01 96       	adiw	r24, 0x01	; 1
    35e6:	0e 94 5d 02 	call	0x4ba	; 0x4ba <_ZN20ParametriCCEC_structD1Ev>
    35ea:	11 23       	and	r17, r17
    35ec:	31 f0       	breq	.+12     	; 0x35fa <setup+0x118>
    35ee:	67 ee       	ldi	r22, 0xE7	; 231
    35f0:	78 e0       	ldi	r23, 0x08	; 8
    35f2:	86 e2       	ldi	r24, 0x26	; 38
    35f4:	9d e0       	ldi	r25, 0x0D	; 13
    35f6:	0e 94 8c 38 	call	0x7118	; 0x7118 <_ZN5Print7printlnEPKc>
 if (write_eeprom_string_struct(ParametriCCEC[2])) { Serial.println("WRITE OK");}
    35fa:	60 91 cf 0b 	lds	r22, 0x0BCF	; 0x800bcf <ParametriCCEC>
    35fe:	70 91 d0 0b 	lds	r23, 0x0BD0	; 0x800bd0 <ParametriCCEC+0x1>
    3602:	64 5e       	subi	r22, 0xE4	; 228
    3604:	7f 4f       	sbci	r23, 0xFF	; 255
    3606:	ce 01       	movw	r24, r28
    3608:	01 96       	adiw	r24, 0x01	; 1
    360a:	0e 94 44 02 	call	0x488	; 0x488 <_ZN20ParametriCCEC_structC1ERKS_>
    360e:	ce 01       	movw	r24, r28
    3610:	01 96       	adiw	r24, 0x01	; 1
    3612:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <_Z26write_eeprom_string_struct20ParametriCCEC_struct>
    3616:	18 2f       	mov	r17, r24
    3618:	ce 01       	movw	r24, r28
    361a:	01 96       	adiw	r24, 0x01	; 1
    361c:	0e 94 5d 02 	call	0x4ba	; 0x4ba <_ZN20ParametriCCEC_structD1Ev>
    3620:	11 23       	and	r17, r17
    3622:	31 f0       	breq	.+12     	; 0x3630 <setup+0x14e>
    3624:	67 ee       	ldi	r22, 0xE7	; 231
    3626:	78 e0       	ldi	r23, 0x08	; 8
    3628:	86 e2       	ldi	r24, 0x26	; 38
    362a:	9d e0       	ldi	r25, 0x0D	; 13
    362c:	0e 94 8c 38 	call	0x7118	; 0x7118 <_ZN5Print7printlnEPKc>
 if (write_eeprom_string_struct(ParametriCCEC[3])) { Serial.println("WRITE OK");}
    3630:	60 91 cf 0b 	lds	r22, 0x0BCF	; 0x800bcf <ParametriCCEC>
    3634:	70 91 d0 0b 	lds	r23, 0x0BD0	; 0x800bd0 <ParametriCCEC+0x1>
    3638:	66 5d       	subi	r22, 0xD6	; 214
    363a:	7f 4f       	sbci	r23, 0xFF	; 255
    363c:	ce 01       	movw	r24, r28
    363e:	01 96       	adiw	r24, 0x01	; 1
    3640:	0e 94 44 02 	call	0x488	; 0x488 <_ZN20ParametriCCEC_structC1ERKS_>
    3644:	ce 01       	movw	r24, r28
    3646:	01 96       	adiw	r24, 0x01	; 1
    3648:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <_Z26write_eeprom_string_struct20ParametriCCEC_struct>
    364c:	18 2f       	mov	r17, r24
    364e:	ce 01       	movw	r24, r28
    3650:	01 96       	adiw	r24, 0x01	; 1
    3652:	0e 94 5d 02 	call	0x4ba	; 0x4ba <_ZN20ParametriCCEC_structD1Ev>
    3656:	11 23       	and	r17, r17
    3658:	31 f0       	breq	.+12     	; 0x3666 <setup+0x184>
    365a:	67 ee       	ldi	r22, 0xE7	; 231
    365c:	78 e0       	ldi	r23, 0x08	; 8
    365e:	86 e2       	ldi	r24, 0x26	; 38
    3660:	9d e0       	ldi	r25, 0x0D	; 13
    3662:	0e 94 8c 38 	call	0x7118	; 0x7118 <_ZN5Print7printlnEPKc>

  printLine();  
    3666:	0e 94 08 02 	call	0x410	; 0x410 <_Z9printLinev>
/*******************************************************************************************/
  DDRC |= (1 << BUZZER); // set pin BUZZER (PC6) for output
    366a:	3e 9a       	sbi	0x07, 6	; 7
  DDRC |= (1 << RELE1);  // Rele1
    366c:	3f 9a       	sbi	0x07, 7	; 7
  DDRA |= (1 << RELE2);  // Rele2   // set PA7 e PC7 come output
    366e:	0f 9a       	sbi	0x01, 7	; 1
    3670:	8f e3       	ldi	r24, 0x3F	; 63
    3672:	9c e9       	ldi	r25, 0x9C	; 156
    3674:	01 97       	sbiw	r24, 0x01	; 1
    3676:	f1 f7       	brne	.-4      	; 0x3674 <setup+0x192>
    3678:	00 c0       	rjmp	.+0      	; 0x367a <setup+0x198>
    367a:	00 00       	nop
  _delay_ms(10);
  SET_BIT(PORTC, RELE1); // Apri RELE1
    367c:	47 9a       	sbi	0x08, 7	; 8
    367e:	8f e3       	ldi	r24, 0x3F	; 63
    3680:	9c e9       	ldi	r25, 0x9C	; 156
    3682:	01 97       	sbiw	r24, 0x01	; 1
    3684:	f1 f7       	brne	.-4      	; 0x3682 <setup+0x1a0>
    3686:	00 c0       	rjmp	.+0      	; 0x3688 <setup+0x1a6>
    3688:	00 00       	nop
  _delay_ms(10);
  SET_BIT(PORTA, RELE2); // Apri RELE2
    368a:	17 9a       	sbi	0x02, 7	; 2
  printLine();
    368c:	0e 94 08 02 	call	0x410	; 0x410 <_Z9printLinev>

  /***************************LCD******************************/

  lcd.begin(20, 4);        // Inizializza display LCD 20x4 e accendi e spegni 2 volte
    3690:	20 e0       	ldi	r18, 0x00	; 0
    3692:	44 e0       	ldi	r20, 0x04	; 4
    3694:	64 e1       	ldi	r22, 0x14	; 20
    3696:	85 e5       	ldi	r24, 0x55	; 85
    3698:	9b e0       	ldi	r25, 0x0B	; 11
    369a:	0e 94 ab 31 	call	0x6356	; 0x6356 <_ZN17LiquidCrystal_I2C5beginEhhh>

  // ------- 2 blinks -------------
  for (int i = 0; i < 2; i++)
  {
    lcd.backlight();
    369e:	85 e5       	ldi	r24, 0x55	; 85
    36a0:	9b e0       	ldi	r25, 0x0B	; 11
    36a2:	0e 94 88 2f 	call	0x5f10	; 0x5f10 <_ZN3LCD9backlightEv>
    36a6:	9f ef       	ldi	r25, 0xFF	; 255
    36a8:	24 e3       	ldi	r18, 0x34	; 52
    36aa:	8c e0       	ldi	r24, 0x0C	; 12
    36ac:	91 50       	subi	r25, 0x01	; 1
    36ae:	20 40       	sbci	r18, 0x00	; 0
    36b0:	80 40       	sbci	r24, 0x00	; 0
    36b2:	e1 f7       	brne	.-8      	; 0x36ac <setup+0x1ca>
    36b4:	00 c0       	rjmp	.+0      	; 0x36b6 <setup+0x1d4>
    36b6:	00 00       	nop
    _delay_ms(250);
    lcd.noBacklight();
    36b8:	85 e5       	ldi	r24, 0x55	; 85
    36ba:	9b e0       	ldi	r25, 0x0B	; 11
    36bc:	0e 94 90 2f 	call	0x5f20	; 0x5f20 <_ZN3LCD11noBacklightEv>
    36c0:	9f ef       	ldi	r25, 0xFF	; 255
    36c2:	24 e3       	ldi	r18, 0x34	; 52
    36c4:	8c e0       	ldi	r24, 0x0C	; 12
    36c6:	91 50       	subi	r25, 0x01	; 1
    36c8:	20 40       	sbci	r18, 0x00	; 0
    36ca:	80 40       	sbci	r24, 0x00	; 0
    36cc:	e1 f7       	brne	.-8      	; 0x36c6 <setup+0x1e4>
    36ce:	00 c0       	rjmp	.+0      	; 0x36d0 <setup+0x1ee>
    36d0:	00 00       	nop
  lcd.begin(20, 4);        // Inizializza display LCD 20x4 e accendi e spegni 2 volte

  // ------- 2 blinks -------------
  for (int i = 0; i < 2; i++)
  {
    lcd.backlight();
    36d2:	85 e5       	ldi	r24, 0x55	; 85
    36d4:	9b e0       	ldi	r25, 0x0B	; 11
    36d6:	0e 94 88 2f 	call	0x5f10	; 0x5f10 <_ZN3LCD9backlightEv>
    36da:	9f ef       	ldi	r25, 0xFF	; 255
    36dc:	24 e3       	ldi	r18, 0x34	; 52
    36de:	8c e0       	ldi	r24, 0x0C	; 12
    36e0:	91 50       	subi	r25, 0x01	; 1
    36e2:	20 40       	sbci	r18, 0x00	; 0
    36e4:	80 40       	sbci	r24, 0x00	; 0
    36e6:	e1 f7       	brne	.-8      	; 0x36e0 <setup+0x1fe>
    36e8:	00 c0       	rjmp	.+0      	; 0x36ea <setup+0x208>
    36ea:	00 00       	nop
    _delay_ms(250);
    lcd.noBacklight();
    36ec:	85 e5       	ldi	r24, 0x55	; 85
    36ee:	9b e0       	ldi	r25, 0x0B	; 11
    36f0:	0e 94 90 2f 	call	0x5f20	; 0x5f20 <_ZN3LCD11noBacklightEv>
    36f4:	9f ef       	ldi	r25, 0xFF	; 255
    36f6:	24 e3       	ldi	r18, 0x34	; 52
    36f8:	8c e0       	ldi	r24, 0x0C	; 12
    36fa:	91 50       	subi	r25, 0x01	; 1
    36fc:	20 40       	sbci	r18, 0x00	; 0
    36fe:	80 40       	sbci	r24, 0x00	; 0
    3700:	e1 f7       	brne	.-8      	; 0x36fa <setup+0x218>
    3702:	00 c0       	rjmp	.+0      	; 0x3704 <setup+0x222>
    3704:	00 00       	nop
    _delay_ms(250);
  }

  lcd.createChar(1, Clessidra); // Creo CHAR Clessidra
    3706:	41 e5       	ldi	r20, 0x51	; 81
    3708:	51 e0       	ldi	r21, 0x01	; 1
    370a:	61 e0       	ldi	r22, 0x01	; 1
    370c:	85 e5       	ldi	r24, 0x55	; 85
    370e:	9b e0       	ldi	r25, 0x0B	; 11
    3710:	0e 94 6e 30 	call	0x60dc	; 0x60dc <_ZN3LCD10createCharEhPh>
    3714:	9f ef       	ldi	r25, 0xFF	; 255
    3716:	29 ef       	ldi	r18, 0xF9	; 249
    3718:	80 e0       	ldi	r24, 0x00	; 0
    371a:	91 50       	subi	r25, 0x01	; 1
    371c:	20 40       	sbci	r18, 0x00	; 0
    371e:	80 40       	sbci	r24, 0x00	; 0
    3720:	e1 f7       	brne	.-8      	; 0x371a <setup+0x238>
    3722:	00 c0       	rjmp	.+0      	; 0x3724 <setup+0x242>
    3724:	00 00       	nop
  _delay_ms(20);
  lcd.backlight();
    3726:	85 e5       	ldi	r24, 0x55	; 85
    3728:	9b e0       	ldi	r25, 0x0B	; 11
    372a:	0e 94 88 2f 	call	0x5f10	; 0x5f10 <_ZN3LCD9backlightEv>
    372e:	0d ed       	ldi	r16, 0xDD	; 221
    3730:	1a e0       	ldi	r17, 0x0A	; 10

  for (int r = 0; r < 4; r++)
    righeDisplay[r] = "";
    3732:	62 e4       	ldi	r22, 0x42	; 66
    3734:	72 e0       	ldi	r23, 0x02	; 2
    3736:	c8 01       	movw	r24, r16
    3738:	0e 94 a6 3b 	call	0x774c	; 0x774c <_ZN6StringaSEPKc>
    373c:	0a 5f       	subi	r16, 0xFA	; 250
    373e:	1f 4f       	sbci	r17, 0xFF	; 255

  lcd.createChar(1, Clessidra); // Creo CHAR Clessidra
  _delay_ms(20);
  lcd.backlight();

  for (int r = 0; r < 4; r++)
    3740:	9a e0       	ldi	r25, 0x0A	; 10
    3742:	05 3f       	cpi	r16, 0xF5	; 245
    3744:	19 07       	cpc	r17, r25
    3746:	a9 f7       	brne	.-22     	; 0x3732 <setup+0x250>
    righeDisplay[r] = "";

  printLine();
    3748:	0e 94 08 02 	call	0x410	; 0x410 <_Z9printLinev>

  /***************************NFC*************************/

  nfc.begin();
    374c:	8e e3       	ldi	r24, 0x3E	; 62
    374e:	9b e0       	ldi	r25, 0x0B	; 11
    3750:	d7 d1       	rcall	.+942    	; 0x3b00 <_ZN9NFC_PN5325beginEv>
    3752:	2f ef       	ldi	r18, 0xFF	; 255
    3754:	80 e7       	ldi	r24, 0x70	; 112
    3756:	92 e0       	ldi	r25, 0x02	; 2
    3758:	21 50       	subi	r18, 0x01	; 1
    375a:	80 40       	sbci	r24, 0x00	; 0
    375c:	90 40       	sbci	r25, 0x00	; 0
    375e:	e1 f7       	brne	.-8      	; 0x3758 <setup+0x276>
    3760:	00 c0       	rjmp	.+0      	; 0x3762 <setup+0x280>
    3762:	00 00       	nop

  _delay_ms(50);

  uint32_t versiondata = nfc.getFirmwareVersion();
    3764:	8e e3       	ldi	r24, 0x3E	; 62
    3766:	9b e0       	ldi	r25, 0x0B	; 11
    3768:	6b d3       	rcall	.+1750   	; 0x3e40 <_ZN9NFC_PN53218getFirmwareVersionEv>
    376a:	6b 01       	movw	r12, r22
    376c:	7c 01       	movw	r14, r24
  if (! versiondata) {
    376e:	67 2b       	or	r22, r23
    3770:	68 2b       	or	r22, r24
    3772:	69 2b       	or	r22, r25
    3774:	69 f5       	brne	.+90     	; 0x37d0 <setup+0x2ee>
    Serial.print("Modulo PN532 non trovato");
    3776:	60 ef       	ldi	r22, 0xF0	; 240
    3778:	78 e0       	ldi	r23, 0x08	; 8
    377a:	86 e2       	ldi	r24, 0x26	; 38
    377c:	9d e0       	ldi	r25, 0x0D	; 13
    377e:	0e 94 61 38 	call	0x70c2	; 0x70c2 <_ZN5Print5printEPKc>
    lcd.backlight();
    3782:	85 e5       	ldi	r24, 0x55	; 85
    3784:	9b e0       	ldi	r25, 0x0B	; 11
    3786:	0e 94 88 2f 	call	0x5f10	; 0x5f10 <_ZN3LCD9backlightEv>
    378a:	2f ef       	ldi	r18, 0xFF	; 255
    378c:	84 e3       	ldi	r24, 0x34	; 52
    378e:	9c e0       	ldi	r25, 0x0C	; 12
    3790:	21 50       	subi	r18, 0x01	; 1
    3792:	80 40       	sbci	r24, 0x00	; 0
    3794:	90 40       	sbci	r25, 0x00	; 0
    3796:	e1 f7       	brne	.-8      	; 0x3790 <setup+0x2ae>
    3798:	00 c0       	rjmp	.+0      	; 0x379a <setup+0x2b8>
    379a:	00 00       	nop
    _delay_ms(250);
    lcd.clear();
    379c:	85 e5       	ldi	r24, 0x55	; 85
    379e:	9b e0       	ldi	r25, 0x0B	; 11
    37a0:	0e 94 a0 2f 	call	0x5f40	; 0x5f40 <_ZN3LCD5clearEv>
    lcd.print("Modulo PN532 non trovato ");
    37a4:	69 e0       	ldi	r22, 0x09	; 9
    37a6:	79 e0       	ldi	r23, 0x09	; 9
    37a8:	85 e5       	ldi	r24, 0x55	; 85
    37aa:	9b e0       	ldi	r25, 0x0B	; 11
    37ac:	0e 94 61 38 	call	0x70c2	; 0x70c2 <_ZN5Print5printEPKc>
    37b0:	2f ef       	ldi	r18, 0xFF	; 255
    37b2:	87 ea       	ldi	r24, 0xA7	; 167
    37b4:	91 e6       	ldi	r25, 0x61	; 97
    37b6:	21 50       	subi	r18, 0x01	; 1
    37b8:	80 40       	sbci	r24, 0x00	; 0
    37ba:	90 40       	sbci	r25, 0x00	; 0
    37bc:	e1 f7       	brne	.-8      	; 0x37b6 <setup+0x2d4>
    37be:	00 c0       	rjmp	.+0      	; 0x37c0 <setup+0x2de>
    37c0:	00 00       	nop
    _delay_ms(2000);
    StatoAttuale  = " CHIAMA ASSISTENZA";
    37c2:	63 e2       	ldi	r22, 0x23	; 35
    37c4:	79 e0       	ldi	r23, 0x09	; 9
    37c6:	88 e3       	ldi	r24, 0x38	; 56
    37c8:	9b e0       	ldi	r25, 0x0B	; 11
    37ca:	0e 94 a6 3b 	call	0x774c	; 0x774c <_ZN6StringaSEPKc>
    37ce:	06 c0       	rjmp	.+12     	; 0x37dc <setup+0x2fa>
    //while (1); // halt  // Aspetta per sempre
  } else {
    Serial.println("Modulo NFC OK ......");
    37d0:	66 e3       	ldi	r22, 0x36	; 54
    37d2:	79 e0       	ldi	r23, 0x09	; 9
    37d4:	86 e2       	ldi	r24, 0x26	; 38
    37d6:	9d e0       	ldi	r25, 0x0D	; 13
    37d8:	0e 94 8c 38 	call	0x7118	; 0x7118 <_ZN5Print7printlnEPKc>
  }

  Serial.print("Found chip PN5"); Serial.println((versiondata >> 24) & 0xFF, HEX);
    37dc:	6b e4       	ldi	r22, 0x4B	; 75
    37de:	79 e0       	ldi	r23, 0x09	; 9
    37e0:	86 e2       	ldi	r24, 0x26	; 38
    37e2:	9d e0       	ldi	r25, 0x0D	; 13
    37e4:	0e 94 61 38 	call	0x70c2	; 0x70c2 <_ZN5Print5printEPKc>
    37e8:	4f 2d       	mov	r20, r15
    37ea:	55 27       	eor	r21, r21
    37ec:	66 27       	eor	r22, r22
    37ee:	77 27       	eor	r23, r23
    37f0:	20 e1       	ldi	r18, 0x10	; 16
    37f2:	30 e0       	ldi	r19, 0x00	; 0
    37f4:	86 e2       	ldi	r24, 0x26	; 38
    37f6:	9d e0       	ldi	r25, 0x0D	; 13
    37f8:	0e 94 fa 38 	call	0x71f4	; 0x71f4 <_ZN5Print7printlnEmi>
  Serial.print("Firmware ver. "); Serial.print((versiondata >> 16) & 0xFF, DEC);
    37fc:	6a e5       	ldi	r22, 0x5A	; 90
    37fe:	79 e0       	ldi	r23, 0x09	; 9
    3800:	86 e2       	ldi	r24, 0x26	; 38
    3802:	9d e0       	ldi	r25, 0x0D	; 13
    3804:	0e 94 61 38 	call	0x70c2	; 0x70c2 <_ZN5Print5printEPKc>
    3808:	4e 2d       	mov	r20, r14
    380a:	50 e0       	ldi	r21, 0x00	; 0
    380c:	60 e0       	ldi	r22, 0x00	; 0
    380e:	70 e0       	ldi	r23, 0x00	; 0
    3810:	2a e0       	ldi	r18, 0x0A	; 10
    3812:	30 e0       	ldi	r19, 0x00	; 0
    3814:	86 e2       	ldi	r24, 0x26	; 38
    3816:	9d e0       	ldi	r25, 0x0D	; 13
    3818:	0e 94 e3 38 	call	0x71c6	; 0x71c6 <_ZN5Print5printEmi>
  Serial.print('.'); Serial.println((versiondata >> 8) & 0xFF, DEC);
    381c:	6e e2       	ldi	r22, 0x2E	; 46
    381e:	86 e2       	ldi	r24, 0x26	; 38
    3820:	9d e0       	ldi	r25, 0x0D	; 13
    3822:	0e 94 62 38 	call	0x70c4	; 0x70c4 <_ZN5Print5printEc>
    3826:	4d 2d       	mov	r20, r13
    3828:	50 e0       	ldi	r21, 0x00	; 0
    382a:	60 e0       	ldi	r22, 0x00	; 0
    382c:	70 e0       	ldi	r23, 0x00	; 0
    382e:	2a e0       	ldi	r18, 0x0A	; 10
    3830:	30 e0       	ldi	r19, 0x00	; 0
    3832:	86 e2       	ldi	r24, 0x26	; 38
    3834:	9d e0       	ldi	r25, 0x0D	; 13
    3836:	0e 94 fa 38 	call	0x71f4	; 0x71f4 <_ZN5Print7printlnEmi>

  nfc.setPassiveActivationRetries(0xFF);
    383a:	6f ef       	ldi	r22, 0xFF	; 255
    383c:	8e e3       	ldi	r24, 0x3E	; 62
    383e:	9b e0       	ldi	r25, 0x0B	; 11
    3840:	75 d3       	rcall	.+1770   	; 0x3f2c <_ZN9NFC_PN53227setPassiveActivationRetriesEh>
  nfc.SAMConfig();
    3842:	8e e3       	ldi	r24, 0x3E	; 62
    3844:	9b e0       	ldi	r25, 0x0B	; 11
    3846:	44 d3       	rcall	.+1672   	; 0x3ed0 <_ZN9NFC_PN5329SAMConfigEv>
    3848:	0e 94 08 02 	call	0x410	; 0x410 <_Z9printLinev>
  printLine();
    384c:	40 ea       	ldi	r20, 0xA0	; 160
  
  /*************************** RTC ************************/
  while (!DS3231M.begin()) {
    384e:	56 e8       	ldi	r21, 0x86	; 134
    3850:	61 e0       	ldi	r22, 0x01	; 1
    3852:	70 e0       	ldi	r23, 0x00	; 0
    3854:	8f e9       	ldi	r24, 0x9F	; 159
    3856:	9a e0       	ldi	r25, 0x0A	; 10
    3858:	85 d6       	rcall	.+3338   	; 0x4564 <_ZN13DS3231M_Class5beginEm>
    385a:	81 11       	cpse	r24, r1
    385c:	10 c0       	rjmp	.+32     	; 0x387e <setup+0x39c>
    385e:	60 ee       	ldi	r22, 0xE0	; 224
    Serial.println(F("non trovo modulo RTC DS3231MM. Riprovo tra 3s."));
    3860:	71 e0       	ldi	r23, 0x01	; 1
    3862:	86 e2       	ldi	r24, 0x26	; 38
    3864:	9d e0       	ldi	r25, 0x0D	; 13
    3866:	0e 94 6c 38 	call	0x70d8	; 0x70d8 <_ZN5Print7printlnEPK19__FlashStringHelper>
    386a:	2f ef       	ldi	r18, 0xFF	; 255
    386c:	83 ed       	ldi	r24, 0xD3	; 211
    386e:	90 e3       	ldi	r25, 0x30	; 48
    3870:	21 50       	subi	r18, 0x01	; 1
    3872:	80 40       	sbci	r24, 0x00	; 0
    3874:	90 40       	sbci	r25, 0x00	; 0
    3876:	e1 f7       	brne	.-8      	; 0x3870 <setup+0x38e>
    3878:	00 c0       	rjmp	.+0      	; 0x387a <setup+0x398>
    387a:	00 00       	nop
    387c:	e7 cf       	rjmp	.-50     	; 0x384c <setup+0x36a>
    387e:	2f ef       	ldi	r18, 0xFF	; 255
    3880:	80 e7       	ldi	r24, 0x70	; 112
    3882:	92 e0       	ldi	r25, 0x02	; 2
    3884:	21 50       	subi	r18, 0x01	; 1
    3886:	80 40       	sbci	r24, 0x00	; 0
    3888:	90 40       	sbci	r25, 0x00	; 0
    388a:	e1 f7       	brne	.-8      	; 0x3884 <setup+0x3a2>
    388c:	00 c0       	rjmp	.+0      	; 0x388e <setup+0x3ac>
    388e:	00 00       	nop
    3890:	62 ec       	ldi	r22, 0xC2	; 194
    _delay_ms(1000);
  }
  _delay_ms(50);

  Serial.println(F("RTC chip DS3231M initialized."));
    3892:	71 e0       	ldi	r23, 0x01	; 1
    3894:	86 e2       	ldi	r24, 0x26	; 38
    3896:	9d e0       	ldi	r25, 0x0D	; 13
    3898:	0e 94 6c 38 	call	0x70d8	; 0x70d8 <_ZN5Print7printlnEPK19__FlashStringHelper>
  DS3231M.adjust();
    389c:	8f e9       	ldi	r24, 0x9F	; 159
    389e:	9a e0       	ldi	r25, 0x0A	; 10
    38a0:	bf d7       	rcall	.+3966   	; 0x4820 <_ZN13DS3231M_Class6adjustEv>
    38a2:	0e 94 08 02 	call	0x410	; 0x410 <_Z9printLinev>
  printLine();
    38a6:	69 e6       	ldi	r22, 0x69	; 105
  /*************************** POTENZIOMETRI ************************/
  Serial.println("Inizializzo POTENZIOMETRI per livello pulser.......");
    38a8:	79 e0       	ldi	r23, 0x09	; 9
    38aa:	86 e2       	ldi	r24, 0x26	; 38
    38ac:	9d e0       	ldi	r25, 0x0D	; 13
    38ae:	0e 94 8c 38 	call	0x7118	; 0x7118 <_ZN5Print7printlnEPKc>
    38b2:	80 ed       	ldi	r24, 0xD0	; 208

  Wire.begin(); // join i2c bus (address optional for master)
    38b4:	9c e0       	ldi	r25, 0x0C	; 12
    38b6:	0e 94 0e 35 	call	0x6a1c	; 0x6a1c <_ZN7TwoWire5beginEv>
    38ba:	68 e2       	ldi	r22, 0x28	; 40
  Wire.beginTransmission(0x28);  // (0x50) POTENZIOMETRO U11
    38bc:	70 e0       	ldi	r23, 0x00	; 0
    38be:	80 ed       	ldi	r24, 0xD0	; 208
    38c0:	9c e0       	ldi	r25, 0x0C	; 12
    38c2:	0e 94 2b 35 	call	0x6a56	; 0x6a56 <_ZN7TwoWire17beginTransmissionEi>
    38c6:	60 e0       	ldi	r22, 0x00	; 0
  Wire.write(byte(0x00));        // Wiper Register
    38c8:	80 ed       	ldi	r24, 0xD0	; 208
    38ca:	9c e0       	ldi	r25, 0x0C	; 12
    38cc:	0e 94 d0 34 	call	0x69a0	; 0x69a0 <_ZN7TwoWire5writeEh>
    38d0:	62 e3       	ldi	r22, 0x32	; 50
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    38d2:	80 ed       	ldi	r24, 0xD0	; 208
    38d4:	9c e0       	ldi	r25, 0x0C	; 12
    38d6:	0e 94 d0 34 	call	0x69a0	; 0x69a0 <_ZN7TwoWire5writeEh>
    38da:	80 ed       	ldi	r24, 0xD0	; 208
  Wire.write(50);                // Valore del potenziomentro circa 6 volt
  Wire.endTransmission();
    38dc:	9c e0       	ldi	r25, 0x0C	; 12
    38de:	0e 94 a2 35 	call	0x6b44	; 0x6b44 <_ZN7TwoWire15endTransmissionEv>
    38e2:	2f ef       	ldi	r18, 0xFF	; 255
    38e4:	80 e7       	ldi	r24, 0x70	; 112
    38e6:	92 e0       	ldi	r25, 0x02	; 2
    38e8:	21 50       	subi	r18, 0x01	; 1
    38ea:	80 40       	sbci	r24, 0x00	; 0
    38ec:	90 40       	sbci	r25, 0x00	; 0
    38ee:	e1 f7       	brne	.-8      	; 0x38e8 <setup+0x406>
    38f0:	00 c0       	rjmp	.+0      	; 0x38f2 <setup+0x410>
    38f2:	00 00       	nop
    38f4:	62 e5       	ldi	r22, 0x52	; 82

  _delay_ms(50);

  Wire.beginTransmission(0x52);  // (0x52) POTENZIOMETRO U12
    38f6:	70 e0       	ldi	r23, 0x00	; 0
    38f8:	80 ed       	ldi	r24, 0xD0	; 208
    38fa:	9c e0       	ldi	r25, 0x0C	; 12
    38fc:	0e 94 2b 35 	call	0x6a56	; 0x6a56 <_ZN7TwoWire17beginTransmissionEi>
    3900:	60 e0       	ldi	r22, 0x00	; 0
  Wire.write(byte(0x00));        // Wiper Register
    3902:	80 ed       	ldi	r24, 0xD0	; 208
    3904:	9c e0       	ldi	r25, 0x0C	; 12
    3906:	0e 94 d0 34 	call	0x69a0	; 0x69a0 <_ZN7TwoWire5writeEh>
    390a:	62 e3       	ldi	r22, 0x32	; 50
    390c:	80 ed       	ldi	r24, 0xD0	; 208
    390e:	9c e0       	ldi	r25, 0x0C	; 12
    3910:	0e 94 d0 34 	call	0x69a0	; 0x69a0 <_ZN7TwoWire5writeEh>
    3914:	80 ed       	ldi	r24, 0xD0	; 208
  Wire.write(50);                // Valore del potenziomentro circa 6 volt
  Wire.endTransmission();
    3916:	9c e0       	ldi	r25, 0x0C	; 12
    3918:	0e 94 a2 35 	call	0x6b44	; 0x6b44 <_ZN7TwoWire15endTransmissionEv>
    391c:	80 ed       	ldi	r24, 0xD0	; 208
  Wire.end();
    391e:	9c e0       	ldi	r25, 0x0C	; 12
    3920:	0e 94 1d 35 	call	0x6a3a	; 0x6a3a <_ZN7TwoWire3endEv>
    3924:	6d e9       	ldi	r22, 0x9D	; 157
  Serial.println("POTENZIOMETRI OK");
    3926:	79 e0       	ldi	r23, 0x09	; 9
    3928:	86 e2       	ldi	r24, 0x26	; 38
    392a:	9d e0       	ldi	r25, 0x0D	; 13
    392c:	0e 94 8c 38 	call	0x7118	; 0x7118 <_ZN5Print7printlnEPKc>
  printLine();
    3930:	0e 94 08 02 	call	0x410	; 0x410 <_Z9printLinev>
  /*************************KEYPAD*********************/
  gpio.begin(I2C_PCA9534_ADDR);
    3934:	60 e2       	ldi	r22, 0x20	; 32
    3936:	8e e7       	ldi	r24, 0x7E	; 126
    3938:	9a e0       	ldi	r25, 0x0A	; 10
    393a:	36 d0       	rcall	.+108    	; 0x39a8 <_ZN7PCA95345beginEh>
  // set REG IOexpander OPREG 11000011,INVREG 00000000,CONFREG 00111100
  gpio.setporteIoExp(0xC3, 0x00, 0x3C);
    393c:	2c e3       	ldi	r18, 0x3C	; 60
    393e:	40 e0       	ldi	r20, 0x00	; 0
    3940:	63 ec       	ldi	r22, 0xC3	; 195
    3942:	8e e7       	ldi	r24, 0x7E	; 126
    3944:	9a e0       	ldi	r25, 0x0A	; 10
    3946:	36 d0       	rcall	.+108    	; 0x39b4 <_ZN7PCA953413setporteIoExpEhhh>
    3948:	8e ef       	ldi	r24, 0xFE	; 254
  /**************** SETTING INIZIALI ******************/

  stato_procedura = - 2; // set stato di partenza
    394a:	9f ef       	ldi	r25, 0xFF	; 255
    394c:	90 93 2f 0b 	sts	0x0B2F, r25	; 0x800b2f <stato_procedura+0x1>
    3950:	80 93 2e 0b 	sts	0x0B2E, r24	; 0x800b2e <stato_procedura>
    3954:	6e ea       	ldi	r22, 0xAE	; 174
  StatoAttuale = "Starting ....";
    3956:	79 e0       	ldi	r23, 0x09	; 9
    3958:	88 e3       	ldi	r24, 0x38	; 56
    395a:	9b e0       	ldi	r25, 0x0B	; 11
    395c:	0e 94 a6 3b 	call	0x774c	; 0x774c <_ZN6StringaSEPKc>
    3960:	68 e3       	ldi	r22, 0x38	; 56
  Serial.println(StatoAttuale);
    3962:	7b e0       	ldi	r23, 0x0B	; 11
    3964:	86 e2       	ldi	r24, 0x26	; 38
    3966:	9d e0       	ldi	r25, 0x0D	; 13
    3968:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <_ZN5Print7printlnERK6String>
    396c:	0e 94 08 02 	call	0x410	; 0x410 <_Z9printLinev>
  printLine();
    3970:	0e 94 08 02 	call	0x410	; 0x410 <_Z9printLinev>
  printLine();
    3974:	0e 94 08 02 	call	0x410	; 0x410 <_Z9printLinev>
  printLine();
    3978:	ce 01       	movw	r24, r28
  Serial.print("EEPROM utilizzata (byte): ");
  Serial.print(EEPROM.length());
  Serial.println(" ");
  Serial.print("Scrittura Parametri CCEC");

  String app = "";
    397a:	0f 96       	adiw	r24, 0x0f	; 15
    397c:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
    3980:	64 96       	adiw	r28, 0x14	; 20
  StatoAttuale = "Starting ....";
  Serial.println(StatoAttuale);
  printLine();
  printLine();
  printLine();
}
    3982:	0f b6       	in	r0, 0x3f	; 63
    3984:	f8 94       	cli
    3986:	de bf       	out	0x3e, r29	; 62
    3988:	0f be       	out	0x3f, r0	; 63
    398a:	cd bf       	out	0x3d, r28	; 61
    398c:	df 91       	pop	r29
    398e:	cf 91       	pop	r28
    3990:	1f 91       	pop	r17
    3992:	0f 91       	pop	r16
    3994:	ff 90       	pop	r15
    3996:	ef 90       	pop	r14
    3998:	df 90       	pop	r13
    399a:	cf 90       	pop	r12
    399c:	08 95       	ret

0000399e <_ZN7PCA9534C1Ev>:
    399e:	fc 01       	movw	r30, r24
	Wire.requestFrom(_i2caddr, 1);
	while (Wire.available()) {
		buff = Wire.read();
	}
	return (buff & (1 << pin)) ? HIGH : LOW;
}
    39a0:	10 82       	st	Z, r1
    39a2:	11 82       	std	Z+1, r1	; 0x01
    39a4:	12 82       	std	Z+2, r1	; 0x02
    39a6:	08 95       	ret

000039a8 <_ZN7PCA95345beginEh>:
    39a8:	fc 01       	movw	r30, r24
    39aa:	60 83       	st	Z, r22
    39ac:	80 ed       	ldi	r24, 0xD0	; 208
    39ae:	9c e0       	ldi	r25, 0x0C	; 12
    39b0:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <_ZN7TwoWire5beginEv>

000039b4 <_ZN7PCA953413setporteIoExpEhhh>:
    39b4:	ff 92       	push	r15
    39b6:	0f 93       	push	r16
    39b8:	1f 93       	push	r17
    39ba:	cf 93       	push	r28
    39bc:	df 93       	push	r29
    39be:	ec 01       	movw	r28, r24
    39c0:	f6 2e       	mov	r15, r22
    39c2:	04 2f       	mov	r16, r20
    39c4:	12 2f       	mov	r17, r18
    39c6:	68 81       	ld	r22, Y
    39c8:	80 ed       	ldi	r24, 0xD0	; 208
    39ca:	9c e0       	ldi	r25, 0x0C	; 12
    39cc:	0e 94 21 35 	call	0x6a42	; 0x6a42 <_ZN7TwoWire17beginTransmissionEh>
    39d0:	61 e0       	ldi	r22, 0x01	; 1
    39d2:	80 ed       	ldi	r24, 0xD0	; 208
    39d4:	9c e0       	ldi	r25, 0x0C	; 12
    39d6:	0e 94 d0 34 	call	0x69a0	; 0x69a0 <_ZN7TwoWire5writeEh>
    39da:	6f 2d       	mov	r22, r15
    39dc:	80 ed       	ldi	r24, 0xD0	; 208
    39de:	9c e0       	ldi	r25, 0x0C	; 12
    39e0:	0e 94 d0 34 	call	0x69a0	; 0x69a0 <_ZN7TwoWire5writeEh>
    39e4:	80 ed       	ldi	r24, 0xD0	; 208
    39e6:	9c e0       	ldi	r25, 0x0C	; 12
    39e8:	0e 94 a2 35 	call	0x6b44	; 0x6b44 <_ZN7TwoWire15endTransmissionEv>
    39ec:	68 81       	ld	r22, Y
    39ee:	80 ed       	ldi	r24, 0xD0	; 208
    39f0:	9c e0       	ldi	r25, 0x0C	; 12
    39f2:	0e 94 21 35 	call	0x6a42	; 0x6a42 <_ZN7TwoWire17beginTransmissionEh>
    39f6:	62 e0       	ldi	r22, 0x02	; 2
    39f8:	80 ed       	ldi	r24, 0xD0	; 208
    39fa:	9c e0       	ldi	r25, 0x0C	; 12
    39fc:	0e 94 d0 34 	call	0x69a0	; 0x69a0 <_ZN7TwoWire5writeEh>
    3a00:	60 2f       	mov	r22, r16
    3a02:	80 ed       	ldi	r24, 0xD0	; 208
    3a04:	9c e0       	ldi	r25, 0x0C	; 12
    3a06:	0e 94 d0 34 	call	0x69a0	; 0x69a0 <_ZN7TwoWire5writeEh>
    3a0a:	80 ed       	ldi	r24, 0xD0	; 208
    3a0c:	9c e0       	ldi	r25, 0x0C	; 12
    3a0e:	0e 94 a2 35 	call	0x6b44	; 0x6b44 <_ZN7TwoWire15endTransmissionEv>
    3a12:	8f e3       	ldi	r24, 0x3F	; 63
    3a14:	9c e9       	ldi	r25, 0x9C	; 156
    3a16:	01 97       	sbiw	r24, 0x01	; 1
    3a18:	f1 f7       	brne	.-4      	; 0x3a16 <_ZN7PCA953413setporteIoExpEhhh+0x62>
    3a1a:	00 c0       	rjmp	.+0      	; 0x3a1c <_ZN7PCA953413setporteIoExpEhhh+0x68>
    3a1c:	00 00       	nop
    3a1e:	68 81       	ld	r22, Y
    3a20:	80 ed       	ldi	r24, 0xD0	; 208
    3a22:	9c e0       	ldi	r25, 0x0C	; 12
    3a24:	0e 94 21 35 	call	0x6a42	; 0x6a42 <_ZN7TwoWire17beginTransmissionEh>
    3a28:	63 e0       	ldi	r22, 0x03	; 3
    3a2a:	80 ed       	ldi	r24, 0xD0	; 208
    3a2c:	9c e0       	ldi	r25, 0x0C	; 12
    3a2e:	0e 94 d0 34 	call	0x69a0	; 0x69a0 <_ZN7TwoWire5writeEh>
    3a32:	61 2f       	mov	r22, r17
    3a34:	80 ed       	ldi	r24, 0xD0	; 208
    3a36:	9c e0       	ldi	r25, 0x0C	; 12
    3a38:	0e 94 d0 34 	call	0x69a0	; 0x69a0 <_ZN7TwoWire5writeEh>
    3a3c:	80 ed       	ldi	r24, 0xD0	; 208
    3a3e:	9c e0       	ldi	r25, 0x0C	; 12
    3a40:	0e 94 a2 35 	call	0x6b44	; 0x6b44 <_ZN7TwoWire15endTransmissionEv>
    3a44:	8f e3       	ldi	r24, 0x3F	; 63
    3a46:	9c e9       	ldi	r25, 0x9C	; 156
    3a48:	01 97       	sbiw	r24, 0x01	; 1
    3a4a:	f1 f7       	brne	.-4      	; 0x3a48 <_ZN7PCA953413setporteIoExpEhhh+0x94>
    3a4c:	00 c0       	rjmp	.+0      	; 0x3a4e <_ZN7PCA953413setporteIoExpEhhh+0x9a>
    3a4e:	00 00       	nop
    3a50:	df 91       	pop	r29
    3a52:	cf 91       	pop	r28
    3a54:	1f 91       	pop	r17
    3a56:	0f 91       	pop	r16
    3a58:	ff 90       	pop	r15
    3a5a:	08 95       	ret

00003a5c <_ZN7PCA953410setCONFREGEh>:
    3a5c:	cf 93       	push	r28
    3a5e:	c6 2f       	mov	r28, r22
    3a60:	fc 01       	movw	r30, r24
    3a62:	60 81       	ld	r22, Z
    3a64:	80 ed       	ldi	r24, 0xD0	; 208
    3a66:	9c e0       	ldi	r25, 0x0C	; 12
    3a68:	0e 94 21 35 	call	0x6a42	; 0x6a42 <_ZN7TwoWire17beginTransmissionEh>
    3a6c:	63 e0       	ldi	r22, 0x03	; 3
    3a6e:	80 ed       	ldi	r24, 0xD0	; 208
    3a70:	9c e0       	ldi	r25, 0x0C	; 12
    3a72:	0e 94 d0 34 	call	0x69a0	; 0x69a0 <_ZN7TwoWire5writeEh>
    3a76:	6c 2f       	mov	r22, r28
    3a78:	80 ed       	ldi	r24, 0xD0	; 208
    3a7a:	9c e0       	ldi	r25, 0x0C	; 12
    3a7c:	0e 94 d0 34 	call	0x69a0	; 0x69a0 <_ZN7TwoWire5writeEh>
    3a80:	80 ed       	ldi	r24, 0xD0	; 208
    3a82:	9c e0       	ldi	r25, 0x0C	; 12
    3a84:	cf 91       	pop	r28
    3a86:	0c 94 a2 35 	jmp	0x6b44	; 0x6b44 <_ZN7TwoWire15endTransmissionEv>

00003a8a <_ZN7PCA953416Read_IP_REGISTEREv>:

uint8_t PCA9534::Read_IP_REGISTER() {
    3a8a:	cf 93       	push	r28
    3a8c:	df 93       	push	r29
    3a8e:	ec 01       	movw	r28, r24
	uint8_t buff = 0;

	//_i2caddr = i2caddr;

	Wire.beginTransmission(_i2caddr);
    3a90:	68 81       	ld	r22, Y
    3a92:	80 ed       	ldi	r24, 0xD0	; 208
    3a94:	9c e0       	ldi	r25, 0x0C	; 12
    3a96:	0e 94 21 35 	call	0x6a42	; 0x6a42 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(PCA9534_IP_REGISTER);
    3a9a:	60 e0       	ldi	r22, 0x00	; 0
    3a9c:	80 ed       	ldi	r24, 0xD0	; 208
    3a9e:	9c e0       	ldi	r25, 0x0C	; 12
    3aa0:	0e 94 d0 34 	call	0x69a0	; 0x69a0 <_ZN7TwoWire5writeEh>
	// Wire.write(_port);
	Wire.endTransmission();
    3aa4:	80 ed       	ldi	r24, 0xD0	; 208
    3aa6:	9c e0       	ldi	r25, 0x0C	; 12
    3aa8:	0e 94 a2 35 	call	0x6b44	; 0x6b44 <_ZN7TwoWire15endTransmissionEv>

	// We only need to read 1 byte of data to get the pins
	Wire.requestFrom(_i2caddr, 1);
    3aac:	68 81       	ld	r22, Y
    3aae:	70 e0       	ldi	r23, 0x00	; 0
    3ab0:	41 e0       	ldi	r20, 0x01	; 1
    3ab2:	50 e0       	ldi	r21, 0x00	; 0
    3ab4:	80 ed       	ldi	r24, 0xD0	; 208
    3ab6:	9c e0       	ldi	r25, 0x0C	; 12
    3ab8:	0e 94 a0 35 	call	0x6b40	; 0x6b40 <_ZN7TwoWire11requestFromEii>
	}
	return (buff & (1 << pin)) ? HIGH : LOW;
}

uint8_t PCA9534::Read_IP_REGISTER() {
	uint8_t buff = 0;
    3abc:	c0 e0       	ldi	r28, 0x00	; 0
	// Wire.write(_port);
	Wire.endTransmission();

	// We only need to read 1 byte of data to get the pins
	Wire.requestFrom(_i2caddr, 1);
	while (Wire.available()) {
    3abe:	80 ed       	ldi	r24, 0xD0	; 208
    3ac0:	9c e0       	ldi	r25, 0x0C	; 12
    3ac2:	0e 94 42 34 	call	0x6884	; 0x6884 <_ZN7TwoWire9availableEv>
    3ac6:	89 2b       	or	r24, r25
    3ac8:	31 f0       	breq	.+12     	; 0x3ad6 <_ZN7PCA953416Read_IP_REGISTEREv+0x4c>
		buff = Wire.read();
    3aca:	80 ed       	ldi	r24, 0xD0	; 208
    3acc:	9c e0       	ldi	r25, 0x0C	; 12
    3ace:	0e 94 4a 34 	call	0x6894	; 0x6894 <_ZN7TwoWire4readEv>
    3ad2:	c8 2f       	mov	r28, r24
	// Wire.write(_port);
	Wire.endTransmission();

	// We only need to read 1 byte of data to get the pins
	Wire.requestFrom(_i2caddr, 1);
	while (Wire.available()) {
    3ad4:	f4 cf       	rjmp	.-24     	; 0x3abe <_ZN7PCA953416Read_IP_REGISTEREv+0x34>
		buff = Wire.read();
	}
	return buff;
    3ad6:	8c 2f       	mov	r24, r28
    3ad8:	df 91       	pop	r29
    3ada:	cf 91       	pop	r28
    3adc:	08 95       	ret

00003ade <_ZN9NFC_PN532C1Ehh>:
    #endif
    return false;
  }

  return true;
}
    3ade:	cf 93       	push	r28
    3ae0:	df 93       	push	r29
    3ae2:	ec 01       	movw	r28, r24
    3ae4:	86 2f       	mov	r24, r22
    3ae6:	6c 83       	std	Y+4, r22	; 0x04
    3ae8:	4d 83       	std	Y+5, r20	; 0x05
    3aea:	1d 8a       	std	Y+21, r1	; 0x15
    3aec:	1e 8a       	std	Y+22, r1	; 0x16
    3aee:	60 e0       	ldi	r22, 0x00	; 0
    3af0:	0e 94 2d 3a 	call	0x745a	; 0x745a <pinMode>
    3af4:	61 e0       	ldi	r22, 0x01	; 1
    3af6:	8d 81       	ldd	r24, Y+5	; 0x05
    3af8:	df 91       	pop	r29
    3afa:	cf 91       	pop	r28
    3afc:	0c 94 2d 3a 	jmp	0x745a	; 0x745a <pinMode>

00003b00 <_ZN9NFC_PN5325beginEv>:
    3b00:	cf 93       	push	r28
    3b02:	df 93       	push	r29
    3b04:	ec 01       	movw	r28, r24
    3b06:	80 ed       	ldi	r24, 0xD0	; 208
    3b08:	9c e0       	ldi	r25, 0x0C	; 12
    3b0a:	0e 94 0e 35 	call	0x6a1c	; 0x6a1c <_ZN7TwoWire5beginEv>
    3b0e:	61 e0       	ldi	r22, 0x01	; 1
    3b10:	8d 81       	ldd	r24, Y+5	; 0x05
    3b12:	0e 94 69 3a 	call	0x74d2	; 0x74d2 <digitalWrite>
    3b16:	60 e0       	ldi	r22, 0x00	; 0
    3b18:	8d 81       	ldd	r24, Y+5	; 0x05
    3b1a:	0e 94 69 3a 	call	0x74d2	; 0x74d2 <digitalWrite>
    3b1e:	2f ef       	ldi	r18, 0xFF	; 255
    3b20:	87 e8       	ldi	r24, 0x87	; 135
    3b22:	93 e1       	ldi	r25, 0x13	; 19
    3b24:	21 50       	subi	r18, 0x01	; 1
    3b26:	80 40       	sbci	r24, 0x00	; 0
    3b28:	90 40       	sbci	r25, 0x00	; 0
    3b2a:	e1 f7       	brne	.-8      	; 0x3b24 <_ZN9NFC_PN5325beginEv+0x24>
    3b2c:	00 c0       	rjmp	.+0      	; 0x3b2e <_ZN9NFC_PN5325beginEv+0x2e>
    3b2e:	00 00       	nop
    3b30:	61 e0       	ldi	r22, 0x01	; 1
    3b32:	8d 81       	ldd	r24, Y+5	; 0x05
    3b34:	0e 94 69 3a 	call	0x74d2	; 0x74d2 <digitalWrite>
    3b38:	8f e3       	ldi	r24, 0x3F	; 63
    3b3a:	9c e9       	ldi	r25, 0x9C	; 156
    3b3c:	01 97       	sbiw	r24, 0x01	; 1
    3b3e:	f1 f7       	brne	.-4      	; 0x3b3c <_ZN9NFC_PN5325beginEv+0x3c>
    3b40:	00 c0       	rjmp	.+0      	; 0x3b42 <_ZN9NFC_PN5325beginEv+0x42>
    3b42:	00 00       	nop
    3b44:	df 91       	pop	r29
    3b46:	cf 91       	pop	r28
    3b48:	08 95       	ret

00003b4a <_ZN9NFC_PN53210GetHexCodeEPKhm>:
    3b4a:	4f 92       	push	r4
    3b4c:	5f 92       	push	r5
    3b4e:	6f 92       	push	r6
    3b50:	7f 92       	push	r7
    3b52:	8f 92       	push	r8
    3b54:	9f 92       	push	r9
    3b56:	af 92       	push	r10
    3b58:	bf 92       	push	r11
    3b5a:	ef 92       	push	r14
    3b5c:	ff 92       	push	r15
    3b5e:	0f 93       	push	r16
    3b60:	1f 93       	push	r17
    3b62:	cf 93       	push	r28
    3b64:	df 93       	push	r29
    3b66:	cd b7       	in	r28, 0x3d	; 61
    3b68:	de b7       	in	r29, 0x3e	; 62
    3b6a:	2c 97       	sbiw	r28, 0x0c	; 12
    3b6c:	0f b6       	in	r0, 0x3f	; 63
    3b6e:	f8 94       	cli
    3b70:	de bf       	out	0x3e, r29	; 62
    3b72:	0f be       	out	0x3f, r0	; 63
    3b74:	cd bf       	out	0x3d, r28	; 61
    3b76:	7c 01       	movw	r14, r24
    3b78:	5a 01       	movw	r10, r20
    3b7a:	28 01       	movw	r4, r16
    3b7c:	39 01       	movw	r6, r18
    3b7e:	62 e4       	ldi	r22, 0x42	; 66
    3b80:	72 e0       	ldi	r23, 0x02	; 2
    3b82:	0e 94 27 3b 	call	0x764e	; 0x764e <_ZN6StringC1EPKc>
    3b86:	85 01       	movw	r16, r10
    3b88:	81 2c       	mov	r8, r1
    3b8a:	91 2c       	mov	r9, r1
    3b8c:	54 01       	movw	r10, r8
    3b8e:	84 14       	cp	r8, r4
    3b90:	95 04       	cpc	r9, r5
    3b92:	a6 04       	cpc	r10, r6
    3b94:	b7 04       	cpc	r11, r7
    3b96:	09 f4       	brne	.+2      	; 0x3b9a <_ZN9NFC_PN53210GetHexCodeEPKhm+0x50>
    3b98:	46 c0       	rjmp	.+140    	; 0x3c26 <_ZN9NFC_PN53210GetHexCodeEPKhm+0xdc>
    3b9a:	f8 01       	movw	r30, r16
    3b9c:	61 91       	ld	r22, Z+
    3b9e:	8f 01       	movw	r16, r30
    3ba0:	40 e1       	ldi	r20, 0x10	; 16
    3ba2:	ce 01       	movw	r24, r28
    3ba4:	60 31       	cpi	r22, 0x10	; 16
    3ba6:	f0 f4       	brcc	.+60     	; 0x3be4 <_ZN9NFC_PN53210GetHexCodeEPKhm+0x9a>
    3ba8:	01 96       	adiw	r24, 0x01	; 1
    3baa:	0e 94 d2 3b 	call	0x77a4	; 0x77a4 <_ZN6StringC1Ehh>
    3bae:	b7 01       	movw	r22, r14
    3bb0:	ce 01       	movw	r24, r28
    3bb2:	07 96       	adiw	r24, 0x07	; 7
    3bb4:	0e 94 93 3b 	call	0x7726	; 0x7726 <_ZN6StringC1ERKS_>
    3bb8:	62 e4       	ldi	r22, 0x42	; 66
    3bba:	76 e0       	ldi	r23, 0x06	; 6
    3bbc:	ce 01       	movw	r24, r28
    3bbe:	07 96       	adiw	r24, 0x07	; 7
    3bc0:	0e 94 0d 3d 	call	0x7a1a	; 0x7a1a <_ZplRK15StringSumHelperPKc>
    3bc4:	be 01       	movw	r22, r28
    3bc6:	6f 5f       	subi	r22, 0xFF	; 255
    3bc8:	7f 4f       	sbci	r23, 0xFF	; 255
    3bca:	0e 94 fc 3c 	call	0x79f8	; 0x79f8 <_ZplRK15StringSumHelperRK6String>
    3bce:	bc 01       	movw	r22, r24
    3bd0:	c7 01       	movw	r24, r14
    3bd2:	0e 94 7e 3b 	call	0x76fc	; 0x76fc <_ZN6StringaSERKS_>
    3bd6:	ce 01       	movw	r24, r28
    3bd8:	07 96       	adiw	r24, 0x07	; 7
    3bda:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
    3bde:	ce 01       	movw	r24, r28
    3be0:	01 96       	adiw	r24, 0x01	; 1
    3be2:	19 c0       	rjmp	.+50     	; 0x3c16 <_ZN9NFC_PN53210GetHexCodeEPKhm+0xcc>
    3be4:	07 96       	adiw	r24, 0x07	; 7
    3be6:	0e 94 d2 3b 	call	0x77a4	; 0x77a4 <_ZN6StringC1Ehh>
    3bea:	b7 01       	movw	r22, r14
    3bec:	ce 01       	movw	r24, r28
    3bee:	01 96       	adiw	r24, 0x01	; 1
    3bf0:	0e 94 93 3b 	call	0x7726	; 0x7726 <_ZN6StringC1ERKS_>
    3bf4:	be 01       	movw	r22, r28
    3bf6:	69 5f       	subi	r22, 0xF9	; 249
    3bf8:	7f 4f       	sbci	r23, 0xFF	; 255
    3bfa:	ce 01       	movw	r24, r28
    3bfc:	01 96       	adiw	r24, 0x01	; 1
    3bfe:	0e 94 fc 3c 	call	0x79f8	; 0x79f8 <_ZplRK15StringSumHelperRK6String>
    3c02:	bc 01       	movw	r22, r24
    3c04:	c7 01       	movw	r24, r14
    3c06:	0e 94 7e 3b 	call	0x76fc	; 0x76fc <_ZN6StringaSERKS_>
    3c0a:	ce 01       	movw	r24, r28
    3c0c:	01 96       	adiw	r24, 0x01	; 1
    3c0e:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
    3c12:	ce 01       	movw	r24, r28
    3c14:	07 96       	adiw	r24, 0x07	; 7
    3c16:	0e 94 c0 3a 	call	0x7580	; 0x7580 <_ZN6StringD1Ev>
    3c1a:	ff ef       	ldi	r31, 0xFF	; 255
    3c1c:	8f 1a       	sub	r8, r31
    3c1e:	9f 0a       	sbc	r9, r31
    3c20:	af 0a       	sbc	r10, r31
    3c22:	bf 0a       	sbc	r11, r31
    3c24:	b4 cf       	rjmp	.-152    	; 0x3b8e <_ZN9NFC_PN53210GetHexCodeEPKhm+0x44>
    3c26:	86 e2       	ldi	r24, 0x26	; 38
    3c28:	9d e0       	ldi	r25, 0x0D	; 13
    3c2a:	0e 94 69 38 	call	0x70d2	; 0x70d2 <_ZN5Print7printlnEv>
    3c2e:	c7 01       	movw	r24, r14
    3c30:	2c 96       	adiw	r28, 0x0c	; 12
    3c32:	0f b6       	in	r0, 0x3f	; 63
    3c34:	f8 94       	cli
    3c36:	de bf       	out	0x3e, r29	; 62
    3c38:	0f be       	out	0x3f, r0	; 63
    3c3a:	cd bf       	out	0x3d, r28	; 61
    3c3c:	df 91       	pop	r29
    3c3e:	cf 91       	pop	r28
    3c40:	1f 91       	pop	r17
    3c42:	0f 91       	pop	r16
    3c44:	ff 90       	pop	r15
    3c46:	ef 90       	pop	r14
    3c48:	bf 90       	pop	r11
    3c4a:	af 90       	pop	r10
    3c4c:	9f 90       	pop	r9
    3c4e:	8f 90       	pop	r8
    3c50:	7f 90       	pop	r7
    3c52:	6f 90       	pop	r6
    3c54:	5f 90       	pop	r5
    3c56:	4f 90       	pop	r4
    3c58:	08 95       	ret

00003c5a <_ZN9NFC_PN5327isreadyEv>:
    3c5a:	fc 01       	movw	r30, r24
    3c5c:	84 81       	ldd	r24, Z+4	; 0x04
    3c5e:	0e 94 97 3a 	call	0x752e	; 0x752e <digitalRead>
    3c62:	91 e0       	ldi	r25, 0x01	; 1
    3c64:	81 11       	cpse	r24, r1
    3c66:	90 e0       	ldi	r25, 0x00	; 0
    3c68:	89 2f       	mov	r24, r25
    3c6a:	08 95       	ret

00003c6c <_ZN9NFC_PN5329waitreadyEj>:
    3c6c:	cf 92       	push	r12
    3c6e:	df 92       	push	r13
    3c70:	ef 92       	push	r14
    3c72:	ff 92       	push	r15
    3c74:	1f 93       	push	r17
    3c76:	cf 93       	push	r28
    3c78:	df 93       	push	r29
    3c7a:	6c 01       	movw	r12, r24
    3c7c:	7b 01       	movw	r14, r22
    3c7e:	c0 e0       	ldi	r28, 0x00	; 0
    3c80:	d0 e0       	ldi	r29, 0x00	; 0
    3c82:	c6 01       	movw	r24, r12
    3c84:	ea df       	rcall	.-44     	; 0x3c5a <_ZN9NFC_PN5327isreadyEv>
    3c86:	18 2f       	mov	r17, r24
    3c88:	81 11       	cpse	r24, r1
    3c8a:	15 c0       	rjmp	.+42     	; 0x3cb6 <_ZN9NFC_PN5329waitreadyEj+0x4a>
    3c8c:	e1 14       	cp	r14, r1
    3c8e:	f1 04       	cpc	r15, r1
    3c90:	59 f0       	breq	.+22     	; 0x3ca8 <_ZN9NFC_PN5329waitreadyEj+0x3c>
    3c92:	2a 96       	adiw	r28, 0x0a	; 10
    3c94:	ec 16       	cp	r14, r28
    3c96:	fd 06       	cpc	r15, r29
    3c98:	38 f4       	brcc	.+14     	; 0x3ca8 <_ZN9NFC_PN5329waitreadyEj+0x3c>
    3c9a:	6c ec       	ldi	r22, 0xCC	; 204
    3c9c:	79 e0       	ldi	r23, 0x09	; 9
    3c9e:	86 e2       	ldi	r24, 0x26	; 38
    3ca0:	9d e0       	ldi	r25, 0x0D	; 13
    3ca2:	0e 94 8c 38 	call	0x7118	; 0x7118 <_ZN5Print7printlnEPKc>
    3ca6:	07 c0       	rjmp	.+14     	; 0x3cb6 <_ZN9NFC_PN5329waitreadyEj+0x4a>
    3ca8:	8f e3       	ldi	r24, 0x3F	; 63
    3caa:	9c e9       	ldi	r25, 0x9C	; 156
    3cac:	01 97       	sbiw	r24, 0x01	; 1
    3cae:	f1 f7       	brne	.-4      	; 0x3cac <_ZN9NFC_PN5329waitreadyEj+0x40>
    3cb0:	00 c0       	rjmp	.+0      	; 0x3cb2 <_ZN9NFC_PN5329waitreadyEj+0x46>
    3cb2:	00 00       	nop
    3cb4:	e6 cf       	rjmp	.-52     	; 0x3c82 <_ZN9NFC_PN5329waitreadyEj+0x16>
    3cb6:	81 2f       	mov	r24, r17
    3cb8:	df 91       	pop	r29
    3cba:	cf 91       	pop	r28
    3cbc:	1f 91       	pop	r17
    3cbe:	ff 90       	pop	r15
    3cc0:	ef 90       	pop	r14
    3cc2:	df 90       	pop	r13
    3cc4:	cf 90       	pop	r12
    3cc6:	08 95       	ret

00003cc8 <_ZN9NFC_PN5328readdataEPhh>:
    3cc8:	ff 92       	push	r15
    3cca:	0f 93       	push	r16
    3ccc:	1f 93       	push	r17
    3cce:	cf 93       	push	r28
    3cd0:	df 93       	push	r29
    3cd2:	f6 2e       	mov	r15, r22
    3cd4:	07 2f       	mov	r16, r23
    3cd6:	14 2f       	mov	r17, r20
    3cd8:	8f e3       	ldi	r24, 0x3F	; 63
    3cda:	9f e1       	ldi	r25, 0x1F	; 31
    3cdc:	01 97       	sbiw	r24, 0x01	; 1
    3cde:	f1 f7       	brne	.-4      	; 0x3cdc <_ZN9NFC_PN5328readdataEPhh+0x14>
    3ce0:	00 c0       	rjmp	.+0      	; 0x3ce2 <_ZN9NFC_PN5328readdataEPhh+0x1a>
    3ce2:	00 00       	nop
    3ce4:	42 e0       	ldi	r20, 0x02	; 2
    3ce6:	41 0f       	add	r20, r17
    3ce8:	64 e2       	ldi	r22, 0x24	; 36
    3cea:	80 ed       	ldi	r24, 0xD0	; 208
    3cec:	9c e0       	ldi	r25, 0x0C	; 12
    3cee:	0e 94 9e 35 	call	0x6b3c	; 0x6b3c <_ZN7TwoWire11requestFromEhh>
    3cf2:	80 ed       	ldi	r24, 0xD0	; 208
    3cf4:	9c e0       	ldi	r25, 0x0C	; 12
    3cf6:	0e 94 4a 34 	call	0x6894	; 0x6894 <_ZN7TwoWire4readEv>
    3cfa:	cf 2d       	mov	r28, r15
    3cfc:	d0 2f       	mov	r29, r16
    3cfe:	ce 01       	movw	r24, r28
    3d00:	81 0f       	add	r24, r17
    3d02:	91 1d       	adc	r25, r1
    3d04:	8c 01       	movw	r16, r24
    3d06:	c0 17       	cp	r28, r16
    3d08:	d1 07       	cpc	r29, r17
    3d0a:	61 f0       	breq	.+24     	; 0x3d24 <_ZN9NFC_PN5328readdataEPhh+0x5c>
    3d0c:	8f e9       	ldi	r24, 0x9F	; 159
    3d0e:	9f e0       	ldi	r25, 0x0F	; 15
    3d10:	01 97       	sbiw	r24, 0x01	; 1
    3d12:	f1 f7       	brne	.-4      	; 0x3d10 <_ZN9NFC_PN5328readdataEPhh+0x48>
    3d14:	00 c0       	rjmp	.+0      	; 0x3d16 <_ZN9NFC_PN5328readdataEPhh+0x4e>
    3d16:	00 00       	nop
    3d18:	80 ed       	ldi	r24, 0xD0	; 208
    3d1a:	9c e0       	ldi	r25, 0x0C	; 12
    3d1c:	0e 94 4a 34 	call	0x6894	; 0x6894 <_ZN7TwoWire4readEv>
    3d20:	89 93       	st	Y+, r24
    3d22:	f1 cf       	rjmp	.-30     	; 0x3d06 <_ZN9NFC_PN5328readdataEPhh+0x3e>
    3d24:	df 91       	pop	r29
    3d26:	cf 91       	pop	r28
    3d28:	1f 91       	pop	r17
    3d2a:	0f 91       	pop	r16
    3d2c:	ff 90       	pop	r15
    3d2e:	08 95       	ret

00003d30 <_ZN9NFC_PN5327readackEv>:
    3d30:	cf 93       	push	r28
    3d32:	df 93       	push	r29
    3d34:	00 d0       	rcall	.+0      	; 0x3d36 <_ZN9NFC_PN5327readackEv+0x6>
    3d36:	00 d0       	rcall	.+0      	; 0x3d38 <_ZN9NFC_PN5327readackEv+0x8>
    3d38:	00 d0       	rcall	.+0      	; 0x3d3a <_ZN9NFC_PN5327readackEv+0xa>
    3d3a:	cd b7       	in	r28, 0x3d	; 61
    3d3c:	de b7       	in	r29, 0x3e	; 62
    3d3e:	46 e0       	ldi	r20, 0x06	; 6
    3d40:	be 01       	movw	r22, r28
    3d42:	6f 5f       	subi	r22, 0xFF	; 255
    3d44:	7f 4f       	sbci	r23, 0xFF	; 255
    3d46:	c0 df       	rcall	.-128    	; 0x3cc8 <_ZN9NFC_PN5328readdataEPhh>
    3d48:	46 e0       	ldi	r20, 0x06	; 6
    3d4a:	50 e0       	ldi	r21, 0x00	; 0
    3d4c:	6f e5       	ldi	r22, 0x5F	; 95
    3d4e:	71 e0       	ldi	r23, 0x01	; 1
    3d50:	ce 01       	movw	r24, r28
    3d52:	01 96       	adiw	r24, 0x01	; 1
    3d54:	0e 94 d4 41 	call	0x83a8	; 0x83a8 <strncmp>
    3d58:	21 e0       	ldi	r18, 0x01	; 1
    3d5a:	89 2b       	or	r24, r25
    3d5c:	09 f0       	breq	.+2      	; 0x3d60 <_ZN9NFC_PN5327readackEv+0x30>
    3d5e:	20 e0       	ldi	r18, 0x00	; 0
    3d60:	82 2f       	mov	r24, r18
    3d62:	26 96       	adiw	r28, 0x06	; 6
    3d64:	0f b6       	in	r0, 0x3f	; 63
    3d66:	f8 94       	cli
    3d68:	de bf       	out	0x3e, r29	; 62
    3d6a:	0f be       	out	0x3f, r0	; 63
    3d6c:	cd bf       	out	0x3d, r28	; 61
    3d6e:	df 91       	pop	r29
    3d70:	cf 91       	pop	r28
    3d72:	08 95       	ret

00003d74 <_ZL8i2c_sendh>:
    3d74:	68 2f       	mov	r22, r24
    3d76:	80 ed       	ldi	r24, 0xD0	; 208
    3d78:	9c e0       	ldi	r25, 0x0C	; 12
    3d7a:	0c 94 d0 34 	jmp	0x69a0	; 0x69a0 <_ZN7TwoWire5writeEh>

00003d7e <_ZN9NFC_PN53212writecommandEPhh>:
    3d7e:	cf 92       	push	r12
    3d80:	df 92       	push	r13
    3d82:	ef 92       	push	r14
    3d84:	ff 92       	push	r15
    3d86:	0f 93       	push	r16
    3d88:	1f 93       	push	r17
    3d8a:	cf 93       	push	r28
    3d8c:	df 93       	push	r29
    3d8e:	7b 01       	movw	r14, r22
    3d90:	c1 e0       	ldi	r28, 0x01	; 1
    3d92:	c4 0f       	add	r28, r20
    3d94:	8f e3       	ldi	r24, 0x3F	; 63
    3d96:	9f e1       	ldi	r25, 0x1F	; 31
    3d98:	01 97       	sbiw	r24, 0x01	; 1
    3d9a:	f1 f7       	brne	.-4      	; 0x3d98 <_ZN9NFC_PN53212writecommandEPhh+0x1a>
    3d9c:	00 c0       	rjmp	.+0      	; 0x3d9e <_ZN9NFC_PN53212writecommandEPhh+0x20>
    3d9e:	00 00       	nop
    3da0:	64 e2       	ldi	r22, 0x24	; 36
    3da2:	70 e0       	ldi	r23, 0x00	; 0
    3da4:	80 ed       	ldi	r24, 0xD0	; 208
    3da6:	9c e0       	ldi	r25, 0x0C	; 12
    3da8:	0e 94 2b 35 	call	0x6a56	; 0x6a56 <_ZN7TwoWire17beginTransmissionEi>
    3dac:	80 e0       	ldi	r24, 0x00	; 0
    3dae:	e2 df       	rcall	.-60     	; 0x3d74 <_ZL8i2c_sendh>
    3db0:	80 e0       	ldi	r24, 0x00	; 0
    3db2:	e0 df       	rcall	.-64     	; 0x3d74 <_ZL8i2c_sendh>
    3db4:	8f ef       	ldi	r24, 0xFF	; 255
    3db6:	de df       	rcall	.-68     	; 0x3d74 <_ZL8i2c_sendh>
    3db8:	8c 2f       	mov	r24, r28
    3dba:	dc df       	rcall	.-72     	; 0x3d74 <_ZL8i2c_sendh>
    3dbc:	8c 2f       	mov	r24, r28
    3dbe:	81 95       	neg	r24
    3dc0:	d9 df       	rcall	.-78     	; 0x3d74 <_ZL8i2c_sendh>
    3dc2:	84 ed       	ldi	r24, 0xD4	; 212
    3dc4:	d7 df       	rcall	.-82     	; 0x3d74 <_ZL8i2c_sendh>
    3dc6:	c1 2c       	mov	r12, r1
    3dc8:	83 ed       	ldi	r24, 0xD3	; 211
    3dca:	d8 2e       	mov	r13, r24
    3dcc:	d0 e0       	ldi	r29, 0x00	; 0
    3dce:	21 97       	sbiw	r28, 0x01	; 1
    3dd0:	0c 2d       	mov	r16, r12
    3dd2:	10 e0       	ldi	r17, 0x00	; 0
    3dd4:	0c 17       	cp	r16, r28
    3dd6:	1d 07       	cpc	r17, r29
    3dd8:	54 f4       	brge	.+20     	; 0x3dee <_ZN9NFC_PN53212writecommandEPhh+0x70>
    3dda:	0e 0d       	add	r16, r14
    3ddc:	1f 1d       	adc	r17, r15
    3dde:	f8 01       	movw	r30, r16
    3de0:	80 81       	ld	r24, Z
    3de2:	c8 df       	rcall	.-112    	; 0x3d74 <_ZL8i2c_sendh>
    3de4:	f8 01       	movw	r30, r16
    3de6:	80 81       	ld	r24, Z
    3de8:	d8 0e       	add	r13, r24
    3dea:	c3 94       	inc	r12
    3dec:	f1 cf       	rjmp	.-30     	; 0x3dd0 <_ZN9NFC_PN53212writecommandEPhh+0x52>
    3dee:	8d 2d       	mov	r24, r13
    3df0:	80 95       	com	r24
    3df2:	c0 df       	rcall	.-128    	; 0x3d74 <_ZL8i2c_sendh>
    3df4:	80 e0       	ldi	r24, 0x00	; 0
    3df6:	be df       	rcall	.-132    	; 0x3d74 <_ZL8i2c_sendh>
    3df8:	80 ed       	ldi	r24, 0xD0	; 208
    3dfa:	9c e0       	ldi	r25, 0x0C	; 12
    3dfc:	df 91       	pop	r29
    3dfe:	cf 91       	pop	r28
    3e00:	1f 91       	pop	r17
    3e02:	0f 91       	pop	r16
    3e04:	ff 90       	pop	r15
    3e06:	ef 90       	pop	r14
    3e08:	df 90       	pop	r13
    3e0a:	cf 90       	pop	r12
    3e0c:	0c 94 a2 35 	jmp	0x6b44	; 0x6b44 <_ZN7TwoWire15endTransmissionEv>

00003e10 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>:
    3e10:	0f 93       	push	r16
    3e12:	1f 93       	push	r17
    3e14:	cf 93       	push	r28
    3e16:	df 93       	push	r29
    3e18:	ec 01       	movw	r28, r24
    3e1a:	89 01       	movw	r16, r18
    3e1c:	b0 df       	rcall	.-160    	; 0x3d7e <_ZN9NFC_PN53212writecommandEPhh>
    3e1e:	b8 01       	movw	r22, r16
    3e20:	ce 01       	movw	r24, r28
    3e22:	24 df       	rcall	.-440    	; 0x3c6c <_ZN9NFC_PN5329waitreadyEj>
    3e24:	88 23       	and	r24, r24
    3e26:	31 f0       	breq	.+12     	; 0x3e34 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj+0x24>
    3e28:	ce 01       	movw	r24, r28
    3e2a:	df 91       	pop	r29
    3e2c:	cf 91       	pop	r28
    3e2e:	1f 91       	pop	r17
    3e30:	0f 91       	pop	r16
    3e32:	7e cf       	rjmp	.-260    	; 0x3d30 <_ZN9NFC_PN5327readackEv>
    3e34:	80 e0       	ldi	r24, 0x00	; 0
    3e36:	df 91       	pop	r29
    3e38:	cf 91       	pop	r28
    3e3a:	1f 91       	pop	r17
    3e3c:	0f 91       	pop	r16
    3e3e:	08 95       	ret

00003e40 <_ZN9NFC_PN53218getFirmwareVersionEv>:
    3e40:	cf 93       	push	r28
    3e42:	df 93       	push	r29
    3e44:	ec 01       	movw	r28, r24
    3e46:	82 e0       	ldi	r24, 0x02	; 2
    3e48:	80 93 d7 0b 	sts	0x0BD7, r24	; 0x800bd7 <pn532_packetbuffer>
    3e4c:	28 ee       	ldi	r18, 0xE8	; 232
    3e4e:	33 e0       	ldi	r19, 0x03	; 3
    3e50:	41 e0       	ldi	r20, 0x01	; 1
    3e52:	67 ed       	ldi	r22, 0xD7	; 215
    3e54:	7b e0       	ldi	r23, 0x0B	; 11
    3e56:	ce 01       	movw	r24, r28
    3e58:	db df       	rcall	.-74     	; 0x3e10 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    3e5a:	81 11       	cpse	r24, r1
    3e5c:	04 c0       	rjmp	.+8      	; 0x3e66 <_ZN9NFC_PN53218getFirmwareVersionEv+0x26>
    3e5e:	60 e0       	ldi	r22, 0x00	; 0
    3e60:	70 e0       	ldi	r23, 0x00	; 0
    3e62:	cb 01       	movw	r24, r22
    3e64:	32 c0       	rjmp	.+100    	; 0x3eca <_ZN9NFC_PN53218getFirmwareVersionEv+0x8a>
    3e66:	4c e0       	ldi	r20, 0x0C	; 12
    3e68:	67 ed       	ldi	r22, 0xD7	; 215
    3e6a:	7b e0       	ldi	r23, 0x0B	; 11
    3e6c:	ce 01       	movw	r24, r28
    3e6e:	2c df       	rcall	.-424    	; 0x3cc8 <_ZN9NFC_PN5328readdataEPhh>
    3e70:	46 e0       	ldi	r20, 0x06	; 6
    3e72:	50 e0       	ldi	r21, 0x00	; 0
    3e74:	69 e5       	ldi	r22, 0x59	; 89
    3e76:	71 e0       	ldi	r23, 0x01	; 1
    3e78:	87 ed       	ldi	r24, 0xD7	; 215
    3e7a:	9b e0       	ldi	r25, 0x0B	; 11
    3e7c:	0e 94 d4 41 	call	0x83a8	; 0x83a8 <strncmp>
    3e80:	89 2b       	or	r24, r25
    3e82:	69 f7       	brne	.-38     	; 0x3e5e <_ZN9NFC_PN53218getFirmwareVersionEv+0x1e>
    3e84:	8d 89       	ldd	r24, Y+21	; 0x15
    3e86:	81 11       	cpse	r24, r1
    3e88:	03 c0       	rjmp	.+6      	; 0x3e90 <_ZN9NFC_PN53218getFirmwareVersionEv+0x50>
    3e8a:	e7 e0       	ldi	r30, 0x07	; 7
    3e8c:	f0 e0       	ldi	r31, 0x00	; 0
    3e8e:	02 c0       	rjmp	.+4      	; 0x3e94 <_ZN9NFC_PN53218getFirmwareVersionEv+0x54>
    3e90:	e6 e0       	ldi	r30, 0x06	; 6
    3e92:	f0 e0       	ldi	r31, 0x00	; 0
    3e94:	e9 52       	subi	r30, 0x29	; 41
    3e96:	f4 4f       	sbci	r31, 0xF4	; 244
    3e98:	60 81       	ld	r22, Z
    3e9a:	86 2f       	mov	r24, r22
    3e9c:	90 e0       	ldi	r25, 0x00	; 0
    3e9e:	a0 e0       	ldi	r26, 0x00	; 0
    3ea0:	b0 e0       	ldi	r27, 0x00	; 0
    3ea2:	ba 2f       	mov	r27, r26
    3ea4:	a9 2f       	mov	r26, r25
    3ea6:	98 2f       	mov	r25, r24
    3ea8:	88 27       	eor	r24, r24
    3eaa:	21 81       	ldd	r18, Z+1	; 0x01
    3eac:	82 2b       	or	r24, r18
    3eae:	ba 2f       	mov	r27, r26
    3eb0:	a9 2f       	mov	r26, r25
    3eb2:	98 2f       	mov	r25, r24
    3eb4:	88 27       	eor	r24, r24
    3eb6:	22 81       	ldd	r18, Z+2	; 0x02
    3eb8:	82 2b       	or	r24, r18
    3eba:	ba 2f       	mov	r27, r26
    3ebc:	a9 2f       	mov	r26, r25
    3ebe:	98 2f       	mov	r25, r24
    3ec0:	88 27       	eor	r24, r24
    3ec2:	23 81       	ldd	r18, Z+3	; 0x03
    3ec4:	bc 01       	movw	r22, r24
    3ec6:	cd 01       	movw	r24, r26
    3ec8:	62 2b       	or	r22, r18
    3eca:	df 91       	pop	r29
    3ecc:	cf 91       	pop	r28
    3ece:	08 95       	ret

00003ed0 <_ZN9NFC_PN5329SAMConfigEv>:
    3ed0:	cf 93       	push	r28
    3ed2:	df 93       	push	r29
    3ed4:	ec 01       	movw	r28, r24
    3ed6:	94 e1       	ldi	r25, 0x14	; 20
    3ed8:	90 93 d7 0b 	sts	0x0BD7, r25	; 0x800bd7 <pn532_packetbuffer>
    3edc:	81 e0       	ldi	r24, 0x01	; 1
    3ede:	80 93 d8 0b 	sts	0x0BD8, r24	; 0x800bd8 <pn532_packetbuffer+0x1>
    3ee2:	90 93 d9 0b 	sts	0x0BD9, r25	; 0x800bd9 <pn532_packetbuffer+0x2>
    3ee6:	80 93 da 0b 	sts	0x0BDA, r24	; 0x800bda <pn532_packetbuffer+0x3>
    3eea:	28 ee       	ldi	r18, 0xE8	; 232
    3eec:	33 e0       	ldi	r19, 0x03	; 3
    3eee:	44 e0       	ldi	r20, 0x04	; 4
    3ef0:	67 ed       	ldi	r22, 0xD7	; 215
    3ef2:	7b e0       	ldi	r23, 0x0B	; 11
    3ef4:	ce 01       	movw	r24, r28
    3ef6:	8c df       	rcall	.-232    	; 0x3e10 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    3ef8:	88 23       	and	r24, r24
    3efa:	a9 f0       	breq	.+42     	; 0x3f26 <_ZN9NFC_PN5329SAMConfigEv+0x56>
    3efc:	48 e0       	ldi	r20, 0x08	; 8
    3efe:	67 ed       	ldi	r22, 0xD7	; 215
    3f00:	7b e0       	ldi	r23, 0x0B	; 11
    3f02:	ce 01       	movw	r24, r28
    3f04:	e1 de       	rcall	.-574    	; 0x3cc8 <_ZN9NFC_PN5328readdataEPhh>
    3f06:	8d 89       	ldd	r24, Y+21	; 0x15
    3f08:	81 11       	cpse	r24, r1
    3f0a:	03 c0       	rjmp	.+6      	; 0x3f12 <_ZN9NFC_PN5329SAMConfigEv+0x42>
    3f0c:	86 e0       	ldi	r24, 0x06	; 6
    3f0e:	90 e0       	ldi	r25, 0x00	; 0
    3f10:	02 c0       	rjmp	.+4      	; 0x3f16 <_ZN9NFC_PN5329SAMConfigEv+0x46>
    3f12:	85 e0       	ldi	r24, 0x05	; 5
    3f14:	90 e0       	ldi	r25, 0x00	; 0
    3f16:	fc 01       	movw	r30, r24
    3f18:	e9 52       	subi	r30, 0x29	; 41
    3f1a:	f4 4f       	sbci	r31, 0xF4	; 244
    3f1c:	81 e0       	ldi	r24, 0x01	; 1
    3f1e:	90 81       	ld	r25, Z
    3f20:	95 31       	cpi	r25, 0x15	; 21
    3f22:	09 f0       	breq	.+2      	; 0x3f26 <_ZN9NFC_PN5329SAMConfigEv+0x56>
    3f24:	80 e0       	ldi	r24, 0x00	; 0
    3f26:	df 91       	pop	r29
    3f28:	cf 91       	pop	r28
    3f2a:	08 95       	ret

00003f2c <_ZN9NFC_PN53227setPassiveActivationRetriesEh>:
    3f2c:	e7 ed       	ldi	r30, 0xD7	; 215
    3f2e:	fb e0       	ldi	r31, 0x0B	; 11
    3f30:	22 e3       	ldi	r18, 0x32	; 50
    3f32:	20 83       	st	Z, r18
    3f34:	25 e0       	ldi	r18, 0x05	; 5
    3f36:	21 83       	std	Z+1, r18	; 0x01
    3f38:	2f ef       	ldi	r18, 0xFF	; 255
    3f3a:	22 83       	std	Z+2, r18	; 0x02
    3f3c:	21 e0       	ldi	r18, 0x01	; 1
    3f3e:	23 83       	std	Z+3, r18	; 0x03
    3f40:	64 83       	std	Z+4, r22	; 0x04
    3f42:	28 ee       	ldi	r18, 0xE8	; 232
    3f44:	33 e0       	ldi	r19, 0x03	; 3
    3f46:	45 e0       	ldi	r20, 0x05	; 5
    3f48:	bf 01       	movw	r22, r30
    3f4a:	62 cf       	rjmp	.-316    	; 0x3e10 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>

00003f4c <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j>:
    3f4c:	af 92       	push	r10
    3f4e:	bf 92       	push	r11
    3f50:	cf 92       	push	r12
    3f52:	df 92       	push	r13
    3f54:	ef 92       	push	r14
    3f56:	ff 92       	push	r15
    3f58:	0f 93       	push	r16
    3f5a:	1f 93       	push	r17
    3f5c:	cf 93       	push	r28
    3f5e:	df 93       	push	r29
    3f60:	ec 01       	movw	r28, r24
    3f62:	7a 01       	movw	r14, r20
    3f64:	59 01       	movw	r10, r18
    3f66:	68 01       	movw	r12, r16
    3f68:	8a e4       	ldi	r24, 0x4A	; 74
    3f6a:	80 93 d7 0b 	sts	0x0BD7, r24	; 0x800bd7 <pn532_packetbuffer>
    3f6e:	81 e0       	ldi	r24, 0x01	; 1
    3f70:	80 93 d8 0b 	sts	0x0BD8, r24	; 0x800bd8 <pn532_packetbuffer+0x1>
    3f74:	60 93 d9 0b 	sts	0x0BD9, r22	; 0x800bd9 <pn532_packetbuffer+0x2>
    3f78:	98 01       	movw	r18, r16
    3f7a:	43 e0       	ldi	r20, 0x03	; 3
    3f7c:	67 ed       	ldi	r22, 0xD7	; 215
    3f7e:	7b e0       	ldi	r23, 0x0B	; 11
    3f80:	ce 01       	movw	r24, r28
    3f82:	46 df       	rcall	.-372    	; 0x3e10 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    3f84:	18 2f       	mov	r17, r24
    3f86:	88 23       	and	r24, r24
    3f88:	41 f1       	breq	.+80     	; 0x3fda <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x8e>
    3f8a:	8d 89       	ldd	r24, Y+21	; 0x15
    3f8c:	88 23       	and	r24, r24
    3f8e:	79 f0       	breq	.+30     	; 0x3fae <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x62>
    3f90:	44 e1       	ldi	r20, 0x14	; 20
    3f92:	67 ed       	ldi	r22, 0xD7	; 215
    3f94:	7b e0       	ldi	r23, 0x0B	; 11
    3f96:	ce 01       	movw	r24, r28
    3f98:	97 de       	rcall	.-722    	; 0x3cc8 <_ZN9NFC_PN5328readdataEPhh>
    3f9a:	80 91 de 0b 	lds	r24, 0x0BDE	; 0x800bde <pn532_packetbuffer+0x7>
    3f9e:	81 30       	cpi	r24, 0x01	; 1
    3fa0:	e1 f4       	brne	.+56     	; 0x3fda <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x8e>
    3fa2:	80 91 e3 0b 	lds	r24, 0x0BE3	; 0x800be3 <pn532_packetbuffer+0xc>
    3fa6:	f5 01       	movw	r30, r10
    3fa8:	80 83       	st	Z, r24
    3faa:	80 e0       	ldi	r24, 0x00	; 0
    3fac:	06 c0       	rjmp	.+12     	; 0x3fba <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x6e>
    3fae:	b6 01       	movw	r22, r12
    3fb0:	ce 01       	movw	r24, r28
    3fb2:	5c de       	rcall	.-840    	; 0x3c6c <_ZN9NFC_PN5329waitreadyEj>
    3fb4:	81 11       	cpse	r24, r1
    3fb6:	ec cf       	rjmp	.-40     	; 0x3f90 <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x44>
    3fb8:	10 c0       	rjmp	.+32     	; 0x3fda <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x8e>
    3fba:	90 91 e3 0b 	lds	r25, 0x0BE3	; 0x800be3 <pn532_packetbuffer+0xc>
    3fbe:	89 17       	cp	r24, r25
    3fc0:	68 f4       	brcc	.+26     	; 0x3fdc <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x90>
    3fc2:	28 2f       	mov	r18, r24
    3fc4:	30 e0       	ldi	r19, 0x00	; 0
    3fc6:	f9 01       	movw	r30, r18
    3fc8:	e9 52       	subi	r30, 0x29	; 41
    3fca:	f4 4f       	sbci	r31, 0xF4	; 244
    3fcc:	95 85       	ldd	r25, Z+13	; 0x0d
    3fce:	f7 01       	movw	r30, r14
    3fd0:	e2 0f       	add	r30, r18
    3fd2:	f3 1f       	adc	r31, r19
    3fd4:	90 83       	st	Z, r25
    3fd6:	8f 5f       	subi	r24, 0xFF	; 255
    3fd8:	f0 cf       	rjmp	.-32     	; 0x3fba <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x6e>
    3fda:	10 e0       	ldi	r17, 0x00	; 0
    3fdc:	81 2f       	mov	r24, r17
    3fde:	df 91       	pop	r29
    3fe0:	cf 91       	pop	r28
    3fe2:	1f 91       	pop	r17
    3fe4:	0f 91       	pop	r16
    3fe6:	ff 90       	pop	r15
    3fe8:	ef 90       	pop	r14
    3fea:	df 90       	pop	r13
    3fec:	cf 90       	pop	r12
    3fee:	bf 90       	pop	r11
    3ff0:	af 90       	pop	r10
    3ff2:	08 95       	ret

00003ff4 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_>:

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
uint8_t NFC_PN532::mifareclassic_AuthenticateBlock (uint8_t * uid, uint8_t uidLen, uint32_t blockNumber, uint8_t keyNumber, uint8_t * keyData)
{
    3ff4:	af 92       	push	r10
    3ff6:	bf 92       	push	r11
    3ff8:	cf 92       	push	r12
    3ffa:	df 92       	push	r13
    3ffc:	ef 92       	push	r14
    3ffe:	0f 93       	push	r16
    4000:	1f 93       	push	r17
    4002:	cf 93       	push	r28
    4004:	df 93       	push	r29
    4006:	ec 01       	movw	r28, r24
    4008:	14 2f       	mov	r17, r20
  uint8_t len;
  uint8_t i;

  // Hang on to the key and uid data
  memcpy (_key, keyData, 6);
    400a:	5c 01       	movw	r10, r24
    400c:	8e e0       	ldi	r24, 0x0E	; 14
    400e:	a8 0e       	add	r10, r24
    4010:	b1 1c       	adc	r11, r1
    4012:	86 e0       	ldi	r24, 0x06	; 6
    4014:	f6 01       	movw	r30, r12
    4016:	d5 01       	movw	r26, r10
    4018:	01 90       	ld	r0, Z+
    401a:	0d 92       	st	X+, r0
    401c:	8a 95       	dec	r24
    401e:	e1 f7       	brne	.-8      	; 0x4018 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x24>
  memcpy (_uid, uid, uidLen);
    4020:	50 e0       	ldi	r21, 0x00	; 0
    4022:	ce 01       	movw	r24, r28
    4024:	06 96       	adiw	r24, 0x06	; 6
    4026:	0e 94 bb 41 	call	0x8376	; 0x8376 <memcpy>
  _uidLen = uidLen;
    402a:	1d 87       	std	Y+13, r17	; 0x0d
    PN532DEBUGPRINT.print(F("Using authentication KEY "));PN532DEBUGPRINT.print(keyNumber ? 'B' : 'A');PN532DEBUGPRINT.print(F(": "));
    NFC_PN532::PrintHex(_key, 6);
  #endif

  // Prepare the authentication command //
  pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;   /* Data Exchange Header */
    402c:	80 e4       	ldi	r24, 0x40	; 64
    402e:	80 93 d7 0b 	sts	0x0BD7, r24	; 0x800bd7 <pn532_packetbuffer>
  pn532_packetbuffer[1] = 1;                              /* Max card numbers */
    4032:	81 e0       	ldi	r24, 0x01	; 1
    4034:	80 93 d8 0b 	sts	0x0BD8, r24	; 0x800bd8 <pn532_packetbuffer+0x1>
  pn532_packetbuffer[2] = (keyNumber) ? MIFARE_CMD_AUTH_B : MIFARE_CMD_AUTH_A;
    4038:	e1 10       	cpse	r14, r1
    403a:	02 c0       	rjmp	.+4      	; 0x4040 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x4c>
    403c:	80 e6       	ldi	r24, 0x60	; 96
    403e:	01 c0       	rjmp	.+2      	; 0x4042 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x4e>
    4040:	81 e6       	ldi	r24, 0x61	; 97
    4042:	80 93 d9 0b 	sts	0x0BD9, r24	; 0x800bd9 <pn532_packetbuffer+0x2>
  pn532_packetbuffer[3] = blockNumber;                    /* Block Number (1K = 0..63, 4K = 0..255 */
    4046:	00 93 da 0b 	sts	0x0BDA, r16	; 0x800bda <pn532_packetbuffer+0x3>
  memcpy (pn532_packetbuffer+4, _key, 6);
    404a:	86 e0       	ldi	r24, 0x06	; 6
    404c:	f5 01       	movw	r30, r10
    404e:	ab ed       	ldi	r26, 0xDB	; 219
    4050:	bb e0       	ldi	r27, 0x0B	; 11
    4052:	01 90       	ld	r0, Z+
    4054:	0d 92       	st	X+, r0
    4056:	8a 95       	dec	r24
    4058:	e1 f7       	brne	.-8      	; 0x4052 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x5e>
  for (i = 0; i < _uidLen; i++)
    405a:	80 e0       	ldi	r24, 0x00	; 0
    405c:	4d 85       	ldd	r20, Y+13	; 0x0d
    405e:	84 17       	cp	r24, r20
    4060:	60 f4       	brcc	.+24     	; 0x407a <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x86>
  {
    pn532_packetbuffer[10+i] = _uid[i];                /* 4 byte card ID */
    4062:	28 2f       	mov	r18, r24
    4064:	30 e0       	ldi	r19, 0x00	; 0
    4066:	fe 01       	movw	r30, r28
    4068:	e2 0f       	add	r30, r18
    406a:	f3 1f       	adc	r31, r19
    406c:	96 81       	ldd	r25, Z+6	; 0x06
    406e:	f9 01       	movw	r30, r18
    4070:	e9 52       	subi	r30, 0x29	; 41
    4072:	f4 4f       	sbci	r31, 0xF4	; 244
    4074:	92 87       	std	Z+10, r25	; 0x0a
  pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;   /* Data Exchange Header */
  pn532_packetbuffer[1] = 1;                              /* Max card numbers */
  pn532_packetbuffer[2] = (keyNumber) ? MIFARE_CMD_AUTH_B : MIFARE_CMD_AUTH_A;
  pn532_packetbuffer[3] = blockNumber;                    /* Block Number (1K = 0..63, 4K = 0..255 */
  memcpy (pn532_packetbuffer+4, _key, 6);
  for (i = 0; i < _uidLen; i++)
    4076:	8f 5f       	subi	r24, 0xFF	; 255
    4078:	f1 cf       	rjmp	.-30     	; 0x405c <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x68>
  {
    pn532_packetbuffer[10+i] = _uid[i];                /* 4 byte card ID */
  }

  if (! sendCommandCheckAck(pn532_packetbuffer, 10+_uidLen))
    407a:	46 5f       	subi	r20, 0xF6	; 246
    407c:	28 ee       	ldi	r18, 0xE8	; 232
    407e:	33 e0       	ldi	r19, 0x03	; 3
    4080:	67 ed       	ldi	r22, 0xD7	; 215
    4082:	7b e0       	ldi	r23, 0x0B	; 11
    4084:	ce 01       	movw	r24, r28
    4086:	c4 de       	rcall	.-632    	; 0x3e10 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    4088:	88 23       	and	r24, r24
    408a:	49 f0       	breq	.+18     	; 0x409e <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0xaa>
    return 0;

  // Read the response packet
  readdata(pn532_packetbuffer, 12);
    408c:	4c e0       	ldi	r20, 0x0C	; 12
    408e:	67 ed       	ldi	r22, 0xD7	; 215
    4090:	7b e0       	ldi	r23, 0x0B	; 11
    4092:	ce 01       	movw	r24, r28
    4094:	19 de       	rcall	.-974    	; 0x3cc8 <_ZN9NFC_PN5328readdataEPhh>
  {
    pn532_packetbuffer[10+i] = _uid[i];                /* 4 byte card ID */
  }

  if (! sendCommandCheckAck(pn532_packetbuffer, 10+_uidLen))
    return 0;
    4096:	81 e0       	ldi	r24, 0x01	; 1
    4098:	90 91 de 0b 	lds	r25, 0x0BDE	; 0x800bde <pn532_packetbuffer+0x7>
    409c:	91 11       	cpse	r25, r1
    409e:	80 e0       	ldi	r24, 0x00	; 0
    #endif
    return 0;
  }

  return 1;
}
    40a0:	df 91       	pop	r29
    40a2:	cf 91       	pop	r28
    40a4:	1f 91       	pop	r17
    40a6:	0f 91       	pop	r16
    40a8:	ef 90       	pop	r14
    40aa:	df 90       	pop	r13
    40ac:	cf 90       	pop	r12
    40ae:	bf 90       	pop	r11
    40b0:	af 90       	pop	r10
    40b2:	08 95       	ret

000040b4 <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh>:

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
uint8_t NFC_PN532::mifareclassic_ReadDataBlock (uint8_t blockNumber, uint8_t * data)
{
    40b4:	0f 93       	push	r16
    40b6:	1f 93       	push	r17
    40b8:	cf 93       	push	r28
    40ba:	df 93       	push	r29
    40bc:	ec 01       	movw	r28, r24
    40be:	8a 01       	movw	r16, r20
  #ifdef MIFAREDEBUG
    PN532DEBUGPRINT.print(F("Trying to read 16 bytes from block "));PN532DEBUGPRINT.println(blockNumber);
  #endif

  /* Prepare the command */
  pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;
    40c0:	80 e4       	ldi	r24, 0x40	; 64
    40c2:	80 93 d7 0b 	sts	0x0BD7, r24	; 0x800bd7 <pn532_packetbuffer>
  pn532_packetbuffer[1] = 1;                      /* Card number */
    40c6:	81 e0       	ldi	r24, 0x01	; 1
    40c8:	80 93 d8 0b 	sts	0x0BD8, r24	; 0x800bd8 <pn532_packetbuffer+0x1>
  pn532_packetbuffer[2] = MIFARE_CMD_READ;        /* Mifare Read command = 0x30 */
    40cc:	80 e3       	ldi	r24, 0x30	; 48
    40ce:	80 93 d9 0b 	sts	0x0BD9, r24	; 0x800bd9 <pn532_packetbuffer+0x2>
  pn532_packetbuffer[3] = blockNumber;            /* Block Number (0..63 for 1K, 0..255 for 4K) */
    40d2:	60 93 da 0b 	sts	0x0BDA, r22	; 0x800bda <pn532_packetbuffer+0x3>

  /* Send the command */
  if (! sendCommandCheckAck(pn532_packetbuffer, 4))
    40d6:	28 ee       	ldi	r18, 0xE8	; 232
    40d8:	33 e0       	ldi	r19, 0x03	; 3
    40da:	44 e0       	ldi	r20, 0x04	; 4
    40dc:	67 ed       	ldi	r22, 0xD7	; 215
    40de:	7b e0       	ldi	r23, 0x0B	; 11
    40e0:	ce 01       	movw	r24, r28
    40e2:	96 de       	rcall	.-724    	; 0x3e10 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    40e4:	81 11       	cpse	r24, r1
    40e6:	02 c0       	rjmp	.+4      	; 0x40ec <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh+0x38>
  {
    #ifdef MIFAREDEBUG
      PN532DEBUGPRINT.println(F("Failed to receive ACK for read command"));
    #endif
    return 0;
    40e8:	80 e0       	ldi	r24, 0x00	; 0
    40ea:	12 c0       	rjmp	.+36     	; 0x4110 <__stack+0x11>
  }

  /* Read the response packet */
  readdata(pn532_packetbuffer, 26);
    40ec:	4a e1       	ldi	r20, 0x1A	; 26
    40ee:	67 ed       	ldi	r22, 0xD7	; 215
    40f0:	7b e0       	ldi	r23, 0x0B	; 11
    40f2:	ce 01       	movw	r24, r28
    40f4:	e9 dd       	rcall	.-1070   	; 0x3cc8 <_ZN9NFC_PN5328readdataEPhh>

  /* If byte 8 isn't 0x00 we probably have an error */
  if (pn532_packetbuffer[7] != 0x00)
    40f6:	80 91 de 0b 	lds	r24, 0x0BDE	; 0x800bde <pn532_packetbuffer+0x7>
    40fa:	81 11       	cpse	r24, r1
    40fc:	f5 cf       	rjmp	.-22     	; 0x40e8 <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh+0x34>
    return 0;
  }

  /* Copy the 16 data bytes to the output buffer        */
  /* Block content starts at byte 9 of a valid response */
  memcpy (data, pn532_packetbuffer+8, 16);
    40fe:	80 e1       	ldi	r24, 0x10	; 16
    4100:	ef ed       	ldi	r30, 0xDF	; 223
    4102:	fb e0       	ldi	r31, 0x0B	; 11
    4104:	d8 01       	movw	r26, r16
    4106:	01 90       	ld	r0, Z+
    4108:	0d 92       	st	X+, r0
    410a:	8a 95       	dec	r24
    410c:	e1 f7       	brne	.-8      	; 0x4106 <__stack+0x7>
    PN532DEBUGPRINT.print(F("Block "));
    PN532DEBUGPRINT.println(blockNumber);
    NFC_PN532::PrintHexChar(data, 16);
  #endif

  return 1;
    410e:	81 e0       	ldi	r24, 0x01	; 1
}
    4110:	df 91       	pop	r29
    4112:	cf 91       	pop	r28
    4114:	1f 91       	pop	r17
    4116:	0f 91       	pop	r16
    4118:	08 95       	ret

0000411a <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh>:

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
uint8_t NFC_PN532::mifareclassic_WriteDataBlock (uint8_t blockNumber, uint8_t * data)
{
    411a:	cf 93       	push	r28
    411c:	df 93       	push	r29
    411e:	ec 01       	movw	r28, r24
  #ifdef MIFAREDEBUG
    PN532DEBUGPRINT.print(F("Trying to write 16 bytes to block "));PN532DEBUGPRINT.println(blockNumber);
  #endif

  /* Prepare the first command */
  pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;
    4120:	80 e4       	ldi	r24, 0x40	; 64
    4122:	80 93 d7 0b 	sts	0x0BD7, r24	; 0x800bd7 <pn532_packetbuffer>
  pn532_packetbuffer[1] = 1;                      /* Card number */
    4126:	81 e0       	ldi	r24, 0x01	; 1
    4128:	80 93 d8 0b 	sts	0x0BD8, r24	; 0x800bd8 <pn532_packetbuffer+0x1>
  pn532_packetbuffer[2] = MIFARE_CMD_WRITE;       /* Mifare Write command = 0xA0 */
    412c:	80 ea       	ldi	r24, 0xA0	; 160
    412e:	80 93 d9 0b 	sts	0x0BD9, r24	; 0x800bd9 <pn532_packetbuffer+0x2>
  pn532_packetbuffer[3] = blockNumber;            /* Block Number (0..63 for 1K, 0..255 for 4K) */
    4132:	60 93 da 0b 	sts	0x0BDA, r22	; 0x800bda <pn532_packetbuffer+0x3>
  memcpy (pn532_packetbuffer+4, data, 16);          /* Data Payload */
    4136:	80 e1       	ldi	r24, 0x10	; 16
    4138:	fa 01       	movw	r30, r20
    413a:	ab ed       	ldi	r26, 0xDB	; 219
    413c:	bb e0       	ldi	r27, 0x0B	; 11
    413e:	01 90       	ld	r0, Z+
    4140:	0d 92       	st	X+, r0
    4142:	8a 95       	dec	r24
    4144:	e1 f7       	brne	.-8      	; 0x413e <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh+0x24>

  /* Send the command */
  if (! sendCommandCheckAck(pn532_packetbuffer, 20))
    4146:	28 ee       	ldi	r18, 0xE8	; 232
    4148:	33 e0       	ldi	r19, 0x03	; 3
    414a:	44 e1       	ldi	r20, 0x14	; 20
    414c:	67 ed       	ldi	r22, 0xD7	; 215
    414e:	7b e0       	ldi	r23, 0x0B	; 11
    4150:	ce 01       	movw	r24, r28
    4152:	5e de       	rcall	.-836    	; 0x3e10 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    4154:	88 23       	and	r24, r24
    4156:	69 f0       	breq	.+26     	; 0x4172 <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh+0x58>
    4158:	8f e3       	ldi	r24, 0x3F	; 63
    415a:	9c e9       	ldi	r25, 0x9C	; 156
    415c:	01 97       	sbiw	r24, 0x01	; 1
    415e:	f1 f7       	brne	.-4      	; 0x415c <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh+0x42>
    4160:	00 c0       	rjmp	.+0      	; 0x4162 <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh+0x48>
    4162:	00 00       	nop
    return 0;
  }
  _delay_ms(10);

  /* Read the response packet */
  readdata(pn532_packetbuffer, 26);
    4164:	4a e1       	ldi	r20, 0x1A	; 26
    4166:	67 ed       	ldi	r22, 0xD7	; 215
    4168:	7b e0       	ldi	r23, 0x0B	; 11
    416a:	ce 01       	movw	r24, r28
    416c:	ad dd       	rcall	.-1190   	; 0x3cc8 <_ZN9NFC_PN5328readdataEPhh>
    416e:	81 e0       	ldi	r24, 0x01	; 1
    4170:	01 c0       	rjmp	.+2      	; 0x4174 <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh+0x5a>
  if (! sendCommandCheckAck(pn532_packetbuffer, 20))
  {
    #ifdef MIFAREDEBUG
      PN532DEBUGPRINT.println(F("Failed to receive ACK for write command"));
    #endif
    return 0;
    4172:	80 e0       	ldi	r24, 0x00	; 0

  /* Read the response packet */
  readdata(pn532_packetbuffer, 26);

  return 1;
}
    4174:	df 91       	pop	r29
    4176:	cf 91       	pop	r28
    4178:	08 95       	ret

0000417a <_ZL9date2daysjhh>:
} // of method pinAlarm()                                                     //                                  //
/*******************************************************************************************************************
** Method pinSquareWave() will set the control register flag to make the INT/SQW Pin produce a 1Hz signal         **
*******************************************************************************************************************/
void DS3231M_Class::pinSquareWave() {                                         //                                  //
  writeByte(DS3231M_CONTROL,readByte(DS3231M_CONTROL)|0x4);                   // Set bit 3 to off                 //
    417a:	80 3d       	cpi	r24, 0xD0	; 208
    417c:	27 e0       	ldi	r18, 0x07	; 7
    417e:	92 07       	cpc	r25, r18
    4180:	10 f0       	brcs	.+4      	; 0x4186 <_ZL9date2daysjhh+0xc>
    4182:	80 5d       	subi	r24, 0xD0	; 208
    4184:	97 40       	sbci	r25, 0x07	; 7
    4186:	50 e0       	ldi	r21, 0x00	; 0
    4188:	e4 e2       	ldi	r30, 0x24	; 36
    418a:	f2 e0       	ldi	r31, 0x02	; 2
    418c:	21 e0       	ldi	r18, 0x01	; 1
    418e:	26 17       	cp	r18, r22
    4190:	30 f4       	brcc	.+12     	; 0x419e <_ZL9date2daysjhh+0x24>
    4192:	34 91       	lpm	r19, Z
    4194:	43 0f       	add	r20, r19
    4196:	51 1d       	adc	r21, r1
    4198:	2f 5f       	subi	r18, 0xFF	; 255
    419a:	31 96       	adiw	r30, 0x01	; 1
    419c:	f8 cf       	rjmp	.-16     	; 0x418e <_ZL9date2daysjhh+0x14>
    419e:	63 30       	cpi	r22, 0x03	; 3
    41a0:	38 f0       	brcs	.+14     	; 0x41b0 <_ZL9date2daysjhh+0x36>
    41a2:	9c 01       	movw	r18, r24
    41a4:	23 70       	andi	r18, 0x03	; 3
    41a6:	33 27       	eor	r19, r19
    41a8:	23 2b       	or	r18, r19
    41aa:	11 f4       	brne	.+4      	; 0x41b0 <_ZL9date2daysjhh+0x36>
    41ac:	4f 5f       	subi	r20, 0xFF	; 255
    41ae:	5f 4f       	sbci	r21, 0xFF	; 255
    41b0:	bc 01       	movw	r22, r24
    41b2:	6d 5f       	subi	r22, 0xFD	; 253
    41b4:	7f 4f       	sbci	r23, 0xFF	; 255
    41b6:	76 95       	lsr	r23
    41b8:	67 95       	ror	r22
    41ba:	76 95       	lsr	r23
    41bc:	67 95       	ror	r22
    41be:	ed e6       	ldi	r30, 0x6D	; 109
    41c0:	f1 e0       	ldi	r31, 0x01	; 1
    41c2:	8e 9f       	mul	r24, r30
    41c4:	90 01       	movw	r18, r0
    41c6:	8f 9f       	mul	r24, r31
    41c8:	30 0d       	add	r19, r0
    41ca:	9e 9f       	mul	r25, r30
    41cc:	30 0d       	add	r19, r0
    41ce:	11 24       	eor	r1, r1
    41d0:	c9 01       	movw	r24, r18
    41d2:	01 97       	sbiw	r24, 0x01	; 1
    41d4:	86 0f       	add	r24, r22
    41d6:	97 1f       	adc	r25, r23
    41d8:	84 0f       	add	r24, r20
    41da:	95 1f       	adc	r25, r21
    41dc:	08 95       	ret

000041de <_ZL6conv2dPKc>:
    41de:	fc 01       	movw	r30, r24
    41e0:	90 81       	ld	r25, Z
    41e2:	90 53       	subi	r25, 0x30	; 48
    41e4:	9a 30       	cpi	r25, 0x0A	; 10
    41e6:	08 f0       	brcs	.+2      	; 0x41ea <_ZL6conv2dPKc+0xc>
    41e8:	90 e0       	ldi	r25, 0x00	; 0
    41ea:	81 81       	ldd	r24, Z+1	; 0x01
    41ec:	80 53       	subi	r24, 0x30	; 48
    41ee:	2a e0       	ldi	r18, 0x0A	; 10
    41f0:	92 9f       	mul	r25, r18
    41f2:	80 0d       	add	r24, r0
    41f4:	11 24       	eor	r1, r1
    41f6:	08 95       	ret

000041f8 <_ZN8DateTimeC1Em>:
    41f8:	8f 92       	push	r8
    41fa:	9f 92       	push	r9
    41fc:	af 92       	push	r10
    41fe:	bf 92       	push	r11
    4200:	cf 92       	push	r12
    4202:	df 92       	push	r13
    4204:	ef 92       	push	r14
    4206:	ff 92       	push	r15
    4208:	cf 93       	push	r28
    420a:	df 93       	push	r29
    420c:	ec 01       	movw	r28, r24
    420e:	6a 01       	movw	r12, r20
    4210:	7b 01       	movw	r14, r22
    4212:	80 e8       	ldi	r24, 0x80	; 128
    4214:	c8 1a       	sub	r12, r24
    4216:	83 e4       	ldi	r24, 0x43	; 67
    4218:	d8 0a       	sbc	r13, r24
    421a:	8d e6       	ldi	r24, 0x6D	; 109
    421c:	e8 0a       	sbc	r14, r24
    421e:	88 e3       	ldi	r24, 0x38	; 56
    4220:	f8 0a       	sbc	r15, r24
    4222:	8c e3       	ldi	r24, 0x3C	; 60
    4224:	88 2e       	mov	r8, r24
    4226:	91 2c       	mov	r9, r1
    4228:	a1 2c       	mov	r10, r1
    422a:	b1 2c       	mov	r11, r1
    422c:	c7 01       	movw	r24, r14
    422e:	b6 01       	movw	r22, r12
    4230:	a5 01       	movw	r20, r10
    4232:	94 01       	movw	r18, r8
    4234:	0e 94 1c 3f 	call	0x7e38	; 0x7e38 <__udivmodsi4>
    4238:	6d 83       	std	Y+5, r22	; 0x05
    423a:	ca 01       	movw	r24, r20
    423c:	b9 01       	movw	r22, r18
    423e:	a5 01       	movw	r20, r10
    4240:	94 01       	movw	r18, r8
    4242:	0e 94 1c 3f 	call	0x7e38	; 0x7e38 <__udivmodsi4>
    4246:	6c 83       	std	Y+4, r22	; 0x04
    4248:	c7 01       	movw	r24, r14
    424a:	b6 01       	movw	r22, r12
    424c:	20 e1       	ldi	r18, 0x10	; 16
    424e:	3e e0       	ldi	r19, 0x0E	; 14
    4250:	40 e0       	ldi	r20, 0x00	; 0
    4252:	50 e0       	ldi	r21, 0x00	; 0
    4254:	0e 94 1c 3f 	call	0x7e38	; 0x7e38 <__udivmodsi4>
    4258:	ca 01       	movw	r24, r20
    425a:	b9 01       	movw	r22, r18
    425c:	28 e1       	ldi	r18, 0x18	; 24
    425e:	30 e0       	ldi	r19, 0x00	; 0
    4260:	40 e0       	ldi	r20, 0x00	; 0
    4262:	50 e0       	ldi	r21, 0x00	; 0
    4264:	0e 94 1c 3f 	call	0x7e38	; 0x7e38 <__udivmodsi4>
    4268:	6b 83       	std	Y+3, r22	; 0x03
    426a:	c7 01       	movw	r24, r14
    426c:	b6 01       	movw	r22, r12
    426e:	20 e8       	ldi	r18, 0x80	; 128
    4270:	31 e5       	ldi	r19, 0x51	; 81
    4272:	41 e0       	ldi	r20, 0x01	; 1
    4274:	50 e0       	ldi	r21, 0x00	; 0
    4276:	0e 94 1c 3f 	call	0x7e38	; 0x7e38 <__udivmodsi4>
    427a:	18 82       	st	Y, r1
    427c:	88 81       	ld	r24, Y
    427e:	98 2f       	mov	r25, r24
    4280:	93 70       	andi	r25, 0x03	; 3
    4282:	41 e0       	ldi	r20, 0x01	; 1
    4284:	50 e0       	ldi	r21, 0x00	; 0
    4286:	11 f0       	breq	.+4      	; 0x428c <_ZN8DateTimeC1Em+0x94>
    4288:	40 e0       	ldi	r20, 0x00	; 0
    428a:	50 e0       	ldi	r21, 0x00	; 0
    428c:	ba 01       	movw	r22, r20
    428e:	63 59       	subi	r22, 0x93	; 147
    4290:	7e 4f       	sbci	r23, 0xFE	; 254
    4292:	26 17       	cp	r18, r22
    4294:	37 07       	cpc	r19, r23
    4296:	38 f0       	brcs	.+14     	; 0x42a6 <_ZN8DateTimeC1Em+0xae>
    4298:	24 1b       	sub	r18, r20
    429a:	35 0b       	sbc	r19, r21
    429c:	2d 56       	subi	r18, 0x6D	; 109
    429e:	31 40       	sbci	r19, 0x01	; 1
    42a0:	8f 5f       	subi	r24, 0xFF	; 255
    42a2:	88 83       	st	Y, r24
    42a4:	eb cf       	rjmp	.-42     	; 0x427c <_ZN8DateTimeC1Em+0x84>
    42a6:	81 e0       	ldi	r24, 0x01	; 1
    42a8:	89 83       	std	Y+1, r24	; 0x01
    42aa:	89 81       	ldd	r24, Y+1	; 0x01
    42ac:	e8 2f       	mov	r30, r24
    42ae:	f0 e0       	ldi	r31, 0x00	; 0
    42b0:	ed 5d       	subi	r30, 0xDD	; 221
    42b2:	fd 4f       	sbci	r31, 0xFD	; 253
    42b4:	e4 91       	lpm	r30, Z
    42b6:	91 11       	cpse	r25, r1
    42b8:	03 c0       	rjmp	.+6      	; 0x42c0 <_ZN8DateTimeC1Em+0xc8>
    42ba:	82 30       	cpi	r24, 0x02	; 2
    42bc:	09 f4       	brne	.+2      	; 0x42c0 <_ZN8DateTimeC1Em+0xc8>
    42be:	ef 5f       	subi	r30, 0xFF	; 255
    42c0:	f0 e0       	ldi	r31, 0x00	; 0
    42c2:	2e 17       	cp	r18, r30
    42c4:	3f 07       	cpc	r19, r31
    42c6:	20 f0       	brcs	.+8      	; 0x42d0 <_ZN8DateTimeC1Em+0xd8>
    42c8:	2e 1b       	sub	r18, r30
    42ca:	3f 0b       	sbc	r19, r31
    42cc:	8f 5f       	subi	r24, 0xFF	; 255
    42ce:	ec cf       	rjmp	.-40     	; 0x42a8 <_ZN8DateTimeC1Em+0xb0>
    42d0:	2f 5f       	subi	r18, 0xFF	; 255
    42d2:	2a 83       	std	Y+2, r18	; 0x02
    42d4:	df 91       	pop	r29
    42d6:	cf 91       	pop	r28
    42d8:	ff 90       	pop	r15
    42da:	ef 90       	pop	r14
    42dc:	df 90       	pop	r13
    42de:	cf 90       	pop	r12
    42e0:	bf 90       	pop	r11
    42e2:	af 90       	pop	r10
    42e4:	9f 90       	pop	r9
    42e6:	8f 90       	pop	r8
    42e8:	08 95       	ret

000042ea <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>:
    42ea:	ef 92       	push	r14
    42ec:	ff 92       	push	r15
    42ee:	0f 93       	push	r16
    42f0:	1f 93       	push	r17
    42f2:	cf 93       	push	r28
    42f4:	df 93       	push	r29
    42f6:	cd b7       	in	r28, 0x3d	; 61
    42f8:	de b7       	in	r29, 0x3e	; 62
    42fa:	2b 97       	sbiw	r28, 0x0b	; 11
    42fc:	0f b6       	in	r0, 0x3f	; 63
    42fe:	f8 94       	cli
    4300:	de bf       	out	0x3e, r29	; 62
    4302:	0f be       	out	0x3f, r0	; 63
    4304:	cd bf       	out	0x3d, r28	; 61
    4306:	8c 01       	movw	r16, r24
    4308:	7a 01       	movw	r14, r20
    430a:	4b e0       	ldi	r20, 0x0B	; 11
    430c:	50 e0       	ldi	r21, 0x00	; 0
    430e:	ce 01       	movw	r24, r28
    4310:	01 96       	adiw	r24, 0x01	; 1
    4312:	0e 94 b2 41 	call	0x8364	; 0x8364 <memcpy_P>
    4316:	ce 01       	movw	r24, r28
    4318:	0a 96       	adiw	r24, 0x0a	; 10
    431a:	61 df       	rcall	.-318    	; 0x41de <_ZL6conv2dPKc>
    431c:	f8 01       	movw	r30, r16
    431e:	80 83       	st	Z, r24
    4320:	e9 81       	ldd	r30, Y+1	; 0x01
    4322:	8e 2f       	mov	r24, r30
    4324:	90 e0       	ldi	r25, 0x00	; 0
    4326:	fc 01       	movw	r30, r24
    4328:	e1 54       	subi	r30, 0x41	; 65
    432a:	f1 09       	sbc	r31, r1
    432c:	e3 31       	cpi	r30, 0x13	; 19
    432e:	f1 05       	cpc	r31, r1
    4330:	48 f5       	brcc	.+82     	; 0x4384 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
    4332:	ef 5a       	subi	r30, 0xAF	; 175
    4334:	ff 4f       	sbci	r31, 0xFF	; 255
    4336:	0c 94 3e 3f 	jmp	0x7e7c	; 0x7e7c <__tablejump2__>
    433a:	8a 81       	ldd	r24, Y+2	; 0x02
    433c:	81 36       	cpi	r24, 0x61	; 97
    433e:	29 f0       	breq	.+10     	; 0x434a <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x60>
    4340:	8b 81       	ldd	r24, Y+3	; 0x03
    4342:	8e 36       	cpi	r24, 0x6E	; 110
    4344:	21 f0       	breq	.+8      	; 0x434e <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x64>
    4346:	87 e0       	ldi	r24, 0x07	; 7
    4348:	1b c0       	rjmp	.+54     	; 0x4380 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    434a:	81 e0       	ldi	r24, 0x01	; 1
    434c:	19 c0       	rjmp	.+50     	; 0x4380 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    434e:	86 e0       	ldi	r24, 0x06	; 6
    4350:	17 c0       	rjmp	.+46     	; 0x4380 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    4352:	82 e0       	ldi	r24, 0x02	; 2
    4354:	15 c0       	rjmp	.+42     	; 0x4380 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    4356:	8b 81       	ldd	r24, Y+3	; 0x03
    4358:	82 37       	cpi	r24, 0x72	; 114
    435a:	11 f0       	breq	.+4      	; 0x4360 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x76>
    435c:	88 e0       	ldi	r24, 0x08	; 8
    435e:	10 c0       	rjmp	.+32     	; 0x4380 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    4360:	84 e0       	ldi	r24, 0x04	; 4
    4362:	0e c0       	rjmp	.+28     	; 0x4380 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    4364:	8b 81       	ldd	r24, Y+3	; 0x03
    4366:	82 37       	cpi	r24, 0x72	; 114
    4368:	11 f0       	breq	.+4      	; 0x436e <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x84>
    436a:	85 e0       	ldi	r24, 0x05	; 5
    436c:	09 c0       	rjmp	.+18     	; 0x4380 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    436e:	83 e0       	ldi	r24, 0x03	; 3
    4370:	07 c0       	rjmp	.+14     	; 0x4380 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    4372:	89 e0       	ldi	r24, 0x09	; 9
    4374:	05 c0       	rjmp	.+10     	; 0x4380 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    4376:	8a e0       	ldi	r24, 0x0A	; 10
    4378:	03 c0       	rjmp	.+6      	; 0x4380 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    437a:	8b e0       	ldi	r24, 0x0B	; 11
    437c:	01 c0       	rjmp	.+2      	; 0x4380 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    437e:	8c e0       	ldi	r24, 0x0C	; 12
    4380:	f8 01       	movw	r30, r16
    4382:	81 83       	std	Z+1, r24	; 0x01
    4384:	ce 01       	movw	r24, r28
    4386:	05 96       	adiw	r24, 0x05	; 5
    4388:	2a df       	rcall	.-428    	; 0x41de <_ZL6conv2dPKc>
    438a:	f8 01       	movw	r30, r16
    438c:	82 83       	std	Z+2, r24	; 0x02
    438e:	48 e0       	ldi	r20, 0x08	; 8
    4390:	50 e0       	ldi	r21, 0x00	; 0
    4392:	b7 01       	movw	r22, r14
    4394:	ce 01       	movw	r24, r28
    4396:	01 96       	adiw	r24, 0x01	; 1
    4398:	0e 94 b2 41 	call	0x8364	; 0x8364 <memcpy_P>
    439c:	ce 01       	movw	r24, r28
    439e:	01 96       	adiw	r24, 0x01	; 1
    43a0:	1e df       	rcall	.-452    	; 0x41de <_ZL6conv2dPKc>
    43a2:	f8 01       	movw	r30, r16
    43a4:	83 83       	std	Z+3, r24	; 0x03
    43a6:	ce 01       	movw	r24, r28
    43a8:	04 96       	adiw	r24, 0x04	; 4
    43aa:	19 df       	rcall	.-462    	; 0x41de <_ZL6conv2dPKc>
    43ac:	f8 01       	movw	r30, r16
    43ae:	84 83       	std	Z+4, r24	; 0x04
    43b0:	ce 01       	movw	r24, r28
    43b2:	07 96       	adiw	r24, 0x07	; 7
    43b4:	14 df       	rcall	.-472    	; 0x41de <_ZL6conv2dPKc>
    43b6:	f8 01       	movw	r30, r16
    43b8:	85 83       	std	Z+5, r24	; 0x05
    43ba:	2b 96       	adiw	r28, 0x0b	; 11
    43bc:	0f b6       	in	r0, 0x3f	; 63
    43be:	f8 94       	cli
    43c0:	de bf       	out	0x3e, r29	; 62
    43c2:	0f be       	out	0x3f, r0	; 63
    43c4:	cd bf       	out	0x3d, r28	; 61
    43c6:	df 91       	pop	r29
    43c8:	cf 91       	pop	r28
    43ca:	1f 91       	pop	r17
    43cc:	0f 91       	pop	r16
    43ce:	ff 90       	pop	r15
    43d0:	ef 90       	pop	r14
    43d2:	08 95       	ret

000043d4 <_ZNK8DateTime12dayOfTheWeekEv>:
    43d4:	fc 01       	movw	r30, r24
    43d6:	80 81       	ld	r24, Z
    43d8:	42 81       	ldd	r20, Z+2	; 0x02
    43da:	61 81       	ldd	r22, Z+1	; 0x01
    43dc:	90 e0       	ldi	r25, 0x00	; 0
    43de:	cd de       	rcall	.-614    	; 0x417a <_ZL9date2daysjhh>
    43e0:	06 96       	adiw	r24, 0x06	; 6
    43e2:	67 e0       	ldi	r22, 0x07	; 7
    43e4:	70 e0       	ldi	r23, 0x00	; 0
    43e6:	0c 94 08 3f 	jmp	0x7e10	; 0x7e10 <__udivmodhi4>
    43ea:	08 95       	ret

000043ec <_ZNK8DateTime8unixtimeEv>:
    43ec:	ef 92       	push	r14
    43ee:	ff 92       	push	r15
    43f0:	0f 93       	push	r16
    43f2:	1f 93       	push	r17
    43f4:	cf 93       	push	r28
    43f6:	df 93       	push	r29
    43f8:	ec 01       	movw	r28, r24
    43fa:	88 81       	ld	r24, Y
    43fc:	4a 81       	ldd	r20, Y+2	; 0x02
    43fe:	69 81       	ldd	r22, Y+1	; 0x01
    4400:	90 e0       	ldi	r25, 0x00	; 0
    4402:	bb de       	rcall	.-650    	; 0x417a <_ZL9date2daysjhh>
    4404:	9c 01       	movw	r18, r24
    4406:	a8 e1       	ldi	r26, 0x18	; 24
    4408:	b0 e0       	ldi	r27, 0x00	; 0
    440a:	0e 94 47 3f 	call	0x7e8e	; 0x7e8e <__umulhisi3>
    440e:	2b 81       	ldd	r18, Y+3	; 0x03
    4410:	7b 01       	movw	r14, r22
    4412:	8c 01       	movw	r16, r24
    4414:	e2 0e       	add	r14, r18
    4416:	f1 1c       	adc	r15, r1
    4418:	01 1d       	adc	r16, r1
    441a:	11 1d       	adc	r17, r1
    441c:	a8 01       	movw	r20, r16
    441e:	97 01       	movw	r18, r14
    4420:	ac e3       	ldi	r26, 0x3C	; 60
    4422:	b0 e0       	ldi	r27, 0x00	; 0
    4424:	0e 94 56 3f 	call	0x7eac	; 0x7eac <__muluhisi3>
    4428:	2c 81       	ldd	r18, Y+4	; 0x04
    442a:	7b 01       	movw	r14, r22
    442c:	8c 01       	movw	r16, r24
    442e:	e2 0e       	add	r14, r18
    4430:	f1 1c       	adc	r15, r1
    4432:	01 1d       	adc	r16, r1
    4434:	11 1d       	adc	r17, r1
    4436:	a8 01       	movw	r20, r16
    4438:	97 01       	movw	r18, r14
    443a:	0e 94 56 3f 	call	0x7eac	; 0x7eac <__muluhisi3>
    443e:	2d 81       	ldd	r18, Y+5	; 0x05
    4440:	dc 01       	movw	r26, r24
    4442:	cb 01       	movw	r24, r22
    4444:	82 0f       	add	r24, r18
    4446:	91 1d       	adc	r25, r1
    4448:	a1 1d       	adc	r26, r1
    444a:	b1 1d       	adc	r27, r1
    444c:	bc 01       	movw	r22, r24
    444e:	cd 01       	movw	r24, r26
    4450:	60 58       	subi	r22, 0x80	; 128
    4452:	7c 4b       	sbci	r23, 0xBC	; 188
    4454:	82 49       	sbci	r24, 0x92	; 146
    4456:	97 4c       	sbci	r25, 0xC7	; 199
    4458:	df 91       	pop	r29
    445a:	cf 91       	pop	r28
    445c:	1f 91       	pop	r17
    445e:	0f 91       	pop	r16
    4460:	ff 90       	pop	r15
    4462:	ef 90       	pop	r14
    4464:	08 95       	ret

00004466 <_ZNK8DateTime11secondstimeEv>:
    4466:	ef 92       	push	r14
    4468:	ff 92       	push	r15
    446a:	0f 93       	push	r16
    446c:	1f 93       	push	r17
    446e:	cf 93       	push	r28
    4470:	df 93       	push	r29
    4472:	ec 01       	movw	r28, r24
    4474:	88 81       	ld	r24, Y
    4476:	4a 81       	ldd	r20, Y+2	; 0x02
    4478:	69 81       	ldd	r22, Y+1	; 0x01
    447a:	90 e0       	ldi	r25, 0x00	; 0
    447c:	7e de       	rcall	.-772    	; 0x417a <_ZL9date2daysjhh>
    447e:	9c 01       	movw	r18, r24
    4480:	a8 e1       	ldi	r26, 0x18	; 24
    4482:	b0 e0       	ldi	r27, 0x00	; 0
    4484:	0e 94 47 3f 	call	0x7e8e	; 0x7e8e <__umulhisi3>
    4488:	2b 81       	ldd	r18, Y+3	; 0x03
    448a:	7b 01       	movw	r14, r22
    448c:	8c 01       	movw	r16, r24
    448e:	e2 0e       	add	r14, r18
    4490:	f1 1c       	adc	r15, r1
    4492:	01 1d       	adc	r16, r1
    4494:	11 1d       	adc	r17, r1
    4496:	a8 01       	movw	r20, r16
    4498:	97 01       	movw	r18, r14
    449a:	ac e3       	ldi	r26, 0x3C	; 60
    449c:	b0 e0       	ldi	r27, 0x00	; 0
    449e:	0e 94 56 3f 	call	0x7eac	; 0x7eac <__muluhisi3>
    44a2:	2c 81       	ldd	r18, Y+4	; 0x04
    44a4:	7b 01       	movw	r14, r22
    44a6:	8c 01       	movw	r16, r24
    44a8:	e2 0e       	add	r14, r18
    44aa:	f1 1c       	adc	r15, r1
    44ac:	01 1d       	adc	r16, r1
    44ae:	11 1d       	adc	r17, r1
    44b0:	a8 01       	movw	r20, r16
    44b2:	97 01       	movw	r18, r14
    44b4:	0e 94 56 3f 	call	0x7eac	; 0x7eac <__muluhisi3>
    44b8:	2d 81       	ldd	r18, Y+5	; 0x05
    44ba:	62 0f       	add	r22, r18
    44bc:	71 1d       	adc	r23, r1
    44be:	81 1d       	adc	r24, r1
    44c0:	91 1d       	adc	r25, r1
    44c2:	df 91       	pop	r29
    44c4:	cf 91       	pop	r28
    44c6:	1f 91       	pop	r17
    44c8:	0f 91       	pop	r16
    44ca:	ff 90       	pop	r15
    44cc:	ef 90       	pop	r14
    44ce:	08 95       	ret

000044d0 <_ZN13DS3231M_ClassC1Ev>:
    44d0:	fc 01       	movw	r30, r24
    44d2:	10 82       	st	Z, r1
    44d4:	11 82       	std	Z+1, r1	; 0x01
    44d6:	12 82       	std	Z+2, r1	; 0x02
    44d8:	13 82       	std	Z+3, r1	; 0x03
    44da:	14 82       	std	Z+4, r1	; 0x04
    44dc:	08 95       	ret

000044de <_ZN13DS3231M_ClassD1Ev>:
    44de:	08 95       	ret

000044e0 <_ZN13DS3231M_Class9writeByteEhh>:
    44e0:	0f 93       	push	r16
    44e2:	1f 93       	push	r17
    44e4:	cf 93       	push	r28
    44e6:	df 93       	push	r29
    44e8:	ec 01       	movw	r28, r24
    44ea:	06 2f       	mov	r16, r22
    44ec:	14 2f       	mov	r17, r20
    44ee:	68 e6       	ldi	r22, 0x68	; 104
    44f0:	80 ed       	ldi	r24, 0xD0	; 208
    44f2:	9c e0       	ldi	r25, 0x0C	; 12
    44f4:	0e 94 21 35 	call	0x6a42	; 0x6a42 <_ZN7TwoWire17beginTransmissionEh>
    44f8:	60 2f       	mov	r22, r16
    44fa:	80 ed       	ldi	r24, 0xD0	; 208
    44fc:	9c e0       	ldi	r25, 0x0C	; 12
    44fe:	0e 94 d0 34 	call	0x69a0	; 0x69a0 <_ZN7TwoWire5writeEh>
    4502:	61 2f       	mov	r22, r17
    4504:	80 ed       	ldi	r24, 0xD0	; 208
    4506:	9c e0       	ldi	r25, 0x0C	; 12
    4508:	0e 94 d0 34 	call	0x69a0	; 0x69a0 <_ZN7TwoWire5writeEh>
    450c:	80 ed       	ldi	r24, 0xD0	; 208
    450e:	9c e0       	ldi	r25, 0x0C	; 12
    4510:	0e 94 a2 35 	call	0x6b44	; 0x6b44 <_ZN7TwoWire15endTransmissionEv>
    4514:	88 83       	st	Y, r24
    4516:	df 91       	pop	r29
    4518:	cf 91       	pop	r28
    451a:	1f 91       	pop	r17
    451c:	0f 91       	pop	r16
    451e:	08 95       	ret

00004520 <_ZN13DS3231M_Class8readByteEh>:
    4520:	1f 93       	push	r17
    4522:	cf 93       	push	r28
    4524:	df 93       	push	r29
    4526:	ec 01       	movw	r28, r24
    4528:	16 2f       	mov	r17, r22
    452a:	68 e6       	ldi	r22, 0x68	; 104
    452c:	80 ed       	ldi	r24, 0xD0	; 208
    452e:	9c e0       	ldi	r25, 0x0C	; 12
    4530:	0e 94 21 35 	call	0x6a42	; 0x6a42 <_ZN7TwoWire17beginTransmissionEh>
    4534:	61 2f       	mov	r22, r17
    4536:	80 ed       	ldi	r24, 0xD0	; 208
    4538:	9c e0       	ldi	r25, 0x0C	; 12
    453a:	0e 94 d0 34 	call	0x69a0	; 0x69a0 <_ZN7TwoWire5writeEh>
    453e:	80 ed       	ldi	r24, 0xD0	; 208
    4540:	9c e0       	ldi	r25, 0x0C	; 12
    4542:	0e 94 a2 35 	call	0x6b44	; 0x6b44 <_ZN7TwoWire15endTransmissionEv>
    4546:	88 83       	st	Y, r24
    4548:	41 e0       	ldi	r20, 0x01	; 1
    454a:	68 e6       	ldi	r22, 0x68	; 104
    454c:	80 ed       	ldi	r24, 0xD0	; 208
    454e:	9c e0       	ldi	r25, 0x0C	; 12
    4550:	0e 94 9e 35 	call	0x6b3c	; 0x6b3c <_ZN7TwoWire11requestFromEhh>
    4554:	80 ed       	ldi	r24, 0xD0	; 208
    4556:	9c e0       	ldi	r25, 0x0C	; 12
    4558:	0e 94 4a 34 	call	0x6894	; 0x6894 <_ZN7TwoWire4readEv>
    455c:	df 91       	pop	r29
    455e:	cf 91       	pop	r28
    4560:	1f 91       	pop	r17
    4562:	08 95       	ret

00004564 <_ZN13DS3231M_Class5beginEm>:
    4564:	cf 92       	push	r12
    4566:	df 92       	push	r13
    4568:	ef 92       	push	r14
    456a:	ff 92       	push	r15
    456c:	cf 93       	push	r28
    456e:	df 93       	push	r29
    4570:	ec 01       	movw	r28, r24
    4572:	6a 01       	movw	r12, r20
    4574:	7b 01       	movw	r14, r22
    4576:	80 ed       	ldi	r24, 0xD0	; 208
    4578:	9c e0       	ldi	r25, 0x0C	; 12
    457a:	0e 94 0e 35 	call	0x6a1c	; 0x6a1c <_ZN7TwoWire5beginEv>
    457e:	b7 01       	movw	r22, r14
    4580:	a6 01       	movw	r20, r12
    4582:	80 ed       	ldi	r24, 0xD0	; 208
    4584:	9c e0       	ldi	r25, 0x0C	; 12
    4586:	0e 94 1e 35 	call	0x6a3c	; 0x6a3c <_ZN7TwoWire8setClockEm>
    458a:	68 e6       	ldi	r22, 0x68	; 104
    458c:	80 ed       	ldi	r24, 0xD0	; 208
    458e:	9c e0       	ldi	r25, 0x0C	; 12
    4590:	0e 94 21 35 	call	0x6a42	; 0x6a42 <_ZN7TwoWire17beginTransmissionEh>
    4594:	80 ed       	ldi	r24, 0xD0	; 208
    4596:	9c e0       	ldi	r25, 0x0C	; 12
    4598:	0e 94 a2 35 	call	0x6b44	; 0x6b44 <_ZN7TwoWire15endTransmissionEv>
    459c:	81 11       	cpse	r24, r1
    459e:	0a c0       	rjmp	.+20     	; 0x45b4 <_ZN13DS3231M_Class5beginEm+0x50>
    45a0:	62 e0       	ldi	r22, 0x02	; 2
    45a2:	ce 01       	movw	r24, r28
    45a4:	bd df       	rcall	.-134    	; 0x4520 <_ZN13DS3231M_Class8readByteEh>
    45a6:	48 2f       	mov	r20, r24
    45a8:	4f 7b       	andi	r20, 0xBF	; 191
    45aa:	62 e0       	ldi	r22, 0x02	; 2
    45ac:	ce 01       	movw	r24, r28
    45ae:	98 df       	rcall	.-208    	; 0x44e0 <_ZN13DS3231M_Class9writeByteEhh>
    45b0:	81 e0       	ldi	r24, 0x01	; 1
    45b2:	01 c0       	rjmp	.+2      	; 0x45b6 <_ZN13DS3231M_Class5beginEm+0x52>
    45b4:	80 e0       	ldi	r24, 0x00	; 0
    45b6:	df 91       	pop	r29
    45b8:	cf 91       	pop	r28
    45ba:	ff 90       	pop	r15
    45bc:	ef 90       	pop	r14
    45be:	df 90       	pop	r13
    45c0:	cf 90       	pop	r12
    45c2:	08 95       	ret

000045c4 <_ZN13DS3231M_Class3nowEv>:
/*******************************************************************************************************************
** Method now() returns the current date/time                                                                     **
** then the power down time is returned, if the timeType = 2 then the power up time is returned. These options are**
** not documented as the official calls are "getPowerOffDate" and "getPowerOnDate"                                **
*******************************************************************************************************************/
DateTime DS3231M_Class::now(){                                                // Return current date/time         //
    45c4:	0f 93       	push	r16
    45c6:	1f 93       	push	r17
    45c8:	cf 93       	push	r28
    45ca:	df 93       	push	r29
    45cc:	8c 01       	movw	r16, r24
    45ce:	eb 01       	movw	r28, r22
  Wire.beginTransmission(DS3231M_ADDRESS);                                    // Address the I2C device           //
    45d0:	68 e6       	ldi	r22, 0x68	; 104
    45d2:	80 ed       	ldi	r24, 0xD0	; 208
    45d4:	9c e0       	ldi	r25, 0x0C	; 12
    45d6:	0e 94 21 35 	call	0x6a42	; 0x6a42 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(DS3231M_RTCSEC);                                                 // Start at specified register      //
    45da:	60 e0       	ldi	r22, 0x00	; 0
    45dc:	80 ed       	ldi	r24, 0xD0	; 208
    45de:	9c e0       	ldi	r25, 0x0C	; 12
    45e0:	0e 94 d0 34 	call	0x69a0	; 0x69a0 <_ZN7TwoWire5writeEh>
  _TransmissionStatus = Wire.endTransmission();                               // Close transmission               //
    45e4:	80 ed       	ldi	r24, 0xD0	; 208
    45e6:	9c e0       	ldi	r25, 0x0C	; 12
    45e8:	0e 94 a2 35 	call	0x6b44	; 0x6b44 <_ZN7TwoWire15endTransmissionEv>
    45ec:	88 83       	st	Y, r24
  Wire.requestFrom(DS3231M_ADDRESS, (uint8_t)7);                              // Request 7 bytes of data          //
    45ee:	47 e0       	ldi	r20, 0x07	; 7
    45f0:	68 e6       	ldi	r22, 0x68	; 104
    45f2:	80 ed       	ldi	r24, 0xD0	; 208
    45f4:	9c e0       	ldi	r25, 0x0C	; 12
    45f6:	0e 94 9e 35 	call	0x6b3c	; 0x6b3c <_ZN7TwoWire11requestFromEhh>
  if(Wire.available()==7) {                                                   // Wait until the data is ready     //
    45fa:	80 ed       	ldi	r24, 0xD0	; 208
    45fc:	9c e0       	ldi	r25, 0x0C	; 12
    45fe:	0e 94 42 34 	call	0x6884	; 0x6884 <_ZN7TwoWire9availableEv>
    4602:	07 97       	sbiw	r24, 0x07	; 7
    4604:	09 f0       	breq	.+2      	; 0x4608 <_ZN13DS3231M_Class3nowEv+0x44>
    4606:	64 c0       	rjmp	.+200    	; 0x46d0 <_ZN13DS3231M_Class3nowEv+0x10c>
    _ss = bcd2int(Wire.read() & 0x7F);                                        // Mask high bit in seconds         //
    4608:	80 ed       	ldi	r24, 0xD0	; 208
    460a:	9c e0       	ldi	r25, 0x0C	; 12
    460c:	0e 94 4a 34 	call	0x6894	; 0x6894 <_ZN7TwoWire4readEv>
    4610:	98 2f       	mov	r25, r24
    4612:	96 95       	lsr	r25
    4614:	96 95       	lsr	r25
    4616:	96 95       	lsr	r25
    4618:	9e 70       	andi	r25, 0x0E	; 14
    461a:	29 2f       	mov	r18, r25
    461c:	22 0f       	add	r18, r18
    461e:	22 0f       	add	r18, r18
    4620:	92 0f       	add	r25, r18
    4622:	8f 70       	andi	r24, 0x0F	; 15
    4624:	89 0f       	add	r24, r25
    4626:	8d 83       	std	Y+5, r24	; 0x05
    _mm = bcd2int(Wire.read() & 0x7F);                                        // Mask high bit in minutes         //
    4628:	80 ed       	ldi	r24, 0xD0	; 208
    462a:	9c e0       	ldi	r25, 0x0C	; 12
    462c:	0e 94 4a 34 	call	0x6894	; 0x6894 <_ZN7TwoWire4readEv>
    4630:	98 2f       	mov	r25, r24
    4632:	96 95       	lsr	r25
    4634:	96 95       	lsr	r25
    4636:	96 95       	lsr	r25
    4638:	9e 70       	andi	r25, 0x0E	; 14
    463a:	29 2f       	mov	r18, r25
    463c:	22 0f       	add	r18, r18
    463e:	22 0f       	add	r18, r18
    4640:	92 0f       	add	r25, r18
    4642:	8f 70       	andi	r24, 0x0F	; 15
    4644:	89 0f       	add	r24, r25
    4646:	8e 83       	std	Y+6, r24	; 0x06
    _hh = bcd2int(Wire.read() & 0x7F);                                        // Mask high bit in hours           //
    4648:	80 ed       	ldi	r24, 0xD0	; 208
    464a:	9c e0       	ldi	r25, 0x0C	; 12
    464c:	0e 94 4a 34 	call	0x6894	; 0x6894 <_ZN7TwoWire4readEv>
    4650:	98 2f       	mov	r25, r24
    4652:	96 95       	lsr	r25
    4654:	96 95       	lsr	r25
    4656:	96 95       	lsr	r25
    4658:	9e 70       	andi	r25, 0x0E	; 14
    465a:	29 2f       	mov	r18, r25
    465c:	22 0f       	add	r18, r18
    465e:	22 0f       	add	r18, r18
    4660:	92 0f       	add	r25, r18
    4662:	8f 70       	andi	r24, 0x0F	; 15
    4664:	89 0f       	add	r24, r25
    4666:	8f 83       	std	Y+7, r24	; 0x07
    Wire.read();                                                              // Ignore Day-Of-Week register      //
    4668:	80 ed       	ldi	r24, 0xD0	; 208
    466a:	9c e0       	ldi	r25, 0x0C	; 12
    466c:	0e 94 4a 34 	call	0x6894	; 0x6894 <_ZN7TwoWire4readEv>
    _d = bcd2int(Wire.read()  & 0x3F);                                        // Mask 2 high bits for day of month//
    4670:	80 ed       	ldi	r24, 0xD0	; 208
    4672:	9c e0       	ldi	r25, 0x0C	; 12
    4674:	0e 94 4a 34 	call	0x6894	; 0x6894 <_ZN7TwoWire4readEv>
    4678:	98 2f       	mov	r25, r24
    467a:	96 95       	lsr	r25
    467c:	96 95       	lsr	r25
    467e:	96 95       	lsr	r25
    4680:	96 70       	andi	r25, 0x06	; 6
    4682:	29 2f       	mov	r18, r25
    4684:	22 0f       	add	r18, r18
    4686:	22 0f       	add	r18, r18
    4688:	92 0f       	add	r25, r18
    468a:	8f 70       	andi	r24, 0x0F	; 15
    468c:	89 0f       	add	r24, r25
    468e:	88 87       	std	Y+8, r24	; 0x08
    _m = bcd2int(Wire.read()  & 0x1F);                                        // Mask 3 high bits for Month       //
    4690:	80 ed       	ldi	r24, 0xD0	; 208
    4692:	9c e0       	ldi	r25, 0x0C	; 12
    4694:	0e 94 4a 34 	call	0x6894	; 0x6894 <_ZN7TwoWire4readEv>
    4698:	84 fb       	bst	r24, 4
    469a:	99 27       	eor	r25, r25
    469c:	90 f9       	bld	r25, 0
    469e:	99 0f       	add	r25, r25
    46a0:	29 2f       	mov	r18, r25
    46a2:	22 0f       	add	r18, r18
    46a4:	22 0f       	add	r18, r18
    46a6:	92 0f       	add	r25, r18
    46a8:	8f 70       	andi	r24, 0x0F	; 15
    46aa:	89 0f       	add	r24, r25
    46ac:	89 87       	std	Y+9, r24	; 0x09
    _y = bcd2int(Wire.read()) + 2000;                                         // Add 2000 to internal year        //
    46ae:	80 ed       	ldi	r24, 0xD0	; 208
    46b0:	9c e0       	ldi	r25, 0x0C	; 12
    46b2:	0e 94 4a 34 	call	0x6894	; 0x6894 <_ZN7TwoWire4readEv>
    46b6:	98 2f       	mov	r25, r24
    46b8:	92 95       	swap	r25
    46ba:	9f 70       	andi	r25, 0x0F	; 15
    46bc:	8f 70       	andi	r24, 0x0F	; 15
    46be:	2a e0       	ldi	r18, 0x0A	; 10
    46c0:	92 9f       	mul	r25, r18
    46c2:	80 0d       	add	r24, r0
    46c4:	11 24       	eor	r1, r1
    46c6:	90 e0       	ldi	r25, 0x00	; 0
    46c8:	80 53       	subi	r24, 0x30	; 48
    46ca:	98 4f       	sbci	r25, 0xF8	; 248
    46cc:	9b 87       	std	Y+11, r25	; 0x0b
    46ce:	8a 87       	std	Y+10, r24	; 0x0a
  } // of if-then there is data to be read                                    //                                  //
  return DateTime (_y, _m, _d, _hh, _mm, _ss);                                // Return class value               //
    46d0:	2d 81       	ldd	r18, Y+5	; 0x05
    46d2:	3e 81       	ldd	r19, Y+6	; 0x06
    46d4:	4f 81       	ldd	r20, Y+7	; 0x07
    46d6:	58 85       	ldd	r21, Y+8	; 0x08
    46d8:	69 85       	ldd	r22, Y+9	; 0x09
    46da:	8a 85       	ldd	r24, Y+10	; 0x0a
    46dc:	9b 85       	ldd	r25, Y+11	; 0x0b
  } // of for-next each month                                                 //                                  //
  d = days + 1;                                                               //                                  //
} // of method DateTime()                                                     //----------------------------------//
DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour,  //                                  //
                    uint8_t min, uint8_t sec) {                               //                                  //
  if (year >= 2000)                                                           //                                  //
    46de:	80 3d       	cpi	r24, 0xD0	; 208
    46e0:	77 e0       	ldi	r23, 0x07	; 7
    46e2:	97 07       	cpc	r25, r23
    46e4:	10 f0       	brcs	.+4      	; 0x46ea <_ZN13DS3231M_Class3nowEv+0x126>
  year -= 2000;                                                               //                                  //
    46e6:	80 5d       	subi	r24, 0xD0	; 208
    46e8:	97 40       	sbci	r25, 0x07	; 7
  yOff = year;                                                                //                                  //
    46ea:	f8 01       	movw	r30, r16
    46ec:	80 83       	st	Z, r24
  m = month;                                                                  //                                  //
    46ee:	61 83       	std	Z+1, r22	; 0x01
  d = day;                                                                    //                                  //
    46f0:	52 83       	std	Z+2, r21	; 0x02
  hh = hour;                                                                  //                                  //
    46f2:	43 83       	std	Z+3, r20	; 0x03
  mm = min;                                                                   //                                  //
    46f4:	34 83       	std	Z+4, r19	; 0x04
  ss = sec;                                                                   //                                  //
    46f6:	25 83       	std	Z+5, r18	; 0x05
    _d = bcd2int(Wire.read()  & 0x3F);                                        // Mask 2 high bits for day of month//
    _m = bcd2int(Wire.read()  & 0x1F);                                        // Mask 3 high bits for Month       //
    _y = bcd2int(Wire.read()) + 2000;                                         // Add 2000 to internal year        //
  } // of if-then there is data to be read                                    //                                  //
  return DateTime (_y, _m, _d, _hh, _mm, _ss);                                // Return class value               //
} // of method now                                                            //                                  //
    46f8:	c8 01       	movw	r24, r16
    46fa:	df 91       	pop	r29
    46fc:	cf 91       	pop	r28
    46fe:	1f 91       	pop	r17
    4700:	0f 91       	pop	r16
    4702:	08 95       	ret

00004704 <_ZN13DS3231M_Class6adjustERK8DateTime>:
** oscillator is stopped during the process and needs to be restarted upon completion.                            **
*******************************************************************************************************************/
void DS3231M_Class::adjust() {                                                // Set the RTC date and Time        //
  adjust(DateTime(F(__DATE__), F(__TIME__)));                                 // Set to compile time              //
} // of method adjust                                                         /-----------------------------------//
void DS3231M_Class::adjust(const DateTime& dt) {                              // Set the RTC date and Time        //
    4704:	df 92       	push	r13
    4706:	ef 92       	push	r14
    4708:	ff 92       	push	r15
    470a:	0f 93       	push	r16
    470c:	1f 93       	push	r17
    470e:	cf 93       	push	r28
    4710:	df 93       	push	r29
    4712:	00 d0       	rcall	.+0      	; 0x4714 <_ZN13DS3231M_Class6adjustERK8DateTime+0x10>
    4714:	00 d0       	rcall	.+0      	; 0x4716 <_ZN13DS3231M_Class6adjustERK8DateTime+0x12>
    4716:	00 d0       	rcall	.+0      	; 0x4718 <_ZN13DS3231M_Class6adjustERK8DateTime+0x14>
    4718:	cd b7       	in	r28, 0x3d	; 61
    471a:	de b7       	in	r29, 0x3e	; 62
    471c:	8c 01       	movw	r16, r24
    471e:	7b 01       	movw	r14, r22
    4720:	fb 01       	movw	r30, r22
    4722:	85 81       	ldd	r24, Z+5	; 0x05
  writeByte(DS3231M_RTCSEC,int2bcd(dt.second()));                             // Write seconds, keep device off   //
    4724:	9a e0       	ldi	r25, 0x0A	; 10
    4726:	d9 2e       	mov	r13, r25
    4728:	6d 2d       	mov	r22, r13
    472a:	0e 94 fc 3e 	call	0x7df8	; 0x7df8 <__udivmodqi4>
    472e:	49 2f       	mov	r20, r25
    4730:	f0 e1       	ldi	r31, 0x10	; 16
    4732:	8f 9f       	mul	r24, r31
    4734:	40 0d       	add	r20, r0
    4736:	11 24       	eor	r1, r1
    4738:	60 e0       	ldi	r22, 0x00	; 0
    473a:	c8 01       	movw	r24, r16
    473c:	d1 de       	rcall	.-606    	; 0x44e0 <_ZN13DS3231M_Class9writeByteEhh>
    473e:	f7 01       	movw	r30, r14
    4740:	84 81       	ldd	r24, Z+4	; 0x04
  writeByte(DS3231M_RTCMIN,int2bcd(dt.minute()));                             // Write the minutes value          //
    4742:	6d 2d       	mov	r22, r13
    4744:	0e 94 fc 3e 	call	0x7df8	; 0x7df8 <__udivmodqi4>
    4748:	49 2f       	mov	r20, r25
    474a:	f0 e1       	ldi	r31, 0x10	; 16
    474c:	8f 9f       	mul	r24, r31
    474e:	40 0d       	add	r20, r0
    4750:	11 24       	eor	r1, r1
    4752:	61 e0       	ldi	r22, 0x01	; 1
    4754:	c8 01       	movw	r24, r16
    4756:	c4 de       	rcall	.-632    	; 0x44e0 <_ZN13DS3231M_Class9writeByteEhh>
    4758:	f7 01       	movw	r30, r14
    475a:	83 81       	ldd	r24, Z+3	; 0x03
  writeByte(DS3231M_RTCHOUR,int2bcd(dt.hour()));                              // Also re-sets the 24Hour clock on //
    475c:	6d 2d       	mov	r22, r13
    475e:	0e 94 fc 3e 	call	0x7df8	; 0x7df8 <__udivmodqi4>
    4762:	49 2f       	mov	r20, r25
    4764:	f0 e1       	ldi	r31, 0x10	; 16
    4766:	8f 9f       	mul	r24, r31
    4768:	40 0d       	add	r20, r0
    476a:	11 24       	eor	r1, r1
    476c:	62 e0       	ldi	r22, 0x02	; 2
    476e:	c8 01       	movw	r24, r16
  writeByte(DS3231M_RTCWKDAY,dt.dayOfTheWeek());                              // Update the weekday               //
    4770:	b7 de       	rcall	.-658    	; 0x44e0 <_ZN13DS3231M_Class9writeByteEhh>
    4772:	c7 01       	movw	r24, r14
    4774:	2f de       	rcall	.-930    	; 0x43d4 <_ZNK8DateTime12dayOfTheWeekEv>
    4776:	48 2f       	mov	r20, r24
    4778:	63 e0       	ldi	r22, 0x03	; 3
    477a:	c8 01       	movw	r24, r16
    477c:	b1 de       	rcall	.-670    	; 0x44e0 <_ZN13DS3231M_Class9writeByteEhh>
    477e:	f7 01       	movw	r30, r14
    4780:	82 81       	ldd	r24, Z+2	; 0x02
  writeByte(DS3231M_RTCDATE,int2bcd(dt.day()));                               // Write the day of month           //
    4782:	6d 2d       	mov	r22, r13
    4784:	0e 94 fc 3e 	call	0x7df8	; 0x7df8 <__udivmodqi4>
    4788:	49 2f       	mov	r20, r25
    478a:	f0 e1       	ldi	r31, 0x10	; 16
    478c:	8f 9f       	mul	r24, r31
    478e:	40 0d       	add	r20, r0
    4790:	11 24       	eor	r1, r1
    4792:	64 e0       	ldi	r22, 0x04	; 4
    4794:	c8 01       	movw	r24, r16
    4796:	a4 de       	rcall	.-696    	; 0x44e0 <_ZN13DS3231M_Class9writeByteEhh>
    4798:	f7 01       	movw	r30, r14
    479a:	81 81       	ldd	r24, Z+1	; 0x01
  writeByte(DS3231M_RTCMTH,int2bcd(dt.month()));                              // Month, ignore century bit        //
    479c:	6d 2d       	mov	r22, r13
    479e:	0e 94 fc 3e 	call	0x7df8	; 0x7df8 <__udivmodqi4>
    47a2:	49 2f       	mov	r20, r25
    47a4:	f0 e1       	ldi	r31, 0x10	; 16
    47a6:	8f 9f       	mul	r24, r31
    47a8:	40 0d       	add	r20, r0
    47aa:	11 24       	eor	r1, r1
    47ac:	65 e0       	ldi	r22, 0x05	; 5
    47ae:	c8 01       	movw	r24, r16
    47b0:	97 de       	rcall	.-722    	; 0x44e0 <_ZN13DS3231M_Class9writeByteEhh>
  writeByte(DS3231M_RTCYEAR,int2bcd(dt.year()-2000));                         // Write the year                   //
    47b2:	f7 01       	movw	r30, r14
    47b4:	80 81       	ld	r24, Z
    47b6:	6d 2d       	mov	r22, r13
    47b8:	0e 94 fc 3e 	call	0x7df8	; 0x7df8 <__udivmodqi4>
    47bc:	49 2f       	mov	r20, r25
    47be:	f0 e1       	ldi	r31, 0x10	; 16
    47c0:	8f 9f       	mul	r24, r31
    47c2:	40 0d       	add	r20, r0
    47c4:	11 24       	eor	r1, r1
    47c6:	66 e0       	ldi	r22, 0x06	; 6
    47c8:	c8 01       	movw	r24, r16
  writeByte(DS3231M_STATUS,readByte(DS3231M_STATUS)&B01111111);               // Unset OSC flag bit if set        //
    47ca:	8a de       	rcall	.-748    	; 0x44e0 <_ZN13DS3231M_Class9writeByteEhh>
    47cc:	6f e0       	ldi	r22, 0x0F	; 15
    47ce:	c8 01       	movw	r24, r16
    47d0:	a7 de       	rcall	.-690    	; 0x4520 <_ZN13DS3231M_Class8readByteEh>
    47d2:	48 2f       	mov	r20, r24
    47d4:	4f 77       	andi	r20, 0x7F	; 127
    47d6:	6f e0       	ldi	r22, 0x0F	; 15
    47d8:	c8 01       	movw	r24, r16
  writeByte(DS3231M_CONTROL,readByte(DS3231M_CONTROL)&B01111111);             // Unset EOSC flag bit if set       //
    47da:	82 de       	rcall	.-764    	; 0x44e0 <_ZN13DS3231M_Class9writeByteEhh>
    47dc:	6e e0       	ldi	r22, 0x0E	; 14
    47de:	c8 01       	movw	r24, r16
    47e0:	9f de       	rcall	.-706    	; 0x4520 <_ZN13DS3231M_Class8readByteEh>
    47e2:	48 2f       	mov	r20, r24
    47e4:	4f 77       	andi	r20, 0x7F	; 127
    47e6:	6e e0       	ldi	r22, 0x0E	; 14
    47e8:	c8 01       	movw	r24, r16
  _SetUnixTime = now().unixtime();                                            // Store time of last change        //
    47ea:	7a de       	rcall	.-780    	; 0x44e0 <_ZN13DS3231M_Class9writeByteEhh>
    47ec:	b8 01       	movw	r22, r16
    47ee:	ce 01       	movw	r24, r28
    47f0:	01 96       	adiw	r24, 0x01	; 1
    47f2:	e8 de       	rcall	.-560    	; 0x45c4 <_ZN13DS3231M_Class3nowEv>
    47f4:	ce 01       	movw	r24, r28
    47f6:	01 96       	adiw	r24, 0x01	; 1
    47f8:	f9 dd       	rcall	.-1038   	; 0x43ec <_ZNK8DateTime8unixtimeEv>
    47fa:	f8 01       	movw	r30, r16
    47fc:	61 83       	std	Z+1, r22	; 0x01
    47fe:	72 83       	std	Z+2, r23	; 0x02
    4800:	83 83       	std	Z+3, r24	; 0x03
    4802:	94 83       	std	Z+4, r25	; 0x04
    4804:	26 96       	adiw	r28, 0x06	; 6
} // of method adjust                                                         //                                  //
    4806:	0f b6       	in	r0, 0x3f	; 63
    4808:	f8 94       	cli
    480a:	de bf       	out	0x3e, r29	; 62
    480c:	0f be       	out	0x3f, r0	; 63
    480e:	cd bf       	out	0x3d, r28	; 61
    4810:	df 91       	pop	r29
    4812:	cf 91       	pop	r28
    4814:	1f 91       	pop	r17
    4816:	0f 91       	pop	r16
    4818:	ff 90       	pop	r15
    481a:	ef 90       	pop	r14
    481c:	df 90       	pop	r13
    481e:	08 95       	ret

00004820 <_ZN13DS3231M_Class6adjustEv>:
    4820:	0f 93       	push	r16
/*******************************************************************************************************************
** Method adjust set the current date/time. This is an overloaded function, if called with no parameters then the **
** RTC is set to the date/time when the program was compiled and uploaded. Otherwise the values are set, but the  **
** oscillator is stopped during the process and needs to be restarted upon completion.                            **
*******************************************************************************************************************/
void DS3231M_Class::adjust() {                                                // Set the RTC date and Time        //
    4822:	1f 93       	push	r17
    4824:	cf 93       	push	r28
    4826:	df 93       	push	r29
    4828:	00 d0       	rcall	.+0      	; 0x482a <_ZN13DS3231M_Class6adjustEv+0xa>
    482a:	00 d0       	rcall	.+0      	; 0x482c <_ZN13DS3231M_Class6adjustEv+0xc>
    482c:	00 d0       	rcall	.+0      	; 0x482e <_ZN13DS3231M_Class6adjustEv+0xe>
    482e:	cd b7       	in	r28, 0x3d	; 61
    4830:	de b7       	in	r29, 0x3e	; 62
    4832:	8c 01       	movw	r16, r24
  adjust(DateTime(F(__DATE__), F(__TIME__)));                                 // Set to compile time              //
    4834:	4b e1       	ldi	r20, 0x1B	; 27
    4836:	52 e0       	ldi	r21, 0x02	; 2
    4838:	6f e0       	ldi	r22, 0x0F	; 15
    483a:	72 e0       	ldi	r23, 0x02	; 2
    483c:	ce 01       	movw	r24, r28
    483e:	01 96       	adiw	r24, 0x01	; 1
    4840:	54 dd       	rcall	.-1368   	; 0x42ea <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>
    4842:	be 01       	movw	r22, r28
    4844:	6f 5f       	subi	r22, 0xFF	; 255
    4846:	7f 4f       	sbci	r23, 0xFF	; 255
    4848:	c8 01       	movw	r24, r16
    484a:	5c df       	rcall	.-328    	; 0x4704 <_ZN13DS3231M_Class6adjustERK8DateTime>
} // of method adjust                                                         /-----------------------------------//
    484c:	26 96       	adiw	r28, 0x06	; 6
    484e:	0f b6       	in	r0, 0x3f	; 63
    4850:	f8 94       	cli
    4852:	de bf       	out	0x3e, r29	; 62
    4854:	0f be       	out	0x3f, r0	; 63
    4856:	cd bf       	out	0x3d, r28	; 61
    4858:	df 91       	pop	r29
    485a:	cf 91       	pop	r28
    485c:	1f 91       	pop	r17
    485e:	0f 91       	pop	r16
    4860:	08 95       	ret

00004862 <_GLOBAL__sub_I__ZN9DhcpClass13beginWithDHCPEPhmm>:
    unsigned long m = n;
    n /= 16;
    char c = m - 16 * n;
    *str-- = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);
}
    4862:	0f 93       	push	r16
    4864:	00 e0       	ldi	r16, 0x00	; 0
    4866:	20 e0       	ldi	r18, 0x00	; 0
    4868:	40 e0       	ldi	r20, 0x00	; 0
    486a:	60 e0       	ldi	r22, 0x00	; 0
    486c:	87 e1       	ldi	r24, 0x17	; 23
    486e:	9c e0       	ldi	r25, 0x0C	; 12
    4870:	0e 94 ce 37 	call	0x6f9c	; 0x6f9c <_ZN9IPAddressC1Ehhhh>
    4874:	0f 91       	pop	r16
    4876:	08 95       	ret

00004878 <_ZN9DNSClient5beginERK9IPAddress>:
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    4878:	fb 01       	movw	r30, r22
    487a:	42 81       	ldd	r20, Z+2	; 0x02
    487c:	53 81       	ldd	r21, Z+3	; 0x03
    487e:	64 81       	ldd	r22, Z+4	; 0x04
    4880:	75 81       	ldd	r23, Z+5	; 0x05
    4882:	fc 01       	movw	r30, r24
    4884:	42 83       	std	Z+2, r20	; 0x02
    4886:	53 83       	std	Z+3, r21	; 0x03
    4888:	64 83       	std	Z+4, r22	; 0x04
    488a:	75 83       	std	Z+5, r23	; 0x05
#define INVALID_RESPONSE -4

void DNSClient::begin(const IPAddress& aDNSServer)
{
    iDNSServer = aDNSServer;
    iRequestId = 0;
    488c:	17 82       	std	Z+7, r1	; 0x07
    488e:	16 82       	std	Z+6, r1	; 0x06
    4890:	08 95       	ret

00004892 <_ZN9DNSClient9inet_atonEPKcR9IPAddress>:
}


int DNSClient::inet_aton(const char* aIPAddrString, IPAddress& aResult)
{
    4892:	cf 93       	push	r28
    4894:	df 93       	push	r29
    4896:	da 01       	movw	r26, r20
    4898:	fb 01       	movw	r30, r22
    489a:	eb 01       	movw	r28, r22
    // See if we've been given a valid IP address
    const char* p =aIPAddrString;
    while (*p &&
    489c:	89 91       	ld	r24, Y+
    489e:	81 11       	cpse	r24, r1
    48a0:	fd cf       	rjmp	.-6      	; 0x489c <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0xa>
    48a2:	80 e0       	ldi	r24, 0x00	; 0
    48a4:	90 e0       	ldi	r25, 0x00	; 0
    48a6:	20 e0       	ldi	r18, 0x00	; 0
    48a8:	30 e0       	ldi	r19, 0x00	; 0
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
    48aa:	4a e0       	ldi	r20, 0x0A	; 10
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
        int segmentValue =0;
        while (*p && (segment < 4))
    48ac:	51 91       	ld	r21, Z+
    48ae:	55 23       	and	r21, r21
    48b0:	e9 f0       	breq	.+58     	; 0x48ec <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x5a>
    48b2:	24 30       	cpi	r18, 0x04	; 4
    48b4:	31 05       	cpc	r19, r1
    48b6:	44 f5       	brge	.+80     	; 0x4908 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
        {
            if (*p == '.')
    48b8:	5e 32       	cpi	r21, 0x2E	; 46
    48ba:	69 f4       	brne	.+26     	; 0x48d6 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x44>
            {
                // We've reached the end of a segment
                if (segmentValue > 255)
    48bc:	8f 3f       	cpi	r24, 0xFF	; 255
    48be:	91 05       	cpc	r25, r1
    48c0:	09 f0       	breq	.+2      	; 0x48c4 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x32>
    48c2:	14 f5       	brge	.+68     	; 0x4908 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
                    // You can't have IP address segments that don't fit in a byte
                    return 0;
                }
                else
                {
                    aResult[segment] = (byte)segmentValue;
    48c4:	ed 01       	movw	r28, r26
    48c6:	c2 0f       	add	r28, r18
    48c8:	d3 1f       	adc	r29, r19
    48ca:	8a 83       	std	Y+2, r24	; 0x02
                    segment++;
    48cc:	2f 5f       	subi	r18, 0xFF	; 255
    48ce:	3f 4f       	sbci	r19, 0xFF	; 255
                    segmentValue = 0;
    48d0:	80 e0       	ldi	r24, 0x00	; 0
    48d2:	90 e0       	ldi	r25, 0x00	; 0
    48d4:	eb cf       	rjmp	.-42     	; 0x48ac <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x1a>
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
    48d6:	48 9f       	mul	r20, r24
    48d8:	b0 01       	movw	r22, r0
    48da:	49 9f       	mul	r20, r25
    48dc:	70 0d       	add	r23, r0
    48de:	11 24       	eor	r1, r1
    48e0:	85 2f       	mov	r24, r21
    48e2:	90 e0       	ldi	r25, 0x00	; 0
    48e4:	c0 97       	sbiw	r24, 0x30	; 48
    48e6:	86 0f       	add	r24, r22
    48e8:	97 1f       	adc	r25, r23
    48ea:	e0 cf       	rjmp	.-64     	; 0x48ac <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x1a>
            }
            p++;
        }
        // We've reached the end of address, but there'll still be the last
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
    48ec:	8f 3f       	cpi	r24, 0xFF	; 255
    48ee:	91 05       	cpc	r25, r1
    48f0:	09 f0       	breq	.+2      	; 0x48f4 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x62>
    48f2:	54 f4       	brge	.+20     	; 0x4908 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
    48f4:	24 30       	cpi	r18, 0x04	; 4
    48f6:	31 05       	cpc	r19, r1
    48f8:	3c f4       	brge	.+14     	; 0x4908 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
            // or more than four segments
            return 0;
        }
        else
        {
            aResult[segment] = (byte)segmentValue;
    48fa:	fd 01       	movw	r30, r26
    48fc:	e2 0f       	add	r30, r18
    48fe:	f3 1f       	adc	r31, r19
    4900:	82 83       	std	Z+2, r24	; 0x02
            return 1;
    4902:	81 e0       	ldi	r24, 0x01	; 1
    4904:	90 e0       	ldi	r25, 0x00	; 0
    4906:	02 c0       	rjmp	.+4      	; 0x490c <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x7a>
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
        {
            // You can't have IP address segments that don't fit in a byte,
            // or more than four segments
            return 0;
    4908:	80 e0       	ldi	r24, 0x00	; 0
    490a:	90 e0       	ldi	r25, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    490c:	df 91       	pop	r29
    490e:	cf 91       	pop	r28
    4910:	08 95       	ret

00004912 <_GLOBAL__sub_I__ZN9DNSClient5beginERK9IPAddress>:
    // Mark the entire packet as read
    iUdp.flush();

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
}
    4912:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    4914:	00 e0       	ldi	r16, 0x00	; 0
    4916:	20 e0       	ldi	r18, 0x00	; 0
    4918:	40 e0       	ldi	r20, 0x00	; 0
    491a:	60 e0       	ldi	r22, 0x00	; 0
    491c:	8d e1       	ldi	r24, 0x1D	; 29
    491e:	9c e0       	ldi	r25, 0x0C	; 12
    4920:	0e 94 ce 37 	call	0x6f9c	; 0x6f9c <_ZN9IPAddressC1Ehhhh>
    4924:	0f 91       	pop	r16
    4926:	08 95       	ret

00004928 <_ZN9DNSClient12BuildRequestEPKc>:

    return ret;
}

uint16_t DNSClient::BuildRequest(const char* aName)
{
    4928:	8f 92       	push	r8
    492a:	9f 92       	push	r9
    492c:	af 92       	push	r10
    492e:	bf 92       	push	r11
    4930:	cf 92       	push	r12
    4932:	df 92       	push	r13
    4934:	ef 92       	push	r14
    4936:	ff 92       	push	r15
    4938:	0f 93       	push	r16
    493a:	1f 93       	push	r17
    493c:	cf 93       	push	r28
    493e:	df 93       	push	r29
    4940:	00 d0       	rcall	.+0      	; 0x4942 <_ZN9DNSClient12BuildRequestEPKc+0x1a>
    4942:	1f 92       	push	r1
    4944:	cd b7       	in	r28, 0x3d	; 61
    4946:	de b7       	in	r29, 0x3e	; 62
    4948:	6c 01       	movw	r12, r24
    494a:	7b 01       	movw	r14, r22
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    //    |                    ARCOUNT                    |
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    // As we only support one request at a time at present, we can simplify
    // some of this header
    iRequestId = millis(); // generate a random ID
    494c:	0e 94 54 39 	call	0x72a8	; 0x72a8 <millis>
    4950:	f6 01       	movw	r30, r12
    4952:	77 83       	std	Z+7, r23	; 0x07
    4954:	66 83       	std	Z+6, r22	; 0x06
    uint16_t twoByteBuffer;

    // FIXME We should also check that there's enough space available to write to, rather
    // FIXME than assume there's enough space (as the code does at present)
    iUdp.write((uint8_t*)&iRequestId, sizeof(iRequestId));
    4956:	86 01       	movw	r16, r12
    4958:	08 5f       	subi	r16, 0xF8	; 248
    495a:	1f 4f       	sbci	r17, 0xFF	; 255
    495c:	b6 01       	movw	r22, r12
    495e:	6a 5f       	subi	r22, 0xFA	; 250
    4960:	7f 4f       	sbci	r23, 0xFF	; 255
    4962:	42 e0       	ldi	r20, 0x02	; 2
    4964:	50 e0       	ldi	r21, 0x00	; 0
    4966:	c8 01       	movw	r24, r16
    4968:	30 d5       	rcall	.+2656   	; 0x53ca <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = htons(QUERY_FLAG | OPCODE_STANDARD_QUERY | RECURSION_DESIRED_FLAG);
    496a:	81 e0       	ldi	r24, 0x01	; 1
    496c:	90 e0       	ldi	r25, 0x00	; 0
    496e:	9a 83       	std	Y+2, r25	; 0x02
    4970:	89 83       	std	Y+1, r24	; 0x01
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    4972:	42 e0       	ldi	r20, 0x02	; 2
    4974:	50 e0       	ldi	r21, 0x00	; 0
    4976:	be 01       	movw	r22, r28
    4978:	6f 5f       	subi	r22, 0xFF	; 255
    497a:	7f 4f       	sbci	r23, 0xFF	; 255
    497c:	c8 01       	movw	r24, r16
    497e:	25 d5       	rcall	.+2634   	; 0x53ca <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = htons(1);  // One question record
    4980:	80 e0       	ldi	r24, 0x00	; 0
    4982:	91 e0       	ldi	r25, 0x01	; 1
    4984:	9a 83       	std	Y+2, r25	; 0x02
    4986:	89 83       	std	Y+1, r24	; 0x01
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    4988:	42 e0       	ldi	r20, 0x02	; 2
    498a:	50 e0       	ldi	r21, 0x00	; 0
    498c:	be 01       	movw	r22, r28
    498e:	6f 5f       	subi	r22, 0xFF	; 255
    4990:	7f 4f       	sbci	r23, 0xFF	; 255
    4992:	c8 01       	movw	r24, r16
    4994:	1a d5       	rcall	.+2612   	; 0x53ca <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = 0;  // Zero answer records
    4996:	1a 82       	std	Y+2, r1	; 0x02
    4998:	19 82       	std	Y+1, r1	; 0x01
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    499a:	42 e0       	ldi	r20, 0x02	; 2
    499c:	50 e0       	ldi	r21, 0x00	; 0
    499e:	be 01       	movw	r22, r28
    49a0:	6f 5f       	subi	r22, 0xFF	; 255
    49a2:	7f 4f       	sbci	r23, 0xFF	; 255
    49a4:	c8 01       	movw	r24, r16
    49a6:	11 d5       	rcall	.+2594   	; 0x53ca <_ZN11EthernetUDP5writeEPKhj>

    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    49a8:	42 e0       	ldi	r20, 0x02	; 2
    49aa:	50 e0       	ldi	r21, 0x00	; 0
    49ac:	be 01       	movw	r22, r28
    49ae:	6f 5f       	subi	r22, 0xFF	; 255
    49b0:	7f 4f       	sbci	r23, 0xFF	; 255
    49b2:	c8 01       	movw	r24, r16
    49b4:	0a d5       	rcall	.+2580   	; 0x53ca <_ZN11EthernetUDP5writeEPKhj>
    // and zero additional records
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    49b6:	42 e0       	ldi	r20, 0x02	; 2
    49b8:	50 e0       	ldi	r21, 0x00	; 0
    49ba:	be 01       	movw	r22, r28
    49bc:	6f 5f       	subi	r22, 0xFF	; 255
    49be:	7f 4f       	sbci	r23, 0xFF	; 255
    49c0:	c8 01       	movw	r24, r16
    49c2:	03 d5       	rcall	.+2566   	; 0x53ca <_ZN11EthernetUDP5writeEPKhj>

    // Build question
    const char* start =aName;
    const char* end =start;
    49c4:	57 01       	movw	r10, r14
    uint8_t len;
    // Run through the name being requested
    while (*end)
    49c6:	f5 01       	movw	r30, r10
    49c8:	80 81       	ld	r24, Z
    49ca:	88 23       	and	r24, r24
    49cc:	f9 f0       	breq	.+62     	; 0x4a0c <_ZN9DNSClient12BuildRequestEPKc+0xe4>
    49ce:	a7 01       	movw	r20, r14
    49d0:	5a 01       	movw	r10, r20
    {
        // Find out how long this section of the name is
        end = start;
        while (*end && (*end != '.') )
    49d2:	f5 01       	movw	r30, r10
    49d4:	81 91       	ld	r24, Z+
    49d6:	6f 01       	movw	r12, r30
    49d8:	88 23       	and	r24, r24
    49da:	21 f0       	breq	.+8      	; 0x49e4 <_ZN9DNSClient12BuildRequestEPKc+0xbc>
    49dc:	8e 32       	cpi	r24, 0x2E	; 46
    49de:	11 f0       	breq	.+4      	; 0x49e4 <_ZN9DNSClient12BuildRequestEPKc+0xbc>
    49e0:	a6 01       	movw	r20, r12
    49e2:	f6 cf       	rjmp	.-20     	; 0x49d0 <_ZN9DNSClient12BuildRequestEPKc+0xa8>
        {
            end++;
        }

        if (end-start > 0)
    49e4:	4a 01       	movw	r8, r20
    49e6:	8e 18       	sub	r8, r14
    49e8:	9f 08       	sbc	r9, r15
    49ea:	18 14       	cp	r1, r8
    49ec:	19 04       	cpc	r1, r9
    49ee:	64 f4       	brge	.+24     	; 0x4a08 <_ZN9DNSClient12BuildRequestEPKc+0xe0>
        {
            // Write out the size of this section
            len = end-start;
    49f0:	8b 82       	std	Y+3, r8	; 0x03
            iUdp.write(&len, sizeof(len));
    49f2:	41 e0       	ldi	r20, 0x01	; 1
    49f4:	50 e0       	ldi	r21, 0x00	; 0
    49f6:	be 01       	movw	r22, r28
    49f8:	6d 5f       	subi	r22, 0xFD	; 253
    49fa:	7f 4f       	sbci	r23, 0xFF	; 255
    49fc:	c8 01       	movw	r24, r16
            // And then write out the section
            iUdp.write((uint8_t*)start, end-start);
    49fe:	e5 d4       	rcall	.+2506   	; 0x53ca <_ZN11EthernetUDP5writeEPKhj>
    4a00:	a4 01       	movw	r20, r8
    4a02:	b7 01       	movw	r22, r14
    4a04:	c8 01       	movw	r24, r16
    4a06:	e1 d4       	rcall	.+2498   	; 0x53ca <_ZN11EthernetUDP5writeEPKhj>
        }
        start = end+1;
    4a08:	76 01       	movw	r14, r12
    }

    // We've got to the end of the question name, so
    // terminate it with a zero-length section
    len = 0;
    4a0a:	dd cf       	rjmp	.-70     	; 0x49c6 <_ZN9DNSClient12BuildRequestEPKc+0x9e>
    iUdp.write(&len, sizeof(len));
    4a0c:	1b 82       	std	Y+3, r1	; 0x03
    4a0e:	41 e0       	ldi	r20, 0x01	; 1
    4a10:	50 e0       	ldi	r21, 0x00	; 0
    4a12:	be 01       	movw	r22, r28
    4a14:	6d 5f       	subi	r22, 0xFD	; 253
    4a16:	7f 4f       	sbci	r23, 0xFF	; 255
    4a18:	c8 01       	movw	r24, r16
    4a1a:	d7 d4       	rcall	.+2478   	; 0x53ca <_ZN11EthernetUDP5writeEPKhj>
    // Finally the type and class of question
    twoByteBuffer = htons(TYPE_A);
    4a1c:	e1 2c       	mov	r14, r1
    4a1e:	ff 24       	eor	r15, r15
    4a20:	f3 94       	inc	r15
    4a22:	fa 82       	std	Y+2, r15	; 0x02
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    4a24:	e9 82       	std	Y+1, r14	; 0x01
    4a26:	42 e0       	ldi	r20, 0x02	; 2
    4a28:	50 e0       	ldi	r21, 0x00	; 0
    4a2a:	be 01       	movw	r22, r28
    4a2c:	6f 5f       	subi	r22, 0xFF	; 255
    4a2e:	7f 4f       	sbci	r23, 0xFF	; 255
    4a30:	c8 01       	movw	r24, r16

    twoByteBuffer = htons(CLASS_IN);  // Internet class of question
    4a32:	cb d4       	rcall	.+2454   	; 0x53ca <_ZN11EthernetUDP5writeEPKhj>
    4a34:	fa 82       	std	Y+2, r15	; 0x02
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    4a36:	e9 82       	std	Y+1, r14	; 0x01
    4a38:	42 e0       	ldi	r20, 0x02	; 2
    4a3a:	50 e0       	ldi	r21, 0x00	; 0
    4a3c:	be 01       	movw	r22, r28
    4a3e:	6f 5f       	subi	r22, 0xFF	; 255
    4a40:	7f 4f       	sbci	r23, 0xFF	; 255
    4a42:	c8 01       	movw	r24, r16
    4a44:	c2 d4       	rcall	.+2436   	; 0x53ca <_ZN11EthernetUDP5writeEPKhj>
    // Success!  Everything buffered okay
    return 1;
}
    4a46:	81 e0       	ldi	r24, 0x01	; 1
    4a48:	90 e0       	ldi	r25, 0x00	; 0
    4a4a:	0f 90       	pop	r0
    4a4c:	0f 90       	pop	r0
    4a4e:	0f 90       	pop	r0
    4a50:	df 91       	pop	r29
    4a52:	cf 91       	pop	r28
    4a54:	1f 91       	pop	r17
    4a56:	0f 91       	pop	r16
    4a58:	ff 90       	pop	r15
    4a5a:	ef 90       	pop	r14
    4a5c:	df 90       	pop	r13
    4a5e:	cf 90       	pop	r12
    4a60:	bf 90       	pop	r11
    4a62:	af 90       	pop	r10
    4a64:	9f 90       	pop	r9
    4a66:	8f 90       	pop	r8
    4a68:	08 95       	ret

00004a6a <_ZN9DNSClient15ProcessResponseEjR9IPAddress>:


uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    4a6a:	2f 92       	push	r2
    4a6c:	3f 92       	push	r3
    4a6e:	4f 92       	push	r4
    4a70:	5f 92       	push	r5
    4a72:	6f 92       	push	r6
    4a74:	7f 92       	push	r7
    4a76:	8f 92       	push	r8
    4a78:	9f 92       	push	r9
    4a7a:	af 92       	push	r10
    4a7c:	bf 92       	push	r11
    4a7e:	cf 92       	push	r12
    4a80:	df 92       	push	r13
    4a82:	ef 92       	push	r14
    4a84:	ff 92       	push	r15
    4a86:	0f 93       	push	r16
    4a88:	1f 93       	push	r17
    4a8a:	cf 93       	push	r28
    4a8c:	df 93       	push	r29
    4a8e:	cd b7       	in	r28, 0x3d	; 61
    4a90:	de b7       	in	r29, 0x3e	; 62
    4a92:	63 97       	sbiw	r28, 0x13	; 19
    4a94:	0f b6       	in	r0, 0x3f	; 63
    4a96:	f8 94       	cli
    4a98:	de bf       	out	0x3e, r29	; 62
    4a9a:	0f be       	out	0x3f, r0	; 63
    4a9c:	cd bf       	out	0x3d, r28	; 61
    4a9e:	7c 01       	movw	r14, r24
    4aa0:	6b 01       	movw	r12, r22
    4aa2:	1a 01       	movw	r2, r20
    uint32_t startTime = millis();
    4aa4:	0e 94 54 39 	call	0x72a8	; 0x72a8 <millis>
    4aa8:	4b 01       	movw	r8, r22
    4aaa:	5c 01       	movw	r10, r24

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    4aac:	87 01       	movw	r16, r14
    4aae:	08 5f       	subi	r16, 0xF8	; 248
    4ab0:	1f 4f       	sbci	r17, 0xFF	; 255
    {
        if((millis() - startTime) > aTimeout)
    4ab2:	26 01       	movw	r4, r12
    4ab4:	61 2c       	mov	r6, r1
    4ab6:	71 2c       	mov	r7, r1
uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    4ab8:	c8 01       	movw	r24, r16
    4aba:	29 d5       	rcall	.+2642   	; 0x550e <_ZN11EthernetUDP11parsePacketEv>
    4abc:	18 16       	cp	r1, r24
    4abe:	19 06       	cpc	r1, r25
    4ac0:	a4 f0       	brlt	.+40     	; 0x4aea <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x80>
    {
        if((millis() - startTime) > aTimeout)
    4ac2:	0e 94 54 39 	call	0x72a8	; 0x72a8 <millis>
    4ac6:	dc 01       	movw	r26, r24
    4ac8:	cb 01       	movw	r24, r22
    4aca:	88 19       	sub	r24, r8
    4acc:	99 09       	sbc	r25, r9
    4ace:	aa 09       	sbc	r26, r10
    4ad0:	bb 09       	sbc	r27, r11
    4ad2:	48 16       	cp	r4, r24
    4ad4:	59 06       	cpc	r5, r25
    4ad6:	6a 06       	cpc	r6, r26
    4ad8:	7b 06       	cpc	r7, r27
    4ada:	d0 f0       	brcs	.+52     	; 0x4b10 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xa6>
            return TIMED_OUT;
        delay(50);
    4adc:	62 e3       	ldi	r22, 0x32	; 50
    4ade:	70 e0       	ldi	r23, 0x00	; 0
    4ae0:	80 e0       	ldi	r24, 0x00	; 0
    4ae2:	90 e0       	ldi	r25, 0x00	; 0
    4ae4:	0e 94 85 39 	call	0x730a	; 0x730a <delay>
uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    4ae8:	e7 cf       	rjmp	.-50     	; 0x4ab8 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x4e>

    // We've had a reply!
    // Read the UDP header
    uint8_t header[DNS_HEADER_SIZE]; // Enough space to reuse for the DNS header
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
    4aea:	f7 01       	movw	r30, r14
    4aec:	42 81       	ldd	r20, Z+2	; 0x02
    4aee:	53 81       	ldd	r21, Z+3	; 0x03
    4af0:	64 81       	ldd	r22, Z+4	; 0x04
    4af2:	75 81       	ldd	r23, Z+5	; 0x05
    4af4:	81 8d       	ldd	r24, Z+25	; 0x19
    4af6:	92 8d       	ldd	r25, Z+26	; 0x1a
    4af8:	a3 8d       	ldd	r26, Z+27	; 0x1b
    4afa:	b4 8d       	ldd	r27, Z+28	; 0x1c
    4afc:	48 17       	cp	r20, r24
    4afe:	59 07       	cpc	r21, r25
    4b00:	6a 07       	cpc	r22, r26
    4b02:	7b 07       	cpc	r23, r27
    4b04:	49 f4       	brne	.+18     	; 0x4b18 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xae>
    4b06:	85 8d       	ldd	r24, Z+29	; 0x1d
    4b08:	96 8d       	ldd	r25, Z+30	; 0x1e
    4b0a:	c5 97       	sbiw	r24, 0x35	; 53
    4b0c:	29 f4       	brne	.+10     	; 0x4b18 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xae>
    4b0e:	09 c0       	rjmp	.+18     	; 0x4b22 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xb8>

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    {
        if((millis() - startTime) > aTimeout)
            return TIMED_OUT;
    4b10:	ee 24       	eor	r14, r14
    4b12:	ea 94       	dec	r14
    4b14:	fe 2c       	mov	r15, r14
    4b16:	f0 c0       	rjmp	.+480    	; 0x4cf8 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
        (iUdp.remotePort() != DNS_PORT) )
    {
        // It's not from who we expected
        return INVALID_SERVER;
    4b18:	9e ef       	ldi	r25, 0xFE	; 254
    4b1a:	e9 2e       	mov	r14, r25
    4b1c:	ff 24       	eor	r15, r15
    4b1e:	fa 94       	dec	r15
    4b20:	eb c0       	rjmp	.+470    	; 0x4cf8 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    4b22:	c8 01       	movw	r24, r16
    4b24:	08 d4       	rcall	.+2064   	; 0x5336 <_ZN11EthernetUDP9availableEv>
    4b26:	0c 97       	sbiw	r24, 0x0c	; 12
    4b28:	0c f4       	brge	.+2      	; 0x4b2c <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xc2>
    4b2a:	e2 c0       	rjmp	.+452    	; 0x4cf0 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x286>
    {
        return TRUNCATED;
    }
    iUdp.read(header, DNS_HEADER_SIZE);
    4b2c:	4c e0       	ldi	r20, 0x0C	; 12
    4b2e:	50 e0       	ldi	r21, 0x00	; 0
    4b30:	be 01       	movw	r22, r28
    4b32:	6f 5f       	subi	r22, 0xFF	; 255
    4b34:	7f 4f       	sbci	r23, 0xFF	; 255
    4b36:	c8 01       	movw	r24, r16
    4b38:	83 d4       	rcall	.+2310   	; 0x5440 <_ZN11EthernetUDP4readEPhj>

    uint16_t header_flags = htons(*((uint16_t*)&header[2]));
    4b3a:	8b 81       	ldd	r24, Y+3	; 0x03
    4b3c:	9c 81       	ldd	r25, Y+4	; 0x04
    4b3e:	98 27       	eor	r25, r24
    4b40:	89 27       	eor	r24, r25
    4b42:	98 27       	eor	r25, r24
    4b44:	9a 8b       	std	Y+18, r25	; 0x12
    4b46:	89 8b       	std	Y+17, r24	; 0x11
    // Check that it's a response to this request
    if ( ( iRequestId != (*((uint16_t*)&header[0])) ) ||
    4b48:	f7 01       	movw	r30, r14
    4b4a:	46 81       	ldd	r20, Z+6	; 0x06
    4b4c:	57 81       	ldd	r21, Z+7	; 0x07
    4b4e:	29 81       	ldd	r18, Y+1	; 0x01
    4b50:	3a 81       	ldd	r19, Y+2	; 0x02
    4b52:	42 17       	cp	r20, r18
    4b54:	53 07       	cpc	r21, r19
    4b56:	11 f4       	brne	.+4      	; 0x4b5c <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xf2>
    4b58:	97 fd       	sbrc	r25, 7
        ((header_flags & QUERY_RESPONSE_MASK) != (uint16_t)RESPONSE_FLAG) )
    {
        // Mark the entire packet as read
        iUdp.flush();
    4b5a:	07 c0       	rjmp	.+14     	; 0x4b6a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x100>
    4b5c:	c8 01       	movw	r24, r16
    4b5e:	05 d4       	rcall	.+2058   	; 0x536a <_ZN11EthernetUDP5flushEv>
        return INVALID_RESPONSE;
    4b60:	7c ef       	ldi	r23, 0xFC	; 252
    4b62:	e7 2e       	mov	r14, r23
    4b64:	ff 24       	eor	r15, r15
    4b66:	fa 94       	dec	r15
    4b68:	c7 c0       	rjmp	.+398    	; 0x4cf8 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    }
    // Check for any errors in the response (or in our request)
    // although we don't do anything to get round these
    if ( (header_flags & TRUNCATION_FLAG) || (header_flags & RESP_MASK) )
    4b6a:	8f 70       	andi	r24, 0x0F	; 15
    4b6c:	92 70       	andi	r25, 0x02	; 2
    4b6e:	89 2b       	or	r24, r25
    {
        // Mark the entire packet as read
        iUdp.flush();
    4b70:	39 f0       	breq	.+14     	; 0x4b80 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x116>
    4b72:	c8 01       	movw	r24, r16
    4b74:	fa d3       	rcall	.+2036   	; 0x536a <_ZN11EthernetUDP5flushEv>
        return -5; //INVALID_RESPONSE;
    4b76:	6b ef       	ldi	r22, 0xFB	; 251
    4b78:	e6 2e       	mov	r14, r22
    4b7a:	ff 24       	eor	r15, r15
    4b7c:	fa 94       	dec	r15
    4b7e:	bc c0       	rjmp	.+376    	; 0x4cf8 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    }

    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
    4b80:	cf 80       	ldd	r12, Y+7	; 0x07
    4b82:	d8 84       	ldd	r13, Y+8	; 0x08
    4b84:	dc 24       	eor	r13, r12
    4b86:	cd 24       	eor	r12, r13
    4b88:	dc 24       	eor	r13, r12
    if (answerCount == 0 )
    4b8a:	c1 14       	cp	r12, r1
    4b8c:	d1 04       	cpc	r13, r1
    4b8e:	19 f0       	breq	.+6      	; 0x4b96 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x12c>
    4b90:	e1 2c       	mov	r14, r1
    4b92:	f1 2c       	mov	r15, r1
    {
        // Mark the entire packet as read
        iUdp.flush();
    4b94:	1f c0       	rjmp	.+62     	; 0x4bd4 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x16a>
    4b96:	c8 01       	movw	r24, r16
    4b98:	e8 d3       	rcall	.+2000   	; 0x536a <_ZN11EthernetUDP5flushEv>
        return -6; //INVALID_RESPONSE;
    4b9a:	5a ef       	ldi	r21, 0xFA	; 250
    4b9c:	e5 2e       	mov	r14, r21
    4b9e:	ff 24       	eor	r15, r15
    4ba0:	fa 94       	dec	r15
    4ba2:	aa c0       	rjmp	.+340    	; 0x4cf8 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    {
        // Skip over the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    4ba4:	41 e0       	ldi	r20, 0x01	; 1
    4ba6:	50 e0       	ldi	r21, 0x00	; 0
    4ba8:	be 01       	movw	r22, r28
    4baa:	63 5f       	subi	r22, 0xF3	; 243
    4bac:	7f 4f       	sbci	r23, 0xFF	; 255
    4bae:	c8 01       	movw	r24, r16
    4bb0:	47 d4       	rcall	.+2190   	; 0x5440 <_ZN11EthernetUDP4readEPhj>
            if (len > 0)
    4bb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    4bb4:	81 11       	cpse	r24, r1
                while(len--)
                {
                    iUdp.read(); // we don't care about the returned byte
                }
            }
        } while (len != 0);
    4bb6:	17 c0       	rjmp	.+46     	; 0x4be6 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x17c>
    4bb8:	8d 85       	ldd	r24, Y+13	; 0x0d

        // Now jump over the type and class
        for (int i =0; i < 4; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    4bba:	81 11       	cpse	r24, r1
    4bbc:	f3 cf       	rjmp	.-26     	; 0x4ba4 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x13a>
    4bbe:	c8 01       	movw	r24, r16
    4bc0:	17 d4       	rcall	.+2094   	; 0x53f0 <_ZN11EthernetUDP4readEv>
    4bc2:	c8 01       	movw	r24, r16
    4bc4:	15 d4       	rcall	.+2090   	; 0x53f0 <_ZN11EthernetUDP4readEv>
    4bc6:	c8 01       	movw	r24, r16
    4bc8:	13 d4       	rcall	.+2086   	; 0x53f0 <_ZN11EthernetUDP4readEv>
    4bca:	c8 01       	movw	r24, r16
    4bcc:	11 d4       	rcall	.+2082   	; 0x53f0 <_ZN11EthernetUDP4readEv>
    4bce:	ff ef       	ldi	r31, 0xFF	; 255
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    4bd0:	ef 1a       	sub	r14, r31
    4bd2:	ff 0a       	sbc	r15, r31
    4bd4:	8d 81       	ldd	r24, Y+5	; 0x05
    4bd6:	9e 81       	ldd	r25, Y+6	; 0x06
    4bd8:	98 27       	eor	r25, r24
    4bda:	89 27       	eor	r24, r25
    4bdc:	98 27       	eor	r25, r24
    4bde:	e8 16       	cp	r14, r24
    4be0:	f9 06       	cpc	r15, r25
    4be2:	00 f3       	brcs	.-64     	; 0x4ba4 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x13a>
    4be4:	09 c0       	rjmp	.+18     	; 0x4bf8 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x18e>
            iUdp.read(&len, sizeof(len));
            if (len > 0)
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
    4be6:	8d 85       	ldd	r24, Y+13	; 0x0d
    4be8:	9f ef       	ldi	r25, 0xFF	; 255
    4bea:	98 0f       	add	r25, r24
    4bec:	9d 87       	std	Y+13, r25	; 0x0d
    4bee:	88 23       	and	r24, r24
    4bf0:	19 f3       	breq	.-58     	; 0x4bb8 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x14e>
                {
                    iUdp.read(); // we don't care about the returned byte
    4bf2:	c8 01       	movw	r24, r16
    4bf4:	fd d3       	rcall	.+2042   	; 0x53f0 <_ZN11EthernetUDP4readEv>
            iUdp.read(&len, sizeof(len));
            if (len > 0)
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
    4bf6:	f7 cf       	rjmp	.-18     	; 0x4be6 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x17c>
    4bf8:	a1 2c       	mov	r10, r1
    4bfa:	b1 2c       	mov	r11, r1
    {
        // Skip the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    4bfc:	41 e0       	ldi	r20, 0x01	; 1
    4bfe:	50 e0       	ldi	r21, 0x00	; 0
    4c00:	be 01       	movw	r22, r28
    4c02:	6d 5e       	subi	r22, 0xED	; 237
    4c04:	7f 4f       	sbci	r23, 0xFF	; 255
    4c06:	c8 01       	movw	r24, r16
    4c08:	1b d4       	rcall	.+2102   	; 0x5440 <_ZN11EthernetUDP4readEPhj>
    4c0a:	8b 89       	ldd	r24, Y+19	; 0x13
            if ((len & LABEL_COMPRESSION_MASK) == 0)
    4c0c:	98 2f       	mov	r25, r24
    4c0e:	90 7c       	andi	r25, 0xC0	; 192
    4c10:	59 f4       	brne	.+22     	; 0x4c28 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1be>
            {
                // It's just a normal label
                if (len > 0)
    4c12:	88 23       	and	r24, r24
    4c14:	79 f0       	breq	.+30     	; 0x4c34 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1ca>
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
    4c16:	8b 89       	ldd	r24, Y+19	; 0x13
    4c18:	9f ef       	ldi	r25, 0xFF	; 255
    4c1a:	98 0f       	add	r25, r24
    4c1c:	9b 8b       	std	Y+19, r25	; 0x13
    4c1e:	88 23       	and	r24, r24
    4c20:	31 f0       	breq	.+12     	; 0x4c2e <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1c4>
                    {
                        iUdp.read(); // we don't care about the returned byte
    4c22:	c8 01       	movw	r24, r16
    4c24:	e5 d3       	rcall	.+1994   	; 0x53f0 <_ZN11EthernetUDP4readEv>
                if (len > 0)
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
    4c26:	f7 cf       	rjmp	.-18     	; 0x4c16 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1ac>
                // says that a name is either a sequence of labels ended with a
                // 0 length octet or a pointer or a sequence of labels ending in
                // a pointer.  Either way, when we get here we're at the end of
                // the name
                // Skip over the pointer
                iUdp.read(); // we don't care about the returned byte
    4c28:	c8 01       	movw	r24, r16
    4c2a:	e2 d3       	rcall	.+1988   	; 0x53f0 <_ZN11EthernetUDP4readEv>
    4c2c:	1b 8a       	std	Y+19, r1	; 0x13
                // And set len so that we drop out of the name loop
                len = 0;
    4c2e:	8b 89       	ldd	r24, Y+19	; 0x13
            }
        } while (len != 0);
    4c30:	81 11       	cpse	r24, r1
    4c32:	e4 cf       	rjmp	.-56     	; 0x4bfc <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x192>

        // Check the type and class
        uint16_t answerType;
        uint16_t answerClass;
        iUdp.read((uint8_t*)&answerType, sizeof(answerType));
    4c34:	42 e0       	ldi	r20, 0x02	; 2
    4c36:	50 e0       	ldi	r21, 0x00	; 0
    4c38:	be 01       	movw	r22, r28
    4c3a:	61 5f       	subi	r22, 0xF1	; 241
    4c3c:	7f 4f       	sbci	r23, 0xFF	; 255
        iUdp.read((uint8_t*)&answerClass, sizeof(answerClass));
    4c3e:	c8 01       	movw	r24, r16
    4c40:	ff d3       	rcall	.+2046   	; 0x5440 <_ZN11EthernetUDP4readEPhj>
    4c42:	42 e0       	ldi	r20, 0x02	; 2
    4c44:	50 e0       	ldi	r21, 0x00	; 0
    4c46:	be 01       	movw	r22, r28
    4c48:	63 5f       	subi	r22, 0xF3	; 243
    4c4a:	7f 4f       	sbci	r23, 0xFF	; 255

        // Ignore the Time-To-Live as we don't do any caching
        for (int i =0; i < TTL_SIZE; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    4c4c:	c8 01       	movw	r24, r16
    4c4e:	f8 d3       	rcall	.+2032   	; 0x5440 <_ZN11EthernetUDP4readEPhj>
    4c50:	c8 01       	movw	r24, r16
    4c52:	ce d3       	rcall	.+1948   	; 0x53f0 <_ZN11EthernetUDP4readEv>
    4c54:	c8 01       	movw	r24, r16
    4c56:	cc d3       	rcall	.+1944   	; 0x53f0 <_ZN11EthernetUDP4readEv>
    4c58:	c8 01       	movw	r24, r16
    4c5a:	ca d3       	rcall	.+1940   	; 0x53f0 <_ZN11EthernetUDP4readEv>
    4c5c:	c8 01       	movw	r24, r16
    4c5e:	c8 d3       	rcall	.+1936   	; 0x53f0 <_ZN11EthernetUDP4readEv>
    4c60:	42 e0       	ldi	r20, 0x02	; 2
    4c62:	50 e0       	ldi	r21, 0x00	; 0
        }

        // And read out the length of this answer
        // Don't need header_flags anymore, so we can reuse it here
        iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));
    4c64:	be 01       	movw	r22, r28
    4c66:	6f 5e       	subi	r22, 0xEF	; 239
    4c68:	7f 4f       	sbci	r23, 0xFF	; 255
    4c6a:	c8 01       	movw	r24, r16
    4c6c:	e9 d3       	rcall	.+2002   	; 0x5440 <_ZN11EthernetUDP4readEPhj>
    4c6e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4c70:	98 89       	ldd	r25, Y+16	; 0x10
    4c72:	81 15       	cp	r24, r1

        if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) )
    4c74:	91 40       	sbci	r25, 0x01	; 1
    4c76:	49 f4       	brne	.+18     	; 0x4c8a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x220>
    4c78:	ed 84       	ldd	r14, Y+13	; 0x0d
    4c7a:	fe 84       	ldd	r15, Y+14	; 0x0e
    4c7c:	fe 24       	eor	r15, r14
    4c7e:	ef 24       	eor	r14, r15
    4c80:	fe 24       	eor	r15, r14
    4c82:	81 e0       	ldi	r24, 0x01	; 1
    4c84:	e8 16       	cp	r14, r24
    4c86:	f1 04       	cpc	r15, r1
    4c88:	19 f0       	breq	.+6      	; 0x4c90 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x226>
    4c8a:	e1 2c       	mov	r14, r1
    4c8c:	f1 2c       	mov	r15, r1
    4c8e:	14 c0       	rjmp	.+40     	; 0x4cb8 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x24e>
    4c90:	89 89       	ldd	r24, Y+17	; 0x11
        {
            if (htons(header_flags) != 4)
    4c92:	9a 89       	ldd	r25, Y+18	; 0x12
    4c94:	81 15       	cp	r24, r1
    4c96:	94 40       	sbci	r25, 0x04	; 4
    4c98:	39 f0       	breq	.+14     	; 0x4ca8 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x23e>
    4c9a:	c8 01       	movw	r24, r16
            {
                // It's a weird size
                // Mark the entire packet as read
                iUdp.flush();
    4c9c:	66 d3       	rcall	.+1740   	; 0x536a <_ZN11EthernetUDP5flushEv>
    4c9e:	47 ef       	ldi	r20, 0xF7	; 247
                return -9;//INVALID_RESPONSE;
    4ca0:	e4 2e       	mov	r14, r20
    4ca2:	ff 24       	eor	r15, r15
    4ca4:	fa 94       	dec	r15
    4ca6:	28 c0       	rjmp	.+80     	; 0x4cf8 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    4ca8:	b1 01       	movw	r22, r2

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    4caa:	6e 5f       	subi	r22, 0xFE	; 254
    4cac:	7f 4f       	sbci	r23, 0xFF	; 255
    4cae:	44 e0       	ldi	r20, 0x04	; 4
            }
            iUdp.read(aAddress.raw_address(), 4);
    4cb0:	50 e0       	ldi	r21, 0x00	; 0
    4cb2:	c8 01       	movw	r24, r16
    4cb4:	c5 d3       	rcall	.+1930   	; 0x5440 <_ZN11EthernetUDP4readEPhj>
    4cb6:	20 c0       	rjmp	.+64     	; 0x4cf8 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
            return SUCCESS;
    4cb8:	89 89       	ldd	r24, Y+17	; 0x11
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    4cba:	9a 89       	ldd	r25, Y+18	; 0x12
    4cbc:	98 27       	eor	r25, r24
    4cbe:	89 27       	eor	r24, r25
    4cc0:	98 27       	eor	r25, r24
    4cc2:	e8 16       	cp	r14, r24
    4cc4:	f9 06       	cpc	r15, r25
    4cc6:	30 f4       	brcc	.+12     	; 0x4cd4 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x26a>
    4cc8:	c8 01       	movw	r24, r16
            {
                iUdp.read(); // we don't care about the returned byte
    4cca:	92 d3       	rcall	.+1828   	; 0x53f0 <_ZN11EthernetUDP4readEv>
    4ccc:	ff ef       	ldi	r31, 0xFF	; 255
    4cce:	ef 1a       	sub	r14, r31
            return SUCCESS;
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    4cd0:	ff 0a       	sbc	r15, r31
    4cd2:	f2 cf       	rjmp	.-28     	; 0x4cb8 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x24e>
    4cd4:	2f ef       	ldi	r18, 0xFF	; 255
    4cd6:	a2 1a       	sub	r10, r18
    // Now we're up to the bit we're interested in, the answer
    // There might be more than one answer (although we'll just use the first
    // type A answer) and some authority and additional resource records but
    // we're going to ignore all of them.

    for (uint16_t i =0; i < answerCount; i++)
    4cd8:	b2 0a       	sbc	r11, r18
    4cda:	ca 14       	cp	r12, r10
    4cdc:	db 04       	cpc	r13, r11
    4cde:	09 f0       	breq	.+2      	; 0x4ce2 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x278>
    4ce0:	8d cf       	rjmp	.-230    	; 0x4bfc <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x192>
    4ce2:	c8 01       	movw	r24, r16
    4ce4:	42 d3       	rcall	.+1668   	; 0x536a <_ZN11EthernetUDP5flushEv>
            }
        }
    }

    // Mark the entire packet as read
    iUdp.flush();
    4ce6:	36 ef       	ldi	r19, 0xF6	; 246
    4ce8:	e3 2e       	mov	r14, r19
    4cea:	ff 24       	eor	r15, r15

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
    4cec:	fa 94       	dec	r15
    4cee:	04 c0       	rjmp	.+8      	; 0x4cf8 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    4cf0:	8d ef       	ldi	r24, 0xFD	; 253
    4cf2:	e8 2e       	mov	r14, r24
    4cf4:	ff 24       	eor	r15, r15
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    {
        return TRUNCATED;
    4cf6:	fa 94       	dec	r15
    4cf8:	c7 01       	movw	r24, r14
    4cfa:	63 96       	adiw	r28, 0x13	; 19
    4cfc:	0f b6       	in	r0, 0x3f	; 63
    // Mark the entire packet as read
    iUdp.flush();

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
}
    4cfe:	f8 94       	cli
    4d00:	de bf       	out	0x3e, r29	; 62
    4d02:	0f be       	out	0x3f, r0	; 63
    4d04:	cd bf       	out	0x3d, r28	; 61
    4d06:	df 91       	pop	r29
    4d08:	cf 91       	pop	r28
    4d0a:	1f 91       	pop	r17
    4d0c:	0f 91       	pop	r16
    4d0e:	ff 90       	pop	r15
    4d10:	ef 90       	pop	r14
    4d12:	df 90       	pop	r13
    4d14:	cf 90       	pop	r12
    4d16:	bf 90       	pop	r11
    4d18:	af 90       	pop	r10
    4d1a:	9f 90       	pop	r9
    4d1c:	8f 90       	pop	r8
    4d1e:	7f 90       	pop	r7
    4d20:	6f 90       	pop	r6
    4d22:	5f 90       	pop	r5
    4d24:	4f 90       	pop	r4
    4d26:	3f 90       	pop	r3
    4d28:	2f 90       	pop	r2
    4d2a:	08 95       	ret

00004d2c <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>:
    4d2c:	8f 92       	push	r8
    4d2e:	9f 92       	push	r9
    4d30:	af 92       	push	r10
        return 0;
    }
}

int DNSClient::getHostByName(const char* aHostname, IPAddress& aResult)
{
    4d32:	bf 92       	push	r11
    4d34:	cf 92       	push	r12
    4d36:	df 92       	push	r13
    4d38:	ef 92       	push	r14
    4d3a:	ff 92       	push	r15
    4d3c:	0f 93       	push	r16
    4d3e:	1f 93       	push	r17
    4d40:	cf 93       	push	r28
    4d42:	df 93       	push	r29
    4d44:	00 d0       	rcall	.+0      	; 0x4d46 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x1a>
    4d46:	00 d0       	rcall	.+0      	; 0x4d48 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x1c>
    4d48:	00 d0       	rcall	.+0      	; 0x4d4a <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x1e>
    4d4a:	cd b7       	in	r28, 0x3d	; 61
    4d4c:	de b7       	in	r29, 0x3e	; 62
    4d4e:	7c 01       	movw	r14, r24
    4d50:	4b 01       	movw	r8, r22
    4d52:	5a 01       	movw	r10, r20
    int ret =0;

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
    4d54:	9e dd       	rcall	.-1220   	; 0x4892 <_ZN9DNSClient9inet_atonEPKcR9IPAddress>
    4d56:	8c 01       	movw	r16, r24
    4d58:	89 2b       	or	r24, r25
    4d5a:	09 f0       	breq	.+2      	; 0x4d5e <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x32>
    4d5c:	57 c0       	rjmp	.+174    	; 0x4e0c <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xe0>
        // It is, our work here is done
        return 1;
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    4d5e:	f7 01       	movw	r30, r14
    4d60:	42 81       	ldd	r20, Z+2	; 0x02
    4d62:	53 81       	ldd	r21, Z+3	; 0x03
    4d64:	64 81       	ldd	r22, Z+4	; 0x04
    4d66:	75 81       	ldd	r23, Z+5	; 0x05
    4d68:	80 91 1f 0c 	lds	r24, 0x0C1F	; 0x800c1f <_ZL11INADDR_NONE+0x2>
    4d6c:	90 91 20 0c 	lds	r25, 0x0C20	; 0x800c20 <_ZL11INADDR_NONE+0x3>
    4d70:	a0 91 21 0c 	lds	r26, 0x0C21	; 0x800c21 <_ZL11INADDR_NONE+0x4>
    4d74:	b0 91 22 0c 	lds	r27, 0x0C22	; 0x800c22 <_ZL11INADDR_NONE+0x5>
    4d78:	48 17       	cp	r20, r24
    4d7a:	59 07       	cpc	r21, r25
    4d7c:	6a 07       	cpc	r22, r26
    4d7e:	7b 07       	cpc	r23, r27
    4d80:	09 f4       	brne	.+2      	; 0x4d84 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x58>
    4d82:	47 c0       	rjmp	.+142    	; 0x4e12 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xe6>
    {
        return INVALID_SERVER;
    }
	
    // Find a socket to use
    if (iUdp.begin(1024+(millis() & 0xF)) == 1)
    4d84:	0e 94 54 39 	call	0x72a8	; 0x72a8 <millis>
    4d88:	67 01       	movw	r12, r14
    4d8a:	f8 e0       	ldi	r31, 0x08	; 8
    4d8c:	cf 0e       	add	r12, r31
    4d8e:	d1 1c       	adc	r13, r1
    4d90:	6f 70       	andi	r22, 0x0F	; 15
    4d92:	77 27       	eor	r23, r23
    4d94:	7c 5f       	subi	r23, 0xFC	; 252
    4d96:	c6 01       	movw	r24, r12
    4d98:	89 d3       	rcall	.+1810   	; 0x54ac <_ZN11EthernetUDP5beginEj>
    4d9a:	81 30       	cpi	r24, 0x01	; 1
    4d9c:	09 f0       	breq	.+2      	; 0x4da0 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x74>
    4d9e:	3b c0       	rjmp	.+118    	; 0x4e16 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xea>
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    4da0:	8d e5       	ldi	r24, 0x5D	; 93
    4da2:	9a e0       	ldi	r25, 0x0A	; 10
    4da4:	9a 83       	std	Y+2, r25	; 0x02
    4da6:	89 83       	std	Y+1, r24	; 0x01
    4da8:	f7 01       	movw	r30, r14
    4daa:	82 81       	ldd	r24, Z+2	; 0x02
    4dac:	93 81       	ldd	r25, Z+3	; 0x03
    4dae:	a4 81       	ldd	r26, Z+4	; 0x04
    4db0:	b5 81       	ldd	r27, Z+5	; 0x05
    4db2:	8b 83       	std	Y+3, r24	; 0x03
    4db4:	9c 83       	std	Y+4, r25	; 0x04
    4db6:	ad 83       	std	Y+5, r26	; 0x05
    4db8:	be 83       	std	Y+6, r27	; 0x06
        // Try up to three times
        int retries = 0;
//        while ((retries < 3) && (ret <= 0))
        {
            // Send DNS request
            ret = iUdp.beginPacket(iDNSServer, DNS_PORT);
    4dba:	45 e3       	ldi	r20, 0x35	; 53
    4dbc:	50 e0       	ldi	r21, 0x00	; 0
    4dbe:	be 01       	movw	r22, r28
    4dc0:	6f 5f       	subi	r22, 0xFF	; 255
    4dc2:	7f 4f       	sbci	r23, 0xFF	; 255
    4dc4:	c6 01       	movw	r24, r12
    4dc6:	f7 d2       	rcall	.+1518   	; 0x53b6 <_ZN11EthernetUDP11beginPacketE9IPAddressj>
            if (ret != 0)
    4dc8:	89 2b       	or	r24, r25
    4dca:	19 f4       	brne	.+6      	; 0x4dd2 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xa6>
    4dcc:	00 e0       	ldi	r16, 0x00	; 0
    4dce:	10 e0       	ldi	r17, 0x00	; 0
            {
                // Now output the request data
                ret = BuildRequest(aHostname);
    4dd0:	1a c0       	rjmp	.+52     	; 0x4e06 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xda>
    4dd2:	b4 01       	movw	r22, r8
    4dd4:	c7 01       	movw	r24, r14
                if (ret != 0)
    4dd6:	a8 dd       	rcall	.-1200   	; 0x4928 <_ZN9DNSClient12BuildRequestEPKc>
    4dd8:	89 2b       	or	r24, r25
                {
                    // And finally send the request
                    ret = iUdp.endPacket();
    4dda:	c1 f3       	breq	.-16     	; 0x4dcc <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xa0>
    4ddc:	c6 01       	movw	r24, r12
    4dde:	f2 d2       	rcall	.+1508   	; 0x53c4 <_ZN11EthernetUDP9endPacketEv>
                    if (ret != 0)
    4de0:	89 2b       	or	r24, r25
    4de2:	a1 f3       	breq	.-24     	; 0x4dcc <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xa0>
    4de4:	83 e0       	ldi	r24, 0x03	; 3
    4de6:	88 2e       	mov	r8, r24
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
                        {
                            ret = ProcessResponse(5000, aResult);
    4de8:	91 2c       	mov	r9, r1
    4dea:	a5 01       	movw	r20, r10
    4dec:	68 e8       	ldi	r22, 0x88	; 136
    4dee:	73 e1       	ldi	r23, 0x13	; 19
    4df0:	c7 01       	movw	r24, r14
    4df2:	3b de       	rcall	.-906    	; 0x4a6a <_ZN9DNSClient15ProcessResponseEjR9IPAddress>
    4df4:	8c 01       	movw	r16, r24
    4df6:	21 e0       	ldi	r18, 0x01	; 1
    4df8:	82 1a       	sub	r8, r18
    4dfa:	91 08       	sbc	r9, r1
                    if (ret != 0)
                    {
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
    4dfc:	21 f0       	breq	.+8      	; 0x4e06 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xda>
    4dfe:	0f 3f       	cpi	r16, 0xFF	; 255
    4e00:	ff ef       	ldi	r31, 0xFF	; 255
    4e02:	1f 07       	cpc	r17, r31
            }
            retries++;
        }

        // We're done with the socket now
        iUdp.stop();
    4e04:	91 f3       	breq	.-28     	; 0x4dea <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xbe>
    4e06:	c6 01       	movw	r24, r12
    4e08:	c2 d2       	rcall	.+1412   	; 0x538e <_ZN11EthernetUDP4stopEv>
    4e0a:	05 c0       	rjmp	.+10     	; 0x4e16 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xea>

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
    {
        // It is, our work here is done
        return 1;
    4e0c:	01 e0       	ldi	r16, 0x01	; 1
    4e0e:	10 e0       	ldi	r17, 0x00	; 0
    4e10:	02 c0       	rjmp	.+4      	; 0x4e16 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xea>
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    {
        return INVALID_SERVER;
    4e12:	0e ef       	ldi	r16, 0xFE	; 254
    4e14:	1f ef       	ldi	r17, 0xFF	; 255
        // We're done with the socket now
        iUdp.stop();
    }

    return ret;
}
    4e16:	c8 01       	movw	r24, r16
    4e18:	26 96       	adiw	r28, 0x06	; 6
    4e1a:	0f b6       	in	r0, 0x3f	; 63
    4e1c:	f8 94       	cli
    4e1e:	de bf       	out	0x3e, r29	; 62
    4e20:	0f be       	out	0x3f, r0	; 63
    4e22:	cd bf       	out	0x3d, r28	; 61
    4e24:	df 91       	pop	r29
    4e26:	cf 91       	pop	r28
    4e28:	1f 91       	pop	r17
    4e2a:	0f 91       	pop	r16
    4e2c:	ff 90       	pop	r15
    4e2e:	ef 90       	pop	r14
    4e30:	df 90       	pop	r13
    4e32:	cf 90       	pop	r12
    4e34:	bf 90       	pop	r11
    4e36:	af 90       	pop	r10
    4e38:	9f 90       	pop	r9
    4e3a:	8f 90       	pop	r8
    4e3c:	08 95       	ret

00004e3e <_ZN10W5500Class8writeGAREPh>:
    return _dnsDomainName;
}

char* EthernetClass::hostName(){
    return _hostName;
}
    4e3e:	24 e0       	ldi	r18, 0x04	; 4
    4e40:	30 e0       	ldi	r19, 0x00	; 0
    4e42:	ac 01       	movw	r20, r24
    4e44:	64 e0       	ldi	r22, 0x04	; 4
    4e46:	81 e0       	ldi	r24, 0x01	; 1
    4e48:	90 e0       	ldi	r25, 0x00	; 0
    4e4a:	35 c6       	rjmp	.+3178   	; 0x5ab6 <_ZN10W5500Class5writeEjhPKhj>

00004e4c <_ZN10W5500Class9writeSUBREPh>:
    4e4c:	24 e0       	ldi	r18, 0x04	; 4
    4e4e:	30 e0       	ldi	r19, 0x00	; 0
    4e50:	ac 01       	movw	r20, r24
    4e52:	64 e0       	ldi	r22, 0x04	; 4
    4e54:	85 e0       	ldi	r24, 0x05	; 5
    4e56:	90 e0       	ldi	r25, 0x00	; 0
    4e58:	2e c6       	rjmp	.+3164   	; 0x5ab6 <_ZN10W5500Class5writeEjhPKhj>

00004e5a <_ZN10W5500Class9writeSHAREPh>:
    4e5a:	26 e0       	ldi	r18, 0x06	; 6
    4e5c:	30 e0       	ldi	r19, 0x00	; 0
    4e5e:	ac 01       	movw	r20, r24
    4e60:	64 e0       	ldi	r22, 0x04	; 4
    4e62:	89 e0       	ldi	r24, 0x09	; 9
    4e64:	90 e0       	ldi	r25, 0x00	; 0
    4e66:	27 c6       	rjmp	.+3150   	; 0x5ab6 <_ZN10W5500Class5writeEjhPKhj>

00004e68 <_ZN10W5500Class9writeSIPREPh>:
    4e68:	24 e0       	ldi	r18, 0x04	; 4
    4e6a:	30 e0       	ldi	r19, 0x00	; 0
    4e6c:	ac 01       	movw	r20, r24
    4e6e:	64 e0       	ldi	r22, 0x04	; 4
    4e70:	8f e0       	ldi	r24, 0x0F	; 15
    4e72:	90 e0       	ldi	r25, 0x00	; 0
    4e74:	20 c6       	rjmp	.+3136   	; 0x5ab6 <_ZN10W5500Class5writeEjhPKhj>

00004e76 <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_>:
    4e76:	8f 92       	push	r8
    4e78:	9f 92       	push	r9
    4e7a:	af 92       	push	r10
    4e7c:	bf 92       	push	r11
    4e7e:	cf 92       	push	r12
    4e80:	df 92       	push	r13
    4e82:	ef 92       	push	r14
    4e84:	ff 92       	push	r15
    4e86:	0f 93       	push	r16
    4e88:	1f 93       	push	r17
    4e8a:	cf 93       	push	r28
    4e8c:	df 93       	push	r29
    4e8e:	4c 01       	movw	r8, r24
    4e90:	5b 01       	movw	r10, r22
    4e92:	6a 01       	movw	r12, r20
    4e94:	e9 01       	movw	r28, r18
    4e96:	fc 01       	movw	r30, r24
    4e98:	64 85       	ldd	r22, Z+12	; 0x0c
    4e9a:	8d e5       	ldi	r24, 0x5D	; 93
    4e9c:	9c e0       	ldi	r25, 0x0C	; 12
    4e9e:	53 d6       	rcall	.+3238   	; 0x5b46 <_ZN10W5500Class4initEh>
    4ea0:	c5 01       	movw	r24, r10
    4ea2:	db df       	rcall	.-74     	; 0x4e5a <_ZN10W5500Class9writeSHAREPh>
    4ea4:	c6 01       	movw	r24, r12
    4ea6:	02 96       	adiw	r24, 0x02	; 2
    4ea8:	df df       	rcall	.-66     	; 0x4e68 <_ZN10W5500Class9writeSIPREPh>
    4eaa:	c8 01       	movw	r24, r16
    4eac:	02 96       	adiw	r24, 0x02	; 2
    4eae:	c7 df       	rcall	.-114    	; 0x4e3e <_ZN10W5500Class8writeGAREPh>
    4eb0:	c7 01       	movw	r24, r14
    4eb2:	02 96       	adiw	r24, 0x02	; 2
    4eb4:	cb df       	rcall	.-106    	; 0x4e4c <_ZN10W5500Class9writeSUBREPh>
    4eb6:	8a 81       	ldd	r24, Y+2	; 0x02
    4eb8:	9b 81       	ldd	r25, Y+3	; 0x03
    4eba:	ac 81       	ldd	r26, Y+4	; 0x04
    4ebc:	bd 81       	ldd	r27, Y+5	; 0x05
    4ebe:	f4 01       	movw	r30, r8
    4ec0:	82 83       	std	Z+2, r24	; 0x02
    4ec2:	93 83       	std	Z+3, r25	; 0x03
    4ec4:	a4 83       	std	Z+4, r26	; 0x04
    4ec6:	b5 83       	std	Z+5, r27	; 0x05
    4ec8:	df 91       	pop	r29
    4eca:	cf 91       	pop	r28
    4ecc:	1f 91       	pop	r17
    4ece:	0f 91       	pop	r16
    4ed0:	ff 90       	pop	r15
    4ed2:	ef 90       	pop	r14
    4ed4:	df 90       	pop	r13
    4ed6:	cf 90       	pop	r12
    4ed8:	bf 90       	pop	r11
    4eda:	af 90       	pop	r10
    4edc:	9f 90       	pop	r9
    4ede:	8f 90       	pop	r8
    4ee0:	08 95       	ret

00004ee2 <_ZN13EthernetClass11dnsServerIPEv>:
    4ee2:	2d e5       	ldi	r18, 0x5D	; 93
    4ee4:	3a e0       	ldi	r19, 0x0A	; 10
    4ee6:	fc 01       	movw	r30, r24
    4ee8:	31 83       	std	Z+1, r19	; 0x01
    4eea:	20 83       	st	Z, r18
    4eec:	fb 01       	movw	r30, r22
    4eee:	42 81       	ldd	r20, Z+2	; 0x02
    4ef0:	53 81       	ldd	r21, Z+3	; 0x03
    4ef2:	64 81       	ldd	r22, Z+4	; 0x04
    4ef4:	75 81       	ldd	r23, Z+5	; 0x05
    4ef6:	fc 01       	movw	r30, r24
    4ef8:	42 83       	std	Z+2, r20	; 0x02
    4efa:	53 83       	std	Z+3, r21	; 0x03
    4efc:	64 83       	std	Z+4, r22	; 0x04
    4efe:	75 83       	std	Z+5, r23	; 0x05
    4f00:	08 95       	ret

00004f02 <_GLOBAL__sub_I__ZN13EthernetClass6_stateE>:

EthernetClass Ethernet;
    4f02:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    4f04:	00 e0       	ldi	r16, 0x00	; 0
    4f06:	20 e0       	ldi	r18, 0x00	; 0
    4f08:	40 e0       	ldi	r20, 0x00	; 0
    4f0a:	60 e0       	ldi	r22, 0x00	; 0
    4f0c:	80 e4       	ldi	r24, 0x40	; 64
    4f0e:	9c e0       	ldi	r25, 0x0C	; 12
    4f10:	0e 94 ce 37 	call	0x6f9c	; 0x6f9c <_ZN9IPAddressC1Ehhhh>
  uint8_t w5500_cspin;

  static uint8_t _state[MAX_SOCK_NUM];
  static uint16_t _server_port[MAX_SOCK_NUM];

  EthernetClass() { _dhcp = NULL; w5500_cspin = 10; }
    4f14:	83 e2       	ldi	r24, 0x23	; 35
    4f16:	9c e0       	ldi	r25, 0x0C	; 12
    4f18:	0e 94 c4 37 	call	0x6f88	; 0x6f88 <_ZN9IPAddressC1Ev>
    4f1c:	e3 e2       	ldi	r30, 0x23	; 35
    4f1e:	fc e0       	ldi	r31, 0x0C	; 12
    4f20:	13 86       	std	Z+11, r1	; 0x0b
    4f22:	12 86       	std	Z+10, r1	; 0x0a
    4f24:	8a e0       	ldi	r24, 0x0A	; 10
    4f26:	84 87       	std	Z+12, r24	; 0x0c
    4f28:	0f 91       	pop	r16
    4f2a:	08 95       	ret

00004f2c <_ZN14EthernetClientneERKS_>:
uint16_t EthernetClient::_srcport = 1024;

EthernetClient::EthernetClient() : _sock(MAX_SOCK_NUM) {
}

EthernetClient::EthernetClient(uint8_t sock) : _sock(sock) {
    4f2c:	dc 01       	movw	r26, r24
    4f2e:	ed 91       	ld	r30, X+
    4f30:	fc 91       	ld	r31, X
    4f32:	02 8c       	ldd	r0, Z+26	; 0x1a
    4f34:	f3 8d       	ldd	r31, Z+27	; 0x1b
    4f36:	e0 2d       	mov	r30, r0
    4f38:	09 95       	icall
    4f3a:	91 e0       	ldi	r25, 0x01	; 1
    4f3c:	89 27       	eor	r24, r25
    4f3e:	08 95       	ret

00004f40 <_ZN14EthernetClient5writeEh>:
    4f40:	cf 93       	push	r28
    4f42:	df 93       	push	r29
    4f44:	1f 92       	push	r1
    4f46:	cd b7       	in	r28, 0x3d	; 61
    4f48:	de b7       	in	r29, 0x3e	; 62
    4f4a:	69 83       	std	Y+1, r22	; 0x01
    4f4c:	dc 01       	movw	r26, r24
    4f4e:	ed 91       	ld	r30, X+
    4f50:	fc 91       	ld	r31, X
    4f52:	02 80       	ldd	r0, Z+2	; 0x02
    4f54:	f3 81       	ldd	r31, Z+3	; 0x03
    4f56:	e0 2d       	mov	r30, r0
    4f58:	41 e0       	ldi	r20, 0x01	; 1
    4f5a:	50 e0       	ldi	r21, 0x00	; 0
    4f5c:	be 01       	movw	r22, r28
    4f5e:	6f 5f       	subi	r22, 0xFF	; 255
    4f60:	7f 4f       	sbci	r23, 0xFF	; 255
    4f62:	09 95       	icall
    4f64:	0f 90       	pop	r0
    4f66:	df 91       	pop	r29
    4f68:	cf 91       	pop	r28
    4f6a:	08 95       	ret

00004f6c <_ZN14EthernetClientcvbEv>:
    4f6c:	21 e0       	ldi	r18, 0x01	; 1
    4f6e:	fc 01       	movw	r30, r24
    4f70:	84 85       	ldd	r24, Z+12	; 0x0c
    4f72:	88 30       	cpi	r24, 0x08	; 8
    4f74:	09 f4       	brne	.+2      	; 0x4f78 <_ZN14EthernetClientcvbEv+0xc>
    4f76:	20 e0       	ldi	r18, 0x00	; 0
    4f78:	82 2f       	mov	r24, r18
    4f7a:	08 95       	ret

00004f7c <_ZN14EthernetClienteqERKS_>:
    4f7c:	fc 01       	movw	r30, r24
    4f7e:	94 85       	ldd	r25, Z+12	; 0x0c
    4f80:	fb 01       	movw	r30, r22
    4f82:	84 85       	ldd	r24, Z+12	; 0x0c
    4f84:	98 13       	cpse	r25, r24
    4f86:	03 c0       	rjmp	.+6      	; 0x4f8e <_ZN14EthernetClienteqERKS_+0x12>
    4f88:	81 e0       	ldi	r24, 0x01	; 1
    4f8a:	98 30       	cpi	r25, 0x08	; 8
    4f8c:	09 f4       	brne	.+2      	; 0x4f90 <_ZN14EthernetClienteqERKS_+0x14>
    4f8e:	80 e0       	ldi	r24, 0x00	; 0
    4f90:	08 95       	ret

00004f92 <_ZN14EthernetClient7connectEPKcj>:
    4f92:	cf 92       	push	r12
    4f94:	df 92       	push	r13
    4f96:	ef 92       	push	r14
    4f98:	ff 92       	push	r15
    4f9a:	0f 93       	push	r16
    4f9c:	1f 93       	push	r17
    4f9e:	cf 93       	push	r28
    4fa0:	df 93       	push	r29
    4fa2:	cd b7       	in	r28, 0x3d	; 61
    4fa4:	de b7       	in	r29, 0x3e	; 62
    4fa6:	af 97       	sbiw	r28, 0x2f	; 47
    4fa8:	0f b6       	in	r0, 0x3f	; 63
    4faa:	f8 94       	cli
    4fac:	de bf       	out	0x3e, r29	; 62
    4fae:	0f be       	out	0x3f, r0	; 63
    4fb0:	cd bf       	out	0x3d, r28	; 61
    4fb2:	8c 01       	movw	r16, r24
    4fb4:	6b 01       	movw	r12, r22
    4fb6:	7a 01       	movw	r14, r20
    4fb8:	ce 01       	movw	r24, r28
    4fba:	01 96       	adiw	r24, 0x01	; 1
    4fbc:	0e 94 c4 37 	call	0x6f88	; 0x6f88 <_ZN9IPAddressC1Ev>
    4fc0:	ce 01       	movw	r24, r28
    4fc2:	09 96       	adiw	r24, 0x09	; 9
    4fc4:	f3 d2       	rcall	.+1510   	; 0x55ac <_ZN11EthernetUDPC1Ev>
    4fc6:	ce 01       	movw	r24, r28
    4fc8:	8a 96       	adiw	r24, 0x2a	; 42
    4fca:	0e 94 c4 37 	call	0x6f88	; 0x6f88 <_ZN9IPAddressC1Ev>
    4fce:	63 e2       	ldi	r22, 0x23	; 35
    4fd0:	7c e0       	ldi	r23, 0x0C	; 12
    4fd2:	ce 01       	movw	r24, r28
    4fd4:	84 96       	adiw	r24, 0x24	; 36
    4fd6:	85 df       	rcall	.-246    	; 0x4ee2 <_ZN13EthernetClass11dnsServerIPEv>
    4fd8:	be 01       	movw	r22, r28
    4fda:	6c 5d       	subi	r22, 0xDC	; 220
    4fdc:	7f 4f       	sbci	r23, 0xFF	; 255
    4fde:	ce 01       	movw	r24, r28
    4fe0:	01 96       	adiw	r24, 0x01	; 1
    4fe2:	4a dc       	rcall	.-1900   	; 0x4878 <_ZN9DNSClient5beginERK9IPAddress>
    4fe4:	ae 01       	movw	r20, r28
    4fe6:	46 5d       	subi	r20, 0xD6	; 214
    4fe8:	5f 4f       	sbci	r21, 0xFF	; 255
    4fea:	b6 01       	movw	r22, r12
    4fec:	ce 01       	movw	r24, r28
    4fee:	01 96       	adiw	r24, 0x01	; 1
    4ff0:	9d de       	rcall	.-710    	; 0x4d2c <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>
    4ff2:	81 30       	cpi	r24, 0x01	; 1
    4ff4:	91 05       	cpc	r25, r1
    4ff6:	c1 f4       	brne	.+48     	; 0x5028 <_ZN14EthernetClient7connectEPKcj+0x96>
    4ff8:	d8 01       	movw	r26, r16
    4ffa:	ed 91       	ld	r30, X+
    4ffc:	fc 91       	ld	r31, X
    4ffe:	06 84       	ldd	r0, Z+14	; 0x0e
    5000:	f7 85       	ldd	r31, Z+15	; 0x0f
    5002:	e0 2d       	mov	r30, r0
    5004:	8d e5       	ldi	r24, 0x5D	; 93
    5006:	9a e0       	ldi	r25, 0x0A	; 10
    5008:	9d a3       	std	Y+37, r25	; 0x25
    500a:	8c a3       	std	Y+36, r24	; 0x24
    500c:	8c a5       	ldd	r24, Y+44	; 0x2c
    500e:	9d a5       	ldd	r25, Y+45	; 0x2d
    5010:	ae a5       	ldd	r26, Y+46	; 0x2e
    5012:	bf a5       	ldd	r27, Y+47	; 0x2f
    5014:	8e a3       	std	Y+38, r24	; 0x26
    5016:	9f a3       	std	Y+39, r25	; 0x27
    5018:	a8 a7       	std	Y+40, r26	; 0x28
    501a:	b9 a7       	std	Y+41, r27	; 0x29
    501c:	a7 01       	movw	r20, r14
    501e:	be 01       	movw	r22, r28
    5020:	6c 5d       	subi	r22, 0xDC	; 220
    5022:	7f 4f       	sbci	r23, 0xFF	; 255
    5024:	c8 01       	movw	r24, r16
    5026:	09 95       	icall
    5028:	af 96       	adiw	r28, 0x2f	; 47
    502a:	0f b6       	in	r0, 0x3f	; 63
    502c:	f8 94       	cli
    502e:	de bf       	out	0x3e, r29	; 62
    5030:	0f be       	out	0x3f, r0	; 63
    5032:	cd bf       	out	0x3d, r28	; 61
    5034:	df 91       	pop	r29
    5036:	cf 91       	pop	r28
    5038:	1f 91       	pop	r17
    503a:	0f 91       	pop	r16
    503c:	ff 90       	pop	r15
    503e:	ef 90       	pop	r14
    5040:	df 90       	pop	r13
    5042:	cf 90       	pop	r12
    5044:	08 95       	ret

00005046 <_ZN14EthernetClient5writeEPKhj>:
    5046:	0f 93       	push	r16
    5048:	1f 93       	push	r17
    504a:	cf 93       	push	r28
    504c:	df 93       	push	r29
    504e:	8c 01       	movw	r16, r24
    5050:	d4 2f       	mov	r29, r20
    5052:	c5 2f       	mov	r28, r21
    5054:	fc 01       	movw	r30, r24
    5056:	84 85       	ldd	r24, Z+12	; 0x0c
    5058:	88 30       	cpi	r24, 0x08	; 8
    505a:	41 f4       	brne	.+16     	; 0x506c <_ZN14EthernetClient5writeEPKhj+0x26>
    505c:	81 e0       	ldi	r24, 0x01	; 1
    505e:	90 e0       	ldi	r25, 0x00	; 0
    5060:	f8 01       	movw	r30, r16
    5062:	93 83       	std	Z+3, r25	; 0x03
    5064:	82 83       	std	Z+2, r24	; 0x02
    5066:	80 e0       	ldi	r24, 0x00	; 0
    5068:	90 e0       	ldi	r25, 0x00	; 0
    506a:	05 c0       	rjmp	.+10     	; 0x5076 <_ZN14EthernetClient5writeEPKhj+0x30>
    506c:	cf d3       	rcall	.+1950   	; 0x580c <_Z4sendhPKhj>
    506e:	89 2b       	or	r24, r25
    5070:	a9 f3       	breq	.-22     	; 0x505c <_ZN14EthernetClient5writeEPKhj+0x16>
    5072:	8d 2f       	mov	r24, r29
    5074:	9c 2f       	mov	r25, r28
    5076:	df 91       	pop	r29
    5078:	cf 91       	pop	r28
    507a:	1f 91       	pop	r17
    507c:	0f 91       	pop	r16
    507e:	08 95       	ret

00005080 <_ZN14EthernetClient9availableEv>:
    5080:	fc 01       	movw	r30, r24
    5082:	64 85       	ldd	r22, Z+12	; 0x0c
    5084:	68 30       	cpi	r22, 0x08	; 8
    5086:	19 f0       	breq	.+6      	; 0x508e <_ZN14EthernetClient9availableEv+0xe>
    5088:	8d e5       	ldi	r24, 0x5D	; 93
    508a:	9c e0       	ldi	r25, 0x0C	; 12
    508c:	d0 c5       	rjmp	.+2976   	; 0x5c2e <_ZN10W5500Class17getRXReceivedSizeEh>
    508e:	80 e0       	ldi	r24, 0x00	; 0
    5090:	90 e0       	ldi	r25, 0x00	; 0
    5092:	08 95       	ret

00005094 <_ZN14EthernetClient4readEv>:
    5094:	cf 93       	push	r28
    5096:	df 93       	push	r29
    5098:	1f 92       	push	r1
    509a:	cd b7       	in	r28, 0x3d	; 61
    509c:	de b7       	in	r29, 0x3e	; 62
    509e:	41 e0       	ldi	r20, 0x01	; 1
    50a0:	50 e0       	ldi	r21, 0x00	; 0
    50a2:	be 01       	movw	r22, r28
    50a4:	6f 5f       	subi	r22, 0xFF	; 255
    50a6:	7f 4f       	sbci	r23, 0xFF	; 255
    50a8:	fc 01       	movw	r30, r24
    50aa:	84 85       	ldd	r24, Z+12	; 0x0c
    50ac:	f7 d3       	rcall	.+2030   	; 0x589c <_Z4recvhPhi>
    50ae:	18 16       	cp	r1, r24
    50b0:	19 06       	cpc	r1, r25
    50b2:	1c f4       	brge	.+6      	; 0x50ba <_ZN14EthernetClient4readEv+0x26>
    50b4:	89 81       	ldd	r24, Y+1	; 0x01
    50b6:	90 e0       	ldi	r25, 0x00	; 0
    50b8:	02 c0       	rjmp	.+4      	; 0x50be <_ZN14EthernetClient4readEv+0x2a>
    50ba:	8f ef       	ldi	r24, 0xFF	; 255
    50bc:	9f ef       	ldi	r25, 0xFF	; 255
    50be:	0f 90       	pop	r0
    50c0:	df 91       	pop	r29
    50c2:	cf 91       	pop	r28
    50c4:	08 95       	ret

000050c6 <_ZN14EthernetClient4readEPhj>:
    50c6:	fc 01       	movw	r30, r24
    50c8:	84 85       	ldd	r24, Z+12	; 0x0c
    50ca:	e8 c3       	rjmp	.+2000   	; 0x589c <_Z4recvhPhi>

000050cc <_ZN14EthernetClient4peekEv>:
    50cc:	0f 93       	push	r16
    50ce:	1f 93       	push	r17
    50d0:	cf 93       	push	r28
    50d2:	df 93       	push	r29
    50d4:	1f 92       	push	r1
    50d6:	cd b7       	in	r28, 0x3d	; 61
    50d8:	de b7       	in	r29, 0x3e	; 62
    50da:	8c 01       	movw	r16, r24
    50dc:	dc 01       	movw	r26, r24
    50de:	ed 91       	ld	r30, X+
    50e0:	fc 91       	ld	r31, X
    50e2:	00 84       	ldd	r0, Z+8	; 0x08
    50e4:	f1 85       	ldd	r31, Z+9	; 0x09
    50e6:	e0 2d       	mov	r30, r0
    50e8:	09 95       	icall
    50ea:	89 2b       	or	r24, r25
    50ec:	49 f0       	breq	.+18     	; 0x5100 <_ZN14EthernetClient4peekEv+0x34>
    50ee:	be 01       	movw	r22, r28
    50f0:	6f 5f       	subi	r22, 0xFF	; 255
    50f2:	7f 4f       	sbci	r23, 0xFF	; 255
    50f4:	f8 01       	movw	r30, r16
    50f6:	84 85       	ldd	r24, Z+12	; 0x0c
    50f8:	12 d4       	rcall	.+2084   	; 0x591e <_Z4peekhPh>
    50fa:	89 81       	ldd	r24, Y+1	; 0x01
    50fc:	90 e0       	ldi	r25, 0x00	; 0
    50fe:	02 c0       	rjmp	.+4      	; 0x5104 <_ZN14EthernetClient4peekEv+0x38>
    5100:	8f ef       	ldi	r24, 0xFF	; 255
    5102:	9f ef       	ldi	r25, 0xFF	; 255
    5104:	0f 90       	pop	r0
    5106:	df 91       	pop	r29
    5108:	cf 91       	pop	r28
    510a:	1f 91       	pop	r17
    510c:	0f 91       	pop	r16
    510e:	08 95       	ret

00005110 <_ZN14EthernetClient5flushEv>:
    5110:	fc 01       	movw	r30, r24
    5112:	84 85       	ldd	r24, Z+12	; 0x0c
    5114:	11 c4       	rjmp	.+2082   	; 0x5938 <_Z5flushh>

00005116 <_ZN14EthernetClientC1Ev>:
    5116:	fc 01       	movw	r30, r24
    5118:	13 82       	std	Z+3, r1	; 0x03
    511a:	12 82       	std	Z+2, r1	; 0x02
    511c:	88 ee       	ldi	r24, 0xE8	; 232
    511e:	93 e0       	ldi	r25, 0x03	; 3
    5120:	a0 e0       	ldi	r26, 0x00	; 0
    5122:	b0 e0       	ldi	r27, 0x00	; 0
    5124:	84 83       	std	Z+4, r24	; 0x04
    5126:	95 83       	std	Z+5, r25	; 0x05
    5128:	a6 83       	std	Z+6, r26	; 0x06
    512a:	b7 83       	std	Z+7, r27	; 0x07
    512c:	89 ed       	ldi	r24, 0xD9	; 217
    512e:	99 e0       	ldi	r25, 0x09	; 9
    5130:	91 83       	std	Z+1, r25	; 0x01
    5132:	80 83       	st	Z, r24
    5134:	88 e0       	ldi	r24, 0x08	; 8
    5136:	84 87       	std	Z+12, r24	; 0x0c
    5138:	08 95       	ret

0000513a <_ZN14EthernetClient6statusEv>:
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
}

uint8_t EthernetClient::status() {
  if (_sock == MAX_SOCK_NUM) return SnSR::CLOSED;
    513a:	fc 01       	movw	r30, r24
    513c:	64 85       	ldd	r22, Z+12	; 0x0c
    513e:	68 30       	cpi	r22, 0x08	; 8
    5140:	39 f0       	breq	.+14     	; 0x5150 <_ZN14EthernetClient6statusEv+0x16>

extern W5500Class w5500;

uint8_t W5500Class::readSn(SOCKET _s, uint16_t _addr) {
    uint8_t cntl_byte = (_s<<5)+0x08;
    return read(_addr, cntl_byte);
    5142:	62 95       	swap	r22
    5144:	66 0f       	add	r22, r22
    5146:	60 7e       	andi	r22, 0xE0	; 224
    5148:	68 5f       	subi	r22, 0xF8	; 248
    514a:	83 e0       	ldi	r24, 0x03	; 3
    514c:	90 e0       	ldi	r25, 0x00	; 0
    514e:	df c4       	rjmp	.+2494   	; 0x5b0e <_ZN10W5500Class4readEjh>
  return w5500.readSnSR(_sock);
}
    5150:	80 e0       	ldi	r24, 0x00	; 0
    5152:	08 95       	ret

00005154 <_ZN14EthernetClient9connectedEv>:

  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
    5154:	cf 93       	push	r28
    5156:	df 93       	push	r29
  if (_sock == MAX_SOCK_NUM) return 0;
    5158:	fc 01       	movw	r30, r24
    515a:	24 85       	ldd	r18, Z+12	; 0x0c
    515c:	28 30       	cpi	r18, 0x08	; 8
    515e:	c9 f0       	breq	.+50     	; 0x5192 <_ZN14EthernetClient9connectedEv+0x3e>
    5160:	ec 01       	movw	r28, r24
  
  uint8_t s = status();
    5162:	eb df       	rcall	.-42     	; 0x513a <_ZN14EthernetClient6statusEv>
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
    5164:	84 31       	cpi	r24, 0x14	; 20
    5166:	81 f0       	breq	.+32     	; 0x5188 <_ZN14EthernetClient9connectedEv+0x34>

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
  
  uint8_t s = status();
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    5168:	88 23       	and	r24, r24
    516a:	71 f0       	breq	.+28     	; 0x5188 <_ZN14EthernetClient9connectedEv+0x34>
    516c:	88 31       	cpi	r24, 0x18	; 24
    516e:	61 f0       	breq	.+24     	; 0x5188 <_ZN14EthernetClient9connectedEv+0x34>
    (s == SnSR::CLOSE_WAIT && !available()));
    5170:	8c 31       	cpi	r24, 0x1C	; 28
    5172:	61 f4       	brne	.+24     	; 0x518c <_ZN14EthernetClient9connectedEv+0x38>
    5174:	e8 81       	ld	r30, Y
    5176:	f9 81       	ldd	r31, Y+1	; 0x01
    5178:	00 84       	ldd	r0, Z+8	; 0x08
    517a:	f1 85       	ldd	r31, Z+9	; 0x09
    517c:	e0 2d       	mov	r30, r0
    517e:	ce 01       	movw	r24, r28
    5180:	09 95       	icall
    5182:	21 e0       	ldi	r18, 0x01	; 1
    5184:	89 2b       	or	r24, r25
    5186:	19 f4       	brne	.+6      	; 0x518e <_ZN14EthernetClient9connectedEv+0x3a>
    5188:	20 e0       	ldi	r18, 0x00	; 0
    518a:	01 c0       	rjmp	.+2      	; 0x518e <_ZN14EthernetClient9connectedEv+0x3a>
    518c:	21 e0       	ldi	r18, 0x01	; 1
    518e:	82 2f       	mov	r24, r18
    5190:	01 c0       	rjmp	.+2      	; 0x5194 <_ZN14EthernetClient9connectedEv+0x40>
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
    5192:	80 e0       	ldi	r24, 0x00	; 0
  
  uint8_t s = status();
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
}
    5194:	df 91       	pop	r29
    5196:	cf 91       	pop	r28
    5198:	08 95       	ret

0000519a <_ZN14EthernetClient4stopEv>:

void EthernetClient::flush() {
  ::flush(_sock);
}

void EthernetClient::stop() {
    519a:	cf 92       	push	r12
    519c:	df 92       	push	r13
    519e:	ef 92       	push	r14
    51a0:	ff 92       	push	r15
    51a2:	cf 93       	push	r28
    51a4:	df 93       	push	r29
    51a6:	ec 01       	movw	r28, r24
  if (_sock == MAX_SOCK_NUM)
    51a8:	8c 85       	ldd	r24, Y+12	; 0x0c
    51aa:	88 30       	cpi	r24, 0x08	; 8
    51ac:	69 f1       	breq	.+90     	; 0x5208 <_ZN14EthernetClient4stopEv+0x6e>
    return;

  // attempt to close the connection gracefully (send a FIN to other side)
  disconnect(_sock);
    51ae:	29 d3       	rcall	.+1618   	; 0x5802 <_Z10disconnecth>
  unsigned long start = millis();
    51b0:	0e 94 54 39 	call	0x72a8	; 0x72a8 <millis>
    51b4:	6b 01       	movw	r12, r22
    51b6:	7c 01       	movw	r14, r24

  // wait a second for the connection to close
  while (status() != SnSR::CLOSED && millis() - start < 1000)
    51b8:	ce 01       	movw	r24, r28
    51ba:	bf df       	rcall	.-130    	; 0x513a <_ZN14EthernetClient6statusEv>
    51bc:	88 23       	and	r24, r24
    51be:	a1 f0       	breq	.+40     	; 0x51e8 <_ZN14EthernetClient4stopEv+0x4e>
    51c0:	0e 94 54 39 	call	0x72a8	; 0x72a8 <millis>
    51c4:	dc 01       	movw	r26, r24
    51c6:	cb 01       	movw	r24, r22
    51c8:	8c 19       	sub	r24, r12
    51ca:	9d 09       	sbc	r25, r13
    51cc:	ae 09       	sbc	r26, r14
    51ce:	bf 09       	sbc	r27, r15
    51d0:	88 3e       	cpi	r24, 0xE8	; 232
    51d2:	93 40       	sbci	r25, 0x03	; 3
    51d4:	a1 05       	cpc	r26, r1
    51d6:	b1 05       	cpc	r27, r1
    51d8:	38 f4       	brcc	.+14     	; 0x51e8 <_ZN14EthernetClient4stopEv+0x4e>
    delay(1);
    51da:	61 e0       	ldi	r22, 0x01	; 1
    51dc:	70 e0       	ldi	r23, 0x00	; 0
    51de:	80 e0       	ldi	r24, 0x00	; 0
    51e0:	90 e0       	ldi	r25, 0x00	; 0
    51e2:	0e 94 85 39 	call	0x730a	; 0x730a <delay>

  // if it hasn't closed, close it forcefully
  if (status() != SnSR::CLOSED)
    51e6:	e8 cf       	rjmp	.-48     	; 0x51b8 <_ZN14EthernetClient4stopEv+0x1e>
    51e8:	ce 01       	movw	r24, r28
    51ea:	a7 df       	rcall	.-178    	; 0x513a <_ZN14EthernetClient6statusEv>
    51ec:	88 23       	and	r24, r24
    close(_sock);
    51ee:	11 f0       	breq	.+4      	; 0x51f4 <_ZN14EthernetClient4stopEv+0x5a>
    51f0:	8c 85       	ldd	r24, Y+12	; 0x0c
    51f2:	96 d2       	rcall	.+1324   	; 0x5720 <_Z5closeh>

  EthernetClass::_server_port[_sock] = 0;
    51f4:	ec 85       	ldd	r30, Y+12	; 0x0c
    51f6:	f0 e0       	ldi	r31, 0x00	; 0
    51f8:	ee 0f       	add	r30, r30
    51fa:	ff 1f       	adc	r31, r31
    51fc:	e0 5d       	subi	r30, 0xD0	; 208
    51fe:	f3 4f       	sbci	r31, 0xF3	; 243
    5200:	11 82       	std	Z+1, r1	; 0x01
    5202:	10 82       	st	Z, r1
  _sock = MAX_SOCK_NUM;
    5204:	88 e0       	ldi	r24, 0x08	; 8
    5206:	8c 87       	std	Y+12, r24	; 0x0c
}
    5208:	df 91       	pop	r29
    520a:	cf 91       	pop	r28
    520c:	ff 90       	pop	r15
    520e:	ef 90       	pop	r14
    5210:	df 90       	pop	r13
    5212:	cf 90       	pop	r12
    5214:	08 95       	ret

00005216 <_ZN14EthernetClient7connectE9IPAddressj>:
  } else {
    return ret;
  }
}

int EthernetClient::connect(IPAddress ip, uint16_t port) {
    5216:	cf 92       	push	r12
    5218:	df 92       	push	r13
    521a:	ff 92       	push	r15
    521c:	0f 93       	push	r16
    521e:	1f 93       	push	r17
    5220:	cf 93       	push	r28
    5222:	df 93       	push	r29
  if (_sock != MAX_SOCK_NUM)
    5224:	fc 01       	movw	r30, r24
    5226:	24 85       	ldd	r18, Z+12	; 0x0c
    5228:	28 30       	cpi	r18, 0x08	; 8
    522a:	c1 f5       	brne	.+112    	; 0x529c <_ZN14EthernetClient7connectE9IPAddressj+0x86>
    522c:	6a 01       	movw	r12, r20
    522e:	8b 01       	movw	r16, r22
    5230:	ec 01       	movw	r28, r24
    5232:	f1 2c       	mov	r15, r1
    5234:	6f 2d       	mov	r22, r15
    5236:	62 95       	swap	r22
    5238:	66 0f       	add	r22, r22
    523a:	60 7e       	andi	r22, 0xE0	; 224
    523c:	68 5f       	subi	r22, 0xF8	; 248
    523e:	83 e0       	ldi	r24, 0x03	; 3
    5240:	90 e0       	ldi	r25, 0x00	; 0
    5242:	65 d4       	rcall	.+2250   	; 0x5b0e <_ZN10W5500Class4readEjh>
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
    5244:	81 11       	cpse	r24, r1
    5246:	02 c0       	rjmp	.+4      	; 0x524c <_ZN14EthernetClient7connectE9IPAddressj+0x36>
      _sock = i;
    5248:	fc 86       	std	Y+12, r15	; 0x0c
    524a:	07 c0       	rjmp	.+14     	; 0x525a <_ZN14EthernetClient7connectE9IPAddressj+0x44>
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
    524c:	8b 7f       	andi	r24, 0xFB	; 251
    524e:	88 31       	cpi	r24, 0x18	; 24
    5250:	d9 f3       	breq	.-10     	; 0x5248 <_ZN14EthernetClient7connectE9IPAddressj+0x32>
    5252:	f3 94       	inc	r15

int EthernetClient::connect(IPAddress ip, uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    5254:	f8 e0       	ldi	r31, 0x08	; 8
    5256:	ff 12       	cpse	r15, r31
    5258:	ed cf       	rjmp	.-38     	; 0x5234 <_ZN14EthernetClient7connectE9IPAddressj+0x1e>
      _sock = i;
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
    525a:	8c 85       	ldd	r24, Y+12	; 0x0c
    525c:	88 30       	cpi	r24, 0x08	; 8
    525e:	f1 f0       	breq	.+60     	; 0x529c <_ZN14EthernetClient7connectE9IPAddressj+0x86>
    return 0;

  _srcport++;
    5260:	20 91 65 01 	lds	r18, 0x0165	; 0x800165 <_ZN14EthernetClient8_srcportE>
    5264:	30 91 66 01 	lds	r19, 0x0166	; 0x800166 <_ZN14EthernetClient8_srcportE+0x1>
    5268:	2f 5f       	subi	r18, 0xFF	; 255
    526a:	3f 4f       	sbci	r19, 0xFF	; 255
  if (_srcport == 0) _srcport = 1024;
    526c:	11 f4       	brne	.+4      	; 0x5272 <_ZN14EthernetClient7connectE9IPAddressj+0x5c>
    526e:	20 e0       	ldi	r18, 0x00	; 0
    5270:	34 e0       	ldi	r19, 0x04	; 4
    5272:	30 93 66 01 	sts	0x0166, r19	; 0x800166 <_ZN14EthernetClient8_srcportE+0x1>
    5276:	20 93 65 01 	sts	0x0165, r18	; 0x800165 <_ZN14EthernetClient8_srcportE>
  socket(_sock, SnMR::TCP, _srcport, 0);
    527a:	40 91 65 01 	lds	r20, 0x0165	; 0x800165 <_ZN14EthernetClient8_srcportE>
    527e:	50 91 66 01 	lds	r21, 0x0166	; 0x800166 <_ZN14EthernetClient8_srcportE+0x1>
    5282:	20 e0       	ldi	r18, 0x00	; 0
    5284:	61 e0       	ldi	r22, 0x01	; 1
    5286:	57 d2       	rcall	.+1198   	; 0x5736 <_Z6sockethhjh>

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    5288:	b8 01       	movw	r22, r16
    528a:	6e 5f       	subi	r22, 0xFE	; 254
    528c:	7f 4f       	sbci	r23, 0xFF	; 255

  if (!::connect(_sock, rawIPAddress(ip), port)) {
    528e:	a6 01       	movw	r20, r12
    5290:	8c 85       	ldd	r24, Y+12	; 0x0c
    5292:	84 d2       	rcall	.+1288   	; 0x579c <_Z7connecthPhj>
    5294:	81 11       	cpse	r24, r1
    5296:	05 c0       	rjmp	.+10     	; 0x52a2 <_ZN14EthernetClient7connectE9IPAddressj+0x8c>
    _sock = MAX_SOCK_NUM;
    5298:	88 e0       	ldi	r24, 0x08	; 8
    529a:	8c 87       	std	Y+12, r24	; 0x0c
    return 0;
    529c:	80 e0       	ldi	r24, 0x00	; 0
    529e:	90 e0       	ldi	r25, 0x00	; 0
  }

  while (status() != SnSR::ESTABLISHED) {
    52a0:	0f c0       	rjmp	.+30     	; 0x52c0 <_ZN14EthernetClient7connectE9IPAddressj+0xaa>
    52a2:	ce 01       	movw	r24, r28
    52a4:	4a df       	rcall	.-364    	; 0x513a <_ZN14EthernetClient6statusEv>
    52a6:	87 31       	cpi	r24, 0x17	; 23
    52a8:	49 f0       	breq	.+18     	; 0x52bc <_ZN14EthernetClient7connectE9IPAddressj+0xa6>
    delay(1);
    52aa:	61 e0       	ldi	r22, 0x01	; 1
    52ac:	70 e0       	ldi	r23, 0x00	; 0
    52ae:	80 e0       	ldi	r24, 0x00	; 0
    52b0:	90 e0       	ldi	r25, 0x00	; 0
    52b2:	0e 94 85 39 	call	0x730a	; 0x730a <delay>
    if (status() == SnSR::CLOSED) {
    52b6:	ce 01       	movw	r24, r28
    52b8:	40 df       	rcall	.-384    	; 0x513a <_ZN14EthernetClient6statusEv>
    52ba:	ec cf       	rjmp	.-40     	; 0x5294 <_ZN14EthernetClient7connectE9IPAddressj+0x7e>
      _sock = MAX_SOCK_NUM;
      return 0;
    }
  }

  return 1;
    52bc:	81 e0       	ldi	r24, 0x01	; 1
    52be:	90 e0       	ldi	r25, 0x00	; 0
}
    52c0:	df 91       	pop	r29
    52c2:	cf 91       	pop	r28
    52c4:	1f 91       	pop	r17
    52c6:	0f 91       	pop	r16
    52c8:	ff 90       	pop	r15
    52ca:	df 90       	pop	r13
    52cc:	cf 90       	pop	r12
    52ce:	08 95       	ret

000052d0 <_GLOBAL__sub_I__ZN14EthernetClient8_srcportE>:
  return _sock != MAX_SOCK_NUM;
}

bool EthernetClient::operator==(const EthernetClient& rhs) {
  return _sock == rhs._sock && _sock != MAX_SOCK_NUM && rhs._sock != MAX_SOCK_NUM;
}
    52d0:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    52d2:	00 e0       	ldi	r16, 0x00	; 0
    52d4:	20 e0       	ldi	r18, 0x00	; 0
    52d6:	40 e0       	ldi	r20, 0x00	; 0
    52d8:	60 e0       	ldi	r22, 0x00	; 0
    52da:	86 e4       	ldi	r24, 0x46	; 70
    52dc:	9c e0       	ldi	r25, 0x0C	; 12
    52de:	0e 94 ce 37 	call	0x6f9c	; 0x6f9c <_ZN9IPAddressC1Ehhhh>
    52e2:	0f 91       	pop	r16
    52e4:	08 95       	ret

000052e6 <_GLOBAL__sub_I__ZN14EthernetServerC2Ej>:
      n += client.write(buffer, size);
    }
  }
  
  return n;
}
    52e6:	0f 93       	push	r16
    52e8:	00 e0       	ldi	r16, 0x00	; 0
    52ea:	20 e0       	ldi	r18, 0x00	; 0
    52ec:	40 e0       	ldi	r20, 0x00	; 0
    52ee:	60 e0       	ldi	r22, 0x00	; 0
    52f0:	8c e4       	ldi	r24, 0x4C	; 76
    52f2:	9c e0       	ldi	r25, 0x0C	; 12
    52f4:	0e 94 ce 37 	call	0x6f9c	; 0x6f9c <_ZN9IPAddressC1Ehhhh>
    52f8:	0f 91       	pop	r16
    52fa:	08 95       	ret

000052fc <_ZN3UDP14beginMulticastE9IPAddressj>:

class UDP : public Stream {

public:
  virtual uint8_t begin(uint16_t) =0;  // initialize, start listening on specified port. Returns 1 if successful, 0 if there are no sockets available to use
  virtual uint8_t beginMulticast(IPAddress, uint16_t) { return 0; }  // initialize, start listening on specified multicast IP address and port. Returns 1 if successful, 0 on failure
    52fc:	80 e0       	ldi	r24, 0x00	; 0
    52fe:	08 95       	ret

00005300 <_ZN11EthernetUDP4readEPcj>:
  // Read up to len bytes from the current packet and place them into buffer
  // Returns the number of bytes read, or 0 if none are available
  virtual int read(unsigned char* buffer, size_t len);
  // Read up to len characters from the current packet and place them into buffer
  // Returns the number of characters read, or 0 if none are available
  virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
    5300:	dc 01       	movw	r26, r24
    5302:	ed 91       	ld	r30, X+
    5304:	fc 91       	ld	r31, X
    5306:	04 8c       	ldd	r0, Z+28	; 0x1c
    5308:	f5 8d       	ldd	r31, Z+29	; 0x1d
    530a:	e0 2d       	mov	r30, r0
    530c:	09 94       	ijmp

0000530e <_ZN11EthernetUDP8remoteIPEv>:
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    530e:	2d e5       	ldi	r18, 0x5D	; 93
    5310:	3a e0       	ldi	r19, 0x0A	; 10
    5312:	fc 01       	movw	r30, r24
    5314:	31 83       	std	Z+1, r19	; 0x01
    5316:	20 83       	st	Z, r18
    5318:	fb 01       	movw	r30, r22
    531a:	41 89       	ldd	r20, Z+17	; 0x11
    531c:	52 89       	ldd	r21, Z+18	; 0x12
    531e:	63 89       	ldd	r22, Z+19	; 0x13
    5320:	74 89       	ldd	r23, Z+20	; 0x14
    5322:	fc 01       	movw	r30, r24
    5324:	42 83       	std	Z+2, r20	; 0x02
    5326:	53 83       	std	Z+3, r21	; 0x03
    5328:	64 83       	std	Z+4, r22	; 0x04
    532a:	75 83       	std	Z+5, r23	; 0x05
  // Return the next byte from the current packet without moving on to the next byte
  virtual int peek();
  virtual void flush();	// Finish reading the current packet

  // Return the IP address of the host who sent the current incoming packet
  virtual IPAddress remoteIP() { return _remoteIP; };
    532c:	08 95       	ret

0000532e <_ZN11EthernetUDP10remotePortEv>:
  // Return the port of the host who sent the current incoming packet
  virtual uint16_t remotePort() { return _remotePort; };
    532e:	fc 01       	movw	r30, r24
    5330:	85 89       	ldd	r24, Z+21	; 0x15
    5332:	96 89       	ldd	r25, Z+22	; 0x16
    5334:	08 95       	ret

00005336 <_ZN11EthernetUDP9availableEv>:

/* return number of bytes available in the current packet,
   will return zero if parsePacket hasn't been called yet */
int EthernetUDP::available() {
  return _remaining;
}
    5336:	fc 01       	movw	r30, r24
    5338:	81 8d       	ldd	r24, Z+25	; 0x19
    533a:	92 8d       	ldd	r25, Z+26	; 0x1a
    533c:	08 95       	ret

0000533e <_ZN11EthernetUDP5writeEh>:
{
  return sendUDP(_sock);
}

size_t EthernetUDP::write(uint8_t byte)
{
    533e:	cf 93       	push	r28
    5340:	df 93       	push	r29
    5342:	1f 92       	push	r1
    5344:	cd b7       	in	r28, 0x3d	; 61
    5346:	de b7       	in	r29, 0x3e	; 62
    5348:	69 83       	std	Y+1, r22	; 0x01
  return write(&byte, 1);
    534a:	dc 01       	movw	r26, r24
    534c:	ed 91       	ld	r30, X+
    534e:	fc 91       	ld	r31, X
    5350:	02 80       	ldd	r0, Z+2	; 0x02
    5352:	f3 81       	ldd	r31, Z+3	; 0x03
    5354:	e0 2d       	mov	r30, r0
    5356:	41 e0       	ldi	r20, 0x01	; 1
    5358:	50 e0       	ldi	r21, 0x00	; 0
    535a:	be 01       	movw	r22, r28
    535c:	6f 5f       	subi	r22, 0xFF	; 255
    535e:	7f 4f       	sbci	r23, 0xFF	; 255
    5360:	09 95       	icall
}
    5362:	0f 90       	pop	r0
    5364:	df 91       	pop	r29
    5366:	cf 91       	pop	r28
    5368:	08 95       	ret

0000536a <_ZN11EthernetUDP5flushEv>:
  ::peek(_sock, &b);
  return b;
}

void EthernetUDP::flush()
{
    536a:	cf 93       	push	r28
    536c:	df 93       	push	r29
    536e:	ec 01       	movw	r28, r24
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5500 always behaves :)

  while (_remaining)
    5370:	89 8d       	ldd	r24, Y+25	; 0x19
    5372:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5374:	89 2b       	or	r24, r25
    5376:	41 f0       	breq	.+16     	; 0x5388 <_ZN11EthernetUDP5flushEv+0x1e>
  {
    read();
    5378:	e8 81       	ld	r30, Y
    537a:	f9 81       	ldd	r31, Y+1	; 0x01
    537c:	02 84       	ldd	r0, Z+10	; 0x0a
    537e:	f3 85       	ldd	r31, Z+11	; 0x0b
    5380:	e0 2d       	mov	r30, r0
    5382:	ce 01       	movw	r24, r28
    5384:	09 95       	icall
{
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5500 always behaves :)

  while (_remaining)
    5386:	f4 cf       	rjmp	.-24     	; 0x5370 <_ZN11EthernetUDP5flushEv+0x6>
  {
    read();
  }
}
    5388:	df 91       	pop	r29
    538a:	cf 91       	pop	r28
    538c:	08 95       	ret

0000538e <_ZN11EthernetUDP4stopEv>:
  return _remaining;
}

/* Release any resources being used by this EthernetUDP instance */
void EthernetUDP::stop()
{
    538e:	cf 93       	push	r28
    5390:	df 93       	push	r29
    5392:	ec 01       	movw	r28, r24
  if (_sock == MAX_SOCK_NUM)
    5394:	8c 85       	ldd	r24, Y+12	; 0x0c
    5396:	88 30       	cpi	r24, 0x08	; 8
    5398:	59 f0       	breq	.+22     	; 0x53b0 <_ZN11EthernetUDP4stopEv+0x22>
    return;

  close(_sock);
    539a:	c2 d1       	rcall	.+900    	; 0x5720 <_Z5closeh>

  EthernetClass::_server_port[_sock] = 0;
    539c:	ec 85       	ldd	r30, Y+12	; 0x0c
    539e:	f0 e0       	ldi	r31, 0x00	; 0
    53a0:	ee 0f       	add	r30, r30
    53a2:	ff 1f       	adc	r31, r31
    53a4:	e0 5d       	subi	r30, 0xD0	; 208
    53a6:	f3 4f       	sbci	r31, 0xF3	; 243
    53a8:	11 82       	std	Z+1, r1	; 0x01
    53aa:	10 82       	st	Z, r1
  _sock = MAX_SOCK_NUM;
    53ac:	88 e0       	ldi	r24, 0x08	; 8
    53ae:	8c 87       	std	Y+12, r24	; 0x0c
}
    53b0:	df 91       	pop	r29
    53b2:	cf 91       	pop	r28
    53b4:	08 95       	ret

000053b6 <_ZN11EthernetUDP11beginPacketE9IPAddressj>:
  }
}

int EthernetUDP::beginPacket(IPAddress ip, uint16_t port)
{
  _offset = 0;
    53b6:	fc 01       	movw	r30, r24
    53b8:	10 8e       	std	Z+24, r1	; 0x18
    53ba:	17 8a       	std	Z+23, r1	; 0x17

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    53bc:	6e 5f       	subi	r22, 0xFE	; 254
    53be:	7f 4f       	sbci	r23, 0xFF	; 255
  return startUDP(_sock, rawIPAddress(ip), port);
    53c0:	84 85       	ldd	r24, Z+12	; 0x0c
    53c2:	e6 c2       	rjmp	.+1484   	; 0x5990 <_Z8startUDPhPhj>

000053c4 <_ZN11EthernetUDP9endPacketEv>:
}

int EthernetUDP::endPacket()
{
  return sendUDP(_sock);
    53c4:	fc 01       	movw	r30, r24
    53c6:	84 85       	ldd	r24, Z+12	; 0x0c
    53c8:	06 c3       	rjmp	.+1548   	; 0x59d6 <_Z7sendUDPh>

000053ca <_ZN11EthernetUDP5writeEPKhj>:
{
  return write(&byte, 1);
}

size_t EthernetUDP::write(const uint8_t *buffer, size_t size)
{
    53ca:	cf 93       	push	r28
    53cc:	df 93       	push	r29
    53ce:	ec 01       	movw	r28, r24
    53d0:	9a 01       	movw	r18, r20
  uint16_t bytes_written = bufferData(_sock, _offset, buffer, size);
    53d2:	8f 89       	ldd	r24, Y+23	; 0x17
    53d4:	98 8d       	ldd	r25, Y+24	; 0x18
    53d6:	ab 01       	movw	r20, r22
    53d8:	bc 01       	movw	r22, r24
    53da:	8c 85       	ldd	r24, Y+12	; 0x0c
    53dc:	ae d2       	rcall	.+1372   	; 0x593a <_Z10bufferDatahjPKhj>
  _offset += bytes_written;
    53de:	2f 89       	ldd	r18, Y+23	; 0x17
    53e0:	38 8d       	ldd	r19, Y+24	; 0x18
    53e2:	28 0f       	add	r18, r24
    53e4:	39 1f       	adc	r19, r25
    53e6:	38 8f       	std	Y+24, r19	; 0x18
    53e8:	2f 8b       	std	Y+23, r18	; 0x17
  return bytes_written;
}
    53ea:	df 91       	pop	r29
    53ec:	cf 91       	pop	r28
    53ee:	08 95       	ret

000053f0 <_ZN11EthernetUDP4readEv>:
  // There aren't any packets available
  return 0;
}

int EthernetUDP::read()
{
    53f0:	0f 93       	push	r16
    53f2:	1f 93       	push	r17
    53f4:	cf 93       	push	r28
    53f6:	df 93       	push	r29
    53f8:	1f 92       	push	r1
    53fa:	cd b7       	in	r28, 0x3d	; 61
    53fc:	de b7       	in	r29, 0x3e	; 62
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
    53fe:	fc 01       	movw	r30, r24
    5400:	21 8d       	ldd	r18, Z+25	; 0x19
    5402:	32 8d       	ldd	r19, Z+26	; 0x1a
    5404:	23 2b       	or	r18, r19
    5406:	59 f0       	breq	.+22     	; 0x541e <_ZN11EthernetUDP4readEv+0x2e>
    5408:	8c 01       	movw	r16, r24
    540a:	41 e0       	ldi	r20, 0x01	; 1
    540c:	50 e0       	ldi	r21, 0x00	; 0
    540e:	be 01       	movw	r22, r28
    5410:	6f 5f       	subi	r22, 0xFF	; 255
    5412:	7f 4f       	sbci	r23, 0xFF	; 255
    5414:	84 85       	ldd	r24, Z+12	; 0x0c
    5416:	42 d2       	rcall	.+1156   	; 0x589c <_Z4recvhPhi>
    5418:	18 16       	cp	r1, r24
    541a:	19 06       	cpc	r1, r25
    541c:	1c f0       	brlt	.+6      	; 0x5424 <_ZN11EthernetUDP4readEv+0x34>
    _remaining--;
    return byte;
  }

  // If we get here, there's no data available
  return -1;
    541e:	8f ef       	ldi	r24, 0xFF	; 255
    5420:	9f ef       	ldi	r25, 0xFF	; 255
    5422:	08 c0       	rjmp	.+16     	; 0x5434 <_ZN11EthernetUDP4readEv+0x44>
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
  {
    // We read things without any problems
    _remaining--;
    5424:	f8 01       	movw	r30, r16
    5426:	81 8d       	ldd	r24, Z+25	; 0x19
    5428:	92 8d       	ldd	r25, Z+26	; 0x1a
    542a:	01 97       	sbiw	r24, 0x01	; 1
    542c:	92 8f       	std	Z+26, r25	; 0x1a
    542e:	81 8f       	std	Z+25, r24	; 0x19
    return byte;
    5430:	89 81       	ldd	r24, Y+1	; 0x01
    5432:	90 e0       	ldi	r25, 0x00	; 0
  }

  // If we get here, there's no data available
  return -1;
}
    5434:	0f 90       	pop	r0
    5436:	df 91       	pop	r29
    5438:	cf 91       	pop	r28
    543a:	1f 91       	pop	r17
    543c:	0f 91       	pop	r16
    543e:	08 95       	ret

00005440 <_ZN11EthernetUDP4readEPhj>:

int EthernetUDP::read(unsigned char* buffer, size_t len)
{
    5440:	cf 93       	push	r28
    5442:	df 93       	push	r29

  if (_remaining > 0)
    5444:	fc 01       	movw	r30, r24
    5446:	21 8d       	ldd	r18, Z+25	; 0x19
    5448:	32 8d       	ldd	r19, Z+26	; 0x1a
    544a:	21 15       	cp	r18, r1
    544c:	31 05       	cpc	r19, r1
    544e:	19 f4       	brne	.+6      	; 0x5456 <_ZN11EthernetUDP4readEPhj+0x16>
    }

  }

  // If we get here, there's no data available or recv failed
  return -1;
    5450:	8f ef       	ldi	r24, 0xFF	; 255
    5452:	9f ef       	ldi	r25, 0xFF	; 255
    5454:	10 c0       	rjmp	.+32     	; 0x5476 <_ZN11EthernetUDP4readEPhj+0x36>
    5456:	ec 01       	movw	r28, r24
  if (_remaining > 0)
  {

    int got;

    if (_remaining <= len)
    5458:	42 17       	cp	r20, r18
    545a:	53 07       	cpc	r21, r19
    545c:	08 f0       	brcs	.+2      	; 0x5460 <_ZN11EthernetUDP4readEPhj+0x20>
    {
      // data should fit in the buffer
      got = recv(_sock, buffer, _remaining);
    545e:	a9 01       	movw	r20, r18
    }
    else
    {
      // too much data for the buffer, 
      // grab as much as will fit
      got = recv(_sock, buffer, len);
    5460:	8c 85       	ldd	r24, Y+12	; 0x0c
    5462:	1c d2       	rcall	.+1080   	; 0x589c <_Z4recvhPhi>
    }

    if (got > 0)
    5464:	18 16       	cp	r1, r24
    5466:	19 06       	cpc	r1, r25
    5468:	9c f7       	brge	.-26     	; 0x5450 <_ZN11EthernetUDP4readEPhj+0x10>
    {
      _remaining -= got;
    546a:	29 8d       	ldd	r18, Y+25	; 0x19
    546c:	3a 8d       	ldd	r19, Y+26	; 0x1a
    546e:	28 1b       	sub	r18, r24
    5470:	39 0b       	sbc	r19, r25
    5472:	3a 8f       	std	Y+26, r19	; 0x1a
    5474:	29 8f       	std	Y+25, r18	; 0x19
  }

  // If we get here, there's no data available or recv failed
  return -1;

}
    5476:	df 91       	pop	r29
    5478:	cf 91       	pop	r28
    547a:	08 95       	ret

0000547c <_ZN11EthernetUDP4peekEv>:

int EthernetUDP::peek()
{
    547c:	cf 93       	push	r28
    547e:	df 93       	push	r29
    5480:	1f 92       	push	r1
    5482:	cd b7       	in	r28, 0x3d	; 61
    5484:	de b7       	in	r29, 0x3e	; 62
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
    5486:	fc 01       	movw	r30, r24
    5488:	21 8d       	ldd	r18, Z+25	; 0x19
    548a:	32 8d       	ldd	r19, Z+26	; 0x1a
    548c:	23 2b       	or	r18, r19
    548e:	41 f0       	breq	.+16     	; 0x54a0 <_ZN11EthernetUDP4peekEv+0x24>
    return -1;
  ::peek(_sock, &b);
    5490:	be 01       	movw	r22, r28
    5492:	6f 5f       	subi	r22, 0xFF	; 255
    5494:	7f 4f       	sbci	r23, 0xFF	; 255
    5496:	84 85       	ldd	r24, Z+12	; 0x0c
    5498:	42 d2       	rcall	.+1156   	; 0x591e <_Z4peekhPh>
  return b;
    549a:	89 81       	ldd	r24, Y+1	; 0x01
    549c:	90 e0       	ldi	r25, 0x00	; 0
    549e:	02 c0       	rjmp	.+4      	; 0x54a4 <_ZN11EthernetUDP4peekEv+0x28>
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
    return -1;
    54a0:	8f ef       	ldi	r24, 0xFF	; 255
    54a2:	9f ef       	ldi	r25, 0xFF	; 255
  ::peek(_sock, &b);
  return b;
}
    54a4:	0f 90       	pop	r0
    54a6:	df 91       	pop	r29
    54a8:	cf 91       	pop	r28
    54aa:	08 95       	ret

000054ac <_ZN11EthernetUDP5beginEj>:

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
    54ac:	ef 92       	push	r14
    54ae:	ff 92       	push	r15
    54b0:	1f 93       	push	r17
    54b2:	cf 93       	push	r28
    54b4:	df 93       	push	r29
  if (_sock != MAX_SOCK_NUM)
    54b6:	fc 01       	movw	r30, r24
    54b8:	24 85       	ldd	r18, Z+12	; 0x0c
    54ba:	28 30       	cpi	r18, 0x08	; 8
    54bc:	11 f0       	breq	.+4      	; 0x54c2 <_ZN11EthernetUDP5beginEj+0x16>
    return 0;
    54be:	80 e0       	ldi	r24, 0x00	; 0
    54c0:	20 c0       	rjmp	.+64     	; 0x5502 <_ZN11EthernetUDP5beginEj+0x56>
    54c2:	7b 01       	movw	r14, r22
    54c4:	ec 01       	movw	r28, r24
    54c6:	10 e0       	ldi	r17, 0x00	; 0
    54c8:	61 2f       	mov	r22, r17
    54ca:	62 95       	swap	r22
    54cc:	66 0f       	add	r22, r22
    54ce:	60 7e       	andi	r22, 0xE0	; 224
    54d0:	68 5f       	subi	r22, 0xF8	; 248
    54d2:	83 e0       	ldi	r24, 0x03	; 3
    54d4:	90 e0       	ldi	r25, 0x00	; 0
    54d6:	1b d3       	rcall	.+1590   	; 0x5b0e <_ZN10W5500Class4readEjh>

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
    54d8:	81 11       	cpse	r24, r1
    54da:	02 c0       	rjmp	.+4      	; 0x54e0 <_ZN11EthernetUDP5beginEj+0x34>
      _sock = i;
    54dc:	1c 87       	std	Y+12, r17	; 0x0c
    54de:	05 c0       	rjmp	.+10     	; 0x54ea <_ZN11EthernetUDP5beginEj+0x3e>
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
    54e0:	88 31       	cpi	r24, 0x18	; 24
    54e2:	e1 f3       	breq	.-8      	; 0x54dc <_ZN11EthernetUDP5beginEj+0x30>
    54e4:	1f 5f       	subi	r17, 0xFF	; 255
/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    54e6:	18 30       	cpi	r17, 0x08	; 8
    54e8:	79 f7       	brne	.-34     	; 0x54c8 <_ZN11EthernetUDP5beginEj+0x1c>
      _sock = i;
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
    54ea:	8c 85       	ldd	r24, Y+12	; 0x0c
    54ec:	88 30       	cpi	r24, 0x08	; 8
    54ee:	39 f3       	breq	.-50     	; 0x54be <_ZN11EthernetUDP5beginEj+0x12>
    return 0;

  _port = port;
    54f0:	fe 86       	std	Y+14, r15	; 0x0e
    54f2:	ed 86       	std	Y+13, r14	; 0x0d
  _remaining = 0;
    54f4:	1a 8e       	std	Y+26, r1	; 0x1a
    54f6:	19 8e       	std	Y+25, r1	; 0x19
  socket(_sock, SnMR::UDP, _port, 0);
    54f8:	20 e0       	ldi	r18, 0x00	; 0
    54fa:	a7 01       	movw	r20, r14
    54fc:	62 e0       	ldi	r22, 0x02	; 2
    54fe:	1b d1       	rcall	.+566    	; 0x5736 <_Z6sockethhjh>

  return 1;
    5500:	81 e0       	ldi	r24, 0x01	; 1
}
    5502:	df 91       	pop	r29
    5504:	cf 91       	pop	r28
    5506:	1f 91       	pop	r17
    5508:	ff 90       	pop	r15
    550a:	ef 90       	pop	r14
    550c:	08 95       	ret

0000550e <_ZN11EthernetUDP11parsePacketEv>:
  _offset += bytes_written;
  return bytes_written;
}

int EthernetUDP::parsePacket()
{
    550e:	0f 93       	push	r16
    5510:	1f 93       	push	r17
    5512:	cf 93       	push	r28
    5514:	df 93       	push	r29
    5516:	cd b7       	in	r28, 0x3d	; 61
    5518:	de b7       	in	r29, 0x3e	; 62
    551a:	28 97       	sbiw	r28, 0x08	; 8
    551c:	0f b6       	in	r0, 0x3f	; 63
    551e:	f8 94       	cli
    5520:	de bf       	out	0x3e, r29	; 62
    5522:	0f be       	out	0x3f, r0	; 63
    5524:	cd bf       	out	0x3d, r28	; 61
    5526:	8c 01       	movw	r16, r24
  // discard any remaining bytes in the last packet
  flush();
    5528:	dc 01       	movw	r26, r24
    552a:	ed 91       	ld	r30, X+
    552c:	fc 91       	ld	r31, X
    552e:	06 80       	ldd	r0, Z+6	; 0x06
    5530:	f7 81       	ldd	r31, Z+7	; 0x07
    5532:	e0 2d       	mov	r30, r0
    5534:	09 95       	icall

  if (w5500.getRXReceivedSize(_sock) > 0)
    5536:	f8 01       	movw	r30, r16
    5538:	64 85       	ldd	r22, Z+12	; 0x0c
    553a:	8d e5       	ldi	r24, 0x5D	; 93
    553c:	9c e0       	ldi	r25, 0x0C	; 12
    553e:	77 d3       	rcall	.+1774   	; 0x5c2e <_ZN10W5500Class17getRXReceivedSizeEh>
    5540:	89 2b       	or	r24, r25
    5542:	39 f1       	breq	.+78     	; 0x5592 <_ZN11EthernetUDP11parsePacketEv+0x84>
  {
    //HACK - hand-parse the UDP packet using TCP recv method
    uint8_t tmpBuf[8];
    int ret =0; 
    //read 8 header bytes and get IP and port from it
    ret = recv(_sock,tmpBuf,8);
    5544:	48 e0       	ldi	r20, 0x08	; 8
    5546:	50 e0       	ldi	r21, 0x00	; 0
    5548:	be 01       	movw	r22, r28
    554a:	6f 5f       	subi	r22, 0xFF	; 255
    554c:	7f 4f       	sbci	r23, 0xFF	; 255
    554e:	d8 01       	movw	r26, r16
    5550:	1c 96       	adiw	r26, 0x0c	; 12
    5552:	8c 91       	ld	r24, X
    5554:	a3 d1       	rcall	.+838    	; 0x589c <_Z4recvhPhi>
    if (ret > 0)
    5556:	18 16       	cp	r1, r24
    5558:	19 06       	cpc	r1, r25
    555a:	ec f4       	brge	.+58     	; 0x5596 <_ZN11EthernetUDP11parsePacketEv+0x88>
    {
      _remoteIP = tmpBuf;
    555c:	be 01       	movw	r22, r28
    555e:	6f 5f       	subi	r22, 0xFF	; 255
    5560:	7f 4f       	sbci	r23, 0xFF	; 255
    5562:	c8 01       	movw	r24, r16
    5564:	0f 96       	adiw	r24, 0x0f	; 15
    5566:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <_ZN9IPAddressaSEPKh>
      _remotePort = tmpBuf[4];
      _remotePort = (_remotePort << 8) + tmpBuf[5];
    556a:	8d 81       	ldd	r24, Y+5	; 0x05
    556c:	90 e0       	ldi	r25, 0x00	; 0
    556e:	98 2f       	mov	r25, r24
    5570:	88 27       	eor	r24, r24
    5572:	2e 81       	ldd	r18, Y+6	; 0x06
    5574:	82 0f       	add	r24, r18
    5576:	91 1d       	adc	r25, r1
    5578:	f8 01       	movw	r30, r16
    557a:	96 8b       	std	Z+22, r25	; 0x16
    557c:	85 8b       	std	Z+21, r24	; 0x15
      _remaining = tmpBuf[6];
      _remaining = (_remaining << 8) + tmpBuf[7];
    557e:	8f 81       	ldd	r24, Y+7	; 0x07
    5580:	90 e0       	ldi	r25, 0x00	; 0
    5582:	98 2f       	mov	r25, r24
    5584:	88 27       	eor	r24, r24
    5586:	28 85       	ldd	r18, Y+8	; 0x08
    5588:	82 0f       	add	r24, r18
    558a:	91 1d       	adc	r25, r1
    558c:	92 8f       	std	Z+26, r25	; 0x1a
    558e:	81 8f       	std	Z+25, r24	; 0x19
    5590:	02 c0       	rjmp	.+4      	; 0x5596 <_ZN11EthernetUDP11parsePacketEv+0x88>
      ret = _remaining;
    }
    return ret;
  }
  // There aren't any packets available
  return 0;
    5592:	80 e0       	ldi	r24, 0x00	; 0
    5594:	90 e0       	ldi	r25, 0x00	; 0
}
    5596:	28 96       	adiw	r28, 0x08	; 8
    5598:	0f b6       	in	r0, 0x3f	; 63
    559a:	f8 94       	cli
    559c:	de bf       	out	0x3e, r29	; 62
    559e:	0f be       	out	0x3f, r0	; 63
    55a0:	cd bf       	out	0x3d, r28	; 61
    55a2:	df 91       	pop	r29
    55a4:	cf 91       	pop	r28
    55a6:	1f 91       	pop	r17
    55a8:	0f 91       	pop	r16
    55aa:	08 95       	ret

000055ac <_ZN11EthernetUDPC1Ev>:
#include "Ethernet2.h"
#include "Udp.h"
#include "Dns.h"

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}
    55ac:	fc 01       	movw	r30, r24
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    55ae:	13 82       	std	Z+3, r1	; 0x03
    55b0:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    55b2:	88 ee       	ldi	r24, 0xE8	; 232
    55b4:	93 e0       	ldi	r25, 0x03	; 3
    55b6:	a0 e0       	ldi	r26, 0x00	; 0
    55b8:	b0 e0       	ldi	r27, 0x00	; 0
    55ba:	84 83       	std	Z+4, r24	; 0x04
    55bc:	95 83       	std	Z+5, r25	; 0x05
    55be:	a6 83       	std	Z+6, r26	; 0x06
    55c0:	b7 83       	std	Z+7, r27	; 0x07
    55c2:	8b ef       	ldi	r24, 0xFB	; 251
    55c4:	99 e0       	ldi	r25, 0x09	; 9
    55c6:	91 83       	std	Z+1, r25	; 0x01
    55c8:	80 83       	st	Z, r24
    55ca:	88 e0       	ldi	r24, 0x08	; 8
    55cc:	84 87       	std	Z+12, r24	; 0x0c
    55ce:	cf 01       	movw	r24, r30
    55d0:	0f 96       	adiw	r24, 0x0f	; 15
    55d2:	0c 94 c4 37 	jmp	0x6f88	; 0x6f88 <_ZN9IPAddressC1Ev>

000055d6 <_ZN11EthernetUDP11beginPacketEPKcj>:
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

int EthernetUDP::beginPacket(const char *host, uint16_t port)
{
    55d6:	cf 92       	push	r12
    55d8:	df 92       	push	r13
    55da:	ef 92       	push	r14
    55dc:	ff 92       	push	r15
    55de:	0f 93       	push	r16
    55e0:	1f 93       	push	r17
    55e2:	cf 93       	push	r28
    55e4:	df 93       	push	r29
    55e6:	cd b7       	in	r28, 0x3d	; 61
    55e8:	de b7       	in	r29, 0x3e	; 62
    55ea:	af 97       	sbiw	r28, 0x2f	; 47
    55ec:	0f b6       	in	r0, 0x3f	; 63
    55ee:	f8 94       	cli
    55f0:	de bf       	out	0x3e, r29	; 62
    55f2:	0f be       	out	0x3f, r0	; 63
    55f4:	cd bf       	out	0x3d, r28	; 61
    55f6:	8c 01       	movw	r16, r24
    55f8:	6b 01       	movw	r12, r22
    55fa:	7a 01       	movw	r14, r20
#ifndef DNSClient_h
#define DNSClient_h

#include <EthernetUdp2.h>

class DNSClient
    55fc:	ce 01       	movw	r24, r28
    55fe:	01 96       	adiw	r24, 0x01	; 1
    5600:	0e 94 c4 37 	call	0x6f88	; 0x6f88 <_ZN9IPAddressC1Ev>
    5604:	ce 01       	movw	r24, r28
    5606:	09 96       	adiw	r24, 0x09	; 9
    5608:	d1 df       	rcall	.-94     	; 0x55ac <_ZN11EthernetUDPC1Ev>
  // Look up the host first
  int ret = 0;
  DNSClient dns;
  IPAddress remote_addr;
    560a:	ce 01       	movw	r24, r28
    560c:	8a 96       	adiw	r24, 0x2a	; 42
    560e:	0e 94 c4 37 	call	0x6f88	; 0x6f88 <_ZN9IPAddressC1Ev>

  dns.begin(Ethernet.dnsServerIP());
    5612:	63 e2       	ldi	r22, 0x23	; 35
    5614:	7c e0       	ldi	r23, 0x0C	; 12
    5616:	ce 01       	movw	r24, r28
    5618:	84 96       	adiw	r24, 0x24	; 36
    561a:	63 dc       	rcall	.-1850   	; 0x4ee2 <_ZN13EthernetClass11dnsServerIPEv>
    561c:	be 01       	movw	r22, r28
    561e:	6c 5d       	subi	r22, 0xDC	; 220
    5620:	7f 4f       	sbci	r23, 0xFF	; 255
    5622:	ce 01       	movw	r24, r28
    5624:	01 96       	adiw	r24, 0x01	; 1
    5626:	28 d9       	rcall	.-3504   	; 0x4878 <_ZN9DNSClient5beginERK9IPAddress>
  ret = dns.getHostByName(host, remote_addr);
    5628:	ae 01       	movw	r20, r28
    562a:	46 5d       	subi	r20, 0xD6	; 214
    562c:	5f 4f       	sbci	r21, 0xFF	; 255
    562e:	b6 01       	movw	r22, r12
    5630:	ce 01       	movw	r24, r28
    5632:	01 96       	adiw	r24, 0x01	; 1
    5634:	7b db       	rcall	.-2314   	; 0x4d2c <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>
  if (ret == 1) {
    5636:	81 30       	cpi	r24, 0x01	; 1
    5638:	91 05       	cpc	r25, r1
    563a:	c1 f4       	brne	.+48     	; 0x566c <_ZN11EthernetUDP11beginPacketEPKcj+0x96>
    return beginPacket(remote_addr, port);
    563c:	d8 01       	movw	r26, r16
    563e:	ed 91       	ld	r30, X+
    5640:	fc 91       	ld	r31, X
    5642:	04 88       	ldd	r0, Z+20	; 0x14
    5644:	f5 89       	ldd	r31, Z+21	; 0x15
    5646:	e0 2d       	mov	r30, r0
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    5648:	8d e5       	ldi	r24, 0x5D	; 93
    564a:	9a e0       	ldi	r25, 0x0A	; 10
    564c:	9d a3       	std	Y+37, r25	; 0x25
    564e:	8c a3       	std	Y+36, r24	; 0x24
    5650:	8c a5       	ldd	r24, Y+44	; 0x2c
    5652:	9d a5       	ldd	r25, Y+45	; 0x2d
    5654:	ae a5       	ldd	r26, Y+46	; 0x2e
    5656:	bf a5       	ldd	r27, Y+47	; 0x2f
    5658:	8e a3       	std	Y+38, r24	; 0x26
    565a:	9f a3       	std	Y+39, r25	; 0x27
    565c:	a8 a7       	std	Y+40, r26	; 0x28
    565e:	b9 a7       	std	Y+41, r27	; 0x29
    5660:	a7 01       	movw	r20, r14
    5662:	be 01       	movw	r22, r28
    5664:	6c 5d       	subi	r22, 0xDC	; 220
    5666:	7f 4f       	sbci	r23, 0xFF	; 255
    5668:	c8 01       	movw	r24, r16
    566a:	09 95       	icall
  } else {
    return ret;
  }
}
    566c:	af 96       	adiw	r28, 0x2f	; 47
    566e:	0f b6       	in	r0, 0x3f	; 63
    5670:	f8 94       	cli
    5672:	de bf       	out	0x3e, r29	; 62
    5674:	0f be       	out	0x3f, r0	; 63
    5676:	cd bf       	out	0x3d, r28	; 61
    5678:	df 91       	pop	r29
    567a:	cf 91       	pop	r28
    567c:	1f 91       	pop	r17
    567e:	0f 91       	pop	r16
    5680:	ff 90       	pop	r15
    5682:	ef 90       	pop	r14
    5684:	df 90       	pop	r13
    5686:	cf 90       	pop	r12
    5688:	08 95       	ret

0000568a <_GLOBAL__sub_I__ZN11EthernetUDPC2Ev>:

  while (_remaining)
  {
    read();
  }
}
    568a:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    568c:	00 e0       	ldi	r16, 0x00	; 0
    568e:	20 e0       	ldi	r18, 0x00	; 0
    5690:	40 e0       	ldi	r20, 0x00	; 0
    5692:	60 e0       	ldi	r22, 0x00	; 0
    5694:	82 e5       	ldi	r24, 0x52	; 82
    5696:	9c e0       	ldi	r25, 0x0C	; 12
    5698:	0e 94 ce 37 	call	0x6f9c	; 0x6f9c <_ZN9IPAddressC1Ehhhh>
    569c:	0f 91       	pop	r16
    569e:	08 95       	ret

000056a0 <_ZN10W5500Class11writeSnDIPREhPh>:
    }
  }

  w5500.writeSnIR(s, SnIR::SEND_OK);
  return ret;
}
    56a0:	ab 01       	movw	r20, r22
    56a2:	82 95       	swap	r24
    56a4:	88 0f       	add	r24, r24
    56a6:	80 7e       	andi	r24, 0xE0	; 224
    56a8:	6c e0       	ldi	r22, 0x0C	; 12
    56aa:	68 0f       	add	r22, r24
    56ac:	24 e0       	ldi	r18, 0x04	; 4
    56ae:	30 e0       	ldi	r19, 0x00	; 0
    56b0:	8c e0       	ldi	r24, 0x0C	; 12
    56b2:	90 e0       	ldi	r25, 0x00	; 0
    56b4:	00 c2       	rjmp	.+1024   	; 0x5ab6 <_ZN10W5500Class5writeEjhPKhj>

000056b6 <_ZN10W5500Class6readSnEhj>:
    56b6:	9b 01       	movw	r18, r22
    56b8:	82 95       	swap	r24
    56ba:	88 0f       	add	r24, r24
    56bc:	80 7e       	andi	r24, 0xE0	; 224
    56be:	68 e0       	ldi	r22, 0x08	; 8
    56c0:	68 0f       	add	r22, r24
    56c2:	c9 01       	movw	r24, r18
    56c4:	24 c2       	rjmp	.+1096   	; 0x5b0e <_ZN10W5500Class4readEjh>

000056c6 <_ZN10W5500Class8readSnIREh>:
    56c6:	62 e0       	ldi	r22, 0x02	; 2
    56c8:	70 e0       	ldi	r23, 0x00	; 0
    56ca:	f5 cf       	rjmp	.-22     	; 0x56b6 <_ZN10W5500Class6readSnEhj>

000056cc <_ZN10W5500Class7writeSnEhjh>:
    56cc:	9b 01       	movw	r18, r22
    56ce:	82 95       	swap	r24
    56d0:	88 0f       	add	r24, r24
    56d2:	80 7e       	andi	r24, 0xE0	; 224
    56d4:	6c e0       	ldi	r22, 0x0C	; 12
    56d6:	68 0f       	add	r22, r24
    56d8:	c9 01       	movw	r24, r18
    56da:	cf c1       	rjmp	.+926    	; 0x5a7a <_ZN10W5500Class5writeEjhh>

000056dc <_ZN10W5500Class11writeSnPORTEhj>:
    56dc:	cf 93       	push	r28
    56de:	df 93       	push	r29
    56e0:	c8 2f       	mov	r28, r24
    56e2:	d6 2f       	mov	r29, r22
    56e4:	47 2f       	mov	r20, r23
    56e6:	64 e0       	ldi	r22, 0x04	; 4
    56e8:	70 e0       	ldi	r23, 0x00	; 0
    56ea:	f0 df       	rcall	.-32     	; 0x56cc <_ZN10W5500Class7writeSnEhjh>
    56ec:	4d 2f       	mov	r20, r29
    56ee:	65 e0       	ldi	r22, 0x05	; 5
    56f0:	70 e0       	ldi	r23, 0x00	; 0
    56f2:	8c 2f       	mov	r24, r28
    56f4:	df 91       	pop	r29
    56f6:	cf 91       	pop	r28
    56f8:	e9 cf       	rjmp	.-46     	; 0x56cc <_ZN10W5500Class7writeSnEhjh>

000056fa <_ZN10W5500Class9writeSnIREhh>:
    56fa:	46 2f       	mov	r20, r22
    56fc:	62 e0       	ldi	r22, 0x02	; 2
    56fe:	70 e0       	ldi	r23, 0x00	; 0
    5700:	e5 cf       	rjmp	.-54     	; 0x56cc <_ZN10W5500Class7writeSnEhjh>

00005702 <_ZN10W5500Class12writeSnDPORTEhj>:
    5702:	cf 93       	push	r28
    5704:	df 93       	push	r29
    5706:	c8 2f       	mov	r28, r24
    5708:	d6 2f       	mov	r29, r22
    570a:	47 2f       	mov	r20, r23
    570c:	60 e1       	ldi	r22, 0x10	; 16
    570e:	70 e0       	ldi	r23, 0x00	; 0
    5710:	dd df       	rcall	.-70     	; 0x56cc <_ZN10W5500Class7writeSnEhjh>
    5712:	4d 2f       	mov	r20, r29
    5714:	61 e1       	ldi	r22, 0x11	; 17
    5716:	70 e0       	ldi	r23, 0x00	; 0
    5718:	8c 2f       	mov	r24, r28
    571a:	df 91       	pop	r29
    571c:	cf 91       	pop	r28
    571e:	d6 cf       	rjmp	.-84     	; 0x56cc <_ZN10W5500Class7writeSnEhjh>

00005720 <_Z5closeh>:
    5720:	cf 93       	push	r28
    5722:	c8 2f       	mov	r28, r24
    5724:	40 e1       	ldi	r20, 0x10	; 16
    5726:	68 2f       	mov	r22, r24
    5728:	8d e5       	ldi	r24, 0x5D	; 93
    572a:	9c e0       	ldi	r25, 0x0C	; 12
    572c:	70 d3       	rcall	.+1760   	; 0x5e0e <_ZN10W5500Class9execCmdSnEh7SockCMD>
    572e:	6f ef       	ldi	r22, 0xFF	; 255
    5730:	8c 2f       	mov	r24, r28
    5732:	cf 91       	pop	r28
    5734:	e2 cf       	rjmp	.-60     	; 0x56fa <_ZN10W5500Class9writeSnIREhh>

00005736 <_Z6sockethhjh>:
    5736:	ff 92       	push	r15
    5738:	0f 93       	push	r16
    573a:	1f 93       	push	r17
    573c:	cf 93       	push	r28
    573e:	df 93       	push	r29
    5740:	9f ef       	ldi	r25, 0xFF	; 255
    5742:	96 0f       	add	r25, r22
    5744:	95 30       	cpi	r25, 0x05	; 5
    5746:	18 f5       	brcc	.+70     	; 0x578e <_Z6sockethhjh+0x58>
    5748:	d2 2f       	mov	r29, r18
    574a:	8a 01       	movw	r16, r20
    574c:	f6 2e       	mov	r15, r22
    574e:	c8 2f       	mov	r28, r24
    5750:	e7 df       	rcall	.-50     	; 0x5720 <_Z5closeh>
    5752:	4f 2d       	mov	r20, r15
    5754:	4d 2b       	or	r20, r29
    5756:	60 e0       	ldi	r22, 0x00	; 0
    5758:	70 e0       	ldi	r23, 0x00	; 0
    575a:	8c 2f       	mov	r24, r28
    575c:	b7 df       	rcall	.-146    	; 0x56cc <_ZN10W5500Class7writeSnEhjh>
    575e:	01 15       	cp	r16, r1
    5760:	11 05       	cpc	r17, r1
    5762:	11 f0       	breq	.+4      	; 0x5768 <_Z6sockethhjh+0x32>
    5764:	b8 01       	movw	r22, r16
    5766:	0a c0       	rjmp	.+20     	; 0x577c <_Z6sockethhjh+0x46>
    5768:	60 91 58 0c 	lds	r22, 0x0C58	; 0x800c58 <_ZL10local_port>
    576c:	70 91 59 0c 	lds	r23, 0x0C59	; 0x800c59 <_ZL10local_port+0x1>
    5770:	6f 5f       	subi	r22, 0xFF	; 255
    5772:	7f 4f       	sbci	r23, 0xFF	; 255
    5774:	70 93 59 0c 	sts	0x0C59, r23	; 0x800c59 <_ZL10local_port+0x1>
    5778:	60 93 58 0c 	sts	0x0C58, r22	; 0x800c58 <_ZL10local_port>
    577c:	8c 2f       	mov	r24, r28
    577e:	ae df       	rcall	.-164    	; 0x56dc <_ZN10W5500Class11writeSnPORTEhj>
    5780:	41 e0       	ldi	r20, 0x01	; 1
    5782:	6c 2f       	mov	r22, r28
    5784:	8d e5       	ldi	r24, 0x5D	; 93
    5786:	9c e0       	ldi	r25, 0x0C	; 12
    5788:	42 d3       	rcall	.+1668   	; 0x5e0e <_ZN10W5500Class9execCmdSnEh7SockCMD>
    578a:	81 e0       	ldi	r24, 0x01	; 1
    578c:	01 c0       	rjmp	.+2      	; 0x5790 <_Z6sockethhjh+0x5a>
    578e:	80 e0       	ldi	r24, 0x00	; 0
    5790:	df 91       	pop	r29
    5792:	cf 91       	pop	r28
    5794:	1f 91       	pop	r17
    5796:	0f 91       	pop	r16
    5798:	ff 90       	pop	r15
    579a:	08 95       	ret

0000579c <_Z7connecthPhj>:
    579c:	0f 93       	push	r16
    579e:	1f 93       	push	r17
    57a0:	cf 93       	push	r28
    57a2:	fb 01       	movw	r30, r22
    57a4:	90 81       	ld	r25, Z
    57a6:	9f 3f       	cpi	r25, 0xFF	; 255
    57a8:	51 f4       	brne	.+20     	; 0x57be <_Z7connecthPhj+0x22>
    57aa:	91 81       	ldd	r25, Z+1	; 0x01
    57ac:	9f 3f       	cpi	r25, 0xFF	; 255
    57ae:	91 f4       	brne	.+36     	; 0x57d4 <_Z7connecthPhj+0x38>
    57b0:	92 81       	ldd	r25, Z+2	; 0x02
    57b2:	9f 3f       	cpi	r25, 0xFF	; 255
    57b4:	79 f4       	brne	.+30     	; 0x57d4 <_Z7connecthPhj+0x38>
    57b6:	93 81       	ldd	r25, Z+3	; 0x03
    57b8:	9f 3f       	cpi	r25, 0xFF	; 255
    57ba:	61 f4       	brne	.+24     	; 0x57d4 <_Z7connecthPhj+0x38>
    57bc:	1c c0       	rjmp	.+56     	; 0x57f6 <_Z7connecthPhj+0x5a>
    57be:	91 11       	cpse	r25, r1
    57c0:	09 c0       	rjmp	.+18     	; 0x57d4 <_Z7connecthPhj+0x38>
    57c2:	91 81       	ldd	r25, Z+1	; 0x01
    57c4:	91 11       	cpse	r25, r1
    57c6:	06 c0       	rjmp	.+12     	; 0x57d4 <_Z7connecthPhj+0x38>
    57c8:	92 81       	ldd	r25, Z+2	; 0x02
    57ca:	91 11       	cpse	r25, r1
    57cc:	03 c0       	rjmp	.+6      	; 0x57d4 <_Z7connecthPhj+0x38>
    57ce:	93 81       	ldd	r25, Z+3	; 0x03
    57d0:	99 23       	and	r25, r25
    57d2:	91 f0       	breq	.+36     	; 0x57f8 <_Z7connecthPhj+0x5c>
    57d4:	41 15       	cp	r20, r1
    57d6:	51 05       	cpc	r21, r1
    57d8:	71 f0       	breq	.+28     	; 0x57f6 <_Z7connecthPhj+0x5a>
    57da:	8a 01       	movw	r16, r20
    57dc:	bf 01       	movw	r22, r30
    57de:	c8 2f       	mov	r28, r24
    57e0:	5f df       	rcall	.-322    	; 0x56a0 <_ZN10W5500Class11writeSnDIPREhPh>
    57e2:	b8 01       	movw	r22, r16
    57e4:	8c 2f       	mov	r24, r28
    57e6:	8d df       	rcall	.-230    	; 0x5702 <_ZN10W5500Class12writeSnDPORTEhj>
    57e8:	44 e0       	ldi	r20, 0x04	; 4
    57ea:	6c 2f       	mov	r22, r28
    57ec:	8d e5       	ldi	r24, 0x5D	; 93
    57ee:	9c e0       	ldi	r25, 0x0C	; 12
    57f0:	0e d3       	rcall	.+1564   	; 0x5e0e <_ZN10W5500Class9execCmdSnEh7SockCMD>
    57f2:	91 e0       	ldi	r25, 0x01	; 1
    57f4:	01 c0       	rjmp	.+2      	; 0x57f8 <_Z7connecthPhj+0x5c>
    57f6:	90 e0       	ldi	r25, 0x00	; 0
    57f8:	89 2f       	mov	r24, r25
    57fa:	cf 91       	pop	r28
    57fc:	1f 91       	pop	r17
    57fe:	0f 91       	pop	r16
    5800:	08 95       	ret

00005802 <_Z10disconnecth>:
    5802:	48 e0       	ldi	r20, 0x08	; 8
    5804:	68 2f       	mov	r22, r24
    5806:	8d e5       	ldi	r24, 0x5D	; 93
    5808:	9c e0       	ldi	r25, 0x0C	; 12
    580a:	01 c3       	rjmp	.+1538   	; 0x5e0e <_ZN10W5500Class9execCmdSnEh7SockCMD>

0000580c <_Z4sendhPKhj>:
    580c:	cf 92       	push	r12
    580e:	df 92       	push	r13
    5810:	ef 92       	push	r14
    5812:	ff 92       	push	r15
    5814:	0f 93       	push	r16
    5816:	1f 93       	push	r17
    5818:	cf 93       	push	r28
    581a:	c8 2f       	mov	r28, r24
    581c:	7b 01       	movw	r14, r22
    581e:	8a 01       	movw	r16, r20
    5820:	41 30       	cpi	r20, 0x01	; 1
    5822:	58 40       	sbci	r21, 0x08	; 8
    5824:	10 f0       	brcs	.+4      	; 0x582a <_Z4sendhPKhj+0x1e>
    5826:	00 e0       	ldi	r16, 0x00	; 0
    5828:	18 e0       	ldi	r17, 0x08	; 8
    582a:	6c 2f       	mov	r22, r28
    582c:	8d e5       	ldi	r24, 0x5D	; 93
    582e:	9c e0       	ldi	r25, 0x0C	; 12
    5830:	cd d1       	rcall	.+922    	; 0x5bcc <_ZN10W5500Class13getTXFreeSizeEh>
    5832:	6c 01       	movw	r12, r24
    5834:	63 e0       	ldi	r22, 0x03	; 3
    5836:	70 e0       	ldi	r23, 0x00	; 0
    5838:	8c 2f       	mov	r24, r28
    583a:	3d df       	rcall	.-390    	; 0x56b6 <_ZN10W5500Class6readSnEhj>
    583c:	87 31       	cpi	r24, 0x17	; 23
    583e:	11 f0       	breq	.+4      	; 0x5844 <_Z4sendhPKhj+0x38>
    5840:	8c 31       	cpi	r24, 0x1C	; 28
    5842:	21 f4       	brne	.+8      	; 0x584c <_Z4sendhPKhj+0x40>
    5844:	c0 16       	cp	r12, r16
    5846:	d1 06       	cpc	r13, r17
    5848:	80 f3       	brcs	.-32     	; 0x582a <_Z4sendhPKhj+0x1e>
    584a:	02 c0       	rjmp	.+4      	; 0x5850 <_Z4sendhPKhj+0x44>
    584c:	00 e0       	ldi	r16, 0x00	; 0
    584e:	10 e0       	ldi	r17, 0x00	; 0
    5850:	98 01       	movw	r18, r16
    5852:	a7 01       	movw	r20, r14
    5854:	6c 2f       	mov	r22, r28
    5856:	8d e5       	ldi	r24, 0x5D	; 93
    5858:	9c e0       	ldi	r25, 0x0C	; 12
    585a:	3d d2       	rcall	.+1146   	; 0x5cd6 <_ZN10W5500Class20send_data_processingEhPKhj>
    585c:	40 e2       	ldi	r20, 0x20	; 32
    585e:	6c 2f       	mov	r22, r28
    5860:	8d e5       	ldi	r24, 0x5D	; 93
    5862:	9c e0       	ldi	r25, 0x0C	; 12
    5864:	d4 d2       	rcall	.+1448   	; 0x5e0e <_ZN10W5500Class9execCmdSnEh7SockCMD>
    5866:	8c 2f       	mov	r24, r28
    5868:	2e df       	rcall	.-420    	; 0x56c6 <_ZN10W5500Class8readSnIREh>
    586a:	84 fd       	sbrc	r24, 4
    586c:	0b c0       	rjmp	.+22     	; 0x5884 <_Z4sendhPKhj+0x78>
    586e:	63 e0       	ldi	r22, 0x03	; 3
    5870:	70 e0       	ldi	r23, 0x00	; 0
    5872:	8c 2f       	mov	r24, r28
    5874:	20 df       	rcall	.-448    	; 0x56b6 <_ZN10W5500Class6readSnEhj>
    5876:	81 11       	cpse	r24, r1
    5878:	f6 cf       	rjmp	.-20     	; 0x5866 <_Z4sendhPKhj+0x5a>
    587a:	8c 2f       	mov	r24, r28
    587c:	51 df       	rcall	.-350    	; 0x5720 <_Z5closeh>
    587e:	80 e0       	ldi	r24, 0x00	; 0
    5880:	90 e0       	ldi	r25, 0x00	; 0
    5882:	04 c0       	rjmp	.+8      	; 0x588c <_Z4sendhPKhj+0x80>
    5884:	60 e1       	ldi	r22, 0x10	; 16
    5886:	8c 2f       	mov	r24, r28
    5888:	38 df       	rcall	.-400    	; 0x56fa <_ZN10W5500Class9writeSnIREhh>
    588a:	c8 01       	movw	r24, r16
    588c:	cf 91       	pop	r28
    588e:	1f 91       	pop	r17
    5890:	0f 91       	pop	r16
    5892:	ff 90       	pop	r15
    5894:	ef 90       	pop	r14
    5896:	df 90       	pop	r13
    5898:	cf 90       	pop	r12
    589a:	08 95       	ret

0000589c <_Z4recvhPhi>:
    589c:	cf 92       	push	r12
    589e:	df 92       	push	r13
    58a0:	ef 92       	push	r14
    58a2:	ff 92       	push	r15
    58a4:	0f 93       	push	r16
    58a6:	1f 93       	push	r17
    58a8:	cf 93       	push	r28
    58aa:	df 93       	push	r29
    58ac:	18 2f       	mov	r17, r24
    58ae:	6b 01       	movw	r12, r22
    58b0:	7a 01       	movw	r14, r20
    58b2:	68 2f       	mov	r22, r24
    58b4:	8d e5       	ldi	r24, 0x5D	; 93
    58b6:	9c e0       	ldi	r25, 0x0C	; 12
    58b8:	ba d1       	rcall	.+884    	; 0x5c2e <_ZN10W5500Class17getRXReceivedSizeEh>
    58ba:	ec 01       	movw	r28, r24
    58bc:	00 97       	sbiw	r24, 0x00	; 0
    58be:	91 f4       	brne	.+36     	; 0x58e4 <_Z4recvhPhi+0x48>
    58c0:	63 e0       	ldi	r22, 0x03	; 3
    58c2:	70 e0       	ldi	r23, 0x00	; 0
    58c4:	81 2f       	mov	r24, r17
    58c6:	f7 de       	rcall	.-530    	; 0x56b6 <_ZN10W5500Class6readSnEhj>
    58c8:	84 31       	cpi	r24, 0x14	; 20
    58ca:	f9 f0       	breq	.+62     	; 0x590a <_Z4recvhPhi+0x6e>
    58cc:	88 23       	and	r24, r24
    58ce:	e9 f0       	breq	.+58     	; 0x590a <_Z4recvhPhi+0x6e>
    58d0:	c1 e0       	ldi	r28, 0x01	; 1
    58d2:	d0 e0       	ldi	r29, 0x00	; 0
    58d4:	8c 31       	cpi	r24, 0x1C	; 28
    58d6:	11 f4       	brne	.+4      	; 0x58dc <_Z4recvhPhi+0x40>
    58d8:	c0 e0       	ldi	r28, 0x00	; 0
    58da:	d0 e0       	ldi	r29, 0x00	; 0
    58dc:	d1 95       	neg	r29
    58de:	c1 95       	neg	r28
    58e0:	d1 09       	sbc	r29, r1
    58e2:	13 c0       	rjmp	.+38     	; 0x590a <_Z4recvhPhi+0x6e>
    58e4:	e8 16       	cp	r14, r24
    58e6:	f9 06       	cpc	r15, r25
    58e8:	0c f4       	brge	.+2      	; 0x58ec <_Z4recvhPhi+0x50>
    58ea:	e7 01       	movw	r28, r14
    58ec:	1c 16       	cp	r1, r28
    58ee:	1d 06       	cpc	r1, r29
    58f0:	64 f4       	brge	.+24     	; 0x590a <_Z4recvhPhi+0x6e>
    58f2:	00 e0       	ldi	r16, 0x00	; 0
    58f4:	9e 01       	movw	r18, r28
    58f6:	a6 01       	movw	r20, r12
    58f8:	61 2f       	mov	r22, r17
    58fa:	8d e5       	ldi	r24, 0x5D	; 93
    58fc:	9c e0       	ldi	r25, 0x0C	; 12
    58fe:	3a d2       	rcall	.+1140   	; 0x5d74 <_ZN10W5500Class20recv_data_processingEhPhjh>
    5900:	40 e4       	ldi	r20, 0x40	; 64
    5902:	61 2f       	mov	r22, r17
    5904:	8d e5       	ldi	r24, 0x5D	; 93
    5906:	9c e0       	ldi	r25, 0x0C	; 12
    5908:	82 d2       	rcall	.+1284   	; 0x5e0e <_ZN10W5500Class9execCmdSnEh7SockCMD>
    590a:	ce 01       	movw	r24, r28
    590c:	df 91       	pop	r29
    590e:	cf 91       	pop	r28
    5910:	1f 91       	pop	r17
    5912:	0f 91       	pop	r16
    5914:	ff 90       	pop	r15
    5916:	ef 90       	pop	r14
    5918:	df 90       	pop	r13
    591a:	cf 90       	pop	r12
    591c:	08 95       	ret

0000591e <_Z4peekhPh>:
    591e:	0f 93       	push	r16
    5920:	ab 01       	movw	r20, r22
    5922:	01 e0       	ldi	r16, 0x01	; 1
    5924:	21 e0       	ldi	r18, 0x01	; 1
    5926:	30 e0       	ldi	r19, 0x00	; 0
    5928:	68 2f       	mov	r22, r24
    592a:	8d e5       	ldi	r24, 0x5D	; 93
    592c:	9c e0       	ldi	r25, 0x0C	; 12
    592e:	22 d2       	rcall	.+1092   	; 0x5d74 <_ZN10W5500Class20recv_data_processingEhPhjh>
    5930:	81 e0       	ldi	r24, 0x01	; 1
    5932:	90 e0       	ldi	r25, 0x00	; 0
    5934:	0f 91       	pop	r16
    5936:	08 95       	ret

00005938 <_Z5flushh>:
    5938:	08 95       	ret

0000593a <_Z10bufferDatahjPKhj>:

uint16_t bufferData(SOCKET s, uint16_t offset, const uint8_t* buf, uint16_t len)
{
    593a:	af 92       	push	r10
    593c:	bf 92       	push	r11
    593e:	cf 92       	push	r12
    5940:	df 92       	push	r13
    5942:	ff 92       	push	r15
    5944:	0f 93       	push	r16
    5946:	1f 93       	push	r17
    5948:	cf 93       	push	r28
    594a:	df 93       	push	r29
    594c:	f8 2e       	mov	r15, r24
    594e:	6b 01       	movw	r12, r22
    5950:	5a 01       	movw	r10, r20
    5952:	e9 01       	movw	r28, r18
  uint16_t ret =0;
  if (len > w5500.getTXFreeSize(s))
    5954:	68 2f       	mov	r22, r24
    5956:	8d e5       	ldi	r24, 0x5D	; 93
    5958:	9c e0       	ldi	r25, 0x0C	; 12
    595a:	38 d1       	rcall	.+624    	; 0x5bcc <_ZN10W5500Class13getTXFreeSizeEh>
    595c:	8c 17       	cp	r24, r28
    595e:	9d 07       	cpc	r25, r29
    5960:	28 f4       	brcc	.+10     	; 0x596c <_Z10bufferDatahjPKhj+0x32>
  {
    ret = w5500.getTXFreeSize(s); // check size not to exceed MAX size.
    5962:	6f 2d       	mov	r22, r15
    5964:	8d e5       	ldi	r24, 0x5D	; 93
    5966:	9c e0       	ldi	r25, 0x0C	; 12
    5968:	31 d1       	rcall	.+610    	; 0x5bcc <_ZN10W5500Class13getTXFreeSizeEh>
    596a:	ec 01       	movw	r28, r24
  }
  else
  {
    ret = len;
  }
  w5500.send_data_processing_offset(s, offset, buf, ret);
    596c:	8e 01       	movw	r16, r28
    596e:	95 01       	movw	r18, r10
    5970:	a6 01       	movw	r20, r12
    5972:	6f 2d       	mov	r22, r15
    5974:	8d e5       	ldi	r24, 0x5D	; 93
    5976:	9c e0       	ldi	r25, 0x0C	; 12
    5978:	74 d1       	rcall	.+744    	; 0x5c62 <_ZN10W5500Class27send_data_processing_offsetEhjPKhj>
  return ret;
}
    597a:	ce 01       	movw	r24, r28
    597c:	df 91       	pop	r29
    597e:	cf 91       	pop	r28
    5980:	1f 91       	pop	r17
    5982:	0f 91       	pop	r16
    5984:	ff 90       	pop	r15
    5986:	df 90       	pop	r13
    5988:	cf 90       	pop	r12
    598a:	bf 90       	pop	r11
    598c:	af 90       	pop	r10
    598e:	08 95       	ret

00005990 <_Z8startUDPhPhj>:

int startUDP(SOCKET s, uint8_t* addr, uint16_t port)
{
    5990:	0f 93       	push	r16
    5992:	1f 93       	push	r17
    5994:	cf 93       	push	r28
    5996:	fb 01       	movw	r30, r22
  if
    5998:	90 81       	ld	r25, Z
    599a:	91 11       	cpse	r25, r1
    599c:	09 c0       	rjmp	.+18     	; 0x59b0 <_Z8startUDPhPhj+0x20>
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
    599e:	91 81       	ldd	r25, Z+1	; 0x01
    59a0:	91 11       	cpse	r25, r1
    59a2:	06 c0       	rjmp	.+12     	; 0x59b0 <_Z8startUDPhPhj+0x20>
    59a4:	92 81       	ldd	r25, Z+2	; 0x02
    59a6:	91 11       	cpse	r25, r1
    59a8:	03 c0       	rjmp	.+6      	; 0x59b0 <_Z8startUDPhPhj+0x20>
    59aa:	93 81       	ldd	r25, Z+3	; 0x03
    59ac:	99 23       	and	r25, r25
    59ae:	69 f0       	breq	.+26     	; 0x59ca <_Z8startUDPhPhj+0x3a>
    59b0:	41 15       	cp	r20, r1
    59b2:	51 05       	cpc	r21, r1
    59b4:	51 f0       	breq	.+20     	; 0x59ca <_Z8startUDPhPhj+0x3a>
    59b6:	8a 01       	movw	r16, r20
    59b8:	bf 01       	movw	r22, r30
    59ba:	c8 2f       	mov	r28, r24
  {
    return 0;
  }
  else
  {
    w5500.writeSnDIPR(s, addr);
    59bc:	71 de       	rcall	.-798    	; 0x56a0 <_ZN10W5500Class11writeSnDIPREhPh>
    w5500.writeSnDPORT(s, port);
    59be:	b8 01       	movw	r22, r16
    59c0:	8c 2f       	mov	r24, r28
    59c2:	9f de       	rcall	.-706    	; 0x5702 <_ZN10W5500Class12writeSnDPORTEhj>
    return 1;
    59c4:	81 e0       	ldi	r24, 0x01	; 1
    59c6:	90 e0       	ldi	r25, 0x00	; 0
    59c8:	02 c0       	rjmp	.+4      	; 0x59ce <_Z8startUDPhPhj+0x3e>
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
     ((port == 0x00))
    ) 
  {
    return 0;
    59ca:	80 e0       	ldi	r24, 0x00	; 0
    59cc:	90 e0       	ldi	r25, 0x00	; 0
  {
    w5500.writeSnDIPR(s, addr);
    w5500.writeSnDPORT(s, port);
    return 1;
  }
}
    59ce:	cf 91       	pop	r28
    59d0:	1f 91       	pop	r17
    59d2:	0f 91       	pop	r16
    59d4:	08 95       	ret

000059d6 <_Z7sendUDPh>:

int sendUDP(SOCKET s)
{
    59d6:	cf 93       	push	r28
    59d8:	c8 2f       	mov	r28, r24
  w5500.execCmdSn(s, Sock_SEND);
    59da:	40 e2       	ldi	r20, 0x20	; 32
    59dc:	68 2f       	mov	r22, r24
    59de:	8d e5       	ldi	r24, 0x5D	; 93
    59e0:	9c e0       	ldi	r25, 0x0C	; 12
    59e2:	15 d2       	rcall	.+1066   	; 0x5e0e <_ZN10W5500Class9execCmdSnEh7SockCMD>
		
  /* +2008.01 bj */
  while ( (w5500.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
    59e4:	8c 2f       	mov	r24, r28
    59e6:	6f de       	rcall	.-802    	; 0x56c6 <_ZN10W5500Class8readSnIREh>
    59e8:	84 fd       	sbrc	r24, 4
    59ea:	0a c0       	rjmp	.+20     	; 0x5a00 <_Z7sendUDPh+0x2a>
  {
    if (w5500.readSnIR(s) & SnIR::TIMEOUT)
    59ec:	8c 2f       	mov	r24, r28
    59ee:	6b de       	rcall	.-810    	; 0x56c6 <_ZN10W5500Class8readSnIREh>
    59f0:	83 ff       	sbrs	r24, 3
    59f2:	f8 cf       	rjmp	.-16     	; 0x59e4 <_Z7sendUDPh+0xe>
    {
      /* +2008.01 [bj]: clear interrupt */
      w5500.writeSnIR(s, (SnIR::SEND_OK|SnIR::TIMEOUT));
    59f4:	68 e1       	ldi	r22, 0x18	; 24
    59f6:	8c 2f       	mov	r24, r28
    59f8:	80 de       	rcall	.-768    	; 0x56fa <_ZN10W5500Class9writeSnIREhh>
    59fa:	80 e0       	ldi	r24, 0x00	; 0
      return 0;
    59fc:	90 e0       	ldi	r25, 0x00	; 0
    59fe:	05 c0       	rjmp	.+10     	; 0x5a0a <_Z7sendUDPh+0x34>
    }
  }

  /* +2008.01 bj */	
  w5500.writeSnIR(s, SnIR::SEND_OK);
    5a00:	60 e1       	ldi	r22, 0x10	; 16
    5a02:	8c 2f       	mov	r24, r28
    5a04:	7a de       	rcall	.-780    	; 0x56fa <_ZN10W5500Class9writeSnIREhh>
    5a06:	81 e0       	ldi	r24, 0x01	; 1

  /* Sent ok */
  return 1;
    5a08:	90 e0       	ldi	r25, 0x00	; 0
    5a0a:	cf 91       	pop	r28
}
    5a0c:	08 95       	ret

00005a0e <_ZN8SPIClass16beginTransactionE11SPISettings>:
    5a0e:	20 91 60 0c 	lds	r18, 0x0C60	; 0x800c60 <_ZN8SPIClass13interruptModeE>
    uint8_t _data = SPI.transfer(0);
    resetSS();
    SPI.endTransaction();

    return _data;
}
    5a12:	22 23       	and	r18, r18
    5a14:	99 f0       	breq	.+38     	; 0x5a3c <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    5a16:	4f b7       	in	r20, 0x3f	; 63
    5a18:	f8 94       	cli
    5a1a:	20 91 60 0c 	lds	r18, 0x0C60	; 0x800c60 <_ZN8SPIClass13interruptModeE>
    5a1e:	21 30       	cpi	r18, 0x01	; 1
    5a20:	59 f4       	brne	.+22     	; 0x5a38 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
    5a22:	2d b3       	in	r18, 0x1d	; 29
    5a24:	20 93 5e 0c 	sts	0x0C5E, r18	; 0x800c5e <_ZN8SPIClass13interruptSaveE>
    5a28:	3d b3       	in	r19, 0x1d	; 29
    5a2a:	20 91 5f 0c 	lds	r18, 0x0C5F	; 0x800c5f <_ZN8SPIClass13interruptMaskE>
    5a2e:	20 95       	com	r18
    5a30:	23 23       	and	r18, r19
    5a32:	2d bb       	out	0x1d, r18	; 29
    5a34:	4f bf       	out	0x3f, r20	; 63
    5a36:	02 c0       	rjmp	.+4      	; 0x5a3c <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    5a38:	40 93 5e 0c 	sts	0x0C5E, r20	; 0x800c5e <_ZN8SPIClass13interruptSaveE>
    5a3c:	8c bd       	out	0x2c, r24	; 44
    5a3e:	9d bd       	out	0x2d, r25	; 45
    5a40:	08 95       	ret

00005a42 <_ZN8SPIClass8transferEh>:
    5a42:	8e bd       	out	0x2e, r24	; 46
    5a44:	00 00       	nop
    5a46:	0d b4       	in	r0, 0x2d	; 45
    5a48:	07 fe       	sbrs	r0, 7
    5a4a:	fd cf       	rjmp	.-6      	; 0x5a46 <_ZN8SPIClass8transferEh+0x4>
    5a4c:	8e b5       	in	r24, 0x2e	; 46
    5a4e:	08 95       	ret

00005a50 <_ZN8SPIClass14endTransactionEv>:
    5a50:	80 91 60 0c 	lds	r24, 0x0C60	; 0x800c60 <_ZN8SPIClass13interruptModeE>
    5a54:	88 23       	and	r24, r24
    5a56:	61 f0       	breq	.+24     	; 0x5a70 <_ZN8SPIClass14endTransactionEv+0x20>
    5a58:	9f b7       	in	r25, 0x3f	; 63
    5a5a:	f8 94       	cli
    5a5c:	20 91 60 0c 	lds	r18, 0x0C60	; 0x800c60 <_ZN8SPIClass13interruptModeE>
    5a60:	80 91 5e 0c 	lds	r24, 0x0C5E	; 0x800c5e <_ZN8SPIClass13interruptSaveE>
    5a64:	21 30       	cpi	r18, 0x01	; 1
    5a66:	19 f4       	brne	.+6      	; 0x5a6e <_ZN8SPIClass14endTransactionEv+0x1e>
    5a68:	8d bb       	out	0x1d, r24	; 29
    5a6a:	9f bf       	out	0x3f, r25	; 63
    5a6c:	08 95       	ret
    5a6e:	8f bf       	out	0x3f, r24	; 63
    5a70:	08 95       	ret

00005a72 <_ZN10W5500Class5setSSEv>:
    5a72:	44 98       	cbi	0x08, 4	; 8
    5a74:	08 95       	ret

00005a76 <_ZN10W5500Class7resetSSEv>:
    5a76:	44 9a       	sbi	0x08, 4	; 8
    5a78:	08 95       	ret

00005a7a <_ZN10W5500Class5writeEjhh>:
    5a7a:	0f 93       	push	r16
    5a7c:	1f 93       	push	r17
    5a7e:	cf 93       	push	r28
    5a80:	df 93       	push	r29
    5a82:	18 2f       	mov	r17, r24
    5a84:	09 2f       	mov	r16, r25
    5a86:	d6 2f       	mov	r29, r22
    5a88:	c4 2f       	mov	r28, r20
    5a8a:	80 91 5b 0c 	lds	r24, 0x0C5B	; 0x800c5b <wiznet_SPI_settings>
    5a8e:	90 91 5c 0c 	lds	r25, 0x0C5C	; 0x800c5c <wiznet_SPI_settings+0x1>
    5a92:	bd df       	rcall	.-134    	; 0x5a0e <_ZN8SPIClass16beginTransactionE11SPISettings>
    5a94:	ee df       	rcall	.-36     	; 0x5a72 <_ZN10W5500Class5setSSEv>
    5a96:	80 2f       	mov	r24, r16
    5a98:	d4 df       	rcall	.-88     	; 0x5a42 <_ZN8SPIClass8transferEh>
    5a9a:	81 2f       	mov	r24, r17
    5a9c:	d2 df       	rcall	.-92     	; 0x5a42 <_ZN8SPIClass8transferEh>
    5a9e:	8d 2f       	mov	r24, r29
    5aa0:	d0 df       	rcall	.-96     	; 0x5a42 <_ZN8SPIClass8transferEh>
    5aa2:	8c 2f       	mov	r24, r28
    5aa4:	ce df       	rcall	.-100    	; 0x5a42 <_ZN8SPIClass8transferEh>
    5aa6:	e7 df       	rcall	.-50     	; 0x5a76 <_ZN10W5500Class7resetSSEv>
    5aa8:	d3 df       	rcall	.-90     	; 0x5a50 <_ZN8SPIClass14endTransactionEv>
    5aaa:	81 e0       	ldi	r24, 0x01	; 1
    5aac:	df 91       	pop	r29
    5aae:	cf 91       	pop	r28
    5ab0:	1f 91       	pop	r17
    5ab2:	0f 91       	pop	r16
    5ab4:	08 95       	ret

00005ab6 <_ZN10W5500Class5writeEjhPKhj>:
    5ab6:	df 92       	push	r13
    5ab8:	ef 92       	push	r14
    5aba:	ff 92       	push	r15
    5abc:	0f 93       	push	r16
    5abe:	1f 93       	push	r17
    5ac0:	cf 93       	push	r28
    5ac2:	df 93       	push	r29
    5ac4:	d8 2f       	mov	r29, r24
    5ac6:	d9 2e       	mov	r13, r25
    5ac8:	c6 2f       	mov	r28, r22
    5aca:	7a 01       	movw	r14, r20
    5acc:	89 01       	movw	r16, r18
    5ace:	80 91 5b 0c 	lds	r24, 0x0C5B	; 0x800c5b <wiznet_SPI_settings>
    5ad2:	90 91 5c 0c 	lds	r25, 0x0C5C	; 0x800c5c <wiznet_SPI_settings+0x1>
    5ad6:	9b df       	rcall	.-202    	; 0x5a0e <_ZN8SPIClass16beginTransactionE11SPISettings>
    5ad8:	cc df       	rcall	.-104    	; 0x5a72 <_ZN10W5500Class5setSSEv>
    5ada:	8d 2d       	mov	r24, r13
    5adc:	b2 df       	rcall	.-156    	; 0x5a42 <_ZN8SPIClass8transferEh>
    5ade:	8d 2f       	mov	r24, r29
    5ae0:	b0 df       	rcall	.-160    	; 0x5a42 <_ZN8SPIClass8transferEh>
    5ae2:	8c 2f       	mov	r24, r28
    5ae4:	ae df       	rcall	.-164    	; 0x5a42 <_ZN8SPIClass8transferEh>
    5ae6:	e7 01       	movw	r28, r14
    5ae8:	e0 0e       	add	r14, r16
    5aea:	f1 1e       	adc	r15, r17
    5aec:	ce 15       	cp	r28, r14
    5aee:	df 05       	cpc	r29, r15
    5af0:	19 f0       	breq	.+6      	; 0x5af8 <_ZN10W5500Class5writeEjhPKhj+0x42>
    5af2:	89 91       	ld	r24, Y+
    5af4:	a6 df       	rcall	.-180    	; 0x5a42 <_ZN8SPIClass8transferEh>
    5af6:	fa cf       	rjmp	.-12     	; 0x5aec <_ZN10W5500Class5writeEjhPKhj+0x36>
    5af8:	be df       	rcall	.-132    	; 0x5a76 <_ZN10W5500Class7resetSSEv>
    5afa:	aa df       	rcall	.-172    	; 0x5a50 <_ZN8SPIClass14endTransactionEv>
    5afc:	c8 01       	movw	r24, r16
    5afe:	df 91       	pop	r29
    5b00:	cf 91       	pop	r28
    5b02:	1f 91       	pop	r17
    5b04:	0f 91       	pop	r16
    5b06:	ff 90       	pop	r15
    5b08:	ef 90       	pop	r14
    5b0a:	df 90       	pop	r13
    5b0c:	08 95       	ret

00005b0e <_ZN10W5500Class4readEjh>:
    5b0e:	1f 93       	push	r17
    5b10:	cf 93       	push	r28
    5b12:	df 93       	push	r29
    5b14:	d8 2f       	mov	r29, r24
    5b16:	19 2f       	mov	r17, r25
    5b18:	c6 2f       	mov	r28, r22
    5b1a:	80 91 5b 0c 	lds	r24, 0x0C5B	; 0x800c5b <wiznet_SPI_settings>
    5b1e:	90 91 5c 0c 	lds	r25, 0x0C5C	; 0x800c5c <wiznet_SPI_settings+0x1>
    5b22:	75 df       	rcall	.-278    	; 0x5a0e <_ZN8SPIClass16beginTransactionE11SPISettings>
    5b24:	a6 df       	rcall	.-180    	; 0x5a72 <_ZN10W5500Class5setSSEv>
    5b26:	81 2f       	mov	r24, r17
    5b28:	8c df       	rcall	.-232    	; 0x5a42 <_ZN8SPIClass8transferEh>
    5b2a:	8d 2f       	mov	r24, r29
    5b2c:	8a df       	rcall	.-236    	; 0x5a42 <_ZN8SPIClass8transferEh>
    5b2e:	8c 2f       	mov	r24, r28
    5b30:	88 df       	rcall	.-240    	; 0x5a42 <_ZN8SPIClass8transferEh>
    5b32:	80 e0       	ldi	r24, 0x00	; 0
    5b34:	86 df       	rcall	.-244    	; 0x5a42 <_ZN8SPIClass8transferEh>
    5b36:	c8 2f       	mov	r28, r24
    5b38:	9e df       	rcall	.-196    	; 0x5a76 <_ZN10W5500Class7resetSSEv>
    5b3a:	8a df       	rcall	.-236    	; 0x5a50 <_ZN8SPIClass14endTransactionEv>
    5b3c:	8c 2f       	mov	r24, r28
    5b3e:	df 91       	pop	r29
    5b40:	cf 91       	pop	r28
    5b42:	1f 91       	pop	r17
    5b44:	08 95       	ret

00005b46 <_ZN10W5500Class4initEh>:
    5b46:	cf 93       	push	r28
    5b48:	df 93       	push	r29
    5b4a:	60 93 5a 0c 	sts	0x0C5A, r22	; 0x800c5a <SPI_CS>
    5b4e:	68 ee       	ldi	r22, 0xE8	; 232
    5b50:	73 e0       	ldi	r23, 0x03	; 3
    5b52:	80 e0       	ldi	r24, 0x00	; 0
    5b54:	90 e0       	ldi	r25, 0x00	; 0
    5b56:	0e 94 85 39 	call	0x730a	; 0x730a <delay>
    5b5a:	3c 9a       	sbi	0x07, 4	; 7
    5b5c:	10 d4       	rcall	.+2080   	; 0x637e <_ZN8SPIClass5beginEv>
    5b5e:	60 e0       	ldi	r22, 0x00	; 0
    5b60:	80 e0       	ldi	r24, 0x00	; 0
    5b62:	90 e0       	ldi	r25, 0x00	; 0
    5b64:	d4 df       	rcall	.-88     	; 0x5b0e <_ZN10W5500Class4readEjh>
    5b66:	48 2f       	mov	r20, r24
    5b68:	40 68       	ori	r20, 0x80	; 128
    5b6a:	64 e0       	ldi	r22, 0x04	; 4
    5b6c:	80 e0       	ldi	r24, 0x00	; 0
    5b6e:	90 e0       	ldi	r25, 0x00	; 0
    5b70:	84 df       	rcall	.-248    	; 0x5a7a <_ZN10W5500Class5writeEjhh>
    5b72:	c0 e0       	ldi	r28, 0x00	; 0
    5b74:	dc 2f       	mov	r29, r28
    5b76:	d2 95       	swap	r29
    5b78:	dd 0f       	add	r29, r29
    5b7a:	d0 7e       	andi	r29, 0xE0	; 224
    5b7c:	d4 5f       	subi	r29, 0xF4	; 244
    5b7e:	42 e0       	ldi	r20, 0x02	; 2
    5b80:	6d 2f       	mov	r22, r29
    5b82:	8e e1       	ldi	r24, 0x1E	; 30
    5b84:	90 e0       	ldi	r25, 0x00	; 0
    5b86:	79 df       	rcall	.-270    	; 0x5a7a <_ZN10W5500Class5writeEjhh>
    5b88:	42 e0       	ldi	r20, 0x02	; 2
    5b8a:	6d 2f       	mov	r22, r29
    5b8c:	8f e1       	ldi	r24, 0x1F	; 31
    5b8e:	90 e0       	ldi	r25, 0x00	; 0
    5b90:	74 df       	rcall	.-280    	; 0x5a7a <_ZN10W5500Class5writeEjhh>
    5b92:	cf 5f       	subi	r28, 0xFF	; 255
    5b94:	c8 30       	cpi	r28, 0x08	; 8
    5b96:	71 f7       	brne	.-36     	; 0x5b74 <_ZN10W5500Class4initEh+0x2e>
    5b98:	df 91       	pop	r29
    5b9a:	cf 91       	pop	r28
    5b9c:	08 95       	ret

00005b9e <_ZN10W5500Class12readSnTX_FSREh>:
    5b9e:	1f 93       	push	r17
    5ba0:	cf 93       	push	r28
    5ba2:	df 93       	push	r29
    5ba4:	18 2f       	mov	r17, r24
    5ba6:	60 e2       	ldi	r22, 0x20	; 32
    5ba8:	70 e0       	ldi	r23, 0x00	; 0
    5baa:	85 dd       	rcall	.-1270   	; 0x56b6 <_ZN10W5500Class6readSnEhj>
    5bac:	c8 2f       	mov	r28, r24
    5bae:	d0 e0       	ldi	r29, 0x00	; 0
    5bb0:	dc 2f       	mov	r29, r28
    5bb2:	cc 27       	eor	r28, r28
    5bb4:	61 e2       	ldi	r22, 0x21	; 33
    5bb6:	70 e0       	ldi	r23, 0x00	; 0
    5bb8:	81 2f       	mov	r24, r17
    5bba:	7d dd       	rcall	.-1286   	; 0x56b6 <_ZN10W5500Class6readSnEhj>
    5bbc:	9e 01       	movw	r18, r28
    5bbe:	28 0f       	add	r18, r24
    5bc0:	31 1d       	adc	r19, r1
    5bc2:	c9 01       	movw	r24, r18
    5bc4:	df 91       	pop	r29
    5bc6:	cf 91       	pop	r28
    5bc8:	1f 91       	pop	r17
    5bca:	08 95       	ret

00005bcc <_ZN10W5500Class13getTXFreeSizeEh>:
    5bcc:	ff 92       	push	r15
    5bce:	0f 93       	push	r16
    5bd0:	1f 93       	push	r17
    5bd2:	cf 93       	push	r28
    5bd4:	df 93       	push	r29
    5bd6:	f6 2e       	mov	r15, r22
    5bd8:	c0 e0       	ldi	r28, 0x00	; 0
    5bda:	d0 e0       	ldi	r29, 0x00	; 0
    5bdc:	8f 2d       	mov	r24, r15
    5bde:	df df       	rcall	.-66     	; 0x5b9e <_ZN10W5500Class12readSnTX_FSREh>
    5be0:	8c 01       	movw	r16, r24
    5be2:	89 2b       	or	r24, r25
    5be4:	19 f0       	breq	.+6      	; 0x5bec <_ZN10W5500Class13getTXFreeSizeEh+0x20>
    5be6:	8f 2d       	mov	r24, r15
    5be8:	da df       	rcall	.-76     	; 0x5b9e <_ZN10W5500Class12readSnTX_FSREh>
    5bea:	ec 01       	movw	r28, r24
    5bec:	c0 17       	cp	r28, r16
    5bee:	d1 07       	cpc	r29, r17
    5bf0:	a9 f7       	brne	.-22     	; 0x5bdc <_ZN10W5500Class13getTXFreeSizeEh+0x10>
    5bf2:	ce 01       	movw	r24, r28
    5bf4:	df 91       	pop	r29
    5bf6:	cf 91       	pop	r28
    5bf8:	1f 91       	pop	r17
    5bfa:	0f 91       	pop	r16
    5bfc:	ff 90       	pop	r15
    5bfe:	08 95       	ret

00005c00 <_ZN10W5500Class12readSnRX_RSREh>:
    5c00:	1f 93       	push	r17
    5c02:	cf 93       	push	r28
    5c04:	df 93       	push	r29
    5c06:	18 2f       	mov	r17, r24
    5c08:	66 e2       	ldi	r22, 0x26	; 38
    5c0a:	70 e0       	ldi	r23, 0x00	; 0
    5c0c:	54 dd       	rcall	.-1368   	; 0x56b6 <_ZN10W5500Class6readSnEhj>
    5c0e:	c8 2f       	mov	r28, r24
    5c10:	d0 e0       	ldi	r29, 0x00	; 0
    5c12:	dc 2f       	mov	r29, r28
    5c14:	cc 27       	eor	r28, r28
    5c16:	67 e2       	ldi	r22, 0x27	; 39
    5c18:	70 e0       	ldi	r23, 0x00	; 0
    5c1a:	81 2f       	mov	r24, r17
    5c1c:	4c dd       	rcall	.-1384   	; 0x56b6 <_ZN10W5500Class6readSnEhj>
    5c1e:	9e 01       	movw	r18, r28
    5c20:	28 0f       	add	r18, r24
    5c22:	31 1d       	adc	r19, r1
    5c24:	c9 01       	movw	r24, r18
    5c26:	df 91       	pop	r29
    5c28:	cf 91       	pop	r28
    5c2a:	1f 91       	pop	r17
    5c2c:	08 95       	ret

00005c2e <_ZN10W5500Class17getRXReceivedSizeEh>:
    5c2e:	ff 92       	push	r15
    5c30:	0f 93       	push	r16
    5c32:	1f 93       	push	r17
    5c34:	cf 93       	push	r28
    5c36:	df 93       	push	r29
    5c38:	f6 2e       	mov	r15, r22
    5c3a:	c0 e0       	ldi	r28, 0x00	; 0
    5c3c:	d0 e0       	ldi	r29, 0x00	; 0
    5c3e:	8f 2d       	mov	r24, r15
    5c40:	df df       	rcall	.-66     	; 0x5c00 <_ZN10W5500Class12readSnRX_RSREh>
    5c42:	8c 01       	movw	r16, r24
    5c44:	89 2b       	or	r24, r25
    5c46:	19 f0       	breq	.+6      	; 0x5c4e <_ZN10W5500Class17getRXReceivedSizeEh+0x20>
    5c48:	8f 2d       	mov	r24, r15
    5c4a:	da df       	rcall	.-76     	; 0x5c00 <_ZN10W5500Class12readSnRX_RSREh>
    5c4c:	ec 01       	movw	r28, r24
    5c4e:	c0 17       	cp	r28, r16
    5c50:	d1 07       	cpc	r29, r17
    5c52:	a9 f7       	brne	.-22     	; 0x5c3e <_ZN10W5500Class17getRXReceivedSizeEh+0x10>
    5c54:	ce 01       	movw	r24, r28
    5c56:	df 91       	pop	r29
    5c58:	cf 91       	pop	r28
    5c5a:	1f 91       	pop	r17
    5c5c:	0f 91       	pop	r16
    5c5e:	ff 90       	pop	r15
    5c60:	08 95       	ret

00005c62 <_ZN10W5500Class27send_data_processing_offsetEhjPKhj>:
    5c62:	af 92       	push	r10
    5c64:	bf 92       	push	r11
    5c66:	df 92       	push	r13
    5c68:	ef 92       	push	r14
    5c6a:	ff 92       	push	r15
    5c6c:	0f 93       	push	r16
    5c6e:	1f 93       	push	r17
    5c70:	cf 93       	push	r28
    5c72:	df 93       	push	r29
    5c74:	d6 2e       	mov	r13, r22
    5c76:	7a 01       	movw	r14, r20
    5c78:	59 01       	movw	r10, r18
    5c7a:	64 e2       	ldi	r22, 0x24	; 36
    5c7c:	70 e0       	ldi	r23, 0x00	; 0
    5c7e:	8d 2d       	mov	r24, r13
    5c80:	1a dd       	rcall	.-1484   	; 0x56b6 <_ZN10W5500Class6readSnEhj>
    5c82:	c8 2f       	mov	r28, r24
    5c84:	65 e2       	ldi	r22, 0x25	; 37
    5c86:	70 e0       	ldi	r23, 0x00	; 0
    5c88:	8d 2d       	mov	r24, r13
    5c8a:	15 dd       	rcall	.-1494   	; 0x56b6 <_ZN10W5500Class6readSnEhj>
    5c8c:	d0 e0       	ldi	r29, 0x00	; 0
    5c8e:	dc 2f       	mov	r29, r28
    5c90:	cc 27       	eor	r28, r28
    5c92:	e8 0e       	add	r14, r24
    5c94:	f1 1c       	adc	r15, r1
    5c96:	ce 0d       	add	r28, r14
    5c98:	df 1d       	adc	r29, r15
    5c9a:	6d 2d       	mov	r22, r13
    5c9c:	62 95       	swap	r22
    5c9e:	66 0f       	add	r22, r22
    5ca0:	60 7e       	andi	r22, 0xE0	; 224
    5ca2:	6c 5e       	subi	r22, 0xEC	; 236
    5ca4:	98 01       	movw	r18, r16
    5ca6:	a5 01       	movw	r20, r10
    5ca8:	ce 01       	movw	r24, r28
    5caa:	05 df       	rcall	.-502    	; 0x5ab6 <_ZN10W5500Class5writeEjhPKhj>
    5cac:	c0 0f       	add	r28, r16
    5cae:	d1 1f       	adc	r29, r17
    5cb0:	4d 2f       	mov	r20, r29
    5cb2:	64 e2       	ldi	r22, 0x24	; 36
    5cb4:	70 e0       	ldi	r23, 0x00	; 0
    5cb6:	8d 2d       	mov	r24, r13
    5cb8:	09 dd       	rcall	.-1518   	; 0x56cc <_ZN10W5500Class7writeSnEhjh>
    5cba:	4c 2f       	mov	r20, r28
    5cbc:	65 e2       	ldi	r22, 0x25	; 37
    5cbe:	70 e0       	ldi	r23, 0x00	; 0
    5cc0:	8d 2d       	mov	r24, r13
    5cc2:	df 91       	pop	r29
    5cc4:	cf 91       	pop	r28
    5cc6:	1f 91       	pop	r17
    5cc8:	0f 91       	pop	r16
    5cca:	ff 90       	pop	r15
    5ccc:	ef 90       	pop	r14
    5cce:	df 90       	pop	r13
    5cd0:	bf 90       	pop	r11
    5cd2:	af 90       	pop	r10
    5cd4:	fb cc       	rjmp	.-1546   	; 0x56cc <_ZN10W5500Class7writeSnEhjh>

00005cd6 <_ZN10W5500Class20send_data_processingEhPKhj>:
    5cd6:	0f 93       	push	r16
    5cd8:	1f 93       	push	r17
    5cda:	89 01       	movw	r16, r18
    5cdc:	9a 01       	movw	r18, r20
    5cde:	40 e0       	ldi	r20, 0x00	; 0
    5ce0:	50 e0       	ldi	r21, 0x00	; 0
    5ce2:	bf df       	rcall	.-130    	; 0x5c62 <_ZN10W5500Class27send_data_processing_offsetEhjPKhj>
    5ce4:	1f 91       	pop	r17
    5ce6:	0f 91       	pop	r16
    5ce8:	08 95       	ret

00005cea <_ZN10W5500Class4readEjhPhj>:
    5cea:	df 92       	push	r13
    5cec:	ef 92       	push	r14
    5cee:	ff 92       	push	r15
    5cf0:	0f 93       	push	r16
    5cf2:	1f 93       	push	r17
    5cf4:	cf 93       	push	r28
    5cf6:	df 93       	push	r29
    5cf8:	d8 2f       	mov	r29, r24
    5cfa:	d9 2e       	mov	r13, r25
    5cfc:	c6 2f       	mov	r28, r22
    5cfe:	7a 01       	movw	r14, r20
    5d00:	89 01       	movw	r16, r18
    5d02:	80 91 5b 0c 	lds	r24, 0x0C5B	; 0x800c5b <wiznet_SPI_settings>
    5d06:	90 91 5c 0c 	lds	r25, 0x0C5C	; 0x800c5c <wiznet_SPI_settings+0x1>
    5d0a:	81 de       	rcall	.-766    	; 0x5a0e <_ZN8SPIClass16beginTransactionE11SPISettings>
    5d0c:	b2 de       	rcall	.-668    	; 0x5a72 <_ZN10W5500Class5setSSEv>
    5d0e:	8d 2d       	mov	r24, r13
    5d10:	98 de       	rcall	.-720    	; 0x5a42 <_ZN8SPIClass8transferEh>
    5d12:	8d 2f       	mov	r24, r29
    5d14:	96 de       	rcall	.-724    	; 0x5a42 <_ZN8SPIClass8transferEh>
    5d16:	8c 2f       	mov	r24, r28
    5d18:	94 de       	rcall	.-728    	; 0x5a42 <_ZN8SPIClass8transferEh>
    5d1a:	e7 01       	movw	r28, r14
    5d1c:	e0 0e       	add	r14, r16
    5d1e:	f1 1e       	adc	r15, r17
    5d20:	ce 15       	cp	r28, r14
    5d22:	df 05       	cpc	r29, r15
    5d24:	21 f0       	breq	.+8      	; 0x5d2e <_ZN10W5500Class4readEjhPhj+0x44>
    5d26:	80 e0       	ldi	r24, 0x00	; 0
    5d28:	8c de       	rcall	.-744    	; 0x5a42 <_ZN8SPIClass8transferEh>
    5d2a:	89 93       	st	Y+, r24
    5d2c:	f9 cf       	rjmp	.-14     	; 0x5d20 <_ZN10W5500Class4readEjhPhj+0x36>
    5d2e:	a3 de       	rcall	.-698    	; 0x5a76 <_ZN10W5500Class7resetSSEv>
    5d30:	8f de       	rcall	.-738    	; 0x5a50 <_ZN8SPIClass14endTransactionEv>
    5d32:	c8 01       	movw	r24, r16
    5d34:	df 91       	pop	r29
    5d36:	cf 91       	pop	r28
    5d38:	1f 91       	pop	r17
    5d3a:	0f 91       	pop	r16
    5d3c:	ff 90       	pop	r15
    5d3e:	ef 90       	pop	r14
    5d40:	df 90       	pop	r13
    5d42:	08 95       	ret

00005d44 <_ZN10W5500Class9read_dataEhjPVhj>:
    5d44:	0f 93       	push	r16
    5d46:	1f 93       	push	r17
    5d48:	cf 93       	push	r28
    5d4a:	df 93       	push	r29
    5d4c:	00 d0       	rcall	.+0      	; 0x5d4e <_ZN10W5500Class9read_dataEhjPVhj+0xa>
    5d4e:	cd b7       	in	r28, 0x3d	; 61
    5d50:	de b7       	in	r29, 0x3e	; 62
    5d52:	5a 83       	std	Y+2, r21	; 0x02
    5d54:	49 83       	std	Y+1, r20	; 0x01
    5d56:	a9 01       	movw	r20, r18
    5d58:	98 01       	movw	r18, r16
    5d5a:	89 81       	ldd	r24, Y+1	; 0x01
    5d5c:	9a 81       	ldd	r25, Y+2	; 0x02
    5d5e:	62 95       	swap	r22
    5d60:	66 0f       	add	r22, r22
    5d62:	60 7e       	andi	r22, 0xE0	; 224
    5d64:	68 5e       	subi	r22, 0xE8	; 232
    5d66:	0f 90       	pop	r0
    5d68:	0f 90       	pop	r0
    5d6a:	df 91       	pop	r29
    5d6c:	cf 91       	pop	r28
    5d6e:	1f 91       	pop	r17
    5d70:	0f 91       	pop	r16
    5d72:	bb cf       	rjmp	.-138    	; 0x5cea <_ZN10W5500Class4readEjhPhj>

00005d74 <_ZN10W5500Class20recv_data_processingEhPhjh>:
    5d74:	8f 92       	push	r8
    5d76:	9f 92       	push	r9
    5d78:	af 92       	push	r10
    5d7a:	bf 92       	push	r11
    5d7c:	cf 92       	push	r12
    5d7e:	df 92       	push	r13
    5d80:	ef 92       	push	r14
    5d82:	ff 92       	push	r15
    5d84:	0f 93       	push	r16
    5d86:	1f 93       	push	r17
    5d88:	cf 93       	push	r28
    5d8a:	df 93       	push	r29
    5d8c:	6c 01       	movw	r12, r24
    5d8e:	96 2e       	mov	r9, r22
    5d90:	5a 01       	movw	r10, r20
    5d92:	79 01       	movw	r14, r18
    5d94:	80 2e       	mov	r8, r16
    5d96:	68 e2       	ldi	r22, 0x28	; 40
    5d98:	70 e0       	ldi	r23, 0x00	; 0
    5d9a:	89 2d       	mov	r24, r9
    5d9c:	8c dc       	rcall	.-1768   	; 0x56b6 <_ZN10W5500Class6readSnEhj>
    5d9e:	08 2f       	mov	r16, r24
    5da0:	69 e2       	ldi	r22, 0x29	; 41
    5da2:	70 e0       	ldi	r23, 0x00	; 0
    5da4:	89 2d       	mov	r24, r9
    5da6:	87 dc       	rcall	.-1778   	; 0x56b6 <_ZN10W5500Class6readSnEhj>
    5da8:	10 e0       	ldi	r17, 0x00	; 0
    5daa:	10 2f       	mov	r17, r16
    5dac:	00 27       	eor	r16, r16
    5dae:	e8 01       	movw	r28, r16
    5db0:	c8 0f       	add	r28, r24
    5db2:	d1 1d       	adc	r29, r1
    5db4:	87 01       	movw	r16, r14
    5db6:	95 01       	movw	r18, r10
    5db8:	ae 01       	movw	r20, r28
    5dba:	69 2d       	mov	r22, r9
    5dbc:	c6 01       	movw	r24, r12
    5dbe:	c2 df       	rcall	.-124    	; 0x5d44 <_ZN10W5500Class9read_dataEhjPVhj>
    5dc0:	81 10       	cpse	r8, r1
    5dc2:	18 c0       	rjmp	.+48     	; 0x5df4 <_ZN10W5500Class20recv_data_processingEhPhjh+0x80>
    5dc4:	0c 0f       	add	r16, r28
    5dc6:	1d 1f       	adc	r17, r29
    5dc8:	41 2f       	mov	r20, r17
    5dca:	68 e2       	ldi	r22, 0x28	; 40
    5dcc:	70 e0       	ldi	r23, 0x00	; 0
    5dce:	89 2d       	mov	r24, r9
    5dd0:	7d dc       	rcall	.-1798   	; 0x56cc <_ZN10W5500Class7writeSnEhjh>
    5dd2:	40 2f       	mov	r20, r16
    5dd4:	69 e2       	ldi	r22, 0x29	; 41
    5dd6:	70 e0       	ldi	r23, 0x00	; 0
    5dd8:	89 2d       	mov	r24, r9
    5dda:	df 91       	pop	r29
    5ddc:	cf 91       	pop	r28
    5dde:	1f 91       	pop	r17
    5de0:	0f 91       	pop	r16
    5de2:	ff 90       	pop	r15
    5de4:	ef 90       	pop	r14
    5de6:	df 90       	pop	r13
    5de8:	cf 90       	pop	r12
    5dea:	bf 90       	pop	r11
    5dec:	af 90       	pop	r10
    5dee:	9f 90       	pop	r9
    5df0:	8f 90       	pop	r8
    5df2:	6c cc       	rjmp	.-1832   	; 0x56cc <_ZN10W5500Class7writeSnEhjh>
    5df4:	df 91       	pop	r29
    5df6:	cf 91       	pop	r28
    5df8:	1f 91       	pop	r17
    5dfa:	0f 91       	pop	r16
    5dfc:	ff 90       	pop	r15
    5dfe:	ef 90       	pop	r14
    5e00:	df 90       	pop	r13
    5e02:	cf 90       	pop	r12
    5e04:	bf 90       	pop	r11
    5e06:	af 90       	pop	r10
    5e08:	9f 90       	pop	r9
    5e0a:	8f 90       	pop	r8
    5e0c:	08 95       	ret

00005e0e <_ZN10W5500Class9execCmdSnEh7SockCMD>:
    5e0e:	cf 93       	push	r28
    5e10:	c6 2f       	mov	r28, r22
    5e12:	61 e0       	ldi	r22, 0x01	; 1
    5e14:	70 e0       	ldi	r23, 0x00	; 0
    5e16:	8c 2f       	mov	r24, r28
    5e18:	59 dc       	rcall	.-1870   	; 0x56cc <_ZN10W5500Class7writeSnEhjh>
    5e1a:	61 e0       	ldi	r22, 0x01	; 1
    5e1c:	70 e0       	ldi	r23, 0x00	; 0
    5e1e:	8c 2f       	mov	r24, r28
    5e20:	4a dc       	rcall	.-1900   	; 0x56b6 <_ZN10W5500Class6readSnEhj>
    5e22:	81 11       	cpse	r24, r1
    5e24:	fa cf       	rjmp	.-12     	; 0x5e1a <_ZN10W5500Class9execCmdSnEh7SockCMD+0xc>
    5e26:	cf 91       	pop	r28
    5e28:	08 95       	ret

00005e2a <_GLOBAL__sub_I_w5500>:
    // Invert the SPI2X bit
    clockDiv ^= 0x1;

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    5e2a:	eb e5       	ldi	r30, 0x5B	; 91
    5e2c:	fc e0       	ldi	r31, 0x0C	; 12
    5e2e:	80 e5       	ldi	r24, 0x50	; 80
    5e30:	80 83       	st	Z, r24
    spsr = clockDiv & SPI_2XCLOCK_MASK;
    5e32:	81 e0       	ldi	r24, 0x01	; 1
    5e34:	81 83       	std	Z+1, r24	; 0x01
    5e36:	08 95       	ret

00005e38 <_ZN5I2CIOC1Ev>:
      // Remove the values which are not inputs and get the value of the pin
      pinVal = this->read() & _dirMask;
      pinVal = ( pinVal >> pin ) & 0x01; // Get the pin value
   }
   return (pinVal);
}
    5e38:	fc 01       	movw	r30, r24
    5e3a:	12 82       	std	Z+2, r1	; 0x02
    5e3c:	8f ef       	ldi	r24, 0xFF	; 255
    5e3e:	81 83       	std	Z+1, r24	; 0x01
    5e40:	10 82       	st	Z, r1
    5e42:	13 82       	std	Z+3, r1	; 0x03
    5e44:	08 95       	ret

00005e46 <_ZN5I2CIO8portModeEh>:
    5e46:	fc 01       	movw	r30, r24
    5e48:	83 81       	ldd	r24, Z+3	; 0x03
    5e4a:	88 23       	and	r24, r24
    5e4c:	31 f0       	breq	.+12     	; 0x5e5a <_ZN5I2CIO8portModeEh+0x14>
    5e4e:	61 11       	cpse	r22, r1
    5e50:	03 c0       	rjmp	.+6      	; 0x5e58 <_ZN5I2CIO8portModeEh+0x12>
    5e52:	8f ef       	ldi	r24, 0xFF	; 255
    5e54:	81 83       	std	Z+1, r24	; 0x01
    5e56:	08 95       	ret
    5e58:	11 82       	std	Z+1, r1	; 0x01
    5e5a:	08 95       	ret

00005e5c <_ZN5I2CIO11isAvailableEh>:
    5e5c:	80 ed       	ldi	r24, 0xD0	; 208
    5e5e:	9c e0       	ldi	r25, 0x0C	; 12
    5e60:	f0 d5       	rcall	.+3040   	; 0x6a42 <_ZN7TwoWire17beginTransmissionEh>
    5e62:	80 ed       	ldi	r24, 0xD0	; 208
    5e64:	9c e0       	ldi	r25, 0x0C	; 12
    5e66:	6e d6       	rcall	.+3292   	; 0x6b44 <_ZN7TwoWire15endTransmissionEv>
    5e68:	91 e0       	ldi	r25, 0x01	; 1
    5e6a:	81 11       	cpse	r24, r1
    5e6c:	90 e0       	ldi	r25, 0x00	; 0
    5e6e:	89 2f       	mov	r24, r25
    5e70:	08 95       	ret

00005e72 <_ZN5I2CIO5beginEh>:
    5e72:	cf 93       	push	r28
    5e74:	df 93       	push	r29
    5e76:	ec 01       	movw	r28, r24
    5e78:	6a 83       	std	Y+2, r22	; 0x02
    5e7a:	80 ed       	ldi	r24, 0xD0	; 208
    5e7c:	9c e0       	ldi	r25, 0x0C	; 12
    5e7e:	ce d5       	rcall	.+2972   	; 0x6a1c <_ZN7TwoWire5beginEv>
    5e80:	6a 81       	ldd	r22, Y+2	; 0x02
    5e82:	ce 01       	movw	r24, r28
    5e84:	eb df       	rcall	.-42     	; 0x5e5c <_ZN5I2CIO11isAvailableEh>
    5e86:	8b 83       	std	Y+3, r24	; 0x03
    5e88:	88 23       	and	r24, r24
    5e8a:	21 f0       	breq	.+8      	; 0x5e94 <_ZN5I2CIO5beginEh+0x22>
    5e8c:	80 ed       	ldi	r24, 0xD0	; 208
    5e8e:	9c e0       	ldi	r25, 0x0C	; 12
    5e90:	01 d5       	rcall	.+2562   	; 0x6894 <_ZN7TwoWire4readEv>
    5e92:	88 83       	st	Y, r24
    5e94:	8b 81       	ldd	r24, Y+3	; 0x03
    5e96:	90 e0       	ldi	r25, 0x00	; 0
    5e98:	df 91       	pop	r29
    5e9a:	cf 91       	pop	r28
    5e9c:	08 95       	ret

00005e9e <_ZN5I2CIO5writeEh>:
}

//
// write
int I2CIO::write ( uint8_t value )
{
    5e9e:	cf 93       	push	r28
    5ea0:	df 93       	push	r29
   int status = 0;
   
   if ( _initialised )
    5ea2:	fc 01       	movw	r30, r24
    5ea4:	23 81       	ldd	r18, Z+3	; 0x03
    5ea6:	22 23       	and	r18, r18
    5ea8:	99 f0       	breq	.+38     	; 0x5ed0 <_ZN5I2CIO5writeEh+0x32>
    5eaa:	ec 01       	movw	r28, r24
   {
      // Only write HIGH the values of the ports that have been initialised as
      // outputs updating the output shadow of the device
      _shadow = ( value & ~(_dirMask) );
    5eac:	81 81       	ldd	r24, Z+1	; 0x01
    5eae:	80 95       	com	r24
    5eb0:	68 23       	and	r22, r24
    5eb2:	60 83       	st	Z, r22
   
      Wire.beginTransmission ( _i2cAddr );
    5eb4:	62 81       	ldd	r22, Z+2	; 0x02
    5eb6:	80 ed       	ldi	r24, 0xD0	; 208
    5eb8:	9c e0       	ldi	r25, 0x0C	; 12
    5eba:	c3 d5       	rcall	.+2950   	; 0x6a42 <_ZN7TwoWire17beginTransmissionEh>
#if (ARDUINO <  100)
      Wire.send ( _shadow );
#else
      Wire.write ( _shadow );
    5ebc:	68 81       	ld	r22, Y
    5ebe:	80 ed       	ldi	r24, 0xD0	; 208
    5ec0:	9c e0       	ldi	r25, 0x0C	; 12
    5ec2:	6e d5       	rcall	.+2780   	; 0x69a0 <_ZN7TwoWire5writeEh>
#endif  
      status = Wire.endTransmission ();
    5ec4:	80 ed       	ldi	r24, 0xD0	; 208
    5ec6:	9c e0       	ldi	r25, 0x0C	; 12
    5ec8:	3d d6       	rcall	.+3194   	; 0x6b44 <_ZN7TwoWire15endTransmissionEv>
    5eca:	28 2f       	mov	r18, r24
    5ecc:	30 e0       	ldi	r19, 0x00	; 0
    5ece:	02 c0       	rjmp	.+4      	; 0x5ed4 <_ZN5I2CIO5writeEh+0x36>

//
// write
int I2CIO::write ( uint8_t value )
{
   int status = 0;
    5ed0:	20 e0       	ldi	r18, 0x00	; 0
    5ed2:	30 e0       	ldi	r19, 0x00	; 0
#else
      Wire.write ( _shadow );
#endif  
      status = Wire.endTransmission ();
   }
   return ( (status == 0) );
    5ed4:	81 e0       	ldi	r24, 0x01	; 1
    5ed6:	90 e0       	ldi	r25, 0x00	; 0
    5ed8:	23 2b       	or	r18, r19
    5eda:	11 f0       	breq	.+4      	; 0x5ee0 <_ZN5I2CIO5writeEh+0x42>
    5edc:	80 e0       	ldi	r24, 0x00	; 0
    5ede:	90 e0       	ldi	r25, 0x00	; 0
}
    5ee0:	df 91       	pop	r29
    5ee2:	cf 91       	pop	r28
    5ee4:	08 95       	ret

00005ee6 <_ZN3LCD15setBacklightPinEh13t_backlighPol>:

// This will 'left justify' text from the cursor
void LCD::noAutoscroll(void) 
{
   _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
   command(LCD_ENTRYMODESET | _displaymode);
    5ee6:	08 95       	ret

00005ee8 <_ZN3LCD12setBacklightEh>:
    5ee8:	08 95       	ret

00005eea <_ZN3LCD5writeEh>:
    5eea:	dc 01       	movw	r26, r24
    5eec:	ed 91       	ld	r30, X+
    5eee:	fc 91       	ld	r31, X
    5ef0:	06 84       	ldd	r0, Z+14	; 0x0e
    5ef2:	f7 85       	ldd	r31, Z+15	; 0x0f
    5ef4:	e0 2d       	mov	r30, r0
    5ef6:	41 e0       	ldi	r20, 0x01	; 1
    5ef8:	09 95       	icall
    5efa:	81 e0       	ldi	r24, 0x01	; 1
    5efc:	90 e0       	ldi	r25, 0x00	; 0
    5efe:	08 95       	ret

00005f00 <_ZN3LCDC1Ev>:
    5f00:	fc 01       	movw	r30, r24
    5f02:	13 82       	std	Z+3, r1	; 0x03
    5f04:	12 82       	std	Z+2, r1	; 0x02
    5f06:	23 e2       	ldi	r18, 0x23	; 35
    5f08:	3a e0       	ldi	r19, 0x0A	; 10
    5f0a:	31 83       	std	Z+1, r19	; 0x01
    5f0c:	20 83       	st	Z, r18
    5f0e:	08 95       	ret

00005f10 <_ZN3LCD9backlightEv>:
    5f10:	dc 01       	movw	r26, r24
    5f12:	ed 91       	ld	r30, X+
    5f14:	fc 91       	ld	r31, X
    5f16:	04 84       	ldd	r0, Z+12	; 0x0c
    5f18:	f5 85       	ldd	r31, Z+13	; 0x0d
    5f1a:	e0 2d       	mov	r30, r0
    5f1c:	6f ef       	ldi	r22, 0xFF	; 255
    5f1e:	09 94       	ijmp

00005f20 <_ZN3LCD11noBacklightEv>:
    5f20:	dc 01       	movw	r26, r24
    5f22:	ed 91       	ld	r30, X+
    5f24:	fc 91       	ld	r31, X
    5f26:	04 84       	ldd	r0, Z+12	; 0x0c
    5f28:	f5 85       	ldd	r31, Z+13	; 0x0d
    5f2a:	e0 2d       	mov	r30, r0
    5f2c:	60 e0       	ldi	r22, 0x00	; 0
    5f2e:	09 94       	ijmp

00005f30 <_ZN3LCD7commandEh>:
    5f30:	dc 01       	movw	r26, r24
    5f32:	ed 91       	ld	r30, X+
    5f34:	fc 91       	ld	r31, X
    5f36:	06 84       	ldd	r0, Z+14	; 0x0e
    5f38:	f7 85       	ldd	r31, Z+15	; 0x0f
    5f3a:	e0 2d       	mov	r30, r0
    5f3c:	40 e0       	ldi	r20, 0x00	; 0
    5f3e:	09 94       	ijmp

00005f40 <_ZN3LCD5clearEv>:
    5f40:	61 e0       	ldi	r22, 0x01	; 1
    5f42:	f6 df       	rcall	.-20     	; 0x5f30 <_ZN3LCD7commandEh>
    5f44:	80 ed       	ldi	r24, 0xD0	; 208
    5f46:	97 e0       	ldi	r25, 0x07	; 7
    5f48:	0c 94 be 39 	jmp	0x737c	; 0x737c <delayMicroseconds>

00005f4c <_ZN3LCD9setCursorEhh>:
    5f4c:	cf 93       	push	r28
    5f4e:	df 93       	push	r29
    5f50:	cd b7       	in	r28, 0x3d	; 61
    5f52:	de b7       	in	r29, 0x3e	; 62
    5f54:	28 97       	sbiw	r28, 0x08	; 8
    5f56:	0f b6       	in	r0, 0x3f	; 63
    5f58:	f8 94       	cli
    5f5a:	de bf       	out	0x3e, r29	; 62
    5f5c:	0f be       	out	0x3f, r0	; 63
    5f5e:	cd bf       	out	0x3d, r28	; 61
    5f60:	fc 01       	movw	r30, r24
    5f62:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <_ZN14EthernetClient8_srcportE+0xd2>
    5f66:	90 91 38 02 	lds	r25, 0x0238	; 0x800238 <_ZN14EthernetClient8_srcportE+0xd3>
    5f6a:	a0 91 39 02 	lds	r26, 0x0239	; 0x800239 <_ZN14EthernetClient8_srcportE+0xd4>
    5f6e:	b0 91 3a 02 	lds	r27, 0x023A	; 0x80023a <_ZN14EthernetClient8_srcportE+0xd5>
    5f72:	8d 83       	std	Y+5, r24	; 0x05
    5f74:	9e 83       	std	Y+6, r25	; 0x06
    5f76:	af 83       	std	Y+7, r26	; 0x07
    5f78:	b8 87       	std	Y+8, r27	; 0x08
    5f7a:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <_ZN14EthernetClient8_srcportE+0xd6>
    5f7e:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <_ZN14EthernetClient8_srcportE+0xd7>
    5f82:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <_ZN14EthernetClient8_srcportE+0xd8>
    5f86:	b0 91 3e 02 	lds	r27, 0x023E	; 0x80023e <_ZN14EthernetClient8_srcportE+0xd9>
    5f8a:	89 83       	std	Y+1, r24	; 0x01
    5f8c:	9a 83       	std	Y+2, r25	; 0x02
    5f8e:	ab 83       	std	Y+3, r26	; 0x03
    5f90:	bc 83       	std	Y+4, r27	; 0x04
    5f92:	87 81       	ldd	r24, Z+7	; 0x07
    5f94:	48 17       	cp	r20, r24
    5f96:	10 f0       	brcs	.+4      	; 0x5f9c <_ZN3LCD9setCursorEhh+0x50>
    5f98:	4f ef       	ldi	r20, 0xFF	; 255
    5f9a:	48 0f       	add	r20, r24
    5f9c:	90 85       	ldd	r25, Z+8	; 0x08
    5f9e:	50 e0       	ldi	r21, 0x00	; 0
    5fa0:	de 01       	movw	r26, r28
    5fa2:	a4 0f       	add	r26, r20
    5fa4:	b5 1f       	adc	r27, r21
    5fa6:	90 31       	cpi	r25, 0x10	; 16
    5fa8:	29 f4       	brne	.+10     	; 0x5fb4 <_ZN3LCD9setCursorEhh+0x68>
    5faa:	84 30       	cpi	r24, 0x04	; 4
    5fac:	19 f4       	brne	.+6      	; 0x5fb4 <_ZN3LCD9setCursorEhh+0x68>
    5fae:	11 96       	adiw	r26, 0x01	; 1
    5fb0:	9c 91       	ld	r25, X
    5fb2:	02 c0       	rjmp	.+4      	; 0x5fb8 <_ZN3LCD9setCursorEhh+0x6c>
    5fb4:	15 96       	adiw	r26, 0x05	; 5
    5fb6:	9c 91       	ld	r25, X
    5fb8:	69 0f       	add	r22, r25
    5fba:	60 68       	ori	r22, 0x80	; 128
    5fbc:	cf 01       	movw	r24, r30
    5fbe:	28 96       	adiw	r28, 0x08	; 8
    5fc0:	0f b6       	in	r0, 0x3f	; 63
    5fc2:	f8 94       	cli
    5fc4:	de bf       	out	0x3e, r29	; 62
    5fc6:	0f be       	out	0x3f, r0	; 63
    5fc8:	cd bf       	out	0x3d, r28	; 61
    5fca:	df 91       	pop	r29
    5fcc:	cf 91       	pop	r28
    5fce:	b0 cf       	rjmp	.-160    	; 0x5f30 <_ZN3LCD7commandEh>

00005fd0 <_ZN3LCD9noDisplayEv>:
    5fd0:	fc 01       	movw	r30, r24
    5fd2:	65 81       	ldd	r22, Z+5	; 0x05
    5fd4:	6b 7f       	andi	r22, 0xFB	; 251
    5fd6:	65 83       	std	Z+5, r22	; 0x05
    5fd8:	68 60       	ori	r22, 0x08	; 8
    5fda:	aa cf       	rjmp	.-172    	; 0x5f30 <_ZN3LCD7commandEh>

00005fdc <_ZN3LCD7displayEv>:
    5fdc:	fc 01       	movw	r30, r24
    5fde:	65 81       	ldd	r22, Z+5	; 0x05
    5fe0:	26 2f       	mov	r18, r22
    5fe2:	24 60       	ori	r18, 0x04	; 4
    5fe4:	25 83       	std	Z+5, r18	; 0x05
    5fe6:	6c 60       	ori	r22, 0x0C	; 12
    5fe8:	a3 cf       	rjmp	.-186    	; 0x5f30 <_ZN3LCD7commandEh>

00005fea <_ZN3LCD5beginEhhh>:
    5fea:	cf 93       	push	r28
    5fec:	df 93       	push	r29
    5fee:	ec 01       	movw	r28, r24
    5ff0:	42 30       	cpi	r20, 0x02	; 2
    5ff2:	18 f0       	brcs	.+6      	; 0x5ffa <_ZN3LCD5beginEhhh+0x10>
    5ff4:	8c 81       	ldd	r24, Y+4	; 0x04
    5ff6:	88 60       	ori	r24, 0x08	; 8
    5ff8:	8c 83       	std	Y+4, r24	; 0x04
    5ffa:	4f 83       	std	Y+7, r20	; 0x07
    5ffc:	68 87       	std	Y+8, r22	; 0x08
    5ffe:	22 23       	and	r18, r18
    6000:	29 f0       	breq	.+10     	; 0x600c <_ZN3LCD5beginEhhh+0x22>
    6002:	41 30       	cpi	r20, 0x01	; 1
    6004:	19 f4       	brne	.+6      	; 0x600c <_ZN3LCD5beginEhhh+0x22>
    6006:	8c 81       	ldd	r24, Y+4	; 0x04
    6008:	84 60       	ori	r24, 0x04	; 4
    600a:	8c 83       	std	Y+4, r24	; 0x04
    600c:	64 e6       	ldi	r22, 0x64	; 100
    600e:	70 e0       	ldi	r23, 0x00	; 0
    6010:	80 e0       	ldi	r24, 0x00	; 0
    6012:	90 e0       	ldi	r25, 0x00	; 0
    6014:	0e 94 85 39 	call	0x730a	; 0x730a <delay>
    6018:	6c 81       	ldd	r22, Y+4	; 0x04
    601a:	64 fd       	sbrc	r22, 4
    601c:	31 c0       	rjmp	.+98     	; 0x6080 <_ZN3LCD5beginEhhh+0x96>
    601e:	e8 81       	ld	r30, Y
    6020:	f9 81       	ldd	r31, Y+1	; 0x01
    6022:	06 84       	ldd	r0, Z+14	; 0x0e
    6024:	f7 85       	ldd	r31, Z+15	; 0x0f
    6026:	e0 2d       	mov	r30, r0
    6028:	42 e0       	ldi	r20, 0x02	; 2
    602a:	63 e0       	ldi	r22, 0x03	; 3
    602c:	ce 01       	movw	r24, r28
    602e:	09 95       	icall
    6030:	84 e9       	ldi	r24, 0x94	; 148
    6032:	91 e1       	ldi	r25, 0x11	; 17
    6034:	0e 94 be 39 	call	0x737c	; 0x737c <delayMicroseconds>
    6038:	e8 81       	ld	r30, Y
    603a:	f9 81       	ldd	r31, Y+1	; 0x01
    603c:	06 84       	ldd	r0, Z+14	; 0x0e
    603e:	f7 85       	ldd	r31, Z+15	; 0x0f
    6040:	e0 2d       	mov	r30, r0
    6042:	42 e0       	ldi	r20, 0x02	; 2
    6044:	63 e0       	ldi	r22, 0x03	; 3
    6046:	ce 01       	movw	r24, r28
    6048:	09 95       	icall
    604a:	86 e9       	ldi	r24, 0x96	; 150
    604c:	90 e0       	ldi	r25, 0x00	; 0
    604e:	0e 94 be 39 	call	0x737c	; 0x737c <delayMicroseconds>
    6052:	e8 81       	ld	r30, Y
    6054:	f9 81       	ldd	r31, Y+1	; 0x01
    6056:	06 84       	ldd	r0, Z+14	; 0x0e
    6058:	f7 85       	ldd	r31, Z+15	; 0x0f
    605a:	e0 2d       	mov	r30, r0
    605c:	42 e0       	ldi	r20, 0x02	; 2
    605e:	63 e0       	ldi	r22, 0x03	; 3
    6060:	ce 01       	movw	r24, r28
    6062:	09 95       	icall
    6064:	86 e9       	ldi	r24, 0x96	; 150
    6066:	90 e0       	ldi	r25, 0x00	; 0
    6068:	0e 94 be 39 	call	0x737c	; 0x737c <delayMicroseconds>
    606c:	e8 81       	ld	r30, Y
    606e:	f9 81       	ldd	r31, Y+1	; 0x01
    6070:	06 84       	ldd	r0, Z+14	; 0x0e
    6072:	f7 85       	ldd	r31, Z+15	; 0x0f
    6074:	e0 2d       	mov	r30, r0
    6076:	42 e0       	ldi	r20, 0x02	; 2
    6078:	62 e0       	ldi	r22, 0x02	; 2
    607a:	ce 01       	movw	r24, r28
    607c:	09 95       	icall
    607e:	13 c0       	rjmp	.+38     	; 0x60a6 <_ZN3LCD5beginEhhh+0xbc>
    6080:	60 62       	ori	r22, 0x20	; 32
    6082:	ce 01       	movw	r24, r28
    6084:	55 df       	rcall	.-342    	; 0x5f30 <_ZN3LCD7commandEh>
    6086:	84 e9       	ldi	r24, 0x94	; 148
    6088:	91 e1       	ldi	r25, 0x11	; 17
    608a:	0e 94 be 39 	call	0x737c	; 0x737c <delayMicroseconds>
    608e:	6c 81       	ldd	r22, Y+4	; 0x04
    6090:	60 62       	ori	r22, 0x20	; 32
    6092:	ce 01       	movw	r24, r28
    6094:	4d df       	rcall	.-358    	; 0x5f30 <_ZN3LCD7commandEh>
    6096:	86 e9       	ldi	r24, 0x96	; 150
    6098:	90 e0       	ldi	r25, 0x00	; 0
    609a:	0e 94 be 39 	call	0x737c	; 0x737c <delayMicroseconds>
    609e:	6c 81       	ldd	r22, Y+4	; 0x04
    60a0:	60 62       	ori	r22, 0x20	; 32
    60a2:	ce 01       	movw	r24, r28
    60a4:	45 df       	rcall	.-374    	; 0x5f30 <_ZN3LCD7commandEh>
    60a6:	86 e9       	ldi	r24, 0x96	; 150
    60a8:	90 e0       	ldi	r25, 0x00	; 0
    60aa:	0e 94 be 39 	call	0x737c	; 0x737c <delayMicroseconds>
    60ae:	6c 81       	ldd	r22, Y+4	; 0x04
    60b0:	60 62       	ori	r22, 0x20	; 32
    60b2:	ce 01       	movw	r24, r28
    60b4:	3d df       	rcall	.-390    	; 0x5f30 <_ZN3LCD7commandEh>
    60b6:	8c e3       	ldi	r24, 0x3C	; 60
    60b8:	90 e0       	ldi	r25, 0x00	; 0
    60ba:	0e 94 be 39 	call	0x737c	; 0x737c <delayMicroseconds>
    60be:	84 e0       	ldi	r24, 0x04	; 4
    60c0:	8d 83       	std	Y+5, r24	; 0x05
    60c2:	ce 01       	movw	r24, r28
    60c4:	8b df       	rcall	.-234    	; 0x5fdc <_ZN3LCD7displayEv>
    60c6:	ce 01       	movw	r24, r28
    60c8:	3b df       	rcall	.-394    	; 0x5f40 <_ZN3LCD5clearEv>
    60ca:	82 e0       	ldi	r24, 0x02	; 2
    60cc:	8e 83       	std	Y+6, r24	; 0x06
    60ce:	66 e0       	ldi	r22, 0x06	; 6
    60d0:	ce 01       	movw	r24, r28
    60d2:	2e df       	rcall	.-420    	; 0x5f30 <_ZN3LCD7commandEh>
    60d4:	ce 01       	movw	r24, r28
    60d6:	df 91       	pop	r29
    60d8:	cf 91       	pop	r28
    60da:	1a cf       	rjmp	.-460    	; 0x5f10 <_ZN3LCD9backlightEv>

000060dc <_ZN3LCD10createCharEhPh>:
}

// Write to CGRAM of new characters
void LCD::createChar(uint8_t location, uint8_t charmap[]) 
{
    60dc:	ef 92       	push	r14
    60de:	ff 92       	push	r15
    60e0:	0f 93       	push	r16
    60e2:	1f 93       	push	r17
    60e4:	cf 93       	push	r28
    60e6:	df 93       	push	r29
    60e8:	8c 01       	movw	r16, r24
    60ea:	7a 01       	movw	r14, r20
   location &= 0x7;            // we only have 8 locations 0-7
   
   command(LCD_SETCGRAMADDR | (location << 3));
    60ec:	67 70       	andi	r22, 0x07	; 7
    60ee:	88 e0       	ldi	r24, 0x08	; 8
    60f0:	68 9f       	mul	r22, r24
    60f2:	b0 01       	movw	r22, r0
    60f4:	11 24       	eor	r1, r1
    60f6:	60 64       	ori	r22, 0x40	; 64
    60f8:	c8 01       	movw	r24, r16
    60fa:	1a df       	rcall	.-460    	; 0x5f30 <_ZN3LCD7commandEh>
   delayMicroseconds(30);
    60fc:	8e e1       	ldi	r24, 0x1E	; 30
    60fe:	90 e0       	ldi	r25, 0x00	; 0
    6100:	0e 94 be 39 	call	0x737c	; 0x737c <delayMicroseconds>
    6104:	e7 01       	movw	r28, r14
    6106:	a8 e0       	ldi	r26, 0x08	; 8
    6108:	ea 0e       	add	r14, r26
    610a:	f1 1c       	adc	r15, r1
   
   for (uint8_t i = 0; i < 8; i++)
   {
      write(charmap[i]);      // call the virtual write method
    610c:	69 91       	ld	r22, Y+
    610e:	d8 01       	movw	r26, r16
    6110:	ed 91       	ld	r30, X+
    6112:	fc 91       	ld	r31, X
    6114:	01 90       	ld	r0, Z+
    6116:	f0 81       	ld	r31, Z
    6118:	e0 2d       	mov	r30, r0
    611a:	c8 01       	movw	r24, r16
    611c:	09 95       	icall
      delayMicroseconds(40);
    611e:	88 e2       	ldi	r24, 0x28	; 40
    6120:	90 e0       	ldi	r25, 0x00	; 0
    6122:	0e 94 be 39 	call	0x737c	; 0x737c <delayMicroseconds>
   location &= 0x7;            // we only have 8 locations 0-7
   
   command(LCD_SETCGRAMADDR | (location << 3));
   delayMicroseconds(30);
   
   for (uint8_t i = 0; i < 8; i++)
    6126:	ce 15       	cp	r28, r14
    6128:	df 05       	cpc	r29, r15
    612a:	81 f7       	brne	.-32     	; 0x610c <_ZN3LCD10createCharEhPh+0x30>
   {
      write(charmap[i]);      // call the virtual write method
      delayMicroseconds(40);
   }
}
    612c:	df 91       	pop	r29
    612e:	cf 91       	pop	r28
    6130:	1f 91       	pop	r17
    6132:	0f 91       	pop	r16
    6134:	ff 90       	pop	r15
    6136:	ef 90       	pop	r14
    6138:	08 95       	ret

0000613a <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol>:
LiquidCrystal_I2C::LiquidCrystal_I2C(uint8_t lcd_Addr, uint8_t En, uint8_t Rw,
                                     uint8_t Rs, uint8_t d4, uint8_t d5,
                                     uint8_t d6, uint8_t d7 )
{
   config(lcd_Addr, En, Rw, Rs, d4, d5, d6, d7);
}
    613a:	21 e0       	ldi	r18, 0x01	; 1
    613c:	01 c0       	rjmp	.+2      	; 0x6140 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol+0x6>
    613e:	22 0f       	add	r18, r18
    6140:	6a 95       	dec	r22
    6142:	ea f7       	brpl	.-6      	; 0x613e <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol+0x4>
    6144:	dc 01       	movw	r26, r24
    6146:	1b 96       	adiw	r26, 0x0b	; 11
    6148:	2c 93       	st	X, r18
    614a:	1b 97       	sbiw	r26, 0x0b	; 11
    614c:	19 96       	adiw	r26, 0x09	; 9
    614e:	4c 93       	st	X, r20
    6150:	19 97       	sbiw	r26, 0x09	; 9
    6152:	ed 91       	ld	r30, X+
    6154:	fc 91       	ld	r31, X
    6156:	04 84       	ldd	r0, Z+12	; 0x0c
    6158:	f5 85       	ldd	r31, Z+13	; 0x0d
    615a:	e0 2d       	mov	r30, r0
    615c:	60 e0       	ldi	r22, 0x00	; 0
    615e:	09 94       	ijmp

00006160 <_ZN17LiquidCrystal_I2C12setBacklightEh>:
    6160:	fc 01       	movw	r30, r24
    6162:	83 85       	ldd	r24, Z+11	; 0x0b
    6164:	88 23       	and	r24, r24
    6166:	89 f0       	breq	.+34     	; 0x618a <_ZN17LiquidCrystal_I2C12setBacklightEh+0x2a>
    6168:	91 85       	ldd	r25, Z+9	; 0x09
    616a:	91 11       	cpse	r25, r1
    616c:	03 c0       	rjmp	.+6      	; 0x6174 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x14>
    616e:	61 11       	cpse	r22, r1
    6170:	05 c0       	rjmp	.+10     	; 0x617c <_ZN17LiquidCrystal_I2C12setBacklightEh+0x1c>
    6172:	06 c0       	rjmp	.+12     	; 0x6180 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    6174:	91 30       	cpi	r25, 0x01	; 1
    6176:	21 f4       	brne	.+8      	; 0x6180 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    6178:	61 11       	cpse	r22, r1
    617a:	02 c0       	rjmp	.+4      	; 0x6180 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    617c:	84 87       	std	Z+12, r24	; 0x0c
    617e:	01 c0       	rjmp	.+2      	; 0x6182 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x22>
    6180:	14 86       	std	Z+12, r1	; 0x0c
    6182:	64 85       	ldd	r22, Z+12	; 0x0c
    6184:	cf 01       	movw	r24, r30
    6186:	0d 96       	adiw	r24, 0x0d	; 13
    6188:	8a ce       	rjmp	.-748    	; 0x5e9e <_ZN5I2CIO5writeEh>
    618a:	08 95       	ret

0000618c <_ZN17LiquidCrystal_I2C4initEv>:
    618c:	0f 93       	push	r16
    618e:	1f 93       	push	r17
    6190:	cf 93       	push	r28
    6192:	df 93       	push	r29
    6194:	8c 01       	movw	r16, r24
    6196:	ec 01       	movw	r28, r24
    6198:	2d 96       	adiw	r28, 0x0d	; 13
    619a:	fc 01       	movw	r30, r24
    619c:	62 85       	ldd	r22, Z+10	; 0x0a
    619e:	ce 01       	movw	r24, r28
    61a0:	68 de       	rcall	.-816    	; 0x5e72 <_ZN5I2CIO5beginEh>
    61a2:	01 97       	sbiw	r24, 0x01	; 1
    61a4:	59 f4       	brne	.+22     	; 0x61bc <_ZN17LiquidCrystal_I2C4initEv+0x30>
    61a6:	61 e0       	ldi	r22, 0x01	; 1
    61a8:	ce 01       	movw	r24, r28
    61aa:	4d de       	rcall	.-870    	; 0x5e46 <_ZN5I2CIO8portModeEh>
    61ac:	f8 01       	movw	r30, r16
    61ae:	14 82       	std	Z+4, r1	; 0x04
    61b0:	60 e0       	ldi	r22, 0x00	; 0
    61b2:	ce 01       	movw	r24, r28
    61b4:	74 de       	rcall	.-792    	; 0x5e9e <_ZN5I2CIO5writeEh>
    61b6:	81 e0       	ldi	r24, 0x01	; 1
    61b8:	90 e0       	ldi	r25, 0x00	; 0
    61ba:	02 c0       	rjmp	.+4      	; 0x61c0 <_ZN17LiquidCrystal_I2C4initEv+0x34>
    61bc:	80 e0       	ldi	r24, 0x00	; 0
    61be:	90 e0       	ldi	r25, 0x00	; 0
    61c0:	df 91       	pop	r29
    61c2:	cf 91       	pop	r28
    61c4:	1f 91       	pop	r17
    61c6:	0f 91       	pop	r16
    61c8:	08 95       	ret

000061ca <_ZN17LiquidCrystal_I2C6configEhhhhhhhh>:
    61ca:	8f 92       	push	r8
    61cc:	af 92       	push	r10
    61ce:	cf 92       	push	r12
    61d0:	ef 92       	push	r14
    61d2:	0f 93       	push	r16
    61d4:	cf 93       	push	r28
    61d6:	df 93       	push	r29
    61d8:	cd b7       	in	r28, 0x3d	; 61
    61da:	de b7       	in	r29, 0x3e	; 62
    61dc:	fc 01       	movw	r30, r24
    61de:	62 87       	std	Z+10, r22	; 0x0a
    61e0:	13 86       	std	Z+11, r1	; 0x0b
    61e2:	14 86       	std	Z+12, r1	; 0x0c
    61e4:	11 86       	std	Z+9, r1	; 0x09
    61e6:	81 e0       	ldi	r24, 0x01	; 1
    61e8:	98 2f       	mov	r25, r24
    61ea:	01 c0       	rjmp	.+2      	; 0x61ee <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x24>
    61ec:	99 0f       	add	r25, r25
    61ee:	4a 95       	dec	r20
    61f0:	ea f7       	brpl	.-6      	; 0x61ec <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x22>
    61f2:	91 8b       	std	Z+17, r25	; 0x11
    61f4:	98 2f       	mov	r25, r24
    61f6:	01 c0       	rjmp	.+2      	; 0x61fa <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x30>
    61f8:	99 0f       	add	r25, r25
    61fa:	2a 95       	dec	r18
    61fc:	ea f7       	brpl	.-6      	; 0x61f8 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x2e>
    61fe:	92 8b       	std	Z+18, r25	; 0x12
    6200:	98 2f       	mov	r25, r24
    6202:	01 c0       	rjmp	.+2      	; 0x6206 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x3c>
    6204:	99 0f       	add	r25, r25
    6206:	0a 95       	dec	r16
    6208:	ea f7       	brpl	.-6      	; 0x6204 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x3a>
    620a:	93 8b       	std	Z+19, r25	; 0x13
    620c:	98 2f       	mov	r25, r24
    620e:	01 c0       	rjmp	.+2      	; 0x6212 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x48>
    6210:	99 0f       	add	r25, r25
    6212:	ea 94       	dec	r14
    6214:	ea f7       	brpl	.-6      	; 0x6210 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x46>
    6216:	94 8b       	std	Z+20, r25	; 0x14
    6218:	98 2f       	mov	r25, r24
    621a:	01 c0       	rjmp	.+2      	; 0x621e <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x54>
    621c:	99 0f       	add	r25, r25
    621e:	ca 94       	dec	r12
    6220:	ea f7       	brpl	.-6      	; 0x621c <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x52>
    6222:	95 8b       	std	Z+21, r25	; 0x15
    6224:	98 2f       	mov	r25, r24
    6226:	01 c0       	rjmp	.+2      	; 0x622a <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x60>
    6228:	99 0f       	add	r25, r25
    622a:	aa 94       	dec	r10
    622c:	ea f7       	brpl	.-6      	; 0x6228 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x5e>
    622e:	96 8b       	std	Z+22, r25	; 0x16
    6230:	01 c0       	rjmp	.+2      	; 0x6234 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x6a>
    6232:	88 0f       	add	r24, r24
    6234:	8a 94       	dec	r8
    6236:	ea f7       	brpl	.-6      	; 0x6232 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x68>
    6238:	87 8b       	std	Z+23, r24	; 0x17
    623a:	df 91       	pop	r29
    623c:	cf 91       	pop	r28
    623e:	0f 91       	pop	r16
    6240:	ef 90       	pop	r14
    6242:	cf 90       	pop	r12
    6244:	af 90       	pop	r10
    6246:	8f 90       	pop	r8
    6248:	08 95       	ret

0000624a <_ZN17LiquidCrystal_I2CC1Ehhhhhhhhh13t_backlighPol>:

LiquidCrystal_I2C::LiquidCrystal_I2C(uint8_t lcd_Addr, uint8_t En, uint8_t Rw,
    624a:	6f 92       	push	r6
    624c:	7f 92       	push	r7
    624e:	8f 92       	push	r8
    6250:	9f 92       	push	r9
    6252:	af 92       	push	r10
    6254:	bf 92       	push	r11
    6256:	cf 92       	push	r12
    6258:	df 92       	push	r13
    625a:	ef 92       	push	r14
    625c:	ff 92       	push	r15
    625e:	0f 93       	push	r16
    6260:	1f 93       	push	r17
    6262:	cf 93       	push	r28
    6264:	df 93       	push	r29
    6266:	cd b7       	in	r28, 0x3d	; 61
    6268:	de b7       	in	r29, 0x3e	; 62
    626a:	3c 01       	movw	r6, r24
    626c:	d6 2e       	mov	r13, r22
    626e:	b4 2e       	mov	r11, r20
    6270:	92 2e       	mov	r9, r18
    6272:	19 89       	ldd	r17, Y+17	; 0x11
    6274:	fa 88       	ldd	r15, Y+18	; 0x12
                                     uint8_t Rs, uint8_t d4, uint8_t d5,
                                     uint8_t d6, uint8_t d7, uint8_t backlighPin, 
                                     t_backlighPol pol = POSITIVE )
    6276:	44 de       	rcall	.-888    	; 0x5f00 <_ZN3LCDC1Ev>
    6278:	87 e3       	ldi	r24, 0x37	; 55
    627a:	9a e0       	ldi	r25, 0x0A	; 10
    627c:	f3 01       	movw	r30, r6
    627e:	91 83       	std	Z+1, r25	; 0x01
    6280:	80 83       	st	Z, r24
    6282:	c3 01       	movw	r24, r6
    6284:	0d 96       	adiw	r24, 0x0d	; 13
    6286:	d8 dd       	rcall	.-1104   	; 0x5e38 <_ZN5I2CIOC1Ev>
{
   config(lcd_Addr, En, Rw, Rs, d4, d5, d6, d7);
    6288:	29 2d       	mov	r18, r9
    628a:	4b 2d       	mov	r20, r11
    628c:	6d 2d       	mov	r22, r13
    628e:	c3 01       	movw	r24, r6
    6290:	9c df       	rcall	.-200    	; 0x61ca <_ZN17LiquidCrystal_I2C6configEhhhhhhhh>
   setBacklightPin(backlighPin, pol);
    6292:	4f 2d       	mov	r20, r15
    6294:	61 2f       	mov	r22, r17
    6296:	c3 01       	movw	r24, r6
}
    6298:	df 91       	pop	r29
    629a:	cf 91       	pop	r28
    629c:	1f 91       	pop	r17
    629e:	0f 91       	pop	r16
    62a0:	ff 90       	pop	r15
    62a2:	ef 90       	pop	r14
    62a4:	df 90       	pop	r13
    62a6:	cf 90       	pop	r12
    62a8:	bf 90       	pop	r11
    62aa:	af 90       	pop	r10
    62ac:	9f 90       	pop	r9
    62ae:	8f 90       	pop	r8
    62b0:	7f 90       	pop	r7
                                     uint8_t Rs, uint8_t d4, uint8_t d5,
                                     uint8_t d6, uint8_t d7, uint8_t backlighPin, 
                                     t_backlighPol pol = POSITIVE )
{
   config(lcd_Addr, En, Rw, Rs, d4, d5, d6, d7);
   setBacklightPin(backlighPin, pol);
    62b2:	6f 90       	pop	r6
    62b4:	42 cf       	rjmp	.-380    	; 0x613a <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol>

000062b6 <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
}

//
// pulseEnable
void LiquidCrystal_I2C::pulseEnable (uint8_t data)
{
    62b6:	ef 92       	push	r14
    62b8:	ff 92       	push	r15
    62ba:	0f 93       	push	r16
    62bc:	1f 93       	push	r17
    62be:	cf 93       	push	r28
    62c0:	8c 01       	movw	r16, r24
    62c2:	c6 2f       	mov	r28, r22
   _i2cio.write (data | _En);   // En HIGH
    62c4:	7c 01       	movw	r14, r24
    62c6:	8d e0       	ldi	r24, 0x0D	; 13
    62c8:	e8 0e       	add	r14, r24
    62ca:	f1 1c       	adc	r15, r1
    62cc:	f8 01       	movw	r30, r16
    62ce:	61 89       	ldd	r22, Z+17	; 0x11
    62d0:	6c 2b       	or	r22, r28
    62d2:	c7 01       	movw	r24, r14
    62d4:	e4 dd       	rcall	.-1080   	; 0x5e9e <_ZN5I2CIO5writeEh>
   _i2cio.write (data & ~_En);  // En LOW
    62d6:	f8 01       	movw	r30, r16
    62d8:	61 89       	ldd	r22, Z+17	; 0x11
    62da:	60 95       	com	r22
    62dc:	6c 23       	and	r22, r28
    62de:	c7 01       	movw	r24, r14
    62e0:	cf 91       	pop	r28
    62e2:	1f 91       	pop	r17
    62e4:	0f 91       	pop	r16
    62e6:	ff 90       	pop	r15
//
// pulseEnable
void LiquidCrystal_I2C::pulseEnable (uint8_t data)
{
   _i2cio.write (data | _En);   // En HIGH
   _i2cio.write (data & ~_En);  // En LOW
    62e8:	ef 90       	pop	r14
    62ea:	d9 cd       	rjmp	.-1102   	; 0x5e9e <_ZN5I2CIO5writeEh>

000062ec <_ZN17LiquidCrystal_I2C10write4bitsEhh>:
}

//
// write4bits
void LiquidCrystal_I2C::write4bits ( uint8_t value, uint8_t mode ) 
{
    62ec:	fc 01       	movw	r30, r24
    62ee:	96 2f       	mov	r25, r22
    62f0:	df 01       	movw	r26, r30
    62f2:	84 e0       	ldi	r24, 0x04	; 4
   uint8_t pinMapValue = 0;
    62f4:	60 e0       	ldi	r22, 0x00	; 0
   
   // Map the value to LCD pin mapping
   // --------------------------------
   for ( uint8_t i = 0; i < 4; i++ )
   {
      if ( ( value & 0x1 ) == 1 )
    62f6:	90 ff       	sbrs	r25, 0
    62f8:	04 c0       	rjmp	.+8      	; 0x6302 <_ZN17LiquidCrystal_I2C10write4bitsEhh+0x16>
      {
         pinMapValue |= _data_pins[i];
    62fa:	54 96       	adiw	r26, 0x14	; 20
    62fc:	2c 91       	ld	r18, X
    62fe:	54 97       	sbiw	r26, 0x14	; 20
    6300:	62 2b       	or	r22, r18
      }
      value = ( value >> 1 );
    6302:	96 95       	lsr	r25
    6304:	81 50       	subi	r24, 0x01	; 1
    6306:	11 96       	adiw	r26, 0x01	; 1
{
   uint8_t pinMapValue = 0;
   
   // Map the value to LCD pin mapping
   // --------------------------------
   for ( uint8_t i = 0; i < 4; i++ )
    6308:	81 11       	cpse	r24, r1
    630a:	f5 cf       	rjmp	.-22     	; 0x62f6 <_ZN17LiquidCrystal_I2C10write4bitsEhh+0xa>
      value = ( value >> 1 );
   }
   
   // Is it a command or data
   // -----------------------
   if ( mode == DATA )
    630c:	41 30       	cpi	r20, 0x01	; 1
    630e:	09 f4       	brne	.+2      	; 0x6312 <_ZN17LiquidCrystal_I2C10write4bitsEhh+0x26>
   {
      mode = _Rs;
    6310:	43 89       	ldd	r20, Z+19	; 0x13
    6312:	94 85       	ldd	r25, Z+12	; 0x0c
    6314:	69 2b       	or	r22, r25
   }
   
   pinMapValue |= mode | _backlightStsMask;
   pulseEnable ( pinMapValue );
    6316:	64 2b       	or	r22, r20
    6318:	cf 01       	movw	r24, r30
    631a:	cd cf       	rjmp	.-102    	; 0x62b6 <_ZN17LiquidCrystal_I2C11pulseEnableEh>

0000631c <_ZN17LiquidCrystal_I2C4sendEhh>:
//----------------------------------------------------------------------------

//
// send - write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) 
{
    631c:	0f 93       	push	r16
    631e:	1f 93       	push	r17
    6320:	cf 93       	push	r28
    6322:	df 93       	push	r29
    6324:	06 2f       	mov	r16, r22
    6326:	0f 70       	andi	r16, 0x0F	; 15
   // No need to use the delay routines since the time taken to write takes
   // longer that what is needed both for toggling and enable pin an to execute
   // the command.
   
   if ( mode == FOUR_BITS )
    6328:	42 30       	cpi	r20, 0x02	; 2
    632a:	19 f4       	brne	.+6      	; 0x6332 <_ZN17LiquidCrystal_I2C4sendEhh+0x16>
   {
      write4bits( (value & 0x0F), COMMAND );
    632c:	40 e0       	ldi	r20, 0x00	; 0
    632e:	60 2f       	mov	r22, r16
    6330:	0d c0       	rjmp	.+26     	; 0x634c <_ZN17LiquidCrystal_I2C4sendEhh+0x30>
    6332:	14 2f       	mov	r17, r20
    6334:	ec 01       	movw	r28, r24
   }
   else 
   {
      write4bits( (value >> 4), mode );
    6336:	70 e0       	ldi	r23, 0x00	; 0
    6338:	84 e0       	ldi	r24, 0x04	; 4
    633a:	75 95       	asr	r23
    633c:	67 95       	ror	r22
    633e:	8a 95       	dec	r24
    6340:	e1 f7       	brne	.-8      	; 0x633a <_ZN17LiquidCrystal_I2C4sendEhh+0x1e>
    6342:	ce 01       	movw	r24, r28
    6344:	d3 df       	rcall	.-90     	; 0x62ec <_ZN17LiquidCrystal_I2C10write4bitsEhh>
      write4bits( (value & 0x0F), mode);
    6346:	41 2f       	mov	r20, r17
    6348:	60 2f       	mov	r22, r16
    634a:	ce 01       	movw	r24, r28
   }
}
    634c:	df 91       	pop	r29
    634e:	cf 91       	pop	r28
    6350:	1f 91       	pop	r17
      write4bits( (value & 0x0F), COMMAND );
   }
   else 
   {
      write4bits( (value >> 4), mode );
      write4bits( (value & 0x0F), mode);
    6352:	0f 91       	pop	r16
    6354:	cb cf       	rjmp	.-106    	; 0x62ec <_ZN17LiquidCrystal_I2C10write4bitsEhh>

00006356 <_ZN17LiquidCrystal_I2C5beginEhhh>:
// ---------------------------------------------------------------------------

//
// begin
void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) 
{
    6356:	ff 92       	push	r15
    6358:	0f 93       	push	r16
    635a:	1f 93       	push	r17
    635c:	cf 93       	push	r28
    635e:	df 93       	push	r29
    6360:	ec 01       	movw	r28, r24
    6362:	16 2f       	mov	r17, r22
    6364:	04 2f       	mov	r16, r20
    6366:	f2 2e       	mov	r15, r18
   
   init();     // Initialise the I2C expander interface
    6368:	11 df       	rcall	.-478    	; 0x618c <_ZN17LiquidCrystal_I2C4initEv>
   LCD::begin ( cols, lines, dotsize );   
    636a:	2f 2d       	mov	r18, r15
    636c:	40 2f       	mov	r20, r16
    636e:	61 2f       	mov	r22, r17
    6370:	ce 01       	movw	r24, r28
}
    6372:	df 91       	pop	r29
    6374:	cf 91       	pop	r28
    6376:	1f 91       	pop	r17
    6378:	0f 91       	pop	r16
// begin
void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) 
{
   
   init();     // Initialise the I2C expander interface
   LCD::begin ( cols, lines, dotsize );   
    637a:	ff 90       	pop	r15
    637c:	36 ce       	rjmp	.-916    	; 0x5fea <_ZN3LCD5beginEhhh>

0000637e <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    637e:	cf 93       	push	r28
  uint8_t sreg = SREG;
    6380:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    6382:	f8 94       	cli
  if (!initialized) {
    6384:	80 91 61 0c 	lds	r24, 0x0C61	; 0x800c61 <_ZN8SPIClass11initializedE>
    6388:	81 11       	cpse	r24, r1
    638a:	27 c0       	rjmp	.+78     	; 0x63da <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    638c:	ea e7       	ldi	r30, 0x7A	; 122
    638e:	f2 e0       	ldi	r31, 0x02	; 2
    6390:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    6392:	ea e5       	ldi	r30, 0x5A	; 90
    6394:	f2 e0       	ldi	r31, 0x02	; 2
    6396:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    6398:	e8 2f       	mov	r30, r24
    639a:	f0 e0       	ldi	r31, 0x00	; 0
    639c:	ee 0f       	add	r30, r30
    639e:	ff 1f       	adc	r31, r31
    63a0:	ec 55       	subi	r30, 0x5C	; 92
    63a2:	fd 4f       	sbci	r31, 0xFD	; 253
    63a4:	a5 91       	lpm	r26, Z+
    63a6:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    63a8:	ec 91       	ld	r30, X
    63aa:	e9 23       	and	r30, r25
    63ac:	21 f4       	brne	.+8      	; 0x63b6 <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    63ae:	61 e0       	ldi	r22, 0x01	; 1
    63b0:	8a e0       	ldi	r24, 0x0A	; 10
    63b2:	0e 94 69 3a 	call	0x74d2	; 0x74d2 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    63b6:	61 e0       	ldi	r22, 0x01	; 1
    63b8:	8a e0       	ldi	r24, 0x0A	; 10
    63ba:	0e 94 2d 3a 	call	0x745a	; 0x745a <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    63be:	8c b5       	in	r24, 0x2c	; 44
    63c0:	80 61       	ori	r24, 0x10	; 16
    63c2:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    63c4:	8c b5       	in	r24, 0x2c	; 44
    63c6:	80 64       	ori	r24, 0x40	; 64
    63c8:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    63ca:	61 e0       	ldi	r22, 0x01	; 1
    63cc:	8d e0       	ldi	r24, 0x0D	; 13
    63ce:	0e 94 2d 3a 	call	0x745a	; 0x745a <pinMode>
    pinMode(MOSI, OUTPUT);
    63d2:	61 e0       	ldi	r22, 0x01	; 1
    63d4:	8b e0       	ldi	r24, 0x0B	; 11
    63d6:	0e 94 2d 3a 	call	0x745a	; 0x745a <pinMode>
  }
  initialized++; // reference count
    63da:	80 91 61 0c 	lds	r24, 0x0C61	; 0x800c61 <_ZN8SPIClass11initializedE>
    63de:	8f 5f       	subi	r24, 0xFF	; 255
    63e0:	80 93 61 0c 	sts	0x0C61, r24	; 0x800c61 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    63e4:	cf bf       	out	0x3f, r28	; 63
}
    63e6:	cf 91       	pop	r28
    63e8:	08 95       	ret

000063ea <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    63ea:	10 92 cf 0c 	sts	0x0CCF, r1	; 0x800ccf <twi_state>
    63ee:	81 e0       	ldi	r24, 0x01	; 1
    63f0:	80 93 cd 0c 	sts	0x0CCD, r24	; 0x800ccd <twi_sendStop>
    63f4:	10 92 cc 0c 	sts	0x0CCC, r1	; 0x800ccc <twi_inRepStart>
    63f8:	61 e0       	ldi	r22, 0x01	; 1
    63fa:	8d e1       	ldi	r24, 0x1D	; 29
    63fc:	0e 94 69 3a 	call	0x74d2	; 0x74d2 <digitalWrite>
    6400:	61 e0       	ldi	r22, 0x01	; 1
    6402:	8c e1       	ldi	r24, 0x1C	; 28
    6404:	0e 94 69 3a 	call	0x74d2	; 0x74d2 <digitalWrite>
    6408:	e9 eb       	ldi	r30, 0xB9	; 185
    640a:	f0 e0       	ldi	r31, 0x00	; 0
    640c:	80 81       	ld	r24, Z
    640e:	8e 7f       	andi	r24, 0xFE	; 254
    6410:	80 83       	st	Z, r24
    6412:	80 81       	ld	r24, Z
    6414:	8d 7f       	andi	r24, 0xFD	; 253
    6416:	80 83       	st	Z, r24
    6418:	88 e4       	ldi	r24, 0x48	; 72
    641a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    641e:	85 e4       	ldi	r24, 0x45	; 69
    6420:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    6424:	08 95       	ret

00006426 <twi_disable>:
    6426:	ec eb       	ldi	r30, 0xBC	; 188
    6428:	f0 e0       	ldi	r31, 0x00	; 0
    642a:	80 81       	ld	r24, Z
    642c:	8a 7b       	andi	r24, 0xBA	; 186
    642e:	80 83       	st	Z, r24
    6430:	60 e0       	ldi	r22, 0x00	; 0
    6432:	8d e1       	ldi	r24, 0x1D	; 29
    6434:	0e 94 69 3a 	call	0x74d2	; 0x74d2 <digitalWrite>
    6438:	60 e0       	ldi	r22, 0x00	; 0
    643a:	8c e1       	ldi	r24, 0x1C	; 28
    643c:	0c 94 69 3a 	jmp	0x74d2	; 0x74d2 <digitalWrite>

00006440 <twi_setFrequency>:
    6440:	9b 01       	movw	r18, r22
    6442:	ac 01       	movw	r20, r24
    6444:	60 e0       	ldi	r22, 0x00	; 0
    6446:	74 e2       	ldi	r23, 0x24	; 36
    6448:	84 ef       	ldi	r24, 0xF4	; 244
    644a:	90 e0       	ldi	r25, 0x00	; 0
    644c:	0e 94 1c 3f 	call	0x7e38	; 0x7e38 <__udivmodsi4>
    6450:	da 01       	movw	r26, r20
    6452:	c9 01       	movw	r24, r18
    6454:	40 97       	sbiw	r24, 0x10	; 16
    6456:	a1 09       	sbc	r26, r1
    6458:	b1 09       	sbc	r27, r1
    645a:	b6 95       	lsr	r27
    645c:	a7 95       	ror	r26
    645e:	97 95       	ror	r25
    6460:	87 95       	ror	r24
    6462:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    6466:	08 95       	ret

00006468 <twi_readFrom>:
    6468:	41 32       	cpi	r20, 0x21	; 33
    646a:	08 f0       	brcs	.+2      	; 0x646e <twi_readFrom+0x6>
    646c:	43 c0       	rjmp	.+134    	; 0x64f4 <twi_readFrom+0x8c>
    646e:	90 91 cf 0c 	lds	r25, 0x0CCF	; 0x800ccf <twi_state>
    6472:	91 11       	cpse	r25, r1
    6474:	fc cf       	rjmp	.-8      	; 0x646e <twi_readFrom+0x6>
    6476:	91 e0       	ldi	r25, 0x01	; 1
    6478:	90 93 cf 0c 	sts	0x0CCF, r25	; 0x800ccf <twi_state>
    647c:	20 93 cd 0c 	sts	0x0CCD, r18	; 0x800ccd <twi_sendStop>
    6480:	2f ef       	ldi	r18, 0xFF	; 255
    6482:	20 93 62 0c 	sts	0x0C62, r18	; 0x800c62 <twi_error>
    6486:	10 92 a7 0c 	sts	0x0CA7, r1	; 0x800ca7 <twi_masterBufferIndex>
    648a:	24 0f       	add	r18, r20
    648c:	20 93 a6 0c 	sts	0x0CA6, r18	; 0x800ca6 <twi_masterBufferLength>
    6490:	90 93 ce 0c 	sts	0x0CCE, r25	; 0x800cce <twi_slarw>
    6494:	90 91 ce 0c 	lds	r25, 0x0CCE	; 0x800cce <twi_slarw>
    6498:	88 0f       	add	r24, r24
    649a:	89 2b       	or	r24, r25
    649c:	80 93 ce 0c 	sts	0x0CCE, r24	; 0x800cce <twi_slarw>
    64a0:	80 91 cc 0c 	lds	r24, 0x0CCC	; 0x800ccc <twi_inRepStart>
    64a4:	81 30       	cpi	r24, 0x01	; 1
    64a6:	61 f4       	brne	.+24     	; 0x64c0 <twi_readFrom+0x58>
    64a8:	10 92 cc 0c 	sts	0x0CCC, r1	; 0x800ccc <twi_inRepStart>
    64ac:	80 91 ce 0c 	lds	r24, 0x0CCE	; 0x800cce <twi_slarw>
    64b0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    64b4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    64b8:	83 fd       	sbrc	r24, 3
    64ba:	f8 cf       	rjmp	.-16     	; 0x64ac <twi_readFrom+0x44>
    64bc:	85 ec       	ldi	r24, 0xC5	; 197
    64be:	01 c0       	rjmp	.+2      	; 0x64c2 <twi_readFrom+0x5a>
    64c0:	85 ee       	ldi	r24, 0xE5	; 229
    64c2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    64c6:	80 91 cf 0c 	lds	r24, 0x0CCF	; 0x800ccf <twi_state>
    64ca:	81 30       	cpi	r24, 0x01	; 1
    64cc:	e1 f3       	breq	.-8      	; 0x64c6 <twi_readFrom+0x5e>
    64ce:	80 91 a7 0c 	lds	r24, 0x0CA7	; 0x800ca7 <twi_masterBufferIndex>
    64d2:	84 17       	cp	r24, r20
    64d4:	10 f4       	brcc	.+4      	; 0x64da <twi_readFrom+0x72>
    64d6:	40 91 a7 0c 	lds	r20, 0x0CA7	; 0x800ca7 <twi_masterBufferIndex>
    64da:	a8 ea       	ldi	r26, 0xA8	; 168
    64dc:	bc e0       	ldi	r27, 0x0C	; 12
    64de:	96 2f       	mov	r25, r22
    64e0:	fb 01       	movw	r30, r22
    64e2:	8e 2f       	mov	r24, r30
    64e4:	89 1b       	sub	r24, r25
    64e6:	84 17       	cp	r24, r20
    64e8:	18 f4       	brcc	.+6      	; 0x64f0 <twi_readFrom+0x88>
    64ea:	8d 91       	ld	r24, X+
    64ec:	81 93       	st	Z+, r24
    64ee:	f9 cf       	rjmp	.-14     	; 0x64e2 <twi_readFrom+0x7a>
    64f0:	84 2f       	mov	r24, r20
    64f2:	08 95       	ret
    64f4:	80 e0       	ldi	r24, 0x00	; 0
    64f6:	08 95       	ret

000064f8 <twi_writeTo>:
    64f8:	0f 93       	push	r16
    64fa:	41 32       	cpi	r20, 0x21	; 33
    64fc:	08 f0       	brcs	.+2      	; 0x6500 <twi_writeTo+0x8>
    64fe:	4a c0       	rjmp	.+148    	; 0x6594 <twi_writeTo+0x9c>
    6500:	90 91 cf 0c 	lds	r25, 0x0CCF	; 0x800ccf <twi_state>
    6504:	91 11       	cpse	r25, r1
    6506:	fc cf       	rjmp	.-8      	; 0x6500 <twi_writeTo+0x8>
    6508:	32 e0       	ldi	r19, 0x02	; 2
    650a:	30 93 cf 0c 	sts	0x0CCF, r19	; 0x800ccf <twi_state>
    650e:	00 93 cd 0c 	sts	0x0CCD, r16	; 0x800ccd <twi_sendStop>
    6512:	3f ef       	ldi	r19, 0xFF	; 255
    6514:	30 93 62 0c 	sts	0x0C62, r19	; 0x800c62 <twi_error>
    6518:	10 92 a7 0c 	sts	0x0CA7, r1	; 0x800ca7 <twi_masterBufferIndex>
    651c:	40 93 a6 0c 	sts	0x0CA6, r20	; 0x800ca6 <twi_masterBufferLength>
    6520:	56 2f       	mov	r21, r22
    6522:	a8 ea       	ldi	r26, 0xA8	; 168
    6524:	bc e0       	ldi	r27, 0x0C	; 12
    6526:	fb 01       	movw	r30, r22
    6528:	3e 2f       	mov	r19, r30
    652a:	35 1b       	sub	r19, r21
    652c:	34 17       	cp	r19, r20
    652e:	18 f4       	brcc	.+6      	; 0x6536 <twi_writeTo+0x3e>
    6530:	31 91       	ld	r19, Z+
    6532:	3d 93       	st	X+, r19
    6534:	f9 cf       	rjmp	.-14     	; 0x6528 <twi_writeTo+0x30>
    6536:	10 92 ce 0c 	sts	0x0CCE, r1	; 0x800cce <twi_slarw>
    653a:	30 91 ce 0c 	lds	r19, 0x0CCE	; 0x800cce <twi_slarw>
    653e:	88 0f       	add	r24, r24
    6540:	83 2b       	or	r24, r19
    6542:	80 93 ce 0c 	sts	0x0CCE, r24	; 0x800cce <twi_slarw>
    6546:	80 91 cc 0c 	lds	r24, 0x0CCC	; 0x800ccc <twi_inRepStart>
    654a:	81 30       	cpi	r24, 0x01	; 1
    654c:	61 f4       	brne	.+24     	; 0x6566 <twi_writeTo+0x6e>
    654e:	10 92 cc 0c 	sts	0x0CCC, r1	; 0x800ccc <twi_inRepStart>
    6552:	80 91 ce 0c 	lds	r24, 0x0CCE	; 0x800cce <twi_slarw>
    6556:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    655a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    655e:	83 fd       	sbrc	r24, 3
    6560:	f8 cf       	rjmp	.-16     	; 0x6552 <twi_writeTo+0x5a>
    6562:	85 ec       	ldi	r24, 0xC5	; 197
    6564:	01 c0       	rjmp	.+2      	; 0x6568 <twi_writeTo+0x70>
    6566:	85 ee       	ldi	r24, 0xE5	; 229
    6568:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    656c:	22 23       	and	r18, r18
    656e:	21 f0       	breq	.+8      	; 0x6578 <twi_writeTo+0x80>
    6570:	80 91 cf 0c 	lds	r24, 0x0CCF	; 0x800ccf <twi_state>
    6574:	82 30       	cpi	r24, 0x02	; 2
    6576:	d1 f3       	breq	.-12     	; 0x656c <twi_writeTo+0x74>
    6578:	80 91 62 0c 	lds	r24, 0x0C62	; 0x800c62 <twi_error>
    657c:	8f 3f       	cpi	r24, 0xFF	; 255
    657e:	79 f0       	breq	.+30     	; 0x659e <twi_writeTo+0xa6>
    6580:	80 91 62 0c 	lds	r24, 0x0C62	; 0x800c62 <twi_error>
    6584:	80 32       	cpi	r24, 0x20	; 32
    6586:	41 f0       	breq	.+16     	; 0x6598 <twi_writeTo+0xa0>
    6588:	80 91 62 0c 	lds	r24, 0x0C62	; 0x800c62 <twi_error>
    658c:	80 33       	cpi	r24, 0x30	; 48
    658e:	31 f0       	breq	.+12     	; 0x659c <twi_writeTo+0xa4>
    6590:	94 e0       	ldi	r25, 0x04	; 4
    6592:	05 c0       	rjmp	.+10     	; 0x659e <twi_writeTo+0xa6>
    6594:	91 e0       	ldi	r25, 0x01	; 1
    6596:	03 c0       	rjmp	.+6      	; 0x659e <twi_writeTo+0xa6>
    6598:	92 e0       	ldi	r25, 0x02	; 2
    659a:	01 c0       	rjmp	.+2      	; 0x659e <twi_writeTo+0xa6>
    659c:	93 e0       	ldi	r25, 0x03	; 3
    659e:	89 2f       	mov	r24, r25
    65a0:	0f 91       	pop	r16
    65a2:	08 95       	ret

000065a4 <twi_transmit>:
    65a4:	40 91 84 0c 	lds	r20, 0x0C84	; 0x800c84 <twi_txBufferLength>
    65a8:	26 2f       	mov	r18, r22
    65aa:	30 e0       	ldi	r19, 0x00	; 0
    65ac:	24 0f       	add	r18, r20
    65ae:	31 1d       	adc	r19, r1
    65b0:	21 32       	cpi	r18, 0x21	; 33
    65b2:	31 05       	cpc	r19, r1
    65b4:	dc f4       	brge	.+54     	; 0x65ec <twi_transmit+0x48>
    65b6:	20 91 cf 0c 	lds	r18, 0x0CCF	; 0x800ccf <twi_state>
    65ba:	24 30       	cpi	r18, 0x04	; 4
    65bc:	c9 f4       	brne	.+50     	; 0x65f0 <twi_transmit+0x4c>
    65be:	fc 01       	movw	r30, r24
    65c0:	80 e0       	ldi	r24, 0x00	; 0
    65c2:	90 e0       	ldi	r25, 0x00	; 0
    65c4:	86 17       	cp	r24, r22
    65c6:	58 f4       	brcc	.+22     	; 0x65de <twi_transmit+0x3a>
    65c8:	30 91 84 0c 	lds	r19, 0x0C84	; 0x800c84 <twi_txBufferLength>
    65cc:	21 91       	ld	r18, Z+
    65ce:	dc 01       	movw	r26, r24
    65d0:	aa 57       	subi	r26, 0x7A	; 122
    65d2:	b3 4f       	sbci	r27, 0xF3	; 243
    65d4:	a3 0f       	add	r26, r19
    65d6:	b1 1d       	adc	r27, r1
    65d8:	2c 93       	st	X, r18
    65da:	01 96       	adiw	r24, 0x01	; 1
    65dc:	f3 cf       	rjmp	.-26     	; 0x65c4 <twi_transmit+0x20>
    65de:	80 91 84 0c 	lds	r24, 0x0C84	; 0x800c84 <twi_txBufferLength>
    65e2:	68 0f       	add	r22, r24
    65e4:	60 93 84 0c 	sts	0x0C84, r22	; 0x800c84 <twi_txBufferLength>
    65e8:	80 e0       	ldi	r24, 0x00	; 0
    65ea:	08 95       	ret
    65ec:	81 e0       	ldi	r24, 0x01	; 1
    65ee:	08 95       	ret
    65f0:	82 e0       	ldi	r24, 0x02	; 2
    65f2:	08 95       	ret

000065f4 <twi_attachSlaveRxEvent>:
    65f4:	90 93 c9 0c 	sts	0x0CC9, r25	; 0x800cc9 <twi_onSlaveReceive+0x1>
    65f8:	80 93 c8 0c 	sts	0x0CC8, r24	; 0x800cc8 <twi_onSlaveReceive>
    65fc:	08 95       	ret

000065fe <twi_attachSlaveTxEvent>:
    65fe:	90 93 cb 0c 	sts	0x0CCB, r25	; 0x800ccb <twi_onSlaveTransmit+0x1>
    6602:	80 93 ca 0c 	sts	0x0CCA, r24	; 0x800cca <twi_onSlaveTransmit>
    6606:	08 95       	ret

00006608 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    6608:	85 ed       	ldi	r24, 0xD5	; 213
    660a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    660e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    6612:	84 fd       	sbrc	r24, 4
    6614:	fc cf       	rjmp	.-8      	; 0x660e <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    6616:	10 92 cf 0c 	sts	0x0CCF, r1	; 0x800ccf <twi_state>
    661a:	08 95       	ret

0000661c <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    661c:	85 ec       	ldi	r24, 0xC5	; 197
    661e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    6622:	10 92 cf 0c 	sts	0x0CCF, r1	; 0x800ccf <twi_state>
    6626:	08 95       	ret

00006628 <__vector_26>:
}

ISR(TWI_vect)
{
    6628:	1f 92       	push	r1
    662a:	0f 92       	push	r0
    662c:	0f b6       	in	r0, 0x3f	; 63
    662e:	0f 92       	push	r0
    6630:	11 24       	eor	r1, r1
    6632:	0b b6       	in	r0, 0x3b	; 59
    6634:	0f 92       	push	r0
    6636:	2f 93       	push	r18
    6638:	3f 93       	push	r19
    663a:	4f 93       	push	r20
    663c:	5f 93       	push	r21
    663e:	6f 93       	push	r22
    6640:	7f 93       	push	r23
    6642:	8f 93       	push	r24
    6644:	9f 93       	push	r25
    6646:	af 93       	push	r26
    6648:	bf 93       	push	r27
    664a:	ef 93       	push	r30
    664c:	ff 93       	push	r31
  switch(TW_STATUS){
    664e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    6652:	88 7f       	andi	r24, 0xF8	; 248
    6654:	80 36       	cpi	r24, 0x60	; 96
    6656:	09 f4       	brne	.+2      	; 0x665a <__vector_26+0x32>
    6658:	9d c0       	rjmp	.+314    	; 0x6794 <__vector_26+0x16c>
    665a:	70 f5       	brcc	.+92     	; 0x66b8 <__vector_26+0x90>
    665c:	88 32       	cpi	r24, 0x28	; 40
    665e:	09 f4       	brne	.+2      	; 0x6662 <__vector_26+0x3a>
    6660:	5c c0       	rjmp	.+184    	; 0x671a <__vector_26+0xf2>
    6662:	90 f4       	brcc	.+36     	; 0x6688 <__vector_26+0x60>
    6664:	80 31       	cpi	r24, 0x10	; 16
    6666:	09 f4       	brne	.+2      	; 0x666a <__vector_26+0x42>
    6668:	55 c0       	rjmp	.+170    	; 0x6714 <__vector_26+0xec>
    666a:	38 f4       	brcc	.+14     	; 0x667a <__vector_26+0x52>
    666c:	88 23       	and	r24, r24
    666e:	09 f4       	brne	.+2      	; 0x6672 <__vector_26+0x4a>
    6670:	f3 c0       	rjmp	.+486    	; 0x6858 <__vector_26+0x230>
    6672:	88 30       	cpi	r24, 0x08	; 8
    6674:	09 f4       	brne	.+2      	; 0x6678 <__vector_26+0x50>
    6676:	4e c0       	rjmp	.+156    	; 0x6714 <__vector_26+0xec>
    6678:	f2 c0       	rjmp	.+484    	; 0x685e <__vector_26+0x236>
    667a:	88 31       	cpi	r24, 0x18	; 24
    667c:	09 f4       	brne	.+2      	; 0x6680 <__vector_26+0x58>
    667e:	4d c0       	rjmp	.+154    	; 0x671a <__vector_26+0xf2>
    6680:	80 32       	cpi	r24, 0x20	; 32
    6682:	09 f4       	brne	.+2      	; 0x6686 <__vector_26+0x5e>
    6684:	5e c0       	rjmp	.+188    	; 0x6742 <__vector_26+0x11a>
    6686:	eb c0       	rjmp	.+470    	; 0x685e <__vector_26+0x236>
    6688:	80 34       	cpi	r24, 0x40	; 64
    668a:	09 f4       	brne	.+2      	; 0x668e <__vector_26+0x66>
    668c:	69 c0       	rjmp	.+210    	; 0x6760 <__vector_26+0x138>
    668e:	50 f4       	brcc	.+20     	; 0x66a4 <__vector_26+0x7c>
    6690:	80 33       	cpi	r24, 0x30	; 48
    6692:	09 f4       	brne	.+2      	; 0x6696 <__vector_26+0x6e>
    6694:	56 c0       	rjmp	.+172    	; 0x6742 <__vector_26+0x11a>
    6696:	88 33       	cpi	r24, 0x38	; 56
    6698:	09 f0       	breq	.+2      	; 0x669c <__vector_26+0x74>
    669a:	e1 c0       	rjmp	.+450    	; 0x685e <__vector_26+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    669c:	80 93 62 0c 	sts	0x0C62, r24	; 0x800c62 <twi_error>
      twi_releaseBus();
    66a0:	bd df       	rcall	.-134    	; 0x661c <twi_releaseBus>
      break;
    66a2:	dd c0       	rjmp	.+442    	; 0x685e <__vector_26+0x236>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    66a4:	80 35       	cpi	r24, 0x50	; 80
    66a6:	09 f4       	brne	.+2      	; 0x66aa <__vector_26+0x82>
    66a8:	4f c0       	rjmp	.+158    	; 0x6748 <__vector_26+0x120>
    66aa:	88 35       	cpi	r24, 0x58	; 88
    66ac:	09 f4       	brne	.+2      	; 0x66b0 <__vector_26+0x88>
    66ae:	5d c0       	rjmp	.+186    	; 0x676a <__vector_26+0x142>
    66b0:	88 34       	cpi	r24, 0x48	; 72
    66b2:	09 f0       	breq	.+2      	; 0x66b6 <__vector_26+0x8e>
    66b4:	d4 c0       	rjmp	.+424    	; 0x685e <__vector_26+0x236>
    66b6:	d2 c0       	rjmp	.+420    	; 0x685c <__vector_26+0x234>
    66b8:	88 39       	cpi	r24, 0x98	; 152
    66ba:	09 f4       	brne	.+2      	; 0x66be <__vector_26+0x96>
    66bc:	c3 c0       	rjmp	.+390    	; 0x6844 <__vector_26+0x21c>
    66be:	a8 f4       	brcc	.+42     	; 0x66ea <__vector_26+0xc2>
    66c0:	88 37       	cpi	r24, 0x78	; 120
    66c2:	09 f4       	brne	.+2      	; 0x66c6 <__vector_26+0x9e>
    66c4:	67 c0       	rjmp	.+206    	; 0x6794 <__vector_26+0x16c>
    66c6:	38 f4       	brcc	.+14     	; 0x66d6 <__vector_26+0xae>
    66c8:	88 36       	cpi	r24, 0x68	; 104
    66ca:	09 f4       	brne	.+2      	; 0x66ce <__vector_26+0xa6>
    66cc:	63 c0       	rjmp	.+198    	; 0x6794 <__vector_26+0x16c>
    66ce:	80 37       	cpi	r24, 0x70	; 112
    66d0:	09 f4       	brne	.+2      	; 0x66d4 <__vector_26+0xac>
    66d2:	60 c0       	rjmp	.+192    	; 0x6794 <__vector_26+0x16c>
    66d4:	c4 c0       	rjmp	.+392    	; 0x685e <__vector_26+0x236>
    66d6:	88 38       	cpi	r24, 0x88	; 136
    66d8:	09 f4       	brne	.+2      	; 0x66dc <__vector_26+0xb4>
    66da:	b4 c0       	rjmp	.+360    	; 0x6844 <__vector_26+0x21c>
    66dc:	80 39       	cpi	r24, 0x90	; 144
    66de:	09 f4       	brne	.+2      	; 0x66e2 <__vector_26+0xba>
    66e0:	5f c0       	rjmp	.+190    	; 0x67a0 <__vector_26+0x178>
    66e2:	80 38       	cpi	r24, 0x80	; 128
    66e4:	09 f0       	breq	.+2      	; 0x66e8 <__vector_26+0xc0>
    66e6:	bb c0       	rjmp	.+374    	; 0x685e <__vector_26+0x236>
    66e8:	5b c0       	rjmp	.+182    	; 0x67a0 <__vector_26+0x178>
    66ea:	80 3b       	cpi	r24, 0xB0	; 176
    66ec:	09 f4       	brne	.+2      	; 0x66f0 <__vector_26+0xc8>
    66ee:	82 c0       	rjmp	.+260    	; 0x67f4 <__vector_26+0x1cc>
    66f0:	38 f4       	brcc	.+14     	; 0x6700 <__vector_26+0xd8>
    66f2:	80 3a       	cpi	r24, 0xA0	; 160
    66f4:	09 f4       	brne	.+2      	; 0x66f8 <__vector_26+0xd0>
    66f6:	66 c0       	rjmp	.+204    	; 0x67c4 <__vector_26+0x19c>
    66f8:	88 3a       	cpi	r24, 0xA8	; 168
    66fa:	09 f4       	brne	.+2      	; 0x66fe <__vector_26+0xd6>
    66fc:	7b c0       	rjmp	.+246    	; 0x67f4 <__vector_26+0x1cc>
    66fe:	af c0       	rjmp	.+350    	; 0x685e <__vector_26+0x236>
    6700:	80 3c       	cpi	r24, 0xC0	; 192
    6702:	09 f4       	brne	.+2      	; 0x6706 <__vector_26+0xde>
    6704:	a3 c0       	rjmp	.+326    	; 0x684c <__vector_26+0x224>
    6706:	88 3c       	cpi	r24, 0xC8	; 200
    6708:	09 f4       	brne	.+2      	; 0x670c <__vector_26+0xe4>
    670a:	a0 c0       	rjmp	.+320    	; 0x684c <__vector_26+0x224>
    670c:	88 3b       	cpi	r24, 0xB8	; 184
    670e:	09 f4       	brne	.+2      	; 0x6712 <__vector_26+0xea>
    6710:	86 c0       	rjmp	.+268    	; 0x681e <__vector_26+0x1f6>
    6712:	a5 c0       	rjmp	.+330    	; 0x685e <__vector_26+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    6714:	80 91 ce 0c 	lds	r24, 0x0CCE	; 0x800cce <twi_slarw>
    6718:	10 c0       	rjmp	.+32     	; 0x673a <__vector_26+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    671a:	90 91 a7 0c 	lds	r25, 0x0CA7	; 0x800ca7 <twi_masterBufferIndex>
    671e:	80 91 a6 0c 	lds	r24, 0x0CA6	; 0x800ca6 <twi_masterBufferLength>
    6722:	98 17       	cp	r25, r24
    6724:	70 f5       	brcc	.+92     	; 0x6782 <__vector_26+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    6726:	e0 91 a7 0c 	lds	r30, 0x0CA7	; 0x800ca7 <twi_masterBufferIndex>
    672a:	81 e0       	ldi	r24, 0x01	; 1
    672c:	8e 0f       	add	r24, r30
    672e:	80 93 a7 0c 	sts	0x0CA7, r24	; 0x800ca7 <twi_masterBufferIndex>
    6732:	f0 e0       	ldi	r31, 0x00	; 0
    6734:	e8 55       	subi	r30, 0x58	; 88
    6736:	f3 4f       	sbci	r31, 0xF3	; 243
    6738:	80 81       	ld	r24, Z
    673a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    673e:	85 ec       	ldi	r24, 0xC5	; 197
    6740:	82 c0       	rjmp	.+260    	; 0x6846 <__vector_26+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    6742:	80 93 62 0c 	sts	0x0C62, r24	; 0x800c62 <twi_error>
    6746:	8a c0       	rjmp	.+276    	; 0x685c <__vector_26+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    6748:	e0 91 a7 0c 	lds	r30, 0x0CA7	; 0x800ca7 <twi_masterBufferIndex>
    674c:	81 e0       	ldi	r24, 0x01	; 1
    674e:	8e 0f       	add	r24, r30
    6750:	80 93 a7 0c 	sts	0x0CA7, r24	; 0x800ca7 <twi_masterBufferIndex>
    6754:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    6758:	f0 e0       	ldi	r31, 0x00	; 0
    675a:	e8 55       	subi	r30, 0x58	; 88
    675c:	f3 4f       	sbci	r31, 0xF3	; 243
    675e:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    6760:	90 91 a7 0c 	lds	r25, 0x0CA7	; 0x800ca7 <twi_masterBufferIndex>
    6764:	80 91 a6 0c 	lds	r24, 0x0CA6	; 0x800ca6 <twi_masterBufferLength>
    6768:	6a c0       	rjmp	.+212    	; 0x683e <__vector_26+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    676a:	e0 91 a7 0c 	lds	r30, 0x0CA7	; 0x800ca7 <twi_masterBufferIndex>
    676e:	81 e0       	ldi	r24, 0x01	; 1
    6770:	8e 0f       	add	r24, r30
    6772:	80 93 a7 0c 	sts	0x0CA7, r24	; 0x800ca7 <twi_masterBufferIndex>
    6776:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    677a:	f0 e0       	ldi	r31, 0x00	; 0
    677c:	e8 55       	subi	r30, 0x58	; 88
    677e:	f3 4f       	sbci	r31, 0xF3	; 243
    6780:	80 83       	st	Z, r24
	if (twi_sendStop)
    6782:	80 91 cd 0c 	lds	r24, 0x0CCD	; 0x800ccd <twi_sendStop>
    6786:	81 11       	cpse	r24, r1
    6788:	69 c0       	rjmp	.+210    	; 0x685c <__vector_26+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    678a:	81 e0       	ldi	r24, 0x01	; 1
    678c:	80 93 cc 0c 	sts	0x0CCC, r24	; 0x800ccc <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    6790:	84 ea       	ldi	r24, 0xA4	; 164
    6792:	5d c0       	rjmp	.+186    	; 0x684e <__vector_26+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    6794:	83 e0       	ldi	r24, 0x03	; 3
    6796:	80 93 cf 0c 	sts	0x0CCF, r24	; 0x800ccf <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    679a:	10 92 63 0c 	sts	0x0C63, r1	; 0x800c63 <twi_rxBufferIndex>
    679e:	cf cf       	rjmp	.-98     	; 0x673e <__vector_26+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    67a0:	80 91 63 0c 	lds	r24, 0x0C63	; 0x800c63 <twi_rxBufferIndex>
    67a4:	80 32       	cpi	r24, 0x20	; 32
    67a6:	08 f0       	brcs	.+2      	; 0x67aa <__vector_26+0x182>
    67a8:	4d c0       	rjmp	.+154    	; 0x6844 <__vector_26+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    67aa:	e0 91 63 0c 	lds	r30, 0x0C63	; 0x800c63 <twi_rxBufferIndex>
    67ae:	81 e0       	ldi	r24, 0x01	; 1
    67b0:	8e 0f       	add	r24, r30
    67b2:	80 93 63 0c 	sts	0x0C63, r24	; 0x800c63 <twi_rxBufferIndex>
    67b6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    67ba:	f0 e0       	ldi	r31, 0x00	; 0
    67bc:	ec 59       	subi	r30, 0x9C	; 156
    67be:	f3 4f       	sbci	r31, 0xF3	; 243
    67c0:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    67c2:	bd cf       	rjmp	.-134    	; 0x673e <__vector_26+0x116>
    67c4:	2b df       	rcall	.-426    	; 0x661c <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    67c6:	80 91 63 0c 	lds	r24, 0x0C63	; 0x800c63 <twi_rxBufferIndex>
    67ca:	80 32       	cpi	r24, 0x20	; 32
    67cc:	30 f4       	brcc	.+12     	; 0x67da <__vector_26+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    67ce:	e0 91 63 0c 	lds	r30, 0x0C63	; 0x800c63 <twi_rxBufferIndex>
    67d2:	f0 e0       	ldi	r31, 0x00	; 0
    67d4:	ec 59       	subi	r30, 0x9C	; 156
    67d6:	f3 4f       	sbci	r31, 0xF3	; 243
    67d8:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    67da:	60 91 63 0c 	lds	r22, 0x0C63	; 0x800c63 <twi_rxBufferIndex>
    67de:	70 e0       	ldi	r23, 0x00	; 0
    67e0:	e0 91 c8 0c 	lds	r30, 0x0CC8	; 0x800cc8 <twi_onSlaveReceive>
    67e4:	f0 91 c9 0c 	lds	r31, 0x0CC9	; 0x800cc9 <twi_onSlaveReceive+0x1>
    67e8:	84 e6       	ldi	r24, 0x64	; 100
    67ea:	9c e0       	ldi	r25, 0x0C	; 12
    67ec:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    67ee:	10 92 63 0c 	sts	0x0C63, r1	; 0x800c63 <twi_rxBufferIndex>
      break;
    67f2:	35 c0       	rjmp	.+106    	; 0x685e <__vector_26+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    67f4:	84 e0       	ldi	r24, 0x04	; 4
    67f6:	80 93 cf 0c 	sts	0x0CCF, r24	; 0x800ccf <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    67fa:	10 92 85 0c 	sts	0x0C85, r1	; 0x800c85 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    67fe:	10 92 84 0c 	sts	0x0C84, r1	; 0x800c84 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    6802:	e0 91 ca 0c 	lds	r30, 0x0CCA	; 0x800cca <twi_onSlaveTransmit>
    6806:	f0 91 cb 0c 	lds	r31, 0x0CCB	; 0x800ccb <twi_onSlaveTransmit+0x1>
    680a:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    680c:	80 91 84 0c 	lds	r24, 0x0C84	; 0x800c84 <twi_txBufferLength>
    6810:	81 11       	cpse	r24, r1
    6812:	05 c0       	rjmp	.+10     	; 0x681e <__vector_26+0x1f6>
        twi_txBufferLength = 1;
    6814:	81 e0       	ldi	r24, 0x01	; 1
    6816:	80 93 84 0c 	sts	0x0C84, r24	; 0x800c84 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    681a:	10 92 86 0c 	sts	0x0C86, r1	; 0x800c86 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    681e:	e0 91 85 0c 	lds	r30, 0x0C85	; 0x800c85 <twi_txBufferIndex>
    6822:	81 e0       	ldi	r24, 0x01	; 1
    6824:	8e 0f       	add	r24, r30
    6826:	80 93 85 0c 	sts	0x0C85, r24	; 0x800c85 <twi_txBufferIndex>
    682a:	f0 e0       	ldi	r31, 0x00	; 0
    682c:	ea 57       	subi	r30, 0x7A	; 122
    682e:	f3 4f       	sbci	r31, 0xF3	; 243
    6830:	80 81       	ld	r24, Z
    6832:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    6836:	90 91 85 0c 	lds	r25, 0x0C85	; 0x800c85 <twi_txBufferIndex>
    683a:	80 91 84 0c 	lds	r24, 0x0C84	; 0x800c84 <twi_txBufferLength>
    683e:	98 17       	cp	r25, r24
    6840:	08 f4       	brcc	.+2      	; 0x6844 <__vector_26+0x21c>
    6842:	7d cf       	rjmp	.-262    	; 0x673e <__vector_26+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    6844:	85 e8       	ldi	r24, 0x85	; 133
    6846:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    684a:	09 c0       	rjmp	.+18     	; 0x685e <__vector_26+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    684c:	85 ec       	ldi	r24, 0xC5	; 197
    684e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    6852:	10 92 cf 0c 	sts	0x0CCF, r1	; 0x800ccf <twi_state>
      break;
    6856:	03 c0       	rjmp	.+6      	; 0x685e <__vector_26+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    6858:	10 92 62 0c 	sts	0x0C62, r1	; 0x800c62 <twi_error>
      twi_stop();
    685c:	d5 de       	rcall	.-598    	; 0x6608 <twi_stop>
      break;
  }
}
    685e:	ff 91       	pop	r31
    6860:	ef 91       	pop	r30
    6862:	bf 91       	pop	r27
    6864:	af 91       	pop	r26
    6866:	9f 91       	pop	r25
    6868:	8f 91       	pop	r24
    686a:	7f 91       	pop	r23
    686c:	6f 91       	pop	r22
    686e:	5f 91       	pop	r21
    6870:	4f 91       	pop	r20
    6872:	3f 91       	pop	r19
    6874:	2f 91       	pop	r18
    6876:	0f 90       	pop	r0
    6878:	0b be       	out	0x3b, r0	; 59
    687a:	0f 90       	pop	r0
    687c:	0f be       	out	0x3f, r0	; 63
    687e:	0f 90       	pop	r0
    6880:	1f 90       	pop	r1
    6882:	18 95       	reti

00006884 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    6884:	80 91 04 0d 	lds	r24, 0x0D04	; 0x800d04 <_ZN7TwoWire14rxBufferLengthE>
    6888:	90 e0       	ldi	r25, 0x00	; 0
    688a:	20 91 05 0d 	lds	r18, 0x0D05	; 0x800d05 <_ZN7TwoWire13rxBufferIndexE>
    688e:	82 1b       	sub	r24, r18
    6890:	91 09       	sbc	r25, r1
    6892:	08 95       	ret

00006894 <_ZN7TwoWire4readEv>:
    6894:	90 91 05 0d 	lds	r25, 0x0D05	; 0x800d05 <_ZN7TwoWire13rxBufferIndexE>
    6898:	80 91 04 0d 	lds	r24, 0x0D04	; 0x800d04 <_ZN7TwoWire14rxBufferLengthE>
    689c:	98 17       	cp	r25, r24
    689e:	50 f4       	brcc	.+20     	; 0x68b4 <_ZN7TwoWire4readEv+0x20>
    68a0:	e9 2f       	mov	r30, r25
    68a2:	f0 e0       	ldi	r31, 0x00	; 0
    68a4:	ea 5f       	subi	r30, 0xFA	; 250
    68a6:	f2 4f       	sbci	r31, 0xF2	; 242
    68a8:	20 81       	ld	r18, Z
    68aa:	30 e0       	ldi	r19, 0x00	; 0
    68ac:	9f 5f       	subi	r25, 0xFF	; 255
    68ae:	90 93 05 0d 	sts	0x0D05, r25	; 0x800d05 <_ZN7TwoWire13rxBufferIndexE>
    68b2:	02 c0       	rjmp	.+4      	; 0x68b8 <_ZN7TwoWire4readEv+0x24>
    68b4:	2f ef       	ldi	r18, 0xFF	; 255
    68b6:	3f ef       	ldi	r19, 0xFF	; 255
    68b8:	c9 01       	movw	r24, r18
    68ba:	08 95       	ret

000068bc <_ZN7TwoWire4peekEv>:
    68bc:	e0 91 05 0d 	lds	r30, 0x0D05	; 0x800d05 <_ZN7TwoWire13rxBufferIndexE>
    68c0:	80 91 04 0d 	lds	r24, 0x0D04	; 0x800d04 <_ZN7TwoWire14rxBufferLengthE>
    68c4:	e8 17       	cp	r30, r24
    68c6:	30 f4       	brcc	.+12     	; 0x68d4 <_ZN7TwoWire4peekEv+0x18>
    68c8:	f0 e0       	ldi	r31, 0x00	; 0
    68ca:	ea 5f       	subi	r30, 0xFA	; 250
    68cc:	f2 4f       	sbci	r31, 0xF2	; 242
    68ce:	80 81       	ld	r24, Z
    68d0:	90 e0       	ldi	r25, 0x00	; 0
    68d2:	08 95       	ret
    68d4:	8f ef       	ldi	r24, 0xFF	; 255
    68d6:	9f ef       	ldi	r25, 0xFF	; 255
    68d8:	08 95       	ret

000068da <_ZN7TwoWire5flushEv>:
    68da:	08 95       	ret

000068dc <_ZN7TwoWire16onReceiveServiceEPhi>:
    68dc:	cf 93       	push	r28
    68de:	df 93       	push	r29
    68e0:	ec 01       	movw	r28, r24
    68e2:	e0 91 dc 0c 	lds	r30, 0x0CDC	; 0x800cdc <_ZN7TwoWire14user_onReceiveE>
    68e6:	f0 91 dd 0c 	lds	r31, 0x0CDD	; 0x800cdd <_ZN7TwoWire14user_onReceiveE+0x1>
    68ea:	30 97       	sbiw	r30, 0x00	; 0
    68ec:	f1 f0       	breq	.+60     	; 0x692a <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    68ee:	90 91 05 0d 	lds	r25, 0x0D05	; 0x800d05 <_ZN7TwoWire13rxBufferIndexE>
    68f2:	80 91 04 0d 	lds	r24, 0x0D04	; 0x800d04 <_ZN7TwoWire14rxBufferLengthE>
    68f6:	98 17       	cp	r25, r24
    68f8:	c0 f0       	brcs	.+48     	; 0x692a <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    68fa:	90 e0       	ldi	r25, 0x00	; 0
    68fc:	29 2f       	mov	r18, r25
    68fe:	30 e0       	ldi	r19, 0x00	; 0
    6900:	26 17       	cp	r18, r22
    6902:	37 07       	cpc	r19, r23
    6904:	54 f4       	brge	.+20     	; 0x691a <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    6906:	de 01       	movw	r26, r28
    6908:	a2 0f       	add	r26, r18
    690a:	b3 1f       	adc	r27, r19
    690c:	4c 91       	ld	r20, X
    690e:	d9 01       	movw	r26, r18
    6910:	aa 5f       	subi	r26, 0xFA	; 250
    6912:	b2 4f       	sbci	r27, 0xF2	; 242
    6914:	4c 93       	st	X, r20
    6916:	9f 5f       	subi	r25, 0xFF	; 255
    6918:	f1 cf       	rjmp	.-30     	; 0x68fc <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    691a:	10 92 05 0d 	sts	0x0D05, r1	; 0x800d05 <_ZN7TwoWire13rxBufferIndexE>
    691e:	60 93 04 0d 	sts	0x0D04, r22	; 0x800d04 <_ZN7TwoWire14rxBufferLengthE>
    6922:	cb 01       	movw	r24, r22
    6924:	df 91       	pop	r29
    6926:	cf 91       	pop	r28
    6928:	09 94       	ijmp
    692a:	df 91       	pop	r29
    692c:	cf 91       	pop	r28
    692e:	08 95       	ret

00006930 <_ZN7TwoWire16onRequestServiceEv>:
    6930:	e0 91 de 0c 	lds	r30, 0x0CDE	; 0x800cde <_ZN7TwoWire14user_onRequestE>
    6934:	f0 91 df 0c 	lds	r31, 0x0CDF	; 0x800cdf <_ZN7TwoWire14user_onRequestE+0x1>
    6938:	30 97       	sbiw	r30, 0x00	; 0
    693a:	29 f0       	breq	.+10     	; 0x6946 <_ZN7TwoWire16onRequestServiceEv+0x16>
    693c:	10 92 e2 0c 	sts	0x0CE2, r1	; 0x800ce2 <_ZN7TwoWire13txBufferIndexE>
    6940:	10 92 e1 0c 	sts	0x0CE1, r1	; 0x800ce1 <_ZN7TwoWire14txBufferLengthE>
    6944:	09 94       	ijmp
    6946:	08 95       	ret

00006948 <_ZN7TwoWire5writeEPKhj>:
    6948:	cf 92       	push	r12
    694a:	df 92       	push	r13
    694c:	ef 92       	push	r14
    694e:	ff 92       	push	r15
    6950:	0f 93       	push	r16
    6952:	1f 93       	push	r17
    6954:	cf 93       	push	r28
    6956:	df 93       	push	r29
    6958:	7c 01       	movw	r14, r24
    695a:	cb 01       	movw	r24, r22
    695c:	8a 01       	movw	r16, r20
    695e:	20 91 e0 0c 	lds	r18, 0x0CE0	; 0x800ce0 <_ZN7TwoWire12transmittingE>
    6962:	22 23       	and	r18, r18
    6964:	89 f0       	breq	.+34     	; 0x6988 <_ZN7TwoWire5writeEPKhj+0x40>
    6966:	eb 01       	movw	r28, r22
    6968:	6b 01       	movw	r12, r22
    696a:	c4 0e       	add	r12, r20
    696c:	d5 1e       	adc	r13, r21
    696e:	cc 15       	cp	r28, r12
    6970:	dd 05       	cpc	r29, r13
    6972:	61 f0       	breq	.+24     	; 0x698c <_ZN7TwoWire5writeEPKhj+0x44>
    6974:	69 91       	ld	r22, Y+
    6976:	d7 01       	movw	r26, r14
    6978:	ed 91       	ld	r30, X+
    697a:	fc 91       	ld	r31, X
    697c:	01 90       	ld	r0, Z+
    697e:	f0 81       	ld	r31, Z
    6980:	e0 2d       	mov	r30, r0
    6982:	c7 01       	movw	r24, r14
    6984:	09 95       	icall
    6986:	f3 cf       	rjmp	.-26     	; 0x696e <_ZN7TwoWire5writeEPKhj+0x26>
    6988:	64 2f       	mov	r22, r20
    698a:	0c de       	rcall	.-1000   	; 0x65a4 <twi_transmit>
    698c:	c8 01       	movw	r24, r16
    698e:	df 91       	pop	r29
    6990:	cf 91       	pop	r28
    6992:	1f 91       	pop	r17
    6994:	0f 91       	pop	r16
    6996:	ff 90       	pop	r15
    6998:	ef 90       	pop	r14
    699a:	df 90       	pop	r13
    699c:	cf 90       	pop	r12
    699e:	08 95       	ret

000069a0 <_ZN7TwoWire5writeEh>:
    69a0:	cf 93       	push	r28
    69a2:	df 93       	push	r29
    69a4:	1f 92       	push	r1
    69a6:	cd b7       	in	r28, 0x3d	; 61
    69a8:	de b7       	in	r29, 0x3e	; 62
    69aa:	69 83       	std	Y+1, r22	; 0x01
    69ac:	20 91 e0 0c 	lds	r18, 0x0CE0	; 0x800ce0 <_ZN7TwoWire12transmittingE>
    69b0:	22 23       	and	r18, r18
    69b2:	d1 f0       	breq	.+52     	; 0x69e8 <_ZN7TwoWire5writeEh+0x48>
    69b4:	20 91 e1 0c 	lds	r18, 0x0CE1	; 0x800ce1 <_ZN7TwoWire14txBufferLengthE>
    69b8:	20 32       	cpi	r18, 0x20	; 32
    69ba:	40 f0       	brcs	.+16     	; 0x69cc <_ZN7TwoWire5writeEh+0x2c>
    69bc:	21 e0       	ldi	r18, 0x01	; 1
    69be:	30 e0       	ldi	r19, 0x00	; 0
    69c0:	fc 01       	movw	r30, r24
    69c2:	33 83       	std	Z+3, r19	; 0x03
    69c4:	22 83       	std	Z+2, r18	; 0x02
    69c6:	80 e0       	ldi	r24, 0x00	; 0
    69c8:	90 e0       	ldi	r25, 0x00	; 0
    69ca:	14 c0       	rjmp	.+40     	; 0x69f4 <_ZN7TwoWire5writeEh+0x54>
    69cc:	80 91 e2 0c 	lds	r24, 0x0CE2	; 0x800ce2 <_ZN7TwoWire13txBufferIndexE>
    69d0:	e8 2f       	mov	r30, r24
    69d2:	f0 e0       	ldi	r31, 0x00	; 0
    69d4:	ed 51       	subi	r30, 0x1D	; 29
    69d6:	f3 4f       	sbci	r31, 0xF3	; 243
    69d8:	99 81       	ldd	r25, Y+1	; 0x01
    69da:	90 83       	st	Z, r25
    69dc:	8f 5f       	subi	r24, 0xFF	; 255
    69de:	80 93 e2 0c 	sts	0x0CE2, r24	; 0x800ce2 <_ZN7TwoWire13txBufferIndexE>
    69e2:	80 93 e1 0c 	sts	0x0CE1, r24	; 0x800ce1 <_ZN7TwoWire14txBufferLengthE>
    69e6:	04 c0       	rjmp	.+8      	; 0x69f0 <_ZN7TwoWire5writeEh+0x50>
    69e8:	61 e0       	ldi	r22, 0x01	; 1
    69ea:	ce 01       	movw	r24, r28
    69ec:	01 96       	adiw	r24, 0x01	; 1
    69ee:	da dd       	rcall	.-1100   	; 0x65a4 <twi_transmit>
    69f0:	81 e0       	ldi	r24, 0x01	; 1
    69f2:	90 e0       	ldi	r25, 0x00	; 0
    69f4:	0f 90       	pop	r0
    69f6:	df 91       	pop	r29
    69f8:	cf 91       	pop	r28
    69fa:	08 95       	ret

000069fc <_ZN7TwoWireC1Ev>:
    69fc:	fc 01       	movw	r30, r24
    69fe:	13 82       	std	Z+3, r1	; 0x03
    6a00:	12 82       	std	Z+2, r1	; 0x02
    6a02:	88 ee       	ldi	r24, 0xE8	; 232
    6a04:	93 e0       	ldi	r25, 0x03	; 3
    6a06:	a0 e0       	ldi	r26, 0x00	; 0
    6a08:	b0 e0       	ldi	r27, 0x00	; 0
    6a0a:	84 83       	std	Z+4, r24	; 0x04
    6a0c:	95 83       	std	Z+5, r25	; 0x05
    6a0e:	a6 83       	std	Z+6, r26	; 0x06
    6a10:	b7 83       	std	Z+7, r27	; 0x07
    6a12:	8b e4       	ldi	r24, 0x4B	; 75
    6a14:	9a e0       	ldi	r25, 0x0A	; 10
    6a16:	91 83       	std	Z+1, r25	; 0x01
    6a18:	80 83       	st	Z, r24
    6a1a:	08 95       	ret

00006a1c <_ZN7TwoWire5beginEv>:
    6a1c:	10 92 05 0d 	sts	0x0D05, r1	; 0x800d05 <_ZN7TwoWire13rxBufferIndexE>
    6a20:	10 92 04 0d 	sts	0x0D04, r1	; 0x800d04 <_ZN7TwoWire14rxBufferLengthE>
    6a24:	10 92 e2 0c 	sts	0x0CE2, r1	; 0x800ce2 <_ZN7TwoWire13txBufferIndexE>
    6a28:	10 92 e1 0c 	sts	0x0CE1, r1	; 0x800ce1 <_ZN7TwoWire14txBufferLengthE>
    6a2c:	de dc       	rcall	.-1604   	; 0x63ea <twi_init>
    6a2e:	88 e9       	ldi	r24, 0x98	; 152
    6a30:	94 e3       	ldi	r25, 0x34	; 52
    6a32:	e5 dd       	rcall	.-1078   	; 0x65fe <twi_attachSlaveTxEvent>
    6a34:	8e e6       	ldi	r24, 0x6E	; 110
    6a36:	94 e3       	ldi	r25, 0x34	; 52
    6a38:	dd cd       	rjmp	.-1094   	; 0x65f4 <twi_attachSlaveRxEvent>

00006a3a <_ZN7TwoWire3endEv>:
    6a3a:	f5 cc       	rjmp	.-1558   	; 0x6426 <twi_disable>

00006a3c <_ZN7TwoWire8setClockEm>:
    6a3c:	cb 01       	movw	r24, r22
    6a3e:	ba 01       	movw	r22, r20
    6a40:	ff cc       	rjmp	.-1538   	; 0x6440 <twi_setFrequency>

00006a42 <_ZN7TwoWire17beginTransmissionEh>:
    6a42:	81 e0       	ldi	r24, 0x01	; 1
    6a44:	80 93 e0 0c 	sts	0x0CE0, r24	; 0x800ce0 <_ZN7TwoWire12transmittingE>
    6a48:	60 93 03 0d 	sts	0x0D03, r22	; 0x800d03 <_ZN7TwoWire9txAddressE>
    6a4c:	10 92 e2 0c 	sts	0x0CE2, r1	; 0x800ce2 <_ZN7TwoWire13txBufferIndexE>
    6a50:	10 92 e1 0c 	sts	0x0CE1, r1	; 0x800ce1 <_ZN7TwoWire14txBufferLengthE>
    6a54:	08 95       	ret

00006a56 <_ZN7TwoWire17beginTransmissionEi>:
    6a56:	f5 cf       	rjmp	.-22     	; 0x6a42 <_ZN7TwoWire17beginTransmissionEh>

00006a58 <_ZN7TwoWire15endTransmissionEh>:
    6a58:	0f 93       	push	r16
    6a5a:	06 2f       	mov	r16, r22
    6a5c:	21 e0       	ldi	r18, 0x01	; 1
    6a5e:	40 91 e1 0c 	lds	r20, 0x0CE1	; 0x800ce1 <_ZN7TwoWire14txBufferLengthE>
    6a62:	63 ee       	ldi	r22, 0xE3	; 227
    6a64:	7c e0       	ldi	r23, 0x0C	; 12
    6a66:	80 91 03 0d 	lds	r24, 0x0D03	; 0x800d03 <_ZN7TwoWire9txAddressE>
    6a6a:	46 dd       	rcall	.-1396   	; 0x64f8 <twi_writeTo>
    6a6c:	10 92 e2 0c 	sts	0x0CE2, r1	; 0x800ce2 <_ZN7TwoWire13txBufferIndexE>
    6a70:	10 92 e1 0c 	sts	0x0CE1, r1	; 0x800ce1 <_ZN7TwoWire14txBufferLengthE>
    6a74:	10 92 e0 0c 	sts	0x0CE0, r1	; 0x800ce0 <_ZN7TwoWire12transmittingE>
    6a78:	0f 91       	pop	r16
    6a7a:	08 95       	ret

00006a7c <_ZN7TwoWire11requestFromEhhmhh>:
    6a7c:	4f 92       	push	r4
    6a7e:	5f 92       	push	r5
    6a80:	6f 92       	push	r6
    6a82:	7f 92       	push	r7
    6a84:	af 92       	push	r10
    6a86:	bf 92       	push	r11
    6a88:	cf 92       	push	r12
    6a8a:	ef 92       	push	r14
    6a8c:	ff 92       	push	r15
    6a8e:	0f 93       	push	r16
    6a90:	1f 93       	push	r17
    6a92:	cf 93       	push	r28
    6a94:	df 93       	push	r29
    6a96:	5c 01       	movw	r10, r24
    6a98:	f6 2e       	mov	r15, r22
    6a9a:	d4 2f       	mov	r29, r20
    6a9c:	28 01       	movw	r4, r16
    6a9e:	39 01       	movw	r6, r18
    6aa0:	ee 20       	and	r14, r14
    6aa2:	11 f1       	breq	.+68     	; 0x6ae8 <_ZN7TwoWire11requestFromEhhmhh+0x6c>
    6aa4:	ce df       	rcall	.-100    	; 0x6a42 <_ZN7TwoWire17beginTransmissionEh>
    6aa6:	ce 2d       	mov	r28, r14
    6aa8:	c4 30       	cpi	r28, 0x04	; 4
    6aaa:	08 f0       	brcs	.+2      	; 0x6aae <_ZN7TwoWire11requestFromEhhmhh+0x32>
    6aac:	c3 e0       	ldi	r28, 0x03	; 3
    6aae:	c1 50       	subi	r28, 0x01	; 1
    6ab0:	c0 f0       	brcs	.+48     	; 0x6ae2 <_ZN7TwoWire11requestFromEhhmhh+0x66>
    6ab2:	28 e0       	ldi	r18, 0x08	; 8
    6ab4:	c2 9f       	mul	r28, r18
    6ab6:	c0 01       	movw	r24, r0
    6ab8:	11 24       	eor	r1, r1
    6aba:	a3 01       	movw	r20, r6
    6abc:	92 01       	movw	r18, r4
    6abe:	04 c0       	rjmp	.+8      	; 0x6ac8 <_ZN7TwoWire11requestFromEhhmhh+0x4c>
    6ac0:	56 95       	lsr	r21
    6ac2:	47 95       	ror	r20
    6ac4:	37 95       	ror	r19
    6ac6:	27 95       	ror	r18
    6ac8:	8a 95       	dec	r24
    6aca:	d2 f7       	brpl	.-12     	; 0x6ac0 <_ZN7TwoWire11requestFromEhhmhh+0x44>
    6acc:	ca 01       	movw	r24, r20
    6ace:	b9 01       	movw	r22, r18
    6ad0:	d5 01       	movw	r26, r10
    6ad2:	ed 91       	ld	r30, X+
    6ad4:	fc 91       	ld	r31, X
    6ad6:	01 90       	ld	r0, Z+
    6ad8:	f0 81       	ld	r31, Z
    6ada:	e0 2d       	mov	r30, r0
    6adc:	c5 01       	movw	r24, r10
    6ade:	09 95       	icall
    6ae0:	e6 cf       	rjmp	.-52     	; 0x6aae <_ZN7TwoWire11requestFromEhhmhh+0x32>
    6ae2:	60 e0       	ldi	r22, 0x00	; 0
    6ae4:	c5 01       	movw	r24, r10
    6ae6:	b8 df       	rcall	.-144    	; 0x6a58 <_ZN7TwoWire15endTransmissionEh>
    6ae8:	4d 2f       	mov	r20, r29
    6aea:	d1 32       	cpi	r29, 0x21	; 33
    6aec:	08 f0       	brcs	.+2      	; 0x6af0 <_ZN7TwoWire11requestFromEhhmhh+0x74>
    6aee:	40 e2       	ldi	r20, 0x20	; 32
    6af0:	2c 2d       	mov	r18, r12
    6af2:	66 e0       	ldi	r22, 0x06	; 6
    6af4:	7d e0       	ldi	r23, 0x0D	; 13
    6af6:	8f 2d       	mov	r24, r15
    6af8:	b7 dc       	rcall	.-1682   	; 0x6468 <twi_readFrom>
    6afa:	10 92 05 0d 	sts	0x0D05, r1	; 0x800d05 <_ZN7TwoWire13rxBufferIndexE>
    6afe:	80 93 04 0d 	sts	0x0D04, r24	; 0x800d04 <_ZN7TwoWire14rxBufferLengthE>
    6b02:	df 91       	pop	r29
    6b04:	cf 91       	pop	r28
    6b06:	1f 91       	pop	r17
    6b08:	0f 91       	pop	r16
    6b0a:	ff 90       	pop	r15
    6b0c:	ef 90       	pop	r14
    6b0e:	cf 90       	pop	r12
    6b10:	bf 90       	pop	r11
    6b12:	af 90       	pop	r10
    6b14:	7f 90       	pop	r7
    6b16:	6f 90       	pop	r6
    6b18:	5f 90       	pop	r5
    6b1a:	4f 90       	pop	r4
    6b1c:	08 95       	ret

00006b1e <_ZN7TwoWire11requestFromEhhh>:
    6b1e:	cf 92       	push	r12
    6b20:	ef 92       	push	r14
    6b22:	0f 93       	push	r16
    6b24:	1f 93       	push	r17
    6b26:	c2 2e       	mov	r12, r18
    6b28:	e1 2c       	mov	r14, r1
    6b2a:	00 e0       	ldi	r16, 0x00	; 0
    6b2c:	10 e0       	ldi	r17, 0x00	; 0
    6b2e:	98 01       	movw	r18, r16
    6b30:	a5 df       	rcall	.-182    	; 0x6a7c <_ZN7TwoWire11requestFromEhhmhh>
    6b32:	1f 91       	pop	r17
    6b34:	0f 91       	pop	r16
    6b36:	ef 90       	pop	r14
    6b38:	cf 90       	pop	r12
    6b3a:	08 95       	ret

00006b3c <_ZN7TwoWire11requestFromEhh>:
    6b3c:	21 e0       	ldi	r18, 0x01	; 1
    6b3e:	ef cf       	rjmp	.-34     	; 0x6b1e <_ZN7TwoWire11requestFromEhhh>

00006b40 <_ZN7TwoWire11requestFromEii>:
    6b40:	21 e0       	ldi	r18, 0x01	; 1
    6b42:	ed cf       	rjmp	.-38     	; 0x6b1e <_ZN7TwoWire11requestFromEhhh>

00006b44 <_ZN7TwoWire15endTransmissionEv>:
    6b44:	61 e0       	ldi	r22, 0x01	; 1
    6b46:	88 cf       	rjmp	.-240    	; 0x6a58 <_ZN7TwoWire15endTransmissionEh>

00006b48 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    6b48:	80 ed       	ldi	r24, 0xD0	; 208
    6b4a:	9c e0       	ldi	r25, 0x0C	; 12
    6b4c:	57 cf       	rjmp	.-338    	; 0x69fc <_ZN7TwoWireC1Ev>

00006b4e <__cmpsf2>:
    6b4e:	d9 d0       	rcall	.+434    	; 0x6d02 <__fp_cmp>
    6b50:	08 f4       	brcc	.+2      	; 0x6b54 <__cmpsf2+0x6>
    6b52:	81 e0       	ldi	r24, 0x01	; 1
    6b54:	08 95       	ret

00006b56 <__divsf3>:
    6b56:	0c d0       	rcall	.+24     	; 0x6b70 <__divsf3x>
    6b58:	0f c1       	rjmp	.+542    	; 0x6d78 <__fp_round>
    6b5a:	07 d1       	rcall	.+526    	; 0x6d6a <__fp_pscB>
    6b5c:	40 f0       	brcs	.+16     	; 0x6b6e <__divsf3+0x18>
    6b5e:	fe d0       	rcall	.+508    	; 0x6d5c <__fp_pscA>
    6b60:	30 f0       	brcs	.+12     	; 0x6b6e <__divsf3+0x18>
    6b62:	21 f4       	brne	.+8      	; 0x6b6c <__divsf3+0x16>
    6b64:	5f 3f       	cpi	r21, 0xFF	; 255
    6b66:	19 f0       	breq	.+6      	; 0x6b6e <__divsf3+0x18>
    6b68:	f0 c0       	rjmp	.+480    	; 0x6d4a <__fp_inf>
    6b6a:	51 11       	cpse	r21, r1
    6b6c:	39 c1       	rjmp	.+626    	; 0x6de0 <__fp_szero>
    6b6e:	f3 c0       	rjmp	.+486    	; 0x6d56 <__fp_nan>

00006b70 <__divsf3x>:
    6b70:	14 d1       	rcall	.+552    	; 0x6d9a <__fp_split3>
    6b72:	98 f3       	brcs	.-26     	; 0x6b5a <__divsf3+0x4>

00006b74 <__divsf3_pse>:
    6b74:	99 23       	and	r25, r25
    6b76:	c9 f3       	breq	.-14     	; 0x6b6a <__divsf3+0x14>
    6b78:	55 23       	and	r21, r21
    6b7a:	b1 f3       	breq	.-20     	; 0x6b68 <__divsf3+0x12>
    6b7c:	95 1b       	sub	r25, r21
    6b7e:	55 0b       	sbc	r21, r21
    6b80:	bb 27       	eor	r27, r27
    6b82:	aa 27       	eor	r26, r26
    6b84:	62 17       	cp	r22, r18
    6b86:	73 07       	cpc	r23, r19
    6b88:	84 07       	cpc	r24, r20
    6b8a:	38 f0       	brcs	.+14     	; 0x6b9a <__divsf3_pse+0x26>
    6b8c:	9f 5f       	subi	r25, 0xFF	; 255
    6b8e:	5f 4f       	sbci	r21, 0xFF	; 255
    6b90:	22 0f       	add	r18, r18
    6b92:	33 1f       	adc	r19, r19
    6b94:	44 1f       	adc	r20, r20
    6b96:	aa 1f       	adc	r26, r26
    6b98:	a9 f3       	breq	.-22     	; 0x6b84 <__divsf3_pse+0x10>
    6b9a:	33 d0       	rcall	.+102    	; 0x6c02 <__divsf3_pse+0x8e>
    6b9c:	0e 2e       	mov	r0, r30
    6b9e:	3a f0       	brmi	.+14     	; 0x6bae <__divsf3_pse+0x3a>
    6ba0:	e0 e8       	ldi	r30, 0x80	; 128
    6ba2:	30 d0       	rcall	.+96     	; 0x6c04 <__divsf3_pse+0x90>
    6ba4:	91 50       	subi	r25, 0x01	; 1
    6ba6:	50 40       	sbci	r21, 0x00	; 0
    6ba8:	e6 95       	lsr	r30
    6baa:	00 1c       	adc	r0, r0
    6bac:	ca f7       	brpl	.-14     	; 0x6ba0 <__divsf3_pse+0x2c>
    6bae:	29 d0       	rcall	.+82     	; 0x6c02 <__divsf3_pse+0x8e>
    6bb0:	fe 2f       	mov	r31, r30
    6bb2:	27 d0       	rcall	.+78     	; 0x6c02 <__divsf3_pse+0x8e>
    6bb4:	66 0f       	add	r22, r22
    6bb6:	77 1f       	adc	r23, r23
    6bb8:	88 1f       	adc	r24, r24
    6bba:	bb 1f       	adc	r27, r27
    6bbc:	26 17       	cp	r18, r22
    6bbe:	37 07       	cpc	r19, r23
    6bc0:	48 07       	cpc	r20, r24
    6bc2:	ab 07       	cpc	r26, r27
    6bc4:	b0 e8       	ldi	r27, 0x80	; 128
    6bc6:	09 f0       	breq	.+2      	; 0x6bca <__divsf3_pse+0x56>
    6bc8:	bb 0b       	sbc	r27, r27
    6bca:	80 2d       	mov	r24, r0
    6bcc:	bf 01       	movw	r22, r30
    6bce:	ff 27       	eor	r31, r31
    6bd0:	93 58       	subi	r25, 0x83	; 131
    6bd2:	5f 4f       	sbci	r21, 0xFF	; 255
    6bd4:	2a f0       	brmi	.+10     	; 0x6be0 <__divsf3_pse+0x6c>
    6bd6:	9e 3f       	cpi	r25, 0xFE	; 254
    6bd8:	51 05       	cpc	r21, r1
    6bda:	68 f0       	brcs	.+26     	; 0x6bf6 <__divsf3_pse+0x82>
    6bdc:	b6 c0       	rjmp	.+364    	; 0x6d4a <__fp_inf>
    6bde:	00 c1       	rjmp	.+512    	; 0x6de0 <__fp_szero>
    6be0:	5f 3f       	cpi	r21, 0xFF	; 255
    6be2:	ec f3       	brlt	.-6      	; 0x6bde <__divsf3_pse+0x6a>
    6be4:	98 3e       	cpi	r25, 0xE8	; 232
    6be6:	dc f3       	brlt	.-10     	; 0x6bde <__divsf3_pse+0x6a>
    6be8:	86 95       	lsr	r24
    6bea:	77 95       	ror	r23
    6bec:	67 95       	ror	r22
    6bee:	b7 95       	ror	r27
    6bf0:	f7 95       	ror	r31
    6bf2:	9f 5f       	subi	r25, 0xFF	; 255
    6bf4:	c9 f7       	brne	.-14     	; 0x6be8 <__divsf3_pse+0x74>
    6bf6:	88 0f       	add	r24, r24
    6bf8:	91 1d       	adc	r25, r1
    6bfa:	96 95       	lsr	r25
    6bfc:	87 95       	ror	r24
    6bfe:	97 f9       	bld	r25, 7
    6c00:	08 95       	ret
    6c02:	e1 e0       	ldi	r30, 0x01	; 1
    6c04:	66 0f       	add	r22, r22
    6c06:	77 1f       	adc	r23, r23
    6c08:	88 1f       	adc	r24, r24
    6c0a:	bb 1f       	adc	r27, r27
    6c0c:	62 17       	cp	r22, r18
    6c0e:	73 07       	cpc	r23, r19
    6c10:	84 07       	cpc	r24, r20
    6c12:	ba 07       	cpc	r27, r26
    6c14:	20 f0       	brcs	.+8      	; 0x6c1e <__divsf3_pse+0xaa>
    6c16:	62 1b       	sub	r22, r18
    6c18:	73 0b       	sbc	r23, r19
    6c1a:	84 0b       	sbc	r24, r20
    6c1c:	ba 0b       	sbc	r27, r26
    6c1e:	ee 1f       	adc	r30, r30
    6c20:	88 f7       	brcc	.-30     	; 0x6c04 <__divsf3_pse+0x90>
    6c22:	e0 95       	com	r30
    6c24:	08 95       	ret

00006c26 <__fixsfsi>:
    6c26:	04 d0       	rcall	.+8      	; 0x6c30 <__fixunssfsi>
    6c28:	68 94       	set
    6c2a:	b1 11       	cpse	r27, r1
    6c2c:	d9 c0       	rjmp	.+434    	; 0x6de0 <__fp_szero>
    6c2e:	08 95       	ret

00006c30 <__fixunssfsi>:
    6c30:	bc d0       	rcall	.+376    	; 0x6daa <__fp_splitA>
    6c32:	88 f0       	brcs	.+34     	; 0x6c56 <__fixunssfsi+0x26>
    6c34:	9f 57       	subi	r25, 0x7F	; 127
    6c36:	90 f0       	brcs	.+36     	; 0x6c5c <__fixunssfsi+0x2c>
    6c38:	b9 2f       	mov	r27, r25
    6c3a:	99 27       	eor	r25, r25
    6c3c:	b7 51       	subi	r27, 0x17	; 23
    6c3e:	a0 f0       	brcs	.+40     	; 0x6c68 <__fixunssfsi+0x38>
    6c40:	d1 f0       	breq	.+52     	; 0x6c76 <__fixunssfsi+0x46>
    6c42:	66 0f       	add	r22, r22
    6c44:	77 1f       	adc	r23, r23
    6c46:	88 1f       	adc	r24, r24
    6c48:	99 1f       	adc	r25, r25
    6c4a:	1a f0       	brmi	.+6      	; 0x6c52 <__fixunssfsi+0x22>
    6c4c:	ba 95       	dec	r27
    6c4e:	c9 f7       	brne	.-14     	; 0x6c42 <__fixunssfsi+0x12>
    6c50:	12 c0       	rjmp	.+36     	; 0x6c76 <__fixunssfsi+0x46>
    6c52:	b1 30       	cpi	r27, 0x01	; 1
    6c54:	81 f0       	breq	.+32     	; 0x6c76 <__fixunssfsi+0x46>
    6c56:	c3 d0       	rcall	.+390    	; 0x6dde <__fp_zero>
    6c58:	b1 e0       	ldi	r27, 0x01	; 1
    6c5a:	08 95       	ret
    6c5c:	c0 c0       	rjmp	.+384    	; 0x6dde <__fp_zero>
    6c5e:	67 2f       	mov	r22, r23
    6c60:	78 2f       	mov	r23, r24
    6c62:	88 27       	eor	r24, r24
    6c64:	b8 5f       	subi	r27, 0xF8	; 248
    6c66:	39 f0       	breq	.+14     	; 0x6c76 <__fixunssfsi+0x46>
    6c68:	b9 3f       	cpi	r27, 0xF9	; 249
    6c6a:	cc f3       	brlt	.-14     	; 0x6c5e <__fixunssfsi+0x2e>
    6c6c:	86 95       	lsr	r24
    6c6e:	77 95       	ror	r23
    6c70:	67 95       	ror	r22
    6c72:	b3 95       	inc	r27
    6c74:	d9 f7       	brne	.-10     	; 0x6c6c <__fixunssfsi+0x3c>
    6c76:	3e f4       	brtc	.+14     	; 0x6c86 <__fixunssfsi+0x56>
    6c78:	90 95       	com	r25
    6c7a:	80 95       	com	r24
    6c7c:	70 95       	com	r23
    6c7e:	61 95       	neg	r22
    6c80:	7f 4f       	sbci	r23, 0xFF	; 255
    6c82:	8f 4f       	sbci	r24, 0xFF	; 255
    6c84:	9f 4f       	sbci	r25, 0xFF	; 255
    6c86:	08 95       	ret

00006c88 <__floatunsisf>:
    6c88:	e8 94       	clt
    6c8a:	09 c0       	rjmp	.+18     	; 0x6c9e <__floatsisf+0x12>

00006c8c <__floatsisf>:
    6c8c:	97 fb       	bst	r25, 7
    6c8e:	3e f4       	brtc	.+14     	; 0x6c9e <__floatsisf+0x12>
    6c90:	90 95       	com	r25
    6c92:	80 95       	com	r24
    6c94:	70 95       	com	r23
    6c96:	61 95       	neg	r22
    6c98:	7f 4f       	sbci	r23, 0xFF	; 255
    6c9a:	8f 4f       	sbci	r24, 0xFF	; 255
    6c9c:	9f 4f       	sbci	r25, 0xFF	; 255
    6c9e:	99 23       	and	r25, r25
    6ca0:	a9 f0       	breq	.+42     	; 0x6ccc <__floatsisf+0x40>
    6ca2:	f9 2f       	mov	r31, r25
    6ca4:	96 e9       	ldi	r25, 0x96	; 150
    6ca6:	bb 27       	eor	r27, r27
    6ca8:	93 95       	inc	r25
    6caa:	f6 95       	lsr	r31
    6cac:	87 95       	ror	r24
    6cae:	77 95       	ror	r23
    6cb0:	67 95       	ror	r22
    6cb2:	b7 95       	ror	r27
    6cb4:	f1 11       	cpse	r31, r1
    6cb6:	f8 cf       	rjmp	.-16     	; 0x6ca8 <__floatsisf+0x1c>
    6cb8:	fa f4       	brpl	.+62     	; 0x6cf8 <__floatsisf+0x6c>
    6cba:	bb 0f       	add	r27, r27
    6cbc:	11 f4       	brne	.+4      	; 0x6cc2 <__floatsisf+0x36>
    6cbe:	60 ff       	sbrs	r22, 0
    6cc0:	1b c0       	rjmp	.+54     	; 0x6cf8 <__floatsisf+0x6c>
    6cc2:	6f 5f       	subi	r22, 0xFF	; 255
    6cc4:	7f 4f       	sbci	r23, 0xFF	; 255
    6cc6:	8f 4f       	sbci	r24, 0xFF	; 255
    6cc8:	9f 4f       	sbci	r25, 0xFF	; 255
    6cca:	16 c0       	rjmp	.+44     	; 0x6cf8 <__floatsisf+0x6c>
    6ccc:	88 23       	and	r24, r24
    6cce:	11 f0       	breq	.+4      	; 0x6cd4 <__floatsisf+0x48>
    6cd0:	96 e9       	ldi	r25, 0x96	; 150
    6cd2:	11 c0       	rjmp	.+34     	; 0x6cf6 <__floatsisf+0x6a>
    6cd4:	77 23       	and	r23, r23
    6cd6:	21 f0       	breq	.+8      	; 0x6ce0 <__floatsisf+0x54>
    6cd8:	9e e8       	ldi	r25, 0x8E	; 142
    6cda:	87 2f       	mov	r24, r23
    6cdc:	76 2f       	mov	r23, r22
    6cde:	05 c0       	rjmp	.+10     	; 0x6cea <__floatsisf+0x5e>
    6ce0:	66 23       	and	r22, r22
    6ce2:	71 f0       	breq	.+28     	; 0x6d00 <__floatsisf+0x74>
    6ce4:	96 e8       	ldi	r25, 0x86	; 134
    6ce6:	86 2f       	mov	r24, r22
    6ce8:	70 e0       	ldi	r23, 0x00	; 0
    6cea:	60 e0       	ldi	r22, 0x00	; 0
    6cec:	2a f0       	brmi	.+10     	; 0x6cf8 <__floatsisf+0x6c>
    6cee:	9a 95       	dec	r25
    6cf0:	66 0f       	add	r22, r22
    6cf2:	77 1f       	adc	r23, r23
    6cf4:	88 1f       	adc	r24, r24
    6cf6:	da f7       	brpl	.-10     	; 0x6cee <__floatsisf+0x62>
    6cf8:	88 0f       	add	r24, r24
    6cfa:	96 95       	lsr	r25
    6cfc:	87 95       	ror	r24
    6cfe:	97 f9       	bld	r25, 7
    6d00:	08 95       	ret

00006d02 <__fp_cmp>:
    6d02:	99 0f       	add	r25, r25
    6d04:	00 08       	sbc	r0, r0
    6d06:	55 0f       	add	r21, r21
    6d08:	aa 0b       	sbc	r26, r26
    6d0a:	e0 e8       	ldi	r30, 0x80	; 128
    6d0c:	fe ef       	ldi	r31, 0xFE	; 254
    6d0e:	16 16       	cp	r1, r22
    6d10:	17 06       	cpc	r1, r23
    6d12:	e8 07       	cpc	r30, r24
    6d14:	f9 07       	cpc	r31, r25
    6d16:	c0 f0       	brcs	.+48     	; 0x6d48 <__fp_cmp+0x46>
    6d18:	12 16       	cp	r1, r18
    6d1a:	13 06       	cpc	r1, r19
    6d1c:	e4 07       	cpc	r30, r20
    6d1e:	f5 07       	cpc	r31, r21
    6d20:	98 f0       	brcs	.+38     	; 0x6d48 <__fp_cmp+0x46>
    6d22:	62 1b       	sub	r22, r18
    6d24:	73 0b       	sbc	r23, r19
    6d26:	84 0b       	sbc	r24, r20
    6d28:	95 0b       	sbc	r25, r21
    6d2a:	39 f4       	brne	.+14     	; 0x6d3a <__fp_cmp+0x38>
    6d2c:	0a 26       	eor	r0, r26
    6d2e:	61 f0       	breq	.+24     	; 0x6d48 <__fp_cmp+0x46>
    6d30:	23 2b       	or	r18, r19
    6d32:	24 2b       	or	r18, r20
    6d34:	25 2b       	or	r18, r21
    6d36:	21 f4       	brne	.+8      	; 0x6d40 <__fp_cmp+0x3e>
    6d38:	08 95       	ret
    6d3a:	0a 26       	eor	r0, r26
    6d3c:	09 f4       	brne	.+2      	; 0x6d40 <__fp_cmp+0x3e>
    6d3e:	a1 40       	sbci	r26, 0x01	; 1
    6d40:	a6 95       	lsr	r26
    6d42:	8f ef       	ldi	r24, 0xFF	; 255
    6d44:	81 1d       	adc	r24, r1
    6d46:	81 1d       	adc	r24, r1
    6d48:	08 95       	ret

00006d4a <__fp_inf>:
    6d4a:	97 f9       	bld	r25, 7
    6d4c:	9f 67       	ori	r25, 0x7F	; 127
    6d4e:	80 e8       	ldi	r24, 0x80	; 128
    6d50:	70 e0       	ldi	r23, 0x00	; 0
    6d52:	60 e0       	ldi	r22, 0x00	; 0
    6d54:	08 95       	ret

00006d56 <__fp_nan>:
    6d56:	9f ef       	ldi	r25, 0xFF	; 255
    6d58:	80 ec       	ldi	r24, 0xC0	; 192
    6d5a:	08 95       	ret

00006d5c <__fp_pscA>:
    6d5c:	00 24       	eor	r0, r0
    6d5e:	0a 94       	dec	r0
    6d60:	16 16       	cp	r1, r22
    6d62:	17 06       	cpc	r1, r23
    6d64:	18 06       	cpc	r1, r24
    6d66:	09 06       	cpc	r0, r25
    6d68:	08 95       	ret

00006d6a <__fp_pscB>:
    6d6a:	00 24       	eor	r0, r0
    6d6c:	0a 94       	dec	r0
    6d6e:	12 16       	cp	r1, r18
    6d70:	13 06       	cpc	r1, r19
    6d72:	14 06       	cpc	r1, r20
    6d74:	05 06       	cpc	r0, r21
    6d76:	08 95       	ret

00006d78 <__fp_round>:
    6d78:	09 2e       	mov	r0, r25
    6d7a:	03 94       	inc	r0
    6d7c:	00 0c       	add	r0, r0
    6d7e:	11 f4       	brne	.+4      	; 0x6d84 <__fp_round+0xc>
    6d80:	88 23       	and	r24, r24
    6d82:	52 f0       	brmi	.+20     	; 0x6d98 <__fp_round+0x20>
    6d84:	bb 0f       	add	r27, r27
    6d86:	40 f4       	brcc	.+16     	; 0x6d98 <__fp_round+0x20>
    6d88:	bf 2b       	or	r27, r31
    6d8a:	11 f4       	brne	.+4      	; 0x6d90 <__fp_round+0x18>
    6d8c:	60 ff       	sbrs	r22, 0
    6d8e:	04 c0       	rjmp	.+8      	; 0x6d98 <__fp_round+0x20>
    6d90:	6f 5f       	subi	r22, 0xFF	; 255
    6d92:	7f 4f       	sbci	r23, 0xFF	; 255
    6d94:	8f 4f       	sbci	r24, 0xFF	; 255
    6d96:	9f 4f       	sbci	r25, 0xFF	; 255
    6d98:	08 95       	ret

00006d9a <__fp_split3>:
    6d9a:	57 fd       	sbrc	r21, 7
    6d9c:	90 58       	subi	r25, 0x80	; 128
    6d9e:	44 0f       	add	r20, r20
    6da0:	55 1f       	adc	r21, r21
    6da2:	59 f0       	breq	.+22     	; 0x6dba <__fp_splitA+0x10>
    6da4:	5f 3f       	cpi	r21, 0xFF	; 255
    6da6:	71 f0       	breq	.+28     	; 0x6dc4 <__fp_splitA+0x1a>
    6da8:	47 95       	ror	r20

00006daa <__fp_splitA>:
    6daa:	88 0f       	add	r24, r24
    6dac:	97 fb       	bst	r25, 7
    6dae:	99 1f       	adc	r25, r25
    6db0:	61 f0       	breq	.+24     	; 0x6dca <__fp_splitA+0x20>
    6db2:	9f 3f       	cpi	r25, 0xFF	; 255
    6db4:	79 f0       	breq	.+30     	; 0x6dd4 <__fp_splitA+0x2a>
    6db6:	87 95       	ror	r24
    6db8:	08 95       	ret
    6dba:	12 16       	cp	r1, r18
    6dbc:	13 06       	cpc	r1, r19
    6dbe:	14 06       	cpc	r1, r20
    6dc0:	55 1f       	adc	r21, r21
    6dc2:	f2 cf       	rjmp	.-28     	; 0x6da8 <__fp_split3+0xe>
    6dc4:	46 95       	lsr	r20
    6dc6:	f1 df       	rcall	.-30     	; 0x6daa <__fp_splitA>
    6dc8:	08 c0       	rjmp	.+16     	; 0x6dda <__fp_splitA+0x30>
    6dca:	16 16       	cp	r1, r22
    6dcc:	17 06       	cpc	r1, r23
    6dce:	18 06       	cpc	r1, r24
    6dd0:	99 1f       	adc	r25, r25
    6dd2:	f1 cf       	rjmp	.-30     	; 0x6db6 <__fp_splitA+0xc>
    6dd4:	86 95       	lsr	r24
    6dd6:	71 05       	cpc	r23, r1
    6dd8:	61 05       	cpc	r22, r1
    6dda:	08 94       	sec
    6ddc:	08 95       	ret

00006dde <__fp_zero>:
    6dde:	e8 94       	clt

00006de0 <__fp_szero>:
    6de0:	bb 27       	eor	r27, r27
    6de2:	66 27       	eor	r22, r22
    6de4:	77 27       	eor	r23, r23
    6de6:	cb 01       	movw	r24, r22
    6de8:	97 f9       	bld	r25, 7
    6dea:	08 95       	ret

00006dec <__cxa_pure_virtual>:
    6dec:	0e 94 80 41 	call	0x8300	; 0x8300 <abort>

00006df0 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    6df0:	1f 92       	push	r1
    6df2:	0f 92       	push	r0
    6df4:	0f b6       	in	r0, 0x3f	; 63
    6df6:	0f 92       	push	r0
    6df8:	11 24       	eor	r1, r1
    6dfa:	2f 93       	push	r18
    6dfc:	8f 93       	push	r24
    6dfe:	9f 93       	push	r25
    6e00:	ef 93       	push	r30
    6e02:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    6e04:	e0 91 36 0d 	lds	r30, 0x0D36	; 0x800d36 <Serial+0x10>
    6e08:	f0 91 37 0d 	lds	r31, 0x0D37	; 0x800d37 <Serial+0x11>
    6e0c:	80 81       	ld	r24, Z
    6e0e:	e0 91 3c 0d 	lds	r30, 0x0D3C	; 0x800d3c <Serial+0x16>
    6e12:	f0 91 3d 0d 	lds	r31, 0x0D3D	; 0x800d3d <Serial+0x17>
    6e16:	82 fd       	sbrc	r24, 2
    6e18:	12 c0       	rjmp	.+36     	; 0x6e3e <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    6e1a:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    6e1c:	80 91 3f 0d 	lds	r24, 0x0D3F	; 0x800d3f <Serial+0x19>
    6e20:	8f 5f       	subi	r24, 0xFF	; 255
    6e22:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    6e24:	20 91 40 0d 	lds	r18, 0x0D40	; 0x800d40 <Serial+0x1a>
    6e28:	82 17       	cp	r24, r18
    6e2a:	51 f0       	breq	.+20     	; 0x6e40 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    6e2c:	e0 91 3f 0d 	lds	r30, 0x0D3F	; 0x800d3f <Serial+0x19>
    6e30:	f0 e0       	ldi	r31, 0x00	; 0
    6e32:	ea 5d       	subi	r30, 0xDA	; 218
    6e34:	f2 4f       	sbci	r31, 0xF2	; 242
    6e36:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    6e38:	80 93 3f 0d 	sts	0x0D3F, r24	; 0x800d3f <Serial+0x19>
    6e3c:	01 c0       	rjmp	.+2      	; 0x6e40 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    6e3e:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    6e40:	ff 91       	pop	r31
    6e42:	ef 91       	pop	r30
    6e44:	9f 91       	pop	r25
    6e46:	8f 91       	pop	r24
    6e48:	2f 91       	pop	r18
    6e4a:	0f 90       	pop	r0
    6e4c:	0f be       	out	0x3f, r0	; 63
    6e4e:	0f 90       	pop	r0
    6e50:	1f 90       	pop	r1
    6e52:	18 95       	reti

00006e54 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    6e54:	1f 92       	push	r1
    6e56:	0f 92       	push	r0
    6e58:	0f b6       	in	r0, 0x3f	; 63
    6e5a:	0f 92       	push	r0
    6e5c:	11 24       	eor	r1, r1
    6e5e:	2f 93       	push	r18
    6e60:	3f 93       	push	r19
    6e62:	4f 93       	push	r20
    6e64:	5f 93       	push	r21
    6e66:	6f 93       	push	r22
    6e68:	7f 93       	push	r23
    6e6a:	8f 93       	push	r24
    6e6c:	9f 93       	push	r25
    6e6e:	af 93       	push	r26
    6e70:	bf 93       	push	r27
    6e72:	ef 93       	push	r30
    6e74:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    6e76:	86 e2       	ldi	r24, 0x26	; 38
    6e78:	9d e0       	ldi	r25, 0x0D	; 13
    6e7a:	2e d7       	rcall	.+3676   	; 0x7cd8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    6e7c:	ff 91       	pop	r31
    6e7e:	ef 91       	pop	r30
    6e80:	bf 91       	pop	r27
    6e82:	af 91       	pop	r26
    6e84:	9f 91       	pop	r25
    6e86:	8f 91       	pop	r24
    6e88:	7f 91       	pop	r23
    6e8a:	6f 91       	pop	r22
    6e8c:	5f 91       	pop	r21
    6e8e:	4f 91       	pop	r20
    6e90:	3f 91       	pop	r19
    6e92:	2f 91       	pop	r18
    6e94:	0f 90       	pop	r0
    6e96:	0f be       	out	0x3f, r0	; 63
    6e98:	0f 90       	pop	r0
    6e9a:	1f 90       	pop	r1
    6e9c:	18 95       	reti

00006e9e <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    6e9e:	86 e2       	ldi	r24, 0x26	; 38
    6ea0:	9d e0       	ldi	r25, 0x0D	; 13
    6ea2:	d0 d6       	rcall	.+3488   	; 0x7c44 <_ZN14HardwareSerial9availableEv>
    6ea4:	21 e0       	ldi	r18, 0x01	; 1
    6ea6:	89 2b       	or	r24, r25
    6ea8:	09 f4       	brne	.+2      	; 0x6eac <_Z17Serial0_availablev+0xe>
    6eaa:	20 e0       	ldi	r18, 0x00	; 0
}
    6eac:	82 2f       	mov	r24, r18
    6eae:	08 95       	ret

00006eb0 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    6eb0:	e6 e2       	ldi	r30, 0x26	; 38
    6eb2:	fd e0       	ldi	r31, 0x0D	; 13
    6eb4:	13 82       	std	Z+3, r1	; 0x03
    6eb6:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    6eb8:	88 ee       	ldi	r24, 0xE8	; 232
    6eba:	93 e0       	ldi	r25, 0x03	; 3
    6ebc:	a0 e0       	ldi	r26, 0x00	; 0
    6ebe:	b0 e0       	ldi	r27, 0x00	; 0
    6ec0:	84 83       	std	Z+4, r24	; 0x04
    6ec2:	95 83       	std	Z+5, r25	; 0x05
    6ec4:	a6 83       	std	Z+6, r26	; 0x06
    6ec6:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    6ec8:	8f e6       	ldi	r24, 0x6F	; 111
    6eca:	9a e0       	ldi	r25, 0x0A	; 10
    6ecc:	91 83       	std	Z+1, r25	; 0x01
    6ece:	80 83       	st	Z, r24
    6ed0:	85 ec       	ldi	r24, 0xC5	; 197
    6ed2:	90 e0       	ldi	r25, 0x00	; 0
    6ed4:	95 87       	std	Z+13, r25	; 0x0d
    6ed6:	84 87       	std	Z+12, r24	; 0x0c
    6ed8:	84 ec       	ldi	r24, 0xC4	; 196
    6eda:	90 e0       	ldi	r25, 0x00	; 0
    6edc:	97 87       	std	Z+15, r25	; 0x0f
    6ede:	86 87       	std	Z+14, r24	; 0x0e
    6ee0:	80 ec       	ldi	r24, 0xC0	; 192
    6ee2:	90 e0       	ldi	r25, 0x00	; 0
    6ee4:	91 8b       	std	Z+17, r25	; 0x11
    6ee6:	80 8b       	std	Z+16, r24	; 0x10
    6ee8:	81 ec       	ldi	r24, 0xC1	; 193
    6eea:	90 e0       	ldi	r25, 0x00	; 0
    6eec:	93 8b       	std	Z+19, r25	; 0x13
    6eee:	82 8b       	std	Z+18, r24	; 0x12
    6ef0:	82 ec       	ldi	r24, 0xC2	; 194
    6ef2:	90 e0       	ldi	r25, 0x00	; 0
    6ef4:	95 8b       	std	Z+21, r25	; 0x15
    6ef6:	84 8b       	std	Z+20, r24	; 0x14
    6ef8:	86 ec       	ldi	r24, 0xC6	; 198
    6efa:	90 e0       	ldi	r25, 0x00	; 0
    6efc:	97 8b       	std	Z+23, r25	; 0x17
    6efe:	86 8b       	std	Z+22, r24	; 0x16
    6f00:	11 8e       	std	Z+25, r1	; 0x19
    6f02:	12 8e       	std	Z+26, r1	; 0x1a
    6f04:	13 8e       	std	Z+27, r1	; 0x1b
    6f06:	14 8e       	std	Z+28, r1	; 0x1c
    6f08:	08 95       	ret

00006f0a <_ZNK9IPAddress7printToER5Print>:
        // Too few dots (there must be 3 dots)
        return false;
    }
    _address.bytes[3] = acc;
    return true;
}
    6f0a:	8f 92       	push	r8
    6f0c:	9f 92       	push	r9
    6f0e:	af 92       	push	r10
    6f10:	bf 92       	push	r11
    6f12:	cf 92       	push	r12
    6f14:	df 92       	push	r13
    6f16:	ef 92       	push	r14
    6f18:	ff 92       	push	r15
    6f1a:	0f 93       	push	r16
    6f1c:	1f 93       	push	r17
    6f1e:	cf 93       	push	r28
    6f20:	df 93       	push	r29
    6f22:	7c 01       	movw	r14, r24
    6f24:	8b 01       	movw	r16, r22
    6f26:	4c 01       	movw	r8, r24
    6f28:	82 e0       	ldi	r24, 0x02	; 2
    6f2a:	88 0e       	add	r8, r24
    6f2c:	91 1c       	adc	r9, r1
    6f2e:	57 01       	movw	r10, r14
    6f30:	e5 e0       	ldi	r30, 0x05	; 5
    6f32:	ae 0e       	add	r10, r30
    6f34:	b1 1c       	adc	r11, r1
    6f36:	c0 e0       	ldi	r28, 0x00	; 0
    6f38:	d0 e0       	ldi	r29, 0x00	; 0
    6f3a:	f4 01       	movw	r30, r8
    6f3c:	61 91       	ld	r22, Z+
    6f3e:	4f 01       	movw	r8, r30
    6f40:	4a e0       	ldi	r20, 0x0A	; 10
    6f42:	50 e0       	ldi	r21, 0x00	; 0
    6f44:	c8 01       	movw	r24, r16
    6f46:	4b d1       	rcall	.+662    	; 0x71de <_ZN5Print5printEhi>
    6f48:	6c 01       	movw	r12, r24
    6f4a:	6e e2       	ldi	r22, 0x2E	; 46
    6f4c:	c8 01       	movw	r24, r16
    6f4e:	ba d0       	rcall	.+372    	; 0x70c4 <_ZN5Print5printEc>
    6f50:	8c 0d       	add	r24, r12
    6f52:	9d 1d       	adc	r25, r13
    6f54:	c8 0f       	add	r28, r24
    6f56:	d9 1f       	adc	r29, r25
    6f58:	8a 14       	cp	r8, r10
    6f5a:	9b 04       	cpc	r9, r11
    6f5c:	71 f7       	brne	.-36     	; 0x6f3a <_ZNK9IPAddress7printToER5Print+0x30>
    6f5e:	4a e0       	ldi	r20, 0x0A	; 10
    6f60:	50 e0       	ldi	r21, 0x00	; 0
    6f62:	f7 01       	movw	r30, r14
    6f64:	65 81       	ldd	r22, Z+5	; 0x05
    6f66:	c8 01       	movw	r24, r16
    6f68:	3a d1       	rcall	.+628    	; 0x71de <_ZN5Print5printEhi>
    6f6a:	8c 0f       	add	r24, r28
    6f6c:	9d 1f       	adc	r25, r29
    6f6e:	df 91       	pop	r29
    6f70:	cf 91       	pop	r28
    6f72:	1f 91       	pop	r17
    6f74:	0f 91       	pop	r16
    6f76:	ff 90       	pop	r15
    6f78:	ef 90       	pop	r14
    6f7a:	df 90       	pop	r13
    6f7c:	cf 90       	pop	r12
    6f7e:	bf 90       	pop	r11
    6f80:	af 90       	pop	r10
    6f82:	9f 90       	pop	r9
    6f84:	8f 90       	pop	r8
    6f86:	08 95       	ret

00006f88 <_ZN9IPAddressC1Ev>:
    6f88:	2d e5       	ldi	r18, 0x5D	; 93
    6f8a:	3a e0       	ldi	r19, 0x0A	; 10
    6f8c:	fc 01       	movw	r30, r24
    6f8e:	31 83       	std	Z+1, r19	; 0x01
    6f90:	20 83       	st	Z, r18
    6f92:	12 82       	std	Z+2, r1	; 0x02
    6f94:	13 82       	std	Z+3, r1	; 0x03
    6f96:	14 82       	std	Z+4, r1	; 0x04
    6f98:	15 82       	std	Z+5, r1	; 0x05
    6f9a:	08 95       	ret

00006f9c <_ZN9IPAddressC1Ehhhh>:
    6f9c:	0f 93       	push	r16
    6f9e:	fc 01       	movw	r30, r24
    6fa0:	8d e5       	ldi	r24, 0x5D	; 93
    6fa2:	9a e0       	ldi	r25, 0x0A	; 10
    6fa4:	91 83       	std	Z+1, r25	; 0x01
    6fa6:	80 83       	st	Z, r24
    6fa8:	62 83       	std	Z+2, r22	; 0x02
    6faa:	43 83       	std	Z+3, r20	; 0x03
    6fac:	24 83       	std	Z+4, r18	; 0x04
    6fae:	05 83       	std	Z+5, r16	; 0x05
    6fb0:	0f 91       	pop	r16
    6fb2:	08 95       	ret

00006fb4 <_ZN9IPAddressaSEPKh>:

IPAddress& IPAddress::operator=(const uint8_t *address)
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
    6fb4:	dc 01       	movw	r26, r24
    6fb6:	12 96       	adiw	r26, 0x02	; 2
    6fb8:	24 e0       	ldi	r18, 0x04	; 4
    6fba:	fb 01       	movw	r30, r22
    6fbc:	01 90       	ld	r0, Z+
    6fbe:	0d 92       	st	X+, r0
    6fc0:	2a 95       	dec	r18
    6fc2:	e1 f7       	brne	.-8      	; 0x6fbc <_ZN9IPAddressaSEPKh+0x8>
    return *this;
}
    6fc4:	08 95       	ret

00006fc6 <initVariant>:
    6fc6:	08 95       	ret

00006fc8 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    6fc8:	e4 d1       	rcall	.+968    	; 0x7392 <init>

	initVariant();
    6fca:	fd df       	rcall	.-6      	; 0x6fc6 <initVariant>
    6fcc:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <setup>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    6fd0:	cf e5       	ldi	r28, 0x5F	; 95
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    6fd2:	de e3       	ldi	r29, 0x3E	; 62
    6fd4:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <loop>
#endif
	
	setup();
    
	for (;;) {
		loop();
    6fd8:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
    6fda:	e1 f3       	breq	.-8      	; 0x6fd4 <main+0xc>
    6fdc:	70 d6       	rcall	.+3296   	; 0x7cbe <_Z14serialEventRunv>
    6fde:	fa cf       	rjmp	.-12     	; 0x6fd4 <main+0xc>

00006fe0 <_ZN5Print5writeEPKhj>:
    6fe0:	cf 92       	push	r12
size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    6fe2:	df 92       	push	r13
    6fe4:	ef 92       	push	r14
    6fe6:	ff 92       	push	r15
    6fe8:	0f 93       	push	r16
    6fea:	1f 93       	push	r17
    6fec:	cf 93       	push	r28
    6fee:	df 93       	push	r29
    6ff0:	6c 01       	movw	r12, r24
    6ff2:	7a 01       	movw	r14, r20
    6ff4:	8b 01       	movw	r16, r22
    6ff6:	c0 e0       	ldi	r28, 0x00	; 0
    6ff8:	d0 e0       	ldi	r29, 0x00	; 0
    6ffa:	ce 15       	cp	r28, r14
    6ffc:	df 05       	cpc	r29, r15
    6ffe:	81 f0       	breq	.+32     	; 0x7020 <_ZN5Print5writeEPKhj+0x40>
    7000:	d8 01       	movw	r26, r16
    7002:	6d 91       	ld	r22, X+
    7004:	8d 01       	movw	r16, r26
    7006:	d6 01       	movw	r26, r12
    7008:	ed 91       	ld	r30, X+
    700a:	fc 91       	ld	r31, X
    700c:	01 90       	ld	r0, Z+
    700e:	f0 81       	ld	r31, Z
    7010:	e0 2d       	mov	r30, r0
    7012:	c6 01       	movw	r24, r12
    7014:	09 95       	icall
    7016:	89 2b       	or	r24, r25
    7018:	11 f0       	breq	.+4      	; 0x701e <_ZN5Print5writeEPKhj+0x3e>
    701a:	21 96       	adiw	r28, 0x01	; 1
    701c:	ee cf       	rjmp	.-36     	; 0x6ffa <_ZN5Print5writeEPKhj+0x1a>
    701e:	7e 01       	movw	r14, r28
    7020:	c7 01       	movw	r24, r14
    7022:	df 91       	pop	r29
    7024:	cf 91       	pop	r28
    7026:	1f 91       	pop	r17
    7028:	0f 91       	pop	r16
    702a:	ff 90       	pop	r15
    702c:	ef 90       	pop	r14
    702e:	df 90       	pop	r13
    7030:	cf 90       	pop	r12
    7032:	08 95       	ret

00007034 <_ZN5Print5writeEPKc>:
    7034:	61 15       	cp	r22, r1
    7036:	71 05       	cpc	r23, r1
    7038:	79 f0       	breq	.+30     	; 0x7058 <_ZN5Print5writeEPKc+0x24>
    703a:	fb 01       	movw	r30, r22
    703c:	01 90       	ld	r0, Z+
    703e:	00 20       	and	r0, r0
    7040:	e9 f7       	brne	.-6      	; 0x703c <_ZN5Print5writeEPKc+0x8>
    7042:	31 97       	sbiw	r30, 0x01	; 1
    7044:	af 01       	movw	r20, r30
    7046:	46 1b       	sub	r20, r22
    7048:	57 0b       	sbc	r21, r23
    704a:	dc 01       	movw	r26, r24
    704c:	ed 91       	ld	r30, X+
    704e:	fc 91       	ld	r31, X
    7050:	02 80       	ldd	r0, Z+2	; 0x02
    7052:	f3 81       	ldd	r31, Z+3	; 0x03
    7054:	e0 2d       	mov	r30, r0
    7056:	09 94       	ijmp
    7058:	80 e0       	ldi	r24, 0x00	; 0
    705a:	90 e0       	ldi	r25, 0x00	; 0
    705c:	08 95       	ret

0000705e <_ZN5Print5printEPK19__FlashStringHelper>:
    705e:	ef 92       	push	r14
    7060:	ff 92       	push	r15
    7062:	0f 93       	push	r16
    7064:	1f 93       	push	r17
    7066:	cf 93       	push	r28
    7068:	df 93       	push	r29
    706a:	8c 01       	movw	r16, r24
    706c:	7b 01       	movw	r14, r22
    706e:	c0 e0       	ldi	r28, 0x00	; 0
    7070:	d0 e0       	ldi	r29, 0x00	; 0
    7072:	f7 01       	movw	r30, r14
    7074:	ec 0f       	add	r30, r28
    7076:	fd 1f       	adc	r31, r29
    7078:	64 91       	lpm	r22, Z
    707a:	66 23       	and	r22, r22
    707c:	61 f0       	breq	.+24     	; 0x7096 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    707e:	d8 01       	movw	r26, r16
    7080:	ed 91       	ld	r30, X+
    7082:	fc 91       	ld	r31, X
    7084:	01 90       	ld	r0, Z+
    7086:	f0 81       	ld	r31, Z
    7088:	e0 2d       	mov	r30, r0
    708a:	c8 01       	movw	r24, r16
    708c:	09 95       	icall
    708e:	89 2b       	or	r24, r25
    7090:	11 f0       	breq	.+4      	; 0x7096 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    7092:	21 96       	adiw	r28, 0x01	; 1
    7094:	ee cf       	rjmp	.-36     	; 0x7072 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    7096:	ce 01       	movw	r24, r28
    7098:	df 91       	pop	r29
    709a:	cf 91       	pop	r28
    709c:	1f 91       	pop	r17
    709e:	0f 91       	pop	r16
    70a0:	ff 90       	pop	r15
    70a2:	ef 90       	pop	r14
    70a4:	08 95       	ret

000070a6 <_ZN5Print5printERK6String>:
    70a6:	db 01       	movw	r26, r22
    70a8:	14 96       	adiw	r26, 0x04	; 4
    70aa:	4d 91       	ld	r20, X+
    70ac:	5c 91       	ld	r21, X
    70ae:	15 97       	sbiw	r26, 0x05	; 5
    70b0:	6d 91       	ld	r22, X+
    70b2:	7c 91       	ld	r23, X
    70b4:	dc 01       	movw	r26, r24
    70b6:	ed 91       	ld	r30, X+
    70b8:	fc 91       	ld	r31, X
    70ba:	02 80       	ldd	r0, Z+2	; 0x02
    70bc:	f3 81       	ldd	r31, Z+3	; 0x03
    70be:	e0 2d       	mov	r30, r0
    70c0:	09 94       	ijmp

000070c2 <_ZN5Print5printEPKc>:
    70c2:	b8 cf       	rjmp	.-144    	; 0x7034 <_ZN5Print5writeEPKc>

000070c4 <_ZN5Print5printEc>:
    70c4:	dc 01       	movw	r26, r24
    70c6:	ed 91       	ld	r30, X+
    70c8:	fc 91       	ld	r31, X
    70ca:	01 90       	ld	r0, Z+
    70cc:	f0 81       	ld	r31, Z
    70ce:	e0 2d       	mov	r30, r0
    70d0:	09 94       	ijmp

000070d2 <_ZN5Print7printlnEv>:
    70d2:	6d e1       	ldi	r22, 0x1D	; 29
    70d4:	73 e0       	ldi	r23, 0x03	; 3
    70d6:	ae cf       	rjmp	.-164    	; 0x7034 <_ZN5Print5writeEPKc>

000070d8 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    70d8:	0f 93       	push	r16
    70da:	1f 93       	push	r17
    70dc:	cf 93       	push	r28
    70de:	df 93       	push	r29
    70e0:	ec 01       	movw	r28, r24
    70e2:	bd df       	rcall	.-134    	; 0x705e <_ZN5Print5printEPK19__FlashStringHelper>
    70e4:	8c 01       	movw	r16, r24
    70e6:	ce 01       	movw	r24, r28
    70e8:	f4 df       	rcall	.-24     	; 0x70d2 <_ZN5Print7printlnEv>
    70ea:	80 0f       	add	r24, r16
    70ec:	91 1f       	adc	r25, r17
    70ee:	df 91       	pop	r29
    70f0:	cf 91       	pop	r28
    70f2:	1f 91       	pop	r17
    70f4:	0f 91       	pop	r16
    70f6:	08 95       	ret

000070f8 <_ZN5Print7printlnERK6String>:
    70f8:	0f 93       	push	r16
    70fa:	1f 93       	push	r17
    70fc:	cf 93       	push	r28
    70fe:	df 93       	push	r29
    7100:	ec 01       	movw	r28, r24
    7102:	d1 df       	rcall	.-94     	; 0x70a6 <_ZN5Print5printERK6String>
    7104:	8c 01       	movw	r16, r24
    7106:	ce 01       	movw	r24, r28
    7108:	e4 df       	rcall	.-56     	; 0x70d2 <_ZN5Print7printlnEv>
    710a:	80 0f       	add	r24, r16
    710c:	91 1f       	adc	r25, r17
    710e:	df 91       	pop	r29
    7110:	cf 91       	pop	r28
    7112:	1f 91       	pop	r17
    7114:	0f 91       	pop	r16
    7116:	08 95       	ret

00007118 <_ZN5Print7printlnEPKc>:
    7118:	0f 93       	push	r16
    711a:	1f 93       	push	r17
    711c:	cf 93       	push	r28
    711e:	df 93       	push	r29
    7120:	ec 01       	movw	r28, r24
    7122:	88 df       	rcall	.-240    	; 0x7034 <_ZN5Print5writeEPKc>
    7124:	8c 01       	movw	r16, r24
    7126:	ce 01       	movw	r24, r28
    7128:	d4 df       	rcall	.-88     	; 0x70d2 <_ZN5Print7printlnEv>
    712a:	80 0f       	add	r24, r16
    712c:	91 1f       	adc	r25, r17
    712e:	df 91       	pop	r29
    7130:	cf 91       	pop	r28
    7132:	1f 91       	pop	r17
    7134:	0f 91       	pop	r16
    7136:	08 95       	ret

00007138 <_ZN5Print11printNumberEmh>:
    7138:	8f 92       	push	r8
    713a:	9f 92       	push	r9
    713c:	af 92       	push	r10
    713e:	bf 92       	push	r11
    7140:	ef 92       	push	r14
    7142:	ff 92       	push	r15
    7144:	0f 93       	push	r16
    7146:	1f 93       	push	r17
    7148:	cf 93       	push	r28
    714a:	df 93       	push	r29
    714c:	cd b7       	in	r28, 0x3d	; 61
    714e:	de b7       	in	r29, 0x3e	; 62
    7150:	a1 97       	sbiw	r28, 0x21	; 33
    7152:	0f b6       	in	r0, 0x3f	; 63
    7154:	f8 94       	cli
    7156:	de bf       	out	0x3e, r29	; 62
    7158:	0f be       	out	0x3f, r0	; 63
    715a:	cd bf       	out	0x3d, r28	; 61
    715c:	7c 01       	movw	r14, r24
    715e:	fa 01       	movw	r30, r20
    7160:	cb 01       	movw	r24, r22
    7162:	19 a2       	std	Y+33, r1	; 0x21
    7164:	22 30       	cpi	r18, 0x02	; 2
    7166:	08 f4       	brcc	.+2      	; 0x716a <_ZN5Print11printNumberEmh+0x32>
    7168:	2a e0       	ldi	r18, 0x0A	; 10
    716a:	8e 01       	movw	r16, r28
    716c:	0f 5d       	subi	r16, 0xDF	; 223
    716e:	1f 4f       	sbci	r17, 0xFF	; 255
    7170:	82 2e       	mov	r8, r18
    7172:	91 2c       	mov	r9, r1
    7174:	a1 2c       	mov	r10, r1
    7176:	b1 2c       	mov	r11, r1
    7178:	bf 01       	movw	r22, r30
    717a:	a5 01       	movw	r20, r10
    717c:	94 01       	movw	r18, r8
    717e:	5c d6       	rcall	.+3256   	; 0x7e38 <__udivmodsi4>
    7180:	f9 01       	movw	r30, r18
    7182:	ca 01       	movw	r24, r20
    7184:	01 50       	subi	r16, 0x01	; 1
    7186:	11 09       	sbc	r17, r1
    7188:	6a 30       	cpi	r22, 0x0A	; 10
    718a:	10 f4       	brcc	.+4      	; 0x7190 <_ZN5Print11printNumberEmh+0x58>
    718c:	60 5d       	subi	r22, 0xD0	; 208
    718e:	01 c0       	rjmp	.+2      	; 0x7192 <_ZN5Print11printNumberEmh+0x5a>
    7190:	69 5c       	subi	r22, 0xC9	; 201
    7192:	d8 01       	movw	r26, r16
    7194:	6c 93       	st	X, r22
    7196:	23 2b       	or	r18, r19
    7198:	24 2b       	or	r18, r20
    719a:	25 2b       	or	r18, r21
    719c:	69 f7       	brne	.-38     	; 0x7178 <_ZN5Print11printNumberEmh+0x40>
    719e:	b8 01       	movw	r22, r16
    71a0:	c7 01       	movw	r24, r14
    71a2:	48 df       	rcall	.-368    	; 0x7034 <_ZN5Print5writeEPKc>
    71a4:	a1 96       	adiw	r28, 0x21	; 33
    71a6:	0f b6       	in	r0, 0x3f	; 63
    71a8:	f8 94       	cli
    71aa:	de bf       	out	0x3e, r29	; 62
    71ac:	0f be       	out	0x3f, r0	; 63
    71ae:	cd bf       	out	0x3d, r28	; 61
    71b0:	df 91       	pop	r29
    71b2:	cf 91       	pop	r28
    71b4:	1f 91       	pop	r17
    71b6:	0f 91       	pop	r16
    71b8:	ff 90       	pop	r15
    71ba:	ef 90       	pop	r14
    71bc:	bf 90       	pop	r11
    71be:	af 90       	pop	r10
    71c0:	9f 90       	pop	r9
    71c2:	8f 90       	pop	r8
    71c4:	08 95       	ret

000071c6 <_ZN5Print5printEmi>:
    71c6:	21 15       	cp	r18, r1
    71c8:	31 05       	cpc	r19, r1
    71ca:	41 f4       	brne	.+16     	; 0x71dc <_ZN5Print5printEmi+0x16>
    71cc:	dc 01       	movw	r26, r24
    71ce:	ed 91       	ld	r30, X+
    71d0:	fc 91       	ld	r31, X
    71d2:	01 90       	ld	r0, Z+
    71d4:	f0 81       	ld	r31, Z
    71d6:	e0 2d       	mov	r30, r0
    71d8:	64 2f       	mov	r22, r20
    71da:	09 94       	ijmp
    71dc:	ad cf       	rjmp	.-166    	; 0x7138 <_ZN5Print11printNumberEmh>

000071de <_ZN5Print5printEhi>:
    71de:	9a 01       	movw	r18, r20
    71e0:	46 2f       	mov	r20, r22
    71e2:	50 e0       	ldi	r21, 0x00	; 0
    71e4:	60 e0       	ldi	r22, 0x00	; 0
    71e6:	70 e0       	ldi	r23, 0x00	; 0
    71e8:	ee cf       	rjmp	.-36     	; 0x71c6 <_ZN5Print5printEmi>

000071ea <_ZN5Print5printEji>:
    71ea:	9a 01       	movw	r18, r20
    71ec:	ab 01       	movw	r20, r22
    71ee:	60 e0       	ldi	r22, 0x00	; 0
    71f0:	70 e0       	ldi	r23, 0x00	; 0
    71f2:	e9 cf       	rjmp	.-46     	; 0x71c6 <_ZN5Print5printEmi>

000071f4 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    71f4:	0f 93       	push	r16
    71f6:	1f 93       	push	r17
    71f8:	cf 93       	push	r28
    71fa:	df 93       	push	r29
    71fc:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    71fe:	e3 df       	rcall	.-58     	; 0x71c6 <_ZN5Print5printEmi>
    7200:	8c 01       	movw	r16, r24
  n += println();
    7202:	ce 01       	movw	r24, r28
    7204:	66 df       	rcall	.-308    	; 0x70d2 <_ZN5Print7printlnEv>
  return n;
}
    7206:	80 0f       	add	r24, r16
    7208:	91 1f       	adc	r25, r17
    720a:	df 91       	pop	r29
    720c:	cf 91       	pop	r28
    720e:	1f 91       	pop	r17
    7210:	0f 91       	pop	r16
    7212:	08 95       	ret

00007214 <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    7214:	1f 92       	push	r1
    7216:	0f 92       	push	r0
    7218:	0f b6       	in	r0, 0x3f	; 63
    721a:	0f 92       	push	r0
    721c:	11 24       	eor	r1, r1
    721e:	2f 93       	push	r18
    7220:	3f 93       	push	r19
    7222:	8f 93       	push	r24
    7224:	9f 93       	push	r25
    7226:	af 93       	push	r26
    7228:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    722a:	80 91 c4 0d 	lds	r24, 0x0DC4	; 0x800dc4 <timer0_millis>
    722e:	90 91 c5 0d 	lds	r25, 0x0DC5	; 0x800dc5 <timer0_millis+0x1>
    7232:	a0 91 c6 0d 	lds	r26, 0x0DC6	; 0x800dc6 <timer0_millis+0x2>
    7236:	b0 91 c7 0d 	lds	r27, 0x0DC7	; 0x800dc7 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    723a:	30 91 c3 0d 	lds	r19, 0x0DC3	; 0x800dc3 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    723e:	23 e0       	ldi	r18, 0x03	; 3
    7240:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    7242:	2d 37       	cpi	r18, 0x7D	; 125
    7244:	20 f4       	brcc	.+8      	; 0x724e <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    7246:	01 96       	adiw	r24, 0x01	; 1
    7248:	a1 1d       	adc	r26, r1
    724a:	b1 1d       	adc	r27, r1
    724c:	05 c0       	rjmp	.+10     	; 0x7258 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    724e:	26 e8       	ldi	r18, 0x86	; 134
    7250:	23 0f       	add	r18, r19
		m += 1;
    7252:	02 96       	adiw	r24, 0x02	; 2
    7254:	a1 1d       	adc	r26, r1
    7256:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    7258:	20 93 c3 0d 	sts	0x0DC3, r18	; 0x800dc3 <timer0_fract>
	timer0_millis = m;
    725c:	80 93 c4 0d 	sts	0x0DC4, r24	; 0x800dc4 <timer0_millis>
    7260:	90 93 c5 0d 	sts	0x0DC5, r25	; 0x800dc5 <timer0_millis+0x1>
    7264:	a0 93 c6 0d 	sts	0x0DC6, r26	; 0x800dc6 <timer0_millis+0x2>
    7268:	b0 93 c7 0d 	sts	0x0DC7, r27	; 0x800dc7 <timer0_millis+0x3>
	timer0_overflow_count++;
    726c:	80 91 c8 0d 	lds	r24, 0x0DC8	; 0x800dc8 <timer0_overflow_count>
    7270:	90 91 c9 0d 	lds	r25, 0x0DC9	; 0x800dc9 <timer0_overflow_count+0x1>
    7274:	a0 91 ca 0d 	lds	r26, 0x0DCA	; 0x800dca <timer0_overflow_count+0x2>
    7278:	b0 91 cb 0d 	lds	r27, 0x0DCB	; 0x800dcb <timer0_overflow_count+0x3>
    727c:	01 96       	adiw	r24, 0x01	; 1
    727e:	a1 1d       	adc	r26, r1
    7280:	b1 1d       	adc	r27, r1
    7282:	80 93 c8 0d 	sts	0x0DC8, r24	; 0x800dc8 <timer0_overflow_count>
    7286:	90 93 c9 0d 	sts	0x0DC9, r25	; 0x800dc9 <timer0_overflow_count+0x1>
    728a:	a0 93 ca 0d 	sts	0x0DCA, r26	; 0x800dca <timer0_overflow_count+0x2>
    728e:	b0 93 cb 0d 	sts	0x0DCB, r27	; 0x800dcb <timer0_overflow_count+0x3>
}
    7292:	bf 91       	pop	r27
    7294:	af 91       	pop	r26
    7296:	9f 91       	pop	r25
    7298:	8f 91       	pop	r24
    729a:	3f 91       	pop	r19
    729c:	2f 91       	pop	r18
    729e:	0f 90       	pop	r0
    72a0:	0f be       	out	0x3f, r0	; 63
    72a2:	0f 90       	pop	r0
    72a4:	1f 90       	pop	r1
    72a6:	18 95       	reti

000072a8 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    72a8:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    72aa:	f8 94       	cli
	m = timer0_millis;
    72ac:	60 91 c4 0d 	lds	r22, 0x0DC4	; 0x800dc4 <timer0_millis>
    72b0:	70 91 c5 0d 	lds	r23, 0x0DC5	; 0x800dc5 <timer0_millis+0x1>
    72b4:	80 91 c6 0d 	lds	r24, 0x0DC6	; 0x800dc6 <timer0_millis+0x2>
    72b8:	90 91 c7 0d 	lds	r25, 0x0DC7	; 0x800dc7 <timer0_millis+0x3>
	SREG = oldSREG;
    72bc:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    72be:	08 95       	ret

000072c0 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    72c0:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    72c2:	f8 94       	cli
	m = timer0_overflow_count;
    72c4:	80 91 c8 0d 	lds	r24, 0x0DC8	; 0x800dc8 <timer0_overflow_count>
    72c8:	90 91 c9 0d 	lds	r25, 0x0DC9	; 0x800dc9 <timer0_overflow_count+0x1>
    72cc:	a0 91 ca 0d 	lds	r26, 0x0DCA	; 0x800dca <timer0_overflow_count+0x2>
    72d0:	b0 91 cb 0d 	lds	r27, 0x0DCB	; 0x800dcb <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    72d4:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    72d6:	a8 9b       	sbis	0x15, 0	; 21
    72d8:	05 c0       	rjmp	.+10     	; 0x72e4 <micros+0x24>
    72da:	2f 3f       	cpi	r18, 0xFF	; 255
    72dc:	19 f0       	breq	.+6      	; 0x72e4 <micros+0x24>
		m++;
    72de:	01 96       	adiw	r24, 0x01	; 1
    72e0:	a1 1d       	adc	r26, r1
    72e2:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    72e4:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    72e6:	ba 2f       	mov	r27, r26
    72e8:	a9 2f       	mov	r26, r25
    72ea:	98 2f       	mov	r25, r24
    72ec:	88 27       	eor	r24, r24
    72ee:	82 0f       	add	r24, r18
    72f0:	91 1d       	adc	r25, r1
    72f2:	a1 1d       	adc	r26, r1
    72f4:	b1 1d       	adc	r27, r1
    72f6:	bc 01       	movw	r22, r24
    72f8:	cd 01       	movw	r24, r26
    72fa:	42 e0       	ldi	r20, 0x02	; 2
    72fc:	66 0f       	add	r22, r22
    72fe:	77 1f       	adc	r23, r23
    7300:	88 1f       	adc	r24, r24
    7302:	99 1f       	adc	r25, r25
    7304:	4a 95       	dec	r20
    7306:	d1 f7       	brne	.-12     	; 0x72fc <micros+0x3c>
}
    7308:	08 95       	ret

0000730a <delay>:

void delay(unsigned long ms)
{
    730a:	8f 92       	push	r8
    730c:	9f 92       	push	r9
    730e:	af 92       	push	r10
    7310:	bf 92       	push	r11
    7312:	cf 92       	push	r12
    7314:	df 92       	push	r13
    7316:	ef 92       	push	r14
    7318:	ff 92       	push	r15
    731a:	6b 01       	movw	r12, r22
    731c:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    731e:	d0 df       	rcall	.-96     	; 0x72c0 <micros>
    7320:	4b 01       	movw	r8, r22
    7322:	5c 01       	movw	r10, r24

	while (ms > 0) {
    7324:	c1 14       	cp	r12, r1
    7326:	d1 04       	cpc	r13, r1
    7328:	e1 04       	cpc	r14, r1
    732a:	f1 04       	cpc	r15, r1
		yield();
    732c:	f1 f0       	breq	.+60     	; 0x736a <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    732e:	63 d5       	rcall	.+2758   	; 0x7df6 <yield>
    7330:	c7 df       	rcall	.-114    	; 0x72c0 <micros>
    7332:	dc 01       	movw	r26, r24
    7334:	cb 01       	movw	r24, r22
    7336:	88 19       	sub	r24, r8
    7338:	99 09       	sbc	r25, r9
    733a:	aa 09       	sbc	r26, r10
    733c:	bb 09       	sbc	r27, r11
    733e:	88 3e       	cpi	r24, 0xE8	; 232
    7340:	93 40       	sbci	r25, 0x03	; 3
    7342:	a1 05       	cpc	r26, r1
    7344:	b1 05       	cpc	r27, r1
    7346:	70 f3       	brcs	.-36     	; 0x7324 <delay+0x1a>
			ms--;
    7348:	21 e0       	ldi	r18, 0x01	; 1
    734a:	c2 1a       	sub	r12, r18
    734c:	d1 08       	sbc	r13, r1
    734e:	e1 08       	sbc	r14, r1
    7350:	f1 08       	sbc	r15, r1
			start += 1000;
    7352:	88 ee       	ldi	r24, 0xE8	; 232
    7354:	88 0e       	add	r8, r24
    7356:	83 e0       	ldi	r24, 0x03	; 3
    7358:	98 1e       	adc	r9, r24
    735a:	a1 1c       	adc	r10, r1
    735c:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    735e:	c1 14       	cp	r12, r1
    7360:	d1 04       	cpc	r13, r1
    7362:	e1 04       	cpc	r14, r1
    7364:	f1 04       	cpc	r15, r1
    7366:	21 f7       	brne	.-56     	; 0x7330 <delay+0x26>
    7368:	dd cf       	rjmp	.-70     	; 0x7324 <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    736a:	ff 90       	pop	r15
    736c:	ef 90       	pop	r14
    736e:	df 90       	pop	r13
    7370:	cf 90       	pop	r12
    7372:	bf 90       	pop	r11
    7374:	af 90       	pop	r10
    7376:	9f 90       	pop	r9
    7378:	8f 90       	pop	r8
    737a:	08 95       	ret

0000737c <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    737c:	82 30       	cpi	r24, 0x02	; 2
    737e:	91 05       	cpc	r25, r1
    7380:	38 f0       	brcs	.+14     	; 0x7390 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    7382:	88 0f       	add	r24, r24
    7384:	99 1f       	adc	r25, r25
    7386:	88 0f       	add	r24, r24
    7388:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    738a:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    738c:	01 97       	sbiw	r24, 0x01	; 1
    738e:	f1 f7       	brne	.-4      	; 0x738c <delayMicroseconds+0x10>
    7390:	08 95       	ret

00007392 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    7392:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    7394:	84 b5       	in	r24, 0x24	; 36
    7396:	82 60       	ori	r24, 0x02	; 2
    7398:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    739a:	84 b5       	in	r24, 0x24	; 36
    739c:	81 60       	ori	r24, 0x01	; 1
    739e:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    73a0:	85 b5       	in	r24, 0x25	; 37
    73a2:	82 60       	ori	r24, 0x02	; 2
    73a4:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    73a6:	85 b5       	in	r24, 0x25	; 37
    73a8:	81 60       	ori	r24, 0x01	; 1
    73aa:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    73ac:	ee e6       	ldi	r30, 0x6E	; 110
    73ae:	f0 e0       	ldi	r31, 0x00	; 0
    73b0:	80 81       	ld	r24, Z
    73b2:	81 60       	ori	r24, 0x01	; 1
    73b4:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    73b6:	e1 e8       	ldi	r30, 0x81	; 129
    73b8:	f0 e0       	ldi	r31, 0x00	; 0
    73ba:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    73bc:	80 81       	ld	r24, Z
    73be:	82 60       	ori	r24, 0x02	; 2
    73c0:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    73c2:	80 81       	ld	r24, Z
    73c4:	81 60       	ori	r24, 0x01	; 1
    73c6:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    73c8:	e0 e8       	ldi	r30, 0x80	; 128
    73ca:	f0 e0       	ldi	r31, 0x00	; 0
    73cc:	80 81       	ld	r24, Z
    73ce:	81 60       	ori	r24, 0x01	; 1
    73d0:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    73d2:	e1 eb       	ldi	r30, 0xB1	; 177
    73d4:	f0 e0       	ldi	r31, 0x00	; 0
    73d6:	80 81       	ld	r24, Z
    73d8:	84 60       	ori	r24, 0x04	; 4
    73da:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    73dc:	e0 eb       	ldi	r30, 0xB0	; 176
    73de:	f0 e0       	ldi	r31, 0x00	; 0
    73e0:	80 81       	ld	r24, Z
    73e2:	81 60       	ori	r24, 0x01	; 1
    73e4:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    73e6:	ea e7       	ldi	r30, 0x7A	; 122
    73e8:	f0 e0       	ldi	r31, 0x00	; 0
    73ea:	80 81       	ld	r24, Z
    73ec:	84 60       	ori	r24, 0x04	; 4
    73ee:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    73f0:	80 81       	ld	r24, Z
    73f2:	82 60       	ori	r24, 0x02	; 2
    73f4:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    73f6:	80 81       	ld	r24, Z
    73f8:	81 60       	ori	r24, 0x01	; 1
    73fa:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    73fc:	80 81       	ld	r24, Z
    73fe:	80 68       	ori	r24, 0x80	; 128
    7400:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    7402:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    7406:	08 95       	ret

00007408 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    7408:	83 30       	cpi	r24, 0x03	; 3
    740a:	81 f0       	breq	.+32     	; 0x742c <turnOffPWM+0x24>
    740c:	28 f4       	brcc	.+10     	; 0x7418 <turnOffPWM+0x10>
    740e:	81 30       	cpi	r24, 0x01	; 1
    7410:	99 f0       	breq	.+38     	; 0x7438 <turnOffPWM+0x30>
    7412:	82 30       	cpi	r24, 0x02	; 2
    7414:	a1 f0       	breq	.+40     	; 0x743e <turnOffPWM+0x36>
    7416:	08 95       	ret
    7418:	87 30       	cpi	r24, 0x07	; 7
    741a:	a9 f0       	breq	.+42     	; 0x7446 <turnOffPWM+0x3e>
    741c:	88 30       	cpi	r24, 0x08	; 8
    741e:	b9 f0       	breq	.+46     	; 0x744e <turnOffPWM+0x46>
    7420:	84 30       	cpi	r24, 0x04	; 4
    7422:	d1 f4       	brne	.+52     	; 0x7458 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    7424:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    7428:	8f 7d       	andi	r24, 0xDF	; 223
    742a:	03 c0       	rjmp	.+6      	; 0x7432 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    742c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    7430:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    7432:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    7436:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    7438:	84 b5       	in	r24, 0x24	; 36
    743a:	8f 77       	andi	r24, 0x7F	; 127
    743c:	02 c0       	rjmp	.+4      	; 0x7442 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    743e:	84 b5       	in	r24, 0x24	; 36
    7440:	8f 7d       	andi	r24, 0xDF	; 223
    7442:	84 bd       	out	0x24, r24	; 36
    7444:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    7446:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    744a:	8f 77       	andi	r24, 0x7F	; 127
    744c:	03 c0       	rjmp	.+6      	; 0x7454 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    744e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    7452:	8f 7d       	andi	r24, 0xDF	; 223
    7454:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    7458:	08 95       	ret

0000745a <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    745a:	cf 93       	push	r28
    745c:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    745e:	90 e0       	ldi	r25, 0x00	; 0
    7460:	fc 01       	movw	r30, r24
    7462:	e0 5b       	subi	r30, 0xB0	; 176
    7464:	fd 4f       	sbci	r31, 0xFD	; 253
    7466:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    7468:	fc 01       	movw	r30, r24
    746a:	e0 59       	subi	r30, 0x90	; 144
    746c:	fd 4f       	sbci	r31, 0xFD	; 253
    746e:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    7470:	88 23       	and	r24, r24
    7472:	61 f1       	breq	.+88     	; 0x74cc <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    7474:	90 e0       	ldi	r25, 0x00	; 0
    7476:	88 0f       	add	r24, r24
    7478:	99 1f       	adc	r25, r25
    747a:	fc 01       	movw	r30, r24
    747c:	ec 55       	subi	r30, 0x5C	; 92
    747e:	fd 4f       	sbci	r31, 0xFD	; 253
    7480:	c5 91       	lpm	r28, Z+
    7482:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    7484:	fc 01       	movw	r30, r24
    7486:	e6 56       	subi	r30, 0x66	; 102
    7488:	fd 4f       	sbci	r31, 0xFD	; 253
    748a:	a5 91       	lpm	r26, Z+
    748c:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    748e:	61 11       	cpse	r22, r1
    7490:	09 c0       	rjmp	.+18     	; 0x74a4 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    7492:	9f b7       	in	r25, 0x3f	; 63
                cli();
    7494:	f8 94       	cli
		*reg &= ~bit;
    7496:	88 81       	ld	r24, Y
    7498:	20 95       	com	r18
    749a:	82 23       	and	r24, r18
    749c:	88 83       	st	Y, r24
		*out &= ~bit;
    749e:	ec 91       	ld	r30, X
    74a0:	2e 23       	and	r18, r30
    74a2:	0b c0       	rjmp	.+22     	; 0x74ba <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    74a4:	62 30       	cpi	r22, 0x02	; 2
    74a6:	61 f4       	brne	.+24     	; 0x74c0 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    74a8:	9f b7       	in	r25, 0x3f	; 63
                cli();
    74aa:	f8 94       	cli
		*reg &= ~bit;
    74ac:	88 81       	ld	r24, Y
    74ae:	32 2f       	mov	r19, r18
    74b0:	30 95       	com	r19
    74b2:	83 23       	and	r24, r19
    74b4:	88 83       	st	Y, r24
		*out |= bit;
    74b6:	ec 91       	ld	r30, X
    74b8:	2e 2b       	or	r18, r30
    74ba:	2c 93       	st	X, r18
		SREG = oldSREG;
    74bc:	9f bf       	out	0x3f, r25	; 63
    74be:	06 c0       	rjmp	.+12     	; 0x74cc <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    74c0:	8f b7       	in	r24, 0x3f	; 63
                cli();
    74c2:	f8 94       	cli
		*reg |= bit;
    74c4:	e8 81       	ld	r30, Y
    74c6:	2e 2b       	or	r18, r30
    74c8:	28 83       	st	Y, r18
		SREG = oldSREG;
    74ca:	8f bf       	out	0x3f, r24	; 63
	}
}
    74cc:	df 91       	pop	r29
    74ce:	cf 91       	pop	r28
    74d0:	08 95       	ret

000074d2 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    74d2:	1f 93       	push	r17
    74d4:	cf 93       	push	r28
    74d6:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    74d8:	28 2f       	mov	r18, r24
    74da:	30 e0       	ldi	r19, 0x00	; 0
    74dc:	f9 01       	movw	r30, r18
    74de:	e0 5d       	subi	r30, 0xD0	; 208
    74e0:	fd 4f       	sbci	r31, 0xFD	; 253
    74e2:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    74e4:	f9 01       	movw	r30, r18
    74e6:	e0 5b       	subi	r30, 0xB0	; 176
    74e8:	fd 4f       	sbci	r31, 0xFD	; 253
    74ea:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    74ec:	f9 01       	movw	r30, r18
    74ee:	e0 59       	subi	r30, 0x90	; 144
    74f0:	fd 4f       	sbci	r31, 0xFD	; 253
    74f2:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    74f4:	cc 23       	and	r28, r28
    74f6:	b9 f0       	breq	.+46     	; 0x7526 <digitalWrite+0x54>
    74f8:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    74fa:	81 11       	cpse	r24, r1
    74fc:	85 df       	rcall	.-246    	; 0x7408 <turnOffPWM>

	out = portOutputRegister(port);
    74fe:	ec 2f       	mov	r30, r28
    7500:	f0 e0       	ldi	r31, 0x00	; 0
    7502:	ee 0f       	add	r30, r30
    7504:	ff 1f       	adc	r31, r31
    7506:	e6 56       	subi	r30, 0x66	; 102
    7508:	fd 4f       	sbci	r31, 0xFD	; 253
    750a:	a5 91       	lpm	r26, Z+
    750c:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    750e:	9f b7       	in	r25, 0x3f	; 63
	cli();
    7510:	f8 94       	cli

	if (val == LOW) {
    7512:	11 11       	cpse	r17, r1
    7514:	04 c0       	rjmp	.+8      	; 0x751e <digitalWrite+0x4c>
		*out &= ~bit;
    7516:	8c 91       	ld	r24, X
    7518:	d0 95       	com	r29
    751a:	d8 23       	and	r29, r24
    751c:	02 c0       	rjmp	.+4      	; 0x7522 <digitalWrite+0x50>
	} else {
		*out |= bit;
    751e:	ec 91       	ld	r30, X
    7520:	de 2b       	or	r29, r30
    7522:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    7524:	9f bf       	out	0x3f, r25	; 63
}
    7526:	df 91       	pop	r29
    7528:	cf 91       	pop	r28
    752a:	1f 91       	pop	r17
    752c:	08 95       	ret

0000752e <digitalRead>:

int digitalRead(uint8_t pin)
{
    752e:	cf 93       	push	r28
    7530:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    7532:	28 2f       	mov	r18, r24
    7534:	30 e0       	ldi	r19, 0x00	; 0
    7536:	f9 01       	movw	r30, r18
    7538:	e0 5d       	subi	r30, 0xD0	; 208
    753a:	fd 4f       	sbci	r31, 0xFD	; 253
    753c:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    753e:	f9 01       	movw	r30, r18
    7540:	e0 5b       	subi	r30, 0xB0	; 176
    7542:	fd 4f       	sbci	r31, 0xFD	; 253
    7544:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    7546:	f9 01       	movw	r30, r18
    7548:	e0 59       	subi	r30, 0x90	; 144
    754a:	fd 4f       	sbci	r31, 0xFD	; 253
    754c:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    754e:	cc 23       	and	r28, r28
    7550:	89 f0       	breq	.+34     	; 0x7574 <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    7552:	81 11       	cpse	r24, r1
    7554:	59 df       	rcall	.-334    	; 0x7408 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    7556:	ec 2f       	mov	r30, r28
    7558:	f0 e0       	ldi	r31, 0x00	; 0
    755a:	ee 0f       	add	r30, r30
    755c:	ff 1f       	adc	r31, r31
    755e:	e0 57       	subi	r30, 0x70	; 112
    7560:	fd 4f       	sbci	r31, 0xFD	; 253
    7562:	a5 91       	lpm	r26, Z+
    7564:	b4 91       	lpm	r27, Z
    7566:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    7568:	ed 23       	and	r30, r29
    756a:	81 e0       	ldi	r24, 0x01	; 1
    756c:	90 e0       	ldi	r25, 0x00	; 0
    756e:	21 f4       	brne	.+8      	; 0x7578 <digitalRead+0x4a>
    7570:	80 e0       	ldi	r24, 0x00	; 0
    7572:	02 c0       	rjmp	.+4      	; 0x7578 <digitalRead+0x4a>
    7574:	80 e0       	ldi	r24, 0x00	; 0
    7576:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    7578:	df 91       	pop	r29
    757a:	cf 91       	pop	r28
    757c:	08 95       	ret

0000757e <_ZNK6String14StringIfHelperEv>:
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
		*p = toupper(*p);
	}
}
    757e:	08 95       	ret

00007580 <_ZN6StringD1Ev>:
    7580:	fc 01       	movw	r30, r24
    7582:	80 81       	ld	r24, Z
    7584:	91 81       	ldd	r25, Z+1	; 0x01
    7586:	53 c5       	rjmp	.+2726   	; 0x802e <free>

00007588 <_ZN6String10invalidateEv>:
    7588:	cf 93       	push	r28
    758a:	df 93       	push	r29
    758c:	ec 01       	movw	r28, r24
    758e:	88 81       	ld	r24, Y
    7590:	99 81       	ldd	r25, Y+1	; 0x01
    7592:	00 97       	sbiw	r24, 0x00	; 0
    7594:	09 f0       	breq	.+2      	; 0x7598 <_ZN6String10invalidateEv+0x10>
    7596:	4b d5       	rcall	.+2710   	; 0x802e <free>
    7598:	19 82       	std	Y+1, r1	; 0x01
    759a:	18 82       	st	Y, r1
    759c:	1d 82       	std	Y+5, r1	; 0x05
    759e:	1c 82       	std	Y+4, r1	; 0x04
    75a0:	1b 82       	std	Y+3, r1	; 0x03
    75a2:	1a 82       	std	Y+2, r1	; 0x02
    75a4:	df 91       	pop	r29
    75a6:	cf 91       	pop	r28
    75a8:	08 95       	ret

000075aa <_ZN6String12changeBufferEj>:
    75aa:	0f 93       	push	r16
    75ac:	1f 93       	push	r17
    75ae:	cf 93       	push	r28
    75b0:	df 93       	push	r29
    75b2:	ec 01       	movw	r28, r24
    75b4:	8b 01       	movw	r16, r22
    75b6:	6f 5f       	subi	r22, 0xFF	; 255
    75b8:	7f 4f       	sbci	r23, 0xFF	; 255
    75ba:	88 81       	ld	r24, Y
    75bc:	99 81       	ldd	r25, Y+1	; 0x01
    75be:	c0 d5       	rcall	.+2944   	; 0x8140 <realloc>
    75c0:	00 97       	sbiw	r24, 0x00	; 0
    75c2:	31 f0       	breq	.+12     	; 0x75d0 <_ZN6String12changeBufferEj+0x26>
    75c4:	99 83       	std	Y+1, r25	; 0x01
    75c6:	88 83       	st	Y, r24
    75c8:	1b 83       	std	Y+3, r17	; 0x03
    75ca:	0a 83       	std	Y+2, r16	; 0x02
    75cc:	81 e0       	ldi	r24, 0x01	; 1
    75ce:	01 c0       	rjmp	.+2      	; 0x75d2 <_ZN6String12changeBufferEj+0x28>
    75d0:	80 e0       	ldi	r24, 0x00	; 0
    75d2:	df 91       	pop	r29
    75d4:	cf 91       	pop	r28
    75d6:	1f 91       	pop	r17
    75d8:	0f 91       	pop	r16
    75da:	08 95       	ret

000075dc <_ZN6String7reserveEj>:
    75dc:	cf 93       	push	r28
    75de:	df 93       	push	r29
    75e0:	ec 01       	movw	r28, r24
    75e2:	88 81       	ld	r24, Y
    75e4:	99 81       	ldd	r25, Y+1	; 0x01
    75e6:	89 2b       	or	r24, r25
    75e8:	29 f0       	breq	.+10     	; 0x75f4 <_ZN6String7reserveEj+0x18>
    75ea:	8a 81       	ldd	r24, Y+2	; 0x02
    75ec:	9b 81       	ldd	r25, Y+3	; 0x03
    75ee:	86 17       	cp	r24, r22
    75f0:	97 07       	cpc	r25, r23
    75f2:	58 f4       	brcc	.+22     	; 0x760a <_ZN6String7reserveEj+0x2e>
    75f4:	ce 01       	movw	r24, r28
    75f6:	d9 df       	rcall	.-78     	; 0x75aa <_ZN6String12changeBufferEj>
    75f8:	88 23       	and	r24, r24
    75fa:	41 f0       	breq	.+16     	; 0x760c <_ZN6String7reserveEj+0x30>
    75fc:	8c 81       	ldd	r24, Y+4	; 0x04
    75fe:	9d 81       	ldd	r25, Y+5	; 0x05
    7600:	89 2b       	or	r24, r25
    7602:	19 f4       	brne	.+6      	; 0x760a <_ZN6String7reserveEj+0x2e>
    7604:	e8 81       	ld	r30, Y
    7606:	f9 81       	ldd	r31, Y+1	; 0x01
    7608:	10 82       	st	Z, r1
    760a:	81 e0       	ldi	r24, 0x01	; 1
    760c:	df 91       	pop	r29
    760e:	cf 91       	pop	r28
    7610:	08 95       	ret

00007612 <_ZN6String4copyEPKcj>:
    7612:	ef 92       	push	r14
    7614:	ff 92       	push	r15
    7616:	0f 93       	push	r16
    7618:	1f 93       	push	r17
    761a:	cf 93       	push	r28
    761c:	df 93       	push	r29
    761e:	ec 01       	movw	r28, r24
    7620:	7b 01       	movw	r14, r22
    7622:	8a 01       	movw	r16, r20
    7624:	ba 01       	movw	r22, r20
    7626:	da df       	rcall	.-76     	; 0x75dc <_ZN6String7reserveEj>
    7628:	81 11       	cpse	r24, r1
    762a:	03 c0       	rjmp	.+6      	; 0x7632 <_ZN6String4copyEPKcj+0x20>
    762c:	ce 01       	movw	r24, r28
    762e:	ac df       	rcall	.-168    	; 0x7588 <_ZN6String10invalidateEv>
    7630:	06 c0       	rjmp	.+12     	; 0x763e <_ZN6String4copyEPKcj+0x2c>
    7632:	1d 83       	std	Y+5, r17	; 0x05
    7634:	0c 83       	std	Y+4, r16	; 0x04
    7636:	b7 01       	movw	r22, r14
    7638:	88 81       	ld	r24, Y
    763a:	99 81       	ldd	r25, Y+1	; 0x01
    763c:	ae d6       	rcall	.+3420   	; 0x839a <strcpy>
    763e:	ce 01       	movw	r24, r28
    7640:	df 91       	pop	r29
    7642:	cf 91       	pop	r28
    7644:	1f 91       	pop	r17
    7646:	0f 91       	pop	r16
    7648:	ff 90       	pop	r15
    764a:	ef 90       	pop	r14
    764c:	08 95       	ret

0000764e <_ZN6StringC1EPKc>:
    764e:	fc 01       	movw	r30, r24
    7650:	11 82       	std	Z+1, r1	; 0x01
    7652:	10 82       	st	Z, r1
    7654:	13 82       	std	Z+3, r1	; 0x03
    7656:	12 82       	std	Z+2, r1	; 0x02
    7658:	15 82       	std	Z+5, r1	; 0x05
    765a:	14 82       	std	Z+4, r1	; 0x04
    765c:	61 15       	cp	r22, r1
    765e:	71 05       	cpc	r23, r1
    7660:	49 f0       	breq	.+18     	; 0x7674 <_ZN6StringC1EPKc+0x26>
    7662:	fb 01       	movw	r30, r22
    7664:	01 90       	ld	r0, Z+
    7666:	00 20       	and	r0, r0
    7668:	e9 f7       	brne	.-6      	; 0x7664 <_ZN6StringC1EPKc+0x16>
    766a:	31 97       	sbiw	r30, 0x01	; 1
    766c:	af 01       	movw	r20, r30
    766e:	46 1b       	sub	r20, r22
    7670:	57 0b       	sbc	r21, r23
    7672:	cf cf       	rjmp	.-98     	; 0x7612 <_ZN6String4copyEPKcj>
    7674:	08 95       	ret

00007676 <_ZN6String4moveERS_>:
    7676:	0f 93       	push	r16
    7678:	1f 93       	push	r17
    767a:	cf 93       	push	r28
    767c:	df 93       	push	r29
    767e:	8c 01       	movw	r16, r24
    7680:	eb 01       	movw	r28, r22
    7682:	fc 01       	movw	r30, r24
    7684:	80 81       	ld	r24, Z
    7686:	91 81       	ldd	r25, Z+1	; 0x01
    7688:	00 97       	sbiw	r24, 0x00	; 0
    768a:	c1 f0       	breq	.+48     	; 0x76bc <_ZN6String4moveERS_+0x46>
    768c:	68 81       	ld	r22, Y
    768e:	79 81       	ldd	r23, Y+1	; 0x01
    7690:	61 15       	cp	r22, r1
    7692:	71 05       	cpc	r23, r1
    7694:	91 f0       	breq	.+36     	; 0x76ba <_ZN6String4moveERS_+0x44>
    7696:	2f eb       	ldi	r18, 0xBF	; 191
    7698:	3a e3       	ldi	r19, 0x3A	; 58
    769a:	23 2b       	or	r18, r19
    769c:	71 f0       	breq	.+28     	; 0x76ba <_ZN6String4moveERS_+0x44>
    769e:	42 81       	ldd	r20, Z+2	; 0x02
    76a0:	53 81       	ldd	r21, Z+3	; 0x03
    76a2:	2c 81       	ldd	r18, Y+4	; 0x04
    76a4:	3d 81       	ldd	r19, Y+5	; 0x05
    76a6:	42 17       	cp	r20, r18
    76a8:	53 07       	cpc	r21, r19
    76aa:	38 f0       	brcs	.+14     	; 0x76ba <_ZN6String4moveERS_+0x44>
    76ac:	76 d6       	rcall	.+3308   	; 0x839a <strcpy>
    76ae:	8c 81       	ldd	r24, Y+4	; 0x04
    76b0:	9d 81       	ldd	r25, Y+5	; 0x05
    76b2:	f8 01       	movw	r30, r16
    76b4:	95 83       	std	Z+5, r25	; 0x05
    76b6:	84 83       	std	Z+4, r24	; 0x04
    76b8:	12 c0       	rjmp	.+36     	; 0x76de <_ZN6String4moveERS_+0x68>
    76ba:	b9 d4       	rcall	.+2418   	; 0x802e <free>
    76bc:	88 81       	ld	r24, Y
    76be:	99 81       	ldd	r25, Y+1	; 0x01
    76c0:	f8 01       	movw	r30, r16
    76c2:	91 83       	std	Z+1, r25	; 0x01
    76c4:	80 83       	st	Z, r24
    76c6:	8a 81       	ldd	r24, Y+2	; 0x02
    76c8:	9b 81       	ldd	r25, Y+3	; 0x03
    76ca:	93 83       	std	Z+3, r25	; 0x03
    76cc:	82 83       	std	Z+2, r24	; 0x02
    76ce:	8c 81       	ldd	r24, Y+4	; 0x04
    76d0:	9d 81       	ldd	r25, Y+5	; 0x05
    76d2:	95 83       	std	Z+5, r25	; 0x05
    76d4:	84 83       	std	Z+4, r24	; 0x04
    76d6:	19 82       	std	Y+1, r1	; 0x01
    76d8:	18 82       	st	Y, r1
    76da:	1b 82       	std	Y+3, r1	; 0x03
    76dc:	1a 82       	std	Y+2, r1	; 0x02
    76de:	1d 82       	std	Y+5, r1	; 0x05
    76e0:	1c 82       	std	Y+4, r1	; 0x04
    76e2:	df 91       	pop	r29
    76e4:	cf 91       	pop	r28
    76e6:	1f 91       	pop	r17
    76e8:	0f 91       	pop	r16
    76ea:	08 95       	ret

000076ec <_ZN6StringC1EOS_>:
    76ec:	fc 01       	movw	r30, r24
    76ee:	11 82       	std	Z+1, r1	; 0x01
    76f0:	10 82       	st	Z, r1
    76f2:	13 82       	std	Z+3, r1	; 0x03
    76f4:	12 82       	std	Z+2, r1	; 0x02
    76f6:	15 82       	std	Z+5, r1	; 0x05
    76f8:	14 82       	std	Z+4, r1	; 0x04
    76fa:	bd cf       	rjmp	.-134    	; 0x7676 <_ZN6String4moveERS_>

000076fc <_ZN6StringaSERKS_>:
    76fc:	cf 93       	push	r28
    76fe:	df 93       	push	r29
    7700:	ec 01       	movw	r28, r24
    7702:	fb 01       	movw	r30, r22
    7704:	86 17       	cp	r24, r22
    7706:	97 07       	cpc	r25, r23
    7708:	51 f0       	breq	.+20     	; 0x771e <_ZN6StringaSERKS_+0x22>
    770a:	60 81       	ld	r22, Z
    770c:	71 81       	ldd	r23, Z+1	; 0x01
    770e:	61 15       	cp	r22, r1
    7710:	71 05       	cpc	r23, r1
    7712:	21 f0       	breq	.+8      	; 0x771c <_ZN6StringaSERKS_+0x20>
    7714:	44 81       	ldd	r20, Z+4	; 0x04
    7716:	55 81       	ldd	r21, Z+5	; 0x05
    7718:	7c df       	rcall	.-264    	; 0x7612 <_ZN6String4copyEPKcj>
    771a:	01 c0       	rjmp	.+2      	; 0x771e <_ZN6StringaSERKS_+0x22>
    771c:	35 df       	rcall	.-406    	; 0x7588 <_ZN6String10invalidateEv>
    771e:	ce 01       	movw	r24, r28
    7720:	df 91       	pop	r29
    7722:	cf 91       	pop	r28
    7724:	08 95       	ret

00007726 <_ZN6StringC1ERKS_>:
    7726:	fc 01       	movw	r30, r24
    7728:	11 82       	std	Z+1, r1	; 0x01
    772a:	10 82       	st	Z, r1
    772c:	13 82       	std	Z+3, r1	; 0x03
    772e:	12 82       	std	Z+2, r1	; 0x02
    7730:	15 82       	std	Z+5, r1	; 0x05
    7732:	14 82       	std	Z+4, r1	; 0x04
    7734:	e3 cf       	rjmp	.-58     	; 0x76fc <_ZN6StringaSERKS_>

00007736 <_ZN6StringaSEOS_>:
    7736:	cf 93       	push	r28
    7738:	df 93       	push	r29
    773a:	ec 01       	movw	r28, r24
    773c:	86 17       	cp	r24, r22
    773e:	97 07       	cpc	r25, r23
    7740:	09 f0       	breq	.+2      	; 0x7744 <_ZN6StringaSEOS_+0xe>
    7742:	99 df       	rcall	.-206    	; 0x7676 <_ZN6String4moveERS_>
    7744:	ce 01       	movw	r24, r28
    7746:	df 91       	pop	r29
    7748:	cf 91       	pop	r28
    774a:	08 95       	ret

0000774c <_ZN6StringaSEPKc>:
    774c:	cf 93       	push	r28
    774e:	df 93       	push	r29
    7750:	ec 01       	movw	r28, r24
    7752:	61 15       	cp	r22, r1
    7754:	71 05       	cpc	r23, r1
    7756:	51 f0       	breq	.+20     	; 0x776c <_ZN6StringaSEPKc+0x20>
    7758:	fb 01       	movw	r30, r22
    775a:	01 90       	ld	r0, Z+
    775c:	00 20       	and	r0, r0
    775e:	e9 f7       	brne	.-6      	; 0x775a <_ZN6StringaSEPKc+0xe>
    7760:	31 97       	sbiw	r30, 0x01	; 1
    7762:	af 01       	movw	r20, r30
    7764:	46 1b       	sub	r20, r22
    7766:	57 0b       	sbc	r21, r23
    7768:	54 df       	rcall	.-344    	; 0x7612 <_ZN6String4copyEPKcj>
    776a:	01 c0       	rjmp	.+2      	; 0x776e <_ZN6StringaSEPKc+0x22>
    776c:	0d df       	rcall	.-486    	; 0x7588 <_ZN6String10invalidateEv>
    776e:	ce 01       	movw	r24, r28
    7770:	df 91       	pop	r29
    7772:	cf 91       	pop	r28
    7774:	08 95       	ret

00007776 <_ZN6StringC1Ec>:
    7776:	cf 93       	push	r28
    7778:	df 93       	push	r29
    777a:	00 d0       	rcall	.+0      	; 0x777c <_ZN6StringC1Ec+0x6>
    777c:	cd b7       	in	r28, 0x3d	; 61
    777e:	de b7       	in	r29, 0x3e	; 62
    7780:	fc 01       	movw	r30, r24
    7782:	11 82       	std	Z+1, r1	; 0x01
    7784:	10 82       	st	Z, r1
    7786:	13 82       	std	Z+3, r1	; 0x03
    7788:	12 82       	std	Z+2, r1	; 0x02
    778a:	15 82       	std	Z+5, r1	; 0x05
    778c:	14 82       	std	Z+4, r1	; 0x04
    778e:	69 83       	std	Y+1, r22	; 0x01
    7790:	1a 82       	std	Y+2, r1	; 0x02
    7792:	be 01       	movw	r22, r28
    7794:	6f 5f       	subi	r22, 0xFF	; 255
    7796:	7f 4f       	sbci	r23, 0xFF	; 255
    7798:	d9 df       	rcall	.-78     	; 0x774c <_ZN6StringaSEPKc>
    779a:	0f 90       	pop	r0
    779c:	0f 90       	pop	r0
    779e:	df 91       	pop	r29
    77a0:	cf 91       	pop	r28
    77a2:	08 95       	ret

000077a4 <_ZN6StringC1Ehh>:
    77a4:	0f 93       	push	r16
    77a6:	1f 93       	push	r17
    77a8:	cf 93       	push	r28
    77aa:	df 93       	push	r29
    77ac:	cd b7       	in	r28, 0x3d	; 61
    77ae:	de b7       	in	r29, 0x3e	; 62
    77b0:	29 97       	sbiw	r28, 0x09	; 9
    77b2:	0f b6       	in	r0, 0x3f	; 63
    77b4:	f8 94       	cli
    77b6:	de bf       	out	0x3e, r29	; 62
    77b8:	0f be       	out	0x3f, r0	; 63
    77ba:	cd bf       	out	0x3d, r28	; 61
    77bc:	8c 01       	movw	r16, r24
    77be:	86 2f       	mov	r24, r22
    77c0:	f8 01       	movw	r30, r16
    77c2:	11 82       	std	Z+1, r1	; 0x01
    77c4:	10 82       	st	Z, r1
    77c6:	13 82       	std	Z+3, r1	; 0x03
    77c8:	12 82       	std	Z+2, r1	; 0x02
    77ca:	15 82       	std	Z+5, r1	; 0x05
    77cc:	14 82       	std	Z+4, r1	; 0x04
    77ce:	50 e0       	ldi	r21, 0x00	; 0
    77d0:	be 01       	movw	r22, r28
    77d2:	6f 5f       	subi	r22, 0xFF	; 255
    77d4:	7f 4f       	sbci	r23, 0xFF	; 255
    77d6:	90 e0       	ldi	r25, 0x00	; 0
    77d8:	58 d6       	rcall	.+3248   	; 0x848a <utoa>
    77da:	be 01       	movw	r22, r28
    77dc:	6f 5f       	subi	r22, 0xFF	; 255
    77de:	7f 4f       	sbci	r23, 0xFF	; 255
    77e0:	c8 01       	movw	r24, r16
    77e2:	b4 df       	rcall	.-152    	; 0x774c <_ZN6StringaSEPKc>
    77e4:	29 96       	adiw	r28, 0x09	; 9
    77e6:	0f b6       	in	r0, 0x3f	; 63
    77e8:	f8 94       	cli
    77ea:	de bf       	out	0x3e, r29	; 62
    77ec:	0f be       	out	0x3f, r0	; 63
    77ee:	cd bf       	out	0x3d, r28	; 61
    77f0:	df 91       	pop	r29
    77f2:	cf 91       	pop	r28
    77f4:	1f 91       	pop	r17
    77f6:	0f 91       	pop	r16
    77f8:	08 95       	ret

000077fa <_ZN6StringC1Eih>:
    77fa:	0f 93       	push	r16
    77fc:	1f 93       	push	r17
    77fe:	cf 93       	push	r28
    7800:	df 93       	push	r29
    7802:	cd b7       	in	r28, 0x3d	; 61
    7804:	de b7       	in	r29, 0x3e	; 62
    7806:	62 97       	sbiw	r28, 0x12	; 18
    7808:	0f b6       	in	r0, 0x3f	; 63
    780a:	f8 94       	cli
    780c:	de bf       	out	0x3e, r29	; 62
    780e:	0f be       	out	0x3f, r0	; 63
    7810:	cd bf       	out	0x3d, r28	; 61
    7812:	8c 01       	movw	r16, r24
    7814:	cb 01       	movw	r24, r22
    7816:	f8 01       	movw	r30, r16
    7818:	11 82       	std	Z+1, r1	; 0x01
    781a:	10 82       	st	Z, r1
    781c:	13 82       	std	Z+3, r1	; 0x03
    781e:	12 82       	std	Z+2, r1	; 0x02
    7820:	15 82       	std	Z+5, r1	; 0x05
    7822:	14 82       	std	Z+4, r1	; 0x04
    7824:	50 e0       	ldi	r21, 0x00	; 0
    7826:	be 01       	movw	r22, r28
    7828:	6f 5f       	subi	r22, 0xFF	; 255
    782a:	7f 4f       	sbci	r23, 0xFF	; 255
    782c:	da d5       	rcall	.+2996   	; 0x83e2 <itoa>
    782e:	be 01       	movw	r22, r28
    7830:	6f 5f       	subi	r22, 0xFF	; 255
    7832:	7f 4f       	sbci	r23, 0xFF	; 255
    7834:	c8 01       	movw	r24, r16
    7836:	8a df       	rcall	.-236    	; 0x774c <_ZN6StringaSEPKc>
    7838:	62 96       	adiw	r28, 0x12	; 18
    783a:	0f b6       	in	r0, 0x3f	; 63
    783c:	f8 94       	cli
    783e:	de bf       	out	0x3e, r29	; 62
    7840:	0f be       	out	0x3f, r0	; 63
    7842:	cd bf       	out	0x3d, r28	; 61
    7844:	df 91       	pop	r29
    7846:	cf 91       	pop	r28
    7848:	1f 91       	pop	r17
    784a:	0f 91       	pop	r16
    784c:	08 95       	ret

0000784e <_ZN6StringC1Ejh>:
    784e:	0f 93       	push	r16
    7850:	1f 93       	push	r17
    7852:	cf 93       	push	r28
    7854:	df 93       	push	r29
    7856:	cd b7       	in	r28, 0x3d	; 61
    7858:	de b7       	in	r29, 0x3e	; 62
    785a:	61 97       	sbiw	r28, 0x11	; 17
    785c:	0f b6       	in	r0, 0x3f	; 63
    785e:	f8 94       	cli
    7860:	de bf       	out	0x3e, r29	; 62
    7862:	0f be       	out	0x3f, r0	; 63
    7864:	cd bf       	out	0x3d, r28	; 61
    7866:	8c 01       	movw	r16, r24
    7868:	cb 01       	movw	r24, r22
    786a:	f8 01       	movw	r30, r16
    786c:	11 82       	std	Z+1, r1	; 0x01
    786e:	10 82       	st	Z, r1
    7870:	13 82       	std	Z+3, r1	; 0x03
    7872:	12 82       	std	Z+2, r1	; 0x02
    7874:	15 82       	std	Z+5, r1	; 0x05
    7876:	14 82       	std	Z+4, r1	; 0x04
    7878:	50 e0       	ldi	r21, 0x00	; 0
    787a:	be 01       	movw	r22, r28
    787c:	6f 5f       	subi	r22, 0xFF	; 255
    787e:	7f 4f       	sbci	r23, 0xFF	; 255
    7880:	04 d6       	rcall	.+3080   	; 0x848a <utoa>
    7882:	be 01       	movw	r22, r28
    7884:	6f 5f       	subi	r22, 0xFF	; 255
    7886:	7f 4f       	sbci	r23, 0xFF	; 255
    7888:	c8 01       	movw	r24, r16
    788a:	60 df       	rcall	.-320    	; 0x774c <_ZN6StringaSEPKc>
    788c:	61 96       	adiw	r28, 0x11	; 17
    788e:	0f b6       	in	r0, 0x3f	; 63
    7890:	f8 94       	cli
    7892:	de bf       	out	0x3e, r29	; 62
    7894:	0f be       	out	0x3f, r0	; 63
    7896:	cd bf       	out	0x3d, r28	; 61
    7898:	df 91       	pop	r29
    789a:	cf 91       	pop	r28
    789c:	1f 91       	pop	r17
    789e:	0f 91       	pop	r16
    78a0:	08 95       	ret

000078a2 <_ZN6StringC1Emh>:
    78a2:	0f 93       	push	r16
    78a4:	1f 93       	push	r17
    78a6:	cf 93       	push	r28
    78a8:	df 93       	push	r29
    78aa:	cd b7       	in	r28, 0x3d	; 61
    78ac:	de b7       	in	r29, 0x3e	; 62
    78ae:	a1 97       	sbiw	r28, 0x21	; 33
    78b0:	0f b6       	in	r0, 0x3f	; 63
    78b2:	f8 94       	cli
    78b4:	de bf       	out	0x3e, r29	; 62
    78b6:	0f be       	out	0x3f, r0	; 63
    78b8:	cd bf       	out	0x3d, r28	; 61
    78ba:	8c 01       	movw	r16, r24
    78bc:	cb 01       	movw	r24, r22
    78be:	ba 01       	movw	r22, r20
    78c0:	f8 01       	movw	r30, r16
    78c2:	11 82       	std	Z+1, r1	; 0x01
    78c4:	10 82       	st	Z, r1
    78c6:	13 82       	std	Z+3, r1	; 0x03
    78c8:	12 82       	std	Z+2, r1	; 0x02
    78ca:	15 82       	std	Z+5, r1	; 0x05
    78cc:	14 82       	std	Z+4, r1	; 0x04
    78ce:	30 e0       	ldi	r19, 0x00	; 0
    78d0:	ae 01       	movw	r20, r28
    78d2:	4f 5f       	subi	r20, 0xFF	; 255
    78d4:	5f 4f       	sbci	r21, 0xFF	; 255
    78d6:	ae d5       	rcall	.+2908   	; 0x8434 <ultoa>
    78d8:	be 01       	movw	r22, r28
    78da:	6f 5f       	subi	r22, 0xFF	; 255
    78dc:	7f 4f       	sbci	r23, 0xFF	; 255
    78de:	c8 01       	movw	r24, r16
    78e0:	35 df       	rcall	.-406    	; 0x774c <_ZN6StringaSEPKc>
    78e2:	a1 96       	adiw	r28, 0x21	; 33
    78e4:	0f b6       	in	r0, 0x3f	; 63
    78e6:	f8 94       	cli
    78e8:	de bf       	out	0x3e, r29	; 62
    78ea:	0f be       	out	0x3f, r0	; 63
    78ec:	cd bf       	out	0x3d, r28	; 61
    78ee:	df 91       	pop	r29
    78f0:	cf 91       	pop	r28
    78f2:	1f 91       	pop	r17
    78f4:	0f 91       	pop	r16
    78f6:	08 95       	ret

000078f8 <_ZN6StringC1Edh>:
    78f8:	ef 92       	push	r14
    78fa:	ff 92       	push	r15
    78fc:	0f 93       	push	r16
    78fe:	1f 93       	push	r17
    7900:	cf 93       	push	r28
    7902:	df 93       	push	r29
    7904:	cd b7       	in	r28, 0x3d	; 61
    7906:	de b7       	in	r29, 0x3e	; 62
    7908:	a1 97       	sbiw	r28, 0x21	; 33
    790a:	0f b6       	in	r0, 0x3f	; 63
    790c:	f8 94       	cli
    790e:	de bf       	out	0x3e, r29	; 62
    7910:	0f be       	out	0x3f, r0	; 63
    7912:	cd bf       	out	0x3d, r28	; 61
    7914:	7c 01       	movw	r14, r24
    7916:	cb 01       	movw	r24, r22
    7918:	ba 01       	movw	r22, r20
    791a:	f7 01       	movw	r30, r14
    791c:	11 82       	std	Z+1, r1	; 0x01
    791e:	10 82       	st	Z, r1
    7920:	13 82       	std	Z+3, r1	; 0x03
    7922:	12 82       	std	Z+2, r1	; 0x02
    7924:	15 82       	std	Z+5, r1	; 0x05
    7926:	14 82       	std	Z+4, r1	; 0x04
    7928:	42 e0       	ldi	r20, 0x02	; 2
    792a:	42 0f       	add	r20, r18
    792c:	8e 01       	movw	r16, r28
    792e:	0f 5f       	subi	r16, 0xFF	; 255
    7930:	1f 4f       	sbci	r17, 0xFF	; 255
    7932:	c6 d2       	rcall	.+1420   	; 0x7ec0 <dtostrf>
    7934:	bc 01       	movw	r22, r24
    7936:	c7 01       	movw	r24, r14
    7938:	09 df       	rcall	.-494    	; 0x774c <_ZN6StringaSEPKc>
    793a:	a1 96       	adiw	r28, 0x21	; 33
    793c:	0f b6       	in	r0, 0x3f	; 63
    793e:	f8 94       	cli
    7940:	de bf       	out	0x3e, r29	; 62
    7942:	0f be       	out	0x3f, r0	; 63
    7944:	cd bf       	out	0x3d, r28	; 61
    7946:	df 91       	pop	r29
    7948:	cf 91       	pop	r28
    794a:	1f 91       	pop	r17
    794c:	0f 91       	pop	r16
    794e:	ff 90       	pop	r15
    7950:	ef 90       	pop	r14
    7952:	08 95       	ret

00007954 <_ZN6String6concatEPKcj>:
    7954:	ef 92       	push	r14
    7956:	ff 92       	push	r15
    7958:	0f 93       	push	r16
    795a:	1f 93       	push	r17
    795c:	cf 93       	push	r28
    795e:	df 93       	push	r29
    7960:	61 15       	cp	r22, r1
    7962:	71 05       	cpc	r23, r1
    7964:	11 f4       	brne	.+4      	; 0x796a <_ZN6String6concatEPKcj+0x16>
    7966:	80 e0       	ldi	r24, 0x00	; 0
    7968:	1a c0       	rjmp	.+52     	; 0x799e <_ZN6String6concatEPKcj+0x4a>
    796a:	41 15       	cp	r20, r1
    796c:	51 05       	cpc	r21, r1
    796e:	b1 f0       	breq	.+44     	; 0x799c <_ZN6String6concatEPKcj+0x48>
    7970:	7b 01       	movw	r14, r22
    7972:	ec 01       	movw	r28, r24
    7974:	8c 81       	ldd	r24, Y+4	; 0x04
    7976:	9d 81       	ldd	r25, Y+5	; 0x05
    7978:	8a 01       	movw	r16, r20
    797a:	08 0f       	add	r16, r24
    797c:	19 1f       	adc	r17, r25
    797e:	b8 01       	movw	r22, r16
    7980:	ce 01       	movw	r24, r28
    7982:	2c de       	rcall	.-936    	; 0x75dc <_ZN6String7reserveEj>
    7984:	88 23       	and	r24, r24
    7986:	79 f3       	breq	.-34     	; 0x7966 <_ZN6String6concatEPKcj+0x12>
    7988:	28 81       	ld	r18, Y
    798a:	39 81       	ldd	r19, Y+1	; 0x01
    798c:	8c 81       	ldd	r24, Y+4	; 0x04
    798e:	9d 81       	ldd	r25, Y+5	; 0x05
    7990:	b7 01       	movw	r22, r14
    7992:	82 0f       	add	r24, r18
    7994:	93 1f       	adc	r25, r19
    7996:	01 d5       	rcall	.+2562   	; 0x839a <strcpy>
    7998:	1d 83       	std	Y+5, r17	; 0x05
    799a:	0c 83       	std	Y+4, r16	; 0x04
    799c:	81 e0       	ldi	r24, 0x01	; 1
    799e:	df 91       	pop	r29
    79a0:	cf 91       	pop	r28
    79a2:	1f 91       	pop	r17
    79a4:	0f 91       	pop	r16
    79a6:	ff 90       	pop	r15
    79a8:	ef 90       	pop	r14
    79aa:	08 95       	ret

000079ac <_ZN6String6concatERKS_>:
    79ac:	fb 01       	movw	r30, r22
    79ae:	44 81       	ldd	r20, Z+4	; 0x04
    79b0:	55 81       	ldd	r21, Z+5	; 0x05
    79b2:	60 81       	ld	r22, Z
    79b4:	71 81       	ldd	r23, Z+1	; 0x01
    79b6:	ce cf       	rjmp	.-100    	; 0x7954 <_ZN6String6concatEPKcj>

000079b8 <_ZN6String6concatEPKc>:
    79b8:	61 15       	cp	r22, r1
    79ba:	71 05       	cpc	r23, r1
    79bc:	49 f0       	breq	.+18     	; 0x79d0 <_ZN6String6concatEPKc+0x18>
    79be:	fb 01       	movw	r30, r22
    79c0:	01 90       	ld	r0, Z+
    79c2:	00 20       	and	r0, r0
    79c4:	e9 f7       	brne	.-6      	; 0x79c0 <_ZN6String6concatEPKc+0x8>
    79c6:	31 97       	sbiw	r30, 0x01	; 1
    79c8:	af 01       	movw	r20, r30
    79ca:	46 1b       	sub	r20, r22
    79cc:	57 0b       	sbc	r21, r23
    79ce:	c2 cf       	rjmp	.-124    	; 0x7954 <_ZN6String6concatEPKcj>
    79d0:	80 e0       	ldi	r24, 0x00	; 0
    79d2:	08 95       	ret

000079d4 <_ZN6String6concatEc>:
    79d4:	cf 93       	push	r28
    79d6:	df 93       	push	r29
    79d8:	00 d0       	rcall	.+0      	; 0x79da <_ZN6String6concatEc+0x6>
    79da:	cd b7       	in	r28, 0x3d	; 61
    79dc:	de b7       	in	r29, 0x3e	; 62
    79de:	69 83       	std	Y+1, r22	; 0x01
    79e0:	1a 82       	std	Y+2, r1	; 0x02
    79e2:	41 e0       	ldi	r20, 0x01	; 1
    79e4:	50 e0       	ldi	r21, 0x00	; 0
    79e6:	be 01       	movw	r22, r28
    79e8:	6f 5f       	subi	r22, 0xFF	; 255
    79ea:	7f 4f       	sbci	r23, 0xFF	; 255
    79ec:	b3 df       	rcall	.-154    	; 0x7954 <_ZN6String6concatEPKcj>
    79ee:	0f 90       	pop	r0
    79f0:	0f 90       	pop	r0
    79f2:	df 91       	pop	r29
    79f4:	cf 91       	pop	r28
    79f6:	08 95       	ret

000079f8 <_ZplRK15StringSumHelperRK6String>:
    79f8:	cf 93       	push	r28
    79fa:	df 93       	push	r29
    79fc:	ec 01       	movw	r28, r24
    79fe:	fb 01       	movw	r30, r22
    7a00:	44 81       	ldd	r20, Z+4	; 0x04
    7a02:	55 81       	ldd	r21, Z+5	; 0x05
    7a04:	60 81       	ld	r22, Z
    7a06:	71 81       	ldd	r23, Z+1	; 0x01
    7a08:	a5 df       	rcall	.-182    	; 0x7954 <_ZN6String6concatEPKcj>
    7a0a:	81 11       	cpse	r24, r1
    7a0c:	02 c0       	rjmp	.+4      	; 0x7a12 <_ZplRK15StringSumHelperRK6String+0x1a>
    7a0e:	ce 01       	movw	r24, r28
    7a10:	bb dd       	rcall	.-1162   	; 0x7588 <_ZN6String10invalidateEv>
    7a12:	ce 01       	movw	r24, r28
    7a14:	df 91       	pop	r29
    7a16:	cf 91       	pop	r28
    7a18:	08 95       	ret

00007a1a <_ZplRK15StringSumHelperPKc>:
    7a1a:	cf 93       	push	r28
    7a1c:	df 93       	push	r29
    7a1e:	ec 01       	movw	r28, r24
    7a20:	61 15       	cp	r22, r1
    7a22:	71 05       	cpc	r23, r1
    7a24:	59 f0       	breq	.+22     	; 0x7a3c <_ZplRK15StringSumHelperPKc+0x22>
    7a26:	fb 01       	movw	r30, r22
    7a28:	01 90       	ld	r0, Z+
    7a2a:	00 20       	and	r0, r0
    7a2c:	e9 f7       	brne	.-6      	; 0x7a28 <_ZplRK15StringSumHelperPKc+0xe>
    7a2e:	31 97       	sbiw	r30, 0x01	; 1
    7a30:	af 01       	movw	r20, r30
    7a32:	46 1b       	sub	r20, r22
    7a34:	57 0b       	sbc	r21, r23
    7a36:	8e df       	rcall	.-228    	; 0x7954 <_ZN6String6concatEPKcj>
    7a38:	81 11       	cpse	r24, r1
    7a3a:	02 c0       	rjmp	.+4      	; 0x7a40 <_ZplRK15StringSumHelperPKc+0x26>
    7a3c:	ce 01       	movw	r24, r28
    7a3e:	a4 dd       	rcall	.-1208   	; 0x7588 <_ZN6String10invalidateEv>
    7a40:	ce 01       	movw	r24, r28
    7a42:	df 91       	pop	r29
    7a44:	cf 91       	pop	r28
    7a46:	08 95       	ret

00007a48 <_ZplRK15StringSumHelperc>:
    7a48:	cf 93       	push	r28
    7a4a:	df 93       	push	r29
    7a4c:	ec 01       	movw	r28, r24
    7a4e:	c2 df       	rcall	.-124    	; 0x79d4 <_ZN6String6concatEc>
    7a50:	81 11       	cpse	r24, r1
    7a52:	02 c0       	rjmp	.+4      	; 0x7a58 <_ZplRK15StringSumHelperc+0x10>
    7a54:	ce 01       	movw	r24, r28
    7a56:	98 dd       	rcall	.-1232   	; 0x7588 <_ZN6String10invalidateEv>
    7a58:	ce 01       	movw	r24, r28
    7a5a:	df 91       	pop	r29
    7a5c:	cf 91       	pop	r28
    7a5e:	08 95       	ret

00007a60 <_ZNK6String6equalsEPKc>:
    7a60:	fc 01       	movw	r30, r24
    7a62:	24 81       	ldd	r18, Z+4	; 0x04
    7a64:	35 81       	ldd	r19, Z+5	; 0x05
    7a66:	23 2b       	or	r18, r19
    7a68:	31 f4       	brne	.+12     	; 0x7a76 <_ZNK6String6equalsEPKc+0x16>
    7a6a:	21 e0       	ldi	r18, 0x01	; 1
    7a6c:	61 15       	cp	r22, r1
    7a6e:	71 05       	cpc	r23, r1
    7a70:	99 f0       	breq	.+38     	; 0x7a98 <_ZNK6String6equalsEPKc+0x38>
    7a72:	fb 01       	movw	r30, r22
    7a74:	08 c0       	rjmp	.+16     	; 0x7a86 <_ZNK6String6equalsEPKc+0x26>
    7a76:	fc 01       	movw	r30, r24
    7a78:	80 81       	ld	r24, Z
    7a7a:	91 81       	ldd	r25, Z+1	; 0x01
    7a7c:	61 15       	cp	r22, r1
    7a7e:	71 05       	cpc	r23, r1
    7a80:	31 f4       	brne	.+12     	; 0x7a8e <_ZNK6String6equalsEPKc+0x2e>
    7a82:	21 e0       	ldi	r18, 0x01	; 1
    7a84:	fc 01       	movw	r30, r24
    7a86:	80 81       	ld	r24, Z
    7a88:	88 23       	and	r24, r24
    7a8a:	31 f0       	breq	.+12     	; 0x7a98 <_ZNK6String6equalsEPKc+0x38>
    7a8c:	04 c0       	rjmp	.+8      	; 0x7a96 <_ZNK6String6equalsEPKc+0x36>
    7a8e:	7c d4       	rcall	.+2296   	; 0x8388 <strcmp>
    7a90:	21 e0       	ldi	r18, 0x01	; 1
    7a92:	89 2b       	or	r24, r25
    7a94:	09 f0       	breq	.+2      	; 0x7a98 <_ZNK6String6equalsEPKc+0x38>
    7a96:	20 e0       	ldi	r18, 0x00	; 0
    7a98:	82 2f       	mov	r24, r18
    7a9a:	08 95       	ret

00007a9c <_ZNK6String8getBytesEPhjj>:
    7a9c:	0f 93       	push	r16
    7a9e:	1f 93       	push	r17
    7aa0:	cf 93       	push	r28
    7aa2:	df 93       	push	r29
    7aa4:	41 15       	cp	r20, r1
    7aa6:	51 05       	cpc	r21, r1
    7aa8:	11 f1       	breq	.+68     	; 0x7aee <_ZNK6String8getBytesEPhjj+0x52>
    7aaa:	61 15       	cp	r22, r1
    7aac:	71 05       	cpc	r23, r1
    7aae:	f9 f0       	breq	.+62     	; 0x7aee <_ZNK6String8getBytesEPhjj+0x52>
    7ab0:	dc 01       	movw	r26, r24
    7ab2:	14 96       	adiw	r26, 0x04	; 4
    7ab4:	ed 91       	ld	r30, X+
    7ab6:	fc 91       	ld	r31, X
    7ab8:	15 97       	sbiw	r26, 0x05	; 5
    7aba:	2e 17       	cp	r18, r30
    7abc:	3f 07       	cpc	r19, r31
    7abe:	18 f0       	brcs	.+6      	; 0x7ac6 <_ZNK6String8getBytesEPhjj+0x2a>
    7ac0:	fb 01       	movw	r30, r22
    7ac2:	10 82       	st	Z, r1
    7ac4:	14 c0       	rjmp	.+40     	; 0x7aee <_ZNK6String8getBytesEPhjj+0x52>
    7ac6:	e2 1b       	sub	r30, r18
    7ac8:	f3 0b       	sbc	r31, r19
    7aca:	ea 01       	movw	r28, r20
    7acc:	21 97       	sbiw	r28, 0x01	; 1
    7ace:	ec 17       	cp	r30, r28
    7ad0:	fd 07       	cpc	r31, r29
    7ad2:	08 f4       	brcc	.+2      	; 0x7ad6 <_ZNK6String8getBytesEPhjj+0x3a>
    7ad4:	ef 01       	movw	r28, r30
    7ad6:	8b 01       	movw	r16, r22
    7ad8:	fc 01       	movw	r30, r24
    7ada:	60 81       	ld	r22, Z
    7adc:	71 81       	ldd	r23, Z+1	; 0x01
    7ade:	62 0f       	add	r22, r18
    7ae0:	73 1f       	adc	r23, r19
    7ae2:	ae 01       	movw	r20, r28
    7ae4:	c8 01       	movw	r24, r16
    7ae6:	6e d4       	rcall	.+2268   	; 0x83c4 <strncpy>
    7ae8:	c0 0f       	add	r28, r16
    7aea:	d1 1f       	adc	r29, r17
    7aec:	18 82       	st	Y, r1
    7aee:	df 91       	pop	r29
    7af0:	cf 91       	pop	r28
    7af2:	1f 91       	pop	r17
    7af4:	0f 91       	pop	r16
    7af6:	08 95       	ret

00007af8 <_ZNK6String9substringEjj>:
    7af8:	bf 92       	push	r11
    7afa:	cf 92       	push	r12
    7afc:	df 92       	push	r13
    7afe:	ef 92       	push	r14
    7b00:	ff 92       	push	r15
    7b02:	0f 93       	push	r16
    7b04:	1f 93       	push	r17
    7b06:	cf 93       	push	r28
    7b08:	df 93       	push	r29
    7b0a:	7c 01       	movw	r14, r24
    7b0c:	6b 01       	movw	r12, r22
    7b0e:	8a 01       	movw	r16, r20
    7b10:	e9 01       	movw	r28, r18
    7b12:	24 17       	cp	r18, r20
    7b14:	35 07       	cpc	r19, r21
    7b16:	20 f4       	brcc	.+8      	; 0x7b20 <_ZNK6String9substringEjj+0x28>
    7b18:	81 2f       	mov	r24, r17
    7b1a:	89 01       	movw	r16, r18
    7b1c:	c4 2f       	mov	r28, r20
    7b1e:	d8 2f       	mov	r29, r24
    7b20:	62 e4       	ldi	r22, 0x42	; 66
    7b22:	72 e0       	ldi	r23, 0x02	; 2
    7b24:	c7 01       	movw	r24, r14
    7b26:	93 dd       	rcall	.-1242   	; 0x764e <_ZN6StringC1EPKc>
    7b28:	d6 01       	movw	r26, r12
    7b2a:	14 96       	adiw	r26, 0x04	; 4
    7b2c:	8d 91       	ld	r24, X+
    7b2e:	9c 91       	ld	r25, X
    7b30:	15 97       	sbiw	r26, 0x05	; 5
    7b32:	08 17       	cp	r16, r24
    7b34:	19 07       	cpc	r17, r25
    7b36:	c0 f4       	brcc	.+48     	; 0x7b68 <_ZNK6String9substringEjj+0x70>
    7b38:	8c 17       	cp	r24, r28
    7b3a:	9d 07       	cpc	r25, r29
    7b3c:	08 f4       	brcc	.+2      	; 0x7b40 <_ZNK6String9substringEjj+0x48>
    7b3e:	ec 01       	movw	r28, r24
    7b40:	d6 01       	movw	r26, r12
    7b42:	ed 91       	ld	r30, X+
    7b44:	fc 91       	ld	r31, X
    7b46:	11 97       	sbiw	r26, 0x01	; 1
    7b48:	ec 0f       	add	r30, r28
    7b4a:	fd 1f       	adc	r31, r29
    7b4c:	b0 80       	ld	r11, Z
    7b4e:	10 82       	st	Z, r1
    7b50:	6d 91       	ld	r22, X+
    7b52:	7c 91       	ld	r23, X
    7b54:	60 0f       	add	r22, r16
    7b56:	71 1f       	adc	r23, r17
    7b58:	c7 01       	movw	r24, r14
    7b5a:	f8 dd       	rcall	.-1040   	; 0x774c <_ZN6StringaSEPKc>
    7b5c:	d6 01       	movw	r26, r12
    7b5e:	ed 91       	ld	r30, X+
    7b60:	fc 91       	ld	r31, X
    7b62:	ec 0f       	add	r30, r28
    7b64:	fd 1f       	adc	r31, r29
    7b66:	b0 82       	st	Z, r11
    7b68:	c7 01       	movw	r24, r14
    7b6a:	df 91       	pop	r29
    7b6c:	cf 91       	pop	r28
    7b6e:	1f 91       	pop	r17
    7b70:	0f 91       	pop	r16
    7b72:	ff 90       	pop	r15
    7b74:	ef 90       	pop	r14
    7b76:	df 90       	pop	r13
    7b78:	cf 90       	pop	r12
    7b7a:	bf 90       	pop	r11
    7b7c:	08 95       	ret

00007b7e <_ZN6String4trimEv>:

void String::trim(void)
{
    7b7e:	af 92       	push	r10
    7b80:	bf 92       	push	r11
    7b82:	cf 92       	push	r12
    7b84:	df 92       	push	r13
    7b86:	ef 92       	push	r14
    7b88:	ff 92       	push	r15
    7b8a:	0f 93       	push	r16
    7b8c:	1f 93       	push	r17
    7b8e:	cf 93       	push	r28
    7b90:	df 93       	push	r29
	if (!buffer || len == 0) return;
    7b92:	dc 01       	movw	r26, r24
    7b94:	cd 90       	ld	r12, X+
    7b96:	dc 90       	ld	r13, X
    7b98:	11 97       	sbiw	r26, 0x01	; 1
    7b9a:	c1 14       	cp	r12, r1
    7b9c:	d1 04       	cpc	r13, r1
    7b9e:	09 f4       	brne	.+2      	; 0x7ba2 <_ZN6String4trimEv+0x24>
    7ba0:	3c c0       	rjmp	.+120    	; 0x7c1a <_ZN6String4trimEv+0x9c>
    7ba2:	14 96       	adiw	r26, 0x04	; 4
    7ba4:	cd 91       	ld	r28, X+
    7ba6:	dc 91       	ld	r29, X
    7ba8:	15 97       	sbiw	r26, 0x05	; 5
    7baa:	20 97       	sbiw	r28, 0x00	; 0
    7bac:	b1 f1       	breq	.+108    	; 0x7c1a <_ZN6String4trimEv+0x9c>
    7bae:	8c 01       	movw	r16, r24
    7bb0:	76 01       	movw	r14, r12
    7bb2:	57 01       	movw	r10, r14
    7bb4:	bf ef       	ldi	r27, 0xFF	; 255
    7bb6:	ab 1a       	sub	r10, r27
    7bb8:	bb 0a       	sbc	r11, r27
	char *begin = buffer;
	while (isspace(*begin)) begin++;
    7bba:	f7 01       	movw	r30, r14
    7bbc:	80 81       	ld	r24, Z
    7bbe:	90 e0       	ldi	r25, 0x00	; 0
    7bc0:	c9 d3       	rcall	.+1938   	; 0x8354 <isspace>
    7bc2:	89 2b       	or	r24, r25
    7bc4:	11 f0       	breq	.+4      	; 0x7bca <_ZN6String4trimEv+0x4c>
    7bc6:	75 01       	movw	r14, r10
    7bc8:	f4 cf       	rjmp	.-24     	; 0x7bb2 <_ZN6String4trimEv+0x34>
	char *end = buffer + len - 1;
    7bca:	21 97       	sbiw	r28, 0x01	; 1
    7bcc:	cc 0d       	add	r28, r12
    7bce:	dd 1d       	adc	r29, r13
	while (isspace(*end) && end >= begin) end--;
    7bd0:	88 81       	ld	r24, Y
    7bd2:	90 e0       	ldi	r25, 0x00	; 0
    7bd4:	bf d3       	rcall	.+1918   	; 0x8354 <isspace>
    7bd6:	89 2b       	or	r24, r25
    7bd8:	29 f0       	breq	.+10     	; 0x7be4 <_ZN6String4trimEv+0x66>
    7bda:	ce 15       	cp	r28, r14
    7bdc:	df 05       	cpc	r29, r15
    7bde:	10 f0       	brcs	.+4      	; 0x7be4 <_ZN6String4trimEv+0x66>
    7be0:	21 97       	sbiw	r28, 0x01	; 1
    7be2:	f6 cf       	rjmp	.-20     	; 0x7bd0 <_ZN6String4trimEv+0x52>
	len = end + 1 - begin;
    7be4:	ae 01       	movw	r20, r28
    7be6:	4f 5f       	subi	r20, 0xFF	; 255
    7be8:	5f 4f       	sbci	r21, 0xFF	; 255
    7bea:	4e 19       	sub	r20, r14
    7bec:	5f 09       	sbc	r21, r15
    7bee:	d8 01       	movw	r26, r16
    7bf0:	15 96       	adiw	r26, 0x05	; 5
    7bf2:	5c 93       	st	X, r21
    7bf4:	4e 93       	st	-X, r20
    7bf6:	14 97       	sbiw	r26, 0x04	; 4
	if (begin > buffer) memcpy(buffer, begin, len);
    7bf8:	ce 14       	cp	r12, r14
    7bfa:	df 04       	cpc	r13, r15
    7bfc:	18 f4       	brcc	.+6      	; 0x7c04 <_ZN6String4trimEv+0x86>
    7bfe:	b7 01       	movw	r22, r14
    7c00:	c6 01       	movw	r24, r12
    7c02:	b9 d3       	rcall	.+1906   	; 0x8376 <memcpy>
	buffer[len] = 0;
    7c04:	d8 01       	movw	r26, r16
    7c06:	ed 91       	ld	r30, X+
    7c08:	fc 91       	ld	r31, X
    7c0a:	11 97       	sbiw	r26, 0x01	; 1
    7c0c:	14 96       	adiw	r26, 0x04	; 4
    7c0e:	8d 91       	ld	r24, X+
    7c10:	9c 91       	ld	r25, X
    7c12:	15 97       	sbiw	r26, 0x05	; 5
    7c14:	e8 0f       	add	r30, r24
    7c16:	f9 1f       	adc	r31, r25
    7c18:	10 82       	st	Z, r1
}
    7c1a:	df 91       	pop	r29
    7c1c:	cf 91       	pop	r28
    7c1e:	1f 91       	pop	r17
    7c20:	0f 91       	pop	r16
    7c22:	ff 90       	pop	r15
    7c24:	ef 90       	pop	r14
    7c26:	df 90       	pop	r13
    7c28:	cf 90       	pop	r12
    7c2a:	bf 90       	pop	r11
    7c2c:	af 90       	pop	r10
    7c2e:	08 95       	ret

00007c30 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
    7c30:	fc 01       	movw	r30, r24
    7c32:	80 81       	ld	r24, Z
    7c34:	91 81       	ldd	r25, Z+1	; 0x01
    7c36:	00 97       	sbiw	r24, 0x00	; 0
    7c38:	09 f0       	breq	.+2      	; 0x7c3c <_ZNK6String5toIntEv+0xc>
    7c3a:	66 c3       	rjmp	.+1740   	; 0x8308 <atol>
	return 0;
}
    7c3c:	60 e0       	ldi	r22, 0x00	; 0
    7c3e:	70 e0       	ldi	r23, 0x00	; 0
    7c40:	cb 01       	movw	r24, r22
    7c42:	08 95       	ret

00007c44 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    7c44:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    7c46:	91 8d       	ldd	r25, Z+25	; 0x19
    7c48:	22 8d       	ldd	r18, Z+26	; 0x1a
    7c4a:	89 2f       	mov	r24, r25
    7c4c:	90 e0       	ldi	r25, 0x00	; 0
    7c4e:	80 5c       	subi	r24, 0xC0	; 192
    7c50:	9f 4f       	sbci	r25, 0xFF	; 255
    7c52:	82 1b       	sub	r24, r18
    7c54:	91 09       	sbc	r25, r1
}
    7c56:	8f 73       	andi	r24, 0x3F	; 63
    7c58:	99 27       	eor	r25, r25
    7c5a:	08 95       	ret

00007c5c <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    7c5c:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    7c5e:	91 8d       	ldd	r25, Z+25	; 0x19
    7c60:	82 8d       	ldd	r24, Z+26	; 0x1a
    7c62:	98 17       	cp	r25, r24
    7c64:	31 f0       	breq	.+12     	; 0x7c72 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    7c66:	82 8d       	ldd	r24, Z+26	; 0x1a
    7c68:	e8 0f       	add	r30, r24
    7c6a:	f1 1d       	adc	r31, r1
    7c6c:	85 8d       	ldd	r24, Z+29	; 0x1d
    7c6e:	90 e0       	ldi	r25, 0x00	; 0
    7c70:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    7c72:	8f ef       	ldi	r24, 0xFF	; 255
    7c74:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    7c76:	08 95       	ret

00007c78 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    7c78:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    7c7a:	91 8d       	ldd	r25, Z+25	; 0x19
    7c7c:	82 8d       	ldd	r24, Z+26	; 0x1a
    7c7e:	98 17       	cp	r25, r24
    7c80:	61 f0       	breq	.+24     	; 0x7c9a <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    7c82:	82 8d       	ldd	r24, Z+26	; 0x1a
    7c84:	df 01       	movw	r26, r30
    7c86:	a8 0f       	add	r26, r24
    7c88:	b1 1d       	adc	r27, r1
    7c8a:	5d 96       	adiw	r26, 0x1d	; 29
    7c8c:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    7c8e:	92 8d       	ldd	r25, Z+26	; 0x1a
    7c90:	9f 5f       	subi	r25, 0xFF	; 255
    7c92:	9f 73       	andi	r25, 0x3F	; 63
    7c94:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    7c96:	90 e0       	ldi	r25, 0x00	; 0
    7c98:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    7c9a:	8f ef       	ldi	r24, 0xFF	; 255
    7c9c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    7c9e:	08 95       	ret

00007ca0 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    7ca0:	fc 01       	movw	r30, r24
    7ca2:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    7ca4:	44 8d       	ldd	r20, Z+28	; 0x1c
    7ca6:	25 2f       	mov	r18, r21
    7ca8:	30 e0       	ldi	r19, 0x00	; 0
    7caa:	84 2f       	mov	r24, r20
    7cac:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    7cae:	82 1b       	sub	r24, r18
    7cb0:	93 0b       	sbc	r25, r19
    7cb2:	54 17       	cp	r21, r20
    7cb4:	10 f0       	brcs	.+4      	; 0x7cba <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    7cb6:	cf 96       	adiw	r24, 0x3f	; 63
    7cb8:	08 95       	ret
  return tail - head - 1;
    7cba:	01 97       	sbiw	r24, 0x01	; 1
}
    7cbc:	08 95       	ret

00007cbe <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    7cbe:	8f e4       	ldi	r24, 0x4F	; 79
    7cc0:	97 e3       	ldi	r25, 0x37	; 55
    7cc2:	89 2b       	or	r24, r25
    7cc4:	41 f0       	breq	.+16     	; 0x7cd6 <_Z14serialEventRunv+0x18>
    7cc6:	80 e0       	ldi	r24, 0x00	; 0
    7cc8:	90 e0       	ldi	r25, 0x00	; 0
    7cca:	89 2b       	or	r24, r25
    7ccc:	21 f0       	breq	.+8      	; 0x7cd6 <_Z14serialEventRunv+0x18>
    7cce:	e7 d8       	rcall	.-3634   	; 0x6e9e <_Z17Serial0_availablev>
    7cd0:	81 11       	cpse	r24, r1
    7cd2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    7cd6:	08 95       	ret

00007cd8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    7cd8:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    7cda:	84 8d       	ldd	r24, Z+28	; 0x1c
    7cdc:	df 01       	movw	r26, r30
    7cde:	a8 0f       	add	r26, r24
    7ce0:	b1 1d       	adc	r27, r1
    7ce2:	a3 5a       	subi	r26, 0xA3	; 163
    7ce4:	bf 4f       	sbci	r27, 0xFF	; 255
    7ce6:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    7ce8:	84 8d       	ldd	r24, Z+28	; 0x1c
    7cea:	90 e0       	ldi	r25, 0x00	; 0
    7cec:	01 96       	adiw	r24, 0x01	; 1
    7cee:	8f 73       	andi	r24, 0x3F	; 63
    7cf0:	99 27       	eor	r25, r25
    7cf2:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    7cf4:	a6 89       	ldd	r26, Z+22	; 0x16
    7cf6:	b7 89       	ldd	r27, Z+23	; 0x17
    7cf8:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    7cfa:	a0 89       	ldd	r26, Z+16	; 0x10
    7cfc:	b1 89       	ldd	r27, Z+17	; 0x11
    7cfe:	8c 91       	ld	r24, X
    7d00:	83 70       	andi	r24, 0x03	; 3
    7d02:	80 64       	ori	r24, 0x40	; 64
    7d04:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    7d06:	93 8d       	ldd	r25, Z+27	; 0x1b
    7d08:	84 8d       	ldd	r24, Z+28	; 0x1c
    7d0a:	98 13       	cpse	r25, r24
    7d0c:	06 c0       	rjmp	.+12     	; 0x7d1a <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    7d0e:	02 88       	ldd	r0, Z+18	; 0x12
    7d10:	f3 89       	ldd	r31, Z+19	; 0x13
    7d12:	e0 2d       	mov	r30, r0
    7d14:	80 81       	ld	r24, Z
    7d16:	8f 7d       	andi	r24, 0xDF	; 223
    7d18:	80 83       	st	Z, r24
    7d1a:	08 95       	ret

00007d1c <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    7d1c:	ef 92       	push	r14
    7d1e:	ff 92       	push	r15
    7d20:	0f 93       	push	r16
    7d22:	1f 93       	push	r17
    7d24:	cf 93       	push	r28
    7d26:	df 93       	push	r29
    7d28:	ec 01       	movw	r28, r24
  _written = true;
    7d2a:	81 e0       	ldi	r24, 0x01	; 1
    7d2c:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    7d2e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    7d30:	8c 8d       	ldd	r24, Y+28	; 0x1c
    7d32:	98 13       	cpse	r25, r24
    7d34:	05 c0       	rjmp	.+10     	; 0x7d40 <_ZN14HardwareSerial5writeEh+0x24>
    7d36:	e8 89       	ldd	r30, Y+16	; 0x10
    7d38:	f9 89       	ldd	r31, Y+17	; 0x11
    7d3a:	80 81       	ld	r24, Z
    7d3c:	85 fd       	sbrc	r24, 5
    7d3e:	25 c0       	rjmp	.+74     	; 0x7d8a <_ZN14HardwareSerial5writeEh+0x6e>
    7d40:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    7d42:	0b 8d       	ldd	r16, Y+27	; 0x1b
    7d44:	10 e0       	ldi	r17, 0x00	; 0
    7d46:	0f 5f       	subi	r16, 0xFF	; 255
    7d48:	1f 4f       	sbci	r17, 0xFF	; 255
    7d4a:	0f 73       	andi	r16, 0x3F	; 63
    7d4c:	11 27       	eor	r17, r17
    7d4e:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    7d50:	8c 8d       	ldd	r24, Y+28	; 0x1c
    7d52:	e8 12       	cpse	r14, r24
    7d54:	0b c0       	rjmp	.+22     	; 0x7d6c <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    7d56:	0f b6       	in	r0, 0x3f	; 63
    7d58:	07 fc       	sbrc	r0, 7
    7d5a:	fa cf       	rjmp	.-12     	; 0x7d50 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    7d5c:	e8 89       	ldd	r30, Y+16	; 0x10
    7d5e:	f9 89       	ldd	r31, Y+17	; 0x11
    7d60:	80 81       	ld	r24, Z
    7d62:	85 ff       	sbrs	r24, 5
    7d64:	f5 cf       	rjmp	.-22     	; 0x7d50 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    7d66:	ce 01       	movw	r24, r28
    7d68:	b7 df       	rcall	.-146    	; 0x7cd8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    7d6a:	f2 cf       	rjmp	.-28     	; 0x7d50 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    7d6c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7d6e:	fe 01       	movw	r30, r28
    7d70:	e8 0f       	add	r30, r24
    7d72:	f1 1d       	adc	r31, r1
    7d74:	e3 5a       	subi	r30, 0xA3	; 163
    7d76:	ff 4f       	sbci	r31, 0xFF	; 255
    7d78:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    7d7a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    7d7c:	f8 94       	cli
    _tx_buffer_head = i;
    7d7e:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    7d80:	ea 89       	ldd	r30, Y+18	; 0x12
    7d82:	fb 89       	ldd	r31, Y+19	; 0x13
    7d84:	80 81       	ld	r24, Z
    7d86:	80 62       	ori	r24, 0x20	; 32
    7d88:	0a c0       	rjmp	.+20     	; 0x7d9e <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    7d8a:	9f b7       	in	r25, 0x3f	; 63
    7d8c:	f8 94       	cli
      *_udr = c;
    7d8e:	ee 89       	ldd	r30, Y+22	; 0x16
    7d90:	ff 89       	ldd	r31, Y+23	; 0x17
    7d92:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    7d94:	e8 89       	ldd	r30, Y+16	; 0x10
    7d96:	f9 89       	ldd	r31, Y+17	; 0x11
    7d98:	80 81       	ld	r24, Z
    7d9a:	83 70       	andi	r24, 0x03	; 3
    7d9c:	80 64       	ori	r24, 0x40	; 64
    7d9e:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    7da0:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    7da2:	81 e0       	ldi	r24, 0x01	; 1
    7da4:	90 e0       	ldi	r25, 0x00	; 0
    7da6:	df 91       	pop	r29
    7da8:	cf 91       	pop	r28
    7daa:	1f 91       	pop	r17
    7dac:	0f 91       	pop	r16
    7dae:	ff 90       	pop	r15
    7db0:	ef 90       	pop	r14
    7db2:	08 95       	ret

00007db4 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    7db4:	cf 93       	push	r28
    7db6:	df 93       	push	r29
    7db8:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    7dba:	88 8d       	ldd	r24, Y+24	; 0x18
    7dbc:	88 23       	and	r24, r24
    7dbe:	c1 f0       	breq	.+48     	; 0x7df0 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    7dc0:	ea 89       	ldd	r30, Y+18	; 0x12
    7dc2:	fb 89       	ldd	r31, Y+19	; 0x13
    7dc4:	80 81       	ld	r24, Z
    7dc6:	85 fd       	sbrc	r24, 5
    7dc8:	05 c0       	rjmp	.+10     	; 0x7dd4 <_ZN14HardwareSerial5flushEv+0x20>
    7dca:	a8 89       	ldd	r26, Y+16	; 0x10
    7dcc:	b9 89       	ldd	r27, Y+17	; 0x11
    7dce:	8c 91       	ld	r24, X
    7dd0:	86 fd       	sbrc	r24, 6
    7dd2:	0e c0       	rjmp	.+28     	; 0x7df0 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    7dd4:	0f b6       	in	r0, 0x3f	; 63
    7dd6:	07 fc       	sbrc	r0, 7
    7dd8:	f5 cf       	rjmp	.-22     	; 0x7dc4 <_ZN14HardwareSerial5flushEv+0x10>
    7dda:	80 81       	ld	r24, Z
    7ddc:	85 ff       	sbrs	r24, 5
    7dde:	f2 cf       	rjmp	.-28     	; 0x7dc4 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    7de0:	a8 89       	ldd	r26, Y+16	; 0x10
    7de2:	b9 89       	ldd	r27, Y+17	; 0x11
    7de4:	8c 91       	ld	r24, X
    7de6:	85 ff       	sbrs	r24, 5
    7de8:	ed cf       	rjmp	.-38     	; 0x7dc4 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    7dea:	ce 01       	movw	r24, r28
    7dec:	75 df       	rcall	.-278    	; 0x7cd8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    7dee:	e8 cf       	rjmp	.-48     	; 0x7dc0 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    7df0:	df 91       	pop	r29
    7df2:	cf 91       	pop	r28
    7df4:	08 95       	ret

00007df6 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    7df6:	08 95       	ret

00007df8 <__udivmodqi4>:
    7df8:	99 1b       	sub	r25, r25
    7dfa:	79 e0       	ldi	r23, 0x09	; 9
    7dfc:	04 c0       	rjmp	.+8      	; 0x7e06 <__udivmodqi4_ep>

00007dfe <__udivmodqi4_loop>:
    7dfe:	99 1f       	adc	r25, r25
    7e00:	96 17       	cp	r25, r22
    7e02:	08 f0       	brcs	.+2      	; 0x7e06 <__udivmodqi4_ep>
    7e04:	96 1b       	sub	r25, r22

00007e06 <__udivmodqi4_ep>:
    7e06:	88 1f       	adc	r24, r24
    7e08:	7a 95       	dec	r23
    7e0a:	c9 f7       	brne	.-14     	; 0x7dfe <__udivmodqi4_loop>
    7e0c:	80 95       	com	r24
    7e0e:	08 95       	ret

00007e10 <__udivmodhi4>:
    7e10:	aa 1b       	sub	r26, r26
    7e12:	bb 1b       	sub	r27, r27
    7e14:	51 e1       	ldi	r21, 0x11	; 17
    7e16:	07 c0       	rjmp	.+14     	; 0x7e26 <__udivmodhi4_ep>

00007e18 <__udivmodhi4_loop>:
    7e18:	aa 1f       	adc	r26, r26
    7e1a:	bb 1f       	adc	r27, r27
    7e1c:	a6 17       	cp	r26, r22
    7e1e:	b7 07       	cpc	r27, r23
    7e20:	10 f0       	brcs	.+4      	; 0x7e26 <__udivmodhi4_ep>
    7e22:	a6 1b       	sub	r26, r22
    7e24:	b7 0b       	sbc	r27, r23

00007e26 <__udivmodhi4_ep>:
    7e26:	88 1f       	adc	r24, r24
    7e28:	99 1f       	adc	r25, r25
    7e2a:	5a 95       	dec	r21
    7e2c:	a9 f7       	brne	.-22     	; 0x7e18 <__udivmodhi4_loop>
    7e2e:	80 95       	com	r24
    7e30:	90 95       	com	r25
    7e32:	bc 01       	movw	r22, r24
    7e34:	cd 01       	movw	r24, r26
    7e36:	08 95       	ret

00007e38 <__udivmodsi4>:
    7e38:	a1 e2       	ldi	r26, 0x21	; 33
    7e3a:	1a 2e       	mov	r1, r26
    7e3c:	aa 1b       	sub	r26, r26
    7e3e:	bb 1b       	sub	r27, r27
    7e40:	fd 01       	movw	r30, r26
    7e42:	0d c0       	rjmp	.+26     	; 0x7e5e <__udivmodsi4_ep>

00007e44 <__udivmodsi4_loop>:
    7e44:	aa 1f       	adc	r26, r26
    7e46:	bb 1f       	adc	r27, r27
    7e48:	ee 1f       	adc	r30, r30
    7e4a:	ff 1f       	adc	r31, r31
    7e4c:	a2 17       	cp	r26, r18
    7e4e:	b3 07       	cpc	r27, r19
    7e50:	e4 07       	cpc	r30, r20
    7e52:	f5 07       	cpc	r31, r21
    7e54:	20 f0       	brcs	.+8      	; 0x7e5e <__udivmodsi4_ep>
    7e56:	a2 1b       	sub	r26, r18
    7e58:	b3 0b       	sbc	r27, r19
    7e5a:	e4 0b       	sbc	r30, r20
    7e5c:	f5 0b       	sbc	r31, r21

00007e5e <__udivmodsi4_ep>:
    7e5e:	66 1f       	adc	r22, r22
    7e60:	77 1f       	adc	r23, r23
    7e62:	88 1f       	adc	r24, r24
    7e64:	99 1f       	adc	r25, r25
    7e66:	1a 94       	dec	r1
    7e68:	69 f7       	brne	.-38     	; 0x7e44 <__udivmodsi4_loop>
    7e6a:	60 95       	com	r22
    7e6c:	70 95       	com	r23
    7e6e:	80 95       	com	r24
    7e70:	90 95       	com	r25
    7e72:	9b 01       	movw	r18, r22
    7e74:	ac 01       	movw	r20, r24
    7e76:	bd 01       	movw	r22, r26
    7e78:	cf 01       	movw	r24, r30
    7e7a:	08 95       	ret

00007e7c <__tablejump2__>:
    7e7c:	ee 0f       	add	r30, r30
    7e7e:	ff 1f       	adc	r31, r31
    7e80:	00 24       	eor	r0, r0
    7e82:	00 1c       	adc	r0, r0
    7e84:	0b be       	out	0x3b, r0	; 59
    7e86:	07 90       	elpm	r0, Z+
    7e88:	f6 91       	elpm	r31, Z
    7e8a:	e0 2d       	mov	r30, r0
    7e8c:	09 94       	ijmp

00007e8e <__umulhisi3>:
    7e8e:	a2 9f       	mul	r26, r18
    7e90:	b0 01       	movw	r22, r0
    7e92:	b3 9f       	mul	r27, r19
    7e94:	c0 01       	movw	r24, r0
    7e96:	a3 9f       	mul	r26, r19
    7e98:	70 0d       	add	r23, r0
    7e9a:	81 1d       	adc	r24, r1
    7e9c:	11 24       	eor	r1, r1
    7e9e:	91 1d       	adc	r25, r1
    7ea0:	b2 9f       	mul	r27, r18
    7ea2:	70 0d       	add	r23, r0
    7ea4:	81 1d       	adc	r24, r1
    7ea6:	11 24       	eor	r1, r1
    7ea8:	91 1d       	adc	r25, r1
    7eaa:	08 95       	ret

00007eac <__muluhisi3>:
    7eac:	f0 df       	rcall	.-32     	; 0x7e8e <__umulhisi3>
    7eae:	a5 9f       	mul	r26, r21
    7eb0:	90 0d       	add	r25, r0
    7eb2:	b4 9f       	mul	r27, r20
    7eb4:	90 0d       	add	r25, r0
    7eb6:	a4 9f       	mul	r26, r20
    7eb8:	80 0d       	add	r24, r0
    7eba:	91 1d       	adc	r25, r1
    7ebc:	11 24       	eor	r1, r1
    7ebe:	08 95       	ret

00007ec0 <dtostrf>:
    7ec0:	ef 92       	push	r14
    7ec2:	0f 93       	push	r16
    7ec4:	1f 93       	push	r17
    7ec6:	cf 93       	push	r28
    7ec8:	df 93       	push	r29
    7eca:	e8 01       	movw	r28, r16
    7ecc:	47 fd       	sbrc	r20, 7
    7ece:	02 c0       	rjmp	.+4      	; 0x7ed4 <dtostrf+0x14>
    7ed0:	34 e0       	ldi	r19, 0x04	; 4
    7ed2:	01 c0       	rjmp	.+2      	; 0x7ed6 <dtostrf+0x16>
    7ed4:	34 e1       	ldi	r19, 0x14	; 20
    7ed6:	04 2e       	mov	r0, r20
    7ed8:	00 0c       	add	r0, r0
    7eda:	55 0b       	sbc	r21, r21
    7edc:	57 ff       	sbrs	r21, 7
    7ede:	03 c0       	rjmp	.+6      	; 0x7ee6 <dtostrf+0x26>
    7ee0:	51 95       	neg	r21
    7ee2:	41 95       	neg	r20
    7ee4:	51 09       	sbc	r21, r1
    7ee6:	e3 2e       	mov	r14, r19
    7ee8:	02 2f       	mov	r16, r18
    7eea:	24 2f       	mov	r18, r20
    7eec:	ae 01       	movw	r20, r28
    7eee:	f0 d2       	rcall	.+1504   	; 0x84d0 <dtoa_prf>
    7ef0:	ce 01       	movw	r24, r28
    7ef2:	df 91       	pop	r29
    7ef4:	cf 91       	pop	r28
    7ef6:	1f 91       	pop	r17
    7ef8:	0f 91       	pop	r16
    7efa:	ef 90       	pop	r14
    7efc:	08 95       	ret

00007efe <malloc>:
    7efe:	0f 93       	push	r16
    7f00:	1f 93       	push	r17
    7f02:	cf 93       	push	r28
    7f04:	df 93       	push	r29
    7f06:	82 30       	cpi	r24, 0x02	; 2
    7f08:	91 05       	cpc	r25, r1
    7f0a:	10 f4       	brcc	.+4      	; 0x7f10 <malloc+0x12>
    7f0c:	82 e0       	ldi	r24, 0x02	; 2
    7f0e:	90 e0       	ldi	r25, 0x00	; 0
    7f10:	e0 91 ce 0d 	lds	r30, 0x0DCE	; 0x800dce <__flp>
    7f14:	f0 91 cf 0d 	lds	r31, 0x0DCF	; 0x800dcf <__flp+0x1>
    7f18:	20 e0       	ldi	r18, 0x00	; 0
    7f1a:	30 e0       	ldi	r19, 0x00	; 0
    7f1c:	a0 e0       	ldi	r26, 0x00	; 0
    7f1e:	b0 e0       	ldi	r27, 0x00	; 0
    7f20:	30 97       	sbiw	r30, 0x00	; 0
    7f22:	19 f1       	breq	.+70     	; 0x7f6a <malloc+0x6c>
    7f24:	40 81       	ld	r20, Z
    7f26:	51 81       	ldd	r21, Z+1	; 0x01
    7f28:	02 81       	ldd	r16, Z+2	; 0x02
    7f2a:	13 81       	ldd	r17, Z+3	; 0x03
    7f2c:	48 17       	cp	r20, r24
    7f2e:	59 07       	cpc	r21, r25
    7f30:	c8 f0       	brcs	.+50     	; 0x7f64 <malloc+0x66>
    7f32:	84 17       	cp	r24, r20
    7f34:	95 07       	cpc	r25, r21
    7f36:	69 f4       	brne	.+26     	; 0x7f52 <malloc+0x54>
    7f38:	10 97       	sbiw	r26, 0x00	; 0
    7f3a:	31 f0       	breq	.+12     	; 0x7f48 <malloc+0x4a>
    7f3c:	12 96       	adiw	r26, 0x02	; 2
    7f3e:	0c 93       	st	X, r16
    7f40:	12 97       	sbiw	r26, 0x02	; 2
    7f42:	13 96       	adiw	r26, 0x03	; 3
    7f44:	1c 93       	st	X, r17
    7f46:	27 c0       	rjmp	.+78     	; 0x7f96 <malloc+0x98>
    7f48:	00 93 ce 0d 	sts	0x0DCE, r16	; 0x800dce <__flp>
    7f4c:	10 93 cf 0d 	sts	0x0DCF, r17	; 0x800dcf <__flp+0x1>
    7f50:	22 c0       	rjmp	.+68     	; 0x7f96 <malloc+0x98>
    7f52:	21 15       	cp	r18, r1
    7f54:	31 05       	cpc	r19, r1
    7f56:	19 f0       	breq	.+6      	; 0x7f5e <malloc+0x60>
    7f58:	42 17       	cp	r20, r18
    7f5a:	53 07       	cpc	r21, r19
    7f5c:	18 f4       	brcc	.+6      	; 0x7f64 <malloc+0x66>
    7f5e:	9a 01       	movw	r18, r20
    7f60:	bd 01       	movw	r22, r26
    7f62:	ef 01       	movw	r28, r30
    7f64:	df 01       	movw	r26, r30
    7f66:	f8 01       	movw	r30, r16
    7f68:	db cf       	rjmp	.-74     	; 0x7f20 <malloc+0x22>
    7f6a:	21 15       	cp	r18, r1
    7f6c:	31 05       	cpc	r19, r1
    7f6e:	f9 f0       	breq	.+62     	; 0x7fae <malloc+0xb0>
    7f70:	28 1b       	sub	r18, r24
    7f72:	39 0b       	sbc	r19, r25
    7f74:	24 30       	cpi	r18, 0x04	; 4
    7f76:	31 05       	cpc	r19, r1
    7f78:	80 f4       	brcc	.+32     	; 0x7f9a <malloc+0x9c>
    7f7a:	8a 81       	ldd	r24, Y+2	; 0x02
    7f7c:	9b 81       	ldd	r25, Y+3	; 0x03
    7f7e:	61 15       	cp	r22, r1
    7f80:	71 05       	cpc	r23, r1
    7f82:	21 f0       	breq	.+8      	; 0x7f8c <malloc+0x8e>
    7f84:	fb 01       	movw	r30, r22
    7f86:	93 83       	std	Z+3, r25	; 0x03
    7f88:	82 83       	std	Z+2, r24	; 0x02
    7f8a:	04 c0       	rjmp	.+8      	; 0x7f94 <malloc+0x96>
    7f8c:	90 93 cf 0d 	sts	0x0DCF, r25	; 0x800dcf <__flp+0x1>
    7f90:	80 93 ce 0d 	sts	0x0DCE, r24	; 0x800dce <__flp>
    7f94:	fe 01       	movw	r30, r28
    7f96:	32 96       	adiw	r30, 0x02	; 2
    7f98:	44 c0       	rjmp	.+136    	; 0x8022 <malloc+0x124>
    7f9a:	fe 01       	movw	r30, r28
    7f9c:	e2 0f       	add	r30, r18
    7f9e:	f3 1f       	adc	r31, r19
    7fa0:	81 93       	st	Z+, r24
    7fa2:	91 93       	st	Z+, r25
    7fa4:	22 50       	subi	r18, 0x02	; 2
    7fa6:	31 09       	sbc	r19, r1
    7fa8:	39 83       	std	Y+1, r19	; 0x01
    7faa:	28 83       	st	Y, r18
    7fac:	3a c0       	rjmp	.+116    	; 0x8022 <malloc+0x124>
    7fae:	20 91 cc 0d 	lds	r18, 0x0DCC	; 0x800dcc <__brkval>
    7fb2:	30 91 cd 0d 	lds	r19, 0x0DCD	; 0x800dcd <__brkval+0x1>
    7fb6:	23 2b       	or	r18, r19
    7fb8:	41 f4       	brne	.+16     	; 0x7fca <malloc+0xcc>
    7fba:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    7fbe:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    7fc2:	30 93 cd 0d 	sts	0x0DCD, r19	; 0x800dcd <__brkval+0x1>
    7fc6:	20 93 cc 0d 	sts	0x0DCC, r18	; 0x800dcc <__brkval>
    7fca:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    7fce:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    7fd2:	21 15       	cp	r18, r1
    7fd4:	31 05       	cpc	r19, r1
    7fd6:	41 f4       	brne	.+16     	; 0x7fe8 <malloc+0xea>
    7fd8:	2d b7       	in	r18, 0x3d	; 61
    7fda:	3e b7       	in	r19, 0x3e	; 62
    7fdc:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    7fe0:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    7fe4:	24 1b       	sub	r18, r20
    7fe6:	35 0b       	sbc	r19, r21
    7fe8:	e0 91 cc 0d 	lds	r30, 0x0DCC	; 0x800dcc <__brkval>
    7fec:	f0 91 cd 0d 	lds	r31, 0x0DCD	; 0x800dcd <__brkval+0x1>
    7ff0:	e2 17       	cp	r30, r18
    7ff2:	f3 07       	cpc	r31, r19
    7ff4:	a0 f4       	brcc	.+40     	; 0x801e <malloc+0x120>
    7ff6:	2e 1b       	sub	r18, r30
    7ff8:	3f 0b       	sbc	r19, r31
    7ffa:	28 17       	cp	r18, r24
    7ffc:	39 07       	cpc	r19, r25
    7ffe:	78 f0       	brcs	.+30     	; 0x801e <malloc+0x120>
    8000:	ac 01       	movw	r20, r24
    8002:	4e 5f       	subi	r20, 0xFE	; 254
    8004:	5f 4f       	sbci	r21, 0xFF	; 255
    8006:	24 17       	cp	r18, r20
    8008:	35 07       	cpc	r19, r21
    800a:	48 f0       	brcs	.+18     	; 0x801e <malloc+0x120>
    800c:	4e 0f       	add	r20, r30
    800e:	5f 1f       	adc	r21, r31
    8010:	50 93 cd 0d 	sts	0x0DCD, r21	; 0x800dcd <__brkval+0x1>
    8014:	40 93 cc 0d 	sts	0x0DCC, r20	; 0x800dcc <__brkval>
    8018:	81 93       	st	Z+, r24
    801a:	91 93       	st	Z+, r25
    801c:	02 c0       	rjmp	.+4      	; 0x8022 <malloc+0x124>
    801e:	e0 e0       	ldi	r30, 0x00	; 0
    8020:	f0 e0       	ldi	r31, 0x00	; 0
    8022:	cf 01       	movw	r24, r30
    8024:	df 91       	pop	r29
    8026:	cf 91       	pop	r28
    8028:	1f 91       	pop	r17
    802a:	0f 91       	pop	r16
    802c:	08 95       	ret

0000802e <free>:
    802e:	cf 93       	push	r28
    8030:	df 93       	push	r29
    8032:	00 97       	sbiw	r24, 0x00	; 0
    8034:	09 f4       	brne	.+2      	; 0x8038 <free+0xa>
    8036:	81 c0       	rjmp	.+258    	; 0x813a <free+0x10c>
    8038:	fc 01       	movw	r30, r24
    803a:	32 97       	sbiw	r30, 0x02	; 2
    803c:	13 82       	std	Z+3, r1	; 0x03
    803e:	12 82       	std	Z+2, r1	; 0x02
    8040:	a0 91 ce 0d 	lds	r26, 0x0DCE	; 0x800dce <__flp>
    8044:	b0 91 cf 0d 	lds	r27, 0x0DCF	; 0x800dcf <__flp+0x1>
    8048:	10 97       	sbiw	r26, 0x00	; 0
    804a:	81 f4       	brne	.+32     	; 0x806c <free+0x3e>
    804c:	20 81       	ld	r18, Z
    804e:	31 81       	ldd	r19, Z+1	; 0x01
    8050:	82 0f       	add	r24, r18
    8052:	93 1f       	adc	r25, r19
    8054:	20 91 cc 0d 	lds	r18, 0x0DCC	; 0x800dcc <__brkval>
    8058:	30 91 cd 0d 	lds	r19, 0x0DCD	; 0x800dcd <__brkval+0x1>
    805c:	28 17       	cp	r18, r24
    805e:	39 07       	cpc	r19, r25
    8060:	51 f5       	brne	.+84     	; 0x80b6 <free+0x88>
    8062:	f0 93 cd 0d 	sts	0x0DCD, r31	; 0x800dcd <__brkval+0x1>
    8066:	e0 93 cc 0d 	sts	0x0DCC, r30	; 0x800dcc <__brkval>
    806a:	67 c0       	rjmp	.+206    	; 0x813a <free+0x10c>
    806c:	ed 01       	movw	r28, r26
    806e:	20 e0       	ldi	r18, 0x00	; 0
    8070:	30 e0       	ldi	r19, 0x00	; 0
    8072:	ce 17       	cp	r28, r30
    8074:	df 07       	cpc	r29, r31
    8076:	40 f4       	brcc	.+16     	; 0x8088 <free+0x5a>
    8078:	4a 81       	ldd	r20, Y+2	; 0x02
    807a:	5b 81       	ldd	r21, Y+3	; 0x03
    807c:	9e 01       	movw	r18, r28
    807e:	41 15       	cp	r20, r1
    8080:	51 05       	cpc	r21, r1
    8082:	f1 f0       	breq	.+60     	; 0x80c0 <free+0x92>
    8084:	ea 01       	movw	r28, r20
    8086:	f5 cf       	rjmp	.-22     	; 0x8072 <free+0x44>
    8088:	d3 83       	std	Z+3, r29	; 0x03
    808a:	c2 83       	std	Z+2, r28	; 0x02
    808c:	40 81       	ld	r20, Z
    808e:	51 81       	ldd	r21, Z+1	; 0x01
    8090:	84 0f       	add	r24, r20
    8092:	95 1f       	adc	r25, r21
    8094:	c8 17       	cp	r28, r24
    8096:	d9 07       	cpc	r29, r25
    8098:	59 f4       	brne	.+22     	; 0x80b0 <free+0x82>
    809a:	88 81       	ld	r24, Y
    809c:	99 81       	ldd	r25, Y+1	; 0x01
    809e:	84 0f       	add	r24, r20
    80a0:	95 1f       	adc	r25, r21
    80a2:	02 96       	adiw	r24, 0x02	; 2
    80a4:	91 83       	std	Z+1, r25	; 0x01
    80a6:	80 83       	st	Z, r24
    80a8:	8a 81       	ldd	r24, Y+2	; 0x02
    80aa:	9b 81       	ldd	r25, Y+3	; 0x03
    80ac:	93 83       	std	Z+3, r25	; 0x03
    80ae:	82 83       	std	Z+2, r24	; 0x02
    80b0:	21 15       	cp	r18, r1
    80b2:	31 05       	cpc	r19, r1
    80b4:	29 f4       	brne	.+10     	; 0x80c0 <free+0x92>
    80b6:	f0 93 cf 0d 	sts	0x0DCF, r31	; 0x800dcf <__flp+0x1>
    80ba:	e0 93 ce 0d 	sts	0x0DCE, r30	; 0x800dce <__flp>
    80be:	3d c0       	rjmp	.+122    	; 0x813a <free+0x10c>
    80c0:	e9 01       	movw	r28, r18
    80c2:	fb 83       	std	Y+3, r31	; 0x03
    80c4:	ea 83       	std	Y+2, r30	; 0x02
    80c6:	49 91       	ld	r20, Y+
    80c8:	59 91       	ld	r21, Y+
    80ca:	c4 0f       	add	r28, r20
    80cc:	d5 1f       	adc	r29, r21
    80ce:	ec 17       	cp	r30, r28
    80d0:	fd 07       	cpc	r31, r29
    80d2:	61 f4       	brne	.+24     	; 0x80ec <free+0xbe>
    80d4:	80 81       	ld	r24, Z
    80d6:	91 81       	ldd	r25, Z+1	; 0x01
    80d8:	84 0f       	add	r24, r20
    80da:	95 1f       	adc	r25, r21
    80dc:	02 96       	adiw	r24, 0x02	; 2
    80de:	e9 01       	movw	r28, r18
    80e0:	99 83       	std	Y+1, r25	; 0x01
    80e2:	88 83       	st	Y, r24
    80e4:	82 81       	ldd	r24, Z+2	; 0x02
    80e6:	93 81       	ldd	r25, Z+3	; 0x03
    80e8:	9b 83       	std	Y+3, r25	; 0x03
    80ea:	8a 83       	std	Y+2, r24	; 0x02
    80ec:	e0 e0       	ldi	r30, 0x00	; 0
    80ee:	f0 e0       	ldi	r31, 0x00	; 0
    80f0:	12 96       	adiw	r26, 0x02	; 2
    80f2:	8d 91       	ld	r24, X+
    80f4:	9c 91       	ld	r25, X
    80f6:	13 97       	sbiw	r26, 0x03	; 3
    80f8:	00 97       	sbiw	r24, 0x00	; 0
    80fa:	19 f0       	breq	.+6      	; 0x8102 <free+0xd4>
    80fc:	fd 01       	movw	r30, r26
    80fe:	dc 01       	movw	r26, r24
    8100:	f7 cf       	rjmp	.-18     	; 0x80f0 <free+0xc2>
    8102:	8d 91       	ld	r24, X+
    8104:	9c 91       	ld	r25, X
    8106:	11 97       	sbiw	r26, 0x01	; 1
    8108:	9d 01       	movw	r18, r26
    810a:	2e 5f       	subi	r18, 0xFE	; 254
    810c:	3f 4f       	sbci	r19, 0xFF	; 255
    810e:	82 0f       	add	r24, r18
    8110:	93 1f       	adc	r25, r19
    8112:	20 91 cc 0d 	lds	r18, 0x0DCC	; 0x800dcc <__brkval>
    8116:	30 91 cd 0d 	lds	r19, 0x0DCD	; 0x800dcd <__brkval+0x1>
    811a:	28 17       	cp	r18, r24
    811c:	39 07       	cpc	r19, r25
    811e:	69 f4       	brne	.+26     	; 0x813a <free+0x10c>
    8120:	30 97       	sbiw	r30, 0x00	; 0
    8122:	29 f4       	brne	.+10     	; 0x812e <free+0x100>
    8124:	10 92 cf 0d 	sts	0x0DCF, r1	; 0x800dcf <__flp+0x1>
    8128:	10 92 ce 0d 	sts	0x0DCE, r1	; 0x800dce <__flp>
    812c:	02 c0       	rjmp	.+4      	; 0x8132 <free+0x104>
    812e:	13 82       	std	Z+3, r1	; 0x03
    8130:	12 82       	std	Z+2, r1	; 0x02
    8132:	b0 93 cd 0d 	sts	0x0DCD, r27	; 0x800dcd <__brkval+0x1>
    8136:	a0 93 cc 0d 	sts	0x0DCC, r26	; 0x800dcc <__brkval>
    813a:	df 91       	pop	r29
    813c:	cf 91       	pop	r28
    813e:	08 95       	ret

00008140 <realloc>:
    8140:	6f 92       	push	r6
    8142:	7f 92       	push	r7
    8144:	8f 92       	push	r8
    8146:	9f 92       	push	r9
    8148:	af 92       	push	r10
    814a:	bf 92       	push	r11
    814c:	cf 92       	push	r12
    814e:	df 92       	push	r13
    8150:	ef 92       	push	r14
    8152:	ff 92       	push	r15
    8154:	0f 93       	push	r16
    8156:	1f 93       	push	r17
    8158:	cf 93       	push	r28
    815a:	df 93       	push	r29
    815c:	00 97       	sbiw	r24, 0x00	; 0
    815e:	81 f4       	brne	.+32     	; 0x8180 <realloc+0x40>
    8160:	cb 01       	movw	r24, r22
    8162:	df 91       	pop	r29
    8164:	cf 91       	pop	r28
    8166:	1f 91       	pop	r17
    8168:	0f 91       	pop	r16
    816a:	ff 90       	pop	r15
    816c:	ef 90       	pop	r14
    816e:	df 90       	pop	r13
    8170:	cf 90       	pop	r12
    8172:	bf 90       	pop	r11
    8174:	af 90       	pop	r10
    8176:	9f 90       	pop	r9
    8178:	8f 90       	pop	r8
    817a:	7f 90       	pop	r7
    817c:	6f 90       	pop	r6
    817e:	bf ce       	rjmp	.-642    	; 0x7efe <malloc>
    8180:	fc 01       	movw	r30, r24
    8182:	e6 0f       	add	r30, r22
    8184:	f7 1f       	adc	r31, r23
    8186:	9c 01       	movw	r18, r24
    8188:	22 50       	subi	r18, 0x02	; 2
    818a:	31 09       	sbc	r19, r1
    818c:	e2 17       	cp	r30, r18
    818e:	f3 07       	cpc	r31, r19
    8190:	08 f4       	brcc	.+2      	; 0x8194 <realloc+0x54>
    8192:	a5 c0       	rjmp	.+330    	; 0x82de <realloc+0x19e>
    8194:	ec 01       	movw	r28, r24
    8196:	d9 01       	movw	r26, r18
    8198:	0d 91       	ld	r16, X+
    819a:	1c 91       	ld	r17, X
    819c:	11 97       	sbiw	r26, 0x01	; 1
    819e:	06 17       	cp	r16, r22
    81a0:	17 07       	cpc	r17, r23
    81a2:	a8 f0       	brcs	.+42     	; 0x81ce <realloc+0x8e>
    81a4:	05 30       	cpi	r16, 0x05	; 5
    81a6:	11 05       	cpc	r17, r1
    81a8:	08 f4       	brcc	.+2      	; 0x81ac <realloc+0x6c>
    81aa:	97 c0       	rjmp	.+302    	; 0x82da <realloc+0x19a>
    81ac:	c8 01       	movw	r24, r16
    81ae:	04 97       	sbiw	r24, 0x04	; 4
    81b0:	86 17       	cp	r24, r22
    81b2:	97 07       	cpc	r25, r23
    81b4:	08 f4       	brcc	.+2      	; 0x81b8 <realloc+0x78>
    81b6:	91 c0       	rjmp	.+290    	; 0x82da <realloc+0x19a>
    81b8:	02 50       	subi	r16, 0x02	; 2
    81ba:	11 09       	sbc	r17, r1
    81bc:	06 1b       	sub	r16, r22
    81be:	17 0b       	sbc	r17, r23
    81c0:	01 93       	st	Z+, r16
    81c2:	11 93       	st	Z+, r17
    81c4:	6d 93       	st	X+, r22
    81c6:	7c 93       	st	X, r23
    81c8:	cf 01       	movw	r24, r30
    81ca:	31 df       	rcall	.-414    	; 0x802e <free>
    81cc:	86 c0       	rjmp	.+268    	; 0x82da <realloc+0x19a>
    81ce:	5b 01       	movw	r10, r22
    81d0:	a0 1a       	sub	r10, r16
    81d2:	b1 0a       	sbc	r11, r17
    81d4:	4c 01       	movw	r8, r24
    81d6:	80 0e       	add	r8, r16
    81d8:	91 1e       	adc	r9, r17
    81da:	a0 91 ce 0d 	lds	r26, 0x0DCE	; 0x800dce <__flp>
    81de:	b0 91 cf 0d 	lds	r27, 0x0DCF	; 0x800dcf <__flp+0x1>
    81e2:	61 2c       	mov	r6, r1
    81e4:	71 2c       	mov	r7, r1
    81e6:	e1 2c       	mov	r14, r1
    81e8:	f1 2c       	mov	r15, r1
    81ea:	10 97       	sbiw	r26, 0x00	; 0
    81ec:	09 f4       	brne	.+2      	; 0x81f0 <realloc+0xb0>
    81ee:	46 c0       	rjmp	.+140    	; 0x827c <realloc+0x13c>
    81f0:	8d 91       	ld	r24, X+
    81f2:	9c 91       	ld	r25, X
    81f4:	11 97       	sbiw	r26, 0x01	; 1
    81f6:	a8 15       	cp	r26, r8
    81f8:	b9 05       	cpc	r27, r9
    81fa:	b1 f5       	brne	.+108    	; 0x8268 <realloc+0x128>
    81fc:	6c 01       	movw	r12, r24
    81fe:	42 e0       	ldi	r20, 0x02	; 2
    8200:	c4 0e       	add	r12, r20
    8202:	d1 1c       	adc	r13, r1
    8204:	ca 14       	cp	r12, r10
    8206:	db 04       	cpc	r13, r11
    8208:	78 f1       	brcs	.+94     	; 0x8268 <realloc+0x128>
    820a:	4c 01       	movw	r8, r24
    820c:	8a 18       	sub	r8, r10
    820e:	9b 08       	sbc	r9, r11
    8210:	64 01       	movw	r12, r8
    8212:	42 e0       	ldi	r20, 0x02	; 2
    8214:	c4 0e       	add	r12, r20
    8216:	d1 1c       	adc	r13, r1
    8218:	12 96       	adiw	r26, 0x02	; 2
    821a:	bc 90       	ld	r11, X
    821c:	12 97       	sbiw	r26, 0x02	; 2
    821e:	13 96       	adiw	r26, 0x03	; 3
    8220:	ac 91       	ld	r26, X
    8222:	b5 e0       	ldi	r27, 0x05	; 5
    8224:	cb 16       	cp	r12, r27
    8226:	d1 04       	cpc	r13, r1
    8228:	40 f0       	brcs	.+16     	; 0x823a <realloc+0xfa>
    822a:	b2 82       	std	Z+2, r11	; 0x02
    822c:	a3 83       	std	Z+3, r26	; 0x03
    822e:	91 82       	std	Z+1, r9	; 0x01
    8230:	80 82       	st	Z, r8
    8232:	d9 01       	movw	r26, r18
    8234:	6d 93       	st	X+, r22
    8236:	7c 93       	st	X, r23
    8238:	09 c0       	rjmp	.+18     	; 0x824c <realloc+0x10c>
    823a:	0e 5f       	subi	r16, 0xFE	; 254
    823c:	1f 4f       	sbci	r17, 0xFF	; 255
    823e:	80 0f       	add	r24, r16
    8240:	91 1f       	adc	r25, r17
    8242:	f9 01       	movw	r30, r18
    8244:	91 83       	std	Z+1, r25	; 0x01
    8246:	80 83       	st	Z, r24
    8248:	eb 2d       	mov	r30, r11
    824a:	fa 2f       	mov	r31, r26
    824c:	e1 14       	cp	r14, r1
    824e:	f1 04       	cpc	r15, r1
    8250:	31 f0       	breq	.+12     	; 0x825e <realloc+0x11e>
    8252:	d7 01       	movw	r26, r14
    8254:	13 96       	adiw	r26, 0x03	; 3
    8256:	fc 93       	st	X, r31
    8258:	ee 93       	st	-X, r30
    825a:	12 97       	sbiw	r26, 0x02	; 2
    825c:	3e c0       	rjmp	.+124    	; 0x82da <realloc+0x19a>
    825e:	f0 93 cf 0d 	sts	0x0DCF, r31	; 0x800dcf <__flp+0x1>
    8262:	e0 93 ce 0d 	sts	0x0DCE, r30	; 0x800dce <__flp>
    8266:	39 c0       	rjmp	.+114    	; 0x82da <realloc+0x19a>
    8268:	68 16       	cp	r6, r24
    826a:	79 06       	cpc	r7, r25
    826c:	08 f4       	brcc	.+2      	; 0x8270 <realloc+0x130>
    826e:	3c 01       	movw	r6, r24
    8270:	7d 01       	movw	r14, r26
    8272:	12 96       	adiw	r26, 0x02	; 2
    8274:	0d 90       	ld	r0, X+
    8276:	bc 91       	ld	r27, X
    8278:	a0 2d       	mov	r26, r0
    827a:	b7 cf       	rjmp	.-146    	; 0x81ea <realloc+0xaa>
    827c:	80 91 cc 0d 	lds	r24, 0x0DCC	; 0x800dcc <__brkval>
    8280:	90 91 cd 0d 	lds	r25, 0x0DCD	; 0x800dcd <__brkval+0x1>
    8284:	88 16       	cp	r8, r24
    8286:	99 06       	cpc	r9, r25
    8288:	e1 f4       	brne	.+56     	; 0x82c2 <realloc+0x182>
    828a:	66 16       	cp	r6, r22
    828c:	77 06       	cpc	r7, r23
    828e:	c8 f4       	brcc	.+50     	; 0x82c2 <realloc+0x182>
    8290:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    8294:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    8298:	00 97       	sbiw	r24, 0x00	; 0
    829a:	41 f4       	brne	.+16     	; 0x82ac <realloc+0x16c>
    829c:	8d b7       	in	r24, 0x3d	; 61
    829e:	9e b7       	in	r25, 0x3e	; 62
    82a0:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    82a4:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    82a8:	84 1b       	sub	r24, r20
    82aa:	95 0b       	sbc	r25, r21
    82ac:	e8 17       	cp	r30, r24
    82ae:	f9 07       	cpc	r31, r25
    82b0:	b0 f4       	brcc	.+44     	; 0x82de <realloc+0x19e>
    82b2:	f0 93 cd 0d 	sts	0x0DCD, r31	; 0x800dcd <__brkval+0x1>
    82b6:	e0 93 cc 0d 	sts	0x0DCC, r30	; 0x800dcc <__brkval>
    82ba:	f9 01       	movw	r30, r18
    82bc:	71 83       	std	Z+1, r23	; 0x01
    82be:	60 83       	st	Z, r22
    82c0:	0c c0       	rjmp	.+24     	; 0x82da <realloc+0x19a>
    82c2:	cb 01       	movw	r24, r22
    82c4:	1c de       	rcall	.-968    	; 0x7efe <malloc>
    82c6:	7c 01       	movw	r14, r24
    82c8:	00 97       	sbiw	r24, 0x00	; 0
    82ca:	49 f0       	breq	.+18     	; 0x82de <realloc+0x19e>
    82cc:	a8 01       	movw	r20, r16
    82ce:	be 01       	movw	r22, r28
    82d0:	52 d0       	rcall	.+164    	; 0x8376 <memcpy>
    82d2:	ce 01       	movw	r24, r28
    82d4:	ac de       	rcall	.-680    	; 0x802e <free>
    82d6:	c7 01       	movw	r24, r14
    82d8:	04 c0       	rjmp	.+8      	; 0x82e2 <realloc+0x1a2>
    82da:	ce 01       	movw	r24, r28
    82dc:	02 c0       	rjmp	.+4      	; 0x82e2 <realloc+0x1a2>
    82de:	80 e0       	ldi	r24, 0x00	; 0
    82e0:	90 e0       	ldi	r25, 0x00	; 0
    82e2:	df 91       	pop	r29
    82e4:	cf 91       	pop	r28
    82e6:	1f 91       	pop	r17
    82e8:	0f 91       	pop	r16
    82ea:	ff 90       	pop	r15
    82ec:	ef 90       	pop	r14
    82ee:	df 90       	pop	r13
    82f0:	cf 90       	pop	r12
    82f2:	bf 90       	pop	r11
    82f4:	af 90       	pop	r10
    82f6:	9f 90       	pop	r9
    82f8:	8f 90       	pop	r8
    82fa:	7f 90       	pop	r7
    82fc:	6f 90       	pop	r6
    82fe:	08 95       	ret

00008300 <abort>:
    8300:	81 e0       	ldi	r24, 0x01	; 1
    8302:	90 e0       	ldi	r25, 0x00	; 0
    8304:	f8 94       	cli
    8306:	5b c3       	rjmp	.+1718   	; 0x89be <__do_global_dtors>

00008308 <atol>:
    8308:	1f 93       	push	r17
    830a:	fc 01       	movw	r30, r24
    830c:	99 27       	eor	r25, r25
    830e:	88 27       	eor	r24, r24
    8310:	bc 01       	movw	r22, r24
    8312:	e8 94       	clt
    8314:	11 91       	ld	r17, Z+
    8316:	10 32       	cpi	r17, 0x20	; 32
    8318:	e9 f3       	breq	.-6      	; 0x8314 <atol+0xc>
    831a:	19 30       	cpi	r17, 0x09	; 9
    831c:	10 f0       	brcs	.+4      	; 0x8322 <atol+0x1a>
    831e:	1e 30       	cpi	r17, 0x0E	; 14
    8320:	c8 f3       	brcs	.-14     	; 0x8314 <atol+0xc>
    8322:	1b 32       	cpi	r17, 0x2B	; 43
    8324:	49 f0       	breq	.+18     	; 0x8338 <atol+0x30>
    8326:	1d 32       	cpi	r17, 0x2D	; 45
    8328:	41 f4       	brne	.+16     	; 0x833a <atol+0x32>
    832a:	68 94       	set
    832c:	05 c0       	rjmp	.+10     	; 0x8338 <atol+0x30>
    832e:	6d d0       	rcall	.+218    	; 0x840a <__mulsi_const_10>
    8330:	61 0f       	add	r22, r17
    8332:	71 1d       	adc	r23, r1
    8334:	81 1d       	adc	r24, r1
    8336:	91 1d       	adc	r25, r1
    8338:	11 91       	ld	r17, Z+
    833a:	10 53       	subi	r17, 0x30	; 48
    833c:	1a 30       	cpi	r17, 0x0A	; 10
    833e:	b8 f3       	brcs	.-18     	; 0x832e <atol+0x26>
    8340:	3e f4       	brtc	.+14     	; 0x8350 <atol+0x48>
    8342:	90 95       	com	r25
    8344:	80 95       	com	r24
    8346:	70 95       	com	r23
    8348:	61 95       	neg	r22
    834a:	7f 4f       	sbci	r23, 0xFF	; 255
    834c:	8f 4f       	sbci	r24, 0xFF	; 255
    834e:	9f 4f       	sbci	r25, 0xFF	; 255
    8350:	1f 91       	pop	r17
    8352:	08 95       	ret

00008354 <isspace>:
    8354:	91 11       	cpse	r25, r1
    8356:	0a c3       	rjmp	.+1556   	; 0x896c <__ctype_isfalse>
    8358:	80 32       	cpi	r24, 0x20	; 32
    835a:	19 f0       	breq	.+6      	; 0x8362 <isspace+0xe>
    835c:	89 50       	subi	r24, 0x09	; 9
    835e:	85 50       	subi	r24, 0x05	; 5
    8360:	d0 f7       	brcc	.-12     	; 0x8356 <isspace+0x2>
    8362:	08 95       	ret

00008364 <memcpy_P>:
    8364:	fb 01       	movw	r30, r22
    8366:	dc 01       	movw	r26, r24
    8368:	02 c0       	rjmp	.+4      	; 0x836e <memcpy_P+0xa>
    836a:	05 90       	lpm	r0, Z+
    836c:	0d 92       	st	X+, r0
    836e:	41 50       	subi	r20, 0x01	; 1
    8370:	50 40       	sbci	r21, 0x00	; 0
    8372:	d8 f7       	brcc	.-10     	; 0x836a <memcpy_P+0x6>
    8374:	08 95       	ret

00008376 <memcpy>:
    8376:	fb 01       	movw	r30, r22
    8378:	dc 01       	movw	r26, r24
    837a:	02 c0       	rjmp	.+4      	; 0x8380 <memcpy+0xa>
    837c:	01 90       	ld	r0, Z+
    837e:	0d 92       	st	X+, r0
    8380:	41 50       	subi	r20, 0x01	; 1
    8382:	50 40       	sbci	r21, 0x00	; 0
    8384:	d8 f7       	brcc	.-10     	; 0x837c <memcpy+0x6>
    8386:	08 95       	ret

00008388 <strcmp>:
    8388:	fb 01       	movw	r30, r22
    838a:	dc 01       	movw	r26, r24
    838c:	8d 91       	ld	r24, X+
    838e:	01 90       	ld	r0, Z+
    8390:	80 19       	sub	r24, r0
    8392:	01 10       	cpse	r0, r1
    8394:	d9 f3       	breq	.-10     	; 0x838c <strcmp+0x4>
    8396:	99 0b       	sbc	r25, r25
    8398:	08 95       	ret

0000839a <strcpy>:
    839a:	fb 01       	movw	r30, r22
    839c:	dc 01       	movw	r26, r24
    839e:	01 90       	ld	r0, Z+
    83a0:	0d 92       	st	X+, r0
    83a2:	00 20       	and	r0, r0
    83a4:	e1 f7       	brne	.-8      	; 0x839e <strcpy+0x4>
    83a6:	08 95       	ret

000083a8 <strncmp>:
    83a8:	fb 01       	movw	r30, r22
    83aa:	dc 01       	movw	r26, r24
    83ac:	41 50       	subi	r20, 0x01	; 1
    83ae:	50 40       	sbci	r21, 0x00	; 0
    83b0:	30 f0       	brcs	.+12     	; 0x83be <strncmp+0x16>
    83b2:	8d 91       	ld	r24, X+
    83b4:	01 90       	ld	r0, Z+
    83b6:	80 19       	sub	r24, r0
    83b8:	19 f4       	brne	.+6      	; 0x83c0 <strncmp+0x18>
    83ba:	00 20       	and	r0, r0
    83bc:	b9 f7       	brne	.-18     	; 0x83ac <strncmp+0x4>
    83be:	88 1b       	sub	r24, r24
    83c0:	99 0b       	sbc	r25, r25
    83c2:	08 95       	ret

000083c4 <strncpy>:
    83c4:	fb 01       	movw	r30, r22
    83c6:	dc 01       	movw	r26, r24
    83c8:	41 50       	subi	r20, 0x01	; 1
    83ca:	50 40       	sbci	r21, 0x00	; 0
    83cc:	48 f0       	brcs	.+18     	; 0x83e0 <strncpy+0x1c>
    83ce:	01 90       	ld	r0, Z+
    83d0:	0d 92       	st	X+, r0
    83d2:	00 20       	and	r0, r0
    83d4:	c9 f7       	brne	.-14     	; 0x83c8 <strncpy+0x4>
    83d6:	01 c0       	rjmp	.+2      	; 0x83da <strncpy+0x16>
    83d8:	1d 92       	st	X+, r1
    83da:	41 50       	subi	r20, 0x01	; 1
    83dc:	50 40       	sbci	r21, 0x00	; 0
    83de:	e0 f7       	brcc	.-8      	; 0x83d8 <strncpy+0x14>
    83e0:	08 95       	ret

000083e2 <itoa>:
    83e2:	45 32       	cpi	r20, 0x25	; 37
    83e4:	51 05       	cpc	r21, r1
    83e6:	18 f4       	brcc	.+6      	; 0x83ee <itoa+0xc>
    83e8:	42 30       	cpi	r20, 0x02	; 2
    83ea:	08 f0       	brcs	.+2      	; 0x83ee <itoa+0xc>
    83ec:	04 c0       	rjmp	.+8      	; 0x83f6 <__itoa_ncheck>
    83ee:	fb 01       	movw	r30, r22
    83f0:	10 82       	st	Z, r1
    83f2:	cb 01       	movw	r24, r22
    83f4:	08 95       	ret

000083f6 <__itoa_ncheck>:
    83f6:	bb 27       	eor	r27, r27
    83f8:	4a 30       	cpi	r20, 0x0A	; 10
    83fa:	31 f4       	brne	.+12     	; 0x8408 <__itoa_ncheck+0x12>
    83fc:	99 23       	and	r25, r25
    83fe:	22 f4       	brpl	.+8      	; 0x8408 <__itoa_ncheck+0x12>
    8400:	bd e2       	ldi	r27, 0x2D	; 45
    8402:	90 95       	com	r25
    8404:	81 95       	neg	r24
    8406:	9f 4f       	sbci	r25, 0xFF	; 255
    8408:	4b c0       	rjmp	.+150    	; 0x84a0 <__utoa_common>

0000840a <__mulsi_const_10>:
    840a:	59 2f       	mov	r21, r25
    840c:	48 2f       	mov	r20, r24
    840e:	37 2f       	mov	r19, r23
    8410:	26 2f       	mov	r18, r22
    8412:	66 0f       	add	r22, r22
    8414:	77 1f       	adc	r23, r23
    8416:	88 1f       	adc	r24, r24
    8418:	99 1f       	adc	r25, r25
    841a:	66 0f       	add	r22, r22
    841c:	77 1f       	adc	r23, r23
    841e:	88 1f       	adc	r24, r24
    8420:	99 1f       	adc	r25, r25
    8422:	62 0f       	add	r22, r18
    8424:	73 1f       	adc	r23, r19
    8426:	84 1f       	adc	r24, r20
    8428:	95 1f       	adc	r25, r21
    842a:	66 0f       	add	r22, r22
    842c:	77 1f       	adc	r23, r23
    842e:	88 1f       	adc	r24, r24
    8430:	99 1f       	adc	r25, r25
    8432:	08 95       	ret

00008434 <ultoa>:
    8434:	25 32       	cpi	r18, 0x25	; 37
    8436:	31 05       	cpc	r19, r1
    8438:	18 f4       	brcc	.+6      	; 0x8440 <ultoa+0xc>
    843a:	22 30       	cpi	r18, 0x02	; 2
    843c:	08 f0       	brcs	.+2      	; 0x8440 <ultoa+0xc>
    843e:	04 c0       	rjmp	.+8      	; 0x8448 <__ultoa_ncheck>
    8440:	fa 01       	movw	r30, r20
    8442:	10 82       	st	Z, r1
    8444:	ca 01       	movw	r24, r20
    8446:	08 95       	ret

00008448 <__ultoa_ncheck>:
    8448:	bb 27       	eor	r27, r27

0000844a <__ultoa_common>:
    844a:	fa 01       	movw	r30, r20
    844c:	a6 2f       	mov	r26, r22
    844e:	62 17       	cp	r22, r18
    8450:	71 05       	cpc	r23, r1
    8452:	81 05       	cpc	r24, r1
    8454:	91 05       	cpc	r25, r1
    8456:	33 0b       	sbc	r19, r19
    8458:	30 fb       	bst	r19, 0
    845a:	66 f0       	brts	.+24     	; 0x8474 <__ultoa_common+0x2a>
    845c:	aa 27       	eor	r26, r26
    845e:	66 0f       	add	r22, r22
    8460:	77 1f       	adc	r23, r23
    8462:	88 1f       	adc	r24, r24
    8464:	99 1f       	adc	r25, r25
    8466:	aa 1f       	adc	r26, r26
    8468:	a2 17       	cp	r26, r18
    846a:	10 f0       	brcs	.+4      	; 0x8470 <__ultoa_common+0x26>
    846c:	a2 1b       	sub	r26, r18
    846e:	63 95       	inc	r22
    8470:	38 50       	subi	r19, 0x08	; 8
    8472:	a9 f7       	brne	.-22     	; 0x845e <__ultoa_common+0x14>
    8474:	a0 5d       	subi	r26, 0xD0	; 208
    8476:	aa 33       	cpi	r26, 0x3A	; 58
    8478:	08 f0       	brcs	.+2      	; 0x847c <__ultoa_common+0x32>
    847a:	a9 5d       	subi	r26, 0xD9	; 217
    847c:	a1 93       	st	Z+, r26
    847e:	36 f7       	brtc	.-52     	; 0x844c <__ultoa_common+0x2>
    8480:	b1 11       	cpse	r27, r1
    8482:	b1 93       	st	Z+, r27
    8484:	10 82       	st	Z, r1
    8486:	ca 01       	movw	r24, r20
    8488:	74 c2       	rjmp	.+1256   	; 0x8972 <strrev>

0000848a <utoa>:
    848a:	45 32       	cpi	r20, 0x25	; 37
    848c:	51 05       	cpc	r21, r1
    848e:	18 f4       	brcc	.+6      	; 0x8496 <utoa+0xc>
    8490:	42 30       	cpi	r20, 0x02	; 2
    8492:	08 f0       	brcs	.+2      	; 0x8496 <utoa+0xc>
    8494:	04 c0       	rjmp	.+8      	; 0x849e <__utoa_ncheck>
    8496:	fb 01       	movw	r30, r22
    8498:	10 82       	st	Z, r1
    849a:	cb 01       	movw	r24, r22
    849c:	08 95       	ret

0000849e <__utoa_ncheck>:
    849e:	bb 27       	eor	r27, r27

000084a0 <__utoa_common>:
    84a0:	fb 01       	movw	r30, r22
    84a2:	55 27       	eor	r21, r21
    84a4:	aa 27       	eor	r26, r26
    84a6:	88 0f       	add	r24, r24
    84a8:	99 1f       	adc	r25, r25
    84aa:	aa 1f       	adc	r26, r26
    84ac:	a4 17       	cp	r26, r20
    84ae:	10 f0       	brcs	.+4      	; 0x84b4 <__utoa_common+0x14>
    84b0:	a4 1b       	sub	r26, r20
    84b2:	83 95       	inc	r24
    84b4:	50 51       	subi	r21, 0x10	; 16
    84b6:	b9 f7       	brne	.-18     	; 0x84a6 <__utoa_common+0x6>
    84b8:	a0 5d       	subi	r26, 0xD0	; 208
    84ba:	aa 33       	cpi	r26, 0x3A	; 58
    84bc:	08 f0       	brcs	.+2      	; 0x84c0 <__utoa_common+0x20>
    84be:	a9 5d       	subi	r26, 0xD9	; 217
    84c0:	a1 93       	st	Z+, r26
    84c2:	00 97       	sbiw	r24, 0x00	; 0
    84c4:	79 f7       	brne	.-34     	; 0x84a4 <__utoa_common+0x4>
    84c6:	b1 11       	cpse	r27, r1
    84c8:	b1 93       	st	Z+, r27
    84ca:	11 92       	st	Z+, r1
    84cc:	cb 01       	movw	r24, r22
    84ce:	51 c2       	rjmp	.+1186   	; 0x8972 <strrev>

000084d0 <dtoa_prf>:
    84d0:	8f 92       	push	r8
    84d2:	9f 92       	push	r9
    84d4:	af 92       	push	r10
    84d6:	bf 92       	push	r11
    84d8:	cf 92       	push	r12
    84da:	df 92       	push	r13
    84dc:	ef 92       	push	r14
    84de:	ff 92       	push	r15
    84e0:	0f 93       	push	r16
    84e2:	1f 93       	push	r17
    84e4:	cf 93       	push	r28
    84e6:	df 93       	push	r29
    84e8:	cd b7       	in	r28, 0x3d	; 61
    84ea:	de b7       	in	r29, 0x3e	; 62
    84ec:	29 97       	sbiw	r28, 0x09	; 9
    84ee:	0f b6       	in	r0, 0x3f	; 63
    84f0:	f8 94       	cli
    84f2:	de bf       	out	0x3e, r29	; 62
    84f4:	0f be       	out	0x3f, r0	; 63
    84f6:	cd bf       	out	0x3d, r28	; 61
    84f8:	6a 01       	movw	r12, r20
    84fa:	12 2f       	mov	r17, r18
    84fc:	b0 2e       	mov	r11, r16
    84fe:	2b e3       	ldi	r18, 0x3B	; 59
    8500:	20 17       	cp	r18, r16
    8502:	20 f0       	brcs	.+8      	; 0x850c <dtoa_prf+0x3c>
    8504:	ff 24       	eor	r15, r15
    8506:	f3 94       	inc	r15
    8508:	f0 0e       	add	r15, r16
    850a:	02 c0       	rjmp	.+4      	; 0x8510 <dtoa_prf+0x40>
    850c:	2c e3       	ldi	r18, 0x3C	; 60
    850e:	f2 2e       	mov	r15, r18
    8510:	0f 2d       	mov	r16, r15
    8512:	27 e0       	ldi	r18, 0x07	; 7
    8514:	ae 01       	movw	r20, r28
    8516:	4f 5f       	subi	r20, 0xFF	; 255
    8518:	5f 4f       	sbci	r21, 0xFF	; 255
    851a:	50 d1       	rcall	.+672    	; 0x87bc <__ftoa_engine>
    851c:	bc 01       	movw	r22, r24
    851e:	49 81       	ldd	r20, Y+1	; 0x01
    8520:	84 2f       	mov	r24, r20
    8522:	89 70       	andi	r24, 0x09	; 9
    8524:	81 30       	cpi	r24, 0x01	; 1
    8526:	31 f0       	breq	.+12     	; 0x8534 <dtoa_prf+0x64>
    8528:	e1 fc       	sbrc	r14, 1
    852a:	06 c0       	rjmp	.+12     	; 0x8538 <dtoa_prf+0x68>
    852c:	e0 fe       	sbrs	r14, 0
    852e:	06 c0       	rjmp	.+12     	; 0x853c <dtoa_prf+0x6c>
    8530:	90 e2       	ldi	r25, 0x20	; 32
    8532:	05 c0       	rjmp	.+10     	; 0x853e <dtoa_prf+0x6e>
    8534:	9d e2       	ldi	r25, 0x2D	; 45
    8536:	03 c0       	rjmp	.+6      	; 0x853e <dtoa_prf+0x6e>
    8538:	9b e2       	ldi	r25, 0x2B	; 43
    853a:	01 c0       	rjmp	.+2      	; 0x853e <dtoa_prf+0x6e>
    853c:	90 e0       	ldi	r25, 0x00	; 0
    853e:	5e 2d       	mov	r21, r14
    8540:	50 71       	andi	r21, 0x10	; 16
    8542:	43 ff       	sbrs	r20, 3
    8544:	3c c0       	rjmp	.+120    	; 0x85be <dtoa_prf+0xee>
    8546:	91 11       	cpse	r25, r1
    8548:	02 c0       	rjmp	.+4      	; 0x854e <dtoa_prf+0x7e>
    854a:	83 e0       	ldi	r24, 0x03	; 3
    854c:	01 c0       	rjmp	.+2      	; 0x8550 <dtoa_prf+0x80>
    854e:	84 e0       	ldi	r24, 0x04	; 4
    8550:	81 17       	cp	r24, r17
    8552:	18 f4       	brcc	.+6      	; 0x855a <dtoa_prf+0x8a>
    8554:	21 2f       	mov	r18, r17
    8556:	28 1b       	sub	r18, r24
    8558:	01 c0       	rjmp	.+2      	; 0x855c <dtoa_prf+0x8c>
    855a:	20 e0       	ldi	r18, 0x00	; 0
    855c:	51 11       	cpse	r21, r1
    855e:	0b c0       	rjmp	.+22     	; 0x8576 <dtoa_prf+0xa6>
    8560:	f6 01       	movw	r30, r12
    8562:	82 2f       	mov	r24, r18
    8564:	30 e2       	ldi	r19, 0x20	; 32
    8566:	88 23       	and	r24, r24
    8568:	19 f0       	breq	.+6      	; 0x8570 <dtoa_prf+0xa0>
    856a:	31 93       	st	Z+, r19
    856c:	81 50       	subi	r24, 0x01	; 1
    856e:	fb cf       	rjmp	.-10     	; 0x8566 <dtoa_prf+0x96>
    8570:	c2 0e       	add	r12, r18
    8572:	d1 1c       	adc	r13, r1
    8574:	20 e0       	ldi	r18, 0x00	; 0
    8576:	99 23       	and	r25, r25
    8578:	29 f0       	breq	.+10     	; 0x8584 <dtoa_prf+0xb4>
    857a:	d6 01       	movw	r26, r12
    857c:	9c 93       	st	X, r25
    857e:	f6 01       	movw	r30, r12
    8580:	31 96       	adiw	r30, 0x01	; 1
    8582:	6f 01       	movw	r12, r30
    8584:	c6 01       	movw	r24, r12
    8586:	03 96       	adiw	r24, 0x03	; 3
    8588:	e2 fe       	sbrs	r14, 2
    858a:	0a c0       	rjmp	.+20     	; 0x85a0 <dtoa_prf+0xd0>
    858c:	3e e4       	ldi	r19, 0x4E	; 78
    858e:	d6 01       	movw	r26, r12
    8590:	3c 93       	st	X, r19
    8592:	41 e4       	ldi	r20, 0x41	; 65
    8594:	11 96       	adiw	r26, 0x01	; 1
    8596:	4c 93       	st	X, r20
    8598:	11 97       	sbiw	r26, 0x01	; 1
    859a:	12 96       	adiw	r26, 0x02	; 2
    859c:	3c 93       	st	X, r19
    859e:	06 c0       	rjmp	.+12     	; 0x85ac <dtoa_prf+0xdc>
    85a0:	3e e6       	ldi	r19, 0x6E	; 110
    85a2:	f6 01       	movw	r30, r12
    85a4:	30 83       	st	Z, r19
    85a6:	41 e6       	ldi	r20, 0x61	; 97
    85a8:	41 83       	std	Z+1, r20	; 0x01
    85aa:	32 83       	std	Z+2, r19	; 0x02
    85ac:	fc 01       	movw	r30, r24
    85ae:	32 2f       	mov	r19, r18
    85b0:	40 e2       	ldi	r20, 0x20	; 32
    85b2:	33 23       	and	r19, r19
    85b4:	09 f4       	brne	.+2      	; 0x85b8 <dtoa_prf+0xe8>
    85b6:	42 c0       	rjmp	.+132    	; 0x863c <dtoa_prf+0x16c>
    85b8:	41 93       	st	Z+, r20
    85ba:	31 50       	subi	r19, 0x01	; 1
    85bc:	fa cf       	rjmp	.-12     	; 0x85b2 <dtoa_prf+0xe2>
    85be:	42 ff       	sbrs	r20, 2
    85c0:	44 c0       	rjmp	.+136    	; 0x864a <dtoa_prf+0x17a>
    85c2:	91 11       	cpse	r25, r1
    85c4:	02 c0       	rjmp	.+4      	; 0x85ca <dtoa_prf+0xfa>
    85c6:	83 e0       	ldi	r24, 0x03	; 3
    85c8:	01 c0       	rjmp	.+2      	; 0x85cc <dtoa_prf+0xfc>
    85ca:	84 e0       	ldi	r24, 0x04	; 4
    85cc:	81 17       	cp	r24, r17
    85ce:	18 f4       	brcc	.+6      	; 0x85d6 <dtoa_prf+0x106>
    85d0:	21 2f       	mov	r18, r17
    85d2:	28 1b       	sub	r18, r24
    85d4:	01 c0       	rjmp	.+2      	; 0x85d8 <dtoa_prf+0x108>
    85d6:	20 e0       	ldi	r18, 0x00	; 0
    85d8:	51 11       	cpse	r21, r1
    85da:	0b c0       	rjmp	.+22     	; 0x85f2 <dtoa_prf+0x122>
    85dc:	f6 01       	movw	r30, r12
    85de:	82 2f       	mov	r24, r18
    85e0:	30 e2       	ldi	r19, 0x20	; 32
    85e2:	88 23       	and	r24, r24
    85e4:	19 f0       	breq	.+6      	; 0x85ec <dtoa_prf+0x11c>
    85e6:	31 93       	st	Z+, r19
    85e8:	81 50       	subi	r24, 0x01	; 1
    85ea:	fb cf       	rjmp	.-10     	; 0x85e2 <dtoa_prf+0x112>
    85ec:	c2 0e       	add	r12, r18
    85ee:	d1 1c       	adc	r13, r1
    85f0:	20 e0       	ldi	r18, 0x00	; 0
    85f2:	99 23       	and	r25, r25
    85f4:	29 f0       	breq	.+10     	; 0x8600 <dtoa_prf+0x130>
    85f6:	d6 01       	movw	r26, r12
    85f8:	9c 93       	st	X, r25
    85fa:	f6 01       	movw	r30, r12
    85fc:	31 96       	adiw	r30, 0x01	; 1
    85fe:	6f 01       	movw	r12, r30
    8600:	c6 01       	movw	r24, r12
    8602:	03 96       	adiw	r24, 0x03	; 3
    8604:	e2 fe       	sbrs	r14, 2
    8606:	0b c0       	rjmp	.+22     	; 0x861e <dtoa_prf+0x14e>
    8608:	39 e4       	ldi	r19, 0x49	; 73
    860a:	d6 01       	movw	r26, r12
    860c:	3c 93       	st	X, r19
    860e:	3e e4       	ldi	r19, 0x4E	; 78
    8610:	11 96       	adiw	r26, 0x01	; 1
    8612:	3c 93       	st	X, r19
    8614:	11 97       	sbiw	r26, 0x01	; 1
    8616:	36 e4       	ldi	r19, 0x46	; 70
    8618:	12 96       	adiw	r26, 0x02	; 2
    861a:	3c 93       	st	X, r19
    861c:	07 c0       	rjmp	.+14     	; 0x862c <dtoa_prf+0x15c>
    861e:	39 e6       	ldi	r19, 0x69	; 105
    8620:	f6 01       	movw	r30, r12
    8622:	30 83       	st	Z, r19
    8624:	3e e6       	ldi	r19, 0x6E	; 110
    8626:	31 83       	std	Z+1, r19	; 0x01
    8628:	36 e6       	ldi	r19, 0x66	; 102
    862a:	32 83       	std	Z+2, r19	; 0x02
    862c:	fc 01       	movw	r30, r24
    862e:	32 2f       	mov	r19, r18
    8630:	40 e2       	ldi	r20, 0x20	; 32
    8632:	33 23       	and	r19, r19
    8634:	19 f0       	breq	.+6      	; 0x863c <dtoa_prf+0x16c>
    8636:	41 93       	st	Z+, r20
    8638:	31 50       	subi	r19, 0x01	; 1
    863a:	fb cf       	rjmp	.-10     	; 0x8632 <dtoa_prf+0x162>
    863c:	fc 01       	movw	r30, r24
    863e:	e2 0f       	add	r30, r18
    8640:	f1 1d       	adc	r31, r1
    8642:	10 82       	st	Z, r1
    8644:	8e ef       	ldi	r24, 0xFE	; 254
    8646:	9f ef       	ldi	r25, 0xFF	; 255
    8648:	a6 c0       	rjmp	.+332    	; 0x8796 <dtoa_prf+0x2c6>
    864a:	21 e0       	ldi	r18, 0x01	; 1
    864c:	30 e0       	ldi	r19, 0x00	; 0
    864e:	91 11       	cpse	r25, r1
    8650:	02 c0       	rjmp	.+4      	; 0x8656 <dtoa_prf+0x186>
    8652:	20 e0       	ldi	r18, 0x00	; 0
    8654:	30 e0       	ldi	r19, 0x00	; 0
    8656:	16 16       	cp	r1, r22
    8658:	17 06       	cpc	r1, r23
    865a:	1c f4       	brge	.+6      	; 0x8662 <dtoa_prf+0x192>
    865c:	fb 01       	movw	r30, r22
    865e:	31 96       	adiw	r30, 0x01	; 1
    8660:	02 c0       	rjmp	.+4      	; 0x8666 <dtoa_prf+0x196>
    8662:	e1 e0       	ldi	r30, 0x01	; 1
    8664:	f0 e0       	ldi	r31, 0x00	; 0
    8666:	2e 0f       	add	r18, r30
    8668:	3f 1f       	adc	r19, r31
    866a:	bb 20       	and	r11, r11
    866c:	21 f0       	breq	.+8      	; 0x8676 <dtoa_prf+0x1a6>
    866e:	eb 2d       	mov	r30, r11
    8670:	f0 e0       	ldi	r31, 0x00	; 0
    8672:	31 96       	adiw	r30, 0x01	; 1
    8674:	02 c0       	rjmp	.+4      	; 0x867a <dtoa_prf+0x1aa>
    8676:	e0 e0       	ldi	r30, 0x00	; 0
    8678:	f0 e0       	ldi	r31, 0x00	; 0
    867a:	2e 0f       	add	r18, r30
    867c:	3f 1f       	adc	r19, r31
    867e:	e1 2f       	mov	r30, r17
    8680:	f0 e0       	ldi	r31, 0x00	; 0
    8682:	2e 17       	cp	r18, r30
    8684:	3f 07       	cpc	r19, r31
    8686:	1c f4       	brge	.+6      	; 0x868e <dtoa_prf+0x1be>
    8688:	12 1b       	sub	r17, r18
    868a:	21 2f       	mov	r18, r17
    868c:	01 c0       	rjmp	.+2      	; 0x8690 <dtoa_prf+0x1c0>
    868e:	20 e0       	ldi	r18, 0x00	; 0
    8690:	8e 2d       	mov	r24, r14
    8692:	88 71       	andi	r24, 0x18	; 24
    8694:	59 f4       	brne	.+22     	; 0x86ac <dtoa_prf+0x1dc>
    8696:	f6 01       	movw	r30, r12
    8698:	82 2f       	mov	r24, r18
    869a:	30 e2       	ldi	r19, 0x20	; 32
    869c:	88 23       	and	r24, r24
    869e:	19 f0       	breq	.+6      	; 0x86a6 <dtoa_prf+0x1d6>
    86a0:	31 93       	st	Z+, r19
    86a2:	81 50       	subi	r24, 0x01	; 1
    86a4:	fb cf       	rjmp	.-10     	; 0x869c <dtoa_prf+0x1cc>
    86a6:	c2 0e       	add	r12, r18
    86a8:	d1 1c       	adc	r13, r1
    86aa:	20 e0       	ldi	r18, 0x00	; 0
    86ac:	99 23       	and	r25, r25
    86ae:	29 f0       	breq	.+10     	; 0x86ba <dtoa_prf+0x1ea>
    86b0:	d6 01       	movw	r26, r12
    86b2:	9c 93       	st	X, r25
    86b4:	f6 01       	movw	r30, r12
    86b6:	31 96       	adiw	r30, 0x01	; 1
    86b8:	6f 01       	movw	r12, r30
    86ba:	51 11       	cpse	r21, r1
    86bc:	0b c0       	rjmp	.+22     	; 0x86d4 <dtoa_prf+0x204>
    86be:	f6 01       	movw	r30, r12
    86c0:	82 2f       	mov	r24, r18
    86c2:	90 e3       	ldi	r25, 0x30	; 48
    86c4:	88 23       	and	r24, r24
    86c6:	19 f0       	breq	.+6      	; 0x86ce <dtoa_prf+0x1fe>
    86c8:	91 93       	st	Z+, r25
    86ca:	81 50       	subi	r24, 0x01	; 1
    86cc:	fb cf       	rjmp	.-10     	; 0x86c4 <dtoa_prf+0x1f4>
    86ce:	c2 0e       	add	r12, r18
    86d0:	d1 1c       	adc	r13, r1
    86d2:	20 e0       	ldi	r18, 0x00	; 0
    86d4:	0f 2d       	mov	r16, r15
    86d6:	06 0f       	add	r16, r22
    86d8:	9a 81       	ldd	r25, Y+2	; 0x02
    86da:	34 2f       	mov	r19, r20
    86dc:	30 71       	andi	r19, 0x10	; 16
    86de:	44 ff       	sbrs	r20, 4
    86e0:	03 c0       	rjmp	.+6      	; 0x86e8 <dtoa_prf+0x218>
    86e2:	91 33       	cpi	r25, 0x31	; 49
    86e4:	09 f4       	brne	.+2      	; 0x86e8 <dtoa_prf+0x218>
    86e6:	01 50       	subi	r16, 0x01	; 1
    86e8:	10 16       	cp	r1, r16
    86ea:	24 f4       	brge	.+8      	; 0x86f4 <dtoa_prf+0x224>
    86ec:	09 30       	cpi	r16, 0x09	; 9
    86ee:	18 f0       	brcs	.+6      	; 0x86f6 <dtoa_prf+0x226>
    86f0:	08 e0       	ldi	r16, 0x08	; 8
    86f2:	01 c0       	rjmp	.+2      	; 0x86f6 <dtoa_prf+0x226>
    86f4:	01 e0       	ldi	r16, 0x01	; 1
    86f6:	ab 01       	movw	r20, r22
    86f8:	77 ff       	sbrs	r23, 7
    86fa:	02 c0       	rjmp	.+4      	; 0x8700 <dtoa_prf+0x230>
    86fc:	40 e0       	ldi	r20, 0x00	; 0
    86fe:	50 e0       	ldi	r21, 0x00	; 0
    8700:	fb 01       	movw	r30, r22
    8702:	e4 1b       	sub	r30, r20
    8704:	f5 0b       	sbc	r31, r21
    8706:	a1 e0       	ldi	r26, 0x01	; 1
    8708:	b0 e0       	ldi	r27, 0x00	; 0
    870a:	ac 0f       	add	r26, r28
    870c:	bd 1f       	adc	r27, r29
    870e:	ea 0f       	add	r30, r26
    8710:	fb 1f       	adc	r31, r27
    8712:	8e e2       	ldi	r24, 0x2E	; 46
    8714:	a8 2e       	mov	r10, r24
    8716:	4b 01       	movw	r8, r22
    8718:	80 1a       	sub	r8, r16
    871a:	91 08       	sbc	r9, r1
    871c:	0b 2d       	mov	r16, r11
    871e:	10 e0       	ldi	r17, 0x00	; 0
    8720:	11 95       	neg	r17
    8722:	01 95       	neg	r16
    8724:	11 09       	sbc	r17, r1
    8726:	4f 3f       	cpi	r20, 0xFF	; 255
    8728:	bf ef       	ldi	r27, 0xFF	; 255
    872a:	5b 07       	cpc	r21, r27
    872c:	21 f4       	brne	.+8      	; 0x8736 <dtoa_prf+0x266>
    872e:	d6 01       	movw	r26, r12
    8730:	ac 92       	st	X, r10
    8732:	11 96       	adiw	r26, 0x01	; 1
    8734:	6d 01       	movw	r12, r26
    8736:	64 17       	cp	r22, r20
    8738:	75 07       	cpc	r23, r21
    873a:	2c f0       	brlt	.+10     	; 0x8746 <dtoa_prf+0x276>
    873c:	84 16       	cp	r8, r20
    873e:	95 06       	cpc	r9, r21
    8740:	14 f4       	brge	.+4      	; 0x8746 <dtoa_prf+0x276>
    8742:	81 81       	ldd	r24, Z+1	; 0x01
    8744:	01 c0       	rjmp	.+2      	; 0x8748 <dtoa_prf+0x278>
    8746:	80 e3       	ldi	r24, 0x30	; 48
    8748:	41 50       	subi	r20, 0x01	; 1
    874a:	51 09       	sbc	r21, r1
    874c:	31 96       	adiw	r30, 0x01	; 1
    874e:	d6 01       	movw	r26, r12
    8750:	11 96       	adiw	r26, 0x01	; 1
    8752:	7d 01       	movw	r14, r26
    8754:	40 17       	cp	r20, r16
    8756:	51 07       	cpc	r21, r17
    8758:	24 f0       	brlt	.+8      	; 0x8762 <dtoa_prf+0x292>
    875a:	d6 01       	movw	r26, r12
    875c:	8c 93       	st	X, r24
    875e:	67 01       	movw	r12, r14
    8760:	e2 cf       	rjmp	.-60     	; 0x8726 <dtoa_prf+0x256>
    8762:	64 17       	cp	r22, r20
    8764:	75 07       	cpc	r23, r21
    8766:	39 f4       	brne	.+14     	; 0x8776 <dtoa_prf+0x2a6>
    8768:	96 33       	cpi	r25, 0x36	; 54
    876a:	20 f4       	brcc	.+8      	; 0x8774 <dtoa_prf+0x2a4>
    876c:	95 33       	cpi	r25, 0x35	; 53
    876e:	19 f4       	brne	.+6      	; 0x8776 <dtoa_prf+0x2a6>
    8770:	31 11       	cpse	r19, r1
    8772:	01 c0       	rjmp	.+2      	; 0x8776 <dtoa_prf+0x2a6>
    8774:	81 e3       	ldi	r24, 0x31	; 49
    8776:	f6 01       	movw	r30, r12
    8778:	80 83       	st	Z, r24
    877a:	f7 01       	movw	r30, r14
    877c:	82 2f       	mov	r24, r18
    877e:	90 e2       	ldi	r25, 0x20	; 32
    8780:	88 23       	and	r24, r24
    8782:	19 f0       	breq	.+6      	; 0x878a <dtoa_prf+0x2ba>
    8784:	91 93       	st	Z+, r25
    8786:	81 50       	subi	r24, 0x01	; 1
    8788:	fb cf       	rjmp	.-10     	; 0x8780 <dtoa_prf+0x2b0>
    878a:	f7 01       	movw	r30, r14
    878c:	e2 0f       	add	r30, r18
    878e:	f1 1d       	adc	r31, r1
    8790:	10 82       	st	Z, r1
    8792:	80 e0       	ldi	r24, 0x00	; 0
    8794:	90 e0       	ldi	r25, 0x00	; 0
    8796:	29 96       	adiw	r28, 0x09	; 9
    8798:	0f b6       	in	r0, 0x3f	; 63
    879a:	f8 94       	cli
    879c:	de bf       	out	0x3e, r29	; 62
    879e:	0f be       	out	0x3f, r0	; 63
    87a0:	cd bf       	out	0x3d, r28	; 61
    87a2:	df 91       	pop	r29
    87a4:	cf 91       	pop	r28
    87a6:	1f 91       	pop	r17
    87a8:	0f 91       	pop	r16
    87aa:	ff 90       	pop	r15
    87ac:	ef 90       	pop	r14
    87ae:	df 90       	pop	r13
    87b0:	cf 90       	pop	r12
    87b2:	bf 90       	pop	r11
    87b4:	af 90       	pop	r10
    87b6:	9f 90       	pop	r9
    87b8:	8f 90       	pop	r8
    87ba:	08 95       	ret

000087bc <__ftoa_engine>:
    87bc:	28 30       	cpi	r18, 0x08	; 8
    87be:	08 f0       	brcs	.+2      	; 0x87c2 <__ftoa_engine+0x6>
    87c0:	27 e0       	ldi	r18, 0x07	; 7
    87c2:	33 27       	eor	r19, r19
    87c4:	da 01       	movw	r26, r20
    87c6:	99 0f       	add	r25, r25
    87c8:	31 1d       	adc	r19, r1
    87ca:	87 fd       	sbrc	r24, 7
    87cc:	91 60       	ori	r25, 0x01	; 1
    87ce:	00 96       	adiw	r24, 0x00	; 0
    87d0:	61 05       	cpc	r22, r1
    87d2:	71 05       	cpc	r23, r1
    87d4:	39 f4       	brne	.+14     	; 0x87e4 <__ftoa_engine+0x28>
    87d6:	32 60       	ori	r19, 0x02	; 2
    87d8:	2e 5f       	subi	r18, 0xFE	; 254
    87da:	3d 93       	st	X+, r19
    87dc:	30 e3       	ldi	r19, 0x30	; 48
    87de:	2a 95       	dec	r18
    87e0:	e1 f7       	brne	.-8      	; 0x87da <__ftoa_engine+0x1e>
    87e2:	08 95       	ret
    87e4:	9f 3f       	cpi	r25, 0xFF	; 255
    87e6:	30 f0       	brcs	.+12     	; 0x87f4 <__ftoa_engine+0x38>
    87e8:	80 38       	cpi	r24, 0x80	; 128
    87ea:	71 05       	cpc	r23, r1
    87ec:	61 05       	cpc	r22, r1
    87ee:	09 f0       	breq	.+2      	; 0x87f2 <__ftoa_engine+0x36>
    87f0:	3c 5f       	subi	r19, 0xFC	; 252
    87f2:	3c 5f       	subi	r19, 0xFC	; 252
    87f4:	3d 93       	st	X+, r19
    87f6:	91 30       	cpi	r25, 0x01	; 1
    87f8:	08 f0       	brcs	.+2      	; 0x87fc <__ftoa_engine+0x40>
    87fa:	80 68       	ori	r24, 0x80	; 128
    87fc:	91 1d       	adc	r25, r1
    87fe:	df 93       	push	r29
    8800:	cf 93       	push	r28
    8802:	1f 93       	push	r17
    8804:	0f 93       	push	r16
    8806:	ff 92       	push	r15
    8808:	ef 92       	push	r14
    880a:	19 2f       	mov	r17, r25
    880c:	98 7f       	andi	r25, 0xF8	; 248
    880e:	96 95       	lsr	r25
    8810:	e9 2f       	mov	r30, r25
    8812:	96 95       	lsr	r25
    8814:	96 95       	lsr	r25
    8816:	e9 0f       	add	r30, r25
    8818:	ff 27       	eor	r31, r31
    881a:	ee 5d       	subi	r30, 0xDE	; 222
    881c:	fe 4f       	sbci	r31, 0xFE	; 254
    881e:	99 27       	eor	r25, r25
    8820:	33 27       	eor	r19, r19
    8822:	ee 24       	eor	r14, r14
    8824:	ff 24       	eor	r15, r15
    8826:	a7 01       	movw	r20, r14
    8828:	e7 01       	movw	r28, r14
    882a:	05 90       	lpm	r0, Z+
    882c:	08 94       	sec
    882e:	07 94       	ror	r0
    8830:	28 f4       	brcc	.+10     	; 0x883c <__ftoa_engine+0x80>
    8832:	36 0f       	add	r19, r22
    8834:	e7 1e       	adc	r14, r23
    8836:	f8 1e       	adc	r15, r24
    8838:	49 1f       	adc	r20, r25
    883a:	51 1d       	adc	r21, r1
    883c:	66 0f       	add	r22, r22
    883e:	77 1f       	adc	r23, r23
    8840:	88 1f       	adc	r24, r24
    8842:	99 1f       	adc	r25, r25
    8844:	06 94       	lsr	r0
    8846:	a1 f7       	brne	.-24     	; 0x8830 <__ftoa_engine+0x74>
    8848:	05 90       	lpm	r0, Z+
    884a:	07 94       	ror	r0
    884c:	28 f4       	brcc	.+10     	; 0x8858 <__ftoa_engine+0x9c>
    884e:	e7 0e       	add	r14, r23
    8850:	f8 1e       	adc	r15, r24
    8852:	49 1f       	adc	r20, r25
    8854:	56 1f       	adc	r21, r22
    8856:	c1 1d       	adc	r28, r1
    8858:	77 0f       	add	r23, r23
    885a:	88 1f       	adc	r24, r24
    885c:	99 1f       	adc	r25, r25
    885e:	66 1f       	adc	r22, r22
    8860:	06 94       	lsr	r0
    8862:	a1 f7       	brne	.-24     	; 0x884c <__ftoa_engine+0x90>
    8864:	05 90       	lpm	r0, Z+
    8866:	07 94       	ror	r0
    8868:	28 f4       	brcc	.+10     	; 0x8874 <__ftoa_engine+0xb8>
    886a:	f8 0e       	add	r15, r24
    886c:	49 1f       	adc	r20, r25
    886e:	56 1f       	adc	r21, r22
    8870:	c7 1f       	adc	r28, r23
    8872:	d1 1d       	adc	r29, r1
    8874:	88 0f       	add	r24, r24
    8876:	99 1f       	adc	r25, r25
    8878:	66 1f       	adc	r22, r22
    887a:	77 1f       	adc	r23, r23
    887c:	06 94       	lsr	r0
    887e:	a1 f7       	brne	.-24     	; 0x8868 <__ftoa_engine+0xac>
    8880:	05 90       	lpm	r0, Z+
    8882:	07 94       	ror	r0
    8884:	20 f4       	brcc	.+8      	; 0x888e <__ftoa_engine+0xd2>
    8886:	49 0f       	add	r20, r25
    8888:	56 1f       	adc	r21, r22
    888a:	c7 1f       	adc	r28, r23
    888c:	d8 1f       	adc	r29, r24
    888e:	99 0f       	add	r25, r25
    8890:	66 1f       	adc	r22, r22
    8892:	77 1f       	adc	r23, r23
    8894:	88 1f       	adc	r24, r24
    8896:	06 94       	lsr	r0
    8898:	a9 f7       	brne	.-22     	; 0x8884 <__ftoa_engine+0xc8>
    889a:	84 91       	lpm	r24, Z
    889c:	10 95       	com	r17
    889e:	17 70       	andi	r17, 0x07	; 7
    88a0:	41 f0       	breq	.+16     	; 0x88b2 <__ftoa_engine+0xf6>
    88a2:	d6 95       	lsr	r29
    88a4:	c7 95       	ror	r28
    88a6:	57 95       	ror	r21
    88a8:	47 95       	ror	r20
    88aa:	f7 94       	ror	r15
    88ac:	e7 94       	ror	r14
    88ae:	1a 95       	dec	r17
    88b0:	c1 f7       	brne	.-16     	; 0x88a2 <__ftoa_engine+0xe6>
    88b2:	e8 ec       	ldi	r30, 0xC8	; 200
    88b4:	f0 e0       	ldi	r31, 0x00	; 0
    88b6:	68 94       	set
    88b8:	15 90       	lpm	r1, Z+
    88ba:	15 91       	lpm	r17, Z+
    88bc:	35 91       	lpm	r19, Z+
    88be:	65 91       	lpm	r22, Z+
    88c0:	95 91       	lpm	r25, Z+
    88c2:	05 90       	lpm	r0, Z+
    88c4:	7f e2       	ldi	r23, 0x2F	; 47
    88c6:	73 95       	inc	r23
    88c8:	e1 18       	sub	r14, r1
    88ca:	f1 0a       	sbc	r15, r17
    88cc:	43 0b       	sbc	r20, r19
    88ce:	56 0b       	sbc	r21, r22
    88d0:	c9 0b       	sbc	r28, r25
    88d2:	d0 09       	sbc	r29, r0
    88d4:	c0 f7       	brcc	.-16     	; 0x88c6 <__ftoa_engine+0x10a>
    88d6:	e1 0c       	add	r14, r1
    88d8:	f1 1e       	adc	r15, r17
    88da:	43 1f       	adc	r20, r19
    88dc:	56 1f       	adc	r21, r22
    88de:	c9 1f       	adc	r28, r25
    88e0:	d0 1d       	adc	r29, r0
    88e2:	7e f4       	brtc	.+30     	; 0x8902 <__ftoa_engine+0x146>
    88e4:	70 33       	cpi	r23, 0x30	; 48
    88e6:	11 f4       	brne	.+4      	; 0x88ec <__ftoa_engine+0x130>
    88e8:	8a 95       	dec	r24
    88ea:	e6 cf       	rjmp	.-52     	; 0x88b8 <__ftoa_engine+0xfc>
    88ec:	e8 94       	clt
    88ee:	01 50       	subi	r16, 0x01	; 1
    88f0:	30 f0       	brcs	.+12     	; 0x88fe <__ftoa_engine+0x142>
    88f2:	08 0f       	add	r16, r24
    88f4:	0a f4       	brpl	.+2      	; 0x88f8 <__ftoa_engine+0x13c>
    88f6:	00 27       	eor	r16, r16
    88f8:	02 17       	cp	r16, r18
    88fa:	08 f4       	brcc	.+2      	; 0x88fe <__ftoa_engine+0x142>
    88fc:	20 2f       	mov	r18, r16
    88fe:	23 95       	inc	r18
    8900:	02 2f       	mov	r16, r18
    8902:	7a 33       	cpi	r23, 0x3A	; 58
    8904:	28 f0       	brcs	.+10     	; 0x8910 <__ftoa_engine+0x154>
    8906:	79 e3       	ldi	r23, 0x39	; 57
    8908:	7d 93       	st	X+, r23
    890a:	2a 95       	dec	r18
    890c:	e9 f7       	brne	.-6      	; 0x8908 <__ftoa_engine+0x14c>
    890e:	10 c0       	rjmp	.+32     	; 0x8930 <__ftoa_engine+0x174>
    8910:	7d 93       	st	X+, r23
    8912:	2a 95       	dec	r18
    8914:	89 f6       	brne	.-94     	; 0x88b8 <__ftoa_engine+0xfc>
    8916:	06 94       	lsr	r0
    8918:	97 95       	ror	r25
    891a:	67 95       	ror	r22
    891c:	37 95       	ror	r19
    891e:	17 95       	ror	r17
    8920:	17 94       	ror	r1
    8922:	e1 18       	sub	r14, r1
    8924:	f1 0a       	sbc	r15, r17
    8926:	43 0b       	sbc	r20, r19
    8928:	56 0b       	sbc	r21, r22
    892a:	c9 0b       	sbc	r28, r25
    892c:	d0 09       	sbc	r29, r0
    892e:	98 f0       	brcs	.+38     	; 0x8956 <__ftoa_engine+0x19a>
    8930:	23 95       	inc	r18
    8932:	7e 91       	ld	r23, -X
    8934:	73 95       	inc	r23
    8936:	7a 33       	cpi	r23, 0x3A	; 58
    8938:	08 f0       	brcs	.+2      	; 0x893c <__ftoa_engine+0x180>
    893a:	70 e3       	ldi	r23, 0x30	; 48
    893c:	7c 93       	st	X, r23
    893e:	20 13       	cpse	r18, r16
    8940:	b8 f7       	brcc	.-18     	; 0x8930 <__ftoa_engine+0x174>
    8942:	7e 91       	ld	r23, -X
    8944:	70 61       	ori	r23, 0x10	; 16
    8946:	7d 93       	st	X+, r23
    8948:	30 f0       	brcs	.+12     	; 0x8956 <__ftoa_engine+0x19a>
    894a:	83 95       	inc	r24
    894c:	71 e3       	ldi	r23, 0x31	; 49
    894e:	7d 93       	st	X+, r23
    8950:	70 e3       	ldi	r23, 0x30	; 48
    8952:	2a 95       	dec	r18
    8954:	e1 f7       	brne	.-8      	; 0x894e <__ftoa_engine+0x192>
    8956:	11 24       	eor	r1, r1
    8958:	ef 90       	pop	r14
    895a:	ff 90       	pop	r15
    895c:	0f 91       	pop	r16
    895e:	1f 91       	pop	r17
    8960:	cf 91       	pop	r28
    8962:	df 91       	pop	r29
    8964:	99 27       	eor	r25, r25
    8966:	87 fd       	sbrc	r24, 7
    8968:	90 95       	com	r25
    896a:	08 95       	ret

0000896c <__ctype_isfalse>:
    896c:	99 27       	eor	r25, r25
    896e:	88 27       	eor	r24, r24

00008970 <__ctype_istrue>:
    8970:	08 95       	ret

00008972 <strrev>:
    8972:	dc 01       	movw	r26, r24
    8974:	fc 01       	movw	r30, r24
    8976:	67 2f       	mov	r22, r23
    8978:	71 91       	ld	r23, Z+
    897a:	77 23       	and	r23, r23
    897c:	e1 f7       	brne	.-8      	; 0x8976 <strrev+0x4>
    897e:	32 97       	sbiw	r30, 0x02	; 2
    8980:	04 c0       	rjmp	.+8      	; 0x898a <strrev+0x18>
    8982:	7c 91       	ld	r23, X
    8984:	6d 93       	st	X+, r22
    8986:	70 83       	st	Z, r23
    8988:	62 91       	ld	r22, -Z
    898a:	ae 17       	cp	r26, r30
    898c:	bf 07       	cpc	r27, r31
    898e:	c8 f3       	brcs	.-14     	; 0x8982 <strrev+0x10>
    8990:	08 95       	ret

00008992 <eeprom_read_byte>:
    8992:	f9 99       	sbic	0x1f, 1	; 31
    8994:	fe cf       	rjmp	.-4      	; 0x8992 <eeprom_read_byte>
    8996:	92 bd       	out	0x22, r25	; 34
    8998:	81 bd       	out	0x21, r24	; 33
    899a:	f8 9a       	sbi	0x1f, 0	; 31
    899c:	99 27       	eor	r25, r25
    899e:	80 b5       	in	r24, 0x20	; 32
    89a0:	08 95       	ret

000089a2 <eeprom_write_byte>:
    89a2:	26 2f       	mov	r18, r22

000089a4 <eeprom_write_r18>:
    89a4:	f9 99       	sbic	0x1f, 1	; 31
    89a6:	fe cf       	rjmp	.-4      	; 0x89a4 <eeprom_write_r18>
    89a8:	1f ba       	out	0x1f, r1	; 31
    89aa:	92 bd       	out	0x22, r25	; 34
    89ac:	81 bd       	out	0x21, r24	; 33
    89ae:	20 bd       	out	0x20, r18	; 32
    89b0:	0f b6       	in	r0, 0x3f	; 63
    89b2:	f8 94       	cli
    89b4:	fa 9a       	sbi	0x1f, 2	; 31
    89b6:	f9 9a       	sbi	0x1f, 1	; 31
    89b8:	0f be       	out	0x3f, r0	; 63
    89ba:	01 96       	adiw	r24, 0x01	; 1
    89bc:	08 95       	ret

000089be <__do_global_dtors>:
    89be:	11 e0       	ldi	r17, 0x01	; 1
    89c0:	c1 e6       	ldi	r28, 0x61	; 97
    89c2:	d1 e0       	ldi	r29, 0x01	; 1
    89c4:	03 c0       	rjmp	.+6      	; 0x89cc <__do_global_dtors+0xe>
    89c6:	fe 01       	movw	r30, r28
    89c8:	59 da       	rcall	.-2894   	; 0x7e7c <__tablejump2__>
    89ca:	21 96       	adiw	r28, 0x01	; 1
    89cc:	c2 36       	cpi	r28, 0x62	; 98
    89ce:	d1 07       	cpc	r29, r17
    89d0:	d1 f7       	brne	.-12     	; 0x89c6 <__do_global_dtors+0x8>
    89d2:	f8 94       	cli

000089d4 <__stop_program>:
    89d4:	ff cf       	rjmp	.-2      	; 0x89d4 <__stop_program>
