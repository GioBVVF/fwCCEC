
templateVuoto.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000972  00800100  00008af6  00008b8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00008af6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000348  00800a72  00800a72  000094fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000094fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000952c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00001300  00000000  00000000  00009570  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0003d96a  00000000  00000000  0000a870  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000076ac  00000000  00000000  000481da  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000c5d7  00000000  00000000  0004f886  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00004324  00000000  00000000  0005be60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000899a  00000000  00000000  00060184  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00019cf2  00000000  00000000  00068b1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000013c0  00000000  00000000  00082810  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	63 c1       	rjmp	.+710    	; 0x2c8 <__dtors_end>
       2:	00 00       	nop
       4:	8b c1       	rjmp	.+790    	; 0x31c <__bad_interrupt>
       6:	00 00       	nop
       8:	89 c1       	rjmp	.+786    	; 0x31c <__bad_interrupt>
       a:	00 00       	nop
       c:	87 c1       	rjmp	.+782    	; 0x31c <__bad_interrupt>
       e:	00 00       	nop
      10:	0c 94 18 19 	jmp	0x3230	; 0x3230 <__vector_4>
      14:	83 c1       	rjmp	.+774    	; 0x31c <__bad_interrupt>
      16:	00 00       	nop
      18:	81 c1       	rjmp	.+770    	; 0x31c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	0c 94 6c 19 	jmp	0x32d8	; 0x32d8 <__vector_7>
      20:	7d c1       	rjmp	.+762    	; 0x31c <__bad_interrupt>
      22:	00 00       	nop
      24:	7b c1       	rjmp	.+758    	; 0x31c <__bad_interrupt>
      26:	00 00       	nop
      28:	79 c1       	rjmp	.+754    	; 0x31c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	77 c1       	rjmp	.+750    	; 0x31c <__bad_interrupt>
      2e:	00 00       	nop
      30:	75 c1       	rjmp	.+746    	; 0x31c <__bad_interrupt>
      32:	00 00       	nop
      34:	73 c1       	rjmp	.+742    	; 0x31c <__bad_interrupt>
      36:	00 00       	nop
      38:	71 c1       	rjmp	.+738    	; 0x31c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6f c1       	rjmp	.+734    	; 0x31c <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 9a 39 	jmp	0x7334	; 0x7334 <__vector_16>
      44:	6b c1       	rjmp	.+726    	; 0x31c <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 88 37 	jmp	0x6f10	; 0x6f10 <__vector_18>
      4c:	0c 94 ba 37 	jmp	0x6f74	; 0x6f74 <__vector_19>
      50:	65 c1       	rjmp	.+714    	; 0x31c <__bad_interrupt>
      52:	00 00       	nop
      54:	63 c1       	rjmp	.+710    	; 0x31c <__bad_interrupt>
      56:	00 00       	nop
      58:	61 c1       	rjmp	.+706    	; 0x31c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5f c1       	rjmp	.+702    	; 0x31c <__bad_interrupt>
      5e:	00 00       	nop
      60:	5d c1       	rjmp	.+698    	; 0x31c <__bad_interrupt>
      62:	00 00       	nop
      64:	5b c1       	rjmp	.+694    	; 0x31c <__bad_interrupt>
      66:	00 00       	nop
      68:	0c 94 d5 33 	jmp	0x67aa	; 0x67aa <__vector_26>
      6c:	57 c1       	rjmp	.+686    	; 0x31c <__bad_interrupt>
      6e:	00 00       	nop
      70:	55 c1       	rjmp	.+682    	; 0x31c <__bad_interrupt>
      72:	00 00       	nop
      74:	53 c1       	rjmp	.+678    	; 0x31c <__bad_interrupt>
      76:	00 00       	nop
      78:	51 c1       	rjmp	.+674    	; 0x31c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4f c1       	rjmp	.+670    	; 0x31c <__bad_interrupt>
      7e:	00 00       	nop
      80:	4d c1       	rjmp	.+666    	; 0x31c <__bad_interrupt>
      82:	00 00       	nop
      84:	4b c1       	rjmp	.+662    	; 0x31c <__bad_interrupt>
      86:	00 00       	nop
      88:	49 c1       	rjmp	.+658    	; 0x31c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	2b 0f       	add	r18, r27
      8e:	b1 0f       	add	r27, r17
      90:	d8 0f       	add	r29, r24
      92:	14 10       	cpse	r1, r4
      94:	d7 10       	cpse	r13, r7
      96:	63 11       	cpse	r22, r3
      98:	59 12       	cpse	r5, r25
      9a:	b9 12       	cpse	r11, r25
      9c:	49 13       	cpse	r20, r25
      9e:	b0 13       	cpse	r27, r16
      a0:	9c 14       	cp	r9, r12
      a2:	10 15       	cp	r17, r0
      a4:	3f 16       	cp	r3, r31
      a6:	6c 22       	and	r6, r28
      a8:	83 22       	and	r8, r19
      aa:	83 22       	and	r8, r19
      ac:	80 22       	and	r8, r16
      ae:	83 22       	and	r8, r19
      b0:	6a 22       	and	r6, r26
      b2:	83 22       	and	r8, r19
      b4:	83 22       	and	r8, r19
      b6:	83 22       	and	r8, r19
      b8:	5e 22       	and	r5, r30
      ba:	83 22       	and	r8, r19
      bc:	83 22       	and	r8, r19
      be:	73 22       	and	r7, r19
      c0:	7e 22       	and	r7, r30
      c2:	7c 22       	and	r7, r28
      c4:	83 22       	and	r8, r19
      c6:	83 22       	and	r8, r19
      c8:	83 22       	and	r8, r19
      ca:	7a 22       	and	r7, r26

000000cc <__trampolines_end>:
      cc:	00 40       	sbci	r16, 0x00	; 0
      ce:	7a 10       	cpse	r7, r10
      d0:	f3 5a       	subi	r31, 0xA3	; 163
      d2:	00 a0       	ldd	r0, Z+32	; 0x20
      d4:	72 4e       	sbci	r23, 0xE2	; 226
      d6:	18 09       	sbc	r17, r8
      d8:	00 10       	cpse	r0, r0
      da:	a5 d4       	rcall	.+2378   	; 0xa26 <_Z14leggiTAG_Mezzob+0x62>
      dc:	e8 00       	.word	0x00e8	; ????
      de:	00 e8       	ldi	r16, 0x80	; 128
      e0:	76 48       	sbci	r23, 0x86	; 134
      e2:	17 00       	.word	0x0017	; ????
      e4:	00 e4       	ldi	r16, 0x40	; 64
      e6:	0b 54       	subi	r16, 0x4B	; 75
      e8:	02 00       	.word	0x0002	; ????
      ea:	00 ca       	rjmp	.-3072   	; 0xfffff4ec <__eeprom_end+0xff7ef4ec>
      ec:	9a 3b       	cpi	r25, 0xBA	; 186
      ee:	00 00       	nop
      f0:	00 e1       	ldi	r16, 0x10	; 16
      f2:	f5 05       	cpc	r31, r5
      f4:	00 00       	nop
      f6:	80 96       	adiw	r24, 0x20	; 32
      f8:	98 00       	.word	0x0098	; ????
      fa:	00 00       	nop
      fc:	40 42       	sbci	r20, 0x20	; 32
      fe:	0f 00       	.word	0x000f	; ????
     100:	00 00       	nop
     102:	a0 86       	std	Z+8, r10	; 0x08
     104:	01 00       	.word	0x0001	; ????
     106:	00 00       	nop
     108:	10 27       	eor	r17, r16
     10a:	00 00       	nop
     10c:	00 00       	nop
     10e:	e8 03       	fmulsu	r22, r16
     110:	00 00       	nop
     112:	00 00       	nop
     114:	64 00       	.word	0x0064	; ????
     116:	00 00       	nop
     118:	00 00       	nop
     11a:	0a 00       	.word	0x000a	; ????
     11c:	00 00       	nop
     11e:	00 00       	nop
     120:	01 00       	.word	0x0001	; ????
     122:	00 00       	nop
     124:	00 00       	nop
     126:	2c 76       	andi	r18, 0x6C	; 108
     128:	d8 88       	ldd	r13, Y+16	; 0x10
     12a:	dc 67       	ori	r29, 0x7C	; 124
     12c:	4f 08       	sbc	r4, r15
     12e:	23 df       	rcall	.-442    	; 0xffffff76 <__eeprom_end+0xff7eff76>
     130:	c1 df       	rcall	.-126    	; 0xb4 <__SREG__+0x75>
     132:	ae 59       	subi	r26, 0x9E	; 158
     134:	e1 b1       	in	r30, 0x01	; 1
     136:	b7 96       	adiw	r30, 0x27	; 39
     138:	e5 e3       	ldi	r30, 0x35	; 53
     13a:	e4 53       	subi	r30, 0x34	; 52
     13c:	c6 3a       	cpi	r28, 0xA6	; 166
     13e:	e6 51       	subi	r30, 0x16	; 22
     140:	99 76       	andi	r25, 0x69	; 105
     142:	96 e8       	ldi	r25, 0x86	; 134
     144:	e6 c2       	rjmp	.+1484   	; 0x712 <_Z10displayLCDP6Stringii+0x10>
     146:	84 26       	eor	r8, r20
     148:	eb 89       	ldd	r30, Y+19	; 0x13
     14a:	8c 9b       	sbis	0x11, 4	; 17
     14c:	62 ed       	ldi	r22, 0xD2	; 210
     14e:	40 7c       	andi	r20, 0xC0	; 192
     150:	6f fc       	.word	0xfc6f	; ????
     152:	ef bc       	out	0x2f, r14	; 47
     154:	9c 9f       	mul	r25, r28
     156:	40 f2       	brcs	.-112    	; 0xe8 <__trampolines_end+0x1c>
     158:	ba a5       	ldd	r27, Y+42	; 0x2a
     15a:	6f a5       	ldd	r22, Y+47	; 0x2f
     15c:	f4 90       	lpm	r15, Z
     15e:	05 5a       	subi	r16, 0xA5	; 165
     160:	2a f7       	brpl	.-54     	; 0x12c <__trampolines_end+0x60>
     162:	5c 93       	st	X, r21
     164:	6b 6c       	ori	r22, 0xCB	; 203
     166:	f9 67       	ori	r31, 0x79	; 121
     168:	6d c1       	rjmp	.+730    	; 0x444 <_Z8printTabh+0xa>
     16a:	1b fc       	.word	0xfc1b	; ????
     16c:	e0 e4       	ldi	r30, 0x40	; 64
     16e:	0d 47       	sbci	r16, 0x7D	; 125
     170:	fe f5       	brtc	.+126    	; 0x1f0 <_ZZ5setupE3__c+0xc>
     172:	20 e6       	ldi	r18, 0x60	; 96
     174:	b5 00       	.word	0x00b5	; ????
     176:	d0 ed       	ldi	r29, 0xD0	; 208
     178:	90 2e       	mov	r9, r16
     17a:	03 00       	.word	0x0003	; ????
     17c:	94 35       	cpi	r25, 0x54	; 84
     17e:	77 05       	cpc	r23, r7
     180:	00 80       	ld	r0, Z
     182:	84 1e       	adc	r8, r20
     184:	08 00       	.word	0x0008	; ????
     186:	00 20       	and	r0, r0
     188:	4e 0a       	sbc	r4, r30
     18a:	00 00       	nop
     18c:	00 c8       	rjmp	.-4096   	; 0xfffff18e <__eeprom_end+0xff7ef18e>
     18e:	0c 33       	cpi	r16, 0x3C	; 60
     190:	33 33       	cpi	r19, 0x33	; 51
     192:	33 0f       	add	r19, r19
     194:	98 6e       	ori	r25, 0xE8	; 232
     196:	12 83       	std	Z+2, r17	; 0x02
     198:	11 41       	sbci	r17, 0x11	; 17
     19a:	ef 8d       	ldd	r30, Y+31	; 0x1f
     19c:	21 14       	cp	r2, r1
     19e:	89 3b       	cpi	r24, 0xB9	; 185
     1a0:	e6 55       	subi	r30, 0x56	; 86
     1a2:	16 cf       	rjmp	.-468    	; 0xffffffd0 <__eeprom_end+0xff7effd0>
     1a4:	fe e6       	ldi	r31, 0x6E	; 110
     1a6:	db 18       	sub	r13, r11
     1a8:	d1 84       	ldd	r13, Z+9	; 0x09
     1aa:	4b 38       	cpi	r20, 0x8B	; 139
     1ac:	1b f7       	brvc	.-58     	; 0x174 <__trampolines_end+0xa8>
     1ae:	7c 1d       	adc	r23, r12
     1b0:	90 1d       	adc	r25, r0
     1b2:	a4 bb       	out	0x14, r26	; 20
     1b4:	e4 24       	eor	r14, r4
     1b6:	20 32       	cpi	r18, 0x20	; 32
     1b8:	84 72       	andi	r24, 0x24	; 36
     1ba:	5e 22       	and	r5, r30
     1bc:	81 00       	.word	0x0081	; ????
     1be:	c9 f1       	breq	.+114    	; 0x232 <_ZL11daysInMonth+0xa>
     1c0:	24 ec       	ldi	r18, 0xC4	; 196
     1c2:	a1 e5       	ldi	r26, 0x51	; 81
     1c4:	3d 27       	eor	r19, r29

000001c6 <_ZZ5setupE3__c_0>:
     1c6:	52 54 43 20 63 68 69 70 20 44 53 33 32 33 31 4d     RTC chip DS3231M
     1d6:	20 69 6e 69 74 69 61 6c 69 7a 65 64 2e 00            initialized..

000001e4 <_ZZ5setupE3__c>:
     1e4:	6e 6f 6e 20 74 72 6f 76 6f 20 6d 6f 64 75 6c 6f     non trovo modulo
     1f4:	20 52 54 43 20 44 53 33 32 33 31 4d 4d 2e 20 52      RTC DS3231MM. R
     204:	69 70 72 6f 76 6f 20 74 72 61 20 33 73 2e 00        iprovo tra 3s..

00000213 <_ZZN13DS3231M_Class6adjustEvE3__c>:
     213:	4a 75 6e 20 20 39 20 32 30 32 31 00                 Jun  9 2021.

0000021f <_ZZN13DS3231M_Class6adjustEvE3__c_0>:
     21f:	31 33 3a 34 35 3a 35 32 00                          13:45:52.

00000228 <_ZL11daysInMonth>:
     228:	1f 1c 1f 1e 1f 1e 1f 1f 1e 1f 1e 1f                 ............

00000234 <digital_pin_to_timer_PGM>:
     234:	00 00 00 00 04 03 08 07 00 00 02 00 09 0a 00 00     ................
	...
     250:	00 00 00 01                                         ....

00000254 <digital_pin_to_bit_mask_PGM>:
     254:	01 02 04 08 10 20 40 80 01 02 10 20 40 80 10 20     ..... @.... @.. 
     264:	40 80 10 08 20 04 40 80 01 02 04 08 01 02 04 08     @... .@.........

00000274 <digital_pin_to_port_PGM>:
     274:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 01 01     ................
     284:	01 01 03 03 03 03 03 03 01 01 01 01 03 03 02 02     ................

00000294 <port_to_input_PGM>:
     294:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

0000029e <port_to_output_PGM>:
     29e:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000002a8 <port_to_mode_PGM>:
     2a8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000002b2 <__ctors_start>:
     2b2:	eb 19       	sub	r30, r11
     2b4:	f2 24       	eor	r15, r2
     2b6:	4a 25       	eor	r20, r10
     2b8:	42 28       	or	r4, r2
     2ba:	29 2a       	or	r2, r25
     2bc:	34 2a       	or	r3, r20
     2be:	06 2c       	mov	r0, r6
     2c0:	d6 2f       	mov	r29, r22
     2c2:	65 36       	cpi	r22, 0x65	; 101
     2c4:	e8 37       	cpi	r30, 0x78	; 120

000002c6 <__ctors_end>:
     2c6:	09 1b       	sub	r16, r25

000002c8 <__dtors_end>:
     2c8:	11 24       	eor	r1, r1
     2ca:	1f be       	out	0x3f, r1	; 63
     2cc:	cf ef       	ldi	r28, 0xFF	; 255
     2ce:	d0 e4       	ldi	r29, 0x40	; 64
     2d0:	de bf       	out	0x3e, r29	; 62
     2d2:	cd bf       	out	0x3d, r28	; 61

000002d4 <__do_copy_data>:
     2d4:	1a e0       	ldi	r17, 0x0A	; 10
     2d6:	a0 e0       	ldi	r26, 0x00	; 0
     2d8:	b1 e0       	ldi	r27, 0x01	; 1
     2da:	e6 ef       	ldi	r30, 0xF6	; 246
     2dc:	fa e8       	ldi	r31, 0x8A	; 138
     2de:	00 e0       	ldi	r16, 0x00	; 0
     2e0:	0b bf       	out	0x3b, r16	; 59
     2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <__do_copy_data+0x14>
     2e4:	07 90       	elpm	r0, Z+
     2e6:	0d 92       	st	X+, r0
     2e8:	a2 37       	cpi	r26, 0x72	; 114
     2ea:	b1 07       	cpc	r27, r17
     2ec:	d9 f7       	brne	.-10     	; 0x2e4 <__do_copy_data+0x10>

000002ee <__do_clear_bss>:
     2ee:	2d e0       	ldi	r18, 0x0D	; 13
     2f0:	a2 e7       	ldi	r26, 0x72	; 114
     2f2:	ba e0       	ldi	r27, 0x0A	; 10
     2f4:	01 c0       	rjmp	.+2      	; 0x2f8 <.do_clear_bss_start>

000002f6 <.do_clear_bss_loop>:
     2f6:	1d 92       	st	X+, r1

000002f8 <.do_clear_bss_start>:
     2f8:	aa 3b       	cpi	r26, 0xBA	; 186
     2fa:	b2 07       	cpc	r27, r18
     2fc:	e1 f7       	brne	.-8      	; 0x2f6 <.do_clear_bss_loop>

000002fe <__do_global_ctors>:
     2fe:	11 e0       	ldi	r17, 0x01	; 1
     300:	c3 e6       	ldi	r28, 0x63	; 99
     302:	d1 e0       	ldi	r29, 0x01	; 1
     304:	04 c0       	rjmp	.+8      	; 0x30e <__do_global_ctors+0x10>
     306:	21 97       	sbiw	r28, 0x01	; 1
     308:	fe 01       	movw	r30, r28
     30a:	0e 94 ce 3f 	call	0x7f9c	; 0x7f9c <__tablejump2__>
     30e:	c9 35       	cpi	r28, 0x59	; 89
     310:	d1 07       	cpc	r29, r17
     312:	c9 f7       	brne	.-14     	; 0x306 <__do_global_ctors+0x8>
     314:	0e 94 74 38 	call	0x70e8	; 0x70e8 <main>
     318:	0c 94 6f 45 	jmp	0x8ade	; 0x8ade <__do_global_dtors>

0000031c <__bad_interrupt>:
     31c:	71 ce       	rjmp	.-798    	; 0x0 <__vectors>

0000031e <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     31e:	80 e0       	ldi	r24, 0x00	; 0
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	08 95       	ret

00000324 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     324:	08 95       	ret

00000326 <_ZL10enable_ETHv>:
 Serial.println(" ");
 Serial.println(" ");
 Serial.print("Salvata nella EEPROM: ");
 Serial.println(Salvata);
 return Salvata;
}
     326:	44 98       	cbi	0x08, 4	; 8
     328:	08 95       	ret

0000032a <_ZL11disable_ETHv>:
     32a:	44 9a       	sbi	0x08, 4	; 8
     32c:	08 95       	ret

0000032e <_Z19InizializzaEthernetv>:
     32e:	ef 92       	push	r14
     330:	ff 92       	push	r15
     332:	0f 93       	push	r16
     334:	1f 93       	push	r17
     336:	cf 93       	push	r28
     338:	df 93       	push	r29
     33a:	cd b7       	in	r28, 0x3d	; 61
     33c:	de b7       	in	r29, 0x3e	; 62
     33e:	68 97       	sbiw	r28, 0x18	; 24
     340:	0f b6       	in	r0, 0x3f	; 63
     342:	f8 94       	cli
     344:	de bf       	out	0x3e, r29	; 62
     346:	0f be       	out	0x3f, r0	; 63
     348:	cd bf       	out	0x3d, r28	; 61
     34a:	82 e5       	ldi	r24, 0x52	; 82
     34c:	9a e0       	ldi	r25, 0x0A	; 10
     34e:	9a 83       	std	Y+2, r25	; 0x02
     350:	89 83       	std	Y+1, r24	; 0x01
     352:	40 91 bb 0a 	lds	r20, 0x0ABB	; 0x800abb <subnet+0x2>
     356:	50 91 bc 0a 	lds	r21, 0x0ABC	; 0x800abc <subnet+0x3>
     35a:	60 91 bd 0a 	lds	r22, 0x0ABD	; 0x800abd <subnet+0x4>
     35e:	70 91 be 0a 	lds	r23, 0x0ABE	; 0x800abe <subnet+0x5>
     362:	4b 83       	std	Y+3, r20	; 0x03
     364:	5c 83       	std	Y+4, r21	; 0x04
     366:	6d 83       	std	Y+5, r22	; 0x05
     368:	7e 83       	std	Y+6, r23	; 0x06
     36a:	98 87       	std	Y+8, r25	; 0x08
     36c:	8f 83       	std	Y+7, r24	; 0x07
     36e:	40 91 c1 0a 	lds	r20, 0x0AC1	; 0x800ac1 <gateway+0x2>
     372:	50 91 c2 0a 	lds	r21, 0x0AC2	; 0x800ac2 <gateway+0x3>
     376:	60 91 c3 0a 	lds	r22, 0x0AC3	; 0x800ac3 <gateway+0x4>
     37a:	70 91 c4 0a 	lds	r23, 0x0AC4	; 0x800ac4 <gateway+0x5>
     37e:	49 87       	std	Y+9, r20	; 0x09
     380:	5a 87       	std	Y+10, r21	; 0x0a
     382:	6b 87       	std	Y+11, r22	; 0x0b
     384:	7c 87       	std	Y+12, r23	; 0x0c
     386:	9e 87       	std	Y+14, r25	; 0x0e
     388:	8d 87       	std	Y+13, r24	; 0x0d
     38a:	40 91 c7 0a 	lds	r20, 0x0AC7	; 0x800ac7 <myDns+0x2>
     38e:	50 91 c8 0a 	lds	r21, 0x0AC8	; 0x800ac8 <myDns+0x3>
     392:	60 91 c9 0a 	lds	r22, 0x0AC9	; 0x800ac9 <myDns+0x4>
     396:	70 91 ca 0a 	lds	r23, 0x0ACA	; 0x800aca <myDns+0x5>
     39a:	4f 87       	std	Y+15, r20	; 0x0f
     39c:	58 8b       	std	Y+16, r21	; 0x10
     39e:	69 8b       	std	Y+17, r22	; 0x11
     3a0:	7a 8b       	std	Y+18, r23	; 0x12
     3a2:	9c 8b       	std	Y+20, r25	; 0x14
     3a4:	8b 8b       	std	Y+19, r24	; 0x13
     3a6:	80 91 cd 0a 	lds	r24, 0x0ACD	; 0x800acd <ipCCEC+0x2>
     3aa:	90 91 ce 0a 	lds	r25, 0x0ACE	; 0x800ace <ipCCEC+0x3>
     3ae:	a0 91 cf 0a 	lds	r26, 0x0ACF	; 0x800acf <ipCCEC+0x4>
     3b2:	b0 91 d0 0a 	lds	r27, 0x0AD0	; 0x800ad0 <ipCCEC+0x5>
     3b6:	8d 8b       	std	Y+21, r24	; 0x15
     3b8:	9e 8b       	std	Y+22, r25	; 0x16
     3ba:	af 8b       	std	Y+23, r26	; 0x17
     3bc:	b8 8f       	std	Y+24, r27	; 0x18
     3be:	ce 01       	movw	r24, r28
     3c0:	01 96       	adiw	r24, 0x01	; 1
     3c2:	7c 01       	movw	r14, r24
     3c4:	8e 01       	movw	r16, r28
     3c6:	09 5f       	subi	r16, 0xF9	; 249
     3c8:	1f 4f       	sbci	r17, 0xFF	; 255
     3ca:	9e 01       	movw	r18, r28
     3cc:	23 5f       	subi	r18, 0xF3	; 243
     3ce:	3f 4f       	sbci	r19, 0xFF	; 255
     3d0:	ae 01       	movw	r20, r28
     3d2:	4d 5e       	subi	r20, 0xED	; 237
     3d4:	5f 4f       	sbci	r21, 0xFF	; 255
     3d6:	6e e2       	ldi	r22, 0x2E	; 46
     3d8:	71 e0       	ldi	r23, 0x01	; 1
     3da:	8d e0       	ldi	r24, 0x0D	; 13
     3dc:	9c e0       	ldi	r25, 0x0C	; 12
     3de:	0e 94 fc 27 	call	0x4ff8	; 0x4ff8 <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_>
     3e2:	68 96       	adiw	r28, 0x18	; 24
     3e4:	0f b6       	in	r0, 0x3f	; 63
     3e6:	f8 94       	cli
     3e8:	de bf       	out	0x3e, r29	; 62
     3ea:	0f be       	out	0x3f, r0	; 63
     3ec:	cd bf       	out	0x3d, r28	; 61
     3ee:	df 91       	pop	r29
     3f0:	cf 91       	pop	r28
     3f2:	1f 91       	pop	r17
     3f4:	0f 91       	pop	r16
     3f6:	ff 90       	pop	r15
     3f8:	ef 90       	pop	r14
     3fa:	08 95       	ret

000003fc <_Z11my_delay_msi>:
     3fc:	18 16       	cp	r1, r24
     3fe:	19 06       	cpc	r1, r25
     400:	44 f4       	brge	.+16     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     402:	ef e9       	ldi	r30, 0x9F	; 159
     404:	ff e0       	ldi	r31, 0x0F	; 15
     406:	31 97       	sbiw	r30, 0x01	; 1
     408:	f1 f7       	brne	.-4      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     40a:	00 c0       	rjmp	.+0      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     40c:	00 00       	nop
     40e:	01 97       	sbiw	r24, 0x01	; 1
     410:	f5 cf       	rjmp	.-22     	; 0x3fc <_Z11my_delay_msi>
     412:	08 95       	ret

00000414 <_Z9printLinev>:
     414:	cf 93       	push	r28
     416:	80 e1       	ldi	r24, 0x10	; 16
     418:	9d e0       	ldi	r25, 0x0D	; 13
     41a:	0e 94 f9 38 	call	0x71f2	; 0x71f2 <_ZN5Print7printlnEv>
     41e:	cd e7       	ldi	r28, 0x7D	; 125
     420:	67 ee       	ldi	r22, 0xE7	; 231
     422:	71 e0       	ldi	r23, 0x01	; 1
     424:	80 e1       	ldi	r24, 0x10	; 16
     426:	9d e0       	ldi	r25, 0x0D	; 13
     428:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN5Print5printEPKc>
     42c:	c1 50       	subi	r28, 0x01	; 1
     42e:	c1 f7       	brne	.-16     	; 0x420 <_Z9printLinev+0xc>
     430:	80 e1       	ldi	r24, 0x10	; 16
     432:	9d e0       	ldi	r25, 0x0D	; 13
     434:	cf 91       	pop	r28
     436:	0c 94 f9 38 	jmp	0x71f2	; 0x71f2 <_ZN5Print7printlnEv>

0000043a <_Z8printTabh>:
     43a:	cf 93       	push	r28
     43c:	df 93       	push	r29
     43e:	d8 2f       	mov	r29, r24
     440:	c0 e0       	ldi	r28, 0x00	; 0
     442:	cd 17       	cp	r28, r29
     444:	41 f0       	breq	.+16     	; 0x456 <_Z8printTabh+0x1c>
     446:	69 ee       	ldi	r22, 0xE9	; 233
     448:	71 e0       	ldi	r23, 0x01	; 1
     44a:	80 e1       	ldi	r24, 0x10	; 16
     44c:	9d e0       	ldi	r25, 0x0D	; 13
     44e:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN5Print5printEPKc>
     452:	cf 5f       	subi	r28, 0xFF	; 255
     454:	f6 cf       	rjmp	.-20     	; 0x442 <_Z8printTabh+0x8>
     456:	df 91       	pop	r29
     458:	cf 91       	pop	r28
     45a:	08 95       	ret

0000045c <_Z4passb>:
     45c:	cf 93       	push	r28
     45e:	c8 2f       	mov	r28, r24
     460:	81 e0       	ldi	r24, 0x01	; 1
     462:	eb df       	rcall	.-42     	; 0x43a <_Z8printTabh>
     464:	6b ee       	ldi	r22, 0xEB	; 235
     466:	71 e0       	ldi	r23, 0x01	; 1
     468:	80 e1       	ldi	r24, 0x10	; 16
     46a:	9d e0       	ldi	r25, 0x0D	; 13
     46c:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN5Print5printEPKc>
     470:	cc 23       	and	r28, r28
     472:	19 f0       	breq	.+6      	; 0x47a <_Z4passb+0x1e>
     474:	6f ee       	ldi	r22, 0xEF	; 239
     476:	71 e0       	ldi	r23, 0x01	; 1
     478:	02 c0       	rjmp	.+4      	; 0x47e <_Z4passb+0x22>
     47a:	64 ef       	ldi	r22, 0xF4	; 244
     47c:	71 e0       	ldi	r23, 0x01	; 1
     47e:	80 e1       	ldi	r24, 0x10	; 16
     480:	9d e0       	ldi	r25, 0x0D	; 13
     482:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN5Print5printEPKc>
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	cf 91       	pop	r28
     48a:	d7 cf       	rjmp	.-82     	; 0x43a <_Z8printTabh>

0000048c <_Z11clearEEPROMii>:
     48c:	0f 93       	push	r16
     48e:	1f 93       	push	r17
     490:	cf 93       	push	r28
     492:	df 93       	push	r29
     494:	ec 01       	movw	r28, r24
     496:	8b 01       	movw	r16, r22
     498:	6d ee       	ldi	r22, 0xED	; 237
     49a:	71 e0       	ldi	r23, 0x01	; 1
     49c:	80 e1       	ldi	r24, 0x10	; 16
     49e:	9d e0       	ldi	r25, 0x0D	; 13
     4a0:	0e 94 1c 39 	call	0x7238	; 0x7238 <_ZN5Print7printlnEPKc>
     4a4:	6d ee       	ldi	r22, 0xED	; 237
     4a6:	71 e0       	ldi	r23, 0x01	; 1
     4a8:	80 e1       	ldi	r24, 0x10	; 16
     4aa:	9d e0       	ldi	r25, 0x0D	; 13
     4ac:	0e 94 1c 39 	call	0x7238	; 0x7238 <_ZN5Print7printlnEPKc>
     4b0:	6e e1       	ldi	r22, 0x1E	; 30
     4b2:	72 e0       	ldi	r23, 0x02	; 2
     4b4:	80 e1       	ldi	r24, 0x10	; 16
     4b6:	9d e0       	ldi	r25, 0x0D	; 13
     4b8:	0e 94 1c 39 	call	0x7238	; 0x7238 <_ZN5Print7printlnEPKc>
     4bc:	c0 17       	cp	r28, r16
     4be:	d1 07       	cpc	r29, r17
     4c0:	34 f4       	brge	.+12     	; 0x4ce <_Z11clearEEPROMii+0x42>
     4c2:	60 e0       	ldi	r22, 0x00	; 0
     4c4:	ce 01       	movw	r24, r28
     4c6:	0e 94 61 45 	call	0x8ac2	; 0x8ac2 <eeprom_write_byte>
     4ca:	21 96       	adiw	r28, 0x01	; 1
     4cc:	f7 cf       	rjmp	.-18     	; 0x4bc <_Z11clearEEPROMii+0x30>
     4ce:	6b e3       	ldi	r22, 0x3B	; 59
     4d0:	72 e0       	ldi	r23, 0x02	; 2
     4d2:	80 e1       	ldi	r24, 0x10	; 16
     4d4:	9d e0       	ldi	r25, 0x0D	; 13
     4d6:	0e 94 1c 39 	call	0x7238	; 0x7238 <_ZN5Print7printlnEPKc>
     4da:	6d ee       	ldi	r22, 0xED	; 237
     4dc:	71 e0       	ldi	r23, 0x01	; 1
     4de:	80 e1       	ldi	r24, 0x10	; 16
     4e0:	9d e0       	ldi	r25, 0x0D	; 13
     4e2:	0e 94 1c 39 	call	0x7238	; 0x7238 <_ZN5Print7printlnEPKc>
     4e6:	6d ee       	ldi	r22, 0xED	; 237
     4e8:	71 e0       	ldi	r23, 0x01	; 1
     4ea:	80 e1       	ldi	r24, 0x10	; 16
     4ec:	9d e0       	ldi	r25, 0x0D	; 13
     4ee:	df 91       	pop	r29
     4f0:	cf 91       	pop	r28
     4f2:	1f 91       	pop	r17
     4f4:	0f 91       	pop	r16
     4f6:	0c 94 1c 39 	jmp	0x7238	; 0x7238 <_ZN5Print7printlnEPKc>

000004fa <_Z6Buzzerhm>:
     4fa:	cf 92       	push	r12
     4fc:	df 92       	push	r13
     4fe:	ef 92       	push	r14
     500:	ff 92       	push	r15
     502:	0f 93       	push	r16
     504:	1f 93       	push	r17
     506:	cf 93       	push	r28
     508:	df 93       	push	r29
     50a:	6a 01       	movw	r12, r20
     50c:	7b 01       	movw	r14, r22
     50e:	c0 e0       	ldi	r28, 0x00	; 0
     510:	d0 e0       	ldi	r29, 0x00	; 0
     512:	08 2f       	mov	r16, r24
     514:	10 e0       	ldi	r17, 0x00	; 0
     516:	c0 17       	cp	r28, r16
     518:	d1 07       	cpc	r29, r17
     51a:	24 f4       	brge	.+8      	; 0x524 <_Z6Buzzerhm+0x2a>
     51c:	c6 01       	movw	r24, r12
     51e:	6e df       	rcall	.-292    	; 0x3fc <_Z11my_delay_msi>
     520:	21 96       	adiw	r28, 0x01	; 1
     522:	f9 cf       	rjmp	.-14     	; 0x516 <_Z6Buzzerhm+0x1c>
     524:	df 91       	pop	r29
     526:	cf 91       	pop	r28
     528:	1f 91       	pop	r17
     52a:	0f 91       	pop	r16
     52c:	ff 90       	pop	r15
     52e:	ef 90       	pop	r14
     530:	df 90       	pop	r13
     532:	cf 90       	pop	r12
     534:	08 95       	ret

00000536 <_Z13getCharKeypadi>:
     536:	82 32       	cpi	r24, 0x22	; 34
     538:	91 05       	cpc	r25, r1
     53a:	09 f4       	brne	.+2      	; 0x53e <_Z13getCharKeypadi+0x8>
     53c:	9a c0       	rjmp	.+308    	; 0x672 <_Z13getCharKeypadi+0x13c>
     53e:	6c f5       	brge	.+90     	; 0x59a <_Z13getCharKeypadi+0x64>
     540:	8a 30       	cpi	r24, 0x0A	; 10
     542:	91 05       	cpc	r25, r1
     544:	09 f4       	brne	.+2      	; 0x548 <_Z13getCharKeypadi+0x12>
     546:	83 c0       	rjmp	.+262    	; 0x64e <_Z13getCharKeypadi+0x118>
     548:	a4 f4       	brge	.+40     	; 0x572 <_Z13getCharKeypadi+0x3c>
     54a:	86 30       	cpi	r24, 0x06	; 6
     54c:	91 05       	cpc	r25, r1
     54e:	09 f4       	brne	.+2      	; 0x552 <_Z13getCharKeypadi+0x1c>
     550:	75 c0       	rjmp	.+234    	; 0x63c <_Z13getCharKeypadi+0x106>
     552:	89 30       	cpi	r24, 0x09	; 9
     554:	91 05       	cpc	r25, r1
     556:	09 f4       	brne	.+2      	; 0x55a <_Z13getCharKeypadi+0x24>
     558:	5d c0       	rjmp	.+186    	; 0x614 <_Z13getCharKeypadi+0xde>
     55a:	05 97       	sbiw	r24, 0x05	; 5
     55c:	09 f0       	breq	.+2      	; 0x560 <_Z13getCharKeypadi+0x2a>
     55e:	cf c0       	rjmp	.+414    	; 0x6fe <_Z13getCharKeypadi+0x1c8>
     560:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <MappaKeys>
     564:	80 e1       	ldi	r24, 0x10	; 16
     566:	9d e0       	ldi	r25, 0x0D	; 13
     568:	0e 94 f2 38 	call	0x71e4	; 0x71e4 <_ZN5Print5printEc>
     56c:	20 e0       	ldi	r18, 0x00	; 0
     56e:	30 e0       	ldi	r19, 0x00	; 0
     570:	59 c0       	rjmp	.+178    	; 0x624 <_Z13getCharKeypadi+0xee>
     572:	82 31       	cpi	r24, 0x12	; 18
     574:	91 05       	cpc	r25, r1
     576:	09 f4       	brne	.+2      	; 0x57a <_Z13getCharKeypadi+0x44>
     578:	73 c0       	rjmp	.+230    	; 0x660 <_Z13getCharKeypadi+0x12a>
     57a:	81 32       	cpi	r24, 0x21	; 33
     57c:	91 05       	cpc	r25, r1
     57e:	09 f4       	brne	.+2      	; 0x582 <_Z13getCharKeypadi+0x4c>
     580:	54 c0       	rjmp	.+168    	; 0x62a <_Z13getCharKeypadi+0xf4>
     582:	41 97       	sbiw	r24, 0x11	; 17
     584:	09 f0       	breq	.+2      	; 0x588 <_Z13getCharKeypadi+0x52>
     586:	bb c0       	rjmp	.+374    	; 0x6fe <_Z13getCharKeypadi+0x1c8>
     588:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <MappaKeys+0x2>
     58c:	80 e1       	ldi	r24, 0x10	; 16
     58e:	9d e0       	ldi	r25, 0x0D	; 13
     590:	0e 94 f2 38 	call	0x71e4	; 0x71e4 <_ZN5Print5printEc>
     594:	22 e0       	ldi	r18, 0x02	; 2
     596:	30 e0       	ldi	r19, 0x00	; 0
     598:	45 c0       	rjmp	.+138    	; 0x624 <_Z13getCharKeypadi+0xee>
     59a:	80 36       	cpi	r24, 0x60	; 96
     59c:	91 05       	cpc	r25, r1
     59e:	09 f4       	brne	.+2      	; 0x5a2 <_Z13getCharKeypadi+0x6c>
     5a0:	99 c0       	rjmp	.+306    	; 0x6d4 <_Z13getCharKeypadi+0x19e>
     5a2:	ac f4       	brge	.+42     	; 0x5ce <_Z13getCharKeypadi+0x98>
     5a4:	88 34       	cpi	r24, 0x48	; 72
     5a6:	91 05       	cpc	r25, r1
     5a8:	09 f4       	brne	.+2      	; 0x5ac <_Z13getCharKeypadi+0x76>
     5aa:	82 c0       	rjmp	.+260    	; 0x6b0 <_Z13getCharKeypadi+0x17a>
     5ac:	80 35       	cpi	r24, 0x50	; 80
     5ae:	91 05       	cpc	r25, r1
     5b0:	09 f4       	brne	.+2      	; 0x5b4 <_Z13getCharKeypadi+0x7e>
     5b2:	87 c0       	rjmp	.+270    	; 0x6c2 <_Z13getCharKeypadi+0x18c>
     5b4:	84 34       	cpi	r24, 0x44	; 68
     5b6:	91 05       	cpc	r25, r1
     5b8:	09 f0       	breq	.+2      	; 0x5bc <_Z13getCharKeypadi+0x86>
     5ba:	a1 c0       	rjmp	.+322    	; 0x6fe <_Z13getCharKeypadi+0x1c8>
     5bc:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <MappaKeys+0xc>
     5c0:	80 e1       	ldi	r24, 0x10	; 16
     5c2:	9d e0       	ldi	r25, 0x0D	; 13
     5c4:	0e 94 f2 38 	call	0x71e4	; 0x71e4 <_ZN5Print5printEc>
     5c8:	20 e0       	ldi	r18, 0x00	; 0
     5ca:	30 e0       	ldi	r19, 0x00	; 0
     5cc:	8b c0       	rjmp	.+278    	; 0x6e4 <_Z13getCharKeypadi+0x1ae>
     5ce:	88 38       	cpi	r24, 0x88	; 136
     5d0:	91 05       	cpc	r25, r1
     5d2:	09 f4       	brne	.+2      	; 0x5d6 <_Z13getCharKeypadi+0xa0>
     5d4:	59 c0       	rjmp	.+178    	; 0x688 <_Z13getCharKeypadi+0x152>
     5d6:	6c f4       	brge	.+26     	; 0x5f2 <_Z13getCharKeypadi+0xbc>
     5d8:	84 38       	cpi	r24, 0x84	; 132
     5da:	91 05       	cpc	r25, r1
     5dc:	09 f0       	breq	.+2      	; 0x5e0 <_Z13getCharKeypadi+0xaa>
     5de:	8f c0       	rjmp	.+286    	; 0x6fe <_Z13getCharKeypadi+0x1c8>
     5e0:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <MappaKeys+0x8>
     5e4:	80 e1       	ldi	r24, 0x10	; 16
     5e6:	9d e0       	ldi	r25, 0x0D	; 13
     5e8:	0e 94 f2 38 	call	0x71e4	; 0x71e4 <_ZN5Print5printEc>
     5ec:	20 e0       	ldi	r18, 0x00	; 0
     5ee:	30 e0       	ldi	r19, 0x00	; 0
     5f0:	5c c0       	rjmp	.+184    	; 0x6aa <_Z13getCharKeypadi+0x174>
     5f2:	80 39       	cpi	r24, 0x90	; 144
     5f4:	91 05       	cpc	r25, r1
     5f6:	09 f4       	brne	.+2      	; 0x5fa <_Z13getCharKeypadi+0xc4>
     5f8:	50 c0       	rjmp	.+160    	; 0x69a <_Z13getCharKeypadi+0x164>
     5fa:	80 3a       	cpi	r24, 0xA0	; 160
     5fc:	91 05       	cpc	r25, r1
     5fe:	09 f0       	breq	.+2      	; 0x602 <_Z13getCharKeypadi+0xcc>
     600:	7e c0       	rjmp	.+252    	; 0x6fe <_Z13getCharKeypadi+0x1c8>
     602:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <MappaKeys+0xb>
     606:	80 e1       	ldi	r24, 0x10	; 16
     608:	9d e0       	ldi	r25, 0x0D	; 13
     60a:	0e 94 f2 38 	call	0x71e4	; 0x71e4 <_ZN5Print5printEc>
     60e:	23 e0       	ldi	r18, 0x03	; 3
     610:	30 e0       	ldi	r19, 0x00	; 0
     612:	4b c0       	rjmp	.+150    	; 0x6aa <_Z13getCharKeypadi+0x174>
     614:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <MappaKeys+0x1>
     618:	80 e1       	ldi	r24, 0x10	; 16
     61a:	9d e0       	ldi	r25, 0x0D	; 13
     61c:	0e 94 f2 38 	call	0x71e4	; 0x71e4 <_ZN5Print5printEc>
     620:	21 e0       	ldi	r18, 0x01	; 1
     622:	30 e0       	ldi	r19, 0x00	; 0
     624:	80 e0       	ldi	r24, 0x00	; 0
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	5f c0       	rjmp	.+190    	; 0x6e8 <_Z13getCharKeypadi+0x1b2>
     62a:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <MappaKeys+0x3>
     62e:	80 e1       	ldi	r24, 0x10	; 16
     630:	9d e0       	ldi	r25, 0x0D	; 13
     632:	0e 94 f2 38 	call	0x71e4	; 0x71e4 <_ZN5Print5printEc>
     636:	23 e0       	ldi	r18, 0x03	; 3
     638:	30 e0       	ldi	r19, 0x00	; 0
     63a:	f4 cf       	rjmp	.-24     	; 0x624 <_Z13getCharKeypadi+0xee>
     63c:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <MappaKeys+0x4>
     640:	80 e1       	ldi	r24, 0x10	; 16
     642:	9d e0       	ldi	r25, 0x0D	; 13
     644:	0e 94 f2 38 	call	0x71e4	; 0x71e4 <_ZN5Print5printEc>
     648:	20 e0       	ldi	r18, 0x00	; 0
     64a:	30 e0       	ldi	r19, 0x00	; 0
     64c:	1a c0       	rjmp	.+52     	; 0x682 <_Z13getCharKeypadi+0x14c>
     64e:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <MappaKeys+0x5>
     652:	80 e1       	ldi	r24, 0x10	; 16
     654:	9d e0       	ldi	r25, 0x0D	; 13
     656:	0e 94 f2 38 	call	0x71e4	; 0x71e4 <_ZN5Print5printEc>
     65a:	21 e0       	ldi	r18, 0x01	; 1
     65c:	30 e0       	ldi	r19, 0x00	; 0
     65e:	11 c0       	rjmp	.+34     	; 0x682 <_Z13getCharKeypadi+0x14c>
     660:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <MappaKeys+0x6>
     664:	80 e1       	ldi	r24, 0x10	; 16
     666:	9d e0       	ldi	r25, 0x0D	; 13
     668:	0e 94 f2 38 	call	0x71e4	; 0x71e4 <_ZN5Print5printEc>
     66c:	22 e0       	ldi	r18, 0x02	; 2
     66e:	30 e0       	ldi	r19, 0x00	; 0
     670:	08 c0       	rjmp	.+16     	; 0x682 <_Z13getCharKeypadi+0x14c>
     672:	60 91 0d 01 	lds	r22, 0x010D	; 0x80010d <MappaKeys+0x7>
     676:	80 e1       	ldi	r24, 0x10	; 16
     678:	9d e0       	ldi	r25, 0x0D	; 13
     67a:	0e 94 f2 38 	call	0x71e4	; 0x71e4 <_ZN5Print5printEc>
     67e:	23 e0       	ldi	r18, 0x03	; 3
     680:	30 e0       	ldi	r19, 0x00	; 0
     682:	81 e0       	ldi	r24, 0x01	; 1
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	30 c0       	rjmp	.+96     	; 0x6e8 <_Z13getCharKeypadi+0x1b2>
     688:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <MappaKeys+0x9>
     68c:	80 e1       	ldi	r24, 0x10	; 16
     68e:	9d e0       	ldi	r25, 0x0D	; 13
     690:	0e 94 f2 38 	call	0x71e4	; 0x71e4 <_ZN5Print5printEc>
     694:	21 e0       	ldi	r18, 0x01	; 1
     696:	30 e0       	ldi	r19, 0x00	; 0
     698:	08 c0       	rjmp	.+16     	; 0x6aa <_Z13getCharKeypadi+0x174>
     69a:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <MappaKeys+0xa>
     69e:	80 e1       	ldi	r24, 0x10	; 16
     6a0:	9d e0       	ldi	r25, 0x0D	; 13
     6a2:	0e 94 f2 38 	call	0x71e4	; 0x71e4 <_ZN5Print5printEc>
     6a6:	22 e0       	ldi	r18, 0x02	; 2
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	82 e0       	ldi	r24, 0x02	; 2
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	1c c0       	rjmp	.+56     	; 0x6e8 <_Z13getCharKeypadi+0x1b2>
     6b0:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <MappaKeys+0xd>
     6b4:	80 e1       	ldi	r24, 0x10	; 16
     6b6:	9d e0       	ldi	r25, 0x0D	; 13
     6b8:	0e 94 f2 38 	call	0x71e4	; 0x71e4 <_ZN5Print5printEc>
     6bc:	21 e0       	ldi	r18, 0x01	; 1
     6be:	30 e0       	ldi	r19, 0x00	; 0
     6c0:	11 c0       	rjmp	.+34     	; 0x6e4 <_Z13getCharKeypadi+0x1ae>
     6c2:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <MappaKeys+0xe>
     6c6:	80 e1       	ldi	r24, 0x10	; 16
     6c8:	9d e0       	ldi	r25, 0x0D	; 13
     6ca:	0e 94 f2 38 	call	0x71e4	; 0x71e4 <_ZN5Print5printEc>
     6ce:	22 e0       	ldi	r18, 0x02	; 2
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	08 c0       	rjmp	.+16     	; 0x6e4 <_Z13getCharKeypadi+0x1ae>
     6d4:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <MappaKeys+0xf>
     6d8:	80 e1       	ldi	r24, 0x10	; 16
     6da:	9d e0       	ldi	r25, 0x0D	; 13
     6dc:	0e 94 f2 38 	call	0x71e4	; 0x71e4 <_ZN5Print5printEc>
     6e0:	23 e0       	ldi	r18, 0x03	; 3
     6e2:	30 e0       	ldi	r19, 0x00	; 0
     6e4:	83 e0       	ldi	r24, 0x03	; 3
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	88 0f       	add	r24, r24
     6ea:	99 1f       	adc	r25, r25
     6ec:	88 0f       	add	r24, r24
     6ee:	99 1f       	adc	r25, r25
     6f0:	8a 5f       	subi	r24, 0xFA	; 250
     6f2:	9e 4f       	sbci	r25, 0xFE	; 254
     6f4:	fc 01       	movw	r30, r24
     6f6:	e2 0f       	add	r30, r18
     6f8:	f3 1f       	adc	r31, r19
     6fa:	80 81       	ld	r24, Z
     6fc:	08 95       	ret
     6fe:	8e e4       	ldi	r24, 0x4E	; 78
     700:	08 95       	ret

00000702 <_Z10displayLCDP6Stringii>:
     702:	cf 93       	push	r28
     704:	df 93       	push	r29
     706:	ec 01       	movw	r28, r24
     708:	89 e4       	ldi	r24, 0x49	; 73
     70a:	9b e0       	ldi	r25, 0x0B	; 11
     70c:	0e 94 61 30 	call	0x60c2	; 0x60c2 <_ZN3LCD5clearEv>
     710:	61 e0       	ldi	r22, 0x01	; 1
     712:	89 e4       	ldi	r24, 0x49	; 73
     714:	9b e0       	ldi	r25, 0x0B	; 11
     716:	0e 94 f2 38 	call	0x71e4	; 0x71e4 <_ZN5Print5printEc>
     71a:	41 e0       	ldi	r20, 0x01	; 1
     71c:	60 e0       	ldi	r22, 0x00	; 0
     71e:	89 e4       	ldi	r24, 0x49	; 73
     720:	9b e0       	ldi	r25, 0x0B	; 11
     722:	0e 94 67 30 	call	0x60ce	; 0x60ce <_ZN3LCD9setCursorEhh>
     726:	be 01       	movw	r22, r28
     728:	6a 5f       	subi	r22, 0xFA	; 250
     72a:	7f 4f       	sbci	r23, 0xFF	; 255
     72c:	89 e4       	ldi	r24, 0x49	; 73
     72e:	9b e0       	ldi	r25, 0x0B	; 11
     730:	0e 94 e3 38 	call	0x71c6	; 0x71c6 <_ZN5Print5printERK6String>
     734:	42 e0       	ldi	r20, 0x02	; 2
     736:	60 e0       	ldi	r22, 0x00	; 0
     738:	89 e4       	ldi	r24, 0x49	; 73
     73a:	9b e0       	ldi	r25, 0x0B	; 11
     73c:	0e 94 67 30 	call	0x60ce	; 0x60ce <_ZN3LCD9setCursorEhh>
     740:	be 01       	movw	r22, r28
     742:	64 5f       	subi	r22, 0xF4	; 244
     744:	7f 4f       	sbci	r23, 0xFF	; 255
     746:	89 e4       	ldi	r24, 0x49	; 73
     748:	9b e0       	ldi	r25, 0x0B	; 11
     74a:	0e 94 e3 38 	call	0x71c6	; 0x71c6 <_ZN5Print5printERK6String>
     74e:	43 e0       	ldi	r20, 0x03	; 3
     750:	60 e0       	ldi	r22, 0x00	; 0
     752:	89 e4       	ldi	r24, 0x49	; 73
     754:	9b e0       	ldi	r25, 0x0B	; 11
     756:	0e 94 67 30 	call	0x60ce	; 0x60ce <_ZN3LCD9setCursorEhh>
     75a:	be 01       	movw	r22, r28
     75c:	6e 5e       	subi	r22, 0xEE	; 238
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	89 e4       	ldi	r24, 0x49	; 73
     762:	9b e0       	ldi	r25, 0x0B	; 11
     764:	df 91       	pop	r29
     766:	cf 91       	pop	r28
     768:	0c 94 e3 38 	jmp	0x71c6	; 0x71c6 <_ZN5Print5printERK6String>

0000076c <_Z11avanzaStatom>:
     76c:	cf 92       	push	r12
     76e:	df 92       	push	r13
     770:	ef 92       	push	r14
     772:	ff 92       	push	r15
     774:	6b 01       	movw	r12, r22
     776:	7c 01       	movw	r14, r24
     778:	89 e4       	ldi	r24, 0x49	; 73
     77a:	9b e0       	ldi	r25, 0x0B	; 11
     77c:	0e 94 61 30 	call	0x60c2	; 0x60c2 <_ZN3LCD5clearEv>
     780:	60 91 22 0b 	lds	r22, 0x0B22	; 0x800b22 <stato_procedura>
     784:	70 91 23 0b 	lds	r23, 0x0B23	; 0x800b23 <stato_procedura+0x1>
     788:	4a e0       	ldi	r20, 0x0A	; 10
     78a:	50 e0       	ldi	r21, 0x00	; 0
     78c:	81 ed       	ldi	r24, 0xD1	; 209
     78e:	9a e0       	ldi	r25, 0x0A	; 10
     790:	b8 df       	rcall	.-144    	; 0x702 <_Z10displayLCDP6Stringii>
     792:	c0 92 87 0a 	sts	0x0A87, r12	; 0x800a87 <Timer>
     796:	d0 92 88 0a 	sts	0x0A88, r13	; 0x800a88 <Timer+0x1>
     79a:	e0 92 89 0a 	sts	0x0A89, r14	; 0x800a89 <Timer+0x2>
     79e:	f0 92 8a 0a 	sts	0x0A8A, r15	; 0x800a8a <Timer+0x3>
     7a2:	8f e1       	ldi	r24, 0x1F	; 31
     7a4:	9e e4       	ldi	r25, 0x4E	; 78
     7a6:	01 97       	sbiw	r24, 0x01	; 1
     7a8:	f1 f7       	brne	.-4      	; 0x7a6 <_Z11avanzaStatom+0x3a>
     7aa:	00 c0       	rjmp	.+0      	; 0x7ac <_Z11avanzaStatom+0x40>
     7ac:	00 00       	nop
     7ae:	81 e8       	ldi	r24, 0x81	; 129
     7b0:	9a e0       	ldi	r25, 0x0A	; 10
     7b2:	0e 94 f4 22 	call	0x45e8	; 0x45e8 <_ZNK8DateTime11secondstimeEv>
     7b6:	60 93 8b 0a 	sts	0x0A8B, r22	; 0x800a8b <UltimoPassaggioStato>
     7ba:	70 93 8c 0a 	sts	0x0A8C, r23	; 0x800a8c <UltimoPassaggioStato+0x1>
     7be:	80 93 8d 0a 	sts	0x0A8D, r24	; 0x800a8d <UltimoPassaggioStato+0x2>
     7c2:	90 93 8e 0a 	sts	0x0A8E, r25	; 0x800a8e <UltimoPassaggioStato+0x3>
     7c6:	8f e1       	ldi	r24, 0x1F	; 31
     7c8:	9e e4       	ldi	r25, 0x4E	; 78
     7ca:	01 97       	sbiw	r24, 0x01	; 1
     7cc:	f1 f7       	brne	.-4      	; 0x7ca <_Z11avanzaStatom+0x5e>
     7ce:	00 c0       	rjmp	.+0      	; 0x7d0 <_Z11avanzaStatom+0x64>
     7d0:	00 00       	nop
     7d2:	80 91 22 0b 	lds	r24, 0x0B22	; 0x800b22 <stato_procedura>
     7d6:	90 91 23 0b 	lds	r25, 0x0B23	; 0x800b23 <stato_procedura+0x1>
     7da:	01 96       	adiw	r24, 0x01	; 1
     7dc:	90 93 23 0b 	sts	0x0B23, r25	; 0x800b23 <stato_procedura+0x1>
     7e0:	80 93 22 0b 	sts	0x0B22, r24	; 0x800b22 <stato_procedura>
     7e4:	ff 90       	pop	r15
     7e6:	ef 90       	pop	r14
     7e8:	df 90       	pop	r13
     7ea:	cf 90       	pop	r12
     7ec:	08 95       	ret

000007ee <_Z16scrivi_TAG_MezzoPc>:
     7ee:	8f 92       	push	r8
     7f0:	9f 92       	push	r9
     7f2:	af 92       	push	r10
     7f4:	bf 92       	push	r11
     7f6:	cf 92       	push	r12
     7f8:	df 92       	push	r13
     7fa:	ef 92       	push	r14
     7fc:	0f 93       	push	r16
     7fe:	1f 93       	push	r17
     800:	cf 93       	push	r28
     802:	df 93       	push	r29
     804:	cd b7       	in	r28, 0x3d	; 61
     806:	de b7       	in	r29, 0x3e	; 62
     808:	a2 97       	sbiw	r28, 0x22	; 34
     80a:	0f b6       	in	r0, 0x3f	; 63
     80c:	f8 94       	cli
     80e:	de bf       	out	0x3e, r29	; 62
     810:	0f be       	out	0x3f, r0	; 63
     812:	cd bf       	out	0x3d, r28	; 61
     814:	5c 01       	movw	r10, r24
     816:	4b 01       	movw	r8, r22
     818:	6a ee       	ldi	r22, 0xEA	; 234
     81a:	71 e0       	ldi	r23, 0x01	; 1
     81c:	ce 01       	movw	r24, r28
     81e:	4d 96       	adiw	r24, 0x1d	; 29
     820:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
     824:	08 ec       	ldi	r16, 0xC8	; 200
     826:	10 e0       	ldi	r17, 0x00	; 0
     828:	29 e6       	ldi	r18, 0x69	; 105
     82a:	3b e0       	ldi	r19, 0x0B	; 11
     82c:	42 e6       	ldi	r20, 0x62	; 98
     82e:	5b e0       	ldi	r21, 0x0B	; 11
     830:	60 e0       	ldi	r22, 0x00	; 0
     832:	82 e3       	ldi	r24, 0x32	; 50
     834:	9b e0       	ldi	r25, 0x0B	; 11
     836:	0e 94 67 20 	call	0x40ce	; 0x40ce <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j>
     83a:	80 93 6a 0b 	sts	0x0B6A, r24	; 0x800b6a <success>
     83e:	88 23       	and	r24, r24
     840:	09 f4       	brne	.+2      	; 0x844 <_Z16scrivi_TAG_MezzoPc+0x56>
     842:	a3 c0       	rjmp	.+326    	; 0x98a <_Z16scrivi_TAG_MezzoPc+0x19c>
     844:	80 91 69 0b 	lds	r24, 0x0B69	; 0x800b69 <uidLength>
     848:	84 30       	cpi	r24, 0x04	; 4
     84a:	09 f0       	breq	.+2      	; 0x84e <_Z16scrivi_TAG_MezzoPc+0x60>
     84c:	98 c0       	rjmp	.+304    	; 0x97e <_Z16scrivi_TAG_MezzoPc+0x190>
     84e:	86 e0       	ldi	r24, 0x06	; 6
     850:	e7 e6       	ldi	r30, 0x67	; 103
     852:	f1 e0       	ldi	r31, 0x01	; 1
     854:	de 01       	movw	r26, r28
     856:	57 96       	adiw	r26, 0x17	; 23
     858:	01 90       	ld	r0, Z+
     85a:	0d 92       	st	X+, r0
     85c:	8a 95       	dec	r24
     85e:	e1 f7       	brne	.-8      	; 0x858 <_Z16scrivi_TAG_MezzoPc+0x6a>
     860:	ce 01       	movw	r24, r28
     862:	47 96       	adiw	r24, 0x17	; 23
     864:	6c 01       	movw	r12, r24
     866:	e1 2c       	mov	r14, r1
     868:	04 e0       	ldi	r16, 0x04	; 4
     86a:	10 e0       	ldi	r17, 0x00	; 0
     86c:	20 e0       	ldi	r18, 0x00	; 0
     86e:	30 e0       	ldi	r19, 0x00	; 0
     870:	44 e0       	ldi	r20, 0x04	; 4
     872:	62 e6       	ldi	r22, 0x62	; 98
     874:	7b e0       	ldi	r23, 0x0B	; 11
     876:	82 e3       	ldi	r24, 0x32	; 50
     878:	9b e0       	ldi	r25, 0x0B	; 11
     87a:	0e 94 bb 20 	call	0x4176	; 0x4176 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_>
     87e:	80 93 6a 0b 	sts	0x0B6A, r24	; 0x800b6a <success>
     882:	88 23       	and	r24, r24
     884:	09 f4       	brne	.+2      	; 0x888 <_Z16scrivi_TAG_MezzoPc+0x9a>
     886:	6b c0       	rjmp	.+214    	; 0x95e <_Z16scrivi_TAG_MezzoPc+0x170>
     888:	80 e1       	ldi	r24, 0x10	; 16
     88a:	f4 01       	movw	r30, r8
     88c:	de 01       	movw	r26, r28
     88e:	11 96       	adiw	r26, 0x01	; 1
     890:	01 90       	ld	r0, Z+
     892:	0d 92       	st	X+, r0
     894:	8a 95       	dec	r24
     896:	e1 f7       	brne	.-8      	; 0x890 <_Z16scrivi_TAG_MezzoPc+0xa2>
     898:	ae 01       	movw	r20, r28
     89a:	4f 5f       	subi	r20, 0xFF	; 255
     89c:	5f 4f       	sbci	r21, 0xFF	; 255
     89e:	64 e0       	ldi	r22, 0x04	; 4
     8a0:	82 e3       	ldi	r24, 0x32	; 50
     8a2:	9b e0       	ldi	r25, 0x0B	; 11
     8a4:	0e 94 4e 21 	call	0x429c	; 0x429c <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh>
     8a8:	80 93 6a 0b 	sts	0x0B6A, r24	; 0x800b6a <success>
     8ac:	9f ef       	ldi	r25, 0xFF	; 255
     8ae:	21 ee       	ldi	r18, 0xE1	; 225
     8b0:	84 e0       	ldi	r24, 0x04	; 4
     8b2:	91 50       	subi	r25, 0x01	; 1
     8b4:	20 40       	sbci	r18, 0x00	; 0
     8b6:	80 40       	sbci	r24, 0x00	; 0
     8b8:	e1 f7       	brne	.-8      	; 0x8b2 <_Z16scrivi_TAG_MezzoPc+0xc4>
     8ba:	00 c0       	rjmp	.+0      	; 0x8bc <_Z16scrivi_TAG_MezzoPc+0xce>
     8bc:	00 00       	nop
     8be:	ae 01       	movw	r20, r28
     8c0:	4f 5f       	subi	r20, 0xFF	; 255
     8c2:	5f 4f       	sbci	r21, 0xFF	; 255
     8c4:	64 e0       	ldi	r22, 0x04	; 4
     8c6:	82 e3       	ldi	r24, 0x32	; 50
     8c8:	9b e0       	ldi	r25, 0x0B	; 11
     8ca:	0e 94 1b 21 	call	0x4236	; 0x4236 <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh>
     8ce:	80 93 6a 0b 	sts	0x0B6A, r24	; 0x800b6a <success>
     8d2:	6c e4       	ldi	r22, 0x4C	; 76
     8d4:	72 e0       	ldi	r23, 0x02	; 2
     8d6:	80 e1       	ldi	r24, 0x10	; 16
     8d8:	9d e0       	ldi	r25, 0x0D	; 13
     8da:	0e 94 1c 39 	call	0x7238	; 0x7238 <_ZN5Print7printlnEPKc>
     8de:	be 01       	movw	r22, r28
     8e0:	6f 5f       	subi	r22, 0xFF	; 255
     8e2:	7f 4f       	sbci	r23, 0xFF	; 255
     8e4:	ce 01       	movw	r24, r28
     8e6:	41 96       	adiw	r24, 0x11	; 17
     8e8:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
     8ec:	80 91 6a 0b 	lds	r24, 0x0B6A	; 0x800b6a <success>
     8f0:	88 23       	and	r24, r24
     8f2:	01 f1       	breq	.+64     	; 0x934 <_Z16scrivi_TAG_MezzoPc+0x146>
     8f4:	be 01       	movw	r22, r28
     8f6:	6f 5e       	subi	r22, 0xEF	; 239
     8f8:	7f 4f       	sbci	r23, 0xFF	; 255
     8fa:	80 e1       	ldi	r24, 0x10	; 16
     8fc:	9d e0       	ldi	r25, 0x0D	; 13
     8fe:	0e 94 0c 39 	call	0x7218	; 0x7218 <_ZN5Print7printlnERK6String>
     902:	8d 89       	ldd	r24, Y+21	; 0x15
     904:	9e 89       	ldd	r25, Y+22	; 0x16
     906:	06 97       	sbiw	r24, 0x06	; 6
     908:	59 f4       	brne	.+22     	; 0x920 <_Z16scrivi_TAG_MezzoPc+0x132>
     90a:	be 01       	movw	r22, r28
     90c:	6f 5e       	subi	r22, 0xEF	; 239
     90e:	7f 4f       	sbci	r23, 0xFF	; 255
     910:	c5 01       	movw	r24, r10
     912:	0e 94 06 3c 	call	0x780c	; 0x780c <_ZN6StringC1EOS_>
     916:	ce 01       	movw	r24, r28
     918:	41 96       	adiw	r24, 0x11	; 17
     91a:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
     91e:	3b c0       	rjmp	.+118    	; 0x996 <_Z16scrivi_TAG_MezzoPc+0x1a8>
     920:	9f ef       	ldi	r25, 0xFF	; 255
     922:	21 ee       	ldi	r18, 0xE1	; 225
     924:	84 e0       	ldi	r24, 0x04	; 4
     926:	91 50       	subi	r25, 0x01	; 1
     928:	20 40       	sbci	r18, 0x00	; 0
     92a:	80 40       	sbci	r24, 0x00	; 0
     92c:	e1 f7       	brne	.-8      	; 0x926 <_Z16scrivi_TAG_MezzoPc+0x138>
     92e:	00 c0       	rjmp	.+0      	; 0x930 <_Z16scrivi_TAG_MezzoPc+0x142>
     930:	00 00       	nop
     932:	10 c0       	rjmp	.+32     	; 0x954 <_Z16scrivi_TAG_MezzoPc+0x166>
     934:	89 e4       	ldi	r24, 0x49	; 73
     936:	9b e0       	ldi	r25, 0x0B	; 11
     938:	0e 94 61 30 	call	0x60c2	; 0x60c2 <_ZN3LCD5clearEv>
     93c:	41 e0       	ldi	r20, 0x01	; 1
     93e:	60 e0       	ldi	r22, 0x00	; 0
     940:	89 e4       	ldi	r24, 0x49	; 73
     942:	9b e0       	ldi	r25, 0x0B	; 11
     944:	0e 94 67 30 	call	0x60ce	; 0x60ce <_ZN3LCD9setCursorEhh>
     948:	6a e5       	ldi	r22, 0x5A	; 90
     94a:	72 e0       	ldi	r23, 0x02	; 2
     94c:	89 e4       	ldi	r24, 0x49	; 73
     94e:	9b e0       	ldi	r25, 0x0B	; 11
     950:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN5Print5printEPKc>
     954:	ce 01       	movw	r24, r28
     956:	41 96       	adiw	r24, 0x11	; 17
     958:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
     95c:	10 c0       	rjmp	.+32     	; 0x97e <_Z16scrivi_TAG_MezzoPc+0x190>
     95e:	89 e4       	ldi	r24, 0x49	; 73
     960:	9b e0       	ldi	r25, 0x0B	; 11
     962:	0e 94 61 30 	call	0x60c2	; 0x60c2 <_ZN3LCD5clearEv>
     966:	41 e0       	ldi	r20, 0x01	; 1
     968:	60 e0       	ldi	r22, 0x00	; 0
     96a:	89 e4       	ldi	r24, 0x49	; 73
     96c:	9b e0       	ldi	r25, 0x0B	; 11
     96e:	0e 94 67 30 	call	0x60ce	; 0x60ce <_ZN3LCD9setCursorEhh>
     972:	64 e6       	ldi	r22, 0x64	; 100
     974:	72 e0       	ldi	r23, 0x02	; 2
     976:	89 e4       	ldi	r24, 0x49	; 73
     978:	9b e0       	ldi	r25, 0x0B	; 11
     97a:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN5Print5printEPKc>
     97e:	6a ee       	ldi	r22, 0xEA	; 234
     980:	71 e0       	ldi	r23, 0x01	; 1
     982:	80 e1       	ldi	r24, 0x10	; 16
     984:	9d e0       	ldi	r25, 0x0D	; 13
     986:	0e 94 1c 39 	call	0x7238	; 0x7238 <_ZN5Print7printlnEPKc>
     98a:	be 01       	movw	r22, r28
     98c:	63 5e       	subi	r22, 0xE3	; 227
     98e:	7f 4f       	sbci	r23, 0xFF	; 255
     990:	c5 01       	movw	r24, r10
     992:	0e 94 06 3c 	call	0x780c	; 0x780c <_ZN6StringC1EOS_>
     996:	ce 01       	movw	r24, r28
     998:	4d 96       	adiw	r24, 0x1d	; 29
     99a:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
     99e:	c5 01       	movw	r24, r10
     9a0:	a2 96       	adiw	r28, 0x22	; 34
     9a2:	0f b6       	in	r0, 0x3f	; 63
     9a4:	f8 94       	cli
     9a6:	de bf       	out	0x3e, r29	; 62
     9a8:	0f be       	out	0x3f, r0	; 63
     9aa:	cd bf       	out	0x3d, r28	; 61
     9ac:	df 91       	pop	r29
     9ae:	cf 91       	pop	r28
     9b0:	1f 91       	pop	r17
     9b2:	0f 91       	pop	r16
     9b4:	ef 90       	pop	r14
     9b6:	df 90       	pop	r13
     9b8:	cf 90       	pop	r12
     9ba:	bf 90       	pop	r11
     9bc:	af 90       	pop	r10
     9be:	9f 90       	pop	r9
     9c0:	8f 90       	pop	r8
     9c2:	08 95       	ret

000009c4 <_Z14leggiTAG_Mezzob>:
     9c4:	af 92       	push	r10
     9c6:	bf 92       	push	r11
     9c8:	cf 92       	push	r12
     9ca:	df 92       	push	r13
     9cc:	ef 92       	push	r14
     9ce:	ff 92       	push	r15
     9d0:	0f 93       	push	r16
     9d2:	1f 93       	push	r17
     9d4:	cf 93       	push	r28
     9d6:	df 93       	push	r29
     9d8:	cd b7       	in	r28, 0x3d	; 61
     9da:	de b7       	in	r29, 0x3e	; 62
     9dc:	a2 97       	sbiw	r28, 0x22	; 34
     9de:	0f b6       	in	r0, 0x3f	; 63
     9e0:	f8 94       	cli
     9e2:	de bf       	out	0x3e, r29	; 62
     9e4:	0f be       	out	0x3f, r0	; 63
     9e6:	cd bf       	out	0x3d, r28	; 61
     9e8:	5c 01       	movw	r10, r24
     9ea:	f6 2e       	mov	r15, r22
     9ec:	6a ee       	ldi	r22, 0xEA	; 234
     9ee:	71 e0       	ldi	r23, 0x01	; 1
     9f0:	ce 01       	movw	r24, r28
     9f2:	4d 96       	adiw	r24, 0x1d	; 29
     9f4:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
     9f8:	08 ec       	ldi	r16, 0xC8	; 200
     9fa:	10 e0       	ldi	r17, 0x00	; 0
     9fc:	29 e6       	ldi	r18, 0x69	; 105
     9fe:	3b e0       	ldi	r19, 0x0B	; 11
     a00:	42 e6       	ldi	r20, 0x62	; 98
     a02:	5b e0       	ldi	r21, 0x0B	; 11
     a04:	60 e0       	ldi	r22, 0x00	; 0
     a06:	82 e3       	ldi	r24, 0x32	; 50
     a08:	9b e0       	ldi	r25, 0x0B	; 11
     a0a:	0e 94 67 20 	call	0x40ce	; 0x40ce <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j>
     a0e:	80 93 6a 0b 	sts	0x0B6A, r24	; 0x800b6a <success>
     a12:	88 23       	and	r24, r24
     a14:	09 f4       	brne	.+2      	; 0xa18 <_Z14leggiTAG_Mezzob+0x54>
     a16:	9d c0       	rjmp	.+314    	; 0xb52 <_Z14leggiTAG_Mezzob+0x18e>
     a18:	4e e1       	ldi	r20, 0x1E	; 30
     a1a:	50 e0       	ldi	r21, 0x00	; 0
     a1c:	60 e0       	ldi	r22, 0x00	; 0
     a1e:	70 e0       	ldi	r23, 0x00	; 0
     a20:	82 e0       	ldi	r24, 0x02	; 2
     a22:	6b dd       	rcall	.-1322   	; 0x4fa <_Z6Buzzerhm>
     a24:	80 91 69 0b 	lds	r24, 0x0B69	; 0x800b69 <uidLength>
     a28:	84 30       	cpi	r24, 0x04	; 4
     a2a:	09 f0       	breq	.+2      	; 0xa2e <_Z14leggiTAG_Mezzob+0x6a>
     a2c:	8c c0       	rjmp	.+280    	; 0xb46 <_Z14leggiTAG_Mezzob+0x182>
     a2e:	86 e0       	ldi	r24, 0x06	; 6
     a30:	e7 e6       	ldi	r30, 0x67	; 103
     a32:	f1 e0       	ldi	r31, 0x01	; 1
     a34:	de 01       	movw	r26, r28
     a36:	57 96       	adiw	r26, 0x17	; 23
     a38:	01 90       	ld	r0, Z+
     a3a:	0d 92       	st	X+, r0
     a3c:	8a 95       	dec	r24
     a3e:	e1 f7       	brne	.-8      	; 0xa38 <_Z14leggiTAG_Mezzob+0x74>
     a40:	ce 01       	movw	r24, r28
     a42:	47 96       	adiw	r24, 0x17	; 23
     a44:	6c 01       	movw	r12, r24
     a46:	e1 2c       	mov	r14, r1
     a48:	04 e0       	ldi	r16, 0x04	; 4
     a4a:	10 e0       	ldi	r17, 0x00	; 0
     a4c:	20 e0       	ldi	r18, 0x00	; 0
     a4e:	30 e0       	ldi	r19, 0x00	; 0
     a50:	44 e0       	ldi	r20, 0x04	; 4
     a52:	62 e6       	ldi	r22, 0x62	; 98
     a54:	7b e0       	ldi	r23, 0x0B	; 11
     a56:	82 e3       	ldi	r24, 0x32	; 50
     a58:	9b e0       	ldi	r25, 0x0B	; 11
     a5a:	0e 94 bb 20 	call	0x4176	; 0x4176 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_>
     a5e:	80 93 6a 0b 	sts	0x0B6A, r24	; 0x800b6a <success>
     a62:	88 23       	and	r24, r24
     a64:	09 f4       	brne	.+2      	; 0xa68 <_Z14leggiTAG_Mezzob+0xa4>
     a66:	5f c0       	rjmp	.+190    	; 0xb26 <_Z14leggiTAG_Mezzob+0x162>
     a68:	ff 20       	and	r15, r15
     a6a:	99 f0       	breq	.+38     	; 0xa92 <_Z14leggiTAG_Mezzob+0xce>
     a6c:	80 e1       	ldi	r24, 0x10	; 16
     a6e:	e1 eb       	ldi	r30, 0xB1	; 177
     a70:	f9 e0       	ldi	r31, 0x09	; 9
     a72:	de 01       	movw	r26, r28
     a74:	11 96       	adiw	r26, 0x01	; 1
     a76:	01 90       	ld	r0, Z+
     a78:	0d 92       	st	X+, r0
     a7a:	8a 95       	dec	r24
     a7c:	e1 f7       	brne	.-8      	; 0xa76 <_Z14leggiTAG_Mezzob+0xb2>
     a7e:	ae 01       	movw	r20, r28
     a80:	4f 5f       	subi	r20, 0xFF	; 255
     a82:	5f 4f       	sbci	r21, 0xFF	; 255
     a84:	64 e0       	ldi	r22, 0x04	; 4
     a86:	82 e3       	ldi	r24, 0x32	; 50
     a88:	9b e0       	ldi	r25, 0x0B	; 11
     a8a:	0e 94 4e 21 	call	0x429c	; 0x429c <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh>
     a8e:	80 93 6a 0b 	sts	0x0B6A, r24	; 0x800b6a <success>
     a92:	ae 01       	movw	r20, r28
     a94:	4f 5f       	subi	r20, 0xFF	; 255
     a96:	5f 4f       	sbci	r21, 0xFF	; 255
     a98:	64 e0       	ldi	r22, 0x04	; 4
     a9a:	82 e3       	ldi	r24, 0x32	; 50
     a9c:	9b e0       	ldi	r25, 0x0B	; 11
     a9e:	0e 94 1b 21 	call	0x4236	; 0x4236 <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh>
     aa2:	80 93 6a 0b 	sts	0x0B6A, r24	; 0x800b6a <success>
     aa6:	88 23       	and	r24, r24
     aa8:	89 f1       	breq	.+98     	; 0xb0c <_Z14leggiTAG_Mezzob+0x148>
     aaa:	6c e4       	ldi	r22, 0x4C	; 76
     aac:	72 e0       	ldi	r23, 0x02	; 2
     aae:	80 e1       	ldi	r24, 0x10	; 16
     ab0:	9d e0       	ldi	r25, 0x0D	; 13
     ab2:	0e 94 1c 39 	call	0x7238	; 0x7238 <_ZN5Print7printlnEPKc>
     ab6:	be 01       	movw	r22, r28
     ab8:	6f 5f       	subi	r22, 0xFF	; 255
     aba:	7f 4f       	sbci	r23, 0xFF	; 255
     abc:	ce 01       	movw	r24, r28
     abe:	41 96       	adiw	r24, 0x11	; 17
     ac0:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
     ac4:	be 01       	movw	r22, r28
     ac6:	6f 5e       	subi	r22, 0xEF	; 239
     ac8:	7f 4f       	sbci	r23, 0xFF	; 255
     aca:	80 e1       	ldi	r24, 0x10	; 16
     acc:	9d e0       	ldi	r25, 0x0D	; 13
     ace:	0e 94 0c 39 	call	0x7218	; 0x7218 <_ZN5Print7printlnERK6String>
     ad2:	8d 89       	ldd	r24, Y+21	; 0x15
     ad4:	9e 89       	ldd	r25, Y+22	; 0x16
     ad6:	06 97       	sbiw	r24, 0x06	; 6
     ad8:	59 f4       	brne	.+22     	; 0xaf0 <_Z14leggiTAG_Mezzob+0x12c>
     ada:	be 01       	movw	r22, r28
     adc:	6f 5e       	subi	r22, 0xEF	; 239
     ade:	7f 4f       	sbci	r23, 0xFF	; 255
     ae0:	c5 01       	movw	r24, r10
     ae2:	0e 94 06 3c 	call	0x780c	; 0x780c <_ZN6StringC1EOS_>
     ae6:	ce 01       	movw	r24, r28
     ae8:	41 96       	adiw	r24, 0x11	; 17
     aea:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
     aee:	37 c0       	rjmp	.+110    	; 0xb5e <_Z14leggiTAG_Mezzob+0x19a>
     af0:	9f ef       	ldi	r25, 0xFF	; 255
     af2:	21 ee       	ldi	r18, 0xE1	; 225
     af4:	84 e0       	ldi	r24, 0x04	; 4
     af6:	91 50       	subi	r25, 0x01	; 1
     af8:	20 40       	sbci	r18, 0x00	; 0
     afa:	80 40       	sbci	r24, 0x00	; 0
     afc:	e1 f7       	brne	.-8      	; 0xaf6 <_Z14leggiTAG_Mezzob+0x132>
     afe:	00 c0       	rjmp	.+0      	; 0xb00 <_Z14leggiTAG_Mezzob+0x13c>
     b00:	00 00       	nop
     b02:	ce 01       	movw	r24, r28
     b04:	41 96       	adiw	r24, 0x11	; 17
     b06:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
     b0a:	1d c0       	rjmp	.+58     	; 0xb46 <_Z14leggiTAG_Mezzob+0x182>
     b0c:	89 e4       	ldi	r24, 0x49	; 73
     b0e:	9b e0       	ldi	r25, 0x0B	; 11
     b10:	0e 94 61 30 	call	0x60c2	; 0x60c2 <_ZN3LCD5clearEv>
     b14:	41 e0       	ldi	r20, 0x01	; 1
     b16:	60 e0       	ldi	r22, 0x00	; 0
     b18:	89 e4       	ldi	r24, 0x49	; 73
     b1a:	9b e0       	ldi	r25, 0x0B	; 11
     b1c:	0e 94 67 30 	call	0x60ce	; 0x60ce <_ZN3LCD9setCursorEhh>
     b20:	6c e6       	ldi	r22, 0x6C	; 108
     b22:	72 e0       	ldi	r23, 0x02	; 2
     b24:	0c c0       	rjmp	.+24     	; 0xb3e <_Z14leggiTAG_Mezzob+0x17a>
     b26:	89 e4       	ldi	r24, 0x49	; 73
     b28:	9b e0       	ldi	r25, 0x0B	; 11
     b2a:	0e 94 61 30 	call	0x60c2	; 0x60c2 <_ZN3LCD5clearEv>
     b2e:	41 e0       	ldi	r20, 0x01	; 1
     b30:	60 e0       	ldi	r22, 0x00	; 0
     b32:	89 e4       	ldi	r24, 0x49	; 73
     b34:	9b e0       	ldi	r25, 0x0B	; 11
     b36:	0e 94 67 30 	call	0x60ce	; 0x60ce <_ZN3LCD9setCursorEhh>
     b3a:	69 e7       	ldi	r22, 0x79	; 121
     b3c:	72 e0       	ldi	r23, 0x02	; 2
     b3e:	89 e4       	ldi	r24, 0x49	; 73
     b40:	9b e0       	ldi	r25, 0x0B	; 11
     b42:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN5Print5printEPKc>
     b46:	6a ee       	ldi	r22, 0xEA	; 234
     b48:	71 e0       	ldi	r23, 0x01	; 1
     b4a:	80 e1       	ldi	r24, 0x10	; 16
     b4c:	9d e0       	ldi	r25, 0x0D	; 13
     b4e:	0e 94 1c 39 	call	0x7238	; 0x7238 <_ZN5Print7printlnEPKc>
     b52:	be 01       	movw	r22, r28
     b54:	63 5e       	subi	r22, 0xE3	; 227
     b56:	7f 4f       	sbci	r23, 0xFF	; 255
     b58:	c5 01       	movw	r24, r10
     b5a:	0e 94 06 3c 	call	0x780c	; 0x780c <_ZN6StringC1EOS_>
     b5e:	ce 01       	movw	r24, r28
     b60:	4d 96       	adiw	r24, 0x1d	; 29
     b62:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
     b66:	c5 01       	movw	r24, r10
     b68:	a2 96       	adiw	r28, 0x22	; 34
     b6a:	0f b6       	in	r0, 0x3f	; 63
     b6c:	f8 94       	cli
     b6e:	de bf       	out	0x3e, r29	; 62
     b70:	0f be       	out	0x3f, r0	; 63
     b72:	cd bf       	out	0x3d, r28	; 61
     b74:	df 91       	pop	r29
     b76:	cf 91       	pop	r28
     b78:	1f 91       	pop	r17
     b7a:	0f 91       	pop	r16
     b7c:	ff 90       	pop	r15
     b7e:	ef 90       	pop	r14
     b80:	df 90       	pop	r13
     b82:	cf 90       	pop	r12
     b84:	bf 90       	pop	r11
     b86:	af 90       	pop	r10
     b88:	08 95       	ret

00000b8a <_Z14GetCodeRfidATev>:
     b8a:	cf 92       	push	r12
     b8c:	df 92       	push	r13
     b8e:	ef 92       	push	r14
     b90:	ff 92       	push	r15
     b92:	0f 93       	push	r16
     b94:	1f 93       	push	r17
     b96:	cf 93       	push	r28
     b98:	df 93       	push	r29
     b9a:	cd b7       	in	r28, 0x3d	; 61
     b9c:	de b7       	in	r29, 0x3e	; 62
     b9e:	64 97       	sbiw	r28, 0x14	; 20
     ba0:	0f b6       	in	r0, 0x3f	; 63
     ba2:	f8 94       	cli
     ba4:	de bf       	out	0x3e, r29	; 62
     ba6:	0f be       	out	0x3f, r0	; 63
     ba8:	cd bf       	out	0x3d, r28	; 61
     baa:	7c 01       	movw	r14, r24
     bac:	ce 01       	movw	r24, r28
     bae:	01 96       	adiw	r24, 0x01	; 1
     bb0:	6c 01       	movw	r12, r24
     bb2:	87 e0       	ldi	r24, 0x07	; 7
     bb4:	f6 01       	movw	r30, r12
     bb6:	11 92       	st	Z+, r1
     bb8:	8a 95       	dec	r24
     bba:	e9 f7       	brne	.-6      	; 0xbb6 <_Z14GetCodeRfidATev+0x2c>
     bbc:	67 e8       	ldi	r22, 0x87	; 135
     bbe:	72 e0       	ldi	r23, 0x02	; 2
     bc0:	c7 01       	movw	r24, r14
     bc2:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
     bc6:	00 e0       	ldi	r16, 0x00	; 0
     bc8:	10 e0       	ldi	r17, 0x00	; 0
     bca:	9e 01       	movw	r18, r28
     bcc:	2c 5e       	subi	r18, 0xEC	; 236
     bce:	3f 4f       	sbci	r19, 0xFF	; 255
     bd0:	a6 01       	movw	r20, r12
     bd2:	60 e0       	ldi	r22, 0x00	; 0
     bd4:	82 e3       	ldi	r24, 0x32	; 50
     bd6:	9b e0       	ldi	r25, 0x0B	; 11
     bd8:	0e 94 67 20 	call	0x40ce	; 0x40ce <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j>
     bdc:	88 23       	and	r24, r24
     bde:	59 f1       	breq	.+86     	; 0xc36 <_Z14GetCodeRfidATev+0xac>
     be0:	0c 89       	ldd	r16, Y+20	; 0x14
     be2:	10 e0       	ldi	r17, 0x00	; 0
     be4:	20 e0       	ldi	r18, 0x00	; 0
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	a6 01       	movw	r20, r12
     bea:	62 e3       	ldi	r22, 0x32	; 50
     bec:	7b e0       	ldi	r23, 0x0B	; 11
     bee:	ce 01       	movw	r24, r28
     bf0:	0e 96       	adiw	r24, 0x0e	; 14
     bf2:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <_ZN9NFC_PN53210GetHexCodeEPKhm>
     bf6:	ce 01       	movw	r24, r28
     bf8:	0e 96       	adiw	r24, 0x0e	; 14
     bfa:	0e 94 4f 3e 	call	0x7c9e	; 0x7c9e <_ZN6String4trimEv>
     bfe:	28 e0       	ldi	r18, 0x08	; 8
     c00:	30 e0       	ldi	r19, 0x00	; 0
     c02:	40 e0       	ldi	r20, 0x00	; 0
     c04:	50 e0       	ldi	r21, 0x00	; 0
     c06:	be 01       	movw	r22, r28
     c08:	62 5f       	subi	r22, 0xF2	; 242
     c0a:	7f 4f       	sbci	r23, 0xFF	; 255
     c0c:	ce 01       	movw	r24, r28
     c0e:	08 96       	adiw	r24, 0x08	; 8
     c10:	0e 94 0c 3e 	call	0x7c18	; 0x7c18 <_ZNK6String9substringEjj>
     c14:	be 01       	movw	r22, r28
     c16:	68 5f       	subi	r22, 0xF8	; 248
     c18:	7f 4f       	sbci	r23, 0xFF	; 255
     c1a:	c7 01       	movw	r24, r14
     c1c:	0e 94 2b 3c 	call	0x7856	; 0x7856 <_ZN6StringaSEOS_>
     c20:	ce 01       	movw	r24, r28
     c22:	08 96       	adiw	r24, 0x08	; 8
     c24:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	80 93 61 0b 	sts	0x0B61, r24	; 0x800b61 <alreadyTimbrata>
     c2e:	ce 01       	movw	r24, r28
     c30:	0e 96       	adiw	r24, 0x0e	; 14
     c32:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
     c36:	c7 01       	movw	r24, r14
     c38:	64 96       	adiw	r28, 0x14	; 20
     c3a:	0f b6       	in	r0, 0x3f	; 63
     c3c:	f8 94       	cli
     c3e:	de bf       	out	0x3e, r29	; 62
     c40:	0f be       	out	0x3f, r0	; 63
     c42:	cd bf       	out	0x3d, r28	; 61
     c44:	df 91       	pop	r29
     c46:	cf 91       	pop	r28
     c48:	1f 91       	pop	r17
     c4a:	0f 91       	pop	r16
     c4c:	ff 90       	pop	r15
     c4e:	ef 90       	pop	r14
     c50:	df 90       	pop	r13
     c52:	cf 90       	pop	r12
     c54:	08 95       	ret

00000c56 <_Z19GetHTTPResponseCode6String>:
     c56:	ef 92       	push	r14
     c58:	ff 92       	push	r15
     c5a:	0f 93       	push	r16
     c5c:	1f 93       	push	r17
     c5e:	cf 93       	push	r28
     c60:	df 93       	push	r29
     c62:	cd b7       	in	r28, 0x3d	; 61
     c64:	de b7       	in	r29, 0x3e	; 62
     c66:	62 97       	sbiw	r28, 0x12	; 18
     c68:	0f b6       	in	r0, 0x3f	; 63
     c6a:	f8 94       	cli
     c6c:	de bf       	out	0x3e, r29	; 62
     c6e:	0f be       	out	0x3f, r0	; 63
     c70:	cd bf       	out	0x3d, r28	; 61
     c72:	8c 01       	movw	r16, r24
     c74:	7b 01       	movw	r14, r22
     c76:	6e e8       	ldi	r22, 0x8E	; 142
     c78:	72 e0       	ldi	r23, 0x02	; 2
     c7a:	ce 01       	movw	r24, r28
     c7c:	0d 96       	adiw	r24, 0x0d	; 13
     c7e:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
     c82:	c8 db       	rcall	.-2160   	; 0x414 <_Z9printLinev>
     c84:	66 e9       	ldi	r22, 0x96	; 150
     c86:	72 e0       	ldi	r23, 0x02	; 2
     c88:	80 e1       	ldi	r24, 0x10	; 16
     c8a:	9d e0       	ldi	r25, 0x0D	; 13
     c8c:	0e 94 1c 39 	call	0x7238	; 0x7238 <_ZN5Print7printlnEPKc>
     c90:	20 91 4f 01 	lds	r18, 0x014F	; 0x80014f <HTTP_len_response>
     c94:	30 91 50 01 	lds	r19, 0x0150	; 0x800150 <HTTP_len_response+0x1>
     c98:	f7 01       	movw	r30, r14
     c9a:	84 81       	ldd	r24, Z+4	; 0x04
     c9c:	95 81       	ldd	r25, Z+5	; 0x05
     c9e:	28 17       	cp	r18, r24
     ca0:	39 07       	cpc	r19, r25
     ca2:	49 f5       	brne	.+82     	; 0xcf6 <_Z19GetHTTPResponseCode6String+0xa0>
     ca4:	a9 01       	movw	r20, r18
     ca6:	43 50       	subi	r20, 0x03	; 3
     ca8:	51 09       	sbc	r21, r1
     caa:	b7 01       	movw	r22, r14
     cac:	ce 01       	movw	r24, r28
     cae:	07 96       	adiw	r24, 0x07	; 7
     cb0:	0e 94 0c 3e 	call	0x7c18	; 0x7c18 <_ZNK6String9substringEjj>
     cb4:	6e ea       	ldi	r22, 0xAE	; 174
     cb6:	72 e0       	ldi	r23, 0x02	; 2
     cb8:	ce 01       	movw	r24, r28
     cba:	01 96       	adiw	r24, 0x01	; 1
     cbc:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
     cc0:	be 01       	movw	r22, r28
     cc2:	69 5f       	subi	r22, 0xF9	; 249
     cc4:	7f 4f       	sbci	r23, 0xFF	; 255
     cc6:	ce 01       	movw	r24, r28
     cc8:	01 96       	adiw	r24, 0x01	; 1
     cca:	0e 94 8c 3d 	call	0x7b18	; 0x7b18 <_ZplRK15StringSumHelperRK6String>
     cce:	bc 01       	movw	r22, r24
     cd0:	80 e1       	ldi	r24, 0x10	; 16
     cd2:	9d e0       	ldi	r25, 0x0D	; 13
     cd4:	0e 94 0c 39 	call	0x7218	; 0x7218 <_ZN5Print7printlnERK6String>
     cd8:	ce 01       	movw	r24, r28
     cda:	01 96       	adiw	r24, 0x01	; 1
     cdc:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
     ce0:	be 01       	movw	r22, r28
     ce2:	69 5f       	subi	r22, 0xF9	; 249
     ce4:	7f 4f       	sbci	r23, 0xFF	; 255
     ce6:	c8 01       	movw	r24, r16
     ce8:	0e 94 06 3c 	call	0x780c	; 0x780c <_ZN6StringC1EOS_>
     cec:	ce 01       	movw	r24, r28
     cee:	07 96       	adiw	r24, 0x07	; 7
     cf0:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
     cf4:	09 c0       	rjmp	.+18     	; 0xd08 <_Z19GetHTTPResponseCode6String+0xb2>
     cf6:	80 e0       	ldi	r24, 0x00	; 0
     cf8:	b1 db       	rcall	.-2206   	; 0x45c <_Z4passb>
     cfa:	8c db       	rcall	.-2280   	; 0x414 <_Z9printLinev>
     cfc:	be 01       	movw	r22, r28
     cfe:	63 5f       	subi	r22, 0xF3	; 243
     d00:	7f 4f       	sbci	r23, 0xFF	; 255
     d02:	c8 01       	movw	r24, r16
     d04:	0e 94 06 3c 	call	0x780c	; 0x780c <_ZN6StringC1EOS_>
     d08:	ce 01       	movw	r24, r28
     d0a:	0d 96       	adiw	r24, 0x0d	; 13
     d0c:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
     d10:	c8 01       	movw	r24, r16
     d12:	62 96       	adiw	r28, 0x12	; 18
     d14:	0f b6       	in	r0, 0x3f	; 63
     d16:	f8 94       	cli
     d18:	de bf       	out	0x3e, r29	; 62
     d1a:	0f be       	out	0x3f, r0	; 63
     d1c:	cd bf       	out	0x3d, r28	; 61
     d1e:	df 91       	pop	r29
     d20:	cf 91       	pop	r28
     d22:	1f 91       	pop	r17
     d24:	0f 91       	pop	r16
     d26:	ff 90       	pop	r15
     d28:	ef 90       	pop	r14
     d2a:	08 95       	ret

00000d2c <_Z11GetAteCheckiPc14EthernetClient6String>:
     d2c:	af 92       	push	r10
     d2e:	bf 92       	push	r11
     d30:	cf 92       	push	r12
     d32:	df 92       	push	r13
     d34:	ef 92       	push	r14
     d36:	ff 92       	push	r15
     d38:	0f 93       	push	r16
     d3a:	1f 93       	push	r17
     d3c:	cf 93       	push	r28
     d3e:	df 93       	push	r29
     d40:	cd b7       	in	r28, 0x3d	; 61
     d42:	de b7       	in	r29, 0x3e	; 62
     d44:	62 97       	sbiw	r28, 0x12	; 18
     d46:	0f b6       	in	r0, 0x3f	; 63
     d48:	f8 94       	cli
     d4a:	de bf       	out	0x3e, r29	; 62
     d4c:	0f be       	out	0x3f, r0	; 63
     d4e:	cd bf       	out	0x3d, r28	; 61
     d50:	5c 01       	movw	r10, r24
     d52:	7b 01       	movw	r14, r22
     d54:	8a 01       	movw	r16, r20
     d56:	69 01       	movw	r12, r18
     d58:	5d db       	rcall	.-2374   	; 0x414 <_Z9printLinev>
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	6e db       	rcall	.-2340   	; 0x43a <_Z8printTabh>
     d5e:	68 e9       	ldi	r22, 0x98	; 152
     d60:	74 e0       	ldi	r23, 0x04	; 4
     d62:	80 e1       	ldi	r24, 0x10	; 16
     d64:	9d e0       	ldi	r25, 0x0D	; 13
     d66:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN5Print5printEPKc>
     d6a:	a5 01       	movw	r20, r10
     d6c:	b7 01       	movw	r22, r14
     d6e:	c8 01       	movw	r24, r16
     d70:	0e 94 8a 28 	call	0x5114	; 0x5114 <_ZN14EthernetClient7connectEPKcj>
     d74:	89 2b       	or	r24, r25
     d76:	09 f4       	brne	.+2      	; 0xd7a <_Z11GetAteCheckiPc14EthernetClient6String+0x4e>
     d78:	c3 c0       	rjmp	.+390    	; 0xf00 <_Z11GetAteCheckiPc14EthernetClient6String+0x1d4>
     d7a:	2f ef       	ldi	r18, 0xFF	; 255
     d7c:	81 ee       	ldi	r24, 0xE1	; 225
     d7e:	94 e0       	ldi	r25, 0x04	; 4
     d80:	21 50       	subi	r18, 0x01	; 1
     d82:	80 40       	sbci	r24, 0x00	; 0
     d84:	90 40       	sbci	r25, 0x00	; 0
     d86:	e1 f7       	brne	.-8      	; 0xd80 <_Z11GetAteCheckiPc14EthernetClient6String+0x54>
     d88:	00 c0       	rjmp	.+0      	; 0xd8a <_Z11GetAteCheckiPc14EthernetClient6String+0x5e>
     d8a:	00 00       	nop
     d8c:	65 ed       	ldi	r22, 0xD5	; 213
     d8e:	74 e0       	ldi	r23, 0x04	; 4
     d90:	ce 01       	movw	r24, r28
     d92:	01 96       	adiw	r24, 0x01	; 1
     d94:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
     d98:	b6 01       	movw	r22, r12
     d9a:	ce 01       	movw	r24, r28
     d9c:	01 96       	adiw	r24, 0x01	; 1
     d9e:	0e 94 8c 3d 	call	0x7b18	; 0x7b18 <_ZplRK15StringSumHelperRK6String>
     da2:	6f e0       	ldi	r22, 0x0F	; 15
     da4:	73 e0       	ldi	r23, 0x03	; 3
     da6:	0e 94 9d 3d 	call	0x7b3a	; 0x7b3a <_ZplRK15StringSumHelperPKc>
     daa:	bc 01       	movw	r22, r24
     dac:	86 e2       	ldi	r24, 0x26	; 38
     dae:	9b e0       	ldi	r25, 0x0B	; 11
     db0:	0e 94 0e 3c 	call	0x781c	; 0x781c <_ZN6StringaSERKS_>
     db4:	ce 01       	movw	r24, r28
     db6:	01 96       	adiw	r24, 0x01	; 1
     db8:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
     dbc:	b7 01       	movw	r22, r14
     dbe:	ce 01       	movw	r24, r28
     dc0:	01 96       	adiw	r24, 0x01	; 1
     dc2:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
     dc6:	62 e0       	ldi	r22, 0x02	; 2
     dc8:	75 e0       	ldi	r23, 0x05	; 5
     dca:	ce 01       	movw	r24, r28
     dcc:	07 96       	adiw	r24, 0x07	; 7
     dce:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
     dd2:	be 01       	movw	r22, r28
     dd4:	6f 5f       	subi	r22, 0xFF	; 255
     dd6:	7f 4f       	sbci	r23, 0xFF	; 255
     dd8:	ce 01       	movw	r24, r28
     dda:	07 96       	adiw	r24, 0x07	; 7
     ddc:	0e 94 8c 3d 	call	0x7b18	; 0x7b18 <_ZplRK15StringSumHelperRK6String>
     de0:	bc 01       	movw	r22, r24
     de2:	86 e2       	ldi	r24, 0x26	; 38
     de4:	9b e0       	ldi	r25, 0x0B	; 11
     de6:	0e 94 66 3d 	call	0x7acc	; 0x7acc <_ZN6String6concatERKS_>
     dea:	ce 01       	movw	r24, r28
     dec:	07 96       	adiw	r24, 0x07	; 7
     dee:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
     df2:	ce 01       	movw	r24, r28
     df4:	01 96       	adiw	r24, 0x01	; 1
     df6:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
     dfa:	68 e1       	ldi	r22, 0x18	; 24
     dfc:	73 e0       	ldi	r23, 0x03	; 3
     dfe:	86 e2       	ldi	r24, 0x26	; 38
     e00:	9b e0       	ldi	r25, 0x0B	; 11
     e02:	0e 94 6c 3d 	call	0x7ad8	; 0x7ad8 <_ZN6String6concatEPKc>
     e06:	6f e8       	ldi	r22, 0x8F	; 143
     e08:	73 e0       	ldi	r23, 0x03	; 3
     e0a:	86 e2       	ldi	r24, 0x26	; 38
     e0c:	9b e0       	ldi	r25, 0x0B	; 11
     e0e:	0e 94 6c 3d 	call	0x7ad8	; 0x7ad8 <_ZN6String6concatEPKc>
     e12:	68 e1       	ldi	r22, 0x18	; 24
     e14:	73 e0       	ldi	r23, 0x03	; 3
     e16:	86 e2       	ldi	r24, 0x26	; 38
     e18:	9b e0       	ldi	r25, 0x0B	; 11
     e1a:	0e 94 6c 3d 	call	0x7ad8	; 0x7ad8 <_ZN6String6concatEPKc>
     e1e:	69 e3       	ldi	r22, 0x39	; 57
     e20:	74 e0       	ldi	r23, 0x04	; 4
     e22:	86 e2       	ldi	r24, 0x26	; 38
     e24:	9b e0       	ldi	r25, 0x0B	; 11
     e26:	0e 94 6c 3d 	call	0x7ad8	; 0x7ad8 <_ZN6String6concatEPKc>
     e2a:	68 e1       	ldi	r22, 0x18	; 24
     e2c:	73 e0       	ldi	r23, 0x03	; 3
     e2e:	86 e2       	ldi	r24, 0x26	; 38
     e30:	9b e0       	ldi	r25, 0x0B	; 11
     e32:	0e 94 6c 3d 	call	0x7ad8	; 0x7ad8 <_ZN6String6concatEPKc>
     e36:	69 e0       	ldi	r22, 0x09	; 9
     e38:	75 e0       	ldi	r23, 0x05	; 5
     e3a:	86 e2       	ldi	r24, 0x26	; 38
     e3c:	9b e0       	ldi	r25, 0x0B	; 11
     e3e:	0e 94 6c 3d 	call	0x7ad8	; 0x7ad8 <_ZN6String6concatEPKc>
     e42:	68 e1       	ldi	r22, 0x18	; 24
     e44:	73 e0       	ldi	r23, 0x03	; 3
     e46:	86 e2       	ldi	r24, 0x26	; 38
     e48:	9b e0       	ldi	r25, 0x0B	; 11
     e4a:	0e 94 6c 3d 	call	0x7ad8	; 0x7ad8 <_ZN6String6concatEPKc>
     e4e:	68 e1       	ldi	r22, 0x18	; 24
     e50:	73 e0       	ldi	r23, 0x03	; 3
     e52:	86 e2       	ldi	r24, 0x26	; 38
     e54:	9b e0       	ldi	r25, 0x0B	; 11
     e56:	0e 94 6c 3d 	call	0x7ad8	; 0x7ad8 <_ZN6String6concatEPKc>
     e5a:	66 e2       	ldi	r22, 0x26	; 38
     e5c:	7b e0       	ldi	r23, 0x0B	; 11
     e5e:	80 e1       	ldi	r24, 0x10	; 16
     e60:	9d e0       	ldi	r25, 0x0D	; 13
     e62:	0e 94 0c 39 	call	0x7218	; 0x7218 <_ZN5Print7printlnERK6String>
     e66:	66 e2       	ldi	r22, 0x26	; 38
     e68:	7b e0       	ldi	r23, 0x0B	; 11
     e6a:	c8 01       	movw	r24, r16
     e6c:	0e 94 e3 38 	call	0x71c6	; 0x71c6 <_ZN5Print5printERK6String>
     e70:	2f ef       	ldi	r18, 0xFF	; 255
     e72:	83 ec       	ldi	r24, 0xC3	; 195
     e74:	99 e0       	ldi	r25, 0x09	; 9
     e76:	21 50       	subi	r18, 0x01	; 1
     e78:	80 40       	sbci	r24, 0x00	; 0
     e7a:	90 40       	sbci	r25, 0x00	; 0
     e7c:	e1 f7       	brne	.-8      	; 0xe76 <_Z11GetAteCheckiPc14EthernetClient6String+0x14a>
     e7e:	00 c0       	rjmp	.+0      	; 0xe80 <_Z11GetAteCheckiPc14EthernetClient6String+0x154>
     e80:	00 00       	nop
     e82:	68 e5       	ldi	r22, 0x58	; 88
     e84:	74 e0       	ldi	r23, 0x04	; 4
     e86:	c8 01       	movw	r24, r16
     e88:	0e 94 1c 39 	call	0x7238	; 0x7238 <_ZN5Print7printlnEPKc>
     e8c:	c8 01       	movw	r24, r16
     e8e:	0e 94 f9 38 	call	0x71f2	; 0x71f2 <_ZN5Print7printlnEv>
     e92:	8f e3       	ldi	r24, 0x3F	; 63
     e94:	9c e9       	ldi	r25, 0x9C	; 156
     e96:	01 97       	sbiw	r24, 0x01	; 1
     e98:	f1 f7       	brne	.-4      	; 0xe96 <_Z11GetAteCheckiPc14EthernetClient6String+0x16a>
     e9a:	00 c0       	rjmp	.+0      	; 0xe9c <_Z11GetAteCheckiPc14EthernetClient6String+0x170>
     e9c:	00 00       	nop
     e9e:	65 e1       	ldi	r22, 0x15	; 21
     ea0:	75 e0       	ldi	r23, 0x05	; 5
     ea2:	ce 01       	movw	r24, r28
     ea4:	0d 96       	adiw	r24, 0x0d	; 13
     ea6:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
     eaa:	c8 01       	movw	r24, r16
     eac:	0e 94 01 29 	call	0x5202	; 0x5202 <_ZN14EthernetClient9availableEv>
     eb0:	89 2b       	or	r24, r25
     eb2:	09 f4       	brne	.+2      	; 0xeb6 <_Z11GetAteCheckiPc14EthernetClient6String+0x18a>
     eb4:	4c c0       	rjmp	.+152    	; 0xf4e <_Z11GetAteCheckiPc14EthernetClient6String+0x222>
     eb6:	20 91 1d 0b 	lds	r18, 0x0B1D	; 0x800b1d <RispostaHTTP+0x4>
     eba:	30 91 1e 0b 	lds	r19, 0x0B1E	; 0x800b1e <RispostaHTTP+0x5>
     ebe:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <HTTP_len_response>
     ec2:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <HTTP_len_response+0x1>
     ec6:	28 17       	cp	r18, r24
     ec8:	39 07       	cpc	r19, r25
     eca:	08 f0       	brcs	.+2      	; 0xece <_Z11GetAteCheckiPc14EthernetClient6String+0x1a2>
     ecc:	40 c0       	rjmp	.+128    	; 0xf4e <_Z11GetAteCheckiPc14EthernetClient6String+0x222>
     ece:	c8 01       	movw	r24, r16
     ed0:	0e 94 0b 29 	call	0x5216	; 0x5216 <_ZN14EthernetClient4readEv>
     ed4:	f8 2e       	mov	r15, r24
     ed6:	69 e1       	ldi	r22, 0x19	; 25
     ed8:	7b e0       	ldi	r23, 0x0B	; 11
     eda:	ce 01       	movw	r24, r28
     edc:	01 96       	adiw	r24, 0x01	; 1
     ede:	0e 94 23 3c 	call	0x7846	; 0x7846 <_ZN6StringC1ERKS_>
     ee2:	6f 2d       	mov	r22, r15
     ee4:	ce 01       	movw	r24, r28
     ee6:	01 96       	adiw	r24, 0x01	; 1
     ee8:	0e 94 b4 3d 	call	0x7b68	; 0x7b68 <_ZplRK15StringSumHelperc>
     eec:	bc 01       	movw	r22, r24
     eee:	89 e1       	ldi	r24, 0x19	; 25
     ef0:	9b e0       	ldi	r25, 0x0B	; 11
     ef2:	0e 94 0e 3c 	call	0x781c	; 0x781c <_ZN6StringaSERKS_>
     ef6:	ce 01       	movw	r24, r28
     ef8:	01 96       	adiw	r24, 0x01	; 1
     efa:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
     efe:	d5 cf       	rjmp	.-86     	; 0xeaa <_Z11GetAteCheckiPc14EthernetClient6String+0x17e>
     f00:	89 e4       	ldi	r24, 0x49	; 73
     f02:	9b e0       	ldi	r25, 0x0B	; 11
     f04:	0e 94 61 30 	call	0x60c2	; 0x60c2 <_ZN3LCD5clearEv>
     f08:	41 e0       	ldi	r20, 0x01	; 1
     f0a:	60 e0       	ldi	r22, 0x00	; 0
     f0c:	89 e4       	ldi	r24, 0x49	; 73
     f0e:	9b e0       	ldi	r25, 0x0B	; 11
     f10:	0e 94 67 30 	call	0x60ce	; 0x60ce <_ZN3LCD9setCursorEhh>
     f14:	6a e6       	ldi	r22, 0x6A	; 106
     f16:	74 e0       	ldi	r23, 0x04	; 4
     f18:	89 e4       	ldi	r24, 0x49	; 73
     f1a:	9b e0       	ldi	r25, 0x0B	; 11
     f1c:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN5Print5printEPKc>
     f20:	43 e0       	ldi	r20, 0x03	; 3
     f22:	60 e0       	ldi	r22, 0x00	; 0
     f24:	89 e4       	ldi	r24, 0x49	; 73
     f26:	9b e0       	ldi	r25, 0x0B	; 11
     f28:	0e 94 67 30 	call	0x60ce	; 0x60ce <_ZN3LCD9setCursorEhh>
     f2c:	6f e7       	ldi	r22, 0x7F	; 127
     f2e:	74 e0       	ldi	r23, 0x04	; 4
     f30:	89 e4       	ldi	r24, 0x49	; 73
     f32:	9b e0       	ldi	r25, 0x0B	; 11
     f34:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN5Print5printEPKc>
     f38:	9f ef       	ldi	r25, 0xFF	; 255
     f3a:	23 ed       	ldi	r18, 0xD3	; 211
     f3c:	80 e3       	ldi	r24, 0x30	; 48
     f3e:	91 50       	subi	r25, 0x01	; 1
     f40:	20 40       	sbci	r18, 0x00	; 0
     f42:	80 40       	sbci	r24, 0x00	; 0
     f44:	e1 f7       	brne	.-8      	; 0xf3e <_Z11GetAteCheckiPc14EthernetClient6String+0x212>
     f46:	00 c0       	rjmp	.+0      	; 0xf48 <_Z11GetAteCheckiPc14EthernetClient6String+0x21c>
     f48:	00 00       	nop
     f4a:	80 e0       	ldi	r24, 0x00	; 0
     f4c:	38 c0       	rjmp	.+112    	; 0xfbe <_Z11GetAteCheckiPc14EthernetClient6String+0x292>
     f4e:	69 e1       	ldi	r22, 0x19	; 25
     f50:	7b e0       	ldi	r23, 0x0B	; 11
     f52:	ce 01       	movw	r24, r28
     f54:	07 96       	adiw	r24, 0x07	; 7
     f56:	0e 94 23 3c 	call	0x7846	; 0x7846 <_ZN6StringC1ERKS_>
     f5a:	be 01       	movw	r22, r28
     f5c:	69 5f       	subi	r22, 0xF9	; 249
     f5e:	7f 4f       	sbci	r23, 0xFF	; 255
     f60:	ce 01       	movw	r24, r28
     f62:	01 96       	adiw	r24, 0x01	; 1
     f64:	78 de       	rcall	.-784    	; 0xc56 <_Z19GetHTTPResponseCode6String>
     f66:	be 01       	movw	r22, r28
     f68:	6f 5f       	subi	r22, 0xFF	; 255
     f6a:	7f 4f       	sbci	r23, 0xFF	; 255
     f6c:	ce 01       	movw	r24, r28
     f6e:	0d 96       	adiw	r24, 0x0d	; 13
     f70:	0e 94 2b 3c 	call	0x7856	; 0x7856 <_ZN6StringaSEOS_>
     f74:	ce 01       	movw	r24, r28
     f76:	01 96       	adiw	r24, 0x01	; 1
     f78:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
     f7c:	ce 01       	movw	r24, r28
     f7e:	07 96       	adiw	r24, 0x07	; 7
     f80:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
     f84:	9f ef       	ldi	r25, 0xFF	; 255
     f86:	27 ee       	ldi	r18, 0xE7	; 231
     f88:	83 e0       	ldi	r24, 0x03	; 3
     f8a:	91 50       	subi	r25, 0x01	; 1
     f8c:	20 40       	sbci	r18, 0x00	; 0
     f8e:	80 40       	sbci	r24, 0x00	; 0
     f90:	e1 f7       	brne	.-8      	; 0xf8a <_Z11GetAteCheckiPc14EthernetClient6String+0x25e>
     f92:	00 c0       	rjmp	.+0      	; 0xf94 <_Z11GetAteCheckiPc14EthernetClient6String+0x268>
     f94:	00 00       	nop
     f96:	64 e9       	ldi	r22, 0x94	; 148
     f98:	74 e0       	ldi	r23, 0x04	; 4
     f9a:	ce 01       	movw	r24, r28
     f9c:	0d 96       	adiw	r24, 0x0d	; 13
     f9e:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <_ZNK6String6equalsEPKc>
     fa2:	88 23       	and	r24, r24
     fa4:	51 f0       	breq	.+20     	; 0xfba <_Z11GetAteCheckiPc14EthernetClient6String+0x28e>
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	59 da       	rcall	.-2894   	; 0x45c <_Z4passb>
     faa:	34 da       	rcall	.-2968   	; 0x414 <_Z9printLinev>
     fac:	11 e0       	ldi	r17, 0x01	; 1
     fae:	ce 01       	movw	r24, r28
     fb0:	0d 96       	adiw	r24, 0x0d	; 13
     fb2:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
     fb6:	81 2f       	mov	r24, r17
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <_Z11GetAteCheckiPc14EthernetClient6String+0x292>
     fba:	10 e0       	ldi	r17, 0x00	; 0
     fbc:	f8 cf       	rjmp	.-16     	; 0xfae <_Z11GetAteCheckiPc14EthernetClient6String+0x282>
     fbe:	62 96       	adiw	r28, 0x12	; 18
     fc0:	0f b6       	in	r0, 0x3f	; 63
     fc2:	f8 94       	cli
     fc4:	de bf       	out	0x3e, r29	; 62
     fc6:	0f be       	out	0x3f, r0	; 63
     fc8:	cd bf       	out	0x3d, r28	; 61
     fca:	df 91       	pop	r29
     fcc:	cf 91       	pop	r28
     fce:	1f 91       	pop	r17
     fd0:	0f 91       	pop	r16
     fd2:	ff 90       	pop	r15
     fd4:	ef 90       	pop	r14
     fd6:	df 90       	pop	r13
     fd8:	cf 90       	pop	r12
     fda:	bf 90       	pop	r11
     fdc:	af 90       	pop	r10
     fde:	08 95       	ret

00000fe0 <_Z17PostErogazioneGACiPc14EthernetClient6String>:
     fe0:	af 92       	push	r10
     fe2:	bf 92       	push	r11
     fe4:	cf 92       	push	r12
     fe6:	df 92       	push	r13
     fe8:	ef 92       	push	r14
     fea:	ff 92       	push	r15
     fec:	0f 93       	push	r16
     fee:	1f 93       	push	r17
     ff0:	cf 93       	push	r28
     ff2:	df 93       	push	r29
     ff4:	cd b7       	in	r28, 0x3d	; 61
     ff6:	de b7       	in	r29, 0x3e	; 62
     ff8:	62 97       	sbiw	r28, 0x12	; 18
     ffa:	0f b6       	in	r0, 0x3f	; 63
     ffc:	f8 94       	cli
     ffe:	de bf       	out	0x3e, r29	; 62
    1000:	0f be       	out	0x3f, r0	; 63
    1002:	cd bf       	out	0x3d, r28	; 61
    1004:	5c 01       	movw	r10, r24
    1006:	6b 01       	movw	r12, r22
    1008:	8a 01       	movw	r16, r20
    100a:	79 01       	movw	r14, r18
    100c:	03 da       	rcall	.-3066   	; 0x414 <_Z9printLinev>
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	14 da       	rcall	.-3032   	; 0x43a <_Z8printTabh>
    1012:	67 e1       	ldi	r22, 0x17	; 23
    1014:	75 e0       	ldi	r23, 0x05	; 5
    1016:	80 e1       	ldi	r24, 0x10	; 16
    1018:	9d e0       	ldi	r25, 0x0D	; 13
    101a:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN5Print5printEPKc>
    101e:	a5 01       	movw	r20, r10
    1020:	b6 01       	movw	r22, r12
    1022:	c8 01       	movw	r24, r16
    1024:	0e 94 8a 28 	call	0x5114	; 0x5114 <_ZN14EthernetClient7connectEPKcj>
    1028:	89 2b       	or	r24, r25
    102a:	09 f4       	brne	.+2      	; 0x102e <_Z17PostErogazioneGACiPc14EthernetClient6String+0x4e>
    102c:	e6 c0       	rjmp	.+460    	; 0x11fa <_Z17PostErogazioneGACiPc14EthernetClient6String+0x21a>
    102e:	2f ef       	ldi	r18, 0xFF	; 255
    1030:	81 ee       	ldi	r24, 0xE1	; 225
    1032:	94 e0       	ldi	r25, 0x04	; 4
    1034:	21 50       	subi	r18, 0x01	; 1
    1036:	80 40       	sbci	r24, 0x00	; 0
    1038:	90 40       	sbci	r25, 0x00	; 0
    103a:	e1 f7       	brne	.-8      	; 0x1034 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x54>
    103c:	00 c0       	rjmp	.+0      	; 0x103e <_Z17PostErogazioneGACiPc14EthernetClient6String+0x5e>
    103e:	00 00       	nop
    1040:	67 e5       	ldi	r22, 0x57	; 87
    1042:	75 e0       	ldi	r23, 0x05	; 5
    1044:	86 e2       	ldi	r24, 0x26	; 38
    1046:	9b e0       	ldi	r25, 0x0B	; 11
    1048:	0e 94 36 3c 	call	0x786c	; 0x786c <_ZN6StringaSEPKc>
    104c:	b6 01       	movw	r22, r12
    104e:	ce 01       	movw	r24, r28
    1050:	01 96       	adiw	r24, 0x01	; 1
    1052:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
    1056:	62 e0       	ldi	r22, 0x02	; 2
    1058:	75 e0       	ldi	r23, 0x05	; 5
    105a:	ce 01       	movw	r24, r28
    105c:	07 96       	adiw	r24, 0x07	; 7
    105e:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
    1062:	be 01       	movw	r22, r28
    1064:	6f 5f       	subi	r22, 0xFF	; 255
    1066:	7f 4f       	sbci	r23, 0xFF	; 255
    1068:	ce 01       	movw	r24, r28
    106a:	07 96       	adiw	r24, 0x07	; 7
    106c:	0e 94 8c 3d 	call	0x7b18	; 0x7b18 <_ZplRK15StringSumHelperRK6String>
    1070:	bc 01       	movw	r22, r24
    1072:	86 e2       	ldi	r24, 0x26	; 38
    1074:	9b e0       	ldi	r25, 0x0B	; 11
    1076:	0e 94 66 3d 	call	0x7acc	; 0x7acc <_ZN6String6concatERKS_>
    107a:	ce 01       	movw	r24, r28
    107c:	07 96       	adiw	r24, 0x07	; 7
    107e:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
    1082:	ce 01       	movw	r24, r28
    1084:	01 96       	adiw	r24, 0x01	; 1
    1086:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
    108a:	68 e1       	ldi	r22, 0x18	; 24
    108c:	73 e0       	ldi	r23, 0x03	; 3
    108e:	86 e2       	ldi	r24, 0x26	; 38
    1090:	9b e0       	ldi	r25, 0x0B	; 11
    1092:	0e 94 6c 3d 	call	0x7ad8	; 0x7ad8 <_ZN6String6concatEPKc>
    1096:	6f e8       	ldi	r22, 0x8F	; 143
    1098:	73 e0       	ldi	r23, 0x03	; 3
    109a:	86 e2       	ldi	r24, 0x26	; 38
    109c:	9b e0       	ldi	r25, 0x0B	; 11
    109e:	0e 94 6c 3d 	call	0x7ad8	; 0x7ad8 <_ZN6String6concatEPKc>
    10a2:	68 e1       	ldi	r22, 0x18	; 24
    10a4:	73 e0       	ldi	r23, 0x03	; 3
    10a6:	86 e2       	ldi	r24, 0x26	; 38
    10a8:	9b e0       	ldi	r25, 0x0B	; 11
    10aa:	0e 94 6c 3d 	call	0x7ad8	; 0x7ad8 <_ZN6String6concatEPKc>
    10ae:	69 e3       	ldi	r22, 0x39	; 57
    10b0:	74 e0       	ldi	r23, 0x04	; 4
    10b2:	86 e2       	ldi	r24, 0x26	; 38
    10b4:	9b e0       	ldi	r25, 0x0B	; 11
    10b6:	0e 94 6c 3d 	call	0x7ad8	; 0x7ad8 <_ZN6String6concatEPKc>
    10ba:	68 e1       	ldi	r22, 0x18	; 24
    10bc:	73 e0       	ldi	r23, 0x03	; 3
    10be:	86 e2       	ldi	r24, 0x26	; 38
    10c0:	9b e0       	ldi	r25, 0x0B	; 11
    10c2:	0e 94 6c 3d 	call	0x7ad8	; 0x7ad8 <_ZN6String6concatEPKc>
    10c6:	69 e0       	ldi	r22, 0x09	; 9
    10c8:	75 e0       	ldi	r23, 0x05	; 5
    10ca:	86 e2       	ldi	r24, 0x26	; 38
    10cc:	9b e0       	ldi	r25, 0x0B	; 11
    10ce:	0e 94 6c 3d 	call	0x7ad8	; 0x7ad8 <_ZN6String6concatEPKc>
    10d2:	68 e1       	ldi	r22, 0x18	; 24
    10d4:	73 e0       	ldi	r23, 0x03	; 3
    10d6:	86 e2       	ldi	r24, 0x26	; 38
    10d8:	9b e0       	ldi	r25, 0x0B	; 11
    10da:	0e 94 6c 3d 	call	0x7ad8	; 0x7ad8 <_ZN6String6concatEPKc>
    10de:	f7 01       	movw	r30, r14
    10e0:	64 81       	ldd	r22, Z+4	; 0x04
    10e2:	75 81       	ldd	r23, Z+5	; 0x05
    10e4:	6b 5e       	subi	r22, 0xEB	; 235
    10e6:	7f 4f       	sbci	r23, 0xFF	; 255
    10e8:	4a e0       	ldi	r20, 0x0A	; 10
    10ea:	ce 01       	movw	r24, r28
    10ec:	01 96       	adiw	r24, 0x01	; 1
    10ee:	0e 94 b7 3c 	call	0x796e	; 0x796e <_ZN6StringC1Ejh>
    10f2:	69 e7       	ldi	r22, 0x79	; 121
    10f4:	75 e0       	ldi	r23, 0x05	; 5
    10f6:	ce 01       	movw	r24, r28
    10f8:	07 96       	adiw	r24, 0x07	; 7
    10fa:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
    10fe:	be 01       	movw	r22, r28
    1100:	6f 5f       	subi	r22, 0xFF	; 255
    1102:	7f 4f       	sbci	r23, 0xFF	; 255
    1104:	ce 01       	movw	r24, r28
    1106:	07 96       	adiw	r24, 0x07	; 7
    1108:	0e 94 8c 3d 	call	0x7b18	; 0x7b18 <_ZplRK15StringSumHelperRK6String>
    110c:	bc 01       	movw	r22, r24
    110e:	86 e2       	ldi	r24, 0x26	; 38
    1110:	9b e0       	ldi	r25, 0x0B	; 11
    1112:	0e 94 66 3d 	call	0x7acc	; 0x7acc <_ZN6String6concatERKS_>
    1116:	ce 01       	movw	r24, r28
    1118:	07 96       	adiw	r24, 0x07	; 7
    111a:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
    111e:	ce 01       	movw	r24, r28
    1120:	01 96       	adiw	r24, 0x01	; 1
    1122:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
    1126:	68 e1       	ldi	r22, 0x18	; 24
    1128:	73 e0       	ldi	r23, 0x03	; 3
    112a:	86 e2       	ldi	r24, 0x26	; 38
    112c:	9b e0       	ldi	r25, 0x0B	; 11
    112e:	0e 94 6c 3d 	call	0x7ad8	; 0x7ad8 <_ZN6String6concatEPKc>
    1132:	68 e1       	ldi	r22, 0x18	; 24
    1134:	73 e0       	ldi	r23, 0x03	; 3
    1136:	86 e2       	ldi	r24, 0x26	; 38
    1138:	9b e0       	ldi	r25, 0x0B	; 11
    113a:	0e 94 6c 3d 	call	0x7ad8	; 0x7ad8 <_ZN6String6concatEPKc>
    113e:	b7 01       	movw	r22, r14
    1140:	86 e2       	ldi	r24, 0x26	; 38
    1142:	9b e0       	ldi	r25, 0x0B	; 11
    1144:	0e 94 66 3d 	call	0x7acc	; 0x7acc <_ZN6String6concatERKS_>
    1148:	68 e1       	ldi	r22, 0x18	; 24
    114a:	73 e0       	ldi	r23, 0x03	; 3
    114c:	86 e2       	ldi	r24, 0x26	; 38
    114e:	9b e0       	ldi	r25, 0x0B	; 11
    1150:	0e 94 6c 3d 	call	0x7ad8	; 0x7ad8 <_ZN6String6concatEPKc>
    1154:	66 e2       	ldi	r22, 0x26	; 38
    1156:	7b e0       	ldi	r23, 0x0B	; 11
    1158:	80 e1       	ldi	r24, 0x10	; 16
    115a:	9d e0       	ldi	r25, 0x0D	; 13
    115c:	0e 94 0c 39 	call	0x7218	; 0x7218 <_ZN5Print7printlnERK6String>
    1160:	66 e2       	ldi	r22, 0x26	; 38
    1162:	7b e0       	ldi	r23, 0x0B	; 11
    1164:	c8 01       	movw	r24, r16
    1166:	0e 94 e3 38 	call	0x71c6	; 0x71c6 <_ZN5Print5printERK6String>
    116a:	ff ef       	ldi	r31, 0xFF	; 255
    116c:	23 ec       	ldi	r18, 0xC3	; 195
    116e:	89 e0       	ldi	r24, 0x09	; 9
    1170:	f1 50       	subi	r31, 0x01	; 1
    1172:	20 40       	sbci	r18, 0x00	; 0
    1174:	80 40       	sbci	r24, 0x00	; 0
    1176:	e1 f7       	brne	.-8      	; 0x1170 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x190>
    1178:	00 c0       	rjmp	.+0      	; 0x117a <_Z17PostErogazioneGACiPc14EthernetClient6String+0x19a>
    117a:	00 00       	nop
    117c:	68 e5       	ldi	r22, 0x58	; 88
    117e:	74 e0       	ldi	r23, 0x04	; 4
    1180:	c8 01       	movw	r24, r16
    1182:	0e 94 1c 39 	call	0x7238	; 0x7238 <_ZN5Print7printlnEPKc>
    1186:	c8 01       	movw	r24, r16
    1188:	0e 94 f9 38 	call	0x71f2	; 0x71f2 <_ZN5Print7printlnEv>
    118c:	ef e3       	ldi	r30, 0x3F	; 63
    118e:	fc e9       	ldi	r31, 0x9C	; 156
    1190:	31 97       	sbiw	r30, 0x01	; 1
    1192:	f1 f7       	brne	.-4      	; 0x1190 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x1b0>
    1194:	00 c0       	rjmp	.+0      	; 0x1196 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x1b6>
    1196:	00 00       	nop
    1198:	65 e1       	ldi	r22, 0x15	; 21
    119a:	75 e0       	ldi	r23, 0x05	; 5
    119c:	ce 01       	movw	r24, r28
    119e:	0d 96       	adiw	r24, 0x0d	; 13
    11a0:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
    11a4:	c8 01       	movw	r24, r16
    11a6:	0e 94 01 29 	call	0x5202	; 0x5202 <_ZN14EthernetClient9availableEv>
    11aa:	89 2b       	or	r24, r25
    11ac:	09 f4       	brne	.+2      	; 0x11b0 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x1d0>
    11ae:	4c c0       	rjmp	.+152    	; 0x1248 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x268>
    11b0:	20 91 1d 0b 	lds	r18, 0x0B1D	; 0x800b1d <RispostaHTTP+0x4>
    11b4:	30 91 1e 0b 	lds	r19, 0x0B1E	; 0x800b1e <RispostaHTTP+0x5>
    11b8:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <HTTP_len_response>
    11bc:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <HTTP_len_response+0x1>
    11c0:	28 17       	cp	r18, r24
    11c2:	39 07       	cpc	r19, r25
    11c4:	08 f0       	brcs	.+2      	; 0x11c8 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x1e8>
    11c6:	40 c0       	rjmp	.+128    	; 0x1248 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x268>
    11c8:	c8 01       	movw	r24, r16
    11ca:	0e 94 0b 29 	call	0x5216	; 0x5216 <_ZN14EthernetClient4readEv>
    11ce:	f8 2e       	mov	r15, r24
    11d0:	69 e1       	ldi	r22, 0x19	; 25
    11d2:	7b e0       	ldi	r23, 0x0B	; 11
    11d4:	ce 01       	movw	r24, r28
    11d6:	01 96       	adiw	r24, 0x01	; 1
    11d8:	0e 94 23 3c 	call	0x7846	; 0x7846 <_ZN6StringC1ERKS_>
    11dc:	6f 2d       	mov	r22, r15
    11de:	ce 01       	movw	r24, r28
    11e0:	01 96       	adiw	r24, 0x01	; 1
    11e2:	0e 94 b4 3d 	call	0x7b68	; 0x7b68 <_ZplRK15StringSumHelperc>
    11e6:	bc 01       	movw	r22, r24
    11e8:	89 e1       	ldi	r24, 0x19	; 25
    11ea:	9b e0       	ldi	r25, 0x0B	; 11
    11ec:	0e 94 0e 3c 	call	0x781c	; 0x781c <_ZN6StringaSERKS_>
    11f0:	ce 01       	movw	r24, r28
    11f2:	01 96       	adiw	r24, 0x01	; 1
    11f4:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
    11f8:	d5 cf       	rjmp	.-86     	; 0x11a4 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x1c4>
    11fa:	89 e4       	ldi	r24, 0x49	; 73
    11fc:	9b e0       	ldi	r25, 0x0B	; 11
    11fe:	0e 94 61 30 	call	0x60c2	; 0x60c2 <_ZN3LCD5clearEv>
    1202:	41 e0       	ldi	r20, 0x01	; 1
    1204:	60 e0       	ldi	r22, 0x00	; 0
    1206:	89 e4       	ldi	r24, 0x49	; 73
    1208:	9b e0       	ldi	r25, 0x0B	; 11
    120a:	0e 94 67 30 	call	0x60ce	; 0x60ce <_ZN3LCD9setCursorEhh>
    120e:	6a e6       	ldi	r22, 0x6A	; 106
    1210:	74 e0       	ldi	r23, 0x04	; 4
    1212:	89 e4       	ldi	r24, 0x49	; 73
    1214:	9b e0       	ldi	r25, 0x0B	; 11
    1216:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN5Print5printEPKc>
    121a:	43 e0       	ldi	r20, 0x03	; 3
    121c:	60 e0       	ldi	r22, 0x00	; 0
    121e:	89 e4       	ldi	r24, 0x49	; 73
    1220:	9b e0       	ldi	r25, 0x0B	; 11
    1222:	0e 94 67 30 	call	0x60ce	; 0x60ce <_ZN3LCD9setCursorEhh>
    1226:	6f e7       	ldi	r22, 0x7F	; 127
    1228:	74 e0       	ldi	r23, 0x04	; 4
    122a:	89 e4       	ldi	r24, 0x49	; 73
    122c:	9b e0       	ldi	r25, 0x0B	; 11
    122e:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN5Print5printEPKc>
    1232:	ff ef       	ldi	r31, 0xFF	; 255
    1234:	23 ed       	ldi	r18, 0xD3	; 211
    1236:	80 e3       	ldi	r24, 0x30	; 48
    1238:	f1 50       	subi	r31, 0x01	; 1
    123a:	20 40       	sbci	r18, 0x00	; 0
    123c:	80 40       	sbci	r24, 0x00	; 0
    123e:	e1 f7       	brne	.-8      	; 0x1238 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x258>
    1240:	00 c0       	rjmp	.+0      	; 0x1242 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x262>
    1242:	00 00       	nop
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	38 c0       	rjmp	.+112    	; 0x12b8 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x2d8>
    1248:	69 e1       	ldi	r22, 0x19	; 25
    124a:	7b e0       	ldi	r23, 0x0B	; 11
    124c:	ce 01       	movw	r24, r28
    124e:	07 96       	adiw	r24, 0x07	; 7
    1250:	0e 94 23 3c 	call	0x7846	; 0x7846 <_ZN6StringC1ERKS_>
    1254:	be 01       	movw	r22, r28
    1256:	69 5f       	subi	r22, 0xF9	; 249
    1258:	7f 4f       	sbci	r23, 0xFF	; 255
    125a:	ce 01       	movw	r24, r28
    125c:	01 96       	adiw	r24, 0x01	; 1
    125e:	fb dc       	rcall	.-1546   	; 0xc56 <_Z19GetHTTPResponseCode6String>
    1260:	be 01       	movw	r22, r28
    1262:	6f 5f       	subi	r22, 0xFF	; 255
    1264:	7f 4f       	sbci	r23, 0xFF	; 255
    1266:	ce 01       	movw	r24, r28
    1268:	0d 96       	adiw	r24, 0x0d	; 13
    126a:	0e 94 2b 3c 	call	0x7856	; 0x7856 <_ZN6StringaSEOS_>
    126e:	ce 01       	movw	r24, r28
    1270:	01 96       	adiw	r24, 0x01	; 1
    1272:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
    1276:	ce 01       	movw	r24, r28
    1278:	07 96       	adiw	r24, 0x07	; 7
    127a:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
    127e:	9f ef       	ldi	r25, 0xFF	; 255
    1280:	e7 ee       	ldi	r30, 0xE7	; 231
    1282:	f3 e0       	ldi	r31, 0x03	; 3
    1284:	91 50       	subi	r25, 0x01	; 1
    1286:	e0 40       	sbci	r30, 0x00	; 0
    1288:	f0 40       	sbci	r31, 0x00	; 0
    128a:	e1 f7       	brne	.-8      	; 0x1284 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x2a4>
    128c:	00 c0       	rjmp	.+0      	; 0x128e <_Z17PostErogazioneGACiPc14EthernetClient6String+0x2ae>
    128e:	00 00       	nop
    1290:	64 e9       	ldi	r22, 0x94	; 148
    1292:	74 e0       	ldi	r23, 0x04	; 4
    1294:	ce 01       	movw	r24, r28
    1296:	0d 96       	adiw	r24, 0x0d	; 13
    1298:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <_ZNK6String6equalsEPKc>
    129c:	88 23       	and	r24, r24
    129e:	51 f0       	breq	.+20     	; 0x12b4 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x2d4>
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	dc d8       	rcall	.-3656   	; 0x45c <_Z4passb>
    12a4:	b7 d8       	rcall	.-3730   	; 0x414 <_Z9printLinev>
    12a6:	11 e0       	ldi	r17, 0x01	; 1
    12a8:	ce 01       	movw	r24, r28
    12aa:	0d 96       	adiw	r24, 0x0d	; 13
    12ac:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
    12b0:	81 2f       	mov	r24, r17
    12b2:	02 c0       	rjmp	.+4      	; 0x12b8 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x2d8>
    12b4:	10 e0       	ldi	r17, 0x00	; 0
    12b6:	f8 cf       	rjmp	.-16     	; 0x12a8 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x2c8>
    12b8:	62 96       	adiw	r28, 0x12	; 18
    12ba:	0f b6       	in	r0, 0x3f	; 63
    12bc:	f8 94       	cli
    12be:	de bf       	out	0x3e, r29	; 62
    12c0:	0f be       	out	0x3f, r0	; 63
    12c2:	cd bf       	out	0x3d, r28	; 61
    12c4:	df 91       	pop	r29
    12c6:	cf 91       	pop	r28
    12c8:	1f 91       	pop	r17
    12ca:	0f 91       	pop	r16
    12cc:	ff 90       	pop	r15
    12ce:	ef 90       	pop	r14
    12d0:	df 90       	pop	r13
    12d2:	cf 90       	pop	r12
    12d4:	bf 90       	pop	r11
    12d6:	af 90       	pop	r10
    12d8:	08 95       	ret

000012da <_Z15abilitaPulsantiv>:
    12da:	57 98       	cbi	0x0a, 7	; 10
    12dc:	56 98       	cbi	0x0a, 6	; 10
    12de:	88 e0       	ldi	r24, 0x08	; 8
    12e0:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    12e4:	80 ec       	ldi	r24, 0xC0	; 192
    12e6:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    12ea:	78 94       	sei
    12ec:	08 95       	ret

000012ee <_Z22abilitaContattiPistolav>:
    12ee:	09 98       	cbi	0x01, 1	; 1
    12f0:	0a 98       	cbi	0x01, 2	; 1
    12f2:	08 95       	ret

000012f4 <_Z13abilitaPulserc>:
    12f4:	91 e0       	ldi	r25, 0x01	; 1
    12f6:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    12fa:	84 34       	cpi	r24, 0x44	; 68
    12fc:	19 f4       	brne	.+6      	; 0x1304 <_Z13abilitaPulserc+0x10>
    12fe:	0d 98       	cbi	0x01, 5	; 1
    1300:	80 e2       	ldi	r24, 0x20	; 32
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <_Z13abilitaPulserc+0x14>
    1304:	0e 98       	cbi	0x01, 6	; 1
    1306:	80 e4       	ldi	r24, 0x40	; 64
    1308:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
    130c:	78 94       	sei
    130e:	08 95       	ret

00001310 <_Z14impulsiToLitrii>:
    1310:	cf 92       	push	r12
    1312:	df 92       	push	r13
    1314:	ef 92       	push	r14
    1316:	ff 92       	push	r15
    1318:	01 97       	sbiw	r24, 0x01	; 1
    131a:	bc 01       	movw	r22, r24
    131c:	99 0f       	add	r25, r25
    131e:	88 0b       	sbc	r24, r24
    1320:	99 0b       	sbc	r25, r25
    1322:	0e 94 d6 36 	call	0x6dac	; 0x6dac <__floatsisf>
    1326:	6b 01       	movw	r12, r22
    1328:	7c 01       	movw	r14, r24
    132a:	20 e0       	ldi	r18, 0x00	; 0
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	a9 01       	movw	r20, r18
    1330:	0e 94 68 36 	call	0x6cd0	; 0x6cd0 <__cmpsf2>
    1334:	87 ff       	sbrs	r24, 7
    1336:	03 c0       	rjmp	.+6      	; 0x133e <_Z14impulsiToLitrii+0x2e>
    1338:	c1 2c       	mov	r12, r1
    133a:	d1 2c       	mov	r13, r1
    133c:	76 01       	movw	r14, r12
    133e:	60 91 4d 01 	lds	r22, 0x014D	; 0x80014d <ImpulsiLitro>
    1342:	70 91 4e 01 	lds	r23, 0x014E	; 0x80014e <ImpulsiLitro+0x1>
    1346:	07 2e       	mov	r0, r23
    1348:	00 0c       	add	r0, r0
    134a:	88 0b       	sbc	r24, r24
    134c:	99 0b       	sbc	r25, r25
    134e:	0e 94 d6 36 	call	0x6dac	; 0x6dac <__floatsisf>
    1352:	9b 01       	movw	r18, r22
    1354:	ac 01       	movw	r20, r24
    1356:	c7 01       	movw	r24, r14
    1358:	b6 01       	movw	r22, r12
    135a:	0e 94 6c 36 	call	0x6cd8	; 0x6cd8 <__divsf3>
    135e:	ff 90       	pop	r15
    1360:	ef 90       	pop	r14
    1362:	df 90       	pop	r13
    1364:	cf 90       	pop	r12
    1366:	08 95       	ret

00001368 <_Z18Rele_Abilitazione1ii>:
    1368:	3f 9a       	sbi	0x07, 7	; 7
    136a:	81 30       	cpi	r24, 0x01	; 1
    136c:	91 05       	cpc	r25, r1
    136e:	71 f0       	breq	.+28     	; 0x138c <_Z18Rele_Abilitazione1ii+0x24>
    1370:	82 30       	cpi	r24, 0x02	; 2
    1372:	91 05       	cpc	r25, r1
    1374:	e1 f0       	breq	.+56     	; 0x13ae <_Z18Rele_Abilitazione1ii+0x46>
    1376:	89 2b       	or	r24, r25
    1378:	89 f5       	brne	.+98     	; 0x13dc <_Z18Rele_Abilitazione1ii+0x74>
    137a:	47 98       	cbi	0x08, 7	; 8
    137c:	2f ef       	ldi	r18, 0xFF	; 255
    137e:	30 e7       	ldi	r19, 0x70	; 112
    1380:	42 e0       	ldi	r20, 0x02	; 2
    1382:	21 50       	subi	r18, 0x01	; 1
    1384:	30 40       	sbci	r19, 0x00	; 0
    1386:	40 40       	sbci	r20, 0x00	; 0
    1388:	e1 f7       	brne	.-8      	; 0x1382 <_Z18Rele_Abilitazione1ii+0x1a>
    138a:	0e c0       	rjmp	.+28     	; 0x13a8 <_Z18Rele_Abilitazione1ii+0x40>
    138c:	28 b1       	in	r18, 0x08	; 8
    138e:	01 c0       	rjmp	.+2      	; 0x1392 <_Z18Rele_Abilitazione1ii+0x2a>
    1390:	88 0f       	add	r24, r24
    1392:	6a 95       	dec	r22
    1394:	ea f7       	brpl	.-6      	; 0x1390 <_Z18Rele_Abilitazione1ii+0x28>
    1396:	82 2b       	or	r24, r18
    1398:	88 b9       	out	0x08, r24	; 8
    139a:	8f ef       	ldi	r24, 0xFF	; 255
    139c:	90 e7       	ldi	r25, 0x70	; 112
    139e:	22 e0       	ldi	r18, 0x02	; 2
    13a0:	81 50       	subi	r24, 0x01	; 1
    13a2:	90 40       	sbci	r25, 0x00	; 0
    13a4:	20 40       	sbci	r18, 0x00	; 0
    13a6:	e1 f7       	brne	.-8      	; 0x13a0 <_Z18Rele_Abilitazione1ii+0x38>
    13a8:	00 c0       	rjmp	.+0      	; 0x13aa <_Z18Rele_Abilitazione1ii+0x42>
    13aa:	00 00       	nop
    13ac:	08 95       	ret
    13ae:	28 b1       	in	r18, 0x08	; 8
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	01 c0       	rjmp	.+2      	; 0x13b8 <_Z18Rele_Abilitazione1ii+0x50>
    13b6:	88 0f       	add	r24, r24
    13b8:	6a 95       	dec	r22
    13ba:	ea f7       	brpl	.-6      	; 0x13b6 <_Z18Rele_Abilitazione1ii+0x4e>
    13bc:	98 2f       	mov	r25, r24
    13be:	90 95       	com	r25
    13c0:	92 23       	and	r25, r18
    13c2:	98 b9       	out	0x08, r25	; 8
    13c4:	3f ef       	ldi	r19, 0xFF	; 255
    13c6:	45 ea       	ldi	r20, 0xA5	; 165
    13c8:	2e e0       	ldi	r18, 0x0E	; 14
    13ca:	31 50       	subi	r19, 0x01	; 1
    13cc:	40 40       	sbci	r20, 0x00	; 0
    13ce:	20 40       	sbci	r18, 0x00	; 0
    13d0:	e1 f7       	brne	.-8      	; 0x13ca <_Z18Rele_Abilitazione1ii+0x62>
    13d2:	00 c0       	rjmp	.+0      	; 0x13d4 <_Z18Rele_Abilitazione1ii+0x6c>
    13d4:	00 00       	nop
    13d6:	98 b1       	in	r25, 0x08	; 8
    13d8:	89 2b       	or	r24, r25
    13da:	88 b9       	out	0x08, r24	; 8
    13dc:	08 95       	ret

000013de <_Z18Rele_Abilitazione2ii>:
    13de:	0f 9a       	sbi	0x01, 7	; 1
    13e0:	81 30       	cpi	r24, 0x01	; 1
    13e2:	91 05       	cpc	r25, r1
    13e4:	b9 f0       	breq	.+46     	; 0x1414 <_Z18Rele_Abilitazione2ii+0x36>
    13e6:	82 30       	cpi	r24, 0x02	; 2
    13e8:	91 05       	cpc	r25, r1
    13ea:	29 f1       	breq	.+74     	; 0x1436 <_Z18Rele_Abilitazione2ii+0x58>
    13ec:	89 2b       	or	r24, r25
    13ee:	d1 f5       	brne	.+116    	; 0x1464 <_Z18Rele_Abilitazione2ii+0x86>
    13f0:	22 b1       	in	r18, 0x02	; 2
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	01 c0       	rjmp	.+2      	; 0x13fa <_Z18Rele_Abilitazione2ii+0x1c>
    13f8:	88 0f       	add	r24, r24
    13fa:	6a 95       	dec	r22
    13fc:	ea f7       	brpl	.-6      	; 0x13f8 <_Z18Rele_Abilitazione2ii+0x1a>
    13fe:	80 95       	com	r24
    1400:	82 23       	and	r24, r18
    1402:	82 b9       	out	0x02, r24	; 2
    1404:	2f ef       	ldi	r18, 0xFF	; 255
    1406:	30 e7       	ldi	r19, 0x70	; 112
    1408:	42 e0       	ldi	r20, 0x02	; 2
    140a:	21 50       	subi	r18, 0x01	; 1
    140c:	30 40       	sbci	r19, 0x00	; 0
    140e:	40 40       	sbci	r20, 0x00	; 0
    1410:	e1 f7       	brne	.-8      	; 0x140a <_Z18Rele_Abilitazione2ii+0x2c>
    1412:	0e c0       	rjmp	.+28     	; 0x1430 <_Z18Rele_Abilitazione2ii+0x52>
    1414:	22 b1       	in	r18, 0x02	; 2
    1416:	01 c0       	rjmp	.+2      	; 0x141a <_Z18Rele_Abilitazione2ii+0x3c>
    1418:	88 0f       	add	r24, r24
    141a:	6a 95       	dec	r22
    141c:	ea f7       	brpl	.-6      	; 0x1418 <_Z18Rele_Abilitazione2ii+0x3a>
    141e:	82 2b       	or	r24, r18
    1420:	82 b9       	out	0x02, r24	; 2
    1422:	8f ef       	ldi	r24, 0xFF	; 255
    1424:	90 e7       	ldi	r25, 0x70	; 112
    1426:	22 e0       	ldi	r18, 0x02	; 2
    1428:	81 50       	subi	r24, 0x01	; 1
    142a:	90 40       	sbci	r25, 0x00	; 0
    142c:	20 40       	sbci	r18, 0x00	; 0
    142e:	e1 f7       	brne	.-8      	; 0x1428 <_Z18Rele_Abilitazione2ii+0x4a>
    1430:	00 c0       	rjmp	.+0      	; 0x1432 <_Z18Rele_Abilitazione2ii+0x54>
    1432:	00 00       	nop
    1434:	08 95       	ret
    1436:	22 b1       	in	r18, 0x02	; 2
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	01 c0       	rjmp	.+2      	; 0x1440 <_Z18Rele_Abilitazione2ii+0x62>
    143e:	88 0f       	add	r24, r24
    1440:	6a 95       	dec	r22
    1442:	ea f7       	brpl	.-6      	; 0x143e <_Z18Rele_Abilitazione2ii+0x60>
    1444:	98 2f       	mov	r25, r24
    1446:	90 95       	com	r25
    1448:	92 23       	and	r25, r18
    144a:	92 b9       	out	0x02, r25	; 2
    144c:	3f ef       	ldi	r19, 0xFF	; 255
    144e:	45 ea       	ldi	r20, 0xA5	; 165
    1450:	2e e0       	ldi	r18, 0x0E	; 14
    1452:	31 50       	subi	r19, 0x01	; 1
    1454:	40 40       	sbci	r20, 0x00	; 0
    1456:	20 40       	sbci	r18, 0x00	; 0
    1458:	e1 f7       	brne	.-8      	; 0x1452 <_Z18Rele_Abilitazione2ii+0x74>
    145a:	00 c0       	rjmp	.+0      	; 0x145c <_Z18Rele_Abilitazione2ii+0x7e>
    145c:	00 00       	nop
    145e:	92 b1       	in	r25, 0x02	; 2
    1460:	89 2b       	or	r24, r25
    1462:	82 b9       	out	0x02, r24	; 2
    1464:	08 95       	ret

00001466 <_Z12Control_WIFIi>:
    1466:	23 9a       	sbi	0x04, 3	; 4
    1468:	2f ef       	ldi	r18, 0xFF	; 255
    146a:	36 e7       	ldi	r19, 0x76	; 118
    146c:	41 e0       	ldi	r20, 0x01	; 1
    146e:	21 50       	subi	r18, 0x01	; 1
    1470:	30 40       	sbci	r19, 0x00	; 0
    1472:	40 40       	sbci	r20, 0x00	; 0
    1474:	e1 f7       	brne	.-8      	; 0x146e <_Z12Control_WIFIi+0x8>
    1476:	00 c0       	rjmp	.+0      	; 0x1478 <_Z12Control_WIFIi+0x12>
    1478:	00 00       	nop
    147a:	81 30       	cpi	r24, 0x01	; 1
    147c:	91 05       	cpc	r25, r1
    147e:	11 f4       	brne	.+4      	; 0x1484 <_Z12Control_WIFIi+0x1e>
    1480:	2b 9a       	sbi	0x05, 3	; 5
    1482:	08 95       	ret
    1484:	89 2b       	or	r24, r25
    1486:	09 f4       	brne	.+2      	; 0x148a <_Z12Control_WIFIi+0x24>
    1488:	2b 98       	cbi	0x05, 3	; 5
    148a:	08 95       	ret

0000148c <_Z6Azzerav>:
    148c:	6a ee       	ldi	r22, 0xEA	; 234
    148e:	71 e0       	ldi	r23, 0x01	; 1
    1490:	89 e1       	ldi	r24, 0x19	; 25
    1492:	9b e0       	ldi	r25, 0x0B	; 11
    1494:	0e 94 36 3c 	call	0x786c	; 0x786c <_ZN6StringaSEPKc>
    1498:	10 92 21 0b 	sts	0x0B21, r1	; 0x800b21 <impulsi+0x1>
    149c:	10 92 20 0b 	sts	0x0B20, r1	; 0x800b20 <impulsi>
    14a0:	10 92 61 0b 	sts	0x0B61, r1	; 0x800b61 <alreadyTimbrata>
    14a4:	65 e1       	ldi	r22, 0x15	; 21
    14a6:	75 e0       	ldi	r23, 0x05	; 5
    14a8:	8b e6       	ldi	r24, 0x6B	; 107
    14aa:	9b e0       	ldi	r25, 0x0B	; 11
    14ac:	0e 94 36 3c 	call	0x786c	; 0x786c <_ZN6StringaSEPKc>
    14b0:	65 e1       	ldi	r22, 0x15	; 21
    14b2:	75 e0       	ldi	r23, 0x05	; 5
    14b4:	81 e7       	ldi	r24, 0x71	; 113
    14b6:	9b e0       	ldi	r25, 0x0B	; 11
    14b8:	0e 94 36 3c 	call	0x786c	; 0x786c <_ZN6StringaSEPKc>
    14bc:	61 e8       	ldi	r22, 0x81	; 129
    14be:	78 e0       	ldi	r23, 0x08	; 8
    14c0:	87 e7       	ldi	r24, 0x77	; 119
    14c2:	9b e0       	ldi	r25, 0x0B	; 11
    14c4:	0e 94 36 3c 	call	0x786c	; 0x786c <_ZN6StringaSEPKc>
    14c8:	10 92 1f 0b 	sts	0x0B1F, r1	; 0x800b1f <distr_selezionato>
    14cc:	67 e0       	ldi	r22, 0x07	; 7
    14ce:	70 e0       	ldi	r23, 0x00	; 0
    14d0:	81 e0       	ldi	r24, 0x01	; 1
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	49 df       	rcall	.-366    	; 0x1368 <_Z18Rele_Abilitazione1ii>
    14d6:	67 e0       	ldi	r22, 0x07	; 7
    14d8:	70 e0       	ldi	r23, 0x00	; 0
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	7f df       	rcall	.-258    	; 0x13de <_Z18Rele_Abilitazione2ii>
    14e0:	80 e0       	ldi	r24, 0x00	; 0
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	c0 df       	rcall	.-128    	; 0x1466 <_Z12Control_WIFIi>
    14e6:	8f e1       	ldi	r24, 0x1F	; 31
    14e8:	9e e4       	ldi	r25, 0x4E	; 78
    14ea:	01 97       	sbiw	r24, 0x01	; 1
    14ec:	f1 f7       	brne	.-4      	; 0x14ea <_Z6Azzerav+0x5e>
    14ee:	00 c0       	rjmp	.+0      	; 0x14f0 <_Z6Azzerav+0x64>
    14f0:	00 00       	nop
    14f2:	8f e9       	ldi	r24, 0x9F	; 159
    14f4:	9a e0       	ldi	r25, 0x0A	; 10
    14f6:	0e 94 49 29 	call	0x5292	; 0x5292 <_ZN14EthernetClient5flushEv>
    14fa:	8f e9       	ldi	r24, 0x9F	; 159
    14fc:	9a e0       	ldi	r25, 0x0A	; 10
    14fe:	0e 94 8e 29 	call	0x531c	; 0x531c <_ZN14EthernetClient4stopEv>
    1502:	8f e1       	ldi	r24, 0x1F	; 31
    1504:	9e e4       	ldi	r25, 0x4E	; 78
    1506:	01 97       	sbiw	r24, 0x01	; 1
    1508:	f1 f7       	brne	.-4      	; 0x1506 <_Z6Azzerav+0x7a>
    150a:	00 c0       	rjmp	.+0      	; 0x150c <_Z6Azzerav+0x80>
    150c:	00 00       	nop
    150e:	8c ea       	ldi	r24, 0xAC	; 172
    1510:	9a e0       	ldi	r25, 0x0A	; 10
    1512:	0e 94 49 29 	call	0x5292	; 0x5292 <_ZN14EthernetClient5flushEv>
    1516:	8c ea       	ldi	r24, 0xAC	; 172
    1518:	9a e0       	ldi	r25, 0x0A	; 10
    151a:	0e 94 8e 29 	call	0x531c	; 0x531c <_ZN14EthernetClient4stopEv>
    151e:	10 92 25 0b 	sts	0x0B25, r1	; 0x800b25 <Connected+0x1>
    1522:	10 92 24 0b 	sts	0x0B24, r1	; 0x800b24 <Connected>
    1526:	8f e1       	ldi	r24, 0x1F	; 31
    1528:	9e e4       	ldi	r25, 0x4E	; 78
    152a:	01 97       	sbiw	r24, 0x01	; 1
    152c:	f1 f7       	brne	.-4      	; 0x152a <_Z6Azzerav+0x9e>
    152e:	00 c0       	rjmp	.+0      	; 0x1530 <_Z6Azzerav+0xa4>
    1530:	00 00       	nop
    1532:	2c 98       	cbi	0x05, 4	; 5
    1534:	8f e1       	ldi	r24, 0x1F	; 31
    1536:	9e e4       	ldi	r25, 0x4E	; 78
    1538:	01 97       	sbiw	r24, 0x01	; 1
    153a:	f1 f7       	brne	.-4      	; 0x1538 <_Z6Azzerav+0xac>
    153c:	00 c0       	rjmp	.+0      	; 0x153e <_Z6Azzerav+0xb2>
    153e:	00 00       	nop
    1540:	2c 9a       	sbi	0x05, 4	; 5
    1542:	8f e1       	ldi	r24, 0x1F	; 31
    1544:	9e e4       	ldi	r25, 0x4E	; 78
    1546:	01 97       	sbiw	r24, 0x01	; 1
    1548:	f1 f7       	brne	.-4      	; 0x1546 <_Z6Azzerav+0xba>
    154a:	00 c0       	rjmp	.+0      	; 0x154c <_Z6Azzerav+0xc0>
    154c:	00 00       	nop
    154e:	0e 94 95 01 	call	0x32a	; 0x32a <_ZL11disable_ETHv>
    1552:	8f e1       	ldi	r24, 0x1F	; 31
    1554:	9e e4       	ldi	r25, 0x4E	; 78
    1556:	01 97       	sbiw	r24, 0x01	; 1
    1558:	f1 f7       	brne	.-4      	; 0x1556 <_Z6Azzerav+0xca>
    155a:	00 c0       	rjmp	.+0      	; 0x155c <_Z6Azzerav+0xd0>
    155c:	00 00       	nop
    155e:	0e 94 93 01 	call	0x326	; 0x326 <_ZL10enable_ETHv>
    1562:	82 b1       	in	r24, 0x02	; 2
    1564:	82 b9       	out	0x02, r24	; 2
    1566:	82 b1       	in	r24, 0x02	; 2
    1568:	82 b9       	out	0x02, r24	; 2
    156a:	6a ee       	ldi	r22, 0xEA	; 234
    156c:	71 e0       	ldi	r23, 0x01	; 1
    156e:	87 ed       	ldi	r24, 0xD7	; 215
    1570:	9a e0       	ldi	r25, 0x0A	; 10
    1572:	0e 94 36 3c 	call	0x786c	; 0x786c <_ZN6StringaSEPKc>
    1576:	6a ee       	ldi	r22, 0xEA	; 234
    1578:	71 e0       	ldi	r23, 0x01	; 1
    157a:	8d ed       	ldi	r24, 0xDD	; 221
    157c:	9a e0       	ldi	r25, 0x0A	; 10
    157e:	0e 94 36 3c 	call	0x786c	; 0x786c <_ZN6StringaSEPKc>
    1582:	6a ee       	ldi	r22, 0xEA	; 234
    1584:	71 e0       	ldi	r23, 0x01	; 1
    1586:	8d ed       	ldi	r24, 0xDD	; 221
    1588:	9a e0       	ldi	r25, 0x0A	; 10
    158a:	0e 94 36 3c 	call	0x786c	; 0x786c <_ZN6StringaSEPKc>
    158e:	89 e4       	ldi	r24, 0x49	; 73
    1590:	9b e0       	ldi	r25, 0x0B	; 11
    1592:	0e 94 51 30 	call	0x60a2	; 0x60a2 <_ZN3LCD11noBacklightEv>
    1596:	89 e4       	ldi	r24, 0x49	; 73
    1598:	9b e0       	ldi	r25, 0x0B	; 11
    159a:	0e 94 a9 30 	call	0x6152	; 0x6152 <_ZN3LCD9noDisplayEv>
    159e:	10 92 8f 0a 	sts	0x0A8F, r1	; 0x800a8f <secs>
    15a2:	10 92 90 0a 	sts	0x0A90, r1	; 0x800a90 <secs+0x1>
    15a6:	10 92 91 0a 	sts	0x0A91, r1	; 0x800a91 <secs+0x2>
    15aa:	10 92 92 0a 	sts	0x0A92, r1	; 0x800a92 <secs+0x3>
    15ae:	10 92 8b 0a 	sts	0x0A8B, r1	; 0x800a8b <UltimoPassaggioStato>
    15b2:	10 92 8c 0a 	sts	0x0A8C, r1	; 0x800a8c <UltimoPassaggioStato+0x1>
    15b6:	10 92 8d 0a 	sts	0x0A8D, r1	; 0x800a8d <UltimoPassaggioStato+0x2>
    15ba:	10 92 8e 0a 	sts	0x0A8E, r1	; 0x800a8e <UltimoPassaggioStato+0x3>
    15be:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
    15c2:	6a e8       	ldi	r22, 0x8A	; 138
    15c4:	75 e0       	ldi	r23, 0x05	; 5
    15c6:	80 e1       	ldi	r24, 0x10	; 16
    15c8:	9d e0       	ldi	r25, 0x0D	; 13
    15ca:	0e 94 1c 39 	call	0x7238	; 0x7238 <_ZN5Print7printlnEPKc>
    15ce:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
    15d2:	6a ee       	ldi	r22, 0xEA	; 234
    15d4:	71 e0       	ldi	r23, 0x01	; 1
    15d6:	8b e7       	ldi	r24, 0x7B	; 123
    15d8:	9a e0       	ldi	r25, 0x0A	; 10
    15da:	0e 94 36 3c 	call	0x786c	; 0x786c <_ZN6StringaSEPKc>
    15de:	8f ef       	ldi	r24, 0xFF	; 255
    15e0:	9f ef       	ldi	r25, 0xFF	; 255
    15e2:	90 93 23 0b 	sts	0x0B23, r25	; 0x800b23 <stato_procedura+0x1>
    15e6:	80 93 22 0b 	sts	0x0B22, r24	; 0x800b22 <stato_procedura>
    15ea:	08 95       	ret

000015ec <_Z10inputTargac>:
    15ec:	cf 93       	push	r28
    15ee:	df 93       	push	r29
    15f0:	cd b7       	in	r28, 0x3d	; 61
    15f2:	de b7       	in	r29, 0x3e	; 62
    15f4:	62 97       	sbiw	r28, 0x12	; 18
    15f6:	0f b6       	in	r0, 0x3f	; 63
    15f8:	f8 94       	cli
    15fa:	de bf       	out	0x3e, r29	; 62
    15fc:	0f be       	out	0x3f, r0	; 63
    15fe:	cd bf       	out	0x3d, r28	; 61
    1600:	81 34       	cpi	r24, 0x41	; 65
    1602:	21 f1       	breq	.+72     	; 0x164c <_Z10inputTargac+0x60>
    1604:	d8 f4       	brcc	.+54     	; 0x163c <_Z10inputTargac+0x50>
    1606:	83 32       	cpi	r24, 0x23	; 35
    1608:	09 f4       	brne	.+2      	; 0x160c <_Z10inputTargac+0x20>
    160a:	86 c0       	rjmp	.+268    	; 0x1718 <_Z10inputTargac+0x12c>
    160c:	8a 32       	cpi	r24, 0x2A	; 42
    160e:	09 f0       	breq	.+2      	; 0x1612 <_Z10inputTargac+0x26>
    1610:	b3 c0       	rjmp	.+358    	; 0x1778 <_Z10inputTargac+0x18c>
    1612:	6a ee       	ldi	r22, 0xEA	; 234
    1614:	71 e0       	ldi	r23, 0x01	; 1
    1616:	8b e7       	ldi	r24, 0x7B	; 123
    1618:	9a e0       	ldi	r25, 0x0A	; 10
    161a:	0e 94 36 3c 	call	0x786c	; 0x786c <_ZN6StringaSEPKc>
    161e:	6f e9       	ldi	r22, 0x9F	; 159
    1620:	75 e0       	ldi	r23, 0x05	; 5
    1622:	87 ed       	ldi	r24, 0xD7	; 215
    1624:	9a e0       	ldi	r25, 0x0A	; 10
    1626:	0e 94 36 3c 	call	0x786c	; 0x786c <_ZN6StringaSEPKc>
    162a:	6a ee       	ldi	r22, 0xEA	; 234
    162c:	71 e0       	ldi	r23, 0x01	; 1
    162e:	8d ed       	ldi	r24, 0xDD	; 221
    1630:	9a e0       	ldi	r25, 0x0A	; 10
    1632:	0e 94 36 3c 	call	0x786c	; 0x786c <_ZN6StringaSEPKc>
    1636:	6a ee       	ldi	r22, 0xEA	; 234
    1638:	71 e0       	ldi	r23, 0x01	; 1
    163a:	8f c0       	rjmp	.+286    	; 0x175a <_Z10inputTargac+0x16e>
    163c:	83 34       	cpi	r24, 0x43	; 67
    163e:	09 f4       	brne	.+2      	; 0x1642 <_Z10inputTargac+0x56>
    1640:	51 c0       	rjmp	.+162    	; 0x16e4 <_Z10inputTargac+0xf8>
    1642:	a0 f0       	brcs	.+40     	; 0x166c <_Z10inputTargac+0x80>
    1644:	8e 34       	cpi	r24, 0x4E	; 78
    1646:	09 f4       	brne	.+2      	; 0x164a <_Z10inputTargac+0x5e>
    1648:	d2 c0       	rjmp	.+420    	; 0x17ee <_Z10inputTargac+0x202>
    164a:	96 c0       	rjmp	.+300    	; 0x1778 <_Z10inputTargac+0x18c>
    164c:	80 91 7f 0a 	lds	r24, 0x0A7F	; 0x800a7f <TARGA+0x4>
    1650:	90 91 80 0a 	lds	r25, 0x0A80	; 0x800a80 <TARGA+0x5>
    1654:	05 97       	sbiw	r24, 0x05	; 5
    1656:	09 f0       	breq	.+2      	; 0x165a <_Z10inputTargac+0x6e>
    1658:	ca c0       	rjmp	.+404    	; 0x17ee <_Z10inputTargac+0x202>
    165a:	6b e7       	ldi	r22, 0x7B	; 123
    165c:	7a e0       	ldi	r23, 0x0A	; 10
    165e:	ce 01       	movw	r24, r28
    1660:	01 96       	adiw	r24, 0x01	; 1
    1662:	0e 94 23 3c 	call	0x7846	; 0x7846 <_ZN6StringC1ERKS_>
    1666:	6b e9       	ldi	r22, 0x9B	; 155
    1668:	75 e0       	ldi	r23, 0x05	; 5
    166a:	0f c0       	rjmp	.+30     	; 0x168a <_Z10inputTargac+0x9e>
    166c:	80 91 7f 0a 	lds	r24, 0x0A7F	; 0x800a7f <TARGA+0x4>
    1670:	90 91 80 0a 	lds	r25, 0x0A80	; 0x800a80 <TARGA+0x5>
    1674:	05 97       	sbiw	r24, 0x05	; 5
    1676:	09 f0       	breq	.+2      	; 0x167a <_Z10inputTargac+0x8e>
    1678:	ba c0       	rjmp	.+372    	; 0x17ee <_Z10inputTargac+0x202>
    167a:	6b e7       	ldi	r22, 0x7B	; 123
    167c:	7a e0       	ldi	r23, 0x0A	; 10
    167e:	ce 01       	movw	r24, r28
    1680:	01 96       	adiw	r24, 0x01	; 1
    1682:	0e 94 23 3c 	call	0x7846	; 0x7846 <_ZN6StringC1ERKS_>
    1686:	6d e9       	ldi	r22, 0x9D	; 157
    1688:	75 e0       	ldi	r23, 0x05	; 5
    168a:	ce 01       	movw	r24, r28
    168c:	01 96       	adiw	r24, 0x01	; 1
    168e:	0e 94 9d 3d 	call	0x7b3a	; 0x7b3a <_ZplRK15StringSumHelperPKc>
    1692:	bc 01       	movw	r22, r24
    1694:	ce 01       	movw	r24, r28
    1696:	07 96       	adiw	r24, 0x07	; 7
    1698:	0e 94 23 3c 	call	0x7846	; 0x7846 <_ZN6StringC1ERKS_>
    169c:	ce 01       	movw	r24, r28
    169e:	01 96       	adiw	r24, 0x01	; 1
    16a0:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	47 e0       	ldi	r20, 0x07	; 7
    16aa:	50 e0       	ldi	r21, 0x00	; 0
    16ac:	be 01       	movw	r22, r28
    16ae:	63 5f       	subi	r22, 0xF3	; 243
    16b0:	7f 4f       	sbci	r23, 0xFF	; 255
    16b2:	ce 01       	movw	r24, r28
    16b4:	07 96       	adiw	r24, 0x07	; 7
    16b6:	0e 94 de 3d 	call	0x7bbc	; 0x7bbc <_ZNK6String8getBytesEPhjj>
    16ba:	be 01       	movw	r22, r28
    16bc:	63 5f       	subi	r22, 0xF3	; 243
    16be:	7f 4f       	sbci	r23, 0xFF	; 255
    16c0:	ce 01       	movw	r24, r28
    16c2:	01 96       	adiw	r24, 0x01	; 1
    16c4:	94 d8       	rcall	.-3800   	; 0x7ee <_Z16scrivi_TAG_MezzoPc>
    16c6:	8f e3       	ldi	r24, 0x3F	; 63
    16c8:	9c e9       	ldi	r25, 0x9C	; 156
    16ca:	01 97       	sbiw	r24, 0x01	; 1
    16cc:	f1 f7       	brne	.-4      	; 0x16ca <_Z10inputTargac+0xde>
    16ce:	00 c0       	rjmp	.+0      	; 0x16d0 <_Z10inputTargac+0xe4>
    16d0:	00 00       	nop
    16d2:	ce 01       	movw	r24, r28
    16d4:	01 96       	adiw	r24, 0x01	; 1
    16d6:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
    16da:	ce 01       	movw	r24, r28
    16dc:	07 96       	adiw	r24, 0x07	; 7
    16de:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
    16e2:	85 c0       	rjmp	.+266    	; 0x17ee <_Z10inputTargac+0x202>
    16e4:	20 91 7f 0a 	lds	r18, 0x0A7F	; 0x800a7f <TARGA+0x4>
    16e8:	30 91 80 0a 	lds	r19, 0x0A80	; 0x800a80 <TARGA+0x5>
    16ec:	21 15       	cp	r18, r1
    16ee:	31 05       	cpc	r19, r1
    16f0:	09 f4       	brne	.+2      	; 0x16f4 <_Z10inputTargac+0x108>
    16f2:	7d c0       	rjmp	.+250    	; 0x17ee <_Z10inputTargac+0x202>
    16f4:	21 50       	subi	r18, 0x01	; 1
    16f6:	31 09       	sbc	r19, r1
    16f8:	40 e0       	ldi	r20, 0x00	; 0
    16fa:	50 e0       	ldi	r21, 0x00	; 0
    16fc:	6b e7       	ldi	r22, 0x7B	; 123
    16fe:	7a e0       	ldi	r23, 0x0A	; 10
    1700:	ce 01       	movw	r24, r28
    1702:	01 96       	adiw	r24, 0x01	; 1
    1704:	0e 94 0c 3e 	call	0x7c18	; 0x7c18 <_ZNK6String9substringEjj>
    1708:	be 01       	movw	r22, r28
    170a:	6f 5f       	subi	r22, 0xFF	; 255
    170c:	7f 4f       	sbci	r23, 0xFF	; 255
    170e:	8b e7       	ldi	r24, 0x7B	; 123
    1710:	9a e0       	ldi	r25, 0x0A	; 10
    1712:	0e 94 2b 3c 	call	0x7856	; 0x7856 <_ZN6StringaSEOS_>
    1716:	3c c0       	rjmp	.+120    	; 0x1790 <_Z10inputTargac+0x1a4>
    1718:	80 91 7f 0a 	lds	r24, 0x0A7F	; 0x800a7f <TARGA+0x4>
    171c:	90 91 80 0a 	lds	r25, 0x0A80	; 0x800a80 <TARGA+0x5>
    1720:	05 97       	sbiw	r24, 0x05	; 5
    1722:	09 f0       	breq	.+2      	; 0x1726 <_Z10inputTargac+0x13a>
    1724:	64 c0       	rjmp	.+200    	; 0x17ee <_Z10inputTargac+0x202>
    1726:	6b e7       	ldi	r22, 0x7B	; 123
    1728:	7a e0       	ldi	r23, 0x0A	; 10
    172a:	81 e7       	ldi	r24, 0x71	; 113
    172c:	9b e0       	ldi	r25, 0x0B	; 11
    172e:	0e 94 0e 3c 	call	0x781c	; 0x781c <_ZN6StringaSERKS_>
    1732:	61 e7       	ldi	r22, 0x71	; 113
    1734:	7b e0       	ldi	r23, 0x0B	; 11
    1736:	8b ef       	ldi	r24, 0xFB	; 251
    1738:	9a e0       	ldi	r25, 0x0A	; 10
    173a:	0e 94 0e 3c 	call	0x781c	; 0x781c <_ZN6StringaSERKS_>
    173e:	60 ee       	ldi	r22, 0xE0	; 224
    1740:	75 e0       	ldi	r23, 0x05	; 5
    1742:	87 ed       	ldi	r24, 0xD7	; 215
    1744:	9a e0       	ldi	r25, 0x0A	; 10
    1746:	0e 94 36 3c 	call	0x786c	; 0x786c <_ZN6StringaSEPKc>
    174a:	64 ef       	ldi	r22, 0xF4	; 244
    174c:	75 e0       	ldi	r23, 0x05	; 5
    174e:	8d ed       	ldi	r24, 0xDD	; 221
    1750:	9a e0       	ldi	r25, 0x0A	; 10
    1752:	0e 94 36 3c 	call	0x786c	; 0x786c <_ZN6StringaSEPKc>
    1756:	63 e0       	ldi	r22, 0x03	; 3
    1758:	76 e0       	ldi	r23, 0x06	; 6
    175a:	83 ee       	ldi	r24, 0xE3	; 227
    175c:	9a e0       	ldi	r25, 0x0A	; 10
    175e:	0e 94 36 3c 	call	0x786c	; 0x786c <_ZN6StringaSEPKc>
    1762:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <TselDistributore>
    1766:	70 91 23 01 	lds	r23, 0x0123	; 0x800123 <TselDistributore+0x1>
    176a:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <TselDistributore+0x2>
    176e:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <TselDistributore+0x3>
    1772:	0e 94 b6 03 	call	0x76c	; 0x76c <_Z11avanzaStatom>
    1776:	3b c0       	rjmp	.+118    	; 0x17ee <_Z10inputTargac+0x202>
    1778:	68 2f       	mov	r22, r24
    177a:	ce 01       	movw	r24, r28
    177c:	01 96       	adiw	r24, 0x01	; 1
    177e:	0e 94 4b 3c 	call	0x7896	; 0x7896 <_ZN6StringC1Ec>
    1782:	be 01       	movw	r22, r28
    1784:	6f 5f       	subi	r22, 0xFF	; 255
    1786:	7f 4f       	sbci	r23, 0xFF	; 255
    1788:	8b e7       	ldi	r24, 0x7B	; 123
    178a:	9a e0       	ldi	r25, 0x0A	; 10
    178c:	0e 94 66 3d 	call	0x7acc	; 0x7acc <_ZN6String6concatERKS_>
    1790:	ce 01       	movw	r24, r28
    1792:	01 96       	adiw	r24, 0x01	; 1
    1794:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
    1798:	62 eb       	ldi	r22, 0xB2	; 178
    179a:	75 e0       	ldi	r23, 0x05	; 5
    179c:	87 ed       	ldi	r24, 0xD7	; 215
    179e:	9a e0       	ldi	r25, 0x0A	; 10
    17a0:	0e 94 36 3c 	call	0x786c	; 0x786c <_ZN6StringaSEPKc>
    17a4:	64 ec       	ldi	r22, 0xC4	; 196
    17a6:	75 e0       	ldi	r23, 0x05	; 5
    17a8:	ce 01       	movw	r24, r28
    17aa:	01 96       	adiw	r24, 0x01	; 1
    17ac:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
    17b0:	6b e7       	ldi	r22, 0x7B	; 123
    17b2:	7a e0       	ldi	r23, 0x0A	; 10
    17b4:	ce 01       	movw	r24, r28
    17b6:	01 96       	adiw	r24, 0x01	; 1
    17b8:	0e 94 8c 3d 	call	0x7b18	; 0x7b18 <_ZplRK15StringSumHelperRK6String>
    17bc:	bc 01       	movw	r22, r24
    17be:	8d ed       	ldi	r24, 0xDD	; 221
    17c0:	9a e0       	ldi	r25, 0x0A	; 10
    17c2:	0e 94 0e 3c 	call	0x781c	; 0x781c <_ZN6StringaSERKS_>
    17c6:	ce 01       	movw	r24, r28
    17c8:	01 96       	adiw	r24, 0x01	; 1
    17ca:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
    17ce:	6b ec       	ldi	r22, 0xCB	; 203
    17d0:	75 e0       	ldi	r23, 0x05	; 5
    17d2:	83 ee       	ldi	r24, 0xE3	; 227
    17d4:	9a e0       	ldi	r25, 0x0A	; 10
    17d6:	0e 94 36 3c 	call	0x786c	; 0x786c <_ZN6StringaSEPKc>
    17da:	60 91 22 0b 	lds	r22, 0x0B22	; 0x800b22 <stato_procedura>
    17de:	70 91 23 0b 	lds	r23, 0x0B23	; 0x800b23 <stato_procedura+0x1>
    17e2:	4a e0       	ldi	r20, 0x0A	; 10
    17e4:	50 e0       	ldi	r21, 0x00	; 0
    17e6:	81 ed       	ldi	r24, 0xD1	; 209
    17e8:	9a e0       	ldi	r25, 0x0A	; 10
    17ea:	0e 94 81 03 	call	0x702	; 0x702 <_Z10displayLCDP6Stringii>
    17ee:	62 96       	adiw	r28, 0x12	; 18
    17f0:	0f b6       	in	r0, 0x3f	; 63
    17f2:	f8 94       	cli
    17f4:	de bf       	out	0x3e, r29	; 62
    17f6:	0f be       	out	0x3f, r0	; 63
    17f8:	cd bf       	out	0x3d, r28	; 61
    17fa:	df 91       	pop	r29
    17fc:	cf 91       	pop	r28
    17fe:	08 95       	ret

00001800 <_Z7inputKMc>:
    1800:	cf 93       	push	r28
    1802:	df 93       	push	r29
    1804:	00 d0       	rcall	.+0      	; 0x1806 <_Z7inputKMc+0x6>
    1806:	00 d0       	rcall	.+0      	; 0x1808 <_Z7inputKMc+0x8>
    1808:	00 d0       	rcall	.+0      	; 0x180a <_Z7inputKMc+0xa>
    180a:	cd b7       	in	r28, 0x3d	; 61
    180c:	de b7       	in	r29, 0x3e	; 62
    180e:	83 34       	cpi	r24, 0x43	; 67
    1810:	60 f4       	brcc	.+24     	; 0x182a <_Z7inputKMc+0x2a>
    1812:	81 34       	cpi	r24, 0x41	; 65
    1814:	08 f0       	brcs	.+2      	; 0x1818 <_Z7inputKMc+0x18>
    1816:	bf c0       	rjmp	.+382    	; 0x1996 <_Z7inputKMc+0x196>
    1818:	8a 32       	cpi	r24, 0x2A	; 42
    181a:	09 f4       	brne	.+2      	; 0x181e <_Z7inputKMc+0x1e>
    181c:	bc c0       	rjmp	.+376    	; 0x1996 <_Z7inputKMc+0x196>
    181e:	8e 32       	cpi	r24, 0x2E	; 46
    1820:	09 f4       	brne	.+2      	; 0x1824 <_Z7inputKMc+0x24>
    1822:	b9 c0       	rjmp	.+370    	; 0x1996 <_Z7inputKMc+0x196>
    1824:	83 32       	cpi	r24, 0x23	; 35
    1826:	09 f1       	breq	.+66     	; 0x186a <_Z7inputKMc+0x6a>
    1828:	7b c0       	rjmp	.+246    	; 0x1920 <_Z7inputKMc+0x120>
    182a:	83 34       	cpi	r24, 0x43	; 67
    182c:	21 f0       	breq	.+8      	; 0x1836 <_Z7inputKMc+0x36>
    182e:	8e 34       	cpi	r24, 0x4E	; 78
    1830:	09 f0       	breq	.+2      	; 0x1834 <_Z7inputKMc+0x34>
    1832:	76 c0       	rjmp	.+236    	; 0x1920 <_Z7inputKMc+0x120>
    1834:	b0 c0       	rjmp	.+352    	; 0x1996 <_Z7inputKMc+0x196>
    1836:	20 91 79 0a 	lds	r18, 0x0A79	; 0x800a79 <KM+0x4>
    183a:	30 91 7a 0a 	lds	r19, 0x0A7A	; 0x800a7a <KM+0x5>
    183e:	21 15       	cp	r18, r1
    1840:	31 05       	cpc	r19, r1
    1842:	09 f4       	brne	.+2      	; 0x1846 <_Z7inputKMc+0x46>
    1844:	7d c0       	rjmp	.+250    	; 0x1940 <_Z7inputKMc+0x140>
    1846:	21 50       	subi	r18, 0x01	; 1
    1848:	31 09       	sbc	r19, r1
    184a:	40 e0       	ldi	r20, 0x00	; 0
    184c:	50 e0       	ldi	r21, 0x00	; 0
    184e:	65 e7       	ldi	r22, 0x75	; 117
    1850:	7a e0       	ldi	r23, 0x0A	; 10
    1852:	ce 01       	movw	r24, r28
    1854:	01 96       	adiw	r24, 0x01	; 1
    1856:	0e 94 0c 3e 	call	0x7c18	; 0x7c18 <_ZNK6String9substringEjj>
    185a:	be 01       	movw	r22, r28
    185c:	6f 5f       	subi	r22, 0xFF	; 255
    185e:	7f 4f       	sbci	r23, 0xFF	; 255
    1860:	85 e7       	ldi	r24, 0x75	; 117
    1862:	9a e0       	ldi	r25, 0x0A	; 10
    1864:	0e 94 2b 3c 	call	0x7856	; 0x7856 <_ZN6StringaSEOS_>
    1868:	67 c0       	rjmp	.+206    	; 0x1938 <_Z7inputKMc+0x138>
    186a:	80 91 79 0a 	lds	r24, 0x0A79	; 0x800a79 <KM+0x4>
    186e:	90 91 7a 0a 	lds	r25, 0x0A7A	; 0x800a7a <KM+0x5>
    1872:	04 97       	sbiw	r24, 0x04	; 4
    1874:	09 f0       	breq	.+2      	; 0x1878 <_Z7inputKMc+0x78>
    1876:	8f c0       	rjmp	.+286    	; 0x1996 <_Z7inputKMc+0x196>
    1878:	6b e9       	ldi	r22, 0x9B	; 155
    187a:	75 e0       	ldi	r23, 0x05	; 5
    187c:	8b e6       	ldi	r24, 0x6B	; 107
    187e:	9b e0       	ldi	r25, 0x0B	; 11
    1880:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <_ZNK6String6equalsEPKc>
    1884:	88 23       	and	r24, r24
    1886:	51 f0       	breq	.+20     	; 0x189c <_Z7inputKMc+0x9c>
    1888:	67 e0       	ldi	r22, 0x07	; 7
    188a:	70 e0       	ldi	r23, 0x00	; 0
    188c:	80 e0       	ldi	r24, 0x00	; 0
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	6b dd       	rcall	.-1322   	; 0x1368 <_Z18Rele_Abilitazione1ii>
    1892:	84 e4       	ldi	r24, 0x44	; 68
    1894:	2f dd       	rcall	.-1442   	; 0x12f4 <_Z13abilitaPulserc>
    1896:	6b ef       	ldi	r22, 0xFB	; 251
    1898:	75 e0       	ldi	r23, 0x05	; 5
    189a:	11 c0       	rjmp	.+34     	; 0x18be <_Z7inputKMc+0xbe>
    189c:	6d e9       	ldi	r22, 0x9D	; 157
    189e:	75 e0       	ldi	r23, 0x05	; 5
    18a0:	8b e6       	ldi	r24, 0x6B	; 107
    18a2:	9b e0       	ldi	r25, 0x0B	; 11
    18a4:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <_ZNK6String6equalsEPKc>
    18a8:	88 23       	and	r24, r24
    18aa:	69 f0       	breq	.+26     	; 0x18c6 <_Z7inputKMc+0xc6>
    18ac:	67 e0       	ldi	r22, 0x07	; 7
    18ae:	70 e0       	ldi	r23, 0x00	; 0
    18b0:	80 e0       	ldi	r24, 0x00	; 0
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	94 dd       	rcall	.-1240   	; 0x13de <_Z18Rele_Abilitazione2ii>
    18b6:	82 e4       	ldi	r24, 0x42	; 66
    18b8:	1d dd       	rcall	.-1478   	; 0x12f4 <_Z13abilitaPulserc>
    18ba:	6a e0       	ldi	r22, 0x0A	; 10
    18bc:	76 e0       	ldi	r23, 0x06	; 6
    18be:	83 ee       	ldi	r24, 0xE3	; 227
    18c0:	9a e0       	ldi	r25, 0x0A	; 10
    18c2:	0e 94 36 3c 	call	0x786c	; 0x786c <_ZN6StringaSEPKc>
    18c6:	65 e7       	ldi	r22, 0x75	; 117
    18c8:	7a e0       	ldi	r23, 0x0A	; 10
    18ca:	87 e7       	ldi	r24, 0x77	; 119
    18cc:	9b e0       	ldi	r25, 0x0B	; 11
    18ce:	0e 94 0e 3c 	call	0x781c	; 0x781c <_ZN6StringaSERKS_>
    18d2:	67 e7       	ldi	r22, 0x77	; 119
    18d4:	7b e0       	ldi	r23, 0x0B	; 11
    18d6:	8d e0       	ldi	r24, 0x0D	; 13
    18d8:	9b e0       	ldi	r25, 0x0B	; 11
    18da:	0e 94 0e 3c 	call	0x781c	; 0x781c <_ZN6StringaSERKS_>
    18de:	62 e3       	ldi	r22, 0x32	; 50
    18e0:	76 e0       	ldi	r23, 0x06	; 6
    18e2:	87 ed       	ldi	r24, 0xD7	; 215
    18e4:	9a e0       	ldi	r25, 0x0A	; 10
    18e6:	0e 94 36 3c 	call	0x786c	; 0x786c <_ZN6StringaSEPKc>
    18ea:	6a ee       	ldi	r22, 0xEA	; 234
    18ec:	71 e0       	ldi	r23, 0x01	; 1
    18ee:	8d ed       	ldi	r24, 0xDD	; 221
    18f0:	9a e0       	ldi	r25, 0x0A	; 10
    18f2:	0e 94 36 3c 	call	0x786c	; 0x786c <_ZN6StringaSEPKc>
    18f6:	0e 94 95 01 	call	0x32a	; 0x32a <_ZL11disable_ETHv>
    18fa:	8f e3       	ldi	r24, 0x3F	; 63
    18fc:	9f e1       	ldi	r25, 0x1F	; 31
    18fe:	01 97       	sbiw	r24, 0x01	; 1
    1900:	f1 f7       	brne	.-4      	; 0x18fe <_Z7inputKMc+0xfe>
    1902:	00 c0       	rjmp	.+0      	; 0x1904 <_Z7inputKMc+0x104>
    1904:	00 00       	nop
    1906:	0e 94 93 01 	call	0x326	; 0x326 <_ZL10enable_ETHv>
    190a:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <TsgancioPistola>
    190e:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <TsgancioPistola+0x1>
    1912:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <TsgancioPistola+0x2>
    1916:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <TsgancioPistola+0x3>
    191a:	0e 94 b6 03 	call	0x76c	; 0x76c <_Z11avanzaStatom>
    191e:	3b c0       	rjmp	.+118    	; 0x1996 <_Z7inputKMc+0x196>
    1920:	68 2f       	mov	r22, r24
    1922:	ce 01       	movw	r24, r28
    1924:	01 96       	adiw	r24, 0x01	; 1
    1926:	0e 94 4b 3c 	call	0x7896	; 0x7896 <_ZN6StringC1Ec>
    192a:	be 01       	movw	r22, r28
    192c:	6f 5f       	subi	r22, 0xFF	; 255
    192e:	7f 4f       	sbci	r23, 0xFF	; 255
    1930:	85 e7       	ldi	r24, 0x75	; 117
    1932:	9a e0       	ldi	r25, 0x0A	; 10
    1934:	0e 94 66 3d 	call	0x7acc	; 0x7acc <_ZN6String6concatERKS_>
    1938:	ce 01       	movw	r24, r28
    193a:	01 96       	adiw	r24, 0x01	; 1
    193c:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
    1940:	62 e1       	ldi	r22, 0x12	; 18
    1942:	76 e0       	ldi	r23, 0x06	; 6
    1944:	87 ed       	ldi	r24, 0xD7	; 215
    1946:	9a e0       	ldi	r25, 0x0A	; 10
    1948:	0e 94 36 3c 	call	0x786c	; 0x786c <_ZN6StringaSEPKc>
    194c:	63 e2       	ldi	r22, 0x23	; 35
    194e:	76 e0       	ldi	r23, 0x06	; 6
    1950:	ce 01       	movw	r24, r28
    1952:	01 96       	adiw	r24, 0x01	; 1
    1954:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
    1958:	65 e7       	ldi	r22, 0x75	; 117
    195a:	7a e0       	ldi	r23, 0x0A	; 10
    195c:	ce 01       	movw	r24, r28
    195e:	01 96       	adiw	r24, 0x01	; 1
    1960:	0e 94 8c 3d 	call	0x7b18	; 0x7b18 <_ZplRK15StringSumHelperRK6String>
    1964:	bc 01       	movw	r22, r24
    1966:	8d ed       	ldi	r24, 0xDD	; 221
    1968:	9a e0       	ldi	r25, 0x0A	; 10
    196a:	0e 94 0e 3c 	call	0x781c	; 0x781c <_ZN6StringaSERKS_>
    196e:	ce 01       	movw	r24, r28
    1970:	01 96       	adiw	r24, 0x01	; 1
    1972:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
    1976:	67 e2       	ldi	r22, 0x27	; 39
    1978:	76 e0       	ldi	r23, 0x06	; 6
    197a:	83 ee       	ldi	r24, 0xE3	; 227
    197c:	9a e0       	ldi	r25, 0x0A	; 10
    197e:	0e 94 36 3c 	call	0x786c	; 0x786c <_ZN6StringaSEPKc>
    1982:	60 91 22 0b 	lds	r22, 0x0B22	; 0x800b22 <stato_procedura>
    1986:	70 91 23 0b 	lds	r23, 0x0B23	; 0x800b23 <stato_procedura+0x1>
    198a:	4a e0       	ldi	r20, 0x0A	; 10
    198c:	50 e0       	ldi	r21, 0x00	; 0
    198e:	81 ed       	ldi	r24, 0xD1	; 209
    1990:	9a e0       	ldi	r25, 0x0A	; 10
    1992:	0e 94 81 03 	call	0x702	; 0x702 <_Z10displayLCDP6Stringii>
    1996:	26 96       	adiw	r28, 0x06	; 6
    1998:	0f b6       	in	r0, 0x3f	; 63
    199a:	f8 94       	cli
    199c:	de bf       	out	0x3e, r29	; 62
    199e:	0f be       	out	0x3f, r0	; 63
    19a0:	cd bf       	out	0x3d, r28	; 61
    19a2:	df 91       	pop	r29
    19a4:	cf 91       	pop	r28
    19a6:	08 95       	ret

000019a8 <_Z25read_eeprom_string_struct20ParametriCCEC_struct>:
    19a8:	4f 92       	push	r4
    19aa:	5f 92       	push	r5
    19ac:	6f 92       	push	r6
    19ae:	7f 92       	push	r7
    19b0:	8f 92       	push	r8
    19b2:	9f 92       	push	r9
    19b4:	af 92       	push	r10
    19b6:	bf 92       	push	r11
    19b8:	cf 92       	push	r12
    19ba:	df 92       	push	r13
    19bc:	ef 92       	push	r14
    19be:	ff 92       	push	r15
    19c0:	0f 93       	push	r16
    19c2:	1f 93       	push	r17
    19c4:	cf 93       	push	r28
    19c6:	df 93       	push	r29
    19c8:	00 d0       	rcall	.+0      	; 0x19ca <_Z25read_eeprom_string_struct20ParametriCCEC_struct+0x22>
    19ca:	00 d0       	rcall	.+0      	; 0x19cc <_Z25read_eeprom_string_struct20ParametriCCEC_struct+0x24>
    19cc:	00 d0       	rcall	.+0      	; 0x19ce <_Z25read_eeprom_string_struct20ParametriCCEC_struct+0x26>
    19ce:	cd b7       	in	r28, 0x3d	; 61
    19d0:	de b7       	in	r29, 0x3e	; 62
    19d2:	7c 01       	movw	r14, r24
    19d4:	5b 01       	movw	r10, r22
    19d6:	4d b6       	in	r4, 0x3d	; 61
    19d8:	5e b6       	in	r5, 0x3e	; 62
    19da:	6a e4       	ldi	r22, 0x4A	; 74
    19dc:	77 e0       	ldi	r23, 0x07	; 7
    19de:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
    19e2:	f5 01       	movw	r30, r10
    19e4:	c2 84       	ldd	r12, Z+10	; 0x0a
    19e6:	d3 84       	ldd	r13, Z+11	; 0x0b
    19e8:	8d b7       	in	r24, 0x3d	; 61
    19ea:	9e b7       	in	r25, 0x3e	; 62
    19ec:	8c 19       	sub	r24, r12
    19ee:	9d 09       	sbc	r25, r13
    19f0:	0f b6       	in	r0, 0x3f	; 63
    19f2:	f8 94       	cli
    19f4:	9e bf       	out	0x3e, r25	; 62
    19f6:	0f be       	out	0x3f, r0	; 63
    19f8:	8d bf       	out	0x3d, r24	; 61
    19fa:	ed b7       	in	r30, 0x3d	; 61
    19fc:	fe b7       	in	r31, 0x3e	; 62
    19fe:	31 96       	adiw	r30, 0x01	; 1
    1a00:	4f 01       	movw	r8, r30
    1a02:	3f 01       	movw	r6, r30
    1a04:	f5 01       	movw	r30, r10
    1a06:	04 85       	ldd	r16, Z+12	; 0x0c
    1a08:	15 85       	ldd	r17, Z+13	; 0x0d
    1a0a:	c0 0e       	add	r12, r16
    1a0c:	d1 1e       	adc	r13, r17
    1a0e:	0c 15       	cp	r16, r12
    1a10:	1d 05       	cpc	r17, r13
    1a12:	4c f4       	brge	.+18     	; 0x1a26 <_Z25read_eeprom_string_struct20ParametriCCEC_struct+0x7e>
    1a14:	c8 01       	movw	r24, r16
    1a16:	0e 94 59 45 	call	0x8ab2	; 0x8ab2 <eeprom_read_byte>
    1a1a:	f3 01       	movw	r30, r6
    1a1c:	81 93       	st	Z+, r24
    1a1e:	3f 01       	movw	r6, r30
    1a20:	0f 5f       	subi	r16, 0xFF	; 255
    1a22:	1f 4f       	sbci	r17, 0xFF	; 255
    1a24:	f4 cf       	rjmp	.-24     	; 0x1a0e <_Z25read_eeprom_string_struct20ParametriCCEC_struct+0x66>
    1a26:	6d ee       	ldi	r22, 0xED	; 237
    1a28:	71 e0       	ldi	r23, 0x01	; 1
    1a2a:	80 e1       	ldi	r24, 0x10	; 16
    1a2c:	9d e0       	ldi	r25, 0x0D	; 13
    1a2e:	0e 94 1c 39 	call	0x7238	; 0x7238 <_ZN5Print7printlnEPKc>
    1a32:	6d ee       	ldi	r22, 0xED	; 237
    1a34:	71 e0       	ldi	r23, 0x01	; 1
    1a36:	80 e1       	ldi	r24, 0x10	; 16
    1a38:	9d e0       	ldi	r25, 0x0D	; 13
    1a3a:	0e 94 1c 39 	call	0x7238	; 0x7238 <_ZN5Print7printlnEPKc>
    1a3e:	b4 01       	movw	r22, r8
    1a40:	ce 01       	movw	r24, r28
    1a42:	01 96       	adiw	r24, 0x01	; 1
    1a44:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
    1a48:	be 01       	movw	r22, r28
    1a4a:	6f 5f       	subi	r22, 0xFF	; 255
    1a4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a4e:	c7 01       	movw	r24, r14
    1a50:	0e 94 2b 3c 	call	0x7856	; 0x7856 <_ZN6StringaSEOS_>
    1a54:	ce 01       	movw	r24, r28
    1a56:	01 96       	adiw	r24, 0x01	; 1
    1a58:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
    1a5c:	b5 01       	movw	r22, r10
    1a5e:	ce 01       	movw	r24, r28
    1a60:	01 96       	adiw	r24, 0x01	; 1
    1a62:	0e 94 23 3c 	call	0x7846	; 0x7846 <_ZN6StringC1ERKS_>
    1a66:	66 e1       	ldi	r22, 0x16	; 22
    1a68:	78 e0       	ldi	r23, 0x08	; 8
    1a6a:	ce 01       	movw	r24, r28
    1a6c:	01 96       	adiw	r24, 0x01	; 1
    1a6e:	0e 94 9d 3d 	call	0x7b3a	; 0x7b3a <_ZplRK15StringSumHelperPKc>
    1a72:	bc 01       	movw	r22, r24
    1a74:	80 e1       	ldi	r24, 0x10	; 16
    1a76:	9d e0       	ldi	r25, 0x0D	; 13
    1a78:	0e 94 e3 38 	call	0x71c6	; 0x71c6 <_ZN5Print5printERK6String>
    1a7c:	ce 01       	movw	r24, r28
    1a7e:	01 96       	adiw	r24, 0x01	; 1
    1a80:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
    1a84:	b7 01       	movw	r22, r14
    1a86:	80 e1       	ldi	r24, 0x10	; 16
    1a88:	9d e0       	ldi	r25, 0x0D	; 13
    1a8a:	0e 94 0c 39 	call	0x7218	; 0x7218 <_ZN5Print7printlnERK6String>
    1a8e:	c7 01       	movw	r24, r14
    1a90:	0f b6       	in	r0, 0x3f	; 63
    1a92:	f8 94       	cli
    1a94:	5e be       	out	0x3e, r5	; 62
    1a96:	0f be       	out	0x3f, r0	; 63
    1a98:	4d be       	out	0x3d, r4	; 61
    1a9a:	26 96       	adiw	r28, 0x06	; 6
    1a9c:	0f b6       	in	r0, 0x3f	; 63
    1a9e:	f8 94       	cli
    1aa0:	de bf       	out	0x3e, r29	; 62
    1aa2:	0f be       	out	0x3f, r0	; 63
    1aa4:	cd bf       	out	0x3d, r28	; 61
    1aa6:	df 91       	pop	r29
    1aa8:	cf 91       	pop	r28
    1aaa:	1f 91       	pop	r17
    1aac:	0f 91       	pop	r16
    1aae:	ff 90       	pop	r15
    1ab0:	ef 90       	pop	r14
    1ab2:	df 90       	pop	r13
    1ab4:	cf 90       	pop	r12
    1ab6:	bf 90       	pop	r11
    1ab8:	af 90       	pop	r10
    1aba:	9f 90       	pop	r9
    1abc:	8f 90       	pop	r8
    1abe:	7f 90       	pop	r7
    1ac0:	6f 90       	pop	r6
    1ac2:	5f 90       	pop	r5
    1ac4:	4f 90       	pop	r4
    1ac6:	08 95       	ret

00001ac8 <_Z18read_eeprom_stringii>:
    1ac8:	4f 92       	push	r4
    1aca:	5f 92       	push	r5
    1acc:	6f 92       	push	r6
    1ace:	7f 92       	push	r7
    1ad0:	8f 92       	push	r8
    1ad2:	9f 92       	push	r9
    1ad4:	af 92       	push	r10
    1ad6:	bf 92       	push	r11
    1ad8:	cf 92       	push	r12
    1ada:	df 92       	push	r13
    1adc:	ef 92       	push	r14
    1ade:	ff 92       	push	r15
    1ae0:	0f 93       	push	r16
    1ae2:	1f 93       	push	r17
    1ae4:	cf 93       	push	r28
    1ae6:	df 93       	push	r29
    1ae8:	cd b7       	in	r28, 0x3d	; 61
    1aea:	de b7       	in	r29, 0x3e	; 62
    1aec:	2c 97       	sbiw	r28, 0x0c	; 12
    1aee:	0f b6       	in	r0, 0x3f	; 63
    1af0:	f8 94       	cli
    1af2:	de bf       	out	0x3e, r29	; 62
    1af4:	0f be       	out	0x3f, r0	; 63
    1af6:	cd bf       	out	0x3d, r28	; 61
    1af8:	7c 01       	movw	r14, r24
    1afa:	6b 01       	movw	r12, r22
    1afc:	2a 01       	movw	r4, r20
    1afe:	6d b6       	in	r6, 0x3d	; 61
    1b00:	7e b6       	in	r7, 0x3e	; 62
    1b02:	6a e4       	ldi	r22, 0x4A	; 74
    1b04:	77 e0       	ldi	r23, 0x07	; 7
    1b06:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
    1b0a:	8d b7       	in	r24, 0x3d	; 61
    1b0c:	9e b7       	in	r25, 0x3e	; 62
    1b0e:	8c 19       	sub	r24, r12
    1b10:	9d 09       	sbc	r25, r13
    1b12:	0f b6       	in	r0, 0x3f	; 63
    1b14:	f8 94       	cli
    1b16:	9e bf       	out	0x3e, r25	; 62
    1b18:	0f be       	out	0x3f, r0	; 63
    1b1a:	8d bf       	out	0x3d, r24	; 61
    1b1c:	ed b7       	in	r30, 0x3d	; 61
    1b1e:	fe b7       	in	r31, 0x3e	; 62
    1b20:	31 96       	adiw	r30, 0x01	; 1
    1b22:	5f 01       	movw	r10, r30
    1b24:	6d ee       	ldi	r22, 0xED	; 237
    1b26:	71 e0       	ldi	r23, 0x01	; 1
    1b28:	80 e1       	ldi	r24, 0x10	; 16
    1b2a:	9d e0       	ldi	r25, 0x0D	; 13
    1b2c:	0e 94 1c 39 	call	0x7238	; 0x7238 <_ZN5Print7printlnEPKc>
    1b30:	62 e4       	ldi	r22, 0x42	; 66
    1b32:	76 e0       	ldi	r23, 0x06	; 6
    1b34:	80 e1       	ldi	r24, 0x10	; 16
    1b36:	9d e0       	ldi	r25, 0x0D	; 13
    1b38:	0e 94 1c 39 	call	0x7238	; 0x7238 <_ZN5Print7printlnEPKc>
    1b3c:	6d ee       	ldi	r22, 0xED	; 237
    1b3e:	71 e0       	ldi	r23, 0x01	; 1
    1b40:	80 e1       	ldi	r24, 0x10	; 16
    1b42:	9d e0       	ldi	r25, 0x0D	; 13
    1b44:	0e 94 1c 39 	call	0x7238	; 0x7238 <_ZN5Print7printlnEPKc>
    1b48:	45 01       	movw	r8, r10
    1b4a:	82 01       	movw	r16, r4
    1b4c:	c4 0c       	add	r12, r4
    1b4e:	d5 1c       	adc	r13, r5
    1b50:	0c 15       	cp	r16, r12
    1b52:	1d 05       	cpc	r17, r13
    1b54:	5c f5       	brge	.+86     	; 0x1bac <_Z18read_eeprom_stringii+0xe4>
    1b56:	c8 01       	movw	r24, r16
    1b58:	0e 94 59 45 	call	0x8ab2	; 0x8ab2 <eeprom_read_byte>
    1b5c:	f4 01       	movw	r30, r8
    1b5e:	81 93       	st	Z+, r24
    1b60:	4f 01       	movw	r8, r30
    1b62:	88 23       	and	r24, r24
    1b64:	01 f1       	breq	.+64     	; 0x1ba6 <_Z18read_eeprom_stringii+0xde>
    1b66:	4a e0       	ldi	r20, 0x0A	; 10
    1b68:	68 2f       	mov	r22, r24
    1b6a:	ce 01       	movw	r24, r28
    1b6c:	07 96       	adiw	r24, 0x07	; 7
    1b6e:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_ZN6StringC1Ehh>
    1b72:	6d ee       	ldi	r22, 0xED	; 237
    1b74:	71 e0       	ldi	r23, 0x01	; 1
    1b76:	ce 01       	movw	r24, r28
    1b78:	01 96       	adiw	r24, 0x01	; 1
    1b7a:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
    1b7e:	be 01       	movw	r22, r28
    1b80:	69 5f       	subi	r22, 0xF9	; 249
    1b82:	7f 4f       	sbci	r23, 0xFF	; 255
    1b84:	ce 01       	movw	r24, r28
    1b86:	01 96       	adiw	r24, 0x01	; 1
    1b88:	0e 94 8c 3d 	call	0x7b18	; 0x7b18 <_ZplRK15StringSumHelperRK6String>
    1b8c:	bc 01       	movw	r22, r24
    1b8e:	80 e1       	ldi	r24, 0x10	; 16
    1b90:	9d e0       	ldi	r25, 0x0D	; 13
    1b92:	0e 94 e3 38 	call	0x71c6	; 0x71c6 <_ZN5Print5printERK6String>
    1b96:	ce 01       	movw	r24, r28
    1b98:	01 96       	adiw	r24, 0x01	; 1
    1b9a:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
    1b9e:	ce 01       	movw	r24, r28
    1ba0:	07 96       	adiw	r24, 0x07	; 7
    1ba2:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
    1ba6:	0f 5f       	subi	r16, 0xFF	; 255
    1ba8:	1f 4f       	sbci	r17, 0xFF	; 255
    1baa:	d2 cf       	rjmp	.-92     	; 0x1b50 <_Z18read_eeprom_stringii+0x88>
    1bac:	6d ee       	ldi	r22, 0xED	; 237
    1bae:	71 e0       	ldi	r23, 0x01	; 1
    1bb0:	80 e1       	ldi	r24, 0x10	; 16
    1bb2:	9d e0       	ldi	r25, 0x0D	; 13
    1bb4:	0e 94 1c 39 	call	0x7238	; 0x7238 <_ZN5Print7printlnEPKc>
    1bb8:	6d ee       	ldi	r22, 0xED	; 237
    1bba:	71 e0       	ldi	r23, 0x01	; 1
    1bbc:	80 e1       	ldi	r24, 0x10	; 16
    1bbe:	9d e0       	ldi	r25, 0x0D	; 13
    1bc0:	0e 94 1c 39 	call	0x7238	; 0x7238 <_ZN5Print7printlnEPKc>
    1bc4:	b5 01       	movw	r22, r10
    1bc6:	ce 01       	movw	r24, r28
    1bc8:	01 96       	adiw	r24, 0x01	; 1
    1bca:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
    1bce:	be 01       	movw	r22, r28
    1bd0:	6f 5f       	subi	r22, 0xFF	; 255
    1bd2:	7f 4f       	sbci	r23, 0xFF	; 255
    1bd4:	c7 01       	movw	r24, r14
    1bd6:	0e 94 2b 3c 	call	0x7856	; 0x7856 <_ZN6StringaSEOS_>
    1bda:	ce 01       	movw	r24, r28
    1bdc:	01 96       	adiw	r24, 0x01	; 1
    1bde:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
    1be2:	65 e5       	ldi	r22, 0x55	; 85
    1be4:	76 e0       	ldi	r23, 0x06	; 6
    1be6:	80 e1       	ldi	r24, 0x10	; 16
    1be8:	9d e0       	ldi	r25, 0x0D	; 13
    1bea:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN5Print5printEPKc>
    1bee:	b7 01       	movw	r22, r14
    1bf0:	80 e1       	ldi	r24, 0x10	; 16
    1bf2:	9d e0       	ldi	r25, 0x0D	; 13
    1bf4:	0e 94 0c 39 	call	0x7218	; 0x7218 <_ZN5Print7printlnERK6String>
    1bf8:	c7 01       	movw	r24, r14
    1bfa:	0f b6       	in	r0, 0x3f	; 63
    1bfc:	f8 94       	cli
    1bfe:	7e be       	out	0x3e, r7	; 62
    1c00:	0f be       	out	0x3f, r0	; 63
    1c02:	6d be       	out	0x3d, r6	; 61
    1c04:	2c 96       	adiw	r28, 0x0c	; 12
    1c06:	0f b6       	in	r0, 0x3f	; 63
    1c08:	f8 94       	cli
    1c0a:	de bf       	out	0x3e, r29	; 62
    1c0c:	0f be       	out	0x3f, r0	; 63
    1c0e:	cd bf       	out	0x3d, r28	; 61
    1c10:	df 91       	pop	r29
    1c12:	cf 91       	pop	r28
    1c14:	1f 91       	pop	r17
    1c16:	0f 91       	pop	r16
    1c18:	ff 90       	pop	r15
    1c1a:	ef 90       	pop	r14
    1c1c:	df 90       	pop	r13
    1c1e:	cf 90       	pop	r12
    1c20:	bf 90       	pop	r11
    1c22:	af 90       	pop	r10
    1c24:	9f 90       	pop	r9
    1c26:	8f 90       	pop	r8
    1c28:	7f 90       	pop	r7
    1c2a:	6f 90       	pop	r6
    1c2c:	5f 90       	pop	r5
    1c2e:	4f 90       	pop	r4
    1c30:	08 95       	ret

00001c32 <_Z19write_eeprom_string6Stringii>:

bool write_eeprom_string(String erog,int lunBuffer,int start_ind) {
    1c32:	8f 92       	push	r8
    1c34:	9f 92       	push	r9
    1c36:	af 92       	push	r10
    1c38:	bf 92       	push	r11
    1c3a:	cf 92       	push	r12
    1c3c:	df 92       	push	r13
    1c3e:	ef 92       	push	r14
    1c40:	ff 92       	push	r15
    1c42:	0f 93       	push	r16
    1c44:	1f 93       	push	r17
    1c46:	cf 93       	push	r28
    1c48:	df 93       	push	r29
    1c4a:	cd b7       	in	r28, 0x3d	; 61
    1c4c:	de b7       	in	r29, 0x3e	; 62
    1c4e:	2c 97       	sbiw	r28, 0x0c	; 12
    1c50:	0f b6       	in	r0, 0x3f	; 63
    1c52:	f8 94       	cli
    1c54:	de bf       	out	0x3e, r29	; 62
    1c56:	0f be       	out	0x3f, r0	; 63
    1c58:	cd bf       	out	0x3d, r28	; 61
    1c5a:	6b 01       	movw	r12, r22
    1c5c:	4a 01       	movw	r8, r20
       i++;
  }
 Serial.println(" ");
 
 return true;
}
    1c5e:	ad b6       	in	r10, 0x3d	; 61
    1c60:	be b6       	in	r11, 0x3e	; 62
 return Salvata;
}

bool write_eeprom_string(String erog,int lunBuffer,int start_ind) {
 
 char buf[lunBuffer];
    1c62:	2d b7       	in	r18, 0x3d	; 61
    1c64:	3e b7       	in	r19, 0x3e	; 62
    1c66:	26 1b       	sub	r18, r22
    1c68:	37 0b       	sbc	r19, r23
    1c6a:	0f b6       	in	r0, 0x3f	; 63
    1c6c:	f8 94       	cli
    1c6e:	3e bf       	out	0x3e, r19	; 62
    1c70:	0f be       	out	0x3f, r0	; 63
    1c72:	2d bf       	out	0x3d, r18	; 61
    1c74:	ed b7       	in	r30, 0x3d	; 61
    1c76:	fe b7       	in	r31, 0x3e	; 62
    1c78:	31 96       	adiw	r30, 0x01	; 1
    1c7a:	7f 01       	movw	r14, r30
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{ getBytes((unsigned char *)buf, bufsize, index); }
    1c7c:	fc 01       	movw	r30, r24
    1c7e:	44 81       	ldd	r20, Z+4	; 0x04
    1c80:	55 81       	ldd	r21, Z+5	; 0x05
    1c82:	4f 5f       	subi	r20, 0xFF	; 255
    1c84:	5f 4f       	sbci	r21, 0xFF	; 255
    1c86:	20 e0       	ldi	r18, 0x00	; 0
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	b7 01       	movw	r22, r14
    1c8c:	0e 94 de 3d 	call	0x7bbc	; 0x7bbc <_ZNK6String8getBytesEPhjj>
 erog.toCharArray(buf, erog.length()+1);
 bool out = false;
 int i = 0;
 
 Serial.println(" len: " + String(lunBuffer));
    1c90:	4a e0       	ldi	r20, 0x0A	; 10
    1c92:	b6 01       	movw	r22, r12
    1c94:	ce 01       	movw	r24, r28
    1c96:	07 96       	adiw	r24, 0x07	; 7
    1c98:	0e 94 8d 3c 	call	0x791a	; 0x791a <_ZN6StringC1Eih>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1c9c:	69 ef       	ldi	r22, 0xF9	; 249
    1c9e:	71 e0       	ldi	r23, 0x01	; 1
    1ca0:	ce 01       	movw	r24, r28
    1ca2:	01 96       	adiw	r24, 0x01	; 1
    1ca4:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
    1ca8:	be 01       	movw	r22, r28
    1caa:	69 5f       	subi	r22, 0xF9	; 249
    1cac:	7f 4f       	sbci	r23, 0xFF	; 255
    1cae:	ce 01       	movw	r24, r28
    1cb0:	01 96       	adiw	r24, 0x01	; 1
    1cb2:	0e 94 8c 3d 	call	0x7b18	; 0x7b18 <_ZplRK15StringSumHelperRK6String>
    1cb6:	bc 01       	movw	r22, r24
    1cb8:	80 e1       	ldi	r24, 0x10	; 16
    1cba:	9d e0       	ldi	r25, 0x0D	; 13
    1cbc:	0e 94 0c 39 	call	0x7218	; 0x7218 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1cc0:	ce 01       	movw	r24, r28
    1cc2:	01 96       	adiw	r24, 0x01	; 1
    1cc4:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
    1cc8:	ce 01       	movw	r24, r28
    1cca:	07 96       	adiw	r24, 0x07	; 7
    1ccc:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
 Serial.println("Eseguo scrittura nella EEPROM");
    1cd0:	60 e0       	ldi	r22, 0x00	; 0
    1cd2:	72 e0       	ldi	r23, 0x02	; 2
    1cd4:	80 e1       	ldi	r24, 0x10	; 16
    1cd6:	9d e0       	ldi	r25, 0x0D	; 13
    1cd8:	0e 94 1c 39 	call	0x7238	; 0x7238 <_ZN5Print7printlnEPKc>
 Serial.println(" ");
    1cdc:	6d ee       	ldi	r22, 0xED	; 237
    1cde:	71 e0       	ldi	r23, 0x01	; 1
    1ce0:	80 e1       	ldi	r24, 0x10	; 16
    1ce2:	9d e0       	ldi	r25, 0x0D	; 13
    1ce4:	0e 94 1c 39 	call	0x7238	; 0x7238 <_ZN5Print7printlnEPKc>

  for (int ind = start_ind ; ind < (start_ind + lunBuffer) ; ind++) {
    1ce8:	84 01       	movw	r16, r8
    1cea:	c8 0c       	add	r12, r8
    1cec:	d9 1c       	adc	r13, r9
    1cee:	0c 15       	cp	r16, r12
    1cf0:	1d 05       	cpc	r17, r13
    1cf2:	6c f5       	brge	.+90     	; 0x1d4e <_Z19write_eeprom_string6Stringii+0x11c>
     if (buf[i] != 0) {
    1cf4:	f7 01       	movw	r30, r14
    1cf6:	60 81       	ld	r22, Z
    1cf8:	66 23       	and	r22, r22
    1cfa:	19 f1       	breq	.+70     	; 0x1d42 <_Z19write_eeprom_string6Stringii+0x110>
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator uint8_t() const             { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    1cfc:	c8 01       	movw	r24, r16
    1cfe:	0e 94 61 45 	call	0x8ac2	; 0x8ac2 <eeprom_write_byte>
      EEPROM.write(ind, buf[i]);
      Serial.print(" " + String(buf[i]));
    1d02:	f7 01       	movw	r30, r14
    1d04:	60 81       	ld	r22, Z
    1d06:	ce 01       	movw	r24, r28
    1d08:	07 96       	adiw	r24, 0x07	; 7
    1d0a:	0e 94 4b 3c 	call	0x7896	; 0x7896 <_ZN6StringC1Ec>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1d0e:	6d ee       	ldi	r22, 0xED	; 237
    1d10:	71 e0       	ldi	r23, 0x01	; 1
    1d12:	ce 01       	movw	r24, r28
    1d14:	01 96       	adiw	r24, 0x01	; 1
    1d16:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
    1d1a:	be 01       	movw	r22, r28
    1d1c:	69 5f       	subi	r22, 0xF9	; 249
    1d1e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d20:	ce 01       	movw	r24, r28
    1d22:	01 96       	adiw	r24, 0x01	; 1
    1d24:	0e 94 8c 3d 	call	0x7b18	; 0x7b18 <_ZplRK15StringSumHelperRK6String>
    1d28:	bc 01       	movw	r22, r24
    1d2a:	80 e1       	ldi	r24, 0x10	; 16
    1d2c:	9d e0       	ldi	r25, 0x0D	; 13
    1d2e:	0e 94 e3 38 	call	0x71c6	; 0x71c6 <_ZN5Print5printERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1d32:	ce 01       	movw	r24, r28
    1d34:	01 96       	adiw	r24, 0x01	; 1
    1d36:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
    1d3a:	ce 01       	movw	r24, r28
    1d3c:	07 96       	adiw	r24, 0x07	; 7
    1d3e:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
 
 Serial.println(" len: " + String(lunBuffer));
 Serial.println("Eseguo scrittura nella EEPROM");
 Serial.println(" ");

  for (int ind = start_ind ; ind < (start_ind + lunBuffer) ; ind++) {
    1d42:	0f 5f       	subi	r16, 0xFF	; 255
    1d44:	1f 4f       	sbci	r17, 0xFF	; 255
    1d46:	ff ef       	ldi	r31, 0xFF	; 255
    1d48:	ef 1a       	sub	r14, r31
    1d4a:	ff 0a       	sbc	r15, r31
    1d4c:	d0 cf       	rjmp	.-96     	; 0x1cee <_Z19write_eeprom_string6Stringii+0xbc>
      EEPROM.write(ind, buf[i]);
      Serial.print(" " + String(buf[i]));
     }
       i++;
  }
 Serial.println(" ");
    1d4e:	6d ee       	ldi	r22, 0xED	; 237
    1d50:	71 e0       	ldi	r23, 0x01	; 1
    1d52:	80 e1       	ldi	r24, 0x10	; 16
    1d54:	9d e0       	ldi	r25, 0x0D	; 13
    1d56:	0e 94 1c 39 	call	0x7238	; 0x7238 <_ZN5Print7printlnEPKc>
 
 return true;
}
    1d5a:	81 e0       	ldi	r24, 0x01	; 1
    1d5c:	0f b6       	in	r0, 0x3f	; 63
    1d5e:	f8 94       	cli
    1d60:	be be       	out	0x3e, r11	; 62
    1d62:	0f be       	out	0x3f, r0	; 63
    1d64:	ad be       	out	0x3d, r10	; 61
    1d66:	2c 96       	adiw	r28, 0x0c	; 12
    1d68:	0f b6       	in	r0, 0x3f	; 63
    1d6a:	f8 94       	cli
    1d6c:	de bf       	out	0x3e, r29	; 62
    1d6e:	0f be       	out	0x3f, r0	; 63
    1d70:	cd bf       	out	0x3d, r28	; 61
    1d72:	df 91       	pop	r29
    1d74:	cf 91       	pop	r28
    1d76:	1f 91       	pop	r17
    1d78:	0f 91       	pop	r16
    1d7a:	ff 90       	pop	r15
    1d7c:	ef 90       	pop	r14
    1d7e:	df 90       	pop	r13
    1d80:	cf 90       	pop	r12
    1d82:	bf 90       	pop	r11
    1d84:	af 90       	pop	r10
    1d86:	9f 90       	pop	r9
    1d88:	8f 90       	pop	r8
    1d8a:	08 95       	ret

00001d8c <_ZN20ParametriCCEC_structC1ERKS_>:
{
	String da_memorizzare;
	int startIND;
} Erogazioni_TypeDef;

typedef struct ParametriCCEC_struct
    1d8c:	0f 93       	push	r16
    1d8e:	1f 93       	push	r17
    1d90:	cf 93       	push	r28
    1d92:	df 93       	push	r29
    1d94:	ec 01       	movw	r28, r24
    1d96:	8b 01       	movw	r16, r22
    1d98:	0e 94 23 3c 	call	0x7846	; 0x7846 <_ZN6StringC1ERKS_>
    1d9c:	b8 01       	movw	r22, r16
    1d9e:	6a 5f       	subi	r22, 0xFA	; 250
    1da0:	7f 4f       	sbci	r23, 0xFF	; 255
    1da2:	ce 01       	movw	r24, r28
    1da4:	06 96       	adiw	r24, 0x06	; 6
    1da6:	0e 94 23 3c 	call	0x7846	; 0x7846 <_ZN6StringC1ERKS_>
    1daa:	f8 01       	movw	r30, r16
    1dac:	84 85       	ldd	r24, Z+12	; 0x0c
    1dae:	95 85       	ldd	r25, Z+13	; 0x0d
    1db0:	9d 87       	std	Y+13, r25	; 0x0d
    1db2:	8c 87       	std	Y+12, r24	; 0x0c
    1db4:	df 91       	pop	r29
    1db6:	cf 91       	pop	r28
    1db8:	1f 91       	pop	r17
    1dba:	0f 91       	pop	r16
    1dbc:	08 95       	ret

00001dbe <_ZN20ParametriCCEC_structD1Ev>:
    1dbe:	cf 93       	push	r28
    1dc0:	df 93       	push	r29
    1dc2:	ec 01       	movw	r28, r24
    1dc4:	06 96       	adiw	r24, 0x06	; 6
    1dc6:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
    1dca:	ce 01       	movw	r24, r28
    1dcc:	df 91       	pop	r29
    1dce:	cf 91       	pop	r28
    1dd0:	0c 94 50 3b 	jmp	0x76a0	; 0x76a0 <_ZN6StringD1Ev>

00001dd4 <_ZN14EthernetClientC1ERKS_>:
#include "Arduino.h"	
#include "Print.h"
#include "Client.h"
#include "IPAddress.h"

class EthernetClient : public Client {
    1dd4:	fc 01       	movw	r30, r24
    1dd6:	db 01       	movw	r26, r22
#ifdef BIN // Prevent warnings if BIN is previously defined in "iotnx4.h" or similar
#undef BIN
#endif
#define BIN 2

class Print
    1dd8:	12 96       	adiw	r26, 0x02	; 2
    1dda:	8d 91       	ld	r24, X+
    1ddc:	9c 91       	ld	r25, X
    1dde:	13 97       	sbiw	r26, 0x03	; 3
    1de0:	93 83       	std	Z+3, r25	; 0x03
    1de2:	82 83       	std	Z+2, r24	; 0x02
    SKIP_WHITESPACE // Only tabs, spaces, line feeds & carriage returns are skipped.
};

#define NO_IGNORE_CHAR  '\x01' // a char not found in a valid ASCII numeric field

class Stream : public Print
    1de4:	14 96       	adiw	r26, 0x04	; 4
    1de6:	4d 91       	ld	r20, X+
    1de8:	5d 91       	ld	r21, X+
    1dea:	6d 91       	ld	r22, X+
    1dec:	7c 91       	ld	r23, X
    1dee:	17 97       	sbiw	r26, 0x07	; 7
    1df0:	44 83       	std	Z+4, r20	; 0x04
    1df2:	55 83       	std	Z+5, r21	; 0x05
    1df4:	66 83       	std	Z+6, r22	; 0x06
    1df6:	77 83       	std	Z+7, r23	; 0x07
    1df8:	18 96       	adiw	r26, 0x08	; 8
    1dfa:	4d 91       	ld	r20, X+
    1dfc:	5d 91       	ld	r21, X+
    1dfe:	6d 91       	ld	r22, X+
    1e00:	7c 91       	ld	r23, X
    1e02:	1b 97       	sbiw	r26, 0x0b	; 11
    1e04:	40 87       	std	Z+8, r20	; 0x08
    1e06:	51 87       	std	Z+9, r21	; 0x09
    1e08:	62 87       	std	Z+10, r22	; 0x0a
    1e0a:	73 87       	std	Z+11, r23	; 0x0b
    1e0c:	8e ec       	ldi	r24, 0xCE	; 206
    1e0e:	99 e0       	ldi	r25, 0x09	; 9
    1e10:	91 83       	std	Z+1, r25	; 0x01
    1e12:	80 83       	st	Z, r24
    1e14:	1c 96       	adiw	r26, 0x0c	; 12
    1e16:	8c 91       	ld	r24, X
    1e18:	84 87       	std	Z+12, r24	; 0x0c
    1e1a:	08 95       	ret

00001e1c <loop>:
/**************************LOOP PROCEDURA************************************/
void loop() {
    1e1c:	cf 92       	push	r12
    1e1e:	df 92       	push	r13
    1e20:	ef 92       	push	r14
    1e22:	ff 92       	push	r15
    1e24:	0f 93       	push	r16
    1e26:	1f 93       	push	r17
    1e28:	cf 93       	push	r28
    1e2a:	df 93       	push	r29
    1e2c:	cd b7       	in	r28, 0x3d	; 61
    1e2e:	de b7       	in	r29, 0x3e	; 62
    1e30:	aa 97       	sbiw	r28, 0x2a	; 42
    1e32:	0f b6       	in	r0, 0x3f	; 63
    1e34:	f8 94       	cli
    1e36:	de bf       	out	0x3e, r29	; 62
    1e38:	0f be       	out	0x3f, r0	; 63
    1e3a:	cd bf       	out	0x3d, r28	; 61

  switch (stato_procedura) {
    1e3c:	e0 91 22 0b 	lds	r30, 0x0B22	; 0x800b22 <stato_procedura>
    1e40:	f0 91 23 0b 	lds	r31, 0x0B23	; 0x800b23 <stato_procedura+0x1>
    1e44:	32 96       	adiw	r30, 0x02	; 2
    1e46:	ed 30       	cpi	r30, 0x0D	; 13
    1e48:	f1 05       	cpc	r31, r1
    1e4a:	08 f0       	brcs	.+2      	; 0x1e4e <loop+0x32>
    1e4c:	97 c7       	rjmp	.+3886   	; 0x2d7c <loop+0xf60>
    1e4e:	ea 5b       	subi	r30, 0xBA	; 186
    1e50:	ff 4f       	sbci	r31, 0xFF	; 255
    1e52:	0c 94 ce 3f 	jmp	0x7f9c	; 0x7f9c <__tablejump2__>
    case -2:
      { // cli(); // disable interrupt        
        printLine();
    1e56:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
        Serial.print("Parametri CCEC da EEPROM");
    1e5a:	6c e6       	ldi	r22, 0x6C	; 108
    1e5c:	76 e0       	ldi	r23, 0x06	; 6
    1e5e:	80 e1       	ldi	r24, 0x10	; 16
    1e60:	9d e0       	ldi	r25, 0x0D	; 13
    1e62:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN5Print5printEPKc>
        String ServerCCEC = read_eeprom_string_struct(ParametriCCEC[0]);
    1e66:	60 91 b9 0b 	lds	r22, 0x0BB9	; 0x800bb9 <ParametriCCEC>
    1e6a:	70 91 ba 0b 	lds	r23, 0x0BBA	; 0x800bba <ParametriCCEC+0x1>
    1e6e:	ce 01       	movw	r24, r28
    1e70:	01 96       	adiw	r24, 0x01	; 1
    1e72:	8c df       	rcall	.-232    	; 0x1d8c <_ZN20ParametriCCEC_structC1ERKS_>
    1e74:	be 01       	movw	r22, r28
    1e76:	6f 5f       	subi	r22, 0xFF	; 255
    1e78:	7f 4f       	sbci	r23, 0xFF	; 255
    1e7a:	ce 01       	movw	r24, r28
    1e7c:	85 96       	adiw	r24, 0x25	; 37
    1e7e:	94 dd       	rcall	.-1240   	; 0x19a8 <_Z25read_eeprom_string_struct20ParametriCCEC_struct>
    1e80:	ce 01       	movw	r24, r28
    1e82:	01 96       	adiw	r24, 0x01	; 1
    1e84:	9c df       	rcall	.-200    	; 0x1dbe <_ZN20ParametriCCEC_structD1Ev>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{ getBytes((unsigned char *)buf, bufsize, index); }
    1e86:	49 a5       	ldd	r20, Y+41	; 0x29
    1e88:	5a a5       	ldd	r21, Y+42	; 0x2a
    1e8a:	4f 5f       	subi	r20, 0xFF	; 255
    1e8c:	5f 4f       	sbci	r21, 0xFF	; 255
    1e8e:	20 e0       	ldi	r18, 0x00	; 0
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	64 e3       	ldi	r22, 0x34	; 52
    1e94:	71 e0       	ldi	r23, 0x01	; 1
    1e96:	ce 01       	movw	r24, r28
    1e98:	85 96       	adiw	r24, 0x25	; 37
    1e9a:	0e 94 de 3d 	call	0x7bbc	; 0x7bbc <_ZNK6String8getBytesEPhjj>
        ServerCCEC.toCharArray(serverREST,ServerCCEC.length()+1);
        printLine();
    1e9e:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
        String IPCCEC = read_eeprom_string_struct(ParametriCCEC[1]);
    1ea2:	60 91 b9 0b 	lds	r22, 0x0BB9	; 0x800bb9 <ParametriCCEC>
    1ea6:	70 91 ba 0b 	lds	r23, 0x0BBA	; 0x800bba <ParametriCCEC+0x1>
    1eaa:	62 5f       	subi	r22, 0xF2	; 242
    1eac:	7f 4f       	sbci	r23, 0xFF	; 255
    1eae:	ce 01       	movw	r24, r28
    1eb0:	01 96       	adiw	r24, 0x01	; 1
    1eb2:	6c df       	rcall	.-296    	; 0x1d8c <_ZN20ParametriCCEC_structC1ERKS_>
    1eb4:	be 01       	movw	r22, r28
    1eb6:	6f 5f       	subi	r22, 0xFF	; 255
    1eb8:	7f 4f       	sbci	r23, 0xFF	; 255
    1eba:	ce 01       	movw	r24, r28
    1ebc:	4f 96       	adiw	r24, 0x1f	; 31
    1ebe:	74 dd       	rcall	.-1304   	; 0x19a8 <_Z25read_eeprom_string_struct20ParametriCCEC_struct>
    1ec0:	ce 01       	movw	r24, r28
    1ec2:	01 96       	adiw	r24, 0x01	; 1
    1ec4:	7c df       	rcall	.-264    	; 0x1dbe <_ZN20ParametriCCEC_structD1Ev>
        printLine();
    1ec6:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
        String Start_save = read_eeprom_string_struct(ParametriCCEC[2]);
    1eca:	60 91 b9 0b 	lds	r22, 0x0BB9	; 0x800bb9 <ParametriCCEC>
    1ece:	70 91 ba 0b 	lds	r23, 0x0BBA	; 0x800bba <ParametriCCEC+0x1>
    1ed2:	64 5e       	subi	r22, 0xE4	; 228
    1ed4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ed6:	ce 01       	movw	r24, r28
    1ed8:	01 96       	adiw	r24, 0x01	; 1
    1eda:	58 df       	rcall	.-336    	; 0x1d8c <_ZN20ParametriCCEC_structC1ERKS_>
    1edc:	be 01       	movw	r22, r28
    1ede:	6f 5f       	subi	r22, 0xFF	; 255
    1ee0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ee2:	ce 01       	movw	r24, r28
    1ee4:	47 96       	adiw	r24, 0x17	; 23
    1ee6:	60 dd       	rcall	.-1344   	; 0x19a8 <_Z25read_eeprom_string_struct20ParametriCCEC_struct>
    1ee8:	ce 01       	movw	r24, r28
    1eea:	01 96       	adiw	r24, 0x01	; 1
    1eec:	68 df       	rcall	.-304    	; 0x1dbe <_ZN20ParametriCCEC_structD1Ev>
        printLine();
    1eee:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
        String CSEDE = read_eeprom_string_struct(ParametriCCEC[3]);
    1ef2:	60 91 b9 0b 	lds	r22, 0x0BB9	; 0x800bb9 <ParametriCCEC>
    1ef6:	70 91 ba 0b 	lds	r23, 0x0BBA	; 0x800bba <ParametriCCEC+0x1>
    1efa:	66 5d       	subi	r22, 0xD6	; 214
    1efc:	7f 4f       	sbci	r23, 0xFF	; 255
    1efe:	ce 01       	movw	r24, r28
    1f00:	01 96       	adiw	r24, 0x01	; 1
    1f02:	44 df       	rcall	.-376    	; 0x1d8c <_ZN20ParametriCCEC_structC1ERKS_>
    1f04:	be 01       	movw	r22, r28
    1f06:	6f 5f       	subi	r22, 0xFF	; 255
    1f08:	7f 4f       	sbci	r23, 0xFF	; 255
    1f0a:	ce 01       	movw	r24, r28
    1f0c:	0f 96       	adiw	r24, 0x0f	; 15
    1f0e:	4c dd       	rcall	.-1384   	; 0x19a8 <_Z25read_eeprom_string_struct20ParametriCCEC_struct>
    1f10:	ce 01       	movw	r24, r28
    1f12:	01 96       	adiw	r24, 0x01	; 1
    1f14:	54 df       	rcall	.-344    	; 0x1dbe <_ZN20ParametriCCEC_structD1Ev>
    1f16:	4b 89       	ldd	r20, Y+19	; 0x13
    1f18:	5c 89       	ldd	r21, Y+20	; 0x14
    1f1a:	4f 5f       	subi	r20, 0xFF	; 255
    1f1c:	5f 4f       	sbci	r21, 0xFF	; 255
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	66 e4       	ldi	r22, 0x46	; 70
    1f24:	71 e0       	ldi	r23, 0x01	; 1
    1f26:	ce 01       	movw	r24, r28
    1f28:	0f 96       	adiw	r24, 0x0f	; 15
    1f2a:	0e 94 de 3d 	call	0x7bbc	; 0x7bbc <_ZNK6String8getBytesEPhjj>
        CSEDE.toCharArray(CodSede,CSEDE.length()+1);        
        printLine();
    1f2e:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
        stato_procedura++;
    1f32:	80 91 22 0b 	lds	r24, 0x0B22	; 0x800b22 <stato_procedura>
    1f36:	90 91 23 0b 	lds	r25, 0x0B23	; 0x800b23 <stato_procedura+0x1>
    1f3a:	01 96       	adiw	r24, 0x01	; 1
    1f3c:	90 93 23 0b 	sts	0x0B23, r25	; 0x800b23 <stato_procedura+0x1>
    1f40:	80 93 22 0b 	sts	0x0B22, r24	; 0x800b22 <stato_procedura>
        printLine();
        String IPCCEC = read_eeprom_string_struct(ParametriCCEC[1]);
        printLine();
        String Start_save = read_eeprom_string_struct(ParametriCCEC[2]);
        printLine();
        String CSEDE = read_eeprom_string_struct(ParametriCCEC[3]);
    1f44:	ce 01       	movw	r24, r28
    1f46:	0f 96       	adiw	r24, 0x0f	; 15
    1f48:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
        String ServerCCEC = read_eeprom_string_struct(ParametriCCEC[0]);
        ServerCCEC.toCharArray(serverREST,ServerCCEC.length()+1);
        printLine();
        String IPCCEC = read_eeprom_string_struct(ParametriCCEC[1]);
        printLine();
        String Start_save = read_eeprom_string_struct(ParametriCCEC[2]);
    1f4c:	ce 01       	movw	r24, r28
    1f4e:	47 96       	adiw	r24, 0x17	; 23
    1f50:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
        printLine();
        Serial.print("Parametri CCEC da EEPROM");
        String ServerCCEC = read_eeprom_string_struct(ParametriCCEC[0]);
        ServerCCEC.toCharArray(serverREST,ServerCCEC.length()+1);
        printLine();
        String IPCCEC = read_eeprom_string_struct(ParametriCCEC[1]);
    1f54:	ce 01       	movw	r24, r28
    1f56:	4f 96       	adiw	r24, 0x1f	; 31
    1f58:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
  switch (stato_procedura) {
    case -2:
      { // cli(); // disable interrupt        
        printLine();
        Serial.print("Parametri CCEC da EEPROM");
        String ServerCCEC = read_eeprom_string_struct(ParametriCCEC[0]);
    1f5c:	ce 01       	movw	r24, r28
    1f5e:	85 96       	adiw	r24, 0x25	; 37
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1f60:	0b c7       	rjmp	.+3606   	; 0x2d78 <loop+0xf5c>
    1f62:	2f ef       	ldi	r18, 0xFF	; 255
    1f64:	39 ef       	ldi	r19, 0xF9	; 249
    1f66:	80 e0       	ldi	r24, 0x00	; 0
    1f68:	21 50       	subi	r18, 0x01	; 1
    1f6a:	30 40       	sbci	r19, 0x00	; 0
    1f6c:	80 40       	sbci	r24, 0x00	; 0
    1f6e:	e1 f7       	brne	.-8      	; 0x1f68 <loop+0x14c>
      }
      break;
    case -1:
      {       
        _delay_ms(20);
        abilitaPulsanti();
    1f70:	00 c0       	rjmp	.+0      	; 0x1f72 <loop+0x156>
    1f72:	00 00       	nop
    1f74:	b2 d9       	rcall	.-3228   	; 0x12da <_Z15abilitaPulsantiv>
    1f76:	9f ef       	ldi	r25, 0xFF	; 255
    1f78:	29 ef       	ldi	r18, 0xF9	; 249
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	91 50       	subi	r25, 0x01	; 1
    1f7e:	20 40       	sbci	r18, 0x00	; 0
    1f80:	30 40       	sbci	r19, 0x00	; 0
    1f82:	e1 f7       	brne	.-8      	; 0x1f7c <loop+0x160>
    1f84:	00 c0       	rjmp	.+0      	; 0x1f86 <loop+0x16a>
        _delay_ms(20);
        abilitaContattiPistola();
    1f86:	00 00       	nop
    1f88:	b2 d9       	rcall	.-3228   	; 0x12ee <_Z22abilitaContattiPistolav>
    1f8a:	8f ef       	ldi	r24, 0xFF	; 255
    1f8c:	99 ef       	ldi	r25, 0xF9	; 249
    1f8e:	20 e0       	ldi	r18, 0x00	; 0
    1f90:	81 50       	subi	r24, 0x01	; 1
    1f92:	90 40       	sbci	r25, 0x00	; 0
    1f94:	20 40       	sbci	r18, 0x00	; 0
    1f96:	e1 f7       	brne	.-8      	; 0x1f90 <loop+0x174>
    1f98:	00 c0       	rjmp	.+0      	; 0x1f9a <loop+0x17e>
    1f9a:	00 00       	nop
        _delay_ms(20);
        stato_procedura++;
    1f9c:	80 91 22 0b 	lds	r24, 0x0B22	; 0x800b22 <stato_procedura>
    1fa0:	90 91 23 0b 	lds	r25, 0x0B23	; 0x800b23 <stato_procedura+0x1>
    1fa4:	01 96       	adiw	r24, 0x01	; 1
    1fa6:	90 93 23 0b 	sts	0x0B23, r25	; 0x800b23 <stato_procedura+0x1>
    1faa:	80 93 22 0b 	sts	0x0B22, r24	; 0x800b22 <stato_procedura>
      }
      break;
    1fae:	e6 c6       	rjmp	.+3532   	; 0x2d7c <loop+0xf60>
    1fb0:	3f ef       	ldi	r19, 0xFF	; 255
    1fb2:	83 ed       	ldi	r24, 0xD3	; 211
    1fb4:	90 e3       	ldi	r25, 0x30	; 48
    1fb6:	31 50       	subi	r19, 0x01	; 1
    1fb8:	80 40       	sbci	r24, 0x00	; 0
    1fba:	90 40       	sbci	r25, 0x00	; 0
    1fbc:	e1 f7       	brne	.-8      	; 0x1fb6 <loop+0x19a>
    1fbe:	00 c0       	rjmp	.+0      	; 0x1fc0 <loop+0x1a4>
    1fc0:	00 00       	nop
    case 0:
      {
        _delay_ms(1000);
        alreadyTimbrata = false;
    1fc2:	10 92 61 0b 	sts	0x0B61, r1	; 0x800b61 <alreadyTimbrata>
        enable_ETH();
    1fc6:	0e 94 93 01 	call	0x326	; 0x326 <_ZL10enable_ETHv>
        /************************************************/
        righeDisplay[1] = " * AUTENTICAZIONE *";
    1fca:	65 e8       	ldi	r22, 0x85	; 133
    1fcc:	76 e0       	ldi	r23, 0x06	; 6
    1fce:	87 ed       	ldi	r24, 0xD7	; 215
    1fd0:	9a e0       	ldi	r25, 0x0A	; 10
    1fd2:	0e 94 36 3c 	call	0x786c	; 0x786c <_ZN6StringaSEPKc>
        righeDisplay[2] = "";
    1fd6:	6a ee       	ldi	r22, 0xEA	; 234
    1fd8:	71 e0       	ldi	r23, 0x01	; 1
    1fda:	8d ed       	ldi	r24, 0xDD	; 221
    1fdc:	9a e0       	ldi	r25, 0x0A	; 10
    1fde:	0e 94 36 3c 	call	0x786c	; 0x786c <_ZN6StringaSEPKc>
        righeDisplay[3] = "    Avvicina ATE  ";
    1fe2:	69 e9       	ldi	r22, 0x99	; 153
    1fe4:	76 e0       	ldi	r23, 0x06	; 6
    1fe6:	83 ee       	ldi	r24, 0xE3	; 227
    1fe8:	9a e0       	ldi	r25, 0x0A	; 10
    1fea:	0e 94 36 3c 	call	0x786c	; 0x786c <_ZN6StringaSEPKc>
        displayLCD(righeDisplay, stato_procedura, 50);
    1fee:	60 91 22 0b 	lds	r22, 0x0B22	; 0x800b22 <stato_procedura>
    1ff2:	70 91 23 0b 	lds	r23, 0x0B23	; 0x800b23 <stato_procedura+0x1>
    1ff6:	42 e3       	ldi	r20, 0x32	; 50
    1ff8:	50 e0       	ldi	r21, 0x00	; 0
    1ffa:	81 ed       	ldi	r24, 0xD1	; 209
    1ffc:	9a e0       	ldi	r25, 0x0A	; 10
    1ffe:	0e 94 81 03 	call	0x702	; 0x702 <_Z10displayLCDP6Stringii>
        /************************************************/
        stato_procedura++;
    2002:	80 91 22 0b 	lds	r24, 0x0B22	; 0x800b22 <stato_procedura>
    2006:	90 91 23 0b 	lds	r25, 0x0B23	; 0x800b23 <stato_procedura+0x1>
    200a:	01 96       	adiw	r24, 0x01	; 1
    200c:	90 93 23 0b 	sts	0x0B23, r25	; 0x800b23 <stato_procedura+0x1>
    2010:	80 93 22 0b 	sts	0x0B22, r24	; 0x800b22 <stato_procedura>
    2014:	2f ef       	ldi	r18, 0xFF	; 255
    2016:	39 e6       	ldi	r19, 0x69	; 105
    2018:	88 e1       	ldi	r24, 0x18	; 24
    201a:	21 50       	subi	r18, 0x01	; 1
    201c:	30 40       	sbci	r19, 0x00	; 0
    201e:	80 40       	sbci	r24, 0x00	; 0
    2020:	e1 f7       	brne	.-8      	; 0x201a <loop+0x1fe>
    2022:	00 c0       	rjmp	.+0      	; 0x2024 <loop+0x208>
    2024:	00 00       	nop
    2026:	aa c6       	rjmp	.+3412   	; 0x2d7c <loop+0xf60>
        _delay_ms(500);
      }
      break;
    case 1:
      {
        TARGA = "";
    2028:	6a ee       	ldi	r22, 0xEA	; 234
    202a:	71 e0       	ldi	r23, 0x01	; 1
    202c:	8b e7       	ldi	r24, 0x7B	; 123
    202e:	9a e0       	ldi	r25, 0x0A	; 10
    2030:	0e 94 36 3c 	call	0x786c	; 0x786c <_ZN6StringaSEPKc>
        KM = "";
    2034:	6a ee       	ldi	r22, 0xEA	; 234
    2036:	71 e0       	ldi	r23, 0x01	; 1
    2038:	85 e7       	ldi	r24, 0x75	; 117
    203a:	9a e0       	ldi	r25, 0x0A	; 10
    203c:	0e 94 36 3c 	call	0x786c	; 0x786c <_ZN6StringaSEPKc>

        /*****************************************************/
        String ATe = "ERRORE";
    2040:	67 e8       	ldi	r22, 0x87	; 135
    2042:	72 e0       	ldi	r23, 0x02	; 2
    2044:	ce 01       	movw	r24, r28
    2046:	47 96       	adiw	r24, 0x17	; 23
    2048:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
        
        if (!alreadyTimbrata) {
    204c:	80 91 61 0b 	lds	r24, 0x0B61	; 0x800b61 <alreadyTimbrata>
    2050:	81 11       	cpse	r24, r1
    2052:	16 c0       	rjmp	.+44     	; 0x2080 <loop+0x264>
          ATe = GetCodeRfidATe();
    2054:	ce 01       	movw	r24, r28
    2056:	01 96       	adiw	r24, 0x01	; 1
    2058:	0e 94 c5 05 	call	0xb8a	; 0xb8a <_Z14GetCodeRfidATev>
    205c:	be 01       	movw	r22, r28
    205e:	6f 5f       	subi	r22, 0xFF	; 255
    2060:	7f 4f       	sbci	r23, 0xFF	; 255
    2062:	ce 01       	movw	r24, r28
    2064:	47 96       	adiw	r24, 0x17	; 23
    2066:	0e 94 2b 3c 	call	0x7856	; 0x7856 <_ZN6StringaSEOS_>
    206a:	ce 01       	movw	r24, r28
    206c:	01 96       	adiw	r24, 0x01	; 1
    206e:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
          Buzzer(2, 100);
    2072:	44 e6       	ldi	r20, 0x64	; 100
    2074:	50 e0       	ldi	r21, 0x00	; 0
    2076:	60 e0       	ldi	r22, 0x00	; 0
    2078:	70 e0       	ldi	r23, 0x00	; 0
    207a:	82 e0       	ldi	r24, 0x02	; 2
    207c:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z6Buzzerhm>
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
    2080:	67 e8       	ldi	r22, 0x87	; 135
    2082:	72 e0       	ldi	r23, 0x02	; 2
    2084:	ce 01       	movw	r24, r28
    2086:	47 96       	adiw	r24, 0x17	; 23
    2088:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <_ZNK6String6equalsEPKc>
        }

        if ((ATe != "ERRORE") && (BIT_IS_CLEAR(PORTC, 4)))
    208c:	81 11       	cpse	r24, r1
    208e:	02 c0       	rjmp	.+4      	; 0x2094 <loop+0x278>
    2090:	44 9b       	sbis	0x08, 4	; 8
    2092:	c0 c6       	rjmp	.+3456   	; 0x2e14 <loop+0xff8>
          _delay_ms(1000); // tempo per inizializzare la ethernet
        }

        // Effettua chiamata REST per validare CARD NFC
        
        righeDisplay[1] =  "** TARGA MEZZO **";
    2094:	62 eb       	ldi	r22, 0xB2	; 178
    2096:	75 e0       	ldi	r23, 0x05	; 5
    2098:	87 ed       	ldi	r24, 0xD7	; 215
    209a:	9a e0       	ldi	r25, 0x0A	; 10
    209c:	0e 94 36 3c 	call	0x786c	; 0x786c <_ZN6StringaSEPKc>
        righeDisplay[2] = "TARGA:";
    20a0:	64 ec       	ldi	r22, 0xC4	; 196
    20a2:	75 e0       	ldi	r23, 0x05	; 5
    20a4:	8d ed       	ldi	r24, 0xDD	; 221
    20a6:	9a e0       	ldi	r25, 0x0A	; 10
    20a8:	0e 94 36 3c 	call	0x786c	; 0x786c <_ZN6StringaSEPKc>
        righeDisplay[3] = "#:Conferma *:Usa TAG";
    20ac:	6b ec       	ldi	r22, 0xCB	; 203
    20ae:	75 e0       	ldi	r23, 0x05	; 5
    20b0:	83 ee       	ldi	r24, 0xE3	; 227
    20b2:	9a e0       	ldi	r25, 0x0A	; 10
    20b4:	0e 94 36 3c 	call	0x786c	; 0x786c <_ZN6StringaSEPKc>

        // bool GetAteCheck(int Port, char serverREST[], EthernetClient ClientHTTP, String _idAte)

        if (GetAteCheck(80,serverREST,clientATE,ATe)) 
    20b8:	be 01       	movw	r22, r28
    20ba:	69 5e       	subi	r22, 0xE9	; 233
    20bc:	7f 4f       	sbci	r23, 0xFF	; 255
    20be:	ce 01       	movw	r24, r28
    20c0:	0f 96       	adiw	r24, 0x0f	; 15
    20c2:	0e 94 23 3c 	call	0x7846	; 0x7846 <_ZN6StringC1ERKS_>
    20c6:	6f e9       	ldi	r22, 0x9F	; 159
    20c8:	7a e0       	ldi	r23, 0x0A	; 10
    20ca:	ce 01       	movw	r24, r28
    20cc:	01 96       	adiw	r24, 0x01	; 1
    20ce:	82 de       	rcall	.-764    	; 0x1dd4 <_ZN14EthernetClientC1ERKS_>
    20d0:	9e 01       	movw	r18, r28
    20d2:	21 5f       	subi	r18, 0xF1	; 241
    20d4:	3f 4f       	sbci	r19, 0xFF	; 255
    20d6:	ae 01       	movw	r20, r28
    20d8:	4f 5f       	subi	r20, 0xFF	; 255
    20da:	5f 4f       	sbci	r21, 0xFF	; 255
    20dc:	64 e3       	ldi	r22, 0x34	; 52
    20de:	71 e0       	ldi	r23, 0x01	; 1
    20e0:	80 e5       	ldi	r24, 0x50	; 80
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	0e 94 96 06 	call	0xd2c	; 0xd2c <_Z11GetAteCheckiPc14EthernetClient6String>
    20e8:	18 2f       	mov	r17, r24
    20ea:	ce 01       	movw	r24, r28
    20ec:	0f 96       	adiw	r24, 0x0f	; 15
    20ee:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
        {
                SET_BIT(PORTC,PC4);
    20f2:	44 9a       	sbi	0x08, 4	; 8
        righeDisplay[2] = "TARGA:";
        righeDisplay[3] = "#:Conferma *:Usa TAG";

        // bool GetAteCheck(int Port, char serverREST[], EthernetClient ClientHTTP, String _idAte)

        if (GetAteCheck(80,serverREST,clientATE,ATe)) 
    20f4:	11 23       	and	r17, r17
    20f6:	09 f1       	breq	.+66     	; 0x213a <loop+0x31e>
        {
                SET_BIT(PORTC,PC4);
                RaccoltaDati[5] = "000";               
    20f8:	66 ec       	ldi	r22, 0xC6	; 198
    20fa:	77 e0       	ldi	r23, 0x07	; 7
    20fc:	83 e1       	ldi	r24, 0x13	; 19
    20fe:	9b e0       	ldi	r25, 0x0B	; 11
    2100:	0e 94 36 3c 	call	0x786c	; 0x786c <_ZN6StringaSEPKc>
                Buzzer(1,200);
    2104:	48 ec       	ldi	r20, 0xC8	; 200
    2106:	50 e0       	ldi	r21, 0x00	; 0
    2108:	60 e0       	ldi	r22, 0x00	; 0
    210a:	70 e0       	ldi	r23, 0x00	; 0
    210c:	81 e0       	ldi	r24, 0x01	; 1
    210e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z6Buzzerhm>
    2112:	9f ef       	ldi	r25, 0xFF	; 255
    2114:	20 e7       	ldi	r18, 0x70	; 112
    2116:	32 e0       	ldi	r19, 0x02	; 2
    2118:	91 50       	subi	r25, 0x01	; 1
    211a:	20 40       	sbci	r18, 0x00	; 0
    211c:	30 40       	sbci	r19, 0x00	; 0
    211e:	e1 f7       	brne	.-8      	; 0x2118 <loop+0x2fc>
    2120:	00 c0       	rjmp	.+0      	; 0x2122 <loop+0x306>
    2122:	00 00       	nop
                _delay_ms(50);
                avanzaStato(TinputTarga);
    2124:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <TinputTarga>
    2128:	70 91 2b 01 	lds	r23, 0x012B	; 0x80012b <TinputTarga+0x1>
    212c:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <TinputTarga+0x2>
    2130:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <TinputTarga+0x3>
    2134:	0e 94 b6 03 	call	0x76c	; 0x76c <_Z11avanzaStatom>
    2138:	37 c0       	rjmp	.+110    	; 0x21a8 <loop+0x38c>
         } 
         else 
         {
                SET_BIT(PORTC,PC4);
                RaccoltaDati[5] = "111";
    213a:	6c ea       	ldi	r22, 0xAC	; 172
    213c:	76 e0       	ldi	r23, 0x06	; 6
    213e:	83 e1       	ldi	r24, 0x13	; 19
    2140:	9b e0       	ldi	r25, 0x0B	; 11
    2142:	0e 94 36 3c 	call	0x786c	; 0x786c <_ZN6StringaSEPKc>
                Buzzer(3,200);
    2146:	48 ec       	ldi	r20, 0xC8	; 200
    2148:	50 e0       	ldi	r21, 0x00	; 0
    214a:	60 e0       	ldi	r22, 0x00	; 0
    214c:	70 e0       	ldi	r23, 0x00	; 0
    214e:	83 e0       	ldi	r24, 0x03	; 3
    2150:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z6Buzzerhm>
                lcd.clear();
    2154:	89 e4       	ldi	r24, 0x49	; 73
    2156:	9b e0       	ldi	r25, 0x0B	; 11
    2158:	0e 94 61 30 	call	0x60c2	; 0x60c2 <_ZN3LCD5clearEv>
                righeDisplay[1] = "***** ERRORE ******";
    215c:	60 eb       	ldi	r22, 0xB0	; 176
    215e:	76 e0       	ldi	r23, 0x06	; 6
    2160:	87 ed       	ldi	r24, 0xD7	; 215
    2162:	9a e0       	ldi	r25, 0x0A	; 10
    2164:	0e 94 36 3c 	call	0x786c	; 0x786c <_ZN6StringaSEPKc>
                righeDisplay[2] = "  Ate NON VALIDA ";
    2168:	64 ec       	ldi	r22, 0xC4	; 196
    216a:	76 e0       	ldi	r23, 0x06	; 6
    216c:	8d ed       	ldi	r24, 0xDD	; 221
    216e:	9a e0       	ldi	r25, 0x0A	; 10
    2170:	0e 94 36 3c 	call	0x786c	; 0x786c <_ZN6StringaSEPKc>
                righeDisplay[3] = "";
    2174:	6a ee       	ldi	r22, 0xEA	; 234
    2176:	71 e0       	ldi	r23, 0x01	; 1
    2178:	83 ee       	ldi	r24, 0xE3	; 227
    217a:	9a e0       	ldi	r25, 0x0A	; 10
    217c:	0e 94 36 3c 	call	0x786c	; 0x786c <_ZN6StringaSEPKc>
                displayLCD(righeDisplay,stato_procedura,10);
    2180:	60 91 22 0b 	lds	r22, 0x0B22	; 0x800b22 <stato_procedura>
    2184:	70 91 23 0b 	lds	r23, 0x0B23	; 0x800b23 <stato_procedura+0x1>
    2188:	4a e0       	ldi	r20, 0x0A	; 10
    218a:	50 e0       	ldi	r21, 0x00	; 0
    218c:	81 ed       	ldi	r24, 0xD1	; 209
    218e:	9a e0       	ldi	r25, 0x0A	; 10
    2190:	0e 94 81 03 	call	0x702	; 0x702 <_Z10displayLCDP6Stringii>
    2194:	8f ef       	ldi	r24, 0xFF	; 255
    2196:	93 ed       	ldi	r25, 0xD3	; 211
    2198:	20 e3       	ldi	r18, 0x30	; 48
    219a:	81 50       	subi	r24, 0x01	; 1
    219c:	90 40       	sbci	r25, 0x00	; 0
    219e:	20 40       	sbci	r18, 0x00	; 0
    21a0:	e1 f7       	brne	.-8      	; 0x219a <loop+0x37e>
    21a2:	00 c0       	rjmp	.+0      	; 0x21a4 <loop+0x388>
                _delay_ms(1000);
                Azzera();
    21a4:	00 00       	nop
    21a6:	72 d9       	rcall	.-3356   	; 0x148c <_Z6Azzerav>
      {
        TARGA = "";
        KM = "";

        /*****************************************************/
        String ATe = "ERRORE";
    21a8:	ce 01       	movw	r24, r28
    21aa:	47 96       	adiw	r24, 0x17	; 23
    21ac:	e5 c5       	rjmp	.+3018   	; 0x2d78 <loop+0xf5c>
         }      
      }
      break;
    case 2:
      {
        lcd.setCursor(0, 0);
    21ae:	40 e0       	ldi	r20, 0x00	; 0
    21b0:	60 e0       	ldi	r22, 0x00	; 0
    21b2:	89 e4       	ldi	r24, 0x49	; 73
    21b4:	9b e0       	ldi	r25, 0x0B	; 11
    21b6:	0e 94 67 30 	call	0x60ce	; 0x60ce <_ZN3LCD9setCursorEhh>
        lcd.print((char)1);  // STAMPA LA CLESSIDRA
    21ba:	61 e0       	ldi	r22, 0x01	; 1
    21bc:	89 e4       	ldi	r24, 0x49	; 73
    21be:	9b e0       	ldi	r25, 0x0B	; 11
    21c0:	0e 94 f2 38 	call	0x71e4	; 0x71e4 <_ZN5Print5printEc>
        lcd.print("Tempo: " + String((UltimoPassaggioStato + Timer - secs - 1)) + " sec ");
    21c4:	40 91 8b 0a 	lds	r20, 0x0A8B	; 0x800a8b <UltimoPassaggioStato>
    21c8:	50 91 8c 0a 	lds	r21, 0x0A8C	; 0x800a8c <UltimoPassaggioStato+0x1>
    21cc:	60 91 8d 0a 	lds	r22, 0x0A8D	; 0x800a8d <UltimoPassaggioStato+0x2>
    21d0:	70 91 8e 0a 	lds	r23, 0x0A8E	; 0x800a8e <UltimoPassaggioStato+0x3>
    21d4:	80 91 87 0a 	lds	r24, 0x0A87	; 0x800a87 <Timer>
    21d8:	90 91 88 0a 	lds	r25, 0x0A88	; 0x800a88 <Timer+0x1>
    21dc:	a0 91 89 0a 	lds	r26, 0x0A89	; 0x800a89 <Timer+0x2>
    21e0:	b0 91 8a 0a 	lds	r27, 0x0A8A	; 0x800a8a <Timer+0x3>
    21e4:	48 0f       	add	r20, r24
    21e6:	59 1f       	adc	r21, r25
    21e8:	6a 1f       	adc	r22, r26
    21ea:	7b 1f       	adc	r23, r27
    21ec:	41 50       	subi	r20, 0x01	; 1
    21ee:	51 09       	sbc	r21, r1
    21f0:	61 09       	sbc	r22, r1
    21f2:	71 09       	sbc	r23, r1
    21f4:	80 91 8f 0a 	lds	r24, 0x0A8F	; 0x800a8f <secs>
    21f8:	90 91 90 0a 	lds	r25, 0x0A90	; 0x800a90 <secs+0x1>
    21fc:	a0 91 91 0a 	lds	r26, 0x0A91	; 0x800a91 <secs+0x2>
    2200:	b0 91 92 0a 	lds	r27, 0x0A92	; 0x800a92 <secs+0x3>
    2204:	48 1b       	sub	r20, r24
    2206:	59 0b       	sbc	r21, r25
    2208:	6a 0b       	sbc	r22, r26
    220a:	7b 0b       	sbc	r23, r27
    220c:	2a e0       	ldi	r18, 0x0A	; 10
    220e:	ce 01       	movw	r24, r28
    2210:	0f 96       	adiw	r24, 0x0f	; 15
    2212:	0e 94 e1 3c 	call	0x79c2	; 0x79c2 <_ZN6StringC1Emh>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2216:	68 ef       	ldi	r22, 0xF8	; 248
    2218:	76 e0       	ldi	r23, 0x06	; 6
    221a:	ce 01       	movw	r24, r28
    221c:	01 96       	adiw	r24, 0x01	; 1
    221e:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
    2222:	be 01       	movw	r22, r28
    2224:	61 5f       	subi	r22, 0xF1	; 241
    2226:	7f 4f       	sbci	r23, 0xFF	; 255
    2228:	ce 01       	movw	r24, r28
    222a:	01 96       	adiw	r24, 0x01	; 1
    222c:	0e 94 8c 3d 	call	0x7b18	; 0x7b18 <_ZplRK15StringSumHelperRK6String>
    2230:	66 ed       	ldi	r22, 0xD6	; 214
    2232:	76 e0       	ldi	r23, 0x06	; 6
    2234:	0e 94 9d 3d 	call	0x7b3a	; 0x7b3a <_ZplRK15StringSumHelperPKc>
    2238:	bc 01       	movw	r22, r24
    223a:	89 e4       	ldi	r24, 0x49	; 73
    223c:	9b e0       	ldi	r25, 0x0B	; 11
    223e:	0e 94 e3 38 	call	0x71c6	; 0x71c6 <_ZN5Print5printERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2242:	ce 01       	movw	r24, r28
    2244:	01 96       	adiw	r24, 0x01	; 1
    2246:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
    224a:	ce 01       	movw	r24, r28
    224c:	0f 96       	adiw	r24, 0x0f	; 15
    224e:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
        // da commentare
        // Carburante = "D"; // Simulo Abilitazione Diesel
        // da commentare
        // Carburante = "B"; // Simulo Abilitazione Benzina
        /*****************************************************************/
        gpio.setCONFREG(0x3C);
    2252:	6c e3       	ldi	r22, 0x3C	; 60
    2254:	82 e7       	ldi	r24, 0x72	; 114
    2256:	9a e0       	ldi	r25, 0x0A	; 10
    2258:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <_ZN7PCA953410setCONFREGEh>
        uint8_t c = gpio.Read_IP_REGISTER();
    225c:	82 e7       	ldi	r24, 0x72	; 114
    225e:	9a e0       	ldi	r25, 0x0A	; 10
    2260:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <_ZN7PCA953416Read_IP_REGISTEREv>
    2264:	e8 2e       	mov	r14, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    2266:	42 e0       	ldi	r20, 0x02	; 2
    2268:	be 01       	movw	r22, r28
    226a:	69 5e       	subi	r22, 0xE9	; 233
    226c:	7f 4f       	sbci	r23, 0xFF	; 255
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	0e 94 8b 42 	call	0x8516	; 0x8516 <__itoa_ncheck>
        char buf[8];
        itoa(c, buf, 2);
        gpio.setCONFREG(0xC3);
    2274:	63 ec       	ldi	r22, 0xC3	; 195
    2276:	82 e7       	ldi	r24, 0x72	; 114
    2278:	9a e0       	ldi	r25, 0x0A	; 10
    227a:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <_ZN7PCA953410setCONFREGEh>
        uint8_t r = gpio.Read_IP_REGISTER();
    227e:	82 e7       	ldi	r24, 0x72	; 114
    2280:	9a e0       	ldi	r25, 0x0A	; 10
    2282:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <_ZN7PCA953416Read_IP_REGISTEREv>
    2286:	f8 2e       	mov	r15, r24
    2288:	42 e0       	ldi	r20, 0x02	; 2
    228a:	be 01       	movw	r22, r28
    228c:	61 5f       	subi	r22, 0xF1	; 241
    228e:	7f 4f       	sbci	r23, 0xFF	; 255
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	0e 94 8b 42 	call	0x8516	; 0x8516 <__itoa_ncheck>
        char bufr[8];
        itoa(r, bufr, 2);
        char ris[8];
        uint8_t z = (r ^ c);
        itoa(z, ris, 2);
    2296:	fe 24       	eor	r15, r14
    2298:	ef 2c       	mov	r14, r15
    229a:	f1 2c       	mov	r15, r1
    229c:	42 e0       	ldi	r20, 0x02	; 2
    229e:	be 01       	movw	r22, r28
    22a0:	6f 5f       	subi	r22, 0xFF	; 255
    22a2:	7f 4f       	sbci	r23, 0xFF	; 255
    22a4:	c7 01       	movw	r24, r14
    22a6:	0e 94 8b 42 	call	0x8516	; 0x8516 <__itoa_ncheck>
        char T = getCharKeypad(int(z));
    22aa:	c7 01       	movw	r24, r14
    22ac:	0e 94 9b 02 	call	0x536	; 0x536 <_Z13getCharKeypadi>
    22b0:	3f ef       	ldi	r19, 0xFF	; 255
    22b2:	99 ef       	ldi	r25, 0xF9	; 249
    22b4:	20 e0       	ldi	r18, 0x00	; 0
    22b6:	31 50       	subi	r19, 0x01	; 1
    22b8:	90 40       	sbci	r25, 0x00	; 0
    22ba:	20 40       	sbci	r18, 0x00	; 0
    22bc:	e1 f7       	brne	.-8      	; 0x22b6 <loop+0x49a>
    22be:	00 c0       	rjmp	.+0      	; 0x22c0 <loop+0x4a4>
        _delay_ms(20);
        /*****************************************************************/
        inputTarga(T);
    22c0:	00 00       	nop
    22c2:	94 d9       	rcall	.-3288   	; 0x15ec <_Z10inputTargac>
      }
      break;
    22c4:	5b c5       	rjmp	.+2742   	; 0x2d7c <loop+0xf60>
    case 3:
      {
        lcd.setCursor(0, 0);
    22c6:	40 e0       	ldi	r20, 0x00	; 0
    22c8:	60 e0       	ldi	r22, 0x00	; 0
    22ca:	89 e4       	ldi	r24, 0x49	; 73
    22cc:	9b e0       	ldi	r25, 0x0B	; 11
    22ce:	0e 94 67 30 	call	0x60ce	; 0x60ce <_ZN3LCD9setCursorEhh>
        lcd.print((char)1);  // STAMPA LA CLESSIDRA
    22d2:	61 e0       	ldi	r22, 0x01	; 1
    22d4:	89 e4       	ldi	r24, 0x49	; 73
    22d6:	9b e0       	ldi	r25, 0x0B	; 11
    22d8:	0e 94 f2 38 	call	0x71e4	; 0x71e4 <_ZN5Print5printEc>
        lcd.print("Tempo: " + String((UltimoPassaggioStato + Timer - secs - 1)) + " sec ");
    22dc:	40 91 8b 0a 	lds	r20, 0x0A8B	; 0x800a8b <UltimoPassaggioStato>
    22e0:	50 91 8c 0a 	lds	r21, 0x0A8C	; 0x800a8c <UltimoPassaggioStato+0x1>
    22e4:	60 91 8d 0a 	lds	r22, 0x0A8D	; 0x800a8d <UltimoPassaggioStato+0x2>
    22e8:	70 91 8e 0a 	lds	r23, 0x0A8E	; 0x800a8e <UltimoPassaggioStato+0x3>
    22ec:	80 91 87 0a 	lds	r24, 0x0A87	; 0x800a87 <Timer>
    22f0:	90 91 88 0a 	lds	r25, 0x0A88	; 0x800a88 <Timer+0x1>
    22f4:	a0 91 89 0a 	lds	r26, 0x0A89	; 0x800a89 <Timer+0x2>
    22f8:	b0 91 8a 0a 	lds	r27, 0x0A8A	; 0x800a8a <Timer+0x3>
    22fc:	48 0f       	add	r20, r24
    22fe:	59 1f       	adc	r21, r25
    2300:	6a 1f       	adc	r22, r26
    2302:	7b 1f       	adc	r23, r27
    2304:	41 50       	subi	r20, 0x01	; 1
    2306:	51 09       	sbc	r21, r1
    2308:	61 09       	sbc	r22, r1
    230a:	71 09       	sbc	r23, r1
    230c:	80 91 8f 0a 	lds	r24, 0x0A8F	; 0x800a8f <secs>
    2310:	90 91 90 0a 	lds	r25, 0x0A90	; 0x800a90 <secs+0x1>
    2314:	a0 91 91 0a 	lds	r26, 0x0A91	; 0x800a91 <secs+0x2>
    2318:	b0 91 92 0a 	lds	r27, 0x0A92	; 0x800a92 <secs+0x3>
    231c:	48 1b       	sub	r20, r24
    231e:	59 0b       	sbc	r21, r25
    2320:	6a 0b       	sbc	r22, r26
    2322:	7b 0b       	sbc	r23, r27
    2324:	2a e0       	ldi	r18, 0x0A	; 10
    2326:	ce 01       	movw	r24, r28
    2328:	0f 96       	adiw	r24, 0x0f	; 15
    232a:	0e 94 e1 3c 	call	0x79c2	; 0x79c2 <_ZN6StringC1Emh>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    232e:	68 ef       	ldi	r22, 0xF8	; 248
    2330:	76 e0       	ldi	r23, 0x06	; 6
    2332:	ce 01       	movw	r24, r28
    2334:	01 96       	adiw	r24, 0x01	; 1
    2336:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
    233a:	be 01       	movw	r22, r28
    233c:	61 5f       	subi	r22, 0xF1	; 241
    233e:	7f 4f       	sbci	r23, 0xFF	; 255
    2340:	ce 01       	movw	r24, r28
    2342:	01 96       	adiw	r24, 0x01	; 1
    2344:	0e 94 8c 3d 	call	0x7b18	; 0x7b18 <_ZplRK15StringSumHelperRK6String>
    2348:	66 ed       	ldi	r22, 0xD6	; 214
    234a:	76 e0       	ldi	r23, 0x06	; 6
    234c:	0e 94 9d 3d 	call	0x7b3a	; 0x7b3a <_ZplRK15StringSumHelperPKc>
    2350:	bc 01       	movw	r22, r24
    2352:	89 e4       	ldi	r24, 0x49	; 73
    2354:	9b e0       	ldi	r25, 0x0B	; 11
    2356:	0e 94 e3 38 	call	0x71c6	; 0x71c6 <_ZN5Print5printERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    235a:	ce 01       	movw	r24, r28
    235c:	01 96       	adiw	r24, 0x01	; 1
    235e:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
    2362:	ce 01       	movw	r24, r28
    2364:	0f 96       	adiw	r24, 0x0f	; 15
    2366:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>

        if (TARGA.length() == 5)
    236a:	80 91 7f 0a 	lds	r24, 0x0A7F	; 0x800a7f <TARGA+0x4>
    236e:	90 91 80 0a 	lds	r25, 0x0A80	; 0x800a80 <TARGA+0x5>
    2372:	05 97       	sbiw	r24, 0x05	; 5
    2374:	e9 f4       	brne	.+58     	; 0x23b0 <loop+0x594>
        {
          mezzo.Carb = "X";
    2376:	65 e1       	ldi	r22, 0x15	; 21
    2378:	75 e0       	ldi	r23, 0x05	; 5
    237a:	8b e6       	ldi	r24, 0x6B	; 107
    237c:	9b e0       	ldi	r25, 0x0B	; 11
    237e:	0e 94 36 3c 	call	0x786c	; 0x786c <_ZN6StringaSEPKc>
          mezzo.TARGA = TARGA;
    2382:	6b e7       	ldi	r22, 0x7B	; 123
    2384:	7a e0       	ldi	r23, 0x0A	; 10
    2386:	81 e7       	ldi	r24, 0x71	; 113
    2388:	9b e0       	ldi	r25, 0x0B	; 11
    238a:	0e 94 0e 3c 	call	0x781c	; 0x781c <_ZN6StringaSERKS_>
          mezzo.KM = "0";
    238e:	61 e8       	ldi	r22, 0x81	; 129
    2390:	78 e0       	ldi	r23, 0x08	; 8
    2392:	87 e7       	ldi	r24, 0x77	; 119
    2394:	9b e0       	ldi	r25, 0x0B	; 11
    2396:	0e 94 36 3c 	call	0x786c	; 0x786c <_ZN6StringaSEPKc>
          distr_selezionato = 0;
    239a:	10 92 1f 0b 	sts	0x0B1F, r1	; 0x800b1f <distr_selezionato>
          avanzaStato(TselDistributore);
    239e:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <TselDistributore>
    23a2:	70 91 23 01 	lds	r23, 0x0123	; 0x800123 <TselDistributore+0x1>
    23a6:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <TselDistributore+0x2>
    23aa:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <TselDistributore+0x3>
    23ae:	2e c7       	rjmp	.+3676   	; 0x320c <loop+0x13f0>
        }
        else {
          String mezzoString = leggiTAG_Mezzo(false); // con TRUE scrive sul blocco 4 della card NFC DEL MEZZO
    23b0:	60 e0       	ldi	r22, 0x00	; 0
    23b2:	ce 01       	movw	r24, r28
    23b4:	0f 96       	adiw	r24, 0x0f	; 15
    23b6:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <_Z14leggiTAG_Mezzob>
    23ba:	8f e3       	ldi	r24, 0x3F	; 63
    23bc:	9c e9       	ldi	r25, 0x9C	; 156
    23be:	01 97       	sbiw	r24, 0x01	; 1
    23c0:	f1 f7       	brne	.-4      	; 0x23be <loop+0x5a2>
    23c2:	00 c0       	rjmp	.+0      	; 0x23c4 <loop+0x5a8>
    23c4:	00 00       	nop
          _delay_ms(10);

          Serial.println(mezzoString);
    23c6:	be 01       	movw	r22, r28
    23c8:	61 5f       	subi	r22, 0xF1	; 241
    23ca:	7f 4f       	sbci	r23, 0xFF	; 255
    23cc:	80 e1       	ldi	r24, 0x10	; 16
    23ce:	9d e0       	ldi	r25, 0x0D	; 13
    23d0:	0e 94 0c 39 	call	0x7218	; 0x7218 <_ZN5Print7printlnERK6String>
	int indexOf( const String &str, unsigned int fromIndex ) const;
	int lastIndexOf( char ch ) const;
	int lastIndexOf( char ch, unsigned int fromIndex ) const;
	int lastIndexOf( const String &str ) const;
	int lastIndexOf( const String &str, unsigned int fromIndex ) const;
	String substring( unsigned int beginIndex ) const { return substring(beginIndex, len); };
    23d4:	2b 89       	ldd	r18, Y+19	; 0x13
    23d6:	3c 89       	ldd	r19, Y+20	; 0x14
    23d8:	45 e0       	ldi	r20, 0x05	; 5
    23da:	50 e0       	ldi	r21, 0x00	; 0
    23dc:	be 01       	movw	r22, r28
    23de:	61 5f       	subi	r22, 0xF1	; 241
    23e0:	7f 4f       	sbci	r23, 0xFF	; 255
    23e2:	ce 01       	movw	r24, r28
    23e4:	01 96       	adiw	r24, 0x01	; 1
    23e6:	0e 94 0c 3e 	call	0x7c18	; 0x7c18 <_ZNK6String9substringEjj>

          mezzo.Carb = mezzoString.substring(5);
    23ea:	be 01       	movw	r22, r28
    23ec:	6f 5f       	subi	r22, 0xFF	; 255
    23ee:	7f 4f       	sbci	r23, 0xFF	; 255
    23f0:	8b e6       	ldi	r24, 0x6B	; 107
    23f2:	9b e0       	ldi	r25, 0x0B	; 11
    23f4:	0e 94 2b 3c 	call	0x7856	; 0x7856 <_ZN6StringaSEOS_>
    23f8:	ce 01       	movw	r24, r28
    23fa:	01 96       	adiw	r24, 0x01	; 1
    23fc:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
          mezzo.TARGA = mezzoString.substring(0, 5);
    2400:	25 e0       	ldi	r18, 0x05	; 5
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	40 e0       	ldi	r20, 0x00	; 0
    2406:	50 e0       	ldi	r21, 0x00	; 0
    2408:	be 01       	movw	r22, r28
    240a:	61 5f       	subi	r22, 0xF1	; 241
    240c:	7f 4f       	sbci	r23, 0xFF	; 255
    240e:	ce 01       	movw	r24, r28
    2410:	01 96       	adiw	r24, 0x01	; 1
    2412:	0e 94 0c 3e 	call	0x7c18	; 0x7c18 <_ZNK6String9substringEjj>
    2416:	be 01       	movw	r22, r28
    2418:	6f 5f       	subi	r22, 0xFF	; 255
    241a:	7f 4f       	sbci	r23, 0xFF	; 255
    241c:	81 e7       	ldi	r24, 0x71	; 113
    241e:	9b e0       	ldi	r25, 0x0B	; 11
    2420:	0e 94 2b 3c 	call	0x7856	; 0x7856 <_ZN6StringaSEOS_>
    2424:	ce 01       	movw	r24, r28
    2426:	01 96       	adiw	r24, 0x01	; 1
    2428:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
          mezzo.KM = "0";
    242c:	61 e8       	ldi	r22, 0x81	; 129
    242e:	78 e0       	ldi	r23, 0x08	; 8
    2430:	87 e7       	ldi	r24, 0x77	; 119
    2432:	9b e0       	ldi	r25, 0x0B	; 11
    2434:	0e 94 36 3c 	call	0x786c	; 0x786c <_ZN6StringaSEPKc>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2438:	6c ed       	ldi	r22, 0xDC	; 220
    243a:	76 e0       	ldi	r23, 0x06	; 6
    243c:	ce 01       	movw	r24, r28
    243e:	01 96       	adiw	r24, 0x01	; 1
    2440:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>

          Serial.println("TIPO CARBURANTE: " + mezzo.Carb);
    2444:	6b e6       	ldi	r22, 0x6B	; 107
    2446:	7b e0       	ldi	r23, 0x0B	; 11
    2448:	ce 01       	movw	r24, r28
    244a:	01 96       	adiw	r24, 0x01	; 1
    244c:	0e 94 8c 3d 	call	0x7b18	; 0x7b18 <_ZplRK15StringSumHelperRK6String>
    2450:	bc 01       	movw	r22, r24
    2452:	80 e1       	ldi	r24, 0x10	; 16
    2454:	9d e0       	ldi	r25, 0x0D	; 13
    2456:	0e 94 0c 39 	call	0x7218	; 0x7218 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    245a:	ce 01       	movw	r24, r28
    245c:	01 96       	adiw	r24, 0x01	; 1
    245e:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2462:	6e ee       	ldi	r22, 0xEE	; 238
    2464:	76 e0       	ldi	r23, 0x06	; 6
    2466:	ce 01       	movw	r24, r28
    2468:	01 96       	adiw	r24, 0x01	; 1
    246a:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
          Serial.println("TARGA: " + mezzo.TARGA);
    246e:	61 e7       	ldi	r22, 0x71	; 113
    2470:	7b e0       	ldi	r23, 0x0B	; 11
    2472:	ce 01       	movw	r24, r28
    2474:	01 96       	adiw	r24, 0x01	; 1
    2476:	0e 94 8c 3d 	call	0x7b18	; 0x7b18 <_ZplRK15StringSumHelperRK6String>
    247a:	bc 01       	movw	r22, r24
    247c:	80 e1       	ldi	r24, 0x10	; 16
    247e:	9d e0       	ldi	r25, 0x0D	; 13
    2480:	0e 94 0c 39 	call	0x7218	; 0x7218 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2484:	ce 01       	movw	r24, r28
    2486:	01 96       	adiw	r24, 0x01	; 1
    2488:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    248c:	6d e9       	ldi	r22, 0x9D	; 157
    248e:	75 e0       	ldi	r23, 0x05	; 5
    2490:	8b e6       	ldi	r24, 0x6B	; 107
    2492:	9b e0       	ldi	r25, 0x0B	; 11
    2494:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <_ZNK6String6equalsEPKc>

          if ((mezzo.Carb == "B") || (mezzo.Carb == "D")) {
    2498:	81 11       	cpse	r24, r1
    249a:	27 c5       	rjmp	.+2638   	; 0x2eea <loop+0x10ce>
    249c:	6b e9       	ldi	r22, 0x9B	; 155
    249e:	75 e0       	ldi	r23, 0x05	; 5
    24a0:	8b e6       	ldi	r24, 0x6B	; 107
    24a2:	9b e0       	ldi	r25, 0x0B	; 11
    24a4:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <_ZNK6String6equalsEPKc>
    24a8:	81 11       	cpse	r24, r1
    24aa:	1f c5       	rjmp	.+2622   	; 0x2eea <loop+0x10ce>
          mezzo.KM = "0";
          distr_selezionato = 0;
          avanzaStato(TselDistributore);
        }
        else {
          String mezzoString = leggiTAG_Mezzo(false); // con TRUE scrive sul blocco 4 della card NFC DEL MEZZO
    24ac:	ce 01       	movw	r24, r28
    24ae:	0f 96       	adiw	r24, 0x0f	; 15
    24b0:	63 c4       	rjmp	.+2246   	; 0x2d78 <loop+0xf5c>
        }
      }
      break;
    case 4:
      {
        lcd.setCursor(0, 0);
    24b2:	40 e0       	ldi	r20, 0x00	; 0
    24b4:	60 e0       	ldi	r22, 0x00	; 0
    24b6:	89 e4       	ldi	r24, 0x49	; 73
    24b8:	9b e0       	ldi	r25, 0x0B	; 11
    24ba:	0e 94 67 30 	call	0x60ce	; 0x60ce <_ZN3LCD9setCursorEhh>
        lcd.print((char)1);  // STAMPA LA CLESSIDRA
    24be:	61 e0       	ldi	r22, 0x01	; 1
    24c0:	89 e4       	ldi	r24, 0x49	; 73
    24c2:	9b e0       	ldi	r25, 0x0B	; 11
    24c4:	0e 94 f2 38 	call	0x71e4	; 0x71e4 <_ZN5Print5printEc>
        lcd.print("Tempo: " + String((UltimoPassaggioStato + Timer - secs - 1)) + " sec ");
    24c8:	40 91 8b 0a 	lds	r20, 0x0A8B	; 0x800a8b <UltimoPassaggioStato>
    24cc:	50 91 8c 0a 	lds	r21, 0x0A8C	; 0x800a8c <UltimoPassaggioStato+0x1>
    24d0:	60 91 8d 0a 	lds	r22, 0x0A8D	; 0x800a8d <UltimoPassaggioStato+0x2>
    24d4:	70 91 8e 0a 	lds	r23, 0x0A8E	; 0x800a8e <UltimoPassaggioStato+0x3>
    24d8:	80 91 87 0a 	lds	r24, 0x0A87	; 0x800a87 <Timer>
    24dc:	90 91 88 0a 	lds	r25, 0x0A88	; 0x800a88 <Timer+0x1>
    24e0:	a0 91 89 0a 	lds	r26, 0x0A89	; 0x800a89 <Timer+0x2>
    24e4:	b0 91 8a 0a 	lds	r27, 0x0A8A	; 0x800a8a <Timer+0x3>
    24e8:	48 0f       	add	r20, r24
    24ea:	59 1f       	adc	r21, r25
    24ec:	6a 1f       	adc	r22, r26
    24ee:	7b 1f       	adc	r23, r27
    24f0:	41 50       	subi	r20, 0x01	; 1
    24f2:	51 09       	sbc	r21, r1
    24f4:	61 09       	sbc	r22, r1
    24f6:	71 09       	sbc	r23, r1
    24f8:	80 91 8f 0a 	lds	r24, 0x0A8F	; 0x800a8f <secs>
    24fc:	90 91 90 0a 	lds	r25, 0x0A90	; 0x800a90 <secs+0x1>
    2500:	a0 91 91 0a 	lds	r26, 0x0A91	; 0x800a91 <secs+0x2>
    2504:	b0 91 92 0a 	lds	r27, 0x0A92	; 0x800a92 <secs+0x3>
    2508:	48 1b       	sub	r20, r24
    250a:	59 0b       	sbc	r21, r25
    250c:	6a 0b       	sbc	r22, r26
    250e:	7b 0b       	sbc	r23, r27
    2510:	2a e0       	ldi	r18, 0x0A	; 10
    2512:	ce 01       	movw	r24, r28
    2514:	0f 96       	adiw	r24, 0x0f	; 15
    2516:	0e 94 e1 3c 	call	0x79c2	; 0x79c2 <_ZN6StringC1Emh>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    251a:	68 ef       	ldi	r22, 0xF8	; 248
    251c:	76 e0       	ldi	r23, 0x06	; 6
    251e:	ce 01       	movw	r24, r28
    2520:	01 96       	adiw	r24, 0x01	; 1
    2522:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
    2526:	be 01       	movw	r22, r28
    2528:	61 5f       	subi	r22, 0xF1	; 241
    252a:	7f 4f       	sbci	r23, 0xFF	; 255
    252c:	ce 01       	movw	r24, r28
    252e:	01 96       	adiw	r24, 0x01	; 1
    2530:	0e 94 8c 3d 	call	0x7b18	; 0x7b18 <_ZplRK15StringSumHelperRK6String>
    2534:	66 ed       	ldi	r22, 0xD6	; 214
    2536:	76 e0       	ldi	r23, 0x06	; 6
    2538:	0e 94 9d 3d 	call	0x7b3a	; 0x7b3a <_ZplRK15StringSumHelperPKc>
    253c:	bc 01       	movw	r22, r24
    253e:	89 e4       	ldi	r24, 0x49	; 73
    2540:	9b e0       	ldi	r25, 0x0B	; 11
    2542:	0e 94 e3 38 	call	0x71c6	; 0x71c6 <_ZN5Print5printERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2546:	ce 01       	movw	r24, r28
    2548:	01 96       	adiw	r24, 0x01	; 1
    254a:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
    254e:	ce 01       	movw	r24, r28
    2550:	0f 96       	adiw	r24, 0x0f	; 15
    2552:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    2556:	6d e9       	ldi	r22, 0x9D	; 157
    2558:	75 e0       	ldi	r23, 0x05	; 5
    255a:	8b e6       	ldi	r24, 0x6B	; 107
    255c:	9b e0       	ldi	r25, 0x0B	; 11
    255e:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <_ZNK6String6equalsEPKc>

        // Verifica scelta distributore

        if ((mezzo.Carb == "B") || (distr_selezionato == 2))
    2562:	81 11       	cpse	r24, r1
    2564:	f9 c4       	rjmp	.+2546   	; 0x2f58 <loop+0x113c>
    2566:	80 91 1f 0b 	lds	r24, 0x0B1F	; 0x800b1f <distr_selezionato>
    256a:	82 30       	cpi	r24, 0x02	; 2
    256c:	09 f0       	breq	.+2      	; 0x2570 <loop+0x754>
    256e:	20 c5       	rjmp	.+2624   	; 0x2fb0 <loop+0x1194>
    2570:	f3 c4       	rjmp	.+2534   	; 0x2f58 <loop+0x113c>
        }
      }
      break;
    case 5:
      {
        lcd.setCursor(0, 0);
    2572:	40 e0       	ldi	r20, 0x00	; 0
    2574:	60 e0       	ldi	r22, 0x00	; 0
    2576:	89 e4       	ldi	r24, 0x49	; 73
    2578:	9b e0       	ldi	r25, 0x0B	; 11
    257a:	0e 94 67 30 	call	0x60ce	; 0x60ce <_ZN3LCD9setCursorEhh>
        lcd.print((char)1);  // STAMPA LA CLESSIDRA
    257e:	61 e0       	ldi	r22, 0x01	; 1
    2580:	89 e4       	ldi	r24, 0x49	; 73
    2582:	9b e0       	ldi	r25, 0x0B	; 11
    2584:	0e 94 f2 38 	call	0x71e4	; 0x71e4 <_ZN5Print5printEc>
        lcd.print("Tempo: " + String((UltimoPassaggioStato + Timer - secs - 1)) + " sec ");
    2588:	40 91 8b 0a 	lds	r20, 0x0A8B	; 0x800a8b <UltimoPassaggioStato>
    258c:	50 91 8c 0a 	lds	r21, 0x0A8C	; 0x800a8c <UltimoPassaggioStato+0x1>
    2590:	60 91 8d 0a 	lds	r22, 0x0A8D	; 0x800a8d <UltimoPassaggioStato+0x2>
    2594:	70 91 8e 0a 	lds	r23, 0x0A8E	; 0x800a8e <UltimoPassaggioStato+0x3>
    2598:	80 91 87 0a 	lds	r24, 0x0A87	; 0x800a87 <Timer>
    259c:	90 91 88 0a 	lds	r25, 0x0A88	; 0x800a88 <Timer+0x1>
    25a0:	a0 91 89 0a 	lds	r26, 0x0A89	; 0x800a89 <Timer+0x2>
    25a4:	b0 91 8a 0a 	lds	r27, 0x0A8A	; 0x800a8a <Timer+0x3>
    25a8:	48 0f       	add	r20, r24
    25aa:	59 1f       	adc	r21, r25
    25ac:	6a 1f       	adc	r22, r26
    25ae:	7b 1f       	adc	r23, r27
    25b0:	41 50       	subi	r20, 0x01	; 1
    25b2:	51 09       	sbc	r21, r1
    25b4:	61 09       	sbc	r22, r1
    25b6:	71 09       	sbc	r23, r1
    25b8:	80 91 8f 0a 	lds	r24, 0x0A8F	; 0x800a8f <secs>
    25bc:	90 91 90 0a 	lds	r25, 0x0A90	; 0x800a90 <secs+0x1>
    25c0:	a0 91 91 0a 	lds	r26, 0x0A91	; 0x800a91 <secs+0x2>
    25c4:	b0 91 92 0a 	lds	r27, 0x0A92	; 0x800a92 <secs+0x3>
    25c8:	48 1b       	sub	r20, r24
    25ca:	59 0b       	sbc	r21, r25
    25cc:	6a 0b       	sbc	r22, r26
    25ce:	7b 0b       	sbc	r23, r27
    25d0:	2a e0       	ldi	r18, 0x0A	; 10
    25d2:	ce 01       	movw	r24, r28
    25d4:	0f 96       	adiw	r24, 0x0f	; 15
    25d6:	0e 94 e1 3c 	call	0x79c2	; 0x79c2 <_ZN6StringC1Emh>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    25da:	68 ef       	ldi	r22, 0xF8	; 248
    25dc:	76 e0       	ldi	r23, 0x06	; 6
    25de:	ce 01       	movw	r24, r28
    25e0:	01 96       	adiw	r24, 0x01	; 1
    25e2:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
    25e6:	be 01       	movw	r22, r28
    25e8:	61 5f       	subi	r22, 0xF1	; 241
    25ea:	7f 4f       	sbci	r23, 0xFF	; 255
    25ec:	ce 01       	movw	r24, r28
    25ee:	01 96       	adiw	r24, 0x01	; 1
    25f0:	0e 94 8c 3d 	call	0x7b18	; 0x7b18 <_ZplRK15StringSumHelperRK6String>
    25f4:	66 ed       	ldi	r22, 0xD6	; 214
    25f6:	76 e0       	ldi	r23, 0x06	; 6
    25f8:	0e 94 9d 3d 	call	0x7b3a	; 0x7b3a <_ZplRK15StringSumHelperPKc>
    25fc:	bc 01       	movw	r22, r24
    25fe:	89 e4       	ldi	r24, 0x49	; 73
    2600:	9b e0       	ldi	r25, 0x0B	; 11
    2602:	0e 94 e3 38 	call	0x71c6	; 0x71c6 <_ZN5Print5printERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2606:	ce 01       	movw	r24, r28
    2608:	01 96       	adiw	r24, 0x01	; 1
    260a:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
    260e:	ce 01       	movw	r24, r28
    2610:	0f 96       	adiw	r24, 0x0f	; 15
    2612:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
        // RaccoltaDati[4] = "1234";        
        /*****************************************************************/
        gpio.setCONFREG(0x3C);
    2616:	6c e3       	ldi	r22, 0x3C	; 60
    2618:	82 e7       	ldi	r24, 0x72	; 114
    261a:	9a e0       	ldi	r25, 0x0A	; 10
    261c:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <_ZN7PCA953410setCONFREGEh>
        uint8_t c = gpio.Read_IP_REGISTER();
    2620:	82 e7       	ldi	r24, 0x72	; 114
    2622:	9a e0       	ldi	r25, 0x0A	; 10
    2624:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <_ZN7PCA953416Read_IP_REGISTEREv>
    2628:	e8 2e       	mov	r14, r24
    262a:	42 e0       	ldi	r20, 0x02	; 2
    262c:	be 01       	movw	r22, r28
    262e:	69 5e       	subi	r22, 0xE9	; 233
    2630:	7f 4f       	sbci	r23, 0xFF	; 255
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	0e 94 8b 42 	call	0x8516	; 0x8516 <__itoa_ncheck>
        char buf[8];
        itoa(c, buf, 2);
        gpio.setCONFREG(0xC3);
    2638:	63 ec       	ldi	r22, 0xC3	; 195
    263a:	82 e7       	ldi	r24, 0x72	; 114
    263c:	9a e0       	ldi	r25, 0x0A	; 10
    263e:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <_ZN7PCA953410setCONFREGEh>
        uint8_t r = gpio.Read_IP_REGISTER();
    2642:	82 e7       	ldi	r24, 0x72	; 114
    2644:	9a e0       	ldi	r25, 0x0A	; 10
    2646:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <_ZN7PCA953416Read_IP_REGISTEREv>
    264a:	f8 2e       	mov	r15, r24
    264c:	42 e0       	ldi	r20, 0x02	; 2
    264e:	be 01       	movw	r22, r28
    2650:	61 5f       	subi	r22, 0xF1	; 241
    2652:	7f 4f       	sbci	r23, 0xFF	; 255
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	0e 94 8b 42 	call	0x8516	; 0x8516 <__itoa_ncheck>
        char bufr[8];
        itoa(r, bufr, 2);
        char ris[8];
        uint8_t z = (r ^ c);
        itoa(z, ris, 2);
    265a:	fe 24       	eor	r15, r14
    265c:	ef 2c       	mov	r14, r15
    265e:	f1 2c       	mov	r15, r1
    2660:	42 e0       	ldi	r20, 0x02	; 2
    2662:	be 01       	movw	r22, r28
    2664:	6f 5f       	subi	r22, 0xFF	; 255
    2666:	7f 4f       	sbci	r23, 0xFF	; 255
    2668:	c7 01       	movw	r24, r14
    266a:	0e 94 8b 42 	call	0x8516	; 0x8516 <__itoa_ncheck>
        char K = getCharKeypad(int(z));
    266e:	c7 01       	movw	r24, r14
    2670:	0e 94 9b 02 	call	0x536	; 0x536 <_Z13getCharKeypadi>
    2674:	9f ef       	ldi	r25, 0xFF	; 255
    2676:	29 ef       	ldi	r18, 0xF9	; 249
    2678:	30 e0       	ldi	r19, 0x00	; 0
    267a:	91 50       	subi	r25, 0x01	; 1
    267c:	20 40       	sbci	r18, 0x00	; 0
    267e:	30 40       	sbci	r19, 0x00	; 0
    2680:	e1 f7       	brne	.-8      	; 0x267a <loop+0x85e>
    2682:	00 c0       	rjmp	.+0      	; 0x2684 <loop+0x868>
        _delay_ms(20);
        /*****************************************************************/

        inputKM(K);
    2684:	00 00       	nop
    2686:	bc d8       	rcall	.-3720   	; 0x1800 <_Z7inputKMc>
        impulsi = 0;
    2688:	10 92 21 0b 	sts	0x0B21, r1	; 0x800b21 <impulsi+0x1>
    268c:	10 92 20 0b 	sts	0x0B20, r1	; 0x800b20 <impulsi>
      }
      break;
    2690:	75 c3       	rjmp	.+1770   	; 0x2d7c <loop+0xf60>
	case 6: 
	{ 
		lcd.setCursor(0, 0);
    2692:	40 e0       	ldi	r20, 0x00	; 0
    2694:	60 e0       	ldi	r22, 0x00	; 0
    2696:	89 e4       	ldi	r24, 0x49	; 73
    2698:	9b e0       	ldi	r25, 0x0B	; 11
    269a:	0e 94 67 30 	call	0x60ce	; 0x60ce <_ZN3LCD9setCursorEhh>
		lcd.print((char)1);  // STAMPA LA CLESSIDRA
    269e:	61 e0       	ldi	r22, 0x01	; 1
    26a0:	89 e4       	ldi	r24, 0x49	; 73
    26a2:	9b e0       	ldi	r25, 0x0B	; 11
    26a4:	0e 94 f2 38 	call	0x71e4	; 0x71e4 <_ZN5Print5printEc>
		lcd.print("Tempo: " + String((UltimoPassaggioStato + Timer - secs - 1)) + " sec ");
    26a8:	40 91 8b 0a 	lds	r20, 0x0A8B	; 0x800a8b <UltimoPassaggioStato>
    26ac:	50 91 8c 0a 	lds	r21, 0x0A8C	; 0x800a8c <UltimoPassaggioStato+0x1>
    26b0:	60 91 8d 0a 	lds	r22, 0x0A8D	; 0x800a8d <UltimoPassaggioStato+0x2>
    26b4:	70 91 8e 0a 	lds	r23, 0x0A8E	; 0x800a8e <UltimoPassaggioStato+0x3>
    26b8:	80 91 87 0a 	lds	r24, 0x0A87	; 0x800a87 <Timer>
    26bc:	90 91 88 0a 	lds	r25, 0x0A88	; 0x800a88 <Timer+0x1>
    26c0:	a0 91 89 0a 	lds	r26, 0x0A89	; 0x800a89 <Timer+0x2>
    26c4:	b0 91 8a 0a 	lds	r27, 0x0A8A	; 0x800a8a <Timer+0x3>
    26c8:	48 0f       	add	r20, r24
    26ca:	59 1f       	adc	r21, r25
    26cc:	6a 1f       	adc	r22, r26
    26ce:	7b 1f       	adc	r23, r27
    26d0:	41 50       	subi	r20, 0x01	; 1
    26d2:	51 09       	sbc	r21, r1
    26d4:	61 09       	sbc	r22, r1
    26d6:	71 09       	sbc	r23, r1
    26d8:	80 91 8f 0a 	lds	r24, 0x0A8F	; 0x800a8f <secs>
    26dc:	90 91 90 0a 	lds	r25, 0x0A90	; 0x800a90 <secs+0x1>
    26e0:	a0 91 91 0a 	lds	r26, 0x0A91	; 0x800a91 <secs+0x2>
    26e4:	b0 91 92 0a 	lds	r27, 0x0A92	; 0x800a92 <secs+0x3>
    26e8:	48 1b       	sub	r20, r24
    26ea:	59 0b       	sbc	r21, r25
    26ec:	6a 0b       	sbc	r22, r26
    26ee:	7b 0b       	sbc	r23, r27
    26f0:	2a e0       	ldi	r18, 0x0A	; 10
    26f2:	ce 01       	movw	r24, r28
    26f4:	0f 96       	adiw	r24, 0x0f	; 15
    26f6:	0e 94 e1 3c 	call	0x79c2	; 0x79c2 <_ZN6StringC1Emh>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    26fa:	68 ef       	ldi	r22, 0xF8	; 248
    26fc:	76 e0       	ldi	r23, 0x06	; 6
    26fe:	ce 01       	movw	r24, r28
    2700:	01 96       	adiw	r24, 0x01	; 1
    2702:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
    2706:	be 01       	movw	r22, r28
    2708:	61 5f       	subi	r22, 0xF1	; 241
    270a:	7f 4f       	sbci	r23, 0xFF	; 255
    270c:	ce 01       	movw	r24, r28
    270e:	01 96       	adiw	r24, 0x01	; 1
    2710:	0e 94 8c 3d 	call	0x7b18	; 0x7b18 <_ZplRK15StringSumHelperRK6String>
    2714:	66 ed       	ldi	r22, 0xD6	; 214
    2716:	76 e0       	ldi	r23, 0x06	; 6
    2718:	0e 94 9d 3d 	call	0x7b3a	; 0x7b3a <_ZplRK15StringSumHelperPKc>
    271c:	bc 01       	movw	r22, r24
    271e:	89 e4       	ldi	r24, 0x49	; 73
    2720:	9b e0       	ldi	r25, 0x0B	; 11
    2722:	0e 94 e3 38 	call	0x71c6	; 0x71c6 <_ZN5Print5printERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2726:	ce 01       	movw	r24, r28
    2728:	01 96       	adiw	r24, 0x01	; 1
    272a:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
    272e:	ce 01       	movw	r24, r28
    2730:	0f 96       	adiw	r24, 0x0f	; 15
    2732:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
		 
		if (testbit(PINA,1) && (mezzo.Carb == "D"))
    2736:	01 9b       	sbis	0x00, 1	; 0
    2738:	08 c0       	rjmp	.+16     	; 0x274a <loop+0x92e>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    273a:	6b e9       	ldi	r22, 0x9B	; 155
    273c:	75 e0       	ldi	r23, 0x05	; 5
    273e:	8b e6       	ldi	r24, 0x6B	; 107
    2740:	9b e0       	ldi	r25, 0x0B	; 11
    2742:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <_ZNK6String6equalsEPKc>
    2746:	81 11       	cpse	r24, r1
    2748:	76 c4       	rjmp	.+2284   	; 0x3036 <loop+0x121a>
			avanzaStato(TmaxErogazione); 
		}
		
		// CONTATTO PISTOLA BENZINA

		if  (testbit(PINB,1) && (mezzo.Carb == "B"))
    274a:	19 9b       	sbis	0x03, 1	; 3
    274c:	17 c3       	rjmp	.+1582   	; 0x2d7c <loop+0xf60>
    274e:	6d e9       	ldi	r22, 0x9D	; 157
    2750:	75 e0       	ldi	r23, 0x05	; 5
    2752:	8b e6       	ldi	r24, 0x6B	; 107
    2754:	9b e0       	ldi	r25, 0x0B	; 11
    2756:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <_ZNK6String6equalsEPKc>
    275a:	81 11       	cpse	r24, r1
    275c:	b5 c4       	rjmp	.+2410   	; 0x30c8 <loop+0x12ac>
    275e:	0e c3       	rjmp	.+1564   	; 0x2d7c <loop+0xf60>
		 
	}
	break;
    case 7:
      {
        lcd.setCursor(0, 0);
    2760:	40 e0       	ldi	r20, 0x00	; 0
    2762:	60 e0       	ldi	r22, 0x00	; 0
    2764:	89 e4       	ldi	r24, 0x49	; 73
    2766:	9b e0       	ldi	r25, 0x0B	; 11
    2768:	0e 94 67 30 	call	0x60ce	; 0x60ce <_ZN3LCD9setCursorEhh>
        lcd.print((char)1);  // STAMPA LA CLESSIDRA
    276c:	61 e0       	ldi	r22, 0x01	; 1
    276e:	89 e4       	ldi	r24, 0x49	; 73
    2770:	9b e0       	ldi	r25, 0x0B	; 11
    2772:	0e 94 f2 38 	call	0x71e4	; 0x71e4 <_ZN5Print5printEc>
        lcd.print("  Tempo: " + String((UltimoPassaggioStato + Timer - secs - 1)) + " sec ");
    2776:	40 91 8b 0a 	lds	r20, 0x0A8B	; 0x800a8b <UltimoPassaggioStato>
    277a:	50 91 8c 0a 	lds	r21, 0x0A8C	; 0x800a8c <UltimoPassaggioStato+0x1>
    277e:	60 91 8d 0a 	lds	r22, 0x0A8D	; 0x800a8d <UltimoPassaggioStato+0x2>
    2782:	70 91 8e 0a 	lds	r23, 0x0A8E	; 0x800a8e <UltimoPassaggioStato+0x3>
    2786:	80 91 87 0a 	lds	r24, 0x0A87	; 0x800a87 <Timer>
    278a:	90 91 88 0a 	lds	r25, 0x0A88	; 0x800a88 <Timer+0x1>
    278e:	a0 91 89 0a 	lds	r26, 0x0A89	; 0x800a89 <Timer+0x2>
    2792:	b0 91 8a 0a 	lds	r27, 0x0A8A	; 0x800a8a <Timer+0x3>
    2796:	48 0f       	add	r20, r24
    2798:	59 1f       	adc	r21, r25
    279a:	6a 1f       	adc	r22, r26
    279c:	7b 1f       	adc	r23, r27
    279e:	41 50       	subi	r20, 0x01	; 1
    27a0:	51 09       	sbc	r21, r1
    27a2:	61 09       	sbc	r22, r1
    27a4:	71 09       	sbc	r23, r1
    27a6:	80 91 8f 0a 	lds	r24, 0x0A8F	; 0x800a8f <secs>
    27aa:	90 91 90 0a 	lds	r25, 0x0A90	; 0x800a90 <secs+0x1>
    27ae:	a0 91 91 0a 	lds	r26, 0x0A91	; 0x800a91 <secs+0x2>
    27b2:	b0 91 92 0a 	lds	r27, 0x0A92	; 0x800a92 <secs+0x3>
    27b6:	48 1b       	sub	r20, r24
    27b8:	59 0b       	sbc	r21, r25
    27ba:	6a 0b       	sbc	r22, r26
    27bc:	7b 0b       	sbc	r23, r27
    27be:	2a e0       	ldi	r18, 0x0A	; 10
    27c0:	ce 01       	movw	r24, r28
    27c2:	0f 96       	adiw	r24, 0x0f	; 15
    27c4:	0e 94 e1 3c 	call	0x79c2	; 0x79c2 <_ZN6StringC1Emh>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    27c8:	66 ef       	ldi	r22, 0xF6	; 246
    27ca:	76 e0       	ldi	r23, 0x06	; 6
    27cc:	ce 01       	movw	r24, r28
    27ce:	01 96       	adiw	r24, 0x01	; 1
    27d0:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
    27d4:	be 01       	movw	r22, r28
    27d6:	61 5f       	subi	r22, 0xF1	; 241
    27d8:	7f 4f       	sbci	r23, 0xFF	; 255
    27da:	ce 01       	movw	r24, r28
    27dc:	01 96       	adiw	r24, 0x01	; 1
    27de:	0e 94 8c 3d 	call	0x7b18	; 0x7b18 <_ZplRK15StringSumHelperRK6String>
    27e2:	66 ed       	ldi	r22, 0xD6	; 214
    27e4:	76 e0       	ldi	r23, 0x06	; 6
    27e6:	0e 94 9d 3d 	call	0x7b3a	; 0x7b3a <_ZplRK15StringSumHelperPKc>
    27ea:	bc 01       	movw	r22, r24
    27ec:	89 e4       	ldi	r24, 0x49	; 73
    27ee:	9b e0       	ldi	r25, 0x0B	; 11
    27f0:	0e 94 e3 38 	call	0x71c6	; 0x71c6 <_ZN5Print5printERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    27f4:	ce 01       	movw	r24, r28
    27f6:	01 96       	adiw	r24, 0x01	; 1
    27f8:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
    27fc:	ce 01       	movw	r24, r28
    27fe:	0f 96       	adiw	r24, 0x0f	; 15
    2800:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
          disable_ETH();
          _delay_ms(2);
          enable_ETH();
          /*****************************************************************/

        double lt = impulsiToLitri(impulsi);
    2804:	80 91 20 0b 	lds	r24, 0x0B20	; 0x800b20 <impulsi>
    2808:	90 91 21 0b 	lds	r25, 0x0B21	; 0x800b21 <impulsi+0x1>
    280c:	0e 94 88 09 	call	0x1310	; 0x1310 <_Z14impulsiToLitrii>
    2810:	6b 01       	movw	r12, r22
    2812:	7c 01       	movw	r14, r24

        righeDisplay[1] = "LITRI :" + String(lt);
    2814:	22 e0       	ldi	r18, 0x02	; 2
    2816:	ab 01       	movw	r20, r22
    2818:	bc 01       	movw	r22, r24
    281a:	ce 01       	movw	r24, r28
    281c:	0f 96       	adiw	r24, 0x0f	; 15
    281e:	0e 94 0c 3d 	call	0x7a18	; 0x7a18 <_ZN6StringC1Edh>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2822:	60 e0       	ldi	r22, 0x00	; 0
    2824:	77 e0       	ldi	r23, 0x07	; 7
    2826:	ce 01       	movw	r24, r28
    2828:	01 96       	adiw	r24, 0x01	; 1
    282a:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
    282e:	be 01       	movw	r22, r28
    2830:	61 5f       	subi	r22, 0xF1	; 241
    2832:	7f 4f       	sbci	r23, 0xFF	; 255
    2834:	ce 01       	movw	r24, r28
    2836:	01 96       	adiw	r24, 0x01	; 1
    2838:	0e 94 8c 3d 	call	0x7b18	; 0x7b18 <_ZplRK15StringSumHelperRK6String>
    283c:	bc 01       	movw	r22, r24
    283e:	87 ed       	ldi	r24, 0xD7	; 215
    2840:	9a e0       	ldi	r25, 0x0A	; 10
    2842:	0e 94 0e 3c 	call	0x781c	; 0x781c <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2846:	ce 01       	movw	r24, r28
    2848:	01 96       	adiw	r24, 0x01	; 1
    284a:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
    284e:	ce 01       	movw	r24, r28
    2850:	0f 96       	adiw	r24, 0x0f	; 15
    2852:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
        righeDisplay[2] = "imp :" + String(impulsi);
    2856:	60 91 20 0b 	lds	r22, 0x0B20	; 0x800b20 <impulsi>
    285a:	70 91 21 0b 	lds	r23, 0x0B21	; 0x800b21 <impulsi+0x1>
    285e:	4a e0       	ldi	r20, 0x0A	; 10
    2860:	ce 01       	movw	r24, r28
    2862:	0f 96       	adiw	r24, 0x0f	; 15
    2864:	0e 94 8d 3c 	call	0x791a	; 0x791a <_ZN6StringC1Eih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2868:	68 e0       	ldi	r22, 0x08	; 8
    286a:	77 e0       	ldi	r23, 0x07	; 7
    286c:	ce 01       	movw	r24, r28
    286e:	01 96       	adiw	r24, 0x01	; 1
    2870:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
    2874:	be 01       	movw	r22, r28
    2876:	61 5f       	subi	r22, 0xF1	; 241
    2878:	7f 4f       	sbci	r23, 0xFF	; 255
    287a:	ce 01       	movw	r24, r28
    287c:	01 96       	adiw	r24, 0x01	; 1
    287e:	0e 94 8c 3d 	call	0x7b18	; 0x7b18 <_ZplRK15StringSumHelperRK6String>
    2882:	bc 01       	movw	r22, r24
    2884:	8d ed       	ldi	r24, 0xDD	; 221
    2886:	9a e0       	ldi	r25, 0x0A	; 10
    2888:	0e 94 0e 3c 	call	0x781c	; 0x781c <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    288c:	ce 01       	movw	r24, r28
    288e:	01 96       	adiw	r24, 0x01	; 1
    2890:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
    2894:	ce 01       	movw	r24, r28
    2896:	0f 96       	adiw	r24, 0x0f	; 15
    2898:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    289c:	6e e0       	ldi	r22, 0x0E	; 14
    289e:	77 e0       	ldi	r23, 0x07	; 7
    28a0:	ce 01       	movw	r24, r28
    28a2:	01 96       	adiw	r24, 0x01	; 1
    28a4:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
        righeDisplay[3] = "Erogazione: " + StatoAttuale;
    28a8:	6c e2       	ldi	r22, 0x2C	; 44
    28aa:	7b e0       	ldi	r23, 0x0B	; 11
    28ac:	ce 01       	movw	r24, r28
    28ae:	01 96       	adiw	r24, 0x01	; 1
    28b0:	0e 94 8c 3d 	call	0x7b18	; 0x7b18 <_ZplRK15StringSumHelperRK6String>
    28b4:	bc 01       	movw	r22, r24
    28b6:	83 ee       	ldi	r24, 0xE3	; 227
    28b8:	9a e0       	ldi	r25, 0x0A	; 10
    28ba:	0e 94 0e 3c 	call	0x781c	; 0x781c <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    28be:	ce 01       	movw	r24, r28
    28c0:	01 96       	adiw	r24, 0x01	; 1
    28c2:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>

        lcd.setCursor(0, 1);
    28c6:	41 e0       	ldi	r20, 0x01	; 1
    28c8:	60 e0       	ldi	r22, 0x00	; 0
    28ca:	89 e4       	ldi	r24, 0x49	; 73
    28cc:	9b e0       	ldi	r25, 0x0B	; 11
    28ce:	0e 94 67 30 	call	0x60ce	; 0x60ce <_ZN3LCD9setCursorEhh>
        lcd.print(righeDisplay[1]);
    28d2:	67 ed       	ldi	r22, 0xD7	; 215
    28d4:	7a e0       	ldi	r23, 0x0A	; 10
    28d6:	89 e4       	ldi	r24, 0x49	; 73
    28d8:	9b e0       	ldi	r25, 0x0B	; 11
    28da:	0e 94 e3 38 	call	0x71c6	; 0x71c6 <_ZN5Print5printERK6String>
        lcd.setCursor(0, 2);
    28de:	42 e0       	ldi	r20, 0x02	; 2
    28e0:	60 e0       	ldi	r22, 0x00	; 0
    28e2:	89 e4       	ldi	r24, 0x49	; 73
    28e4:	9b e0       	ldi	r25, 0x0B	; 11
    28e6:	0e 94 67 30 	call	0x60ce	; 0x60ce <_ZN3LCD9setCursorEhh>
        lcd.print(righeDisplay[2]);
    28ea:	6d ed       	ldi	r22, 0xDD	; 221
    28ec:	7a e0       	ldi	r23, 0x0A	; 10
    28ee:	89 e4       	ldi	r24, 0x49	; 73
    28f0:	9b e0       	ldi	r25, 0x0B	; 11
    28f2:	0e 94 e3 38 	call	0x71c6	; 0x71c6 <_ZN5Print5printERK6String>
        lcd.setCursor(0, 3);
    28f6:	43 e0       	ldi	r20, 0x03	; 3
    28f8:	60 e0       	ldi	r22, 0x00	; 0
    28fa:	89 e4       	ldi	r24, 0x49	; 73
    28fc:	9b e0       	ldi	r25, 0x0B	; 11
    28fe:	0e 94 67 30 	call	0x60ce	; 0x60ce <_ZN3LCD9setCursorEhh>
        lcd.print(righeDisplay[3]);
    2902:	63 ee       	ldi	r22, 0xE3	; 227
    2904:	7a e0       	ldi	r23, 0x0A	; 10
    2906:	89 e4       	ldi	r24, 0x49	; 73
    2908:	9b e0       	ldi	r25, 0x0B	; 11
    290a:	0e 94 e3 38 	call	0x71c6	; 0x71c6 <_ZN5Print5printERK6String>

        // CONTATTO PISTOLA DIESEL

        //if ((PINA & _BV(PA1)) && (mezzo.Carb == "D"))
		if (!testbit(PINA,1) && (mezzo.Carb == "D"))
    290e:	01 99       	sbic	0x00, 1	; 0
    2910:	08 c0       	rjmp	.+16     	; 0x2922 <loop+0xb06>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    2912:	6b e9       	ldi	r22, 0x9B	; 155
    2914:	75 e0       	ldi	r23, 0x05	; 5
    2916:	8b e6       	ldi	r24, 0x6B	; 107
    2918:	9b e0       	ldi	r25, 0x0B	; 11
    291a:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <_ZNK6String6equalsEPKc>
    291e:	81 11       	cpse	r24, r1
    2920:	1a c4       	rjmp	.+2100   	; 0x3156 <loop+0x133a>
        }

        // CONTATTO PISTOLA BENZINA

        //if  ((PINB & _BV(PB1)) && (mezzo.Carb == "B"))
		if (!testbit(PINB,1) && (mezzo.Carb == "B"))
    2922:	19 99       	sbic	0x03, 1	; 3
    2924:	2b c2       	rjmp	.+1110   	; 0x2d7c <loop+0xf60>
    2926:	6d e9       	ldi	r22, 0x9D	; 157
    2928:	75 e0       	ldi	r23, 0x05	; 5
    292a:	8b e6       	ldi	r24, 0x6B	; 107
    292c:	9b e0       	ldi	r25, 0x0B	; 11
    292e:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <_ZNK6String6equalsEPKc>
    2932:	81 11       	cpse	r24, r1
    2934:	3f c4       	rjmp	.+2174   	; 0x31b4 <loop+0x1398>
    2936:	22 c2       	rjmp	.+1092   	; 0x2d7c <loop+0xf60>
        }        
      }
      break;
    case 8 :
      {
        righeDisplay[1] =  StatoAttuale;
    2938:	6c e2       	ldi	r22, 0x2C	; 44
    293a:	7b e0       	ldi	r23, 0x0B	; 11
    293c:	87 ed       	ldi	r24, 0xD7	; 215
    293e:	9a e0       	ldi	r25, 0x0A	; 10
    2940:	0e 94 0e 3c 	call	0x781c	; 0x781c <_ZN6StringaSERKS_>
        righeDisplay[2] = "Invio........";
    2944:	6b e1       	ldi	r22, 0x1B	; 27
    2946:	77 e0       	ldi	r23, 0x07	; 7
    2948:	8d ed       	ldi	r24, 0xDD	; 221
    294a:	9a e0       	ldi	r25, 0x0A	; 10
    294c:	0e 94 36 3c 	call	0x786c	; 0x786c <_ZN6StringaSEPKc>
        righeDisplay[3] =  "";      
    2950:	6a ee       	ldi	r22, 0xEA	; 234
    2952:	71 e0       	ldi	r23, 0x01	; 1
    2954:	83 ee       	ldi	r24, 0xE3	; 227
    2956:	9a e0       	ldi	r25, 0x0A	; 10
    2958:	0e 94 36 3c 	call	0x786c	; 0x786c <_ZN6StringaSEPKc>
        displayLCD(righeDisplay, stato_procedura, 100);
    295c:	60 91 22 0b 	lds	r22, 0x0B22	; 0x800b22 <stato_procedura>
    2960:	70 91 23 0b 	lds	r23, 0x0B23	; 0x800b23 <stato_procedura+0x1>
    2964:	44 e6       	ldi	r20, 0x64	; 100
    2966:	50 e0       	ldi	r21, 0x00	; 0
    2968:	81 ed       	ldi	r24, 0xD1	; 209
    296a:	9a e0       	ldi	r25, 0x0A	; 10
    296c:	0e 94 81 03 	call	0x702	; 0x702 <_Z10displayLCDP6Stringii>
        Messaggio = "";
    2970:	6a ee       	ldi	r22, 0xEA	; 234
    2972:	71 e0       	ldi	r23, 0x01	; 1
    2974:	89 ee       	ldi	r24, 0xE9	; 233
    2976:	9a e0       	ldi	r25, 0x0A	; 10
    2978:	0e 94 36 3c 	call	0x786c	; 0x786c <_ZN6StringaSEPKc>
    297c:	05 ef       	ldi	r16, 0xF5	; 245
    297e:	1a e0       	ldi	r17, 0x0A	; 10
    2980:	29 e1       	ldi	r18, 0x19	; 25
    2982:	e2 2e       	mov	r14, r18
    2984:	2b e0       	ldi	r18, 0x0B	; 11
    2986:	f2 2e       	mov	r15, r18
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
    2988:	b8 01       	movw	r22, r16
    298a:	ce 01       	movw	r24, r28
    298c:	01 96       	adiw	r24, 0x01	; 1
    298e:	0e 94 23 3c 	call	0x7846	; 0x7846 <_ZN6StringC1ERKS_>

        for (int k = 0; k < 6; k++)
          Messaggio.concat(RaccoltaDati[k] + ";");
    2992:	69 e2       	ldi	r22, 0x29	; 41
    2994:	77 e0       	ldi	r23, 0x07	; 7
    2996:	ce 01       	movw	r24, r28
    2998:	01 96       	adiw	r24, 0x01	; 1
    299a:	0e 94 9d 3d 	call	0x7b3a	; 0x7b3a <_ZplRK15StringSumHelperPKc>
    299e:	bc 01       	movw	r22, r24
    29a0:	89 ee       	ldi	r24, 0xE9	; 233
    29a2:	9a e0       	ldi	r25, 0x0A	; 10
    29a4:	0e 94 66 3d 	call	0x7acc	; 0x7acc <_ZN6String6concatERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    29a8:	ce 01       	movw	r24, r28
    29aa:	01 96       	adiw	r24, 0x01	; 1
    29ac:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
    29b0:	0a 5f       	subi	r16, 0xFA	; 250
    29b2:	1f 4f       	sbci	r17, 0xFF	; 255
        righeDisplay[2] = "Invio........";
        righeDisplay[3] =  "";      
        displayLCD(righeDisplay, stato_procedura, 100);
        Messaggio = "";

        for (int k = 0; k < 6; k++)
    29b4:	e0 16       	cp	r14, r16
    29b6:	f1 06       	cpc	r15, r17
    29b8:	39 f7       	brne	.-50     	; 0x2988 <loop+0xb6c>
          Messaggio.concat(RaccoltaDati[k] + ";");

        Messaggio.concat(CodSede);
    29ba:	66 e4       	ldi	r22, 0x46	; 70
    29bc:	71 e0       	ldi	r23, 0x01	; 1
    29be:	89 ee       	ldi	r24, 0xE9	; 233
    29c0:	9a e0       	ldi	r25, 0x0A	; 10
    29c2:	0e 94 6c 3d 	call	0x7ad8	; 0x7ad8 <_ZN6String6concatEPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    29c6:	6b e2       	ldi	r22, 0x2B	; 43
    29c8:	77 e0       	ldi	r23, 0x07	; 7
    29ca:	ce 01       	movw	r24, r28
    29cc:	01 96       	adiw	r24, 0x01	; 1
    29ce:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
        Serial.println("Messaggio:" + Messaggio);
    29d2:	69 ee       	ldi	r22, 0xE9	; 233
    29d4:	7a e0       	ldi	r23, 0x0A	; 10
    29d6:	ce 01       	movw	r24, r28
    29d8:	01 96       	adiw	r24, 0x01	; 1
    29da:	0e 94 8c 3d 	call	0x7b18	; 0x7b18 <_ZplRK15StringSumHelperRK6String>
    29de:	bc 01       	movw	r22, r24
    29e0:	80 e1       	ldi	r24, 0x10	; 16
    29e2:	9d e0       	ldi	r25, 0x0D	; 13
    29e4:	0e 94 0c 39 	call	0x7218	; 0x7218 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    29e8:	ce 01       	movw	r24, r28
    29ea:	01 96       	adiw	r24, 0x01	; 1
    29ec:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
         // Messaggio = "DD92743A;28530;D;15.03;1234;000;SA10012";
          /*****************************************************************/
          disable_ETH();
    29f0:	0e 94 95 01 	call	0x32a	; 0x32a <_ZL11disable_ETHv>
    29f4:	8f e3       	ldi	r24, 0x3F	; 63
    29f6:	9f e1       	ldi	r25, 0x1F	; 31
    29f8:	01 97       	sbiw	r24, 0x01	; 1
    29fa:	f1 f7       	brne	.-4      	; 0x29f8 <loop+0xbdc>
    29fc:	00 c0       	rjmp	.+0      	; 0x29fe <loop+0xbe2>
    29fe:	00 00       	nop
          _delay_ms(2);
          enable_ETH();
    2a00:	0e 94 93 01 	call	0x326	; 0x326 <_ZL10enable_ETHv>
    2a04:	9f ef       	ldi	r25, 0xFF	; 255
    2a06:	23 ed       	ldi	r18, 0xD3	; 211
    2a08:	30 e3       	ldi	r19, 0x30	; 48
    2a0a:	91 50       	subi	r25, 0x01	; 1
    2a0c:	20 40       	sbci	r18, 0x00	; 0
    2a0e:	30 40       	sbci	r19, 0x00	; 0
    2a10:	e1 f7       	brne	.-8      	; 0x2a0a <loop+0xbee>
    2a12:	00 c0       	rjmp	.+0      	; 0x2a14 <loop+0xbf8>
    2a14:	00 00       	nop
          /*****************************************************************/
          _delay_ms(1000);
          avanzaStato(30); 
    2a16:	6e e1       	ldi	r22, 0x1E	; 30
    2a18:	70 e0       	ldi	r23, 0x00	; 0
    2a1a:	80 e0       	ldi	r24, 0x00	; 0
    2a1c:	90 e0       	ldi	r25, 0x00	; 0
    2a1e:	f6 c3       	rjmp	.+2028   	; 0x320c <loop+0x13f0>
      }
      break;
    case 9:
      {        
        if (BIT_IS_CLEAR(PORTC, 4))
    2a20:	44 99       	sbic	0x08, 4	; 8
    2a22:	ac c1       	rjmp	.+856    	; 0x2d7c <loop+0xf60>
        {
          displayLCD(righeDisplay, stato_procedura, 10);
    2a24:	4a e0       	ldi	r20, 0x0A	; 10
    2a26:	50 e0       	ldi	r21, 0x00	; 0
    2a28:	69 e0       	ldi	r22, 0x09	; 9
    2a2a:	70 e0       	ldi	r23, 0x00	; 0
    2a2c:	81 ed       	ldi	r24, 0xD1	; 209
    2a2e:	9a e0       	ldi	r25, 0x0A	; 10
    2a30:	0e 94 81 03 	call	0x702	; 0x702 <_Z10displayLCDP6Stringii>
          Messaggio = "";
    2a34:	6a ee       	ldi	r22, 0xEA	; 234
    2a36:	71 e0       	ldi	r23, 0x01	; 1
    2a38:	89 ee       	ldi	r24, 0xE9	; 233
    2a3a:	9a e0       	ldi	r25, 0x0A	; 10
    2a3c:	0e 94 36 3c 	call	0x786c	; 0x786c <_ZN6StringaSEPKc>
    2a40:	05 ef       	ldi	r16, 0xF5	; 245
    2a42:	1a e0       	ldi	r17, 0x0A	; 10
    2a44:	99 e1       	ldi	r25, 0x19	; 25
    2a46:	e9 2e       	mov	r14, r25
    2a48:	9b e0       	ldi	r25, 0x0B	; 11
    2a4a:	f9 2e       	mov	r15, r25
{
public:
	StringSumHelper(const String &s) : String(s) {}
    2a4c:	b8 01       	movw	r22, r16
    2a4e:	ce 01       	movw	r24, r28
    2a50:	01 96       	adiw	r24, 0x01	; 1
    2a52:	0e 94 23 3c 	call	0x7846	; 0x7846 <_ZN6StringC1ERKS_>

          for (int k = 0; k < 6; k++)
            Messaggio.concat(RaccoltaDati[k] + ";");
    2a56:	69 e2       	ldi	r22, 0x29	; 41
    2a58:	77 e0       	ldi	r23, 0x07	; 7
    2a5a:	ce 01       	movw	r24, r28
    2a5c:	01 96       	adiw	r24, 0x01	; 1
    2a5e:	0e 94 9d 3d 	call	0x7b3a	; 0x7b3a <_ZplRK15StringSumHelperPKc>
    2a62:	bc 01       	movw	r22, r24
    2a64:	89 ee       	ldi	r24, 0xE9	; 233
    2a66:	9a e0       	ldi	r25, 0x0A	; 10
    2a68:	0e 94 66 3d 	call	0x7acc	; 0x7acc <_ZN6String6concatERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2a6c:	ce 01       	movw	r24, r28
    2a6e:	01 96       	adiw	r24, 0x01	; 1
    2a70:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
    2a74:	0a 5f       	subi	r16, 0xFA	; 250
    2a76:	1f 4f       	sbci	r17, 0xFF	; 255
        if (BIT_IS_CLEAR(PORTC, 4))
        {
          displayLCD(righeDisplay, stato_procedura, 10);
          Messaggio = "";

          for (int k = 0; k < 6; k++)
    2a78:	e0 16       	cp	r14, r16
    2a7a:	f1 06       	cpc	r15, r17
    2a7c:	39 f7       	brne	.-50     	; 0x2a4c <loop+0xc30>
            Messaggio.concat(RaccoltaDati[k] + ";");

          Messaggio.concat(CodSede);
    2a7e:	66 e4       	ldi	r22, 0x46	; 70
    2a80:	71 e0       	ldi	r23, 0x01	; 1
    2a82:	89 ee       	ldi	r24, 0xE9	; 233
    2a84:	9a e0       	ldi	r25, 0x0A	; 10
    2a86:	0e 94 6c 3d 	call	0x7ad8	; 0x7ad8 <_ZN6String6concatEPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2a8a:	6b e2       	ldi	r22, 0x2B	; 43
    2a8c:	77 e0       	ldi	r23, 0x07	; 7
    2a8e:	ce 01       	movw	r24, r28
    2a90:	01 96       	adiw	r24, 0x01	; 1
    2a92:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
          Serial.println("Messaggio:" + Messaggio);
    2a96:	69 ee       	ldi	r22, 0xE9	; 233
    2a98:	7a e0       	ldi	r23, 0x0A	; 10
    2a9a:	ce 01       	movw	r24, r28
    2a9c:	01 96       	adiw	r24, 0x01	; 1
    2a9e:	0e 94 8c 3d 	call	0x7b18	; 0x7b18 <_ZplRK15StringSumHelperRK6String>
    2aa2:	bc 01       	movw	r22, r24
    2aa4:	80 e1       	ldi	r24, 0x10	; 16
    2aa6:	9d e0       	ldi	r25, 0x0D	; 13
    2aa8:	0e 94 0c 39 	call	0x7218	; 0x7218 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2aac:	ce 01       	movw	r24, r28
    2aae:	01 96       	adiw	r24, 0x01	; 1
    2ab0:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
    2ab4:	8f ef       	ldi	r24, 0xFF	; 255
    2ab6:	93 ed       	ldi	r25, 0xD3	; 211
    2ab8:	20 e3       	ldi	r18, 0x30	; 48
    2aba:	81 50       	subi	r24, 0x01	; 1
    2abc:	90 40       	sbci	r25, 0x00	; 0
    2abe:	20 40       	sbci	r18, 0x00	; 0
    2ac0:	e1 f7       	brne	.-8      	; 0x2aba <loop+0xc9e>
    2ac2:	00 c0       	rjmp	.+0      	; 0x2ac4 <loop+0xca8>

          // Messaggio = "DD92743A;28530;D;15.03;1234;000;SA10012";

          _delay_ms(1000);

          if (PostErogazioneGAC(80, serverREST, clientLOCAL, Messaggio))
    2ac4:	00 00       	nop
    2ac6:	69 ee       	ldi	r22, 0xE9	; 233
    2ac8:	7a e0       	ldi	r23, 0x0A	; 10
    2aca:	ce 01       	movw	r24, r28
    2acc:	0f 96       	adiw	r24, 0x0f	; 15
    2ace:	0e 94 23 3c 	call	0x7846	; 0x7846 <_ZN6StringC1ERKS_>
    2ad2:	6c ea       	ldi	r22, 0xAC	; 172
    2ad4:	7a e0       	ldi	r23, 0x0A	; 10
    2ad6:	ce 01       	movw	r24, r28
    2ad8:	01 96       	adiw	r24, 0x01	; 1
    2ada:	7c d9       	rcall	.-3336   	; 0x1dd4 <_ZN14EthernetClientC1ERKS_>
    2adc:	9e 01       	movw	r18, r28
    2ade:	21 5f       	subi	r18, 0xF1	; 241
    2ae0:	3f 4f       	sbci	r19, 0xFF	; 255
    2ae2:	ae 01       	movw	r20, r28
    2ae4:	4f 5f       	subi	r20, 0xFF	; 255
    2ae6:	5f 4f       	sbci	r21, 0xFF	; 255
    2ae8:	64 e3       	ldi	r22, 0x34	; 52
    2aea:	71 e0       	ldi	r23, 0x01	; 1
    2aec:	80 e5       	ldi	r24, 0x50	; 80
    2aee:	90 e0       	ldi	r25, 0x00	; 0
    2af0:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <_Z17PostErogazioneGACiPc14EthernetClient6String>
    2af4:	18 2f       	mov	r17, r24
    2af6:	ce 01       	movw	r24, r28
    2af8:	0f 96       	adiw	r24, 0x0f	; 15
    2afa:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
    2afe:	11 23       	and	r17, r17
    2b00:	51 f1       	breq	.+84     	; 0x2b56 <loop+0xd3a>
          {
            disable_ETH();
    2b02:	0e 94 95 01 	call	0x32a	; 0x32a <_ZL11disable_ETHv>
    2b06:	3f ef       	ldi	r19, 0xFF	; 255
    2b08:	83 ec       	ldi	r24, 0xC3	; 195
    2b0a:	99 e0       	ldi	r25, 0x09	; 9
    2b0c:	31 50       	subi	r19, 0x01	; 1
    2b0e:	80 40       	sbci	r24, 0x00	; 0
    2b10:	90 40       	sbci	r25, 0x00	; 0
    2b12:	e1 f7       	brne	.-8      	; 0x2b0c <loop+0xcf0>
    2b14:	00 c0       	rjmp	.+0      	; 0x2b16 <loop+0xcfa>
    2b16:	00 00       	nop
            _delay_ms(200);
            Serial.println("PostErogazioneGAC - OK" );   
    2b18:	66 e3       	ldi	r22, 0x36	; 54
    2b1a:	77 e0       	ldi	r23, 0x07	; 7
    2b1c:	80 e1       	ldi	r24, 0x10	; 16
    2b1e:	9d e0       	ldi	r25, 0x0D	; 13
    2b20:	0e 94 1c 39 	call	0x7238	; 0x7238 <_ZN5Print7printlnEPKc>
            Serial.println("Tento la ritrasmisssione di erogazioni salvate non trasmesse" );             
    2b24:	6d e4       	ldi	r22, 0x4D	; 77
    2b26:	77 e0       	ldi	r23, 0x07	; 7
    2b28:	80 e1       	ldi	r24, 0x10	; 16
    2b2a:	9d e0       	ldi	r25, 0x0D	; 13
    2b2c:	0e 94 1c 39 	call	0x7238	; 0x7238 <_ZN5Print7printlnEPKc>
    2b30:	8f e3       	ldi	r24, 0x3F	; 63
    2b32:	9f e1       	ldi	r25, 0x1F	; 31
    2b34:	01 97       	sbiw	r24, 0x01	; 1
    2b36:	f1 f7       	brne	.-4      	; 0x2b34 <loop+0xd18>
    2b38:	00 c0       	rjmp	.+0      	; 0x2b3a <loop+0xd1e>
    2b3a:	00 00       	nop
            _delay_ms(2);
            enable_ETH();
    2b3c:	0e 94 93 01 	call	0x326	; 0x326 <_ZL10enable_ETHv>
    2b40:	8f e3       	ldi	r24, 0x3F	; 63
    2b42:	9f e1       	ldi	r25, 0x1F	; 31
    2b44:	01 97       	sbiw	r24, 0x01	; 1
    2b46:	f1 f7       	brne	.-4      	; 0x2b44 <loop+0xd28>
    2b48:	00 c0       	rjmp	.+0      	; 0x2b4a <loop+0xd2e>
    2b4a:	00 00       	nop
            _delay_ms(2);
            avanzaStato(60);                                
    2b4c:	6c e3       	ldi	r22, 0x3C	; 60
    2b4e:	70 e0       	ldi	r23, 0x00	; 0
    2b50:	80 e0       	ldi	r24, 0x00	; 0
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	5b c3       	rjmp	.+1718   	; 0x320c <loop+0x13f0>
          }
          else
          {
             disable_ETH();   
    2b56:	0e 94 95 01 	call	0x32a	; 0x32a <_ZL11disable_ETHv>
             String ultima_indirizzo  = read_eeprom_string(4,1035);
    2b5a:	4b e0       	ldi	r20, 0x0B	; 11
    2b5c:	54 e0       	ldi	r21, 0x04	; 4
    2b5e:	64 e0       	ldi	r22, 0x04	; 4
    2b60:	70 e0       	ldi	r23, 0x00	; 0
    2b62:	ce 01       	movw	r24, r28
    2b64:	4f 96       	adiw	r24, 0x1f	; 31
    2b66:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <_Z18read_eeprom_stringii>
             int indirizzo = ultima_indirizzo.toInt();
    2b6a:	ce 01       	movw	r24, r28
    2b6c:	4f 96       	adiw	r24, 0x1f	; 31
    2b6e:	0e 94 a8 3e 	call	0x7d50	; 0x7d50 <_ZNK6String5toIntEv>
    2b72:	6b 01       	movw	r12, r22
            // bool write_eeprom_string(String erog,int lunBuffer,int start_ind)
            if (write_eeprom_string(Messaggio,Messaggio.length(),indirizzo))
    2b74:	7c 01       	movw	r14, r24
    2b76:	00 91 ed 0a 	lds	r16, 0x0AED	; 0x800aed <Messaggio+0x4>
    2b7a:	10 91 ee 0a 	lds	r17, 0x0AEE	; 0x800aee <Messaggio+0x5>
    2b7e:	69 ee       	ldi	r22, 0xE9	; 233
    2b80:	7a e0       	ldi	r23, 0x0A	; 10
    2b82:	ce 01       	movw	r24, r28
    2b84:	01 96       	adiw	r24, 0x01	; 1
    2b86:	0e 94 23 3c 	call	0x7846	; 0x7846 <_ZN6StringC1ERKS_>
    2b8a:	a6 01       	movw	r20, r12
    2b8c:	b8 01       	movw	r22, r16
    2b8e:	ce 01       	movw	r24, r28
    2b90:	01 96       	adiw	r24, 0x01	; 1
    2b92:	4f d8       	rcall	.-3938   	; 0x1c32 <_Z19write_eeprom_string6Stringii>
    2b94:	18 2f       	mov	r17, r24
    2b96:	ce 01       	movw	r24, r28
    2b98:	01 96       	adiw	r24, 0x01	; 1
    2b9a:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
    2b9e:	11 23       	and	r17, r17
    2ba0:	09 f4       	brne	.+2      	; 0x2ba4 <loop+0xd88>
    2ba2:	e6 c0       	rjmp	.+460    	; 0x2d70 <loop+0xf54>
              {
                Serial.println("WRITE OK AT address :" + String(indirizzo));
    2ba4:	4a e0       	ldi	r20, 0x0A	; 10
    2ba6:	b6 01       	movw	r22, r12
    2ba8:	ce 01       	movw	r24, r28
    2baa:	0f 96       	adiw	r24, 0x0f	; 15
    2bac:	0e 94 8d 3c 	call	0x791a	; 0x791a <_ZN6StringC1Eih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2bb0:	6a e8       	ldi	r22, 0x8A	; 138
    2bb2:	77 e0       	ldi	r23, 0x07	; 7
    2bb4:	ce 01       	movw	r24, r28
    2bb6:	01 96       	adiw	r24, 0x01	; 1
    2bb8:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
    2bbc:	be 01       	movw	r22, r28
    2bbe:	61 5f       	subi	r22, 0xF1	; 241
    2bc0:	7f 4f       	sbci	r23, 0xFF	; 255
    2bc2:	ce 01       	movw	r24, r28
    2bc4:	01 96       	adiw	r24, 0x01	; 1
    2bc6:	0e 94 8c 3d 	call	0x7b18	; 0x7b18 <_ZplRK15StringSumHelperRK6String>
    2bca:	bc 01       	movw	r22, r24
    2bcc:	80 e1       	ldi	r24, 0x10	; 16
    2bce:	9d e0       	ldi	r25, 0x0D	; 13
    2bd0:	0e 94 0c 39 	call	0x7218	; 0x7218 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2bd4:	ce 01       	movw	r24, r28
    2bd6:	01 96       	adiw	r24, 0x01	; 1
    2bd8:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
    2bdc:	ce 01       	movw	r24, r28
    2bde:	0f 96       	adiw	r24, 0x0f	; 15
    2be0:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
                indirizzo = indirizzo + 50;  
    2be4:	92 e3       	ldi	r25, 0x32	; 50
    2be6:	c9 0e       	add	r12, r25
    2be8:	d1 1c       	adc	r13, r1
                if (indirizzo > 3000) {indirizzo = 2000; }   
    2bea:	29 eb       	ldi	r18, 0xB9	; 185
    2bec:	c2 16       	cp	r12, r18
    2bee:	2b e0       	ldi	r18, 0x0B	; 11
    2bf0:	d2 06       	cpc	r13, r18
    2bf2:	24 f0       	brlt	.+8      	; 0x2bfc <loop+0xde0>
    2bf4:	80 ed       	ldi	r24, 0xD0	; 208
    2bf6:	c8 2e       	mov	r12, r24
    2bf8:	87 e0       	ldi	r24, 0x07	; 7
    2bfa:	d8 2e       	mov	r13, r24
                String update_ultima_indirizzo = String(indirizzo);
    2bfc:	4a e0       	ldi	r20, 0x0A	; 10
    2bfe:	b6 01       	movw	r22, r12
    2c00:	ce 01       	movw	r24, r28
    2c02:	47 96       	adiw	r24, 0x17	; 23
    2c04:	0e 94 8d 3c 	call	0x791a	; 0x791a <_ZN6StringC1Eih>
                if (write_eeprom_string(update_ultima_indirizzo,update_ultima_indirizzo.length(),1035))
    2c08:	0b 8d       	ldd	r16, Y+27	; 0x1b
    2c0a:	1c 8d       	ldd	r17, Y+28	; 0x1c
    2c0c:	be 01       	movw	r22, r28
    2c0e:	69 5e       	subi	r22, 0xE9	; 233
    2c10:	7f 4f       	sbci	r23, 0xFF	; 255
    2c12:	ce 01       	movw	r24, r28
    2c14:	01 96       	adiw	r24, 0x01	; 1
    2c16:	0e 94 23 3c 	call	0x7846	; 0x7846 <_ZN6StringC1ERKS_>
    2c1a:	4b e0       	ldi	r20, 0x0B	; 11
    2c1c:	54 e0       	ldi	r21, 0x04	; 4
    2c1e:	b8 01       	movw	r22, r16
    2c20:	ce 01       	movw	r24, r28
    2c22:	01 96       	adiw	r24, 0x01	; 1
    2c24:	06 d8       	rcall	.-4084   	; 0x1c32 <_Z19write_eeprom_string6Stringii>
    2c26:	18 2f       	mov	r17, r24
    2c28:	ce 01       	movw	r24, r28
    2c2a:	01 96       	adiw	r24, 0x01	; 1
    2c2c:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
    2c30:	11 23       	and	r17, r17
    2c32:	01 f1       	breq	.+64     	; 0x2c74 <loop+0xe58>
                  Serial.println("UPDATE OK address :" + String(indirizzo));  
    2c34:	4a e0       	ldi	r20, 0x0A	; 10
    2c36:	b6 01       	movw	r22, r12
    2c38:	ce 01       	movw	r24, r28
    2c3a:	0f 96       	adiw	r24, 0x0f	; 15
    2c3c:	0e 94 8d 3c 	call	0x791a	; 0x791a <_ZN6StringC1Eih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2c40:	60 ea       	ldi	r22, 0xA0	; 160
    2c42:	77 e0       	ldi	r23, 0x07	; 7
    2c44:	ce 01       	movw	r24, r28
    2c46:	01 96       	adiw	r24, 0x01	; 1
    2c48:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
    2c4c:	be 01       	movw	r22, r28
    2c4e:	61 5f       	subi	r22, 0xF1	; 241
    2c50:	7f 4f       	sbci	r23, 0xFF	; 255
    2c52:	ce 01       	movw	r24, r28
    2c54:	01 96       	adiw	r24, 0x01	; 1
    2c56:	0e 94 8c 3d 	call	0x7b18	; 0x7b18 <_ZplRK15StringSumHelperRK6String>
    2c5a:	bc 01       	movw	r22, r24
    2c5c:	80 e1       	ldi	r24, 0x10	; 16
    2c5e:	9d e0       	ldi	r25, 0x0D	; 13
    2c60:	0e 94 0c 39 	call	0x7218	; 0x7218 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2c64:	ce 01       	movw	r24, r28
    2c66:	01 96       	adiw	r24, 0x01	; 1
    2c68:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
    2c6c:	ce 01       	movw	r24, r28
    2c6e:	0f 96       	adiw	r24, 0x0f	; 15
    2c70:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
            if (write_eeprom_string(Messaggio,Messaggio.length(),indirizzo))
              {
                Serial.println("WRITE OK AT address :" + String(indirizzo));
                indirizzo = indirizzo + 50;  
                if (indirizzo > 3000) {indirizzo = 2000; }   
                String update_ultima_indirizzo = String(indirizzo);
    2c74:	ce 01       	movw	r24, r28
    2c76:	47 96       	adiw	r24, 0x17	; 23
    2c78:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
    2c7c:	79 c0       	rjmp	.+242    	; 0x2d70 <loop+0xf54>
        }
      }
      break;
    case 10:
      {
             String str_indirizzo  = read_eeprom_string(4,1035);
    2c7e:	4b e0       	ldi	r20, 0x0B	; 11
    2c80:	54 e0       	ldi	r21, 0x04	; 4
    2c82:	64 e0       	ldi	r22, 0x04	; 4
    2c84:	70 e0       	ldi	r23, 0x00	; 0
    2c86:	ce 01       	movw	r24, r28
    2c88:	4f 96       	adiw	r24, 0x1f	; 31
    2c8a:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <_Z18read_eeprom_stringii>
             int ultimo_indirizzo = (str_indirizzo.toInt());
    2c8e:	ce 01       	movw	r24, r28
    2c90:	4f 96       	adiw	r24, 0x1f	; 31
    2c92:	0e 94 a8 3e 	call	0x7d50	; 0x7d50 <_ZNK6String5toIntEv>
    2c96:	7b 01       	movw	r14, r22
             int start = 2000;
    2c98:	00 ed       	ldi	r16, 0xD0	; 208
    2c9a:	17 e0       	ldi	r17, 0x07	; 7
             bool tx = false;
             
             while ((start < ultimo_indirizzo))
    2c9c:	0e 15       	cp	r16, r14
    2c9e:	1f 05       	cpc	r17, r15
    2ca0:	0c f0       	brlt	.+2      	; 0x2ca4 <loop+0xe88>
    2ca2:	4b c0       	rjmp	.+150    	; 0x2d3a <loop+0xf1e>
             {
               String e  = read_eeprom_string(50,start);
    2ca4:	a8 01       	movw	r20, r16
    2ca6:	62 e3       	ldi	r22, 0x32	; 50
    2ca8:	70 e0       	ldi	r23, 0x00	; 0
    2caa:	ce 01       	movw	r24, r28
    2cac:	47 96       	adiw	r24, 0x17	; 23
    2cae:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <_Z18read_eeprom_stringii>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2cb2:	64 eb       	ldi	r22, 0xB4	; 180
    2cb4:	77 e0       	ldi	r23, 0x07	; 7
    2cb6:	ce 01       	movw	r24, r28
    2cb8:	01 96       	adiw	r24, 0x01	; 1
    2cba:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
               Serial.println("DA TRASMETTERE: " + e);
    2cbe:	be 01       	movw	r22, r28
    2cc0:	69 5e       	subi	r22, 0xE9	; 233
    2cc2:	7f 4f       	sbci	r23, 0xFF	; 255
    2cc4:	ce 01       	movw	r24, r28
    2cc6:	01 96       	adiw	r24, 0x01	; 1
    2cc8:	0e 94 8c 3d 	call	0x7b18	; 0x7b18 <_ZplRK15StringSumHelperRK6String>
    2ccc:	bc 01       	movw	r22, r24
    2cce:	80 e1       	ldi	r24, 0x10	; 16
    2cd0:	9d e0       	ldi	r25, 0x0D	; 13
    2cd2:	0e 94 0c 39 	call	0x7218	; 0x7218 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2cd6:	ce 01       	movw	r24, r28
    2cd8:	01 96       	adiw	r24, 0x01	; 1
    2cda:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
               tx = PostErogazioneGAC(80, serverREST, clientLOCAL, e);
    2cde:	be 01       	movw	r22, r28
    2ce0:	69 5e       	subi	r22, 0xE9	; 233
    2ce2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ce4:	ce 01       	movw	r24, r28
    2ce6:	0f 96       	adiw	r24, 0x0f	; 15
    2ce8:	0e 94 23 3c 	call	0x7846	; 0x7846 <_ZN6StringC1ERKS_>
    2cec:	6c ea       	ldi	r22, 0xAC	; 172
    2cee:	7a e0       	ldi	r23, 0x0A	; 10
    2cf0:	ce 01       	movw	r24, r28
    2cf2:	01 96       	adiw	r24, 0x01	; 1
    2cf4:	6f d8       	rcall	.-3874   	; 0x1dd4 <_ZN14EthernetClientC1ERKS_>
    2cf6:	9e 01       	movw	r18, r28
    2cf8:	21 5f       	subi	r18, 0xF1	; 241
    2cfa:	3f 4f       	sbci	r19, 0xFF	; 255
    2cfc:	ae 01       	movw	r20, r28
    2cfe:	4f 5f       	subi	r20, 0xFF	; 255
    2d00:	5f 4f       	sbci	r21, 0xFF	; 255
    2d02:	64 e3       	ldi	r22, 0x34	; 52
    2d04:	71 e0       	ldi	r23, 0x01	; 1
    2d06:	80 e5       	ldi	r24, 0x50	; 80
    2d08:	90 e0       	ldi	r25, 0x00	; 0
    2d0a:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <_Z17PostErogazioneGACiPc14EthernetClient6String>
    2d0e:	ce 01       	movw	r24, r28
    2d10:	0f 96       	adiw	r24, 0x0f	; 15
    2d12:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
               start = start + 50;    
    2d16:	0e 5c       	subi	r16, 0xCE	; 206
    2d18:	1f 4f       	sbci	r17, 0xFF	; 255
    2d1a:	3f ef       	ldi	r19, 0xFF	; 255
    2d1c:	83 ec       	ldi	r24, 0xC3	; 195
    2d1e:	99 e0       	ldi	r25, 0x09	; 9
    2d20:	31 50       	subi	r19, 0x01	; 1
    2d22:	80 40       	sbci	r24, 0x00	; 0
    2d24:	90 40       	sbci	r25, 0x00	; 0
    2d26:	e1 f7       	brne	.-8      	; 0x2d20 <loop+0xf04>
    2d28:	00 c0       	rjmp	.+0      	; 0x2d2a <loop+0xf0e>
    2d2a:	00 00       	nop
                _delay_ms(200); // Attendo un pochino tra un atrasmissione e l'altra           
               printLine();                
    2d2c:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
             int start = 2000;
             bool tx = false;
             
             while ((start < ultimo_indirizzo))
             {
               String e  = read_eeprom_string(50,start);
    2d30:	ce 01       	movw	r24, r28
    2d32:	47 96       	adiw	r24, 0x17	; 23
    2d34:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
             String str_indirizzo  = read_eeprom_string(4,1035);
             int ultimo_indirizzo = (str_indirizzo.toInt());
             int start = 2000;
             bool tx = false;
             
             while ((start < ultimo_indirizzo))
    2d38:	b1 cf       	rjmp	.-158    	; 0x2c9c <loop+0xe80>
               start = start + 50;    
                _delay_ms(200); // Attendo un pochino tra un atrasmissione e l'altra           
               printLine();                
             }
             
             if (start >  2000){
    2d3a:	01 3d       	cpi	r16, 0xD1	; 209
    2d3c:	27 e0       	ldi	r18, 0x07	; 7
    2d3e:	12 07       	cpc	r17, r18
    2d40:	bc f0       	brlt	.+46     	; 0x2d70 <loop+0xf54>
                write_eeprom_string("2000",4,1035);
    2d42:	65 ec       	ldi	r22, 0xC5	; 197
    2d44:	77 e0       	ldi	r23, 0x07	; 7
    2d46:	ce 01       	movw	r24, r28
    2d48:	01 96       	adiw	r24, 0x01	; 1
    2d4a:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
    2d4e:	4b e0       	ldi	r20, 0x0B	; 11
    2d50:	54 e0       	ldi	r21, 0x04	; 4
    2d52:	64 e0       	ldi	r22, 0x04	; 4
    2d54:	70 e0       	ldi	r23, 0x00	; 0
    2d56:	ce 01       	movw	r24, r28
    2d58:	01 96       	adiw	r24, 0x01	; 1
    2d5a:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <_Z19write_eeprom_string6Stringii>
    2d5e:	ce 01       	movw	r24, r28
    2d60:	01 96       	adiw	r24, 0x01	; 1
    2d62:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
                clearEEPROM(2000,start);
    2d66:	b8 01       	movw	r22, r16
    2d68:	80 ed       	ldi	r24, 0xD0	; 208
    2d6a:	97 e0       	ldi	r25, 0x07	; 7
    2d6c:	0e 94 46 02 	call	0x48c	; 0x48c <_Z11clearEEPROMii>
              }              
        Azzera();
    2d70:	0e 94 46 0a 	call	0x148c	; 0x148c <_Z6Azzerav>
        }
      }
      break;
    case 10:
      {
             String str_indirizzo  = read_eeprom_string(4,1035);
    2d74:	ce 01       	movw	r24, r28
    2d76:	4f 96       	adiw	r24, 0x1f	; 31
    2d78:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
      {
      }
      break;
  }

  nowTimer = DS3231M.now();
    2d7c:	63 e9       	ldi	r22, 0x93	; 147
    2d7e:	7a e0       	ldi	r23, 0x0A	; 10
    2d80:	ce 01       	movw	r24, r28
    2d82:	01 96       	adiw	r24, 0x01	; 1
    2d84:	0e 94 a3 23 	call	0x4746	; 0x4746 <_ZN13DS3231M_Class3nowEv>
    2d88:	86 e0       	ldi	r24, 0x06	; 6
    2d8a:	fe 01       	movw	r30, r28
    2d8c:	31 96       	adiw	r30, 0x01	; 1
    2d8e:	a1 e8       	ldi	r26, 0x81	; 129
    2d90:	ba e0       	ldi	r27, 0x0A	; 10
    2d92:	01 90       	ld	r0, Z+
    2d94:	0d 92       	st	X+, r0
    2d96:	8a 95       	dec	r24
    2d98:	e1 f7       	brne	.-8      	; 0x2d92 <loop+0xf76>
  secs = nowTimer.secondstime();  
    2d9a:	81 e8       	ldi	r24, 0x81	; 129
    2d9c:	9a e0       	ldi	r25, 0x0A	; 10
    2d9e:	0e 94 f4 22 	call	0x45e8	; 0x45e8 <_ZNK8DateTime11secondstimeEv>
    2da2:	60 93 8f 0a 	sts	0x0A8F, r22	; 0x800a8f <secs>
    2da6:	70 93 90 0a 	sts	0x0A90, r23	; 0x800a90 <secs+0x1>
    2daa:	80 93 91 0a 	sts	0x0A91, r24	; 0x800a91 <secs+0x2>
    2dae:	90 93 92 0a 	sts	0x0A92, r25	; 0x800a92 <secs+0x3>
  if (((UltimoPassaggioStato + Timer - secs) <= 1) && (stato_procedura != 6)) Azzera();
    2db2:	00 91 8b 0a 	lds	r16, 0x0A8B	; 0x800a8b <UltimoPassaggioStato>
    2db6:	10 91 8c 0a 	lds	r17, 0x0A8C	; 0x800a8c <UltimoPassaggioStato+0x1>
    2dba:	20 91 8d 0a 	lds	r18, 0x0A8D	; 0x800a8d <UltimoPassaggioStato+0x2>
    2dbe:	30 91 8e 0a 	lds	r19, 0x0A8E	; 0x800a8e <UltimoPassaggioStato+0x3>
    2dc2:	c0 90 87 0a 	lds	r12, 0x0A87	; 0x800a87 <Timer>
    2dc6:	d0 90 88 0a 	lds	r13, 0x0A88	; 0x800a88 <Timer+0x1>
    2dca:	e0 90 89 0a 	lds	r14, 0x0A89	; 0x800a89 <Timer+0x2>
    2dce:	f0 90 8a 0a 	lds	r15, 0x0A8A	; 0x800a8a <Timer+0x3>
    2dd2:	0c 0d       	add	r16, r12
    2dd4:	1d 1d       	adc	r17, r13
    2dd6:	2e 1d       	adc	r18, r14
    2dd8:	3f 1d       	adc	r19, r15
    2dda:	68 01       	movw	r12, r16
    2ddc:	79 01       	movw	r14, r18
    2dde:	c6 1a       	sub	r12, r22
    2de0:	d7 0a       	sbc	r13, r23
    2de2:	e8 0a       	sbc	r14, r24
    2de4:	f9 0a       	sbc	r15, r25
    2de6:	d7 01       	movw	r26, r14
    2de8:	c6 01       	movw	r24, r12
    2dea:	02 97       	sbiw	r24, 0x02	; 2
    2dec:	a1 05       	cpc	r26, r1
    2dee:	b1 05       	cpc	r27, r1
    2df0:	08 f0       	brcs	.+2      	; 0x2df4 <loop+0xfd8>
    2df2:	0f c2       	rjmp	.+1054   	; 0x3212 <loop+0x13f6>
    2df4:	80 91 22 0b 	lds	r24, 0x0B22	; 0x800b22 <stato_procedura>
    2df8:	90 91 23 0b 	lds	r25, 0x0B23	; 0x800b23 <stato_procedura+0x1>
    2dfc:	06 97       	sbiw	r24, 0x06	; 6
    2dfe:	19 f0       	breq	.+6      	; 0x2e06 <loop+0xfea>
    2e00:	0e 94 46 0a 	call	0x148c	; 0x148c <_Z6Azzerav>
    2e04:	06 c2       	rjmp	.+1036   	; 0x3212 <loop+0x13f6>
  else if (((UltimoPassaggioStato + Timer - secs) <= 1) && (stato_procedura == 6)) avanzaStato(30);
    2e06:	6e e1       	ldi	r22, 0x1E	; 30
    2e08:	70 e0       	ldi	r23, 0x00	; 0
    2e0a:	80 e0       	ldi	r24, 0x00	; 0
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	0e 94 b6 03 	call	0x76c	; 0x76c <_Z11avanzaStatom>
}
    2e12:	ff c1       	rjmp	.+1022   	; 0x3212 <loop+0x13f6>
          Buzzer(2, 100);
        }

        if ((ATe != "ERRORE") && (BIT_IS_CLEAR(PORTC, 4)))
        {
          Serial.println("");
    2e14:	6a ee       	ldi	r22, 0xEA	; 234
    2e16:	71 e0       	ldi	r23, 0x01	; 1
    2e18:	80 e1       	ldi	r24, 0x10	; 16
    2e1a:	9d e0       	ldi	r25, 0x0D	; 13
    2e1c:	0e 94 1c 39 	call	0x7238	; 0x7238 <_ZN5Print7printlnEPKc>
          Serial.print("***************************************************************");
    2e20:	6a ec       	ldi	r22, 0xCA	; 202
    2e22:	77 e0       	ldi	r23, 0x07	; 7
    2e24:	80 e1       	ldi	r24, 0x10	; 16
    2e26:	9d e0       	ldi	r25, 0x0D	; 13
    2e28:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN5Print5printEPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2e2c:	6a e0       	ldi	r22, 0x0A	; 10
    2e2e:	78 e0       	ldi	r23, 0x08	; 8
    2e30:	ce 01       	movw	r24, r28
    2e32:	01 96       	adiw	r24, 0x01	; 1
    2e34:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
          Serial.println(" Tessera ID : " + ATe);
    2e38:	be 01       	movw	r22, r28
    2e3a:	69 5e       	subi	r22, 0xE9	; 233
    2e3c:	7f 4f       	sbci	r23, 0xFF	; 255
    2e3e:	ce 01       	movw	r24, r28
    2e40:	01 96       	adiw	r24, 0x01	; 1
    2e42:	0e 94 8c 3d 	call	0x7b18	; 0x7b18 <_ZplRK15StringSumHelperRK6String>
    2e46:	bc 01       	movw	r22, r24
    2e48:	80 e1       	ldi	r24, 0x10	; 16
    2e4a:	9d e0       	ldi	r25, 0x0D	; 13
    2e4c:	0e 94 0c 39 	call	0x7218	; 0x7218 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2e50:	ce 01       	movw	r24, r28
    2e52:	01 96       	adiw	r24, 0x01	; 1
    2e54:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
          Serial.print("***************************************************************");
    2e58:	6a ec       	ldi	r22, 0xCA	; 202
    2e5a:	77 e0       	ldi	r23, 0x07	; 7
    2e5c:	80 e1       	ldi	r24, 0x10	; 16
    2e5e:	9d e0       	ldi	r25, 0x0D	; 13
    2e60:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN5Print5printEPKc>
          Serial.println("Riconoscimento Tessera .............");
    2e64:	69 e1       	ldi	r22, 0x19	; 25
    2e66:	78 e0       	ldi	r23, 0x08	; 8
    2e68:	80 e1       	ldi	r24, 0x10	; 16
    2e6a:	9d e0       	ldi	r25, 0x0D	; 13
    2e6c:	0e 94 1c 39 	call	0x7238	; 0x7238 <_ZN5Print7printlnEPKc>

           RaccoltaDati[0] = ATe;
    2e70:	be 01       	movw	r22, r28
    2e72:	69 5e       	subi	r22, 0xE9	; 233
    2e74:	7f 4f       	sbci	r23, 0xFF	; 255
    2e76:	85 ef       	ldi	r24, 0xF5	; 245
    2e78:	9a e0       	ldi	r25, 0x0A	; 10
    2e7a:	0e 94 0e 3c 	call	0x781c	; 0x781c <_ZN6StringaSERKS_>
          // RaccoltaDati[0] = "DD92743A";
          // RaccoltaDati[5] = "000";

          lcd.backlight();
    2e7e:	89 e4       	ldi	r24, 0x49	; 73
    2e80:	9b e0       	ldi	r25, 0x0B	; 11
    2e82:	0e 94 49 30 	call	0x6092	; 0x6092 <_ZN3LCD9backlightEv>
          lcd.display();
    2e86:	89 e4       	ldi	r24, 0x49	; 73
    2e88:	9b e0       	ldi	r25, 0x0B	; 11
    2e8a:	0e 94 af 30 	call	0x615e	; 0x615e <_ZN3LCD7displayEv>
    2e8e:	8f e3       	ldi	r24, 0x3F	; 63
    2e90:	9c e9       	ldi	r25, 0x9C	; 156
    2e92:	01 97       	sbiw	r24, 0x01	; 1
    2e94:	f1 f7       	brne	.-4      	; 0x2e92 <loop+0x1076>
    2e96:	00 c0       	rjmp	.+0      	; 0x2e98 <loop+0x107c>
    2e98:	00 00       	nop
          _delay_ms(10);

          righeDisplay[1] = "  RICONOSCIMENTO ";
    2e9a:	6e e3       	ldi	r22, 0x3E	; 62
    2e9c:	78 e0       	ldi	r23, 0x08	; 8
    2e9e:	87 ed       	ldi	r24, 0xD7	; 215
    2ea0:	9a e0       	ldi	r25, 0x0A	; 10
    2ea2:	0e 94 36 3c 	call	0x786c	; 0x786c <_ZN6StringaSEPKc>
          righeDisplay[2] = ".....In Corso.....";
    2ea6:	60 e5       	ldi	r22, 0x50	; 80
    2ea8:	78 e0       	ldi	r23, 0x08	; 8
    2eaa:	8d ed       	ldi	r24, 0xDD	; 221
    2eac:	9a e0       	ldi	r25, 0x0A	; 10
    2eae:	0e 94 36 3c 	call	0x786c	; 0x786c <_ZN6StringaSEPKc>
          //righeDisplay[3] = "   Rfid: " + ATe;
          righeDisplay[3] = "Attendere.........";
    2eb2:	63 e6       	ldi	r22, 0x63	; 99
    2eb4:	78 e0       	ldi	r23, 0x08	; 8
    2eb6:	83 ee       	ldi	r24, 0xE3	; 227
    2eb8:	9a e0       	ldi	r25, 0x0A	; 10
    2eba:	0e 94 36 3c 	call	0x786c	; 0x786c <_ZN6StringaSEPKc>
          displayLCD(righeDisplay, stato_procedura, 100);
    2ebe:	60 91 22 0b 	lds	r22, 0x0B22	; 0x800b22 <stato_procedura>
    2ec2:	70 91 23 0b 	lds	r23, 0x0B23	; 0x800b23 <stato_procedura+0x1>
    2ec6:	44 e6       	ldi	r20, 0x64	; 100
    2ec8:	50 e0       	ldi	r21, 0x00	; 0
    2eca:	81 ed       	ldi	r24, 0xD1	; 209
    2ecc:	9a e0       	ldi	r25, 0x0A	; 10
    2ece:	0e 94 81 03 	call	0x702	; 0x702 <_Z10displayLCDP6Stringii>
          InizializzaEthernet();
    2ed2:	0e 94 97 01 	call	0x32e	; 0x32e <_Z19InizializzaEthernetv>
    2ed6:	9f ef       	ldi	r25, 0xFF	; 255
    2ed8:	23 ed       	ldi	r18, 0xD3	; 211
    2eda:	30 e3       	ldi	r19, 0x30	; 48
    2edc:	91 50       	subi	r25, 0x01	; 1
    2ede:	20 40       	sbci	r18, 0x00	; 0
    2ee0:	30 40       	sbci	r19, 0x00	; 0
    2ee2:	e1 f7       	brne	.-8      	; 0x2edc <loop+0x10c0>
    2ee4:	00 c0       	rjmp	.+0      	; 0x2ee6 <loop+0x10ca>
    2ee6:	00 00       	nop
    2ee8:	d5 c8       	rjmp	.-3670   	; 0x2094 <loop+0x278>

          Serial.println("TIPO CARBURANTE: " + mezzo.Carb);
          Serial.println("TARGA: " + mezzo.TARGA);

          if ((mezzo.Carb == "B") || (mezzo.Carb == "D")) {
            RaccoltaDati[1] = mezzo.TARGA;
    2eea:	61 e7       	ldi	r22, 0x71	; 113
    2eec:	7b e0       	ldi	r23, 0x0B	; 11
    2eee:	8b ef       	ldi	r24, 0xFB	; 251
    2ef0:	9a e0       	ldi	r25, 0x0A	; 10
    2ef2:	0e 94 0e 3c 	call	0x781c	; 0x781c <_ZN6StringaSERKS_>
            RaccoltaDati[2] = mezzo.Carb;
    2ef6:	6b e6       	ldi	r22, 0x6B	; 107
    2ef8:	7b e0       	ldi	r23, 0x0B	; 11
    2efa:	81 e0       	ldi	r24, 0x01	; 1
    2efc:	9b e0       	ldi	r25, 0x0B	; 11
    2efe:	0e 94 0e 3c 	call	0x781c	; 0x781c <_ZN6StringaSERKS_>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2f02:	6e ee       	ldi	r22, 0xEE	; 238
    2f04:	76 e0       	ldi	r23, 0x06	; 6
    2f06:	ce 01       	movw	r24, r28
    2f08:	01 96       	adiw	r24, 0x01	; 1
    2f0a:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
            righeDisplay[3] = "TARGA: " +  mezzo.TARGA;
    2f0e:	61 e7       	ldi	r22, 0x71	; 113
    2f10:	7b e0       	ldi	r23, 0x0B	; 11
    2f12:	ce 01       	movw	r24, r28
    2f14:	01 96       	adiw	r24, 0x01	; 1
    2f16:	0e 94 8c 3d 	call	0x7b18	; 0x7b18 <_ZplRK15StringSumHelperRK6String>
    2f1a:	bc 01       	movw	r22, r24
    2f1c:	83 ee       	ldi	r24, 0xE3	; 227
    2f1e:	9a e0       	ldi	r25, 0x0A	; 10
    2f20:	0e 94 0e 3c 	call	0x781c	; 0x781c <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2f24:	ce 01       	movw	r24, r28
    2f26:	01 96       	adiw	r24, 0x01	; 1
    2f28:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
    2f2c:	8f ef       	ldi	r24, 0xFF	; 255
    2f2e:	99 e6       	ldi	r25, 0x69	; 105
    2f30:	28 e1       	ldi	r18, 0x18	; 24
    2f32:	81 50       	subi	r24, 0x01	; 1
    2f34:	90 40       	sbci	r25, 0x00	; 0
    2f36:	20 40       	sbci	r18, 0x00	; 0
    2f38:	e1 f7       	brne	.-8      	; 0x2f32 <loop+0x1116>
    2f3a:	00 c0       	rjmp	.+0      	; 0x2f3c <loop+0x1120>
    2f3c:	00 00       	nop
            _delay_ms(500);
            distr_selezionato = 0;
    2f3e:	10 92 1f 0b 	sts	0x0B1F, r1	; 0x800b1f <distr_selezionato>
            avanzaStato(TselDistributore);
    2f42:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <TselDistributore>
    2f46:	70 91 23 01 	lds	r23, 0x0123	; 0x800123 <TselDistributore+0x1>
    2f4a:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <TselDistributore+0x2>
    2f4e:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <TselDistributore+0x3>
    2f52:	0e 94 b6 03 	call	0x76c	; 0x76c <_Z11avanzaStatom>
    2f56:	aa ca       	rjmp	.-2732   	; 0x24ac <loop+0x690>

        // Verifica scelta distributore

        if ((mezzo.Carb == "B") || (distr_selezionato == 2))
        {
          mezzo.Carb = "B";
    2f58:	6d e9       	ldi	r22, 0x9D	; 157
    2f5a:	75 e0       	ldi	r23, 0x05	; 5
    2f5c:	8b e6       	ldi	r24, 0x6B	; 107
    2f5e:	9b e0       	ldi	r25, 0x0B	; 11
    2f60:	0e 94 36 3c 	call	0x786c	; 0x786c <_ZN6StringaSEPKc>
          // abilitaPulser('B');          
          //Rele_Abilitazione2(0, 7); // chiudi relè
          StatoAttuale = "POMPA 2";
    2f64:	6a e0       	ldi	r22, 0x0A	; 10
    2f66:	76 e0       	ldi	r23, 0x06	; 6
    2f68:	8c e2       	ldi	r24, 0x2C	; 44
    2f6a:	9b e0       	ldi	r25, 0x0B	; 11
    2f6c:	0e 94 36 3c 	call	0x786c	; 0x786c <_ZN6StringaSEPKc>
          RaccoltaDati[2] = mezzo.Carb;
    2f70:	6b e6       	ldi	r22, 0x6B	; 107
    2f72:	7b e0       	ldi	r23, 0x0B	; 11
    2f74:	81 e0       	ldi	r24, 0x01	; 1
    2f76:	9b e0       	ldi	r25, 0x0B	; 11
    2f78:	0e 94 0e 3c 	call	0x781c	; 0x781c <_ZN6StringaSERKS_>
          righeDisplay[1] =  "****** KM ******";
    2f7c:	62 e1       	ldi	r22, 0x12	; 18
    2f7e:	76 e0       	ldi	r23, 0x06	; 6
    2f80:	87 ed       	ldi	r24, 0xD7	; 215
    2f82:	9a e0       	ldi	r25, 0x0A	; 10
    2f84:	0e 94 36 3c 	call	0x786c	; 0x786c <_ZN6StringaSEPKc>
          righeDisplay[2] = "KM:";
    2f88:	63 e2       	ldi	r22, 0x23	; 35
    2f8a:	76 e0       	ldi	r23, 0x06	; 6
    2f8c:	8d ed       	ldi	r24, 0xDD	; 221
    2f8e:	9a e0       	ldi	r25, 0x0A	; 10
    2f90:	0e 94 36 3c 	call	0x786c	; 0x786c <_ZN6StringaSEPKc>
          righeDisplay[3] = "#:Conferma";       
    2f94:	67 e2       	ldi	r22, 0x27	; 39
    2f96:	76 e0       	ldi	r23, 0x06	; 6
    2f98:	83 ee       	ldi	r24, 0xE3	; 227
    2f9a:	9a e0       	ldi	r25, 0x0A	; 10
    2f9c:	0e 94 36 3c 	call	0x786c	; 0x786c <_ZN6StringaSEPKc>
    2fa0:	3f ef       	ldi	r19, 0xFF	; 255
    2fa2:	81 ee       	ldi	r24, 0xE1	; 225
    2fa4:	94 e0       	ldi	r25, 0x04	; 4
    2fa6:	31 50       	subi	r19, 0x01	; 1
    2fa8:	80 40       	sbci	r24, 0x00	; 0
    2faa:	90 40       	sbci	r25, 0x00	; 0
    2fac:	e1 f7       	brne	.-8      	; 0x2fa6 <loop+0x118a>
    2fae:	38 c0       	rjmp	.+112    	; 0x3020 <loop+0x1204>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    2fb0:	6b e9       	ldi	r22, 0x9B	; 155
    2fb2:	75 e0       	ldi	r23, 0x05	; 5
    2fb4:	8b e6       	ldi	r24, 0x6B	; 107
    2fb6:	9b e0       	ldi	r25, 0x0B	; 11
    2fb8:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <_ZNK6String6equalsEPKc>
          _delay_ms(100);    
          avanzaStato(TinputKM);
        }
        else if ((mezzo.Carb == "D") || (distr_selezionato == 1))
    2fbc:	81 11       	cpse	r24, r1
    2fbe:	05 c0       	rjmp	.+10     	; 0x2fca <loop+0x11ae>
    2fc0:	80 91 1f 0b 	lds	r24, 0x0B1F	; 0x800b1f <distr_selezionato>
    2fc4:	81 30       	cpi	r24, 0x01	; 1
    2fc6:	09 f0       	breq	.+2      	; 0x2fca <loop+0x11ae>
    2fc8:	d9 ce       	rjmp	.-590    	; 0x2d7c <loop+0xf60>
        {
          mezzo.Carb = "D";
    2fca:	6b e9       	ldi	r22, 0x9B	; 155
    2fcc:	75 e0       	ldi	r23, 0x05	; 5
    2fce:	8b e6       	ldi	r24, 0x6B	; 107
    2fd0:	9b e0       	ldi	r25, 0x0B	; 11
    2fd2:	0e 94 36 3c 	call	0x786c	; 0x786c <_ZN6StringaSEPKc>
          //abilitaPulser('D');          
          //Rele_Abilitazione1(0, 7); // chiudi relè
          StatoAttuale = "POMPA 1";
    2fd6:	6b ef       	ldi	r22, 0xFB	; 251
    2fd8:	75 e0       	ldi	r23, 0x05	; 5
    2fda:	8c e2       	ldi	r24, 0x2C	; 44
    2fdc:	9b e0       	ldi	r25, 0x0B	; 11
    2fde:	0e 94 36 3c 	call	0x786c	; 0x786c <_ZN6StringaSEPKc>
          RaccoltaDati[2] = mezzo.Carb;
    2fe2:	6b e6       	ldi	r22, 0x6B	; 107
    2fe4:	7b e0       	ldi	r23, 0x0B	; 11
    2fe6:	81 e0       	ldi	r24, 0x01	; 1
    2fe8:	9b e0       	ldi	r25, 0x0B	; 11
    2fea:	0e 94 0e 3c 	call	0x781c	; 0x781c <_ZN6StringaSERKS_>
          righeDisplay[1] =  "****** KM ******";
    2fee:	62 e1       	ldi	r22, 0x12	; 18
    2ff0:	76 e0       	ldi	r23, 0x06	; 6
    2ff2:	87 ed       	ldi	r24, 0xD7	; 215
    2ff4:	9a e0       	ldi	r25, 0x0A	; 10
    2ff6:	0e 94 36 3c 	call	0x786c	; 0x786c <_ZN6StringaSEPKc>
          righeDisplay[2] = "KM:";
    2ffa:	63 e2       	ldi	r22, 0x23	; 35
    2ffc:	76 e0       	ldi	r23, 0x06	; 6
    2ffe:	8d ed       	ldi	r24, 0xDD	; 221
    3000:	9a e0       	ldi	r25, 0x0A	; 10
    3002:	0e 94 36 3c 	call	0x786c	; 0x786c <_ZN6StringaSEPKc>
          righeDisplay[3] = "#:Conferma";      
    3006:	67 e2       	ldi	r22, 0x27	; 39
    3008:	76 e0       	ldi	r23, 0x06	; 6
    300a:	83 ee       	ldi	r24, 0xE3	; 227
    300c:	9a e0       	ldi	r25, 0x0A	; 10
    300e:	0e 94 36 3c 	call	0x786c	; 0x786c <_ZN6StringaSEPKc>
    3012:	2f ef       	ldi	r18, 0xFF	; 255
    3014:	31 ee       	ldi	r19, 0xE1	; 225
    3016:	84 e0       	ldi	r24, 0x04	; 4
    3018:	21 50       	subi	r18, 0x01	; 1
    301a:	30 40       	sbci	r19, 0x00	; 0
    301c:	80 40       	sbci	r24, 0x00	; 0
    301e:	e1 f7       	brne	.-8      	; 0x3018 <loop+0x11fc>
    3020:	00 c0       	rjmp	.+0      	; 0x3022 <loop+0x1206>
    3022:	00 00       	nop
          _delay_ms(100);     
          avanzaStato(TinputKM);
    3024:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <TinputKM>
    3028:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <TinputKM+0x1>
    302c:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <TinputKM+0x2>
    3030:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <TinputKM+0x3>
    3034:	eb c0       	rjmp	.+470    	; 0x320c <loop+0x13f0>
		lcd.print((char)1);  // STAMPA LA CLESSIDRA
		lcd.print("Tempo: " + String((UltimoPassaggioStato + Timer - secs - 1)) + " sec ");
		 
		if (testbit(PINA,1) && (mezzo.Carb == "D"))
		{
            righeDisplay[1] = "LITRI : 0.00";
    3036:	66 e7       	ldi	r22, 0x76	; 118
    3038:	78 e0       	ldi	r23, 0x08	; 8
    303a:	87 ed       	ldi	r24, 0xD7	; 215
    303c:	9a e0       	ldi	r25, 0x0A	; 10
    303e:	0e 94 36 3c 	call	0x786c	; 0x786c <_ZN6StringaSEPKc>
 		    righeDisplay[2] = "imp :" + String(impulsi);
    3042:	60 91 20 0b 	lds	r22, 0x0B20	; 0x800b20 <impulsi>
    3046:	70 91 21 0b 	lds	r23, 0x0B21	; 0x800b21 <impulsi+0x1>
    304a:	4a e0       	ldi	r20, 0x0A	; 10
    304c:	ce 01       	movw	r24, r28
    304e:	0f 96       	adiw	r24, 0x0f	; 15
    3050:	0e 94 8d 3c 	call	0x791a	; 0x791a <_ZN6StringC1Eih>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    3054:	68 e0       	ldi	r22, 0x08	; 8
    3056:	77 e0       	ldi	r23, 0x07	; 7
    3058:	ce 01       	movw	r24, r28
    305a:	01 96       	adiw	r24, 0x01	; 1
    305c:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
    3060:	be 01       	movw	r22, r28
    3062:	61 5f       	subi	r22, 0xF1	; 241
    3064:	7f 4f       	sbci	r23, 0xFF	; 255
    3066:	ce 01       	movw	r24, r28
    3068:	01 96       	adiw	r24, 0x01	; 1
    306a:	0e 94 8c 3d 	call	0x7b18	; 0x7b18 <_ZplRK15StringSumHelperRK6String>
    306e:	bc 01       	movw	r22, r24
    3070:	8d ed       	ldi	r24, 0xDD	; 221
    3072:	9a e0       	ldi	r25, 0x0A	; 10
    3074:	0e 94 0e 3c 	call	0x781c	; 0x781c <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    3078:	ce 01       	movw	r24, r28
    307a:	01 96       	adiw	r24, 0x01	; 1
    307c:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
    3080:	ce 01       	movw	r24, r28
    3082:	0f 96       	adiw	r24, 0x0f	; 15
    3084:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    3088:	6e e0       	ldi	r22, 0x0E	; 14
    308a:	77 e0       	ldi	r23, 0x07	; 7
    308c:	ce 01       	movw	r24, r28
    308e:	01 96       	adiw	r24, 0x01	; 1
    3090:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
 			righeDisplay[3] = "Erogazione: " + StatoAttuale;
    3094:	6c e2       	ldi	r22, 0x2C	; 44
    3096:	7b e0       	ldi	r23, 0x0B	; 11
    3098:	ce 01       	movw	r24, r28
    309a:	01 96       	adiw	r24, 0x01	; 1
    309c:	0e 94 8c 3d 	call	0x7b18	; 0x7b18 <_ZplRK15StringSumHelperRK6String>
    30a0:	bc 01       	movw	r22, r24
    30a2:	83 ee       	ldi	r24, 0xE3	; 227
    30a4:	9a e0       	ldi	r25, 0x0A	; 10
    30a6:	0e 94 0e 3c 	call	0x781c	; 0x781c <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    30aa:	ce 01       	movw	r24, r28
    30ac:	01 96       	adiw	r24, 0x01	; 1
    30ae:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
			avanzaStato(TmaxErogazione); 
    30b2:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <TmaxErogazione>
    30b6:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <TmaxErogazione+0x1>
    30ba:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <TmaxErogazione+0x2>
    30be:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <TmaxErogazione+0x3>
    30c2:	0e 94 b6 03 	call	0x76c	; 0x76c <_Z11avanzaStatom>
    30c6:	41 cb       	rjmp	.-2430   	; 0x274a <loop+0x92e>
		
		// CONTATTO PISTOLA BENZINA

		if  (testbit(PINB,1) && (mezzo.Carb == "B"))
		{
             righeDisplay[1] = "LITRI : 0.00";
    30c8:	66 e7       	ldi	r22, 0x76	; 118
    30ca:	78 e0       	ldi	r23, 0x08	; 8
    30cc:	87 ed       	ldi	r24, 0xD7	; 215
    30ce:	9a e0       	ldi	r25, 0x0A	; 10
    30d0:	0e 94 36 3c 	call	0x786c	; 0x786c <_ZN6StringaSEPKc>
             righeDisplay[2] = "imp :" + String(impulsi);
    30d4:	60 91 20 0b 	lds	r22, 0x0B20	; 0x800b20 <impulsi>
    30d8:	70 91 21 0b 	lds	r23, 0x0B21	; 0x800b21 <impulsi+0x1>
    30dc:	4a e0       	ldi	r20, 0x0A	; 10
    30de:	ce 01       	movw	r24, r28
    30e0:	0f 96       	adiw	r24, 0x0f	; 15
    30e2:	0e 94 8d 3c 	call	0x791a	; 0x791a <_ZN6StringC1Eih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    30e6:	68 e0       	ldi	r22, 0x08	; 8
    30e8:	77 e0       	ldi	r23, 0x07	; 7
    30ea:	ce 01       	movw	r24, r28
    30ec:	01 96       	adiw	r24, 0x01	; 1
    30ee:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
    30f2:	be 01       	movw	r22, r28
    30f4:	61 5f       	subi	r22, 0xF1	; 241
    30f6:	7f 4f       	sbci	r23, 0xFF	; 255
    30f8:	ce 01       	movw	r24, r28
    30fa:	01 96       	adiw	r24, 0x01	; 1
    30fc:	0e 94 8c 3d 	call	0x7b18	; 0x7b18 <_ZplRK15StringSumHelperRK6String>
    3100:	bc 01       	movw	r22, r24
    3102:	8d ed       	ldi	r24, 0xDD	; 221
    3104:	9a e0       	ldi	r25, 0x0A	; 10
    3106:	0e 94 0e 3c 	call	0x781c	; 0x781c <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    310a:	ce 01       	movw	r24, r28
    310c:	01 96       	adiw	r24, 0x01	; 1
    310e:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
    3112:	ce 01       	movw	r24, r28
    3114:	0f 96       	adiw	r24, 0x0f	; 15
    3116:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    311a:	6e e0       	ldi	r22, 0x0E	; 14
    311c:	77 e0       	ldi	r23, 0x07	; 7
    311e:	ce 01       	movw	r24, r28
    3120:	01 96       	adiw	r24, 0x01	; 1
    3122:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
             righeDisplay[3] = "Erogazione: " + StatoAttuale;
    3126:	6c e2       	ldi	r22, 0x2C	; 44
    3128:	7b e0       	ldi	r23, 0x0B	; 11
    312a:	ce 01       	movw	r24, r28
    312c:	01 96       	adiw	r24, 0x01	; 1
    312e:	0e 94 8c 3d 	call	0x7b18	; 0x7b18 <_ZplRK15StringSumHelperRK6String>
    3132:	bc 01       	movw	r22, r24
    3134:	83 ee       	ldi	r24, 0xE3	; 227
    3136:	9a e0       	ldi	r25, 0x0A	; 10
    3138:	0e 94 0e 3c 	call	0x781c	; 0x781c <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    313c:	ce 01       	movw	r24, r28
    313e:	01 96       	adiw	r24, 0x01	; 1
    3140:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
             avanzaStato(TmaxErogazione);
    3144:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <TmaxErogazione>
    3148:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <TmaxErogazione+0x1>
    314c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <TmaxErogazione+0x2>
    3150:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <TmaxErogazione+0x3>
    3154:	5b c0       	rjmp	.+182    	; 0x320c <loop+0x13f0>
        // CONTATTO PISTOLA DIESEL

        //if ((PINA & _BV(PA1)) && (mezzo.Carb == "D"))
		if (!testbit(PINA,1) && (mezzo.Carb == "D"))
        {
          RaccoltaDati[3] = String(lt);
    3156:	22 e0       	ldi	r18, 0x02	; 2
    3158:	b7 01       	movw	r22, r14
    315a:	a6 01       	movw	r20, r12
    315c:	ce 01       	movw	r24, r28
    315e:	01 96       	adiw	r24, 0x01	; 1
    3160:	0e 94 0c 3d 	call	0x7a18	; 0x7a18 <_ZN6StringC1Edh>
    3164:	be 01       	movw	r22, r28
    3166:	6f 5f       	subi	r22, 0xFF	; 255
    3168:	7f 4f       	sbci	r23, 0xFF	; 255
    316a:	87 e0       	ldi	r24, 0x07	; 7
    316c:	9b e0       	ldi	r25, 0x0B	; 11
    316e:	0e 94 2b 3c 	call	0x7856	; 0x7856 <_ZN6StringaSEOS_>
    3172:	ce 01       	movw	r24, r28
    3174:	01 96       	adiw	r24, 0x01	; 1
    3176:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
          // RaccoltaDati[3] = "5.50";
          StatoAttuale = "STOP EROGAZIONE";
    317a:	63 e8       	ldi	r22, 0x83	; 131
    317c:	78 e0       	ldi	r23, 0x08	; 8
    317e:	8c e2       	ldi	r24, 0x2C	; 44
    3180:	9b e0       	ldi	r25, 0x0B	; 11
    3182:	0e 94 36 3c 	call	0x786c	; 0x786c <_ZN6StringaSEPKc>
          Rele_Abilitazione2(1, 7); //  apri relè
    3186:	67 e0       	ldi	r22, 0x07	; 7
    3188:	70 e0       	ldi	r23, 0x00	; 0
    318a:	81 e0       	ldi	r24, 0x01	; 1
    318c:	90 e0       	ldi	r25, 0x00	; 0
    318e:	0e 94 ef 09 	call	0x13de	; 0x13de <_Z18Rele_Abilitazione2ii>
          Rele_Abilitazione1(1, 7); //  apri relè
    3192:	67 e0       	ldi	r22, 0x07	; 7
    3194:	70 e0       	ldi	r23, 0x00	; 0
    3196:	81 e0       	ldi	r24, 0x01	; 1
    3198:	90 e0       	ldi	r25, 0x00	; 0
    319a:	0e 94 b4 09 	call	0x1368	; 0x1368 <_Z18Rele_Abilitazione1ii>
          //TOGGLE_BIT(PORTA, 1);
          avanzaStato(TmaxInviodati);
    319e:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <TmaxInviodati>
    31a2:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <TmaxInviodati+0x1>
    31a6:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <TmaxInviodati+0x2>
    31aa:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <TmaxInviodati+0x3>
    31ae:	0e 94 b6 03 	call	0x76c	; 0x76c <_Z11avanzaStatom>
    31b2:	b7 cb       	rjmp	.-2194   	; 0x2922 <loop+0xb06>
        // CONTATTO PISTOLA BENZINA

        //if  ((PINB & _BV(PB1)) && (mezzo.Carb == "B"))
		if (!testbit(PINB,1) && (mezzo.Carb == "B"))
        {
          RaccoltaDati[3] = String(lt);
    31b4:	22 e0       	ldi	r18, 0x02	; 2
    31b6:	b7 01       	movw	r22, r14
    31b8:	a6 01       	movw	r20, r12
    31ba:	ce 01       	movw	r24, r28
    31bc:	01 96       	adiw	r24, 0x01	; 1
    31be:	0e 94 0c 3d 	call	0x7a18	; 0x7a18 <_ZN6StringC1Edh>
    31c2:	be 01       	movw	r22, r28
    31c4:	6f 5f       	subi	r22, 0xFF	; 255
    31c6:	7f 4f       	sbci	r23, 0xFF	; 255
    31c8:	87 e0       	ldi	r24, 0x07	; 7
    31ca:	9b e0       	ldi	r25, 0x0B	; 11
    31cc:	0e 94 2b 3c 	call	0x7856	; 0x7856 <_ZN6StringaSEOS_>
    31d0:	ce 01       	movw	r24, r28
    31d2:	01 96       	adiw	r24, 0x01	; 1
    31d4:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>

          StatoAttuale = "STOP EROGAZIONE";
    31d8:	63 e8       	ldi	r22, 0x83	; 131
    31da:	78 e0       	ldi	r23, 0x08	; 8
    31dc:	8c e2       	ldi	r24, 0x2C	; 44
    31de:	9b e0       	ldi	r25, 0x0B	; 11
    31e0:	0e 94 36 3c 	call	0x786c	; 0x786c <_ZN6StringaSEPKc>
          Rele_Abilitazione2(1, 7); //  apri relè
    31e4:	67 e0       	ldi	r22, 0x07	; 7
    31e6:	70 e0       	ldi	r23, 0x00	; 0
    31e8:	81 e0       	ldi	r24, 0x01	; 1
    31ea:	90 e0       	ldi	r25, 0x00	; 0
    31ec:	0e 94 ef 09 	call	0x13de	; 0x13de <_Z18Rele_Abilitazione2ii>
          Rele_Abilitazione1(1, 7); //  apri relè
    31f0:	67 e0       	ldi	r22, 0x07	; 7
    31f2:	70 e0       	ldi	r23, 0x00	; 0
    31f4:	81 e0       	ldi	r24, 0x01	; 1
    31f6:	90 e0       	ldi	r25, 0x00	; 0
    31f8:	0e 94 b4 09 	call	0x1368	; 0x1368 <_Z18Rele_Abilitazione1ii>
          avanzaStato(TmaxInviodati);
    31fc:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <TmaxInviodati>
    3200:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <TmaxInviodati+0x1>
    3204:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <TmaxInviodati+0x2>
    3208:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <TmaxInviodati+0x3>
    320c:	0e 94 b6 03 	call	0x76c	; 0x76c <_Z11avanzaStatom>
    3210:	b5 cd       	rjmp	.-1174   	; 0x2d7c <loop+0xf60>

  nowTimer = DS3231M.now();
  secs = nowTimer.secondstime();  
  if (((UltimoPassaggioStato + Timer - secs) <= 1) && (stato_procedura != 6)) Azzera();
  else if (((UltimoPassaggioStato + Timer - secs) <= 1) && (stato_procedura == 6)) avanzaStato(30);
}
    3212:	aa 96       	adiw	r28, 0x2a	; 42
    3214:	0f b6       	in	r0, 0x3f	; 63
    3216:	f8 94       	cli
    3218:	de bf       	out	0x3e, r29	; 62
    321a:	0f be       	out	0x3f, r0	; 63
    321c:	cd bf       	out	0x3d, r28	; 61
    321e:	df 91       	pop	r29
    3220:	cf 91       	pop	r28
    3222:	1f 91       	pop	r17
    3224:	0f 91       	pop	r16
    3226:	ff 90       	pop	r15
    3228:	ef 90       	pop	r14
    322a:	df 90       	pop	r13
    322c:	cf 90       	pop	r12
    322e:	08 95       	ret

00003230 <__vector_4>:
  73 litri al minuto
  73/60 = 1,22 lt/sec
  1,22*100 = 122 Hz
***********************************************************************/

ISR(PCINT0_vect) {
    3230:	1f 92       	push	r1
    3232:	0f 92       	push	r0
    3234:	0f b6       	in	r0, 0x3f	; 63
    3236:	0f 92       	push	r0
    3238:	11 24       	eor	r1, r1
    323a:	0b b6       	in	r0, 0x3b	; 59
    323c:	0f 92       	push	r0
    323e:	2f 93       	push	r18
    3240:	3f 93       	push	r19
    3242:	4f 93       	push	r20
    3244:	5f 93       	push	r21
    3246:	6f 93       	push	r22
    3248:	7f 93       	push	r23
    324a:	8f 93       	push	r24
    324c:	9f 93       	push	r25
    324e:	af 93       	push	r26
    3250:	bf 93       	push	r27
    3252:	ef 93       	push	r30
    3254:	ff 93       	push	r31
  if ((stato_procedura == stato_erogazione)) //&& ((impulsi/ImpulsiLitro) > MaxErogabile))
    3256:	80 91 22 0b 	lds	r24, 0x0B22	; 0x800b22 <stato_procedura>
    325a:	90 91 23 0b 	lds	r25, 0x0B23	; 0x800b23 <stato_procedura+0x1>
    325e:	07 97       	sbiw	r24, 0x07	; 7
    3260:	41 f5       	brne	.+80     	; 0x32b2 <__vector_4+0x82>
  {
	  
	  if ((PINA & _BV(PA5)) && (mezzo.Carb == "D")) {
    3262:	05 9b       	sbis	0x00, 5	; 0
    3264:	08 c0       	rjmp	.+16     	; 0x3276 <__vector_4+0x46>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    3266:	6b e9       	ldi	r22, 0x9B	; 155
    3268:	75 e0       	ldi	r23, 0x05	; 5
    326a:	8b e6       	ldi	r24, 0x6B	; 107
    326c:	9b e0       	ldi	r25, 0x0B	; 11
    326e:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <_ZNK6String6equalsEPKc>
    3272:	81 11       	cpse	r24, r1
    3274:	14 c0       	rjmp	.+40     	; 0x329e <__vector_4+0x6e>
		impulsi++;
	  }
	  
      if ((PINA & _BV(PA6)) && (mezzo.Carb == "B")) {
    3276:	06 9b       	sbis	0x00, 6	; 0
    3278:	1c c0       	rjmp	.+56     	; 0x32b2 <__vector_4+0x82>
    327a:	6d e9       	ldi	r22, 0x9D	; 157
    327c:	75 e0       	ldi	r23, 0x05	; 5
    327e:	8b e6       	ldi	r24, 0x6B	; 107
    3280:	9b e0       	ldi	r25, 0x0B	; 11
    3282:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <_ZNK6String6equalsEPKc>
    3286:	88 23       	and	r24, r24
    3288:	a1 f0       	breq	.+40     	; 0x32b2 <__vector_4+0x82>
		impulsi++;
    328a:	80 91 20 0b 	lds	r24, 0x0B20	; 0x800b20 <impulsi>
    328e:	90 91 21 0b 	lds	r25, 0x0B21	; 0x800b21 <impulsi+0x1>
    3292:	01 96       	adiw	r24, 0x01	; 1
    3294:	90 93 21 0b 	sts	0x0B21, r25	; 0x800b21 <impulsi+0x1>
    3298:	80 93 20 0b 	sts	0x0B20, r24	; 0x800b20 <impulsi>
    329c:	0a c0       	rjmp	.+20     	; 0x32b2 <__vector_4+0x82>
ISR(PCINT0_vect) {
  if ((stato_procedura == stato_erogazione)) //&& ((impulsi/ImpulsiLitro) > MaxErogabile))
  {
	  
	  if ((PINA & _BV(PA5)) && (mezzo.Carb == "D")) {
		impulsi++;
    329e:	80 91 20 0b 	lds	r24, 0x0B20	; 0x800b20 <impulsi>
    32a2:	90 91 21 0b 	lds	r25, 0x0B21	; 0x800b21 <impulsi+0x1>
    32a6:	01 96       	adiw	r24, 0x01	; 1
    32a8:	90 93 21 0b 	sts	0x0B21, r25	; 0x800b21 <impulsi+0x1>
    32ac:	80 93 20 0b 	sts	0x0B20, r24	; 0x800b20 <impulsi>
    32b0:	e2 cf       	rjmp	.-60     	; 0x3276 <__vector_4+0x46>
	  
      if ((PINA & _BV(PA6)) && (mezzo.Carb == "B")) {
		impulsi++;
	  }
 }
}
    32b2:	ff 91       	pop	r31
    32b4:	ef 91       	pop	r30
    32b6:	bf 91       	pop	r27
    32b8:	af 91       	pop	r26
    32ba:	9f 91       	pop	r25
    32bc:	8f 91       	pop	r24
    32be:	7f 91       	pop	r23
    32c0:	6f 91       	pop	r22
    32c2:	5f 91       	pop	r21
    32c4:	4f 91       	pop	r20
    32c6:	3f 91       	pop	r19
    32c8:	2f 91       	pop	r18
    32ca:	0f 90       	pop	r0
    32cc:	0b be       	out	0x3b, r0	; 59
    32ce:	0f 90       	pop	r0
    32d0:	0f be       	out	0x3f, r0	; 63
    32d2:	0f 90       	pop	r0
    32d4:	1f 90       	pop	r1
    32d6:	18 95       	reti

000032d8 <__vector_7>:
/***********************************************************************/

// interrupt per pulsanti abilitazione diesele benzina

ISR(PCINT3_vect) {
    32d8:	1f 92       	push	r1
    32da:	0f 92       	push	r0
    32dc:	0f b6       	in	r0, 0x3f	; 63
    32de:	0f 92       	push	r0
    32e0:	11 24       	eor	r1, r1
    32e2:	8f 93       	push	r24
    32e4:	9f 93       	push	r25

  if (stato_procedura == stato_distributore)
    32e6:	80 91 22 0b 	lds	r24, 0x0B22	; 0x800b22 <stato_procedura>
    32ea:	90 91 23 0b 	lds	r25, 0x0B23	; 0x800b23 <stato_procedura+0x1>
    32ee:	04 97       	sbiw	r24, 0x04	; 4
    32f0:	09 f0       	breq	.+2      	; 0x32f4 <__vector_7+0x1c>
    32f2:	6a c0       	rjmp	.+212    	; 0x33c8 <__vector_7+0xf0>
  {
    if (PIND & _BV(PD6))
    32f4:	4e 9b       	sbis	0x09, 6	; 9
    32f6:	1c c0       	rjmp	.+56     	; 0x3330 <__vector_7+0x58>
    {
      intConsecutivePresses++;  // increment counter for number of presses           
    32f8:	80 91 7f 0b 	lds	r24, 0x0B7F	; 0x800b7f <intConsecutivePresses>
    32fc:	90 91 80 0b 	lds	r25, 0x0B80	; 0x800b80 <intConsecutivePresses+0x1>
    3300:	01 96       	adiw	r24, 0x01	; 1
    3302:	90 93 80 0b 	sts	0x0B80, r25	; 0x800b80 <intConsecutivePresses+0x1>
    3306:	80 93 7f 0b 	sts	0x0B7F, r24	; 0x800b7f <intConsecutivePresses>
      if (intConsecutivePresses >= NUM_OF_CONSECUTIVE_PRESSES)
    330a:	80 91 7f 0b 	lds	r24, 0x0B7F	; 0x800b7f <intConsecutivePresses>
    330e:	90 91 80 0b 	lds	r25, 0x0B80	; 0x800b80 <intConsecutivePresses+0x1>
    3312:	18 16       	cp	r1, r24
    3314:	19 06       	cpc	r1, r25
    3316:	1c f5       	brge	.+70     	; 0x335e <__vector_7+0x86>
      { // if enough presses to constitute a press
        intConsecutivePresses = 0;                    // and reset press counts
    3318:	10 92 80 0b 	sts	0x0B80, r1	; 0x800b80 <intConsecutivePresses+0x1>
    331c:	10 92 7f 0b 	sts	0x0B7F, r1	; 0x800b7f <intConsecutivePresses>
        intConsecutiveNonPresses = 0;        
    3320:	10 92 7e 0b 	sts	0x0B7E, r1	; 0x800b7e <intConsecutiveNonPresses+0x1>
    3324:	10 92 7d 0b 	sts	0x0B7D, r1	; 0x800b7d <intConsecutiveNonPresses>
        distr_selezionato = 2;
    3328:	82 e0       	ldi	r24, 0x02	; 2
    332a:	80 93 1f 0b 	sts	0x0B1F, r24	; 0x800b1f <distr_selezionato>
    332e:	17 c0       	rjmp	.+46     	; 0x335e <__vector_7+0x86>
      }
    }
    else  {           // else if button is not pressed (logic low)
      intConsecutiveNonPresses++;
    3330:	80 91 7d 0b 	lds	r24, 0x0B7D	; 0x800b7d <intConsecutiveNonPresses>
    3334:	90 91 7e 0b 	lds	r25, 0x0B7E	; 0x800b7e <intConsecutiveNonPresses+0x1>
    3338:	01 96       	adiw	r24, 0x01	; 1
    333a:	90 93 7e 0b 	sts	0x0B7E, r25	; 0x800b7e <intConsecutiveNonPresses+0x1>
    333e:	80 93 7d 0b 	sts	0x0B7D, r24	; 0x800b7d <intConsecutiveNonPresses>
      if (intConsecutiveNonPresses >= NUM_OF_CONSECUTIVE_NON_PRESSES) {
    3342:	80 91 7d 0b 	lds	r24, 0x0B7D	; 0x800b7d <intConsecutiveNonPresses>
    3346:	90 91 7e 0b 	lds	r25, 0x0B7E	; 0x800b7e <intConsecutiveNonPresses+0x1>
    334a:	02 97       	sbiw	r24, 0x02	; 2
    334c:	44 f0       	brlt	.+16     	; 0x335e <__vector_7+0x86>
        intConsecutivePresses = 0;                      // reset press counts
    334e:	10 92 80 0b 	sts	0x0B80, r1	; 0x800b80 <intConsecutivePresses+0x1>
    3352:	10 92 7f 0b 	sts	0x0B7F, r1	; 0x800b7f <intConsecutivePresses>
        intConsecutiveNonPresses = 0;
    3356:	10 92 7e 0b 	sts	0x0B7E, r1	; 0x800b7e <intConsecutiveNonPresses+0x1>
    335a:	10 92 7d 0b 	sts	0x0B7D, r1	; 0x800b7d <intConsecutiveNonPresses>
      }
    }

    if (PIND & _BV(PD7))
    335e:	4f 9b       	sbis	0x09, 7	; 9
    3360:	1c c0       	rjmp	.+56     	; 0x339a <__vector_7+0xc2>
    {      
      intConsecutivePresses++;  // increment counter for number of presses
    3362:	80 91 7f 0b 	lds	r24, 0x0B7F	; 0x800b7f <intConsecutivePresses>
    3366:	90 91 80 0b 	lds	r25, 0x0B80	; 0x800b80 <intConsecutivePresses+0x1>
    336a:	01 96       	adiw	r24, 0x01	; 1
    336c:	90 93 80 0b 	sts	0x0B80, r25	; 0x800b80 <intConsecutivePresses+0x1>
    3370:	80 93 7f 0b 	sts	0x0B7F, r24	; 0x800b7f <intConsecutivePresses>
      if (intConsecutivePresses >= NUM_OF_CONSECUTIVE_PRESSES)
    3374:	80 91 7f 0b 	lds	r24, 0x0B7F	; 0x800b7f <intConsecutivePresses>
    3378:	90 91 80 0b 	lds	r25, 0x0B80	; 0x800b80 <intConsecutivePresses+0x1>
    337c:	18 16       	cp	r1, r24
    337e:	19 06       	cpc	r1, r25
    3380:	1c f5       	brge	.+70     	; 0x33c8 <__vector_7+0xf0>
      { // if enough presses to constitute a press
        intConsecutivePresses = 0;                    // and reset press counts
    3382:	10 92 80 0b 	sts	0x0B80, r1	; 0x800b80 <intConsecutivePresses+0x1>
    3386:	10 92 7f 0b 	sts	0x0B7F, r1	; 0x800b7f <intConsecutivePresses>
        intConsecutiveNonPresses = 0;        
    338a:	10 92 7e 0b 	sts	0x0B7E, r1	; 0x800b7e <intConsecutiveNonPresses+0x1>
    338e:	10 92 7d 0b 	sts	0x0B7D, r1	; 0x800b7d <intConsecutiveNonPresses>
        distr_selezionato = 1;
    3392:	81 e0       	ldi	r24, 0x01	; 1
    3394:	80 93 1f 0b 	sts	0x0B1F, r24	; 0x800b1f <distr_selezionato>
    3398:	17 c0       	rjmp	.+46     	; 0x33c8 <__vector_7+0xf0>
      }
    }
    else  {            // else if button is not pressed (logic low)
      intConsecutiveNonPresses++;
    339a:	80 91 7d 0b 	lds	r24, 0x0B7D	; 0x800b7d <intConsecutiveNonPresses>
    339e:	90 91 7e 0b 	lds	r25, 0x0B7E	; 0x800b7e <intConsecutiveNonPresses+0x1>
    33a2:	01 96       	adiw	r24, 0x01	; 1
    33a4:	90 93 7e 0b 	sts	0x0B7E, r25	; 0x800b7e <intConsecutiveNonPresses+0x1>
    33a8:	80 93 7d 0b 	sts	0x0B7D, r24	; 0x800b7d <intConsecutiveNonPresses>
      if (intConsecutiveNonPresses >= NUM_OF_CONSECUTIVE_NON_PRESSES) {
    33ac:	80 91 7d 0b 	lds	r24, 0x0B7D	; 0x800b7d <intConsecutiveNonPresses>
    33b0:	90 91 7e 0b 	lds	r25, 0x0B7E	; 0x800b7e <intConsecutiveNonPresses+0x1>
    33b4:	02 97       	sbiw	r24, 0x02	; 2
    33b6:	44 f0       	brlt	.+16     	; 0x33c8 <__vector_7+0xf0>
        intConsecutivePresses = 0;                     // reset press counts
    33b8:	10 92 80 0b 	sts	0x0B80, r1	; 0x800b80 <intConsecutivePresses+0x1>
    33bc:	10 92 7f 0b 	sts	0x0B7F, r1	; 0x800b7f <intConsecutivePresses>
        intConsecutiveNonPresses = 0;
    33c0:	10 92 7e 0b 	sts	0x0B7E, r1	; 0x800b7e <intConsecutiveNonPresses+0x1>
    33c4:	10 92 7d 0b 	sts	0x0B7D, r1	; 0x800b7d <intConsecutiveNonPresses>
      }
    }
  }
    33c8:	9f 91       	pop	r25
    33ca:	8f 91       	pop	r24
    33cc:	0f 90       	pop	r0
    33ce:	0f be       	out	0x3f, r0	; 63
    33d0:	0f 90       	pop	r0
    33d2:	1f 90       	pop	r1
    33d4:	18 95       	reti

000033d6 <_GLOBAL__sub_I_ParametriCCEC>:
    33d6:	8f 92       	push	r8
    33d8:	af 92       	push	r10
    33da:	cf 92       	push	r12
    33dc:	ef 92       	push	r14
    33de:	0f 93       	push	r16
    33e0:	cf 93       	push	r28
    33e2:	df 93       	push	r29
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    33e4:	00 e0       	ldi	r16, 0x00	; 0
    33e6:	20 e0       	ldi	r18, 0x00	; 0
    33e8:	40 e0       	ldi	r20, 0x00	; 0
    33ea:	60 e0       	ldi	r22, 0x00	; 0
    33ec:	8b eb       	ldi	r24, 0xBB	; 187
    33ee:	9b e0       	ldi	r25, 0x0B	; 11
    33f0:	0e 94 5e 38 	call	0x70bc	; 0x70bc <_ZN9IPAddressC1Ehhhh>
ParametriCCEC_TypeDef Parametri[numero_parametri] =
{ {"DNS NAME SERVER\0", "ccec.no.dipvvf.it\0", 1000},
  {"IP CCEC\0", "192.168.3.100\0", 1020},
  {"Ultima Erogazione Salvata\0", "2000\0", 1035},
  {"Codice Sede\0", "NO1001\0", 1040}
    33f4:	6d e6       	ldi	r22, 0x6D	; 109
    33f6:	71 e0       	ldi	r23, 0x01	; 1
    33f8:	81 e8       	ldi	r24, 0x81	; 129
    33fa:	9b e0       	ldi	r25, 0x0B	; 11
    33fc:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
    3400:	6e e7       	ldi	r22, 0x7E	; 126
    3402:	71 e0       	ldi	r23, 0x01	; 1
    3404:	87 e8       	ldi	r24, 0x87	; 135
    3406:	9b e0       	ldi	r25, 0x0B	; 11
    3408:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
    340c:	c1 e8       	ldi	r28, 0x81	; 129
    340e:	db e0       	ldi	r29, 0x0B	; 11
    3410:	88 ee       	ldi	r24, 0xE8	; 232
    3412:	93 e0       	ldi	r25, 0x03	; 3
    3414:	9d 87       	std	Y+13, r25	; 0x0d
    3416:	8c 87       	std	Y+12, r24	; 0x0c
    3418:	61 e9       	ldi	r22, 0x91	; 145
    341a:	71 e0       	ldi	r23, 0x01	; 1
    341c:	8f e8       	ldi	r24, 0x8F	; 143
    341e:	9b e0       	ldi	r25, 0x0B	; 11
    3420:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
    3424:	6a e9       	ldi	r22, 0x9A	; 154
    3426:	71 e0       	ldi	r23, 0x01	; 1
    3428:	85 e9       	ldi	r24, 0x95	; 149
    342a:	9b e0       	ldi	r25, 0x0B	; 11
    342c:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
    3430:	8c ef       	ldi	r24, 0xFC	; 252
    3432:	93 e0       	ldi	r25, 0x03	; 3
    3434:	9b 8f       	std	Y+27, r25	; 0x1b
    3436:	8a 8f       	std	Y+26, r24	; 0x1a
    3438:	69 ea       	ldi	r22, 0xA9	; 169
    343a:	71 e0       	ldi	r23, 0x01	; 1
    343c:	8d e9       	ldi	r24, 0x9D	; 157
    343e:	9b e0       	ldi	r25, 0x0B	; 11
    3440:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
    3444:	64 ec       	ldi	r22, 0xC4	; 196
    3446:	71 e0       	ldi	r23, 0x01	; 1
    3448:	83 ea       	ldi	r24, 0xA3	; 163
    344a:	9b e0       	ldi	r25, 0x0B	; 11
    344c:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
    3450:	8b e0       	ldi	r24, 0x0B	; 11
    3452:	94 e0       	ldi	r25, 0x04	; 4
    3454:	99 a7       	std	Y+41, r25	; 0x29
    3456:	88 a7       	std	Y+40, r24	; 0x28
    3458:	6a ec       	ldi	r22, 0xCA	; 202
    345a:	71 e0       	ldi	r23, 0x01	; 1
    345c:	8b ea       	ldi	r24, 0xAB	; 171
    345e:	9b e0       	ldi	r25, 0x0B	; 11
    3460:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
    3464:	67 ed       	ldi	r22, 0xD7	; 215
    3466:	71 e0       	ldi	r23, 0x01	; 1
    3468:	81 eb       	ldi	r24, 0xB1	; 177
    346a:	9b e0       	ldi	r25, 0x0B	; 11
    346c:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
    3470:	80 e1       	ldi	r24, 0x10	; 16
    3472:	94 e0       	ldi	r25, 0x04	; 4
    3474:	9f ab       	std	Y+55, r25	; 0x37
    3476:	8e ab       	std	Y+54, r24	; 0x36

volatile int intConsecutivePresses = 0;
volatile int intConsecutiveNonPresses = 0;
const uint8_t I2C_PCA9534_ADDR = 0x20;

struct mezzoType {
    3478:	6a ee       	ldi	r22, 0xEA	; 234
    347a:	71 e0       	ldi	r23, 0x01	; 1
    347c:	8b e6       	ldi	r24, 0x6B	; 107
    347e:	9b e0       	ldi	r25, 0x0B	; 11
    3480:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
    3484:	6a ee       	ldi	r22, 0xEA	; 234
    3486:	71 e0       	ldi	r23, 0x01	; 1
    3488:	81 e7       	ldi	r24, 0x71	; 113
    348a:	9b e0       	ldi	r25, 0x0B	; 11
    348c:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
    3490:	6a ee       	ldi	r22, 0xEA	; 234
    3492:	71 e0       	ldi	r23, 0x01	; 1
    3494:	87 e7       	ldi	r24, 0x77	; 119
    3496:	9b e0       	ldi	r25, 0x0B	; 11
    3498:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
uint8_t uid[] = { 0, 0, 0, 0, 0, 0, 0 };       // Buffer dove memorizzo la UID del Badge
uint8_t uidLength;                             // Length of the UID (4 or 7 bytes depending on ISO14443A card type)
uint8_t uidMezzo[] = { 0, 0, 0, 0, 0, 0, 0 };  // Buffer dove memorizzo la UID del Badge Mezzo
boolean alreadyTimbrata = false;

LiquidCrystal_I2C lcd(0x27, 2, 1, 0, 4, 5, 6, 7, 3, POSITIVE);  // Set the LCD I2C address
    349c:	1f 92       	push	r1
    349e:	83 e0       	ldi	r24, 0x03	; 3
    34a0:	8f 93       	push	r24
    34a2:	87 e0       	ldi	r24, 0x07	; 7
    34a4:	88 2e       	mov	r8, r24
    34a6:	96 e0       	ldi	r25, 0x06	; 6
    34a8:	a9 2e       	mov	r10, r25
    34aa:	25 e0       	ldi	r18, 0x05	; 5
    34ac:	c2 2e       	mov	r12, r18
    34ae:	34 e0       	ldi	r19, 0x04	; 4
    34b0:	e3 2e       	mov	r14, r19
    34b2:	21 e0       	ldi	r18, 0x01	; 1
    34b4:	42 e0       	ldi	r20, 0x02	; 2
    34b6:	67 e2       	ldi	r22, 0x27	; 39
    34b8:	89 e4       	ldi	r24, 0x49	; 73
    34ba:	9b e0       	ldi	r25, 0x0B	; 11
    34bc:	0e 94 e6 31 	call	0x63cc	; 0x63cc <_ZN17LiquidCrystal_I2CC1Ehhhhhhhhh13t_backlighPol>
uint8_t Clessidra[8] = {0x1F, 0x11, 0x0A, 0x04, 0x04, 0x0E, 0x1F, 0x1F,};
NFC_PN532 nfc(PN532_IRQ, PN532_RESET);
    34c0:	43 e0       	ldi	r20, 0x03	; 3
    34c2:	64 e0       	ldi	r22, 0x04	; 4
    34c4:	82 e3       	ldi	r24, 0x32	; 50
    34c6:	9b e0       	ldi	r25, 0x0B	; 11
    34c8:	c6 d3       	rcall	.+1932   	; 0x3c56 <_ZN9NFC_PN532C1Ehh>

String StatoAttuale = "START...";
    34ca:	63 e9       	ldi	r22, 0x93	; 147
    34cc:	78 e0       	ldi	r23, 0x08	; 8
    34ce:	8c e2       	ldi	r24, 0x2C	; 44
    34d0:	9b e0       	ldi	r25, 0x0B	; 11
    34d2:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
String strURLAPI = "";
    34d6:	6a ee       	ldi	r22, 0xEA	; 234
    34d8:	71 e0       	ldi	r23, 0x01	; 1
    34da:	86 e2       	ldi	r24, 0x26	; 38
    34dc:	9b e0       	ldi	r25, 0x0B	; 11
    34de:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>

uint8_t distr_selezionato = 0;
/*** GESTIONE HTTP REQUEST ***/

int HTTP_len_response = 12;
String RispostaHTTP = "";
    34e2:	6a ee       	ldi	r22, 0xEA	; 234
    34e4:	71 e0       	ldi	r23, 0x01	; 1
    34e6:	89 e1       	ldi	r24, 0x19	; 25
    34e8:	9b e0       	ldi	r25, 0x0B	; 11
    34ea:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
// Ate;TARGA;CARB;LT;KM;
String RaccoltaDati[] = {"", "", "", "", "", ""};
    34ee:	6a ee       	ldi	r22, 0xEA	; 234
    34f0:	71 e0       	ldi	r23, 0x01	; 1
    34f2:	85 ef       	ldi	r24, 0xF5	; 245
    34f4:	9a e0       	ldi	r25, 0x0A	; 10
    34f6:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
    34fa:	6a ee       	ldi	r22, 0xEA	; 234
    34fc:	71 e0       	ldi	r23, 0x01	; 1
    34fe:	8b ef       	ldi	r24, 0xFB	; 251
    3500:	9a e0       	ldi	r25, 0x0A	; 10
    3502:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
    3506:	6a ee       	ldi	r22, 0xEA	; 234
    3508:	71 e0       	ldi	r23, 0x01	; 1
    350a:	81 e0       	ldi	r24, 0x01	; 1
    350c:	9b e0       	ldi	r25, 0x0B	; 11
    350e:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
    3512:	6a ee       	ldi	r22, 0xEA	; 234
    3514:	71 e0       	ldi	r23, 0x01	; 1
    3516:	87 e0       	ldi	r24, 0x07	; 7
    3518:	9b e0       	ldi	r25, 0x0B	; 11
    351a:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
    351e:	6a ee       	ldi	r22, 0xEA	; 234
    3520:	71 e0       	ldi	r23, 0x01	; 1
    3522:	8d e0       	ldi	r24, 0x0D	; 13
    3524:	9b e0       	ldi	r25, 0x0B	; 11
    3526:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
    352a:	6a ee       	ldi	r22, 0xEA	; 234
    352c:	71 e0       	ldi	r23, 0x01	; 1
    352e:	83 e1       	ldi	r24, 0x13	; 19
    3530:	9b e0       	ldi	r25, 0x0B	; 11
    3532:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
// String Carburante = "X";
String Risposta = "";
    3536:	6a ee       	ldi	r22, 0xEA	; 234
    3538:	71 e0       	ldi	r23, 0x01	; 1
    353a:	8f ee       	ldi	r24, 0xEF	; 239
    353c:	9a e0       	ldi	r25, 0x0A	; 10
    353e:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
String Messaggio = "";
    3542:	6a ee       	ldi	r22, 0xEA	; 234
    3544:	71 e0       	ldi	r23, 0x01	; 1
    3546:	89 ee       	ldi	r24, 0xE9	; 233
    3548:	9a e0       	ldi	r25, 0x0A	; 10
    354a:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
String righeDisplay[] = {"X", "X", "X", "X"};
    354e:	65 e1       	ldi	r22, 0x15	; 21
    3550:	75 e0       	ldi	r23, 0x05	; 5
    3552:	81 ed       	ldi	r24, 0xD1	; 209
    3554:	9a e0       	ldi	r25, 0x0A	; 10
    3556:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
    355a:	65 e1       	ldi	r22, 0x15	; 21
    355c:	75 e0       	ldi	r23, 0x05	; 5
    355e:	87 ed       	ldi	r24, 0xD7	; 215
    3560:	9a e0       	ldi	r25, 0x0A	; 10
    3562:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
    3566:	65 e1       	ldi	r22, 0x15	; 21
    3568:	75 e0       	ldi	r23, 0x05	; 5
    356a:	8d ed       	ldi	r24, 0xDD	; 221
    356c:	9a e0       	ldi	r25, 0x0A	; 10
    356e:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
    3572:	65 e1       	ldi	r22, 0x15	; 21
    3574:	75 e0       	ldi	r23, 0x05	; 5
    3576:	83 ee       	ldi	r24, 0xE3	; 227
    3578:	9a e0       	ldi	r25, 0x0A	; 10
    357a:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
char CodSede[] = "NO1001";
/********************************************************************************************/
/*                    Configurazione Rete                       */
/********************************************************************************************/

IPAddress ipCCEC(192, 168, 3, 100);
    357e:	04 e6       	ldi	r16, 0x64	; 100
    3580:	23 e0       	ldi	r18, 0x03	; 3
    3582:	48 ea       	ldi	r20, 0xA8	; 168
    3584:	60 ec       	ldi	r22, 0xC0	; 192
    3586:	8b ec       	ldi	r24, 0xCB	; 203
    3588:	9a e0       	ldi	r25, 0x0A	; 10
    358a:	0e 94 5e 38 	call	0x70bc	; 0x70bc <_ZN9IPAddressC1Ehhhh>
IPAddress myDns(192, 168, 1, 21); // DNS
    358e:	05 e1       	ldi	r16, 0x15	; 21
    3590:	21 e0       	ldi	r18, 0x01	; 1
    3592:	48 ea       	ldi	r20, 0xA8	; 168
    3594:	60 ec       	ldi	r22, 0xC0	; 192
    3596:	85 ec       	ldi	r24, 0xC5	; 197
    3598:	9a e0       	ldi	r25, 0x0A	; 10
    359a:	0e 94 5e 38 	call	0x70bc	; 0x70bc <_ZN9IPAddressC1Ehhhh>
IPAddress gateway(192, 168, 0, 1); // GATEWAY
    359e:	01 e0       	ldi	r16, 0x01	; 1
    35a0:	20 e0       	ldi	r18, 0x00	; 0
    35a2:	48 ea       	ldi	r20, 0xA8	; 168
    35a4:	60 ec       	ldi	r22, 0xC0	; 192
    35a6:	8f eb       	ldi	r24, 0xBF	; 191
    35a8:	9a e0       	ldi	r25, 0x0A	; 10
    35aa:	0e 94 5e 38 	call	0x70bc	; 0x70bc <_ZN9IPAddressC1Ehhhh>
IPAddress subnet(255, 255, 0, 0); // SUBNET
    35ae:	00 e0       	ldi	r16, 0x00	; 0
    35b0:	20 e0       	ldi	r18, 0x00	; 0
    35b2:	4f ef       	ldi	r20, 0xFF	; 255
    35b4:	6f ef       	ldi	r22, 0xFF	; 255
    35b6:	89 eb       	ldi	r24, 0xB9	; 185
    35b8:	9a e0       	ldi	r25, 0x0A	; 10
    35ba:	0e 94 5e 38 	call	0x70bc	; 0x70bc <_ZN9IPAddressC1Ehhhh>

char serverATE[]  = "wbpate-test.dipvvf.it";
char serverGAC[]  = "gacweb-test.dipvvf.it";
char serverREST[] = "ccec.no.dipvvf.it";

EthernetClient clientLOCAL;
    35be:	8c ea       	ldi	r24, 0xAC	; 172
    35c0:	9a e0       	ldi	r25, 0x0A	; 10
    35c2:	0e 94 4c 29 	call	0x5298	; 0x5298 <_ZN14EthernetClientC1Ev>
EthernetClient clientATE;
    35c6:	8f e9       	ldi	r24, 0x9F	; 159
    35c8:	9a e0       	ldi	r25, 0x0A	; 10
    35ca:	0e 94 4c 29 	call	0x5298	; 0x5298 <_ZN14EthernetClientC1Ev>

byte mac[] = {0x00, 0x0E, 0x0C, 0xB0, 0x25, 0x6F};
/********************************************************************************************/
/*                    Real Time Clock                       */
/********************************************************************************************/
DS3231M_Class DS3231M;
    35ce:	83 e9       	ldi	r24, 0x93	; 147
    35d0:	9a e0       	ldi	r25, 0x0A	; 10
    35d2:	0e 94 29 23 	call	0x4652	; 0x4652 <_ZN13DS3231M_ClassC1Ev>
const uint8_t SPRINTF_BUFFER_SIZE =     32;
char          inputBuffer[SPRINTF_BUFFER_SIZE];
unsigned long secs;                            // store the seconds value
unsigned long UltimoPassaggioStato = 0;        // Timer Stati Procedura
unsigned long Timer = 0;                       // Timer
DateTime nowTimer;
    35d6:	40 e0       	ldi	r20, 0x00	; 0
    35d8:	50 e0       	ldi	r21, 0x00	; 0
    35da:	ba 01       	movw	r22, r20
    35dc:	81 e8       	ldi	r24, 0x81	; 129
    35de:	9a e0       	ldi	r25, 0x0A	; 10
    35e0:	cc d6       	rcall	.+3480   	; 0x437a <_ZN8DateTimeC1Em>
/********************************************************************************************/

const byte ROWS = 4; //four rows
const byte COLS = 4; //four columns

String TARGA = "";
    35e2:	6a ee       	ldi	r22, 0xEA	; 234
    35e4:	71 e0       	ldi	r23, 0x01	; 1
    35e6:	8b e7       	ldi	r24, 0x7B	; 123
    35e8:	9a e0       	ldi	r25, 0x0A	; 10
    35ea:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
String KM = "";
    35ee:	6a ee       	ldi	r22, 0xEA	; 234
    35f0:	71 e0       	ldi	r23, 0x01	; 1
    35f2:	85 e7       	ldi	r24, 0x75	; 117
    35f4:	9a e0       	ldi	r25, 0x0A	; 10
    35f6:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', '.'}
};

PCA9534 gpio;
    35fa:	0f 90       	pop	r0
    35fc:	0f 90       	pop	r0
    35fe:	82 e7       	ldi	r24, 0x72	; 114
    3600:	9a e0       	ldi	r25, 0x0A	; 10
        intConsecutivePresses = 0;                     // reset press counts
        intConsecutiveNonPresses = 0;
      }
    }
  }
    3602:	df 91       	pop	r29
    3604:	cf 91       	pop	r28
    3606:	0f 91       	pop	r16
    3608:	ef 90       	pop	r14
    360a:	cf 90       	pop	r12
    360c:	af 90       	pop	r10
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', '.'}
};

PCA9534 gpio;
    360e:	8f 90       	pop	r8
    3610:	82 c2       	rjmp	.+1284   	; 0x3b16 <_ZN7PCA9534C1Ev>

00003612 <_GLOBAL__sub_D_ParametriCCEC>:
        intConsecutivePresses = 0;                     // reset press counts
        intConsecutiveNonPresses = 0;
      }
    }
  }
    3612:	cf 93       	push	r28
    3614:	df 93       	push	r29

const byte ROWS = 4; //four rows
const byte COLS = 4; //four columns

String TARGA = "";
String KM = "";
    3616:	85 e7       	ldi	r24, 0x75	; 117
    3618:	9a e0       	ldi	r25, 0x0A	; 10
    361a:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
/********************************************************************************************/

const byte ROWS = 4; //four rows
const byte COLS = 4; //four columns

String TARGA = "";
    361e:	8b e7       	ldi	r24, 0x7B	; 123
    3620:	9a e0       	ldi	r25, 0x0A	; 10
    3622:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>

byte mac[] = {0x00, 0x0E, 0x0C, 0xB0, 0x25, 0x6F};
/********************************************************************************************/
/*                    Real Time Clock                       */
/********************************************************************************************/
DS3231M_Class DS3231M;
    3626:	83 e9       	ldi	r24, 0x93	; 147
    3628:	9a e0       	ldi	r25, 0x0A	; 10
    362a:	0e 94 30 23 	call	0x4660	; 0x4660 <_ZN13DS3231M_ClassD1Ev>
// Ate;TARGA;CARB;LT;KM;
String RaccoltaDati[] = {"", "", "", "", "", ""};
// String Carburante = "X";
String Risposta = "";
String Messaggio = "";
String righeDisplay[] = {"X", "X", "X", "X"};
    362e:	83 ee       	ldi	r24, 0xE3	; 227
    3630:	9a e0       	ldi	r25, 0x0A	; 10
    3632:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
    3636:	8d ed       	ldi	r24, 0xDD	; 221
    3638:	9a e0       	ldi	r25, 0x0A	; 10
    363a:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
    363e:	87 ed       	ldi	r24, 0xD7	; 215
    3640:	9a e0       	ldi	r25, 0x0A	; 10
    3642:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
    3646:	81 ed       	ldi	r24, 0xD1	; 209
    3648:	9a e0       	ldi	r25, 0x0A	; 10
    364a:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
String RispostaHTTP = "";
// Ate;TARGA;CARB;LT;KM;
String RaccoltaDati[] = {"", "", "", "", "", ""};
// String Carburante = "X";
String Risposta = "";
String Messaggio = "";
    364e:	89 ee       	ldi	r24, 0xE9	; 233
    3650:	9a e0       	ldi	r25, 0x0A	; 10
    3652:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
int HTTP_len_response = 12;
String RispostaHTTP = "";
// Ate;TARGA;CARB;LT;KM;
String RaccoltaDati[] = {"", "", "", "", "", ""};
// String Carburante = "X";
String Risposta = "";
    3656:	8f ee       	ldi	r24, 0xEF	; 239
    3658:	9a e0       	ldi	r25, 0x0A	; 10
    365a:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
/*** GESTIONE HTTP REQUEST ***/

int HTTP_len_response = 12;
String RispostaHTTP = "";
// Ate;TARGA;CARB;LT;KM;
String RaccoltaDati[] = {"", "", "", "", "", ""};
    365e:	c9 e1       	ldi	r28, 0x19	; 25
    3660:	db e0       	ldi	r29, 0x0B	; 11
    3662:	26 97       	sbiw	r28, 0x06	; 6
    3664:	ce 01       	movw	r24, r28
    3666:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
    366a:	8a e0       	ldi	r24, 0x0A	; 10
    366c:	c5 3f       	cpi	r28, 0xF5	; 245
    366e:	d8 07       	cpc	r29, r24
    3670:	c1 f7       	brne	.-16     	; 0x3662 <_GLOBAL__sub_D_ParametriCCEC+0x50>

uint8_t distr_selezionato = 0;
/*** GESTIONE HTTP REQUEST ***/

int HTTP_len_response = 12;
String RispostaHTTP = "";
    3672:	89 e1       	ldi	r24, 0x19	; 25
    3674:	9b e0       	ldi	r25, 0x0B	; 11
    3676:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
LiquidCrystal_I2C lcd(0x27, 2, 1, 0, 4, 5, 6, 7, 3, POSITIVE);  // Set the LCD I2C address
uint8_t Clessidra[8] = {0x1F, 0x11, 0x0A, 0x04, 0x04, 0x0E, 0x1F, 0x1F,};
NFC_PN532 nfc(PN532_IRQ, PN532_RESET);

String StatoAttuale = "START...";
String strURLAPI = "";
    367a:	86 e2       	ldi	r24, 0x26	; 38
    367c:	9b e0       	ldi	r25, 0x0B	; 11
    367e:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>

LiquidCrystal_I2C lcd(0x27, 2, 1, 0, 4, 5, 6, 7, 3, POSITIVE);  // Set the LCD I2C address
uint8_t Clessidra[8] = {0x1F, 0x11, 0x0A, 0x04, 0x04, 0x0E, 0x1F, 0x1F,};
NFC_PN532 nfc(PN532_IRQ, PN532_RESET);

String StatoAttuale = "START...";
    3682:	8c e2       	ldi	r24, 0x2C	; 44
    3684:	9b e0       	ldi	r25, 0x0B	; 11
    3686:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>

volatile int intConsecutivePresses = 0;
volatile int intConsecutiveNonPresses = 0;
const uint8_t I2C_PCA9534_ADDR = 0x20;

struct mezzoType {
    368a:	87 e7       	ldi	r24, 0x77	; 119
    368c:	9b e0       	ldi	r25, 0x0B	; 11
    368e:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
    3692:	81 e7       	ldi	r24, 0x71	; 113
    3694:	9b e0       	ldi	r25, 0x0B	; 11
    3696:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
    369a:	8b e6       	ldi	r24, 0x6B	; 107
    369c:	9b e0       	ldi	r25, 0x0B	; 11
    369e:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>

ParametriCCEC_TypeDef *ParametriCCEC; //puntatore  a Map memoria

#define numero_parametri 4

ParametriCCEC_TypeDef Parametri[numero_parametri] =
    36a2:	8b ea       	ldi	r24, 0xAB	; 171
    36a4:	9b e0       	ldi	r25, 0x0B	; 11
    36a6:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <_ZN20ParametriCCEC_structD1Ev>
    36aa:	8d e9       	ldi	r24, 0x9D	; 157
    36ac:	9b e0       	ldi	r25, 0x0B	; 11
    36ae:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <_ZN20ParametriCCEC_structD1Ev>
    36b2:	8f e8       	ldi	r24, 0x8F	; 143
    36b4:	9b e0       	ldi	r25, 0x0B	; 11
    36b6:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <_ZN20ParametriCCEC_structD1Ev>
    36ba:	81 e8       	ldi	r24, 0x81	; 129
    36bc:	9b e0       	ldi	r25, 0x0B	; 11
        intConsecutivePresses = 0;                     // reset press counts
        intConsecutiveNonPresses = 0;
      }
    }
  }
    36be:	df 91       	pop	r29
    36c0:	cf 91       	pop	r28
    36c2:	0c 94 df 0e 	jmp	0x1dbe	; 0x1dbe <_ZN20ParametriCCEC_structD1Ev>

000036c6 <setup>:
	Serial.println(" ");
	Serial.println(" ");
}
/************************************************************/

void setup() {
    36c6:	cf 92       	push	r12
    36c8:	df 92       	push	r13
    36ca:	ef 92       	push	r14
    36cc:	ff 92       	push	r15
    36ce:	0f 93       	push	r16
    36d0:	1f 93       	push	r17
    36d2:	cf 93       	push	r28
    36d4:	df 93       	push	r29
    36d6:	00 d0       	rcall	.+0      	; 0x36d8 <setup+0x12>
    36d8:	00 d0       	rcall	.+0      	; 0x36da <setup+0x14>
    36da:	00 d0       	rcall	.+0      	; 0x36dc <setup+0x16>
    36dc:	cd b7       	in	r28, 0x3d	; 61
    36de:	de b7       	in	r29, 0x3e	; 62
    36e0:	2f ef       	ldi	r18, 0xFF	; 255
    36e2:	81 ee       	ldi	r24, 0xE1	; 225
    36e4:	94 e0       	ldi	r25, 0x04	; 4
    36e6:	21 50       	subi	r18, 0x01	; 1
    36e8:	80 40       	sbci	r24, 0x00	; 0
    36ea:	90 40       	sbci	r25, 0x00	; 0
    36ec:	e1 f7       	brne	.-8      	; 0x36e6 <setup+0x20>
    36ee:	00 c0       	rjmp	.+0      	; 0x36f0 <setup+0x2a>
    36f0:	00 00       	nop

   /************************************************************/
   /*  DISABILITO PERIFERICHE								   */
   /************************************************************/
   _delay_ms(100);
   disable_ETH();
    36f2:	0e 94 95 01 	call	0x32a	; 0x32a <_ZL11disable_ETHv>
    36f6:	2f ef       	ldi	r18, 0xFF	; 255
    36f8:	81 ee       	ldi	r24, 0xE1	; 225
    36fa:	94 e0       	ldi	r25, 0x04	; 4
    36fc:	21 50       	subi	r18, 0x01	; 1
    36fe:	80 40       	sbci	r24, 0x00	; 0
    3700:	90 40       	sbci	r25, 0x00	; 0
    3702:	e1 f7       	brne	.-8      	; 0x36fc <setup+0x36>
    3704:	00 c0       	rjmp	.+0      	; 0x3706 <setup+0x40>
    3706:	00 00       	nop
static inline void initSS_FLASH()  { DDRB |= (1 << PB4); } // set DDRB bit 4, sets PB4 for output
static inline void initSS_ETH()    { DDRC |= (1 << PC4); } // set DDRC bit 4, sets PC4 for output
static inline void enable_ETH()    { PORTC &= ~(1 << PC4); } // Set 0 Bit 4 PORTC Register
static inline void enable_FLASH()  { PORTB &= ~(1 << PB4); } // Set 0 Bit 4 PORTB Register
static inline void disable_ETH()   { PORTC |= (1 << PC4);  } // Set 1 Bit 4 PORTC Register
static inline void disable_FLASH() { PORTB |= (1 << PB4);  } // Set 1 Bit 4 PORTB Register
    3708:	2c 9a       	sbi	0x05, 4	; 5
    370a:	2f ef       	ldi	r18, 0xFF	; 255
    370c:	81 ee       	ldi	r24, 0xE1	; 225
    370e:	94 e0       	ldi	r25, 0x04	; 4
    3710:	21 50       	subi	r18, 0x01	; 1
    3712:	80 40       	sbci	r24, 0x00	; 0
    3714:	90 40       	sbci	r25, 0x00	; 0
    3716:	e1 f7       	brne	.-8      	; 0x3710 <setup+0x4a>
    3718:	00 c0       	rjmp	.+0      	; 0x371a <setup+0x54>
    371a:	00 00       	nop
static inline void disable_LORA()  { PORTA |= (1 << PA4);  } // Set 1 Bit 4 PORTA Register
static inline void disable_GSM()   { PORTD &= ~(1 << PD5); } // Set 0 Bit 5 PORTD Register
static inline void disable_DTRGSM(){ PORTB |= (1 << PB0); } // Set 1 Bit 5 PORTD Register
    371c:	28 9a       	sbi	0x05, 0	; 5
    371e:	2f ef       	ldi	r18, 0xFF	; 255
    3720:	81 ee       	ldi	r24, 0xE1	; 225
    3722:	94 e0       	ldi	r25, 0x04	; 4
    3724:	21 50       	subi	r18, 0x01	; 1
    3726:	80 40       	sbci	r24, 0x00	; 0
    3728:	90 40       	sbci	r25, 0x00	; 0
    372a:	e1 f7       	brne	.-8      	; 0x3724 <setup+0x5e>
    372c:	00 c0       	rjmp	.+0      	; 0x372e <setup+0x68>
    372e:	00 00       	nop
static inline void initSS_FLASH()  { DDRB |= (1 << PB4); } // set DDRB bit 4, sets PB4 for output
static inline void initSS_ETH()    { DDRC |= (1 << PC4); } // set DDRC bit 4, sets PC4 for output
static inline void enable_ETH()    { PORTC &= ~(1 << PC4); } // Set 0 Bit 4 PORTC Register
static inline void enable_FLASH()  { PORTB &= ~(1 << PB4); } // Set 0 Bit 4 PORTB Register
static inline void disable_ETH()   { PORTC |= (1 << PC4);  } // Set 1 Bit 4 PORTC Register
static inline void disable_FLASH() { PORTB |= (1 << PB4);  } // Set 1 Bit 4 PORTB Register
    3730:	2c 9a       	sbi	0x05, 4	; 5
    3732:	2f ef       	ldi	r18, 0xFF	; 255
    3734:	81 ee       	ldi	r24, 0xE1	; 225
    3736:	94 e0       	ldi	r25, 0x04	; 4
    3738:	21 50       	subi	r18, 0x01	; 1
    373a:	80 40       	sbci	r24, 0x00	; 0
    373c:	90 40       	sbci	r25, 0x00	; 0
    373e:	e1 f7       	brne	.-8      	; 0x3738 <setup+0x72>
    3740:	00 c0       	rjmp	.+0      	; 0x3742 <setup+0x7c>
    3742:	00 00       	nop
static inline void disable_LORA()  { PORTA |= (1 << PA4);  } // Set 1 Bit 4 PORTA Register
    3744:	14 9a       	sbi	0x02, 4	; 2
    3746:	2f ef       	ldi	r18, 0xFF	; 255
    3748:	81 ee       	ldi	r24, 0xE1	; 225
    374a:	94 e0       	ldi	r25, 0x04	; 4
    374c:	21 50       	subi	r18, 0x01	; 1
    374e:	80 40       	sbci	r24, 0x00	; 0
    3750:	90 40       	sbci	r25, 0x00	; 0
    3752:	e1 f7       	brne	.-8      	; 0x374c <setup+0x86>
    3754:	00 c0       	rjmp	.+0      	; 0x3756 <setup+0x90>
    3756:	00 00       	nop
static inline void disable_GSM()   { PORTD &= ~(1 << PD5); } // Set 0 Bit 5 PORTD Register
static inline void disable_DTRGSM(){ PORTB |= (1 << PB0); } // Set 1 Bit 5 PORTD Register
static inline void disable_WIFI()  { PORTB &= ~(1 << PB3);  } // Set 0 Bit 3 PORTB Register
    3758:	2b 98       	cbi	0x05, 3	; 5
    375a:	2f ef       	ldi	r18, 0xFF	; 255
    375c:	81 ee       	ldi	r24, 0xE1	; 225
    375e:	94 e0       	ldi	r25, 0x04	; 4
    3760:	21 50       	subi	r18, 0x01	; 1
    3762:	80 40       	sbci	r24, 0x00	; 0
    3764:	90 40       	sbci	r25, 0x00	; 0
    3766:	e1 f7       	brne	.-8      	; 0x3760 <setup+0x9a>
    3768:	00 c0       	rjmp	.+0      	; 0x376a <setup+0xa4>
    376a:	00 00       	nop
    376c:	2f ef       	ldi	r18, 0xFF	; 255
    376e:	81 ee       	ldi	r24, 0xE1	; 225
    3770:	94 e0       	ldi	r25, 0x04	; 4
    3772:	21 50       	subi	r18, 0x01	; 1
    3774:	80 40       	sbci	r24, 0x00	; 0
    3776:	90 40       	sbci	r25, 0x00	; 0
    3778:	e1 f7       	brne	.-8      	; 0x3772 <setup+0xac>
    377a:	00 c0       	rjmp	.+0      	; 0x377c <setup+0xb6>
    377c:	00 00       	nop
   disable_WIFI();
   _delay_ms(100);
   
  // Serial.begin(115200);
  _delay_ms(100);
  Serial.println(" inizio Setup ......");
    377e:	6c e9       	ldi	r22, 0x9C	; 156
    3780:	78 e0       	ldi	r23, 0x08	; 8
    3782:	80 e1       	ldi	r24, 0x10	; 16
    3784:	9d e0       	ldi	r25, 0x0D	; 13
    3786:	0e 94 1c 39 	call	0x7238	; 0x7238 <_ZN5Print7printlnEPKc>
  printLine();
    378a:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>

  /*******************************************************************************************/
  ParametriCCEC = Parametri;  
    378e:	81 e8       	ldi	r24, 0x81	; 129
    3790:	9b e0       	ldi	r25, 0x0B	; 11
    3792:	90 93 ba 0b 	sts	0x0BBA, r25	; 0x800bba <ParametriCCEC+0x1>
    3796:	80 93 b9 0b 	sts	0x0BB9, r24	; 0x800bb9 <ParametriCCEC>
  printLine();
    379a:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
  Serial.print("EEPROM utilizzata (byte): ");
    379e:	61 eb       	ldi	r22, 0xB1	; 177
    37a0:	78 e0       	ldi	r23, 0x08	; 8
    37a2:	80 e1       	ldi	r24, 0x10	; 16
    37a4:	9d e0       	ldi	r25, 0x0D	; 13
    37a6:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN5Print5printEPKc>
  Serial.print(EEPROM.length());
    37aa:	4a e0       	ldi	r20, 0x0A	; 10
    37ac:	50 e0       	ldi	r21, 0x00	; 0
    37ae:	60 e0       	ldi	r22, 0x00	; 0
    37b0:	70 e1       	ldi	r23, 0x10	; 16
    37b2:	80 e1       	ldi	r24, 0x10	; 16
    37b4:	9d e0       	ldi	r25, 0x0D	; 13
    37b6:	0e 94 85 39 	call	0x730a	; 0x730a <_ZN5Print5printEji>
  Serial.println(" ");
    37ba:	6d ee       	ldi	r22, 0xED	; 237
    37bc:	71 e0       	ldi	r23, 0x01	; 1
    37be:	80 e1       	ldi	r24, 0x10	; 16
    37c0:	9d e0       	ldi	r25, 0x0D	; 13
    37c2:	0e 94 1c 39 	call	0x7238	; 0x7238 <_ZN5Print7printlnEPKc>
  Serial.print("Scrittura Parametri CCEC");
    37c6:	6c ec       	ldi	r22, 0xCC	; 204
    37c8:	78 e0       	ldi	r23, 0x08	; 8
    37ca:	80 e1       	ldi	r24, 0x10	; 16
    37cc:	9d e0       	ldi	r25, 0x0D	; 13
    37ce:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN5Print5printEPKc>

  String app = "";
    37d2:	6a ee       	ldi	r22, 0xEA	; 234
    37d4:	71 e0       	ldi	r23, 0x01	; 1
    37d6:	ce 01       	movw	r24, r28
    37d8:	01 96       	adiw	r24, 0x01	; 1
    37da:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
//   if (write_eeprom_string_struct(ParametriCCEC[0])) { Serial.println("WRITE OK");}
//   if (write_eeprom_string_struct(ParametriCCEC[1])) { Serial.println("WRITE OK");}
//   if (write_eeprom_string_struct(ParametriCCEC[2])) { Serial.println("WRITE OK");}
//   if (write_eeprom_string_struct(ParametriCCEC[3])) { Serial.println("WRITE OK");}

  printLine();  
    37de:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
/*******************************************************************************************/
  DDRC |= (1 << BUZZER); // set pin BUZZER (PC6) for output
    37e2:	3e 9a       	sbi	0x07, 6	; 7
  DDRC |= (1 << RELE1);  // Rele1
    37e4:	3f 9a       	sbi	0x07, 7	; 7
  DDRA |= (1 << RELE2);  // Rele2   // set PA7 e PC7 come output
    37e6:	0f 9a       	sbi	0x01, 7	; 1
    37e8:	8f e3       	ldi	r24, 0x3F	; 63
    37ea:	9c e9       	ldi	r25, 0x9C	; 156
    37ec:	01 97       	sbiw	r24, 0x01	; 1
    37ee:	f1 f7       	brne	.-4      	; 0x37ec <setup+0x126>
    37f0:	00 c0       	rjmp	.+0      	; 0x37f2 <setup+0x12c>
    37f2:	00 00       	nop
  _delay_ms(10);
  SET_BIT(PORTC, RELE1); // Apri RELE1
    37f4:	47 9a       	sbi	0x08, 7	; 8
    37f6:	8f e3       	ldi	r24, 0x3F	; 63
    37f8:	9c e9       	ldi	r25, 0x9C	; 156
    37fa:	01 97       	sbiw	r24, 0x01	; 1
    37fc:	f1 f7       	brne	.-4      	; 0x37fa <setup+0x134>
    37fe:	00 c0       	rjmp	.+0      	; 0x3800 <setup+0x13a>
    3800:	00 00       	nop
  _delay_ms(10);
  SET_BIT(PORTA, RELE2); // Apri RELE2
    3802:	17 9a       	sbi	0x02, 7	; 2
  printLine();
    3804:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>

  /***************************LCD******************************/

  lcd.begin(20, 4);        // Inizializza display LCD 20x4 e accendi e spegni 2 volte
    3808:	20 e0       	ldi	r18, 0x00	; 0
    380a:	44 e0       	ldi	r20, 0x04	; 4
    380c:	64 e1       	ldi	r22, 0x14	; 20
    380e:	89 e4       	ldi	r24, 0x49	; 73
    3810:	9b e0       	ldi	r25, 0x0B	; 11
    3812:	0e 94 6c 32 	call	0x64d8	; 0x64d8 <_ZN17LiquidCrystal_I2C5beginEhhh>

  // ------- 2 blinks -------------
  for (int i = 0; i < 2; i++)
  {
    lcd.backlight();
    3816:	89 e4       	ldi	r24, 0x49	; 73
    3818:	9b e0       	ldi	r25, 0x0B	; 11
    381a:	0e 94 49 30 	call	0x6092	; 0x6092 <_ZN3LCD9backlightEv>
    381e:	9f ef       	ldi	r25, 0xFF	; 255
    3820:	24 e3       	ldi	r18, 0x34	; 52
    3822:	8c e0       	ldi	r24, 0x0C	; 12
    3824:	91 50       	subi	r25, 0x01	; 1
    3826:	20 40       	sbci	r18, 0x00	; 0
    3828:	80 40       	sbci	r24, 0x00	; 0
    382a:	e1 f7       	brne	.-8      	; 0x3824 <setup+0x15e>
    382c:	00 c0       	rjmp	.+0      	; 0x382e <setup+0x168>
    382e:	00 00       	nop
    _delay_ms(250);
    lcd.noBacklight();
    3830:	89 e4       	ldi	r24, 0x49	; 73
    3832:	9b e0       	ldi	r25, 0x0B	; 11
    3834:	0e 94 51 30 	call	0x60a2	; 0x60a2 <_ZN3LCD11noBacklightEv>
    3838:	9f ef       	ldi	r25, 0xFF	; 255
    383a:	24 e3       	ldi	r18, 0x34	; 52
    383c:	8c e0       	ldi	r24, 0x0C	; 12
    383e:	91 50       	subi	r25, 0x01	; 1
    3840:	20 40       	sbci	r18, 0x00	; 0
    3842:	80 40       	sbci	r24, 0x00	; 0
    3844:	e1 f7       	brne	.-8      	; 0x383e <setup+0x178>
    3846:	00 c0       	rjmp	.+0      	; 0x3848 <setup+0x182>
    3848:	00 00       	nop
  lcd.begin(20, 4);        // Inizializza display LCD 20x4 e accendi e spegni 2 volte

  // ------- 2 blinks -------------
  for (int i = 0; i < 2; i++)
  {
    lcd.backlight();
    384a:	89 e4       	ldi	r24, 0x49	; 73
    384c:	9b e0       	ldi	r25, 0x0B	; 11
    384e:	0e 94 49 30 	call	0x6092	; 0x6092 <_ZN3LCD9backlightEv>
    3852:	9f ef       	ldi	r25, 0xFF	; 255
    3854:	24 e3       	ldi	r18, 0x34	; 52
    3856:	8c e0       	ldi	r24, 0x0C	; 12
    3858:	91 50       	subi	r25, 0x01	; 1
    385a:	20 40       	sbci	r18, 0x00	; 0
    385c:	80 40       	sbci	r24, 0x00	; 0
    385e:	e1 f7       	brne	.-8      	; 0x3858 <setup+0x192>
    3860:	00 c0       	rjmp	.+0      	; 0x3862 <setup+0x19c>
    3862:	00 00       	nop
    _delay_ms(250);
    lcd.noBacklight();
    3864:	89 e4       	ldi	r24, 0x49	; 73
    3866:	9b e0       	ldi	r25, 0x0B	; 11
    3868:	0e 94 51 30 	call	0x60a2	; 0x60a2 <_ZN3LCD11noBacklightEv>
    386c:	9f ef       	ldi	r25, 0xFF	; 255
    386e:	24 e3       	ldi	r18, 0x34	; 52
    3870:	8c e0       	ldi	r24, 0x0C	; 12
    3872:	91 50       	subi	r25, 0x01	; 1
    3874:	20 40       	sbci	r18, 0x00	; 0
    3876:	80 40       	sbci	r24, 0x00	; 0
    3878:	e1 f7       	brne	.-8      	; 0x3872 <setup+0x1ac>
    387a:	00 c0       	rjmp	.+0      	; 0x387c <setup+0x1b6>
    387c:	00 00       	nop
    _delay_ms(250);
  }

  lcd.createChar(1, Clessidra); // Creo CHAR Clessidra
    387e:	41 e5       	ldi	r20, 0x51	; 81
    3880:	51 e0       	ldi	r21, 0x01	; 1
    3882:	61 e0       	ldi	r22, 0x01	; 1
    3884:	89 e4       	ldi	r24, 0x49	; 73
    3886:	9b e0       	ldi	r25, 0x0B	; 11
    3888:	0e 94 2f 31 	call	0x625e	; 0x625e <_ZN3LCD10createCharEhPh>
    388c:	9f ef       	ldi	r25, 0xFF	; 255
    388e:	29 ef       	ldi	r18, 0xF9	; 249
    3890:	80 e0       	ldi	r24, 0x00	; 0
    3892:	91 50       	subi	r25, 0x01	; 1
    3894:	20 40       	sbci	r18, 0x00	; 0
    3896:	80 40       	sbci	r24, 0x00	; 0
    3898:	e1 f7       	brne	.-8      	; 0x3892 <setup+0x1cc>
    389a:	00 c0       	rjmp	.+0      	; 0x389c <setup+0x1d6>
    389c:	00 00       	nop
  _delay_ms(20);
  lcd.backlight();
    389e:	89 e4       	ldi	r24, 0x49	; 73
    38a0:	9b e0       	ldi	r25, 0x0B	; 11
    38a2:	0e 94 49 30 	call	0x6092	; 0x6092 <_ZN3LCD9backlightEv>
    38a6:	01 ed       	ldi	r16, 0xD1	; 209
    38a8:	1a e0       	ldi	r17, 0x0A	; 10

  for (int r = 0; r < 4; r++)
    righeDisplay[r] = "";
    38aa:	6a ee       	ldi	r22, 0xEA	; 234
    38ac:	71 e0       	ldi	r23, 0x01	; 1
    38ae:	c8 01       	movw	r24, r16
    38b0:	0e 94 36 3c 	call	0x786c	; 0x786c <_ZN6StringaSEPKc>
    38b4:	0a 5f       	subi	r16, 0xFA	; 250
    38b6:	1f 4f       	sbci	r17, 0xFF	; 255

  lcd.createChar(1, Clessidra); // Creo CHAR Clessidra
  _delay_ms(20);
  lcd.backlight();

  for (int r = 0; r < 4; r++)
    38b8:	9a e0       	ldi	r25, 0x0A	; 10
    38ba:	09 3e       	cpi	r16, 0xE9	; 233
    38bc:	19 07       	cpc	r17, r25
    38be:	a9 f7       	brne	.-22     	; 0x38aa <setup+0x1e4>
    righeDisplay[r] = "";

  printLine();
    38c0:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>

  /***************************NFC*************************/

  nfc.begin();
    38c4:	82 e3       	ldi	r24, 0x32	; 50
    38c6:	9b e0       	ldi	r25, 0x0B	; 11
    38c8:	d7 d1       	rcall	.+942    	; 0x3c78 <_ZN9NFC_PN5325beginEv>
    38ca:	2f ef       	ldi	r18, 0xFF	; 255
    38cc:	80 e7       	ldi	r24, 0x70	; 112
    38ce:	92 e0       	ldi	r25, 0x02	; 2
    38d0:	21 50       	subi	r18, 0x01	; 1
    38d2:	80 40       	sbci	r24, 0x00	; 0
    38d4:	90 40       	sbci	r25, 0x00	; 0
    38d6:	e1 f7       	brne	.-8      	; 0x38d0 <setup+0x20a>
    38d8:	00 c0       	rjmp	.+0      	; 0x38da <setup+0x214>
    38da:	00 00       	nop

  _delay_ms(50);

  uint32_t versiondata = nfc.getFirmwareVersion();
    38dc:	82 e3       	ldi	r24, 0x32	; 50
    38de:	9b e0       	ldi	r25, 0x0B	; 11
    38e0:	70 d3       	rcall	.+1760   	; 0x3fc2 <_ZN9NFC_PN53218getFirmwareVersionEv>
    38e2:	6b 01       	movw	r12, r22
    38e4:	7c 01       	movw	r14, r24
  if (! versiondata) {
    38e6:	67 2b       	or	r22, r23
    38e8:	68 2b       	or	r22, r24
    38ea:	69 2b       	or	r22, r25
    38ec:	69 f5       	brne	.+90     	; 0x3948 <setup+0x282>
    Serial.print("Modulo PN532 non trovato");
    38ee:	65 ee       	ldi	r22, 0xE5	; 229
    38f0:	78 e0       	ldi	r23, 0x08	; 8
    38f2:	80 e1       	ldi	r24, 0x10	; 16
    38f4:	9d e0       	ldi	r25, 0x0D	; 13
    38f6:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN5Print5printEPKc>
    lcd.backlight();
    38fa:	89 e4       	ldi	r24, 0x49	; 73
    38fc:	9b e0       	ldi	r25, 0x0B	; 11
    38fe:	0e 94 49 30 	call	0x6092	; 0x6092 <_ZN3LCD9backlightEv>
    3902:	2f ef       	ldi	r18, 0xFF	; 255
    3904:	84 e3       	ldi	r24, 0x34	; 52
    3906:	9c e0       	ldi	r25, 0x0C	; 12
    3908:	21 50       	subi	r18, 0x01	; 1
    390a:	80 40       	sbci	r24, 0x00	; 0
    390c:	90 40       	sbci	r25, 0x00	; 0
    390e:	e1 f7       	brne	.-8      	; 0x3908 <setup+0x242>
    3910:	00 c0       	rjmp	.+0      	; 0x3912 <setup+0x24c>
    3912:	00 00       	nop
    _delay_ms(250);
    lcd.clear();
    3914:	89 e4       	ldi	r24, 0x49	; 73
    3916:	9b e0       	ldi	r25, 0x0B	; 11
    3918:	0e 94 61 30 	call	0x60c2	; 0x60c2 <_ZN3LCD5clearEv>
    lcd.print("Modulo PN532 non trovato ");
    391c:	6e ef       	ldi	r22, 0xFE	; 254
    391e:	78 e0       	ldi	r23, 0x08	; 8
    3920:	89 e4       	ldi	r24, 0x49	; 73
    3922:	9b e0       	ldi	r25, 0x0B	; 11
    3924:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN5Print5printEPKc>
    3928:	2f ef       	ldi	r18, 0xFF	; 255
    392a:	87 ea       	ldi	r24, 0xA7	; 167
    392c:	91 e6       	ldi	r25, 0x61	; 97
    392e:	21 50       	subi	r18, 0x01	; 1
    3930:	80 40       	sbci	r24, 0x00	; 0
    3932:	90 40       	sbci	r25, 0x00	; 0
    3934:	e1 f7       	brne	.-8      	; 0x392e <setup+0x268>
    3936:	00 c0       	rjmp	.+0      	; 0x3938 <setup+0x272>
    3938:	00 00       	nop
    _delay_ms(2000);
    StatoAttuale  = " CHIAMA ASSISTENZA";
    393a:	68 e1       	ldi	r22, 0x18	; 24
    393c:	79 e0       	ldi	r23, 0x09	; 9
    393e:	8c e2       	ldi	r24, 0x2C	; 44
    3940:	9b e0       	ldi	r25, 0x0B	; 11
    3942:	0e 94 36 3c 	call	0x786c	; 0x786c <_ZN6StringaSEPKc>
    3946:	06 c0       	rjmp	.+12     	; 0x3954 <setup+0x28e>
    //while (1); // halt  // Aspetta per sempre
  } else {
    Serial.println("Modulo NFC OK ......");
    3948:	6b e2       	ldi	r22, 0x2B	; 43
    394a:	79 e0       	ldi	r23, 0x09	; 9
    394c:	80 e1       	ldi	r24, 0x10	; 16
    394e:	9d e0       	ldi	r25, 0x0D	; 13
    3950:	0e 94 1c 39 	call	0x7238	; 0x7238 <_ZN5Print7printlnEPKc>
  }

  Serial.print("Found chip PN5"); Serial.println((versiondata >> 24) & 0xFF, HEX);
    3954:	60 e4       	ldi	r22, 0x40	; 64
    3956:	79 e0       	ldi	r23, 0x09	; 9
    3958:	80 e1       	ldi	r24, 0x10	; 16
    395a:	9d e0       	ldi	r25, 0x0D	; 13
    395c:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN5Print5printEPKc>
    3960:	4f 2d       	mov	r20, r15
    3962:	55 27       	eor	r21, r21
    3964:	66 27       	eor	r22, r22
    3966:	77 27       	eor	r23, r23
    3968:	20 e1       	ldi	r18, 0x10	; 16
    396a:	30 e0       	ldi	r19, 0x00	; 0
    396c:	80 e1       	ldi	r24, 0x10	; 16
    396e:	9d e0       	ldi	r25, 0x0D	; 13
    3970:	0e 94 8a 39 	call	0x7314	; 0x7314 <_ZN5Print7printlnEmi>
  Serial.print("Firmware ver. "); Serial.print((versiondata >> 16) & 0xFF, DEC);
    3974:	6f e4       	ldi	r22, 0x4F	; 79
    3976:	79 e0       	ldi	r23, 0x09	; 9
    3978:	80 e1       	ldi	r24, 0x10	; 16
    397a:	9d e0       	ldi	r25, 0x0D	; 13
    397c:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN5Print5printEPKc>
    3980:	4e 2d       	mov	r20, r14
    3982:	50 e0       	ldi	r21, 0x00	; 0
    3984:	60 e0       	ldi	r22, 0x00	; 0
    3986:	70 e0       	ldi	r23, 0x00	; 0
    3988:	2a e0       	ldi	r18, 0x0A	; 10
    398a:	30 e0       	ldi	r19, 0x00	; 0
    398c:	80 e1       	ldi	r24, 0x10	; 16
    398e:	9d e0       	ldi	r25, 0x0D	; 13
    3990:	0e 94 73 39 	call	0x72e6	; 0x72e6 <_ZN5Print5printEmi>
  Serial.print('.'); Serial.println((versiondata >> 8) & 0xFF, DEC);
    3994:	6e e2       	ldi	r22, 0x2E	; 46
    3996:	80 e1       	ldi	r24, 0x10	; 16
    3998:	9d e0       	ldi	r25, 0x0D	; 13
    399a:	0e 94 f2 38 	call	0x71e4	; 0x71e4 <_ZN5Print5printEc>
    399e:	4d 2d       	mov	r20, r13
    39a0:	50 e0       	ldi	r21, 0x00	; 0
    39a2:	60 e0       	ldi	r22, 0x00	; 0
    39a4:	70 e0       	ldi	r23, 0x00	; 0
    39a6:	2a e0       	ldi	r18, 0x0A	; 10
    39a8:	30 e0       	ldi	r19, 0x00	; 0
    39aa:	80 e1       	ldi	r24, 0x10	; 16
    39ac:	9d e0       	ldi	r25, 0x0D	; 13
    39ae:	0e 94 8a 39 	call	0x7314	; 0x7314 <_ZN5Print7printlnEmi>

  nfc.setPassiveActivationRetries(0xFF);
    39b2:	6f ef       	ldi	r22, 0xFF	; 255
    39b4:	82 e3       	ldi	r24, 0x32	; 50
    39b6:	9b e0       	ldi	r25, 0x0B	; 11
    39b8:	7a d3       	rcall	.+1780   	; 0x40ae <_ZN9NFC_PN53227setPassiveActivationRetriesEh>
  nfc.SAMConfig();
    39ba:	82 e3       	ldi	r24, 0x32	; 50
    39bc:	9b e0       	ldi	r25, 0x0B	; 11
    39be:	49 d3       	rcall	.+1682   	; 0x4052 <_ZN9NFC_PN5329SAMConfigEv>
    39c0:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
  printLine();
    39c4:	40 ea       	ldi	r20, 0xA0	; 160
  
  /*************************** RTC **********************************/
  while (!DS3231M.begin()) {
    39c6:	56 e8       	ldi	r21, 0x86	; 134
    39c8:	61 e0       	ldi	r22, 0x01	; 1
    39ca:	70 e0       	ldi	r23, 0x00	; 0
    39cc:	83 e9       	ldi	r24, 0x93	; 147
    39ce:	9a e0       	ldi	r25, 0x0A	; 10
    39d0:	8a d6       	rcall	.+3348   	; 0x46e6 <_ZN13DS3231M_Class5beginEm>
    39d2:	81 11       	cpse	r24, r1
    39d4:	10 c0       	rjmp	.+32     	; 0x39f6 <setup+0x330>
    39d6:	64 ee       	ldi	r22, 0xE4	; 228
    Serial.println(F("non trovo modulo RTC DS3231MM. Riprovo tra 3s."));
    39d8:	71 e0       	ldi	r23, 0x01	; 1
    39da:	80 e1       	ldi	r24, 0x10	; 16
    39dc:	9d e0       	ldi	r25, 0x0D	; 13
    39de:	0e 94 fc 38 	call	0x71f8	; 0x71f8 <_ZN5Print7printlnEPK19__FlashStringHelper>
    39e2:	2f ef       	ldi	r18, 0xFF	; 255
    39e4:	83 ed       	ldi	r24, 0xD3	; 211
    39e6:	90 e3       	ldi	r25, 0x30	; 48
    39e8:	21 50       	subi	r18, 0x01	; 1
    39ea:	80 40       	sbci	r24, 0x00	; 0
    39ec:	90 40       	sbci	r25, 0x00	; 0
    39ee:	e1 f7       	brne	.-8      	; 0x39e8 <setup+0x322>
    39f0:	00 c0       	rjmp	.+0      	; 0x39f2 <setup+0x32c>
    39f2:	00 00       	nop
    39f4:	e7 cf       	rjmp	.-50     	; 0x39c4 <setup+0x2fe>
    39f6:	2f ef       	ldi	r18, 0xFF	; 255
    39f8:	80 e7       	ldi	r24, 0x70	; 112
    39fa:	92 e0       	ldi	r25, 0x02	; 2
    39fc:	21 50       	subi	r18, 0x01	; 1
    39fe:	80 40       	sbci	r24, 0x00	; 0
    3a00:	90 40       	sbci	r25, 0x00	; 0
    3a02:	e1 f7       	brne	.-8      	; 0x39fc <setup+0x336>
    3a04:	00 c0       	rjmp	.+0      	; 0x3a06 <setup+0x340>
    3a06:	00 00       	nop
    3a08:	66 ec       	ldi	r22, 0xC6	; 198
    _delay_ms(1000);
  }
  _delay_ms(50);

  Serial.println(F("RTC chip DS3231M initialized."));
    3a0a:	71 e0       	ldi	r23, 0x01	; 1
    3a0c:	80 e1       	ldi	r24, 0x10	; 16
    3a0e:	9d e0       	ldi	r25, 0x0D	; 13
    3a10:	0e 94 fc 38 	call	0x71f8	; 0x71f8 <_ZN5Print7printlnEPK19__FlashStringHelper>
  DS3231M.adjust();
    3a14:	83 e9       	ldi	r24, 0x93	; 147
    3a16:	9a e0       	ldi	r25, 0x0A	; 10
    3a18:	c4 d7       	rcall	.+3976   	; 0x49a2 <_ZN13DS3231M_Class6adjustEv>
    3a1a:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
  printLine();
    3a1e:	6e e5       	ldi	r22, 0x5E	; 94
  /*************************** POTENZIOMETRI ************************/
  Serial.println("Inizializzo POTENZIOMETRI per livello pulser.......");
    3a20:	79 e0       	ldi	r23, 0x09	; 9
    3a22:	80 e1       	ldi	r24, 0x10	; 16
    3a24:	9d e0       	ldi	r25, 0x0D	; 13
    3a26:	0e 94 1c 39 	call	0x7238	; 0x7238 <_ZN5Print7printlnEPKc>
    3a2a:	8a eb       	ldi	r24, 0xBA	; 186

  Wire.begin(); // join i2c bus (address optional for master)
    3a2c:	9c e0       	ldi	r25, 0x0C	; 12
    3a2e:	0e 94 cf 35 	call	0x6b9e	; 0x6b9e <_ZN7TwoWire5beginEv>
    3a32:	68 e2       	ldi	r22, 0x28	; 40
  Wire.beginTransmission(0x28);  // (0x50) POTENZIOMETRO U11
    3a34:	70 e0       	ldi	r23, 0x00	; 0
    3a36:	8a eb       	ldi	r24, 0xBA	; 186
    3a38:	9c e0       	ldi	r25, 0x0C	; 12
    3a3a:	0e 94 ec 35 	call	0x6bd8	; 0x6bd8 <_ZN7TwoWire17beginTransmissionEi>
    3a3e:	60 e0       	ldi	r22, 0x00	; 0
  Wire.write(byte(0x00));        // Wiper Register
    3a40:	8a eb       	ldi	r24, 0xBA	; 186
    3a42:	9c e0       	ldi	r25, 0x0C	; 12
    3a44:	0e 94 91 35 	call	0x6b22	; 0x6b22 <_ZN7TwoWire5writeEh>
    3a48:	60 e5       	ldi	r22, 0x50	; 80
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    3a4a:	8a eb       	ldi	r24, 0xBA	; 186
    3a4c:	9c e0       	ldi	r25, 0x0C	; 12
    3a4e:	0e 94 91 35 	call	0x6b22	; 0x6b22 <_ZN7TwoWire5writeEh>
    3a52:	8a eb       	ldi	r24, 0xBA	; 186
  Wire.write(80);              // Valore del potenziomentro
  Wire.endTransmission();
    3a54:	9c e0       	ldi	r25, 0x0C	; 12
    3a56:	0e 94 63 36 	call	0x6cc6	; 0x6cc6 <_ZN7TwoWire15endTransmissionEv>
    3a5a:	2f ef       	ldi	r18, 0xFF	; 255
    3a5c:	80 e7       	ldi	r24, 0x70	; 112
    3a5e:	92 e0       	ldi	r25, 0x02	; 2
    3a60:	21 50       	subi	r18, 0x01	; 1
    3a62:	80 40       	sbci	r24, 0x00	; 0
    3a64:	90 40       	sbci	r25, 0x00	; 0
    3a66:	e1 f7       	brne	.-8      	; 0x3a60 <setup+0x39a>
    3a68:	00 c0       	rjmp	.+0      	; 0x3a6a <setup+0x3a4>
    3a6a:	00 00       	nop
    3a6c:	62 e5       	ldi	r22, 0x52	; 82

  _delay_ms(50);

  Wire.beginTransmission(0x52);  // (0x52) POTENZIOMETRO U12
    3a6e:	70 e0       	ldi	r23, 0x00	; 0
    3a70:	8a eb       	ldi	r24, 0xBA	; 186
    3a72:	9c e0       	ldi	r25, 0x0C	; 12
    3a74:	0e 94 ec 35 	call	0x6bd8	; 0x6bd8 <_ZN7TwoWire17beginTransmissionEi>
    3a78:	60 e0       	ldi	r22, 0x00	; 0
  Wire.write(byte(0x00));        // Wiper Register
    3a7a:	8a eb       	ldi	r24, 0xBA	; 186
    3a7c:	9c e0       	ldi	r25, 0x0C	; 12
    3a7e:	0e 94 91 35 	call	0x6b22	; 0x6b22 <_ZN7TwoWire5writeEh>
    3a82:	60 e5       	ldi	r22, 0x50	; 80
    3a84:	8a eb       	ldi	r24, 0xBA	; 186
    3a86:	9c e0       	ldi	r25, 0x0C	; 12
    3a88:	0e 94 91 35 	call	0x6b22	; 0x6b22 <_ZN7TwoWire5writeEh>
    3a8c:	8a eb       	ldi	r24, 0xBA	; 186
  Wire.write(80);                // Valore del potenziomentro circa 6 volt
  Wire.endTransmission();
    3a8e:	9c e0       	ldi	r25, 0x0C	; 12
    3a90:	0e 94 63 36 	call	0x6cc6	; 0x6cc6 <_ZN7TwoWire15endTransmissionEv>
    3a94:	8a eb       	ldi	r24, 0xBA	; 186
  Wire.end();
    3a96:	9c e0       	ldi	r25, 0x0C	; 12
    3a98:	0e 94 de 35 	call	0x6bbc	; 0x6bbc <_ZN7TwoWire3endEv>
    3a9c:	62 e9       	ldi	r22, 0x92	; 146
  Serial.println("POTENZIOMETRI OK");
    3a9e:	79 e0       	ldi	r23, 0x09	; 9
    3aa0:	80 e1       	ldi	r24, 0x10	; 16
    3aa2:	9d e0       	ldi	r25, 0x0D	; 13
    3aa4:	0e 94 1c 39 	call	0x7238	; 0x7238 <_ZN5Print7printlnEPKc>
    3aa8:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
  printLine();
  /*************************KEYPAD*********************/
  gpio.begin(I2C_PCA9534_ADDR);
    3aac:	60 e2       	ldi	r22, 0x20	; 32
    3aae:	82 e7       	ldi	r24, 0x72	; 114
    3ab0:	9a e0       	ldi	r25, 0x0A	; 10
    3ab2:	36 d0       	rcall	.+108    	; 0x3b20 <_ZN7PCA95345beginEh>
  // set REG IOexpander OPREG 11000011,INVREG 00000000,CONFREG 00111100
  gpio.setporteIoExp(0xC3, 0x00, 0x3C);
    3ab4:	2c e3       	ldi	r18, 0x3C	; 60
    3ab6:	40 e0       	ldi	r20, 0x00	; 0
    3ab8:	63 ec       	ldi	r22, 0xC3	; 195
    3aba:	82 e7       	ldi	r24, 0x72	; 114
    3abc:	9a e0       	ldi	r25, 0x0A	; 10
    3abe:	36 d0       	rcall	.+108    	; 0x3b2c <_ZN7PCA953413setporteIoExpEhhh>
    3ac0:	8e ef       	ldi	r24, 0xFE	; 254
  /**************** SETTING INIZIALI ******************/

  stato_procedura = - 2; // set stato di partenza
    3ac2:	9f ef       	ldi	r25, 0xFF	; 255
    3ac4:	90 93 23 0b 	sts	0x0B23, r25	; 0x800b23 <stato_procedura+0x1>
    3ac8:	80 93 22 0b 	sts	0x0B22, r24	; 0x800b22 <stato_procedura>
    3acc:	63 ea       	ldi	r22, 0xA3	; 163
  StatoAttuale = "Starting ....";
    3ace:	79 e0       	ldi	r23, 0x09	; 9
    3ad0:	8c e2       	ldi	r24, 0x2C	; 44
    3ad2:	9b e0       	ldi	r25, 0x0B	; 11
    3ad4:	0e 94 36 3c 	call	0x786c	; 0x786c <_ZN6StringaSEPKc>
    3ad8:	6c e2       	ldi	r22, 0x2C	; 44
  Serial.println(StatoAttuale);
    3ada:	7b e0       	ldi	r23, 0x0B	; 11
    3adc:	80 e1       	ldi	r24, 0x10	; 16
    3ade:	9d e0       	ldi	r25, 0x0D	; 13
    3ae0:	0e 94 0c 39 	call	0x7218	; 0x7218 <_ZN5Print7printlnERK6String>
    3ae4:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
  printLine();
    3ae8:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
  printLine();
    3aec:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
  printLine();
    3af0:	ce 01       	movw	r24, r28
  Serial.print("EEPROM utilizzata (byte): ");
  Serial.print(EEPROM.length());
  Serial.println(" ");
  Serial.print("Scrittura Parametri CCEC");

  String app = "";
    3af2:	01 96       	adiw	r24, 0x01	; 1
    3af4:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
    3af8:	26 96       	adiw	r28, 0x06	; 6
  StatoAttuale = "Starting ....";
  Serial.println(StatoAttuale);
  printLine();
  printLine();
  printLine();
}
    3afa:	0f b6       	in	r0, 0x3f	; 63
    3afc:	f8 94       	cli
    3afe:	de bf       	out	0x3e, r29	; 62
    3b00:	0f be       	out	0x3f, r0	; 63
    3b02:	cd bf       	out	0x3d, r28	; 61
    3b04:	df 91       	pop	r29
    3b06:	cf 91       	pop	r28
    3b08:	1f 91       	pop	r17
    3b0a:	0f 91       	pop	r16
    3b0c:	ff 90       	pop	r15
    3b0e:	ef 90       	pop	r14
    3b10:	df 90       	pop	r13
    3b12:	cf 90       	pop	r12
    3b14:	08 95       	ret

00003b16 <_ZN7PCA9534C1Ev>:
    3b16:	fc 01       	movw	r30, r24
	Wire.requestFrom(_i2caddr, 1);
	while (Wire.available()) {
		buff = Wire.read();
	}
	return (buff & (1 << pin)) ? HIGH : LOW;
}
    3b18:	10 82       	st	Z, r1
    3b1a:	11 82       	std	Z+1, r1	; 0x01
    3b1c:	12 82       	std	Z+2, r1	; 0x02
    3b1e:	08 95       	ret

00003b20 <_ZN7PCA95345beginEh>:
    3b20:	fc 01       	movw	r30, r24
    3b22:	60 83       	st	Z, r22
    3b24:	8a eb       	ldi	r24, 0xBA	; 186
    3b26:	9c e0       	ldi	r25, 0x0C	; 12
    3b28:	0c 94 cf 35 	jmp	0x6b9e	; 0x6b9e <_ZN7TwoWire5beginEv>

00003b2c <_ZN7PCA953413setporteIoExpEhhh>:
    3b2c:	ff 92       	push	r15
    3b2e:	0f 93       	push	r16
    3b30:	1f 93       	push	r17
    3b32:	cf 93       	push	r28
    3b34:	df 93       	push	r29
    3b36:	ec 01       	movw	r28, r24
    3b38:	f6 2e       	mov	r15, r22
    3b3a:	04 2f       	mov	r16, r20
    3b3c:	12 2f       	mov	r17, r18
    3b3e:	68 81       	ld	r22, Y
    3b40:	8a eb       	ldi	r24, 0xBA	; 186
    3b42:	9c e0       	ldi	r25, 0x0C	; 12
    3b44:	0e 94 e2 35 	call	0x6bc4	; 0x6bc4 <_ZN7TwoWire17beginTransmissionEh>
    3b48:	61 e0       	ldi	r22, 0x01	; 1
    3b4a:	8a eb       	ldi	r24, 0xBA	; 186
    3b4c:	9c e0       	ldi	r25, 0x0C	; 12
    3b4e:	0e 94 91 35 	call	0x6b22	; 0x6b22 <_ZN7TwoWire5writeEh>
    3b52:	6f 2d       	mov	r22, r15
    3b54:	8a eb       	ldi	r24, 0xBA	; 186
    3b56:	9c e0       	ldi	r25, 0x0C	; 12
    3b58:	0e 94 91 35 	call	0x6b22	; 0x6b22 <_ZN7TwoWire5writeEh>
    3b5c:	8a eb       	ldi	r24, 0xBA	; 186
    3b5e:	9c e0       	ldi	r25, 0x0C	; 12
    3b60:	0e 94 63 36 	call	0x6cc6	; 0x6cc6 <_ZN7TwoWire15endTransmissionEv>
    3b64:	68 81       	ld	r22, Y
    3b66:	8a eb       	ldi	r24, 0xBA	; 186
    3b68:	9c e0       	ldi	r25, 0x0C	; 12
    3b6a:	0e 94 e2 35 	call	0x6bc4	; 0x6bc4 <_ZN7TwoWire17beginTransmissionEh>
    3b6e:	62 e0       	ldi	r22, 0x02	; 2
    3b70:	8a eb       	ldi	r24, 0xBA	; 186
    3b72:	9c e0       	ldi	r25, 0x0C	; 12
    3b74:	0e 94 91 35 	call	0x6b22	; 0x6b22 <_ZN7TwoWire5writeEh>
    3b78:	60 2f       	mov	r22, r16
    3b7a:	8a eb       	ldi	r24, 0xBA	; 186
    3b7c:	9c e0       	ldi	r25, 0x0C	; 12
    3b7e:	0e 94 91 35 	call	0x6b22	; 0x6b22 <_ZN7TwoWire5writeEh>
    3b82:	8a eb       	ldi	r24, 0xBA	; 186
    3b84:	9c e0       	ldi	r25, 0x0C	; 12
    3b86:	0e 94 63 36 	call	0x6cc6	; 0x6cc6 <_ZN7TwoWire15endTransmissionEv>
    3b8a:	8f e3       	ldi	r24, 0x3F	; 63
    3b8c:	9c e9       	ldi	r25, 0x9C	; 156
    3b8e:	01 97       	sbiw	r24, 0x01	; 1
    3b90:	f1 f7       	brne	.-4      	; 0x3b8e <_ZN7PCA953413setporteIoExpEhhh+0x62>
    3b92:	00 c0       	rjmp	.+0      	; 0x3b94 <_ZN7PCA953413setporteIoExpEhhh+0x68>
    3b94:	00 00       	nop
    3b96:	68 81       	ld	r22, Y
    3b98:	8a eb       	ldi	r24, 0xBA	; 186
    3b9a:	9c e0       	ldi	r25, 0x0C	; 12
    3b9c:	0e 94 e2 35 	call	0x6bc4	; 0x6bc4 <_ZN7TwoWire17beginTransmissionEh>
    3ba0:	63 e0       	ldi	r22, 0x03	; 3
    3ba2:	8a eb       	ldi	r24, 0xBA	; 186
    3ba4:	9c e0       	ldi	r25, 0x0C	; 12
    3ba6:	0e 94 91 35 	call	0x6b22	; 0x6b22 <_ZN7TwoWire5writeEh>
    3baa:	61 2f       	mov	r22, r17
    3bac:	8a eb       	ldi	r24, 0xBA	; 186
    3bae:	9c e0       	ldi	r25, 0x0C	; 12
    3bb0:	0e 94 91 35 	call	0x6b22	; 0x6b22 <_ZN7TwoWire5writeEh>
    3bb4:	8a eb       	ldi	r24, 0xBA	; 186
    3bb6:	9c e0       	ldi	r25, 0x0C	; 12
    3bb8:	0e 94 63 36 	call	0x6cc6	; 0x6cc6 <_ZN7TwoWire15endTransmissionEv>
    3bbc:	8f e3       	ldi	r24, 0x3F	; 63
    3bbe:	9c e9       	ldi	r25, 0x9C	; 156
    3bc0:	01 97       	sbiw	r24, 0x01	; 1
    3bc2:	f1 f7       	brne	.-4      	; 0x3bc0 <_ZN7PCA953413setporteIoExpEhhh+0x94>
    3bc4:	00 c0       	rjmp	.+0      	; 0x3bc6 <_ZN7PCA953413setporteIoExpEhhh+0x9a>
    3bc6:	00 00       	nop
    3bc8:	df 91       	pop	r29
    3bca:	cf 91       	pop	r28
    3bcc:	1f 91       	pop	r17
    3bce:	0f 91       	pop	r16
    3bd0:	ff 90       	pop	r15
    3bd2:	08 95       	ret

00003bd4 <_ZN7PCA953410setCONFREGEh>:
    3bd4:	cf 93       	push	r28
    3bd6:	c6 2f       	mov	r28, r22
    3bd8:	fc 01       	movw	r30, r24
    3bda:	60 81       	ld	r22, Z
    3bdc:	8a eb       	ldi	r24, 0xBA	; 186
    3bde:	9c e0       	ldi	r25, 0x0C	; 12
    3be0:	0e 94 e2 35 	call	0x6bc4	; 0x6bc4 <_ZN7TwoWire17beginTransmissionEh>
    3be4:	63 e0       	ldi	r22, 0x03	; 3
    3be6:	8a eb       	ldi	r24, 0xBA	; 186
    3be8:	9c e0       	ldi	r25, 0x0C	; 12
    3bea:	0e 94 91 35 	call	0x6b22	; 0x6b22 <_ZN7TwoWire5writeEh>
    3bee:	6c 2f       	mov	r22, r28
    3bf0:	8a eb       	ldi	r24, 0xBA	; 186
    3bf2:	9c e0       	ldi	r25, 0x0C	; 12
    3bf4:	0e 94 91 35 	call	0x6b22	; 0x6b22 <_ZN7TwoWire5writeEh>
    3bf8:	8a eb       	ldi	r24, 0xBA	; 186
    3bfa:	9c e0       	ldi	r25, 0x0C	; 12
    3bfc:	cf 91       	pop	r28
    3bfe:	0c 94 63 36 	jmp	0x6cc6	; 0x6cc6 <_ZN7TwoWire15endTransmissionEv>

00003c02 <_ZN7PCA953416Read_IP_REGISTEREv>:

uint8_t PCA9534::Read_IP_REGISTER() {
    3c02:	cf 93       	push	r28
    3c04:	df 93       	push	r29
    3c06:	ec 01       	movw	r28, r24
	uint8_t buff = 0;

	//_i2caddr = i2caddr;

	Wire.beginTransmission(_i2caddr);
    3c08:	68 81       	ld	r22, Y
    3c0a:	8a eb       	ldi	r24, 0xBA	; 186
    3c0c:	9c e0       	ldi	r25, 0x0C	; 12
    3c0e:	0e 94 e2 35 	call	0x6bc4	; 0x6bc4 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(PCA9534_IP_REGISTER);
    3c12:	60 e0       	ldi	r22, 0x00	; 0
    3c14:	8a eb       	ldi	r24, 0xBA	; 186
    3c16:	9c e0       	ldi	r25, 0x0C	; 12
    3c18:	0e 94 91 35 	call	0x6b22	; 0x6b22 <_ZN7TwoWire5writeEh>
	// Wire.write(_port);
	Wire.endTransmission();
    3c1c:	8a eb       	ldi	r24, 0xBA	; 186
    3c1e:	9c e0       	ldi	r25, 0x0C	; 12
    3c20:	0e 94 63 36 	call	0x6cc6	; 0x6cc6 <_ZN7TwoWire15endTransmissionEv>

	// We only need to read 1 byte of data to get the pins
	Wire.requestFrom(_i2caddr, 1);
    3c24:	68 81       	ld	r22, Y
    3c26:	70 e0       	ldi	r23, 0x00	; 0
    3c28:	41 e0       	ldi	r20, 0x01	; 1
    3c2a:	50 e0       	ldi	r21, 0x00	; 0
    3c2c:	8a eb       	ldi	r24, 0xBA	; 186
    3c2e:	9c e0       	ldi	r25, 0x0C	; 12
    3c30:	0e 94 61 36 	call	0x6cc2	; 0x6cc2 <_ZN7TwoWire11requestFromEii>
	}
	return (buff & (1 << pin)) ? HIGH : LOW;
}

uint8_t PCA9534::Read_IP_REGISTER() {
	uint8_t buff = 0;
    3c34:	c0 e0       	ldi	r28, 0x00	; 0
	// Wire.write(_port);
	Wire.endTransmission();

	// We only need to read 1 byte of data to get the pins
	Wire.requestFrom(_i2caddr, 1);
	while (Wire.available()) {
    3c36:	8a eb       	ldi	r24, 0xBA	; 186
    3c38:	9c e0       	ldi	r25, 0x0C	; 12
    3c3a:	0e 94 03 35 	call	0x6a06	; 0x6a06 <_ZN7TwoWire9availableEv>
    3c3e:	89 2b       	or	r24, r25
    3c40:	31 f0       	breq	.+12     	; 0x3c4e <_ZN7PCA953416Read_IP_REGISTEREv+0x4c>
		buff = Wire.read();
    3c42:	8a eb       	ldi	r24, 0xBA	; 186
    3c44:	9c e0       	ldi	r25, 0x0C	; 12
    3c46:	0e 94 0b 35 	call	0x6a16	; 0x6a16 <_ZN7TwoWire4readEv>
    3c4a:	c8 2f       	mov	r28, r24
	// Wire.write(_port);
	Wire.endTransmission();

	// We only need to read 1 byte of data to get the pins
	Wire.requestFrom(_i2caddr, 1);
	while (Wire.available()) {
    3c4c:	f4 cf       	rjmp	.-24     	; 0x3c36 <_ZN7PCA953416Read_IP_REGISTEREv+0x34>
		buff = Wire.read();
	}
	return buff;
    3c4e:	8c 2f       	mov	r24, r28
    3c50:	df 91       	pop	r29
    3c52:	cf 91       	pop	r28
    3c54:	08 95       	ret

00003c56 <_ZN9NFC_PN532C1Ehh>:
    #endif
    return false;
  }

  return true;
}
    3c56:	cf 93       	push	r28
    3c58:	df 93       	push	r29
    3c5a:	ec 01       	movw	r28, r24
    3c5c:	86 2f       	mov	r24, r22
    3c5e:	6c 83       	std	Y+4, r22	; 0x04
    3c60:	4d 83       	std	Y+5, r20	; 0x05
    3c62:	1d 8a       	std	Y+21, r1	; 0x15
    3c64:	1e 8a       	std	Y+22, r1	; 0x16
    3c66:	60 e0       	ldi	r22, 0x00	; 0
    3c68:	0e 94 bd 3a 	call	0x757a	; 0x757a <pinMode>
    3c6c:	61 e0       	ldi	r22, 0x01	; 1
    3c6e:	8d 81       	ldd	r24, Y+5	; 0x05
    3c70:	df 91       	pop	r29
    3c72:	cf 91       	pop	r28
    3c74:	0c 94 bd 3a 	jmp	0x757a	; 0x757a <pinMode>

00003c78 <_ZN9NFC_PN5325beginEv>:
    3c78:	cf 93       	push	r28
    3c7a:	df 93       	push	r29
    3c7c:	ec 01       	movw	r28, r24
    3c7e:	8a eb       	ldi	r24, 0xBA	; 186
    3c80:	9c e0       	ldi	r25, 0x0C	; 12
    3c82:	0e 94 cf 35 	call	0x6b9e	; 0x6b9e <_ZN7TwoWire5beginEv>
    3c86:	61 e0       	ldi	r22, 0x01	; 1
    3c88:	8d 81       	ldd	r24, Y+5	; 0x05
    3c8a:	0e 94 f9 3a 	call	0x75f2	; 0x75f2 <digitalWrite>
    3c8e:	60 e0       	ldi	r22, 0x00	; 0
    3c90:	8d 81       	ldd	r24, Y+5	; 0x05
    3c92:	0e 94 f9 3a 	call	0x75f2	; 0x75f2 <digitalWrite>
    3c96:	60 e9       	ldi	r22, 0x90	; 144
    3c98:	71 e0       	ldi	r23, 0x01	; 1
    3c9a:	80 e0       	ldi	r24, 0x00	; 0
    3c9c:	90 e0       	ldi	r25, 0x00	; 0
    3c9e:	0e 94 15 3a 	call	0x742a	; 0x742a <delay>
    3ca2:	61 e0       	ldi	r22, 0x01	; 1
    3ca4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ca6:	0e 94 f9 3a 	call	0x75f2	; 0x75f2 <digitalWrite>
    3caa:	6a e0       	ldi	r22, 0x0A	; 10
    3cac:	70 e0       	ldi	r23, 0x00	; 0
    3cae:	80 e0       	ldi	r24, 0x00	; 0
    3cb0:	90 e0       	ldi	r25, 0x00	; 0
    3cb2:	df 91       	pop	r29
    3cb4:	cf 91       	pop	r28
    3cb6:	0c 94 15 3a 	jmp	0x742a	; 0x742a <delay>

00003cba <_ZN9NFC_PN53210GetHexCodeEPKhm>:
    3cba:	4f 92       	push	r4
    3cbc:	5f 92       	push	r5
    3cbe:	6f 92       	push	r6
    3cc0:	7f 92       	push	r7
    3cc2:	8f 92       	push	r8
    3cc4:	9f 92       	push	r9
    3cc6:	af 92       	push	r10
    3cc8:	bf 92       	push	r11
    3cca:	ef 92       	push	r14
    3ccc:	ff 92       	push	r15
    3cce:	0f 93       	push	r16
    3cd0:	1f 93       	push	r17
    3cd2:	cf 93       	push	r28
    3cd4:	df 93       	push	r29
    3cd6:	cd b7       	in	r28, 0x3d	; 61
    3cd8:	de b7       	in	r29, 0x3e	; 62
    3cda:	2c 97       	sbiw	r28, 0x0c	; 12
    3cdc:	0f b6       	in	r0, 0x3f	; 63
    3cde:	f8 94       	cli
    3ce0:	de bf       	out	0x3e, r29	; 62
    3ce2:	0f be       	out	0x3f, r0	; 63
    3ce4:	cd bf       	out	0x3d, r28	; 61
    3ce6:	7c 01       	movw	r14, r24
    3ce8:	5a 01       	movw	r10, r20
    3cea:	28 01       	movw	r4, r16
    3cec:	39 01       	movw	r6, r18
    3cee:	6a ee       	ldi	r22, 0xEA	; 234
    3cf0:	71 e0       	ldi	r23, 0x01	; 1
    3cf2:	0e 94 b7 3b 	call	0x776e	; 0x776e <_ZN6StringC1EPKc>
    3cf6:	85 01       	movw	r16, r10
    3cf8:	81 2c       	mov	r8, r1
    3cfa:	91 2c       	mov	r9, r1
    3cfc:	54 01       	movw	r10, r8
    3cfe:	84 14       	cp	r8, r4
    3d00:	95 04       	cpc	r9, r5
    3d02:	a6 04       	cpc	r10, r6
    3d04:	b7 04       	cpc	r11, r7
    3d06:	09 f4       	brne	.+2      	; 0x3d0a <_ZN9NFC_PN53210GetHexCodeEPKhm+0x50>
    3d08:	46 c0       	rjmp	.+140    	; 0x3d96 <_ZN9NFC_PN53210GetHexCodeEPKhm+0xdc>
    3d0a:	f8 01       	movw	r30, r16
    3d0c:	61 91       	ld	r22, Z+
    3d0e:	8f 01       	movw	r16, r30
    3d10:	40 e1       	ldi	r20, 0x10	; 16
    3d12:	ce 01       	movw	r24, r28
    3d14:	60 31       	cpi	r22, 0x10	; 16
    3d16:	f0 f4       	brcc	.+60     	; 0x3d54 <_ZN9NFC_PN53210GetHexCodeEPKhm+0x9a>
    3d18:	01 96       	adiw	r24, 0x01	; 1
    3d1a:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_ZN6StringC1Ehh>
    3d1e:	b7 01       	movw	r22, r14
    3d20:	ce 01       	movw	r24, r28
    3d22:	07 96       	adiw	r24, 0x07	; 7
    3d24:	0e 94 23 3c 	call	0x7846	; 0x7846 <_ZN6StringC1ERKS_>
    3d28:	61 e8       	ldi	r22, 0x81	; 129
    3d2a:	78 e0       	ldi	r23, 0x08	; 8
    3d2c:	ce 01       	movw	r24, r28
    3d2e:	07 96       	adiw	r24, 0x07	; 7
    3d30:	0e 94 9d 3d 	call	0x7b3a	; 0x7b3a <_ZplRK15StringSumHelperPKc>
    3d34:	be 01       	movw	r22, r28
    3d36:	6f 5f       	subi	r22, 0xFF	; 255
    3d38:	7f 4f       	sbci	r23, 0xFF	; 255
    3d3a:	0e 94 8c 3d 	call	0x7b18	; 0x7b18 <_ZplRK15StringSumHelperRK6String>
    3d3e:	bc 01       	movw	r22, r24
    3d40:	c7 01       	movw	r24, r14
    3d42:	0e 94 0e 3c 	call	0x781c	; 0x781c <_ZN6StringaSERKS_>
    3d46:	ce 01       	movw	r24, r28
    3d48:	07 96       	adiw	r24, 0x07	; 7
    3d4a:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
    3d4e:	ce 01       	movw	r24, r28
    3d50:	01 96       	adiw	r24, 0x01	; 1
    3d52:	19 c0       	rjmp	.+50     	; 0x3d86 <_ZN9NFC_PN53210GetHexCodeEPKhm+0xcc>
    3d54:	07 96       	adiw	r24, 0x07	; 7
    3d56:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <_ZN6StringC1Ehh>
    3d5a:	b7 01       	movw	r22, r14
    3d5c:	ce 01       	movw	r24, r28
    3d5e:	01 96       	adiw	r24, 0x01	; 1
    3d60:	0e 94 23 3c 	call	0x7846	; 0x7846 <_ZN6StringC1ERKS_>
    3d64:	be 01       	movw	r22, r28
    3d66:	69 5f       	subi	r22, 0xF9	; 249
    3d68:	7f 4f       	sbci	r23, 0xFF	; 255
    3d6a:	ce 01       	movw	r24, r28
    3d6c:	01 96       	adiw	r24, 0x01	; 1
    3d6e:	0e 94 8c 3d 	call	0x7b18	; 0x7b18 <_ZplRK15StringSumHelperRK6String>
    3d72:	bc 01       	movw	r22, r24
    3d74:	c7 01       	movw	r24, r14
    3d76:	0e 94 0e 3c 	call	0x781c	; 0x781c <_ZN6StringaSERKS_>
    3d7a:	ce 01       	movw	r24, r28
    3d7c:	01 96       	adiw	r24, 0x01	; 1
    3d7e:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
    3d82:	ce 01       	movw	r24, r28
    3d84:	07 96       	adiw	r24, 0x07	; 7
    3d86:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN6StringD1Ev>
    3d8a:	ff ef       	ldi	r31, 0xFF	; 255
    3d8c:	8f 1a       	sub	r8, r31
    3d8e:	9f 0a       	sbc	r9, r31
    3d90:	af 0a       	sbc	r10, r31
    3d92:	bf 0a       	sbc	r11, r31
    3d94:	b4 cf       	rjmp	.-152    	; 0x3cfe <_ZN9NFC_PN53210GetHexCodeEPKhm+0x44>
    3d96:	80 e1       	ldi	r24, 0x10	; 16
    3d98:	9d e0       	ldi	r25, 0x0D	; 13
    3d9a:	0e 94 f9 38 	call	0x71f2	; 0x71f2 <_ZN5Print7printlnEv>
    3d9e:	c7 01       	movw	r24, r14
    3da0:	2c 96       	adiw	r28, 0x0c	; 12
    3da2:	0f b6       	in	r0, 0x3f	; 63
    3da4:	f8 94       	cli
    3da6:	de bf       	out	0x3e, r29	; 62
    3da8:	0f be       	out	0x3f, r0	; 63
    3daa:	cd bf       	out	0x3d, r28	; 61
    3dac:	df 91       	pop	r29
    3dae:	cf 91       	pop	r28
    3db0:	1f 91       	pop	r17
    3db2:	0f 91       	pop	r16
    3db4:	ff 90       	pop	r15
    3db6:	ef 90       	pop	r14
    3db8:	bf 90       	pop	r11
    3dba:	af 90       	pop	r10
    3dbc:	9f 90       	pop	r9
    3dbe:	8f 90       	pop	r8
    3dc0:	7f 90       	pop	r7
    3dc2:	6f 90       	pop	r6
    3dc4:	5f 90       	pop	r5
    3dc6:	4f 90       	pop	r4
    3dc8:	08 95       	ret

00003dca <_ZN9NFC_PN5327isreadyEv>:
    3dca:	fc 01       	movw	r30, r24
    3dcc:	84 81       	ldd	r24, Z+4	; 0x04
    3dce:	0e 94 27 3b 	call	0x764e	; 0x764e <digitalRead>
    3dd2:	91 e0       	ldi	r25, 0x01	; 1
    3dd4:	81 11       	cpse	r24, r1
    3dd6:	90 e0       	ldi	r25, 0x00	; 0
    3dd8:	89 2f       	mov	r24, r25
    3dda:	08 95       	ret

00003ddc <_ZN9NFC_PN5329waitreadyEj>:
    3ddc:	cf 92       	push	r12
    3dde:	df 92       	push	r13
    3de0:	ef 92       	push	r14
    3de2:	ff 92       	push	r15
    3de4:	1f 93       	push	r17
    3de6:	cf 93       	push	r28
    3de8:	df 93       	push	r29
    3dea:	6c 01       	movw	r12, r24
    3dec:	7b 01       	movw	r14, r22
    3dee:	c0 e0       	ldi	r28, 0x00	; 0
    3df0:	d0 e0       	ldi	r29, 0x00	; 0
    3df2:	c6 01       	movw	r24, r12
    3df4:	ea df       	rcall	.-44     	; 0x3dca <_ZN9NFC_PN5327isreadyEv>
    3df6:	18 2f       	mov	r17, r24
    3df8:	81 11       	cpse	r24, r1
    3dfa:	15 c0       	rjmp	.+42     	; 0x3e26 <_ZN9NFC_PN5329waitreadyEj+0x4a>
    3dfc:	e1 14       	cp	r14, r1
    3dfe:	f1 04       	cpc	r15, r1
    3e00:	59 f0       	breq	.+22     	; 0x3e18 <_ZN9NFC_PN5329waitreadyEj+0x3c>
    3e02:	2a 96       	adiw	r28, 0x0a	; 10
    3e04:	ec 16       	cp	r14, r28
    3e06:	fd 06       	cpc	r15, r29
    3e08:	38 f4       	brcc	.+14     	; 0x3e18 <_ZN9NFC_PN5329waitreadyEj+0x3c>
    3e0a:	61 ec       	ldi	r22, 0xC1	; 193
    3e0c:	79 e0       	ldi	r23, 0x09	; 9
    3e0e:	80 e1       	ldi	r24, 0x10	; 16
    3e10:	9d e0       	ldi	r25, 0x0D	; 13
    3e12:	0e 94 1c 39 	call	0x7238	; 0x7238 <_ZN5Print7printlnEPKc>
    3e16:	07 c0       	rjmp	.+14     	; 0x3e26 <_ZN9NFC_PN5329waitreadyEj+0x4a>
    3e18:	6a e0       	ldi	r22, 0x0A	; 10
    3e1a:	70 e0       	ldi	r23, 0x00	; 0
    3e1c:	80 e0       	ldi	r24, 0x00	; 0
    3e1e:	90 e0       	ldi	r25, 0x00	; 0
    3e20:	0e 94 15 3a 	call	0x742a	; 0x742a <delay>
    3e24:	e6 cf       	rjmp	.-52     	; 0x3df2 <_ZN9NFC_PN5329waitreadyEj+0x16>
    3e26:	81 2f       	mov	r24, r17
    3e28:	df 91       	pop	r29
    3e2a:	cf 91       	pop	r28
    3e2c:	1f 91       	pop	r17
    3e2e:	ff 90       	pop	r15
    3e30:	ef 90       	pop	r14
    3e32:	df 90       	pop	r13
    3e34:	cf 90       	pop	r12
    3e36:	08 95       	ret

00003e38 <_ZN9NFC_PN5328readdataEPhh>:
    3e38:	ff 92       	push	r15
    3e3a:	0f 93       	push	r16
    3e3c:	1f 93       	push	r17
    3e3e:	cf 93       	push	r28
    3e40:	df 93       	push	r29
    3e42:	f6 2e       	mov	r15, r22
    3e44:	07 2f       	mov	r16, r23
    3e46:	14 2f       	mov	r17, r20
    3e48:	62 e0       	ldi	r22, 0x02	; 2
    3e4a:	70 e0       	ldi	r23, 0x00	; 0
    3e4c:	80 e0       	ldi	r24, 0x00	; 0
    3e4e:	90 e0       	ldi	r25, 0x00	; 0
    3e50:	0e 94 15 3a 	call	0x742a	; 0x742a <delay>
    3e54:	42 e0       	ldi	r20, 0x02	; 2
    3e56:	41 0f       	add	r20, r17
    3e58:	64 e2       	ldi	r22, 0x24	; 36
    3e5a:	8a eb       	ldi	r24, 0xBA	; 186
    3e5c:	9c e0       	ldi	r25, 0x0C	; 12
    3e5e:	0e 94 5f 36 	call	0x6cbe	; 0x6cbe <_ZN7TwoWire11requestFromEhh>
    3e62:	8a eb       	ldi	r24, 0xBA	; 186
    3e64:	9c e0       	ldi	r25, 0x0C	; 12
    3e66:	0e 94 0b 35 	call	0x6a16	; 0x6a16 <_ZN7TwoWire4readEv>
    3e6a:	cf 2d       	mov	r28, r15
    3e6c:	d0 2f       	mov	r29, r16
    3e6e:	ce 01       	movw	r24, r28
    3e70:	81 0f       	add	r24, r17
    3e72:	91 1d       	adc	r25, r1
    3e74:	8c 01       	movw	r16, r24
    3e76:	c0 17       	cp	r28, r16
    3e78:	d1 07       	cpc	r29, r17
    3e7a:	61 f0       	breq	.+24     	; 0x3e94 <_ZN9NFC_PN5328readdataEPhh+0x5c>
    3e7c:	61 e0       	ldi	r22, 0x01	; 1
    3e7e:	70 e0       	ldi	r23, 0x00	; 0
    3e80:	80 e0       	ldi	r24, 0x00	; 0
    3e82:	90 e0       	ldi	r25, 0x00	; 0
    3e84:	0e 94 15 3a 	call	0x742a	; 0x742a <delay>
    3e88:	8a eb       	ldi	r24, 0xBA	; 186
    3e8a:	9c e0       	ldi	r25, 0x0C	; 12
    3e8c:	0e 94 0b 35 	call	0x6a16	; 0x6a16 <_ZN7TwoWire4readEv>
    3e90:	89 93       	st	Y+, r24
    3e92:	f1 cf       	rjmp	.-30     	; 0x3e76 <_ZN9NFC_PN5328readdataEPhh+0x3e>
    3e94:	df 91       	pop	r29
    3e96:	cf 91       	pop	r28
    3e98:	1f 91       	pop	r17
    3e9a:	0f 91       	pop	r16
    3e9c:	ff 90       	pop	r15
    3e9e:	08 95       	ret

00003ea0 <_ZN9NFC_PN5327readackEv>:
    3ea0:	cf 93       	push	r28
    3ea2:	df 93       	push	r29
    3ea4:	00 d0       	rcall	.+0      	; 0x3ea6 <_ZN9NFC_PN5327readackEv+0x6>
    3ea6:	00 d0       	rcall	.+0      	; 0x3ea8 <_ZN9NFC_PN5327readackEv+0x8>
    3ea8:	00 d0       	rcall	.+0      	; 0x3eaa <_ZN9NFC_PN5327readackEv+0xa>
    3eaa:	cd b7       	in	r28, 0x3d	; 61
    3eac:	de b7       	in	r29, 0x3e	; 62
    3eae:	46 e0       	ldi	r20, 0x06	; 6
    3eb0:	be 01       	movw	r22, r28
    3eb2:	6f 5f       	subi	r22, 0xFF	; 255
    3eb4:	7f 4f       	sbci	r23, 0xFF	; 255
    3eb6:	c0 df       	rcall	.-128    	; 0x3e38 <_ZN9NFC_PN5328readdataEPhh>
    3eb8:	46 e0       	ldi	r20, 0x06	; 6
    3eba:	50 e0       	ldi	r21, 0x00	; 0
    3ebc:	6f e5       	ldi	r22, 0x5F	; 95
    3ebe:	71 e0       	ldi	r23, 0x01	; 1
    3ec0:	ce 01       	movw	r24, r28
    3ec2:	01 96       	adiw	r24, 0x01	; 1
    3ec4:	0e 94 64 42 	call	0x84c8	; 0x84c8 <strncmp>
    3ec8:	21 e0       	ldi	r18, 0x01	; 1
    3eca:	89 2b       	or	r24, r25
    3ecc:	09 f0       	breq	.+2      	; 0x3ed0 <_ZN9NFC_PN5327readackEv+0x30>
    3ece:	20 e0       	ldi	r18, 0x00	; 0
    3ed0:	82 2f       	mov	r24, r18
    3ed2:	26 96       	adiw	r28, 0x06	; 6
    3ed4:	0f b6       	in	r0, 0x3f	; 63
    3ed6:	f8 94       	cli
    3ed8:	de bf       	out	0x3e, r29	; 62
    3eda:	0f be       	out	0x3f, r0	; 63
    3edc:	cd bf       	out	0x3d, r28	; 61
    3ede:	df 91       	pop	r29
    3ee0:	cf 91       	pop	r28
    3ee2:	08 95       	ret

00003ee4 <_ZL8i2c_sendh>:
    3ee4:	68 2f       	mov	r22, r24
    3ee6:	8a eb       	ldi	r24, 0xBA	; 186
    3ee8:	9c e0       	ldi	r25, 0x0C	; 12
    3eea:	0c 94 91 35 	jmp	0x6b22	; 0x6b22 <_ZN7TwoWire5writeEh>

00003eee <_ZN9NFC_PN53212writecommandEPhh>:
    3eee:	cf 92       	push	r12
    3ef0:	df 92       	push	r13
    3ef2:	ef 92       	push	r14
    3ef4:	ff 92       	push	r15
    3ef6:	0f 93       	push	r16
    3ef8:	1f 93       	push	r17
    3efa:	cf 93       	push	r28
    3efc:	df 93       	push	r29
    3efe:	7b 01       	movw	r14, r22
    3f00:	c1 e0       	ldi	r28, 0x01	; 1
    3f02:	c4 0f       	add	r28, r20
    3f04:	62 e0       	ldi	r22, 0x02	; 2
    3f06:	70 e0       	ldi	r23, 0x00	; 0
    3f08:	80 e0       	ldi	r24, 0x00	; 0
    3f0a:	90 e0       	ldi	r25, 0x00	; 0
    3f0c:	0e 94 15 3a 	call	0x742a	; 0x742a <delay>
    3f10:	64 e2       	ldi	r22, 0x24	; 36
    3f12:	70 e0       	ldi	r23, 0x00	; 0
    3f14:	8a eb       	ldi	r24, 0xBA	; 186
    3f16:	9c e0       	ldi	r25, 0x0C	; 12
    3f18:	0e 94 ec 35 	call	0x6bd8	; 0x6bd8 <_ZN7TwoWire17beginTransmissionEi>
    3f1c:	80 e0       	ldi	r24, 0x00	; 0
    3f1e:	e2 df       	rcall	.-60     	; 0x3ee4 <_ZL8i2c_sendh>
    3f20:	80 e0       	ldi	r24, 0x00	; 0
    3f22:	e0 df       	rcall	.-64     	; 0x3ee4 <_ZL8i2c_sendh>
    3f24:	8f ef       	ldi	r24, 0xFF	; 255
    3f26:	de df       	rcall	.-68     	; 0x3ee4 <_ZL8i2c_sendh>
    3f28:	8c 2f       	mov	r24, r28
    3f2a:	dc df       	rcall	.-72     	; 0x3ee4 <_ZL8i2c_sendh>
    3f2c:	8c 2f       	mov	r24, r28
    3f2e:	81 95       	neg	r24
    3f30:	d9 df       	rcall	.-78     	; 0x3ee4 <_ZL8i2c_sendh>
    3f32:	84 ed       	ldi	r24, 0xD4	; 212
    3f34:	d7 df       	rcall	.-82     	; 0x3ee4 <_ZL8i2c_sendh>
    3f36:	c1 2c       	mov	r12, r1
    3f38:	83 ed       	ldi	r24, 0xD3	; 211
    3f3a:	d8 2e       	mov	r13, r24
    3f3c:	d0 e0       	ldi	r29, 0x00	; 0
    3f3e:	21 97       	sbiw	r28, 0x01	; 1
    3f40:	0c 2d       	mov	r16, r12
    3f42:	10 e0       	ldi	r17, 0x00	; 0
    3f44:	0c 17       	cp	r16, r28
    3f46:	1d 07       	cpc	r17, r29
    3f48:	54 f4       	brge	.+20     	; 0x3f5e <_ZN9NFC_PN53212writecommandEPhh+0x70>
    3f4a:	0e 0d       	add	r16, r14
    3f4c:	1f 1d       	adc	r17, r15
    3f4e:	f8 01       	movw	r30, r16
    3f50:	80 81       	ld	r24, Z
    3f52:	c8 df       	rcall	.-112    	; 0x3ee4 <_ZL8i2c_sendh>
    3f54:	f8 01       	movw	r30, r16
    3f56:	80 81       	ld	r24, Z
    3f58:	d8 0e       	add	r13, r24
    3f5a:	c3 94       	inc	r12
    3f5c:	f1 cf       	rjmp	.-30     	; 0x3f40 <_ZN9NFC_PN53212writecommandEPhh+0x52>
    3f5e:	8d 2d       	mov	r24, r13
    3f60:	80 95       	com	r24
    3f62:	c0 df       	rcall	.-128    	; 0x3ee4 <_ZL8i2c_sendh>
    3f64:	80 e0       	ldi	r24, 0x00	; 0
    3f66:	be df       	rcall	.-132    	; 0x3ee4 <_ZL8i2c_sendh>
    3f68:	8a eb       	ldi	r24, 0xBA	; 186
    3f6a:	9c e0       	ldi	r25, 0x0C	; 12
    3f6c:	df 91       	pop	r29
    3f6e:	cf 91       	pop	r28
    3f70:	1f 91       	pop	r17
    3f72:	0f 91       	pop	r16
    3f74:	ff 90       	pop	r15
    3f76:	ef 90       	pop	r14
    3f78:	df 90       	pop	r13
    3f7a:	cf 90       	pop	r12
    3f7c:	0c 94 63 36 	jmp	0x6cc6	; 0x6cc6 <_ZN7TwoWire15endTransmissionEv>

00003f80 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>:
    3f80:	0f 93       	push	r16
    3f82:	1f 93       	push	r17
    3f84:	cf 93       	push	r28
    3f86:	df 93       	push	r29
    3f88:	ec 01       	movw	r28, r24
    3f8a:	89 01       	movw	r16, r18
    3f8c:	b0 df       	rcall	.-160    	; 0x3eee <_ZN9NFC_PN53212writecommandEPhh>
    3f8e:	b8 01       	movw	r22, r16
    3f90:	ce 01       	movw	r24, r28
    3f92:	24 df       	rcall	.-440    	; 0x3ddc <_ZN9NFC_PN5329waitreadyEj>
    3f94:	81 11       	cpse	r24, r1
    3f96:	02 c0       	rjmp	.+4      	; 0x3f9c <_ZN9NFC_PN53219sendCommandCheckAckEPhhj+0x1c>
    3f98:	80 e0       	ldi	r24, 0x00	; 0
    3f9a:	0e c0       	rjmp	.+28     	; 0x3fb8 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj+0x38>
    3f9c:	ce 01       	movw	r24, r28
    3f9e:	80 df       	rcall	.-256    	; 0x3ea0 <_ZN9NFC_PN5327readackEv>
    3fa0:	88 23       	and	r24, r24
    3fa2:	d1 f3       	breq	.-12     	; 0x3f98 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj+0x18>
    3fa4:	9d 89       	ldd	r25, Y+21	; 0x15
    3fa6:	99 23       	and	r25, r25
    3fa8:	39 f0       	breq	.+14     	; 0x3fb8 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj+0x38>
    3faa:	b8 01       	movw	r22, r16
    3fac:	ce 01       	movw	r24, r28
    3fae:	df 91       	pop	r29
    3fb0:	cf 91       	pop	r28
    3fb2:	1f 91       	pop	r17
    3fb4:	0f 91       	pop	r16
    3fb6:	12 cf       	rjmp	.-476    	; 0x3ddc <_ZN9NFC_PN5329waitreadyEj>
    3fb8:	df 91       	pop	r29
    3fba:	cf 91       	pop	r28
    3fbc:	1f 91       	pop	r17
    3fbe:	0f 91       	pop	r16
    3fc0:	08 95       	ret

00003fc2 <_ZN9NFC_PN53218getFirmwareVersionEv>:
    3fc2:	cf 93       	push	r28
    3fc4:	df 93       	push	r29
    3fc6:	ec 01       	movw	r28, r24
    3fc8:	82 e0       	ldi	r24, 0x02	; 2
    3fca:	80 93 c1 0b 	sts	0x0BC1, r24	; 0x800bc1 <pn532_packetbuffer>
    3fce:	28 ee       	ldi	r18, 0xE8	; 232
    3fd0:	33 e0       	ldi	r19, 0x03	; 3
    3fd2:	41 e0       	ldi	r20, 0x01	; 1
    3fd4:	61 ec       	ldi	r22, 0xC1	; 193
    3fd6:	7b e0       	ldi	r23, 0x0B	; 11
    3fd8:	ce 01       	movw	r24, r28
    3fda:	d2 df       	rcall	.-92     	; 0x3f80 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    3fdc:	81 11       	cpse	r24, r1
    3fde:	04 c0       	rjmp	.+8      	; 0x3fe8 <_ZN9NFC_PN53218getFirmwareVersionEv+0x26>
    3fe0:	60 e0       	ldi	r22, 0x00	; 0
    3fe2:	70 e0       	ldi	r23, 0x00	; 0
    3fe4:	cb 01       	movw	r24, r22
    3fe6:	32 c0       	rjmp	.+100    	; 0x404c <_ZN9NFC_PN53218getFirmwareVersionEv+0x8a>
    3fe8:	4c e0       	ldi	r20, 0x0C	; 12
    3fea:	61 ec       	ldi	r22, 0xC1	; 193
    3fec:	7b e0       	ldi	r23, 0x0B	; 11
    3fee:	ce 01       	movw	r24, r28
    3ff0:	23 df       	rcall	.-442    	; 0x3e38 <_ZN9NFC_PN5328readdataEPhh>
    3ff2:	46 e0       	ldi	r20, 0x06	; 6
    3ff4:	50 e0       	ldi	r21, 0x00	; 0
    3ff6:	69 e5       	ldi	r22, 0x59	; 89
    3ff8:	71 e0       	ldi	r23, 0x01	; 1
    3ffa:	81 ec       	ldi	r24, 0xC1	; 193
    3ffc:	9b e0       	ldi	r25, 0x0B	; 11
    3ffe:	0e 94 64 42 	call	0x84c8	; 0x84c8 <strncmp>
    4002:	89 2b       	or	r24, r25
    4004:	69 f7       	brne	.-38     	; 0x3fe0 <_ZN9NFC_PN53218getFirmwareVersionEv+0x1e>
    4006:	8d 89       	ldd	r24, Y+21	; 0x15
    4008:	81 11       	cpse	r24, r1
    400a:	03 c0       	rjmp	.+6      	; 0x4012 <_ZN9NFC_PN53218getFirmwareVersionEv+0x50>
    400c:	e7 e0       	ldi	r30, 0x07	; 7
    400e:	f0 e0       	ldi	r31, 0x00	; 0
    4010:	02 c0       	rjmp	.+4      	; 0x4016 <_ZN9NFC_PN53218getFirmwareVersionEv+0x54>
    4012:	e6 e0       	ldi	r30, 0x06	; 6
    4014:	f0 e0       	ldi	r31, 0x00	; 0
    4016:	ef 53       	subi	r30, 0x3F	; 63
    4018:	f4 4f       	sbci	r31, 0xF4	; 244
    401a:	60 81       	ld	r22, Z
    401c:	86 2f       	mov	r24, r22
    401e:	90 e0       	ldi	r25, 0x00	; 0
    4020:	a0 e0       	ldi	r26, 0x00	; 0
    4022:	b0 e0       	ldi	r27, 0x00	; 0
    4024:	ba 2f       	mov	r27, r26
    4026:	a9 2f       	mov	r26, r25
    4028:	98 2f       	mov	r25, r24
    402a:	88 27       	eor	r24, r24
    402c:	21 81       	ldd	r18, Z+1	; 0x01
    402e:	82 2b       	or	r24, r18
    4030:	ba 2f       	mov	r27, r26
    4032:	a9 2f       	mov	r26, r25
    4034:	98 2f       	mov	r25, r24
    4036:	88 27       	eor	r24, r24
    4038:	22 81       	ldd	r18, Z+2	; 0x02
    403a:	82 2b       	or	r24, r18
    403c:	ba 2f       	mov	r27, r26
    403e:	a9 2f       	mov	r26, r25
    4040:	98 2f       	mov	r25, r24
    4042:	88 27       	eor	r24, r24
    4044:	23 81       	ldd	r18, Z+3	; 0x03
    4046:	bc 01       	movw	r22, r24
    4048:	cd 01       	movw	r24, r26
    404a:	62 2b       	or	r22, r18
    404c:	df 91       	pop	r29
    404e:	cf 91       	pop	r28
    4050:	08 95       	ret

00004052 <_ZN9NFC_PN5329SAMConfigEv>:
    4052:	cf 93       	push	r28
    4054:	df 93       	push	r29
    4056:	ec 01       	movw	r28, r24
    4058:	94 e1       	ldi	r25, 0x14	; 20
    405a:	90 93 c1 0b 	sts	0x0BC1, r25	; 0x800bc1 <pn532_packetbuffer>
    405e:	81 e0       	ldi	r24, 0x01	; 1
    4060:	80 93 c2 0b 	sts	0x0BC2, r24	; 0x800bc2 <pn532_packetbuffer+0x1>
    4064:	90 93 c3 0b 	sts	0x0BC3, r25	; 0x800bc3 <pn532_packetbuffer+0x2>
    4068:	80 93 c4 0b 	sts	0x0BC4, r24	; 0x800bc4 <pn532_packetbuffer+0x3>
    406c:	28 ee       	ldi	r18, 0xE8	; 232
    406e:	33 e0       	ldi	r19, 0x03	; 3
    4070:	44 e0       	ldi	r20, 0x04	; 4
    4072:	61 ec       	ldi	r22, 0xC1	; 193
    4074:	7b e0       	ldi	r23, 0x0B	; 11
    4076:	ce 01       	movw	r24, r28
    4078:	83 df       	rcall	.-250    	; 0x3f80 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    407a:	88 23       	and	r24, r24
    407c:	a9 f0       	breq	.+42     	; 0x40a8 <_ZN9NFC_PN5329SAMConfigEv+0x56>
    407e:	48 e0       	ldi	r20, 0x08	; 8
    4080:	61 ec       	ldi	r22, 0xC1	; 193
    4082:	7b e0       	ldi	r23, 0x0B	; 11
    4084:	ce 01       	movw	r24, r28
    4086:	d8 de       	rcall	.-592    	; 0x3e38 <_ZN9NFC_PN5328readdataEPhh>
    4088:	8d 89       	ldd	r24, Y+21	; 0x15
    408a:	81 11       	cpse	r24, r1
    408c:	03 c0       	rjmp	.+6      	; 0x4094 <_ZN9NFC_PN5329SAMConfigEv+0x42>
    408e:	86 e0       	ldi	r24, 0x06	; 6
    4090:	90 e0       	ldi	r25, 0x00	; 0
    4092:	02 c0       	rjmp	.+4      	; 0x4098 <_ZN9NFC_PN5329SAMConfigEv+0x46>
    4094:	85 e0       	ldi	r24, 0x05	; 5
    4096:	90 e0       	ldi	r25, 0x00	; 0
    4098:	fc 01       	movw	r30, r24
    409a:	ef 53       	subi	r30, 0x3F	; 63
    409c:	f4 4f       	sbci	r31, 0xF4	; 244
    409e:	81 e0       	ldi	r24, 0x01	; 1
    40a0:	90 81       	ld	r25, Z
    40a2:	95 31       	cpi	r25, 0x15	; 21
    40a4:	09 f0       	breq	.+2      	; 0x40a8 <_ZN9NFC_PN5329SAMConfigEv+0x56>
    40a6:	80 e0       	ldi	r24, 0x00	; 0
    40a8:	df 91       	pop	r29
    40aa:	cf 91       	pop	r28
    40ac:	08 95       	ret

000040ae <_ZN9NFC_PN53227setPassiveActivationRetriesEh>:
    40ae:	e1 ec       	ldi	r30, 0xC1	; 193
    40b0:	fb e0       	ldi	r31, 0x0B	; 11
    40b2:	22 e3       	ldi	r18, 0x32	; 50
    40b4:	20 83       	st	Z, r18
    40b6:	25 e0       	ldi	r18, 0x05	; 5
    40b8:	21 83       	std	Z+1, r18	; 0x01
    40ba:	2f ef       	ldi	r18, 0xFF	; 255
    40bc:	22 83       	std	Z+2, r18	; 0x02
    40be:	21 e0       	ldi	r18, 0x01	; 1
    40c0:	23 83       	std	Z+3, r18	; 0x03
    40c2:	64 83       	std	Z+4, r22	; 0x04
    40c4:	28 ee       	ldi	r18, 0xE8	; 232
    40c6:	33 e0       	ldi	r19, 0x03	; 3
    40c8:	45 e0       	ldi	r20, 0x05	; 5
    40ca:	bf 01       	movw	r22, r30
    40cc:	59 cf       	rjmp	.-334    	; 0x3f80 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>

000040ce <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j>:
    40ce:	af 92       	push	r10
    40d0:	bf 92       	push	r11
    40d2:	cf 92       	push	r12
    40d4:	df 92       	push	r13
    40d6:	ef 92       	push	r14
    40d8:	ff 92       	push	r15
    40da:	0f 93       	push	r16
    40dc:	1f 93       	push	r17
    40de:	cf 93       	push	r28
    40e0:	df 93       	push	r29
    40e2:	ec 01       	movw	r28, r24
    40e4:	7a 01       	movw	r14, r20
    40e6:	59 01       	movw	r10, r18
    40e8:	68 01       	movw	r12, r16
    40ea:	8a e4       	ldi	r24, 0x4A	; 74
    40ec:	80 93 c1 0b 	sts	0x0BC1, r24	; 0x800bc1 <pn532_packetbuffer>
    40f0:	81 e0       	ldi	r24, 0x01	; 1
    40f2:	80 93 c2 0b 	sts	0x0BC2, r24	; 0x800bc2 <pn532_packetbuffer+0x1>
    40f6:	60 93 c3 0b 	sts	0x0BC3, r22	; 0x800bc3 <pn532_packetbuffer+0x2>
    40fa:	98 01       	movw	r18, r16
    40fc:	43 e0       	ldi	r20, 0x03	; 3
    40fe:	61 ec       	ldi	r22, 0xC1	; 193
    4100:	7b e0       	ldi	r23, 0x0B	; 11
    4102:	ce 01       	movw	r24, r28
    4104:	3d df       	rcall	.-390    	; 0x3f80 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    4106:	18 2f       	mov	r17, r24
    4108:	88 23       	and	r24, r24
    410a:	41 f1       	breq	.+80     	; 0x415c <__stack+0x5d>
    410c:	8d 89       	ldd	r24, Y+21	; 0x15
    410e:	88 23       	and	r24, r24
    4110:	79 f0       	breq	.+30     	; 0x4130 <__stack+0x31>
    4112:	44 e1       	ldi	r20, 0x14	; 20
    4114:	61 ec       	ldi	r22, 0xC1	; 193
    4116:	7b e0       	ldi	r23, 0x0B	; 11
    4118:	ce 01       	movw	r24, r28
    411a:	8e de       	rcall	.-740    	; 0x3e38 <_ZN9NFC_PN5328readdataEPhh>
    411c:	80 91 c8 0b 	lds	r24, 0x0BC8	; 0x800bc8 <pn532_packetbuffer+0x7>
    4120:	81 30       	cpi	r24, 0x01	; 1
    4122:	e1 f4       	brne	.+56     	; 0x415c <__stack+0x5d>
    4124:	80 91 cd 0b 	lds	r24, 0x0BCD	; 0x800bcd <pn532_packetbuffer+0xc>
    4128:	f5 01       	movw	r30, r10
    412a:	80 83       	st	Z, r24
    412c:	80 e0       	ldi	r24, 0x00	; 0
    412e:	06 c0       	rjmp	.+12     	; 0x413c <__stack+0x3d>
    4130:	b6 01       	movw	r22, r12
    4132:	ce 01       	movw	r24, r28
    4134:	53 de       	rcall	.-858    	; 0x3ddc <_ZN9NFC_PN5329waitreadyEj>
    4136:	81 11       	cpse	r24, r1
    4138:	ec cf       	rjmp	.-40     	; 0x4112 <__stack+0x13>
    413a:	10 c0       	rjmp	.+32     	; 0x415c <__stack+0x5d>
    413c:	90 91 cd 0b 	lds	r25, 0x0BCD	; 0x800bcd <pn532_packetbuffer+0xc>
    4140:	89 17       	cp	r24, r25
    4142:	68 f4       	brcc	.+26     	; 0x415e <__stack+0x5f>
    4144:	28 2f       	mov	r18, r24
    4146:	30 e0       	ldi	r19, 0x00	; 0
    4148:	f9 01       	movw	r30, r18
    414a:	ef 53       	subi	r30, 0x3F	; 63
    414c:	f4 4f       	sbci	r31, 0xF4	; 244
    414e:	95 85       	ldd	r25, Z+13	; 0x0d
    4150:	f7 01       	movw	r30, r14
    4152:	e2 0f       	add	r30, r18
    4154:	f3 1f       	adc	r31, r19
    4156:	90 83       	st	Z, r25
    4158:	8f 5f       	subi	r24, 0xFF	; 255
    415a:	f0 cf       	rjmp	.-32     	; 0x413c <__stack+0x3d>
    415c:	10 e0       	ldi	r17, 0x00	; 0
    415e:	81 2f       	mov	r24, r17
    4160:	df 91       	pop	r29
    4162:	cf 91       	pop	r28
    4164:	1f 91       	pop	r17
    4166:	0f 91       	pop	r16
    4168:	ff 90       	pop	r15
    416a:	ef 90       	pop	r14
    416c:	df 90       	pop	r13
    416e:	cf 90       	pop	r12
    4170:	bf 90       	pop	r11
    4172:	af 90       	pop	r10
    4174:	08 95       	ret

00004176 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_>:

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
uint8_t NFC_PN532::mifareclassic_AuthenticateBlock (uint8_t * uid, uint8_t uidLen, uint32_t blockNumber, uint8_t keyNumber, uint8_t * keyData)
{
    4176:	af 92       	push	r10
    4178:	bf 92       	push	r11
    417a:	cf 92       	push	r12
    417c:	df 92       	push	r13
    417e:	ef 92       	push	r14
    4180:	0f 93       	push	r16
    4182:	1f 93       	push	r17
    4184:	cf 93       	push	r28
    4186:	df 93       	push	r29
    4188:	ec 01       	movw	r28, r24
    418a:	14 2f       	mov	r17, r20
  uint8_t len;
  uint8_t i;

  // Hang on to the key and uid data
  memcpy (_key, keyData, 6);
    418c:	5c 01       	movw	r10, r24
    418e:	8e e0       	ldi	r24, 0x0E	; 14
    4190:	a8 0e       	add	r10, r24
    4192:	b1 1c       	adc	r11, r1
    4194:	86 e0       	ldi	r24, 0x06	; 6
    4196:	f6 01       	movw	r30, r12
    4198:	d5 01       	movw	r26, r10
    419a:	01 90       	ld	r0, Z+
    419c:	0d 92       	st	X+, r0
    419e:	8a 95       	dec	r24
    41a0:	e1 f7       	brne	.-8      	; 0x419a <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x24>
  memcpy (_uid, uid, uidLen);
    41a2:	50 e0       	ldi	r21, 0x00	; 0
    41a4:	ce 01       	movw	r24, r28
    41a6:	06 96       	adiw	r24, 0x06	; 6
    41a8:	0e 94 4b 42 	call	0x8496	; 0x8496 <memcpy>
  _uidLen = uidLen;
    41ac:	1d 87       	std	Y+13, r17	; 0x0d
    PN532DEBUGPRINT.print(F("Using authentication KEY "));PN532DEBUGPRINT.print(keyNumber ? 'B' : 'A');PN532DEBUGPRINT.print(F(": "));
    NFC_PN532::PrintHex(_key, 6);
  #endif

  // Prepare the authentication command //
  pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;   /* Data Exchange Header */
    41ae:	80 e4       	ldi	r24, 0x40	; 64
    41b0:	80 93 c1 0b 	sts	0x0BC1, r24	; 0x800bc1 <pn532_packetbuffer>
  pn532_packetbuffer[1] = 1;                              /* Max card numbers */
    41b4:	81 e0       	ldi	r24, 0x01	; 1
    41b6:	80 93 c2 0b 	sts	0x0BC2, r24	; 0x800bc2 <pn532_packetbuffer+0x1>
  pn532_packetbuffer[2] = (keyNumber) ? MIFARE_CMD_AUTH_B : MIFARE_CMD_AUTH_A;
    41ba:	e1 10       	cpse	r14, r1
    41bc:	02 c0       	rjmp	.+4      	; 0x41c2 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x4c>
    41be:	80 e6       	ldi	r24, 0x60	; 96
    41c0:	01 c0       	rjmp	.+2      	; 0x41c4 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x4e>
    41c2:	81 e6       	ldi	r24, 0x61	; 97
    41c4:	80 93 c3 0b 	sts	0x0BC3, r24	; 0x800bc3 <pn532_packetbuffer+0x2>
  pn532_packetbuffer[3] = blockNumber;                    /* Block Number (1K = 0..63, 4K = 0..255 */
    41c8:	00 93 c4 0b 	sts	0x0BC4, r16	; 0x800bc4 <pn532_packetbuffer+0x3>
  memcpy (pn532_packetbuffer+4, _key, 6);
    41cc:	86 e0       	ldi	r24, 0x06	; 6
    41ce:	f5 01       	movw	r30, r10
    41d0:	a5 ec       	ldi	r26, 0xC5	; 197
    41d2:	bb e0       	ldi	r27, 0x0B	; 11
    41d4:	01 90       	ld	r0, Z+
    41d6:	0d 92       	st	X+, r0
    41d8:	8a 95       	dec	r24
    41da:	e1 f7       	brne	.-8      	; 0x41d4 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x5e>
  for (i = 0; i < _uidLen; i++)
    41dc:	80 e0       	ldi	r24, 0x00	; 0
    41de:	4d 85       	ldd	r20, Y+13	; 0x0d
    41e0:	84 17       	cp	r24, r20
    41e2:	60 f4       	brcc	.+24     	; 0x41fc <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x86>
  {
    pn532_packetbuffer[10+i] = _uid[i];                /* 4 byte card ID */
    41e4:	28 2f       	mov	r18, r24
    41e6:	30 e0       	ldi	r19, 0x00	; 0
    41e8:	fe 01       	movw	r30, r28
    41ea:	e2 0f       	add	r30, r18
    41ec:	f3 1f       	adc	r31, r19
    41ee:	96 81       	ldd	r25, Z+6	; 0x06
    41f0:	f9 01       	movw	r30, r18
    41f2:	ef 53       	subi	r30, 0x3F	; 63
    41f4:	f4 4f       	sbci	r31, 0xF4	; 244
    41f6:	92 87       	std	Z+10, r25	; 0x0a
  pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;   /* Data Exchange Header */
  pn532_packetbuffer[1] = 1;                              /* Max card numbers */
  pn532_packetbuffer[2] = (keyNumber) ? MIFARE_CMD_AUTH_B : MIFARE_CMD_AUTH_A;
  pn532_packetbuffer[3] = blockNumber;                    /* Block Number (1K = 0..63, 4K = 0..255 */
  memcpy (pn532_packetbuffer+4, _key, 6);
  for (i = 0; i < _uidLen; i++)
    41f8:	8f 5f       	subi	r24, 0xFF	; 255
    41fa:	f1 cf       	rjmp	.-30     	; 0x41de <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x68>
  {
    pn532_packetbuffer[10+i] = _uid[i];                /* 4 byte card ID */
  }

  if (! sendCommandCheckAck(pn532_packetbuffer, 10+_uidLen))
    41fc:	46 5f       	subi	r20, 0xF6	; 246
    41fe:	28 ee       	ldi	r18, 0xE8	; 232
    4200:	33 e0       	ldi	r19, 0x03	; 3
    4202:	61 ec       	ldi	r22, 0xC1	; 193
    4204:	7b e0       	ldi	r23, 0x0B	; 11
    4206:	ce 01       	movw	r24, r28
    4208:	bb de       	rcall	.-650    	; 0x3f80 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    420a:	88 23       	and	r24, r24
    420c:	49 f0       	breq	.+18     	; 0x4220 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0xaa>
    return 0;

  // Read the response packet
  readdata(pn532_packetbuffer, 12);
    420e:	4c e0       	ldi	r20, 0x0C	; 12
    4210:	61 ec       	ldi	r22, 0xC1	; 193
    4212:	7b e0       	ldi	r23, 0x0B	; 11
    4214:	ce 01       	movw	r24, r28
    4216:	10 de       	rcall	.-992    	; 0x3e38 <_ZN9NFC_PN5328readdataEPhh>
  {
    pn532_packetbuffer[10+i] = _uid[i];                /* 4 byte card ID */
  }

  if (! sendCommandCheckAck(pn532_packetbuffer, 10+_uidLen))
    return 0;
    4218:	81 e0       	ldi	r24, 0x01	; 1
    421a:	90 91 c8 0b 	lds	r25, 0x0BC8	; 0x800bc8 <pn532_packetbuffer+0x7>
    421e:	91 11       	cpse	r25, r1
    4220:	80 e0       	ldi	r24, 0x00	; 0
    #endif
    return 0;
  }

  return 1;
}
    4222:	df 91       	pop	r29
    4224:	cf 91       	pop	r28
    4226:	1f 91       	pop	r17
    4228:	0f 91       	pop	r16
    422a:	ef 90       	pop	r14
    422c:	df 90       	pop	r13
    422e:	cf 90       	pop	r12
    4230:	bf 90       	pop	r11
    4232:	af 90       	pop	r10
    4234:	08 95       	ret

00004236 <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh>:

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
uint8_t NFC_PN532::mifareclassic_ReadDataBlock (uint8_t blockNumber, uint8_t * data)
{
    4236:	0f 93       	push	r16
    4238:	1f 93       	push	r17
    423a:	cf 93       	push	r28
    423c:	df 93       	push	r29
    423e:	ec 01       	movw	r28, r24
    4240:	8a 01       	movw	r16, r20
  #ifdef MIFAREDEBUG
    PN532DEBUGPRINT.print(F("Trying to read 16 bytes from block "));PN532DEBUGPRINT.println(blockNumber);
  #endif

  /* Prepare the command */
  pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;
    4242:	80 e4       	ldi	r24, 0x40	; 64
    4244:	80 93 c1 0b 	sts	0x0BC1, r24	; 0x800bc1 <pn532_packetbuffer>
  pn532_packetbuffer[1] = 1;                      /* Card number */
    4248:	81 e0       	ldi	r24, 0x01	; 1
    424a:	80 93 c2 0b 	sts	0x0BC2, r24	; 0x800bc2 <pn532_packetbuffer+0x1>
  pn532_packetbuffer[2] = MIFARE_CMD_READ;        /* Mifare Read command = 0x30 */
    424e:	80 e3       	ldi	r24, 0x30	; 48
    4250:	80 93 c3 0b 	sts	0x0BC3, r24	; 0x800bc3 <pn532_packetbuffer+0x2>
  pn532_packetbuffer[3] = blockNumber;            /* Block Number (0..63 for 1K, 0..255 for 4K) */
    4254:	60 93 c4 0b 	sts	0x0BC4, r22	; 0x800bc4 <pn532_packetbuffer+0x3>

  /* Send the command */
  if (! sendCommandCheckAck(pn532_packetbuffer, 4))
    4258:	28 ee       	ldi	r18, 0xE8	; 232
    425a:	33 e0       	ldi	r19, 0x03	; 3
    425c:	44 e0       	ldi	r20, 0x04	; 4
    425e:	61 ec       	ldi	r22, 0xC1	; 193
    4260:	7b e0       	ldi	r23, 0x0B	; 11
    4262:	ce 01       	movw	r24, r28
    4264:	8d de       	rcall	.-742    	; 0x3f80 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    4266:	81 11       	cpse	r24, r1
    4268:	02 c0       	rjmp	.+4      	; 0x426e <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh+0x38>
  {
    #ifdef MIFAREDEBUG
      PN532DEBUGPRINT.println(F("Failed to receive ACK for read command"));
    #endif
    return 0;
    426a:	80 e0       	ldi	r24, 0x00	; 0
    426c:	12 c0       	rjmp	.+36     	; 0x4292 <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh+0x5c>
  }

  /* Read the response packet */
  readdata(pn532_packetbuffer, 26);
    426e:	4a e1       	ldi	r20, 0x1A	; 26
    4270:	61 ec       	ldi	r22, 0xC1	; 193
    4272:	7b e0       	ldi	r23, 0x0B	; 11
    4274:	ce 01       	movw	r24, r28
    4276:	e0 dd       	rcall	.-1088   	; 0x3e38 <_ZN9NFC_PN5328readdataEPhh>

  /* If byte 8 isn't 0x00 we probably have an error */
  if (pn532_packetbuffer[7] != 0x00)
    4278:	80 91 c8 0b 	lds	r24, 0x0BC8	; 0x800bc8 <pn532_packetbuffer+0x7>
    427c:	81 11       	cpse	r24, r1
    427e:	f5 cf       	rjmp	.-22     	; 0x426a <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh+0x34>
    return 0;
  }

  /* Copy the 16 data bytes to the output buffer        */
  /* Block content starts at byte 9 of a valid response */
  memcpy (data, pn532_packetbuffer+8, 16);
    4280:	80 e1       	ldi	r24, 0x10	; 16
    4282:	e9 ec       	ldi	r30, 0xC9	; 201
    4284:	fb e0       	ldi	r31, 0x0B	; 11
    4286:	d8 01       	movw	r26, r16
    4288:	01 90       	ld	r0, Z+
    428a:	0d 92       	st	X+, r0
    428c:	8a 95       	dec	r24
    428e:	e1 f7       	brne	.-8      	; 0x4288 <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh+0x52>
    PN532DEBUGPRINT.print(F("Block "));
    PN532DEBUGPRINT.println(blockNumber);
    NFC_PN532::PrintHexChar(data, 16);
  #endif

  return 1;
    4290:	81 e0       	ldi	r24, 0x01	; 1
}
    4292:	df 91       	pop	r29
    4294:	cf 91       	pop	r28
    4296:	1f 91       	pop	r17
    4298:	0f 91       	pop	r16
    429a:	08 95       	ret

0000429c <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh>:

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
uint8_t NFC_PN532::mifareclassic_WriteDataBlock (uint8_t blockNumber, uint8_t * data)
{
    429c:	cf 93       	push	r28
    429e:	df 93       	push	r29
    42a0:	ec 01       	movw	r28, r24
  #ifdef MIFAREDEBUG
    PN532DEBUGPRINT.print(F("Trying to write 16 bytes to block "));PN532DEBUGPRINT.println(blockNumber);
  #endif

  /* Prepare the first command */
  pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;
    42a2:	80 e4       	ldi	r24, 0x40	; 64
    42a4:	80 93 c1 0b 	sts	0x0BC1, r24	; 0x800bc1 <pn532_packetbuffer>
  pn532_packetbuffer[1] = 1;                      /* Card number */
    42a8:	81 e0       	ldi	r24, 0x01	; 1
    42aa:	80 93 c2 0b 	sts	0x0BC2, r24	; 0x800bc2 <pn532_packetbuffer+0x1>
  pn532_packetbuffer[2] = MIFARE_CMD_WRITE;       /* Mifare Write command = 0xA0 */
    42ae:	80 ea       	ldi	r24, 0xA0	; 160
    42b0:	80 93 c3 0b 	sts	0x0BC3, r24	; 0x800bc3 <pn532_packetbuffer+0x2>
  pn532_packetbuffer[3] = blockNumber;            /* Block Number (0..63 for 1K, 0..255 for 4K) */
    42b4:	60 93 c4 0b 	sts	0x0BC4, r22	; 0x800bc4 <pn532_packetbuffer+0x3>
  memcpy (pn532_packetbuffer+4, data, 16);          /* Data Payload */
    42b8:	80 e1       	ldi	r24, 0x10	; 16
    42ba:	fa 01       	movw	r30, r20
    42bc:	a5 ec       	ldi	r26, 0xC5	; 197
    42be:	bb e0       	ldi	r27, 0x0B	; 11
    42c0:	01 90       	ld	r0, Z+
    42c2:	0d 92       	st	X+, r0
    42c4:	8a 95       	dec	r24
    42c6:	e1 f7       	brne	.-8      	; 0x42c0 <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh+0x24>

  /* Send the command */
  if (! sendCommandCheckAck(pn532_packetbuffer, 20))
    42c8:	28 ee       	ldi	r18, 0xE8	; 232
    42ca:	33 e0       	ldi	r19, 0x03	; 3
    42cc:	44 e1       	ldi	r20, 0x14	; 20
    42ce:	61 ec       	ldi	r22, 0xC1	; 193
    42d0:	7b e0       	ldi	r23, 0x0B	; 11
    42d2:	ce 01       	movw	r24, r28
    42d4:	55 de       	rcall	.-854    	; 0x3f80 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    42d6:	88 23       	and	r24, r24
    42d8:	69 f0       	breq	.+26     	; 0x42f4 <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh+0x58>
    #endif

    // Return Failed Signal
    return 0;
  }
  delay(10);
    42da:	6a e0       	ldi	r22, 0x0A	; 10
    42dc:	70 e0       	ldi	r23, 0x00	; 0
    42de:	80 e0       	ldi	r24, 0x00	; 0
    42e0:	90 e0       	ldi	r25, 0x00	; 0
    42e2:	0e 94 15 3a 	call	0x742a	; 0x742a <delay>

  /* Read the response packet */
  readdata(pn532_packetbuffer, 26);
    42e6:	4a e1       	ldi	r20, 0x1A	; 26
    42e8:	61 ec       	ldi	r22, 0xC1	; 193
    42ea:	7b e0       	ldi	r23, 0x0B	; 11
    42ec:	ce 01       	movw	r24, r28
    42ee:	a4 dd       	rcall	.-1208   	; 0x3e38 <_ZN9NFC_PN5328readdataEPhh>
    42f0:	81 e0       	ldi	r24, 0x01	; 1
    42f2:	01 c0       	rjmp	.+2      	; 0x42f6 <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh+0x5a>
  if (! sendCommandCheckAck(pn532_packetbuffer, 20))
  {
    #ifdef MIFAREDEBUG
      PN532DEBUGPRINT.println(F("Failed to receive ACK for write command"));
    #endif
    return 0;
    42f4:	80 e0       	ldi	r24, 0x00	; 0

  /* Read the response packet */
  readdata(pn532_packetbuffer, 26);

  return 1;
}
    42f6:	df 91       	pop	r29
    42f8:	cf 91       	pop	r28
    42fa:	08 95       	ret

000042fc <_ZL9date2daysjhh>:
} // of method pinAlarm()                                                     //                                  //
/*******************************************************************************************************************
** Method pinSquareWave() will set the control register flag to make the INT/SQW Pin produce a 1Hz signal         **
*******************************************************************************************************************/
void DS3231M_Class::pinSquareWave() {                                         //                                  //
  writeByte(DS3231M_CONTROL,readByte(DS3231M_CONTROL)|0x4);                   // Set bit 3 to off                 //
    42fc:	80 3d       	cpi	r24, 0xD0	; 208
    42fe:	27 e0       	ldi	r18, 0x07	; 7
    4300:	92 07       	cpc	r25, r18
    4302:	10 f0       	brcs	.+4      	; 0x4308 <_ZL9date2daysjhh+0xc>
    4304:	80 5d       	subi	r24, 0xD0	; 208
    4306:	97 40       	sbci	r25, 0x07	; 7
    4308:	50 e0       	ldi	r21, 0x00	; 0
    430a:	e8 e2       	ldi	r30, 0x28	; 40
    430c:	f2 e0       	ldi	r31, 0x02	; 2
    430e:	21 e0       	ldi	r18, 0x01	; 1
    4310:	26 17       	cp	r18, r22
    4312:	30 f4       	brcc	.+12     	; 0x4320 <_ZL9date2daysjhh+0x24>
    4314:	34 91       	lpm	r19, Z
    4316:	43 0f       	add	r20, r19
    4318:	51 1d       	adc	r21, r1
    431a:	2f 5f       	subi	r18, 0xFF	; 255
    431c:	31 96       	adiw	r30, 0x01	; 1
    431e:	f8 cf       	rjmp	.-16     	; 0x4310 <_ZL9date2daysjhh+0x14>
    4320:	63 30       	cpi	r22, 0x03	; 3
    4322:	38 f0       	brcs	.+14     	; 0x4332 <_ZL9date2daysjhh+0x36>
    4324:	9c 01       	movw	r18, r24
    4326:	23 70       	andi	r18, 0x03	; 3
    4328:	33 27       	eor	r19, r19
    432a:	23 2b       	or	r18, r19
    432c:	11 f4       	brne	.+4      	; 0x4332 <_ZL9date2daysjhh+0x36>
    432e:	4f 5f       	subi	r20, 0xFF	; 255
    4330:	5f 4f       	sbci	r21, 0xFF	; 255
    4332:	bc 01       	movw	r22, r24
    4334:	6d 5f       	subi	r22, 0xFD	; 253
    4336:	7f 4f       	sbci	r23, 0xFF	; 255
    4338:	76 95       	lsr	r23
    433a:	67 95       	ror	r22
    433c:	76 95       	lsr	r23
    433e:	67 95       	ror	r22
    4340:	ed e6       	ldi	r30, 0x6D	; 109
    4342:	f1 e0       	ldi	r31, 0x01	; 1
    4344:	8e 9f       	mul	r24, r30
    4346:	90 01       	movw	r18, r0
    4348:	8f 9f       	mul	r24, r31
    434a:	30 0d       	add	r19, r0
    434c:	9e 9f       	mul	r25, r30
    434e:	30 0d       	add	r19, r0
    4350:	11 24       	eor	r1, r1
    4352:	c9 01       	movw	r24, r18
    4354:	01 97       	sbiw	r24, 0x01	; 1
    4356:	86 0f       	add	r24, r22
    4358:	97 1f       	adc	r25, r23
    435a:	84 0f       	add	r24, r20
    435c:	95 1f       	adc	r25, r21
    435e:	08 95       	ret

00004360 <_ZL6conv2dPKc>:
    4360:	fc 01       	movw	r30, r24
    4362:	90 81       	ld	r25, Z
    4364:	90 53       	subi	r25, 0x30	; 48
    4366:	9a 30       	cpi	r25, 0x0A	; 10
    4368:	08 f0       	brcs	.+2      	; 0x436c <_ZL6conv2dPKc+0xc>
    436a:	90 e0       	ldi	r25, 0x00	; 0
    436c:	81 81       	ldd	r24, Z+1	; 0x01
    436e:	80 53       	subi	r24, 0x30	; 48
    4370:	2a e0       	ldi	r18, 0x0A	; 10
    4372:	92 9f       	mul	r25, r18
    4374:	80 0d       	add	r24, r0
    4376:	11 24       	eor	r1, r1
    4378:	08 95       	ret

0000437a <_ZN8DateTimeC1Em>:
    437a:	8f 92       	push	r8
    437c:	9f 92       	push	r9
    437e:	af 92       	push	r10
    4380:	bf 92       	push	r11
    4382:	cf 92       	push	r12
    4384:	df 92       	push	r13
    4386:	ef 92       	push	r14
    4388:	ff 92       	push	r15
    438a:	cf 93       	push	r28
    438c:	df 93       	push	r29
    438e:	ec 01       	movw	r28, r24
    4390:	6a 01       	movw	r12, r20
    4392:	7b 01       	movw	r14, r22
    4394:	80 e8       	ldi	r24, 0x80	; 128
    4396:	c8 1a       	sub	r12, r24
    4398:	83 e4       	ldi	r24, 0x43	; 67
    439a:	d8 0a       	sbc	r13, r24
    439c:	8d e6       	ldi	r24, 0x6D	; 109
    439e:	e8 0a       	sbc	r14, r24
    43a0:	88 e3       	ldi	r24, 0x38	; 56
    43a2:	f8 0a       	sbc	r15, r24
    43a4:	8c e3       	ldi	r24, 0x3C	; 60
    43a6:	88 2e       	mov	r8, r24
    43a8:	91 2c       	mov	r9, r1
    43aa:	a1 2c       	mov	r10, r1
    43ac:	b1 2c       	mov	r11, r1
    43ae:	c7 01       	movw	r24, r14
    43b0:	b6 01       	movw	r22, r12
    43b2:	a5 01       	movw	r20, r10
    43b4:	94 01       	movw	r18, r8
    43b6:	0e 94 ac 3f 	call	0x7f58	; 0x7f58 <__udivmodsi4>
    43ba:	6d 83       	std	Y+5, r22	; 0x05
    43bc:	ca 01       	movw	r24, r20
    43be:	b9 01       	movw	r22, r18
    43c0:	a5 01       	movw	r20, r10
    43c2:	94 01       	movw	r18, r8
    43c4:	0e 94 ac 3f 	call	0x7f58	; 0x7f58 <__udivmodsi4>
    43c8:	6c 83       	std	Y+4, r22	; 0x04
    43ca:	c7 01       	movw	r24, r14
    43cc:	b6 01       	movw	r22, r12
    43ce:	20 e1       	ldi	r18, 0x10	; 16
    43d0:	3e e0       	ldi	r19, 0x0E	; 14
    43d2:	40 e0       	ldi	r20, 0x00	; 0
    43d4:	50 e0       	ldi	r21, 0x00	; 0
    43d6:	0e 94 ac 3f 	call	0x7f58	; 0x7f58 <__udivmodsi4>
    43da:	ca 01       	movw	r24, r20
    43dc:	b9 01       	movw	r22, r18
    43de:	28 e1       	ldi	r18, 0x18	; 24
    43e0:	30 e0       	ldi	r19, 0x00	; 0
    43e2:	40 e0       	ldi	r20, 0x00	; 0
    43e4:	50 e0       	ldi	r21, 0x00	; 0
    43e6:	0e 94 ac 3f 	call	0x7f58	; 0x7f58 <__udivmodsi4>
    43ea:	6b 83       	std	Y+3, r22	; 0x03
    43ec:	c7 01       	movw	r24, r14
    43ee:	b6 01       	movw	r22, r12
    43f0:	20 e8       	ldi	r18, 0x80	; 128
    43f2:	31 e5       	ldi	r19, 0x51	; 81
    43f4:	41 e0       	ldi	r20, 0x01	; 1
    43f6:	50 e0       	ldi	r21, 0x00	; 0
    43f8:	0e 94 ac 3f 	call	0x7f58	; 0x7f58 <__udivmodsi4>
    43fc:	18 82       	st	Y, r1
    43fe:	88 81       	ld	r24, Y
    4400:	98 2f       	mov	r25, r24
    4402:	93 70       	andi	r25, 0x03	; 3
    4404:	41 e0       	ldi	r20, 0x01	; 1
    4406:	50 e0       	ldi	r21, 0x00	; 0
    4408:	11 f0       	breq	.+4      	; 0x440e <_ZN8DateTimeC1Em+0x94>
    440a:	40 e0       	ldi	r20, 0x00	; 0
    440c:	50 e0       	ldi	r21, 0x00	; 0
    440e:	ba 01       	movw	r22, r20
    4410:	63 59       	subi	r22, 0x93	; 147
    4412:	7e 4f       	sbci	r23, 0xFE	; 254
    4414:	26 17       	cp	r18, r22
    4416:	37 07       	cpc	r19, r23
    4418:	38 f0       	brcs	.+14     	; 0x4428 <_ZN8DateTimeC1Em+0xae>
    441a:	24 1b       	sub	r18, r20
    441c:	35 0b       	sbc	r19, r21
    441e:	2d 56       	subi	r18, 0x6D	; 109
    4420:	31 40       	sbci	r19, 0x01	; 1
    4422:	8f 5f       	subi	r24, 0xFF	; 255
    4424:	88 83       	st	Y, r24
    4426:	eb cf       	rjmp	.-42     	; 0x43fe <_ZN8DateTimeC1Em+0x84>
    4428:	81 e0       	ldi	r24, 0x01	; 1
    442a:	89 83       	std	Y+1, r24	; 0x01
    442c:	89 81       	ldd	r24, Y+1	; 0x01
    442e:	e8 2f       	mov	r30, r24
    4430:	f0 e0       	ldi	r31, 0x00	; 0
    4432:	e9 5d       	subi	r30, 0xD9	; 217
    4434:	fd 4f       	sbci	r31, 0xFD	; 253
    4436:	e4 91       	lpm	r30, Z
    4438:	91 11       	cpse	r25, r1
    443a:	03 c0       	rjmp	.+6      	; 0x4442 <_ZN8DateTimeC1Em+0xc8>
    443c:	82 30       	cpi	r24, 0x02	; 2
    443e:	09 f4       	brne	.+2      	; 0x4442 <_ZN8DateTimeC1Em+0xc8>
    4440:	ef 5f       	subi	r30, 0xFF	; 255
    4442:	f0 e0       	ldi	r31, 0x00	; 0
    4444:	2e 17       	cp	r18, r30
    4446:	3f 07       	cpc	r19, r31
    4448:	20 f0       	brcs	.+8      	; 0x4452 <_ZN8DateTimeC1Em+0xd8>
    444a:	2e 1b       	sub	r18, r30
    444c:	3f 0b       	sbc	r19, r31
    444e:	8f 5f       	subi	r24, 0xFF	; 255
    4450:	ec cf       	rjmp	.-40     	; 0x442a <_ZN8DateTimeC1Em+0xb0>
    4452:	2f 5f       	subi	r18, 0xFF	; 255
    4454:	2a 83       	std	Y+2, r18	; 0x02
    4456:	df 91       	pop	r29
    4458:	cf 91       	pop	r28
    445a:	ff 90       	pop	r15
    445c:	ef 90       	pop	r14
    445e:	df 90       	pop	r13
    4460:	cf 90       	pop	r12
    4462:	bf 90       	pop	r11
    4464:	af 90       	pop	r10
    4466:	9f 90       	pop	r9
    4468:	8f 90       	pop	r8
    446a:	08 95       	ret

0000446c <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>:
    446c:	ef 92       	push	r14
    446e:	ff 92       	push	r15
    4470:	0f 93       	push	r16
    4472:	1f 93       	push	r17
    4474:	cf 93       	push	r28
    4476:	df 93       	push	r29
    4478:	cd b7       	in	r28, 0x3d	; 61
    447a:	de b7       	in	r29, 0x3e	; 62
    447c:	2b 97       	sbiw	r28, 0x0b	; 11
    447e:	0f b6       	in	r0, 0x3f	; 63
    4480:	f8 94       	cli
    4482:	de bf       	out	0x3e, r29	; 62
    4484:	0f be       	out	0x3f, r0	; 63
    4486:	cd bf       	out	0x3d, r28	; 61
    4488:	8c 01       	movw	r16, r24
    448a:	7a 01       	movw	r14, r20
    448c:	4b e0       	ldi	r20, 0x0B	; 11
    448e:	50 e0       	ldi	r21, 0x00	; 0
    4490:	ce 01       	movw	r24, r28
    4492:	01 96       	adiw	r24, 0x01	; 1
    4494:	0e 94 42 42 	call	0x8484	; 0x8484 <memcpy_P>
    4498:	ce 01       	movw	r24, r28
    449a:	0a 96       	adiw	r24, 0x0a	; 10
    449c:	61 df       	rcall	.-318    	; 0x4360 <_ZL6conv2dPKc>
    449e:	f8 01       	movw	r30, r16
    44a0:	80 83       	st	Z, r24
    44a2:	e9 81       	ldd	r30, Y+1	; 0x01
    44a4:	8e 2f       	mov	r24, r30
    44a6:	90 e0       	ldi	r25, 0x00	; 0
    44a8:	fc 01       	movw	r30, r24
    44aa:	e1 54       	subi	r30, 0x41	; 65
    44ac:	f1 09       	sbc	r31, r1
    44ae:	e3 31       	cpi	r30, 0x13	; 19
    44b0:	f1 05       	cpc	r31, r1
    44b2:	48 f5       	brcc	.+82     	; 0x4506 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
    44b4:	ed 5a       	subi	r30, 0xAD	; 173
    44b6:	ff 4f       	sbci	r31, 0xFF	; 255
    44b8:	0c 94 ce 3f 	jmp	0x7f9c	; 0x7f9c <__tablejump2__>
    44bc:	8a 81       	ldd	r24, Y+2	; 0x02
    44be:	81 36       	cpi	r24, 0x61	; 97
    44c0:	29 f0       	breq	.+10     	; 0x44cc <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x60>
    44c2:	8b 81       	ldd	r24, Y+3	; 0x03
    44c4:	8e 36       	cpi	r24, 0x6E	; 110
    44c6:	21 f0       	breq	.+8      	; 0x44d0 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x64>
    44c8:	87 e0       	ldi	r24, 0x07	; 7
    44ca:	1b c0       	rjmp	.+54     	; 0x4502 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    44cc:	81 e0       	ldi	r24, 0x01	; 1
    44ce:	19 c0       	rjmp	.+50     	; 0x4502 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    44d0:	86 e0       	ldi	r24, 0x06	; 6
    44d2:	17 c0       	rjmp	.+46     	; 0x4502 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    44d4:	82 e0       	ldi	r24, 0x02	; 2
    44d6:	15 c0       	rjmp	.+42     	; 0x4502 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    44d8:	8b 81       	ldd	r24, Y+3	; 0x03
    44da:	82 37       	cpi	r24, 0x72	; 114
    44dc:	11 f0       	breq	.+4      	; 0x44e2 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x76>
    44de:	88 e0       	ldi	r24, 0x08	; 8
    44e0:	10 c0       	rjmp	.+32     	; 0x4502 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    44e2:	84 e0       	ldi	r24, 0x04	; 4
    44e4:	0e c0       	rjmp	.+28     	; 0x4502 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    44e6:	8b 81       	ldd	r24, Y+3	; 0x03
    44e8:	82 37       	cpi	r24, 0x72	; 114
    44ea:	11 f0       	breq	.+4      	; 0x44f0 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x84>
    44ec:	85 e0       	ldi	r24, 0x05	; 5
    44ee:	09 c0       	rjmp	.+18     	; 0x4502 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    44f0:	83 e0       	ldi	r24, 0x03	; 3
    44f2:	07 c0       	rjmp	.+14     	; 0x4502 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    44f4:	89 e0       	ldi	r24, 0x09	; 9
    44f6:	05 c0       	rjmp	.+10     	; 0x4502 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    44f8:	8a e0       	ldi	r24, 0x0A	; 10
    44fa:	03 c0       	rjmp	.+6      	; 0x4502 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    44fc:	8b e0       	ldi	r24, 0x0B	; 11
    44fe:	01 c0       	rjmp	.+2      	; 0x4502 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    4500:	8c e0       	ldi	r24, 0x0C	; 12
    4502:	f8 01       	movw	r30, r16
    4504:	81 83       	std	Z+1, r24	; 0x01
    4506:	ce 01       	movw	r24, r28
    4508:	05 96       	adiw	r24, 0x05	; 5
    450a:	2a df       	rcall	.-428    	; 0x4360 <_ZL6conv2dPKc>
    450c:	f8 01       	movw	r30, r16
    450e:	82 83       	std	Z+2, r24	; 0x02
    4510:	48 e0       	ldi	r20, 0x08	; 8
    4512:	50 e0       	ldi	r21, 0x00	; 0
    4514:	b7 01       	movw	r22, r14
    4516:	ce 01       	movw	r24, r28
    4518:	01 96       	adiw	r24, 0x01	; 1
    451a:	0e 94 42 42 	call	0x8484	; 0x8484 <memcpy_P>
    451e:	ce 01       	movw	r24, r28
    4520:	01 96       	adiw	r24, 0x01	; 1
    4522:	1e df       	rcall	.-452    	; 0x4360 <_ZL6conv2dPKc>
    4524:	f8 01       	movw	r30, r16
    4526:	83 83       	std	Z+3, r24	; 0x03
    4528:	ce 01       	movw	r24, r28
    452a:	04 96       	adiw	r24, 0x04	; 4
    452c:	19 df       	rcall	.-462    	; 0x4360 <_ZL6conv2dPKc>
    452e:	f8 01       	movw	r30, r16
    4530:	84 83       	std	Z+4, r24	; 0x04
    4532:	ce 01       	movw	r24, r28
    4534:	07 96       	adiw	r24, 0x07	; 7
    4536:	14 df       	rcall	.-472    	; 0x4360 <_ZL6conv2dPKc>
    4538:	f8 01       	movw	r30, r16
    453a:	85 83       	std	Z+5, r24	; 0x05
    453c:	2b 96       	adiw	r28, 0x0b	; 11
    453e:	0f b6       	in	r0, 0x3f	; 63
    4540:	f8 94       	cli
    4542:	de bf       	out	0x3e, r29	; 62
    4544:	0f be       	out	0x3f, r0	; 63
    4546:	cd bf       	out	0x3d, r28	; 61
    4548:	df 91       	pop	r29
    454a:	cf 91       	pop	r28
    454c:	1f 91       	pop	r17
    454e:	0f 91       	pop	r16
    4550:	ff 90       	pop	r15
    4552:	ef 90       	pop	r14
    4554:	08 95       	ret

00004556 <_ZNK8DateTime12dayOfTheWeekEv>:
    4556:	fc 01       	movw	r30, r24
    4558:	80 81       	ld	r24, Z
    455a:	42 81       	ldd	r20, Z+2	; 0x02
    455c:	61 81       	ldd	r22, Z+1	; 0x01
    455e:	90 e0       	ldi	r25, 0x00	; 0
    4560:	cd de       	rcall	.-614    	; 0x42fc <_ZL9date2daysjhh>
    4562:	06 96       	adiw	r24, 0x06	; 6
    4564:	67 e0       	ldi	r22, 0x07	; 7
    4566:	70 e0       	ldi	r23, 0x00	; 0
    4568:	0c 94 98 3f 	jmp	0x7f30	; 0x7f30 <__udivmodhi4>
    456c:	08 95       	ret

0000456e <_ZNK8DateTime8unixtimeEv>:
    456e:	ef 92       	push	r14
    4570:	ff 92       	push	r15
    4572:	0f 93       	push	r16
    4574:	1f 93       	push	r17
    4576:	cf 93       	push	r28
    4578:	df 93       	push	r29
    457a:	ec 01       	movw	r28, r24
    457c:	88 81       	ld	r24, Y
    457e:	4a 81       	ldd	r20, Y+2	; 0x02
    4580:	69 81       	ldd	r22, Y+1	; 0x01
    4582:	90 e0       	ldi	r25, 0x00	; 0
    4584:	bb de       	rcall	.-650    	; 0x42fc <_ZL9date2daysjhh>
    4586:	9c 01       	movw	r18, r24
    4588:	a8 e1       	ldi	r26, 0x18	; 24
    458a:	b0 e0       	ldi	r27, 0x00	; 0
    458c:	0e 94 d7 3f 	call	0x7fae	; 0x7fae <__umulhisi3>
    4590:	2b 81       	ldd	r18, Y+3	; 0x03
    4592:	7b 01       	movw	r14, r22
    4594:	8c 01       	movw	r16, r24
    4596:	e2 0e       	add	r14, r18
    4598:	f1 1c       	adc	r15, r1
    459a:	01 1d       	adc	r16, r1
    459c:	11 1d       	adc	r17, r1
    459e:	a8 01       	movw	r20, r16
    45a0:	97 01       	movw	r18, r14
    45a2:	ac e3       	ldi	r26, 0x3C	; 60
    45a4:	b0 e0       	ldi	r27, 0x00	; 0
    45a6:	0e 94 e6 3f 	call	0x7fcc	; 0x7fcc <__muluhisi3>
    45aa:	2c 81       	ldd	r18, Y+4	; 0x04
    45ac:	7b 01       	movw	r14, r22
    45ae:	8c 01       	movw	r16, r24
    45b0:	e2 0e       	add	r14, r18
    45b2:	f1 1c       	adc	r15, r1
    45b4:	01 1d       	adc	r16, r1
    45b6:	11 1d       	adc	r17, r1
    45b8:	a8 01       	movw	r20, r16
    45ba:	97 01       	movw	r18, r14
    45bc:	0e 94 e6 3f 	call	0x7fcc	; 0x7fcc <__muluhisi3>
    45c0:	2d 81       	ldd	r18, Y+5	; 0x05
    45c2:	dc 01       	movw	r26, r24
    45c4:	cb 01       	movw	r24, r22
    45c6:	82 0f       	add	r24, r18
    45c8:	91 1d       	adc	r25, r1
    45ca:	a1 1d       	adc	r26, r1
    45cc:	b1 1d       	adc	r27, r1
    45ce:	bc 01       	movw	r22, r24
    45d0:	cd 01       	movw	r24, r26
    45d2:	60 58       	subi	r22, 0x80	; 128
    45d4:	7c 4b       	sbci	r23, 0xBC	; 188
    45d6:	82 49       	sbci	r24, 0x92	; 146
    45d8:	97 4c       	sbci	r25, 0xC7	; 199
    45da:	df 91       	pop	r29
    45dc:	cf 91       	pop	r28
    45de:	1f 91       	pop	r17
    45e0:	0f 91       	pop	r16
    45e2:	ff 90       	pop	r15
    45e4:	ef 90       	pop	r14
    45e6:	08 95       	ret

000045e8 <_ZNK8DateTime11secondstimeEv>:
    45e8:	ef 92       	push	r14
    45ea:	ff 92       	push	r15
    45ec:	0f 93       	push	r16
    45ee:	1f 93       	push	r17
    45f0:	cf 93       	push	r28
    45f2:	df 93       	push	r29
    45f4:	ec 01       	movw	r28, r24
    45f6:	88 81       	ld	r24, Y
    45f8:	4a 81       	ldd	r20, Y+2	; 0x02
    45fa:	69 81       	ldd	r22, Y+1	; 0x01
    45fc:	90 e0       	ldi	r25, 0x00	; 0
    45fe:	7e de       	rcall	.-772    	; 0x42fc <_ZL9date2daysjhh>
    4600:	9c 01       	movw	r18, r24
    4602:	a8 e1       	ldi	r26, 0x18	; 24
    4604:	b0 e0       	ldi	r27, 0x00	; 0
    4606:	0e 94 d7 3f 	call	0x7fae	; 0x7fae <__umulhisi3>
    460a:	2b 81       	ldd	r18, Y+3	; 0x03
    460c:	7b 01       	movw	r14, r22
    460e:	8c 01       	movw	r16, r24
    4610:	e2 0e       	add	r14, r18
    4612:	f1 1c       	adc	r15, r1
    4614:	01 1d       	adc	r16, r1
    4616:	11 1d       	adc	r17, r1
    4618:	a8 01       	movw	r20, r16
    461a:	97 01       	movw	r18, r14
    461c:	ac e3       	ldi	r26, 0x3C	; 60
    461e:	b0 e0       	ldi	r27, 0x00	; 0
    4620:	0e 94 e6 3f 	call	0x7fcc	; 0x7fcc <__muluhisi3>
    4624:	2c 81       	ldd	r18, Y+4	; 0x04
    4626:	7b 01       	movw	r14, r22
    4628:	8c 01       	movw	r16, r24
    462a:	e2 0e       	add	r14, r18
    462c:	f1 1c       	adc	r15, r1
    462e:	01 1d       	adc	r16, r1
    4630:	11 1d       	adc	r17, r1
    4632:	a8 01       	movw	r20, r16
    4634:	97 01       	movw	r18, r14
    4636:	0e 94 e6 3f 	call	0x7fcc	; 0x7fcc <__muluhisi3>
    463a:	2d 81       	ldd	r18, Y+5	; 0x05
    463c:	62 0f       	add	r22, r18
    463e:	71 1d       	adc	r23, r1
    4640:	81 1d       	adc	r24, r1
    4642:	91 1d       	adc	r25, r1
    4644:	df 91       	pop	r29
    4646:	cf 91       	pop	r28
    4648:	1f 91       	pop	r17
    464a:	0f 91       	pop	r16
    464c:	ff 90       	pop	r15
    464e:	ef 90       	pop	r14
    4650:	08 95       	ret

00004652 <_ZN13DS3231M_ClassC1Ev>:
    4652:	fc 01       	movw	r30, r24
    4654:	10 82       	st	Z, r1
    4656:	11 82       	std	Z+1, r1	; 0x01
    4658:	12 82       	std	Z+2, r1	; 0x02
    465a:	13 82       	std	Z+3, r1	; 0x03
    465c:	14 82       	std	Z+4, r1	; 0x04
    465e:	08 95       	ret

00004660 <_ZN13DS3231M_ClassD1Ev>:
    4660:	08 95       	ret

00004662 <_ZN13DS3231M_Class9writeByteEhh>:
    4662:	0f 93       	push	r16
    4664:	1f 93       	push	r17
    4666:	cf 93       	push	r28
    4668:	df 93       	push	r29
    466a:	ec 01       	movw	r28, r24
    466c:	06 2f       	mov	r16, r22
    466e:	14 2f       	mov	r17, r20
    4670:	68 e6       	ldi	r22, 0x68	; 104
    4672:	8a eb       	ldi	r24, 0xBA	; 186
    4674:	9c e0       	ldi	r25, 0x0C	; 12
    4676:	0e 94 e2 35 	call	0x6bc4	; 0x6bc4 <_ZN7TwoWire17beginTransmissionEh>
    467a:	60 2f       	mov	r22, r16
    467c:	8a eb       	ldi	r24, 0xBA	; 186
    467e:	9c e0       	ldi	r25, 0x0C	; 12
    4680:	0e 94 91 35 	call	0x6b22	; 0x6b22 <_ZN7TwoWire5writeEh>
    4684:	61 2f       	mov	r22, r17
    4686:	8a eb       	ldi	r24, 0xBA	; 186
    4688:	9c e0       	ldi	r25, 0x0C	; 12
    468a:	0e 94 91 35 	call	0x6b22	; 0x6b22 <_ZN7TwoWire5writeEh>
    468e:	8a eb       	ldi	r24, 0xBA	; 186
    4690:	9c e0       	ldi	r25, 0x0C	; 12
    4692:	0e 94 63 36 	call	0x6cc6	; 0x6cc6 <_ZN7TwoWire15endTransmissionEv>
    4696:	88 83       	st	Y, r24
    4698:	df 91       	pop	r29
    469a:	cf 91       	pop	r28
    469c:	1f 91       	pop	r17
    469e:	0f 91       	pop	r16
    46a0:	08 95       	ret

000046a2 <_ZN13DS3231M_Class8readByteEh>:
    46a2:	1f 93       	push	r17
    46a4:	cf 93       	push	r28
    46a6:	df 93       	push	r29
    46a8:	ec 01       	movw	r28, r24
    46aa:	16 2f       	mov	r17, r22
    46ac:	68 e6       	ldi	r22, 0x68	; 104
    46ae:	8a eb       	ldi	r24, 0xBA	; 186
    46b0:	9c e0       	ldi	r25, 0x0C	; 12
    46b2:	0e 94 e2 35 	call	0x6bc4	; 0x6bc4 <_ZN7TwoWire17beginTransmissionEh>
    46b6:	61 2f       	mov	r22, r17
    46b8:	8a eb       	ldi	r24, 0xBA	; 186
    46ba:	9c e0       	ldi	r25, 0x0C	; 12
    46bc:	0e 94 91 35 	call	0x6b22	; 0x6b22 <_ZN7TwoWire5writeEh>
    46c0:	8a eb       	ldi	r24, 0xBA	; 186
    46c2:	9c e0       	ldi	r25, 0x0C	; 12
    46c4:	0e 94 63 36 	call	0x6cc6	; 0x6cc6 <_ZN7TwoWire15endTransmissionEv>
    46c8:	88 83       	st	Y, r24
    46ca:	41 e0       	ldi	r20, 0x01	; 1
    46cc:	68 e6       	ldi	r22, 0x68	; 104
    46ce:	8a eb       	ldi	r24, 0xBA	; 186
    46d0:	9c e0       	ldi	r25, 0x0C	; 12
    46d2:	0e 94 5f 36 	call	0x6cbe	; 0x6cbe <_ZN7TwoWire11requestFromEhh>
    46d6:	8a eb       	ldi	r24, 0xBA	; 186
    46d8:	9c e0       	ldi	r25, 0x0C	; 12
    46da:	0e 94 0b 35 	call	0x6a16	; 0x6a16 <_ZN7TwoWire4readEv>
    46de:	df 91       	pop	r29
    46e0:	cf 91       	pop	r28
    46e2:	1f 91       	pop	r17
    46e4:	08 95       	ret

000046e6 <_ZN13DS3231M_Class5beginEm>:
    46e6:	cf 92       	push	r12
    46e8:	df 92       	push	r13
    46ea:	ef 92       	push	r14
    46ec:	ff 92       	push	r15
    46ee:	cf 93       	push	r28
    46f0:	df 93       	push	r29
    46f2:	ec 01       	movw	r28, r24
    46f4:	6a 01       	movw	r12, r20
    46f6:	7b 01       	movw	r14, r22
    46f8:	8a eb       	ldi	r24, 0xBA	; 186
    46fa:	9c e0       	ldi	r25, 0x0C	; 12
    46fc:	0e 94 cf 35 	call	0x6b9e	; 0x6b9e <_ZN7TwoWire5beginEv>
    4700:	b7 01       	movw	r22, r14
    4702:	a6 01       	movw	r20, r12
    4704:	8a eb       	ldi	r24, 0xBA	; 186
    4706:	9c e0       	ldi	r25, 0x0C	; 12
    4708:	0e 94 df 35 	call	0x6bbe	; 0x6bbe <_ZN7TwoWire8setClockEm>
    470c:	68 e6       	ldi	r22, 0x68	; 104
    470e:	8a eb       	ldi	r24, 0xBA	; 186
    4710:	9c e0       	ldi	r25, 0x0C	; 12
    4712:	0e 94 e2 35 	call	0x6bc4	; 0x6bc4 <_ZN7TwoWire17beginTransmissionEh>
    4716:	8a eb       	ldi	r24, 0xBA	; 186
    4718:	9c e0       	ldi	r25, 0x0C	; 12
    471a:	0e 94 63 36 	call	0x6cc6	; 0x6cc6 <_ZN7TwoWire15endTransmissionEv>
    471e:	81 11       	cpse	r24, r1
    4720:	0a c0       	rjmp	.+20     	; 0x4736 <_ZN13DS3231M_Class5beginEm+0x50>
    4722:	62 e0       	ldi	r22, 0x02	; 2
    4724:	ce 01       	movw	r24, r28
    4726:	bd df       	rcall	.-134    	; 0x46a2 <_ZN13DS3231M_Class8readByteEh>
    4728:	48 2f       	mov	r20, r24
    472a:	4f 7b       	andi	r20, 0xBF	; 191
    472c:	62 e0       	ldi	r22, 0x02	; 2
    472e:	ce 01       	movw	r24, r28
    4730:	98 df       	rcall	.-208    	; 0x4662 <_ZN13DS3231M_Class9writeByteEhh>
    4732:	81 e0       	ldi	r24, 0x01	; 1
    4734:	01 c0       	rjmp	.+2      	; 0x4738 <_ZN13DS3231M_Class5beginEm+0x52>
    4736:	80 e0       	ldi	r24, 0x00	; 0
    4738:	df 91       	pop	r29
    473a:	cf 91       	pop	r28
    473c:	ff 90       	pop	r15
    473e:	ef 90       	pop	r14
    4740:	df 90       	pop	r13
    4742:	cf 90       	pop	r12
    4744:	08 95       	ret

00004746 <_ZN13DS3231M_Class3nowEv>:
/*******************************************************************************************************************
** Method now() returns the current date/time                                                                     **
** then the power down time is returned, if the timeType = 2 then the power up time is returned. These options are**
** not documented as the official calls are "getPowerOffDate" and "getPowerOnDate"                                **
*******************************************************************************************************************/
DateTime DS3231M_Class::now(){                                                // Return current date/time         //
    4746:	0f 93       	push	r16
    4748:	1f 93       	push	r17
    474a:	cf 93       	push	r28
    474c:	df 93       	push	r29
    474e:	8c 01       	movw	r16, r24
    4750:	eb 01       	movw	r28, r22
  Wire.beginTransmission(DS3231M_ADDRESS);                                    // Address the I2C device           //
    4752:	68 e6       	ldi	r22, 0x68	; 104
    4754:	8a eb       	ldi	r24, 0xBA	; 186
    4756:	9c e0       	ldi	r25, 0x0C	; 12
    4758:	0e 94 e2 35 	call	0x6bc4	; 0x6bc4 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(DS3231M_RTCSEC);                                                 // Start at specified register      //
    475c:	60 e0       	ldi	r22, 0x00	; 0
    475e:	8a eb       	ldi	r24, 0xBA	; 186
    4760:	9c e0       	ldi	r25, 0x0C	; 12
    4762:	0e 94 91 35 	call	0x6b22	; 0x6b22 <_ZN7TwoWire5writeEh>
  _TransmissionStatus = Wire.endTransmission();                               // Close transmission               //
    4766:	8a eb       	ldi	r24, 0xBA	; 186
    4768:	9c e0       	ldi	r25, 0x0C	; 12
    476a:	0e 94 63 36 	call	0x6cc6	; 0x6cc6 <_ZN7TwoWire15endTransmissionEv>
    476e:	88 83       	st	Y, r24
  Wire.requestFrom(DS3231M_ADDRESS, (uint8_t)7);                              // Request 7 bytes of data          //
    4770:	47 e0       	ldi	r20, 0x07	; 7
    4772:	68 e6       	ldi	r22, 0x68	; 104
    4774:	8a eb       	ldi	r24, 0xBA	; 186
    4776:	9c e0       	ldi	r25, 0x0C	; 12
    4778:	0e 94 5f 36 	call	0x6cbe	; 0x6cbe <_ZN7TwoWire11requestFromEhh>
  if(Wire.available()==7) {                                                   // Wait until the data is ready     //
    477c:	8a eb       	ldi	r24, 0xBA	; 186
    477e:	9c e0       	ldi	r25, 0x0C	; 12
    4780:	0e 94 03 35 	call	0x6a06	; 0x6a06 <_ZN7TwoWire9availableEv>
    4784:	07 97       	sbiw	r24, 0x07	; 7
    4786:	09 f0       	breq	.+2      	; 0x478a <_ZN13DS3231M_Class3nowEv+0x44>
    4788:	64 c0       	rjmp	.+200    	; 0x4852 <_ZN13DS3231M_Class3nowEv+0x10c>
    _ss = bcd2int(Wire.read() & 0x7F);                                        // Mask high bit in seconds         //
    478a:	8a eb       	ldi	r24, 0xBA	; 186
    478c:	9c e0       	ldi	r25, 0x0C	; 12
    478e:	0e 94 0b 35 	call	0x6a16	; 0x6a16 <_ZN7TwoWire4readEv>
    4792:	98 2f       	mov	r25, r24
    4794:	96 95       	lsr	r25
    4796:	96 95       	lsr	r25
    4798:	96 95       	lsr	r25
    479a:	9e 70       	andi	r25, 0x0E	; 14
    479c:	29 2f       	mov	r18, r25
    479e:	22 0f       	add	r18, r18
    47a0:	22 0f       	add	r18, r18
    47a2:	92 0f       	add	r25, r18
    47a4:	8f 70       	andi	r24, 0x0F	; 15
    47a6:	89 0f       	add	r24, r25
    47a8:	8d 83       	std	Y+5, r24	; 0x05
    _mm = bcd2int(Wire.read() & 0x7F);                                        // Mask high bit in minutes         //
    47aa:	8a eb       	ldi	r24, 0xBA	; 186
    47ac:	9c e0       	ldi	r25, 0x0C	; 12
    47ae:	0e 94 0b 35 	call	0x6a16	; 0x6a16 <_ZN7TwoWire4readEv>
    47b2:	98 2f       	mov	r25, r24
    47b4:	96 95       	lsr	r25
    47b6:	96 95       	lsr	r25
    47b8:	96 95       	lsr	r25
    47ba:	9e 70       	andi	r25, 0x0E	; 14
    47bc:	29 2f       	mov	r18, r25
    47be:	22 0f       	add	r18, r18
    47c0:	22 0f       	add	r18, r18
    47c2:	92 0f       	add	r25, r18
    47c4:	8f 70       	andi	r24, 0x0F	; 15
    47c6:	89 0f       	add	r24, r25
    47c8:	8e 83       	std	Y+6, r24	; 0x06
    _hh = bcd2int(Wire.read() & 0x7F);                                        // Mask high bit in hours           //
    47ca:	8a eb       	ldi	r24, 0xBA	; 186
    47cc:	9c e0       	ldi	r25, 0x0C	; 12
    47ce:	0e 94 0b 35 	call	0x6a16	; 0x6a16 <_ZN7TwoWire4readEv>
    47d2:	98 2f       	mov	r25, r24
    47d4:	96 95       	lsr	r25
    47d6:	96 95       	lsr	r25
    47d8:	96 95       	lsr	r25
    47da:	9e 70       	andi	r25, 0x0E	; 14
    47dc:	29 2f       	mov	r18, r25
    47de:	22 0f       	add	r18, r18
    47e0:	22 0f       	add	r18, r18
    47e2:	92 0f       	add	r25, r18
    47e4:	8f 70       	andi	r24, 0x0F	; 15
    47e6:	89 0f       	add	r24, r25
    47e8:	8f 83       	std	Y+7, r24	; 0x07
    Wire.read();                                                              // Ignore Day-Of-Week register      //
    47ea:	8a eb       	ldi	r24, 0xBA	; 186
    47ec:	9c e0       	ldi	r25, 0x0C	; 12
    47ee:	0e 94 0b 35 	call	0x6a16	; 0x6a16 <_ZN7TwoWire4readEv>
    _d = bcd2int(Wire.read()  & 0x3F);                                        // Mask 2 high bits for day of month//
    47f2:	8a eb       	ldi	r24, 0xBA	; 186
    47f4:	9c e0       	ldi	r25, 0x0C	; 12
    47f6:	0e 94 0b 35 	call	0x6a16	; 0x6a16 <_ZN7TwoWire4readEv>
    47fa:	98 2f       	mov	r25, r24
    47fc:	96 95       	lsr	r25
    47fe:	96 95       	lsr	r25
    4800:	96 95       	lsr	r25
    4802:	96 70       	andi	r25, 0x06	; 6
    4804:	29 2f       	mov	r18, r25
    4806:	22 0f       	add	r18, r18
    4808:	22 0f       	add	r18, r18
    480a:	92 0f       	add	r25, r18
    480c:	8f 70       	andi	r24, 0x0F	; 15
    480e:	89 0f       	add	r24, r25
    4810:	88 87       	std	Y+8, r24	; 0x08
    _m = bcd2int(Wire.read()  & 0x1F);                                        // Mask 3 high bits for Month       //
    4812:	8a eb       	ldi	r24, 0xBA	; 186
    4814:	9c e0       	ldi	r25, 0x0C	; 12
    4816:	0e 94 0b 35 	call	0x6a16	; 0x6a16 <_ZN7TwoWire4readEv>
    481a:	84 fb       	bst	r24, 4
    481c:	99 27       	eor	r25, r25
    481e:	90 f9       	bld	r25, 0
    4820:	99 0f       	add	r25, r25
    4822:	29 2f       	mov	r18, r25
    4824:	22 0f       	add	r18, r18
    4826:	22 0f       	add	r18, r18
    4828:	92 0f       	add	r25, r18
    482a:	8f 70       	andi	r24, 0x0F	; 15
    482c:	89 0f       	add	r24, r25
    482e:	89 87       	std	Y+9, r24	; 0x09
    _y = bcd2int(Wire.read()) + 2000;                                         // Add 2000 to internal year        //
    4830:	8a eb       	ldi	r24, 0xBA	; 186
    4832:	9c e0       	ldi	r25, 0x0C	; 12
    4834:	0e 94 0b 35 	call	0x6a16	; 0x6a16 <_ZN7TwoWire4readEv>
    4838:	98 2f       	mov	r25, r24
    483a:	92 95       	swap	r25
    483c:	9f 70       	andi	r25, 0x0F	; 15
    483e:	8f 70       	andi	r24, 0x0F	; 15
    4840:	2a e0       	ldi	r18, 0x0A	; 10
    4842:	92 9f       	mul	r25, r18
    4844:	80 0d       	add	r24, r0
    4846:	11 24       	eor	r1, r1
    4848:	90 e0       	ldi	r25, 0x00	; 0
    484a:	80 53       	subi	r24, 0x30	; 48
    484c:	98 4f       	sbci	r25, 0xF8	; 248
    484e:	9b 87       	std	Y+11, r25	; 0x0b
    4850:	8a 87       	std	Y+10, r24	; 0x0a
  } // of if-then there is data to be read                                    //                                  //
  return DateTime (_y, _m, _d, _hh, _mm, _ss);                                // Return class value               //
    4852:	2d 81       	ldd	r18, Y+5	; 0x05
    4854:	3e 81       	ldd	r19, Y+6	; 0x06
    4856:	4f 81       	ldd	r20, Y+7	; 0x07
    4858:	58 85       	ldd	r21, Y+8	; 0x08
    485a:	69 85       	ldd	r22, Y+9	; 0x09
    485c:	8a 85       	ldd	r24, Y+10	; 0x0a
    485e:	9b 85       	ldd	r25, Y+11	; 0x0b
  } // of for-next each month                                                 //                                  //
  d = days + 1;                                                               //                                  //
} // of method DateTime()                                                     //----------------------------------//
DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour,  //                                  //
                    uint8_t min, uint8_t sec) {                               //                                  //
  if (year >= 2000)                                                           //                                  //
    4860:	80 3d       	cpi	r24, 0xD0	; 208
    4862:	77 e0       	ldi	r23, 0x07	; 7
    4864:	97 07       	cpc	r25, r23
    4866:	10 f0       	brcs	.+4      	; 0x486c <_ZN13DS3231M_Class3nowEv+0x126>
  year -= 2000;                                                               //                                  //
    4868:	80 5d       	subi	r24, 0xD0	; 208
    486a:	97 40       	sbci	r25, 0x07	; 7
  yOff = year;                                                                //                                  //
    486c:	f8 01       	movw	r30, r16
    486e:	80 83       	st	Z, r24
  m = month;                                                                  //                                  //
    4870:	61 83       	std	Z+1, r22	; 0x01
  d = day;                                                                    //                                  //
    4872:	52 83       	std	Z+2, r21	; 0x02
  hh = hour;                                                                  //                                  //
    4874:	43 83       	std	Z+3, r20	; 0x03
  mm = min;                                                                   //                                  //
    4876:	34 83       	std	Z+4, r19	; 0x04
  ss = sec;                                                                   //                                  //
    4878:	25 83       	std	Z+5, r18	; 0x05
    _d = bcd2int(Wire.read()  & 0x3F);                                        // Mask 2 high bits for day of month//
    _m = bcd2int(Wire.read()  & 0x1F);                                        // Mask 3 high bits for Month       //
    _y = bcd2int(Wire.read()) + 2000;                                         // Add 2000 to internal year        //
  } // of if-then there is data to be read                                    //                                  //
  return DateTime (_y, _m, _d, _hh, _mm, _ss);                                // Return class value               //
} // of method now                                                            //                                  //
    487a:	c8 01       	movw	r24, r16
    487c:	df 91       	pop	r29
    487e:	cf 91       	pop	r28
    4880:	1f 91       	pop	r17
    4882:	0f 91       	pop	r16
    4884:	08 95       	ret

00004886 <_ZN13DS3231M_Class6adjustERK8DateTime>:
** oscillator is stopped during the process and needs to be restarted upon completion.                            **
*******************************************************************************************************************/
void DS3231M_Class::adjust() {                                                // Set the RTC date and Time        //
  adjust(DateTime(F(__DATE__), F(__TIME__)));                                 // Set to compile time              //
} // of method adjust                                                         /-----------------------------------//
void DS3231M_Class::adjust(const DateTime& dt) {                              // Set the RTC date and Time        //
    4886:	df 92       	push	r13
    4888:	ef 92       	push	r14
    488a:	ff 92       	push	r15
    488c:	0f 93       	push	r16
    488e:	1f 93       	push	r17
    4890:	cf 93       	push	r28
    4892:	df 93       	push	r29
    4894:	00 d0       	rcall	.+0      	; 0x4896 <_ZN13DS3231M_Class6adjustERK8DateTime+0x10>
    4896:	00 d0       	rcall	.+0      	; 0x4898 <_ZN13DS3231M_Class6adjustERK8DateTime+0x12>
    4898:	00 d0       	rcall	.+0      	; 0x489a <_ZN13DS3231M_Class6adjustERK8DateTime+0x14>
    489a:	cd b7       	in	r28, 0x3d	; 61
    489c:	de b7       	in	r29, 0x3e	; 62
    489e:	8c 01       	movw	r16, r24
    48a0:	7b 01       	movw	r14, r22
    48a2:	fb 01       	movw	r30, r22
    48a4:	85 81       	ldd	r24, Z+5	; 0x05
  writeByte(DS3231M_RTCSEC,int2bcd(dt.second()));                             // Write seconds, keep device off   //
    48a6:	9a e0       	ldi	r25, 0x0A	; 10
    48a8:	d9 2e       	mov	r13, r25
    48aa:	6d 2d       	mov	r22, r13
    48ac:	0e 94 8c 3f 	call	0x7f18	; 0x7f18 <__udivmodqi4>
    48b0:	49 2f       	mov	r20, r25
    48b2:	f0 e1       	ldi	r31, 0x10	; 16
    48b4:	8f 9f       	mul	r24, r31
    48b6:	40 0d       	add	r20, r0
    48b8:	11 24       	eor	r1, r1
    48ba:	60 e0       	ldi	r22, 0x00	; 0
    48bc:	c8 01       	movw	r24, r16
    48be:	d1 de       	rcall	.-606    	; 0x4662 <_ZN13DS3231M_Class9writeByteEhh>
    48c0:	f7 01       	movw	r30, r14
    48c2:	84 81       	ldd	r24, Z+4	; 0x04
  writeByte(DS3231M_RTCMIN,int2bcd(dt.minute()));                             // Write the minutes value          //
    48c4:	6d 2d       	mov	r22, r13
    48c6:	0e 94 8c 3f 	call	0x7f18	; 0x7f18 <__udivmodqi4>
    48ca:	49 2f       	mov	r20, r25
    48cc:	f0 e1       	ldi	r31, 0x10	; 16
    48ce:	8f 9f       	mul	r24, r31
    48d0:	40 0d       	add	r20, r0
    48d2:	11 24       	eor	r1, r1
    48d4:	61 e0       	ldi	r22, 0x01	; 1
    48d6:	c8 01       	movw	r24, r16
    48d8:	c4 de       	rcall	.-632    	; 0x4662 <_ZN13DS3231M_Class9writeByteEhh>
    48da:	f7 01       	movw	r30, r14
    48dc:	83 81       	ldd	r24, Z+3	; 0x03
  writeByte(DS3231M_RTCHOUR,int2bcd(dt.hour()));                              // Also re-sets the 24Hour clock on //
    48de:	6d 2d       	mov	r22, r13
    48e0:	0e 94 8c 3f 	call	0x7f18	; 0x7f18 <__udivmodqi4>
    48e4:	49 2f       	mov	r20, r25
    48e6:	f0 e1       	ldi	r31, 0x10	; 16
    48e8:	8f 9f       	mul	r24, r31
    48ea:	40 0d       	add	r20, r0
    48ec:	11 24       	eor	r1, r1
    48ee:	62 e0       	ldi	r22, 0x02	; 2
    48f0:	c8 01       	movw	r24, r16
  writeByte(DS3231M_RTCWKDAY,dt.dayOfTheWeek());                              // Update the weekday               //
    48f2:	b7 de       	rcall	.-658    	; 0x4662 <_ZN13DS3231M_Class9writeByteEhh>
    48f4:	c7 01       	movw	r24, r14
    48f6:	2f de       	rcall	.-930    	; 0x4556 <_ZNK8DateTime12dayOfTheWeekEv>
    48f8:	48 2f       	mov	r20, r24
    48fa:	63 e0       	ldi	r22, 0x03	; 3
    48fc:	c8 01       	movw	r24, r16
    48fe:	b1 de       	rcall	.-670    	; 0x4662 <_ZN13DS3231M_Class9writeByteEhh>
    4900:	f7 01       	movw	r30, r14
    4902:	82 81       	ldd	r24, Z+2	; 0x02
  writeByte(DS3231M_RTCDATE,int2bcd(dt.day()));                               // Write the day of month           //
    4904:	6d 2d       	mov	r22, r13
    4906:	0e 94 8c 3f 	call	0x7f18	; 0x7f18 <__udivmodqi4>
    490a:	49 2f       	mov	r20, r25
    490c:	f0 e1       	ldi	r31, 0x10	; 16
    490e:	8f 9f       	mul	r24, r31
    4910:	40 0d       	add	r20, r0
    4912:	11 24       	eor	r1, r1
    4914:	64 e0       	ldi	r22, 0x04	; 4
    4916:	c8 01       	movw	r24, r16
    4918:	a4 de       	rcall	.-696    	; 0x4662 <_ZN13DS3231M_Class9writeByteEhh>
    491a:	f7 01       	movw	r30, r14
    491c:	81 81       	ldd	r24, Z+1	; 0x01
  writeByte(DS3231M_RTCMTH,int2bcd(dt.month()));                              // Month, ignore century bit        //
    491e:	6d 2d       	mov	r22, r13
    4920:	0e 94 8c 3f 	call	0x7f18	; 0x7f18 <__udivmodqi4>
    4924:	49 2f       	mov	r20, r25
    4926:	f0 e1       	ldi	r31, 0x10	; 16
    4928:	8f 9f       	mul	r24, r31
    492a:	40 0d       	add	r20, r0
    492c:	11 24       	eor	r1, r1
    492e:	65 e0       	ldi	r22, 0x05	; 5
    4930:	c8 01       	movw	r24, r16
    4932:	97 de       	rcall	.-722    	; 0x4662 <_ZN13DS3231M_Class9writeByteEhh>
  writeByte(DS3231M_RTCYEAR,int2bcd(dt.year()-2000));                         // Write the year                   //
    4934:	f7 01       	movw	r30, r14
    4936:	80 81       	ld	r24, Z
    4938:	6d 2d       	mov	r22, r13
    493a:	0e 94 8c 3f 	call	0x7f18	; 0x7f18 <__udivmodqi4>
    493e:	49 2f       	mov	r20, r25
    4940:	f0 e1       	ldi	r31, 0x10	; 16
    4942:	8f 9f       	mul	r24, r31
    4944:	40 0d       	add	r20, r0
    4946:	11 24       	eor	r1, r1
    4948:	66 e0       	ldi	r22, 0x06	; 6
    494a:	c8 01       	movw	r24, r16
  writeByte(DS3231M_STATUS,readByte(DS3231M_STATUS)&B01111111);               // Unset OSC flag bit if set        //
    494c:	8a de       	rcall	.-748    	; 0x4662 <_ZN13DS3231M_Class9writeByteEhh>
    494e:	6f e0       	ldi	r22, 0x0F	; 15
    4950:	c8 01       	movw	r24, r16
    4952:	a7 de       	rcall	.-690    	; 0x46a2 <_ZN13DS3231M_Class8readByteEh>
    4954:	48 2f       	mov	r20, r24
    4956:	4f 77       	andi	r20, 0x7F	; 127
    4958:	6f e0       	ldi	r22, 0x0F	; 15
    495a:	c8 01       	movw	r24, r16
  writeByte(DS3231M_CONTROL,readByte(DS3231M_CONTROL)&B01111111);             // Unset EOSC flag bit if set       //
    495c:	82 de       	rcall	.-764    	; 0x4662 <_ZN13DS3231M_Class9writeByteEhh>
    495e:	6e e0       	ldi	r22, 0x0E	; 14
    4960:	c8 01       	movw	r24, r16
    4962:	9f de       	rcall	.-706    	; 0x46a2 <_ZN13DS3231M_Class8readByteEh>
    4964:	48 2f       	mov	r20, r24
    4966:	4f 77       	andi	r20, 0x7F	; 127
    4968:	6e e0       	ldi	r22, 0x0E	; 14
    496a:	c8 01       	movw	r24, r16
  _SetUnixTime = now().unixtime();                                            // Store time of last change        //
    496c:	7a de       	rcall	.-780    	; 0x4662 <_ZN13DS3231M_Class9writeByteEhh>
    496e:	b8 01       	movw	r22, r16
    4970:	ce 01       	movw	r24, r28
    4972:	01 96       	adiw	r24, 0x01	; 1
    4974:	e8 de       	rcall	.-560    	; 0x4746 <_ZN13DS3231M_Class3nowEv>
    4976:	ce 01       	movw	r24, r28
    4978:	01 96       	adiw	r24, 0x01	; 1
    497a:	f9 dd       	rcall	.-1038   	; 0x456e <_ZNK8DateTime8unixtimeEv>
    497c:	f8 01       	movw	r30, r16
    497e:	61 83       	std	Z+1, r22	; 0x01
    4980:	72 83       	std	Z+2, r23	; 0x02
    4982:	83 83       	std	Z+3, r24	; 0x03
    4984:	94 83       	std	Z+4, r25	; 0x04
    4986:	26 96       	adiw	r28, 0x06	; 6
} // of method adjust                                                         //                                  //
    4988:	0f b6       	in	r0, 0x3f	; 63
    498a:	f8 94       	cli
    498c:	de bf       	out	0x3e, r29	; 62
    498e:	0f be       	out	0x3f, r0	; 63
    4990:	cd bf       	out	0x3d, r28	; 61
    4992:	df 91       	pop	r29
    4994:	cf 91       	pop	r28
    4996:	1f 91       	pop	r17
    4998:	0f 91       	pop	r16
    499a:	ff 90       	pop	r15
    499c:	ef 90       	pop	r14
    499e:	df 90       	pop	r13
    49a0:	08 95       	ret

000049a2 <_ZN13DS3231M_Class6adjustEv>:
    49a2:	0f 93       	push	r16
/*******************************************************************************************************************
** Method adjust set the current date/time. This is an overloaded function, if called with no parameters then the **
** RTC is set to the date/time when the program was compiled and uploaded. Otherwise the values are set, but the  **
** oscillator is stopped during the process and needs to be restarted upon completion.                            **
*******************************************************************************************************************/
void DS3231M_Class::adjust() {                                                // Set the RTC date and Time        //
    49a4:	1f 93       	push	r17
    49a6:	cf 93       	push	r28
    49a8:	df 93       	push	r29
    49aa:	00 d0       	rcall	.+0      	; 0x49ac <_ZN13DS3231M_Class6adjustEv+0xa>
    49ac:	00 d0       	rcall	.+0      	; 0x49ae <_ZN13DS3231M_Class6adjustEv+0xc>
    49ae:	00 d0       	rcall	.+0      	; 0x49b0 <_ZN13DS3231M_Class6adjustEv+0xe>
    49b0:	cd b7       	in	r28, 0x3d	; 61
    49b2:	de b7       	in	r29, 0x3e	; 62
    49b4:	8c 01       	movw	r16, r24
  adjust(DateTime(F(__DATE__), F(__TIME__)));                                 // Set to compile time              //
    49b6:	4f e1       	ldi	r20, 0x1F	; 31
    49b8:	52 e0       	ldi	r21, 0x02	; 2
    49ba:	63 e1       	ldi	r22, 0x13	; 19
    49bc:	72 e0       	ldi	r23, 0x02	; 2
    49be:	ce 01       	movw	r24, r28
    49c0:	01 96       	adiw	r24, 0x01	; 1
    49c2:	54 dd       	rcall	.-1368   	; 0x446c <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>
    49c4:	be 01       	movw	r22, r28
    49c6:	6f 5f       	subi	r22, 0xFF	; 255
    49c8:	7f 4f       	sbci	r23, 0xFF	; 255
    49ca:	c8 01       	movw	r24, r16
    49cc:	5c df       	rcall	.-328    	; 0x4886 <_ZN13DS3231M_Class6adjustERK8DateTime>
} // of method adjust                                                         /-----------------------------------//
    49ce:	26 96       	adiw	r28, 0x06	; 6
    49d0:	0f b6       	in	r0, 0x3f	; 63
    49d2:	f8 94       	cli
    49d4:	de bf       	out	0x3e, r29	; 62
    49d6:	0f be       	out	0x3f, r0	; 63
    49d8:	cd bf       	out	0x3d, r28	; 61
    49da:	df 91       	pop	r29
    49dc:	cf 91       	pop	r28
    49de:	1f 91       	pop	r17
    49e0:	0f 91       	pop	r16
    49e2:	08 95       	ret

000049e4 <_GLOBAL__sub_I__ZN9DhcpClass13beginWithDHCPEPhmm>:
    unsigned long m = n;
    n /= 16;
    char c = m - 16 * n;
    *str-- = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);
}
    49e4:	0f 93       	push	r16
    49e6:	00 e0       	ldi	r16, 0x00	; 0
    49e8:	20 e0       	ldi	r18, 0x00	; 0
    49ea:	40 e0       	ldi	r20, 0x00	; 0
    49ec:	60 e0       	ldi	r22, 0x00	; 0
    49ee:	81 e0       	ldi	r24, 0x01	; 1
    49f0:	9c e0       	ldi	r25, 0x0C	; 12
    49f2:	0e 94 5e 38 	call	0x70bc	; 0x70bc <_ZN9IPAddressC1Ehhhh>
    49f6:	0f 91       	pop	r16
    49f8:	08 95       	ret

000049fa <_ZN9DNSClient5beginERK9IPAddress>:
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    49fa:	fb 01       	movw	r30, r22
    49fc:	42 81       	ldd	r20, Z+2	; 0x02
    49fe:	53 81       	ldd	r21, Z+3	; 0x03
    4a00:	64 81       	ldd	r22, Z+4	; 0x04
    4a02:	75 81       	ldd	r23, Z+5	; 0x05
    4a04:	fc 01       	movw	r30, r24
    4a06:	42 83       	std	Z+2, r20	; 0x02
    4a08:	53 83       	std	Z+3, r21	; 0x03
    4a0a:	64 83       	std	Z+4, r22	; 0x04
    4a0c:	75 83       	std	Z+5, r23	; 0x05
#define INVALID_RESPONSE -4

void DNSClient::begin(const IPAddress& aDNSServer)
{
    iDNSServer = aDNSServer;
    iRequestId = 0;
    4a0e:	17 82       	std	Z+7, r1	; 0x07
    4a10:	16 82       	std	Z+6, r1	; 0x06
    4a12:	08 95       	ret

00004a14 <_ZN9DNSClient9inet_atonEPKcR9IPAddress>:
}


int DNSClient::inet_aton(const char* aIPAddrString, IPAddress& aResult)
{
    4a14:	cf 93       	push	r28
    4a16:	df 93       	push	r29
    4a18:	da 01       	movw	r26, r20
    4a1a:	fb 01       	movw	r30, r22
    4a1c:	eb 01       	movw	r28, r22
    // See if we've been given a valid IP address
    const char* p =aIPAddrString;
    while (*p &&
    4a1e:	89 91       	ld	r24, Y+
    4a20:	81 11       	cpse	r24, r1
    4a22:	fd cf       	rjmp	.-6      	; 0x4a1e <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0xa>
    4a24:	80 e0       	ldi	r24, 0x00	; 0
    4a26:	90 e0       	ldi	r25, 0x00	; 0
    4a28:	20 e0       	ldi	r18, 0x00	; 0
    4a2a:	30 e0       	ldi	r19, 0x00	; 0
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
    4a2c:	4a e0       	ldi	r20, 0x0A	; 10
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
        int segmentValue =0;
        while (*p && (segment < 4))
    4a2e:	51 91       	ld	r21, Z+
    4a30:	55 23       	and	r21, r21
    4a32:	e9 f0       	breq	.+58     	; 0x4a6e <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x5a>
    4a34:	24 30       	cpi	r18, 0x04	; 4
    4a36:	31 05       	cpc	r19, r1
    4a38:	44 f5       	brge	.+80     	; 0x4a8a <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
        {
            if (*p == '.')
    4a3a:	5e 32       	cpi	r21, 0x2E	; 46
    4a3c:	69 f4       	brne	.+26     	; 0x4a58 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x44>
            {
                // We've reached the end of a segment
                if (segmentValue > 255)
    4a3e:	8f 3f       	cpi	r24, 0xFF	; 255
    4a40:	91 05       	cpc	r25, r1
    4a42:	09 f0       	breq	.+2      	; 0x4a46 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x32>
    4a44:	14 f5       	brge	.+68     	; 0x4a8a <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
                    // You can't have IP address segments that don't fit in a byte
                    return 0;
                }
                else
                {
                    aResult[segment] = (byte)segmentValue;
    4a46:	ed 01       	movw	r28, r26
    4a48:	c2 0f       	add	r28, r18
    4a4a:	d3 1f       	adc	r29, r19
    4a4c:	8a 83       	std	Y+2, r24	; 0x02
                    segment++;
    4a4e:	2f 5f       	subi	r18, 0xFF	; 255
    4a50:	3f 4f       	sbci	r19, 0xFF	; 255
                    segmentValue = 0;
    4a52:	80 e0       	ldi	r24, 0x00	; 0
    4a54:	90 e0       	ldi	r25, 0x00	; 0
    4a56:	eb cf       	rjmp	.-42     	; 0x4a2e <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x1a>
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
    4a58:	48 9f       	mul	r20, r24
    4a5a:	b0 01       	movw	r22, r0
    4a5c:	49 9f       	mul	r20, r25
    4a5e:	70 0d       	add	r23, r0
    4a60:	11 24       	eor	r1, r1
    4a62:	85 2f       	mov	r24, r21
    4a64:	90 e0       	ldi	r25, 0x00	; 0
    4a66:	c0 97       	sbiw	r24, 0x30	; 48
    4a68:	86 0f       	add	r24, r22
    4a6a:	97 1f       	adc	r25, r23
    4a6c:	e0 cf       	rjmp	.-64     	; 0x4a2e <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x1a>
            }
            p++;
        }
        // We've reached the end of address, but there'll still be the last
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
    4a6e:	8f 3f       	cpi	r24, 0xFF	; 255
    4a70:	91 05       	cpc	r25, r1
    4a72:	09 f0       	breq	.+2      	; 0x4a76 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x62>
    4a74:	54 f4       	brge	.+20     	; 0x4a8a <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
    4a76:	24 30       	cpi	r18, 0x04	; 4
    4a78:	31 05       	cpc	r19, r1
    4a7a:	3c f4       	brge	.+14     	; 0x4a8a <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
            // or more than four segments
            return 0;
        }
        else
        {
            aResult[segment] = (byte)segmentValue;
    4a7c:	fd 01       	movw	r30, r26
    4a7e:	e2 0f       	add	r30, r18
    4a80:	f3 1f       	adc	r31, r19
    4a82:	82 83       	std	Z+2, r24	; 0x02
            return 1;
    4a84:	81 e0       	ldi	r24, 0x01	; 1
    4a86:	90 e0       	ldi	r25, 0x00	; 0
    4a88:	02 c0       	rjmp	.+4      	; 0x4a8e <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x7a>
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
        {
            // You can't have IP address segments that don't fit in a byte,
            // or more than four segments
            return 0;
    4a8a:	80 e0       	ldi	r24, 0x00	; 0
    4a8c:	90 e0       	ldi	r25, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    4a8e:	df 91       	pop	r29
    4a90:	cf 91       	pop	r28
    4a92:	08 95       	ret

00004a94 <_GLOBAL__sub_I__ZN9DNSClient5beginERK9IPAddress>:
    // Mark the entire packet as read
    iUdp.flush();

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
}
    4a94:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    4a96:	00 e0       	ldi	r16, 0x00	; 0
    4a98:	20 e0       	ldi	r18, 0x00	; 0
    4a9a:	40 e0       	ldi	r20, 0x00	; 0
    4a9c:	60 e0       	ldi	r22, 0x00	; 0
    4a9e:	87 e0       	ldi	r24, 0x07	; 7
    4aa0:	9c e0       	ldi	r25, 0x0C	; 12
    4aa2:	0e 94 5e 38 	call	0x70bc	; 0x70bc <_ZN9IPAddressC1Ehhhh>
    4aa6:	0f 91       	pop	r16
    4aa8:	08 95       	ret

00004aaa <_ZN9DNSClient12BuildRequestEPKc>:

    return ret;
}

uint16_t DNSClient::BuildRequest(const char* aName)
{
    4aaa:	8f 92       	push	r8
    4aac:	9f 92       	push	r9
    4aae:	af 92       	push	r10
    4ab0:	bf 92       	push	r11
    4ab2:	cf 92       	push	r12
    4ab4:	df 92       	push	r13
    4ab6:	ef 92       	push	r14
    4ab8:	ff 92       	push	r15
    4aba:	0f 93       	push	r16
    4abc:	1f 93       	push	r17
    4abe:	cf 93       	push	r28
    4ac0:	df 93       	push	r29
    4ac2:	00 d0       	rcall	.+0      	; 0x4ac4 <_ZN9DNSClient12BuildRequestEPKc+0x1a>
    4ac4:	1f 92       	push	r1
    4ac6:	cd b7       	in	r28, 0x3d	; 61
    4ac8:	de b7       	in	r29, 0x3e	; 62
    4aca:	6c 01       	movw	r12, r24
    4acc:	7b 01       	movw	r14, r22
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    //    |                    ARCOUNT                    |
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    // As we only support one request at a time at present, we can simplify
    // some of this header
    iRequestId = millis(); // generate a random ID
    4ace:	0e 94 e4 39 	call	0x73c8	; 0x73c8 <millis>
    4ad2:	f6 01       	movw	r30, r12
    4ad4:	77 83       	std	Z+7, r23	; 0x07
    4ad6:	66 83       	std	Z+6, r22	; 0x06
    uint16_t twoByteBuffer;

    // FIXME We should also check that there's enough space available to write to, rather
    // FIXME than assume there's enough space (as the code does at present)
    iUdp.write((uint8_t*)&iRequestId, sizeof(iRequestId));
    4ad8:	86 01       	movw	r16, r12
    4ada:	08 5f       	subi	r16, 0xF8	; 248
    4adc:	1f 4f       	sbci	r17, 0xFF	; 255
    4ade:	b6 01       	movw	r22, r12
    4ae0:	6a 5f       	subi	r22, 0xFA	; 250
    4ae2:	7f 4f       	sbci	r23, 0xFF	; 255
    4ae4:	42 e0       	ldi	r20, 0x02	; 2
    4ae6:	50 e0       	ldi	r21, 0x00	; 0
    4ae8:	c8 01       	movw	r24, r16
    4aea:	30 d5       	rcall	.+2656   	; 0x554c <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = htons(QUERY_FLAG | OPCODE_STANDARD_QUERY | RECURSION_DESIRED_FLAG);
    4aec:	81 e0       	ldi	r24, 0x01	; 1
    4aee:	90 e0       	ldi	r25, 0x00	; 0
    4af0:	9a 83       	std	Y+2, r25	; 0x02
    4af2:	89 83       	std	Y+1, r24	; 0x01
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    4af4:	42 e0       	ldi	r20, 0x02	; 2
    4af6:	50 e0       	ldi	r21, 0x00	; 0
    4af8:	be 01       	movw	r22, r28
    4afa:	6f 5f       	subi	r22, 0xFF	; 255
    4afc:	7f 4f       	sbci	r23, 0xFF	; 255
    4afe:	c8 01       	movw	r24, r16
    4b00:	25 d5       	rcall	.+2634   	; 0x554c <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = htons(1);  // One question record
    4b02:	80 e0       	ldi	r24, 0x00	; 0
    4b04:	91 e0       	ldi	r25, 0x01	; 1
    4b06:	9a 83       	std	Y+2, r25	; 0x02
    4b08:	89 83       	std	Y+1, r24	; 0x01
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    4b0a:	42 e0       	ldi	r20, 0x02	; 2
    4b0c:	50 e0       	ldi	r21, 0x00	; 0
    4b0e:	be 01       	movw	r22, r28
    4b10:	6f 5f       	subi	r22, 0xFF	; 255
    4b12:	7f 4f       	sbci	r23, 0xFF	; 255
    4b14:	c8 01       	movw	r24, r16
    4b16:	1a d5       	rcall	.+2612   	; 0x554c <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = 0;  // Zero answer records
    4b18:	1a 82       	std	Y+2, r1	; 0x02
    4b1a:	19 82       	std	Y+1, r1	; 0x01
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    4b1c:	42 e0       	ldi	r20, 0x02	; 2
    4b1e:	50 e0       	ldi	r21, 0x00	; 0
    4b20:	be 01       	movw	r22, r28
    4b22:	6f 5f       	subi	r22, 0xFF	; 255
    4b24:	7f 4f       	sbci	r23, 0xFF	; 255
    4b26:	c8 01       	movw	r24, r16
    4b28:	11 d5       	rcall	.+2594   	; 0x554c <_ZN11EthernetUDP5writeEPKhj>

    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    4b2a:	42 e0       	ldi	r20, 0x02	; 2
    4b2c:	50 e0       	ldi	r21, 0x00	; 0
    4b2e:	be 01       	movw	r22, r28
    4b30:	6f 5f       	subi	r22, 0xFF	; 255
    4b32:	7f 4f       	sbci	r23, 0xFF	; 255
    4b34:	c8 01       	movw	r24, r16
    4b36:	0a d5       	rcall	.+2580   	; 0x554c <_ZN11EthernetUDP5writeEPKhj>
    // and zero additional records
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    4b38:	42 e0       	ldi	r20, 0x02	; 2
    4b3a:	50 e0       	ldi	r21, 0x00	; 0
    4b3c:	be 01       	movw	r22, r28
    4b3e:	6f 5f       	subi	r22, 0xFF	; 255
    4b40:	7f 4f       	sbci	r23, 0xFF	; 255
    4b42:	c8 01       	movw	r24, r16
    4b44:	03 d5       	rcall	.+2566   	; 0x554c <_ZN11EthernetUDP5writeEPKhj>

    // Build question
    const char* start =aName;
    const char* end =start;
    4b46:	57 01       	movw	r10, r14
    uint8_t len;
    // Run through the name being requested
    while (*end)
    4b48:	f5 01       	movw	r30, r10
    4b4a:	80 81       	ld	r24, Z
    4b4c:	88 23       	and	r24, r24
    4b4e:	f9 f0       	breq	.+62     	; 0x4b8e <_ZN9DNSClient12BuildRequestEPKc+0xe4>
    4b50:	a7 01       	movw	r20, r14
    4b52:	5a 01       	movw	r10, r20
    {
        // Find out how long this section of the name is
        end = start;
        while (*end && (*end != '.') )
    4b54:	f5 01       	movw	r30, r10
    4b56:	81 91       	ld	r24, Z+
    4b58:	6f 01       	movw	r12, r30
    4b5a:	88 23       	and	r24, r24
    4b5c:	21 f0       	breq	.+8      	; 0x4b66 <_ZN9DNSClient12BuildRequestEPKc+0xbc>
    4b5e:	8e 32       	cpi	r24, 0x2E	; 46
    4b60:	11 f0       	breq	.+4      	; 0x4b66 <_ZN9DNSClient12BuildRequestEPKc+0xbc>
    4b62:	a6 01       	movw	r20, r12
    4b64:	f6 cf       	rjmp	.-20     	; 0x4b52 <_ZN9DNSClient12BuildRequestEPKc+0xa8>
        {
            end++;
        }

        if (end-start > 0)
    4b66:	4a 01       	movw	r8, r20
    4b68:	8e 18       	sub	r8, r14
    4b6a:	9f 08       	sbc	r9, r15
    4b6c:	18 14       	cp	r1, r8
    4b6e:	19 04       	cpc	r1, r9
    4b70:	64 f4       	brge	.+24     	; 0x4b8a <_ZN9DNSClient12BuildRequestEPKc+0xe0>
        {
            // Write out the size of this section
            len = end-start;
    4b72:	8b 82       	std	Y+3, r8	; 0x03
            iUdp.write(&len, sizeof(len));
    4b74:	41 e0       	ldi	r20, 0x01	; 1
    4b76:	50 e0       	ldi	r21, 0x00	; 0
    4b78:	be 01       	movw	r22, r28
    4b7a:	6d 5f       	subi	r22, 0xFD	; 253
    4b7c:	7f 4f       	sbci	r23, 0xFF	; 255
    4b7e:	c8 01       	movw	r24, r16
            // And then write out the section
            iUdp.write((uint8_t*)start, end-start);
    4b80:	e5 d4       	rcall	.+2506   	; 0x554c <_ZN11EthernetUDP5writeEPKhj>
    4b82:	a4 01       	movw	r20, r8
    4b84:	b7 01       	movw	r22, r14
    4b86:	c8 01       	movw	r24, r16
    4b88:	e1 d4       	rcall	.+2498   	; 0x554c <_ZN11EthernetUDP5writeEPKhj>
        }
        start = end+1;
    4b8a:	76 01       	movw	r14, r12
    }

    // We've got to the end of the question name, so
    // terminate it with a zero-length section
    len = 0;
    4b8c:	dd cf       	rjmp	.-70     	; 0x4b48 <_ZN9DNSClient12BuildRequestEPKc+0x9e>
    iUdp.write(&len, sizeof(len));
    4b8e:	1b 82       	std	Y+3, r1	; 0x03
    4b90:	41 e0       	ldi	r20, 0x01	; 1
    4b92:	50 e0       	ldi	r21, 0x00	; 0
    4b94:	be 01       	movw	r22, r28
    4b96:	6d 5f       	subi	r22, 0xFD	; 253
    4b98:	7f 4f       	sbci	r23, 0xFF	; 255
    4b9a:	c8 01       	movw	r24, r16
    4b9c:	d7 d4       	rcall	.+2478   	; 0x554c <_ZN11EthernetUDP5writeEPKhj>
    // Finally the type and class of question
    twoByteBuffer = htons(TYPE_A);
    4b9e:	e1 2c       	mov	r14, r1
    4ba0:	ff 24       	eor	r15, r15
    4ba2:	f3 94       	inc	r15
    4ba4:	fa 82       	std	Y+2, r15	; 0x02
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    4ba6:	e9 82       	std	Y+1, r14	; 0x01
    4ba8:	42 e0       	ldi	r20, 0x02	; 2
    4baa:	50 e0       	ldi	r21, 0x00	; 0
    4bac:	be 01       	movw	r22, r28
    4bae:	6f 5f       	subi	r22, 0xFF	; 255
    4bb0:	7f 4f       	sbci	r23, 0xFF	; 255
    4bb2:	c8 01       	movw	r24, r16

    twoByteBuffer = htons(CLASS_IN);  // Internet class of question
    4bb4:	cb d4       	rcall	.+2454   	; 0x554c <_ZN11EthernetUDP5writeEPKhj>
    4bb6:	fa 82       	std	Y+2, r15	; 0x02
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    4bb8:	e9 82       	std	Y+1, r14	; 0x01
    4bba:	42 e0       	ldi	r20, 0x02	; 2
    4bbc:	50 e0       	ldi	r21, 0x00	; 0
    4bbe:	be 01       	movw	r22, r28
    4bc0:	6f 5f       	subi	r22, 0xFF	; 255
    4bc2:	7f 4f       	sbci	r23, 0xFF	; 255
    4bc4:	c8 01       	movw	r24, r16
    4bc6:	c2 d4       	rcall	.+2436   	; 0x554c <_ZN11EthernetUDP5writeEPKhj>
    // Success!  Everything buffered okay
    return 1;
}
    4bc8:	81 e0       	ldi	r24, 0x01	; 1
    4bca:	90 e0       	ldi	r25, 0x00	; 0
    4bcc:	0f 90       	pop	r0
    4bce:	0f 90       	pop	r0
    4bd0:	0f 90       	pop	r0
    4bd2:	df 91       	pop	r29
    4bd4:	cf 91       	pop	r28
    4bd6:	1f 91       	pop	r17
    4bd8:	0f 91       	pop	r16
    4bda:	ff 90       	pop	r15
    4bdc:	ef 90       	pop	r14
    4bde:	df 90       	pop	r13
    4be0:	cf 90       	pop	r12
    4be2:	bf 90       	pop	r11
    4be4:	af 90       	pop	r10
    4be6:	9f 90       	pop	r9
    4be8:	8f 90       	pop	r8
    4bea:	08 95       	ret

00004bec <_ZN9DNSClient15ProcessResponseEjR9IPAddress>:


uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    4bec:	2f 92       	push	r2
    4bee:	3f 92       	push	r3
    4bf0:	4f 92       	push	r4
    4bf2:	5f 92       	push	r5
    4bf4:	6f 92       	push	r6
    4bf6:	7f 92       	push	r7
    4bf8:	8f 92       	push	r8
    4bfa:	9f 92       	push	r9
    4bfc:	af 92       	push	r10
    4bfe:	bf 92       	push	r11
    4c00:	cf 92       	push	r12
    4c02:	df 92       	push	r13
    4c04:	ef 92       	push	r14
    4c06:	ff 92       	push	r15
    4c08:	0f 93       	push	r16
    4c0a:	1f 93       	push	r17
    4c0c:	cf 93       	push	r28
    4c0e:	df 93       	push	r29
    4c10:	cd b7       	in	r28, 0x3d	; 61
    4c12:	de b7       	in	r29, 0x3e	; 62
    4c14:	63 97       	sbiw	r28, 0x13	; 19
    4c16:	0f b6       	in	r0, 0x3f	; 63
    4c18:	f8 94       	cli
    4c1a:	de bf       	out	0x3e, r29	; 62
    4c1c:	0f be       	out	0x3f, r0	; 63
    4c1e:	cd bf       	out	0x3d, r28	; 61
    4c20:	7c 01       	movw	r14, r24
    4c22:	6b 01       	movw	r12, r22
    4c24:	1a 01       	movw	r2, r20
    uint32_t startTime = millis();
    4c26:	0e 94 e4 39 	call	0x73c8	; 0x73c8 <millis>
    4c2a:	4b 01       	movw	r8, r22
    4c2c:	5c 01       	movw	r10, r24

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    4c2e:	87 01       	movw	r16, r14
    4c30:	08 5f       	subi	r16, 0xF8	; 248
    4c32:	1f 4f       	sbci	r17, 0xFF	; 255
    {
        if((millis() - startTime) > aTimeout)
    4c34:	26 01       	movw	r4, r12
    4c36:	61 2c       	mov	r6, r1
    4c38:	71 2c       	mov	r7, r1
uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    4c3a:	c8 01       	movw	r24, r16
    4c3c:	29 d5       	rcall	.+2642   	; 0x5690 <_ZN11EthernetUDP11parsePacketEv>
    4c3e:	18 16       	cp	r1, r24
    4c40:	19 06       	cpc	r1, r25
    4c42:	a4 f0       	brlt	.+40     	; 0x4c6c <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x80>
    {
        if((millis() - startTime) > aTimeout)
    4c44:	0e 94 e4 39 	call	0x73c8	; 0x73c8 <millis>
    4c48:	dc 01       	movw	r26, r24
    4c4a:	cb 01       	movw	r24, r22
    4c4c:	88 19       	sub	r24, r8
    4c4e:	99 09       	sbc	r25, r9
    4c50:	aa 09       	sbc	r26, r10
    4c52:	bb 09       	sbc	r27, r11
    4c54:	48 16       	cp	r4, r24
    4c56:	59 06       	cpc	r5, r25
    4c58:	6a 06       	cpc	r6, r26
    4c5a:	7b 06       	cpc	r7, r27
    4c5c:	d0 f0       	brcs	.+52     	; 0x4c92 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xa6>
            return TIMED_OUT;
        delay(50);
    4c5e:	62 e3       	ldi	r22, 0x32	; 50
    4c60:	70 e0       	ldi	r23, 0x00	; 0
    4c62:	80 e0       	ldi	r24, 0x00	; 0
    4c64:	90 e0       	ldi	r25, 0x00	; 0
    4c66:	0e 94 15 3a 	call	0x742a	; 0x742a <delay>
uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    4c6a:	e7 cf       	rjmp	.-50     	; 0x4c3a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x4e>

    // We've had a reply!
    // Read the UDP header
    uint8_t header[DNS_HEADER_SIZE]; // Enough space to reuse for the DNS header
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
    4c6c:	f7 01       	movw	r30, r14
    4c6e:	42 81       	ldd	r20, Z+2	; 0x02
    4c70:	53 81       	ldd	r21, Z+3	; 0x03
    4c72:	64 81       	ldd	r22, Z+4	; 0x04
    4c74:	75 81       	ldd	r23, Z+5	; 0x05
    4c76:	81 8d       	ldd	r24, Z+25	; 0x19
    4c78:	92 8d       	ldd	r25, Z+26	; 0x1a
    4c7a:	a3 8d       	ldd	r26, Z+27	; 0x1b
    4c7c:	b4 8d       	ldd	r27, Z+28	; 0x1c
    4c7e:	48 17       	cp	r20, r24
    4c80:	59 07       	cpc	r21, r25
    4c82:	6a 07       	cpc	r22, r26
    4c84:	7b 07       	cpc	r23, r27
    4c86:	49 f4       	brne	.+18     	; 0x4c9a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xae>
    4c88:	85 8d       	ldd	r24, Z+29	; 0x1d
    4c8a:	96 8d       	ldd	r25, Z+30	; 0x1e
    4c8c:	c5 97       	sbiw	r24, 0x35	; 53
    4c8e:	29 f4       	brne	.+10     	; 0x4c9a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xae>
    4c90:	09 c0       	rjmp	.+18     	; 0x4ca4 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xb8>

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    {
        if((millis() - startTime) > aTimeout)
            return TIMED_OUT;
    4c92:	ee 24       	eor	r14, r14
    4c94:	ea 94       	dec	r14
    4c96:	fe 2c       	mov	r15, r14
    4c98:	f0 c0       	rjmp	.+480    	; 0x4e7a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
        (iUdp.remotePort() != DNS_PORT) )
    {
        // It's not from who we expected
        return INVALID_SERVER;
    4c9a:	9e ef       	ldi	r25, 0xFE	; 254
    4c9c:	e9 2e       	mov	r14, r25
    4c9e:	ff 24       	eor	r15, r15
    4ca0:	fa 94       	dec	r15
    4ca2:	eb c0       	rjmp	.+470    	; 0x4e7a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    4ca4:	c8 01       	movw	r24, r16
    4ca6:	08 d4       	rcall	.+2064   	; 0x54b8 <_ZN11EthernetUDP9availableEv>
    4ca8:	0c 97       	sbiw	r24, 0x0c	; 12
    4caa:	0c f4       	brge	.+2      	; 0x4cae <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xc2>
    4cac:	e2 c0       	rjmp	.+452    	; 0x4e72 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x286>
    {
        return TRUNCATED;
    }
    iUdp.read(header, DNS_HEADER_SIZE);
    4cae:	4c e0       	ldi	r20, 0x0C	; 12
    4cb0:	50 e0       	ldi	r21, 0x00	; 0
    4cb2:	be 01       	movw	r22, r28
    4cb4:	6f 5f       	subi	r22, 0xFF	; 255
    4cb6:	7f 4f       	sbci	r23, 0xFF	; 255
    4cb8:	c8 01       	movw	r24, r16
    4cba:	83 d4       	rcall	.+2310   	; 0x55c2 <_ZN11EthernetUDP4readEPhj>

    uint16_t header_flags = htons(*((uint16_t*)&header[2]));
    4cbc:	8b 81       	ldd	r24, Y+3	; 0x03
    4cbe:	9c 81       	ldd	r25, Y+4	; 0x04
    4cc0:	98 27       	eor	r25, r24
    4cc2:	89 27       	eor	r24, r25
    4cc4:	98 27       	eor	r25, r24
    4cc6:	9a 8b       	std	Y+18, r25	; 0x12
    4cc8:	89 8b       	std	Y+17, r24	; 0x11
    // Check that it's a response to this request
    if ( ( iRequestId != (*((uint16_t*)&header[0])) ) ||
    4cca:	f7 01       	movw	r30, r14
    4ccc:	46 81       	ldd	r20, Z+6	; 0x06
    4cce:	57 81       	ldd	r21, Z+7	; 0x07
    4cd0:	29 81       	ldd	r18, Y+1	; 0x01
    4cd2:	3a 81       	ldd	r19, Y+2	; 0x02
    4cd4:	42 17       	cp	r20, r18
    4cd6:	53 07       	cpc	r21, r19
    4cd8:	11 f4       	brne	.+4      	; 0x4cde <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xf2>
    4cda:	97 fd       	sbrc	r25, 7
        ((header_flags & QUERY_RESPONSE_MASK) != (uint16_t)RESPONSE_FLAG) )
    {
        // Mark the entire packet as read
        iUdp.flush();
    4cdc:	07 c0       	rjmp	.+14     	; 0x4cec <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x100>
    4cde:	c8 01       	movw	r24, r16
    4ce0:	05 d4       	rcall	.+2058   	; 0x54ec <_ZN11EthernetUDP5flushEv>
        return INVALID_RESPONSE;
    4ce2:	7c ef       	ldi	r23, 0xFC	; 252
    4ce4:	e7 2e       	mov	r14, r23
    4ce6:	ff 24       	eor	r15, r15
    4ce8:	fa 94       	dec	r15
    4cea:	c7 c0       	rjmp	.+398    	; 0x4e7a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    }
    // Check for any errors in the response (or in our request)
    // although we don't do anything to get round these
    if ( (header_flags & TRUNCATION_FLAG) || (header_flags & RESP_MASK) )
    4cec:	8f 70       	andi	r24, 0x0F	; 15
    4cee:	92 70       	andi	r25, 0x02	; 2
    4cf0:	89 2b       	or	r24, r25
    {
        // Mark the entire packet as read
        iUdp.flush();
    4cf2:	39 f0       	breq	.+14     	; 0x4d02 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x116>
    4cf4:	c8 01       	movw	r24, r16
    4cf6:	fa d3       	rcall	.+2036   	; 0x54ec <_ZN11EthernetUDP5flushEv>
        return -5; //INVALID_RESPONSE;
    4cf8:	6b ef       	ldi	r22, 0xFB	; 251
    4cfa:	e6 2e       	mov	r14, r22
    4cfc:	ff 24       	eor	r15, r15
    4cfe:	fa 94       	dec	r15
    4d00:	bc c0       	rjmp	.+376    	; 0x4e7a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    }

    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
    4d02:	cf 80       	ldd	r12, Y+7	; 0x07
    4d04:	d8 84       	ldd	r13, Y+8	; 0x08
    4d06:	dc 24       	eor	r13, r12
    4d08:	cd 24       	eor	r12, r13
    4d0a:	dc 24       	eor	r13, r12
    if (answerCount == 0 )
    4d0c:	c1 14       	cp	r12, r1
    4d0e:	d1 04       	cpc	r13, r1
    4d10:	19 f0       	breq	.+6      	; 0x4d18 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x12c>
    4d12:	e1 2c       	mov	r14, r1
    4d14:	f1 2c       	mov	r15, r1
    {
        // Mark the entire packet as read
        iUdp.flush();
    4d16:	1f c0       	rjmp	.+62     	; 0x4d56 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x16a>
    4d18:	c8 01       	movw	r24, r16
    4d1a:	e8 d3       	rcall	.+2000   	; 0x54ec <_ZN11EthernetUDP5flushEv>
        return -6; //INVALID_RESPONSE;
    4d1c:	5a ef       	ldi	r21, 0xFA	; 250
    4d1e:	e5 2e       	mov	r14, r21
    4d20:	ff 24       	eor	r15, r15
    4d22:	fa 94       	dec	r15
    4d24:	aa c0       	rjmp	.+340    	; 0x4e7a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    {
        // Skip over the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    4d26:	41 e0       	ldi	r20, 0x01	; 1
    4d28:	50 e0       	ldi	r21, 0x00	; 0
    4d2a:	be 01       	movw	r22, r28
    4d2c:	63 5f       	subi	r22, 0xF3	; 243
    4d2e:	7f 4f       	sbci	r23, 0xFF	; 255
    4d30:	c8 01       	movw	r24, r16
    4d32:	47 d4       	rcall	.+2190   	; 0x55c2 <_ZN11EthernetUDP4readEPhj>
            if (len > 0)
    4d34:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d36:	81 11       	cpse	r24, r1
                while(len--)
                {
                    iUdp.read(); // we don't care about the returned byte
                }
            }
        } while (len != 0);
    4d38:	17 c0       	rjmp	.+46     	; 0x4d68 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x17c>
    4d3a:	8d 85       	ldd	r24, Y+13	; 0x0d

        // Now jump over the type and class
        for (int i =0; i < 4; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    4d3c:	81 11       	cpse	r24, r1
    4d3e:	f3 cf       	rjmp	.-26     	; 0x4d26 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x13a>
    4d40:	c8 01       	movw	r24, r16
    4d42:	17 d4       	rcall	.+2094   	; 0x5572 <_ZN11EthernetUDP4readEv>
    4d44:	c8 01       	movw	r24, r16
    4d46:	15 d4       	rcall	.+2090   	; 0x5572 <_ZN11EthernetUDP4readEv>
    4d48:	c8 01       	movw	r24, r16
    4d4a:	13 d4       	rcall	.+2086   	; 0x5572 <_ZN11EthernetUDP4readEv>
    4d4c:	c8 01       	movw	r24, r16
    4d4e:	11 d4       	rcall	.+2082   	; 0x5572 <_ZN11EthernetUDP4readEv>
    4d50:	ff ef       	ldi	r31, 0xFF	; 255
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    4d52:	ef 1a       	sub	r14, r31
    4d54:	ff 0a       	sbc	r15, r31
    4d56:	8d 81       	ldd	r24, Y+5	; 0x05
    4d58:	9e 81       	ldd	r25, Y+6	; 0x06
    4d5a:	98 27       	eor	r25, r24
    4d5c:	89 27       	eor	r24, r25
    4d5e:	98 27       	eor	r25, r24
    4d60:	e8 16       	cp	r14, r24
    4d62:	f9 06       	cpc	r15, r25
    4d64:	00 f3       	brcs	.-64     	; 0x4d26 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x13a>
    4d66:	09 c0       	rjmp	.+18     	; 0x4d7a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x18e>
            iUdp.read(&len, sizeof(len));
            if (len > 0)
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
    4d68:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d6a:	9f ef       	ldi	r25, 0xFF	; 255
    4d6c:	98 0f       	add	r25, r24
    4d6e:	9d 87       	std	Y+13, r25	; 0x0d
    4d70:	88 23       	and	r24, r24
    4d72:	19 f3       	breq	.-58     	; 0x4d3a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x14e>
                {
                    iUdp.read(); // we don't care about the returned byte
    4d74:	c8 01       	movw	r24, r16
    4d76:	fd d3       	rcall	.+2042   	; 0x5572 <_ZN11EthernetUDP4readEv>
            iUdp.read(&len, sizeof(len));
            if (len > 0)
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
    4d78:	f7 cf       	rjmp	.-18     	; 0x4d68 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x17c>
    4d7a:	a1 2c       	mov	r10, r1
    4d7c:	b1 2c       	mov	r11, r1
    {
        // Skip the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    4d7e:	41 e0       	ldi	r20, 0x01	; 1
    4d80:	50 e0       	ldi	r21, 0x00	; 0
    4d82:	be 01       	movw	r22, r28
    4d84:	6d 5e       	subi	r22, 0xED	; 237
    4d86:	7f 4f       	sbci	r23, 0xFF	; 255
    4d88:	c8 01       	movw	r24, r16
    4d8a:	1b d4       	rcall	.+2102   	; 0x55c2 <_ZN11EthernetUDP4readEPhj>
    4d8c:	8b 89       	ldd	r24, Y+19	; 0x13
            if ((len & LABEL_COMPRESSION_MASK) == 0)
    4d8e:	98 2f       	mov	r25, r24
    4d90:	90 7c       	andi	r25, 0xC0	; 192
    4d92:	59 f4       	brne	.+22     	; 0x4daa <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1be>
            {
                // It's just a normal label
                if (len > 0)
    4d94:	88 23       	and	r24, r24
    4d96:	79 f0       	breq	.+30     	; 0x4db6 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1ca>
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
    4d98:	8b 89       	ldd	r24, Y+19	; 0x13
    4d9a:	9f ef       	ldi	r25, 0xFF	; 255
    4d9c:	98 0f       	add	r25, r24
    4d9e:	9b 8b       	std	Y+19, r25	; 0x13
    4da0:	88 23       	and	r24, r24
    4da2:	31 f0       	breq	.+12     	; 0x4db0 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1c4>
                    {
                        iUdp.read(); // we don't care about the returned byte
    4da4:	c8 01       	movw	r24, r16
    4da6:	e5 d3       	rcall	.+1994   	; 0x5572 <_ZN11EthernetUDP4readEv>
                if (len > 0)
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
    4da8:	f7 cf       	rjmp	.-18     	; 0x4d98 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1ac>
                // says that a name is either a sequence of labels ended with a
                // 0 length octet or a pointer or a sequence of labels ending in
                // a pointer.  Either way, when we get here we're at the end of
                // the name
                // Skip over the pointer
                iUdp.read(); // we don't care about the returned byte
    4daa:	c8 01       	movw	r24, r16
    4dac:	e2 d3       	rcall	.+1988   	; 0x5572 <_ZN11EthernetUDP4readEv>
    4dae:	1b 8a       	std	Y+19, r1	; 0x13
                // And set len so that we drop out of the name loop
                len = 0;
    4db0:	8b 89       	ldd	r24, Y+19	; 0x13
            }
        } while (len != 0);
    4db2:	81 11       	cpse	r24, r1
    4db4:	e4 cf       	rjmp	.-56     	; 0x4d7e <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x192>

        // Check the type and class
        uint16_t answerType;
        uint16_t answerClass;
        iUdp.read((uint8_t*)&answerType, sizeof(answerType));
    4db6:	42 e0       	ldi	r20, 0x02	; 2
    4db8:	50 e0       	ldi	r21, 0x00	; 0
    4dba:	be 01       	movw	r22, r28
    4dbc:	61 5f       	subi	r22, 0xF1	; 241
    4dbe:	7f 4f       	sbci	r23, 0xFF	; 255
        iUdp.read((uint8_t*)&answerClass, sizeof(answerClass));
    4dc0:	c8 01       	movw	r24, r16
    4dc2:	ff d3       	rcall	.+2046   	; 0x55c2 <_ZN11EthernetUDP4readEPhj>
    4dc4:	42 e0       	ldi	r20, 0x02	; 2
    4dc6:	50 e0       	ldi	r21, 0x00	; 0
    4dc8:	be 01       	movw	r22, r28
    4dca:	63 5f       	subi	r22, 0xF3	; 243
    4dcc:	7f 4f       	sbci	r23, 0xFF	; 255

        // Ignore the Time-To-Live as we don't do any caching
        for (int i =0; i < TTL_SIZE; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    4dce:	c8 01       	movw	r24, r16
    4dd0:	f8 d3       	rcall	.+2032   	; 0x55c2 <_ZN11EthernetUDP4readEPhj>
    4dd2:	c8 01       	movw	r24, r16
    4dd4:	ce d3       	rcall	.+1948   	; 0x5572 <_ZN11EthernetUDP4readEv>
    4dd6:	c8 01       	movw	r24, r16
    4dd8:	cc d3       	rcall	.+1944   	; 0x5572 <_ZN11EthernetUDP4readEv>
    4dda:	c8 01       	movw	r24, r16
    4ddc:	ca d3       	rcall	.+1940   	; 0x5572 <_ZN11EthernetUDP4readEv>
    4dde:	c8 01       	movw	r24, r16
    4de0:	c8 d3       	rcall	.+1936   	; 0x5572 <_ZN11EthernetUDP4readEv>
    4de2:	42 e0       	ldi	r20, 0x02	; 2
    4de4:	50 e0       	ldi	r21, 0x00	; 0
        }

        // And read out the length of this answer
        // Don't need header_flags anymore, so we can reuse it here
        iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));
    4de6:	be 01       	movw	r22, r28
    4de8:	6f 5e       	subi	r22, 0xEF	; 239
    4dea:	7f 4f       	sbci	r23, 0xFF	; 255
    4dec:	c8 01       	movw	r24, r16
    4dee:	e9 d3       	rcall	.+2002   	; 0x55c2 <_ZN11EthernetUDP4readEPhj>
    4df0:	8f 85       	ldd	r24, Y+15	; 0x0f
    4df2:	98 89       	ldd	r25, Y+16	; 0x10
    4df4:	81 15       	cp	r24, r1

        if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) )
    4df6:	91 40       	sbci	r25, 0x01	; 1
    4df8:	49 f4       	brne	.+18     	; 0x4e0c <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x220>
    4dfa:	ed 84       	ldd	r14, Y+13	; 0x0d
    4dfc:	fe 84       	ldd	r15, Y+14	; 0x0e
    4dfe:	fe 24       	eor	r15, r14
    4e00:	ef 24       	eor	r14, r15
    4e02:	fe 24       	eor	r15, r14
    4e04:	81 e0       	ldi	r24, 0x01	; 1
    4e06:	e8 16       	cp	r14, r24
    4e08:	f1 04       	cpc	r15, r1
    4e0a:	19 f0       	breq	.+6      	; 0x4e12 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x226>
    4e0c:	e1 2c       	mov	r14, r1
    4e0e:	f1 2c       	mov	r15, r1
    4e10:	14 c0       	rjmp	.+40     	; 0x4e3a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x24e>
    4e12:	89 89       	ldd	r24, Y+17	; 0x11
        {
            if (htons(header_flags) != 4)
    4e14:	9a 89       	ldd	r25, Y+18	; 0x12
    4e16:	81 15       	cp	r24, r1
    4e18:	94 40       	sbci	r25, 0x04	; 4
    4e1a:	39 f0       	breq	.+14     	; 0x4e2a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x23e>
    4e1c:	c8 01       	movw	r24, r16
            {
                // It's a weird size
                // Mark the entire packet as read
                iUdp.flush();
    4e1e:	66 d3       	rcall	.+1740   	; 0x54ec <_ZN11EthernetUDP5flushEv>
    4e20:	47 ef       	ldi	r20, 0xF7	; 247
                return -9;//INVALID_RESPONSE;
    4e22:	e4 2e       	mov	r14, r20
    4e24:	ff 24       	eor	r15, r15
    4e26:	fa 94       	dec	r15
    4e28:	28 c0       	rjmp	.+80     	; 0x4e7a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    4e2a:	b1 01       	movw	r22, r2

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    4e2c:	6e 5f       	subi	r22, 0xFE	; 254
    4e2e:	7f 4f       	sbci	r23, 0xFF	; 255
    4e30:	44 e0       	ldi	r20, 0x04	; 4
            }
            iUdp.read(aAddress.raw_address(), 4);
    4e32:	50 e0       	ldi	r21, 0x00	; 0
    4e34:	c8 01       	movw	r24, r16
    4e36:	c5 d3       	rcall	.+1930   	; 0x55c2 <_ZN11EthernetUDP4readEPhj>
    4e38:	20 c0       	rjmp	.+64     	; 0x4e7a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
            return SUCCESS;
    4e3a:	89 89       	ldd	r24, Y+17	; 0x11
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    4e3c:	9a 89       	ldd	r25, Y+18	; 0x12
    4e3e:	98 27       	eor	r25, r24
    4e40:	89 27       	eor	r24, r25
    4e42:	98 27       	eor	r25, r24
    4e44:	e8 16       	cp	r14, r24
    4e46:	f9 06       	cpc	r15, r25
    4e48:	30 f4       	brcc	.+12     	; 0x4e56 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x26a>
    4e4a:	c8 01       	movw	r24, r16
            {
                iUdp.read(); // we don't care about the returned byte
    4e4c:	92 d3       	rcall	.+1828   	; 0x5572 <_ZN11EthernetUDP4readEv>
    4e4e:	ff ef       	ldi	r31, 0xFF	; 255
    4e50:	ef 1a       	sub	r14, r31
            return SUCCESS;
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    4e52:	ff 0a       	sbc	r15, r31
    4e54:	f2 cf       	rjmp	.-28     	; 0x4e3a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x24e>
    4e56:	2f ef       	ldi	r18, 0xFF	; 255
    4e58:	a2 1a       	sub	r10, r18
    // Now we're up to the bit we're interested in, the answer
    // There might be more than one answer (although we'll just use the first
    // type A answer) and some authority and additional resource records but
    // we're going to ignore all of them.

    for (uint16_t i =0; i < answerCount; i++)
    4e5a:	b2 0a       	sbc	r11, r18
    4e5c:	ca 14       	cp	r12, r10
    4e5e:	db 04       	cpc	r13, r11
    4e60:	09 f0       	breq	.+2      	; 0x4e64 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x278>
    4e62:	8d cf       	rjmp	.-230    	; 0x4d7e <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x192>
    4e64:	c8 01       	movw	r24, r16
    4e66:	42 d3       	rcall	.+1668   	; 0x54ec <_ZN11EthernetUDP5flushEv>
            }
        }
    }

    // Mark the entire packet as read
    iUdp.flush();
    4e68:	36 ef       	ldi	r19, 0xF6	; 246
    4e6a:	e3 2e       	mov	r14, r19
    4e6c:	ff 24       	eor	r15, r15

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
    4e6e:	fa 94       	dec	r15
    4e70:	04 c0       	rjmp	.+8      	; 0x4e7a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    4e72:	8d ef       	ldi	r24, 0xFD	; 253
    4e74:	e8 2e       	mov	r14, r24
    4e76:	ff 24       	eor	r15, r15
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    {
        return TRUNCATED;
    4e78:	fa 94       	dec	r15
    4e7a:	c7 01       	movw	r24, r14
    4e7c:	63 96       	adiw	r28, 0x13	; 19
    4e7e:	0f b6       	in	r0, 0x3f	; 63
    // Mark the entire packet as read
    iUdp.flush();

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
}
    4e80:	f8 94       	cli
    4e82:	de bf       	out	0x3e, r29	; 62
    4e84:	0f be       	out	0x3f, r0	; 63
    4e86:	cd bf       	out	0x3d, r28	; 61
    4e88:	df 91       	pop	r29
    4e8a:	cf 91       	pop	r28
    4e8c:	1f 91       	pop	r17
    4e8e:	0f 91       	pop	r16
    4e90:	ff 90       	pop	r15
    4e92:	ef 90       	pop	r14
    4e94:	df 90       	pop	r13
    4e96:	cf 90       	pop	r12
    4e98:	bf 90       	pop	r11
    4e9a:	af 90       	pop	r10
    4e9c:	9f 90       	pop	r9
    4e9e:	8f 90       	pop	r8
    4ea0:	7f 90       	pop	r7
    4ea2:	6f 90       	pop	r6
    4ea4:	5f 90       	pop	r5
    4ea6:	4f 90       	pop	r4
    4ea8:	3f 90       	pop	r3
    4eaa:	2f 90       	pop	r2
    4eac:	08 95       	ret

00004eae <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>:
    4eae:	8f 92       	push	r8
    4eb0:	9f 92       	push	r9
    4eb2:	af 92       	push	r10
        return 0;
    }
}

int DNSClient::getHostByName(const char* aHostname, IPAddress& aResult)
{
    4eb4:	bf 92       	push	r11
    4eb6:	cf 92       	push	r12
    4eb8:	df 92       	push	r13
    4eba:	ef 92       	push	r14
    4ebc:	ff 92       	push	r15
    4ebe:	0f 93       	push	r16
    4ec0:	1f 93       	push	r17
    4ec2:	cf 93       	push	r28
    4ec4:	df 93       	push	r29
    4ec6:	00 d0       	rcall	.+0      	; 0x4ec8 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x1a>
    4ec8:	00 d0       	rcall	.+0      	; 0x4eca <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x1c>
    4eca:	00 d0       	rcall	.+0      	; 0x4ecc <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x1e>
    4ecc:	cd b7       	in	r28, 0x3d	; 61
    4ece:	de b7       	in	r29, 0x3e	; 62
    4ed0:	7c 01       	movw	r14, r24
    4ed2:	4b 01       	movw	r8, r22
    4ed4:	5a 01       	movw	r10, r20
    int ret =0;

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
    4ed6:	9e dd       	rcall	.-1220   	; 0x4a14 <_ZN9DNSClient9inet_atonEPKcR9IPAddress>
    4ed8:	8c 01       	movw	r16, r24
    4eda:	89 2b       	or	r24, r25
    4edc:	09 f0       	breq	.+2      	; 0x4ee0 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x32>
    4ede:	57 c0       	rjmp	.+174    	; 0x4f8e <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xe0>
        // It is, our work here is done
        return 1;
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    4ee0:	f7 01       	movw	r30, r14
    4ee2:	42 81       	ldd	r20, Z+2	; 0x02
    4ee4:	53 81       	ldd	r21, Z+3	; 0x03
    4ee6:	64 81       	ldd	r22, Z+4	; 0x04
    4ee8:	75 81       	ldd	r23, Z+5	; 0x05
    4eea:	80 91 09 0c 	lds	r24, 0x0C09	; 0x800c09 <_ZL11INADDR_NONE+0x2>
    4eee:	90 91 0a 0c 	lds	r25, 0x0C0A	; 0x800c0a <_ZL11INADDR_NONE+0x3>
    4ef2:	a0 91 0b 0c 	lds	r26, 0x0C0B	; 0x800c0b <_ZL11INADDR_NONE+0x4>
    4ef6:	b0 91 0c 0c 	lds	r27, 0x0C0C	; 0x800c0c <_ZL11INADDR_NONE+0x5>
    4efa:	48 17       	cp	r20, r24
    4efc:	59 07       	cpc	r21, r25
    4efe:	6a 07       	cpc	r22, r26
    4f00:	7b 07       	cpc	r23, r27
    4f02:	09 f4       	brne	.+2      	; 0x4f06 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x58>
    4f04:	47 c0       	rjmp	.+142    	; 0x4f94 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xe6>
    {
        return INVALID_SERVER;
    }
	
    // Find a socket to use
    if (iUdp.begin(1024+(millis() & 0xF)) == 1)
    4f06:	0e 94 e4 39 	call	0x73c8	; 0x73c8 <millis>
    4f0a:	67 01       	movw	r12, r14
    4f0c:	f8 e0       	ldi	r31, 0x08	; 8
    4f0e:	cf 0e       	add	r12, r31
    4f10:	d1 1c       	adc	r13, r1
    4f12:	6f 70       	andi	r22, 0x0F	; 15
    4f14:	77 27       	eor	r23, r23
    4f16:	7c 5f       	subi	r23, 0xFC	; 252
    4f18:	c6 01       	movw	r24, r12
    4f1a:	89 d3       	rcall	.+1810   	; 0x562e <_ZN11EthernetUDP5beginEj>
    4f1c:	81 30       	cpi	r24, 0x01	; 1
    4f1e:	09 f0       	breq	.+2      	; 0x4f22 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x74>
    4f20:	3b c0       	rjmp	.+118    	; 0x4f98 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xea>
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    4f22:	82 e5       	ldi	r24, 0x52	; 82
    4f24:	9a e0       	ldi	r25, 0x0A	; 10
    4f26:	9a 83       	std	Y+2, r25	; 0x02
    4f28:	89 83       	std	Y+1, r24	; 0x01
    4f2a:	f7 01       	movw	r30, r14
    4f2c:	82 81       	ldd	r24, Z+2	; 0x02
    4f2e:	93 81       	ldd	r25, Z+3	; 0x03
    4f30:	a4 81       	ldd	r26, Z+4	; 0x04
    4f32:	b5 81       	ldd	r27, Z+5	; 0x05
    4f34:	8b 83       	std	Y+3, r24	; 0x03
    4f36:	9c 83       	std	Y+4, r25	; 0x04
    4f38:	ad 83       	std	Y+5, r26	; 0x05
    4f3a:	be 83       	std	Y+6, r27	; 0x06
        // Try up to three times
        int retries = 0;
//        while ((retries < 3) && (ret <= 0))
        {
            // Send DNS request
            ret = iUdp.beginPacket(iDNSServer, DNS_PORT);
    4f3c:	45 e3       	ldi	r20, 0x35	; 53
    4f3e:	50 e0       	ldi	r21, 0x00	; 0
    4f40:	be 01       	movw	r22, r28
    4f42:	6f 5f       	subi	r22, 0xFF	; 255
    4f44:	7f 4f       	sbci	r23, 0xFF	; 255
    4f46:	c6 01       	movw	r24, r12
    4f48:	f7 d2       	rcall	.+1518   	; 0x5538 <_ZN11EthernetUDP11beginPacketE9IPAddressj>
            if (ret != 0)
    4f4a:	89 2b       	or	r24, r25
    4f4c:	19 f4       	brne	.+6      	; 0x4f54 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xa6>
    4f4e:	00 e0       	ldi	r16, 0x00	; 0
    4f50:	10 e0       	ldi	r17, 0x00	; 0
            {
                // Now output the request data
                ret = BuildRequest(aHostname);
    4f52:	1a c0       	rjmp	.+52     	; 0x4f88 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xda>
    4f54:	b4 01       	movw	r22, r8
    4f56:	c7 01       	movw	r24, r14
                if (ret != 0)
    4f58:	a8 dd       	rcall	.-1200   	; 0x4aaa <_ZN9DNSClient12BuildRequestEPKc>
    4f5a:	89 2b       	or	r24, r25
                {
                    // And finally send the request
                    ret = iUdp.endPacket();
    4f5c:	c1 f3       	breq	.-16     	; 0x4f4e <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xa0>
    4f5e:	c6 01       	movw	r24, r12
    4f60:	f2 d2       	rcall	.+1508   	; 0x5546 <_ZN11EthernetUDP9endPacketEv>
                    if (ret != 0)
    4f62:	89 2b       	or	r24, r25
    4f64:	a1 f3       	breq	.-24     	; 0x4f4e <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xa0>
    4f66:	83 e0       	ldi	r24, 0x03	; 3
    4f68:	88 2e       	mov	r8, r24
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
                        {
                            ret = ProcessResponse(5000, aResult);
    4f6a:	91 2c       	mov	r9, r1
    4f6c:	a5 01       	movw	r20, r10
    4f6e:	68 e8       	ldi	r22, 0x88	; 136
    4f70:	73 e1       	ldi	r23, 0x13	; 19
    4f72:	c7 01       	movw	r24, r14
    4f74:	3b de       	rcall	.-906    	; 0x4bec <_ZN9DNSClient15ProcessResponseEjR9IPAddress>
    4f76:	8c 01       	movw	r16, r24
    4f78:	21 e0       	ldi	r18, 0x01	; 1
    4f7a:	82 1a       	sub	r8, r18
    4f7c:	91 08       	sbc	r9, r1
                    if (ret != 0)
                    {
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
    4f7e:	21 f0       	breq	.+8      	; 0x4f88 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xda>
    4f80:	0f 3f       	cpi	r16, 0xFF	; 255
    4f82:	ff ef       	ldi	r31, 0xFF	; 255
    4f84:	1f 07       	cpc	r17, r31
            }
            retries++;
        }

        // We're done with the socket now
        iUdp.stop();
    4f86:	91 f3       	breq	.-28     	; 0x4f6c <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xbe>
    4f88:	c6 01       	movw	r24, r12
    4f8a:	c2 d2       	rcall	.+1412   	; 0x5510 <_ZN11EthernetUDP4stopEv>
    4f8c:	05 c0       	rjmp	.+10     	; 0x4f98 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xea>

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
    {
        // It is, our work here is done
        return 1;
    4f8e:	01 e0       	ldi	r16, 0x01	; 1
    4f90:	10 e0       	ldi	r17, 0x00	; 0
    4f92:	02 c0       	rjmp	.+4      	; 0x4f98 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xea>
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    {
        return INVALID_SERVER;
    4f94:	0e ef       	ldi	r16, 0xFE	; 254
    4f96:	1f ef       	ldi	r17, 0xFF	; 255
        // We're done with the socket now
        iUdp.stop();
    }

    return ret;
}
    4f98:	c8 01       	movw	r24, r16
    4f9a:	26 96       	adiw	r28, 0x06	; 6
    4f9c:	0f b6       	in	r0, 0x3f	; 63
    4f9e:	f8 94       	cli
    4fa0:	de bf       	out	0x3e, r29	; 62
    4fa2:	0f be       	out	0x3f, r0	; 63
    4fa4:	cd bf       	out	0x3d, r28	; 61
    4fa6:	df 91       	pop	r29
    4fa8:	cf 91       	pop	r28
    4faa:	1f 91       	pop	r17
    4fac:	0f 91       	pop	r16
    4fae:	ff 90       	pop	r15
    4fb0:	ef 90       	pop	r14
    4fb2:	df 90       	pop	r13
    4fb4:	cf 90       	pop	r12
    4fb6:	bf 90       	pop	r11
    4fb8:	af 90       	pop	r10
    4fba:	9f 90       	pop	r9
    4fbc:	8f 90       	pop	r8
    4fbe:	08 95       	ret

00004fc0 <_ZN10W5500Class8writeGAREPh>:
    return _dnsDomainName;
}

char* EthernetClass::hostName(){
    return _hostName;
}
    4fc0:	24 e0       	ldi	r18, 0x04	; 4
    4fc2:	30 e0       	ldi	r19, 0x00	; 0
    4fc4:	ac 01       	movw	r20, r24
    4fc6:	64 e0       	ldi	r22, 0x04	; 4
    4fc8:	81 e0       	ldi	r24, 0x01	; 1
    4fca:	90 e0       	ldi	r25, 0x00	; 0
    4fcc:	35 c6       	rjmp	.+3178   	; 0x5c38 <_ZN10W5500Class5writeEjhPKhj>

00004fce <_ZN10W5500Class9writeSUBREPh>:
    4fce:	24 e0       	ldi	r18, 0x04	; 4
    4fd0:	30 e0       	ldi	r19, 0x00	; 0
    4fd2:	ac 01       	movw	r20, r24
    4fd4:	64 e0       	ldi	r22, 0x04	; 4
    4fd6:	85 e0       	ldi	r24, 0x05	; 5
    4fd8:	90 e0       	ldi	r25, 0x00	; 0
    4fda:	2e c6       	rjmp	.+3164   	; 0x5c38 <_ZN10W5500Class5writeEjhPKhj>

00004fdc <_ZN10W5500Class9writeSHAREPh>:
    4fdc:	26 e0       	ldi	r18, 0x06	; 6
    4fde:	30 e0       	ldi	r19, 0x00	; 0
    4fe0:	ac 01       	movw	r20, r24
    4fe2:	64 e0       	ldi	r22, 0x04	; 4
    4fe4:	89 e0       	ldi	r24, 0x09	; 9
    4fe6:	90 e0       	ldi	r25, 0x00	; 0
    4fe8:	27 c6       	rjmp	.+3150   	; 0x5c38 <_ZN10W5500Class5writeEjhPKhj>

00004fea <_ZN10W5500Class9writeSIPREPh>:
    4fea:	24 e0       	ldi	r18, 0x04	; 4
    4fec:	30 e0       	ldi	r19, 0x00	; 0
    4fee:	ac 01       	movw	r20, r24
    4ff0:	64 e0       	ldi	r22, 0x04	; 4
    4ff2:	8f e0       	ldi	r24, 0x0F	; 15
    4ff4:	90 e0       	ldi	r25, 0x00	; 0
    4ff6:	20 c6       	rjmp	.+3136   	; 0x5c38 <_ZN10W5500Class5writeEjhPKhj>

00004ff8 <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_>:
    4ff8:	8f 92       	push	r8
    4ffa:	9f 92       	push	r9
    4ffc:	af 92       	push	r10
    4ffe:	bf 92       	push	r11
    5000:	cf 92       	push	r12
    5002:	df 92       	push	r13
    5004:	ef 92       	push	r14
    5006:	ff 92       	push	r15
    5008:	0f 93       	push	r16
    500a:	1f 93       	push	r17
    500c:	cf 93       	push	r28
    500e:	df 93       	push	r29
    5010:	4c 01       	movw	r8, r24
    5012:	5b 01       	movw	r10, r22
    5014:	6a 01       	movw	r12, r20
    5016:	e9 01       	movw	r28, r18
    5018:	fc 01       	movw	r30, r24
    501a:	64 85       	ldd	r22, Z+12	; 0x0c
    501c:	87 e4       	ldi	r24, 0x47	; 71
    501e:	9c e0       	ldi	r25, 0x0C	; 12
    5020:	53 d6       	rcall	.+3238   	; 0x5cc8 <_ZN10W5500Class4initEh>
    5022:	c5 01       	movw	r24, r10
    5024:	db df       	rcall	.-74     	; 0x4fdc <_ZN10W5500Class9writeSHAREPh>
    5026:	c6 01       	movw	r24, r12
    5028:	02 96       	adiw	r24, 0x02	; 2
    502a:	df df       	rcall	.-66     	; 0x4fea <_ZN10W5500Class9writeSIPREPh>
    502c:	c8 01       	movw	r24, r16
    502e:	02 96       	adiw	r24, 0x02	; 2
    5030:	c7 df       	rcall	.-114    	; 0x4fc0 <_ZN10W5500Class8writeGAREPh>
    5032:	c7 01       	movw	r24, r14
    5034:	02 96       	adiw	r24, 0x02	; 2
    5036:	cb df       	rcall	.-106    	; 0x4fce <_ZN10W5500Class9writeSUBREPh>
    5038:	8a 81       	ldd	r24, Y+2	; 0x02
    503a:	9b 81       	ldd	r25, Y+3	; 0x03
    503c:	ac 81       	ldd	r26, Y+4	; 0x04
    503e:	bd 81       	ldd	r27, Y+5	; 0x05
    5040:	f4 01       	movw	r30, r8
    5042:	82 83       	std	Z+2, r24	; 0x02
    5044:	93 83       	std	Z+3, r25	; 0x03
    5046:	a4 83       	std	Z+4, r26	; 0x04
    5048:	b5 83       	std	Z+5, r27	; 0x05
    504a:	df 91       	pop	r29
    504c:	cf 91       	pop	r28
    504e:	1f 91       	pop	r17
    5050:	0f 91       	pop	r16
    5052:	ff 90       	pop	r15
    5054:	ef 90       	pop	r14
    5056:	df 90       	pop	r13
    5058:	cf 90       	pop	r12
    505a:	bf 90       	pop	r11
    505c:	af 90       	pop	r10
    505e:	9f 90       	pop	r9
    5060:	8f 90       	pop	r8
    5062:	08 95       	ret

00005064 <_ZN13EthernetClass11dnsServerIPEv>:
    5064:	22 e5       	ldi	r18, 0x52	; 82
    5066:	3a e0       	ldi	r19, 0x0A	; 10
    5068:	fc 01       	movw	r30, r24
    506a:	31 83       	std	Z+1, r19	; 0x01
    506c:	20 83       	st	Z, r18
    506e:	fb 01       	movw	r30, r22
    5070:	42 81       	ldd	r20, Z+2	; 0x02
    5072:	53 81       	ldd	r21, Z+3	; 0x03
    5074:	64 81       	ldd	r22, Z+4	; 0x04
    5076:	75 81       	ldd	r23, Z+5	; 0x05
    5078:	fc 01       	movw	r30, r24
    507a:	42 83       	std	Z+2, r20	; 0x02
    507c:	53 83       	std	Z+3, r21	; 0x03
    507e:	64 83       	std	Z+4, r22	; 0x04
    5080:	75 83       	std	Z+5, r23	; 0x05
    5082:	08 95       	ret

00005084 <_GLOBAL__sub_I__ZN13EthernetClass6_stateE>:

EthernetClass Ethernet;
    5084:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    5086:	00 e0       	ldi	r16, 0x00	; 0
    5088:	20 e0       	ldi	r18, 0x00	; 0
    508a:	40 e0       	ldi	r20, 0x00	; 0
    508c:	60 e0       	ldi	r22, 0x00	; 0
    508e:	8a e2       	ldi	r24, 0x2A	; 42
    5090:	9c e0       	ldi	r25, 0x0C	; 12
    5092:	0e 94 5e 38 	call	0x70bc	; 0x70bc <_ZN9IPAddressC1Ehhhh>
  uint8_t w5500_cspin;

  static uint8_t _state[MAX_SOCK_NUM];
  static uint16_t _server_port[MAX_SOCK_NUM];

  EthernetClass() { _dhcp = NULL; w5500_cspin = 10; }
    5096:	8d e0       	ldi	r24, 0x0D	; 13
    5098:	9c e0       	ldi	r25, 0x0C	; 12
    509a:	0e 94 54 38 	call	0x70a8	; 0x70a8 <_ZN9IPAddressC1Ev>
    509e:	ed e0       	ldi	r30, 0x0D	; 13
    50a0:	fc e0       	ldi	r31, 0x0C	; 12
    50a2:	13 86       	std	Z+11, r1	; 0x0b
    50a4:	12 86       	std	Z+10, r1	; 0x0a
    50a6:	8a e0       	ldi	r24, 0x0A	; 10
    50a8:	84 87       	std	Z+12, r24	; 0x0c
    50aa:	0f 91       	pop	r16
    50ac:	08 95       	ret

000050ae <_ZN14EthernetClientneERKS_>:
uint16_t EthernetClient::_srcport = 1024;

EthernetClient::EthernetClient() : _sock(MAX_SOCK_NUM) {
}

EthernetClient::EthernetClient(uint8_t sock) : _sock(sock) {
    50ae:	dc 01       	movw	r26, r24
    50b0:	ed 91       	ld	r30, X+
    50b2:	fc 91       	ld	r31, X
    50b4:	02 8c       	ldd	r0, Z+26	; 0x1a
    50b6:	f3 8d       	ldd	r31, Z+27	; 0x1b
    50b8:	e0 2d       	mov	r30, r0
    50ba:	09 95       	icall
    50bc:	91 e0       	ldi	r25, 0x01	; 1
    50be:	89 27       	eor	r24, r25
    50c0:	08 95       	ret

000050c2 <_ZN14EthernetClient5writeEh>:
    50c2:	cf 93       	push	r28
    50c4:	df 93       	push	r29
    50c6:	1f 92       	push	r1
    50c8:	cd b7       	in	r28, 0x3d	; 61
    50ca:	de b7       	in	r29, 0x3e	; 62
    50cc:	69 83       	std	Y+1, r22	; 0x01
    50ce:	dc 01       	movw	r26, r24
    50d0:	ed 91       	ld	r30, X+
    50d2:	fc 91       	ld	r31, X
    50d4:	02 80       	ldd	r0, Z+2	; 0x02
    50d6:	f3 81       	ldd	r31, Z+3	; 0x03
    50d8:	e0 2d       	mov	r30, r0
    50da:	41 e0       	ldi	r20, 0x01	; 1
    50dc:	50 e0       	ldi	r21, 0x00	; 0
    50de:	be 01       	movw	r22, r28
    50e0:	6f 5f       	subi	r22, 0xFF	; 255
    50e2:	7f 4f       	sbci	r23, 0xFF	; 255
    50e4:	09 95       	icall
    50e6:	0f 90       	pop	r0
    50e8:	df 91       	pop	r29
    50ea:	cf 91       	pop	r28
    50ec:	08 95       	ret

000050ee <_ZN14EthernetClientcvbEv>:
    50ee:	21 e0       	ldi	r18, 0x01	; 1
    50f0:	fc 01       	movw	r30, r24
    50f2:	84 85       	ldd	r24, Z+12	; 0x0c
    50f4:	88 30       	cpi	r24, 0x08	; 8
    50f6:	09 f4       	brne	.+2      	; 0x50fa <_ZN14EthernetClientcvbEv+0xc>
    50f8:	20 e0       	ldi	r18, 0x00	; 0
    50fa:	82 2f       	mov	r24, r18
    50fc:	08 95       	ret

000050fe <_ZN14EthernetClienteqERKS_>:
    50fe:	fc 01       	movw	r30, r24
    5100:	94 85       	ldd	r25, Z+12	; 0x0c
    5102:	fb 01       	movw	r30, r22
    5104:	84 85       	ldd	r24, Z+12	; 0x0c
    5106:	98 13       	cpse	r25, r24
    5108:	03 c0       	rjmp	.+6      	; 0x5110 <_ZN14EthernetClienteqERKS_+0x12>
    510a:	81 e0       	ldi	r24, 0x01	; 1
    510c:	98 30       	cpi	r25, 0x08	; 8
    510e:	09 f4       	brne	.+2      	; 0x5112 <_ZN14EthernetClienteqERKS_+0x14>
    5110:	80 e0       	ldi	r24, 0x00	; 0
    5112:	08 95       	ret

00005114 <_ZN14EthernetClient7connectEPKcj>:
    5114:	cf 92       	push	r12
    5116:	df 92       	push	r13
    5118:	ef 92       	push	r14
    511a:	ff 92       	push	r15
    511c:	0f 93       	push	r16
    511e:	1f 93       	push	r17
    5120:	cf 93       	push	r28
    5122:	df 93       	push	r29
    5124:	cd b7       	in	r28, 0x3d	; 61
    5126:	de b7       	in	r29, 0x3e	; 62
    5128:	af 97       	sbiw	r28, 0x2f	; 47
    512a:	0f b6       	in	r0, 0x3f	; 63
    512c:	f8 94       	cli
    512e:	de bf       	out	0x3e, r29	; 62
    5130:	0f be       	out	0x3f, r0	; 63
    5132:	cd bf       	out	0x3d, r28	; 61
    5134:	8c 01       	movw	r16, r24
    5136:	6b 01       	movw	r12, r22
    5138:	7a 01       	movw	r14, r20
    513a:	ce 01       	movw	r24, r28
    513c:	01 96       	adiw	r24, 0x01	; 1
    513e:	0e 94 54 38 	call	0x70a8	; 0x70a8 <_ZN9IPAddressC1Ev>
    5142:	ce 01       	movw	r24, r28
    5144:	09 96       	adiw	r24, 0x09	; 9
    5146:	f3 d2       	rcall	.+1510   	; 0x572e <_ZN11EthernetUDPC1Ev>
    5148:	ce 01       	movw	r24, r28
    514a:	8a 96       	adiw	r24, 0x2a	; 42
    514c:	0e 94 54 38 	call	0x70a8	; 0x70a8 <_ZN9IPAddressC1Ev>
    5150:	6d e0       	ldi	r22, 0x0D	; 13
    5152:	7c e0       	ldi	r23, 0x0C	; 12
    5154:	ce 01       	movw	r24, r28
    5156:	84 96       	adiw	r24, 0x24	; 36
    5158:	85 df       	rcall	.-246    	; 0x5064 <_ZN13EthernetClass11dnsServerIPEv>
    515a:	be 01       	movw	r22, r28
    515c:	6c 5d       	subi	r22, 0xDC	; 220
    515e:	7f 4f       	sbci	r23, 0xFF	; 255
    5160:	ce 01       	movw	r24, r28
    5162:	01 96       	adiw	r24, 0x01	; 1
    5164:	4a dc       	rcall	.-1900   	; 0x49fa <_ZN9DNSClient5beginERK9IPAddress>
    5166:	ae 01       	movw	r20, r28
    5168:	46 5d       	subi	r20, 0xD6	; 214
    516a:	5f 4f       	sbci	r21, 0xFF	; 255
    516c:	b6 01       	movw	r22, r12
    516e:	ce 01       	movw	r24, r28
    5170:	01 96       	adiw	r24, 0x01	; 1
    5172:	9d de       	rcall	.-710    	; 0x4eae <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>
    5174:	81 30       	cpi	r24, 0x01	; 1
    5176:	91 05       	cpc	r25, r1
    5178:	c1 f4       	brne	.+48     	; 0x51aa <_ZN14EthernetClient7connectEPKcj+0x96>
    517a:	d8 01       	movw	r26, r16
    517c:	ed 91       	ld	r30, X+
    517e:	fc 91       	ld	r31, X
    5180:	06 84       	ldd	r0, Z+14	; 0x0e
    5182:	f7 85       	ldd	r31, Z+15	; 0x0f
    5184:	e0 2d       	mov	r30, r0
    5186:	82 e5       	ldi	r24, 0x52	; 82
    5188:	9a e0       	ldi	r25, 0x0A	; 10
    518a:	9d a3       	std	Y+37, r25	; 0x25
    518c:	8c a3       	std	Y+36, r24	; 0x24
    518e:	8c a5       	ldd	r24, Y+44	; 0x2c
    5190:	9d a5       	ldd	r25, Y+45	; 0x2d
    5192:	ae a5       	ldd	r26, Y+46	; 0x2e
    5194:	bf a5       	ldd	r27, Y+47	; 0x2f
    5196:	8e a3       	std	Y+38, r24	; 0x26
    5198:	9f a3       	std	Y+39, r25	; 0x27
    519a:	a8 a7       	std	Y+40, r26	; 0x28
    519c:	b9 a7       	std	Y+41, r27	; 0x29
    519e:	a7 01       	movw	r20, r14
    51a0:	be 01       	movw	r22, r28
    51a2:	6c 5d       	subi	r22, 0xDC	; 220
    51a4:	7f 4f       	sbci	r23, 0xFF	; 255
    51a6:	c8 01       	movw	r24, r16
    51a8:	09 95       	icall
    51aa:	af 96       	adiw	r28, 0x2f	; 47
    51ac:	0f b6       	in	r0, 0x3f	; 63
    51ae:	f8 94       	cli
    51b0:	de bf       	out	0x3e, r29	; 62
    51b2:	0f be       	out	0x3f, r0	; 63
    51b4:	cd bf       	out	0x3d, r28	; 61
    51b6:	df 91       	pop	r29
    51b8:	cf 91       	pop	r28
    51ba:	1f 91       	pop	r17
    51bc:	0f 91       	pop	r16
    51be:	ff 90       	pop	r15
    51c0:	ef 90       	pop	r14
    51c2:	df 90       	pop	r13
    51c4:	cf 90       	pop	r12
    51c6:	08 95       	ret

000051c8 <_ZN14EthernetClient5writeEPKhj>:
    51c8:	0f 93       	push	r16
    51ca:	1f 93       	push	r17
    51cc:	cf 93       	push	r28
    51ce:	df 93       	push	r29
    51d0:	8c 01       	movw	r16, r24
    51d2:	d4 2f       	mov	r29, r20
    51d4:	c5 2f       	mov	r28, r21
    51d6:	fc 01       	movw	r30, r24
    51d8:	84 85       	ldd	r24, Z+12	; 0x0c
    51da:	88 30       	cpi	r24, 0x08	; 8
    51dc:	41 f4       	brne	.+16     	; 0x51ee <_ZN14EthernetClient5writeEPKhj+0x26>
    51de:	81 e0       	ldi	r24, 0x01	; 1
    51e0:	90 e0       	ldi	r25, 0x00	; 0
    51e2:	f8 01       	movw	r30, r16
    51e4:	93 83       	std	Z+3, r25	; 0x03
    51e6:	82 83       	std	Z+2, r24	; 0x02
    51e8:	80 e0       	ldi	r24, 0x00	; 0
    51ea:	90 e0       	ldi	r25, 0x00	; 0
    51ec:	05 c0       	rjmp	.+10     	; 0x51f8 <_ZN14EthernetClient5writeEPKhj+0x30>
    51ee:	cf d3       	rcall	.+1950   	; 0x598e <_Z4sendhPKhj>
    51f0:	89 2b       	or	r24, r25
    51f2:	a9 f3       	breq	.-22     	; 0x51de <_ZN14EthernetClient5writeEPKhj+0x16>
    51f4:	8d 2f       	mov	r24, r29
    51f6:	9c 2f       	mov	r25, r28
    51f8:	df 91       	pop	r29
    51fa:	cf 91       	pop	r28
    51fc:	1f 91       	pop	r17
    51fe:	0f 91       	pop	r16
    5200:	08 95       	ret

00005202 <_ZN14EthernetClient9availableEv>:
    5202:	fc 01       	movw	r30, r24
    5204:	64 85       	ldd	r22, Z+12	; 0x0c
    5206:	68 30       	cpi	r22, 0x08	; 8
    5208:	19 f0       	breq	.+6      	; 0x5210 <_ZN14EthernetClient9availableEv+0xe>
    520a:	87 e4       	ldi	r24, 0x47	; 71
    520c:	9c e0       	ldi	r25, 0x0C	; 12
    520e:	d0 c5       	rjmp	.+2976   	; 0x5db0 <_ZN10W5500Class17getRXReceivedSizeEh>
    5210:	80 e0       	ldi	r24, 0x00	; 0
    5212:	90 e0       	ldi	r25, 0x00	; 0
    5214:	08 95       	ret

00005216 <_ZN14EthernetClient4readEv>:
    5216:	cf 93       	push	r28
    5218:	df 93       	push	r29
    521a:	1f 92       	push	r1
    521c:	cd b7       	in	r28, 0x3d	; 61
    521e:	de b7       	in	r29, 0x3e	; 62
    5220:	41 e0       	ldi	r20, 0x01	; 1
    5222:	50 e0       	ldi	r21, 0x00	; 0
    5224:	be 01       	movw	r22, r28
    5226:	6f 5f       	subi	r22, 0xFF	; 255
    5228:	7f 4f       	sbci	r23, 0xFF	; 255
    522a:	fc 01       	movw	r30, r24
    522c:	84 85       	ldd	r24, Z+12	; 0x0c
    522e:	f7 d3       	rcall	.+2030   	; 0x5a1e <_Z4recvhPhi>
    5230:	18 16       	cp	r1, r24
    5232:	19 06       	cpc	r1, r25
    5234:	1c f4       	brge	.+6      	; 0x523c <_ZN14EthernetClient4readEv+0x26>
    5236:	89 81       	ldd	r24, Y+1	; 0x01
    5238:	90 e0       	ldi	r25, 0x00	; 0
    523a:	02 c0       	rjmp	.+4      	; 0x5240 <_ZN14EthernetClient4readEv+0x2a>
    523c:	8f ef       	ldi	r24, 0xFF	; 255
    523e:	9f ef       	ldi	r25, 0xFF	; 255
    5240:	0f 90       	pop	r0
    5242:	df 91       	pop	r29
    5244:	cf 91       	pop	r28
    5246:	08 95       	ret

00005248 <_ZN14EthernetClient4readEPhj>:
    5248:	fc 01       	movw	r30, r24
    524a:	84 85       	ldd	r24, Z+12	; 0x0c
    524c:	e8 c3       	rjmp	.+2000   	; 0x5a1e <_Z4recvhPhi>

0000524e <_ZN14EthernetClient4peekEv>:
    524e:	0f 93       	push	r16
    5250:	1f 93       	push	r17
    5252:	cf 93       	push	r28
    5254:	df 93       	push	r29
    5256:	1f 92       	push	r1
    5258:	cd b7       	in	r28, 0x3d	; 61
    525a:	de b7       	in	r29, 0x3e	; 62
    525c:	8c 01       	movw	r16, r24
    525e:	dc 01       	movw	r26, r24
    5260:	ed 91       	ld	r30, X+
    5262:	fc 91       	ld	r31, X
    5264:	00 84       	ldd	r0, Z+8	; 0x08
    5266:	f1 85       	ldd	r31, Z+9	; 0x09
    5268:	e0 2d       	mov	r30, r0
    526a:	09 95       	icall
    526c:	89 2b       	or	r24, r25
    526e:	49 f0       	breq	.+18     	; 0x5282 <_ZN14EthernetClient4peekEv+0x34>
    5270:	be 01       	movw	r22, r28
    5272:	6f 5f       	subi	r22, 0xFF	; 255
    5274:	7f 4f       	sbci	r23, 0xFF	; 255
    5276:	f8 01       	movw	r30, r16
    5278:	84 85       	ldd	r24, Z+12	; 0x0c
    527a:	12 d4       	rcall	.+2084   	; 0x5aa0 <_Z4peekhPh>
    527c:	89 81       	ldd	r24, Y+1	; 0x01
    527e:	90 e0       	ldi	r25, 0x00	; 0
    5280:	02 c0       	rjmp	.+4      	; 0x5286 <_ZN14EthernetClient4peekEv+0x38>
    5282:	8f ef       	ldi	r24, 0xFF	; 255
    5284:	9f ef       	ldi	r25, 0xFF	; 255
    5286:	0f 90       	pop	r0
    5288:	df 91       	pop	r29
    528a:	cf 91       	pop	r28
    528c:	1f 91       	pop	r17
    528e:	0f 91       	pop	r16
    5290:	08 95       	ret

00005292 <_ZN14EthernetClient5flushEv>:
    5292:	fc 01       	movw	r30, r24
    5294:	84 85       	ldd	r24, Z+12	; 0x0c
    5296:	11 c4       	rjmp	.+2082   	; 0x5aba <_Z5flushh>

00005298 <_ZN14EthernetClientC1Ev>:
    5298:	fc 01       	movw	r30, r24
    529a:	13 82       	std	Z+3, r1	; 0x03
    529c:	12 82       	std	Z+2, r1	; 0x02
    529e:	88 ee       	ldi	r24, 0xE8	; 232
    52a0:	93 e0       	ldi	r25, 0x03	; 3
    52a2:	a0 e0       	ldi	r26, 0x00	; 0
    52a4:	b0 e0       	ldi	r27, 0x00	; 0
    52a6:	84 83       	std	Z+4, r24	; 0x04
    52a8:	95 83       	std	Z+5, r25	; 0x05
    52aa:	a6 83       	std	Z+6, r26	; 0x06
    52ac:	b7 83       	std	Z+7, r27	; 0x07
    52ae:	8e ec       	ldi	r24, 0xCE	; 206
    52b0:	99 e0       	ldi	r25, 0x09	; 9
    52b2:	91 83       	std	Z+1, r25	; 0x01
    52b4:	80 83       	st	Z, r24
    52b6:	88 e0       	ldi	r24, 0x08	; 8
    52b8:	84 87       	std	Z+12, r24	; 0x0c
    52ba:	08 95       	ret

000052bc <_ZN14EthernetClient6statusEv>:
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
}

uint8_t EthernetClient::status() {
  if (_sock == MAX_SOCK_NUM) return SnSR::CLOSED;
    52bc:	fc 01       	movw	r30, r24
    52be:	64 85       	ldd	r22, Z+12	; 0x0c
    52c0:	68 30       	cpi	r22, 0x08	; 8
    52c2:	39 f0       	breq	.+14     	; 0x52d2 <_ZN14EthernetClient6statusEv+0x16>

extern W5500Class w5500;

uint8_t W5500Class::readSn(SOCKET _s, uint16_t _addr) {
    uint8_t cntl_byte = (_s<<5)+0x08;
    return read(_addr, cntl_byte);
    52c4:	62 95       	swap	r22
    52c6:	66 0f       	add	r22, r22
    52c8:	60 7e       	andi	r22, 0xE0	; 224
    52ca:	68 5f       	subi	r22, 0xF8	; 248
    52cc:	83 e0       	ldi	r24, 0x03	; 3
    52ce:	90 e0       	ldi	r25, 0x00	; 0
    52d0:	df c4       	rjmp	.+2494   	; 0x5c90 <_ZN10W5500Class4readEjh>
  return w5500.readSnSR(_sock);
}
    52d2:	80 e0       	ldi	r24, 0x00	; 0
    52d4:	08 95       	ret

000052d6 <_ZN14EthernetClient9connectedEv>:

  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
    52d6:	cf 93       	push	r28
    52d8:	df 93       	push	r29
  if (_sock == MAX_SOCK_NUM) return 0;
    52da:	fc 01       	movw	r30, r24
    52dc:	24 85       	ldd	r18, Z+12	; 0x0c
    52de:	28 30       	cpi	r18, 0x08	; 8
    52e0:	c9 f0       	breq	.+50     	; 0x5314 <_ZN14EthernetClient9connectedEv+0x3e>
    52e2:	ec 01       	movw	r28, r24
  
  uint8_t s = status();
    52e4:	eb df       	rcall	.-42     	; 0x52bc <_ZN14EthernetClient6statusEv>
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
    52e6:	84 31       	cpi	r24, 0x14	; 20
    52e8:	81 f0       	breq	.+32     	; 0x530a <_ZN14EthernetClient9connectedEv+0x34>

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
  
  uint8_t s = status();
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    52ea:	88 23       	and	r24, r24
    52ec:	71 f0       	breq	.+28     	; 0x530a <_ZN14EthernetClient9connectedEv+0x34>
    52ee:	88 31       	cpi	r24, 0x18	; 24
    52f0:	61 f0       	breq	.+24     	; 0x530a <_ZN14EthernetClient9connectedEv+0x34>
    (s == SnSR::CLOSE_WAIT && !available()));
    52f2:	8c 31       	cpi	r24, 0x1C	; 28
    52f4:	61 f4       	brne	.+24     	; 0x530e <_ZN14EthernetClient9connectedEv+0x38>
    52f6:	e8 81       	ld	r30, Y
    52f8:	f9 81       	ldd	r31, Y+1	; 0x01
    52fa:	00 84       	ldd	r0, Z+8	; 0x08
    52fc:	f1 85       	ldd	r31, Z+9	; 0x09
    52fe:	e0 2d       	mov	r30, r0
    5300:	ce 01       	movw	r24, r28
    5302:	09 95       	icall
    5304:	21 e0       	ldi	r18, 0x01	; 1
    5306:	89 2b       	or	r24, r25
    5308:	19 f4       	brne	.+6      	; 0x5310 <_ZN14EthernetClient9connectedEv+0x3a>
    530a:	20 e0       	ldi	r18, 0x00	; 0
    530c:	01 c0       	rjmp	.+2      	; 0x5310 <_ZN14EthernetClient9connectedEv+0x3a>
    530e:	21 e0       	ldi	r18, 0x01	; 1
    5310:	82 2f       	mov	r24, r18
    5312:	01 c0       	rjmp	.+2      	; 0x5316 <_ZN14EthernetClient9connectedEv+0x40>
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
    5314:	80 e0       	ldi	r24, 0x00	; 0
  
  uint8_t s = status();
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
}
    5316:	df 91       	pop	r29
    5318:	cf 91       	pop	r28
    531a:	08 95       	ret

0000531c <_ZN14EthernetClient4stopEv>:

void EthernetClient::flush() {
  ::flush(_sock);
}

void EthernetClient::stop() {
    531c:	cf 92       	push	r12
    531e:	df 92       	push	r13
    5320:	ef 92       	push	r14
    5322:	ff 92       	push	r15
    5324:	cf 93       	push	r28
    5326:	df 93       	push	r29
    5328:	ec 01       	movw	r28, r24
  if (_sock == MAX_SOCK_NUM)
    532a:	8c 85       	ldd	r24, Y+12	; 0x0c
    532c:	88 30       	cpi	r24, 0x08	; 8
    532e:	69 f1       	breq	.+90     	; 0x538a <_ZN14EthernetClient4stopEv+0x6e>
    return;

  // attempt to close the connection gracefully (send a FIN to other side)
  disconnect(_sock);
    5330:	29 d3       	rcall	.+1618   	; 0x5984 <_Z10disconnecth>
  unsigned long start = millis();
    5332:	0e 94 e4 39 	call	0x73c8	; 0x73c8 <millis>
    5336:	6b 01       	movw	r12, r22
    5338:	7c 01       	movw	r14, r24

  // wait a second for the connection to close
  while (status() != SnSR::CLOSED && millis() - start < 1000)
    533a:	ce 01       	movw	r24, r28
    533c:	bf df       	rcall	.-130    	; 0x52bc <_ZN14EthernetClient6statusEv>
    533e:	88 23       	and	r24, r24
    5340:	a1 f0       	breq	.+40     	; 0x536a <_ZN14EthernetClient4stopEv+0x4e>
    5342:	0e 94 e4 39 	call	0x73c8	; 0x73c8 <millis>
    5346:	dc 01       	movw	r26, r24
    5348:	cb 01       	movw	r24, r22
    534a:	8c 19       	sub	r24, r12
    534c:	9d 09       	sbc	r25, r13
    534e:	ae 09       	sbc	r26, r14
    5350:	bf 09       	sbc	r27, r15
    5352:	88 3e       	cpi	r24, 0xE8	; 232
    5354:	93 40       	sbci	r25, 0x03	; 3
    5356:	a1 05       	cpc	r26, r1
    5358:	b1 05       	cpc	r27, r1
    535a:	38 f4       	brcc	.+14     	; 0x536a <_ZN14EthernetClient4stopEv+0x4e>
    delay(1);
    535c:	61 e0       	ldi	r22, 0x01	; 1
    535e:	70 e0       	ldi	r23, 0x00	; 0
    5360:	80 e0       	ldi	r24, 0x00	; 0
    5362:	90 e0       	ldi	r25, 0x00	; 0
    5364:	0e 94 15 3a 	call	0x742a	; 0x742a <delay>

  // if it hasn't closed, close it forcefully
  if (status() != SnSR::CLOSED)
    5368:	e8 cf       	rjmp	.-48     	; 0x533a <_ZN14EthernetClient4stopEv+0x1e>
    536a:	ce 01       	movw	r24, r28
    536c:	a7 df       	rcall	.-178    	; 0x52bc <_ZN14EthernetClient6statusEv>
    536e:	88 23       	and	r24, r24
    close(_sock);
    5370:	11 f0       	breq	.+4      	; 0x5376 <_ZN14EthernetClient4stopEv+0x5a>
    5372:	8c 85       	ldd	r24, Y+12	; 0x0c
    5374:	96 d2       	rcall	.+1324   	; 0x58a2 <_Z5closeh>

  EthernetClass::_server_port[_sock] = 0;
    5376:	ec 85       	ldd	r30, Y+12	; 0x0c
    5378:	f0 e0       	ldi	r31, 0x00	; 0
    537a:	ee 0f       	add	r30, r30
    537c:	ff 1f       	adc	r31, r31
    537e:	e6 5e       	subi	r30, 0xE6	; 230
    5380:	f3 4f       	sbci	r31, 0xF3	; 243
    5382:	11 82       	std	Z+1, r1	; 0x01
    5384:	10 82       	st	Z, r1
  _sock = MAX_SOCK_NUM;
    5386:	88 e0       	ldi	r24, 0x08	; 8
    5388:	8c 87       	std	Y+12, r24	; 0x0c
}
    538a:	df 91       	pop	r29
    538c:	cf 91       	pop	r28
    538e:	ff 90       	pop	r15
    5390:	ef 90       	pop	r14
    5392:	df 90       	pop	r13
    5394:	cf 90       	pop	r12
    5396:	08 95       	ret

00005398 <_ZN14EthernetClient7connectE9IPAddressj>:
  } else {
    return ret;
  }
}

int EthernetClient::connect(IPAddress ip, uint16_t port) {
    5398:	cf 92       	push	r12
    539a:	df 92       	push	r13
    539c:	ff 92       	push	r15
    539e:	0f 93       	push	r16
    53a0:	1f 93       	push	r17
    53a2:	cf 93       	push	r28
    53a4:	df 93       	push	r29
  if (_sock != MAX_SOCK_NUM)
    53a6:	fc 01       	movw	r30, r24
    53a8:	24 85       	ldd	r18, Z+12	; 0x0c
    53aa:	28 30       	cpi	r18, 0x08	; 8
    53ac:	c1 f5       	brne	.+112    	; 0x541e <_ZN14EthernetClient7connectE9IPAddressj+0x86>
    53ae:	6a 01       	movw	r12, r20
    53b0:	8b 01       	movw	r16, r22
    53b2:	ec 01       	movw	r28, r24
    53b4:	f1 2c       	mov	r15, r1
    53b6:	6f 2d       	mov	r22, r15
    53b8:	62 95       	swap	r22
    53ba:	66 0f       	add	r22, r22
    53bc:	60 7e       	andi	r22, 0xE0	; 224
    53be:	68 5f       	subi	r22, 0xF8	; 248
    53c0:	83 e0       	ldi	r24, 0x03	; 3
    53c2:	90 e0       	ldi	r25, 0x00	; 0
    53c4:	65 d4       	rcall	.+2250   	; 0x5c90 <_ZN10W5500Class4readEjh>
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
    53c6:	81 11       	cpse	r24, r1
    53c8:	02 c0       	rjmp	.+4      	; 0x53ce <_ZN14EthernetClient7connectE9IPAddressj+0x36>
      _sock = i;
    53ca:	fc 86       	std	Y+12, r15	; 0x0c
    53cc:	07 c0       	rjmp	.+14     	; 0x53dc <_ZN14EthernetClient7connectE9IPAddressj+0x44>
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
    53ce:	8b 7f       	andi	r24, 0xFB	; 251
    53d0:	88 31       	cpi	r24, 0x18	; 24
    53d2:	d9 f3       	breq	.-10     	; 0x53ca <_ZN14EthernetClient7connectE9IPAddressj+0x32>
    53d4:	f3 94       	inc	r15

int EthernetClient::connect(IPAddress ip, uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    53d6:	f8 e0       	ldi	r31, 0x08	; 8
    53d8:	ff 12       	cpse	r15, r31
    53da:	ed cf       	rjmp	.-38     	; 0x53b6 <_ZN14EthernetClient7connectE9IPAddressj+0x1e>
      _sock = i;
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
    53dc:	8c 85       	ldd	r24, Y+12	; 0x0c
    53de:	88 30       	cpi	r24, 0x08	; 8
    53e0:	f1 f0       	breq	.+60     	; 0x541e <_ZN14EthernetClient7connectE9IPAddressj+0x86>
    return 0;

  _srcport++;
    53e2:	20 91 65 01 	lds	r18, 0x0165	; 0x800165 <_ZN14EthernetClient8_srcportE>
    53e6:	30 91 66 01 	lds	r19, 0x0166	; 0x800166 <_ZN14EthernetClient8_srcportE+0x1>
    53ea:	2f 5f       	subi	r18, 0xFF	; 255
    53ec:	3f 4f       	sbci	r19, 0xFF	; 255
  if (_srcport == 0) _srcport = 1024;
    53ee:	11 f4       	brne	.+4      	; 0x53f4 <_ZN14EthernetClient7connectE9IPAddressj+0x5c>
    53f0:	20 e0       	ldi	r18, 0x00	; 0
    53f2:	34 e0       	ldi	r19, 0x04	; 4
    53f4:	30 93 66 01 	sts	0x0166, r19	; 0x800166 <_ZN14EthernetClient8_srcportE+0x1>
    53f8:	20 93 65 01 	sts	0x0165, r18	; 0x800165 <_ZN14EthernetClient8_srcportE>
  socket(_sock, SnMR::TCP, _srcport, 0);
    53fc:	40 91 65 01 	lds	r20, 0x0165	; 0x800165 <_ZN14EthernetClient8_srcportE>
    5400:	50 91 66 01 	lds	r21, 0x0166	; 0x800166 <_ZN14EthernetClient8_srcportE+0x1>
    5404:	20 e0       	ldi	r18, 0x00	; 0
    5406:	61 e0       	ldi	r22, 0x01	; 1
    5408:	57 d2       	rcall	.+1198   	; 0x58b8 <_Z6sockethhjh>

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    540a:	b8 01       	movw	r22, r16
    540c:	6e 5f       	subi	r22, 0xFE	; 254
    540e:	7f 4f       	sbci	r23, 0xFF	; 255

  if (!::connect(_sock, rawIPAddress(ip), port)) {
    5410:	a6 01       	movw	r20, r12
    5412:	8c 85       	ldd	r24, Y+12	; 0x0c
    5414:	84 d2       	rcall	.+1288   	; 0x591e <_Z7connecthPhj>
    5416:	81 11       	cpse	r24, r1
    5418:	05 c0       	rjmp	.+10     	; 0x5424 <_ZN14EthernetClient7connectE9IPAddressj+0x8c>
    _sock = MAX_SOCK_NUM;
    541a:	88 e0       	ldi	r24, 0x08	; 8
    541c:	8c 87       	std	Y+12, r24	; 0x0c
    return 0;
    541e:	80 e0       	ldi	r24, 0x00	; 0
    5420:	90 e0       	ldi	r25, 0x00	; 0
  }

  while (status() != SnSR::ESTABLISHED) {
    5422:	0f c0       	rjmp	.+30     	; 0x5442 <_ZN14EthernetClient7connectE9IPAddressj+0xaa>
    5424:	ce 01       	movw	r24, r28
    5426:	4a df       	rcall	.-364    	; 0x52bc <_ZN14EthernetClient6statusEv>
    5428:	87 31       	cpi	r24, 0x17	; 23
    542a:	49 f0       	breq	.+18     	; 0x543e <_ZN14EthernetClient7connectE9IPAddressj+0xa6>
    delay(1);
    542c:	61 e0       	ldi	r22, 0x01	; 1
    542e:	70 e0       	ldi	r23, 0x00	; 0
    5430:	80 e0       	ldi	r24, 0x00	; 0
    5432:	90 e0       	ldi	r25, 0x00	; 0
    5434:	0e 94 15 3a 	call	0x742a	; 0x742a <delay>
    if (status() == SnSR::CLOSED) {
    5438:	ce 01       	movw	r24, r28
    543a:	40 df       	rcall	.-384    	; 0x52bc <_ZN14EthernetClient6statusEv>
    543c:	ec cf       	rjmp	.-40     	; 0x5416 <_ZN14EthernetClient7connectE9IPAddressj+0x7e>
      _sock = MAX_SOCK_NUM;
      return 0;
    }
  }

  return 1;
    543e:	81 e0       	ldi	r24, 0x01	; 1
    5440:	90 e0       	ldi	r25, 0x00	; 0
}
    5442:	df 91       	pop	r29
    5444:	cf 91       	pop	r28
    5446:	1f 91       	pop	r17
    5448:	0f 91       	pop	r16
    544a:	ff 90       	pop	r15
    544c:	df 90       	pop	r13
    544e:	cf 90       	pop	r12
    5450:	08 95       	ret

00005452 <_GLOBAL__sub_I__ZN14EthernetClient8_srcportE>:
  return _sock != MAX_SOCK_NUM;
}

bool EthernetClient::operator==(const EthernetClient& rhs) {
  return _sock == rhs._sock && _sock != MAX_SOCK_NUM && rhs._sock != MAX_SOCK_NUM;
}
    5452:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    5454:	00 e0       	ldi	r16, 0x00	; 0
    5456:	20 e0       	ldi	r18, 0x00	; 0
    5458:	40 e0       	ldi	r20, 0x00	; 0
    545a:	60 e0       	ldi	r22, 0x00	; 0
    545c:	80 e3       	ldi	r24, 0x30	; 48
    545e:	9c e0       	ldi	r25, 0x0C	; 12
    5460:	0e 94 5e 38 	call	0x70bc	; 0x70bc <_ZN9IPAddressC1Ehhhh>
    5464:	0f 91       	pop	r16
    5466:	08 95       	ret

00005468 <_GLOBAL__sub_I__ZN14EthernetServerC2Ej>:
      n += client.write(buffer, size);
    }
  }
  
  return n;
}
    5468:	0f 93       	push	r16
    546a:	00 e0       	ldi	r16, 0x00	; 0
    546c:	20 e0       	ldi	r18, 0x00	; 0
    546e:	40 e0       	ldi	r20, 0x00	; 0
    5470:	60 e0       	ldi	r22, 0x00	; 0
    5472:	86 e3       	ldi	r24, 0x36	; 54
    5474:	9c e0       	ldi	r25, 0x0C	; 12
    5476:	0e 94 5e 38 	call	0x70bc	; 0x70bc <_ZN9IPAddressC1Ehhhh>
    547a:	0f 91       	pop	r16
    547c:	08 95       	ret

0000547e <_ZN3UDP14beginMulticastE9IPAddressj>:

class UDP : public Stream {

public:
  virtual uint8_t begin(uint16_t) =0;  // initialize, start listening on specified port. Returns 1 if successful, 0 if there are no sockets available to use
  virtual uint8_t beginMulticast(IPAddress, uint16_t) { return 0; }  // initialize, start listening on specified multicast IP address and port. Returns 1 if successful, 0 on failure
    547e:	80 e0       	ldi	r24, 0x00	; 0
    5480:	08 95       	ret

00005482 <_ZN11EthernetUDP4readEPcj>:
  // Read up to len bytes from the current packet and place them into buffer
  // Returns the number of bytes read, or 0 if none are available
  virtual int read(unsigned char* buffer, size_t len);
  // Read up to len characters from the current packet and place them into buffer
  // Returns the number of characters read, or 0 if none are available
  virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
    5482:	dc 01       	movw	r26, r24
    5484:	ed 91       	ld	r30, X+
    5486:	fc 91       	ld	r31, X
    5488:	04 8c       	ldd	r0, Z+28	; 0x1c
    548a:	f5 8d       	ldd	r31, Z+29	; 0x1d
    548c:	e0 2d       	mov	r30, r0
    548e:	09 94       	ijmp

00005490 <_ZN11EthernetUDP8remoteIPEv>:
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    5490:	22 e5       	ldi	r18, 0x52	; 82
    5492:	3a e0       	ldi	r19, 0x0A	; 10
    5494:	fc 01       	movw	r30, r24
    5496:	31 83       	std	Z+1, r19	; 0x01
    5498:	20 83       	st	Z, r18
    549a:	fb 01       	movw	r30, r22
    549c:	41 89       	ldd	r20, Z+17	; 0x11
    549e:	52 89       	ldd	r21, Z+18	; 0x12
    54a0:	63 89       	ldd	r22, Z+19	; 0x13
    54a2:	74 89       	ldd	r23, Z+20	; 0x14
    54a4:	fc 01       	movw	r30, r24
    54a6:	42 83       	std	Z+2, r20	; 0x02
    54a8:	53 83       	std	Z+3, r21	; 0x03
    54aa:	64 83       	std	Z+4, r22	; 0x04
    54ac:	75 83       	std	Z+5, r23	; 0x05
  // Return the next byte from the current packet without moving on to the next byte
  virtual int peek();
  virtual void flush();	// Finish reading the current packet

  // Return the IP address of the host who sent the current incoming packet
  virtual IPAddress remoteIP() { return _remoteIP; };
    54ae:	08 95       	ret

000054b0 <_ZN11EthernetUDP10remotePortEv>:
  // Return the port of the host who sent the current incoming packet
  virtual uint16_t remotePort() { return _remotePort; };
    54b0:	fc 01       	movw	r30, r24
    54b2:	85 89       	ldd	r24, Z+21	; 0x15
    54b4:	96 89       	ldd	r25, Z+22	; 0x16
    54b6:	08 95       	ret

000054b8 <_ZN11EthernetUDP9availableEv>:

/* return number of bytes available in the current packet,
   will return zero if parsePacket hasn't been called yet */
int EthernetUDP::available() {
  return _remaining;
}
    54b8:	fc 01       	movw	r30, r24
    54ba:	81 8d       	ldd	r24, Z+25	; 0x19
    54bc:	92 8d       	ldd	r25, Z+26	; 0x1a
    54be:	08 95       	ret

000054c0 <_ZN11EthernetUDP5writeEh>:
{
  return sendUDP(_sock);
}

size_t EthernetUDP::write(uint8_t byte)
{
    54c0:	cf 93       	push	r28
    54c2:	df 93       	push	r29
    54c4:	1f 92       	push	r1
    54c6:	cd b7       	in	r28, 0x3d	; 61
    54c8:	de b7       	in	r29, 0x3e	; 62
    54ca:	69 83       	std	Y+1, r22	; 0x01
  return write(&byte, 1);
    54cc:	dc 01       	movw	r26, r24
    54ce:	ed 91       	ld	r30, X+
    54d0:	fc 91       	ld	r31, X
    54d2:	02 80       	ldd	r0, Z+2	; 0x02
    54d4:	f3 81       	ldd	r31, Z+3	; 0x03
    54d6:	e0 2d       	mov	r30, r0
    54d8:	41 e0       	ldi	r20, 0x01	; 1
    54da:	50 e0       	ldi	r21, 0x00	; 0
    54dc:	be 01       	movw	r22, r28
    54de:	6f 5f       	subi	r22, 0xFF	; 255
    54e0:	7f 4f       	sbci	r23, 0xFF	; 255
    54e2:	09 95       	icall
}
    54e4:	0f 90       	pop	r0
    54e6:	df 91       	pop	r29
    54e8:	cf 91       	pop	r28
    54ea:	08 95       	ret

000054ec <_ZN11EthernetUDP5flushEv>:
  ::peek(_sock, &b);
  return b;
}

void EthernetUDP::flush()
{
    54ec:	cf 93       	push	r28
    54ee:	df 93       	push	r29
    54f0:	ec 01       	movw	r28, r24
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5500 always behaves :)

  while (_remaining)
    54f2:	89 8d       	ldd	r24, Y+25	; 0x19
    54f4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    54f6:	89 2b       	or	r24, r25
    54f8:	41 f0       	breq	.+16     	; 0x550a <_ZN11EthernetUDP5flushEv+0x1e>
  {
    read();
    54fa:	e8 81       	ld	r30, Y
    54fc:	f9 81       	ldd	r31, Y+1	; 0x01
    54fe:	02 84       	ldd	r0, Z+10	; 0x0a
    5500:	f3 85       	ldd	r31, Z+11	; 0x0b
    5502:	e0 2d       	mov	r30, r0
    5504:	ce 01       	movw	r24, r28
    5506:	09 95       	icall
{
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5500 always behaves :)

  while (_remaining)
    5508:	f4 cf       	rjmp	.-24     	; 0x54f2 <_ZN11EthernetUDP5flushEv+0x6>
  {
    read();
  }
}
    550a:	df 91       	pop	r29
    550c:	cf 91       	pop	r28
    550e:	08 95       	ret

00005510 <_ZN11EthernetUDP4stopEv>:
  return _remaining;
}

/* Release any resources being used by this EthernetUDP instance */
void EthernetUDP::stop()
{
    5510:	cf 93       	push	r28
    5512:	df 93       	push	r29
    5514:	ec 01       	movw	r28, r24
  if (_sock == MAX_SOCK_NUM)
    5516:	8c 85       	ldd	r24, Y+12	; 0x0c
    5518:	88 30       	cpi	r24, 0x08	; 8
    551a:	59 f0       	breq	.+22     	; 0x5532 <_ZN11EthernetUDP4stopEv+0x22>
    return;

  close(_sock);
    551c:	c2 d1       	rcall	.+900    	; 0x58a2 <_Z5closeh>

  EthernetClass::_server_port[_sock] = 0;
    551e:	ec 85       	ldd	r30, Y+12	; 0x0c
    5520:	f0 e0       	ldi	r31, 0x00	; 0
    5522:	ee 0f       	add	r30, r30
    5524:	ff 1f       	adc	r31, r31
    5526:	e6 5e       	subi	r30, 0xE6	; 230
    5528:	f3 4f       	sbci	r31, 0xF3	; 243
    552a:	11 82       	std	Z+1, r1	; 0x01
    552c:	10 82       	st	Z, r1
  _sock = MAX_SOCK_NUM;
    552e:	88 e0       	ldi	r24, 0x08	; 8
    5530:	8c 87       	std	Y+12, r24	; 0x0c
}
    5532:	df 91       	pop	r29
    5534:	cf 91       	pop	r28
    5536:	08 95       	ret

00005538 <_ZN11EthernetUDP11beginPacketE9IPAddressj>:
  }
}

int EthernetUDP::beginPacket(IPAddress ip, uint16_t port)
{
  _offset = 0;
    5538:	fc 01       	movw	r30, r24
    553a:	10 8e       	std	Z+24, r1	; 0x18
    553c:	17 8a       	std	Z+23, r1	; 0x17

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    553e:	6e 5f       	subi	r22, 0xFE	; 254
    5540:	7f 4f       	sbci	r23, 0xFF	; 255
  return startUDP(_sock, rawIPAddress(ip), port);
    5542:	84 85       	ldd	r24, Z+12	; 0x0c
    5544:	e6 c2       	rjmp	.+1484   	; 0x5b12 <_Z8startUDPhPhj>

00005546 <_ZN11EthernetUDP9endPacketEv>:
}

int EthernetUDP::endPacket()
{
  return sendUDP(_sock);
    5546:	fc 01       	movw	r30, r24
    5548:	84 85       	ldd	r24, Z+12	; 0x0c
    554a:	06 c3       	rjmp	.+1548   	; 0x5b58 <_Z7sendUDPh>

0000554c <_ZN11EthernetUDP5writeEPKhj>:
{
  return write(&byte, 1);
}

size_t EthernetUDP::write(const uint8_t *buffer, size_t size)
{
    554c:	cf 93       	push	r28
    554e:	df 93       	push	r29
    5550:	ec 01       	movw	r28, r24
    5552:	9a 01       	movw	r18, r20
  uint16_t bytes_written = bufferData(_sock, _offset, buffer, size);
    5554:	8f 89       	ldd	r24, Y+23	; 0x17
    5556:	98 8d       	ldd	r25, Y+24	; 0x18
    5558:	ab 01       	movw	r20, r22
    555a:	bc 01       	movw	r22, r24
    555c:	8c 85       	ldd	r24, Y+12	; 0x0c
    555e:	ae d2       	rcall	.+1372   	; 0x5abc <_Z10bufferDatahjPKhj>
  _offset += bytes_written;
    5560:	2f 89       	ldd	r18, Y+23	; 0x17
    5562:	38 8d       	ldd	r19, Y+24	; 0x18
    5564:	28 0f       	add	r18, r24
    5566:	39 1f       	adc	r19, r25
    5568:	38 8f       	std	Y+24, r19	; 0x18
    556a:	2f 8b       	std	Y+23, r18	; 0x17
  return bytes_written;
}
    556c:	df 91       	pop	r29
    556e:	cf 91       	pop	r28
    5570:	08 95       	ret

00005572 <_ZN11EthernetUDP4readEv>:
  // There aren't any packets available
  return 0;
}

int EthernetUDP::read()
{
    5572:	0f 93       	push	r16
    5574:	1f 93       	push	r17
    5576:	cf 93       	push	r28
    5578:	df 93       	push	r29
    557a:	1f 92       	push	r1
    557c:	cd b7       	in	r28, 0x3d	; 61
    557e:	de b7       	in	r29, 0x3e	; 62
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
    5580:	fc 01       	movw	r30, r24
    5582:	21 8d       	ldd	r18, Z+25	; 0x19
    5584:	32 8d       	ldd	r19, Z+26	; 0x1a
    5586:	23 2b       	or	r18, r19
    5588:	59 f0       	breq	.+22     	; 0x55a0 <_ZN11EthernetUDP4readEv+0x2e>
    558a:	8c 01       	movw	r16, r24
    558c:	41 e0       	ldi	r20, 0x01	; 1
    558e:	50 e0       	ldi	r21, 0x00	; 0
    5590:	be 01       	movw	r22, r28
    5592:	6f 5f       	subi	r22, 0xFF	; 255
    5594:	7f 4f       	sbci	r23, 0xFF	; 255
    5596:	84 85       	ldd	r24, Z+12	; 0x0c
    5598:	42 d2       	rcall	.+1156   	; 0x5a1e <_Z4recvhPhi>
    559a:	18 16       	cp	r1, r24
    559c:	19 06       	cpc	r1, r25
    559e:	1c f0       	brlt	.+6      	; 0x55a6 <_ZN11EthernetUDP4readEv+0x34>
    _remaining--;
    return byte;
  }

  // If we get here, there's no data available
  return -1;
    55a0:	8f ef       	ldi	r24, 0xFF	; 255
    55a2:	9f ef       	ldi	r25, 0xFF	; 255
    55a4:	08 c0       	rjmp	.+16     	; 0x55b6 <_ZN11EthernetUDP4readEv+0x44>
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
  {
    // We read things without any problems
    _remaining--;
    55a6:	f8 01       	movw	r30, r16
    55a8:	81 8d       	ldd	r24, Z+25	; 0x19
    55aa:	92 8d       	ldd	r25, Z+26	; 0x1a
    55ac:	01 97       	sbiw	r24, 0x01	; 1
    55ae:	92 8f       	std	Z+26, r25	; 0x1a
    55b0:	81 8f       	std	Z+25, r24	; 0x19
    return byte;
    55b2:	89 81       	ldd	r24, Y+1	; 0x01
    55b4:	90 e0       	ldi	r25, 0x00	; 0
  }

  // If we get here, there's no data available
  return -1;
}
    55b6:	0f 90       	pop	r0
    55b8:	df 91       	pop	r29
    55ba:	cf 91       	pop	r28
    55bc:	1f 91       	pop	r17
    55be:	0f 91       	pop	r16
    55c0:	08 95       	ret

000055c2 <_ZN11EthernetUDP4readEPhj>:

int EthernetUDP::read(unsigned char* buffer, size_t len)
{
    55c2:	cf 93       	push	r28
    55c4:	df 93       	push	r29

  if (_remaining > 0)
    55c6:	fc 01       	movw	r30, r24
    55c8:	21 8d       	ldd	r18, Z+25	; 0x19
    55ca:	32 8d       	ldd	r19, Z+26	; 0x1a
    55cc:	21 15       	cp	r18, r1
    55ce:	31 05       	cpc	r19, r1
    55d0:	19 f4       	brne	.+6      	; 0x55d8 <_ZN11EthernetUDP4readEPhj+0x16>
    }

  }

  // If we get here, there's no data available or recv failed
  return -1;
    55d2:	8f ef       	ldi	r24, 0xFF	; 255
    55d4:	9f ef       	ldi	r25, 0xFF	; 255
    55d6:	10 c0       	rjmp	.+32     	; 0x55f8 <_ZN11EthernetUDP4readEPhj+0x36>
    55d8:	ec 01       	movw	r28, r24
  if (_remaining > 0)
  {

    int got;

    if (_remaining <= len)
    55da:	42 17       	cp	r20, r18
    55dc:	53 07       	cpc	r21, r19
    55de:	08 f0       	brcs	.+2      	; 0x55e2 <_ZN11EthernetUDP4readEPhj+0x20>
    {
      // data should fit in the buffer
      got = recv(_sock, buffer, _remaining);
    55e0:	a9 01       	movw	r20, r18
    }
    else
    {
      // too much data for the buffer, 
      // grab as much as will fit
      got = recv(_sock, buffer, len);
    55e2:	8c 85       	ldd	r24, Y+12	; 0x0c
    55e4:	1c d2       	rcall	.+1080   	; 0x5a1e <_Z4recvhPhi>
    }

    if (got > 0)
    55e6:	18 16       	cp	r1, r24
    55e8:	19 06       	cpc	r1, r25
    55ea:	9c f7       	brge	.-26     	; 0x55d2 <_ZN11EthernetUDP4readEPhj+0x10>
    {
      _remaining -= got;
    55ec:	29 8d       	ldd	r18, Y+25	; 0x19
    55ee:	3a 8d       	ldd	r19, Y+26	; 0x1a
    55f0:	28 1b       	sub	r18, r24
    55f2:	39 0b       	sbc	r19, r25
    55f4:	3a 8f       	std	Y+26, r19	; 0x1a
    55f6:	29 8f       	std	Y+25, r18	; 0x19
  }

  // If we get here, there's no data available or recv failed
  return -1;

}
    55f8:	df 91       	pop	r29
    55fa:	cf 91       	pop	r28
    55fc:	08 95       	ret

000055fe <_ZN11EthernetUDP4peekEv>:

int EthernetUDP::peek()
{
    55fe:	cf 93       	push	r28
    5600:	df 93       	push	r29
    5602:	1f 92       	push	r1
    5604:	cd b7       	in	r28, 0x3d	; 61
    5606:	de b7       	in	r29, 0x3e	; 62
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
    5608:	fc 01       	movw	r30, r24
    560a:	21 8d       	ldd	r18, Z+25	; 0x19
    560c:	32 8d       	ldd	r19, Z+26	; 0x1a
    560e:	23 2b       	or	r18, r19
    5610:	41 f0       	breq	.+16     	; 0x5622 <_ZN11EthernetUDP4peekEv+0x24>
    return -1;
  ::peek(_sock, &b);
    5612:	be 01       	movw	r22, r28
    5614:	6f 5f       	subi	r22, 0xFF	; 255
    5616:	7f 4f       	sbci	r23, 0xFF	; 255
    5618:	84 85       	ldd	r24, Z+12	; 0x0c
    561a:	42 d2       	rcall	.+1156   	; 0x5aa0 <_Z4peekhPh>
  return b;
    561c:	89 81       	ldd	r24, Y+1	; 0x01
    561e:	90 e0       	ldi	r25, 0x00	; 0
    5620:	02 c0       	rjmp	.+4      	; 0x5626 <_ZN11EthernetUDP4peekEv+0x28>
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
    return -1;
    5622:	8f ef       	ldi	r24, 0xFF	; 255
    5624:	9f ef       	ldi	r25, 0xFF	; 255
  ::peek(_sock, &b);
  return b;
}
    5626:	0f 90       	pop	r0
    5628:	df 91       	pop	r29
    562a:	cf 91       	pop	r28
    562c:	08 95       	ret

0000562e <_ZN11EthernetUDP5beginEj>:

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
    562e:	ef 92       	push	r14
    5630:	ff 92       	push	r15
    5632:	1f 93       	push	r17
    5634:	cf 93       	push	r28
    5636:	df 93       	push	r29
  if (_sock != MAX_SOCK_NUM)
    5638:	fc 01       	movw	r30, r24
    563a:	24 85       	ldd	r18, Z+12	; 0x0c
    563c:	28 30       	cpi	r18, 0x08	; 8
    563e:	11 f0       	breq	.+4      	; 0x5644 <_ZN11EthernetUDP5beginEj+0x16>
    return 0;
    5640:	80 e0       	ldi	r24, 0x00	; 0
    5642:	20 c0       	rjmp	.+64     	; 0x5684 <_ZN11EthernetUDP5beginEj+0x56>
    5644:	7b 01       	movw	r14, r22
    5646:	ec 01       	movw	r28, r24
    5648:	10 e0       	ldi	r17, 0x00	; 0
    564a:	61 2f       	mov	r22, r17
    564c:	62 95       	swap	r22
    564e:	66 0f       	add	r22, r22
    5650:	60 7e       	andi	r22, 0xE0	; 224
    5652:	68 5f       	subi	r22, 0xF8	; 248
    5654:	83 e0       	ldi	r24, 0x03	; 3
    5656:	90 e0       	ldi	r25, 0x00	; 0
    5658:	1b d3       	rcall	.+1590   	; 0x5c90 <_ZN10W5500Class4readEjh>

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
    565a:	81 11       	cpse	r24, r1
    565c:	02 c0       	rjmp	.+4      	; 0x5662 <_ZN11EthernetUDP5beginEj+0x34>
      _sock = i;
    565e:	1c 87       	std	Y+12, r17	; 0x0c
    5660:	05 c0       	rjmp	.+10     	; 0x566c <_ZN11EthernetUDP5beginEj+0x3e>
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
    5662:	88 31       	cpi	r24, 0x18	; 24
    5664:	e1 f3       	breq	.-8      	; 0x565e <_ZN11EthernetUDP5beginEj+0x30>
    5666:	1f 5f       	subi	r17, 0xFF	; 255
/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    5668:	18 30       	cpi	r17, 0x08	; 8
    566a:	79 f7       	brne	.-34     	; 0x564a <_ZN11EthernetUDP5beginEj+0x1c>
      _sock = i;
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
    566c:	8c 85       	ldd	r24, Y+12	; 0x0c
    566e:	88 30       	cpi	r24, 0x08	; 8
    5670:	39 f3       	breq	.-50     	; 0x5640 <_ZN11EthernetUDP5beginEj+0x12>
    return 0;

  _port = port;
    5672:	fe 86       	std	Y+14, r15	; 0x0e
    5674:	ed 86       	std	Y+13, r14	; 0x0d
  _remaining = 0;
    5676:	1a 8e       	std	Y+26, r1	; 0x1a
    5678:	19 8e       	std	Y+25, r1	; 0x19
  socket(_sock, SnMR::UDP, _port, 0);
    567a:	20 e0       	ldi	r18, 0x00	; 0
    567c:	a7 01       	movw	r20, r14
    567e:	62 e0       	ldi	r22, 0x02	; 2
    5680:	1b d1       	rcall	.+566    	; 0x58b8 <_Z6sockethhjh>

  return 1;
    5682:	81 e0       	ldi	r24, 0x01	; 1
}
    5684:	df 91       	pop	r29
    5686:	cf 91       	pop	r28
    5688:	1f 91       	pop	r17
    568a:	ff 90       	pop	r15
    568c:	ef 90       	pop	r14
    568e:	08 95       	ret

00005690 <_ZN11EthernetUDP11parsePacketEv>:
  _offset += bytes_written;
  return bytes_written;
}

int EthernetUDP::parsePacket()
{
    5690:	0f 93       	push	r16
    5692:	1f 93       	push	r17
    5694:	cf 93       	push	r28
    5696:	df 93       	push	r29
    5698:	cd b7       	in	r28, 0x3d	; 61
    569a:	de b7       	in	r29, 0x3e	; 62
    569c:	28 97       	sbiw	r28, 0x08	; 8
    569e:	0f b6       	in	r0, 0x3f	; 63
    56a0:	f8 94       	cli
    56a2:	de bf       	out	0x3e, r29	; 62
    56a4:	0f be       	out	0x3f, r0	; 63
    56a6:	cd bf       	out	0x3d, r28	; 61
    56a8:	8c 01       	movw	r16, r24
  // discard any remaining bytes in the last packet
  flush();
    56aa:	dc 01       	movw	r26, r24
    56ac:	ed 91       	ld	r30, X+
    56ae:	fc 91       	ld	r31, X
    56b0:	06 80       	ldd	r0, Z+6	; 0x06
    56b2:	f7 81       	ldd	r31, Z+7	; 0x07
    56b4:	e0 2d       	mov	r30, r0
    56b6:	09 95       	icall

  if (w5500.getRXReceivedSize(_sock) > 0)
    56b8:	f8 01       	movw	r30, r16
    56ba:	64 85       	ldd	r22, Z+12	; 0x0c
    56bc:	87 e4       	ldi	r24, 0x47	; 71
    56be:	9c e0       	ldi	r25, 0x0C	; 12
    56c0:	77 d3       	rcall	.+1774   	; 0x5db0 <_ZN10W5500Class17getRXReceivedSizeEh>
    56c2:	89 2b       	or	r24, r25
    56c4:	39 f1       	breq	.+78     	; 0x5714 <_ZN11EthernetUDP11parsePacketEv+0x84>
  {
    //HACK - hand-parse the UDP packet using TCP recv method
    uint8_t tmpBuf[8];
    int ret =0; 
    //read 8 header bytes and get IP and port from it
    ret = recv(_sock,tmpBuf,8);
    56c6:	48 e0       	ldi	r20, 0x08	; 8
    56c8:	50 e0       	ldi	r21, 0x00	; 0
    56ca:	be 01       	movw	r22, r28
    56cc:	6f 5f       	subi	r22, 0xFF	; 255
    56ce:	7f 4f       	sbci	r23, 0xFF	; 255
    56d0:	d8 01       	movw	r26, r16
    56d2:	1c 96       	adiw	r26, 0x0c	; 12
    56d4:	8c 91       	ld	r24, X
    56d6:	a3 d1       	rcall	.+838    	; 0x5a1e <_Z4recvhPhi>
    if (ret > 0)
    56d8:	18 16       	cp	r1, r24
    56da:	19 06       	cpc	r1, r25
    56dc:	ec f4       	brge	.+58     	; 0x5718 <_ZN11EthernetUDP11parsePacketEv+0x88>
    {
      _remoteIP = tmpBuf;
    56de:	be 01       	movw	r22, r28
    56e0:	6f 5f       	subi	r22, 0xFF	; 255
    56e2:	7f 4f       	sbci	r23, 0xFF	; 255
    56e4:	c8 01       	movw	r24, r16
    56e6:	0f 96       	adiw	r24, 0x0f	; 15
    56e8:	0e 94 6a 38 	call	0x70d4	; 0x70d4 <_ZN9IPAddressaSEPKh>
      _remotePort = tmpBuf[4];
      _remotePort = (_remotePort << 8) + tmpBuf[5];
    56ec:	8d 81       	ldd	r24, Y+5	; 0x05
    56ee:	90 e0       	ldi	r25, 0x00	; 0
    56f0:	98 2f       	mov	r25, r24
    56f2:	88 27       	eor	r24, r24
    56f4:	2e 81       	ldd	r18, Y+6	; 0x06
    56f6:	82 0f       	add	r24, r18
    56f8:	91 1d       	adc	r25, r1
    56fa:	f8 01       	movw	r30, r16
    56fc:	96 8b       	std	Z+22, r25	; 0x16
    56fe:	85 8b       	std	Z+21, r24	; 0x15
      _remaining = tmpBuf[6];
      _remaining = (_remaining << 8) + tmpBuf[7];
    5700:	8f 81       	ldd	r24, Y+7	; 0x07
    5702:	90 e0       	ldi	r25, 0x00	; 0
    5704:	98 2f       	mov	r25, r24
    5706:	88 27       	eor	r24, r24
    5708:	28 85       	ldd	r18, Y+8	; 0x08
    570a:	82 0f       	add	r24, r18
    570c:	91 1d       	adc	r25, r1
    570e:	92 8f       	std	Z+26, r25	; 0x1a
    5710:	81 8f       	std	Z+25, r24	; 0x19
    5712:	02 c0       	rjmp	.+4      	; 0x5718 <_ZN11EthernetUDP11parsePacketEv+0x88>
      ret = _remaining;
    }
    return ret;
  }
  // There aren't any packets available
  return 0;
    5714:	80 e0       	ldi	r24, 0x00	; 0
    5716:	90 e0       	ldi	r25, 0x00	; 0
}
    5718:	28 96       	adiw	r28, 0x08	; 8
    571a:	0f b6       	in	r0, 0x3f	; 63
    571c:	f8 94       	cli
    571e:	de bf       	out	0x3e, r29	; 62
    5720:	0f be       	out	0x3f, r0	; 63
    5722:	cd bf       	out	0x3d, r28	; 61
    5724:	df 91       	pop	r29
    5726:	cf 91       	pop	r28
    5728:	1f 91       	pop	r17
    572a:	0f 91       	pop	r16
    572c:	08 95       	ret

0000572e <_ZN11EthernetUDPC1Ev>:
#include "Ethernet2.h"
#include "Udp.h"
#include "Dns.h"

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}
    572e:	fc 01       	movw	r30, r24
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    5730:	13 82       	std	Z+3, r1	; 0x03
    5732:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    5734:	88 ee       	ldi	r24, 0xE8	; 232
    5736:	93 e0       	ldi	r25, 0x03	; 3
    5738:	a0 e0       	ldi	r26, 0x00	; 0
    573a:	b0 e0       	ldi	r27, 0x00	; 0
    573c:	84 83       	std	Z+4, r24	; 0x04
    573e:	95 83       	std	Z+5, r25	; 0x05
    5740:	a6 83       	std	Z+6, r26	; 0x06
    5742:	b7 83       	std	Z+7, r27	; 0x07
    5744:	80 ef       	ldi	r24, 0xF0	; 240
    5746:	99 e0       	ldi	r25, 0x09	; 9
    5748:	91 83       	std	Z+1, r25	; 0x01
    574a:	80 83       	st	Z, r24
    574c:	88 e0       	ldi	r24, 0x08	; 8
    574e:	84 87       	std	Z+12, r24	; 0x0c
    5750:	cf 01       	movw	r24, r30
    5752:	0f 96       	adiw	r24, 0x0f	; 15
    5754:	0c 94 54 38 	jmp	0x70a8	; 0x70a8 <_ZN9IPAddressC1Ev>

00005758 <_ZN11EthernetUDP11beginPacketEPKcj>:
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

int EthernetUDP::beginPacket(const char *host, uint16_t port)
{
    5758:	cf 92       	push	r12
    575a:	df 92       	push	r13
    575c:	ef 92       	push	r14
    575e:	ff 92       	push	r15
    5760:	0f 93       	push	r16
    5762:	1f 93       	push	r17
    5764:	cf 93       	push	r28
    5766:	df 93       	push	r29
    5768:	cd b7       	in	r28, 0x3d	; 61
    576a:	de b7       	in	r29, 0x3e	; 62
    576c:	af 97       	sbiw	r28, 0x2f	; 47
    576e:	0f b6       	in	r0, 0x3f	; 63
    5770:	f8 94       	cli
    5772:	de bf       	out	0x3e, r29	; 62
    5774:	0f be       	out	0x3f, r0	; 63
    5776:	cd bf       	out	0x3d, r28	; 61
    5778:	8c 01       	movw	r16, r24
    577a:	6b 01       	movw	r12, r22
    577c:	7a 01       	movw	r14, r20
#ifndef DNSClient_h
#define DNSClient_h

#include <EthernetUdp2.h>

class DNSClient
    577e:	ce 01       	movw	r24, r28
    5780:	01 96       	adiw	r24, 0x01	; 1
    5782:	0e 94 54 38 	call	0x70a8	; 0x70a8 <_ZN9IPAddressC1Ev>
    5786:	ce 01       	movw	r24, r28
    5788:	09 96       	adiw	r24, 0x09	; 9
    578a:	d1 df       	rcall	.-94     	; 0x572e <_ZN11EthernetUDPC1Ev>
  // Look up the host first
  int ret = 0;
  DNSClient dns;
  IPAddress remote_addr;
    578c:	ce 01       	movw	r24, r28
    578e:	8a 96       	adiw	r24, 0x2a	; 42
    5790:	0e 94 54 38 	call	0x70a8	; 0x70a8 <_ZN9IPAddressC1Ev>

  dns.begin(Ethernet.dnsServerIP());
    5794:	6d e0       	ldi	r22, 0x0D	; 13
    5796:	7c e0       	ldi	r23, 0x0C	; 12
    5798:	ce 01       	movw	r24, r28
    579a:	84 96       	adiw	r24, 0x24	; 36
    579c:	63 dc       	rcall	.-1850   	; 0x5064 <_ZN13EthernetClass11dnsServerIPEv>
    579e:	be 01       	movw	r22, r28
    57a0:	6c 5d       	subi	r22, 0xDC	; 220
    57a2:	7f 4f       	sbci	r23, 0xFF	; 255
    57a4:	ce 01       	movw	r24, r28
    57a6:	01 96       	adiw	r24, 0x01	; 1
    57a8:	28 d9       	rcall	.-3504   	; 0x49fa <_ZN9DNSClient5beginERK9IPAddress>
  ret = dns.getHostByName(host, remote_addr);
    57aa:	ae 01       	movw	r20, r28
    57ac:	46 5d       	subi	r20, 0xD6	; 214
    57ae:	5f 4f       	sbci	r21, 0xFF	; 255
    57b0:	b6 01       	movw	r22, r12
    57b2:	ce 01       	movw	r24, r28
    57b4:	01 96       	adiw	r24, 0x01	; 1
    57b6:	7b db       	rcall	.-2314   	; 0x4eae <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>
  if (ret == 1) {
    57b8:	81 30       	cpi	r24, 0x01	; 1
    57ba:	91 05       	cpc	r25, r1
    57bc:	c1 f4       	brne	.+48     	; 0x57ee <_ZN11EthernetUDP11beginPacketEPKcj+0x96>
    return beginPacket(remote_addr, port);
    57be:	d8 01       	movw	r26, r16
    57c0:	ed 91       	ld	r30, X+
    57c2:	fc 91       	ld	r31, X
    57c4:	04 88       	ldd	r0, Z+20	; 0x14
    57c6:	f5 89       	ldd	r31, Z+21	; 0x15
    57c8:	e0 2d       	mov	r30, r0
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    57ca:	82 e5       	ldi	r24, 0x52	; 82
    57cc:	9a e0       	ldi	r25, 0x0A	; 10
    57ce:	9d a3       	std	Y+37, r25	; 0x25
    57d0:	8c a3       	std	Y+36, r24	; 0x24
    57d2:	8c a5       	ldd	r24, Y+44	; 0x2c
    57d4:	9d a5       	ldd	r25, Y+45	; 0x2d
    57d6:	ae a5       	ldd	r26, Y+46	; 0x2e
    57d8:	bf a5       	ldd	r27, Y+47	; 0x2f
    57da:	8e a3       	std	Y+38, r24	; 0x26
    57dc:	9f a3       	std	Y+39, r25	; 0x27
    57de:	a8 a7       	std	Y+40, r26	; 0x28
    57e0:	b9 a7       	std	Y+41, r27	; 0x29
    57e2:	a7 01       	movw	r20, r14
    57e4:	be 01       	movw	r22, r28
    57e6:	6c 5d       	subi	r22, 0xDC	; 220
    57e8:	7f 4f       	sbci	r23, 0xFF	; 255
    57ea:	c8 01       	movw	r24, r16
    57ec:	09 95       	icall
  } else {
    return ret;
  }
}
    57ee:	af 96       	adiw	r28, 0x2f	; 47
    57f0:	0f b6       	in	r0, 0x3f	; 63
    57f2:	f8 94       	cli
    57f4:	de bf       	out	0x3e, r29	; 62
    57f6:	0f be       	out	0x3f, r0	; 63
    57f8:	cd bf       	out	0x3d, r28	; 61
    57fa:	df 91       	pop	r29
    57fc:	cf 91       	pop	r28
    57fe:	1f 91       	pop	r17
    5800:	0f 91       	pop	r16
    5802:	ff 90       	pop	r15
    5804:	ef 90       	pop	r14
    5806:	df 90       	pop	r13
    5808:	cf 90       	pop	r12
    580a:	08 95       	ret

0000580c <_GLOBAL__sub_I__ZN11EthernetUDPC2Ev>:

  while (_remaining)
  {
    read();
  }
}
    580c:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    580e:	00 e0       	ldi	r16, 0x00	; 0
    5810:	20 e0       	ldi	r18, 0x00	; 0
    5812:	40 e0       	ldi	r20, 0x00	; 0
    5814:	60 e0       	ldi	r22, 0x00	; 0
    5816:	8c e3       	ldi	r24, 0x3C	; 60
    5818:	9c e0       	ldi	r25, 0x0C	; 12
    581a:	0e 94 5e 38 	call	0x70bc	; 0x70bc <_ZN9IPAddressC1Ehhhh>
    581e:	0f 91       	pop	r16
    5820:	08 95       	ret

00005822 <_ZN10W5500Class11writeSnDIPREhPh>:
    }
  }

  w5500.writeSnIR(s, SnIR::SEND_OK);
  return ret;
}
    5822:	ab 01       	movw	r20, r22
    5824:	82 95       	swap	r24
    5826:	88 0f       	add	r24, r24
    5828:	80 7e       	andi	r24, 0xE0	; 224
    582a:	6c e0       	ldi	r22, 0x0C	; 12
    582c:	68 0f       	add	r22, r24
    582e:	24 e0       	ldi	r18, 0x04	; 4
    5830:	30 e0       	ldi	r19, 0x00	; 0
    5832:	8c e0       	ldi	r24, 0x0C	; 12
    5834:	90 e0       	ldi	r25, 0x00	; 0
    5836:	00 c2       	rjmp	.+1024   	; 0x5c38 <_ZN10W5500Class5writeEjhPKhj>

00005838 <_ZN10W5500Class6readSnEhj>:
    5838:	9b 01       	movw	r18, r22
    583a:	82 95       	swap	r24
    583c:	88 0f       	add	r24, r24
    583e:	80 7e       	andi	r24, 0xE0	; 224
    5840:	68 e0       	ldi	r22, 0x08	; 8
    5842:	68 0f       	add	r22, r24
    5844:	c9 01       	movw	r24, r18
    5846:	24 c2       	rjmp	.+1096   	; 0x5c90 <_ZN10W5500Class4readEjh>

00005848 <_ZN10W5500Class8readSnIREh>:
    5848:	62 e0       	ldi	r22, 0x02	; 2
    584a:	70 e0       	ldi	r23, 0x00	; 0
    584c:	f5 cf       	rjmp	.-22     	; 0x5838 <_ZN10W5500Class6readSnEhj>

0000584e <_ZN10W5500Class7writeSnEhjh>:
    584e:	9b 01       	movw	r18, r22
    5850:	82 95       	swap	r24
    5852:	88 0f       	add	r24, r24
    5854:	80 7e       	andi	r24, 0xE0	; 224
    5856:	6c e0       	ldi	r22, 0x0C	; 12
    5858:	68 0f       	add	r22, r24
    585a:	c9 01       	movw	r24, r18
    585c:	cf c1       	rjmp	.+926    	; 0x5bfc <_ZN10W5500Class5writeEjhh>

0000585e <_ZN10W5500Class11writeSnPORTEhj>:
    585e:	cf 93       	push	r28
    5860:	df 93       	push	r29
    5862:	c8 2f       	mov	r28, r24
    5864:	d6 2f       	mov	r29, r22
    5866:	47 2f       	mov	r20, r23
    5868:	64 e0       	ldi	r22, 0x04	; 4
    586a:	70 e0       	ldi	r23, 0x00	; 0
    586c:	f0 df       	rcall	.-32     	; 0x584e <_ZN10W5500Class7writeSnEhjh>
    586e:	4d 2f       	mov	r20, r29
    5870:	65 e0       	ldi	r22, 0x05	; 5
    5872:	70 e0       	ldi	r23, 0x00	; 0
    5874:	8c 2f       	mov	r24, r28
    5876:	df 91       	pop	r29
    5878:	cf 91       	pop	r28
    587a:	e9 cf       	rjmp	.-46     	; 0x584e <_ZN10W5500Class7writeSnEhjh>

0000587c <_ZN10W5500Class9writeSnIREhh>:
    587c:	46 2f       	mov	r20, r22
    587e:	62 e0       	ldi	r22, 0x02	; 2
    5880:	70 e0       	ldi	r23, 0x00	; 0
    5882:	e5 cf       	rjmp	.-54     	; 0x584e <_ZN10W5500Class7writeSnEhjh>

00005884 <_ZN10W5500Class12writeSnDPORTEhj>:
    5884:	cf 93       	push	r28
    5886:	df 93       	push	r29
    5888:	c8 2f       	mov	r28, r24
    588a:	d6 2f       	mov	r29, r22
    588c:	47 2f       	mov	r20, r23
    588e:	60 e1       	ldi	r22, 0x10	; 16
    5890:	70 e0       	ldi	r23, 0x00	; 0
    5892:	dd df       	rcall	.-70     	; 0x584e <_ZN10W5500Class7writeSnEhjh>
    5894:	4d 2f       	mov	r20, r29
    5896:	61 e1       	ldi	r22, 0x11	; 17
    5898:	70 e0       	ldi	r23, 0x00	; 0
    589a:	8c 2f       	mov	r24, r28
    589c:	df 91       	pop	r29
    589e:	cf 91       	pop	r28
    58a0:	d6 cf       	rjmp	.-84     	; 0x584e <_ZN10W5500Class7writeSnEhjh>

000058a2 <_Z5closeh>:
    58a2:	cf 93       	push	r28
    58a4:	c8 2f       	mov	r28, r24
    58a6:	40 e1       	ldi	r20, 0x10	; 16
    58a8:	68 2f       	mov	r22, r24
    58aa:	87 e4       	ldi	r24, 0x47	; 71
    58ac:	9c e0       	ldi	r25, 0x0C	; 12
    58ae:	70 d3       	rcall	.+1760   	; 0x5f90 <_ZN10W5500Class9execCmdSnEh7SockCMD>
    58b0:	6f ef       	ldi	r22, 0xFF	; 255
    58b2:	8c 2f       	mov	r24, r28
    58b4:	cf 91       	pop	r28
    58b6:	e2 cf       	rjmp	.-60     	; 0x587c <_ZN10W5500Class9writeSnIREhh>

000058b8 <_Z6sockethhjh>:
    58b8:	ff 92       	push	r15
    58ba:	0f 93       	push	r16
    58bc:	1f 93       	push	r17
    58be:	cf 93       	push	r28
    58c0:	df 93       	push	r29
    58c2:	9f ef       	ldi	r25, 0xFF	; 255
    58c4:	96 0f       	add	r25, r22
    58c6:	95 30       	cpi	r25, 0x05	; 5
    58c8:	18 f5       	brcc	.+70     	; 0x5910 <_Z6sockethhjh+0x58>
    58ca:	d2 2f       	mov	r29, r18
    58cc:	8a 01       	movw	r16, r20
    58ce:	f6 2e       	mov	r15, r22
    58d0:	c8 2f       	mov	r28, r24
    58d2:	e7 df       	rcall	.-50     	; 0x58a2 <_Z5closeh>
    58d4:	4f 2d       	mov	r20, r15
    58d6:	4d 2b       	or	r20, r29
    58d8:	60 e0       	ldi	r22, 0x00	; 0
    58da:	70 e0       	ldi	r23, 0x00	; 0
    58dc:	8c 2f       	mov	r24, r28
    58de:	b7 df       	rcall	.-146    	; 0x584e <_ZN10W5500Class7writeSnEhjh>
    58e0:	01 15       	cp	r16, r1
    58e2:	11 05       	cpc	r17, r1
    58e4:	11 f0       	breq	.+4      	; 0x58ea <_Z6sockethhjh+0x32>
    58e6:	b8 01       	movw	r22, r16
    58e8:	0a c0       	rjmp	.+20     	; 0x58fe <_Z6sockethhjh+0x46>
    58ea:	60 91 42 0c 	lds	r22, 0x0C42	; 0x800c42 <_ZL10local_port>
    58ee:	70 91 43 0c 	lds	r23, 0x0C43	; 0x800c43 <_ZL10local_port+0x1>
    58f2:	6f 5f       	subi	r22, 0xFF	; 255
    58f4:	7f 4f       	sbci	r23, 0xFF	; 255
    58f6:	70 93 43 0c 	sts	0x0C43, r23	; 0x800c43 <_ZL10local_port+0x1>
    58fa:	60 93 42 0c 	sts	0x0C42, r22	; 0x800c42 <_ZL10local_port>
    58fe:	8c 2f       	mov	r24, r28
    5900:	ae df       	rcall	.-164    	; 0x585e <_ZN10W5500Class11writeSnPORTEhj>
    5902:	41 e0       	ldi	r20, 0x01	; 1
    5904:	6c 2f       	mov	r22, r28
    5906:	87 e4       	ldi	r24, 0x47	; 71
    5908:	9c e0       	ldi	r25, 0x0C	; 12
    590a:	42 d3       	rcall	.+1668   	; 0x5f90 <_ZN10W5500Class9execCmdSnEh7SockCMD>
    590c:	81 e0       	ldi	r24, 0x01	; 1
    590e:	01 c0       	rjmp	.+2      	; 0x5912 <_Z6sockethhjh+0x5a>
    5910:	80 e0       	ldi	r24, 0x00	; 0
    5912:	df 91       	pop	r29
    5914:	cf 91       	pop	r28
    5916:	1f 91       	pop	r17
    5918:	0f 91       	pop	r16
    591a:	ff 90       	pop	r15
    591c:	08 95       	ret

0000591e <_Z7connecthPhj>:
    591e:	0f 93       	push	r16
    5920:	1f 93       	push	r17
    5922:	cf 93       	push	r28
    5924:	fb 01       	movw	r30, r22
    5926:	90 81       	ld	r25, Z
    5928:	9f 3f       	cpi	r25, 0xFF	; 255
    592a:	51 f4       	brne	.+20     	; 0x5940 <_Z7connecthPhj+0x22>
    592c:	91 81       	ldd	r25, Z+1	; 0x01
    592e:	9f 3f       	cpi	r25, 0xFF	; 255
    5930:	91 f4       	brne	.+36     	; 0x5956 <_Z7connecthPhj+0x38>
    5932:	92 81       	ldd	r25, Z+2	; 0x02
    5934:	9f 3f       	cpi	r25, 0xFF	; 255
    5936:	79 f4       	brne	.+30     	; 0x5956 <_Z7connecthPhj+0x38>
    5938:	93 81       	ldd	r25, Z+3	; 0x03
    593a:	9f 3f       	cpi	r25, 0xFF	; 255
    593c:	61 f4       	brne	.+24     	; 0x5956 <_Z7connecthPhj+0x38>
    593e:	1c c0       	rjmp	.+56     	; 0x5978 <_Z7connecthPhj+0x5a>
    5940:	91 11       	cpse	r25, r1
    5942:	09 c0       	rjmp	.+18     	; 0x5956 <_Z7connecthPhj+0x38>
    5944:	91 81       	ldd	r25, Z+1	; 0x01
    5946:	91 11       	cpse	r25, r1
    5948:	06 c0       	rjmp	.+12     	; 0x5956 <_Z7connecthPhj+0x38>
    594a:	92 81       	ldd	r25, Z+2	; 0x02
    594c:	91 11       	cpse	r25, r1
    594e:	03 c0       	rjmp	.+6      	; 0x5956 <_Z7connecthPhj+0x38>
    5950:	93 81       	ldd	r25, Z+3	; 0x03
    5952:	99 23       	and	r25, r25
    5954:	91 f0       	breq	.+36     	; 0x597a <_Z7connecthPhj+0x5c>
    5956:	41 15       	cp	r20, r1
    5958:	51 05       	cpc	r21, r1
    595a:	71 f0       	breq	.+28     	; 0x5978 <_Z7connecthPhj+0x5a>
    595c:	8a 01       	movw	r16, r20
    595e:	bf 01       	movw	r22, r30
    5960:	c8 2f       	mov	r28, r24
    5962:	5f df       	rcall	.-322    	; 0x5822 <_ZN10W5500Class11writeSnDIPREhPh>
    5964:	b8 01       	movw	r22, r16
    5966:	8c 2f       	mov	r24, r28
    5968:	8d df       	rcall	.-230    	; 0x5884 <_ZN10W5500Class12writeSnDPORTEhj>
    596a:	44 e0       	ldi	r20, 0x04	; 4
    596c:	6c 2f       	mov	r22, r28
    596e:	87 e4       	ldi	r24, 0x47	; 71
    5970:	9c e0       	ldi	r25, 0x0C	; 12
    5972:	0e d3       	rcall	.+1564   	; 0x5f90 <_ZN10W5500Class9execCmdSnEh7SockCMD>
    5974:	91 e0       	ldi	r25, 0x01	; 1
    5976:	01 c0       	rjmp	.+2      	; 0x597a <_Z7connecthPhj+0x5c>
    5978:	90 e0       	ldi	r25, 0x00	; 0
    597a:	89 2f       	mov	r24, r25
    597c:	cf 91       	pop	r28
    597e:	1f 91       	pop	r17
    5980:	0f 91       	pop	r16
    5982:	08 95       	ret

00005984 <_Z10disconnecth>:
    5984:	48 e0       	ldi	r20, 0x08	; 8
    5986:	68 2f       	mov	r22, r24
    5988:	87 e4       	ldi	r24, 0x47	; 71
    598a:	9c e0       	ldi	r25, 0x0C	; 12
    598c:	01 c3       	rjmp	.+1538   	; 0x5f90 <_ZN10W5500Class9execCmdSnEh7SockCMD>

0000598e <_Z4sendhPKhj>:
    598e:	cf 92       	push	r12
    5990:	df 92       	push	r13
    5992:	ef 92       	push	r14
    5994:	ff 92       	push	r15
    5996:	0f 93       	push	r16
    5998:	1f 93       	push	r17
    599a:	cf 93       	push	r28
    599c:	c8 2f       	mov	r28, r24
    599e:	7b 01       	movw	r14, r22
    59a0:	8a 01       	movw	r16, r20
    59a2:	41 30       	cpi	r20, 0x01	; 1
    59a4:	58 40       	sbci	r21, 0x08	; 8
    59a6:	10 f0       	brcs	.+4      	; 0x59ac <_Z4sendhPKhj+0x1e>
    59a8:	00 e0       	ldi	r16, 0x00	; 0
    59aa:	18 e0       	ldi	r17, 0x08	; 8
    59ac:	6c 2f       	mov	r22, r28
    59ae:	87 e4       	ldi	r24, 0x47	; 71
    59b0:	9c e0       	ldi	r25, 0x0C	; 12
    59b2:	cd d1       	rcall	.+922    	; 0x5d4e <_ZN10W5500Class13getTXFreeSizeEh>
    59b4:	6c 01       	movw	r12, r24
    59b6:	63 e0       	ldi	r22, 0x03	; 3
    59b8:	70 e0       	ldi	r23, 0x00	; 0
    59ba:	8c 2f       	mov	r24, r28
    59bc:	3d df       	rcall	.-390    	; 0x5838 <_ZN10W5500Class6readSnEhj>
    59be:	87 31       	cpi	r24, 0x17	; 23
    59c0:	11 f0       	breq	.+4      	; 0x59c6 <_Z4sendhPKhj+0x38>
    59c2:	8c 31       	cpi	r24, 0x1C	; 28
    59c4:	21 f4       	brne	.+8      	; 0x59ce <_Z4sendhPKhj+0x40>
    59c6:	c0 16       	cp	r12, r16
    59c8:	d1 06       	cpc	r13, r17
    59ca:	80 f3       	brcs	.-32     	; 0x59ac <_Z4sendhPKhj+0x1e>
    59cc:	02 c0       	rjmp	.+4      	; 0x59d2 <_Z4sendhPKhj+0x44>
    59ce:	00 e0       	ldi	r16, 0x00	; 0
    59d0:	10 e0       	ldi	r17, 0x00	; 0
    59d2:	98 01       	movw	r18, r16
    59d4:	a7 01       	movw	r20, r14
    59d6:	6c 2f       	mov	r22, r28
    59d8:	87 e4       	ldi	r24, 0x47	; 71
    59da:	9c e0       	ldi	r25, 0x0C	; 12
    59dc:	3d d2       	rcall	.+1146   	; 0x5e58 <_ZN10W5500Class20send_data_processingEhPKhj>
    59de:	40 e2       	ldi	r20, 0x20	; 32
    59e0:	6c 2f       	mov	r22, r28
    59e2:	87 e4       	ldi	r24, 0x47	; 71
    59e4:	9c e0       	ldi	r25, 0x0C	; 12
    59e6:	d4 d2       	rcall	.+1448   	; 0x5f90 <_ZN10W5500Class9execCmdSnEh7SockCMD>
    59e8:	8c 2f       	mov	r24, r28
    59ea:	2e df       	rcall	.-420    	; 0x5848 <_ZN10W5500Class8readSnIREh>
    59ec:	84 fd       	sbrc	r24, 4
    59ee:	0b c0       	rjmp	.+22     	; 0x5a06 <_Z4sendhPKhj+0x78>
    59f0:	63 e0       	ldi	r22, 0x03	; 3
    59f2:	70 e0       	ldi	r23, 0x00	; 0
    59f4:	8c 2f       	mov	r24, r28
    59f6:	20 df       	rcall	.-448    	; 0x5838 <_ZN10W5500Class6readSnEhj>
    59f8:	81 11       	cpse	r24, r1
    59fa:	f6 cf       	rjmp	.-20     	; 0x59e8 <_Z4sendhPKhj+0x5a>
    59fc:	8c 2f       	mov	r24, r28
    59fe:	51 df       	rcall	.-350    	; 0x58a2 <_Z5closeh>
    5a00:	80 e0       	ldi	r24, 0x00	; 0
    5a02:	90 e0       	ldi	r25, 0x00	; 0
    5a04:	04 c0       	rjmp	.+8      	; 0x5a0e <_Z4sendhPKhj+0x80>
    5a06:	60 e1       	ldi	r22, 0x10	; 16
    5a08:	8c 2f       	mov	r24, r28
    5a0a:	38 df       	rcall	.-400    	; 0x587c <_ZN10W5500Class9writeSnIREhh>
    5a0c:	c8 01       	movw	r24, r16
    5a0e:	cf 91       	pop	r28
    5a10:	1f 91       	pop	r17
    5a12:	0f 91       	pop	r16
    5a14:	ff 90       	pop	r15
    5a16:	ef 90       	pop	r14
    5a18:	df 90       	pop	r13
    5a1a:	cf 90       	pop	r12
    5a1c:	08 95       	ret

00005a1e <_Z4recvhPhi>:
    5a1e:	cf 92       	push	r12
    5a20:	df 92       	push	r13
    5a22:	ef 92       	push	r14
    5a24:	ff 92       	push	r15
    5a26:	0f 93       	push	r16
    5a28:	1f 93       	push	r17
    5a2a:	cf 93       	push	r28
    5a2c:	df 93       	push	r29
    5a2e:	18 2f       	mov	r17, r24
    5a30:	6b 01       	movw	r12, r22
    5a32:	7a 01       	movw	r14, r20
    5a34:	68 2f       	mov	r22, r24
    5a36:	87 e4       	ldi	r24, 0x47	; 71
    5a38:	9c e0       	ldi	r25, 0x0C	; 12
    5a3a:	ba d1       	rcall	.+884    	; 0x5db0 <_ZN10W5500Class17getRXReceivedSizeEh>
    5a3c:	ec 01       	movw	r28, r24
    5a3e:	00 97       	sbiw	r24, 0x00	; 0
    5a40:	91 f4       	brne	.+36     	; 0x5a66 <_Z4recvhPhi+0x48>
    5a42:	63 e0       	ldi	r22, 0x03	; 3
    5a44:	70 e0       	ldi	r23, 0x00	; 0
    5a46:	81 2f       	mov	r24, r17
    5a48:	f7 de       	rcall	.-530    	; 0x5838 <_ZN10W5500Class6readSnEhj>
    5a4a:	84 31       	cpi	r24, 0x14	; 20
    5a4c:	f9 f0       	breq	.+62     	; 0x5a8c <_Z4recvhPhi+0x6e>
    5a4e:	88 23       	and	r24, r24
    5a50:	e9 f0       	breq	.+58     	; 0x5a8c <_Z4recvhPhi+0x6e>
    5a52:	c1 e0       	ldi	r28, 0x01	; 1
    5a54:	d0 e0       	ldi	r29, 0x00	; 0
    5a56:	8c 31       	cpi	r24, 0x1C	; 28
    5a58:	11 f4       	brne	.+4      	; 0x5a5e <_Z4recvhPhi+0x40>
    5a5a:	c0 e0       	ldi	r28, 0x00	; 0
    5a5c:	d0 e0       	ldi	r29, 0x00	; 0
    5a5e:	d1 95       	neg	r29
    5a60:	c1 95       	neg	r28
    5a62:	d1 09       	sbc	r29, r1
    5a64:	13 c0       	rjmp	.+38     	; 0x5a8c <_Z4recvhPhi+0x6e>
    5a66:	e8 16       	cp	r14, r24
    5a68:	f9 06       	cpc	r15, r25
    5a6a:	0c f4       	brge	.+2      	; 0x5a6e <_Z4recvhPhi+0x50>
    5a6c:	e7 01       	movw	r28, r14
    5a6e:	1c 16       	cp	r1, r28
    5a70:	1d 06       	cpc	r1, r29
    5a72:	64 f4       	brge	.+24     	; 0x5a8c <_Z4recvhPhi+0x6e>
    5a74:	00 e0       	ldi	r16, 0x00	; 0
    5a76:	9e 01       	movw	r18, r28
    5a78:	a6 01       	movw	r20, r12
    5a7a:	61 2f       	mov	r22, r17
    5a7c:	87 e4       	ldi	r24, 0x47	; 71
    5a7e:	9c e0       	ldi	r25, 0x0C	; 12
    5a80:	3a d2       	rcall	.+1140   	; 0x5ef6 <_ZN10W5500Class20recv_data_processingEhPhjh>
    5a82:	40 e4       	ldi	r20, 0x40	; 64
    5a84:	61 2f       	mov	r22, r17
    5a86:	87 e4       	ldi	r24, 0x47	; 71
    5a88:	9c e0       	ldi	r25, 0x0C	; 12
    5a8a:	82 d2       	rcall	.+1284   	; 0x5f90 <_ZN10W5500Class9execCmdSnEh7SockCMD>
    5a8c:	ce 01       	movw	r24, r28
    5a8e:	df 91       	pop	r29
    5a90:	cf 91       	pop	r28
    5a92:	1f 91       	pop	r17
    5a94:	0f 91       	pop	r16
    5a96:	ff 90       	pop	r15
    5a98:	ef 90       	pop	r14
    5a9a:	df 90       	pop	r13
    5a9c:	cf 90       	pop	r12
    5a9e:	08 95       	ret

00005aa0 <_Z4peekhPh>:
    5aa0:	0f 93       	push	r16
    5aa2:	ab 01       	movw	r20, r22
    5aa4:	01 e0       	ldi	r16, 0x01	; 1
    5aa6:	21 e0       	ldi	r18, 0x01	; 1
    5aa8:	30 e0       	ldi	r19, 0x00	; 0
    5aaa:	68 2f       	mov	r22, r24
    5aac:	87 e4       	ldi	r24, 0x47	; 71
    5aae:	9c e0       	ldi	r25, 0x0C	; 12
    5ab0:	22 d2       	rcall	.+1092   	; 0x5ef6 <_ZN10W5500Class20recv_data_processingEhPhjh>
    5ab2:	81 e0       	ldi	r24, 0x01	; 1
    5ab4:	90 e0       	ldi	r25, 0x00	; 0
    5ab6:	0f 91       	pop	r16
    5ab8:	08 95       	ret

00005aba <_Z5flushh>:
    5aba:	08 95       	ret

00005abc <_Z10bufferDatahjPKhj>:

uint16_t bufferData(SOCKET s, uint16_t offset, const uint8_t* buf, uint16_t len)
{
    5abc:	af 92       	push	r10
    5abe:	bf 92       	push	r11
    5ac0:	cf 92       	push	r12
    5ac2:	df 92       	push	r13
    5ac4:	ff 92       	push	r15
    5ac6:	0f 93       	push	r16
    5ac8:	1f 93       	push	r17
    5aca:	cf 93       	push	r28
    5acc:	df 93       	push	r29
    5ace:	f8 2e       	mov	r15, r24
    5ad0:	6b 01       	movw	r12, r22
    5ad2:	5a 01       	movw	r10, r20
    5ad4:	e9 01       	movw	r28, r18
  uint16_t ret =0;
  if (len > w5500.getTXFreeSize(s))
    5ad6:	68 2f       	mov	r22, r24
    5ad8:	87 e4       	ldi	r24, 0x47	; 71
    5ada:	9c e0       	ldi	r25, 0x0C	; 12
    5adc:	38 d1       	rcall	.+624    	; 0x5d4e <_ZN10W5500Class13getTXFreeSizeEh>
    5ade:	8c 17       	cp	r24, r28
    5ae0:	9d 07       	cpc	r25, r29
    5ae2:	28 f4       	brcc	.+10     	; 0x5aee <_Z10bufferDatahjPKhj+0x32>
  {
    ret = w5500.getTXFreeSize(s); // check size not to exceed MAX size.
    5ae4:	6f 2d       	mov	r22, r15
    5ae6:	87 e4       	ldi	r24, 0x47	; 71
    5ae8:	9c e0       	ldi	r25, 0x0C	; 12
    5aea:	31 d1       	rcall	.+610    	; 0x5d4e <_ZN10W5500Class13getTXFreeSizeEh>
    5aec:	ec 01       	movw	r28, r24
  }
  else
  {
    ret = len;
  }
  w5500.send_data_processing_offset(s, offset, buf, ret);
    5aee:	8e 01       	movw	r16, r28
    5af0:	95 01       	movw	r18, r10
    5af2:	a6 01       	movw	r20, r12
    5af4:	6f 2d       	mov	r22, r15
    5af6:	87 e4       	ldi	r24, 0x47	; 71
    5af8:	9c e0       	ldi	r25, 0x0C	; 12
    5afa:	74 d1       	rcall	.+744    	; 0x5de4 <_ZN10W5500Class27send_data_processing_offsetEhjPKhj>
  return ret;
}
    5afc:	ce 01       	movw	r24, r28
    5afe:	df 91       	pop	r29
    5b00:	cf 91       	pop	r28
    5b02:	1f 91       	pop	r17
    5b04:	0f 91       	pop	r16
    5b06:	ff 90       	pop	r15
    5b08:	df 90       	pop	r13
    5b0a:	cf 90       	pop	r12
    5b0c:	bf 90       	pop	r11
    5b0e:	af 90       	pop	r10
    5b10:	08 95       	ret

00005b12 <_Z8startUDPhPhj>:

int startUDP(SOCKET s, uint8_t* addr, uint16_t port)
{
    5b12:	0f 93       	push	r16
    5b14:	1f 93       	push	r17
    5b16:	cf 93       	push	r28
    5b18:	fb 01       	movw	r30, r22
  if
    5b1a:	90 81       	ld	r25, Z
    5b1c:	91 11       	cpse	r25, r1
    5b1e:	09 c0       	rjmp	.+18     	; 0x5b32 <_Z8startUDPhPhj+0x20>
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
    5b20:	91 81       	ldd	r25, Z+1	; 0x01
    5b22:	91 11       	cpse	r25, r1
    5b24:	06 c0       	rjmp	.+12     	; 0x5b32 <_Z8startUDPhPhj+0x20>
    5b26:	92 81       	ldd	r25, Z+2	; 0x02
    5b28:	91 11       	cpse	r25, r1
    5b2a:	03 c0       	rjmp	.+6      	; 0x5b32 <_Z8startUDPhPhj+0x20>
    5b2c:	93 81       	ldd	r25, Z+3	; 0x03
    5b2e:	99 23       	and	r25, r25
    5b30:	69 f0       	breq	.+26     	; 0x5b4c <_Z8startUDPhPhj+0x3a>
    5b32:	41 15       	cp	r20, r1
    5b34:	51 05       	cpc	r21, r1
    5b36:	51 f0       	breq	.+20     	; 0x5b4c <_Z8startUDPhPhj+0x3a>
    5b38:	8a 01       	movw	r16, r20
    5b3a:	bf 01       	movw	r22, r30
    5b3c:	c8 2f       	mov	r28, r24
  {
    return 0;
  }
  else
  {
    w5500.writeSnDIPR(s, addr);
    5b3e:	71 de       	rcall	.-798    	; 0x5822 <_ZN10W5500Class11writeSnDIPREhPh>
    w5500.writeSnDPORT(s, port);
    5b40:	b8 01       	movw	r22, r16
    5b42:	8c 2f       	mov	r24, r28
    5b44:	9f de       	rcall	.-706    	; 0x5884 <_ZN10W5500Class12writeSnDPORTEhj>
    return 1;
    5b46:	81 e0       	ldi	r24, 0x01	; 1
    5b48:	90 e0       	ldi	r25, 0x00	; 0
    5b4a:	02 c0       	rjmp	.+4      	; 0x5b50 <_Z8startUDPhPhj+0x3e>
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
     ((port == 0x00))
    ) 
  {
    return 0;
    5b4c:	80 e0       	ldi	r24, 0x00	; 0
    5b4e:	90 e0       	ldi	r25, 0x00	; 0
  {
    w5500.writeSnDIPR(s, addr);
    w5500.writeSnDPORT(s, port);
    return 1;
  }
}
    5b50:	cf 91       	pop	r28
    5b52:	1f 91       	pop	r17
    5b54:	0f 91       	pop	r16
    5b56:	08 95       	ret

00005b58 <_Z7sendUDPh>:

int sendUDP(SOCKET s)
{
    5b58:	cf 93       	push	r28
    5b5a:	c8 2f       	mov	r28, r24
  w5500.execCmdSn(s, Sock_SEND);
    5b5c:	40 e2       	ldi	r20, 0x20	; 32
    5b5e:	68 2f       	mov	r22, r24
    5b60:	87 e4       	ldi	r24, 0x47	; 71
    5b62:	9c e0       	ldi	r25, 0x0C	; 12
    5b64:	15 d2       	rcall	.+1066   	; 0x5f90 <_ZN10W5500Class9execCmdSnEh7SockCMD>
		
  /* +2008.01 bj */
  while ( (w5500.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
    5b66:	8c 2f       	mov	r24, r28
    5b68:	6f de       	rcall	.-802    	; 0x5848 <_ZN10W5500Class8readSnIREh>
    5b6a:	84 fd       	sbrc	r24, 4
    5b6c:	0a c0       	rjmp	.+20     	; 0x5b82 <_Z7sendUDPh+0x2a>
  {
    if (w5500.readSnIR(s) & SnIR::TIMEOUT)
    5b6e:	8c 2f       	mov	r24, r28
    5b70:	6b de       	rcall	.-810    	; 0x5848 <_ZN10W5500Class8readSnIREh>
    5b72:	83 ff       	sbrs	r24, 3
    5b74:	f8 cf       	rjmp	.-16     	; 0x5b66 <_Z7sendUDPh+0xe>
    {
      /* +2008.01 [bj]: clear interrupt */
      w5500.writeSnIR(s, (SnIR::SEND_OK|SnIR::TIMEOUT));
    5b76:	68 e1       	ldi	r22, 0x18	; 24
    5b78:	8c 2f       	mov	r24, r28
    5b7a:	80 de       	rcall	.-768    	; 0x587c <_ZN10W5500Class9writeSnIREhh>
    5b7c:	80 e0       	ldi	r24, 0x00	; 0
      return 0;
    5b7e:	90 e0       	ldi	r25, 0x00	; 0
    5b80:	05 c0       	rjmp	.+10     	; 0x5b8c <_Z7sendUDPh+0x34>
    }
  }

  /* +2008.01 bj */	
  w5500.writeSnIR(s, SnIR::SEND_OK);
    5b82:	60 e1       	ldi	r22, 0x10	; 16
    5b84:	8c 2f       	mov	r24, r28
    5b86:	7a de       	rcall	.-780    	; 0x587c <_ZN10W5500Class9writeSnIREhh>
    5b88:	81 e0       	ldi	r24, 0x01	; 1

  /* Sent ok */
  return 1;
    5b8a:	90 e0       	ldi	r25, 0x00	; 0
    5b8c:	cf 91       	pop	r28
}
    5b8e:	08 95       	ret

00005b90 <_ZN8SPIClass16beginTransactionE11SPISettings>:
    5b90:	20 91 4a 0c 	lds	r18, 0x0C4A	; 0x800c4a <_ZN8SPIClass13interruptModeE>
    uint8_t _data = SPI.transfer(0);
    resetSS();
    SPI.endTransaction();

    return _data;
}
    5b94:	22 23       	and	r18, r18
    5b96:	99 f0       	breq	.+38     	; 0x5bbe <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    5b98:	4f b7       	in	r20, 0x3f	; 63
    5b9a:	f8 94       	cli
    5b9c:	20 91 4a 0c 	lds	r18, 0x0C4A	; 0x800c4a <_ZN8SPIClass13interruptModeE>
    5ba0:	21 30       	cpi	r18, 0x01	; 1
    5ba2:	59 f4       	brne	.+22     	; 0x5bba <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
    5ba4:	2d b3       	in	r18, 0x1d	; 29
    5ba6:	20 93 48 0c 	sts	0x0C48, r18	; 0x800c48 <_ZN8SPIClass13interruptSaveE>
    5baa:	3d b3       	in	r19, 0x1d	; 29
    5bac:	20 91 49 0c 	lds	r18, 0x0C49	; 0x800c49 <_ZN8SPIClass13interruptMaskE>
    5bb0:	20 95       	com	r18
    5bb2:	23 23       	and	r18, r19
    5bb4:	2d bb       	out	0x1d, r18	; 29
    5bb6:	4f bf       	out	0x3f, r20	; 63
    5bb8:	02 c0       	rjmp	.+4      	; 0x5bbe <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    5bba:	40 93 48 0c 	sts	0x0C48, r20	; 0x800c48 <_ZN8SPIClass13interruptSaveE>
    5bbe:	8c bd       	out	0x2c, r24	; 44
    5bc0:	9d bd       	out	0x2d, r25	; 45
    5bc2:	08 95       	ret

00005bc4 <_ZN8SPIClass8transferEh>:
    5bc4:	8e bd       	out	0x2e, r24	; 46
    5bc6:	00 00       	nop
    5bc8:	0d b4       	in	r0, 0x2d	; 45
    5bca:	07 fe       	sbrs	r0, 7
    5bcc:	fd cf       	rjmp	.-6      	; 0x5bc8 <_ZN8SPIClass8transferEh+0x4>
    5bce:	8e b5       	in	r24, 0x2e	; 46
    5bd0:	08 95       	ret

00005bd2 <_ZN8SPIClass14endTransactionEv>:
    5bd2:	80 91 4a 0c 	lds	r24, 0x0C4A	; 0x800c4a <_ZN8SPIClass13interruptModeE>
    5bd6:	88 23       	and	r24, r24
    5bd8:	61 f0       	breq	.+24     	; 0x5bf2 <_ZN8SPIClass14endTransactionEv+0x20>
    5bda:	9f b7       	in	r25, 0x3f	; 63
    5bdc:	f8 94       	cli
    5bde:	20 91 4a 0c 	lds	r18, 0x0C4A	; 0x800c4a <_ZN8SPIClass13interruptModeE>
    5be2:	80 91 48 0c 	lds	r24, 0x0C48	; 0x800c48 <_ZN8SPIClass13interruptSaveE>
    5be6:	21 30       	cpi	r18, 0x01	; 1
    5be8:	19 f4       	brne	.+6      	; 0x5bf0 <_ZN8SPIClass14endTransactionEv+0x1e>
    5bea:	8d bb       	out	0x1d, r24	; 29
    5bec:	9f bf       	out	0x3f, r25	; 63
    5bee:	08 95       	ret
    5bf0:	8f bf       	out	0x3f, r24	; 63
    5bf2:	08 95       	ret

00005bf4 <_ZN10W5500Class5setSSEv>:
    5bf4:	44 98       	cbi	0x08, 4	; 8
    5bf6:	08 95       	ret

00005bf8 <_ZN10W5500Class7resetSSEv>:
    5bf8:	44 9a       	sbi	0x08, 4	; 8
    5bfa:	08 95       	ret

00005bfc <_ZN10W5500Class5writeEjhh>:
    5bfc:	0f 93       	push	r16
    5bfe:	1f 93       	push	r17
    5c00:	cf 93       	push	r28
    5c02:	df 93       	push	r29
    5c04:	18 2f       	mov	r17, r24
    5c06:	09 2f       	mov	r16, r25
    5c08:	d6 2f       	mov	r29, r22
    5c0a:	c4 2f       	mov	r28, r20
    5c0c:	80 91 45 0c 	lds	r24, 0x0C45	; 0x800c45 <wiznet_SPI_settings>
    5c10:	90 91 46 0c 	lds	r25, 0x0C46	; 0x800c46 <wiznet_SPI_settings+0x1>
    5c14:	bd df       	rcall	.-134    	; 0x5b90 <_ZN8SPIClass16beginTransactionE11SPISettings>
    5c16:	ee df       	rcall	.-36     	; 0x5bf4 <_ZN10W5500Class5setSSEv>
    5c18:	80 2f       	mov	r24, r16
    5c1a:	d4 df       	rcall	.-88     	; 0x5bc4 <_ZN8SPIClass8transferEh>
    5c1c:	81 2f       	mov	r24, r17
    5c1e:	d2 df       	rcall	.-92     	; 0x5bc4 <_ZN8SPIClass8transferEh>
    5c20:	8d 2f       	mov	r24, r29
    5c22:	d0 df       	rcall	.-96     	; 0x5bc4 <_ZN8SPIClass8transferEh>
    5c24:	8c 2f       	mov	r24, r28
    5c26:	ce df       	rcall	.-100    	; 0x5bc4 <_ZN8SPIClass8transferEh>
    5c28:	e7 df       	rcall	.-50     	; 0x5bf8 <_ZN10W5500Class7resetSSEv>
    5c2a:	d3 df       	rcall	.-90     	; 0x5bd2 <_ZN8SPIClass14endTransactionEv>
    5c2c:	81 e0       	ldi	r24, 0x01	; 1
    5c2e:	df 91       	pop	r29
    5c30:	cf 91       	pop	r28
    5c32:	1f 91       	pop	r17
    5c34:	0f 91       	pop	r16
    5c36:	08 95       	ret

00005c38 <_ZN10W5500Class5writeEjhPKhj>:
    5c38:	df 92       	push	r13
    5c3a:	ef 92       	push	r14
    5c3c:	ff 92       	push	r15
    5c3e:	0f 93       	push	r16
    5c40:	1f 93       	push	r17
    5c42:	cf 93       	push	r28
    5c44:	df 93       	push	r29
    5c46:	d8 2f       	mov	r29, r24
    5c48:	d9 2e       	mov	r13, r25
    5c4a:	c6 2f       	mov	r28, r22
    5c4c:	7a 01       	movw	r14, r20
    5c4e:	89 01       	movw	r16, r18
    5c50:	80 91 45 0c 	lds	r24, 0x0C45	; 0x800c45 <wiznet_SPI_settings>
    5c54:	90 91 46 0c 	lds	r25, 0x0C46	; 0x800c46 <wiznet_SPI_settings+0x1>
    5c58:	9b df       	rcall	.-202    	; 0x5b90 <_ZN8SPIClass16beginTransactionE11SPISettings>
    5c5a:	cc df       	rcall	.-104    	; 0x5bf4 <_ZN10W5500Class5setSSEv>
    5c5c:	8d 2d       	mov	r24, r13
    5c5e:	b2 df       	rcall	.-156    	; 0x5bc4 <_ZN8SPIClass8transferEh>
    5c60:	8d 2f       	mov	r24, r29
    5c62:	b0 df       	rcall	.-160    	; 0x5bc4 <_ZN8SPIClass8transferEh>
    5c64:	8c 2f       	mov	r24, r28
    5c66:	ae df       	rcall	.-164    	; 0x5bc4 <_ZN8SPIClass8transferEh>
    5c68:	e7 01       	movw	r28, r14
    5c6a:	e0 0e       	add	r14, r16
    5c6c:	f1 1e       	adc	r15, r17
    5c6e:	ce 15       	cp	r28, r14
    5c70:	df 05       	cpc	r29, r15
    5c72:	19 f0       	breq	.+6      	; 0x5c7a <_ZN10W5500Class5writeEjhPKhj+0x42>
    5c74:	89 91       	ld	r24, Y+
    5c76:	a6 df       	rcall	.-180    	; 0x5bc4 <_ZN8SPIClass8transferEh>
    5c78:	fa cf       	rjmp	.-12     	; 0x5c6e <_ZN10W5500Class5writeEjhPKhj+0x36>
    5c7a:	be df       	rcall	.-132    	; 0x5bf8 <_ZN10W5500Class7resetSSEv>
    5c7c:	aa df       	rcall	.-172    	; 0x5bd2 <_ZN8SPIClass14endTransactionEv>
    5c7e:	c8 01       	movw	r24, r16
    5c80:	df 91       	pop	r29
    5c82:	cf 91       	pop	r28
    5c84:	1f 91       	pop	r17
    5c86:	0f 91       	pop	r16
    5c88:	ff 90       	pop	r15
    5c8a:	ef 90       	pop	r14
    5c8c:	df 90       	pop	r13
    5c8e:	08 95       	ret

00005c90 <_ZN10W5500Class4readEjh>:
    5c90:	1f 93       	push	r17
    5c92:	cf 93       	push	r28
    5c94:	df 93       	push	r29
    5c96:	d8 2f       	mov	r29, r24
    5c98:	19 2f       	mov	r17, r25
    5c9a:	c6 2f       	mov	r28, r22
    5c9c:	80 91 45 0c 	lds	r24, 0x0C45	; 0x800c45 <wiznet_SPI_settings>
    5ca0:	90 91 46 0c 	lds	r25, 0x0C46	; 0x800c46 <wiznet_SPI_settings+0x1>
    5ca4:	75 df       	rcall	.-278    	; 0x5b90 <_ZN8SPIClass16beginTransactionE11SPISettings>
    5ca6:	a6 df       	rcall	.-180    	; 0x5bf4 <_ZN10W5500Class5setSSEv>
    5ca8:	81 2f       	mov	r24, r17
    5caa:	8c df       	rcall	.-232    	; 0x5bc4 <_ZN8SPIClass8transferEh>
    5cac:	8d 2f       	mov	r24, r29
    5cae:	8a df       	rcall	.-236    	; 0x5bc4 <_ZN8SPIClass8transferEh>
    5cb0:	8c 2f       	mov	r24, r28
    5cb2:	88 df       	rcall	.-240    	; 0x5bc4 <_ZN8SPIClass8transferEh>
    5cb4:	80 e0       	ldi	r24, 0x00	; 0
    5cb6:	86 df       	rcall	.-244    	; 0x5bc4 <_ZN8SPIClass8transferEh>
    5cb8:	c8 2f       	mov	r28, r24
    5cba:	9e df       	rcall	.-196    	; 0x5bf8 <_ZN10W5500Class7resetSSEv>
    5cbc:	8a df       	rcall	.-236    	; 0x5bd2 <_ZN8SPIClass14endTransactionEv>
    5cbe:	8c 2f       	mov	r24, r28
    5cc0:	df 91       	pop	r29
    5cc2:	cf 91       	pop	r28
    5cc4:	1f 91       	pop	r17
    5cc6:	08 95       	ret

00005cc8 <_ZN10W5500Class4initEh>:
    5cc8:	cf 93       	push	r28
    5cca:	df 93       	push	r29
    5ccc:	60 93 44 0c 	sts	0x0C44, r22	; 0x800c44 <SPI_CS>
    5cd0:	68 ee       	ldi	r22, 0xE8	; 232
    5cd2:	73 e0       	ldi	r23, 0x03	; 3
    5cd4:	80 e0       	ldi	r24, 0x00	; 0
    5cd6:	90 e0       	ldi	r25, 0x00	; 0
    5cd8:	0e 94 15 3a 	call	0x742a	; 0x742a <delay>
    5cdc:	3c 9a       	sbi	0x07, 4	; 7
    5cde:	10 d4       	rcall	.+2080   	; 0x6500 <_ZN8SPIClass5beginEv>
    5ce0:	60 e0       	ldi	r22, 0x00	; 0
    5ce2:	80 e0       	ldi	r24, 0x00	; 0
    5ce4:	90 e0       	ldi	r25, 0x00	; 0
    5ce6:	d4 df       	rcall	.-88     	; 0x5c90 <_ZN10W5500Class4readEjh>
    5ce8:	48 2f       	mov	r20, r24
    5cea:	40 68       	ori	r20, 0x80	; 128
    5cec:	64 e0       	ldi	r22, 0x04	; 4
    5cee:	80 e0       	ldi	r24, 0x00	; 0
    5cf0:	90 e0       	ldi	r25, 0x00	; 0
    5cf2:	84 df       	rcall	.-248    	; 0x5bfc <_ZN10W5500Class5writeEjhh>
    5cf4:	c0 e0       	ldi	r28, 0x00	; 0
    5cf6:	dc 2f       	mov	r29, r28
    5cf8:	d2 95       	swap	r29
    5cfa:	dd 0f       	add	r29, r29
    5cfc:	d0 7e       	andi	r29, 0xE0	; 224
    5cfe:	d4 5f       	subi	r29, 0xF4	; 244
    5d00:	42 e0       	ldi	r20, 0x02	; 2
    5d02:	6d 2f       	mov	r22, r29
    5d04:	8e e1       	ldi	r24, 0x1E	; 30
    5d06:	90 e0       	ldi	r25, 0x00	; 0
    5d08:	79 df       	rcall	.-270    	; 0x5bfc <_ZN10W5500Class5writeEjhh>
    5d0a:	42 e0       	ldi	r20, 0x02	; 2
    5d0c:	6d 2f       	mov	r22, r29
    5d0e:	8f e1       	ldi	r24, 0x1F	; 31
    5d10:	90 e0       	ldi	r25, 0x00	; 0
    5d12:	74 df       	rcall	.-280    	; 0x5bfc <_ZN10W5500Class5writeEjhh>
    5d14:	cf 5f       	subi	r28, 0xFF	; 255
    5d16:	c8 30       	cpi	r28, 0x08	; 8
    5d18:	71 f7       	brne	.-36     	; 0x5cf6 <_ZN10W5500Class4initEh+0x2e>
    5d1a:	df 91       	pop	r29
    5d1c:	cf 91       	pop	r28
    5d1e:	08 95       	ret

00005d20 <_ZN10W5500Class12readSnTX_FSREh>:
    5d20:	1f 93       	push	r17
    5d22:	cf 93       	push	r28
    5d24:	df 93       	push	r29
    5d26:	18 2f       	mov	r17, r24
    5d28:	60 e2       	ldi	r22, 0x20	; 32
    5d2a:	70 e0       	ldi	r23, 0x00	; 0
    5d2c:	85 dd       	rcall	.-1270   	; 0x5838 <_ZN10W5500Class6readSnEhj>
    5d2e:	c8 2f       	mov	r28, r24
    5d30:	d0 e0       	ldi	r29, 0x00	; 0
    5d32:	dc 2f       	mov	r29, r28
    5d34:	cc 27       	eor	r28, r28
    5d36:	61 e2       	ldi	r22, 0x21	; 33
    5d38:	70 e0       	ldi	r23, 0x00	; 0
    5d3a:	81 2f       	mov	r24, r17
    5d3c:	7d dd       	rcall	.-1286   	; 0x5838 <_ZN10W5500Class6readSnEhj>
    5d3e:	9e 01       	movw	r18, r28
    5d40:	28 0f       	add	r18, r24
    5d42:	31 1d       	adc	r19, r1
    5d44:	c9 01       	movw	r24, r18
    5d46:	df 91       	pop	r29
    5d48:	cf 91       	pop	r28
    5d4a:	1f 91       	pop	r17
    5d4c:	08 95       	ret

00005d4e <_ZN10W5500Class13getTXFreeSizeEh>:
    5d4e:	ff 92       	push	r15
    5d50:	0f 93       	push	r16
    5d52:	1f 93       	push	r17
    5d54:	cf 93       	push	r28
    5d56:	df 93       	push	r29
    5d58:	f6 2e       	mov	r15, r22
    5d5a:	c0 e0       	ldi	r28, 0x00	; 0
    5d5c:	d0 e0       	ldi	r29, 0x00	; 0
    5d5e:	8f 2d       	mov	r24, r15
    5d60:	df df       	rcall	.-66     	; 0x5d20 <_ZN10W5500Class12readSnTX_FSREh>
    5d62:	8c 01       	movw	r16, r24
    5d64:	89 2b       	or	r24, r25
    5d66:	19 f0       	breq	.+6      	; 0x5d6e <_ZN10W5500Class13getTXFreeSizeEh+0x20>
    5d68:	8f 2d       	mov	r24, r15
    5d6a:	da df       	rcall	.-76     	; 0x5d20 <_ZN10W5500Class12readSnTX_FSREh>
    5d6c:	ec 01       	movw	r28, r24
    5d6e:	c0 17       	cp	r28, r16
    5d70:	d1 07       	cpc	r29, r17
    5d72:	a9 f7       	brne	.-22     	; 0x5d5e <_ZN10W5500Class13getTXFreeSizeEh+0x10>
    5d74:	ce 01       	movw	r24, r28
    5d76:	df 91       	pop	r29
    5d78:	cf 91       	pop	r28
    5d7a:	1f 91       	pop	r17
    5d7c:	0f 91       	pop	r16
    5d7e:	ff 90       	pop	r15
    5d80:	08 95       	ret

00005d82 <_ZN10W5500Class12readSnRX_RSREh>:
    5d82:	1f 93       	push	r17
    5d84:	cf 93       	push	r28
    5d86:	df 93       	push	r29
    5d88:	18 2f       	mov	r17, r24
    5d8a:	66 e2       	ldi	r22, 0x26	; 38
    5d8c:	70 e0       	ldi	r23, 0x00	; 0
    5d8e:	54 dd       	rcall	.-1368   	; 0x5838 <_ZN10W5500Class6readSnEhj>
    5d90:	c8 2f       	mov	r28, r24
    5d92:	d0 e0       	ldi	r29, 0x00	; 0
    5d94:	dc 2f       	mov	r29, r28
    5d96:	cc 27       	eor	r28, r28
    5d98:	67 e2       	ldi	r22, 0x27	; 39
    5d9a:	70 e0       	ldi	r23, 0x00	; 0
    5d9c:	81 2f       	mov	r24, r17
    5d9e:	4c dd       	rcall	.-1384   	; 0x5838 <_ZN10W5500Class6readSnEhj>
    5da0:	9e 01       	movw	r18, r28
    5da2:	28 0f       	add	r18, r24
    5da4:	31 1d       	adc	r19, r1
    5da6:	c9 01       	movw	r24, r18
    5da8:	df 91       	pop	r29
    5daa:	cf 91       	pop	r28
    5dac:	1f 91       	pop	r17
    5dae:	08 95       	ret

00005db0 <_ZN10W5500Class17getRXReceivedSizeEh>:
    5db0:	ff 92       	push	r15
    5db2:	0f 93       	push	r16
    5db4:	1f 93       	push	r17
    5db6:	cf 93       	push	r28
    5db8:	df 93       	push	r29
    5dba:	f6 2e       	mov	r15, r22
    5dbc:	c0 e0       	ldi	r28, 0x00	; 0
    5dbe:	d0 e0       	ldi	r29, 0x00	; 0
    5dc0:	8f 2d       	mov	r24, r15
    5dc2:	df df       	rcall	.-66     	; 0x5d82 <_ZN10W5500Class12readSnRX_RSREh>
    5dc4:	8c 01       	movw	r16, r24
    5dc6:	89 2b       	or	r24, r25
    5dc8:	19 f0       	breq	.+6      	; 0x5dd0 <_ZN10W5500Class17getRXReceivedSizeEh+0x20>
    5dca:	8f 2d       	mov	r24, r15
    5dcc:	da df       	rcall	.-76     	; 0x5d82 <_ZN10W5500Class12readSnRX_RSREh>
    5dce:	ec 01       	movw	r28, r24
    5dd0:	c0 17       	cp	r28, r16
    5dd2:	d1 07       	cpc	r29, r17
    5dd4:	a9 f7       	brne	.-22     	; 0x5dc0 <_ZN10W5500Class17getRXReceivedSizeEh+0x10>
    5dd6:	ce 01       	movw	r24, r28
    5dd8:	df 91       	pop	r29
    5dda:	cf 91       	pop	r28
    5ddc:	1f 91       	pop	r17
    5dde:	0f 91       	pop	r16
    5de0:	ff 90       	pop	r15
    5de2:	08 95       	ret

00005de4 <_ZN10W5500Class27send_data_processing_offsetEhjPKhj>:
    5de4:	af 92       	push	r10
    5de6:	bf 92       	push	r11
    5de8:	df 92       	push	r13
    5dea:	ef 92       	push	r14
    5dec:	ff 92       	push	r15
    5dee:	0f 93       	push	r16
    5df0:	1f 93       	push	r17
    5df2:	cf 93       	push	r28
    5df4:	df 93       	push	r29
    5df6:	d6 2e       	mov	r13, r22
    5df8:	7a 01       	movw	r14, r20
    5dfa:	59 01       	movw	r10, r18
    5dfc:	64 e2       	ldi	r22, 0x24	; 36
    5dfe:	70 e0       	ldi	r23, 0x00	; 0
    5e00:	8d 2d       	mov	r24, r13
    5e02:	1a dd       	rcall	.-1484   	; 0x5838 <_ZN10W5500Class6readSnEhj>
    5e04:	c8 2f       	mov	r28, r24
    5e06:	65 e2       	ldi	r22, 0x25	; 37
    5e08:	70 e0       	ldi	r23, 0x00	; 0
    5e0a:	8d 2d       	mov	r24, r13
    5e0c:	15 dd       	rcall	.-1494   	; 0x5838 <_ZN10W5500Class6readSnEhj>
    5e0e:	d0 e0       	ldi	r29, 0x00	; 0
    5e10:	dc 2f       	mov	r29, r28
    5e12:	cc 27       	eor	r28, r28
    5e14:	e8 0e       	add	r14, r24
    5e16:	f1 1c       	adc	r15, r1
    5e18:	ce 0d       	add	r28, r14
    5e1a:	df 1d       	adc	r29, r15
    5e1c:	6d 2d       	mov	r22, r13
    5e1e:	62 95       	swap	r22
    5e20:	66 0f       	add	r22, r22
    5e22:	60 7e       	andi	r22, 0xE0	; 224
    5e24:	6c 5e       	subi	r22, 0xEC	; 236
    5e26:	98 01       	movw	r18, r16
    5e28:	a5 01       	movw	r20, r10
    5e2a:	ce 01       	movw	r24, r28
    5e2c:	05 df       	rcall	.-502    	; 0x5c38 <_ZN10W5500Class5writeEjhPKhj>
    5e2e:	c0 0f       	add	r28, r16
    5e30:	d1 1f       	adc	r29, r17
    5e32:	4d 2f       	mov	r20, r29
    5e34:	64 e2       	ldi	r22, 0x24	; 36
    5e36:	70 e0       	ldi	r23, 0x00	; 0
    5e38:	8d 2d       	mov	r24, r13
    5e3a:	09 dd       	rcall	.-1518   	; 0x584e <_ZN10W5500Class7writeSnEhjh>
    5e3c:	4c 2f       	mov	r20, r28
    5e3e:	65 e2       	ldi	r22, 0x25	; 37
    5e40:	70 e0       	ldi	r23, 0x00	; 0
    5e42:	8d 2d       	mov	r24, r13
    5e44:	df 91       	pop	r29
    5e46:	cf 91       	pop	r28
    5e48:	1f 91       	pop	r17
    5e4a:	0f 91       	pop	r16
    5e4c:	ff 90       	pop	r15
    5e4e:	ef 90       	pop	r14
    5e50:	df 90       	pop	r13
    5e52:	bf 90       	pop	r11
    5e54:	af 90       	pop	r10
    5e56:	fb cc       	rjmp	.-1546   	; 0x584e <_ZN10W5500Class7writeSnEhjh>

00005e58 <_ZN10W5500Class20send_data_processingEhPKhj>:
    5e58:	0f 93       	push	r16
    5e5a:	1f 93       	push	r17
    5e5c:	89 01       	movw	r16, r18
    5e5e:	9a 01       	movw	r18, r20
    5e60:	40 e0       	ldi	r20, 0x00	; 0
    5e62:	50 e0       	ldi	r21, 0x00	; 0
    5e64:	bf df       	rcall	.-130    	; 0x5de4 <_ZN10W5500Class27send_data_processing_offsetEhjPKhj>
    5e66:	1f 91       	pop	r17
    5e68:	0f 91       	pop	r16
    5e6a:	08 95       	ret

00005e6c <_ZN10W5500Class4readEjhPhj>:
    5e6c:	df 92       	push	r13
    5e6e:	ef 92       	push	r14
    5e70:	ff 92       	push	r15
    5e72:	0f 93       	push	r16
    5e74:	1f 93       	push	r17
    5e76:	cf 93       	push	r28
    5e78:	df 93       	push	r29
    5e7a:	d8 2f       	mov	r29, r24
    5e7c:	d9 2e       	mov	r13, r25
    5e7e:	c6 2f       	mov	r28, r22
    5e80:	7a 01       	movw	r14, r20
    5e82:	89 01       	movw	r16, r18
    5e84:	80 91 45 0c 	lds	r24, 0x0C45	; 0x800c45 <wiznet_SPI_settings>
    5e88:	90 91 46 0c 	lds	r25, 0x0C46	; 0x800c46 <wiznet_SPI_settings+0x1>
    5e8c:	81 de       	rcall	.-766    	; 0x5b90 <_ZN8SPIClass16beginTransactionE11SPISettings>
    5e8e:	b2 de       	rcall	.-668    	; 0x5bf4 <_ZN10W5500Class5setSSEv>
    5e90:	8d 2d       	mov	r24, r13
    5e92:	98 de       	rcall	.-720    	; 0x5bc4 <_ZN8SPIClass8transferEh>
    5e94:	8d 2f       	mov	r24, r29
    5e96:	96 de       	rcall	.-724    	; 0x5bc4 <_ZN8SPIClass8transferEh>
    5e98:	8c 2f       	mov	r24, r28
    5e9a:	94 de       	rcall	.-728    	; 0x5bc4 <_ZN8SPIClass8transferEh>
    5e9c:	e7 01       	movw	r28, r14
    5e9e:	e0 0e       	add	r14, r16
    5ea0:	f1 1e       	adc	r15, r17
    5ea2:	ce 15       	cp	r28, r14
    5ea4:	df 05       	cpc	r29, r15
    5ea6:	21 f0       	breq	.+8      	; 0x5eb0 <_ZN10W5500Class4readEjhPhj+0x44>
    5ea8:	80 e0       	ldi	r24, 0x00	; 0
    5eaa:	8c de       	rcall	.-744    	; 0x5bc4 <_ZN8SPIClass8transferEh>
    5eac:	89 93       	st	Y+, r24
    5eae:	f9 cf       	rjmp	.-14     	; 0x5ea2 <_ZN10W5500Class4readEjhPhj+0x36>
    5eb0:	a3 de       	rcall	.-698    	; 0x5bf8 <_ZN10W5500Class7resetSSEv>
    5eb2:	8f de       	rcall	.-738    	; 0x5bd2 <_ZN8SPIClass14endTransactionEv>
    5eb4:	c8 01       	movw	r24, r16
    5eb6:	df 91       	pop	r29
    5eb8:	cf 91       	pop	r28
    5eba:	1f 91       	pop	r17
    5ebc:	0f 91       	pop	r16
    5ebe:	ff 90       	pop	r15
    5ec0:	ef 90       	pop	r14
    5ec2:	df 90       	pop	r13
    5ec4:	08 95       	ret

00005ec6 <_ZN10W5500Class9read_dataEhjPVhj>:
    5ec6:	0f 93       	push	r16
    5ec8:	1f 93       	push	r17
    5eca:	cf 93       	push	r28
    5ecc:	df 93       	push	r29
    5ece:	00 d0       	rcall	.+0      	; 0x5ed0 <_ZN10W5500Class9read_dataEhjPVhj+0xa>
    5ed0:	cd b7       	in	r28, 0x3d	; 61
    5ed2:	de b7       	in	r29, 0x3e	; 62
    5ed4:	5a 83       	std	Y+2, r21	; 0x02
    5ed6:	49 83       	std	Y+1, r20	; 0x01
    5ed8:	a9 01       	movw	r20, r18
    5eda:	98 01       	movw	r18, r16
    5edc:	89 81       	ldd	r24, Y+1	; 0x01
    5ede:	9a 81       	ldd	r25, Y+2	; 0x02
    5ee0:	62 95       	swap	r22
    5ee2:	66 0f       	add	r22, r22
    5ee4:	60 7e       	andi	r22, 0xE0	; 224
    5ee6:	68 5e       	subi	r22, 0xE8	; 232
    5ee8:	0f 90       	pop	r0
    5eea:	0f 90       	pop	r0
    5eec:	df 91       	pop	r29
    5eee:	cf 91       	pop	r28
    5ef0:	1f 91       	pop	r17
    5ef2:	0f 91       	pop	r16
    5ef4:	bb cf       	rjmp	.-138    	; 0x5e6c <_ZN10W5500Class4readEjhPhj>

00005ef6 <_ZN10W5500Class20recv_data_processingEhPhjh>:
    5ef6:	8f 92       	push	r8
    5ef8:	9f 92       	push	r9
    5efa:	af 92       	push	r10
    5efc:	bf 92       	push	r11
    5efe:	cf 92       	push	r12
    5f00:	df 92       	push	r13
    5f02:	ef 92       	push	r14
    5f04:	ff 92       	push	r15
    5f06:	0f 93       	push	r16
    5f08:	1f 93       	push	r17
    5f0a:	cf 93       	push	r28
    5f0c:	df 93       	push	r29
    5f0e:	6c 01       	movw	r12, r24
    5f10:	96 2e       	mov	r9, r22
    5f12:	5a 01       	movw	r10, r20
    5f14:	79 01       	movw	r14, r18
    5f16:	80 2e       	mov	r8, r16
    5f18:	68 e2       	ldi	r22, 0x28	; 40
    5f1a:	70 e0       	ldi	r23, 0x00	; 0
    5f1c:	89 2d       	mov	r24, r9
    5f1e:	8c dc       	rcall	.-1768   	; 0x5838 <_ZN10W5500Class6readSnEhj>
    5f20:	08 2f       	mov	r16, r24
    5f22:	69 e2       	ldi	r22, 0x29	; 41
    5f24:	70 e0       	ldi	r23, 0x00	; 0
    5f26:	89 2d       	mov	r24, r9
    5f28:	87 dc       	rcall	.-1778   	; 0x5838 <_ZN10W5500Class6readSnEhj>
    5f2a:	10 e0       	ldi	r17, 0x00	; 0
    5f2c:	10 2f       	mov	r17, r16
    5f2e:	00 27       	eor	r16, r16
    5f30:	e8 01       	movw	r28, r16
    5f32:	c8 0f       	add	r28, r24
    5f34:	d1 1d       	adc	r29, r1
    5f36:	87 01       	movw	r16, r14
    5f38:	95 01       	movw	r18, r10
    5f3a:	ae 01       	movw	r20, r28
    5f3c:	69 2d       	mov	r22, r9
    5f3e:	c6 01       	movw	r24, r12
    5f40:	c2 df       	rcall	.-124    	; 0x5ec6 <_ZN10W5500Class9read_dataEhjPVhj>
    5f42:	81 10       	cpse	r8, r1
    5f44:	18 c0       	rjmp	.+48     	; 0x5f76 <_ZN10W5500Class20recv_data_processingEhPhjh+0x80>
    5f46:	0c 0f       	add	r16, r28
    5f48:	1d 1f       	adc	r17, r29
    5f4a:	41 2f       	mov	r20, r17
    5f4c:	68 e2       	ldi	r22, 0x28	; 40
    5f4e:	70 e0       	ldi	r23, 0x00	; 0
    5f50:	89 2d       	mov	r24, r9
    5f52:	7d dc       	rcall	.-1798   	; 0x584e <_ZN10W5500Class7writeSnEhjh>
    5f54:	40 2f       	mov	r20, r16
    5f56:	69 e2       	ldi	r22, 0x29	; 41
    5f58:	70 e0       	ldi	r23, 0x00	; 0
    5f5a:	89 2d       	mov	r24, r9
    5f5c:	df 91       	pop	r29
    5f5e:	cf 91       	pop	r28
    5f60:	1f 91       	pop	r17
    5f62:	0f 91       	pop	r16
    5f64:	ff 90       	pop	r15
    5f66:	ef 90       	pop	r14
    5f68:	df 90       	pop	r13
    5f6a:	cf 90       	pop	r12
    5f6c:	bf 90       	pop	r11
    5f6e:	af 90       	pop	r10
    5f70:	9f 90       	pop	r9
    5f72:	8f 90       	pop	r8
    5f74:	6c cc       	rjmp	.-1832   	; 0x584e <_ZN10W5500Class7writeSnEhjh>
    5f76:	df 91       	pop	r29
    5f78:	cf 91       	pop	r28
    5f7a:	1f 91       	pop	r17
    5f7c:	0f 91       	pop	r16
    5f7e:	ff 90       	pop	r15
    5f80:	ef 90       	pop	r14
    5f82:	df 90       	pop	r13
    5f84:	cf 90       	pop	r12
    5f86:	bf 90       	pop	r11
    5f88:	af 90       	pop	r10
    5f8a:	9f 90       	pop	r9
    5f8c:	8f 90       	pop	r8
    5f8e:	08 95       	ret

00005f90 <_ZN10W5500Class9execCmdSnEh7SockCMD>:
    5f90:	cf 93       	push	r28
    5f92:	c6 2f       	mov	r28, r22
    5f94:	61 e0       	ldi	r22, 0x01	; 1
    5f96:	70 e0       	ldi	r23, 0x00	; 0
    5f98:	8c 2f       	mov	r24, r28
    5f9a:	59 dc       	rcall	.-1870   	; 0x584e <_ZN10W5500Class7writeSnEhjh>
    5f9c:	61 e0       	ldi	r22, 0x01	; 1
    5f9e:	70 e0       	ldi	r23, 0x00	; 0
    5fa0:	8c 2f       	mov	r24, r28
    5fa2:	4a dc       	rcall	.-1900   	; 0x5838 <_ZN10W5500Class6readSnEhj>
    5fa4:	81 11       	cpse	r24, r1
    5fa6:	fa cf       	rjmp	.-12     	; 0x5f9c <_ZN10W5500Class9execCmdSnEh7SockCMD+0xc>
    5fa8:	cf 91       	pop	r28
    5faa:	08 95       	ret

00005fac <_GLOBAL__sub_I_w5500>:
    // Invert the SPI2X bit
    clockDiv ^= 0x1;

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    5fac:	e5 e4       	ldi	r30, 0x45	; 69
    5fae:	fc e0       	ldi	r31, 0x0C	; 12
    5fb0:	80 e5       	ldi	r24, 0x50	; 80
    5fb2:	80 83       	st	Z, r24
    spsr = clockDiv & SPI_2XCLOCK_MASK;
    5fb4:	81 e0       	ldi	r24, 0x01	; 1
    5fb6:	81 83       	std	Z+1, r24	; 0x01
    5fb8:	08 95       	ret

00005fba <_ZN5I2CIOC1Ev>:
      // Remove the values which are not inputs and get the value of the pin
      pinVal = this->read() & _dirMask;
      pinVal = ( pinVal >> pin ) & 0x01; // Get the pin value
   }
   return (pinVal);
}
    5fba:	fc 01       	movw	r30, r24
    5fbc:	12 82       	std	Z+2, r1	; 0x02
    5fbe:	8f ef       	ldi	r24, 0xFF	; 255
    5fc0:	81 83       	std	Z+1, r24	; 0x01
    5fc2:	10 82       	st	Z, r1
    5fc4:	13 82       	std	Z+3, r1	; 0x03
    5fc6:	08 95       	ret

00005fc8 <_ZN5I2CIO8portModeEh>:
    5fc8:	fc 01       	movw	r30, r24
    5fca:	83 81       	ldd	r24, Z+3	; 0x03
    5fcc:	88 23       	and	r24, r24
    5fce:	31 f0       	breq	.+12     	; 0x5fdc <_ZN5I2CIO8portModeEh+0x14>
    5fd0:	61 11       	cpse	r22, r1
    5fd2:	03 c0       	rjmp	.+6      	; 0x5fda <_ZN5I2CIO8portModeEh+0x12>
    5fd4:	8f ef       	ldi	r24, 0xFF	; 255
    5fd6:	81 83       	std	Z+1, r24	; 0x01
    5fd8:	08 95       	ret
    5fda:	11 82       	std	Z+1, r1	; 0x01
    5fdc:	08 95       	ret

00005fde <_ZN5I2CIO11isAvailableEh>:
    5fde:	8a eb       	ldi	r24, 0xBA	; 186
    5fe0:	9c e0       	ldi	r25, 0x0C	; 12
    5fe2:	f0 d5       	rcall	.+3040   	; 0x6bc4 <_ZN7TwoWire17beginTransmissionEh>
    5fe4:	8a eb       	ldi	r24, 0xBA	; 186
    5fe6:	9c e0       	ldi	r25, 0x0C	; 12
    5fe8:	6e d6       	rcall	.+3292   	; 0x6cc6 <_ZN7TwoWire15endTransmissionEv>
    5fea:	91 e0       	ldi	r25, 0x01	; 1
    5fec:	81 11       	cpse	r24, r1
    5fee:	90 e0       	ldi	r25, 0x00	; 0
    5ff0:	89 2f       	mov	r24, r25
    5ff2:	08 95       	ret

00005ff4 <_ZN5I2CIO5beginEh>:
    5ff4:	cf 93       	push	r28
    5ff6:	df 93       	push	r29
    5ff8:	ec 01       	movw	r28, r24
    5ffa:	6a 83       	std	Y+2, r22	; 0x02
    5ffc:	8a eb       	ldi	r24, 0xBA	; 186
    5ffe:	9c e0       	ldi	r25, 0x0C	; 12
    6000:	ce d5       	rcall	.+2972   	; 0x6b9e <_ZN7TwoWire5beginEv>
    6002:	6a 81       	ldd	r22, Y+2	; 0x02
    6004:	ce 01       	movw	r24, r28
    6006:	eb df       	rcall	.-42     	; 0x5fde <_ZN5I2CIO11isAvailableEh>
    6008:	8b 83       	std	Y+3, r24	; 0x03
    600a:	88 23       	and	r24, r24
    600c:	21 f0       	breq	.+8      	; 0x6016 <_ZN5I2CIO5beginEh+0x22>
    600e:	8a eb       	ldi	r24, 0xBA	; 186
    6010:	9c e0       	ldi	r25, 0x0C	; 12
    6012:	01 d5       	rcall	.+2562   	; 0x6a16 <_ZN7TwoWire4readEv>
    6014:	88 83       	st	Y, r24
    6016:	8b 81       	ldd	r24, Y+3	; 0x03
    6018:	90 e0       	ldi	r25, 0x00	; 0
    601a:	df 91       	pop	r29
    601c:	cf 91       	pop	r28
    601e:	08 95       	ret

00006020 <_ZN5I2CIO5writeEh>:
}

//
// write
int I2CIO::write ( uint8_t value )
{
    6020:	cf 93       	push	r28
    6022:	df 93       	push	r29
   int status = 0;
   
   if ( _initialised )
    6024:	fc 01       	movw	r30, r24
    6026:	23 81       	ldd	r18, Z+3	; 0x03
    6028:	22 23       	and	r18, r18
    602a:	99 f0       	breq	.+38     	; 0x6052 <_ZN5I2CIO5writeEh+0x32>
    602c:	ec 01       	movw	r28, r24
   {
      // Only write HIGH the values of the ports that have been initialised as
      // outputs updating the output shadow of the device
      _shadow = ( value & ~(_dirMask) );
    602e:	81 81       	ldd	r24, Z+1	; 0x01
    6030:	80 95       	com	r24
    6032:	68 23       	and	r22, r24
    6034:	60 83       	st	Z, r22
   
      Wire.beginTransmission ( _i2cAddr );
    6036:	62 81       	ldd	r22, Z+2	; 0x02
    6038:	8a eb       	ldi	r24, 0xBA	; 186
    603a:	9c e0       	ldi	r25, 0x0C	; 12
    603c:	c3 d5       	rcall	.+2950   	; 0x6bc4 <_ZN7TwoWire17beginTransmissionEh>
#if (ARDUINO <  100)
      Wire.send ( _shadow );
#else
      Wire.write ( _shadow );
    603e:	68 81       	ld	r22, Y
    6040:	8a eb       	ldi	r24, 0xBA	; 186
    6042:	9c e0       	ldi	r25, 0x0C	; 12
    6044:	6e d5       	rcall	.+2780   	; 0x6b22 <_ZN7TwoWire5writeEh>
#endif  
      status = Wire.endTransmission ();
    6046:	8a eb       	ldi	r24, 0xBA	; 186
    6048:	9c e0       	ldi	r25, 0x0C	; 12
    604a:	3d d6       	rcall	.+3194   	; 0x6cc6 <_ZN7TwoWire15endTransmissionEv>
    604c:	28 2f       	mov	r18, r24
    604e:	30 e0       	ldi	r19, 0x00	; 0
    6050:	02 c0       	rjmp	.+4      	; 0x6056 <_ZN5I2CIO5writeEh+0x36>

//
// write
int I2CIO::write ( uint8_t value )
{
   int status = 0;
    6052:	20 e0       	ldi	r18, 0x00	; 0
    6054:	30 e0       	ldi	r19, 0x00	; 0
#else
      Wire.write ( _shadow );
#endif  
      status = Wire.endTransmission ();
   }
   return ( (status == 0) );
    6056:	81 e0       	ldi	r24, 0x01	; 1
    6058:	90 e0       	ldi	r25, 0x00	; 0
    605a:	23 2b       	or	r18, r19
    605c:	11 f0       	breq	.+4      	; 0x6062 <_ZN5I2CIO5writeEh+0x42>
    605e:	80 e0       	ldi	r24, 0x00	; 0
    6060:	90 e0       	ldi	r25, 0x00	; 0
}
    6062:	df 91       	pop	r29
    6064:	cf 91       	pop	r28
    6066:	08 95       	ret

00006068 <_ZN3LCD15setBacklightPinEh13t_backlighPol>:

// This will 'left justify' text from the cursor
void LCD::noAutoscroll(void) 
{
   _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
   command(LCD_ENTRYMODESET | _displaymode);
    6068:	08 95       	ret

0000606a <_ZN3LCD12setBacklightEh>:
    606a:	08 95       	ret

0000606c <_ZN3LCD5writeEh>:
    606c:	dc 01       	movw	r26, r24
    606e:	ed 91       	ld	r30, X+
    6070:	fc 91       	ld	r31, X
    6072:	06 84       	ldd	r0, Z+14	; 0x0e
    6074:	f7 85       	ldd	r31, Z+15	; 0x0f
    6076:	e0 2d       	mov	r30, r0
    6078:	41 e0       	ldi	r20, 0x01	; 1
    607a:	09 95       	icall
    607c:	81 e0       	ldi	r24, 0x01	; 1
    607e:	90 e0       	ldi	r25, 0x00	; 0
    6080:	08 95       	ret

00006082 <_ZN3LCDC1Ev>:
    6082:	fc 01       	movw	r30, r24
    6084:	13 82       	std	Z+3, r1	; 0x03
    6086:	12 82       	std	Z+2, r1	; 0x02
    6088:	28 e1       	ldi	r18, 0x18	; 24
    608a:	3a e0       	ldi	r19, 0x0A	; 10
    608c:	31 83       	std	Z+1, r19	; 0x01
    608e:	20 83       	st	Z, r18
    6090:	08 95       	ret

00006092 <_ZN3LCD9backlightEv>:
    6092:	dc 01       	movw	r26, r24
    6094:	ed 91       	ld	r30, X+
    6096:	fc 91       	ld	r31, X
    6098:	04 84       	ldd	r0, Z+12	; 0x0c
    609a:	f5 85       	ldd	r31, Z+13	; 0x0d
    609c:	e0 2d       	mov	r30, r0
    609e:	6f ef       	ldi	r22, 0xFF	; 255
    60a0:	09 94       	ijmp

000060a2 <_ZN3LCD11noBacklightEv>:
    60a2:	dc 01       	movw	r26, r24
    60a4:	ed 91       	ld	r30, X+
    60a6:	fc 91       	ld	r31, X
    60a8:	04 84       	ldd	r0, Z+12	; 0x0c
    60aa:	f5 85       	ldd	r31, Z+13	; 0x0d
    60ac:	e0 2d       	mov	r30, r0
    60ae:	60 e0       	ldi	r22, 0x00	; 0
    60b0:	09 94       	ijmp

000060b2 <_ZN3LCD7commandEh>:
    60b2:	dc 01       	movw	r26, r24
    60b4:	ed 91       	ld	r30, X+
    60b6:	fc 91       	ld	r31, X
    60b8:	06 84       	ldd	r0, Z+14	; 0x0e
    60ba:	f7 85       	ldd	r31, Z+15	; 0x0f
    60bc:	e0 2d       	mov	r30, r0
    60be:	40 e0       	ldi	r20, 0x00	; 0
    60c0:	09 94       	ijmp

000060c2 <_ZN3LCD5clearEv>:
    60c2:	61 e0       	ldi	r22, 0x01	; 1
    60c4:	f6 df       	rcall	.-20     	; 0x60b2 <_ZN3LCD7commandEh>
    60c6:	80 ed       	ldi	r24, 0xD0	; 208
    60c8:	97 e0       	ldi	r25, 0x07	; 7
    60ca:	0c 94 4e 3a 	jmp	0x749c	; 0x749c <delayMicroseconds>

000060ce <_ZN3LCD9setCursorEhh>:
    60ce:	cf 93       	push	r28
    60d0:	df 93       	push	r29
    60d2:	cd b7       	in	r28, 0x3d	; 61
    60d4:	de b7       	in	r29, 0x3e	; 62
    60d6:	28 97       	sbiw	r28, 0x08	; 8
    60d8:	0f b6       	in	r0, 0x3f	; 63
    60da:	f8 94       	cli
    60dc:	de bf       	out	0x3e, r29	; 62
    60de:	0f be       	out	0x3f, r0	; 63
    60e0:	cd bf       	out	0x3d, r28	; 61
    60e2:	fc 01       	movw	r30, r24
    60e4:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <_ZN14EthernetClient8_srcportE+0x7a>
    60e8:	90 91 e0 01 	lds	r25, 0x01E0	; 0x8001e0 <_ZN14EthernetClient8_srcportE+0x7b>
    60ec:	a0 91 e1 01 	lds	r26, 0x01E1	; 0x8001e1 <_ZN14EthernetClient8_srcportE+0x7c>
    60f0:	b0 91 e2 01 	lds	r27, 0x01E2	; 0x8001e2 <_ZN14EthernetClient8_srcportE+0x7d>
    60f4:	8d 83       	std	Y+5, r24	; 0x05
    60f6:	9e 83       	std	Y+6, r25	; 0x06
    60f8:	af 83       	std	Y+7, r26	; 0x07
    60fa:	b8 87       	std	Y+8, r27	; 0x08
    60fc:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <_ZN14EthernetClient8_srcportE+0x7e>
    6100:	90 91 e4 01 	lds	r25, 0x01E4	; 0x8001e4 <_ZN14EthernetClient8_srcportE+0x7f>
    6104:	a0 91 e5 01 	lds	r26, 0x01E5	; 0x8001e5 <_ZN14EthernetClient8_srcportE+0x80>
    6108:	b0 91 e6 01 	lds	r27, 0x01E6	; 0x8001e6 <_ZN14EthernetClient8_srcportE+0x81>
    610c:	89 83       	std	Y+1, r24	; 0x01
    610e:	9a 83       	std	Y+2, r25	; 0x02
    6110:	ab 83       	std	Y+3, r26	; 0x03
    6112:	bc 83       	std	Y+4, r27	; 0x04
    6114:	87 81       	ldd	r24, Z+7	; 0x07
    6116:	48 17       	cp	r20, r24
    6118:	10 f0       	brcs	.+4      	; 0x611e <_ZN3LCD9setCursorEhh+0x50>
    611a:	4f ef       	ldi	r20, 0xFF	; 255
    611c:	48 0f       	add	r20, r24
    611e:	90 85       	ldd	r25, Z+8	; 0x08
    6120:	50 e0       	ldi	r21, 0x00	; 0
    6122:	de 01       	movw	r26, r28
    6124:	a4 0f       	add	r26, r20
    6126:	b5 1f       	adc	r27, r21
    6128:	90 31       	cpi	r25, 0x10	; 16
    612a:	29 f4       	brne	.+10     	; 0x6136 <_ZN3LCD9setCursorEhh+0x68>
    612c:	84 30       	cpi	r24, 0x04	; 4
    612e:	19 f4       	brne	.+6      	; 0x6136 <_ZN3LCD9setCursorEhh+0x68>
    6130:	11 96       	adiw	r26, 0x01	; 1
    6132:	9c 91       	ld	r25, X
    6134:	02 c0       	rjmp	.+4      	; 0x613a <_ZN3LCD9setCursorEhh+0x6c>
    6136:	15 96       	adiw	r26, 0x05	; 5
    6138:	9c 91       	ld	r25, X
    613a:	69 0f       	add	r22, r25
    613c:	60 68       	ori	r22, 0x80	; 128
    613e:	cf 01       	movw	r24, r30
    6140:	28 96       	adiw	r28, 0x08	; 8
    6142:	0f b6       	in	r0, 0x3f	; 63
    6144:	f8 94       	cli
    6146:	de bf       	out	0x3e, r29	; 62
    6148:	0f be       	out	0x3f, r0	; 63
    614a:	cd bf       	out	0x3d, r28	; 61
    614c:	df 91       	pop	r29
    614e:	cf 91       	pop	r28
    6150:	b0 cf       	rjmp	.-160    	; 0x60b2 <_ZN3LCD7commandEh>

00006152 <_ZN3LCD9noDisplayEv>:
    6152:	fc 01       	movw	r30, r24
    6154:	65 81       	ldd	r22, Z+5	; 0x05
    6156:	6b 7f       	andi	r22, 0xFB	; 251
    6158:	65 83       	std	Z+5, r22	; 0x05
    615a:	68 60       	ori	r22, 0x08	; 8
    615c:	aa cf       	rjmp	.-172    	; 0x60b2 <_ZN3LCD7commandEh>

0000615e <_ZN3LCD7displayEv>:
    615e:	fc 01       	movw	r30, r24
    6160:	65 81       	ldd	r22, Z+5	; 0x05
    6162:	26 2f       	mov	r18, r22
    6164:	24 60       	ori	r18, 0x04	; 4
    6166:	25 83       	std	Z+5, r18	; 0x05
    6168:	6c 60       	ori	r22, 0x0C	; 12
    616a:	a3 cf       	rjmp	.-186    	; 0x60b2 <_ZN3LCD7commandEh>

0000616c <_ZN3LCD5beginEhhh>:
    616c:	cf 93       	push	r28
    616e:	df 93       	push	r29
    6170:	ec 01       	movw	r28, r24
    6172:	42 30       	cpi	r20, 0x02	; 2
    6174:	18 f0       	brcs	.+6      	; 0x617c <_ZN3LCD5beginEhhh+0x10>
    6176:	8c 81       	ldd	r24, Y+4	; 0x04
    6178:	88 60       	ori	r24, 0x08	; 8
    617a:	8c 83       	std	Y+4, r24	; 0x04
    617c:	4f 83       	std	Y+7, r20	; 0x07
    617e:	68 87       	std	Y+8, r22	; 0x08
    6180:	22 23       	and	r18, r18
    6182:	29 f0       	breq	.+10     	; 0x618e <_ZN3LCD5beginEhhh+0x22>
    6184:	41 30       	cpi	r20, 0x01	; 1
    6186:	19 f4       	brne	.+6      	; 0x618e <_ZN3LCD5beginEhhh+0x22>
    6188:	8c 81       	ldd	r24, Y+4	; 0x04
    618a:	84 60       	ori	r24, 0x04	; 4
    618c:	8c 83       	std	Y+4, r24	; 0x04
    618e:	64 e6       	ldi	r22, 0x64	; 100
    6190:	70 e0       	ldi	r23, 0x00	; 0
    6192:	80 e0       	ldi	r24, 0x00	; 0
    6194:	90 e0       	ldi	r25, 0x00	; 0
    6196:	0e 94 15 3a 	call	0x742a	; 0x742a <delay>
    619a:	6c 81       	ldd	r22, Y+4	; 0x04
    619c:	64 fd       	sbrc	r22, 4
    619e:	31 c0       	rjmp	.+98     	; 0x6202 <_ZN3LCD5beginEhhh+0x96>
    61a0:	e8 81       	ld	r30, Y
    61a2:	f9 81       	ldd	r31, Y+1	; 0x01
    61a4:	06 84       	ldd	r0, Z+14	; 0x0e
    61a6:	f7 85       	ldd	r31, Z+15	; 0x0f
    61a8:	e0 2d       	mov	r30, r0
    61aa:	42 e0       	ldi	r20, 0x02	; 2
    61ac:	63 e0       	ldi	r22, 0x03	; 3
    61ae:	ce 01       	movw	r24, r28
    61b0:	09 95       	icall
    61b2:	84 e9       	ldi	r24, 0x94	; 148
    61b4:	91 e1       	ldi	r25, 0x11	; 17
    61b6:	0e 94 4e 3a 	call	0x749c	; 0x749c <delayMicroseconds>
    61ba:	e8 81       	ld	r30, Y
    61bc:	f9 81       	ldd	r31, Y+1	; 0x01
    61be:	06 84       	ldd	r0, Z+14	; 0x0e
    61c0:	f7 85       	ldd	r31, Z+15	; 0x0f
    61c2:	e0 2d       	mov	r30, r0
    61c4:	42 e0       	ldi	r20, 0x02	; 2
    61c6:	63 e0       	ldi	r22, 0x03	; 3
    61c8:	ce 01       	movw	r24, r28
    61ca:	09 95       	icall
    61cc:	86 e9       	ldi	r24, 0x96	; 150
    61ce:	90 e0       	ldi	r25, 0x00	; 0
    61d0:	0e 94 4e 3a 	call	0x749c	; 0x749c <delayMicroseconds>
    61d4:	e8 81       	ld	r30, Y
    61d6:	f9 81       	ldd	r31, Y+1	; 0x01
    61d8:	06 84       	ldd	r0, Z+14	; 0x0e
    61da:	f7 85       	ldd	r31, Z+15	; 0x0f
    61dc:	e0 2d       	mov	r30, r0
    61de:	42 e0       	ldi	r20, 0x02	; 2
    61e0:	63 e0       	ldi	r22, 0x03	; 3
    61e2:	ce 01       	movw	r24, r28
    61e4:	09 95       	icall
    61e6:	86 e9       	ldi	r24, 0x96	; 150
    61e8:	90 e0       	ldi	r25, 0x00	; 0
    61ea:	0e 94 4e 3a 	call	0x749c	; 0x749c <delayMicroseconds>
    61ee:	e8 81       	ld	r30, Y
    61f0:	f9 81       	ldd	r31, Y+1	; 0x01
    61f2:	06 84       	ldd	r0, Z+14	; 0x0e
    61f4:	f7 85       	ldd	r31, Z+15	; 0x0f
    61f6:	e0 2d       	mov	r30, r0
    61f8:	42 e0       	ldi	r20, 0x02	; 2
    61fa:	62 e0       	ldi	r22, 0x02	; 2
    61fc:	ce 01       	movw	r24, r28
    61fe:	09 95       	icall
    6200:	13 c0       	rjmp	.+38     	; 0x6228 <_ZN3LCD5beginEhhh+0xbc>
    6202:	60 62       	ori	r22, 0x20	; 32
    6204:	ce 01       	movw	r24, r28
    6206:	55 df       	rcall	.-342    	; 0x60b2 <_ZN3LCD7commandEh>
    6208:	84 e9       	ldi	r24, 0x94	; 148
    620a:	91 e1       	ldi	r25, 0x11	; 17
    620c:	0e 94 4e 3a 	call	0x749c	; 0x749c <delayMicroseconds>
    6210:	6c 81       	ldd	r22, Y+4	; 0x04
    6212:	60 62       	ori	r22, 0x20	; 32
    6214:	ce 01       	movw	r24, r28
    6216:	4d df       	rcall	.-358    	; 0x60b2 <_ZN3LCD7commandEh>
    6218:	86 e9       	ldi	r24, 0x96	; 150
    621a:	90 e0       	ldi	r25, 0x00	; 0
    621c:	0e 94 4e 3a 	call	0x749c	; 0x749c <delayMicroseconds>
    6220:	6c 81       	ldd	r22, Y+4	; 0x04
    6222:	60 62       	ori	r22, 0x20	; 32
    6224:	ce 01       	movw	r24, r28
    6226:	45 df       	rcall	.-374    	; 0x60b2 <_ZN3LCD7commandEh>
    6228:	86 e9       	ldi	r24, 0x96	; 150
    622a:	90 e0       	ldi	r25, 0x00	; 0
    622c:	0e 94 4e 3a 	call	0x749c	; 0x749c <delayMicroseconds>
    6230:	6c 81       	ldd	r22, Y+4	; 0x04
    6232:	60 62       	ori	r22, 0x20	; 32
    6234:	ce 01       	movw	r24, r28
    6236:	3d df       	rcall	.-390    	; 0x60b2 <_ZN3LCD7commandEh>
    6238:	8c e3       	ldi	r24, 0x3C	; 60
    623a:	90 e0       	ldi	r25, 0x00	; 0
    623c:	0e 94 4e 3a 	call	0x749c	; 0x749c <delayMicroseconds>
    6240:	84 e0       	ldi	r24, 0x04	; 4
    6242:	8d 83       	std	Y+5, r24	; 0x05
    6244:	ce 01       	movw	r24, r28
    6246:	8b df       	rcall	.-234    	; 0x615e <_ZN3LCD7displayEv>
    6248:	ce 01       	movw	r24, r28
    624a:	3b df       	rcall	.-394    	; 0x60c2 <_ZN3LCD5clearEv>
    624c:	82 e0       	ldi	r24, 0x02	; 2
    624e:	8e 83       	std	Y+6, r24	; 0x06
    6250:	66 e0       	ldi	r22, 0x06	; 6
    6252:	ce 01       	movw	r24, r28
    6254:	2e df       	rcall	.-420    	; 0x60b2 <_ZN3LCD7commandEh>
    6256:	ce 01       	movw	r24, r28
    6258:	df 91       	pop	r29
    625a:	cf 91       	pop	r28
    625c:	1a cf       	rjmp	.-460    	; 0x6092 <_ZN3LCD9backlightEv>

0000625e <_ZN3LCD10createCharEhPh>:
}

// Write to CGRAM of new characters
void LCD::createChar(uint8_t location, uint8_t charmap[]) 
{
    625e:	ef 92       	push	r14
    6260:	ff 92       	push	r15
    6262:	0f 93       	push	r16
    6264:	1f 93       	push	r17
    6266:	cf 93       	push	r28
    6268:	df 93       	push	r29
    626a:	8c 01       	movw	r16, r24
    626c:	7a 01       	movw	r14, r20
   location &= 0x7;            // we only have 8 locations 0-7
   
   command(LCD_SETCGRAMADDR | (location << 3));
    626e:	67 70       	andi	r22, 0x07	; 7
    6270:	88 e0       	ldi	r24, 0x08	; 8
    6272:	68 9f       	mul	r22, r24
    6274:	b0 01       	movw	r22, r0
    6276:	11 24       	eor	r1, r1
    6278:	60 64       	ori	r22, 0x40	; 64
    627a:	c8 01       	movw	r24, r16
    627c:	1a df       	rcall	.-460    	; 0x60b2 <_ZN3LCD7commandEh>
   delayMicroseconds(30);
    627e:	8e e1       	ldi	r24, 0x1E	; 30
    6280:	90 e0       	ldi	r25, 0x00	; 0
    6282:	0e 94 4e 3a 	call	0x749c	; 0x749c <delayMicroseconds>
    6286:	e7 01       	movw	r28, r14
    6288:	a8 e0       	ldi	r26, 0x08	; 8
    628a:	ea 0e       	add	r14, r26
    628c:	f1 1c       	adc	r15, r1
   
   for (uint8_t i = 0; i < 8; i++)
   {
      write(charmap[i]);      // call the virtual write method
    628e:	69 91       	ld	r22, Y+
    6290:	d8 01       	movw	r26, r16
    6292:	ed 91       	ld	r30, X+
    6294:	fc 91       	ld	r31, X
    6296:	01 90       	ld	r0, Z+
    6298:	f0 81       	ld	r31, Z
    629a:	e0 2d       	mov	r30, r0
    629c:	c8 01       	movw	r24, r16
    629e:	09 95       	icall
      delayMicroseconds(40);
    62a0:	88 e2       	ldi	r24, 0x28	; 40
    62a2:	90 e0       	ldi	r25, 0x00	; 0
    62a4:	0e 94 4e 3a 	call	0x749c	; 0x749c <delayMicroseconds>
   location &= 0x7;            // we only have 8 locations 0-7
   
   command(LCD_SETCGRAMADDR | (location << 3));
   delayMicroseconds(30);
   
   for (uint8_t i = 0; i < 8; i++)
    62a8:	ce 15       	cp	r28, r14
    62aa:	df 05       	cpc	r29, r15
    62ac:	81 f7       	brne	.-32     	; 0x628e <_ZN3LCD10createCharEhPh+0x30>
   {
      write(charmap[i]);      // call the virtual write method
      delayMicroseconds(40);
   }
}
    62ae:	df 91       	pop	r29
    62b0:	cf 91       	pop	r28
    62b2:	1f 91       	pop	r17
    62b4:	0f 91       	pop	r16
    62b6:	ff 90       	pop	r15
    62b8:	ef 90       	pop	r14
    62ba:	08 95       	ret

000062bc <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol>:
LiquidCrystal_I2C::LiquidCrystal_I2C(uint8_t lcd_Addr, uint8_t En, uint8_t Rw,
                                     uint8_t Rs, uint8_t d4, uint8_t d5,
                                     uint8_t d6, uint8_t d7 )
{
   config(lcd_Addr, En, Rw, Rs, d4, d5, d6, d7);
}
    62bc:	21 e0       	ldi	r18, 0x01	; 1
    62be:	01 c0       	rjmp	.+2      	; 0x62c2 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol+0x6>
    62c0:	22 0f       	add	r18, r18
    62c2:	6a 95       	dec	r22
    62c4:	ea f7       	brpl	.-6      	; 0x62c0 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol+0x4>
    62c6:	dc 01       	movw	r26, r24
    62c8:	1b 96       	adiw	r26, 0x0b	; 11
    62ca:	2c 93       	st	X, r18
    62cc:	1b 97       	sbiw	r26, 0x0b	; 11
    62ce:	19 96       	adiw	r26, 0x09	; 9
    62d0:	4c 93       	st	X, r20
    62d2:	19 97       	sbiw	r26, 0x09	; 9
    62d4:	ed 91       	ld	r30, X+
    62d6:	fc 91       	ld	r31, X
    62d8:	04 84       	ldd	r0, Z+12	; 0x0c
    62da:	f5 85       	ldd	r31, Z+13	; 0x0d
    62dc:	e0 2d       	mov	r30, r0
    62de:	60 e0       	ldi	r22, 0x00	; 0
    62e0:	09 94       	ijmp

000062e2 <_ZN17LiquidCrystal_I2C12setBacklightEh>:
    62e2:	fc 01       	movw	r30, r24
    62e4:	83 85       	ldd	r24, Z+11	; 0x0b
    62e6:	88 23       	and	r24, r24
    62e8:	89 f0       	breq	.+34     	; 0x630c <_ZN17LiquidCrystal_I2C12setBacklightEh+0x2a>
    62ea:	91 85       	ldd	r25, Z+9	; 0x09
    62ec:	91 11       	cpse	r25, r1
    62ee:	03 c0       	rjmp	.+6      	; 0x62f6 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x14>
    62f0:	61 11       	cpse	r22, r1
    62f2:	05 c0       	rjmp	.+10     	; 0x62fe <_ZN17LiquidCrystal_I2C12setBacklightEh+0x1c>
    62f4:	06 c0       	rjmp	.+12     	; 0x6302 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    62f6:	91 30       	cpi	r25, 0x01	; 1
    62f8:	21 f4       	brne	.+8      	; 0x6302 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    62fa:	61 11       	cpse	r22, r1
    62fc:	02 c0       	rjmp	.+4      	; 0x6302 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    62fe:	84 87       	std	Z+12, r24	; 0x0c
    6300:	01 c0       	rjmp	.+2      	; 0x6304 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x22>
    6302:	14 86       	std	Z+12, r1	; 0x0c
    6304:	64 85       	ldd	r22, Z+12	; 0x0c
    6306:	cf 01       	movw	r24, r30
    6308:	0d 96       	adiw	r24, 0x0d	; 13
    630a:	8a ce       	rjmp	.-748    	; 0x6020 <_ZN5I2CIO5writeEh>
    630c:	08 95       	ret

0000630e <_ZN17LiquidCrystal_I2C4initEv>:
    630e:	0f 93       	push	r16
    6310:	1f 93       	push	r17
    6312:	cf 93       	push	r28
    6314:	df 93       	push	r29
    6316:	8c 01       	movw	r16, r24
    6318:	ec 01       	movw	r28, r24
    631a:	2d 96       	adiw	r28, 0x0d	; 13
    631c:	fc 01       	movw	r30, r24
    631e:	62 85       	ldd	r22, Z+10	; 0x0a
    6320:	ce 01       	movw	r24, r28
    6322:	68 de       	rcall	.-816    	; 0x5ff4 <_ZN5I2CIO5beginEh>
    6324:	01 97       	sbiw	r24, 0x01	; 1
    6326:	59 f4       	brne	.+22     	; 0x633e <_ZN17LiquidCrystal_I2C4initEv+0x30>
    6328:	61 e0       	ldi	r22, 0x01	; 1
    632a:	ce 01       	movw	r24, r28
    632c:	4d de       	rcall	.-870    	; 0x5fc8 <_ZN5I2CIO8portModeEh>
    632e:	f8 01       	movw	r30, r16
    6330:	14 82       	std	Z+4, r1	; 0x04
    6332:	60 e0       	ldi	r22, 0x00	; 0
    6334:	ce 01       	movw	r24, r28
    6336:	74 de       	rcall	.-792    	; 0x6020 <_ZN5I2CIO5writeEh>
    6338:	81 e0       	ldi	r24, 0x01	; 1
    633a:	90 e0       	ldi	r25, 0x00	; 0
    633c:	02 c0       	rjmp	.+4      	; 0x6342 <_ZN17LiquidCrystal_I2C4initEv+0x34>
    633e:	80 e0       	ldi	r24, 0x00	; 0
    6340:	90 e0       	ldi	r25, 0x00	; 0
    6342:	df 91       	pop	r29
    6344:	cf 91       	pop	r28
    6346:	1f 91       	pop	r17
    6348:	0f 91       	pop	r16
    634a:	08 95       	ret

0000634c <_ZN17LiquidCrystal_I2C6configEhhhhhhhh>:
    634c:	8f 92       	push	r8
    634e:	af 92       	push	r10
    6350:	cf 92       	push	r12
    6352:	ef 92       	push	r14
    6354:	0f 93       	push	r16
    6356:	cf 93       	push	r28
    6358:	df 93       	push	r29
    635a:	cd b7       	in	r28, 0x3d	; 61
    635c:	de b7       	in	r29, 0x3e	; 62
    635e:	fc 01       	movw	r30, r24
    6360:	62 87       	std	Z+10, r22	; 0x0a
    6362:	13 86       	std	Z+11, r1	; 0x0b
    6364:	14 86       	std	Z+12, r1	; 0x0c
    6366:	11 86       	std	Z+9, r1	; 0x09
    6368:	81 e0       	ldi	r24, 0x01	; 1
    636a:	98 2f       	mov	r25, r24
    636c:	01 c0       	rjmp	.+2      	; 0x6370 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x24>
    636e:	99 0f       	add	r25, r25
    6370:	4a 95       	dec	r20
    6372:	ea f7       	brpl	.-6      	; 0x636e <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x22>
    6374:	91 8b       	std	Z+17, r25	; 0x11
    6376:	98 2f       	mov	r25, r24
    6378:	01 c0       	rjmp	.+2      	; 0x637c <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x30>
    637a:	99 0f       	add	r25, r25
    637c:	2a 95       	dec	r18
    637e:	ea f7       	brpl	.-6      	; 0x637a <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x2e>
    6380:	92 8b       	std	Z+18, r25	; 0x12
    6382:	98 2f       	mov	r25, r24
    6384:	01 c0       	rjmp	.+2      	; 0x6388 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x3c>
    6386:	99 0f       	add	r25, r25
    6388:	0a 95       	dec	r16
    638a:	ea f7       	brpl	.-6      	; 0x6386 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x3a>
    638c:	93 8b       	std	Z+19, r25	; 0x13
    638e:	98 2f       	mov	r25, r24
    6390:	01 c0       	rjmp	.+2      	; 0x6394 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x48>
    6392:	99 0f       	add	r25, r25
    6394:	ea 94       	dec	r14
    6396:	ea f7       	brpl	.-6      	; 0x6392 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x46>
    6398:	94 8b       	std	Z+20, r25	; 0x14
    639a:	98 2f       	mov	r25, r24
    639c:	01 c0       	rjmp	.+2      	; 0x63a0 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x54>
    639e:	99 0f       	add	r25, r25
    63a0:	ca 94       	dec	r12
    63a2:	ea f7       	brpl	.-6      	; 0x639e <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x52>
    63a4:	95 8b       	std	Z+21, r25	; 0x15
    63a6:	98 2f       	mov	r25, r24
    63a8:	01 c0       	rjmp	.+2      	; 0x63ac <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x60>
    63aa:	99 0f       	add	r25, r25
    63ac:	aa 94       	dec	r10
    63ae:	ea f7       	brpl	.-6      	; 0x63aa <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x5e>
    63b0:	96 8b       	std	Z+22, r25	; 0x16
    63b2:	01 c0       	rjmp	.+2      	; 0x63b6 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x6a>
    63b4:	88 0f       	add	r24, r24
    63b6:	8a 94       	dec	r8
    63b8:	ea f7       	brpl	.-6      	; 0x63b4 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x68>
    63ba:	87 8b       	std	Z+23, r24	; 0x17
    63bc:	df 91       	pop	r29
    63be:	cf 91       	pop	r28
    63c0:	0f 91       	pop	r16
    63c2:	ef 90       	pop	r14
    63c4:	cf 90       	pop	r12
    63c6:	af 90       	pop	r10
    63c8:	8f 90       	pop	r8
    63ca:	08 95       	ret

000063cc <_ZN17LiquidCrystal_I2CC1Ehhhhhhhhh13t_backlighPol>:

LiquidCrystal_I2C::LiquidCrystal_I2C(uint8_t lcd_Addr, uint8_t En, uint8_t Rw,
    63cc:	6f 92       	push	r6
    63ce:	7f 92       	push	r7
    63d0:	8f 92       	push	r8
    63d2:	9f 92       	push	r9
    63d4:	af 92       	push	r10
    63d6:	bf 92       	push	r11
    63d8:	cf 92       	push	r12
    63da:	df 92       	push	r13
    63dc:	ef 92       	push	r14
    63de:	ff 92       	push	r15
    63e0:	0f 93       	push	r16
    63e2:	1f 93       	push	r17
    63e4:	cf 93       	push	r28
    63e6:	df 93       	push	r29
    63e8:	cd b7       	in	r28, 0x3d	; 61
    63ea:	de b7       	in	r29, 0x3e	; 62
    63ec:	3c 01       	movw	r6, r24
    63ee:	d6 2e       	mov	r13, r22
    63f0:	b4 2e       	mov	r11, r20
    63f2:	92 2e       	mov	r9, r18
    63f4:	19 89       	ldd	r17, Y+17	; 0x11
    63f6:	fa 88       	ldd	r15, Y+18	; 0x12
                                     uint8_t Rs, uint8_t d4, uint8_t d5,
                                     uint8_t d6, uint8_t d7, uint8_t backlighPin, 
                                     t_backlighPol pol = POSITIVE )
    63f8:	44 de       	rcall	.-888    	; 0x6082 <_ZN3LCDC1Ev>
    63fa:	8c e2       	ldi	r24, 0x2C	; 44
    63fc:	9a e0       	ldi	r25, 0x0A	; 10
    63fe:	f3 01       	movw	r30, r6
    6400:	91 83       	std	Z+1, r25	; 0x01
    6402:	80 83       	st	Z, r24
    6404:	c3 01       	movw	r24, r6
    6406:	0d 96       	adiw	r24, 0x0d	; 13
    6408:	d8 dd       	rcall	.-1104   	; 0x5fba <_ZN5I2CIOC1Ev>
{
   config(lcd_Addr, En, Rw, Rs, d4, d5, d6, d7);
    640a:	29 2d       	mov	r18, r9
    640c:	4b 2d       	mov	r20, r11
    640e:	6d 2d       	mov	r22, r13
    6410:	c3 01       	movw	r24, r6
    6412:	9c df       	rcall	.-200    	; 0x634c <_ZN17LiquidCrystal_I2C6configEhhhhhhhh>
   setBacklightPin(backlighPin, pol);
    6414:	4f 2d       	mov	r20, r15
    6416:	61 2f       	mov	r22, r17
    6418:	c3 01       	movw	r24, r6
}
    641a:	df 91       	pop	r29
    641c:	cf 91       	pop	r28
    641e:	1f 91       	pop	r17
    6420:	0f 91       	pop	r16
    6422:	ff 90       	pop	r15
    6424:	ef 90       	pop	r14
    6426:	df 90       	pop	r13
    6428:	cf 90       	pop	r12
    642a:	bf 90       	pop	r11
    642c:	af 90       	pop	r10
    642e:	9f 90       	pop	r9
    6430:	8f 90       	pop	r8
    6432:	7f 90       	pop	r7
                                     uint8_t Rs, uint8_t d4, uint8_t d5,
                                     uint8_t d6, uint8_t d7, uint8_t backlighPin, 
                                     t_backlighPol pol = POSITIVE )
{
   config(lcd_Addr, En, Rw, Rs, d4, d5, d6, d7);
   setBacklightPin(backlighPin, pol);
    6434:	6f 90       	pop	r6
    6436:	42 cf       	rjmp	.-380    	; 0x62bc <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol>

00006438 <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
}

//
// pulseEnable
void LiquidCrystal_I2C::pulseEnable (uint8_t data)
{
    6438:	ef 92       	push	r14
    643a:	ff 92       	push	r15
    643c:	0f 93       	push	r16
    643e:	1f 93       	push	r17
    6440:	cf 93       	push	r28
    6442:	8c 01       	movw	r16, r24
    6444:	c6 2f       	mov	r28, r22
   _i2cio.write (data | _En);   // En HIGH
    6446:	7c 01       	movw	r14, r24
    6448:	8d e0       	ldi	r24, 0x0D	; 13
    644a:	e8 0e       	add	r14, r24
    644c:	f1 1c       	adc	r15, r1
    644e:	f8 01       	movw	r30, r16
    6450:	61 89       	ldd	r22, Z+17	; 0x11
    6452:	6c 2b       	or	r22, r28
    6454:	c7 01       	movw	r24, r14
    6456:	e4 dd       	rcall	.-1080   	; 0x6020 <_ZN5I2CIO5writeEh>
   _i2cio.write (data & ~_En);  // En LOW
    6458:	f8 01       	movw	r30, r16
    645a:	61 89       	ldd	r22, Z+17	; 0x11
    645c:	60 95       	com	r22
    645e:	6c 23       	and	r22, r28
    6460:	c7 01       	movw	r24, r14
    6462:	cf 91       	pop	r28
    6464:	1f 91       	pop	r17
    6466:	0f 91       	pop	r16
    6468:	ff 90       	pop	r15
//
// pulseEnable
void LiquidCrystal_I2C::pulseEnable (uint8_t data)
{
   _i2cio.write (data | _En);   // En HIGH
   _i2cio.write (data & ~_En);  // En LOW
    646a:	ef 90       	pop	r14
    646c:	d9 cd       	rjmp	.-1102   	; 0x6020 <_ZN5I2CIO5writeEh>

0000646e <_ZN17LiquidCrystal_I2C10write4bitsEhh>:
}

//
// write4bits
void LiquidCrystal_I2C::write4bits ( uint8_t value, uint8_t mode ) 
{
    646e:	fc 01       	movw	r30, r24
    6470:	96 2f       	mov	r25, r22
    6472:	df 01       	movw	r26, r30
    6474:	84 e0       	ldi	r24, 0x04	; 4
   uint8_t pinMapValue = 0;
    6476:	60 e0       	ldi	r22, 0x00	; 0
   
   // Map the value to LCD pin mapping
   // --------------------------------
   for ( uint8_t i = 0; i < 4; i++ )
   {
      if ( ( value & 0x1 ) == 1 )
    6478:	90 ff       	sbrs	r25, 0
    647a:	04 c0       	rjmp	.+8      	; 0x6484 <_ZN17LiquidCrystal_I2C10write4bitsEhh+0x16>
      {
         pinMapValue |= _data_pins[i];
    647c:	54 96       	adiw	r26, 0x14	; 20
    647e:	2c 91       	ld	r18, X
    6480:	54 97       	sbiw	r26, 0x14	; 20
    6482:	62 2b       	or	r22, r18
      }
      value = ( value >> 1 );
    6484:	96 95       	lsr	r25
    6486:	81 50       	subi	r24, 0x01	; 1
    6488:	11 96       	adiw	r26, 0x01	; 1
{
   uint8_t pinMapValue = 0;
   
   // Map the value to LCD pin mapping
   // --------------------------------
   for ( uint8_t i = 0; i < 4; i++ )
    648a:	81 11       	cpse	r24, r1
    648c:	f5 cf       	rjmp	.-22     	; 0x6478 <_ZN17LiquidCrystal_I2C10write4bitsEhh+0xa>
      value = ( value >> 1 );
   }
   
   // Is it a command or data
   // -----------------------
   if ( mode == DATA )
    648e:	41 30       	cpi	r20, 0x01	; 1
    6490:	09 f4       	brne	.+2      	; 0x6494 <_ZN17LiquidCrystal_I2C10write4bitsEhh+0x26>
   {
      mode = _Rs;
    6492:	43 89       	ldd	r20, Z+19	; 0x13
    6494:	94 85       	ldd	r25, Z+12	; 0x0c
    6496:	69 2b       	or	r22, r25
   }
   
   pinMapValue |= mode | _backlightStsMask;
   pulseEnable ( pinMapValue );
    6498:	64 2b       	or	r22, r20
    649a:	cf 01       	movw	r24, r30
    649c:	cd cf       	rjmp	.-102    	; 0x6438 <_ZN17LiquidCrystal_I2C11pulseEnableEh>

0000649e <_ZN17LiquidCrystal_I2C4sendEhh>:
//----------------------------------------------------------------------------

//
// send - write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) 
{
    649e:	0f 93       	push	r16
    64a0:	1f 93       	push	r17
    64a2:	cf 93       	push	r28
    64a4:	df 93       	push	r29
    64a6:	06 2f       	mov	r16, r22
    64a8:	0f 70       	andi	r16, 0x0F	; 15
   // No need to use the delay routines since the time taken to write takes
   // longer that what is needed both for toggling and enable pin an to execute
   // the command.
   
   if ( mode == FOUR_BITS )
    64aa:	42 30       	cpi	r20, 0x02	; 2
    64ac:	19 f4       	brne	.+6      	; 0x64b4 <_ZN17LiquidCrystal_I2C4sendEhh+0x16>
   {
      write4bits( (value & 0x0F), COMMAND );
    64ae:	40 e0       	ldi	r20, 0x00	; 0
    64b0:	60 2f       	mov	r22, r16
    64b2:	0d c0       	rjmp	.+26     	; 0x64ce <_ZN17LiquidCrystal_I2C4sendEhh+0x30>
    64b4:	14 2f       	mov	r17, r20
    64b6:	ec 01       	movw	r28, r24
   }
   else 
   {
      write4bits( (value >> 4), mode );
    64b8:	70 e0       	ldi	r23, 0x00	; 0
    64ba:	84 e0       	ldi	r24, 0x04	; 4
    64bc:	75 95       	asr	r23
    64be:	67 95       	ror	r22
    64c0:	8a 95       	dec	r24
    64c2:	e1 f7       	brne	.-8      	; 0x64bc <_ZN17LiquidCrystal_I2C4sendEhh+0x1e>
    64c4:	ce 01       	movw	r24, r28
    64c6:	d3 df       	rcall	.-90     	; 0x646e <_ZN17LiquidCrystal_I2C10write4bitsEhh>
      write4bits( (value & 0x0F), mode);
    64c8:	41 2f       	mov	r20, r17
    64ca:	60 2f       	mov	r22, r16
    64cc:	ce 01       	movw	r24, r28
   }
}
    64ce:	df 91       	pop	r29
    64d0:	cf 91       	pop	r28
    64d2:	1f 91       	pop	r17
      write4bits( (value & 0x0F), COMMAND );
   }
   else 
   {
      write4bits( (value >> 4), mode );
      write4bits( (value & 0x0F), mode);
    64d4:	0f 91       	pop	r16
    64d6:	cb cf       	rjmp	.-106    	; 0x646e <_ZN17LiquidCrystal_I2C10write4bitsEhh>

000064d8 <_ZN17LiquidCrystal_I2C5beginEhhh>:
// ---------------------------------------------------------------------------

//
// begin
void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) 
{
    64d8:	ff 92       	push	r15
    64da:	0f 93       	push	r16
    64dc:	1f 93       	push	r17
    64de:	cf 93       	push	r28
    64e0:	df 93       	push	r29
    64e2:	ec 01       	movw	r28, r24
    64e4:	16 2f       	mov	r17, r22
    64e6:	04 2f       	mov	r16, r20
    64e8:	f2 2e       	mov	r15, r18
   
   init();     // Initialise the I2C expander interface
    64ea:	11 df       	rcall	.-478    	; 0x630e <_ZN17LiquidCrystal_I2C4initEv>
   LCD::begin ( cols, lines, dotsize );   
    64ec:	2f 2d       	mov	r18, r15
    64ee:	40 2f       	mov	r20, r16
    64f0:	61 2f       	mov	r22, r17
    64f2:	ce 01       	movw	r24, r28
}
    64f4:	df 91       	pop	r29
    64f6:	cf 91       	pop	r28
    64f8:	1f 91       	pop	r17
    64fa:	0f 91       	pop	r16
// begin
void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) 
{
   
   init();     // Initialise the I2C expander interface
   LCD::begin ( cols, lines, dotsize );   
    64fc:	ff 90       	pop	r15
    64fe:	36 ce       	rjmp	.-916    	; 0x616c <_ZN3LCD5beginEhhh>

00006500 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    6500:	cf 93       	push	r28
  uint8_t sreg = SREG;
    6502:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    6504:	f8 94       	cli
  if (!initialized) {
    6506:	80 91 4b 0c 	lds	r24, 0x0C4B	; 0x800c4b <_ZN8SPIClass11initializedE>
    650a:	81 11       	cpse	r24, r1
    650c:	27 c0       	rjmp	.+78     	; 0x655c <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    650e:	ee e7       	ldi	r30, 0x7E	; 126
    6510:	f2 e0       	ldi	r31, 0x02	; 2
    6512:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    6514:	ee e5       	ldi	r30, 0x5E	; 94
    6516:	f2 e0       	ldi	r31, 0x02	; 2
    6518:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    651a:	e8 2f       	mov	r30, r24
    651c:	f0 e0       	ldi	r31, 0x00	; 0
    651e:	ee 0f       	add	r30, r30
    6520:	ff 1f       	adc	r31, r31
    6522:	e8 55       	subi	r30, 0x58	; 88
    6524:	fd 4f       	sbci	r31, 0xFD	; 253
    6526:	a5 91       	lpm	r26, Z+
    6528:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    652a:	ec 91       	ld	r30, X
    652c:	e9 23       	and	r30, r25
    652e:	21 f4       	brne	.+8      	; 0x6538 <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    6530:	61 e0       	ldi	r22, 0x01	; 1
    6532:	8a e0       	ldi	r24, 0x0A	; 10
    6534:	0e 94 f9 3a 	call	0x75f2	; 0x75f2 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    6538:	61 e0       	ldi	r22, 0x01	; 1
    653a:	8a e0       	ldi	r24, 0x0A	; 10
    653c:	0e 94 bd 3a 	call	0x757a	; 0x757a <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    6540:	8c b5       	in	r24, 0x2c	; 44
    6542:	80 61       	ori	r24, 0x10	; 16
    6544:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    6546:	8c b5       	in	r24, 0x2c	; 44
    6548:	80 64       	ori	r24, 0x40	; 64
    654a:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    654c:	61 e0       	ldi	r22, 0x01	; 1
    654e:	8d e0       	ldi	r24, 0x0D	; 13
    6550:	0e 94 bd 3a 	call	0x757a	; 0x757a <pinMode>
    pinMode(MOSI, OUTPUT);
    6554:	61 e0       	ldi	r22, 0x01	; 1
    6556:	8b e0       	ldi	r24, 0x0B	; 11
    6558:	0e 94 bd 3a 	call	0x757a	; 0x757a <pinMode>
  }
  initialized++; // reference count
    655c:	80 91 4b 0c 	lds	r24, 0x0C4B	; 0x800c4b <_ZN8SPIClass11initializedE>
    6560:	8f 5f       	subi	r24, 0xFF	; 255
    6562:	80 93 4b 0c 	sts	0x0C4B, r24	; 0x800c4b <_ZN8SPIClass11initializedE>
  SREG = sreg;
    6566:	cf bf       	out	0x3f, r28	; 63
}
    6568:	cf 91       	pop	r28
    656a:	08 95       	ret

0000656c <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    656c:	10 92 b9 0c 	sts	0x0CB9, r1	; 0x800cb9 <twi_state>
    6570:	81 e0       	ldi	r24, 0x01	; 1
    6572:	80 93 b7 0c 	sts	0x0CB7, r24	; 0x800cb7 <twi_sendStop>
    6576:	10 92 b6 0c 	sts	0x0CB6, r1	; 0x800cb6 <twi_inRepStart>
    657a:	61 e0       	ldi	r22, 0x01	; 1
    657c:	8d e1       	ldi	r24, 0x1D	; 29
    657e:	0e 94 f9 3a 	call	0x75f2	; 0x75f2 <digitalWrite>
    6582:	61 e0       	ldi	r22, 0x01	; 1
    6584:	8c e1       	ldi	r24, 0x1C	; 28
    6586:	0e 94 f9 3a 	call	0x75f2	; 0x75f2 <digitalWrite>
    658a:	e9 eb       	ldi	r30, 0xB9	; 185
    658c:	f0 e0       	ldi	r31, 0x00	; 0
    658e:	80 81       	ld	r24, Z
    6590:	8e 7f       	andi	r24, 0xFE	; 254
    6592:	80 83       	st	Z, r24
    6594:	80 81       	ld	r24, Z
    6596:	8d 7f       	andi	r24, 0xFD	; 253
    6598:	80 83       	st	Z, r24
    659a:	88 e4       	ldi	r24, 0x48	; 72
    659c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    65a0:	85 e4       	ldi	r24, 0x45	; 69
    65a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    65a6:	08 95       	ret

000065a8 <twi_disable>:
    65a8:	ec eb       	ldi	r30, 0xBC	; 188
    65aa:	f0 e0       	ldi	r31, 0x00	; 0
    65ac:	80 81       	ld	r24, Z
    65ae:	8a 7b       	andi	r24, 0xBA	; 186
    65b0:	80 83       	st	Z, r24
    65b2:	60 e0       	ldi	r22, 0x00	; 0
    65b4:	8d e1       	ldi	r24, 0x1D	; 29
    65b6:	0e 94 f9 3a 	call	0x75f2	; 0x75f2 <digitalWrite>
    65ba:	60 e0       	ldi	r22, 0x00	; 0
    65bc:	8c e1       	ldi	r24, 0x1C	; 28
    65be:	0c 94 f9 3a 	jmp	0x75f2	; 0x75f2 <digitalWrite>

000065c2 <twi_setFrequency>:
    65c2:	9b 01       	movw	r18, r22
    65c4:	ac 01       	movw	r20, r24
    65c6:	60 e0       	ldi	r22, 0x00	; 0
    65c8:	74 e2       	ldi	r23, 0x24	; 36
    65ca:	84 ef       	ldi	r24, 0xF4	; 244
    65cc:	90 e0       	ldi	r25, 0x00	; 0
    65ce:	0e 94 ac 3f 	call	0x7f58	; 0x7f58 <__udivmodsi4>
    65d2:	da 01       	movw	r26, r20
    65d4:	c9 01       	movw	r24, r18
    65d6:	40 97       	sbiw	r24, 0x10	; 16
    65d8:	a1 09       	sbc	r26, r1
    65da:	b1 09       	sbc	r27, r1
    65dc:	b6 95       	lsr	r27
    65de:	a7 95       	ror	r26
    65e0:	97 95       	ror	r25
    65e2:	87 95       	ror	r24
    65e4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    65e8:	08 95       	ret

000065ea <twi_readFrom>:
    65ea:	41 32       	cpi	r20, 0x21	; 33
    65ec:	08 f0       	brcs	.+2      	; 0x65f0 <twi_readFrom+0x6>
    65ee:	43 c0       	rjmp	.+134    	; 0x6676 <twi_readFrom+0x8c>
    65f0:	90 91 b9 0c 	lds	r25, 0x0CB9	; 0x800cb9 <twi_state>
    65f4:	91 11       	cpse	r25, r1
    65f6:	fc cf       	rjmp	.-8      	; 0x65f0 <twi_readFrom+0x6>
    65f8:	91 e0       	ldi	r25, 0x01	; 1
    65fa:	90 93 b9 0c 	sts	0x0CB9, r25	; 0x800cb9 <twi_state>
    65fe:	20 93 b7 0c 	sts	0x0CB7, r18	; 0x800cb7 <twi_sendStop>
    6602:	2f ef       	ldi	r18, 0xFF	; 255
    6604:	20 93 4c 0c 	sts	0x0C4C, r18	; 0x800c4c <twi_error>
    6608:	10 92 91 0c 	sts	0x0C91, r1	; 0x800c91 <twi_masterBufferIndex>
    660c:	24 0f       	add	r18, r20
    660e:	20 93 90 0c 	sts	0x0C90, r18	; 0x800c90 <twi_masterBufferLength>
    6612:	90 93 b8 0c 	sts	0x0CB8, r25	; 0x800cb8 <twi_slarw>
    6616:	90 91 b8 0c 	lds	r25, 0x0CB8	; 0x800cb8 <twi_slarw>
    661a:	88 0f       	add	r24, r24
    661c:	89 2b       	or	r24, r25
    661e:	80 93 b8 0c 	sts	0x0CB8, r24	; 0x800cb8 <twi_slarw>
    6622:	80 91 b6 0c 	lds	r24, 0x0CB6	; 0x800cb6 <twi_inRepStart>
    6626:	81 30       	cpi	r24, 0x01	; 1
    6628:	61 f4       	brne	.+24     	; 0x6642 <twi_readFrom+0x58>
    662a:	10 92 b6 0c 	sts	0x0CB6, r1	; 0x800cb6 <twi_inRepStart>
    662e:	80 91 b8 0c 	lds	r24, 0x0CB8	; 0x800cb8 <twi_slarw>
    6632:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    6636:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    663a:	83 fd       	sbrc	r24, 3
    663c:	f8 cf       	rjmp	.-16     	; 0x662e <twi_readFrom+0x44>
    663e:	85 ec       	ldi	r24, 0xC5	; 197
    6640:	01 c0       	rjmp	.+2      	; 0x6644 <twi_readFrom+0x5a>
    6642:	85 ee       	ldi	r24, 0xE5	; 229
    6644:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    6648:	80 91 b9 0c 	lds	r24, 0x0CB9	; 0x800cb9 <twi_state>
    664c:	81 30       	cpi	r24, 0x01	; 1
    664e:	e1 f3       	breq	.-8      	; 0x6648 <twi_readFrom+0x5e>
    6650:	80 91 91 0c 	lds	r24, 0x0C91	; 0x800c91 <twi_masterBufferIndex>
    6654:	84 17       	cp	r24, r20
    6656:	10 f4       	brcc	.+4      	; 0x665c <twi_readFrom+0x72>
    6658:	40 91 91 0c 	lds	r20, 0x0C91	; 0x800c91 <twi_masterBufferIndex>
    665c:	a2 e9       	ldi	r26, 0x92	; 146
    665e:	bc e0       	ldi	r27, 0x0C	; 12
    6660:	96 2f       	mov	r25, r22
    6662:	fb 01       	movw	r30, r22
    6664:	8e 2f       	mov	r24, r30
    6666:	89 1b       	sub	r24, r25
    6668:	84 17       	cp	r24, r20
    666a:	18 f4       	brcc	.+6      	; 0x6672 <twi_readFrom+0x88>
    666c:	8d 91       	ld	r24, X+
    666e:	81 93       	st	Z+, r24
    6670:	f9 cf       	rjmp	.-14     	; 0x6664 <twi_readFrom+0x7a>
    6672:	84 2f       	mov	r24, r20
    6674:	08 95       	ret
    6676:	80 e0       	ldi	r24, 0x00	; 0
    6678:	08 95       	ret

0000667a <twi_writeTo>:
    667a:	0f 93       	push	r16
    667c:	41 32       	cpi	r20, 0x21	; 33
    667e:	08 f0       	brcs	.+2      	; 0x6682 <twi_writeTo+0x8>
    6680:	4a c0       	rjmp	.+148    	; 0x6716 <twi_writeTo+0x9c>
    6682:	90 91 b9 0c 	lds	r25, 0x0CB9	; 0x800cb9 <twi_state>
    6686:	91 11       	cpse	r25, r1
    6688:	fc cf       	rjmp	.-8      	; 0x6682 <twi_writeTo+0x8>
    668a:	32 e0       	ldi	r19, 0x02	; 2
    668c:	30 93 b9 0c 	sts	0x0CB9, r19	; 0x800cb9 <twi_state>
    6690:	00 93 b7 0c 	sts	0x0CB7, r16	; 0x800cb7 <twi_sendStop>
    6694:	3f ef       	ldi	r19, 0xFF	; 255
    6696:	30 93 4c 0c 	sts	0x0C4C, r19	; 0x800c4c <twi_error>
    669a:	10 92 91 0c 	sts	0x0C91, r1	; 0x800c91 <twi_masterBufferIndex>
    669e:	40 93 90 0c 	sts	0x0C90, r20	; 0x800c90 <twi_masterBufferLength>
    66a2:	56 2f       	mov	r21, r22
    66a4:	a2 e9       	ldi	r26, 0x92	; 146
    66a6:	bc e0       	ldi	r27, 0x0C	; 12
    66a8:	fb 01       	movw	r30, r22
    66aa:	3e 2f       	mov	r19, r30
    66ac:	35 1b       	sub	r19, r21
    66ae:	34 17       	cp	r19, r20
    66b0:	18 f4       	brcc	.+6      	; 0x66b8 <twi_writeTo+0x3e>
    66b2:	31 91       	ld	r19, Z+
    66b4:	3d 93       	st	X+, r19
    66b6:	f9 cf       	rjmp	.-14     	; 0x66aa <twi_writeTo+0x30>
    66b8:	10 92 b8 0c 	sts	0x0CB8, r1	; 0x800cb8 <twi_slarw>
    66bc:	30 91 b8 0c 	lds	r19, 0x0CB8	; 0x800cb8 <twi_slarw>
    66c0:	88 0f       	add	r24, r24
    66c2:	83 2b       	or	r24, r19
    66c4:	80 93 b8 0c 	sts	0x0CB8, r24	; 0x800cb8 <twi_slarw>
    66c8:	80 91 b6 0c 	lds	r24, 0x0CB6	; 0x800cb6 <twi_inRepStart>
    66cc:	81 30       	cpi	r24, 0x01	; 1
    66ce:	61 f4       	brne	.+24     	; 0x66e8 <twi_writeTo+0x6e>
    66d0:	10 92 b6 0c 	sts	0x0CB6, r1	; 0x800cb6 <twi_inRepStart>
    66d4:	80 91 b8 0c 	lds	r24, 0x0CB8	; 0x800cb8 <twi_slarw>
    66d8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    66dc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    66e0:	83 fd       	sbrc	r24, 3
    66e2:	f8 cf       	rjmp	.-16     	; 0x66d4 <twi_writeTo+0x5a>
    66e4:	85 ec       	ldi	r24, 0xC5	; 197
    66e6:	01 c0       	rjmp	.+2      	; 0x66ea <twi_writeTo+0x70>
    66e8:	85 ee       	ldi	r24, 0xE5	; 229
    66ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    66ee:	22 23       	and	r18, r18
    66f0:	21 f0       	breq	.+8      	; 0x66fa <twi_writeTo+0x80>
    66f2:	80 91 b9 0c 	lds	r24, 0x0CB9	; 0x800cb9 <twi_state>
    66f6:	82 30       	cpi	r24, 0x02	; 2
    66f8:	d1 f3       	breq	.-12     	; 0x66ee <twi_writeTo+0x74>
    66fa:	80 91 4c 0c 	lds	r24, 0x0C4C	; 0x800c4c <twi_error>
    66fe:	8f 3f       	cpi	r24, 0xFF	; 255
    6700:	79 f0       	breq	.+30     	; 0x6720 <twi_writeTo+0xa6>
    6702:	80 91 4c 0c 	lds	r24, 0x0C4C	; 0x800c4c <twi_error>
    6706:	80 32       	cpi	r24, 0x20	; 32
    6708:	41 f0       	breq	.+16     	; 0x671a <twi_writeTo+0xa0>
    670a:	80 91 4c 0c 	lds	r24, 0x0C4C	; 0x800c4c <twi_error>
    670e:	80 33       	cpi	r24, 0x30	; 48
    6710:	31 f0       	breq	.+12     	; 0x671e <twi_writeTo+0xa4>
    6712:	94 e0       	ldi	r25, 0x04	; 4
    6714:	05 c0       	rjmp	.+10     	; 0x6720 <twi_writeTo+0xa6>
    6716:	91 e0       	ldi	r25, 0x01	; 1
    6718:	03 c0       	rjmp	.+6      	; 0x6720 <twi_writeTo+0xa6>
    671a:	92 e0       	ldi	r25, 0x02	; 2
    671c:	01 c0       	rjmp	.+2      	; 0x6720 <twi_writeTo+0xa6>
    671e:	93 e0       	ldi	r25, 0x03	; 3
    6720:	89 2f       	mov	r24, r25
    6722:	0f 91       	pop	r16
    6724:	08 95       	ret

00006726 <twi_transmit>:
    6726:	40 91 6e 0c 	lds	r20, 0x0C6E	; 0x800c6e <twi_txBufferLength>
    672a:	26 2f       	mov	r18, r22
    672c:	30 e0       	ldi	r19, 0x00	; 0
    672e:	24 0f       	add	r18, r20
    6730:	31 1d       	adc	r19, r1
    6732:	21 32       	cpi	r18, 0x21	; 33
    6734:	31 05       	cpc	r19, r1
    6736:	dc f4       	brge	.+54     	; 0x676e <twi_transmit+0x48>
    6738:	20 91 b9 0c 	lds	r18, 0x0CB9	; 0x800cb9 <twi_state>
    673c:	24 30       	cpi	r18, 0x04	; 4
    673e:	c9 f4       	brne	.+50     	; 0x6772 <twi_transmit+0x4c>
    6740:	fc 01       	movw	r30, r24
    6742:	80 e0       	ldi	r24, 0x00	; 0
    6744:	90 e0       	ldi	r25, 0x00	; 0
    6746:	86 17       	cp	r24, r22
    6748:	58 f4       	brcc	.+22     	; 0x6760 <twi_transmit+0x3a>
    674a:	30 91 6e 0c 	lds	r19, 0x0C6E	; 0x800c6e <twi_txBufferLength>
    674e:	21 91       	ld	r18, Z+
    6750:	dc 01       	movw	r26, r24
    6752:	a0 59       	subi	r26, 0x90	; 144
    6754:	b3 4f       	sbci	r27, 0xF3	; 243
    6756:	a3 0f       	add	r26, r19
    6758:	b1 1d       	adc	r27, r1
    675a:	2c 93       	st	X, r18
    675c:	01 96       	adiw	r24, 0x01	; 1
    675e:	f3 cf       	rjmp	.-26     	; 0x6746 <twi_transmit+0x20>
    6760:	80 91 6e 0c 	lds	r24, 0x0C6E	; 0x800c6e <twi_txBufferLength>
    6764:	68 0f       	add	r22, r24
    6766:	60 93 6e 0c 	sts	0x0C6E, r22	; 0x800c6e <twi_txBufferLength>
    676a:	80 e0       	ldi	r24, 0x00	; 0
    676c:	08 95       	ret
    676e:	81 e0       	ldi	r24, 0x01	; 1
    6770:	08 95       	ret
    6772:	82 e0       	ldi	r24, 0x02	; 2
    6774:	08 95       	ret

00006776 <twi_attachSlaveRxEvent>:
    6776:	90 93 b3 0c 	sts	0x0CB3, r25	; 0x800cb3 <twi_onSlaveReceive+0x1>
    677a:	80 93 b2 0c 	sts	0x0CB2, r24	; 0x800cb2 <twi_onSlaveReceive>
    677e:	08 95       	ret

00006780 <twi_attachSlaveTxEvent>:
    6780:	90 93 b5 0c 	sts	0x0CB5, r25	; 0x800cb5 <twi_onSlaveTransmit+0x1>
    6784:	80 93 b4 0c 	sts	0x0CB4, r24	; 0x800cb4 <twi_onSlaveTransmit>
    6788:	08 95       	ret

0000678a <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    678a:	85 ed       	ldi	r24, 0xD5	; 213
    678c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    6790:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    6794:	84 fd       	sbrc	r24, 4
    6796:	fc cf       	rjmp	.-8      	; 0x6790 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    6798:	10 92 b9 0c 	sts	0x0CB9, r1	; 0x800cb9 <twi_state>
    679c:	08 95       	ret

0000679e <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    679e:	85 ec       	ldi	r24, 0xC5	; 197
    67a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    67a4:	10 92 b9 0c 	sts	0x0CB9, r1	; 0x800cb9 <twi_state>
    67a8:	08 95       	ret

000067aa <__vector_26>:
}

ISR(TWI_vect)
{
    67aa:	1f 92       	push	r1
    67ac:	0f 92       	push	r0
    67ae:	0f b6       	in	r0, 0x3f	; 63
    67b0:	0f 92       	push	r0
    67b2:	11 24       	eor	r1, r1
    67b4:	0b b6       	in	r0, 0x3b	; 59
    67b6:	0f 92       	push	r0
    67b8:	2f 93       	push	r18
    67ba:	3f 93       	push	r19
    67bc:	4f 93       	push	r20
    67be:	5f 93       	push	r21
    67c0:	6f 93       	push	r22
    67c2:	7f 93       	push	r23
    67c4:	8f 93       	push	r24
    67c6:	9f 93       	push	r25
    67c8:	af 93       	push	r26
    67ca:	bf 93       	push	r27
    67cc:	ef 93       	push	r30
    67ce:	ff 93       	push	r31
  switch(TW_STATUS){
    67d0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    67d4:	88 7f       	andi	r24, 0xF8	; 248
    67d6:	80 36       	cpi	r24, 0x60	; 96
    67d8:	09 f4       	brne	.+2      	; 0x67dc <__vector_26+0x32>
    67da:	9d c0       	rjmp	.+314    	; 0x6916 <__vector_26+0x16c>
    67dc:	70 f5       	brcc	.+92     	; 0x683a <__vector_26+0x90>
    67de:	88 32       	cpi	r24, 0x28	; 40
    67e0:	09 f4       	brne	.+2      	; 0x67e4 <__vector_26+0x3a>
    67e2:	5c c0       	rjmp	.+184    	; 0x689c <__vector_26+0xf2>
    67e4:	90 f4       	brcc	.+36     	; 0x680a <__vector_26+0x60>
    67e6:	80 31       	cpi	r24, 0x10	; 16
    67e8:	09 f4       	brne	.+2      	; 0x67ec <__vector_26+0x42>
    67ea:	55 c0       	rjmp	.+170    	; 0x6896 <__vector_26+0xec>
    67ec:	38 f4       	brcc	.+14     	; 0x67fc <__vector_26+0x52>
    67ee:	88 23       	and	r24, r24
    67f0:	09 f4       	brne	.+2      	; 0x67f4 <__vector_26+0x4a>
    67f2:	f3 c0       	rjmp	.+486    	; 0x69da <__vector_26+0x230>
    67f4:	88 30       	cpi	r24, 0x08	; 8
    67f6:	09 f4       	brne	.+2      	; 0x67fa <__vector_26+0x50>
    67f8:	4e c0       	rjmp	.+156    	; 0x6896 <__vector_26+0xec>
    67fa:	f2 c0       	rjmp	.+484    	; 0x69e0 <__vector_26+0x236>
    67fc:	88 31       	cpi	r24, 0x18	; 24
    67fe:	09 f4       	brne	.+2      	; 0x6802 <__vector_26+0x58>
    6800:	4d c0       	rjmp	.+154    	; 0x689c <__vector_26+0xf2>
    6802:	80 32       	cpi	r24, 0x20	; 32
    6804:	09 f4       	brne	.+2      	; 0x6808 <__vector_26+0x5e>
    6806:	5e c0       	rjmp	.+188    	; 0x68c4 <__vector_26+0x11a>
    6808:	eb c0       	rjmp	.+470    	; 0x69e0 <__vector_26+0x236>
    680a:	80 34       	cpi	r24, 0x40	; 64
    680c:	09 f4       	brne	.+2      	; 0x6810 <__vector_26+0x66>
    680e:	69 c0       	rjmp	.+210    	; 0x68e2 <__vector_26+0x138>
    6810:	50 f4       	brcc	.+20     	; 0x6826 <__vector_26+0x7c>
    6812:	80 33       	cpi	r24, 0x30	; 48
    6814:	09 f4       	brne	.+2      	; 0x6818 <__vector_26+0x6e>
    6816:	56 c0       	rjmp	.+172    	; 0x68c4 <__vector_26+0x11a>
    6818:	88 33       	cpi	r24, 0x38	; 56
    681a:	09 f0       	breq	.+2      	; 0x681e <__vector_26+0x74>
    681c:	e1 c0       	rjmp	.+450    	; 0x69e0 <__vector_26+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    681e:	80 93 4c 0c 	sts	0x0C4C, r24	; 0x800c4c <twi_error>
      twi_releaseBus();
    6822:	bd df       	rcall	.-134    	; 0x679e <twi_releaseBus>
      break;
    6824:	dd c0       	rjmp	.+442    	; 0x69e0 <__vector_26+0x236>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    6826:	80 35       	cpi	r24, 0x50	; 80
    6828:	09 f4       	brne	.+2      	; 0x682c <__vector_26+0x82>
    682a:	4f c0       	rjmp	.+158    	; 0x68ca <__vector_26+0x120>
    682c:	88 35       	cpi	r24, 0x58	; 88
    682e:	09 f4       	brne	.+2      	; 0x6832 <__vector_26+0x88>
    6830:	5d c0       	rjmp	.+186    	; 0x68ec <__vector_26+0x142>
    6832:	88 34       	cpi	r24, 0x48	; 72
    6834:	09 f0       	breq	.+2      	; 0x6838 <__vector_26+0x8e>
    6836:	d4 c0       	rjmp	.+424    	; 0x69e0 <__vector_26+0x236>
    6838:	d2 c0       	rjmp	.+420    	; 0x69de <__vector_26+0x234>
    683a:	88 39       	cpi	r24, 0x98	; 152
    683c:	09 f4       	brne	.+2      	; 0x6840 <__vector_26+0x96>
    683e:	c3 c0       	rjmp	.+390    	; 0x69c6 <__vector_26+0x21c>
    6840:	a8 f4       	brcc	.+42     	; 0x686c <__vector_26+0xc2>
    6842:	88 37       	cpi	r24, 0x78	; 120
    6844:	09 f4       	brne	.+2      	; 0x6848 <__vector_26+0x9e>
    6846:	67 c0       	rjmp	.+206    	; 0x6916 <__vector_26+0x16c>
    6848:	38 f4       	brcc	.+14     	; 0x6858 <__vector_26+0xae>
    684a:	88 36       	cpi	r24, 0x68	; 104
    684c:	09 f4       	brne	.+2      	; 0x6850 <__vector_26+0xa6>
    684e:	63 c0       	rjmp	.+198    	; 0x6916 <__vector_26+0x16c>
    6850:	80 37       	cpi	r24, 0x70	; 112
    6852:	09 f4       	brne	.+2      	; 0x6856 <__vector_26+0xac>
    6854:	60 c0       	rjmp	.+192    	; 0x6916 <__vector_26+0x16c>
    6856:	c4 c0       	rjmp	.+392    	; 0x69e0 <__vector_26+0x236>
    6858:	88 38       	cpi	r24, 0x88	; 136
    685a:	09 f4       	brne	.+2      	; 0x685e <__vector_26+0xb4>
    685c:	b4 c0       	rjmp	.+360    	; 0x69c6 <__vector_26+0x21c>
    685e:	80 39       	cpi	r24, 0x90	; 144
    6860:	09 f4       	brne	.+2      	; 0x6864 <__vector_26+0xba>
    6862:	5f c0       	rjmp	.+190    	; 0x6922 <__vector_26+0x178>
    6864:	80 38       	cpi	r24, 0x80	; 128
    6866:	09 f0       	breq	.+2      	; 0x686a <__vector_26+0xc0>
    6868:	bb c0       	rjmp	.+374    	; 0x69e0 <__vector_26+0x236>
    686a:	5b c0       	rjmp	.+182    	; 0x6922 <__vector_26+0x178>
    686c:	80 3b       	cpi	r24, 0xB0	; 176
    686e:	09 f4       	brne	.+2      	; 0x6872 <__vector_26+0xc8>
    6870:	82 c0       	rjmp	.+260    	; 0x6976 <__vector_26+0x1cc>
    6872:	38 f4       	brcc	.+14     	; 0x6882 <__vector_26+0xd8>
    6874:	80 3a       	cpi	r24, 0xA0	; 160
    6876:	09 f4       	brne	.+2      	; 0x687a <__vector_26+0xd0>
    6878:	66 c0       	rjmp	.+204    	; 0x6946 <__vector_26+0x19c>
    687a:	88 3a       	cpi	r24, 0xA8	; 168
    687c:	09 f4       	brne	.+2      	; 0x6880 <__vector_26+0xd6>
    687e:	7b c0       	rjmp	.+246    	; 0x6976 <__vector_26+0x1cc>
    6880:	af c0       	rjmp	.+350    	; 0x69e0 <__vector_26+0x236>
    6882:	80 3c       	cpi	r24, 0xC0	; 192
    6884:	09 f4       	brne	.+2      	; 0x6888 <__vector_26+0xde>
    6886:	a3 c0       	rjmp	.+326    	; 0x69ce <__vector_26+0x224>
    6888:	88 3c       	cpi	r24, 0xC8	; 200
    688a:	09 f4       	brne	.+2      	; 0x688e <__vector_26+0xe4>
    688c:	a0 c0       	rjmp	.+320    	; 0x69ce <__vector_26+0x224>
    688e:	88 3b       	cpi	r24, 0xB8	; 184
    6890:	09 f4       	brne	.+2      	; 0x6894 <__vector_26+0xea>
    6892:	86 c0       	rjmp	.+268    	; 0x69a0 <__vector_26+0x1f6>
    6894:	a5 c0       	rjmp	.+330    	; 0x69e0 <__vector_26+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    6896:	80 91 b8 0c 	lds	r24, 0x0CB8	; 0x800cb8 <twi_slarw>
    689a:	10 c0       	rjmp	.+32     	; 0x68bc <__vector_26+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    689c:	90 91 91 0c 	lds	r25, 0x0C91	; 0x800c91 <twi_masterBufferIndex>
    68a0:	80 91 90 0c 	lds	r24, 0x0C90	; 0x800c90 <twi_masterBufferLength>
    68a4:	98 17       	cp	r25, r24
    68a6:	70 f5       	brcc	.+92     	; 0x6904 <__vector_26+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    68a8:	e0 91 91 0c 	lds	r30, 0x0C91	; 0x800c91 <twi_masterBufferIndex>
    68ac:	81 e0       	ldi	r24, 0x01	; 1
    68ae:	8e 0f       	add	r24, r30
    68b0:	80 93 91 0c 	sts	0x0C91, r24	; 0x800c91 <twi_masterBufferIndex>
    68b4:	f0 e0       	ldi	r31, 0x00	; 0
    68b6:	ee 56       	subi	r30, 0x6E	; 110
    68b8:	f3 4f       	sbci	r31, 0xF3	; 243
    68ba:	80 81       	ld	r24, Z
    68bc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    68c0:	85 ec       	ldi	r24, 0xC5	; 197
    68c2:	82 c0       	rjmp	.+260    	; 0x69c8 <__vector_26+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    68c4:	80 93 4c 0c 	sts	0x0C4C, r24	; 0x800c4c <twi_error>
    68c8:	8a c0       	rjmp	.+276    	; 0x69de <__vector_26+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    68ca:	e0 91 91 0c 	lds	r30, 0x0C91	; 0x800c91 <twi_masterBufferIndex>
    68ce:	81 e0       	ldi	r24, 0x01	; 1
    68d0:	8e 0f       	add	r24, r30
    68d2:	80 93 91 0c 	sts	0x0C91, r24	; 0x800c91 <twi_masterBufferIndex>
    68d6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    68da:	f0 e0       	ldi	r31, 0x00	; 0
    68dc:	ee 56       	subi	r30, 0x6E	; 110
    68de:	f3 4f       	sbci	r31, 0xF3	; 243
    68e0:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    68e2:	90 91 91 0c 	lds	r25, 0x0C91	; 0x800c91 <twi_masterBufferIndex>
    68e6:	80 91 90 0c 	lds	r24, 0x0C90	; 0x800c90 <twi_masterBufferLength>
    68ea:	6a c0       	rjmp	.+212    	; 0x69c0 <__vector_26+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    68ec:	e0 91 91 0c 	lds	r30, 0x0C91	; 0x800c91 <twi_masterBufferIndex>
    68f0:	81 e0       	ldi	r24, 0x01	; 1
    68f2:	8e 0f       	add	r24, r30
    68f4:	80 93 91 0c 	sts	0x0C91, r24	; 0x800c91 <twi_masterBufferIndex>
    68f8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    68fc:	f0 e0       	ldi	r31, 0x00	; 0
    68fe:	ee 56       	subi	r30, 0x6E	; 110
    6900:	f3 4f       	sbci	r31, 0xF3	; 243
    6902:	80 83       	st	Z, r24
	if (twi_sendStop)
    6904:	80 91 b7 0c 	lds	r24, 0x0CB7	; 0x800cb7 <twi_sendStop>
    6908:	81 11       	cpse	r24, r1
    690a:	69 c0       	rjmp	.+210    	; 0x69de <__vector_26+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    690c:	81 e0       	ldi	r24, 0x01	; 1
    690e:	80 93 b6 0c 	sts	0x0CB6, r24	; 0x800cb6 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    6912:	84 ea       	ldi	r24, 0xA4	; 164
    6914:	5d c0       	rjmp	.+186    	; 0x69d0 <__vector_26+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    6916:	83 e0       	ldi	r24, 0x03	; 3
    6918:	80 93 b9 0c 	sts	0x0CB9, r24	; 0x800cb9 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    691c:	10 92 4d 0c 	sts	0x0C4D, r1	; 0x800c4d <twi_rxBufferIndex>
    6920:	cf cf       	rjmp	.-98     	; 0x68c0 <__vector_26+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    6922:	80 91 4d 0c 	lds	r24, 0x0C4D	; 0x800c4d <twi_rxBufferIndex>
    6926:	80 32       	cpi	r24, 0x20	; 32
    6928:	08 f0       	brcs	.+2      	; 0x692c <__vector_26+0x182>
    692a:	4d c0       	rjmp	.+154    	; 0x69c6 <__vector_26+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    692c:	e0 91 4d 0c 	lds	r30, 0x0C4D	; 0x800c4d <twi_rxBufferIndex>
    6930:	81 e0       	ldi	r24, 0x01	; 1
    6932:	8e 0f       	add	r24, r30
    6934:	80 93 4d 0c 	sts	0x0C4D, r24	; 0x800c4d <twi_rxBufferIndex>
    6938:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    693c:	f0 e0       	ldi	r31, 0x00	; 0
    693e:	e2 5b       	subi	r30, 0xB2	; 178
    6940:	f3 4f       	sbci	r31, 0xF3	; 243
    6942:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    6944:	bd cf       	rjmp	.-134    	; 0x68c0 <__vector_26+0x116>
    6946:	2b df       	rcall	.-426    	; 0x679e <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    6948:	80 91 4d 0c 	lds	r24, 0x0C4D	; 0x800c4d <twi_rxBufferIndex>
    694c:	80 32       	cpi	r24, 0x20	; 32
    694e:	30 f4       	brcc	.+12     	; 0x695c <__vector_26+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    6950:	e0 91 4d 0c 	lds	r30, 0x0C4D	; 0x800c4d <twi_rxBufferIndex>
    6954:	f0 e0       	ldi	r31, 0x00	; 0
    6956:	e2 5b       	subi	r30, 0xB2	; 178
    6958:	f3 4f       	sbci	r31, 0xF3	; 243
    695a:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    695c:	60 91 4d 0c 	lds	r22, 0x0C4D	; 0x800c4d <twi_rxBufferIndex>
    6960:	70 e0       	ldi	r23, 0x00	; 0
    6962:	e0 91 b2 0c 	lds	r30, 0x0CB2	; 0x800cb2 <twi_onSlaveReceive>
    6966:	f0 91 b3 0c 	lds	r31, 0x0CB3	; 0x800cb3 <twi_onSlaveReceive+0x1>
    696a:	8e e4       	ldi	r24, 0x4E	; 78
    696c:	9c e0       	ldi	r25, 0x0C	; 12
    696e:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    6970:	10 92 4d 0c 	sts	0x0C4D, r1	; 0x800c4d <twi_rxBufferIndex>
      break;
    6974:	35 c0       	rjmp	.+106    	; 0x69e0 <__vector_26+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    6976:	84 e0       	ldi	r24, 0x04	; 4
    6978:	80 93 b9 0c 	sts	0x0CB9, r24	; 0x800cb9 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    697c:	10 92 6f 0c 	sts	0x0C6F, r1	; 0x800c6f <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    6980:	10 92 6e 0c 	sts	0x0C6E, r1	; 0x800c6e <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    6984:	e0 91 b4 0c 	lds	r30, 0x0CB4	; 0x800cb4 <twi_onSlaveTransmit>
    6988:	f0 91 b5 0c 	lds	r31, 0x0CB5	; 0x800cb5 <twi_onSlaveTransmit+0x1>
    698c:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    698e:	80 91 6e 0c 	lds	r24, 0x0C6E	; 0x800c6e <twi_txBufferLength>
    6992:	81 11       	cpse	r24, r1
    6994:	05 c0       	rjmp	.+10     	; 0x69a0 <__vector_26+0x1f6>
        twi_txBufferLength = 1;
    6996:	81 e0       	ldi	r24, 0x01	; 1
    6998:	80 93 6e 0c 	sts	0x0C6E, r24	; 0x800c6e <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    699c:	10 92 70 0c 	sts	0x0C70, r1	; 0x800c70 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    69a0:	e0 91 6f 0c 	lds	r30, 0x0C6F	; 0x800c6f <twi_txBufferIndex>
    69a4:	81 e0       	ldi	r24, 0x01	; 1
    69a6:	8e 0f       	add	r24, r30
    69a8:	80 93 6f 0c 	sts	0x0C6F, r24	; 0x800c6f <twi_txBufferIndex>
    69ac:	f0 e0       	ldi	r31, 0x00	; 0
    69ae:	e0 59       	subi	r30, 0x90	; 144
    69b0:	f3 4f       	sbci	r31, 0xF3	; 243
    69b2:	80 81       	ld	r24, Z
    69b4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    69b8:	90 91 6f 0c 	lds	r25, 0x0C6F	; 0x800c6f <twi_txBufferIndex>
    69bc:	80 91 6e 0c 	lds	r24, 0x0C6E	; 0x800c6e <twi_txBufferLength>
    69c0:	98 17       	cp	r25, r24
    69c2:	08 f4       	brcc	.+2      	; 0x69c6 <__vector_26+0x21c>
    69c4:	7d cf       	rjmp	.-262    	; 0x68c0 <__vector_26+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    69c6:	85 e8       	ldi	r24, 0x85	; 133
    69c8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    69cc:	09 c0       	rjmp	.+18     	; 0x69e0 <__vector_26+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    69ce:	85 ec       	ldi	r24, 0xC5	; 197
    69d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    69d4:	10 92 b9 0c 	sts	0x0CB9, r1	; 0x800cb9 <twi_state>
      break;
    69d8:	03 c0       	rjmp	.+6      	; 0x69e0 <__vector_26+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    69da:	10 92 4c 0c 	sts	0x0C4C, r1	; 0x800c4c <twi_error>
      twi_stop();
    69de:	d5 de       	rcall	.-598    	; 0x678a <twi_stop>
      break;
  }
}
    69e0:	ff 91       	pop	r31
    69e2:	ef 91       	pop	r30
    69e4:	bf 91       	pop	r27
    69e6:	af 91       	pop	r26
    69e8:	9f 91       	pop	r25
    69ea:	8f 91       	pop	r24
    69ec:	7f 91       	pop	r23
    69ee:	6f 91       	pop	r22
    69f0:	5f 91       	pop	r21
    69f2:	4f 91       	pop	r20
    69f4:	3f 91       	pop	r19
    69f6:	2f 91       	pop	r18
    69f8:	0f 90       	pop	r0
    69fa:	0b be       	out	0x3b, r0	; 59
    69fc:	0f 90       	pop	r0
    69fe:	0f be       	out	0x3f, r0	; 63
    6a00:	0f 90       	pop	r0
    6a02:	1f 90       	pop	r1
    6a04:	18 95       	reti

00006a06 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    6a06:	80 91 ee 0c 	lds	r24, 0x0CEE	; 0x800cee <_ZN7TwoWire14rxBufferLengthE>
    6a0a:	90 e0       	ldi	r25, 0x00	; 0
    6a0c:	20 91 ef 0c 	lds	r18, 0x0CEF	; 0x800cef <_ZN7TwoWire13rxBufferIndexE>
    6a10:	82 1b       	sub	r24, r18
    6a12:	91 09       	sbc	r25, r1
    6a14:	08 95       	ret

00006a16 <_ZN7TwoWire4readEv>:
    6a16:	90 91 ef 0c 	lds	r25, 0x0CEF	; 0x800cef <_ZN7TwoWire13rxBufferIndexE>
    6a1a:	80 91 ee 0c 	lds	r24, 0x0CEE	; 0x800cee <_ZN7TwoWire14rxBufferLengthE>
    6a1e:	98 17       	cp	r25, r24
    6a20:	50 f4       	brcc	.+20     	; 0x6a36 <_ZN7TwoWire4readEv+0x20>
    6a22:	e9 2f       	mov	r30, r25
    6a24:	f0 e0       	ldi	r31, 0x00	; 0
    6a26:	e0 51       	subi	r30, 0x10	; 16
    6a28:	f3 4f       	sbci	r31, 0xF3	; 243
    6a2a:	20 81       	ld	r18, Z
    6a2c:	30 e0       	ldi	r19, 0x00	; 0
    6a2e:	9f 5f       	subi	r25, 0xFF	; 255
    6a30:	90 93 ef 0c 	sts	0x0CEF, r25	; 0x800cef <_ZN7TwoWire13rxBufferIndexE>
    6a34:	02 c0       	rjmp	.+4      	; 0x6a3a <_ZN7TwoWire4readEv+0x24>
    6a36:	2f ef       	ldi	r18, 0xFF	; 255
    6a38:	3f ef       	ldi	r19, 0xFF	; 255
    6a3a:	c9 01       	movw	r24, r18
    6a3c:	08 95       	ret

00006a3e <_ZN7TwoWire4peekEv>:
    6a3e:	e0 91 ef 0c 	lds	r30, 0x0CEF	; 0x800cef <_ZN7TwoWire13rxBufferIndexE>
    6a42:	80 91 ee 0c 	lds	r24, 0x0CEE	; 0x800cee <_ZN7TwoWire14rxBufferLengthE>
    6a46:	e8 17       	cp	r30, r24
    6a48:	30 f4       	brcc	.+12     	; 0x6a56 <_ZN7TwoWire4peekEv+0x18>
    6a4a:	f0 e0       	ldi	r31, 0x00	; 0
    6a4c:	e0 51       	subi	r30, 0x10	; 16
    6a4e:	f3 4f       	sbci	r31, 0xF3	; 243
    6a50:	80 81       	ld	r24, Z
    6a52:	90 e0       	ldi	r25, 0x00	; 0
    6a54:	08 95       	ret
    6a56:	8f ef       	ldi	r24, 0xFF	; 255
    6a58:	9f ef       	ldi	r25, 0xFF	; 255
    6a5a:	08 95       	ret

00006a5c <_ZN7TwoWire5flushEv>:
    6a5c:	08 95       	ret

00006a5e <_ZN7TwoWire16onReceiveServiceEPhi>:
    6a5e:	cf 93       	push	r28
    6a60:	df 93       	push	r29
    6a62:	ec 01       	movw	r28, r24
    6a64:	e0 91 c6 0c 	lds	r30, 0x0CC6	; 0x800cc6 <_ZN7TwoWire14user_onReceiveE>
    6a68:	f0 91 c7 0c 	lds	r31, 0x0CC7	; 0x800cc7 <_ZN7TwoWire14user_onReceiveE+0x1>
    6a6c:	30 97       	sbiw	r30, 0x00	; 0
    6a6e:	f1 f0       	breq	.+60     	; 0x6aac <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    6a70:	90 91 ef 0c 	lds	r25, 0x0CEF	; 0x800cef <_ZN7TwoWire13rxBufferIndexE>
    6a74:	80 91 ee 0c 	lds	r24, 0x0CEE	; 0x800cee <_ZN7TwoWire14rxBufferLengthE>
    6a78:	98 17       	cp	r25, r24
    6a7a:	c0 f0       	brcs	.+48     	; 0x6aac <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    6a7c:	90 e0       	ldi	r25, 0x00	; 0
    6a7e:	29 2f       	mov	r18, r25
    6a80:	30 e0       	ldi	r19, 0x00	; 0
    6a82:	26 17       	cp	r18, r22
    6a84:	37 07       	cpc	r19, r23
    6a86:	54 f4       	brge	.+20     	; 0x6a9c <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    6a88:	de 01       	movw	r26, r28
    6a8a:	a2 0f       	add	r26, r18
    6a8c:	b3 1f       	adc	r27, r19
    6a8e:	4c 91       	ld	r20, X
    6a90:	d9 01       	movw	r26, r18
    6a92:	a0 51       	subi	r26, 0x10	; 16
    6a94:	b3 4f       	sbci	r27, 0xF3	; 243
    6a96:	4c 93       	st	X, r20
    6a98:	9f 5f       	subi	r25, 0xFF	; 255
    6a9a:	f1 cf       	rjmp	.-30     	; 0x6a7e <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    6a9c:	10 92 ef 0c 	sts	0x0CEF, r1	; 0x800cef <_ZN7TwoWire13rxBufferIndexE>
    6aa0:	60 93 ee 0c 	sts	0x0CEE, r22	; 0x800cee <_ZN7TwoWire14rxBufferLengthE>
    6aa4:	cb 01       	movw	r24, r22
    6aa6:	df 91       	pop	r29
    6aa8:	cf 91       	pop	r28
    6aaa:	09 94       	ijmp
    6aac:	df 91       	pop	r29
    6aae:	cf 91       	pop	r28
    6ab0:	08 95       	ret

00006ab2 <_ZN7TwoWire16onRequestServiceEv>:
    6ab2:	e0 91 c8 0c 	lds	r30, 0x0CC8	; 0x800cc8 <_ZN7TwoWire14user_onRequestE>
    6ab6:	f0 91 c9 0c 	lds	r31, 0x0CC9	; 0x800cc9 <_ZN7TwoWire14user_onRequestE+0x1>
    6aba:	30 97       	sbiw	r30, 0x00	; 0
    6abc:	29 f0       	breq	.+10     	; 0x6ac8 <_ZN7TwoWire16onRequestServiceEv+0x16>
    6abe:	10 92 cc 0c 	sts	0x0CCC, r1	; 0x800ccc <_ZN7TwoWire13txBufferIndexE>
    6ac2:	10 92 cb 0c 	sts	0x0CCB, r1	; 0x800ccb <_ZN7TwoWire14txBufferLengthE>
    6ac6:	09 94       	ijmp
    6ac8:	08 95       	ret

00006aca <_ZN7TwoWire5writeEPKhj>:
    6aca:	cf 92       	push	r12
    6acc:	df 92       	push	r13
    6ace:	ef 92       	push	r14
    6ad0:	ff 92       	push	r15
    6ad2:	0f 93       	push	r16
    6ad4:	1f 93       	push	r17
    6ad6:	cf 93       	push	r28
    6ad8:	df 93       	push	r29
    6ada:	7c 01       	movw	r14, r24
    6adc:	cb 01       	movw	r24, r22
    6ade:	8a 01       	movw	r16, r20
    6ae0:	20 91 ca 0c 	lds	r18, 0x0CCA	; 0x800cca <_ZN7TwoWire12transmittingE>
    6ae4:	22 23       	and	r18, r18
    6ae6:	89 f0       	breq	.+34     	; 0x6b0a <_ZN7TwoWire5writeEPKhj+0x40>
    6ae8:	eb 01       	movw	r28, r22
    6aea:	6b 01       	movw	r12, r22
    6aec:	c4 0e       	add	r12, r20
    6aee:	d5 1e       	adc	r13, r21
    6af0:	cc 15       	cp	r28, r12
    6af2:	dd 05       	cpc	r29, r13
    6af4:	61 f0       	breq	.+24     	; 0x6b0e <_ZN7TwoWire5writeEPKhj+0x44>
    6af6:	69 91       	ld	r22, Y+
    6af8:	d7 01       	movw	r26, r14
    6afa:	ed 91       	ld	r30, X+
    6afc:	fc 91       	ld	r31, X
    6afe:	01 90       	ld	r0, Z+
    6b00:	f0 81       	ld	r31, Z
    6b02:	e0 2d       	mov	r30, r0
    6b04:	c7 01       	movw	r24, r14
    6b06:	09 95       	icall
    6b08:	f3 cf       	rjmp	.-26     	; 0x6af0 <_ZN7TwoWire5writeEPKhj+0x26>
    6b0a:	64 2f       	mov	r22, r20
    6b0c:	0c de       	rcall	.-1000   	; 0x6726 <twi_transmit>
    6b0e:	c8 01       	movw	r24, r16
    6b10:	df 91       	pop	r29
    6b12:	cf 91       	pop	r28
    6b14:	1f 91       	pop	r17
    6b16:	0f 91       	pop	r16
    6b18:	ff 90       	pop	r15
    6b1a:	ef 90       	pop	r14
    6b1c:	df 90       	pop	r13
    6b1e:	cf 90       	pop	r12
    6b20:	08 95       	ret

00006b22 <_ZN7TwoWire5writeEh>:
    6b22:	cf 93       	push	r28
    6b24:	df 93       	push	r29
    6b26:	1f 92       	push	r1
    6b28:	cd b7       	in	r28, 0x3d	; 61
    6b2a:	de b7       	in	r29, 0x3e	; 62
    6b2c:	69 83       	std	Y+1, r22	; 0x01
    6b2e:	20 91 ca 0c 	lds	r18, 0x0CCA	; 0x800cca <_ZN7TwoWire12transmittingE>
    6b32:	22 23       	and	r18, r18
    6b34:	d1 f0       	breq	.+52     	; 0x6b6a <_ZN7TwoWire5writeEh+0x48>
    6b36:	20 91 cb 0c 	lds	r18, 0x0CCB	; 0x800ccb <_ZN7TwoWire14txBufferLengthE>
    6b3a:	20 32       	cpi	r18, 0x20	; 32
    6b3c:	40 f0       	brcs	.+16     	; 0x6b4e <_ZN7TwoWire5writeEh+0x2c>
    6b3e:	21 e0       	ldi	r18, 0x01	; 1
    6b40:	30 e0       	ldi	r19, 0x00	; 0
    6b42:	fc 01       	movw	r30, r24
    6b44:	33 83       	std	Z+3, r19	; 0x03
    6b46:	22 83       	std	Z+2, r18	; 0x02
    6b48:	80 e0       	ldi	r24, 0x00	; 0
    6b4a:	90 e0       	ldi	r25, 0x00	; 0
    6b4c:	14 c0       	rjmp	.+40     	; 0x6b76 <_ZN7TwoWire5writeEh+0x54>
    6b4e:	80 91 cc 0c 	lds	r24, 0x0CCC	; 0x800ccc <_ZN7TwoWire13txBufferIndexE>
    6b52:	e8 2f       	mov	r30, r24
    6b54:	f0 e0       	ldi	r31, 0x00	; 0
    6b56:	e3 53       	subi	r30, 0x33	; 51
    6b58:	f3 4f       	sbci	r31, 0xF3	; 243
    6b5a:	99 81       	ldd	r25, Y+1	; 0x01
    6b5c:	90 83       	st	Z, r25
    6b5e:	8f 5f       	subi	r24, 0xFF	; 255
    6b60:	80 93 cc 0c 	sts	0x0CCC, r24	; 0x800ccc <_ZN7TwoWire13txBufferIndexE>
    6b64:	80 93 cb 0c 	sts	0x0CCB, r24	; 0x800ccb <_ZN7TwoWire14txBufferLengthE>
    6b68:	04 c0       	rjmp	.+8      	; 0x6b72 <_ZN7TwoWire5writeEh+0x50>
    6b6a:	61 e0       	ldi	r22, 0x01	; 1
    6b6c:	ce 01       	movw	r24, r28
    6b6e:	01 96       	adiw	r24, 0x01	; 1
    6b70:	da dd       	rcall	.-1100   	; 0x6726 <twi_transmit>
    6b72:	81 e0       	ldi	r24, 0x01	; 1
    6b74:	90 e0       	ldi	r25, 0x00	; 0
    6b76:	0f 90       	pop	r0
    6b78:	df 91       	pop	r29
    6b7a:	cf 91       	pop	r28
    6b7c:	08 95       	ret

00006b7e <_ZN7TwoWireC1Ev>:
    6b7e:	fc 01       	movw	r30, r24
    6b80:	13 82       	std	Z+3, r1	; 0x03
    6b82:	12 82       	std	Z+2, r1	; 0x02
    6b84:	88 ee       	ldi	r24, 0xE8	; 232
    6b86:	93 e0       	ldi	r25, 0x03	; 3
    6b88:	a0 e0       	ldi	r26, 0x00	; 0
    6b8a:	b0 e0       	ldi	r27, 0x00	; 0
    6b8c:	84 83       	std	Z+4, r24	; 0x04
    6b8e:	95 83       	std	Z+5, r25	; 0x05
    6b90:	a6 83       	std	Z+6, r26	; 0x06
    6b92:	b7 83       	std	Z+7, r27	; 0x07
    6b94:	80 e4       	ldi	r24, 0x40	; 64
    6b96:	9a e0       	ldi	r25, 0x0A	; 10
    6b98:	91 83       	std	Z+1, r25	; 0x01
    6b9a:	80 83       	st	Z, r24
    6b9c:	08 95       	ret

00006b9e <_ZN7TwoWire5beginEv>:
    6b9e:	10 92 ef 0c 	sts	0x0CEF, r1	; 0x800cef <_ZN7TwoWire13rxBufferIndexE>
    6ba2:	10 92 ee 0c 	sts	0x0CEE, r1	; 0x800cee <_ZN7TwoWire14rxBufferLengthE>
    6ba6:	10 92 cc 0c 	sts	0x0CCC, r1	; 0x800ccc <_ZN7TwoWire13txBufferIndexE>
    6baa:	10 92 cb 0c 	sts	0x0CCB, r1	; 0x800ccb <_ZN7TwoWire14txBufferLengthE>
    6bae:	de dc       	rcall	.-1604   	; 0x656c <twi_init>
    6bb0:	89 e5       	ldi	r24, 0x59	; 89
    6bb2:	95 e3       	ldi	r25, 0x35	; 53
    6bb4:	e5 dd       	rcall	.-1078   	; 0x6780 <twi_attachSlaveTxEvent>
    6bb6:	8f e2       	ldi	r24, 0x2F	; 47
    6bb8:	95 e3       	ldi	r25, 0x35	; 53
    6bba:	dd cd       	rjmp	.-1094   	; 0x6776 <twi_attachSlaveRxEvent>

00006bbc <_ZN7TwoWire3endEv>:
    6bbc:	f5 cc       	rjmp	.-1558   	; 0x65a8 <twi_disable>

00006bbe <_ZN7TwoWire8setClockEm>:
    6bbe:	cb 01       	movw	r24, r22
    6bc0:	ba 01       	movw	r22, r20
    6bc2:	ff cc       	rjmp	.-1538   	; 0x65c2 <twi_setFrequency>

00006bc4 <_ZN7TwoWire17beginTransmissionEh>:
    6bc4:	81 e0       	ldi	r24, 0x01	; 1
    6bc6:	80 93 ca 0c 	sts	0x0CCA, r24	; 0x800cca <_ZN7TwoWire12transmittingE>
    6bca:	60 93 ed 0c 	sts	0x0CED, r22	; 0x800ced <_ZN7TwoWire9txAddressE>
    6bce:	10 92 cc 0c 	sts	0x0CCC, r1	; 0x800ccc <_ZN7TwoWire13txBufferIndexE>
    6bd2:	10 92 cb 0c 	sts	0x0CCB, r1	; 0x800ccb <_ZN7TwoWire14txBufferLengthE>
    6bd6:	08 95       	ret

00006bd8 <_ZN7TwoWire17beginTransmissionEi>:
    6bd8:	f5 cf       	rjmp	.-22     	; 0x6bc4 <_ZN7TwoWire17beginTransmissionEh>

00006bda <_ZN7TwoWire15endTransmissionEh>:
    6bda:	0f 93       	push	r16
    6bdc:	06 2f       	mov	r16, r22
    6bde:	21 e0       	ldi	r18, 0x01	; 1
    6be0:	40 91 cb 0c 	lds	r20, 0x0CCB	; 0x800ccb <_ZN7TwoWire14txBufferLengthE>
    6be4:	6d ec       	ldi	r22, 0xCD	; 205
    6be6:	7c e0       	ldi	r23, 0x0C	; 12
    6be8:	80 91 ed 0c 	lds	r24, 0x0CED	; 0x800ced <_ZN7TwoWire9txAddressE>
    6bec:	46 dd       	rcall	.-1396   	; 0x667a <twi_writeTo>
    6bee:	10 92 cc 0c 	sts	0x0CCC, r1	; 0x800ccc <_ZN7TwoWire13txBufferIndexE>
    6bf2:	10 92 cb 0c 	sts	0x0CCB, r1	; 0x800ccb <_ZN7TwoWire14txBufferLengthE>
    6bf6:	10 92 ca 0c 	sts	0x0CCA, r1	; 0x800cca <_ZN7TwoWire12transmittingE>
    6bfa:	0f 91       	pop	r16
    6bfc:	08 95       	ret

00006bfe <_ZN7TwoWire11requestFromEhhmhh>:
    6bfe:	4f 92       	push	r4
    6c00:	5f 92       	push	r5
    6c02:	6f 92       	push	r6
    6c04:	7f 92       	push	r7
    6c06:	af 92       	push	r10
    6c08:	bf 92       	push	r11
    6c0a:	cf 92       	push	r12
    6c0c:	ef 92       	push	r14
    6c0e:	ff 92       	push	r15
    6c10:	0f 93       	push	r16
    6c12:	1f 93       	push	r17
    6c14:	cf 93       	push	r28
    6c16:	df 93       	push	r29
    6c18:	5c 01       	movw	r10, r24
    6c1a:	f6 2e       	mov	r15, r22
    6c1c:	d4 2f       	mov	r29, r20
    6c1e:	28 01       	movw	r4, r16
    6c20:	39 01       	movw	r6, r18
    6c22:	ee 20       	and	r14, r14
    6c24:	11 f1       	breq	.+68     	; 0x6c6a <_ZN7TwoWire11requestFromEhhmhh+0x6c>
    6c26:	ce df       	rcall	.-100    	; 0x6bc4 <_ZN7TwoWire17beginTransmissionEh>
    6c28:	ce 2d       	mov	r28, r14
    6c2a:	c4 30       	cpi	r28, 0x04	; 4
    6c2c:	08 f0       	brcs	.+2      	; 0x6c30 <_ZN7TwoWire11requestFromEhhmhh+0x32>
    6c2e:	c3 e0       	ldi	r28, 0x03	; 3
    6c30:	c1 50       	subi	r28, 0x01	; 1
    6c32:	c0 f0       	brcs	.+48     	; 0x6c64 <_ZN7TwoWire11requestFromEhhmhh+0x66>
    6c34:	28 e0       	ldi	r18, 0x08	; 8
    6c36:	c2 9f       	mul	r28, r18
    6c38:	c0 01       	movw	r24, r0
    6c3a:	11 24       	eor	r1, r1
    6c3c:	a3 01       	movw	r20, r6
    6c3e:	92 01       	movw	r18, r4
    6c40:	04 c0       	rjmp	.+8      	; 0x6c4a <_ZN7TwoWire11requestFromEhhmhh+0x4c>
    6c42:	56 95       	lsr	r21
    6c44:	47 95       	ror	r20
    6c46:	37 95       	ror	r19
    6c48:	27 95       	ror	r18
    6c4a:	8a 95       	dec	r24
    6c4c:	d2 f7       	brpl	.-12     	; 0x6c42 <_ZN7TwoWire11requestFromEhhmhh+0x44>
    6c4e:	ca 01       	movw	r24, r20
    6c50:	b9 01       	movw	r22, r18
    6c52:	d5 01       	movw	r26, r10
    6c54:	ed 91       	ld	r30, X+
    6c56:	fc 91       	ld	r31, X
    6c58:	01 90       	ld	r0, Z+
    6c5a:	f0 81       	ld	r31, Z
    6c5c:	e0 2d       	mov	r30, r0
    6c5e:	c5 01       	movw	r24, r10
    6c60:	09 95       	icall
    6c62:	e6 cf       	rjmp	.-52     	; 0x6c30 <_ZN7TwoWire11requestFromEhhmhh+0x32>
    6c64:	60 e0       	ldi	r22, 0x00	; 0
    6c66:	c5 01       	movw	r24, r10
    6c68:	b8 df       	rcall	.-144    	; 0x6bda <_ZN7TwoWire15endTransmissionEh>
    6c6a:	4d 2f       	mov	r20, r29
    6c6c:	d1 32       	cpi	r29, 0x21	; 33
    6c6e:	08 f0       	brcs	.+2      	; 0x6c72 <_ZN7TwoWire11requestFromEhhmhh+0x74>
    6c70:	40 e2       	ldi	r20, 0x20	; 32
    6c72:	2c 2d       	mov	r18, r12
    6c74:	60 ef       	ldi	r22, 0xF0	; 240
    6c76:	7c e0       	ldi	r23, 0x0C	; 12
    6c78:	8f 2d       	mov	r24, r15
    6c7a:	b7 dc       	rcall	.-1682   	; 0x65ea <twi_readFrom>
    6c7c:	10 92 ef 0c 	sts	0x0CEF, r1	; 0x800cef <_ZN7TwoWire13rxBufferIndexE>
    6c80:	80 93 ee 0c 	sts	0x0CEE, r24	; 0x800cee <_ZN7TwoWire14rxBufferLengthE>
    6c84:	df 91       	pop	r29
    6c86:	cf 91       	pop	r28
    6c88:	1f 91       	pop	r17
    6c8a:	0f 91       	pop	r16
    6c8c:	ff 90       	pop	r15
    6c8e:	ef 90       	pop	r14
    6c90:	cf 90       	pop	r12
    6c92:	bf 90       	pop	r11
    6c94:	af 90       	pop	r10
    6c96:	7f 90       	pop	r7
    6c98:	6f 90       	pop	r6
    6c9a:	5f 90       	pop	r5
    6c9c:	4f 90       	pop	r4
    6c9e:	08 95       	ret

00006ca0 <_ZN7TwoWire11requestFromEhhh>:
    6ca0:	cf 92       	push	r12
    6ca2:	ef 92       	push	r14
    6ca4:	0f 93       	push	r16
    6ca6:	1f 93       	push	r17
    6ca8:	c2 2e       	mov	r12, r18
    6caa:	e1 2c       	mov	r14, r1
    6cac:	00 e0       	ldi	r16, 0x00	; 0
    6cae:	10 e0       	ldi	r17, 0x00	; 0
    6cb0:	98 01       	movw	r18, r16
    6cb2:	a5 df       	rcall	.-182    	; 0x6bfe <_ZN7TwoWire11requestFromEhhmhh>
    6cb4:	1f 91       	pop	r17
    6cb6:	0f 91       	pop	r16
    6cb8:	ef 90       	pop	r14
    6cba:	cf 90       	pop	r12
    6cbc:	08 95       	ret

00006cbe <_ZN7TwoWire11requestFromEhh>:
    6cbe:	21 e0       	ldi	r18, 0x01	; 1
    6cc0:	ef cf       	rjmp	.-34     	; 0x6ca0 <_ZN7TwoWire11requestFromEhhh>

00006cc2 <_ZN7TwoWire11requestFromEii>:
    6cc2:	21 e0       	ldi	r18, 0x01	; 1
    6cc4:	ed cf       	rjmp	.-38     	; 0x6ca0 <_ZN7TwoWire11requestFromEhhh>

00006cc6 <_ZN7TwoWire15endTransmissionEv>:
    6cc6:	61 e0       	ldi	r22, 0x01	; 1
    6cc8:	88 cf       	rjmp	.-240    	; 0x6bda <_ZN7TwoWire15endTransmissionEh>

00006cca <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    6cca:	8a eb       	ldi	r24, 0xBA	; 186
    6ccc:	9c e0       	ldi	r25, 0x0C	; 12
    6cce:	57 cf       	rjmp	.-338    	; 0x6b7e <_ZN7TwoWireC1Ev>

00006cd0 <__cmpsf2>:
    6cd0:	a8 d0       	rcall	.+336    	; 0x6e22 <__fp_cmp>
    6cd2:	08 f4       	brcc	.+2      	; 0x6cd6 <__cmpsf2+0x6>
    6cd4:	81 e0       	ldi	r24, 0x01	; 1
    6cd6:	08 95       	ret

00006cd8 <__divsf3>:
    6cd8:	0c d0       	rcall	.+24     	; 0x6cf2 <__divsf3x>
    6cda:	de c0       	rjmp	.+444    	; 0x6e98 <__fp_round>
    6cdc:	d6 d0       	rcall	.+428    	; 0x6e8a <__fp_pscB>
    6cde:	40 f0       	brcs	.+16     	; 0x6cf0 <__divsf3+0x18>
    6ce0:	cd d0       	rcall	.+410    	; 0x6e7c <__fp_pscA>
    6ce2:	30 f0       	brcs	.+12     	; 0x6cf0 <__divsf3+0x18>
    6ce4:	21 f4       	brne	.+8      	; 0x6cee <__divsf3+0x16>
    6ce6:	5f 3f       	cpi	r21, 0xFF	; 255
    6ce8:	19 f0       	breq	.+6      	; 0x6cf0 <__divsf3+0x18>
    6cea:	bf c0       	rjmp	.+382    	; 0x6e6a <__fp_inf>
    6cec:	51 11       	cpse	r21, r1
    6cee:	08 c1       	rjmp	.+528    	; 0x6f00 <__fp_szero>
    6cf0:	c2 c0       	rjmp	.+388    	; 0x6e76 <__fp_nan>

00006cf2 <__divsf3x>:
    6cf2:	e3 d0       	rcall	.+454    	; 0x6eba <__fp_split3>
    6cf4:	98 f3       	brcs	.-26     	; 0x6cdc <__divsf3+0x4>

00006cf6 <__divsf3_pse>:
    6cf6:	99 23       	and	r25, r25
    6cf8:	c9 f3       	breq	.-14     	; 0x6cec <__divsf3+0x14>
    6cfa:	55 23       	and	r21, r21
    6cfc:	b1 f3       	breq	.-20     	; 0x6cea <__divsf3+0x12>
    6cfe:	95 1b       	sub	r25, r21
    6d00:	55 0b       	sbc	r21, r21
    6d02:	bb 27       	eor	r27, r27
    6d04:	aa 27       	eor	r26, r26
    6d06:	62 17       	cp	r22, r18
    6d08:	73 07       	cpc	r23, r19
    6d0a:	84 07       	cpc	r24, r20
    6d0c:	38 f0       	brcs	.+14     	; 0x6d1c <__divsf3_pse+0x26>
    6d0e:	9f 5f       	subi	r25, 0xFF	; 255
    6d10:	5f 4f       	sbci	r21, 0xFF	; 255
    6d12:	22 0f       	add	r18, r18
    6d14:	33 1f       	adc	r19, r19
    6d16:	44 1f       	adc	r20, r20
    6d18:	aa 1f       	adc	r26, r26
    6d1a:	a9 f3       	breq	.-22     	; 0x6d06 <__divsf3_pse+0x10>
    6d1c:	33 d0       	rcall	.+102    	; 0x6d84 <__divsf3_pse+0x8e>
    6d1e:	0e 2e       	mov	r0, r30
    6d20:	3a f0       	brmi	.+14     	; 0x6d30 <__divsf3_pse+0x3a>
    6d22:	e0 e8       	ldi	r30, 0x80	; 128
    6d24:	30 d0       	rcall	.+96     	; 0x6d86 <__divsf3_pse+0x90>
    6d26:	91 50       	subi	r25, 0x01	; 1
    6d28:	50 40       	sbci	r21, 0x00	; 0
    6d2a:	e6 95       	lsr	r30
    6d2c:	00 1c       	adc	r0, r0
    6d2e:	ca f7       	brpl	.-14     	; 0x6d22 <__divsf3_pse+0x2c>
    6d30:	29 d0       	rcall	.+82     	; 0x6d84 <__divsf3_pse+0x8e>
    6d32:	fe 2f       	mov	r31, r30
    6d34:	27 d0       	rcall	.+78     	; 0x6d84 <__divsf3_pse+0x8e>
    6d36:	66 0f       	add	r22, r22
    6d38:	77 1f       	adc	r23, r23
    6d3a:	88 1f       	adc	r24, r24
    6d3c:	bb 1f       	adc	r27, r27
    6d3e:	26 17       	cp	r18, r22
    6d40:	37 07       	cpc	r19, r23
    6d42:	48 07       	cpc	r20, r24
    6d44:	ab 07       	cpc	r26, r27
    6d46:	b0 e8       	ldi	r27, 0x80	; 128
    6d48:	09 f0       	breq	.+2      	; 0x6d4c <__divsf3_pse+0x56>
    6d4a:	bb 0b       	sbc	r27, r27
    6d4c:	80 2d       	mov	r24, r0
    6d4e:	bf 01       	movw	r22, r30
    6d50:	ff 27       	eor	r31, r31
    6d52:	93 58       	subi	r25, 0x83	; 131
    6d54:	5f 4f       	sbci	r21, 0xFF	; 255
    6d56:	2a f0       	brmi	.+10     	; 0x6d62 <__divsf3_pse+0x6c>
    6d58:	9e 3f       	cpi	r25, 0xFE	; 254
    6d5a:	51 05       	cpc	r21, r1
    6d5c:	68 f0       	brcs	.+26     	; 0x6d78 <__divsf3_pse+0x82>
    6d5e:	85 c0       	rjmp	.+266    	; 0x6e6a <__fp_inf>
    6d60:	cf c0       	rjmp	.+414    	; 0x6f00 <__fp_szero>
    6d62:	5f 3f       	cpi	r21, 0xFF	; 255
    6d64:	ec f3       	brlt	.-6      	; 0x6d60 <__divsf3_pse+0x6a>
    6d66:	98 3e       	cpi	r25, 0xE8	; 232
    6d68:	dc f3       	brlt	.-10     	; 0x6d60 <__divsf3_pse+0x6a>
    6d6a:	86 95       	lsr	r24
    6d6c:	77 95       	ror	r23
    6d6e:	67 95       	ror	r22
    6d70:	b7 95       	ror	r27
    6d72:	f7 95       	ror	r31
    6d74:	9f 5f       	subi	r25, 0xFF	; 255
    6d76:	c9 f7       	brne	.-14     	; 0x6d6a <__divsf3_pse+0x74>
    6d78:	88 0f       	add	r24, r24
    6d7a:	91 1d       	adc	r25, r1
    6d7c:	96 95       	lsr	r25
    6d7e:	87 95       	ror	r24
    6d80:	97 f9       	bld	r25, 7
    6d82:	08 95       	ret
    6d84:	e1 e0       	ldi	r30, 0x01	; 1
    6d86:	66 0f       	add	r22, r22
    6d88:	77 1f       	adc	r23, r23
    6d8a:	88 1f       	adc	r24, r24
    6d8c:	bb 1f       	adc	r27, r27
    6d8e:	62 17       	cp	r22, r18
    6d90:	73 07       	cpc	r23, r19
    6d92:	84 07       	cpc	r24, r20
    6d94:	ba 07       	cpc	r27, r26
    6d96:	20 f0       	brcs	.+8      	; 0x6da0 <__divsf3_pse+0xaa>
    6d98:	62 1b       	sub	r22, r18
    6d9a:	73 0b       	sbc	r23, r19
    6d9c:	84 0b       	sbc	r24, r20
    6d9e:	ba 0b       	sbc	r27, r26
    6da0:	ee 1f       	adc	r30, r30
    6da2:	88 f7       	brcc	.-30     	; 0x6d86 <__divsf3_pse+0x90>
    6da4:	e0 95       	com	r30
    6da6:	08 95       	ret

00006da8 <__floatunsisf>:
    6da8:	e8 94       	clt
    6daa:	09 c0       	rjmp	.+18     	; 0x6dbe <__floatsisf+0x12>

00006dac <__floatsisf>:
    6dac:	97 fb       	bst	r25, 7
    6dae:	3e f4       	brtc	.+14     	; 0x6dbe <__floatsisf+0x12>
    6db0:	90 95       	com	r25
    6db2:	80 95       	com	r24
    6db4:	70 95       	com	r23
    6db6:	61 95       	neg	r22
    6db8:	7f 4f       	sbci	r23, 0xFF	; 255
    6dba:	8f 4f       	sbci	r24, 0xFF	; 255
    6dbc:	9f 4f       	sbci	r25, 0xFF	; 255
    6dbe:	99 23       	and	r25, r25
    6dc0:	a9 f0       	breq	.+42     	; 0x6dec <__floatsisf+0x40>
    6dc2:	f9 2f       	mov	r31, r25
    6dc4:	96 e9       	ldi	r25, 0x96	; 150
    6dc6:	bb 27       	eor	r27, r27
    6dc8:	93 95       	inc	r25
    6dca:	f6 95       	lsr	r31
    6dcc:	87 95       	ror	r24
    6dce:	77 95       	ror	r23
    6dd0:	67 95       	ror	r22
    6dd2:	b7 95       	ror	r27
    6dd4:	f1 11       	cpse	r31, r1
    6dd6:	f8 cf       	rjmp	.-16     	; 0x6dc8 <__floatsisf+0x1c>
    6dd8:	fa f4       	brpl	.+62     	; 0x6e18 <__floatsisf+0x6c>
    6dda:	bb 0f       	add	r27, r27
    6ddc:	11 f4       	brne	.+4      	; 0x6de2 <__floatsisf+0x36>
    6dde:	60 ff       	sbrs	r22, 0
    6de0:	1b c0       	rjmp	.+54     	; 0x6e18 <__floatsisf+0x6c>
    6de2:	6f 5f       	subi	r22, 0xFF	; 255
    6de4:	7f 4f       	sbci	r23, 0xFF	; 255
    6de6:	8f 4f       	sbci	r24, 0xFF	; 255
    6de8:	9f 4f       	sbci	r25, 0xFF	; 255
    6dea:	16 c0       	rjmp	.+44     	; 0x6e18 <__floatsisf+0x6c>
    6dec:	88 23       	and	r24, r24
    6dee:	11 f0       	breq	.+4      	; 0x6df4 <__floatsisf+0x48>
    6df0:	96 e9       	ldi	r25, 0x96	; 150
    6df2:	11 c0       	rjmp	.+34     	; 0x6e16 <__floatsisf+0x6a>
    6df4:	77 23       	and	r23, r23
    6df6:	21 f0       	breq	.+8      	; 0x6e00 <__floatsisf+0x54>
    6df8:	9e e8       	ldi	r25, 0x8E	; 142
    6dfa:	87 2f       	mov	r24, r23
    6dfc:	76 2f       	mov	r23, r22
    6dfe:	05 c0       	rjmp	.+10     	; 0x6e0a <__floatsisf+0x5e>
    6e00:	66 23       	and	r22, r22
    6e02:	71 f0       	breq	.+28     	; 0x6e20 <__floatsisf+0x74>
    6e04:	96 e8       	ldi	r25, 0x86	; 134
    6e06:	86 2f       	mov	r24, r22
    6e08:	70 e0       	ldi	r23, 0x00	; 0
    6e0a:	60 e0       	ldi	r22, 0x00	; 0
    6e0c:	2a f0       	brmi	.+10     	; 0x6e18 <__floatsisf+0x6c>
    6e0e:	9a 95       	dec	r25
    6e10:	66 0f       	add	r22, r22
    6e12:	77 1f       	adc	r23, r23
    6e14:	88 1f       	adc	r24, r24
    6e16:	da f7       	brpl	.-10     	; 0x6e0e <__floatsisf+0x62>
    6e18:	88 0f       	add	r24, r24
    6e1a:	96 95       	lsr	r25
    6e1c:	87 95       	ror	r24
    6e1e:	97 f9       	bld	r25, 7
    6e20:	08 95       	ret

00006e22 <__fp_cmp>:
    6e22:	99 0f       	add	r25, r25
    6e24:	00 08       	sbc	r0, r0
    6e26:	55 0f       	add	r21, r21
    6e28:	aa 0b       	sbc	r26, r26
    6e2a:	e0 e8       	ldi	r30, 0x80	; 128
    6e2c:	fe ef       	ldi	r31, 0xFE	; 254
    6e2e:	16 16       	cp	r1, r22
    6e30:	17 06       	cpc	r1, r23
    6e32:	e8 07       	cpc	r30, r24
    6e34:	f9 07       	cpc	r31, r25
    6e36:	c0 f0       	brcs	.+48     	; 0x6e68 <__fp_cmp+0x46>
    6e38:	12 16       	cp	r1, r18
    6e3a:	13 06       	cpc	r1, r19
    6e3c:	e4 07       	cpc	r30, r20
    6e3e:	f5 07       	cpc	r31, r21
    6e40:	98 f0       	brcs	.+38     	; 0x6e68 <__fp_cmp+0x46>
    6e42:	62 1b       	sub	r22, r18
    6e44:	73 0b       	sbc	r23, r19
    6e46:	84 0b       	sbc	r24, r20
    6e48:	95 0b       	sbc	r25, r21
    6e4a:	39 f4       	brne	.+14     	; 0x6e5a <__fp_cmp+0x38>
    6e4c:	0a 26       	eor	r0, r26
    6e4e:	61 f0       	breq	.+24     	; 0x6e68 <__fp_cmp+0x46>
    6e50:	23 2b       	or	r18, r19
    6e52:	24 2b       	or	r18, r20
    6e54:	25 2b       	or	r18, r21
    6e56:	21 f4       	brne	.+8      	; 0x6e60 <__fp_cmp+0x3e>
    6e58:	08 95       	ret
    6e5a:	0a 26       	eor	r0, r26
    6e5c:	09 f4       	brne	.+2      	; 0x6e60 <__fp_cmp+0x3e>
    6e5e:	a1 40       	sbci	r26, 0x01	; 1
    6e60:	a6 95       	lsr	r26
    6e62:	8f ef       	ldi	r24, 0xFF	; 255
    6e64:	81 1d       	adc	r24, r1
    6e66:	81 1d       	adc	r24, r1
    6e68:	08 95       	ret

00006e6a <__fp_inf>:
    6e6a:	97 f9       	bld	r25, 7
    6e6c:	9f 67       	ori	r25, 0x7F	; 127
    6e6e:	80 e8       	ldi	r24, 0x80	; 128
    6e70:	70 e0       	ldi	r23, 0x00	; 0
    6e72:	60 e0       	ldi	r22, 0x00	; 0
    6e74:	08 95       	ret

00006e76 <__fp_nan>:
    6e76:	9f ef       	ldi	r25, 0xFF	; 255
    6e78:	80 ec       	ldi	r24, 0xC0	; 192
    6e7a:	08 95       	ret

00006e7c <__fp_pscA>:
    6e7c:	00 24       	eor	r0, r0
    6e7e:	0a 94       	dec	r0
    6e80:	16 16       	cp	r1, r22
    6e82:	17 06       	cpc	r1, r23
    6e84:	18 06       	cpc	r1, r24
    6e86:	09 06       	cpc	r0, r25
    6e88:	08 95       	ret

00006e8a <__fp_pscB>:
    6e8a:	00 24       	eor	r0, r0
    6e8c:	0a 94       	dec	r0
    6e8e:	12 16       	cp	r1, r18
    6e90:	13 06       	cpc	r1, r19
    6e92:	14 06       	cpc	r1, r20
    6e94:	05 06       	cpc	r0, r21
    6e96:	08 95       	ret

00006e98 <__fp_round>:
    6e98:	09 2e       	mov	r0, r25
    6e9a:	03 94       	inc	r0
    6e9c:	00 0c       	add	r0, r0
    6e9e:	11 f4       	brne	.+4      	; 0x6ea4 <__fp_round+0xc>
    6ea0:	88 23       	and	r24, r24
    6ea2:	52 f0       	brmi	.+20     	; 0x6eb8 <__fp_round+0x20>
    6ea4:	bb 0f       	add	r27, r27
    6ea6:	40 f4       	brcc	.+16     	; 0x6eb8 <__fp_round+0x20>
    6ea8:	bf 2b       	or	r27, r31
    6eaa:	11 f4       	brne	.+4      	; 0x6eb0 <__fp_round+0x18>
    6eac:	60 ff       	sbrs	r22, 0
    6eae:	04 c0       	rjmp	.+8      	; 0x6eb8 <__fp_round+0x20>
    6eb0:	6f 5f       	subi	r22, 0xFF	; 255
    6eb2:	7f 4f       	sbci	r23, 0xFF	; 255
    6eb4:	8f 4f       	sbci	r24, 0xFF	; 255
    6eb6:	9f 4f       	sbci	r25, 0xFF	; 255
    6eb8:	08 95       	ret

00006eba <__fp_split3>:
    6eba:	57 fd       	sbrc	r21, 7
    6ebc:	90 58       	subi	r25, 0x80	; 128
    6ebe:	44 0f       	add	r20, r20
    6ec0:	55 1f       	adc	r21, r21
    6ec2:	59 f0       	breq	.+22     	; 0x6eda <__fp_splitA+0x10>
    6ec4:	5f 3f       	cpi	r21, 0xFF	; 255
    6ec6:	71 f0       	breq	.+28     	; 0x6ee4 <__fp_splitA+0x1a>
    6ec8:	47 95       	ror	r20

00006eca <__fp_splitA>:
    6eca:	88 0f       	add	r24, r24
    6ecc:	97 fb       	bst	r25, 7
    6ece:	99 1f       	adc	r25, r25
    6ed0:	61 f0       	breq	.+24     	; 0x6eea <__fp_splitA+0x20>
    6ed2:	9f 3f       	cpi	r25, 0xFF	; 255
    6ed4:	79 f0       	breq	.+30     	; 0x6ef4 <__fp_splitA+0x2a>
    6ed6:	87 95       	ror	r24
    6ed8:	08 95       	ret
    6eda:	12 16       	cp	r1, r18
    6edc:	13 06       	cpc	r1, r19
    6ede:	14 06       	cpc	r1, r20
    6ee0:	55 1f       	adc	r21, r21
    6ee2:	f2 cf       	rjmp	.-28     	; 0x6ec8 <__fp_split3+0xe>
    6ee4:	46 95       	lsr	r20
    6ee6:	f1 df       	rcall	.-30     	; 0x6eca <__fp_splitA>
    6ee8:	08 c0       	rjmp	.+16     	; 0x6efa <__fp_splitA+0x30>
    6eea:	16 16       	cp	r1, r22
    6eec:	17 06       	cpc	r1, r23
    6eee:	18 06       	cpc	r1, r24
    6ef0:	99 1f       	adc	r25, r25
    6ef2:	f1 cf       	rjmp	.-30     	; 0x6ed6 <__fp_splitA+0xc>
    6ef4:	86 95       	lsr	r24
    6ef6:	71 05       	cpc	r23, r1
    6ef8:	61 05       	cpc	r22, r1
    6efa:	08 94       	sec
    6efc:	08 95       	ret

00006efe <__fp_zero>:
    6efe:	e8 94       	clt

00006f00 <__fp_szero>:
    6f00:	bb 27       	eor	r27, r27
    6f02:	66 27       	eor	r22, r22
    6f04:	77 27       	eor	r23, r23
    6f06:	cb 01       	movw	r24, r22
    6f08:	97 f9       	bld	r25, 7
    6f0a:	08 95       	ret

00006f0c <__cxa_pure_virtual>:
    6f0c:	0e 94 10 42 	call	0x8420	; 0x8420 <abort>

00006f10 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    6f10:	1f 92       	push	r1
    6f12:	0f 92       	push	r0
    6f14:	0f b6       	in	r0, 0x3f	; 63
    6f16:	0f 92       	push	r0
    6f18:	11 24       	eor	r1, r1
    6f1a:	2f 93       	push	r18
    6f1c:	8f 93       	push	r24
    6f1e:	9f 93       	push	r25
    6f20:	ef 93       	push	r30
    6f22:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    6f24:	e0 91 20 0d 	lds	r30, 0x0D20	; 0x800d20 <Serial+0x10>
    6f28:	f0 91 21 0d 	lds	r31, 0x0D21	; 0x800d21 <Serial+0x11>
    6f2c:	80 81       	ld	r24, Z
    6f2e:	e0 91 26 0d 	lds	r30, 0x0D26	; 0x800d26 <Serial+0x16>
    6f32:	f0 91 27 0d 	lds	r31, 0x0D27	; 0x800d27 <Serial+0x17>
    6f36:	82 fd       	sbrc	r24, 2
    6f38:	12 c0       	rjmp	.+36     	; 0x6f5e <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    6f3a:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    6f3c:	80 91 29 0d 	lds	r24, 0x0D29	; 0x800d29 <Serial+0x19>
    6f40:	8f 5f       	subi	r24, 0xFF	; 255
    6f42:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    6f44:	20 91 2a 0d 	lds	r18, 0x0D2A	; 0x800d2a <Serial+0x1a>
    6f48:	82 17       	cp	r24, r18
    6f4a:	51 f0       	breq	.+20     	; 0x6f60 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    6f4c:	e0 91 29 0d 	lds	r30, 0x0D29	; 0x800d29 <Serial+0x19>
    6f50:	f0 e0       	ldi	r31, 0x00	; 0
    6f52:	e0 5f       	subi	r30, 0xF0	; 240
    6f54:	f2 4f       	sbci	r31, 0xF2	; 242
    6f56:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    6f58:	80 93 29 0d 	sts	0x0D29, r24	; 0x800d29 <Serial+0x19>
    6f5c:	01 c0       	rjmp	.+2      	; 0x6f60 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    6f5e:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    6f60:	ff 91       	pop	r31
    6f62:	ef 91       	pop	r30
    6f64:	9f 91       	pop	r25
    6f66:	8f 91       	pop	r24
    6f68:	2f 91       	pop	r18
    6f6a:	0f 90       	pop	r0
    6f6c:	0f be       	out	0x3f, r0	; 63
    6f6e:	0f 90       	pop	r0
    6f70:	1f 90       	pop	r1
    6f72:	18 95       	reti

00006f74 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    6f74:	1f 92       	push	r1
    6f76:	0f 92       	push	r0
    6f78:	0f b6       	in	r0, 0x3f	; 63
    6f7a:	0f 92       	push	r0
    6f7c:	11 24       	eor	r1, r1
    6f7e:	2f 93       	push	r18
    6f80:	3f 93       	push	r19
    6f82:	4f 93       	push	r20
    6f84:	5f 93       	push	r21
    6f86:	6f 93       	push	r22
    6f88:	7f 93       	push	r23
    6f8a:	8f 93       	push	r24
    6f8c:	9f 93       	push	r25
    6f8e:	af 93       	push	r26
    6f90:	bf 93       	push	r27
    6f92:	ef 93       	push	r30
    6f94:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    6f96:	80 e1       	ldi	r24, 0x10	; 16
    6f98:	9d e0       	ldi	r25, 0x0D	; 13
    6f9a:	2e d7       	rcall	.+3676   	; 0x7df8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    6f9c:	ff 91       	pop	r31
    6f9e:	ef 91       	pop	r30
    6fa0:	bf 91       	pop	r27
    6fa2:	af 91       	pop	r26
    6fa4:	9f 91       	pop	r25
    6fa6:	8f 91       	pop	r24
    6fa8:	7f 91       	pop	r23
    6faa:	6f 91       	pop	r22
    6fac:	5f 91       	pop	r21
    6fae:	4f 91       	pop	r20
    6fb0:	3f 91       	pop	r19
    6fb2:	2f 91       	pop	r18
    6fb4:	0f 90       	pop	r0
    6fb6:	0f be       	out	0x3f, r0	; 63
    6fb8:	0f 90       	pop	r0
    6fba:	1f 90       	pop	r1
    6fbc:	18 95       	reti

00006fbe <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    6fbe:	80 e1       	ldi	r24, 0x10	; 16
    6fc0:	9d e0       	ldi	r25, 0x0D	; 13
    6fc2:	d0 d6       	rcall	.+3488   	; 0x7d64 <_ZN14HardwareSerial9availableEv>
    6fc4:	21 e0       	ldi	r18, 0x01	; 1
    6fc6:	89 2b       	or	r24, r25
    6fc8:	09 f4       	brne	.+2      	; 0x6fcc <_Z17Serial0_availablev+0xe>
    6fca:	20 e0       	ldi	r18, 0x00	; 0
}
    6fcc:	82 2f       	mov	r24, r18
    6fce:	08 95       	ret

00006fd0 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    6fd0:	e0 e1       	ldi	r30, 0x10	; 16
    6fd2:	fd e0       	ldi	r31, 0x0D	; 13
    6fd4:	13 82       	std	Z+3, r1	; 0x03
    6fd6:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    6fd8:	88 ee       	ldi	r24, 0xE8	; 232
    6fda:	93 e0       	ldi	r25, 0x03	; 3
    6fdc:	a0 e0       	ldi	r26, 0x00	; 0
    6fde:	b0 e0       	ldi	r27, 0x00	; 0
    6fe0:	84 83       	std	Z+4, r24	; 0x04
    6fe2:	95 83       	std	Z+5, r25	; 0x05
    6fe4:	a6 83       	std	Z+6, r26	; 0x06
    6fe6:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    6fe8:	84 e6       	ldi	r24, 0x64	; 100
    6fea:	9a e0       	ldi	r25, 0x0A	; 10
    6fec:	91 83       	std	Z+1, r25	; 0x01
    6fee:	80 83       	st	Z, r24
    6ff0:	85 ec       	ldi	r24, 0xC5	; 197
    6ff2:	90 e0       	ldi	r25, 0x00	; 0
    6ff4:	95 87       	std	Z+13, r25	; 0x0d
    6ff6:	84 87       	std	Z+12, r24	; 0x0c
    6ff8:	84 ec       	ldi	r24, 0xC4	; 196
    6ffa:	90 e0       	ldi	r25, 0x00	; 0
    6ffc:	97 87       	std	Z+15, r25	; 0x0f
    6ffe:	86 87       	std	Z+14, r24	; 0x0e
    7000:	80 ec       	ldi	r24, 0xC0	; 192
    7002:	90 e0       	ldi	r25, 0x00	; 0
    7004:	91 8b       	std	Z+17, r25	; 0x11
    7006:	80 8b       	std	Z+16, r24	; 0x10
    7008:	81 ec       	ldi	r24, 0xC1	; 193
    700a:	90 e0       	ldi	r25, 0x00	; 0
    700c:	93 8b       	std	Z+19, r25	; 0x13
    700e:	82 8b       	std	Z+18, r24	; 0x12
    7010:	82 ec       	ldi	r24, 0xC2	; 194
    7012:	90 e0       	ldi	r25, 0x00	; 0
    7014:	95 8b       	std	Z+21, r25	; 0x15
    7016:	84 8b       	std	Z+20, r24	; 0x14
    7018:	86 ec       	ldi	r24, 0xC6	; 198
    701a:	90 e0       	ldi	r25, 0x00	; 0
    701c:	97 8b       	std	Z+23, r25	; 0x17
    701e:	86 8b       	std	Z+22, r24	; 0x16
    7020:	11 8e       	std	Z+25, r1	; 0x19
    7022:	12 8e       	std	Z+26, r1	; 0x1a
    7024:	13 8e       	std	Z+27, r1	; 0x1b
    7026:	14 8e       	std	Z+28, r1	; 0x1c
    7028:	08 95       	ret

0000702a <_ZNK9IPAddress7printToER5Print>:
        // Too few dots (there must be 3 dots)
        return false;
    }
    _address.bytes[3] = acc;
    return true;
}
    702a:	8f 92       	push	r8
    702c:	9f 92       	push	r9
    702e:	af 92       	push	r10
    7030:	bf 92       	push	r11
    7032:	cf 92       	push	r12
    7034:	df 92       	push	r13
    7036:	ef 92       	push	r14
    7038:	ff 92       	push	r15
    703a:	0f 93       	push	r16
    703c:	1f 93       	push	r17
    703e:	cf 93       	push	r28
    7040:	df 93       	push	r29
    7042:	7c 01       	movw	r14, r24
    7044:	8b 01       	movw	r16, r22
    7046:	4c 01       	movw	r8, r24
    7048:	82 e0       	ldi	r24, 0x02	; 2
    704a:	88 0e       	add	r8, r24
    704c:	91 1c       	adc	r9, r1
    704e:	57 01       	movw	r10, r14
    7050:	e5 e0       	ldi	r30, 0x05	; 5
    7052:	ae 0e       	add	r10, r30
    7054:	b1 1c       	adc	r11, r1
    7056:	c0 e0       	ldi	r28, 0x00	; 0
    7058:	d0 e0       	ldi	r29, 0x00	; 0
    705a:	f4 01       	movw	r30, r8
    705c:	61 91       	ld	r22, Z+
    705e:	4f 01       	movw	r8, r30
    7060:	4a e0       	ldi	r20, 0x0A	; 10
    7062:	50 e0       	ldi	r21, 0x00	; 0
    7064:	c8 01       	movw	r24, r16
    7066:	4b d1       	rcall	.+662    	; 0x72fe <_ZN5Print5printEhi>
    7068:	6c 01       	movw	r12, r24
    706a:	6e e2       	ldi	r22, 0x2E	; 46
    706c:	c8 01       	movw	r24, r16
    706e:	ba d0       	rcall	.+372    	; 0x71e4 <_ZN5Print5printEc>
    7070:	8c 0d       	add	r24, r12
    7072:	9d 1d       	adc	r25, r13
    7074:	c8 0f       	add	r28, r24
    7076:	d9 1f       	adc	r29, r25
    7078:	8a 14       	cp	r8, r10
    707a:	9b 04       	cpc	r9, r11
    707c:	71 f7       	brne	.-36     	; 0x705a <_ZNK9IPAddress7printToER5Print+0x30>
    707e:	4a e0       	ldi	r20, 0x0A	; 10
    7080:	50 e0       	ldi	r21, 0x00	; 0
    7082:	f7 01       	movw	r30, r14
    7084:	65 81       	ldd	r22, Z+5	; 0x05
    7086:	c8 01       	movw	r24, r16
    7088:	3a d1       	rcall	.+628    	; 0x72fe <_ZN5Print5printEhi>
    708a:	8c 0f       	add	r24, r28
    708c:	9d 1f       	adc	r25, r29
    708e:	df 91       	pop	r29
    7090:	cf 91       	pop	r28
    7092:	1f 91       	pop	r17
    7094:	0f 91       	pop	r16
    7096:	ff 90       	pop	r15
    7098:	ef 90       	pop	r14
    709a:	df 90       	pop	r13
    709c:	cf 90       	pop	r12
    709e:	bf 90       	pop	r11
    70a0:	af 90       	pop	r10
    70a2:	9f 90       	pop	r9
    70a4:	8f 90       	pop	r8
    70a6:	08 95       	ret

000070a8 <_ZN9IPAddressC1Ev>:
    70a8:	22 e5       	ldi	r18, 0x52	; 82
    70aa:	3a e0       	ldi	r19, 0x0A	; 10
    70ac:	fc 01       	movw	r30, r24
    70ae:	31 83       	std	Z+1, r19	; 0x01
    70b0:	20 83       	st	Z, r18
    70b2:	12 82       	std	Z+2, r1	; 0x02
    70b4:	13 82       	std	Z+3, r1	; 0x03
    70b6:	14 82       	std	Z+4, r1	; 0x04
    70b8:	15 82       	std	Z+5, r1	; 0x05
    70ba:	08 95       	ret

000070bc <_ZN9IPAddressC1Ehhhh>:
    70bc:	0f 93       	push	r16
    70be:	fc 01       	movw	r30, r24
    70c0:	82 e5       	ldi	r24, 0x52	; 82
    70c2:	9a e0       	ldi	r25, 0x0A	; 10
    70c4:	91 83       	std	Z+1, r25	; 0x01
    70c6:	80 83       	st	Z, r24
    70c8:	62 83       	std	Z+2, r22	; 0x02
    70ca:	43 83       	std	Z+3, r20	; 0x03
    70cc:	24 83       	std	Z+4, r18	; 0x04
    70ce:	05 83       	std	Z+5, r16	; 0x05
    70d0:	0f 91       	pop	r16
    70d2:	08 95       	ret

000070d4 <_ZN9IPAddressaSEPKh>:

IPAddress& IPAddress::operator=(const uint8_t *address)
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
    70d4:	dc 01       	movw	r26, r24
    70d6:	12 96       	adiw	r26, 0x02	; 2
    70d8:	24 e0       	ldi	r18, 0x04	; 4
    70da:	fb 01       	movw	r30, r22
    70dc:	01 90       	ld	r0, Z+
    70de:	0d 92       	st	X+, r0
    70e0:	2a 95       	dec	r18
    70e2:	e1 f7       	brne	.-8      	; 0x70dc <_ZN9IPAddressaSEPKh+0x8>
    return *this;
}
    70e4:	08 95       	ret

000070e6 <initVariant>:
    70e6:	08 95       	ret

000070e8 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    70e8:	e4 d1       	rcall	.+968    	; 0x74b2 <init>

	initVariant();
    70ea:	fd df       	rcall	.-6      	; 0x70e6 <initVariant>
    70ec:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <setup>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    70f0:	cf ee       	ldi	r28, 0xEF	; 239
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    70f2:	de e3       	ldi	r29, 0x3E	; 62
    70f4:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <loop>
#endif
	
	setup();
    
	for (;;) {
		loop();
    70f8:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
    70fa:	e1 f3       	breq	.-8      	; 0x70f4 <main+0xc>
    70fc:	70 d6       	rcall	.+3296   	; 0x7dde <_Z14serialEventRunv>
    70fe:	fa cf       	rjmp	.-12     	; 0x70f4 <main+0xc>

00007100 <_ZN5Print5writeEPKhj>:
    7100:	cf 92       	push	r12
size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    7102:	df 92       	push	r13
    7104:	ef 92       	push	r14
    7106:	ff 92       	push	r15
    7108:	0f 93       	push	r16
    710a:	1f 93       	push	r17
    710c:	cf 93       	push	r28
    710e:	df 93       	push	r29
    7110:	6c 01       	movw	r12, r24
    7112:	7a 01       	movw	r14, r20
    7114:	8b 01       	movw	r16, r22
    7116:	c0 e0       	ldi	r28, 0x00	; 0
    7118:	d0 e0       	ldi	r29, 0x00	; 0
    711a:	ce 15       	cp	r28, r14
    711c:	df 05       	cpc	r29, r15
    711e:	81 f0       	breq	.+32     	; 0x7140 <_ZN5Print5writeEPKhj+0x40>
    7120:	d8 01       	movw	r26, r16
    7122:	6d 91       	ld	r22, X+
    7124:	8d 01       	movw	r16, r26
    7126:	d6 01       	movw	r26, r12
    7128:	ed 91       	ld	r30, X+
    712a:	fc 91       	ld	r31, X
    712c:	01 90       	ld	r0, Z+
    712e:	f0 81       	ld	r31, Z
    7130:	e0 2d       	mov	r30, r0
    7132:	c6 01       	movw	r24, r12
    7134:	09 95       	icall
    7136:	89 2b       	or	r24, r25
    7138:	11 f0       	breq	.+4      	; 0x713e <_ZN5Print5writeEPKhj+0x3e>
    713a:	21 96       	adiw	r28, 0x01	; 1
    713c:	ee cf       	rjmp	.-36     	; 0x711a <_ZN5Print5writeEPKhj+0x1a>
    713e:	7e 01       	movw	r14, r28
    7140:	c7 01       	movw	r24, r14
    7142:	df 91       	pop	r29
    7144:	cf 91       	pop	r28
    7146:	1f 91       	pop	r17
    7148:	0f 91       	pop	r16
    714a:	ff 90       	pop	r15
    714c:	ef 90       	pop	r14
    714e:	df 90       	pop	r13
    7150:	cf 90       	pop	r12
    7152:	08 95       	ret

00007154 <_ZN5Print5writeEPKc>:
    7154:	61 15       	cp	r22, r1
    7156:	71 05       	cpc	r23, r1
    7158:	79 f0       	breq	.+30     	; 0x7178 <_ZN5Print5writeEPKc+0x24>
    715a:	fb 01       	movw	r30, r22
    715c:	01 90       	ld	r0, Z+
    715e:	00 20       	and	r0, r0
    7160:	e9 f7       	brne	.-6      	; 0x715c <_ZN5Print5writeEPKc+0x8>
    7162:	31 97       	sbiw	r30, 0x01	; 1
    7164:	af 01       	movw	r20, r30
    7166:	46 1b       	sub	r20, r22
    7168:	57 0b       	sbc	r21, r23
    716a:	dc 01       	movw	r26, r24
    716c:	ed 91       	ld	r30, X+
    716e:	fc 91       	ld	r31, X
    7170:	02 80       	ldd	r0, Z+2	; 0x02
    7172:	f3 81       	ldd	r31, Z+3	; 0x03
    7174:	e0 2d       	mov	r30, r0
    7176:	09 94       	ijmp
    7178:	80 e0       	ldi	r24, 0x00	; 0
    717a:	90 e0       	ldi	r25, 0x00	; 0
    717c:	08 95       	ret

0000717e <_ZN5Print5printEPK19__FlashStringHelper>:
    717e:	ef 92       	push	r14
    7180:	ff 92       	push	r15
    7182:	0f 93       	push	r16
    7184:	1f 93       	push	r17
    7186:	cf 93       	push	r28
    7188:	df 93       	push	r29
    718a:	8c 01       	movw	r16, r24
    718c:	7b 01       	movw	r14, r22
    718e:	c0 e0       	ldi	r28, 0x00	; 0
    7190:	d0 e0       	ldi	r29, 0x00	; 0
    7192:	f7 01       	movw	r30, r14
    7194:	ec 0f       	add	r30, r28
    7196:	fd 1f       	adc	r31, r29
    7198:	64 91       	lpm	r22, Z
    719a:	66 23       	and	r22, r22
    719c:	61 f0       	breq	.+24     	; 0x71b6 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    719e:	d8 01       	movw	r26, r16
    71a0:	ed 91       	ld	r30, X+
    71a2:	fc 91       	ld	r31, X
    71a4:	01 90       	ld	r0, Z+
    71a6:	f0 81       	ld	r31, Z
    71a8:	e0 2d       	mov	r30, r0
    71aa:	c8 01       	movw	r24, r16
    71ac:	09 95       	icall
    71ae:	89 2b       	or	r24, r25
    71b0:	11 f0       	breq	.+4      	; 0x71b6 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    71b2:	21 96       	adiw	r28, 0x01	; 1
    71b4:	ee cf       	rjmp	.-36     	; 0x7192 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    71b6:	ce 01       	movw	r24, r28
    71b8:	df 91       	pop	r29
    71ba:	cf 91       	pop	r28
    71bc:	1f 91       	pop	r17
    71be:	0f 91       	pop	r16
    71c0:	ff 90       	pop	r15
    71c2:	ef 90       	pop	r14
    71c4:	08 95       	ret

000071c6 <_ZN5Print5printERK6String>:
    71c6:	db 01       	movw	r26, r22
    71c8:	14 96       	adiw	r26, 0x04	; 4
    71ca:	4d 91       	ld	r20, X+
    71cc:	5c 91       	ld	r21, X
    71ce:	15 97       	sbiw	r26, 0x05	; 5
    71d0:	6d 91       	ld	r22, X+
    71d2:	7c 91       	ld	r23, X
    71d4:	dc 01       	movw	r26, r24
    71d6:	ed 91       	ld	r30, X+
    71d8:	fc 91       	ld	r31, X
    71da:	02 80       	ldd	r0, Z+2	; 0x02
    71dc:	f3 81       	ldd	r31, Z+3	; 0x03
    71de:	e0 2d       	mov	r30, r0
    71e0:	09 94       	ijmp

000071e2 <_ZN5Print5printEPKc>:
    71e2:	b8 cf       	rjmp	.-144    	; 0x7154 <_ZN5Print5writeEPKc>

000071e4 <_ZN5Print5printEc>:
    71e4:	dc 01       	movw	r26, r24
    71e6:	ed 91       	ld	r30, X+
    71e8:	fc 91       	ld	r31, X
    71ea:	01 90       	ld	r0, Z+
    71ec:	f0 81       	ld	r31, Z
    71ee:	e0 2d       	mov	r30, r0
    71f0:	09 94       	ijmp

000071f2 <_ZN5Print7printlnEv>:
    71f2:	68 e1       	ldi	r22, 0x18	; 24
    71f4:	73 e0       	ldi	r23, 0x03	; 3
    71f6:	ae cf       	rjmp	.-164    	; 0x7154 <_ZN5Print5writeEPKc>

000071f8 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    71f8:	0f 93       	push	r16
    71fa:	1f 93       	push	r17
    71fc:	cf 93       	push	r28
    71fe:	df 93       	push	r29
    7200:	ec 01       	movw	r28, r24
    7202:	bd df       	rcall	.-134    	; 0x717e <_ZN5Print5printEPK19__FlashStringHelper>
    7204:	8c 01       	movw	r16, r24
    7206:	ce 01       	movw	r24, r28
    7208:	f4 df       	rcall	.-24     	; 0x71f2 <_ZN5Print7printlnEv>
    720a:	80 0f       	add	r24, r16
    720c:	91 1f       	adc	r25, r17
    720e:	df 91       	pop	r29
    7210:	cf 91       	pop	r28
    7212:	1f 91       	pop	r17
    7214:	0f 91       	pop	r16
    7216:	08 95       	ret

00007218 <_ZN5Print7printlnERK6String>:
    7218:	0f 93       	push	r16
    721a:	1f 93       	push	r17
    721c:	cf 93       	push	r28
    721e:	df 93       	push	r29
    7220:	ec 01       	movw	r28, r24
    7222:	d1 df       	rcall	.-94     	; 0x71c6 <_ZN5Print5printERK6String>
    7224:	8c 01       	movw	r16, r24
    7226:	ce 01       	movw	r24, r28
    7228:	e4 df       	rcall	.-56     	; 0x71f2 <_ZN5Print7printlnEv>
    722a:	80 0f       	add	r24, r16
    722c:	91 1f       	adc	r25, r17
    722e:	df 91       	pop	r29
    7230:	cf 91       	pop	r28
    7232:	1f 91       	pop	r17
    7234:	0f 91       	pop	r16
    7236:	08 95       	ret

00007238 <_ZN5Print7printlnEPKc>:
    7238:	0f 93       	push	r16
    723a:	1f 93       	push	r17
    723c:	cf 93       	push	r28
    723e:	df 93       	push	r29
    7240:	ec 01       	movw	r28, r24
    7242:	88 df       	rcall	.-240    	; 0x7154 <_ZN5Print5writeEPKc>
    7244:	8c 01       	movw	r16, r24
    7246:	ce 01       	movw	r24, r28
    7248:	d4 df       	rcall	.-88     	; 0x71f2 <_ZN5Print7printlnEv>
    724a:	80 0f       	add	r24, r16
    724c:	91 1f       	adc	r25, r17
    724e:	df 91       	pop	r29
    7250:	cf 91       	pop	r28
    7252:	1f 91       	pop	r17
    7254:	0f 91       	pop	r16
    7256:	08 95       	ret

00007258 <_ZN5Print11printNumberEmh>:
    7258:	8f 92       	push	r8
    725a:	9f 92       	push	r9
    725c:	af 92       	push	r10
    725e:	bf 92       	push	r11
    7260:	ef 92       	push	r14
    7262:	ff 92       	push	r15
    7264:	0f 93       	push	r16
    7266:	1f 93       	push	r17
    7268:	cf 93       	push	r28
    726a:	df 93       	push	r29
    726c:	cd b7       	in	r28, 0x3d	; 61
    726e:	de b7       	in	r29, 0x3e	; 62
    7270:	a1 97       	sbiw	r28, 0x21	; 33
    7272:	0f b6       	in	r0, 0x3f	; 63
    7274:	f8 94       	cli
    7276:	de bf       	out	0x3e, r29	; 62
    7278:	0f be       	out	0x3f, r0	; 63
    727a:	cd bf       	out	0x3d, r28	; 61
    727c:	7c 01       	movw	r14, r24
    727e:	fa 01       	movw	r30, r20
    7280:	cb 01       	movw	r24, r22
    7282:	19 a2       	std	Y+33, r1	; 0x21
    7284:	22 30       	cpi	r18, 0x02	; 2
    7286:	08 f4       	brcc	.+2      	; 0x728a <_ZN5Print11printNumberEmh+0x32>
    7288:	2a e0       	ldi	r18, 0x0A	; 10
    728a:	8e 01       	movw	r16, r28
    728c:	0f 5d       	subi	r16, 0xDF	; 223
    728e:	1f 4f       	sbci	r17, 0xFF	; 255
    7290:	82 2e       	mov	r8, r18
    7292:	91 2c       	mov	r9, r1
    7294:	a1 2c       	mov	r10, r1
    7296:	b1 2c       	mov	r11, r1
    7298:	bf 01       	movw	r22, r30
    729a:	a5 01       	movw	r20, r10
    729c:	94 01       	movw	r18, r8
    729e:	5c d6       	rcall	.+3256   	; 0x7f58 <__udivmodsi4>
    72a0:	f9 01       	movw	r30, r18
    72a2:	ca 01       	movw	r24, r20
    72a4:	01 50       	subi	r16, 0x01	; 1
    72a6:	11 09       	sbc	r17, r1
    72a8:	6a 30       	cpi	r22, 0x0A	; 10
    72aa:	10 f4       	brcc	.+4      	; 0x72b0 <_ZN5Print11printNumberEmh+0x58>
    72ac:	60 5d       	subi	r22, 0xD0	; 208
    72ae:	01 c0       	rjmp	.+2      	; 0x72b2 <_ZN5Print11printNumberEmh+0x5a>
    72b0:	69 5c       	subi	r22, 0xC9	; 201
    72b2:	d8 01       	movw	r26, r16
    72b4:	6c 93       	st	X, r22
    72b6:	23 2b       	or	r18, r19
    72b8:	24 2b       	or	r18, r20
    72ba:	25 2b       	or	r18, r21
    72bc:	69 f7       	brne	.-38     	; 0x7298 <_ZN5Print11printNumberEmh+0x40>
    72be:	b8 01       	movw	r22, r16
    72c0:	c7 01       	movw	r24, r14
    72c2:	48 df       	rcall	.-368    	; 0x7154 <_ZN5Print5writeEPKc>
    72c4:	a1 96       	adiw	r28, 0x21	; 33
    72c6:	0f b6       	in	r0, 0x3f	; 63
    72c8:	f8 94       	cli
    72ca:	de bf       	out	0x3e, r29	; 62
    72cc:	0f be       	out	0x3f, r0	; 63
    72ce:	cd bf       	out	0x3d, r28	; 61
    72d0:	df 91       	pop	r29
    72d2:	cf 91       	pop	r28
    72d4:	1f 91       	pop	r17
    72d6:	0f 91       	pop	r16
    72d8:	ff 90       	pop	r15
    72da:	ef 90       	pop	r14
    72dc:	bf 90       	pop	r11
    72de:	af 90       	pop	r10
    72e0:	9f 90       	pop	r9
    72e2:	8f 90       	pop	r8
    72e4:	08 95       	ret

000072e6 <_ZN5Print5printEmi>:
    72e6:	21 15       	cp	r18, r1
    72e8:	31 05       	cpc	r19, r1
    72ea:	41 f4       	brne	.+16     	; 0x72fc <_ZN5Print5printEmi+0x16>
    72ec:	dc 01       	movw	r26, r24
    72ee:	ed 91       	ld	r30, X+
    72f0:	fc 91       	ld	r31, X
    72f2:	01 90       	ld	r0, Z+
    72f4:	f0 81       	ld	r31, Z
    72f6:	e0 2d       	mov	r30, r0
    72f8:	64 2f       	mov	r22, r20
    72fa:	09 94       	ijmp
    72fc:	ad cf       	rjmp	.-166    	; 0x7258 <_ZN5Print11printNumberEmh>

000072fe <_ZN5Print5printEhi>:
    72fe:	9a 01       	movw	r18, r20
    7300:	46 2f       	mov	r20, r22
    7302:	50 e0       	ldi	r21, 0x00	; 0
    7304:	60 e0       	ldi	r22, 0x00	; 0
    7306:	70 e0       	ldi	r23, 0x00	; 0
    7308:	ee cf       	rjmp	.-36     	; 0x72e6 <_ZN5Print5printEmi>

0000730a <_ZN5Print5printEji>:
    730a:	9a 01       	movw	r18, r20
    730c:	ab 01       	movw	r20, r22
    730e:	60 e0       	ldi	r22, 0x00	; 0
    7310:	70 e0       	ldi	r23, 0x00	; 0
    7312:	e9 cf       	rjmp	.-46     	; 0x72e6 <_ZN5Print5printEmi>

00007314 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    7314:	0f 93       	push	r16
    7316:	1f 93       	push	r17
    7318:	cf 93       	push	r28
    731a:	df 93       	push	r29
    731c:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    731e:	e3 df       	rcall	.-58     	; 0x72e6 <_ZN5Print5printEmi>
    7320:	8c 01       	movw	r16, r24
  n += println();
    7322:	ce 01       	movw	r24, r28
    7324:	66 df       	rcall	.-308    	; 0x71f2 <_ZN5Print7printlnEv>
  return n;
}
    7326:	80 0f       	add	r24, r16
    7328:	91 1f       	adc	r25, r17
    732a:	df 91       	pop	r29
    732c:	cf 91       	pop	r28
    732e:	1f 91       	pop	r17
    7330:	0f 91       	pop	r16
    7332:	08 95       	ret

00007334 <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    7334:	1f 92       	push	r1
    7336:	0f 92       	push	r0
    7338:	0f b6       	in	r0, 0x3f	; 63
    733a:	0f 92       	push	r0
    733c:	11 24       	eor	r1, r1
    733e:	2f 93       	push	r18
    7340:	3f 93       	push	r19
    7342:	8f 93       	push	r24
    7344:	9f 93       	push	r25
    7346:	af 93       	push	r26
    7348:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    734a:	80 91 ae 0d 	lds	r24, 0x0DAE	; 0x800dae <timer0_millis>
    734e:	90 91 af 0d 	lds	r25, 0x0DAF	; 0x800daf <timer0_millis+0x1>
    7352:	a0 91 b0 0d 	lds	r26, 0x0DB0	; 0x800db0 <timer0_millis+0x2>
    7356:	b0 91 b1 0d 	lds	r27, 0x0DB1	; 0x800db1 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    735a:	30 91 ad 0d 	lds	r19, 0x0DAD	; 0x800dad <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    735e:	23 e0       	ldi	r18, 0x03	; 3
    7360:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    7362:	2d 37       	cpi	r18, 0x7D	; 125
    7364:	20 f4       	brcc	.+8      	; 0x736e <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    7366:	01 96       	adiw	r24, 0x01	; 1
    7368:	a1 1d       	adc	r26, r1
    736a:	b1 1d       	adc	r27, r1
    736c:	05 c0       	rjmp	.+10     	; 0x7378 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    736e:	26 e8       	ldi	r18, 0x86	; 134
    7370:	23 0f       	add	r18, r19
		m += 1;
    7372:	02 96       	adiw	r24, 0x02	; 2
    7374:	a1 1d       	adc	r26, r1
    7376:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    7378:	20 93 ad 0d 	sts	0x0DAD, r18	; 0x800dad <timer0_fract>
	timer0_millis = m;
    737c:	80 93 ae 0d 	sts	0x0DAE, r24	; 0x800dae <timer0_millis>
    7380:	90 93 af 0d 	sts	0x0DAF, r25	; 0x800daf <timer0_millis+0x1>
    7384:	a0 93 b0 0d 	sts	0x0DB0, r26	; 0x800db0 <timer0_millis+0x2>
    7388:	b0 93 b1 0d 	sts	0x0DB1, r27	; 0x800db1 <timer0_millis+0x3>
	timer0_overflow_count++;
    738c:	80 91 b2 0d 	lds	r24, 0x0DB2	; 0x800db2 <timer0_overflow_count>
    7390:	90 91 b3 0d 	lds	r25, 0x0DB3	; 0x800db3 <timer0_overflow_count+0x1>
    7394:	a0 91 b4 0d 	lds	r26, 0x0DB4	; 0x800db4 <timer0_overflow_count+0x2>
    7398:	b0 91 b5 0d 	lds	r27, 0x0DB5	; 0x800db5 <timer0_overflow_count+0x3>
    739c:	01 96       	adiw	r24, 0x01	; 1
    739e:	a1 1d       	adc	r26, r1
    73a0:	b1 1d       	adc	r27, r1
    73a2:	80 93 b2 0d 	sts	0x0DB2, r24	; 0x800db2 <timer0_overflow_count>
    73a6:	90 93 b3 0d 	sts	0x0DB3, r25	; 0x800db3 <timer0_overflow_count+0x1>
    73aa:	a0 93 b4 0d 	sts	0x0DB4, r26	; 0x800db4 <timer0_overflow_count+0x2>
    73ae:	b0 93 b5 0d 	sts	0x0DB5, r27	; 0x800db5 <timer0_overflow_count+0x3>
}
    73b2:	bf 91       	pop	r27
    73b4:	af 91       	pop	r26
    73b6:	9f 91       	pop	r25
    73b8:	8f 91       	pop	r24
    73ba:	3f 91       	pop	r19
    73bc:	2f 91       	pop	r18
    73be:	0f 90       	pop	r0
    73c0:	0f be       	out	0x3f, r0	; 63
    73c2:	0f 90       	pop	r0
    73c4:	1f 90       	pop	r1
    73c6:	18 95       	reti

000073c8 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    73c8:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    73ca:	f8 94       	cli
	m = timer0_millis;
    73cc:	60 91 ae 0d 	lds	r22, 0x0DAE	; 0x800dae <timer0_millis>
    73d0:	70 91 af 0d 	lds	r23, 0x0DAF	; 0x800daf <timer0_millis+0x1>
    73d4:	80 91 b0 0d 	lds	r24, 0x0DB0	; 0x800db0 <timer0_millis+0x2>
    73d8:	90 91 b1 0d 	lds	r25, 0x0DB1	; 0x800db1 <timer0_millis+0x3>
	SREG = oldSREG;
    73dc:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    73de:	08 95       	ret

000073e0 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    73e0:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    73e2:	f8 94       	cli
	m = timer0_overflow_count;
    73e4:	80 91 b2 0d 	lds	r24, 0x0DB2	; 0x800db2 <timer0_overflow_count>
    73e8:	90 91 b3 0d 	lds	r25, 0x0DB3	; 0x800db3 <timer0_overflow_count+0x1>
    73ec:	a0 91 b4 0d 	lds	r26, 0x0DB4	; 0x800db4 <timer0_overflow_count+0x2>
    73f0:	b0 91 b5 0d 	lds	r27, 0x0DB5	; 0x800db5 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    73f4:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    73f6:	a8 9b       	sbis	0x15, 0	; 21
    73f8:	05 c0       	rjmp	.+10     	; 0x7404 <micros+0x24>
    73fa:	2f 3f       	cpi	r18, 0xFF	; 255
    73fc:	19 f0       	breq	.+6      	; 0x7404 <micros+0x24>
		m++;
    73fe:	01 96       	adiw	r24, 0x01	; 1
    7400:	a1 1d       	adc	r26, r1
    7402:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    7404:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    7406:	ba 2f       	mov	r27, r26
    7408:	a9 2f       	mov	r26, r25
    740a:	98 2f       	mov	r25, r24
    740c:	88 27       	eor	r24, r24
    740e:	82 0f       	add	r24, r18
    7410:	91 1d       	adc	r25, r1
    7412:	a1 1d       	adc	r26, r1
    7414:	b1 1d       	adc	r27, r1
    7416:	bc 01       	movw	r22, r24
    7418:	cd 01       	movw	r24, r26
    741a:	42 e0       	ldi	r20, 0x02	; 2
    741c:	66 0f       	add	r22, r22
    741e:	77 1f       	adc	r23, r23
    7420:	88 1f       	adc	r24, r24
    7422:	99 1f       	adc	r25, r25
    7424:	4a 95       	dec	r20
    7426:	d1 f7       	brne	.-12     	; 0x741c <micros+0x3c>
}
    7428:	08 95       	ret

0000742a <delay>:

void delay(unsigned long ms)
{
    742a:	8f 92       	push	r8
    742c:	9f 92       	push	r9
    742e:	af 92       	push	r10
    7430:	bf 92       	push	r11
    7432:	cf 92       	push	r12
    7434:	df 92       	push	r13
    7436:	ef 92       	push	r14
    7438:	ff 92       	push	r15
    743a:	6b 01       	movw	r12, r22
    743c:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    743e:	d0 df       	rcall	.-96     	; 0x73e0 <micros>
    7440:	4b 01       	movw	r8, r22
    7442:	5c 01       	movw	r10, r24

	while (ms > 0) {
    7444:	c1 14       	cp	r12, r1
    7446:	d1 04       	cpc	r13, r1
    7448:	e1 04       	cpc	r14, r1
    744a:	f1 04       	cpc	r15, r1
		yield();
    744c:	f1 f0       	breq	.+60     	; 0x748a <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    744e:	63 d5       	rcall	.+2758   	; 0x7f16 <yield>
    7450:	c7 df       	rcall	.-114    	; 0x73e0 <micros>
    7452:	dc 01       	movw	r26, r24
    7454:	cb 01       	movw	r24, r22
    7456:	88 19       	sub	r24, r8
    7458:	99 09       	sbc	r25, r9
    745a:	aa 09       	sbc	r26, r10
    745c:	bb 09       	sbc	r27, r11
    745e:	88 3e       	cpi	r24, 0xE8	; 232
    7460:	93 40       	sbci	r25, 0x03	; 3
    7462:	a1 05       	cpc	r26, r1
    7464:	b1 05       	cpc	r27, r1
    7466:	70 f3       	brcs	.-36     	; 0x7444 <delay+0x1a>
			ms--;
    7468:	21 e0       	ldi	r18, 0x01	; 1
    746a:	c2 1a       	sub	r12, r18
    746c:	d1 08       	sbc	r13, r1
    746e:	e1 08       	sbc	r14, r1
    7470:	f1 08       	sbc	r15, r1
			start += 1000;
    7472:	88 ee       	ldi	r24, 0xE8	; 232
    7474:	88 0e       	add	r8, r24
    7476:	83 e0       	ldi	r24, 0x03	; 3
    7478:	98 1e       	adc	r9, r24
    747a:	a1 1c       	adc	r10, r1
    747c:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    747e:	c1 14       	cp	r12, r1
    7480:	d1 04       	cpc	r13, r1
    7482:	e1 04       	cpc	r14, r1
    7484:	f1 04       	cpc	r15, r1
    7486:	21 f7       	brne	.-56     	; 0x7450 <delay+0x26>
    7488:	dd cf       	rjmp	.-70     	; 0x7444 <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    748a:	ff 90       	pop	r15
    748c:	ef 90       	pop	r14
    748e:	df 90       	pop	r13
    7490:	cf 90       	pop	r12
    7492:	bf 90       	pop	r11
    7494:	af 90       	pop	r10
    7496:	9f 90       	pop	r9
    7498:	8f 90       	pop	r8
    749a:	08 95       	ret

0000749c <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    749c:	82 30       	cpi	r24, 0x02	; 2
    749e:	91 05       	cpc	r25, r1
    74a0:	38 f0       	brcs	.+14     	; 0x74b0 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    74a2:	88 0f       	add	r24, r24
    74a4:	99 1f       	adc	r25, r25
    74a6:	88 0f       	add	r24, r24
    74a8:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    74aa:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    74ac:	01 97       	sbiw	r24, 0x01	; 1
    74ae:	f1 f7       	brne	.-4      	; 0x74ac <delayMicroseconds+0x10>
    74b0:	08 95       	ret

000074b2 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    74b2:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    74b4:	84 b5       	in	r24, 0x24	; 36
    74b6:	82 60       	ori	r24, 0x02	; 2
    74b8:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    74ba:	84 b5       	in	r24, 0x24	; 36
    74bc:	81 60       	ori	r24, 0x01	; 1
    74be:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    74c0:	85 b5       	in	r24, 0x25	; 37
    74c2:	82 60       	ori	r24, 0x02	; 2
    74c4:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    74c6:	85 b5       	in	r24, 0x25	; 37
    74c8:	81 60       	ori	r24, 0x01	; 1
    74ca:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    74cc:	ee e6       	ldi	r30, 0x6E	; 110
    74ce:	f0 e0       	ldi	r31, 0x00	; 0
    74d0:	80 81       	ld	r24, Z
    74d2:	81 60       	ori	r24, 0x01	; 1
    74d4:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    74d6:	e1 e8       	ldi	r30, 0x81	; 129
    74d8:	f0 e0       	ldi	r31, 0x00	; 0
    74da:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    74dc:	80 81       	ld	r24, Z
    74de:	82 60       	ori	r24, 0x02	; 2
    74e0:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    74e2:	80 81       	ld	r24, Z
    74e4:	81 60       	ori	r24, 0x01	; 1
    74e6:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    74e8:	e0 e8       	ldi	r30, 0x80	; 128
    74ea:	f0 e0       	ldi	r31, 0x00	; 0
    74ec:	80 81       	ld	r24, Z
    74ee:	81 60       	ori	r24, 0x01	; 1
    74f0:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    74f2:	e1 eb       	ldi	r30, 0xB1	; 177
    74f4:	f0 e0       	ldi	r31, 0x00	; 0
    74f6:	80 81       	ld	r24, Z
    74f8:	84 60       	ori	r24, 0x04	; 4
    74fa:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    74fc:	e0 eb       	ldi	r30, 0xB0	; 176
    74fe:	f0 e0       	ldi	r31, 0x00	; 0
    7500:	80 81       	ld	r24, Z
    7502:	81 60       	ori	r24, 0x01	; 1
    7504:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    7506:	ea e7       	ldi	r30, 0x7A	; 122
    7508:	f0 e0       	ldi	r31, 0x00	; 0
    750a:	80 81       	ld	r24, Z
    750c:	84 60       	ori	r24, 0x04	; 4
    750e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    7510:	80 81       	ld	r24, Z
    7512:	82 60       	ori	r24, 0x02	; 2
    7514:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    7516:	80 81       	ld	r24, Z
    7518:	81 60       	ori	r24, 0x01	; 1
    751a:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    751c:	80 81       	ld	r24, Z
    751e:	80 68       	ori	r24, 0x80	; 128
    7520:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    7522:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    7526:	08 95       	ret

00007528 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    7528:	83 30       	cpi	r24, 0x03	; 3
    752a:	81 f0       	breq	.+32     	; 0x754c <turnOffPWM+0x24>
    752c:	28 f4       	brcc	.+10     	; 0x7538 <turnOffPWM+0x10>
    752e:	81 30       	cpi	r24, 0x01	; 1
    7530:	99 f0       	breq	.+38     	; 0x7558 <turnOffPWM+0x30>
    7532:	82 30       	cpi	r24, 0x02	; 2
    7534:	a1 f0       	breq	.+40     	; 0x755e <turnOffPWM+0x36>
    7536:	08 95       	ret
    7538:	87 30       	cpi	r24, 0x07	; 7
    753a:	a9 f0       	breq	.+42     	; 0x7566 <turnOffPWM+0x3e>
    753c:	88 30       	cpi	r24, 0x08	; 8
    753e:	b9 f0       	breq	.+46     	; 0x756e <turnOffPWM+0x46>
    7540:	84 30       	cpi	r24, 0x04	; 4
    7542:	d1 f4       	brne	.+52     	; 0x7578 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    7544:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    7548:	8f 7d       	andi	r24, 0xDF	; 223
    754a:	03 c0       	rjmp	.+6      	; 0x7552 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    754c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    7550:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    7552:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    7556:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    7558:	84 b5       	in	r24, 0x24	; 36
    755a:	8f 77       	andi	r24, 0x7F	; 127
    755c:	02 c0       	rjmp	.+4      	; 0x7562 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    755e:	84 b5       	in	r24, 0x24	; 36
    7560:	8f 7d       	andi	r24, 0xDF	; 223
    7562:	84 bd       	out	0x24, r24	; 36
    7564:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    7566:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    756a:	8f 77       	andi	r24, 0x7F	; 127
    756c:	03 c0       	rjmp	.+6      	; 0x7574 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    756e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    7572:	8f 7d       	andi	r24, 0xDF	; 223
    7574:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    7578:	08 95       	ret

0000757a <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    757a:	cf 93       	push	r28
    757c:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    757e:	90 e0       	ldi	r25, 0x00	; 0
    7580:	fc 01       	movw	r30, r24
    7582:	ec 5a       	subi	r30, 0xAC	; 172
    7584:	fd 4f       	sbci	r31, 0xFD	; 253
    7586:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    7588:	fc 01       	movw	r30, r24
    758a:	ec 58       	subi	r30, 0x8C	; 140
    758c:	fd 4f       	sbci	r31, 0xFD	; 253
    758e:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    7590:	88 23       	and	r24, r24
    7592:	61 f1       	breq	.+88     	; 0x75ec <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    7594:	90 e0       	ldi	r25, 0x00	; 0
    7596:	88 0f       	add	r24, r24
    7598:	99 1f       	adc	r25, r25
    759a:	fc 01       	movw	r30, r24
    759c:	e8 55       	subi	r30, 0x58	; 88
    759e:	fd 4f       	sbci	r31, 0xFD	; 253
    75a0:	c5 91       	lpm	r28, Z+
    75a2:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    75a4:	fc 01       	movw	r30, r24
    75a6:	e2 56       	subi	r30, 0x62	; 98
    75a8:	fd 4f       	sbci	r31, 0xFD	; 253
    75aa:	a5 91       	lpm	r26, Z+
    75ac:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    75ae:	61 11       	cpse	r22, r1
    75b0:	09 c0       	rjmp	.+18     	; 0x75c4 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    75b2:	9f b7       	in	r25, 0x3f	; 63
                cli();
    75b4:	f8 94       	cli
		*reg &= ~bit;
    75b6:	88 81       	ld	r24, Y
    75b8:	20 95       	com	r18
    75ba:	82 23       	and	r24, r18
    75bc:	88 83       	st	Y, r24
		*out &= ~bit;
    75be:	ec 91       	ld	r30, X
    75c0:	2e 23       	and	r18, r30
    75c2:	0b c0       	rjmp	.+22     	; 0x75da <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    75c4:	62 30       	cpi	r22, 0x02	; 2
    75c6:	61 f4       	brne	.+24     	; 0x75e0 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    75c8:	9f b7       	in	r25, 0x3f	; 63
                cli();
    75ca:	f8 94       	cli
		*reg &= ~bit;
    75cc:	88 81       	ld	r24, Y
    75ce:	32 2f       	mov	r19, r18
    75d0:	30 95       	com	r19
    75d2:	83 23       	and	r24, r19
    75d4:	88 83       	st	Y, r24
		*out |= bit;
    75d6:	ec 91       	ld	r30, X
    75d8:	2e 2b       	or	r18, r30
    75da:	2c 93       	st	X, r18
		SREG = oldSREG;
    75dc:	9f bf       	out	0x3f, r25	; 63
    75de:	06 c0       	rjmp	.+12     	; 0x75ec <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    75e0:	8f b7       	in	r24, 0x3f	; 63
                cli();
    75e2:	f8 94       	cli
		*reg |= bit;
    75e4:	e8 81       	ld	r30, Y
    75e6:	2e 2b       	or	r18, r30
    75e8:	28 83       	st	Y, r18
		SREG = oldSREG;
    75ea:	8f bf       	out	0x3f, r24	; 63
	}
}
    75ec:	df 91       	pop	r29
    75ee:	cf 91       	pop	r28
    75f0:	08 95       	ret

000075f2 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    75f2:	1f 93       	push	r17
    75f4:	cf 93       	push	r28
    75f6:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    75f8:	28 2f       	mov	r18, r24
    75fa:	30 e0       	ldi	r19, 0x00	; 0
    75fc:	f9 01       	movw	r30, r18
    75fe:	ec 5c       	subi	r30, 0xCC	; 204
    7600:	fd 4f       	sbci	r31, 0xFD	; 253
    7602:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    7604:	f9 01       	movw	r30, r18
    7606:	ec 5a       	subi	r30, 0xAC	; 172
    7608:	fd 4f       	sbci	r31, 0xFD	; 253
    760a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    760c:	f9 01       	movw	r30, r18
    760e:	ec 58       	subi	r30, 0x8C	; 140
    7610:	fd 4f       	sbci	r31, 0xFD	; 253
    7612:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    7614:	cc 23       	and	r28, r28
    7616:	b9 f0       	breq	.+46     	; 0x7646 <digitalWrite+0x54>
    7618:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    761a:	81 11       	cpse	r24, r1
    761c:	85 df       	rcall	.-246    	; 0x7528 <turnOffPWM>

	out = portOutputRegister(port);
    761e:	ec 2f       	mov	r30, r28
    7620:	f0 e0       	ldi	r31, 0x00	; 0
    7622:	ee 0f       	add	r30, r30
    7624:	ff 1f       	adc	r31, r31
    7626:	e2 56       	subi	r30, 0x62	; 98
    7628:	fd 4f       	sbci	r31, 0xFD	; 253
    762a:	a5 91       	lpm	r26, Z+
    762c:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    762e:	9f b7       	in	r25, 0x3f	; 63
	cli();
    7630:	f8 94       	cli

	if (val == LOW) {
    7632:	11 11       	cpse	r17, r1
    7634:	04 c0       	rjmp	.+8      	; 0x763e <digitalWrite+0x4c>
		*out &= ~bit;
    7636:	8c 91       	ld	r24, X
    7638:	d0 95       	com	r29
    763a:	d8 23       	and	r29, r24
    763c:	02 c0       	rjmp	.+4      	; 0x7642 <digitalWrite+0x50>
	} else {
		*out |= bit;
    763e:	ec 91       	ld	r30, X
    7640:	de 2b       	or	r29, r30
    7642:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    7644:	9f bf       	out	0x3f, r25	; 63
}
    7646:	df 91       	pop	r29
    7648:	cf 91       	pop	r28
    764a:	1f 91       	pop	r17
    764c:	08 95       	ret

0000764e <digitalRead>:

int digitalRead(uint8_t pin)
{
    764e:	cf 93       	push	r28
    7650:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    7652:	28 2f       	mov	r18, r24
    7654:	30 e0       	ldi	r19, 0x00	; 0
    7656:	f9 01       	movw	r30, r18
    7658:	ec 5c       	subi	r30, 0xCC	; 204
    765a:	fd 4f       	sbci	r31, 0xFD	; 253
    765c:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    765e:	f9 01       	movw	r30, r18
    7660:	ec 5a       	subi	r30, 0xAC	; 172
    7662:	fd 4f       	sbci	r31, 0xFD	; 253
    7664:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    7666:	f9 01       	movw	r30, r18
    7668:	ec 58       	subi	r30, 0x8C	; 140
    766a:	fd 4f       	sbci	r31, 0xFD	; 253
    766c:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    766e:	cc 23       	and	r28, r28
    7670:	89 f0       	breq	.+34     	; 0x7694 <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    7672:	81 11       	cpse	r24, r1
    7674:	59 df       	rcall	.-334    	; 0x7528 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    7676:	ec 2f       	mov	r30, r28
    7678:	f0 e0       	ldi	r31, 0x00	; 0
    767a:	ee 0f       	add	r30, r30
    767c:	ff 1f       	adc	r31, r31
    767e:	ec 56       	subi	r30, 0x6C	; 108
    7680:	fd 4f       	sbci	r31, 0xFD	; 253
    7682:	a5 91       	lpm	r26, Z+
    7684:	b4 91       	lpm	r27, Z
    7686:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    7688:	ed 23       	and	r30, r29
    768a:	81 e0       	ldi	r24, 0x01	; 1
    768c:	90 e0       	ldi	r25, 0x00	; 0
    768e:	21 f4       	brne	.+8      	; 0x7698 <digitalRead+0x4a>
    7690:	80 e0       	ldi	r24, 0x00	; 0
    7692:	02 c0       	rjmp	.+4      	; 0x7698 <digitalRead+0x4a>
    7694:	80 e0       	ldi	r24, 0x00	; 0
    7696:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    7698:	df 91       	pop	r29
    769a:	cf 91       	pop	r28
    769c:	08 95       	ret

0000769e <_ZNK6String14StringIfHelperEv>:
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
		*p = toupper(*p);
	}
}
    769e:	08 95       	ret

000076a0 <_ZN6StringD1Ev>:
    76a0:	fc 01       	movw	r30, r24
    76a2:	80 81       	ld	r24, Z
    76a4:	91 81       	ldd	r25, Z+1	; 0x01
    76a6:	53 c5       	rjmp	.+2726   	; 0x814e <free>

000076a8 <_ZN6String10invalidateEv>:
    76a8:	cf 93       	push	r28
    76aa:	df 93       	push	r29
    76ac:	ec 01       	movw	r28, r24
    76ae:	88 81       	ld	r24, Y
    76b0:	99 81       	ldd	r25, Y+1	; 0x01
    76b2:	00 97       	sbiw	r24, 0x00	; 0
    76b4:	09 f0       	breq	.+2      	; 0x76b8 <_ZN6String10invalidateEv+0x10>
    76b6:	4b d5       	rcall	.+2710   	; 0x814e <free>
    76b8:	19 82       	std	Y+1, r1	; 0x01
    76ba:	18 82       	st	Y, r1
    76bc:	1d 82       	std	Y+5, r1	; 0x05
    76be:	1c 82       	std	Y+4, r1	; 0x04
    76c0:	1b 82       	std	Y+3, r1	; 0x03
    76c2:	1a 82       	std	Y+2, r1	; 0x02
    76c4:	df 91       	pop	r29
    76c6:	cf 91       	pop	r28
    76c8:	08 95       	ret

000076ca <_ZN6String12changeBufferEj>:
    76ca:	0f 93       	push	r16
    76cc:	1f 93       	push	r17
    76ce:	cf 93       	push	r28
    76d0:	df 93       	push	r29
    76d2:	ec 01       	movw	r28, r24
    76d4:	8b 01       	movw	r16, r22
    76d6:	6f 5f       	subi	r22, 0xFF	; 255
    76d8:	7f 4f       	sbci	r23, 0xFF	; 255
    76da:	88 81       	ld	r24, Y
    76dc:	99 81       	ldd	r25, Y+1	; 0x01
    76de:	c0 d5       	rcall	.+2944   	; 0x8260 <realloc>
    76e0:	00 97       	sbiw	r24, 0x00	; 0
    76e2:	31 f0       	breq	.+12     	; 0x76f0 <_ZN6String12changeBufferEj+0x26>
    76e4:	99 83       	std	Y+1, r25	; 0x01
    76e6:	88 83       	st	Y, r24
    76e8:	1b 83       	std	Y+3, r17	; 0x03
    76ea:	0a 83       	std	Y+2, r16	; 0x02
    76ec:	81 e0       	ldi	r24, 0x01	; 1
    76ee:	01 c0       	rjmp	.+2      	; 0x76f2 <_ZN6String12changeBufferEj+0x28>
    76f0:	80 e0       	ldi	r24, 0x00	; 0
    76f2:	df 91       	pop	r29
    76f4:	cf 91       	pop	r28
    76f6:	1f 91       	pop	r17
    76f8:	0f 91       	pop	r16
    76fa:	08 95       	ret

000076fc <_ZN6String7reserveEj>:
    76fc:	cf 93       	push	r28
    76fe:	df 93       	push	r29
    7700:	ec 01       	movw	r28, r24
    7702:	88 81       	ld	r24, Y
    7704:	99 81       	ldd	r25, Y+1	; 0x01
    7706:	89 2b       	or	r24, r25
    7708:	29 f0       	breq	.+10     	; 0x7714 <_ZN6String7reserveEj+0x18>
    770a:	8a 81       	ldd	r24, Y+2	; 0x02
    770c:	9b 81       	ldd	r25, Y+3	; 0x03
    770e:	86 17       	cp	r24, r22
    7710:	97 07       	cpc	r25, r23
    7712:	58 f4       	brcc	.+22     	; 0x772a <_ZN6String7reserveEj+0x2e>
    7714:	ce 01       	movw	r24, r28
    7716:	d9 df       	rcall	.-78     	; 0x76ca <_ZN6String12changeBufferEj>
    7718:	88 23       	and	r24, r24
    771a:	41 f0       	breq	.+16     	; 0x772c <_ZN6String7reserveEj+0x30>
    771c:	8c 81       	ldd	r24, Y+4	; 0x04
    771e:	9d 81       	ldd	r25, Y+5	; 0x05
    7720:	89 2b       	or	r24, r25
    7722:	19 f4       	brne	.+6      	; 0x772a <_ZN6String7reserveEj+0x2e>
    7724:	e8 81       	ld	r30, Y
    7726:	f9 81       	ldd	r31, Y+1	; 0x01
    7728:	10 82       	st	Z, r1
    772a:	81 e0       	ldi	r24, 0x01	; 1
    772c:	df 91       	pop	r29
    772e:	cf 91       	pop	r28
    7730:	08 95       	ret

00007732 <_ZN6String4copyEPKcj>:
    7732:	ef 92       	push	r14
    7734:	ff 92       	push	r15
    7736:	0f 93       	push	r16
    7738:	1f 93       	push	r17
    773a:	cf 93       	push	r28
    773c:	df 93       	push	r29
    773e:	ec 01       	movw	r28, r24
    7740:	7b 01       	movw	r14, r22
    7742:	8a 01       	movw	r16, r20
    7744:	ba 01       	movw	r22, r20
    7746:	da df       	rcall	.-76     	; 0x76fc <_ZN6String7reserveEj>
    7748:	81 11       	cpse	r24, r1
    774a:	03 c0       	rjmp	.+6      	; 0x7752 <_ZN6String4copyEPKcj+0x20>
    774c:	ce 01       	movw	r24, r28
    774e:	ac df       	rcall	.-168    	; 0x76a8 <_ZN6String10invalidateEv>
    7750:	06 c0       	rjmp	.+12     	; 0x775e <_ZN6String4copyEPKcj+0x2c>
    7752:	1d 83       	std	Y+5, r17	; 0x05
    7754:	0c 83       	std	Y+4, r16	; 0x04
    7756:	b7 01       	movw	r22, r14
    7758:	88 81       	ld	r24, Y
    775a:	99 81       	ldd	r25, Y+1	; 0x01
    775c:	ae d6       	rcall	.+3420   	; 0x84ba <strcpy>
    775e:	ce 01       	movw	r24, r28
    7760:	df 91       	pop	r29
    7762:	cf 91       	pop	r28
    7764:	1f 91       	pop	r17
    7766:	0f 91       	pop	r16
    7768:	ff 90       	pop	r15
    776a:	ef 90       	pop	r14
    776c:	08 95       	ret

0000776e <_ZN6StringC1EPKc>:
    776e:	fc 01       	movw	r30, r24
    7770:	11 82       	std	Z+1, r1	; 0x01
    7772:	10 82       	st	Z, r1
    7774:	13 82       	std	Z+3, r1	; 0x03
    7776:	12 82       	std	Z+2, r1	; 0x02
    7778:	15 82       	std	Z+5, r1	; 0x05
    777a:	14 82       	std	Z+4, r1	; 0x04
    777c:	61 15       	cp	r22, r1
    777e:	71 05       	cpc	r23, r1
    7780:	49 f0       	breq	.+18     	; 0x7794 <_ZN6StringC1EPKc+0x26>
    7782:	fb 01       	movw	r30, r22
    7784:	01 90       	ld	r0, Z+
    7786:	00 20       	and	r0, r0
    7788:	e9 f7       	brne	.-6      	; 0x7784 <_ZN6StringC1EPKc+0x16>
    778a:	31 97       	sbiw	r30, 0x01	; 1
    778c:	af 01       	movw	r20, r30
    778e:	46 1b       	sub	r20, r22
    7790:	57 0b       	sbc	r21, r23
    7792:	cf cf       	rjmp	.-98     	; 0x7732 <_ZN6String4copyEPKcj>
    7794:	08 95       	ret

00007796 <_ZN6String4moveERS_>:
    7796:	0f 93       	push	r16
    7798:	1f 93       	push	r17
    779a:	cf 93       	push	r28
    779c:	df 93       	push	r29
    779e:	8c 01       	movw	r16, r24
    77a0:	eb 01       	movw	r28, r22
    77a2:	fc 01       	movw	r30, r24
    77a4:	80 81       	ld	r24, Z
    77a6:	91 81       	ldd	r25, Z+1	; 0x01
    77a8:	00 97       	sbiw	r24, 0x00	; 0
    77aa:	c1 f0       	breq	.+48     	; 0x77dc <_ZN6String4moveERS_+0x46>
    77ac:	68 81       	ld	r22, Y
    77ae:	79 81       	ldd	r23, Y+1	; 0x01
    77b0:	61 15       	cp	r22, r1
    77b2:	71 05       	cpc	r23, r1
    77b4:	91 f0       	breq	.+36     	; 0x77da <_ZN6String4moveERS_+0x44>
    77b6:	2f e4       	ldi	r18, 0x4F	; 79
    77b8:	3b e3       	ldi	r19, 0x3B	; 59
    77ba:	23 2b       	or	r18, r19
    77bc:	71 f0       	breq	.+28     	; 0x77da <_ZN6String4moveERS_+0x44>
    77be:	42 81       	ldd	r20, Z+2	; 0x02
    77c0:	53 81       	ldd	r21, Z+3	; 0x03
    77c2:	2c 81       	ldd	r18, Y+4	; 0x04
    77c4:	3d 81       	ldd	r19, Y+5	; 0x05
    77c6:	42 17       	cp	r20, r18
    77c8:	53 07       	cpc	r21, r19
    77ca:	38 f0       	brcs	.+14     	; 0x77da <_ZN6String4moveERS_+0x44>
    77cc:	76 d6       	rcall	.+3308   	; 0x84ba <strcpy>
    77ce:	8c 81       	ldd	r24, Y+4	; 0x04
    77d0:	9d 81       	ldd	r25, Y+5	; 0x05
    77d2:	f8 01       	movw	r30, r16
    77d4:	95 83       	std	Z+5, r25	; 0x05
    77d6:	84 83       	std	Z+4, r24	; 0x04
    77d8:	12 c0       	rjmp	.+36     	; 0x77fe <_ZN6String4moveERS_+0x68>
    77da:	b9 d4       	rcall	.+2418   	; 0x814e <free>
    77dc:	88 81       	ld	r24, Y
    77de:	99 81       	ldd	r25, Y+1	; 0x01
    77e0:	f8 01       	movw	r30, r16
    77e2:	91 83       	std	Z+1, r25	; 0x01
    77e4:	80 83       	st	Z, r24
    77e6:	8a 81       	ldd	r24, Y+2	; 0x02
    77e8:	9b 81       	ldd	r25, Y+3	; 0x03
    77ea:	93 83       	std	Z+3, r25	; 0x03
    77ec:	82 83       	std	Z+2, r24	; 0x02
    77ee:	8c 81       	ldd	r24, Y+4	; 0x04
    77f0:	9d 81       	ldd	r25, Y+5	; 0x05
    77f2:	95 83       	std	Z+5, r25	; 0x05
    77f4:	84 83       	std	Z+4, r24	; 0x04
    77f6:	19 82       	std	Y+1, r1	; 0x01
    77f8:	18 82       	st	Y, r1
    77fa:	1b 82       	std	Y+3, r1	; 0x03
    77fc:	1a 82       	std	Y+2, r1	; 0x02
    77fe:	1d 82       	std	Y+5, r1	; 0x05
    7800:	1c 82       	std	Y+4, r1	; 0x04
    7802:	df 91       	pop	r29
    7804:	cf 91       	pop	r28
    7806:	1f 91       	pop	r17
    7808:	0f 91       	pop	r16
    780a:	08 95       	ret

0000780c <_ZN6StringC1EOS_>:
    780c:	fc 01       	movw	r30, r24
    780e:	11 82       	std	Z+1, r1	; 0x01
    7810:	10 82       	st	Z, r1
    7812:	13 82       	std	Z+3, r1	; 0x03
    7814:	12 82       	std	Z+2, r1	; 0x02
    7816:	15 82       	std	Z+5, r1	; 0x05
    7818:	14 82       	std	Z+4, r1	; 0x04
    781a:	bd cf       	rjmp	.-134    	; 0x7796 <_ZN6String4moveERS_>

0000781c <_ZN6StringaSERKS_>:
    781c:	cf 93       	push	r28
    781e:	df 93       	push	r29
    7820:	ec 01       	movw	r28, r24
    7822:	fb 01       	movw	r30, r22
    7824:	86 17       	cp	r24, r22
    7826:	97 07       	cpc	r25, r23
    7828:	51 f0       	breq	.+20     	; 0x783e <_ZN6StringaSERKS_+0x22>
    782a:	60 81       	ld	r22, Z
    782c:	71 81       	ldd	r23, Z+1	; 0x01
    782e:	61 15       	cp	r22, r1
    7830:	71 05       	cpc	r23, r1
    7832:	21 f0       	breq	.+8      	; 0x783c <_ZN6StringaSERKS_+0x20>
    7834:	44 81       	ldd	r20, Z+4	; 0x04
    7836:	55 81       	ldd	r21, Z+5	; 0x05
    7838:	7c df       	rcall	.-264    	; 0x7732 <_ZN6String4copyEPKcj>
    783a:	01 c0       	rjmp	.+2      	; 0x783e <_ZN6StringaSERKS_+0x22>
    783c:	35 df       	rcall	.-406    	; 0x76a8 <_ZN6String10invalidateEv>
    783e:	ce 01       	movw	r24, r28
    7840:	df 91       	pop	r29
    7842:	cf 91       	pop	r28
    7844:	08 95       	ret

00007846 <_ZN6StringC1ERKS_>:
    7846:	fc 01       	movw	r30, r24
    7848:	11 82       	std	Z+1, r1	; 0x01
    784a:	10 82       	st	Z, r1
    784c:	13 82       	std	Z+3, r1	; 0x03
    784e:	12 82       	std	Z+2, r1	; 0x02
    7850:	15 82       	std	Z+5, r1	; 0x05
    7852:	14 82       	std	Z+4, r1	; 0x04
    7854:	e3 cf       	rjmp	.-58     	; 0x781c <_ZN6StringaSERKS_>

00007856 <_ZN6StringaSEOS_>:
    7856:	cf 93       	push	r28
    7858:	df 93       	push	r29
    785a:	ec 01       	movw	r28, r24
    785c:	86 17       	cp	r24, r22
    785e:	97 07       	cpc	r25, r23
    7860:	09 f0       	breq	.+2      	; 0x7864 <_ZN6StringaSEOS_+0xe>
    7862:	99 df       	rcall	.-206    	; 0x7796 <_ZN6String4moveERS_>
    7864:	ce 01       	movw	r24, r28
    7866:	df 91       	pop	r29
    7868:	cf 91       	pop	r28
    786a:	08 95       	ret

0000786c <_ZN6StringaSEPKc>:
    786c:	cf 93       	push	r28
    786e:	df 93       	push	r29
    7870:	ec 01       	movw	r28, r24
    7872:	61 15       	cp	r22, r1
    7874:	71 05       	cpc	r23, r1
    7876:	51 f0       	breq	.+20     	; 0x788c <_ZN6StringaSEPKc+0x20>
    7878:	fb 01       	movw	r30, r22
    787a:	01 90       	ld	r0, Z+
    787c:	00 20       	and	r0, r0
    787e:	e9 f7       	brne	.-6      	; 0x787a <_ZN6StringaSEPKc+0xe>
    7880:	31 97       	sbiw	r30, 0x01	; 1
    7882:	af 01       	movw	r20, r30
    7884:	46 1b       	sub	r20, r22
    7886:	57 0b       	sbc	r21, r23
    7888:	54 df       	rcall	.-344    	; 0x7732 <_ZN6String4copyEPKcj>
    788a:	01 c0       	rjmp	.+2      	; 0x788e <_ZN6StringaSEPKc+0x22>
    788c:	0d df       	rcall	.-486    	; 0x76a8 <_ZN6String10invalidateEv>
    788e:	ce 01       	movw	r24, r28
    7890:	df 91       	pop	r29
    7892:	cf 91       	pop	r28
    7894:	08 95       	ret

00007896 <_ZN6StringC1Ec>:
    7896:	cf 93       	push	r28
    7898:	df 93       	push	r29
    789a:	00 d0       	rcall	.+0      	; 0x789c <_ZN6StringC1Ec+0x6>
    789c:	cd b7       	in	r28, 0x3d	; 61
    789e:	de b7       	in	r29, 0x3e	; 62
    78a0:	fc 01       	movw	r30, r24
    78a2:	11 82       	std	Z+1, r1	; 0x01
    78a4:	10 82       	st	Z, r1
    78a6:	13 82       	std	Z+3, r1	; 0x03
    78a8:	12 82       	std	Z+2, r1	; 0x02
    78aa:	15 82       	std	Z+5, r1	; 0x05
    78ac:	14 82       	std	Z+4, r1	; 0x04
    78ae:	69 83       	std	Y+1, r22	; 0x01
    78b0:	1a 82       	std	Y+2, r1	; 0x02
    78b2:	be 01       	movw	r22, r28
    78b4:	6f 5f       	subi	r22, 0xFF	; 255
    78b6:	7f 4f       	sbci	r23, 0xFF	; 255
    78b8:	d9 df       	rcall	.-78     	; 0x786c <_ZN6StringaSEPKc>
    78ba:	0f 90       	pop	r0
    78bc:	0f 90       	pop	r0
    78be:	df 91       	pop	r29
    78c0:	cf 91       	pop	r28
    78c2:	08 95       	ret

000078c4 <_ZN6StringC1Ehh>:
    78c4:	0f 93       	push	r16
    78c6:	1f 93       	push	r17
    78c8:	cf 93       	push	r28
    78ca:	df 93       	push	r29
    78cc:	cd b7       	in	r28, 0x3d	; 61
    78ce:	de b7       	in	r29, 0x3e	; 62
    78d0:	29 97       	sbiw	r28, 0x09	; 9
    78d2:	0f b6       	in	r0, 0x3f	; 63
    78d4:	f8 94       	cli
    78d6:	de bf       	out	0x3e, r29	; 62
    78d8:	0f be       	out	0x3f, r0	; 63
    78da:	cd bf       	out	0x3d, r28	; 61
    78dc:	8c 01       	movw	r16, r24
    78de:	86 2f       	mov	r24, r22
    78e0:	f8 01       	movw	r30, r16
    78e2:	11 82       	std	Z+1, r1	; 0x01
    78e4:	10 82       	st	Z, r1
    78e6:	13 82       	std	Z+3, r1	; 0x03
    78e8:	12 82       	std	Z+2, r1	; 0x02
    78ea:	15 82       	std	Z+5, r1	; 0x05
    78ec:	14 82       	std	Z+4, r1	; 0x04
    78ee:	50 e0       	ldi	r21, 0x00	; 0
    78f0:	be 01       	movw	r22, r28
    78f2:	6f 5f       	subi	r22, 0xFF	; 255
    78f4:	7f 4f       	sbci	r23, 0xFF	; 255
    78f6:	90 e0       	ldi	r25, 0x00	; 0
    78f8:	58 d6       	rcall	.+3248   	; 0x85aa <utoa>
    78fa:	be 01       	movw	r22, r28
    78fc:	6f 5f       	subi	r22, 0xFF	; 255
    78fe:	7f 4f       	sbci	r23, 0xFF	; 255
    7900:	c8 01       	movw	r24, r16
    7902:	b4 df       	rcall	.-152    	; 0x786c <_ZN6StringaSEPKc>
    7904:	29 96       	adiw	r28, 0x09	; 9
    7906:	0f b6       	in	r0, 0x3f	; 63
    7908:	f8 94       	cli
    790a:	de bf       	out	0x3e, r29	; 62
    790c:	0f be       	out	0x3f, r0	; 63
    790e:	cd bf       	out	0x3d, r28	; 61
    7910:	df 91       	pop	r29
    7912:	cf 91       	pop	r28
    7914:	1f 91       	pop	r17
    7916:	0f 91       	pop	r16
    7918:	08 95       	ret

0000791a <_ZN6StringC1Eih>:
    791a:	0f 93       	push	r16
    791c:	1f 93       	push	r17
    791e:	cf 93       	push	r28
    7920:	df 93       	push	r29
    7922:	cd b7       	in	r28, 0x3d	; 61
    7924:	de b7       	in	r29, 0x3e	; 62
    7926:	62 97       	sbiw	r28, 0x12	; 18
    7928:	0f b6       	in	r0, 0x3f	; 63
    792a:	f8 94       	cli
    792c:	de bf       	out	0x3e, r29	; 62
    792e:	0f be       	out	0x3f, r0	; 63
    7930:	cd bf       	out	0x3d, r28	; 61
    7932:	8c 01       	movw	r16, r24
    7934:	cb 01       	movw	r24, r22
    7936:	f8 01       	movw	r30, r16
    7938:	11 82       	std	Z+1, r1	; 0x01
    793a:	10 82       	st	Z, r1
    793c:	13 82       	std	Z+3, r1	; 0x03
    793e:	12 82       	std	Z+2, r1	; 0x02
    7940:	15 82       	std	Z+5, r1	; 0x05
    7942:	14 82       	std	Z+4, r1	; 0x04
    7944:	50 e0       	ldi	r21, 0x00	; 0
    7946:	be 01       	movw	r22, r28
    7948:	6f 5f       	subi	r22, 0xFF	; 255
    794a:	7f 4f       	sbci	r23, 0xFF	; 255
    794c:	da d5       	rcall	.+2996   	; 0x8502 <itoa>
    794e:	be 01       	movw	r22, r28
    7950:	6f 5f       	subi	r22, 0xFF	; 255
    7952:	7f 4f       	sbci	r23, 0xFF	; 255
    7954:	c8 01       	movw	r24, r16
    7956:	8a df       	rcall	.-236    	; 0x786c <_ZN6StringaSEPKc>
    7958:	62 96       	adiw	r28, 0x12	; 18
    795a:	0f b6       	in	r0, 0x3f	; 63
    795c:	f8 94       	cli
    795e:	de bf       	out	0x3e, r29	; 62
    7960:	0f be       	out	0x3f, r0	; 63
    7962:	cd bf       	out	0x3d, r28	; 61
    7964:	df 91       	pop	r29
    7966:	cf 91       	pop	r28
    7968:	1f 91       	pop	r17
    796a:	0f 91       	pop	r16
    796c:	08 95       	ret

0000796e <_ZN6StringC1Ejh>:
    796e:	0f 93       	push	r16
    7970:	1f 93       	push	r17
    7972:	cf 93       	push	r28
    7974:	df 93       	push	r29
    7976:	cd b7       	in	r28, 0x3d	; 61
    7978:	de b7       	in	r29, 0x3e	; 62
    797a:	61 97       	sbiw	r28, 0x11	; 17
    797c:	0f b6       	in	r0, 0x3f	; 63
    797e:	f8 94       	cli
    7980:	de bf       	out	0x3e, r29	; 62
    7982:	0f be       	out	0x3f, r0	; 63
    7984:	cd bf       	out	0x3d, r28	; 61
    7986:	8c 01       	movw	r16, r24
    7988:	cb 01       	movw	r24, r22
    798a:	f8 01       	movw	r30, r16
    798c:	11 82       	std	Z+1, r1	; 0x01
    798e:	10 82       	st	Z, r1
    7990:	13 82       	std	Z+3, r1	; 0x03
    7992:	12 82       	std	Z+2, r1	; 0x02
    7994:	15 82       	std	Z+5, r1	; 0x05
    7996:	14 82       	std	Z+4, r1	; 0x04
    7998:	50 e0       	ldi	r21, 0x00	; 0
    799a:	be 01       	movw	r22, r28
    799c:	6f 5f       	subi	r22, 0xFF	; 255
    799e:	7f 4f       	sbci	r23, 0xFF	; 255
    79a0:	04 d6       	rcall	.+3080   	; 0x85aa <utoa>
    79a2:	be 01       	movw	r22, r28
    79a4:	6f 5f       	subi	r22, 0xFF	; 255
    79a6:	7f 4f       	sbci	r23, 0xFF	; 255
    79a8:	c8 01       	movw	r24, r16
    79aa:	60 df       	rcall	.-320    	; 0x786c <_ZN6StringaSEPKc>
    79ac:	61 96       	adiw	r28, 0x11	; 17
    79ae:	0f b6       	in	r0, 0x3f	; 63
    79b0:	f8 94       	cli
    79b2:	de bf       	out	0x3e, r29	; 62
    79b4:	0f be       	out	0x3f, r0	; 63
    79b6:	cd bf       	out	0x3d, r28	; 61
    79b8:	df 91       	pop	r29
    79ba:	cf 91       	pop	r28
    79bc:	1f 91       	pop	r17
    79be:	0f 91       	pop	r16
    79c0:	08 95       	ret

000079c2 <_ZN6StringC1Emh>:
    79c2:	0f 93       	push	r16
    79c4:	1f 93       	push	r17
    79c6:	cf 93       	push	r28
    79c8:	df 93       	push	r29
    79ca:	cd b7       	in	r28, 0x3d	; 61
    79cc:	de b7       	in	r29, 0x3e	; 62
    79ce:	a1 97       	sbiw	r28, 0x21	; 33
    79d0:	0f b6       	in	r0, 0x3f	; 63
    79d2:	f8 94       	cli
    79d4:	de bf       	out	0x3e, r29	; 62
    79d6:	0f be       	out	0x3f, r0	; 63
    79d8:	cd bf       	out	0x3d, r28	; 61
    79da:	8c 01       	movw	r16, r24
    79dc:	cb 01       	movw	r24, r22
    79de:	ba 01       	movw	r22, r20
    79e0:	f8 01       	movw	r30, r16
    79e2:	11 82       	std	Z+1, r1	; 0x01
    79e4:	10 82       	st	Z, r1
    79e6:	13 82       	std	Z+3, r1	; 0x03
    79e8:	12 82       	std	Z+2, r1	; 0x02
    79ea:	15 82       	std	Z+5, r1	; 0x05
    79ec:	14 82       	std	Z+4, r1	; 0x04
    79ee:	30 e0       	ldi	r19, 0x00	; 0
    79f0:	ae 01       	movw	r20, r28
    79f2:	4f 5f       	subi	r20, 0xFF	; 255
    79f4:	5f 4f       	sbci	r21, 0xFF	; 255
    79f6:	ae d5       	rcall	.+2908   	; 0x8554 <ultoa>
    79f8:	be 01       	movw	r22, r28
    79fa:	6f 5f       	subi	r22, 0xFF	; 255
    79fc:	7f 4f       	sbci	r23, 0xFF	; 255
    79fe:	c8 01       	movw	r24, r16
    7a00:	35 df       	rcall	.-406    	; 0x786c <_ZN6StringaSEPKc>
    7a02:	a1 96       	adiw	r28, 0x21	; 33
    7a04:	0f b6       	in	r0, 0x3f	; 63
    7a06:	f8 94       	cli
    7a08:	de bf       	out	0x3e, r29	; 62
    7a0a:	0f be       	out	0x3f, r0	; 63
    7a0c:	cd bf       	out	0x3d, r28	; 61
    7a0e:	df 91       	pop	r29
    7a10:	cf 91       	pop	r28
    7a12:	1f 91       	pop	r17
    7a14:	0f 91       	pop	r16
    7a16:	08 95       	ret

00007a18 <_ZN6StringC1Edh>:
    7a18:	ef 92       	push	r14
    7a1a:	ff 92       	push	r15
    7a1c:	0f 93       	push	r16
    7a1e:	1f 93       	push	r17
    7a20:	cf 93       	push	r28
    7a22:	df 93       	push	r29
    7a24:	cd b7       	in	r28, 0x3d	; 61
    7a26:	de b7       	in	r29, 0x3e	; 62
    7a28:	a1 97       	sbiw	r28, 0x21	; 33
    7a2a:	0f b6       	in	r0, 0x3f	; 63
    7a2c:	f8 94       	cli
    7a2e:	de bf       	out	0x3e, r29	; 62
    7a30:	0f be       	out	0x3f, r0	; 63
    7a32:	cd bf       	out	0x3d, r28	; 61
    7a34:	7c 01       	movw	r14, r24
    7a36:	cb 01       	movw	r24, r22
    7a38:	ba 01       	movw	r22, r20
    7a3a:	f7 01       	movw	r30, r14
    7a3c:	11 82       	std	Z+1, r1	; 0x01
    7a3e:	10 82       	st	Z, r1
    7a40:	13 82       	std	Z+3, r1	; 0x03
    7a42:	12 82       	std	Z+2, r1	; 0x02
    7a44:	15 82       	std	Z+5, r1	; 0x05
    7a46:	14 82       	std	Z+4, r1	; 0x04
    7a48:	42 e0       	ldi	r20, 0x02	; 2
    7a4a:	42 0f       	add	r20, r18
    7a4c:	8e 01       	movw	r16, r28
    7a4e:	0f 5f       	subi	r16, 0xFF	; 255
    7a50:	1f 4f       	sbci	r17, 0xFF	; 255
    7a52:	c6 d2       	rcall	.+1420   	; 0x7fe0 <dtostrf>
    7a54:	bc 01       	movw	r22, r24
    7a56:	c7 01       	movw	r24, r14
    7a58:	09 df       	rcall	.-494    	; 0x786c <_ZN6StringaSEPKc>
    7a5a:	a1 96       	adiw	r28, 0x21	; 33
    7a5c:	0f b6       	in	r0, 0x3f	; 63
    7a5e:	f8 94       	cli
    7a60:	de bf       	out	0x3e, r29	; 62
    7a62:	0f be       	out	0x3f, r0	; 63
    7a64:	cd bf       	out	0x3d, r28	; 61
    7a66:	df 91       	pop	r29
    7a68:	cf 91       	pop	r28
    7a6a:	1f 91       	pop	r17
    7a6c:	0f 91       	pop	r16
    7a6e:	ff 90       	pop	r15
    7a70:	ef 90       	pop	r14
    7a72:	08 95       	ret

00007a74 <_ZN6String6concatEPKcj>:
    7a74:	ef 92       	push	r14
    7a76:	ff 92       	push	r15
    7a78:	0f 93       	push	r16
    7a7a:	1f 93       	push	r17
    7a7c:	cf 93       	push	r28
    7a7e:	df 93       	push	r29
    7a80:	61 15       	cp	r22, r1
    7a82:	71 05       	cpc	r23, r1
    7a84:	11 f4       	brne	.+4      	; 0x7a8a <_ZN6String6concatEPKcj+0x16>
    7a86:	80 e0       	ldi	r24, 0x00	; 0
    7a88:	1a c0       	rjmp	.+52     	; 0x7abe <_ZN6String6concatEPKcj+0x4a>
    7a8a:	41 15       	cp	r20, r1
    7a8c:	51 05       	cpc	r21, r1
    7a8e:	b1 f0       	breq	.+44     	; 0x7abc <_ZN6String6concatEPKcj+0x48>
    7a90:	7b 01       	movw	r14, r22
    7a92:	ec 01       	movw	r28, r24
    7a94:	8c 81       	ldd	r24, Y+4	; 0x04
    7a96:	9d 81       	ldd	r25, Y+5	; 0x05
    7a98:	8a 01       	movw	r16, r20
    7a9a:	08 0f       	add	r16, r24
    7a9c:	19 1f       	adc	r17, r25
    7a9e:	b8 01       	movw	r22, r16
    7aa0:	ce 01       	movw	r24, r28
    7aa2:	2c de       	rcall	.-936    	; 0x76fc <_ZN6String7reserveEj>
    7aa4:	88 23       	and	r24, r24
    7aa6:	79 f3       	breq	.-34     	; 0x7a86 <_ZN6String6concatEPKcj+0x12>
    7aa8:	28 81       	ld	r18, Y
    7aaa:	39 81       	ldd	r19, Y+1	; 0x01
    7aac:	8c 81       	ldd	r24, Y+4	; 0x04
    7aae:	9d 81       	ldd	r25, Y+5	; 0x05
    7ab0:	b7 01       	movw	r22, r14
    7ab2:	82 0f       	add	r24, r18
    7ab4:	93 1f       	adc	r25, r19
    7ab6:	01 d5       	rcall	.+2562   	; 0x84ba <strcpy>
    7ab8:	1d 83       	std	Y+5, r17	; 0x05
    7aba:	0c 83       	std	Y+4, r16	; 0x04
    7abc:	81 e0       	ldi	r24, 0x01	; 1
    7abe:	df 91       	pop	r29
    7ac0:	cf 91       	pop	r28
    7ac2:	1f 91       	pop	r17
    7ac4:	0f 91       	pop	r16
    7ac6:	ff 90       	pop	r15
    7ac8:	ef 90       	pop	r14
    7aca:	08 95       	ret

00007acc <_ZN6String6concatERKS_>:
    7acc:	fb 01       	movw	r30, r22
    7ace:	44 81       	ldd	r20, Z+4	; 0x04
    7ad0:	55 81       	ldd	r21, Z+5	; 0x05
    7ad2:	60 81       	ld	r22, Z
    7ad4:	71 81       	ldd	r23, Z+1	; 0x01
    7ad6:	ce cf       	rjmp	.-100    	; 0x7a74 <_ZN6String6concatEPKcj>

00007ad8 <_ZN6String6concatEPKc>:
    7ad8:	61 15       	cp	r22, r1
    7ada:	71 05       	cpc	r23, r1
    7adc:	49 f0       	breq	.+18     	; 0x7af0 <_ZN6String6concatEPKc+0x18>
    7ade:	fb 01       	movw	r30, r22
    7ae0:	01 90       	ld	r0, Z+
    7ae2:	00 20       	and	r0, r0
    7ae4:	e9 f7       	brne	.-6      	; 0x7ae0 <_ZN6String6concatEPKc+0x8>
    7ae6:	31 97       	sbiw	r30, 0x01	; 1
    7ae8:	af 01       	movw	r20, r30
    7aea:	46 1b       	sub	r20, r22
    7aec:	57 0b       	sbc	r21, r23
    7aee:	c2 cf       	rjmp	.-124    	; 0x7a74 <_ZN6String6concatEPKcj>
    7af0:	80 e0       	ldi	r24, 0x00	; 0
    7af2:	08 95       	ret

00007af4 <_ZN6String6concatEc>:
    7af4:	cf 93       	push	r28
    7af6:	df 93       	push	r29
    7af8:	00 d0       	rcall	.+0      	; 0x7afa <_ZN6String6concatEc+0x6>
    7afa:	cd b7       	in	r28, 0x3d	; 61
    7afc:	de b7       	in	r29, 0x3e	; 62
    7afe:	69 83       	std	Y+1, r22	; 0x01
    7b00:	1a 82       	std	Y+2, r1	; 0x02
    7b02:	41 e0       	ldi	r20, 0x01	; 1
    7b04:	50 e0       	ldi	r21, 0x00	; 0
    7b06:	be 01       	movw	r22, r28
    7b08:	6f 5f       	subi	r22, 0xFF	; 255
    7b0a:	7f 4f       	sbci	r23, 0xFF	; 255
    7b0c:	b3 df       	rcall	.-154    	; 0x7a74 <_ZN6String6concatEPKcj>
    7b0e:	0f 90       	pop	r0
    7b10:	0f 90       	pop	r0
    7b12:	df 91       	pop	r29
    7b14:	cf 91       	pop	r28
    7b16:	08 95       	ret

00007b18 <_ZplRK15StringSumHelperRK6String>:
    7b18:	cf 93       	push	r28
    7b1a:	df 93       	push	r29
    7b1c:	ec 01       	movw	r28, r24
    7b1e:	fb 01       	movw	r30, r22
    7b20:	44 81       	ldd	r20, Z+4	; 0x04
    7b22:	55 81       	ldd	r21, Z+5	; 0x05
    7b24:	60 81       	ld	r22, Z
    7b26:	71 81       	ldd	r23, Z+1	; 0x01
    7b28:	a5 df       	rcall	.-182    	; 0x7a74 <_ZN6String6concatEPKcj>
    7b2a:	81 11       	cpse	r24, r1
    7b2c:	02 c0       	rjmp	.+4      	; 0x7b32 <_ZplRK15StringSumHelperRK6String+0x1a>
    7b2e:	ce 01       	movw	r24, r28
    7b30:	bb dd       	rcall	.-1162   	; 0x76a8 <_ZN6String10invalidateEv>
    7b32:	ce 01       	movw	r24, r28
    7b34:	df 91       	pop	r29
    7b36:	cf 91       	pop	r28
    7b38:	08 95       	ret

00007b3a <_ZplRK15StringSumHelperPKc>:
    7b3a:	cf 93       	push	r28
    7b3c:	df 93       	push	r29
    7b3e:	ec 01       	movw	r28, r24
    7b40:	61 15       	cp	r22, r1
    7b42:	71 05       	cpc	r23, r1
    7b44:	59 f0       	breq	.+22     	; 0x7b5c <_ZplRK15StringSumHelperPKc+0x22>
    7b46:	fb 01       	movw	r30, r22
    7b48:	01 90       	ld	r0, Z+
    7b4a:	00 20       	and	r0, r0
    7b4c:	e9 f7       	brne	.-6      	; 0x7b48 <_ZplRK15StringSumHelperPKc+0xe>
    7b4e:	31 97       	sbiw	r30, 0x01	; 1
    7b50:	af 01       	movw	r20, r30
    7b52:	46 1b       	sub	r20, r22
    7b54:	57 0b       	sbc	r21, r23
    7b56:	8e df       	rcall	.-228    	; 0x7a74 <_ZN6String6concatEPKcj>
    7b58:	81 11       	cpse	r24, r1
    7b5a:	02 c0       	rjmp	.+4      	; 0x7b60 <_ZplRK15StringSumHelperPKc+0x26>
    7b5c:	ce 01       	movw	r24, r28
    7b5e:	a4 dd       	rcall	.-1208   	; 0x76a8 <_ZN6String10invalidateEv>
    7b60:	ce 01       	movw	r24, r28
    7b62:	df 91       	pop	r29
    7b64:	cf 91       	pop	r28
    7b66:	08 95       	ret

00007b68 <_ZplRK15StringSumHelperc>:
    7b68:	cf 93       	push	r28
    7b6a:	df 93       	push	r29
    7b6c:	ec 01       	movw	r28, r24
    7b6e:	c2 df       	rcall	.-124    	; 0x7af4 <_ZN6String6concatEc>
    7b70:	81 11       	cpse	r24, r1
    7b72:	02 c0       	rjmp	.+4      	; 0x7b78 <_ZplRK15StringSumHelperc+0x10>
    7b74:	ce 01       	movw	r24, r28
    7b76:	98 dd       	rcall	.-1232   	; 0x76a8 <_ZN6String10invalidateEv>
    7b78:	ce 01       	movw	r24, r28
    7b7a:	df 91       	pop	r29
    7b7c:	cf 91       	pop	r28
    7b7e:	08 95       	ret

00007b80 <_ZNK6String6equalsEPKc>:
    7b80:	fc 01       	movw	r30, r24
    7b82:	24 81       	ldd	r18, Z+4	; 0x04
    7b84:	35 81       	ldd	r19, Z+5	; 0x05
    7b86:	23 2b       	or	r18, r19
    7b88:	31 f4       	brne	.+12     	; 0x7b96 <_ZNK6String6equalsEPKc+0x16>
    7b8a:	21 e0       	ldi	r18, 0x01	; 1
    7b8c:	61 15       	cp	r22, r1
    7b8e:	71 05       	cpc	r23, r1
    7b90:	99 f0       	breq	.+38     	; 0x7bb8 <_ZNK6String6equalsEPKc+0x38>
    7b92:	fb 01       	movw	r30, r22
    7b94:	08 c0       	rjmp	.+16     	; 0x7ba6 <_ZNK6String6equalsEPKc+0x26>
    7b96:	fc 01       	movw	r30, r24
    7b98:	80 81       	ld	r24, Z
    7b9a:	91 81       	ldd	r25, Z+1	; 0x01
    7b9c:	61 15       	cp	r22, r1
    7b9e:	71 05       	cpc	r23, r1
    7ba0:	31 f4       	brne	.+12     	; 0x7bae <_ZNK6String6equalsEPKc+0x2e>
    7ba2:	21 e0       	ldi	r18, 0x01	; 1
    7ba4:	fc 01       	movw	r30, r24
    7ba6:	80 81       	ld	r24, Z
    7ba8:	88 23       	and	r24, r24
    7baa:	31 f0       	breq	.+12     	; 0x7bb8 <_ZNK6String6equalsEPKc+0x38>
    7bac:	04 c0       	rjmp	.+8      	; 0x7bb6 <_ZNK6String6equalsEPKc+0x36>
    7bae:	7c d4       	rcall	.+2296   	; 0x84a8 <strcmp>
    7bb0:	21 e0       	ldi	r18, 0x01	; 1
    7bb2:	89 2b       	or	r24, r25
    7bb4:	09 f0       	breq	.+2      	; 0x7bb8 <_ZNK6String6equalsEPKc+0x38>
    7bb6:	20 e0       	ldi	r18, 0x00	; 0
    7bb8:	82 2f       	mov	r24, r18
    7bba:	08 95       	ret

00007bbc <_ZNK6String8getBytesEPhjj>:
    7bbc:	0f 93       	push	r16
    7bbe:	1f 93       	push	r17
    7bc0:	cf 93       	push	r28
    7bc2:	df 93       	push	r29
    7bc4:	41 15       	cp	r20, r1
    7bc6:	51 05       	cpc	r21, r1
    7bc8:	11 f1       	breq	.+68     	; 0x7c0e <_ZNK6String8getBytesEPhjj+0x52>
    7bca:	61 15       	cp	r22, r1
    7bcc:	71 05       	cpc	r23, r1
    7bce:	f9 f0       	breq	.+62     	; 0x7c0e <_ZNK6String8getBytesEPhjj+0x52>
    7bd0:	dc 01       	movw	r26, r24
    7bd2:	14 96       	adiw	r26, 0x04	; 4
    7bd4:	ed 91       	ld	r30, X+
    7bd6:	fc 91       	ld	r31, X
    7bd8:	15 97       	sbiw	r26, 0x05	; 5
    7bda:	2e 17       	cp	r18, r30
    7bdc:	3f 07       	cpc	r19, r31
    7bde:	18 f0       	brcs	.+6      	; 0x7be6 <_ZNK6String8getBytesEPhjj+0x2a>
    7be0:	fb 01       	movw	r30, r22
    7be2:	10 82       	st	Z, r1
    7be4:	14 c0       	rjmp	.+40     	; 0x7c0e <_ZNK6String8getBytesEPhjj+0x52>
    7be6:	e2 1b       	sub	r30, r18
    7be8:	f3 0b       	sbc	r31, r19
    7bea:	ea 01       	movw	r28, r20
    7bec:	21 97       	sbiw	r28, 0x01	; 1
    7bee:	ec 17       	cp	r30, r28
    7bf0:	fd 07       	cpc	r31, r29
    7bf2:	08 f4       	brcc	.+2      	; 0x7bf6 <_ZNK6String8getBytesEPhjj+0x3a>
    7bf4:	ef 01       	movw	r28, r30
    7bf6:	8b 01       	movw	r16, r22
    7bf8:	fc 01       	movw	r30, r24
    7bfa:	60 81       	ld	r22, Z
    7bfc:	71 81       	ldd	r23, Z+1	; 0x01
    7bfe:	62 0f       	add	r22, r18
    7c00:	73 1f       	adc	r23, r19
    7c02:	ae 01       	movw	r20, r28
    7c04:	c8 01       	movw	r24, r16
    7c06:	6e d4       	rcall	.+2268   	; 0x84e4 <strncpy>
    7c08:	c0 0f       	add	r28, r16
    7c0a:	d1 1f       	adc	r29, r17
    7c0c:	18 82       	st	Y, r1
    7c0e:	df 91       	pop	r29
    7c10:	cf 91       	pop	r28
    7c12:	1f 91       	pop	r17
    7c14:	0f 91       	pop	r16
    7c16:	08 95       	ret

00007c18 <_ZNK6String9substringEjj>:
    7c18:	bf 92       	push	r11
    7c1a:	cf 92       	push	r12
    7c1c:	df 92       	push	r13
    7c1e:	ef 92       	push	r14
    7c20:	ff 92       	push	r15
    7c22:	0f 93       	push	r16
    7c24:	1f 93       	push	r17
    7c26:	cf 93       	push	r28
    7c28:	df 93       	push	r29
    7c2a:	7c 01       	movw	r14, r24
    7c2c:	6b 01       	movw	r12, r22
    7c2e:	8a 01       	movw	r16, r20
    7c30:	e9 01       	movw	r28, r18
    7c32:	24 17       	cp	r18, r20
    7c34:	35 07       	cpc	r19, r21
    7c36:	20 f4       	brcc	.+8      	; 0x7c40 <_ZNK6String9substringEjj+0x28>
    7c38:	81 2f       	mov	r24, r17
    7c3a:	89 01       	movw	r16, r18
    7c3c:	c4 2f       	mov	r28, r20
    7c3e:	d8 2f       	mov	r29, r24
    7c40:	6a ee       	ldi	r22, 0xEA	; 234
    7c42:	71 e0       	ldi	r23, 0x01	; 1
    7c44:	c7 01       	movw	r24, r14
    7c46:	93 dd       	rcall	.-1242   	; 0x776e <_ZN6StringC1EPKc>
    7c48:	d6 01       	movw	r26, r12
    7c4a:	14 96       	adiw	r26, 0x04	; 4
    7c4c:	8d 91       	ld	r24, X+
    7c4e:	9c 91       	ld	r25, X
    7c50:	15 97       	sbiw	r26, 0x05	; 5
    7c52:	08 17       	cp	r16, r24
    7c54:	19 07       	cpc	r17, r25
    7c56:	c0 f4       	brcc	.+48     	; 0x7c88 <_ZNK6String9substringEjj+0x70>
    7c58:	8c 17       	cp	r24, r28
    7c5a:	9d 07       	cpc	r25, r29
    7c5c:	08 f4       	brcc	.+2      	; 0x7c60 <_ZNK6String9substringEjj+0x48>
    7c5e:	ec 01       	movw	r28, r24
    7c60:	d6 01       	movw	r26, r12
    7c62:	ed 91       	ld	r30, X+
    7c64:	fc 91       	ld	r31, X
    7c66:	11 97       	sbiw	r26, 0x01	; 1
    7c68:	ec 0f       	add	r30, r28
    7c6a:	fd 1f       	adc	r31, r29
    7c6c:	b0 80       	ld	r11, Z
    7c6e:	10 82       	st	Z, r1
    7c70:	6d 91       	ld	r22, X+
    7c72:	7c 91       	ld	r23, X
    7c74:	60 0f       	add	r22, r16
    7c76:	71 1f       	adc	r23, r17
    7c78:	c7 01       	movw	r24, r14
    7c7a:	f8 dd       	rcall	.-1040   	; 0x786c <_ZN6StringaSEPKc>
    7c7c:	d6 01       	movw	r26, r12
    7c7e:	ed 91       	ld	r30, X+
    7c80:	fc 91       	ld	r31, X
    7c82:	ec 0f       	add	r30, r28
    7c84:	fd 1f       	adc	r31, r29
    7c86:	b0 82       	st	Z, r11
    7c88:	c7 01       	movw	r24, r14
    7c8a:	df 91       	pop	r29
    7c8c:	cf 91       	pop	r28
    7c8e:	1f 91       	pop	r17
    7c90:	0f 91       	pop	r16
    7c92:	ff 90       	pop	r15
    7c94:	ef 90       	pop	r14
    7c96:	df 90       	pop	r13
    7c98:	cf 90       	pop	r12
    7c9a:	bf 90       	pop	r11
    7c9c:	08 95       	ret

00007c9e <_ZN6String4trimEv>:

void String::trim(void)
{
    7c9e:	af 92       	push	r10
    7ca0:	bf 92       	push	r11
    7ca2:	cf 92       	push	r12
    7ca4:	df 92       	push	r13
    7ca6:	ef 92       	push	r14
    7ca8:	ff 92       	push	r15
    7caa:	0f 93       	push	r16
    7cac:	1f 93       	push	r17
    7cae:	cf 93       	push	r28
    7cb0:	df 93       	push	r29
	if (!buffer || len == 0) return;
    7cb2:	dc 01       	movw	r26, r24
    7cb4:	cd 90       	ld	r12, X+
    7cb6:	dc 90       	ld	r13, X
    7cb8:	11 97       	sbiw	r26, 0x01	; 1
    7cba:	c1 14       	cp	r12, r1
    7cbc:	d1 04       	cpc	r13, r1
    7cbe:	09 f4       	brne	.+2      	; 0x7cc2 <_ZN6String4trimEv+0x24>
    7cc0:	3c c0       	rjmp	.+120    	; 0x7d3a <_ZN6String4trimEv+0x9c>
    7cc2:	14 96       	adiw	r26, 0x04	; 4
    7cc4:	cd 91       	ld	r28, X+
    7cc6:	dc 91       	ld	r29, X
    7cc8:	15 97       	sbiw	r26, 0x05	; 5
    7cca:	20 97       	sbiw	r28, 0x00	; 0
    7ccc:	b1 f1       	breq	.+108    	; 0x7d3a <_ZN6String4trimEv+0x9c>
    7cce:	8c 01       	movw	r16, r24
    7cd0:	76 01       	movw	r14, r12
    7cd2:	57 01       	movw	r10, r14
    7cd4:	bf ef       	ldi	r27, 0xFF	; 255
    7cd6:	ab 1a       	sub	r10, r27
    7cd8:	bb 0a       	sbc	r11, r27
	char *begin = buffer;
	while (isspace(*begin)) begin++;
    7cda:	f7 01       	movw	r30, r14
    7cdc:	80 81       	ld	r24, Z
    7cde:	90 e0       	ldi	r25, 0x00	; 0
    7ce0:	c9 d3       	rcall	.+1938   	; 0x8474 <isspace>
    7ce2:	89 2b       	or	r24, r25
    7ce4:	11 f0       	breq	.+4      	; 0x7cea <_ZN6String4trimEv+0x4c>
    7ce6:	75 01       	movw	r14, r10
    7ce8:	f4 cf       	rjmp	.-24     	; 0x7cd2 <_ZN6String4trimEv+0x34>
	char *end = buffer + len - 1;
    7cea:	21 97       	sbiw	r28, 0x01	; 1
    7cec:	cc 0d       	add	r28, r12
    7cee:	dd 1d       	adc	r29, r13
	while (isspace(*end) && end >= begin) end--;
    7cf0:	88 81       	ld	r24, Y
    7cf2:	90 e0       	ldi	r25, 0x00	; 0
    7cf4:	bf d3       	rcall	.+1918   	; 0x8474 <isspace>
    7cf6:	89 2b       	or	r24, r25
    7cf8:	29 f0       	breq	.+10     	; 0x7d04 <_ZN6String4trimEv+0x66>
    7cfa:	ce 15       	cp	r28, r14
    7cfc:	df 05       	cpc	r29, r15
    7cfe:	10 f0       	brcs	.+4      	; 0x7d04 <_ZN6String4trimEv+0x66>
    7d00:	21 97       	sbiw	r28, 0x01	; 1
    7d02:	f6 cf       	rjmp	.-20     	; 0x7cf0 <_ZN6String4trimEv+0x52>
	len = end + 1 - begin;
    7d04:	ae 01       	movw	r20, r28
    7d06:	4f 5f       	subi	r20, 0xFF	; 255
    7d08:	5f 4f       	sbci	r21, 0xFF	; 255
    7d0a:	4e 19       	sub	r20, r14
    7d0c:	5f 09       	sbc	r21, r15
    7d0e:	d8 01       	movw	r26, r16
    7d10:	15 96       	adiw	r26, 0x05	; 5
    7d12:	5c 93       	st	X, r21
    7d14:	4e 93       	st	-X, r20
    7d16:	14 97       	sbiw	r26, 0x04	; 4
	if (begin > buffer) memcpy(buffer, begin, len);
    7d18:	ce 14       	cp	r12, r14
    7d1a:	df 04       	cpc	r13, r15
    7d1c:	18 f4       	brcc	.+6      	; 0x7d24 <_ZN6String4trimEv+0x86>
    7d1e:	b7 01       	movw	r22, r14
    7d20:	c6 01       	movw	r24, r12
    7d22:	b9 d3       	rcall	.+1906   	; 0x8496 <memcpy>
	buffer[len] = 0;
    7d24:	d8 01       	movw	r26, r16
    7d26:	ed 91       	ld	r30, X+
    7d28:	fc 91       	ld	r31, X
    7d2a:	11 97       	sbiw	r26, 0x01	; 1
    7d2c:	14 96       	adiw	r26, 0x04	; 4
    7d2e:	8d 91       	ld	r24, X+
    7d30:	9c 91       	ld	r25, X
    7d32:	15 97       	sbiw	r26, 0x05	; 5
    7d34:	e8 0f       	add	r30, r24
    7d36:	f9 1f       	adc	r31, r25
    7d38:	10 82       	st	Z, r1
}
    7d3a:	df 91       	pop	r29
    7d3c:	cf 91       	pop	r28
    7d3e:	1f 91       	pop	r17
    7d40:	0f 91       	pop	r16
    7d42:	ff 90       	pop	r15
    7d44:	ef 90       	pop	r14
    7d46:	df 90       	pop	r13
    7d48:	cf 90       	pop	r12
    7d4a:	bf 90       	pop	r11
    7d4c:	af 90       	pop	r10
    7d4e:	08 95       	ret

00007d50 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
    7d50:	fc 01       	movw	r30, r24
    7d52:	80 81       	ld	r24, Z
    7d54:	91 81       	ldd	r25, Z+1	; 0x01
    7d56:	00 97       	sbiw	r24, 0x00	; 0
    7d58:	09 f0       	breq	.+2      	; 0x7d5c <_ZNK6String5toIntEv+0xc>
    7d5a:	66 c3       	rjmp	.+1740   	; 0x8428 <atol>
	return 0;
}
    7d5c:	60 e0       	ldi	r22, 0x00	; 0
    7d5e:	70 e0       	ldi	r23, 0x00	; 0
    7d60:	cb 01       	movw	r24, r22
    7d62:	08 95       	ret

00007d64 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    7d64:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    7d66:	91 8d       	ldd	r25, Z+25	; 0x19
    7d68:	22 8d       	ldd	r18, Z+26	; 0x1a
    7d6a:	89 2f       	mov	r24, r25
    7d6c:	90 e0       	ldi	r25, 0x00	; 0
    7d6e:	80 5c       	subi	r24, 0xC0	; 192
    7d70:	9f 4f       	sbci	r25, 0xFF	; 255
    7d72:	82 1b       	sub	r24, r18
    7d74:	91 09       	sbc	r25, r1
}
    7d76:	8f 73       	andi	r24, 0x3F	; 63
    7d78:	99 27       	eor	r25, r25
    7d7a:	08 95       	ret

00007d7c <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    7d7c:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    7d7e:	91 8d       	ldd	r25, Z+25	; 0x19
    7d80:	82 8d       	ldd	r24, Z+26	; 0x1a
    7d82:	98 17       	cp	r25, r24
    7d84:	31 f0       	breq	.+12     	; 0x7d92 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    7d86:	82 8d       	ldd	r24, Z+26	; 0x1a
    7d88:	e8 0f       	add	r30, r24
    7d8a:	f1 1d       	adc	r31, r1
    7d8c:	85 8d       	ldd	r24, Z+29	; 0x1d
    7d8e:	90 e0       	ldi	r25, 0x00	; 0
    7d90:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    7d92:	8f ef       	ldi	r24, 0xFF	; 255
    7d94:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    7d96:	08 95       	ret

00007d98 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    7d98:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    7d9a:	91 8d       	ldd	r25, Z+25	; 0x19
    7d9c:	82 8d       	ldd	r24, Z+26	; 0x1a
    7d9e:	98 17       	cp	r25, r24
    7da0:	61 f0       	breq	.+24     	; 0x7dba <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    7da2:	82 8d       	ldd	r24, Z+26	; 0x1a
    7da4:	df 01       	movw	r26, r30
    7da6:	a8 0f       	add	r26, r24
    7da8:	b1 1d       	adc	r27, r1
    7daa:	5d 96       	adiw	r26, 0x1d	; 29
    7dac:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    7dae:	92 8d       	ldd	r25, Z+26	; 0x1a
    7db0:	9f 5f       	subi	r25, 0xFF	; 255
    7db2:	9f 73       	andi	r25, 0x3F	; 63
    7db4:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    7db6:	90 e0       	ldi	r25, 0x00	; 0
    7db8:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    7dba:	8f ef       	ldi	r24, 0xFF	; 255
    7dbc:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    7dbe:	08 95       	ret

00007dc0 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    7dc0:	fc 01       	movw	r30, r24
    7dc2:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    7dc4:	44 8d       	ldd	r20, Z+28	; 0x1c
    7dc6:	25 2f       	mov	r18, r21
    7dc8:	30 e0       	ldi	r19, 0x00	; 0
    7dca:	84 2f       	mov	r24, r20
    7dcc:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    7dce:	82 1b       	sub	r24, r18
    7dd0:	93 0b       	sbc	r25, r19
    7dd2:	54 17       	cp	r21, r20
    7dd4:	10 f0       	brcs	.+4      	; 0x7dda <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    7dd6:	cf 96       	adiw	r24, 0x3f	; 63
    7dd8:	08 95       	ret
  return tail - head - 1;
    7dda:	01 97       	sbiw	r24, 0x01	; 1
}
    7ddc:	08 95       	ret

00007dde <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    7dde:	8f ed       	ldi	r24, 0xDF	; 223
    7de0:	97 e3       	ldi	r25, 0x37	; 55
    7de2:	89 2b       	or	r24, r25
    7de4:	41 f0       	breq	.+16     	; 0x7df6 <_Z14serialEventRunv+0x18>
    7de6:	80 e0       	ldi	r24, 0x00	; 0
    7de8:	90 e0       	ldi	r25, 0x00	; 0
    7dea:	89 2b       	or	r24, r25
    7dec:	21 f0       	breq	.+8      	; 0x7df6 <_Z14serialEventRunv+0x18>
    7dee:	e7 d8       	rcall	.-3634   	; 0x6fbe <_Z17Serial0_availablev>
    7df0:	81 11       	cpse	r24, r1
    7df2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    7df6:	08 95       	ret

00007df8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    7df8:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    7dfa:	84 8d       	ldd	r24, Z+28	; 0x1c
    7dfc:	df 01       	movw	r26, r30
    7dfe:	a8 0f       	add	r26, r24
    7e00:	b1 1d       	adc	r27, r1
    7e02:	a3 5a       	subi	r26, 0xA3	; 163
    7e04:	bf 4f       	sbci	r27, 0xFF	; 255
    7e06:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    7e08:	84 8d       	ldd	r24, Z+28	; 0x1c
    7e0a:	90 e0       	ldi	r25, 0x00	; 0
    7e0c:	01 96       	adiw	r24, 0x01	; 1
    7e0e:	8f 73       	andi	r24, 0x3F	; 63
    7e10:	99 27       	eor	r25, r25
    7e12:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    7e14:	a6 89       	ldd	r26, Z+22	; 0x16
    7e16:	b7 89       	ldd	r27, Z+23	; 0x17
    7e18:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    7e1a:	a0 89       	ldd	r26, Z+16	; 0x10
    7e1c:	b1 89       	ldd	r27, Z+17	; 0x11
    7e1e:	8c 91       	ld	r24, X
    7e20:	83 70       	andi	r24, 0x03	; 3
    7e22:	80 64       	ori	r24, 0x40	; 64
    7e24:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    7e26:	93 8d       	ldd	r25, Z+27	; 0x1b
    7e28:	84 8d       	ldd	r24, Z+28	; 0x1c
    7e2a:	98 13       	cpse	r25, r24
    7e2c:	06 c0       	rjmp	.+12     	; 0x7e3a <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    7e2e:	02 88       	ldd	r0, Z+18	; 0x12
    7e30:	f3 89       	ldd	r31, Z+19	; 0x13
    7e32:	e0 2d       	mov	r30, r0
    7e34:	80 81       	ld	r24, Z
    7e36:	8f 7d       	andi	r24, 0xDF	; 223
    7e38:	80 83       	st	Z, r24
    7e3a:	08 95       	ret

00007e3c <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    7e3c:	ef 92       	push	r14
    7e3e:	ff 92       	push	r15
    7e40:	0f 93       	push	r16
    7e42:	1f 93       	push	r17
    7e44:	cf 93       	push	r28
    7e46:	df 93       	push	r29
    7e48:	ec 01       	movw	r28, r24
  _written = true;
    7e4a:	81 e0       	ldi	r24, 0x01	; 1
    7e4c:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    7e4e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    7e50:	8c 8d       	ldd	r24, Y+28	; 0x1c
    7e52:	98 13       	cpse	r25, r24
    7e54:	05 c0       	rjmp	.+10     	; 0x7e60 <_ZN14HardwareSerial5writeEh+0x24>
    7e56:	e8 89       	ldd	r30, Y+16	; 0x10
    7e58:	f9 89       	ldd	r31, Y+17	; 0x11
    7e5a:	80 81       	ld	r24, Z
    7e5c:	85 fd       	sbrc	r24, 5
    7e5e:	25 c0       	rjmp	.+74     	; 0x7eaa <_ZN14HardwareSerial5writeEh+0x6e>
    7e60:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    7e62:	0b 8d       	ldd	r16, Y+27	; 0x1b
    7e64:	10 e0       	ldi	r17, 0x00	; 0
    7e66:	0f 5f       	subi	r16, 0xFF	; 255
    7e68:	1f 4f       	sbci	r17, 0xFF	; 255
    7e6a:	0f 73       	andi	r16, 0x3F	; 63
    7e6c:	11 27       	eor	r17, r17
    7e6e:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    7e70:	8c 8d       	ldd	r24, Y+28	; 0x1c
    7e72:	e8 12       	cpse	r14, r24
    7e74:	0b c0       	rjmp	.+22     	; 0x7e8c <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    7e76:	0f b6       	in	r0, 0x3f	; 63
    7e78:	07 fc       	sbrc	r0, 7
    7e7a:	fa cf       	rjmp	.-12     	; 0x7e70 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    7e7c:	e8 89       	ldd	r30, Y+16	; 0x10
    7e7e:	f9 89       	ldd	r31, Y+17	; 0x11
    7e80:	80 81       	ld	r24, Z
    7e82:	85 ff       	sbrs	r24, 5
    7e84:	f5 cf       	rjmp	.-22     	; 0x7e70 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    7e86:	ce 01       	movw	r24, r28
    7e88:	b7 df       	rcall	.-146    	; 0x7df8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    7e8a:	f2 cf       	rjmp	.-28     	; 0x7e70 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    7e8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7e8e:	fe 01       	movw	r30, r28
    7e90:	e8 0f       	add	r30, r24
    7e92:	f1 1d       	adc	r31, r1
    7e94:	e3 5a       	subi	r30, 0xA3	; 163
    7e96:	ff 4f       	sbci	r31, 0xFF	; 255
    7e98:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    7e9a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    7e9c:	f8 94       	cli
    _tx_buffer_head = i;
    7e9e:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    7ea0:	ea 89       	ldd	r30, Y+18	; 0x12
    7ea2:	fb 89       	ldd	r31, Y+19	; 0x13
    7ea4:	80 81       	ld	r24, Z
    7ea6:	80 62       	ori	r24, 0x20	; 32
    7ea8:	0a c0       	rjmp	.+20     	; 0x7ebe <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    7eaa:	9f b7       	in	r25, 0x3f	; 63
    7eac:	f8 94       	cli
      *_udr = c;
    7eae:	ee 89       	ldd	r30, Y+22	; 0x16
    7eb0:	ff 89       	ldd	r31, Y+23	; 0x17
    7eb2:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    7eb4:	e8 89       	ldd	r30, Y+16	; 0x10
    7eb6:	f9 89       	ldd	r31, Y+17	; 0x11
    7eb8:	80 81       	ld	r24, Z
    7eba:	83 70       	andi	r24, 0x03	; 3
    7ebc:	80 64       	ori	r24, 0x40	; 64
    7ebe:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    7ec0:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    7ec2:	81 e0       	ldi	r24, 0x01	; 1
    7ec4:	90 e0       	ldi	r25, 0x00	; 0
    7ec6:	df 91       	pop	r29
    7ec8:	cf 91       	pop	r28
    7eca:	1f 91       	pop	r17
    7ecc:	0f 91       	pop	r16
    7ece:	ff 90       	pop	r15
    7ed0:	ef 90       	pop	r14
    7ed2:	08 95       	ret

00007ed4 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    7ed4:	cf 93       	push	r28
    7ed6:	df 93       	push	r29
    7ed8:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    7eda:	88 8d       	ldd	r24, Y+24	; 0x18
    7edc:	88 23       	and	r24, r24
    7ede:	c1 f0       	breq	.+48     	; 0x7f10 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    7ee0:	ea 89       	ldd	r30, Y+18	; 0x12
    7ee2:	fb 89       	ldd	r31, Y+19	; 0x13
    7ee4:	80 81       	ld	r24, Z
    7ee6:	85 fd       	sbrc	r24, 5
    7ee8:	05 c0       	rjmp	.+10     	; 0x7ef4 <_ZN14HardwareSerial5flushEv+0x20>
    7eea:	a8 89       	ldd	r26, Y+16	; 0x10
    7eec:	b9 89       	ldd	r27, Y+17	; 0x11
    7eee:	8c 91       	ld	r24, X
    7ef0:	86 fd       	sbrc	r24, 6
    7ef2:	0e c0       	rjmp	.+28     	; 0x7f10 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    7ef4:	0f b6       	in	r0, 0x3f	; 63
    7ef6:	07 fc       	sbrc	r0, 7
    7ef8:	f5 cf       	rjmp	.-22     	; 0x7ee4 <_ZN14HardwareSerial5flushEv+0x10>
    7efa:	80 81       	ld	r24, Z
    7efc:	85 ff       	sbrs	r24, 5
    7efe:	f2 cf       	rjmp	.-28     	; 0x7ee4 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    7f00:	a8 89       	ldd	r26, Y+16	; 0x10
    7f02:	b9 89       	ldd	r27, Y+17	; 0x11
    7f04:	8c 91       	ld	r24, X
    7f06:	85 ff       	sbrs	r24, 5
    7f08:	ed cf       	rjmp	.-38     	; 0x7ee4 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    7f0a:	ce 01       	movw	r24, r28
    7f0c:	75 df       	rcall	.-278    	; 0x7df8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    7f0e:	e8 cf       	rjmp	.-48     	; 0x7ee0 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    7f10:	df 91       	pop	r29
    7f12:	cf 91       	pop	r28
    7f14:	08 95       	ret

00007f16 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    7f16:	08 95       	ret

00007f18 <__udivmodqi4>:
    7f18:	99 1b       	sub	r25, r25
    7f1a:	79 e0       	ldi	r23, 0x09	; 9
    7f1c:	04 c0       	rjmp	.+8      	; 0x7f26 <__udivmodqi4_ep>

00007f1e <__udivmodqi4_loop>:
    7f1e:	99 1f       	adc	r25, r25
    7f20:	96 17       	cp	r25, r22
    7f22:	08 f0       	brcs	.+2      	; 0x7f26 <__udivmodqi4_ep>
    7f24:	96 1b       	sub	r25, r22

00007f26 <__udivmodqi4_ep>:
    7f26:	88 1f       	adc	r24, r24
    7f28:	7a 95       	dec	r23
    7f2a:	c9 f7       	brne	.-14     	; 0x7f1e <__udivmodqi4_loop>
    7f2c:	80 95       	com	r24
    7f2e:	08 95       	ret

00007f30 <__udivmodhi4>:
    7f30:	aa 1b       	sub	r26, r26
    7f32:	bb 1b       	sub	r27, r27
    7f34:	51 e1       	ldi	r21, 0x11	; 17
    7f36:	07 c0       	rjmp	.+14     	; 0x7f46 <__udivmodhi4_ep>

00007f38 <__udivmodhi4_loop>:
    7f38:	aa 1f       	adc	r26, r26
    7f3a:	bb 1f       	adc	r27, r27
    7f3c:	a6 17       	cp	r26, r22
    7f3e:	b7 07       	cpc	r27, r23
    7f40:	10 f0       	brcs	.+4      	; 0x7f46 <__udivmodhi4_ep>
    7f42:	a6 1b       	sub	r26, r22
    7f44:	b7 0b       	sbc	r27, r23

00007f46 <__udivmodhi4_ep>:
    7f46:	88 1f       	adc	r24, r24
    7f48:	99 1f       	adc	r25, r25
    7f4a:	5a 95       	dec	r21
    7f4c:	a9 f7       	brne	.-22     	; 0x7f38 <__udivmodhi4_loop>
    7f4e:	80 95       	com	r24
    7f50:	90 95       	com	r25
    7f52:	bc 01       	movw	r22, r24
    7f54:	cd 01       	movw	r24, r26
    7f56:	08 95       	ret

00007f58 <__udivmodsi4>:
    7f58:	a1 e2       	ldi	r26, 0x21	; 33
    7f5a:	1a 2e       	mov	r1, r26
    7f5c:	aa 1b       	sub	r26, r26
    7f5e:	bb 1b       	sub	r27, r27
    7f60:	fd 01       	movw	r30, r26
    7f62:	0d c0       	rjmp	.+26     	; 0x7f7e <__udivmodsi4_ep>

00007f64 <__udivmodsi4_loop>:
    7f64:	aa 1f       	adc	r26, r26
    7f66:	bb 1f       	adc	r27, r27
    7f68:	ee 1f       	adc	r30, r30
    7f6a:	ff 1f       	adc	r31, r31
    7f6c:	a2 17       	cp	r26, r18
    7f6e:	b3 07       	cpc	r27, r19
    7f70:	e4 07       	cpc	r30, r20
    7f72:	f5 07       	cpc	r31, r21
    7f74:	20 f0       	brcs	.+8      	; 0x7f7e <__udivmodsi4_ep>
    7f76:	a2 1b       	sub	r26, r18
    7f78:	b3 0b       	sbc	r27, r19
    7f7a:	e4 0b       	sbc	r30, r20
    7f7c:	f5 0b       	sbc	r31, r21

00007f7e <__udivmodsi4_ep>:
    7f7e:	66 1f       	adc	r22, r22
    7f80:	77 1f       	adc	r23, r23
    7f82:	88 1f       	adc	r24, r24
    7f84:	99 1f       	adc	r25, r25
    7f86:	1a 94       	dec	r1
    7f88:	69 f7       	brne	.-38     	; 0x7f64 <__udivmodsi4_loop>
    7f8a:	60 95       	com	r22
    7f8c:	70 95       	com	r23
    7f8e:	80 95       	com	r24
    7f90:	90 95       	com	r25
    7f92:	9b 01       	movw	r18, r22
    7f94:	ac 01       	movw	r20, r24
    7f96:	bd 01       	movw	r22, r26
    7f98:	cf 01       	movw	r24, r30
    7f9a:	08 95       	ret

00007f9c <__tablejump2__>:
    7f9c:	ee 0f       	add	r30, r30
    7f9e:	ff 1f       	adc	r31, r31
    7fa0:	00 24       	eor	r0, r0
    7fa2:	00 1c       	adc	r0, r0
    7fa4:	0b be       	out	0x3b, r0	; 59
    7fa6:	07 90       	elpm	r0, Z+
    7fa8:	f6 91       	elpm	r31, Z
    7faa:	e0 2d       	mov	r30, r0
    7fac:	09 94       	ijmp

00007fae <__umulhisi3>:
    7fae:	a2 9f       	mul	r26, r18
    7fb0:	b0 01       	movw	r22, r0
    7fb2:	b3 9f       	mul	r27, r19
    7fb4:	c0 01       	movw	r24, r0
    7fb6:	a3 9f       	mul	r26, r19
    7fb8:	70 0d       	add	r23, r0
    7fba:	81 1d       	adc	r24, r1
    7fbc:	11 24       	eor	r1, r1
    7fbe:	91 1d       	adc	r25, r1
    7fc0:	b2 9f       	mul	r27, r18
    7fc2:	70 0d       	add	r23, r0
    7fc4:	81 1d       	adc	r24, r1
    7fc6:	11 24       	eor	r1, r1
    7fc8:	91 1d       	adc	r25, r1
    7fca:	08 95       	ret

00007fcc <__muluhisi3>:
    7fcc:	f0 df       	rcall	.-32     	; 0x7fae <__umulhisi3>
    7fce:	a5 9f       	mul	r26, r21
    7fd0:	90 0d       	add	r25, r0
    7fd2:	b4 9f       	mul	r27, r20
    7fd4:	90 0d       	add	r25, r0
    7fd6:	a4 9f       	mul	r26, r20
    7fd8:	80 0d       	add	r24, r0
    7fda:	91 1d       	adc	r25, r1
    7fdc:	11 24       	eor	r1, r1
    7fde:	08 95       	ret

00007fe0 <dtostrf>:
    7fe0:	ef 92       	push	r14
    7fe2:	0f 93       	push	r16
    7fe4:	1f 93       	push	r17
    7fe6:	cf 93       	push	r28
    7fe8:	df 93       	push	r29
    7fea:	e8 01       	movw	r28, r16
    7fec:	47 fd       	sbrc	r20, 7
    7fee:	02 c0       	rjmp	.+4      	; 0x7ff4 <dtostrf+0x14>
    7ff0:	34 e0       	ldi	r19, 0x04	; 4
    7ff2:	01 c0       	rjmp	.+2      	; 0x7ff6 <dtostrf+0x16>
    7ff4:	34 e1       	ldi	r19, 0x14	; 20
    7ff6:	04 2e       	mov	r0, r20
    7ff8:	00 0c       	add	r0, r0
    7ffa:	55 0b       	sbc	r21, r21
    7ffc:	57 ff       	sbrs	r21, 7
    7ffe:	03 c0       	rjmp	.+6      	; 0x8006 <dtostrf+0x26>
    8000:	51 95       	neg	r21
    8002:	41 95       	neg	r20
    8004:	51 09       	sbc	r21, r1
    8006:	e3 2e       	mov	r14, r19
    8008:	02 2f       	mov	r16, r18
    800a:	24 2f       	mov	r18, r20
    800c:	ae 01       	movw	r20, r28
    800e:	f0 d2       	rcall	.+1504   	; 0x85f0 <dtoa_prf>
    8010:	ce 01       	movw	r24, r28
    8012:	df 91       	pop	r29
    8014:	cf 91       	pop	r28
    8016:	1f 91       	pop	r17
    8018:	0f 91       	pop	r16
    801a:	ef 90       	pop	r14
    801c:	08 95       	ret

0000801e <malloc>:
    801e:	0f 93       	push	r16
    8020:	1f 93       	push	r17
    8022:	cf 93       	push	r28
    8024:	df 93       	push	r29
    8026:	82 30       	cpi	r24, 0x02	; 2
    8028:	91 05       	cpc	r25, r1
    802a:	10 f4       	brcc	.+4      	; 0x8030 <malloc+0x12>
    802c:	82 e0       	ldi	r24, 0x02	; 2
    802e:	90 e0       	ldi	r25, 0x00	; 0
    8030:	e0 91 b8 0d 	lds	r30, 0x0DB8	; 0x800db8 <__flp>
    8034:	f0 91 b9 0d 	lds	r31, 0x0DB9	; 0x800db9 <__flp+0x1>
    8038:	20 e0       	ldi	r18, 0x00	; 0
    803a:	30 e0       	ldi	r19, 0x00	; 0
    803c:	a0 e0       	ldi	r26, 0x00	; 0
    803e:	b0 e0       	ldi	r27, 0x00	; 0
    8040:	30 97       	sbiw	r30, 0x00	; 0
    8042:	19 f1       	breq	.+70     	; 0x808a <malloc+0x6c>
    8044:	40 81       	ld	r20, Z
    8046:	51 81       	ldd	r21, Z+1	; 0x01
    8048:	02 81       	ldd	r16, Z+2	; 0x02
    804a:	13 81       	ldd	r17, Z+3	; 0x03
    804c:	48 17       	cp	r20, r24
    804e:	59 07       	cpc	r21, r25
    8050:	c8 f0       	brcs	.+50     	; 0x8084 <malloc+0x66>
    8052:	84 17       	cp	r24, r20
    8054:	95 07       	cpc	r25, r21
    8056:	69 f4       	brne	.+26     	; 0x8072 <malloc+0x54>
    8058:	10 97       	sbiw	r26, 0x00	; 0
    805a:	31 f0       	breq	.+12     	; 0x8068 <malloc+0x4a>
    805c:	12 96       	adiw	r26, 0x02	; 2
    805e:	0c 93       	st	X, r16
    8060:	12 97       	sbiw	r26, 0x02	; 2
    8062:	13 96       	adiw	r26, 0x03	; 3
    8064:	1c 93       	st	X, r17
    8066:	27 c0       	rjmp	.+78     	; 0x80b6 <malloc+0x98>
    8068:	00 93 b8 0d 	sts	0x0DB8, r16	; 0x800db8 <__flp>
    806c:	10 93 b9 0d 	sts	0x0DB9, r17	; 0x800db9 <__flp+0x1>
    8070:	22 c0       	rjmp	.+68     	; 0x80b6 <malloc+0x98>
    8072:	21 15       	cp	r18, r1
    8074:	31 05       	cpc	r19, r1
    8076:	19 f0       	breq	.+6      	; 0x807e <malloc+0x60>
    8078:	42 17       	cp	r20, r18
    807a:	53 07       	cpc	r21, r19
    807c:	18 f4       	brcc	.+6      	; 0x8084 <malloc+0x66>
    807e:	9a 01       	movw	r18, r20
    8080:	bd 01       	movw	r22, r26
    8082:	ef 01       	movw	r28, r30
    8084:	df 01       	movw	r26, r30
    8086:	f8 01       	movw	r30, r16
    8088:	db cf       	rjmp	.-74     	; 0x8040 <malloc+0x22>
    808a:	21 15       	cp	r18, r1
    808c:	31 05       	cpc	r19, r1
    808e:	f9 f0       	breq	.+62     	; 0x80ce <malloc+0xb0>
    8090:	28 1b       	sub	r18, r24
    8092:	39 0b       	sbc	r19, r25
    8094:	24 30       	cpi	r18, 0x04	; 4
    8096:	31 05       	cpc	r19, r1
    8098:	80 f4       	brcc	.+32     	; 0x80ba <malloc+0x9c>
    809a:	8a 81       	ldd	r24, Y+2	; 0x02
    809c:	9b 81       	ldd	r25, Y+3	; 0x03
    809e:	61 15       	cp	r22, r1
    80a0:	71 05       	cpc	r23, r1
    80a2:	21 f0       	breq	.+8      	; 0x80ac <malloc+0x8e>
    80a4:	fb 01       	movw	r30, r22
    80a6:	93 83       	std	Z+3, r25	; 0x03
    80a8:	82 83       	std	Z+2, r24	; 0x02
    80aa:	04 c0       	rjmp	.+8      	; 0x80b4 <malloc+0x96>
    80ac:	90 93 b9 0d 	sts	0x0DB9, r25	; 0x800db9 <__flp+0x1>
    80b0:	80 93 b8 0d 	sts	0x0DB8, r24	; 0x800db8 <__flp>
    80b4:	fe 01       	movw	r30, r28
    80b6:	32 96       	adiw	r30, 0x02	; 2
    80b8:	44 c0       	rjmp	.+136    	; 0x8142 <malloc+0x124>
    80ba:	fe 01       	movw	r30, r28
    80bc:	e2 0f       	add	r30, r18
    80be:	f3 1f       	adc	r31, r19
    80c0:	81 93       	st	Z+, r24
    80c2:	91 93       	st	Z+, r25
    80c4:	22 50       	subi	r18, 0x02	; 2
    80c6:	31 09       	sbc	r19, r1
    80c8:	39 83       	std	Y+1, r19	; 0x01
    80ca:	28 83       	st	Y, r18
    80cc:	3a c0       	rjmp	.+116    	; 0x8142 <malloc+0x124>
    80ce:	20 91 b6 0d 	lds	r18, 0x0DB6	; 0x800db6 <__brkval>
    80d2:	30 91 b7 0d 	lds	r19, 0x0DB7	; 0x800db7 <__brkval+0x1>
    80d6:	23 2b       	or	r18, r19
    80d8:	41 f4       	brne	.+16     	; 0x80ea <malloc+0xcc>
    80da:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    80de:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    80e2:	30 93 b7 0d 	sts	0x0DB7, r19	; 0x800db7 <__brkval+0x1>
    80e6:	20 93 b6 0d 	sts	0x0DB6, r18	; 0x800db6 <__brkval>
    80ea:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    80ee:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    80f2:	21 15       	cp	r18, r1
    80f4:	31 05       	cpc	r19, r1
    80f6:	41 f4       	brne	.+16     	; 0x8108 <malloc+0xea>
    80f8:	2d b7       	in	r18, 0x3d	; 61
    80fa:	3e b7       	in	r19, 0x3e	; 62
    80fc:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    8100:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    8104:	24 1b       	sub	r18, r20
    8106:	35 0b       	sbc	r19, r21
    8108:	e0 91 b6 0d 	lds	r30, 0x0DB6	; 0x800db6 <__brkval>
    810c:	f0 91 b7 0d 	lds	r31, 0x0DB7	; 0x800db7 <__brkval+0x1>
    8110:	e2 17       	cp	r30, r18
    8112:	f3 07       	cpc	r31, r19
    8114:	a0 f4       	brcc	.+40     	; 0x813e <malloc+0x120>
    8116:	2e 1b       	sub	r18, r30
    8118:	3f 0b       	sbc	r19, r31
    811a:	28 17       	cp	r18, r24
    811c:	39 07       	cpc	r19, r25
    811e:	78 f0       	brcs	.+30     	; 0x813e <malloc+0x120>
    8120:	ac 01       	movw	r20, r24
    8122:	4e 5f       	subi	r20, 0xFE	; 254
    8124:	5f 4f       	sbci	r21, 0xFF	; 255
    8126:	24 17       	cp	r18, r20
    8128:	35 07       	cpc	r19, r21
    812a:	48 f0       	brcs	.+18     	; 0x813e <malloc+0x120>
    812c:	4e 0f       	add	r20, r30
    812e:	5f 1f       	adc	r21, r31
    8130:	50 93 b7 0d 	sts	0x0DB7, r21	; 0x800db7 <__brkval+0x1>
    8134:	40 93 b6 0d 	sts	0x0DB6, r20	; 0x800db6 <__brkval>
    8138:	81 93       	st	Z+, r24
    813a:	91 93       	st	Z+, r25
    813c:	02 c0       	rjmp	.+4      	; 0x8142 <malloc+0x124>
    813e:	e0 e0       	ldi	r30, 0x00	; 0
    8140:	f0 e0       	ldi	r31, 0x00	; 0
    8142:	cf 01       	movw	r24, r30
    8144:	df 91       	pop	r29
    8146:	cf 91       	pop	r28
    8148:	1f 91       	pop	r17
    814a:	0f 91       	pop	r16
    814c:	08 95       	ret

0000814e <free>:
    814e:	cf 93       	push	r28
    8150:	df 93       	push	r29
    8152:	00 97       	sbiw	r24, 0x00	; 0
    8154:	09 f4       	brne	.+2      	; 0x8158 <free+0xa>
    8156:	81 c0       	rjmp	.+258    	; 0x825a <free+0x10c>
    8158:	fc 01       	movw	r30, r24
    815a:	32 97       	sbiw	r30, 0x02	; 2
    815c:	13 82       	std	Z+3, r1	; 0x03
    815e:	12 82       	std	Z+2, r1	; 0x02
    8160:	a0 91 b8 0d 	lds	r26, 0x0DB8	; 0x800db8 <__flp>
    8164:	b0 91 b9 0d 	lds	r27, 0x0DB9	; 0x800db9 <__flp+0x1>
    8168:	10 97       	sbiw	r26, 0x00	; 0
    816a:	81 f4       	brne	.+32     	; 0x818c <free+0x3e>
    816c:	20 81       	ld	r18, Z
    816e:	31 81       	ldd	r19, Z+1	; 0x01
    8170:	82 0f       	add	r24, r18
    8172:	93 1f       	adc	r25, r19
    8174:	20 91 b6 0d 	lds	r18, 0x0DB6	; 0x800db6 <__brkval>
    8178:	30 91 b7 0d 	lds	r19, 0x0DB7	; 0x800db7 <__brkval+0x1>
    817c:	28 17       	cp	r18, r24
    817e:	39 07       	cpc	r19, r25
    8180:	51 f5       	brne	.+84     	; 0x81d6 <free+0x88>
    8182:	f0 93 b7 0d 	sts	0x0DB7, r31	; 0x800db7 <__brkval+0x1>
    8186:	e0 93 b6 0d 	sts	0x0DB6, r30	; 0x800db6 <__brkval>
    818a:	67 c0       	rjmp	.+206    	; 0x825a <free+0x10c>
    818c:	ed 01       	movw	r28, r26
    818e:	20 e0       	ldi	r18, 0x00	; 0
    8190:	30 e0       	ldi	r19, 0x00	; 0
    8192:	ce 17       	cp	r28, r30
    8194:	df 07       	cpc	r29, r31
    8196:	40 f4       	brcc	.+16     	; 0x81a8 <free+0x5a>
    8198:	4a 81       	ldd	r20, Y+2	; 0x02
    819a:	5b 81       	ldd	r21, Y+3	; 0x03
    819c:	9e 01       	movw	r18, r28
    819e:	41 15       	cp	r20, r1
    81a0:	51 05       	cpc	r21, r1
    81a2:	f1 f0       	breq	.+60     	; 0x81e0 <free+0x92>
    81a4:	ea 01       	movw	r28, r20
    81a6:	f5 cf       	rjmp	.-22     	; 0x8192 <free+0x44>
    81a8:	d3 83       	std	Z+3, r29	; 0x03
    81aa:	c2 83       	std	Z+2, r28	; 0x02
    81ac:	40 81       	ld	r20, Z
    81ae:	51 81       	ldd	r21, Z+1	; 0x01
    81b0:	84 0f       	add	r24, r20
    81b2:	95 1f       	adc	r25, r21
    81b4:	c8 17       	cp	r28, r24
    81b6:	d9 07       	cpc	r29, r25
    81b8:	59 f4       	brne	.+22     	; 0x81d0 <free+0x82>
    81ba:	88 81       	ld	r24, Y
    81bc:	99 81       	ldd	r25, Y+1	; 0x01
    81be:	84 0f       	add	r24, r20
    81c0:	95 1f       	adc	r25, r21
    81c2:	02 96       	adiw	r24, 0x02	; 2
    81c4:	91 83       	std	Z+1, r25	; 0x01
    81c6:	80 83       	st	Z, r24
    81c8:	8a 81       	ldd	r24, Y+2	; 0x02
    81ca:	9b 81       	ldd	r25, Y+3	; 0x03
    81cc:	93 83       	std	Z+3, r25	; 0x03
    81ce:	82 83       	std	Z+2, r24	; 0x02
    81d0:	21 15       	cp	r18, r1
    81d2:	31 05       	cpc	r19, r1
    81d4:	29 f4       	brne	.+10     	; 0x81e0 <free+0x92>
    81d6:	f0 93 b9 0d 	sts	0x0DB9, r31	; 0x800db9 <__flp+0x1>
    81da:	e0 93 b8 0d 	sts	0x0DB8, r30	; 0x800db8 <__flp>
    81de:	3d c0       	rjmp	.+122    	; 0x825a <free+0x10c>
    81e0:	e9 01       	movw	r28, r18
    81e2:	fb 83       	std	Y+3, r31	; 0x03
    81e4:	ea 83       	std	Y+2, r30	; 0x02
    81e6:	49 91       	ld	r20, Y+
    81e8:	59 91       	ld	r21, Y+
    81ea:	c4 0f       	add	r28, r20
    81ec:	d5 1f       	adc	r29, r21
    81ee:	ec 17       	cp	r30, r28
    81f0:	fd 07       	cpc	r31, r29
    81f2:	61 f4       	brne	.+24     	; 0x820c <free+0xbe>
    81f4:	80 81       	ld	r24, Z
    81f6:	91 81       	ldd	r25, Z+1	; 0x01
    81f8:	84 0f       	add	r24, r20
    81fa:	95 1f       	adc	r25, r21
    81fc:	02 96       	adiw	r24, 0x02	; 2
    81fe:	e9 01       	movw	r28, r18
    8200:	99 83       	std	Y+1, r25	; 0x01
    8202:	88 83       	st	Y, r24
    8204:	82 81       	ldd	r24, Z+2	; 0x02
    8206:	93 81       	ldd	r25, Z+3	; 0x03
    8208:	9b 83       	std	Y+3, r25	; 0x03
    820a:	8a 83       	std	Y+2, r24	; 0x02
    820c:	e0 e0       	ldi	r30, 0x00	; 0
    820e:	f0 e0       	ldi	r31, 0x00	; 0
    8210:	12 96       	adiw	r26, 0x02	; 2
    8212:	8d 91       	ld	r24, X+
    8214:	9c 91       	ld	r25, X
    8216:	13 97       	sbiw	r26, 0x03	; 3
    8218:	00 97       	sbiw	r24, 0x00	; 0
    821a:	19 f0       	breq	.+6      	; 0x8222 <free+0xd4>
    821c:	fd 01       	movw	r30, r26
    821e:	dc 01       	movw	r26, r24
    8220:	f7 cf       	rjmp	.-18     	; 0x8210 <free+0xc2>
    8222:	8d 91       	ld	r24, X+
    8224:	9c 91       	ld	r25, X
    8226:	11 97       	sbiw	r26, 0x01	; 1
    8228:	9d 01       	movw	r18, r26
    822a:	2e 5f       	subi	r18, 0xFE	; 254
    822c:	3f 4f       	sbci	r19, 0xFF	; 255
    822e:	82 0f       	add	r24, r18
    8230:	93 1f       	adc	r25, r19
    8232:	20 91 b6 0d 	lds	r18, 0x0DB6	; 0x800db6 <__brkval>
    8236:	30 91 b7 0d 	lds	r19, 0x0DB7	; 0x800db7 <__brkval+0x1>
    823a:	28 17       	cp	r18, r24
    823c:	39 07       	cpc	r19, r25
    823e:	69 f4       	brne	.+26     	; 0x825a <free+0x10c>
    8240:	30 97       	sbiw	r30, 0x00	; 0
    8242:	29 f4       	brne	.+10     	; 0x824e <free+0x100>
    8244:	10 92 b9 0d 	sts	0x0DB9, r1	; 0x800db9 <__flp+0x1>
    8248:	10 92 b8 0d 	sts	0x0DB8, r1	; 0x800db8 <__flp>
    824c:	02 c0       	rjmp	.+4      	; 0x8252 <free+0x104>
    824e:	13 82       	std	Z+3, r1	; 0x03
    8250:	12 82       	std	Z+2, r1	; 0x02
    8252:	b0 93 b7 0d 	sts	0x0DB7, r27	; 0x800db7 <__brkval+0x1>
    8256:	a0 93 b6 0d 	sts	0x0DB6, r26	; 0x800db6 <__brkval>
    825a:	df 91       	pop	r29
    825c:	cf 91       	pop	r28
    825e:	08 95       	ret

00008260 <realloc>:
    8260:	6f 92       	push	r6
    8262:	7f 92       	push	r7
    8264:	8f 92       	push	r8
    8266:	9f 92       	push	r9
    8268:	af 92       	push	r10
    826a:	bf 92       	push	r11
    826c:	cf 92       	push	r12
    826e:	df 92       	push	r13
    8270:	ef 92       	push	r14
    8272:	ff 92       	push	r15
    8274:	0f 93       	push	r16
    8276:	1f 93       	push	r17
    8278:	cf 93       	push	r28
    827a:	df 93       	push	r29
    827c:	00 97       	sbiw	r24, 0x00	; 0
    827e:	81 f4       	brne	.+32     	; 0x82a0 <realloc+0x40>
    8280:	cb 01       	movw	r24, r22
    8282:	df 91       	pop	r29
    8284:	cf 91       	pop	r28
    8286:	1f 91       	pop	r17
    8288:	0f 91       	pop	r16
    828a:	ff 90       	pop	r15
    828c:	ef 90       	pop	r14
    828e:	df 90       	pop	r13
    8290:	cf 90       	pop	r12
    8292:	bf 90       	pop	r11
    8294:	af 90       	pop	r10
    8296:	9f 90       	pop	r9
    8298:	8f 90       	pop	r8
    829a:	7f 90       	pop	r7
    829c:	6f 90       	pop	r6
    829e:	bf ce       	rjmp	.-642    	; 0x801e <malloc>
    82a0:	fc 01       	movw	r30, r24
    82a2:	e6 0f       	add	r30, r22
    82a4:	f7 1f       	adc	r31, r23
    82a6:	9c 01       	movw	r18, r24
    82a8:	22 50       	subi	r18, 0x02	; 2
    82aa:	31 09       	sbc	r19, r1
    82ac:	e2 17       	cp	r30, r18
    82ae:	f3 07       	cpc	r31, r19
    82b0:	08 f4       	brcc	.+2      	; 0x82b4 <realloc+0x54>
    82b2:	a5 c0       	rjmp	.+330    	; 0x83fe <realloc+0x19e>
    82b4:	ec 01       	movw	r28, r24
    82b6:	d9 01       	movw	r26, r18
    82b8:	0d 91       	ld	r16, X+
    82ba:	1c 91       	ld	r17, X
    82bc:	11 97       	sbiw	r26, 0x01	; 1
    82be:	06 17       	cp	r16, r22
    82c0:	17 07       	cpc	r17, r23
    82c2:	a8 f0       	brcs	.+42     	; 0x82ee <realloc+0x8e>
    82c4:	05 30       	cpi	r16, 0x05	; 5
    82c6:	11 05       	cpc	r17, r1
    82c8:	08 f4       	brcc	.+2      	; 0x82cc <realloc+0x6c>
    82ca:	97 c0       	rjmp	.+302    	; 0x83fa <realloc+0x19a>
    82cc:	c8 01       	movw	r24, r16
    82ce:	04 97       	sbiw	r24, 0x04	; 4
    82d0:	86 17       	cp	r24, r22
    82d2:	97 07       	cpc	r25, r23
    82d4:	08 f4       	brcc	.+2      	; 0x82d8 <realloc+0x78>
    82d6:	91 c0       	rjmp	.+290    	; 0x83fa <realloc+0x19a>
    82d8:	02 50       	subi	r16, 0x02	; 2
    82da:	11 09       	sbc	r17, r1
    82dc:	06 1b       	sub	r16, r22
    82de:	17 0b       	sbc	r17, r23
    82e0:	01 93       	st	Z+, r16
    82e2:	11 93       	st	Z+, r17
    82e4:	6d 93       	st	X+, r22
    82e6:	7c 93       	st	X, r23
    82e8:	cf 01       	movw	r24, r30
    82ea:	31 df       	rcall	.-414    	; 0x814e <free>
    82ec:	86 c0       	rjmp	.+268    	; 0x83fa <realloc+0x19a>
    82ee:	5b 01       	movw	r10, r22
    82f0:	a0 1a       	sub	r10, r16
    82f2:	b1 0a       	sbc	r11, r17
    82f4:	4c 01       	movw	r8, r24
    82f6:	80 0e       	add	r8, r16
    82f8:	91 1e       	adc	r9, r17
    82fa:	a0 91 b8 0d 	lds	r26, 0x0DB8	; 0x800db8 <__flp>
    82fe:	b0 91 b9 0d 	lds	r27, 0x0DB9	; 0x800db9 <__flp+0x1>
    8302:	61 2c       	mov	r6, r1
    8304:	71 2c       	mov	r7, r1
    8306:	e1 2c       	mov	r14, r1
    8308:	f1 2c       	mov	r15, r1
    830a:	10 97       	sbiw	r26, 0x00	; 0
    830c:	09 f4       	brne	.+2      	; 0x8310 <realloc+0xb0>
    830e:	46 c0       	rjmp	.+140    	; 0x839c <realloc+0x13c>
    8310:	8d 91       	ld	r24, X+
    8312:	9c 91       	ld	r25, X
    8314:	11 97       	sbiw	r26, 0x01	; 1
    8316:	a8 15       	cp	r26, r8
    8318:	b9 05       	cpc	r27, r9
    831a:	b1 f5       	brne	.+108    	; 0x8388 <realloc+0x128>
    831c:	6c 01       	movw	r12, r24
    831e:	42 e0       	ldi	r20, 0x02	; 2
    8320:	c4 0e       	add	r12, r20
    8322:	d1 1c       	adc	r13, r1
    8324:	ca 14       	cp	r12, r10
    8326:	db 04       	cpc	r13, r11
    8328:	78 f1       	brcs	.+94     	; 0x8388 <realloc+0x128>
    832a:	4c 01       	movw	r8, r24
    832c:	8a 18       	sub	r8, r10
    832e:	9b 08       	sbc	r9, r11
    8330:	64 01       	movw	r12, r8
    8332:	42 e0       	ldi	r20, 0x02	; 2
    8334:	c4 0e       	add	r12, r20
    8336:	d1 1c       	adc	r13, r1
    8338:	12 96       	adiw	r26, 0x02	; 2
    833a:	bc 90       	ld	r11, X
    833c:	12 97       	sbiw	r26, 0x02	; 2
    833e:	13 96       	adiw	r26, 0x03	; 3
    8340:	ac 91       	ld	r26, X
    8342:	b5 e0       	ldi	r27, 0x05	; 5
    8344:	cb 16       	cp	r12, r27
    8346:	d1 04       	cpc	r13, r1
    8348:	40 f0       	brcs	.+16     	; 0x835a <realloc+0xfa>
    834a:	b2 82       	std	Z+2, r11	; 0x02
    834c:	a3 83       	std	Z+3, r26	; 0x03
    834e:	91 82       	std	Z+1, r9	; 0x01
    8350:	80 82       	st	Z, r8
    8352:	d9 01       	movw	r26, r18
    8354:	6d 93       	st	X+, r22
    8356:	7c 93       	st	X, r23
    8358:	09 c0       	rjmp	.+18     	; 0x836c <realloc+0x10c>
    835a:	0e 5f       	subi	r16, 0xFE	; 254
    835c:	1f 4f       	sbci	r17, 0xFF	; 255
    835e:	80 0f       	add	r24, r16
    8360:	91 1f       	adc	r25, r17
    8362:	f9 01       	movw	r30, r18
    8364:	91 83       	std	Z+1, r25	; 0x01
    8366:	80 83       	st	Z, r24
    8368:	eb 2d       	mov	r30, r11
    836a:	fa 2f       	mov	r31, r26
    836c:	e1 14       	cp	r14, r1
    836e:	f1 04       	cpc	r15, r1
    8370:	31 f0       	breq	.+12     	; 0x837e <realloc+0x11e>
    8372:	d7 01       	movw	r26, r14
    8374:	13 96       	adiw	r26, 0x03	; 3
    8376:	fc 93       	st	X, r31
    8378:	ee 93       	st	-X, r30
    837a:	12 97       	sbiw	r26, 0x02	; 2
    837c:	3e c0       	rjmp	.+124    	; 0x83fa <realloc+0x19a>
    837e:	f0 93 b9 0d 	sts	0x0DB9, r31	; 0x800db9 <__flp+0x1>
    8382:	e0 93 b8 0d 	sts	0x0DB8, r30	; 0x800db8 <__flp>
    8386:	39 c0       	rjmp	.+114    	; 0x83fa <realloc+0x19a>
    8388:	68 16       	cp	r6, r24
    838a:	79 06       	cpc	r7, r25
    838c:	08 f4       	brcc	.+2      	; 0x8390 <realloc+0x130>
    838e:	3c 01       	movw	r6, r24
    8390:	7d 01       	movw	r14, r26
    8392:	12 96       	adiw	r26, 0x02	; 2
    8394:	0d 90       	ld	r0, X+
    8396:	bc 91       	ld	r27, X
    8398:	a0 2d       	mov	r26, r0
    839a:	b7 cf       	rjmp	.-146    	; 0x830a <realloc+0xaa>
    839c:	80 91 b6 0d 	lds	r24, 0x0DB6	; 0x800db6 <__brkval>
    83a0:	90 91 b7 0d 	lds	r25, 0x0DB7	; 0x800db7 <__brkval+0x1>
    83a4:	88 16       	cp	r8, r24
    83a6:	99 06       	cpc	r9, r25
    83a8:	e1 f4       	brne	.+56     	; 0x83e2 <realloc+0x182>
    83aa:	66 16       	cp	r6, r22
    83ac:	77 06       	cpc	r7, r23
    83ae:	c8 f4       	brcc	.+50     	; 0x83e2 <realloc+0x182>
    83b0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    83b4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    83b8:	00 97       	sbiw	r24, 0x00	; 0
    83ba:	41 f4       	brne	.+16     	; 0x83cc <realloc+0x16c>
    83bc:	8d b7       	in	r24, 0x3d	; 61
    83be:	9e b7       	in	r25, 0x3e	; 62
    83c0:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    83c4:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    83c8:	84 1b       	sub	r24, r20
    83ca:	95 0b       	sbc	r25, r21
    83cc:	e8 17       	cp	r30, r24
    83ce:	f9 07       	cpc	r31, r25
    83d0:	b0 f4       	brcc	.+44     	; 0x83fe <realloc+0x19e>
    83d2:	f0 93 b7 0d 	sts	0x0DB7, r31	; 0x800db7 <__brkval+0x1>
    83d6:	e0 93 b6 0d 	sts	0x0DB6, r30	; 0x800db6 <__brkval>
    83da:	f9 01       	movw	r30, r18
    83dc:	71 83       	std	Z+1, r23	; 0x01
    83de:	60 83       	st	Z, r22
    83e0:	0c c0       	rjmp	.+24     	; 0x83fa <realloc+0x19a>
    83e2:	cb 01       	movw	r24, r22
    83e4:	1c de       	rcall	.-968    	; 0x801e <malloc>
    83e6:	7c 01       	movw	r14, r24
    83e8:	00 97       	sbiw	r24, 0x00	; 0
    83ea:	49 f0       	breq	.+18     	; 0x83fe <realloc+0x19e>
    83ec:	a8 01       	movw	r20, r16
    83ee:	be 01       	movw	r22, r28
    83f0:	52 d0       	rcall	.+164    	; 0x8496 <memcpy>
    83f2:	ce 01       	movw	r24, r28
    83f4:	ac de       	rcall	.-680    	; 0x814e <free>
    83f6:	c7 01       	movw	r24, r14
    83f8:	04 c0       	rjmp	.+8      	; 0x8402 <realloc+0x1a2>
    83fa:	ce 01       	movw	r24, r28
    83fc:	02 c0       	rjmp	.+4      	; 0x8402 <realloc+0x1a2>
    83fe:	80 e0       	ldi	r24, 0x00	; 0
    8400:	90 e0       	ldi	r25, 0x00	; 0
    8402:	df 91       	pop	r29
    8404:	cf 91       	pop	r28
    8406:	1f 91       	pop	r17
    8408:	0f 91       	pop	r16
    840a:	ff 90       	pop	r15
    840c:	ef 90       	pop	r14
    840e:	df 90       	pop	r13
    8410:	cf 90       	pop	r12
    8412:	bf 90       	pop	r11
    8414:	af 90       	pop	r10
    8416:	9f 90       	pop	r9
    8418:	8f 90       	pop	r8
    841a:	7f 90       	pop	r7
    841c:	6f 90       	pop	r6
    841e:	08 95       	ret

00008420 <abort>:
    8420:	81 e0       	ldi	r24, 0x01	; 1
    8422:	90 e0       	ldi	r25, 0x00	; 0
    8424:	f8 94       	cli
    8426:	5b c3       	rjmp	.+1718   	; 0x8ade <__do_global_dtors>

00008428 <atol>:
    8428:	1f 93       	push	r17
    842a:	fc 01       	movw	r30, r24
    842c:	99 27       	eor	r25, r25
    842e:	88 27       	eor	r24, r24
    8430:	bc 01       	movw	r22, r24
    8432:	e8 94       	clt
    8434:	11 91       	ld	r17, Z+
    8436:	10 32       	cpi	r17, 0x20	; 32
    8438:	e9 f3       	breq	.-6      	; 0x8434 <atol+0xc>
    843a:	19 30       	cpi	r17, 0x09	; 9
    843c:	10 f0       	brcs	.+4      	; 0x8442 <atol+0x1a>
    843e:	1e 30       	cpi	r17, 0x0E	; 14
    8440:	c8 f3       	brcs	.-14     	; 0x8434 <atol+0xc>
    8442:	1b 32       	cpi	r17, 0x2B	; 43
    8444:	49 f0       	breq	.+18     	; 0x8458 <atol+0x30>
    8446:	1d 32       	cpi	r17, 0x2D	; 45
    8448:	41 f4       	brne	.+16     	; 0x845a <atol+0x32>
    844a:	68 94       	set
    844c:	05 c0       	rjmp	.+10     	; 0x8458 <atol+0x30>
    844e:	6d d0       	rcall	.+218    	; 0x852a <__mulsi_const_10>
    8450:	61 0f       	add	r22, r17
    8452:	71 1d       	adc	r23, r1
    8454:	81 1d       	adc	r24, r1
    8456:	91 1d       	adc	r25, r1
    8458:	11 91       	ld	r17, Z+
    845a:	10 53       	subi	r17, 0x30	; 48
    845c:	1a 30       	cpi	r17, 0x0A	; 10
    845e:	b8 f3       	brcs	.-18     	; 0x844e <atol+0x26>
    8460:	3e f4       	brtc	.+14     	; 0x8470 <atol+0x48>
    8462:	90 95       	com	r25
    8464:	80 95       	com	r24
    8466:	70 95       	com	r23
    8468:	61 95       	neg	r22
    846a:	7f 4f       	sbci	r23, 0xFF	; 255
    846c:	8f 4f       	sbci	r24, 0xFF	; 255
    846e:	9f 4f       	sbci	r25, 0xFF	; 255
    8470:	1f 91       	pop	r17
    8472:	08 95       	ret

00008474 <isspace>:
    8474:	91 11       	cpse	r25, r1
    8476:	0a c3       	rjmp	.+1556   	; 0x8a8c <__ctype_isfalse>
    8478:	80 32       	cpi	r24, 0x20	; 32
    847a:	19 f0       	breq	.+6      	; 0x8482 <isspace+0xe>
    847c:	89 50       	subi	r24, 0x09	; 9
    847e:	85 50       	subi	r24, 0x05	; 5
    8480:	d0 f7       	brcc	.-12     	; 0x8476 <isspace+0x2>
    8482:	08 95       	ret

00008484 <memcpy_P>:
    8484:	fb 01       	movw	r30, r22
    8486:	dc 01       	movw	r26, r24
    8488:	02 c0       	rjmp	.+4      	; 0x848e <memcpy_P+0xa>
    848a:	05 90       	lpm	r0, Z+
    848c:	0d 92       	st	X+, r0
    848e:	41 50       	subi	r20, 0x01	; 1
    8490:	50 40       	sbci	r21, 0x00	; 0
    8492:	d8 f7       	brcc	.-10     	; 0x848a <memcpy_P+0x6>
    8494:	08 95       	ret

00008496 <memcpy>:
    8496:	fb 01       	movw	r30, r22
    8498:	dc 01       	movw	r26, r24
    849a:	02 c0       	rjmp	.+4      	; 0x84a0 <memcpy+0xa>
    849c:	01 90       	ld	r0, Z+
    849e:	0d 92       	st	X+, r0
    84a0:	41 50       	subi	r20, 0x01	; 1
    84a2:	50 40       	sbci	r21, 0x00	; 0
    84a4:	d8 f7       	brcc	.-10     	; 0x849c <memcpy+0x6>
    84a6:	08 95       	ret

000084a8 <strcmp>:
    84a8:	fb 01       	movw	r30, r22
    84aa:	dc 01       	movw	r26, r24
    84ac:	8d 91       	ld	r24, X+
    84ae:	01 90       	ld	r0, Z+
    84b0:	80 19       	sub	r24, r0
    84b2:	01 10       	cpse	r0, r1
    84b4:	d9 f3       	breq	.-10     	; 0x84ac <strcmp+0x4>
    84b6:	99 0b       	sbc	r25, r25
    84b8:	08 95       	ret

000084ba <strcpy>:
    84ba:	fb 01       	movw	r30, r22
    84bc:	dc 01       	movw	r26, r24
    84be:	01 90       	ld	r0, Z+
    84c0:	0d 92       	st	X+, r0
    84c2:	00 20       	and	r0, r0
    84c4:	e1 f7       	brne	.-8      	; 0x84be <strcpy+0x4>
    84c6:	08 95       	ret

000084c8 <strncmp>:
    84c8:	fb 01       	movw	r30, r22
    84ca:	dc 01       	movw	r26, r24
    84cc:	41 50       	subi	r20, 0x01	; 1
    84ce:	50 40       	sbci	r21, 0x00	; 0
    84d0:	30 f0       	brcs	.+12     	; 0x84de <strncmp+0x16>
    84d2:	8d 91       	ld	r24, X+
    84d4:	01 90       	ld	r0, Z+
    84d6:	80 19       	sub	r24, r0
    84d8:	19 f4       	brne	.+6      	; 0x84e0 <strncmp+0x18>
    84da:	00 20       	and	r0, r0
    84dc:	b9 f7       	brne	.-18     	; 0x84cc <strncmp+0x4>
    84de:	88 1b       	sub	r24, r24
    84e0:	99 0b       	sbc	r25, r25
    84e2:	08 95       	ret

000084e4 <strncpy>:
    84e4:	fb 01       	movw	r30, r22
    84e6:	dc 01       	movw	r26, r24
    84e8:	41 50       	subi	r20, 0x01	; 1
    84ea:	50 40       	sbci	r21, 0x00	; 0
    84ec:	48 f0       	brcs	.+18     	; 0x8500 <strncpy+0x1c>
    84ee:	01 90       	ld	r0, Z+
    84f0:	0d 92       	st	X+, r0
    84f2:	00 20       	and	r0, r0
    84f4:	c9 f7       	brne	.-14     	; 0x84e8 <strncpy+0x4>
    84f6:	01 c0       	rjmp	.+2      	; 0x84fa <strncpy+0x16>
    84f8:	1d 92       	st	X+, r1
    84fa:	41 50       	subi	r20, 0x01	; 1
    84fc:	50 40       	sbci	r21, 0x00	; 0
    84fe:	e0 f7       	brcc	.-8      	; 0x84f8 <strncpy+0x14>
    8500:	08 95       	ret

00008502 <itoa>:
    8502:	45 32       	cpi	r20, 0x25	; 37
    8504:	51 05       	cpc	r21, r1
    8506:	18 f4       	brcc	.+6      	; 0x850e <itoa+0xc>
    8508:	42 30       	cpi	r20, 0x02	; 2
    850a:	08 f0       	brcs	.+2      	; 0x850e <itoa+0xc>
    850c:	04 c0       	rjmp	.+8      	; 0x8516 <__itoa_ncheck>
    850e:	fb 01       	movw	r30, r22
    8510:	10 82       	st	Z, r1
    8512:	cb 01       	movw	r24, r22
    8514:	08 95       	ret

00008516 <__itoa_ncheck>:
    8516:	bb 27       	eor	r27, r27
    8518:	4a 30       	cpi	r20, 0x0A	; 10
    851a:	31 f4       	brne	.+12     	; 0x8528 <__itoa_ncheck+0x12>
    851c:	99 23       	and	r25, r25
    851e:	22 f4       	brpl	.+8      	; 0x8528 <__itoa_ncheck+0x12>
    8520:	bd e2       	ldi	r27, 0x2D	; 45
    8522:	90 95       	com	r25
    8524:	81 95       	neg	r24
    8526:	9f 4f       	sbci	r25, 0xFF	; 255
    8528:	4b c0       	rjmp	.+150    	; 0x85c0 <__utoa_common>

0000852a <__mulsi_const_10>:
    852a:	59 2f       	mov	r21, r25
    852c:	48 2f       	mov	r20, r24
    852e:	37 2f       	mov	r19, r23
    8530:	26 2f       	mov	r18, r22
    8532:	66 0f       	add	r22, r22
    8534:	77 1f       	adc	r23, r23
    8536:	88 1f       	adc	r24, r24
    8538:	99 1f       	adc	r25, r25
    853a:	66 0f       	add	r22, r22
    853c:	77 1f       	adc	r23, r23
    853e:	88 1f       	adc	r24, r24
    8540:	99 1f       	adc	r25, r25
    8542:	62 0f       	add	r22, r18
    8544:	73 1f       	adc	r23, r19
    8546:	84 1f       	adc	r24, r20
    8548:	95 1f       	adc	r25, r21
    854a:	66 0f       	add	r22, r22
    854c:	77 1f       	adc	r23, r23
    854e:	88 1f       	adc	r24, r24
    8550:	99 1f       	adc	r25, r25
    8552:	08 95       	ret

00008554 <ultoa>:
    8554:	25 32       	cpi	r18, 0x25	; 37
    8556:	31 05       	cpc	r19, r1
    8558:	18 f4       	brcc	.+6      	; 0x8560 <ultoa+0xc>
    855a:	22 30       	cpi	r18, 0x02	; 2
    855c:	08 f0       	brcs	.+2      	; 0x8560 <ultoa+0xc>
    855e:	04 c0       	rjmp	.+8      	; 0x8568 <__ultoa_ncheck>
    8560:	fa 01       	movw	r30, r20
    8562:	10 82       	st	Z, r1
    8564:	ca 01       	movw	r24, r20
    8566:	08 95       	ret

00008568 <__ultoa_ncheck>:
    8568:	bb 27       	eor	r27, r27

0000856a <__ultoa_common>:
    856a:	fa 01       	movw	r30, r20
    856c:	a6 2f       	mov	r26, r22
    856e:	62 17       	cp	r22, r18
    8570:	71 05       	cpc	r23, r1
    8572:	81 05       	cpc	r24, r1
    8574:	91 05       	cpc	r25, r1
    8576:	33 0b       	sbc	r19, r19
    8578:	30 fb       	bst	r19, 0
    857a:	66 f0       	brts	.+24     	; 0x8594 <__ultoa_common+0x2a>
    857c:	aa 27       	eor	r26, r26
    857e:	66 0f       	add	r22, r22
    8580:	77 1f       	adc	r23, r23
    8582:	88 1f       	adc	r24, r24
    8584:	99 1f       	adc	r25, r25
    8586:	aa 1f       	adc	r26, r26
    8588:	a2 17       	cp	r26, r18
    858a:	10 f0       	brcs	.+4      	; 0x8590 <__ultoa_common+0x26>
    858c:	a2 1b       	sub	r26, r18
    858e:	63 95       	inc	r22
    8590:	38 50       	subi	r19, 0x08	; 8
    8592:	a9 f7       	brne	.-22     	; 0x857e <__ultoa_common+0x14>
    8594:	a0 5d       	subi	r26, 0xD0	; 208
    8596:	aa 33       	cpi	r26, 0x3A	; 58
    8598:	08 f0       	brcs	.+2      	; 0x859c <__ultoa_common+0x32>
    859a:	a9 5d       	subi	r26, 0xD9	; 217
    859c:	a1 93       	st	Z+, r26
    859e:	36 f7       	brtc	.-52     	; 0x856c <__ultoa_common+0x2>
    85a0:	b1 11       	cpse	r27, r1
    85a2:	b1 93       	st	Z+, r27
    85a4:	10 82       	st	Z, r1
    85a6:	ca 01       	movw	r24, r20
    85a8:	74 c2       	rjmp	.+1256   	; 0x8a92 <strrev>

000085aa <utoa>:
    85aa:	45 32       	cpi	r20, 0x25	; 37
    85ac:	51 05       	cpc	r21, r1
    85ae:	18 f4       	brcc	.+6      	; 0x85b6 <utoa+0xc>
    85b0:	42 30       	cpi	r20, 0x02	; 2
    85b2:	08 f0       	brcs	.+2      	; 0x85b6 <utoa+0xc>
    85b4:	04 c0       	rjmp	.+8      	; 0x85be <__utoa_ncheck>
    85b6:	fb 01       	movw	r30, r22
    85b8:	10 82       	st	Z, r1
    85ba:	cb 01       	movw	r24, r22
    85bc:	08 95       	ret

000085be <__utoa_ncheck>:
    85be:	bb 27       	eor	r27, r27

000085c0 <__utoa_common>:
    85c0:	fb 01       	movw	r30, r22
    85c2:	55 27       	eor	r21, r21
    85c4:	aa 27       	eor	r26, r26
    85c6:	88 0f       	add	r24, r24
    85c8:	99 1f       	adc	r25, r25
    85ca:	aa 1f       	adc	r26, r26
    85cc:	a4 17       	cp	r26, r20
    85ce:	10 f0       	brcs	.+4      	; 0x85d4 <__utoa_common+0x14>
    85d0:	a4 1b       	sub	r26, r20
    85d2:	83 95       	inc	r24
    85d4:	50 51       	subi	r21, 0x10	; 16
    85d6:	b9 f7       	brne	.-18     	; 0x85c6 <__utoa_common+0x6>
    85d8:	a0 5d       	subi	r26, 0xD0	; 208
    85da:	aa 33       	cpi	r26, 0x3A	; 58
    85dc:	08 f0       	brcs	.+2      	; 0x85e0 <__utoa_common+0x20>
    85de:	a9 5d       	subi	r26, 0xD9	; 217
    85e0:	a1 93       	st	Z+, r26
    85e2:	00 97       	sbiw	r24, 0x00	; 0
    85e4:	79 f7       	brne	.-34     	; 0x85c4 <__utoa_common+0x4>
    85e6:	b1 11       	cpse	r27, r1
    85e8:	b1 93       	st	Z+, r27
    85ea:	11 92       	st	Z+, r1
    85ec:	cb 01       	movw	r24, r22
    85ee:	51 c2       	rjmp	.+1186   	; 0x8a92 <strrev>

000085f0 <dtoa_prf>:
    85f0:	8f 92       	push	r8
    85f2:	9f 92       	push	r9
    85f4:	af 92       	push	r10
    85f6:	bf 92       	push	r11
    85f8:	cf 92       	push	r12
    85fa:	df 92       	push	r13
    85fc:	ef 92       	push	r14
    85fe:	ff 92       	push	r15
    8600:	0f 93       	push	r16
    8602:	1f 93       	push	r17
    8604:	cf 93       	push	r28
    8606:	df 93       	push	r29
    8608:	cd b7       	in	r28, 0x3d	; 61
    860a:	de b7       	in	r29, 0x3e	; 62
    860c:	29 97       	sbiw	r28, 0x09	; 9
    860e:	0f b6       	in	r0, 0x3f	; 63
    8610:	f8 94       	cli
    8612:	de bf       	out	0x3e, r29	; 62
    8614:	0f be       	out	0x3f, r0	; 63
    8616:	cd bf       	out	0x3d, r28	; 61
    8618:	6a 01       	movw	r12, r20
    861a:	12 2f       	mov	r17, r18
    861c:	b0 2e       	mov	r11, r16
    861e:	2b e3       	ldi	r18, 0x3B	; 59
    8620:	20 17       	cp	r18, r16
    8622:	20 f0       	brcs	.+8      	; 0x862c <dtoa_prf+0x3c>
    8624:	ff 24       	eor	r15, r15
    8626:	f3 94       	inc	r15
    8628:	f0 0e       	add	r15, r16
    862a:	02 c0       	rjmp	.+4      	; 0x8630 <dtoa_prf+0x40>
    862c:	2c e3       	ldi	r18, 0x3C	; 60
    862e:	f2 2e       	mov	r15, r18
    8630:	0f 2d       	mov	r16, r15
    8632:	27 e0       	ldi	r18, 0x07	; 7
    8634:	ae 01       	movw	r20, r28
    8636:	4f 5f       	subi	r20, 0xFF	; 255
    8638:	5f 4f       	sbci	r21, 0xFF	; 255
    863a:	50 d1       	rcall	.+672    	; 0x88dc <__ftoa_engine>
    863c:	bc 01       	movw	r22, r24
    863e:	49 81       	ldd	r20, Y+1	; 0x01
    8640:	84 2f       	mov	r24, r20
    8642:	89 70       	andi	r24, 0x09	; 9
    8644:	81 30       	cpi	r24, 0x01	; 1
    8646:	31 f0       	breq	.+12     	; 0x8654 <dtoa_prf+0x64>
    8648:	e1 fc       	sbrc	r14, 1
    864a:	06 c0       	rjmp	.+12     	; 0x8658 <dtoa_prf+0x68>
    864c:	e0 fe       	sbrs	r14, 0
    864e:	06 c0       	rjmp	.+12     	; 0x865c <dtoa_prf+0x6c>
    8650:	90 e2       	ldi	r25, 0x20	; 32
    8652:	05 c0       	rjmp	.+10     	; 0x865e <dtoa_prf+0x6e>
    8654:	9d e2       	ldi	r25, 0x2D	; 45
    8656:	03 c0       	rjmp	.+6      	; 0x865e <dtoa_prf+0x6e>
    8658:	9b e2       	ldi	r25, 0x2B	; 43
    865a:	01 c0       	rjmp	.+2      	; 0x865e <dtoa_prf+0x6e>
    865c:	90 e0       	ldi	r25, 0x00	; 0
    865e:	5e 2d       	mov	r21, r14
    8660:	50 71       	andi	r21, 0x10	; 16
    8662:	43 ff       	sbrs	r20, 3
    8664:	3c c0       	rjmp	.+120    	; 0x86de <dtoa_prf+0xee>
    8666:	91 11       	cpse	r25, r1
    8668:	02 c0       	rjmp	.+4      	; 0x866e <dtoa_prf+0x7e>
    866a:	83 e0       	ldi	r24, 0x03	; 3
    866c:	01 c0       	rjmp	.+2      	; 0x8670 <dtoa_prf+0x80>
    866e:	84 e0       	ldi	r24, 0x04	; 4
    8670:	81 17       	cp	r24, r17
    8672:	18 f4       	brcc	.+6      	; 0x867a <dtoa_prf+0x8a>
    8674:	21 2f       	mov	r18, r17
    8676:	28 1b       	sub	r18, r24
    8678:	01 c0       	rjmp	.+2      	; 0x867c <dtoa_prf+0x8c>
    867a:	20 e0       	ldi	r18, 0x00	; 0
    867c:	51 11       	cpse	r21, r1
    867e:	0b c0       	rjmp	.+22     	; 0x8696 <dtoa_prf+0xa6>
    8680:	f6 01       	movw	r30, r12
    8682:	82 2f       	mov	r24, r18
    8684:	30 e2       	ldi	r19, 0x20	; 32
    8686:	88 23       	and	r24, r24
    8688:	19 f0       	breq	.+6      	; 0x8690 <dtoa_prf+0xa0>
    868a:	31 93       	st	Z+, r19
    868c:	81 50       	subi	r24, 0x01	; 1
    868e:	fb cf       	rjmp	.-10     	; 0x8686 <dtoa_prf+0x96>
    8690:	c2 0e       	add	r12, r18
    8692:	d1 1c       	adc	r13, r1
    8694:	20 e0       	ldi	r18, 0x00	; 0
    8696:	99 23       	and	r25, r25
    8698:	29 f0       	breq	.+10     	; 0x86a4 <dtoa_prf+0xb4>
    869a:	d6 01       	movw	r26, r12
    869c:	9c 93       	st	X, r25
    869e:	f6 01       	movw	r30, r12
    86a0:	31 96       	adiw	r30, 0x01	; 1
    86a2:	6f 01       	movw	r12, r30
    86a4:	c6 01       	movw	r24, r12
    86a6:	03 96       	adiw	r24, 0x03	; 3
    86a8:	e2 fe       	sbrs	r14, 2
    86aa:	0a c0       	rjmp	.+20     	; 0x86c0 <dtoa_prf+0xd0>
    86ac:	3e e4       	ldi	r19, 0x4E	; 78
    86ae:	d6 01       	movw	r26, r12
    86b0:	3c 93       	st	X, r19
    86b2:	41 e4       	ldi	r20, 0x41	; 65
    86b4:	11 96       	adiw	r26, 0x01	; 1
    86b6:	4c 93       	st	X, r20
    86b8:	11 97       	sbiw	r26, 0x01	; 1
    86ba:	12 96       	adiw	r26, 0x02	; 2
    86bc:	3c 93       	st	X, r19
    86be:	06 c0       	rjmp	.+12     	; 0x86cc <dtoa_prf+0xdc>
    86c0:	3e e6       	ldi	r19, 0x6E	; 110
    86c2:	f6 01       	movw	r30, r12
    86c4:	30 83       	st	Z, r19
    86c6:	41 e6       	ldi	r20, 0x61	; 97
    86c8:	41 83       	std	Z+1, r20	; 0x01
    86ca:	32 83       	std	Z+2, r19	; 0x02
    86cc:	fc 01       	movw	r30, r24
    86ce:	32 2f       	mov	r19, r18
    86d0:	40 e2       	ldi	r20, 0x20	; 32
    86d2:	33 23       	and	r19, r19
    86d4:	09 f4       	brne	.+2      	; 0x86d8 <dtoa_prf+0xe8>
    86d6:	42 c0       	rjmp	.+132    	; 0x875c <dtoa_prf+0x16c>
    86d8:	41 93       	st	Z+, r20
    86da:	31 50       	subi	r19, 0x01	; 1
    86dc:	fa cf       	rjmp	.-12     	; 0x86d2 <dtoa_prf+0xe2>
    86de:	42 ff       	sbrs	r20, 2
    86e0:	44 c0       	rjmp	.+136    	; 0x876a <dtoa_prf+0x17a>
    86e2:	91 11       	cpse	r25, r1
    86e4:	02 c0       	rjmp	.+4      	; 0x86ea <dtoa_prf+0xfa>
    86e6:	83 e0       	ldi	r24, 0x03	; 3
    86e8:	01 c0       	rjmp	.+2      	; 0x86ec <dtoa_prf+0xfc>
    86ea:	84 e0       	ldi	r24, 0x04	; 4
    86ec:	81 17       	cp	r24, r17
    86ee:	18 f4       	brcc	.+6      	; 0x86f6 <dtoa_prf+0x106>
    86f0:	21 2f       	mov	r18, r17
    86f2:	28 1b       	sub	r18, r24
    86f4:	01 c0       	rjmp	.+2      	; 0x86f8 <dtoa_prf+0x108>
    86f6:	20 e0       	ldi	r18, 0x00	; 0
    86f8:	51 11       	cpse	r21, r1
    86fa:	0b c0       	rjmp	.+22     	; 0x8712 <dtoa_prf+0x122>
    86fc:	f6 01       	movw	r30, r12
    86fe:	82 2f       	mov	r24, r18
    8700:	30 e2       	ldi	r19, 0x20	; 32
    8702:	88 23       	and	r24, r24
    8704:	19 f0       	breq	.+6      	; 0x870c <dtoa_prf+0x11c>
    8706:	31 93       	st	Z+, r19
    8708:	81 50       	subi	r24, 0x01	; 1
    870a:	fb cf       	rjmp	.-10     	; 0x8702 <dtoa_prf+0x112>
    870c:	c2 0e       	add	r12, r18
    870e:	d1 1c       	adc	r13, r1
    8710:	20 e0       	ldi	r18, 0x00	; 0
    8712:	99 23       	and	r25, r25
    8714:	29 f0       	breq	.+10     	; 0x8720 <dtoa_prf+0x130>
    8716:	d6 01       	movw	r26, r12
    8718:	9c 93       	st	X, r25
    871a:	f6 01       	movw	r30, r12
    871c:	31 96       	adiw	r30, 0x01	; 1
    871e:	6f 01       	movw	r12, r30
    8720:	c6 01       	movw	r24, r12
    8722:	03 96       	adiw	r24, 0x03	; 3
    8724:	e2 fe       	sbrs	r14, 2
    8726:	0b c0       	rjmp	.+22     	; 0x873e <dtoa_prf+0x14e>
    8728:	39 e4       	ldi	r19, 0x49	; 73
    872a:	d6 01       	movw	r26, r12
    872c:	3c 93       	st	X, r19
    872e:	3e e4       	ldi	r19, 0x4E	; 78
    8730:	11 96       	adiw	r26, 0x01	; 1
    8732:	3c 93       	st	X, r19
    8734:	11 97       	sbiw	r26, 0x01	; 1
    8736:	36 e4       	ldi	r19, 0x46	; 70
    8738:	12 96       	adiw	r26, 0x02	; 2
    873a:	3c 93       	st	X, r19
    873c:	07 c0       	rjmp	.+14     	; 0x874c <dtoa_prf+0x15c>
    873e:	39 e6       	ldi	r19, 0x69	; 105
    8740:	f6 01       	movw	r30, r12
    8742:	30 83       	st	Z, r19
    8744:	3e e6       	ldi	r19, 0x6E	; 110
    8746:	31 83       	std	Z+1, r19	; 0x01
    8748:	36 e6       	ldi	r19, 0x66	; 102
    874a:	32 83       	std	Z+2, r19	; 0x02
    874c:	fc 01       	movw	r30, r24
    874e:	32 2f       	mov	r19, r18
    8750:	40 e2       	ldi	r20, 0x20	; 32
    8752:	33 23       	and	r19, r19
    8754:	19 f0       	breq	.+6      	; 0x875c <dtoa_prf+0x16c>
    8756:	41 93       	st	Z+, r20
    8758:	31 50       	subi	r19, 0x01	; 1
    875a:	fb cf       	rjmp	.-10     	; 0x8752 <dtoa_prf+0x162>
    875c:	fc 01       	movw	r30, r24
    875e:	e2 0f       	add	r30, r18
    8760:	f1 1d       	adc	r31, r1
    8762:	10 82       	st	Z, r1
    8764:	8e ef       	ldi	r24, 0xFE	; 254
    8766:	9f ef       	ldi	r25, 0xFF	; 255
    8768:	a6 c0       	rjmp	.+332    	; 0x88b6 <dtoa_prf+0x2c6>
    876a:	21 e0       	ldi	r18, 0x01	; 1
    876c:	30 e0       	ldi	r19, 0x00	; 0
    876e:	91 11       	cpse	r25, r1
    8770:	02 c0       	rjmp	.+4      	; 0x8776 <dtoa_prf+0x186>
    8772:	20 e0       	ldi	r18, 0x00	; 0
    8774:	30 e0       	ldi	r19, 0x00	; 0
    8776:	16 16       	cp	r1, r22
    8778:	17 06       	cpc	r1, r23
    877a:	1c f4       	brge	.+6      	; 0x8782 <dtoa_prf+0x192>
    877c:	fb 01       	movw	r30, r22
    877e:	31 96       	adiw	r30, 0x01	; 1
    8780:	02 c0       	rjmp	.+4      	; 0x8786 <dtoa_prf+0x196>
    8782:	e1 e0       	ldi	r30, 0x01	; 1
    8784:	f0 e0       	ldi	r31, 0x00	; 0
    8786:	2e 0f       	add	r18, r30
    8788:	3f 1f       	adc	r19, r31
    878a:	bb 20       	and	r11, r11
    878c:	21 f0       	breq	.+8      	; 0x8796 <dtoa_prf+0x1a6>
    878e:	eb 2d       	mov	r30, r11
    8790:	f0 e0       	ldi	r31, 0x00	; 0
    8792:	31 96       	adiw	r30, 0x01	; 1
    8794:	02 c0       	rjmp	.+4      	; 0x879a <dtoa_prf+0x1aa>
    8796:	e0 e0       	ldi	r30, 0x00	; 0
    8798:	f0 e0       	ldi	r31, 0x00	; 0
    879a:	2e 0f       	add	r18, r30
    879c:	3f 1f       	adc	r19, r31
    879e:	e1 2f       	mov	r30, r17
    87a0:	f0 e0       	ldi	r31, 0x00	; 0
    87a2:	2e 17       	cp	r18, r30
    87a4:	3f 07       	cpc	r19, r31
    87a6:	1c f4       	brge	.+6      	; 0x87ae <dtoa_prf+0x1be>
    87a8:	12 1b       	sub	r17, r18
    87aa:	21 2f       	mov	r18, r17
    87ac:	01 c0       	rjmp	.+2      	; 0x87b0 <dtoa_prf+0x1c0>
    87ae:	20 e0       	ldi	r18, 0x00	; 0
    87b0:	8e 2d       	mov	r24, r14
    87b2:	88 71       	andi	r24, 0x18	; 24
    87b4:	59 f4       	brne	.+22     	; 0x87cc <dtoa_prf+0x1dc>
    87b6:	f6 01       	movw	r30, r12
    87b8:	82 2f       	mov	r24, r18
    87ba:	30 e2       	ldi	r19, 0x20	; 32
    87bc:	88 23       	and	r24, r24
    87be:	19 f0       	breq	.+6      	; 0x87c6 <dtoa_prf+0x1d6>
    87c0:	31 93       	st	Z+, r19
    87c2:	81 50       	subi	r24, 0x01	; 1
    87c4:	fb cf       	rjmp	.-10     	; 0x87bc <dtoa_prf+0x1cc>
    87c6:	c2 0e       	add	r12, r18
    87c8:	d1 1c       	adc	r13, r1
    87ca:	20 e0       	ldi	r18, 0x00	; 0
    87cc:	99 23       	and	r25, r25
    87ce:	29 f0       	breq	.+10     	; 0x87da <dtoa_prf+0x1ea>
    87d0:	d6 01       	movw	r26, r12
    87d2:	9c 93       	st	X, r25
    87d4:	f6 01       	movw	r30, r12
    87d6:	31 96       	adiw	r30, 0x01	; 1
    87d8:	6f 01       	movw	r12, r30
    87da:	51 11       	cpse	r21, r1
    87dc:	0b c0       	rjmp	.+22     	; 0x87f4 <dtoa_prf+0x204>
    87de:	f6 01       	movw	r30, r12
    87e0:	82 2f       	mov	r24, r18
    87e2:	90 e3       	ldi	r25, 0x30	; 48
    87e4:	88 23       	and	r24, r24
    87e6:	19 f0       	breq	.+6      	; 0x87ee <dtoa_prf+0x1fe>
    87e8:	91 93       	st	Z+, r25
    87ea:	81 50       	subi	r24, 0x01	; 1
    87ec:	fb cf       	rjmp	.-10     	; 0x87e4 <dtoa_prf+0x1f4>
    87ee:	c2 0e       	add	r12, r18
    87f0:	d1 1c       	adc	r13, r1
    87f2:	20 e0       	ldi	r18, 0x00	; 0
    87f4:	0f 2d       	mov	r16, r15
    87f6:	06 0f       	add	r16, r22
    87f8:	9a 81       	ldd	r25, Y+2	; 0x02
    87fa:	34 2f       	mov	r19, r20
    87fc:	30 71       	andi	r19, 0x10	; 16
    87fe:	44 ff       	sbrs	r20, 4
    8800:	03 c0       	rjmp	.+6      	; 0x8808 <dtoa_prf+0x218>
    8802:	91 33       	cpi	r25, 0x31	; 49
    8804:	09 f4       	brne	.+2      	; 0x8808 <dtoa_prf+0x218>
    8806:	01 50       	subi	r16, 0x01	; 1
    8808:	10 16       	cp	r1, r16
    880a:	24 f4       	brge	.+8      	; 0x8814 <dtoa_prf+0x224>
    880c:	09 30       	cpi	r16, 0x09	; 9
    880e:	18 f0       	brcs	.+6      	; 0x8816 <dtoa_prf+0x226>
    8810:	08 e0       	ldi	r16, 0x08	; 8
    8812:	01 c0       	rjmp	.+2      	; 0x8816 <dtoa_prf+0x226>
    8814:	01 e0       	ldi	r16, 0x01	; 1
    8816:	ab 01       	movw	r20, r22
    8818:	77 ff       	sbrs	r23, 7
    881a:	02 c0       	rjmp	.+4      	; 0x8820 <dtoa_prf+0x230>
    881c:	40 e0       	ldi	r20, 0x00	; 0
    881e:	50 e0       	ldi	r21, 0x00	; 0
    8820:	fb 01       	movw	r30, r22
    8822:	e4 1b       	sub	r30, r20
    8824:	f5 0b       	sbc	r31, r21
    8826:	a1 e0       	ldi	r26, 0x01	; 1
    8828:	b0 e0       	ldi	r27, 0x00	; 0
    882a:	ac 0f       	add	r26, r28
    882c:	bd 1f       	adc	r27, r29
    882e:	ea 0f       	add	r30, r26
    8830:	fb 1f       	adc	r31, r27
    8832:	8e e2       	ldi	r24, 0x2E	; 46
    8834:	a8 2e       	mov	r10, r24
    8836:	4b 01       	movw	r8, r22
    8838:	80 1a       	sub	r8, r16
    883a:	91 08       	sbc	r9, r1
    883c:	0b 2d       	mov	r16, r11
    883e:	10 e0       	ldi	r17, 0x00	; 0
    8840:	11 95       	neg	r17
    8842:	01 95       	neg	r16
    8844:	11 09       	sbc	r17, r1
    8846:	4f 3f       	cpi	r20, 0xFF	; 255
    8848:	bf ef       	ldi	r27, 0xFF	; 255
    884a:	5b 07       	cpc	r21, r27
    884c:	21 f4       	brne	.+8      	; 0x8856 <dtoa_prf+0x266>
    884e:	d6 01       	movw	r26, r12
    8850:	ac 92       	st	X, r10
    8852:	11 96       	adiw	r26, 0x01	; 1
    8854:	6d 01       	movw	r12, r26
    8856:	64 17       	cp	r22, r20
    8858:	75 07       	cpc	r23, r21
    885a:	2c f0       	brlt	.+10     	; 0x8866 <dtoa_prf+0x276>
    885c:	84 16       	cp	r8, r20
    885e:	95 06       	cpc	r9, r21
    8860:	14 f4       	brge	.+4      	; 0x8866 <dtoa_prf+0x276>
    8862:	81 81       	ldd	r24, Z+1	; 0x01
    8864:	01 c0       	rjmp	.+2      	; 0x8868 <dtoa_prf+0x278>
    8866:	80 e3       	ldi	r24, 0x30	; 48
    8868:	41 50       	subi	r20, 0x01	; 1
    886a:	51 09       	sbc	r21, r1
    886c:	31 96       	adiw	r30, 0x01	; 1
    886e:	d6 01       	movw	r26, r12
    8870:	11 96       	adiw	r26, 0x01	; 1
    8872:	7d 01       	movw	r14, r26
    8874:	40 17       	cp	r20, r16
    8876:	51 07       	cpc	r21, r17
    8878:	24 f0       	brlt	.+8      	; 0x8882 <dtoa_prf+0x292>
    887a:	d6 01       	movw	r26, r12
    887c:	8c 93       	st	X, r24
    887e:	67 01       	movw	r12, r14
    8880:	e2 cf       	rjmp	.-60     	; 0x8846 <dtoa_prf+0x256>
    8882:	64 17       	cp	r22, r20
    8884:	75 07       	cpc	r23, r21
    8886:	39 f4       	brne	.+14     	; 0x8896 <dtoa_prf+0x2a6>
    8888:	96 33       	cpi	r25, 0x36	; 54
    888a:	20 f4       	brcc	.+8      	; 0x8894 <dtoa_prf+0x2a4>
    888c:	95 33       	cpi	r25, 0x35	; 53
    888e:	19 f4       	brne	.+6      	; 0x8896 <dtoa_prf+0x2a6>
    8890:	31 11       	cpse	r19, r1
    8892:	01 c0       	rjmp	.+2      	; 0x8896 <dtoa_prf+0x2a6>
    8894:	81 e3       	ldi	r24, 0x31	; 49
    8896:	f6 01       	movw	r30, r12
    8898:	80 83       	st	Z, r24
    889a:	f7 01       	movw	r30, r14
    889c:	82 2f       	mov	r24, r18
    889e:	90 e2       	ldi	r25, 0x20	; 32
    88a0:	88 23       	and	r24, r24
    88a2:	19 f0       	breq	.+6      	; 0x88aa <dtoa_prf+0x2ba>
    88a4:	91 93       	st	Z+, r25
    88a6:	81 50       	subi	r24, 0x01	; 1
    88a8:	fb cf       	rjmp	.-10     	; 0x88a0 <dtoa_prf+0x2b0>
    88aa:	f7 01       	movw	r30, r14
    88ac:	e2 0f       	add	r30, r18
    88ae:	f1 1d       	adc	r31, r1
    88b0:	10 82       	st	Z, r1
    88b2:	80 e0       	ldi	r24, 0x00	; 0
    88b4:	90 e0       	ldi	r25, 0x00	; 0
    88b6:	29 96       	adiw	r28, 0x09	; 9
    88b8:	0f b6       	in	r0, 0x3f	; 63
    88ba:	f8 94       	cli
    88bc:	de bf       	out	0x3e, r29	; 62
    88be:	0f be       	out	0x3f, r0	; 63
    88c0:	cd bf       	out	0x3d, r28	; 61
    88c2:	df 91       	pop	r29
    88c4:	cf 91       	pop	r28
    88c6:	1f 91       	pop	r17
    88c8:	0f 91       	pop	r16
    88ca:	ff 90       	pop	r15
    88cc:	ef 90       	pop	r14
    88ce:	df 90       	pop	r13
    88d0:	cf 90       	pop	r12
    88d2:	bf 90       	pop	r11
    88d4:	af 90       	pop	r10
    88d6:	9f 90       	pop	r9
    88d8:	8f 90       	pop	r8
    88da:	08 95       	ret

000088dc <__ftoa_engine>:
    88dc:	28 30       	cpi	r18, 0x08	; 8
    88de:	08 f0       	brcs	.+2      	; 0x88e2 <__ftoa_engine+0x6>
    88e0:	27 e0       	ldi	r18, 0x07	; 7
    88e2:	33 27       	eor	r19, r19
    88e4:	da 01       	movw	r26, r20
    88e6:	99 0f       	add	r25, r25
    88e8:	31 1d       	adc	r19, r1
    88ea:	87 fd       	sbrc	r24, 7
    88ec:	91 60       	ori	r25, 0x01	; 1
    88ee:	00 96       	adiw	r24, 0x00	; 0
    88f0:	61 05       	cpc	r22, r1
    88f2:	71 05       	cpc	r23, r1
    88f4:	39 f4       	brne	.+14     	; 0x8904 <__ftoa_engine+0x28>
    88f6:	32 60       	ori	r19, 0x02	; 2
    88f8:	2e 5f       	subi	r18, 0xFE	; 254
    88fa:	3d 93       	st	X+, r19
    88fc:	30 e3       	ldi	r19, 0x30	; 48
    88fe:	2a 95       	dec	r18
    8900:	e1 f7       	brne	.-8      	; 0x88fa <__ftoa_engine+0x1e>
    8902:	08 95       	ret
    8904:	9f 3f       	cpi	r25, 0xFF	; 255
    8906:	30 f0       	brcs	.+12     	; 0x8914 <__ftoa_engine+0x38>
    8908:	80 38       	cpi	r24, 0x80	; 128
    890a:	71 05       	cpc	r23, r1
    890c:	61 05       	cpc	r22, r1
    890e:	09 f0       	breq	.+2      	; 0x8912 <__ftoa_engine+0x36>
    8910:	3c 5f       	subi	r19, 0xFC	; 252
    8912:	3c 5f       	subi	r19, 0xFC	; 252
    8914:	3d 93       	st	X+, r19
    8916:	91 30       	cpi	r25, 0x01	; 1
    8918:	08 f0       	brcs	.+2      	; 0x891c <__ftoa_engine+0x40>
    891a:	80 68       	ori	r24, 0x80	; 128
    891c:	91 1d       	adc	r25, r1
    891e:	df 93       	push	r29
    8920:	cf 93       	push	r28
    8922:	1f 93       	push	r17
    8924:	0f 93       	push	r16
    8926:	ff 92       	push	r15
    8928:	ef 92       	push	r14
    892a:	19 2f       	mov	r17, r25
    892c:	98 7f       	andi	r25, 0xF8	; 248
    892e:	96 95       	lsr	r25
    8930:	e9 2f       	mov	r30, r25
    8932:	96 95       	lsr	r25
    8934:	96 95       	lsr	r25
    8936:	e9 0f       	add	r30, r25
    8938:	ff 27       	eor	r31, r31
    893a:	ea 5d       	subi	r30, 0xDA	; 218
    893c:	fe 4f       	sbci	r31, 0xFE	; 254
    893e:	99 27       	eor	r25, r25
    8940:	33 27       	eor	r19, r19
    8942:	ee 24       	eor	r14, r14
    8944:	ff 24       	eor	r15, r15
    8946:	a7 01       	movw	r20, r14
    8948:	e7 01       	movw	r28, r14
    894a:	05 90       	lpm	r0, Z+
    894c:	08 94       	sec
    894e:	07 94       	ror	r0
    8950:	28 f4       	brcc	.+10     	; 0x895c <__ftoa_engine+0x80>
    8952:	36 0f       	add	r19, r22
    8954:	e7 1e       	adc	r14, r23
    8956:	f8 1e       	adc	r15, r24
    8958:	49 1f       	adc	r20, r25
    895a:	51 1d       	adc	r21, r1
    895c:	66 0f       	add	r22, r22
    895e:	77 1f       	adc	r23, r23
    8960:	88 1f       	adc	r24, r24
    8962:	99 1f       	adc	r25, r25
    8964:	06 94       	lsr	r0
    8966:	a1 f7       	brne	.-24     	; 0x8950 <__ftoa_engine+0x74>
    8968:	05 90       	lpm	r0, Z+
    896a:	07 94       	ror	r0
    896c:	28 f4       	brcc	.+10     	; 0x8978 <__ftoa_engine+0x9c>
    896e:	e7 0e       	add	r14, r23
    8970:	f8 1e       	adc	r15, r24
    8972:	49 1f       	adc	r20, r25
    8974:	56 1f       	adc	r21, r22
    8976:	c1 1d       	adc	r28, r1
    8978:	77 0f       	add	r23, r23
    897a:	88 1f       	adc	r24, r24
    897c:	99 1f       	adc	r25, r25
    897e:	66 1f       	adc	r22, r22
    8980:	06 94       	lsr	r0
    8982:	a1 f7       	brne	.-24     	; 0x896c <__ftoa_engine+0x90>
    8984:	05 90       	lpm	r0, Z+
    8986:	07 94       	ror	r0
    8988:	28 f4       	brcc	.+10     	; 0x8994 <__ftoa_engine+0xb8>
    898a:	f8 0e       	add	r15, r24
    898c:	49 1f       	adc	r20, r25
    898e:	56 1f       	adc	r21, r22
    8990:	c7 1f       	adc	r28, r23
    8992:	d1 1d       	adc	r29, r1
    8994:	88 0f       	add	r24, r24
    8996:	99 1f       	adc	r25, r25
    8998:	66 1f       	adc	r22, r22
    899a:	77 1f       	adc	r23, r23
    899c:	06 94       	lsr	r0
    899e:	a1 f7       	brne	.-24     	; 0x8988 <__ftoa_engine+0xac>
    89a0:	05 90       	lpm	r0, Z+
    89a2:	07 94       	ror	r0
    89a4:	20 f4       	brcc	.+8      	; 0x89ae <__ftoa_engine+0xd2>
    89a6:	49 0f       	add	r20, r25
    89a8:	56 1f       	adc	r21, r22
    89aa:	c7 1f       	adc	r28, r23
    89ac:	d8 1f       	adc	r29, r24
    89ae:	99 0f       	add	r25, r25
    89b0:	66 1f       	adc	r22, r22
    89b2:	77 1f       	adc	r23, r23
    89b4:	88 1f       	adc	r24, r24
    89b6:	06 94       	lsr	r0
    89b8:	a9 f7       	brne	.-22     	; 0x89a4 <__ftoa_engine+0xc8>
    89ba:	84 91       	lpm	r24, Z
    89bc:	10 95       	com	r17
    89be:	17 70       	andi	r17, 0x07	; 7
    89c0:	41 f0       	breq	.+16     	; 0x89d2 <__ftoa_engine+0xf6>
    89c2:	d6 95       	lsr	r29
    89c4:	c7 95       	ror	r28
    89c6:	57 95       	ror	r21
    89c8:	47 95       	ror	r20
    89ca:	f7 94       	ror	r15
    89cc:	e7 94       	ror	r14
    89ce:	1a 95       	dec	r17
    89d0:	c1 f7       	brne	.-16     	; 0x89c2 <__ftoa_engine+0xe6>
    89d2:	ec ec       	ldi	r30, 0xCC	; 204
    89d4:	f0 e0       	ldi	r31, 0x00	; 0
    89d6:	68 94       	set
    89d8:	15 90       	lpm	r1, Z+
    89da:	15 91       	lpm	r17, Z+
    89dc:	35 91       	lpm	r19, Z+
    89de:	65 91       	lpm	r22, Z+
    89e0:	95 91       	lpm	r25, Z+
    89e2:	05 90       	lpm	r0, Z+
    89e4:	7f e2       	ldi	r23, 0x2F	; 47
    89e6:	73 95       	inc	r23
    89e8:	e1 18       	sub	r14, r1
    89ea:	f1 0a       	sbc	r15, r17
    89ec:	43 0b       	sbc	r20, r19
    89ee:	56 0b       	sbc	r21, r22
    89f0:	c9 0b       	sbc	r28, r25
    89f2:	d0 09       	sbc	r29, r0
    89f4:	c0 f7       	brcc	.-16     	; 0x89e6 <__ftoa_engine+0x10a>
    89f6:	e1 0c       	add	r14, r1
    89f8:	f1 1e       	adc	r15, r17
    89fa:	43 1f       	adc	r20, r19
    89fc:	56 1f       	adc	r21, r22
    89fe:	c9 1f       	adc	r28, r25
    8a00:	d0 1d       	adc	r29, r0
    8a02:	7e f4       	brtc	.+30     	; 0x8a22 <__ftoa_engine+0x146>
    8a04:	70 33       	cpi	r23, 0x30	; 48
    8a06:	11 f4       	brne	.+4      	; 0x8a0c <__ftoa_engine+0x130>
    8a08:	8a 95       	dec	r24
    8a0a:	e6 cf       	rjmp	.-52     	; 0x89d8 <__ftoa_engine+0xfc>
    8a0c:	e8 94       	clt
    8a0e:	01 50       	subi	r16, 0x01	; 1
    8a10:	30 f0       	brcs	.+12     	; 0x8a1e <__ftoa_engine+0x142>
    8a12:	08 0f       	add	r16, r24
    8a14:	0a f4       	brpl	.+2      	; 0x8a18 <__ftoa_engine+0x13c>
    8a16:	00 27       	eor	r16, r16
    8a18:	02 17       	cp	r16, r18
    8a1a:	08 f4       	brcc	.+2      	; 0x8a1e <__ftoa_engine+0x142>
    8a1c:	20 2f       	mov	r18, r16
    8a1e:	23 95       	inc	r18
    8a20:	02 2f       	mov	r16, r18
    8a22:	7a 33       	cpi	r23, 0x3A	; 58
    8a24:	28 f0       	brcs	.+10     	; 0x8a30 <__ftoa_engine+0x154>
    8a26:	79 e3       	ldi	r23, 0x39	; 57
    8a28:	7d 93       	st	X+, r23
    8a2a:	2a 95       	dec	r18
    8a2c:	e9 f7       	brne	.-6      	; 0x8a28 <__ftoa_engine+0x14c>
    8a2e:	10 c0       	rjmp	.+32     	; 0x8a50 <__ftoa_engine+0x174>
    8a30:	7d 93       	st	X+, r23
    8a32:	2a 95       	dec	r18
    8a34:	89 f6       	brne	.-94     	; 0x89d8 <__ftoa_engine+0xfc>
    8a36:	06 94       	lsr	r0
    8a38:	97 95       	ror	r25
    8a3a:	67 95       	ror	r22
    8a3c:	37 95       	ror	r19
    8a3e:	17 95       	ror	r17
    8a40:	17 94       	ror	r1
    8a42:	e1 18       	sub	r14, r1
    8a44:	f1 0a       	sbc	r15, r17
    8a46:	43 0b       	sbc	r20, r19
    8a48:	56 0b       	sbc	r21, r22
    8a4a:	c9 0b       	sbc	r28, r25
    8a4c:	d0 09       	sbc	r29, r0
    8a4e:	98 f0       	brcs	.+38     	; 0x8a76 <__ftoa_engine+0x19a>
    8a50:	23 95       	inc	r18
    8a52:	7e 91       	ld	r23, -X
    8a54:	73 95       	inc	r23
    8a56:	7a 33       	cpi	r23, 0x3A	; 58
    8a58:	08 f0       	brcs	.+2      	; 0x8a5c <__ftoa_engine+0x180>
    8a5a:	70 e3       	ldi	r23, 0x30	; 48
    8a5c:	7c 93       	st	X, r23
    8a5e:	20 13       	cpse	r18, r16
    8a60:	b8 f7       	brcc	.-18     	; 0x8a50 <__ftoa_engine+0x174>
    8a62:	7e 91       	ld	r23, -X
    8a64:	70 61       	ori	r23, 0x10	; 16
    8a66:	7d 93       	st	X+, r23
    8a68:	30 f0       	brcs	.+12     	; 0x8a76 <__ftoa_engine+0x19a>
    8a6a:	83 95       	inc	r24
    8a6c:	71 e3       	ldi	r23, 0x31	; 49
    8a6e:	7d 93       	st	X+, r23
    8a70:	70 e3       	ldi	r23, 0x30	; 48
    8a72:	2a 95       	dec	r18
    8a74:	e1 f7       	brne	.-8      	; 0x8a6e <__ftoa_engine+0x192>
    8a76:	11 24       	eor	r1, r1
    8a78:	ef 90       	pop	r14
    8a7a:	ff 90       	pop	r15
    8a7c:	0f 91       	pop	r16
    8a7e:	1f 91       	pop	r17
    8a80:	cf 91       	pop	r28
    8a82:	df 91       	pop	r29
    8a84:	99 27       	eor	r25, r25
    8a86:	87 fd       	sbrc	r24, 7
    8a88:	90 95       	com	r25
    8a8a:	08 95       	ret

00008a8c <__ctype_isfalse>:
    8a8c:	99 27       	eor	r25, r25
    8a8e:	88 27       	eor	r24, r24

00008a90 <__ctype_istrue>:
    8a90:	08 95       	ret

00008a92 <strrev>:
    8a92:	dc 01       	movw	r26, r24
    8a94:	fc 01       	movw	r30, r24
    8a96:	67 2f       	mov	r22, r23
    8a98:	71 91       	ld	r23, Z+
    8a9a:	77 23       	and	r23, r23
    8a9c:	e1 f7       	brne	.-8      	; 0x8a96 <strrev+0x4>
    8a9e:	32 97       	sbiw	r30, 0x02	; 2
    8aa0:	04 c0       	rjmp	.+8      	; 0x8aaa <strrev+0x18>
    8aa2:	7c 91       	ld	r23, X
    8aa4:	6d 93       	st	X+, r22
    8aa6:	70 83       	st	Z, r23
    8aa8:	62 91       	ld	r22, -Z
    8aaa:	ae 17       	cp	r26, r30
    8aac:	bf 07       	cpc	r27, r31
    8aae:	c8 f3       	brcs	.-14     	; 0x8aa2 <strrev+0x10>
    8ab0:	08 95       	ret

00008ab2 <eeprom_read_byte>:
    8ab2:	f9 99       	sbic	0x1f, 1	; 31
    8ab4:	fe cf       	rjmp	.-4      	; 0x8ab2 <eeprom_read_byte>
    8ab6:	92 bd       	out	0x22, r25	; 34
    8ab8:	81 bd       	out	0x21, r24	; 33
    8aba:	f8 9a       	sbi	0x1f, 0	; 31
    8abc:	99 27       	eor	r25, r25
    8abe:	80 b5       	in	r24, 0x20	; 32
    8ac0:	08 95       	ret

00008ac2 <eeprom_write_byte>:
    8ac2:	26 2f       	mov	r18, r22

00008ac4 <eeprom_write_r18>:
    8ac4:	f9 99       	sbic	0x1f, 1	; 31
    8ac6:	fe cf       	rjmp	.-4      	; 0x8ac4 <eeprom_write_r18>
    8ac8:	1f ba       	out	0x1f, r1	; 31
    8aca:	92 bd       	out	0x22, r25	; 34
    8acc:	81 bd       	out	0x21, r24	; 33
    8ace:	20 bd       	out	0x20, r18	; 32
    8ad0:	0f b6       	in	r0, 0x3f	; 63
    8ad2:	f8 94       	cli
    8ad4:	fa 9a       	sbi	0x1f, 2	; 31
    8ad6:	f9 9a       	sbi	0x1f, 1	; 31
    8ad8:	0f be       	out	0x3f, r0	; 63
    8ada:	01 96       	adiw	r24, 0x01	; 1
    8adc:	08 95       	ret

00008ade <__do_global_dtors>:
    8ade:	11 e0       	ldi	r17, 0x01	; 1
    8ae0:	c3 e6       	ldi	r28, 0x63	; 99
    8ae2:	d1 e0       	ldi	r29, 0x01	; 1
    8ae4:	03 c0       	rjmp	.+6      	; 0x8aec <__do_global_dtors+0xe>
    8ae6:	fe 01       	movw	r30, r28
    8ae8:	59 da       	rcall	.-2894   	; 0x7f9c <__tablejump2__>
    8aea:	21 96       	adiw	r28, 0x01	; 1
    8aec:	c4 36       	cpi	r28, 0x64	; 100
    8aee:	d1 07       	cpc	r29, r17
    8af0:	d1 f7       	brne	.-12     	; 0x8ae6 <__do_global_dtors+0x8>
    8af2:	f8 94       	cli

00008af4 <__stop_program>:
    8af4:	ff cf       	rjmp	.-2      	; 0x8af4 <__stop_program>
