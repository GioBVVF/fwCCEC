
templateVuoto.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000766  00800100  00007798  0000782c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007798  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000313  00800866  00800866  00007f92  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00007f92  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007fc4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00001268  00000000  00000000  00008004  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0003a68b  00000000  00000000  0000926c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000075cc  00000000  00000000  000438f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000bb3f  00000000  00000000  0004aec3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00004098  00000000  00000000  00056a04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00008335  00000000  00000000  0005aa9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00018980  00000000  00000000  00062dd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001350  00000000  00000000  0007b751  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	62 c1       	rjmp	.+708    	; 0x2c6 <__dtors_end>
       2:	00 00       	nop
       4:	8a c1       	rjmp	.+788    	; 0x31a <__bad_interrupt>
       6:	00 00       	nop
       8:	88 c1       	rjmp	.+784    	; 0x31a <__bad_interrupt>
       a:	00 00       	nop
       c:	86 c1       	rjmp	.+780    	; 0x31a <__bad_interrupt>
       e:	00 00       	nop
      10:	0c 94 75 10 	jmp	0x20ea	; 0x20ea <__vector_4>
      14:	82 c1       	rjmp	.+772    	; 0x31a <__bad_interrupt>
      16:	00 00       	nop
      18:	80 c1       	rjmp	.+768    	; 0x31a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	0c 94 a5 10 	jmp	0x214a	; 0x214a <__vector_7>
      20:	7c c1       	rjmp	.+760    	; 0x31a <__bad_interrupt>
      22:	00 00       	nop
      24:	7a c1       	rjmp	.+756    	; 0x31a <__bad_interrupt>
      26:	00 00       	nop
      28:	78 c1       	rjmp	.+752    	; 0x31a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	76 c1       	rjmp	.+748    	; 0x31a <__bad_interrupt>
      2e:	00 00       	nop
      30:	74 c1       	rjmp	.+744    	; 0x31a <__bad_interrupt>
      32:	00 00       	nop
      34:	72 c1       	rjmp	.+740    	; 0x31a <__bad_interrupt>
      36:	00 00       	nop
      38:	70 c1       	rjmp	.+736    	; 0x31a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6e c1       	rjmp	.+732    	; 0x31a <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 83 30 	jmp	0x6106	; 0x6106 <__vector_16>
      44:	6a c1       	rjmp	.+724    	; 0x31a <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 76 2e 	jmp	0x5cec	; 0x5cec <__vector_18>
      4c:	0c 94 a8 2e 	jmp	0x5d50	; 0x5d50 <__vector_19>
      50:	64 c1       	rjmp	.+712    	; 0x31a <__bad_interrupt>
      52:	00 00       	nop
      54:	62 c1       	rjmp	.+708    	; 0x31a <__bad_interrupt>
      56:	00 00       	nop
      58:	60 c1       	rjmp	.+704    	; 0x31a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5e c1       	rjmp	.+700    	; 0x31a <__bad_interrupt>
      5e:	00 00       	nop
      60:	5c c1       	rjmp	.+696    	; 0x31a <__bad_interrupt>
      62:	00 00       	nop
      64:	5a c1       	rjmp	.+692    	; 0x31a <__bad_interrupt>
      66:	00 00       	nop
      68:	0c 94 c3 2a 	jmp	0x5586	; 0x5586 <__vector_26>
      6c:	56 c1       	rjmp	.+684    	; 0x31a <__bad_interrupt>
      6e:	00 00       	nop
      70:	54 c1       	rjmp	.+680    	; 0x31a <__bad_interrupt>
      72:	00 00       	nop
      74:	52 c1       	rjmp	.+676    	; 0x31a <__bad_interrupt>
      76:	00 00       	nop
      78:	50 c1       	rjmp	.+672    	; 0x31a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4e c1       	rjmp	.+668    	; 0x31a <__bad_interrupt>
      7e:	00 00       	nop
      80:	4c c1       	rjmp	.+664    	; 0x31a <__bad_interrupt>
      82:	00 00       	nop
      84:	4a c1       	rjmp	.+660    	; 0x31a <__bad_interrupt>
      86:	00 00       	nop
      88:	48 c1       	rjmp	.+656    	; 0x31a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f9 09       	sbc	r31, r9
      8e:	1c 0a       	sbc	r1, r28
      90:	31 0a       	sbc	r3, r17
      92:	74 0a       	sbc	r7, r20
      94:	db 0a       	sbc	r13, r27
      96:	67 0b       	sbc	r22, r23
      98:	75 0c       	add	r7, r5
      9a:	db 0c       	add	r13, r11
      9c:	67 0d       	add	r22, r7
      9e:	5b 0e       	add	r5, r27
      a0:	1a 0f       	add	r17, r26
      a2:	1a 0f       	add	r17, r26
      a4:	5a 19       	sub	r21, r10
      a6:	71 19       	sub	r23, r1
      a8:	71 19       	sub	r23, r1
      aa:	6e 19       	sub	r22, r14
      ac:	71 19       	sub	r23, r1
      ae:	58 19       	sub	r21, r8
      b0:	71 19       	sub	r23, r1
      b2:	71 19       	sub	r23, r1
      b4:	71 19       	sub	r23, r1
      b6:	4c 19       	sub	r20, r12
      b8:	71 19       	sub	r23, r1
      ba:	71 19       	sub	r23, r1
      bc:	61 19       	sub	r22, r1
      be:	6c 19       	sub	r22, r12
      c0:	6a 19       	sub	r22, r10
      c2:	71 19       	sub	r23, r1
      c4:	71 19       	sub	r23, r1
      c6:	71 19       	sub	r23, r1
      c8:	68 19       	sub	r22, r8

000000ca <__trampolines_end>:
      ca:	00 40       	sbci	r16, 0x00	; 0
      cc:	7a 10       	cpse	r7, r10
      ce:	f3 5a       	subi	r31, 0xA3	; 163
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	72 4e       	sbci	r23, 0xE2	; 226
      d4:	18 09       	sbc	r17, r8
      d6:	00 10       	cpse	r0, r0
      d8:	a5 d4       	rcall	.+2378   	; 0xa24 <_Z19GetHTTPResponseCode6String+0x2a>
      da:	e8 00       	.word	0x00e8	; ????
      dc:	00 e8       	ldi	r16, 0x80	; 128
      de:	76 48       	sbci	r23, 0x86	; 134
      e0:	17 00       	.word	0x0017	; ????
      e2:	00 e4       	ldi	r16, 0x40	; 64
      e4:	0b 54       	subi	r16, 0x4B	; 75
      e6:	02 00       	.word	0x0002	; ????
      e8:	00 ca       	rjmp	.-3072   	; 0xfffff4ea <__eeprom_end+0xff7ef4ea>
      ea:	9a 3b       	cpi	r25, 0xBA	; 186
      ec:	00 00       	nop
      ee:	00 e1       	ldi	r16, 0x10	; 16
      f0:	f5 05       	cpc	r31, r5
      f2:	00 00       	nop
      f4:	80 96       	adiw	r24, 0x20	; 32
      f6:	98 00       	.word	0x0098	; ????
      f8:	00 00       	nop
      fa:	40 42       	sbci	r20, 0x20	; 32
      fc:	0f 00       	.word	0x000f	; ????
      fe:	00 00       	nop
     100:	a0 86       	std	Z+8, r10	; 0x08
     102:	01 00       	.word	0x0001	; ????
     104:	00 00       	nop
     106:	10 27       	eor	r17, r16
     108:	00 00       	nop
     10a:	00 00       	nop
     10c:	e8 03       	fmulsu	r22, r16
     10e:	00 00       	nop
     110:	00 00       	nop
     112:	64 00       	.word	0x0064	; ????
     114:	00 00       	nop
     116:	00 00       	nop
     118:	0a 00       	.word	0x000a	; ????
     11a:	00 00       	nop
     11c:	00 00       	nop
     11e:	01 00       	.word	0x0001	; ????
     120:	00 00       	nop
     122:	00 00       	nop
     124:	2c 76       	andi	r18, 0x6C	; 108
     126:	d8 88       	ldd	r13, Y+16	; 0x10
     128:	dc 67       	ori	r29, 0x7C	; 124
     12a:	4f 08       	sbc	r4, r15
     12c:	23 df       	rcall	.-442    	; 0xffffff74 <__eeprom_end+0xff7eff74>
     12e:	c1 df       	rcall	.-126    	; 0xb2 <__SREG__+0x73>
     130:	ae 59       	subi	r26, 0x9E	; 158
     132:	e1 b1       	in	r30, 0x01	; 1
     134:	b7 96       	adiw	r30, 0x27	; 39
     136:	e5 e3       	ldi	r30, 0x35	; 53
     138:	e4 53       	subi	r30, 0x34	; 52
     13a:	c6 3a       	cpi	r28, 0xA6	; 166
     13c:	e6 51       	subi	r30, 0x16	; 22
     13e:	99 76       	andi	r25, 0x69	; 105
     140:	96 e8       	ldi	r25, 0x86	; 134
     142:	e6 c2       	rjmp	.+1484   	; 0x710 <_Z11avanzaStatom+0xa>
     144:	84 26       	eor	r8, r20
     146:	eb 89       	ldd	r30, Y+19	; 0x13
     148:	8c 9b       	sbis	0x11, 4	; 17
     14a:	62 ed       	ldi	r22, 0xD2	; 210
     14c:	40 7c       	andi	r20, 0xC0	; 192
     14e:	6f fc       	.word	0xfc6f	; ????
     150:	ef bc       	out	0x2f, r14	; 47
     152:	9c 9f       	mul	r25, r28
     154:	40 f2       	brcs	.-112    	; 0xe6 <__trampolines_end+0x1c>
     156:	ba a5       	ldd	r27, Y+42	; 0x2a
     158:	6f a5       	ldd	r22, Y+47	; 0x2f
     15a:	f4 90       	lpm	r15, Z
     15c:	05 5a       	subi	r16, 0xA5	; 165
     15e:	2a f7       	brpl	.-54     	; 0x12a <__trampolines_end+0x60>
     160:	5c 93       	st	X, r21
     162:	6b 6c       	ori	r22, 0xCB	; 203
     164:	f9 67       	ori	r31, 0x79	; 121
     166:	6d c1       	rjmp	.+730    	; 0x442 <_Z8printTabh+0xe>
     168:	1b fc       	.word	0xfc1b	; ????
     16a:	e0 e4       	ldi	r30, 0x40	; 64
     16c:	0d 47       	sbci	r16, 0x7D	; 125
     16e:	fe f5       	brtc	.+126    	; 0x1ee <_ZZ5setupE3__c+0xc>
     170:	20 e6       	ldi	r18, 0x60	; 96
     172:	b5 00       	.word	0x00b5	; ????
     174:	d0 ed       	ldi	r29, 0xD0	; 208
     176:	90 2e       	mov	r9, r16
     178:	03 00       	.word	0x0003	; ????
     17a:	94 35       	cpi	r25, 0x54	; 84
     17c:	77 05       	cpc	r23, r7
     17e:	00 80       	ld	r0, Z
     180:	84 1e       	adc	r8, r20
     182:	08 00       	.word	0x0008	; ????
     184:	00 20       	and	r0, r0
     186:	4e 0a       	sbc	r4, r30
     188:	00 00       	nop
     18a:	00 c8       	rjmp	.-4096   	; 0xfffff18c <__eeprom_end+0xff7ef18c>
     18c:	0c 33       	cpi	r16, 0x3C	; 60
     18e:	33 33       	cpi	r19, 0x33	; 51
     190:	33 0f       	add	r19, r19
     192:	98 6e       	ori	r25, 0xE8	; 232
     194:	12 83       	std	Z+2, r17	; 0x02
     196:	11 41       	sbci	r17, 0x11	; 17
     198:	ef 8d       	ldd	r30, Y+31	; 0x1f
     19a:	21 14       	cp	r2, r1
     19c:	89 3b       	cpi	r24, 0xB9	; 185
     19e:	e6 55       	subi	r30, 0x56	; 86
     1a0:	16 cf       	rjmp	.-468    	; 0xffffffce <__eeprom_end+0xff7effce>
     1a2:	fe e6       	ldi	r31, 0x6E	; 110
     1a4:	db 18       	sub	r13, r11
     1a6:	d1 84       	ldd	r13, Z+9	; 0x09
     1a8:	4b 38       	cpi	r20, 0x8B	; 139
     1aa:	1b f7       	brvc	.-58     	; 0x172 <__trampolines_end+0xa8>
     1ac:	7c 1d       	adc	r23, r12
     1ae:	90 1d       	adc	r25, r0
     1b0:	a4 bb       	out	0x14, r26	; 20
     1b2:	e4 24       	eor	r14, r4
     1b4:	20 32       	cpi	r18, 0x20	; 32
     1b6:	84 72       	andi	r24, 0x24	; 36
     1b8:	5e 22       	and	r5, r30
     1ba:	81 00       	.word	0x0081	; ????
     1bc:	c9 f1       	breq	.+114    	; 0x230 <_ZL11daysInMonth+0xa>
     1be:	24 ec       	ldi	r18, 0xC4	; 196
     1c0:	a1 e5       	ldi	r26, 0x51	; 81
     1c2:	3d 27       	eor	r19, r29

000001c4 <_ZZ5setupE3__c_0>:
     1c4:	52 54 43 20 63 68 69 70 20 44 53 33 32 33 31 4d     RTC chip DS3231M
     1d4:	20 69 6e 69 74 69 61 6c 69 7a 65 64 2e 00            initialized..

000001e2 <_ZZ5setupE3__c>:
     1e2:	55 6e 61 62 6c 65 20 74 6f 20 66 69 6e 64 20 44     Unable to find D
     1f2:	53 33 32 33 31 4d 4d 2e 20 43 68 65 63 6b 69 6e     S3231MM. Checkin
     202:	67 20 61 67 61 69 6e 20 69 6e 20 33 73 2e 00        g again in 3s..

00000211 <_ZZN13DS3231M_Class6adjustEvE3__c>:
     211:	4d 61 79 20 20 35 20 32 30 32 31 00                 May  5 2021.

0000021d <_ZZN13DS3231M_Class6adjustEvE3__c_0>:
     21d:	31 34 3a 34 39 3a 32 33 00                          14:49:23.

00000226 <_ZL11daysInMonth>:
     226:	1f 1c 1f 1e 1f 1e 1f 1f 1e 1f 1e 1f                 ............

00000232 <digital_pin_to_timer_PGM>:
     232:	00 00 00 00 04 03 08 07 00 00 02 00 09 0a 00 00     ................
	...
     24e:	00 00 00 01                                         ....

00000252 <digital_pin_to_bit_mask_PGM>:
     252:	01 02 04 08 10 20 40 80 01 02 10 20 40 80 10 20     ..... @.... @.. 
     262:	40 80 10 08 20 04 40 80 01 02 04 08 01 02 04 08     @... .@.........

00000272 <digital_pin_to_port_PGM>:
     272:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 01 01     ................
     282:	01 01 03 03 03 03 03 03 01 01 01 01 03 03 02 02     ................

00000292 <port_to_input_PGM>:
     292:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

0000029c <port_to_output_PGM>:
     29c:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000002a6 <port_to_mode_PGM>:
     2a6:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000002b0 <__ctors_start>:
     2b0:	8e 11       	cpse	r24, r14
     2b2:	e0 1b       	sub	r30, r16
     2b4:	38 1c       	adc	r3, r8
     2b6:	30 1f       	adc	r19, r16
     2b8:	17 21       	and	r17, r7
     2ba:	22 21       	and	r18, r2
     2bc:	f4 22       	and	r15, r20
     2be:	c4 26       	eor	r12, r20
     2c0:	53 2d       	mov	r21, r3
     2c2:	d6 2e       	mov	r13, r22

000002c4 <__ctors_end>:
     2c4:	6b 12       	cpse	r6, r27

000002c6 <__dtors_end>:
     2c6:	11 24       	eor	r1, r1
     2c8:	1f be       	out	0x3f, r1	; 63
     2ca:	cf ef       	ldi	r28, 0xFF	; 255
     2cc:	d0 e4       	ldi	r29, 0x40	; 64
     2ce:	de bf       	out	0x3e, r29	; 62
     2d0:	cd bf       	out	0x3d, r28	; 61

000002d2 <__do_copy_data>:
     2d2:	18 e0       	ldi	r17, 0x08	; 8
     2d4:	a0 e0       	ldi	r26, 0x00	; 0
     2d6:	b1 e0       	ldi	r27, 0x01	; 1
     2d8:	e8 e9       	ldi	r30, 0x98	; 152
     2da:	f7 e7       	ldi	r31, 0x77	; 119
     2dc:	00 e0       	ldi	r16, 0x00	; 0
     2de:	0b bf       	out	0x3b, r16	; 59
     2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <__do_copy_data+0x14>
     2e2:	07 90       	elpm	r0, Z+
     2e4:	0d 92       	st	X+, r0
     2e6:	a6 36       	cpi	r26, 0x66	; 102
     2e8:	b1 07       	cpc	r27, r17
     2ea:	d9 f7       	brne	.-10     	; 0x2e2 <__do_copy_data+0x10>

000002ec <__do_clear_bss>:
     2ec:	2b e0       	ldi	r18, 0x0B	; 11
     2ee:	a6 e6       	ldi	r26, 0x66	; 102
     2f0:	b8 e0       	ldi	r27, 0x08	; 8
     2f2:	01 c0       	rjmp	.+2      	; 0x2f6 <.do_clear_bss_start>

000002f4 <.do_clear_bss_loop>:
     2f4:	1d 92       	st	X+, r1

000002f6 <.do_clear_bss_start>:
     2f6:	a9 37       	cpi	r26, 0x79	; 121
     2f8:	b2 07       	cpc	r27, r18
     2fa:	e1 f7       	brne	.-8      	; 0x2f4 <.do_clear_bss_loop>

000002fc <__do_global_ctors>:
     2fc:	11 e0       	ldi	r17, 0x01	; 1
     2fe:	c2 e6       	ldi	r28, 0x62	; 98
     300:	d1 e0       	ldi	r29, 0x01	; 1
     302:	04 c0       	rjmp	.+8      	; 0x30c <__do_global_ctors+0x10>
     304:	21 97       	sbiw	r28, 0x01	; 1
     306:	fe 01       	movw	r30, r28
     308:	0e 94 7f 36 	call	0x6cfe	; 0x6cfe <__tablejump2__>
     30c:	c8 35       	cpi	r28, 0x58	; 88
     30e:	d1 07       	cpc	r29, r17
     310:	c9 f7       	brne	.-14     	; 0x304 <__do_global_ctors+0x8>
     312:	0e 94 62 2f 	call	0x5ec4	; 0x5ec4 <main>
     316:	0c 94 c0 3b 	jmp	0x7780	; 0x7780 <__do_global_dtors>

0000031a <__bad_interrupt>:
     31a:	72 ce       	rjmp	.-796    	; 0x0 <__vectors>

0000031c <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     31c:	80 e0       	ldi	r24, 0x00	; 0
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	08 95       	ret

00000322 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     322:	08 95       	ret

00000324 <_ZL11disable_ETHv>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     324:	44 9a       	sbi	0x08, 4	; 8
     326:	08 95       	ret

00000328 <_Z19InizializzaEthernetv>:
     328:	ef 92       	push	r14
     32a:	ff 92       	push	r15
     32c:	0f 93       	push	r16
     32e:	1f 93       	push	r17
     330:	cf 93       	push	r28
     332:	df 93       	push	r29
     334:	cd b7       	in	r28, 0x3d	; 61
     336:	de b7       	in	r29, 0x3e	; 62
     338:	68 97       	sbiw	r28, 0x18	; 24
     33a:	0f b6       	in	r0, 0x3f	; 63
     33c:	f8 94       	cli
     33e:	de bf       	out	0x3e, r29	; 62
     340:	0f be       	out	0x3f, r0	; 63
     342:	cd bf       	out	0x3d, r28	; 61
     344:	85 e4       	ldi	r24, 0x45	; 69
     346:	98 e0       	ldi	r25, 0x08	; 8
     348:	9a 83       	std	Y+2, r25	; 0x02
     34a:	89 83       	std	Y+1, r24	; 0x01
     34c:	40 91 af 08 	lds	r20, 0x08AF	; 0x8008af <subnet+0x2>
     350:	50 91 b0 08 	lds	r21, 0x08B0	; 0x8008b0 <subnet+0x3>
     354:	60 91 b1 08 	lds	r22, 0x08B1	; 0x8008b1 <subnet+0x4>
     358:	70 91 b2 08 	lds	r23, 0x08B2	; 0x8008b2 <subnet+0x5>
     35c:	4b 83       	std	Y+3, r20	; 0x03
     35e:	5c 83       	std	Y+4, r21	; 0x04
     360:	6d 83       	std	Y+5, r22	; 0x05
     362:	7e 83       	std	Y+6, r23	; 0x06
     364:	98 87       	std	Y+8, r25	; 0x08
     366:	8f 83       	std	Y+7, r24	; 0x07
     368:	40 91 b5 08 	lds	r20, 0x08B5	; 0x8008b5 <gateway+0x2>
     36c:	50 91 b6 08 	lds	r21, 0x08B6	; 0x8008b6 <gateway+0x3>
     370:	60 91 b7 08 	lds	r22, 0x08B7	; 0x8008b7 <gateway+0x4>
     374:	70 91 b8 08 	lds	r23, 0x08B8	; 0x8008b8 <gateway+0x5>
     378:	49 87       	std	Y+9, r20	; 0x09
     37a:	5a 87       	std	Y+10, r21	; 0x0a
     37c:	6b 87       	std	Y+11, r22	; 0x0b
     37e:	7c 87       	std	Y+12, r23	; 0x0c
     380:	9e 87       	std	Y+14, r25	; 0x0e
     382:	8d 87       	std	Y+13, r24	; 0x0d
     384:	40 91 bb 08 	lds	r20, 0x08BB	; 0x8008bb <myDns+0x2>
     388:	50 91 bc 08 	lds	r21, 0x08BC	; 0x8008bc <myDns+0x3>
     38c:	60 91 bd 08 	lds	r22, 0x08BD	; 0x8008bd <myDns+0x4>
     390:	70 91 be 08 	lds	r23, 0x08BE	; 0x8008be <myDns+0x5>
     394:	4f 87       	std	Y+15, r20	; 0x0f
     396:	58 8b       	std	Y+16, r21	; 0x10
     398:	69 8b       	std	Y+17, r22	; 0x11
     39a:	7a 8b       	std	Y+18, r23	; 0x12
     39c:	9c 8b       	std	Y+20, r25	; 0x14
     39e:	8b 8b       	std	Y+19, r24	; 0x13
     3a0:	80 91 c1 08 	lds	r24, 0x08C1	; 0x8008c1 <ipCCEC+0x2>
     3a4:	90 91 c2 08 	lds	r25, 0x08C2	; 0x8008c2 <ipCCEC+0x3>
     3a8:	a0 91 c3 08 	lds	r26, 0x08C3	; 0x8008c3 <ipCCEC+0x4>
     3ac:	b0 91 c4 08 	lds	r27, 0x08C4	; 0x8008c4 <ipCCEC+0x5>
     3b0:	8d 8b       	std	Y+21, r24	; 0x15
     3b2:	9e 8b       	std	Y+22, r25	; 0x16
     3b4:	af 8b       	std	Y+23, r26	; 0x17
     3b6:	b8 8f       	std	Y+24, r27	; 0x18
     3b8:	ce 01       	movw	r24, r28
     3ba:	01 96       	adiw	r24, 0x01	; 1
     3bc:	7c 01       	movw	r14, r24
     3be:	8e 01       	movw	r16, r28
     3c0:	09 5f       	subi	r16, 0xF9	; 249
     3c2:	1f 4f       	sbci	r17, 0xFF	; 255
     3c4:	9e 01       	movw	r18, r28
     3c6:	23 5f       	subi	r18, 0xF3	; 243
     3c8:	3f 4f       	sbci	r19, 0xFF	; 255
     3ca:	ae 01       	movw	r20, r28
     3cc:	4d 5e       	subi	r20, 0xED	; 237
     3ce:	5f 4f       	sbci	r21, 0xFF	; 255
     3d0:	66 e2       	ldi	r22, 0x26	; 38
     3d2:	71 e0       	ldi	r23, 0x01	; 1
     3d4:	8c ec       	ldi	r24, 0xCC	; 204
     3d6:	99 e0       	ldi	r25, 0x09	; 9
     3d8:	0e 94 ea 1e 	call	0x3dd4	; 0x3dd4 <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_>
     3dc:	68 96       	adiw	r28, 0x18	; 24
     3de:	0f b6       	in	r0, 0x3f	; 63
     3e0:	f8 94       	cli
     3e2:	de bf       	out	0x3e, r29	; 62
     3e4:	0f be       	out	0x3f, r0	; 63
     3e6:	cd bf       	out	0x3d, r28	; 61
     3e8:	df 91       	pop	r29
     3ea:	cf 91       	pop	r28
     3ec:	1f 91       	pop	r17
     3ee:	0f 91       	pop	r16
     3f0:	ff 90       	pop	r15
     3f2:	ef 90       	pop	r14
     3f4:	08 95       	ret

000003f6 <_Z11my_delay_msi>:
     3f6:	18 16       	cp	r1, r24
     3f8:	19 06       	cpc	r1, r25
     3fa:	44 f4       	brge	.+16     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     3fc:	ef e9       	ldi	r30, 0x9F	; 159
     3fe:	ff e0       	ldi	r31, 0x0F	; 15
     400:	31 97       	sbiw	r30, 0x01	; 1
     402:	f1 f7       	brne	.-4      	; 0x400 <__LOCK_REGION_LENGTH__>
     404:	00 c0       	rjmp	.+0      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     406:	00 00       	nop
     408:	01 97       	sbiw	r24, 0x01	; 1
     40a:	f5 cf       	rjmp	.-22     	; 0x3f6 <_Z11my_delay_msi>
     40c:	08 95       	ret

0000040e <_Z9printLinev>:
     40e:	cf 93       	push	r28
     410:	8f ec       	ldi	r24, 0xCF	; 207
     412:	9a e0       	ldi	r25, 0x0A	; 10
     414:	0e 94 e7 2f 	call	0x5fce	; 0x5fce <_ZN5Print7printlnEv>
     418:	cd e7       	ldi	r28, 0x7D	; 125
     41a:	6d e6       	ldi	r22, 0x6D	; 109
     41c:	71 e0       	ldi	r23, 0x01	; 1
     41e:	8f ec       	ldi	r24, 0xCF	; 207
     420:	9a e0       	ldi	r25, 0x0A	; 10
     422:	0e 94 df 2f 	call	0x5fbe	; 0x5fbe <_ZN5Print5printEPKc>
     426:	c1 50       	subi	r28, 0x01	; 1
     428:	c1 f7       	brne	.-16     	; 0x41a <_Z9printLinev+0xc>
     42a:	8f ec       	ldi	r24, 0xCF	; 207
     42c:	9a e0       	ldi	r25, 0x0A	; 10
     42e:	cf 91       	pop	r28
     430:	0c 94 e7 2f 	jmp	0x5fce	; 0x5fce <_ZN5Print7printlnEv>

00000434 <_Z8printTabh>:
     434:	cf 93       	push	r28
     436:	df 93       	push	r29
     438:	d8 2f       	mov	r29, r24
     43a:	c0 e0       	ldi	r28, 0x00	; 0
     43c:	cd 17       	cp	r28, r29
     43e:	41 f0       	breq	.+16     	; 0x450 <_Z8printTabh+0x1c>
     440:	6f e6       	ldi	r22, 0x6F	; 111
     442:	71 e0       	ldi	r23, 0x01	; 1
     444:	8f ec       	ldi	r24, 0xCF	; 207
     446:	9a e0       	ldi	r25, 0x0A	; 10
     448:	0e 94 df 2f 	call	0x5fbe	; 0x5fbe <_ZN5Print5printEPKc>
     44c:	cf 5f       	subi	r28, 0xFF	; 255
     44e:	f6 cf       	rjmp	.-20     	; 0x43c <_Z8printTabh+0x8>
     450:	df 91       	pop	r29
     452:	cf 91       	pop	r28
     454:	08 95       	ret

00000456 <_Z4passb>:
     456:	cf 93       	push	r28
     458:	c8 2f       	mov	r28, r24
     45a:	81 e0       	ldi	r24, 0x01	; 1
     45c:	eb df       	rcall	.-42     	; 0x434 <_Z8printTabh>
     45e:	61 e7       	ldi	r22, 0x71	; 113
     460:	71 e0       	ldi	r23, 0x01	; 1
     462:	8f ec       	ldi	r24, 0xCF	; 207
     464:	9a e0       	ldi	r25, 0x0A	; 10
     466:	0e 94 df 2f 	call	0x5fbe	; 0x5fbe <_ZN5Print5printEPKc>
     46a:	cc 23       	and	r28, r28
     46c:	19 f0       	breq	.+6      	; 0x474 <_Z4passb+0x1e>
     46e:	65 e7       	ldi	r22, 0x75	; 117
     470:	71 e0       	ldi	r23, 0x01	; 1
     472:	02 c0       	rjmp	.+4      	; 0x478 <_Z4passb+0x22>
     474:	6a e7       	ldi	r22, 0x7A	; 122
     476:	71 e0       	ldi	r23, 0x01	; 1
     478:	8f ec       	ldi	r24, 0xCF	; 207
     47a:	9a e0       	ldi	r25, 0x0A	; 10
     47c:	0e 94 df 2f 	call	0x5fbe	; 0x5fbe <_ZN5Print5printEPKc>
     480:	81 e0       	ldi	r24, 0x01	; 1
     482:	cf 91       	pop	r28
     484:	d7 cf       	rjmp	.-82     	; 0x434 <_Z8printTabh>

00000486 <_Z6Buzzerhm>:
     486:	cf 92       	push	r12
     488:	df 92       	push	r13
     48a:	ef 92       	push	r14
     48c:	ff 92       	push	r15
     48e:	0f 93       	push	r16
     490:	1f 93       	push	r17
     492:	cf 93       	push	r28
     494:	df 93       	push	r29
     496:	6a 01       	movw	r12, r20
     498:	7b 01       	movw	r14, r22
     49a:	c0 e0       	ldi	r28, 0x00	; 0
     49c:	d0 e0       	ldi	r29, 0x00	; 0
     49e:	08 2f       	mov	r16, r24
     4a0:	10 e0       	ldi	r17, 0x00	; 0
     4a2:	c0 17       	cp	r28, r16
     4a4:	d1 07       	cpc	r29, r17
     4a6:	24 f4       	brge	.+8      	; 0x4b0 <_Z6Buzzerhm+0x2a>
     4a8:	c6 01       	movw	r24, r12
     4aa:	a5 df       	rcall	.-182    	; 0x3f6 <_Z11my_delay_msi>
     4ac:	21 96       	adiw	r28, 0x01	; 1
     4ae:	f9 cf       	rjmp	.-14     	; 0x4a2 <_Z6Buzzerhm+0x1c>
     4b0:	df 91       	pop	r29
     4b2:	cf 91       	pop	r28
     4b4:	1f 91       	pop	r17
     4b6:	0f 91       	pop	r16
     4b8:	ff 90       	pop	r15
     4ba:	ef 90       	pop	r14
     4bc:	df 90       	pop	r13
     4be:	cf 90       	pop	r12
     4c0:	08 95       	ret

000004c2 <_Z13getCharKeypadi>:
     4c2:	82 32       	cpi	r24, 0x22	; 34
     4c4:	91 05       	cpc	r25, r1
     4c6:	09 f4       	brne	.+2      	; 0x4ca <_Z13getCharKeypadi+0x8>
     4c8:	9a c0       	rjmp	.+308    	; 0x5fe <_Z13getCharKeypadi+0x13c>
     4ca:	6c f5       	brge	.+90     	; 0x526 <_Z13getCharKeypadi+0x64>
     4cc:	8a 30       	cpi	r24, 0x0A	; 10
     4ce:	91 05       	cpc	r25, r1
     4d0:	09 f4       	brne	.+2      	; 0x4d4 <_Z13getCharKeypadi+0x12>
     4d2:	83 c0       	rjmp	.+262    	; 0x5da <_Z13getCharKeypadi+0x118>
     4d4:	a4 f4       	brge	.+40     	; 0x4fe <_Z13getCharKeypadi+0x3c>
     4d6:	86 30       	cpi	r24, 0x06	; 6
     4d8:	91 05       	cpc	r25, r1
     4da:	09 f4       	brne	.+2      	; 0x4de <_Z13getCharKeypadi+0x1c>
     4dc:	75 c0       	rjmp	.+234    	; 0x5c8 <_Z13getCharKeypadi+0x106>
     4de:	89 30       	cpi	r24, 0x09	; 9
     4e0:	91 05       	cpc	r25, r1
     4e2:	09 f4       	brne	.+2      	; 0x4e6 <_Z13getCharKeypadi+0x24>
     4e4:	5d c0       	rjmp	.+186    	; 0x5a0 <_Z13getCharKeypadi+0xde>
     4e6:	05 97       	sbiw	r24, 0x05	; 5
     4e8:	09 f0       	breq	.+2      	; 0x4ec <_Z13getCharKeypadi+0x2a>
     4ea:	cf c0       	rjmp	.+414    	; 0x68a <_Z13getCharKeypadi+0x1c8>
     4ec:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <MappaKeys>
     4f0:	8f ec       	ldi	r24, 0xCF	; 207
     4f2:	9a e0       	ldi	r25, 0x0A	; 10
     4f4:	0e 94 e0 2f 	call	0x5fc0	; 0x5fc0 <_ZN5Print5printEc>
     4f8:	20 e0       	ldi	r18, 0x00	; 0
     4fa:	30 e0       	ldi	r19, 0x00	; 0
     4fc:	59 c0       	rjmp	.+178    	; 0x5b0 <_Z13getCharKeypadi+0xee>
     4fe:	82 31       	cpi	r24, 0x12	; 18
     500:	91 05       	cpc	r25, r1
     502:	09 f4       	brne	.+2      	; 0x506 <_Z13getCharKeypadi+0x44>
     504:	73 c0       	rjmp	.+230    	; 0x5ec <_Z13getCharKeypadi+0x12a>
     506:	81 32       	cpi	r24, 0x21	; 33
     508:	91 05       	cpc	r25, r1
     50a:	09 f4       	brne	.+2      	; 0x50e <_Z13getCharKeypadi+0x4c>
     50c:	54 c0       	rjmp	.+168    	; 0x5b6 <_Z13getCharKeypadi+0xf4>
     50e:	41 97       	sbiw	r24, 0x11	; 17
     510:	09 f0       	breq	.+2      	; 0x514 <_Z13getCharKeypadi+0x52>
     512:	bb c0       	rjmp	.+374    	; 0x68a <_Z13getCharKeypadi+0x1c8>
     514:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <MappaKeys+0x2>
     518:	8f ec       	ldi	r24, 0xCF	; 207
     51a:	9a e0       	ldi	r25, 0x0A	; 10
     51c:	0e 94 e0 2f 	call	0x5fc0	; 0x5fc0 <_ZN5Print5printEc>
     520:	22 e0       	ldi	r18, 0x02	; 2
     522:	30 e0       	ldi	r19, 0x00	; 0
     524:	45 c0       	rjmp	.+138    	; 0x5b0 <_Z13getCharKeypadi+0xee>
     526:	80 36       	cpi	r24, 0x60	; 96
     528:	91 05       	cpc	r25, r1
     52a:	09 f4       	brne	.+2      	; 0x52e <_Z13getCharKeypadi+0x6c>
     52c:	99 c0       	rjmp	.+306    	; 0x660 <_Z13getCharKeypadi+0x19e>
     52e:	ac f4       	brge	.+42     	; 0x55a <_Z13getCharKeypadi+0x98>
     530:	88 34       	cpi	r24, 0x48	; 72
     532:	91 05       	cpc	r25, r1
     534:	09 f4       	brne	.+2      	; 0x538 <_Z13getCharKeypadi+0x76>
     536:	82 c0       	rjmp	.+260    	; 0x63c <_Z13getCharKeypadi+0x17a>
     538:	80 35       	cpi	r24, 0x50	; 80
     53a:	91 05       	cpc	r25, r1
     53c:	09 f4       	brne	.+2      	; 0x540 <_Z13getCharKeypadi+0x7e>
     53e:	87 c0       	rjmp	.+270    	; 0x64e <_Z13getCharKeypadi+0x18c>
     540:	84 34       	cpi	r24, 0x44	; 68
     542:	91 05       	cpc	r25, r1
     544:	09 f0       	breq	.+2      	; 0x548 <_Z13getCharKeypadi+0x86>
     546:	a1 c0       	rjmp	.+322    	; 0x68a <_Z13getCharKeypadi+0x1c8>
     548:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <MappaKeys+0xc>
     54c:	8f ec       	ldi	r24, 0xCF	; 207
     54e:	9a e0       	ldi	r25, 0x0A	; 10
     550:	0e 94 e0 2f 	call	0x5fc0	; 0x5fc0 <_ZN5Print5printEc>
     554:	20 e0       	ldi	r18, 0x00	; 0
     556:	30 e0       	ldi	r19, 0x00	; 0
     558:	8b c0       	rjmp	.+278    	; 0x670 <_Z13getCharKeypadi+0x1ae>
     55a:	88 38       	cpi	r24, 0x88	; 136
     55c:	91 05       	cpc	r25, r1
     55e:	09 f4       	brne	.+2      	; 0x562 <_Z13getCharKeypadi+0xa0>
     560:	59 c0       	rjmp	.+178    	; 0x614 <_Z13getCharKeypadi+0x152>
     562:	6c f4       	brge	.+26     	; 0x57e <_Z13getCharKeypadi+0xbc>
     564:	84 38       	cpi	r24, 0x84	; 132
     566:	91 05       	cpc	r25, r1
     568:	09 f0       	breq	.+2      	; 0x56c <_Z13getCharKeypadi+0xaa>
     56a:	8f c0       	rjmp	.+286    	; 0x68a <_Z13getCharKeypadi+0x1c8>
     56c:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <MappaKeys+0x8>
     570:	8f ec       	ldi	r24, 0xCF	; 207
     572:	9a e0       	ldi	r25, 0x0A	; 10
     574:	0e 94 e0 2f 	call	0x5fc0	; 0x5fc0 <_ZN5Print5printEc>
     578:	20 e0       	ldi	r18, 0x00	; 0
     57a:	30 e0       	ldi	r19, 0x00	; 0
     57c:	5c c0       	rjmp	.+184    	; 0x636 <_Z13getCharKeypadi+0x174>
     57e:	80 39       	cpi	r24, 0x90	; 144
     580:	91 05       	cpc	r25, r1
     582:	09 f4       	brne	.+2      	; 0x586 <_Z13getCharKeypadi+0xc4>
     584:	50 c0       	rjmp	.+160    	; 0x626 <_Z13getCharKeypadi+0x164>
     586:	80 3a       	cpi	r24, 0xA0	; 160
     588:	91 05       	cpc	r25, r1
     58a:	09 f0       	breq	.+2      	; 0x58e <_Z13getCharKeypadi+0xcc>
     58c:	7e c0       	rjmp	.+252    	; 0x68a <_Z13getCharKeypadi+0x1c8>
     58e:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <MappaKeys+0xb>
     592:	8f ec       	ldi	r24, 0xCF	; 207
     594:	9a e0       	ldi	r25, 0x0A	; 10
     596:	0e 94 e0 2f 	call	0x5fc0	; 0x5fc0 <_ZN5Print5printEc>
     59a:	23 e0       	ldi	r18, 0x03	; 3
     59c:	30 e0       	ldi	r19, 0x00	; 0
     59e:	4b c0       	rjmp	.+150    	; 0x636 <_Z13getCharKeypadi+0x174>
     5a0:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <MappaKeys+0x1>
     5a4:	8f ec       	ldi	r24, 0xCF	; 207
     5a6:	9a e0       	ldi	r25, 0x0A	; 10
     5a8:	0e 94 e0 2f 	call	0x5fc0	; 0x5fc0 <_ZN5Print5printEc>
     5ac:	21 e0       	ldi	r18, 0x01	; 1
     5ae:	30 e0       	ldi	r19, 0x00	; 0
     5b0:	80 e0       	ldi	r24, 0x00	; 0
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	5f c0       	rjmp	.+190    	; 0x674 <_Z13getCharKeypadi+0x1b2>
     5b6:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <MappaKeys+0x3>
     5ba:	8f ec       	ldi	r24, 0xCF	; 207
     5bc:	9a e0       	ldi	r25, 0x0A	; 10
     5be:	0e 94 e0 2f 	call	0x5fc0	; 0x5fc0 <_ZN5Print5printEc>
     5c2:	23 e0       	ldi	r18, 0x03	; 3
     5c4:	30 e0       	ldi	r19, 0x00	; 0
     5c6:	f4 cf       	rjmp	.-24     	; 0x5b0 <_Z13getCharKeypadi+0xee>
     5c8:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <MappaKeys+0x4>
     5cc:	8f ec       	ldi	r24, 0xCF	; 207
     5ce:	9a e0       	ldi	r25, 0x0A	; 10
     5d0:	0e 94 e0 2f 	call	0x5fc0	; 0x5fc0 <_ZN5Print5printEc>
     5d4:	20 e0       	ldi	r18, 0x00	; 0
     5d6:	30 e0       	ldi	r19, 0x00	; 0
     5d8:	1a c0       	rjmp	.+52     	; 0x60e <_Z13getCharKeypadi+0x14c>
     5da:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <MappaKeys+0x5>
     5de:	8f ec       	ldi	r24, 0xCF	; 207
     5e0:	9a e0       	ldi	r25, 0x0A	; 10
     5e2:	0e 94 e0 2f 	call	0x5fc0	; 0x5fc0 <_ZN5Print5printEc>
     5e6:	21 e0       	ldi	r18, 0x01	; 1
     5e8:	30 e0       	ldi	r19, 0x00	; 0
     5ea:	11 c0       	rjmp	.+34     	; 0x60e <_Z13getCharKeypadi+0x14c>
     5ec:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <MappaKeys+0x6>
     5f0:	8f ec       	ldi	r24, 0xCF	; 207
     5f2:	9a e0       	ldi	r25, 0x0A	; 10
     5f4:	0e 94 e0 2f 	call	0x5fc0	; 0x5fc0 <_ZN5Print5printEc>
     5f8:	22 e0       	ldi	r18, 0x02	; 2
     5fa:	30 e0       	ldi	r19, 0x00	; 0
     5fc:	08 c0       	rjmp	.+16     	; 0x60e <_Z13getCharKeypadi+0x14c>
     5fe:	60 91 0d 01 	lds	r22, 0x010D	; 0x80010d <MappaKeys+0x7>
     602:	8f ec       	ldi	r24, 0xCF	; 207
     604:	9a e0       	ldi	r25, 0x0A	; 10
     606:	0e 94 e0 2f 	call	0x5fc0	; 0x5fc0 <_ZN5Print5printEc>
     60a:	23 e0       	ldi	r18, 0x03	; 3
     60c:	30 e0       	ldi	r19, 0x00	; 0
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	30 c0       	rjmp	.+96     	; 0x674 <_Z13getCharKeypadi+0x1b2>
     614:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <MappaKeys+0x9>
     618:	8f ec       	ldi	r24, 0xCF	; 207
     61a:	9a e0       	ldi	r25, 0x0A	; 10
     61c:	0e 94 e0 2f 	call	0x5fc0	; 0x5fc0 <_ZN5Print5printEc>
     620:	21 e0       	ldi	r18, 0x01	; 1
     622:	30 e0       	ldi	r19, 0x00	; 0
     624:	08 c0       	rjmp	.+16     	; 0x636 <_Z13getCharKeypadi+0x174>
     626:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <MappaKeys+0xa>
     62a:	8f ec       	ldi	r24, 0xCF	; 207
     62c:	9a e0       	ldi	r25, 0x0A	; 10
     62e:	0e 94 e0 2f 	call	0x5fc0	; 0x5fc0 <_ZN5Print5printEc>
     632:	22 e0       	ldi	r18, 0x02	; 2
     634:	30 e0       	ldi	r19, 0x00	; 0
     636:	82 e0       	ldi	r24, 0x02	; 2
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	1c c0       	rjmp	.+56     	; 0x674 <_Z13getCharKeypadi+0x1b2>
     63c:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <MappaKeys+0xd>
     640:	8f ec       	ldi	r24, 0xCF	; 207
     642:	9a e0       	ldi	r25, 0x0A	; 10
     644:	0e 94 e0 2f 	call	0x5fc0	; 0x5fc0 <_ZN5Print5printEc>
     648:	21 e0       	ldi	r18, 0x01	; 1
     64a:	30 e0       	ldi	r19, 0x00	; 0
     64c:	11 c0       	rjmp	.+34     	; 0x670 <_Z13getCharKeypadi+0x1ae>
     64e:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <MappaKeys+0xe>
     652:	8f ec       	ldi	r24, 0xCF	; 207
     654:	9a e0       	ldi	r25, 0x0A	; 10
     656:	0e 94 e0 2f 	call	0x5fc0	; 0x5fc0 <_ZN5Print5printEc>
     65a:	22 e0       	ldi	r18, 0x02	; 2
     65c:	30 e0       	ldi	r19, 0x00	; 0
     65e:	08 c0       	rjmp	.+16     	; 0x670 <_Z13getCharKeypadi+0x1ae>
     660:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <MappaKeys+0xf>
     664:	8f ec       	ldi	r24, 0xCF	; 207
     666:	9a e0       	ldi	r25, 0x0A	; 10
     668:	0e 94 e0 2f 	call	0x5fc0	; 0x5fc0 <_ZN5Print5printEc>
     66c:	23 e0       	ldi	r18, 0x03	; 3
     66e:	30 e0       	ldi	r19, 0x00	; 0
     670:	83 e0       	ldi	r24, 0x03	; 3
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	88 0f       	add	r24, r24
     676:	99 1f       	adc	r25, r25
     678:	88 0f       	add	r24, r24
     67a:	99 1f       	adc	r25, r25
     67c:	8a 5f       	subi	r24, 0xFA	; 250
     67e:	9e 4f       	sbci	r25, 0xFE	; 254
     680:	fc 01       	movw	r30, r24
     682:	e2 0f       	add	r30, r18
     684:	f3 1f       	adc	r31, r19
     686:	80 81       	ld	r24, Z
     688:	08 95       	ret
     68a:	8e e4       	ldi	r24, 0x4E	; 78
     68c:	08 95       	ret

0000068e <_Z10displayLCDP6Stringii>:
     68e:	0f 93       	push	r16
     690:	1f 93       	push	r17
     692:	cf 93       	push	r28
     694:	df 93       	push	r29
     696:	ec 01       	movw	r28, r24
     698:	8a 01       	movw	r16, r20
     69a:	82 e4       	ldi	r24, 0x42	; 66
     69c:	99 e0       	ldi	r25, 0x09	; 9
     69e:	0e 94 4f 27 	call	0x4e9e	; 0x4e9e <_ZN3LCD5clearEv>
     6a2:	61 e0       	ldi	r22, 0x01	; 1
     6a4:	82 e4       	ldi	r24, 0x42	; 66
     6a6:	99 e0       	ldi	r25, 0x09	; 9
     6a8:	0e 94 e0 2f 	call	0x5fc0	; 0x5fc0 <_ZN5Print5printEc>
     6ac:	41 e0       	ldi	r20, 0x01	; 1
     6ae:	60 e0       	ldi	r22, 0x00	; 0
     6b0:	82 e4       	ldi	r24, 0x42	; 66
     6b2:	99 e0       	ldi	r25, 0x09	; 9
     6b4:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <_ZN3LCD9setCursorEhh>
     6b8:	be 01       	movw	r22, r28
     6ba:	6a 5f       	subi	r22, 0xFA	; 250
     6bc:	7f 4f       	sbci	r23, 0xFF	; 255
     6be:	82 e4       	ldi	r24, 0x42	; 66
     6c0:	99 e0       	ldi	r25, 0x09	; 9
     6c2:	0e 94 d1 2f 	call	0x5fa2	; 0x5fa2 <_ZN5Print5printERK6String>
     6c6:	42 e0       	ldi	r20, 0x02	; 2
     6c8:	60 e0       	ldi	r22, 0x00	; 0
     6ca:	82 e4       	ldi	r24, 0x42	; 66
     6cc:	99 e0       	ldi	r25, 0x09	; 9
     6ce:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <_ZN3LCD9setCursorEhh>
     6d2:	be 01       	movw	r22, r28
     6d4:	64 5f       	subi	r22, 0xF4	; 244
     6d6:	7f 4f       	sbci	r23, 0xFF	; 255
     6d8:	82 e4       	ldi	r24, 0x42	; 66
     6da:	99 e0       	ldi	r25, 0x09	; 9
     6dc:	0e 94 d1 2f 	call	0x5fa2	; 0x5fa2 <_ZN5Print5printERK6String>
     6e0:	43 e0       	ldi	r20, 0x03	; 3
     6e2:	60 e0       	ldi	r22, 0x00	; 0
     6e4:	82 e4       	ldi	r24, 0x42	; 66
     6e6:	99 e0       	ldi	r25, 0x09	; 9
     6e8:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <_ZN3LCD9setCursorEhh>
     6ec:	be 01       	movw	r22, r28
     6ee:	6e 5e       	subi	r22, 0xEE	; 238
     6f0:	7f 4f       	sbci	r23, 0xFF	; 255
     6f2:	82 e4       	ldi	r24, 0x42	; 66
     6f4:	99 e0       	ldi	r25, 0x09	; 9
     6f6:	0e 94 d1 2f 	call	0x5fa2	; 0x5fa2 <_ZN5Print5printERK6String>
     6fa:	c8 01       	movw	r24, r16
     6fc:	df 91       	pop	r29
     6fe:	cf 91       	pop	r28
     700:	1f 91       	pop	r17
     702:	0f 91       	pop	r16
     704:	78 ce       	rjmp	.-784    	; 0x3f6 <_Z11my_delay_msi>

00000706 <_Z11avanzaStatom>:
     706:	cf 92       	push	r12
     708:	df 92       	push	r13
     70a:	ef 92       	push	r14
     70c:	ff 92       	push	r15
     70e:	6b 01       	movw	r12, r22
     710:	7c 01       	movw	r14, r24
     712:	60 91 1b 09 	lds	r22, 0x091B	; 0x80091b <stato_procedura>
     716:	70 91 1c 09 	lds	r23, 0x091C	; 0x80091c <stato_procedura+0x1>
     71a:	4a e0       	ldi	r20, 0x0A	; 10
     71c:	50 e0       	ldi	r21, 0x00	; 0
     71e:	85 ec       	ldi	r24, 0xC5	; 197
     720:	98 e0       	ldi	r25, 0x08	; 8
     722:	b5 df       	rcall	.-150    	; 0x68e <_Z10displayLCDP6Stringii>
     724:	c0 92 7b 08 	sts	0x087B, r12	; 0x80087b <Timer>
     728:	d0 92 7c 08 	sts	0x087C, r13	; 0x80087c <Timer+0x1>
     72c:	e0 92 7d 08 	sts	0x087D, r14	; 0x80087d <Timer+0x2>
     730:	f0 92 7e 08 	sts	0x087E, r15	; 0x80087e <Timer+0x3>
     734:	85 e7       	ldi	r24, 0x75	; 117
     736:	98 e0       	ldi	r25, 0x08	; 8
     738:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <_ZNK8DateTime11secondstimeEv>
     73c:	60 93 7f 08 	sts	0x087F, r22	; 0x80087f <UltimoPassaggioStato>
     740:	70 93 80 08 	sts	0x0880, r23	; 0x800880 <UltimoPassaggioStato+0x1>
     744:	80 93 81 08 	sts	0x0881, r24	; 0x800881 <UltimoPassaggioStato+0x2>
     748:	90 93 82 08 	sts	0x0882, r25	; 0x800882 <UltimoPassaggioStato+0x3>
     74c:	80 91 1b 09 	lds	r24, 0x091B	; 0x80091b <stato_procedura>
     750:	90 91 1c 09 	lds	r25, 0x091C	; 0x80091c <stato_procedura+0x1>
     754:	01 96       	adiw	r24, 0x01	; 1
     756:	90 93 1c 09 	sts	0x091C, r25	; 0x80091c <stato_procedura+0x1>
     75a:	80 93 1b 09 	sts	0x091B, r24	; 0x80091b <stato_procedura>
     75e:	ff 90       	pop	r15
     760:	ef 90       	pop	r14
     762:	df 90       	pop	r13
     764:	cf 90       	pop	r12
     766:	08 95       	ret

00000768 <_Z14leggiTAG_Mezzob>:
     768:	af 92       	push	r10
     76a:	bf 92       	push	r11
     76c:	cf 92       	push	r12
     76e:	df 92       	push	r13
     770:	ef 92       	push	r14
     772:	ff 92       	push	r15
     774:	0f 93       	push	r16
     776:	1f 93       	push	r17
     778:	cf 93       	push	r28
     77a:	df 93       	push	r29
     77c:	cd b7       	in	r28, 0x3d	; 61
     77e:	de b7       	in	r29, 0x3e	; 62
     780:	a2 97       	sbiw	r28, 0x22	; 34
     782:	0f b6       	in	r0, 0x3f	; 63
     784:	f8 94       	cli
     786:	de bf       	out	0x3e, r29	; 62
     788:	0f be       	out	0x3f, r0	; 63
     78a:	cd bf       	out	0x3d, r28	; 61
     78c:	5c 01       	movw	r10, r24
     78e:	f6 2e       	mov	r15, r22
     790:	60 e7       	ldi	r22, 0x70	; 112
     792:	71 e0       	ldi	r23, 0x01	; 1
     794:	ce 01       	movw	r24, r28
     796:	4d 96       	adiw	r24, 0x1d	; 29
     798:	0e 94 a0 32 	call	0x6540	; 0x6540 <_ZN6StringC1EPKc>
     79c:	08 ec       	ldi	r16, 0xC8	; 200
     79e:	10 e0       	ldi	r17, 0x00	; 0
     7a0:	22 e6       	ldi	r18, 0x62	; 98
     7a2:	39 e0       	ldi	r19, 0x09	; 9
     7a4:	4b e5       	ldi	r20, 0x5B	; 91
     7a6:	59 e0       	ldi	r21, 0x09	; 9
     7a8:	60 e0       	ldi	r22, 0x00	; 0
     7aa:	8b e2       	ldi	r24, 0x2B	; 43
     7ac:	99 e0       	ldi	r25, 0x09	; 9
     7ae:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j>
     7b2:	80 93 63 09 	sts	0x0963, r24	; 0x800963 <success>
     7b6:	88 23       	and	r24, r24
     7b8:	09 f4       	brne	.+2      	; 0x7bc <_Z14leggiTAG_Mezzob+0x54>
     7ba:	9d c0       	rjmp	.+314    	; 0x8f6 <_Z14leggiTAG_Mezzob+0x18e>
     7bc:	4e e1       	ldi	r20, 0x1E	; 30
     7be:	50 e0       	ldi	r21, 0x00	; 0
     7c0:	60 e0       	ldi	r22, 0x00	; 0
     7c2:	70 e0       	ldi	r23, 0x00	; 0
     7c4:	82 e0       	ldi	r24, 0x02	; 2
     7c6:	5f de       	rcall	.-834    	; 0x486 <_Z6Buzzerhm>
     7c8:	80 91 62 09 	lds	r24, 0x0962	; 0x800962 <uidLength>
     7cc:	84 30       	cpi	r24, 0x04	; 4
     7ce:	09 f0       	breq	.+2      	; 0x7d2 <_Z14leggiTAG_Mezzob+0x6a>
     7d0:	8c c0       	rjmp	.+280    	; 0x8ea <_Z14leggiTAG_Mezzob+0x182>
     7d2:	86 e0       	ldi	r24, 0x06	; 6
     7d4:	ef e5       	ldi	r30, 0x5F	; 95
     7d6:	f1 e0       	ldi	r31, 0x01	; 1
     7d8:	de 01       	movw	r26, r28
     7da:	57 96       	adiw	r26, 0x17	; 23
     7dc:	01 90       	ld	r0, Z+
     7de:	0d 92       	st	X+, r0
     7e0:	8a 95       	dec	r24
     7e2:	e1 f7       	brne	.-8      	; 0x7dc <_Z14leggiTAG_Mezzob+0x74>
     7e4:	ce 01       	movw	r24, r28
     7e6:	47 96       	adiw	r24, 0x17	; 23
     7e8:	6c 01       	movw	r12, r24
     7ea:	e1 2c       	mov	r14, r1
     7ec:	04 e0       	ldi	r16, 0x04	; 4
     7ee:	10 e0       	ldi	r17, 0x00	; 0
     7f0:	20 e0       	ldi	r18, 0x00	; 0
     7f2:	30 e0       	ldi	r19, 0x00	; 0
     7f4:	44 e0       	ldi	r20, 0x04	; 4
     7f6:	6b e5       	ldi	r22, 0x5B	; 91
     7f8:	79 e0       	ldi	r23, 0x09	; 9
     7fa:	8b e2       	ldi	r24, 0x2B	; 43
     7fc:	99 e0       	ldi	r25, 0x09	; 9
     7fe:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_>
     802:	80 93 63 09 	sts	0x0963, r24	; 0x800963 <success>
     806:	88 23       	and	r24, r24
     808:	09 f4       	brne	.+2      	; 0x80c <_Z14leggiTAG_Mezzob+0xa4>
     80a:	5f c0       	rjmp	.+190    	; 0x8ca <_Z14leggiTAG_Mezzob+0x162>
     80c:	ff 20       	and	r15, r15
     80e:	99 f0       	breq	.+38     	; 0x836 <_Z14leggiTAG_Mezzob+0xce>
     810:	80 e1       	ldi	r24, 0x10	; 16
     812:	e4 ea       	ldi	r30, 0xA4	; 164
     814:	f7 e0       	ldi	r31, 0x07	; 7
     816:	de 01       	movw	r26, r28
     818:	11 96       	adiw	r26, 0x01	; 1
     81a:	01 90       	ld	r0, Z+
     81c:	0d 92       	st	X+, r0
     81e:	8a 95       	dec	r24
     820:	e1 f7       	brne	.-8      	; 0x81a <_Z14leggiTAG_Mezzob+0xb2>
     822:	ae 01       	movw	r20, r28
     824:	4f 5f       	subi	r20, 0xFF	; 255
     826:	5f 4f       	sbci	r21, 0xFF	; 255
     828:	64 e0       	ldi	r22, 0x04	; 4
     82a:	8b e2       	ldi	r24, 0x2B	; 43
     82c:	99 e0       	ldi	r25, 0x09	; 9
     82e:	0e 94 3c 18 	call	0x3078	; 0x3078 <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh>
     832:	80 93 63 09 	sts	0x0963, r24	; 0x800963 <success>
     836:	ae 01       	movw	r20, r28
     838:	4f 5f       	subi	r20, 0xFF	; 255
     83a:	5f 4f       	sbci	r21, 0xFF	; 255
     83c:	64 e0       	ldi	r22, 0x04	; 4
     83e:	8b e2       	ldi	r24, 0x2B	; 43
     840:	99 e0       	ldi	r25, 0x09	; 9
     842:	0e 94 09 18 	call	0x3012	; 0x3012 <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh>
     846:	80 93 63 09 	sts	0x0963, r24	; 0x800963 <success>
     84a:	88 23       	and	r24, r24
     84c:	89 f1       	breq	.+98     	; 0x8b0 <_Z14leggiTAG_Mezzob+0x148>
     84e:	6f e7       	ldi	r22, 0x7F	; 127
     850:	71 e0       	ldi	r23, 0x01	; 1
     852:	8f ec       	ldi	r24, 0xCF	; 207
     854:	9a e0       	ldi	r25, 0x0A	; 10
     856:	0e 94 0a 30 	call	0x6014	; 0x6014 <_ZN5Print7printlnEPKc>
     85a:	be 01       	movw	r22, r28
     85c:	6f 5f       	subi	r22, 0xFF	; 255
     85e:	7f 4f       	sbci	r23, 0xFF	; 255
     860:	ce 01       	movw	r24, r28
     862:	41 96       	adiw	r24, 0x11	; 17
     864:	0e 94 a0 32 	call	0x6540	; 0x6540 <_ZN6StringC1EPKc>
     868:	be 01       	movw	r22, r28
     86a:	6f 5e       	subi	r22, 0xEF	; 239
     86c:	7f 4f       	sbci	r23, 0xFF	; 255
     86e:	8f ec       	ldi	r24, 0xCF	; 207
     870:	9a e0       	ldi	r25, 0x0A	; 10
     872:	0e 94 fa 2f 	call	0x5ff4	; 0x5ff4 <_ZN5Print7printlnERK6String>
     876:	8d 89       	ldd	r24, Y+21	; 0x15
     878:	9e 89       	ldd	r25, Y+22	; 0x16
     87a:	06 97       	sbiw	r24, 0x06	; 6
     87c:	59 f4       	brne	.+22     	; 0x894 <_Z14leggiTAG_Mezzob+0x12c>
     87e:	be 01       	movw	r22, r28
     880:	6f 5e       	subi	r22, 0xEF	; 239
     882:	7f 4f       	sbci	r23, 0xFF	; 255
     884:	c5 01       	movw	r24, r10
     886:	0e 94 ef 32 	call	0x65de	; 0x65de <_ZN6StringC1EOS_>
     88a:	ce 01       	movw	r24, r28
     88c:	41 96       	adiw	r24, 0x11	; 17
     88e:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
     892:	37 c0       	rjmp	.+110    	; 0x902 <_Z14leggiTAG_Mezzob+0x19a>
     894:	9f ef       	ldi	r25, 0xFF	; 255
     896:	21 ee       	ldi	r18, 0xE1	; 225
     898:	84 e0       	ldi	r24, 0x04	; 4
     89a:	91 50       	subi	r25, 0x01	; 1
     89c:	20 40       	sbci	r18, 0x00	; 0
     89e:	80 40       	sbci	r24, 0x00	; 0
     8a0:	e1 f7       	brne	.-8      	; 0x89a <_Z14leggiTAG_Mezzob+0x132>
     8a2:	00 c0       	rjmp	.+0      	; 0x8a4 <_Z14leggiTAG_Mezzob+0x13c>
     8a4:	00 00       	nop
     8a6:	ce 01       	movw	r24, r28
     8a8:	41 96       	adiw	r24, 0x11	; 17
     8aa:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
     8ae:	1d c0       	rjmp	.+58     	; 0x8ea <_Z14leggiTAG_Mezzob+0x182>
     8b0:	82 e4       	ldi	r24, 0x42	; 66
     8b2:	99 e0       	ldi	r25, 0x09	; 9
     8b4:	0e 94 4f 27 	call	0x4e9e	; 0x4e9e <_ZN3LCD5clearEv>
     8b8:	41 e0       	ldi	r20, 0x01	; 1
     8ba:	60 e0       	ldi	r22, 0x00	; 0
     8bc:	82 e4       	ldi	r24, 0x42	; 66
     8be:	99 e0       	ldi	r25, 0x09	; 9
     8c0:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <_ZN3LCD9setCursorEhh>
     8c4:	6d e8       	ldi	r22, 0x8D	; 141
     8c6:	71 e0       	ldi	r23, 0x01	; 1
     8c8:	0c c0       	rjmp	.+24     	; 0x8e2 <_Z14leggiTAG_Mezzob+0x17a>
     8ca:	82 e4       	ldi	r24, 0x42	; 66
     8cc:	99 e0       	ldi	r25, 0x09	; 9
     8ce:	0e 94 4f 27 	call	0x4e9e	; 0x4e9e <_ZN3LCD5clearEv>
     8d2:	41 e0       	ldi	r20, 0x01	; 1
     8d4:	60 e0       	ldi	r22, 0x00	; 0
     8d6:	82 e4       	ldi	r24, 0x42	; 66
     8d8:	99 e0       	ldi	r25, 0x09	; 9
     8da:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <_ZN3LCD9setCursorEhh>
     8de:	67 e9       	ldi	r22, 0x97	; 151
     8e0:	71 e0       	ldi	r23, 0x01	; 1
     8e2:	82 e4       	ldi	r24, 0x42	; 66
     8e4:	99 e0       	ldi	r25, 0x09	; 9
     8e6:	0e 94 df 2f 	call	0x5fbe	; 0x5fbe <_ZN5Print5printEPKc>
     8ea:	60 e7       	ldi	r22, 0x70	; 112
     8ec:	71 e0       	ldi	r23, 0x01	; 1
     8ee:	8f ec       	ldi	r24, 0xCF	; 207
     8f0:	9a e0       	ldi	r25, 0x0A	; 10
     8f2:	0e 94 0a 30 	call	0x6014	; 0x6014 <_ZN5Print7printlnEPKc>
     8f6:	be 01       	movw	r22, r28
     8f8:	63 5e       	subi	r22, 0xE3	; 227
     8fa:	7f 4f       	sbci	r23, 0xFF	; 255
     8fc:	c5 01       	movw	r24, r10
     8fe:	0e 94 ef 32 	call	0x65de	; 0x65de <_ZN6StringC1EOS_>
     902:	ce 01       	movw	r24, r28
     904:	4d 96       	adiw	r24, 0x1d	; 29
     906:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
     90a:	c5 01       	movw	r24, r10
     90c:	a2 96       	adiw	r28, 0x22	; 34
     90e:	0f b6       	in	r0, 0x3f	; 63
     910:	f8 94       	cli
     912:	de bf       	out	0x3e, r29	; 62
     914:	0f be       	out	0x3f, r0	; 63
     916:	cd bf       	out	0x3d, r28	; 61
     918:	df 91       	pop	r29
     91a:	cf 91       	pop	r28
     91c:	1f 91       	pop	r17
     91e:	0f 91       	pop	r16
     920:	ff 90       	pop	r15
     922:	ef 90       	pop	r14
     924:	df 90       	pop	r13
     926:	cf 90       	pop	r12
     928:	bf 90       	pop	r11
     92a:	af 90       	pop	r10
     92c:	08 95       	ret

0000092e <_Z14GetCodeRfidATev>:
     92e:	cf 92       	push	r12
     930:	df 92       	push	r13
     932:	ef 92       	push	r14
     934:	ff 92       	push	r15
     936:	0f 93       	push	r16
     938:	1f 93       	push	r17
     93a:	cf 93       	push	r28
     93c:	df 93       	push	r29
     93e:	cd b7       	in	r28, 0x3d	; 61
     940:	de b7       	in	r29, 0x3e	; 62
     942:	64 97       	sbiw	r28, 0x14	; 20
     944:	0f b6       	in	r0, 0x3f	; 63
     946:	f8 94       	cli
     948:	de bf       	out	0x3e, r29	; 62
     94a:	0f be       	out	0x3f, r0	; 63
     94c:	cd bf       	out	0x3d, r28	; 61
     94e:	7c 01       	movw	r14, r24
     950:	ce 01       	movw	r24, r28
     952:	01 96       	adiw	r24, 0x01	; 1
     954:	6c 01       	movw	r12, r24
     956:	87 e0       	ldi	r24, 0x07	; 7
     958:	f6 01       	movw	r30, r12
     95a:	11 92       	st	Z+, r1
     95c:	8a 95       	dec	r24
     95e:	e9 f7       	brne	.-6      	; 0x95a <_Z14GetCodeRfidATev+0x2c>
     960:	6f e9       	ldi	r22, 0x9F	; 159
     962:	71 e0       	ldi	r23, 0x01	; 1
     964:	c7 01       	movw	r24, r14
     966:	0e 94 a0 32 	call	0x6540	; 0x6540 <_ZN6StringC1EPKc>
     96a:	00 e0       	ldi	r16, 0x00	; 0
     96c:	10 e0       	ldi	r17, 0x00	; 0
     96e:	9e 01       	movw	r18, r28
     970:	2c 5e       	subi	r18, 0xEC	; 236
     972:	3f 4f       	sbci	r19, 0xFF	; 255
     974:	a6 01       	movw	r20, r12
     976:	60 e0       	ldi	r22, 0x00	; 0
     978:	8b e2       	ldi	r24, 0x2B	; 43
     97a:	99 e0       	ldi	r25, 0x09	; 9
     97c:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j>
     980:	88 23       	and	r24, r24
     982:	59 f1       	breq	.+86     	; 0x9da <_Z14GetCodeRfidATev+0xac>
     984:	0c 89       	ldd	r16, Y+20	; 0x14
     986:	10 e0       	ldi	r17, 0x00	; 0
     988:	20 e0       	ldi	r18, 0x00	; 0
     98a:	30 e0       	ldi	r19, 0x00	; 0
     98c:	a6 01       	movw	r20, r12
     98e:	6b e2       	ldi	r22, 0x2B	; 43
     990:	79 e0       	ldi	r23, 0x09	; 9
     992:	ce 01       	movw	r24, r28
     994:	0e 96       	adiw	r24, 0x0e	; 14
     996:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <_ZN9NFC_PN53210GetHexCodeEPKhm>
     99a:	ce 01       	movw	r24, r28
     99c:	0e 96       	adiw	r24, 0x0e	; 14
     99e:	0e 94 0a 35 	call	0x6a14	; 0x6a14 <_ZN6String4trimEv>
     9a2:	28 e0       	ldi	r18, 0x08	; 8
     9a4:	30 e0       	ldi	r19, 0x00	; 0
     9a6:	40 e0       	ldi	r20, 0x00	; 0
     9a8:	50 e0       	ldi	r21, 0x00	; 0
     9aa:	be 01       	movw	r22, r28
     9ac:	62 5f       	subi	r22, 0xF2	; 242
     9ae:	7f 4f       	sbci	r23, 0xFF	; 255
     9b0:	ce 01       	movw	r24, r28
     9b2:	08 96       	adiw	r24, 0x08	; 8
     9b4:	0e 94 c7 34 	call	0x698e	; 0x698e <_ZNK6String9substringEjj>
     9b8:	be 01       	movw	r22, r28
     9ba:	68 5f       	subi	r22, 0xF8	; 248
     9bc:	7f 4f       	sbci	r23, 0xFF	; 255
     9be:	c7 01       	movw	r24, r14
     9c0:	0e 94 14 33 	call	0x6628	; 0x6628 <_ZN6StringaSEOS_>
     9c4:	ce 01       	movw	r24, r28
     9c6:	08 96       	adiw	r24, 0x08	; 8
     9c8:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	80 93 5a 09 	sts	0x095A, r24	; 0x80095a <alreadyTimbrata>
     9d2:	ce 01       	movw	r24, r28
     9d4:	0e 96       	adiw	r24, 0x0e	; 14
     9d6:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
     9da:	c7 01       	movw	r24, r14
     9dc:	64 96       	adiw	r28, 0x14	; 20
     9de:	0f b6       	in	r0, 0x3f	; 63
     9e0:	f8 94       	cli
     9e2:	de bf       	out	0x3e, r29	; 62
     9e4:	0f be       	out	0x3f, r0	; 63
     9e6:	cd bf       	out	0x3d, r28	; 61
     9e8:	df 91       	pop	r29
     9ea:	cf 91       	pop	r28
     9ec:	1f 91       	pop	r17
     9ee:	0f 91       	pop	r16
     9f0:	ff 90       	pop	r15
     9f2:	ef 90       	pop	r14
     9f4:	df 90       	pop	r13
     9f6:	cf 90       	pop	r12
     9f8:	08 95       	ret

000009fa <_Z19GetHTTPResponseCode6String>:
     9fa:	ef 92       	push	r14
     9fc:	ff 92       	push	r15
     9fe:	0f 93       	push	r16
     a00:	1f 93       	push	r17
     a02:	cf 93       	push	r28
     a04:	df 93       	push	r29
     a06:	cd b7       	in	r28, 0x3d	; 61
     a08:	de b7       	in	r29, 0x3e	; 62
     a0a:	2c 97       	sbiw	r28, 0x0c	; 12
     a0c:	0f b6       	in	r0, 0x3f	; 63
     a0e:	f8 94       	cli
     a10:	de bf       	out	0x3e, r29	; 62
     a12:	0f be       	out	0x3f, r0	; 63
     a14:	cd bf       	out	0x3d, r28	; 61
     a16:	8c 01       	movw	r16, r24
     a18:	7b 01       	movw	r14, r22
     a1a:	66 ea       	ldi	r22, 0xA6	; 166
     a1c:	71 e0       	ldi	r23, 0x01	; 1
     a1e:	ce 01       	movw	r24, r28
     a20:	07 96       	adiw	r24, 0x07	; 7
     a22:	0e 94 a0 32 	call	0x6540	; 0x6540 <_ZN6StringC1EPKc>
     a26:	f3 dc       	rcall	.-1562   	; 0x40e <_Z9printLinev>
     a28:	6e ea       	ldi	r22, 0xAE	; 174
     a2a:	71 e0       	ldi	r23, 0x01	; 1
     a2c:	8f ec       	ldi	r24, 0xCF	; 207
     a2e:	9a e0       	ldi	r25, 0x0A	; 10
     a30:	0e 94 0a 30 	call	0x6014	; 0x6014 <_ZN5Print7printlnEPKc>
     a34:	20 91 47 01 	lds	r18, 0x0147	; 0x800147 <HTTP_len_response>
     a38:	30 91 48 01 	lds	r19, 0x0148	; 0x800148 <HTTP_len_response+0x1>
     a3c:	f7 01       	movw	r30, r14
     a3e:	84 81       	ldd	r24, Z+4	; 0x04
     a40:	95 81       	ldd	r25, Z+5	; 0x05
     a42:	28 17       	cp	r18, r24
     a44:	39 07       	cpc	r19, r25
     a46:	a9 f4       	brne	.+42     	; 0xa72 <_Z19GetHTTPResponseCode6String+0x78>
     a48:	a9 01       	movw	r20, r18
     a4a:	43 50       	subi	r20, 0x03	; 3
     a4c:	51 09       	sbc	r21, r1
     a4e:	b7 01       	movw	r22, r14
     a50:	ce 01       	movw	r24, r28
     a52:	01 96       	adiw	r24, 0x01	; 1
     a54:	0e 94 c7 34 	call	0x698e	; 0x698e <_ZNK6String9substringEjj>
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	fd dc       	rcall	.-1542   	; 0x456 <_Z4passb>
     a5c:	be 01       	movw	r22, r28
     a5e:	6f 5f       	subi	r22, 0xFF	; 255
     a60:	7f 4f       	sbci	r23, 0xFF	; 255
     a62:	c8 01       	movw	r24, r16
     a64:	0e 94 ef 32 	call	0x65de	; 0x65de <_ZN6StringC1EOS_>
     a68:	ce 01       	movw	r24, r28
     a6a:	01 96       	adiw	r24, 0x01	; 1
     a6c:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
     a70:	09 c0       	rjmp	.+18     	; 0xa84 <_Z19GetHTTPResponseCode6String+0x8a>
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	f0 dc       	rcall	.-1568   	; 0x456 <_Z4passb>
     a76:	cb dc       	rcall	.-1642   	; 0x40e <_Z9printLinev>
     a78:	be 01       	movw	r22, r28
     a7a:	69 5f       	subi	r22, 0xF9	; 249
     a7c:	7f 4f       	sbci	r23, 0xFF	; 255
     a7e:	c8 01       	movw	r24, r16
     a80:	0e 94 ef 32 	call	0x65de	; 0x65de <_ZN6StringC1EOS_>
     a84:	ce 01       	movw	r24, r28
     a86:	07 96       	adiw	r24, 0x07	; 7
     a88:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
     a8c:	c8 01       	movw	r24, r16
     a8e:	2c 96       	adiw	r28, 0x0c	; 12
     a90:	0f b6       	in	r0, 0x3f	; 63
     a92:	f8 94       	cli
     a94:	de bf       	out	0x3e, r29	; 62
     a96:	0f be       	out	0x3f, r0	; 63
     a98:	cd bf       	out	0x3d, r28	; 61
     a9a:	df 91       	pop	r29
     a9c:	cf 91       	pop	r28
     a9e:	1f 91       	pop	r17
     aa0:	0f 91       	pop	r16
     aa2:	ff 90       	pop	r15
     aa4:	ef 90       	pop	r14
     aa6:	08 95       	ret

00000aa8 <_Z17PostErogazioneGACiPc14EthernetClient6String>:
     aa8:	af 92       	push	r10
     aaa:	bf 92       	push	r11
     aac:	cf 92       	push	r12
     aae:	df 92       	push	r13
     ab0:	ef 92       	push	r14
     ab2:	ff 92       	push	r15
     ab4:	0f 93       	push	r16
     ab6:	1f 93       	push	r17
     ab8:	cf 93       	push	r28
     aba:	df 93       	push	r29
     abc:	cd b7       	in	r28, 0x3d	; 61
     abe:	de b7       	in	r29, 0x3e	; 62
     ac0:	2c 97       	sbiw	r28, 0x0c	; 12
     ac2:	0f b6       	in	r0, 0x3f	; 63
     ac4:	f8 94       	cli
     ac6:	de bf       	out	0x3e, r29	; 62
     ac8:	0f be       	out	0x3f, r0	; 63
     aca:	cd bf       	out	0x3d, r28	; 61
     acc:	5c 01       	movw	r10, r24
     ace:	6b 01       	movw	r12, r22
     ad0:	8a 01       	movw	r16, r20
     ad2:	79 01       	movw	r14, r18
     ad4:	9c dc       	rcall	.-1736   	; 0x40e <_Z9printLinev>
     ad6:	81 e0       	ldi	r24, 0x01	; 1
     ad8:	ad dc       	rcall	.-1702   	; 0x434 <_Z8printTabh>
     ada:	61 ea       	ldi	r22, 0xA1	; 161
     adc:	73 e0       	ldi	r23, 0x03	; 3
     ade:	8f ec       	ldi	r24, 0xCF	; 207
     ae0:	9a e0       	ldi	r25, 0x0A	; 10
     ae2:	0e 94 df 2f 	call	0x5fbe	; 0x5fbe <_ZN5Print5printEPKc>
     ae6:	a5 01       	movw	r20, r10
     ae8:	b6 01       	movw	r22, r12
     aea:	c8 01       	movw	r24, r16
     aec:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <_ZN14EthernetClient7connectEPKcj>
     af0:	89 2b       	or	r24, r25
     af2:	09 f4       	brne	.+2      	; 0xaf6 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x4e>
     af4:	b9 c0       	rjmp	.+370    	; 0xc68 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x1c0>
     af6:	2f ef       	ldi	r18, 0xFF	; 255
     af8:	81 ee       	ldi	r24, 0xE1	; 225
     afa:	94 e0       	ldi	r25, 0x04	; 4
     afc:	21 50       	subi	r18, 0x01	; 1
     afe:	80 40       	sbci	r24, 0x00	; 0
     b00:	90 40       	sbci	r25, 0x00	; 0
     b02:	e1 f7       	brne	.-8      	; 0xafc <_Z17PostErogazioneGACiPc14EthernetClient6String+0x54>
     b04:	00 c0       	rjmp	.+0      	; 0xb06 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x5e>
     b06:	00 00       	nop
     b08:	66 e4       	ldi	r22, 0x46	; 70
     b0a:	74 e0       	ldi	r23, 0x04	; 4
     b0c:	8f e1       	ldi	r24, 0x1F	; 31
     b0e:	99 e0       	ldi	r25, 0x09	; 9
     b10:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>
     b14:	b6 01       	movw	r22, r12
     b16:	ce 01       	movw	r24, r28
     b18:	07 96       	adiw	r24, 0x07	; 7
     b1a:	0e 94 a0 32 	call	0x6540	; 0x6540 <_ZN6StringC1EPKc>
     b1e:	68 e6       	ldi	r22, 0x68	; 104
     b20:	74 e0       	ldi	r23, 0x04	; 4
     b22:	ce 01       	movw	r24, r28
     b24:	01 96       	adiw	r24, 0x01	; 1
     b26:	0e 94 a0 32 	call	0x6540	; 0x6540 <_ZN6StringC1EPKc>
     b2a:	be 01       	movw	r22, r28
     b2c:	69 5f       	subi	r22, 0xF9	; 249
     b2e:	7f 4f       	sbci	r23, 0xFF	; 255
     b30:	ce 01       	movw	r24, r28
     b32:	01 96       	adiw	r24, 0x01	; 1
     b34:	0e 94 75 34 	call	0x68ea	; 0x68ea <_ZplRK15StringSumHelperRK6String>
     b38:	bc 01       	movw	r22, r24
     b3a:	8f e1       	ldi	r24, 0x1F	; 31
     b3c:	99 e0       	ldi	r25, 0x09	; 9
     b3e:	0e 94 4f 34 	call	0x689e	; 0x689e <_ZN6String6concatERKS_>
     b42:	ce 01       	movw	r24, r28
     b44:	01 96       	adiw	r24, 0x01	; 1
     b46:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
     b4a:	ce 01       	movw	r24, r28
     b4c:	07 96       	adiw	r24, 0x07	; 7
     b4e:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
     b52:	6f e3       	ldi	r22, 0x3F	; 63
     b54:	74 e0       	ldi	r23, 0x04	; 4
     b56:	8f e1       	ldi	r24, 0x1F	; 31
     b58:	99 e0       	ldi	r25, 0x09	; 9
     b5a:	0e 94 55 34 	call	0x68aa	; 0x68aa <_ZN6String6concatEPKc>
     b5e:	6e e9       	ldi	r22, 0x9E	; 158
     b60:	72 e0       	ldi	r23, 0x02	; 2
     b62:	8f e1       	ldi	r24, 0x1F	; 31
     b64:	99 e0       	ldi	r25, 0x09	; 9
     b66:	0e 94 55 34 	call	0x68aa	; 0x68aa <_ZN6String6concatEPKc>
     b6a:	6f e3       	ldi	r22, 0x3F	; 63
     b6c:	74 e0       	ldi	r23, 0x04	; 4
     b6e:	8f e1       	ldi	r24, 0x1F	; 31
     b70:	99 e0       	ldi	r25, 0x09	; 9
     b72:	0e 94 55 34 	call	0x68aa	; 0x68aa <_ZN6String6concatEPKc>
     b76:	68 e4       	ldi	r22, 0x48	; 72
     b78:	73 e0       	ldi	r23, 0x03	; 3
     b7a:	8f e1       	ldi	r24, 0x1F	; 31
     b7c:	99 e0       	ldi	r25, 0x09	; 9
     b7e:	0e 94 55 34 	call	0x68aa	; 0x68aa <_ZN6String6concatEPKc>
     b82:	6f e3       	ldi	r22, 0x3F	; 63
     b84:	74 e0       	ldi	r23, 0x04	; 4
     b86:	8f e1       	ldi	r24, 0x1F	; 31
     b88:	99 e0       	ldi	r25, 0x09	; 9
     b8a:	0e 94 55 34 	call	0x68aa	; 0x68aa <_ZN6String6concatEPKc>
     b8e:	6e e0       	ldi	r22, 0x0E	; 14
     b90:	74 e0       	ldi	r23, 0x04	; 4
     b92:	8f e1       	ldi	r24, 0x1F	; 31
     b94:	99 e0       	ldi	r25, 0x09	; 9
     b96:	0e 94 55 34 	call	0x68aa	; 0x68aa <_ZN6String6concatEPKc>
     b9a:	6f e3       	ldi	r22, 0x3F	; 63
     b9c:	74 e0       	ldi	r23, 0x04	; 4
     b9e:	8f e1       	ldi	r24, 0x1F	; 31
     ba0:	99 e0       	ldi	r25, 0x09	; 9
     ba2:	0e 94 55 34 	call	0x68aa	; 0x68aa <_ZN6String6concatEPKc>
     ba6:	f7 01       	movw	r30, r14
     ba8:	64 81       	ldd	r22, Z+4	; 0x04
     baa:	75 81       	ldd	r23, Z+5	; 0x05
     bac:	6b 5e       	subi	r22, 0xEB	; 235
     bae:	7f 4f       	sbci	r23, 0xFF	; 255
     bb0:	4a e0       	ldi	r20, 0x0A	; 10
     bb2:	ce 01       	movw	r24, r28
     bb4:	07 96       	adiw	r24, 0x07	; 7
     bb6:	0e 94 a0 33 	call	0x6740	; 0x6740 <_ZN6StringC1Ejh>
     bba:	6a e1       	ldi	r22, 0x1A	; 26
     bbc:	74 e0       	ldi	r23, 0x04	; 4
     bbe:	ce 01       	movw	r24, r28
     bc0:	01 96       	adiw	r24, 0x01	; 1
     bc2:	0e 94 a0 32 	call	0x6540	; 0x6540 <_ZN6StringC1EPKc>
     bc6:	be 01       	movw	r22, r28
     bc8:	69 5f       	subi	r22, 0xF9	; 249
     bca:	7f 4f       	sbci	r23, 0xFF	; 255
     bcc:	ce 01       	movw	r24, r28
     bce:	01 96       	adiw	r24, 0x01	; 1
     bd0:	0e 94 75 34 	call	0x68ea	; 0x68ea <_ZplRK15StringSumHelperRK6String>
     bd4:	bc 01       	movw	r22, r24
     bd6:	8f e1       	ldi	r24, 0x1F	; 31
     bd8:	99 e0       	ldi	r25, 0x09	; 9
     bda:	0e 94 4f 34 	call	0x689e	; 0x689e <_ZN6String6concatERKS_>
     bde:	ce 01       	movw	r24, r28
     be0:	01 96       	adiw	r24, 0x01	; 1
     be2:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
     be6:	ce 01       	movw	r24, r28
     be8:	07 96       	adiw	r24, 0x07	; 7
     bea:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
     bee:	6f e3       	ldi	r22, 0x3F	; 63
     bf0:	74 e0       	ldi	r23, 0x04	; 4
     bf2:	8f e1       	ldi	r24, 0x1F	; 31
     bf4:	99 e0       	ldi	r25, 0x09	; 9
     bf6:	0e 94 55 34 	call	0x68aa	; 0x68aa <_ZN6String6concatEPKc>
     bfa:	6f e3       	ldi	r22, 0x3F	; 63
     bfc:	74 e0       	ldi	r23, 0x04	; 4
     bfe:	8f e1       	ldi	r24, 0x1F	; 31
     c00:	99 e0       	ldi	r25, 0x09	; 9
     c02:	0e 94 55 34 	call	0x68aa	; 0x68aa <_ZN6String6concatEPKc>
     c06:	b7 01       	movw	r22, r14
     c08:	ce 01       	movw	r24, r28
     c0a:	01 96       	adiw	r24, 0x01	; 1
     c0c:	0e 94 0c 33 	call	0x6618	; 0x6618 <_ZN6StringC1ERKS_>
     c10:	6e e3       	ldi	r22, 0x3E	; 62
     c12:	74 e0       	ldi	r23, 0x04	; 4
     c14:	ce 01       	movw	r24, r28
     c16:	01 96       	adiw	r24, 0x01	; 1
     c18:	0e 94 86 34 	call	0x690c	; 0x690c <_ZplRK15StringSumHelperPKc>
     c1c:	bc 01       	movw	r22, r24
     c1e:	8f e1       	ldi	r24, 0x1F	; 31
     c20:	99 e0       	ldi	r25, 0x09	; 9
     c22:	0e 94 4f 34 	call	0x689e	; 0x689e <_ZN6String6concatERKS_>
     c26:	ce 01       	movw	r24, r28
     c28:	01 96       	adiw	r24, 0x01	; 1
     c2a:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
     c2e:	6f e1       	ldi	r22, 0x1F	; 31
     c30:	79 e0       	ldi	r23, 0x09	; 9
     c32:	8f ec       	ldi	r24, 0xCF	; 207
     c34:	9a e0       	ldi	r25, 0x0A	; 10
     c36:	0e 94 fa 2f 	call	0x5ff4	; 0x5ff4 <_ZN5Print7printlnERK6String>
     c3a:	6f e1       	ldi	r22, 0x1F	; 31
     c3c:	79 e0       	ldi	r23, 0x09	; 9
     c3e:	c8 01       	movw	r24, r16
     c40:	0e 94 d1 2f 	call	0x5fa2	; 0x5fa2 <_ZN5Print5printERK6String>
     c44:	ff ef       	ldi	r31, 0xFF	; 255
     c46:	27 ee       	ldi	r18, 0xE7	; 231
     c48:	83 e0       	ldi	r24, 0x03	; 3
     c4a:	f1 50       	subi	r31, 0x01	; 1
     c4c:	20 40       	sbci	r18, 0x00	; 0
     c4e:	80 40       	sbci	r24, 0x00	; 0
     c50:	e1 f7       	brne	.-8      	; 0xc4a <_Z17PostErogazioneGACiPc14EthernetClient6String+0x1a2>
     c52:	00 c0       	rjmp	.+0      	; 0xc54 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x1ac>
     c54:	00 00       	nop
     c56:	67 e6       	ldi	r22, 0x67	; 103
     c58:	73 e0       	ldi	r23, 0x03	; 3
     c5a:	c8 01       	movw	r24, r16
     c5c:	0e 94 0a 30 	call	0x6014	; 0x6014 <_ZN5Print7printlnEPKc>
     c60:	c8 01       	movw	r24, r16
     c62:	0e 94 e7 2f 	call	0x5fce	; 0x5fce <_ZN5Print7printlnEv>
     c66:	25 c0       	rjmp	.+74     	; 0xcb2 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x20a>
     c68:	82 e4       	ldi	r24, 0x42	; 66
     c6a:	99 e0       	ldi	r25, 0x09	; 9
     c6c:	0e 94 4f 27 	call	0x4e9e	; 0x4e9e <_ZN3LCD5clearEv>
     c70:	41 e0       	ldi	r20, 0x01	; 1
     c72:	60 e0       	ldi	r22, 0x00	; 0
     c74:	82 e4       	ldi	r24, 0x42	; 66
     c76:	99 e0       	ldi	r25, 0x09	; 9
     c78:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <_ZN3LCD9setCursorEhh>
     c7c:	69 e7       	ldi	r22, 0x79	; 121
     c7e:	73 e0       	ldi	r23, 0x03	; 3
     c80:	82 e4       	ldi	r24, 0x42	; 66
     c82:	99 e0       	ldi	r25, 0x09	; 9
     c84:	0e 94 df 2f 	call	0x5fbe	; 0x5fbe <_ZN5Print5printEPKc>
     c88:	43 e0       	ldi	r20, 0x03	; 3
     c8a:	60 e0       	ldi	r22, 0x00	; 0
     c8c:	82 e4       	ldi	r24, 0x42	; 66
     c8e:	99 e0       	ldi	r25, 0x09	; 9
     c90:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <_ZN3LCD9setCursorEhh>
     c94:	6e e8       	ldi	r22, 0x8E	; 142
     c96:	73 e0       	ldi	r23, 0x03	; 3
     c98:	82 e4       	ldi	r24, 0x42	; 66
     c9a:	99 e0       	ldi	r25, 0x09	; 9
     c9c:	0e 94 df 2f 	call	0x5fbe	; 0x5fbe <_ZN5Print5printEPKc>
     ca0:	9f ef       	ldi	r25, 0xFF	; 255
     ca2:	e3 ed       	ldi	r30, 0xD3	; 211
     ca4:	f0 e3       	ldi	r31, 0x30	; 48
     ca6:	91 50       	subi	r25, 0x01	; 1
     ca8:	e0 40       	sbci	r30, 0x00	; 0
     caa:	f0 40       	sbci	r31, 0x00	; 0
     cac:	e1 f7       	brne	.-8      	; 0xca6 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x1fe>
     cae:	00 c0       	rjmp	.+0      	; 0xcb0 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x208>
     cb0:	00 00       	nop
     cb2:	2f ef       	ldi	r18, 0xFF	; 255
     cb4:	81 ee       	ldi	r24, 0xE1	; 225
     cb6:	94 e0       	ldi	r25, 0x04	; 4
     cb8:	21 50       	subi	r18, 0x01	; 1
     cba:	80 40       	sbci	r24, 0x00	; 0
     cbc:	90 40       	sbci	r25, 0x00	; 0
     cbe:	e1 f7       	brne	.-8      	; 0xcb8 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x210>
     cc0:	00 c0       	rjmp	.+0      	; 0xcc2 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x21a>
     cc2:	00 00       	nop
     cc4:	f1 2c       	mov	r15, r1
     cc6:	c8 01       	movw	r24, r16
     cc8:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <_ZN14EthernetClient9availableEv>
     ccc:	89 2b       	or	r24, r25
     cce:	09 f4       	brne	.+2      	; 0xcd2 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x22a>
     cd0:	56 c0       	rjmp	.+172    	; 0xd7e <_Z17PostErogazioneGACiPc14EthernetClient6String+0x2d6>
     cd2:	c8 01       	movw	r24, r16
     cd4:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <_ZN14EthernetClient4readEv>
     cd8:	e8 2e       	mov	r14, r24
     cda:	63 e1       	ldi	r22, 0x13	; 19
     cdc:	79 e0       	ldi	r23, 0x09	; 9
     cde:	ce 01       	movw	r24, r28
     ce0:	01 96       	adiw	r24, 0x01	; 1
     ce2:	0e 94 0c 33 	call	0x6618	; 0x6618 <_ZN6StringC1ERKS_>
     ce6:	6e 2d       	mov	r22, r14
     ce8:	ce 01       	movw	r24, r28
     cea:	01 96       	adiw	r24, 0x01	; 1
     cec:	0e 94 9d 34 	call	0x693a	; 0x693a <_ZplRK15StringSumHelperc>
     cf0:	bc 01       	movw	r22, r24
     cf2:	83 e1       	ldi	r24, 0x13	; 19
     cf4:	99 e0       	ldi	r25, 0x09	; 9
     cf6:	0e 94 f7 32 	call	0x65ee	; 0x65ee <_ZN6StringaSERKS_>
     cfa:	ce 01       	movw	r24, r28
     cfc:	01 96       	adiw	r24, 0x01	; 1
     cfe:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
     d02:	20 91 47 01 	lds	r18, 0x0147	; 0x800147 <HTTP_len_response>
     d06:	30 91 48 01 	lds	r19, 0x0148	; 0x800148 <HTTP_len_response+0x1>
     d0a:	80 91 17 09 	lds	r24, 0x0917	; 0x800917 <RispostaHTTP+0x4>
     d0e:	90 91 18 09 	lds	r25, 0x0918	; 0x800918 <RispostaHTTP+0x5>
     d12:	28 17       	cp	r18, r24
     d14:	39 07       	cpc	r19, r25
     d16:	b9 f6       	brne	.-82     	; 0xcc6 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x21e>
     d18:	63 e1       	ldi	r22, 0x13	; 19
     d1a:	79 e0       	ldi	r23, 0x09	; 9
     d1c:	ce 01       	movw	r24, r28
     d1e:	01 96       	adiw	r24, 0x01	; 1
     d20:	0e 94 0c 33 	call	0x6618	; 0x6618 <_ZN6StringC1ERKS_>
     d24:	be 01       	movw	r22, r28
     d26:	6f 5f       	subi	r22, 0xFF	; 255
     d28:	7f 4f       	sbci	r23, 0xFF	; 255
     d2a:	ce 01       	movw	r24, r28
     d2c:	07 96       	adiw	r24, 0x07	; 7
     d2e:	65 de       	rcall	.-822    	; 0x9fa <_Z19GetHTTPResponseCode6String>
     d30:	ce 01       	movw	r24, r28
     d32:	01 96       	adiw	r24, 0x01	; 1
     d34:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
     d38:	ef ef       	ldi	r30, 0xFF	; 255
     d3a:	f7 ee       	ldi	r31, 0xE7	; 231
     d3c:	23 e0       	ldi	r18, 0x03	; 3
     d3e:	e1 50       	subi	r30, 0x01	; 1
     d40:	f0 40       	sbci	r31, 0x00	; 0
     d42:	20 40       	sbci	r18, 0x00	; 0
     d44:	e1 f7       	brne	.-8      	; 0xd3e <_Z17PostErogazioneGACiPc14EthernetClient6String+0x296>
     d46:	00 c0       	rjmp	.+0      	; 0xd48 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x2a0>
     d48:	00 00       	nop
     d4a:	6d e9       	ldi	r22, 0x9D	; 157
     d4c:	73 e0       	ldi	r23, 0x03	; 3
     d4e:	ce 01       	movw	r24, r28
     d50:	07 96       	adiw	r24, 0x07	; 7
     d52:	0e 94 a9 34 	call	0x6952	; 0x6952 <_ZNK6String6equalsEPKc>
     d56:	88 23       	and	r24, r24
     d58:	21 f0       	breq	.+8      	; 0xd62 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x2ba>
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	7c db       	rcall	.-2312   	; 0x456 <_Z4passb>
     d5e:	ff 24       	eor	r15, r15
     d60:	f3 94       	inc	r15
     d62:	8f ef       	ldi	r24, 0xFF	; 255
     d64:	97 ee       	ldi	r25, 0xE7	; 231
     d66:	e3 e0       	ldi	r30, 0x03	; 3
     d68:	81 50       	subi	r24, 0x01	; 1
     d6a:	90 40       	sbci	r25, 0x00	; 0
     d6c:	e0 40       	sbci	r30, 0x00	; 0
     d6e:	e1 f7       	brne	.-8      	; 0xd68 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x2c0>
     d70:	00 c0       	rjmp	.+0      	; 0xd72 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x2ca>
     d72:	00 00       	nop
     d74:	ce 01       	movw	r24, r28
     d76:	07 96       	adiw	r24, 0x07	; 7
     d78:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
     d7c:	a4 cf       	rjmp	.-184    	; 0xcc6 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x21e>
     d7e:	47 db       	rcall	.-2418   	; 0x40e <_Z9printLinev>
     d80:	ff ef       	ldi	r31, 0xFF	; 255
     d82:	20 e7       	ldi	r18, 0x70	; 112
     d84:	82 e0       	ldi	r24, 0x02	; 2
     d86:	f1 50       	subi	r31, 0x01	; 1
     d88:	20 40       	sbci	r18, 0x00	; 0
     d8a:	80 40       	sbci	r24, 0x00	; 0
     d8c:	e1 f7       	brne	.-8      	; 0xd86 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x2de>
     d8e:	00 c0       	rjmp	.+0      	; 0xd90 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x2e8>
     d90:	00 00       	nop
     d92:	8f 2d       	mov	r24, r15
     d94:	2c 96       	adiw	r28, 0x0c	; 12
     d96:	0f b6       	in	r0, 0x3f	; 63
     d98:	f8 94       	cli
     d9a:	de bf       	out	0x3e, r29	; 62
     d9c:	0f be       	out	0x3f, r0	; 63
     d9e:	cd bf       	out	0x3d, r28	; 61
     da0:	df 91       	pop	r29
     da2:	cf 91       	pop	r28
     da4:	1f 91       	pop	r17
     da6:	0f 91       	pop	r16
     da8:	ff 90       	pop	r15
     daa:	ef 90       	pop	r14
     dac:	df 90       	pop	r13
     dae:	cf 90       	pop	r12
     db0:	bf 90       	pop	r11
     db2:	af 90       	pop	r10
     db4:	08 95       	ret

00000db6 <_Z15abilitaPulsantiv>:
     db6:	57 98       	cbi	0x0a, 7	; 10
     db8:	56 98       	cbi	0x0a, 6	; 10
     dba:	88 e0       	ldi	r24, 0x08	; 8
     dbc:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
     dc0:	80 ec       	ldi	r24, 0xC0	; 192
     dc2:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
     dc6:	78 94       	sei
     dc8:	08 95       	ret

00000dca <_Z22abilitaContattiPistolav>:
     dca:	09 98       	cbi	0x01, 1	; 1
     dcc:	0a 98       	cbi	0x01, 2	; 1
     dce:	08 95       	ret

00000dd0 <_Z13abilitaPulserc>:
     dd0:	91 e0       	ldi	r25, 0x01	; 1
     dd2:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
     dd6:	84 34       	cpi	r24, 0x44	; 68
     dd8:	19 f4       	brne	.+6      	; 0xde0 <_Z13abilitaPulserc+0x10>
     dda:	0d 98       	cbi	0x01, 5	; 1
     ddc:	80 e2       	ldi	r24, 0x20	; 32
     dde:	02 c0       	rjmp	.+4      	; 0xde4 <_Z13abilitaPulserc+0x14>
     de0:	0e 98       	cbi	0x01, 6	; 1
     de2:	80 e4       	ldi	r24, 0x40	; 64
     de4:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
     de8:	78 94       	sei
     dea:	08 95       	ret

00000dec <_Z14impulsiToLitrii>:
    _delay_ms(4);
  }
}

double impulsiToLitri(int P_impulsi)
{
     dec:	cf 92       	push	r12
     dee:	df 92       	push	r13
     df0:	ef 92       	push	r14
     df2:	ff 92       	push	r15
  //double imp = (double)(P_impulsi-1);
  double imp = (double)(P_impulsi);
     df4:	bc 01       	movw	r22, r24
     df6:	99 0f       	add	r25, r25
     df8:	88 0b       	sbc	r24, r24
     dfa:	99 0b       	sbc	r25, r25
     dfc:	0e 94 c4 2d 	call	0x5b88	; 0x5b88 <__floatsisf>
     e00:	6b 01       	movw	r12, r22
     e02:	7c 01       	movw	r14, r24
  if (imp < 0) {imp = 0;}
     e04:	20 e0       	ldi	r18, 0x00	; 0
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	a9 01       	movw	r20, r18
     e0a:	0e 94 56 2d 	call	0x5aac	; 0x5aac <__cmpsf2>
     e0e:	87 ff       	sbrs	r24, 7
     e10:	03 c0       	rjmp	.+6      	; 0xe18 <_Z14impulsiToLitrii+0x2c>
     e12:	c1 2c       	mov	r12, r1
     e14:	d1 2c       	mov	r13, r1
     e16:	76 01       	movw	r14, r12
  double lt = (imp / ImpulsiLitro);
  double totale = lt;
  return totale;
     e18:	60 91 45 01 	lds	r22, 0x0145	; 0x800145 <ImpulsiLitro>
     e1c:	70 91 46 01 	lds	r23, 0x0146	; 0x800146 <ImpulsiLitro+0x1>
     e20:	07 2e       	mov	r0, r23
     e22:	00 0c       	add	r0, r0
     e24:	88 0b       	sbc	r24, r24
     e26:	99 0b       	sbc	r25, r25
     e28:	0e 94 c4 2d 	call	0x5b88	; 0x5b88 <__floatsisf>
     e2c:	9b 01       	movw	r18, r22
     e2e:	ac 01       	movw	r20, r24
     e30:	c7 01       	movw	r24, r14
     e32:	b6 01       	movw	r22, r12
     e34:	0e 94 5a 2d 	call	0x5ab4	; 0x5ab4 <__divsf3>
}
     e38:	ff 90       	pop	r15
     e3a:	ef 90       	pop	r14
     e3c:	df 90       	pop	r13
     e3e:	cf 90       	pop	r12
     e40:	08 95       	ret

00000e42 <_Z18Rele_Abilitazione1ii>:

void Rele_Abilitazione1(int p_azione,int p_bit) {
  
  DDRC |= (1 << PC7);  // Rele1 
     e42:	3f 9a       	sbi	0x07, 7	; 7
  
  switch (p_azione) {
     e44:	81 30       	cpi	r24, 0x01	; 1
     e46:	91 05       	cpc	r25, r1
     e48:	71 f0       	breq	.+28     	; 0xe66 <_Z18Rele_Abilitazione1ii+0x24>
     e4a:	82 30       	cpi	r24, 0x02	; 2
     e4c:	91 05       	cpc	r25, r1
     e4e:	e1 f0       	breq	.+56     	; 0xe88 <_Z18Rele_Abilitazione1ii+0x46>
     e50:	89 2b       	or	r24, r25
     e52:	89 f5       	brne	.+98     	; 0xeb6 <_Z18Rele_Abilitazione1ii+0x74>
    case 0: // chiudi relè
    {     
      CLEAR_BIT(PORTC,PC7); // Rele1*/
     e54:	47 98       	cbi	0x08, 7	; 8
     e56:	2f ef       	ldi	r18, 0xFF	; 255
     e58:	30 e7       	ldi	r19, 0x70	; 112
     e5a:	42 e0       	ldi	r20, 0x02	; 2
     e5c:	21 50       	subi	r18, 0x01	; 1
     e5e:	30 40       	sbci	r19, 0x00	; 0
     e60:	40 40       	sbci	r20, 0x00	; 0
     e62:	e1 f7       	brne	.-8      	; 0xe5c <_Z18Rele_Abilitazione1ii+0x1a>
     e64:	0e c0       	rjmp	.+28     	; 0xe82 <_Z18Rele_Abilitazione1ii+0x40>
      _delay_ms(50);
    }
    break;
    case 1: // apri relè
    {
      SET_BIT(PORTC,p_bit); // Rele1
     e66:	28 b1       	in	r18, 0x08	; 8
     e68:	01 c0       	rjmp	.+2      	; 0xe6c <_Z18Rele_Abilitazione1ii+0x2a>
     e6a:	88 0f       	add	r24, r24
     e6c:	6a 95       	dec	r22
     e6e:	ea f7       	brpl	.-6      	; 0xe6a <_Z18Rele_Abilitazione1ii+0x28>
     e70:	82 2b       	or	r24, r18
     e72:	88 b9       	out	0x08, r24	; 8
     e74:	8f ef       	ldi	r24, 0xFF	; 255
     e76:	90 e7       	ldi	r25, 0x70	; 112
     e78:	22 e0       	ldi	r18, 0x02	; 2
     e7a:	81 50       	subi	r24, 0x01	; 1
     e7c:	90 40       	sbci	r25, 0x00	; 0
     e7e:	20 40       	sbci	r18, 0x00	; 0
     e80:	e1 f7       	brne	.-8      	; 0xe7a <_Z18Rele_Abilitazione1ii+0x38>
     e82:	00 c0       	rjmp	.+0      	; 0xe84 <_Z18Rele_Abilitazione1ii+0x42>
     e84:	00 00       	nop
     e86:	08 95       	ret
      _delay_ms(50);      
    }
    break;
    case 2: // chiudi e apri relè
    {
      CLEAR_BIT(PORTC,p_bit); // Rele1
     e88:	28 b1       	in	r18, 0x08	; 8
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	01 c0       	rjmp	.+2      	; 0xe92 <_Z18Rele_Abilitazione1ii+0x50>
     e90:	88 0f       	add	r24, r24
     e92:	6a 95       	dec	r22
     e94:	ea f7       	brpl	.-6      	; 0xe90 <_Z18Rele_Abilitazione1ii+0x4e>
     e96:	98 2f       	mov	r25, r24
     e98:	90 95       	com	r25
     e9a:	92 23       	and	r25, r18
     e9c:	98 b9       	out	0x08, r25	; 8
     e9e:	3f ef       	ldi	r19, 0xFF	; 255
     ea0:	45 ea       	ldi	r20, 0xA5	; 165
     ea2:	2e e0       	ldi	r18, 0x0E	; 14
     ea4:	31 50       	subi	r19, 0x01	; 1
     ea6:	40 40       	sbci	r20, 0x00	; 0
     ea8:	20 40       	sbci	r18, 0x00	; 0
     eaa:	e1 f7       	brne	.-8      	; 0xea4 <_Z18Rele_Abilitazione1ii+0x62>
     eac:	00 c0       	rjmp	.+0      	; 0xeae <_Z18Rele_Abilitazione1ii+0x6c>
     eae:	00 00       	nop
      _delay_ms(300);
      SET_BIT(PORTC,p_bit); // Rele1
     eb0:	98 b1       	in	r25, 0x08	; 8
     eb2:	89 2b       	or	r24, r25
     eb4:	88 b9       	out	0x08, r24	; 8
     eb6:	08 95       	ret

00000eb8 <_Z18Rele_Abilitazione2ii>:
  }
}

void Rele_Abilitazione2(int p_azione,int p_bit) {
  
  DDRA |= (1 << PA7);  // Rele2
     eb8:	0f 9a       	sbi	0x01, 7	; 1
  
  switch (p_azione) {
     eba:	81 30       	cpi	r24, 0x01	; 1
     ebc:	91 05       	cpc	r25, r1
     ebe:	b9 f0       	breq	.+46     	; 0xeee <_Z18Rele_Abilitazione2ii+0x36>
     ec0:	82 30       	cpi	r24, 0x02	; 2
     ec2:	91 05       	cpc	r25, r1
     ec4:	29 f1       	breq	.+74     	; 0xf10 <_Z18Rele_Abilitazione2ii+0x58>
     ec6:	89 2b       	or	r24, r25
     ec8:	d1 f5       	brne	.+116    	; 0xf3e <_Z18Rele_Abilitazione2ii+0x86>
    case 0:
    {
      CLEAR_BIT(PORTA,p_bit); // Rele2
     eca:	22 b1       	in	r18, 0x02	; 2
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	01 c0       	rjmp	.+2      	; 0xed4 <_Z18Rele_Abilitazione2ii+0x1c>
     ed2:	88 0f       	add	r24, r24
     ed4:	6a 95       	dec	r22
     ed6:	ea f7       	brpl	.-6      	; 0xed2 <_Z18Rele_Abilitazione2ii+0x1a>
     ed8:	80 95       	com	r24
     eda:	82 23       	and	r24, r18
     edc:	82 b9       	out	0x02, r24	; 2
     ede:	2f ef       	ldi	r18, 0xFF	; 255
     ee0:	30 e7       	ldi	r19, 0x70	; 112
     ee2:	42 e0       	ldi	r20, 0x02	; 2
     ee4:	21 50       	subi	r18, 0x01	; 1
     ee6:	30 40       	sbci	r19, 0x00	; 0
     ee8:	40 40       	sbci	r20, 0x00	; 0
     eea:	e1 f7       	brne	.-8      	; 0xee4 <_Z18Rele_Abilitazione2ii+0x2c>
     eec:	0e c0       	rjmp	.+28     	; 0xf0a <_Z18Rele_Abilitazione2ii+0x52>
      _delay_ms(50);
    }
    break;
    case 1:
    {
      SET_BIT(PORTA,p_bit); // Rele2
     eee:	22 b1       	in	r18, 0x02	; 2
     ef0:	01 c0       	rjmp	.+2      	; 0xef4 <_Z18Rele_Abilitazione2ii+0x3c>
     ef2:	88 0f       	add	r24, r24
     ef4:	6a 95       	dec	r22
     ef6:	ea f7       	brpl	.-6      	; 0xef2 <_Z18Rele_Abilitazione2ii+0x3a>
     ef8:	82 2b       	or	r24, r18
     efa:	82 b9       	out	0x02, r24	; 2
     efc:	8f ef       	ldi	r24, 0xFF	; 255
     efe:	90 e7       	ldi	r25, 0x70	; 112
     f00:	22 e0       	ldi	r18, 0x02	; 2
     f02:	81 50       	subi	r24, 0x01	; 1
     f04:	90 40       	sbci	r25, 0x00	; 0
     f06:	20 40       	sbci	r18, 0x00	; 0
     f08:	e1 f7       	brne	.-8      	; 0xf02 <_Z18Rele_Abilitazione2ii+0x4a>
     f0a:	00 c0       	rjmp	.+0      	; 0xf0c <_Z18Rele_Abilitazione2ii+0x54>
     f0c:	00 00       	nop
     f0e:	08 95       	ret
      _delay_ms(50);
    }
    break;
    case 2:
    {
      CLEAR_BIT(PORTA,p_bit); // Rele2
     f10:	22 b1       	in	r18, 0x02	; 2
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	01 c0       	rjmp	.+2      	; 0xf1a <_Z18Rele_Abilitazione2ii+0x62>
     f18:	88 0f       	add	r24, r24
     f1a:	6a 95       	dec	r22
     f1c:	ea f7       	brpl	.-6      	; 0xf18 <_Z18Rele_Abilitazione2ii+0x60>
     f1e:	98 2f       	mov	r25, r24
     f20:	90 95       	com	r25
     f22:	92 23       	and	r25, r18
     f24:	92 b9       	out	0x02, r25	; 2
     f26:	3f ef       	ldi	r19, 0xFF	; 255
     f28:	45 ea       	ldi	r20, 0xA5	; 165
     f2a:	2e e0       	ldi	r18, 0x0E	; 14
     f2c:	31 50       	subi	r19, 0x01	; 1
     f2e:	40 40       	sbci	r20, 0x00	; 0
     f30:	20 40       	sbci	r18, 0x00	; 0
     f32:	e1 f7       	brne	.-8      	; 0xf2c <_Z18Rele_Abilitazione2ii+0x74>
     f34:	00 c0       	rjmp	.+0      	; 0xf36 <_Z18Rele_Abilitazione2ii+0x7e>
     f36:	00 00       	nop
      _delay_ms(300);
      SET_BIT(PORTA,p_bit); // Rele2      
     f38:	92 b1       	in	r25, 0x02	; 2
     f3a:	89 2b       	or	r24, r25
     f3c:	82 b9       	out	0x02, r24	; 2
     f3e:	08 95       	ret

00000f40 <_Z12Control_WIFIi>:
    break;
  }
}

void Control_WIFI(int azione) {
   DDRB |= (1 << PB3);  // set DDRB bit 3,  sets PB3 for output
     f40:	23 9a       	sbi	0x04, 3	; 4
     f42:	2f ef       	ldi	r18, 0xFF	; 255
     f44:	36 e7       	ldi	r19, 0x76	; 118
     f46:	41 e0       	ldi	r20, 0x01	; 1
     f48:	21 50       	subi	r18, 0x01	; 1
     f4a:	30 40       	sbci	r19, 0x00	; 0
     f4c:	40 40       	sbci	r20, 0x00	; 0
     f4e:	e1 f7       	brne	.-8      	; 0xf48 <_Z12Control_WIFIi+0x8>
     f50:	00 c0       	rjmp	.+0      	; 0xf52 <_Z12Control_WIFIi+0x12>
     f52:	00 00       	nop
   _delay_ms(30);
   if (azione == 1) {SET_BIT(PORTB,3);} else if (azione == 0) { CLEAR_BIT(PORTB,3); }
     f54:	81 30       	cpi	r24, 0x01	; 1
     f56:	91 05       	cpc	r25, r1
     f58:	11 f4       	brne	.+4      	; 0xf5e <_Z12Control_WIFIi+0x1e>
     f5a:	2b 9a       	sbi	0x05, 3	; 5
     f5c:	08 95       	ret
     f5e:	89 2b       	or	r24, r25
     f60:	09 f4       	brne	.+2      	; 0xf64 <_Z12Control_WIFIi+0x24>
     f62:	2b 98       	cbi	0x05, 3	; 5
     f64:	08 95       	ret

00000f66 <_Z6Azzerav>:
}

void Azzera()
{
   RispostaHTTP = "";
     f66:	60 e7       	ldi	r22, 0x70	; 112
     f68:	71 e0       	ldi	r23, 0x01	; 1
     f6a:	83 e1       	ldi	r24, 0x13	; 19
     f6c:	99 e0       	ldi	r25, 0x09	; 9
     f6e:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>
   impulsi = 0;
     f72:	10 92 1a 09 	sts	0x091A, r1	; 0x80091a <impulsi+0x1>
     f76:	10 92 19 09 	sts	0x0919, r1	; 0x800919 <impulsi>
   alreadyTimbrata = false;
     f7a:	10 92 5a 09 	sts	0x095A, r1	; 0x80095a <alreadyTimbrata>
   
   Carburante = "X";
     f7e:	6f e6       	ldi	r22, 0x6F	; 111
     f80:	74 e0       	ldi	r23, 0x04	; 4
     f82:	89 ee       	ldi	r24, 0xE9	; 233
     f84:	98 e0       	ldi	r25, 0x08	; 8
     f86:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>
   
   Rele_Abilitazione1(1,7);
     f8a:	67 e0       	ldi	r22, 0x07	; 7
     f8c:	70 e0       	ldi	r23, 0x00	; 0
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	57 df       	rcall	.-338    	; 0xe42 <_Z18Rele_Abilitazione1ii>
   Rele_Abilitazione2(1,7);
     f94:	67 e0       	ldi	r22, 0x07	; 7
     f96:	70 e0       	ldi	r23, 0x00	; 0
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	8d df       	rcall	.-230    	; 0xeb8 <_Z18Rele_Abilitazione2ii>
   Control_WIFI(0);
     f9e:	80 e0       	ldi	r24, 0x00	; 0
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	ce df       	rcall	.-100    	; 0xf40 <_Z12Control_WIFIi>
     fa4:	8f e1       	ldi	r24, 0x1F	; 31
     fa6:	9e e4       	ldi	r25, 0x4E	; 78
     fa8:	01 97       	sbiw	r24, 0x01	; 1
     faa:	f1 f7       	brne	.-4      	; 0xfa8 <_Z6Azzerav+0x42>
     fac:	00 c0       	rjmp	.+0      	; 0xfae <_Z6Azzerav+0x48>
     fae:	00 00       	nop
   
   //clientToServizio.flush();
   //clientToServizio.stop();
   
   _delay_ms(5);
   clientATE.flush();
     fb0:	83 e9       	ldi	r24, 0x93	; 147
     fb2:	98 e0       	ldi	r25, 0x08	; 8
     fb4:	0e 94 37 20 	call	0x406e	; 0x406e <_ZN14EthernetClient5flushEv>
   clientATE.stop();
     fb8:	83 e9       	ldi	r24, 0x93	; 147
     fba:	98 e0       	ldi	r25, 0x08	; 8
     fbc:	0e 94 7c 20 	call	0x40f8	; 0x40f8 <_ZN14EthernetClient4stopEv>
     fc0:	8f e1       	ldi	r24, 0x1F	; 31
     fc2:	9e e4       	ldi	r25, 0x4E	; 78
     fc4:	01 97       	sbiw	r24, 0x01	; 1
     fc6:	f1 f7       	brne	.-4      	; 0xfc4 <_Z6Azzerav+0x5e>
     fc8:	00 c0       	rjmp	.+0      	; 0xfca <_Z6Azzerav+0x64>
     fca:	00 00       	nop
   _delay_ms(5);
   clientLOCAL.flush();
     fcc:	80 ea       	ldi	r24, 0xA0	; 160
     fce:	98 e0       	ldi	r25, 0x08	; 8
     fd0:	0e 94 37 20 	call	0x406e	; 0x406e <_ZN14EthernetClient5flushEv>
   clientLOCAL.stop();
     fd4:	80 ea       	ldi	r24, 0xA0	; 160
     fd6:	98 e0       	ldi	r25, 0x08	; 8
     fd8:	0e 94 7c 20 	call	0x40f8	; 0x40f8 <_ZN14EthernetClient4stopEv>
   Connected = false;
     fdc:	10 92 1e 09 	sts	0x091E, r1	; 0x80091e <Connected+0x1>
     fe0:	10 92 1d 09 	sts	0x091D, r1	; 0x80091d <Connected>
     fe4:	8f e1       	ldi	r24, 0x1F	; 31
     fe6:	9e e4       	ldi	r25, 0x4E	; 78
     fe8:	01 97       	sbiw	r24, 0x01	; 1
     fea:	f1 f7       	brne	.-4      	; 0xfe8 <_Z6Azzerav+0x82>
     fec:	00 c0       	rjmp	.+0      	; 0xfee <_Z6Azzerav+0x88>
     fee:	00 00       	nop
static const uint8_t RELE2 = PORTA7;
/*********************************************************************************************/
static inline void initSS_FLASH()  { DDRB |= (1 << PB4); } // set DDRB bit 4, sets PB4 for output
static inline void initSS_ETH()    { DDRC |= (1 << PC4); } // set DDRC bit 4, sets PC4 for output
static inline void enable_ETH()    { PORTC &= ~(1 << PC4); } // Set 0 Bit 4 PORTC Register
static inline void enable_FLASH()  { PORTB &= ~(1 << PB4); } // Set 0 Bit 4 PORTB Register
     ff0:	2c 98       	cbi	0x05, 4	; 5
     ff2:	8f e1       	ldi	r24, 0x1F	; 31
     ff4:	9e e4       	ldi	r25, 0x4E	; 78
     ff6:	01 97       	sbiw	r24, 0x01	; 1
     ff8:	f1 f7       	brne	.-4      	; 0xff6 <_Z6Azzerav+0x90>
     ffa:	00 c0       	rjmp	.+0      	; 0xffc <_Z6Azzerav+0x96>
     ffc:	00 00       	nop
static inline void disable_ETH()   { PORTC |= (1 << PC4);  } // Set 1 Bit 4 PORTC Register
static inline void disable_FLASH() { PORTB |= (1 << PB4);  } // Set 1 Bit 4 PORTB Register
     ffe:	2c 9a       	sbi	0x05, 4	; 5
    1000:	8f e1       	ldi	r24, 0x1F	; 31
    1002:	9e e4       	ldi	r25, 0x4E	; 78
    1004:	01 97       	sbiw	r24, 0x01	; 1
    1006:	f1 f7       	brne	.-4      	; 0x1004 <_Z6Azzerav+0x9e>
    1008:	00 c0       	rjmp	.+0      	; 0x100a <_Z6Azzerav+0xa4>
   _delay_ms(5);
   enable_FLASH();
   _delay_ms(5);
   disable_FLASH();
   _delay_ms(5);
   disable_ETH();
    100a:	00 00       	nop
    100c:	8b d9       	rcall	.-3306   	; 0x324 <_ZL11disable_ETHv>
    100e:	8f e1       	ldi	r24, 0x1F	; 31
    1010:	9e e4       	ldi	r25, 0x4E	; 78
    1012:	01 97       	sbiw	r24, 0x01	; 1
    1014:	f1 f7       	brne	.-4      	; 0x1012 <_Z6Azzerav+0xac>
    1016:	00 c0       	rjmp	.+0      	; 0x1018 <_Z6Azzerav+0xb2>
    1018:	00 00       	nop
static const uint8_t RELE1 = PORTC7;
static const uint8_t RELE2 = PORTA7;
/*********************************************************************************************/
static inline void initSS_FLASH()  { DDRB |= (1 << PB4); } // set DDRB bit 4, sets PB4 for output
static inline void initSS_ETH()    { DDRC |= (1 << PC4); } // set DDRC bit 4, sets PC4 for output
static inline void enable_ETH()    { PORTC &= ~(1 << PC4); } // Set 0 Bit 4 PORTC Register
    101a:	44 98       	cbi	0x08, 4	; 8
   _delay_ms(5);
   disable_ETH();
   _delay_ms(5); 
   enable_ETH(); 
     
   SET_BIT(PORTA,A1);
    101c:	82 b1       	in	r24, 0x02	; 2
    101e:	82 b9       	out	0x02, r24	; 2
   SET_BIT(PORTA,A2);
    1020:	82 b1       	in	r24, 0x02	; 2
    1022:	82 b9       	out	0x02, r24	; 2
   
   righeDisplay[1] =  "";
    1024:	60 e7       	ldi	r22, 0x70	; 112
    1026:	71 e0       	ldi	r23, 0x01	; 1
    1028:	8b ec       	ldi	r24, 0xCB	; 203
    102a:	98 e0       	ldi	r25, 0x08	; 8
    102c:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>
   righeDisplay[2] =  "";
    1030:	60 e7       	ldi	r22, 0x70	; 112
    1032:	71 e0       	ldi	r23, 0x01	; 1
    1034:	81 ed       	ldi	r24, 0xD1	; 209
    1036:	98 e0       	ldi	r25, 0x08	; 8
    1038:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>
   righeDisplay[2] =  "";
    103c:	60 e7       	ldi	r22, 0x70	; 112
    103e:	71 e0       	ldi	r23, 0x01	; 1
    1040:	81 ed       	ldi	r24, 0xD1	; 209
    1042:	98 e0       	ldi	r25, 0x08	; 8
    1044:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>
   
   lcd.noBacklight();
    1048:	82 e4       	ldi	r24, 0x42	; 66
    104a:	99 e0       	ldi	r25, 0x09	; 9
    104c:	0e 94 3f 27 	call	0x4e7e	; 0x4e7e <_ZN3LCD11noBacklightEv>
   lcd.noDisplay();
    1050:	82 e4       	ldi	r24, 0x42	; 66
    1052:	99 e0       	ldi	r25, 0x09	; 9
    1054:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <_ZN3LCD9noDisplayEv>
   secs = 0;
    1058:	10 92 83 08 	sts	0x0883, r1	; 0x800883 <secs>
    105c:	10 92 84 08 	sts	0x0884, r1	; 0x800884 <secs+0x1>
    1060:	10 92 85 08 	sts	0x0885, r1	; 0x800885 <secs+0x2>
    1064:	10 92 86 08 	sts	0x0886, r1	; 0x800886 <secs+0x3>
   UltimoPassaggioStato = 0;
    1068:	10 92 7f 08 	sts	0x087F, r1	; 0x80087f <UltimoPassaggioStato>
    106c:	10 92 80 08 	sts	0x0880, r1	; 0x800880 <UltimoPassaggioStato+0x1>
    1070:	10 92 81 08 	sts	0x0881, r1	; 0x800881 <UltimoPassaggioStato+0x2>
    1074:	10 92 82 08 	sts	0x0882, r1	; 0x800882 <UltimoPassaggioStato+0x3>
   
   printLine();
    1078:	ca d9       	rcall	.-3180   	; 0x40e <_Z9printLinev>
   Serial.println("Azzera....... OK");
    107a:	61 e7       	ldi	r22, 0x71	; 113
    107c:	74 e0       	ldi	r23, 0x04	; 4
    107e:	8f ec       	ldi	r24, 0xCF	; 207
    1080:	9a e0       	ldi	r25, 0x0A	; 10
    1082:	0e 94 0a 30 	call	0x6014	; 0x6014 <_ZN5Print7printlnEPKc>
   printLine();
    1086:	c3 d9       	rcall	.-3194   	; 0x40e <_Z9printLinev>
   TARGA = "";
    1088:	60 e7       	ldi	r22, 0x70	; 112
    108a:	71 e0       	ldi	r23, 0x01	; 1
    108c:	8f e6       	ldi	r24, 0x6F	; 111
    108e:	98 e0       	ldi	r25, 0x08	; 8
    1090:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>
   stato_procedura = -2;
    1094:	8e ef       	ldi	r24, 0xFE	; 254
    1096:	9f ef       	ldi	r25, 0xFF	; 255
    1098:	90 93 1c 09 	sts	0x091C, r25	; 0x80091c <stato_procedura+0x1>
    109c:	80 93 1b 09 	sts	0x091B, r24	; 0x80091b <stato_procedura>
    10a0:	08 95       	ret

000010a2 <_Z10inputTargac>:
}

void inputTarga(char T) {
    10a2:	cf 93       	push	r28
    10a4:	df 93       	push	r29
    10a6:	00 d0       	rcall	.+0      	; 0x10a8 <_Z10inputTargac+0x6>
    10a8:	00 d0       	rcall	.+0      	; 0x10aa <_Z10inputTargac+0x8>
    10aa:	00 d0       	rcall	.+0      	; 0x10ac <_Z10inputTargac+0xa>
    10ac:	cd b7       	in	r28, 0x3d	; 61
    10ae:	de b7       	in	r29, 0x3e	; 62
  
  switch (T) {
    10b0:	82 34       	cpi	r24, 0x42	; 66
    10b2:	61 f1       	breq	.+88     	; 0x110c <_Z10inputTargac+0x6a>
    10b4:	f8 f4       	brcc	.+62     	; 0x10f4 <_Z10inputTargac+0x52>
    10b6:	83 32       	cpi	r24, 0x23	; 35
    10b8:	09 f4       	brne	.+2      	; 0x10bc <_Z10inputTargac+0x1a>
    10ba:	51 c0       	rjmp	.+162    	; 0x115e <_Z10inputTargac+0xbc>
    10bc:	81 34       	cpi	r24, 0x41	; 65
    10be:	09 f0       	breq	.+2      	; 0x10c2 <_Z10inputTargac+0x20>
    10c0:	6b c0       	rjmp	.+214    	; 0x1198 <_Z10inputTargac+0xf6>
    case ('N'): {
      Serial.print("NIENTE");
    }
    break;
    case ('A'): {
      TARGA = "";
    10c2:	60 e7       	ldi	r22, 0x70	; 112
    10c4:	71 e0       	ldi	r23, 0x01	; 1
    10c6:	8f e6       	ldi	r24, 0x6F	; 111
    10c8:	98 e0       	ldi	r25, 0x08	; 8
    10ca:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>
	  righeDisplay[1] =  "AVVICINA TAG MEZZO"; // Set display per stato successivo
    10ce:	69 e8       	ldi	r22, 0x89	; 137
    10d0:	74 e0       	ldi	r23, 0x04	; 4
    10d2:	8b ec       	ldi	r24, 0xCB	; 203
    10d4:	98 e0       	ldi	r25, 0x08	; 8
    10d6:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>
	  righeDisplay[2] =  "";
    10da:	60 e7       	ldi	r22, 0x70	; 112
    10dc:	71 e0       	ldi	r23, 0x01	; 1
    10de:	81 ed       	ldi	r24, 0xD1	; 209
    10e0:	98 e0       	ldi	r25, 0x08	; 8
    10e2:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>
	  righeDisplay[3] = "";
    10e6:	60 e7       	ldi	r22, 0x70	; 112
    10e8:	71 e0       	ldi	r23, 0x01	; 1
    10ea:	87 ed       	ldi	r24, 0xD7	; 215
    10ec:	98 e0       	ldi	r25, 0x08	; 8
    10ee:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>
    10f2:	48 c0       	rjmp	.+144    	; 0x1184 <_Z10inputTargac+0xe2>
   stato_procedura = -2;
}

void inputTarga(char T) {
  
  switch (T) {
    10f4:	83 34       	cpi	r24, 0x43	; 67
    10f6:	c9 f0       	breq	.+50     	; 0x112a <_Z10inputTargac+0x88>
    10f8:	8e 34       	cpi	r24, 0x4E	; 78
    10fa:	09 f0       	breq	.+2      	; 0x10fe <_Z10inputTargac+0x5c>
    10fc:	4d c0       	rjmp	.+154    	; 0x1198 <_Z10inputTargac+0xf6>
    case ('N'): {
      Serial.print("NIENTE");
    10fe:	62 e8       	ldi	r22, 0x82	; 130
    1100:	74 e0       	ldi	r23, 0x04	; 4
    1102:	8f ec       	ldi	r24, 0xCF	; 207
    1104:	9a e0       	ldi	r25, 0x0A	; 10
    1106:	0e 94 df 2f 	call	0x5fbe	; 0x5fbe <_ZN5Print5printEPKc>
    }
    break;
    110a:	80 c0       	rjmp	.+256    	; 0x120c <_Z10inputTargac+0x16a>
	  righeDisplay[3] = "";
      avanzaStato(TinputTarga);
    }
    break;  
    case ('B'): {
      String mezzoString = leggiTAG_Mezzo(false); // con TRUE scrive sul blocco 4 della card NFC DEL MEZZO
    110c:	60 e0       	ldi	r22, 0x00	; 0
    110e:	ce 01       	movw	r24, r28
    1110:	01 96       	adiw	r24, 0x01	; 1
    1112:	2a db       	rcall	.-2476   	; 0x768 <_Z14leggiTAG_Mezzob>
    1114:	8f e3       	ldi	r24, 0x3F	; 63
    1116:	9c e9       	ldi	r25, 0x9C	; 156
    1118:	01 97       	sbiw	r24, 0x01	; 1
    111a:	f1 f7       	brne	.-4      	; 0x1118 <_Z10inputTargac+0x76>
    111c:	00 c0       	rjmp	.+0      	; 0x111e <_Z10inputTargac+0x7c>
    111e:	00 00       	nop
    1120:	ce 01       	movw	r24, r28
    1122:	01 96       	adiw	r24, 0x01	; 1
    1124:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
	  //String mezzoString = leggiTAG_Mezzo(true); // con TRUE scrive sul blocco 4 della card NFC DEL MEZZO
      _delay_ms(10);
    }
    break;  
    1128:	71 c0       	rjmp	.+226    	; 0x120c <_Z10inputTargac+0x16a>
    112a:	20 91 73 08 	lds	r18, 0x0873	; 0x800873 <TARGA+0x4>
    112e:	30 91 74 08 	lds	r19, 0x0874	; 0x800874 <TARGA+0x5>
    case ('C'): {
      if (TARGA.length() > 0) {		
    1132:	21 15       	cp	r18, r1
    1134:	31 05       	cpc	r19, r1
    1136:	09 f4       	brne	.+2      	; 0x113a <_Z10inputTargac+0x98>
    1138:	69 c0       	rjmp	.+210    	; 0x120c <_Z10inputTargac+0x16a>
		TARGA = TARGA.substring(0,TARGA.length()-1);
    113a:	21 50       	subi	r18, 0x01	; 1
    113c:	31 09       	sbc	r19, r1
    113e:	40 e0       	ldi	r20, 0x00	; 0
    1140:	50 e0       	ldi	r21, 0x00	; 0
    1142:	6f e6       	ldi	r22, 0x6F	; 111
    1144:	78 e0       	ldi	r23, 0x08	; 8
    1146:	ce 01       	movw	r24, r28
    1148:	01 96       	adiw	r24, 0x01	; 1
    114a:	0e 94 c7 34 	call	0x698e	; 0x698e <_ZNK6String9substringEjj>
    114e:	be 01       	movw	r22, r28
    1150:	6f 5f       	subi	r22, 0xFF	; 255
    1152:	7f 4f       	sbci	r23, 0xFF	; 255
    1154:	8f e6       	ldi	r24, 0x6F	; 111
    1156:	98 e0       	ldi	r25, 0x08	; 8
    1158:	0e 94 14 33 	call	0x6628	; 0x6628 <_ZN6StringaSEOS_>
    115c:	29 c0       	rjmp	.+82     	; 0x11b0 <_Z10inputTargac+0x10e>
		displayLCD(righeDisplay,stato_procedura,10);
	  }
    }
    break;  
    case ('#'): {
      if (TARGA.length() == 5) {
    115e:	80 91 73 08 	lds	r24, 0x0873	; 0x800873 <TARGA+0x4>
    1162:	90 91 74 08 	lds	r25, 0x0874	; 0x800874 <TARGA+0x5>
    1166:	05 97       	sbiw	r24, 0x05	; 5
    1168:	09 f0       	breq	.+2      	; 0x116c <_Z10inputTargac+0xca>
    116a:	50 c0       	rjmp	.+160    	; 0x120c <_Z10inputTargac+0x16a>
        mezzo.TARGA = TARGA;
    116c:	6f e6       	ldi	r22, 0x6F	; 111
    116e:	78 e0       	ldi	r23, 0x08	; 8
    1170:	8a e6       	ldi	r24, 0x6A	; 106
    1172:	99 e0       	ldi	r25, 0x09	; 9
    1174:	0e 94 f7 32 	call	0x65ee	; 0x65ee <_ZN6StringaSERKS_>
        RaccoltaDati[1] = mezzo.TARGA;
    1178:	6a e6       	ldi	r22, 0x6A	; 106
    117a:	79 e0       	ldi	r23, 0x09	; 9
    117c:	85 ef       	ldi	r24, 0xF5	; 245
    117e:	98 e0       	ldi	r25, 0x08	; 8
    1180:	0e 94 f7 32 	call	0x65ee	; 0x65ee <_ZN6StringaSERKS_>
				
			
        avanzaStato(TinputTarga);
    1184:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <TinputTarga>
    1188:	70 91 23 01 	lds	r23, 0x0123	; 0x800123 <TinputTarga+0x1>
    118c:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <TinputTarga+0x2>
    1190:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <TinputTarga+0x3>
    1194:	b8 da       	rcall	.-2704   	; 0x706 <_Z11avanzaStatom>
    1196:	3a c0       	rjmp	.+116    	; 0x120c <_Z10inputTargac+0x16a>
      }
    }
    break;
    default:  {
      TARGA += String(T);
    1198:	68 2f       	mov	r22, r24
    119a:	ce 01       	movw	r24, r28
    119c:	01 96       	adiw	r24, 0x01	; 1
    119e:	0e 94 34 33 	call	0x6668	; 0x6668 <_ZN6StringC1Ec>
	unsigned char concat(double num);
	unsigned char concat(const __FlashStringHelper * str);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    11a2:	be 01       	movw	r22, r28
    11a4:	6f 5f       	subi	r22, 0xFF	; 255
    11a6:	7f 4f       	sbci	r23, 0xFF	; 255
    11a8:	8f e6       	ldi	r24, 0x6F	; 111
    11aa:	98 e0       	ldi	r25, 0x08	; 8
    11ac:	0e 94 4f 34 	call	0x689e	; 0x689e <_ZN6String6concatERKS_>
    11b0:	ce 01       	movw	r24, r28
    11b2:	01 96       	adiw	r24, 0x01	; 1
    11b4:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
      // _delay_ms(20);
	   righeDisplay[1] =  "****** TARGA ******";
    11b8:	6c e9       	ldi	r22, 0x9C	; 156
    11ba:	74 e0       	ldi	r23, 0x04	; 4
    11bc:	8b ec       	ldi	r24, 0xCB	; 203
    11be:	98 e0       	ldi	r25, 0x08	; 8
    11c0:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    11c4:	60 eb       	ldi	r22, 0xB0	; 176
    11c6:	74 e0       	ldi	r23, 0x04	; 4
    11c8:	ce 01       	movw	r24, r28
    11ca:	01 96       	adiw	r24, 0x01	; 1
    11cc:	0e 94 a0 32 	call	0x6540	; 0x6540 <_ZN6StringC1EPKc>
	   righeDisplay[2] = "TARGA:" + TARGA;
    11d0:	6f e6       	ldi	r22, 0x6F	; 111
    11d2:	78 e0       	ldi	r23, 0x08	; 8
    11d4:	ce 01       	movw	r24, r28
    11d6:	01 96       	adiw	r24, 0x01	; 1
    11d8:	0e 94 75 34 	call	0x68ea	; 0x68ea <_ZplRK15StringSumHelperRK6String>
    11dc:	bc 01       	movw	r22, r24
    11de:	81 ed       	ldi	r24, 0xD1	; 209
    11e0:	98 e0       	ldi	r25, 0x08	; 8
    11e2:	0e 94 f7 32 	call	0x65ee	; 0x65ee <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    11e6:	ce 01       	movw	r24, r28
    11e8:	01 96       	adiw	r24, 0x01	; 1
    11ea:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
	   righeDisplay[3] = "#:Conferma A:Usa TAG";
    11ee:	67 eb       	ldi	r22, 0xB7	; 183
    11f0:	74 e0       	ldi	r23, 0x04	; 4
    11f2:	87 ed       	ldi	r24, 0xD7	; 215
    11f4:	98 e0       	ldi	r25, 0x08	; 8
    11f6:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>
	   displayLCD(righeDisplay,stato_procedura,10);
    11fa:	60 91 1b 09 	lds	r22, 0x091B	; 0x80091b <stato_procedura>
    11fe:	70 91 1c 09 	lds	r23, 0x091C	; 0x80091c <stato_procedura+0x1>
    1202:	4a e0       	ldi	r20, 0x0A	; 10
    1204:	50 e0       	ldi	r21, 0x00	; 0
    1206:	85 ec       	ldi	r24, 0xC5	; 197
    1208:	98 e0       	ldi	r25, 0x08	; 8
    120a:	41 da       	rcall	.-2942   	; 0x68e <_Z10displayLCDP6Stringii>
    }
    break;
  }
}
    120c:	26 96       	adiw	r28, 0x06	; 6
    120e:	0f b6       	in	r0, 0x3f	; 63
    1210:	f8 94       	cli
    1212:	de bf       	out	0x3e, r29	; 62
    1214:	0f be       	out	0x3f, r0	; 63
    1216:	cd bf       	out	0x3d, r28	; 61
    1218:	df 91       	pop	r29
    121a:	cf 91       	pop	r28
    121c:	08 95       	ret

0000121e <_Z7inputKMc>:

void inputKM(char T) {
    121e:	cf 93       	push	r28
    1220:	df 93       	push	r29
    1222:	cd b7       	in	r28, 0x3d	; 61
    1224:	de b7       	in	r29, 0x3e	; 62
    1226:	2c 97       	sbiw	r28, 0x0c	; 12
    1228:	0f b6       	in	r0, 0x3f	; 63
    122a:	f8 94       	cli
    122c:	de bf       	out	0x3e, r29	; 62
    122e:	0f be       	out	0x3f, r0	; 63
    1230:	cd bf       	out	0x3d, r28	; 61
  
  switch (T) {
    1232:	83 34       	cpi	r24, 0x43	; 67
    1234:	69 f0       	breq	.+26     	; 0x1250 <_Z7inputKMc+0x32>
    1236:	8e 34       	cpi	r24, 0x4E	; 78
    1238:	21 f0       	breq	.+8      	; 0x1242 <_Z7inputKMc+0x24>
    123a:	83 32       	cpi	r24, 0x23	; 35
    123c:	09 f0       	breq	.+2      	; 0x1240 <_Z7inputKMc+0x22>
    123e:	79 c0       	rjmp	.+242    	; 0x1332 <_Z7inputKMc+0x114>
    1240:	21 c0       	rjmp	.+66     	; 0x1284 <_Z7inputKMc+0x66>
    case ('N'): {
      Serial.print("NIENTE");
    1242:	62 e8       	ldi	r22, 0x82	; 130
    1244:	74 e0       	ldi	r23, 0x04	; 4
    1246:	8f ec       	ldi	r24, 0xCF	; 207
    1248:	9a e0       	ldi	r25, 0x0A	; 10
    124a:	0e 94 df 2f 	call	0x5fbe	; 0x5fbe <_ZN5Print5printEPKc>
    }
    break;    
    124e:	ab c0       	rjmp	.+342    	; 0x13a6 <_Z7inputKMc+0x188>
    1250:	20 91 6d 08 	lds	r18, 0x086D	; 0x80086d <KM+0x4>
    1254:	30 91 6e 08 	lds	r19, 0x086E	; 0x80086e <KM+0x5>
    case ('C'): {
      if (KM.length() > 0)
    1258:	21 15       	cp	r18, r1
    125a:	31 05       	cpc	r19, r1
    125c:	09 f4       	brne	.+2      	; 0x1260 <_Z7inputKMc+0x42>
    125e:	79 c0       	rjmp	.+242    	; 0x1352 <_Z7inputKMc+0x134>
      KM = KM.substring(0,KM.length()-1);
    1260:	21 50       	subi	r18, 0x01	; 1
    1262:	31 09       	sbc	r19, r1
    1264:	40 e0       	ldi	r20, 0x00	; 0
    1266:	50 e0       	ldi	r21, 0x00	; 0
    1268:	69 e6       	ldi	r22, 0x69	; 105
    126a:	78 e0       	ldi	r23, 0x08	; 8
    126c:	ce 01       	movw	r24, r28
    126e:	01 96       	adiw	r24, 0x01	; 1
    1270:	0e 94 c7 34 	call	0x698e	; 0x698e <_ZNK6String9substringEjj>
    1274:	be 01       	movw	r22, r28
    1276:	6f 5f       	subi	r22, 0xFF	; 255
    1278:	7f 4f       	sbci	r23, 0xFF	; 255
    127a:	89 e6       	ldi	r24, 0x69	; 105
    127c:	98 e0       	ldi	r25, 0x08	; 8
    127e:	0e 94 14 33 	call	0x6628	; 0x6628 <_ZN6StringaSEOS_>
    1282:	63 c0       	rjmp	.+198    	; 0x134a <_Z7inputKMc+0x12c>
	  righeDisplay[3] = "#:Conferma";
	  displayLCD(righeDisplay,stato_procedura,10);
    }
    break;  
    case ('#'): {
      if (KM.length() == 4) {
    1284:	80 91 6d 08 	lds	r24, 0x086D	; 0x80086d <KM+0x4>
    1288:	90 91 6e 08 	lds	r25, 0x086E	; 0x80086e <KM+0x5>
    128c:	04 97       	sbiw	r24, 0x04	; 4
    128e:	09 f0       	breq	.+2      	; 0x1292 <_Z7inputKMc+0x74>
    1290:	8a c0       	rjmp	.+276    	; 0x13a6 <_Z7inputKMc+0x188>
        mezzo.KM = KM;
    1292:	69 e6       	ldi	r22, 0x69	; 105
    1294:	78 e0       	ldi	r23, 0x08	; 8
    1296:	80 e7       	ldi	r24, 0x70	; 112
    1298:	99 e0       	ldi	r25, 0x09	; 9
    129a:	0e 94 f7 32 	call	0x65ee	; 0x65ee <_ZN6StringaSERKS_>
        RaccoltaDati[4] = mezzo.KM;
    129e:	60 e7       	ldi	r22, 0x70	; 112
    12a0:	79 e0       	ldi	r23, 0x09	; 9
    12a2:	87 e0       	ldi	r24, 0x07	; 7
    12a4:	99 e0       	ldi	r25, 0x09	; 9
    12a6:	0e 94 f7 32 	call	0x65ee	; 0x65ee <_ZN6StringaSERKS_>
		righeDisplay[1] = "LITRI : 0.00";
    12aa:	6c ee       	ldi	r22, 0xEC	; 236
    12ac:	74 e0       	ldi	r23, 0x04	; 4
    12ae:	8b ec       	ldi	r24, 0xCB	; 203
    12b0:	98 e0       	ldi	r25, 0x08	; 8
    12b2:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>
		righeDisplay[2] = "imp :" + String(impulsi);
    12b6:	60 91 19 09 	lds	r22, 0x0919	; 0x800919 <impulsi>
    12ba:	70 91 1a 09 	lds	r23, 0x091A	; 0x80091a <impulsi+0x1>
    12be:	4a e0       	ldi	r20, 0x0A	; 10
    12c0:	ce 01       	movw	r24, r28
    12c2:	07 96       	adiw	r24, 0x07	; 7
    12c4:	0e 94 76 33 	call	0x66ec	; 0x66ec <_ZN6StringC1Eih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    12c8:	69 ef       	ldi	r22, 0xF9	; 249
    12ca:	74 e0       	ldi	r23, 0x04	; 4
    12cc:	ce 01       	movw	r24, r28
    12ce:	01 96       	adiw	r24, 0x01	; 1
    12d0:	0e 94 a0 32 	call	0x6540	; 0x6540 <_ZN6StringC1EPKc>
    12d4:	be 01       	movw	r22, r28
    12d6:	69 5f       	subi	r22, 0xF9	; 249
    12d8:	7f 4f       	sbci	r23, 0xFF	; 255
    12da:	ce 01       	movw	r24, r28
    12dc:	01 96       	adiw	r24, 0x01	; 1
    12de:	0e 94 75 34 	call	0x68ea	; 0x68ea <_ZplRK15StringSumHelperRK6String>
    12e2:	bc 01       	movw	r22, r24
    12e4:	81 ed       	ldi	r24, 0xD1	; 209
    12e6:	98 e0       	ldi	r25, 0x08	; 8
    12e8:	0e 94 f7 32 	call	0x65ee	; 0x65ee <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    12ec:	ce 01       	movw	r24, r28
    12ee:	01 96       	adiw	r24, 0x01	; 1
    12f0:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
    12f4:	ce 01       	movw	r24, r28
    12f6:	07 96       	adiw	r24, 0x07	; 7
    12f8:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    12fc:	6f ef       	ldi	r22, 0xFF	; 255
    12fe:	74 e0       	ldi	r23, 0x04	; 4
    1300:	ce 01       	movw	r24, r28
    1302:	01 96       	adiw	r24, 0x01	; 1
    1304:	0e 94 a0 32 	call	0x6540	; 0x6540 <_ZN6StringC1EPKc>
		righeDisplay[3] = "Erogazione: " + StatoAttuale;
    1308:	65 e2       	ldi	r22, 0x25	; 37
    130a:	79 e0       	ldi	r23, 0x09	; 9
    130c:	ce 01       	movw	r24, r28
    130e:	01 96       	adiw	r24, 0x01	; 1
    1310:	0e 94 75 34 	call	0x68ea	; 0x68ea <_ZplRK15StringSumHelperRK6String>
    1314:	bc 01       	movw	r22, r24
    1316:	87 ed       	ldi	r24, 0xD7	; 215
    1318:	98 e0       	ldi	r25, 0x08	; 8
    131a:	0e 94 f7 32 	call	0x65ee	; 0x65ee <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    131e:	ce 01       	movw	r24, r28
    1320:	01 96       	adiw	r24, 0x01	; 1
    1322:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
        avanzaStato(120);
    1326:	68 e7       	ldi	r22, 0x78	; 120
    1328:	70 e0       	ldi	r23, 0x00	; 0
    132a:	80 e0       	ldi	r24, 0x00	; 0
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	eb d9       	rcall	.-3114   	; 0x706 <_Z11avanzaStatom>
    1330:	3a c0       	rjmp	.+116    	; 0x13a6 <_Z7inputKMc+0x188>
      }
    }
    break;
    default:  {
      KM += String(T);
    1332:	68 2f       	mov	r22, r24
    1334:	ce 01       	movw	r24, r28
    1336:	01 96       	adiw	r24, 0x01	; 1
    1338:	0e 94 34 33 	call	0x6668	; 0x6668 <_ZN6StringC1Ec>
	unsigned char concat(double num);
	unsigned char concat(const __FlashStringHelper * str);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    133c:	be 01       	movw	r22, r28
    133e:	6f 5f       	subi	r22, 0xFF	; 255
    1340:	7f 4f       	sbci	r23, 0xFF	; 255
    1342:	89 e6       	ldi	r24, 0x69	; 105
    1344:	98 e0       	ldi	r25, 0x08	; 8
    1346:	0e 94 4f 34 	call	0x689e	; 0x689e <_ZN6String6concatERKS_>
    134a:	ce 01       	movw	r24, r28
    134c:	01 96       	adiw	r24, 0x01	; 1
    134e:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
      //_delay_ms(20);
	  righeDisplay[1] =  "****** KM ******";
    1352:	6c ec       	ldi	r22, 0xCC	; 204
    1354:	74 e0       	ldi	r23, 0x04	; 4
    1356:	8b ec       	ldi	r24, 0xCB	; 203
    1358:	98 e0       	ldi	r25, 0x08	; 8
    135a:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    135e:	6d ed       	ldi	r22, 0xDD	; 221
    1360:	74 e0       	ldi	r23, 0x04	; 4
    1362:	ce 01       	movw	r24, r28
    1364:	01 96       	adiw	r24, 0x01	; 1
    1366:	0e 94 a0 32 	call	0x6540	; 0x6540 <_ZN6StringC1EPKc>
	  righeDisplay[2] = "KM:" + KM;
    136a:	69 e6       	ldi	r22, 0x69	; 105
    136c:	78 e0       	ldi	r23, 0x08	; 8
    136e:	ce 01       	movw	r24, r28
    1370:	01 96       	adiw	r24, 0x01	; 1
    1372:	0e 94 75 34 	call	0x68ea	; 0x68ea <_ZplRK15StringSumHelperRK6String>
    1376:	bc 01       	movw	r22, r24
    1378:	81 ed       	ldi	r24, 0xD1	; 209
    137a:	98 e0       	ldi	r25, 0x08	; 8
    137c:	0e 94 f7 32 	call	0x65ee	; 0x65ee <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1380:	ce 01       	movw	r24, r28
    1382:	01 96       	adiw	r24, 0x01	; 1
    1384:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
	  righeDisplay[3] = "#:Conferma";
    1388:	61 ee       	ldi	r22, 0xE1	; 225
    138a:	74 e0       	ldi	r23, 0x04	; 4
    138c:	87 ed       	ldi	r24, 0xD7	; 215
    138e:	98 e0       	ldi	r25, 0x08	; 8
    1390:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>
	  displayLCD(righeDisplay,stato_procedura,10);
    1394:	60 91 1b 09 	lds	r22, 0x091B	; 0x80091b <stato_procedura>
    1398:	70 91 1c 09 	lds	r23, 0x091C	; 0x80091c <stato_procedura+0x1>
    139c:	4a e0       	ldi	r20, 0x0A	; 10
    139e:	50 e0       	ldi	r21, 0x00	; 0
    13a0:	85 ec       	ldi	r24, 0xC5	; 197
    13a2:	98 e0       	ldi	r25, 0x08	; 8
    13a4:	74 d9       	rcall	.-3352   	; 0x68e <_Z10displayLCDP6Stringii>
    }
    break;
  }
}
    13a6:	2c 96       	adiw	r28, 0x0c	; 12
    13a8:	0f b6       	in	r0, 0x3f	; 63
    13aa:	f8 94       	cli
    13ac:	de bf       	out	0x3e, r29	; 62
    13ae:	0f be       	out	0x3f, r0	; 63
    13b0:	cd bf       	out	0x3d, r28	; 61
    13b2:	df 91       	pop	r29
    13b4:	cf 91       	pop	r28
    13b6:	08 95       	ret

000013b8 <loop>:

/**************************LOOP PROCEDURA************************************/
void loop() {
    13b8:	cf 92       	push	r12
    13ba:	df 92       	push	r13
    13bc:	ef 92       	push	r14
    13be:	ff 92       	push	r15
    13c0:	0f 93       	push	r16
    13c2:	1f 93       	push	r17
    13c4:	cf 93       	push	r28
    13c6:	df 93       	push	r29
    13c8:	cd b7       	in	r28, 0x3d	; 61
    13ca:	de b7       	in	r29, 0x3e	; 62
    13cc:	6d 97       	sbiw	r28, 0x1d	; 29
    13ce:	0f b6       	in	r0, 0x3f	; 63
    13d0:	f8 94       	cli
    13d2:	de bf       	out	0x3e, r29	; 62
    13d4:	0f be       	out	0x3f, r0	; 63
    13d6:	cd bf       	out	0x3d, r28	; 61
      
  switch (stato_procedura) {
    13d8:	e0 91 1b 09 	lds	r30, 0x091B	; 0x80091b <stato_procedura>
    13dc:	f0 91 1c 09 	lds	r31, 0x091C	; 0x80091c <stato_procedura+0x1>
    13e0:	32 96       	adiw	r30, 0x02	; 2
    13e2:	ec 30       	cpi	r30, 0x0C	; 12
    13e4:	f1 05       	cpc	r31, r1
    13e6:	08 f0       	brcs	.+2      	; 0x13ea <loop+0x32>
    13e8:	26 c5       	rjmp	.+2636   	; 0x1e36 <loop+0xa7e>
    13ea:	ea 5b       	subi	r30, 0xBA	; 186
    13ec:	ff 4f       	sbci	r31, 0xFF	; 255
    13ee:	0c 94 7f 36 	jmp	0x6cfe	; 0x6cfe <__tablejump2__>
    case -2:
    { //cli(); // disable interrupt      
            
      righeDisplay[1] =  "";
    13f2:	60 e7       	ldi	r22, 0x70	; 112
    13f4:	71 e0       	ldi	r23, 0x01	; 1
    13f6:	8b ec       	ldi	r24, 0xCB	; 203
    13f8:	98 e0       	ldi	r25, 0x08	; 8
    13fa:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>
      righeDisplay[2] = "Setting....";
    13fe:	6c e0       	ldi	r22, 0x0C	; 12
    1400:	75 e0       	ldi	r23, 0x05	; 5
    1402:	81 ed       	ldi	r24, 0xD1	; 209
    1404:	98 e0       	ldi	r25, 0x08	; 8
    1406:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>
      righeDisplay[3] =  "";
    140a:	60 e7       	ldi	r22, 0x70	; 112
    140c:	71 e0       	ldi	r23, 0x01	; 1
    140e:	87 ed       	ldi	r24, 0xD7	; 215
    1410:	98 e0       	ldi	r25, 0x08	; 8
    1412:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>
      
      displayLCD(righeDisplay,stato_procedura,100);
    1416:	60 91 1b 09 	lds	r22, 0x091B	; 0x80091b <stato_procedura>
    141a:	70 91 1c 09 	lds	r23, 0x091C	; 0x80091c <stato_procedura+0x1>
    141e:	44 e6       	ldi	r20, 0x64	; 100
    1420:	50 e0       	ldi	r21, 0x00	; 0
    1422:	85 ec       	ldi	r24, 0xC5	; 197
    1424:	98 e0       	ldi	r25, 0x08	; 8
    1426:	33 d9       	rcall	.-3482   	; 0x68e <_Z10displayLCDP6Stringii>
    1428:	2f ef       	ldi	r18, 0xFF	; 255
    142a:	33 ec       	ldi	r19, 0xC3	; 195
    142c:	89 e0       	ldi	r24, 0x09	; 9
    142e:	21 50       	subi	r18, 0x01	; 1
    1430:	30 40       	sbci	r19, 0x00	; 0
    1432:	80 40       	sbci	r24, 0x00	; 0
    1434:	e1 f7       	brne	.-8      	; 0x142e <loop+0x76>
      stato_procedura++;
    }
    break;
    case -1:
    {             
		abilitaPulsanti();
    1436:	55 c0       	rjmp	.+170    	; 0x14e2 <loop+0x12a>
    1438:	be dc       	rcall	.-1668   	; 0xdb6 <_Z15abilitaPulsantiv>
    143a:	9f ef       	ldi	r25, 0xFF	; 255
    143c:	29 ef       	ldi	r18, 0xF9	; 249
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	91 50       	subi	r25, 0x01	; 1
    1442:	20 40       	sbci	r18, 0x00	; 0
    1444:	30 40       	sbci	r19, 0x00	; 0
    1446:	e1 f7       	brne	.-8      	; 0x1440 <loop+0x88>
    1448:	00 c0       	rjmp	.+0      	; 0x144a <loop+0x92>
		_delay_ms(20);
		abilitaContattiPistola();    
    144a:	00 00       	nop
    144c:	be dc       	rcall	.-1668   	; 0xdca <_Z22abilitaContattiPistolav>
		stato_procedura++;
    144e:	80 91 1b 09 	lds	r24, 0x091B	; 0x80091b <stato_procedura>
    1452:	90 91 1c 09 	lds	r25, 0x091C	; 0x80091c <stato_procedura+0x1>
    1456:	01 96       	adiw	r24, 0x01	; 1
    1458:	90 93 1c 09 	sts	0x091C, r25	; 0x80091c <stato_procedura+0x1>
    145c:	80 93 1b 09 	sts	0x091B, r24	; 0x80091b <stato_procedura>
    }
    break;
    1460:	ea c4       	rjmp	.+2516   	; 0x1e36 <loop+0xa7e>
    case 0:
    { 
      righeDisplay[1] =  "";
    1462:	60 e7       	ldi	r22, 0x70	; 112
    1464:	71 e0       	ldi	r23, 0x01	; 1
    1466:	8b ec       	ldi	r24, 0xCB	; 203
    1468:	98 e0       	ldi	r25, 0x08	; 8
    146a:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>
      righeDisplay[2] =  "";
    146e:	60 e7       	ldi	r22, 0x70	; 112
    1470:	71 e0       	ldi	r23, 0x01	; 1
    1472:	81 ed       	ldi	r24, 0xD1	; 209
    1474:	98 e0       	ldi	r25, 0x08	; 8
    1476:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>
      righeDisplay[3] =  "";
    147a:	60 e7       	ldi	r22, 0x70	; 112
    147c:	71 e0       	ldi	r23, 0x01	; 1
    147e:	87 ed       	ldi	r24, 0xD7	; 215
    1480:	98 e0       	ldi	r25, 0x08	; 8
    1482:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>
    1486:	8f ef       	ldi	r24, 0xFF	; 255
    1488:	97 ea       	ldi	r25, 0xA7	; 167
    148a:	21 e6       	ldi	r18, 0x61	; 97
    148c:	81 50       	subi	r24, 0x01	; 1
    148e:	90 40       	sbci	r25, 0x00	; 0
    1490:	20 40       	sbci	r18, 0x00	; 0
    1492:	e1 f7       	brne	.-8      	; 0x148c <loop+0xd4>
    1494:	00 c0       	rjmp	.+0      	; 0x1496 <loop+0xde>
    1496:	00 00       	nop
          
      //displayLCD(righeDisplay,stato_procedura,100);
      _delay_ms(2000);
      alreadyTimbrata = false;  
    1498:	10 92 5a 09 	sts	0x095A, r1	; 0x80095a <alreadyTimbrata>
static const uint8_t RELE1 = PORTC7;
static const uint8_t RELE2 = PORTA7;
/*********************************************************************************************/
static inline void initSS_FLASH()  { DDRB |= (1 << PB4); } // set DDRB bit 4, sets PB4 for output
static inline void initSS_ETH()    { DDRC |= (1 << PC4); } // set DDRC bit 4, sets PC4 for output
static inline void enable_ETH()    { PORTC &= ~(1 << PC4); } // Set 0 Bit 4 PORTC Register
    149c:	44 98       	cbi	0x08, 4	; 8
      alreadyTimbrata = false;  
      
	  enable_ETH();
	  
	  /************************************************/
	  righeDisplay[1] = " * AUTENTICAZIONE *";
    149e:	68 e1       	ldi	r22, 0x18	; 24
    14a0:	75 e0       	ldi	r23, 0x05	; 5
    14a2:	8b ec       	ldi	r24, 0xCB	; 203
    14a4:	98 e0       	ldi	r25, 0x08	; 8
    14a6:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>
	  righeDisplay[2] = "";
    14aa:	60 e7       	ldi	r22, 0x70	; 112
    14ac:	71 e0       	ldi	r23, 0x01	; 1
    14ae:	81 ed       	ldi	r24, 0xD1	; 209
    14b0:	98 e0       	ldi	r25, 0x08	; 8
    14b2:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>
	  righeDisplay[3] = "    Avvicina ATE  ";
    14b6:	6c e2       	ldi	r22, 0x2C	; 44
    14b8:	75 e0       	ldi	r23, 0x05	; 5
    14ba:	87 ed       	ldi	r24, 0xD7	; 215
    14bc:	98 e0       	ldi	r25, 0x08	; 8
    14be:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>
	  
	  displayLCD(righeDisplay,stato_procedura,100);
    14c2:	60 91 1b 09 	lds	r22, 0x091B	; 0x80091b <stato_procedura>
    14c6:	70 91 1c 09 	lds	r23, 0x091C	; 0x80091c <stato_procedura+0x1>
    14ca:	44 e6       	ldi	r20, 0x64	; 100
    14cc:	50 e0       	ldi	r21, 0x00	; 0
    14ce:	85 ec       	ldi	r24, 0xC5	; 197
    14d0:	98 e0       	ldi	r25, 0x08	; 8
    14d2:	dd d8       	rcall	.-3654   	; 0x68e <_Z10displayLCDP6Stringii>
    14d4:	3f ef       	ldi	r19, 0xFF	; 255
    14d6:	83 ed       	ldi	r24, 0xD3	; 211
    14d8:	90 e3       	ldi	r25, 0x30	; 48
    14da:	31 50       	subi	r19, 0x01	; 1
    14dc:	80 40       	sbci	r24, 0x00	; 0
    14de:	90 40       	sbci	r25, 0x00	; 0
    14e0:	e1 f7       	brne	.-8      	; 0x14da <loop+0x122>
    14e2:	00 c0       	rjmp	.+0      	; 0x14e4 <loop+0x12c>
    14e4:	00 00       	nop
    14e6:	b3 cf       	rjmp	.-154    	; 0x144e <loop+0x96>
      stato_procedura++;
    }
    break;
    case 1:
    { 
		TARGA = "";
    14e8:	60 e7       	ldi	r22, 0x70	; 112
    14ea:	71 e0       	ldi	r23, 0x01	; 1
    14ec:	8f e6       	ldi	r24, 0x6F	; 111
    14ee:	98 e0       	ldi	r25, 0x08	; 8
    14f0:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>
		KM = "";
    14f4:	60 e7       	ldi	r22, 0x70	; 112
    14f6:	71 e0       	ldi	r23, 0x01	; 1
    14f8:	89 e6       	ldi	r24, 0x69	; 105
    14fa:	98 e0       	ldi	r25, 0x08	; 8
    14fc:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>
		_delay_ms(10);
		avanzaStato(TinputTarga);
		/*****************************************/

		/*****************************************************/
		String ATe = "ERRORE";
    1500:	6f e9       	ldi	r22, 0x9F	; 159
    1502:	71 e0       	ldi	r23, 0x01	; 1
    1504:	ce 01       	movw	r24, r28
    1506:	0e 96       	adiw	r24, 0x0e	; 14
    1508:	0e 94 a0 32 	call	0x6540	; 0x6540 <_ZN6StringC1EPKc>
		if (!alreadyTimbrata) {ATe = GetCodeRfidATe(); Buzzer(2,100);}
    150c:	80 91 5a 09 	lds	r24, 0x095A	; 0x80095a <alreadyTimbrata>
    1510:	81 11       	cpse	r24, r1
    1512:	15 c0       	rjmp	.+42     	; 0x153e <loop+0x186>
    1514:	ce 01       	movw	r24, r28
    1516:	01 96       	adiw	r24, 0x01	; 1
    1518:	0a da       	rcall	.-3052   	; 0x92e <_Z14GetCodeRfidATev>
    151a:	be 01       	movw	r22, r28
    151c:	6f 5f       	subi	r22, 0xFF	; 255
    151e:	7f 4f       	sbci	r23, 0xFF	; 255
    1520:	ce 01       	movw	r24, r28
    1522:	0e 96       	adiw	r24, 0x0e	; 14
    1524:	0e 94 14 33 	call	0x6628	; 0x6628 <_ZN6StringaSEOS_>
    1528:	ce 01       	movw	r24, r28
    152a:	01 96       	adiw	r24, 0x01	; 1
    152c:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
    1530:	44 e6       	ldi	r20, 0x64	; 100
    1532:	50 e0       	ldi	r21, 0x00	; 0
    1534:	60 e0       	ldi	r22, 0x00	; 0
    1536:	70 e0       	ldi	r23, 0x00	; 0
    1538:	82 e0       	ldi	r24, 0x02	; 2
    153a:	0e 94 43 02 	call	0x486	; 0x486 <_Z6Buzzerhm>
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
    153e:	6f e9       	ldi	r22, 0x9F	; 159
    1540:	71 e0       	ldi	r23, 0x01	; 1
    1542:	ce 01       	movw	r24, r28
    1544:	0e 96       	adiw	r24, 0x0e	; 14
    1546:	0e 94 a9 34 	call	0x6952	; 0x6952 <_ZNK6String6equalsEPKc>
            
			if ((ATe != "ERRORE") && (BIT_IS_CLEAR(PORTC,4)))
    154a:	81 11       	cpse	r24, r1
    154c:	02 c0       	rjmp	.+4      	; 0x1552 <loop+0x19a>
    154e:	44 9b       	sbis	0x08, 4	; 8
    1550:	b0 c4       	rjmp	.+2400   	; 0x1eb2 <loop+0xafa>
				InizializzaEthernet();
           
				_delay_ms(1000); // tempo per inizializzare la ethernet
			}
            
		   righeDisplay[1] =  "****** TARGA ******";
    1552:	6c e9       	ldi	r22, 0x9C	; 156
    1554:	74 e0       	ldi	r23, 0x04	; 4
    1556:	8b ec       	ldi	r24, 0xCB	; 203
    1558:	98 e0       	ldi	r25, 0x08	; 8
    155a:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>
		   righeDisplay[2] = "TARGA:";
    155e:	60 eb       	ldi	r22, 0xB0	; 176
    1560:	74 e0       	ldi	r23, 0x04	; 4
    1562:	81 ed       	ldi	r24, 0xD1	; 209
    1564:	98 e0       	ldi	r25, 0x08	; 8
    1566:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>
		   righeDisplay[3] = "#:Conferma A: TAG";
    156a:	6f e3       	ldi	r22, 0x3F	; 63
    156c:	75 e0       	ldi	r23, 0x05	; 5
    156e:	87 ed       	ldi	r24, 0xD7	; 215
    1570:	98 e0       	ldi	r25, 0x08	; 8
    1572:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>
	   
			if (1) //(GetAteValidation(80,serverATE,clientATE,ATe))  // Effettua chiamata REST per validare CARD NFC
			{ 
				RaccoltaDati[5] = "000";
    1576:	61 e5       	ldi	r22, 0x51	; 81
    1578:	75 e0       	ldi	r23, 0x05	; 5
    157a:	8d e0       	ldi	r24, 0x0D	; 13
    157c:	99 e0       	ldi	r25, 0x09	; 9
    157e:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>
				SET_BIT(PORTC,PC4);
    1582:	44 9a       	sbi	0x08, 4	; 8
				Buzzer(1,400);    
    1584:	40 e9       	ldi	r20, 0x90	; 144
    1586:	51 e0       	ldi	r21, 0x01	; 1
    1588:	60 e0       	ldi	r22, 0x00	; 0
    158a:	70 e0       	ldi	r23, 0x00	; 0
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	0e 94 43 02 	call	0x486	; 0x486 <_Z6Buzzerhm>
    1592:	2f ef       	ldi	r18, 0xFF	; 255
    1594:	30 e7       	ldi	r19, 0x70	; 112
    1596:	82 e0       	ldi	r24, 0x02	; 2
    1598:	21 50       	subi	r18, 0x01	; 1
    159a:	30 40       	sbci	r19, 0x00	; 0
    159c:	80 40       	sbci	r24, 0x00	; 0
    159e:	e1 f7       	brne	.-8      	; 0x1598 <loop+0x1e0>
    15a0:	00 c0       	rjmp	.+0      	; 0x15a2 <loop+0x1ea>
    15a2:	00 00       	nop
				//displayLCD(righeDisplay,stato_procedura,10);        
				_delay_ms(50);      
				avanzaStato(TinputTarga); 
    15a4:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <TinputTarga>
    15a8:	70 91 23 01 	lds	r23, 0x0123	; 0x800123 <TinputTarga+0x1>
    15ac:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <TinputTarga+0x2>
    15b0:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <TinputTarga+0x3>
    15b4:	2a c5       	rjmp	.+2644   	; 0x200a <loop+0xc52>
			}          
    }
    break;
    case 2:
    {   
		lcd.setCursor(0,0);
    15b6:	40 e0       	ldi	r20, 0x00	; 0
    15b8:	60 e0       	ldi	r22, 0x00	; 0
    15ba:	82 e4       	ldi	r24, 0x42	; 66
    15bc:	99 e0       	ldi	r25, 0x09	; 9
    15be:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <_ZN3LCD9setCursorEhh>
		lcd.print((char)1);  // STAMPA LA CLESSIDRA
    15c2:	61 e0       	ldi	r22, 0x01	; 1
    15c4:	82 e4       	ldi	r24, 0x42	; 66
    15c6:	99 e0       	ldi	r25, 0x09	; 9
    15c8:	0e 94 e0 2f 	call	0x5fc0	; 0x5fc0 <_ZN5Print5printEc>
		lcd.print("Tempo: " + String((UltimoPassaggioStato+Timer-secs-1))+ " sec ");
    15cc:	40 91 7f 08 	lds	r20, 0x087F	; 0x80087f <UltimoPassaggioStato>
    15d0:	50 91 80 08 	lds	r21, 0x0880	; 0x800880 <UltimoPassaggioStato+0x1>
    15d4:	60 91 81 08 	lds	r22, 0x0881	; 0x800881 <UltimoPassaggioStato+0x2>
    15d8:	70 91 82 08 	lds	r23, 0x0882	; 0x800882 <UltimoPassaggioStato+0x3>
    15dc:	80 91 7b 08 	lds	r24, 0x087B	; 0x80087b <Timer>
    15e0:	90 91 7c 08 	lds	r25, 0x087C	; 0x80087c <Timer+0x1>
    15e4:	a0 91 7d 08 	lds	r26, 0x087D	; 0x80087d <Timer+0x2>
    15e8:	b0 91 7e 08 	lds	r27, 0x087E	; 0x80087e <Timer+0x3>
    15ec:	48 0f       	add	r20, r24
    15ee:	59 1f       	adc	r21, r25
    15f0:	6a 1f       	adc	r22, r26
    15f2:	7b 1f       	adc	r23, r27
    15f4:	41 50       	subi	r20, 0x01	; 1
    15f6:	51 09       	sbc	r21, r1
    15f8:	61 09       	sbc	r22, r1
    15fa:	71 09       	sbc	r23, r1
    15fc:	80 91 83 08 	lds	r24, 0x0883	; 0x800883 <secs>
    1600:	90 91 84 08 	lds	r25, 0x0884	; 0x800884 <secs+0x1>
    1604:	a0 91 85 08 	lds	r26, 0x0885	; 0x800885 <secs+0x2>
    1608:	b0 91 86 08 	lds	r27, 0x0886	; 0x800886 <secs+0x3>
    160c:	48 1b       	sub	r20, r24
    160e:	59 0b       	sbc	r21, r25
    1610:	6a 0b       	sbc	r22, r26
    1612:	7b 0b       	sbc	r23, r27
    1614:	2a e0       	ldi	r18, 0x0A	; 10
    1616:	ce 01       	movw	r24, r28
    1618:	0e 96       	adiw	r24, 0x0e	; 14
    161a:	0e 94 ca 33 	call	0x6794	; 0x6794 <_ZN6StringC1Emh>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    161e:	67 eb       	ldi	r22, 0xB7	; 183
    1620:	75 e0       	ldi	r23, 0x05	; 5
    1622:	ce 01       	movw	r24, r28
    1624:	01 96       	adiw	r24, 0x01	; 1
    1626:	0e 94 a0 32 	call	0x6540	; 0x6540 <_ZN6StringC1EPKc>
    162a:	be 01       	movw	r22, r28
    162c:	62 5f       	subi	r22, 0xF2	; 242
    162e:	7f 4f       	sbci	r23, 0xFF	; 255
    1630:	ce 01       	movw	r24, r28
    1632:	01 96       	adiw	r24, 0x01	; 1
    1634:	0e 94 75 34 	call	0x68ea	; 0x68ea <_ZplRK15StringSumHelperRK6String>
    1638:	65 e5       	ldi	r22, 0x55	; 85
    163a:	75 e0       	ldi	r23, 0x05	; 5
    163c:	0e 94 86 34 	call	0x690c	; 0x690c <_ZplRK15StringSumHelperPKc>
    1640:	bc 01       	movw	r22, r24
    1642:	82 e4       	ldi	r24, 0x42	; 66
    1644:	99 e0       	ldi	r25, 0x09	; 9
    1646:	0e 94 d1 2f 	call	0x5fa2	; 0x5fa2 <_ZN5Print5printERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    164a:	ce 01       	movw	r24, r28
    164c:	01 96       	adiw	r24, 0x01	; 1
    164e:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
    1652:	ce 01       	movw	r24, r28
    1654:	0e 96       	adiw	r24, 0x0e	; 14
    1656:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
		  // da commentare
		  // Carburante = "D"; // Simulo Abilitazione Diesel
		  // da commentare
		  // Carburante = "B"; // Simulo Abilitazione Benzina
		/*****************************************************************/
		gpio.setCONFREG(0x3C);
    165a:	6c e3       	ldi	r22, 0x3C	; 60
    165c:	86 e6       	ldi	r24, 0x66	; 102
    165e:	98 e0       	ldi	r25, 0x08	; 8
    1660:	0e 94 dd 14 	call	0x29ba	; 0x29ba <_ZN7PCA953410setCONFREGEh>
		uint8_t c = gpio.Read_IP_REGISTER();
    1664:	86 e6       	ldi	r24, 0x66	; 102
    1666:	98 e0       	ldi	r25, 0x08	; 8
    1668:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN7PCA953416Read_IP_REGISTEREv>
    166c:	08 2f       	mov	r16, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    166e:	42 e0       	ldi	r20, 0x02	; 2
    1670:	be 01       	movw	r22, r28
    1672:	6a 5e       	subi	r22, 0xEA	; 234
    1674:	7f 4f       	sbci	r23, 0xFF	; 255
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	0e 94 07 39 	call	0x720e	; 0x720e <__itoa_ncheck>
		char buf[8];
		itoa(c,buf,2);
		gpio.setCONFREG(0xC3);
    167c:	63 ec       	ldi	r22, 0xC3	; 195
    167e:	86 e6       	ldi	r24, 0x66	; 102
    1680:	98 e0       	ldi	r25, 0x08	; 8
    1682:	0e 94 dd 14 	call	0x29ba	; 0x29ba <_ZN7PCA953410setCONFREGEh>
		uint8_t r = gpio.Read_IP_REGISTER();
    1686:	86 e6       	ldi	r24, 0x66	; 102
    1688:	98 e0       	ldi	r25, 0x08	; 8
    168a:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN7PCA953416Read_IP_REGISTEREv>
    168e:	18 2f       	mov	r17, r24
    1690:	42 e0       	ldi	r20, 0x02	; 2
    1692:	be 01       	movw	r22, r28
    1694:	62 5f       	subi	r22, 0xF2	; 242
    1696:	7f 4f       	sbci	r23, 0xFF	; 255
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	0e 94 07 39 	call	0x720e	; 0x720e <__itoa_ncheck>
		char bufr[8];
		itoa(r,bufr,2);
		char ris[8];
		uint8_t z = (r ^ c);
		itoa(z,ris,2);
    169e:	10 27       	eor	r17, r16
    16a0:	01 2f       	mov	r16, r17
    16a2:	10 e0       	ldi	r17, 0x00	; 0
    16a4:	42 e0       	ldi	r20, 0x02	; 2
    16a6:	be 01       	movw	r22, r28
    16a8:	6f 5f       	subi	r22, 0xFF	; 255
    16aa:	7f 4f       	sbci	r23, 0xFF	; 255
    16ac:	c8 01       	movw	r24, r16
    16ae:	0e 94 07 39 	call	0x720e	; 0x720e <__itoa_ncheck>
		char T = getCharKeypad(int(z));
    16b2:	c8 01       	movw	r24, r16
    16b4:	0e 94 61 02 	call	0x4c2	; 0x4c2 <_Z13getCharKeypadi>
    16b8:	9f ef       	ldi	r25, 0xFF	; 255
    16ba:	29 ef       	ldi	r18, 0xF9	; 249
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	91 50       	subi	r25, 0x01	; 1
    16c0:	20 40       	sbci	r18, 0x00	; 0
    16c2:	30 40       	sbci	r19, 0x00	; 0
    16c4:	e1 f7       	brne	.-8      	; 0x16be <loop+0x306>
    16c6:	00 c0       	rjmp	.+0      	; 0x16c8 <loop+0x310>
		_delay_ms(20);
		/*****************************************************************/
    
		inputTarga(T); 
    16c8:	00 00       	nop
    16ca:	eb dc       	rcall	.-1578   	; 0x10a2 <_Z10inputTargac>
	//     righeDisplay[1] =  "****** TARGA ******";
	//     righeDisplay[2] = "TARGA:" + TARGA;
	//     righeDisplay[3] = "#:Conferma A:Usa TAG";
	//    displayLCD(righeDisplay,stato_procedura,10); 
    }
    break;
    16cc:	b4 c3       	rjmp	.+1896   	; 0x1e36 <loop+0xa7e>
    case 3:
    {  
		lcd.setCursor(0,0);
    16ce:	40 e0       	ldi	r20, 0x00	; 0
    16d0:	60 e0       	ldi	r22, 0x00	; 0
    16d2:	82 e4       	ldi	r24, 0x42	; 66
    16d4:	99 e0       	ldi	r25, 0x09	; 9
    16d6:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <_ZN3LCD9setCursorEhh>
		lcd.print((char)1);  // STAMPA LA CLESSIDRA
    16da:	61 e0       	ldi	r22, 0x01	; 1
    16dc:	82 e4       	ldi	r24, 0x42	; 66
    16de:	99 e0       	ldi	r25, 0x09	; 9
    16e0:	0e 94 e0 2f 	call	0x5fc0	; 0x5fc0 <_ZN5Print5printEc>
		lcd.print("Tempo: " + String((UltimoPassaggioStato+Timer-secs-1))+ " sec ");
    16e4:	40 91 7f 08 	lds	r20, 0x087F	; 0x80087f <UltimoPassaggioStato>
    16e8:	50 91 80 08 	lds	r21, 0x0880	; 0x800880 <UltimoPassaggioStato+0x1>
    16ec:	60 91 81 08 	lds	r22, 0x0881	; 0x800881 <UltimoPassaggioStato+0x2>
    16f0:	70 91 82 08 	lds	r23, 0x0882	; 0x800882 <UltimoPassaggioStato+0x3>
    16f4:	80 91 7b 08 	lds	r24, 0x087B	; 0x80087b <Timer>
    16f8:	90 91 7c 08 	lds	r25, 0x087C	; 0x80087c <Timer+0x1>
    16fc:	a0 91 7d 08 	lds	r26, 0x087D	; 0x80087d <Timer+0x2>
    1700:	b0 91 7e 08 	lds	r27, 0x087E	; 0x80087e <Timer+0x3>
    1704:	48 0f       	add	r20, r24
    1706:	59 1f       	adc	r21, r25
    1708:	6a 1f       	adc	r22, r26
    170a:	7b 1f       	adc	r23, r27
    170c:	41 50       	subi	r20, 0x01	; 1
    170e:	51 09       	sbc	r21, r1
    1710:	61 09       	sbc	r22, r1
    1712:	71 09       	sbc	r23, r1
    1714:	80 91 83 08 	lds	r24, 0x0883	; 0x800883 <secs>
    1718:	90 91 84 08 	lds	r25, 0x0884	; 0x800884 <secs+0x1>
    171c:	a0 91 85 08 	lds	r26, 0x0885	; 0x800885 <secs+0x2>
    1720:	b0 91 86 08 	lds	r27, 0x0886	; 0x800886 <secs+0x3>
    1724:	48 1b       	sub	r20, r24
    1726:	59 0b       	sbc	r21, r25
    1728:	6a 0b       	sbc	r22, r26
    172a:	7b 0b       	sbc	r23, r27
    172c:	2a e0       	ldi	r18, 0x0A	; 10
    172e:	ce 01       	movw	r24, r28
    1730:	0e 96       	adiw	r24, 0x0e	; 14
    1732:	0e 94 ca 33 	call	0x6794	; 0x6794 <_ZN6StringC1Emh>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1736:	67 eb       	ldi	r22, 0xB7	; 183
    1738:	75 e0       	ldi	r23, 0x05	; 5
    173a:	ce 01       	movw	r24, r28
    173c:	01 96       	adiw	r24, 0x01	; 1
    173e:	0e 94 a0 32 	call	0x6540	; 0x6540 <_ZN6StringC1EPKc>
    1742:	be 01       	movw	r22, r28
    1744:	62 5f       	subi	r22, 0xF2	; 242
    1746:	7f 4f       	sbci	r23, 0xFF	; 255
    1748:	ce 01       	movw	r24, r28
    174a:	01 96       	adiw	r24, 0x01	; 1
    174c:	0e 94 75 34 	call	0x68ea	; 0x68ea <_ZplRK15StringSumHelperRK6String>
    1750:	65 e5       	ldi	r22, 0x55	; 85
    1752:	75 e0       	ldi	r23, 0x05	; 5
    1754:	0e 94 86 34 	call	0x690c	; 0x690c <_ZplRK15StringSumHelperPKc>
    1758:	bc 01       	movw	r22, r24
    175a:	82 e4       	ldi	r24, 0x42	; 66
    175c:	99 e0       	ldi	r25, 0x09	; 9
    175e:	0e 94 d1 2f 	call	0x5fa2	; 0x5fa2 <_ZN5Print5printERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1762:	ce 01       	movw	r24, r28
    1764:	01 96       	adiw	r24, 0x01	; 1
    1766:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
    176a:	ce 01       	movw	r24, r28
    176c:	0e 96       	adiw	r24, 0x0e	; 14
    176e:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
		
		if (TARGA.length() == 5) 
    1772:	80 91 73 08 	lds	r24, 0x0873	; 0x800873 <TARGA+0x4>
    1776:	90 91 74 08 	lds	r25, 0x0874	; 0x800874 <TARGA+0x5>
    177a:	05 97       	sbiw	r24, 0x05	; 5
    177c:	69 f5       	brne	.+90     	; 0x17d8 <loop+0x420>
		{
		  mezzo.Carb = "X";
    177e:	6f e6       	ldi	r22, 0x6F	; 111
    1780:	74 e0       	ldi	r23, 0x04	; 4
    1782:	84 e6       	ldi	r24, 0x64	; 100
    1784:	99 e0       	ldi	r25, 0x09	; 9
    1786:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>
		  mezzo.TARGA = TARGA;
    178a:	6f e6       	ldi	r22, 0x6F	; 111
    178c:	78 e0       	ldi	r23, 0x08	; 8
    178e:	8a e6       	ldi	r24, 0x6A	; 106
    1790:	99 e0       	ldi	r25, 0x09	; 9
    1792:	0e 94 f7 32 	call	0x65ee	; 0x65ee <_ZN6StringaSERKS_>
		  mezzo.KM = "0";
    1796:	67 ef       	ldi	r22, 0xF7	; 247
    1798:	74 e0       	ldi	r23, 0x04	; 4
    179a:	80 e7       	ldi	r24, 0x70	; 112
    179c:	99 e0       	ldi	r25, 0x09	; 9
    179e:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>

		  righeDisplay[1] =  "****** DISTRIBUTORE ******";
    17a2:	6b e5       	ldi	r22, 0x5B	; 91
    17a4:	75 e0       	ldi	r23, 0x05	; 5
    17a6:	8b ec       	ldi	r24, 0xCB	; 203
    17a8:	98 e0       	ldi	r25, 0x08	; 8
    17aa:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>
		  righeDisplay[2] =  "";
    17ae:	60 e7       	ldi	r22, 0x70	; 112
    17b0:	71 e0       	ldi	r23, 0x01	; 1
    17b2:	81 ed       	ldi	r24, 0xD1	; 209
    17b4:	98 e0       	ldi	r25, 0x08	; 8
    17b6:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>
		  righeDisplay[3] = "**** SCEGLI ****";
    17ba:	66 e7       	ldi	r22, 0x76	; 118
    17bc:	75 e0       	ldi	r23, 0x05	; 5
    17be:	87 ed       	ldi	r24, 0xD7	; 215
    17c0:	98 e0       	ldi	r25, 0x08	; 8
    17c2:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>

		  avanzaStato(TselDistributore); 
    17c6:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <TselDistributore>
    17ca:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <TselDistributore+0x1>
    17ce:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <TselDistributore+0x2>
    17d2:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <TselDistributore+0x3>
    17d6:	77 c4       	rjmp	.+2286   	; 0x20c6 <loop+0xd0e>
// 		  righeDisplay[1] =  "AVVICINA TAG MEZZO";
// 		  righeDisplay[2] =  "";
// 		  righeDisplay[3] = "";
        
		  //String mezzoString = leggiTAG_Mezzo(false); // con TRUE scrive sul blocco 4 della card NFC DEL MEZZO
		  String mezzoString = leggiTAG_Mezzo(true); // con TRUE scrive sul blocco 4 della card NFC DEL MEZZO
    17d8:	61 e0       	ldi	r22, 0x01	; 1
    17da:	ce 01       	movw	r24, r28
    17dc:	0e 96       	adiw	r24, 0x0e	; 14
    17de:	0e 94 b4 03 	call	0x768	; 0x768 <_Z14leggiTAG_Mezzob>
    17e2:	8f e3       	ldi	r24, 0x3F	; 63
    17e4:	9c e9       	ldi	r25, 0x9C	; 156
    17e6:	01 97       	sbiw	r24, 0x01	; 1
    17e8:	f1 f7       	brne	.-4      	; 0x17e6 <loop+0x42e>
    17ea:	00 c0       	rjmp	.+0      	; 0x17ec <loop+0x434>
    17ec:	00 00       	nop
		  _delay_ms(10);

		  Serial.println(mezzoString);
    17ee:	be 01       	movw	r22, r28
    17f0:	62 5f       	subi	r22, 0xF2	; 242
    17f2:	7f 4f       	sbci	r23, 0xFF	; 255
    17f4:	8f ec       	ldi	r24, 0xCF	; 207
    17f6:	9a e0       	ldi	r25, 0x0A	; 10
    17f8:	0e 94 fa 2f 	call	0x5ff4	; 0x5ff4 <_ZN5Print7printlnERK6String>
	int indexOf( const String &str, unsigned int fromIndex ) const;
	int lastIndexOf( char ch ) const;
	int lastIndexOf( char ch, unsigned int fromIndex ) const;
	int lastIndexOf( const String &str ) const;
	int lastIndexOf( const String &str, unsigned int fromIndex ) const;
	String substring( unsigned int beginIndex ) const { return substring(beginIndex, len); };
    17fc:	2a 89       	ldd	r18, Y+18	; 0x12
    17fe:	3b 89       	ldd	r19, Y+19	; 0x13
    1800:	45 e0       	ldi	r20, 0x05	; 5
    1802:	50 e0       	ldi	r21, 0x00	; 0
    1804:	be 01       	movw	r22, r28
    1806:	62 5f       	subi	r22, 0xF2	; 242
    1808:	7f 4f       	sbci	r23, 0xFF	; 255
    180a:	ce 01       	movw	r24, r28
    180c:	01 96       	adiw	r24, 0x01	; 1
    180e:	0e 94 c7 34 	call	0x698e	; 0x698e <_ZNK6String9substringEjj>
      
		  mezzo.Carb = mezzoString.substring(5);
    1812:	be 01       	movw	r22, r28
    1814:	6f 5f       	subi	r22, 0xFF	; 255
    1816:	7f 4f       	sbci	r23, 0xFF	; 255
    1818:	84 e6       	ldi	r24, 0x64	; 100
    181a:	99 e0       	ldi	r25, 0x09	; 9
    181c:	0e 94 14 33 	call	0x6628	; 0x6628 <_ZN6StringaSEOS_>
    1820:	ce 01       	movw	r24, r28
    1822:	01 96       	adiw	r24, 0x01	; 1
    1824:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
		  mezzo.TARGA = mezzoString.substring(0,5);
    1828:	25 e0       	ldi	r18, 0x05	; 5
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	40 e0       	ldi	r20, 0x00	; 0
    182e:	50 e0       	ldi	r21, 0x00	; 0
    1830:	be 01       	movw	r22, r28
    1832:	62 5f       	subi	r22, 0xF2	; 242
    1834:	7f 4f       	sbci	r23, 0xFF	; 255
    1836:	ce 01       	movw	r24, r28
    1838:	01 96       	adiw	r24, 0x01	; 1
    183a:	0e 94 c7 34 	call	0x698e	; 0x698e <_ZNK6String9substringEjj>
    183e:	be 01       	movw	r22, r28
    1840:	6f 5f       	subi	r22, 0xFF	; 255
    1842:	7f 4f       	sbci	r23, 0xFF	; 255
    1844:	8a e6       	ldi	r24, 0x6A	; 106
    1846:	99 e0       	ldi	r25, 0x09	; 9
    1848:	0e 94 14 33 	call	0x6628	; 0x6628 <_ZN6StringaSEOS_>
    184c:	ce 01       	movw	r24, r28
    184e:	01 96       	adiw	r24, 0x01	; 1
    1850:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
		  mezzo.KM = "0";
    1854:	67 ef       	ldi	r22, 0xF7	; 247
    1856:	74 e0       	ldi	r23, 0x04	; 4
    1858:	80 e7       	ldi	r24, 0x70	; 112
    185a:	99 e0       	ldi	r25, 0x09	; 9
    185c:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1860:	67 e8       	ldi	r22, 0x87	; 135
    1862:	75 e0       	ldi	r23, 0x05	; 5
    1864:	ce 01       	movw	r24, r28
    1866:	01 96       	adiw	r24, 0x01	; 1
    1868:	0e 94 a0 32 	call	0x6540	; 0x6540 <_ZN6StringC1EPKc>

		  Serial.println("TIPO CARBURANTE: " + mezzo.Carb);    
    186c:	64 e6       	ldi	r22, 0x64	; 100
    186e:	79 e0       	ldi	r23, 0x09	; 9
    1870:	ce 01       	movw	r24, r28
    1872:	01 96       	adiw	r24, 0x01	; 1
    1874:	0e 94 75 34 	call	0x68ea	; 0x68ea <_ZplRK15StringSumHelperRK6String>
    1878:	bc 01       	movw	r22, r24
    187a:	8f ec       	ldi	r24, 0xCF	; 207
    187c:	9a e0       	ldi	r25, 0x0A	; 10
    187e:	0e 94 fa 2f 	call	0x5ff4	; 0x5ff4 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1882:	ce 01       	movw	r24, r28
    1884:	01 96       	adiw	r24, 0x01	; 1
    1886:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    188a:	69 e9       	ldi	r22, 0x99	; 153
    188c:	75 e0       	ldi	r23, 0x05	; 5
    188e:	ce 01       	movw	r24, r28
    1890:	01 96       	adiw	r24, 0x01	; 1
    1892:	0e 94 a0 32 	call	0x6540	; 0x6540 <_ZN6StringC1EPKc>
		  Serial.println("TARGA: " + mezzo.TARGA);              
    1896:	6a e6       	ldi	r22, 0x6A	; 106
    1898:	79 e0       	ldi	r23, 0x09	; 9
    189a:	ce 01       	movw	r24, r28
    189c:	01 96       	adiw	r24, 0x01	; 1
    189e:	0e 94 75 34 	call	0x68ea	; 0x68ea <_ZplRK15StringSumHelperRK6String>
    18a2:	bc 01       	movw	r22, r24
    18a4:	8f ec       	ldi	r24, 0xCF	; 207
    18a6:	9a e0       	ldi	r25, 0x0A	; 10
    18a8:	0e 94 fa 2f 	call	0x5ff4	; 0x5ff4 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    18ac:	ce 01       	movw	r24, r28
    18ae:	01 96       	adiw	r24, 0x01	; 1
    18b0:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>

		  Carburante = mezzo.Carb;                 
    18b4:	64 e6       	ldi	r22, 0x64	; 100
    18b6:	79 e0       	ldi	r23, 0x09	; 9
    18b8:	89 ee       	ldi	r24, 0xE9	; 233
    18ba:	98 e0       	ldi	r25, 0x08	; 8
    18bc:	0e 94 f7 32 	call	0x65ee	; 0x65ee <_ZN6StringaSERKS_>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    18c0:	61 ea       	ldi	r22, 0xA1	; 161
    18c2:	75 e0       	ldi	r23, 0x05	; 5
    18c4:	84 e6       	ldi	r24, 0x64	; 100
    18c6:	99 e0       	ldi	r25, 0x09	; 9
    18c8:	0e 94 a9 34 	call	0x6952	; 0x6952 <_ZNK6String6equalsEPKc>
		  if ((mezzo.Carb == "B") || (mezzo.Carb == "D")) {
    18cc:	81 11       	cpse	r24, r1
    18ce:	61 c3       	rjmp	.+1730   	; 0x1f92 <loop+0xbda>
    18d0:	63 ea       	ldi	r22, 0xA3	; 163
    18d2:	75 e0       	ldi	r23, 0x05	; 5
    18d4:	84 e6       	ldi	r24, 0x64	; 100
    18d6:	99 e0       	ldi	r25, 0x09	; 9
    18d8:	0e 94 a9 34 	call	0x6952	; 0x6952 <_ZNK6String6equalsEPKc>
    18dc:	81 11       	cpse	r24, r1
    18de:	59 c3       	rjmp	.+1714   	; 0x1f92 <loop+0xbda>
// 		  righeDisplay[1] =  "AVVICINA TAG MEZZO";
// 		  righeDisplay[2] =  "";
// 		  righeDisplay[3] = "";
        
		  //String mezzoString = leggiTAG_Mezzo(false); // con TRUE scrive sul blocco 4 della card NFC DEL MEZZO
		  String mezzoString = leggiTAG_Mezzo(true); // con TRUE scrive sul blocco 4 della card NFC DEL MEZZO
    18e0:	ce 01       	movw	r24, r28
    18e2:	0e 96       	adiw	r24, 0x0e	; 14
    18e4:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
    18e8:	a6 c2       	rjmp	.+1356   	; 0x1e36 <loop+0xa7e>
	   }
    }
    break;
    case 4:
    { 	
       righeDisplay[1] =  "****** DISTRIBUTORE ******";
    18ea:	6b e5       	ldi	r22, 0x5B	; 91
    18ec:	75 e0       	ldi	r23, 0x05	; 5
    18ee:	8b ec       	ldi	r24, 0xCB	; 203
    18f0:	98 e0       	ldi	r25, 0x08	; 8
    18f2:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>
       righeDisplay[2] =  "";
    18f6:	60 e7       	ldi	r22, 0x70	; 112
    18f8:	71 e0       	ldi	r23, 0x01	; 1
    18fa:	81 ed       	ldi	r24, 0xD1	; 209
    18fc:	98 e0       	ldi	r25, 0x08	; 8
    18fe:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>
       righeDisplay[3] = "**** SCEGLI ****";
    1902:	66 e7       	ldi	r22, 0x76	; 118
    1904:	75 e0       	ldi	r23, 0x05	; 5
    1906:	87 ed       	ldi	r24, 0xD7	; 215
    1908:	98 e0       	ldi	r25, 0x08	; 8
    190a:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>
    190e:	61 ea       	ldi	r22, 0xA1	; 161
    1910:	75 e0       	ldi	r23, 0x05	; 5
    1912:	84 e6       	ldi	r24, 0x64	; 100
    1914:	99 e0       	ldi	r25, 0x09	; 9
    1916:	0e 94 a9 34 	call	0x6952	; 0x6952 <_ZNK6String6equalsEPKc>

		//displayLCD(righeDisplay,stato_procedura,100);

		// Verifica scelta distributore
    
		if (mezzo.Carb == "B")
    191a:	88 23       	and	r24, r24
		{
			abilitaPulser('B');
    191c:	51 f0       	breq	.+20     	; 0x1932 <loop+0x57a>
    191e:	82 e4       	ldi	r24, 0x42	; 66
			Rele_Abilitazione2(0,7); // chiudi relè
    1920:	57 da       	rcall	.-2898   	; 0xdd0 <_Z13abilitaPulserc>
    1922:	67 e0       	ldi	r22, 0x07	; 7
    1924:	70 e0       	ldi	r23, 0x00	; 0
    1926:	80 e0       	ldi	r24, 0x00	; 0
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	c6 da       	rcall	.-2676   	; 0xeb8 <_Z18Rele_Abilitazione2ii>
			StatoAttuale = "POMPA 2";
    192c:	65 ea       	ldi	r22, 0xA5	; 165
    192e:	75 e0       	ldi	r23, 0x05	; 5
    1930:	12 c0       	rjmp	.+36     	; 0x1956 <loop+0x59e>
    1932:	63 ea       	ldi	r22, 0xA3	; 163
    1934:	75 e0       	ldi	r23, 0x05	; 5
    1936:	84 e6       	ldi	r24, 0x64	; 100
    1938:	99 e0       	ldi	r25, 0x09	; 9
    193a:	0e 94 a9 34 	call	0x6952	; 0x6952 <_ZNK6String6equalsEPKc>
			righeDisplay[1] =  "****** KM ******";
	 		righeDisplay[2] = "KM:" + KM;
	 		righeDisplay[3] = "#:Conferma";	 		
			avanzaStato(60);
		 }
		else if (mezzo.Carb == "D")
    193e:	88 23       	and	r24, r24
		{
			abilitaPulser('D');
    1940:	09 f4       	brne	.+2      	; 0x1944 <loop+0x58c>
    1942:	79 c2       	rjmp	.+1266   	; 0x1e36 <loop+0xa7e>
    1944:	84 e4       	ldi	r24, 0x44	; 68
			Rele_Abilitazione1(0,7); // chiudi relè
    1946:	44 da       	rcall	.-2936   	; 0xdd0 <_Z13abilitaPulserc>
    1948:	67 e0       	ldi	r22, 0x07	; 7
    194a:	70 e0       	ldi	r23, 0x00	; 0
    194c:	80 e0       	ldi	r24, 0x00	; 0
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	78 da       	rcall	.-2832   	; 0xe42 <_Z18Rele_Abilitazione1ii>
			StatoAttuale = "POMPA 1";
    1952:	6d ea       	ldi	r22, 0xAD	; 173
    1954:	75 e0       	ldi	r23, 0x05	; 5
    1956:	85 e2       	ldi	r24, 0x25	; 37
    1958:	99 e0       	ldi	r25, 0x09	; 9
    195a:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>
			RaccoltaDati[2] = mezzo.Carb;
    195e:	64 e6       	ldi	r22, 0x64	; 100
    1960:	79 e0       	ldi	r23, 0x09	; 9
    1962:	8b ef       	ldi	r24, 0xFB	; 251
    1964:	98 e0       	ldi	r25, 0x08	; 8
    1966:	0e 94 f7 32 	call	0x65ee	; 0x65ee <_ZN6StringaSERKS_>
			
			righeDisplay[1] =  "****** KM ******";
    196a:	6c ec       	ldi	r22, 0xCC	; 204
    196c:	74 e0       	ldi	r23, 0x04	; 4
    196e:	8b ec       	ldi	r24, 0xCB	; 203
    1970:	98 e0       	ldi	r25, 0x08	; 8
    1972:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1976:	6d ed       	ldi	r22, 0xDD	; 221
    1978:	74 e0       	ldi	r23, 0x04	; 4
    197a:	ce 01       	movw	r24, r28
    197c:	01 96       	adiw	r24, 0x01	; 1
    197e:	0e 94 a0 32 	call	0x6540	; 0x6540 <_ZN6StringC1EPKc>
			righeDisplay[2] = "KM:" + KM;
    1982:	69 e6       	ldi	r22, 0x69	; 105
    1984:	78 e0       	ldi	r23, 0x08	; 8
    1986:	ce 01       	movw	r24, r28
    1988:	01 96       	adiw	r24, 0x01	; 1
    198a:	0e 94 75 34 	call	0x68ea	; 0x68ea <_ZplRK15StringSumHelperRK6String>
    198e:	bc 01       	movw	r22, r24
    1990:	81 ed       	ldi	r24, 0xD1	; 209
    1992:	98 e0       	ldi	r25, 0x08	; 8
    1994:	0e 94 f7 32 	call	0x65ee	; 0x65ee <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1998:	ce 01       	movw	r24, r28
    199a:	01 96       	adiw	r24, 0x01	; 1
    199c:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
			righeDisplay[3] = "#:Conferma";
    19a0:	61 ee       	ldi	r22, 0xE1	; 225
    19a2:	74 e0       	ldi	r23, 0x04	; 4
    19a4:	87 ed       	ldi	r24, 0xD7	; 215
    19a6:	98 e0       	ldi	r25, 0x08	; 8
    19a8:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>
			avanzaStato(60);
    19ac:	6c e3       	ldi	r22, 0x3C	; 60
    19ae:	70 e0       	ldi	r23, 0x00	; 0
    19b0:	80 e0       	ldi	r24, 0x00	; 0
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	88 c3       	rjmp	.+1808   	; 0x20c6 <loop+0xd0e>
		}                          
    }
    break;
    case 5:
    {             
		lcd.setCursor(0,0);
    19b6:	40 e0       	ldi	r20, 0x00	; 0
    19b8:	60 e0       	ldi	r22, 0x00	; 0
    19ba:	82 e4       	ldi	r24, 0x42	; 66
    19bc:	99 e0       	ldi	r25, 0x09	; 9
    19be:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <_ZN3LCD9setCursorEhh>
		lcd.print((char)1);  // STAMPA LA CLESSIDRA
    19c2:	61 e0       	ldi	r22, 0x01	; 1
    19c4:	82 e4       	ldi	r24, 0x42	; 66
    19c6:	99 e0       	ldi	r25, 0x09	; 9
    19c8:	0e 94 e0 2f 	call	0x5fc0	; 0x5fc0 <_ZN5Print5printEc>
		lcd.print("Tempo: " + String((UltimoPassaggioStato+Timer-secs-1))+ " sec ");
    19cc:	40 91 7f 08 	lds	r20, 0x087F	; 0x80087f <UltimoPassaggioStato>
    19d0:	50 91 80 08 	lds	r21, 0x0880	; 0x800880 <UltimoPassaggioStato+0x1>
    19d4:	60 91 81 08 	lds	r22, 0x0881	; 0x800881 <UltimoPassaggioStato+0x2>
    19d8:	70 91 82 08 	lds	r23, 0x0882	; 0x800882 <UltimoPassaggioStato+0x3>
    19dc:	80 91 7b 08 	lds	r24, 0x087B	; 0x80087b <Timer>
    19e0:	90 91 7c 08 	lds	r25, 0x087C	; 0x80087c <Timer+0x1>
    19e4:	a0 91 7d 08 	lds	r26, 0x087D	; 0x80087d <Timer+0x2>
    19e8:	b0 91 7e 08 	lds	r27, 0x087E	; 0x80087e <Timer+0x3>
    19ec:	48 0f       	add	r20, r24
    19ee:	59 1f       	adc	r21, r25
    19f0:	6a 1f       	adc	r22, r26
    19f2:	7b 1f       	adc	r23, r27
    19f4:	41 50       	subi	r20, 0x01	; 1
    19f6:	51 09       	sbc	r21, r1
    19f8:	61 09       	sbc	r22, r1
    19fa:	71 09       	sbc	r23, r1
    19fc:	80 91 83 08 	lds	r24, 0x0883	; 0x800883 <secs>
    1a00:	90 91 84 08 	lds	r25, 0x0884	; 0x800884 <secs+0x1>
    1a04:	a0 91 85 08 	lds	r26, 0x0885	; 0x800885 <secs+0x2>
    1a08:	b0 91 86 08 	lds	r27, 0x0886	; 0x800886 <secs+0x3>
    1a0c:	48 1b       	sub	r20, r24
    1a0e:	59 0b       	sbc	r21, r25
    1a10:	6a 0b       	sbc	r22, r26
    1a12:	7b 0b       	sbc	r23, r27
    1a14:	2a e0       	ldi	r18, 0x0A	; 10
    1a16:	ce 01       	movw	r24, r28
    1a18:	0e 96       	adiw	r24, 0x0e	; 14
    1a1a:	0e 94 ca 33 	call	0x6794	; 0x6794 <_ZN6StringC1Emh>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1a1e:	67 eb       	ldi	r22, 0xB7	; 183
    1a20:	75 e0       	ldi	r23, 0x05	; 5
    1a22:	ce 01       	movw	r24, r28
    1a24:	01 96       	adiw	r24, 0x01	; 1
    1a26:	0e 94 a0 32 	call	0x6540	; 0x6540 <_ZN6StringC1EPKc>
    1a2a:	be 01       	movw	r22, r28
    1a2c:	62 5f       	subi	r22, 0xF2	; 242
    1a2e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a30:	ce 01       	movw	r24, r28
    1a32:	01 96       	adiw	r24, 0x01	; 1
    1a34:	0e 94 75 34 	call	0x68ea	; 0x68ea <_ZplRK15StringSumHelperRK6String>
    1a38:	65 e5       	ldi	r22, 0x55	; 85
    1a3a:	75 e0       	ldi	r23, 0x05	; 5
    1a3c:	0e 94 86 34 	call	0x690c	; 0x690c <_ZplRK15StringSumHelperPKc>
    1a40:	bc 01       	movw	r22, r24
    1a42:	82 e4       	ldi	r24, 0x42	; 66
    1a44:	99 e0       	ldi	r25, 0x09	; 9
    1a46:	0e 94 d1 2f 	call	0x5fa2	; 0x5fa2 <_ZN5Print5printERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1a4a:	ce 01       	movw	r24, r28
    1a4c:	01 96       	adiw	r24, 0x01	; 1
    1a4e:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
    1a52:	ce 01       	movw	r24, r28
    1a54:	0e 96       	adiw	r24, 0x0e	; 14

	   // RaccoltaDati[4] = "1234";
	   /*****************************************************************/
	   gpio.setCONFREG(0x3C);
    1a56:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
    1a5a:	6c e3       	ldi	r22, 0x3C	; 60
    1a5c:	86 e6       	ldi	r24, 0x66	; 102
    1a5e:	98 e0       	ldi	r25, 0x08	; 8
	   uint8_t c = gpio.Read_IP_REGISTER();
    1a60:	ac d7       	rcall	.+3928   	; 0x29ba <_ZN7PCA953410setCONFREGEh>
    1a62:	86 e6       	ldi	r24, 0x66	; 102
    1a64:	98 e0       	ldi	r25, 0x08	; 8
    1a66:	c0 d7       	rcall	.+3968   	; 0x29e8 <_ZN7PCA953416Read_IP_REGISTEREv>
    1a68:	08 2f       	mov	r16, r24
    1a6a:	42 e0       	ldi	r20, 0x02	; 2
    1a6c:	be 01       	movw	r22, r28
    1a6e:	6a 5e       	subi	r22, 0xEA	; 234
    1a70:	7f 4f       	sbci	r23, 0xFF	; 255
    1a72:	90 e0       	ldi	r25, 0x00	; 0
	   char buf[8];
	   itoa(c,buf,2);
	   gpio.setCONFREG(0xC3);
    1a74:	0e 94 07 39 	call	0x720e	; 0x720e <__itoa_ncheck>
    1a78:	63 ec       	ldi	r22, 0xC3	; 195
    1a7a:	86 e6       	ldi	r24, 0x66	; 102
    1a7c:	98 e0       	ldi	r25, 0x08	; 8
	   uint8_t r = gpio.Read_IP_REGISTER();
    1a7e:	9d d7       	rcall	.+3898   	; 0x29ba <_ZN7PCA953410setCONFREGEh>
    1a80:	86 e6       	ldi	r24, 0x66	; 102
    1a82:	98 e0       	ldi	r25, 0x08	; 8
    1a84:	b1 d7       	rcall	.+3938   	; 0x29e8 <_ZN7PCA953416Read_IP_REGISTEREv>
    1a86:	18 2f       	mov	r17, r24
    1a88:	42 e0       	ldi	r20, 0x02	; 2
    1a8a:	be 01       	movw	r22, r28
    1a8c:	62 5f       	subi	r22, 0xF2	; 242
    1a8e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	0e 94 07 39 	call	0x720e	; 0x720e <__itoa_ncheck>
	   char bufr[8];
	   itoa(r,bufr,2);
	   char ris[8];
	   uint8_t z = (r ^ c);
	   itoa(z,ris,2);
    1a96:	10 27       	eor	r17, r16
    1a98:	01 2f       	mov	r16, r17
    1a9a:	10 e0       	ldi	r17, 0x00	; 0
    1a9c:	42 e0       	ldi	r20, 0x02	; 2
    1a9e:	be 01       	movw	r22, r28
    1aa0:	6f 5f       	subi	r22, 0xFF	; 255
    1aa2:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa4:	c8 01       	movw	r24, r16
    1aa6:	0e 94 07 39 	call	0x720e	; 0x720e <__itoa_ncheck>
	   char T = getCharKeypad(int(z));
    1aaa:	c8 01       	movw	r24, r16
    1aac:	0e 94 61 02 	call	0x4c2	; 0x4c2 <_Z13getCharKeypadi>
    1ab0:	9f ef       	ldi	r25, 0xFF	; 255
    1ab2:	29 ef       	ldi	r18, 0xF9	; 249
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	91 50       	subi	r25, 0x01	; 1
    1ab8:	20 40       	sbci	r18, 0x00	; 0
    1aba:	30 40       	sbci	r19, 0x00	; 0
    1abc:	e1 f7       	brne	.-8      	; 0x1ab6 <loop+0x6fe>
    1abe:	00 c0       	rjmp	.+0      	; 0x1ac0 <loop+0x708>
	   _delay_ms(20);
	   /*****************************************************************/
   
	   inputKM(T);
    1ac0:	00 00       	nop
    1ac2:	ad db       	rcall	.-2214   	; 0x121e <_Z7inputKMc>
// 		righeDisplay[1] =  "****** KM ******";
// 		righeDisplay[2] = "KM:" + KM;
// 		righeDisplay[3] = "#:Conferma";
// 		displayLCD(righeDisplay,stato_procedura,10);
      
	    impulsi = 0;
    1ac4:	10 92 1a 09 	sts	0x091A, r1	; 0x80091a <impulsi+0x1>
    1ac8:	10 92 19 09 	sts	0x0919, r1	; 0x800919 <impulsi>
    }
    break;
    1acc:	b4 c1       	rjmp	.+872    	; 0x1e36 <loop+0xa7e>
    case 6:
    { 
	   lcd.setCursor(0,0);
    1ace:	40 e0       	ldi	r20, 0x00	; 0
    1ad0:	60 e0       	ldi	r22, 0x00	; 0
    1ad2:	82 e4       	ldi	r24, 0x42	; 66
    1ad4:	99 e0       	ldi	r25, 0x09	; 9
    1ad6:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <_ZN3LCD9setCursorEhh>
	   lcd.print((char)1);  // STAMPA LA CLESSIDRA
    1ada:	61 e0       	ldi	r22, 0x01	; 1
    1adc:	82 e4       	ldi	r24, 0x42	; 66
    1ade:	99 e0       	ldi	r25, 0x09	; 9
    1ae0:	0e 94 e0 2f 	call	0x5fc0	; 0x5fc0 <_ZN5Print5printEc>
	   lcd.print("  Tempo: " + String((UltimoPassaggioStato+Timer-secs-1))+ " sec ");
    1ae4:	40 91 7f 08 	lds	r20, 0x087F	; 0x80087f <UltimoPassaggioStato>
    1ae8:	50 91 80 08 	lds	r21, 0x0880	; 0x800880 <UltimoPassaggioStato+0x1>
    1aec:	60 91 81 08 	lds	r22, 0x0881	; 0x800881 <UltimoPassaggioStato+0x2>
    1af0:	70 91 82 08 	lds	r23, 0x0882	; 0x800882 <UltimoPassaggioStato+0x3>
    1af4:	80 91 7b 08 	lds	r24, 0x087B	; 0x80087b <Timer>
    1af8:	90 91 7c 08 	lds	r25, 0x087C	; 0x80087c <Timer+0x1>
    1afc:	a0 91 7d 08 	lds	r26, 0x087D	; 0x80087d <Timer+0x2>
    1b00:	b0 91 7e 08 	lds	r27, 0x087E	; 0x80087e <Timer+0x3>
    1b04:	48 0f       	add	r20, r24
    1b06:	59 1f       	adc	r21, r25
    1b08:	6a 1f       	adc	r22, r26
    1b0a:	7b 1f       	adc	r23, r27
    1b0c:	41 50       	subi	r20, 0x01	; 1
    1b0e:	51 09       	sbc	r21, r1
    1b10:	61 09       	sbc	r22, r1
    1b12:	71 09       	sbc	r23, r1
    1b14:	80 91 83 08 	lds	r24, 0x0883	; 0x800883 <secs>
    1b18:	90 91 84 08 	lds	r25, 0x0884	; 0x800884 <secs+0x1>
    1b1c:	a0 91 85 08 	lds	r26, 0x0885	; 0x800885 <secs+0x2>
    1b20:	b0 91 86 08 	lds	r27, 0x0886	; 0x800886 <secs+0x3>
    1b24:	48 1b       	sub	r20, r24
    1b26:	59 0b       	sbc	r21, r25
    1b28:	6a 0b       	sbc	r22, r26
    1b2a:	7b 0b       	sbc	r23, r27
    1b2c:	2a e0       	ldi	r18, 0x0A	; 10
    1b2e:	ce 01       	movw	r24, r28
    1b30:	0e 96       	adiw	r24, 0x0e	; 14
    1b32:	0e 94 ca 33 	call	0x6794	; 0x6794 <_ZN6StringC1Emh>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1b36:	65 eb       	ldi	r22, 0xB5	; 181
    1b38:	75 e0       	ldi	r23, 0x05	; 5
    1b3a:	ce 01       	movw	r24, r28
    1b3c:	01 96       	adiw	r24, 0x01	; 1
    1b3e:	0e 94 a0 32 	call	0x6540	; 0x6540 <_ZN6StringC1EPKc>
    1b42:	be 01       	movw	r22, r28
    1b44:	62 5f       	subi	r22, 0xF2	; 242
    1b46:	7f 4f       	sbci	r23, 0xFF	; 255
    1b48:	ce 01       	movw	r24, r28
    1b4a:	01 96       	adiw	r24, 0x01	; 1
    1b4c:	0e 94 75 34 	call	0x68ea	; 0x68ea <_ZplRK15StringSumHelperRK6String>
    1b50:	65 e5       	ldi	r22, 0x55	; 85
    1b52:	75 e0       	ldi	r23, 0x05	; 5
    1b54:	0e 94 86 34 	call	0x690c	; 0x690c <_ZplRK15StringSumHelperPKc>
    1b58:	bc 01       	movw	r22, r24
    1b5a:	82 e4       	ldi	r24, 0x42	; 66
    1b5c:	99 e0       	ldi	r25, 0x09	; 9
    1b5e:	0e 94 d1 2f 	call	0x5fa2	; 0x5fa2 <_ZN5Print5printERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1b62:	ce 01       	movw	r24, r28
    1b64:	01 96       	adiw	r24, 0x01	; 1
    1b66:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
    1b6a:	ce 01       	movw	r24, r28
    1b6c:	0e 96       	adiw	r24, 0x0e	; 14
    1b6e:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
  
	   disable_ETH();
    1b72:	0e 94 92 01 	call	0x324	; 0x324 <_ZL11disable_ETHv>
    1b76:	8f e3       	ldi	r24, 0x3F	; 63
    1b78:	9f e1       	ldi	r25, 0x1F	; 31
    1b7a:	01 97       	sbiw	r24, 0x01	; 1
    1b7c:	f1 f7       	brne	.-4      	; 0x1b7a <loop+0x7c2>
    1b7e:	00 c0       	rjmp	.+0      	; 0x1b80 <loop+0x7c8>
static const uint8_t RELE1 = PORTC7;
static const uint8_t RELE2 = PORTA7;
/*********************************************************************************************/
static inline void initSS_FLASH()  { DDRB |= (1 << PB4); } // set DDRB bit 4, sets PB4 for output
static inline void initSS_ETH()    { DDRC |= (1 << PC4); } // set DDRC bit 4, sets PC4 for output
static inline void enable_ETH()    { PORTC &= ~(1 << PC4); } // Set 0 Bit 4 PORTC Register
    1b80:	00 00       	nop
  
	   disable_ETH();
	   _delay_ms(2);
	   enable_ETH();
    
       double lt = impulsiToLitri(impulsi);      
    1b82:	44 98       	cbi	0x08, 4	; 8
    1b84:	80 91 19 09 	lds	r24, 0x0919	; 0x800919 <impulsi>
    1b88:	90 91 1a 09 	lds	r25, 0x091A	; 0x80091a <impulsi+0x1>
    1b8c:	2f d9       	rcall	.-3490   	; 0xdec <_Z14impulsiToLitrii>
    1b8e:	6b 01       	movw	r12, r22
    1b90:	7c 01       	movw	r14, r24
      
       righeDisplay[1] = "LITRI :" + String(lt);
    1b92:	22 e0       	ldi	r18, 0x02	; 2
    1b94:	ab 01       	movw	r20, r22
    1b96:	bc 01       	movw	r22, r24
    1b98:	ce 01       	movw	r24, r28
    1b9a:	0e 96       	adiw	r24, 0x0e	; 14
    1b9c:	0e 94 f5 33 	call	0x67ea	; 0x67ea <_ZN6StringC1Edh>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1ba0:	6f eb       	ldi	r22, 0xBF	; 191
    1ba2:	75 e0       	ldi	r23, 0x05	; 5
    1ba4:	ce 01       	movw	r24, r28
    1ba6:	01 96       	adiw	r24, 0x01	; 1
    1ba8:	0e 94 a0 32 	call	0x6540	; 0x6540 <_ZN6StringC1EPKc>
    1bac:	be 01       	movw	r22, r28
    1bae:	62 5f       	subi	r22, 0xF2	; 242
    1bb0:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb2:	ce 01       	movw	r24, r28
    1bb4:	01 96       	adiw	r24, 0x01	; 1
    1bb6:	0e 94 75 34 	call	0x68ea	; 0x68ea <_ZplRK15StringSumHelperRK6String>
    1bba:	bc 01       	movw	r22, r24
    1bbc:	8b ec       	ldi	r24, 0xCB	; 203
    1bbe:	98 e0       	ldi	r25, 0x08	; 8
    1bc0:	0e 94 f7 32 	call	0x65ee	; 0x65ee <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1bc4:	ce 01       	movw	r24, r28
    1bc6:	01 96       	adiw	r24, 0x01	; 1
    1bc8:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
    1bcc:	ce 01       	movw	r24, r28
    1bce:	0e 96       	adiw	r24, 0x0e	; 14
    1bd0:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
       righeDisplay[2] = "imp :" + String(impulsi);  
    1bd4:	60 91 19 09 	lds	r22, 0x0919	; 0x800919 <impulsi>
    1bd8:	70 91 1a 09 	lds	r23, 0x091A	; 0x80091a <impulsi+0x1>
    1bdc:	4a e0       	ldi	r20, 0x0A	; 10
    1bde:	ce 01       	movw	r24, r28
    1be0:	0e 96       	adiw	r24, 0x0e	; 14
    1be2:	0e 94 76 33 	call	0x66ec	; 0x66ec <_ZN6StringC1Eih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1be6:	69 ef       	ldi	r22, 0xF9	; 249
    1be8:	74 e0       	ldi	r23, 0x04	; 4
    1bea:	ce 01       	movw	r24, r28
    1bec:	01 96       	adiw	r24, 0x01	; 1
    1bee:	0e 94 a0 32 	call	0x6540	; 0x6540 <_ZN6StringC1EPKc>
    1bf2:	be 01       	movw	r22, r28
    1bf4:	62 5f       	subi	r22, 0xF2	; 242
    1bf6:	7f 4f       	sbci	r23, 0xFF	; 255
    1bf8:	ce 01       	movw	r24, r28
    1bfa:	01 96       	adiw	r24, 0x01	; 1
    1bfc:	0e 94 75 34 	call	0x68ea	; 0x68ea <_ZplRK15StringSumHelperRK6String>
    1c00:	bc 01       	movw	r22, r24
    1c02:	81 ed       	ldi	r24, 0xD1	; 209
    1c04:	98 e0       	ldi	r25, 0x08	; 8
    1c06:	0e 94 f7 32 	call	0x65ee	; 0x65ee <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1c0a:	ce 01       	movw	r24, r28
    1c0c:	01 96       	adiw	r24, 0x01	; 1
    1c0e:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
    1c12:	ce 01       	movw	r24, r28
    1c14:	0e 96       	adiw	r24, 0x0e	; 14
    1c16:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1c1a:	6f ef       	ldi	r22, 0xFF	; 255
    1c1c:	74 e0       	ldi	r23, 0x04	; 4
    1c1e:	ce 01       	movw	r24, r28
    1c20:	01 96       	adiw	r24, 0x01	; 1
    1c22:	0e 94 a0 32 	call	0x6540	; 0x6540 <_ZN6StringC1EPKc>
       righeDisplay[3] = "Erogazione: " + StatoAttuale;
    1c26:	65 e2       	ldi	r22, 0x25	; 37
    1c28:	79 e0       	ldi	r23, 0x09	; 9
    1c2a:	ce 01       	movw	r24, r28
    1c2c:	01 96       	adiw	r24, 0x01	; 1
    1c2e:	0e 94 75 34 	call	0x68ea	; 0x68ea <_ZplRK15StringSumHelperRK6String>
    1c32:	bc 01       	movw	r22, r24
    1c34:	87 ed       	ldi	r24, 0xD7	; 215
    1c36:	98 e0       	ldi	r25, 0x08	; 8
    1c38:	0e 94 f7 32 	call	0x65ee	; 0x65ee <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1c3c:	ce 01       	movw	r24, r28
    1c3e:	01 96       	adiw	r24, 0x01	; 1
    1c40:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
	   
	   
	   lcd.setCursor(0,1);
    1c44:	41 e0       	ldi	r20, 0x01	; 1
    1c46:	60 e0       	ldi	r22, 0x00	; 0
    1c48:	82 e4       	ldi	r24, 0x42	; 66
    1c4a:	99 e0       	ldi	r25, 0x09	; 9
    1c4c:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <_ZN3LCD9setCursorEhh>
	   lcd.print(righeDisplay[1]);
    1c50:	6b ec       	ldi	r22, 0xCB	; 203
    1c52:	78 e0       	ldi	r23, 0x08	; 8
    1c54:	82 e4       	ldi	r24, 0x42	; 66
    1c56:	99 e0       	ldi	r25, 0x09	; 9
    1c58:	0e 94 d1 2f 	call	0x5fa2	; 0x5fa2 <_ZN5Print5printERK6String>
	   lcd.setCursor(0,2);
    1c5c:	42 e0       	ldi	r20, 0x02	; 2
    1c5e:	60 e0       	ldi	r22, 0x00	; 0
    1c60:	82 e4       	ldi	r24, 0x42	; 66
    1c62:	99 e0       	ldi	r25, 0x09	; 9
    1c64:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <_ZN3LCD9setCursorEhh>
	   lcd.print(righeDisplay[2]);
    1c68:	61 ed       	ldi	r22, 0xD1	; 209
    1c6a:	78 e0       	ldi	r23, 0x08	; 8
    1c6c:	82 e4       	ldi	r24, 0x42	; 66
    1c6e:	99 e0       	ldi	r25, 0x09	; 9
    1c70:	0e 94 d1 2f 	call	0x5fa2	; 0x5fa2 <_ZN5Print5printERK6String>
	   lcd.setCursor(0,3);
    1c74:	43 e0       	ldi	r20, 0x03	; 3
    1c76:	60 e0       	ldi	r22, 0x00	; 0
    1c78:	82 e4       	ldi	r24, 0x42	; 66
    1c7a:	99 e0       	ldi	r25, 0x09	; 9
    1c7c:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <_ZN3LCD9setCursorEhh>
	   lcd.print(righeDisplay[3]);
    1c80:	67 ed       	ldi	r22, 0xD7	; 215
    1c82:	78 e0       	ldi	r23, 0x08	; 8
    1c84:	82 e4       	ldi	r24, 0x42	; 66
    1c86:	99 e0       	ldi	r25, 0x09	; 9
    1c88:	0e 94 d1 2f 	call	0x5fa2	; 0x5fa2 <_ZN5Print5printERK6String>
      
      // displayLCD(righeDisplay,stato_procedura,10);   

      /* CONTATTO PISTOLA DIESEL */
      
      if ((PINA & _BV(PA1)) && (Carburante == "D"))
    1c8c:	01 9b       	sbis	0x00, 1	; 0
    1c8e:	08 c0       	rjmp	.+16     	; 0x1ca0 <loop+0x8e8>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    1c90:	63 ea       	ldi	r22, 0xA3	; 163
    1c92:	75 e0       	ldi	r23, 0x05	; 5
    1c94:	89 ee       	ldi	r24, 0xE9	; 233
    1c96:	98 e0       	ldi	r25, 0x08	; 8
    1c98:	0e 94 a9 34 	call	0x6952	; 0x6952 <_ZNK6String6equalsEPKc>
    1c9c:	81 11       	cpse	r24, r1
    1c9e:	b8 c1       	rjmp	.+880    	; 0x2010 <loop+0xc58>
        avanzaStato(10);
      }
      
      /* CONTATTO PISTOLA BENZINA */
      
      if  ((PINB & _BV(PB1)) && (Carburante == "B"))
    1ca0:	19 9b       	sbis	0x03, 1	; 3
    1ca2:	c9 c0       	rjmp	.+402    	; 0x1e36 <loop+0xa7e>
    1ca4:	61 ea       	ldi	r22, 0xA1	; 161
    1ca6:	75 e0       	ldi	r23, 0x05	; 5
    1ca8:	89 ee       	ldi	r24, 0xE9	; 233
    1caa:	98 e0       	ldi	r25, 0x08	; 8
    1cac:	0e 94 a9 34 	call	0x6952	; 0x6952 <_ZNK6String6equalsEPKc>
    1cb0:	81 11       	cpse	r24, r1
    1cb2:	dd c1       	rjmp	.+954    	; 0x206e <loop+0xcb6>
    1cb4:	c0 c0       	rjmp	.+384    	; 0x1e36 <loop+0xa7e>
      /**************************************
       Control_WIFI(1);
       _delay_ms(2000);
      /**************************************/
      
      righeDisplay[1] =  "";      
    1cb6:	60 e7       	ldi	r22, 0x70	; 112
    1cb8:	71 e0       	ldi	r23, 0x01	; 1
    1cba:	8b ec       	ldi	r24, 0xCB	; 203
    1cbc:	98 e0       	ldi	r25, 0x08	; 8
    1cbe:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>
      righeDisplay[2] = "Invio........";
    1cc2:	67 ec       	ldi	r22, 0xC7	; 199
    1cc4:	75 e0       	ldi	r23, 0x05	; 5
    1cc6:	81 ed       	ldi	r24, 0xD1	; 209
    1cc8:	98 e0       	ldi	r25, 0x08	; 8
    1cca:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>
      righeDisplay[3] =  "";
    1cce:	60 e7       	ldi	r22, 0x70	; 112
    1cd0:	71 e0       	ldi	r23, 0x01	; 1
    1cd2:	87 ed       	ldi	r24, 0xD7	; 215
    1cd4:	98 e0       	ldi	r25, 0x08	; 8
    1cd6:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>
          
      if (BIT_IS_CLEAR(PORTC,4)) 
    1cda:	44 99       	sbic	0x08, 4	; 8
    1cdc:	ac c0       	rjmp	.+344    	; 0x1e36 <loop+0xa7e>
      {
        displayLCD(righeDisplay,stato_procedura,10);  
    1cde:	60 91 1b 09 	lds	r22, 0x091B	; 0x80091b <stato_procedura>
    1ce2:	70 91 1c 09 	lds	r23, 0x091C	; 0x80091c <stato_procedura+0x1>
    1ce6:	4a e0       	ldi	r20, 0x0A	; 10
    1ce8:	50 e0       	ldi	r21, 0x00	; 0
    1cea:	85 ec       	ldi	r24, 0xC5	; 197
    1cec:	98 e0       	ldi	r25, 0x08	; 8
    1cee:	0e 94 47 03 	call	0x68e	; 0x68e <_Z10displayLCDP6Stringii>

        Messaggio = ""; 
    1cf2:	60 e7       	ldi	r22, 0x70	; 112
    1cf4:	71 e0       	ldi	r23, 0x01	; 1
    1cf6:	8d ed       	ldi	r24, 0xDD	; 221
    1cf8:	98 e0       	ldi	r25, 0x08	; 8
    1cfa:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>
    1cfe:	0f ee       	ldi	r16, 0xEF	; 239
    1d00:	18 e0       	ldi	r17, 0x08	; 8
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
    1d02:	b8 01       	movw	r22, r16
    1d04:	ce 01       	movw	r24, r28
    1d06:	01 96       	adiw	r24, 0x01	; 1
    1d08:	0e 94 0c 33 	call	0x6618	; 0x6618 <_ZN6StringC1ERKS_>
        
        for (int k = 0;k<6;k++)
          Messaggio.concat(RaccoltaDati[k]+";");  
    1d0c:	65 ed       	ldi	r22, 0xD5	; 213
    1d0e:	75 e0       	ldi	r23, 0x05	; 5
    1d10:	ce 01       	movw	r24, r28
    1d12:	01 96       	adiw	r24, 0x01	; 1
    1d14:	0e 94 86 34 	call	0x690c	; 0x690c <_ZplRK15StringSumHelperPKc>
    1d18:	bc 01       	movw	r22, r24
    1d1a:	8d ed       	ldi	r24, 0xDD	; 221
    1d1c:	98 e0       	ldi	r25, 0x08	; 8
    1d1e:	0e 94 4f 34 	call	0x689e	; 0x689e <_ZN6String6concatERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1d22:	ce 01       	movw	r24, r28
    1d24:	01 96       	adiw	r24, 0x01	; 1
    1d26:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
    1d2a:	0a 5f       	subi	r16, 0xFA	; 250
    1d2c:	1f 4f       	sbci	r17, 0xFF	; 255
      {
        displayLCD(righeDisplay,stato_procedura,10);  

        Messaggio = ""; 
        
        for (int k = 0;k<6;k++)
    1d2e:	99 e0       	ldi	r25, 0x09	; 9
    1d30:	03 31       	cpi	r16, 0x13	; 19
    1d32:	19 07       	cpc	r17, r25
    1d34:	31 f7       	brne	.-52     	; 0x1d02 <loop+0x94a>
          Messaggio.concat(RaccoltaDati[k]+";");  
      
		Messaggio.concat(CodSede);
    1d36:	6e e3       	ldi	r22, 0x3E	; 62
    1d38:	71 e0       	ldi	r23, 0x01	; 1
    1d3a:	8d ed       	ldi	r24, 0xDD	; 221
    1d3c:	98 e0       	ldi	r25, 0x08	; 8
    1d3e:	0e 94 55 34 	call	0x68aa	; 0x68aa <_ZN6String6concatEPKc>
    1d42:	2f ef       	ldi	r18, 0xFF	; 255
    1d44:	33 ed       	ldi	r19, 0xD3	; 211
    1d46:	80 e3       	ldi	r24, 0x30	; 48
    1d48:	21 50       	subi	r18, 0x01	; 1
    1d4a:	30 40       	sbci	r19, 0x00	; 0
    1d4c:	80 40       	sbci	r24, 0x00	; 0
    1d4e:	e1 f7       	brne	.-8      	; 0x1d48 <loop+0x990>
    1d50:	00 c0       	rjmp	.+0      	; 0x1d52 <loop+0x99a>
    1d52:	00 00       	nop
		// Messaggio = "DD92743A;28530;D;15.03;1234;000;SA10012";
  
		_delay_ms(1000);      
        
		//if (PostErogazione(5001,serverREST,clientLOCAL,Messaggio))
		if (PostErogazioneGAC(80,serverREST,clientLOCAL,Messaggio))
    1d54:	6d ed       	ldi	r22, 0xDD	; 221
    1d56:	78 e0       	ldi	r23, 0x08	; 8
    1d58:	ce 01       	movw	r24, r28
    1d5a:	0e 96       	adiw	r24, 0x0e	; 14
    1d5c:	0e 94 0c 33 	call	0x6618	; 0x6618 <_ZN6StringC1ERKS_>
#ifdef BIN // Prevent warnings if BIN is previously defined in "iotnx4.h" or similar
#undef BIN
#endif
#define BIN 2

class Print
    1d60:	80 91 a2 08 	lds	r24, 0x08A2	; 0x8008a2 <clientLOCAL+0x2>
    1d64:	90 91 a3 08 	lds	r25, 0x08A3	; 0x8008a3 <clientLOCAL+0x3>
    1d68:	9c 83       	std	Y+4, r25	; 0x04
    1d6a:	8b 83       	std	Y+3, r24	; 0x03
    SKIP_WHITESPACE // Only tabs, spaces, line feeds & carriage returns are skipped.
};

#define NO_IGNORE_CHAR  '\x01' // a char not found in a valid ASCII numeric field

class Stream : public Print
    1d6c:	80 91 a4 08 	lds	r24, 0x08A4	; 0x8008a4 <clientLOCAL+0x4>
    1d70:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <clientLOCAL+0x5>
    1d74:	a0 91 a6 08 	lds	r26, 0x08A6	; 0x8008a6 <clientLOCAL+0x6>
    1d78:	b0 91 a7 08 	lds	r27, 0x08A7	; 0x8008a7 <clientLOCAL+0x7>
    1d7c:	8d 83       	std	Y+5, r24	; 0x05
    1d7e:	9e 83       	std	Y+6, r25	; 0x06
    1d80:	af 83       	std	Y+7, r26	; 0x07
    1d82:	b8 87       	std	Y+8, r27	; 0x08
    1d84:	80 91 a8 08 	lds	r24, 0x08A8	; 0x8008a8 <clientLOCAL+0x8>
    1d88:	90 91 a9 08 	lds	r25, 0x08A9	; 0x8008a9 <clientLOCAL+0x9>
    1d8c:	a0 91 aa 08 	lds	r26, 0x08AA	; 0x8008aa <clientLOCAL+0xa>
    1d90:	b0 91 ab 08 	lds	r27, 0x08AB	; 0x8008ab <clientLOCAL+0xb>
    1d94:	89 87       	std	Y+9, r24	; 0x09
    1d96:	9a 87       	std	Y+10, r25	; 0x0a
    1d98:	ab 87       	std	Y+11, r26	; 0x0b
    1d9a:	bc 87       	std	Y+12, r27	; 0x0c
#include "Arduino.h"	
#include "Print.h"
#include "Client.h"
#include "IPAddress.h"

class EthernetClient : public Client {
    1d9c:	81 ec       	ldi	r24, 0xC1	; 193
    1d9e:	97 e0       	ldi	r25, 0x07	; 7
    1da0:	9a 83       	std	Y+2, r25	; 0x02
    1da2:	89 83       	std	Y+1, r24	; 0x01
    1da4:	80 91 ac 08 	lds	r24, 0x08AC	; 0x8008ac <clientLOCAL+0xc>
    1da8:	8d 87       	std	Y+13, r24	; 0x0d
    1daa:	9e 01       	movw	r18, r28
    1dac:	22 5f       	subi	r18, 0xF2	; 242
    1dae:	3f 4f       	sbci	r19, 0xFF	; 255
    1db0:	ae 01       	movw	r20, r28
    1db2:	4f 5f       	subi	r20, 0xFF	; 255
    1db4:	5f 4f       	sbci	r21, 0xFF	; 255
    1db6:	6c e2       	ldi	r22, 0x2C	; 44
    1db8:	71 e0       	ldi	r23, 0x01	; 1
    1dba:	80 e5       	ldi	r24, 0x50	; 80
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	0e 94 54 05 	call	0xaa8	; 0xaa8 <_Z17PostErogazioneGACiPc14EthernetClient6String>
    1dc2:	18 2f       	mov	r17, r24
    1dc4:	ce 01       	movw	r24, r28
    1dc6:	0e 96       	adiw	r24, 0x0e	; 14
    1dc8:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
    1dcc:	11 23       	and	r17, r17
    1dce:	39 f1       	breq	.+78     	; 0x1e1e <loop+0xa66>
		{
		  disable_ETH();    
    1dd0:	0e 94 92 01 	call	0x324	; 0x324 <_ZL11disable_ETHv>
		  righeDisplay[1] = "";
    1dd4:	60 e7       	ldi	r22, 0x70	; 112
    1dd6:	71 e0       	ldi	r23, 0x01	; 1
    1dd8:	8b ec       	ldi	r24, 0xCB	; 203
    1dda:	98 e0       	ldi	r25, 0x08	; 8
    1ddc:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>
		  righeDisplay[2] = " Dati Inviati ";
    1de0:	67 ed       	ldi	r22, 0xD7	; 215
    1de2:	75 e0       	ldi	r23, 0x05	; 5
    1de4:	81 ed       	ldi	r24, 0xD1	; 209
    1de6:	98 e0       	ldi	r25, 0x08	; 8
    1de8:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>
		  righeDisplay[3] =  "";    
    1dec:	60 e7       	ldi	r22, 0x70	; 112
    1dee:	71 e0       	ldi	r23, 0x01	; 1
    1df0:	87 ed       	ldi	r24, 0xD7	; 215
    1df2:	98 e0       	ldi	r25, 0x08	; 8
    1df4:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>
		  displayLCD(righeDisplay,stato_procedura,100);    
    1df8:	60 91 1b 09 	lds	r22, 0x091B	; 0x80091b <stato_procedura>
    1dfc:	70 91 1c 09 	lds	r23, 0x091C	; 0x80091c <stato_procedura+0x1>
    1e00:	44 e6       	ldi	r20, 0x64	; 100
    1e02:	50 e0       	ldi	r21, 0x00	; 0
    1e04:	85 ec       	ldi	r24, 0xC5	; 197
    1e06:	98 e0       	ldi	r25, 0x08	; 8
    1e08:	0e 94 47 03 	call	0x68e	; 0x68e <_Z10displayLCDP6Stringii>
    1e0c:	9f ef       	ldi	r25, 0xFF	; 255
    1e0e:	29 ef       	ldi	r18, 0xF9	; 249
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	91 50       	subi	r25, 0x01	; 1
    1e14:	20 40       	sbci	r18, 0x00	; 0
    1e16:	30 40       	sbci	r19, 0x00	; 0
    1e18:	e1 f7       	brne	.-8      	; 0x1e12 <loop+0xa5a>
    1e1a:	00 c0       	rjmp	.+0      	; 0x1e1c <loop+0xa64>
		  _delay_ms(20);
		}
    
		disable_ETH();
    1e1c:	00 00       	nop
    1e1e:	0e 94 92 01 	call	0x324	; 0x324 <_ZL11disable_ETHv>
		avanzaStato(TmaxSalvataggio);
    1e22:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <TmaxSalvataggio>
    1e26:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <TmaxSalvataggio+0x1>
    1e2a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <TmaxSalvataggio+0x2>
    1e2e:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <TmaxSalvataggio+0x3>
   Azzera();    
    }
    break;
    case 9:
    {        
      Azzera();    
    1e32:	49 c1       	rjmp	.+658    	; 0x20c6 <loop+0xd0e>
    1e34:	98 d8       	rcall	.-3792   	; 0xf66 <_Z6Azzerav>
    {      
    }
    break;
  }

  nowTimer = DS3231M.now();
    1e36:	67 e8       	ldi	r22, 0x87	; 135
    1e38:	78 e0       	ldi	r23, 0x08	; 8
    1e3a:	ce 01       	movw	r24, r28
    1e3c:	01 96       	adiw	r24, 0x01	; 1
    1e3e:	0e 94 91 1a 	call	0x3522	; 0x3522 <_ZN13DS3231M_Class3nowEv>
    1e42:	86 e0       	ldi	r24, 0x06	; 6
    1e44:	fe 01       	movw	r30, r28
    1e46:	31 96       	adiw	r30, 0x01	; 1
    1e48:	a5 e7       	ldi	r26, 0x75	; 117
    1e4a:	b8 e0       	ldi	r27, 0x08	; 8
    1e4c:	01 90       	ld	r0, Z+
    1e4e:	0d 92       	st	X+, r0
    1e50:	8a 95       	dec	r24
    1e52:	e1 f7       	brne	.-8      	; 0x1e4c <loop+0xa94>
  secs = nowTimer.secondstime();
    1e54:	85 e7       	ldi	r24, 0x75	; 117
    1e56:	98 e0       	ldi	r25, 0x08	; 8
    1e58:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <_ZNK8DateTime11secondstimeEv>
    1e5c:	60 93 83 08 	sts	0x0883, r22	; 0x800883 <secs>
    1e60:	70 93 84 08 	sts	0x0884, r23	; 0x800884 <secs+0x1>
    1e64:	80 93 85 08 	sts	0x0885, r24	; 0x800885 <secs+0x2>
    1e68:	90 93 86 08 	sts	0x0886, r25	; 0x800886 <secs+0x3>
  if ((UltimoPassaggioStato+Timer-secs) <= 1) Azzera();
    1e6c:	00 91 7f 08 	lds	r16, 0x087F	; 0x80087f <UltimoPassaggioStato>
    1e70:	10 91 80 08 	lds	r17, 0x0880	; 0x800880 <UltimoPassaggioStato+0x1>
    1e74:	20 91 81 08 	lds	r18, 0x0881	; 0x800881 <UltimoPassaggioStato+0x2>
    1e78:	30 91 82 08 	lds	r19, 0x0882	; 0x800882 <UltimoPassaggioStato+0x3>
    1e7c:	c0 90 7b 08 	lds	r12, 0x087B	; 0x80087b <Timer>
    1e80:	d0 90 7c 08 	lds	r13, 0x087C	; 0x80087c <Timer+0x1>
    1e84:	e0 90 7d 08 	lds	r14, 0x087D	; 0x80087d <Timer+0x2>
    1e88:	f0 90 7e 08 	lds	r15, 0x087E	; 0x80087e <Timer+0x3>
    1e8c:	0c 0d       	add	r16, r12
    1e8e:	1d 1d       	adc	r17, r13
    1e90:	2e 1d       	adc	r18, r14
    1e92:	3f 1d       	adc	r19, r15
    1e94:	68 01       	movw	r12, r16
    1e96:	79 01       	movw	r14, r18
    1e98:	c6 1a       	sub	r12, r22
    1e9a:	d7 0a       	sbc	r13, r23
    1e9c:	e8 0a       	sbc	r14, r24
    1e9e:	f9 0a       	sbc	r15, r25
    1ea0:	d7 01       	movw	r26, r14
    1ea2:	c6 01       	movw	r24, r12
    1ea4:	02 97       	sbiw	r24, 0x02	; 2
    1ea6:	a1 05       	cpc	r26, r1
    1ea8:	b1 05       	cpc	r27, r1
    1eaa:	08 f0       	brcs	.+2      	; 0x1eae <loop+0xaf6>
    1eac:	0f c1       	rjmp	.+542    	; 0x20cc <loop+0xd14>
    1eae:	5b d8       	rcall	.-3914   	; 0xf66 <_Z6Azzerav>

}
    1eb0:	0d c1       	rjmp	.+538    	; 0x20cc <loop+0xd14>
		String ATe = "ERRORE";
		if (!alreadyTimbrata) {ATe = GetCodeRfidATe(); Buzzer(2,100);}
            
			if ((ATe != "ERRORE") && (BIT_IS_CLEAR(PORTC,4)))
			{ 
			   Serial.println("");
    1eb2:	60 e7       	ldi	r22, 0x70	; 112
    1eb4:	71 e0       	ldi	r23, 0x01	; 1
    1eb6:	8f ec       	ldi	r24, 0xCF	; 207
    1eb8:	9a e0       	ldi	r25, 0x0A	; 10
    1eba:	0e 94 0a 30 	call	0x6014	; 0x6014 <_ZN5Print7printlnEPKc>
			   Serial.print("***************************************************************");
    1ebe:	66 ee       	ldi	r22, 0xE6	; 230
    1ec0:	75 e0       	ldi	r23, 0x05	; 5
    1ec2:	8f ec       	ldi	r24, 0xCF	; 207
    1ec4:	9a e0       	ldi	r25, 0x0A	; 10
    1ec6:	0e 94 df 2f 	call	0x5fbe	; 0x5fbe <_ZN5Print5printEPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1eca:	66 e2       	ldi	r22, 0x26	; 38
    1ecc:	76 e0       	ldi	r23, 0x06	; 6
    1ece:	ce 01       	movw	r24, r28
    1ed0:	01 96       	adiw	r24, 0x01	; 1
    1ed2:	0e 94 a0 32 	call	0x6540	; 0x6540 <_ZN6StringC1EPKc>
			   Serial.println(" Tessera ID : " + ATe);
    1ed6:	be 01       	movw	r22, r28
    1ed8:	62 5f       	subi	r22, 0xF2	; 242
    1eda:	7f 4f       	sbci	r23, 0xFF	; 255
    1edc:	ce 01       	movw	r24, r28
    1ede:	01 96       	adiw	r24, 0x01	; 1
    1ee0:	0e 94 75 34 	call	0x68ea	; 0x68ea <_ZplRK15StringSumHelperRK6String>
    1ee4:	bc 01       	movw	r22, r24
    1ee6:	8f ec       	ldi	r24, 0xCF	; 207
    1ee8:	9a e0       	ldi	r25, 0x0A	; 10
    1eea:	0e 94 fa 2f 	call	0x5ff4	; 0x5ff4 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1eee:	ce 01       	movw	r24, r28
    1ef0:	01 96       	adiw	r24, 0x01	; 1
    1ef2:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
			   Serial.print("***************************************************************");
    1ef6:	66 ee       	ldi	r22, 0xE6	; 230
    1ef8:	75 e0       	ldi	r23, 0x05	; 5
    1efa:	8f ec       	ldi	r24, 0xCF	; 207
    1efc:	9a e0       	ldi	r25, 0x0A	; 10
    1efe:	0e 94 df 2f 	call	0x5fbe	; 0x5fbe <_ZN5Print5printEPKc>
			   Serial.println("Riconoscimento Tessera .............");
    1f02:	65 e3       	ldi	r22, 0x35	; 53
    1f04:	76 e0       	ldi	r23, 0x06	; 6
    1f06:	8f ec       	ldi	r24, 0xCF	; 207
    1f08:	9a e0       	ldi	r25, 0x0A	; 10
    1f0a:	0e 94 0a 30 	call	0x6014	; 0x6014 <_ZN5Print7printlnEPKc>
                
			   /*****************************************************
				*					CODICE ATE						*
			   /*****************************************************/     
			   // RaccoltaDati[0] = ATe;
				RaccoltaDati[0] = "DD92743A";     
    1f0e:	6a e5       	ldi	r22, 0x5A	; 90
    1f10:	76 e0       	ldi	r23, 0x06	; 6
    1f12:	8f ee       	ldi	r24, 0xEF	; 239
    1f14:	98 e0       	ldi	r25, 0x08	; 8
    1f16:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>
				RaccoltaDati[5] = "000";
    1f1a:	61 e5       	ldi	r22, 0x51	; 81
    1f1c:	75 e0       	ldi	r23, 0x05	; 5
    1f1e:	8d e0       	ldi	r24, 0x0D	; 13
    1f20:	99 e0       	ldi	r25, 0x09	; 9
    1f22:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>
				/*****************************************************/
           
				lcd.backlight();
    1f26:	82 e4       	ldi	r24, 0x42	; 66
    1f28:	99 e0       	ldi	r25, 0x09	; 9
    1f2a:	0e 94 37 27 	call	0x4e6e	; 0x4e6e <_ZN3LCD9backlightEv>
				lcd.display();          
    1f2e:	82 e4       	ldi	r24, 0x42	; 66
    1f30:	99 e0       	ldi	r25, 0x09	; 9
    1f32:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <_ZN3LCD7displayEv>
    1f36:	8f e3       	ldi	r24, 0x3F	; 63
    1f38:	9c e9       	ldi	r25, 0x9C	; 156
    1f3a:	01 97       	sbiw	r24, 0x01	; 1
    1f3c:	f1 f7       	brne	.-4      	; 0x1f3a <loop+0xb82>
    1f3e:	00 c0       	rjmp	.+0      	; 0x1f40 <loop+0xb88>
    1f40:	00 00       	nop
				_delay_ms(10);               
       
				righeDisplay[1] = "  RICONOSCIMENTO ";
    1f42:	63 e6       	ldi	r22, 0x63	; 99
    1f44:	76 e0       	ldi	r23, 0x06	; 6
    1f46:	8b ec       	ldi	r24, 0xCB	; 203
    1f48:	98 e0       	ldi	r25, 0x08	; 8
    1f4a:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>
				righeDisplay[2] = ".....In Corso.....";
    1f4e:	65 e7       	ldi	r22, 0x75	; 117
    1f50:	76 e0       	ldi	r23, 0x06	; 6
    1f52:	81 ed       	ldi	r24, 0xD1	; 209
    1f54:	98 e0       	ldi	r25, 0x08	; 8
    1f56:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>
				//righeDisplay[3] = "   Rfid: " + ATe;
				righeDisplay[3] = "...Attendere......";
    1f5a:	68 e8       	ldi	r22, 0x88	; 136
    1f5c:	76 e0       	ldi	r23, 0x06	; 6
    1f5e:	87 ed       	ldi	r24, 0xD7	; 215
    1f60:	98 e0       	ldi	r25, 0x08	; 8
    1f62:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>
           
				displayLCD(righeDisplay,stato_procedura,100);   
    1f66:	60 91 1b 09 	lds	r22, 0x091B	; 0x80091b <stato_procedura>
    1f6a:	70 91 1c 09 	lds	r23, 0x091C	; 0x80091c <stato_procedura+0x1>
    1f6e:	44 e6       	ldi	r20, 0x64	; 100
    1f70:	50 e0       	ldi	r21, 0x00	; 0
    1f72:	85 ec       	ldi	r24, 0xC5	; 197
    1f74:	98 e0       	ldi	r25, 0x08	; 8
    1f76:	0e 94 47 03 	call	0x68e	; 0x68e <_Z10displayLCDP6Stringii>
      
				InizializzaEthernet();
    1f7a:	0e 94 94 01 	call	0x328	; 0x328 <_Z19InizializzaEthernetv>
    1f7e:	9f ef       	ldi	r25, 0xFF	; 255
    1f80:	23 ed       	ldi	r18, 0xD3	; 211
    1f82:	30 e3       	ldi	r19, 0x30	; 48
    1f84:	91 50       	subi	r25, 0x01	; 1
    1f86:	20 40       	sbci	r18, 0x00	; 0
    1f88:	30 40       	sbci	r19, 0x00	; 0
    1f8a:	e1 f7       	brne	.-8      	; 0x1f84 <loop+0xbcc>
    1f8c:	00 c0       	rjmp	.+0      	; 0x1f8e <loop+0xbd6>
    1f8e:	00 00       	nop
    1f90:	e0 ca       	rjmp	.-2624   	; 0x1552 <loop+0x19a>
		  Serial.println("TIPO CARBURANTE: " + mezzo.Carb);    
		  Serial.println("TARGA: " + mezzo.TARGA);              

		  Carburante = mezzo.Carb;                 
		  if ((mezzo.Carb == "B") || (mezzo.Carb == "D")) {
			RaccoltaDati[1] = mezzo.TARGA;
    1f92:	6a e6       	ldi	r22, 0x6A	; 106
    1f94:	79 e0       	ldi	r23, 0x09	; 9
    1f96:	85 ef       	ldi	r24, 0xF5	; 245
    1f98:	98 e0       	ldi	r25, 0x08	; 8
    1f9a:	0e 94 f7 32 	call	0x65ee	; 0x65ee <_ZN6StringaSERKS_>
			RaccoltaDati[2] = mezzo.Carb;
    1f9e:	64 e6       	ldi	r22, 0x64	; 100
    1fa0:	79 e0       	ldi	r23, 0x09	; 9
    1fa2:	8b ef       	ldi	r24, 0xFB	; 251
    1fa4:	98 e0       	ldi	r25, 0x08	; 8
    1fa6:	0e 94 f7 32 	call	0x65ee	; 0x65ee <_ZN6StringaSERKS_>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1faa:	69 e9       	ldi	r22, 0x99	; 153
    1fac:	75 e0       	ldi	r23, 0x05	; 5
    1fae:	ce 01       	movw	r24, r28
    1fb0:	01 96       	adiw	r24, 0x01	; 1
    1fb2:	0e 94 a0 32 	call	0x6540	; 0x6540 <_ZN6StringC1EPKc>
			righeDisplay[3] = "TARGA: "+  mezzo.TARGA;
    1fb6:	6a e6       	ldi	r22, 0x6A	; 106
    1fb8:	79 e0       	ldi	r23, 0x09	; 9
    1fba:	ce 01       	movw	r24, r28
    1fbc:	01 96       	adiw	r24, 0x01	; 1
    1fbe:	0e 94 75 34 	call	0x68ea	; 0x68ea <_ZplRK15StringSumHelperRK6String>
    1fc2:	bc 01       	movw	r22, r24
    1fc4:	87 ed       	ldi	r24, 0xD7	; 215
    1fc6:	98 e0       	ldi	r25, 0x08	; 8
    1fc8:	0e 94 f7 32 	call	0x65ee	; 0x65ee <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1fcc:	ce 01       	movw	r24, r28
    1fce:	01 96       	adiw	r24, 0x01	; 1
    1fd0:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
			displayLCD(righeDisplay,stato_procedura,10);
    1fd4:	60 91 1b 09 	lds	r22, 0x091B	; 0x80091b <stato_procedura>
    1fd8:	70 91 1c 09 	lds	r23, 0x091C	; 0x80091c <stato_procedura+0x1>
    1fdc:	4a e0       	ldi	r20, 0x0A	; 10
    1fde:	50 e0       	ldi	r21, 0x00	; 0
    1fe0:	85 ec       	ldi	r24, 0xC5	; 197
    1fe2:	98 e0       	ldi	r25, 0x08	; 8
    1fe4:	0e 94 47 03 	call	0x68e	; 0x68e <_Z10displayLCDP6Stringii>
    1fe8:	8f ef       	ldi	r24, 0xFF	; 255
    1fea:	99 e6       	ldi	r25, 0x69	; 105
    1fec:	28 e1       	ldi	r18, 0x18	; 24
    1fee:	81 50       	subi	r24, 0x01	; 1
    1ff0:	90 40       	sbci	r25, 0x00	; 0
    1ff2:	20 40       	sbci	r18, 0x00	; 0
    1ff4:	e1 f7       	brne	.-8      	; 0x1fee <loop+0xc36>
    1ff6:	00 c0       	rjmp	.+0      	; 0x1ff8 <loop+0xc40>
    1ff8:	00 00       	nop
			_delay_ms(500);
			avanzaStato(TselDistributore); 
    1ffa:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <TselDistributore>
    1ffe:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <TselDistributore+0x1>
    2002:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <TselDistributore+0x2>
    2006:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <TselDistributore+0x3>
    200a:	0e 94 83 03 	call	0x706	; 0x706 <_Z11avanzaStatom>
    200e:	68 cc       	rjmp	.-1840   	; 0x18e0 <loop+0x528>

      /* CONTATTO PISTOLA DIESEL */
      
      if ((PINA & _BV(PA1)) && (Carburante == "D"))
      {       
        RaccoltaDati[3] = String(lt);        
    2010:	22 e0       	ldi	r18, 0x02	; 2
    2012:	b7 01       	movw	r22, r14
    2014:	a6 01       	movw	r20, r12
    2016:	ce 01       	movw	r24, r28
    2018:	01 96       	adiw	r24, 0x01	; 1
    201a:	0e 94 f5 33 	call	0x67ea	; 0x67ea <_ZN6StringC1Edh>
    201e:	be 01       	movw	r22, r28
    2020:	6f 5f       	subi	r22, 0xFF	; 255
    2022:	7f 4f       	sbci	r23, 0xFF	; 255
    2024:	81 e0       	ldi	r24, 0x01	; 1
    2026:	99 e0       	ldi	r25, 0x09	; 9
    2028:	0e 94 14 33 	call	0x6628	; 0x6628 <_ZN6StringaSEOS_>
    202c:	ce 01       	movw	r24, r28
    202e:	01 96       	adiw	r24, 0x01	; 1
    2030:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
        StatoAttuale = "STOP EROGAZIONE";
    2034:	6b e9       	ldi	r22, 0x9B	; 155
    2036:	76 e0       	ldi	r23, 0x06	; 6
    2038:	85 e2       	ldi	r24, 0x25	; 37
    203a:	99 e0       	ldi	r25, 0x09	; 9
    203c:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>
        Rele_Abilitazione2(1,7); //  apri relè
    2040:	67 e0       	ldi	r22, 0x07	; 7
    2042:	70 e0       	ldi	r23, 0x00	; 0
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <_Z18Rele_Abilitazione2ii>
        Rele_Abilitazione1(1,7); //  apri relè  
    204c:	67 e0       	ldi	r22, 0x07	; 7
    204e:	70 e0       	ldi	r23, 0x00	; 0
    2050:	81 e0       	ldi	r24, 0x01	; 1
    2052:	90 e0       	ldi	r25, 0x00	; 0
    2054:	0e 94 21 07 	call	0xe42	; 0xe42 <_Z18Rele_Abilitazione1ii>
        TOGGLE_BIT(PORTA,1);      
    2058:	92 b1       	in	r25, 0x02	; 2
    205a:	82 e0       	ldi	r24, 0x02	; 2
    205c:	89 27       	eor	r24, r25
    205e:	82 b9       	out	0x02, r24	; 2
        avanzaStato(10);
    2060:	6a e0       	ldi	r22, 0x0A	; 10
    2062:	70 e0       	ldi	r23, 0x00	; 0
    2064:	80 e0       	ldi	r24, 0x00	; 0
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	0e 94 83 03 	call	0x706	; 0x706 <_Z11avanzaStatom>
    206c:	19 ce       	rjmp	.-974    	; 0x1ca0 <loop+0x8e8>
      
      /* CONTATTO PISTOLA BENZINA */
      
      if  ((PINB & _BV(PB1)) && (Carburante == "B"))
      {
        RaccoltaDati[3] = String(lt);
    206e:	22 e0       	ldi	r18, 0x02	; 2
    2070:	b7 01       	movw	r22, r14
    2072:	a6 01       	movw	r20, r12
    2074:	ce 01       	movw	r24, r28
    2076:	01 96       	adiw	r24, 0x01	; 1
    2078:	0e 94 f5 33 	call	0x67ea	; 0x67ea <_ZN6StringC1Edh>
    207c:	be 01       	movw	r22, r28
    207e:	6f 5f       	subi	r22, 0xFF	; 255
    2080:	7f 4f       	sbci	r23, 0xFF	; 255
    2082:	81 e0       	ldi	r24, 0x01	; 1
    2084:	99 e0       	ldi	r25, 0x09	; 9
    2086:	0e 94 14 33 	call	0x6628	; 0x6628 <_ZN6StringaSEOS_>
    208a:	ce 01       	movw	r24, r28
    208c:	01 96       	adiw	r24, 0x01	; 1
    208e:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
        
        StatoAttuale = "STOP EROGAZIONE";
    2092:	6b e9       	ldi	r22, 0x9B	; 155
    2094:	76 e0       	ldi	r23, 0x06	; 6
    2096:	85 e2       	ldi	r24, 0x25	; 37
    2098:	99 e0       	ldi	r25, 0x09	; 9
    209a:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>
        Rele_Abilitazione2(1,7); //  apri relè
    209e:	67 e0       	ldi	r22, 0x07	; 7
    20a0:	70 e0       	ldi	r23, 0x00	; 0
    20a2:	81 e0       	ldi	r24, 0x01	; 1
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <_Z18Rele_Abilitazione2ii>
        Rele_Abilitazione1(1,7); //  apri relè        
    20aa:	67 e0       	ldi	r22, 0x07	; 7
    20ac:	70 e0       	ldi	r23, 0x00	; 0
    20ae:	81 e0       	ldi	r24, 0x01	; 1
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	0e 94 21 07 	call	0xe42	; 0xe42 <_Z18Rele_Abilitazione1ii>
        avanzaStato(TmaxInviodati);
    20b6:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <TmaxInviodati>
    20ba:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <TmaxInviodati+0x1>
    20be:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <TmaxInviodati+0x2>
    20c2:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <TmaxInviodati+0x3>
    20c6:	0e 94 83 03 	call	0x706	; 0x706 <_Z11avanzaStatom>
    20ca:	b5 ce       	rjmp	.-662    	; 0x1e36 <loop+0xa7e>

  nowTimer = DS3231M.now();
  secs = nowTimer.secondstime();
  if ((UltimoPassaggioStato+Timer-secs) <= 1) Azzera();

}
    20cc:	6d 96       	adiw	r28, 0x1d	; 29
    20ce:	0f b6       	in	r0, 0x3f	; 63
    20d0:	f8 94       	cli
    20d2:	de bf       	out	0x3e, r29	; 62
    20d4:	0f be       	out	0x3f, r0	; 63
    20d6:	cd bf       	out	0x3d, r28	; 61
    20d8:	df 91       	pop	r29
    20da:	cf 91       	pop	r28
    20dc:	1f 91       	pop	r17
    20de:	0f 91       	pop	r16
    20e0:	ff 90       	pop	r15
    20e2:	ef 90       	pop	r14
    20e4:	df 90       	pop	r13
    20e6:	cf 90       	pop	r12
    20e8:	08 95       	ret

000020ea <__vector_4>:
73 litri al minuto
73/60 = 1,22 lt/sec
1,22*100 = 122 Hz
***********************************************************************/

ISR(PCINT0_vect) {
    20ea:	1f 92       	push	r1
    20ec:	0f 92       	push	r0
    20ee:	0f b6       	in	r0, 0x3f	; 63
    20f0:	0f 92       	push	r0
    20f2:	11 24       	eor	r1, r1
    20f4:	8f 93       	push	r24
    20f6:	9f 93       	push	r25
       if (PINA & _BV(PA5)){
    20f8:	05 9b       	sbis	0x00, 5	; 0
    20fa:	0f c0       	rjmp	.+30     	; 0x211a <__vector_4+0x30>
              impulsi++;
    20fc:	80 91 19 09 	lds	r24, 0x0919	; 0x800919 <impulsi>
    2100:	90 91 1a 09 	lds	r25, 0x091A	; 0x80091a <impulsi+0x1>
    2104:	01 96       	adiw	r24, 0x01	; 1
    2106:	90 93 1a 09 	sts	0x091A, r25	; 0x80091a <impulsi+0x1>
    210a:	80 93 19 09 	sts	0x0919, r24	; 0x800919 <impulsi>
    210e:	8f e9       	ldi	r24, 0x9F	; 159
    2110:	98 e2       	ldi	r25, 0x28	; 40
    2112:	01 97       	sbiw	r24, 0x01	; 1
    2114:	f1 f7       	brne	.-4      	; 0x2112 <__vector_4+0x28>
    2116:	00 c0       	rjmp	.+0      	; 0x2118 <__vector_4+0x2e>
    2118:	00 00       	nop
        _delay_ms(2.6); // Impostato per 200 Hz di pulser (Periodo 5 ms)
       }
        if (PINA & _BV(PA6)){
    211a:	06 9b       	sbis	0x00, 6	; 0
    211c:	0f c0       	rjmp	.+30     	; 0x213c <__vector_4+0x52>
               impulsi++;
    211e:	80 91 19 09 	lds	r24, 0x0919	; 0x800919 <impulsi>
    2122:	90 91 1a 09 	lds	r25, 0x091A	; 0x80091a <impulsi+0x1>
    2126:	01 96       	adiw	r24, 0x01	; 1
    2128:	90 93 1a 09 	sts	0x091A, r25	; 0x80091a <impulsi+0x1>
    212c:	80 93 19 09 	sts	0x0919, r24	; 0x800919 <impulsi>
    2130:	8f e9       	ldi	r24, 0x9F	; 159
    2132:	98 e2       	ldi	r25, 0x28	; 40
    2134:	01 97       	sbiw	r24, 0x01	; 1
    2136:	f1 f7       	brne	.-4      	; 0x2134 <__vector_4+0x4a>
    2138:	00 c0       	rjmp	.+0      	; 0x213a <__vector_4+0x50>
    213a:	00 00       	nop
        _delay_ms(2.6);
        }  
}
    213c:	9f 91       	pop	r25
    213e:	8f 91       	pop	r24
    2140:	0f 90       	pop	r0
    2142:	0f be       	out	0x3f, r0	; 63
    2144:	0f 90       	pop	r0
    2146:	1f 90       	pop	r1
    2148:	18 95       	reti

0000214a <__vector_7>:

// interrupt per pulsanti abilitazione diesele benzina

ISR(PCINT3_vect) {    
    214a:	1f 92       	push	r1
    214c:	0f 92       	push	r0
    214e:	0f b6       	in	r0, 0x3f	; 63
    2150:	0f 92       	push	r0
    2152:	11 24       	eor	r1, r1
    2154:	0b b6       	in	r0, 0x3b	; 59
    2156:	0f 92       	push	r0
    2158:	2f 93       	push	r18
    215a:	3f 93       	push	r19
    215c:	4f 93       	push	r20
    215e:	5f 93       	push	r21
    2160:	6f 93       	push	r22
    2162:	7f 93       	push	r23
    2164:	8f 93       	push	r24
    2166:	9f 93       	push	r25
    2168:	af 93       	push	r26
    216a:	bf 93       	push	r27
    216c:	ef 93       	push	r30
    216e:	ff 93       	push	r31
  
  if (stato_procedura == 4)
    2170:	80 91 1b 09 	lds	r24, 0x091B	; 0x80091b <stato_procedura>
    2174:	90 91 1c 09 	lds	r25, 0x091C	; 0x80091c <stato_procedura+0x1>
    2178:	04 97       	sbiw	r24, 0x04	; 4
    217a:	09 f0       	breq	.+2      	; 0x217e <__vector_7+0x34>
    217c:	bc c0       	rjmp	.+376    	; 0x22f6 <__vector_7+0x1ac>
  {
    if (PIND & _BV(PD6))
    217e:	4e 9b       	sbis	0x09, 6	; 9
    2180:	45 c0       	rjmp	.+138    	; 0x220c <__vector_7+0xc2>
    {   
      intConsecutivePresses++;                      // increment counter for number of presses
    2182:	80 91 78 09 	lds	r24, 0x0978	; 0x800978 <intConsecutivePresses>
    2186:	90 91 79 09 	lds	r25, 0x0979	; 0x800979 <intConsecutivePresses+0x1>
    218a:	01 96       	adiw	r24, 0x01	; 1
    218c:	90 93 79 09 	sts	0x0979, r25	; 0x800979 <intConsecutivePresses+0x1>
    2190:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <intConsecutivePresses>
      if(intConsecutivePresses >= NUM_OF_CONSECUTIVE_PRESSES) 
    2194:	80 91 78 09 	lds	r24, 0x0978	; 0x800978 <intConsecutivePresses>
    2198:	90 91 79 09 	lds	r25, 0x0979	; 0x800979 <intConsecutivePresses+0x1>
    219c:	18 16       	cp	r1, r24
    219e:	19 06       	cpc	r1, r25
    21a0:	0c f0       	brlt	.+2      	; 0x21a4 <__vector_7+0x5a>
    21a2:	4b c0       	rjmp	.+150    	; 0x223a <__vector_7+0xf0>
      {     // if enough presses to constitute a press
        abilitaPulser('B');
    21a4:	82 e4       	ldi	r24, 0x42	; 66
    21a6:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_Z13abilitaPulserc>
        Rele_Abilitazione2(0,7); // chiudi relè
    21aa:	67 e0       	ldi	r22, 0x07	; 7
    21ac:	70 e0       	ldi	r23, 0x00	; 0
    21ae:	80 e0       	ldi	r24, 0x00	; 0
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <_Z18Rele_Abilitazione2ii>
        Carburante = "B";
    21b6:	61 ea       	ldi	r22, 0xA1	; 161
    21b8:	75 e0       	ldi	r23, 0x05	; 5
    21ba:	89 ee       	ldi	r24, 0xE9	; 233
    21bc:	98 e0       	ldi	r25, 0x08	; 8
    21be:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>
		RaccoltaDati[2] = Carburante;
    21c2:	69 ee       	ldi	r22, 0xE9	; 233
    21c4:	78 e0       	ldi	r23, 0x08	; 8
    21c6:	8b ef       	ldi	r24, 0xFB	; 251
    21c8:	98 e0       	ldi	r25, 0x08	; 8
    21ca:	0e 94 f7 32 	call	0x65ee	; 0x65ee <_ZN6StringaSERKS_>
        StatoAttuale = "POMPA 2";       
    21ce:	65 ea       	ldi	r22, 0xA5	; 165
    21d0:	75 e0       	ldi	r23, 0x05	; 5
    21d2:	85 e2       	ldi	r24, 0x25	; 37
    21d4:	99 e0       	ldi	r25, 0x09	; 9
    21d6:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>
		righeDisplay[1] =  "****** KM ******";
    21da:	6c ec       	ldi	r22, 0xCC	; 204
    21dc:	74 e0       	ldi	r23, 0x04	; 4
    21de:	8b ec       	ldi	r24, 0xCB	; 203
    21e0:	98 e0       	ldi	r25, 0x08	; 8
    21e2:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>
		righeDisplay[2] = "KM:";
    21e6:	6d ed       	ldi	r22, 0xDD	; 221
    21e8:	74 e0       	ldi	r23, 0x04	; 4
    21ea:	81 ed       	ldi	r24, 0xD1	; 209
    21ec:	98 e0       	ldi	r25, 0x08	; 8
    21ee:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>
		righeDisplay[3] = "#:Conferma";
    21f2:	61 ee       	ldi	r22, 0xE1	; 225
    21f4:	74 e0       	ldi	r23, 0x04	; 4
    21f6:	87 ed       	ldi	r24, 0xD7	; 215
    21f8:	98 e0       	ldi	r25, 0x08	; 8
    21fa:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>
        avanzaStato(10);                            
    21fe:	6a e0       	ldi	r22, 0x0A	; 10
    2200:	70 e0       	ldi	r23, 0x00	; 0
    2202:	80 e0       	ldi	r24, 0x00	; 0
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	0e 94 83 03 	call	0x706	; 0x706 <_Z11avanzaStatom>
    220a:	0f c0       	rjmp	.+30     	; 0x222a <__vector_7+0xe0>
        intConsecutivePresses = 0;                    // and reset press counts
        intConsecutiveNonPresses = 0;
      }
    }
    else  {           // else if button is not pressed (logic low)
		intConsecutiveNonPresses++;
    220c:	80 91 76 09 	lds	r24, 0x0976	; 0x800976 <intConsecutiveNonPresses>
    2210:	90 91 77 09 	lds	r25, 0x0977	; 0x800977 <intConsecutiveNonPresses+0x1>
    2214:	01 96       	adiw	r24, 0x01	; 1
    2216:	90 93 77 09 	sts	0x0977, r25	; 0x800977 <intConsecutiveNonPresses+0x1>
    221a:	80 93 76 09 	sts	0x0976, r24	; 0x800976 <intConsecutiveNonPresses>
		if(intConsecutiveNonPresses >= NUM_OF_CONSECUTIVE_NON_PRESSES) {
    221e:	80 91 76 09 	lds	r24, 0x0976	; 0x800976 <intConsecutiveNonPresses>
    2222:	90 91 77 09 	lds	r25, 0x0977	; 0x800977 <intConsecutiveNonPresses+0x1>
    2226:	02 97       	sbiw	r24, 0x02	; 2
    2228:	44 f0       	brlt	.+16     	; 0x223a <__vector_7+0xf0>
			intConsecutivePresses = 0;                      // reset press counts
    222a:	10 92 79 09 	sts	0x0979, r1	; 0x800979 <intConsecutivePresses+0x1>
    222e:	10 92 78 09 	sts	0x0978, r1	; 0x800978 <intConsecutivePresses>
			intConsecutiveNonPresses = 0;
    2232:	10 92 77 09 	sts	0x0977, r1	; 0x800977 <intConsecutiveNonPresses+0x1>
    2236:	10 92 76 09 	sts	0x0976, r1	; 0x800976 <intConsecutiveNonPresses>
		}
    }     
      
    if (PIND & _BV(PD7))
    223a:	4f 9b       	sbis	0x09, 7	; 9
    223c:	45 c0       	rjmp	.+138    	; 0x22c8 <__vector_7+0x17e>
    {     
      intConsecutivePresses++;                      // increment counter for number of presses
    223e:	80 91 78 09 	lds	r24, 0x0978	; 0x800978 <intConsecutivePresses>
    2242:	90 91 79 09 	lds	r25, 0x0979	; 0x800979 <intConsecutivePresses+0x1>
    2246:	01 96       	adiw	r24, 0x01	; 1
    2248:	90 93 79 09 	sts	0x0979, r25	; 0x800979 <intConsecutivePresses+0x1>
    224c:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <intConsecutivePresses>
      if(intConsecutivePresses >= NUM_OF_CONSECUTIVE_PRESSES) 
    2250:	80 91 78 09 	lds	r24, 0x0978	; 0x800978 <intConsecutivePresses>
    2254:	90 91 79 09 	lds	r25, 0x0979	; 0x800979 <intConsecutivePresses+0x1>
    2258:	18 16       	cp	r1, r24
    225a:	19 06       	cpc	r1, r25
    225c:	0c f0       	brlt	.+2      	; 0x2260 <__vector_7+0x116>
    225e:	4b c0       	rjmp	.+150    	; 0x22f6 <__vector_7+0x1ac>
      {     // if enough presses to constitute a press        
        abilitaPulser('D');
    2260:	84 e4       	ldi	r24, 0x44	; 68
    2262:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_Z13abilitaPulserc>
        Rele_Abilitazione1(0,7); // chiudi relè
    2266:	67 e0       	ldi	r22, 0x07	; 7
    2268:	70 e0       	ldi	r23, 0x00	; 0
    226a:	80 e0       	ldi	r24, 0x00	; 0
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	0e 94 21 07 	call	0xe42	; 0xe42 <_Z18Rele_Abilitazione1ii>
        Carburante = "D";
    2272:	63 ea       	ldi	r22, 0xA3	; 163
    2274:	75 e0       	ldi	r23, 0x05	; 5
    2276:	89 ee       	ldi	r24, 0xE9	; 233
    2278:	98 e0       	ldi	r25, 0x08	; 8
    227a:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>
		RaccoltaDati[2] = Carburante;
    227e:	69 ee       	ldi	r22, 0xE9	; 233
    2280:	78 e0       	ldi	r23, 0x08	; 8
    2282:	8b ef       	ldi	r24, 0xFB	; 251
    2284:	98 e0       	ldi	r25, 0x08	; 8
    2286:	0e 94 f7 32 	call	0x65ee	; 0x65ee <_ZN6StringaSERKS_>
        StatoAttuale = "POMPA 1";
    228a:	6d ea       	ldi	r22, 0xAD	; 173
    228c:	75 e0       	ldi	r23, 0x05	; 5
    228e:	85 e2       	ldi	r24, 0x25	; 37
    2290:	99 e0       	ldi	r25, 0x09	; 9
    2292:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>
		righeDisplay[1] =  "****** KM ******";
    2296:	6c ec       	ldi	r22, 0xCC	; 204
    2298:	74 e0       	ldi	r23, 0x04	; 4
    229a:	8b ec       	ldi	r24, 0xCB	; 203
    229c:	98 e0       	ldi	r25, 0x08	; 8
    229e:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>
		righeDisplay[2] = "KM:";
    22a2:	6d ed       	ldi	r22, 0xDD	; 221
    22a4:	74 e0       	ldi	r23, 0x04	; 4
    22a6:	81 ed       	ldi	r24, 0xD1	; 209
    22a8:	98 e0       	ldi	r25, 0x08	; 8
    22aa:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>
		righeDisplay[3] = "#:Conferma";
    22ae:	61 ee       	ldi	r22, 0xE1	; 225
    22b0:	74 e0       	ldi	r23, 0x04	; 4
    22b2:	87 ed       	ldi	r24, 0xD7	; 215
    22b4:	98 e0       	ldi	r25, 0x08	; 8
    22b6:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>
        avanzaStato(10);
    22ba:	6a e0       	ldi	r22, 0x0A	; 10
    22bc:	70 e0       	ldi	r23, 0x00	; 0
    22be:	80 e0       	ldi	r24, 0x00	; 0
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	0e 94 83 03 	call	0x706	; 0x706 <_Z11avanzaStatom>
    22c6:	0f c0       	rjmp	.+30     	; 0x22e6 <__vector_7+0x19c>
        intConsecutivePresses = 0;                    // and reset press counts
        intConsecutiveNonPresses = 0;
        }
     }
     else  {            // else if button is not pressed (logic low)
     intConsecutiveNonPresses++;
    22c8:	80 91 76 09 	lds	r24, 0x0976	; 0x800976 <intConsecutiveNonPresses>
    22cc:	90 91 77 09 	lds	r25, 0x0977	; 0x800977 <intConsecutiveNonPresses+0x1>
    22d0:	01 96       	adiw	r24, 0x01	; 1
    22d2:	90 93 77 09 	sts	0x0977, r25	; 0x800977 <intConsecutiveNonPresses+0x1>
    22d6:	80 93 76 09 	sts	0x0976, r24	; 0x800976 <intConsecutiveNonPresses>
     if(intConsecutiveNonPresses >= NUM_OF_CONSECUTIVE_NON_PRESSES) {
    22da:	80 91 76 09 	lds	r24, 0x0976	; 0x800976 <intConsecutiveNonPresses>
    22de:	90 91 77 09 	lds	r25, 0x0977	; 0x800977 <intConsecutiveNonPresses+0x1>
    22e2:	02 97       	sbiw	r24, 0x02	; 2
    22e4:	44 f0       	brlt	.+16     	; 0x22f6 <__vector_7+0x1ac>
       intConsecutivePresses = 0;                     // reset press counts
    22e6:	10 92 79 09 	sts	0x0979, r1	; 0x800979 <intConsecutivePresses+0x1>
    22ea:	10 92 78 09 	sts	0x0978, r1	; 0x800978 <intConsecutivePresses>
       intConsecutiveNonPresses = 0;
    22ee:	10 92 77 09 	sts	0x0977, r1	; 0x800977 <intConsecutiveNonPresses+0x1>
    22f2:	10 92 76 09 	sts	0x0976, r1	; 0x800976 <intConsecutiveNonPresses>
     }
    }
  }               
    22f6:	ff 91       	pop	r31
    22f8:	ef 91       	pop	r30
    22fa:	bf 91       	pop	r27
    22fc:	af 91       	pop	r26
    22fe:	9f 91       	pop	r25
    2300:	8f 91       	pop	r24
    2302:	7f 91       	pop	r23
    2304:	6f 91       	pop	r22
    2306:	5f 91       	pop	r21
    2308:	4f 91       	pop	r20
    230a:	3f 91       	pop	r19
    230c:	2f 91       	pop	r18
    230e:	0f 90       	pop	r0
    2310:	0b be       	out	0x3b, r0	; 59
    2312:	0f 90       	pop	r0
    2314:	0f be       	out	0x3f, r0	; 63
    2316:	0f 90       	pop	r0
    2318:	1f 90       	pop	r1
    231a:	18 95       	reti

0000231c <_GLOBAL__sub_I_intConsecutivePresses>:
    231c:	8f 92       	push	r8
    231e:	af 92       	push	r10
    2320:	cf 92       	push	r12
    2322:	ef 92       	push	r14
    2324:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    2326:	00 e0       	ldi	r16, 0x00	; 0
    2328:	20 e0       	ldi	r18, 0x00	; 0
    232a:	40 e0       	ldi	r20, 0x00	; 0
    232c:	60 e0       	ldi	r22, 0x00	; 0
    232e:	8a e7       	ldi	r24, 0x7A	; 122
    2330:	99 e0       	ldi	r25, 0x09	; 9
    2332:	0e 94 4c 2f 	call	0x5e98	; 0x5e98 <_ZN9IPAddressC1Ehhhh>
const uint8_t I2C_PCA9534_ADDR = 0x20;

volatile int intConsecutivePresses = 0;
volatile int intConsecutiveNonPresses = 0;

struct mezzoType {
    2336:	60 e7       	ldi	r22, 0x70	; 112
    2338:	71 e0       	ldi	r23, 0x01	; 1
    233a:	84 e6       	ldi	r24, 0x64	; 100
    233c:	99 e0       	ldi	r25, 0x09	; 9
    233e:	0e 94 a0 32 	call	0x6540	; 0x6540 <_ZN6StringC1EPKc>
    2342:	60 e7       	ldi	r22, 0x70	; 112
    2344:	71 e0       	ldi	r23, 0x01	; 1
    2346:	8a e6       	ldi	r24, 0x6A	; 106
    2348:	99 e0       	ldi	r25, 0x09	; 9
    234a:	0e 94 a0 32 	call	0x6540	; 0x6540 <_ZN6StringC1EPKc>
    234e:	60 e7       	ldi	r22, 0x70	; 112
    2350:	71 e0       	ldi	r23, 0x01	; 1
    2352:	80 e7       	ldi	r24, 0x70	; 112
    2354:	99 e0       	ldi	r25, 0x09	; 9
    2356:	0e 94 a0 32 	call	0x6540	; 0x6540 <_ZN6StringC1EPKc>
uint8_t uid[] = { 0, 0, 0, 0, 0, 0, 0 };       // Buffer dove memorizzo la UID del Badge
uint8_t uidLength;                             // Length of the UID (4 or 7 bytes depending on ISO14443A card type)
uint8_t uidMezzo[] = { 0, 0, 0, 0, 0, 0, 0 };  // Buffer dove memorizzo la UID del Badge Mezzo
boolean alreadyTimbrata = false;

LiquidCrystal_I2C lcd(0x27, 2, 1, 0, 4, 5, 6, 7, 3, POSITIVE);  // Set the LCD I2C address
    235a:	1f 92       	push	r1
    235c:	83 e0       	ldi	r24, 0x03	; 3
    235e:	8f 93       	push	r24
    2360:	87 e0       	ldi	r24, 0x07	; 7
    2362:	88 2e       	mov	r8, r24
    2364:	96 e0       	ldi	r25, 0x06	; 6
    2366:	a9 2e       	mov	r10, r25
    2368:	25 e0       	ldi	r18, 0x05	; 5
    236a:	c2 2e       	mov	r12, r18
    236c:	34 e0       	ldi	r19, 0x04	; 4
    236e:	e3 2e       	mov	r14, r19
    2370:	21 e0       	ldi	r18, 0x01	; 1
    2372:	42 e0       	ldi	r20, 0x02	; 2
    2374:	67 e2       	ldi	r22, 0x27	; 39
    2376:	82 e4       	ldi	r24, 0x42	; 66
    2378:	99 e0       	ldi	r25, 0x09	; 9
    237a:	0e 94 d4 28 	call	0x51a8	; 0x51a8 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhhh13t_backlighPol>
uint8_t Clessidra[8] = {0x1F, 0x11, 0x0A, 0x04, 0x04, 0x0E, 0x1F, 0x1F,}; 
NFC_PN532 nfc(PN532_IRQ, PN532_RESET);
    237e:	43 e0       	ldi	r20, 0x03	; 3
    2380:	64 e0       	ldi	r22, 0x04	; 4
    2382:	8b e2       	ldi	r24, 0x2B	; 43
    2384:	99 e0       	ldi	r25, 0x09	; 9
    2386:	5a d3       	rcall	.+1716   	; 0x2a3c <_ZN9NFC_PN532C1Ehh>

String StatoAttuale ="START...";
    2388:	6b ea       	ldi	r22, 0xAB	; 171
    238a:	76 e0       	ldi	r23, 0x06	; 6
    238c:	85 e2       	ldi	r24, 0x25	; 37
    238e:	99 e0       	ldi	r25, 0x09	; 9
    2390:	0e 94 a0 32 	call	0x6540	; 0x6540 <_ZN6StringC1EPKc>
String strURLAPI = "";
    2394:	60 e7       	ldi	r22, 0x70	; 112
    2396:	71 e0       	ldi	r23, 0x01	; 1
    2398:	8f e1       	ldi	r24, 0x1F	; 31
    239a:	99 e0       	ldi	r25, 0x09	; 9
    239c:	0e 94 a0 32 	call	0x6540	; 0x6540 <_ZN6StringC1EPKc>
volatile int impulsi = 0;   // Variabile per il conteggio degli impulsi generati dal pulser

/*** GESTIONE HTTP REQUEST ***/

int HTTP_len_response = 12;
String RispostaHTTP = "";
    23a0:	60 e7       	ldi	r22, 0x70	; 112
    23a2:	71 e0       	ldi	r23, 0x01	; 1
    23a4:	83 e1       	ldi	r24, 0x13	; 19
    23a6:	99 e0       	ldi	r25, 0x09	; 9
    23a8:	0e 94 a0 32 	call	0x6540	; 0x6540 <_ZN6StringC1EPKc>
// Ate;TARGA;CARB;LT;KM;
String RaccoltaDati[] = {"","","","","",""};
    23ac:	60 e7       	ldi	r22, 0x70	; 112
    23ae:	71 e0       	ldi	r23, 0x01	; 1
    23b0:	8f ee       	ldi	r24, 0xEF	; 239
    23b2:	98 e0       	ldi	r25, 0x08	; 8
    23b4:	0e 94 a0 32 	call	0x6540	; 0x6540 <_ZN6StringC1EPKc>
    23b8:	60 e7       	ldi	r22, 0x70	; 112
    23ba:	71 e0       	ldi	r23, 0x01	; 1
    23bc:	85 ef       	ldi	r24, 0xF5	; 245
    23be:	98 e0       	ldi	r25, 0x08	; 8
    23c0:	0e 94 a0 32 	call	0x6540	; 0x6540 <_ZN6StringC1EPKc>
    23c4:	60 e7       	ldi	r22, 0x70	; 112
    23c6:	71 e0       	ldi	r23, 0x01	; 1
    23c8:	8b ef       	ldi	r24, 0xFB	; 251
    23ca:	98 e0       	ldi	r25, 0x08	; 8
    23cc:	0e 94 a0 32 	call	0x6540	; 0x6540 <_ZN6StringC1EPKc>
    23d0:	60 e7       	ldi	r22, 0x70	; 112
    23d2:	71 e0       	ldi	r23, 0x01	; 1
    23d4:	81 e0       	ldi	r24, 0x01	; 1
    23d6:	99 e0       	ldi	r25, 0x09	; 9
    23d8:	0e 94 a0 32 	call	0x6540	; 0x6540 <_ZN6StringC1EPKc>
    23dc:	60 e7       	ldi	r22, 0x70	; 112
    23de:	71 e0       	ldi	r23, 0x01	; 1
    23e0:	87 e0       	ldi	r24, 0x07	; 7
    23e2:	99 e0       	ldi	r25, 0x09	; 9
    23e4:	0e 94 a0 32 	call	0x6540	; 0x6540 <_ZN6StringC1EPKc>
    23e8:	60 e7       	ldi	r22, 0x70	; 112
    23ea:	71 e0       	ldi	r23, 0x01	; 1
    23ec:	8d e0       	ldi	r24, 0x0D	; 13
    23ee:	99 e0       	ldi	r25, 0x09	; 9
    23f0:	0e 94 a0 32 	call	0x6540	; 0x6540 <_ZN6StringC1EPKc>
String Carburante = "X";
    23f4:	6f e6       	ldi	r22, 0x6F	; 111
    23f6:	74 e0       	ldi	r23, 0x04	; 4
    23f8:	89 ee       	ldi	r24, 0xE9	; 233
    23fa:	98 e0       	ldi	r25, 0x08	; 8
    23fc:	0e 94 a0 32 	call	0x6540	; 0x6540 <_ZN6StringC1EPKc>
String Risposta = "";
    2400:	60 e7       	ldi	r22, 0x70	; 112
    2402:	71 e0       	ldi	r23, 0x01	; 1
    2404:	83 ee       	ldi	r24, 0xE3	; 227
    2406:	98 e0       	ldi	r25, 0x08	; 8
    2408:	0e 94 a0 32 	call	0x6540	; 0x6540 <_ZN6StringC1EPKc>
String Messaggio = "";
    240c:	60 e7       	ldi	r22, 0x70	; 112
    240e:	71 e0       	ldi	r23, 0x01	; 1
    2410:	8d ed       	ldi	r24, 0xDD	; 221
    2412:	98 e0       	ldi	r25, 0x08	; 8
    2414:	0e 94 a0 32 	call	0x6540	; 0x6540 <_ZN6StringC1EPKc>
String righeDisplay[] = {"X","X","X","X"};
    2418:	6f e6       	ldi	r22, 0x6F	; 111
    241a:	74 e0       	ldi	r23, 0x04	; 4
    241c:	85 ec       	ldi	r24, 0xC5	; 197
    241e:	98 e0       	ldi	r25, 0x08	; 8
    2420:	0e 94 a0 32 	call	0x6540	; 0x6540 <_ZN6StringC1EPKc>
    2424:	6f e6       	ldi	r22, 0x6F	; 111
    2426:	74 e0       	ldi	r23, 0x04	; 4
    2428:	8b ec       	ldi	r24, 0xCB	; 203
    242a:	98 e0       	ldi	r25, 0x08	; 8
    242c:	0e 94 a0 32 	call	0x6540	; 0x6540 <_ZN6StringC1EPKc>
    2430:	6f e6       	ldi	r22, 0x6F	; 111
    2432:	74 e0       	ldi	r23, 0x04	; 4
    2434:	81 ed       	ldi	r24, 0xD1	; 209
    2436:	98 e0       	ldi	r25, 0x08	; 8
    2438:	0e 94 a0 32 	call	0x6540	; 0x6540 <_ZN6StringC1EPKc>
    243c:	6f e6       	ldi	r22, 0x6F	; 111
    243e:	74 e0       	ldi	r23, 0x04	; 4
    2440:	87 ed       	ldi	r24, 0xD7	; 215
    2442:	98 e0       	ldi	r25, 0x08	; 8
    2444:	0e 94 a0 32 	call	0x6540	; 0x6540 <_ZN6StringC1EPKc>
char CodSede[] = "SA1001";
/********************************************************************************************/
/*                    Configurazione Rete                       */
/********************************************************************************************/
 
IPAddress ipCCEC(192, 168, 0, 50);
    2448:	02 e3       	ldi	r16, 0x32	; 50
    244a:	20 e0       	ldi	r18, 0x00	; 0
    244c:	48 ea       	ldi	r20, 0xA8	; 168
    244e:	60 ec       	ldi	r22, 0xC0	; 192
    2450:	8f eb       	ldi	r24, 0xBF	; 191
    2452:	98 e0       	ldi	r25, 0x08	; 8
    2454:	0e 94 4c 2f 	call	0x5e98	; 0x5e98 <_ZN9IPAddressC1Ehhhh>
IPAddress myDns(192,168,1, 21); // DNS
    2458:	05 e1       	ldi	r16, 0x15	; 21
    245a:	21 e0       	ldi	r18, 0x01	; 1
    245c:	48 ea       	ldi	r20, 0xA8	; 168
    245e:	60 ec       	ldi	r22, 0xC0	; 192
    2460:	89 eb       	ldi	r24, 0xB9	; 185
    2462:	98 e0       	ldi	r25, 0x08	; 8
    2464:	0e 94 4c 2f 	call	0x5e98	; 0x5e98 <_ZN9IPAddressC1Ehhhh>
IPAddress gateway(192, 168, 0, 1); // GATEWAY
    2468:	01 e0       	ldi	r16, 0x01	; 1
    246a:	20 e0       	ldi	r18, 0x00	; 0
    246c:	48 ea       	ldi	r20, 0xA8	; 168
    246e:	60 ec       	ldi	r22, 0xC0	; 192
    2470:	83 eb       	ldi	r24, 0xB3	; 179
    2472:	98 e0       	ldi	r25, 0x08	; 8
    2474:	0e 94 4c 2f 	call	0x5e98	; 0x5e98 <_ZN9IPAddressC1Ehhhh>
IPAddress subnet(255, 255, 0, 0); // SUBNET
    2478:	00 e0       	ldi	r16, 0x00	; 0
    247a:	20 e0       	ldi	r18, 0x00	; 0
    247c:	4f ef       	ldi	r20, 0xFF	; 255
    247e:	6f ef       	ldi	r22, 0xFF	; 255
    2480:	8d ea       	ldi	r24, 0xAD	; 173
    2482:	98 e0       	ldi	r25, 0x08	; 8
    2484:	0e 94 4c 2f 	call	0x5e98	; 0x5e98 <_ZN9IPAddressC1Ehhhh>
char serverATE[]  = "wbpate-test.dipvvf.it";
char serverGAC[]  = "gacweb-test.dipvvf.it";
//char serverREST[] = "geoserver.sa.dipvvf.it";
char serverREST[] = "ccec.sa.dipvvf.it";

EthernetClient clientLOCAL;
    2488:	80 ea       	ldi	r24, 0xA0	; 160
    248a:	98 e0       	ldi	r25, 0x08	; 8
    248c:	0e 94 3a 20 	call	0x4074	; 0x4074 <_ZN14EthernetClientC1Ev>
EthernetClient clientATE;
    2490:	83 e9       	ldi	r24, 0x93	; 147
    2492:	98 e0       	ldi	r25, 0x08	; 8
    2494:	0e 94 3a 20 	call	0x4074	; 0x4074 <_ZN14EthernetClientC1Ev>

byte mac[] = {0x00, 0x0E, 0x0C, 0xB0, 0x25, 0x6F};
/********************************************************************************************/
/************ GESTIONE RTC **********/
DS3231M_Class DS3231M;  
    2498:	87 e8       	ldi	r24, 0x87	; 135
    249a:	98 e0       	ldi	r25, 0x08	; 8
    249c:	c8 d7       	rcall	.+3984   	; 0x342e <_ZN13DS3231M_ClassC1Ev>
const uint8_t SPRINTF_BUFFER_SIZE =     32;  
char          inputBuffer[SPRINTF_BUFFER_SIZE];  
unsigned long secs;                            // store the seconds value
unsigned long UltimoPassaggioStato = 0;        // Timer Stati Procedura
unsigned long Timer = 0;                       // Timer
DateTime nowTimer;
    249e:	40 e0       	ldi	r20, 0x00	; 0
    24a0:	50 e0       	ldi	r21, 0x00	; 0
    24a2:	ba 01       	movw	r22, r20
    24a4:	85 e7       	ldi	r24, 0x75	; 117
    24a6:	98 e0       	ldi	r25, 0x08	; 8
    24a8:	56 d6       	rcall	.+3244   	; 0x3156 <_ZN8DateTimeC1Em>
/********************************************************************************************/

const byte ROWS = 4; //four rows
const byte COLS = 4; //four columns

String TARGA = "";
    24aa:	60 e7       	ldi	r22, 0x70	; 112
    24ac:	71 e0       	ldi	r23, 0x01	; 1
    24ae:	8f e6       	ldi	r24, 0x6F	; 111
    24b0:	98 e0       	ldi	r25, 0x08	; 8
    24b2:	0e 94 a0 32 	call	0x6540	; 0x6540 <_ZN6StringC1EPKc>
String KM = "";
    24b6:	60 e7       	ldi	r22, 0x70	; 112
    24b8:	71 e0       	ldi	r23, 0x01	; 1
    24ba:	89 e6       	ldi	r24, 0x69	; 105
    24bc:	98 e0       	ldi	r25, 0x08	; 8
    24be:	0e 94 a0 32 	call	0x6540	; 0x6540 <_ZN6StringC1EPKc>
  {'4','5','6','B'},
  {'7','8','9','C'},
  {'*','0','#','.'}
};

PCA9534 gpio;
    24c2:	0f 90       	pop	r0
    24c4:	0f 90       	pop	r0
    24c6:	86 e6       	ldi	r24, 0x66	; 102
    24c8:	98 e0       	ldi	r25, 0x08	; 8
       intConsecutivePresses = 0;                     // reset press counts
       intConsecutiveNonPresses = 0;
     }
    }
  }               
    24ca:	0f 91       	pop	r16
    24cc:	ef 90       	pop	r14
    24ce:	cf 90       	pop	r12
    24d0:	af 90       	pop	r10
  {'4','5','6','B'},
  {'7','8','9','C'},
  {'*','0','#','.'}
};

PCA9534 gpio;
    24d2:	8f 90       	pop	r8
    24d4:	13 c2       	rjmp	.+1062   	; 0x28fc <_ZN7PCA9534C1Ev>

000024d6 <_GLOBAL__sub_D_intConsecutivePresses>:
       intConsecutivePresses = 0;                     // reset press counts
       intConsecutiveNonPresses = 0;
     }
    }
  }               
    24d6:	cf 93       	push	r28
    24d8:	df 93       	push	r29

const byte ROWS = 4; //four rows
const byte COLS = 4; //four columns

String TARGA = "";
String KM = "";
    24da:	89 e6       	ldi	r24, 0x69	; 105
    24dc:	98 e0       	ldi	r25, 0x08	; 8
    24de:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
/********************************************************************************************/

const byte ROWS = 4; //four rows
const byte COLS = 4; //four columns

String TARGA = "";
    24e2:	8f e6       	ldi	r24, 0x6F	; 111
    24e4:	98 e0       	ldi	r25, 0x08	; 8
    24e6:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
EthernetClient clientATE;

byte mac[] = {0x00, 0x0E, 0x0C, 0xB0, 0x25, 0x6F};
/********************************************************************************************/
/************ GESTIONE RTC **********/
DS3231M_Class DS3231M;  
    24ea:	87 e8       	ldi	r24, 0x87	; 135
    24ec:	98 e0       	ldi	r25, 0x08	; 8
    24ee:	a6 d7       	rcall	.+3916   	; 0x343c <_ZN13DS3231M_ClassD1Ev>
// Ate;TARGA;CARB;LT;KM;
String RaccoltaDati[] = {"","","","","",""};
String Carburante = "X";
String Risposta = "";
String Messaggio = "";
String righeDisplay[] = {"X","X","X","X"};
    24f0:	87 ed       	ldi	r24, 0xD7	; 215
    24f2:	98 e0       	ldi	r25, 0x08	; 8
    24f4:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
    24f8:	81 ed       	ldi	r24, 0xD1	; 209
    24fa:	98 e0       	ldi	r25, 0x08	; 8
    24fc:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
    2500:	8b ec       	ldi	r24, 0xCB	; 203
    2502:	98 e0       	ldi	r25, 0x08	; 8
    2504:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
    2508:	85 ec       	ldi	r24, 0xC5	; 197
    250a:	98 e0       	ldi	r25, 0x08	; 8
    250c:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
String RispostaHTTP = "";
// Ate;TARGA;CARB;LT;KM;
String RaccoltaDati[] = {"","","","","",""};
String Carburante = "X";
String Risposta = "";
String Messaggio = "";
    2510:	8d ed       	ldi	r24, 0xDD	; 221
    2512:	98 e0       	ldi	r25, 0x08	; 8
    2514:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
int HTTP_len_response = 12;
String RispostaHTTP = "";
// Ate;TARGA;CARB;LT;KM;
String RaccoltaDati[] = {"","","","","",""};
String Carburante = "X";
String Risposta = "";
    2518:	83 ee       	ldi	r24, 0xE3	; 227
    251a:	98 e0       	ldi	r25, 0x08	; 8
    251c:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>

int HTTP_len_response = 12;
String RispostaHTTP = "";
// Ate;TARGA;CARB;LT;KM;
String RaccoltaDati[] = {"","","","","",""};
String Carburante = "X";
    2520:	89 ee       	ldi	r24, 0xE9	; 233
    2522:	98 e0       	ldi	r25, 0x08	; 8
    2524:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
/*** GESTIONE HTTP REQUEST ***/

int HTTP_len_response = 12;
String RispostaHTTP = "";
// Ate;TARGA;CARB;LT;KM;
String RaccoltaDati[] = {"","","","","",""};
    2528:	c3 e1       	ldi	r28, 0x13	; 19
    252a:	d9 e0       	ldi	r29, 0x09	; 9
    252c:	26 97       	sbiw	r28, 0x06	; 6
    252e:	ce 01       	movw	r24, r28
    2530:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
    2534:	88 e0       	ldi	r24, 0x08	; 8
    2536:	cf 3e       	cpi	r28, 0xEF	; 239
    2538:	d8 07       	cpc	r29, r24
    253a:	c1 f7       	brne	.-16     	; 0x252c <_GLOBAL__sub_D_intConsecutivePresses+0x56>
volatile int impulsi = 0;   // Variabile per il conteggio degli impulsi generati dal pulser

/*** GESTIONE HTTP REQUEST ***/

int HTTP_len_response = 12;
String RispostaHTTP = "";
    253c:	83 e1       	ldi	r24, 0x13	; 19
    253e:	99 e0       	ldi	r25, 0x09	; 9
    2540:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
LiquidCrystal_I2C lcd(0x27, 2, 1, 0, 4, 5, 6, 7, 3, POSITIVE);  // Set the LCD I2C address
uint8_t Clessidra[8] = {0x1F, 0x11, 0x0A, 0x04, 0x04, 0x0E, 0x1F, 0x1F,}; 
NFC_PN532 nfc(PN532_IRQ, PN532_RESET);

String StatoAttuale ="START...";
String strURLAPI = "";
    2544:	8f e1       	ldi	r24, 0x1F	; 31
    2546:	99 e0       	ldi	r25, 0x09	; 9
    2548:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>

LiquidCrystal_I2C lcd(0x27, 2, 1, 0, 4, 5, 6, 7, 3, POSITIVE);  // Set the LCD I2C address
uint8_t Clessidra[8] = {0x1F, 0x11, 0x0A, 0x04, 0x04, 0x0E, 0x1F, 0x1F,}; 
NFC_PN532 nfc(PN532_IRQ, PN532_RESET);

String StatoAttuale ="START...";
    254c:	85 e2       	ldi	r24, 0x25	; 37
    254e:	99 e0       	ldi	r25, 0x09	; 9
    2550:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
const uint8_t I2C_PCA9534_ADDR = 0x20;

volatile int intConsecutivePresses = 0;
volatile int intConsecutiveNonPresses = 0;

struct mezzoType {
    2554:	80 e7       	ldi	r24, 0x70	; 112
    2556:	99 e0       	ldi	r25, 0x09	; 9
    2558:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
    255c:	8a e6       	ldi	r24, 0x6A	; 106
    255e:	99 e0       	ldi	r25, 0x09	; 9
    2560:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
    2564:	84 e6       	ldi	r24, 0x64	; 100
    2566:	99 e0       	ldi	r25, 0x09	; 9
       intConsecutivePresses = 0;                     // reset press counts
       intConsecutiveNonPresses = 0;
     }
    }
  }               
    2568:	df 91       	pop	r29
    256a:	cf 91       	pop	r28
const uint8_t I2C_PCA9534_ADDR = 0x20;

volatile int intConsecutivePresses = 0;
volatile int intConsecutiveNonPresses = 0;

struct mezzoType {
    256c:	0c 94 39 32 	jmp	0x6472	; 0x6472 <_ZN6StringD1Ev>

00002570 <setup>:
  }
  printTab(1);
}
/************************************************************/

void setup() {
    2570:	cf 92       	push	r12
    2572:	df 92       	push	r13
    2574:	ef 92       	push	r14
    2576:	ff 92       	push	r15
    2578:	0f 93       	push	r16
    257a:	1f 93       	push	r17
    257c:	cf 93       	push	r28
    257e:	df 93       	push	r29
    2580:	00 d0       	rcall	.+0      	; 0x2582 <setup+0x12>
    2582:	00 d0       	rcall	.+0      	; 0x2584 <setup+0x14>
    2584:	00 d0       	rcall	.+0      	; 0x2586 <setup+0x16>
    2586:	cd b7       	in	r28, 0x3d	; 61
    2588:	de b7       	in	r29, 0x3e	; 62
    258a:	2f ef       	ldi	r18, 0xFF	; 255
    258c:	81 ee       	ldi	r24, 0xE1	; 225
    258e:	94 e0       	ldi	r25, 0x04	; 4
    2590:	21 50       	subi	r18, 0x01	; 1
    2592:	80 40       	sbci	r24, 0x00	; 0
    2594:	90 40       	sbci	r25, 0x00	; 0
    2596:	e1 f7       	brne	.-8      	; 0x2590 <setup+0x20>
    2598:	00 c0       	rjmp	.+0      	; 0x259a <setup+0x2a>
    259a:	00 00       	nop
/*********************************************************************************************/
static const uint8_t RELE1 = PORTC7;
static const uint8_t RELE2 = PORTA7;
/*********************************************************************************************/
static inline void initSS_FLASH()  { DDRB |= (1 << PB4); } // set DDRB bit 4, sets PB4 for output
static inline void initSS_ETH()    { DDRC |= (1 << PC4); } // set DDRC bit 4, sets PC4 for output
    259c:	3c 9a       	sbi	0x07, 4	; 7
    259e:	8f e1       	ldi	r24, 0x1F	; 31
    25a0:	9e e4       	ldi	r25, 0x4E	; 78
    25a2:	01 97       	sbiw	r24, 0x01	; 1
    25a4:	f1 f7       	brne	.-4      	; 0x25a2 <setup+0x32>
    25a6:	00 c0       	rjmp	.+0      	; 0x25a8 <setup+0x38>
    25a8:	00 00       	nop
  
  _delay_ms(100);

   initSS_ETH();
   _delay_ms(5);
   disable_ETH();
    25aa:	0e 94 92 01 	call	0x324	; 0x324 <_ZL11disable_ETHv>
   
//   Serial.begin(9600);
   Serial.println(" inizio Setup ......");
    25ae:	64 eb       	ldi	r22, 0xB4	; 180
    25b0:	76 e0       	ldi	r23, 0x06	; 6
    25b2:	8f ec       	ldi	r24, 0xCF	; 207
    25b4:	9a e0       	ldi	r25, 0x0A	; 10
    25b6:	0e 94 0a 30 	call	0x6014	; 0x6014 <_ZN5Print7printlnEPKc>
 
  /*******************************************************************************************/
  DDRC |= (1 << BUZZER); // set BUZZER (PC6) for output
    25ba:	3e 9a       	sbi	0x07, 6	; 7
  DDRC |= (1 << RELE1);  // Rele1
    25bc:	3f 9a       	sbi	0x07, 7	; 7
  DDRA |= (1 << RELE2);  // Rele2   // set PA7 e PC7 come output 
    25be:	0f 9a       	sbi	0x01, 7	; 1
    25c0:	8f e3       	ldi	r24, 0x3F	; 63
    25c2:	9c e9       	ldi	r25, 0x9C	; 156
    25c4:	01 97       	sbiw	r24, 0x01	; 1
    25c6:	f1 f7       	brne	.-4      	; 0x25c4 <setup+0x54>
    25c8:	00 c0       	rjmp	.+0      	; 0x25ca <setup+0x5a>
    25ca:	00 00       	nop
  _delay_ms(10);
  SET_BIT(PORTC,RELE1); // Apri RELE1
    25cc:	47 9a       	sbi	0x08, 7	; 8
    25ce:	8f e3       	ldi	r24, 0x3F	; 63
    25d0:	9c e9       	ldi	r25, 0x9C	; 156
    25d2:	01 97       	sbiw	r24, 0x01	; 1
    25d4:	f1 f7       	brne	.-4      	; 0x25d2 <setup+0x62>
    25d6:	00 c0       	rjmp	.+0      	; 0x25d8 <setup+0x68>
    25d8:	00 00       	nop
  _delay_ms(10);
  SET_BIT(PORTA,RELE2); // Apri RELE2
    25da:	17 9a       	sbi	0x02, 7	; 2
  printLine(); 
    25dc:	0e 94 07 02 	call	0x40e	; 0x40e <_Z9printLinev>
  
  /***************************LCD******************************/
  
  lcd.begin(20,4);         // Inizializza display LCD 20x4 e accendi e spegni 2 volte
    25e0:	20 e0       	ldi	r18, 0x00	; 0
    25e2:	44 e0       	ldi	r20, 0x04	; 4
    25e4:	64 e1       	ldi	r22, 0x14	; 20
    25e6:	82 e4       	ldi	r24, 0x42	; 66
    25e8:	99 e0       	ldi	r25, 0x09	; 9
    25ea:	0e 94 5a 29 	call	0x52b4	; 0x52b4 <_ZN17LiquidCrystal_I2C5beginEhhh>

  // ------- 2 blinks -------------
  for(int i = 0; i< 2; i++)
  {
    lcd.backlight();
    25ee:	82 e4       	ldi	r24, 0x42	; 66
    25f0:	99 e0       	ldi	r25, 0x09	; 9
    25f2:	0e 94 37 27 	call	0x4e6e	; 0x4e6e <_ZN3LCD9backlightEv>
    25f6:	9f ef       	ldi	r25, 0xFF	; 255
    25f8:	24 e3       	ldi	r18, 0x34	; 52
    25fa:	8c e0       	ldi	r24, 0x0C	; 12
    25fc:	91 50       	subi	r25, 0x01	; 1
    25fe:	20 40       	sbci	r18, 0x00	; 0
    2600:	80 40       	sbci	r24, 0x00	; 0
    2602:	e1 f7       	brne	.-8      	; 0x25fc <setup+0x8c>
    2604:	00 c0       	rjmp	.+0      	; 0x2606 <setup+0x96>
    2606:	00 00       	nop
    _delay_ms(250);
    lcd.noBacklight();
    2608:	82 e4       	ldi	r24, 0x42	; 66
    260a:	99 e0       	ldi	r25, 0x09	; 9
    260c:	0e 94 3f 27 	call	0x4e7e	; 0x4e7e <_ZN3LCD11noBacklightEv>
    2610:	9f ef       	ldi	r25, 0xFF	; 255
    2612:	24 e3       	ldi	r18, 0x34	; 52
    2614:	8c e0       	ldi	r24, 0x0C	; 12
    2616:	91 50       	subi	r25, 0x01	; 1
    2618:	20 40       	sbci	r18, 0x00	; 0
    261a:	80 40       	sbci	r24, 0x00	; 0
    261c:	e1 f7       	brne	.-8      	; 0x2616 <setup+0xa6>
    261e:	00 c0       	rjmp	.+0      	; 0x2620 <setup+0xb0>
    2620:	00 00       	nop
  lcd.begin(20,4);         // Inizializza display LCD 20x4 e accendi e spegni 2 volte

  // ------- 2 blinks -------------
  for(int i = 0; i< 2; i++)
  {
    lcd.backlight();
    2622:	82 e4       	ldi	r24, 0x42	; 66
    2624:	99 e0       	ldi	r25, 0x09	; 9
    2626:	0e 94 37 27 	call	0x4e6e	; 0x4e6e <_ZN3LCD9backlightEv>
    262a:	9f ef       	ldi	r25, 0xFF	; 255
    262c:	24 e3       	ldi	r18, 0x34	; 52
    262e:	8c e0       	ldi	r24, 0x0C	; 12
    2630:	91 50       	subi	r25, 0x01	; 1
    2632:	20 40       	sbci	r18, 0x00	; 0
    2634:	80 40       	sbci	r24, 0x00	; 0
    2636:	e1 f7       	brne	.-8      	; 0x2630 <setup+0xc0>
    2638:	00 c0       	rjmp	.+0      	; 0x263a <setup+0xca>
    263a:	00 00       	nop
    _delay_ms(250);
    lcd.noBacklight();
    263c:	82 e4       	ldi	r24, 0x42	; 66
    263e:	99 e0       	ldi	r25, 0x09	; 9
    2640:	0e 94 3f 27 	call	0x4e7e	; 0x4e7e <_ZN3LCD11noBacklightEv>
    2644:	9f ef       	ldi	r25, 0xFF	; 255
    2646:	24 e3       	ldi	r18, 0x34	; 52
    2648:	8c e0       	ldi	r24, 0x0C	; 12
    264a:	91 50       	subi	r25, 0x01	; 1
    264c:	20 40       	sbci	r18, 0x00	; 0
    264e:	80 40       	sbci	r24, 0x00	; 0
    2650:	e1 f7       	brne	.-8      	; 0x264a <setup+0xda>
    2652:	00 c0       	rjmp	.+0      	; 0x2654 <setup+0xe4>
    2654:	00 00       	nop
    _delay_ms(250);
  }

  lcd.createChar(1, Clessidra); // Creo CHAR Clessidra
    2656:	49 e4       	ldi	r20, 0x49	; 73
    2658:	51 e0       	ldi	r21, 0x01	; 1
    265a:	61 e0       	ldi	r22, 0x01	; 1
    265c:	82 e4       	ldi	r24, 0x42	; 66
    265e:	99 e0       	ldi	r25, 0x09	; 9
    2660:	0e 94 1d 28 	call	0x503a	; 0x503a <_ZN3LCD10createCharEhPh>
    2664:	9f ef       	ldi	r25, 0xFF	; 255
    2666:	29 ef       	ldi	r18, 0xF9	; 249
    2668:	80 e0       	ldi	r24, 0x00	; 0
    266a:	91 50       	subi	r25, 0x01	; 1
    266c:	20 40       	sbci	r18, 0x00	; 0
    266e:	80 40       	sbci	r24, 0x00	; 0
    2670:	e1 f7       	brne	.-8      	; 0x266a <setup+0xfa>
    2672:	00 c0       	rjmp	.+0      	; 0x2674 <setup+0x104>
    2674:	00 00       	nop
  _delay_ms(20);
  lcd.backlight();
    2676:	82 e4       	ldi	r24, 0x42	; 66
    2678:	99 e0       	ldi	r25, 0x09	; 9
    267a:	0e 94 37 27 	call	0x4e6e	; 0x4e6e <_ZN3LCD9backlightEv>
    267e:	05 ec       	ldi	r16, 0xC5	; 197
    2680:	18 e0       	ldi	r17, 0x08	; 8

  for (int r=0;r<4;r++)
    righeDisplay[r]="";
    2682:	60 e7       	ldi	r22, 0x70	; 112
    2684:	71 e0       	ldi	r23, 0x01	; 1
    2686:	c8 01       	movw	r24, r16
    2688:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>
    268c:	0a 5f       	subi	r16, 0xFA	; 250
    268e:	1f 4f       	sbci	r17, 0xFF	; 255

  lcd.createChar(1, Clessidra); // Creo CHAR Clessidra
  _delay_ms(20);
  lcd.backlight();

  for (int r=0;r<4;r++)
    2690:	98 e0       	ldi	r25, 0x08	; 8
    2692:	0d 3d       	cpi	r16, 0xDD	; 221
    2694:	19 07       	cpc	r17, r25
    2696:	a9 f7       	brne	.-22     	; 0x2682 <setup+0x112>
    righeDisplay[r]="";
  
   printLine();
    2698:	0e 94 07 02 	call	0x40e	; 0x40e <_Z9printLinev>
   
  /***************************NFC*************************/ 
  
  nfc.begin(); 
    269c:	8b e2       	ldi	r24, 0x2B	; 43
    269e:	99 e0       	ldi	r25, 0x09	; 9
    26a0:	de d1       	rcall	.+956    	; 0x2a5e <_ZN9NFC_PN5325beginEv>
    26a2:	2f ef       	ldi	r18, 0xFF	; 255
    26a4:	80 e7       	ldi	r24, 0x70	; 112
    26a6:	92 e0       	ldi	r25, 0x02	; 2
    26a8:	21 50       	subi	r18, 0x01	; 1
    26aa:	80 40       	sbci	r24, 0x00	; 0
    26ac:	90 40       	sbci	r25, 0x00	; 0
    26ae:	e1 f7       	brne	.-8      	; 0x26a8 <setup+0x138>
    26b0:	00 c0       	rjmp	.+0      	; 0x26b2 <setup+0x142>
    26b2:	00 00       	nop
  
  _delay_ms(50);

  uint32_t versiondata = nfc.getFirmwareVersion();
    26b4:	8b e2       	ldi	r24, 0x2B	; 43
    26b6:	99 e0       	ldi	r25, 0x09	; 9
    26b8:	72 d3       	rcall	.+1764   	; 0x2d9e <_ZN9NFC_PN53218getFirmwareVersionEv>
    26ba:	6b 01       	movw	r12, r22
    26bc:	7c 01       	movw	r14, r24
  if (! versiondata) {
    26be:	67 2b       	or	r22, r23
    26c0:	68 2b       	or	r22, r24
    26c2:	69 2b       	or	r22, r25
    26c4:	69 f5       	brne	.+90     	; 0x2720 <setup+0x1b0>
    Serial.print("Modulo PN532 non trovato");
    26c6:	69 ec       	ldi	r22, 0xC9	; 201
    26c8:	76 e0       	ldi	r23, 0x06	; 6
    26ca:	8f ec       	ldi	r24, 0xCF	; 207
    26cc:	9a e0       	ldi	r25, 0x0A	; 10
    26ce:	0e 94 df 2f 	call	0x5fbe	; 0x5fbe <_ZN5Print5printEPKc>
    lcd.backlight();
    26d2:	82 e4       	ldi	r24, 0x42	; 66
    26d4:	99 e0       	ldi	r25, 0x09	; 9
    26d6:	0e 94 37 27 	call	0x4e6e	; 0x4e6e <_ZN3LCD9backlightEv>
    26da:	2f ef       	ldi	r18, 0xFF	; 255
    26dc:	84 e3       	ldi	r24, 0x34	; 52
    26de:	9c e0       	ldi	r25, 0x0C	; 12
    26e0:	21 50       	subi	r18, 0x01	; 1
    26e2:	80 40       	sbci	r24, 0x00	; 0
    26e4:	90 40       	sbci	r25, 0x00	; 0
    26e6:	e1 f7       	brne	.-8      	; 0x26e0 <setup+0x170>
    26e8:	00 c0       	rjmp	.+0      	; 0x26ea <setup+0x17a>
    26ea:	00 00       	nop
    _delay_ms(250);
    lcd.clear();
    26ec:	82 e4       	ldi	r24, 0x42	; 66
    26ee:	99 e0       	ldi	r25, 0x09	; 9
    26f0:	0e 94 4f 27 	call	0x4e9e	; 0x4e9e <_ZN3LCD5clearEv>
    lcd.print("Modulo PN532 non trovato ");    
    26f4:	62 ee       	ldi	r22, 0xE2	; 226
    26f6:	76 e0       	ldi	r23, 0x06	; 6
    26f8:	82 e4       	ldi	r24, 0x42	; 66
    26fa:	99 e0       	ldi	r25, 0x09	; 9
    26fc:	0e 94 df 2f 	call	0x5fbe	; 0x5fbe <_ZN5Print5printEPKc>
    2700:	2f ef       	ldi	r18, 0xFF	; 255
    2702:	87 ea       	ldi	r24, 0xA7	; 167
    2704:	91 e6       	ldi	r25, 0x61	; 97
    2706:	21 50       	subi	r18, 0x01	; 1
    2708:	80 40       	sbci	r24, 0x00	; 0
    270a:	90 40       	sbci	r25, 0x00	; 0
    270c:	e1 f7       	brne	.-8      	; 0x2706 <setup+0x196>
    270e:	00 c0       	rjmp	.+0      	; 0x2710 <setup+0x1a0>
    2710:	00 00       	nop
    _delay_ms(2000);                            
    StatoAttuale  = " CHIAMA ASSISTENZA";   
    2712:	6c ef       	ldi	r22, 0xFC	; 252
    2714:	76 e0       	ldi	r23, 0x06	; 6
    2716:	85 e2       	ldi	r24, 0x25	; 37
    2718:	99 e0       	ldi	r25, 0x09	; 9
    271a:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>
    271e:	06 c0       	rjmp	.+12     	; 0x272c <setup+0x1bc>
    //while (1); // halt  // Aspetta per sempre
  } else {Serial.println("Modulo NFC OK ......");}
    2720:	6f e0       	ldi	r22, 0x0F	; 15
    2722:	77 e0       	ldi	r23, 0x07	; 7
    2724:	8f ec       	ldi	r24, 0xCF	; 207
    2726:	9a e0       	ldi	r25, 0x0A	; 10
    2728:	0e 94 0a 30 	call	0x6014	; 0x6014 <_ZN5Print7printlnEPKc>
  
  Serial.print("Found chip PN5"); Serial.println((versiondata>>24) & 0xFF, HEX);
    272c:	64 e2       	ldi	r22, 0x24	; 36
    272e:	77 e0       	ldi	r23, 0x07	; 7
    2730:	8f ec       	ldi	r24, 0xCF	; 207
    2732:	9a e0       	ldi	r25, 0x0A	; 10
    2734:	0e 94 df 2f 	call	0x5fbe	; 0x5fbe <_ZN5Print5printEPKc>
    2738:	4f 2d       	mov	r20, r15
    273a:	55 27       	eor	r21, r21
    273c:	66 27       	eor	r22, r22
    273e:	77 27       	eor	r23, r23
    2740:	20 e1       	ldi	r18, 0x10	; 16
    2742:	30 e0       	ldi	r19, 0x00	; 0
    2744:	8f ec       	ldi	r24, 0xCF	; 207
    2746:	9a e0       	ldi	r25, 0x0A	; 10
    2748:	0e 94 73 30 	call	0x60e6	; 0x60e6 <_ZN5Print7printlnEmi>
  Serial.print("Firmware ver. "); Serial.print((versiondata>>16) & 0xFF, DEC);
    274c:	63 e3       	ldi	r22, 0x33	; 51
    274e:	77 e0       	ldi	r23, 0x07	; 7
    2750:	8f ec       	ldi	r24, 0xCF	; 207
    2752:	9a e0       	ldi	r25, 0x0A	; 10
    2754:	0e 94 df 2f 	call	0x5fbe	; 0x5fbe <_ZN5Print5printEPKc>
    2758:	4e 2d       	mov	r20, r14
    275a:	50 e0       	ldi	r21, 0x00	; 0
    275c:	60 e0       	ldi	r22, 0x00	; 0
    275e:	70 e0       	ldi	r23, 0x00	; 0
    2760:	2a e0       	ldi	r18, 0x0A	; 10
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	8f ec       	ldi	r24, 0xCF	; 207
    2766:	9a e0       	ldi	r25, 0x0A	; 10
    2768:	0e 94 61 30 	call	0x60c2	; 0x60c2 <_ZN5Print5printEmi>
  Serial.print('.'); Serial.println((versiondata>>8) & 0xFF, DEC);
    276c:	6e e2       	ldi	r22, 0x2E	; 46
    276e:	8f ec       	ldi	r24, 0xCF	; 207
    2770:	9a e0       	ldi	r25, 0x0A	; 10
    2772:	0e 94 e0 2f 	call	0x5fc0	; 0x5fc0 <_ZN5Print5printEc>
    2776:	4d 2d       	mov	r20, r13
    2778:	50 e0       	ldi	r21, 0x00	; 0
    277a:	60 e0       	ldi	r22, 0x00	; 0
    277c:	70 e0       	ldi	r23, 0x00	; 0
    277e:	2a e0       	ldi	r18, 0x0A	; 10
    2780:	30 e0       	ldi	r19, 0x00	; 0
    2782:	8f ec       	ldi	r24, 0xCF	; 207
    2784:	9a e0       	ldi	r25, 0x0A	; 10
    2786:	0e 94 73 30 	call	0x60e6	; 0x60e6 <_ZN5Print7printlnEmi>

  nfc.setPassiveActivationRetries(0xFF);   
    278a:	6f ef       	ldi	r22, 0xFF	; 255
    278c:	8b e2       	ldi	r24, 0x2B	; 43
    278e:	99 e0       	ldi	r25, 0x09	; 9
    2790:	7c d3       	rcall	.+1784   	; 0x2e8a <_ZN9NFC_PN53227setPassiveActivationRetriesEh>
  nfc.SAMConfig();
    2792:	8b e2       	ldi	r24, 0x2B	; 43
    2794:	99 e0       	ldi	r25, 0x09	; 9
    2796:	4b d3       	rcall	.+1686   	; 0x2e2e <_ZN9NFC_PN5329SAMConfigEv>
    2798:	0e 94 07 02 	call	0x40e	; 0x40e <_Z9printLinev>
  printLine();
    279c:	40 ea       	ldi	r20, 0xA0	; 160
  /***************************SPY FLASH*************************/  
  
  /*************************** RTC ************************/
  while (!DS3231M.begin()) {                                                 
    279e:	56 e8       	ldi	r21, 0x86	; 134
    27a0:	61 e0       	ldi	r22, 0x01	; 1
    27a2:	70 e0       	ldi	r23, 0x00	; 0
    27a4:	87 e8       	ldi	r24, 0x87	; 135
    27a6:	98 e0       	ldi	r25, 0x08	; 8
    27a8:	8c d6       	rcall	.+3352   	; 0x34c2 <_ZN13DS3231M_Class5beginEm>
    27aa:	81 11       	cpse	r24, r1
    27ac:	10 c0       	rjmp	.+32     	; 0x27ce <setup+0x25e>
    27ae:	62 ee       	ldi	r22, 0xE2	; 226
    Serial.println(F("Unable to find DS3231MM. Checking again in 3s."));     
    27b0:	71 e0       	ldi	r23, 0x01	; 1
    27b2:	8f ec       	ldi	r24, 0xCF	; 207
    27b4:	9a e0       	ldi	r25, 0x0A	; 10
    27b6:	0e 94 ea 2f 	call	0x5fd4	; 0x5fd4 <_ZN5Print7printlnEPK19__FlashStringHelper>
    27ba:	2f ef       	ldi	r18, 0xFF	; 255
    27bc:	83 ed       	ldi	r24, 0xD3	; 211
    27be:	90 e3       	ldi	r25, 0x30	; 48
    27c0:	21 50       	subi	r18, 0x01	; 1
    27c2:	80 40       	sbci	r24, 0x00	; 0
    27c4:	90 40       	sbci	r25, 0x00	; 0
    27c6:	e1 f7       	brne	.-8      	; 0x27c0 <setup+0x250>
    27c8:	00 c0       	rjmp	.+0      	; 0x27ca <setup+0x25a>
    27ca:	00 00       	nop
    27cc:	e7 cf       	rjmp	.-50     	; 0x279c <setup+0x22c>
    27ce:	2f ef       	ldi	r18, 0xFF	; 255
    27d0:	80 e7       	ldi	r24, 0x70	; 112
    27d2:	92 e0       	ldi	r25, 0x02	; 2
    27d4:	21 50       	subi	r18, 0x01	; 1
    27d6:	80 40       	sbci	r24, 0x00	; 0
    27d8:	90 40       	sbci	r25, 0x00	; 0
    27da:	e1 f7       	brne	.-8      	; 0x27d4 <setup+0x264>
    27dc:	00 c0       	rjmp	.+0      	; 0x27de <setup+0x26e>
    27de:	00 00       	nop
    27e0:	64 ec       	ldi	r22, 0xC4	; 196
    _delay_ms(1000);                                                         
  } 
  _delay_ms(50);

  Serial.println(F("RTC chip DS3231M initialized."));                                 
    27e2:	71 e0       	ldi	r23, 0x01	; 1
    27e4:	8f ec       	ldi	r24, 0xCF	; 207
    27e6:	9a e0       	ldi	r25, 0x0A	; 10
    27e8:	0e 94 ea 2f 	call	0x5fd4	; 0x5fd4 <_ZN5Print7printlnEPK19__FlashStringHelper>
  DS3231M.adjust();
    27ec:	87 e8       	ldi	r24, 0x87	; 135
    27ee:	98 e0       	ldi	r25, 0x08	; 8
    27f0:	c6 d7       	rcall	.+3980   	; 0x377e <_ZN13DS3231M_Class6adjustEv>
    27f2:	0e 94 07 02 	call	0x40e	; 0x40e <_Z9printLinev>
  printLine();
    27f6:	62 e4       	ldi	r22, 0x42	; 66
  /*************************** POTENZIOMETRI ************************/
  Serial.println("Inizializzo POTENZIOMETRI per livello pulser.......");
    27f8:	77 e0       	ldi	r23, 0x07	; 7
    27fa:	8f ec       	ldi	r24, 0xCF	; 207
    27fc:	9a e0       	ldi	r25, 0x0A	; 10
    27fe:	0e 94 0a 30 	call	0x6014	; 0x6014 <_ZN5Print7printlnEPKc>
    2802:	89 e7       	ldi	r24, 0x79	; 121
  
  Wire.begin(); // join i2c bus (address optional for master) 
    2804:	9a e0       	ldi	r25, 0x0A	; 10
    2806:	0e 94 bd 2c 	call	0x597a	; 0x597a <_ZN7TwoWire5beginEv>
    280a:	68 e2       	ldi	r22, 0x28	; 40
  
  Wire.beginTransmission(0x28);  // (0x50) POTENZIOMETRO U11
    280c:	70 e0       	ldi	r23, 0x00	; 0
    280e:	89 e7       	ldi	r24, 0x79	; 121
    2810:	9a e0       	ldi	r25, 0x0A	; 10
    2812:	0e 94 da 2c 	call	0x59b4	; 0x59b4 <_ZN7TwoWire17beginTransmissionEi>
    2816:	60 e0       	ldi	r22, 0x00	; 0
  Wire.write(byte(0x00));        // Wiper Register
    2818:	89 e7       	ldi	r24, 0x79	; 121
    281a:	9a e0       	ldi	r25, 0x0A	; 10
    281c:	0e 94 7f 2c 	call	0x58fe	; 0x58fe <_ZN7TwoWire5writeEh>
    2820:	62 e3       	ldi	r22, 0x32	; 50
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    2822:	89 e7       	ldi	r24, 0x79	; 121
    2824:	9a e0       	ldi	r25, 0x0A	; 10
    2826:	0e 94 7f 2c 	call	0x58fe	; 0x58fe <_ZN7TwoWire5writeEh>
    282a:	89 e7       	ldi	r24, 0x79	; 121
  Wire.write(50);                // Valore del potenziomentro circa 6 volt
  Wire.endTransmission(); 
    282c:	9a e0       	ldi	r25, 0x0A	; 10
    282e:	0e 94 51 2d 	call	0x5aa2	; 0x5aa2 <_ZN7TwoWire15endTransmissionEv>
    2832:	2f ef       	ldi	r18, 0xFF	; 255
    2834:	80 e7       	ldi	r24, 0x70	; 112
    2836:	92 e0       	ldi	r25, 0x02	; 2
    2838:	21 50       	subi	r18, 0x01	; 1
    283a:	80 40       	sbci	r24, 0x00	; 0
    283c:	90 40       	sbci	r25, 0x00	; 0
    283e:	e1 f7       	brne	.-8      	; 0x2838 <setup+0x2c8>
    2840:	00 c0       	rjmp	.+0      	; 0x2842 <setup+0x2d2>
    2842:	00 00       	nop
    2844:	62 e5       	ldi	r22, 0x52	; 82
   
   _delay_ms(50);     
   
   Wire.beginTransmission(0x52);  // (0x52) POTENZIOMETRO U12
    2846:	70 e0       	ldi	r23, 0x00	; 0
    2848:	89 e7       	ldi	r24, 0x79	; 121
    284a:	9a e0       	ldi	r25, 0x0A	; 10
    284c:	0e 94 da 2c 	call	0x59b4	; 0x59b4 <_ZN7TwoWire17beginTransmissionEi>
    2850:	60 e0       	ldi	r22, 0x00	; 0
   Wire.write(byte(0x00));        // Wiper Register
    2852:	89 e7       	ldi	r24, 0x79	; 121
    2854:	9a e0       	ldi	r25, 0x0A	; 10
    2856:	0e 94 7f 2c 	call	0x58fe	; 0x58fe <_ZN7TwoWire5writeEh>
    285a:	62 e3       	ldi	r22, 0x32	; 50
    285c:	89 e7       	ldi	r24, 0x79	; 121
    285e:	9a e0       	ldi	r25, 0x0A	; 10
    2860:	0e 94 7f 2c 	call	0x58fe	; 0x58fe <_ZN7TwoWire5writeEh>
    2864:	89 e7       	ldi	r24, 0x79	; 121
   Wire.write(50);                // Valore del potenziomentro circa 6 volt
   Wire.endTransmission(); 
    2866:	9a e0       	ldi	r25, 0x0A	; 10
    2868:	0e 94 51 2d 	call	0x5aa2	; 0x5aa2 <_ZN7TwoWire15endTransmissionEv>
    286c:	89 e7       	ldi	r24, 0x79	; 121
  
   Wire.end();
    286e:	9a e0       	ldi	r25, 0x0A	; 10
    2870:	0e 94 cc 2c 	call	0x5998	; 0x5998 <_ZN7TwoWire3endEv>
    2874:	66 e7       	ldi	r22, 0x76	; 118

   Serial.println("POTENZIOMETRI OK");
    2876:	77 e0       	ldi	r23, 0x07	; 7
    2878:	8f ec       	ldi	r24, 0xCF	; 207
    287a:	9a e0       	ldi	r25, 0x0A	; 10
    287c:	0e 94 0a 30 	call	0x6014	; 0x6014 <_ZN5Print7printlnEPKc>
    2880:	0e 94 07 02 	call	0x40e	; 0x40e <_Z9printLinev>
   printLine();
  /*************************KEYPAD*********************/
   gpio.begin(I2C_PCA9534_ADDR);
    2884:	60 e2       	ldi	r22, 0x20	; 32
    2886:	86 e6       	ldi	r24, 0x66	; 102
    2888:	98 e0       	ldi	r25, 0x08	; 8
    288a:	3d d0       	rcall	.+122    	; 0x2906 <_ZN7PCA95345beginEh>
   
  // set REG IOexpander OPREG 11000011,INVREG 00000000,CONFREG 00111100
   gpio.setporteIoExp(0xC3,0x00,0x3C); 
    288c:	2c e3       	ldi	r18, 0x3C	; 60
    288e:	40 e0       	ldi	r20, 0x00	; 0
    2890:	63 ec       	ldi	r22, 0xC3	; 195
    2892:	86 e6       	ldi	r24, 0x66	; 102
    2894:	98 e0       	ldi	r25, 0x08	; 8
    2896:	3d d0       	rcall	.+122    	; 0x2912 <_ZN7PCA953413setporteIoExpEhhh>
    2898:	8e ef       	ldi	r24, 0xFE	; 254
  /**************** SETTING INIZIALI ******************/      
  
  stato_procedura = - 2; // set stato di partenza
    289a:	9f ef       	ldi	r25, 0xFF	; 255
    289c:	90 93 1c 09 	sts	0x091C, r25	; 0x80091c <stato_procedura+0x1>
    28a0:	80 93 1b 09 	sts	0x091B, r24	; 0x80091b <stato_procedura>
    28a4:	67 e8       	ldi	r22, 0x87	; 135
  
  StatoAttuale = "Starting ...."; 
    28a6:	77 e0       	ldi	r23, 0x07	; 7
    28a8:	85 e2       	ldi	r24, 0x25	; 37
    28aa:	99 e0       	ldi	r25, 0x09	; 9
    28ac:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN6StringaSEPKc>
    28b0:	65 e9       	ldi	r22, 0x95	; 149
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    28b2:	77 e0       	ldi	r23, 0x07	; 7
    28b4:	ce 01       	movw	r24, r28
    28b6:	01 96       	adiw	r24, 0x01	; 1
    28b8:	0e 94 a0 32 	call	0x6540	; 0x6540 <_ZN6StringC1EPKc>
    28bc:	65 e2       	ldi	r22, 0x25	; 37
  
  Serial.println("Stato Iniziale" + StatoAttuale);
    28be:	79 e0       	ldi	r23, 0x09	; 9
    28c0:	ce 01       	movw	r24, r28
    28c2:	01 96       	adiw	r24, 0x01	; 1
    28c4:	0e 94 75 34 	call	0x68ea	; 0x68ea <_ZplRK15StringSumHelperRK6String>
    28c8:	bc 01       	movw	r22, r24
    28ca:	8f ec       	ldi	r24, 0xCF	; 207
    28cc:	9a e0       	ldi	r25, 0x0A	; 10
    28ce:	0e 94 fa 2f 	call	0x5ff4	; 0x5ff4 <_ZN5Print7printlnERK6String>
    28d2:	ce 01       	movw	r24, r28
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    28d4:	01 96       	adiw	r24, 0x01	; 1
    28d6:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
    28da:	0e 94 07 02 	call	0x40e	; 0x40e <_Z9printLinev>
  
  printLine();
    28de:	26 96       	adiw	r28, 0x06	; 6
}
    28e0:	0f b6       	in	r0, 0x3f	; 63
    28e2:	f8 94       	cli
    28e4:	de bf       	out	0x3e, r29	; 62
    28e6:	0f be       	out	0x3f, r0	; 63
    28e8:	cd bf       	out	0x3d, r28	; 61
    28ea:	df 91       	pop	r29
    28ec:	cf 91       	pop	r28
    28ee:	1f 91       	pop	r17
    28f0:	0f 91       	pop	r16
    28f2:	ff 90       	pop	r15
    28f4:	ef 90       	pop	r14
    28f6:	df 90       	pop	r13
    28f8:	cf 90       	pop	r12
    28fa:	08 95       	ret

000028fc <_ZN7PCA9534C1Ev>:
    28fc:	fc 01       	movw	r30, r24
	Wire.requestFrom(_i2caddr, 1);
	while (Wire.available()) {
		buff = Wire.read();
	}
	return (buff & (1 << pin)) ? HIGH : LOW;
}
    28fe:	10 82       	st	Z, r1
    2900:	11 82       	std	Z+1, r1	; 0x01
    2902:	12 82       	std	Z+2, r1	; 0x02
    2904:	08 95       	ret

00002906 <_ZN7PCA95345beginEh>:
    2906:	fc 01       	movw	r30, r24
    2908:	60 83       	st	Z, r22
    290a:	89 e7       	ldi	r24, 0x79	; 121
    290c:	9a e0       	ldi	r25, 0x0A	; 10
    290e:	0c 94 bd 2c 	jmp	0x597a	; 0x597a <_ZN7TwoWire5beginEv>

00002912 <_ZN7PCA953413setporteIoExpEhhh>:
    2912:	ff 92       	push	r15
    2914:	0f 93       	push	r16
    2916:	1f 93       	push	r17
    2918:	cf 93       	push	r28
    291a:	df 93       	push	r29
    291c:	ec 01       	movw	r28, r24
    291e:	f6 2e       	mov	r15, r22
    2920:	04 2f       	mov	r16, r20
    2922:	12 2f       	mov	r17, r18
    2924:	68 81       	ld	r22, Y
    2926:	89 e7       	ldi	r24, 0x79	; 121
    2928:	9a e0       	ldi	r25, 0x0A	; 10
    292a:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <_ZN7TwoWire17beginTransmissionEh>
    292e:	61 e0       	ldi	r22, 0x01	; 1
    2930:	89 e7       	ldi	r24, 0x79	; 121
    2932:	9a e0       	ldi	r25, 0x0A	; 10
    2934:	0e 94 7f 2c 	call	0x58fe	; 0x58fe <_ZN7TwoWire5writeEh>
    2938:	6f 2d       	mov	r22, r15
    293a:	89 e7       	ldi	r24, 0x79	; 121
    293c:	9a e0       	ldi	r25, 0x0A	; 10
    293e:	0e 94 7f 2c 	call	0x58fe	; 0x58fe <_ZN7TwoWire5writeEh>
    2942:	89 e7       	ldi	r24, 0x79	; 121
    2944:	9a e0       	ldi	r25, 0x0A	; 10
    2946:	0e 94 51 2d 	call	0x5aa2	; 0x5aa2 <_ZN7TwoWire15endTransmissionEv>
    294a:	68 81       	ld	r22, Y
    294c:	89 e7       	ldi	r24, 0x79	; 121
    294e:	9a e0       	ldi	r25, 0x0A	; 10
    2950:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <_ZN7TwoWire17beginTransmissionEh>
    2954:	62 e0       	ldi	r22, 0x02	; 2
    2956:	89 e7       	ldi	r24, 0x79	; 121
    2958:	9a e0       	ldi	r25, 0x0A	; 10
    295a:	0e 94 7f 2c 	call	0x58fe	; 0x58fe <_ZN7TwoWire5writeEh>
    295e:	60 2f       	mov	r22, r16
    2960:	89 e7       	ldi	r24, 0x79	; 121
    2962:	9a e0       	ldi	r25, 0x0A	; 10
    2964:	0e 94 7f 2c 	call	0x58fe	; 0x58fe <_ZN7TwoWire5writeEh>
    2968:	89 e7       	ldi	r24, 0x79	; 121
    296a:	9a e0       	ldi	r25, 0x0A	; 10
    296c:	0e 94 51 2d 	call	0x5aa2	; 0x5aa2 <_ZN7TwoWire15endTransmissionEv>
    2970:	8f e3       	ldi	r24, 0x3F	; 63
    2972:	9c e9       	ldi	r25, 0x9C	; 156
    2974:	01 97       	sbiw	r24, 0x01	; 1
    2976:	f1 f7       	brne	.-4      	; 0x2974 <_ZN7PCA953413setporteIoExpEhhh+0x62>
    2978:	00 c0       	rjmp	.+0      	; 0x297a <_ZN7PCA953413setporteIoExpEhhh+0x68>
    297a:	00 00       	nop
    297c:	68 81       	ld	r22, Y
    297e:	89 e7       	ldi	r24, 0x79	; 121
    2980:	9a e0       	ldi	r25, 0x0A	; 10
    2982:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <_ZN7TwoWire17beginTransmissionEh>
    2986:	63 e0       	ldi	r22, 0x03	; 3
    2988:	89 e7       	ldi	r24, 0x79	; 121
    298a:	9a e0       	ldi	r25, 0x0A	; 10
    298c:	0e 94 7f 2c 	call	0x58fe	; 0x58fe <_ZN7TwoWire5writeEh>
    2990:	61 2f       	mov	r22, r17
    2992:	89 e7       	ldi	r24, 0x79	; 121
    2994:	9a e0       	ldi	r25, 0x0A	; 10
    2996:	0e 94 7f 2c 	call	0x58fe	; 0x58fe <_ZN7TwoWire5writeEh>
    299a:	89 e7       	ldi	r24, 0x79	; 121
    299c:	9a e0       	ldi	r25, 0x0A	; 10
    299e:	0e 94 51 2d 	call	0x5aa2	; 0x5aa2 <_ZN7TwoWire15endTransmissionEv>
    29a2:	8f e3       	ldi	r24, 0x3F	; 63
    29a4:	9c e9       	ldi	r25, 0x9C	; 156
    29a6:	01 97       	sbiw	r24, 0x01	; 1
    29a8:	f1 f7       	brne	.-4      	; 0x29a6 <_ZN7PCA953413setporteIoExpEhhh+0x94>
    29aa:	00 c0       	rjmp	.+0      	; 0x29ac <_ZN7PCA953413setporteIoExpEhhh+0x9a>
    29ac:	00 00       	nop
    29ae:	df 91       	pop	r29
    29b0:	cf 91       	pop	r28
    29b2:	1f 91       	pop	r17
    29b4:	0f 91       	pop	r16
    29b6:	ff 90       	pop	r15
    29b8:	08 95       	ret

000029ba <_ZN7PCA953410setCONFREGEh>:
    29ba:	cf 93       	push	r28
    29bc:	c6 2f       	mov	r28, r22
    29be:	fc 01       	movw	r30, r24
    29c0:	60 81       	ld	r22, Z
    29c2:	89 e7       	ldi	r24, 0x79	; 121
    29c4:	9a e0       	ldi	r25, 0x0A	; 10
    29c6:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <_ZN7TwoWire17beginTransmissionEh>
    29ca:	63 e0       	ldi	r22, 0x03	; 3
    29cc:	89 e7       	ldi	r24, 0x79	; 121
    29ce:	9a e0       	ldi	r25, 0x0A	; 10
    29d0:	0e 94 7f 2c 	call	0x58fe	; 0x58fe <_ZN7TwoWire5writeEh>
    29d4:	6c 2f       	mov	r22, r28
    29d6:	89 e7       	ldi	r24, 0x79	; 121
    29d8:	9a e0       	ldi	r25, 0x0A	; 10
    29da:	0e 94 7f 2c 	call	0x58fe	; 0x58fe <_ZN7TwoWire5writeEh>
    29de:	89 e7       	ldi	r24, 0x79	; 121
    29e0:	9a e0       	ldi	r25, 0x0A	; 10
    29e2:	cf 91       	pop	r28
    29e4:	0c 94 51 2d 	jmp	0x5aa2	; 0x5aa2 <_ZN7TwoWire15endTransmissionEv>

000029e8 <_ZN7PCA953416Read_IP_REGISTEREv>:

uint8_t PCA9534::Read_IP_REGISTER() {
    29e8:	cf 93       	push	r28
    29ea:	df 93       	push	r29
    29ec:	ec 01       	movw	r28, r24
	uint8_t buff = 0;

	//_i2caddr = i2caddr;

	Wire.beginTransmission(_i2caddr);
    29ee:	68 81       	ld	r22, Y
    29f0:	89 e7       	ldi	r24, 0x79	; 121
    29f2:	9a e0       	ldi	r25, 0x0A	; 10
    29f4:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(PCA9534_IP_REGISTER);
    29f8:	60 e0       	ldi	r22, 0x00	; 0
    29fa:	89 e7       	ldi	r24, 0x79	; 121
    29fc:	9a e0       	ldi	r25, 0x0A	; 10
    29fe:	0e 94 7f 2c 	call	0x58fe	; 0x58fe <_ZN7TwoWire5writeEh>
	// Wire.write(_port);
	Wire.endTransmission();
    2a02:	89 e7       	ldi	r24, 0x79	; 121
    2a04:	9a e0       	ldi	r25, 0x0A	; 10
    2a06:	0e 94 51 2d 	call	0x5aa2	; 0x5aa2 <_ZN7TwoWire15endTransmissionEv>

	// We only need to read 1 byte of data to get the pins
	Wire.requestFrom(_i2caddr, 1);
    2a0a:	68 81       	ld	r22, Y
    2a0c:	70 e0       	ldi	r23, 0x00	; 0
    2a0e:	41 e0       	ldi	r20, 0x01	; 1
    2a10:	50 e0       	ldi	r21, 0x00	; 0
    2a12:	89 e7       	ldi	r24, 0x79	; 121
    2a14:	9a e0       	ldi	r25, 0x0A	; 10
    2a16:	0e 94 4f 2d 	call	0x5a9e	; 0x5a9e <_ZN7TwoWire11requestFromEii>
	}
	return (buff & (1 << pin)) ? HIGH : LOW;
}

uint8_t PCA9534::Read_IP_REGISTER() {
	uint8_t buff = 0;
    2a1a:	c0 e0       	ldi	r28, 0x00	; 0
	// Wire.write(_port);
	Wire.endTransmission();

	// We only need to read 1 byte of data to get the pins
	Wire.requestFrom(_i2caddr, 1);
	while (Wire.available()) {
    2a1c:	89 e7       	ldi	r24, 0x79	; 121
    2a1e:	9a e0       	ldi	r25, 0x0A	; 10
    2a20:	0e 94 f1 2b 	call	0x57e2	; 0x57e2 <_ZN7TwoWire9availableEv>
    2a24:	89 2b       	or	r24, r25
    2a26:	31 f0       	breq	.+12     	; 0x2a34 <_ZN7PCA953416Read_IP_REGISTEREv+0x4c>
		buff = Wire.read();
    2a28:	89 e7       	ldi	r24, 0x79	; 121
    2a2a:	9a e0       	ldi	r25, 0x0A	; 10
    2a2c:	0e 94 f9 2b 	call	0x57f2	; 0x57f2 <_ZN7TwoWire4readEv>
    2a30:	c8 2f       	mov	r28, r24
	// Wire.write(_port);
	Wire.endTransmission();

	// We only need to read 1 byte of data to get the pins
	Wire.requestFrom(_i2caddr, 1);
	while (Wire.available()) {
    2a32:	f4 cf       	rjmp	.-24     	; 0x2a1c <_ZN7PCA953416Read_IP_REGISTEREv+0x34>
		buff = Wire.read();
	}
	return buff;
    2a34:	8c 2f       	mov	r24, r28
    2a36:	df 91       	pop	r29
    2a38:	cf 91       	pop	r28
    2a3a:	08 95       	ret

00002a3c <_ZN9NFC_PN532C1Ehh>:
    #endif
    return false;
  }

  return true;
}
    2a3c:	cf 93       	push	r28
    2a3e:	df 93       	push	r29
    2a40:	ec 01       	movw	r28, r24
    2a42:	86 2f       	mov	r24, r22
    2a44:	6c 83       	std	Y+4, r22	; 0x04
    2a46:	4d 83       	std	Y+5, r20	; 0x05
    2a48:	1d 8a       	std	Y+21, r1	; 0x15
    2a4a:	1e 8a       	std	Y+22, r1	; 0x16
    2a4c:	60 e0       	ldi	r22, 0x00	; 0
    2a4e:	0e 94 a6 31 	call	0x634c	; 0x634c <pinMode>
    2a52:	61 e0       	ldi	r22, 0x01	; 1
    2a54:	8d 81       	ldd	r24, Y+5	; 0x05
    2a56:	df 91       	pop	r29
    2a58:	cf 91       	pop	r28
    2a5a:	0c 94 a6 31 	jmp	0x634c	; 0x634c <pinMode>

00002a5e <_ZN9NFC_PN5325beginEv>:
    2a5e:	cf 93       	push	r28
    2a60:	df 93       	push	r29
    2a62:	ec 01       	movw	r28, r24
    2a64:	89 e7       	ldi	r24, 0x79	; 121
    2a66:	9a e0       	ldi	r25, 0x0A	; 10
    2a68:	0e 94 bd 2c 	call	0x597a	; 0x597a <_ZN7TwoWire5beginEv>
    2a6c:	61 e0       	ldi	r22, 0x01	; 1
    2a6e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a70:	0e 94 e2 31 	call	0x63c4	; 0x63c4 <digitalWrite>
    2a74:	60 e0       	ldi	r22, 0x00	; 0
    2a76:	8d 81       	ldd	r24, Y+5	; 0x05
    2a78:	0e 94 e2 31 	call	0x63c4	; 0x63c4 <digitalWrite>
    2a7c:	2f ef       	ldi	r18, 0xFF	; 255
    2a7e:	87 e8       	ldi	r24, 0x87	; 135
    2a80:	93 e1       	ldi	r25, 0x13	; 19
    2a82:	21 50       	subi	r18, 0x01	; 1
    2a84:	80 40       	sbci	r24, 0x00	; 0
    2a86:	90 40       	sbci	r25, 0x00	; 0
    2a88:	e1 f7       	brne	.-8      	; 0x2a82 <_ZN9NFC_PN5325beginEv+0x24>
    2a8a:	00 c0       	rjmp	.+0      	; 0x2a8c <_ZN9NFC_PN5325beginEv+0x2e>
    2a8c:	00 00       	nop
    2a8e:	61 e0       	ldi	r22, 0x01	; 1
    2a90:	8d 81       	ldd	r24, Y+5	; 0x05
    2a92:	0e 94 e2 31 	call	0x63c4	; 0x63c4 <digitalWrite>
    2a96:	8f e3       	ldi	r24, 0x3F	; 63
    2a98:	9c e9       	ldi	r25, 0x9C	; 156
    2a9a:	01 97       	sbiw	r24, 0x01	; 1
    2a9c:	f1 f7       	brne	.-4      	; 0x2a9a <_ZN9NFC_PN5325beginEv+0x3c>
    2a9e:	00 c0       	rjmp	.+0      	; 0x2aa0 <_ZN9NFC_PN5325beginEv+0x42>
    2aa0:	00 00       	nop
    2aa2:	df 91       	pop	r29
    2aa4:	cf 91       	pop	r28
    2aa6:	08 95       	ret

00002aa8 <_ZN9NFC_PN53210GetHexCodeEPKhm>:
    2aa8:	4f 92       	push	r4
    2aaa:	5f 92       	push	r5
    2aac:	6f 92       	push	r6
    2aae:	7f 92       	push	r7
    2ab0:	8f 92       	push	r8
    2ab2:	9f 92       	push	r9
    2ab4:	af 92       	push	r10
    2ab6:	bf 92       	push	r11
    2ab8:	ef 92       	push	r14
    2aba:	ff 92       	push	r15
    2abc:	0f 93       	push	r16
    2abe:	1f 93       	push	r17
    2ac0:	cf 93       	push	r28
    2ac2:	df 93       	push	r29
    2ac4:	cd b7       	in	r28, 0x3d	; 61
    2ac6:	de b7       	in	r29, 0x3e	; 62
    2ac8:	2c 97       	sbiw	r28, 0x0c	; 12
    2aca:	0f b6       	in	r0, 0x3f	; 63
    2acc:	f8 94       	cli
    2ace:	de bf       	out	0x3e, r29	; 62
    2ad0:	0f be       	out	0x3f, r0	; 63
    2ad2:	cd bf       	out	0x3d, r28	; 61
    2ad4:	7c 01       	movw	r14, r24
    2ad6:	5a 01       	movw	r10, r20
    2ad8:	28 01       	movw	r4, r16
    2ada:	39 01       	movw	r6, r18
    2adc:	60 e7       	ldi	r22, 0x70	; 112
    2ade:	71 e0       	ldi	r23, 0x01	; 1
    2ae0:	0e 94 a0 32 	call	0x6540	; 0x6540 <_ZN6StringC1EPKc>
    2ae4:	85 01       	movw	r16, r10
    2ae6:	81 2c       	mov	r8, r1
    2ae8:	91 2c       	mov	r9, r1
    2aea:	54 01       	movw	r10, r8
    2aec:	84 14       	cp	r8, r4
    2aee:	95 04       	cpc	r9, r5
    2af0:	a6 04       	cpc	r10, r6
    2af2:	b7 04       	cpc	r11, r7
    2af4:	09 f4       	brne	.+2      	; 0x2af8 <_ZN9NFC_PN53210GetHexCodeEPKhm+0x50>
    2af6:	46 c0       	rjmp	.+140    	; 0x2b84 <_ZN9NFC_PN53210GetHexCodeEPKhm+0xdc>
    2af8:	f8 01       	movw	r30, r16
    2afa:	61 91       	ld	r22, Z+
    2afc:	8f 01       	movw	r16, r30
    2afe:	40 e1       	ldi	r20, 0x10	; 16
    2b00:	ce 01       	movw	r24, r28
    2b02:	60 31       	cpi	r22, 0x10	; 16
    2b04:	f0 f4       	brcc	.+60     	; 0x2b42 <_ZN9NFC_PN53210GetHexCodeEPKhm+0x9a>
    2b06:	01 96       	adiw	r24, 0x01	; 1
    2b08:	0e 94 4b 33 	call	0x6696	; 0x6696 <_ZN6StringC1Ehh>
    2b0c:	b7 01       	movw	r22, r14
    2b0e:	ce 01       	movw	r24, r28
    2b10:	07 96       	adiw	r24, 0x07	; 7
    2b12:	0e 94 0c 33 	call	0x6618	; 0x6618 <_ZN6StringC1ERKS_>
    2b16:	67 ef       	ldi	r22, 0xF7	; 247
    2b18:	74 e0       	ldi	r23, 0x04	; 4
    2b1a:	ce 01       	movw	r24, r28
    2b1c:	07 96       	adiw	r24, 0x07	; 7
    2b1e:	0e 94 86 34 	call	0x690c	; 0x690c <_ZplRK15StringSumHelperPKc>
    2b22:	be 01       	movw	r22, r28
    2b24:	6f 5f       	subi	r22, 0xFF	; 255
    2b26:	7f 4f       	sbci	r23, 0xFF	; 255
    2b28:	0e 94 75 34 	call	0x68ea	; 0x68ea <_ZplRK15StringSumHelperRK6String>
    2b2c:	bc 01       	movw	r22, r24
    2b2e:	c7 01       	movw	r24, r14
    2b30:	0e 94 f7 32 	call	0x65ee	; 0x65ee <_ZN6StringaSERKS_>
    2b34:	ce 01       	movw	r24, r28
    2b36:	07 96       	adiw	r24, 0x07	; 7
    2b38:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
    2b3c:	ce 01       	movw	r24, r28
    2b3e:	01 96       	adiw	r24, 0x01	; 1
    2b40:	19 c0       	rjmp	.+50     	; 0x2b74 <_ZN9NFC_PN53210GetHexCodeEPKhm+0xcc>
    2b42:	07 96       	adiw	r24, 0x07	; 7
    2b44:	0e 94 4b 33 	call	0x6696	; 0x6696 <_ZN6StringC1Ehh>
    2b48:	b7 01       	movw	r22, r14
    2b4a:	ce 01       	movw	r24, r28
    2b4c:	01 96       	adiw	r24, 0x01	; 1
    2b4e:	0e 94 0c 33 	call	0x6618	; 0x6618 <_ZN6StringC1ERKS_>
    2b52:	be 01       	movw	r22, r28
    2b54:	69 5f       	subi	r22, 0xF9	; 249
    2b56:	7f 4f       	sbci	r23, 0xFF	; 255
    2b58:	ce 01       	movw	r24, r28
    2b5a:	01 96       	adiw	r24, 0x01	; 1
    2b5c:	0e 94 75 34 	call	0x68ea	; 0x68ea <_ZplRK15StringSumHelperRK6String>
    2b60:	bc 01       	movw	r22, r24
    2b62:	c7 01       	movw	r24, r14
    2b64:	0e 94 f7 32 	call	0x65ee	; 0x65ee <_ZN6StringaSERKS_>
    2b68:	ce 01       	movw	r24, r28
    2b6a:	01 96       	adiw	r24, 0x01	; 1
    2b6c:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
    2b70:	ce 01       	movw	r24, r28
    2b72:	07 96       	adiw	r24, 0x07	; 7
    2b74:	0e 94 39 32 	call	0x6472	; 0x6472 <_ZN6StringD1Ev>
    2b78:	ff ef       	ldi	r31, 0xFF	; 255
    2b7a:	8f 1a       	sub	r8, r31
    2b7c:	9f 0a       	sbc	r9, r31
    2b7e:	af 0a       	sbc	r10, r31
    2b80:	bf 0a       	sbc	r11, r31
    2b82:	b4 cf       	rjmp	.-152    	; 0x2aec <_ZN9NFC_PN53210GetHexCodeEPKhm+0x44>
    2b84:	8f ec       	ldi	r24, 0xCF	; 207
    2b86:	9a e0       	ldi	r25, 0x0A	; 10
    2b88:	0e 94 e7 2f 	call	0x5fce	; 0x5fce <_ZN5Print7printlnEv>
    2b8c:	c7 01       	movw	r24, r14
    2b8e:	2c 96       	adiw	r28, 0x0c	; 12
    2b90:	0f b6       	in	r0, 0x3f	; 63
    2b92:	f8 94       	cli
    2b94:	de bf       	out	0x3e, r29	; 62
    2b96:	0f be       	out	0x3f, r0	; 63
    2b98:	cd bf       	out	0x3d, r28	; 61
    2b9a:	df 91       	pop	r29
    2b9c:	cf 91       	pop	r28
    2b9e:	1f 91       	pop	r17
    2ba0:	0f 91       	pop	r16
    2ba2:	ff 90       	pop	r15
    2ba4:	ef 90       	pop	r14
    2ba6:	bf 90       	pop	r11
    2ba8:	af 90       	pop	r10
    2baa:	9f 90       	pop	r9
    2bac:	8f 90       	pop	r8
    2bae:	7f 90       	pop	r7
    2bb0:	6f 90       	pop	r6
    2bb2:	5f 90       	pop	r5
    2bb4:	4f 90       	pop	r4
    2bb6:	08 95       	ret

00002bb8 <_ZN9NFC_PN5327isreadyEv>:
    2bb8:	fc 01       	movw	r30, r24
    2bba:	84 81       	ldd	r24, Z+4	; 0x04
    2bbc:	0e 94 10 32 	call	0x6420	; 0x6420 <digitalRead>
    2bc0:	91 e0       	ldi	r25, 0x01	; 1
    2bc2:	81 11       	cpse	r24, r1
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	89 2f       	mov	r24, r25
    2bc8:	08 95       	ret

00002bca <_ZN9NFC_PN5329waitreadyEj>:
    2bca:	cf 92       	push	r12
    2bcc:	df 92       	push	r13
    2bce:	ef 92       	push	r14
    2bd0:	ff 92       	push	r15
    2bd2:	1f 93       	push	r17
    2bd4:	cf 93       	push	r28
    2bd6:	df 93       	push	r29
    2bd8:	6c 01       	movw	r12, r24
    2bda:	7b 01       	movw	r14, r22
    2bdc:	c0 e0       	ldi	r28, 0x00	; 0
    2bde:	d0 e0       	ldi	r29, 0x00	; 0
    2be0:	c6 01       	movw	r24, r12
    2be2:	ea df       	rcall	.-44     	; 0x2bb8 <_ZN9NFC_PN5327isreadyEv>
    2be4:	18 2f       	mov	r17, r24
    2be6:	81 11       	cpse	r24, r1
    2be8:	15 c0       	rjmp	.+42     	; 0x2c14 <_ZN9NFC_PN5329waitreadyEj+0x4a>
    2bea:	e1 14       	cp	r14, r1
    2bec:	f1 04       	cpc	r15, r1
    2bee:	59 f0       	breq	.+22     	; 0x2c06 <_ZN9NFC_PN5329waitreadyEj+0x3c>
    2bf0:	2a 96       	adiw	r28, 0x0a	; 10
    2bf2:	ec 16       	cp	r14, r28
    2bf4:	fd 06       	cpc	r15, r29
    2bf6:	38 f4       	brcc	.+14     	; 0x2c06 <_ZN9NFC_PN5329waitreadyEj+0x3c>
    2bf8:	64 eb       	ldi	r22, 0xB4	; 180
    2bfa:	77 e0       	ldi	r23, 0x07	; 7
    2bfc:	8f ec       	ldi	r24, 0xCF	; 207
    2bfe:	9a e0       	ldi	r25, 0x0A	; 10
    2c00:	0e 94 0a 30 	call	0x6014	; 0x6014 <_ZN5Print7printlnEPKc>
    2c04:	07 c0       	rjmp	.+14     	; 0x2c14 <_ZN9NFC_PN5329waitreadyEj+0x4a>
    2c06:	8f e3       	ldi	r24, 0x3F	; 63
    2c08:	9c e9       	ldi	r25, 0x9C	; 156
    2c0a:	01 97       	sbiw	r24, 0x01	; 1
    2c0c:	f1 f7       	brne	.-4      	; 0x2c0a <_ZN9NFC_PN5329waitreadyEj+0x40>
    2c0e:	00 c0       	rjmp	.+0      	; 0x2c10 <_ZN9NFC_PN5329waitreadyEj+0x46>
    2c10:	00 00       	nop
    2c12:	e6 cf       	rjmp	.-52     	; 0x2be0 <_ZN9NFC_PN5329waitreadyEj+0x16>
    2c14:	81 2f       	mov	r24, r17
    2c16:	df 91       	pop	r29
    2c18:	cf 91       	pop	r28
    2c1a:	1f 91       	pop	r17
    2c1c:	ff 90       	pop	r15
    2c1e:	ef 90       	pop	r14
    2c20:	df 90       	pop	r13
    2c22:	cf 90       	pop	r12
    2c24:	08 95       	ret

00002c26 <_ZN9NFC_PN5328readdataEPhh>:
    2c26:	ff 92       	push	r15
    2c28:	0f 93       	push	r16
    2c2a:	1f 93       	push	r17
    2c2c:	cf 93       	push	r28
    2c2e:	df 93       	push	r29
    2c30:	f6 2e       	mov	r15, r22
    2c32:	07 2f       	mov	r16, r23
    2c34:	14 2f       	mov	r17, r20
    2c36:	8f e3       	ldi	r24, 0x3F	; 63
    2c38:	9f e1       	ldi	r25, 0x1F	; 31
    2c3a:	01 97       	sbiw	r24, 0x01	; 1
    2c3c:	f1 f7       	brne	.-4      	; 0x2c3a <_ZN9NFC_PN5328readdataEPhh+0x14>
    2c3e:	00 c0       	rjmp	.+0      	; 0x2c40 <_ZN9NFC_PN5328readdataEPhh+0x1a>
    2c40:	00 00       	nop
    2c42:	42 e0       	ldi	r20, 0x02	; 2
    2c44:	41 0f       	add	r20, r17
    2c46:	64 e2       	ldi	r22, 0x24	; 36
    2c48:	89 e7       	ldi	r24, 0x79	; 121
    2c4a:	9a e0       	ldi	r25, 0x0A	; 10
    2c4c:	0e 94 4d 2d 	call	0x5a9a	; 0x5a9a <_ZN7TwoWire11requestFromEhh>
    2c50:	89 e7       	ldi	r24, 0x79	; 121
    2c52:	9a e0       	ldi	r25, 0x0A	; 10
    2c54:	0e 94 f9 2b 	call	0x57f2	; 0x57f2 <_ZN7TwoWire4readEv>
    2c58:	cf 2d       	mov	r28, r15
    2c5a:	d0 2f       	mov	r29, r16
    2c5c:	ce 01       	movw	r24, r28
    2c5e:	81 0f       	add	r24, r17
    2c60:	91 1d       	adc	r25, r1
    2c62:	8c 01       	movw	r16, r24
    2c64:	c0 17       	cp	r28, r16
    2c66:	d1 07       	cpc	r29, r17
    2c68:	61 f0       	breq	.+24     	; 0x2c82 <_ZN9NFC_PN5328readdataEPhh+0x5c>
    2c6a:	8f e9       	ldi	r24, 0x9F	; 159
    2c6c:	9f e0       	ldi	r25, 0x0F	; 15
    2c6e:	01 97       	sbiw	r24, 0x01	; 1
    2c70:	f1 f7       	brne	.-4      	; 0x2c6e <_ZN9NFC_PN5328readdataEPhh+0x48>
    2c72:	00 c0       	rjmp	.+0      	; 0x2c74 <_ZN9NFC_PN5328readdataEPhh+0x4e>
    2c74:	00 00       	nop
    2c76:	89 e7       	ldi	r24, 0x79	; 121
    2c78:	9a e0       	ldi	r25, 0x0A	; 10
    2c7a:	0e 94 f9 2b 	call	0x57f2	; 0x57f2 <_ZN7TwoWire4readEv>
    2c7e:	89 93       	st	Y+, r24
    2c80:	f1 cf       	rjmp	.-30     	; 0x2c64 <_ZN9NFC_PN5328readdataEPhh+0x3e>
    2c82:	df 91       	pop	r29
    2c84:	cf 91       	pop	r28
    2c86:	1f 91       	pop	r17
    2c88:	0f 91       	pop	r16
    2c8a:	ff 90       	pop	r15
    2c8c:	08 95       	ret

00002c8e <_ZN9NFC_PN5327readackEv>:
    2c8e:	cf 93       	push	r28
    2c90:	df 93       	push	r29
    2c92:	00 d0       	rcall	.+0      	; 0x2c94 <_ZN9NFC_PN5327readackEv+0x6>
    2c94:	00 d0       	rcall	.+0      	; 0x2c96 <_ZN9NFC_PN5327readackEv+0x8>
    2c96:	00 d0       	rcall	.+0      	; 0x2c98 <_ZN9NFC_PN5327readackEv+0xa>
    2c98:	cd b7       	in	r28, 0x3d	; 61
    2c9a:	de b7       	in	r29, 0x3e	; 62
    2c9c:	46 e0       	ldi	r20, 0x06	; 6
    2c9e:	be 01       	movw	r22, r28
    2ca0:	6f 5f       	subi	r22, 0xFF	; 255
    2ca2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ca4:	c0 df       	rcall	.-128    	; 0x2c26 <_ZN9NFC_PN5328readdataEPhh>
    2ca6:	46 e0       	ldi	r20, 0x06	; 6
    2ca8:	50 e0       	ldi	r21, 0x00	; 0
    2caa:	67 e5       	ldi	r22, 0x57	; 87
    2cac:	71 e0       	ldi	r23, 0x01	; 1
    2cae:	ce 01       	movw	r24, r28
    2cb0:	01 96       	adiw	r24, 0x01	; 1
    2cb2:	0e 94 ef 38 	call	0x71de	; 0x71de <strncmp>
    2cb6:	21 e0       	ldi	r18, 0x01	; 1
    2cb8:	89 2b       	or	r24, r25
    2cba:	09 f0       	breq	.+2      	; 0x2cbe <_ZN9NFC_PN5327readackEv+0x30>
    2cbc:	20 e0       	ldi	r18, 0x00	; 0
    2cbe:	82 2f       	mov	r24, r18
    2cc0:	26 96       	adiw	r28, 0x06	; 6
    2cc2:	0f b6       	in	r0, 0x3f	; 63
    2cc4:	f8 94       	cli
    2cc6:	de bf       	out	0x3e, r29	; 62
    2cc8:	0f be       	out	0x3f, r0	; 63
    2cca:	cd bf       	out	0x3d, r28	; 61
    2ccc:	df 91       	pop	r29
    2cce:	cf 91       	pop	r28
    2cd0:	08 95       	ret

00002cd2 <_ZL8i2c_sendh>:
    2cd2:	68 2f       	mov	r22, r24
    2cd4:	89 e7       	ldi	r24, 0x79	; 121
    2cd6:	9a e0       	ldi	r25, 0x0A	; 10
    2cd8:	0c 94 7f 2c 	jmp	0x58fe	; 0x58fe <_ZN7TwoWire5writeEh>

00002cdc <_ZN9NFC_PN53212writecommandEPhh>:
    2cdc:	cf 92       	push	r12
    2cde:	df 92       	push	r13
    2ce0:	ef 92       	push	r14
    2ce2:	ff 92       	push	r15
    2ce4:	0f 93       	push	r16
    2ce6:	1f 93       	push	r17
    2ce8:	cf 93       	push	r28
    2cea:	df 93       	push	r29
    2cec:	7b 01       	movw	r14, r22
    2cee:	c1 e0       	ldi	r28, 0x01	; 1
    2cf0:	c4 0f       	add	r28, r20
    2cf2:	8f e3       	ldi	r24, 0x3F	; 63
    2cf4:	9f e1       	ldi	r25, 0x1F	; 31
    2cf6:	01 97       	sbiw	r24, 0x01	; 1
    2cf8:	f1 f7       	brne	.-4      	; 0x2cf6 <_ZN9NFC_PN53212writecommandEPhh+0x1a>
    2cfa:	00 c0       	rjmp	.+0      	; 0x2cfc <_ZN9NFC_PN53212writecommandEPhh+0x20>
    2cfc:	00 00       	nop
    2cfe:	64 e2       	ldi	r22, 0x24	; 36
    2d00:	70 e0       	ldi	r23, 0x00	; 0
    2d02:	89 e7       	ldi	r24, 0x79	; 121
    2d04:	9a e0       	ldi	r25, 0x0A	; 10
    2d06:	0e 94 da 2c 	call	0x59b4	; 0x59b4 <_ZN7TwoWire17beginTransmissionEi>
    2d0a:	80 e0       	ldi	r24, 0x00	; 0
    2d0c:	e2 df       	rcall	.-60     	; 0x2cd2 <_ZL8i2c_sendh>
    2d0e:	80 e0       	ldi	r24, 0x00	; 0
    2d10:	e0 df       	rcall	.-64     	; 0x2cd2 <_ZL8i2c_sendh>
    2d12:	8f ef       	ldi	r24, 0xFF	; 255
    2d14:	de df       	rcall	.-68     	; 0x2cd2 <_ZL8i2c_sendh>
    2d16:	8c 2f       	mov	r24, r28
    2d18:	dc df       	rcall	.-72     	; 0x2cd2 <_ZL8i2c_sendh>
    2d1a:	8c 2f       	mov	r24, r28
    2d1c:	81 95       	neg	r24
    2d1e:	d9 df       	rcall	.-78     	; 0x2cd2 <_ZL8i2c_sendh>
    2d20:	84 ed       	ldi	r24, 0xD4	; 212
    2d22:	d7 df       	rcall	.-82     	; 0x2cd2 <_ZL8i2c_sendh>
    2d24:	c1 2c       	mov	r12, r1
    2d26:	83 ed       	ldi	r24, 0xD3	; 211
    2d28:	d8 2e       	mov	r13, r24
    2d2a:	d0 e0       	ldi	r29, 0x00	; 0
    2d2c:	21 97       	sbiw	r28, 0x01	; 1
    2d2e:	0c 2d       	mov	r16, r12
    2d30:	10 e0       	ldi	r17, 0x00	; 0
    2d32:	0c 17       	cp	r16, r28
    2d34:	1d 07       	cpc	r17, r29
    2d36:	54 f4       	brge	.+20     	; 0x2d4c <_ZN9NFC_PN53212writecommandEPhh+0x70>
    2d38:	0e 0d       	add	r16, r14
    2d3a:	1f 1d       	adc	r17, r15
    2d3c:	f8 01       	movw	r30, r16
    2d3e:	80 81       	ld	r24, Z
    2d40:	c8 df       	rcall	.-112    	; 0x2cd2 <_ZL8i2c_sendh>
    2d42:	f8 01       	movw	r30, r16
    2d44:	80 81       	ld	r24, Z
    2d46:	d8 0e       	add	r13, r24
    2d48:	c3 94       	inc	r12
    2d4a:	f1 cf       	rjmp	.-30     	; 0x2d2e <_ZN9NFC_PN53212writecommandEPhh+0x52>
    2d4c:	8d 2d       	mov	r24, r13
    2d4e:	80 95       	com	r24
    2d50:	c0 df       	rcall	.-128    	; 0x2cd2 <_ZL8i2c_sendh>
    2d52:	80 e0       	ldi	r24, 0x00	; 0
    2d54:	be df       	rcall	.-132    	; 0x2cd2 <_ZL8i2c_sendh>
    2d56:	89 e7       	ldi	r24, 0x79	; 121
    2d58:	9a e0       	ldi	r25, 0x0A	; 10
    2d5a:	df 91       	pop	r29
    2d5c:	cf 91       	pop	r28
    2d5e:	1f 91       	pop	r17
    2d60:	0f 91       	pop	r16
    2d62:	ff 90       	pop	r15
    2d64:	ef 90       	pop	r14
    2d66:	df 90       	pop	r13
    2d68:	cf 90       	pop	r12
    2d6a:	0c 94 51 2d 	jmp	0x5aa2	; 0x5aa2 <_ZN7TwoWire15endTransmissionEv>

00002d6e <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>:
    2d6e:	0f 93       	push	r16
    2d70:	1f 93       	push	r17
    2d72:	cf 93       	push	r28
    2d74:	df 93       	push	r29
    2d76:	ec 01       	movw	r28, r24
    2d78:	89 01       	movw	r16, r18
    2d7a:	b0 df       	rcall	.-160    	; 0x2cdc <_ZN9NFC_PN53212writecommandEPhh>
    2d7c:	b8 01       	movw	r22, r16
    2d7e:	ce 01       	movw	r24, r28
    2d80:	24 df       	rcall	.-440    	; 0x2bca <_ZN9NFC_PN5329waitreadyEj>
    2d82:	88 23       	and	r24, r24
    2d84:	31 f0       	breq	.+12     	; 0x2d92 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj+0x24>
    2d86:	ce 01       	movw	r24, r28
    2d88:	df 91       	pop	r29
    2d8a:	cf 91       	pop	r28
    2d8c:	1f 91       	pop	r17
    2d8e:	0f 91       	pop	r16
    2d90:	7e cf       	rjmp	.-260    	; 0x2c8e <_ZN9NFC_PN5327readackEv>
    2d92:	80 e0       	ldi	r24, 0x00	; 0
    2d94:	df 91       	pop	r29
    2d96:	cf 91       	pop	r28
    2d98:	1f 91       	pop	r17
    2d9a:	0f 91       	pop	r16
    2d9c:	08 95       	ret

00002d9e <_ZN9NFC_PN53218getFirmwareVersionEv>:
    2d9e:	cf 93       	push	r28
    2da0:	df 93       	push	r29
    2da2:	ec 01       	movw	r28, r24
    2da4:	82 e0       	ldi	r24, 0x02	; 2
    2da6:	80 93 80 09 	sts	0x0980, r24	; 0x800980 <pn532_packetbuffer>
    2daa:	28 ee       	ldi	r18, 0xE8	; 232
    2dac:	33 e0       	ldi	r19, 0x03	; 3
    2dae:	41 e0       	ldi	r20, 0x01	; 1
    2db0:	60 e8       	ldi	r22, 0x80	; 128
    2db2:	79 e0       	ldi	r23, 0x09	; 9
    2db4:	ce 01       	movw	r24, r28
    2db6:	db df       	rcall	.-74     	; 0x2d6e <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    2db8:	81 11       	cpse	r24, r1
    2dba:	04 c0       	rjmp	.+8      	; 0x2dc4 <_ZN9NFC_PN53218getFirmwareVersionEv+0x26>
    2dbc:	60 e0       	ldi	r22, 0x00	; 0
    2dbe:	70 e0       	ldi	r23, 0x00	; 0
    2dc0:	cb 01       	movw	r24, r22
    2dc2:	32 c0       	rjmp	.+100    	; 0x2e28 <_ZN9NFC_PN53218getFirmwareVersionEv+0x8a>
    2dc4:	4c e0       	ldi	r20, 0x0C	; 12
    2dc6:	60 e8       	ldi	r22, 0x80	; 128
    2dc8:	79 e0       	ldi	r23, 0x09	; 9
    2dca:	ce 01       	movw	r24, r28
    2dcc:	2c df       	rcall	.-424    	; 0x2c26 <_ZN9NFC_PN5328readdataEPhh>
    2dce:	46 e0       	ldi	r20, 0x06	; 6
    2dd0:	50 e0       	ldi	r21, 0x00	; 0
    2dd2:	61 e5       	ldi	r22, 0x51	; 81
    2dd4:	71 e0       	ldi	r23, 0x01	; 1
    2dd6:	80 e8       	ldi	r24, 0x80	; 128
    2dd8:	99 e0       	ldi	r25, 0x09	; 9
    2dda:	0e 94 ef 38 	call	0x71de	; 0x71de <strncmp>
    2dde:	89 2b       	or	r24, r25
    2de0:	69 f7       	brne	.-38     	; 0x2dbc <_ZN9NFC_PN53218getFirmwareVersionEv+0x1e>
    2de2:	8d 89       	ldd	r24, Y+21	; 0x15
    2de4:	81 11       	cpse	r24, r1
    2de6:	03 c0       	rjmp	.+6      	; 0x2dee <_ZN9NFC_PN53218getFirmwareVersionEv+0x50>
    2de8:	e7 e0       	ldi	r30, 0x07	; 7
    2dea:	f0 e0       	ldi	r31, 0x00	; 0
    2dec:	02 c0       	rjmp	.+4      	; 0x2df2 <_ZN9NFC_PN53218getFirmwareVersionEv+0x54>
    2dee:	e6 e0       	ldi	r30, 0x06	; 6
    2df0:	f0 e0       	ldi	r31, 0x00	; 0
    2df2:	e0 58       	subi	r30, 0x80	; 128
    2df4:	f6 4f       	sbci	r31, 0xF6	; 246
    2df6:	60 81       	ld	r22, Z
    2df8:	86 2f       	mov	r24, r22
    2dfa:	90 e0       	ldi	r25, 0x00	; 0
    2dfc:	a0 e0       	ldi	r26, 0x00	; 0
    2dfe:	b0 e0       	ldi	r27, 0x00	; 0
    2e00:	ba 2f       	mov	r27, r26
    2e02:	a9 2f       	mov	r26, r25
    2e04:	98 2f       	mov	r25, r24
    2e06:	88 27       	eor	r24, r24
    2e08:	21 81       	ldd	r18, Z+1	; 0x01
    2e0a:	82 2b       	or	r24, r18
    2e0c:	ba 2f       	mov	r27, r26
    2e0e:	a9 2f       	mov	r26, r25
    2e10:	98 2f       	mov	r25, r24
    2e12:	88 27       	eor	r24, r24
    2e14:	22 81       	ldd	r18, Z+2	; 0x02
    2e16:	82 2b       	or	r24, r18
    2e18:	ba 2f       	mov	r27, r26
    2e1a:	a9 2f       	mov	r26, r25
    2e1c:	98 2f       	mov	r25, r24
    2e1e:	88 27       	eor	r24, r24
    2e20:	23 81       	ldd	r18, Z+3	; 0x03
    2e22:	bc 01       	movw	r22, r24
    2e24:	cd 01       	movw	r24, r26
    2e26:	62 2b       	or	r22, r18
    2e28:	df 91       	pop	r29
    2e2a:	cf 91       	pop	r28
    2e2c:	08 95       	ret

00002e2e <_ZN9NFC_PN5329SAMConfigEv>:
    2e2e:	cf 93       	push	r28
    2e30:	df 93       	push	r29
    2e32:	ec 01       	movw	r28, r24
    2e34:	94 e1       	ldi	r25, 0x14	; 20
    2e36:	90 93 80 09 	sts	0x0980, r25	; 0x800980 <pn532_packetbuffer>
    2e3a:	81 e0       	ldi	r24, 0x01	; 1
    2e3c:	80 93 81 09 	sts	0x0981, r24	; 0x800981 <pn532_packetbuffer+0x1>
    2e40:	90 93 82 09 	sts	0x0982, r25	; 0x800982 <pn532_packetbuffer+0x2>
    2e44:	80 93 83 09 	sts	0x0983, r24	; 0x800983 <pn532_packetbuffer+0x3>
    2e48:	28 ee       	ldi	r18, 0xE8	; 232
    2e4a:	33 e0       	ldi	r19, 0x03	; 3
    2e4c:	44 e0       	ldi	r20, 0x04	; 4
    2e4e:	60 e8       	ldi	r22, 0x80	; 128
    2e50:	79 e0       	ldi	r23, 0x09	; 9
    2e52:	ce 01       	movw	r24, r28
    2e54:	8c df       	rcall	.-232    	; 0x2d6e <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    2e56:	88 23       	and	r24, r24
    2e58:	a9 f0       	breq	.+42     	; 0x2e84 <_ZN9NFC_PN5329SAMConfigEv+0x56>
    2e5a:	48 e0       	ldi	r20, 0x08	; 8
    2e5c:	60 e8       	ldi	r22, 0x80	; 128
    2e5e:	79 e0       	ldi	r23, 0x09	; 9
    2e60:	ce 01       	movw	r24, r28
    2e62:	e1 de       	rcall	.-574    	; 0x2c26 <_ZN9NFC_PN5328readdataEPhh>
    2e64:	8d 89       	ldd	r24, Y+21	; 0x15
    2e66:	81 11       	cpse	r24, r1
    2e68:	03 c0       	rjmp	.+6      	; 0x2e70 <_ZN9NFC_PN5329SAMConfigEv+0x42>
    2e6a:	86 e0       	ldi	r24, 0x06	; 6
    2e6c:	90 e0       	ldi	r25, 0x00	; 0
    2e6e:	02 c0       	rjmp	.+4      	; 0x2e74 <_ZN9NFC_PN5329SAMConfigEv+0x46>
    2e70:	85 e0       	ldi	r24, 0x05	; 5
    2e72:	90 e0       	ldi	r25, 0x00	; 0
    2e74:	fc 01       	movw	r30, r24
    2e76:	e0 58       	subi	r30, 0x80	; 128
    2e78:	f6 4f       	sbci	r31, 0xF6	; 246
    2e7a:	81 e0       	ldi	r24, 0x01	; 1
    2e7c:	90 81       	ld	r25, Z
    2e7e:	95 31       	cpi	r25, 0x15	; 21
    2e80:	09 f0       	breq	.+2      	; 0x2e84 <_ZN9NFC_PN5329SAMConfigEv+0x56>
    2e82:	80 e0       	ldi	r24, 0x00	; 0
    2e84:	df 91       	pop	r29
    2e86:	cf 91       	pop	r28
    2e88:	08 95       	ret

00002e8a <_ZN9NFC_PN53227setPassiveActivationRetriesEh>:
    2e8a:	e0 e8       	ldi	r30, 0x80	; 128
    2e8c:	f9 e0       	ldi	r31, 0x09	; 9
    2e8e:	22 e3       	ldi	r18, 0x32	; 50
    2e90:	20 83       	st	Z, r18
    2e92:	25 e0       	ldi	r18, 0x05	; 5
    2e94:	21 83       	std	Z+1, r18	; 0x01
    2e96:	2f ef       	ldi	r18, 0xFF	; 255
    2e98:	22 83       	std	Z+2, r18	; 0x02
    2e9a:	21 e0       	ldi	r18, 0x01	; 1
    2e9c:	23 83       	std	Z+3, r18	; 0x03
    2e9e:	64 83       	std	Z+4, r22	; 0x04
    2ea0:	28 ee       	ldi	r18, 0xE8	; 232
    2ea2:	33 e0       	ldi	r19, 0x03	; 3
    2ea4:	45 e0       	ldi	r20, 0x05	; 5
    2ea6:	bf 01       	movw	r22, r30
    2ea8:	62 cf       	rjmp	.-316    	; 0x2d6e <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>

00002eaa <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j>:
    2eaa:	af 92       	push	r10
    2eac:	bf 92       	push	r11
    2eae:	cf 92       	push	r12
    2eb0:	df 92       	push	r13
    2eb2:	ef 92       	push	r14
    2eb4:	ff 92       	push	r15
    2eb6:	0f 93       	push	r16
    2eb8:	1f 93       	push	r17
    2eba:	cf 93       	push	r28
    2ebc:	df 93       	push	r29
    2ebe:	ec 01       	movw	r28, r24
    2ec0:	7a 01       	movw	r14, r20
    2ec2:	59 01       	movw	r10, r18
    2ec4:	68 01       	movw	r12, r16
    2ec6:	8a e4       	ldi	r24, 0x4A	; 74
    2ec8:	80 93 80 09 	sts	0x0980, r24	; 0x800980 <pn532_packetbuffer>
    2ecc:	81 e0       	ldi	r24, 0x01	; 1
    2ece:	80 93 81 09 	sts	0x0981, r24	; 0x800981 <pn532_packetbuffer+0x1>
    2ed2:	60 93 82 09 	sts	0x0982, r22	; 0x800982 <pn532_packetbuffer+0x2>
    2ed6:	98 01       	movw	r18, r16
    2ed8:	43 e0       	ldi	r20, 0x03	; 3
    2eda:	60 e8       	ldi	r22, 0x80	; 128
    2edc:	79 e0       	ldi	r23, 0x09	; 9
    2ede:	ce 01       	movw	r24, r28
    2ee0:	46 df       	rcall	.-372    	; 0x2d6e <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    2ee2:	18 2f       	mov	r17, r24
    2ee4:	88 23       	and	r24, r24
    2ee6:	41 f1       	breq	.+80     	; 0x2f38 <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x8e>
    2ee8:	8d 89       	ldd	r24, Y+21	; 0x15
    2eea:	88 23       	and	r24, r24
    2eec:	79 f0       	breq	.+30     	; 0x2f0c <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x62>
    2eee:	44 e1       	ldi	r20, 0x14	; 20
    2ef0:	60 e8       	ldi	r22, 0x80	; 128
    2ef2:	79 e0       	ldi	r23, 0x09	; 9
    2ef4:	ce 01       	movw	r24, r28
    2ef6:	97 de       	rcall	.-722    	; 0x2c26 <_ZN9NFC_PN5328readdataEPhh>
    2ef8:	80 91 87 09 	lds	r24, 0x0987	; 0x800987 <pn532_packetbuffer+0x7>
    2efc:	81 30       	cpi	r24, 0x01	; 1
    2efe:	e1 f4       	brne	.+56     	; 0x2f38 <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x8e>
    2f00:	80 91 8c 09 	lds	r24, 0x098C	; 0x80098c <pn532_packetbuffer+0xc>
    2f04:	f5 01       	movw	r30, r10
    2f06:	80 83       	st	Z, r24
    2f08:	80 e0       	ldi	r24, 0x00	; 0
    2f0a:	06 c0       	rjmp	.+12     	; 0x2f18 <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x6e>
    2f0c:	b6 01       	movw	r22, r12
    2f0e:	ce 01       	movw	r24, r28
    2f10:	5c de       	rcall	.-840    	; 0x2bca <_ZN9NFC_PN5329waitreadyEj>
    2f12:	81 11       	cpse	r24, r1
    2f14:	ec cf       	rjmp	.-40     	; 0x2eee <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x44>
    2f16:	10 c0       	rjmp	.+32     	; 0x2f38 <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x8e>
    2f18:	90 91 8c 09 	lds	r25, 0x098C	; 0x80098c <pn532_packetbuffer+0xc>
    2f1c:	89 17       	cp	r24, r25
    2f1e:	68 f4       	brcc	.+26     	; 0x2f3a <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x90>
    2f20:	28 2f       	mov	r18, r24
    2f22:	30 e0       	ldi	r19, 0x00	; 0
    2f24:	f9 01       	movw	r30, r18
    2f26:	e0 58       	subi	r30, 0x80	; 128
    2f28:	f6 4f       	sbci	r31, 0xF6	; 246
    2f2a:	95 85       	ldd	r25, Z+13	; 0x0d
    2f2c:	f7 01       	movw	r30, r14
    2f2e:	e2 0f       	add	r30, r18
    2f30:	f3 1f       	adc	r31, r19
    2f32:	90 83       	st	Z, r25
    2f34:	8f 5f       	subi	r24, 0xFF	; 255
    2f36:	f0 cf       	rjmp	.-32     	; 0x2f18 <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x6e>
    2f38:	10 e0       	ldi	r17, 0x00	; 0
    2f3a:	81 2f       	mov	r24, r17
    2f3c:	df 91       	pop	r29
    2f3e:	cf 91       	pop	r28
    2f40:	1f 91       	pop	r17
    2f42:	0f 91       	pop	r16
    2f44:	ff 90       	pop	r15
    2f46:	ef 90       	pop	r14
    2f48:	df 90       	pop	r13
    2f4a:	cf 90       	pop	r12
    2f4c:	bf 90       	pop	r11
    2f4e:	af 90       	pop	r10
    2f50:	08 95       	ret

00002f52 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_>:

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
uint8_t NFC_PN532::mifareclassic_AuthenticateBlock (uint8_t * uid, uint8_t uidLen, uint32_t blockNumber, uint8_t keyNumber, uint8_t * keyData)
{
    2f52:	af 92       	push	r10
    2f54:	bf 92       	push	r11
    2f56:	cf 92       	push	r12
    2f58:	df 92       	push	r13
    2f5a:	ef 92       	push	r14
    2f5c:	0f 93       	push	r16
    2f5e:	1f 93       	push	r17
    2f60:	cf 93       	push	r28
    2f62:	df 93       	push	r29
    2f64:	ec 01       	movw	r28, r24
    2f66:	14 2f       	mov	r17, r20
  uint8_t len;
  uint8_t i;

  // Hang on to the key and uid data
  memcpy (_key, keyData, 6);
    2f68:	5c 01       	movw	r10, r24
    2f6a:	8e e0       	ldi	r24, 0x0E	; 14
    2f6c:	a8 0e       	add	r10, r24
    2f6e:	b1 1c       	adc	r11, r1
    2f70:	86 e0       	ldi	r24, 0x06	; 6
    2f72:	f6 01       	movw	r30, r12
    2f74:	d5 01       	movw	r26, r10
    2f76:	01 90       	ld	r0, Z+
    2f78:	0d 92       	st	X+, r0
    2f7a:	8a 95       	dec	r24
    2f7c:	e1 f7       	brne	.-8      	; 0x2f76 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x24>
  memcpy (_uid, uid, uidLen);
    2f7e:	50 e0       	ldi	r21, 0x00	; 0
    2f80:	ce 01       	movw	r24, r28
    2f82:	06 96       	adiw	r24, 0x06	; 6
    2f84:	0e 94 d6 38 	call	0x71ac	; 0x71ac <memcpy>
  _uidLen = uidLen;
    2f88:	1d 87       	std	Y+13, r17	; 0x0d
    PN532DEBUGPRINT.print(F("Using authentication KEY "));PN532DEBUGPRINT.print(keyNumber ? 'B' : 'A');PN532DEBUGPRINT.print(F(": "));
    NFC_PN532::PrintHex(_key, 6);
  #endif

  // Prepare the authentication command //
  pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;   /* Data Exchange Header */
    2f8a:	80 e4       	ldi	r24, 0x40	; 64
    2f8c:	80 93 80 09 	sts	0x0980, r24	; 0x800980 <pn532_packetbuffer>
  pn532_packetbuffer[1] = 1;                              /* Max card numbers */
    2f90:	81 e0       	ldi	r24, 0x01	; 1
    2f92:	80 93 81 09 	sts	0x0981, r24	; 0x800981 <pn532_packetbuffer+0x1>
  pn532_packetbuffer[2] = (keyNumber) ? MIFARE_CMD_AUTH_B : MIFARE_CMD_AUTH_A;
    2f96:	e1 10       	cpse	r14, r1
    2f98:	02 c0       	rjmp	.+4      	; 0x2f9e <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x4c>
    2f9a:	80 e6       	ldi	r24, 0x60	; 96
    2f9c:	01 c0       	rjmp	.+2      	; 0x2fa0 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x4e>
    2f9e:	81 e6       	ldi	r24, 0x61	; 97
    2fa0:	80 93 82 09 	sts	0x0982, r24	; 0x800982 <pn532_packetbuffer+0x2>
  pn532_packetbuffer[3] = blockNumber;                    /* Block Number (1K = 0..63, 4K = 0..255 */
    2fa4:	00 93 83 09 	sts	0x0983, r16	; 0x800983 <pn532_packetbuffer+0x3>
  memcpy (pn532_packetbuffer+4, _key, 6);
    2fa8:	86 e0       	ldi	r24, 0x06	; 6
    2faa:	f5 01       	movw	r30, r10
    2fac:	a4 e8       	ldi	r26, 0x84	; 132
    2fae:	b9 e0       	ldi	r27, 0x09	; 9
    2fb0:	01 90       	ld	r0, Z+
    2fb2:	0d 92       	st	X+, r0
    2fb4:	8a 95       	dec	r24
    2fb6:	e1 f7       	brne	.-8      	; 0x2fb0 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x5e>
  for (i = 0; i < _uidLen; i++)
    2fb8:	80 e0       	ldi	r24, 0x00	; 0
    2fba:	4d 85       	ldd	r20, Y+13	; 0x0d
    2fbc:	84 17       	cp	r24, r20
    2fbe:	60 f4       	brcc	.+24     	; 0x2fd8 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x86>
  {
    pn532_packetbuffer[10+i] = _uid[i];                /* 4 byte card ID */
    2fc0:	28 2f       	mov	r18, r24
    2fc2:	30 e0       	ldi	r19, 0x00	; 0
    2fc4:	fe 01       	movw	r30, r28
    2fc6:	e2 0f       	add	r30, r18
    2fc8:	f3 1f       	adc	r31, r19
    2fca:	96 81       	ldd	r25, Z+6	; 0x06
    2fcc:	f9 01       	movw	r30, r18
    2fce:	e0 58       	subi	r30, 0x80	; 128
    2fd0:	f6 4f       	sbci	r31, 0xF6	; 246
    2fd2:	92 87       	std	Z+10, r25	; 0x0a
  pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;   /* Data Exchange Header */
  pn532_packetbuffer[1] = 1;                              /* Max card numbers */
  pn532_packetbuffer[2] = (keyNumber) ? MIFARE_CMD_AUTH_B : MIFARE_CMD_AUTH_A;
  pn532_packetbuffer[3] = blockNumber;                    /* Block Number (1K = 0..63, 4K = 0..255 */
  memcpy (pn532_packetbuffer+4, _key, 6);
  for (i = 0; i < _uidLen; i++)
    2fd4:	8f 5f       	subi	r24, 0xFF	; 255
    2fd6:	f1 cf       	rjmp	.-30     	; 0x2fba <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x68>
  {
    pn532_packetbuffer[10+i] = _uid[i];                /* 4 byte card ID */
  }

  if (! sendCommandCheckAck(pn532_packetbuffer, 10+_uidLen))
    2fd8:	46 5f       	subi	r20, 0xF6	; 246
    2fda:	28 ee       	ldi	r18, 0xE8	; 232
    2fdc:	33 e0       	ldi	r19, 0x03	; 3
    2fde:	60 e8       	ldi	r22, 0x80	; 128
    2fe0:	79 e0       	ldi	r23, 0x09	; 9
    2fe2:	ce 01       	movw	r24, r28
    2fe4:	c4 de       	rcall	.-632    	; 0x2d6e <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    2fe6:	88 23       	and	r24, r24
    2fe8:	49 f0       	breq	.+18     	; 0x2ffc <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0xaa>
    return 0;

  // Read the response packet
  readdata(pn532_packetbuffer, 12);
    2fea:	4c e0       	ldi	r20, 0x0C	; 12
    2fec:	60 e8       	ldi	r22, 0x80	; 128
    2fee:	79 e0       	ldi	r23, 0x09	; 9
    2ff0:	ce 01       	movw	r24, r28
    2ff2:	19 de       	rcall	.-974    	; 0x2c26 <_ZN9NFC_PN5328readdataEPhh>
  {
    pn532_packetbuffer[10+i] = _uid[i];                /* 4 byte card ID */
  }

  if (! sendCommandCheckAck(pn532_packetbuffer, 10+_uidLen))
    return 0;
    2ff4:	81 e0       	ldi	r24, 0x01	; 1
    2ff6:	90 91 87 09 	lds	r25, 0x0987	; 0x800987 <pn532_packetbuffer+0x7>
    2ffa:	91 11       	cpse	r25, r1
    2ffc:	80 e0       	ldi	r24, 0x00	; 0
    #endif
    return 0;
  }

  return 1;
}
    2ffe:	df 91       	pop	r29
    3000:	cf 91       	pop	r28
    3002:	1f 91       	pop	r17
    3004:	0f 91       	pop	r16
    3006:	ef 90       	pop	r14
    3008:	df 90       	pop	r13
    300a:	cf 90       	pop	r12
    300c:	bf 90       	pop	r11
    300e:	af 90       	pop	r10
    3010:	08 95       	ret

00003012 <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh>:

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
uint8_t NFC_PN532::mifareclassic_ReadDataBlock (uint8_t blockNumber, uint8_t * data)
{
    3012:	0f 93       	push	r16
    3014:	1f 93       	push	r17
    3016:	cf 93       	push	r28
    3018:	df 93       	push	r29
    301a:	ec 01       	movw	r28, r24
    301c:	8a 01       	movw	r16, r20
  #ifdef MIFAREDEBUG
    PN532DEBUGPRINT.print(F("Trying to read 16 bytes from block "));PN532DEBUGPRINT.println(blockNumber);
  #endif

  /* Prepare the command */
  pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;
    301e:	80 e4       	ldi	r24, 0x40	; 64
    3020:	80 93 80 09 	sts	0x0980, r24	; 0x800980 <pn532_packetbuffer>
  pn532_packetbuffer[1] = 1;                      /* Card number */
    3024:	81 e0       	ldi	r24, 0x01	; 1
    3026:	80 93 81 09 	sts	0x0981, r24	; 0x800981 <pn532_packetbuffer+0x1>
  pn532_packetbuffer[2] = MIFARE_CMD_READ;        /* Mifare Read command = 0x30 */
    302a:	80 e3       	ldi	r24, 0x30	; 48
    302c:	80 93 82 09 	sts	0x0982, r24	; 0x800982 <pn532_packetbuffer+0x2>
  pn532_packetbuffer[3] = blockNumber;            /* Block Number (0..63 for 1K, 0..255 for 4K) */
    3030:	60 93 83 09 	sts	0x0983, r22	; 0x800983 <pn532_packetbuffer+0x3>

  /* Send the command */
  if (! sendCommandCheckAck(pn532_packetbuffer, 4))
    3034:	28 ee       	ldi	r18, 0xE8	; 232
    3036:	33 e0       	ldi	r19, 0x03	; 3
    3038:	44 e0       	ldi	r20, 0x04	; 4
    303a:	60 e8       	ldi	r22, 0x80	; 128
    303c:	79 e0       	ldi	r23, 0x09	; 9
    303e:	ce 01       	movw	r24, r28
    3040:	96 de       	rcall	.-724    	; 0x2d6e <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    3042:	81 11       	cpse	r24, r1
    3044:	02 c0       	rjmp	.+4      	; 0x304a <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh+0x38>
  {
    #ifdef MIFAREDEBUG
      PN532DEBUGPRINT.println(F("Failed to receive ACK for read command"));
    #endif
    return 0;
    3046:	80 e0       	ldi	r24, 0x00	; 0
    3048:	12 c0       	rjmp	.+36     	; 0x306e <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh+0x5c>
  }

  /* Read the response packet */
  readdata(pn532_packetbuffer, 26);
    304a:	4a e1       	ldi	r20, 0x1A	; 26
    304c:	60 e8       	ldi	r22, 0x80	; 128
    304e:	79 e0       	ldi	r23, 0x09	; 9
    3050:	ce 01       	movw	r24, r28
    3052:	e9 dd       	rcall	.-1070   	; 0x2c26 <_ZN9NFC_PN5328readdataEPhh>

  /* If byte 8 isn't 0x00 we probably have an error */
  if (pn532_packetbuffer[7] != 0x00)
    3054:	80 91 87 09 	lds	r24, 0x0987	; 0x800987 <pn532_packetbuffer+0x7>
    3058:	81 11       	cpse	r24, r1
    305a:	f5 cf       	rjmp	.-22     	; 0x3046 <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh+0x34>
    return 0;
  }

  /* Copy the 16 data bytes to the output buffer        */
  /* Block content starts at byte 9 of a valid response */
  memcpy (data, pn532_packetbuffer+8, 16);
    305c:	80 e1       	ldi	r24, 0x10	; 16
    305e:	e8 e8       	ldi	r30, 0x88	; 136
    3060:	f9 e0       	ldi	r31, 0x09	; 9
    3062:	d8 01       	movw	r26, r16
    3064:	01 90       	ld	r0, Z+
    3066:	0d 92       	st	X+, r0
    3068:	8a 95       	dec	r24
    306a:	e1 f7       	brne	.-8      	; 0x3064 <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh+0x52>
    PN532DEBUGPRINT.print(F("Block "));
    PN532DEBUGPRINT.println(blockNumber);
    NFC_PN532::PrintHexChar(data, 16);
  #endif

  return 1;
    306c:	81 e0       	ldi	r24, 0x01	; 1
}
    306e:	df 91       	pop	r29
    3070:	cf 91       	pop	r28
    3072:	1f 91       	pop	r17
    3074:	0f 91       	pop	r16
    3076:	08 95       	ret

00003078 <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh>:

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
uint8_t NFC_PN532::mifareclassic_WriteDataBlock (uint8_t blockNumber, uint8_t * data)
{
    3078:	cf 93       	push	r28
    307a:	df 93       	push	r29
    307c:	ec 01       	movw	r28, r24
  #ifdef MIFAREDEBUG
    PN532DEBUGPRINT.print(F("Trying to write 16 bytes to block "));PN532DEBUGPRINT.println(blockNumber);
  #endif

  /* Prepare the first command */
  pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;
    307e:	80 e4       	ldi	r24, 0x40	; 64
    3080:	80 93 80 09 	sts	0x0980, r24	; 0x800980 <pn532_packetbuffer>
  pn532_packetbuffer[1] = 1;                      /* Card number */
    3084:	81 e0       	ldi	r24, 0x01	; 1
    3086:	80 93 81 09 	sts	0x0981, r24	; 0x800981 <pn532_packetbuffer+0x1>
  pn532_packetbuffer[2] = MIFARE_CMD_WRITE;       /* Mifare Write command = 0xA0 */
    308a:	80 ea       	ldi	r24, 0xA0	; 160
    308c:	80 93 82 09 	sts	0x0982, r24	; 0x800982 <pn532_packetbuffer+0x2>
  pn532_packetbuffer[3] = blockNumber;            /* Block Number (0..63 for 1K, 0..255 for 4K) */
    3090:	60 93 83 09 	sts	0x0983, r22	; 0x800983 <pn532_packetbuffer+0x3>
  memcpy (pn532_packetbuffer+4, data, 16);          /* Data Payload */
    3094:	80 e1       	ldi	r24, 0x10	; 16
    3096:	fa 01       	movw	r30, r20
    3098:	a4 e8       	ldi	r26, 0x84	; 132
    309a:	b9 e0       	ldi	r27, 0x09	; 9
    309c:	01 90       	ld	r0, Z+
    309e:	0d 92       	st	X+, r0
    30a0:	8a 95       	dec	r24
    30a2:	e1 f7       	brne	.-8      	; 0x309c <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh+0x24>

  /* Send the command */
  if (! sendCommandCheckAck(pn532_packetbuffer, 20))
    30a4:	28 ee       	ldi	r18, 0xE8	; 232
    30a6:	33 e0       	ldi	r19, 0x03	; 3
    30a8:	44 e1       	ldi	r20, 0x14	; 20
    30aa:	60 e8       	ldi	r22, 0x80	; 128
    30ac:	79 e0       	ldi	r23, 0x09	; 9
    30ae:	ce 01       	movw	r24, r28
    30b0:	5e de       	rcall	.-836    	; 0x2d6e <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    30b2:	88 23       	and	r24, r24
    30b4:	69 f0       	breq	.+26     	; 0x30d0 <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh+0x58>
    30b6:	8f e3       	ldi	r24, 0x3F	; 63
    30b8:	9c e9       	ldi	r25, 0x9C	; 156
    30ba:	01 97       	sbiw	r24, 0x01	; 1
    30bc:	f1 f7       	brne	.-4      	; 0x30ba <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh+0x42>
    30be:	00 c0       	rjmp	.+0      	; 0x30c0 <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh+0x48>
    30c0:	00 00       	nop
    return 0;
  }
  _delay_ms(10);

  /* Read the response packet */
  readdata(pn532_packetbuffer, 26);
    30c2:	4a e1       	ldi	r20, 0x1A	; 26
    30c4:	60 e8       	ldi	r22, 0x80	; 128
    30c6:	79 e0       	ldi	r23, 0x09	; 9
    30c8:	ce 01       	movw	r24, r28
    30ca:	ad dd       	rcall	.-1190   	; 0x2c26 <_ZN9NFC_PN5328readdataEPhh>
    30cc:	81 e0       	ldi	r24, 0x01	; 1
    30ce:	01 c0       	rjmp	.+2      	; 0x30d2 <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh+0x5a>
  if (! sendCommandCheckAck(pn532_packetbuffer, 20))
  {
    #ifdef MIFAREDEBUG
      PN532DEBUGPRINT.println(F("Failed to receive ACK for write command"));
    #endif
    return 0;
    30d0:	80 e0       	ldi	r24, 0x00	; 0

  /* Read the response packet */
  readdata(pn532_packetbuffer, 26);

  return 1;
}
    30d2:	df 91       	pop	r29
    30d4:	cf 91       	pop	r28
    30d6:	08 95       	ret

000030d8 <_ZL9date2daysjhh>:
} // of method pinAlarm()                                                     //                                  //
/*******************************************************************************************************************
** Method pinSquareWave() will set the control register flag to make the INT/SQW Pin produce a 1Hz signal         **
*******************************************************************************************************************/
void DS3231M_Class::pinSquareWave() {                                         //                                  //
  writeByte(DS3231M_CONTROL,readByte(DS3231M_CONTROL)|0x4);                   // Set bit 3 to off                 //
    30d8:	80 3d       	cpi	r24, 0xD0	; 208
    30da:	27 e0       	ldi	r18, 0x07	; 7
    30dc:	92 07       	cpc	r25, r18
    30de:	10 f0       	brcs	.+4      	; 0x30e4 <_ZL9date2daysjhh+0xc>
    30e0:	80 5d       	subi	r24, 0xD0	; 208
    30e2:	97 40       	sbci	r25, 0x07	; 7
    30e4:	50 e0       	ldi	r21, 0x00	; 0
    30e6:	e6 e2       	ldi	r30, 0x26	; 38
    30e8:	f2 e0       	ldi	r31, 0x02	; 2
    30ea:	21 e0       	ldi	r18, 0x01	; 1
    30ec:	26 17       	cp	r18, r22
    30ee:	30 f4       	brcc	.+12     	; 0x30fc <_ZL9date2daysjhh+0x24>
    30f0:	34 91       	lpm	r19, Z
    30f2:	43 0f       	add	r20, r19
    30f4:	51 1d       	adc	r21, r1
    30f6:	2f 5f       	subi	r18, 0xFF	; 255
    30f8:	31 96       	adiw	r30, 0x01	; 1
    30fa:	f8 cf       	rjmp	.-16     	; 0x30ec <_ZL9date2daysjhh+0x14>
    30fc:	63 30       	cpi	r22, 0x03	; 3
    30fe:	38 f0       	brcs	.+14     	; 0x310e <_ZL9date2daysjhh+0x36>
    3100:	9c 01       	movw	r18, r24
    3102:	23 70       	andi	r18, 0x03	; 3
    3104:	33 27       	eor	r19, r19
    3106:	23 2b       	or	r18, r19
    3108:	11 f4       	brne	.+4      	; 0x310e <_ZL9date2daysjhh+0x36>
    310a:	4f 5f       	subi	r20, 0xFF	; 255
    310c:	5f 4f       	sbci	r21, 0xFF	; 255
    310e:	bc 01       	movw	r22, r24
    3110:	6d 5f       	subi	r22, 0xFD	; 253
    3112:	7f 4f       	sbci	r23, 0xFF	; 255
    3114:	76 95       	lsr	r23
    3116:	67 95       	ror	r22
    3118:	76 95       	lsr	r23
    311a:	67 95       	ror	r22
    311c:	ed e6       	ldi	r30, 0x6D	; 109
    311e:	f1 e0       	ldi	r31, 0x01	; 1
    3120:	8e 9f       	mul	r24, r30
    3122:	90 01       	movw	r18, r0
    3124:	8f 9f       	mul	r24, r31
    3126:	30 0d       	add	r19, r0
    3128:	9e 9f       	mul	r25, r30
    312a:	30 0d       	add	r19, r0
    312c:	11 24       	eor	r1, r1
    312e:	c9 01       	movw	r24, r18
    3130:	01 97       	sbiw	r24, 0x01	; 1
    3132:	86 0f       	add	r24, r22
    3134:	97 1f       	adc	r25, r23
    3136:	84 0f       	add	r24, r20
    3138:	95 1f       	adc	r25, r21
    313a:	08 95       	ret

0000313c <_ZL6conv2dPKc>:
    313c:	fc 01       	movw	r30, r24
    313e:	90 81       	ld	r25, Z
    3140:	90 53       	subi	r25, 0x30	; 48
    3142:	9a 30       	cpi	r25, 0x0A	; 10
    3144:	08 f0       	brcs	.+2      	; 0x3148 <_ZL6conv2dPKc+0xc>
    3146:	90 e0       	ldi	r25, 0x00	; 0
    3148:	81 81       	ldd	r24, Z+1	; 0x01
    314a:	80 53       	subi	r24, 0x30	; 48
    314c:	2a e0       	ldi	r18, 0x0A	; 10
    314e:	92 9f       	mul	r25, r18
    3150:	80 0d       	add	r24, r0
    3152:	11 24       	eor	r1, r1
    3154:	08 95       	ret

00003156 <_ZN8DateTimeC1Em>:
    3156:	8f 92       	push	r8
    3158:	9f 92       	push	r9
    315a:	af 92       	push	r10
    315c:	bf 92       	push	r11
    315e:	cf 92       	push	r12
    3160:	df 92       	push	r13
    3162:	ef 92       	push	r14
    3164:	ff 92       	push	r15
    3166:	cf 93       	push	r28
    3168:	df 93       	push	r29
    316a:	ec 01       	movw	r28, r24
    316c:	6a 01       	movw	r12, r20
    316e:	7b 01       	movw	r14, r22
    3170:	80 e8       	ldi	r24, 0x80	; 128
    3172:	c8 1a       	sub	r12, r24
    3174:	83 e4       	ldi	r24, 0x43	; 67
    3176:	d8 0a       	sbc	r13, r24
    3178:	8d e6       	ldi	r24, 0x6D	; 109
    317a:	e8 0a       	sbc	r14, r24
    317c:	88 e3       	ldi	r24, 0x38	; 56
    317e:	f8 0a       	sbc	r15, r24
    3180:	8c e3       	ldi	r24, 0x3C	; 60
    3182:	88 2e       	mov	r8, r24
    3184:	91 2c       	mov	r9, r1
    3186:	a1 2c       	mov	r10, r1
    3188:	b1 2c       	mov	r11, r1
    318a:	c7 01       	movw	r24, r14
    318c:	b6 01       	movw	r22, r12
    318e:	a5 01       	movw	r20, r10
    3190:	94 01       	movw	r18, r8
    3192:	0e 94 5d 36 	call	0x6cba	; 0x6cba <__udivmodsi4>
    3196:	6d 83       	std	Y+5, r22	; 0x05
    3198:	ca 01       	movw	r24, r20
    319a:	b9 01       	movw	r22, r18
    319c:	a5 01       	movw	r20, r10
    319e:	94 01       	movw	r18, r8
    31a0:	0e 94 5d 36 	call	0x6cba	; 0x6cba <__udivmodsi4>
    31a4:	6c 83       	std	Y+4, r22	; 0x04
    31a6:	c7 01       	movw	r24, r14
    31a8:	b6 01       	movw	r22, r12
    31aa:	20 e1       	ldi	r18, 0x10	; 16
    31ac:	3e e0       	ldi	r19, 0x0E	; 14
    31ae:	40 e0       	ldi	r20, 0x00	; 0
    31b0:	50 e0       	ldi	r21, 0x00	; 0
    31b2:	0e 94 5d 36 	call	0x6cba	; 0x6cba <__udivmodsi4>
    31b6:	ca 01       	movw	r24, r20
    31b8:	b9 01       	movw	r22, r18
    31ba:	28 e1       	ldi	r18, 0x18	; 24
    31bc:	30 e0       	ldi	r19, 0x00	; 0
    31be:	40 e0       	ldi	r20, 0x00	; 0
    31c0:	50 e0       	ldi	r21, 0x00	; 0
    31c2:	0e 94 5d 36 	call	0x6cba	; 0x6cba <__udivmodsi4>
    31c6:	6b 83       	std	Y+3, r22	; 0x03
    31c8:	c7 01       	movw	r24, r14
    31ca:	b6 01       	movw	r22, r12
    31cc:	20 e8       	ldi	r18, 0x80	; 128
    31ce:	31 e5       	ldi	r19, 0x51	; 81
    31d0:	41 e0       	ldi	r20, 0x01	; 1
    31d2:	50 e0       	ldi	r21, 0x00	; 0
    31d4:	0e 94 5d 36 	call	0x6cba	; 0x6cba <__udivmodsi4>
    31d8:	18 82       	st	Y, r1
    31da:	88 81       	ld	r24, Y
    31dc:	98 2f       	mov	r25, r24
    31de:	93 70       	andi	r25, 0x03	; 3
    31e0:	41 e0       	ldi	r20, 0x01	; 1
    31e2:	50 e0       	ldi	r21, 0x00	; 0
    31e4:	11 f0       	breq	.+4      	; 0x31ea <_ZN8DateTimeC1Em+0x94>
    31e6:	40 e0       	ldi	r20, 0x00	; 0
    31e8:	50 e0       	ldi	r21, 0x00	; 0
    31ea:	ba 01       	movw	r22, r20
    31ec:	63 59       	subi	r22, 0x93	; 147
    31ee:	7e 4f       	sbci	r23, 0xFE	; 254
    31f0:	26 17       	cp	r18, r22
    31f2:	37 07       	cpc	r19, r23
    31f4:	38 f0       	brcs	.+14     	; 0x3204 <_ZN8DateTimeC1Em+0xae>
    31f6:	24 1b       	sub	r18, r20
    31f8:	35 0b       	sbc	r19, r21
    31fa:	2d 56       	subi	r18, 0x6D	; 109
    31fc:	31 40       	sbci	r19, 0x01	; 1
    31fe:	8f 5f       	subi	r24, 0xFF	; 255
    3200:	88 83       	st	Y, r24
    3202:	eb cf       	rjmp	.-42     	; 0x31da <_ZN8DateTimeC1Em+0x84>
    3204:	81 e0       	ldi	r24, 0x01	; 1
    3206:	89 83       	std	Y+1, r24	; 0x01
    3208:	89 81       	ldd	r24, Y+1	; 0x01
    320a:	e8 2f       	mov	r30, r24
    320c:	f0 e0       	ldi	r31, 0x00	; 0
    320e:	eb 5d       	subi	r30, 0xDB	; 219
    3210:	fd 4f       	sbci	r31, 0xFD	; 253
    3212:	e4 91       	lpm	r30, Z
    3214:	91 11       	cpse	r25, r1
    3216:	03 c0       	rjmp	.+6      	; 0x321e <_ZN8DateTimeC1Em+0xc8>
    3218:	82 30       	cpi	r24, 0x02	; 2
    321a:	09 f4       	brne	.+2      	; 0x321e <_ZN8DateTimeC1Em+0xc8>
    321c:	ef 5f       	subi	r30, 0xFF	; 255
    321e:	f0 e0       	ldi	r31, 0x00	; 0
    3220:	2e 17       	cp	r18, r30
    3222:	3f 07       	cpc	r19, r31
    3224:	20 f0       	brcs	.+8      	; 0x322e <_ZN8DateTimeC1Em+0xd8>
    3226:	2e 1b       	sub	r18, r30
    3228:	3f 0b       	sbc	r19, r31
    322a:	8f 5f       	subi	r24, 0xFF	; 255
    322c:	ec cf       	rjmp	.-40     	; 0x3206 <_ZN8DateTimeC1Em+0xb0>
    322e:	2f 5f       	subi	r18, 0xFF	; 255
    3230:	2a 83       	std	Y+2, r18	; 0x02
    3232:	df 91       	pop	r29
    3234:	cf 91       	pop	r28
    3236:	ff 90       	pop	r15
    3238:	ef 90       	pop	r14
    323a:	df 90       	pop	r13
    323c:	cf 90       	pop	r12
    323e:	bf 90       	pop	r11
    3240:	af 90       	pop	r10
    3242:	9f 90       	pop	r9
    3244:	8f 90       	pop	r8
    3246:	08 95       	ret

00003248 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>:
    3248:	ef 92       	push	r14
    324a:	ff 92       	push	r15
    324c:	0f 93       	push	r16
    324e:	1f 93       	push	r17
    3250:	cf 93       	push	r28
    3252:	df 93       	push	r29
    3254:	cd b7       	in	r28, 0x3d	; 61
    3256:	de b7       	in	r29, 0x3e	; 62
    3258:	2b 97       	sbiw	r28, 0x0b	; 11
    325a:	0f b6       	in	r0, 0x3f	; 63
    325c:	f8 94       	cli
    325e:	de bf       	out	0x3e, r29	; 62
    3260:	0f be       	out	0x3f, r0	; 63
    3262:	cd bf       	out	0x3d, r28	; 61
    3264:	8c 01       	movw	r16, r24
    3266:	7a 01       	movw	r14, r20
    3268:	4b e0       	ldi	r20, 0x0B	; 11
    326a:	50 e0       	ldi	r21, 0x00	; 0
    326c:	ce 01       	movw	r24, r28
    326e:	01 96       	adiw	r24, 0x01	; 1
    3270:	0e 94 cd 38 	call	0x719a	; 0x719a <memcpy_P>
    3274:	ce 01       	movw	r24, r28
    3276:	0a 96       	adiw	r24, 0x0a	; 10
    3278:	61 df       	rcall	.-318    	; 0x313c <_ZL6conv2dPKc>
    327a:	f8 01       	movw	r30, r16
    327c:	80 83       	st	Z, r24
    327e:	e9 81       	ldd	r30, Y+1	; 0x01
    3280:	8e 2f       	mov	r24, r30
    3282:	90 e0       	ldi	r25, 0x00	; 0
    3284:	fc 01       	movw	r30, r24
    3286:	e1 54       	subi	r30, 0x41	; 65
    3288:	f1 09       	sbc	r31, r1
    328a:	e3 31       	cpi	r30, 0x13	; 19
    328c:	f1 05       	cpc	r31, r1
    328e:	48 f5       	brcc	.+82     	; 0x32e2 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
    3290:	ee 5a       	subi	r30, 0xAE	; 174
    3292:	ff 4f       	sbci	r31, 0xFF	; 255
    3294:	0c 94 7f 36 	jmp	0x6cfe	; 0x6cfe <__tablejump2__>
    3298:	8a 81       	ldd	r24, Y+2	; 0x02
    329a:	81 36       	cpi	r24, 0x61	; 97
    329c:	29 f0       	breq	.+10     	; 0x32a8 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x60>
    329e:	8b 81       	ldd	r24, Y+3	; 0x03
    32a0:	8e 36       	cpi	r24, 0x6E	; 110
    32a2:	21 f0       	breq	.+8      	; 0x32ac <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x64>
    32a4:	87 e0       	ldi	r24, 0x07	; 7
    32a6:	1b c0       	rjmp	.+54     	; 0x32de <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    32a8:	81 e0       	ldi	r24, 0x01	; 1
    32aa:	19 c0       	rjmp	.+50     	; 0x32de <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    32ac:	86 e0       	ldi	r24, 0x06	; 6
    32ae:	17 c0       	rjmp	.+46     	; 0x32de <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    32b0:	82 e0       	ldi	r24, 0x02	; 2
    32b2:	15 c0       	rjmp	.+42     	; 0x32de <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    32b4:	8b 81       	ldd	r24, Y+3	; 0x03
    32b6:	82 37       	cpi	r24, 0x72	; 114
    32b8:	11 f0       	breq	.+4      	; 0x32be <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x76>
    32ba:	88 e0       	ldi	r24, 0x08	; 8
    32bc:	10 c0       	rjmp	.+32     	; 0x32de <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    32be:	84 e0       	ldi	r24, 0x04	; 4
    32c0:	0e c0       	rjmp	.+28     	; 0x32de <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    32c2:	8b 81       	ldd	r24, Y+3	; 0x03
    32c4:	82 37       	cpi	r24, 0x72	; 114
    32c6:	11 f0       	breq	.+4      	; 0x32cc <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x84>
    32c8:	85 e0       	ldi	r24, 0x05	; 5
    32ca:	09 c0       	rjmp	.+18     	; 0x32de <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    32cc:	83 e0       	ldi	r24, 0x03	; 3
    32ce:	07 c0       	rjmp	.+14     	; 0x32de <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    32d0:	89 e0       	ldi	r24, 0x09	; 9
    32d2:	05 c0       	rjmp	.+10     	; 0x32de <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    32d4:	8a e0       	ldi	r24, 0x0A	; 10
    32d6:	03 c0       	rjmp	.+6      	; 0x32de <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    32d8:	8b e0       	ldi	r24, 0x0B	; 11
    32da:	01 c0       	rjmp	.+2      	; 0x32de <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    32dc:	8c e0       	ldi	r24, 0x0C	; 12
    32de:	f8 01       	movw	r30, r16
    32e0:	81 83       	std	Z+1, r24	; 0x01
    32e2:	ce 01       	movw	r24, r28
    32e4:	05 96       	adiw	r24, 0x05	; 5
    32e6:	2a df       	rcall	.-428    	; 0x313c <_ZL6conv2dPKc>
    32e8:	f8 01       	movw	r30, r16
    32ea:	82 83       	std	Z+2, r24	; 0x02
    32ec:	48 e0       	ldi	r20, 0x08	; 8
    32ee:	50 e0       	ldi	r21, 0x00	; 0
    32f0:	b7 01       	movw	r22, r14
    32f2:	ce 01       	movw	r24, r28
    32f4:	01 96       	adiw	r24, 0x01	; 1
    32f6:	0e 94 cd 38 	call	0x719a	; 0x719a <memcpy_P>
    32fa:	ce 01       	movw	r24, r28
    32fc:	01 96       	adiw	r24, 0x01	; 1
    32fe:	1e df       	rcall	.-452    	; 0x313c <_ZL6conv2dPKc>
    3300:	f8 01       	movw	r30, r16
    3302:	83 83       	std	Z+3, r24	; 0x03
    3304:	ce 01       	movw	r24, r28
    3306:	04 96       	adiw	r24, 0x04	; 4
    3308:	19 df       	rcall	.-462    	; 0x313c <_ZL6conv2dPKc>
    330a:	f8 01       	movw	r30, r16
    330c:	84 83       	std	Z+4, r24	; 0x04
    330e:	ce 01       	movw	r24, r28
    3310:	07 96       	adiw	r24, 0x07	; 7
    3312:	14 df       	rcall	.-472    	; 0x313c <_ZL6conv2dPKc>
    3314:	f8 01       	movw	r30, r16
    3316:	85 83       	std	Z+5, r24	; 0x05
    3318:	2b 96       	adiw	r28, 0x0b	; 11
    331a:	0f b6       	in	r0, 0x3f	; 63
    331c:	f8 94       	cli
    331e:	de bf       	out	0x3e, r29	; 62
    3320:	0f be       	out	0x3f, r0	; 63
    3322:	cd bf       	out	0x3d, r28	; 61
    3324:	df 91       	pop	r29
    3326:	cf 91       	pop	r28
    3328:	1f 91       	pop	r17
    332a:	0f 91       	pop	r16
    332c:	ff 90       	pop	r15
    332e:	ef 90       	pop	r14
    3330:	08 95       	ret

00003332 <_ZNK8DateTime12dayOfTheWeekEv>:
    3332:	fc 01       	movw	r30, r24
    3334:	80 81       	ld	r24, Z
    3336:	42 81       	ldd	r20, Z+2	; 0x02
    3338:	61 81       	ldd	r22, Z+1	; 0x01
    333a:	90 e0       	ldi	r25, 0x00	; 0
    333c:	cd de       	rcall	.-614    	; 0x30d8 <_ZL9date2daysjhh>
    333e:	06 96       	adiw	r24, 0x06	; 6
    3340:	67 e0       	ldi	r22, 0x07	; 7
    3342:	70 e0       	ldi	r23, 0x00	; 0
    3344:	0c 94 49 36 	jmp	0x6c92	; 0x6c92 <__udivmodhi4>
    3348:	08 95       	ret

0000334a <_ZNK8DateTime8unixtimeEv>:
    334a:	ef 92       	push	r14
    334c:	ff 92       	push	r15
    334e:	0f 93       	push	r16
    3350:	1f 93       	push	r17
    3352:	cf 93       	push	r28
    3354:	df 93       	push	r29
    3356:	ec 01       	movw	r28, r24
    3358:	88 81       	ld	r24, Y
    335a:	4a 81       	ldd	r20, Y+2	; 0x02
    335c:	69 81       	ldd	r22, Y+1	; 0x01
    335e:	90 e0       	ldi	r25, 0x00	; 0
    3360:	bb de       	rcall	.-650    	; 0x30d8 <_ZL9date2daysjhh>
    3362:	9c 01       	movw	r18, r24
    3364:	a8 e1       	ldi	r26, 0x18	; 24
    3366:	b0 e0       	ldi	r27, 0x00	; 0
    3368:	0e 94 88 36 	call	0x6d10	; 0x6d10 <__umulhisi3>
    336c:	2b 81       	ldd	r18, Y+3	; 0x03
    336e:	7b 01       	movw	r14, r22
    3370:	8c 01       	movw	r16, r24
    3372:	e2 0e       	add	r14, r18
    3374:	f1 1c       	adc	r15, r1
    3376:	01 1d       	adc	r16, r1
    3378:	11 1d       	adc	r17, r1
    337a:	a8 01       	movw	r20, r16
    337c:	97 01       	movw	r18, r14
    337e:	ac e3       	ldi	r26, 0x3C	; 60
    3380:	b0 e0       	ldi	r27, 0x00	; 0
    3382:	0e 94 97 36 	call	0x6d2e	; 0x6d2e <__muluhisi3>
    3386:	2c 81       	ldd	r18, Y+4	; 0x04
    3388:	7b 01       	movw	r14, r22
    338a:	8c 01       	movw	r16, r24
    338c:	e2 0e       	add	r14, r18
    338e:	f1 1c       	adc	r15, r1
    3390:	01 1d       	adc	r16, r1
    3392:	11 1d       	adc	r17, r1
    3394:	a8 01       	movw	r20, r16
    3396:	97 01       	movw	r18, r14
    3398:	0e 94 97 36 	call	0x6d2e	; 0x6d2e <__muluhisi3>
    339c:	2d 81       	ldd	r18, Y+5	; 0x05
    339e:	dc 01       	movw	r26, r24
    33a0:	cb 01       	movw	r24, r22
    33a2:	82 0f       	add	r24, r18
    33a4:	91 1d       	adc	r25, r1
    33a6:	a1 1d       	adc	r26, r1
    33a8:	b1 1d       	adc	r27, r1
    33aa:	bc 01       	movw	r22, r24
    33ac:	cd 01       	movw	r24, r26
    33ae:	60 58       	subi	r22, 0x80	; 128
    33b0:	7c 4b       	sbci	r23, 0xBC	; 188
    33b2:	82 49       	sbci	r24, 0x92	; 146
    33b4:	97 4c       	sbci	r25, 0xC7	; 199
    33b6:	df 91       	pop	r29
    33b8:	cf 91       	pop	r28
    33ba:	1f 91       	pop	r17
    33bc:	0f 91       	pop	r16
    33be:	ff 90       	pop	r15
    33c0:	ef 90       	pop	r14
    33c2:	08 95       	ret

000033c4 <_ZNK8DateTime11secondstimeEv>:
    33c4:	ef 92       	push	r14
    33c6:	ff 92       	push	r15
    33c8:	0f 93       	push	r16
    33ca:	1f 93       	push	r17
    33cc:	cf 93       	push	r28
    33ce:	df 93       	push	r29
    33d0:	ec 01       	movw	r28, r24
    33d2:	88 81       	ld	r24, Y
    33d4:	4a 81       	ldd	r20, Y+2	; 0x02
    33d6:	69 81       	ldd	r22, Y+1	; 0x01
    33d8:	90 e0       	ldi	r25, 0x00	; 0
    33da:	7e de       	rcall	.-772    	; 0x30d8 <_ZL9date2daysjhh>
    33dc:	9c 01       	movw	r18, r24
    33de:	a8 e1       	ldi	r26, 0x18	; 24
    33e0:	b0 e0       	ldi	r27, 0x00	; 0
    33e2:	0e 94 88 36 	call	0x6d10	; 0x6d10 <__umulhisi3>
    33e6:	2b 81       	ldd	r18, Y+3	; 0x03
    33e8:	7b 01       	movw	r14, r22
    33ea:	8c 01       	movw	r16, r24
    33ec:	e2 0e       	add	r14, r18
    33ee:	f1 1c       	adc	r15, r1
    33f0:	01 1d       	adc	r16, r1
    33f2:	11 1d       	adc	r17, r1
    33f4:	a8 01       	movw	r20, r16
    33f6:	97 01       	movw	r18, r14
    33f8:	ac e3       	ldi	r26, 0x3C	; 60
    33fa:	b0 e0       	ldi	r27, 0x00	; 0
    33fc:	0e 94 97 36 	call	0x6d2e	; 0x6d2e <__muluhisi3>
    3400:	2c 81       	ldd	r18, Y+4	; 0x04
    3402:	7b 01       	movw	r14, r22
    3404:	8c 01       	movw	r16, r24
    3406:	e2 0e       	add	r14, r18
    3408:	f1 1c       	adc	r15, r1
    340a:	01 1d       	adc	r16, r1
    340c:	11 1d       	adc	r17, r1
    340e:	a8 01       	movw	r20, r16
    3410:	97 01       	movw	r18, r14
    3412:	0e 94 97 36 	call	0x6d2e	; 0x6d2e <__muluhisi3>
    3416:	2d 81       	ldd	r18, Y+5	; 0x05
    3418:	62 0f       	add	r22, r18
    341a:	71 1d       	adc	r23, r1
    341c:	81 1d       	adc	r24, r1
    341e:	91 1d       	adc	r25, r1
    3420:	df 91       	pop	r29
    3422:	cf 91       	pop	r28
    3424:	1f 91       	pop	r17
    3426:	0f 91       	pop	r16
    3428:	ff 90       	pop	r15
    342a:	ef 90       	pop	r14
    342c:	08 95       	ret

0000342e <_ZN13DS3231M_ClassC1Ev>:
    342e:	fc 01       	movw	r30, r24
    3430:	10 82       	st	Z, r1
    3432:	11 82       	std	Z+1, r1	; 0x01
    3434:	12 82       	std	Z+2, r1	; 0x02
    3436:	13 82       	std	Z+3, r1	; 0x03
    3438:	14 82       	std	Z+4, r1	; 0x04
    343a:	08 95       	ret

0000343c <_ZN13DS3231M_ClassD1Ev>:
    343c:	08 95       	ret

0000343e <_ZN13DS3231M_Class9writeByteEhh>:
    343e:	0f 93       	push	r16
    3440:	1f 93       	push	r17
    3442:	cf 93       	push	r28
    3444:	df 93       	push	r29
    3446:	ec 01       	movw	r28, r24
    3448:	06 2f       	mov	r16, r22
    344a:	14 2f       	mov	r17, r20
    344c:	68 e6       	ldi	r22, 0x68	; 104
    344e:	89 e7       	ldi	r24, 0x79	; 121
    3450:	9a e0       	ldi	r25, 0x0A	; 10
    3452:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <_ZN7TwoWire17beginTransmissionEh>
    3456:	60 2f       	mov	r22, r16
    3458:	89 e7       	ldi	r24, 0x79	; 121
    345a:	9a e0       	ldi	r25, 0x0A	; 10
    345c:	0e 94 7f 2c 	call	0x58fe	; 0x58fe <_ZN7TwoWire5writeEh>
    3460:	61 2f       	mov	r22, r17
    3462:	89 e7       	ldi	r24, 0x79	; 121
    3464:	9a e0       	ldi	r25, 0x0A	; 10
    3466:	0e 94 7f 2c 	call	0x58fe	; 0x58fe <_ZN7TwoWire5writeEh>
    346a:	89 e7       	ldi	r24, 0x79	; 121
    346c:	9a e0       	ldi	r25, 0x0A	; 10
    346e:	0e 94 51 2d 	call	0x5aa2	; 0x5aa2 <_ZN7TwoWire15endTransmissionEv>
    3472:	88 83       	st	Y, r24
    3474:	df 91       	pop	r29
    3476:	cf 91       	pop	r28
    3478:	1f 91       	pop	r17
    347a:	0f 91       	pop	r16
    347c:	08 95       	ret

0000347e <_ZN13DS3231M_Class8readByteEh>:
    347e:	1f 93       	push	r17
    3480:	cf 93       	push	r28
    3482:	df 93       	push	r29
    3484:	ec 01       	movw	r28, r24
    3486:	16 2f       	mov	r17, r22
    3488:	68 e6       	ldi	r22, 0x68	; 104
    348a:	89 e7       	ldi	r24, 0x79	; 121
    348c:	9a e0       	ldi	r25, 0x0A	; 10
    348e:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <_ZN7TwoWire17beginTransmissionEh>
    3492:	61 2f       	mov	r22, r17
    3494:	89 e7       	ldi	r24, 0x79	; 121
    3496:	9a e0       	ldi	r25, 0x0A	; 10
    3498:	0e 94 7f 2c 	call	0x58fe	; 0x58fe <_ZN7TwoWire5writeEh>
    349c:	89 e7       	ldi	r24, 0x79	; 121
    349e:	9a e0       	ldi	r25, 0x0A	; 10
    34a0:	0e 94 51 2d 	call	0x5aa2	; 0x5aa2 <_ZN7TwoWire15endTransmissionEv>
    34a4:	88 83       	st	Y, r24
    34a6:	41 e0       	ldi	r20, 0x01	; 1
    34a8:	68 e6       	ldi	r22, 0x68	; 104
    34aa:	89 e7       	ldi	r24, 0x79	; 121
    34ac:	9a e0       	ldi	r25, 0x0A	; 10
    34ae:	0e 94 4d 2d 	call	0x5a9a	; 0x5a9a <_ZN7TwoWire11requestFromEhh>
    34b2:	89 e7       	ldi	r24, 0x79	; 121
    34b4:	9a e0       	ldi	r25, 0x0A	; 10
    34b6:	0e 94 f9 2b 	call	0x57f2	; 0x57f2 <_ZN7TwoWire4readEv>
    34ba:	df 91       	pop	r29
    34bc:	cf 91       	pop	r28
    34be:	1f 91       	pop	r17
    34c0:	08 95       	ret

000034c2 <_ZN13DS3231M_Class5beginEm>:
    34c2:	cf 92       	push	r12
    34c4:	df 92       	push	r13
    34c6:	ef 92       	push	r14
    34c8:	ff 92       	push	r15
    34ca:	cf 93       	push	r28
    34cc:	df 93       	push	r29
    34ce:	ec 01       	movw	r28, r24
    34d0:	6a 01       	movw	r12, r20
    34d2:	7b 01       	movw	r14, r22
    34d4:	89 e7       	ldi	r24, 0x79	; 121
    34d6:	9a e0       	ldi	r25, 0x0A	; 10
    34d8:	0e 94 bd 2c 	call	0x597a	; 0x597a <_ZN7TwoWire5beginEv>
    34dc:	b7 01       	movw	r22, r14
    34de:	a6 01       	movw	r20, r12
    34e0:	89 e7       	ldi	r24, 0x79	; 121
    34e2:	9a e0       	ldi	r25, 0x0A	; 10
    34e4:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN7TwoWire8setClockEm>
    34e8:	68 e6       	ldi	r22, 0x68	; 104
    34ea:	89 e7       	ldi	r24, 0x79	; 121
    34ec:	9a e0       	ldi	r25, 0x0A	; 10
    34ee:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <_ZN7TwoWire17beginTransmissionEh>
    34f2:	89 e7       	ldi	r24, 0x79	; 121
    34f4:	9a e0       	ldi	r25, 0x0A	; 10
    34f6:	0e 94 51 2d 	call	0x5aa2	; 0x5aa2 <_ZN7TwoWire15endTransmissionEv>
    34fa:	81 11       	cpse	r24, r1
    34fc:	0a c0       	rjmp	.+20     	; 0x3512 <_ZN13DS3231M_Class5beginEm+0x50>
    34fe:	62 e0       	ldi	r22, 0x02	; 2
    3500:	ce 01       	movw	r24, r28
    3502:	bd df       	rcall	.-134    	; 0x347e <_ZN13DS3231M_Class8readByteEh>
    3504:	48 2f       	mov	r20, r24
    3506:	4f 7b       	andi	r20, 0xBF	; 191
    3508:	62 e0       	ldi	r22, 0x02	; 2
    350a:	ce 01       	movw	r24, r28
    350c:	98 df       	rcall	.-208    	; 0x343e <_ZN13DS3231M_Class9writeByteEhh>
    350e:	81 e0       	ldi	r24, 0x01	; 1
    3510:	01 c0       	rjmp	.+2      	; 0x3514 <_ZN13DS3231M_Class5beginEm+0x52>
    3512:	80 e0       	ldi	r24, 0x00	; 0
    3514:	df 91       	pop	r29
    3516:	cf 91       	pop	r28
    3518:	ff 90       	pop	r15
    351a:	ef 90       	pop	r14
    351c:	df 90       	pop	r13
    351e:	cf 90       	pop	r12
    3520:	08 95       	ret

00003522 <_ZN13DS3231M_Class3nowEv>:
/*******************************************************************************************************************
** Method now() returns the current date/time                                                                     **
** then the power down time is returned, if the timeType = 2 then the power up time is returned. These options are**
** not documented as the official calls are "getPowerOffDate" and "getPowerOnDate"                                **
*******************************************************************************************************************/
DateTime DS3231M_Class::now(){                                                // Return current date/time         //
    3522:	0f 93       	push	r16
    3524:	1f 93       	push	r17
    3526:	cf 93       	push	r28
    3528:	df 93       	push	r29
    352a:	8c 01       	movw	r16, r24
    352c:	eb 01       	movw	r28, r22
  Wire.beginTransmission(DS3231M_ADDRESS);                                    // Address the I2C device           //
    352e:	68 e6       	ldi	r22, 0x68	; 104
    3530:	89 e7       	ldi	r24, 0x79	; 121
    3532:	9a e0       	ldi	r25, 0x0A	; 10
    3534:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(DS3231M_RTCSEC);                                                 // Start at specified register      //
    3538:	60 e0       	ldi	r22, 0x00	; 0
    353a:	89 e7       	ldi	r24, 0x79	; 121
    353c:	9a e0       	ldi	r25, 0x0A	; 10
    353e:	0e 94 7f 2c 	call	0x58fe	; 0x58fe <_ZN7TwoWire5writeEh>
  _TransmissionStatus = Wire.endTransmission();                               // Close transmission               //
    3542:	89 e7       	ldi	r24, 0x79	; 121
    3544:	9a e0       	ldi	r25, 0x0A	; 10
    3546:	0e 94 51 2d 	call	0x5aa2	; 0x5aa2 <_ZN7TwoWire15endTransmissionEv>
    354a:	88 83       	st	Y, r24
  Wire.requestFrom(DS3231M_ADDRESS, (uint8_t)7);                              // Request 7 bytes of data          //
    354c:	47 e0       	ldi	r20, 0x07	; 7
    354e:	68 e6       	ldi	r22, 0x68	; 104
    3550:	89 e7       	ldi	r24, 0x79	; 121
    3552:	9a e0       	ldi	r25, 0x0A	; 10
    3554:	0e 94 4d 2d 	call	0x5a9a	; 0x5a9a <_ZN7TwoWire11requestFromEhh>
  if(Wire.available()==7) {                                                   // Wait until the data is ready     //
    3558:	89 e7       	ldi	r24, 0x79	; 121
    355a:	9a e0       	ldi	r25, 0x0A	; 10
    355c:	0e 94 f1 2b 	call	0x57e2	; 0x57e2 <_ZN7TwoWire9availableEv>
    3560:	07 97       	sbiw	r24, 0x07	; 7
    3562:	09 f0       	breq	.+2      	; 0x3566 <_ZN13DS3231M_Class3nowEv+0x44>
    3564:	64 c0       	rjmp	.+200    	; 0x362e <_ZN13DS3231M_Class3nowEv+0x10c>
    _ss = bcd2int(Wire.read() & 0x7F);                                        // Mask high bit in seconds         //
    3566:	89 e7       	ldi	r24, 0x79	; 121
    3568:	9a e0       	ldi	r25, 0x0A	; 10
    356a:	0e 94 f9 2b 	call	0x57f2	; 0x57f2 <_ZN7TwoWire4readEv>
    356e:	98 2f       	mov	r25, r24
    3570:	96 95       	lsr	r25
    3572:	96 95       	lsr	r25
    3574:	96 95       	lsr	r25
    3576:	9e 70       	andi	r25, 0x0E	; 14
    3578:	29 2f       	mov	r18, r25
    357a:	22 0f       	add	r18, r18
    357c:	22 0f       	add	r18, r18
    357e:	92 0f       	add	r25, r18
    3580:	8f 70       	andi	r24, 0x0F	; 15
    3582:	89 0f       	add	r24, r25
    3584:	8d 83       	std	Y+5, r24	; 0x05
    _mm = bcd2int(Wire.read() & 0x7F);                                        // Mask high bit in minutes         //
    3586:	89 e7       	ldi	r24, 0x79	; 121
    3588:	9a e0       	ldi	r25, 0x0A	; 10
    358a:	0e 94 f9 2b 	call	0x57f2	; 0x57f2 <_ZN7TwoWire4readEv>
    358e:	98 2f       	mov	r25, r24
    3590:	96 95       	lsr	r25
    3592:	96 95       	lsr	r25
    3594:	96 95       	lsr	r25
    3596:	9e 70       	andi	r25, 0x0E	; 14
    3598:	29 2f       	mov	r18, r25
    359a:	22 0f       	add	r18, r18
    359c:	22 0f       	add	r18, r18
    359e:	92 0f       	add	r25, r18
    35a0:	8f 70       	andi	r24, 0x0F	; 15
    35a2:	89 0f       	add	r24, r25
    35a4:	8e 83       	std	Y+6, r24	; 0x06
    _hh = bcd2int(Wire.read() & 0x7F);                                        // Mask high bit in hours           //
    35a6:	89 e7       	ldi	r24, 0x79	; 121
    35a8:	9a e0       	ldi	r25, 0x0A	; 10
    35aa:	0e 94 f9 2b 	call	0x57f2	; 0x57f2 <_ZN7TwoWire4readEv>
    35ae:	98 2f       	mov	r25, r24
    35b0:	96 95       	lsr	r25
    35b2:	96 95       	lsr	r25
    35b4:	96 95       	lsr	r25
    35b6:	9e 70       	andi	r25, 0x0E	; 14
    35b8:	29 2f       	mov	r18, r25
    35ba:	22 0f       	add	r18, r18
    35bc:	22 0f       	add	r18, r18
    35be:	92 0f       	add	r25, r18
    35c0:	8f 70       	andi	r24, 0x0F	; 15
    35c2:	89 0f       	add	r24, r25
    35c4:	8f 83       	std	Y+7, r24	; 0x07
    Wire.read();                                                              // Ignore Day-Of-Week register      //
    35c6:	89 e7       	ldi	r24, 0x79	; 121
    35c8:	9a e0       	ldi	r25, 0x0A	; 10
    35ca:	0e 94 f9 2b 	call	0x57f2	; 0x57f2 <_ZN7TwoWire4readEv>
    _d = bcd2int(Wire.read()  & 0x3F);                                        // Mask 2 high bits for day of month//
    35ce:	89 e7       	ldi	r24, 0x79	; 121
    35d0:	9a e0       	ldi	r25, 0x0A	; 10
    35d2:	0e 94 f9 2b 	call	0x57f2	; 0x57f2 <_ZN7TwoWire4readEv>
    35d6:	98 2f       	mov	r25, r24
    35d8:	96 95       	lsr	r25
    35da:	96 95       	lsr	r25
    35dc:	96 95       	lsr	r25
    35de:	96 70       	andi	r25, 0x06	; 6
    35e0:	29 2f       	mov	r18, r25
    35e2:	22 0f       	add	r18, r18
    35e4:	22 0f       	add	r18, r18
    35e6:	92 0f       	add	r25, r18
    35e8:	8f 70       	andi	r24, 0x0F	; 15
    35ea:	89 0f       	add	r24, r25
    35ec:	88 87       	std	Y+8, r24	; 0x08
    _m = bcd2int(Wire.read()  & 0x1F);                                        // Mask 3 high bits for Month       //
    35ee:	89 e7       	ldi	r24, 0x79	; 121
    35f0:	9a e0       	ldi	r25, 0x0A	; 10
    35f2:	0e 94 f9 2b 	call	0x57f2	; 0x57f2 <_ZN7TwoWire4readEv>
    35f6:	84 fb       	bst	r24, 4
    35f8:	99 27       	eor	r25, r25
    35fa:	90 f9       	bld	r25, 0
    35fc:	99 0f       	add	r25, r25
    35fe:	29 2f       	mov	r18, r25
    3600:	22 0f       	add	r18, r18
    3602:	22 0f       	add	r18, r18
    3604:	92 0f       	add	r25, r18
    3606:	8f 70       	andi	r24, 0x0F	; 15
    3608:	89 0f       	add	r24, r25
    360a:	89 87       	std	Y+9, r24	; 0x09
    _y = bcd2int(Wire.read()) + 2000;                                         // Add 2000 to internal year        //
    360c:	89 e7       	ldi	r24, 0x79	; 121
    360e:	9a e0       	ldi	r25, 0x0A	; 10
    3610:	0e 94 f9 2b 	call	0x57f2	; 0x57f2 <_ZN7TwoWire4readEv>
    3614:	98 2f       	mov	r25, r24
    3616:	92 95       	swap	r25
    3618:	9f 70       	andi	r25, 0x0F	; 15
    361a:	8f 70       	andi	r24, 0x0F	; 15
    361c:	2a e0       	ldi	r18, 0x0A	; 10
    361e:	92 9f       	mul	r25, r18
    3620:	80 0d       	add	r24, r0
    3622:	11 24       	eor	r1, r1
    3624:	90 e0       	ldi	r25, 0x00	; 0
    3626:	80 53       	subi	r24, 0x30	; 48
    3628:	98 4f       	sbci	r25, 0xF8	; 248
    362a:	9b 87       	std	Y+11, r25	; 0x0b
    362c:	8a 87       	std	Y+10, r24	; 0x0a
  } // of if-then there is data to be read                                    //                                  //
  return DateTime (_y, _m, _d, _hh, _mm, _ss);                                // Return class value               //
    362e:	2d 81       	ldd	r18, Y+5	; 0x05
    3630:	3e 81       	ldd	r19, Y+6	; 0x06
    3632:	4f 81       	ldd	r20, Y+7	; 0x07
    3634:	58 85       	ldd	r21, Y+8	; 0x08
    3636:	69 85       	ldd	r22, Y+9	; 0x09
    3638:	8a 85       	ldd	r24, Y+10	; 0x0a
    363a:	9b 85       	ldd	r25, Y+11	; 0x0b
  } // of for-next each month                                                 //                                  //
  d = days + 1;                                                               //                                  //
} // of method DateTime()                                                     //----------------------------------//
DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour,  //                                  //
                    uint8_t min, uint8_t sec) {                               //                                  //
  if (year >= 2000)                                                           //                                  //
    363c:	80 3d       	cpi	r24, 0xD0	; 208
    363e:	77 e0       	ldi	r23, 0x07	; 7
    3640:	97 07       	cpc	r25, r23
    3642:	10 f0       	brcs	.+4      	; 0x3648 <_ZN13DS3231M_Class3nowEv+0x126>
  year -= 2000;                                                               //                                  //
    3644:	80 5d       	subi	r24, 0xD0	; 208
    3646:	97 40       	sbci	r25, 0x07	; 7
  yOff = year;                                                                //                                  //
    3648:	f8 01       	movw	r30, r16
    364a:	80 83       	st	Z, r24
  m = month;                                                                  //                                  //
    364c:	61 83       	std	Z+1, r22	; 0x01
  d = day;                                                                    //                                  //
    364e:	52 83       	std	Z+2, r21	; 0x02
  hh = hour;                                                                  //                                  //
    3650:	43 83       	std	Z+3, r20	; 0x03
  mm = min;                                                                   //                                  //
    3652:	34 83       	std	Z+4, r19	; 0x04
  ss = sec;                                                                   //                                  //
    3654:	25 83       	std	Z+5, r18	; 0x05
    _d = bcd2int(Wire.read()  & 0x3F);                                        // Mask 2 high bits for day of month//
    _m = bcd2int(Wire.read()  & 0x1F);                                        // Mask 3 high bits for Month       //
    _y = bcd2int(Wire.read()) + 2000;                                         // Add 2000 to internal year        //
  } // of if-then there is data to be read                                    //                                  //
  return DateTime (_y, _m, _d, _hh, _mm, _ss);                                // Return class value               //
} // of method now                                                            //                                  //
    3656:	c8 01       	movw	r24, r16
    3658:	df 91       	pop	r29
    365a:	cf 91       	pop	r28
    365c:	1f 91       	pop	r17
    365e:	0f 91       	pop	r16
    3660:	08 95       	ret

00003662 <_ZN13DS3231M_Class6adjustERK8DateTime>:
** oscillator is stopped during the process and needs to be restarted upon completion.                            **
*******************************************************************************************************************/
void DS3231M_Class::adjust() {                                                // Set the RTC date and Time        //
  adjust(DateTime(F(__DATE__), F(__TIME__)));                                 // Set to compile time              //
} // of method adjust                                                         /-----------------------------------//
void DS3231M_Class::adjust(const DateTime& dt) {                              // Set the RTC date and Time        //
    3662:	df 92       	push	r13
    3664:	ef 92       	push	r14
    3666:	ff 92       	push	r15
    3668:	0f 93       	push	r16
    366a:	1f 93       	push	r17
    366c:	cf 93       	push	r28
    366e:	df 93       	push	r29
    3670:	00 d0       	rcall	.+0      	; 0x3672 <_ZN13DS3231M_Class6adjustERK8DateTime+0x10>
    3672:	00 d0       	rcall	.+0      	; 0x3674 <_ZN13DS3231M_Class6adjustERK8DateTime+0x12>
    3674:	00 d0       	rcall	.+0      	; 0x3676 <_ZN13DS3231M_Class6adjustERK8DateTime+0x14>
    3676:	cd b7       	in	r28, 0x3d	; 61
    3678:	de b7       	in	r29, 0x3e	; 62
    367a:	8c 01       	movw	r16, r24
    367c:	7b 01       	movw	r14, r22
    367e:	fb 01       	movw	r30, r22
    3680:	85 81       	ldd	r24, Z+5	; 0x05
  writeByte(DS3231M_RTCSEC,int2bcd(dt.second()));                             // Write seconds, keep device off   //
    3682:	9a e0       	ldi	r25, 0x0A	; 10
    3684:	d9 2e       	mov	r13, r25
    3686:	6d 2d       	mov	r22, r13
    3688:	0e 94 3d 36 	call	0x6c7a	; 0x6c7a <__udivmodqi4>
    368c:	49 2f       	mov	r20, r25
    368e:	f0 e1       	ldi	r31, 0x10	; 16
    3690:	8f 9f       	mul	r24, r31
    3692:	40 0d       	add	r20, r0
    3694:	11 24       	eor	r1, r1
    3696:	60 e0       	ldi	r22, 0x00	; 0
    3698:	c8 01       	movw	r24, r16
    369a:	d1 de       	rcall	.-606    	; 0x343e <_ZN13DS3231M_Class9writeByteEhh>
    369c:	f7 01       	movw	r30, r14
    369e:	84 81       	ldd	r24, Z+4	; 0x04
  writeByte(DS3231M_RTCMIN,int2bcd(dt.minute()));                             // Write the minutes value          //
    36a0:	6d 2d       	mov	r22, r13
    36a2:	0e 94 3d 36 	call	0x6c7a	; 0x6c7a <__udivmodqi4>
    36a6:	49 2f       	mov	r20, r25
    36a8:	f0 e1       	ldi	r31, 0x10	; 16
    36aa:	8f 9f       	mul	r24, r31
    36ac:	40 0d       	add	r20, r0
    36ae:	11 24       	eor	r1, r1
    36b0:	61 e0       	ldi	r22, 0x01	; 1
    36b2:	c8 01       	movw	r24, r16
    36b4:	c4 de       	rcall	.-632    	; 0x343e <_ZN13DS3231M_Class9writeByteEhh>
    36b6:	f7 01       	movw	r30, r14
    36b8:	83 81       	ldd	r24, Z+3	; 0x03
  writeByte(DS3231M_RTCHOUR,int2bcd(dt.hour()));                              // Also re-sets the 24Hour clock on //
    36ba:	6d 2d       	mov	r22, r13
    36bc:	0e 94 3d 36 	call	0x6c7a	; 0x6c7a <__udivmodqi4>
    36c0:	49 2f       	mov	r20, r25
    36c2:	f0 e1       	ldi	r31, 0x10	; 16
    36c4:	8f 9f       	mul	r24, r31
    36c6:	40 0d       	add	r20, r0
    36c8:	11 24       	eor	r1, r1
    36ca:	62 e0       	ldi	r22, 0x02	; 2
    36cc:	c8 01       	movw	r24, r16
  writeByte(DS3231M_RTCWKDAY,dt.dayOfTheWeek());                              // Update the weekday               //
    36ce:	b7 de       	rcall	.-658    	; 0x343e <_ZN13DS3231M_Class9writeByteEhh>
    36d0:	c7 01       	movw	r24, r14
    36d2:	2f de       	rcall	.-930    	; 0x3332 <_ZNK8DateTime12dayOfTheWeekEv>
    36d4:	48 2f       	mov	r20, r24
    36d6:	63 e0       	ldi	r22, 0x03	; 3
    36d8:	c8 01       	movw	r24, r16
    36da:	b1 de       	rcall	.-670    	; 0x343e <_ZN13DS3231M_Class9writeByteEhh>
    36dc:	f7 01       	movw	r30, r14
    36de:	82 81       	ldd	r24, Z+2	; 0x02
  writeByte(DS3231M_RTCDATE,int2bcd(dt.day()));                               // Write the day of month           //
    36e0:	6d 2d       	mov	r22, r13
    36e2:	0e 94 3d 36 	call	0x6c7a	; 0x6c7a <__udivmodqi4>
    36e6:	49 2f       	mov	r20, r25
    36e8:	f0 e1       	ldi	r31, 0x10	; 16
    36ea:	8f 9f       	mul	r24, r31
    36ec:	40 0d       	add	r20, r0
    36ee:	11 24       	eor	r1, r1
    36f0:	64 e0       	ldi	r22, 0x04	; 4
    36f2:	c8 01       	movw	r24, r16
    36f4:	a4 de       	rcall	.-696    	; 0x343e <_ZN13DS3231M_Class9writeByteEhh>
    36f6:	f7 01       	movw	r30, r14
    36f8:	81 81       	ldd	r24, Z+1	; 0x01
  writeByte(DS3231M_RTCMTH,int2bcd(dt.month()));                              // Month, ignore century bit        //
    36fa:	6d 2d       	mov	r22, r13
    36fc:	0e 94 3d 36 	call	0x6c7a	; 0x6c7a <__udivmodqi4>
    3700:	49 2f       	mov	r20, r25
    3702:	f0 e1       	ldi	r31, 0x10	; 16
    3704:	8f 9f       	mul	r24, r31
    3706:	40 0d       	add	r20, r0
    3708:	11 24       	eor	r1, r1
    370a:	65 e0       	ldi	r22, 0x05	; 5
    370c:	c8 01       	movw	r24, r16
    370e:	97 de       	rcall	.-722    	; 0x343e <_ZN13DS3231M_Class9writeByteEhh>
  writeByte(DS3231M_RTCYEAR,int2bcd(dt.year()-2000));                         // Write the year                   //
    3710:	f7 01       	movw	r30, r14
    3712:	80 81       	ld	r24, Z
    3714:	6d 2d       	mov	r22, r13
    3716:	0e 94 3d 36 	call	0x6c7a	; 0x6c7a <__udivmodqi4>
    371a:	49 2f       	mov	r20, r25
    371c:	f0 e1       	ldi	r31, 0x10	; 16
    371e:	8f 9f       	mul	r24, r31
    3720:	40 0d       	add	r20, r0
    3722:	11 24       	eor	r1, r1
    3724:	66 e0       	ldi	r22, 0x06	; 6
    3726:	c8 01       	movw	r24, r16
  writeByte(DS3231M_STATUS,readByte(DS3231M_STATUS)&B01111111);               // Unset OSC flag bit if set        //
    3728:	8a de       	rcall	.-748    	; 0x343e <_ZN13DS3231M_Class9writeByteEhh>
    372a:	6f e0       	ldi	r22, 0x0F	; 15
    372c:	c8 01       	movw	r24, r16
    372e:	a7 de       	rcall	.-690    	; 0x347e <_ZN13DS3231M_Class8readByteEh>
    3730:	48 2f       	mov	r20, r24
    3732:	4f 77       	andi	r20, 0x7F	; 127
    3734:	6f e0       	ldi	r22, 0x0F	; 15
    3736:	c8 01       	movw	r24, r16
  writeByte(DS3231M_CONTROL,readByte(DS3231M_CONTROL)&B01111111);             // Unset EOSC flag bit if set       //
    3738:	82 de       	rcall	.-764    	; 0x343e <_ZN13DS3231M_Class9writeByteEhh>
    373a:	6e e0       	ldi	r22, 0x0E	; 14
    373c:	c8 01       	movw	r24, r16
    373e:	9f de       	rcall	.-706    	; 0x347e <_ZN13DS3231M_Class8readByteEh>
    3740:	48 2f       	mov	r20, r24
    3742:	4f 77       	andi	r20, 0x7F	; 127
    3744:	6e e0       	ldi	r22, 0x0E	; 14
    3746:	c8 01       	movw	r24, r16
  _SetUnixTime = now().unixtime();                                            // Store time of last change        //
    3748:	7a de       	rcall	.-780    	; 0x343e <_ZN13DS3231M_Class9writeByteEhh>
    374a:	b8 01       	movw	r22, r16
    374c:	ce 01       	movw	r24, r28
    374e:	01 96       	adiw	r24, 0x01	; 1
    3750:	e8 de       	rcall	.-560    	; 0x3522 <_ZN13DS3231M_Class3nowEv>
    3752:	ce 01       	movw	r24, r28
    3754:	01 96       	adiw	r24, 0x01	; 1
    3756:	f9 dd       	rcall	.-1038   	; 0x334a <_ZNK8DateTime8unixtimeEv>
    3758:	f8 01       	movw	r30, r16
    375a:	61 83       	std	Z+1, r22	; 0x01
    375c:	72 83       	std	Z+2, r23	; 0x02
    375e:	83 83       	std	Z+3, r24	; 0x03
    3760:	94 83       	std	Z+4, r25	; 0x04
    3762:	26 96       	adiw	r28, 0x06	; 6
} // of method adjust                                                         //                                  //
    3764:	0f b6       	in	r0, 0x3f	; 63
    3766:	f8 94       	cli
    3768:	de bf       	out	0x3e, r29	; 62
    376a:	0f be       	out	0x3f, r0	; 63
    376c:	cd bf       	out	0x3d, r28	; 61
    376e:	df 91       	pop	r29
    3770:	cf 91       	pop	r28
    3772:	1f 91       	pop	r17
    3774:	0f 91       	pop	r16
    3776:	ff 90       	pop	r15
    3778:	ef 90       	pop	r14
    377a:	df 90       	pop	r13
    377c:	08 95       	ret

0000377e <_ZN13DS3231M_Class6adjustEv>:
    377e:	0f 93       	push	r16
/*******************************************************************************************************************
** Method adjust set the current date/time. This is an overloaded function, if called with no parameters then the **
** RTC is set to the date/time when the program was compiled and uploaded. Otherwise the values are set, but the  **
** oscillator is stopped during the process and needs to be restarted upon completion.                            **
*******************************************************************************************************************/
void DS3231M_Class::adjust() {                                                // Set the RTC date and Time        //
    3780:	1f 93       	push	r17
    3782:	cf 93       	push	r28
    3784:	df 93       	push	r29
    3786:	00 d0       	rcall	.+0      	; 0x3788 <_ZN13DS3231M_Class6adjustEv+0xa>
    3788:	00 d0       	rcall	.+0      	; 0x378a <_ZN13DS3231M_Class6adjustEv+0xc>
    378a:	00 d0       	rcall	.+0      	; 0x378c <_ZN13DS3231M_Class6adjustEv+0xe>
    378c:	cd b7       	in	r28, 0x3d	; 61
    378e:	de b7       	in	r29, 0x3e	; 62
    3790:	8c 01       	movw	r16, r24
  adjust(DateTime(F(__DATE__), F(__TIME__)));                                 // Set to compile time              //
    3792:	4d e1       	ldi	r20, 0x1D	; 29
    3794:	52 e0       	ldi	r21, 0x02	; 2
    3796:	61 e1       	ldi	r22, 0x11	; 17
    3798:	72 e0       	ldi	r23, 0x02	; 2
    379a:	ce 01       	movw	r24, r28
    379c:	01 96       	adiw	r24, 0x01	; 1
    379e:	54 dd       	rcall	.-1368   	; 0x3248 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>
    37a0:	be 01       	movw	r22, r28
    37a2:	6f 5f       	subi	r22, 0xFF	; 255
    37a4:	7f 4f       	sbci	r23, 0xFF	; 255
    37a6:	c8 01       	movw	r24, r16
    37a8:	5c df       	rcall	.-328    	; 0x3662 <_ZN13DS3231M_Class6adjustERK8DateTime>
} // of method adjust                                                         /-----------------------------------//
    37aa:	26 96       	adiw	r28, 0x06	; 6
    37ac:	0f b6       	in	r0, 0x3f	; 63
    37ae:	f8 94       	cli
    37b0:	de bf       	out	0x3e, r29	; 62
    37b2:	0f be       	out	0x3f, r0	; 63
    37b4:	cd bf       	out	0x3d, r28	; 61
    37b6:	df 91       	pop	r29
    37b8:	cf 91       	pop	r28
    37ba:	1f 91       	pop	r17
    37bc:	0f 91       	pop	r16
    37be:	08 95       	ret

000037c0 <_GLOBAL__sub_I__ZN9DhcpClass13beginWithDHCPEPhmm>:
    unsigned long m = n;
    n /= 16;
    char c = m - 16 * n;
    *str-- = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);
}
    37c0:	0f 93       	push	r16
    37c2:	00 e0       	ldi	r16, 0x00	; 0
    37c4:	20 e0       	ldi	r18, 0x00	; 0
    37c6:	40 e0       	ldi	r20, 0x00	; 0
    37c8:	60 e0       	ldi	r22, 0x00	; 0
    37ca:	80 ec       	ldi	r24, 0xC0	; 192
    37cc:	99 e0       	ldi	r25, 0x09	; 9
    37ce:	0e 94 4c 2f 	call	0x5e98	; 0x5e98 <_ZN9IPAddressC1Ehhhh>
    37d2:	0f 91       	pop	r16
    37d4:	08 95       	ret

000037d6 <_ZN9DNSClient5beginERK9IPAddress>:
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    37d6:	fb 01       	movw	r30, r22
    37d8:	42 81       	ldd	r20, Z+2	; 0x02
    37da:	53 81       	ldd	r21, Z+3	; 0x03
    37dc:	64 81       	ldd	r22, Z+4	; 0x04
    37de:	75 81       	ldd	r23, Z+5	; 0x05
    37e0:	fc 01       	movw	r30, r24
    37e2:	42 83       	std	Z+2, r20	; 0x02
    37e4:	53 83       	std	Z+3, r21	; 0x03
    37e6:	64 83       	std	Z+4, r22	; 0x04
    37e8:	75 83       	std	Z+5, r23	; 0x05
#define INVALID_RESPONSE -4

void DNSClient::begin(const IPAddress& aDNSServer)
{
    iDNSServer = aDNSServer;
    iRequestId = 0;
    37ea:	17 82       	std	Z+7, r1	; 0x07
    37ec:	16 82       	std	Z+6, r1	; 0x06
    37ee:	08 95       	ret

000037f0 <_ZN9DNSClient9inet_atonEPKcR9IPAddress>:
}


int DNSClient::inet_aton(const char* aIPAddrString, IPAddress& aResult)
{
    37f0:	cf 93       	push	r28
    37f2:	df 93       	push	r29
    37f4:	da 01       	movw	r26, r20
    37f6:	fb 01       	movw	r30, r22
    37f8:	eb 01       	movw	r28, r22
    // See if we've been given a valid IP address
    const char* p =aIPAddrString;
    while (*p &&
    37fa:	89 91       	ld	r24, Y+
    37fc:	81 11       	cpse	r24, r1
    37fe:	fd cf       	rjmp	.-6      	; 0x37fa <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0xa>
    3800:	80 e0       	ldi	r24, 0x00	; 0
    3802:	90 e0       	ldi	r25, 0x00	; 0
    3804:	20 e0       	ldi	r18, 0x00	; 0
    3806:	30 e0       	ldi	r19, 0x00	; 0
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
    3808:	4a e0       	ldi	r20, 0x0A	; 10
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
        int segmentValue =0;
        while (*p && (segment < 4))
    380a:	51 91       	ld	r21, Z+
    380c:	55 23       	and	r21, r21
    380e:	e9 f0       	breq	.+58     	; 0x384a <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x5a>
    3810:	24 30       	cpi	r18, 0x04	; 4
    3812:	31 05       	cpc	r19, r1
    3814:	44 f5       	brge	.+80     	; 0x3866 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
        {
            if (*p == '.')
    3816:	5e 32       	cpi	r21, 0x2E	; 46
    3818:	69 f4       	brne	.+26     	; 0x3834 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x44>
            {
                // We've reached the end of a segment
                if (segmentValue > 255)
    381a:	8f 3f       	cpi	r24, 0xFF	; 255
    381c:	91 05       	cpc	r25, r1
    381e:	09 f0       	breq	.+2      	; 0x3822 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x32>
    3820:	14 f5       	brge	.+68     	; 0x3866 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
                    // You can't have IP address segments that don't fit in a byte
                    return 0;
                }
                else
                {
                    aResult[segment] = (byte)segmentValue;
    3822:	ed 01       	movw	r28, r26
    3824:	c2 0f       	add	r28, r18
    3826:	d3 1f       	adc	r29, r19
    3828:	8a 83       	std	Y+2, r24	; 0x02
                    segment++;
    382a:	2f 5f       	subi	r18, 0xFF	; 255
    382c:	3f 4f       	sbci	r19, 0xFF	; 255
                    segmentValue = 0;
    382e:	80 e0       	ldi	r24, 0x00	; 0
    3830:	90 e0       	ldi	r25, 0x00	; 0
    3832:	eb cf       	rjmp	.-42     	; 0x380a <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x1a>
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
    3834:	48 9f       	mul	r20, r24
    3836:	b0 01       	movw	r22, r0
    3838:	49 9f       	mul	r20, r25
    383a:	70 0d       	add	r23, r0
    383c:	11 24       	eor	r1, r1
    383e:	85 2f       	mov	r24, r21
    3840:	90 e0       	ldi	r25, 0x00	; 0
    3842:	c0 97       	sbiw	r24, 0x30	; 48
    3844:	86 0f       	add	r24, r22
    3846:	97 1f       	adc	r25, r23
    3848:	e0 cf       	rjmp	.-64     	; 0x380a <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x1a>
            }
            p++;
        }
        // We've reached the end of address, but there'll still be the last
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
    384a:	8f 3f       	cpi	r24, 0xFF	; 255
    384c:	91 05       	cpc	r25, r1
    384e:	09 f0       	breq	.+2      	; 0x3852 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x62>
    3850:	54 f4       	brge	.+20     	; 0x3866 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
    3852:	24 30       	cpi	r18, 0x04	; 4
    3854:	31 05       	cpc	r19, r1
    3856:	3c f4       	brge	.+14     	; 0x3866 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
            // or more than four segments
            return 0;
        }
        else
        {
            aResult[segment] = (byte)segmentValue;
    3858:	fd 01       	movw	r30, r26
    385a:	e2 0f       	add	r30, r18
    385c:	f3 1f       	adc	r31, r19
    385e:	82 83       	std	Z+2, r24	; 0x02
            return 1;
    3860:	81 e0       	ldi	r24, 0x01	; 1
    3862:	90 e0       	ldi	r25, 0x00	; 0
    3864:	02 c0       	rjmp	.+4      	; 0x386a <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x7a>
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
        {
            // You can't have IP address segments that don't fit in a byte,
            // or more than four segments
            return 0;
    3866:	80 e0       	ldi	r24, 0x00	; 0
    3868:	90 e0       	ldi	r25, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    386a:	df 91       	pop	r29
    386c:	cf 91       	pop	r28
    386e:	08 95       	ret

00003870 <_GLOBAL__sub_I__ZN9DNSClient5beginERK9IPAddress>:
    // Mark the entire packet as read
    iUdp.flush();

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
}
    3870:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    3872:	00 e0       	ldi	r16, 0x00	; 0
    3874:	20 e0       	ldi	r18, 0x00	; 0
    3876:	40 e0       	ldi	r20, 0x00	; 0
    3878:	60 e0       	ldi	r22, 0x00	; 0
    387a:	86 ec       	ldi	r24, 0xC6	; 198
    387c:	99 e0       	ldi	r25, 0x09	; 9
    387e:	0e 94 4c 2f 	call	0x5e98	; 0x5e98 <_ZN9IPAddressC1Ehhhh>
    3882:	0f 91       	pop	r16
    3884:	08 95       	ret

00003886 <_ZN9DNSClient12BuildRequestEPKc>:

    return ret;
}

uint16_t DNSClient::BuildRequest(const char* aName)
{
    3886:	8f 92       	push	r8
    3888:	9f 92       	push	r9
    388a:	af 92       	push	r10
    388c:	bf 92       	push	r11
    388e:	cf 92       	push	r12
    3890:	df 92       	push	r13
    3892:	ef 92       	push	r14
    3894:	ff 92       	push	r15
    3896:	0f 93       	push	r16
    3898:	1f 93       	push	r17
    389a:	cf 93       	push	r28
    389c:	df 93       	push	r29
    389e:	00 d0       	rcall	.+0      	; 0x38a0 <_ZN9DNSClient12BuildRequestEPKc+0x1a>
    38a0:	1f 92       	push	r1
    38a2:	cd b7       	in	r28, 0x3d	; 61
    38a4:	de b7       	in	r29, 0x3e	; 62
    38a6:	6c 01       	movw	r12, r24
    38a8:	7b 01       	movw	r14, r22
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    //    |                    ARCOUNT                    |
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    // As we only support one request at a time at present, we can simplify
    // some of this header
    iRequestId = millis(); // generate a random ID
    38aa:	0e 94 cd 30 	call	0x619a	; 0x619a <millis>
    38ae:	f6 01       	movw	r30, r12
    38b0:	77 83       	std	Z+7, r23	; 0x07
    38b2:	66 83       	std	Z+6, r22	; 0x06
    uint16_t twoByteBuffer;

    // FIXME We should also check that there's enough space available to write to, rather
    // FIXME than assume there's enough space (as the code does at present)
    iUdp.write((uint8_t*)&iRequestId, sizeof(iRequestId));
    38b4:	86 01       	movw	r16, r12
    38b6:	08 5f       	subi	r16, 0xF8	; 248
    38b8:	1f 4f       	sbci	r17, 0xFF	; 255
    38ba:	b6 01       	movw	r22, r12
    38bc:	6a 5f       	subi	r22, 0xFA	; 250
    38be:	7f 4f       	sbci	r23, 0xFF	; 255
    38c0:	42 e0       	ldi	r20, 0x02	; 2
    38c2:	50 e0       	ldi	r21, 0x00	; 0
    38c4:	c8 01       	movw	r24, r16
    38c6:	30 d5       	rcall	.+2656   	; 0x4328 <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = htons(QUERY_FLAG | OPCODE_STANDARD_QUERY | RECURSION_DESIRED_FLAG);
    38c8:	81 e0       	ldi	r24, 0x01	; 1
    38ca:	90 e0       	ldi	r25, 0x00	; 0
    38cc:	9a 83       	std	Y+2, r25	; 0x02
    38ce:	89 83       	std	Y+1, r24	; 0x01
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    38d0:	42 e0       	ldi	r20, 0x02	; 2
    38d2:	50 e0       	ldi	r21, 0x00	; 0
    38d4:	be 01       	movw	r22, r28
    38d6:	6f 5f       	subi	r22, 0xFF	; 255
    38d8:	7f 4f       	sbci	r23, 0xFF	; 255
    38da:	c8 01       	movw	r24, r16
    38dc:	25 d5       	rcall	.+2634   	; 0x4328 <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = htons(1);  // One question record
    38de:	80 e0       	ldi	r24, 0x00	; 0
    38e0:	91 e0       	ldi	r25, 0x01	; 1
    38e2:	9a 83       	std	Y+2, r25	; 0x02
    38e4:	89 83       	std	Y+1, r24	; 0x01
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    38e6:	42 e0       	ldi	r20, 0x02	; 2
    38e8:	50 e0       	ldi	r21, 0x00	; 0
    38ea:	be 01       	movw	r22, r28
    38ec:	6f 5f       	subi	r22, 0xFF	; 255
    38ee:	7f 4f       	sbci	r23, 0xFF	; 255
    38f0:	c8 01       	movw	r24, r16
    38f2:	1a d5       	rcall	.+2612   	; 0x4328 <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = 0;  // Zero answer records
    38f4:	1a 82       	std	Y+2, r1	; 0x02
    38f6:	19 82       	std	Y+1, r1	; 0x01
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    38f8:	42 e0       	ldi	r20, 0x02	; 2
    38fa:	50 e0       	ldi	r21, 0x00	; 0
    38fc:	be 01       	movw	r22, r28
    38fe:	6f 5f       	subi	r22, 0xFF	; 255
    3900:	7f 4f       	sbci	r23, 0xFF	; 255
    3902:	c8 01       	movw	r24, r16
    3904:	11 d5       	rcall	.+2594   	; 0x4328 <_ZN11EthernetUDP5writeEPKhj>

    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    3906:	42 e0       	ldi	r20, 0x02	; 2
    3908:	50 e0       	ldi	r21, 0x00	; 0
    390a:	be 01       	movw	r22, r28
    390c:	6f 5f       	subi	r22, 0xFF	; 255
    390e:	7f 4f       	sbci	r23, 0xFF	; 255
    3910:	c8 01       	movw	r24, r16
    3912:	0a d5       	rcall	.+2580   	; 0x4328 <_ZN11EthernetUDP5writeEPKhj>
    // and zero additional records
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    3914:	42 e0       	ldi	r20, 0x02	; 2
    3916:	50 e0       	ldi	r21, 0x00	; 0
    3918:	be 01       	movw	r22, r28
    391a:	6f 5f       	subi	r22, 0xFF	; 255
    391c:	7f 4f       	sbci	r23, 0xFF	; 255
    391e:	c8 01       	movw	r24, r16
    3920:	03 d5       	rcall	.+2566   	; 0x4328 <_ZN11EthernetUDP5writeEPKhj>

    // Build question
    const char* start =aName;
    const char* end =start;
    3922:	57 01       	movw	r10, r14
    uint8_t len;
    // Run through the name being requested
    while (*end)
    3924:	f5 01       	movw	r30, r10
    3926:	80 81       	ld	r24, Z
    3928:	88 23       	and	r24, r24
    392a:	f9 f0       	breq	.+62     	; 0x396a <_ZN9DNSClient12BuildRequestEPKc+0xe4>
    392c:	a7 01       	movw	r20, r14
    392e:	5a 01       	movw	r10, r20
    {
        // Find out how long this section of the name is
        end = start;
        while (*end && (*end != '.') )
    3930:	f5 01       	movw	r30, r10
    3932:	81 91       	ld	r24, Z+
    3934:	6f 01       	movw	r12, r30
    3936:	88 23       	and	r24, r24
    3938:	21 f0       	breq	.+8      	; 0x3942 <_ZN9DNSClient12BuildRequestEPKc+0xbc>
    393a:	8e 32       	cpi	r24, 0x2E	; 46
    393c:	11 f0       	breq	.+4      	; 0x3942 <_ZN9DNSClient12BuildRequestEPKc+0xbc>
    393e:	a6 01       	movw	r20, r12
    3940:	f6 cf       	rjmp	.-20     	; 0x392e <_ZN9DNSClient12BuildRequestEPKc+0xa8>
        {
            end++;
        }

        if (end-start > 0)
    3942:	4a 01       	movw	r8, r20
    3944:	8e 18       	sub	r8, r14
    3946:	9f 08       	sbc	r9, r15
    3948:	18 14       	cp	r1, r8
    394a:	19 04       	cpc	r1, r9
    394c:	64 f4       	brge	.+24     	; 0x3966 <_ZN9DNSClient12BuildRequestEPKc+0xe0>
        {
            // Write out the size of this section
            len = end-start;
    394e:	8b 82       	std	Y+3, r8	; 0x03
            iUdp.write(&len, sizeof(len));
    3950:	41 e0       	ldi	r20, 0x01	; 1
    3952:	50 e0       	ldi	r21, 0x00	; 0
    3954:	be 01       	movw	r22, r28
    3956:	6d 5f       	subi	r22, 0xFD	; 253
    3958:	7f 4f       	sbci	r23, 0xFF	; 255
    395a:	c8 01       	movw	r24, r16
            // And then write out the section
            iUdp.write((uint8_t*)start, end-start);
    395c:	e5 d4       	rcall	.+2506   	; 0x4328 <_ZN11EthernetUDP5writeEPKhj>
    395e:	a4 01       	movw	r20, r8
    3960:	b7 01       	movw	r22, r14
    3962:	c8 01       	movw	r24, r16
    3964:	e1 d4       	rcall	.+2498   	; 0x4328 <_ZN11EthernetUDP5writeEPKhj>
        }
        start = end+1;
    3966:	76 01       	movw	r14, r12
    }

    // We've got to the end of the question name, so
    // terminate it with a zero-length section
    len = 0;
    3968:	dd cf       	rjmp	.-70     	; 0x3924 <_ZN9DNSClient12BuildRequestEPKc+0x9e>
    iUdp.write(&len, sizeof(len));
    396a:	1b 82       	std	Y+3, r1	; 0x03
    396c:	41 e0       	ldi	r20, 0x01	; 1
    396e:	50 e0       	ldi	r21, 0x00	; 0
    3970:	be 01       	movw	r22, r28
    3972:	6d 5f       	subi	r22, 0xFD	; 253
    3974:	7f 4f       	sbci	r23, 0xFF	; 255
    3976:	c8 01       	movw	r24, r16
    3978:	d7 d4       	rcall	.+2478   	; 0x4328 <_ZN11EthernetUDP5writeEPKhj>
    // Finally the type and class of question
    twoByteBuffer = htons(TYPE_A);
    397a:	e1 2c       	mov	r14, r1
    397c:	ff 24       	eor	r15, r15
    397e:	f3 94       	inc	r15
    3980:	fa 82       	std	Y+2, r15	; 0x02
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    3982:	e9 82       	std	Y+1, r14	; 0x01
    3984:	42 e0       	ldi	r20, 0x02	; 2
    3986:	50 e0       	ldi	r21, 0x00	; 0
    3988:	be 01       	movw	r22, r28
    398a:	6f 5f       	subi	r22, 0xFF	; 255
    398c:	7f 4f       	sbci	r23, 0xFF	; 255
    398e:	c8 01       	movw	r24, r16

    twoByteBuffer = htons(CLASS_IN);  // Internet class of question
    3990:	cb d4       	rcall	.+2454   	; 0x4328 <_ZN11EthernetUDP5writeEPKhj>
    3992:	fa 82       	std	Y+2, r15	; 0x02
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    3994:	e9 82       	std	Y+1, r14	; 0x01
    3996:	42 e0       	ldi	r20, 0x02	; 2
    3998:	50 e0       	ldi	r21, 0x00	; 0
    399a:	be 01       	movw	r22, r28
    399c:	6f 5f       	subi	r22, 0xFF	; 255
    399e:	7f 4f       	sbci	r23, 0xFF	; 255
    39a0:	c8 01       	movw	r24, r16
    39a2:	c2 d4       	rcall	.+2436   	; 0x4328 <_ZN11EthernetUDP5writeEPKhj>
    // Success!  Everything buffered okay
    return 1;
}
    39a4:	81 e0       	ldi	r24, 0x01	; 1
    39a6:	90 e0       	ldi	r25, 0x00	; 0
    39a8:	0f 90       	pop	r0
    39aa:	0f 90       	pop	r0
    39ac:	0f 90       	pop	r0
    39ae:	df 91       	pop	r29
    39b0:	cf 91       	pop	r28
    39b2:	1f 91       	pop	r17
    39b4:	0f 91       	pop	r16
    39b6:	ff 90       	pop	r15
    39b8:	ef 90       	pop	r14
    39ba:	df 90       	pop	r13
    39bc:	cf 90       	pop	r12
    39be:	bf 90       	pop	r11
    39c0:	af 90       	pop	r10
    39c2:	9f 90       	pop	r9
    39c4:	8f 90       	pop	r8
    39c6:	08 95       	ret

000039c8 <_ZN9DNSClient15ProcessResponseEjR9IPAddress>:


uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    39c8:	2f 92       	push	r2
    39ca:	3f 92       	push	r3
    39cc:	4f 92       	push	r4
    39ce:	5f 92       	push	r5
    39d0:	6f 92       	push	r6
    39d2:	7f 92       	push	r7
    39d4:	8f 92       	push	r8
    39d6:	9f 92       	push	r9
    39d8:	af 92       	push	r10
    39da:	bf 92       	push	r11
    39dc:	cf 92       	push	r12
    39de:	df 92       	push	r13
    39e0:	ef 92       	push	r14
    39e2:	ff 92       	push	r15
    39e4:	0f 93       	push	r16
    39e6:	1f 93       	push	r17
    39e8:	cf 93       	push	r28
    39ea:	df 93       	push	r29
    39ec:	cd b7       	in	r28, 0x3d	; 61
    39ee:	de b7       	in	r29, 0x3e	; 62
    39f0:	63 97       	sbiw	r28, 0x13	; 19
    39f2:	0f b6       	in	r0, 0x3f	; 63
    39f4:	f8 94       	cli
    39f6:	de bf       	out	0x3e, r29	; 62
    39f8:	0f be       	out	0x3f, r0	; 63
    39fa:	cd bf       	out	0x3d, r28	; 61
    39fc:	7c 01       	movw	r14, r24
    39fe:	6b 01       	movw	r12, r22
    3a00:	1a 01       	movw	r2, r20
    uint32_t startTime = millis();
    3a02:	0e 94 cd 30 	call	0x619a	; 0x619a <millis>
    3a06:	4b 01       	movw	r8, r22
    3a08:	5c 01       	movw	r10, r24

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    3a0a:	87 01       	movw	r16, r14
    3a0c:	08 5f       	subi	r16, 0xF8	; 248
    3a0e:	1f 4f       	sbci	r17, 0xFF	; 255
    {
        if((millis() - startTime) > aTimeout)
    3a10:	26 01       	movw	r4, r12
    3a12:	61 2c       	mov	r6, r1
    3a14:	71 2c       	mov	r7, r1
uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    3a16:	c8 01       	movw	r24, r16
    3a18:	29 d5       	rcall	.+2642   	; 0x446c <_ZN11EthernetUDP11parsePacketEv>
    3a1a:	18 16       	cp	r1, r24
    3a1c:	19 06       	cpc	r1, r25
    3a1e:	a4 f0       	brlt	.+40     	; 0x3a48 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x80>
    {
        if((millis() - startTime) > aTimeout)
    3a20:	0e 94 cd 30 	call	0x619a	; 0x619a <millis>
    3a24:	dc 01       	movw	r26, r24
    3a26:	cb 01       	movw	r24, r22
    3a28:	88 19       	sub	r24, r8
    3a2a:	99 09       	sbc	r25, r9
    3a2c:	aa 09       	sbc	r26, r10
    3a2e:	bb 09       	sbc	r27, r11
    3a30:	48 16       	cp	r4, r24
    3a32:	59 06       	cpc	r5, r25
    3a34:	6a 06       	cpc	r6, r26
    3a36:	7b 06       	cpc	r7, r27
    3a38:	d0 f0       	brcs	.+52     	; 0x3a6e <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xa6>
            return TIMED_OUT;
        delay(50);
    3a3a:	62 e3       	ldi	r22, 0x32	; 50
    3a3c:	70 e0       	ldi	r23, 0x00	; 0
    3a3e:	80 e0       	ldi	r24, 0x00	; 0
    3a40:	90 e0       	ldi	r25, 0x00	; 0
    3a42:	0e 94 fe 30 	call	0x61fc	; 0x61fc <delay>
uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    3a46:	e7 cf       	rjmp	.-50     	; 0x3a16 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x4e>

    // We've had a reply!
    // Read the UDP header
    uint8_t header[DNS_HEADER_SIZE]; // Enough space to reuse for the DNS header
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
    3a48:	f7 01       	movw	r30, r14
    3a4a:	42 81       	ldd	r20, Z+2	; 0x02
    3a4c:	53 81       	ldd	r21, Z+3	; 0x03
    3a4e:	64 81       	ldd	r22, Z+4	; 0x04
    3a50:	75 81       	ldd	r23, Z+5	; 0x05
    3a52:	81 8d       	ldd	r24, Z+25	; 0x19
    3a54:	92 8d       	ldd	r25, Z+26	; 0x1a
    3a56:	a3 8d       	ldd	r26, Z+27	; 0x1b
    3a58:	b4 8d       	ldd	r27, Z+28	; 0x1c
    3a5a:	48 17       	cp	r20, r24
    3a5c:	59 07       	cpc	r21, r25
    3a5e:	6a 07       	cpc	r22, r26
    3a60:	7b 07       	cpc	r23, r27
    3a62:	49 f4       	brne	.+18     	; 0x3a76 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xae>
    3a64:	85 8d       	ldd	r24, Z+29	; 0x1d
    3a66:	96 8d       	ldd	r25, Z+30	; 0x1e
    3a68:	c5 97       	sbiw	r24, 0x35	; 53
    3a6a:	29 f4       	brne	.+10     	; 0x3a76 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xae>
    3a6c:	09 c0       	rjmp	.+18     	; 0x3a80 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xb8>

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    {
        if((millis() - startTime) > aTimeout)
            return TIMED_OUT;
    3a6e:	ee 24       	eor	r14, r14
    3a70:	ea 94       	dec	r14
    3a72:	fe 2c       	mov	r15, r14
    3a74:	f0 c0       	rjmp	.+480    	; 0x3c56 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
        (iUdp.remotePort() != DNS_PORT) )
    {
        // It's not from who we expected
        return INVALID_SERVER;
    3a76:	9e ef       	ldi	r25, 0xFE	; 254
    3a78:	e9 2e       	mov	r14, r25
    3a7a:	ff 24       	eor	r15, r15
    3a7c:	fa 94       	dec	r15
    3a7e:	eb c0       	rjmp	.+470    	; 0x3c56 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    3a80:	c8 01       	movw	r24, r16
    3a82:	08 d4       	rcall	.+2064   	; 0x4294 <_ZN11EthernetUDP9availableEv>
    3a84:	0c 97       	sbiw	r24, 0x0c	; 12
    3a86:	0c f4       	brge	.+2      	; 0x3a8a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xc2>
    3a88:	e2 c0       	rjmp	.+452    	; 0x3c4e <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x286>
    {
        return TRUNCATED;
    }
    iUdp.read(header, DNS_HEADER_SIZE);
    3a8a:	4c e0       	ldi	r20, 0x0C	; 12
    3a8c:	50 e0       	ldi	r21, 0x00	; 0
    3a8e:	be 01       	movw	r22, r28
    3a90:	6f 5f       	subi	r22, 0xFF	; 255
    3a92:	7f 4f       	sbci	r23, 0xFF	; 255
    3a94:	c8 01       	movw	r24, r16
    3a96:	83 d4       	rcall	.+2310   	; 0x439e <_ZN11EthernetUDP4readEPhj>

    uint16_t header_flags = htons(*((uint16_t*)&header[2]));
    3a98:	8b 81       	ldd	r24, Y+3	; 0x03
    3a9a:	9c 81       	ldd	r25, Y+4	; 0x04
    3a9c:	98 27       	eor	r25, r24
    3a9e:	89 27       	eor	r24, r25
    3aa0:	98 27       	eor	r25, r24
    3aa2:	9a 8b       	std	Y+18, r25	; 0x12
    3aa4:	89 8b       	std	Y+17, r24	; 0x11
    // Check that it's a response to this request
    if ( ( iRequestId != (*((uint16_t*)&header[0])) ) ||
    3aa6:	f7 01       	movw	r30, r14
    3aa8:	46 81       	ldd	r20, Z+6	; 0x06
    3aaa:	57 81       	ldd	r21, Z+7	; 0x07
    3aac:	29 81       	ldd	r18, Y+1	; 0x01
    3aae:	3a 81       	ldd	r19, Y+2	; 0x02
    3ab0:	42 17       	cp	r20, r18
    3ab2:	53 07       	cpc	r21, r19
    3ab4:	11 f4       	brne	.+4      	; 0x3aba <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xf2>
    3ab6:	97 fd       	sbrc	r25, 7
        ((header_flags & QUERY_RESPONSE_MASK) != (uint16_t)RESPONSE_FLAG) )
    {
        // Mark the entire packet as read
        iUdp.flush();
    3ab8:	07 c0       	rjmp	.+14     	; 0x3ac8 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x100>
    3aba:	c8 01       	movw	r24, r16
    3abc:	05 d4       	rcall	.+2058   	; 0x42c8 <_ZN11EthernetUDP5flushEv>
        return INVALID_RESPONSE;
    3abe:	7c ef       	ldi	r23, 0xFC	; 252
    3ac0:	e7 2e       	mov	r14, r23
    3ac2:	ff 24       	eor	r15, r15
    3ac4:	fa 94       	dec	r15
    3ac6:	c7 c0       	rjmp	.+398    	; 0x3c56 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    }
    // Check for any errors in the response (or in our request)
    // although we don't do anything to get round these
    if ( (header_flags & TRUNCATION_FLAG) || (header_flags & RESP_MASK) )
    3ac8:	8f 70       	andi	r24, 0x0F	; 15
    3aca:	92 70       	andi	r25, 0x02	; 2
    3acc:	89 2b       	or	r24, r25
    {
        // Mark the entire packet as read
        iUdp.flush();
    3ace:	39 f0       	breq	.+14     	; 0x3ade <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x116>
    3ad0:	c8 01       	movw	r24, r16
    3ad2:	fa d3       	rcall	.+2036   	; 0x42c8 <_ZN11EthernetUDP5flushEv>
        return -5; //INVALID_RESPONSE;
    3ad4:	6b ef       	ldi	r22, 0xFB	; 251
    3ad6:	e6 2e       	mov	r14, r22
    3ad8:	ff 24       	eor	r15, r15
    3ada:	fa 94       	dec	r15
    3adc:	bc c0       	rjmp	.+376    	; 0x3c56 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    }

    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
    3ade:	cf 80       	ldd	r12, Y+7	; 0x07
    3ae0:	d8 84       	ldd	r13, Y+8	; 0x08
    3ae2:	dc 24       	eor	r13, r12
    3ae4:	cd 24       	eor	r12, r13
    3ae6:	dc 24       	eor	r13, r12
    if (answerCount == 0 )
    3ae8:	c1 14       	cp	r12, r1
    3aea:	d1 04       	cpc	r13, r1
    3aec:	19 f0       	breq	.+6      	; 0x3af4 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x12c>
    3aee:	e1 2c       	mov	r14, r1
    3af0:	f1 2c       	mov	r15, r1
    {
        // Mark the entire packet as read
        iUdp.flush();
    3af2:	1f c0       	rjmp	.+62     	; 0x3b32 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x16a>
    3af4:	c8 01       	movw	r24, r16
    3af6:	e8 d3       	rcall	.+2000   	; 0x42c8 <_ZN11EthernetUDP5flushEv>
        return -6; //INVALID_RESPONSE;
    3af8:	5a ef       	ldi	r21, 0xFA	; 250
    3afa:	e5 2e       	mov	r14, r21
    3afc:	ff 24       	eor	r15, r15
    3afe:	fa 94       	dec	r15
    3b00:	aa c0       	rjmp	.+340    	; 0x3c56 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    {
        // Skip over the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    3b02:	41 e0       	ldi	r20, 0x01	; 1
    3b04:	50 e0       	ldi	r21, 0x00	; 0
    3b06:	be 01       	movw	r22, r28
    3b08:	63 5f       	subi	r22, 0xF3	; 243
    3b0a:	7f 4f       	sbci	r23, 0xFF	; 255
    3b0c:	c8 01       	movw	r24, r16
    3b0e:	47 d4       	rcall	.+2190   	; 0x439e <_ZN11EthernetUDP4readEPhj>
            if (len > 0)
    3b10:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b12:	81 11       	cpse	r24, r1
                while(len--)
                {
                    iUdp.read(); // we don't care about the returned byte
                }
            }
        } while (len != 0);
    3b14:	17 c0       	rjmp	.+46     	; 0x3b44 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x17c>
    3b16:	8d 85       	ldd	r24, Y+13	; 0x0d

        // Now jump over the type and class
        for (int i =0; i < 4; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    3b18:	81 11       	cpse	r24, r1
    3b1a:	f3 cf       	rjmp	.-26     	; 0x3b02 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x13a>
    3b1c:	c8 01       	movw	r24, r16
    3b1e:	17 d4       	rcall	.+2094   	; 0x434e <_ZN11EthernetUDP4readEv>
    3b20:	c8 01       	movw	r24, r16
    3b22:	15 d4       	rcall	.+2090   	; 0x434e <_ZN11EthernetUDP4readEv>
    3b24:	c8 01       	movw	r24, r16
    3b26:	13 d4       	rcall	.+2086   	; 0x434e <_ZN11EthernetUDP4readEv>
    3b28:	c8 01       	movw	r24, r16
    3b2a:	11 d4       	rcall	.+2082   	; 0x434e <_ZN11EthernetUDP4readEv>
    3b2c:	ff ef       	ldi	r31, 0xFF	; 255
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    3b2e:	ef 1a       	sub	r14, r31
    3b30:	ff 0a       	sbc	r15, r31
    3b32:	8d 81       	ldd	r24, Y+5	; 0x05
    3b34:	9e 81       	ldd	r25, Y+6	; 0x06
    3b36:	98 27       	eor	r25, r24
    3b38:	89 27       	eor	r24, r25
    3b3a:	98 27       	eor	r25, r24
    3b3c:	e8 16       	cp	r14, r24
    3b3e:	f9 06       	cpc	r15, r25
    3b40:	00 f3       	brcs	.-64     	; 0x3b02 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x13a>
    3b42:	09 c0       	rjmp	.+18     	; 0x3b56 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x18e>
            iUdp.read(&len, sizeof(len));
            if (len > 0)
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
    3b44:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b46:	9f ef       	ldi	r25, 0xFF	; 255
    3b48:	98 0f       	add	r25, r24
    3b4a:	9d 87       	std	Y+13, r25	; 0x0d
    3b4c:	88 23       	and	r24, r24
    3b4e:	19 f3       	breq	.-58     	; 0x3b16 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x14e>
                {
                    iUdp.read(); // we don't care about the returned byte
    3b50:	c8 01       	movw	r24, r16
    3b52:	fd d3       	rcall	.+2042   	; 0x434e <_ZN11EthernetUDP4readEv>
            iUdp.read(&len, sizeof(len));
            if (len > 0)
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
    3b54:	f7 cf       	rjmp	.-18     	; 0x3b44 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x17c>
    3b56:	a1 2c       	mov	r10, r1
    3b58:	b1 2c       	mov	r11, r1
    {
        // Skip the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    3b5a:	41 e0       	ldi	r20, 0x01	; 1
    3b5c:	50 e0       	ldi	r21, 0x00	; 0
    3b5e:	be 01       	movw	r22, r28
    3b60:	6d 5e       	subi	r22, 0xED	; 237
    3b62:	7f 4f       	sbci	r23, 0xFF	; 255
    3b64:	c8 01       	movw	r24, r16
    3b66:	1b d4       	rcall	.+2102   	; 0x439e <_ZN11EthernetUDP4readEPhj>
    3b68:	8b 89       	ldd	r24, Y+19	; 0x13
            if ((len & LABEL_COMPRESSION_MASK) == 0)
    3b6a:	98 2f       	mov	r25, r24
    3b6c:	90 7c       	andi	r25, 0xC0	; 192
    3b6e:	59 f4       	brne	.+22     	; 0x3b86 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1be>
            {
                // It's just a normal label
                if (len > 0)
    3b70:	88 23       	and	r24, r24
    3b72:	79 f0       	breq	.+30     	; 0x3b92 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1ca>
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
    3b74:	8b 89       	ldd	r24, Y+19	; 0x13
    3b76:	9f ef       	ldi	r25, 0xFF	; 255
    3b78:	98 0f       	add	r25, r24
    3b7a:	9b 8b       	std	Y+19, r25	; 0x13
    3b7c:	88 23       	and	r24, r24
    3b7e:	31 f0       	breq	.+12     	; 0x3b8c <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1c4>
                    {
                        iUdp.read(); // we don't care about the returned byte
    3b80:	c8 01       	movw	r24, r16
    3b82:	e5 d3       	rcall	.+1994   	; 0x434e <_ZN11EthernetUDP4readEv>
                if (len > 0)
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
    3b84:	f7 cf       	rjmp	.-18     	; 0x3b74 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1ac>
                // says that a name is either a sequence of labels ended with a
                // 0 length octet or a pointer or a sequence of labels ending in
                // a pointer.  Either way, when we get here we're at the end of
                // the name
                // Skip over the pointer
                iUdp.read(); // we don't care about the returned byte
    3b86:	c8 01       	movw	r24, r16
    3b88:	e2 d3       	rcall	.+1988   	; 0x434e <_ZN11EthernetUDP4readEv>
    3b8a:	1b 8a       	std	Y+19, r1	; 0x13
                // And set len so that we drop out of the name loop
                len = 0;
    3b8c:	8b 89       	ldd	r24, Y+19	; 0x13
            }
        } while (len != 0);
    3b8e:	81 11       	cpse	r24, r1
    3b90:	e4 cf       	rjmp	.-56     	; 0x3b5a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x192>

        // Check the type and class
        uint16_t answerType;
        uint16_t answerClass;
        iUdp.read((uint8_t*)&answerType, sizeof(answerType));
    3b92:	42 e0       	ldi	r20, 0x02	; 2
    3b94:	50 e0       	ldi	r21, 0x00	; 0
    3b96:	be 01       	movw	r22, r28
    3b98:	61 5f       	subi	r22, 0xF1	; 241
    3b9a:	7f 4f       	sbci	r23, 0xFF	; 255
        iUdp.read((uint8_t*)&answerClass, sizeof(answerClass));
    3b9c:	c8 01       	movw	r24, r16
    3b9e:	ff d3       	rcall	.+2046   	; 0x439e <_ZN11EthernetUDP4readEPhj>
    3ba0:	42 e0       	ldi	r20, 0x02	; 2
    3ba2:	50 e0       	ldi	r21, 0x00	; 0
    3ba4:	be 01       	movw	r22, r28
    3ba6:	63 5f       	subi	r22, 0xF3	; 243
    3ba8:	7f 4f       	sbci	r23, 0xFF	; 255

        // Ignore the Time-To-Live as we don't do any caching
        for (int i =0; i < TTL_SIZE; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    3baa:	c8 01       	movw	r24, r16
    3bac:	f8 d3       	rcall	.+2032   	; 0x439e <_ZN11EthernetUDP4readEPhj>
    3bae:	c8 01       	movw	r24, r16
    3bb0:	ce d3       	rcall	.+1948   	; 0x434e <_ZN11EthernetUDP4readEv>
    3bb2:	c8 01       	movw	r24, r16
    3bb4:	cc d3       	rcall	.+1944   	; 0x434e <_ZN11EthernetUDP4readEv>
    3bb6:	c8 01       	movw	r24, r16
    3bb8:	ca d3       	rcall	.+1940   	; 0x434e <_ZN11EthernetUDP4readEv>
    3bba:	c8 01       	movw	r24, r16
    3bbc:	c8 d3       	rcall	.+1936   	; 0x434e <_ZN11EthernetUDP4readEv>
    3bbe:	42 e0       	ldi	r20, 0x02	; 2
    3bc0:	50 e0       	ldi	r21, 0x00	; 0
        }

        // And read out the length of this answer
        // Don't need header_flags anymore, so we can reuse it here
        iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));
    3bc2:	be 01       	movw	r22, r28
    3bc4:	6f 5e       	subi	r22, 0xEF	; 239
    3bc6:	7f 4f       	sbci	r23, 0xFF	; 255
    3bc8:	c8 01       	movw	r24, r16
    3bca:	e9 d3       	rcall	.+2002   	; 0x439e <_ZN11EthernetUDP4readEPhj>
    3bcc:	8f 85       	ldd	r24, Y+15	; 0x0f
    3bce:	98 89       	ldd	r25, Y+16	; 0x10
    3bd0:	81 15       	cp	r24, r1

        if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) )
    3bd2:	91 40       	sbci	r25, 0x01	; 1
    3bd4:	49 f4       	brne	.+18     	; 0x3be8 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x220>
    3bd6:	ed 84       	ldd	r14, Y+13	; 0x0d
    3bd8:	fe 84       	ldd	r15, Y+14	; 0x0e
    3bda:	fe 24       	eor	r15, r14
    3bdc:	ef 24       	eor	r14, r15
    3bde:	fe 24       	eor	r15, r14
    3be0:	81 e0       	ldi	r24, 0x01	; 1
    3be2:	e8 16       	cp	r14, r24
    3be4:	f1 04       	cpc	r15, r1
    3be6:	19 f0       	breq	.+6      	; 0x3bee <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x226>
    3be8:	e1 2c       	mov	r14, r1
    3bea:	f1 2c       	mov	r15, r1
    3bec:	14 c0       	rjmp	.+40     	; 0x3c16 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x24e>
    3bee:	89 89       	ldd	r24, Y+17	; 0x11
        {
            if (htons(header_flags) != 4)
    3bf0:	9a 89       	ldd	r25, Y+18	; 0x12
    3bf2:	81 15       	cp	r24, r1
    3bf4:	94 40       	sbci	r25, 0x04	; 4
    3bf6:	39 f0       	breq	.+14     	; 0x3c06 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x23e>
    3bf8:	c8 01       	movw	r24, r16
            {
                // It's a weird size
                // Mark the entire packet as read
                iUdp.flush();
    3bfa:	66 d3       	rcall	.+1740   	; 0x42c8 <_ZN11EthernetUDP5flushEv>
    3bfc:	47 ef       	ldi	r20, 0xF7	; 247
                return -9;//INVALID_RESPONSE;
    3bfe:	e4 2e       	mov	r14, r20
    3c00:	ff 24       	eor	r15, r15
    3c02:	fa 94       	dec	r15
    3c04:	28 c0       	rjmp	.+80     	; 0x3c56 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    3c06:	b1 01       	movw	r22, r2

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    3c08:	6e 5f       	subi	r22, 0xFE	; 254
    3c0a:	7f 4f       	sbci	r23, 0xFF	; 255
    3c0c:	44 e0       	ldi	r20, 0x04	; 4
            }
            iUdp.read(aAddress.raw_address(), 4);
    3c0e:	50 e0       	ldi	r21, 0x00	; 0
    3c10:	c8 01       	movw	r24, r16
    3c12:	c5 d3       	rcall	.+1930   	; 0x439e <_ZN11EthernetUDP4readEPhj>
    3c14:	20 c0       	rjmp	.+64     	; 0x3c56 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
            return SUCCESS;
    3c16:	89 89       	ldd	r24, Y+17	; 0x11
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    3c18:	9a 89       	ldd	r25, Y+18	; 0x12
    3c1a:	98 27       	eor	r25, r24
    3c1c:	89 27       	eor	r24, r25
    3c1e:	98 27       	eor	r25, r24
    3c20:	e8 16       	cp	r14, r24
    3c22:	f9 06       	cpc	r15, r25
    3c24:	30 f4       	brcc	.+12     	; 0x3c32 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x26a>
    3c26:	c8 01       	movw	r24, r16
            {
                iUdp.read(); // we don't care about the returned byte
    3c28:	92 d3       	rcall	.+1828   	; 0x434e <_ZN11EthernetUDP4readEv>
    3c2a:	ff ef       	ldi	r31, 0xFF	; 255
    3c2c:	ef 1a       	sub	r14, r31
            return SUCCESS;
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    3c2e:	ff 0a       	sbc	r15, r31
    3c30:	f2 cf       	rjmp	.-28     	; 0x3c16 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x24e>
    3c32:	2f ef       	ldi	r18, 0xFF	; 255
    3c34:	a2 1a       	sub	r10, r18
    // Now we're up to the bit we're interested in, the answer
    // There might be more than one answer (although we'll just use the first
    // type A answer) and some authority and additional resource records but
    // we're going to ignore all of them.

    for (uint16_t i =0; i < answerCount; i++)
    3c36:	b2 0a       	sbc	r11, r18
    3c38:	ca 14       	cp	r12, r10
    3c3a:	db 04       	cpc	r13, r11
    3c3c:	09 f0       	breq	.+2      	; 0x3c40 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x278>
    3c3e:	8d cf       	rjmp	.-230    	; 0x3b5a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x192>
    3c40:	c8 01       	movw	r24, r16
    3c42:	42 d3       	rcall	.+1668   	; 0x42c8 <_ZN11EthernetUDP5flushEv>
            }
        }
    }

    // Mark the entire packet as read
    iUdp.flush();
    3c44:	36 ef       	ldi	r19, 0xF6	; 246
    3c46:	e3 2e       	mov	r14, r19
    3c48:	ff 24       	eor	r15, r15

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
    3c4a:	fa 94       	dec	r15
    3c4c:	04 c0       	rjmp	.+8      	; 0x3c56 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    3c4e:	8d ef       	ldi	r24, 0xFD	; 253
    3c50:	e8 2e       	mov	r14, r24
    3c52:	ff 24       	eor	r15, r15
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    {
        return TRUNCATED;
    3c54:	fa 94       	dec	r15
    3c56:	c7 01       	movw	r24, r14
    3c58:	63 96       	adiw	r28, 0x13	; 19
    3c5a:	0f b6       	in	r0, 0x3f	; 63
    // Mark the entire packet as read
    iUdp.flush();

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
}
    3c5c:	f8 94       	cli
    3c5e:	de bf       	out	0x3e, r29	; 62
    3c60:	0f be       	out	0x3f, r0	; 63
    3c62:	cd bf       	out	0x3d, r28	; 61
    3c64:	df 91       	pop	r29
    3c66:	cf 91       	pop	r28
    3c68:	1f 91       	pop	r17
    3c6a:	0f 91       	pop	r16
    3c6c:	ff 90       	pop	r15
    3c6e:	ef 90       	pop	r14
    3c70:	df 90       	pop	r13
    3c72:	cf 90       	pop	r12
    3c74:	bf 90       	pop	r11
    3c76:	af 90       	pop	r10
    3c78:	9f 90       	pop	r9
    3c7a:	8f 90       	pop	r8
    3c7c:	7f 90       	pop	r7
    3c7e:	6f 90       	pop	r6
    3c80:	5f 90       	pop	r5
    3c82:	4f 90       	pop	r4
    3c84:	3f 90       	pop	r3
    3c86:	2f 90       	pop	r2
    3c88:	08 95       	ret

00003c8a <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>:
    3c8a:	8f 92       	push	r8
    3c8c:	9f 92       	push	r9
    3c8e:	af 92       	push	r10
        return 0;
    }
}

int DNSClient::getHostByName(const char* aHostname, IPAddress& aResult)
{
    3c90:	bf 92       	push	r11
    3c92:	cf 92       	push	r12
    3c94:	df 92       	push	r13
    3c96:	ef 92       	push	r14
    3c98:	ff 92       	push	r15
    3c9a:	0f 93       	push	r16
    3c9c:	1f 93       	push	r17
    3c9e:	cf 93       	push	r28
    3ca0:	df 93       	push	r29
    3ca2:	00 d0       	rcall	.+0      	; 0x3ca4 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x1a>
    3ca4:	00 d0       	rcall	.+0      	; 0x3ca6 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x1c>
    3ca6:	00 d0       	rcall	.+0      	; 0x3ca8 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x1e>
    3ca8:	cd b7       	in	r28, 0x3d	; 61
    3caa:	de b7       	in	r29, 0x3e	; 62
    3cac:	7c 01       	movw	r14, r24
    3cae:	4b 01       	movw	r8, r22
    3cb0:	5a 01       	movw	r10, r20
    int ret =0;

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
    3cb2:	9e dd       	rcall	.-1220   	; 0x37f0 <_ZN9DNSClient9inet_atonEPKcR9IPAddress>
    3cb4:	8c 01       	movw	r16, r24
    3cb6:	89 2b       	or	r24, r25
    3cb8:	09 f0       	breq	.+2      	; 0x3cbc <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x32>
    3cba:	57 c0       	rjmp	.+174    	; 0x3d6a <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xe0>
        // It is, our work here is done
        return 1;
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    3cbc:	f7 01       	movw	r30, r14
    3cbe:	42 81       	ldd	r20, Z+2	; 0x02
    3cc0:	53 81       	ldd	r21, Z+3	; 0x03
    3cc2:	64 81       	ldd	r22, Z+4	; 0x04
    3cc4:	75 81       	ldd	r23, Z+5	; 0x05
    3cc6:	80 91 c8 09 	lds	r24, 0x09C8	; 0x8009c8 <_ZL11INADDR_NONE+0x2>
    3cca:	90 91 c9 09 	lds	r25, 0x09C9	; 0x8009c9 <_ZL11INADDR_NONE+0x3>
    3cce:	a0 91 ca 09 	lds	r26, 0x09CA	; 0x8009ca <_ZL11INADDR_NONE+0x4>
    3cd2:	b0 91 cb 09 	lds	r27, 0x09CB	; 0x8009cb <_ZL11INADDR_NONE+0x5>
    3cd6:	48 17       	cp	r20, r24
    3cd8:	59 07       	cpc	r21, r25
    3cda:	6a 07       	cpc	r22, r26
    3cdc:	7b 07       	cpc	r23, r27
    3cde:	09 f4       	brne	.+2      	; 0x3ce2 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x58>
    3ce0:	47 c0       	rjmp	.+142    	; 0x3d70 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xe6>
    {
        return INVALID_SERVER;
    }
	
    // Find a socket to use
    if (iUdp.begin(1024+(millis() & 0xF)) == 1)
    3ce2:	0e 94 cd 30 	call	0x619a	; 0x619a <millis>
    3ce6:	67 01       	movw	r12, r14
    3ce8:	f8 e0       	ldi	r31, 0x08	; 8
    3cea:	cf 0e       	add	r12, r31
    3cec:	d1 1c       	adc	r13, r1
    3cee:	6f 70       	andi	r22, 0x0F	; 15
    3cf0:	77 27       	eor	r23, r23
    3cf2:	7c 5f       	subi	r23, 0xFC	; 252
    3cf4:	c6 01       	movw	r24, r12
    3cf6:	89 d3       	rcall	.+1810   	; 0x440a <_ZN11EthernetUDP5beginEj>
    3cf8:	81 30       	cpi	r24, 0x01	; 1
    3cfa:	09 f0       	breq	.+2      	; 0x3cfe <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x74>
    3cfc:	3b c0       	rjmp	.+118    	; 0x3d74 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xea>
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    3cfe:	85 e4       	ldi	r24, 0x45	; 69
    3d00:	98 e0       	ldi	r25, 0x08	; 8
    3d02:	9a 83       	std	Y+2, r25	; 0x02
    3d04:	89 83       	std	Y+1, r24	; 0x01
    3d06:	f7 01       	movw	r30, r14
    3d08:	82 81       	ldd	r24, Z+2	; 0x02
    3d0a:	93 81       	ldd	r25, Z+3	; 0x03
    3d0c:	a4 81       	ldd	r26, Z+4	; 0x04
    3d0e:	b5 81       	ldd	r27, Z+5	; 0x05
    3d10:	8b 83       	std	Y+3, r24	; 0x03
    3d12:	9c 83       	std	Y+4, r25	; 0x04
    3d14:	ad 83       	std	Y+5, r26	; 0x05
    3d16:	be 83       	std	Y+6, r27	; 0x06
        // Try up to three times
        int retries = 0;
//        while ((retries < 3) && (ret <= 0))
        {
            // Send DNS request
            ret = iUdp.beginPacket(iDNSServer, DNS_PORT);
    3d18:	45 e3       	ldi	r20, 0x35	; 53
    3d1a:	50 e0       	ldi	r21, 0x00	; 0
    3d1c:	be 01       	movw	r22, r28
    3d1e:	6f 5f       	subi	r22, 0xFF	; 255
    3d20:	7f 4f       	sbci	r23, 0xFF	; 255
    3d22:	c6 01       	movw	r24, r12
    3d24:	f7 d2       	rcall	.+1518   	; 0x4314 <_ZN11EthernetUDP11beginPacketE9IPAddressj>
            if (ret != 0)
    3d26:	89 2b       	or	r24, r25
    3d28:	19 f4       	brne	.+6      	; 0x3d30 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xa6>
    3d2a:	00 e0       	ldi	r16, 0x00	; 0
    3d2c:	10 e0       	ldi	r17, 0x00	; 0
            {
                // Now output the request data
                ret = BuildRequest(aHostname);
    3d2e:	1a c0       	rjmp	.+52     	; 0x3d64 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xda>
    3d30:	b4 01       	movw	r22, r8
    3d32:	c7 01       	movw	r24, r14
                if (ret != 0)
    3d34:	a8 dd       	rcall	.-1200   	; 0x3886 <_ZN9DNSClient12BuildRequestEPKc>
    3d36:	89 2b       	or	r24, r25
                {
                    // And finally send the request
                    ret = iUdp.endPacket();
    3d38:	c1 f3       	breq	.-16     	; 0x3d2a <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xa0>
    3d3a:	c6 01       	movw	r24, r12
    3d3c:	f2 d2       	rcall	.+1508   	; 0x4322 <_ZN11EthernetUDP9endPacketEv>
                    if (ret != 0)
    3d3e:	89 2b       	or	r24, r25
    3d40:	a1 f3       	breq	.-24     	; 0x3d2a <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xa0>
    3d42:	83 e0       	ldi	r24, 0x03	; 3
    3d44:	88 2e       	mov	r8, r24
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
                        {
                            ret = ProcessResponse(5000, aResult);
    3d46:	91 2c       	mov	r9, r1
    3d48:	a5 01       	movw	r20, r10
    3d4a:	68 e8       	ldi	r22, 0x88	; 136
    3d4c:	73 e1       	ldi	r23, 0x13	; 19
    3d4e:	c7 01       	movw	r24, r14
    3d50:	3b de       	rcall	.-906    	; 0x39c8 <_ZN9DNSClient15ProcessResponseEjR9IPAddress>
    3d52:	8c 01       	movw	r16, r24
    3d54:	21 e0       	ldi	r18, 0x01	; 1
    3d56:	82 1a       	sub	r8, r18
    3d58:	91 08       	sbc	r9, r1
                    if (ret != 0)
                    {
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
    3d5a:	21 f0       	breq	.+8      	; 0x3d64 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xda>
    3d5c:	0f 3f       	cpi	r16, 0xFF	; 255
    3d5e:	ff ef       	ldi	r31, 0xFF	; 255
    3d60:	1f 07       	cpc	r17, r31
            }
            retries++;
        }

        // We're done with the socket now
        iUdp.stop();
    3d62:	91 f3       	breq	.-28     	; 0x3d48 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xbe>
    3d64:	c6 01       	movw	r24, r12
    3d66:	c2 d2       	rcall	.+1412   	; 0x42ec <_ZN11EthernetUDP4stopEv>
    3d68:	05 c0       	rjmp	.+10     	; 0x3d74 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xea>

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
    {
        // It is, our work here is done
        return 1;
    3d6a:	01 e0       	ldi	r16, 0x01	; 1
    3d6c:	10 e0       	ldi	r17, 0x00	; 0
    3d6e:	02 c0       	rjmp	.+4      	; 0x3d74 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xea>
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    {
        return INVALID_SERVER;
    3d70:	0e ef       	ldi	r16, 0xFE	; 254
    3d72:	1f ef       	ldi	r17, 0xFF	; 255
        // We're done with the socket now
        iUdp.stop();
    }

    return ret;
}
    3d74:	c8 01       	movw	r24, r16
    3d76:	26 96       	adiw	r28, 0x06	; 6
    3d78:	0f b6       	in	r0, 0x3f	; 63
    3d7a:	f8 94       	cli
    3d7c:	de bf       	out	0x3e, r29	; 62
    3d7e:	0f be       	out	0x3f, r0	; 63
    3d80:	cd bf       	out	0x3d, r28	; 61
    3d82:	df 91       	pop	r29
    3d84:	cf 91       	pop	r28
    3d86:	1f 91       	pop	r17
    3d88:	0f 91       	pop	r16
    3d8a:	ff 90       	pop	r15
    3d8c:	ef 90       	pop	r14
    3d8e:	df 90       	pop	r13
    3d90:	cf 90       	pop	r12
    3d92:	bf 90       	pop	r11
    3d94:	af 90       	pop	r10
    3d96:	9f 90       	pop	r9
    3d98:	8f 90       	pop	r8
    3d9a:	08 95       	ret

00003d9c <_ZN10W5500Class8writeGAREPh>:
    return _dnsDomainName;
}

char* EthernetClass::hostName(){
    return _hostName;
}
    3d9c:	24 e0       	ldi	r18, 0x04	; 4
    3d9e:	30 e0       	ldi	r19, 0x00	; 0
    3da0:	ac 01       	movw	r20, r24
    3da2:	64 e0       	ldi	r22, 0x04	; 4
    3da4:	81 e0       	ldi	r24, 0x01	; 1
    3da6:	90 e0       	ldi	r25, 0x00	; 0
    3da8:	35 c6       	rjmp	.+3178   	; 0x4a14 <_ZN10W5500Class5writeEjhPKhj>

00003daa <_ZN10W5500Class9writeSUBREPh>:
    3daa:	24 e0       	ldi	r18, 0x04	; 4
    3dac:	30 e0       	ldi	r19, 0x00	; 0
    3dae:	ac 01       	movw	r20, r24
    3db0:	64 e0       	ldi	r22, 0x04	; 4
    3db2:	85 e0       	ldi	r24, 0x05	; 5
    3db4:	90 e0       	ldi	r25, 0x00	; 0
    3db6:	2e c6       	rjmp	.+3164   	; 0x4a14 <_ZN10W5500Class5writeEjhPKhj>

00003db8 <_ZN10W5500Class9writeSHAREPh>:
    3db8:	26 e0       	ldi	r18, 0x06	; 6
    3dba:	30 e0       	ldi	r19, 0x00	; 0
    3dbc:	ac 01       	movw	r20, r24
    3dbe:	64 e0       	ldi	r22, 0x04	; 4
    3dc0:	89 e0       	ldi	r24, 0x09	; 9
    3dc2:	90 e0       	ldi	r25, 0x00	; 0
    3dc4:	27 c6       	rjmp	.+3150   	; 0x4a14 <_ZN10W5500Class5writeEjhPKhj>

00003dc6 <_ZN10W5500Class9writeSIPREPh>:
    3dc6:	24 e0       	ldi	r18, 0x04	; 4
    3dc8:	30 e0       	ldi	r19, 0x00	; 0
    3dca:	ac 01       	movw	r20, r24
    3dcc:	64 e0       	ldi	r22, 0x04	; 4
    3dce:	8f e0       	ldi	r24, 0x0F	; 15
    3dd0:	90 e0       	ldi	r25, 0x00	; 0
    3dd2:	20 c6       	rjmp	.+3136   	; 0x4a14 <_ZN10W5500Class5writeEjhPKhj>

00003dd4 <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_>:
    3dd4:	8f 92       	push	r8
    3dd6:	9f 92       	push	r9
    3dd8:	af 92       	push	r10
    3dda:	bf 92       	push	r11
    3ddc:	cf 92       	push	r12
    3dde:	df 92       	push	r13
    3de0:	ef 92       	push	r14
    3de2:	ff 92       	push	r15
    3de4:	0f 93       	push	r16
    3de6:	1f 93       	push	r17
    3de8:	cf 93       	push	r28
    3dea:	df 93       	push	r29
    3dec:	4c 01       	movw	r8, r24
    3dee:	5b 01       	movw	r10, r22
    3df0:	6a 01       	movw	r12, r20
    3df2:	e9 01       	movw	r28, r18
    3df4:	fc 01       	movw	r30, r24
    3df6:	64 85       	ldd	r22, Z+12	; 0x0c
    3df8:	86 e0       	ldi	r24, 0x06	; 6
    3dfa:	9a e0       	ldi	r25, 0x0A	; 10
    3dfc:	53 d6       	rcall	.+3238   	; 0x4aa4 <_ZN10W5500Class4initEh>
    3dfe:	c5 01       	movw	r24, r10
    3e00:	db df       	rcall	.-74     	; 0x3db8 <_ZN10W5500Class9writeSHAREPh>
    3e02:	c6 01       	movw	r24, r12
    3e04:	02 96       	adiw	r24, 0x02	; 2
    3e06:	df df       	rcall	.-66     	; 0x3dc6 <_ZN10W5500Class9writeSIPREPh>
    3e08:	c8 01       	movw	r24, r16
    3e0a:	02 96       	adiw	r24, 0x02	; 2
    3e0c:	c7 df       	rcall	.-114    	; 0x3d9c <_ZN10W5500Class8writeGAREPh>
    3e0e:	c7 01       	movw	r24, r14
    3e10:	02 96       	adiw	r24, 0x02	; 2
    3e12:	cb df       	rcall	.-106    	; 0x3daa <_ZN10W5500Class9writeSUBREPh>
    3e14:	8a 81       	ldd	r24, Y+2	; 0x02
    3e16:	9b 81       	ldd	r25, Y+3	; 0x03
    3e18:	ac 81       	ldd	r26, Y+4	; 0x04
    3e1a:	bd 81       	ldd	r27, Y+5	; 0x05
    3e1c:	f4 01       	movw	r30, r8
    3e1e:	82 83       	std	Z+2, r24	; 0x02
    3e20:	93 83       	std	Z+3, r25	; 0x03
    3e22:	a4 83       	std	Z+4, r26	; 0x04
    3e24:	b5 83       	std	Z+5, r27	; 0x05
    3e26:	df 91       	pop	r29
    3e28:	cf 91       	pop	r28
    3e2a:	1f 91       	pop	r17
    3e2c:	0f 91       	pop	r16
    3e2e:	ff 90       	pop	r15
    3e30:	ef 90       	pop	r14
    3e32:	df 90       	pop	r13
    3e34:	cf 90       	pop	r12
    3e36:	bf 90       	pop	r11
    3e38:	af 90       	pop	r10
    3e3a:	9f 90       	pop	r9
    3e3c:	8f 90       	pop	r8
    3e3e:	08 95       	ret

00003e40 <_ZN13EthernetClass11dnsServerIPEv>:
    3e40:	25 e4       	ldi	r18, 0x45	; 69
    3e42:	38 e0       	ldi	r19, 0x08	; 8
    3e44:	fc 01       	movw	r30, r24
    3e46:	31 83       	std	Z+1, r19	; 0x01
    3e48:	20 83       	st	Z, r18
    3e4a:	fb 01       	movw	r30, r22
    3e4c:	42 81       	ldd	r20, Z+2	; 0x02
    3e4e:	53 81       	ldd	r21, Z+3	; 0x03
    3e50:	64 81       	ldd	r22, Z+4	; 0x04
    3e52:	75 81       	ldd	r23, Z+5	; 0x05
    3e54:	fc 01       	movw	r30, r24
    3e56:	42 83       	std	Z+2, r20	; 0x02
    3e58:	53 83       	std	Z+3, r21	; 0x03
    3e5a:	64 83       	std	Z+4, r22	; 0x04
    3e5c:	75 83       	std	Z+5, r23	; 0x05
    3e5e:	08 95       	ret

00003e60 <_GLOBAL__sub_I__ZN13EthernetClass6_stateE>:

EthernetClass Ethernet;
    3e60:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    3e62:	00 e0       	ldi	r16, 0x00	; 0
    3e64:	20 e0       	ldi	r18, 0x00	; 0
    3e66:	40 e0       	ldi	r20, 0x00	; 0
    3e68:	60 e0       	ldi	r22, 0x00	; 0
    3e6a:	89 ee       	ldi	r24, 0xE9	; 233
    3e6c:	99 e0       	ldi	r25, 0x09	; 9
    3e6e:	0e 94 4c 2f 	call	0x5e98	; 0x5e98 <_ZN9IPAddressC1Ehhhh>
  uint8_t w5500_cspin;

  static uint8_t _state[MAX_SOCK_NUM];
  static uint16_t _server_port[MAX_SOCK_NUM];

  EthernetClass() { _dhcp = NULL; w5500_cspin = 10; }
    3e72:	8c ec       	ldi	r24, 0xCC	; 204
    3e74:	99 e0       	ldi	r25, 0x09	; 9
    3e76:	0e 94 42 2f 	call	0x5e84	; 0x5e84 <_ZN9IPAddressC1Ev>
    3e7a:	ec ec       	ldi	r30, 0xCC	; 204
    3e7c:	f9 e0       	ldi	r31, 0x09	; 9
    3e7e:	13 86       	std	Z+11, r1	; 0x0b
    3e80:	12 86       	std	Z+10, r1	; 0x0a
    3e82:	8a e0       	ldi	r24, 0x0A	; 10
    3e84:	84 87       	std	Z+12, r24	; 0x0c
    3e86:	0f 91       	pop	r16
    3e88:	08 95       	ret

00003e8a <_ZN14EthernetClientneERKS_>:
uint16_t EthernetClient::_srcport = 1024;

EthernetClient::EthernetClient() : _sock(MAX_SOCK_NUM) {
}

EthernetClient::EthernetClient(uint8_t sock) : _sock(sock) {
    3e8a:	dc 01       	movw	r26, r24
    3e8c:	ed 91       	ld	r30, X+
    3e8e:	fc 91       	ld	r31, X
    3e90:	02 8c       	ldd	r0, Z+26	; 0x1a
    3e92:	f3 8d       	ldd	r31, Z+27	; 0x1b
    3e94:	e0 2d       	mov	r30, r0
    3e96:	09 95       	icall
    3e98:	91 e0       	ldi	r25, 0x01	; 1
    3e9a:	89 27       	eor	r24, r25
    3e9c:	08 95       	ret

00003e9e <_ZN14EthernetClient5writeEh>:
    3e9e:	cf 93       	push	r28
    3ea0:	df 93       	push	r29
    3ea2:	1f 92       	push	r1
    3ea4:	cd b7       	in	r28, 0x3d	; 61
    3ea6:	de b7       	in	r29, 0x3e	; 62
    3ea8:	69 83       	std	Y+1, r22	; 0x01
    3eaa:	dc 01       	movw	r26, r24
    3eac:	ed 91       	ld	r30, X+
    3eae:	fc 91       	ld	r31, X
    3eb0:	02 80       	ldd	r0, Z+2	; 0x02
    3eb2:	f3 81       	ldd	r31, Z+3	; 0x03
    3eb4:	e0 2d       	mov	r30, r0
    3eb6:	41 e0       	ldi	r20, 0x01	; 1
    3eb8:	50 e0       	ldi	r21, 0x00	; 0
    3eba:	be 01       	movw	r22, r28
    3ebc:	6f 5f       	subi	r22, 0xFF	; 255
    3ebe:	7f 4f       	sbci	r23, 0xFF	; 255
    3ec0:	09 95       	icall
    3ec2:	0f 90       	pop	r0
    3ec4:	df 91       	pop	r29
    3ec6:	cf 91       	pop	r28
    3ec8:	08 95       	ret

00003eca <_ZN14EthernetClientcvbEv>:
    3eca:	21 e0       	ldi	r18, 0x01	; 1
    3ecc:	fc 01       	movw	r30, r24
    3ece:	84 85       	ldd	r24, Z+12	; 0x0c
    3ed0:	88 30       	cpi	r24, 0x08	; 8
    3ed2:	09 f4       	brne	.+2      	; 0x3ed6 <_ZN14EthernetClientcvbEv+0xc>
    3ed4:	20 e0       	ldi	r18, 0x00	; 0
    3ed6:	82 2f       	mov	r24, r18
    3ed8:	08 95       	ret

00003eda <_ZN14EthernetClienteqERKS_>:
    3eda:	fc 01       	movw	r30, r24
    3edc:	94 85       	ldd	r25, Z+12	; 0x0c
    3ede:	fb 01       	movw	r30, r22
    3ee0:	84 85       	ldd	r24, Z+12	; 0x0c
    3ee2:	98 13       	cpse	r25, r24
    3ee4:	03 c0       	rjmp	.+6      	; 0x3eec <_ZN14EthernetClienteqERKS_+0x12>
    3ee6:	81 e0       	ldi	r24, 0x01	; 1
    3ee8:	98 30       	cpi	r25, 0x08	; 8
    3eea:	09 f4       	brne	.+2      	; 0x3eee <_ZN14EthernetClienteqERKS_+0x14>
    3eec:	80 e0       	ldi	r24, 0x00	; 0
    3eee:	08 95       	ret

00003ef0 <_ZN14EthernetClient7connectEPKcj>:
    3ef0:	cf 92       	push	r12
    3ef2:	df 92       	push	r13
    3ef4:	ef 92       	push	r14
    3ef6:	ff 92       	push	r15
    3ef8:	0f 93       	push	r16
    3efa:	1f 93       	push	r17
    3efc:	cf 93       	push	r28
    3efe:	df 93       	push	r29
    3f00:	cd b7       	in	r28, 0x3d	; 61
    3f02:	de b7       	in	r29, 0x3e	; 62
    3f04:	af 97       	sbiw	r28, 0x2f	; 47
    3f06:	0f b6       	in	r0, 0x3f	; 63
    3f08:	f8 94       	cli
    3f0a:	de bf       	out	0x3e, r29	; 62
    3f0c:	0f be       	out	0x3f, r0	; 63
    3f0e:	cd bf       	out	0x3d, r28	; 61
    3f10:	8c 01       	movw	r16, r24
    3f12:	6b 01       	movw	r12, r22
    3f14:	7a 01       	movw	r14, r20
    3f16:	ce 01       	movw	r24, r28
    3f18:	01 96       	adiw	r24, 0x01	; 1
    3f1a:	0e 94 42 2f 	call	0x5e84	; 0x5e84 <_ZN9IPAddressC1Ev>
    3f1e:	ce 01       	movw	r24, r28
    3f20:	09 96       	adiw	r24, 0x09	; 9
    3f22:	f3 d2       	rcall	.+1510   	; 0x450a <_ZN11EthernetUDPC1Ev>
    3f24:	ce 01       	movw	r24, r28
    3f26:	8a 96       	adiw	r24, 0x2a	; 42
    3f28:	0e 94 42 2f 	call	0x5e84	; 0x5e84 <_ZN9IPAddressC1Ev>
    3f2c:	6c ec       	ldi	r22, 0xCC	; 204
    3f2e:	79 e0       	ldi	r23, 0x09	; 9
    3f30:	ce 01       	movw	r24, r28
    3f32:	84 96       	adiw	r24, 0x24	; 36
    3f34:	85 df       	rcall	.-246    	; 0x3e40 <_ZN13EthernetClass11dnsServerIPEv>
    3f36:	be 01       	movw	r22, r28
    3f38:	6c 5d       	subi	r22, 0xDC	; 220
    3f3a:	7f 4f       	sbci	r23, 0xFF	; 255
    3f3c:	ce 01       	movw	r24, r28
    3f3e:	01 96       	adiw	r24, 0x01	; 1
    3f40:	4a dc       	rcall	.-1900   	; 0x37d6 <_ZN9DNSClient5beginERK9IPAddress>
    3f42:	ae 01       	movw	r20, r28
    3f44:	46 5d       	subi	r20, 0xD6	; 214
    3f46:	5f 4f       	sbci	r21, 0xFF	; 255
    3f48:	b6 01       	movw	r22, r12
    3f4a:	ce 01       	movw	r24, r28
    3f4c:	01 96       	adiw	r24, 0x01	; 1
    3f4e:	9d de       	rcall	.-710    	; 0x3c8a <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>
    3f50:	81 30       	cpi	r24, 0x01	; 1
    3f52:	91 05       	cpc	r25, r1
    3f54:	c1 f4       	brne	.+48     	; 0x3f86 <_ZN14EthernetClient7connectEPKcj+0x96>
    3f56:	d8 01       	movw	r26, r16
    3f58:	ed 91       	ld	r30, X+
    3f5a:	fc 91       	ld	r31, X
    3f5c:	06 84       	ldd	r0, Z+14	; 0x0e
    3f5e:	f7 85       	ldd	r31, Z+15	; 0x0f
    3f60:	e0 2d       	mov	r30, r0
    3f62:	85 e4       	ldi	r24, 0x45	; 69
    3f64:	98 e0       	ldi	r25, 0x08	; 8
    3f66:	9d a3       	std	Y+37, r25	; 0x25
    3f68:	8c a3       	std	Y+36, r24	; 0x24
    3f6a:	8c a5       	ldd	r24, Y+44	; 0x2c
    3f6c:	9d a5       	ldd	r25, Y+45	; 0x2d
    3f6e:	ae a5       	ldd	r26, Y+46	; 0x2e
    3f70:	bf a5       	ldd	r27, Y+47	; 0x2f
    3f72:	8e a3       	std	Y+38, r24	; 0x26
    3f74:	9f a3       	std	Y+39, r25	; 0x27
    3f76:	a8 a7       	std	Y+40, r26	; 0x28
    3f78:	b9 a7       	std	Y+41, r27	; 0x29
    3f7a:	a7 01       	movw	r20, r14
    3f7c:	be 01       	movw	r22, r28
    3f7e:	6c 5d       	subi	r22, 0xDC	; 220
    3f80:	7f 4f       	sbci	r23, 0xFF	; 255
    3f82:	c8 01       	movw	r24, r16
    3f84:	09 95       	icall
    3f86:	af 96       	adiw	r28, 0x2f	; 47
    3f88:	0f b6       	in	r0, 0x3f	; 63
    3f8a:	f8 94       	cli
    3f8c:	de bf       	out	0x3e, r29	; 62
    3f8e:	0f be       	out	0x3f, r0	; 63
    3f90:	cd bf       	out	0x3d, r28	; 61
    3f92:	df 91       	pop	r29
    3f94:	cf 91       	pop	r28
    3f96:	1f 91       	pop	r17
    3f98:	0f 91       	pop	r16
    3f9a:	ff 90       	pop	r15
    3f9c:	ef 90       	pop	r14
    3f9e:	df 90       	pop	r13
    3fa0:	cf 90       	pop	r12
    3fa2:	08 95       	ret

00003fa4 <_ZN14EthernetClient5writeEPKhj>:
    3fa4:	0f 93       	push	r16
    3fa6:	1f 93       	push	r17
    3fa8:	cf 93       	push	r28
    3faa:	df 93       	push	r29
    3fac:	8c 01       	movw	r16, r24
    3fae:	d4 2f       	mov	r29, r20
    3fb0:	c5 2f       	mov	r28, r21
    3fb2:	fc 01       	movw	r30, r24
    3fb4:	84 85       	ldd	r24, Z+12	; 0x0c
    3fb6:	88 30       	cpi	r24, 0x08	; 8
    3fb8:	41 f4       	brne	.+16     	; 0x3fca <_ZN14EthernetClient5writeEPKhj+0x26>
    3fba:	81 e0       	ldi	r24, 0x01	; 1
    3fbc:	90 e0       	ldi	r25, 0x00	; 0
    3fbe:	f8 01       	movw	r30, r16
    3fc0:	93 83       	std	Z+3, r25	; 0x03
    3fc2:	82 83       	std	Z+2, r24	; 0x02
    3fc4:	80 e0       	ldi	r24, 0x00	; 0
    3fc6:	90 e0       	ldi	r25, 0x00	; 0
    3fc8:	05 c0       	rjmp	.+10     	; 0x3fd4 <_ZN14EthernetClient5writeEPKhj+0x30>
    3fca:	cf d3       	rcall	.+1950   	; 0x476a <_Z4sendhPKhj>
    3fcc:	89 2b       	or	r24, r25
    3fce:	a9 f3       	breq	.-22     	; 0x3fba <_ZN14EthernetClient5writeEPKhj+0x16>
    3fd0:	8d 2f       	mov	r24, r29
    3fd2:	9c 2f       	mov	r25, r28
    3fd4:	df 91       	pop	r29
    3fd6:	cf 91       	pop	r28
    3fd8:	1f 91       	pop	r17
    3fda:	0f 91       	pop	r16
    3fdc:	08 95       	ret

00003fde <_ZN14EthernetClient9availableEv>:
    3fde:	fc 01       	movw	r30, r24
    3fe0:	64 85       	ldd	r22, Z+12	; 0x0c
    3fe2:	68 30       	cpi	r22, 0x08	; 8
    3fe4:	19 f0       	breq	.+6      	; 0x3fec <_ZN14EthernetClient9availableEv+0xe>
    3fe6:	86 e0       	ldi	r24, 0x06	; 6
    3fe8:	9a e0       	ldi	r25, 0x0A	; 10
    3fea:	d0 c5       	rjmp	.+2976   	; 0x4b8c <_ZN10W5500Class17getRXReceivedSizeEh>
    3fec:	80 e0       	ldi	r24, 0x00	; 0
    3fee:	90 e0       	ldi	r25, 0x00	; 0
    3ff0:	08 95       	ret

00003ff2 <_ZN14EthernetClient4readEv>:
    3ff2:	cf 93       	push	r28
    3ff4:	df 93       	push	r29
    3ff6:	1f 92       	push	r1
    3ff8:	cd b7       	in	r28, 0x3d	; 61
    3ffa:	de b7       	in	r29, 0x3e	; 62
    3ffc:	41 e0       	ldi	r20, 0x01	; 1
    3ffe:	50 e0       	ldi	r21, 0x00	; 0
    4000:	be 01       	movw	r22, r28
    4002:	6f 5f       	subi	r22, 0xFF	; 255
    4004:	7f 4f       	sbci	r23, 0xFF	; 255
    4006:	fc 01       	movw	r30, r24
    4008:	84 85       	ldd	r24, Z+12	; 0x0c
    400a:	f7 d3       	rcall	.+2030   	; 0x47fa <_Z4recvhPhi>
    400c:	18 16       	cp	r1, r24
    400e:	19 06       	cpc	r1, r25
    4010:	1c f4       	brge	.+6      	; 0x4018 <_ZN14EthernetClient4readEv+0x26>
    4012:	89 81       	ldd	r24, Y+1	; 0x01
    4014:	90 e0       	ldi	r25, 0x00	; 0
    4016:	02 c0       	rjmp	.+4      	; 0x401c <_ZN14EthernetClient4readEv+0x2a>
    4018:	8f ef       	ldi	r24, 0xFF	; 255
    401a:	9f ef       	ldi	r25, 0xFF	; 255
    401c:	0f 90       	pop	r0
    401e:	df 91       	pop	r29
    4020:	cf 91       	pop	r28
    4022:	08 95       	ret

00004024 <_ZN14EthernetClient4readEPhj>:
    4024:	fc 01       	movw	r30, r24
    4026:	84 85       	ldd	r24, Z+12	; 0x0c
    4028:	e8 c3       	rjmp	.+2000   	; 0x47fa <_Z4recvhPhi>

0000402a <_ZN14EthernetClient4peekEv>:
    402a:	0f 93       	push	r16
    402c:	1f 93       	push	r17
    402e:	cf 93       	push	r28
    4030:	df 93       	push	r29
    4032:	1f 92       	push	r1
    4034:	cd b7       	in	r28, 0x3d	; 61
    4036:	de b7       	in	r29, 0x3e	; 62
    4038:	8c 01       	movw	r16, r24
    403a:	dc 01       	movw	r26, r24
    403c:	ed 91       	ld	r30, X+
    403e:	fc 91       	ld	r31, X
    4040:	00 84       	ldd	r0, Z+8	; 0x08
    4042:	f1 85       	ldd	r31, Z+9	; 0x09
    4044:	e0 2d       	mov	r30, r0
    4046:	09 95       	icall
    4048:	89 2b       	or	r24, r25
    404a:	49 f0       	breq	.+18     	; 0x405e <_ZN14EthernetClient4peekEv+0x34>
    404c:	be 01       	movw	r22, r28
    404e:	6f 5f       	subi	r22, 0xFF	; 255
    4050:	7f 4f       	sbci	r23, 0xFF	; 255
    4052:	f8 01       	movw	r30, r16
    4054:	84 85       	ldd	r24, Z+12	; 0x0c
    4056:	12 d4       	rcall	.+2084   	; 0x487c <_Z4peekhPh>
    4058:	89 81       	ldd	r24, Y+1	; 0x01
    405a:	90 e0       	ldi	r25, 0x00	; 0
    405c:	02 c0       	rjmp	.+4      	; 0x4062 <_ZN14EthernetClient4peekEv+0x38>
    405e:	8f ef       	ldi	r24, 0xFF	; 255
    4060:	9f ef       	ldi	r25, 0xFF	; 255
    4062:	0f 90       	pop	r0
    4064:	df 91       	pop	r29
    4066:	cf 91       	pop	r28
    4068:	1f 91       	pop	r17
    406a:	0f 91       	pop	r16
    406c:	08 95       	ret

0000406e <_ZN14EthernetClient5flushEv>:
    406e:	fc 01       	movw	r30, r24
    4070:	84 85       	ldd	r24, Z+12	; 0x0c
    4072:	11 c4       	rjmp	.+2082   	; 0x4896 <_Z5flushh>

00004074 <_ZN14EthernetClientC1Ev>:
    4074:	fc 01       	movw	r30, r24
    4076:	13 82       	std	Z+3, r1	; 0x03
    4078:	12 82       	std	Z+2, r1	; 0x02
    407a:	88 ee       	ldi	r24, 0xE8	; 232
    407c:	93 e0       	ldi	r25, 0x03	; 3
    407e:	a0 e0       	ldi	r26, 0x00	; 0
    4080:	b0 e0       	ldi	r27, 0x00	; 0
    4082:	84 83       	std	Z+4, r24	; 0x04
    4084:	95 83       	std	Z+5, r25	; 0x05
    4086:	a6 83       	std	Z+6, r26	; 0x06
    4088:	b7 83       	std	Z+7, r27	; 0x07
    408a:	81 ec       	ldi	r24, 0xC1	; 193
    408c:	97 e0       	ldi	r25, 0x07	; 7
    408e:	91 83       	std	Z+1, r25	; 0x01
    4090:	80 83       	st	Z, r24
    4092:	88 e0       	ldi	r24, 0x08	; 8
    4094:	84 87       	std	Z+12, r24	; 0x0c
    4096:	08 95       	ret

00004098 <_ZN14EthernetClient6statusEv>:
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
}

uint8_t EthernetClient::status() {
  if (_sock == MAX_SOCK_NUM) return SnSR::CLOSED;
    4098:	fc 01       	movw	r30, r24
    409a:	64 85       	ldd	r22, Z+12	; 0x0c
    409c:	68 30       	cpi	r22, 0x08	; 8
    409e:	39 f0       	breq	.+14     	; 0x40ae <_ZN14EthernetClient6statusEv+0x16>

extern W5500Class w5500;

uint8_t W5500Class::readSn(SOCKET _s, uint16_t _addr) {
    uint8_t cntl_byte = (_s<<5)+0x08;
    return read(_addr, cntl_byte);
    40a0:	62 95       	swap	r22
    40a2:	66 0f       	add	r22, r22
    40a4:	60 7e       	andi	r22, 0xE0	; 224
    40a6:	68 5f       	subi	r22, 0xF8	; 248
    40a8:	83 e0       	ldi	r24, 0x03	; 3
    40aa:	90 e0       	ldi	r25, 0x00	; 0
    40ac:	df c4       	rjmp	.+2494   	; 0x4a6c <_ZN10W5500Class4readEjh>
  return w5500.readSnSR(_sock);
}
    40ae:	80 e0       	ldi	r24, 0x00	; 0
    40b0:	08 95       	ret

000040b2 <_ZN14EthernetClient9connectedEv>:

  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
    40b2:	cf 93       	push	r28
    40b4:	df 93       	push	r29
  if (_sock == MAX_SOCK_NUM) return 0;
    40b6:	fc 01       	movw	r30, r24
    40b8:	24 85       	ldd	r18, Z+12	; 0x0c
    40ba:	28 30       	cpi	r18, 0x08	; 8
    40bc:	c9 f0       	breq	.+50     	; 0x40f0 <_ZN14EthernetClient9connectedEv+0x3e>
    40be:	ec 01       	movw	r28, r24
  
  uint8_t s = status();
    40c0:	eb df       	rcall	.-42     	; 0x4098 <_ZN14EthernetClient6statusEv>
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
    40c2:	84 31       	cpi	r24, 0x14	; 20
    40c4:	81 f0       	breq	.+32     	; 0x40e6 <_ZN14EthernetClient9connectedEv+0x34>

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
  
  uint8_t s = status();
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    40c6:	88 23       	and	r24, r24
    40c8:	71 f0       	breq	.+28     	; 0x40e6 <_ZN14EthernetClient9connectedEv+0x34>
    40ca:	88 31       	cpi	r24, 0x18	; 24
    40cc:	61 f0       	breq	.+24     	; 0x40e6 <_ZN14EthernetClient9connectedEv+0x34>
    (s == SnSR::CLOSE_WAIT && !available()));
    40ce:	8c 31       	cpi	r24, 0x1C	; 28
    40d0:	61 f4       	brne	.+24     	; 0x40ea <_ZN14EthernetClient9connectedEv+0x38>
    40d2:	e8 81       	ld	r30, Y
    40d4:	f9 81       	ldd	r31, Y+1	; 0x01
    40d6:	00 84       	ldd	r0, Z+8	; 0x08
    40d8:	f1 85       	ldd	r31, Z+9	; 0x09
    40da:	e0 2d       	mov	r30, r0
    40dc:	ce 01       	movw	r24, r28
    40de:	09 95       	icall
    40e0:	21 e0       	ldi	r18, 0x01	; 1
    40e2:	89 2b       	or	r24, r25
    40e4:	19 f4       	brne	.+6      	; 0x40ec <_ZN14EthernetClient9connectedEv+0x3a>
    40e6:	20 e0       	ldi	r18, 0x00	; 0
    40e8:	01 c0       	rjmp	.+2      	; 0x40ec <_ZN14EthernetClient9connectedEv+0x3a>
    40ea:	21 e0       	ldi	r18, 0x01	; 1
    40ec:	82 2f       	mov	r24, r18
    40ee:	01 c0       	rjmp	.+2      	; 0x40f2 <_ZN14EthernetClient9connectedEv+0x40>
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
    40f0:	80 e0       	ldi	r24, 0x00	; 0
  
  uint8_t s = status();
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
}
    40f2:	df 91       	pop	r29
    40f4:	cf 91       	pop	r28
    40f6:	08 95       	ret

000040f8 <_ZN14EthernetClient4stopEv>:

void EthernetClient::flush() {
  ::flush(_sock);
}

void EthernetClient::stop() {
    40f8:	cf 92       	push	r12
    40fa:	df 92       	push	r13
    40fc:	ef 92       	push	r14
    40fe:	ff 92       	push	r15
    4100:	cf 93       	push	r28
    4102:	df 93       	push	r29
    4104:	ec 01       	movw	r28, r24
  if (_sock == MAX_SOCK_NUM)
    4106:	8c 85       	ldd	r24, Y+12	; 0x0c
    4108:	88 30       	cpi	r24, 0x08	; 8
    410a:	69 f1       	breq	.+90     	; 0x4166 <__stack+0x67>
    return;

  // attempt to close the connection gracefully (send a FIN to other side)
  disconnect(_sock);
    410c:	29 d3       	rcall	.+1618   	; 0x4760 <_Z10disconnecth>
  unsigned long start = millis();
    410e:	0e 94 cd 30 	call	0x619a	; 0x619a <millis>
    4112:	6b 01       	movw	r12, r22
    4114:	7c 01       	movw	r14, r24

  // wait a second for the connection to close
  while (status() != SnSR::CLOSED && millis() - start < 1000)
    4116:	ce 01       	movw	r24, r28
    4118:	bf df       	rcall	.-130    	; 0x4098 <_ZN14EthernetClient6statusEv>
    411a:	88 23       	and	r24, r24
    411c:	a1 f0       	breq	.+40     	; 0x4146 <__stack+0x47>
    411e:	0e 94 cd 30 	call	0x619a	; 0x619a <millis>
    4122:	dc 01       	movw	r26, r24
    4124:	cb 01       	movw	r24, r22
    4126:	8c 19       	sub	r24, r12
    4128:	9d 09       	sbc	r25, r13
    412a:	ae 09       	sbc	r26, r14
    412c:	bf 09       	sbc	r27, r15
    412e:	88 3e       	cpi	r24, 0xE8	; 232
    4130:	93 40       	sbci	r25, 0x03	; 3
    4132:	a1 05       	cpc	r26, r1
    4134:	b1 05       	cpc	r27, r1
    4136:	38 f4       	brcc	.+14     	; 0x4146 <__stack+0x47>
    delay(1);
    4138:	61 e0       	ldi	r22, 0x01	; 1
    413a:	70 e0       	ldi	r23, 0x00	; 0
    413c:	80 e0       	ldi	r24, 0x00	; 0
    413e:	90 e0       	ldi	r25, 0x00	; 0
    4140:	0e 94 fe 30 	call	0x61fc	; 0x61fc <delay>

  // if it hasn't closed, close it forcefully
  if (status() != SnSR::CLOSED)
    4144:	e8 cf       	rjmp	.-48     	; 0x4116 <__stack+0x17>
    4146:	ce 01       	movw	r24, r28
    4148:	a7 df       	rcall	.-178    	; 0x4098 <_ZN14EthernetClient6statusEv>
    414a:	88 23       	and	r24, r24
    close(_sock);
    414c:	11 f0       	breq	.+4      	; 0x4152 <__stack+0x53>
    414e:	8c 85       	ldd	r24, Y+12	; 0x0c
    4150:	96 d2       	rcall	.+1324   	; 0x467e <_Z5closeh>

  EthernetClass::_server_port[_sock] = 0;
    4152:	ec 85       	ldd	r30, Y+12	; 0x0c
    4154:	f0 e0       	ldi	r31, 0x00	; 0
    4156:	ee 0f       	add	r30, r30
    4158:	ff 1f       	adc	r31, r31
    415a:	e7 52       	subi	r30, 0x27	; 39
    415c:	f6 4f       	sbci	r31, 0xF6	; 246
    415e:	11 82       	std	Z+1, r1	; 0x01
    4160:	10 82       	st	Z, r1
  _sock = MAX_SOCK_NUM;
    4162:	88 e0       	ldi	r24, 0x08	; 8
    4164:	8c 87       	std	Y+12, r24	; 0x0c
}
    4166:	df 91       	pop	r29
    4168:	cf 91       	pop	r28
    416a:	ff 90       	pop	r15
    416c:	ef 90       	pop	r14
    416e:	df 90       	pop	r13
    4170:	cf 90       	pop	r12
    4172:	08 95       	ret

00004174 <_ZN14EthernetClient7connectE9IPAddressj>:
  } else {
    return ret;
  }
}

int EthernetClient::connect(IPAddress ip, uint16_t port) {
    4174:	cf 92       	push	r12
    4176:	df 92       	push	r13
    4178:	ff 92       	push	r15
    417a:	0f 93       	push	r16
    417c:	1f 93       	push	r17
    417e:	cf 93       	push	r28
    4180:	df 93       	push	r29
  if (_sock != MAX_SOCK_NUM)
    4182:	fc 01       	movw	r30, r24
    4184:	24 85       	ldd	r18, Z+12	; 0x0c
    4186:	28 30       	cpi	r18, 0x08	; 8
    4188:	c1 f5       	brne	.+112    	; 0x41fa <_ZN14EthernetClient7connectE9IPAddressj+0x86>
    418a:	6a 01       	movw	r12, r20
    418c:	8b 01       	movw	r16, r22
    418e:	ec 01       	movw	r28, r24
    4190:	f1 2c       	mov	r15, r1
    4192:	6f 2d       	mov	r22, r15
    4194:	62 95       	swap	r22
    4196:	66 0f       	add	r22, r22
    4198:	60 7e       	andi	r22, 0xE0	; 224
    419a:	68 5f       	subi	r22, 0xF8	; 248
    419c:	83 e0       	ldi	r24, 0x03	; 3
    419e:	90 e0       	ldi	r25, 0x00	; 0
    41a0:	65 d4       	rcall	.+2250   	; 0x4a6c <_ZN10W5500Class4readEjh>
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
    41a2:	81 11       	cpse	r24, r1
    41a4:	02 c0       	rjmp	.+4      	; 0x41aa <_ZN14EthernetClient7connectE9IPAddressj+0x36>
      _sock = i;
    41a6:	fc 86       	std	Y+12, r15	; 0x0c
    41a8:	07 c0       	rjmp	.+14     	; 0x41b8 <_ZN14EthernetClient7connectE9IPAddressj+0x44>
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
    41aa:	8b 7f       	andi	r24, 0xFB	; 251
    41ac:	88 31       	cpi	r24, 0x18	; 24
    41ae:	d9 f3       	breq	.-10     	; 0x41a6 <_ZN14EthernetClient7connectE9IPAddressj+0x32>
    41b0:	f3 94       	inc	r15

int EthernetClient::connect(IPAddress ip, uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    41b2:	f8 e0       	ldi	r31, 0x08	; 8
    41b4:	ff 12       	cpse	r15, r31
    41b6:	ed cf       	rjmp	.-38     	; 0x4192 <_ZN14EthernetClient7connectE9IPAddressj+0x1e>
      _sock = i;
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
    41b8:	8c 85       	ldd	r24, Y+12	; 0x0c
    41ba:	88 30       	cpi	r24, 0x08	; 8
    41bc:	f1 f0       	breq	.+60     	; 0x41fa <_ZN14EthernetClient7connectE9IPAddressj+0x86>
    return 0;

  _srcport++;
    41be:	20 91 5d 01 	lds	r18, 0x015D	; 0x80015d <_ZN14EthernetClient8_srcportE>
    41c2:	30 91 5e 01 	lds	r19, 0x015E	; 0x80015e <_ZN14EthernetClient8_srcportE+0x1>
    41c6:	2f 5f       	subi	r18, 0xFF	; 255
    41c8:	3f 4f       	sbci	r19, 0xFF	; 255
  if (_srcport == 0) _srcport = 1024;
    41ca:	11 f4       	brne	.+4      	; 0x41d0 <_ZN14EthernetClient7connectE9IPAddressj+0x5c>
    41cc:	20 e0       	ldi	r18, 0x00	; 0
    41ce:	34 e0       	ldi	r19, 0x04	; 4
    41d0:	30 93 5e 01 	sts	0x015E, r19	; 0x80015e <_ZN14EthernetClient8_srcportE+0x1>
    41d4:	20 93 5d 01 	sts	0x015D, r18	; 0x80015d <_ZN14EthernetClient8_srcportE>
  socket(_sock, SnMR::TCP, _srcport, 0);
    41d8:	40 91 5d 01 	lds	r20, 0x015D	; 0x80015d <_ZN14EthernetClient8_srcportE>
    41dc:	50 91 5e 01 	lds	r21, 0x015E	; 0x80015e <_ZN14EthernetClient8_srcportE+0x1>
    41e0:	20 e0       	ldi	r18, 0x00	; 0
    41e2:	61 e0       	ldi	r22, 0x01	; 1
    41e4:	57 d2       	rcall	.+1198   	; 0x4694 <_Z6sockethhjh>

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    41e6:	b8 01       	movw	r22, r16
    41e8:	6e 5f       	subi	r22, 0xFE	; 254
    41ea:	7f 4f       	sbci	r23, 0xFF	; 255

  if (!::connect(_sock, rawIPAddress(ip), port)) {
    41ec:	a6 01       	movw	r20, r12
    41ee:	8c 85       	ldd	r24, Y+12	; 0x0c
    41f0:	84 d2       	rcall	.+1288   	; 0x46fa <_Z7connecthPhj>
    41f2:	81 11       	cpse	r24, r1
    41f4:	05 c0       	rjmp	.+10     	; 0x4200 <_ZN14EthernetClient7connectE9IPAddressj+0x8c>
    _sock = MAX_SOCK_NUM;
    41f6:	88 e0       	ldi	r24, 0x08	; 8
    41f8:	8c 87       	std	Y+12, r24	; 0x0c
    return 0;
    41fa:	80 e0       	ldi	r24, 0x00	; 0
    41fc:	90 e0       	ldi	r25, 0x00	; 0
  }

  while (status() != SnSR::ESTABLISHED) {
    41fe:	0f c0       	rjmp	.+30     	; 0x421e <_ZN14EthernetClient7connectE9IPAddressj+0xaa>
    4200:	ce 01       	movw	r24, r28
    4202:	4a df       	rcall	.-364    	; 0x4098 <_ZN14EthernetClient6statusEv>
    4204:	87 31       	cpi	r24, 0x17	; 23
    4206:	49 f0       	breq	.+18     	; 0x421a <_ZN14EthernetClient7connectE9IPAddressj+0xa6>
    delay(1);
    4208:	61 e0       	ldi	r22, 0x01	; 1
    420a:	70 e0       	ldi	r23, 0x00	; 0
    420c:	80 e0       	ldi	r24, 0x00	; 0
    420e:	90 e0       	ldi	r25, 0x00	; 0
    4210:	0e 94 fe 30 	call	0x61fc	; 0x61fc <delay>
    if (status() == SnSR::CLOSED) {
    4214:	ce 01       	movw	r24, r28
    4216:	40 df       	rcall	.-384    	; 0x4098 <_ZN14EthernetClient6statusEv>
    4218:	ec cf       	rjmp	.-40     	; 0x41f2 <_ZN14EthernetClient7connectE9IPAddressj+0x7e>
      _sock = MAX_SOCK_NUM;
      return 0;
    }
  }

  return 1;
    421a:	81 e0       	ldi	r24, 0x01	; 1
    421c:	90 e0       	ldi	r25, 0x00	; 0
}
    421e:	df 91       	pop	r29
    4220:	cf 91       	pop	r28
    4222:	1f 91       	pop	r17
    4224:	0f 91       	pop	r16
    4226:	ff 90       	pop	r15
    4228:	df 90       	pop	r13
    422a:	cf 90       	pop	r12
    422c:	08 95       	ret

0000422e <_GLOBAL__sub_I__ZN14EthernetClient8_srcportE>:
  return _sock != MAX_SOCK_NUM;
}

bool EthernetClient::operator==(const EthernetClient& rhs) {
  return _sock == rhs._sock && _sock != MAX_SOCK_NUM && rhs._sock != MAX_SOCK_NUM;
}
    422e:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    4230:	00 e0       	ldi	r16, 0x00	; 0
    4232:	20 e0       	ldi	r18, 0x00	; 0
    4234:	40 e0       	ldi	r20, 0x00	; 0
    4236:	60 e0       	ldi	r22, 0x00	; 0
    4238:	8f ee       	ldi	r24, 0xEF	; 239
    423a:	99 e0       	ldi	r25, 0x09	; 9
    423c:	0e 94 4c 2f 	call	0x5e98	; 0x5e98 <_ZN9IPAddressC1Ehhhh>
    4240:	0f 91       	pop	r16
    4242:	08 95       	ret

00004244 <_GLOBAL__sub_I__ZN14EthernetServerC2Ej>:
      n += client.write(buffer, size);
    }
  }
  
  return n;
}
    4244:	0f 93       	push	r16
    4246:	00 e0       	ldi	r16, 0x00	; 0
    4248:	20 e0       	ldi	r18, 0x00	; 0
    424a:	40 e0       	ldi	r20, 0x00	; 0
    424c:	60 e0       	ldi	r22, 0x00	; 0
    424e:	85 ef       	ldi	r24, 0xF5	; 245
    4250:	99 e0       	ldi	r25, 0x09	; 9
    4252:	0e 94 4c 2f 	call	0x5e98	; 0x5e98 <_ZN9IPAddressC1Ehhhh>
    4256:	0f 91       	pop	r16
    4258:	08 95       	ret

0000425a <_ZN3UDP14beginMulticastE9IPAddressj>:

class UDP : public Stream {

public:
  virtual uint8_t begin(uint16_t) =0;  // initialize, start listening on specified port. Returns 1 if successful, 0 if there are no sockets available to use
  virtual uint8_t beginMulticast(IPAddress, uint16_t) { return 0; }  // initialize, start listening on specified multicast IP address and port. Returns 1 if successful, 0 on failure
    425a:	80 e0       	ldi	r24, 0x00	; 0
    425c:	08 95       	ret

0000425e <_ZN11EthernetUDP4readEPcj>:
  // Read up to len bytes from the current packet and place them into buffer
  // Returns the number of bytes read, or 0 if none are available
  virtual int read(unsigned char* buffer, size_t len);
  // Read up to len characters from the current packet and place them into buffer
  // Returns the number of characters read, or 0 if none are available
  virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
    425e:	dc 01       	movw	r26, r24
    4260:	ed 91       	ld	r30, X+
    4262:	fc 91       	ld	r31, X
    4264:	04 8c       	ldd	r0, Z+28	; 0x1c
    4266:	f5 8d       	ldd	r31, Z+29	; 0x1d
    4268:	e0 2d       	mov	r30, r0
    426a:	09 94       	ijmp

0000426c <_ZN11EthernetUDP8remoteIPEv>:
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    426c:	25 e4       	ldi	r18, 0x45	; 69
    426e:	38 e0       	ldi	r19, 0x08	; 8
    4270:	fc 01       	movw	r30, r24
    4272:	31 83       	std	Z+1, r19	; 0x01
    4274:	20 83       	st	Z, r18
    4276:	fb 01       	movw	r30, r22
    4278:	41 89       	ldd	r20, Z+17	; 0x11
    427a:	52 89       	ldd	r21, Z+18	; 0x12
    427c:	63 89       	ldd	r22, Z+19	; 0x13
    427e:	74 89       	ldd	r23, Z+20	; 0x14
    4280:	fc 01       	movw	r30, r24
    4282:	42 83       	std	Z+2, r20	; 0x02
    4284:	53 83       	std	Z+3, r21	; 0x03
    4286:	64 83       	std	Z+4, r22	; 0x04
    4288:	75 83       	std	Z+5, r23	; 0x05
  // Return the next byte from the current packet without moving on to the next byte
  virtual int peek();
  virtual void flush();	// Finish reading the current packet

  // Return the IP address of the host who sent the current incoming packet
  virtual IPAddress remoteIP() { return _remoteIP; };
    428a:	08 95       	ret

0000428c <_ZN11EthernetUDP10remotePortEv>:
  // Return the port of the host who sent the current incoming packet
  virtual uint16_t remotePort() { return _remotePort; };
    428c:	fc 01       	movw	r30, r24
    428e:	85 89       	ldd	r24, Z+21	; 0x15
    4290:	96 89       	ldd	r25, Z+22	; 0x16
    4292:	08 95       	ret

00004294 <_ZN11EthernetUDP9availableEv>:

/* return number of bytes available in the current packet,
   will return zero if parsePacket hasn't been called yet */
int EthernetUDP::available() {
  return _remaining;
}
    4294:	fc 01       	movw	r30, r24
    4296:	81 8d       	ldd	r24, Z+25	; 0x19
    4298:	92 8d       	ldd	r25, Z+26	; 0x1a
    429a:	08 95       	ret

0000429c <_ZN11EthernetUDP5writeEh>:
{
  return sendUDP(_sock);
}

size_t EthernetUDP::write(uint8_t byte)
{
    429c:	cf 93       	push	r28
    429e:	df 93       	push	r29
    42a0:	1f 92       	push	r1
    42a2:	cd b7       	in	r28, 0x3d	; 61
    42a4:	de b7       	in	r29, 0x3e	; 62
    42a6:	69 83       	std	Y+1, r22	; 0x01
  return write(&byte, 1);
    42a8:	dc 01       	movw	r26, r24
    42aa:	ed 91       	ld	r30, X+
    42ac:	fc 91       	ld	r31, X
    42ae:	02 80       	ldd	r0, Z+2	; 0x02
    42b0:	f3 81       	ldd	r31, Z+3	; 0x03
    42b2:	e0 2d       	mov	r30, r0
    42b4:	41 e0       	ldi	r20, 0x01	; 1
    42b6:	50 e0       	ldi	r21, 0x00	; 0
    42b8:	be 01       	movw	r22, r28
    42ba:	6f 5f       	subi	r22, 0xFF	; 255
    42bc:	7f 4f       	sbci	r23, 0xFF	; 255
    42be:	09 95       	icall
}
    42c0:	0f 90       	pop	r0
    42c2:	df 91       	pop	r29
    42c4:	cf 91       	pop	r28
    42c6:	08 95       	ret

000042c8 <_ZN11EthernetUDP5flushEv>:
  ::peek(_sock, &b);
  return b;
}

void EthernetUDP::flush()
{
    42c8:	cf 93       	push	r28
    42ca:	df 93       	push	r29
    42cc:	ec 01       	movw	r28, r24
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5500 always behaves :)

  while (_remaining)
    42ce:	89 8d       	ldd	r24, Y+25	; 0x19
    42d0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    42d2:	89 2b       	or	r24, r25
    42d4:	41 f0       	breq	.+16     	; 0x42e6 <_ZN11EthernetUDP5flushEv+0x1e>
  {
    read();
    42d6:	e8 81       	ld	r30, Y
    42d8:	f9 81       	ldd	r31, Y+1	; 0x01
    42da:	02 84       	ldd	r0, Z+10	; 0x0a
    42dc:	f3 85       	ldd	r31, Z+11	; 0x0b
    42de:	e0 2d       	mov	r30, r0
    42e0:	ce 01       	movw	r24, r28
    42e2:	09 95       	icall
{
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5500 always behaves :)

  while (_remaining)
    42e4:	f4 cf       	rjmp	.-24     	; 0x42ce <_ZN11EthernetUDP5flushEv+0x6>
  {
    read();
  }
}
    42e6:	df 91       	pop	r29
    42e8:	cf 91       	pop	r28
    42ea:	08 95       	ret

000042ec <_ZN11EthernetUDP4stopEv>:
  return _remaining;
}

/* Release any resources being used by this EthernetUDP instance */
void EthernetUDP::stop()
{
    42ec:	cf 93       	push	r28
    42ee:	df 93       	push	r29
    42f0:	ec 01       	movw	r28, r24
  if (_sock == MAX_SOCK_NUM)
    42f2:	8c 85       	ldd	r24, Y+12	; 0x0c
    42f4:	88 30       	cpi	r24, 0x08	; 8
    42f6:	59 f0       	breq	.+22     	; 0x430e <_ZN11EthernetUDP4stopEv+0x22>
    return;

  close(_sock);
    42f8:	c2 d1       	rcall	.+900    	; 0x467e <_Z5closeh>

  EthernetClass::_server_port[_sock] = 0;
    42fa:	ec 85       	ldd	r30, Y+12	; 0x0c
    42fc:	f0 e0       	ldi	r31, 0x00	; 0
    42fe:	ee 0f       	add	r30, r30
    4300:	ff 1f       	adc	r31, r31
    4302:	e7 52       	subi	r30, 0x27	; 39
    4304:	f6 4f       	sbci	r31, 0xF6	; 246
    4306:	11 82       	std	Z+1, r1	; 0x01
    4308:	10 82       	st	Z, r1
  _sock = MAX_SOCK_NUM;
    430a:	88 e0       	ldi	r24, 0x08	; 8
    430c:	8c 87       	std	Y+12, r24	; 0x0c
}
    430e:	df 91       	pop	r29
    4310:	cf 91       	pop	r28
    4312:	08 95       	ret

00004314 <_ZN11EthernetUDP11beginPacketE9IPAddressj>:
  }
}

int EthernetUDP::beginPacket(IPAddress ip, uint16_t port)
{
  _offset = 0;
    4314:	fc 01       	movw	r30, r24
    4316:	10 8e       	std	Z+24, r1	; 0x18
    4318:	17 8a       	std	Z+23, r1	; 0x17

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    431a:	6e 5f       	subi	r22, 0xFE	; 254
    431c:	7f 4f       	sbci	r23, 0xFF	; 255
  return startUDP(_sock, rawIPAddress(ip), port);
    431e:	84 85       	ldd	r24, Z+12	; 0x0c
    4320:	e6 c2       	rjmp	.+1484   	; 0x48ee <_Z8startUDPhPhj>

00004322 <_ZN11EthernetUDP9endPacketEv>:
}

int EthernetUDP::endPacket()
{
  return sendUDP(_sock);
    4322:	fc 01       	movw	r30, r24
    4324:	84 85       	ldd	r24, Z+12	; 0x0c
    4326:	06 c3       	rjmp	.+1548   	; 0x4934 <_Z7sendUDPh>

00004328 <_ZN11EthernetUDP5writeEPKhj>:
{
  return write(&byte, 1);
}

size_t EthernetUDP::write(const uint8_t *buffer, size_t size)
{
    4328:	cf 93       	push	r28
    432a:	df 93       	push	r29
    432c:	ec 01       	movw	r28, r24
    432e:	9a 01       	movw	r18, r20
  uint16_t bytes_written = bufferData(_sock, _offset, buffer, size);
    4330:	8f 89       	ldd	r24, Y+23	; 0x17
    4332:	98 8d       	ldd	r25, Y+24	; 0x18
    4334:	ab 01       	movw	r20, r22
    4336:	bc 01       	movw	r22, r24
    4338:	8c 85       	ldd	r24, Y+12	; 0x0c
    433a:	ae d2       	rcall	.+1372   	; 0x4898 <_Z10bufferDatahjPKhj>
  _offset += bytes_written;
    433c:	2f 89       	ldd	r18, Y+23	; 0x17
    433e:	38 8d       	ldd	r19, Y+24	; 0x18
    4340:	28 0f       	add	r18, r24
    4342:	39 1f       	adc	r19, r25
    4344:	38 8f       	std	Y+24, r19	; 0x18
    4346:	2f 8b       	std	Y+23, r18	; 0x17
  return bytes_written;
}
    4348:	df 91       	pop	r29
    434a:	cf 91       	pop	r28
    434c:	08 95       	ret

0000434e <_ZN11EthernetUDP4readEv>:
  // There aren't any packets available
  return 0;
}

int EthernetUDP::read()
{
    434e:	0f 93       	push	r16
    4350:	1f 93       	push	r17
    4352:	cf 93       	push	r28
    4354:	df 93       	push	r29
    4356:	1f 92       	push	r1
    4358:	cd b7       	in	r28, 0x3d	; 61
    435a:	de b7       	in	r29, 0x3e	; 62
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
    435c:	fc 01       	movw	r30, r24
    435e:	21 8d       	ldd	r18, Z+25	; 0x19
    4360:	32 8d       	ldd	r19, Z+26	; 0x1a
    4362:	23 2b       	or	r18, r19
    4364:	59 f0       	breq	.+22     	; 0x437c <_ZN11EthernetUDP4readEv+0x2e>
    4366:	8c 01       	movw	r16, r24
    4368:	41 e0       	ldi	r20, 0x01	; 1
    436a:	50 e0       	ldi	r21, 0x00	; 0
    436c:	be 01       	movw	r22, r28
    436e:	6f 5f       	subi	r22, 0xFF	; 255
    4370:	7f 4f       	sbci	r23, 0xFF	; 255
    4372:	84 85       	ldd	r24, Z+12	; 0x0c
    4374:	42 d2       	rcall	.+1156   	; 0x47fa <_Z4recvhPhi>
    4376:	18 16       	cp	r1, r24
    4378:	19 06       	cpc	r1, r25
    437a:	1c f0       	brlt	.+6      	; 0x4382 <_ZN11EthernetUDP4readEv+0x34>
    _remaining--;
    return byte;
  }

  // If we get here, there's no data available
  return -1;
    437c:	8f ef       	ldi	r24, 0xFF	; 255
    437e:	9f ef       	ldi	r25, 0xFF	; 255
    4380:	08 c0       	rjmp	.+16     	; 0x4392 <_ZN11EthernetUDP4readEv+0x44>
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
  {
    // We read things without any problems
    _remaining--;
    4382:	f8 01       	movw	r30, r16
    4384:	81 8d       	ldd	r24, Z+25	; 0x19
    4386:	92 8d       	ldd	r25, Z+26	; 0x1a
    4388:	01 97       	sbiw	r24, 0x01	; 1
    438a:	92 8f       	std	Z+26, r25	; 0x1a
    438c:	81 8f       	std	Z+25, r24	; 0x19
    return byte;
    438e:	89 81       	ldd	r24, Y+1	; 0x01
    4390:	90 e0       	ldi	r25, 0x00	; 0
  }

  // If we get here, there's no data available
  return -1;
}
    4392:	0f 90       	pop	r0
    4394:	df 91       	pop	r29
    4396:	cf 91       	pop	r28
    4398:	1f 91       	pop	r17
    439a:	0f 91       	pop	r16
    439c:	08 95       	ret

0000439e <_ZN11EthernetUDP4readEPhj>:

int EthernetUDP::read(unsigned char* buffer, size_t len)
{
    439e:	cf 93       	push	r28
    43a0:	df 93       	push	r29

  if (_remaining > 0)
    43a2:	fc 01       	movw	r30, r24
    43a4:	21 8d       	ldd	r18, Z+25	; 0x19
    43a6:	32 8d       	ldd	r19, Z+26	; 0x1a
    43a8:	21 15       	cp	r18, r1
    43aa:	31 05       	cpc	r19, r1
    43ac:	19 f4       	brne	.+6      	; 0x43b4 <_ZN11EthernetUDP4readEPhj+0x16>
    }

  }

  // If we get here, there's no data available or recv failed
  return -1;
    43ae:	8f ef       	ldi	r24, 0xFF	; 255
    43b0:	9f ef       	ldi	r25, 0xFF	; 255
    43b2:	10 c0       	rjmp	.+32     	; 0x43d4 <_ZN11EthernetUDP4readEPhj+0x36>
    43b4:	ec 01       	movw	r28, r24
  if (_remaining > 0)
  {

    int got;

    if (_remaining <= len)
    43b6:	42 17       	cp	r20, r18
    43b8:	53 07       	cpc	r21, r19
    43ba:	08 f0       	brcs	.+2      	; 0x43be <_ZN11EthernetUDP4readEPhj+0x20>
    {
      // data should fit in the buffer
      got = recv(_sock, buffer, _remaining);
    43bc:	a9 01       	movw	r20, r18
    }
    else
    {
      // too much data for the buffer, 
      // grab as much as will fit
      got = recv(_sock, buffer, len);
    43be:	8c 85       	ldd	r24, Y+12	; 0x0c
    43c0:	1c d2       	rcall	.+1080   	; 0x47fa <_Z4recvhPhi>
    }

    if (got > 0)
    43c2:	18 16       	cp	r1, r24
    43c4:	19 06       	cpc	r1, r25
    43c6:	9c f7       	brge	.-26     	; 0x43ae <_ZN11EthernetUDP4readEPhj+0x10>
    {
      _remaining -= got;
    43c8:	29 8d       	ldd	r18, Y+25	; 0x19
    43ca:	3a 8d       	ldd	r19, Y+26	; 0x1a
    43cc:	28 1b       	sub	r18, r24
    43ce:	39 0b       	sbc	r19, r25
    43d0:	3a 8f       	std	Y+26, r19	; 0x1a
    43d2:	29 8f       	std	Y+25, r18	; 0x19
  }

  // If we get here, there's no data available or recv failed
  return -1;

}
    43d4:	df 91       	pop	r29
    43d6:	cf 91       	pop	r28
    43d8:	08 95       	ret

000043da <_ZN11EthernetUDP4peekEv>:

int EthernetUDP::peek()
{
    43da:	cf 93       	push	r28
    43dc:	df 93       	push	r29
    43de:	1f 92       	push	r1
    43e0:	cd b7       	in	r28, 0x3d	; 61
    43e2:	de b7       	in	r29, 0x3e	; 62
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
    43e4:	fc 01       	movw	r30, r24
    43e6:	21 8d       	ldd	r18, Z+25	; 0x19
    43e8:	32 8d       	ldd	r19, Z+26	; 0x1a
    43ea:	23 2b       	or	r18, r19
    43ec:	41 f0       	breq	.+16     	; 0x43fe <_ZN11EthernetUDP4peekEv+0x24>
    return -1;
  ::peek(_sock, &b);
    43ee:	be 01       	movw	r22, r28
    43f0:	6f 5f       	subi	r22, 0xFF	; 255
    43f2:	7f 4f       	sbci	r23, 0xFF	; 255
    43f4:	84 85       	ldd	r24, Z+12	; 0x0c
    43f6:	42 d2       	rcall	.+1156   	; 0x487c <_Z4peekhPh>
  return b;
    43f8:	89 81       	ldd	r24, Y+1	; 0x01
    43fa:	90 e0       	ldi	r25, 0x00	; 0
    43fc:	02 c0       	rjmp	.+4      	; 0x4402 <_ZN11EthernetUDP4peekEv+0x28>
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
    return -1;
    43fe:	8f ef       	ldi	r24, 0xFF	; 255
    4400:	9f ef       	ldi	r25, 0xFF	; 255
  ::peek(_sock, &b);
  return b;
}
    4402:	0f 90       	pop	r0
    4404:	df 91       	pop	r29
    4406:	cf 91       	pop	r28
    4408:	08 95       	ret

0000440a <_ZN11EthernetUDP5beginEj>:

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
    440a:	ef 92       	push	r14
    440c:	ff 92       	push	r15
    440e:	1f 93       	push	r17
    4410:	cf 93       	push	r28
    4412:	df 93       	push	r29
  if (_sock != MAX_SOCK_NUM)
    4414:	fc 01       	movw	r30, r24
    4416:	24 85       	ldd	r18, Z+12	; 0x0c
    4418:	28 30       	cpi	r18, 0x08	; 8
    441a:	11 f0       	breq	.+4      	; 0x4420 <_ZN11EthernetUDP5beginEj+0x16>
    return 0;
    441c:	80 e0       	ldi	r24, 0x00	; 0
    441e:	20 c0       	rjmp	.+64     	; 0x4460 <_ZN11EthernetUDP5beginEj+0x56>
    4420:	7b 01       	movw	r14, r22
    4422:	ec 01       	movw	r28, r24
    4424:	10 e0       	ldi	r17, 0x00	; 0
    4426:	61 2f       	mov	r22, r17
    4428:	62 95       	swap	r22
    442a:	66 0f       	add	r22, r22
    442c:	60 7e       	andi	r22, 0xE0	; 224
    442e:	68 5f       	subi	r22, 0xF8	; 248
    4430:	83 e0       	ldi	r24, 0x03	; 3
    4432:	90 e0       	ldi	r25, 0x00	; 0
    4434:	1b d3       	rcall	.+1590   	; 0x4a6c <_ZN10W5500Class4readEjh>

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
    4436:	81 11       	cpse	r24, r1
    4438:	02 c0       	rjmp	.+4      	; 0x443e <_ZN11EthernetUDP5beginEj+0x34>
      _sock = i;
    443a:	1c 87       	std	Y+12, r17	; 0x0c
    443c:	05 c0       	rjmp	.+10     	; 0x4448 <_ZN11EthernetUDP5beginEj+0x3e>
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
    443e:	88 31       	cpi	r24, 0x18	; 24
    4440:	e1 f3       	breq	.-8      	; 0x443a <_ZN11EthernetUDP5beginEj+0x30>
    4442:	1f 5f       	subi	r17, 0xFF	; 255
/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    4444:	18 30       	cpi	r17, 0x08	; 8
    4446:	79 f7       	brne	.-34     	; 0x4426 <_ZN11EthernetUDP5beginEj+0x1c>
      _sock = i;
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
    4448:	8c 85       	ldd	r24, Y+12	; 0x0c
    444a:	88 30       	cpi	r24, 0x08	; 8
    444c:	39 f3       	breq	.-50     	; 0x441c <_ZN11EthernetUDP5beginEj+0x12>
    return 0;

  _port = port;
    444e:	fe 86       	std	Y+14, r15	; 0x0e
    4450:	ed 86       	std	Y+13, r14	; 0x0d
  _remaining = 0;
    4452:	1a 8e       	std	Y+26, r1	; 0x1a
    4454:	19 8e       	std	Y+25, r1	; 0x19
  socket(_sock, SnMR::UDP, _port, 0);
    4456:	20 e0       	ldi	r18, 0x00	; 0
    4458:	a7 01       	movw	r20, r14
    445a:	62 e0       	ldi	r22, 0x02	; 2
    445c:	1b d1       	rcall	.+566    	; 0x4694 <_Z6sockethhjh>

  return 1;
    445e:	81 e0       	ldi	r24, 0x01	; 1
}
    4460:	df 91       	pop	r29
    4462:	cf 91       	pop	r28
    4464:	1f 91       	pop	r17
    4466:	ff 90       	pop	r15
    4468:	ef 90       	pop	r14
    446a:	08 95       	ret

0000446c <_ZN11EthernetUDP11parsePacketEv>:
  _offset += bytes_written;
  return bytes_written;
}

int EthernetUDP::parsePacket()
{
    446c:	0f 93       	push	r16
    446e:	1f 93       	push	r17
    4470:	cf 93       	push	r28
    4472:	df 93       	push	r29
    4474:	cd b7       	in	r28, 0x3d	; 61
    4476:	de b7       	in	r29, 0x3e	; 62
    4478:	28 97       	sbiw	r28, 0x08	; 8
    447a:	0f b6       	in	r0, 0x3f	; 63
    447c:	f8 94       	cli
    447e:	de bf       	out	0x3e, r29	; 62
    4480:	0f be       	out	0x3f, r0	; 63
    4482:	cd bf       	out	0x3d, r28	; 61
    4484:	8c 01       	movw	r16, r24
  // discard any remaining bytes in the last packet
  flush();
    4486:	dc 01       	movw	r26, r24
    4488:	ed 91       	ld	r30, X+
    448a:	fc 91       	ld	r31, X
    448c:	06 80       	ldd	r0, Z+6	; 0x06
    448e:	f7 81       	ldd	r31, Z+7	; 0x07
    4490:	e0 2d       	mov	r30, r0
    4492:	09 95       	icall

  if (w5500.getRXReceivedSize(_sock) > 0)
    4494:	f8 01       	movw	r30, r16
    4496:	64 85       	ldd	r22, Z+12	; 0x0c
    4498:	86 e0       	ldi	r24, 0x06	; 6
    449a:	9a e0       	ldi	r25, 0x0A	; 10
    449c:	77 d3       	rcall	.+1774   	; 0x4b8c <_ZN10W5500Class17getRXReceivedSizeEh>
    449e:	89 2b       	or	r24, r25
    44a0:	39 f1       	breq	.+78     	; 0x44f0 <_ZN11EthernetUDP11parsePacketEv+0x84>
  {
    //HACK - hand-parse the UDP packet using TCP recv method
    uint8_t tmpBuf[8];
    int ret =0; 
    //read 8 header bytes and get IP and port from it
    ret = recv(_sock,tmpBuf,8);
    44a2:	48 e0       	ldi	r20, 0x08	; 8
    44a4:	50 e0       	ldi	r21, 0x00	; 0
    44a6:	be 01       	movw	r22, r28
    44a8:	6f 5f       	subi	r22, 0xFF	; 255
    44aa:	7f 4f       	sbci	r23, 0xFF	; 255
    44ac:	d8 01       	movw	r26, r16
    44ae:	1c 96       	adiw	r26, 0x0c	; 12
    44b0:	8c 91       	ld	r24, X
    44b2:	a3 d1       	rcall	.+838    	; 0x47fa <_Z4recvhPhi>
    if (ret > 0)
    44b4:	18 16       	cp	r1, r24
    44b6:	19 06       	cpc	r1, r25
    44b8:	ec f4       	brge	.+58     	; 0x44f4 <_ZN11EthernetUDP11parsePacketEv+0x88>
    {
      _remoteIP = tmpBuf;
    44ba:	be 01       	movw	r22, r28
    44bc:	6f 5f       	subi	r22, 0xFF	; 255
    44be:	7f 4f       	sbci	r23, 0xFF	; 255
    44c0:	c8 01       	movw	r24, r16
    44c2:	0f 96       	adiw	r24, 0x0f	; 15
    44c4:	0e 94 58 2f 	call	0x5eb0	; 0x5eb0 <_ZN9IPAddressaSEPKh>
      _remotePort = tmpBuf[4];
      _remotePort = (_remotePort << 8) + tmpBuf[5];
    44c8:	8d 81       	ldd	r24, Y+5	; 0x05
    44ca:	90 e0       	ldi	r25, 0x00	; 0
    44cc:	98 2f       	mov	r25, r24
    44ce:	88 27       	eor	r24, r24
    44d0:	2e 81       	ldd	r18, Y+6	; 0x06
    44d2:	82 0f       	add	r24, r18
    44d4:	91 1d       	adc	r25, r1
    44d6:	f8 01       	movw	r30, r16
    44d8:	96 8b       	std	Z+22, r25	; 0x16
    44da:	85 8b       	std	Z+21, r24	; 0x15
      _remaining = tmpBuf[6];
      _remaining = (_remaining << 8) + tmpBuf[7];
    44dc:	8f 81       	ldd	r24, Y+7	; 0x07
    44de:	90 e0       	ldi	r25, 0x00	; 0
    44e0:	98 2f       	mov	r25, r24
    44e2:	88 27       	eor	r24, r24
    44e4:	28 85       	ldd	r18, Y+8	; 0x08
    44e6:	82 0f       	add	r24, r18
    44e8:	91 1d       	adc	r25, r1
    44ea:	92 8f       	std	Z+26, r25	; 0x1a
    44ec:	81 8f       	std	Z+25, r24	; 0x19
    44ee:	02 c0       	rjmp	.+4      	; 0x44f4 <_ZN11EthernetUDP11parsePacketEv+0x88>
      ret = _remaining;
    }
    return ret;
  }
  // There aren't any packets available
  return 0;
    44f0:	80 e0       	ldi	r24, 0x00	; 0
    44f2:	90 e0       	ldi	r25, 0x00	; 0
}
    44f4:	28 96       	adiw	r28, 0x08	; 8
    44f6:	0f b6       	in	r0, 0x3f	; 63
    44f8:	f8 94       	cli
    44fa:	de bf       	out	0x3e, r29	; 62
    44fc:	0f be       	out	0x3f, r0	; 63
    44fe:	cd bf       	out	0x3d, r28	; 61
    4500:	df 91       	pop	r29
    4502:	cf 91       	pop	r28
    4504:	1f 91       	pop	r17
    4506:	0f 91       	pop	r16
    4508:	08 95       	ret

0000450a <_ZN11EthernetUDPC1Ev>:
#include "Ethernet2.h"
#include "Udp.h"
#include "Dns.h"

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}
    450a:	fc 01       	movw	r30, r24
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    450c:	13 82       	std	Z+3, r1	; 0x03
    450e:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    4510:	88 ee       	ldi	r24, 0xE8	; 232
    4512:	93 e0       	ldi	r25, 0x03	; 3
    4514:	a0 e0       	ldi	r26, 0x00	; 0
    4516:	b0 e0       	ldi	r27, 0x00	; 0
    4518:	84 83       	std	Z+4, r24	; 0x04
    451a:	95 83       	std	Z+5, r25	; 0x05
    451c:	a6 83       	std	Z+6, r26	; 0x06
    451e:	b7 83       	std	Z+7, r27	; 0x07
    4520:	83 ee       	ldi	r24, 0xE3	; 227
    4522:	97 e0       	ldi	r25, 0x07	; 7
    4524:	91 83       	std	Z+1, r25	; 0x01
    4526:	80 83       	st	Z, r24
    4528:	88 e0       	ldi	r24, 0x08	; 8
    452a:	84 87       	std	Z+12, r24	; 0x0c
    452c:	cf 01       	movw	r24, r30
    452e:	0f 96       	adiw	r24, 0x0f	; 15
    4530:	0c 94 42 2f 	jmp	0x5e84	; 0x5e84 <_ZN9IPAddressC1Ev>

00004534 <_ZN11EthernetUDP11beginPacketEPKcj>:
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

int EthernetUDP::beginPacket(const char *host, uint16_t port)
{
    4534:	cf 92       	push	r12
    4536:	df 92       	push	r13
    4538:	ef 92       	push	r14
    453a:	ff 92       	push	r15
    453c:	0f 93       	push	r16
    453e:	1f 93       	push	r17
    4540:	cf 93       	push	r28
    4542:	df 93       	push	r29
    4544:	cd b7       	in	r28, 0x3d	; 61
    4546:	de b7       	in	r29, 0x3e	; 62
    4548:	af 97       	sbiw	r28, 0x2f	; 47
    454a:	0f b6       	in	r0, 0x3f	; 63
    454c:	f8 94       	cli
    454e:	de bf       	out	0x3e, r29	; 62
    4550:	0f be       	out	0x3f, r0	; 63
    4552:	cd bf       	out	0x3d, r28	; 61
    4554:	8c 01       	movw	r16, r24
    4556:	6b 01       	movw	r12, r22
    4558:	7a 01       	movw	r14, r20
#ifndef DNSClient_h
#define DNSClient_h

#include <EthernetUdp2.h>

class DNSClient
    455a:	ce 01       	movw	r24, r28
    455c:	01 96       	adiw	r24, 0x01	; 1
    455e:	0e 94 42 2f 	call	0x5e84	; 0x5e84 <_ZN9IPAddressC1Ev>
    4562:	ce 01       	movw	r24, r28
    4564:	09 96       	adiw	r24, 0x09	; 9
    4566:	d1 df       	rcall	.-94     	; 0x450a <_ZN11EthernetUDPC1Ev>
  // Look up the host first
  int ret = 0;
  DNSClient dns;
  IPAddress remote_addr;
    4568:	ce 01       	movw	r24, r28
    456a:	8a 96       	adiw	r24, 0x2a	; 42
    456c:	0e 94 42 2f 	call	0x5e84	; 0x5e84 <_ZN9IPAddressC1Ev>

  dns.begin(Ethernet.dnsServerIP());
    4570:	6c ec       	ldi	r22, 0xCC	; 204
    4572:	79 e0       	ldi	r23, 0x09	; 9
    4574:	ce 01       	movw	r24, r28
    4576:	84 96       	adiw	r24, 0x24	; 36
    4578:	63 dc       	rcall	.-1850   	; 0x3e40 <_ZN13EthernetClass11dnsServerIPEv>
    457a:	be 01       	movw	r22, r28
    457c:	6c 5d       	subi	r22, 0xDC	; 220
    457e:	7f 4f       	sbci	r23, 0xFF	; 255
    4580:	ce 01       	movw	r24, r28
    4582:	01 96       	adiw	r24, 0x01	; 1
    4584:	28 d9       	rcall	.-3504   	; 0x37d6 <_ZN9DNSClient5beginERK9IPAddress>
  ret = dns.getHostByName(host, remote_addr);
    4586:	ae 01       	movw	r20, r28
    4588:	46 5d       	subi	r20, 0xD6	; 214
    458a:	5f 4f       	sbci	r21, 0xFF	; 255
    458c:	b6 01       	movw	r22, r12
    458e:	ce 01       	movw	r24, r28
    4590:	01 96       	adiw	r24, 0x01	; 1
    4592:	7b db       	rcall	.-2314   	; 0x3c8a <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>
  if (ret == 1) {
    4594:	81 30       	cpi	r24, 0x01	; 1
    4596:	91 05       	cpc	r25, r1
    4598:	c1 f4       	brne	.+48     	; 0x45ca <_ZN11EthernetUDP11beginPacketEPKcj+0x96>
    return beginPacket(remote_addr, port);
    459a:	d8 01       	movw	r26, r16
    459c:	ed 91       	ld	r30, X+
    459e:	fc 91       	ld	r31, X
    45a0:	04 88       	ldd	r0, Z+20	; 0x14
    45a2:	f5 89       	ldd	r31, Z+21	; 0x15
    45a4:	e0 2d       	mov	r30, r0
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    45a6:	85 e4       	ldi	r24, 0x45	; 69
    45a8:	98 e0       	ldi	r25, 0x08	; 8
    45aa:	9d a3       	std	Y+37, r25	; 0x25
    45ac:	8c a3       	std	Y+36, r24	; 0x24
    45ae:	8c a5       	ldd	r24, Y+44	; 0x2c
    45b0:	9d a5       	ldd	r25, Y+45	; 0x2d
    45b2:	ae a5       	ldd	r26, Y+46	; 0x2e
    45b4:	bf a5       	ldd	r27, Y+47	; 0x2f
    45b6:	8e a3       	std	Y+38, r24	; 0x26
    45b8:	9f a3       	std	Y+39, r25	; 0x27
    45ba:	a8 a7       	std	Y+40, r26	; 0x28
    45bc:	b9 a7       	std	Y+41, r27	; 0x29
    45be:	a7 01       	movw	r20, r14
    45c0:	be 01       	movw	r22, r28
    45c2:	6c 5d       	subi	r22, 0xDC	; 220
    45c4:	7f 4f       	sbci	r23, 0xFF	; 255
    45c6:	c8 01       	movw	r24, r16
    45c8:	09 95       	icall
  } else {
    return ret;
  }
}
    45ca:	af 96       	adiw	r28, 0x2f	; 47
    45cc:	0f b6       	in	r0, 0x3f	; 63
    45ce:	f8 94       	cli
    45d0:	de bf       	out	0x3e, r29	; 62
    45d2:	0f be       	out	0x3f, r0	; 63
    45d4:	cd bf       	out	0x3d, r28	; 61
    45d6:	df 91       	pop	r29
    45d8:	cf 91       	pop	r28
    45da:	1f 91       	pop	r17
    45dc:	0f 91       	pop	r16
    45de:	ff 90       	pop	r15
    45e0:	ef 90       	pop	r14
    45e2:	df 90       	pop	r13
    45e4:	cf 90       	pop	r12
    45e6:	08 95       	ret

000045e8 <_GLOBAL__sub_I__ZN11EthernetUDPC2Ev>:

  while (_remaining)
  {
    read();
  }
}
    45e8:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    45ea:	00 e0       	ldi	r16, 0x00	; 0
    45ec:	20 e0       	ldi	r18, 0x00	; 0
    45ee:	40 e0       	ldi	r20, 0x00	; 0
    45f0:	60 e0       	ldi	r22, 0x00	; 0
    45f2:	8b ef       	ldi	r24, 0xFB	; 251
    45f4:	99 e0       	ldi	r25, 0x09	; 9
    45f6:	0e 94 4c 2f 	call	0x5e98	; 0x5e98 <_ZN9IPAddressC1Ehhhh>
    45fa:	0f 91       	pop	r16
    45fc:	08 95       	ret

000045fe <_ZN10W5500Class11writeSnDIPREhPh>:
    }
  }

  w5500.writeSnIR(s, SnIR::SEND_OK);
  return ret;
}
    45fe:	ab 01       	movw	r20, r22
    4600:	82 95       	swap	r24
    4602:	88 0f       	add	r24, r24
    4604:	80 7e       	andi	r24, 0xE0	; 224
    4606:	6c e0       	ldi	r22, 0x0C	; 12
    4608:	68 0f       	add	r22, r24
    460a:	24 e0       	ldi	r18, 0x04	; 4
    460c:	30 e0       	ldi	r19, 0x00	; 0
    460e:	8c e0       	ldi	r24, 0x0C	; 12
    4610:	90 e0       	ldi	r25, 0x00	; 0
    4612:	00 c2       	rjmp	.+1024   	; 0x4a14 <_ZN10W5500Class5writeEjhPKhj>

00004614 <_ZN10W5500Class6readSnEhj>:
    4614:	9b 01       	movw	r18, r22
    4616:	82 95       	swap	r24
    4618:	88 0f       	add	r24, r24
    461a:	80 7e       	andi	r24, 0xE0	; 224
    461c:	68 e0       	ldi	r22, 0x08	; 8
    461e:	68 0f       	add	r22, r24
    4620:	c9 01       	movw	r24, r18
    4622:	24 c2       	rjmp	.+1096   	; 0x4a6c <_ZN10W5500Class4readEjh>

00004624 <_ZN10W5500Class8readSnIREh>:
    4624:	62 e0       	ldi	r22, 0x02	; 2
    4626:	70 e0       	ldi	r23, 0x00	; 0
    4628:	f5 cf       	rjmp	.-22     	; 0x4614 <_ZN10W5500Class6readSnEhj>

0000462a <_ZN10W5500Class7writeSnEhjh>:
    462a:	9b 01       	movw	r18, r22
    462c:	82 95       	swap	r24
    462e:	88 0f       	add	r24, r24
    4630:	80 7e       	andi	r24, 0xE0	; 224
    4632:	6c e0       	ldi	r22, 0x0C	; 12
    4634:	68 0f       	add	r22, r24
    4636:	c9 01       	movw	r24, r18
    4638:	cf c1       	rjmp	.+926    	; 0x49d8 <_ZN10W5500Class5writeEjhh>

0000463a <_ZN10W5500Class11writeSnPORTEhj>:
    463a:	cf 93       	push	r28
    463c:	df 93       	push	r29
    463e:	c8 2f       	mov	r28, r24
    4640:	d6 2f       	mov	r29, r22
    4642:	47 2f       	mov	r20, r23
    4644:	64 e0       	ldi	r22, 0x04	; 4
    4646:	70 e0       	ldi	r23, 0x00	; 0
    4648:	f0 df       	rcall	.-32     	; 0x462a <_ZN10W5500Class7writeSnEhjh>
    464a:	4d 2f       	mov	r20, r29
    464c:	65 e0       	ldi	r22, 0x05	; 5
    464e:	70 e0       	ldi	r23, 0x00	; 0
    4650:	8c 2f       	mov	r24, r28
    4652:	df 91       	pop	r29
    4654:	cf 91       	pop	r28
    4656:	e9 cf       	rjmp	.-46     	; 0x462a <_ZN10W5500Class7writeSnEhjh>

00004658 <_ZN10W5500Class9writeSnIREhh>:
    4658:	46 2f       	mov	r20, r22
    465a:	62 e0       	ldi	r22, 0x02	; 2
    465c:	70 e0       	ldi	r23, 0x00	; 0
    465e:	e5 cf       	rjmp	.-54     	; 0x462a <_ZN10W5500Class7writeSnEhjh>

00004660 <_ZN10W5500Class12writeSnDPORTEhj>:
    4660:	cf 93       	push	r28
    4662:	df 93       	push	r29
    4664:	c8 2f       	mov	r28, r24
    4666:	d6 2f       	mov	r29, r22
    4668:	47 2f       	mov	r20, r23
    466a:	60 e1       	ldi	r22, 0x10	; 16
    466c:	70 e0       	ldi	r23, 0x00	; 0
    466e:	dd df       	rcall	.-70     	; 0x462a <_ZN10W5500Class7writeSnEhjh>
    4670:	4d 2f       	mov	r20, r29
    4672:	61 e1       	ldi	r22, 0x11	; 17
    4674:	70 e0       	ldi	r23, 0x00	; 0
    4676:	8c 2f       	mov	r24, r28
    4678:	df 91       	pop	r29
    467a:	cf 91       	pop	r28
    467c:	d6 cf       	rjmp	.-84     	; 0x462a <_ZN10W5500Class7writeSnEhjh>

0000467e <_Z5closeh>:
    467e:	cf 93       	push	r28
    4680:	c8 2f       	mov	r28, r24
    4682:	40 e1       	ldi	r20, 0x10	; 16
    4684:	68 2f       	mov	r22, r24
    4686:	86 e0       	ldi	r24, 0x06	; 6
    4688:	9a e0       	ldi	r25, 0x0A	; 10
    468a:	70 d3       	rcall	.+1760   	; 0x4d6c <_ZN10W5500Class9execCmdSnEh7SockCMD>
    468c:	6f ef       	ldi	r22, 0xFF	; 255
    468e:	8c 2f       	mov	r24, r28
    4690:	cf 91       	pop	r28
    4692:	e2 cf       	rjmp	.-60     	; 0x4658 <_ZN10W5500Class9writeSnIREhh>

00004694 <_Z6sockethhjh>:
    4694:	ff 92       	push	r15
    4696:	0f 93       	push	r16
    4698:	1f 93       	push	r17
    469a:	cf 93       	push	r28
    469c:	df 93       	push	r29
    469e:	9f ef       	ldi	r25, 0xFF	; 255
    46a0:	96 0f       	add	r25, r22
    46a2:	95 30       	cpi	r25, 0x05	; 5
    46a4:	18 f5       	brcc	.+70     	; 0x46ec <_Z6sockethhjh+0x58>
    46a6:	d2 2f       	mov	r29, r18
    46a8:	8a 01       	movw	r16, r20
    46aa:	f6 2e       	mov	r15, r22
    46ac:	c8 2f       	mov	r28, r24
    46ae:	e7 df       	rcall	.-50     	; 0x467e <_Z5closeh>
    46b0:	4f 2d       	mov	r20, r15
    46b2:	4d 2b       	or	r20, r29
    46b4:	60 e0       	ldi	r22, 0x00	; 0
    46b6:	70 e0       	ldi	r23, 0x00	; 0
    46b8:	8c 2f       	mov	r24, r28
    46ba:	b7 df       	rcall	.-146    	; 0x462a <_ZN10W5500Class7writeSnEhjh>
    46bc:	01 15       	cp	r16, r1
    46be:	11 05       	cpc	r17, r1
    46c0:	11 f0       	breq	.+4      	; 0x46c6 <_Z6sockethhjh+0x32>
    46c2:	b8 01       	movw	r22, r16
    46c4:	0a c0       	rjmp	.+20     	; 0x46da <_Z6sockethhjh+0x46>
    46c6:	60 91 01 0a 	lds	r22, 0x0A01	; 0x800a01 <_ZL10local_port>
    46ca:	70 91 02 0a 	lds	r23, 0x0A02	; 0x800a02 <_ZL10local_port+0x1>
    46ce:	6f 5f       	subi	r22, 0xFF	; 255
    46d0:	7f 4f       	sbci	r23, 0xFF	; 255
    46d2:	70 93 02 0a 	sts	0x0A02, r23	; 0x800a02 <_ZL10local_port+0x1>
    46d6:	60 93 01 0a 	sts	0x0A01, r22	; 0x800a01 <_ZL10local_port>
    46da:	8c 2f       	mov	r24, r28
    46dc:	ae df       	rcall	.-164    	; 0x463a <_ZN10W5500Class11writeSnPORTEhj>
    46de:	41 e0       	ldi	r20, 0x01	; 1
    46e0:	6c 2f       	mov	r22, r28
    46e2:	86 e0       	ldi	r24, 0x06	; 6
    46e4:	9a e0       	ldi	r25, 0x0A	; 10
    46e6:	42 d3       	rcall	.+1668   	; 0x4d6c <_ZN10W5500Class9execCmdSnEh7SockCMD>
    46e8:	81 e0       	ldi	r24, 0x01	; 1
    46ea:	01 c0       	rjmp	.+2      	; 0x46ee <_Z6sockethhjh+0x5a>
    46ec:	80 e0       	ldi	r24, 0x00	; 0
    46ee:	df 91       	pop	r29
    46f0:	cf 91       	pop	r28
    46f2:	1f 91       	pop	r17
    46f4:	0f 91       	pop	r16
    46f6:	ff 90       	pop	r15
    46f8:	08 95       	ret

000046fa <_Z7connecthPhj>:
    46fa:	0f 93       	push	r16
    46fc:	1f 93       	push	r17
    46fe:	cf 93       	push	r28
    4700:	fb 01       	movw	r30, r22
    4702:	90 81       	ld	r25, Z
    4704:	9f 3f       	cpi	r25, 0xFF	; 255
    4706:	51 f4       	brne	.+20     	; 0x471c <_Z7connecthPhj+0x22>
    4708:	91 81       	ldd	r25, Z+1	; 0x01
    470a:	9f 3f       	cpi	r25, 0xFF	; 255
    470c:	91 f4       	brne	.+36     	; 0x4732 <_Z7connecthPhj+0x38>
    470e:	92 81       	ldd	r25, Z+2	; 0x02
    4710:	9f 3f       	cpi	r25, 0xFF	; 255
    4712:	79 f4       	brne	.+30     	; 0x4732 <_Z7connecthPhj+0x38>
    4714:	93 81       	ldd	r25, Z+3	; 0x03
    4716:	9f 3f       	cpi	r25, 0xFF	; 255
    4718:	61 f4       	brne	.+24     	; 0x4732 <_Z7connecthPhj+0x38>
    471a:	1c c0       	rjmp	.+56     	; 0x4754 <_Z7connecthPhj+0x5a>
    471c:	91 11       	cpse	r25, r1
    471e:	09 c0       	rjmp	.+18     	; 0x4732 <_Z7connecthPhj+0x38>
    4720:	91 81       	ldd	r25, Z+1	; 0x01
    4722:	91 11       	cpse	r25, r1
    4724:	06 c0       	rjmp	.+12     	; 0x4732 <_Z7connecthPhj+0x38>
    4726:	92 81       	ldd	r25, Z+2	; 0x02
    4728:	91 11       	cpse	r25, r1
    472a:	03 c0       	rjmp	.+6      	; 0x4732 <_Z7connecthPhj+0x38>
    472c:	93 81       	ldd	r25, Z+3	; 0x03
    472e:	99 23       	and	r25, r25
    4730:	91 f0       	breq	.+36     	; 0x4756 <_Z7connecthPhj+0x5c>
    4732:	41 15       	cp	r20, r1
    4734:	51 05       	cpc	r21, r1
    4736:	71 f0       	breq	.+28     	; 0x4754 <_Z7connecthPhj+0x5a>
    4738:	8a 01       	movw	r16, r20
    473a:	bf 01       	movw	r22, r30
    473c:	c8 2f       	mov	r28, r24
    473e:	5f df       	rcall	.-322    	; 0x45fe <_ZN10W5500Class11writeSnDIPREhPh>
    4740:	b8 01       	movw	r22, r16
    4742:	8c 2f       	mov	r24, r28
    4744:	8d df       	rcall	.-230    	; 0x4660 <_ZN10W5500Class12writeSnDPORTEhj>
    4746:	44 e0       	ldi	r20, 0x04	; 4
    4748:	6c 2f       	mov	r22, r28
    474a:	86 e0       	ldi	r24, 0x06	; 6
    474c:	9a e0       	ldi	r25, 0x0A	; 10
    474e:	0e d3       	rcall	.+1564   	; 0x4d6c <_ZN10W5500Class9execCmdSnEh7SockCMD>
    4750:	91 e0       	ldi	r25, 0x01	; 1
    4752:	01 c0       	rjmp	.+2      	; 0x4756 <_Z7connecthPhj+0x5c>
    4754:	90 e0       	ldi	r25, 0x00	; 0
    4756:	89 2f       	mov	r24, r25
    4758:	cf 91       	pop	r28
    475a:	1f 91       	pop	r17
    475c:	0f 91       	pop	r16
    475e:	08 95       	ret

00004760 <_Z10disconnecth>:
    4760:	48 e0       	ldi	r20, 0x08	; 8
    4762:	68 2f       	mov	r22, r24
    4764:	86 e0       	ldi	r24, 0x06	; 6
    4766:	9a e0       	ldi	r25, 0x0A	; 10
    4768:	01 c3       	rjmp	.+1538   	; 0x4d6c <_ZN10W5500Class9execCmdSnEh7SockCMD>

0000476a <_Z4sendhPKhj>:
    476a:	cf 92       	push	r12
    476c:	df 92       	push	r13
    476e:	ef 92       	push	r14
    4770:	ff 92       	push	r15
    4772:	0f 93       	push	r16
    4774:	1f 93       	push	r17
    4776:	cf 93       	push	r28
    4778:	c8 2f       	mov	r28, r24
    477a:	7b 01       	movw	r14, r22
    477c:	8a 01       	movw	r16, r20
    477e:	41 30       	cpi	r20, 0x01	; 1
    4780:	58 40       	sbci	r21, 0x08	; 8
    4782:	10 f0       	brcs	.+4      	; 0x4788 <_Z4sendhPKhj+0x1e>
    4784:	00 e0       	ldi	r16, 0x00	; 0
    4786:	18 e0       	ldi	r17, 0x08	; 8
    4788:	6c 2f       	mov	r22, r28
    478a:	86 e0       	ldi	r24, 0x06	; 6
    478c:	9a e0       	ldi	r25, 0x0A	; 10
    478e:	cd d1       	rcall	.+922    	; 0x4b2a <_ZN10W5500Class13getTXFreeSizeEh>
    4790:	6c 01       	movw	r12, r24
    4792:	63 e0       	ldi	r22, 0x03	; 3
    4794:	70 e0       	ldi	r23, 0x00	; 0
    4796:	8c 2f       	mov	r24, r28
    4798:	3d df       	rcall	.-390    	; 0x4614 <_ZN10W5500Class6readSnEhj>
    479a:	87 31       	cpi	r24, 0x17	; 23
    479c:	11 f0       	breq	.+4      	; 0x47a2 <_Z4sendhPKhj+0x38>
    479e:	8c 31       	cpi	r24, 0x1C	; 28
    47a0:	21 f4       	brne	.+8      	; 0x47aa <_Z4sendhPKhj+0x40>
    47a2:	c0 16       	cp	r12, r16
    47a4:	d1 06       	cpc	r13, r17
    47a6:	80 f3       	brcs	.-32     	; 0x4788 <_Z4sendhPKhj+0x1e>
    47a8:	02 c0       	rjmp	.+4      	; 0x47ae <_Z4sendhPKhj+0x44>
    47aa:	00 e0       	ldi	r16, 0x00	; 0
    47ac:	10 e0       	ldi	r17, 0x00	; 0
    47ae:	98 01       	movw	r18, r16
    47b0:	a7 01       	movw	r20, r14
    47b2:	6c 2f       	mov	r22, r28
    47b4:	86 e0       	ldi	r24, 0x06	; 6
    47b6:	9a e0       	ldi	r25, 0x0A	; 10
    47b8:	3d d2       	rcall	.+1146   	; 0x4c34 <_ZN10W5500Class20send_data_processingEhPKhj>
    47ba:	40 e2       	ldi	r20, 0x20	; 32
    47bc:	6c 2f       	mov	r22, r28
    47be:	86 e0       	ldi	r24, 0x06	; 6
    47c0:	9a e0       	ldi	r25, 0x0A	; 10
    47c2:	d4 d2       	rcall	.+1448   	; 0x4d6c <_ZN10W5500Class9execCmdSnEh7SockCMD>
    47c4:	8c 2f       	mov	r24, r28
    47c6:	2e df       	rcall	.-420    	; 0x4624 <_ZN10W5500Class8readSnIREh>
    47c8:	84 fd       	sbrc	r24, 4
    47ca:	0b c0       	rjmp	.+22     	; 0x47e2 <_Z4sendhPKhj+0x78>
    47cc:	63 e0       	ldi	r22, 0x03	; 3
    47ce:	70 e0       	ldi	r23, 0x00	; 0
    47d0:	8c 2f       	mov	r24, r28
    47d2:	20 df       	rcall	.-448    	; 0x4614 <_ZN10W5500Class6readSnEhj>
    47d4:	81 11       	cpse	r24, r1
    47d6:	f6 cf       	rjmp	.-20     	; 0x47c4 <_Z4sendhPKhj+0x5a>
    47d8:	8c 2f       	mov	r24, r28
    47da:	51 df       	rcall	.-350    	; 0x467e <_Z5closeh>
    47dc:	80 e0       	ldi	r24, 0x00	; 0
    47de:	90 e0       	ldi	r25, 0x00	; 0
    47e0:	04 c0       	rjmp	.+8      	; 0x47ea <_Z4sendhPKhj+0x80>
    47e2:	60 e1       	ldi	r22, 0x10	; 16
    47e4:	8c 2f       	mov	r24, r28
    47e6:	38 df       	rcall	.-400    	; 0x4658 <_ZN10W5500Class9writeSnIREhh>
    47e8:	c8 01       	movw	r24, r16
    47ea:	cf 91       	pop	r28
    47ec:	1f 91       	pop	r17
    47ee:	0f 91       	pop	r16
    47f0:	ff 90       	pop	r15
    47f2:	ef 90       	pop	r14
    47f4:	df 90       	pop	r13
    47f6:	cf 90       	pop	r12
    47f8:	08 95       	ret

000047fa <_Z4recvhPhi>:
    47fa:	cf 92       	push	r12
    47fc:	df 92       	push	r13
    47fe:	ef 92       	push	r14
    4800:	ff 92       	push	r15
    4802:	0f 93       	push	r16
    4804:	1f 93       	push	r17
    4806:	cf 93       	push	r28
    4808:	df 93       	push	r29
    480a:	18 2f       	mov	r17, r24
    480c:	6b 01       	movw	r12, r22
    480e:	7a 01       	movw	r14, r20
    4810:	68 2f       	mov	r22, r24
    4812:	86 e0       	ldi	r24, 0x06	; 6
    4814:	9a e0       	ldi	r25, 0x0A	; 10
    4816:	ba d1       	rcall	.+884    	; 0x4b8c <_ZN10W5500Class17getRXReceivedSizeEh>
    4818:	ec 01       	movw	r28, r24
    481a:	00 97       	sbiw	r24, 0x00	; 0
    481c:	91 f4       	brne	.+36     	; 0x4842 <_Z4recvhPhi+0x48>
    481e:	63 e0       	ldi	r22, 0x03	; 3
    4820:	70 e0       	ldi	r23, 0x00	; 0
    4822:	81 2f       	mov	r24, r17
    4824:	f7 de       	rcall	.-530    	; 0x4614 <_ZN10W5500Class6readSnEhj>
    4826:	84 31       	cpi	r24, 0x14	; 20
    4828:	f9 f0       	breq	.+62     	; 0x4868 <_Z4recvhPhi+0x6e>
    482a:	88 23       	and	r24, r24
    482c:	e9 f0       	breq	.+58     	; 0x4868 <_Z4recvhPhi+0x6e>
    482e:	c1 e0       	ldi	r28, 0x01	; 1
    4830:	d0 e0       	ldi	r29, 0x00	; 0
    4832:	8c 31       	cpi	r24, 0x1C	; 28
    4834:	11 f4       	brne	.+4      	; 0x483a <_Z4recvhPhi+0x40>
    4836:	c0 e0       	ldi	r28, 0x00	; 0
    4838:	d0 e0       	ldi	r29, 0x00	; 0
    483a:	d1 95       	neg	r29
    483c:	c1 95       	neg	r28
    483e:	d1 09       	sbc	r29, r1
    4840:	13 c0       	rjmp	.+38     	; 0x4868 <_Z4recvhPhi+0x6e>
    4842:	e8 16       	cp	r14, r24
    4844:	f9 06       	cpc	r15, r25
    4846:	0c f4       	brge	.+2      	; 0x484a <_Z4recvhPhi+0x50>
    4848:	e7 01       	movw	r28, r14
    484a:	1c 16       	cp	r1, r28
    484c:	1d 06       	cpc	r1, r29
    484e:	64 f4       	brge	.+24     	; 0x4868 <_Z4recvhPhi+0x6e>
    4850:	00 e0       	ldi	r16, 0x00	; 0
    4852:	9e 01       	movw	r18, r28
    4854:	a6 01       	movw	r20, r12
    4856:	61 2f       	mov	r22, r17
    4858:	86 e0       	ldi	r24, 0x06	; 6
    485a:	9a e0       	ldi	r25, 0x0A	; 10
    485c:	3a d2       	rcall	.+1140   	; 0x4cd2 <_ZN10W5500Class20recv_data_processingEhPhjh>
    485e:	40 e4       	ldi	r20, 0x40	; 64
    4860:	61 2f       	mov	r22, r17
    4862:	86 e0       	ldi	r24, 0x06	; 6
    4864:	9a e0       	ldi	r25, 0x0A	; 10
    4866:	82 d2       	rcall	.+1284   	; 0x4d6c <_ZN10W5500Class9execCmdSnEh7SockCMD>
    4868:	ce 01       	movw	r24, r28
    486a:	df 91       	pop	r29
    486c:	cf 91       	pop	r28
    486e:	1f 91       	pop	r17
    4870:	0f 91       	pop	r16
    4872:	ff 90       	pop	r15
    4874:	ef 90       	pop	r14
    4876:	df 90       	pop	r13
    4878:	cf 90       	pop	r12
    487a:	08 95       	ret

0000487c <_Z4peekhPh>:
    487c:	0f 93       	push	r16
    487e:	ab 01       	movw	r20, r22
    4880:	01 e0       	ldi	r16, 0x01	; 1
    4882:	21 e0       	ldi	r18, 0x01	; 1
    4884:	30 e0       	ldi	r19, 0x00	; 0
    4886:	68 2f       	mov	r22, r24
    4888:	86 e0       	ldi	r24, 0x06	; 6
    488a:	9a e0       	ldi	r25, 0x0A	; 10
    488c:	22 d2       	rcall	.+1092   	; 0x4cd2 <_ZN10W5500Class20recv_data_processingEhPhjh>
    488e:	81 e0       	ldi	r24, 0x01	; 1
    4890:	90 e0       	ldi	r25, 0x00	; 0
    4892:	0f 91       	pop	r16
    4894:	08 95       	ret

00004896 <_Z5flushh>:
    4896:	08 95       	ret

00004898 <_Z10bufferDatahjPKhj>:

uint16_t bufferData(SOCKET s, uint16_t offset, const uint8_t* buf, uint16_t len)
{
    4898:	af 92       	push	r10
    489a:	bf 92       	push	r11
    489c:	cf 92       	push	r12
    489e:	df 92       	push	r13
    48a0:	ff 92       	push	r15
    48a2:	0f 93       	push	r16
    48a4:	1f 93       	push	r17
    48a6:	cf 93       	push	r28
    48a8:	df 93       	push	r29
    48aa:	f8 2e       	mov	r15, r24
    48ac:	6b 01       	movw	r12, r22
    48ae:	5a 01       	movw	r10, r20
    48b0:	e9 01       	movw	r28, r18
  uint16_t ret =0;
  if (len > w5500.getTXFreeSize(s))
    48b2:	68 2f       	mov	r22, r24
    48b4:	86 e0       	ldi	r24, 0x06	; 6
    48b6:	9a e0       	ldi	r25, 0x0A	; 10
    48b8:	38 d1       	rcall	.+624    	; 0x4b2a <_ZN10W5500Class13getTXFreeSizeEh>
    48ba:	8c 17       	cp	r24, r28
    48bc:	9d 07       	cpc	r25, r29
    48be:	28 f4       	brcc	.+10     	; 0x48ca <_Z10bufferDatahjPKhj+0x32>
  {
    ret = w5500.getTXFreeSize(s); // check size not to exceed MAX size.
    48c0:	6f 2d       	mov	r22, r15
    48c2:	86 e0       	ldi	r24, 0x06	; 6
    48c4:	9a e0       	ldi	r25, 0x0A	; 10
    48c6:	31 d1       	rcall	.+610    	; 0x4b2a <_ZN10W5500Class13getTXFreeSizeEh>
    48c8:	ec 01       	movw	r28, r24
  }
  else
  {
    ret = len;
  }
  w5500.send_data_processing_offset(s, offset, buf, ret);
    48ca:	8e 01       	movw	r16, r28
    48cc:	95 01       	movw	r18, r10
    48ce:	a6 01       	movw	r20, r12
    48d0:	6f 2d       	mov	r22, r15
    48d2:	86 e0       	ldi	r24, 0x06	; 6
    48d4:	9a e0       	ldi	r25, 0x0A	; 10
    48d6:	74 d1       	rcall	.+744    	; 0x4bc0 <_ZN10W5500Class27send_data_processing_offsetEhjPKhj>
  return ret;
}
    48d8:	ce 01       	movw	r24, r28
    48da:	df 91       	pop	r29
    48dc:	cf 91       	pop	r28
    48de:	1f 91       	pop	r17
    48e0:	0f 91       	pop	r16
    48e2:	ff 90       	pop	r15
    48e4:	df 90       	pop	r13
    48e6:	cf 90       	pop	r12
    48e8:	bf 90       	pop	r11
    48ea:	af 90       	pop	r10
    48ec:	08 95       	ret

000048ee <_Z8startUDPhPhj>:

int startUDP(SOCKET s, uint8_t* addr, uint16_t port)
{
    48ee:	0f 93       	push	r16
    48f0:	1f 93       	push	r17
    48f2:	cf 93       	push	r28
    48f4:	fb 01       	movw	r30, r22
  if
    48f6:	90 81       	ld	r25, Z
    48f8:	91 11       	cpse	r25, r1
    48fa:	09 c0       	rjmp	.+18     	; 0x490e <_Z8startUDPhPhj+0x20>
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
    48fc:	91 81       	ldd	r25, Z+1	; 0x01
    48fe:	91 11       	cpse	r25, r1
    4900:	06 c0       	rjmp	.+12     	; 0x490e <_Z8startUDPhPhj+0x20>
    4902:	92 81       	ldd	r25, Z+2	; 0x02
    4904:	91 11       	cpse	r25, r1
    4906:	03 c0       	rjmp	.+6      	; 0x490e <_Z8startUDPhPhj+0x20>
    4908:	93 81       	ldd	r25, Z+3	; 0x03
    490a:	99 23       	and	r25, r25
    490c:	69 f0       	breq	.+26     	; 0x4928 <_Z8startUDPhPhj+0x3a>
    490e:	41 15       	cp	r20, r1
    4910:	51 05       	cpc	r21, r1
    4912:	51 f0       	breq	.+20     	; 0x4928 <_Z8startUDPhPhj+0x3a>
    4914:	8a 01       	movw	r16, r20
    4916:	bf 01       	movw	r22, r30
    4918:	c8 2f       	mov	r28, r24
  {
    return 0;
  }
  else
  {
    w5500.writeSnDIPR(s, addr);
    491a:	71 de       	rcall	.-798    	; 0x45fe <_ZN10W5500Class11writeSnDIPREhPh>
    w5500.writeSnDPORT(s, port);
    491c:	b8 01       	movw	r22, r16
    491e:	8c 2f       	mov	r24, r28
    4920:	9f de       	rcall	.-706    	; 0x4660 <_ZN10W5500Class12writeSnDPORTEhj>
    return 1;
    4922:	81 e0       	ldi	r24, 0x01	; 1
    4924:	90 e0       	ldi	r25, 0x00	; 0
    4926:	02 c0       	rjmp	.+4      	; 0x492c <_Z8startUDPhPhj+0x3e>
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
     ((port == 0x00))
    ) 
  {
    return 0;
    4928:	80 e0       	ldi	r24, 0x00	; 0
    492a:	90 e0       	ldi	r25, 0x00	; 0
  {
    w5500.writeSnDIPR(s, addr);
    w5500.writeSnDPORT(s, port);
    return 1;
  }
}
    492c:	cf 91       	pop	r28
    492e:	1f 91       	pop	r17
    4930:	0f 91       	pop	r16
    4932:	08 95       	ret

00004934 <_Z7sendUDPh>:

int sendUDP(SOCKET s)
{
    4934:	cf 93       	push	r28
    4936:	c8 2f       	mov	r28, r24
  w5500.execCmdSn(s, Sock_SEND);
    4938:	40 e2       	ldi	r20, 0x20	; 32
    493a:	68 2f       	mov	r22, r24
    493c:	86 e0       	ldi	r24, 0x06	; 6
    493e:	9a e0       	ldi	r25, 0x0A	; 10
    4940:	15 d2       	rcall	.+1066   	; 0x4d6c <_ZN10W5500Class9execCmdSnEh7SockCMD>
		
  /* +2008.01 bj */
  while ( (w5500.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
    4942:	8c 2f       	mov	r24, r28
    4944:	6f de       	rcall	.-802    	; 0x4624 <_ZN10W5500Class8readSnIREh>
    4946:	84 fd       	sbrc	r24, 4
    4948:	0a c0       	rjmp	.+20     	; 0x495e <_Z7sendUDPh+0x2a>
  {
    if (w5500.readSnIR(s) & SnIR::TIMEOUT)
    494a:	8c 2f       	mov	r24, r28
    494c:	6b de       	rcall	.-810    	; 0x4624 <_ZN10W5500Class8readSnIREh>
    494e:	83 ff       	sbrs	r24, 3
    4950:	f8 cf       	rjmp	.-16     	; 0x4942 <_Z7sendUDPh+0xe>
    {
      /* +2008.01 [bj]: clear interrupt */
      w5500.writeSnIR(s, (SnIR::SEND_OK|SnIR::TIMEOUT));
    4952:	68 e1       	ldi	r22, 0x18	; 24
    4954:	8c 2f       	mov	r24, r28
    4956:	80 de       	rcall	.-768    	; 0x4658 <_ZN10W5500Class9writeSnIREhh>
    4958:	80 e0       	ldi	r24, 0x00	; 0
      return 0;
    495a:	90 e0       	ldi	r25, 0x00	; 0
    495c:	05 c0       	rjmp	.+10     	; 0x4968 <_Z7sendUDPh+0x34>
    }
  }

  /* +2008.01 bj */	
  w5500.writeSnIR(s, SnIR::SEND_OK);
    495e:	60 e1       	ldi	r22, 0x10	; 16
    4960:	8c 2f       	mov	r24, r28
    4962:	7a de       	rcall	.-780    	; 0x4658 <_ZN10W5500Class9writeSnIREhh>
    4964:	81 e0       	ldi	r24, 0x01	; 1

  /* Sent ok */
  return 1;
    4966:	90 e0       	ldi	r25, 0x00	; 0
    4968:	cf 91       	pop	r28
}
    496a:	08 95       	ret

0000496c <_ZN8SPIClass16beginTransactionE11SPISettings>:
    496c:	20 91 09 0a 	lds	r18, 0x0A09	; 0x800a09 <_ZN8SPIClass13interruptModeE>
    uint8_t _data = SPI.transfer(0);
    resetSS();
    SPI.endTransaction();

    return _data;
}
    4970:	22 23       	and	r18, r18
    4972:	99 f0       	breq	.+38     	; 0x499a <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    4974:	4f b7       	in	r20, 0x3f	; 63
    4976:	f8 94       	cli
    4978:	20 91 09 0a 	lds	r18, 0x0A09	; 0x800a09 <_ZN8SPIClass13interruptModeE>
    497c:	21 30       	cpi	r18, 0x01	; 1
    497e:	59 f4       	brne	.+22     	; 0x4996 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
    4980:	2d b3       	in	r18, 0x1d	; 29
    4982:	20 93 07 0a 	sts	0x0A07, r18	; 0x800a07 <_ZN8SPIClass13interruptSaveE>
    4986:	3d b3       	in	r19, 0x1d	; 29
    4988:	20 91 08 0a 	lds	r18, 0x0A08	; 0x800a08 <_ZN8SPIClass13interruptMaskE>
    498c:	20 95       	com	r18
    498e:	23 23       	and	r18, r19
    4990:	2d bb       	out	0x1d, r18	; 29
    4992:	4f bf       	out	0x3f, r20	; 63
    4994:	02 c0       	rjmp	.+4      	; 0x499a <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    4996:	40 93 07 0a 	sts	0x0A07, r20	; 0x800a07 <_ZN8SPIClass13interruptSaveE>
    499a:	8c bd       	out	0x2c, r24	; 44
    499c:	9d bd       	out	0x2d, r25	; 45
    499e:	08 95       	ret

000049a0 <_ZN8SPIClass8transferEh>:
    49a0:	8e bd       	out	0x2e, r24	; 46
    49a2:	00 00       	nop
    49a4:	0d b4       	in	r0, 0x2d	; 45
    49a6:	07 fe       	sbrs	r0, 7
    49a8:	fd cf       	rjmp	.-6      	; 0x49a4 <_ZN8SPIClass8transferEh+0x4>
    49aa:	8e b5       	in	r24, 0x2e	; 46
    49ac:	08 95       	ret

000049ae <_ZN8SPIClass14endTransactionEv>:
    49ae:	80 91 09 0a 	lds	r24, 0x0A09	; 0x800a09 <_ZN8SPIClass13interruptModeE>
    49b2:	88 23       	and	r24, r24
    49b4:	61 f0       	breq	.+24     	; 0x49ce <_ZN8SPIClass14endTransactionEv+0x20>
    49b6:	9f b7       	in	r25, 0x3f	; 63
    49b8:	f8 94       	cli
    49ba:	20 91 09 0a 	lds	r18, 0x0A09	; 0x800a09 <_ZN8SPIClass13interruptModeE>
    49be:	80 91 07 0a 	lds	r24, 0x0A07	; 0x800a07 <_ZN8SPIClass13interruptSaveE>
    49c2:	21 30       	cpi	r18, 0x01	; 1
    49c4:	19 f4       	brne	.+6      	; 0x49cc <_ZN8SPIClass14endTransactionEv+0x1e>
    49c6:	8d bb       	out	0x1d, r24	; 29
    49c8:	9f bf       	out	0x3f, r25	; 63
    49ca:	08 95       	ret
    49cc:	8f bf       	out	0x3f, r24	; 63
    49ce:	08 95       	ret

000049d0 <_ZN10W5500Class5setSSEv>:
    49d0:	44 98       	cbi	0x08, 4	; 8
    49d2:	08 95       	ret

000049d4 <_ZN10W5500Class7resetSSEv>:
    49d4:	44 9a       	sbi	0x08, 4	; 8
    49d6:	08 95       	ret

000049d8 <_ZN10W5500Class5writeEjhh>:
    49d8:	0f 93       	push	r16
    49da:	1f 93       	push	r17
    49dc:	cf 93       	push	r28
    49de:	df 93       	push	r29
    49e0:	18 2f       	mov	r17, r24
    49e2:	09 2f       	mov	r16, r25
    49e4:	d6 2f       	mov	r29, r22
    49e6:	c4 2f       	mov	r28, r20
    49e8:	80 91 04 0a 	lds	r24, 0x0A04	; 0x800a04 <wiznet_SPI_settings>
    49ec:	90 91 05 0a 	lds	r25, 0x0A05	; 0x800a05 <wiznet_SPI_settings+0x1>
    49f0:	bd df       	rcall	.-134    	; 0x496c <_ZN8SPIClass16beginTransactionE11SPISettings>
    49f2:	ee df       	rcall	.-36     	; 0x49d0 <_ZN10W5500Class5setSSEv>
    49f4:	80 2f       	mov	r24, r16
    49f6:	d4 df       	rcall	.-88     	; 0x49a0 <_ZN8SPIClass8transferEh>
    49f8:	81 2f       	mov	r24, r17
    49fa:	d2 df       	rcall	.-92     	; 0x49a0 <_ZN8SPIClass8transferEh>
    49fc:	8d 2f       	mov	r24, r29
    49fe:	d0 df       	rcall	.-96     	; 0x49a0 <_ZN8SPIClass8transferEh>
    4a00:	8c 2f       	mov	r24, r28
    4a02:	ce df       	rcall	.-100    	; 0x49a0 <_ZN8SPIClass8transferEh>
    4a04:	e7 df       	rcall	.-50     	; 0x49d4 <_ZN10W5500Class7resetSSEv>
    4a06:	d3 df       	rcall	.-90     	; 0x49ae <_ZN8SPIClass14endTransactionEv>
    4a08:	81 e0       	ldi	r24, 0x01	; 1
    4a0a:	df 91       	pop	r29
    4a0c:	cf 91       	pop	r28
    4a0e:	1f 91       	pop	r17
    4a10:	0f 91       	pop	r16
    4a12:	08 95       	ret

00004a14 <_ZN10W5500Class5writeEjhPKhj>:
    4a14:	df 92       	push	r13
    4a16:	ef 92       	push	r14
    4a18:	ff 92       	push	r15
    4a1a:	0f 93       	push	r16
    4a1c:	1f 93       	push	r17
    4a1e:	cf 93       	push	r28
    4a20:	df 93       	push	r29
    4a22:	d8 2f       	mov	r29, r24
    4a24:	d9 2e       	mov	r13, r25
    4a26:	c6 2f       	mov	r28, r22
    4a28:	7a 01       	movw	r14, r20
    4a2a:	89 01       	movw	r16, r18
    4a2c:	80 91 04 0a 	lds	r24, 0x0A04	; 0x800a04 <wiznet_SPI_settings>
    4a30:	90 91 05 0a 	lds	r25, 0x0A05	; 0x800a05 <wiznet_SPI_settings+0x1>
    4a34:	9b df       	rcall	.-202    	; 0x496c <_ZN8SPIClass16beginTransactionE11SPISettings>
    4a36:	cc df       	rcall	.-104    	; 0x49d0 <_ZN10W5500Class5setSSEv>
    4a38:	8d 2d       	mov	r24, r13
    4a3a:	b2 df       	rcall	.-156    	; 0x49a0 <_ZN8SPIClass8transferEh>
    4a3c:	8d 2f       	mov	r24, r29
    4a3e:	b0 df       	rcall	.-160    	; 0x49a0 <_ZN8SPIClass8transferEh>
    4a40:	8c 2f       	mov	r24, r28
    4a42:	ae df       	rcall	.-164    	; 0x49a0 <_ZN8SPIClass8transferEh>
    4a44:	e7 01       	movw	r28, r14
    4a46:	e0 0e       	add	r14, r16
    4a48:	f1 1e       	adc	r15, r17
    4a4a:	ce 15       	cp	r28, r14
    4a4c:	df 05       	cpc	r29, r15
    4a4e:	19 f0       	breq	.+6      	; 0x4a56 <_ZN10W5500Class5writeEjhPKhj+0x42>
    4a50:	89 91       	ld	r24, Y+
    4a52:	a6 df       	rcall	.-180    	; 0x49a0 <_ZN8SPIClass8transferEh>
    4a54:	fa cf       	rjmp	.-12     	; 0x4a4a <_ZN10W5500Class5writeEjhPKhj+0x36>
    4a56:	be df       	rcall	.-132    	; 0x49d4 <_ZN10W5500Class7resetSSEv>
    4a58:	aa df       	rcall	.-172    	; 0x49ae <_ZN8SPIClass14endTransactionEv>
    4a5a:	c8 01       	movw	r24, r16
    4a5c:	df 91       	pop	r29
    4a5e:	cf 91       	pop	r28
    4a60:	1f 91       	pop	r17
    4a62:	0f 91       	pop	r16
    4a64:	ff 90       	pop	r15
    4a66:	ef 90       	pop	r14
    4a68:	df 90       	pop	r13
    4a6a:	08 95       	ret

00004a6c <_ZN10W5500Class4readEjh>:
    4a6c:	1f 93       	push	r17
    4a6e:	cf 93       	push	r28
    4a70:	df 93       	push	r29
    4a72:	d8 2f       	mov	r29, r24
    4a74:	19 2f       	mov	r17, r25
    4a76:	c6 2f       	mov	r28, r22
    4a78:	80 91 04 0a 	lds	r24, 0x0A04	; 0x800a04 <wiznet_SPI_settings>
    4a7c:	90 91 05 0a 	lds	r25, 0x0A05	; 0x800a05 <wiznet_SPI_settings+0x1>
    4a80:	75 df       	rcall	.-278    	; 0x496c <_ZN8SPIClass16beginTransactionE11SPISettings>
    4a82:	a6 df       	rcall	.-180    	; 0x49d0 <_ZN10W5500Class5setSSEv>
    4a84:	81 2f       	mov	r24, r17
    4a86:	8c df       	rcall	.-232    	; 0x49a0 <_ZN8SPIClass8transferEh>
    4a88:	8d 2f       	mov	r24, r29
    4a8a:	8a df       	rcall	.-236    	; 0x49a0 <_ZN8SPIClass8transferEh>
    4a8c:	8c 2f       	mov	r24, r28
    4a8e:	88 df       	rcall	.-240    	; 0x49a0 <_ZN8SPIClass8transferEh>
    4a90:	80 e0       	ldi	r24, 0x00	; 0
    4a92:	86 df       	rcall	.-244    	; 0x49a0 <_ZN8SPIClass8transferEh>
    4a94:	c8 2f       	mov	r28, r24
    4a96:	9e df       	rcall	.-196    	; 0x49d4 <_ZN10W5500Class7resetSSEv>
    4a98:	8a df       	rcall	.-236    	; 0x49ae <_ZN8SPIClass14endTransactionEv>
    4a9a:	8c 2f       	mov	r24, r28
    4a9c:	df 91       	pop	r29
    4a9e:	cf 91       	pop	r28
    4aa0:	1f 91       	pop	r17
    4aa2:	08 95       	ret

00004aa4 <_ZN10W5500Class4initEh>:
    4aa4:	cf 93       	push	r28
    4aa6:	df 93       	push	r29
    4aa8:	60 93 03 0a 	sts	0x0A03, r22	; 0x800a03 <SPI_CS>
    4aac:	68 ee       	ldi	r22, 0xE8	; 232
    4aae:	73 e0       	ldi	r23, 0x03	; 3
    4ab0:	80 e0       	ldi	r24, 0x00	; 0
    4ab2:	90 e0       	ldi	r25, 0x00	; 0
    4ab4:	0e 94 fe 30 	call	0x61fc	; 0x61fc <delay>
    4ab8:	3c 9a       	sbi	0x07, 4	; 7
    4aba:	10 d4       	rcall	.+2080   	; 0x52dc <_ZN8SPIClass5beginEv>
    4abc:	60 e0       	ldi	r22, 0x00	; 0
    4abe:	80 e0       	ldi	r24, 0x00	; 0
    4ac0:	90 e0       	ldi	r25, 0x00	; 0
    4ac2:	d4 df       	rcall	.-88     	; 0x4a6c <_ZN10W5500Class4readEjh>
    4ac4:	48 2f       	mov	r20, r24
    4ac6:	40 68       	ori	r20, 0x80	; 128
    4ac8:	64 e0       	ldi	r22, 0x04	; 4
    4aca:	80 e0       	ldi	r24, 0x00	; 0
    4acc:	90 e0       	ldi	r25, 0x00	; 0
    4ace:	84 df       	rcall	.-248    	; 0x49d8 <_ZN10W5500Class5writeEjhh>
    4ad0:	c0 e0       	ldi	r28, 0x00	; 0
    4ad2:	dc 2f       	mov	r29, r28
    4ad4:	d2 95       	swap	r29
    4ad6:	dd 0f       	add	r29, r29
    4ad8:	d0 7e       	andi	r29, 0xE0	; 224
    4ada:	d4 5f       	subi	r29, 0xF4	; 244
    4adc:	42 e0       	ldi	r20, 0x02	; 2
    4ade:	6d 2f       	mov	r22, r29
    4ae0:	8e e1       	ldi	r24, 0x1E	; 30
    4ae2:	90 e0       	ldi	r25, 0x00	; 0
    4ae4:	79 df       	rcall	.-270    	; 0x49d8 <_ZN10W5500Class5writeEjhh>
    4ae6:	42 e0       	ldi	r20, 0x02	; 2
    4ae8:	6d 2f       	mov	r22, r29
    4aea:	8f e1       	ldi	r24, 0x1F	; 31
    4aec:	90 e0       	ldi	r25, 0x00	; 0
    4aee:	74 df       	rcall	.-280    	; 0x49d8 <_ZN10W5500Class5writeEjhh>
    4af0:	cf 5f       	subi	r28, 0xFF	; 255
    4af2:	c8 30       	cpi	r28, 0x08	; 8
    4af4:	71 f7       	brne	.-36     	; 0x4ad2 <_ZN10W5500Class4initEh+0x2e>
    4af6:	df 91       	pop	r29
    4af8:	cf 91       	pop	r28
    4afa:	08 95       	ret

00004afc <_ZN10W5500Class12readSnTX_FSREh>:
    4afc:	1f 93       	push	r17
    4afe:	cf 93       	push	r28
    4b00:	df 93       	push	r29
    4b02:	18 2f       	mov	r17, r24
    4b04:	60 e2       	ldi	r22, 0x20	; 32
    4b06:	70 e0       	ldi	r23, 0x00	; 0
    4b08:	85 dd       	rcall	.-1270   	; 0x4614 <_ZN10W5500Class6readSnEhj>
    4b0a:	c8 2f       	mov	r28, r24
    4b0c:	d0 e0       	ldi	r29, 0x00	; 0
    4b0e:	dc 2f       	mov	r29, r28
    4b10:	cc 27       	eor	r28, r28
    4b12:	61 e2       	ldi	r22, 0x21	; 33
    4b14:	70 e0       	ldi	r23, 0x00	; 0
    4b16:	81 2f       	mov	r24, r17
    4b18:	7d dd       	rcall	.-1286   	; 0x4614 <_ZN10W5500Class6readSnEhj>
    4b1a:	9e 01       	movw	r18, r28
    4b1c:	28 0f       	add	r18, r24
    4b1e:	31 1d       	adc	r19, r1
    4b20:	c9 01       	movw	r24, r18
    4b22:	df 91       	pop	r29
    4b24:	cf 91       	pop	r28
    4b26:	1f 91       	pop	r17
    4b28:	08 95       	ret

00004b2a <_ZN10W5500Class13getTXFreeSizeEh>:
    4b2a:	ff 92       	push	r15
    4b2c:	0f 93       	push	r16
    4b2e:	1f 93       	push	r17
    4b30:	cf 93       	push	r28
    4b32:	df 93       	push	r29
    4b34:	f6 2e       	mov	r15, r22
    4b36:	c0 e0       	ldi	r28, 0x00	; 0
    4b38:	d0 e0       	ldi	r29, 0x00	; 0
    4b3a:	8f 2d       	mov	r24, r15
    4b3c:	df df       	rcall	.-66     	; 0x4afc <_ZN10W5500Class12readSnTX_FSREh>
    4b3e:	8c 01       	movw	r16, r24
    4b40:	89 2b       	or	r24, r25
    4b42:	19 f0       	breq	.+6      	; 0x4b4a <_ZN10W5500Class13getTXFreeSizeEh+0x20>
    4b44:	8f 2d       	mov	r24, r15
    4b46:	da df       	rcall	.-76     	; 0x4afc <_ZN10W5500Class12readSnTX_FSREh>
    4b48:	ec 01       	movw	r28, r24
    4b4a:	c0 17       	cp	r28, r16
    4b4c:	d1 07       	cpc	r29, r17
    4b4e:	a9 f7       	brne	.-22     	; 0x4b3a <_ZN10W5500Class13getTXFreeSizeEh+0x10>
    4b50:	ce 01       	movw	r24, r28
    4b52:	df 91       	pop	r29
    4b54:	cf 91       	pop	r28
    4b56:	1f 91       	pop	r17
    4b58:	0f 91       	pop	r16
    4b5a:	ff 90       	pop	r15
    4b5c:	08 95       	ret

00004b5e <_ZN10W5500Class12readSnRX_RSREh>:
    4b5e:	1f 93       	push	r17
    4b60:	cf 93       	push	r28
    4b62:	df 93       	push	r29
    4b64:	18 2f       	mov	r17, r24
    4b66:	66 e2       	ldi	r22, 0x26	; 38
    4b68:	70 e0       	ldi	r23, 0x00	; 0
    4b6a:	54 dd       	rcall	.-1368   	; 0x4614 <_ZN10W5500Class6readSnEhj>
    4b6c:	c8 2f       	mov	r28, r24
    4b6e:	d0 e0       	ldi	r29, 0x00	; 0
    4b70:	dc 2f       	mov	r29, r28
    4b72:	cc 27       	eor	r28, r28
    4b74:	67 e2       	ldi	r22, 0x27	; 39
    4b76:	70 e0       	ldi	r23, 0x00	; 0
    4b78:	81 2f       	mov	r24, r17
    4b7a:	4c dd       	rcall	.-1384   	; 0x4614 <_ZN10W5500Class6readSnEhj>
    4b7c:	9e 01       	movw	r18, r28
    4b7e:	28 0f       	add	r18, r24
    4b80:	31 1d       	adc	r19, r1
    4b82:	c9 01       	movw	r24, r18
    4b84:	df 91       	pop	r29
    4b86:	cf 91       	pop	r28
    4b88:	1f 91       	pop	r17
    4b8a:	08 95       	ret

00004b8c <_ZN10W5500Class17getRXReceivedSizeEh>:
    4b8c:	ff 92       	push	r15
    4b8e:	0f 93       	push	r16
    4b90:	1f 93       	push	r17
    4b92:	cf 93       	push	r28
    4b94:	df 93       	push	r29
    4b96:	f6 2e       	mov	r15, r22
    4b98:	c0 e0       	ldi	r28, 0x00	; 0
    4b9a:	d0 e0       	ldi	r29, 0x00	; 0
    4b9c:	8f 2d       	mov	r24, r15
    4b9e:	df df       	rcall	.-66     	; 0x4b5e <_ZN10W5500Class12readSnRX_RSREh>
    4ba0:	8c 01       	movw	r16, r24
    4ba2:	89 2b       	or	r24, r25
    4ba4:	19 f0       	breq	.+6      	; 0x4bac <_ZN10W5500Class17getRXReceivedSizeEh+0x20>
    4ba6:	8f 2d       	mov	r24, r15
    4ba8:	da df       	rcall	.-76     	; 0x4b5e <_ZN10W5500Class12readSnRX_RSREh>
    4baa:	ec 01       	movw	r28, r24
    4bac:	c0 17       	cp	r28, r16
    4bae:	d1 07       	cpc	r29, r17
    4bb0:	a9 f7       	brne	.-22     	; 0x4b9c <_ZN10W5500Class17getRXReceivedSizeEh+0x10>
    4bb2:	ce 01       	movw	r24, r28
    4bb4:	df 91       	pop	r29
    4bb6:	cf 91       	pop	r28
    4bb8:	1f 91       	pop	r17
    4bba:	0f 91       	pop	r16
    4bbc:	ff 90       	pop	r15
    4bbe:	08 95       	ret

00004bc0 <_ZN10W5500Class27send_data_processing_offsetEhjPKhj>:
    4bc0:	af 92       	push	r10
    4bc2:	bf 92       	push	r11
    4bc4:	df 92       	push	r13
    4bc6:	ef 92       	push	r14
    4bc8:	ff 92       	push	r15
    4bca:	0f 93       	push	r16
    4bcc:	1f 93       	push	r17
    4bce:	cf 93       	push	r28
    4bd0:	df 93       	push	r29
    4bd2:	d6 2e       	mov	r13, r22
    4bd4:	7a 01       	movw	r14, r20
    4bd6:	59 01       	movw	r10, r18
    4bd8:	64 e2       	ldi	r22, 0x24	; 36
    4bda:	70 e0       	ldi	r23, 0x00	; 0
    4bdc:	8d 2d       	mov	r24, r13
    4bde:	1a dd       	rcall	.-1484   	; 0x4614 <_ZN10W5500Class6readSnEhj>
    4be0:	c8 2f       	mov	r28, r24
    4be2:	65 e2       	ldi	r22, 0x25	; 37
    4be4:	70 e0       	ldi	r23, 0x00	; 0
    4be6:	8d 2d       	mov	r24, r13
    4be8:	15 dd       	rcall	.-1494   	; 0x4614 <_ZN10W5500Class6readSnEhj>
    4bea:	d0 e0       	ldi	r29, 0x00	; 0
    4bec:	dc 2f       	mov	r29, r28
    4bee:	cc 27       	eor	r28, r28
    4bf0:	e8 0e       	add	r14, r24
    4bf2:	f1 1c       	adc	r15, r1
    4bf4:	ce 0d       	add	r28, r14
    4bf6:	df 1d       	adc	r29, r15
    4bf8:	6d 2d       	mov	r22, r13
    4bfa:	62 95       	swap	r22
    4bfc:	66 0f       	add	r22, r22
    4bfe:	60 7e       	andi	r22, 0xE0	; 224
    4c00:	6c 5e       	subi	r22, 0xEC	; 236
    4c02:	98 01       	movw	r18, r16
    4c04:	a5 01       	movw	r20, r10
    4c06:	ce 01       	movw	r24, r28
    4c08:	05 df       	rcall	.-502    	; 0x4a14 <_ZN10W5500Class5writeEjhPKhj>
    4c0a:	c0 0f       	add	r28, r16
    4c0c:	d1 1f       	adc	r29, r17
    4c0e:	4d 2f       	mov	r20, r29
    4c10:	64 e2       	ldi	r22, 0x24	; 36
    4c12:	70 e0       	ldi	r23, 0x00	; 0
    4c14:	8d 2d       	mov	r24, r13
    4c16:	09 dd       	rcall	.-1518   	; 0x462a <_ZN10W5500Class7writeSnEhjh>
    4c18:	4c 2f       	mov	r20, r28
    4c1a:	65 e2       	ldi	r22, 0x25	; 37
    4c1c:	70 e0       	ldi	r23, 0x00	; 0
    4c1e:	8d 2d       	mov	r24, r13
    4c20:	df 91       	pop	r29
    4c22:	cf 91       	pop	r28
    4c24:	1f 91       	pop	r17
    4c26:	0f 91       	pop	r16
    4c28:	ff 90       	pop	r15
    4c2a:	ef 90       	pop	r14
    4c2c:	df 90       	pop	r13
    4c2e:	bf 90       	pop	r11
    4c30:	af 90       	pop	r10
    4c32:	fb cc       	rjmp	.-1546   	; 0x462a <_ZN10W5500Class7writeSnEhjh>

00004c34 <_ZN10W5500Class20send_data_processingEhPKhj>:
    4c34:	0f 93       	push	r16
    4c36:	1f 93       	push	r17
    4c38:	89 01       	movw	r16, r18
    4c3a:	9a 01       	movw	r18, r20
    4c3c:	40 e0       	ldi	r20, 0x00	; 0
    4c3e:	50 e0       	ldi	r21, 0x00	; 0
    4c40:	bf df       	rcall	.-130    	; 0x4bc0 <_ZN10W5500Class27send_data_processing_offsetEhjPKhj>
    4c42:	1f 91       	pop	r17
    4c44:	0f 91       	pop	r16
    4c46:	08 95       	ret

00004c48 <_ZN10W5500Class4readEjhPhj>:
    4c48:	df 92       	push	r13
    4c4a:	ef 92       	push	r14
    4c4c:	ff 92       	push	r15
    4c4e:	0f 93       	push	r16
    4c50:	1f 93       	push	r17
    4c52:	cf 93       	push	r28
    4c54:	df 93       	push	r29
    4c56:	d8 2f       	mov	r29, r24
    4c58:	d9 2e       	mov	r13, r25
    4c5a:	c6 2f       	mov	r28, r22
    4c5c:	7a 01       	movw	r14, r20
    4c5e:	89 01       	movw	r16, r18
    4c60:	80 91 04 0a 	lds	r24, 0x0A04	; 0x800a04 <wiznet_SPI_settings>
    4c64:	90 91 05 0a 	lds	r25, 0x0A05	; 0x800a05 <wiznet_SPI_settings+0x1>
    4c68:	81 de       	rcall	.-766    	; 0x496c <_ZN8SPIClass16beginTransactionE11SPISettings>
    4c6a:	b2 de       	rcall	.-668    	; 0x49d0 <_ZN10W5500Class5setSSEv>
    4c6c:	8d 2d       	mov	r24, r13
    4c6e:	98 de       	rcall	.-720    	; 0x49a0 <_ZN8SPIClass8transferEh>
    4c70:	8d 2f       	mov	r24, r29
    4c72:	96 de       	rcall	.-724    	; 0x49a0 <_ZN8SPIClass8transferEh>
    4c74:	8c 2f       	mov	r24, r28
    4c76:	94 de       	rcall	.-728    	; 0x49a0 <_ZN8SPIClass8transferEh>
    4c78:	e7 01       	movw	r28, r14
    4c7a:	e0 0e       	add	r14, r16
    4c7c:	f1 1e       	adc	r15, r17
    4c7e:	ce 15       	cp	r28, r14
    4c80:	df 05       	cpc	r29, r15
    4c82:	21 f0       	breq	.+8      	; 0x4c8c <_ZN10W5500Class4readEjhPhj+0x44>
    4c84:	80 e0       	ldi	r24, 0x00	; 0
    4c86:	8c de       	rcall	.-744    	; 0x49a0 <_ZN8SPIClass8transferEh>
    4c88:	89 93       	st	Y+, r24
    4c8a:	f9 cf       	rjmp	.-14     	; 0x4c7e <_ZN10W5500Class4readEjhPhj+0x36>
    4c8c:	a3 de       	rcall	.-698    	; 0x49d4 <_ZN10W5500Class7resetSSEv>
    4c8e:	8f de       	rcall	.-738    	; 0x49ae <_ZN8SPIClass14endTransactionEv>
    4c90:	c8 01       	movw	r24, r16
    4c92:	df 91       	pop	r29
    4c94:	cf 91       	pop	r28
    4c96:	1f 91       	pop	r17
    4c98:	0f 91       	pop	r16
    4c9a:	ff 90       	pop	r15
    4c9c:	ef 90       	pop	r14
    4c9e:	df 90       	pop	r13
    4ca0:	08 95       	ret

00004ca2 <_ZN10W5500Class9read_dataEhjPVhj>:
    4ca2:	0f 93       	push	r16
    4ca4:	1f 93       	push	r17
    4ca6:	cf 93       	push	r28
    4ca8:	df 93       	push	r29
    4caa:	00 d0       	rcall	.+0      	; 0x4cac <_ZN10W5500Class9read_dataEhjPVhj+0xa>
    4cac:	cd b7       	in	r28, 0x3d	; 61
    4cae:	de b7       	in	r29, 0x3e	; 62
    4cb0:	5a 83       	std	Y+2, r21	; 0x02
    4cb2:	49 83       	std	Y+1, r20	; 0x01
    4cb4:	a9 01       	movw	r20, r18
    4cb6:	98 01       	movw	r18, r16
    4cb8:	89 81       	ldd	r24, Y+1	; 0x01
    4cba:	9a 81       	ldd	r25, Y+2	; 0x02
    4cbc:	62 95       	swap	r22
    4cbe:	66 0f       	add	r22, r22
    4cc0:	60 7e       	andi	r22, 0xE0	; 224
    4cc2:	68 5e       	subi	r22, 0xE8	; 232
    4cc4:	0f 90       	pop	r0
    4cc6:	0f 90       	pop	r0
    4cc8:	df 91       	pop	r29
    4cca:	cf 91       	pop	r28
    4ccc:	1f 91       	pop	r17
    4cce:	0f 91       	pop	r16
    4cd0:	bb cf       	rjmp	.-138    	; 0x4c48 <_ZN10W5500Class4readEjhPhj>

00004cd2 <_ZN10W5500Class20recv_data_processingEhPhjh>:
    4cd2:	8f 92       	push	r8
    4cd4:	9f 92       	push	r9
    4cd6:	af 92       	push	r10
    4cd8:	bf 92       	push	r11
    4cda:	cf 92       	push	r12
    4cdc:	df 92       	push	r13
    4cde:	ef 92       	push	r14
    4ce0:	ff 92       	push	r15
    4ce2:	0f 93       	push	r16
    4ce4:	1f 93       	push	r17
    4ce6:	cf 93       	push	r28
    4ce8:	df 93       	push	r29
    4cea:	6c 01       	movw	r12, r24
    4cec:	96 2e       	mov	r9, r22
    4cee:	5a 01       	movw	r10, r20
    4cf0:	79 01       	movw	r14, r18
    4cf2:	80 2e       	mov	r8, r16
    4cf4:	68 e2       	ldi	r22, 0x28	; 40
    4cf6:	70 e0       	ldi	r23, 0x00	; 0
    4cf8:	89 2d       	mov	r24, r9
    4cfa:	8c dc       	rcall	.-1768   	; 0x4614 <_ZN10W5500Class6readSnEhj>
    4cfc:	08 2f       	mov	r16, r24
    4cfe:	69 e2       	ldi	r22, 0x29	; 41
    4d00:	70 e0       	ldi	r23, 0x00	; 0
    4d02:	89 2d       	mov	r24, r9
    4d04:	87 dc       	rcall	.-1778   	; 0x4614 <_ZN10W5500Class6readSnEhj>
    4d06:	10 e0       	ldi	r17, 0x00	; 0
    4d08:	10 2f       	mov	r17, r16
    4d0a:	00 27       	eor	r16, r16
    4d0c:	e8 01       	movw	r28, r16
    4d0e:	c8 0f       	add	r28, r24
    4d10:	d1 1d       	adc	r29, r1
    4d12:	87 01       	movw	r16, r14
    4d14:	95 01       	movw	r18, r10
    4d16:	ae 01       	movw	r20, r28
    4d18:	69 2d       	mov	r22, r9
    4d1a:	c6 01       	movw	r24, r12
    4d1c:	c2 df       	rcall	.-124    	; 0x4ca2 <_ZN10W5500Class9read_dataEhjPVhj>
    4d1e:	81 10       	cpse	r8, r1
    4d20:	18 c0       	rjmp	.+48     	; 0x4d52 <_ZN10W5500Class20recv_data_processingEhPhjh+0x80>
    4d22:	0c 0f       	add	r16, r28
    4d24:	1d 1f       	adc	r17, r29
    4d26:	41 2f       	mov	r20, r17
    4d28:	68 e2       	ldi	r22, 0x28	; 40
    4d2a:	70 e0       	ldi	r23, 0x00	; 0
    4d2c:	89 2d       	mov	r24, r9
    4d2e:	7d dc       	rcall	.-1798   	; 0x462a <_ZN10W5500Class7writeSnEhjh>
    4d30:	40 2f       	mov	r20, r16
    4d32:	69 e2       	ldi	r22, 0x29	; 41
    4d34:	70 e0       	ldi	r23, 0x00	; 0
    4d36:	89 2d       	mov	r24, r9
    4d38:	df 91       	pop	r29
    4d3a:	cf 91       	pop	r28
    4d3c:	1f 91       	pop	r17
    4d3e:	0f 91       	pop	r16
    4d40:	ff 90       	pop	r15
    4d42:	ef 90       	pop	r14
    4d44:	df 90       	pop	r13
    4d46:	cf 90       	pop	r12
    4d48:	bf 90       	pop	r11
    4d4a:	af 90       	pop	r10
    4d4c:	9f 90       	pop	r9
    4d4e:	8f 90       	pop	r8
    4d50:	6c cc       	rjmp	.-1832   	; 0x462a <_ZN10W5500Class7writeSnEhjh>
    4d52:	df 91       	pop	r29
    4d54:	cf 91       	pop	r28
    4d56:	1f 91       	pop	r17
    4d58:	0f 91       	pop	r16
    4d5a:	ff 90       	pop	r15
    4d5c:	ef 90       	pop	r14
    4d5e:	df 90       	pop	r13
    4d60:	cf 90       	pop	r12
    4d62:	bf 90       	pop	r11
    4d64:	af 90       	pop	r10
    4d66:	9f 90       	pop	r9
    4d68:	8f 90       	pop	r8
    4d6a:	08 95       	ret

00004d6c <_ZN10W5500Class9execCmdSnEh7SockCMD>:
    4d6c:	cf 93       	push	r28
    4d6e:	c6 2f       	mov	r28, r22
    4d70:	61 e0       	ldi	r22, 0x01	; 1
    4d72:	70 e0       	ldi	r23, 0x00	; 0
    4d74:	8c 2f       	mov	r24, r28
    4d76:	59 dc       	rcall	.-1870   	; 0x462a <_ZN10W5500Class7writeSnEhjh>
    4d78:	61 e0       	ldi	r22, 0x01	; 1
    4d7a:	70 e0       	ldi	r23, 0x00	; 0
    4d7c:	8c 2f       	mov	r24, r28
    4d7e:	4a dc       	rcall	.-1900   	; 0x4614 <_ZN10W5500Class6readSnEhj>
    4d80:	81 11       	cpse	r24, r1
    4d82:	fa cf       	rjmp	.-12     	; 0x4d78 <_ZN10W5500Class9execCmdSnEh7SockCMD+0xc>
    4d84:	cf 91       	pop	r28
    4d86:	08 95       	ret

00004d88 <_GLOBAL__sub_I_w5500>:
    // Invert the SPI2X bit
    clockDiv ^= 0x1;

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    4d88:	e4 e0       	ldi	r30, 0x04	; 4
    4d8a:	fa e0       	ldi	r31, 0x0A	; 10
    4d8c:	80 e5       	ldi	r24, 0x50	; 80
    4d8e:	80 83       	st	Z, r24
    spsr = clockDiv & SPI_2XCLOCK_MASK;
    4d90:	81 e0       	ldi	r24, 0x01	; 1
    4d92:	81 83       	std	Z+1, r24	; 0x01
    4d94:	08 95       	ret

00004d96 <_ZN5I2CIOC1Ev>:
      // Remove the values which are not inputs and get the value of the pin
      pinVal = this->read() & _dirMask;
      pinVal = ( pinVal >> pin ) & 0x01; // Get the pin value
   }
   return (pinVal);
}
    4d96:	fc 01       	movw	r30, r24
    4d98:	12 82       	std	Z+2, r1	; 0x02
    4d9a:	8f ef       	ldi	r24, 0xFF	; 255
    4d9c:	81 83       	std	Z+1, r24	; 0x01
    4d9e:	10 82       	st	Z, r1
    4da0:	13 82       	std	Z+3, r1	; 0x03
    4da2:	08 95       	ret

00004da4 <_ZN5I2CIO8portModeEh>:
    4da4:	fc 01       	movw	r30, r24
    4da6:	83 81       	ldd	r24, Z+3	; 0x03
    4da8:	88 23       	and	r24, r24
    4daa:	31 f0       	breq	.+12     	; 0x4db8 <_ZN5I2CIO8portModeEh+0x14>
    4dac:	61 11       	cpse	r22, r1
    4dae:	03 c0       	rjmp	.+6      	; 0x4db6 <_ZN5I2CIO8portModeEh+0x12>
    4db0:	8f ef       	ldi	r24, 0xFF	; 255
    4db2:	81 83       	std	Z+1, r24	; 0x01
    4db4:	08 95       	ret
    4db6:	11 82       	std	Z+1, r1	; 0x01
    4db8:	08 95       	ret

00004dba <_ZN5I2CIO11isAvailableEh>:
    4dba:	89 e7       	ldi	r24, 0x79	; 121
    4dbc:	9a e0       	ldi	r25, 0x0A	; 10
    4dbe:	f0 d5       	rcall	.+3040   	; 0x59a0 <_ZN7TwoWire17beginTransmissionEh>
    4dc0:	89 e7       	ldi	r24, 0x79	; 121
    4dc2:	9a e0       	ldi	r25, 0x0A	; 10
    4dc4:	6e d6       	rcall	.+3292   	; 0x5aa2 <_ZN7TwoWire15endTransmissionEv>
    4dc6:	91 e0       	ldi	r25, 0x01	; 1
    4dc8:	81 11       	cpse	r24, r1
    4dca:	90 e0       	ldi	r25, 0x00	; 0
    4dcc:	89 2f       	mov	r24, r25
    4dce:	08 95       	ret

00004dd0 <_ZN5I2CIO5beginEh>:
    4dd0:	cf 93       	push	r28
    4dd2:	df 93       	push	r29
    4dd4:	ec 01       	movw	r28, r24
    4dd6:	6a 83       	std	Y+2, r22	; 0x02
    4dd8:	89 e7       	ldi	r24, 0x79	; 121
    4dda:	9a e0       	ldi	r25, 0x0A	; 10
    4ddc:	ce d5       	rcall	.+2972   	; 0x597a <_ZN7TwoWire5beginEv>
    4dde:	6a 81       	ldd	r22, Y+2	; 0x02
    4de0:	ce 01       	movw	r24, r28
    4de2:	eb df       	rcall	.-42     	; 0x4dba <_ZN5I2CIO11isAvailableEh>
    4de4:	8b 83       	std	Y+3, r24	; 0x03
    4de6:	88 23       	and	r24, r24
    4de8:	21 f0       	breq	.+8      	; 0x4df2 <_ZN5I2CIO5beginEh+0x22>
    4dea:	89 e7       	ldi	r24, 0x79	; 121
    4dec:	9a e0       	ldi	r25, 0x0A	; 10
    4dee:	01 d5       	rcall	.+2562   	; 0x57f2 <_ZN7TwoWire4readEv>
    4df0:	88 83       	st	Y, r24
    4df2:	8b 81       	ldd	r24, Y+3	; 0x03
    4df4:	90 e0       	ldi	r25, 0x00	; 0
    4df6:	df 91       	pop	r29
    4df8:	cf 91       	pop	r28
    4dfa:	08 95       	ret

00004dfc <_ZN5I2CIO5writeEh>:
}

//
// write
int I2CIO::write ( uint8_t value )
{
    4dfc:	cf 93       	push	r28
    4dfe:	df 93       	push	r29
   int status = 0;
   
   if ( _initialised )
    4e00:	fc 01       	movw	r30, r24
    4e02:	23 81       	ldd	r18, Z+3	; 0x03
    4e04:	22 23       	and	r18, r18
    4e06:	99 f0       	breq	.+38     	; 0x4e2e <_ZN5I2CIO5writeEh+0x32>
    4e08:	ec 01       	movw	r28, r24
   {
      // Only write HIGH the values of the ports that have been initialised as
      // outputs updating the output shadow of the device
      _shadow = ( value & ~(_dirMask) );
    4e0a:	81 81       	ldd	r24, Z+1	; 0x01
    4e0c:	80 95       	com	r24
    4e0e:	68 23       	and	r22, r24
    4e10:	60 83       	st	Z, r22
   
      Wire.beginTransmission ( _i2cAddr );
    4e12:	62 81       	ldd	r22, Z+2	; 0x02
    4e14:	89 e7       	ldi	r24, 0x79	; 121
    4e16:	9a e0       	ldi	r25, 0x0A	; 10
    4e18:	c3 d5       	rcall	.+2950   	; 0x59a0 <_ZN7TwoWire17beginTransmissionEh>
#if (ARDUINO <  100)
      Wire.send ( _shadow );
#else
      Wire.write ( _shadow );
    4e1a:	68 81       	ld	r22, Y
    4e1c:	89 e7       	ldi	r24, 0x79	; 121
    4e1e:	9a e0       	ldi	r25, 0x0A	; 10
    4e20:	6e d5       	rcall	.+2780   	; 0x58fe <_ZN7TwoWire5writeEh>
#endif  
      status = Wire.endTransmission ();
    4e22:	89 e7       	ldi	r24, 0x79	; 121
    4e24:	9a e0       	ldi	r25, 0x0A	; 10
    4e26:	3d d6       	rcall	.+3194   	; 0x5aa2 <_ZN7TwoWire15endTransmissionEv>
    4e28:	28 2f       	mov	r18, r24
    4e2a:	30 e0       	ldi	r19, 0x00	; 0
    4e2c:	02 c0       	rjmp	.+4      	; 0x4e32 <_ZN5I2CIO5writeEh+0x36>

//
// write
int I2CIO::write ( uint8_t value )
{
   int status = 0;
    4e2e:	20 e0       	ldi	r18, 0x00	; 0
    4e30:	30 e0       	ldi	r19, 0x00	; 0
#else
      Wire.write ( _shadow );
#endif  
      status = Wire.endTransmission ();
   }
   return ( (status == 0) );
    4e32:	81 e0       	ldi	r24, 0x01	; 1
    4e34:	90 e0       	ldi	r25, 0x00	; 0
    4e36:	23 2b       	or	r18, r19
    4e38:	11 f0       	breq	.+4      	; 0x4e3e <_ZN5I2CIO5writeEh+0x42>
    4e3a:	80 e0       	ldi	r24, 0x00	; 0
    4e3c:	90 e0       	ldi	r25, 0x00	; 0
}
    4e3e:	df 91       	pop	r29
    4e40:	cf 91       	pop	r28
    4e42:	08 95       	ret

00004e44 <_ZN3LCD15setBacklightPinEh13t_backlighPol>:

// This will 'left justify' text from the cursor
void LCD::noAutoscroll(void) 
{
   _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
   command(LCD_ENTRYMODESET | _displaymode);
    4e44:	08 95       	ret

00004e46 <_ZN3LCD12setBacklightEh>:
    4e46:	08 95       	ret

00004e48 <_ZN3LCD5writeEh>:
    4e48:	dc 01       	movw	r26, r24
    4e4a:	ed 91       	ld	r30, X+
    4e4c:	fc 91       	ld	r31, X
    4e4e:	06 84       	ldd	r0, Z+14	; 0x0e
    4e50:	f7 85       	ldd	r31, Z+15	; 0x0f
    4e52:	e0 2d       	mov	r30, r0
    4e54:	41 e0       	ldi	r20, 0x01	; 1
    4e56:	09 95       	icall
    4e58:	81 e0       	ldi	r24, 0x01	; 1
    4e5a:	90 e0       	ldi	r25, 0x00	; 0
    4e5c:	08 95       	ret

00004e5e <_ZN3LCDC1Ev>:
    4e5e:	fc 01       	movw	r30, r24
    4e60:	13 82       	std	Z+3, r1	; 0x03
    4e62:	12 82       	std	Z+2, r1	; 0x02
    4e64:	2b e0       	ldi	r18, 0x0B	; 11
    4e66:	38 e0       	ldi	r19, 0x08	; 8
    4e68:	31 83       	std	Z+1, r19	; 0x01
    4e6a:	20 83       	st	Z, r18
    4e6c:	08 95       	ret

00004e6e <_ZN3LCD9backlightEv>:
    4e6e:	dc 01       	movw	r26, r24
    4e70:	ed 91       	ld	r30, X+
    4e72:	fc 91       	ld	r31, X
    4e74:	04 84       	ldd	r0, Z+12	; 0x0c
    4e76:	f5 85       	ldd	r31, Z+13	; 0x0d
    4e78:	e0 2d       	mov	r30, r0
    4e7a:	6f ef       	ldi	r22, 0xFF	; 255
    4e7c:	09 94       	ijmp

00004e7e <_ZN3LCD11noBacklightEv>:
    4e7e:	dc 01       	movw	r26, r24
    4e80:	ed 91       	ld	r30, X+
    4e82:	fc 91       	ld	r31, X
    4e84:	04 84       	ldd	r0, Z+12	; 0x0c
    4e86:	f5 85       	ldd	r31, Z+13	; 0x0d
    4e88:	e0 2d       	mov	r30, r0
    4e8a:	60 e0       	ldi	r22, 0x00	; 0
    4e8c:	09 94       	ijmp

00004e8e <_ZN3LCD7commandEh>:
    4e8e:	dc 01       	movw	r26, r24
    4e90:	ed 91       	ld	r30, X+
    4e92:	fc 91       	ld	r31, X
    4e94:	06 84       	ldd	r0, Z+14	; 0x0e
    4e96:	f7 85       	ldd	r31, Z+15	; 0x0f
    4e98:	e0 2d       	mov	r30, r0
    4e9a:	40 e0       	ldi	r20, 0x00	; 0
    4e9c:	09 94       	ijmp

00004e9e <_ZN3LCD5clearEv>:
    4e9e:	61 e0       	ldi	r22, 0x01	; 1
    4ea0:	f6 df       	rcall	.-20     	; 0x4e8e <_ZN3LCD7commandEh>
    4ea2:	80 ed       	ldi	r24, 0xD0	; 208
    4ea4:	97 e0       	ldi	r25, 0x07	; 7
    4ea6:	0c 94 37 31 	jmp	0x626e	; 0x626e <delayMicroseconds>

00004eaa <_ZN3LCD9setCursorEhh>:
    4eaa:	cf 93       	push	r28
    4eac:	df 93       	push	r29
    4eae:	cd b7       	in	r28, 0x3d	; 61
    4eb0:	de b7       	in	r29, 0x3e	; 62
    4eb2:	28 97       	sbiw	r28, 0x08	; 8
    4eb4:	0f b6       	in	r0, 0x3f	; 63
    4eb6:	f8 94       	cli
    4eb8:	de bf       	out	0x3e, r29	; 62
    4eba:	0f be       	out	0x3f, r0	; 63
    4ebc:	cd bf       	out	0x3d, r28	; 61
    4ebe:	fc 01       	movw	r30, r24
    4ec0:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <_ZN14EthernetClient8_srcportE+0x8>
    4ec4:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <_ZN14EthernetClient8_srcportE+0x9>
    4ec8:	a0 91 67 01 	lds	r26, 0x0167	; 0x800167 <_ZN14EthernetClient8_srcportE+0xa>
    4ecc:	b0 91 68 01 	lds	r27, 0x0168	; 0x800168 <_ZN14EthernetClient8_srcportE+0xb>
    4ed0:	8d 83       	std	Y+5, r24	; 0x05
    4ed2:	9e 83       	std	Y+6, r25	; 0x06
    4ed4:	af 83       	std	Y+7, r26	; 0x07
    4ed6:	b8 87       	std	Y+8, r27	; 0x08
    4ed8:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <_ZN14EthernetClient8_srcportE+0xc>
    4edc:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <_ZN14EthernetClient8_srcportE+0xd>
    4ee0:	a0 91 6b 01 	lds	r26, 0x016B	; 0x80016b <_ZN14EthernetClient8_srcportE+0xe>
    4ee4:	b0 91 6c 01 	lds	r27, 0x016C	; 0x80016c <_ZN14EthernetClient8_srcportE+0xf>
    4ee8:	89 83       	std	Y+1, r24	; 0x01
    4eea:	9a 83       	std	Y+2, r25	; 0x02
    4eec:	ab 83       	std	Y+3, r26	; 0x03
    4eee:	bc 83       	std	Y+4, r27	; 0x04
    4ef0:	87 81       	ldd	r24, Z+7	; 0x07
    4ef2:	48 17       	cp	r20, r24
    4ef4:	10 f0       	brcs	.+4      	; 0x4efa <_ZN3LCD9setCursorEhh+0x50>
    4ef6:	4f ef       	ldi	r20, 0xFF	; 255
    4ef8:	48 0f       	add	r20, r24
    4efa:	90 85       	ldd	r25, Z+8	; 0x08
    4efc:	50 e0       	ldi	r21, 0x00	; 0
    4efe:	de 01       	movw	r26, r28
    4f00:	a4 0f       	add	r26, r20
    4f02:	b5 1f       	adc	r27, r21
    4f04:	90 31       	cpi	r25, 0x10	; 16
    4f06:	29 f4       	brne	.+10     	; 0x4f12 <_ZN3LCD9setCursorEhh+0x68>
    4f08:	84 30       	cpi	r24, 0x04	; 4
    4f0a:	19 f4       	brne	.+6      	; 0x4f12 <_ZN3LCD9setCursorEhh+0x68>
    4f0c:	11 96       	adiw	r26, 0x01	; 1
    4f0e:	9c 91       	ld	r25, X
    4f10:	02 c0       	rjmp	.+4      	; 0x4f16 <_ZN3LCD9setCursorEhh+0x6c>
    4f12:	15 96       	adiw	r26, 0x05	; 5
    4f14:	9c 91       	ld	r25, X
    4f16:	69 0f       	add	r22, r25
    4f18:	60 68       	ori	r22, 0x80	; 128
    4f1a:	cf 01       	movw	r24, r30
    4f1c:	28 96       	adiw	r28, 0x08	; 8
    4f1e:	0f b6       	in	r0, 0x3f	; 63
    4f20:	f8 94       	cli
    4f22:	de bf       	out	0x3e, r29	; 62
    4f24:	0f be       	out	0x3f, r0	; 63
    4f26:	cd bf       	out	0x3d, r28	; 61
    4f28:	df 91       	pop	r29
    4f2a:	cf 91       	pop	r28
    4f2c:	b0 cf       	rjmp	.-160    	; 0x4e8e <_ZN3LCD7commandEh>

00004f2e <_ZN3LCD9noDisplayEv>:
    4f2e:	fc 01       	movw	r30, r24
    4f30:	65 81       	ldd	r22, Z+5	; 0x05
    4f32:	6b 7f       	andi	r22, 0xFB	; 251
    4f34:	65 83       	std	Z+5, r22	; 0x05
    4f36:	68 60       	ori	r22, 0x08	; 8
    4f38:	aa cf       	rjmp	.-172    	; 0x4e8e <_ZN3LCD7commandEh>

00004f3a <_ZN3LCD7displayEv>:
    4f3a:	fc 01       	movw	r30, r24
    4f3c:	65 81       	ldd	r22, Z+5	; 0x05
    4f3e:	26 2f       	mov	r18, r22
    4f40:	24 60       	ori	r18, 0x04	; 4
    4f42:	25 83       	std	Z+5, r18	; 0x05
    4f44:	6c 60       	ori	r22, 0x0C	; 12
    4f46:	a3 cf       	rjmp	.-186    	; 0x4e8e <_ZN3LCD7commandEh>

00004f48 <_ZN3LCD5beginEhhh>:
    4f48:	cf 93       	push	r28
    4f4a:	df 93       	push	r29
    4f4c:	ec 01       	movw	r28, r24
    4f4e:	42 30       	cpi	r20, 0x02	; 2
    4f50:	18 f0       	brcs	.+6      	; 0x4f58 <_ZN3LCD5beginEhhh+0x10>
    4f52:	8c 81       	ldd	r24, Y+4	; 0x04
    4f54:	88 60       	ori	r24, 0x08	; 8
    4f56:	8c 83       	std	Y+4, r24	; 0x04
    4f58:	4f 83       	std	Y+7, r20	; 0x07
    4f5a:	68 87       	std	Y+8, r22	; 0x08
    4f5c:	22 23       	and	r18, r18
    4f5e:	29 f0       	breq	.+10     	; 0x4f6a <_ZN3LCD5beginEhhh+0x22>
    4f60:	41 30       	cpi	r20, 0x01	; 1
    4f62:	19 f4       	brne	.+6      	; 0x4f6a <_ZN3LCD5beginEhhh+0x22>
    4f64:	8c 81       	ldd	r24, Y+4	; 0x04
    4f66:	84 60       	ori	r24, 0x04	; 4
    4f68:	8c 83       	std	Y+4, r24	; 0x04
    4f6a:	64 e6       	ldi	r22, 0x64	; 100
    4f6c:	70 e0       	ldi	r23, 0x00	; 0
    4f6e:	80 e0       	ldi	r24, 0x00	; 0
    4f70:	90 e0       	ldi	r25, 0x00	; 0
    4f72:	0e 94 fe 30 	call	0x61fc	; 0x61fc <delay>
    4f76:	6c 81       	ldd	r22, Y+4	; 0x04
    4f78:	64 fd       	sbrc	r22, 4
    4f7a:	31 c0       	rjmp	.+98     	; 0x4fde <_ZN3LCD5beginEhhh+0x96>
    4f7c:	e8 81       	ld	r30, Y
    4f7e:	f9 81       	ldd	r31, Y+1	; 0x01
    4f80:	06 84       	ldd	r0, Z+14	; 0x0e
    4f82:	f7 85       	ldd	r31, Z+15	; 0x0f
    4f84:	e0 2d       	mov	r30, r0
    4f86:	42 e0       	ldi	r20, 0x02	; 2
    4f88:	63 e0       	ldi	r22, 0x03	; 3
    4f8a:	ce 01       	movw	r24, r28
    4f8c:	09 95       	icall
    4f8e:	84 e9       	ldi	r24, 0x94	; 148
    4f90:	91 e1       	ldi	r25, 0x11	; 17
    4f92:	0e 94 37 31 	call	0x626e	; 0x626e <delayMicroseconds>
    4f96:	e8 81       	ld	r30, Y
    4f98:	f9 81       	ldd	r31, Y+1	; 0x01
    4f9a:	06 84       	ldd	r0, Z+14	; 0x0e
    4f9c:	f7 85       	ldd	r31, Z+15	; 0x0f
    4f9e:	e0 2d       	mov	r30, r0
    4fa0:	42 e0       	ldi	r20, 0x02	; 2
    4fa2:	63 e0       	ldi	r22, 0x03	; 3
    4fa4:	ce 01       	movw	r24, r28
    4fa6:	09 95       	icall
    4fa8:	86 e9       	ldi	r24, 0x96	; 150
    4faa:	90 e0       	ldi	r25, 0x00	; 0
    4fac:	0e 94 37 31 	call	0x626e	; 0x626e <delayMicroseconds>
    4fb0:	e8 81       	ld	r30, Y
    4fb2:	f9 81       	ldd	r31, Y+1	; 0x01
    4fb4:	06 84       	ldd	r0, Z+14	; 0x0e
    4fb6:	f7 85       	ldd	r31, Z+15	; 0x0f
    4fb8:	e0 2d       	mov	r30, r0
    4fba:	42 e0       	ldi	r20, 0x02	; 2
    4fbc:	63 e0       	ldi	r22, 0x03	; 3
    4fbe:	ce 01       	movw	r24, r28
    4fc0:	09 95       	icall
    4fc2:	86 e9       	ldi	r24, 0x96	; 150
    4fc4:	90 e0       	ldi	r25, 0x00	; 0
    4fc6:	0e 94 37 31 	call	0x626e	; 0x626e <delayMicroseconds>
    4fca:	e8 81       	ld	r30, Y
    4fcc:	f9 81       	ldd	r31, Y+1	; 0x01
    4fce:	06 84       	ldd	r0, Z+14	; 0x0e
    4fd0:	f7 85       	ldd	r31, Z+15	; 0x0f
    4fd2:	e0 2d       	mov	r30, r0
    4fd4:	42 e0       	ldi	r20, 0x02	; 2
    4fd6:	62 e0       	ldi	r22, 0x02	; 2
    4fd8:	ce 01       	movw	r24, r28
    4fda:	09 95       	icall
    4fdc:	13 c0       	rjmp	.+38     	; 0x5004 <_ZN3LCD5beginEhhh+0xbc>
    4fde:	60 62       	ori	r22, 0x20	; 32
    4fe0:	ce 01       	movw	r24, r28
    4fe2:	55 df       	rcall	.-342    	; 0x4e8e <_ZN3LCD7commandEh>
    4fe4:	84 e9       	ldi	r24, 0x94	; 148
    4fe6:	91 e1       	ldi	r25, 0x11	; 17
    4fe8:	0e 94 37 31 	call	0x626e	; 0x626e <delayMicroseconds>
    4fec:	6c 81       	ldd	r22, Y+4	; 0x04
    4fee:	60 62       	ori	r22, 0x20	; 32
    4ff0:	ce 01       	movw	r24, r28
    4ff2:	4d df       	rcall	.-358    	; 0x4e8e <_ZN3LCD7commandEh>
    4ff4:	86 e9       	ldi	r24, 0x96	; 150
    4ff6:	90 e0       	ldi	r25, 0x00	; 0
    4ff8:	0e 94 37 31 	call	0x626e	; 0x626e <delayMicroseconds>
    4ffc:	6c 81       	ldd	r22, Y+4	; 0x04
    4ffe:	60 62       	ori	r22, 0x20	; 32
    5000:	ce 01       	movw	r24, r28
    5002:	45 df       	rcall	.-374    	; 0x4e8e <_ZN3LCD7commandEh>
    5004:	86 e9       	ldi	r24, 0x96	; 150
    5006:	90 e0       	ldi	r25, 0x00	; 0
    5008:	0e 94 37 31 	call	0x626e	; 0x626e <delayMicroseconds>
    500c:	6c 81       	ldd	r22, Y+4	; 0x04
    500e:	60 62       	ori	r22, 0x20	; 32
    5010:	ce 01       	movw	r24, r28
    5012:	3d df       	rcall	.-390    	; 0x4e8e <_ZN3LCD7commandEh>
    5014:	8c e3       	ldi	r24, 0x3C	; 60
    5016:	90 e0       	ldi	r25, 0x00	; 0
    5018:	0e 94 37 31 	call	0x626e	; 0x626e <delayMicroseconds>
    501c:	84 e0       	ldi	r24, 0x04	; 4
    501e:	8d 83       	std	Y+5, r24	; 0x05
    5020:	ce 01       	movw	r24, r28
    5022:	8b df       	rcall	.-234    	; 0x4f3a <_ZN3LCD7displayEv>
    5024:	ce 01       	movw	r24, r28
    5026:	3b df       	rcall	.-394    	; 0x4e9e <_ZN3LCD5clearEv>
    5028:	82 e0       	ldi	r24, 0x02	; 2
    502a:	8e 83       	std	Y+6, r24	; 0x06
    502c:	66 e0       	ldi	r22, 0x06	; 6
    502e:	ce 01       	movw	r24, r28
    5030:	2e df       	rcall	.-420    	; 0x4e8e <_ZN3LCD7commandEh>
    5032:	ce 01       	movw	r24, r28
    5034:	df 91       	pop	r29
    5036:	cf 91       	pop	r28
    5038:	1a cf       	rjmp	.-460    	; 0x4e6e <_ZN3LCD9backlightEv>

0000503a <_ZN3LCD10createCharEhPh>:
}

// Write to CGRAM of new characters
void LCD::createChar(uint8_t location, uint8_t charmap[]) 
{
    503a:	ef 92       	push	r14
    503c:	ff 92       	push	r15
    503e:	0f 93       	push	r16
    5040:	1f 93       	push	r17
    5042:	cf 93       	push	r28
    5044:	df 93       	push	r29
    5046:	8c 01       	movw	r16, r24
    5048:	7a 01       	movw	r14, r20
   location &= 0x7;            // we only have 8 locations 0-7
   
   command(LCD_SETCGRAMADDR | (location << 3));
    504a:	67 70       	andi	r22, 0x07	; 7
    504c:	88 e0       	ldi	r24, 0x08	; 8
    504e:	68 9f       	mul	r22, r24
    5050:	b0 01       	movw	r22, r0
    5052:	11 24       	eor	r1, r1
    5054:	60 64       	ori	r22, 0x40	; 64
    5056:	c8 01       	movw	r24, r16
    5058:	1a df       	rcall	.-460    	; 0x4e8e <_ZN3LCD7commandEh>
   delayMicroseconds(30);
    505a:	8e e1       	ldi	r24, 0x1E	; 30
    505c:	90 e0       	ldi	r25, 0x00	; 0
    505e:	0e 94 37 31 	call	0x626e	; 0x626e <delayMicroseconds>
    5062:	e7 01       	movw	r28, r14
    5064:	a8 e0       	ldi	r26, 0x08	; 8
    5066:	ea 0e       	add	r14, r26
    5068:	f1 1c       	adc	r15, r1
   
   for (uint8_t i = 0; i < 8; i++)
   {
      write(charmap[i]);      // call the virtual write method
    506a:	69 91       	ld	r22, Y+
    506c:	d8 01       	movw	r26, r16
    506e:	ed 91       	ld	r30, X+
    5070:	fc 91       	ld	r31, X
    5072:	01 90       	ld	r0, Z+
    5074:	f0 81       	ld	r31, Z
    5076:	e0 2d       	mov	r30, r0
    5078:	c8 01       	movw	r24, r16
    507a:	09 95       	icall
      delayMicroseconds(40);
    507c:	88 e2       	ldi	r24, 0x28	; 40
    507e:	90 e0       	ldi	r25, 0x00	; 0
    5080:	0e 94 37 31 	call	0x626e	; 0x626e <delayMicroseconds>
   location &= 0x7;            // we only have 8 locations 0-7
   
   command(LCD_SETCGRAMADDR | (location << 3));
   delayMicroseconds(30);
   
   for (uint8_t i = 0; i < 8; i++)
    5084:	ce 15       	cp	r28, r14
    5086:	df 05       	cpc	r29, r15
    5088:	81 f7       	brne	.-32     	; 0x506a <_ZN3LCD10createCharEhPh+0x30>
   {
      write(charmap[i]);      // call the virtual write method
      delayMicroseconds(40);
   }
}
    508a:	df 91       	pop	r29
    508c:	cf 91       	pop	r28
    508e:	1f 91       	pop	r17
    5090:	0f 91       	pop	r16
    5092:	ff 90       	pop	r15
    5094:	ef 90       	pop	r14
    5096:	08 95       	ret

00005098 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol>:
LiquidCrystal_I2C::LiquidCrystal_I2C(uint8_t lcd_Addr, uint8_t En, uint8_t Rw,
                                     uint8_t Rs, uint8_t d4, uint8_t d5,
                                     uint8_t d6, uint8_t d7 )
{
   config(lcd_Addr, En, Rw, Rs, d4, d5, d6, d7);
}
    5098:	21 e0       	ldi	r18, 0x01	; 1
    509a:	01 c0       	rjmp	.+2      	; 0x509e <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol+0x6>
    509c:	22 0f       	add	r18, r18
    509e:	6a 95       	dec	r22
    50a0:	ea f7       	brpl	.-6      	; 0x509c <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol+0x4>
    50a2:	dc 01       	movw	r26, r24
    50a4:	1b 96       	adiw	r26, 0x0b	; 11
    50a6:	2c 93       	st	X, r18
    50a8:	1b 97       	sbiw	r26, 0x0b	; 11
    50aa:	19 96       	adiw	r26, 0x09	; 9
    50ac:	4c 93       	st	X, r20
    50ae:	19 97       	sbiw	r26, 0x09	; 9
    50b0:	ed 91       	ld	r30, X+
    50b2:	fc 91       	ld	r31, X
    50b4:	04 84       	ldd	r0, Z+12	; 0x0c
    50b6:	f5 85       	ldd	r31, Z+13	; 0x0d
    50b8:	e0 2d       	mov	r30, r0
    50ba:	60 e0       	ldi	r22, 0x00	; 0
    50bc:	09 94       	ijmp

000050be <_ZN17LiquidCrystal_I2C12setBacklightEh>:
    50be:	fc 01       	movw	r30, r24
    50c0:	83 85       	ldd	r24, Z+11	; 0x0b
    50c2:	88 23       	and	r24, r24
    50c4:	89 f0       	breq	.+34     	; 0x50e8 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x2a>
    50c6:	91 85       	ldd	r25, Z+9	; 0x09
    50c8:	91 11       	cpse	r25, r1
    50ca:	03 c0       	rjmp	.+6      	; 0x50d2 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x14>
    50cc:	61 11       	cpse	r22, r1
    50ce:	05 c0       	rjmp	.+10     	; 0x50da <_ZN17LiquidCrystal_I2C12setBacklightEh+0x1c>
    50d0:	06 c0       	rjmp	.+12     	; 0x50de <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    50d2:	91 30       	cpi	r25, 0x01	; 1
    50d4:	21 f4       	brne	.+8      	; 0x50de <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    50d6:	61 11       	cpse	r22, r1
    50d8:	02 c0       	rjmp	.+4      	; 0x50de <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    50da:	84 87       	std	Z+12, r24	; 0x0c
    50dc:	01 c0       	rjmp	.+2      	; 0x50e0 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x22>
    50de:	14 86       	std	Z+12, r1	; 0x0c
    50e0:	64 85       	ldd	r22, Z+12	; 0x0c
    50e2:	cf 01       	movw	r24, r30
    50e4:	0d 96       	adiw	r24, 0x0d	; 13
    50e6:	8a ce       	rjmp	.-748    	; 0x4dfc <_ZN5I2CIO5writeEh>
    50e8:	08 95       	ret

000050ea <_ZN17LiquidCrystal_I2C4initEv>:
    50ea:	0f 93       	push	r16
    50ec:	1f 93       	push	r17
    50ee:	cf 93       	push	r28
    50f0:	df 93       	push	r29
    50f2:	8c 01       	movw	r16, r24
    50f4:	ec 01       	movw	r28, r24
    50f6:	2d 96       	adiw	r28, 0x0d	; 13
    50f8:	fc 01       	movw	r30, r24
    50fa:	62 85       	ldd	r22, Z+10	; 0x0a
    50fc:	ce 01       	movw	r24, r28
    50fe:	68 de       	rcall	.-816    	; 0x4dd0 <_ZN5I2CIO5beginEh>
    5100:	01 97       	sbiw	r24, 0x01	; 1
    5102:	59 f4       	brne	.+22     	; 0x511a <_ZN17LiquidCrystal_I2C4initEv+0x30>
    5104:	61 e0       	ldi	r22, 0x01	; 1
    5106:	ce 01       	movw	r24, r28
    5108:	4d de       	rcall	.-870    	; 0x4da4 <_ZN5I2CIO8portModeEh>
    510a:	f8 01       	movw	r30, r16
    510c:	14 82       	std	Z+4, r1	; 0x04
    510e:	60 e0       	ldi	r22, 0x00	; 0
    5110:	ce 01       	movw	r24, r28
    5112:	74 de       	rcall	.-792    	; 0x4dfc <_ZN5I2CIO5writeEh>
    5114:	81 e0       	ldi	r24, 0x01	; 1
    5116:	90 e0       	ldi	r25, 0x00	; 0
    5118:	02 c0       	rjmp	.+4      	; 0x511e <_ZN17LiquidCrystal_I2C4initEv+0x34>
    511a:	80 e0       	ldi	r24, 0x00	; 0
    511c:	90 e0       	ldi	r25, 0x00	; 0
    511e:	df 91       	pop	r29
    5120:	cf 91       	pop	r28
    5122:	1f 91       	pop	r17
    5124:	0f 91       	pop	r16
    5126:	08 95       	ret

00005128 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh>:
    5128:	8f 92       	push	r8
    512a:	af 92       	push	r10
    512c:	cf 92       	push	r12
    512e:	ef 92       	push	r14
    5130:	0f 93       	push	r16
    5132:	cf 93       	push	r28
    5134:	df 93       	push	r29
    5136:	cd b7       	in	r28, 0x3d	; 61
    5138:	de b7       	in	r29, 0x3e	; 62
    513a:	fc 01       	movw	r30, r24
    513c:	62 87       	std	Z+10, r22	; 0x0a
    513e:	13 86       	std	Z+11, r1	; 0x0b
    5140:	14 86       	std	Z+12, r1	; 0x0c
    5142:	11 86       	std	Z+9, r1	; 0x09
    5144:	81 e0       	ldi	r24, 0x01	; 1
    5146:	98 2f       	mov	r25, r24
    5148:	01 c0       	rjmp	.+2      	; 0x514c <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x24>
    514a:	99 0f       	add	r25, r25
    514c:	4a 95       	dec	r20
    514e:	ea f7       	brpl	.-6      	; 0x514a <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x22>
    5150:	91 8b       	std	Z+17, r25	; 0x11
    5152:	98 2f       	mov	r25, r24
    5154:	01 c0       	rjmp	.+2      	; 0x5158 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x30>
    5156:	99 0f       	add	r25, r25
    5158:	2a 95       	dec	r18
    515a:	ea f7       	brpl	.-6      	; 0x5156 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x2e>
    515c:	92 8b       	std	Z+18, r25	; 0x12
    515e:	98 2f       	mov	r25, r24
    5160:	01 c0       	rjmp	.+2      	; 0x5164 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x3c>
    5162:	99 0f       	add	r25, r25
    5164:	0a 95       	dec	r16
    5166:	ea f7       	brpl	.-6      	; 0x5162 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x3a>
    5168:	93 8b       	std	Z+19, r25	; 0x13
    516a:	98 2f       	mov	r25, r24
    516c:	01 c0       	rjmp	.+2      	; 0x5170 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x48>
    516e:	99 0f       	add	r25, r25
    5170:	ea 94       	dec	r14
    5172:	ea f7       	brpl	.-6      	; 0x516e <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x46>
    5174:	94 8b       	std	Z+20, r25	; 0x14
    5176:	98 2f       	mov	r25, r24
    5178:	01 c0       	rjmp	.+2      	; 0x517c <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x54>
    517a:	99 0f       	add	r25, r25
    517c:	ca 94       	dec	r12
    517e:	ea f7       	brpl	.-6      	; 0x517a <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x52>
    5180:	95 8b       	std	Z+21, r25	; 0x15
    5182:	98 2f       	mov	r25, r24
    5184:	01 c0       	rjmp	.+2      	; 0x5188 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x60>
    5186:	99 0f       	add	r25, r25
    5188:	aa 94       	dec	r10
    518a:	ea f7       	brpl	.-6      	; 0x5186 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x5e>
    518c:	96 8b       	std	Z+22, r25	; 0x16
    518e:	01 c0       	rjmp	.+2      	; 0x5192 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x6a>
    5190:	88 0f       	add	r24, r24
    5192:	8a 94       	dec	r8
    5194:	ea f7       	brpl	.-6      	; 0x5190 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x68>
    5196:	87 8b       	std	Z+23, r24	; 0x17
    5198:	df 91       	pop	r29
    519a:	cf 91       	pop	r28
    519c:	0f 91       	pop	r16
    519e:	ef 90       	pop	r14
    51a0:	cf 90       	pop	r12
    51a2:	af 90       	pop	r10
    51a4:	8f 90       	pop	r8
    51a6:	08 95       	ret

000051a8 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhhh13t_backlighPol>:

LiquidCrystal_I2C::LiquidCrystal_I2C(uint8_t lcd_Addr, uint8_t En, uint8_t Rw,
    51a8:	6f 92       	push	r6
    51aa:	7f 92       	push	r7
    51ac:	8f 92       	push	r8
    51ae:	9f 92       	push	r9
    51b0:	af 92       	push	r10
    51b2:	bf 92       	push	r11
    51b4:	cf 92       	push	r12
    51b6:	df 92       	push	r13
    51b8:	ef 92       	push	r14
    51ba:	ff 92       	push	r15
    51bc:	0f 93       	push	r16
    51be:	1f 93       	push	r17
    51c0:	cf 93       	push	r28
    51c2:	df 93       	push	r29
    51c4:	cd b7       	in	r28, 0x3d	; 61
    51c6:	de b7       	in	r29, 0x3e	; 62
    51c8:	3c 01       	movw	r6, r24
    51ca:	d6 2e       	mov	r13, r22
    51cc:	b4 2e       	mov	r11, r20
    51ce:	92 2e       	mov	r9, r18
    51d0:	19 89       	ldd	r17, Y+17	; 0x11
    51d2:	fa 88       	ldd	r15, Y+18	; 0x12
                                     uint8_t Rs, uint8_t d4, uint8_t d5,
                                     uint8_t d6, uint8_t d7, uint8_t backlighPin, 
                                     t_backlighPol pol = POSITIVE )
    51d4:	44 de       	rcall	.-888    	; 0x4e5e <_ZN3LCDC1Ev>
    51d6:	8f e1       	ldi	r24, 0x1F	; 31
    51d8:	98 e0       	ldi	r25, 0x08	; 8
    51da:	f3 01       	movw	r30, r6
    51dc:	91 83       	std	Z+1, r25	; 0x01
    51de:	80 83       	st	Z, r24
    51e0:	c3 01       	movw	r24, r6
    51e2:	0d 96       	adiw	r24, 0x0d	; 13
    51e4:	d8 dd       	rcall	.-1104   	; 0x4d96 <_ZN5I2CIOC1Ev>
{
   config(lcd_Addr, En, Rw, Rs, d4, d5, d6, d7);
    51e6:	29 2d       	mov	r18, r9
    51e8:	4b 2d       	mov	r20, r11
    51ea:	6d 2d       	mov	r22, r13
    51ec:	c3 01       	movw	r24, r6
    51ee:	9c df       	rcall	.-200    	; 0x5128 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh>
   setBacklightPin(backlighPin, pol);
    51f0:	4f 2d       	mov	r20, r15
    51f2:	61 2f       	mov	r22, r17
    51f4:	c3 01       	movw	r24, r6
}
    51f6:	df 91       	pop	r29
    51f8:	cf 91       	pop	r28
    51fa:	1f 91       	pop	r17
    51fc:	0f 91       	pop	r16
    51fe:	ff 90       	pop	r15
    5200:	ef 90       	pop	r14
    5202:	df 90       	pop	r13
    5204:	cf 90       	pop	r12
    5206:	bf 90       	pop	r11
    5208:	af 90       	pop	r10
    520a:	9f 90       	pop	r9
    520c:	8f 90       	pop	r8
    520e:	7f 90       	pop	r7
                                     uint8_t Rs, uint8_t d4, uint8_t d5,
                                     uint8_t d6, uint8_t d7, uint8_t backlighPin, 
                                     t_backlighPol pol = POSITIVE )
{
   config(lcd_Addr, En, Rw, Rs, d4, d5, d6, d7);
   setBacklightPin(backlighPin, pol);
    5210:	6f 90       	pop	r6
    5212:	42 cf       	rjmp	.-380    	; 0x5098 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol>

00005214 <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
}

//
// pulseEnable
void LiquidCrystal_I2C::pulseEnable (uint8_t data)
{
    5214:	ef 92       	push	r14
    5216:	ff 92       	push	r15
    5218:	0f 93       	push	r16
    521a:	1f 93       	push	r17
    521c:	cf 93       	push	r28
    521e:	8c 01       	movw	r16, r24
    5220:	c6 2f       	mov	r28, r22
   _i2cio.write (data | _En);   // En HIGH
    5222:	7c 01       	movw	r14, r24
    5224:	8d e0       	ldi	r24, 0x0D	; 13
    5226:	e8 0e       	add	r14, r24
    5228:	f1 1c       	adc	r15, r1
    522a:	f8 01       	movw	r30, r16
    522c:	61 89       	ldd	r22, Z+17	; 0x11
    522e:	6c 2b       	or	r22, r28
    5230:	c7 01       	movw	r24, r14
    5232:	e4 dd       	rcall	.-1080   	; 0x4dfc <_ZN5I2CIO5writeEh>
   _i2cio.write (data & ~_En);  // En LOW
    5234:	f8 01       	movw	r30, r16
    5236:	61 89       	ldd	r22, Z+17	; 0x11
    5238:	60 95       	com	r22
    523a:	6c 23       	and	r22, r28
    523c:	c7 01       	movw	r24, r14
    523e:	cf 91       	pop	r28
    5240:	1f 91       	pop	r17
    5242:	0f 91       	pop	r16
    5244:	ff 90       	pop	r15
//
// pulseEnable
void LiquidCrystal_I2C::pulseEnable (uint8_t data)
{
   _i2cio.write (data | _En);   // En HIGH
   _i2cio.write (data & ~_En);  // En LOW
    5246:	ef 90       	pop	r14
    5248:	d9 cd       	rjmp	.-1102   	; 0x4dfc <_ZN5I2CIO5writeEh>

0000524a <_ZN17LiquidCrystal_I2C10write4bitsEhh>:
}

//
// write4bits
void LiquidCrystal_I2C::write4bits ( uint8_t value, uint8_t mode ) 
{
    524a:	fc 01       	movw	r30, r24
    524c:	96 2f       	mov	r25, r22
    524e:	df 01       	movw	r26, r30
    5250:	84 e0       	ldi	r24, 0x04	; 4
   uint8_t pinMapValue = 0;
    5252:	60 e0       	ldi	r22, 0x00	; 0
   
   // Map the value to LCD pin mapping
   // --------------------------------
   for ( uint8_t i = 0; i < 4; i++ )
   {
      if ( ( value & 0x1 ) == 1 )
    5254:	90 ff       	sbrs	r25, 0
    5256:	04 c0       	rjmp	.+8      	; 0x5260 <_ZN17LiquidCrystal_I2C10write4bitsEhh+0x16>
      {
         pinMapValue |= _data_pins[i];
    5258:	54 96       	adiw	r26, 0x14	; 20
    525a:	2c 91       	ld	r18, X
    525c:	54 97       	sbiw	r26, 0x14	; 20
    525e:	62 2b       	or	r22, r18
      }
      value = ( value >> 1 );
    5260:	96 95       	lsr	r25
    5262:	81 50       	subi	r24, 0x01	; 1
    5264:	11 96       	adiw	r26, 0x01	; 1
{
   uint8_t pinMapValue = 0;
   
   // Map the value to LCD pin mapping
   // --------------------------------
   for ( uint8_t i = 0; i < 4; i++ )
    5266:	81 11       	cpse	r24, r1
    5268:	f5 cf       	rjmp	.-22     	; 0x5254 <_ZN17LiquidCrystal_I2C10write4bitsEhh+0xa>
      value = ( value >> 1 );
   }
   
   // Is it a command or data
   // -----------------------
   if ( mode == DATA )
    526a:	41 30       	cpi	r20, 0x01	; 1
    526c:	09 f4       	brne	.+2      	; 0x5270 <_ZN17LiquidCrystal_I2C10write4bitsEhh+0x26>
   {
      mode = _Rs;
    526e:	43 89       	ldd	r20, Z+19	; 0x13
    5270:	94 85       	ldd	r25, Z+12	; 0x0c
    5272:	69 2b       	or	r22, r25
   }
   
   pinMapValue |= mode | _backlightStsMask;
   pulseEnable ( pinMapValue );
    5274:	64 2b       	or	r22, r20
    5276:	cf 01       	movw	r24, r30
    5278:	cd cf       	rjmp	.-102    	; 0x5214 <_ZN17LiquidCrystal_I2C11pulseEnableEh>

0000527a <_ZN17LiquidCrystal_I2C4sendEhh>:
//----------------------------------------------------------------------------

//
// send - write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) 
{
    527a:	0f 93       	push	r16
    527c:	1f 93       	push	r17
    527e:	cf 93       	push	r28
    5280:	df 93       	push	r29
    5282:	06 2f       	mov	r16, r22
    5284:	0f 70       	andi	r16, 0x0F	; 15
   // No need to use the delay routines since the time taken to write takes
   // longer that what is needed both for toggling and enable pin an to execute
   // the command.
   
   if ( mode == FOUR_BITS )
    5286:	42 30       	cpi	r20, 0x02	; 2
    5288:	19 f4       	brne	.+6      	; 0x5290 <_ZN17LiquidCrystal_I2C4sendEhh+0x16>
   {
      write4bits( (value & 0x0F), COMMAND );
    528a:	40 e0       	ldi	r20, 0x00	; 0
    528c:	60 2f       	mov	r22, r16
    528e:	0d c0       	rjmp	.+26     	; 0x52aa <_ZN17LiquidCrystal_I2C4sendEhh+0x30>
    5290:	14 2f       	mov	r17, r20
    5292:	ec 01       	movw	r28, r24
   }
   else 
   {
      write4bits( (value >> 4), mode );
    5294:	70 e0       	ldi	r23, 0x00	; 0
    5296:	84 e0       	ldi	r24, 0x04	; 4
    5298:	75 95       	asr	r23
    529a:	67 95       	ror	r22
    529c:	8a 95       	dec	r24
    529e:	e1 f7       	brne	.-8      	; 0x5298 <_ZN17LiquidCrystal_I2C4sendEhh+0x1e>
    52a0:	ce 01       	movw	r24, r28
    52a2:	d3 df       	rcall	.-90     	; 0x524a <_ZN17LiquidCrystal_I2C10write4bitsEhh>
      write4bits( (value & 0x0F), mode);
    52a4:	41 2f       	mov	r20, r17
    52a6:	60 2f       	mov	r22, r16
    52a8:	ce 01       	movw	r24, r28
   }
}
    52aa:	df 91       	pop	r29
    52ac:	cf 91       	pop	r28
    52ae:	1f 91       	pop	r17
      write4bits( (value & 0x0F), COMMAND );
   }
   else 
   {
      write4bits( (value >> 4), mode );
      write4bits( (value & 0x0F), mode);
    52b0:	0f 91       	pop	r16
    52b2:	cb cf       	rjmp	.-106    	; 0x524a <_ZN17LiquidCrystal_I2C10write4bitsEhh>

000052b4 <_ZN17LiquidCrystal_I2C5beginEhhh>:
// ---------------------------------------------------------------------------

//
// begin
void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) 
{
    52b4:	ff 92       	push	r15
    52b6:	0f 93       	push	r16
    52b8:	1f 93       	push	r17
    52ba:	cf 93       	push	r28
    52bc:	df 93       	push	r29
    52be:	ec 01       	movw	r28, r24
    52c0:	16 2f       	mov	r17, r22
    52c2:	04 2f       	mov	r16, r20
    52c4:	f2 2e       	mov	r15, r18
   
   init();     // Initialise the I2C expander interface
    52c6:	11 df       	rcall	.-478    	; 0x50ea <_ZN17LiquidCrystal_I2C4initEv>
   LCD::begin ( cols, lines, dotsize );   
    52c8:	2f 2d       	mov	r18, r15
    52ca:	40 2f       	mov	r20, r16
    52cc:	61 2f       	mov	r22, r17
    52ce:	ce 01       	movw	r24, r28
}
    52d0:	df 91       	pop	r29
    52d2:	cf 91       	pop	r28
    52d4:	1f 91       	pop	r17
    52d6:	0f 91       	pop	r16
// begin
void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) 
{
   
   init();     // Initialise the I2C expander interface
   LCD::begin ( cols, lines, dotsize );   
    52d8:	ff 90       	pop	r15
    52da:	36 ce       	rjmp	.-916    	; 0x4f48 <_ZN3LCD5beginEhhh>

000052dc <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    52dc:	cf 93       	push	r28
  uint8_t sreg = SREG;
    52de:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    52e0:	f8 94       	cli
  if (!initialized) {
    52e2:	80 91 0a 0a 	lds	r24, 0x0A0A	; 0x800a0a <_ZN8SPIClass11initializedE>
    52e6:	81 11       	cpse	r24, r1
    52e8:	27 c0       	rjmp	.+78     	; 0x5338 <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    52ea:	ec e7       	ldi	r30, 0x7C	; 124
    52ec:	f2 e0       	ldi	r31, 0x02	; 2
    52ee:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    52f0:	ec e5       	ldi	r30, 0x5C	; 92
    52f2:	f2 e0       	ldi	r31, 0x02	; 2
    52f4:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    52f6:	e8 2f       	mov	r30, r24
    52f8:	f0 e0       	ldi	r31, 0x00	; 0
    52fa:	ee 0f       	add	r30, r30
    52fc:	ff 1f       	adc	r31, r31
    52fe:	ea 55       	subi	r30, 0x5A	; 90
    5300:	fd 4f       	sbci	r31, 0xFD	; 253
    5302:	a5 91       	lpm	r26, Z+
    5304:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    5306:	ec 91       	ld	r30, X
    5308:	e9 23       	and	r30, r25
    530a:	21 f4       	brne	.+8      	; 0x5314 <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    530c:	61 e0       	ldi	r22, 0x01	; 1
    530e:	8a e0       	ldi	r24, 0x0A	; 10
    5310:	0e 94 e2 31 	call	0x63c4	; 0x63c4 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    5314:	61 e0       	ldi	r22, 0x01	; 1
    5316:	8a e0       	ldi	r24, 0x0A	; 10
    5318:	0e 94 a6 31 	call	0x634c	; 0x634c <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    531c:	8c b5       	in	r24, 0x2c	; 44
    531e:	80 61       	ori	r24, 0x10	; 16
    5320:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    5322:	8c b5       	in	r24, 0x2c	; 44
    5324:	80 64       	ori	r24, 0x40	; 64
    5326:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    5328:	61 e0       	ldi	r22, 0x01	; 1
    532a:	8d e0       	ldi	r24, 0x0D	; 13
    532c:	0e 94 a6 31 	call	0x634c	; 0x634c <pinMode>
    pinMode(MOSI, OUTPUT);
    5330:	61 e0       	ldi	r22, 0x01	; 1
    5332:	8b e0       	ldi	r24, 0x0B	; 11
    5334:	0e 94 a6 31 	call	0x634c	; 0x634c <pinMode>
  }
  initialized++; // reference count
    5338:	80 91 0a 0a 	lds	r24, 0x0A0A	; 0x800a0a <_ZN8SPIClass11initializedE>
    533c:	8f 5f       	subi	r24, 0xFF	; 255
    533e:	80 93 0a 0a 	sts	0x0A0A, r24	; 0x800a0a <_ZN8SPIClass11initializedE>
  SREG = sreg;
    5342:	cf bf       	out	0x3f, r28	; 63
}
    5344:	cf 91       	pop	r28
    5346:	08 95       	ret

00005348 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    5348:	10 92 78 0a 	sts	0x0A78, r1	; 0x800a78 <twi_state>
    534c:	81 e0       	ldi	r24, 0x01	; 1
    534e:	80 93 76 0a 	sts	0x0A76, r24	; 0x800a76 <twi_sendStop>
    5352:	10 92 75 0a 	sts	0x0A75, r1	; 0x800a75 <twi_inRepStart>
    5356:	61 e0       	ldi	r22, 0x01	; 1
    5358:	8d e1       	ldi	r24, 0x1D	; 29
    535a:	0e 94 e2 31 	call	0x63c4	; 0x63c4 <digitalWrite>
    535e:	61 e0       	ldi	r22, 0x01	; 1
    5360:	8c e1       	ldi	r24, 0x1C	; 28
    5362:	0e 94 e2 31 	call	0x63c4	; 0x63c4 <digitalWrite>
    5366:	e9 eb       	ldi	r30, 0xB9	; 185
    5368:	f0 e0       	ldi	r31, 0x00	; 0
    536a:	80 81       	ld	r24, Z
    536c:	8e 7f       	andi	r24, 0xFE	; 254
    536e:	80 83       	st	Z, r24
    5370:	80 81       	ld	r24, Z
    5372:	8d 7f       	andi	r24, 0xFD	; 253
    5374:	80 83       	st	Z, r24
    5376:	88 e4       	ldi	r24, 0x48	; 72
    5378:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    537c:	85 e4       	ldi	r24, 0x45	; 69
    537e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5382:	08 95       	ret

00005384 <twi_disable>:
    5384:	ec eb       	ldi	r30, 0xBC	; 188
    5386:	f0 e0       	ldi	r31, 0x00	; 0
    5388:	80 81       	ld	r24, Z
    538a:	8a 7b       	andi	r24, 0xBA	; 186
    538c:	80 83       	st	Z, r24
    538e:	60 e0       	ldi	r22, 0x00	; 0
    5390:	8d e1       	ldi	r24, 0x1D	; 29
    5392:	0e 94 e2 31 	call	0x63c4	; 0x63c4 <digitalWrite>
    5396:	60 e0       	ldi	r22, 0x00	; 0
    5398:	8c e1       	ldi	r24, 0x1C	; 28
    539a:	0c 94 e2 31 	jmp	0x63c4	; 0x63c4 <digitalWrite>

0000539e <twi_setFrequency>:
    539e:	9b 01       	movw	r18, r22
    53a0:	ac 01       	movw	r20, r24
    53a2:	60 e0       	ldi	r22, 0x00	; 0
    53a4:	74 e2       	ldi	r23, 0x24	; 36
    53a6:	84 ef       	ldi	r24, 0xF4	; 244
    53a8:	90 e0       	ldi	r25, 0x00	; 0
    53aa:	0e 94 5d 36 	call	0x6cba	; 0x6cba <__udivmodsi4>
    53ae:	da 01       	movw	r26, r20
    53b0:	c9 01       	movw	r24, r18
    53b2:	40 97       	sbiw	r24, 0x10	; 16
    53b4:	a1 09       	sbc	r26, r1
    53b6:	b1 09       	sbc	r27, r1
    53b8:	b6 95       	lsr	r27
    53ba:	a7 95       	ror	r26
    53bc:	97 95       	ror	r25
    53be:	87 95       	ror	r24
    53c0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    53c4:	08 95       	ret

000053c6 <twi_readFrom>:
    53c6:	41 32       	cpi	r20, 0x21	; 33
    53c8:	08 f0       	brcs	.+2      	; 0x53cc <twi_readFrom+0x6>
    53ca:	43 c0       	rjmp	.+134    	; 0x5452 <twi_readFrom+0x8c>
    53cc:	90 91 78 0a 	lds	r25, 0x0A78	; 0x800a78 <twi_state>
    53d0:	91 11       	cpse	r25, r1
    53d2:	fc cf       	rjmp	.-8      	; 0x53cc <twi_readFrom+0x6>
    53d4:	91 e0       	ldi	r25, 0x01	; 1
    53d6:	90 93 78 0a 	sts	0x0A78, r25	; 0x800a78 <twi_state>
    53da:	20 93 76 0a 	sts	0x0A76, r18	; 0x800a76 <twi_sendStop>
    53de:	2f ef       	ldi	r18, 0xFF	; 255
    53e0:	20 93 0b 0a 	sts	0x0A0B, r18	; 0x800a0b <twi_error>
    53e4:	10 92 50 0a 	sts	0x0A50, r1	; 0x800a50 <twi_masterBufferIndex>
    53e8:	24 0f       	add	r18, r20
    53ea:	20 93 4f 0a 	sts	0x0A4F, r18	; 0x800a4f <twi_masterBufferLength>
    53ee:	90 93 77 0a 	sts	0x0A77, r25	; 0x800a77 <twi_slarw>
    53f2:	90 91 77 0a 	lds	r25, 0x0A77	; 0x800a77 <twi_slarw>
    53f6:	88 0f       	add	r24, r24
    53f8:	89 2b       	or	r24, r25
    53fa:	80 93 77 0a 	sts	0x0A77, r24	; 0x800a77 <twi_slarw>
    53fe:	80 91 75 0a 	lds	r24, 0x0A75	; 0x800a75 <twi_inRepStart>
    5402:	81 30       	cpi	r24, 0x01	; 1
    5404:	61 f4       	brne	.+24     	; 0x541e <twi_readFrom+0x58>
    5406:	10 92 75 0a 	sts	0x0A75, r1	; 0x800a75 <twi_inRepStart>
    540a:	80 91 77 0a 	lds	r24, 0x0A77	; 0x800a77 <twi_slarw>
    540e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5412:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5416:	83 fd       	sbrc	r24, 3
    5418:	f8 cf       	rjmp	.-16     	; 0x540a <twi_readFrom+0x44>
    541a:	85 ec       	ldi	r24, 0xC5	; 197
    541c:	01 c0       	rjmp	.+2      	; 0x5420 <twi_readFrom+0x5a>
    541e:	85 ee       	ldi	r24, 0xE5	; 229
    5420:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5424:	80 91 78 0a 	lds	r24, 0x0A78	; 0x800a78 <twi_state>
    5428:	81 30       	cpi	r24, 0x01	; 1
    542a:	e1 f3       	breq	.-8      	; 0x5424 <twi_readFrom+0x5e>
    542c:	80 91 50 0a 	lds	r24, 0x0A50	; 0x800a50 <twi_masterBufferIndex>
    5430:	84 17       	cp	r24, r20
    5432:	10 f4       	brcc	.+4      	; 0x5438 <twi_readFrom+0x72>
    5434:	40 91 50 0a 	lds	r20, 0x0A50	; 0x800a50 <twi_masterBufferIndex>
    5438:	a1 e5       	ldi	r26, 0x51	; 81
    543a:	ba e0       	ldi	r27, 0x0A	; 10
    543c:	96 2f       	mov	r25, r22
    543e:	fb 01       	movw	r30, r22
    5440:	8e 2f       	mov	r24, r30
    5442:	89 1b       	sub	r24, r25
    5444:	84 17       	cp	r24, r20
    5446:	18 f4       	brcc	.+6      	; 0x544e <twi_readFrom+0x88>
    5448:	8d 91       	ld	r24, X+
    544a:	81 93       	st	Z+, r24
    544c:	f9 cf       	rjmp	.-14     	; 0x5440 <twi_readFrom+0x7a>
    544e:	84 2f       	mov	r24, r20
    5450:	08 95       	ret
    5452:	80 e0       	ldi	r24, 0x00	; 0
    5454:	08 95       	ret

00005456 <twi_writeTo>:
    5456:	0f 93       	push	r16
    5458:	41 32       	cpi	r20, 0x21	; 33
    545a:	08 f0       	brcs	.+2      	; 0x545e <twi_writeTo+0x8>
    545c:	4a c0       	rjmp	.+148    	; 0x54f2 <twi_writeTo+0x9c>
    545e:	90 91 78 0a 	lds	r25, 0x0A78	; 0x800a78 <twi_state>
    5462:	91 11       	cpse	r25, r1
    5464:	fc cf       	rjmp	.-8      	; 0x545e <twi_writeTo+0x8>
    5466:	32 e0       	ldi	r19, 0x02	; 2
    5468:	30 93 78 0a 	sts	0x0A78, r19	; 0x800a78 <twi_state>
    546c:	00 93 76 0a 	sts	0x0A76, r16	; 0x800a76 <twi_sendStop>
    5470:	3f ef       	ldi	r19, 0xFF	; 255
    5472:	30 93 0b 0a 	sts	0x0A0B, r19	; 0x800a0b <twi_error>
    5476:	10 92 50 0a 	sts	0x0A50, r1	; 0x800a50 <twi_masterBufferIndex>
    547a:	40 93 4f 0a 	sts	0x0A4F, r20	; 0x800a4f <twi_masterBufferLength>
    547e:	56 2f       	mov	r21, r22
    5480:	a1 e5       	ldi	r26, 0x51	; 81
    5482:	ba e0       	ldi	r27, 0x0A	; 10
    5484:	fb 01       	movw	r30, r22
    5486:	3e 2f       	mov	r19, r30
    5488:	35 1b       	sub	r19, r21
    548a:	34 17       	cp	r19, r20
    548c:	18 f4       	brcc	.+6      	; 0x5494 <twi_writeTo+0x3e>
    548e:	31 91       	ld	r19, Z+
    5490:	3d 93       	st	X+, r19
    5492:	f9 cf       	rjmp	.-14     	; 0x5486 <twi_writeTo+0x30>
    5494:	10 92 77 0a 	sts	0x0A77, r1	; 0x800a77 <twi_slarw>
    5498:	30 91 77 0a 	lds	r19, 0x0A77	; 0x800a77 <twi_slarw>
    549c:	88 0f       	add	r24, r24
    549e:	83 2b       	or	r24, r19
    54a0:	80 93 77 0a 	sts	0x0A77, r24	; 0x800a77 <twi_slarw>
    54a4:	80 91 75 0a 	lds	r24, 0x0A75	; 0x800a75 <twi_inRepStart>
    54a8:	81 30       	cpi	r24, 0x01	; 1
    54aa:	61 f4       	brne	.+24     	; 0x54c4 <twi_writeTo+0x6e>
    54ac:	10 92 75 0a 	sts	0x0A75, r1	; 0x800a75 <twi_inRepStart>
    54b0:	80 91 77 0a 	lds	r24, 0x0A77	; 0x800a77 <twi_slarw>
    54b4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    54b8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    54bc:	83 fd       	sbrc	r24, 3
    54be:	f8 cf       	rjmp	.-16     	; 0x54b0 <twi_writeTo+0x5a>
    54c0:	85 ec       	ldi	r24, 0xC5	; 197
    54c2:	01 c0       	rjmp	.+2      	; 0x54c6 <twi_writeTo+0x70>
    54c4:	85 ee       	ldi	r24, 0xE5	; 229
    54c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    54ca:	22 23       	and	r18, r18
    54cc:	21 f0       	breq	.+8      	; 0x54d6 <twi_writeTo+0x80>
    54ce:	80 91 78 0a 	lds	r24, 0x0A78	; 0x800a78 <twi_state>
    54d2:	82 30       	cpi	r24, 0x02	; 2
    54d4:	d1 f3       	breq	.-12     	; 0x54ca <twi_writeTo+0x74>
    54d6:	80 91 0b 0a 	lds	r24, 0x0A0B	; 0x800a0b <twi_error>
    54da:	8f 3f       	cpi	r24, 0xFF	; 255
    54dc:	79 f0       	breq	.+30     	; 0x54fc <twi_writeTo+0xa6>
    54de:	80 91 0b 0a 	lds	r24, 0x0A0B	; 0x800a0b <twi_error>
    54e2:	80 32       	cpi	r24, 0x20	; 32
    54e4:	41 f0       	breq	.+16     	; 0x54f6 <twi_writeTo+0xa0>
    54e6:	80 91 0b 0a 	lds	r24, 0x0A0B	; 0x800a0b <twi_error>
    54ea:	80 33       	cpi	r24, 0x30	; 48
    54ec:	31 f0       	breq	.+12     	; 0x54fa <twi_writeTo+0xa4>
    54ee:	94 e0       	ldi	r25, 0x04	; 4
    54f0:	05 c0       	rjmp	.+10     	; 0x54fc <twi_writeTo+0xa6>
    54f2:	91 e0       	ldi	r25, 0x01	; 1
    54f4:	03 c0       	rjmp	.+6      	; 0x54fc <twi_writeTo+0xa6>
    54f6:	92 e0       	ldi	r25, 0x02	; 2
    54f8:	01 c0       	rjmp	.+2      	; 0x54fc <twi_writeTo+0xa6>
    54fa:	93 e0       	ldi	r25, 0x03	; 3
    54fc:	89 2f       	mov	r24, r25
    54fe:	0f 91       	pop	r16
    5500:	08 95       	ret

00005502 <twi_transmit>:
    5502:	40 91 2d 0a 	lds	r20, 0x0A2D	; 0x800a2d <twi_txBufferLength>
    5506:	26 2f       	mov	r18, r22
    5508:	30 e0       	ldi	r19, 0x00	; 0
    550a:	24 0f       	add	r18, r20
    550c:	31 1d       	adc	r19, r1
    550e:	21 32       	cpi	r18, 0x21	; 33
    5510:	31 05       	cpc	r19, r1
    5512:	dc f4       	brge	.+54     	; 0x554a <twi_transmit+0x48>
    5514:	20 91 78 0a 	lds	r18, 0x0A78	; 0x800a78 <twi_state>
    5518:	24 30       	cpi	r18, 0x04	; 4
    551a:	c9 f4       	brne	.+50     	; 0x554e <twi_transmit+0x4c>
    551c:	fc 01       	movw	r30, r24
    551e:	80 e0       	ldi	r24, 0x00	; 0
    5520:	90 e0       	ldi	r25, 0x00	; 0
    5522:	86 17       	cp	r24, r22
    5524:	58 f4       	brcc	.+22     	; 0x553c <twi_transmit+0x3a>
    5526:	30 91 2d 0a 	lds	r19, 0x0A2D	; 0x800a2d <twi_txBufferLength>
    552a:	21 91       	ld	r18, Z+
    552c:	dc 01       	movw	r26, r24
    552e:	a1 5d       	subi	r26, 0xD1	; 209
    5530:	b5 4f       	sbci	r27, 0xF5	; 245
    5532:	a3 0f       	add	r26, r19
    5534:	b1 1d       	adc	r27, r1
    5536:	2c 93       	st	X, r18
    5538:	01 96       	adiw	r24, 0x01	; 1
    553a:	f3 cf       	rjmp	.-26     	; 0x5522 <twi_transmit+0x20>
    553c:	80 91 2d 0a 	lds	r24, 0x0A2D	; 0x800a2d <twi_txBufferLength>
    5540:	68 0f       	add	r22, r24
    5542:	60 93 2d 0a 	sts	0x0A2D, r22	; 0x800a2d <twi_txBufferLength>
    5546:	80 e0       	ldi	r24, 0x00	; 0
    5548:	08 95       	ret
    554a:	81 e0       	ldi	r24, 0x01	; 1
    554c:	08 95       	ret
    554e:	82 e0       	ldi	r24, 0x02	; 2
    5550:	08 95       	ret

00005552 <twi_attachSlaveRxEvent>:
    5552:	90 93 72 0a 	sts	0x0A72, r25	; 0x800a72 <twi_onSlaveReceive+0x1>
    5556:	80 93 71 0a 	sts	0x0A71, r24	; 0x800a71 <twi_onSlaveReceive>
    555a:	08 95       	ret

0000555c <twi_attachSlaveTxEvent>:
    555c:	90 93 74 0a 	sts	0x0A74, r25	; 0x800a74 <twi_onSlaveTransmit+0x1>
    5560:	80 93 73 0a 	sts	0x0A73, r24	; 0x800a73 <twi_onSlaveTransmit>
    5564:	08 95       	ret

00005566 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    5566:	85 ed       	ldi	r24, 0xD5	; 213
    5568:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    556c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5570:	84 fd       	sbrc	r24, 4
    5572:	fc cf       	rjmp	.-8      	; 0x556c <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    5574:	10 92 78 0a 	sts	0x0A78, r1	; 0x800a78 <twi_state>
    5578:	08 95       	ret

0000557a <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    557a:	85 ec       	ldi	r24, 0xC5	; 197
    557c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    5580:	10 92 78 0a 	sts	0x0A78, r1	; 0x800a78 <twi_state>
    5584:	08 95       	ret

00005586 <__vector_26>:
}

ISR(TWI_vect)
{
    5586:	1f 92       	push	r1
    5588:	0f 92       	push	r0
    558a:	0f b6       	in	r0, 0x3f	; 63
    558c:	0f 92       	push	r0
    558e:	11 24       	eor	r1, r1
    5590:	0b b6       	in	r0, 0x3b	; 59
    5592:	0f 92       	push	r0
    5594:	2f 93       	push	r18
    5596:	3f 93       	push	r19
    5598:	4f 93       	push	r20
    559a:	5f 93       	push	r21
    559c:	6f 93       	push	r22
    559e:	7f 93       	push	r23
    55a0:	8f 93       	push	r24
    55a2:	9f 93       	push	r25
    55a4:	af 93       	push	r26
    55a6:	bf 93       	push	r27
    55a8:	ef 93       	push	r30
    55aa:	ff 93       	push	r31
  switch(TW_STATUS){
    55ac:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    55b0:	88 7f       	andi	r24, 0xF8	; 248
    55b2:	80 36       	cpi	r24, 0x60	; 96
    55b4:	09 f4       	brne	.+2      	; 0x55b8 <__vector_26+0x32>
    55b6:	9d c0       	rjmp	.+314    	; 0x56f2 <__vector_26+0x16c>
    55b8:	70 f5       	brcc	.+92     	; 0x5616 <__vector_26+0x90>
    55ba:	88 32       	cpi	r24, 0x28	; 40
    55bc:	09 f4       	brne	.+2      	; 0x55c0 <__vector_26+0x3a>
    55be:	5c c0       	rjmp	.+184    	; 0x5678 <__vector_26+0xf2>
    55c0:	90 f4       	brcc	.+36     	; 0x55e6 <__vector_26+0x60>
    55c2:	80 31       	cpi	r24, 0x10	; 16
    55c4:	09 f4       	brne	.+2      	; 0x55c8 <__vector_26+0x42>
    55c6:	55 c0       	rjmp	.+170    	; 0x5672 <__vector_26+0xec>
    55c8:	38 f4       	brcc	.+14     	; 0x55d8 <__vector_26+0x52>
    55ca:	88 23       	and	r24, r24
    55cc:	09 f4       	brne	.+2      	; 0x55d0 <__vector_26+0x4a>
    55ce:	f3 c0       	rjmp	.+486    	; 0x57b6 <__vector_26+0x230>
    55d0:	88 30       	cpi	r24, 0x08	; 8
    55d2:	09 f4       	brne	.+2      	; 0x55d6 <__vector_26+0x50>
    55d4:	4e c0       	rjmp	.+156    	; 0x5672 <__vector_26+0xec>
    55d6:	f2 c0       	rjmp	.+484    	; 0x57bc <__vector_26+0x236>
    55d8:	88 31       	cpi	r24, 0x18	; 24
    55da:	09 f4       	brne	.+2      	; 0x55de <__vector_26+0x58>
    55dc:	4d c0       	rjmp	.+154    	; 0x5678 <__vector_26+0xf2>
    55de:	80 32       	cpi	r24, 0x20	; 32
    55e0:	09 f4       	brne	.+2      	; 0x55e4 <__vector_26+0x5e>
    55e2:	5e c0       	rjmp	.+188    	; 0x56a0 <__vector_26+0x11a>
    55e4:	eb c0       	rjmp	.+470    	; 0x57bc <__vector_26+0x236>
    55e6:	80 34       	cpi	r24, 0x40	; 64
    55e8:	09 f4       	brne	.+2      	; 0x55ec <__vector_26+0x66>
    55ea:	69 c0       	rjmp	.+210    	; 0x56be <__vector_26+0x138>
    55ec:	50 f4       	brcc	.+20     	; 0x5602 <__vector_26+0x7c>
    55ee:	80 33       	cpi	r24, 0x30	; 48
    55f0:	09 f4       	brne	.+2      	; 0x55f4 <__vector_26+0x6e>
    55f2:	56 c0       	rjmp	.+172    	; 0x56a0 <__vector_26+0x11a>
    55f4:	88 33       	cpi	r24, 0x38	; 56
    55f6:	09 f0       	breq	.+2      	; 0x55fa <__vector_26+0x74>
    55f8:	e1 c0       	rjmp	.+450    	; 0x57bc <__vector_26+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    55fa:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <twi_error>
      twi_releaseBus();
    55fe:	bd df       	rcall	.-134    	; 0x557a <twi_releaseBus>
      break;
    5600:	dd c0       	rjmp	.+442    	; 0x57bc <__vector_26+0x236>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    5602:	80 35       	cpi	r24, 0x50	; 80
    5604:	09 f4       	brne	.+2      	; 0x5608 <__vector_26+0x82>
    5606:	4f c0       	rjmp	.+158    	; 0x56a6 <__vector_26+0x120>
    5608:	88 35       	cpi	r24, 0x58	; 88
    560a:	09 f4       	brne	.+2      	; 0x560e <__vector_26+0x88>
    560c:	5d c0       	rjmp	.+186    	; 0x56c8 <__vector_26+0x142>
    560e:	88 34       	cpi	r24, 0x48	; 72
    5610:	09 f0       	breq	.+2      	; 0x5614 <__vector_26+0x8e>
    5612:	d4 c0       	rjmp	.+424    	; 0x57bc <__vector_26+0x236>
    5614:	d2 c0       	rjmp	.+420    	; 0x57ba <__vector_26+0x234>
    5616:	88 39       	cpi	r24, 0x98	; 152
    5618:	09 f4       	brne	.+2      	; 0x561c <__vector_26+0x96>
    561a:	c3 c0       	rjmp	.+390    	; 0x57a2 <__vector_26+0x21c>
    561c:	a8 f4       	brcc	.+42     	; 0x5648 <__vector_26+0xc2>
    561e:	88 37       	cpi	r24, 0x78	; 120
    5620:	09 f4       	brne	.+2      	; 0x5624 <__vector_26+0x9e>
    5622:	67 c0       	rjmp	.+206    	; 0x56f2 <__vector_26+0x16c>
    5624:	38 f4       	brcc	.+14     	; 0x5634 <__vector_26+0xae>
    5626:	88 36       	cpi	r24, 0x68	; 104
    5628:	09 f4       	brne	.+2      	; 0x562c <__vector_26+0xa6>
    562a:	63 c0       	rjmp	.+198    	; 0x56f2 <__vector_26+0x16c>
    562c:	80 37       	cpi	r24, 0x70	; 112
    562e:	09 f4       	brne	.+2      	; 0x5632 <__vector_26+0xac>
    5630:	60 c0       	rjmp	.+192    	; 0x56f2 <__vector_26+0x16c>
    5632:	c4 c0       	rjmp	.+392    	; 0x57bc <__vector_26+0x236>
    5634:	88 38       	cpi	r24, 0x88	; 136
    5636:	09 f4       	brne	.+2      	; 0x563a <__vector_26+0xb4>
    5638:	b4 c0       	rjmp	.+360    	; 0x57a2 <__vector_26+0x21c>
    563a:	80 39       	cpi	r24, 0x90	; 144
    563c:	09 f4       	brne	.+2      	; 0x5640 <__vector_26+0xba>
    563e:	5f c0       	rjmp	.+190    	; 0x56fe <__vector_26+0x178>
    5640:	80 38       	cpi	r24, 0x80	; 128
    5642:	09 f0       	breq	.+2      	; 0x5646 <__vector_26+0xc0>
    5644:	bb c0       	rjmp	.+374    	; 0x57bc <__vector_26+0x236>
    5646:	5b c0       	rjmp	.+182    	; 0x56fe <__vector_26+0x178>
    5648:	80 3b       	cpi	r24, 0xB0	; 176
    564a:	09 f4       	brne	.+2      	; 0x564e <__vector_26+0xc8>
    564c:	82 c0       	rjmp	.+260    	; 0x5752 <__vector_26+0x1cc>
    564e:	38 f4       	brcc	.+14     	; 0x565e <__vector_26+0xd8>
    5650:	80 3a       	cpi	r24, 0xA0	; 160
    5652:	09 f4       	brne	.+2      	; 0x5656 <__vector_26+0xd0>
    5654:	66 c0       	rjmp	.+204    	; 0x5722 <__vector_26+0x19c>
    5656:	88 3a       	cpi	r24, 0xA8	; 168
    5658:	09 f4       	brne	.+2      	; 0x565c <__vector_26+0xd6>
    565a:	7b c0       	rjmp	.+246    	; 0x5752 <__vector_26+0x1cc>
    565c:	af c0       	rjmp	.+350    	; 0x57bc <__vector_26+0x236>
    565e:	80 3c       	cpi	r24, 0xC0	; 192
    5660:	09 f4       	brne	.+2      	; 0x5664 <__vector_26+0xde>
    5662:	a3 c0       	rjmp	.+326    	; 0x57aa <__vector_26+0x224>
    5664:	88 3c       	cpi	r24, 0xC8	; 200
    5666:	09 f4       	brne	.+2      	; 0x566a <__vector_26+0xe4>
    5668:	a0 c0       	rjmp	.+320    	; 0x57aa <__vector_26+0x224>
    566a:	88 3b       	cpi	r24, 0xB8	; 184
    566c:	09 f4       	brne	.+2      	; 0x5670 <__vector_26+0xea>
    566e:	86 c0       	rjmp	.+268    	; 0x577c <__vector_26+0x1f6>
    5670:	a5 c0       	rjmp	.+330    	; 0x57bc <__vector_26+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    5672:	80 91 77 0a 	lds	r24, 0x0A77	; 0x800a77 <twi_slarw>
    5676:	10 c0       	rjmp	.+32     	; 0x5698 <__vector_26+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    5678:	90 91 50 0a 	lds	r25, 0x0A50	; 0x800a50 <twi_masterBufferIndex>
    567c:	80 91 4f 0a 	lds	r24, 0x0A4F	; 0x800a4f <twi_masterBufferLength>
    5680:	98 17       	cp	r25, r24
    5682:	70 f5       	brcc	.+92     	; 0x56e0 <__vector_26+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    5684:	e0 91 50 0a 	lds	r30, 0x0A50	; 0x800a50 <twi_masterBufferIndex>
    5688:	81 e0       	ldi	r24, 0x01	; 1
    568a:	8e 0f       	add	r24, r30
    568c:	80 93 50 0a 	sts	0x0A50, r24	; 0x800a50 <twi_masterBufferIndex>
    5690:	f0 e0       	ldi	r31, 0x00	; 0
    5692:	ef 5a       	subi	r30, 0xAF	; 175
    5694:	f5 4f       	sbci	r31, 0xF5	; 245
    5696:	80 81       	ld	r24, Z
    5698:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    569c:	85 ec       	ldi	r24, 0xC5	; 197
    569e:	82 c0       	rjmp	.+260    	; 0x57a4 <__vector_26+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    56a0:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <twi_error>
    56a4:	8a c0       	rjmp	.+276    	; 0x57ba <__vector_26+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    56a6:	e0 91 50 0a 	lds	r30, 0x0A50	; 0x800a50 <twi_masterBufferIndex>
    56aa:	81 e0       	ldi	r24, 0x01	; 1
    56ac:	8e 0f       	add	r24, r30
    56ae:	80 93 50 0a 	sts	0x0A50, r24	; 0x800a50 <twi_masterBufferIndex>
    56b2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    56b6:	f0 e0       	ldi	r31, 0x00	; 0
    56b8:	ef 5a       	subi	r30, 0xAF	; 175
    56ba:	f5 4f       	sbci	r31, 0xF5	; 245
    56bc:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    56be:	90 91 50 0a 	lds	r25, 0x0A50	; 0x800a50 <twi_masterBufferIndex>
    56c2:	80 91 4f 0a 	lds	r24, 0x0A4F	; 0x800a4f <twi_masterBufferLength>
    56c6:	6a c0       	rjmp	.+212    	; 0x579c <__vector_26+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    56c8:	e0 91 50 0a 	lds	r30, 0x0A50	; 0x800a50 <twi_masterBufferIndex>
    56cc:	81 e0       	ldi	r24, 0x01	; 1
    56ce:	8e 0f       	add	r24, r30
    56d0:	80 93 50 0a 	sts	0x0A50, r24	; 0x800a50 <twi_masterBufferIndex>
    56d4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    56d8:	f0 e0       	ldi	r31, 0x00	; 0
    56da:	ef 5a       	subi	r30, 0xAF	; 175
    56dc:	f5 4f       	sbci	r31, 0xF5	; 245
    56de:	80 83       	st	Z, r24
	if (twi_sendStop)
    56e0:	80 91 76 0a 	lds	r24, 0x0A76	; 0x800a76 <twi_sendStop>
    56e4:	81 11       	cpse	r24, r1
    56e6:	69 c0       	rjmp	.+210    	; 0x57ba <__vector_26+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    56e8:	81 e0       	ldi	r24, 0x01	; 1
    56ea:	80 93 75 0a 	sts	0x0A75, r24	; 0x800a75 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    56ee:	84 ea       	ldi	r24, 0xA4	; 164
    56f0:	5d c0       	rjmp	.+186    	; 0x57ac <__vector_26+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    56f2:	83 e0       	ldi	r24, 0x03	; 3
    56f4:	80 93 78 0a 	sts	0x0A78, r24	; 0x800a78 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    56f8:	10 92 0c 0a 	sts	0x0A0C, r1	; 0x800a0c <twi_rxBufferIndex>
    56fc:	cf cf       	rjmp	.-98     	; 0x569c <__vector_26+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    56fe:	80 91 0c 0a 	lds	r24, 0x0A0C	; 0x800a0c <twi_rxBufferIndex>
    5702:	80 32       	cpi	r24, 0x20	; 32
    5704:	08 f0       	brcs	.+2      	; 0x5708 <__vector_26+0x182>
    5706:	4d c0       	rjmp	.+154    	; 0x57a2 <__vector_26+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    5708:	e0 91 0c 0a 	lds	r30, 0x0A0C	; 0x800a0c <twi_rxBufferIndex>
    570c:	81 e0       	ldi	r24, 0x01	; 1
    570e:	8e 0f       	add	r24, r30
    5710:	80 93 0c 0a 	sts	0x0A0C, r24	; 0x800a0c <twi_rxBufferIndex>
    5714:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5718:	f0 e0       	ldi	r31, 0x00	; 0
    571a:	e3 5f       	subi	r30, 0xF3	; 243
    571c:	f5 4f       	sbci	r31, 0xF5	; 245
    571e:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    5720:	bd cf       	rjmp	.-134    	; 0x569c <__vector_26+0x116>
    5722:	2b df       	rcall	.-426    	; 0x557a <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    5724:	80 91 0c 0a 	lds	r24, 0x0A0C	; 0x800a0c <twi_rxBufferIndex>
    5728:	80 32       	cpi	r24, 0x20	; 32
    572a:	30 f4       	brcc	.+12     	; 0x5738 <__vector_26+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    572c:	e0 91 0c 0a 	lds	r30, 0x0A0C	; 0x800a0c <twi_rxBufferIndex>
    5730:	f0 e0       	ldi	r31, 0x00	; 0
    5732:	e3 5f       	subi	r30, 0xF3	; 243
    5734:	f5 4f       	sbci	r31, 0xF5	; 245
    5736:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    5738:	60 91 0c 0a 	lds	r22, 0x0A0C	; 0x800a0c <twi_rxBufferIndex>
    573c:	70 e0       	ldi	r23, 0x00	; 0
    573e:	e0 91 71 0a 	lds	r30, 0x0A71	; 0x800a71 <twi_onSlaveReceive>
    5742:	f0 91 72 0a 	lds	r31, 0x0A72	; 0x800a72 <twi_onSlaveReceive+0x1>
    5746:	8d e0       	ldi	r24, 0x0D	; 13
    5748:	9a e0       	ldi	r25, 0x0A	; 10
    574a:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    574c:	10 92 0c 0a 	sts	0x0A0C, r1	; 0x800a0c <twi_rxBufferIndex>
      break;
    5750:	35 c0       	rjmp	.+106    	; 0x57bc <__vector_26+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    5752:	84 e0       	ldi	r24, 0x04	; 4
    5754:	80 93 78 0a 	sts	0x0A78, r24	; 0x800a78 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    5758:	10 92 2e 0a 	sts	0x0A2E, r1	; 0x800a2e <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    575c:	10 92 2d 0a 	sts	0x0A2D, r1	; 0x800a2d <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    5760:	e0 91 73 0a 	lds	r30, 0x0A73	; 0x800a73 <twi_onSlaveTransmit>
    5764:	f0 91 74 0a 	lds	r31, 0x0A74	; 0x800a74 <twi_onSlaveTransmit+0x1>
    5768:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    576a:	80 91 2d 0a 	lds	r24, 0x0A2D	; 0x800a2d <twi_txBufferLength>
    576e:	81 11       	cpse	r24, r1
    5770:	05 c0       	rjmp	.+10     	; 0x577c <__vector_26+0x1f6>
        twi_txBufferLength = 1;
    5772:	81 e0       	ldi	r24, 0x01	; 1
    5774:	80 93 2d 0a 	sts	0x0A2D, r24	; 0x800a2d <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    5778:	10 92 2f 0a 	sts	0x0A2F, r1	; 0x800a2f <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    577c:	e0 91 2e 0a 	lds	r30, 0x0A2E	; 0x800a2e <twi_txBufferIndex>
    5780:	81 e0       	ldi	r24, 0x01	; 1
    5782:	8e 0f       	add	r24, r30
    5784:	80 93 2e 0a 	sts	0x0A2E, r24	; 0x800a2e <twi_txBufferIndex>
    5788:	f0 e0       	ldi	r31, 0x00	; 0
    578a:	e1 5d       	subi	r30, 0xD1	; 209
    578c:	f5 4f       	sbci	r31, 0xF5	; 245
    578e:	80 81       	ld	r24, Z
    5790:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    5794:	90 91 2e 0a 	lds	r25, 0x0A2E	; 0x800a2e <twi_txBufferIndex>
    5798:	80 91 2d 0a 	lds	r24, 0x0A2D	; 0x800a2d <twi_txBufferLength>
    579c:	98 17       	cp	r25, r24
    579e:	08 f4       	brcc	.+2      	; 0x57a2 <__vector_26+0x21c>
    57a0:	7d cf       	rjmp	.-262    	; 0x569c <__vector_26+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    57a2:	85 e8       	ldi	r24, 0x85	; 133
    57a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    57a8:	09 c0       	rjmp	.+18     	; 0x57bc <__vector_26+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    57aa:	85 ec       	ldi	r24, 0xC5	; 197
    57ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    57b0:	10 92 78 0a 	sts	0x0A78, r1	; 0x800a78 <twi_state>
      break;
    57b4:	03 c0       	rjmp	.+6      	; 0x57bc <__vector_26+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    57b6:	10 92 0b 0a 	sts	0x0A0B, r1	; 0x800a0b <twi_error>
      twi_stop();
    57ba:	d5 de       	rcall	.-598    	; 0x5566 <twi_stop>
      break;
  }
}
    57bc:	ff 91       	pop	r31
    57be:	ef 91       	pop	r30
    57c0:	bf 91       	pop	r27
    57c2:	af 91       	pop	r26
    57c4:	9f 91       	pop	r25
    57c6:	8f 91       	pop	r24
    57c8:	7f 91       	pop	r23
    57ca:	6f 91       	pop	r22
    57cc:	5f 91       	pop	r21
    57ce:	4f 91       	pop	r20
    57d0:	3f 91       	pop	r19
    57d2:	2f 91       	pop	r18
    57d4:	0f 90       	pop	r0
    57d6:	0b be       	out	0x3b, r0	; 59
    57d8:	0f 90       	pop	r0
    57da:	0f be       	out	0x3f, r0	; 63
    57dc:	0f 90       	pop	r0
    57de:	1f 90       	pop	r1
    57e0:	18 95       	reti

000057e2 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    57e2:	80 91 ad 0a 	lds	r24, 0x0AAD	; 0x800aad <_ZN7TwoWire14rxBufferLengthE>
    57e6:	90 e0       	ldi	r25, 0x00	; 0
    57e8:	20 91 ae 0a 	lds	r18, 0x0AAE	; 0x800aae <_ZN7TwoWire13rxBufferIndexE>
    57ec:	82 1b       	sub	r24, r18
    57ee:	91 09       	sbc	r25, r1
    57f0:	08 95       	ret

000057f2 <_ZN7TwoWire4readEv>:
    57f2:	90 91 ae 0a 	lds	r25, 0x0AAE	; 0x800aae <_ZN7TwoWire13rxBufferIndexE>
    57f6:	80 91 ad 0a 	lds	r24, 0x0AAD	; 0x800aad <_ZN7TwoWire14rxBufferLengthE>
    57fa:	98 17       	cp	r25, r24
    57fc:	50 f4       	brcc	.+20     	; 0x5812 <_ZN7TwoWire4readEv+0x20>
    57fe:	e9 2f       	mov	r30, r25
    5800:	f0 e0       	ldi	r31, 0x00	; 0
    5802:	e1 55       	subi	r30, 0x51	; 81
    5804:	f5 4f       	sbci	r31, 0xF5	; 245
    5806:	20 81       	ld	r18, Z
    5808:	30 e0       	ldi	r19, 0x00	; 0
    580a:	9f 5f       	subi	r25, 0xFF	; 255
    580c:	90 93 ae 0a 	sts	0x0AAE, r25	; 0x800aae <_ZN7TwoWire13rxBufferIndexE>
    5810:	02 c0       	rjmp	.+4      	; 0x5816 <_ZN7TwoWire4readEv+0x24>
    5812:	2f ef       	ldi	r18, 0xFF	; 255
    5814:	3f ef       	ldi	r19, 0xFF	; 255
    5816:	c9 01       	movw	r24, r18
    5818:	08 95       	ret

0000581a <_ZN7TwoWire4peekEv>:
    581a:	e0 91 ae 0a 	lds	r30, 0x0AAE	; 0x800aae <_ZN7TwoWire13rxBufferIndexE>
    581e:	80 91 ad 0a 	lds	r24, 0x0AAD	; 0x800aad <_ZN7TwoWire14rxBufferLengthE>
    5822:	e8 17       	cp	r30, r24
    5824:	30 f4       	brcc	.+12     	; 0x5832 <_ZN7TwoWire4peekEv+0x18>
    5826:	f0 e0       	ldi	r31, 0x00	; 0
    5828:	e1 55       	subi	r30, 0x51	; 81
    582a:	f5 4f       	sbci	r31, 0xF5	; 245
    582c:	80 81       	ld	r24, Z
    582e:	90 e0       	ldi	r25, 0x00	; 0
    5830:	08 95       	ret
    5832:	8f ef       	ldi	r24, 0xFF	; 255
    5834:	9f ef       	ldi	r25, 0xFF	; 255
    5836:	08 95       	ret

00005838 <_ZN7TwoWire5flushEv>:
    5838:	08 95       	ret

0000583a <_ZN7TwoWire16onReceiveServiceEPhi>:
    583a:	cf 93       	push	r28
    583c:	df 93       	push	r29
    583e:	ec 01       	movw	r28, r24
    5840:	e0 91 85 0a 	lds	r30, 0x0A85	; 0x800a85 <_ZN7TwoWire14user_onReceiveE>
    5844:	f0 91 86 0a 	lds	r31, 0x0A86	; 0x800a86 <_ZN7TwoWire14user_onReceiveE+0x1>
    5848:	30 97       	sbiw	r30, 0x00	; 0
    584a:	f1 f0       	breq	.+60     	; 0x5888 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    584c:	90 91 ae 0a 	lds	r25, 0x0AAE	; 0x800aae <_ZN7TwoWire13rxBufferIndexE>
    5850:	80 91 ad 0a 	lds	r24, 0x0AAD	; 0x800aad <_ZN7TwoWire14rxBufferLengthE>
    5854:	98 17       	cp	r25, r24
    5856:	c0 f0       	brcs	.+48     	; 0x5888 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    5858:	90 e0       	ldi	r25, 0x00	; 0
    585a:	29 2f       	mov	r18, r25
    585c:	30 e0       	ldi	r19, 0x00	; 0
    585e:	26 17       	cp	r18, r22
    5860:	37 07       	cpc	r19, r23
    5862:	54 f4       	brge	.+20     	; 0x5878 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    5864:	de 01       	movw	r26, r28
    5866:	a2 0f       	add	r26, r18
    5868:	b3 1f       	adc	r27, r19
    586a:	4c 91       	ld	r20, X
    586c:	d9 01       	movw	r26, r18
    586e:	a1 55       	subi	r26, 0x51	; 81
    5870:	b5 4f       	sbci	r27, 0xF5	; 245
    5872:	4c 93       	st	X, r20
    5874:	9f 5f       	subi	r25, 0xFF	; 255
    5876:	f1 cf       	rjmp	.-30     	; 0x585a <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    5878:	10 92 ae 0a 	sts	0x0AAE, r1	; 0x800aae <_ZN7TwoWire13rxBufferIndexE>
    587c:	60 93 ad 0a 	sts	0x0AAD, r22	; 0x800aad <_ZN7TwoWire14rxBufferLengthE>
    5880:	cb 01       	movw	r24, r22
    5882:	df 91       	pop	r29
    5884:	cf 91       	pop	r28
    5886:	09 94       	ijmp
    5888:	df 91       	pop	r29
    588a:	cf 91       	pop	r28
    588c:	08 95       	ret

0000588e <_ZN7TwoWire16onRequestServiceEv>:
    588e:	e0 91 87 0a 	lds	r30, 0x0A87	; 0x800a87 <_ZN7TwoWire14user_onRequestE>
    5892:	f0 91 88 0a 	lds	r31, 0x0A88	; 0x800a88 <_ZN7TwoWire14user_onRequestE+0x1>
    5896:	30 97       	sbiw	r30, 0x00	; 0
    5898:	29 f0       	breq	.+10     	; 0x58a4 <_ZN7TwoWire16onRequestServiceEv+0x16>
    589a:	10 92 8b 0a 	sts	0x0A8B, r1	; 0x800a8b <_ZN7TwoWire13txBufferIndexE>
    589e:	10 92 8a 0a 	sts	0x0A8A, r1	; 0x800a8a <_ZN7TwoWire14txBufferLengthE>
    58a2:	09 94       	ijmp
    58a4:	08 95       	ret

000058a6 <_ZN7TwoWire5writeEPKhj>:
    58a6:	cf 92       	push	r12
    58a8:	df 92       	push	r13
    58aa:	ef 92       	push	r14
    58ac:	ff 92       	push	r15
    58ae:	0f 93       	push	r16
    58b0:	1f 93       	push	r17
    58b2:	cf 93       	push	r28
    58b4:	df 93       	push	r29
    58b6:	7c 01       	movw	r14, r24
    58b8:	cb 01       	movw	r24, r22
    58ba:	8a 01       	movw	r16, r20
    58bc:	20 91 89 0a 	lds	r18, 0x0A89	; 0x800a89 <_ZN7TwoWire12transmittingE>
    58c0:	22 23       	and	r18, r18
    58c2:	89 f0       	breq	.+34     	; 0x58e6 <_ZN7TwoWire5writeEPKhj+0x40>
    58c4:	eb 01       	movw	r28, r22
    58c6:	6b 01       	movw	r12, r22
    58c8:	c4 0e       	add	r12, r20
    58ca:	d5 1e       	adc	r13, r21
    58cc:	cc 15       	cp	r28, r12
    58ce:	dd 05       	cpc	r29, r13
    58d0:	61 f0       	breq	.+24     	; 0x58ea <_ZN7TwoWire5writeEPKhj+0x44>
    58d2:	69 91       	ld	r22, Y+
    58d4:	d7 01       	movw	r26, r14
    58d6:	ed 91       	ld	r30, X+
    58d8:	fc 91       	ld	r31, X
    58da:	01 90       	ld	r0, Z+
    58dc:	f0 81       	ld	r31, Z
    58de:	e0 2d       	mov	r30, r0
    58e0:	c7 01       	movw	r24, r14
    58e2:	09 95       	icall
    58e4:	f3 cf       	rjmp	.-26     	; 0x58cc <_ZN7TwoWire5writeEPKhj+0x26>
    58e6:	64 2f       	mov	r22, r20
    58e8:	0c de       	rcall	.-1000   	; 0x5502 <twi_transmit>
    58ea:	c8 01       	movw	r24, r16
    58ec:	df 91       	pop	r29
    58ee:	cf 91       	pop	r28
    58f0:	1f 91       	pop	r17
    58f2:	0f 91       	pop	r16
    58f4:	ff 90       	pop	r15
    58f6:	ef 90       	pop	r14
    58f8:	df 90       	pop	r13
    58fa:	cf 90       	pop	r12
    58fc:	08 95       	ret

000058fe <_ZN7TwoWire5writeEh>:
    58fe:	cf 93       	push	r28
    5900:	df 93       	push	r29
    5902:	1f 92       	push	r1
    5904:	cd b7       	in	r28, 0x3d	; 61
    5906:	de b7       	in	r29, 0x3e	; 62
    5908:	69 83       	std	Y+1, r22	; 0x01
    590a:	20 91 89 0a 	lds	r18, 0x0A89	; 0x800a89 <_ZN7TwoWire12transmittingE>
    590e:	22 23       	and	r18, r18
    5910:	d1 f0       	breq	.+52     	; 0x5946 <_ZN7TwoWire5writeEh+0x48>
    5912:	20 91 8a 0a 	lds	r18, 0x0A8A	; 0x800a8a <_ZN7TwoWire14txBufferLengthE>
    5916:	20 32       	cpi	r18, 0x20	; 32
    5918:	40 f0       	brcs	.+16     	; 0x592a <_ZN7TwoWire5writeEh+0x2c>
    591a:	21 e0       	ldi	r18, 0x01	; 1
    591c:	30 e0       	ldi	r19, 0x00	; 0
    591e:	fc 01       	movw	r30, r24
    5920:	33 83       	std	Z+3, r19	; 0x03
    5922:	22 83       	std	Z+2, r18	; 0x02
    5924:	80 e0       	ldi	r24, 0x00	; 0
    5926:	90 e0       	ldi	r25, 0x00	; 0
    5928:	14 c0       	rjmp	.+40     	; 0x5952 <_ZN7TwoWire5writeEh+0x54>
    592a:	80 91 8b 0a 	lds	r24, 0x0A8B	; 0x800a8b <_ZN7TwoWire13txBufferIndexE>
    592e:	e8 2f       	mov	r30, r24
    5930:	f0 e0       	ldi	r31, 0x00	; 0
    5932:	e4 57       	subi	r30, 0x74	; 116
    5934:	f5 4f       	sbci	r31, 0xF5	; 245
    5936:	99 81       	ldd	r25, Y+1	; 0x01
    5938:	90 83       	st	Z, r25
    593a:	8f 5f       	subi	r24, 0xFF	; 255
    593c:	80 93 8b 0a 	sts	0x0A8B, r24	; 0x800a8b <_ZN7TwoWire13txBufferIndexE>
    5940:	80 93 8a 0a 	sts	0x0A8A, r24	; 0x800a8a <_ZN7TwoWire14txBufferLengthE>
    5944:	04 c0       	rjmp	.+8      	; 0x594e <_ZN7TwoWire5writeEh+0x50>
    5946:	61 e0       	ldi	r22, 0x01	; 1
    5948:	ce 01       	movw	r24, r28
    594a:	01 96       	adiw	r24, 0x01	; 1
    594c:	da dd       	rcall	.-1100   	; 0x5502 <twi_transmit>
    594e:	81 e0       	ldi	r24, 0x01	; 1
    5950:	90 e0       	ldi	r25, 0x00	; 0
    5952:	0f 90       	pop	r0
    5954:	df 91       	pop	r29
    5956:	cf 91       	pop	r28
    5958:	08 95       	ret

0000595a <_ZN7TwoWireC1Ev>:
    595a:	fc 01       	movw	r30, r24
    595c:	13 82       	std	Z+3, r1	; 0x03
    595e:	12 82       	std	Z+2, r1	; 0x02
    5960:	88 ee       	ldi	r24, 0xE8	; 232
    5962:	93 e0       	ldi	r25, 0x03	; 3
    5964:	a0 e0       	ldi	r26, 0x00	; 0
    5966:	b0 e0       	ldi	r27, 0x00	; 0
    5968:	84 83       	std	Z+4, r24	; 0x04
    596a:	95 83       	std	Z+5, r25	; 0x05
    596c:	a6 83       	std	Z+6, r26	; 0x06
    596e:	b7 83       	std	Z+7, r27	; 0x07
    5970:	83 e3       	ldi	r24, 0x33	; 51
    5972:	98 e0       	ldi	r25, 0x08	; 8
    5974:	91 83       	std	Z+1, r25	; 0x01
    5976:	80 83       	st	Z, r24
    5978:	08 95       	ret

0000597a <_ZN7TwoWire5beginEv>:
    597a:	10 92 ae 0a 	sts	0x0AAE, r1	; 0x800aae <_ZN7TwoWire13rxBufferIndexE>
    597e:	10 92 ad 0a 	sts	0x0AAD, r1	; 0x800aad <_ZN7TwoWire14rxBufferLengthE>
    5982:	10 92 8b 0a 	sts	0x0A8B, r1	; 0x800a8b <_ZN7TwoWire13txBufferIndexE>
    5986:	10 92 8a 0a 	sts	0x0A8A, r1	; 0x800a8a <_ZN7TwoWire14txBufferLengthE>
    598a:	de dc       	rcall	.-1604   	; 0x5348 <twi_init>
    598c:	87 e4       	ldi	r24, 0x47	; 71
    598e:	9c e2       	ldi	r25, 0x2C	; 44
    5990:	e5 dd       	rcall	.-1078   	; 0x555c <twi_attachSlaveTxEvent>
    5992:	8d e1       	ldi	r24, 0x1D	; 29
    5994:	9c e2       	ldi	r25, 0x2C	; 44
    5996:	dd cd       	rjmp	.-1094   	; 0x5552 <twi_attachSlaveRxEvent>

00005998 <_ZN7TwoWire3endEv>:
    5998:	f5 cc       	rjmp	.-1558   	; 0x5384 <twi_disable>

0000599a <_ZN7TwoWire8setClockEm>:
    599a:	cb 01       	movw	r24, r22
    599c:	ba 01       	movw	r22, r20
    599e:	ff cc       	rjmp	.-1538   	; 0x539e <twi_setFrequency>

000059a0 <_ZN7TwoWire17beginTransmissionEh>:
    59a0:	81 e0       	ldi	r24, 0x01	; 1
    59a2:	80 93 89 0a 	sts	0x0A89, r24	; 0x800a89 <_ZN7TwoWire12transmittingE>
    59a6:	60 93 ac 0a 	sts	0x0AAC, r22	; 0x800aac <_ZN7TwoWire9txAddressE>
    59aa:	10 92 8b 0a 	sts	0x0A8B, r1	; 0x800a8b <_ZN7TwoWire13txBufferIndexE>
    59ae:	10 92 8a 0a 	sts	0x0A8A, r1	; 0x800a8a <_ZN7TwoWire14txBufferLengthE>
    59b2:	08 95       	ret

000059b4 <_ZN7TwoWire17beginTransmissionEi>:
    59b4:	f5 cf       	rjmp	.-22     	; 0x59a0 <_ZN7TwoWire17beginTransmissionEh>

000059b6 <_ZN7TwoWire15endTransmissionEh>:
    59b6:	0f 93       	push	r16
    59b8:	06 2f       	mov	r16, r22
    59ba:	21 e0       	ldi	r18, 0x01	; 1
    59bc:	40 91 8a 0a 	lds	r20, 0x0A8A	; 0x800a8a <_ZN7TwoWire14txBufferLengthE>
    59c0:	6c e8       	ldi	r22, 0x8C	; 140
    59c2:	7a e0       	ldi	r23, 0x0A	; 10
    59c4:	80 91 ac 0a 	lds	r24, 0x0AAC	; 0x800aac <_ZN7TwoWire9txAddressE>
    59c8:	46 dd       	rcall	.-1396   	; 0x5456 <twi_writeTo>
    59ca:	10 92 8b 0a 	sts	0x0A8B, r1	; 0x800a8b <_ZN7TwoWire13txBufferIndexE>
    59ce:	10 92 8a 0a 	sts	0x0A8A, r1	; 0x800a8a <_ZN7TwoWire14txBufferLengthE>
    59d2:	10 92 89 0a 	sts	0x0A89, r1	; 0x800a89 <_ZN7TwoWire12transmittingE>
    59d6:	0f 91       	pop	r16
    59d8:	08 95       	ret

000059da <_ZN7TwoWire11requestFromEhhmhh>:
    59da:	4f 92       	push	r4
    59dc:	5f 92       	push	r5
    59de:	6f 92       	push	r6
    59e0:	7f 92       	push	r7
    59e2:	af 92       	push	r10
    59e4:	bf 92       	push	r11
    59e6:	cf 92       	push	r12
    59e8:	ef 92       	push	r14
    59ea:	ff 92       	push	r15
    59ec:	0f 93       	push	r16
    59ee:	1f 93       	push	r17
    59f0:	cf 93       	push	r28
    59f2:	df 93       	push	r29
    59f4:	5c 01       	movw	r10, r24
    59f6:	f6 2e       	mov	r15, r22
    59f8:	d4 2f       	mov	r29, r20
    59fa:	28 01       	movw	r4, r16
    59fc:	39 01       	movw	r6, r18
    59fe:	ee 20       	and	r14, r14
    5a00:	11 f1       	breq	.+68     	; 0x5a46 <_ZN7TwoWire11requestFromEhhmhh+0x6c>
    5a02:	ce df       	rcall	.-100    	; 0x59a0 <_ZN7TwoWire17beginTransmissionEh>
    5a04:	ce 2d       	mov	r28, r14
    5a06:	c4 30       	cpi	r28, 0x04	; 4
    5a08:	08 f0       	brcs	.+2      	; 0x5a0c <_ZN7TwoWire11requestFromEhhmhh+0x32>
    5a0a:	c3 e0       	ldi	r28, 0x03	; 3
    5a0c:	c1 50       	subi	r28, 0x01	; 1
    5a0e:	c0 f0       	brcs	.+48     	; 0x5a40 <_ZN7TwoWire11requestFromEhhmhh+0x66>
    5a10:	28 e0       	ldi	r18, 0x08	; 8
    5a12:	c2 9f       	mul	r28, r18
    5a14:	c0 01       	movw	r24, r0
    5a16:	11 24       	eor	r1, r1
    5a18:	a3 01       	movw	r20, r6
    5a1a:	92 01       	movw	r18, r4
    5a1c:	04 c0       	rjmp	.+8      	; 0x5a26 <_ZN7TwoWire11requestFromEhhmhh+0x4c>
    5a1e:	56 95       	lsr	r21
    5a20:	47 95       	ror	r20
    5a22:	37 95       	ror	r19
    5a24:	27 95       	ror	r18
    5a26:	8a 95       	dec	r24
    5a28:	d2 f7       	brpl	.-12     	; 0x5a1e <_ZN7TwoWire11requestFromEhhmhh+0x44>
    5a2a:	ca 01       	movw	r24, r20
    5a2c:	b9 01       	movw	r22, r18
    5a2e:	d5 01       	movw	r26, r10
    5a30:	ed 91       	ld	r30, X+
    5a32:	fc 91       	ld	r31, X
    5a34:	01 90       	ld	r0, Z+
    5a36:	f0 81       	ld	r31, Z
    5a38:	e0 2d       	mov	r30, r0
    5a3a:	c5 01       	movw	r24, r10
    5a3c:	09 95       	icall
    5a3e:	e6 cf       	rjmp	.-52     	; 0x5a0c <_ZN7TwoWire11requestFromEhhmhh+0x32>
    5a40:	60 e0       	ldi	r22, 0x00	; 0
    5a42:	c5 01       	movw	r24, r10
    5a44:	b8 df       	rcall	.-144    	; 0x59b6 <_ZN7TwoWire15endTransmissionEh>
    5a46:	4d 2f       	mov	r20, r29
    5a48:	d1 32       	cpi	r29, 0x21	; 33
    5a4a:	08 f0       	brcs	.+2      	; 0x5a4e <_ZN7TwoWire11requestFromEhhmhh+0x74>
    5a4c:	40 e2       	ldi	r20, 0x20	; 32
    5a4e:	2c 2d       	mov	r18, r12
    5a50:	6f ea       	ldi	r22, 0xAF	; 175
    5a52:	7a e0       	ldi	r23, 0x0A	; 10
    5a54:	8f 2d       	mov	r24, r15
    5a56:	b7 dc       	rcall	.-1682   	; 0x53c6 <twi_readFrom>
    5a58:	10 92 ae 0a 	sts	0x0AAE, r1	; 0x800aae <_ZN7TwoWire13rxBufferIndexE>
    5a5c:	80 93 ad 0a 	sts	0x0AAD, r24	; 0x800aad <_ZN7TwoWire14rxBufferLengthE>
    5a60:	df 91       	pop	r29
    5a62:	cf 91       	pop	r28
    5a64:	1f 91       	pop	r17
    5a66:	0f 91       	pop	r16
    5a68:	ff 90       	pop	r15
    5a6a:	ef 90       	pop	r14
    5a6c:	cf 90       	pop	r12
    5a6e:	bf 90       	pop	r11
    5a70:	af 90       	pop	r10
    5a72:	7f 90       	pop	r7
    5a74:	6f 90       	pop	r6
    5a76:	5f 90       	pop	r5
    5a78:	4f 90       	pop	r4
    5a7a:	08 95       	ret

00005a7c <_ZN7TwoWire11requestFromEhhh>:
    5a7c:	cf 92       	push	r12
    5a7e:	ef 92       	push	r14
    5a80:	0f 93       	push	r16
    5a82:	1f 93       	push	r17
    5a84:	c2 2e       	mov	r12, r18
    5a86:	e1 2c       	mov	r14, r1
    5a88:	00 e0       	ldi	r16, 0x00	; 0
    5a8a:	10 e0       	ldi	r17, 0x00	; 0
    5a8c:	98 01       	movw	r18, r16
    5a8e:	a5 df       	rcall	.-182    	; 0x59da <_ZN7TwoWire11requestFromEhhmhh>
    5a90:	1f 91       	pop	r17
    5a92:	0f 91       	pop	r16
    5a94:	ef 90       	pop	r14
    5a96:	cf 90       	pop	r12
    5a98:	08 95       	ret

00005a9a <_ZN7TwoWire11requestFromEhh>:
    5a9a:	21 e0       	ldi	r18, 0x01	; 1
    5a9c:	ef cf       	rjmp	.-34     	; 0x5a7c <_ZN7TwoWire11requestFromEhhh>

00005a9e <_ZN7TwoWire11requestFromEii>:
    5a9e:	21 e0       	ldi	r18, 0x01	; 1
    5aa0:	ed cf       	rjmp	.-38     	; 0x5a7c <_ZN7TwoWire11requestFromEhhh>

00005aa2 <_ZN7TwoWire15endTransmissionEv>:
    5aa2:	61 e0       	ldi	r22, 0x01	; 1
    5aa4:	88 cf       	rjmp	.-240    	; 0x59b6 <_ZN7TwoWire15endTransmissionEh>

00005aa6 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    5aa6:	89 e7       	ldi	r24, 0x79	; 121
    5aa8:	9a e0       	ldi	r25, 0x0A	; 10
    5aaa:	57 cf       	rjmp	.-338    	; 0x595a <_ZN7TwoWireC1Ev>

00005aac <__cmpsf2>:
    5aac:	a8 d0       	rcall	.+336    	; 0x5bfe <__fp_cmp>
    5aae:	08 f4       	brcc	.+2      	; 0x5ab2 <__cmpsf2+0x6>
    5ab0:	81 e0       	ldi	r24, 0x01	; 1
    5ab2:	08 95       	ret

00005ab4 <__divsf3>:
    5ab4:	0c d0       	rcall	.+24     	; 0x5ace <__divsf3x>
    5ab6:	de c0       	rjmp	.+444    	; 0x5c74 <__fp_round>
    5ab8:	d6 d0       	rcall	.+428    	; 0x5c66 <__fp_pscB>
    5aba:	40 f0       	brcs	.+16     	; 0x5acc <__divsf3+0x18>
    5abc:	cd d0       	rcall	.+410    	; 0x5c58 <__fp_pscA>
    5abe:	30 f0       	brcs	.+12     	; 0x5acc <__divsf3+0x18>
    5ac0:	21 f4       	brne	.+8      	; 0x5aca <__divsf3+0x16>
    5ac2:	5f 3f       	cpi	r21, 0xFF	; 255
    5ac4:	19 f0       	breq	.+6      	; 0x5acc <__divsf3+0x18>
    5ac6:	bf c0       	rjmp	.+382    	; 0x5c46 <__fp_inf>
    5ac8:	51 11       	cpse	r21, r1
    5aca:	08 c1       	rjmp	.+528    	; 0x5cdc <__fp_szero>
    5acc:	c2 c0       	rjmp	.+388    	; 0x5c52 <__fp_nan>

00005ace <__divsf3x>:
    5ace:	e3 d0       	rcall	.+454    	; 0x5c96 <__fp_split3>
    5ad0:	98 f3       	brcs	.-26     	; 0x5ab8 <__divsf3+0x4>

00005ad2 <__divsf3_pse>:
    5ad2:	99 23       	and	r25, r25
    5ad4:	c9 f3       	breq	.-14     	; 0x5ac8 <__divsf3+0x14>
    5ad6:	55 23       	and	r21, r21
    5ad8:	b1 f3       	breq	.-20     	; 0x5ac6 <__divsf3+0x12>
    5ada:	95 1b       	sub	r25, r21
    5adc:	55 0b       	sbc	r21, r21
    5ade:	bb 27       	eor	r27, r27
    5ae0:	aa 27       	eor	r26, r26
    5ae2:	62 17       	cp	r22, r18
    5ae4:	73 07       	cpc	r23, r19
    5ae6:	84 07       	cpc	r24, r20
    5ae8:	38 f0       	brcs	.+14     	; 0x5af8 <__divsf3_pse+0x26>
    5aea:	9f 5f       	subi	r25, 0xFF	; 255
    5aec:	5f 4f       	sbci	r21, 0xFF	; 255
    5aee:	22 0f       	add	r18, r18
    5af0:	33 1f       	adc	r19, r19
    5af2:	44 1f       	adc	r20, r20
    5af4:	aa 1f       	adc	r26, r26
    5af6:	a9 f3       	breq	.-22     	; 0x5ae2 <__divsf3_pse+0x10>
    5af8:	33 d0       	rcall	.+102    	; 0x5b60 <__divsf3_pse+0x8e>
    5afa:	0e 2e       	mov	r0, r30
    5afc:	3a f0       	brmi	.+14     	; 0x5b0c <__divsf3_pse+0x3a>
    5afe:	e0 e8       	ldi	r30, 0x80	; 128
    5b00:	30 d0       	rcall	.+96     	; 0x5b62 <__divsf3_pse+0x90>
    5b02:	91 50       	subi	r25, 0x01	; 1
    5b04:	50 40       	sbci	r21, 0x00	; 0
    5b06:	e6 95       	lsr	r30
    5b08:	00 1c       	adc	r0, r0
    5b0a:	ca f7       	brpl	.-14     	; 0x5afe <__divsf3_pse+0x2c>
    5b0c:	29 d0       	rcall	.+82     	; 0x5b60 <__divsf3_pse+0x8e>
    5b0e:	fe 2f       	mov	r31, r30
    5b10:	27 d0       	rcall	.+78     	; 0x5b60 <__divsf3_pse+0x8e>
    5b12:	66 0f       	add	r22, r22
    5b14:	77 1f       	adc	r23, r23
    5b16:	88 1f       	adc	r24, r24
    5b18:	bb 1f       	adc	r27, r27
    5b1a:	26 17       	cp	r18, r22
    5b1c:	37 07       	cpc	r19, r23
    5b1e:	48 07       	cpc	r20, r24
    5b20:	ab 07       	cpc	r26, r27
    5b22:	b0 e8       	ldi	r27, 0x80	; 128
    5b24:	09 f0       	breq	.+2      	; 0x5b28 <__divsf3_pse+0x56>
    5b26:	bb 0b       	sbc	r27, r27
    5b28:	80 2d       	mov	r24, r0
    5b2a:	bf 01       	movw	r22, r30
    5b2c:	ff 27       	eor	r31, r31
    5b2e:	93 58       	subi	r25, 0x83	; 131
    5b30:	5f 4f       	sbci	r21, 0xFF	; 255
    5b32:	2a f0       	brmi	.+10     	; 0x5b3e <__divsf3_pse+0x6c>
    5b34:	9e 3f       	cpi	r25, 0xFE	; 254
    5b36:	51 05       	cpc	r21, r1
    5b38:	68 f0       	brcs	.+26     	; 0x5b54 <__divsf3_pse+0x82>
    5b3a:	85 c0       	rjmp	.+266    	; 0x5c46 <__fp_inf>
    5b3c:	cf c0       	rjmp	.+414    	; 0x5cdc <__fp_szero>
    5b3e:	5f 3f       	cpi	r21, 0xFF	; 255
    5b40:	ec f3       	brlt	.-6      	; 0x5b3c <__divsf3_pse+0x6a>
    5b42:	98 3e       	cpi	r25, 0xE8	; 232
    5b44:	dc f3       	brlt	.-10     	; 0x5b3c <__divsf3_pse+0x6a>
    5b46:	86 95       	lsr	r24
    5b48:	77 95       	ror	r23
    5b4a:	67 95       	ror	r22
    5b4c:	b7 95       	ror	r27
    5b4e:	f7 95       	ror	r31
    5b50:	9f 5f       	subi	r25, 0xFF	; 255
    5b52:	c9 f7       	brne	.-14     	; 0x5b46 <__divsf3_pse+0x74>
    5b54:	88 0f       	add	r24, r24
    5b56:	91 1d       	adc	r25, r1
    5b58:	96 95       	lsr	r25
    5b5a:	87 95       	ror	r24
    5b5c:	97 f9       	bld	r25, 7
    5b5e:	08 95       	ret
    5b60:	e1 e0       	ldi	r30, 0x01	; 1
    5b62:	66 0f       	add	r22, r22
    5b64:	77 1f       	adc	r23, r23
    5b66:	88 1f       	adc	r24, r24
    5b68:	bb 1f       	adc	r27, r27
    5b6a:	62 17       	cp	r22, r18
    5b6c:	73 07       	cpc	r23, r19
    5b6e:	84 07       	cpc	r24, r20
    5b70:	ba 07       	cpc	r27, r26
    5b72:	20 f0       	brcs	.+8      	; 0x5b7c <__divsf3_pse+0xaa>
    5b74:	62 1b       	sub	r22, r18
    5b76:	73 0b       	sbc	r23, r19
    5b78:	84 0b       	sbc	r24, r20
    5b7a:	ba 0b       	sbc	r27, r26
    5b7c:	ee 1f       	adc	r30, r30
    5b7e:	88 f7       	brcc	.-30     	; 0x5b62 <__divsf3_pse+0x90>
    5b80:	e0 95       	com	r30
    5b82:	08 95       	ret

00005b84 <__floatunsisf>:
    5b84:	e8 94       	clt
    5b86:	09 c0       	rjmp	.+18     	; 0x5b9a <__floatsisf+0x12>

00005b88 <__floatsisf>:
    5b88:	97 fb       	bst	r25, 7
    5b8a:	3e f4       	brtc	.+14     	; 0x5b9a <__floatsisf+0x12>
    5b8c:	90 95       	com	r25
    5b8e:	80 95       	com	r24
    5b90:	70 95       	com	r23
    5b92:	61 95       	neg	r22
    5b94:	7f 4f       	sbci	r23, 0xFF	; 255
    5b96:	8f 4f       	sbci	r24, 0xFF	; 255
    5b98:	9f 4f       	sbci	r25, 0xFF	; 255
    5b9a:	99 23       	and	r25, r25
    5b9c:	a9 f0       	breq	.+42     	; 0x5bc8 <__floatsisf+0x40>
    5b9e:	f9 2f       	mov	r31, r25
    5ba0:	96 e9       	ldi	r25, 0x96	; 150
    5ba2:	bb 27       	eor	r27, r27
    5ba4:	93 95       	inc	r25
    5ba6:	f6 95       	lsr	r31
    5ba8:	87 95       	ror	r24
    5baa:	77 95       	ror	r23
    5bac:	67 95       	ror	r22
    5bae:	b7 95       	ror	r27
    5bb0:	f1 11       	cpse	r31, r1
    5bb2:	f8 cf       	rjmp	.-16     	; 0x5ba4 <__floatsisf+0x1c>
    5bb4:	fa f4       	brpl	.+62     	; 0x5bf4 <__floatsisf+0x6c>
    5bb6:	bb 0f       	add	r27, r27
    5bb8:	11 f4       	brne	.+4      	; 0x5bbe <__floatsisf+0x36>
    5bba:	60 ff       	sbrs	r22, 0
    5bbc:	1b c0       	rjmp	.+54     	; 0x5bf4 <__floatsisf+0x6c>
    5bbe:	6f 5f       	subi	r22, 0xFF	; 255
    5bc0:	7f 4f       	sbci	r23, 0xFF	; 255
    5bc2:	8f 4f       	sbci	r24, 0xFF	; 255
    5bc4:	9f 4f       	sbci	r25, 0xFF	; 255
    5bc6:	16 c0       	rjmp	.+44     	; 0x5bf4 <__floatsisf+0x6c>
    5bc8:	88 23       	and	r24, r24
    5bca:	11 f0       	breq	.+4      	; 0x5bd0 <__floatsisf+0x48>
    5bcc:	96 e9       	ldi	r25, 0x96	; 150
    5bce:	11 c0       	rjmp	.+34     	; 0x5bf2 <__floatsisf+0x6a>
    5bd0:	77 23       	and	r23, r23
    5bd2:	21 f0       	breq	.+8      	; 0x5bdc <__floatsisf+0x54>
    5bd4:	9e e8       	ldi	r25, 0x8E	; 142
    5bd6:	87 2f       	mov	r24, r23
    5bd8:	76 2f       	mov	r23, r22
    5bda:	05 c0       	rjmp	.+10     	; 0x5be6 <__floatsisf+0x5e>
    5bdc:	66 23       	and	r22, r22
    5bde:	71 f0       	breq	.+28     	; 0x5bfc <__floatsisf+0x74>
    5be0:	96 e8       	ldi	r25, 0x86	; 134
    5be2:	86 2f       	mov	r24, r22
    5be4:	70 e0       	ldi	r23, 0x00	; 0
    5be6:	60 e0       	ldi	r22, 0x00	; 0
    5be8:	2a f0       	brmi	.+10     	; 0x5bf4 <__floatsisf+0x6c>
    5bea:	9a 95       	dec	r25
    5bec:	66 0f       	add	r22, r22
    5bee:	77 1f       	adc	r23, r23
    5bf0:	88 1f       	adc	r24, r24
    5bf2:	da f7       	brpl	.-10     	; 0x5bea <__floatsisf+0x62>
    5bf4:	88 0f       	add	r24, r24
    5bf6:	96 95       	lsr	r25
    5bf8:	87 95       	ror	r24
    5bfa:	97 f9       	bld	r25, 7
    5bfc:	08 95       	ret

00005bfe <__fp_cmp>:
    5bfe:	99 0f       	add	r25, r25
    5c00:	00 08       	sbc	r0, r0
    5c02:	55 0f       	add	r21, r21
    5c04:	aa 0b       	sbc	r26, r26
    5c06:	e0 e8       	ldi	r30, 0x80	; 128
    5c08:	fe ef       	ldi	r31, 0xFE	; 254
    5c0a:	16 16       	cp	r1, r22
    5c0c:	17 06       	cpc	r1, r23
    5c0e:	e8 07       	cpc	r30, r24
    5c10:	f9 07       	cpc	r31, r25
    5c12:	c0 f0       	brcs	.+48     	; 0x5c44 <__fp_cmp+0x46>
    5c14:	12 16       	cp	r1, r18
    5c16:	13 06       	cpc	r1, r19
    5c18:	e4 07       	cpc	r30, r20
    5c1a:	f5 07       	cpc	r31, r21
    5c1c:	98 f0       	brcs	.+38     	; 0x5c44 <__fp_cmp+0x46>
    5c1e:	62 1b       	sub	r22, r18
    5c20:	73 0b       	sbc	r23, r19
    5c22:	84 0b       	sbc	r24, r20
    5c24:	95 0b       	sbc	r25, r21
    5c26:	39 f4       	brne	.+14     	; 0x5c36 <__fp_cmp+0x38>
    5c28:	0a 26       	eor	r0, r26
    5c2a:	61 f0       	breq	.+24     	; 0x5c44 <__fp_cmp+0x46>
    5c2c:	23 2b       	or	r18, r19
    5c2e:	24 2b       	or	r18, r20
    5c30:	25 2b       	or	r18, r21
    5c32:	21 f4       	brne	.+8      	; 0x5c3c <__fp_cmp+0x3e>
    5c34:	08 95       	ret
    5c36:	0a 26       	eor	r0, r26
    5c38:	09 f4       	brne	.+2      	; 0x5c3c <__fp_cmp+0x3e>
    5c3a:	a1 40       	sbci	r26, 0x01	; 1
    5c3c:	a6 95       	lsr	r26
    5c3e:	8f ef       	ldi	r24, 0xFF	; 255
    5c40:	81 1d       	adc	r24, r1
    5c42:	81 1d       	adc	r24, r1
    5c44:	08 95       	ret

00005c46 <__fp_inf>:
    5c46:	97 f9       	bld	r25, 7
    5c48:	9f 67       	ori	r25, 0x7F	; 127
    5c4a:	80 e8       	ldi	r24, 0x80	; 128
    5c4c:	70 e0       	ldi	r23, 0x00	; 0
    5c4e:	60 e0       	ldi	r22, 0x00	; 0
    5c50:	08 95       	ret

00005c52 <__fp_nan>:
    5c52:	9f ef       	ldi	r25, 0xFF	; 255
    5c54:	80 ec       	ldi	r24, 0xC0	; 192
    5c56:	08 95       	ret

00005c58 <__fp_pscA>:
    5c58:	00 24       	eor	r0, r0
    5c5a:	0a 94       	dec	r0
    5c5c:	16 16       	cp	r1, r22
    5c5e:	17 06       	cpc	r1, r23
    5c60:	18 06       	cpc	r1, r24
    5c62:	09 06       	cpc	r0, r25
    5c64:	08 95       	ret

00005c66 <__fp_pscB>:
    5c66:	00 24       	eor	r0, r0
    5c68:	0a 94       	dec	r0
    5c6a:	12 16       	cp	r1, r18
    5c6c:	13 06       	cpc	r1, r19
    5c6e:	14 06       	cpc	r1, r20
    5c70:	05 06       	cpc	r0, r21
    5c72:	08 95       	ret

00005c74 <__fp_round>:
    5c74:	09 2e       	mov	r0, r25
    5c76:	03 94       	inc	r0
    5c78:	00 0c       	add	r0, r0
    5c7a:	11 f4       	brne	.+4      	; 0x5c80 <__fp_round+0xc>
    5c7c:	88 23       	and	r24, r24
    5c7e:	52 f0       	brmi	.+20     	; 0x5c94 <__fp_round+0x20>
    5c80:	bb 0f       	add	r27, r27
    5c82:	40 f4       	brcc	.+16     	; 0x5c94 <__fp_round+0x20>
    5c84:	bf 2b       	or	r27, r31
    5c86:	11 f4       	brne	.+4      	; 0x5c8c <__fp_round+0x18>
    5c88:	60 ff       	sbrs	r22, 0
    5c8a:	04 c0       	rjmp	.+8      	; 0x5c94 <__fp_round+0x20>
    5c8c:	6f 5f       	subi	r22, 0xFF	; 255
    5c8e:	7f 4f       	sbci	r23, 0xFF	; 255
    5c90:	8f 4f       	sbci	r24, 0xFF	; 255
    5c92:	9f 4f       	sbci	r25, 0xFF	; 255
    5c94:	08 95       	ret

00005c96 <__fp_split3>:
    5c96:	57 fd       	sbrc	r21, 7
    5c98:	90 58       	subi	r25, 0x80	; 128
    5c9a:	44 0f       	add	r20, r20
    5c9c:	55 1f       	adc	r21, r21
    5c9e:	59 f0       	breq	.+22     	; 0x5cb6 <__fp_splitA+0x10>
    5ca0:	5f 3f       	cpi	r21, 0xFF	; 255
    5ca2:	71 f0       	breq	.+28     	; 0x5cc0 <__fp_splitA+0x1a>
    5ca4:	47 95       	ror	r20

00005ca6 <__fp_splitA>:
    5ca6:	88 0f       	add	r24, r24
    5ca8:	97 fb       	bst	r25, 7
    5caa:	99 1f       	adc	r25, r25
    5cac:	61 f0       	breq	.+24     	; 0x5cc6 <__fp_splitA+0x20>
    5cae:	9f 3f       	cpi	r25, 0xFF	; 255
    5cb0:	79 f0       	breq	.+30     	; 0x5cd0 <__fp_splitA+0x2a>
    5cb2:	87 95       	ror	r24
    5cb4:	08 95       	ret
    5cb6:	12 16       	cp	r1, r18
    5cb8:	13 06       	cpc	r1, r19
    5cba:	14 06       	cpc	r1, r20
    5cbc:	55 1f       	adc	r21, r21
    5cbe:	f2 cf       	rjmp	.-28     	; 0x5ca4 <__fp_split3+0xe>
    5cc0:	46 95       	lsr	r20
    5cc2:	f1 df       	rcall	.-30     	; 0x5ca6 <__fp_splitA>
    5cc4:	08 c0       	rjmp	.+16     	; 0x5cd6 <__fp_splitA+0x30>
    5cc6:	16 16       	cp	r1, r22
    5cc8:	17 06       	cpc	r1, r23
    5cca:	18 06       	cpc	r1, r24
    5ccc:	99 1f       	adc	r25, r25
    5cce:	f1 cf       	rjmp	.-30     	; 0x5cb2 <__fp_splitA+0xc>
    5cd0:	86 95       	lsr	r24
    5cd2:	71 05       	cpc	r23, r1
    5cd4:	61 05       	cpc	r22, r1
    5cd6:	08 94       	sec
    5cd8:	08 95       	ret

00005cda <__fp_zero>:
    5cda:	e8 94       	clt

00005cdc <__fp_szero>:
    5cdc:	bb 27       	eor	r27, r27
    5cde:	66 27       	eor	r22, r22
    5ce0:	77 27       	eor	r23, r23
    5ce2:	cb 01       	movw	r24, r22
    5ce4:	97 f9       	bld	r25, 7
    5ce6:	08 95       	ret

00005ce8 <__cxa_pure_virtual>:
    5ce8:	0e 94 c1 38 	call	0x7182	; 0x7182 <abort>

00005cec <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    5cec:	1f 92       	push	r1
    5cee:	0f 92       	push	r0
    5cf0:	0f b6       	in	r0, 0x3f	; 63
    5cf2:	0f 92       	push	r0
    5cf4:	11 24       	eor	r1, r1
    5cf6:	2f 93       	push	r18
    5cf8:	8f 93       	push	r24
    5cfa:	9f 93       	push	r25
    5cfc:	ef 93       	push	r30
    5cfe:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    5d00:	e0 91 df 0a 	lds	r30, 0x0ADF	; 0x800adf <Serial+0x10>
    5d04:	f0 91 e0 0a 	lds	r31, 0x0AE0	; 0x800ae0 <Serial+0x11>
    5d08:	80 81       	ld	r24, Z
    5d0a:	e0 91 e5 0a 	lds	r30, 0x0AE5	; 0x800ae5 <Serial+0x16>
    5d0e:	f0 91 e6 0a 	lds	r31, 0x0AE6	; 0x800ae6 <Serial+0x17>
    5d12:	82 fd       	sbrc	r24, 2
    5d14:	12 c0       	rjmp	.+36     	; 0x5d3a <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    5d16:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    5d18:	80 91 e8 0a 	lds	r24, 0x0AE8	; 0x800ae8 <Serial+0x19>
    5d1c:	8f 5f       	subi	r24, 0xFF	; 255
    5d1e:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    5d20:	20 91 e9 0a 	lds	r18, 0x0AE9	; 0x800ae9 <Serial+0x1a>
    5d24:	82 17       	cp	r24, r18
    5d26:	51 f0       	breq	.+20     	; 0x5d3c <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    5d28:	e0 91 e8 0a 	lds	r30, 0x0AE8	; 0x800ae8 <Serial+0x19>
    5d2c:	f0 e0       	ldi	r31, 0x00	; 0
    5d2e:	e1 53       	subi	r30, 0x31	; 49
    5d30:	f5 4f       	sbci	r31, 0xF5	; 245
    5d32:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    5d34:	80 93 e8 0a 	sts	0x0AE8, r24	; 0x800ae8 <Serial+0x19>
    5d38:	01 c0       	rjmp	.+2      	; 0x5d3c <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    5d3a:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    5d3c:	ff 91       	pop	r31
    5d3e:	ef 91       	pop	r30
    5d40:	9f 91       	pop	r25
    5d42:	8f 91       	pop	r24
    5d44:	2f 91       	pop	r18
    5d46:	0f 90       	pop	r0
    5d48:	0f be       	out	0x3f, r0	; 63
    5d4a:	0f 90       	pop	r0
    5d4c:	1f 90       	pop	r1
    5d4e:	18 95       	reti

00005d50 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    5d50:	1f 92       	push	r1
    5d52:	0f 92       	push	r0
    5d54:	0f b6       	in	r0, 0x3f	; 63
    5d56:	0f 92       	push	r0
    5d58:	11 24       	eor	r1, r1
    5d5a:	2f 93       	push	r18
    5d5c:	3f 93       	push	r19
    5d5e:	4f 93       	push	r20
    5d60:	5f 93       	push	r21
    5d62:	6f 93       	push	r22
    5d64:	7f 93       	push	r23
    5d66:	8f 93       	push	r24
    5d68:	9f 93       	push	r25
    5d6a:	af 93       	push	r26
    5d6c:	bf 93       	push	r27
    5d6e:	ef 93       	push	r30
    5d70:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    5d72:	8f ec       	ldi	r24, 0xCF	; 207
    5d74:	9a e0       	ldi	r25, 0x0A	; 10
    5d76:	f1 d6       	rcall	.+3554   	; 0x6b5a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    5d78:	ff 91       	pop	r31
    5d7a:	ef 91       	pop	r30
    5d7c:	bf 91       	pop	r27
    5d7e:	af 91       	pop	r26
    5d80:	9f 91       	pop	r25
    5d82:	8f 91       	pop	r24
    5d84:	7f 91       	pop	r23
    5d86:	6f 91       	pop	r22
    5d88:	5f 91       	pop	r21
    5d8a:	4f 91       	pop	r20
    5d8c:	3f 91       	pop	r19
    5d8e:	2f 91       	pop	r18
    5d90:	0f 90       	pop	r0
    5d92:	0f be       	out	0x3f, r0	; 63
    5d94:	0f 90       	pop	r0
    5d96:	1f 90       	pop	r1
    5d98:	18 95       	reti

00005d9a <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    5d9a:	8f ec       	ldi	r24, 0xCF	; 207
    5d9c:	9a e0       	ldi	r25, 0x0A	; 10
    5d9e:	93 d6       	rcall	.+3366   	; 0x6ac6 <_ZN14HardwareSerial9availableEv>
    5da0:	21 e0       	ldi	r18, 0x01	; 1
    5da2:	89 2b       	or	r24, r25
    5da4:	09 f4       	brne	.+2      	; 0x5da8 <_Z17Serial0_availablev+0xe>
    5da6:	20 e0       	ldi	r18, 0x00	; 0
}
    5da8:	82 2f       	mov	r24, r18
    5daa:	08 95       	ret

00005dac <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    5dac:	ef ec       	ldi	r30, 0xCF	; 207
    5dae:	fa e0       	ldi	r31, 0x0A	; 10
    5db0:	13 82       	std	Z+3, r1	; 0x03
    5db2:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    5db4:	88 ee       	ldi	r24, 0xE8	; 232
    5db6:	93 e0       	ldi	r25, 0x03	; 3
    5db8:	a0 e0       	ldi	r26, 0x00	; 0
    5dba:	b0 e0       	ldi	r27, 0x00	; 0
    5dbc:	84 83       	std	Z+4, r24	; 0x04
    5dbe:	95 83       	std	Z+5, r25	; 0x05
    5dc0:	a6 83       	std	Z+6, r26	; 0x06
    5dc2:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    5dc4:	87 e5       	ldi	r24, 0x57	; 87
    5dc6:	98 e0       	ldi	r25, 0x08	; 8
    5dc8:	91 83       	std	Z+1, r25	; 0x01
    5dca:	80 83       	st	Z, r24
    5dcc:	85 ec       	ldi	r24, 0xC5	; 197
    5dce:	90 e0       	ldi	r25, 0x00	; 0
    5dd0:	95 87       	std	Z+13, r25	; 0x0d
    5dd2:	84 87       	std	Z+12, r24	; 0x0c
    5dd4:	84 ec       	ldi	r24, 0xC4	; 196
    5dd6:	90 e0       	ldi	r25, 0x00	; 0
    5dd8:	97 87       	std	Z+15, r25	; 0x0f
    5dda:	86 87       	std	Z+14, r24	; 0x0e
    5ddc:	80 ec       	ldi	r24, 0xC0	; 192
    5dde:	90 e0       	ldi	r25, 0x00	; 0
    5de0:	91 8b       	std	Z+17, r25	; 0x11
    5de2:	80 8b       	std	Z+16, r24	; 0x10
    5de4:	81 ec       	ldi	r24, 0xC1	; 193
    5de6:	90 e0       	ldi	r25, 0x00	; 0
    5de8:	93 8b       	std	Z+19, r25	; 0x13
    5dea:	82 8b       	std	Z+18, r24	; 0x12
    5dec:	82 ec       	ldi	r24, 0xC2	; 194
    5dee:	90 e0       	ldi	r25, 0x00	; 0
    5df0:	95 8b       	std	Z+21, r25	; 0x15
    5df2:	84 8b       	std	Z+20, r24	; 0x14
    5df4:	86 ec       	ldi	r24, 0xC6	; 198
    5df6:	90 e0       	ldi	r25, 0x00	; 0
    5df8:	97 8b       	std	Z+23, r25	; 0x17
    5dfa:	86 8b       	std	Z+22, r24	; 0x16
    5dfc:	11 8e       	std	Z+25, r1	; 0x19
    5dfe:	12 8e       	std	Z+26, r1	; 0x1a
    5e00:	13 8e       	std	Z+27, r1	; 0x1b
    5e02:	14 8e       	std	Z+28, r1	; 0x1c
    5e04:	08 95       	ret

00005e06 <_ZNK9IPAddress7printToER5Print>:
        // Too few dots (there must be 3 dots)
        return false;
    }
    _address.bytes[3] = acc;
    return true;
}
    5e06:	8f 92       	push	r8
    5e08:	9f 92       	push	r9
    5e0a:	af 92       	push	r10
    5e0c:	bf 92       	push	r11
    5e0e:	cf 92       	push	r12
    5e10:	df 92       	push	r13
    5e12:	ef 92       	push	r14
    5e14:	ff 92       	push	r15
    5e16:	0f 93       	push	r16
    5e18:	1f 93       	push	r17
    5e1a:	cf 93       	push	r28
    5e1c:	df 93       	push	r29
    5e1e:	7c 01       	movw	r14, r24
    5e20:	8b 01       	movw	r16, r22
    5e22:	4c 01       	movw	r8, r24
    5e24:	82 e0       	ldi	r24, 0x02	; 2
    5e26:	88 0e       	add	r8, r24
    5e28:	91 1c       	adc	r9, r1
    5e2a:	57 01       	movw	r10, r14
    5e2c:	e5 e0       	ldi	r30, 0x05	; 5
    5e2e:	ae 0e       	add	r10, r30
    5e30:	b1 1c       	adc	r11, r1
    5e32:	c0 e0       	ldi	r28, 0x00	; 0
    5e34:	d0 e0       	ldi	r29, 0x00	; 0
    5e36:	f4 01       	movw	r30, r8
    5e38:	61 91       	ld	r22, Z+
    5e3a:	4f 01       	movw	r8, r30
    5e3c:	4a e0       	ldi	r20, 0x0A	; 10
    5e3e:	50 e0       	ldi	r21, 0x00	; 0
    5e40:	c8 01       	movw	r24, r16
    5e42:	4b d1       	rcall	.+662    	; 0x60da <_ZN5Print5printEhi>
    5e44:	6c 01       	movw	r12, r24
    5e46:	6e e2       	ldi	r22, 0x2E	; 46
    5e48:	c8 01       	movw	r24, r16
    5e4a:	ba d0       	rcall	.+372    	; 0x5fc0 <_ZN5Print5printEc>
    5e4c:	8c 0d       	add	r24, r12
    5e4e:	9d 1d       	adc	r25, r13
    5e50:	c8 0f       	add	r28, r24
    5e52:	d9 1f       	adc	r29, r25
    5e54:	8a 14       	cp	r8, r10
    5e56:	9b 04       	cpc	r9, r11
    5e58:	71 f7       	brne	.-36     	; 0x5e36 <_ZNK9IPAddress7printToER5Print+0x30>
    5e5a:	4a e0       	ldi	r20, 0x0A	; 10
    5e5c:	50 e0       	ldi	r21, 0x00	; 0
    5e5e:	f7 01       	movw	r30, r14
    5e60:	65 81       	ldd	r22, Z+5	; 0x05
    5e62:	c8 01       	movw	r24, r16
    5e64:	3a d1       	rcall	.+628    	; 0x60da <_ZN5Print5printEhi>
    5e66:	8c 0f       	add	r24, r28
    5e68:	9d 1f       	adc	r25, r29
    5e6a:	df 91       	pop	r29
    5e6c:	cf 91       	pop	r28
    5e6e:	1f 91       	pop	r17
    5e70:	0f 91       	pop	r16
    5e72:	ff 90       	pop	r15
    5e74:	ef 90       	pop	r14
    5e76:	df 90       	pop	r13
    5e78:	cf 90       	pop	r12
    5e7a:	bf 90       	pop	r11
    5e7c:	af 90       	pop	r10
    5e7e:	9f 90       	pop	r9
    5e80:	8f 90       	pop	r8
    5e82:	08 95       	ret

00005e84 <_ZN9IPAddressC1Ev>:
    5e84:	25 e4       	ldi	r18, 0x45	; 69
    5e86:	38 e0       	ldi	r19, 0x08	; 8
    5e88:	fc 01       	movw	r30, r24
    5e8a:	31 83       	std	Z+1, r19	; 0x01
    5e8c:	20 83       	st	Z, r18
    5e8e:	12 82       	std	Z+2, r1	; 0x02
    5e90:	13 82       	std	Z+3, r1	; 0x03
    5e92:	14 82       	std	Z+4, r1	; 0x04
    5e94:	15 82       	std	Z+5, r1	; 0x05
    5e96:	08 95       	ret

00005e98 <_ZN9IPAddressC1Ehhhh>:
    5e98:	0f 93       	push	r16
    5e9a:	fc 01       	movw	r30, r24
    5e9c:	85 e4       	ldi	r24, 0x45	; 69
    5e9e:	98 e0       	ldi	r25, 0x08	; 8
    5ea0:	91 83       	std	Z+1, r25	; 0x01
    5ea2:	80 83       	st	Z, r24
    5ea4:	62 83       	std	Z+2, r22	; 0x02
    5ea6:	43 83       	std	Z+3, r20	; 0x03
    5ea8:	24 83       	std	Z+4, r18	; 0x04
    5eaa:	05 83       	std	Z+5, r16	; 0x05
    5eac:	0f 91       	pop	r16
    5eae:	08 95       	ret

00005eb0 <_ZN9IPAddressaSEPKh>:

IPAddress& IPAddress::operator=(const uint8_t *address)
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
    5eb0:	dc 01       	movw	r26, r24
    5eb2:	12 96       	adiw	r26, 0x02	; 2
    5eb4:	24 e0       	ldi	r18, 0x04	; 4
    5eb6:	fb 01       	movw	r30, r22
    5eb8:	01 90       	ld	r0, Z+
    5eba:	0d 92       	st	X+, r0
    5ebc:	2a 95       	dec	r18
    5ebe:	e1 f7       	brne	.-8      	; 0x5eb8 <_ZN9IPAddressaSEPKh+0x8>
    return *this;
}
    5ec0:	08 95       	ret

00005ec2 <initVariant>:
    5ec2:	08 95       	ret

00005ec4 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    5ec4:	df d1       	rcall	.+958    	; 0x6284 <init>

	initVariant();
    5ec6:	fd df       	rcall	.-6      	; 0x5ec2 <initVariant>
    5ec8:	0e 94 b8 12 	call	0x2570	; 0x2570 <setup>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    5ecc:	c0 ea       	ldi	r28, 0xA0	; 160
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    5ece:	d5 e3       	ldi	r29, 0x35	; 53
    5ed0:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <loop>
#endif
	
	setup();
    
	for (;;) {
		loop();
    5ed4:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
    5ed6:	e1 f3       	breq	.-8      	; 0x5ed0 <main+0xc>
    5ed8:	33 d6       	rcall	.+3174   	; 0x6b40 <_Z14serialEventRunv>
    5eda:	fa cf       	rjmp	.-12     	; 0x5ed0 <main+0xc>

00005edc <_ZN5Print5writeEPKhj>:
    5edc:	cf 92       	push	r12
size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    5ede:	df 92       	push	r13
    5ee0:	ef 92       	push	r14
    5ee2:	ff 92       	push	r15
    5ee4:	0f 93       	push	r16
    5ee6:	1f 93       	push	r17
    5ee8:	cf 93       	push	r28
    5eea:	df 93       	push	r29
    5eec:	6c 01       	movw	r12, r24
    5eee:	7a 01       	movw	r14, r20
    5ef0:	8b 01       	movw	r16, r22
    5ef2:	c0 e0       	ldi	r28, 0x00	; 0
    5ef4:	d0 e0       	ldi	r29, 0x00	; 0
    5ef6:	ce 15       	cp	r28, r14
    5ef8:	df 05       	cpc	r29, r15
    5efa:	81 f0       	breq	.+32     	; 0x5f1c <_ZN5Print5writeEPKhj+0x40>
    5efc:	d8 01       	movw	r26, r16
    5efe:	6d 91       	ld	r22, X+
    5f00:	8d 01       	movw	r16, r26
    5f02:	d6 01       	movw	r26, r12
    5f04:	ed 91       	ld	r30, X+
    5f06:	fc 91       	ld	r31, X
    5f08:	01 90       	ld	r0, Z+
    5f0a:	f0 81       	ld	r31, Z
    5f0c:	e0 2d       	mov	r30, r0
    5f0e:	c6 01       	movw	r24, r12
    5f10:	09 95       	icall
    5f12:	89 2b       	or	r24, r25
    5f14:	11 f0       	breq	.+4      	; 0x5f1a <_ZN5Print5writeEPKhj+0x3e>
    5f16:	21 96       	adiw	r28, 0x01	; 1
    5f18:	ee cf       	rjmp	.-36     	; 0x5ef6 <_ZN5Print5writeEPKhj+0x1a>
    5f1a:	7e 01       	movw	r14, r28
    5f1c:	c7 01       	movw	r24, r14
    5f1e:	df 91       	pop	r29
    5f20:	cf 91       	pop	r28
    5f22:	1f 91       	pop	r17
    5f24:	0f 91       	pop	r16
    5f26:	ff 90       	pop	r15
    5f28:	ef 90       	pop	r14
    5f2a:	df 90       	pop	r13
    5f2c:	cf 90       	pop	r12
    5f2e:	08 95       	ret

00005f30 <_ZN5Print5writeEPKc>:
    5f30:	61 15       	cp	r22, r1
    5f32:	71 05       	cpc	r23, r1
    5f34:	79 f0       	breq	.+30     	; 0x5f54 <_ZN5Print5writeEPKc+0x24>
    5f36:	fb 01       	movw	r30, r22
    5f38:	01 90       	ld	r0, Z+
    5f3a:	00 20       	and	r0, r0
    5f3c:	e9 f7       	brne	.-6      	; 0x5f38 <_ZN5Print5writeEPKc+0x8>
    5f3e:	31 97       	sbiw	r30, 0x01	; 1
    5f40:	af 01       	movw	r20, r30
    5f42:	46 1b       	sub	r20, r22
    5f44:	57 0b       	sbc	r21, r23
    5f46:	dc 01       	movw	r26, r24
    5f48:	ed 91       	ld	r30, X+
    5f4a:	fc 91       	ld	r31, X
    5f4c:	02 80       	ldd	r0, Z+2	; 0x02
    5f4e:	f3 81       	ldd	r31, Z+3	; 0x03
    5f50:	e0 2d       	mov	r30, r0
    5f52:	09 94       	ijmp
    5f54:	80 e0       	ldi	r24, 0x00	; 0
    5f56:	90 e0       	ldi	r25, 0x00	; 0
    5f58:	08 95       	ret

00005f5a <_ZN5Print5printEPK19__FlashStringHelper>:
    5f5a:	ef 92       	push	r14
    5f5c:	ff 92       	push	r15
    5f5e:	0f 93       	push	r16
    5f60:	1f 93       	push	r17
    5f62:	cf 93       	push	r28
    5f64:	df 93       	push	r29
    5f66:	8c 01       	movw	r16, r24
    5f68:	7b 01       	movw	r14, r22
    5f6a:	c0 e0       	ldi	r28, 0x00	; 0
    5f6c:	d0 e0       	ldi	r29, 0x00	; 0
    5f6e:	f7 01       	movw	r30, r14
    5f70:	ec 0f       	add	r30, r28
    5f72:	fd 1f       	adc	r31, r29
    5f74:	64 91       	lpm	r22, Z
    5f76:	66 23       	and	r22, r22
    5f78:	61 f0       	breq	.+24     	; 0x5f92 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    5f7a:	d8 01       	movw	r26, r16
    5f7c:	ed 91       	ld	r30, X+
    5f7e:	fc 91       	ld	r31, X
    5f80:	01 90       	ld	r0, Z+
    5f82:	f0 81       	ld	r31, Z
    5f84:	e0 2d       	mov	r30, r0
    5f86:	c8 01       	movw	r24, r16
    5f88:	09 95       	icall
    5f8a:	89 2b       	or	r24, r25
    5f8c:	11 f0       	breq	.+4      	; 0x5f92 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    5f8e:	21 96       	adiw	r28, 0x01	; 1
    5f90:	ee cf       	rjmp	.-36     	; 0x5f6e <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    5f92:	ce 01       	movw	r24, r28
    5f94:	df 91       	pop	r29
    5f96:	cf 91       	pop	r28
    5f98:	1f 91       	pop	r17
    5f9a:	0f 91       	pop	r16
    5f9c:	ff 90       	pop	r15
    5f9e:	ef 90       	pop	r14
    5fa0:	08 95       	ret

00005fa2 <_ZN5Print5printERK6String>:
    5fa2:	db 01       	movw	r26, r22
    5fa4:	14 96       	adiw	r26, 0x04	; 4
    5fa6:	4d 91       	ld	r20, X+
    5fa8:	5c 91       	ld	r21, X
    5faa:	15 97       	sbiw	r26, 0x05	; 5
    5fac:	6d 91       	ld	r22, X+
    5fae:	7c 91       	ld	r23, X
    5fb0:	dc 01       	movw	r26, r24
    5fb2:	ed 91       	ld	r30, X+
    5fb4:	fc 91       	ld	r31, X
    5fb6:	02 80       	ldd	r0, Z+2	; 0x02
    5fb8:	f3 81       	ldd	r31, Z+3	; 0x03
    5fba:	e0 2d       	mov	r30, r0
    5fbc:	09 94       	ijmp

00005fbe <_ZN5Print5printEPKc>:
    5fbe:	b8 cf       	rjmp	.-144    	; 0x5f30 <_ZN5Print5writeEPKc>

00005fc0 <_ZN5Print5printEc>:
    5fc0:	dc 01       	movw	r26, r24
    5fc2:	ed 91       	ld	r30, X+
    5fc4:	fc 91       	ld	r31, X
    5fc6:	01 90       	ld	r0, Z+
    5fc8:	f0 81       	ld	r31, Z
    5fca:	e0 2d       	mov	r30, r0
    5fcc:	09 94       	ijmp

00005fce <_ZN5Print7printlnEv>:
    5fce:	6f e3       	ldi	r22, 0x3F	; 63
    5fd0:	74 e0       	ldi	r23, 0x04	; 4
    5fd2:	ae cf       	rjmp	.-164    	; 0x5f30 <_ZN5Print5writeEPKc>

00005fd4 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    5fd4:	0f 93       	push	r16
    5fd6:	1f 93       	push	r17
    5fd8:	cf 93       	push	r28
    5fda:	df 93       	push	r29
    5fdc:	ec 01       	movw	r28, r24
    5fde:	bd df       	rcall	.-134    	; 0x5f5a <_ZN5Print5printEPK19__FlashStringHelper>
    5fe0:	8c 01       	movw	r16, r24
    5fe2:	ce 01       	movw	r24, r28
    5fe4:	f4 df       	rcall	.-24     	; 0x5fce <_ZN5Print7printlnEv>
    5fe6:	80 0f       	add	r24, r16
    5fe8:	91 1f       	adc	r25, r17
    5fea:	df 91       	pop	r29
    5fec:	cf 91       	pop	r28
    5fee:	1f 91       	pop	r17
    5ff0:	0f 91       	pop	r16
    5ff2:	08 95       	ret

00005ff4 <_ZN5Print7printlnERK6String>:
    5ff4:	0f 93       	push	r16
    5ff6:	1f 93       	push	r17
    5ff8:	cf 93       	push	r28
    5ffa:	df 93       	push	r29
    5ffc:	ec 01       	movw	r28, r24
    5ffe:	d1 df       	rcall	.-94     	; 0x5fa2 <_ZN5Print5printERK6String>
    6000:	8c 01       	movw	r16, r24
    6002:	ce 01       	movw	r24, r28
    6004:	e4 df       	rcall	.-56     	; 0x5fce <_ZN5Print7printlnEv>
    6006:	80 0f       	add	r24, r16
    6008:	91 1f       	adc	r25, r17
    600a:	df 91       	pop	r29
    600c:	cf 91       	pop	r28
    600e:	1f 91       	pop	r17
    6010:	0f 91       	pop	r16
    6012:	08 95       	ret

00006014 <_ZN5Print7printlnEPKc>:
    6014:	0f 93       	push	r16
    6016:	1f 93       	push	r17
    6018:	cf 93       	push	r28
    601a:	df 93       	push	r29
    601c:	ec 01       	movw	r28, r24
    601e:	88 df       	rcall	.-240    	; 0x5f30 <_ZN5Print5writeEPKc>
    6020:	8c 01       	movw	r16, r24
    6022:	ce 01       	movw	r24, r28
    6024:	d4 df       	rcall	.-88     	; 0x5fce <_ZN5Print7printlnEv>
    6026:	80 0f       	add	r24, r16
    6028:	91 1f       	adc	r25, r17
    602a:	df 91       	pop	r29
    602c:	cf 91       	pop	r28
    602e:	1f 91       	pop	r17
    6030:	0f 91       	pop	r16
    6032:	08 95       	ret

00006034 <_ZN5Print11printNumberEmh>:
    6034:	8f 92       	push	r8
    6036:	9f 92       	push	r9
    6038:	af 92       	push	r10
    603a:	bf 92       	push	r11
    603c:	ef 92       	push	r14
    603e:	ff 92       	push	r15
    6040:	0f 93       	push	r16
    6042:	1f 93       	push	r17
    6044:	cf 93       	push	r28
    6046:	df 93       	push	r29
    6048:	cd b7       	in	r28, 0x3d	; 61
    604a:	de b7       	in	r29, 0x3e	; 62
    604c:	a1 97       	sbiw	r28, 0x21	; 33
    604e:	0f b6       	in	r0, 0x3f	; 63
    6050:	f8 94       	cli
    6052:	de bf       	out	0x3e, r29	; 62
    6054:	0f be       	out	0x3f, r0	; 63
    6056:	cd bf       	out	0x3d, r28	; 61
    6058:	7c 01       	movw	r14, r24
    605a:	fa 01       	movw	r30, r20
    605c:	cb 01       	movw	r24, r22
    605e:	19 a2       	std	Y+33, r1	; 0x21
    6060:	22 30       	cpi	r18, 0x02	; 2
    6062:	08 f4       	brcc	.+2      	; 0x6066 <_ZN5Print11printNumberEmh+0x32>
    6064:	2a e0       	ldi	r18, 0x0A	; 10
    6066:	8e 01       	movw	r16, r28
    6068:	0f 5d       	subi	r16, 0xDF	; 223
    606a:	1f 4f       	sbci	r17, 0xFF	; 255
    606c:	82 2e       	mov	r8, r18
    606e:	91 2c       	mov	r9, r1
    6070:	a1 2c       	mov	r10, r1
    6072:	b1 2c       	mov	r11, r1
    6074:	bf 01       	movw	r22, r30
    6076:	a5 01       	movw	r20, r10
    6078:	94 01       	movw	r18, r8
    607a:	1f d6       	rcall	.+3134   	; 0x6cba <__udivmodsi4>
    607c:	f9 01       	movw	r30, r18
    607e:	ca 01       	movw	r24, r20
    6080:	01 50       	subi	r16, 0x01	; 1
    6082:	11 09       	sbc	r17, r1
    6084:	6a 30       	cpi	r22, 0x0A	; 10
    6086:	10 f4       	brcc	.+4      	; 0x608c <_ZN5Print11printNumberEmh+0x58>
    6088:	60 5d       	subi	r22, 0xD0	; 208
    608a:	01 c0       	rjmp	.+2      	; 0x608e <_ZN5Print11printNumberEmh+0x5a>
    608c:	69 5c       	subi	r22, 0xC9	; 201
    608e:	d8 01       	movw	r26, r16
    6090:	6c 93       	st	X, r22
    6092:	23 2b       	or	r18, r19
    6094:	24 2b       	or	r18, r20
    6096:	25 2b       	or	r18, r21
    6098:	69 f7       	brne	.-38     	; 0x6074 <_ZN5Print11printNumberEmh+0x40>
    609a:	b8 01       	movw	r22, r16
    609c:	c7 01       	movw	r24, r14
    609e:	48 df       	rcall	.-368    	; 0x5f30 <_ZN5Print5writeEPKc>
    60a0:	a1 96       	adiw	r28, 0x21	; 33
    60a2:	0f b6       	in	r0, 0x3f	; 63
    60a4:	f8 94       	cli
    60a6:	de bf       	out	0x3e, r29	; 62
    60a8:	0f be       	out	0x3f, r0	; 63
    60aa:	cd bf       	out	0x3d, r28	; 61
    60ac:	df 91       	pop	r29
    60ae:	cf 91       	pop	r28
    60b0:	1f 91       	pop	r17
    60b2:	0f 91       	pop	r16
    60b4:	ff 90       	pop	r15
    60b6:	ef 90       	pop	r14
    60b8:	bf 90       	pop	r11
    60ba:	af 90       	pop	r10
    60bc:	9f 90       	pop	r9
    60be:	8f 90       	pop	r8
    60c0:	08 95       	ret

000060c2 <_ZN5Print5printEmi>:
    60c2:	21 15       	cp	r18, r1
    60c4:	31 05       	cpc	r19, r1
    60c6:	41 f4       	brne	.+16     	; 0x60d8 <_ZN5Print5printEmi+0x16>
    60c8:	dc 01       	movw	r26, r24
    60ca:	ed 91       	ld	r30, X+
    60cc:	fc 91       	ld	r31, X
    60ce:	01 90       	ld	r0, Z+
    60d0:	f0 81       	ld	r31, Z
    60d2:	e0 2d       	mov	r30, r0
    60d4:	64 2f       	mov	r22, r20
    60d6:	09 94       	ijmp
    60d8:	ad cf       	rjmp	.-166    	; 0x6034 <_ZN5Print11printNumberEmh>

000060da <_ZN5Print5printEhi>:
    60da:	9a 01       	movw	r18, r20
    60dc:	46 2f       	mov	r20, r22
    60de:	50 e0       	ldi	r21, 0x00	; 0
    60e0:	60 e0       	ldi	r22, 0x00	; 0
    60e2:	70 e0       	ldi	r23, 0x00	; 0
    60e4:	ee cf       	rjmp	.-36     	; 0x60c2 <_ZN5Print5printEmi>

000060e6 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    60e6:	0f 93       	push	r16
    60e8:	1f 93       	push	r17
    60ea:	cf 93       	push	r28
    60ec:	df 93       	push	r29
    60ee:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    60f0:	e8 df       	rcall	.-48     	; 0x60c2 <_ZN5Print5printEmi>
    60f2:	8c 01       	movw	r16, r24
  n += println();
    60f4:	ce 01       	movw	r24, r28
    60f6:	6b df       	rcall	.-298    	; 0x5fce <_ZN5Print7printlnEv>
  return n;
}
    60f8:	80 0f       	add	r24, r16
    60fa:	91 1f       	adc	r25, r17
    60fc:	df 91       	pop	r29
    60fe:	cf 91       	pop	r28
    6100:	1f 91       	pop	r17
    6102:	0f 91       	pop	r16
    6104:	08 95       	ret

00006106 <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    6106:	1f 92       	push	r1
    6108:	0f 92       	push	r0
    610a:	0f b6       	in	r0, 0x3f	; 63
    610c:	0f 92       	push	r0
    610e:	11 24       	eor	r1, r1
    6110:	2f 93       	push	r18
    6112:	3f 93       	push	r19
    6114:	8f 93       	push	r24
    6116:	9f 93       	push	r25
    6118:	af 93       	push	r26
    611a:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    611c:	80 91 6d 0b 	lds	r24, 0x0B6D	; 0x800b6d <timer0_millis>
    6120:	90 91 6e 0b 	lds	r25, 0x0B6E	; 0x800b6e <timer0_millis+0x1>
    6124:	a0 91 6f 0b 	lds	r26, 0x0B6F	; 0x800b6f <timer0_millis+0x2>
    6128:	b0 91 70 0b 	lds	r27, 0x0B70	; 0x800b70 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    612c:	30 91 6c 0b 	lds	r19, 0x0B6C	; 0x800b6c <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    6130:	23 e0       	ldi	r18, 0x03	; 3
    6132:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    6134:	2d 37       	cpi	r18, 0x7D	; 125
    6136:	20 f4       	brcc	.+8      	; 0x6140 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    6138:	01 96       	adiw	r24, 0x01	; 1
    613a:	a1 1d       	adc	r26, r1
    613c:	b1 1d       	adc	r27, r1
    613e:	05 c0       	rjmp	.+10     	; 0x614a <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    6140:	26 e8       	ldi	r18, 0x86	; 134
    6142:	23 0f       	add	r18, r19
		m += 1;
    6144:	02 96       	adiw	r24, 0x02	; 2
    6146:	a1 1d       	adc	r26, r1
    6148:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    614a:	20 93 6c 0b 	sts	0x0B6C, r18	; 0x800b6c <timer0_fract>
	timer0_millis = m;
    614e:	80 93 6d 0b 	sts	0x0B6D, r24	; 0x800b6d <timer0_millis>
    6152:	90 93 6e 0b 	sts	0x0B6E, r25	; 0x800b6e <timer0_millis+0x1>
    6156:	a0 93 6f 0b 	sts	0x0B6F, r26	; 0x800b6f <timer0_millis+0x2>
    615a:	b0 93 70 0b 	sts	0x0B70, r27	; 0x800b70 <timer0_millis+0x3>
	timer0_overflow_count++;
    615e:	80 91 71 0b 	lds	r24, 0x0B71	; 0x800b71 <timer0_overflow_count>
    6162:	90 91 72 0b 	lds	r25, 0x0B72	; 0x800b72 <timer0_overflow_count+0x1>
    6166:	a0 91 73 0b 	lds	r26, 0x0B73	; 0x800b73 <timer0_overflow_count+0x2>
    616a:	b0 91 74 0b 	lds	r27, 0x0B74	; 0x800b74 <timer0_overflow_count+0x3>
    616e:	01 96       	adiw	r24, 0x01	; 1
    6170:	a1 1d       	adc	r26, r1
    6172:	b1 1d       	adc	r27, r1
    6174:	80 93 71 0b 	sts	0x0B71, r24	; 0x800b71 <timer0_overflow_count>
    6178:	90 93 72 0b 	sts	0x0B72, r25	; 0x800b72 <timer0_overflow_count+0x1>
    617c:	a0 93 73 0b 	sts	0x0B73, r26	; 0x800b73 <timer0_overflow_count+0x2>
    6180:	b0 93 74 0b 	sts	0x0B74, r27	; 0x800b74 <timer0_overflow_count+0x3>
}
    6184:	bf 91       	pop	r27
    6186:	af 91       	pop	r26
    6188:	9f 91       	pop	r25
    618a:	8f 91       	pop	r24
    618c:	3f 91       	pop	r19
    618e:	2f 91       	pop	r18
    6190:	0f 90       	pop	r0
    6192:	0f be       	out	0x3f, r0	; 63
    6194:	0f 90       	pop	r0
    6196:	1f 90       	pop	r1
    6198:	18 95       	reti

0000619a <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    619a:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    619c:	f8 94       	cli
	m = timer0_millis;
    619e:	60 91 6d 0b 	lds	r22, 0x0B6D	; 0x800b6d <timer0_millis>
    61a2:	70 91 6e 0b 	lds	r23, 0x0B6E	; 0x800b6e <timer0_millis+0x1>
    61a6:	80 91 6f 0b 	lds	r24, 0x0B6F	; 0x800b6f <timer0_millis+0x2>
    61aa:	90 91 70 0b 	lds	r25, 0x0B70	; 0x800b70 <timer0_millis+0x3>
	SREG = oldSREG;
    61ae:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    61b0:	08 95       	ret

000061b2 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    61b2:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    61b4:	f8 94       	cli
	m = timer0_overflow_count;
    61b6:	80 91 71 0b 	lds	r24, 0x0B71	; 0x800b71 <timer0_overflow_count>
    61ba:	90 91 72 0b 	lds	r25, 0x0B72	; 0x800b72 <timer0_overflow_count+0x1>
    61be:	a0 91 73 0b 	lds	r26, 0x0B73	; 0x800b73 <timer0_overflow_count+0x2>
    61c2:	b0 91 74 0b 	lds	r27, 0x0B74	; 0x800b74 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    61c6:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    61c8:	a8 9b       	sbis	0x15, 0	; 21
    61ca:	05 c0       	rjmp	.+10     	; 0x61d6 <micros+0x24>
    61cc:	2f 3f       	cpi	r18, 0xFF	; 255
    61ce:	19 f0       	breq	.+6      	; 0x61d6 <micros+0x24>
		m++;
    61d0:	01 96       	adiw	r24, 0x01	; 1
    61d2:	a1 1d       	adc	r26, r1
    61d4:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    61d6:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    61d8:	ba 2f       	mov	r27, r26
    61da:	a9 2f       	mov	r26, r25
    61dc:	98 2f       	mov	r25, r24
    61de:	88 27       	eor	r24, r24
    61e0:	82 0f       	add	r24, r18
    61e2:	91 1d       	adc	r25, r1
    61e4:	a1 1d       	adc	r26, r1
    61e6:	b1 1d       	adc	r27, r1
    61e8:	bc 01       	movw	r22, r24
    61ea:	cd 01       	movw	r24, r26
    61ec:	42 e0       	ldi	r20, 0x02	; 2
    61ee:	66 0f       	add	r22, r22
    61f0:	77 1f       	adc	r23, r23
    61f2:	88 1f       	adc	r24, r24
    61f4:	99 1f       	adc	r25, r25
    61f6:	4a 95       	dec	r20
    61f8:	d1 f7       	brne	.-12     	; 0x61ee <micros+0x3c>
}
    61fa:	08 95       	ret

000061fc <delay>:

void delay(unsigned long ms)
{
    61fc:	8f 92       	push	r8
    61fe:	9f 92       	push	r9
    6200:	af 92       	push	r10
    6202:	bf 92       	push	r11
    6204:	cf 92       	push	r12
    6206:	df 92       	push	r13
    6208:	ef 92       	push	r14
    620a:	ff 92       	push	r15
    620c:	6b 01       	movw	r12, r22
    620e:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    6210:	d0 df       	rcall	.-96     	; 0x61b2 <micros>
    6212:	4b 01       	movw	r8, r22
    6214:	5c 01       	movw	r10, r24

	while (ms > 0) {
    6216:	c1 14       	cp	r12, r1
    6218:	d1 04       	cpc	r13, r1
    621a:	e1 04       	cpc	r14, r1
    621c:	f1 04       	cpc	r15, r1
		yield();
    621e:	f1 f0       	breq	.+60     	; 0x625c <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    6220:	2b d5       	rcall	.+2646   	; 0x6c78 <yield>
    6222:	c7 df       	rcall	.-114    	; 0x61b2 <micros>
    6224:	dc 01       	movw	r26, r24
    6226:	cb 01       	movw	r24, r22
    6228:	88 19       	sub	r24, r8
    622a:	99 09       	sbc	r25, r9
    622c:	aa 09       	sbc	r26, r10
    622e:	bb 09       	sbc	r27, r11
    6230:	88 3e       	cpi	r24, 0xE8	; 232
    6232:	93 40       	sbci	r25, 0x03	; 3
    6234:	a1 05       	cpc	r26, r1
    6236:	b1 05       	cpc	r27, r1
    6238:	70 f3       	brcs	.-36     	; 0x6216 <delay+0x1a>
			ms--;
    623a:	21 e0       	ldi	r18, 0x01	; 1
    623c:	c2 1a       	sub	r12, r18
    623e:	d1 08       	sbc	r13, r1
    6240:	e1 08       	sbc	r14, r1
    6242:	f1 08       	sbc	r15, r1
			start += 1000;
    6244:	88 ee       	ldi	r24, 0xE8	; 232
    6246:	88 0e       	add	r8, r24
    6248:	83 e0       	ldi	r24, 0x03	; 3
    624a:	98 1e       	adc	r9, r24
    624c:	a1 1c       	adc	r10, r1
    624e:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    6250:	c1 14       	cp	r12, r1
    6252:	d1 04       	cpc	r13, r1
    6254:	e1 04       	cpc	r14, r1
    6256:	f1 04       	cpc	r15, r1
    6258:	21 f7       	brne	.-56     	; 0x6222 <delay+0x26>
    625a:	dd cf       	rjmp	.-70     	; 0x6216 <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    625c:	ff 90       	pop	r15
    625e:	ef 90       	pop	r14
    6260:	df 90       	pop	r13
    6262:	cf 90       	pop	r12
    6264:	bf 90       	pop	r11
    6266:	af 90       	pop	r10
    6268:	9f 90       	pop	r9
    626a:	8f 90       	pop	r8
    626c:	08 95       	ret

0000626e <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    626e:	82 30       	cpi	r24, 0x02	; 2
    6270:	91 05       	cpc	r25, r1
    6272:	38 f0       	brcs	.+14     	; 0x6282 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    6274:	88 0f       	add	r24, r24
    6276:	99 1f       	adc	r25, r25
    6278:	88 0f       	add	r24, r24
    627a:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    627c:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    627e:	01 97       	sbiw	r24, 0x01	; 1
    6280:	f1 f7       	brne	.-4      	; 0x627e <delayMicroseconds+0x10>
    6282:	08 95       	ret

00006284 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    6284:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    6286:	84 b5       	in	r24, 0x24	; 36
    6288:	82 60       	ori	r24, 0x02	; 2
    628a:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    628c:	84 b5       	in	r24, 0x24	; 36
    628e:	81 60       	ori	r24, 0x01	; 1
    6290:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    6292:	85 b5       	in	r24, 0x25	; 37
    6294:	82 60       	ori	r24, 0x02	; 2
    6296:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    6298:	85 b5       	in	r24, 0x25	; 37
    629a:	81 60       	ori	r24, 0x01	; 1
    629c:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    629e:	ee e6       	ldi	r30, 0x6E	; 110
    62a0:	f0 e0       	ldi	r31, 0x00	; 0
    62a2:	80 81       	ld	r24, Z
    62a4:	81 60       	ori	r24, 0x01	; 1
    62a6:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    62a8:	e1 e8       	ldi	r30, 0x81	; 129
    62aa:	f0 e0       	ldi	r31, 0x00	; 0
    62ac:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    62ae:	80 81       	ld	r24, Z
    62b0:	82 60       	ori	r24, 0x02	; 2
    62b2:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    62b4:	80 81       	ld	r24, Z
    62b6:	81 60       	ori	r24, 0x01	; 1
    62b8:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    62ba:	e0 e8       	ldi	r30, 0x80	; 128
    62bc:	f0 e0       	ldi	r31, 0x00	; 0
    62be:	80 81       	ld	r24, Z
    62c0:	81 60       	ori	r24, 0x01	; 1
    62c2:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    62c4:	e1 eb       	ldi	r30, 0xB1	; 177
    62c6:	f0 e0       	ldi	r31, 0x00	; 0
    62c8:	80 81       	ld	r24, Z
    62ca:	84 60       	ori	r24, 0x04	; 4
    62cc:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    62ce:	e0 eb       	ldi	r30, 0xB0	; 176
    62d0:	f0 e0       	ldi	r31, 0x00	; 0
    62d2:	80 81       	ld	r24, Z
    62d4:	81 60       	ori	r24, 0x01	; 1
    62d6:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    62d8:	ea e7       	ldi	r30, 0x7A	; 122
    62da:	f0 e0       	ldi	r31, 0x00	; 0
    62dc:	80 81       	ld	r24, Z
    62de:	84 60       	ori	r24, 0x04	; 4
    62e0:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    62e2:	80 81       	ld	r24, Z
    62e4:	82 60       	ori	r24, 0x02	; 2
    62e6:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    62e8:	80 81       	ld	r24, Z
    62ea:	81 60       	ori	r24, 0x01	; 1
    62ec:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    62ee:	80 81       	ld	r24, Z
    62f0:	80 68       	ori	r24, 0x80	; 128
    62f2:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    62f4:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    62f8:	08 95       	ret

000062fa <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    62fa:	83 30       	cpi	r24, 0x03	; 3
    62fc:	81 f0       	breq	.+32     	; 0x631e <turnOffPWM+0x24>
    62fe:	28 f4       	brcc	.+10     	; 0x630a <turnOffPWM+0x10>
    6300:	81 30       	cpi	r24, 0x01	; 1
    6302:	99 f0       	breq	.+38     	; 0x632a <turnOffPWM+0x30>
    6304:	82 30       	cpi	r24, 0x02	; 2
    6306:	a1 f0       	breq	.+40     	; 0x6330 <turnOffPWM+0x36>
    6308:	08 95       	ret
    630a:	87 30       	cpi	r24, 0x07	; 7
    630c:	a9 f0       	breq	.+42     	; 0x6338 <turnOffPWM+0x3e>
    630e:	88 30       	cpi	r24, 0x08	; 8
    6310:	b9 f0       	breq	.+46     	; 0x6340 <turnOffPWM+0x46>
    6312:	84 30       	cpi	r24, 0x04	; 4
    6314:	d1 f4       	brne	.+52     	; 0x634a <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    6316:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    631a:	8f 7d       	andi	r24, 0xDF	; 223
    631c:	03 c0       	rjmp	.+6      	; 0x6324 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    631e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    6322:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    6324:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    6328:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    632a:	84 b5       	in	r24, 0x24	; 36
    632c:	8f 77       	andi	r24, 0x7F	; 127
    632e:	02 c0       	rjmp	.+4      	; 0x6334 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    6330:	84 b5       	in	r24, 0x24	; 36
    6332:	8f 7d       	andi	r24, 0xDF	; 223
    6334:	84 bd       	out	0x24, r24	; 36
    6336:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    6338:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    633c:	8f 77       	andi	r24, 0x7F	; 127
    633e:	03 c0       	rjmp	.+6      	; 0x6346 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    6340:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    6344:	8f 7d       	andi	r24, 0xDF	; 223
    6346:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    634a:	08 95       	ret

0000634c <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    634c:	cf 93       	push	r28
    634e:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    6350:	90 e0       	ldi	r25, 0x00	; 0
    6352:	fc 01       	movw	r30, r24
    6354:	ee 5a       	subi	r30, 0xAE	; 174
    6356:	fd 4f       	sbci	r31, 0xFD	; 253
    6358:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    635a:	fc 01       	movw	r30, r24
    635c:	ee 58       	subi	r30, 0x8E	; 142
    635e:	fd 4f       	sbci	r31, 0xFD	; 253
    6360:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    6362:	88 23       	and	r24, r24
    6364:	61 f1       	breq	.+88     	; 0x63be <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    6366:	90 e0       	ldi	r25, 0x00	; 0
    6368:	88 0f       	add	r24, r24
    636a:	99 1f       	adc	r25, r25
    636c:	fc 01       	movw	r30, r24
    636e:	ea 55       	subi	r30, 0x5A	; 90
    6370:	fd 4f       	sbci	r31, 0xFD	; 253
    6372:	c5 91       	lpm	r28, Z+
    6374:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    6376:	fc 01       	movw	r30, r24
    6378:	e4 56       	subi	r30, 0x64	; 100
    637a:	fd 4f       	sbci	r31, 0xFD	; 253
    637c:	a5 91       	lpm	r26, Z+
    637e:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    6380:	61 11       	cpse	r22, r1
    6382:	09 c0       	rjmp	.+18     	; 0x6396 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    6384:	9f b7       	in	r25, 0x3f	; 63
                cli();
    6386:	f8 94       	cli
		*reg &= ~bit;
    6388:	88 81       	ld	r24, Y
    638a:	20 95       	com	r18
    638c:	82 23       	and	r24, r18
    638e:	88 83       	st	Y, r24
		*out &= ~bit;
    6390:	ec 91       	ld	r30, X
    6392:	2e 23       	and	r18, r30
    6394:	0b c0       	rjmp	.+22     	; 0x63ac <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    6396:	62 30       	cpi	r22, 0x02	; 2
    6398:	61 f4       	brne	.+24     	; 0x63b2 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    639a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    639c:	f8 94       	cli
		*reg &= ~bit;
    639e:	88 81       	ld	r24, Y
    63a0:	32 2f       	mov	r19, r18
    63a2:	30 95       	com	r19
    63a4:	83 23       	and	r24, r19
    63a6:	88 83       	st	Y, r24
		*out |= bit;
    63a8:	ec 91       	ld	r30, X
    63aa:	2e 2b       	or	r18, r30
    63ac:	2c 93       	st	X, r18
		SREG = oldSREG;
    63ae:	9f bf       	out	0x3f, r25	; 63
    63b0:	06 c0       	rjmp	.+12     	; 0x63be <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    63b2:	8f b7       	in	r24, 0x3f	; 63
                cli();
    63b4:	f8 94       	cli
		*reg |= bit;
    63b6:	e8 81       	ld	r30, Y
    63b8:	2e 2b       	or	r18, r30
    63ba:	28 83       	st	Y, r18
		SREG = oldSREG;
    63bc:	8f bf       	out	0x3f, r24	; 63
	}
}
    63be:	df 91       	pop	r29
    63c0:	cf 91       	pop	r28
    63c2:	08 95       	ret

000063c4 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    63c4:	1f 93       	push	r17
    63c6:	cf 93       	push	r28
    63c8:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    63ca:	28 2f       	mov	r18, r24
    63cc:	30 e0       	ldi	r19, 0x00	; 0
    63ce:	f9 01       	movw	r30, r18
    63d0:	ee 5c       	subi	r30, 0xCE	; 206
    63d2:	fd 4f       	sbci	r31, 0xFD	; 253
    63d4:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    63d6:	f9 01       	movw	r30, r18
    63d8:	ee 5a       	subi	r30, 0xAE	; 174
    63da:	fd 4f       	sbci	r31, 0xFD	; 253
    63dc:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    63de:	f9 01       	movw	r30, r18
    63e0:	ee 58       	subi	r30, 0x8E	; 142
    63e2:	fd 4f       	sbci	r31, 0xFD	; 253
    63e4:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    63e6:	cc 23       	and	r28, r28
    63e8:	b9 f0       	breq	.+46     	; 0x6418 <digitalWrite+0x54>
    63ea:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    63ec:	81 11       	cpse	r24, r1
    63ee:	85 df       	rcall	.-246    	; 0x62fa <turnOffPWM>

	out = portOutputRegister(port);
    63f0:	ec 2f       	mov	r30, r28
    63f2:	f0 e0       	ldi	r31, 0x00	; 0
    63f4:	ee 0f       	add	r30, r30
    63f6:	ff 1f       	adc	r31, r31
    63f8:	e4 56       	subi	r30, 0x64	; 100
    63fa:	fd 4f       	sbci	r31, 0xFD	; 253
    63fc:	a5 91       	lpm	r26, Z+
    63fe:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    6400:	9f b7       	in	r25, 0x3f	; 63
	cli();
    6402:	f8 94       	cli

	if (val == LOW) {
    6404:	11 11       	cpse	r17, r1
    6406:	04 c0       	rjmp	.+8      	; 0x6410 <digitalWrite+0x4c>
		*out &= ~bit;
    6408:	8c 91       	ld	r24, X
    640a:	d0 95       	com	r29
    640c:	d8 23       	and	r29, r24
    640e:	02 c0       	rjmp	.+4      	; 0x6414 <digitalWrite+0x50>
	} else {
		*out |= bit;
    6410:	ec 91       	ld	r30, X
    6412:	de 2b       	or	r29, r30
    6414:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    6416:	9f bf       	out	0x3f, r25	; 63
}
    6418:	df 91       	pop	r29
    641a:	cf 91       	pop	r28
    641c:	1f 91       	pop	r17
    641e:	08 95       	ret

00006420 <digitalRead>:

int digitalRead(uint8_t pin)
{
    6420:	cf 93       	push	r28
    6422:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    6424:	28 2f       	mov	r18, r24
    6426:	30 e0       	ldi	r19, 0x00	; 0
    6428:	f9 01       	movw	r30, r18
    642a:	ee 5c       	subi	r30, 0xCE	; 206
    642c:	fd 4f       	sbci	r31, 0xFD	; 253
    642e:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    6430:	f9 01       	movw	r30, r18
    6432:	ee 5a       	subi	r30, 0xAE	; 174
    6434:	fd 4f       	sbci	r31, 0xFD	; 253
    6436:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    6438:	f9 01       	movw	r30, r18
    643a:	ee 58       	subi	r30, 0x8E	; 142
    643c:	fd 4f       	sbci	r31, 0xFD	; 253
    643e:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    6440:	cc 23       	and	r28, r28
    6442:	89 f0       	breq	.+34     	; 0x6466 <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    6444:	81 11       	cpse	r24, r1
    6446:	59 df       	rcall	.-334    	; 0x62fa <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    6448:	ec 2f       	mov	r30, r28
    644a:	f0 e0       	ldi	r31, 0x00	; 0
    644c:	ee 0f       	add	r30, r30
    644e:	ff 1f       	adc	r31, r31
    6450:	ee 56       	subi	r30, 0x6E	; 110
    6452:	fd 4f       	sbci	r31, 0xFD	; 253
    6454:	a5 91       	lpm	r26, Z+
    6456:	b4 91       	lpm	r27, Z
    6458:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    645a:	ed 23       	and	r30, r29
    645c:	81 e0       	ldi	r24, 0x01	; 1
    645e:	90 e0       	ldi	r25, 0x00	; 0
    6460:	21 f4       	brne	.+8      	; 0x646a <digitalRead+0x4a>
    6462:	80 e0       	ldi	r24, 0x00	; 0
    6464:	02 c0       	rjmp	.+4      	; 0x646a <digitalRead+0x4a>
    6466:	80 e0       	ldi	r24, 0x00	; 0
    6468:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    646a:	df 91       	pop	r29
    646c:	cf 91       	pop	r28
    646e:	08 95       	ret

00006470 <_ZNK6String14StringIfHelperEv>:
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
		*p = toupper(*p);
	}
}
    6470:	08 95       	ret

00006472 <_ZN6StringD1Ev>:
    6472:	fc 01       	movw	r30, r24
    6474:	80 81       	ld	r24, Z
    6476:	91 81       	ldd	r25, Z+1	; 0x01
    6478:	1b c5       	rjmp	.+2614   	; 0x6eb0 <free>

0000647a <_ZN6String10invalidateEv>:
    647a:	cf 93       	push	r28
    647c:	df 93       	push	r29
    647e:	ec 01       	movw	r28, r24
    6480:	88 81       	ld	r24, Y
    6482:	99 81       	ldd	r25, Y+1	; 0x01
    6484:	00 97       	sbiw	r24, 0x00	; 0
    6486:	09 f0       	breq	.+2      	; 0x648a <_ZN6String10invalidateEv+0x10>
    6488:	13 d5       	rcall	.+2598   	; 0x6eb0 <free>
    648a:	19 82       	std	Y+1, r1	; 0x01
    648c:	18 82       	st	Y, r1
    648e:	1d 82       	std	Y+5, r1	; 0x05
    6490:	1c 82       	std	Y+4, r1	; 0x04
    6492:	1b 82       	std	Y+3, r1	; 0x03
    6494:	1a 82       	std	Y+2, r1	; 0x02
    6496:	df 91       	pop	r29
    6498:	cf 91       	pop	r28
    649a:	08 95       	ret

0000649c <_ZN6String12changeBufferEj>:
    649c:	0f 93       	push	r16
    649e:	1f 93       	push	r17
    64a0:	cf 93       	push	r28
    64a2:	df 93       	push	r29
    64a4:	ec 01       	movw	r28, r24
    64a6:	8b 01       	movw	r16, r22
    64a8:	6f 5f       	subi	r22, 0xFF	; 255
    64aa:	7f 4f       	sbci	r23, 0xFF	; 255
    64ac:	88 81       	ld	r24, Y
    64ae:	99 81       	ldd	r25, Y+1	; 0x01
    64b0:	88 d5       	rcall	.+2832   	; 0x6fc2 <realloc>
    64b2:	00 97       	sbiw	r24, 0x00	; 0
    64b4:	31 f0       	breq	.+12     	; 0x64c2 <_ZN6String12changeBufferEj+0x26>
    64b6:	99 83       	std	Y+1, r25	; 0x01
    64b8:	88 83       	st	Y, r24
    64ba:	1b 83       	std	Y+3, r17	; 0x03
    64bc:	0a 83       	std	Y+2, r16	; 0x02
    64be:	81 e0       	ldi	r24, 0x01	; 1
    64c0:	01 c0       	rjmp	.+2      	; 0x64c4 <_ZN6String12changeBufferEj+0x28>
    64c2:	80 e0       	ldi	r24, 0x00	; 0
    64c4:	df 91       	pop	r29
    64c6:	cf 91       	pop	r28
    64c8:	1f 91       	pop	r17
    64ca:	0f 91       	pop	r16
    64cc:	08 95       	ret

000064ce <_ZN6String7reserveEj>:
    64ce:	cf 93       	push	r28
    64d0:	df 93       	push	r29
    64d2:	ec 01       	movw	r28, r24
    64d4:	88 81       	ld	r24, Y
    64d6:	99 81       	ldd	r25, Y+1	; 0x01
    64d8:	89 2b       	or	r24, r25
    64da:	29 f0       	breq	.+10     	; 0x64e6 <_ZN6String7reserveEj+0x18>
    64dc:	8a 81       	ldd	r24, Y+2	; 0x02
    64de:	9b 81       	ldd	r25, Y+3	; 0x03
    64e0:	86 17       	cp	r24, r22
    64e2:	97 07       	cpc	r25, r23
    64e4:	58 f4       	brcc	.+22     	; 0x64fc <_ZN6String7reserveEj+0x2e>
    64e6:	ce 01       	movw	r24, r28
    64e8:	d9 df       	rcall	.-78     	; 0x649c <_ZN6String12changeBufferEj>
    64ea:	88 23       	and	r24, r24
    64ec:	41 f0       	breq	.+16     	; 0x64fe <_ZN6String7reserveEj+0x30>
    64ee:	8c 81       	ldd	r24, Y+4	; 0x04
    64f0:	9d 81       	ldd	r25, Y+5	; 0x05
    64f2:	89 2b       	or	r24, r25
    64f4:	19 f4       	brne	.+6      	; 0x64fc <_ZN6String7reserveEj+0x2e>
    64f6:	e8 81       	ld	r30, Y
    64f8:	f9 81       	ldd	r31, Y+1	; 0x01
    64fa:	10 82       	st	Z, r1
    64fc:	81 e0       	ldi	r24, 0x01	; 1
    64fe:	df 91       	pop	r29
    6500:	cf 91       	pop	r28
    6502:	08 95       	ret

00006504 <_ZN6String4copyEPKcj>:
    6504:	ef 92       	push	r14
    6506:	ff 92       	push	r15
    6508:	0f 93       	push	r16
    650a:	1f 93       	push	r17
    650c:	cf 93       	push	r28
    650e:	df 93       	push	r29
    6510:	ec 01       	movw	r28, r24
    6512:	7b 01       	movw	r14, r22
    6514:	8a 01       	movw	r16, r20
    6516:	ba 01       	movw	r22, r20
    6518:	da df       	rcall	.-76     	; 0x64ce <_ZN6String7reserveEj>
    651a:	81 11       	cpse	r24, r1
    651c:	03 c0       	rjmp	.+6      	; 0x6524 <_ZN6String4copyEPKcj+0x20>
    651e:	ce 01       	movw	r24, r28
    6520:	ac df       	rcall	.-168    	; 0x647a <_ZN6String10invalidateEv>
    6522:	06 c0       	rjmp	.+12     	; 0x6530 <_ZN6String4copyEPKcj+0x2c>
    6524:	1d 83       	std	Y+5, r17	; 0x05
    6526:	0c 83       	std	Y+4, r16	; 0x04
    6528:	b7 01       	movw	r22, r14
    652a:	88 81       	ld	r24, Y
    652c:	99 81       	ldd	r25, Y+1	; 0x01
    652e:	50 d6       	rcall	.+3232   	; 0x71d0 <strcpy>
    6530:	ce 01       	movw	r24, r28
    6532:	df 91       	pop	r29
    6534:	cf 91       	pop	r28
    6536:	1f 91       	pop	r17
    6538:	0f 91       	pop	r16
    653a:	ff 90       	pop	r15
    653c:	ef 90       	pop	r14
    653e:	08 95       	ret

00006540 <_ZN6StringC1EPKc>:
    6540:	fc 01       	movw	r30, r24
    6542:	11 82       	std	Z+1, r1	; 0x01
    6544:	10 82       	st	Z, r1
    6546:	13 82       	std	Z+3, r1	; 0x03
    6548:	12 82       	std	Z+2, r1	; 0x02
    654a:	15 82       	std	Z+5, r1	; 0x05
    654c:	14 82       	std	Z+4, r1	; 0x04
    654e:	61 15       	cp	r22, r1
    6550:	71 05       	cpc	r23, r1
    6552:	49 f0       	breq	.+18     	; 0x6566 <_ZN6StringC1EPKc+0x26>
    6554:	fb 01       	movw	r30, r22
    6556:	01 90       	ld	r0, Z+
    6558:	00 20       	and	r0, r0
    655a:	e9 f7       	brne	.-6      	; 0x6556 <_ZN6StringC1EPKc+0x16>
    655c:	31 97       	sbiw	r30, 0x01	; 1
    655e:	af 01       	movw	r20, r30
    6560:	46 1b       	sub	r20, r22
    6562:	57 0b       	sbc	r21, r23
    6564:	cf cf       	rjmp	.-98     	; 0x6504 <_ZN6String4copyEPKcj>
    6566:	08 95       	ret

00006568 <_ZN6String4moveERS_>:
    6568:	0f 93       	push	r16
    656a:	1f 93       	push	r17
    656c:	cf 93       	push	r28
    656e:	df 93       	push	r29
    6570:	8c 01       	movw	r16, r24
    6572:	eb 01       	movw	r28, r22
    6574:	fc 01       	movw	r30, r24
    6576:	80 81       	ld	r24, Z
    6578:	91 81       	ldd	r25, Z+1	; 0x01
    657a:	00 97       	sbiw	r24, 0x00	; 0
    657c:	c1 f0       	breq	.+48     	; 0x65ae <_ZN6String4moveERS_+0x46>
    657e:	68 81       	ld	r22, Y
    6580:	79 81       	ldd	r23, Y+1	; 0x01
    6582:	61 15       	cp	r22, r1
    6584:	71 05       	cpc	r23, r1
    6586:	91 f0       	breq	.+36     	; 0x65ac <_ZN6String4moveERS_+0x44>
    6588:	28 e3       	ldi	r18, 0x38	; 56
    658a:	32 e3       	ldi	r19, 0x32	; 50
    658c:	23 2b       	or	r18, r19
    658e:	71 f0       	breq	.+28     	; 0x65ac <_ZN6String4moveERS_+0x44>
    6590:	42 81       	ldd	r20, Z+2	; 0x02
    6592:	53 81       	ldd	r21, Z+3	; 0x03
    6594:	2c 81       	ldd	r18, Y+4	; 0x04
    6596:	3d 81       	ldd	r19, Y+5	; 0x05
    6598:	42 17       	cp	r20, r18
    659a:	53 07       	cpc	r21, r19
    659c:	38 f0       	brcs	.+14     	; 0x65ac <_ZN6String4moveERS_+0x44>
    659e:	18 d6       	rcall	.+3120   	; 0x71d0 <strcpy>
    65a0:	8c 81       	ldd	r24, Y+4	; 0x04
    65a2:	9d 81       	ldd	r25, Y+5	; 0x05
    65a4:	f8 01       	movw	r30, r16
    65a6:	95 83       	std	Z+5, r25	; 0x05
    65a8:	84 83       	std	Z+4, r24	; 0x04
    65aa:	12 c0       	rjmp	.+36     	; 0x65d0 <_ZN6String4moveERS_+0x68>
    65ac:	81 d4       	rcall	.+2306   	; 0x6eb0 <free>
    65ae:	88 81       	ld	r24, Y
    65b0:	99 81       	ldd	r25, Y+1	; 0x01
    65b2:	f8 01       	movw	r30, r16
    65b4:	91 83       	std	Z+1, r25	; 0x01
    65b6:	80 83       	st	Z, r24
    65b8:	8a 81       	ldd	r24, Y+2	; 0x02
    65ba:	9b 81       	ldd	r25, Y+3	; 0x03
    65bc:	93 83       	std	Z+3, r25	; 0x03
    65be:	82 83       	std	Z+2, r24	; 0x02
    65c0:	8c 81       	ldd	r24, Y+4	; 0x04
    65c2:	9d 81       	ldd	r25, Y+5	; 0x05
    65c4:	95 83       	std	Z+5, r25	; 0x05
    65c6:	84 83       	std	Z+4, r24	; 0x04
    65c8:	19 82       	std	Y+1, r1	; 0x01
    65ca:	18 82       	st	Y, r1
    65cc:	1b 82       	std	Y+3, r1	; 0x03
    65ce:	1a 82       	std	Y+2, r1	; 0x02
    65d0:	1d 82       	std	Y+5, r1	; 0x05
    65d2:	1c 82       	std	Y+4, r1	; 0x04
    65d4:	df 91       	pop	r29
    65d6:	cf 91       	pop	r28
    65d8:	1f 91       	pop	r17
    65da:	0f 91       	pop	r16
    65dc:	08 95       	ret

000065de <_ZN6StringC1EOS_>:
    65de:	fc 01       	movw	r30, r24
    65e0:	11 82       	std	Z+1, r1	; 0x01
    65e2:	10 82       	st	Z, r1
    65e4:	13 82       	std	Z+3, r1	; 0x03
    65e6:	12 82       	std	Z+2, r1	; 0x02
    65e8:	15 82       	std	Z+5, r1	; 0x05
    65ea:	14 82       	std	Z+4, r1	; 0x04
    65ec:	bd cf       	rjmp	.-134    	; 0x6568 <_ZN6String4moveERS_>

000065ee <_ZN6StringaSERKS_>:
    65ee:	cf 93       	push	r28
    65f0:	df 93       	push	r29
    65f2:	ec 01       	movw	r28, r24
    65f4:	fb 01       	movw	r30, r22
    65f6:	86 17       	cp	r24, r22
    65f8:	97 07       	cpc	r25, r23
    65fa:	51 f0       	breq	.+20     	; 0x6610 <_ZN6StringaSERKS_+0x22>
    65fc:	60 81       	ld	r22, Z
    65fe:	71 81       	ldd	r23, Z+1	; 0x01
    6600:	61 15       	cp	r22, r1
    6602:	71 05       	cpc	r23, r1
    6604:	21 f0       	breq	.+8      	; 0x660e <_ZN6StringaSERKS_+0x20>
    6606:	44 81       	ldd	r20, Z+4	; 0x04
    6608:	55 81       	ldd	r21, Z+5	; 0x05
    660a:	7c df       	rcall	.-264    	; 0x6504 <_ZN6String4copyEPKcj>
    660c:	01 c0       	rjmp	.+2      	; 0x6610 <_ZN6StringaSERKS_+0x22>
    660e:	35 df       	rcall	.-406    	; 0x647a <_ZN6String10invalidateEv>
    6610:	ce 01       	movw	r24, r28
    6612:	df 91       	pop	r29
    6614:	cf 91       	pop	r28
    6616:	08 95       	ret

00006618 <_ZN6StringC1ERKS_>:
    6618:	fc 01       	movw	r30, r24
    661a:	11 82       	std	Z+1, r1	; 0x01
    661c:	10 82       	st	Z, r1
    661e:	13 82       	std	Z+3, r1	; 0x03
    6620:	12 82       	std	Z+2, r1	; 0x02
    6622:	15 82       	std	Z+5, r1	; 0x05
    6624:	14 82       	std	Z+4, r1	; 0x04
    6626:	e3 cf       	rjmp	.-58     	; 0x65ee <_ZN6StringaSERKS_>

00006628 <_ZN6StringaSEOS_>:
    6628:	cf 93       	push	r28
    662a:	df 93       	push	r29
    662c:	ec 01       	movw	r28, r24
    662e:	86 17       	cp	r24, r22
    6630:	97 07       	cpc	r25, r23
    6632:	09 f0       	breq	.+2      	; 0x6636 <_ZN6StringaSEOS_+0xe>
    6634:	99 df       	rcall	.-206    	; 0x6568 <_ZN6String4moveERS_>
    6636:	ce 01       	movw	r24, r28
    6638:	df 91       	pop	r29
    663a:	cf 91       	pop	r28
    663c:	08 95       	ret

0000663e <_ZN6StringaSEPKc>:
    663e:	cf 93       	push	r28
    6640:	df 93       	push	r29
    6642:	ec 01       	movw	r28, r24
    6644:	61 15       	cp	r22, r1
    6646:	71 05       	cpc	r23, r1
    6648:	51 f0       	breq	.+20     	; 0x665e <_ZN6StringaSEPKc+0x20>
    664a:	fb 01       	movw	r30, r22
    664c:	01 90       	ld	r0, Z+
    664e:	00 20       	and	r0, r0
    6650:	e9 f7       	brne	.-6      	; 0x664c <_ZN6StringaSEPKc+0xe>
    6652:	31 97       	sbiw	r30, 0x01	; 1
    6654:	af 01       	movw	r20, r30
    6656:	46 1b       	sub	r20, r22
    6658:	57 0b       	sbc	r21, r23
    665a:	54 df       	rcall	.-344    	; 0x6504 <_ZN6String4copyEPKcj>
    665c:	01 c0       	rjmp	.+2      	; 0x6660 <_ZN6StringaSEPKc+0x22>
    665e:	0d df       	rcall	.-486    	; 0x647a <_ZN6String10invalidateEv>
    6660:	ce 01       	movw	r24, r28
    6662:	df 91       	pop	r29
    6664:	cf 91       	pop	r28
    6666:	08 95       	ret

00006668 <_ZN6StringC1Ec>:
    6668:	cf 93       	push	r28
    666a:	df 93       	push	r29
    666c:	00 d0       	rcall	.+0      	; 0x666e <_ZN6StringC1Ec+0x6>
    666e:	cd b7       	in	r28, 0x3d	; 61
    6670:	de b7       	in	r29, 0x3e	; 62
    6672:	fc 01       	movw	r30, r24
    6674:	11 82       	std	Z+1, r1	; 0x01
    6676:	10 82       	st	Z, r1
    6678:	13 82       	std	Z+3, r1	; 0x03
    667a:	12 82       	std	Z+2, r1	; 0x02
    667c:	15 82       	std	Z+5, r1	; 0x05
    667e:	14 82       	std	Z+4, r1	; 0x04
    6680:	69 83       	std	Y+1, r22	; 0x01
    6682:	1a 82       	std	Y+2, r1	; 0x02
    6684:	be 01       	movw	r22, r28
    6686:	6f 5f       	subi	r22, 0xFF	; 255
    6688:	7f 4f       	sbci	r23, 0xFF	; 255
    668a:	d9 df       	rcall	.-78     	; 0x663e <_ZN6StringaSEPKc>
    668c:	0f 90       	pop	r0
    668e:	0f 90       	pop	r0
    6690:	df 91       	pop	r29
    6692:	cf 91       	pop	r28
    6694:	08 95       	ret

00006696 <_ZN6StringC1Ehh>:
    6696:	0f 93       	push	r16
    6698:	1f 93       	push	r17
    669a:	cf 93       	push	r28
    669c:	df 93       	push	r29
    669e:	cd b7       	in	r28, 0x3d	; 61
    66a0:	de b7       	in	r29, 0x3e	; 62
    66a2:	29 97       	sbiw	r28, 0x09	; 9
    66a4:	0f b6       	in	r0, 0x3f	; 63
    66a6:	f8 94       	cli
    66a8:	de bf       	out	0x3e, r29	; 62
    66aa:	0f be       	out	0x3f, r0	; 63
    66ac:	cd bf       	out	0x3d, r28	; 61
    66ae:	8c 01       	movw	r16, r24
    66b0:	86 2f       	mov	r24, r22
    66b2:	f8 01       	movw	r30, r16
    66b4:	11 82       	std	Z+1, r1	; 0x01
    66b6:	10 82       	st	Z, r1
    66b8:	13 82       	std	Z+3, r1	; 0x03
    66ba:	12 82       	std	Z+2, r1	; 0x02
    66bc:	15 82       	std	Z+5, r1	; 0x05
    66be:	14 82       	std	Z+4, r1	; 0x04
    66c0:	50 e0       	ldi	r21, 0x00	; 0
    66c2:	be 01       	movw	r22, r28
    66c4:	6f 5f       	subi	r22, 0xFF	; 255
    66c6:	7f 4f       	sbci	r23, 0xFF	; 255
    66c8:	90 e0       	ldi	r25, 0x00	; 0
    66ca:	d6 d5       	rcall	.+2988   	; 0x7278 <utoa>
    66cc:	be 01       	movw	r22, r28
    66ce:	6f 5f       	subi	r22, 0xFF	; 255
    66d0:	7f 4f       	sbci	r23, 0xFF	; 255
    66d2:	c8 01       	movw	r24, r16
    66d4:	b4 df       	rcall	.-152    	; 0x663e <_ZN6StringaSEPKc>
    66d6:	29 96       	adiw	r28, 0x09	; 9
    66d8:	0f b6       	in	r0, 0x3f	; 63
    66da:	f8 94       	cli
    66dc:	de bf       	out	0x3e, r29	; 62
    66de:	0f be       	out	0x3f, r0	; 63
    66e0:	cd bf       	out	0x3d, r28	; 61
    66e2:	df 91       	pop	r29
    66e4:	cf 91       	pop	r28
    66e6:	1f 91       	pop	r17
    66e8:	0f 91       	pop	r16
    66ea:	08 95       	ret

000066ec <_ZN6StringC1Eih>:
    66ec:	0f 93       	push	r16
    66ee:	1f 93       	push	r17
    66f0:	cf 93       	push	r28
    66f2:	df 93       	push	r29
    66f4:	cd b7       	in	r28, 0x3d	; 61
    66f6:	de b7       	in	r29, 0x3e	; 62
    66f8:	62 97       	sbiw	r28, 0x12	; 18
    66fa:	0f b6       	in	r0, 0x3f	; 63
    66fc:	f8 94       	cli
    66fe:	de bf       	out	0x3e, r29	; 62
    6700:	0f be       	out	0x3f, r0	; 63
    6702:	cd bf       	out	0x3d, r28	; 61
    6704:	8c 01       	movw	r16, r24
    6706:	cb 01       	movw	r24, r22
    6708:	f8 01       	movw	r30, r16
    670a:	11 82       	std	Z+1, r1	; 0x01
    670c:	10 82       	st	Z, r1
    670e:	13 82       	std	Z+3, r1	; 0x03
    6710:	12 82       	std	Z+2, r1	; 0x02
    6712:	15 82       	std	Z+5, r1	; 0x05
    6714:	14 82       	std	Z+4, r1	; 0x04
    6716:	50 e0       	ldi	r21, 0x00	; 0
    6718:	be 01       	movw	r22, r28
    671a:	6f 5f       	subi	r22, 0xFF	; 255
    671c:	7f 4f       	sbci	r23, 0xFF	; 255
    671e:	6d d5       	rcall	.+2778   	; 0x71fa <itoa>
    6720:	be 01       	movw	r22, r28
    6722:	6f 5f       	subi	r22, 0xFF	; 255
    6724:	7f 4f       	sbci	r23, 0xFF	; 255
    6726:	c8 01       	movw	r24, r16
    6728:	8a df       	rcall	.-236    	; 0x663e <_ZN6StringaSEPKc>
    672a:	62 96       	adiw	r28, 0x12	; 18
    672c:	0f b6       	in	r0, 0x3f	; 63
    672e:	f8 94       	cli
    6730:	de bf       	out	0x3e, r29	; 62
    6732:	0f be       	out	0x3f, r0	; 63
    6734:	cd bf       	out	0x3d, r28	; 61
    6736:	df 91       	pop	r29
    6738:	cf 91       	pop	r28
    673a:	1f 91       	pop	r17
    673c:	0f 91       	pop	r16
    673e:	08 95       	ret

00006740 <_ZN6StringC1Ejh>:
    6740:	0f 93       	push	r16
    6742:	1f 93       	push	r17
    6744:	cf 93       	push	r28
    6746:	df 93       	push	r29
    6748:	cd b7       	in	r28, 0x3d	; 61
    674a:	de b7       	in	r29, 0x3e	; 62
    674c:	61 97       	sbiw	r28, 0x11	; 17
    674e:	0f b6       	in	r0, 0x3f	; 63
    6750:	f8 94       	cli
    6752:	de bf       	out	0x3e, r29	; 62
    6754:	0f be       	out	0x3f, r0	; 63
    6756:	cd bf       	out	0x3d, r28	; 61
    6758:	8c 01       	movw	r16, r24
    675a:	cb 01       	movw	r24, r22
    675c:	f8 01       	movw	r30, r16
    675e:	11 82       	std	Z+1, r1	; 0x01
    6760:	10 82       	st	Z, r1
    6762:	13 82       	std	Z+3, r1	; 0x03
    6764:	12 82       	std	Z+2, r1	; 0x02
    6766:	15 82       	std	Z+5, r1	; 0x05
    6768:	14 82       	std	Z+4, r1	; 0x04
    676a:	50 e0       	ldi	r21, 0x00	; 0
    676c:	be 01       	movw	r22, r28
    676e:	6f 5f       	subi	r22, 0xFF	; 255
    6770:	7f 4f       	sbci	r23, 0xFF	; 255
    6772:	82 d5       	rcall	.+2820   	; 0x7278 <utoa>
    6774:	be 01       	movw	r22, r28
    6776:	6f 5f       	subi	r22, 0xFF	; 255
    6778:	7f 4f       	sbci	r23, 0xFF	; 255
    677a:	c8 01       	movw	r24, r16
    677c:	60 df       	rcall	.-320    	; 0x663e <_ZN6StringaSEPKc>
    677e:	61 96       	adiw	r28, 0x11	; 17
    6780:	0f b6       	in	r0, 0x3f	; 63
    6782:	f8 94       	cli
    6784:	de bf       	out	0x3e, r29	; 62
    6786:	0f be       	out	0x3f, r0	; 63
    6788:	cd bf       	out	0x3d, r28	; 61
    678a:	df 91       	pop	r29
    678c:	cf 91       	pop	r28
    678e:	1f 91       	pop	r17
    6790:	0f 91       	pop	r16
    6792:	08 95       	ret

00006794 <_ZN6StringC1Emh>:
    6794:	0f 93       	push	r16
    6796:	1f 93       	push	r17
    6798:	cf 93       	push	r28
    679a:	df 93       	push	r29
    679c:	cd b7       	in	r28, 0x3d	; 61
    679e:	de b7       	in	r29, 0x3e	; 62
    67a0:	a1 97       	sbiw	r28, 0x21	; 33
    67a2:	0f b6       	in	r0, 0x3f	; 63
    67a4:	f8 94       	cli
    67a6:	de bf       	out	0x3e, r29	; 62
    67a8:	0f be       	out	0x3f, r0	; 63
    67aa:	cd bf       	out	0x3d, r28	; 61
    67ac:	8c 01       	movw	r16, r24
    67ae:	cb 01       	movw	r24, r22
    67b0:	ba 01       	movw	r22, r20
    67b2:	f8 01       	movw	r30, r16
    67b4:	11 82       	std	Z+1, r1	; 0x01
    67b6:	10 82       	st	Z, r1
    67b8:	13 82       	std	Z+3, r1	; 0x03
    67ba:	12 82       	std	Z+2, r1	; 0x02
    67bc:	15 82       	std	Z+5, r1	; 0x05
    67be:	14 82       	std	Z+4, r1	; 0x04
    67c0:	30 e0       	ldi	r19, 0x00	; 0
    67c2:	ae 01       	movw	r20, r28
    67c4:	4f 5f       	subi	r20, 0xFF	; 255
    67c6:	5f 4f       	sbci	r21, 0xFF	; 255
    67c8:	2c d5       	rcall	.+2648   	; 0x7222 <ultoa>
    67ca:	be 01       	movw	r22, r28
    67cc:	6f 5f       	subi	r22, 0xFF	; 255
    67ce:	7f 4f       	sbci	r23, 0xFF	; 255
    67d0:	c8 01       	movw	r24, r16
    67d2:	35 df       	rcall	.-406    	; 0x663e <_ZN6StringaSEPKc>
    67d4:	a1 96       	adiw	r28, 0x21	; 33
    67d6:	0f b6       	in	r0, 0x3f	; 63
    67d8:	f8 94       	cli
    67da:	de bf       	out	0x3e, r29	; 62
    67dc:	0f be       	out	0x3f, r0	; 63
    67de:	cd bf       	out	0x3d, r28	; 61
    67e0:	df 91       	pop	r29
    67e2:	cf 91       	pop	r28
    67e4:	1f 91       	pop	r17
    67e6:	0f 91       	pop	r16
    67e8:	08 95       	ret

000067ea <_ZN6StringC1Edh>:
    67ea:	ef 92       	push	r14
    67ec:	ff 92       	push	r15
    67ee:	0f 93       	push	r16
    67f0:	1f 93       	push	r17
    67f2:	cf 93       	push	r28
    67f4:	df 93       	push	r29
    67f6:	cd b7       	in	r28, 0x3d	; 61
    67f8:	de b7       	in	r29, 0x3e	; 62
    67fa:	a1 97       	sbiw	r28, 0x21	; 33
    67fc:	0f b6       	in	r0, 0x3f	; 63
    67fe:	f8 94       	cli
    6800:	de bf       	out	0x3e, r29	; 62
    6802:	0f be       	out	0x3f, r0	; 63
    6804:	cd bf       	out	0x3d, r28	; 61
    6806:	7c 01       	movw	r14, r24
    6808:	cb 01       	movw	r24, r22
    680a:	ba 01       	movw	r22, r20
    680c:	f7 01       	movw	r30, r14
    680e:	11 82       	std	Z+1, r1	; 0x01
    6810:	10 82       	st	Z, r1
    6812:	13 82       	std	Z+3, r1	; 0x03
    6814:	12 82       	std	Z+2, r1	; 0x02
    6816:	15 82       	std	Z+5, r1	; 0x05
    6818:	14 82       	std	Z+4, r1	; 0x04
    681a:	42 e0       	ldi	r20, 0x02	; 2
    681c:	42 0f       	add	r20, r18
    681e:	8e 01       	movw	r16, r28
    6820:	0f 5f       	subi	r16, 0xFF	; 255
    6822:	1f 4f       	sbci	r17, 0xFF	; 255
    6824:	8e d2       	rcall	.+1308   	; 0x6d42 <dtostrf>
    6826:	bc 01       	movw	r22, r24
    6828:	c7 01       	movw	r24, r14
    682a:	09 df       	rcall	.-494    	; 0x663e <_ZN6StringaSEPKc>
    682c:	a1 96       	adiw	r28, 0x21	; 33
    682e:	0f b6       	in	r0, 0x3f	; 63
    6830:	f8 94       	cli
    6832:	de bf       	out	0x3e, r29	; 62
    6834:	0f be       	out	0x3f, r0	; 63
    6836:	cd bf       	out	0x3d, r28	; 61
    6838:	df 91       	pop	r29
    683a:	cf 91       	pop	r28
    683c:	1f 91       	pop	r17
    683e:	0f 91       	pop	r16
    6840:	ff 90       	pop	r15
    6842:	ef 90       	pop	r14
    6844:	08 95       	ret

00006846 <_ZN6String6concatEPKcj>:
    6846:	ef 92       	push	r14
    6848:	ff 92       	push	r15
    684a:	0f 93       	push	r16
    684c:	1f 93       	push	r17
    684e:	cf 93       	push	r28
    6850:	df 93       	push	r29
    6852:	61 15       	cp	r22, r1
    6854:	71 05       	cpc	r23, r1
    6856:	11 f4       	brne	.+4      	; 0x685c <_ZN6String6concatEPKcj+0x16>
    6858:	80 e0       	ldi	r24, 0x00	; 0
    685a:	1a c0       	rjmp	.+52     	; 0x6890 <_ZN6String6concatEPKcj+0x4a>
    685c:	41 15       	cp	r20, r1
    685e:	51 05       	cpc	r21, r1
    6860:	b1 f0       	breq	.+44     	; 0x688e <_ZN6String6concatEPKcj+0x48>
    6862:	7b 01       	movw	r14, r22
    6864:	ec 01       	movw	r28, r24
    6866:	8c 81       	ldd	r24, Y+4	; 0x04
    6868:	9d 81       	ldd	r25, Y+5	; 0x05
    686a:	8a 01       	movw	r16, r20
    686c:	08 0f       	add	r16, r24
    686e:	19 1f       	adc	r17, r25
    6870:	b8 01       	movw	r22, r16
    6872:	ce 01       	movw	r24, r28
    6874:	2c de       	rcall	.-936    	; 0x64ce <_ZN6String7reserveEj>
    6876:	88 23       	and	r24, r24
    6878:	79 f3       	breq	.-34     	; 0x6858 <_ZN6String6concatEPKcj+0x12>
    687a:	28 81       	ld	r18, Y
    687c:	39 81       	ldd	r19, Y+1	; 0x01
    687e:	8c 81       	ldd	r24, Y+4	; 0x04
    6880:	9d 81       	ldd	r25, Y+5	; 0x05
    6882:	b7 01       	movw	r22, r14
    6884:	82 0f       	add	r24, r18
    6886:	93 1f       	adc	r25, r19
    6888:	a3 d4       	rcall	.+2374   	; 0x71d0 <strcpy>
    688a:	1d 83       	std	Y+5, r17	; 0x05
    688c:	0c 83       	std	Y+4, r16	; 0x04
    688e:	81 e0       	ldi	r24, 0x01	; 1
    6890:	df 91       	pop	r29
    6892:	cf 91       	pop	r28
    6894:	1f 91       	pop	r17
    6896:	0f 91       	pop	r16
    6898:	ff 90       	pop	r15
    689a:	ef 90       	pop	r14
    689c:	08 95       	ret

0000689e <_ZN6String6concatERKS_>:
    689e:	fb 01       	movw	r30, r22
    68a0:	44 81       	ldd	r20, Z+4	; 0x04
    68a2:	55 81       	ldd	r21, Z+5	; 0x05
    68a4:	60 81       	ld	r22, Z
    68a6:	71 81       	ldd	r23, Z+1	; 0x01
    68a8:	ce cf       	rjmp	.-100    	; 0x6846 <_ZN6String6concatEPKcj>

000068aa <_ZN6String6concatEPKc>:
    68aa:	61 15       	cp	r22, r1
    68ac:	71 05       	cpc	r23, r1
    68ae:	49 f0       	breq	.+18     	; 0x68c2 <_ZN6String6concatEPKc+0x18>
    68b0:	fb 01       	movw	r30, r22
    68b2:	01 90       	ld	r0, Z+
    68b4:	00 20       	and	r0, r0
    68b6:	e9 f7       	brne	.-6      	; 0x68b2 <_ZN6String6concatEPKc+0x8>
    68b8:	31 97       	sbiw	r30, 0x01	; 1
    68ba:	af 01       	movw	r20, r30
    68bc:	46 1b       	sub	r20, r22
    68be:	57 0b       	sbc	r21, r23
    68c0:	c2 cf       	rjmp	.-124    	; 0x6846 <_ZN6String6concatEPKcj>
    68c2:	80 e0       	ldi	r24, 0x00	; 0
    68c4:	08 95       	ret

000068c6 <_ZN6String6concatEc>:
    68c6:	cf 93       	push	r28
    68c8:	df 93       	push	r29
    68ca:	00 d0       	rcall	.+0      	; 0x68cc <_ZN6String6concatEc+0x6>
    68cc:	cd b7       	in	r28, 0x3d	; 61
    68ce:	de b7       	in	r29, 0x3e	; 62
    68d0:	69 83       	std	Y+1, r22	; 0x01
    68d2:	1a 82       	std	Y+2, r1	; 0x02
    68d4:	41 e0       	ldi	r20, 0x01	; 1
    68d6:	50 e0       	ldi	r21, 0x00	; 0
    68d8:	be 01       	movw	r22, r28
    68da:	6f 5f       	subi	r22, 0xFF	; 255
    68dc:	7f 4f       	sbci	r23, 0xFF	; 255
    68de:	b3 df       	rcall	.-154    	; 0x6846 <_ZN6String6concatEPKcj>
    68e0:	0f 90       	pop	r0
    68e2:	0f 90       	pop	r0
    68e4:	df 91       	pop	r29
    68e6:	cf 91       	pop	r28
    68e8:	08 95       	ret

000068ea <_ZplRK15StringSumHelperRK6String>:
    68ea:	cf 93       	push	r28
    68ec:	df 93       	push	r29
    68ee:	ec 01       	movw	r28, r24
    68f0:	fb 01       	movw	r30, r22
    68f2:	44 81       	ldd	r20, Z+4	; 0x04
    68f4:	55 81       	ldd	r21, Z+5	; 0x05
    68f6:	60 81       	ld	r22, Z
    68f8:	71 81       	ldd	r23, Z+1	; 0x01
    68fa:	a5 df       	rcall	.-182    	; 0x6846 <_ZN6String6concatEPKcj>
    68fc:	81 11       	cpse	r24, r1
    68fe:	02 c0       	rjmp	.+4      	; 0x6904 <_ZplRK15StringSumHelperRK6String+0x1a>
    6900:	ce 01       	movw	r24, r28
    6902:	bb dd       	rcall	.-1162   	; 0x647a <_ZN6String10invalidateEv>
    6904:	ce 01       	movw	r24, r28
    6906:	df 91       	pop	r29
    6908:	cf 91       	pop	r28
    690a:	08 95       	ret

0000690c <_ZplRK15StringSumHelperPKc>:
    690c:	cf 93       	push	r28
    690e:	df 93       	push	r29
    6910:	ec 01       	movw	r28, r24
    6912:	61 15       	cp	r22, r1
    6914:	71 05       	cpc	r23, r1
    6916:	59 f0       	breq	.+22     	; 0x692e <_ZplRK15StringSumHelperPKc+0x22>
    6918:	fb 01       	movw	r30, r22
    691a:	01 90       	ld	r0, Z+
    691c:	00 20       	and	r0, r0
    691e:	e9 f7       	brne	.-6      	; 0x691a <_ZplRK15StringSumHelperPKc+0xe>
    6920:	31 97       	sbiw	r30, 0x01	; 1
    6922:	af 01       	movw	r20, r30
    6924:	46 1b       	sub	r20, r22
    6926:	57 0b       	sbc	r21, r23
    6928:	8e df       	rcall	.-228    	; 0x6846 <_ZN6String6concatEPKcj>
    692a:	81 11       	cpse	r24, r1
    692c:	02 c0       	rjmp	.+4      	; 0x6932 <_ZplRK15StringSumHelperPKc+0x26>
    692e:	ce 01       	movw	r24, r28
    6930:	a4 dd       	rcall	.-1208   	; 0x647a <_ZN6String10invalidateEv>
    6932:	ce 01       	movw	r24, r28
    6934:	df 91       	pop	r29
    6936:	cf 91       	pop	r28
    6938:	08 95       	ret

0000693a <_ZplRK15StringSumHelperc>:
    693a:	cf 93       	push	r28
    693c:	df 93       	push	r29
    693e:	ec 01       	movw	r28, r24
    6940:	c2 df       	rcall	.-124    	; 0x68c6 <_ZN6String6concatEc>
    6942:	81 11       	cpse	r24, r1
    6944:	02 c0       	rjmp	.+4      	; 0x694a <_ZplRK15StringSumHelperc+0x10>
    6946:	ce 01       	movw	r24, r28
    6948:	98 dd       	rcall	.-1232   	; 0x647a <_ZN6String10invalidateEv>
    694a:	ce 01       	movw	r24, r28
    694c:	df 91       	pop	r29
    694e:	cf 91       	pop	r28
    6950:	08 95       	ret

00006952 <_ZNK6String6equalsEPKc>:
    6952:	fc 01       	movw	r30, r24
    6954:	24 81       	ldd	r18, Z+4	; 0x04
    6956:	35 81       	ldd	r19, Z+5	; 0x05
    6958:	23 2b       	or	r18, r19
    695a:	31 f4       	brne	.+12     	; 0x6968 <_ZNK6String6equalsEPKc+0x16>
    695c:	21 e0       	ldi	r18, 0x01	; 1
    695e:	61 15       	cp	r22, r1
    6960:	71 05       	cpc	r23, r1
    6962:	99 f0       	breq	.+38     	; 0x698a <_ZNK6String6equalsEPKc+0x38>
    6964:	fb 01       	movw	r30, r22
    6966:	08 c0       	rjmp	.+16     	; 0x6978 <_ZNK6String6equalsEPKc+0x26>
    6968:	fc 01       	movw	r30, r24
    696a:	80 81       	ld	r24, Z
    696c:	91 81       	ldd	r25, Z+1	; 0x01
    696e:	61 15       	cp	r22, r1
    6970:	71 05       	cpc	r23, r1
    6972:	31 f4       	brne	.+12     	; 0x6980 <_ZNK6String6equalsEPKc+0x2e>
    6974:	21 e0       	ldi	r18, 0x01	; 1
    6976:	fc 01       	movw	r30, r24
    6978:	80 81       	ld	r24, Z
    697a:	88 23       	and	r24, r24
    697c:	31 f0       	breq	.+12     	; 0x698a <_ZNK6String6equalsEPKc+0x38>
    697e:	04 c0       	rjmp	.+8      	; 0x6988 <_ZNK6String6equalsEPKc+0x36>
    6980:	1e d4       	rcall	.+2108   	; 0x71be <strcmp>
    6982:	21 e0       	ldi	r18, 0x01	; 1
    6984:	89 2b       	or	r24, r25
    6986:	09 f0       	breq	.+2      	; 0x698a <_ZNK6String6equalsEPKc+0x38>
    6988:	20 e0       	ldi	r18, 0x00	; 0
    698a:	82 2f       	mov	r24, r18
    698c:	08 95       	ret

0000698e <_ZNK6String9substringEjj>:
    698e:	bf 92       	push	r11
    6990:	cf 92       	push	r12
    6992:	df 92       	push	r13
    6994:	ef 92       	push	r14
    6996:	ff 92       	push	r15
    6998:	0f 93       	push	r16
    699a:	1f 93       	push	r17
    699c:	cf 93       	push	r28
    699e:	df 93       	push	r29
    69a0:	7c 01       	movw	r14, r24
    69a2:	6b 01       	movw	r12, r22
    69a4:	8a 01       	movw	r16, r20
    69a6:	e9 01       	movw	r28, r18
    69a8:	24 17       	cp	r18, r20
    69aa:	35 07       	cpc	r19, r21
    69ac:	20 f4       	brcc	.+8      	; 0x69b6 <_ZNK6String9substringEjj+0x28>
    69ae:	81 2f       	mov	r24, r17
    69b0:	89 01       	movw	r16, r18
    69b2:	c4 2f       	mov	r28, r20
    69b4:	d8 2f       	mov	r29, r24
    69b6:	60 e7       	ldi	r22, 0x70	; 112
    69b8:	71 e0       	ldi	r23, 0x01	; 1
    69ba:	c7 01       	movw	r24, r14
    69bc:	c1 dd       	rcall	.-1150   	; 0x6540 <_ZN6StringC1EPKc>
    69be:	d6 01       	movw	r26, r12
    69c0:	14 96       	adiw	r26, 0x04	; 4
    69c2:	8d 91       	ld	r24, X+
    69c4:	9c 91       	ld	r25, X
    69c6:	15 97       	sbiw	r26, 0x05	; 5
    69c8:	08 17       	cp	r16, r24
    69ca:	19 07       	cpc	r17, r25
    69cc:	c0 f4       	brcc	.+48     	; 0x69fe <_ZNK6String9substringEjj+0x70>
    69ce:	8c 17       	cp	r24, r28
    69d0:	9d 07       	cpc	r25, r29
    69d2:	08 f4       	brcc	.+2      	; 0x69d6 <_ZNK6String9substringEjj+0x48>
    69d4:	ec 01       	movw	r28, r24
    69d6:	d6 01       	movw	r26, r12
    69d8:	ed 91       	ld	r30, X+
    69da:	fc 91       	ld	r31, X
    69dc:	11 97       	sbiw	r26, 0x01	; 1
    69de:	ec 0f       	add	r30, r28
    69e0:	fd 1f       	adc	r31, r29
    69e2:	b0 80       	ld	r11, Z
    69e4:	10 82       	st	Z, r1
    69e6:	6d 91       	ld	r22, X+
    69e8:	7c 91       	ld	r23, X
    69ea:	60 0f       	add	r22, r16
    69ec:	71 1f       	adc	r23, r17
    69ee:	c7 01       	movw	r24, r14
    69f0:	26 de       	rcall	.-948    	; 0x663e <_ZN6StringaSEPKc>
    69f2:	d6 01       	movw	r26, r12
    69f4:	ed 91       	ld	r30, X+
    69f6:	fc 91       	ld	r31, X
    69f8:	ec 0f       	add	r30, r28
    69fa:	fd 1f       	adc	r31, r29
    69fc:	b0 82       	st	Z, r11
    69fe:	c7 01       	movw	r24, r14
    6a00:	df 91       	pop	r29
    6a02:	cf 91       	pop	r28
    6a04:	1f 91       	pop	r17
    6a06:	0f 91       	pop	r16
    6a08:	ff 90       	pop	r15
    6a0a:	ef 90       	pop	r14
    6a0c:	df 90       	pop	r13
    6a0e:	cf 90       	pop	r12
    6a10:	bf 90       	pop	r11
    6a12:	08 95       	ret

00006a14 <_ZN6String4trimEv>:

void String::trim(void)
{
    6a14:	af 92       	push	r10
    6a16:	bf 92       	push	r11
    6a18:	cf 92       	push	r12
    6a1a:	df 92       	push	r13
    6a1c:	ef 92       	push	r14
    6a1e:	ff 92       	push	r15
    6a20:	0f 93       	push	r16
    6a22:	1f 93       	push	r17
    6a24:	cf 93       	push	r28
    6a26:	df 93       	push	r29
	if (!buffer || len == 0) return;
    6a28:	dc 01       	movw	r26, r24
    6a2a:	cd 90       	ld	r12, X+
    6a2c:	dc 90       	ld	r13, X
    6a2e:	11 97       	sbiw	r26, 0x01	; 1
    6a30:	c1 14       	cp	r12, r1
    6a32:	d1 04       	cpc	r13, r1
    6a34:	09 f4       	brne	.+2      	; 0x6a38 <_ZN6String4trimEv+0x24>
    6a36:	3c c0       	rjmp	.+120    	; 0x6ab0 <_ZN6String4trimEv+0x9c>
    6a38:	14 96       	adiw	r26, 0x04	; 4
    6a3a:	cd 91       	ld	r28, X+
    6a3c:	dc 91       	ld	r29, X
    6a3e:	15 97       	sbiw	r26, 0x05	; 5
    6a40:	20 97       	sbiw	r28, 0x00	; 0
    6a42:	b1 f1       	breq	.+108    	; 0x6ab0 <_ZN6String4trimEv+0x9c>
    6a44:	8c 01       	movw	r16, r24
    6a46:	76 01       	movw	r14, r12
    6a48:	57 01       	movw	r10, r14
    6a4a:	bf ef       	ldi	r27, 0xFF	; 255
    6a4c:	ab 1a       	sub	r10, r27
    6a4e:	bb 0a       	sbc	r11, r27
	char *begin = buffer;
	while (isspace(*begin)) begin++;
    6a50:	f7 01       	movw	r30, r14
    6a52:	80 81       	ld	r24, Z
    6a54:	90 e0       	ldi	r25, 0x00	; 0
    6a56:	99 d3       	rcall	.+1842   	; 0x718a <isspace>
    6a58:	89 2b       	or	r24, r25
    6a5a:	11 f0       	breq	.+4      	; 0x6a60 <_ZN6String4trimEv+0x4c>
    6a5c:	75 01       	movw	r14, r10
    6a5e:	f4 cf       	rjmp	.-24     	; 0x6a48 <_ZN6String4trimEv+0x34>
	char *end = buffer + len - 1;
    6a60:	21 97       	sbiw	r28, 0x01	; 1
    6a62:	cc 0d       	add	r28, r12
    6a64:	dd 1d       	adc	r29, r13
	while (isspace(*end) && end >= begin) end--;
    6a66:	88 81       	ld	r24, Y
    6a68:	90 e0       	ldi	r25, 0x00	; 0
    6a6a:	8f d3       	rcall	.+1822   	; 0x718a <isspace>
    6a6c:	89 2b       	or	r24, r25
    6a6e:	29 f0       	breq	.+10     	; 0x6a7a <_ZN6String4trimEv+0x66>
    6a70:	ce 15       	cp	r28, r14
    6a72:	df 05       	cpc	r29, r15
    6a74:	10 f0       	brcs	.+4      	; 0x6a7a <_ZN6String4trimEv+0x66>
    6a76:	21 97       	sbiw	r28, 0x01	; 1
    6a78:	f6 cf       	rjmp	.-20     	; 0x6a66 <_ZN6String4trimEv+0x52>
	len = end + 1 - begin;
    6a7a:	ae 01       	movw	r20, r28
    6a7c:	4f 5f       	subi	r20, 0xFF	; 255
    6a7e:	5f 4f       	sbci	r21, 0xFF	; 255
    6a80:	4e 19       	sub	r20, r14
    6a82:	5f 09       	sbc	r21, r15
    6a84:	d8 01       	movw	r26, r16
    6a86:	15 96       	adiw	r26, 0x05	; 5
    6a88:	5c 93       	st	X, r21
    6a8a:	4e 93       	st	-X, r20
    6a8c:	14 97       	sbiw	r26, 0x04	; 4
	if (begin > buffer) memcpy(buffer, begin, len);
    6a8e:	ce 14       	cp	r12, r14
    6a90:	df 04       	cpc	r13, r15
    6a92:	18 f4       	brcc	.+6      	; 0x6a9a <_ZN6String4trimEv+0x86>
    6a94:	b7 01       	movw	r22, r14
    6a96:	c6 01       	movw	r24, r12
    6a98:	89 d3       	rcall	.+1810   	; 0x71ac <memcpy>
	buffer[len] = 0;
    6a9a:	d8 01       	movw	r26, r16
    6a9c:	ed 91       	ld	r30, X+
    6a9e:	fc 91       	ld	r31, X
    6aa0:	11 97       	sbiw	r26, 0x01	; 1
    6aa2:	14 96       	adiw	r26, 0x04	; 4
    6aa4:	8d 91       	ld	r24, X+
    6aa6:	9c 91       	ld	r25, X
    6aa8:	15 97       	sbiw	r26, 0x05	; 5
    6aaa:	e8 0f       	add	r30, r24
    6aac:	f9 1f       	adc	r31, r25
    6aae:	10 82       	st	Z, r1
}
    6ab0:	df 91       	pop	r29
    6ab2:	cf 91       	pop	r28
    6ab4:	1f 91       	pop	r17
    6ab6:	0f 91       	pop	r16
    6ab8:	ff 90       	pop	r15
    6aba:	ef 90       	pop	r14
    6abc:	df 90       	pop	r13
    6abe:	cf 90       	pop	r12
    6ac0:	bf 90       	pop	r11
    6ac2:	af 90       	pop	r10
    6ac4:	08 95       	ret

00006ac6 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    6ac6:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    6ac8:	91 8d       	ldd	r25, Z+25	; 0x19
    6aca:	22 8d       	ldd	r18, Z+26	; 0x1a
    6acc:	89 2f       	mov	r24, r25
    6ace:	90 e0       	ldi	r25, 0x00	; 0
    6ad0:	80 5c       	subi	r24, 0xC0	; 192
    6ad2:	9f 4f       	sbci	r25, 0xFF	; 255
    6ad4:	82 1b       	sub	r24, r18
    6ad6:	91 09       	sbc	r25, r1
}
    6ad8:	8f 73       	andi	r24, 0x3F	; 63
    6ada:	99 27       	eor	r25, r25
    6adc:	08 95       	ret

00006ade <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    6ade:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    6ae0:	91 8d       	ldd	r25, Z+25	; 0x19
    6ae2:	82 8d       	ldd	r24, Z+26	; 0x1a
    6ae4:	98 17       	cp	r25, r24
    6ae6:	31 f0       	breq	.+12     	; 0x6af4 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    6ae8:	82 8d       	ldd	r24, Z+26	; 0x1a
    6aea:	e8 0f       	add	r30, r24
    6aec:	f1 1d       	adc	r31, r1
    6aee:	85 8d       	ldd	r24, Z+29	; 0x1d
    6af0:	90 e0       	ldi	r25, 0x00	; 0
    6af2:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    6af4:	8f ef       	ldi	r24, 0xFF	; 255
    6af6:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    6af8:	08 95       	ret

00006afa <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    6afa:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    6afc:	91 8d       	ldd	r25, Z+25	; 0x19
    6afe:	82 8d       	ldd	r24, Z+26	; 0x1a
    6b00:	98 17       	cp	r25, r24
    6b02:	61 f0       	breq	.+24     	; 0x6b1c <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    6b04:	82 8d       	ldd	r24, Z+26	; 0x1a
    6b06:	df 01       	movw	r26, r30
    6b08:	a8 0f       	add	r26, r24
    6b0a:	b1 1d       	adc	r27, r1
    6b0c:	5d 96       	adiw	r26, 0x1d	; 29
    6b0e:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    6b10:	92 8d       	ldd	r25, Z+26	; 0x1a
    6b12:	9f 5f       	subi	r25, 0xFF	; 255
    6b14:	9f 73       	andi	r25, 0x3F	; 63
    6b16:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    6b18:	90 e0       	ldi	r25, 0x00	; 0
    6b1a:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    6b1c:	8f ef       	ldi	r24, 0xFF	; 255
    6b1e:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    6b20:	08 95       	ret

00006b22 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    6b22:	fc 01       	movw	r30, r24
    6b24:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    6b26:	44 8d       	ldd	r20, Z+28	; 0x1c
    6b28:	25 2f       	mov	r18, r21
    6b2a:	30 e0       	ldi	r19, 0x00	; 0
    6b2c:	84 2f       	mov	r24, r20
    6b2e:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    6b30:	82 1b       	sub	r24, r18
    6b32:	93 0b       	sbc	r25, r19
    6b34:	54 17       	cp	r21, r20
    6b36:	10 f0       	brcs	.+4      	; 0x6b3c <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    6b38:	cf 96       	adiw	r24, 0x3f	; 63
    6b3a:	08 95       	ret
  return tail - head - 1;
    6b3c:	01 97       	sbiw	r24, 0x01	; 1
}
    6b3e:	08 95       	ret

00006b40 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    6b40:	8d ec       	ldi	r24, 0xCD	; 205
    6b42:	9e e2       	ldi	r25, 0x2E	; 46
    6b44:	89 2b       	or	r24, r25
    6b46:	41 f0       	breq	.+16     	; 0x6b58 <_Z14serialEventRunv+0x18>
    6b48:	80 e0       	ldi	r24, 0x00	; 0
    6b4a:	90 e0       	ldi	r25, 0x00	; 0
    6b4c:	89 2b       	or	r24, r25
    6b4e:	21 f0       	breq	.+8      	; 0x6b58 <_Z14serialEventRunv+0x18>
    6b50:	24 d9       	rcall	.-3512   	; 0x5d9a <_Z17Serial0_availablev>
    6b52:	81 11       	cpse	r24, r1
    6b54:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    6b58:	08 95       	ret

00006b5a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    6b5a:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    6b5c:	84 8d       	ldd	r24, Z+28	; 0x1c
    6b5e:	df 01       	movw	r26, r30
    6b60:	a8 0f       	add	r26, r24
    6b62:	b1 1d       	adc	r27, r1
    6b64:	a3 5a       	subi	r26, 0xA3	; 163
    6b66:	bf 4f       	sbci	r27, 0xFF	; 255
    6b68:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    6b6a:	84 8d       	ldd	r24, Z+28	; 0x1c
    6b6c:	90 e0       	ldi	r25, 0x00	; 0
    6b6e:	01 96       	adiw	r24, 0x01	; 1
    6b70:	8f 73       	andi	r24, 0x3F	; 63
    6b72:	99 27       	eor	r25, r25
    6b74:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    6b76:	a6 89       	ldd	r26, Z+22	; 0x16
    6b78:	b7 89       	ldd	r27, Z+23	; 0x17
    6b7a:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    6b7c:	a0 89       	ldd	r26, Z+16	; 0x10
    6b7e:	b1 89       	ldd	r27, Z+17	; 0x11
    6b80:	8c 91       	ld	r24, X
    6b82:	83 70       	andi	r24, 0x03	; 3
    6b84:	80 64       	ori	r24, 0x40	; 64
    6b86:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    6b88:	93 8d       	ldd	r25, Z+27	; 0x1b
    6b8a:	84 8d       	ldd	r24, Z+28	; 0x1c
    6b8c:	98 13       	cpse	r25, r24
    6b8e:	06 c0       	rjmp	.+12     	; 0x6b9c <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    6b90:	02 88       	ldd	r0, Z+18	; 0x12
    6b92:	f3 89       	ldd	r31, Z+19	; 0x13
    6b94:	e0 2d       	mov	r30, r0
    6b96:	80 81       	ld	r24, Z
    6b98:	8f 7d       	andi	r24, 0xDF	; 223
    6b9a:	80 83       	st	Z, r24
    6b9c:	08 95       	ret

00006b9e <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    6b9e:	ef 92       	push	r14
    6ba0:	ff 92       	push	r15
    6ba2:	0f 93       	push	r16
    6ba4:	1f 93       	push	r17
    6ba6:	cf 93       	push	r28
    6ba8:	df 93       	push	r29
    6baa:	ec 01       	movw	r28, r24
  _written = true;
    6bac:	81 e0       	ldi	r24, 0x01	; 1
    6bae:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    6bb0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    6bb2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    6bb4:	98 13       	cpse	r25, r24
    6bb6:	05 c0       	rjmp	.+10     	; 0x6bc2 <_ZN14HardwareSerial5writeEh+0x24>
    6bb8:	e8 89       	ldd	r30, Y+16	; 0x10
    6bba:	f9 89       	ldd	r31, Y+17	; 0x11
    6bbc:	80 81       	ld	r24, Z
    6bbe:	85 fd       	sbrc	r24, 5
    6bc0:	25 c0       	rjmp	.+74     	; 0x6c0c <_ZN14HardwareSerial5writeEh+0x6e>
    6bc2:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    6bc4:	0b 8d       	ldd	r16, Y+27	; 0x1b
    6bc6:	10 e0       	ldi	r17, 0x00	; 0
    6bc8:	0f 5f       	subi	r16, 0xFF	; 255
    6bca:	1f 4f       	sbci	r17, 0xFF	; 255
    6bcc:	0f 73       	andi	r16, 0x3F	; 63
    6bce:	11 27       	eor	r17, r17
    6bd0:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    6bd2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    6bd4:	e8 12       	cpse	r14, r24
    6bd6:	0b c0       	rjmp	.+22     	; 0x6bee <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    6bd8:	0f b6       	in	r0, 0x3f	; 63
    6bda:	07 fc       	sbrc	r0, 7
    6bdc:	fa cf       	rjmp	.-12     	; 0x6bd2 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    6bde:	e8 89       	ldd	r30, Y+16	; 0x10
    6be0:	f9 89       	ldd	r31, Y+17	; 0x11
    6be2:	80 81       	ld	r24, Z
    6be4:	85 ff       	sbrs	r24, 5
    6be6:	f5 cf       	rjmp	.-22     	; 0x6bd2 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    6be8:	ce 01       	movw	r24, r28
    6bea:	b7 df       	rcall	.-146    	; 0x6b5a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    6bec:	f2 cf       	rjmp	.-28     	; 0x6bd2 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    6bee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6bf0:	fe 01       	movw	r30, r28
    6bf2:	e8 0f       	add	r30, r24
    6bf4:	f1 1d       	adc	r31, r1
    6bf6:	e3 5a       	subi	r30, 0xA3	; 163
    6bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    6bfa:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    6bfc:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    6bfe:	f8 94       	cli
    _tx_buffer_head = i;
    6c00:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    6c02:	ea 89       	ldd	r30, Y+18	; 0x12
    6c04:	fb 89       	ldd	r31, Y+19	; 0x13
    6c06:	80 81       	ld	r24, Z
    6c08:	80 62       	ori	r24, 0x20	; 32
    6c0a:	0a c0       	rjmp	.+20     	; 0x6c20 <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    6c0c:	9f b7       	in	r25, 0x3f	; 63
    6c0e:	f8 94       	cli
      *_udr = c;
    6c10:	ee 89       	ldd	r30, Y+22	; 0x16
    6c12:	ff 89       	ldd	r31, Y+23	; 0x17
    6c14:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    6c16:	e8 89       	ldd	r30, Y+16	; 0x10
    6c18:	f9 89       	ldd	r31, Y+17	; 0x11
    6c1a:	80 81       	ld	r24, Z
    6c1c:	83 70       	andi	r24, 0x03	; 3
    6c1e:	80 64       	ori	r24, 0x40	; 64
    6c20:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    6c22:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    6c24:	81 e0       	ldi	r24, 0x01	; 1
    6c26:	90 e0       	ldi	r25, 0x00	; 0
    6c28:	df 91       	pop	r29
    6c2a:	cf 91       	pop	r28
    6c2c:	1f 91       	pop	r17
    6c2e:	0f 91       	pop	r16
    6c30:	ff 90       	pop	r15
    6c32:	ef 90       	pop	r14
    6c34:	08 95       	ret

00006c36 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    6c36:	cf 93       	push	r28
    6c38:	df 93       	push	r29
    6c3a:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    6c3c:	88 8d       	ldd	r24, Y+24	; 0x18
    6c3e:	88 23       	and	r24, r24
    6c40:	c1 f0       	breq	.+48     	; 0x6c72 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    6c42:	ea 89       	ldd	r30, Y+18	; 0x12
    6c44:	fb 89       	ldd	r31, Y+19	; 0x13
    6c46:	80 81       	ld	r24, Z
    6c48:	85 fd       	sbrc	r24, 5
    6c4a:	05 c0       	rjmp	.+10     	; 0x6c56 <_ZN14HardwareSerial5flushEv+0x20>
    6c4c:	a8 89       	ldd	r26, Y+16	; 0x10
    6c4e:	b9 89       	ldd	r27, Y+17	; 0x11
    6c50:	8c 91       	ld	r24, X
    6c52:	86 fd       	sbrc	r24, 6
    6c54:	0e c0       	rjmp	.+28     	; 0x6c72 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    6c56:	0f b6       	in	r0, 0x3f	; 63
    6c58:	07 fc       	sbrc	r0, 7
    6c5a:	f5 cf       	rjmp	.-22     	; 0x6c46 <_ZN14HardwareSerial5flushEv+0x10>
    6c5c:	80 81       	ld	r24, Z
    6c5e:	85 ff       	sbrs	r24, 5
    6c60:	f2 cf       	rjmp	.-28     	; 0x6c46 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    6c62:	a8 89       	ldd	r26, Y+16	; 0x10
    6c64:	b9 89       	ldd	r27, Y+17	; 0x11
    6c66:	8c 91       	ld	r24, X
    6c68:	85 ff       	sbrs	r24, 5
    6c6a:	ed cf       	rjmp	.-38     	; 0x6c46 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    6c6c:	ce 01       	movw	r24, r28
    6c6e:	75 df       	rcall	.-278    	; 0x6b5a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    6c70:	e8 cf       	rjmp	.-48     	; 0x6c42 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    6c72:	df 91       	pop	r29
    6c74:	cf 91       	pop	r28
    6c76:	08 95       	ret

00006c78 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    6c78:	08 95       	ret

00006c7a <__udivmodqi4>:
    6c7a:	99 1b       	sub	r25, r25
    6c7c:	79 e0       	ldi	r23, 0x09	; 9
    6c7e:	04 c0       	rjmp	.+8      	; 0x6c88 <__udivmodqi4_ep>

00006c80 <__udivmodqi4_loop>:
    6c80:	99 1f       	adc	r25, r25
    6c82:	96 17       	cp	r25, r22
    6c84:	08 f0       	brcs	.+2      	; 0x6c88 <__udivmodqi4_ep>
    6c86:	96 1b       	sub	r25, r22

00006c88 <__udivmodqi4_ep>:
    6c88:	88 1f       	adc	r24, r24
    6c8a:	7a 95       	dec	r23
    6c8c:	c9 f7       	brne	.-14     	; 0x6c80 <__udivmodqi4_loop>
    6c8e:	80 95       	com	r24
    6c90:	08 95       	ret

00006c92 <__udivmodhi4>:
    6c92:	aa 1b       	sub	r26, r26
    6c94:	bb 1b       	sub	r27, r27
    6c96:	51 e1       	ldi	r21, 0x11	; 17
    6c98:	07 c0       	rjmp	.+14     	; 0x6ca8 <__udivmodhi4_ep>

00006c9a <__udivmodhi4_loop>:
    6c9a:	aa 1f       	adc	r26, r26
    6c9c:	bb 1f       	adc	r27, r27
    6c9e:	a6 17       	cp	r26, r22
    6ca0:	b7 07       	cpc	r27, r23
    6ca2:	10 f0       	brcs	.+4      	; 0x6ca8 <__udivmodhi4_ep>
    6ca4:	a6 1b       	sub	r26, r22
    6ca6:	b7 0b       	sbc	r27, r23

00006ca8 <__udivmodhi4_ep>:
    6ca8:	88 1f       	adc	r24, r24
    6caa:	99 1f       	adc	r25, r25
    6cac:	5a 95       	dec	r21
    6cae:	a9 f7       	brne	.-22     	; 0x6c9a <__udivmodhi4_loop>
    6cb0:	80 95       	com	r24
    6cb2:	90 95       	com	r25
    6cb4:	bc 01       	movw	r22, r24
    6cb6:	cd 01       	movw	r24, r26
    6cb8:	08 95       	ret

00006cba <__udivmodsi4>:
    6cba:	a1 e2       	ldi	r26, 0x21	; 33
    6cbc:	1a 2e       	mov	r1, r26
    6cbe:	aa 1b       	sub	r26, r26
    6cc0:	bb 1b       	sub	r27, r27
    6cc2:	fd 01       	movw	r30, r26
    6cc4:	0d c0       	rjmp	.+26     	; 0x6ce0 <__udivmodsi4_ep>

00006cc6 <__udivmodsi4_loop>:
    6cc6:	aa 1f       	adc	r26, r26
    6cc8:	bb 1f       	adc	r27, r27
    6cca:	ee 1f       	adc	r30, r30
    6ccc:	ff 1f       	adc	r31, r31
    6cce:	a2 17       	cp	r26, r18
    6cd0:	b3 07       	cpc	r27, r19
    6cd2:	e4 07       	cpc	r30, r20
    6cd4:	f5 07       	cpc	r31, r21
    6cd6:	20 f0       	brcs	.+8      	; 0x6ce0 <__udivmodsi4_ep>
    6cd8:	a2 1b       	sub	r26, r18
    6cda:	b3 0b       	sbc	r27, r19
    6cdc:	e4 0b       	sbc	r30, r20
    6cde:	f5 0b       	sbc	r31, r21

00006ce0 <__udivmodsi4_ep>:
    6ce0:	66 1f       	adc	r22, r22
    6ce2:	77 1f       	adc	r23, r23
    6ce4:	88 1f       	adc	r24, r24
    6ce6:	99 1f       	adc	r25, r25
    6ce8:	1a 94       	dec	r1
    6cea:	69 f7       	brne	.-38     	; 0x6cc6 <__udivmodsi4_loop>
    6cec:	60 95       	com	r22
    6cee:	70 95       	com	r23
    6cf0:	80 95       	com	r24
    6cf2:	90 95       	com	r25
    6cf4:	9b 01       	movw	r18, r22
    6cf6:	ac 01       	movw	r20, r24
    6cf8:	bd 01       	movw	r22, r26
    6cfa:	cf 01       	movw	r24, r30
    6cfc:	08 95       	ret

00006cfe <__tablejump2__>:
    6cfe:	ee 0f       	add	r30, r30
    6d00:	ff 1f       	adc	r31, r31
    6d02:	00 24       	eor	r0, r0
    6d04:	00 1c       	adc	r0, r0
    6d06:	0b be       	out	0x3b, r0	; 59
    6d08:	07 90       	elpm	r0, Z+
    6d0a:	f6 91       	elpm	r31, Z
    6d0c:	e0 2d       	mov	r30, r0
    6d0e:	09 94       	ijmp

00006d10 <__umulhisi3>:
    6d10:	a2 9f       	mul	r26, r18
    6d12:	b0 01       	movw	r22, r0
    6d14:	b3 9f       	mul	r27, r19
    6d16:	c0 01       	movw	r24, r0
    6d18:	a3 9f       	mul	r26, r19
    6d1a:	70 0d       	add	r23, r0
    6d1c:	81 1d       	adc	r24, r1
    6d1e:	11 24       	eor	r1, r1
    6d20:	91 1d       	adc	r25, r1
    6d22:	b2 9f       	mul	r27, r18
    6d24:	70 0d       	add	r23, r0
    6d26:	81 1d       	adc	r24, r1
    6d28:	11 24       	eor	r1, r1
    6d2a:	91 1d       	adc	r25, r1
    6d2c:	08 95       	ret

00006d2e <__muluhisi3>:
    6d2e:	f0 df       	rcall	.-32     	; 0x6d10 <__umulhisi3>
    6d30:	a5 9f       	mul	r26, r21
    6d32:	90 0d       	add	r25, r0
    6d34:	b4 9f       	mul	r27, r20
    6d36:	90 0d       	add	r25, r0
    6d38:	a4 9f       	mul	r26, r20
    6d3a:	80 0d       	add	r24, r0
    6d3c:	91 1d       	adc	r25, r1
    6d3e:	11 24       	eor	r1, r1
    6d40:	08 95       	ret

00006d42 <dtostrf>:
    6d42:	ef 92       	push	r14
    6d44:	0f 93       	push	r16
    6d46:	1f 93       	push	r17
    6d48:	cf 93       	push	r28
    6d4a:	df 93       	push	r29
    6d4c:	e8 01       	movw	r28, r16
    6d4e:	47 fd       	sbrc	r20, 7
    6d50:	02 c0       	rjmp	.+4      	; 0x6d56 <dtostrf+0x14>
    6d52:	34 e0       	ldi	r19, 0x04	; 4
    6d54:	01 c0       	rjmp	.+2      	; 0x6d58 <dtostrf+0x16>
    6d56:	34 e1       	ldi	r19, 0x14	; 20
    6d58:	04 2e       	mov	r0, r20
    6d5a:	00 0c       	add	r0, r0
    6d5c:	55 0b       	sbc	r21, r21
    6d5e:	57 ff       	sbrs	r21, 7
    6d60:	03 c0       	rjmp	.+6      	; 0x6d68 <dtostrf+0x26>
    6d62:	51 95       	neg	r21
    6d64:	41 95       	neg	r20
    6d66:	51 09       	sbc	r21, r1
    6d68:	e3 2e       	mov	r14, r19
    6d6a:	02 2f       	mov	r16, r18
    6d6c:	24 2f       	mov	r18, r20
    6d6e:	ae 01       	movw	r20, r28
    6d70:	a6 d2       	rcall	.+1356   	; 0x72be <dtoa_prf>
    6d72:	ce 01       	movw	r24, r28
    6d74:	df 91       	pop	r29
    6d76:	cf 91       	pop	r28
    6d78:	1f 91       	pop	r17
    6d7a:	0f 91       	pop	r16
    6d7c:	ef 90       	pop	r14
    6d7e:	08 95       	ret

00006d80 <malloc>:
    6d80:	0f 93       	push	r16
    6d82:	1f 93       	push	r17
    6d84:	cf 93       	push	r28
    6d86:	df 93       	push	r29
    6d88:	82 30       	cpi	r24, 0x02	; 2
    6d8a:	91 05       	cpc	r25, r1
    6d8c:	10 f4       	brcc	.+4      	; 0x6d92 <malloc+0x12>
    6d8e:	82 e0       	ldi	r24, 0x02	; 2
    6d90:	90 e0       	ldi	r25, 0x00	; 0
    6d92:	e0 91 77 0b 	lds	r30, 0x0B77	; 0x800b77 <__flp>
    6d96:	f0 91 78 0b 	lds	r31, 0x0B78	; 0x800b78 <__flp+0x1>
    6d9a:	20 e0       	ldi	r18, 0x00	; 0
    6d9c:	30 e0       	ldi	r19, 0x00	; 0
    6d9e:	a0 e0       	ldi	r26, 0x00	; 0
    6da0:	b0 e0       	ldi	r27, 0x00	; 0
    6da2:	30 97       	sbiw	r30, 0x00	; 0
    6da4:	19 f1       	breq	.+70     	; 0x6dec <malloc+0x6c>
    6da6:	40 81       	ld	r20, Z
    6da8:	51 81       	ldd	r21, Z+1	; 0x01
    6daa:	02 81       	ldd	r16, Z+2	; 0x02
    6dac:	13 81       	ldd	r17, Z+3	; 0x03
    6dae:	48 17       	cp	r20, r24
    6db0:	59 07       	cpc	r21, r25
    6db2:	c8 f0       	brcs	.+50     	; 0x6de6 <malloc+0x66>
    6db4:	84 17       	cp	r24, r20
    6db6:	95 07       	cpc	r25, r21
    6db8:	69 f4       	brne	.+26     	; 0x6dd4 <malloc+0x54>
    6dba:	10 97       	sbiw	r26, 0x00	; 0
    6dbc:	31 f0       	breq	.+12     	; 0x6dca <malloc+0x4a>
    6dbe:	12 96       	adiw	r26, 0x02	; 2
    6dc0:	0c 93       	st	X, r16
    6dc2:	12 97       	sbiw	r26, 0x02	; 2
    6dc4:	13 96       	adiw	r26, 0x03	; 3
    6dc6:	1c 93       	st	X, r17
    6dc8:	27 c0       	rjmp	.+78     	; 0x6e18 <malloc+0x98>
    6dca:	00 93 77 0b 	sts	0x0B77, r16	; 0x800b77 <__flp>
    6dce:	10 93 78 0b 	sts	0x0B78, r17	; 0x800b78 <__flp+0x1>
    6dd2:	22 c0       	rjmp	.+68     	; 0x6e18 <malloc+0x98>
    6dd4:	21 15       	cp	r18, r1
    6dd6:	31 05       	cpc	r19, r1
    6dd8:	19 f0       	breq	.+6      	; 0x6de0 <malloc+0x60>
    6dda:	42 17       	cp	r20, r18
    6ddc:	53 07       	cpc	r21, r19
    6dde:	18 f4       	brcc	.+6      	; 0x6de6 <malloc+0x66>
    6de0:	9a 01       	movw	r18, r20
    6de2:	bd 01       	movw	r22, r26
    6de4:	ef 01       	movw	r28, r30
    6de6:	df 01       	movw	r26, r30
    6de8:	f8 01       	movw	r30, r16
    6dea:	db cf       	rjmp	.-74     	; 0x6da2 <malloc+0x22>
    6dec:	21 15       	cp	r18, r1
    6dee:	31 05       	cpc	r19, r1
    6df0:	f9 f0       	breq	.+62     	; 0x6e30 <malloc+0xb0>
    6df2:	28 1b       	sub	r18, r24
    6df4:	39 0b       	sbc	r19, r25
    6df6:	24 30       	cpi	r18, 0x04	; 4
    6df8:	31 05       	cpc	r19, r1
    6dfa:	80 f4       	brcc	.+32     	; 0x6e1c <malloc+0x9c>
    6dfc:	8a 81       	ldd	r24, Y+2	; 0x02
    6dfe:	9b 81       	ldd	r25, Y+3	; 0x03
    6e00:	61 15       	cp	r22, r1
    6e02:	71 05       	cpc	r23, r1
    6e04:	21 f0       	breq	.+8      	; 0x6e0e <malloc+0x8e>
    6e06:	fb 01       	movw	r30, r22
    6e08:	93 83       	std	Z+3, r25	; 0x03
    6e0a:	82 83       	std	Z+2, r24	; 0x02
    6e0c:	04 c0       	rjmp	.+8      	; 0x6e16 <malloc+0x96>
    6e0e:	90 93 78 0b 	sts	0x0B78, r25	; 0x800b78 <__flp+0x1>
    6e12:	80 93 77 0b 	sts	0x0B77, r24	; 0x800b77 <__flp>
    6e16:	fe 01       	movw	r30, r28
    6e18:	32 96       	adiw	r30, 0x02	; 2
    6e1a:	44 c0       	rjmp	.+136    	; 0x6ea4 <malloc+0x124>
    6e1c:	fe 01       	movw	r30, r28
    6e1e:	e2 0f       	add	r30, r18
    6e20:	f3 1f       	adc	r31, r19
    6e22:	81 93       	st	Z+, r24
    6e24:	91 93       	st	Z+, r25
    6e26:	22 50       	subi	r18, 0x02	; 2
    6e28:	31 09       	sbc	r19, r1
    6e2a:	39 83       	std	Y+1, r19	; 0x01
    6e2c:	28 83       	st	Y, r18
    6e2e:	3a c0       	rjmp	.+116    	; 0x6ea4 <malloc+0x124>
    6e30:	20 91 75 0b 	lds	r18, 0x0B75	; 0x800b75 <__brkval>
    6e34:	30 91 76 0b 	lds	r19, 0x0B76	; 0x800b76 <__brkval+0x1>
    6e38:	23 2b       	or	r18, r19
    6e3a:	41 f4       	brne	.+16     	; 0x6e4c <malloc+0xcc>
    6e3c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    6e40:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    6e44:	30 93 76 0b 	sts	0x0B76, r19	; 0x800b76 <__brkval+0x1>
    6e48:	20 93 75 0b 	sts	0x0B75, r18	; 0x800b75 <__brkval>
    6e4c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    6e50:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    6e54:	21 15       	cp	r18, r1
    6e56:	31 05       	cpc	r19, r1
    6e58:	41 f4       	brne	.+16     	; 0x6e6a <malloc+0xea>
    6e5a:	2d b7       	in	r18, 0x3d	; 61
    6e5c:	3e b7       	in	r19, 0x3e	; 62
    6e5e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    6e62:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    6e66:	24 1b       	sub	r18, r20
    6e68:	35 0b       	sbc	r19, r21
    6e6a:	e0 91 75 0b 	lds	r30, 0x0B75	; 0x800b75 <__brkval>
    6e6e:	f0 91 76 0b 	lds	r31, 0x0B76	; 0x800b76 <__brkval+0x1>
    6e72:	e2 17       	cp	r30, r18
    6e74:	f3 07       	cpc	r31, r19
    6e76:	a0 f4       	brcc	.+40     	; 0x6ea0 <malloc+0x120>
    6e78:	2e 1b       	sub	r18, r30
    6e7a:	3f 0b       	sbc	r19, r31
    6e7c:	28 17       	cp	r18, r24
    6e7e:	39 07       	cpc	r19, r25
    6e80:	78 f0       	brcs	.+30     	; 0x6ea0 <malloc+0x120>
    6e82:	ac 01       	movw	r20, r24
    6e84:	4e 5f       	subi	r20, 0xFE	; 254
    6e86:	5f 4f       	sbci	r21, 0xFF	; 255
    6e88:	24 17       	cp	r18, r20
    6e8a:	35 07       	cpc	r19, r21
    6e8c:	48 f0       	brcs	.+18     	; 0x6ea0 <malloc+0x120>
    6e8e:	4e 0f       	add	r20, r30
    6e90:	5f 1f       	adc	r21, r31
    6e92:	50 93 76 0b 	sts	0x0B76, r21	; 0x800b76 <__brkval+0x1>
    6e96:	40 93 75 0b 	sts	0x0B75, r20	; 0x800b75 <__brkval>
    6e9a:	81 93       	st	Z+, r24
    6e9c:	91 93       	st	Z+, r25
    6e9e:	02 c0       	rjmp	.+4      	; 0x6ea4 <malloc+0x124>
    6ea0:	e0 e0       	ldi	r30, 0x00	; 0
    6ea2:	f0 e0       	ldi	r31, 0x00	; 0
    6ea4:	cf 01       	movw	r24, r30
    6ea6:	df 91       	pop	r29
    6ea8:	cf 91       	pop	r28
    6eaa:	1f 91       	pop	r17
    6eac:	0f 91       	pop	r16
    6eae:	08 95       	ret

00006eb0 <free>:
    6eb0:	cf 93       	push	r28
    6eb2:	df 93       	push	r29
    6eb4:	00 97       	sbiw	r24, 0x00	; 0
    6eb6:	09 f4       	brne	.+2      	; 0x6eba <free+0xa>
    6eb8:	81 c0       	rjmp	.+258    	; 0x6fbc <free+0x10c>
    6eba:	fc 01       	movw	r30, r24
    6ebc:	32 97       	sbiw	r30, 0x02	; 2
    6ebe:	13 82       	std	Z+3, r1	; 0x03
    6ec0:	12 82       	std	Z+2, r1	; 0x02
    6ec2:	a0 91 77 0b 	lds	r26, 0x0B77	; 0x800b77 <__flp>
    6ec6:	b0 91 78 0b 	lds	r27, 0x0B78	; 0x800b78 <__flp+0x1>
    6eca:	10 97       	sbiw	r26, 0x00	; 0
    6ecc:	81 f4       	brne	.+32     	; 0x6eee <free+0x3e>
    6ece:	20 81       	ld	r18, Z
    6ed0:	31 81       	ldd	r19, Z+1	; 0x01
    6ed2:	82 0f       	add	r24, r18
    6ed4:	93 1f       	adc	r25, r19
    6ed6:	20 91 75 0b 	lds	r18, 0x0B75	; 0x800b75 <__brkval>
    6eda:	30 91 76 0b 	lds	r19, 0x0B76	; 0x800b76 <__brkval+0x1>
    6ede:	28 17       	cp	r18, r24
    6ee0:	39 07       	cpc	r19, r25
    6ee2:	51 f5       	brne	.+84     	; 0x6f38 <free+0x88>
    6ee4:	f0 93 76 0b 	sts	0x0B76, r31	; 0x800b76 <__brkval+0x1>
    6ee8:	e0 93 75 0b 	sts	0x0B75, r30	; 0x800b75 <__brkval>
    6eec:	67 c0       	rjmp	.+206    	; 0x6fbc <free+0x10c>
    6eee:	ed 01       	movw	r28, r26
    6ef0:	20 e0       	ldi	r18, 0x00	; 0
    6ef2:	30 e0       	ldi	r19, 0x00	; 0
    6ef4:	ce 17       	cp	r28, r30
    6ef6:	df 07       	cpc	r29, r31
    6ef8:	40 f4       	brcc	.+16     	; 0x6f0a <free+0x5a>
    6efa:	4a 81       	ldd	r20, Y+2	; 0x02
    6efc:	5b 81       	ldd	r21, Y+3	; 0x03
    6efe:	9e 01       	movw	r18, r28
    6f00:	41 15       	cp	r20, r1
    6f02:	51 05       	cpc	r21, r1
    6f04:	f1 f0       	breq	.+60     	; 0x6f42 <free+0x92>
    6f06:	ea 01       	movw	r28, r20
    6f08:	f5 cf       	rjmp	.-22     	; 0x6ef4 <free+0x44>
    6f0a:	d3 83       	std	Z+3, r29	; 0x03
    6f0c:	c2 83       	std	Z+2, r28	; 0x02
    6f0e:	40 81       	ld	r20, Z
    6f10:	51 81       	ldd	r21, Z+1	; 0x01
    6f12:	84 0f       	add	r24, r20
    6f14:	95 1f       	adc	r25, r21
    6f16:	c8 17       	cp	r28, r24
    6f18:	d9 07       	cpc	r29, r25
    6f1a:	59 f4       	brne	.+22     	; 0x6f32 <free+0x82>
    6f1c:	88 81       	ld	r24, Y
    6f1e:	99 81       	ldd	r25, Y+1	; 0x01
    6f20:	84 0f       	add	r24, r20
    6f22:	95 1f       	adc	r25, r21
    6f24:	02 96       	adiw	r24, 0x02	; 2
    6f26:	91 83       	std	Z+1, r25	; 0x01
    6f28:	80 83       	st	Z, r24
    6f2a:	8a 81       	ldd	r24, Y+2	; 0x02
    6f2c:	9b 81       	ldd	r25, Y+3	; 0x03
    6f2e:	93 83       	std	Z+3, r25	; 0x03
    6f30:	82 83       	std	Z+2, r24	; 0x02
    6f32:	21 15       	cp	r18, r1
    6f34:	31 05       	cpc	r19, r1
    6f36:	29 f4       	brne	.+10     	; 0x6f42 <free+0x92>
    6f38:	f0 93 78 0b 	sts	0x0B78, r31	; 0x800b78 <__flp+0x1>
    6f3c:	e0 93 77 0b 	sts	0x0B77, r30	; 0x800b77 <__flp>
    6f40:	3d c0       	rjmp	.+122    	; 0x6fbc <free+0x10c>
    6f42:	e9 01       	movw	r28, r18
    6f44:	fb 83       	std	Y+3, r31	; 0x03
    6f46:	ea 83       	std	Y+2, r30	; 0x02
    6f48:	49 91       	ld	r20, Y+
    6f4a:	59 91       	ld	r21, Y+
    6f4c:	c4 0f       	add	r28, r20
    6f4e:	d5 1f       	adc	r29, r21
    6f50:	ec 17       	cp	r30, r28
    6f52:	fd 07       	cpc	r31, r29
    6f54:	61 f4       	brne	.+24     	; 0x6f6e <free+0xbe>
    6f56:	80 81       	ld	r24, Z
    6f58:	91 81       	ldd	r25, Z+1	; 0x01
    6f5a:	84 0f       	add	r24, r20
    6f5c:	95 1f       	adc	r25, r21
    6f5e:	02 96       	adiw	r24, 0x02	; 2
    6f60:	e9 01       	movw	r28, r18
    6f62:	99 83       	std	Y+1, r25	; 0x01
    6f64:	88 83       	st	Y, r24
    6f66:	82 81       	ldd	r24, Z+2	; 0x02
    6f68:	93 81       	ldd	r25, Z+3	; 0x03
    6f6a:	9b 83       	std	Y+3, r25	; 0x03
    6f6c:	8a 83       	std	Y+2, r24	; 0x02
    6f6e:	e0 e0       	ldi	r30, 0x00	; 0
    6f70:	f0 e0       	ldi	r31, 0x00	; 0
    6f72:	12 96       	adiw	r26, 0x02	; 2
    6f74:	8d 91       	ld	r24, X+
    6f76:	9c 91       	ld	r25, X
    6f78:	13 97       	sbiw	r26, 0x03	; 3
    6f7a:	00 97       	sbiw	r24, 0x00	; 0
    6f7c:	19 f0       	breq	.+6      	; 0x6f84 <free+0xd4>
    6f7e:	fd 01       	movw	r30, r26
    6f80:	dc 01       	movw	r26, r24
    6f82:	f7 cf       	rjmp	.-18     	; 0x6f72 <free+0xc2>
    6f84:	8d 91       	ld	r24, X+
    6f86:	9c 91       	ld	r25, X
    6f88:	11 97       	sbiw	r26, 0x01	; 1
    6f8a:	9d 01       	movw	r18, r26
    6f8c:	2e 5f       	subi	r18, 0xFE	; 254
    6f8e:	3f 4f       	sbci	r19, 0xFF	; 255
    6f90:	82 0f       	add	r24, r18
    6f92:	93 1f       	adc	r25, r19
    6f94:	20 91 75 0b 	lds	r18, 0x0B75	; 0x800b75 <__brkval>
    6f98:	30 91 76 0b 	lds	r19, 0x0B76	; 0x800b76 <__brkval+0x1>
    6f9c:	28 17       	cp	r18, r24
    6f9e:	39 07       	cpc	r19, r25
    6fa0:	69 f4       	brne	.+26     	; 0x6fbc <free+0x10c>
    6fa2:	30 97       	sbiw	r30, 0x00	; 0
    6fa4:	29 f4       	brne	.+10     	; 0x6fb0 <free+0x100>
    6fa6:	10 92 78 0b 	sts	0x0B78, r1	; 0x800b78 <__flp+0x1>
    6faa:	10 92 77 0b 	sts	0x0B77, r1	; 0x800b77 <__flp>
    6fae:	02 c0       	rjmp	.+4      	; 0x6fb4 <free+0x104>
    6fb0:	13 82       	std	Z+3, r1	; 0x03
    6fb2:	12 82       	std	Z+2, r1	; 0x02
    6fb4:	b0 93 76 0b 	sts	0x0B76, r27	; 0x800b76 <__brkval+0x1>
    6fb8:	a0 93 75 0b 	sts	0x0B75, r26	; 0x800b75 <__brkval>
    6fbc:	df 91       	pop	r29
    6fbe:	cf 91       	pop	r28
    6fc0:	08 95       	ret

00006fc2 <realloc>:
    6fc2:	6f 92       	push	r6
    6fc4:	7f 92       	push	r7
    6fc6:	8f 92       	push	r8
    6fc8:	9f 92       	push	r9
    6fca:	af 92       	push	r10
    6fcc:	bf 92       	push	r11
    6fce:	cf 92       	push	r12
    6fd0:	df 92       	push	r13
    6fd2:	ef 92       	push	r14
    6fd4:	ff 92       	push	r15
    6fd6:	0f 93       	push	r16
    6fd8:	1f 93       	push	r17
    6fda:	cf 93       	push	r28
    6fdc:	df 93       	push	r29
    6fde:	00 97       	sbiw	r24, 0x00	; 0
    6fe0:	81 f4       	brne	.+32     	; 0x7002 <realloc+0x40>
    6fe2:	cb 01       	movw	r24, r22
    6fe4:	df 91       	pop	r29
    6fe6:	cf 91       	pop	r28
    6fe8:	1f 91       	pop	r17
    6fea:	0f 91       	pop	r16
    6fec:	ff 90       	pop	r15
    6fee:	ef 90       	pop	r14
    6ff0:	df 90       	pop	r13
    6ff2:	cf 90       	pop	r12
    6ff4:	bf 90       	pop	r11
    6ff6:	af 90       	pop	r10
    6ff8:	9f 90       	pop	r9
    6ffa:	8f 90       	pop	r8
    6ffc:	7f 90       	pop	r7
    6ffe:	6f 90       	pop	r6
    7000:	bf ce       	rjmp	.-642    	; 0x6d80 <malloc>
    7002:	fc 01       	movw	r30, r24
    7004:	e6 0f       	add	r30, r22
    7006:	f7 1f       	adc	r31, r23
    7008:	9c 01       	movw	r18, r24
    700a:	22 50       	subi	r18, 0x02	; 2
    700c:	31 09       	sbc	r19, r1
    700e:	e2 17       	cp	r30, r18
    7010:	f3 07       	cpc	r31, r19
    7012:	08 f4       	brcc	.+2      	; 0x7016 <realloc+0x54>
    7014:	a5 c0       	rjmp	.+330    	; 0x7160 <realloc+0x19e>
    7016:	ec 01       	movw	r28, r24
    7018:	d9 01       	movw	r26, r18
    701a:	0d 91       	ld	r16, X+
    701c:	1c 91       	ld	r17, X
    701e:	11 97       	sbiw	r26, 0x01	; 1
    7020:	06 17       	cp	r16, r22
    7022:	17 07       	cpc	r17, r23
    7024:	a8 f0       	brcs	.+42     	; 0x7050 <realloc+0x8e>
    7026:	05 30       	cpi	r16, 0x05	; 5
    7028:	11 05       	cpc	r17, r1
    702a:	08 f4       	brcc	.+2      	; 0x702e <realloc+0x6c>
    702c:	97 c0       	rjmp	.+302    	; 0x715c <realloc+0x19a>
    702e:	c8 01       	movw	r24, r16
    7030:	04 97       	sbiw	r24, 0x04	; 4
    7032:	86 17       	cp	r24, r22
    7034:	97 07       	cpc	r25, r23
    7036:	08 f4       	brcc	.+2      	; 0x703a <realloc+0x78>
    7038:	91 c0       	rjmp	.+290    	; 0x715c <realloc+0x19a>
    703a:	02 50       	subi	r16, 0x02	; 2
    703c:	11 09       	sbc	r17, r1
    703e:	06 1b       	sub	r16, r22
    7040:	17 0b       	sbc	r17, r23
    7042:	01 93       	st	Z+, r16
    7044:	11 93       	st	Z+, r17
    7046:	6d 93       	st	X+, r22
    7048:	7c 93       	st	X, r23
    704a:	cf 01       	movw	r24, r30
    704c:	31 df       	rcall	.-414    	; 0x6eb0 <free>
    704e:	86 c0       	rjmp	.+268    	; 0x715c <realloc+0x19a>
    7050:	5b 01       	movw	r10, r22
    7052:	a0 1a       	sub	r10, r16
    7054:	b1 0a       	sbc	r11, r17
    7056:	4c 01       	movw	r8, r24
    7058:	80 0e       	add	r8, r16
    705a:	91 1e       	adc	r9, r17
    705c:	a0 91 77 0b 	lds	r26, 0x0B77	; 0x800b77 <__flp>
    7060:	b0 91 78 0b 	lds	r27, 0x0B78	; 0x800b78 <__flp+0x1>
    7064:	61 2c       	mov	r6, r1
    7066:	71 2c       	mov	r7, r1
    7068:	e1 2c       	mov	r14, r1
    706a:	f1 2c       	mov	r15, r1
    706c:	10 97       	sbiw	r26, 0x00	; 0
    706e:	09 f4       	brne	.+2      	; 0x7072 <realloc+0xb0>
    7070:	46 c0       	rjmp	.+140    	; 0x70fe <realloc+0x13c>
    7072:	8d 91       	ld	r24, X+
    7074:	9c 91       	ld	r25, X
    7076:	11 97       	sbiw	r26, 0x01	; 1
    7078:	a8 15       	cp	r26, r8
    707a:	b9 05       	cpc	r27, r9
    707c:	b1 f5       	brne	.+108    	; 0x70ea <realloc+0x128>
    707e:	6c 01       	movw	r12, r24
    7080:	42 e0       	ldi	r20, 0x02	; 2
    7082:	c4 0e       	add	r12, r20
    7084:	d1 1c       	adc	r13, r1
    7086:	ca 14       	cp	r12, r10
    7088:	db 04       	cpc	r13, r11
    708a:	78 f1       	brcs	.+94     	; 0x70ea <realloc+0x128>
    708c:	4c 01       	movw	r8, r24
    708e:	8a 18       	sub	r8, r10
    7090:	9b 08       	sbc	r9, r11
    7092:	64 01       	movw	r12, r8
    7094:	42 e0       	ldi	r20, 0x02	; 2
    7096:	c4 0e       	add	r12, r20
    7098:	d1 1c       	adc	r13, r1
    709a:	12 96       	adiw	r26, 0x02	; 2
    709c:	bc 90       	ld	r11, X
    709e:	12 97       	sbiw	r26, 0x02	; 2
    70a0:	13 96       	adiw	r26, 0x03	; 3
    70a2:	ac 91       	ld	r26, X
    70a4:	b5 e0       	ldi	r27, 0x05	; 5
    70a6:	cb 16       	cp	r12, r27
    70a8:	d1 04       	cpc	r13, r1
    70aa:	40 f0       	brcs	.+16     	; 0x70bc <realloc+0xfa>
    70ac:	b2 82       	std	Z+2, r11	; 0x02
    70ae:	a3 83       	std	Z+3, r26	; 0x03
    70b0:	91 82       	std	Z+1, r9	; 0x01
    70b2:	80 82       	st	Z, r8
    70b4:	d9 01       	movw	r26, r18
    70b6:	6d 93       	st	X+, r22
    70b8:	7c 93       	st	X, r23
    70ba:	09 c0       	rjmp	.+18     	; 0x70ce <realloc+0x10c>
    70bc:	0e 5f       	subi	r16, 0xFE	; 254
    70be:	1f 4f       	sbci	r17, 0xFF	; 255
    70c0:	80 0f       	add	r24, r16
    70c2:	91 1f       	adc	r25, r17
    70c4:	f9 01       	movw	r30, r18
    70c6:	91 83       	std	Z+1, r25	; 0x01
    70c8:	80 83       	st	Z, r24
    70ca:	eb 2d       	mov	r30, r11
    70cc:	fa 2f       	mov	r31, r26
    70ce:	e1 14       	cp	r14, r1
    70d0:	f1 04       	cpc	r15, r1
    70d2:	31 f0       	breq	.+12     	; 0x70e0 <realloc+0x11e>
    70d4:	d7 01       	movw	r26, r14
    70d6:	13 96       	adiw	r26, 0x03	; 3
    70d8:	fc 93       	st	X, r31
    70da:	ee 93       	st	-X, r30
    70dc:	12 97       	sbiw	r26, 0x02	; 2
    70de:	3e c0       	rjmp	.+124    	; 0x715c <realloc+0x19a>
    70e0:	f0 93 78 0b 	sts	0x0B78, r31	; 0x800b78 <__flp+0x1>
    70e4:	e0 93 77 0b 	sts	0x0B77, r30	; 0x800b77 <__flp>
    70e8:	39 c0       	rjmp	.+114    	; 0x715c <realloc+0x19a>
    70ea:	68 16       	cp	r6, r24
    70ec:	79 06       	cpc	r7, r25
    70ee:	08 f4       	brcc	.+2      	; 0x70f2 <realloc+0x130>
    70f0:	3c 01       	movw	r6, r24
    70f2:	7d 01       	movw	r14, r26
    70f4:	12 96       	adiw	r26, 0x02	; 2
    70f6:	0d 90       	ld	r0, X+
    70f8:	bc 91       	ld	r27, X
    70fa:	a0 2d       	mov	r26, r0
    70fc:	b7 cf       	rjmp	.-146    	; 0x706c <realloc+0xaa>
    70fe:	80 91 75 0b 	lds	r24, 0x0B75	; 0x800b75 <__brkval>
    7102:	90 91 76 0b 	lds	r25, 0x0B76	; 0x800b76 <__brkval+0x1>
    7106:	88 16       	cp	r8, r24
    7108:	99 06       	cpc	r9, r25
    710a:	e1 f4       	brne	.+56     	; 0x7144 <realloc+0x182>
    710c:	66 16       	cp	r6, r22
    710e:	77 06       	cpc	r7, r23
    7110:	c8 f4       	brcc	.+50     	; 0x7144 <realloc+0x182>
    7112:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    7116:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    711a:	00 97       	sbiw	r24, 0x00	; 0
    711c:	41 f4       	brne	.+16     	; 0x712e <realloc+0x16c>
    711e:	8d b7       	in	r24, 0x3d	; 61
    7120:	9e b7       	in	r25, 0x3e	; 62
    7122:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    7126:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    712a:	84 1b       	sub	r24, r20
    712c:	95 0b       	sbc	r25, r21
    712e:	e8 17       	cp	r30, r24
    7130:	f9 07       	cpc	r31, r25
    7132:	b0 f4       	brcc	.+44     	; 0x7160 <realloc+0x19e>
    7134:	f0 93 76 0b 	sts	0x0B76, r31	; 0x800b76 <__brkval+0x1>
    7138:	e0 93 75 0b 	sts	0x0B75, r30	; 0x800b75 <__brkval>
    713c:	f9 01       	movw	r30, r18
    713e:	71 83       	std	Z+1, r23	; 0x01
    7140:	60 83       	st	Z, r22
    7142:	0c c0       	rjmp	.+24     	; 0x715c <realloc+0x19a>
    7144:	cb 01       	movw	r24, r22
    7146:	1c de       	rcall	.-968    	; 0x6d80 <malloc>
    7148:	7c 01       	movw	r14, r24
    714a:	00 97       	sbiw	r24, 0x00	; 0
    714c:	49 f0       	breq	.+18     	; 0x7160 <realloc+0x19e>
    714e:	a8 01       	movw	r20, r16
    7150:	be 01       	movw	r22, r28
    7152:	2c d0       	rcall	.+88     	; 0x71ac <memcpy>
    7154:	ce 01       	movw	r24, r28
    7156:	ac de       	rcall	.-680    	; 0x6eb0 <free>
    7158:	c7 01       	movw	r24, r14
    715a:	04 c0       	rjmp	.+8      	; 0x7164 <realloc+0x1a2>
    715c:	ce 01       	movw	r24, r28
    715e:	02 c0       	rjmp	.+4      	; 0x7164 <realloc+0x1a2>
    7160:	80 e0       	ldi	r24, 0x00	; 0
    7162:	90 e0       	ldi	r25, 0x00	; 0
    7164:	df 91       	pop	r29
    7166:	cf 91       	pop	r28
    7168:	1f 91       	pop	r17
    716a:	0f 91       	pop	r16
    716c:	ff 90       	pop	r15
    716e:	ef 90       	pop	r14
    7170:	df 90       	pop	r13
    7172:	cf 90       	pop	r12
    7174:	bf 90       	pop	r11
    7176:	af 90       	pop	r10
    7178:	9f 90       	pop	r9
    717a:	8f 90       	pop	r8
    717c:	7f 90       	pop	r7
    717e:	6f 90       	pop	r6
    7180:	08 95       	ret

00007182 <abort>:
    7182:	81 e0       	ldi	r24, 0x01	; 1
    7184:	90 e0       	ldi	r25, 0x00	; 0
    7186:	f8 94       	cli
    7188:	fb c2       	rjmp	.+1526   	; 0x7780 <__do_global_dtors>

0000718a <isspace>:
    718a:	91 11       	cpse	r25, r1
    718c:	e6 c2       	rjmp	.+1484   	; 0x775a <__ctype_isfalse>
    718e:	80 32       	cpi	r24, 0x20	; 32
    7190:	19 f0       	breq	.+6      	; 0x7198 <isspace+0xe>
    7192:	89 50       	subi	r24, 0x09	; 9
    7194:	85 50       	subi	r24, 0x05	; 5
    7196:	d0 f7       	brcc	.-12     	; 0x718c <isspace+0x2>
    7198:	08 95       	ret

0000719a <memcpy_P>:
    719a:	fb 01       	movw	r30, r22
    719c:	dc 01       	movw	r26, r24
    719e:	02 c0       	rjmp	.+4      	; 0x71a4 <memcpy_P+0xa>
    71a0:	05 90       	lpm	r0, Z+
    71a2:	0d 92       	st	X+, r0
    71a4:	41 50       	subi	r20, 0x01	; 1
    71a6:	50 40       	sbci	r21, 0x00	; 0
    71a8:	d8 f7       	brcc	.-10     	; 0x71a0 <memcpy_P+0x6>
    71aa:	08 95       	ret

000071ac <memcpy>:
    71ac:	fb 01       	movw	r30, r22
    71ae:	dc 01       	movw	r26, r24
    71b0:	02 c0       	rjmp	.+4      	; 0x71b6 <memcpy+0xa>
    71b2:	01 90       	ld	r0, Z+
    71b4:	0d 92       	st	X+, r0
    71b6:	41 50       	subi	r20, 0x01	; 1
    71b8:	50 40       	sbci	r21, 0x00	; 0
    71ba:	d8 f7       	brcc	.-10     	; 0x71b2 <memcpy+0x6>
    71bc:	08 95       	ret

000071be <strcmp>:
    71be:	fb 01       	movw	r30, r22
    71c0:	dc 01       	movw	r26, r24
    71c2:	8d 91       	ld	r24, X+
    71c4:	01 90       	ld	r0, Z+
    71c6:	80 19       	sub	r24, r0
    71c8:	01 10       	cpse	r0, r1
    71ca:	d9 f3       	breq	.-10     	; 0x71c2 <strcmp+0x4>
    71cc:	99 0b       	sbc	r25, r25
    71ce:	08 95       	ret

000071d0 <strcpy>:
    71d0:	fb 01       	movw	r30, r22
    71d2:	dc 01       	movw	r26, r24
    71d4:	01 90       	ld	r0, Z+
    71d6:	0d 92       	st	X+, r0
    71d8:	00 20       	and	r0, r0
    71da:	e1 f7       	brne	.-8      	; 0x71d4 <strcpy+0x4>
    71dc:	08 95       	ret

000071de <strncmp>:
    71de:	fb 01       	movw	r30, r22
    71e0:	dc 01       	movw	r26, r24
    71e2:	41 50       	subi	r20, 0x01	; 1
    71e4:	50 40       	sbci	r21, 0x00	; 0
    71e6:	30 f0       	brcs	.+12     	; 0x71f4 <strncmp+0x16>
    71e8:	8d 91       	ld	r24, X+
    71ea:	01 90       	ld	r0, Z+
    71ec:	80 19       	sub	r24, r0
    71ee:	19 f4       	brne	.+6      	; 0x71f6 <strncmp+0x18>
    71f0:	00 20       	and	r0, r0
    71f2:	b9 f7       	brne	.-18     	; 0x71e2 <strncmp+0x4>
    71f4:	88 1b       	sub	r24, r24
    71f6:	99 0b       	sbc	r25, r25
    71f8:	08 95       	ret

000071fa <itoa>:
    71fa:	45 32       	cpi	r20, 0x25	; 37
    71fc:	51 05       	cpc	r21, r1
    71fe:	18 f4       	brcc	.+6      	; 0x7206 <itoa+0xc>
    7200:	42 30       	cpi	r20, 0x02	; 2
    7202:	08 f0       	brcs	.+2      	; 0x7206 <itoa+0xc>
    7204:	04 c0       	rjmp	.+8      	; 0x720e <__itoa_ncheck>
    7206:	fb 01       	movw	r30, r22
    7208:	10 82       	st	Z, r1
    720a:	cb 01       	movw	r24, r22
    720c:	08 95       	ret

0000720e <__itoa_ncheck>:
    720e:	bb 27       	eor	r27, r27
    7210:	4a 30       	cpi	r20, 0x0A	; 10
    7212:	31 f4       	brne	.+12     	; 0x7220 <__itoa_ncheck+0x12>
    7214:	99 23       	and	r25, r25
    7216:	22 f4       	brpl	.+8      	; 0x7220 <__itoa_ncheck+0x12>
    7218:	bd e2       	ldi	r27, 0x2D	; 45
    721a:	90 95       	com	r25
    721c:	81 95       	neg	r24
    721e:	9f 4f       	sbci	r25, 0xFF	; 255
    7220:	36 c0       	rjmp	.+108    	; 0x728e <__utoa_common>

00007222 <ultoa>:
    7222:	25 32       	cpi	r18, 0x25	; 37
    7224:	31 05       	cpc	r19, r1
    7226:	18 f4       	brcc	.+6      	; 0x722e <ultoa+0xc>
    7228:	22 30       	cpi	r18, 0x02	; 2
    722a:	08 f0       	brcs	.+2      	; 0x722e <ultoa+0xc>
    722c:	04 c0       	rjmp	.+8      	; 0x7236 <__ultoa_ncheck>
    722e:	fa 01       	movw	r30, r20
    7230:	10 82       	st	Z, r1
    7232:	ca 01       	movw	r24, r20
    7234:	08 95       	ret

00007236 <__ultoa_ncheck>:
    7236:	bb 27       	eor	r27, r27

00007238 <__ultoa_common>:
    7238:	fa 01       	movw	r30, r20
    723a:	a6 2f       	mov	r26, r22
    723c:	62 17       	cp	r22, r18
    723e:	71 05       	cpc	r23, r1
    7240:	81 05       	cpc	r24, r1
    7242:	91 05       	cpc	r25, r1
    7244:	33 0b       	sbc	r19, r19
    7246:	30 fb       	bst	r19, 0
    7248:	66 f0       	brts	.+24     	; 0x7262 <__ultoa_common+0x2a>
    724a:	aa 27       	eor	r26, r26
    724c:	66 0f       	add	r22, r22
    724e:	77 1f       	adc	r23, r23
    7250:	88 1f       	adc	r24, r24
    7252:	99 1f       	adc	r25, r25
    7254:	aa 1f       	adc	r26, r26
    7256:	a2 17       	cp	r26, r18
    7258:	10 f0       	brcs	.+4      	; 0x725e <__ultoa_common+0x26>
    725a:	a2 1b       	sub	r26, r18
    725c:	63 95       	inc	r22
    725e:	38 50       	subi	r19, 0x08	; 8
    7260:	a9 f7       	brne	.-22     	; 0x724c <__ultoa_common+0x14>
    7262:	a0 5d       	subi	r26, 0xD0	; 208
    7264:	aa 33       	cpi	r26, 0x3A	; 58
    7266:	08 f0       	brcs	.+2      	; 0x726a <__ultoa_common+0x32>
    7268:	a9 5d       	subi	r26, 0xD9	; 217
    726a:	a1 93       	st	Z+, r26
    726c:	36 f7       	brtc	.-52     	; 0x723a <__ultoa_common+0x2>
    726e:	b1 11       	cpse	r27, r1
    7270:	b1 93       	st	Z+, r27
    7272:	10 82       	st	Z, r1
    7274:	ca 01       	movw	r24, r20
    7276:	74 c2       	rjmp	.+1256   	; 0x7760 <strrev>

00007278 <utoa>:
    7278:	45 32       	cpi	r20, 0x25	; 37
    727a:	51 05       	cpc	r21, r1
    727c:	18 f4       	brcc	.+6      	; 0x7284 <utoa+0xc>
    727e:	42 30       	cpi	r20, 0x02	; 2
    7280:	08 f0       	brcs	.+2      	; 0x7284 <utoa+0xc>
    7282:	04 c0       	rjmp	.+8      	; 0x728c <__utoa_ncheck>
    7284:	fb 01       	movw	r30, r22
    7286:	10 82       	st	Z, r1
    7288:	cb 01       	movw	r24, r22
    728a:	08 95       	ret

0000728c <__utoa_ncheck>:
    728c:	bb 27       	eor	r27, r27

0000728e <__utoa_common>:
    728e:	fb 01       	movw	r30, r22
    7290:	55 27       	eor	r21, r21
    7292:	aa 27       	eor	r26, r26
    7294:	88 0f       	add	r24, r24
    7296:	99 1f       	adc	r25, r25
    7298:	aa 1f       	adc	r26, r26
    729a:	a4 17       	cp	r26, r20
    729c:	10 f0       	brcs	.+4      	; 0x72a2 <__utoa_common+0x14>
    729e:	a4 1b       	sub	r26, r20
    72a0:	83 95       	inc	r24
    72a2:	50 51       	subi	r21, 0x10	; 16
    72a4:	b9 f7       	brne	.-18     	; 0x7294 <__utoa_common+0x6>
    72a6:	a0 5d       	subi	r26, 0xD0	; 208
    72a8:	aa 33       	cpi	r26, 0x3A	; 58
    72aa:	08 f0       	brcs	.+2      	; 0x72ae <__utoa_common+0x20>
    72ac:	a9 5d       	subi	r26, 0xD9	; 217
    72ae:	a1 93       	st	Z+, r26
    72b0:	00 97       	sbiw	r24, 0x00	; 0
    72b2:	79 f7       	brne	.-34     	; 0x7292 <__utoa_common+0x4>
    72b4:	b1 11       	cpse	r27, r1
    72b6:	b1 93       	st	Z+, r27
    72b8:	11 92       	st	Z+, r1
    72ba:	cb 01       	movw	r24, r22
    72bc:	51 c2       	rjmp	.+1186   	; 0x7760 <strrev>

000072be <dtoa_prf>:
    72be:	8f 92       	push	r8
    72c0:	9f 92       	push	r9
    72c2:	af 92       	push	r10
    72c4:	bf 92       	push	r11
    72c6:	cf 92       	push	r12
    72c8:	df 92       	push	r13
    72ca:	ef 92       	push	r14
    72cc:	ff 92       	push	r15
    72ce:	0f 93       	push	r16
    72d0:	1f 93       	push	r17
    72d2:	cf 93       	push	r28
    72d4:	df 93       	push	r29
    72d6:	cd b7       	in	r28, 0x3d	; 61
    72d8:	de b7       	in	r29, 0x3e	; 62
    72da:	29 97       	sbiw	r28, 0x09	; 9
    72dc:	0f b6       	in	r0, 0x3f	; 63
    72de:	f8 94       	cli
    72e0:	de bf       	out	0x3e, r29	; 62
    72e2:	0f be       	out	0x3f, r0	; 63
    72e4:	cd bf       	out	0x3d, r28	; 61
    72e6:	6a 01       	movw	r12, r20
    72e8:	12 2f       	mov	r17, r18
    72ea:	b0 2e       	mov	r11, r16
    72ec:	2b e3       	ldi	r18, 0x3B	; 59
    72ee:	20 17       	cp	r18, r16
    72f0:	20 f0       	brcs	.+8      	; 0x72fa <dtoa_prf+0x3c>
    72f2:	ff 24       	eor	r15, r15
    72f4:	f3 94       	inc	r15
    72f6:	f0 0e       	add	r15, r16
    72f8:	02 c0       	rjmp	.+4      	; 0x72fe <dtoa_prf+0x40>
    72fa:	2c e3       	ldi	r18, 0x3C	; 60
    72fc:	f2 2e       	mov	r15, r18
    72fe:	0f 2d       	mov	r16, r15
    7300:	27 e0       	ldi	r18, 0x07	; 7
    7302:	ae 01       	movw	r20, r28
    7304:	4f 5f       	subi	r20, 0xFF	; 255
    7306:	5f 4f       	sbci	r21, 0xFF	; 255
    7308:	50 d1       	rcall	.+672    	; 0x75aa <__ftoa_engine>
    730a:	bc 01       	movw	r22, r24
    730c:	49 81       	ldd	r20, Y+1	; 0x01
    730e:	84 2f       	mov	r24, r20
    7310:	89 70       	andi	r24, 0x09	; 9
    7312:	81 30       	cpi	r24, 0x01	; 1
    7314:	31 f0       	breq	.+12     	; 0x7322 <dtoa_prf+0x64>
    7316:	e1 fc       	sbrc	r14, 1
    7318:	06 c0       	rjmp	.+12     	; 0x7326 <dtoa_prf+0x68>
    731a:	e0 fe       	sbrs	r14, 0
    731c:	06 c0       	rjmp	.+12     	; 0x732a <dtoa_prf+0x6c>
    731e:	90 e2       	ldi	r25, 0x20	; 32
    7320:	05 c0       	rjmp	.+10     	; 0x732c <dtoa_prf+0x6e>
    7322:	9d e2       	ldi	r25, 0x2D	; 45
    7324:	03 c0       	rjmp	.+6      	; 0x732c <dtoa_prf+0x6e>
    7326:	9b e2       	ldi	r25, 0x2B	; 43
    7328:	01 c0       	rjmp	.+2      	; 0x732c <dtoa_prf+0x6e>
    732a:	90 e0       	ldi	r25, 0x00	; 0
    732c:	5e 2d       	mov	r21, r14
    732e:	50 71       	andi	r21, 0x10	; 16
    7330:	43 ff       	sbrs	r20, 3
    7332:	3c c0       	rjmp	.+120    	; 0x73ac <dtoa_prf+0xee>
    7334:	91 11       	cpse	r25, r1
    7336:	02 c0       	rjmp	.+4      	; 0x733c <dtoa_prf+0x7e>
    7338:	83 e0       	ldi	r24, 0x03	; 3
    733a:	01 c0       	rjmp	.+2      	; 0x733e <dtoa_prf+0x80>
    733c:	84 e0       	ldi	r24, 0x04	; 4
    733e:	81 17       	cp	r24, r17
    7340:	18 f4       	brcc	.+6      	; 0x7348 <dtoa_prf+0x8a>
    7342:	21 2f       	mov	r18, r17
    7344:	28 1b       	sub	r18, r24
    7346:	01 c0       	rjmp	.+2      	; 0x734a <dtoa_prf+0x8c>
    7348:	20 e0       	ldi	r18, 0x00	; 0
    734a:	51 11       	cpse	r21, r1
    734c:	0b c0       	rjmp	.+22     	; 0x7364 <dtoa_prf+0xa6>
    734e:	f6 01       	movw	r30, r12
    7350:	82 2f       	mov	r24, r18
    7352:	30 e2       	ldi	r19, 0x20	; 32
    7354:	88 23       	and	r24, r24
    7356:	19 f0       	breq	.+6      	; 0x735e <dtoa_prf+0xa0>
    7358:	31 93       	st	Z+, r19
    735a:	81 50       	subi	r24, 0x01	; 1
    735c:	fb cf       	rjmp	.-10     	; 0x7354 <dtoa_prf+0x96>
    735e:	c2 0e       	add	r12, r18
    7360:	d1 1c       	adc	r13, r1
    7362:	20 e0       	ldi	r18, 0x00	; 0
    7364:	99 23       	and	r25, r25
    7366:	29 f0       	breq	.+10     	; 0x7372 <dtoa_prf+0xb4>
    7368:	d6 01       	movw	r26, r12
    736a:	9c 93       	st	X, r25
    736c:	f6 01       	movw	r30, r12
    736e:	31 96       	adiw	r30, 0x01	; 1
    7370:	6f 01       	movw	r12, r30
    7372:	c6 01       	movw	r24, r12
    7374:	03 96       	adiw	r24, 0x03	; 3
    7376:	e2 fe       	sbrs	r14, 2
    7378:	0a c0       	rjmp	.+20     	; 0x738e <dtoa_prf+0xd0>
    737a:	3e e4       	ldi	r19, 0x4E	; 78
    737c:	d6 01       	movw	r26, r12
    737e:	3c 93       	st	X, r19
    7380:	41 e4       	ldi	r20, 0x41	; 65
    7382:	11 96       	adiw	r26, 0x01	; 1
    7384:	4c 93       	st	X, r20
    7386:	11 97       	sbiw	r26, 0x01	; 1
    7388:	12 96       	adiw	r26, 0x02	; 2
    738a:	3c 93       	st	X, r19
    738c:	06 c0       	rjmp	.+12     	; 0x739a <dtoa_prf+0xdc>
    738e:	3e e6       	ldi	r19, 0x6E	; 110
    7390:	f6 01       	movw	r30, r12
    7392:	30 83       	st	Z, r19
    7394:	41 e6       	ldi	r20, 0x61	; 97
    7396:	41 83       	std	Z+1, r20	; 0x01
    7398:	32 83       	std	Z+2, r19	; 0x02
    739a:	fc 01       	movw	r30, r24
    739c:	32 2f       	mov	r19, r18
    739e:	40 e2       	ldi	r20, 0x20	; 32
    73a0:	33 23       	and	r19, r19
    73a2:	09 f4       	brne	.+2      	; 0x73a6 <dtoa_prf+0xe8>
    73a4:	42 c0       	rjmp	.+132    	; 0x742a <dtoa_prf+0x16c>
    73a6:	41 93       	st	Z+, r20
    73a8:	31 50       	subi	r19, 0x01	; 1
    73aa:	fa cf       	rjmp	.-12     	; 0x73a0 <dtoa_prf+0xe2>
    73ac:	42 ff       	sbrs	r20, 2
    73ae:	44 c0       	rjmp	.+136    	; 0x7438 <dtoa_prf+0x17a>
    73b0:	91 11       	cpse	r25, r1
    73b2:	02 c0       	rjmp	.+4      	; 0x73b8 <dtoa_prf+0xfa>
    73b4:	83 e0       	ldi	r24, 0x03	; 3
    73b6:	01 c0       	rjmp	.+2      	; 0x73ba <dtoa_prf+0xfc>
    73b8:	84 e0       	ldi	r24, 0x04	; 4
    73ba:	81 17       	cp	r24, r17
    73bc:	18 f4       	brcc	.+6      	; 0x73c4 <dtoa_prf+0x106>
    73be:	21 2f       	mov	r18, r17
    73c0:	28 1b       	sub	r18, r24
    73c2:	01 c0       	rjmp	.+2      	; 0x73c6 <dtoa_prf+0x108>
    73c4:	20 e0       	ldi	r18, 0x00	; 0
    73c6:	51 11       	cpse	r21, r1
    73c8:	0b c0       	rjmp	.+22     	; 0x73e0 <dtoa_prf+0x122>
    73ca:	f6 01       	movw	r30, r12
    73cc:	82 2f       	mov	r24, r18
    73ce:	30 e2       	ldi	r19, 0x20	; 32
    73d0:	88 23       	and	r24, r24
    73d2:	19 f0       	breq	.+6      	; 0x73da <dtoa_prf+0x11c>
    73d4:	31 93       	st	Z+, r19
    73d6:	81 50       	subi	r24, 0x01	; 1
    73d8:	fb cf       	rjmp	.-10     	; 0x73d0 <dtoa_prf+0x112>
    73da:	c2 0e       	add	r12, r18
    73dc:	d1 1c       	adc	r13, r1
    73de:	20 e0       	ldi	r18, 0x00	; 0
    73e0:	99 23       	and	r25, r25
    73e2:	29 f0       	breq	.+10     	; 0x73ee <dtoa_prf+0x130>
    73e4:	d6 01       	movw	r26, r12
    73e6:	9c 93       	st	X, r25
    73e8:	f6 01       	movw	r30, r12
    73ea:	31 96       	adiw	r30, 0x01	; 1
    73ec:	6f 01       	movw	r12, r30
    73ee:	c6 01       	movw	r24, r12
    73f0:	03 96       	adiw	r24, 0x03	; 3
    73f2:	e2 fe       	sbrs	r14, 2
    73f4:	0b c0       	rjmp	.+22     	; 0x740c <dtoa_prf+0x14e>
    73f6:	39 e4       	ldi	r19, 0x49	; 73
    73f8:	d6 01       	movw	r26, r12
    73fa:	3c 93       	st	X, r19
    73fc:	3e e4       	ldi	r19, 0x4E	; 78
    73fe:	11 96       	adiw	r26, 0x01	; 1
    7400:	3c 93       	st	X, r19
    7402:	11 97       	sbiw	r26, 0x01	; 1
    7404:	36 e4       	ldi	r19, 0x46	; 70
    7406:	12 96       	adiw	r26, 0x02	; 2
    7408:	3c 93       	st	X, r19
    740a:	07 c0       	rjmp	.+14     	; 0x741a <dtoa_prf+0x15c>
    740c:	39 e6       	ldi	r19, 0x69	; 105
    740e:	f6 01       	movw	r30, r12
    7410:	30 83       	st	Z, r19
    7412:	3e e6       	ldi	r19, 0x6E	; 110
    7414:	31 83       	std	Z+1, r19	; 0x01
    7416:	36 e6       	ldi	r19, 0x66	; 102
    7418:	32 83       	std	Z+2, r19	; 0x02
    741a:	fc 01       	movw	r30, r24
    741c:	32 2f       	mov	r19, r18
    741e:	40 e2       	ldi	r20, 0x20	; 32
    7420:	33 23       	and	r19, r19
    7422:	19 f0       	breq	.+6      	; 0x742a <dtoa_prf+0x16c>
    7424:	41 93       	st	Z+, r20
    7426:	31 50       	subi	r19, 0x01	; 1
    7428:	fb cf       	rjmp	.-10     	; 0x7420 <dtoa_prf+0x162>
    742a:	fc 01       	movw	r30, r24
    742c:	e2 0f       	add	r30, r18
    742e:	f1 1d       	adc	r31, r1
    7430:	10 82       	st	Z, r1
    7432:	8e ef       	ldi	r24, 0xFE	; 254
    7434:	9f ef       	ldi	r25, 0xFF	; 255
    7436:	a6 c0       	rjmp	.+332    	; 0x7584 <dtoa_prf+0x2c6>
    7438:	21 e0       	ldi	r18, 0x01	; 1
    743a:	30 e0       	ldi	r19, 0x00	; 0
    743c:	91 11       	cpse	r25, r1
    743e:	02 c0       	rjmp	.+4      	; 0x7444 <dtoa_prf+0x186>
    7440:	20 e0       	ldi	r18, 0x00	; 0
    7442:	30 e0       	ldi	r19, 0x00	; 0
    7444:	16 16       	cp	r1, r22
    7446:	17 06       	cpc	r1, r23
    7448:	1c f4       	brge	.+6      	; 0x7450 <dtoa_prf+0x192>
    744a:	fb 01       	movw	r30, r22
    744c:	31 96       	adiw	r30, 0x01	; 1
    744e:	02 c0       	rjmp	.+4      	; 0x7454 <dtoa_prf+0x196>
    7450:	e1 e0       	ldi	r30, 0x01	; 1
    7452:	f0 e0       	ldi	r31, 0x00	; 0
    7454:	2e 0f       	add	r18, r30
    7456:	3f 1f       	adc	r19, r31
    7458:	bb 20       	and	r11, r11
    745a:	21 f0       	breq	.+8      	; 0x7464 <dtoa_prf+0x1a6>
    745c:	eb 2d       	mov	r30, r11
    745e:	f0 e0       	ldi	r31, 0x00	; 0
    7460:	31 96       	adiw	r30, 0x01	; 1
    7462:	02 c0       	rjmp	.+4      	; 0x7468 <dtoa_prf+0x1aa>
    7464:	e0 e0       	ldi	r30, 0x00	; 0
    7466:	f0 e0       	ldi	r31, 0x00	; 0
    7468:	2e 0f       	add	r18, r30
    746a:	3f 1f       	adc	r19, r31
    746c:	e1 2f       	mov	r30, r17
    746e:	f0 e0       	ldi	r31, 0x00	; 0
    7470:	2e 17       	cp	r18, r30
    7472:	3f 07       	cpc	r19, r31
    7474:	1c f4       	brge	.+6      	; 0x747c <dtoa_prf+0x1be>
    7476:	12 1b       	sub	r17, r18
    7478:	21 2f       	mov	r18, r17
    747a:	01 c0       	rjmp	.+2      	; 0x747e <dtoa_prf+0x1c0>
    747c:	20 e0       	ldi	r18, 0x00	; 0
    747e:	8e 2d       	mov	r24, r14
    7480:	88 71       	andi	r24, 0x18	; 24
    7482:	59 f4       	brne	.+22     	; 0x749a <dtoa_prf+0x1dc>
    7484:	f6 01       	movw	r30, r12
    7486:	82 2f       	mov	r24, r18
    7488:	30 e2       	ldi	r19, 0x20	; 32
    748a:	88 23       	and	r24, r24
    748c:	19 f0       	breq	.+6      	; 0x7494 <dtoa_prf+0x1d6>
    748e:	31 93       	st	Z+, r19
    7490:	81 50       	subi	r24, 0x01	; 1
    7492:	fb cf       	rjmp	.-10     	; 0x748a <dtoa_prf+0x1cc>
    7494:	c2 0e       	add	r12, r18
    7496:	d1 1c       	adc	r13, r1
    7498:	20 e0       	ldi	r18, 0x00	; 0
    749a:	99 23       	and	r25, r25
    749c:	29 f0       	breq	.+10     	; 0x74a8 <dtoa_prf+0x1ea>
    749e:	d6 01       	movw	r26, r12
    74a0:	9c 93       	st	X, r25
    74a2:	f6 01       	movw	r30, r12
    74a4:	31 96       	adiw	r30, 0x01	; 1
    74a6:	6f 01       	movw	r12, r30
    74a8:	51 11       	cpse	r21, r1
    74aa:	0b c0       	rjmp	.+22     	; 0x74c2 <dtoa_prf+0x204>
    74ac:	f6 01       	movw	r30, r12
    74ae:	82 2f       	mov	r24, r18
    74b0:	90 e3       	ldi	r25, 0x30	; 48
    74b2:	88 23       	and	r24, r24
    74b4:	19 f0       	breq	.+6      	; 0x74bc <dtoa_prf+0x1fe>
    74b6:	91 93       	st	Z+, r25
    74b8:	81 50       	subi	r24, 0x01	; 1
    74ba:	fb cf       	rjmp	.-10     	; 0x74b2 <dtoa_prf+0x1f4>
    74bc:	c2 0e       	add	r12, r18
    74be:	d1 1c       	adc	r13, r1
    74c0:	20 e0       	ldi	r18, 0x00	; 0
    74c2:	0f 2d       	mov	r16, r15
    74c4:	06 0f       	add	r16, r22
    74c6:	9a 81       	ldd	r25, Y+2	; 0x02
    74c8:	34 2f       	mov	r19, r20
    74ca:	30 71       	andi	r19, 0x10	; 16
    74cc:	44 ff       	sbrs	r20, 4
    74ce:	03 c0       	rjmp	.+6      	; 0x74d6 <dtoa_prf+0x218>
    74d0:	91 33       	cpi	r25, 0x31	; 49
    74d2:	09 f4       	brne	.+2      	; 0x74d6 <dtoa_prf+0x218>
    74d4:	01 50       	subi	r16, 0x01	; 1
    74d6:	10 16       	cp	r1, r16
    74d8:	24 f4       	brge	.+8      	; 0x74e2 <dtoa_prf+0x224>
    74da:	09 30       	cpi	r16, 0x09	; 9
    74dc:	18 f0       	brcs	.+6      	; 0x74e4 <dtoa_prf+0x226>
    74de:	08 e0       	ldi	r16, 0x08	; 8
    74e0:	01 c0       	rjmp	.+2      	; 0x74e4 <dtoa_prf+0x226>
    74e2:	01 e0       	ldi	r16, 0x01	; 1
    74e4:	ab 01       	movw	r20, r22
    74e6:	77 ff       	sbrs	r23, 7
    74e8:	02 c0       	rjmp	.+4      	; 0x74ee <dtoa_prf+0x230>
    74ea:	40 e0       	ldi	r20, 0x00	; 0
    74ec:	50 e0       	ldi	r21, 0x00	; 0
    74ee:	fb 01       	movw	r30, r22
    74f0:	e4 1b       	sub	r30, r20
    74f2:	f5 0b       	sbc	r31, r21
    74f4:	a1 e0       	ldi	r26, 0x01	; 1
    74f6:	b0 e0       	ldi	r27, 0x00	; 0
    74f8:	ac 0f       	add	r26, r28
    74fa:	bd 1f       	adc	r27, r29
    74fc:	ea 0f       	add	r30, r26
    74fe:	fb 1f       	adc	r31, r27
    7500:	8e e2       	ldi	r24, 0x2E	; 46
    7502:	a8 2e       	mov	r10, r24
    7504:	4b 01       	movw	r8, r22
    7506:	80 1a       	sub	r8, r16
    7508:	91 08       	sbc	r9, r1
    750a:	0b 2d       	mov	r16, r11
    750c:	10 e0       	ldi	r17, 0x00	; 0
    750e:	11 95       	neg	r17
    7510:	01 95       	neg	r16
    7512:	11 09       	sbc	r17, r1
    7514:	4f 3f       	cpi	r20, 0xFF	; 255
    7516:	bf ef       	ldi	r27, 0xFF	; 255
    7518:	5b 07       	cpc	r21, r27
    751a:	21 f4       	brne	.+8      	; 0x7524 <dtoa_prf+0x266>
    751c:	d6 01       	movw	r26, r12
    751e:	ac 92       	st	X, r10
    7520:	11 96       	adiw	r26, 0x01	; 1
    7522:	6d 01       	movw	r12, r26
    7524:	64 17       	cp	r22, r20
    7526:	75 07       	cpc	r23, r21
    7528:	2c f0       	brlt	.+10     	; 0x7534 <dtoa_prf+0x276>
    752a:	84 16       	cp	r8, r20
    752c:	95 06       	cpc	r9, r21
    752e:	14 f4       	brge	.+4      	; 0x7534 <dtoa_prf+0x276>
    7530:	81 81       	ldd	r24, Z+1	; 0x01
    7532:	01 c0       	rjmp	.+2      	; 0x7536 <dtoa_prf+0x278>
    7534:	80 e3       	ldi	r24, 0x30	; 48
    7536:	41 50       	subi	r20, 0x01	; 1
    7538:	51 09       	sbc	r21, r1
    753a:	31 96       	adiw	r30, 0x01	; 1
    753c:	d6 01       	movw	r26, r12
    753e:	11 96       	adiw	r26, 0x01	; 1
    7540:	7d 01       	movw	r14, r26
    7542:	40 17       	cp	r20, r16
    7544:	51 07       	cpc	r21, r17
    7546:	24 f0       	brlt	.+8      	; 0x7550 <dtoa_prf+0x292>
    7548:	d6 01       	movw	r26, r12
    754a:	8c 93       	st	X, r24
    754c:	67 01       	movw	r12, r14
    754e:	e2 cf       	rjmp	.-60     	; 0x7514 <dtoa_prf+0x256>
    7550:	64 17       	cp	r22, r20
    7552:	75 07       	cpc	r23, r21
    7554:	39 f4       	brne	.+14     	; 0x7564 <dtoa_prf+0x2a6>
    7556:	96 33       	cpi	r25, 0x36	; 54
    7558:	20 f4       	brcc	.+8      	; 0x7562 <dtoa_prf+0x2a4>
    755a:	95 33       	cpi	r25, 0x35	; 53
    755c:	19 f4       	brne	.+6      	; 0x7564 <dtoa_prf+0x2a6>
    755e:	31 11       	cpse	r19, r1
    7560:	01 c0       	rjmp	.+2      	; 0x7564 <dtoa_prf+0x2a6>
    7562:	81 e3       	ldi	r24, 0x31	; 49
    7564:	f6 01       	movw	r30, r12
    7566:	80 83       	st	Z, r24
    7568:	f7 01       	movw	r30, r14
    756a:	82 2f       	mov	r24, r18
    756c:	90 e2       	ldi	r25, 0x20	; 32
    756e:	88 23       	and	r24, r24
    7570:	19 f0       	breq	.+6      	; 0x7578 <dtoa_prf+0x2ba>
    7572:	91 93       	st	Z+, r25
    7574:	81 50       	subi	r24, 0x01	; 1
    7576:	fb cf       	rjmp	.-10     	; 0x756e <dtoa_prf+0x2b0>
    7578:	f7 01       	movw	r30, r14
    757a:	e2 0f       	add	r30, r18
    757c:	f1 1d       	adc	r31, r1
    757e:	10 82       	st	Z, r1
    7580:	80 e0       	ldi	r24, 0x00	; 0
    7582:	90 e0       	ldi	r25, 0x00	; 0
    7584:	29 96       	adiw	r28, 0x09	; 9
    7586:	0f b6       	in	r0, 0x3f	; 63
    7588:	f8 94       	cli
    758a:	de bf       	out	0x3e, r29	; 62
    758c:	0f be       	out	0x3f, r0	; 63
    758e:	cd bf       	out	0x3d, r28	; 61
    7590:	df 91       	pop	r29
    7592:	cf 91       	pop	r28
    7594:	1f 91       	pop	r17
    7596:	0f 91       	pop	r16
    7598:	ff 90       	pop	r15
    759a:	ef 90       	pop	r14
    759c:	df 90       	pop	r13
    759e:	cf 90       	pop	r12
    75a0:	bf 90       	pop	r11
    75a2:	af 90       	pop	r10
    75a4:	9f 90       	pop	r9
    75a6:	8f 90       	pop	r8
    75a8:	08 95       	ret

000075aa <__ftoa_engine>:
    75aa:	28 30       	cpi	r18, 0x08	; 8
    75ac:	08 f0       	brcs	.+2      	; 0x75b0 <__ftoa_engine+0x6>
    75ae:	27 e0       	ldi	r18, 0x07	; 7
    75b0:	33 27       	eor	r19, r19
    75b2:	da 01       	movw	r26, r20
    75b4:	99 0f       	add	r25, r25
    75b6:	31 1d       	adc	r19, r1
    75b8:	87 fd       	sbrc	r24, 7
    75ba:	91 60       	ori	r25, 0x01	; 1
    75bc:	00 96       	adiw	r24, 0x00	; 0
    75be:	61 05       	cpc	r22, r1
    75c0:	71 05       	cpc	r23, r1
    75c2:	39 f4       	brne	.+14     	; 0x75d2 <__ftoa_engine+0x28>
    75c4:	32 60       	ori	r19, 0x02	; 2
    75c6:	2e 5f       	subi	r18, 0xFE	; 254
    75c8:	3d 93       	st	X+, r19
    75ca:	30 e3       	ldi	r19, 0x30	; 48
    75cc:	2a 95       	dec	r18
    75ce:	e1 f7       	brne	.-8      	; 0x75c8 <__ftoa_engine+0x1e>
    75d0:	08 95       	ret
    75d2:	9f 3f       	cpi	r25, 0xFF	; 255
    75d4:	30 f0       	brcs	.+12     	; 0x75e2 <__ftoa_engine+0x38>
    75d6:	80 38       	cpi	r24, 0x80	; 128
    75d8:	71 05       	cpc	r23, r1
    75da:	61 05       	cpc	r22, r1
    75dc:	09 f0       	breq	.+2      	; 0x75e0 <__ftoa_engine+0x36>
    75de:	3c 5f       	subi	r19, 0xFC	; 252
    75e0:	3c 5f       	subi	r19, 0xFC	; 252
    75e2:	3d 93       	st	X+, r19
    75e4:	91 30       	cpi	r25, 0x01	; 1
    75e6:	08 f0       	brcs	.+2      	; 0x75ea <__ftoa_engine+0x40>
    75e8:	80 68       	ori	r24, 0x80	; 128
    75ea:	91 1d       	adc	r25, r1
    75ec:	df 93       	push	r29
    75ee:	cf 93       	push	r28
    75f0:	1f 93       	push	r17
    75f2:	0f 93       	push	r16
    75f4:	ff 92       	push	r15
    75f6:	ef 92       	push	r14
    75f8:	19 2f       	mov	r17, r25
    75fa:	98 7f       	andi	r25, 0xF8	; 248
    75fc:	96 95       	lsr	r25
    75fe:	e9 2f       	mov	r30, r25
    7600:	96 95       	lsr	r25
    7602:	96 95       	lsr	r25
    7604:	e9 0f       	add	r30, r25
    7606:	ff 27       	eor	r31, r31
    7608:	ec 5d       	subi	r30, 0xDC	; 220
    760a:	fe 4f       	sbci	r31, 0xFE	; 254
    760c:	99 27       	eor	r25, r25
    760e:	33 27       	eor	r19, r19
    7610:	ee 24       	eor	r14, r14
    7612:	ff 24       	eor	r15, r15
    7614:	a7 01       	movw	r20, r14
    7616:	e7 01       	movw	r28, r14
    7618:	05 90       	lpm	r0, Z+
    761a:	08 94       	sec
    761c:	07 94       	ror	r0
    761e:	28 f4       	brcc	.+10     	; 0x762a <__ftoa_engine+0x80>
    7620:	36 0f       	add	r19, r22
    7622:	e7 1e       	adc	r14, r23
    7624:	f8 1e       	adc	r15, r24
    7626:	49 1f       	adc	r20, r25
    7628:	51 1d       	adc	r21, r1
    762a:	66 0f       	add	r22, r22
    762c:	77 1f       	adc	r23, r23
    762e:	88 1f       	adc	r24, r24
    7630:	99 1f       	adc	r25, r25
    7632:	06 94       	lsr	r0
    7634:	a1 f7       	brne	.-24     	; 0x761e <__ftoa_engine+0x74>
    7636:	05 90       	lpm	r0, Z+
    7638:	07 94       	ror	r0
    763a:	28 f4       	brcc	.+10     	; 0x7646 <__ftoa_engine+0x9c>
    763c:	e7 0e       	add	r14, r23
    763e:	f8 1e       	adc	r15, r24
    7640:	49 1f       	adc	r20, r25
    7642:	56 1f       	adc	r21, r22
    7644:	c1 1d       	adc	r28, r1
    7646:	77 0f       	add	r23, r23
    7648:	88 1f       	adc	r24, r24
    764a:	99 1f       	adc	r25, r25
    764c:	66 1f       	adc	r22, r22
    764e:	06 94       	lsr	r0
    7650:	a1 f7       	brne	.-24     	; 0x763a <__ftoa_engine+0x90>
    7652:	05 90       	lpm	r0, Z+
    7654:	07 94       	ror	r0
    7656:	28 f4       	brcc	.+10     	; 0x7662 <__ftoa_engine+0xb8>
    7658:	f8 0e       	add	r15, r24
    765a:	49 1f       	adc	r20, r25
    765c:	56 1f       	adc	r21, r22
    765e:	c7 1f       	adc	r28, r23
    7660:	d1 1d       	adc	r29, r1
    7662:	88 0f       	add	r24, r24
    7664:	99 1f       	adc	r25, r25
    7666:	66 1f       	adc	r22, r22
    7668:	77 1f       	adc	r23, r23
    766a:	06 94       	lsr	r0
    766c:	a1 f7       	brne	.-24     	; 0x7656 <__ftoa_engine+0xac>
    766e:	05 90       	lpm	r0, Z+
    7670:	07 94       	ror	r0
    7672:	20 f4       	brcc	.+8      	; 0x767c <__ftoa_engine+0xd2>
    7674:	49 0f       	add	r20, r25
    7676:	56 1f       	adc	r21, r22
    7678:	c7 1f       	adc	r28, r23
    767a:	d8 1f       	adc	r29, r24
    767c:	99 0f       	add	r25, r25
    767e:	66 1f       	adc	r22, r22
    7680:	77 1f       	adc	r23, r23
    7682:	88 1f       	adc	r24, r24
    7684:	06 94       	lsr	r0
    7686:	a9 f7       	brne	.-22     	; 0x7672 <__ftoa_engine+0xc8>
    7688:	84 91       	lpm	r24, Z
    768a:	10 95       	com	r17
    768c:	17 70       	andi	r17, 0x07	; 7
    768e:	41 f0       	breq	.+16     	; 0x76a0 <__ftoa_engine+0xf6>
    7690:	d6 95       	lsr	r29
    7692:	c7 95       	ror	r28
    7694:	57 95       	ror	r21
    7696:	47 95       	ror	r20
    7698:	f7 94       	ror	r15
    769a:	e7 94       	ror	r14
    769c:	1a 95       	dec	r17
    769e:	c1 f7       	brne	.-16     	; 0x7690 <__ftoa_engine+0xe6>
    76a0:	ea ec       	ldi	r30, 0xCA	; 202
    76a2:	f0 e0       	ldi	r31, 0x00	; 0
    76a4:	68 94       	set
    76a6:	15 90       	lpm	r1, Z+
    76a8:	15 91       	lpm	r17, Z+
    76aa:	35 91       	lpm	r19, Z+
    76ac:	65 91       	lpm	r22, Z+
    76ae:	95 91       	lpm	r25, Z+
    76b0:	05 90       	lpm	r0, Z+
    76b2:	7f e2       	ldi	r23, 0x2F	; 47
    76b4:	73 95       	inc	r23
    76b6:	e1 18       	sub	r14, r1
    76b8:	f1 0a       	sbc	r15, r17
    76ba:	43 0b       	sbc	r20, r19
    76bc:	56 0b       	sbc	r21, r22
    76be:	c9 0b       	sbc	r28, r25
    76c0:	d0 09       	sbc	r29, r0
    76c2:	c0 f7       	brcc	.-16     	; 0x76b4 <__ftoa_engine+0x10a>
    76c4:	e1 0c       	add	r14, r1
    76c6:	f1 1e       	adc	r15, r17
    76c8:	43 1f       	adc	r20, r19
    76ca:	56 1f       	adc	r21, r22
    76cc:	c9 1f       	adc	r28, r25
    76ce:	d0 1d       	adc	r29, r0
    76d0:	7e f4       	brtc	.+30     	; 0x76f0 <__ftoa_engine+0x146>
    76d2:	70 33       	cpi	r23, 0x30	; 48
    76d4:	11 f4       	brne	.+4      	; 0x76da <__ftoa_engine+0x130>
    76d6:	8a 95       	dec	r24
    76d8:	e6 cf       	rjmp	.-52     	; 0x76a6 <__ftoa_engine+0xfc>
    76da:	e8 94       	clt
    76dc:	01 50       	subi	r16, 0x01	; 1
    76de:	30 f0       	brcs	.+12     	; 0x76ec <__ftoa_engine+0x142>
    76e0:	08 0f       	add	r16, r24
    76e2:	0a f4       	brpl	.+2      	; 0x76e6 <__ftoa_engine+0x13c>
    76e4:	00 27       	eor	r16, r16
    76e6:	02 17       	cp	r16, r18
    76e8:	08 f4       	brcc	.+2      	; 0x76ec <__ftoa_engine+0x142>
    76ea:	20 2f       	mov	r18, r16
    76ec:	23 95       	inc	r18
    76ee:	02 2f       	mov	r16, r18
    76f0:	7a 33       	cpi	r23, 0x3A	; 58
    76f2:	28 f0       	brcs	.+10     	; 0x76fe <__ftoa_engine+0x154>
    76f4:	79 e3       	ldi	r23, 0x39	; 57
    76f6:	7d 93       	st	X+, r23
    76f8:	2a 95       	dec	r18
    76fa:	e9 f7       	brne	.-6      	; 0x76f6 <__ftoa_engine+0x14c>
    76fc:	10 c0       	rjmp	.+32     	; 0x771e <__ftoa_engine+0x174>
    76fe:	7d 93       	st	X+, r23
    7700:	2a 95       	dec	r18
    7702:	89 f6       	brne	.-94     	; 0x76a6 <__ftoa_engine+0xfc>
    7704:	06 94       	lsr	r0
    7706:	97 95       	ror	r25
    7708:	67 95       	ror	r22
    770a:	37 95       	ror	r19
    770c:	17 95       	ror	r17
    770e:	17 94       	ror	r1
    7710:	e1 18       	sub	r14, r1
    7712:	f1 0a       	sbc	r15, r17
    7714:	43 0b       	sbc	r20, r19
    7716:	56 0b       	sbc	r21, r22
    7718:	c9 0b       	sbc	r28, r25
    771a:	d0 09       	sbc	r29, r0
    771c:	98 f0       	brcs	.+38     	; 0x7744 <__ftoa_engine+0x19a>
    771e:	23 95       	inc	r18
    7720:	7e 91       	ld	r23, -X
    7722:	73 95       	inc	r23
    7724:	7a 33       	cpi	r23, 0x3A	; 58
    7726:	08 f0       	brcs	.+2      	; 0x772a <__ftoa_engine+0x180>
    7728:	70 e3       	ldi	r23, 0x30	; 48
    772a:	7c 93       	st	X, r23
    772c:	20 13       	cpse	r18, r16
    772e:	b8 f7       	brcc	.-18     	; 0x771e <__ftoa_engine+0x174>
    7730:	7e 91       	ld	r23, -X
    7732:	70 61       	ori	r23, 0x10	; 16
    7734:	7d 93       	st	X+, r23
    7736:	30 f0       	brcs	.+12     	; 0x7744 <__ftoa_engine+0x19a>
    7738:	83 95       	inc	r24
    773a:	71 e3       	ldi	r23, 0x31	; 49
    773c:	7d 93       	st	X+, r23
    773e:	70 e3       	ldi	r23, 0x30	; 48
    7740:	2a 95       	dec	r18
    7742:	e1 f7       	brne	.-8      	; 0x773c <__ftoa_engine+0x192>
    7744:	11 24       	eor	r1, r1
    7746:	ef 90       	pop	r14
    7748:	ff 90       	pop	r15
    774a:	0f 91       	pop	r16
    774c:	1f 91       	pop	r17
    774e:	cf 91       	pop	r28
    7750:	df 91       	pop	r29
    7752:	99 27       	eor	r25, r25
    7754:	87 fd       	sbrc	r24, 7
    7756:	90 95       	com	r25
    7758:	08 95       	ret

0000775a <__ctype_isfalse>:
    775a:	99 27       	eor	r25, r25
    775c:	88 27       	eor	r24, r24

0000775e <__ctype_istrue>:
    775e:	08 95       	ret

00007760 <strrev>:
    7760:	dc 01       	movw	r26, r24
    7762:	fc 01       	movw	r30, r24
    7764:	67 2f       	mov	r22, r23
    7766:	71 91       	ld	r23, Z+
    7768:	77 23       	and	r23, r23
    776a:	e1 f7       	brne	.-8      	; 0x7764 <strrev+0x4>
    776c:	32 97       	sbiw	r30, 0x02	; 2
    776e:	04 c0       	rjmp	.+8      	; 0x7778 <strrev+0x18>
    7770:	7c 91       	ld	r23, X
    7772:	6d 93       	st	X+, r22
    7774:	70 83       	st	Z, r23
    7776:	62 91       	ld	r22, -Z
    7778:	ae 17       	cp	r26, r30
    777a:	bf 07       	cpc	r27, r31
    777c:	c8 f3       	brcs	.-14     	; 0x7770 <strrev+0x10>
    777e:	08 95       	ret

00007780 <__do_global_dtors>:
    7780:	11 e0       	ldi	r17, 0x01	; 1
    7782:	c2 e6       	ldi	r28, 0x62	; 98
    7784:	d1 e0       	ldi	r29, 0x01	; 1
    7786:	03 c0       	rjmp	.+6      	; 0x778e <__do_global_dtors+0xe>
    7788:	fe 01       	movw	r30, r28
    778a:	b9 da       	rcall	.-2702   	; 0x6cfe <__tablejump2__>
    778c:	21 96       	adiw	r28, 0x01	; 1
    778e:	c3 36       	cpi	r28, 0x63	; 99
    7790:	d1 07       	cpc	r29, r17
    7792:	d1 f7       	brne	.-12     	; 0x7788 <__do_global_dtors+0x8>
    7794:	f8 94       	cli

00007796 <__stop_program>:
    7796:	ff cf       	rjmp	.-2      	; 0x7796 <__stop_program>
