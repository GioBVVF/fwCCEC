
templateVuoto.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000071e  00800100  00007386  0000741a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007386  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000308  0080081e  0080081e  00007b38  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00007b38  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007b68  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00001260  00000000  00000000  00007ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000393b2  00000000  00000000  00008e08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000075dd  00000000  00000000  000421ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000b76a  00000000  00000000  00049797  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00004034  00000000  00000000  00054f04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00008311  00000000  00000000  00058f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00018353  00000000  00000000  00061249  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001348  00000000  00000000  0007959c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	62 c1       	rjmp	.+708    	; 0x2c6 <__dtors_end>
       2:	00 00       	nop
       4:	8a c1       	rjmp	.+788    	; 0x31a <__bad_interrupt>
       6:	00 00       	nop
       8:	88 c1       	rjmp	.+784    	; 0x31a <__bad_interrupt>
       a:	00 00       	nop
       c:	86 c1       	rjmp	.+780    	; 0x31a <__bad_interrupt>
       e:	00 00       	nop
      10:	0c 94 20 0f 	jmp	0x1e40	; 0x1e40 <__vector_4>
      14:	82 c1       	rjmp	.+772    	; 0x31a <__bad_interrupt>
      16:	00 00       	nop
      18:	80 c1       	rjmp	.+768    	; 0x31a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	0c 94 44 0f 	jmp	0x1e88	; 0x1e88 <__vector_7>
      20:	7c c1       	rjmp	.+760    	; 0x31a <__bad_interrupt>
      22:	00 00       	nop
      24:	7a c1       	rjmp	.+756    	; 0x31a <__bad_interrupt>
      26:	00 00       	nop
      28:	78 c1       	rjmp	.+752    	; 0x31a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	76 c1       	rjmp	.+748    	; 0x31a <__bad_interrupt>
      2e:	00 00       	nop
      30:	74 c1       	rjmp	.+744    	; 0x31a <__bad_interrupt>
      32:	00 00       	nop
      34:	72 c1       	rjmp	.+740    	; 0x31a <__bad_interrupt>
      36:	00 00       	nop
      38:	70 c1       	rjmp	.+736    	; 0x31a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6e c1       	rjmp	.+732    	; 0x31a <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 d8 2e 	jmp	0x5db0	; 0x5db0 <__vector_16>
      44:	6a c1       	rjmp	.+724    	; 0x31a <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 cb 2c 	jmp	0x5996	; 0x5996 <__vector_18>
      4c:	0c 94 fd 2c 	jmp	0x59fa	; 0x59fa <__vector_19>
      50:	64 c1       	rjmp	.+712    	; 0x31a <__bad_interrupt>
      52:	00 00       	nop
      54:	62 c1       	rjmp	.+708    	; 0x31a <__bad_interrupt>
      56:	00 00       	nop
      58:	60 c1       	rjmp	.+704    	; 0x31a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5e c1       	rjmp	.+700    	; 0x31a <__bad_interrupt>
      5e:	00 00       	nop
      60:	5c c1       	rjmp	.+696    	; 0x31a <__bad_interrupt>
      62:	00 00       	nop
      64:	5a c1       	rjmp	.+692    	; 0x31a <__bad_interrupt>
      66:	00 00       	nop
      68:	0c 94 18 29 	jmp	0x5230	; 0x5230 <__vector_26>
      6c:	56 c1       	rjmp	.+684    	; 0x31a <__bad_interrupt>
      6e:	00 00       	nop
      70:	54 c1       	rjmp	.+680    	; 0x31a <__bad_interrupt>
      72:	00 00       	nop
      74:	52 c1       	rjmp	.+676    	; 0x31a <__bad_interrupt>
      76:	00 00       	nop
      78:	50 c1       	rjmp	.+672    	; 0x31a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4e c1       	rjmp	.+668    	; 0x31a <__bad_interrupt>
      7e:	00 00       	nop
      80:	4c c1       	rjmp	.+664    	; 0x31a <__bad_interrupt>
      82:	00 00       	nop
      84:	4a c1       	rjmp	.+660    	; 0x31a <__bad_interrupt>
      86:	00 00       	nop
      88:	48 c1       	rjmp	.+656    	; 0x31a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	73 09       	sbc	r23, r3
      8e:	98 09       	sbc	r25, r8
      90:	ad 09       	sbc	r26, r13
      92:	d6 09       	sbc	r29, r6
      94:	bf 0a       	sbc	r11, r31
      96:	76 0b       	sbc	r23, r22
      98:	42 0c       	add	r4, r2
      9a:	99 0c       	add	r9, r9
      9c:	d1 0c       	add	r13, r1
      9e:	3d 0d       	add	r19, r13
      a0:	f8 0d       	add	r31, r8
      a2:	f8 0d       	add	r31, r8
      a4:	af 17       	cp	r26, r31
      a6:	c6 17       	cp	r28, r22
      a8:	c6 17       	cp	r28, r22
      aa:	c3 17       	cp	r28, r19
      ac:	c6 17       	cp	r28, r22
      ae:	ad 17       	cp	r26, r29
      b0:	c6 17       	cp	r28, r22
      b2:	c6 17       	cp	r28, r22
      b4:	c6 17       	cp	r28, r22
      b6:	a1 17       	cp	r26, r17
      b8:	c6 17       	cp	r28, r22
      ba:	c6 17       	cp	r28, r22
      bc:	b6 17       	cp	r27, r22
      be:	c1 17       	cp	r28, r17
      c0:	bf 17       	cp	r27, r31
      c2:	c6 17       	cp	r28, r22
      c4:	c6 17       	cp	r28, r22
      c6:	c6 17       	cp	r28, r22
      c8:	bd 17       	cp	r27, r29

000000ca <__trampolines_end>:
      ca:	00 40       	sbci	r16, 0x00	; 0
      cc:	7a 10       	cpse	r7, r10
      ce:	f3 5a       	subi	r31, 0xA3	; 163
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	72 4e       	sbci	r23, 0xE2	; 226
      d4:	18 09       	sbc	r17, r8
      d6:	00 10       	cpse	r0, r0
      d8:	a5 d4       	rcall	.+2378   	; 0xa24 <_Z14GetCodeRfidATev+0xa2>
      da:	e8 00       	.word	0x00e8	; ????
      dc:	00 e8       	ldi	r16, 0x80	; 128
      de:	76 48       	sbci	r23, 0x86	; 134
      e0:	17 00       	.word	0x0017	; ????
      e2:	00 e4       	ldi	r16, 0x40	; 64
      e4:	0b 54       	subi	r16, 0x4B	; 75
      e6:	02 00       	.word	0x0002	; ????
      e8:	00 ca       	rjmp	.-3072   	; 0xfffff4ea <__eeprom_end+0xff7ef4ea>
      ea:	9a 3b       	cpi	r25, 0xBA	; 186
      ec:	00 00       	nop
      ee:	00 e1       	ldi	r16, 0x10	; 16
      f0:	f5 05       	cpc	r31, r5
      f2:	00 00       	nop
      f4:	80 96       	adiw	r24, 0x20	; 32
      f6:	98 00       	.word	0x0098	; ????
      f8:	00 00       	nop
      fa:	40 42       	sbci	r20, 0x20	; 32
      fc:	0f 00       	.word	0x000f	; ????
      fe:	00 00       	nop
     100:	a0 86       	std	Z+8, r10	; 0x08
     102:	01 00       	.word	0x0001	; ????
     104:	00 00       	nop
     106:	10 27       	eor	r17, r16
     108:	00 00       	nop
     10a:	00 00       	nop
     10c:	e8 03       	fmulsu	r22, r16
     10e:	00 00       	nop
     110:	00 00       	nop
     112:	64 00       	.word	0x0064	; ????
     114:	00 00       	nop
     116:	00 00       	nop
     118:	0a 00       	.word	0x000a	; ????
     11a:	00 00       	nop
     11c:	00 00       	nop
     11e:	01 00       	.word	0x0001	; ????
     120:	00 00       	nop
     122:	00 00       	nop
     124:	2c 76       	andi	r18, 0x6C	; 108
     126:	d8 88       	ldd	r13, Y+16	; 0x10
     128:	dc 67       	ori	r29, 0x7C	; 124
     12a:	4f 08       	sbc	r4, r15
     12c:	23 df       	rcall	.-442    	; 0xffffff74 <__eeprom_end+0xff7eff74>
     12e:	c1 df       	rcall	.-126    	; 0xb2 <__SREG__+0x73>
     130:	ae 59       	subi	r26, 0x9E	; 158
     132:	e1 b1       	in	r30, 0x01	; 1
     134:	b7 96       	adiw	r30, 0x27	; 39
     136:	e5 e3       	ldi	r30, 0x35	; 53
     138:	e4 53       	subi	r30, 0x34	; 52
     13a:	c6 3a       	cpi	r28, 0xA6	; 166
     13c:	e6 51       	subi	r30, 0x16	; 22
     13e:	99 76       	andi	r25, 0x69	; 105
     140:	96 e8       	ldi	r25, 0x86	; 134
     142:	e6 c2       	rjmp	.+1484   	; 0x710 <_Z10displayLCDP6Stringii+0xd0>
     144:	84 26       	eor	r8, r20
     146:	eb 89       	ldd	r30, Y+19	; 0x13
     148:	8c 9b       	sbis	0x11, 4	; 17
     14a:	62 ed       	ldi	r22, 0xD2	; 210
     14c:	40 7c       	andi	r20, 0xC0	; 192
     14e:	6f fc       	.word	0xfc6f	; ????
     150:	ef bc       	out	0x2f, r14	; 47
     152:	9c 9f       	mul	r25, r28
     154:	40 f2       	brcs	.-112    	; 0xe6 <__trampolines_end+0x1c>
     156:	ba a5       	ldd	r27, Y+42	; 0x2a
     158:	6f a5       	ldd	r22, Y+47	; 0x2f
     15a:	f4 90       	lpm	r15, Z
     15c:	05 5a       	subi	r16, 0xA5	; 165
     15e:	2a f7       	brpl	.-54     	; 0x12a <__trampolines_end+0x60>
     160:	5c 93       	st	X, r21
     162:	6b 6c       	ori	r22, 0xCB	; 203
     164:	f9 67       	ori	r31, 0x79	; 121
     166:	6d c1       	rjmp	.+730    	; 0x442 <_Z6Buzzerhm+0xa>
     168:	1b fc       	.word	0xfc1b	; ????
     16a:	e0 e4       	ldi	r30, 0x40	; 64
     16c:	0d 47       	sbci	r16, 0x7D	; 125
     16e:	fe f5       	brtc	.+126    	; 0x1ee <_ZZ5setupE3__c+0xc>
     170:	20 e6       	ldi	r18, 0x60	; 96
     172:	b5 00       	.word	0x00b5	; ????
     174:	d0 ed       	ldi	r29, 0xD0	; 208
     176:	90 2e       	mov	r9, r16
     178:	03 00       	.word	0x0003	; ????
     17a:	94 35       	cpi	r25, 0x54	; 84
     17c:	77 05       	cpc	r23, r7
     17e:	00 80       	ld	r0, Z
     180:	84 1e       	adc	r8, r20
     182:	08 00       	.word	0x0008	; ????
     184:	00 20       	and	r0, r0
     186:	4e 0a       	sbc	r4, r30
     188:	00 00       	nop
     18a:	00 c8       	rjmp	.-4096   	; 0xfffff18c <__eeprom_end+0xff7ef18c>
     18c:	0c 33       	cpi	r16, 0x3C	; 60
     18e:	33 33       	cpi	r19, 0x33	; 51
     190:	33 0f       	add	r19, r19
     192:	98 6e       	ori	r25, 0xE8	; 232
     194:	12 83       	std	Z+2, r17	; 0x02
     196:	11 41       	sbci	r17, 0x11	; 17
     198:	ef 8d       	ldd	r30, Y+31	; 0x1f
     19a:	21 14       	cp	r2, r1
     19c:	89 3b       	cpi	r24, 0xB9	; 185
     19e:	e6 55       	subi	r30, 0x56	; 86
     1a0:	16 cf       	rjmp	.-468    	; 0xffffffce <__eeprom_end+0xff7effce>
     1a2:	fe e6       	ldi	r31, 0x6E	; 110
     1a4:	db 18       	sub	r13, r11
     1a6:	d1 84       	ldd	r13, Z+9	; 0x09
     1a8:	4b 38       	cpi	r20, 0x8B	; 139
     1aa:	1b f7       	brvc	.-58     	; 0x172 <__trampolines_end+0xa8>
     1ac:	7c 1d       	adc	r23, r12
     1ae:	90 1d       	adc	r25, r0
     1b0:	a4 bb       	out	0x14, r26	; 20
     1b2:	e4 24       	eor	r14, r4
     1b4:	20 32       	cpi	r18, 0x20	; 32
     1b6:	84 72       	andi	r24, 0x24	; 36
     1b8:	5e 22       	and	r5, r30
     1ba:	81 00       	.word	0x0081	; ????
     1bc:	c9 f1       	breq	.+114    	; 0x230 <_ZL11daysInMonth+0xa>
     1be:	24 ec       	ldi	r18, 0xC4	; 196
     1c0:	a1 e5       	ldi	r26, 0x51	; 81
     1c2:	3d 27       	eor	r19, r29

000001c4 <_ZZ5setupE3__c_0>:
     1c4:	52 54 43 20 63 68 69 70 20 44 53 33 32 33 31 4d     RTC chip DS3231M
     1d4:	20 69 6e 69 74 69 61 6c 69 7a 65 64 2e 00            initialized..

000001e2 <_ZZ5setupE3__c>:
     1e2:	55 6e 61 62 6c 65 20 74 6f 20 66 69 6e 64 20 44     Unable to find D
     1f2:	53 33 32 33 31 4d 4d 2e 20 43 68 65 63 6b 69 6e     S3231MM. Checkin
     202:	67 20 61 67 61 69 6e 20 69 6e 20 33 73 2e 00        g again in 3s..

00000211 <_ZZN13DS3231M_Class6adjustEvE3__c>:
     211:	53 65 70 20 31 30 20 32 30 32 30 00                 Sep 10 2020.

0000021d <_ZZN13DS3231M_Class6adjustEvE3__c_0>:
     21d:	30 39 3a 31 33 3a 31 34 00                          09:13:14.

00000226 <_ZL11daysInMonth>:
     226:	1f 1c 1f 1e 1f 1e 1f 1f 1e 1f 1e 1f                 ............

00000232 <digital_pin_to_timer_PGM>:
     232:	00 00 00 00 04 03 08 07 00 00 02 00 09 0a 00 00     ................
	...
     24e:	00 00 00 01                                         ....

00000252 <digital_pin_to_bit_mask_PGM>:
     252:	01 02 04 08 10 20 40 80 01 02 10 20 40 80 10 20     ..... @.... @.. 
     262:	40 80 10 08 20 04 40 80 01 02 04 08 01 02 04 08     @... .@.........

00000272 <digital_pin_to_port_PGM>:
     272:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 01 01     ................
     282:	01 01 03 03 03 03 03 03 01 01 01 01 03 03 02 02     ................

00000292 <port_to_input_PGM>:
     292:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

0000029c <port_to_output_PGM>:
     29c:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000002a6 <port_to_mode_PGM>:
     2a6:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000002b0 <__ctors_start>:
     2b0:	f7 0f       	add	r31, r23
     2b2:	35 1a       	sub	r3, r21
     2b4:	8d 1a       	sub	r8, r29
     2b6:	85 1d       	adc	r24, r5
     2b8:	6c 1f       	adc	r22, r28
     2ba:	77 1f       	adc	r23, r23
     2bc:	49 21       	and	r20, r9
     2be:	19 25       	eor	r17, r9
     2c0:	a8 2b       	or	r26, r24
     2c2:	2b 2d       	mov	r18, r11

000002c4 <__ctors_end>:
     2c4:	c8 10       	cpse	r12, r8

000002c6 <__dtors_end>:
     2c6:	11 24       	eor	r1, r1
     2c8:	1f be       	out	0x3f, r1	; 63
     2ca:	cf ef       	ldi	r28, 0xFF	; 255
     2cc:	d0 e4       	ldi	r29, 0x40	; 64
     2ce:	de bf       	out	0x3e, r29	; 62
     2d0:	cd bf       	out	0x3d, r28	; 61

000002d2 <__do_copy_data>:
     2d2:	18 e0       	ldi	r17, 0x08	; 8
     2d4:	a0 e0       	ldi	r26, 0x00	; 0
     2d6:	b1 e0       	ldi	r27, 0x01	; 1
     2d8:	e6 e8       	ldi	r30, 0x86	; 134
     2da:	f3 e7       	ldi	r31, 0x73	; 115
     2dc:	00 e0       	ldi	r16, 0x00	; 0
     2de:	0b bf       	out	0x3b, r16	; 59
     2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <__do_copy_data+0x14>
     2e2:	07 90       	elpm	r0, Z+
     2e4:	0d 92       	st	X+, r0
     2e6:	ae 31       	cpi	r26, 0x1E	; 30
     2e8:	b1 07       	cpc	r27, r17
     2ea:	d9 f7       	brne	.-10     	; 0x2e2 <__do_copy_data+0x10>

000002ec <__do_clear_bss>:
     2ec:	2b e0       	ldi	r18, 0x0B	; 11
     2ee:	ae e1       	ldi	r26, 0x1E	; 30
     2f0:	b8 e0       	ldi	r27, 0x08	; 8
     2f2:	01 c0       	rjmp	.+2      	; 0x2f6 <.do_clear_bss_start>

000002f4 <.do_clear_bss_loop>:
     2f4:	1d 92       	st	X+, r1

000002f6 <.do_clear_bss_start>:
     2f6:	a6 32       	cpi	r26, 0x26	; 38
     2f8:	b2 07       	cpc	r27, r18
     2fa:	e1 f7       	brne	.-8      	; 0x2f4 <.do_clear_bss_loop>

000002fc <__do_global_ctors>:
     2fc:	11 e0       	ldi	r17, 0x01	; 1
     2fe:	c2 e6       	ldi	r28, 0x62	; 98
     300:	d1 e0       	ldi	r29, 0x01	; 1
     302:	04 c0       	rjmp	.+8      	; 0x30c <__do_global_ctors+0x10>
     304:	21 97       	sbiw	r28, 0x01	; 1
     306:	fe 01       	movw	r30, r28
     308:	0e 94 80 34 	call	0x6900	; 0x6900 <__tablejump2__>
     30c:	c8 35       	cpi	r28, 0x58	; 88
     30e:	d1 07       	cpc	r29, r17
     310:	c9 f7       	brne	.-14     	; 0x304 <__do_global_ctors+0x8>
     312:	0e 94 b7 2d 	call	0x5b6e	; 0x5b6e <main>
     316:	0c 94 b7 39 	jmp	0x736e	; 0x736e <__do_global_dtors>

0000031a <__bad_interrupt>:
     31a:	72 ce       	rjmp	.-796    	; 0x0 <__vectors>

0000031c <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     31c:	80 e0       	ldi	r24, 0x00	; 0
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	08 95       	ret

00000322 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     322:	08 95       	ret

00000324 <_ZL10enable_ETHv>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     324:	44 98       	cbi	0x08, 4	; 8
     326:	08 95       	ret

00000328 <_ZL11disable_ETHv>:
     328:	44 9a       	sbi	0x08, 4	; 8
     32a:	08 95       	ret

0000032c <_Z19InizializzaEthernetv>:
     32c:	ef 92       	push	r14
     32e:	ff 92       	push	r15
     330:	0f 93       	push	r16
     332:	1f 93       	push	r17
     334:	cf 93       	push	r28
     336:	df 93       	push	r29
     338:	cd b7       	in	r28, 0x3d	; 61
     33a:	de b7       	in	r29, 0x3e	; 62
     33c:	68 97       	sbiw	r28, 0x18	; 24
     33e:	0f b6       	in	r0, 0x3f	; 63
     340:	f8 94       	cli
     342:	de bf       	out	0x3e, r29	; 62
     344:	0f be       	out	0x3f, r0	; 63
     346:	cd bf       	out	0x3d, r28	; 61
     348:	8d ef       	ldi	r24, 0xFD	; 253
     34a:	97 e0       	ldi	r25, 0x07	; 7
     34c:	9a 83       	std	Y+2, r25	; 0x02
     34e:	89 83       	std	Y+1, r24	; 0x01
     350:	40 91 61 08 	lds	r20, 0x0861	; 0x800861 <subnet+0x2>
     354:	50 91 62 08 	lds	r21, 0x0862	; 0x800862 <subnet+0x3>
     358:	60 91 63 08 	lds	r22, 0x0863	; 0x800863 <subnet+0x4>
     35c:	70 91 64 08 	lds	r23, 0x0864	; 0x800864 <subnet+0x5>
     360:	4b 83       	std	Y+3, r20	; 0x03
     362:	5c 83       	std	Y+4, r21	; 0x04
     364:	6d 83       	std	Y+5, r22	; 0x05
     366:	7e 83       	std	Y+6, r23	; 0x06
     368:	98 87       	std	Y+8, r25	; 0x08
     36a:	8f 83       	std	Y+7, r24	; 0x07
     36c:	40 91 67 08 	lds	r20, 0x0867	; 0x800867 <gateway+0x2>
     370:	50 91 68 08 	lds	r21, 0x0868	; 0x800868 <gateway+0x3>
     374:	60 91 69 08 	lds	r22, 0x0869	; 0x800869 <gateway+0x4>
     378:	70 91 6a 08 	lds	r23, 0x086A	; 0x80086a <gateway+0x5>
     37c:	49 87       	std	Y+9, r20	; 0x09
     37e:	5a 87       	std	Y+10, r21	; 0x0a
     380:	6b 87       	std	Y+11, r22	; 0x0b
     382:	7c 87       	std	Y+12, r23	; 0x0c
     384:	9e 87       	std	Y+14, r25	; 0x0e
     386:	8d 87       	std	Y+13, r24	; 0x0d
     388:	40 91 6d 08 	lds	r20, 0x086D	; 0x80086d <myDns+0x2>
     38c:	50 91 6e 08 	lds	r21, 0x086E	; 0x80086e <myDns+0x3>
     390:	60 91 6f 08 	lds	r22, 0x086F	; 0x80086f <myDns+0x4>
     394:	70 91 70 08 	lds	r23, 0x0870	; 0x800870 <myDns+0x5>
     398:	4f 87       	std	Y+15, r20	; 0x0f
     39a:	58 8b       	std	Y+16, r21	; 0x10
     39c:	69 8b       	std	Y+17, r22	; 0x11
     39e:	7a 8b       	std	Y+18, r23	; 0x12
     3a0:	9c 8b       	std	Y+20, r25	; 0x14
     3a2:	8b 8b       	std	Y+19, r24	; 0x13
     3a4:	80 91 73 08 	lds	r24, 0x0873	; 0x800873 <ipCCEC+0x2>
     3a8:	90 91 74 08 	lds	r25, 0x0874	; 0x800874 <ipCCEC+0x3>
     3ac:	a0 91 75 08 	lds	r26, 0x0875	; 0x800875 <ipCCEC+0x4>
     3b0:	b0 91 76 08 	lds	r27, 0x0876	; 0x800876 <ipCCEC+0x5>
     3b4:	8d 8b       	std	Y+21, r24	; 0x15
     3b6:	9e 8b       	std	Y+22, r25	; 0x16
     3b8:	af 8b       	std	Y+23, r26	; 0x17
     3ba:	b8 8f       	std	Y+24, r27	; 0x18
     3bc:	ce 01       	movw	r24, r28
     3be:	01 96       	adiw	r24, 0x01	; 1
     3c0:	7c 01       	movw	r14, r24
     3c2:	8e 01       	movw	r16, r28
     3c4:	09 5f       	subi	r16, 0xF9	; 249
     3c6:	1f 4f       	sbci	r17, 0xFF	; 255
     3c8:	9e 01       	movw	r18, r28
     3ca:	23 5f       	subi	r18, 0xF3	; 243
     3cc:	3f 4f       	sbci	r19, 0xFF	; 255
     3ce:	ae 01       	movw	r20, r28
     3d0:	4d 5e       	subi	r20, 0xED	; 237
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	66 e2       	ldi	r22, 0x26	; 38
     3d6:	71 e0       	ldi	r23, 0x01	; 1
     3d8:	89 e7       	ldi	r24, 0x79	; 121
     3da:	99 e0       	ldi	r25, 0x09	; 9
     3dc:	0e 94 3f 1d 	call	0x3a7e	; 0x3a7e <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_>
     3e0:	68 96       	adiw	r28, 0x18	; 24
     3e2:	0f b6       	in	r0, 0x3f	; 63
     3e4:	f8 94       	cli
     3e6:	de bf       	out	0x3e, r29	; 62
     3e8:	0f be       	out	0x3f, r0	; 63
     3ea:	cd bf       	out	0x3d, r28	; 61
     3ec:	df 91       	pop	r29
     3ee:	cf 91       	pop	r28
     3f0:	1f 91       	pop	r17
     3f2:	0f 91       	pop	r16
     3f4:	ff 90       	pop	r15
     3f6:	ef 90       	pop	r14
     3f8:	08 95       	ret

000003fa <_Z11my_delay_msi>:
     3fa:	18 16       	cp	r1, r24
     3fc:	19 06       	cpc	r1, r25
     3fe:	44 f4       	brge	.+16     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     400:	ef e9       	ldi	r30, 0x9F	; 159
     402:	ff e0       	ldi	r31, 0x0F	; 15
     404:	31 97       	sbiw	r30, 0x01	; 1
     406:	f1 f7       	brne	.-4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     408:	00 c0       	rjmp	.+0      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     40a:	00 00       	nop
     40c:	01 97       	sbiw	r24, 0x01	; 1
     40e:	f5 cf       	rjmp	.-22     	; 0x3fa <_Z11my_delay_msi>
     410:	08 95       	ret

00000412 <_Z9printLinev>:
     412:	cf 93       	push	r28
     414:	8c e7       	ldi	r24, 0x7C	; 124
     416:	9a e0       	ldi	r25, 0x0A	; 10
     418:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <_ZN5Print7printlnEv>
     41c:	cd e7       	ldi	r28, 0x7D	; 125
     41e:	61 e8       	ldi	r22, 0x81	; 129
     420:	71 e0       	ldi	r23, 0x01	; 1
     422:	8c e7       	ldi	r24, 0x7C	; 124
     424:	9a e0       	ldi	r25, 0x0A	; 10
     426:	0e 94 34 2e 	call	0x5c68	; 0x5c68 <_ZN5Print5printEPKc>
     42a:	c1 50       	subi	r28, 0x01	; 1
     42c:	c1 f7       	brne	.-16     	; 0x41e <_Z9printLinev+0xc>
     42e:	8c e7       	ldi	r24, 0x7C	; 124
     430:	9a e0       	ldi	r25, 0x0A	; 10
     432:	cf 91       	pop	r28
     434:	0c 94 3c 2e 	jmp	0x5c78	; 0x5c78 <_ZN5Print7printlnEv>

00000438 <_Z6Buzzerhm>:
     438:	cf 92       	push	r12
     43a:	df 92       	push	r13
     43c:	ef 92       	push	r14
     43e:	ff 92       	push	r15
     440:	0f 93       	push	r16
     442:	1f 93       	push	r17
     444:	cf 93       	push	r28
     446:	df 93       	push	r29
     448:	6a 01       	movw	r12, r20
     44a:	7b 01       	movw	r14, r22
     44c:	c0 e0       	ldi	r28, 0x00	; 0
     44e:	d0 e0       	ldi	r29, 0x00	; 0
     450:	08 2f       	mov	r16, r24
     452:	10 e0       	ldi	r17, 0x00	; 0
     454:	c0 17       	cp	r28, r16
     456:	d1 07       	cpc	r29, r17
     458:	24 f4       	brge	.+8      	; 0x462 <_Z6Buzzerhm+0x2a>
     45a:	c6 01       	movw	r24, r12
     45c:	ce df       	rcall	.-100    	; 0x3fa <_Z11my_delay_msi>
     45e:	21 96       	adiw	r28, 0x01	; 1
     460:	f9 cf       	rjmp	.-14     	; 0x454 <_Z6Buzzerhm+0x1c>
     462:	df 91       	pop	r29
     464:	cf 91       	pop	r28
     466:	1f 91       	pop	r17
     468:	0f 91       	pop	r16
     46a:	ff 90       	pop	r15
     46c:	ef 90       	pop	r14
     46e:	df 90       	pop	r13
     470:	cf 90       	pop	r12
     472:	08 95       	ret

00000474 <_Z13getCharKeypadi>:
     474:	82 32       	cpi	r24, 0x22	; 34
     476:	91 05       	cpc	r25, r1
     478:	09 f4       	brne	.+2      	; 0x47c <_Z13getCharKeypadi+0x8>
     47a:	9a c0       	rjmp	.+308    	; 0x5b0 <_Z13getCharKeypadi+0x13c>
     47c:	6c f5       	brge	.+90     	; 0x4d8 <_Z13getCharKeypadi+0x64>
     47e:	8a 30       	cpi	r24, 0x0A	; 10
     480:	91 05       	cpc	r25, r1
     482:	09 f4       	brne	.+2      	; 0x486 <_Z13getCharKeypadi+0x12>
     484:	83 c0       	rjmp	.+262    	; 0x58c <_Z13getCharKeypadi+0x118>
     486:	a4 f4       	brge	.+40     	; 0x4b0 <_Z13getCharKeypadi+0x3c>
     488:	86 30       	cpi	r24, 0x06	; 6
     48a:	91 05       	cpc	r25, r1
     48c:	09 f4       	brne	.+2      	; 0x490 <_Z13getCharKeypadi+0x1c>
     48e:	75 c0       	rjmp	.+234    	; 0x57a <_Z13getCharKeypadi+0x106>
     490:	89 30       	cpi	r24, 0x09	; 9
     492:	91 05       	cpc	r25, r1
     494:	09 f4       	brne	.+2      	; 0x498 <_Z13getCharKeypadi+0x24>
     496:	5d c0       	rjmp	.+186    	; 0x552 <_Z13getCharKeypadi+0xde>
     498:	05 97       	sbiw	r24, 0x05	; 5
     49a:	09 f0       	breq	.+2      	; 0x49e <_Z13getCharKeypadi+0x2a>
     49c:	cf c0       	rjmp	.+414    	; 0x63c <_Z13getCharKeypadi+0x1c8>
     49e:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <MappaKeys>
     4a2:	8c e7       	ldi	r24, 0x7C	; 124
     4a4:	9a e0       	ldi	r25, 0x0A	; 10
     4a6:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <_ZN5Print5printEc>
     4aa:	20 e0       	ldi	r18, 0x00	; 0
     4ac:	30 e0       	ldi	r19, 0x00	; 0
     4ae:	59 c0       	rjmp	.+178    	; 0x562 <_Z13getCharKeypadi+0xee>
     4b0:	82 31       	cpi	r24, 0x12	; 18
     4b2:	91 05       	cpc	r25, r1
     4b4:	09 f4       	brne	.+2      	; 0x4b8 <_Z13getCharKeypadi+0x44>
     4b6:	73 c0       	rjmp	.+230    	; 0x59e <_Z13getCharKeypadi+0x12a>
     4b8:	81 32       	cpi	r24, 0x21	; 33
     4ba:	91 05       	cpc	r25, r1
     4bc:	09 f4       	brne	.+2      	; 0x4c0 <_Z13getCharKeypadi+0x4c>
     4be:	54 c0       	rjmp	.+168    	; 0x568 <_Z13getCharKeypadi+0xf4>
     4c0:	41 97       	sbiw	r24, 0x11	; 17
     4c2:	09 f0       	breq	.+2      	; 0x4c6 <_Z13getCharKeypadi+0x52>
     4c4:	bb c0       	rjmp	.+374    	; 0x63c <_Z13getCharKeypadi+0x1c8>
     4c6:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <MappaKeys+0x2>
     4ca:	8c e7       	ldi	r24, 0x7C	; 124
     4cc:	9a e0       	ldi	r25, 0x0A	; 10
     4ce:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <_ZN5Print5printEc>
     4d2:	22 e0       	ldi	r18, 0x02	; 2
     4d4:	30 e0       	ldi	r19, 0x00	; 0
     4d6:	45 c0       	rjmp	.+138    	; 0x562 <_Z13getCharKeypadi+0xee>
     4d8:	80 36       	cpi	r24, 0x60	; 96
     4da:	91 05       	cpc	r25, r1
     4dc:	09 f4       	brne	.+2      	; 0x4e0 <_Z13getCharKeypadi+0x6c>
     4de:	99 c0       	rjmp	.+306    	; 0x612 <_Z13getCharKeypadi+0x19e>
     4e0:	ac f4       	brge	.+42     	; 0x50c <_Z13getCharKeypadi+0x98>
     4e2:	88 34       	cpi	r24, 0x48	; 72
     4e4:	91 05       	cpc	r25, r1
     4e6:	09 f4       	brne	.+2      	; 0x4ea <_Z13getCharKeypadi+0x76>
     4e8:	82 c0       	rjmp	.+260    	; 0x5ee <_Z13getCharKeypadi+0x17a>
     4ea:	80 35       	cpi	r24, 0x50	; 80
     4ec:	91 05       	cpc	r25, r1
     4ee:	09 f4       	brne	.+2      	; 0x4f2 <_Z13getCharKeypadi+0x7e>
     4f0:	87 c0       	rjmp	.+270    	; 0x600 <_Z13getCharKeypadi+0x18c>
     4f2:	84 34       	cpi	r24, 0x44	; 68
     4f4:	91 05       	cpc	r25, r1
     4f6:	09 f0       	breq	.+2      	; 0x4fa <_Z13getCharKeypadi+0x86>
     4f8:	a1 c0       	rjmp	.+322    	; 0x63c <_Z13getCharKeypadi+0x1c8>
     4fa:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <MappaKeys+0xc>
     4fe:	8c e7       	ldi	r24, 0x7C	; 124
     500:	9a e0       	ldi	r25, 0x0A	; 10
     502:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <_ZN5Print5printEc>
     506:	20 e0       	ldi	r18, 0x00	; 0
     508:	30 e0       	ldi	r19, 0x00	; 0
     50a:	8b c0       	rjmp	.+278    	; 0x622 <_Z13getCharKeypadi+0x1ae>
     50c:	88 38       	cpi	r24, 0x88	; 136
     50e:	91 05       	cpc	r25, r1
     510:	09 f4       	brne	.+2      	; 0x514 <_Z13getCharKeypadi+0xa0>
     512:	59 c0       	rjmp	.+178    	; 0x5c6 <_Z13getCharKeypadi+0x152>
     514:	6c f4       	brge	.+26     	; 0x530 <_Z13getCharKeypadi+0xbc>
     516:	84 38       	cpi	r24, 0x84	; 132
     518:	91 05       	cpc	r25, r1
     51a:	09 f0       	breq	.+2      	; 0x51e <_Z13getCharKeypadi+0xaa>
     51c:	8f c0       	rjmp	.+286    	; 0x63c <_Z13getCharKeypadi+0x1c8>
     51e:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <MappaKeys+0x8>
     522:	8c e7       	ldi	r24, 0x7C	; 124
     524:	9a e0       	ldi	r25, 0x0A	; 10
     526:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <_ZN5Print5printEc>
     52a:	20 e0       	ldi	r18, 0x00	; 0
     52c:	30 e0       	ldi	r19, 0x00	; 0
     52e:	5c c0       	rjmp	.+184    	; 0x5e8 <_Z13getCharKeypadi+0x174>
     530:	80 39       	cpi	r24, 0x90	; 144
     532:	91 05       	cpc	r25, r1
     534:	09 f4       	brne	.+2      	; 0x538 <_Z13getCharKeypadi+0xc4>
     536:	50 c0       	rjmp	.+160    	; 0x5d8 <_Z13getCharKeypadi+0x164>
     538:	80 3a       	cpi	r24, 0xA0	; 160
     53a:	91 05       	cpc	r25, r1
     53c:	09 f0       	breq	.+2      	; 0x540 <_Z13getCharKeypadi+0xcc>
     53e:	7e c0       	rjmp	.+252    	; 0x63c <_Z13getCharKeypadi+0x1c8>
     540:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <MappaKeys+0xb>
     544:	8c e7       	ldi	r24, 0x7C	; 124
     546:	9a e0       	ldi	r25, 0x0A	; 10
     548:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <_ZN5Print5printEc>
     54c:	23 e0       	ldi	r18, 0x03	; 3
     54e:	30 e0       	ldi	r19, 0x00	; 0
     550:	4b c0       	rjmp	.+150    	; 0x5e8 <_Z13getCharKeypadi+0x174>
     552:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <MappaKeys+0x1>
     556:	8c e7       	ldi	r24, 0x7C	; 124
     558:	9a e0       	ldi	r25, 0x0A	; 10
     55a:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <_ZN5Print5printEc>
     55e:	21 e0       	ldi	r18, 0x01	; 1
     560:	30 e0       	ldi	r19, 0x00	; 0
     562:	80 e0       	ldi	r24, 0x00	; 0
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	5f c0       	rjmp	.+190    	; 0x626 <_Z13getCharKeypadi+0x1b2>
     568:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <MappaKeys+0x3>
     56c:	8c e7       	ldi	r24, 0x7C	; 124
     56e:	9a e0       	ldi	r25, 0x0A	; 10
     570:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <_ZN5Print5printEc>
     574:	23 e0       	ldi	r18, 0x03	; 3
     576:	30 e0       	ldi	r19, 0x00	; 0
     578:	f4 cf       	rjmp	.-24     	; 0x562 <_Z13getCharKeypadi+0xee>
     57a:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <MappaKeys+0x4>
     57e:	8c e7       	ldi	r24, 0x7C	; 124
     580:	9a e0       	ldi	r25, 0x0A	; 10
     582:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <_ZN5Print5printEc>
     586:	20 e0       	ldi	r18, 0x00	; 0
     588:	30 e0       	ldi	r19, 0x00	; 0
     58a:	1a c0       	rjmp	.+52     	; 0x5c0 <_Z13getCharKeypadi+0x14c>
     58c:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <MappaKeys+0x5>
     590:	8c e7       	ldi	r24, 0x7C	; 124
     592:	9a e0       	ldi	r25, 0x0A	; 10
     594:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <_ZN5Print5printEc>
     598:	21 e0       	ldi	r18, 0x01	; 1
     59a:	30 e0       	ldi	r19, 0x00	; 0
     59c:	11 c0       	rjmp	.+34     	; 0x5c0 <_Z13getCharKeypadi+0x14c>
     59e:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <MappaKeys+0x6>
     5a2:	8c e7       	ldi	r24, 0x7C	; 124
     5a4:	9a e0       	ldi	r25, 0x0A	; 10
     5a6:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <_ZN5Print5printEc>
     5aa:	22 e0       	ldi	r18, 0x02	; 2
     5ac:	30 e0       	ldi	r19, 0x00	; 0
     5ae:	08 c0       	rjmp	.+16     	; 0x5c0 <_Z13getCharKeypadi+0x14c>
     5b0:	60 91 0d 01 	lds	r22, 0x010D	; 0x80010d <MappaKeys+0x7>
     5b4:	8c e7       	ldi	r24, 0x7C	; 124
     5b6:	9a e0       	ldi	r25, 0x0A	; 10
     5b8:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <_ZN5Print5printEc>
     5bc:	23 e0       	ldi	r18, 0x03	; 3
     5be:	30 e0       	ldi	r19, 0x00	; 0
     5c0:	81 e0       	ldi	r24, 0x01	; 1
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	30 c0       	rjmp	.+96     	; 0x626 <_Z13getCharKeypadi+0x1b2>
     5c6:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <MappaKeys+0x9>
     5ca:	8c e7       	ldi	r24, 0x7C	; 124
     5cc:	9a e0       	ldi	r25, 0x0A	; 10
     5ce:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <_ZN5Print5printEc>
     5d2:	21 e0       	ldi	r18, 0x01	; 1
     5d4:	30 e0       	ldi	r19, 0x00	; 0
     5d6:	08 c0       	rjmp	.+16     	; 0x5e8 <_Z13getCharKeypadi+0x174>
     5d8:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <MappaKeys+0xa>
     5dc:	8c e7       	ldi	r24, 0x7C	; 124
     5de:	9a e0       	ldi	r25, 0x0A	; 10
     5e0:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <_ZN5Print5printEc>
     5e4:	22 e0       	ldi	r18, 0x02	; 2
     5e6:	30 e0       	ldi	r19, 0x00	; 0
     5e8:	82 e0       	ldi	r24, 0x02	; 2
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	1c c0       	rjmp	.+56     	; 0x626 <_Z13getCharKeypadi+0x1b2>
     5ee:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <MappaKeys+0xd>
     5f2:	8c e7       	ldi	r24, 0x7C	; 124
     5f4:	9a e0       	ldi	r25, 0x0A	; 10
     5f6:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <_ZN5Print5printEc>
     5fa:	21 e0       	ldi	r18, 0x01	; 1
     5fc:	30 e0       	ldi	r19, 0x00	; 0
     5fe:	11 c0       	rjmp	.+34     	; 0x622 <_Z13getCharKeypadi+0x1ae>
     600:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <MappaKeys+0xe>
     604:	8c e7       	ldi	r24, 0x7C	; 124
     606:	9a e0       	ldi	r25, 0x0A	; 10
     608:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <_ZN5Print5printEc>
     60c:	22 e0       	ldi	r18, 0x02	; 2
     60e:	30 e0       	ldi	r19, 0x00	; 0
     610:	08 c0       	rjmp	.+16     	; 0x622 <_Z13getCharKeypadi+0x1ae>
     612:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <MappaKeys+0xf>
     616:	8c e7       	ldi	r24, 0x7C	; 124
     618:	9a e0       	ldi	r25, 0x0A	; 10
     61a:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <_ZN5Print5printEc>
     61e:	23 e0       	ldi	r18, 0x03	; 3
     620:	30 e0       	ldi	r19, 0x00	; 0
     622:	83 e0       	ldi	r24, 0x03	; 3
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	88 0f       	add	r24, r24
     628:	99 1f       	adc	r25, r25
     62a:	88 0f       	add	r24, r24
     62c:	99 1f       	adc	r25, r25
     62e:	8a 5f       	subi	r24, 0xFA	; 250
     630:	9e 4f       	sbci	r25, 0xFE	; 254
     632:	fc 01       	movw	r30, r24
     634:	e2 0f       	add	r30, r18
     636:	f3 1f       	adc	r31, r19
     638:	80 81       	ld	r24, Z
     63a:	08 95       	ret
     63c:	8e e4       	ldi	r24, 0x4E	; 78
     63e:	08 95       	ret

00000640 <_Z10displayLCDP6Stringii>:
     640:	cf 92       	push	r12
     642:	df 92       	push	r13
     644:	ef 92       	push	r14
     646:	ff 92       	push	r15
     648:	0f 93       	push	r16
     64a:	1f 93       	push	r17
     64c:	cf 93       	push	r28
     64e:	df 93       	push	r29
     650:	cd b7       	in	r28, 0x3d	; 61
     652:	de b7       	in	r29, 0x3e	; 62
     654:	2c 97       	sbiw	r28, 0x0c	; 12
     656:	0f b6       	in	r0, 0x3f	; 63
     658:	f8 94       	cli
     65a:	de bf       	out	0x3e, r29	; 62
     65c:	0f be       	out	0x3f, r0	; 63
     65e:	cd bf       	out	0x3d, r28	; 61
     660:	8c 01       	movw	r16, r24
     662:	6b 01       	movw	r12, r22
     664:	7a 01       	movw	r14, r20
     666:	84 ef       	ldi	r24, 0xF4	; 244
     668:	98 e0       	ldi	r25, 0x08	; 8
     66a:	0e 94 a4 25 	call	0x4b48	; 0x4b48 <_ZN3LCD5clearEv>
     66e:	82 e0       	ldi	r24, 0x02	; 2
     670:	c8 16       	cp	r12, r24
     672:	d1 04       	cpc	r13, r1
     674:	0c f4       	brge	.+2      	; 0x678 <_Z10displayLCDP6Stringii+0x38>
     676:	47 c0       	rjmp	.+142    	; 0x706 <_Z10displayLCDP6Stringii+0xc6>
     678:	40 91 31 08 	lds	r20, 0x0831	; 0x800831 <UltimoPassaggioStato>
     67c:	50 91 32 08 	lds	r21, 0x0832	; 0x800832 <UltimoPassaggioStato+0x1>
     680:	60 91 33 08 	lds	r22, 0x0833	; 0x800833 <UltimoPassaggioStato+0x2>
     684:	70 91 34 08 	lds	r23, 0x0834	; 0x800834 <UltimoPassaggioStato+0x3>
     688:	80 91 2d 08 	lds	r24, 0x082D	; 0x80082d <Timer>
     68c:	90 91 2e 08 	lds	r25, 0x082E	; 0x80082e <Timer+0x1>
     690:	a0 91 2f 08 	lds	r26, 0x082F	; 0x80082f <Timer+0x2>
     694:	b0 91 30 08 	lds	r27, 0x0830	; 0x800830 <Timer+0x3>
     698:	48 0f       	add	r20, r24
     69a:	59 1f       	adc	r21, r25
     69c:	6a 1f       	adc	r22, r26
     69e:	7b 1f       	adc	r23, r27
     6a0:	41 50       	subi	r20, 0x01	; 1
     6a2:	51 09       	sbc	r21, r1
     6a4:	61 09       	sbc	r22, r1
     6a6:	71 09       	sbc	r23, r1
     6a8:	80 91 35 08 	lds	r24, 0x0835	; 0x800835 <secs>
     6ac:	90 91 36 08 	lds	r25, 0x0836	; 0x800836 <secs+0x1>
     6b0:	a0 91 37 08 	lds	r26, 0x0837	; 0x800837 <secs+0x2>
     6b4:	b0 91 38 08 	lds	r27, 0x0838	; 0x800838 <secs+0x3>
     6b8:	48 1b       	sub	r20, r24
     6ba:	59 0b       	sbc	r21, r25
     6bc:	6a 0b       	sbc	r22, r26
     6be:	7b 0b       	sbc	r23, r27
     6c0:	2a e0       	ldi	r18, 0x0A	; 10
     6c2:	ce 01       	movw	r24, r28
     6c4:	07 96       	adiw	r24, 0x07	; 7
     6c6:	0e 94 cb 31 	call	0x6396	; 0x6396 <_ZN6StringC1Emh>
     6ca:	63 e9       	ldi	r22, 0x93	; 147
     6cc:	71 e0       	ldi	r23, 0x01	; 1
     6ce:	ce 01       	movw	r24, r28
     6d0:	01 96       	adiw	r24, 0x01	; 1
     6d2:	0e 94 f5 30 	call	0x61ea	; 0x61ea <_ZN6StringC1EPKc>
     6d6:	be 01       	movw	r22, r28
     6d8:	69 5f       	subi	r22, 0xF9	; 249
     6da:	7f 4f       	sbci	r23, 0xFF	; 255
     6dc:	ce 01       	movw	r24, r28
     6de:	01 96       	adiw	r24, 0x01	; 1
     6e0:	0e 94 76 32 	call	0x64ec	; 0x64ec <_ZplRK15StringSumHelperRK6String>
     6e4:	6b e9       	ldi	r22, 0x9B	; 155
     6e6:	71 e0       	ldi	r23, 0x01	; 1
     6e8:	0e 94 87 32 	call	0x650e	; 0x650e <_ZplRK15StringSumHelperPKc>
     6ec:	bc 01       	movw	r22, r24
     6ee:	84 ef       	ldi	r24, 0xF4	; 244
     6f0:	98 e0       	ldi	r25, 0x08	; 8
     6f2:	0e 94 26 2e 	call	0x5c4c	; 0x5c4c <_ZN5Print5printERK6String>
     6f6:	ce 01       	movw	r24, r28
     6f8:	01 96       	adiw	r24, 0x01	; 1
     6fa:	0e 94 8e 30 	call	0x611c	; 0x611c <_ZN6StringD1Ev>
     6fe:	ce 01       	movw	r24, r28
     700:	07 96       	adiw	r24, 0x07	; 7
     702:	0e 94 8e 30 	call	0x611c	; 0x611c <_ZN6StringD1Ev>
     706:	61 e0       	ldi	r22, 0x01	; 1
     708:	84 ef       	ldi	r24, 0xF4	; 244
     70a:	98 e0       	ldi	r25, 0x08	; 8
     70c:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <_ZN5Print5printEc>
     710:	41 e0       	ldi	r20, 0x01	; 1
     712:	60 e0       	ldi	r22, 0x00	; 0
     714:	84 ef       	ldi	r24, 0xF4	; 244
     716:	98 e0       	ldi	r25, 0x08	; 8
     718:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <_ZN3LCD9setCursorEhh>
     71c:	b8 01       	movw	r22, r16
     71e:	6a 5f       	subi	r22, 0xFA	; 250
     720:	7f 4f       	sbci	r23, 0xFF	; 255
     722:	84 ef       	ldi	r24, 0xF4	; 244
     724:	98 e0       	ldi	r25, 0x08	; 8
     726:	0e 94 26 2e 	call	0x5c4c	; 0x5c4c <_ZN5Print5printERK6String>
     72a:	42 e0       	ldi	r20, 0x02	; 2
     72c:	60 e0       	ldi	r22, 0x00	; 0
     72e:	84 ef       	ldi	r24, 0xF4	; 244
     730:	98 e0       	ldi	r25, 0x08	; 8
     732:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <_ZN3LCD9setCursorEhh>
     736:	b8 01       	movw	r22, r16
     738:	64 5f       	subi	r22, 0xF4	; 244
     73a:	7f 4f       	sbci	r23, 0xFF	; 255
     73c:	84 ef       	ldi	r24, 0xF4	; 244
     73e:	98 e0       	ldi	r25, 0x08	; 8
     740:	0e 94 26 2e 	call	0x5c4c	; 0x5c4c <_ZN5Print5printERK6String>
     744:	43 e0       	ldi	r20, 0x03	; 3
     746:	60 e0       	ldi	r22, 0x00	; 0
     748:	84 ef       	ldi	r24, 0xF4	; 244
     74a:	98 e0       	ldi	r25, 0x08	; 8
     74c:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <_ZN3LCD9setCursorEhh>
     750:	b8 01       	movw	r22, r16
     752:	6e 5e       	subi	r22, 0xEE	; 238
     754:	7f 4f       	sbci	r23, 0xFF	; 255
     756:	84 ef       	ldi	r24, 0xF4	; 244
     758:	98 e0       	ldi	r25, 0x08	; 8
     75a:	0e 94 26 2e 	call	0x5c4c	; 0x5c4c <_ZN5Print5printERK6String>
     75e:	c7 01       	movw	r24, r14
     760:	4c de       	rcall	.-872    	; 0x3fa <_Z11my_delay_msi>
     762:	2c 96       	adiw	r28, 0x0c	; 12
     764:	0f b6       	in	r0, 0x3f	; 63
     766:	f8 94       	cli
     768:	de bf       	out	0x3e, r29	; 62
     76a:	0f be       	out	0x3f, r0	; 63
     76c:	cd bf       	out	0x3d, r28	; 61
     76e:	df 91       	pop	r29
     770:	cf 91       	pop	r28
     772:	1f 91       	pop	r17
     774:	0f 91       	pop	r16
     776:	ff 90       	pop	r15
     778:	ef 90       	pop	r14
     77a:	df 90       	pop	r13
     77c:	cf 90       	pop	r12
     77e:	08 95       	ret

00000780 <_Z11avanzaStatom>:
     780:	60 93 2d 08 	sts	0x082D, r22	; 0x80082d <Timer>
     784:	70 93 2e 08 	sts	0x082E, r23	; 0x80082e <Timer+0x1>
     788:	80 93 2f 08 	sts	0x082F, r24	; 0x80082f <Timer+0x2>
     78c:	90 93 30 08 	sts	0x0830, r25	; 0x800830 <Timer+0x3>
     790:	87 e2       	ldi	r24, 0x27	; 39
     792:	98 e0       	ldi	r25, 0x08	; 8
     794:	0e 94 37 18 	call	0x306e	; 0x306e <_ZNK8DateTime11secondstimeEv>
     798:	60 93 31 08 	sts	0x0831, r22	; 0x800831 <UltimoPassaggioStato>
     79c:	70 93 32 08 	sts	0x0832, r23	; 0x800832 <UltimoPassaggioStato+0x1>
     7a0:	80 93 33 08 	sts	0x0833, r24	; 0x800833 <UltimoPassaggioStato+0x2>
     7a4:	90 93 34 08 	sts	0x0834, r25	; 0x800834 <UltimoPassaggioStato+0x3>
     7a8:	80 91 cd 08 	lds	r24, 0x08CD	; 0x8008cd <stato_procedura>
     7ac:	90 91 ce 08 	lds	r25, 0x08CE	; 0x8008ce <stato_procedura+0x1>
     7b0:	01 96       	adiw	r24, 0x01	; 1
     7b2:	90 93 ce 08 	sts	0x08CE, r25	; 0x8008ce <stato_procedura+0x1>
     7b6:	80 93 cd 08 	sts	0x08CD, r24	; 0x8008cd <stato_procedura>
     7ba:	08 95       	ret

000007bc <_Z14leggiTAG_Mezzob>:
     7bc:	af 92       	push	r10
     7be:	bf 92       	push	r11
     7c0:	cf 92       	push	r12
     7c2:	df 92       	push	r13
     7c4:	ef 92       	push	r14
     7c6:	ff 92       	push	r15
     7c8:	0f 93       	push	r16
     7ca:	1f 93       	push	r17
     7cc:	cf 93       	push	r28
     7ce:	df 93       	push	r29
     7d0:	cd b7       	in	r28, 0x3d	; 61
     7d2:	de b7       	in	r29, 0x3e	; 62
     7d4:	a2 97       	sbiw	r28, 0x22	; 34
     7d6:	0f b6       	in	r0, 0x3f	; 63
     7d8:	f8 94       	cli
     7da:	de bf       	out	0x3e, r29	; 62
     7dc:	0f be       	out	0x3f, r0	; 63
     7de:	cd bf       	out	0x3d, r28	; 61
     7e0:	5c 01       	movw	r10, r24
     7e2:	f6 2e       	mov	r15, r22
     7e4:	64 e8       	ldi	r22, 0x84	; 132
     7e6:	71 e0       	ldi	r23, 0x01	; 1
     7e8:	ce 01       	movw	r24, r28
     7ea:	4d 96       	adiw	r24, 0x1d	; 29
     7ec:	0e 94 f5 30 	call	0x61ea	; 0x61ea <_ZN6StringC1EPKc>
     7f0:	08 ec       	ldi	r16, 0xC8	; 200
     7f2:	10 e0       	ldi	r17, 0x00	; 0
     7f4:	24 e1       	ldi	r18, 0x14	; 20
     7f6:	39 e0       	ldi	r19, 0x09	; 9
     7f8:	4d e0       	ldi	r20, 0x0D	; 13
     7fa:	59 e0       	ldi	r21, 0x09	; 9
     7fc:	60 e0       	ldi	r22, 0x00	; 0
     7fe:	8d ed       	ldi	r24, 0xDD	; 221
     800:	98 e0       	ldi	r25, 0x08	; 8
     802:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j>
     806:	80 93 15 09 	sts	0x0915, r24	; 0x800915 <success>
     80a:	88 23       	and	r24, r24
     80c:	09 f4       	brne	.+2      	; 0x810 <_Z14leggiTAG_Mezzob+0x54>
     80e:	9d c0       	rjmp	.+314    	; 0x94a <_Z14leggiTAG_Mezzob+0x18e>
     810:	4e e1       	ldi	r20, 0x1E	; 30
     812:	50 e0       	ldi	r21, 0x00	; 0
     814:	60 e0       	ldi	r22, 0x00	; 0
     816:	70 e0       	ldi	r23, 0x00	; 0
     818:	82 e0       	ldi	r24, 0x02	; 2
     81a:	0e de       	rcall	.-996    	; 0x438 <_Z6Buzzerhm>
     81c:	80 91 14 09 	lds	r24, 0x0914	; 0x800914 <uidLength>
     820:	84 30       	cpi	r24, 0x04	; 4
     822:	09 f0       	breq	.+2      	; 0x826 <_Z14leggiTAG_Mezzob+0x6a>
     824:	8c c0       	rjmp	.+280    	; 0x93e <_Z14leggiTAG_Mezzob+0x182>
     826:	86 e0       	ldi	r24, 0x06	; 6
     828:	e3 e7       	ldi	r30, 0x73	; 115
     82a:	f1 e0       	ldi	r31, 0x01	; 1
     82c:	de 01       	movw	r26, r28
     82e:	57 96       	adiw	r26, 0x17	; 23
     830:	01 90       	ld	r0, Z+
     832:	0d 92       	st	X+, r0
     834:	8a 95       	dec	r24
     836:	e1 f7       	brne	.-8      	; 0x830 <_Z14leggiTAG_Mezzob+0x74>
     838:	ce 01       	movw	r24, r28
     83a:	47 96       	adiw	r24, 0x17	; 23
     83c:	6c 01       	movw	r12, r24
     83e:	e1 2c       	mov	r14, r1
     840:	04 e0       	ldi	r16, 0x04	; 4
     842:	10 e0       	ldi	r17, 0x00	; 0
     844:	20 e0       	ldi	r18, 0x00	; 0
     846:	30 e0       	ldi	r19, 0x00	; 0
     848:	44 e0       	ldi	r20, 0x04	; 4
     84a:	6d e0       	ldi	r22, 0x0D	; 13
     84c:	79 e0       	ldi	r23, 0x09	; 9
     84e:	8d ed       	ldi	r24, 0xDD	; 221
     850:	98 e0       	ldi	r25, 0x08	; 8
     852:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_>
     856:	80 93 15 09 	sts	0x0915, r24	; 0x800915 <success>
     85a:	88 23       	and	r24, r24
     85c:	09 f4       	brne	.+2      	; 0x860 <_Z14leggiTAG_Mezzob+0xa4>
     85e:	5f c0       	rjmp	.+190    	; 0x91e <_Z14leggiTAG_Mezzob+0x162>
     860:	ff 20       	and	r15, r15
     862:	99 f0       	breq	.+38     	; 0x88a <_Z14leggiTAG_Mezzob+0xce>
     864:	80 e1       	ldi	r24, 0x10	; 16
     866:	ec e5       	ldi	r30, 0x5C	; 92
     868:	f7 e0       	ldi	r31, 0x07	; 7
     86a:	de 01       	movw	r26, r28
     86c:	11 96       	adiw	r26, 0x01	; 1
     86e:	01 90       	ld	r0, Z+
     870:	0d 92       	st	X+, r0
     872:	8a 95       	dec	r24
     874:	e1 f7       	brne	.-8      	; 0x86e <_Z14leggiTAG_Mezzob+0xb2>
     876:	ae 01       	movw	r20, r28
     878:	4f 5f       	subi	r20, 0xFF	; 255
     87a:	5f 4f       	sbci	r21, 0xFF	; 255
     87c:	64 e0       	ldi	r22, 0x04	; 4
     87e:	8d ed       	ldi	r24, 0xDD	; 221
     880:	98 e0       	ldi	r25, 0x08	; 8
     882:	0e 94 91 16 	call	0x2d22	; 0x2d22 <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh>
     886:	80 93 15 09 	sts	0x0915, r24	; 0x800915 <success>
     88a:	ae 01       	movw	r20, r28
     88c:	4f 5f       	subi	r20, 0xFF	; 255
     88e:	5f 4f       	sbci	r21, 0xFF	; 255
     890:	64 e0       	ldi	r22, 0x04	; 4
     892:	8d ed       	ldi	r24, 0xDD	; 221
     894:	98 e0       	ldi	r25, 0x08	; 8
     896:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh>
     89a:	80 93 15 09 	sts	0x0915, r24	; 0x800915 <success>
     89e:	88 23       	and	r24, r24
     8a0:	89 f1       	breq	.+98     	; 0x904 <_Z14leggiTAG_Mezzob+0x148>
     8a2:	61 ea       	ldi	r22, 0xA1	; 161
     8a4:	71 e0       	ldi	r23, 0x01	; 1
     8a6:	8c e7       	ldi	r24, 0x7C	; 124
     8a8:	9a e0       	ldi	r25, 0x0A	; 10
     8aa:	0e 94 5f 2e 	call	0x5cbe	; 0x5cbe <_ZN5Print7printlnEPKc>
     8ae:	be 01       	movw	r22, r28
     8b0:	6f 5f       	subi	r22, 0xFF	; 255
     8b2:	7f 4f       	sbci	r23, 0xFF	; 255
     8b4:	ce 01       	movw	r24, r28
     8b6:	41 96       	adiw	r24, 0x11	; 17
     8b8:	0e 94 f5 30 	call	0x61ea	; 0x61ea <_ZN6StringC1EPKc>
     8bc:	be 01       	movw	r22, r28
     8be:	6f 5e       	subi	r22, 0xEF	; 239
     8c0:	7f 4f       	sbci	r23, 0xFF	; 255
     8c2:	8c e7       	ldi	r24, 0x7C	; 124
     8c4:	9a e0       	ldi	r25, 0x0A	; 10
     8c6:	0e 94 4f 2e 	call	0x5c9e	; 0x5c9e <_ZN5Print7printlnERK6String>
     8ca:	8d 89       	ldd	r24, Y+21	; 0x15
     8cc:	9e 89       	ldd	r25, Y+22	; 0x16
     8ce:	06 97       	sbiw	r24, 0x06	; 6
     8d0:	59 f4       	brne	.+22     	; 0x8e8 <_Z14leggiTAG_Mezzob+0x12c>
     8d2:	be 01       	movw	r22, r28
     8d4:	6f 5e       	subi	r22, 0xEF	; 239
     8d6:	7f 4f       	sbci	r23, 0xFF	; 255
     8d8:	c5 01       	movw	r24, r10
     8da:	0e 94 44 31 	call	0x6288	; 0x6288 <_ZN6StringC1EOS_>
     8de:	ce 01       	movw	r24, r28
     8e0:	41 96       	adiw	r24, 0x11	; 17
     8e2:	0e 94 8e 30 	call	0x611c	; 0x611c <_ZN6StringD1Ev>
     8e6:	37 c0       	rjmp	.+110    	; 0x956 <_Z14leggiTAG_Mezzob+0x19a>
     8e8:	9f ef       	ldi	r25, 0xFF	; 255
     8ea:	21 ee       	ldi	r18, 0xE1	; 225
     8ec:	84 e0       	ldi	r24, 0x04	; 4
     8ee:	91 50       	subi	r25, 0x01	; 1
     8f0:	20 40       	sbci	r18, 0x00	; 0
     8f2:	80 40       	sbci	r24, 0x00	; 0
     8f4:	e1 f7       	brne	.-8      	; 0x8ee <_Z14leggiTAG_Mezzob+0x132>
     8f6:	00 c0       	rjmp	.+0      	; 0x8f8 <_Z14leggiTAG_Mezzob+0x13c>
     8f8:	00 00       	nop
     8fa:	ce 01       	movw	r24, r28
     8fc:	41 96       	adiw	r24, 0x11	; 17
     8fe:	0e 94 8e 30 	call	0x611c	; 0x611c <_ZN6StringD1Ev>
     902:	1d c0       	rjmp	.+58     	; 0x93e <_Z14leggiTAG_Mezzob+0x182>
     904:	84 ef       	ldi	r24, 0xF4	; 244
     906:	98 e0       	ldi	r25, 0x08	; 8
     908:	0e 94 a4 25 	call	0x4b48	; 0x4b48 <_ZN3LCD5clearEv>
     90c:	41 e0       	ldi	r20, 0x01	; 1
     90e:	60 e0       	ldi	r22, 0x00	; 0
     910:	84 ef       	ldi	r24, 0xF4	; 244
     912:	98 e0       	ldi	r25, 0x08	; 8
     914:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <_ZN3LCD9setCursorEhh>
     918:	6f ea       	ldi	r22, 0xAF	; 175
     91a:	71 e0       	ldi	r23, 0x01	; 1
     91c:	0c c0       	rjmp	.+24     	; 0x936 <_Z14leggiTAG_Mezzob+0x17a>
     91e:	84 ef       	ldi	r24, 0xF4	; 244
     920:	98 e0       	ldi	r25, 0x08	; 8
     922:	0e 94 a4 25 	call	0x4b48	; 0x4b48 <_ZN3LCD5clearEv>
     926:	41 e0       	ldi	r20, 0x01	; 1
     928:	60 e0       	ldi	r22, 0x00	; 0
     92a:	84 ef       	ldi	r24, 0xF4	; 244
     92c:	98 e0       	ldi	r25, 0x08	; 8
     92e:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <_ZN3LCD9setCursorEhh>
     932:	69 eb       	ldi	r22, 0xB9	; 185
     934:	71 e0       	ldi	r23, 0x01	; 1
     936:	84 ef       	ldi	r24, 0xF4	; 244
     938:	98 e0       	ldi	r25, 0x08	; 8
     93a:	0e 94 34 2e 	call	0x5c68	; 0x5c68 <_ZN5Print5printEPKc>
     93e:	64 e8       	ldi	r22, 0x84	; 132
     940:	71 e0       	ldi	r23, 0x01	; 1
     942:	8c e7       	ldi	r24, 0x7C	; 124
     944:	9a e0       	ldi	r25, 0x0A	; 10
     946:	0e 94 5f 2e 	call	0x5cbe	; 0x5cbe <_ZN5Print7printlnEPKc>
     94a:	be 01       	movw	r22, r28
     94c:	63 5e       	subi	r22, 0xE3	; 227
     94e:	7f 4f       	sbci	r23, 0xFF	; 255
     950:	c5 01       	movw	r24, r10
     952:	0e 94 44 31 	call	0x6288	; 0x6288 <_ZN6StringC1EOS_>
     956:	ce 01       	movw	r24, r28
     958:	4d 96       	adiw	r24, 0x1d	; 29
     95a:	0e 94 8e 30 	call	0x611c	; 0x611c <_ZN6StringD1Ev>
     95e:	c5 01       	movw	r24, r10
     960:	a2 96       	adiw	r28, 0x22	; 34
     962:	0f b6       	in	r0, 0x3f	; 63
     964:	f8 94       	cli
     966:	de bf       	out	0x3e, r29	; 62
     968:	0f be       	out	0x3f, r0	; 63
     96a:	cd bf       	out	0x3d, r28	; 61
     96c:	df 91       	pop	r29
     96e:	cf 91       	pop	r28
     970:	1f 91       	pop	r17
     972:	0f 91       	pop	r16
     974:	ff 90       	pop	r15
     976:	ef 90       	pop	r14
     978:	df 90       	pop	r13
     97a:	cf 90       	pop	r12
     97c:	bf 90       	pop	r11
     97e:	af 90       	pop	r10
     980:	08 95       	ret

00000982 <_Z14GetCodeRfidATev>:
     982:	cf 92       	push	r12
     984:	df 92       	push	r13
     986:	ef 92       	push	r14
     988:	ff 92       	push	r15
     98a:	0f 93       	push	r16
     98c:	1f 93       	push	r17
     98e:	cf 93       	push	r28
     990:	df 93       	push	r29
     992:	cd b7       	in	r28, 0x3d	; 61
     994:	de b7       	in	r29, 0x3e	; 62
     996:	64 97       	sbiw	r28, 0x14	; 20
     998:	0f b6       	in	r0, 0x3f	; 63
     99a:	f8 94       	cli
     99c:	de bf       	out	0x3e, r29	; 62
     99e:	0f be       	out	0x3f, r0	; 63
     9a0:	cd bf       	out	0x3d, r28	; 61
     9a2:	7c 01       	movw	r14, r24
     9a4:	ce 01       	movw	r24, r28
     9a6:	01 96       	adiw	r24, 0x01	; 1
     9a8:	6c 01       	movw	r12, r24
     9aa:	87 e0       	ldi	r24, 0x07	; 7
     9ac:	f6 01       	movw	r30, r12
     9ae:	11 92       	st	Z+, r1
     9b0:	8a 95       	dec	r24
     9b2:	e9 f7       	brne	.-6      	; 0x9ae <_Z14GetCodeRfidATev+0x2c>
     9b4:	61 ec       	ldi	r22, 0xC1	; 193
     9b6:	71 e0       	ldi	r23, 0x01	; 1
     9b8:	c7 01       	movw	r24, r14
     9ba:	0e 94 f5 30 	call	0x61ea	; 0x61ea <_ZN6StringC1EPKc>
     9be:	00 e0       	ldi	r16, 0x00	; 0
     9c0:	10 e0       	ldi	r17, 0x00	; 0
     9c2:	9e 01       	movw	r18, r28
     9c4:	2c 5e       	subi	r18, 0xEC	; 236
     9c6:	3f 4f       	sbci	r19, 0xFF	; 255
     9c8:	a6 01       	movw	r20, r12
     9ca:	60 e0       	ldi	r22, 0x00	; 0
     9cc:	8d ed       	ldi	r24, 0xDD	; 221
     9ce:	98 e0       	ldi	r25, 0x08	; 8
     9d0:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j>
     9d4:	88 23       	and	r24, r24
     9d6:	59 f1       	breq	.+86     	; 0xa2e <_Z14GetCodeRfidATev+0xac>
     9d8:	0c 89       	ldd	r16, Y+20	; 0x14
     9da:	10 e0       	ldi	r17, 0x00	; 0
     9dc:	20 e0       	ldi	r18, 0x00	; 0
     9de:	30 e0       	ldi	r19, 0x00	; 0
     9e0:	a6 01       	movw	r20, r12
     9e2:	6d ed       	ldi	r22, 0xDD	; 221
     9e4:	78 e0       	ldi	r23, 0x08	; 8
     9e6:	ce 01       	movw	r24, r28
     9e8:	0e 96       	adiw	r24, 0x0e	; 14
     9ea:	0e 94 a9 13 	call	0x2752	; 0x2752 <_ZN9NFC_PN53210GetHexCodeEPKhm>
     9ee:	ce 01       	movw	r24, r28
     9f0:	0e 96       	adiw	r24, 0x0e	; 14
     9f2:	0e 94 0b 33 	call	0x6616	; 0x6616 <_ZN6String4trimEv>
     9f6:	28 e0       	ldi	r18, 0x08	; 8
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	be 01       	movw	r22, r28
     a00:	62 5f       	subi	r22, 0xF2	; 242
     a02:	7f 4f       	sbci	r23, 0xFF	; 255
     a04:	ce 01       	movw	r24, r28
     a06:	08 96       	adiw	r24, 0x08	; 8
     a08:	0e 94 c8 32 	call	0x6590	; 0x6590 <_ZNK6String9substringEjj>
     a0c:	be 01       	movw	r22, r28
     a0e:	68 5f       	subi	r22, 0xF8	; 248
     a10:	7f 4f       	sbci	r23, 0xFF	; 255
     a12:	c7 01       	movw	r24, r14
     a14:	0e 94 69 31 	call	0x62d2	; 0x62d2 <_ZN6StringaSEOS_>
     a18:	ce 01       	movw	r24, r28
     a1a:	08 96       	adiw	r24, 0x08	; 8
     a1c:	0e 94 8e 30 	call	0x611c	; 0x611c <_ZN6StringD1Ev>
     a20:	81 e0       	ldi	r24, 0x01	; 1
     a22:	80 93 0c 09 	sts	0x090C, r24	; 0x80090c <alreadyTimbrata>
     a26:	ce 01       	movw	r24, r28
     a28:	0e 96       	adiw	r24, 0x0e	; 14
     a2a:	0e 94 8e 30 	call	0x611c	; 0x611c <_ZN6StringD1Ev>
     a2e:	c7 01       	movw	r24, r14
     a30:	64 96       	adiw	r28, 0x14	; 20
     a32:	0f b6       	in	r0, 0x3f	; 63
     a34:	f8 94       	cli
     a36:	de bf       	out	0x3e, r29	; 62
     a38:	0f be       	out	0x3f, r0	; 63
     a3a:	cd bf       	out	0x3d, r28	; 61
     a3c:	df 91       	pop	r29
     a3e:	cf 91       	pop	r28
     a40:	1f 91       	pop	r17
     a42:	0f 91       	pop	r16
     a44:	ff 90       	pop	r15
     a46:	ef 90       	pop	r14
     a48:	df 90       	pop	r13
     a4a:	cf 90       	pop	r12
     a4c:	08 95       	ret

00000a4e <_Z19GetHTTPResponseCode6String>:
     a4e:	ef 92       	push	r14
     a50:	ff 92       	push	r15
     a52:	0f 93       	push	r16
     a54:	1f 93       	push	r17
     a56:	cf 93       	push	r28
     a58:	df 93       	push	r29
     a5a:	cd b7       	in	r28, 0x3d	; 61
     a5c:	de b7       	in	r29, 0x3e	; 62
     a5e:	2c 97       	sbiw	r28, 0x0c	; 12
     a60:	0f b6       	in	r0, 0x3f	; 63
     a62:	f8 94       	cli
     a64:	de bf       	out	0x3e, r29	; 62
     a66:	0f be       	out	0x3f, r0	; 63
     a68:	cd bf       	out	0x3d, r28	; 61
     a6a:	8c 01       	movw	r16, r24
     a6c:	7b 01       	movw	r14, r22
     a6e:	68 ec       	ldi	r22, 0xC8	; 200
     a70:	71 e0       	ldi	r23, 0x01	; 1
     a72:	ce 01       	movw	r24, r28
     a74:	07 96       	adiw	r24, 0x07	; 7
     a76:	0e 94 f5 30 	call	0x61ea	; 0x61ea <_ZN6StringC1EPKc>
     a7a:	20 91 5b 01 	lds	r18, 0x015B	; 0x80015b <HTTP_len_response>
     a7e:	30 91 5c 01 	lds	r19, 0x015C	; 0x80015c <HTTP_len_response+0x1>
     a82:	f7 01       	movw	r30, r14
     a84:	84 81       	ldd	r24, Z+4	; 0x04
     a86:	95 81       	ldd	r25, Z+5	; 0x05
     a88:	28 17       	cp	r18, r24
     a8a:	39 07       	cpc	r19, r25
     a8c:	99 f4       	brne	.+38     	; 0xab4 <_Z19GetHTTPResponseCode6String+0x66>
     a8e:	a9 01       	movw	r20, r18
     a90:	43 50       	subi	r20, 0x03	; 3
     a92:	51 09       	sbc	r21, r1
     a94:	b7 01       	movw	r22, r14
     a96:	ce 01       	movw	r24, r28
     a98:	01 96       	adiw	r24, 0x01	; 1
     a9a:	0e 94 c8 32 	call	0x6590	; 0x6590 <_ZNK6String9substringEjj>
     a9e:	be 01       	movw	r22, r28
     aa0:	6f 5f       	subi	r22, 0xFF	; 255
     aa2:	7f 4f       	sbci	r23, 0xFF	; 255
     aa4:	c8 01       	movw	r24, r16
     aa6:	0e 94 44 31 	call	0x6288	; 0x6288 <_ZN6StringC1EOS_>
     aaa:	ce 01       	movw	r24, r28
     aac:	01 96       	adiw	r24, 0x01	; 1
     aae:	0e 94 8e 30 	call	0x611c	; 0x611c <_ZN6StringD1Ev>
     ab2:	06 c0       	rjmp	.+12     	; 0xac0 <_Z19GetHTTPResponseCode6String+0x72>
     ab4:	be 01       	movw	r22, r28
     ab6:	69 5f       	subi	r22, 0xF9	; 249
     ab8:	7f 4f       	sbci	r23, 0xFF	; 255
     aba:	c8 01       	movw	r24, r16
     abc:	0e 94 44 31 	call	0x6288	; 0x6288 <_ZN6StringC1EOS_>
     ac0:	ce 01       	movw	r24, r28
     ac2:	07 96       	adiw	r24, 0x07	; 7
     ac4:	0e 94 8e 30 	call	0x611c	; 0x611c <_ZN6StringD1Ev>
     ac8:	c8 01       	movw	r24, r16
     aca:	2c 96       	adiw	r28, 0x0c	; 12
     acc:	0f b6       	in	r0, 0x3f	; 63
     ace:	f8 94       	cli
     ad0:	de bf       	out	0x3e, r29	; 62
     ad2:	0f be       	out	0x3f, r0	; 63
     ad4:	cd bf       	out	0x3d, r28	; 61
     ad6:	df 91       	pop	r29
     ad8:	cf 91       	pop	r28
     ada:	1f 91       	pop	r17
     adc:	0f 91       	pop	r16
     ade:	ff 90       	pop	r15
     ae0:	ef 90       	pop	r14
     ae2:	08 95       	ret

00000ae4 <_Z16GetAteValidationiPc14EthernetClient6String>:
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	cf 93       	push	r28
     aee:	df 93       	push	r29
     af0:	cd b7       	in	r28, 0x3d	; 61
     af2:	de b7       	in	r29, 0x3e	; 62
     af4:	2c 97       	sbiw	r28, 0x0c	; 12
     af6:	0f b6       	in	r0, 0x3f	; 63
     af8:	f8 94       	cli
     afa:	de bf       	out	0x3e, r29	; 62
     afc:	0f be       	out	0x3f, r0	; 63
     afe:	cd bf       	out	0x3d, r28	; 61
     b00:	8a 01       	movw	r16, r20
     b02:	79 01       	movw	r14, r18
     b04:	ac 01       	movw	r20, r24
     b06:	c8 01       	movw	r24, r16
     b08:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <_ZN14EthernetClient7connectEPKcj>
     b0c:	89 2b       	or	r24, r25
     b0e:	09 f4       	brne	.+2      	; 0xb12 <_Z16GetAteValidationiPc14EthernetClient6String+0x2e>
     b10:	77 c0       	rjmp	.+238    	; 0xc00 <_Z16GetAteValidationiPc14EthernetClient6String+0x11c>
     b12:	60 ed       	ldi	r22, 0xD0	; 208
     b14:	71 e0       	ldi	r23, 0x01	; 1
     b16:	ce 01       	movw	r24, r28
     b18:	01 96       	adiw	r24, 0x01	; 1
     b1a:	0e 94 f5 30 	call	0x61ea	; 0x61ea <_ZN6StringC1EPKc>
     b1e:	b7 01       	movw	r22, r14
     b20:	ce 01       	movw	r24, r28
     b22:	01 96       	adiw	r24, 0x01	; 1
     b24:	0e 94 76 32 	call	0x64ec	; 0x64ec <_ZplRK15StringSumHelperRK6String>
     b28:	61 e0       	ldi	r22, 0x01	; 1
     b2a:	72 e0       	ldi	r23, 0x02	; 2
     b2c:	0e 94 87 32 	call	0x650e	; 0x650e <_ZplRK15StringSumHelperPKc>
     b30:	bc 01       	movw	r22, r24
     b32:	81 ed       	ldi	r24, 0xD1	; 209
     b34:	98 e0       	ldi	r25, 0x08	; 8
     b36:	0e 94 4c 31 	call	0x6298	; 0x6298 <_ZN6StringaSERKS_>
     b3a:	ce 01       	movw	r24, r28
     b3c:	01 96       	adiw	r24, 0x01	; 1
     b3e:	0e 94 8e 30 	call	0x611c	; 0x611c <_ZN6StringD1Ev>
     b42:	6e e0       	ldi	r22, 0x0E	; 14
     b44:	72 e0       	ldi	r23, 0x02	; 2
     b46:	81 ed       	ldi	r24, 0xD1	; 209
     b48:	98 e0       	ldi	r25, 0x08	; 8
     b4a:	0e 94 56 32 	call	0x64ac	; 0x64ac <_ZN6String6concatEPKc>
     b4e:	6b ef       	ldi	r22, 0xFB	; 251
     b50:	73 e0       	ldi	r23, 0x03	; 3
     b52:	81 ed       	ldi	r24, 0xD1	; 209
     b54:	98 e0       	ldi	r25, 0x08	; 8
     b56:	0e 94 56 32 	call	0x64ac	; 0x64ac <_ZN6String6concatEPKc>
     b5a:	6a e2       	ldi	r22, 0x2A	; 42
     b5c:	72 e0       	ldi	r23, 0x02	; 2
     b5e:	81 ed       	ldi	r24, 0xD1	; 209
     b60:	98 e0       	ldi	r25, 0x08	; 8
     b62:	0e 94 56 32 	call	0x64ac	; 0x64ac <_ZN6String6concatEPKc>
     b66:	6b ef       	ldi	r22, 0xFB	; 251
     b68:	73 e0       	ldi	r23, 0x03	; 3
     b6a:	81 ed       	ldi	r24, 0xD1	; 209
     b6c:	98 e0       	ldi	r25, 0x08	; 8
     b6e:	0e 94 56 32 	call	0x64ac	; 0x64ac <_ZN6String6concatEPKc>
     b72:	63 e4       	ldi	r22, 0x43	; 67
     b74:	72 e0       	ldi	r23, 0x02	; 2
     b76:	81 ed       	ldi	r24, 0xD1	; 209
     b78:	98 e0       	ldi	r25, 0x08	; 8
     b7a:	0e 94 56 32 	call	0x64ac	; 0x64ac <_ZN6String6concatEPKc>
     b7e:	6b ef       	ldi	r22, 0xFB	; 251
     b80:	73 e0       	ldi	r23, 0x03	; 3
     b82:	81 ed       	ldi	r24, 0xD1	; 209
     b84:	98 e0       	ldi	r25, 0x08	; 8
     b86:	0e 94 56 32 	call	0x64ac	; 0x64ac <_ZN6String6concatEPKc>
     b8a:	62 e6       	ldi	r22, 0x62	; 98
     b8c:	72 e0       	ldi	r23, 0x02	; 2
     b8e:	81 ed       	ldi	r24, 0xD1	; 209
     b90:	98 e0       	ldi	r25, 0x08	; 8
     b92:	0e 94 56 32 	call	0x64ac	; 0x64ac <_ZN6String6concatEPKc>
     b96:	6b ef       	ldi	r22, 0xFB	; 251
     b98:	73 e0       	ldi	r23, 0x03	; 3
     b9a:	81 ed       	ldi	r24, 0xD1	; 209
     b9c:	98 e0       	ldi	r25, 0x08	; 8
     b9e:	0e 94 56 32 	call	0x64ac	; 0x64ac <_ZN6String6concatEPKc>
     ba2:	62 e8       	ldi	r22, 0x82	; 130
     ba4:	72 e0       	ldi	r23, 0x02	; 2
     ba6:	81 ed       	ldi	r24, 0xD1	; 209
     ba8:	98 e0       	ldi	r25, 0x08	; 8
     baa:	0e 94 56 32 	call	0x64ac	; 0x64ac <_ZN6String6concatEPKc>
     bae:	6b ef       	ldi	r22, 0xFB	; 251
     bb0:	73 e0       	ldi	r23, 0x03	; 3
     bb2:	81 ed       	ldi	r24, 0xD1	; 209
     bb4:	98 e0       	ldi	r25, 0x08	; 8
     bb6:	0e 94 56 32 	call	0x64ac	; 0x64ac <_ZN6String6concatEPKc>
     bba:	6c e2       	ldi	r22, 0x2C	; 44
     bbc:	73 e0       	ldi	r23, 0x03	; 3
     bbe:	81 ed       	ldi	r24, 0xD1	; 209
     bc0:	98 e0       	ldi	r25, 0x08	; 8
     bc2:	0e 94 56 32 	call	0x64ac	; 0x64ac <_ZN6String6concatEPKc>
     bc6:	6b ef       	ldi	r22, 0xFB	; 251
     bc8:	73 e0       	ldi	r23, 0x03	; 3
     bca:	81 ed       	ldi	r24, 0xD1	; 209
     bcc:	98 e0       	ldi	r25, 0x08	; 8
     bce:	0e 94 56 32 	call	0x64ac	; 0x64ac <_ZN6String6concatEPKc>
     bd2:	61 ed       	ldi	r22, 0xD1	; 209
     bd4:	78 e0       	ldi	r23, 0x08	; 8
     bd6:	c8 01       	movw	r24, r16
     bd8:	0e 94 26 2e 	call	0x5c4c	; 0x5c4c <_ZN5Print5printERK6String>
     bdc:	2f ef       	ldi	r18, 0xFF	; 255
     bde:	87 ee       	ldi	r24, 0xE7	; 231
     be0:	93 e0       	ldi	r25, 0x03	; 3
     be2:	21 50       	subi	r18, 0x01	; 1
     be4:	80 40       	sbci	r24, 0x00	; 0
     be6:	90 40       	sbci	r25, 0x00	; 0
     be8:	e1 f7       	brne	.-8      	; 0xbe2 <_Z16GetAteValidationiPc14EthernetClient6String+0xfe>
     bea:	00 c0       	rjmp	.+0      	; 0xbec <_Z16GetAteValidationiPc14EthernetClient6String+0x108>
     bec:	00 00       	nop
     bee:	6b e4       	ldi	r22, 0x4B	; 75
     bf0:	73 e0       	ldi	r23, 0x03	; 3
     bf2:	c8 01       	movw	r24, r16
     bf4:	0e 94 5f 2e 	call	0x5cbe	; 0x5cbe <_ZN5Print7printlnEPKc>
     bf8:	c8 01       	movw	r24, r16
     bfa:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <_ZN5Print7printlnEv>
     bfe:	25 c0       	rjmp	.+74     	; 0xc4a <_Z16GetAteValidationiPc14EthernetClient6String+0x166>
     c00:	84 ef       	ldi	r24, 0xF4	; 244
     c02:	98 e0       	ldi	r25, 0x08	; 8
     c04:	0e 94 a4 25 	call	0x4b48	; 0x4b48 <_ZN3LCD5clearEv>
     c08:	41 e0       	ldi	r20, 0x01	; 1
     c0a:	60 e0       	ldi	r22, 0x00	; 0
     c0c:	84 ef       	ldi	r24, 0xF4	; 244
     c0e:	98 e0       	ldi	r25, 0x08	; 8
     c10:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <_ZN3LCD9setCursorEhh>
     c14:	6d e5       	ldi	r22, 0x5D	; 93
     c16:	73 e0       	ldi	r23, 0x03	; 3
     c18:	84 ef       	ldi	r24, 0xF4	; 244
     c1a:	98 e0       	ldi	r25, 0x08	; 8
     c1c:	0e 94 34 2e 	call	0x5c68	; 0x5c68 <_ZN5Print5printEPKc>
     c20:	43 e0       	ldi	r20, 0x03	; 3
     c22:	60 e0       	ldi	r22, 0x00	; 0
     c24:	84 ef       	ldi	r24, 0xF4	; 244
     c26:	98 e0       	ldi	r25, 0x08	; 8
     c28:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <_ZN3LCD9setCursorEhh>
     c2c:	62 e7       	ldi	r22, 0x72	; 114
     c2e:	73 e0       	ldi	r23, 0x03	; 3
     c30:	84 ef       	ldi	r24, 0xF4	; 244
     c32:	98 e0       	ldi	r25, 0x08	; 8
     c34:	0e 94 34 2e 	call	0x5c68	; 0x5c68 <_ZN5Print5printEPKc>
     c38:	2f ef       	ldi	r18, 0xFF	; 255
     c3a:	83 ed       	ldi	r24, 0xD3	; 211
     c3c:	90 e3       	ldi	r25, 0x30	; 48
     c3e:	21 50       	subi	r18, 0x01	; 1
     c40:	80 40       	sbci	r24, 0x00	; 0
     c42:	90 40       	sbci	r25, 0x00	; 0
     c44:	e1 f7       	brne	.-8      	; 0xc3e <_Z16GetAteValidationiPc14EthernetClient6String+0x15a>
     c46:	00 c0       	rjmp	.+0      	; 0xc48 <_Z16GetAteValidationiPc14EthernetClient6String+0x164>
     c48:	00 00       	nop
     c4a:	2f ef       	ldi	r18, 0xFF	; 255
     c4c:	81 ee       	ldi	r24, 0xE1	; 225
     c4e:	94 e0       	ldi	r25, 0x04	; 4
     c50:	21 50       	subi	r18, 0x01	; 1
     c52:	80 40       	sbci	r24, 0x00	; 0
     c54:	90 40       	sbci	r25, 0x00	; 0
     c56:	e1 f7       	brne	.-8      	; 0xc50 <_Z16GetAteValidationiPc14EthernetClient6String+0x16c>
     c58:	00 c0       	rjmp	.+0      	; 0xc5a <_Z16GetAteValidationiPc14EthernetClient6String+0x176>
     c5a:	00 00       	nop
     c5c:	f1 2c       	mov	r15, r1
     c5e:	c8 01       	movw	r24, r16
     c60:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <_ZN14EthernetClient9availableEv>
     c64:	89 2b       	or	r24, r25
     c66:	09 f4       	brne	.+2      	; 0xc6a <_Z16GetAteValidationiPc14EthernetClient6String+0x186>
     c68:	54 c0       	rjmp	.+168    	; 0xd12 <_Z16GetAteValidationiPc14EthernetClient6String+0x22e>
     c6a:	c8 01       	movw	r24, r16
     c6c:	0e 94 4e 1e 	call	0x3c9c	; 0x3c9c <_ZN14EthernetClient4readEv>
     c70:	e8 2e       	mov	r14, r24
     c72:	65 ec       	ldi	r22, 0xC5	; 197
     c74:	78 e0       	ldi	r23, 0x08	; 8
     c76:	ce 01       	movw	r24, r28
     c78:	01 96       	adiw	r24, 0x01	; 1
     c7a:	0e 94 61 31 	call	0x62c2	; 0x62c2 <_ZN6StringC1ERKS_>
     c7e:	6e 2d       	mov	r22, r14
     c80:	ce 01       	movw	r24, r28
     c82:	01 96       	adiw	r24, 0x01	; 1
     c84:	0e 94 9e 32 	call	0x653c	; 0x653c <_ZplRK15StringSumHelperc>
     c88:	bc 01       	movw	r22, r24
     c8a:	85 ec       	ldi	r24, 0xC5	; 197
     c8c:	98 e0       	ldi	r25, 0x08	; 8
     c8e:	0e 94 4c 31 	call	0x6298	; 0x6298 <_ZN6StringaSERKS_>
     c92:	ce 01       	movw	r24, r28
     c94:	01 96       	adiw	r24, 0x01	; 1
     c96:	0e 94 8e 30 	call	0x611c	; 0x611c <_ZN6StringD1Ev>
     c9a:	20 91 5b 01 	lds	r18, 0x015B	; 0x80015b <HTTP_len_response>
     c9e:	30 91 5c 01 	lds	r19, 0x015C	; 0x80015c <HTTP_len_response+0x1>
     ca2:	80 91 c9 08 	lds	r24, 0x08C9	; 0x8008c9 <RispostaHTTP+0x4>
     ca6:	90 91 ca 08 	lds	r25, 0x08CA	; 0x8008ca <RispostaHTTP+0x5>
     caa:	28 17       	cp	r18, r24
     cac:	39 07       	cpc	r19, r25
     cae:	b9 f6       	brne	.-82     	; 0xc5e <_Z16GetAteValidationiPc14EthernetClient6String+0x17a>
     cb0:	65 ec       	ldi	r22, 0xC5	; 197
     cb2:	78 e0       	ldi	r23, 0x08	; 8
     cb4:	ce 01       	movw	r24, r28
     cb6:	01 96       	adiw	r24, 0x01	; 1
     cb8:	0e 94 61 31 	call	0x62c2	; 0x62c2 <_ZN6StringC1ERKS_>
     cbc:	be 01       	movw	r22, r28
     cbe:	6f 5f       	subi	r22, 0xFF	; 255
     cc0:	7f 4f       	sbci	r23, 0xFF	; 255
     cc2:	ce 01       	movw	r24, r28
     cc4:	07 96       	adiw	r24, 0x07	; 7
     cc6:	c3 de       	rcall	.-634    	; 0xa4e <_Z19GetHTTPResponseCode6String>
     cc8:	ce 01       	movw	r24, r28
     cca:	01 96       	adiw	r24, 0x01	; 1
     ccc:	0e 94 8e 30 	call	0x611c	; 0x611c <_ZN6StringD1Ev>
     cd0:	2f ef       	ldi	r18, 0xFF	; 255
     cd2:	87 ee       	ldi	r24, 0xE7	; 231
     cd4:	93 e0       	ldi	r25, 0x03	; 3
     cd6:	21 50       	subi	r18, 0x01	; 1
     cd8:	80 40       	sbci	r24, 0x00	; 0
     cda:	90 40       	sbci	r25, 0x00	; 0
     cdc:	e1 f7       	brne	.-8      	; 0xcd6 <_Z16GetAteValidationiPc14EthernetClient6String+0x1f2>
     cde:	00 c0       	rjmp	.+0      	; 0xce0 <_Z16GetAteValidationiPc14EthernetClient6String+0x1fc>
     ce0:	00 00       	nop
     ce2:	61 e8       	ldi	r22, 0x81	; 129
     ce4:	73 e0       	ldi	r23, 0x03	; 3
     ce6:	ce 01       	movw	r24, r28
     ce8:	07 96       	adiw	r24, 0x07	; 7
     cea:	0e 94 aa 32 	call	0x6554	; 0x6554 <_ZNK6String6equalsEPKc>
     cee:	88 23       	and	r24, r24
     cf0:	11 f0       	breq	.+4      	; 0xcf6 <_Z16GetAteValidationiPc14EthernetClient6String+0x212>
     cf2:	ff 24       	eor	r15, r15
     cf4:	f3 94       	inc	r15
     cf6:	2f ef       	ldi	r18, 0xFF	; 255
     cf8:	87 ee       	ldi	r24, 0xE7	; 231
     cfa:	93 e0       	ldi	r25, 0x03	; 3
     cfc:	21 50       	subi	r18, 0x01	; 1
     cfe:	80 40       	sbci	r24, 0x00	; 0
     d00:	90 40       	sbci	r25, 0x00	; 0
     d02:	e1 f7       	brne	.-8      	; 0xcfc <_Z16GetAteValidationiPc14EthernetClient6String+0x218>
     d04:	00 c0       	rjmp	.+0      	; 0xd06 <_Z16GetAteValidationiPc14EthernetClient6String+0x222>
     d06:	00 00       	nop
     d08:	ce 01       	movw	r24, r28
     d0a:	07 96       	adiw	r24, 0x07	; 7
     d0c:	0e 94 8e 30 	call	0x611c	; 0x611c <_ZN6StringD1Ev>
     d10:	a6 cf       	rjmp	.-180    	; 0xc5e <_Z16GetAteValidationiPc14EthernetClient6String+0x17a>
     d12:	8f 2d       	mov	r24, r15
     d14:	2c 96       	adiw	r28, 0x0c	; 12
     d16:	0f b6       	in	r0, 0x3f	; 63
     d18:	f8 94       	cli
     d1a:	de bf       	out	0x3e, r29	; 62
     d1c:	0f be       	out	0x3f, r0	; 63
     d1e:	cd bf       	out	0x3d, r28	; 61
     d20:	df 91       	pop	r29
     d22:	cf 91       	pop	r28
     d24:	1f 91       	pop	r17
     d26:	0f 91       	pop	r16
     d28:	ff 90       	pop	r15
     d2a:	ef 90       	pop	r14
     d2c:	08 95       	ret

00000d2e <_Z14PostErogazioneiPc14EthernetClient6String>:
     d2e:	ef 92       	push	r14
     d30:	ff 92       	push	r15
     d32:	0f 93       	push	r16
     d34:	1f 93       	push	r17
     d36:	cf 93       	push	r28
     d38:	df 93       	push	r29
     d3a:	cd b7       	in	r28, 0x3d	; 61
     d3c:	de b7       	in	r29, 0x3e	; 62
     d3e:	2c 97       	sbiw	r28, 0x0c	; 12
     d40:	0f b6       	in	r0, 0x3f	; 63
     d42:	f8 94       	cli
     d44:	de bf       	out	0x3e, r29	; 62
     d46:	0f be       	out	0x3f, r0	; 63
     d48:	cd bf       	out	0x3d, r28	; 61
     d4a:	8a 01       	movw	r16, r20
     d4c:	79 01       	movw	r14, r18
     d4e:	ac 01       	movw	r20, r24
     d50:	c8 01       	movw	r24, r16
     d52:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <_ZN14EthernetClient7connectEPKcj>
     d56:	89 2b       	or	r24, r25
     d58:	09 f4       	brne	.+2      	; 0xd5c <_Z14PostErogazioneiPc14EthernetClient6String+0x2e>
     d5a:	92 c0       	rjmp	.+292    	; 0xe80 <_Z14PostErogazioneiPc14EthernetClient6String+0x152>
     d5c:	2f ef       	ldi	r18, 0xFF	; 255
     d5e:	81 ee       	ldi	r24, 0xE1	; 225
     d60:	94 e0       	ldi	r25, 0x04	; 4
     d62:	21 50       	subi	r18, 0x01	; 1
     d64:	80 40       	sbci	r24, 0x00	; 0
     d66:	90 40       	sbci	r25, 0x00	; 0
     d68:	e1 f7       	brne	.-8      	; 0xd62 <_Z14PostErogazioneiPc14EthernetClient6String+0x34>
     d6a:	00 c0       	rjmp	.+0      	; 0xd6c <_Z14PostErogazioneiPc14EthernetClient6String+0x3e>
     d6c:	00 00       	nop
     d6e:	65 e8       	ldi	r22, 0x85	; 133
     d70:	73 e0       	ldi	r23, 0x03	; 3
     d72:	81 ed       	ldi	r24, 0xD1	; 209
     d74:	98 e0       	ldi	r25, 0x08	; 8
     d76:	0e 94 74 31 	call	0x62e8	; 0x62e8 <_ZN6StringaSEPKc>
     d7a:	66 ea       	ldi	r22, 0xA6	; 166
     d7c:	73 e0       	ldi	r23, 0x03	; 3
     d7e:	81 ed       	ldi	r24, 0xD1	; 209
     d80:	98 e0       	ldi	r25, 0x08	; 8
     d82:	0e 94 56 32 	call	0x64ac	; 0x64ac <_ZN6String6concatEPKc>
     d86:	6b ef       	ldi	r22, 0xFB	; 251
     d88:	73 e0       	ldi	r23, 0x03	; 3
     d8a:	81 ed       	ldi	r24, 0xD1	; 209
     d8c:	98 e0       	ldi	r25, 0x08	; 8
     d8e:	0e 94 56 32 	call	0x64ac	; 0x64ac <_ZN6String6concatEPKc>
     d92:	62 e8       	ldi	r22, 0x82	; 130
     d94:	72 e0       	ldi	r23, 0x02	; 2
     d96:	81 ed       	ldi	r24, 0xD1	; 209
     d98:	98 e0       	ldi	r25, 0x08	; 8
     d9a:	0e 94 56 32 	call	0x64ac	; 0x64ac <_ZN6String6concatEPKc>
     d9e:	6b ef       	ldi	r22, 0xFB	; 251
     da0:	73 e0       	ldi	r23, 0x03	; 3
     da2:	81 ed       	ldi	r24, 0xD1	; 209
     da4:	98 e0       	ldi	r25, 0x08	; 8
     da6:	0e 94 56 32 	call	0x64ac	; 0x64ac <_ZN6String6concatEPKc>
     daa:	6c e2       	ldi	r22, 0x2C	; 44
     dac:	73 e0       	ldi	r23, 0x03	; 3
     dae:	81 ed       	ldi	r24, 0xD1	; 209
     db0:	98 e0       	ldi	r25, 0x08	; 8
     db2:	0e 94 56 32 	call	0x64ac	; 0x64ac <_ZN6String6concatEPKc>
     db6:	6b ef       	ldi	r22, 0xFB	; 251
     db8:	73 e0       	ldi	r23, 0x03	; 3
     dba:	81 ed       	ldi	r24, 0xD1	; 209
     dbc:	98 e0       	ldi	r25, 0x08	; 8
     dbe:	0e 94 56 32 	call	0x64ac	; 0x64ac <_ZN6String6concatEPKc>
     dc2:	68 ec       	ldi	r22, 0xC8	; 200
     dc4:	73 e0       	ldi	r23, 0x03	; 3
     dc6:	81 ed       	ldi	r24, 0xD1	; 209
     dc8:	98 e0       	ldi	r25, 0x08	; 8
     dca:	0e 94 56 32 	call	0x64ac	; 0x64ac <_ZN6String6concatEPKc>
     dce:	6b ef       	ldi	r22, 0xFB	; 251
     dd0:	73 e0       	ldi	r23, 0x03	; 3
     dd2:	81 ed       	ldi	r24, 0xD1	; 209
     dd4:	98 e0       	ldi	r25, 0x08	; 8
     dd6:	0e 94 56 32 	call	0x64ac	; 0x64ac <_ZN6String6concatEPKc>
     dda:	64 ed       	ldi	r22, 0xD4	; 212
     ddc:	73 e0       	ldi	r23, 0x03	; 3
     dde:	81 ed       	ldi	r24, 0xD1	; 209
     de0:	98 e0       	ldi	r25, 0x08	; 8
     de2:	0e 94 56 32 	call	0x64ac	; 0x64ac <_ZN6String6concatEPKc>
     de6:	6b ef       	ldi	r22, 0xFB	; 251
     de8:	73 e0       	ldi	r23, 0x03	; 3
     dea:	81 ed       	ldi	r24, 0xD1	; 209
     dec:	98 e0       	ldi	r25, 0x08	; 8
     dee:	0e 94 56 32 	call	0x64ac	; 0x64ac <_ZN6String6concatEPKc>
     df2:	6b ef       	ldi	r22, 0xFB	; 251
     df4:	73 e0       	ldi	r23, 0x03	; 3
     df6:	81 ed       	ldi	r24, 0xD1	; 209
     df8:	98 e0       	ldi	r25, 0x08	; 8
     dfa:	0e 94 56 32 	call	0x64ac	; 0x64ac <_ZN6String6concatEPKc>
     dfe:	67 ee       	ldi	r22, 0xE7	; 231
     e00:	73 e0       	ldi	r23, 0x03	; 3
     e02:	81 ed       	ldi	r24, 0xD1	; 209
     e04:	98 e0       	ldi	r25, 0x08	; 8
     e06:	0e 94 56 32 	call	0x64ac	; 0x64ac <_ZN6String6concatEPKc>
     e0a:	6b ee       	ldi	r22, 0xEB	; 235
     e0c:	73 e0       	ldi	r23, 0x03	; 3
     e0e:	ce 01       	movw	r24, r28
     e10:	01 96       	adiw	r24, 0x01	; 1
     e12:	0e 94 f5 30 	call	0x61ea	; 0x61ea <_ZN6StringC1EPKc>
     e16:	b7 01       	movw	r22, r14
     e18:	ce 01       	movw	r24, r28
     e1a:	01 96       	adiw	r24, 0x01	; 1
     e1c:	0e 94 76 32 	call	0x64ec	; 0x64ec <_ZplRK15StringSumHelperRK6String>
     e20:	6a ef       	ldi	r22, 0xFA	; 250
     e22:	73 e0       	ldi	r23, 0x03	; 3
     e24:	0e 94 87 32 	call	0x650e	; 0x650e <_ZplRK15StringSumHelperPKc>
     e28:	bc 01       	movw	r22, r24
     e2a:	81 ed       	ldi	r24, 0xD1	; 209
     e2c:	98 e0       	ldi	r25, 0x08	; 8
     e2e:	0e 94 50 32 	call	0x64a0	; 0x64a0 <_ZN6String6concatERKS_>
     e32:	ce 01       	movw	r24, r28
     e34:	01 96       	adiw	r24, 0x01	; 1
     e36:	0e 94 8e 30 	call	0x611c	; 0x611c <_ZN6StringD1Ev>
     e3a:	6e ef       	ldi	r22, 0xFE	; 254
     e3c:	73 e0       	ldi	r23, 0x03	; 3
     e3e:	81 ed       	ldi	r24, 0xD1	; 209
     e40:	98 e0       	ldi	r25, 0x08	; 8
     e42:	0e 94 56 32 	call	0x64ac	; 0x64ac <_ZN6String6concatEPKc>
     e46:	61 ed       	ldi	r22, 0xD1	; 209
     e48:	78 e0       	ldi	r23, 0x08	; 8
     e4a:	8c e7       	ldi	r24, 0x7C	; 124
     e4c:	9a e0       	ldi	r25, 0x0A	; 10
     e4e:	0e 94 4f 2e 	call	0x5c9e	; 0x5c9e <_ZN5Print7printlnERK6String>
     e52:	61 ed       	ldi	r22, 0xD1	; 209
     e54:	78 e0       	ldi	r23, 0x08	; 8
     e56:	c8 01       	movw	r24, r16
     e58:	0e 94 26 2e 	call	0x5c4c	; 0x5c4c <_ZN5Print5printERK6String>
     e5c:	2f ef       	ldi	r18, 0xFF	; 255
     e5e:	87 ee       	ldi	r24, 0xE7	; 231
     e60:	93 e0       	ldi	r25, 0x03	; 3
     e62:	21 50       	subi	r18, 0x01	; 1
     e64:	80 40       	sbci	r24, 0x00	; 0
     e66:	90 40       	sbci	r25, 0x00	; 0
     e68:	e1 f7       	brne	.-8      	; 0xe62 <_Z14PostErogazioneiPc14EthernetClient6String+0x134>
     e6a:	00 c0       	rjmp	.+0      	; 0xe6c <_Z14PostErogazioneiPc14EthernetClient6String+0x13e>
     e6c:	00 00       	nop
     e6e:	6b e4       	ldi	r22, 0x4B	; 75
     e70:	73 e0       	ldi	r23, 0x03	; 3
     e72:	c8 01       	movw	r24, r16
     e74:	0e 94 5f 2e 	call	0x5cbe	; 0x5cbe <_ZN5Print7printlnEPKc>
     e78:	c8 01       	movw	r24, r16
     e7a:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <_ZN5Print7printlnEv>
     e7e:	25 c0       	rjmp	.+74     	; 0xeca <_Z14PostErogazioneiPc14EthernetClient6String+0x19c>
     e80:	84 ef       	ldi	r24, 0xF4	; 244
     e82:	98 e0       	ldi	r25, 0x08	; 8
     e84:	0e 94 a4 25 	call	0x4b48	; 0x4b48 <_ZN3LCD5clearEv>
     e88:	41 e0       	ldi	r20, 0x01	; 1
     e8a:	60 e0       	ldi	r22, 0x00	; 0
     e8c:	84 ef       	ldi	r24, 0xF4	; 244
     e8e:	98 e0       	ldi	r25, 0x08	; 8
     e90:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <_ZN3LCD9setCursorEhh>
     e94:	6d e5       	ldi	r22, 0x5D	; 93
     e96:	73 e0       	ldi	r23, 0x03	; 3
     e98:	84 ef       	ldi	r24, 0xF4	; 244
     e9a:	98 e0       	ldi	r25, 0x08	; 8
     e9c:	0e 94 34 2e 	call	0x5c68	; 0x5c68 <_ZN5Print5printEPKc>
     ea0:	43 e0       	ldi	r20, 0x03	; 3
     ea2:	60 e0       	ldi	r22, 0x00	; 0
     ea4:	84 ef       	ldi	r24, 0xF4	; 244
     ea6:	98 e0       	ldi	r25, 0x08	; 8
     ea8:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <_ZN3LCD9setCursorEhh>
     eac:	62 e7       	ldi	r22, 0x72	; 114
     eae:	73 e0       	ldi	r23, 0x03	; 3
     eb0:	84 ef       	ldi	r24, 0xF4	; 244
     eb2:	98 e0       	ldi	r25, 0x08	; 8
     eb4:	0e 94 34 2e 	call	0x5c68	; 0x5c68 <_ZN5Print5printEPKc>
     eb8:	2f ef       	ldi	r18, 0xFF	; 255
     eba:	83 ed       	ldi	r24, 0xD3	; 211
     ebc:	90 e3       	ldi	r25, 0x30	; 48
     ebe:	21 50       	subi	r18, 0x01	; 1
     ec0:	80 40       	sbci	r24, 0x00	; 0
     ec2:	90 40       	sbci	r25, 0x00	; 0
     ec4:	e1 f7       	brne	.-8      	; 0xebe <_Z14PostErogazioneiPc14EthernetClient6String+0x190>
     ec6:	00 c0       	rjmp	.+0      	; 0xec8 <_Z14PostErogazioneiPc14EthernetClient6String+0x19a>
     ec8:	00 00       	nop
     eca:	2f ef       	ldi	r18, 0xFF	; 255
     ecc:	81 ee       	ldi	r24, 0xE1	; 225
     ece:	94 e0       	ldi	r25, 0x04	; 4
     ed0:	21 50       	subi	r18, 0x01	; 1
     ed2:	80 40       	sbci	r24, 0x00	; 0
     ed4:	90 40       	sbci	r25, 0x00	; 0
     ed6:	e1 f7       	brne	.-8      	; 0xed0 <_Z14PostErogazioneiPc14EthernetClient6String+0x1a2>
     ed8:	00 c0       	rjmp	.+0      	; 0xeda <_Z14PostErogazioneiPc14EthernetClient6String+0x1ac>
     eda:	00 00       	nop
     edc:	f1 2c       	mov	r15, r1
     ede:	c8 01       	movw	r24, r16
     ee0:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <_ZN14EthernetClient9availableEv>
     ee4:	89 2b       	or	r24, r25
     ee6:	09 f4       	brne	.+2      	; 0xeea <_Z14PostErogazioneiPc14EthernetClient6String+0x1bc>
     ee8:	54 c0       	rjmp	.+168    	; 0xf92 <_Z14PostErogazioneiPc14EthernetClient6String+0x264>
     eea:	c8 01       	movw	r24, r16
     eec:	0e 94 4e 1e 	call	0x3c9c	; 0x3c9c <_ZN14EthernetClient4readEv>
     ef0:	e8 2e       	mov	r14, r24
     ef2:	65 ec       	ldi	r22, 0xC5	; 197
     ef4:	78 e0       	ldi	r23, 0x08	; 8
     ef6:	ce 01       	movw	r24, r28
     ef8:	01 96       	adiw	r24, 0x01	; 1
     efa:	0e 94 61 31 	call	0x62c2	; 0x62c2 <_ZN6StringC1ERKS_>
     efe:	6e 2d       	mov	r22, r14
     f00:	ce 01       	movw	r24, r28
     f02:	01 96       	adiw	r24, 0x01	; 1
     f04:	0e 94 9e 32 	call	0x653c	; 0x653c <_ZplRK15StringSumHelperc>
     f08:	bc 01       	movw	r22, r24
     f0a:	85 ec       	ldi	r24, 0xC5	; 197
     f0c:	98 e0       	ldi	r25, 0x08	; 8
     f0e:	0e 94 4c 31 	call	0x6298	; 0x6298 <_ZN6StringaSERKS_>
     f12:	ce 01       	movw	r24, r28
     f14:	01 96       	adiw	r24, 0x01	; 1
     f16:	0e 94 8e 30 	call	0x611c	; 0x611c <_ZN6StringD1Ev>
     f1a:	20 91 5b 01 	lds	r18, 0x015B	; 0x80015b <HTTP_len_response>
     f1e:	30 91 5c 01 	lds	r19, 0x015C	; 0x80015c <HTTP_len_response+0x1>
     f22:	80 91 c9 08 	lds	r24, 0x08C9	; 0x8008c9 <RispostaHTTP+0x4>
     f26:	90 91 ca 08 	lds	r25, 0x08CA	; 0x8008ca <RispostaHTTP+0x5>
     f2a:	28 17       	cp	r18, r24
     f2c:	39 07       	cpc	r19, r25
     f2e:	b9 f6       	brne	.-82     	; 0xede <_Z14PostErogazioneiPc14EthernetClient6String+0x1b0>
     f30:	65 ec       	ldi	r22, 0xC5	; 197
     f32:	78 e0       	ldi	r23, 0x08	; 8
     f34:	ce 01       	movw	r24, r28
     f36:	01 96       	adiw	r24, 0x01	; 1
     f38:	0e 94 61 31 	call	0x62c2	; 0x62c2 <_ZN6StringC1ERKS_>
     f3c:	be 01       	movw	r22, r28
     f3e:	6f 5f       	subi	r22, 0xFF	; 255
     f40:	7f 4f       	sbci	r23, 0xFF	; 255
     f42:	ce 01       	movw	r24, r28
     f44:	07 96       	adiw	r24, 0x07	; 7
     f46:	83 dd       	rcall	.-1274   	; 0xa4e <_Z19GetHTTPResponseCode6String>
     f48:	ce 01       	movw	r24, r28
     f4a:	01 96       	adiw	r24, 0x01	; 1
     f4c:	0e 94 8e 30 	call	0x611c	; 0x611c <_ZN6StringD1Ev>
     f50:	2f ef       	ldi	r18, 0xFF	; 255
     f52:	87 ee       	ldi	r24, 0xE7	; 231
     f54:	93 e0       	ldi	r25, 0x03	; 3
     f56:	21 50       	subi	r18, 0x01	; 1
     f58:	80 40       	sbci	r24, 0x00	; 0
     f5a:	90 40       	sbci	r25, 0x00	; 0
     f5c:	e1 f7       	brne	.-8      	; 0xf56 <_Z14PostErogazioneiPc14EthernetClient6String+0x228>
     f5e:	00 c0       	rjmp	.+0      	; 0xf60 <_Z14PostErogazioneiPc14EthernetClient6String+0x232>
     f60:	00 00       	nop
     f62:	61 e8       	ldi	r22, 0x81	; 129
     f64:	73 e0       	ldi	r23, 0x03	; 3
     f66:	ce 01       	movw	r24, r28
     f68:	07 96       	adiw	r24, 0x07	; 7
     f6a:	0e 94 aa 32 	call	0x6554	; 0x6554 <_ZNK6String6equalsEPKc>
     f6e:	88 23       	and	r24, r24
     f70:	11 f0       	breq	.+4      	; 0xf76 <_Z14PostErogazioneiPc14EthernetClient6String+0x248>
     f72:	ff 24       	eor	r15, r15
     f74:	f3 94       	inc	r15
     f76:	2f ef       	ldi	r18, 0xFF	; 255
     f78:	87 ee       	ldi	r24, 0xE7	; 231
     f7a:	93 e0       	ldi	r25, 0x03	; 3
     f7c:	21 50       	subi	r18, 0x01	; 1
     f7e:	80 40       	sbci	r24, 0x00	; 0
     f80:	90 40       	sbci	r25, 0x00	; 0
     f82:	e1 f7       	brne	.-8      	; 0xf7c <_Z14PostErogazioneiPc14EthernetClient6String+0x24e>
     f84:	00 c0       	rjmp	.+0      	; 0xf86 <_Z14PostErogazioneiPc14EthernetClient6String+0x258>
     f86:	00 00       	nop
     f88:	ce 01       	movw	r24, r28
     f8a:	07 96       	adiw	r24, 0x07	; 7
     f8c:	0e 94 8e 30 	call	0x611c	; 0x611c <_ZN6StringD1Ev>
     f90:	a6 cf       	rjmp	.-180    	; 0xede <_Z14PostErogazioneiPc14EthernetClient6String+0x1b0>
     f92:	2f ef       	ldi	r18, 0xFF	; 255
     f94:	80 e7       	ldi	r24, 0x70	; 112
     f96:	92 e0       	ldi	r25, 0x02	; 2
     f98:	21 50       	subi	r18, 0x01	; 1
     f9a:	80 40       	sbci	r24, 0x00	; 0
     f9c:	90 40       	sbci	r25, 0x00	; 0
     f9e:	e1 f7       	brne	.-8      	; 0xf98 <_Z14PostErogazioneiPc14EthernetClient6String+0x26a>
     fa0:	00 c0       	rjmp	.+0      	; 0xfa2 <_Z14PostErogazioneiPc14EthernetClient6String+0x274>
     fa2:	00 00       	nop
     fa4:	8f 2d       	mov	r24, r15
     fa6:	2c 96       	adiw	r28, 0x0c	; 12
     fa8:	0f b6       	in	r0, 0x3f	; 63
     faa:	f8 94       	cli
     fac:	de bf       	out	0x3e, r29	; 62
     fae:	0f be       	out	0x3f, r0	; 63
     fb0:	cd bf       	out	0x3d, r28	; 61
     fb2:	df 91       	pop	r29
     fb4:	cf 91       	pop	r28
     fb6:	1f 91       	pop	r17
     fb8:	0f 91       	pop	r16
     fba:	ff 90       	pop	r15
     fbc:	ef 90       	pop	r14
     fbe:	08 95       	ret

00000fc0 <_Z15abilitaPulsantiv>:
     fc0:	57 98       	cbi	0x0a, 7	; 10
     fc2:	56 98       	cbi	0x0a, 6	; 10
     fc4:	88 e0       	ldi	r24, 0x08	; 8
     fc6:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
     fca:	80 ec       	ldi	r24, 0xC0	; 192
     fcc:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
     fd0:	78 94       	sei
     fd2:	08 95       	ret

00000fd4 <_Z22abilitaContattiPistolav>:
     fd4:	09 98       	cbi	0x01, 1	; 1
     fd6:	0a 98       	cbi	0x01, 2	; 1
     fd8:	08 95       	ret

00000fda <_Z13abilitaPulserc>:
     fda:	91 e0       	ldi	r25, 0x01	; 1
     fdc:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
     fe0:	84 34       	cpi	r24, 0x44	; 68
     fe2:	19 f4       	brne	.+6      	; 0xfea <_Z13abilitaPulserc+0x10>
     fe4:	0d 98       	cbi	0x01, 5	; 1
     fe6:	80 e2       	ldi	r24, 0x20	; 32
     fe8:	02 c0       	rjmp	.+4      	; 0xfee <_Z13abilitaPulserc+0x14>
     fea:	0e 98       	cbi	0x01, 6	; 1
     fec:	80 e4       	ldi	r24, 0x40	; 64
     fee:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
     ff2:	78 94       	sei
     ff4:	08 95       	ret

00000ff6 <_Z14impulsiToLitrii>:
    _delay_ms(4);
  }
}

double impulsiToLitri(int P_impulsi)
{
     ff6:	cf 92       	push	r12
     ff8:	df 92       	push	r13
     ffa:	ef 92       	push	r14
     ffc:	ff 92       	push	r15
  //double imp = (double)(P_impulsi-1);
  double imp = (double)(P_impulsi);
     ffe:	bc 01       	movw	r22, r24
    1000:	99 0f       	add	r25, r25
    1002:	88 0b       	sbc	r24, r24
    1004:	99 0b       	sbc	r25, r25
    1006:	0e 94 19 2c 	call	0x5832	; 0x5832 <__floatsisf>
    100a:	6b 01       	movw	r12, r22
    100c:	7c 01       	movw	r14, r24
  if (imp < 0) {imp = 0;}
    100e:	20 e0       	ldi	r18, 0x00	; 0
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	a9 01       	movw	r20, r18
    1014:	0e 94 ab 2b 	call	0x5756	; 0x5756 <__cmpsf2>
    1018:	87 ff       	sbrs	r24, 7
    101a:	03 c0       	rjmp	.+6      	; 0x1022 <_Z14impulsiToLitrii+0x2c>
    101c:	c1 2c       	mov	r12, r1
    101e:	d1 2c       	mov	r13, r1
    1020:	76 01       	movw	r14, r12
  double lt = (imp / ImpulsiLitro);
  double totale = lt;
  return totale;
    1022:	60 91 59 01 	lds	r22, 0x0159	; 0x800159 <ImpulsiLitro>
    1026:	70 91 5a 01 	lds	r23, 0x015A	; 0x80015a <ImpulsiLitro+0x1>
    102a:	07 2e       	mov	r0, r23
    102c:	00 0c       	add	r0, r0
    102e:	88 0b       	sbc	r24, r24
    1030:	99 0b       	sbc	r25, r25
    1032:	0e 94 19 2c 	call	0x5832	; 0x5832 <__floatsisf>
    1036:	9b 01       	movw	r18, r22
    1038:	ac 01       	movw	r20, r24
    103a:	c7 01       	movw	r24, r14
    103c:	b6 01       	movw	r22, r12
    103e:	0e 94 af 2b 	call	0x575e	; 0x575e <__divsf3>
}
    1042:	ff 90       	pop	r15
    1044:	ef 90       	pop	r14
    1046:	df 90       	pop	r13
    1048:	cf 90       	pop	r12
    104a:	08 95       	ret

0000104c <_Z18Rele_Abilitazione1ii>:

void Rele_Abilitazione1(int p_azione,int p_bit) {
  
  DDRC |= (1 << PC7);  // Rele1 
    104c:	3f 9a       	sbi	0x07, 7	; 7
  
  switch (p_azione) {
    104e:	81 30       	cpi	r24, 0x01	; 1
    1050:	91 05       	cpc	r25, r1
    1052:	71 f0       	breq	.+28     	; 0x1070 <_Z18Rele_Abilitazione1ii+0x24>
    1054:	82 30       	cpi	r24, 0x02	; 2
    1056:	91 05       	cpc	r25, r1
    1058:	e1 f0       	breq	.+56     	; 0x1092 <_Z18Rele_Abilitazione1ii+0x46>
    105a:	89 2b       	or	r24, r25
    105c:	89 f5       	brne	.+98     	; 0x10c0 <_Z18Rele_Abilitazione1ii+0x74>
    case 0: // chiudi relè
    {     
      CLEAR_BIT(PORTC,PC7); // Rele1*/
    105e:	47 98       	cbi	0x08, 7	; 8
    1060:	2f ef       	ldi	r18, 0xFF	; 255
    1062:	30 e7       	ldi	r19, 0x70	; 112
    1064:	42 e0       	ldi	r20, 0x02	; 2
    1066:	21 50       	subi	r18, 0x01	; 1
    1068:	30 40       	sbci	r19, 0x00	; 0
    106a:	40 40       	sbci	r20, 0x00	; 0
    106c:	e1 f7       	brne	.-8      	; 0x1066 <_Z18Rele_Abilitazione1ii+0x1a>
    106e:	0e c0       	rjmp	.+28     	; 0x108c <_Z18Rele_Abilitazione1ii+0x40>
      _delay_ms(50);
    }
    break;
    case 1: // apri relè
    {
      SET_BIT(PORTC,p_bit); // Rele1
    1070:	28 b1       	in	r18, 0x08	; 8
    1072:	01 c0       	rjmp	.+2      	; 0x1076 <_Z18Rele_Abilitazione1ii+0x2a>
    1074:	88 0f       	add	r24, r24
    1076:	6a 95       	dec	r22
    1078:	ea f7       	brpl	.-6      	; 0x1074 <_Z18Rele_Abilitazione1ii+0x28>
    107a:	82 2b       	or	r24, r18
    107c:	88 b9       	out	0x08, r24	; 8
    107e:	8f ef       	ldi	r24, 0xFF	; 255
    1080:	90 e7       	ldi	r25, 0x70	; 112
    1082:	22 e0       	ldi	r18, 0x02	; 2
    1084:	81 50       	subi	r24, 0x01	; 1
    1086:	90 40       	sbci	r25, 0x00	; 0
    1088:	20 40       	sbci	r18, 0x00	; 0
    108a:	e1 f7       	brne	.-8      	; 0x1084 <_Z18Rele_Abilitazione1ii+0x38>
    108c:	00 c0       	rjmp	.+0      	; 0x108e <_Z18Rele_Abilitazione1ii+0x42>
    108e:	00 00       	nop
    1090:	08 95       	ret
      _delay_ms(50);      
    }
    break;
    case 2: // chiudi e apri relè
    {
      CLEAR_BIT(PORTC,p_bit); // Rele1
    1092:	28 b1       	in	r18, 0x08	; 8
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	01 c0       	rjmp	.+2      	; 0x109c <_Z18Rele_Abilitazione1ii+0x50>
    109a:	88 0f       	add	r24, r24
    109c:	6a 95       	dec	r22
    109e:	ea f7       	brpl	.-6      	; 0x109a <_Z18Rele_Abilitazione1ii+0x4e>
    10a0:	98 2f       	mov	r25, r24
    10a2:	90 95       	com	r25
    10a4:	92 23       	and	r25, r18
    10a6:	98 b9       	out	0x08, r25	; 8
    10a8:	3f ef       	ldi	r19, 0xFF	; 255
    10aa:	45 ea       	ldi	r20, 0xA5	; 165
    10ac:	2e e0       	ldi	r18, 0x0E	; 14
    10ae:	31 50       	subi	r19, 0x01	; 1
    10b0:	40 40       	sbci	r20, 0x00	; 0
    10b2:	20 40       	sbci	r18, 0x00	; 0
    10b4:	e1 f7       	brne	.-8      	; 0x10ae <_Z18Rele_Abilitazione1ii+0x62>
    10b6:	00 c0       	rjmp	.+0      	; 0x10b8 <_Z18Rele_Abilitazione1ii+0x6c>
    10b8:	00 00       	nop
      _delay_ms(300);
      SET_BIT(PORTC,p_bit); // Rele1
    10ba:	98 b1       	in	r25, 0x08	; 8
    10bc:	89 2b       	or	r24, r25
    10be:	88 b9       	out	0x08, r24	; 8
    10c0:	08 95       	ret

000010c2 <_Z18Rele_Abilitazione2ii>:
  }
}

void Rele_Abilitazione2(int p_azione,int p_bit) {
  
  DDRA |= (1 << PA7);  // Rele2
    10c2:	0f 9a       	sbi	0x01, 7	; 1
  
  switch (p_azione) {
    10c4:	81 30       	cpi	r24, 0x01	; 1
    10c6:	91 05       	cpc	r25, r1
    10c8:	b9 f0       	breq	.+46     	; 0x10f8 <_Z18Rele_Abilitazione2ii+0x36>
    10ca:	82 30       	cpi	r24, 0x02	; 2
    10cc:	91 05       	cpc	r25, r1
    10ce:	29 f1       	breq	.+74     	; 0x111a <_Z18Rele_Abilitazione2ii+0x58>
    10d0:	89 2b       	or	r24, r25
    10d2:	d1 f5       	brne	.+116    	; 0x1148 <_Z18Rele_Abilitazione2ii+0x86>
    case 0:
    {
      CLEAR_BIT(PORTA,p_bit); // Rele2
    10d4:	22 b1       	in	r18, 0x02	; 2
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	01 c0       	rjmp	.+2      	; 0x10de <_Z18Rele_Abilitazione2ii+0x1c>
    10dc:	88 0f       	add	r24, r24
    10de:	6a 95       	dec	r22
    10e0:	ea f7       	brpl	.-6      	; 0x10dc <_Z18Rele_Abilitazione2ii+0x1a>
    10e2:	80 95       	com	r24
    10e4:	82 23       	and	r24, r18
    10e6:	82 b9       	out	0x02, r24	; 2
    10e8:	2f ef       	ldi	r18, 0xFF	; 255
    10ea:	30 e7       	ldi	r19, 0x70	; 112
    10ec:	42 e0       	ldi	r20, 0x02	; 2
    10ee:	21 50       	subi	r18, 0x01	; 1
    10f0:	30 40       	sbci	r19, 0x00	; 0
    10f2:	40 40       	sbci	r20, 0x00	; 0
    10f4:	e1 f7       	brne	.-8      	; 0x10ee <_Z18Rele_Abilitazione2ii+0x2c>
    10f6:	0e c0       	rjmp	.+28     	; 0x1114 <_Z18Rele_Abilitazione2ii+0x52>
      _delay_ms(50);
    }
    break;
    case 1:
    {
      SET_BIT(PORTA,p_bit); // Rele2
    10f8:	22 b1       	in	r18, 0x02	; 2
    10fa:	01 c0       	rjmp	.+2      	; 0x10fe <_Z18Rele_Abilitazione2ii+0x3c>
    10fc:	88 0f       	add	r24, r24
    10fe:	6a 95       	dec	r22
    1100:	ea f7       	brpl	.-6      	; 0x10fc <_Z18Rele_Abilitazione2ii+0x3a>
    1102:	82 2b       	or	r24, r18
    1104:	82 b9       	out	0x02, r24	; 2
    1106:	8f ef       	ldi	r24, 0xFF	; 255
    1108:	90 e7       	ldi	r25, 0x70	; 112
    110a:	22 e0       	ldi	r18, 0x02	; 2
    110c:	81 50       	subi	r24, 0x01	; 1
    110e:	90 40       	sbci	r25, 0x00	; 0
    1110:	20 40       	sbci	r18, 0x00	; 0
    1112:	e1 f7       	brne	.-8      	; 0x110c <_Z18Rele_Abilitazione2ii+0x4a>
    1114:	00 c0       	rjmp	.+0      	; 0x1116 <_Z18Rele_Abilitazione2ii+0x54>
    1116:	00 00       	nop
    1118:	08 95       	ret
      _delay_ms(50);
    }
    break;
    case 2:
    {
      CLEAR_BIT(PORTA,p_bit); // Rele2
    111a:	22 b1       	in	r18, 0x02	; 2
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	01 c0       	rjmp	.+2      	; 0x1124 <_Z18Rele_Abilitazione2ii+0x62>
    1122:	88 0f       	add	r24, r24
    1124:	6a 95       	dec	r22
    1126:	ea f7       	brpl	.-6      	; 0x1122 <_Z18Rele_Abilitazione2ii+0x60>
    1128:	98 2f       	mov	r25, r24
    112a:	90 95       	com	r25
    112c:	92 23       	and	r25, r18
    112e:	92 b9       	out	0x02, r25	; 2
    1130:	3f ef       	ldi	r19, 0xFF	; 255
    1132:	45 ea       	ldi	r20, 0xA5	; 165
    1134:	2e e0       	ldi	r18, 0x0E	; 14
    1136:	31 50       	subi	r19, 0x01	; 1
    1138:	40 40       	sbci	r20, 0x00	; 0
    113a:	20 40       	sbci	r18, 0x00	; 0
    113c:	e1 f7       	brne	.-8      	; 0x1136 <_Z18Rele_Abilitazione2ii+0x74>
    113e:	00 c0       	rjmp	.+0      	; 0x1140 <_Z18Rele_Abilitazione2ii+0x7e>
    1140:	00 00       	nop
      _delay_ms(300);
      SET_BIT(PORTA,p_bit); // Rele2      
    1142:	92 b1       	in	r25, 0x02	; 2
    1144:	89 2b       	or	r24, r25
    1146:	82 b9       	out	0x02, r24	; 2
    1148:	08 95       	ret

0000114a <_Z12Control_WIFIi>:
    break;
  }
}

void Control_WIFI(int azione) {
   DDRB |= (1 << PB3);  // set DDRB bit 3,  sets PB3 for output
    114a:	23 9a       	sbi	0x04, 3	; 4
    114c:	2f ef       	ldi	r18, 0xFF	; 255
    114e:	36 e7       	ldi	r19, 0x76	; 118
    1150:	41 e0       	ldi	r20, 0x01	; 1
    1152:	21 50       	subi	r18, 0x01	; 1
    1154:	30 40       	sbci	r19, 0x00	; 0
    1156:	40 40       	sbci	r20, 0x00	; 0
    1158:	e1 f7       	brne	.-8      	; 0x1152 <_Z12Control_WIFIi+0x8>
    115a:	00 c0       	rjmp	.+0      	; 0x115c <_Z12Control_WIFIi+0x12>
    115c:	00 00       	nop
   _delay_ms(30);
   if (azione == 1) {SET_BIT(PORTB,3);} else if (azione == 0) { CLEAR_BIT(PORTB,3); }
    115e:	81 30       	cpi	r24, 0x01	; 1
    1160:	91 05       	cpc	r25, r1
    1162:	11 f4       	brne	.+4      	; 0x1168 <_Z12Control_WIFIi+0x1e>
    1164:	2b 9a       	sbi	0x05, 3	; 5
    1166:	08 95       	ret
    1168:	89 2b       	or	r24, r25
    116a:	09 f4       	brne	.+2      	; 0x116e <_Z12Control_WIFIi+0x24>
    116c:	2b 98       	cbi	0x05, 3	; 5
    116e:	08 95       	ret

00001170 <_Z6Azzerav>:
}

void Azzera()
{
   RispostaHTTP = "";
    1170:	64 e8       	ldi	r22, 0x84	; 132
    1172:	71 e0       	ldi	r23, 0x01	; 1
    1174:	85 ec       	ldi	r24, 0xC5	; 197
    1176:	98 e0       	ldi	r25, 0x08	; 8
    1178:	0e 94 74 31 	call	0x62e8	; 0x62e8 <_ZN6StringaSEPKc>
   impulsi = 0;
    117c:	10 92 cc 08 	sts	0x08CC, r1	; 0x8008cc <impulsi+0x1>
    1180:	10 92 cb 08 	sts	0x08CB, r1	; 0x8008cb <impulsi>
   alreadyTimbrata = false;
    1184:	10 92 0c 09 	sts	0x090C, r1	; 0x80090c <alreadyTimbrata>
   
   Carburante = "X";
    1188:	69 e7       	ldi	r22, 0x79	; 121
    118a:	74 e0       	ldi	r23, 0x04	; 4
    118c:	8b e9       	ldi	r24, 0x9B	; 155
    118e:	98 e0       	ldi	r25, 0x08	; 8
    1190:	0e 94 74 31 	call	0x62e8	; 0x62e8 <_ZN6StringaSEPKc>
   
   Rele_Abilitazione1(1,7);
    1194:	67 e0       	ldi	r22, 0x07	; 7
    1196:	70 e0       	ldi	r23, 0x00	; 0
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	57 df       	rcall	.-338    	; 0x104c <_Z18Rele_Abilitazione1ii>
   Rele_Abilitazione2(1,7);
    119e:	67 e0       	ldi	r22, 0x07	; 7
    11a0:	70 e0       	ldi	r23, 0x00	; 0
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	8d df       	rcall	.-230    	; 0x10c2 <_Z18Rele_Abilitazione2ii>
   Control_WIFI(0);
    11a8:	80 e0       	ldi	r24, 0x00	; 0
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	ce df       	rcall	.-100    	; 0x114a <_Z12Control_WIFIi>
    11ae:	8f e1       	ldi	r24, 0x1F	; 31
    11b0:	9e e4       	ldi	r25, 0x4E	; 78
    11b2:	01 97       	sbiw	r24, 0x01	; 1
    11b4:	f1 f7       	brne	.-4      	; 0x11b2 <_Z6Azzerav+0x42>
    11b6:	00 c0       	rjmp	.+0      	; 0x11b8 <_Z6Azzerav+0x48>
    11b8:	00 00       	nop
   
   //clientToServizio.flush();
   //clientToServizio.stop();
   
   _delay_ms(5);
   clientATE.flush();
    11ba:	85 e4       	ldi	r24, 0x45	; 69
    11bc:	98 e0       	ldi	r25, 0x08	; 8
    11be:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <_ZN14EthernetClient5flushEv>
   clientATE.stop();
    11c2:	85 e4       	ldi	r24, 0x45	; 69
    11c4:	98 e0       	ldi	r25, 0x08	; 8
    11c6:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <_ZN14EthernetClient4stopEv>
    11ca:	8f e1       	ldi	r24, 0x1F	; 31
    11cc:	9e e4       	ldi	r25, 0x4E	; 78
    11ce:	01 97       	sbiw	r24, 0x01	; 1
    11d0:	f1 f7       	brne	.-4      	; 0x11ce <_Z6Azzerav+0x5e>
    11d2:	00 c0       	rjmp	.+0      	; 0x11d4 <_Z6Azzerav+0x64>
    11d4:	00 00       	nop
   _delay_ms(5);
   clientLOCAL.flush();
    11d6:	82 e5       	ldi	r24, 0x52	; 82
    11d8:	98 e0       	ldi	r25, 0x08	; 8
    11da:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <_ZN14EthernetClient5flushEv>
   clientLOCAL.stop();
    11de:	82 e5       	ldi	r24, 0x52	; 82
    11e0:	98 e0       	ldi	r25, 0x08	; 8
    11e2:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <_ZN14EthernetClient4stopEv>
   Connected = false;
    11e6:	10 92 d0 08 	sts	0x08D0, r1	; 0x8008d0 <Connected+0x1>
    11ea:	10 92 cf 08 	sts	0x08CF, r1	; 0x8008cf <Connected>
    11ee:	8f e1       	ldi	r24, 0x1F	; 31
    11f0:	9e e4       	ldi	r25, 0x4E	; 78
    11f2:	01 97       	sbiw	r24, 0x01	; 1
    11f4:	f1 f7       	brne	.-4      	; 0x11f2 <_Z6Azzerav+0x82>
    11f6:	00 c0       	rjmp	.+0      	; 0x11f8 <_Z6Azzerav+0x88>
    11f8:	00 00       	nop
static const uint8_t RELE2 = PORTA7;
/*********************************************************************************************/
static inline void initSS_FLASH()  { DDRB |= (1 << PB4); } // set DDRB bit 4, sets PB4 for output
static inline void initSS_ETH()    { DDRC |= (1 << PC4); } // set DDRC bit 4, sets PC4 for output
static inline void enable_ETH()    { PORTC &= ~(1 << PC4); } // Set 0 Bit 4 PORTC Register
static inline void enable_FLASH()  { PORTB &= ~(1 << PB4); } // Set 0 Bit 4 PORTB Register
    11fa:	2c 98       	cbi	0x05, 4	; 5
    11fc:	8f e1       	ldi	r24, 0x1F	; 31
    11fe:	9e e4       	ldi	r25, 0x4E	; 78
    1200:	01 97       	sbiw	r24, 0x01	; 1
    1202:	f1 f7       	brne	.-4      	; 0x1200 <_Z6Azzerav+0x90>
    1204:	00 c0       	rjmp	.+0      	; 0x1206 <_Z6Azzerav+0x96>
    1206:	00 00       	nop
static inline void disable_ETH()   { PORTC |= (1 << PC4);  } // Set 1 Bit 4 PORTC Register
static inline void disable_FLASH() { PORTB |= (1 << PB4);  } // Set 1 Bit 4 PORTB Register
    1208:	2c 9a       	sbi	0x05, 4	; 5
    120a:	8f e1       	ldi	r24, 0x1F	; 31
    120c:	9e e4       	ldi	r25, 0x4E	; 78
    120e:	01 97       	sbiw	r24, 0x01	; 1
    1210:	f1 f7       	brne	.-4      	; 0x120e <_Z6Azzerav+0x9e>
    1212:	00 c0       	rjmp	.+0      	; 0x1214 <_Z6Azzerav+0xa4>
   _delay_ms(5);
   enable_FLASH();
   _delay_ms(5);
   disable_FLASH();
   _delay_ms(5);
   disable_ETH();
    1214:	00 00       	nop
    1216:	88 d8       	rcall	.-3824   	; 0x328 <_ZL11disable_ETHv>
    1218:	8f e1       	ldi	r24, 0x1F	; 31
    121a:	9e e4       	ldi	r25, 0x4E	; 78
    121c:	01 97       	sbiw	r24, 0x01	; 1
    121e:	f1 f7       	brne	.-4      	; 0x121c <_Z6Azzerav+0xac>
    1220:	00 c0       	rjmp	.+0      	; 0x1222 <_Z6Azzerav+0xb2>
   _delay_ms(5); 
   enable_ETH(); 
    1222:	00 00       	nop
    1224:	7f d8       	rcall	.-3842   	; 0x324 <_ZL10enable_ETHv>
     
   SET_BIT(PORTA,A1);
    1226:	82 b1       	in	r24, 0x02	; 2
    1228:	82 b9       	out	0x02, r24	; 2
   SET_BIT(PORTA,A2);
    122a:	82 b1       	in	r24, 0x02	; 2
    122c:	82 b9       	out	0x02, r24	; 2
   
   righeDisplay[1] =  "";
    122e:	64 e8       	ldi	r22, 0x84	; 132
    1230:	71 e0       	ldi	r23, 0x01	; 1
    1232:	8d e7       	ldi	r24, 0x7D	; 125
    1234:	98 e0       	ldi	r25, 0x08	; 8
    1236:	0e 94 74 31 	call	0x62e8	; 0x62e8 <_ZN6StringaSEPKc>
   righeDisplay[2] =  "";
    123a:	64 e8       	ldi	r22, 0x84	; 132
    123c:	71 e0       	ldi	r23, 0x01	; 1
    123e:	83 e8       	ldi	r24, 0x83	; 131
    1240:	98 e0       	ldi	r25, 0x08	; 8
    1242:	0e 94 74 31 	call	0x62e8	; 0x62e8 <_ZN6StringaSEPKc>
   righeDisplay[2] =  "";
    1246:	64 e8       	ldi	r22, 0x84	; 132
    1248:	71 e0       	ldi	r23, 0x01	; 1
    124a:	83 e8       	ldi	r24, 0x83	; 131
    124c:	98 e0       	ldi	r25, 0x08	; 8
    124e:	0e 94 74 31 	call	0x62e8	; 0x62e8 <_ZN6StringaSEPKc>
   
   lcd.noBacklight();
    1252:	84 ef       	ldi	r24, 0xF4	; 244
    1254:	98 e0       	ldi	r25, 0x08	; 8
    1256:	0e 94 94 25 	call	0x4b28	; 0x4b28 <_ZN3LCD11noBacklightEv>
   lcd.noDisplay();
    125a:	84 ef       	ldi	r24, 0xF4	; 244
    125c:	98 e0       	ldi	r25, 0x08	; 8
    125e:	0e 94 ec 25 	call	0x4bd8	; 0x4bd8 <_ZN3LCD9noDisplayEv>
   secs = 0;
    1262:	10 92 35 08 	sts	0x0835, r1	; 0x800835 <secs>
    1266:	10 92 36 08 	sts	0x0836, r1	; 0x800836 <secs+0x1>
    126a:	10 92 37 08 	sts	0x0837, r1	; 0x800837 <secs+0x2>
    126e:	10 92 38 08 	sts	0x0838, r1	; 0x800838 <secs+0x3>
   UltimoPassaggioStato = 0;
    1272:	10 92 31 08 	sts	0x0831, r1	; 0x800831 <UltimoPassaggioStato>
    1276:	10 92 32 08 	sts	0x0832, r1	; 0x800832 <UltimoPassaggioStato+0x1>
    127a:	10 92 33 08 	sts	0x0833, r1	; 0x800833 <UltimoPassaggioStato+0x2>
    127e:	10 92 34 08 	sts	0x0834, r1	; 0x800834 <UltimoPassaggioStato+0x3>
   
   printLine();
    1282:	c7 d8       	rcall	.-3698   	; 0x412 <_Z9printLinev>
   Serial.println("Azzera....... OK");
    1284:	6b e7       	ldi	r22, 0x7B	; 123
    1286:	74 e0       	ldi	r23, 0x04	; 4
    1288:	8c e7       	ldi	r24, 0x7C	; 124
    128a:	9a e0       	ldi	r25, 0x0A	; 10
    128c:	0e 94 5f 2e 	call	0x5cbe	; 0x5cbe <_ZN5Print7printlnEPKc>
   printLine();
    1290:	c0 d8       	rcall	.-3712   	; 0x412 <_Z9printLinev>
   TARGA = "";
    1292:	64 e8       	ldi	r22, 0x84	; 132
    1294:	71 e0       	ldi	r23, 0x01	; 1
    1296:	81 e2       	ldi	r24, 0x21	; 33
    1298:	98 e0       	ldi	r25, 0x08	; 8
    129a:	0e 94 74 31 	call	0x62e8	; 0x62e8 <_ZN6StringaSEPKc>
   stato_procedura = -2;
    129e:	8e ef       	ldi	r24, 0xFE	; 254
    12a0:	9f ef       	ldi	r25, 0xFF	; 255
    12a2:	90 93 ce 08 	sts	0x08CE, r25	; 0x8008ce <stato_procedura+0x1>
    12a6:	80 93 cd 08 	sts	0x08CD, r24	; 0x8008cd <stato_procedura>
    12aa:	08 95       	ret

000012ac <loop>:
}

/**************************LOOP PROCEDURA************************************/
void loop() {
    12ac:	cf 92       	push	r12
    12ae:	df 92       	push	r13
    12b0:	ef 92       	push	r14
    12b2:	ff 92       	push	r15
    12b4:	0f 93       	push	r16
    12b6:	1f 93       	push	r17
    12b8:	cf 93       	push	r28
    12ba:	df 93       	push	r29
    12bc:	cd b7       	in	r28, 0x3d	; 61
    12be:	de b7       	in	r29, 0x3e	; 62
    12c0:	a3 97       	sbiw	r28, 0x23	; 35
    12c2:	0f b6       	in	r0, 0x3f	; 63
    12c4:	f8 94       	cli
    12c6:	de bf       	out	0x3e, r29	; 62
    12c8:	0f be       	out	0x3f, r0	; 63
    12ca:	cd bf       	out	0x3d, r28	; 61
      
  switch (stato_procedura) {
    12cc:	e0 91 cd 08 	lds	r30, 0x08CD	; 0x8008cd <stato_procedura>
    12d0:	f0 91 ce 08 	lds	r31, 0x08CE	; 0x8008ce <stato_procedura+0x1>
    12d4:	32 96       	adiw	r30, 0x02	; 2
    12d6:	ec 30       	cpi	r30, 0x0C	; 12
    12d8:	f1 05       	cpc	r31, r1
    12da:	08 f0       	brcs	.+2      	; 0x12de <loop+0x32>
    12dc:	8a c4       	rjmp	.+2324   	; 0x1bf2 <loop+0x946>
    12de:	ea 5b       	subi	r30, 0xBA	; 186
    12e0:	ff 4f       	sbci	r31, 0xFF	; 255
    12e2:	0c 94 80 34 	jmp	0x6900	; 0x6900 <__tablejump2__>
    case -2:
    { //cli(); // disable interrupt      
            
      righeDisplay[1] =  "";
    12e6:	64 e8       	ldi	r22, 0x84	; 132
    12e8:	71 e0       	ldi	r23, 0x01	; 1
    12ea:	8d e7       	ldi	r24, 0x7D	; 125
    12ec:	98 e0       	ldi	r25, 0x08	; 8
    12ee:	0e 94 74 31 	call	0x62e8	; 0x62e8 <_ZN6StringaSEPKc>
      righeDisplay[2] = "Setting....";
    12f2:	6c e8       	ldi	r22, 0x8C	; 140
    12f4:	74 e0       	ldi	r23, 0x04	; 4
    12f6:	83 e8       	ldi	r24, 0x83	; 131
    12f8:	98 e0       	ldi	r25, 0x08	; 8
    12fa:	0e 94 74 31 	call	0x62e8	; 0x62e8 <_ZN6StringaSEPKc>
      righeDisplay[3] =  "";
    12fe:	64 e8       	ldi	r22, 0x84	; 132
    1300:	71 e0       	ldi	r23, 0x01	; 1
    1302:	89 e8       	ldi	r24, 0x89	; 137
    1304:	98 e0       	ldi	r25, 0x08	; 8
    1306:	0e 94 74 31 	call	0x62e8	; 0x62e8 <_ZN6StringaSEPKc>
      
      displayLCD(righeDisplay,stato_procedura,100);
    130a:	60 91 cd 08 	lds	r22, 0x08CD	; 0x8008cd <stato_procedura>
    130e:	70 91 ce 08 	lds	r23, 0x08CE	; 0x8008ce <stato_procedura+0x1>
    1312:	44 e6       	ldi	r20, 0x64	; 100
    1314:	50 e0       	ldi	r21, 0x00	; 0
    1316:	87 e7       	ldi	r24, 0x77	; 119
    1318:	98 e0       	ldi	r25, 0x08	; 8
    131a:	92 d9       	rcall	.-3292   	; 0x640 <_Z10displayLCDP6Stringii>
    131c:	2f ef       	ldi	r18, 0xFF	; 255
    131e:	33 ec       	ldi	r19, 0xC3	; 195
    1320:	89 e0       	ldi	r24, 0x09	; 9
    1322:	21 50       	subi	r18, 0x01	; 1
    1324:	30 40       	sbci	r19, 0x00	; 0
    1326:	80 40       	sbci	r24, 0x00	; 0
    1328:	e1 f7       	brne	.-8      	; 0x1322 <loop+0x76>
    132a:	00 c0       	rjmp	.+0      	; 0x132c <loop+0x80>
    132c:	00 00       	nop
      stato_procedura++;
    }
    break;
    case -1:
    {             
    abilitaPulsanti();
    132e:	0b c0       	rjmp	.+22     	; 0x1346 <loop+0x9a>
    1330:	47 de       	rcall	.-882    	; 0xfc0 <_Z15abilitaPulsantiv>
    1332:	9f ef       	ldi	r25, 0xFF	; 255
    1334:	29 ef       	ldi	r18, 0xF9	; 249
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	91 50       	subi	r25, 0x01	; 1
    133a:	20 40       	sbci	r18, 0x00	; 0
    133c:	30 40       	sbci	r19, 0x00	; 0
    133e:	e1 f7       	brne	.-8      	; 0x1338 <loop+0x8c>
    1340:	00 c0       	rjmp	.+0      	; 0x1342 <loop+0x96>
    _delay_ms(20);
    abilitaContattiPistola();
    1342:	00 00       	nop
    1344:	47 de       	rcall	.-882    	; 0xfd4 <_Z22abilitaContattiPistolav>
    
    stato_procedura++;
    1346:	80 91 cd 08 	lds	r24, 0x08CD	; 0x8008cd <stato_procedura>
    134a:	90 91 ce 08 	lds	r25, 0x08CE	; 0x8008ce <stato_procedura+0x1>
    134e:	01 96       	adiw	r24, 0x01	; 1
    1350:	90 93 ce 08 	sts	0x08CE, r25	; 0x8008ce <stato_procedura+0x1>
    1354:	80 93 cd 08 	sts	0x08CD, r24	; 0x8008cd <stato_procedura>
    }
    break;
    1358:	4c c4       	rjmp	.+2200   	; 0x1bf2 <loop+0x946>
    case 0:
    { 
      righeDisplay[1] =  "";
    135a:	64 e8       	ldi	r22, 0x84	; 132
    135c:	71 e0       	ldi	r23, 0x01	; 1
    135e:	8d e7       	ldi	r24, 0x7D	; 125
    1360:	98 e0       	ldi	r25, 0x08	; 8
    1362:	0e 94 74 31 	call	0x62e8	; 0x62e8 <_ZN6StringaSEPKc>
      righeDisplay[2] =  "";
    1366:	64 e8       	ldi	r22, 0x84	; 132
    1368:	71 e0       	ldi	r23, 0x01	; 1
    136a:	83 e8       	ldi	r24, 0x83	; 131
    136c:	98 e0       	ldi	r25, 0x08	; 8
    136e:	0e 94 74 31 	call	0x62e8	; 0x62e8 <_ZN6StringaSEPKc>
      righeDisplay[3] =  "";
    1372:	64 e8       	ldi	r22, 0x84	; 132
    1374:	71 e0       	ldi	r23, 0x01	; 1
    1376:	89 e8       	ldi	r24, 0x89	; 137
    1378:	98 e0       	ldi	r25, 0x08	; 8
    137a:	0e 94 74 31 	call	0x62e8	; 0x62e8 <_ZN6StringaSEPKc>
          
      displayLCD(righeDisplay,stato_procedura,100);
    137e:	60 91 cd 08 	lds	r22, 0x08CD	; 0x8008cd <stato_procedura>
    1382:	70 91 ce 08 	lds	r23, 0x08CE	; 0x8008ce <stato_procedura+0x1>
    1386:	44 e6       	ldi	r20, 0x64	; 100
    1388:	50 e0       	ldi	r21, 0x00	; 0
    138a:	87 e7       	ldi	r24, 0x77	; 119
    138c:	98 e0       	ldi	r25, 0x08	; 8
    138e:	58 d9       	rcall	.-3408   	; 0x640 <_Z10displayLCDP6Stringii>
    1390:	8f ef       	ldi	r24, 0xFF	; 255
    1392:	97 ea       	ldi	r25, 0xA7	; 167
    1394:	21 e6       	ldi	r18, 0x61	; 97
    1396:	81 50       	subi	r24, 0x01	; 1
    1398:	90 40       	sbci	r25, 0x00	; 0
    139a:	20 40       	sbci	r18, 0x00	; 0
    139c:	e1 f7       	brne	.-8      	; 0x1396 <loop+0xea>
    139e:	00 c0       	rjmp	.+0      	; 0x13a0 <loop+0xf4>
    13a0:	00 00       	nop
      _delay_ms(2000);
      alreadyTimbrata = false;  
    13a2:	10 92 0c 09 	sts	0x090C, r1	; 0x80090c <alreadyTimbrata>
      
	  enable_ETH();
    13a6:	0e 94 92 01 	call	0x324	; 0x324 <_ZL10enable_ETHv>
    13aa:	cd cf       	rjmp	.-102    	; 0x1346 <loop+0x9a>
      stato_procedura++;
    }
    break;
    case 1:
    { 	TARGA = "";
    13ac:	64 e8       	ldi	r22, 0x84	; 132
    13ae:	71 e0       	ldi	r23, 0x01	; 1
    13b0:	81 e2       	ldi	r24, 0x21	; 33
    13b2:	98 e0       	ldi	r25, 0x08	; 8
    13b4:	0e 94 74 31 	call	0x62e8	; 0x62e8 <_ZN6StringaSEPKc>
			
		righeDisplay[1] = " * AUTENTICAZIONE *";
    13b8:	68 e9       	ldi	r22, 0x98	; 152
    13ba:	74 e0       	ldi	r23, 0x04	; 4
    13bc:	8d e7       	ldi	r24, 0x7D	; 125
    13be:	98 e0       	ldi	r25, 0x08	; 8
    13c0:	0e 94 74 31 	call	0x62e8	; 0x62e8 <_ZN6StringaSEPKc>
		righeDisplay[2] = "";
    13c4:	64 e8       	ldi	r22, 0x84	; 132
    13c6:	71 e0       	ldi	r23, 0x01	; 1
    13c8:	83 e8       	ldi	r24, 0x83	; 131
    13ca:	98 e0       	ldi	r25, 0x08	; 8
    13cc:	0e 94 74 31 	call	0x62e8	; 0x62e8 <_ZN6StringaSEPKc>
		righeDisplay[3] = "    Avvicina ATE  ";
    13d0:	6c ea       	ldi	r22, 0xAC	; 172
    13d2:	74 e0       	ldi	r23, 0x04	; 4
    13d4:	89 e8       	ldi	r24, 0x89	; 137
    13d6:	98 e0       	ldi	r25, 0x08	; 8
    13d8:	0e 94 74 31 	call	0x62e8	; 0x62e8 <_ZN6StringaSEPKc>
    
		displayLCD(righeDisplay,stato_procedura,100);     
    13dc:	60 91 cd 08 	lds	r22, 0x08CD	; 0x8008cd <stato_procedura>
    13e0:	70 91 ce 08 	lds	r23, 0x08CE	; 0x8008ce <stato_procedura+0x1>
    13e4:	44 e6       	ldi	r20, 0x64	; 100
    13e6:	50 e0       	ldi	r21, 0x00	; 0
    13e8:	87 e7       	ldi	r24, 0x77	; 119
    13ea:	98 e0       	ldi	r25, 0x08	; 8
    13ec:	29 d9       	rcall	.-3502   	; 0x640 <_Z10displayLCDP6Stringii>
		_delay_ms(10);
		avanzaStato(TinputTarga);
		/*****************************************/

		/*****************************************************/
		String ATe = "ERRORE";
    13ee:	61 ec       	ldi	r22, 0xC1	; 193
    13f0:	71 e0       	ldi	r23, 0x01	; 1
    13f2:	ce 01       	movw	r24, r28
    13f4:	46 96       	adiw	r24, 0x16	; 22
    13f6:	0e 94 f5 30 	call	0x61ea	; 0x61ea <_ZN6StringC1EPKc>
		if (!alreadyTimbrata) {ATe = GetCodeRfidATe(); Buzzer(2,100);}
    13fa:	80 91 0c 09 	lds	r24, 0x090C	; 0x80090c <alreadyTimbrata>
    13fe:	81 11       	cpse	r24, r1
    1400:	14 c0       	rjmp	.+40     	; 0x142a <loop+0x17e>
    1402:	ce 01       	movw	r24, r28
    1404:	01 96       	adiw	r24, 0x01	; 1
    1406:	bd da       	rcall	.-2694   	; 0x982 <_Z14GetCodeRfidATev>
    1408:	be 01       	movw	r22, r28
    140a:	6f 5f       	subi	r22, 0xFF	; 255
    140c:	7f 4f       	sbci	r23, 0xFF	; 255
    140e:	ce 01       	movw	r24, r28
    1410:	46 96       	adiw	r24, 0x16	; 22
    1412:	0e 94 69 31 	call	0x62d2	; 0x62d2 <_ZN6StringaSEOS_>
    1416:	ce 01       	movw	r24, r28
    1418:	01 96       	adiw	r24, 0x01	; 1
    141a:	0e 94 8e 30 	call	0x611c	; 0x611c <_ZN6StringD1Ev>
    141e:	44 e6       	ldi	r20, 0x64	; 100
    1420:	50 e0       	ldi	r21, 0x00	; 0
    1422:	60 e0       	ldi	r22, 0x00	; 0
    1424:	70 e0       	ldi	r23, 0x00	; 0
    1426:	82 e0       	ldi	r24, 0x02	; 2
    1428:	07 d8       	rcall	.-4082   	; 0x438 <_Z6Buzzerhm>
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
    142a:	61 ec       	ldi	r22, 0xC1	; 193
    142c:	71 e0       	ldi	r23, 0x01	; 1
    142e:	ce 01       	movw	r24, r28
    1430:	46 96       	adiw	r24, 0x16	; 22
    1432:	0e 94 aa 32 	call	0x6554	; 0x6554 <_ZNK6String6equalsEPKc>
            
        if ((ATe != "ERRORE") && (BIT_IS_CLEAR(PORTC,4)))
    1436:	81 11       	cpse	r24, r1
    1438:	02 c0       	rjmp	.+4      	; 0x143e <loop+0x192>
    143a:	44 9b       	sbis	0x08, 4	; 8
    143c:	18 c4       	rjmp	.+2096   	; 0x1c6e <loop+0x9c2>
                                  
          // Effettua chiamata REST per validare CARD NFC
          // Se la CARD è valida memorizza in memoria l'operazione e prosegui
          // Altrimenti Memorizza in Memoria e Azzera la procedura. // DA IMPLEMENTARE
     
        if (GetAteValidation(80,serverATE,clientATE,ATe)) 
    143e:	be 01       	movw	r22, r28
    1440:	6a 5e       	subi	r22, 0xEA	; 234
    1442:	7f 4f       	sbci	r23, 0xFF	; 255
    1444:	ce 01       	movw	r24, r28
    1446:	0e 96       	adiw	r24, 0x0e	; 14
    1448:	0e 94 61 31 	call	0x62c2	; 0x62c2 <_ZN6StringC1ERKS_>
#ifdef BIN // Prevent warnings if BIN is previously defined in "iotnx4.h" or similar
#undef BIN
#endif
#define BIN 2

class Print
    144c:	80 91 47 08 	lds	r24, 0x0847	; 0x800847 <clientATE+0x2>
    1450:	90 91 48 08 	lds	r25, 0x0848	; 0x800848 <clientATE+0x3>
    1454:	9c 83       	std	Y+4, r25	; 0x04
    1456:	8b 83       	std	Y+3, r24	; 0x03
    SKIP_WHITESPACE // Only tabs, spaces, line feeds & carriage returns are skipped.
};

#define NO_IGNORE_CHAR  '\x01' // a char not found in a valid ASCII numeric field

class Stream : public Print
    1458:	80 91 49 08 	lds	r24, 0x0849	; 0x800849 <clientATE+0x4>
    145c:	90 91 4a 08 	lds	r25, 0x084A	; 0x80084a <clientATE+0x5>
    1460:	a0 91 4b 08 	lds	r26, 0x084B	; 0x80084b <clientATE+0x6>
    1464:	b0 91 4c 08 	lds	r27, 0x084C	; 0x80084c <clientATE+0x7>
    1468:	8d 83       	std	Y+5, r24	; 0x05
    146a:	9e 83       	std	Y+6, r25	; 0x06
    146c:	af 83       	std	Y+7, r26	; 0x07
    146e:	b8 87       	std	Y+8, r27	; 0x08
    1470:	80 91 4d 08 	lds	r24, 0x084D	; 0x80084d <clientATE+0x8>
    1474:	90 91 4e 08 	lds	r25, 0x084E	; 0x80084e <clientATE+0x9>
    1478:	a0 91 4f 08 	lds	r26, 0x084F	; 0x80084f <clientATE+0xa>
    147c:	b0 91 50 08 	lds	r27, 0x0850	; 0x800850 <clientATE+0xb>
    1480:	89 87       	std	Y+9, r24	; 0x09
    1482:	9a 87       	std	Y+10, r25	; 0x0a
    1484:	ab 87       	std	Y+11, r26	; 0x0b
    1486:	bc 87       	std	Y+12, r27	; 0x0c
#include "Arduino.h"	
#include "Print.h"
#include "Client.h"
#include "IPAddress.h"

class EthernetClient : public Client {
    1488:	89 e7       	ldi	r24, 0x79	; 121
    148a:	97 e0       	ldi	r25, 0x07	; 7
    148c:	9a 83       	std	Y+2, r25	; 0x02
    148e:	89 83       	std	Y+1, r24	; 0x01
    1490:	80 91 51 08 	lds	r24, 0x0851	; 0x800851 <clientATE+0xc>
    1494:	8d 87       	std	Y+13, r24	; 0x0d
    1496:	9e 01       	movw	r18, r28
    1498:	22 5f       	subi	r18, 0xF2	; 242
    149a:	3f 4f       	sbci	r19, 0xFF	; 255
    149c:	ae 01       	movw	r20, r28
    149e:	4f 5f       	subi	r20, 0xFF	; 255
    14a0:	5f 4f       	sbci	r21, 0xFF	; 255
    14a2:	63 e4       	ldi	r22, 0x43	; 67
    14a4:	71 e0       	ldi	r23, 0x01	; 1
    14a6:	80 e5       	ldi	r24, 0x50	; 80
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	1c db       	rcall	.-2504   	; 0xae4 <_Z16GetAteValidationiPc14EthernetClient6String>
    14ac:	18 2f       	mov	r17, r24
    14ae:	ce 01       	movw	r24, r28
    14b0:	0e 96       	adiw	r24, 0x0e	; 14
    14b2:	0e 94 8e 30 	call	0x611c	; 0x611c <_ZN6StringD1Ev>
    14b6:	11 23       	and	r17, r17
    14b8:	59 f1       	breq	.+86     	; 0x1510 <loop+0x264>
        { 
            SET_BIT(PORTC,PC4);
    14ba:	44 9a       	sbi	0x08, 4	; 8
            Buzzer(1,400); 
    14bc:	40 e9       	ldi	r20, 0x90	; 144
    14be:	51 e0       	ldi	r21, 0x01	; 1
    14c0:	60 e0       	ldi	r22, 0x00	; 0
    14c2:	70 e0       	ldi	r23, 0x00	; 0
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	0e 94 1c 02 	call	0x438	; 0x438 <_Z6Buzzerhm>
//             righeDisplay[1] =  "****** ESITO *****";
//             righeDisplay[2] =  "";
//             righeDisplay[3] = "Utente Riconosciuto";
			
			righeDisplay[1] =  "****** TARGA ******";
    14ca:	6f eb       	ldi	r22, 0xBF	; 191
    14cc:	74 e0       	ldi	r23, 0x04	; 4
    14ce:	8d e7       	ldi	r24, 0x7D	; 125
    14d0:	98 e0       	ldi	r25, 0x08	; 8
    14d2:	0e 94 74 31 	call	0x62e8	; 0x62e8 <_ZN6StringaSEPKc>
			righeDisplay[2] =  "";
    14d6:	64 e8       	ldi	r22, 0x84	; 132
    14d8:	71 e0       	ldi	r23, 0x01	; 1
    14da:	83 e8       	ldi	r24, 0x83	; 131
    14dc:	98 e0       	ldi	r25, 0x08	; 8
    14de:	0e 94 74 31 	call	0x62e8	; 0x62e8 <_ZN6StringaSEPKc>
			righeDisplay[3] = "TARGA:";
    14e2:	63 ed       	ldi	r22, 0xD3	; 211
    14e4:	74 e0       	ldi	r23, 0x04	; 4
    14e6:	89 e8       	ldi	r24, 0x89	; 137
    14e8:	98 e0       	ldi	r25, 0x08	; 8
    14ea:	0e 94 74 31 	call	0x62e8	; 0x62e8 <_ZN6StringaSEPKc>
            
            displayLCD(righeDisplay,stato_procedura,10);   
    14ee:	60 91 cd 08 	lds	r22, 0x08CD	; 0x8008cd <stato_procedura>
    14f2:	70 91 ce 08 	lds	r23, 0x08CE	; 0x8008ce <stato_procedura+0x1>
    14f6:	4a e0       	ldi	r20, 0x0A	; 10
    14f8:	50 e0       	ldi	r21, 0x00	; 0
    14fa:	87 e7       	ldi	r24, 0x77	; 119
    14fc:	98 e0       	ldi	r25, 0x08	; 8
    14fe:	a0 d8       	rcall	.-3776   	; 0x640 <_Z10displayLCDP6Stringii>
    1500:	3f ef       	ldi	r19, 0xFF	; 255
    1502:	81 ee       	ldi	r24, 0xE1	; 225
    1504:	94 e0       	ldi	r25, 0x04	; 4
    1506:	31 50       	subi	r19, 0x01	; 1
    1508:	80 40       	sbci	r24, 0x00	; 0
    150a:	90 40       	sbci	r25, 0x00	; 0
    150c:	e1 f7       	brne	.-8      	; 0x1506 <loop+0x25a>
    150e:	29 c0       	rjmp	.+82     	; 0x1562 <loop+0x2b6>
			_delay_ms(100);         
            avanzaStato(TinputTarga); 
          } 
         else 
          { 
            Buzzer(3,200);
    1510:	48 ec       	ldi	r20, 0xC8	; 200
    1512:	50 e0       	ldi	r21, 0x00	; 0
    1514:	60 e0       	ldi	r22, 0x00	; 0
    1516:	70 e0       	ldi	r23, 0x00	; 0
    1518:	83 e0       	ldi	r24, 0x03	; 3
    151a:	0e 94 1c 02 	call	0x438	; 0x438 <_Z6Buzzerhm>
//             righeDisplay[1] =  "****** ESITO *****";
//             righeDisplay[2] =  "";
//             righeDisplay[3] = "Utente Sconosciuto";
			righeDisplay[1] =  "****** TARGA ******";
    151e:	6f eb       	ldi	r22, 0xBF	; 191
    1520:	74 e0       	ldi	r23, 0x04	; 4
    1522:	8d e7       	ldi	r24, 0x7D	; 125
    1524:	98 e0       	ldi	r25, 0x08	; 8
    1526:	0e 94 74 31 	call	0x62e8	; 0x62e8 <_ZN6StringaSEPKc>
			righeDisplay[2] =  "";
    152a:	64 e8       	ldi	r22, 0x84	; 132
    152c:	71 e0       	ldi	r23, 0x01	; 1
    152e:	83 e8       	ldi	r24, 0x83	; 131
    1530:	98 e0       	ldi	r25, 0x08	; 8
    1532:	0e 94 74 31 	call	0x62e8	; 0x62e8 <_ZN6StringaSEPKc>
			righeDisplay[3] = "TARGA:";
    1536:	63 ed       	ldi	r22, 0xD3	; 211
    1538:	74 e0       	ldi	r23, 0x04	; 4
    153a:	89 e8       	ldi	r24, 0x89	; 137
    153c:	98 e0       	ldi	r25, 0x08	; 8
    153e:	0e 94 74 31 	call	0x62e8	; 0x62e8 <_ZN6StringaSEPKc>
            displayLCD(righeDisplay,stato_procedura,10);       
    1542:	60 91 cd 08 	lds	r22, 0x08CD	; 0x8008cd <stato_procedura>
    1546:	70 91 ce 08 	lds	r23, 0x08CE	; 0x8008ce <stato_procedura+0x1>
    154a:	4a e0       	ldi	r20, 0x0A	; 10
    154c:	50 e0       	ldi	r21, 0x00	; 0
    154e:	87 e7       	ldi	r24, 0x77	; 119
    1550:	98 e0       	ldi	r25, 0x08	; 8
    1552:	76 d8       	rcall	.-3860   	; 0x640 <_Z10displayLCDP6Stringii>
    1554:	2f ef       	ldi	r18, 0xFF	; 255
    1556:	31 ee       	ldi	r19, 0xE1	; 225
    1558:	84 e0       	ldi	r24, 0x04	; 4
    155a:	21 50       	subi	r18, 0x01	; 1
    155c:	30 40       	sbci	r19, 0x00	; 0
    155e:	80 40       	sbci	r24, 0x00	; 0
    1560:	e1 f7       	brne	.-8      	; 0x155a <loop+0x2ae>
    1562:	00 c0       	rjmp	.+0      	; 0x1564 <loop+0x2b8>
			_delay_ms(100);     
            avanzaStato(TinputTarga);
    1564:	00 00       	nop
    1566:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <TinputTarga>
    156a:	70 91 23 01 	lds	r23, 0x0123	; 0x800123 <TinputTarga+0x1>
    156e:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <TinputTarga+0x2>
    1572:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <TinputTarga+0x3>
    1576:	04 d9       	rcall	.-3576   	; 0x780 <_Z11avanzaStatom>
		_delay_ms(10);
		avanzaStato(TinputTarga);
		/*****************************************/

		/*****************************************************/
		String ATe = "ERRORE";
    1578:	ce 01       	movw	r24, r28
    157a:	46 96       	adiw	r24, 0x16	; 22
    157c:	80 c1       	rjmp	.+768    	; 0x187e <loop+0x5d2>
          /*****************************************************/		  		  
    }
    break;
    case 2:
    {   
	   disable_ETH();
    157e:	0e 94 94 01 	call	0x328	; 0x328 <_ZL11disable_ETHv>
    1582:	8f e1       	ldi	r24, 0x1F	; 31
    1584:	9e e4       	ldi	r25, 0x4E	; 78
    1586:	01 97       	sbiw	r24, 0x01	; 1
    1588:	f1 f7       	brne	.-4      	; 0x1586 <loop+0x2da>
    158a:	00 c0       	rjmp	.+0      	; 0x158c <loop+0x2e0>
    158c:	00 00       	nop
	   _delay_ms(5);
	   enable_ETH();
    158e:	0e 94 92 01 	call	0x324	; 0x324 <_ZL10enable_ETHv>
      // da commentare
      // Carburante = "D"; // Simulo Abilitazione Diesel
      // da commentare
      // Carburante = "B"; // Simulo Abilitazione Benzina
	  /*****************************************************************/
	  gpio.setCONFREG(0x3C);
    1592:	6c e3       	ldi	r22, 0x3C	; 60
    1594:	8e e1       	ldi	r24, 0x1E	; 30
    1596:	98 e0       	ldi	r25, 0x08	; 8
    1598:	0e 94 32 13 	call	0x2664	; 0x2664 <_ZN7PCA953410setCONFREGEh>
	  uint8_t c = gpio.Read_IP_REGISTER();
    159c:	8e e1       	ldi	r24, 0x1E	; 30
    159e:	98 e0       	ldi	r25, 0x08	; 8
    15a0:	0e 94 49 13 	call	0x2692	; 0x2692 <_ZN7PCA953416Read_IP_REGISTEREv>
    15a4:	08 2f       	mov	r16, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    15a6:	42 e0       	ldi	r20, 0x02	; 2
    15a8:	be 01       	movw	r22, r28
    15aa:	6a 5e       	subi	r22, 0xEA	; 234
    15ac:	7f 4f       	sbci	r23, 0xFF	; 255
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	0e 94 fe 36 	call	0x6dfc	; 0x6dfc <__itoa_ncheck>
	  char buf[8];
	  itoa(c,buf,2);
	  gpio.setCONFREG(0xC3);
    15b4:	63 ec       	ldi	r22, 0xC3	; 195
    15b6:	8e e1       	ldi	r24, 0x1E	; 30
    15b8:	98 e0       	ldi	r25, 0x08	; 8
    15ba:	0e 94 32 13 	call	0x2664	; 0x2664 <_ZN7PCA953410setCONFREGEh>
	  uint8_t r = gpio.Read_IP_REGISTER();
    15be:	8e e1       	ldi	r24, 0x1E	; 30
    15c0:	98 e0       	ldi	r25, 0x08	; 8
    15c2:	0e 94 49 13 	call	0x2692	; 0x2692 <_ZN7PCA953416Read_IP_REGISTEREv>
    15c6:	18 2f       	mov	r17, r24
    15c8:	42 e0       	ldi	r20, 0x02	; 2
    15ca:	be 01       	movw	r22, r28
    15cc:	62 5f       	subi	r22, 0xF2	; 242
    15ce:	7f 4f       	sbci	r23, 0xFF	; 255
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	0e 94 fe 36 	call	0x6dfc	; 0x6dfc <__itoa_ncheck>
	  char bufr[8];
	  itoa(r,bufr,2);
	  char ris[8];
	  uint8_t z = (r ^ c);
	  itoa(z,ris,2);
    15d6:	10 27       	eor	r17, r16
    15d8:	01 2f       	mov	r16, r17
    15da:	10 e0       	ldi	r17, 0x00	; 0
    15dc:	42 e0       	ldi	r20, 0x02	; 2
    15de:	be 01       	movw	r22, r28
    15e0:	6f 5f       	subi	r22, 0xFF	; 255
    15e2:	7f 4f       	sbci	r23, 0xFF	; 255
    15e4:	c8 01       	movw	r24, r16
    15e6:	0e 94 fe 36 	call	0x6dfc	; 0x6dfc <__itoa_ncheck>
	  
	  char T = getCharKeypad(int(z));
    15ea:	c8 01       	movw	r24, r16
    15ec:	0e 94 3a 02 	call	0x474	; 0x474 <_Z13getCharKeypadi>
    15f0:	9f ef       	ldi	r25, 0xFF	; 255
    15f2:	21 ee       	ldi	r18, 0xE1	; 225
    15f4:	34 e0       	ldi	r19, 0x04	; 4
    15f6:	91 50       	subi	r25, 0x01	; 1
    15f8:	20 40       	sbci	r18, 0x00	; 0
    15fa:	30 40       	sbci	r19, 0x00	; 0
    15fc:	e1 f7       	brne	.-8      	; 0x15f6 <loop+0x34a>
    15fe:	00 c0       	rjmp	.+0      	; 0x1600 <loop+0x354>
    1600:	00 00       	nop
	  _delay_ms(100);
	  
	  switch (T) {
    1602:	81 34       	cpi	r24, 0x41	; 65
    1604:	61 f0       	breq	.+24     	; 0x161e <loop+0x372>
    1606:	8e 34       	cpi	r24, 0x4E	; 78
    1608:	19 f0       	breq	.+6      	; 0x1610 <loop+0x364>
    160a:	83 32       	cpi	r24, 0x23	; 35
    160c:	99 f5       	brne	.+102    	; 0x1674 <loop+0x3c8>
    160e:	16 c0       	rjmp	.+44     	; 0x163c <loop+0x390>
		  case ('N'): {
			  Serial.print("NIENTE");
    1610:	6a ed       	ldi	r22, 0xDA	; 218
    1612:	74 e0       	ldi	r23, 0x04	; 4
    1614:	8c e7       	ldi	r24, 0x7C	; 124
    1616:	9a e0       	ldi	r25, 0x0A	; 10
    1618:	0e 94 34 2e 	call	0x5c68	; 0x5c68 <_ZN5Print5printEPKc>
		  }
		  break;
    161c:	3b c0       	rjmp	.+118    	; 0x1694 <loop+0x3e8>
		  case ('A'): {			  
				  TARGA = "";
    161e:	64 e8       	ldi	r22, 0x84	; 132
    1620:	71 e0       	ldi	r23, 0x01	; 1
    1622:	81 e2       	ldi	r24, 0x21	; 33
    1624:	98 e0       	ldi	r25, 0x08	; 8
    1626:	0e 94 74 31 	call	0x62e8	; 0x62e8 <_ZN6StringaSEPKc>
				  avanzaStato(TinputTarga);			  
    162a:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <TinputTarga>
    162e:	70 91 23 01 	lds	r23, 0x0123	; 0x800123 <TinputTarga+0x1>
    1632:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <TinputTarga+0x2>
    1636:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <TinputTarga+0x3>
    163a:	a2 d8       	rcall	.-3772   	; 0x780 <_Z11avanzaStatom>
		  }
		  case ('#'): {			  			  
			  if (TARGA.length() == 5) {	
    163c:	80 91 25 08 	lds	r24, 0x0825	; 0x800825 <TARGA+0x4>
    1640:	90 91 26 08 	lds	r25, 0x0826	; 0x800826 <TARGA+0x5>
    1644:	05 97       	sbiw	r24, 0x05	; 5
    1646:	31 f5       	brne	.+76     	; 0x1694 <loop+0x3e8>
				mezzo.TARGA = TARGA;
    1648:	61 e2       	ldi	r22, 0x21	; 33
    164a:	78 e0       	ldi	r23, 0x08	; 8
    164c:	8c e1       	ldi	r24, 0x1C	; 28
    164e:	99 e0       	ldi	r25, 0x09	; 9
    1650:	0e 94 4c 31 	call	0x6298	; 0x6298 <_ZN6StringaSERKS_>
				RaccoltaDati[1] = mezzo.TARGA;				
    1654:	6c e1       	ldi	r22, 0x1C	; 28
    1656:	79 e0       	ldi	r23, 0x09	; 9
    1658:	87 ea       	ldi	r24, 0xA7	; 167
    165a:	98 e0       	ldi	r25, 0x08	; 8
    165c:	0e 94 4c 31 	call	0x6298	; 0x6298 <_ZN6StringaSERKS_>
				avanzaStato(TinputTarga);
    1660:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <TinputTarga>
    1664:	70 91 23 01 	lds	r23, 0x0123	; 0x800123 <TinputTarga+0x1>
    1668:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <TinputTarga+0x2>
    166c:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <TinputTarga+0x3>
    1670:	87 d8       	rcall	.-3826   	; 0x780 <_Z11avanzaStatom>
    1672:	10 c0       	rjmp	.+32     	; 0x1694 <loop+0x3e8>
			  }
		  }
		  break;
		  default:  {
			  TARGA += String(T);			  
    1674:	68 2f       	mov	r22, r24
    1676:	ce 01       	movw	r24, r28
    1678:	4e 96       	adiw	r24, 0x1e	; 30
    167a:	0e 94 89 31 	call	0x6312	; 0x6312 <_ZN6StringC1Ec>
	unsigned char concat(double num);
	unsigned char concat(const __FlashStringHelper * str);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    167e:	be 01       	movw	r22, r28
    1680:	62 5e       	subi	r22, 0xE2	; 226
    1682:	7f 4f       	sbci	r23, 0xFF	; 255
    1684:	81 e2       	ldi	r24, 0x21	; 33
    1686:	98 e0       	ldi	r25, 0x08	; 8
    1688:	0e 94 50 32 	call	0x64a0	; 0x64a0 <_ZN6String6concatERKS_>
    168c:	ce 01       	movw	r24, r28
    168e:	4e 96       	adiw	r24, 0x1e	; 30
    1690:	0e 94 8e 30 	call	0x611c	; 0x611c <_ZN6StringD1Ev>
		  }
		  break;
      }
	  
	  righeDisplay[1] =  "****** TARGA ******";
    1694:	6f eb       	ldi	r22, 0xBF	; 191
    1696:	74 e0       	ldi	r23, 0x04	; 4
    1698:	8d e7       	ldi	r24, 0x7D	; 125
    169a:	98 e0       	ldi	r25, 0x08	; 8
    169c:	0e 94 74 31 	call	0x62e8	; 0x62e8 <_ZN6StringaSEPKc>
	  righeDisplay[2] =  "";
    16a0:	64 e8       	ldi	r22, 0x84	; 132
    16a2:	71 e0       	ldi	r23, 0x01	; 1
    16a4:	83 e8       	ldi	r24, 0x83	; 131
    16a6:	98 e0       	ldi	r25, 0x08	; 8
    16a8:	0e 94 74 31 	call	0x62e8	; 0x62e8 <_ZN6StringaSEPKc>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    16ac:	63 ed       	ldi	r22, 0xD3	; 211
    16ae:	74 e0       	ldi	r23, 0x04	; 4
    16b0:	ce 01       	movw	r24, r28
    16b2:	4e 96       	adiw	r24, 0x1e	; 30
    16b4:	0e 94 f5 30 	call	0x61ea	; 0x61ea <_ZN6StringC1EPKc>
	  righeDisplay[3] = "TARGA:" + TARGA;
    16b8:	61 e2       	ldi	r22, 0x21	; 33
    16ba:	78 e0       	ldi	r23, 0x08	; 8
    16bc:	ce 01       	movw	r24, r28
    16be:	4e 96       	adiw	r24, 0x1e	; 30
    16c0:	0e 94 76 32 	call	0x64ec	; 0x64ec <_ZplRK15StringSumHelperRK6String>
    16c4:	bc 01       	movw	r22, r24
    16c6:	89 e8       	ldi	r24, 0x89	; 137
    16c8:	98 e0       	ldi	r25, 0x08	; 8
    16ca:	0e 94 4c 31 	call	0x6298	; 0x6298 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    16ce:	ce 01       	movw	r24, r28
    16d0:	4e 96       	adiw	r24, 0x1e	; 30
    16d2:	0e 94 8e 30 	call	0x611c	; 0x611c <_ZN6StringD1Ev>
	  displayLCD(righeDisplay,stato_procedura,10);
    16d6:	60 91 cd 08 	lds	r22, 0x08CD	; 0x8008cd <stato_procedura>
    16da:	70 91 ce 08 	lds	r23, 0x08CE	; 0x8008ce <stato_procedura+0x1>
    16de:	4a e0       	ldi	r20, 0x0A	; 10
    16e0:	50 e0       	ldi	r21, 0x00	; 0
    16e2:	87 e7       	ldi	r24, 0x77	; 119
    16e4:	98 e0       	ldi	r25, 0x08	; 8
    16e6:	0e 94 20 03 	call	0x640	; 0x640 <_Z10displayLCDP6Stringii>
	  		 
    }
    break;
    16ea:	83 c2       	rjmp	.+1286   	; 0x1bf2 <loop+0x946>
    case 3:
    {  
	  if (TARGA.length() == 5) {
    16ec:	80 91 25 08 	lds	r24, 0x0825	; 0x800825 <TARGA+0x4>
    16f0:	90 91 26 08 	lds	r25, 0x0826	; 0x800826 <TARGA+0x5>
    16f4:	05 97       	sbiw	r24, 0x05	; 5
    16f6:	b9 f4       	brne	.+46     	; 0x1726 <loop+0x47a>
		  mezzo.Carb = "";
    16f8:	64 e8       	ldi	r22, 0x84	; 132
    16fa:	71 e0       	ldi	r23, 0x01	; 1
    16fc:	86 e1       	ldi	r24, 0x16	; 22
    16fe:	99 e0       	ldi	r25, 0x09	; 9
    1700:	0e 94 74 31 	call	0x62e8	; 0x62e8 <_ZN6StringaSEPKc>
		  mezzo.TARGA = TARGA;
    1704:	61 e2       	ldi	r22, 0x21	; 33
    1706:	78 e0       	ldi	r23, 0x08	; 8
    1708:	8c e1       	ldi	r24, 0x1C	; 28
    170a:	99 e0       	ldi	r25, 0x09	; 9
    170c:	0e 94 4c 31 	call	0x6298	; 0x6298 <_ZN6StringaSERKS_>
		  mezzo.KM = 0;
    1710:	10 92 22 09 	sts	0x0922, r1	; 0x800922 <mezzo+0xc>
		  avanzaStato(TselDistributore); 
    1714:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <TselDistributore>
    1718:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <TselDistributore+0x1>
    171c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <TselDistributore+0x2>
    1720:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <TselDistributore+0x3>
	  }	  else
	  {
		  String mezzoString = leggiTAG_Mezzo(false); // con TRUE scrive sul blocco 4 della card NFC DEL MEZZO
    1724:	ea c0       	rjmp	.+468    	; 0x18fa <loop+0x64e>
    1726:	60 e0       	ldi	r22, 0x00	; 0
    1728:	ce 01       	movw	r24, r28
    172a:	0e 96       	adiw	r24, 0x0e	; 14
    172c:	47 d8       	rcall	.-3954   	; 0x7bc <_Z14leggiTAG_Mezzob>
    172e:	8f e3       	ldi	r24, 0x3F	; 63
    1730:	9c e9       	ldi	r25, 0x9C	; 156
    1732:	01 97       	sbiw	r24, 0x01	; 1
    1734:	f1 f7       	brne	.-4      	; 0x1732 <loop+0x486>
    1736:	00 c0       	rjmp	.+0      	; 0x1738 <loop+0x48c>
    1738:	00 00       	nop
		  _delay_ms(10);

		  Serial.println(mezzoString);
    173a:	be 01       	movw	r22, r28
    173c:	62 5f       	subi	r22, 0xF2	; 242
    173e:	7f 4f       	sbci	r23, 0xFF	; 255
    1740:	8c e7       	ldi	r24, 0x7C	; 124
    1742:	9a e0       	ldi	r25, 0x0A	; 10
    1744:	0e 94 4f 2e 	call	0x5c9e	; 0x5c9e <_ZN5Print7printlnERK6String>
	int indexOf( const String &str, unsigned int fromIndex ) const;
	int lastIndexOf( char ch ) const;
	int lastIndexOf( char ch, unsigned int fromIndex ) const;
	int lastIndexOf( const String &str ) const;
	int lastIndexOf( const String &str, unsigned int fromIndex ) const;
	String substring( unsigned int beginIndex ) const { return substring(beginIndex, len); };
    1748:	2a 89       	ldd	r18, Y+18	; 0x12
    174a:	3b 89       	ldd	r19, Y+19	; 0x13
    174c:	45 e0       	ldi	r20, 0x05	; 5
    174e:	50 e0       	ldi	r21, 0x00	; 0
    1750:	be 01       	movw	r22, r28
    1752:	62 5f       	subi	r22, 0xF2	; 242
    1754:	7f 4f       	sbci	r23, 0xFF	; 255
    1756:	ce 01       	movw	r24, r28
    1758:	01 96       	adiw	r24, 0x01	; 1
    175a:	0e 94 c8 32 	call	0x6590	; 0x6590 <_ZNK6String9substringEjj>
      
		  mezzo.Carb = mezzoString.substring(5);
    175e:	be 01       	movw	r22, r28
    1760:	6f 5f       	subi	r22, 0xFF	; 255
    1762:	7f 4f       	sbci	r23, 0xFF	; 255
    1764:	86 e1       	ldi	r24, 0x16	; 22
    1766:	99 e0       	ldi	r25, 0x09	; 9
    1768:	0e 94 69 31 	call	0x62d2	; 0x62d2 <_ZN6StringaSEOS_>
    176c:	ce 01       	movw	r24, r28
    176e:	01 96       	adiw	r24, 0x01	; 1
    1770:	0e 94 8e 30 	call	0x611c	; 0x611c <_ZN6StringD1Ev>
		  mezzo.TARGA = mezzoString.substring(0,5);
    1774:	25 e0       	ldi	r18, 0x05	; 5
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	40 e0       	ldi	r20, 0x00	; 0
    177a:	50 e0       	ldi	r21, 0x00	; 0
    177c:	be 01       	movw	r22, r28
    177e:	62 5f       	subi	r22, 0xF2	; 242
    1780:	7f 4f       	sbci	r23, 0xFF	; 255
    1782:	ce 01       	movw	r24, r28
    1784:	01 96       	adiw	r24, 0x01	; 1
    1786:	0e 94 c8 32 	call	0x6590	; 0x6590 <_ZNK6String9substringEjj>
    178a:	be 01       	movw	r22, r28
    178c:	6f 5f       	subi	r22, 0xFF	; 255
    178e:	7f 4f       	sbci	r23, 0xFF	; 255
    1790:	8c e1       	ldi	r24, 0x1C	; 28
    1792:	99 e0       	ldi	r25, 0x09	; 9
    1794:	0e 94 69 31 	call	0x62d2	; 0x62d2 <_ZN6StringaSEOS_>
    1798:	ce 01       	movw	r24, r28
    179a:	01 96       	adiw	r24, 0x01	; 1
    179c:	0e 94 8e 30 	call	0x611c	; 0x611c <_ZN6StringD1Ev>
		  mezzo.KM = 0;
    17a0:	10 92 22 09 	sts	0x0922, r1	; 0x800922 <mezzo+0xc>
      
		  righeDisplay[1] =  "AVVICINA TAG MEZZO";
    17a4:	61 ee       	ldi	r22, 0xE1	; 225
    17a6:	74 e0       	ldi	r23, 0x04	; 4
    17a8:	8d e7       	ldi	r24, 0x7D	; 125
    17aa:	98 e0       	ldi	r25, 0x08	; 8
    17ac:	0e 94 74 31 	call	0x62e8	; 0x62e8 <_ZN6StringaSEPKc>
		  righeDisplay[2] =  "";
    17b0:	64 e8       	ldi	r22, 0x84	; 132
    17b2:	71 e0       	ldi	r23, 0x01	; 1
    17b4:	83 e8       	ldi	r24, 0x83	; 131
    17b6:	98 e0       	ldi	r25, 0x08	; 8
    17b8:	0e 94 74 31 	call	0x62e8	; 0x62e8 <_ZN6StringaSEPKc>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    17bc:	64 ef       	ldi	r22, 0xF4	; 244
    17be:	74 e0       	ldi	r23, 0x04	; 4
    17c0:	ce 01       	movw	r24, r28
    17c2:	01 96       	adiw	r24, 0x01	; 1
    17c4:	0e 94 f5 30 	call	0x61ea	; 0x61ea <_ZN6StringC1EPKc>
		  righeDisplay[3] = "TARGA: "+  mezzo.TARGA;
    17c8:	6c e1       	ldi	r22, 0x1C	; 28
    17ca:	79 e0       	ldi	r23, 0x09	; 9
    17cc:	ce 01       	movw	r24, r28
    17ce:	01 96       	adiw	r24, 0x01	; 1
    17d0:	0e 94 76 32 	call	0x64ec	; 0x64ec <_ZplRK15StringSumHelperRK6String>
    17d4:	bc 01       	movw	r22, r24
    17d6:	89 e8       	ldi	r24, 0x89	; 137
    17d8:	98 e0       	ldi	r25, 0x08	; 8
    17da:	0e 94 4c 31 	call	0x6298	; 0x6298 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    17de:	ce 01       	movw	r24, r28
    17e0:	01 96       	adiw	r24, 0x01	; 1
    17e2:	0e 94 8e 30 	call	0x611c	; 0x611c <_ZN6StringD1Ev>
		  displayLCD(righeDisplay,stato_procedura,10);
    17e6:	60 91 cd 08 	lds	r22, 0x08CD	; 0x8008cd <stato_procedura>
    17ea:	70 91 ce 08 	lds	r23, 0x08CE	; 0x8008ce <stato_procedura+0x1>
    17ee:	4a e0       	ldi	r20, 0x0A	; 10
    17f0:	50 e0       	ldi	r21, 0x00	; 0
    17f2:	87 e7       	ldi	r24, 0x77	; 119
    17f4:	98 e0       	ldi	r25, 0x08	; 8
    17f6:	0e 94 20 03 	call	0x640	; 0x640 <_Z10displayLCDP6Stringii>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    17fa:	6c ef       	ldi	r22, 0xFC	; 252
    17fc:	74 e0       	ldi	r23, 0x04	; 4
    17fe:	ce 01       	movw	r24, r28
    1800:	01 96       	adiw	r24, 0x01	; 1
    1802:	0e 94 f5 30 	call	0x61ea	; 0x61ea <_ZN6StringC1EPKc>
	  
	  
		  Serial.println("TIPO CARBURANTE: " + mezzo.Carb);    
    1806:	66 e1       	ldi	r22, 0x16	; 22
    1808:	79 e0       	ldi	r23, 0x09	; 9
    180a:	ce 01       	movw	r24, r28
    180c:	01 96       	adiw	r24, 0x01	; 1
    180e:	0e 94 76 32 	call	0x64ec	; 0x64ec <_ZplRK15StringSumHelperRK6String>
    1812:	bc 01       	movw	r22, r24
    1814:	8c e7       	ldi	r24, 0x7C	; 124
    1816:	9a e0       	ldi	r25, 0x0A	; 10
    1818:	0e 94 4f 2e 	call	0x5c9e	; 0x5c9e <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    181c:	ce 01       	movw	r24, r28
    181e:	01 96       	adiw	r24, 0x01	; 1
    1820:	0e 94 8e 30 	call	0x611c	; 0x611c <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1824:	64 ef       	ldi	r22, 0xF4	; 244
    1826:	74 e0       	ldi	r23, 0x04	; 4
    1828:	ce 01       	movw	r24, r28
    182a:	01 96       	adiw	r24, 0x01	; 1
    182c:	0e 94 f5 30 	call	0x61ea	; 0x61ea <_ZN6StringC1EPKc>
		  Serial.println("TARGA: " + mezzo.TARGA);              
    1830:	6c e1       	ldi	r22, 0x1C	; 28
    1832:	79 e0       	ldi	r23, 0x09	; 9
    1834:	ce 01       	movw	r24, r28
    1836:	01 96       	adiw	r24, 0x01	; 1
    1838:	0e 94 76 32 	call	0x64ec	; 0x64ec <_ZplRK15StringSumHelperRK6String>
    183c:	bc 01       	movw	r22, r24
    183e:	8c e7       	ldi	r24, 0x7C	; 124
    1840:	9a e0       	ldi	r25, 0x0A	; 10
    1842:	0e 94 4f 2e 	call	0x5c9e	; 0x5c9e <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1846:	ce 01       	movw	r24, r28
    1848:	01 96       	adiw	r24, 0x01	; 1
    184a:	0e 94 8e 30 	call	0x611c	; 0x611c <_ZN6StringD1Ev>

		  Carburante = mezzo.Carb;                 
    184e:	66 e1       	ldi	r22, 0x16	; 22
    1850:	79 e0       	ldi	r23, 0x09	; 9
    1852:	8b e9       	ldi	r24, 0x9B	; 155
    1854:	98 e0       	ldi	r25, 0x08	; 8
    1856:	0e 94 4c 31 	call	0x6298	; 0x6298 <_ZN6StringaSERKS_>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    185a:	6e e0       	ldi	r22, 0x0E	; 14
    185c:	75 e0       	ldi	r23, 0x05	; 5
    185e:	86 e1       	ldi	r24, 0x16	; 22
    1860:	99 e0       	ldi	r25, 0x09	; 9
    1862:	0e 94 aa 32 	call	0x6554	; 0x6554 <_ZNK6String6equalsEPKc>
		  if ((mezzo.Carb == "B") || (mezzo.Carb == "D")) {
    1866:	81 11       	cpse	r24, r1
    1868:	6d c2       	rjmp	.+1242   	; 0x1d44 <loop+0xa98>
    186a:	60 e1       	ldi	r22, 0x10	; 16
    186c:	75 e0       	ldi	r23, 0x05	; 5
    186e:	86 e1       	ldi	r24, 0x16	; 22
    1870:	99 e0       	ldi	r25, 0x09	; 9
    1872:	0e 94 aa 32 	call	0x6554	; 0x6554 <_ZNK6String6equalsEPKc>
    1876:	81 11       	cpse	r24, r1
    1878:	65 c2       	rjmp	.+1226   	; 0x1d44 <loop+0xa98>
		  mezzo.TARGA = TARGA;
		  mezzo.KM = 0;
		  avanzaStato(TselDistributore); 
	  }	  else
	  {
		  String mezzoString = leggiTAG_Mezzo(false); // con TRUE scrive sul blocco 4 della card NFC DEL MEZZO
    187a:	ce 01       	movw	r24, r28
    187c:	0e 96       	adiw	r24, 0x0e	; 14
    187e:	0e 94 8e 30 	call	0x611c	; 0x611c <_ZN6StringD1Ev>
    1882:	b7 c1       	rjmp	.+878    	; 0x1bf2 <loop+0x946>
	  }
    }
    break;
    case 4:
    { 
    righeDisplay[1] =  "****** DISTRIBUTORE ******";
    1884:	62 e1       	ldi	r22, 0x12	; 18
    1886:	75 e0       	ldi	r23, 0x05	; 5
    1888:	8d e7       	ldi	r24, 0x7D	; 125
    188a:	98 e0       	ldi	r25, 0x08	; 8
    188c:	0e 94 74 31 	call	0x62e8	; 0x62e8 <_ZN6StringaSEPKc>
    righeDisplay[2] =  "";
    1890:	64 e8       	ldi	r22, 0x84	; 132
    1892:	71 e0       	ldi	r23, 0x01	; 1
    1894:	83 e8       	ldi	r24, 0x83	; 131
    1896:	98 e0       	ldi	r25, 0x08	; 8
    1898:	0e 94 74 31 	call	0x62e8	; 0x62e8 <_ZN6StringaSEPKc>
    righeDisplay[3] = "**** SCEGLI ****";
    189c:	6d e2       	ldi	r22, 0x2D	; 45
    189e:	75 e0       	ldi	r23, 0x05	; 5
    18a0:	89 e8       	ldi	r24, 0x89	; 137
    18a2:	98 e0       	ldi	r25, 0x08	; 8
    18a4:	0e 94 74 31 	call	0x62e8	; 0x62e8 <_ZN6StringaSEPKc>

    displayLCD(righeDisplay,stato_procedura,100);
    18a8:	60 91 cd 08 	lds	r22, 0x08CD	; 0x8008cd <stato_procedura>
    18ac:	70 91 ce 08 	lds	r23, 0x08CE	; 0x8008ce <stato_procedura+0x1>
    18b0:	44 e6       	ldi	r20, 0x64	; 100
    18b2:	50 e0       	ldi	r21, 0x00	; 0
    18b4:	87 e7       	ldi	r24, 0x77	; 119
    18b6:	98 e0       	ldi	r25, 0x08	; 8
    18b8:	0e 94 20 03 	call	0x640	; 0x640 <_Z10displayLCDP6Stringii>
    18bc:	6e e0       	ldi	r22, 0x0E	; 14
    18be:	75 e0       	ldi	r23, 0x05	; 5
    18c0:	86 e1       	ldi	r24, 0x16	; 22
    18c2:	99 e0       	ldi	r25, 0x09	; 9

    // Verifica scelta distributore
    
      if (mezzo.Carb == "B")
    18c4:	0e 94 aa 32 	call	0x6554	; 0x6554 <_ZNK6String6equalsEPKc>
      {
        abilitaPulser('B');
    18c8:	88 23       	and	r24, r24
    18ca:	d1 f0       	breq	.+52     	; 0x1900 <loop+0x654>
    18cc:	82 e4       	ldi	r24, 0x42	; 66
        Rele_Abilitazione2(0,7); // chiudi relè
    18ce:	85 db       	rcall	.-2294   	; 0xfda <_Z13abilitaPulserc>
    18d0:	67 e0       	ldi	r22, 0x07	; 7
    18d2:	70 e0       	ldi	r23, 0x00	; 0
    18d4:	80 e0       	ldi	r24, 0x00	; 0
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	f4 db       	rcall	.-2072   	; 0x10c2 <_Z18Rele_Abilitazione2ii>
        StatoAttuale = "BENZINA";
    18da:	6e e3       	ldi	r22, 0x3E	; 62
    18dc:	75 e0       	ldi	r23, 0x05	; 5
    18de:	87 ed       	ldi	r24, 0xD7	; 215
    18e0:	98 e0       	ldi	r25, 0x08	; 8
    18e2:	0e 94 74 31 	call	0x62e8	; 0x62e8 <_ZN6StringaSEPKc>
		RaccoltaDati[2] = "B";
    18e6:	6e e0       	ldi	r22, 0x0E	; 14
    18e8:	75 e0       	ldi	r23, 0x05	; 5
    18ea:	8d ea       	ldi	r24, 0xAD	; 173
    18ec:	98 e0       	ldi	r25, 0x08	; 8
    18ee:	0e 94 74 31 	call	0x62e8	; 0x62e8 <_ZN6StringaSEPKc>
        avanzaStato(10);
    18f2:	6a e0       	ldi	r22, 0x0A	; 10
    18f4:	70 e0       	ldi	r23, 0x00	; 0
    18f6:	80 e0       	ldi	r24, 0x00	; 0
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	0e 94 c0 03 	call	0x780	; 0x780 <_Z11avanzaStatom>
    18fe:	79 c1       	rjmp	.+754    	; 0x1bf2 <loop+0x946>
    1900:	60 e1       	ldi	r22, 0x10	; 16
    1902:	75 e0       	ldi	r23, 0x05	; 5
    1904:	86 e1       	ldi	r24, 0x16	; 22
    1906:	99 e0       	ldi	r25, 0x09	; 9
      }
      else if (mezzo.Carb == "D")
    1908:	0e 94 aa 32 	call	0x6554	; 0x6554 <_ZNK6String6equalsEPKc>
    190c:	88 23       	and	r24, r24
      {
        abilitaPulser('D');
    190e:	09 f4       	brne	.+2      	; 0x1912 <loop+0x666>
    1910:	70 c1       	rjmp	.+736    	; 0x1bf2 <loop+0x946>
    1912:	84 e4       	ldi	r24, 0x44	; 68
        Rele_Abilitazione1(0,7); // chiudi relè
    1914:	62 db       	rcall	.-2364   	; 0xfda <_Z13abilitaPulserc>
    1916:	67 e0       	ldi	r22, 0x07	; 7
    1918:	70 e0       	ldi	r23, 0x00	; 0
    191a:	80 e0       	ldi	r24, 0x00	; 0
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	96 db       	rcall	.-2260   	; 0x104c <_Z18Rele_Abilitazione1ii>
        StatoAttuale = "GASOLIO";
    1920:	66 e4       	ldi	r22, 0x46	; 70
    1922:	75 e0       	ldi	r23, 0x05	; 5
    1924:	87 ed       	ldi	r24, 0xD7	; 215
    1926:	98 e0       	ldi	r25, 0x08	; 8
    1928:	0e 94 74 31 	call	0x62e8	; 0x62e8 <_ZN6StringaSEPKc>
		RaccoltaDati[2] = "D";
    192c:	60 e1       	ldi	r22, 0x10	; 16
    192e:	75 e0       	ldi	r23, 0x05	; 5
    1930:	dc cf       	rjmp	.-72     	; 0x18ea <loop+0x63e>
    break;
    case 5:
    {             
      // VALIDA MEZZO CON WBSERVICES
      
      impulsi = 0;
    1932:	10 92 cc 08 	sts	0x08CC, r1	; 0x8008cc <impulsi+0x1>
    1936:	10 92 cb 08 	sts	0x08CB, r1	; 0x8008cb <impulsi>
      
      righeDisplay[1] = "**** Distributore ****";
    193a:	6e e4       	ldi	r22, 0x4E	; 78
    193c:	75 e0       	ldi	r23, 0x05	; 5
    193e:	8d e7       	ldi	r24, 0x7D	; 125
    1940:	98 e0       	ldi	r25, 0x08	; 8
    1942:	0e 94 74 31 	call	0x62e8	; 0x62e8 <_ZN6StringaSEPKc>
      righeDisplay[2] =  "";
    1946:	64 e8       	ldi	r22, 0x84	; 132
    1948:	71 e0       	ldi	r23, 0x01	; 1
    194a:	83 e8       	ldi	r24, 0x83	; 131
    194c:	98 e0       	ldi	r25, 0x08	; 8
    194e:	0e 94 74 31 	call	0x62e8	; 0x62e8 <_ZN6StringaSEPKc>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1952:	65 e6       	ldi	r22, 0x65	; 101
    1954:	75 e0       	ldi	r23, 0x05	; 5
    1956:	ce 01       	movw	r24, r28
    1958:	01 96       	adiw	r24, 0x01	; 1
    195a:	0e 94 f5 30 	call	0x61ea	; 0x61ea <_ZN6StringC1EPKc>
      righeDisplay[3] = "***** " + StatoAttuale + " *****";
    195e:	67 ed       	ldi	r22, 0xD7	; 215
    1960:	78 e0       	ldi	r23, 0x08	; 8
    1962:	ce 01       	movw	r24, r28
    1964:	01 96       	adiw	r24, 0x01	; 1
    1966:	0e 94 76 32 	call	0x64ec	; 0x64ec <_ZplRK15StringSumHelperRK6String>
    196a:	6c e6       	ldi	r22, 0x6C	; 108
    196c:	75 e0       	ldi	r23, 0x05	; 5
    196e:	0e 94 87 32 	call	0x650e	; 0x650e <_ZplRK15StringSumHelperPKc>
    1972:	bc 01       	movw	r22, r24
    1974:	89 e8       	ldi	r24, 0x89	; 137
    1976:	98 e0       	ldi	r25, 0x08	; 8
    1978:	0e 94 4c 31 	call	0x6298	; 0x6298 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    197c:	ce 01       	movw	r24, r28
    197e:	01 96       	adiw	r24, 0x01	; 1
    1980:	0e 94 8e 30 	call	0x611c	; 0x611c <_ZN6StringD1Ev>
      
      displayLCD(righeDisplay,stato_procedura,100);
    1984:	60 91 cd 08 	lds	r22, 0x08CD	; 0x8008cd <stato_procedura>
    1988:	70 91 ce 08 	lds	r23, 0x08CE	; 0x8008ce <stato_procedura+0x1>
    198c:	44 e6       	ldi	r20, 0x64	; 100
    198e:	50 e0       	ldi	r21, 0x00	; 0
    1990:	87 e7       	ldi	r24, 0x77	; 119
    1992:	98 e0       	ldi	r25, 0x08	; 8
    1994:	0e 94 20 03 	call	0x640	; 0x640 <_Z10displayLCDP6Stringii>

      avanzaStato(20);
    1998:	64 e1       	ldi	r22, 0x14	; 20
    199a:	70 e0       	ldi	r23, 0x00	; 0
    199c:	80 e0       	ldi	r24, 0x00	; 0
    199e:	90 e0       	ldi	r25, 0x00	; 0
    }
    break;
    case 6:
    { 
    disable_ETH();
    19a0:	ac cf       	rjmp	.-168    	; 0x18fa <loop+0x64e>
    19a2:	0e 94 94 01 	call	0x328	; 0x328 <_ZL11disable_ETHv>
    19a6:	8f e3       	ldi	r24, 0x3F	; 63
    19a8:	9f e1       	ldi	r25, 0x1F	; 31
    19aa:	01 97       	sbiw	r24, 0x01	; 1
    19ac:	f1 f7       	brne	.-4      	; 0x19aa <loop+0x6fe>
    19ae:	00 c0       	rjmp	.+0      	; 0x19b0 <loop+0x704>
    _delay_ms(2);
    enable_ETH();
    19b0:	00 00       	nop
    19b2:	0e 94 92 01 	call	0x324	; 0x324 <_ZL10enable_ETHv>
    
      double lt = impulsiToLitri(impulsi);      
    19b6:	80 91 cb 08 	lds	r24, 0x08CB	; 0x8008cb <impulsi>
    19ba:	90 91 cc 08 	lds	r25, 0x08CC	; 0x8008cc <impulsi+0x1>
    19be:	1b db       	rcall	.-2506   	; 0xff6 <_Z14impulsiToLitrii>
    19c0:	6b 01       	movw	r12, r22
    19c2:	7c 01       	movw	r14, r24
      
      righeDisplay[1] = "LITRI :" + String(lt);
    19c4:	22 e0       	ldi	r18, 0x02	; 2
    19c6:	ab 01       	movw	r20, r22
    19c8:	bc 01       	movw	r22, r24
    19ca:	ce 01       	movw	r24, r28
    19cc:	0e 96       	adiw	r24, 0x0e	; 14
    19ce:	0e 94 f6 31 	call	0x63ec	; 0x63ec <_ZN6StringC1Edh>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    19d2:	63 e7       	ldi	r22, 0x73	; 115
    19d4:	75 e0       	ldi	r23, 0x05	; 5
    19d6:	ce 01       	movw	r24, r28
    19d8:	01 96       	adiw	r24, 0x01	; 1
    19da:	0e 94 f5 30 	call	0x61ea	; 0x61ea <_ZN6StringC1EPKc>
    19de:	be 01       	movw	r22, r28
    19e0:	62 5f       	subi	r22, 0xF2	; 242
    19e2:	7f 4f       	sbci	r23, 0xFF	; 255
    19e4:	ce 01       	movw	r24, r28
    19e6:	01 96       	adiw	r24, 0x01	; 1
    19e8:	0e 94 76 32 	call	0x64ec	; 0x64ec <_ZplRK15StringSumHelperRK6String>
    19ec:	bc 01       	movw	r22, r24
    19ee:	8d e7       	ldi	r24, 0x7D	; 125
    19f0:	98 e0       	ldi	r25, 0x08	; 8
    19f2:	0e 94 4c 31 	call	0x6298	; 0x6298 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    19f6:	ce 01       	movw	r24, r28
    19f8:	01 96       	adiw	r24, 0x01	; 1
    19fa:	0e 94 8e 30 	call	0x611c	; 0x611c <_ZN6StringD1Ev>
    19fe:	ce 01       	movw	r24, r28
    1a00:	0e 96       	adiw	r24, 0x0e	; 14
    1a02:	0e 94 8e 30 	call	0x611c	; 0x611c <_ZN6StringD1Ev>
      righeDisplay[2] = "";     
    1a06:	64 e8       	ldi	r22, 0x84	; 132
    1a08:	71 e0       	ldi	r23, 0x01	; 1
    1a0a:	83 e8       	ldi	r24, 0x83	; 131
    1a0c:	98 e0       	ldi	r25, 0x08	; 8
    1a0e:	0e 94 74 31 	call	0x62e8	; 0x62e8 <_ZN6StringaSEPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1a12:	6b e7       	ldi	r22, 0x7B	; 123
    1a14:	75 e0       	ldi	r23, 0x05	; 5
    1a16:	ce 01       	movw	r24, r28
    1a18:	01 96       	adiw	r24, 0x01	; 1
    1a1a:	0e 94 f5 30 	call	0x61ea	; 0x61ea <_ZN6StringC1EPKc>
      righeDisplay[3] = "Erogazione: " + StatoAttuale;
    1a1e:	67 ed       	ldi	r22, 0xD7	; 215
    1a20:	78 e0       	ldi	r23, 0x08	; 8
    1a22:	ce 01       	movw	r24, r28
    1a24:	01 96       	adiw	r24, 0x01	; 1
    1a26:	0e 94 76 32 	call	0x64ec	; 0x64ec <_ZplRK15StringSumHelperRK6String>
    1a2a:	bc 01       	movw	r22, r24
    1a2c:	89 e8       	ldi	r24, 0x89	; 137
    1a2e:	98 e0       	ldi	r25, 0x08	; 8
    1a30:	0e 94 4c 31 	call	0x6298	; 0x6298 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1a34:	ce 01       	movw	r24, r28
    1a36:	01 96       	adiw	r24, 0x01	; 1
    1a38:	0e 94 8e 30 	call	0x611c	; 0x611c <_ZN6StringD1Ev>
      
      displayLCD(righeDisplay,stato_procedura,100);   
    1a3c:	60 91 cd 08 	lds	r22, 0x08CD	; 0x8008cd <stato_procedura>
    1a40:	70 91 ce 08 	lds	r23, 0x08CE	; 0x8008ce <stato_procedura+0x1>
    1a44:	44 e6       	ldi	r20, 0x64	; 100
    1a46:	50 e0       	ldi	r21, 0x00	; 0
    1a48:	87 e7       	ldi	r24, 0x77	; 119
    1a4a:	98 e0       	ldi	r25, 0x08	; 8
    1a4c:	0e 94 20 03 	call	0x640	; 0x640 <_Z10displayLCDP6Stringii>

      /* CONTATTO PISTOLA DIESEL*/
      
      if ((PINA & _BV(PA1)) && (Carburante == "D"))
    1a50:	01 9b       	sbis	0x00, 1	; 0
    1a52:	08 c0       	rjmp	.+16     	; 0x1a64 <loop+0x7b8>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    1a54:	60 e1       	ldi	r22, 0x10	; 16
    1a56:	75 e0       	ldi	r23, 0x05	; 5
    1a58:	8b e9       	ldi	r24, 0x9B	; 155
    1a5a:	98 e0       	ldi	r25, 0x08	; 8
    1a5c:	0e 94 aa 32 	call	0x6554	; 0x6554 <_ZNK6String6equalsEPKc>
    1a60:	81 11       	cpse	r24, r1
    1a62:	87 c1       	rjmp	.+782    	; 0x1d72 <loop+0xac6>
        avanzaStato(10);
      }
      
      /* CONTATTO PISTOLA BENZINA*/
      
      if  ((PINB & _BV(PB1)) && (Carburante == "B"))
    1a64:	19 9b       	sbis	0x03, 1	; 3
    1a66:	c5 c0       	rjmp	.+394    	; 0x1bf2 <loop+0x946>
    1a68:	6e e0       	ldi	r22, 0x0E	; 14
    1a6a:	75 e0       	ldi	r23, 0x05	; 5
    1a6c:	8b e9       	ldi	r24, 0x9B	; 155
    1a6e:	98 e0       	ldi	r25, 0x08	; 8
    1a70:	0e 94 aa 32 	call	0x6554	; 0x6554 <_ZNK6String6equalsEPKc>
    1a74:	81 11       	cpse	r24, r1
    1a76:	aa c1       	rjmp	.+852    	; 0x1dcc <loop+0xb20>
    1a78:	bc c0       	rjmp	.+376    	; 0x1bf2 <loop+0x946>
      /**************************************
       Control_WIFI(1);
       _delay_ms(2000);
      /**************************************/
      
      righeDisplay[1] =  "";      
    1a7a:	64 e8       	ldi	r22, 0x84	; 132
    1a7c:	71 e0       	ldi	r23, 0x01	; 1
    1a7e:	8d e7       	ldi	r24, 0x7D	; 125
    1a80:	98 e0       	ldi	r25, 0x08	; 8
    1a82:	0e 94 74 31 	call	0x62e8	; 0x62e8 <_ZN6StringaSEPKc>
      righeDisplay[2] = "Invio........";
    1a86:	68 e8       	ldi	r22, 0x88	; 136
    1a88:	75 e0       	ldi	r23, 0x05	; 5
    1a8a:	83 e8       	ldi	r24, 0x83	; 131
    1a8c:	98 e0       	ldi	r25, 0x08	; 8
    1a8e:	0e 94 74 31 	call	0x62e8	; 0x62e8 <_ZN6StringaSEPKc>
      righeDisplay[3] =  "";
    1a92:	64 e8       	ldi	r22, 0x84	; 132
    1a94:	71 e0       	ldi	r23, 0x01	; 1
    1a96:	89 e8       	ldi	r24, 0x89	; 137
    1a98:	98 e0       	ldi	r25, 0x08	; 8
    1a9a:	0e 94 74 31 	call	0x62e8	; 0x62e8 <_ZN6StringaSEPKc>
          
      if (BIT_IS_CLEAR(PORTC,4)) 
    1a9e:	44 99       	sbic	0x08, 4	; 8
    1aa0:	a8 c0       	rjmp	.+336    	; 0x1bf2 <loop+0x946>
      {
        displayLCD(righeDisplay,stato_procedura,10);  
    1aa2:	60 91 cd 08 	lds	r22, 0x08CD	; 0x8008cd <stato_procedura>
    1aa6:	70 91 ce 08 	lds	r23, 0x08CE	; 0x8008ce <stato_procedura+0x1>
    1aaa:	4a e0       	ldi	r20, 0x0A	; 10
    1aac:	50 e0       	ldi	r21, 0x00	; 0
    1aae:	87 e7       	ldi	r24, 0x77	; 119
    1ab0:	98 e0       	ldi	r25, 0x08	; 8
    1ab2:	0e 94 20 03 	call	0x640	; 0x640 <_Z10displayLCDP6Stringii>

        Messaggio = ""; 
    1ab6:	64 e8       	ldi	r22, 0x84	; 132
    1ab8:	71 e0       	ldi	r23, 0x01	; 1
    1aba:	8f e8       	ldi	r24, 0x8F	; 143
    1abc:	98 e0       	ldi	r25, 0x08	; 8
    1abe:	0e 94 74 31 	call	0x62e8	; 0x62e8 <_ZN6StringaSEPKc>
    1ac2:	01 ea       	ldi	r16, 0xA1	; 161
    1ac4:	18 e0       	ldi	r17, 0x08	; 8
    1ac6:	89 eb       	ldi	r24, 0xB9	; 185
    1ac8:	e8 2e       	mov	r14, r24
    1aca:	88 e0       	ldi	r24, 0x08	; 8
    1acc:	f8 2e       	mov	r15, r24
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
    1ace:	b8 01       	movw	r22, r16
    1ad0:	ce 01       	movw	r24, r28
    1ad2:	01 96       	adiw	r24, 0x01	; 1
    1ad4:	0e 94 61 31 	call	0x62c2	; 0x62c2 <_ZN6StringC1ERKS_>
        
        for (int k = 0;k<4;k++)
          Messaggio.concat(RaccoltaDati[k]+";");  
    1ad8:	66 e9       	ldi	r22, 0x96	; 150
    1ada:	75 e0       	ldi	r23, 0x05	; 5
    1adc:	ce 01       	movw	r24, r28
    1ade:	01 96       	adiw	r24, 0x01	; 1
    1ae0:	0e 94 87 32 	call	0x650e	; 0x650e <_ZplRK15StringSumHelperPKc>
    1ae4:	bc 01       	movw	r22, r24
    1ae6:	8f e8       	ldi	r24, 0x8F	; 143
    1ae8:	98 e0       	ldi	r25, 0x08	; 8
    1aea:	0e 94 50 32 	call	0x64a0	; 0x64a0 <_ZN6String6concatERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1aee:	ce 01       	movw	r24, r28
    1af0:	01 96       	adiw	r24, 0x01	; 1
    1af2:	0e 94 8e 30 	call	0x611c	; 0x611c <_ZN6StringD1Ev>
    1af6:	0a 5f       	subi	r16, 0xFA	; 250
    1af8:	1f 4f       	sbci	r17, 0xFF	; 255
      {
        displayLCD(righeDisplay,stato_procedura,10);  

        Messaggio = ""; 
        
        for (int k = 0;k<4;k++)
    1afa:	e0 16       	cp	r14, r16
    1afc:	f1 06       	cpc	r15, r17
    1afe:	39 f7       	brne	.-50     	; 0x1ace <loop+0x822>
    1b00:	9f ef       	ldi	r25, 0xFF	; 255
    1b02:	23 ed       	ldi	r18, 0xD3	; 211
    1b04:	30 e3       	ldi	r19, 0x30	; 48
    1b06:	91 50       	subi	r25, 0x01	; 1
    1b08:	20 40       	sbci	r18, 0x00	; 0
    1b0a:	30 40       	sbci	r19, 0x00	; 0
    1b0c:	e1 f7       	brne	.-8      	; 0x1b06 <loop+0x85a>
    1b0e:	00 c0       	rjmp	.+0      	; 0x1b10 <loop+0x864>
    1b10:	00 00       	nop
          Messaggio.concat(RaccoltaDati[k]+";");  
      
    _delay_ms(1000);      
        
    if (PostErogazione(5001,serverREST,clientLOCAL,Messaggio))
    1b12:	6f e8       	ldi	r22, 0x8F	; 143
    1b14:	78 e0       	ldi	r23, 0x08	; 8
    1b16:	ce 01       	movw	r24, r28
    1b18:	0e 96       	adiw	r24, 0x0e	; 14
    1b1a:	0e 94 61 31 	call	0x62c2	; 0x62c2 <_ZN6StringC1ERKS_>
    1b1e:	80 91 54 08 	lds	r24, 0x0854	; 0x800854 <clientLOCAL+0x2>
    1b22:	90 91 55 08 	lds	r25, 0x0855	; 0x800855 <clientLOCAL+0x3>
    1b26:	9c 83       	std	Y+4, r25	; 0x04
    1b28:	8b 83       	std	Y+3, r24	; 0x03
    1b2a:	80 91 56 08 	lds	r24, 0x0856	; 0x800856 <clientLOCAL+0x4>
    1b2e:	90 91 57 08 	lds	r25, 0x0857	; 0x800857 <clientLOCAL+0x5>
    1b32:	a0 91 58 08 	lds	r26, 0x0858	; 0x800858 <clientLOCAL+0x6>
    1b36:	b0 91 59 08 	lds	r27, 0x0859	; 0x800859 <clientLOCAL+0x7>
    1b3a:	8d 83       	std	Y+5, r24	; 0x05
    1b3c:	9e 83       	std	Y+6, r25	; 0x06
    1b3e:	af 83       	std	Y+7, r26	; 0x07
    1b40:	b8 87       	std	Y+8, r27	; 0x08
    1b42:	80 91 5a 08 	lds	r24, 0x085A	; 0x80085a <clientLOCAL+0x8>
    1b46:	90 91 5b 08 	lds	r25, 0x085B	; 0x80085b <clientLOCAL+0x9>
    1b4a:	a0 91 5c 08 	lds	r26, 0x085C	; 0x80085c <clientLOCAL+0xa>
    1b4e:	b0 91 5d 08 	lds	r27, 0x085D	; 0x80085d <clientLOCAL+0xb>
    1b52:	89 87       	std	Y+9, r24	; 0x09
    1b54:	9a 87       	std	Y+10, r25	; 0x0a
    1b56:	ab 87       	std	Y+11, r26	; 0x0b
    1b58:	bc 87       	std	Y+12, r27	; 0x0c
    1b5a:	89 e7       	ldi	r24, 0x79	; 121
    1b5c:	97 e0       	ldi	r25, 0x07	; 7
    1b5e:	9a 83       	std	Y+2, r25	; 0x02
    1b60:	89 83       	std	Y+1, r24	; 0x01
    1b62:	80 91 5e 08 	lds	r24, 0x085E	; 0x80085e <clientLOCAL+0xc>
    1b66:	8d 87       	std	Y+13, r24	; 0x0d
    1b68:	9e 01       	movw	r18, r28
    1b6a:	22 5f       	subi	r18, 0xF2	; 242
    1b6c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b6e:	ae 01       	movw	r20, r28
    1b70:	4f 5f       	subi	r20, 0xFF	; 255
    1b72:	5f 4f       	sbci	r21, 0xFF	; 255
    1b74:	6c e2       	ldi	r22, 0x2C	; 44
    1b76:	71 e0       	ldi	r23, 0x01	; 1
    1b78:	89 e8       	ldi	r24, 0x89	; 137
    1b7a:	93 e1       	ldi	r25, 0x13	; 19
    1b7c:	d8 d8       	rcall	.-3664   	; 0xd2e <_Z14PostErogazioneiPc14EthernetClient6String>
    1b7e:	18 2f       	mov	r17, r24
    1b80:	ce 01       	movw	r24, r28
    1b82:	0e 96       	adiw	r24, 0x0e	; 14
    1b84:	0e 94 8e 30 	call	0x611c	; 0x611c <_ZN6StringD1Ev>
    1b88:	11 23       	and	r17, r17
    1b8a:	39 f1       	breq	.+78     	; 0x1bda <loop+0x92e>
    {
      disable_ETH();
    1b8c:	0e 94 94 01 	call	0x328	; 0x328 <_ZL11disable_ETHv>
    
      righeDisplay[1] = "";
    1b90:	64 e8       	ldi	r22, 0x84	; 132
    1b92:	71 e0       	ldi	r23, 0x01	; 1
    1b94:	8d e7       	ldi	r24, 0x7D	; 125
    1b96:	98 e0       	ldi	r25, 0x08	; 8
    1b98:	0e 94 74 31 	call	0x62e8	; 0x62e8 <_ZN6StringaSEPKc>
      righeDisplay[2] = " Dati Inviati ";
    1b9c:	68 e9       	ldi	r22, 0x98	; 152
    1b9e:	75 e0       	ldi	r23, 0x05	; 5
    1ba0:	83 e8       	ldi	r24, 0x83	; 131
    1ba2:	98 e0       	ldi	r25, 0x08	; 8
    1ba4:	0e 94 74 31 	call	0x62e8	; 0x62e8 <_ZN6StringaSEPKc>
      righeDisplay[3] =  "";
    1ba8:	64 e8       	ldi	r22, 0x84	; 132
    1baa:	71 e0       	ldi	r23, 0x01	; 1
    1bac:	89 e8       	ldi	r24, 0x89	; 137
    1bae:	98 e0       	ldi	r25, 0x08	; 8
    1bb0:	0e 94 74 31 	call	0x62e8	; 0x62e8 <_ZN6StringaSEPKc>
    
      displayLCD(righeDisplay,stato_procedura,100);
    1bb4:	60 91 cd 08 	lds	r22, 0x08CD	; 0x8008cd <stato_procedura>
    1bb8:	70 91 ce 08 	lds	r23, 0x08CE	; 0x8008ce <stato_procedura+0x1>
    1bbc:	44 e6       	ldi	r20, 0x64	; 100
    1bbe:	50 e0       	ldi	r21, 0x00	; 0
    1bc0:	87 e7       	ldi	r24, 0x77	; 119
    1bc2:	98 e0       	ldi	r25, 0x08	; 8
    1bc4:	0e 94 20 03 	call	0x640	; 0x640 <_Z10displayLCDP6Stringii>
    1bc8:	8f ef       	ldi	r24, 0xFF	; 255
    1bca:	99 ef       	ldi	r25, 0xF9	; 249
    1bcc:	20 e0       	ldi	r18, 0x00	; 0
    1bce:	81 50       	subi	r24, 0x01	; 1
    1bd0:	90 40       	sbci	r25, 0x00	; 0
    1bd2:	20 40       	sbci	r18, 0x00	; 0
    1bd4:	e1 f7       	brne	.-8      	; 0x1bce <loop+0x922>
    1bd6:	00 c0       	rjmp	.+0      	; 0x1bd8 <loop+0x92c>
    
      _delay_ms(20);
    }
    
  disable_ETH();
    1bd8:	00 00       	nop
    1bda:	0e 94 94 01 	call	0x328	; 0x328 <_ZL11disable_ETHv>
  avanzaStato(TmaxSalvataggio);
    1bde:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <TmaxSalvataggio>
    1be2:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <TmaxSalvataggio+0x1>
    1be6:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <TmaxSalvataggio+0x2>
    1bea:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <TmaxSalvataggio+0x3>
   Azzera();    
    }
    break;
    case 9:
    {        
      Azzera();    
    1bee:	85 ce       	rjmp	.-758    	; 0x18fa <loop+0x64e>
    1bf0:	bf da       	rcall	.-2690   	; 0x1170 <_Z6Azzerav>
    {      
    }
    break;
  }

  nowTimer = DS3231M.now();
    1bf2:	69 e3       	ldi	r22, 0x39	; 57
    1bf4:	78 e0       	ldi	r23, 0x08	; 8
    1bf6:	ce 01       	movw	r24, r28
    1bf8:	01 96       	adiw	r24, 0x01	; 1
    1bfa:	0e 94 e6 18 	call	0x31cc	; 0x31cc <_ZN13DS3231M_Class3nowEv>
    1bfe:	86 e0       	ldi	r24, 0x06	; 6
    1c00:	fe 01       	movw	r30, r28
    1c02:	31 96       	adiw	r30, 0x01	; 1
    1c04:	a7 e2       	ldi	r26, 0x27	; 39
    1c06:	b8 e0       	ldi	r27, 0x08	; 8
    1c08:	01 90       	ld	r0, Z+
    1c0a:	0d 92       	st	X+, r0
    1c0c:	8a 95       	dec	r24
    1c0e:	e1 f7       	brne	.-8      	; 0x1c08 <loop+0x95c>
  secs = nowTimer.secondstime();
    1c10:	87 e2       	ldi	r24, 0x27	; 39
    1c12:	98 e0       	ldi	r25, 0x08	; 8
    1c14:	0e 94 37 18 	call	0x306e	; 0x306e <_ZNK8DateTime11secondstimeEv>
    1c18:	60 93 35 08 	sts	0x0835, r22	; 0x800835 <secs>
    1c1c:	70 93 36 08 	sts	0x0836, r23	; 0x800836 <secs+0x1>
    1c20:	80 93 37 08 	sts	0x0837, r24	; 0x800837 <secs+0x2>
    1c24:	90 93 38 08 	sts	0x0838, r25	; 0x800838 <secs+0x3>
  if ((UltimoPassaggioStato+Timer-secs) <= 1) Azzera();
    1c28:	00 91 31 08 	lds	r16, 0x0831	; 0x800831 <UltimoPassaggioStato>
    1c2c:	10 91 32 08 	lds	r17, 0x0832	; 0x800832 <UltimoPassaggioStato+0x1>
    1c30:	20 91 33 08 	lds	r18, 0x0833	; 0x800833 <UltimoPassaggioStato+0x2>
    1c34:	30 91 34 08 	lds	r19, 0x0834	; 0x800834 <UltimoPassaggioStato+0x3>
    1c38:	c0 90 2d 08 	lds	r12, 0x082D	; 0x80082d <Timer>
    1c3c:	d0 90 2e 08 	lds	r13, 0x082E	; 0x80082e <Timer+0x1>
    1c40:	e0 90 2f 08 	lds	r14, 0x082F	; 0x80082f <Timer+0x2>
    1c44:	f0 90 30 08 	lds	r15, 0x0830	; 0x800830 <Timer+0x3>
    1c48:	0c 0d       	add	r16, r12
    1c4a:	1d 1d       	adc	r17, r13
    1c4c:	2e 1d       	adc	r18, r14
    1c4e:	3f 1d       	adc	r19, r15
    1c50:	68 01       	movw	r12, r16
    1c52:	79 01       	movw	r14, r18
    1c54:	c6 1a       	sub	r12, r22
    1c56:	d7 0a       	sbc	r13, r23
    1c58:	e8 0a       	sbc	r14, r24
    1c5a:	f9 0a       	sbc	r15, r25
    1c5c:	d7 01       	movw	r26, r14
    1c5e:	c6 01       	movw	r24, r12
    1c60:	02 97       	sbiw	r24, 0x02	; 2
    1c62:	a1 05       	cpc	r26, r1
    1c64:	b1 05       	cpc	r27, r1
    1c66:	08 f0       	brcs	.+2      	; 0x1c6a <loop+0x9be>
    1c68:	dc c0       	rjmp	.+440    	; 0x1e22 <loop+0xb76>
    1c6a:	82 da       	rcall	.-2812   	; 0x1170 <_Z6Azzerav>

}
    1c6c:	da c0       	rjmp	.+436    	; 0x1e22 <loop+0xb76>
		String ATe = "ERRORE";
		if (!alreadyTimbrata) {ATe = GetCodeRfidATe(); Buzzer(2,100);}
            
        if ((ATe != "ERRORE") && (BIT_IS_CLEAR(PORTC,4)))
        { 
           Serial.println("");
    1c6e:	64 e8       	ldi	r22, 0x84	; 132
    1c70:	71 e0       	ldi	r23, 0x01	; 1
    1c72:	8c e7       	ldi	r24, 0x7C	; 124
    1c74:	9a e0       	ldi	r25, 0x0A	; 10
    1c76:	0e 94 5f 2e 	call	0x5cbe	; 0x5cbe <_ZN5Print7printlnEPKc>
           Serial.print("***************************************************************");
    1c7a:	67 ea       	ldi	r22, 0xA7	; 167
    1c7c:	75 e0       	ldi	r23, 0x05	; 5
    1c7e:	8c e7       	ldi	r24, 0x7C	; 124
    1c80:	9a e0       	ldi	r25, 0x0A	; 10
    1c82:	0e 94 34 2e 	call	0x5c68	; 0x5c68 <_ZN5Print5printEPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1c86:	67 ee       	ldi	r22, 0xE7	; 231
    1c88:	75 e0       	ldi	r23, 0x05	; 5
    1c8a:	ce 01       	movw	r24, r28
    1c8c:	01 96       	adiw	r24, 0x01	; 1
    1c8e:	0e 94 f5 30 	call	0x61ea	; 0x61ea <_ZN6StringC1EPKc>
           Serial.println(" Tessera ID : " + ATe);
    1c92:	be 01       	movw	r22, r28
    1c94:	6a 5e       	subi	r22, 0xEA	; 234
    1c96:	7f 4f       	sbci	r23, 0xFF	; 255
    1c98:	ce 01       	movw	r24, r28
    1c9a:	01 96       	adiw	r24, 0x01	; 1
    1c9c:	0e 94 76 32 	call	0x64ec	; 0x64ec <_ZplRK15StringSumHelperRK6String>
    1ca0:	bc 01       	movw	r22, r24
    1ca2:	8c e7       	ldi	r24, 0x7C	; 124
    1ca4:	9a e0       	ldi	r25, 0x0A	; 10
    1ca6:	0e 94 4f 2e 	call	0x5c9e	; 0x5c9e <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1caa:	ce 01       	movw	r24, r28
    1cac:	01 96       	adiw	r24, 0x01	; 1
    1cae:	0e 94 8e 30 	call	0x611c	; 0x611c <_ZN6StringD1Ev>
           Serial.print("***************************************************************");
    1cb2:	67 ea       	ldi	r22, 0xA7	; 167
    1cb4:	75 e0       	ldi	r23, 0x05	; 5
    1cb6:	8c e7       	ldi	r24, 0x7C	; 124
    1cb8:	9a e0       	ldi	r25, 0x0A	; 10
    1cba:	0e 94 34 2e 	call	0x5c68	; 0x5c68 <_ZN5Print5printEPKc>
           Serial.println("Riconoscimento Tessera .............");
    1cbe:	66 ef       	ldi	r22, 0xF6	; 246
    1cc0:	75 e0       	ldi	r23, 0x05	; 5
    1cc2:	8c e7       	ldi	r24, 0x7C	; 124
    1cc4:	9a e0       	ldi	r25, 0x0A	; 10
    1cc6:	0e 94 5f 2e 	call	0x5cbe	; 0x5cbe <_ZN5Print7printlnEPKc>
                     
           RaccoltaDati[0] = ATe;
    1cca:	be 01       	movw	r22, r28
    1ccc:	6a 5e       	subi	r22, 0xEA	; 234
    1cce:	7f 4f       	sbci	r23, 0xFF	; 255
    1cd0:	81 ea       	ldi	r24, 0xA1	; 161
    1cd2:	98 e0       	ldi	r25, 0x08	; 8
    1cd4:	0e 94 4c 31 	call	0x6298	; 0x6298 <_ZN6StringaSERKS_>
           
           lcd.backlight();
    1cd8:	84 ef       	ldi	r24, 0xF4	; 244
    1cda:	98 e0       	ldi	r25, 0x08	; 8
    1cdc:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <_ZN3LCD9backlightEv>
           lcd.display();          
    1ce0:	84 ef       	ldi	r24, 0xF4	; 244
    1ce2:	98 e0       	ldi	r25, 0x08	; 8
    1ce4:	0e 94 f2 25 	call	0x4be4	; 0x4be4 <_ZN3LCD7displayEv>
    1ce8:	8f e3       	ldi	r24, 0x3F	; 63
    1cea:	9c e9       	ldi	r25, 0x9C	; 156
    1cec:	01 97       	sbiw	r24, 0x01	; 1
    1cee:	f1 f7       	brne	.-4      	; 0x1cec <loop+0xa40>
    1cf0:	00 c0       	rjmp	.+0      	; 0x1cf2 <loop+0xa46>
    1cf2:	00 00       	nop
           _delay_ms(10);
            
           //righeDisplay[1] = " * AUTENTICAZIONE *";
           righeDisplay[1] = "  RICONOSCIMENTO ";
    1cf4:	6b e1       	ldi	r22, 0x1B	; 27
    1cf6:	76 e0       	ldi	r23, 0x06	; 6
    1cf8:	8d e7       	ldi	r24, 0x7D	; 125
    1cfa:	98 e0       	ldi	r25, 0x08	; 8
    1cfc:	0e 94 74 31 	call	0x62e8	; 0x62e8 <_ZN6StringaSEPKc>
           righeDisplay[2] = ".....In Corso.....";
    1d00:	6d e2       	ldi	r22, 0x2D	; 45
    1d02:	76 e0       	ldi	r23, 0x06	; 6
    1d04:	83 e8       	ldi	r24, 0x83	; 131
    1d06:	98 e0       	ldi	r25, 0x08	; 8
    1d08:	0e 94 74 31 	call	0x62e8	; 0x62e8 <_ZN6StringaSEPKc>
           //righeDisplay[3] = "   Rfid: " + ATe;
           righeDisplay[3] = "Attendere.........";
    1d0c:	60 e4       	ldi	r22, 0x40	; 64
    1d0e:	76 e0       	ldi	r23, 0x06	; 6
    1d10:	89 e8       	ldi	r24, 0x89	; 137
    1d12:	98 e0       	ldi	r25, 0x08	; 8
    1d14:	0e 94 74 31 	call	0x62e8	; 0x62e8 <_ZN6StringaSEPKc>
         
           displayLCD(righeDisplay,stato_procedura,100);
    1d18:	60 91 cd 08 	lds	r22, 0x08CD	; 0x8008cd <stato_procedura>
    1d1c:	70 91 ce 08 	lds	r23, 0x08CE	; 0x8008ce <stato_procedura+0x1>
    1d20:	44 e6       	ldi	r20, 0x64	; 100
    1d22:	50 e0       	ldi	r21, 0x00	; 0
    1d24:	87 e7       	ldi	r24, 0x77	; 119
    1d26:	98 e0       	ldi	r25, 0x08	; 8
    1d28:	0e 94 20 03 	call	0x640	; 0x640 <_Z10displayLCDP6Stringii>
      
           InizializzaEthernet();
    1d2c:	0e 94 96 01 	call	0x32c	; 0x32c <_Z19InizializzaEthernetv>
    1d30:	9f ef       	ldi	r25, 0xFF	; 255
    1d32:	23 ed       	ldi	r18, 0xD3	; 211
    1d34:	30 e3       	ldi	r19, 0x30	; 48
    1d36:	91 50       	subi	r25, 0x01	; 1
    1d38:	20 40       	sbci	r18, 0x00	; 0
    1d3a:	30 40       	sbci	r19, 0x00	; 0
    1d3c:	e1 f7       	brne	.-8      	; 0x1d36 <loop+0xa8a>
    1d3e:	00 c0       	rjmp	.+0      	; 0x1d40 <loop+0xa94>
    1d40:	00 00       	nop
    1d42:	7d cb       	rjmp	.-2310   	; 0x143e <loop+0x192>
		  Serial.println("TIPO CARBURANTE: " + mezzo.Carb);    
		  Serial.println("TARGA: " + mezzo.TARGA);              

		  Carburante = mezzo.Carb;                 
		  if ((mezzo.Carb == "B") || (mezzo.Carb == "D")) {
			RaccoltaDati[1] = mezzo.TARGA;
    1d44:	6c e1       	ldi	r22, 0x1C	; 28
    1d46:	79 e0       	ldi	r23, 0x09	; 9
    1d48:	87 ea       	ldi	r24, 0xA7	; 167
    1d4a:	98 e0       	ldi	r25, 0x08	; 8
    1d4c:	0e 94 4c 31 	call	0x6298	; 0x6298 <_ZN6StringaSERKS_>
			RaccoltaDati[2] = mezzo.Carb;
    1d50:	66 e1       	ldi	r22, 0x16	; 22
    1d52:	79 e0       	ldi	r23, 0x09	; 9
    1d54:	8d ea       	ldi	r24, 0xAD	; 173
    1d56:	98 e0       	ldi	r25, 0x08	; 8
    1d58:	0e 94 4c 31 	call	0x6298	; 0x6298 <_ZN6StringaSERKS_>
			avanzaStato(TselDistributore); 
    1d5c:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <TselDistributore>
    1d60:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <TselDistributore+0x1>
    1d64:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <TselDistributore+0x2>
    1d68:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <TselDistributore+0x3>
    1d6c:	0e 94 c0 03 	call	0x780	; 0x780 <_Z11avanzaStatom>
    1d70:	84 cd       	rjmp	.-1272   	; 0x187a <loop+0x5ce>

      /* CONTATTO PISTOLA DIESEL*/
      
      if ((PINA & _BV(PA1)) && (Carburante == "D"))
      {       
        RaccoltaDati[3] = String(lt);
    1d72:	22 e0       	ldi	r18, 0x02	; 2
    1d74:	b7 01       	movw	r22, r14
    1d76:	a6 01       	movw	r20, r12
    1d78:	ce 01       	movw	r24, r28
    1d7a:	01 96       	adiw	r24, 0x01	; 1
    1d7c:	0e 94 f6 31 	call	0x63ec	; 0x63ec <_ZN6StringC1Edh>
    1d80:	be 01       	movw	r22, r28
    1d82:	6f 5f       	subi	r22, 0xFF	; 255
    1d84:	7f 4f       	sbci	r23, 0xFF	; 255
    1d86:	83 eb       	ldi	r24, 0xB3	; 179
    1d88:	98 e0       	ldi	r25, 0x08	; 8
    1d8a:	0e 94 69 31 	call	0x62d2	; 0x62d2 <_ZN6StringaSEOS_>
    1d8e:	ce 01       	movw	r24, r28
    1d90:	01 96       	adiw	r24, 0x01	; 1
        
        StatoAttuale = "STOP EROGAZIONE";
    1d92:	0e 94 8e 30 	call	0x611c	; 0x611c <_ZN6StringD1Ev>
    1d96:	63 e5       	ldi	r22, 0x53	; 83
    1d98:	76 e0       	ldi	r23, 0x06	; 6
    1d9a:	87 ed       	ldi	r24, 0xD7	; 215
    1d9c:	98 e0       	ldi	r25, 0x08	; 8
        Rele_Abilitazione2(1,7); //  apri relè
    1d9e:	0e 94 74 31 	call	0x62e8	; 0x62e8 <_ZN6StringaSEPKc>
    1da2:	67 e0       	ldi	r22, 0x07	; 7
    1da4:	70 e0       	ldi	r23, 0x00	; 0
    1da6:	81 e0       	ldi	r24, 0x01	; 1
    1da8:	90 e0       	ldi	r25, 0x00	; 0
        Rele_Abilitazione1(1,7); //  apri relè  
    1daa:	8b d9       	rcall	.-3306   	; 0x10c2 <_Z18Rele_Abilitazione2ii>
    1dac:	67 e0       	ldi	r22, 0x07	; 7
    1dae:	70 e0       	ldi	r23, 0x00	; 0
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	4b d9       	rcall	.-3434   	; 0x104c <_Z18Rele_Abilitazione1ii>
        TOGGLE_BIT(PORTA,1);      
    1db6:	92 b1       	in	r25, 0x02	; 2
    1db8:	82 e0       	ldi	r24, 0x02	; 2
    1dba:	89 27       	eor	r24, r25
    1dbc:	82 b9       	out	0x02, r24	; 2
        avanzaStato(10);
    1dbe:	6a e0       	ldi	r22, 0x0A	; 10
    1dc0:	70 e0       	ldi	r23, 0x00	; 0
    1dc2:	80 e0       	ldi	r24, 0x00	; 0
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	0e 94 c0 03 	call	0x780	; 0x780 <_Z11avanzaStatom>
    1dca:	4c ce       	rjmp	.-872    	; 0x1a64 <loop+0x7b8>
      
      /* CONTATTO PISTOLA BENZINA*/
      
      if  ((PINB & _BV(PB1)) && (Carburante == "B"))
      {
        RaccoltaDati[3] = String(lt);
    1dcc:	22 e0       	ldi	r18, 0x02	; 2
    1dce:	b7 01       	movw	r22, r14
    1dd0:	a6 01       	movw	r20, r12
    1dd2:	ce 01       	movw	r24, r28
    1dd4:	01 96       	adiw	r24, 0x01	; 1
    1dd6:	0e 94 f6 31 	call	0x63ec	; 0x63ec <_ZN6StringC1Edh>
    1dda:	be 01       	movw	r22, r28
    1ddc:	6f 5f       	subi	r22, 0xFF	; 255
    1dde:	7f 4f       	sbci	r23, 0xFF	; 255
    1de0:	83 eb       	ldi	r24, 0xB3	; 179
    1de2:	98 e0       	ldi	r25, 0x08	; 8
    1de4:	0e 94 69 31 	call	0x62d2	; 0x62d2 <_ZN6StringaSEOS_>
    1de8:	ce 01       	movw	r24, r28
    1dea:	01 96       	adiw	r24, 0x01	; 1
        
        StatoAttuale = "STOP EROGAZIONE";
    1dec:	0e 94 8e 30 	call	0x611c	; 0x611c <_ZN6StringD1Ev>
    1df0:	63 e5       	ldi	r22, 0x53	; 83
    1df2:	76 e0       	ldi	r23, 0x06	; 6
    1df4:	87 ed       	ldi	r24, 0xD7	; 215
    1df6:	98 e0       	ldi	r25, 0x08	; 8
        Rele_Abilitazione2(1,7); //  apri relè
    1df8:	0e 94 74 31 	call	0x62e8	; 0x62e8 <_ZN6StringaSEPKc>
    1dfc:	67 e0       	ldi	r22, 0x07	; 7
    1dfe:	70 e0       	ldi	r23, 0x00	; 0
    1e00:	81 e0       	ldi	r24, 0x01	; 1
    1e02:	90 e0       	ldi	r25, 0x00	; 0
        Rele_Abilitazione1(1,7); //  apri relè        
    1e04:	5e d9       	rcall	.-3396   	; 0x10c2 <_Z18Rele_Abilitazione2ii>
    1e06:	67 e0       	ldi	r22, 0x07	; 7
    1e08:	70 e0       	ldi	r23, 0x00	; 0
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	1e d9       	rcall	.-3524   	; 0x104c <_Z18Rele_Abilitazione1ii>
        avanzaStato(TmaxInviodati);
    1e10:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <TmaxInviodati>
    1e14:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <TmaxInviodati+0x1>
    1e18:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <TmaxInviodati+0x2>
    1e1c:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <TmaxInviodati+0x3>
    1e20:	6c cd       	rjmp	.-1320   	; 0x18fa <loop+0x64e>

  nowTimer = DS3231M.now();
  secs = nowTimer.secondstime();
  if ((UltimoPassaggioStato+Timer-secs) <= 1) Azzera();

}
    1e22:	a3 96       	adiw	r28, 0x23	; 35
    1e24:	0f b6       	in	r0, 0x3f	; 63
    1e26:	f8 94       	cli
    1e28:	de bf       	out	0x3e, r29	; 62
    1e2a:	0f be       	out	0x3f, r0	; 63
    1e2c:	cd bf       	out	0x3d, r28	; 61
    1e2e:	df 91       	pop	r29
    1e30:	cf 91       	pop	r28
    1e32:	1f 91       	pop	r17
    1e34:	0f 91       	pop	r16
    1e36:	ff 90       	pop	r15
    1e38:	ef 90       	pop	r14
    1e3a:	df 90       	pop	r13
    1e3c:	cf 90       	pop	r12
    1e3e:	08 95       	ret

00001e40 <__vector_4>:

/********************FINE LOOP PROCEDURA************************************/

// interrupt per conteggio impulsi

ISR(PCINT0_vect) {
    1e40:	1f 92       	push	r1
    1e42:	0f 92       	push	r0
    1e44:	0f b6       	in	r0, 0x3f	; 63
    1e46:	0f 92       	push	r0
    1e48:	11 24       	eor	r1, r1
    1e4a:	8f 93       	push	r24
    1e4c:	9f 93       	push	r25
       if (PINA & _BV(PA5)){
    1e4e:	05 9b       	sbis	0x00, 5	; 0
    1e50:	09 c0       	rjmp	.+18     	; 0x1e64 <__vector_4+0x24>
              impulsi++;
    1e52:	80 91 cb 08 	lds	r24, 0x08CB	; 0x8008cb <impulsi>
    1e56:	90 91 cc 08 	lds	r25, 0x08CC	; 0x8008cc <impulsi+0x1>
    1e5a:	01 96       	adiw	r24, 0x01	; 1
    1e5c:	90 93 cc 08 	sts	0x08CC, r25	; 0x8008cc <impulsi+0x1>
    1e60:	80 93 cb 08 	sts	0x08CB, r24	; 0x8008cb <impulsi>
       }
       if (PINA & _BV(PA6)){
    1e64:	06 9b       	sbis	0x00, 6	; 0
    1e66:	09 c0       	rjmp	.+18     	; 0x1e7a <__vector_4+0x3a>
              impulsi++;
    1e68:	80 91 cb 08 	lds	r24, 0x08CB	; 0x8008cb <impulsi>
    1e6c:	90 91 cc 08 	lds	r25, 0x08CC	; 0x8008cc <impulsi+0x1>
    1e70:	01 96       	adiw	r24, 0x01	; 1
    1e72:	90 93 cc 08 	sts	0x08CC, r25	; 0x8008cc <impulsi+0x1>
    1e76:	80 93 cb 08 	sts	0x08CB, r24	; 0x8008cb <impulsi>
       }
}
    1e7a:	9f 91       	pop	r25
    1e7c:	8f 91       	pop	r24
    1e7e:	0f 90       	pop	r0
    1e80:	0f be       	out	0x3f, r0	; 63
    1e82:	0f 90       	pop	r0
    1e84:	1f 90       	pop	r1
    1e86:	18 95       	reti

00001e88 <__vector_7>:

// interrupt per pulsanti abilitazione diesele benzina

ISR(PCINT3_vect) {    
    1e88:	1f 92       	push	r1
    1e8a:	0f 92       	push	r0
    1e8c:	0f b6       	in	r0, 0x3f	; 63
    1e8e:	0f 92       	push	r0
    1e90:	11 24       	eor	r1, r1
    1e92:	0b b6       	in	r0, 0x3b	; 59
    1e94:	0f 92       	push	r0
    1e96:	2f 93       	push	r18
    1e98:	3f 93       	push	r19
    1e9a:	4f 93       	push	r20
    1e9c:	5f 93       	push	r21
    1e9e:	6f 93       	push	r22
    1ea0:	7f 93       	push	r23
    1ea2:	8f 93       	push	r24
    1ea4:	9f 93       	push	r25
    1ea6:	af 93       	push	r26
    1ea8:	bf 93       	push	r27
    1eaa:	ef 93       	push	r30
    1eac:	ff 93       	push	r31
  
  if (stato_procedura == 4)
    1eae:	80 91 cd 08 	lds	r24, 0x08CD	; 0x8008cd <stato_procedura>
    1eb2:	90 91 ce 08 	lds	r25, 0x08CE	; 0x8008ce <stato_procedura+0x1>
    1eb6:	04 97       	sbiw	r24, 0x04	; 4
    1eb8:	09 f0       	breq	.+2      	; 0x1ebc <__vector_7+0x34>
    1eba:	86 c0       	rjmp	.+268    	; 0x1fc8 <__vector_7+0x140>
  {
    if (PIND & _BV(PD6))
    1ebc:	4e 9b       	sbis	0x09, 6	; 9
    1ebe:	2a c0       	rjmp	.+84     	; 0x1f14 <__vector_7+0x8c>
    {   
      intConsecutivePresses++;                      // increment counter for number of presses
    1ec0:	80 91 25 09 	lds	r24, 0x0925	; 0x800925 <intConsecutivePresses>
    1ec4:	90 91 26 09 	lds	r25, 0x0926	; 0x800926 <intConsecutivePresses+0x1>
    1ec8:	01 96       	adiw	r24, 0x01	; 1
    1eca:	90 93 26 09 	sts	0x0926, r25	; 0x800926 <intConsecutivePresses+0x1>
    1ece:	80 93 25 09 	sts	0x0925, r24	; 0x800925 <intConsecutivePresses>
      if(intConsecutivePresses >= NUM_OF_CONSECUTIVE_PRESSES) 
    1ed2:	80 91 25 09 	lds	r24, 0x0925	; 0x800925 <intConsecutivePresses>
    1ed6:	90 91 26 09 	lds	r25, 0x0926	; 0x800926 <intConsecutivePresses+0x1>
    1eda:	18 16       	cp	r1, r24
    1edc:	19 06       	cpc	r1, r25
    1ede:	8c f5       	brge	.+98     	; 0x1f42 <__vector_7+0xba>
      {     // if enough presses to constitute a press
        abilitaPulser('B');
    1ee0:	82 e4       	ldi	r24, 0x42	; 66
    1ee2:	7b d8       	rcall	.-3850   	; 0xfda <_Z13abilitaPulserc>
        Rele_Abilitazione2(0,7); // chiudi relè
    1ee4:	67 e0       	ldi	r22, 0x07	; 7
    1ee6:	70 e0       	ldi	r23, 0x00	; 0
    1ee8:	80 e0       	ldi	r24, 0x00	; 0
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	ea d8       	rcall	.-3628   	; 0x10c2 <_Z18Rele_Abilitazione2ii>
        Carburante = "B";
    1eee:	6e e0       	ldi	r22, 0x0E	; 14
    1ef0:	75 e0       	ldi	r23, 0x05	; 5
    1ef2:	8b e9       	ldi	r24, 0x9B	; 155
    1ef4:	98 e0       	ldi	r25, 0x08	; 8
    1ef6:	0e 94 74 31 	call	0x62e8	; 0x62e8 <_ZN6StringaSEPKc>
        StatoAttuale = "BENZINA";
    1efa:	6e e3       	ldi	r22, 0x3E	; 62
    1efc:	75 e0       	ldi	r23, 0x05	; 5
    1efe:	87 ed       	ldi	r24, 0xD7	; 215
    1f00:	98 e0       	ldi	r25, 0x08	; 8
    1f02:	0e 94 74 31 	call	0x62e8	; 0x62e8 <_ZN6StringaSEPKc>
        //stato_procedura++;
        avanzaStato(10);                            
    1f06:	6a e0       	ldi	r22, 0x0A	; 10
    1f08:	70 e0       	ldi	r23, 0x00	; 0
    1f0a:	80 e0       	ldi	r24, 0x00	; 0
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	0e 94 c0 03 	call	0x780	; 0x780 <_Z11avanzaStatom>
    1f12:	0f c0       	rjmp	.+30     	; 0x1f32 <__vector_7+0xaa>
        intConsecutivePresses = 0;                    // and reset press counts
        intConsecutiveNonPresses = 0;
      }
    }
    else  {           // else if button is not pressed (logic low)
    intConsecutiveNonPresses++;
    1f14:	80 91 23 09 	lds	r24, 0x0923	; 0x800923 <intConsecutiveNonPresses>
    1f18:	90 91 24 09 	lds	r25, 0x0924	; 0x800924 <intConsecutiveNonPresses+0x1>
    1f1c:	01 96       	adiw	r24, 0x01	; 1
    1f1e:	90 93 24 09 	sts	0x0924, r25	; 0x800924 <intConsecutiveNonPresses+0x1>
    1f22:	80 93 23 09 	sts	0x0923, r24	; 0x800923 <intConsecutiveNonPresses>
    if(intConsecutiveNonPresses >= NUM_OF_CONSECUTIVE_NON_PRESSES) {
    1f26:	80 91 23 09 	lds	r24, 0x0923	; 0x800923 <intConsecutiveNonPresses>
    1f2a:	90 91 24 09 	lds	r25, 0x0924	; 0x800924 <intConsecutiveNonPresses+0x1>
    1f2e:	02 97       	sbiw	r24, 0x02	; 2
    1f30:	44 f0       	brlt	.+16     	; 0x1f42 <__vector_7+0xba>
      intConsecutivePresses = 0;                      // reset press counts
    1f32:	10 92 26 09 	sts	0x0926, r1	; 0x800926 <intConsecutivePresses+0x1>
    1f36:	10 92 25 09 	sts	0x0925, r1	; 0x800925 <intConsecutivePresses>
      intConsecutiveNonPresses = 0;
    1f3a:	10 92 24 09 	sts	0x0924, r1	; 0x800924 <intConsecutiveNonPresses+0x1>
    1f3e:	10 92 23 09 	sts	0x0923, r1	; 0x800923 <intConsecutiveNonPresses>
    }
    }     
      
    if (PIND & _BV(PD7))
    1f42:	4f 9b       	sbis	0x09, 7	; 9
    1f44:	2a c0       	rjmp	.+84     	; 0x1f9a <__vector_7+0x112>
    {     
      intConsecutivePresses++;                      // increment counter for number of presses
    1f46:	80 91 25 09 	lds	r24, 0x0925	; 0x800925 <intConsecutivePresses>
    1f4a:	90 91 26 09 	lds	r25, 0x0926	; 0x800926 <intConsecutivePresses+0x1>
    1f4e:	01 96       	adiw	r24, 0x01	; 1
    1f50:	90 93 26 09 	sts	0x0926, r25	; 0x800926 <intConsecutivePresses+0x1>
    1f54:	80 93 25 09 	sts	0x0925, r24	; 0x800925 <intConsecutivePresses>
      if(intConsecutivePresses >= NUM_OF_CONSECUTIVE_PRESSES) 
    1f58:	80 91 25 09 	lds	r24, 0x0925	; 0x800925 <intConsecutivePresses>
    1f5c:	90 91 26 09 	lds	r25, 0x0926	; 0x800926 <intConsecutivePresses+0x1>
    1f60:	18 16       	cp	r1, r24
    1f62:	19 06       	cpc	r1, r25
      {     // if enough presses to constitute a press        
        abilitaPulser('D');
    1f64:	8c f5       	brge	.+98     	; 0x1fc8 <__vector_7+0x140>
    1f66:	84 e4       	ldi	r24, 0x44	; 68
    1f68:	38 d8       	rcall	.-3984   	; 0xfda <_Z13abilitaPulserc>
        Rele_Abilitazione1(0,7); // chiudi relè
    1f6a:	67 e0       	ldi	r22, 0x07	; 7
    1f6c:	70 e0       	ldi	r23, 0x00	; 0
    1f6e:	80 e0       	ldi	r24, 0x00	; 0
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	6c d8       	rcall	.-3880   	; 0x104c <_Z18Rele_Abilitazione1ii>
        Carburante = "D";
    1f74:	60 e1       	ldi	r22, 0x10	; 16
    1f76:	75 e0       	ldi	r23, 0x05	; 5
    1f78:	8b e9       	ldi	r24, 0x9B	; 155
    1f7a:	98 e0       	ldi	r25, 0x08	; 8
    1f7c:	0e 94 74 31 	call	0x62e8	; 0x62e8 <_ZN6StringaSEPKc>
        StatoAttuale = "GASOLIO";
    1f80:	66 e4       	ldi	r22, 0x46	; 70
    1f82:	75 e0       	ldi	r23, 0x05	; 5
    1f84:	87 ed       	ldi	r24, 0xD7	; 215
    1f86:	98 e0       	ldi	r25, 0x08	; 8
    1f88:	0e 94 74 31 	call	0x62e8	; 0x62e8 <_ZN6StringaSEPKc>
        //stato_procedura++;
        avanzaStato(10);
    1f8c:	6a e0       	ldi	r22, 0x0A	; 10
    1f8e:	70 e0       	ldi	r23, 0x00	; 0
    1f90:	80 e0       	ldi	r24, 0x00	; 0
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	0e 94 c0 03 	call	0x780	; 0x780 <_Z11avanzaStatom>
    1f98:	0f c0       	rjmp	.+30     	; 0x1fb8 <__vector_7+0x130>
        intConsecutivePresses = 0;                    // and reset press counts
        intConsecutiveNonPresses = 0;
        }
     }
     else  {            // else if button is not pressed (logic low)
     intConsecutiveNonPresses++;
    1f9a:	80 91 23 09 	lds	r24, 0x0923	; 0x800923 <intConsecutiveNonPresses>
    1f9e:	90 91 24 09 	lds	r25, 0x0924	; 0x800924 <intConsecutiveNonPresses+0x1>
    1fa2:	01 96       	adiw	r24, 0x01	; 1
    1fa4:	90 93 24 09 	sts	0x0924, r25	; 0x800924 <intConsecutiveNonPresses+0x1>
    1fa8:	80 93 23 09 	sts	0x0923, r24	; 0x800923 <intConsecutiveNonPresses>
     if(intConsecutiveNonPresses >= NUM_OF_CONSECUTIVE_NON_PRESSES) {
    1fac:	80 91 23 09 	lds	r24, 0x0923	; 0x800923 <intConsecutiveNonPresses>
    1fb0:	90 91 24 09 	lds	r25, 0x0924	; 0x800924 <intConsecutiveNonPresses+0x1>
    1fb4:	02 97       	sbiw	r24, 0x02	; 2
    1fb6:	44 f0       	brlt	.+16     	; 0x1fc8 <__vector_7+0x140>
       intConsecutivePresses = 0;                     // reset press counts
    1fb8:	10 92 26 09 	sts	0x0926, r1	; 0x800926 <intConsecutivePresses+0x1>
    1fbc:	10 92 25 09 	sts	0x0925, r1	; 0x800925 <intConsecutivePresses>
       intConsecutiveNonPresses = 0;
    1fc0:	10 92 24 09 	sts	0x0924, r1	; 0x800924 <intConsecutiveNonPresses+0x1>
    1fc4:	10 92 23 09 	sts	0x0923, r1	; 0x800923 <intConsecutiveNonPresses>
     }
    }
  }               
    1fc8:	ff 91       	pop	r31
    1fca:	ef 91       	pop	r30
    1fcc:	bf 91       	pop	r27
    1fce:	af 91       	pop	r26
    1fd0:	9f 91       	pop	r25
    1fd2:	8f 91       	pop	r24
    1fd4:	7f 91       	pop	r23
    1fd6:	6f 91       	pop	r22
    1fd8:	5f 91       	pop	r21
    1fda:	4f 91       	pop	r20
    1fdc:	3f 91       	pop	r19
    1fde:	2f 91       	pop	r18
    1fe0:	0f 90       	pop	r0
    1fe2:	0b be       	out	0x3b, r0	; 59
    1fe4:	0f 90       	pop	r0
    1fe6:	0f be       	out	0x3f, r0	; 63
    1fe8:	0f 90       	pop	r0
    1fea:	1f 90       	pop	r1
    1fec:	18 95       	reti

00001fee <_GLOBAL__sub_I_intConsecutivePresses>:
    1fee:	8f 92       	push	r8
    1ff0:	af 92       	push	r10
    1ff2:	cf 92       	push	r12
    1ff4:	ef 92       	push	r14
    1ff6:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    1ff8:	00 e0       	ldi	r16, 0x00	; 0
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	40 e0       	ldi	r20, 0x00	; 0
    1ffe:	60 e0       	ldi	r22, 0x00	; 0
    2000:	87 e2       	ldi	r24, 0x27	; 39
    2002:	99 e0       	ldi	r25, 0x09	; 9
    2004:	0e 94 a1 2d 	call	0x5b42	; 0x5b42 <_ZN9IPAddressC1Ehhhh>
const uint8_t I2C_PCA9534_ADDR = 0x20;

volatile int intConsecutivePresses = 0;
volatile int intConsecutiveNonPresses = 0;

struct mezzoType {
    2008:	64 e8       	ldi	r22, 0x84	; 132
    200a:	71 e0       	ldi	r23, 0x01	; 1
    200c:	86 e1       	ldi	r24, 0x16	; 22
    200e:	99 e0       	ldi	r25, 0x09	; 9
    2010:	0e 94 f5 30 	call	0x61ea	; 0x61ea <_ZN6StringC1EPKc>
    2014:	64 e8       	ldi	r22, 0x84	; 132
    2016:	71 e0       	ldi	r23, 0x01	; 1
    2018:	8c e1       	ldi	r24, 0x1C	; 28
    201a:	99 e0       	ldi	r25, 0x09	; 9
    201c:	0e 94 f5 30 	call	0x61ea	; 0x61ea <_ZN6StringC1EPKc>
uint8_t uid[] = { 0, 0, 0, 0, 0, 0, 0 };       // Buffer dove memorizzo la UID del Badge
uint8_t uidLength;                             // Length of the UID (4 or 7 bytes depending on ISO14443A card type)
uint8_t uidMezzo[] = { 0, 0, 0, 0, 0, 0, 0 };  // Buffer dove memorizzo la UID del Badge Mezzo
boolean alreadyTimbrata = false;

LiquidCrystal_I2C lcd(0x27, 2, 1, 0, 4, 5, 6, 7, 3, POSITIVE);  // Set the LCD I2C address
    2020:	1f 92       	push	r1
    2022:	83 e0       	ldi	r24, 0x03	; 3
    2024:	8f 93       	push	r24
    2026:	87 e0       	ldi	r24, 0x07	; 7
    2028:	88 2e       	mov	r8, r24
    202a:	96 e0       	ldi	r25, 0x06	; 6
    202c:	a9 2e       	mov	r10, r25
    202e:	25 e0       	ldi	r18, 0x05	; 5
    2030:	c2 2e       	mov	r12, r18
    2032:	34 e0       	ldi	r19, 0x04	; 4
    2034:	e3 2e       	mov	r14, r19
    2036:	21 e0       	ldi	r18, 0x01	; 1
    2038:	42 e0       	ldi	r20, 0x02	; 2
    203a:	67 e2       	ldi	r22, 0x27	; 39
    203c:	84 ef       	ldi	r24, 0xF4	; 244
    203e:	98 e0       	ldi	r25, 0x08	; 8
    2040:	0e 94 29 27 	call	0x4e52	; 0x4e52 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhhh13t_backlighPol>
uint8_t Clessidra[8] = {0x1F, 0x11, 0x0A, 0x04, 0x04, 0x0E, 0x1F, 0x1F,}; 
NFC_PN532 nfc(PN532_IRQ, PN532_RESET);
    2044:	43 e0       	ldi	r20, 0x03	; 3
    2046:	64 e0       	ldi	r22, 0x04	; 4
    2048:	8d ed       	ldi	r24, 0xDD	; 221
    204a:	98 e0       	ldi	r25, 0x08	; 8
    204c:	4c d3       	rcall	.+1688   	; 0x26e6 <_ZN9NFC_PN532C1Ehh>

String StatoAttuale ="START...";
    204e:	63 e6       	ldi	r22, 0x63	; 99
    2050:	76 e0       	ldi	r23, 0x06	; 6
    2052:	87 ed       	ldi	r24, 0xD7	; 215
    2054:	98 e0       	ldi	r25, 0x08	; 8
    2056:	0e 94 f5 30 	call	0x61ea	; 0x61ea <_ZN6StringC1EPKc>
String strURLAPI = "";
    205a:	64 e8       	ldi	r22, 0x84	; 132
    205c:	71 e0       	ldi	r23, 0x01	; 1
    205e:	81 ed       	ldi	r24, 0xD1	; 209
    2060:	98 e0       	ldi	r25, 0x08	; 8
    2062:	0e 94 f5 30 	call	0x61ea	; 0x61ea <_ZN6StringC1EPKc>
volatile int impulsi = 0;   // Variabile per il conteggio degli impulsi generati dal pulser

/*** GESTIONE HTTP REQUEST ***/

int HTTP_len_response = 12;
String RispostaHTTP = "";
    2066:	64 e8       	ldi	r22, 0x84	; 132
    2068:	71 e0       	ldi	r23, 0x01	; 1
    206a:	85 ec       	ldi	r24, 0xC5	; 197
    206c:	98 e0       	ldi	r25, 0x08	; 8
    206e:	0e 94 f5 30 	call	0x61ea	; 0x61ea <_ZN6StringC1EPKc>

String RaccoltaDati[] = {"","","","","",""};
    2072:	64 e8       	ldi	r22, 0x84	; 132
    2074:	71 e0       	ldi	r23, 0x01	; 1
    2076:	81 ea       	ldi	r24, 0xA1	; 161
    2078:	98 e0       	ldi	r25, 0x08	; 8
    207a:	0e 94 f5 30 	call	0x61ea	; 0x61ea <_ZN6StringC1EPKc>
    207e:	64 e8       	ldi	r22, 0x84	; 132
    2080:	71 e0       	ldi	r23, 0x01	; 1
    2082:	87 ea       	ldi	r24, 0xA7	; 167
    2084:	98 e0       	ldi	r25, 0x08	; 8
    2086:	0e 94 f5 30 	call	0x61ea	; 0x61ea <_ZN6StringC1EPKc>
    208a:	64 e8       	ldi	r22, 0x84	; 132
    208c:	71 e0       	ldi	r23, 0x01	; 1
    208e:	8d ea       	ldi	r24, 0xAD	; 173
    2090:	98 e0       	ldi	r25, 0x08	; 8
    2092:	0e 94 f5 30 	call	0x61ea	; 0x61ea <_ZN6StringC1EPKc>
    2096:	64 e8       	ldi	r22, 0x84	; 132
    2098:	71 e0       	ldi	r23, 0x01	; 1
    209a:	83 eb       	ldi	r24, 0xB3	; 179
    209c:	98 e0       	ldi	r25, 0x08	; 8
    209e:	0e 94 f5 30 	call	0x61ea	; 0x61ea <_ZN6StringC1EPKc>
    20a2:	64 e8       	ldi	r22, 0x84	; 132
    20a4:	71 e0       	ldi	r23, 0x01	; 1
    20a6:	89 eb       	ldi	r24, 0xB9	; 185
    20a8:	98 e0       	ldi	r25, 0x08	; 8
    20aa:	0e 94 f5 30 	call	0x61ea	; 0x61ea <_ZN6StringC1EPKc>
    20ae:	64 e8       	ldi	r22, 0x84	; 132
    20b0:	71 e0       	ldi	r23, 0x01	; 1
    20b2:	8f eb       	ldi	r24, 0xBF	; 191
    20b4:	98 e0       	ldi	r25, 0x08	; 8
    20b6:	0e 94 f5 30 	call	0x61ea	; 0x61ea <_ZN6StringC1EPKc>
String Carburante = "X";
    20ba:	69 e7       	ldi	r22, 0x79	; 121
    20bc:	74 e0       	ldi	r23, 0x04	; 4
    20be:	8b e9       	ldi	r24, 0x9B	; 155
    20c0:	98 e0       	ldi	r25, 0x08	; 8
    20c2:	0e 94 f5 30 	call	0x61ea	; 0x61ea <_ZN6StringC1EPKc>
String Risposta = "";
    20c6:	64 e8       	ldi	r22, 0x84	; 132
    20c8:	71 e0       	ldi	r23, 0x01	; 1
    20ca:	85 e9       	ldi	r24, 0x95	; 149
    20cc:	98 e0       	ldi	r25, 0x08	; 8
    20ce:	0e 94 f5 30 	call	0x61ea	; 0x61ea <_ZN6StringC1EPKc>
String Messaggio = "";
    20d2:	64 e8       	ldi	r22, 0x84	; 132
    20d4:	71 e0       	ldi	r23, 0x01	; 1
    20d6:	8f e8       	ldi	r24, 0x8F	; 143
    20d8:	98 e0       	ldi	r25, 0x08	; 8
    20da:	0e 94 f5 30 	call	0x61ea	; 0x61ea <_ZN6StringC1EPKc>
String righeDisplay[] = {"X","X","X","X"};
    20de:	69 e7       	ldi	r22, 0x79	; 121
    20e0:	74 e0       	ldi	r23, 0x04	; 4
    20e2:	87 e7       	ldi	r24, 0x77	; 119
    20e4:	98 e0       	ldi	r25, 0x08	; 8
    20e6:	0e 94 f5 30 	call	0x61ea	; 0x61ea <_ZN6StringC1EPKc>
    20ea:	69 e7       	ldi	r22, 0x79	; 121
    20ec:	74 e0       	ldi	r23, 0x04	; 4
    20ee:	8d e7       	ldi	r24, 0x7D	; 125
    20f0:	98 e0       	ldi	r25, 0x08	; 8
    20f2:	0e 94 f5 30 	call	0x61ea	; 0x61ea <_ZN6StringC1EPKc>
    20f6:	69 e7       	ldi	r22, 0x79	; 121
    20f8:	74 e0       	ldi	r23, 0x04	; 4
    20fa:	83 e8       	ldi	r24, 0x83	; 131
    20fc:	98 e0       	ldi	r25, 0x08	; 8
    20fe:	0e 94 f5 30 	call	0x61ea	; 0x61ea <_ZN6StringC1EPKc>
    2102:	69 e7       	ldi	r22, 0x79	; 121
    2104:	74 e0       	ldi	r23, 0x04	; 4
    2106:	89 e8       	ldi	r24, 0x89	; 137
    2108:	98 e0       	ldi	r25, 0x08	; 8
    210a:	0e 94 f5 30 	call	0x61ea	; 0x61ea <_ZN6StringC1EPKc>

/********************************************************************************************/
/*                    Configurazione Rete                       */
/********************************************************************************************/
 
IPAddress ipCCEC(192, 168, 0, 50);
    210e:	02 e3       	ldi	r16, 0x32	; 50
    2110:	20 e0       	ldi	r18, 0x00	; 0
    2112:	48 ea       	ldi	r20, 0xA8	; 168
    2114:	60 ec       	ldi	r22, 0xC0	; 192
    2116:	81 e7       	ldi	r24, 0x71	; 113
    2118:	98 e0       	ldi	r25, 0x08	; 8
    211a:	0e 94 a1 2d 	call	0x5b42	; 0x5b42 <_ZN9IPAddressC1Ehhhh>
IPAddress myDns(192,168,1, 21); // DNS
    211e:	05 e1       	ldi	r16, 0x15	; 21
    2120:	21 e0       	ldi	r18, 0x01	; 1
    2122:	48 ea       	ldi	r20, 0xA8	; 168
    2124:	60 ec       	ldi	r22, 0xC0	; 192
    2126:	8b e6       	ldi	r24, 0x6B	; 107
    2128:	98 e0       	ldi	r25, 0x08	; 8
    212a:	0e 94 a1 2d 	call	0x5b42	; 0x5b42 <_ZN9IPAddressC1Ehhhh>
IPAddress gateway(192, 168, 0, 1); // GATEWAY
    212e:	01 e0       	ldi	r16, 0x01	; 1
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	48 ea       	ldi	r20, 0xA8	; 168
    2134:	60 ec       	ldi	r22, 0xC0	; 192
    2136:	85 e6       	ldi	r24, 0x65	; 101
    2138:	98 e0       	ldi	r25, 0x08	; 8
    213a:	0e 94 a1 2d 	call	0x5b42	; 0x5b42 <_ZN9IPAddressC1Ehhhh>
IPAddress subnet(255, 255, 0, 0); // SUBNET
    213e:	00 e0       	ldi	r16, 0x00	; 0
    2140:	20 e0       	ldi	r18, 0x00	; 0
    2142:	4f ef       	ldi	r20, 0xFF	; 255
    2144:	6f ef       	ldi	r22, 0xFF	; 255
    2146:	8f e5       	ldi	r24, 0x5F	; 95
    2148:	98 e0       	ldi	r25, 0x08	; 8
    214a:	0e 94 a1 2d 	call	0x5b42	; 0x5b42 <_ZN9IPAddressC1Ehhhh>

char serverATE[]  = "wbpate-test.dipvvf.it";
char serverGAC[]  = "gacweb-test.dipvvf.it";
char serverREST[] = "geoserver.sa.dipvvf.it";

EthernetClient clientLOCAL;
    214e:	82 e5       	ldi	r24, 0x52	; 82
    2150:	98 e0       	ldi	r25, 0x08	; 8
    2152:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <_ZN14EthernetClientC1Ev>
EthernetClient clientATE;
    2156:	85 e4       	ldi	r24, 0x45	; 69
    2158:	98 e0       	ldi	r25, 0x08	; 8
    215a:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <_ZN14EthernetClientC1Ev>

byte mac[] = {0x00, 0x0E, 0x0C, 0xB0, 0x25, 0x6F};

/************ GESTIONE RTC **********/
DS3231M_Class DS3231M;  
    215e:	89 e3       	ldi	r24, 0x39	; 57
    2160:	98 e0       	ldi	r25, 0x08	; 8
    2162:	ba d7       	rcall	.+3956   	; 0x30d8 <_ZN13DS3231M_ClassC1Ev>
const uint8_t SPRINTF_BUFFER_SIZE =     32;  
char          inputBuffer[SPRINTF_BUFFER_SIZE];  
unsigned long secs;                            // store the seconds value
unsigned long UltimoPassaggioStato = 0;        // Timer Stati Procedura
unsigned long Timer = 0;                       // Timer
DateTime nowTimer;
    2164:	40 e0       	ldi	r20, 0x00	; 0
    2166:	50 e0       	ldi	r21, 0x00	; 0
    2168:	ba 01       	movw	r22, r20
    216a:	87 e2       	ldi	r24, 0x27	; 39
    216c:	98 e0       	ldi	r25, 0x08	; 8
    216e:	48 d6       	rcall	.+3216   	; 0x2e00 <_ZN8DateTimeC1Em>
// *********************************

const byte ROWS = 4; //four rows
const byte COLS = 4; //four columns

String TARGA = "";
    2170:	64 e8       	ldi	r22, 0x84	; 132
    2172:	71 e0       	ldi	r23, 0x01	; 1
    2174:	81 e2       	ldi	r24, 0x21	; 33
    2176:	98 e0       	ldi	r25, 0x08	; 8
    2178:	0e 94 f5 30 	call	0x61ea	; 0x61ea <_ZN6StringC1EPKc>
  {'4','5','6','B'},
  {'7','8','9','C'},
  {'*','0','#','.'}
};

PCA9534 gpio;
    217c:	0f 90       	pop	r0
    217e:	0f 90       	pop	r0
    2180:	8e e1       	ldi	r24, 0x1E	; 30
    2182:	98 e0       	ldi	r25, 0x08	; 8
       intConsecutivePresses = 0;                     // reset press counts
       intConsecutiveNonPresses = 0;
     }
    }
  }               
    2184:	0f 91       	pop	r16
    2186:	ef 90       	pop	r14
    2188:	cf 90       	pop	r12
    218a:	af 90       	pop	r10
  {'4','5','6','B'},
  {'7','8','9','C'},
  {'*','0','#','.'}
};

PCA9534 gpio;
    218c:	8f 90       	pop	r8
    218e:	0b c2       	rjmp	.+1046   	; 0x25a6 <_ZN7PCA9534C1Ev>

00002190 <_GLOBAL__sub_D_intConsecutivePresses>:
       intConsecutivePresses = 0;                     // reset press counts
       intConsecutiveNonPresses = 0;
     }
    }
  }               
    2190:	cf 93       	push	r28
    2192:	df 93       	push	r29
// *********************************

const byte ROWS = 4; //four rows
const byte COLS = 4; //four columns

String TARGA = "";
    2194:	81 e2       	ldi	r24, 0x21	; 33
    2196:	98 e0       	ldi	r25, 0x08	; 8
    2198:	0e 94 8e 30 	call	0x611c	; 0x611c <_ZN6StringD1Ev>
EthernetClient clientATE;

byte mac[] = {0x00, 0x0E, 0x0C, 0xB0, 0x25, 0x6F};

/************ GESTIONE RTC **********/
DS3231M_Class DS3231M;  
    219c:	89 e3       	ldi	r24, 0x39	; 57
    219e:	98 e0       	ldi	r25, 0x08	; 8
    21a0:	a2 d7       	rcall	.+3908   	; 0x30e6 <_ZN13DS3231M_ClassD1Ev>

String RaccoltaDati[] = {"","","","","",""};
String Carburante = "X";
String Risposta = "";
String Messaggio = "";
String righeDisplay[] = {"X","X","X","X"};
    21a2:	89 e8       	ldi	r24, 0x89	; 137
    21a4:	98 e0       	ldi	r25, 0x08	; 8
    21a6:	0e 94 8e 30 	call	0x611c	; 0x611c <_ZN6StringD1Ev>
    21aa:	83 e8       	ldi	r24, 0x83	; 131
    21ac:	98 e0       	ldi	r25, 0x08	; 8
    21ae:	0e 94 8e 30 	call	0x611c	; 0x611c <_ZN6StringD1Ev>
    21b2:	8d e7       	ldi	r24, 0x7D	; 125
    21b4:	98 e0       	ldi	r25, 0x08	; 8
    21b6:	0e 94 8e 30 	call	0x611c	; 0x611c <_ZN6StringD1Ev>
    21ba:	87 e7       	ldi	r24, 0x77	; 119
    21bc:	98 e0       	ldi	r25, 0x08	; 8
    21be:	0e 94 8e 30 	call	0x611c	; 0x611c <_ZN6StringD1Ev>
String RispostaHTTP = "";

String RaccoltaDati[] = {"","","","","",""};
String Carburante = "X";
String Risposta = "";
String Messaggio = "";
    21c2:	8f e8       	ldi	r24, 0x8F	; 143
    21c4:	98 e0       	ldi	r25, 0x08	; 8
    21c6:	0e 94 8e 30 	call	0x611c	; 0x611c <_ZN6StringD1Ev>
int HTTP_len_response = 12;
String RispostaHTTP = "";

String RaccoltaDati[] = {"","","","","",""};
String Carburante = "X";
String Risposta = "";
    21ca:	85 e9       	ldi	r24, 0x95	; 149
    21cc:	98 e0       	ldi	r25, 0x08	; 8
    21ce:	0e 94 8e 30 	call	0x611c	; 0x611c <_ZN6StringD1Ev>

int HTTP_len_response = 12;
String RispostaHTTP = "";

String RaccoltaDati[] = {"","","","","",""};
String Carburante = "X";
    21d2:	8b e9       	ldi	r24, 0x9B	; 155
    21d4:	98 e0       	ldi	r25, 0x08	; 8
    21d6:	0e 94 8e 30 	call	0x611c	; 0x611c <_ZN6StringD1Ev>
/*** GESTIONE HTTP REQUEST ***/

int HTTP_len_response = 12;
String RispostaHTTP = "";

String RaccoltaDati[] = {"","","","","",""};
    21da:	c5 ec       	ldi	r28, 0xC5	; 197
    21dc:	d8 e0       	ldi	r29, 0x08	; 8
    21de:	26 97       	sbiw	r28, 0x06	; 6
    21e0:	ce 01       	movw	r24, r28
    21e2:	0e 94 8e 30 	call	0x611c	; 0x611c <_ZN6StringD1Ev>
    21e6:	88 e0       	ldi	r24, 0x08	; 8
    21e8:	c1 3a       	cpi	r28, 0xA1	; 161
    21ea:	d8 07       	cpc	r29, r24
    21ec:	c1 f7       	brne	.-16     	; 0x21de <_GLOBAL__sub_D_intConsecutivePresses+0x4e>
volatile int impulsi = 0;   // Variabile per il conteggio degli impulsi generati dal pulser

/*** GESTIONE HTTP REQUEST ***/

int HTTP_len_response = 12;
String RispostaHTTP = "";
    21ee:	85 ec       	ldi	r24, 0xC5	; 197
    21f0:	98 e0       	ldi	r25, 0x08	; 8
    21f2:	0e 94 8e 30 	call	0x611c	; 0x611c <_ZN6StringD1Ev>
LiquidCrystal_I2C lcd(0x27, 2, 1, 0, 4, 5, 6, 7, 3, POSITIVE);  // Set the LCD I2C address
uint8_t Clessidra[8] = {0x1F, 0x11, 0x0A, 0x04, 0x04, 0x0E, 0x1F, 0x1F,}; 
NFC_PN532 nfc(PN532_IRQ, PN532_RESET);

String StatoAttuale ="START...";
String strURLAPI = "";
    21f6:	81 ed       	ldi	r24, 0xD1	; 209
    21f8:	98 e0       	ldi	r25, 0x08	; 8
    21fa:	0e 94 8e 30 	call	0x611c	; 0x611c <_ZN6StringD1Ev>

LiquidCrystal_I2C lcd(0x27, 2, 1, 0, 4, 5, 6, 7, 3, POSITIVE);  // Set the LCD I2C address
uint8_t Clessidra[8] = {0x1F, 0x11, 0x0A, 0x04, 0x04, 0x0E, 0x1F, 0x1F,}; 
NFC_PN532 nfc(PN532_IRQ, PN532_RESET);

String StatoAttuale ="START...";
    21fe:	87 ed       	ldi	r24, 0xD7	; 215
    2200:	98 e0       	ldi	r25, 0x08	; 8
    2202:	0e 94 8e 30 	call	0x611c	; 0x611c <_ZN6StringD1Ev>
const uint8_t I2C_PCA9534_ADDR = 0x20;

volatile int intConsecutivePresses = 0;
volatile int intConsecutiveNonPresses = 0;

struct mezzoType {
    2206:	8c e1       	ldi	r24, 0x1C	; 28
    2208:	99 e0       	ldi	r25, 0x09	; 9
    220a:	0e 94 8e 30 	call	0x611c	; 0x611c <_ZN6StringD1Ev>
    220e:	86 e1       	ldi	r24, 0x16	; 22
    2210:	99 e0       	ldi	r25, 0x09	; 9
       intConsecutivePresses = 0;                     // reset press counts
       intConsecutiveNonPresses = 0;
     }
    }
  }               
    2212:	df 91       	pop	r29
    2214:	cf 91       	pop	r28
const uint8_t I2C_PCA9534_ADDR = 0x20;

volatile int intConsecutivePresses = 0;
volatile int intConsecutiveNonPresses = 0;

struct mezzoType {
    2216:	0c 94 8e 30 	jmp	0x611c	; 0x611c <_ZN6StringD1Ev>

0000221a <setup>:
    Serial.print("FAIL");
  }
  printTab(1);
}

void setup() {
    221a:	cf 92       	push	r12
    221c:	df 92       	push	r13
    221e:	ef 92       	push	r14
    2220:	ff 92       	push	r15
    2222:	0f 93       	push	r16
    2224:	1f 93       	push	r17
    2226:	cf 93       	push	r28
    2228:	df 93       	push	r29
    222a:	00 d0       	rcall	.+0      	; 0x222c <setup+0x12>
    222c:	00 d0       	rcall	.+0      	; 0x222e <setup+0x14>
    222e:	00 d0       	rcall	.+0      	; 0x2230 <setup+0x16>
    2230:	cd b7       	in	r28, 0x3d	; 61
    2232:	de b7       	in	r29, 0x3e	; 62
    2234:	2f ef       	ldi	r18, 0xFF	; 255
    2236:	81 ee       	ldi	r24, 0xE1	; 225
    2238:	94 e0       	ldi	r25, 0x04	; 4
    223a:	21 50       	subi	r18, 0x01	; 1
    223c:	80 40       	sbci	r24, 0x00	; 0
    223e:	90 40       	sbci	r25, 0x00	; 0
    2240:	e1 f7       	brne	.-8      	; 0x223a <setup+0x20>
    2242:	00 c0       	rjmp	.+0      	; 0x2244 <setup+0x2a>
    2244:	00 00       	nop
/*********************************************************************************************/
static const uint8_t RELE1 = PORTC7;
static const uint8_t RELE2 = PORTA7;
/*********************************************************************************************/
static inline void initSS_FLASH()  { DDRB |= (1 << PB4); } // set DDRB bit 4, sets PB4 for output
static inline void initSS_ETH()    { DDRC |= (1 << PC4); } // set DDRC bit 4, sets PC4 for output
    2246:	3c 9a       	sbi	0x07, 4	; 7
    2248:	8f e1       	ldi	r24, 0x1F	; 31
    224a:	9e e4       	ldi	r25, 0x4E	; 78
    224c:	01 97       	sbiw	r24, 0x01	; 1
    224e:	f1 f7       	brne	.-4      	; 0x224c <setup+0x32>
    2250:	00 c0       	rjmp	.+0      	; 0x2252 <setup+0x38>
    2252:	00 00       	nop
	
	_delay_ms(100);

   initSS_ETH();
   _delay_ms(5);
   disable_ETH();
    2254:	0e 94 94 01 	call	0x328	; 0x328 <_ZL11disable_ETHv>
   
   // Serial.begin(9600);
   Serial.println(" inizio Setup ......");
    2258:	6c e6       	ldi	r22, 0x6C	; 108
    225a:	76 e0       	ldi	r23, 0x06	; 6
    225c:	8c e7       	ldi	r24, 0x7C	; 124
    225e:	9a e0       	ldi	r25, 0x0A	; 10
    2260:	0e 94 5f 2e 	call	0x5cbe	; 0x5cbe <_ZN5Print7printlnEPKc>
 
  /*******************************************************************************************/
  DDRC |= (1 << BUZZER); // set BUZZER (PC6) for output
    2264:	3e 9a       	sbi	0x07, 6	; 7
  DDRC |= (1 << RELE1);  // Rele1
    2266:	3f 9a       	sbi	0x07, 7	; 7
  DDRA |= (1 << RELE2);  // Rele2   // set PA7 e PC7 come output 
    2268:	0f 9a       	sbi	0x01, 7	; 1
    226a:	8f e3       	ldi	r24, 0x3F	; 63
    226c:	9c e9       	ldi	r25, 0x9C	; 156
    226e:	01 97       	sbiw	r24, 0x01	; 1
    2270:	f1 f7       	brne	.-4      	; 0x226e <setup+0x54>
    2272:	00 c0       	rjmp	.+0      	; 0x2274 <setup+0x5a>
    2274:	00 00       	nop
  _delay_ms(10);
  SET_BIT(PORTC,RELE1); // Apri RELE1
    2276:	47 9a       	sbi	0x08, 7	; 8
    2278:	8f e3       	ldi	r24, 0x3F	; 63
    227a:	9c e9       	ldi	r25, 0x9C	; 156
    227c:	01 97       	sbiw	r24, 0x01	; 1
    227e:	f1 f7       	brne	.-4      	; 0x227c <setup+0x62>
    2280:	00 c0       	rjmp	.+0      	; 0x2282 <setup+0x68>
    2282:	00 00       	nop
  _delay_ms(10);
  SET_BIT(PORTA,RELE2); // Apri RELE2
    2284:	17 9a       	sbi	0x02, 7	; 2
  printLine(); 
    2286:	0e 94 09 02 	call	0x412	; 0x412 <_Z9printLinev>
  
  /***************************LCD******************************/
  
  lcd.begin(20,4);         // Inizializza display LCD 20x4 e accendi e spegni 2 volte
    228a:	20 e0       	ldi	r18, 0x00	; 0
    228c:	44 e0       	ldi	r20, 0x04	; 4
    228e:	64 e1       	ldi	r22, 0x14	; 20
    2290:	84 ef       	ldi	r24, 0xF4	; 244
    2292:	98 e0       	ldi	r25, 0x08	; 8
    2294:	0e 94 af 27 	call	0x4f5e	; 0x4f5e <_ZN17LiquidCrystal_I2C5beginEhhh>

  // ------- 2 blinks -------------
  for(int i = 0; i< 2; i++)
  {
    lcd.backlight();
    2298:	84 ef       	ldi	r24, 0xF4	; 244
    229a:	98 e0       	ldi	r25, 0x08	; 8
    229c:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <_ZN3LCD9backlightEv>
    22a0:	9f ef       	ldi	r25, 0xFF	; 255
    22a2:	24 e3       	ldi	r18, 0x34	; 52
    22a4:	8c e0       	ldi	r24, 0x0C	; 12
    22a6:	91 50       	subi	r25, 0x01	; 1
    22a8:	20 40       	sbci	r18, 0x00	; 0
    22aa:	80 40       	sbci	r24, 0x00	; 0
    22ac:	e1 f7       	brne	.-8      	; 0x22a6 <setup+0x8c>
    22ae:	00 c0       	rjmp	.+0      	; 0x22b0 <setup+0x96>
    22b0:	00 00       	nop
    _delay_ms(250);
    lcd.noBacklight();
    22b2:	84 ef       	ldi	r24, 0xF4	; 244
    22b4:	98 e0       	ldi	r25, 0x08	; 8
    22b6:	0e 94 94 25 	call	0x4b28	; 0x4b28 <_ZN3LCD11noBacklightEv>
    22ba:	9f ef       	ldi	r25, 0xFF	; 255
    22bc:	24 e3       	ldi	r18, 0x34	; 52
    22be:	8c e0       	ldi	r24, 0x0C	; 12
    22c0:	91 50       	subi	r25, 0x01	; 1
    22c2:	20 40       	sbci	r18, 0x00	; 0
    22c4:	80 40       	sbci	r24, 0x00	; 0
    22c6:	e1 f7       	brne	.-8      	; 0x22c0 <setup+0xa6>
    22c8:	00 c0       	rjmp	.+0      	; 0x22ca <setup+0xb0>
    22ca:	00 00       	nop
  lcd.begin(20,4);         // Inizializza display LCD 20x4 e accendi e spegni 2 volte

  // ------- 2 blinks -------------
  for(int i = 0; i< 2; i++)
  {
    lcd.backlight();
    22cc:	84 ef       	ldi	r24, 0xF4	; 244
    22ce:	98 e0       	ldi	r25, 0x08	; 8
    22d0:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <_ZN3LCD9backlightEv>
    22d4:	9f ef       	ldi	r25, 0xFF	; 255
    22d6:	24 e3       	ldi	r18, 0x34	; 52
    22d8:	8c e0       	ldi	r24, 0x0C	; 12
    22da:	91 50       	subi	r25, 0x01	; 1
    22dc:	20 40       	sbci	r18, 0x00	; 0
    22de:	80 40       	sbci	r24, 0x00	; 0
    22e0:	e1 f7       	brne	.-8      	; 0x22da <setup+0xc0>
    22e2:	00 c0       	rjmp	.+0      	; 0x22e4 <setup+0xca>
    22e4:	00 00       	nop
    _delay_ms(250);
    lcd.noBacklight();
    22e6:	84 ef       	ldi	r24, 0xF4	; 244
    22e8:	98 e0       	ldi	r25, 0x08	; 8
    22ea:	0e 94 94 25 	call	0x4b28	; 0x4b28 <_ZN3LCD11noBacklightEv>
    22ee:	9f ef       	ldi	r25, 0xFF	; 255
    22f0:	24 e3       	ldi	r18, 0x34	; 52
    22f2:	8c e0       	ldi	r24, 0x0C	; 12
    22f4:	91 50       	subi	r25, 0x01	; 1
    22f6:	20 40       	sbci	r18, 0x00	; 0
    22f8:	80 40       	sbci	r24, 0x00	; 0
    22fa:	e1 f7       	brne	.-8      	; 0x22f4 <setup+0xda>
    22fc:	00 c0       	rjmp	.+0      	; 0x22fe <setup+0xe4>
    22fe:	00 00       	nop
    _delay_ms(250);
  }

  lcd.createChar(1, Clessidra); // Creo CHAR Clessidra
    2300:	4d e5       	ldi	r20, 0x5D	; 93
    2302:	51 e0       	ldi	r21, 0x01	; 1
    2304:	61 e0       	ldi	r22, 0x01	; 1
    2306:	84 ef       	ldi	r24, 0xF4	; 244
    2308:	98 e0       	ldi	r25, 0x08	; 8
    230a:	0e 94 72 26 	call	0x4ce4	; 0x4ce4 <_ZN3LCD10createCharEhPh>
    230e:	9f ef       	ldi	r25, 0xFF	; 255
    2310:	29 ef       	ldi	r18, 0xF9	; 249
    2312:	80 e0       	ldi	r24, 0x00	; 0
    2314:	91 50       	subi	r25, 0x01	; 1
    2316:	20 40       	sbci	r18, 0x00	; 0
    2318:	80 40       	sbci	r24, 0x00	; 0
    231a:	e1 f7       	brne	.-8      	; 0x2314 <setup+0xfa>
    231c:	00 c0       	rjmp	.+0      	; 0x231e <setup+0x104>
    231e:	00 00       	nop
  _delay_ms(20);
  lcd.backlight();
    2320:	84 ef       	ldi	r24, 0xF4	; 244
    2322:	98 e0       	ldi	r25, 0x08	; 8
    2324:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <_ZN3LCD9backlightEv>
    2328:	07 e7       	ldi	r16, 0x77	; 119
    232a:	18 e0       	ldi	r17, 0x08	; 8

  for (int r=0;r<4;r++)
    righeDisplay[r]="";
    232c:	64 e8       	ldi	r22, 0x84	; 132
    232e:	71 e0       	ldi	r23, 0x01	; 1
    2330:	c8 01       	movw	r24, r16
    2332:	0e 94 74 31 	call	0x62e8	; 0x62e8 <_ZN6StringaSEPKc>
    2336:	0a 5f       	subi	r16, 0xFA	; 250
    2338:	1f 4f       	sbci	r17, 0xFF	; 255

  lcd.createChar(1, Clessidra); // Creo CHAR Clessidra
  _delay_ms(20);
  lcd.backlight();

  for (int r=0;r<4;r++)
    233a:	98 e0       	ldi	r25, 0x08	; 8
    233c:	0f 38       	cpi	r16, 0x8F	; 143
    233e:	19 07       	cpc	r17, r25
    2340:	a9 f7       	brne	.-22     	; 0x232c <setup+0x112>
    righeDisplay[r]="";
  
   printLine();
    2342:	0e 94 09 02 	call	0x412	; 0x412 <_Z9printLinev>
   
  /***************************NFC*************************/ 
  
  nfc.begin(); 
    2346:	8d ed       	ldi	r24, 0xDD	; 221
    2348:	98 e0       	ldi	r25, 0x08	; 8
    234a:	de d1       	rcall	.+956    	; 0x2708 <_ZN9NFC_PN5325beginEv>
    234c:	2f ef       	ldi	r18, 0xFF	; 255
    234e:	80 e7       	ldi	r24, 0x70	; 112
    2350:	92 e0       	ldi	r25, 0x02	; 2
    2352:	21 50       	subi	r18, 0x01	; 1
    2354:	80 40       	sbci	r24, 0x00	; 0
    2356:	90 40       	sbci	r25, 0x00	; 0
    2358:	e1 f7       	brne	.-8      	; 0x2352 <setup+0x138>
    235a:	00 c0       	rjmp	.+0      	; 0x235c <setup+0x142>
    235c:	00 00       	nop
  
  _delay_ms(50);

  uint32_t versiondata = nfc.getFirmwareVersion();
    235e:	8d ed       	ldi	r24, 0xDD	; 221
    2360:	98 e0       	ldi	r25, 0x08	; 8
    2362:	72 d3       	rcall	.+1764   	; 0x2a48 <_ZN9NFC_PN53218getFirmwareVersionEv>
    2364:	6b 01       	movw	r12, r22
    2366:	7c 01       	movw	r14, r24
  if (! versiondata) {
    2368:	67 2b       	or	r22, r23
    236a:	68 2b       	or	r22, r24
    236c:	69 2b       	or	r22, r25
    236e:	69 f5       	brne	.+90     	; 0x23ca <setup+0x1b0>
    Serial.print("Modulo PN532 non trovato");
    2370:	61 e8       	ldi	r22, 0x81	; 129
    2372:	76 e0       	ldi	r23, 0x06	; 6
    2374:	8c e7       	ldi	r24, 0x7C	; 124
    2376:	9a e0       	ldi	r25, 0x0A	; 10
    2378:	0e 94 34 2e 	call	0x5c68	; 0x5c68 <_ZN5Print5printEPKc>
    lcd.backlight();
    237c:	84 ef       	ldi	r24, 0xF4	; 244
    237e:	98 e0       	ldi	r25, 0x08	; 8
    2380:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <_ZN3LCD9backlightEv>
    2384:	2f ef       	ldi	r18, 0xFF	; 255
    2386:	84 e3       	ldi	r24, 0x34	; 52
    2388:	9c e0       	ldi	r25, 0x0C	; 12
    238a:	21 50       	subi	r18, 0x01	; 1
    238c:	80 40       	sbci	r24, 0x00	; 0
    238e:	90 40       	sbci	r25, 0x00	; 0
    2390:	e1 f7       	brne	.-8      	; 0x238a <setup+0x170>
    2392:	00 c0       	rjmp	.+0      	; 0x2394 <setup+0x17a>
    2394:	00 00       	nop
    _delay_ms(250);
    lcd.clear();
    2396:	84 ef       	ldi	r24, 0xF4	; 244
    2398:	98 e0       	ldi	r25, 0x08	; 8
    239a:	0e 94 a4 25 	call	0x4b48	; 0x4b48 <_ZN3LCD5clearEv>
    lcd.print("Modulo PN532 non trovato ");    
    239e:	6a e9       	ldi	r22, 0x9A	; 154
    23a0:	76 e0       	ldi	r23, 0x06	; 6
    23a2:	84 ef       	ldi	r24, 0xF4	; 244
    23a4:	98 e0       	ldi	r25, 0x08	; 8
    23a6:	0e 94 34 2e 	call	0x5c68	; 0x5c68 <_ZN5Print5printEPKc>
    23aa:	2f ef       	ldi	r18, 0xFF	; 255
    23ac:	87 ea       	ldi	r24, 0xA7	; 167
    23ae:	91 e6       	ldi	r25, 0x61	; 97
    23b0:	21 50       	subi	r18, 0x01	; 1
    23b2:	80 40       	sbci	r24, 0x00	; 0
    23b4:	90 40       	sbci	r25, 0x00	; 0
    23b6:	e1 f7       	brne	.-8      	; 0x23b0 <setup+0x196>
    23b8:	00 c0       	rjmp	.+0      	; 0x23ba <setup+0x1a0>
    23ba:	00 00       	nop
    _delay_ms(2000);                            
    StatoAttuale  = " CHIAMA ASSISTENZA";   
    23bc:	64 eb       	ldi	r22, 0xB4	; 180
    23be:	76 e0       	ldi	r23, 0x06	; 6
    23c0:	87 ed       	ldi	r24, 0xD7	; 215
    23c2:	98 e0       	ldi	r25, 0x08	; 8
    23c4:	0e 94 74 31 	call	0x62e8	; 0x62e8 <_ZN6StringaSEPKc>
    23c8:	06 c0       	rjmp	.+12     	; 0x23d6 <setup+0x1bc>
    //while (1); // halt  // Aspetta per sempre
  } else {Serial.println("Modulo NFC OK ......");}
    23ca:	67 ec       	ldi	r22, 0xC7	; 199
    23cc:	76 e0       	ldi	r23, 0x06	; 6
    23ce:	8c e7       	ldi	r24, 0x7C	; 124
    23d0:	9a e0       	ldi	r25, 0x0A	; 10
    23d2:	0e 94 5f 2e 	call	0x5cbe	; 0x5cbe <_ZN5Print7printlnEPKc>
  
  Serial.print("Found chip PN5"); Serial.println((versiondata>>24) & 0xFF, HEX);
    23d6:	6c ed       	ldi	r22, 0xDC	; 220
    23d8:	76 e0       	ldi	r23, 0x06	; 6
    23da:	8c e7       	ldi	r24, 0x7C	; 124
    23dc:	9a e0       	ldi	r25, 0x0A	; 10
    23de:	0e 94 34 2e 	call	0x5c68	; 0x5c68 <_ZN5Print5printEPKc>
    23e2:	4f 2d       	mov	r20, r15
    23e4:	55 27       	eor	r21, r21
    23e6:	66 27       	eor	r22, r22
    23e8:	77 27       	eor	r23, r23
    23ea:	20 e1       	ldi	r18, 0x10	; 16
    23ec:	30 e0       	ldi	r19, 0x00	; 0
    23ee:	8c e7       	ldi	r24, 0x7C	; 124
    23f0:	9a e0       	ldi	r25, 0x0A	; 10
    23f2:	0e 94 c8 2e 	call	0x5d90	; 0x5d90 <_ZN5Print7printlnEmi>
  Serial.print("Firmware ver. "); Serial.print((versiondata>>16) & 0xFF, DEC);
    23f6:	6b ee       	ldi	r22, 0xEB	; 235
    23f8:	76 e0       	ldi	r23, 0x06	; 6
    23fa:	8c e7       	ldi	r24, 0x7C	; 124
    23fc:	9a e0       	ldi	r25, 0x0A	; 10
    23fe:	0e 94 34 2e 	call	0x5c68	; 0x5c68 <_ZN5Print5printEPKc>
    2402:	4e 2d       	mov	r20, r14
    2404:	50 e0       	ldi	r21, 0x00	; 0
    2406:	60 e0       	ldi	r22, 0x00	; 0
    2408:	70 e0       	ldi	r23, 0x00	; 0
    240a:	2a e0       	ldi	r18, 0x0A	; 10
    240c:	30 e0       	ldi	r19, 0x00	; 0
    240e:	8c e7       	ldi	r24, 0x7C	; 124
    2410:	9a e0       	ldi	r25, 0x0A	; 10
    2412:	0e 94 b6 2e 	call	0x5d6c	; 0x5d6c <_ZN5Print5printEmi>
  Serial.print('.'); Serial.println((versiondata>>8) & 0xFF, DEC);
    2416:	6e e2       	ldi	r22, 0x2E	; 46
    2418:	8c e7       	ldi	r24, 0x7C	; 124
    241a:	9a e0       	ldi	r25, 0x0A	; 10
    241c:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <_ZN5Print5printEc>
    2420:	4d 2d       	mov	r20, r13
    2422:	50 e0       	ldi	r21, 0x00	; 0
    2424:	60 e0       	ldi	r22, 0x00	; 0
    2426:	70 e0       	ldi	r23, 0x00	; 0
    2428:	2a e0       	ldi	r18, 0x0A	; 10
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	8c e7       	ldi	r24, 0x7C	; 124
    242e:	9a e0       	ldi	r25, 0x0A	; 10
    2430:	0e 94 c8 2e 	call	0x5d90	; 0x5d90 <_ZN5Print7printlnEmi>

  nfc.setPassiveActivationRetries(0xFF);   
    2434:	6f ef       	ldi	r22, 0xFF	; 255
    2436:	8d ed       	ldi	r24, 0xDD	; 221
    2438:	98 e0       	ldi	r25, 0x08	; 8
    243a:	7c d3       	rcall	.+1784   	; 0x2b34 <_ZN9NFC_PN53227setPassiveActivationRetriesEh>
  nfc.SAMConfig();
    243c:	8d ed       	ldi	r24, 0xDD	; 221
    243e:	98 e0       	ldi	r25, 0x08	; 8
    2440:	4b d3       	rcall	.+1686   	; 0x2ad8 <_ZN9NFC_PN5329SAMConfigEv>
    2442:	0e 94 09 02 	call	0x412	; 0x412 <_Z9printLinev>
  printLine();
    2446:	40 ea       	ldi	r20, 0xA0	; 160
  /***************************SPY FLASH*************************/  
  
  /*************************** RTC ************************/
  while (!DS3231M.begin()) {                                                 
    2448:	56 e8       	ldi	r21, 0x86	; 134
    244a:	61 e0       	ldi	r22, 0x01	; 1
    244c:	70 e0       	ldi	r23, 0x00	; 0
    244e:	89 e3       	ldi	r24, 0x39	; 57
    2450:	98 e0       	ldi	r25, 0x08	; 8
    2452:	8c d6       	rcall	.+3352   	; 0x316c <_ZN13DS3231M_Class5beginEm>
    2454:	81 11       	cpse	r24, r1
    2456:	10 c0       	rjmp	.+32     	; 0x2478 <setup+0x25e>
    2458:	62 ee       	ldi	r22, 0xE2	; 226
    Serial.println(F("Unable to find DS3231MM. Checking again in 3s."));     
    245a:	71 e0       	ldi	r23, 0x01	; 1
    245c:	8c e7       	ldi	r24, 0x7C	; 124
    245e:	9a e0       	ldi	r25, 0x0A	; 10
    2460:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <_ZN5Print7printlnEPK19__FlashStringHelper>
    2464:	2f ef       	ldi	r18, 0xFF	; 255
    2466:	83 ed       	ldi	r24, 0xD3	; 211
    2468:	90 e3       	ldi	r25, 0x30	; 48
    246a:	21 50       	subi	r18, 0x01	; 1
    246c:	80 40       	sbci	r24, 0x00	; 0
    246e:	90 40       	sbci	r25, 0x00	; 0
    2470:	e1 f7       	brne	.-8      	; 0x246a <setup+0x250>
    2472:	00 c0       	rjmp	.+0      	; 0x2474 <setup+0x25a>
    2474:	00 00       	nop
    2476:	e7 cf       	rjmp	.-50     	; 0x2446 <setup+0x22c>
    2478:	2f ef       	ldi	r18, 0xFF	; 255
    247a:	80 e7       	ldi	r24, 0x70	; 112
    247c:	92 e0       	ldi	r25, 0x02	; 2
    247e:	21 50       	subi	r18, 0x01	; 1
    2480:	80 40       	sbci	r24, 0x00	; 0
    2482:	90 40       	sbci	r25, 0x00	; 0
    2484:	e1 f7       	brne	.-8      	; 0x247e <setup+0x264>
    2486:	00 c0       	rjmp	.+0      	; 0x2488 <setup+0x26e>
    2488:	00 00       	nop
    248a:	64 ec       	ldi	r22, 0xC4	; 196
    _delay_ms(1000);                                                         
  } 
  _delay_ms(50);

  Serial.println(F("RTC chip DS3231M initialized."));                                 
    248c:	71 e0       	ldi	r23, 0x01	; 1
    248e:	8c e7       	ldi	r24, 0x7C	; 124
    2490:	9a e0       	ldi	r25, 0x0A	; 10
    2492:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <_ZN5Print7printlnEPK19__FlashStringHelper>
  DS3231M.adjust();
    2496:	89 e3       	ldi	r24, 0x39	; 57
    2498:	98 e0       	ldi	r25, 0x08	; 8
    249a:	c6 d7       	rcall	.+3980   	; 0x3428 <_ZN13DS3231M_Class6adjustEv>
    249c:	0e 94 09 02 	call	0x412	; 0x412 <_Z9printLinev>
  printLine();
    24a0:	6a ef       	ldi	r22, 0xFA	; 250
  /*************************** POTENZIOMETRI ************************/
  Serial.println("Inizializzo POTENZIOMETRI per livello pulser.......");
    24a2:	76 e0       	ldi	r23, 0x06	; 6
    24a4:	8c e7       	ldi	r24, 0x7C	; 124
    24a6:	9a e0       	ldi	r25, 0x0A	; 10
    24a8:	0e 94 5f 2e 	call	0x5cbe	; 0x5cbe <_ZN5Print7printlnEPKc>
    24ac:	86 e2       	ldi	r24, 0x26	; 38
  
  Wire.begin(); // join i2c bus (address optional for master) 
    24ae:	9a e0       	ldi	r25, 0x0A	; 10
    24b0:	0e 94 12 2b 	call	0x5624	; 0x5624 <_ZN7TwoWire5beginEv>
    24b4:	68 e2       	ldi	r22, 0x28	; 40
  
  Wire.beginTransmission(0x28);  // (0x50) POTENZIOMETRO U11
    24b6:	70 e0       	ldi	r23, 0x00	; 0
    24b8:	86 e2       	ldi	r24, 0x26	; 38
    24ba:	9a e0       	ldi	r25, 0x0A	; 10
    24bc:	0e 94 2f 2b 	call	0x565e	; 0x565e <_ZN7TwoWire17beginTransmissionEi>
    24c0:	60 e0       	ldi	r22, 0x00	; 0
  Wire.write(byte(0x00));        // Wiper Register
    24c2:	86 e2       	ldi	r24, 0x26	; 38
    24c4:	9a e0       	ldi	r25, 0x0A	; 10
    24c6:	0e 94 d4 2a 	call	0x55a8	; 0x55a8 <_ZN7TwoWire5writeEh>
    24ca:	62 e3       	ldi	r22, 0x32	; 50
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    24cc:	86 e2       	ldi	r24, 0x26	; 38
    24ce:	9a e0       	ldi	r25, 0x0A	; 10
    24d0:	0e 94 d4 2a 	call	0x55a8	; 0x55a8 <_ZN7TwoWire5writeEh>
    24d4:	86 e2       	ldi	r24, 0x26	; 38
  Wire.write(50);                // Valore del potenziomentro circa 6 volt
  Wire.endTransmission(); 
    24d6:	9a e0       	ldi	r25, 0x0A	; 10
    24d8:	0e 94 a6 2b 	call	0x574c	; 0x574c <_ZN7TwoWire15endTransmissionEv>
    24dc:	2f ef       	ldi	r18, 0xFF	; 255
    24de:	80 e7       	ldi	r24, 0x70	; 112
    24e0:	92 e0       	ldi	r25, 0x02	; 2
    24e2:	21 50       	subi	r18, 0x01	; 1
    24e4:	80 40       	sbci	r24, 0x00	; 0
    24e6:	90 40       	sbci	r25, 0x00	; 0
    24e8:	e1 f7       	brne	.-8      	; 0x24e2 <setup+0x2c8>
    24ea:	00 c0       	rjmp	.+0      	; 0x24ec <setup+0x2d2>
    24ec:	00 00       	nop
    24ee:	62 e5       	ldi	r22, 0x52	; 82
   
   _delay_ms(50);     
   
   Wire.beginTransmission(0x52);  // (0x52) POTENZIOMETRO U12
    24f0:	70 e0       	ldi	r23, 0x00	; 0
    24f2:	86 e2       	ldi	r24, 0x26	; 38
    24f4:	9a e0       	ldi	r25, 0x0A	; 10
    24f6:	0e 94 2f 2b 	call	0x565e	; 0x565e <_ZN7TwoWire17beginTransmissionEi>
    24fa:	60 e0       	ldi	r22, 0x00	; 0
   Wire.write(byte(0x00));        // Wiper Register
    24fc:	86 e2       	ldi	r24, 0x26	; 38
    24fe:	9a e0       	ldi	r25, 0x0A	; 10
    2500:	0e 94 d4 2a 	call	0x55a8	; 0x55a8 <_ZN7TwoWire5writeEh>
    2504:	62 e3       	ldi	r22, 0x32	; 50
    2506:	86 e2       	ldi	r24, 0x26	; 38
    2508:	9a e0       	ldi	r25, 0x0A	; 10
    250a:	0e 94 d4 2a 	call	0x55a8	; 0x55a8 <_ZN7TwoWire5writeEh>
    250e:	86 e2       	ldi	r24, 0x26	; 38
   Wire.write(50);                // Valore del potenziomentro circa 6 volt
   Wire.endTransmission(); 
    2510:	9a e0       	ldi	r25, 0x0A	; 10
    2512:	0e 94 a6 2b 	call	0x574c	; 0x574c <_ZN7TwoWire15endTransmissionEv>
    2516:	86 e2       	ldi	r24, 0x26	; 38
  
   Wire.end();
    2518:	9a e0       	ldi	r25, 0x0A	; 10
    251a:	0e 94 21 2b 	call	0x5642	; 0x5642 <_ZN7TwoWire3endEv>
    251e:	6e e2       	ldi	r22, 0x2E	; 46

   Serial.println("POTENZIOMETRI OK");
    2520:	77 e0       	ldi	r23, 0x07	; 7
    2522:	8c e7       	ldi	r24, 0x7C	; 124
    2524:	9a e0       	ldi	r25, 0x0A	; 10
    2526:	0e 94 5f 2e 	call	0x5cbe	; 0x5cbe <_ZN5Print7printlnEPKc>
    252a:	0e 94 09 02 	call	0x412	; 0x412 <_Z9printLinev>
   printLine();
  /*************************KEYPAD*********************/
   gpio.begin(I2C_PCA9534_ADDR);
    252e:	60 e2       	ldi	r22, 0x20	; 32
    2530:	8e e1       	ldi	r24, 0x1E	; 30
    2532:	98 e0       	ldi	r25, 0x08	; 8
    2534:	3d d0       	rcall	.+122    	; 0x25b0 <_ZN7PCA95345beginEh>
   
  // set REG IOexpander OPREG 11000011,INVREG 00000000,CONFREG 00111100
   gpio.setporteIoExp(0xC3,0x00,0x3C); 
    2536:	2c e3       	ldi	r18, 0x3C	; 60
    2538:	40 e0       	ldi	r20, 0x00	; 0
    253a:	63 ec       	ldi	r22, 0xC3	; 195
    253c:	8e e1       	ldi	r24, 0x1E	; 30
    253e:	98 e0       	ldi	r25, 0x08	; 8
    2540:	3d d0       	rcall	.+122    	; 0x25bc <_ZN7PCA953413setporteIoExpEhhh>
    2542:	8e ef       	ldi	r24, 0xFE	; 254
  /**************** SETTING INIZIALI ******************/      
  
  stato_procedura = - 2; // set stato di partenza
    2544:	9f ef       	ldi	r25, 0xFF	; 255
    2546:	90 93 ce 08 	sts	0x08CE, r25	; 0x8008ce <stato_procedura+0x1>
    254a:	80 93 cd 08 	sts	0x08CD, r24	; 0x8008cd <stato_procedura>
    254e:	6f e3       	ldi	r22, 0x3F	; 63
  
  StatoAttuale = "Starting ...."; 
    2550:	77 e0       	ldi	r23, 0x07	; 7
    2552:	87 ed       	ldi	r24, 0xD7	; 215
    2554:	98 e0       	ldi	r25, 0x08	; 8
    2556:	0e 94 74 31 	call	0x62e8	; 0x62e8 <_ZN6StringaSEPKc>
    255a:	6d e4       	ldi	r22, 0x4D	; 77
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    255c:	77 e0       	ldi	r23, 0x07	; 7
    255e:	ce 01       	movw	r24, r28
    2560:	01 96       	adiw	r24, 0x01	; 1
    2562:	0e 94 f5 30 	call	0x61ea	; 0x61ea <_ZN6StringC1EPKc>
    2566:	67 ed       	ldi	r22, 0xD7	; 215
  
  Serial.println("Stato Iniziale" + StatoAttuale);
    2568:	78 e0       	ldi	r23, 0x08	; 8
    256a:	ce 01       	movw	r24, r28
    256c:	01 96       	adiw	r24, 0x01	; 1
    256e:	0e 94 76 32 	call	0x64ec	; 0x64ec <_ZplRK15StringSumHelperRK6String>
    2572:	bc 01       	movw	r22, r24
    2574:	8c e7       	ldi	r24, 0x7C	; 124
    2576:	9a e0       	ldi	r25, 0x0A	; 10
    2578:	0e 94 4f 2e 	call	0x5c9e	; 0x5c9e <_ZN5Print7printlnERK6String>
    257c:	ce 01       	movw	r24, r28
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    257e:	01 96       	adiw	r24, 0x01	; 1
    2580:	0e 94 8e 30 	call	0x611c	; 0x611c <_ZN6StringD1Ev>
    2584:	0e 94 09 02 	call	0x412	; 0x412 <_Z9printLinev>
  
  printLine();
    2588:	26 96       	adiw	r28, 0x06	; 6
}
    258a:	0f b6       	in	r0, 0x3f	; 63
    258c:	f8 94       	cli
    258e:	de bf       	out	0x3e, r29	; 62
    2590:	0f be       	out	0x3f, r0	; 63
    2592:	cd bf       	out	0x3d, r28	; 61
    2594:	df 91       	pop	r29
    2596:	cf 91       	pop	r28
    2598:	1f 91       	pop	r17
    259a:	0f 91       	pop	r16
    259c:	ff 90       	pop	r15
    259e:	ef 90       	pop	r14
    25a0:	df 90       	pop	r13
    25a2:	cf 90       	pop	r12
    25a4:	08 95       	ret

000025a6 <_ZN7PCA9534C1Ev>:
    25a6:	fc 01       	movw	r30, r24
	Wire.requestFrom(_i2caddr, 1);
	while (Wire.available()) {
		buff = Wire.read();
	}
	return (buff & (1 << pin)) ? HIGH : LOW;
}
    25a8:	10 82       	st	Z, r1
    25aa:	11 82       	std	Z+1, r1	; 0x01
    25ac:	12 82       	std	Z+2, r1	; 0x02
    25ae:	08 95       	ret

000025b0 <_ZN7PCA95345beginEh>:
    25b0:	fc 01       	movw	r30, r24
    25b2:	60 83       	st	Z, r22
    25b4:	86 e2       	ldi	r24, 0x26	; 38
    25b6:	9a e0       	ldi	r25, 0x0A	; 10
    25b8:	0c 94 12 2b 	jmp	0x5624	; 0x5624 <_ZN7TwoWire5beginEv>

000025bc <_ZN7PCA953413setporteIoExpEhhh>:
    25bc:	ff 92       	push	r15
    25be:	0f 93       	push	r16
    25c0:	1f 93       	push	r17
    25c2:	cf 93       	push	r28
    25c4:	df 93       	push	r29
    25c6:	ec 01       	movw	r28, r24
    25c8:	f6 2e       	mov	r15, r22
    25ca:	04 2f       	mov	r16, r20
    25cc:	12 2f       	mov	r17, r18
    25ce:	68 81       	ld	r22, Y
    25d0:	86 e2       	ldi	r24, 0x26	; 38
    25d2:	9a e0       	ldi	r25, 0x0A	; 10
    25d4:	0e 94 25 2b 	call	0x564a	; 0x564a <_ZN7TwoWire17beginTransmissionEh>
    25d8:	61 e0       	ldi	r22, 0x01	; 1
    25da:	86 e2       	ldi	r24, 0x26	; 38
    25dc:	9a e0       	ldi	r25, 0x0A	; 10
    25de:	0e 94 d4 2a 	call	0x55a8	; 0x55a8 <_ZN7TwoWire5writeEh>
    25e2:	6f 2d       	mov	r22, r15
    25e4:	86 e2       	ldi	r24, 0x26	; 38
    25e6:	9a e0       	ldi	r25, 0x0A	; 10
    25e8:	0e 94 d4 2a 	call	0x55a8	; 0x55a8 <_ZN7TwoWire5writeEh>
    25ec:	86 e2       	ldi	r24, 0x26	; 38
    25ee:	9a e0       	ldi	r25, 0x0A	; 10
    25f0:	0e 94 a6 2b 	call	0x574c	; 0x574c <_ZN7TwoWire15endTransmissionEv>
    25f4:	68 81       	ld	r22, Y
    25f6:	86 e2       	ldi	r24, 0x26	; 38
    25f8:	9a e0       	ldi	r25, 0x0A	; 10
    25fa:	0e 94 25 2b 	call	0x564a	; 0x564a <_ZN7TwoWire17beginTransmissionEh>
    25fe:	62 e0       	ldi	r22, 0x02	; 2
    2600:	86 e2       	ldi	r24, 0x26	; 38
    2602:	9a e0       	ldi	r25, 0x0A	; 10
    2604:	0e 94 d4 2a 	call	0x55a8	; 0x55a8 <_ZN7TwoWire5writeEh>
    2608:	60 2f       	mov	r22, r16
    260a:	86 e2       	ldi	r24, 0x26	; 38
    260c:	9a e0       	ldi	r25, 0x0A	; 10
    260e:	0e 94 d4 2a 	call	0x55a8	; 0x55a8 <_ZN7TwoWire5writeEh>
    2612:	86 e2       	ldi	r24, 0x26	; 38
    2614:	9a e0       	ldi	r25, 0x0A	; 10
    2616:	0e 94 a6 2b 	call	0x574c	; 0x574c <_ZN7TwoWire15endTransmissionEv>
    261a:	8f e3       	ldi	r24, 0x3F	; 63
    261c:	9c e9       	ldi	r25, 0x9C	; 156
    261e:	01 97       	sbiw	r24, 0x01	; 1
    2620:	f1 f7       	brne	.-4      	; 0x261e <_ZN7PCA953413setporteIoExpEhhh+0x62>
    2622:	00 c0       	rjmp	.+0      	; 0x2624 <_ZN7PCA953413setporteIoExpEhhh+0x68>
    2624:	00 00       	nop
    2626:	68 81       	ld	r22, Y
    2628:	86 e2       	ldi	r24, 0x26	; 38
    262a:	9a e0       	ldi	r25, 0x0A	; 10
    262c:	0e 94 25 2b 	call	0x564a	; 0x564a <_ZN7TwoWire17beginTransmissionEh>
    2630:	63 e0       	ldi	r22, 0x03	; 3
    2632:	86 e2       	ldi	r24, 0x26	; 38
    2634:	9a e0       	ldi	r25, 0x0A	; 10
    2636:	0e 94 d4 2a 	call	0x55a8	; 0x55a8 <_ZN7TwoWire5writeEh>
    263a:	61 2f       	mov	r22, r17
    263c:	86 e2       	ldi	r24, 0x26	; 38
    263e:	9a e0       	ldi	r25, 0x0A	; 10
    2640:	0e 94 d4 2a 	call	0x55a8	; 0x55a8 <_ZN7TwoWire5writeEh>
    2644:	86 e2       	ldi	r24, 0x26	; 38
    2646:	9a e0       	ldi	r25, 0x0A	; 10
    2648:	0e 94 a6 2b 	call	0x574c	; 0x574c <_ZN7TwoWire15endTransmissionEv>
    264c:	8f e3       	ldi	r24, 0x3F	; 63
    264e:	9c e9       	ldi	r25, 0x9C	; 156
    2650:	01 97       	sbiw	r24, 0x01	; 1
    2652:	f1 f7       	brne	.-4      	; 0x2650 <_ZN7PCA953413setporteIoExpEhhh+0x94>
    2654:	00 c0       	rjmp	.+0      	; 0x2656 <_ZN7PCA953413setporteIoExpEhhh+0x9a>
    2656:	00 00       	nop
    2658:	df 91       	pop	r29
    265a:	cf 91       	pop	r28
    265c:	1f 91       	pop	r17
    265e:	0f 91       	pop	r16
    2660:	ff 90       	pop	r15
    2662:	08 95       	ret

00002664 <_ZN7PCA953410setCONFREGEh>:
    2664:	cf 93       	push	r28
    2666:	c6 2f       	mov	r28, r22
    2668:	fc 01       	movw	r30, r24
    266a:	60 81       	ld	r22, Z
    266c:	86 e2       	ldi	r24, 0x26	; 38
    266e:	9a e0       	ldi	r25, 0x0A	; 10
    2670:	0e 94 25 2b 	call	0x564a	; 0x564a <_ZN7TwoWire17beginTransmissionEh>
    2674:	63 e0       	ldi	r22, 0x03	; 3
    2676:	86 e2       	ldi	r24, 0x26	; 38
    2678:	9a e0       	ldi	r25, 0x0A	; 10
    267a:	0e 94 d4 2a 	call	0x55a8	; 0x55a8 <_ZN7TwoWire5writeEh>
    267e:	6c 2f       	mov	r22, r28
    2680:	86 e2       	ldi	r24, 0x26	; 38
    2682:	9a e0       	ldi	r25, 0x0A	; 10
    2684:	0e 94 d4 2a 	call	0x55a8	; 0x55a8 <_ZN7TwoWire5writeEh>
    2688:	86 e2       	ldi	r24, 0x26	; 38
    268a:	9a e0       	ldi	r25, 0x0A	; 10
    268c:	cf 91       	pop	r28
    268e:	0c 94 a6 2b 	jmp	0x574c	; 0x574c <_ZN7TwoWire15endTransmissionEv>

00002692 <_ZN7PCA953416Read_IP_REGISTEREv>:

uint8_t PCA9534::Read_IP_REGISTER() {
    2692:	cf 93       	push	r28
    2694:	df 93       	push	r29
    2696:	ec 01       	movw	r28, r24
	uint8_t buff = 0;

	//_i2caddr = i2caddr;

	Wire.beginTransmission(_i2caddr);
    2698:	68 81       	ld	r22, Y
    269a:	86 e2       	ldi	r24, 0x26	; 38
    269c:	9a e0       	ldi	r25, 0x0A	; 10
    269e:	0e 94 25 2b 	call	0x564a	; 0x564a <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(PCA9534_IP_REGISTER);
    26a2:	60 e0       	ldi	r22, 0x00	; 0
    26a4:	86 e2       	ldi	r24, 0x26	; 38
    26a6:	9a e0       	ldi	r25, 0x0A	; 10
    26a8:	0e 94 d4 2a 	call	0x55a8	; 0x55a8 <_ZN7TwoWire5writeEh>
	// Wire.write(_port);
	Wire.endTransmission();
    26ac:	86 e2       	ldi	r24, 0x26	; 38
    26ae:	9a e0       	ldi	r25, 0x0A	; 10
    26b0:	0e 94 a6 2b 	call	0x574c	; 0x574c <_ZN7TwoWire15endTransmissionEv>

	// We only need to read 1 byte of data to get the pins
	Wire.requestFrom(_i2caddr, 1);
    26b4:	68 81       	ld	r22, Y
    26b6:	70 e0       	ldi	r23, 0x00	; 0
    26b8:	41 e0       	ldi	r20, 0x01	; 1
    26ba:	50 e0       	ldi	r21, 0x00	; 0
    26bc:	86 e2       	ldi	r24, 0x26	; 38
    26be:	9a e0       	ldi	r25, 0x0A	; 10
    26c0:	0e 94 a4 2b 	call	0x5748	; 0x5748 <_ZN7TwoWire11requestFromEii>
	}
	return (buff & (1 << pin)) ? HIGH : LOW;
}

uint8_t PCA9534::Read_IP_REGISTER() {
	uint8_t buff = 0;
    26c4:	c0 e0       	ldi	r28, 0x00	; 0
	// Wire.write(_port);
	Wire.endTransmission();

	// We only need to read 1 byte of data to get the pins
	Wire.requestFrom(_i2caddr, 1);
	while (Wire.available()) {
    26c6:	86 e2       	ldi	r24, 0x26	; 38
    26c8:	9a e0       	ldi	r25, 0x0A	; 10
    26ca:	0e 94 46 2a 	call	0x548c	; 0x548c <_ZN7TwoWire9availableEv>
    26ce:	89 2b       	or	r24, r25
    26d0:	31 f0       	breq	.+12     	; 0x26de <_ZN7PCA953416Read_IP_REGISTEREv+0x4c>
		buff = Wire.read();
    26d2:	86 e2       	ldi	r24, 0x26	; 38
    26d4:	9a e0       	ldi	r25, 0x0A	; 10
    26d6:	0e 94 4e 2a 	call	0x549c	; 0x549c <_ZN7TwoWire4readEv>
    26da:	c8 2f       	mov	r28, r24
	// Wire.write(_port);
	Wire.endTransmission();

	// We only need to read 1 byte of data to get the pins
	Wire.requestFrom(_i2caddr, 1);
	while (Wire.available()) {
    26dc:	f4 cf       	rjmp	.-24     	; 0x26c6 <_ZN7PCA953416Read_IP_REGISTEREv+0x34>
		buff = Wire.read();
	}
	return buff;
    26de:	8c 2f       	mov	r24, r28
    26e0:	df 91       	pop	r29
    26e2:	cf 91       	pop	r28
    26e4:	08 95       	ret

000026e6 <_ZN9NFC_PN532C1Ehh>:
    #endif
    return false;
  }

  return true;
}
    26e6:	cf 93       	push	r28
    26e8:	df 93       	push	r29
    26ea:	ec 01       	movw	r28, r24
    26ec:	86 2f       	mov	r24, r22
    26ee:	6c 83       	std	Y+4, r22	; 0x04
    26f0:	4d 83       	std	Y+5, r20	; 0x05
    26f2:	1d 8a       	std	Y+21, r1	; 0x15
    26f4:	1e 8a       	std	Y+22, r1	; 0x16
    26f6:	60 e0       	ldi	r22, 0x00	; 0
    26f8:	0e 94 fb 2f 	call	0x5ff6	; 0x5ff6 <pinMode>
    26fc:	61 e0       	ldi	r22, 0x01	; 1
    26fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2700:	df 91       	pop	r29
    2702:	cf 91       	pop	r28
    2704:	0c 94 fb 2f 	jmp	0x5ff6	; 0x5ff6 <pinMode>

00002708 <_ZN9NFC_PN5325beginEv>:
    2708:	cf 93       	push	r28
    270a:	df 93       	push	r29
    270c:	ec 01       	movw	r28, r24
    270e:	86 e2       	ldi	r24, 0x26	; 38
    2710:	9a e0       	ldi	r25, 0x0A	; 10
    2712:	0e 94 12 2b 	call	0x5624	; 0x5624 <_ZN7TwoWire5beginEv>
    2716:	61 e0       	ldi	r22, 0x01	; 1
    2718:	8d 81       	ldd	r24, Y+5	; 0x05
    271a:	0e 94 37 30 	call	0x606e	; 0x606e <digitalWrite>
    271e:	60 e0       	ldi	r22, 0x00	; 0
    2720:	8d 81       	ldd	r24, Y+5	; 0x05
    2722:	0e 94 37 30 	call	0x606e	; 0x606e <digitalWrite>
    2726:	2f ef       	ldi	r18, 0xFF	; 255
    2728:	87 e8       	ldi	r24, 0x87	; 135
    272a:	93 e1       	ldi	r25, 0x13	; 19
    272c:	21 50       	subi	r18, 0x01	; 1
    272e:	80 40       	sbci	r24, 0x00	; 0
    2730:	90 40       	sbci	r25, 0x00	; 0
    2732:	e1 f7       	brne	.-8      	; 0x272c <_ZN9NFC_PN5325beginEv+0x24>
    2734:	00 c0       	rjmp	.+0      	; 0x2736 <_ZN9NFC_PN5325beginEv+0x2e>
    2736:	00 00       	nop
    2738:	61 e0       	ldi	r22, 0x01	; 1
    273a:	8d 81       	ldd	r24, Y+5	; 0x05
    273c:	0e 94 37 30 	call	0x606e	; 0x606e <digitalWrite>
    2740:	8f e3       	ldi	r24, 0x3F	; 63
    2742:	9c e9       	ldi	r25, 0x9C	; 156
    2744:	01 97       	sbiw	r24, 0x01	; 1
    2746:	f1 f7       	brne	.-4      	; 0x2744 <_ZN9NFC_PN5325beginEv+0x3c>
    2748:	00 c0       	rjmp	.+0      	; 0x274a <_ZN9NFC_PN5325beginEv+0x42>
    274a:	00 00       	nop
    274c:	df 91       	pop	r29
    274e:	cf 91       	pop	r28
    2750:	08 95       	ret

00002752 <_ZN9NFC_PN53210GetHexCodeEPKhm>:
    2752:	4f 92       	push	r4
    2754:	5f 92       	push	r5
    2756:	6f 92       	push	r6
    2758:	7f 92       	push	r7
    275a:	8f 92       	push	r8
    275c:	9f 92       	push	r9
    275e:	af 92       	push	r10
    2760:	bf 92       	push	r11
    2762:	ef 92       	push	r14
    2764:	ff 92       	push	r15
    2766:	0f 93       	push	r16
    2768:	1f 93       	push	r17
    276a:	cf 93       	push	r28
    276c:	df 93       	push	r29
    276e:	cd b7       	in	r28, 0x3d	; 61
    2770:	de b7       	in	r29, 0x3e	; 62
    2772:	2c 97       	sbiw	r28, 0x0c	; 12
    2774:	0f b6       	in	r0, 0x3f	; 63
    2776:	f8 94       	cli
    2778:	de bf       	out	0x3e, r29	; 62
    277a:	0f be       	out	0x3f, r0	; 63
    277c:	cd bf       	out	0x3d, r28	; 61
    277e:	7c 01       	movw	r14, r24
    2780:	5a 01       	movw	r10, r20
    2782:	28 01       	movw	r4, r16
    2784:	39 01       	movw	r6, r18
    2786:	64 e8       	ldi	r22, 0x84	; 132
    2788:	71 e0       	ldi	r23, 0x01	; 1
    278a:	0e 94 f5 30 	call	0x61ea	; 0x61ea <_ZN6StringC1EPKc>
    278e:	85 01       	movw	r16, r10
    2790:	81 2c       	mov	r8, r1
    2792:	91 2c       	mov	r9, r1
    2794:	54 01       	movw	r10, r8
    2796:	84 14       	cp	r8, r4
    2798:	95 04       	cpc	r9, r5
    279a:	a6 04       	cpc	r10, r6
    279c:	b7 04       	cpc	r11, r7
    279e:	09 f4       	brne	.+2      	; 0x27a2 <_ZN9NFC_PN53210GetHexCodeEPKhm+0x50>
    27a0:	46 c0       	rjmp	.+140    	; 0x282e <_ZN9NFC_PN53210GetHexCodeEPKhm+0xdc>
    27a2:	f8 01       	movw	r30, r16
    27a4:	61 91       	ld	r22, Z+
    27a6:	8f 01       	movw	r16, r30
    27a8:	40 e1       	ldi	r20, 0x10	; 16
    27aa:	ce 01       	movw	r24, r28
    27ac:	60 31       	cpi	r22, 0x10	; 16
    27ae:	f0 f4       	brcc	.+60     	; 0x27ec <_ZN9NFC_PN53210GetHexCodeEPKhm+0x9a>
    27b0:	01 96       	adiw	r24, 0x01	; 1
    27b2:	0e 94 a0 31 	call	0x6340	; 0x6340 <_ZN6StringC1Ehh>
    27b6:	b7 01       	movw	r22, r14
    27b8:	ce 01       	movw	r24, r28
    27ba:	07 96       	adiw	r24, 0x07	; 7
    27bc:	0e 94 61 31 	call	0x62c2	; 0x62c2 <_ZN6StringC1ERKS_>
    27c0:	66 ec       	ldi	r22, 0xC6	; 198
    27c2:	73 e0       	ldi	r23, 0x03	; 3
    27c4:	ce 01       	movw	r24, r28
    27c6:	07 96       	adiw	r24, 0x07	; 7
    27c8:	0e 94 87 32 	call	0x650e	; 0x650e <_ZplRK15StringSumHelperPKc>
    27cc:	be 01       	movw	r22, r28
    27ce:	6f 5f       	subi	r22, 0xFF	; 255
    27d0:	7f 4f       	sbci	r23, 0xFF	; 255
    27d2:	0e 94 76 32 	call	0x64ec	; 0x64ec <_ZplRK15StringSumHelperRK6String>
    27d6:	bc 01       	movw	r22, r24
    27d8:	c7 01       	movw	r24, r14
    27da:	0e 94 4c 31 	call	0x6298	; 0x6298 <_ZN6StringaSERKS_>
    27de:	ce 01       	movw	r24, r28
    27e0:	07 96       	adiw	r24, 0x07	; 7
    27e2:	0e 94 8e 30 	call	0x611c	; 0x611c <_ZN6StringD1Ev>
    27e6:	ce 01       	movw	r24, r28
    27e8:	01 96       	adiw	r24, 0x01	; 1
    27ea:	19 c0       	rjmp	.+50     	; 0x281e <_ZN9NFC_PN53210GetHexCodeEPKhm+0xcc>
    27ec:	07 96       	adiw	r24, 0x07	; 7
    27ee:	0e 94 a0 31 	call	0x6340	; 0x6340 <_ZN6StringC1Ehh>
    27f2:	b7 01       	movw	r22, r14
    27f4:	ce 01       	movw	r24, r28
    27f6:	01 96       	adiw	r24, 0x01	; 1
    27f8:	0e 94 61 31 	call	0x62c2	; 0x62c2 <_ZN6StringC1ERKS_>
    27fc:	be 01       	movw	r22, r28
    27fe:	69 5f       	subi	r22, 0xF9	; 249
    2800:	7f 4f       	sbci	r23, 0xFF	; 255
    2802:	ce 01       	movw	r24, r28
    2804:	01 96       	adiw	r24, 0x01	; 1
    2806:	0e 94 76 32 	call	0x64ec	; 0x64ec <_ZplRK15StringSumHelperRK6String>
    280a:	bc 01       	movw	r22, r24
    280c:	c7 01       	movw	r24, r14
    280e:	0e 94 4c 31 	call	0x6298	; 0x6298 <_ZN6StringaSERKS_>
    2812:	ce 01       	movw	r24, r28
    2814:	01 96       	adiw	r24, 0x01	; 1
    2816:	0e 94 8e 30 	call	0x611c	; 0x611c <_ZN6StringD1Ev>
    281a:	ce 01       	movw	r24, r28
    281c:	07 96       	adiw	r24, 0x07	; 7
    281e:	0e 94 8e 30 	call	0x611c	; 0x611c <_ZN6StringD1Ev>
    2822:	ff ef       	ldi	r31, 0xFF	; 255
    2824:	8f 1a       	sub	r8, r31
    2826:	9f 0a       	sbc	r9, r31
    2828:	af 0a       	sbc	r10, r31
    282a:	bf 0a       	sbc	r11, r31
    282c:	b4 cf       	rjmp	.-152    	; 0x2796 <_ZN9NFC_PN53210GetHexCodeEPKhm+0x44>
    282e:	8c e7       	ldi	r24, 0x7C	; 124
    2830:	9a e0       	ldi	r25, 0x0A	; 10
    2832:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <_ZN5Print7printlnEv>
    2836:	c7 01       	movw	r24, r14
    2838:	2c 96       	adiw	r28, 0x0c	; 12
    283a:	0f b6       	in	r0, 0x3f	; 63
    283c:	f8 94       	cli
    283e:	de bf       	out	0x3e, r29	; 62
    2840:	0f be       	out	0x3f, r0	; 63
    2842:	cd bf       	out	0x3d, r28	; 61
    2844:	df 91       	pop	r29
    2846:	cf 91       	pop	r28
    2848:	1f 91       	pop	r17
    284a:	0f 91       	pop	r16
    284c:	ff 90       	pop	r15
    284e:	ef 90       	pop	r14
    2850:	bf 90       	pop	r11
    2852:	af 90       	pop	r10
    2854:	9f 90       	pop	r9
    2856:	8f 90       	pop	r8
    2858:	7f 90       	pop	r7
    285a:	6f 90       	pop	r6
    285c:	5f 90       	pop	r5
    285e:	4f 90       	pop	r4
    2860:	08 95       	ret

00002862 <_ZN9NFC_PN5327isreadyEv>:
    2862:	fc 01       	movw	r30, r24
    2864:	84 81       	ldd	r24, Z+4	; 0x04
    2866:	0e 94 65 30 	call	0x60ca	; 0x60ca <digitalRead>
    286a:	91 e0       	ldi	r25, 0x01	; 1
    286c:	81 11       	cpse	r24, r1
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	89 2f       	mov	r24, r25
    2872:	08 95       	ret

00002874 <_ZN9NFC_PN5329waitreadyEj>:
    2874:	cf 92       	push	r12
    2876:	df 92       	push	r13
    2878:	ef 92       	push	r14
    287a:	ff 92       	push	r15
    287c:	1f 93       	push	r17
    287e:	cf 93       	push	r28
    2880:	df 93       	push	r29
    2882:	6c 01       	movw	r12, r24
    2884:	7b 01       	movw	r14, r22
    2886:	c0 e0       	ldi	r28, 0x00	; 0
    2888:	d0 e0       	ldi	r29, 0x00	; 0
    288a:	c6 01       	movw	r24, r12
    288c:	ea df       	rcall	.-44     	; 0x2862 <_ZN9NFC_PN5327isreadyEv>
    288e:	18 2f       	mov	r17, r24
    2890:	81 11       	cpse	r24, r1
    2892:	15 c0       	rjmp	.+42     	; 0x28be <_ZN9NFC_PN5329waitreadyEj+0x4a>
    2894:	e1 14       	cp	r14, r1
    2896:	f1 04       	cpc	r15, r1
    2898:	59 f0       	breq	.+22     	; 0x28b0 <_ZN9NFC_PN5329waitreadyEj+0x3c>
    289a:	2a 96       	adiw	r28, 0x0a	; 10
    289c:	ec 16       	cp	r14, r28
    289e:	fd 06       	cpc	r15, r29
    28a0:	38 f4       	brcc	.+14     	; 0x28b0 <_ZN9NFC_PN5329waitreadyEj+0x3c>
    28a2:	6c e6       	ldi	r22, 0x6C	; 108
    28a4:	77 e0       	ldi	r23, 0x07	; 7
    28a6:	8c e7       	ldi	r24, 0x7C	; 124
    28a8:	9a e0       	ldi	r25, 0x0A	; 10
    28aa:	0e 94 5f 2e 	call	0x5cbe	; 0x5cbe <_ZN5Print7printlnEPKc>
    28ae:	07 c0       	rjmp	.+14     	; 0x28be <_ZN9NFC_PN5329waitreadyEj+0x4a>
    28b0:	8f e3       	ldi	r24, 0x3F	; 63
    28b2:	9c e9       	ldi	r25, 0x9C	; 156
    28b4:	01 97       	sbiw	r24, 0x01	; 1
    28b6:	f1 f7       	brne	.-4      	; 0x28b4 <_ZN9NFC_PN5329waitreadyEj+0x40>
    28b8:	00 c0       	rjmp	.+0      	; 0x28ba <_ZN9NFC_PN5329waitreadyEj+0x46>
    28ba:	00 00       	nop
    28bc:	e6 cf       	rjmp	.-52     	; 0x288a <_ZN9NFC_PN5329waitreadyEj+0x16>
    28be:	81 2f       	mov	r24, r17
    28c0:	df 91       	pop	r29
    28c2:	cf 91       	pop	r28
    28c4:	1f 91       	pop	r17
    28c6:	ff 90       	pop	r15
    28c8:	ef 90       	pop	r14
    28ca:	df 90       	pop	r13
    28cc:	cf 90       	pop	r12
    28ce:	08 95       	ret

000028d0 <_ZN9NFC_PN5328readdataEPhh>:
    28d0:	ff 92       	push	r15
    28d2:	0f 93       	push	r16
    28d4:	1f 93       	push	r17
    28d6:	cf 93       	push	r28
    28d8:	df 93       	push	r29
    28da:	f6 2e       	mov	r15, r22
    28dc:	07 2f       	mov	r16, r23
    28de:	14 2f       	mov	r17, r20
    28e0:	8f e3       	ldi	r24, 0x3F	; 63
    28e2:	9f e1       	ldi	r25, 0x1F	; 31
    28e4:	01 97       	sbiw	r24, 0x01	; 1
    28e6:	f1 f7       	brne	.-4      	; 0x28e4 <_ZN9NFC_PN5328readdataEPhh+0x14>
    28e8:	00 c0       	rjmp	.+0      	; 0x28ea <_ZN9NFC_PN5328readdataEPhh+0x1a>
    28ea:	00 00       	nop
    28ec:	42 e0       	ldi	r20, 0x02	; 2
    28ee:	41 0f       	add	r20, r17
    28f0:	64 e2       	ldi	r22, 0x24	; 36
    28f2:	86 e2       	ldi	r24, 0x26	; 38
    28f4:	9a e0       	ldi	r25, 0x0A	; 10
    28f6:	0e 94 a2 2b 	call	0x5744	; 0x5744 <_ZN7TwoWire11requestFromEhh>
    28fa:	86 e2       	ldi	r24, 0x26	; 38
    28fc:	9a e0       	ldi	r25, 0x0A	; 10
    28fe:	0e 94 4e 2a 	call	0x549c	; 0x549c <_ZN7TwoWire4readEv>
    2902:	cf 2d       	mov	r28, r15
    2904:	d0 2f       	mov	r29, r16
    2906:	ce 01       	movw	r24, r28
    2908:	81 0f       	add	r24, r17
    290a:	91 1d       	adc	r25, r1
    290c:	8c 01       	movw	r16, r24
    290e:	c0 17       	cp	r28, r16
    2910:	d1 07       	cpc	r29, r17
    2912:	61 f0       	breq	.+24     	; 0x292c <_ZN9NFC_PN5328readdataEPhh+0x5c>
    2914:	8f e9       	ldi	r24, 0x9F	; 159
    2916:	9f e0       	ldi	r25, 0x0F	; 15
    2918:	01 97       	sbiw	r24, 0x01	; 1
    291a:	f1 f7       	brne	.-4      	; 0x2918 <_ZN9NFC_PN5328readdataEPhh+0x48>
    291c:	00 c0       	rjmp	.+0      	; 0x291e <_ZN9NFC_PN5328readdataEPhh+0x4e>
    291e:	00 00       	nop
    2920:	86 e2       	ldi	r24, 0x26	; 38
    2922:	9a e0       	ldi	r25, 0x0A	; 10
    2924:	0e 94 4e 2a 	call	0x549c	; 0x549c <_ZN7TwoWire4readEv>
    2928:	89 93       	st	Y+, r24
    292a:	f1 cf       	rjmp	.-30     	; 0x290e <_ZN9NFC_PN5328readdataEPhh+0x3e>
    292c:	df 91       	pop	r29
    292e:	cf 91       	pop	r28
    2930:	1f 91       	pop	r17
    2932:	0f 91       	pop	r16
    2934:	ff 90       	pop	r15
    2936:	08 95       	ret

00002938 <_ZN9NFC_PN5327readackEv>:
    2938:	cf 93       	push	r28
    293a:	df 93       	push	r29
    293c:	00 d0       	rcall	.+0      	; 0x293e <_ZN9NFC_PN5327readackEv+0x6>
    293e:	00 d0       	rcall	.+0      	; 0x2940 <_ZN9NFC_PN5327readackEv+0x8>
    2940:	00 d0       	rcall	.+0      	; 0x2942 <_ZN9NFC_PN5327readackEv+0xa>
    2942:	cd b7       	in	r28, 0x3d	; 61
    2944:	de b7       	in	r29, 0x3e	; 62
    2946:	46 e0       	ldi	r20, 0x06	; 6
    2948:	be 01       	movw	r22, r28
    294a:	6f 5f       	subi	r22, 0xFF	; 255
    294c:	7f 4f       	sbci	r23, 0xFF	; 255
    294e:	c0 df       	rcall	.-128    	; 0x28d0 <_ZN9NFC_PN5328readdataEPhh>
    2950:	46 e0       	ldi	r20, 0x06	; 6
    2952:	50 e0       	ldi	r21, 0x00	; 0
    2954:	6b e6       	ldi	r22, 0x6B	; 107
    2956:	71 e0       	ldi	r23, 0x01	; 1
    2958:	ce 01       	movw	r24, r28
    295a:	01 96       	adiw	r24, 0x01	; 1
    295c:	0e 94 f0 36 	call	0x6de0	; 0x6de0 <strncmp>
    2960:	21 e0       	ldi	r18, 0x01	; 1
    2962:	89 2b       	or	r24, r25
    2964:	09 f0       	breq	.+2      	; 0x2968 <_ZN9NFC_PN5327readackEv+0x30>
    2966:	20 e0       	ldi	r18, 0x00	; 0
    2968:	82 2f       	mov	r24, r18
    296a:	26 96       	adiw	r28, 0x06	; 6
    296c:	0f b6       	in	r0, 0x3f	; 63
    296e:	f8 94       	cli
    2970:	de bf       	out	0x3e, r29	; 62
    2972:	0f be       	out	0x3f, r0	; 63
    2974:	cd bf       	out	0x3d, r28	; 61
    2976:	df 91       	pop	r29
    2978:	cf 91       	pop	r28
    297a:	08 95       	ret

0000297c <_ZL8i2c_sendh>:
    297c:	68 2f       	mov	r22, r24
    297e:	86 e2       	ldi	r24, 0x26	; 38
    2980:	9a e0       	ldi	r25, 0x0A	; 10
    2982:	0c 94 d4 2a 	jmp	0x55a8	; 0x55a8 <_ZN7TwoWire5writeEh>

00002986 <_ZN9NFC_PN53212writecommandEPhh>:
    2986:	cf 92       	push	r12
    2988:	df 92       	push	r13
    298a:	ef 92       	push	r14
    298c:	ff 92       	push	r15
    298e:	0f 93       	push	r16
    2990:	1f 93       	push	r17
    2992:	cf 93       	push	r28
    2994:	df 93       	push	r29
    2996:	7b 01       	movw	r14, r22
    2998:	c1 e0       	ldi	r28, 0x01	; 1
    299a:	c4 0f       	add	r28, r20
    299c:	8f e3       	ldi	r24, 0x3F	; 63
    299e:	9f e1       	ldi	r25, 0x1F	; 31
    29a0:	01 97       	sbiw	r24, 0x01	; 1
    29a2:	f1 f7       	brne	.-4      	; 0x29a0 <_ZN9NFC_PN53212writecommandEPhh+0x1a>
    29a4:	00 c0       	rjmp	.+0      	; 0x29a6 <_ZN9NFC_PN53212writecommandEPhh+0x20>
    29a6:	00 00       	nop
    29a8:	64 e2       	ldi	r22, 0x24	; 36
    29aa:	70 e0       	ldi	r23, 0x00	; 0
    29ac:	86 e2       	ldi	r24, 0x26	; 38
    29ae:	9a e0       	ldi	r25, 0x0A	; 10
    29b0:	0e 94 2f 2b 	call	0x565e	; 0x565e <_ZN7TwoWire17beginTransmissionEi>
    29b4:	80 e0       	ldi	r24, 0x00	; 0
    29b6:	e2 df       	rcall	.-60     	; 0x297c <_ZL8i2c_sendh>
    29b8:	80 e0       	ldi	r24, 0x00	; 0
    29ba:	e0 df       	rcall	.-64     	; 0x297c <_ZL8i2c_sendh>
    29bc:	8f ef       	ldi	r24, 0xFF	; 255
    29be:	de df       	rcall	.-68     	; 0x297c <_ZL8i2c_sendh>
    29c0:	8c 2f       	mov	r24, r28
    29c2:	dc df       	rcall	.-72     	; 0x297c <_ZL8i2c_sendh>
    29c4:	8c 2f       	mov	r24, r28
    29c6:	81 95       	neg	r24
    29c8:	d9 df       	rcall	.-78     	; 0x297c <_ZL8i2c_sendh>
    29ca:	84 ed       	ldi	r24, 0xD4	; 212
    29cc:	d7 df       	rcall	.-82     	; 0x297c <_ZL8i2c_sendh>
    29ce:	c1 2c       	mov	r12, r1
    29d0:	83 ed       	ldi	r24, 0xD3	; 211
    29d2:	d8 2e       	mov	r13, r24
    29d4:	d0 e0       	ldi	r29, 0x00	; 0
    29d6:	21 97       	sbiw	r28, 0x01	; 1
    29d8:	0c 2d       	mov	r16, r12
    29da:	10 e0       	ldi	r17, 0x00	; 0
    29dc:	0c 17       	cp	r16, r28
    29de:	1d 07       	cpc	r17, r29
    29e0:	54 f4       	brge	.+20     	; 0x29f6 <_ZN9NFC_PN53212writecommandEPhh+0x70>
    29e2:	0e 0d       	add	r16, r14
    29e4:	1f 1d       	adc	r17, r15
    29e6:	f8 01       	movw	r30, r16
    29e8:	80 81       	ld	r24, Z
    29ea:	c8 df       	rcall	.-112    	; 0x297c <_ZL8i2c_sendh>
    29ec:	f8 01       	movw	r30, r16
    29ee:	80 81       	ld	r24, Z
    29f0:	d8 0e       	add	r13, r24
    29f2:	c3 94       	inc	r12
    29f4:	f1 cf       	rjmp	.-30     	; 0x29d8 <_ZN9NFC_PN53212writecommandEPhh+0x52>
    29f6:	8d 2d       	mov	r24, r13
    29f8:	80 95       	com	r24
    29fa:	c0 df       	rcall	.-128    	; 0x297c <_ZL8i2c_sendh>
    29fc:	80 e0       	ldi	r24, 0x00	; 0
    29fe:	be df       	rcall	.-132    	; 0x297c <_ZL8i2c_sendh>
    2a00:	86 e2       	ldi	r24, 0x26	; 38
    2a02:	9a e0       	ldi	r25, 0x0A	; 10
    2a04:	df 91       	pop	r29
    2a06:	cf 91       	pop	r28
    2a08:	1f 91       	pop	r17
    2a0a:	0f 91       	pop	r16
    2a0c:	ff 90       	pop	r15
    2a0e:	ef 90       	pop	r14
    2a10:	df 90       	pop	r13
    2a12:	cf 90       	pop	r12
    2a14:	0c 94 a6 2b 	jmp	0x574c	; 0x574c <_ZN7TwoWire15endTransmissionEv>

00002a18 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>:
    2a18:	0f 93       	push	r16
    2a1a:	1f 93       	push	r17
    2a1c:	cf 93       	push	r28
    2a1e:	df 93       	push	r29
    2a20:	ec 01       	movw	r28, r24
    2a22:	89 01       	movw	r16, r18
    2a24:	b0 df       	rcall	.-160    	; 0x2986 <_ZN9NFC_PN53212writecommandEPhh>
    2a26:	b8 01       	movw	r22, r16
    2a28:	ce 01       	movw	r24, r28
    2a2a:	24 df       	rcall	.-440    	; 0x2874 <_ZN9NFC_PN5329waitreadyEj>
    2a2c:	88 23       	and	r24, r24
    2a2e:	31 f0       	breq	.+12     	; 0x2a3c <_ZN9NFC_PN53219sendCommandCheckAckEPhhj+0x24>
    2a30:	ce 01       	movw	r24, r28
    2a32:	df 91       	pop	r29
    2a34:	cf 91       	pop	r28
    2a36:	1f 91       	pop	r17
    2a38:	0f 91       	pop	r16
    2a3a:	7e cf       	rjmp	.-260    	; 0x2938 <_ZN9NFC_PN5327readackEv>
    2a3c:	80 e0       	ldi	r24, 0x00	; 0
    2a3e:	df 91       	pop	r29
    2a40:	cf 91       	pop	r28
    2a42:	1f 91       	pop	r17
    2a44:	0f 91       	pop	r16
    2a46:	08 95       	ret

00002a48 <_ZN9NFC_PN53218getFirmwareVersionEv>:
    2a48:	cf 93       	push	r28
    2a4a:	df 93       	push	r29
    2a4c:	ec 01       	movw	r28, r24
    2a4e:	82 e0       	ldi	r24, 0x02	; 2
    2a50:	80 93 2d 09 	sts	0x092D, r24	; 0x80092d <pn532_packetbuffer>
    2a54:	28 ee       	ldi	r18, 0xE8	; 232
    2a56:	33 e0       	ldi	r19, 0x03	; 3
    2a58:	41 e0       	ldi	r20, 0x01	; 1
    2a5a:	6d e2       	ldi	r22, 0x2D	; 45
    2a5c:	79 e0       	ldi	r23, 0x09	; 9
    2a5e:	ce 01       	movw	r24, r28
    2a60:	db df       	rcall	.-74     	; 0x2a18 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    2a62:	81 11       	cpse	r24, r1
    2a64:	04 c0       	rjmp	.+8      	; 0x2a6e <_ZN9NFC_PN53218getFirmwareVersionEv+0x26>
    2a66:	60 e0       	ldi	r22, 0x00	; 0
    2a68:	70 e0       	ldi	r23, 0x00	; 0
    2a6a:	cb 01       	movw	r24, r22
    2a6c:	32 c0       	rjmp	.+100    	; 0x2ad2 <_ZN9NFC_PN53218getFirmwareVersionEv+0x8a>
    2a6e:	4c e0       	ldi	r20, 0x0C	; 12
    2a70:	6d e2       	ldi	r22, 0x2D	; 45
    2a72:	79 e0       	ldi	r23, 0x09	; 9
    2a74:	ce 01       	movw	r24, r28
    2a76:	2c df       	rcall	.-424    	; 0x28d0 <_ZN9NFC_PN5328readdataEPhh>
    2a78:	46 e0       	ldi	r20, 0x06	; 6
    2a7a:	50 e0       	ldi	r21, 0x00	; 0
    2a7c:	65 e6       	ldi	r22, 0x65	; 101
    2a7e:	71 e0       	ldi	r23, 0x01	; 1
    2a80:	8d e2       	ldi	r24, 0x2D	; 45
    2a82:	99 e0       	ldi	r25, 0x09	; 9
    2a84:	0e 94 f0 36 	call	0x6de0	; 0x6de0 <strncmp>
    2a88:	89 2b       	or	r24, r25
    2a8a:	69 f7       	brne	.-38     	; 0x2a66 <_ZN9NFC_PN53218getFirmwareVersionEv+0x1e>
    2a8c:	8d 89       	ldd	r24, Y+21	; 0x15
    2a8e:	81 11       	cpse	r24, r1
    2a90:	03 c0       	rjmp	.+6      	; 0x2a98 <_ZN9NFC_PN53218getFirmwareVersionEv+0x50>
    2a92:	e7 e0       	ldi	r30, 0x07	; 7
    2a94:	f0 e0       	ldi	r31, 0x00	; 0
    2a96:	02 c0       	rjmp	.+4      	; 0x2a9c <_ZN9NFC_PN53218getFirmwareVersionEv+0x54>
    2a98:	e6 e0       	ldi	r30, 0x06	; 6
    2a9a:	f0 e0       	ldi	r31, 0x00	; 0
    2a9c:	e3 5d       	subi	r30, 0xD3	; 211
    2a9e:	f6 4f       	sbci	r31, 0xF6	; 246
    2aa0:	60 81       	ld	r22, Z
    2aa2:	86 2f       	mov	r24, r22
    2aa4:	90 e0       	ldi	r25, 0x00	; 0
    2aa6:	a0 e0       	ldi	r26, 0x00	; 0
    2aa8:	b0 e0       	ldi	r27, 0x00	; 0
    2aaa:	ba 2f       	mov	r27, r26
    2aac:	a9 2f       	mov	r26, r25
    2aae:	98 2f       	mov	r25, r24
    2ab0:	88 27       	eor	r24, r24
    2ab2:	21 81       	ldd	r18, Z+1	; 0x01
    2ab4:	82 2b       	or	r24, r18
    2ab6:	ba 2f       	mov	r27, r26
    2ab8:	a9 2f       	mov	r26, r25
    2aba:	98 2f       	mov	r25, r24
    2abc:	88 27       	eor	r24, r24
    2abe:	22 81       	ldd	r18, Z+2	; 0x02
    2ac0:	82 2b       	or	r24, r18
    2ac2:	ba 2f       	mov	r27, r26
    2ac4:	a9 2f       	mov	r26, r25
    2ac6:	98 2f       	mov	r25, r24
    2ac8:	88 27       	eor	r24, r24
    2aca:	23 81       	ldd	r18, Z+3	; 0x03
    2acc:	bc 01       	movw	r22, r24
    2ace:	cd 01       	movw	r24, r26
    2ad0:	62 2b       	or	r22, r18
    2ad2:	df 91       	pop	r29
    2ad4:	cf 91       	pop	r28
    2ad6:	08 95       	ret

00002ad8 <_ZN9NFC_PN5329SAMConfigEv>:
    2ad8:	cf 93       	push	r28
    2ada:	df 93       	push	r29
    2adc:	ec 01       	movw	r28, r24
    2ade:	94 e1       	ldi	r25, 0x14	; 20
    2ae0:	90 93 2d 09 	sts	0x092D, r25	; 0x80092d <pn532_packetbuffer>
    2ae4:	81 e0       	ldi	r24, 0x01	; 1
    2ae6:	80 93 2e 09 	sts	0x092E, r24	; 0x80092e <pn532_packetbuffer+0x1>
    2aea:	90 93 2f 09 	sts	0x092F, r25	; 0x80092f <pn532_packetbuffer+0x2>
    2aee:	80 93 30 09 	sts	0x0930, r24	; 0x800930 <pn532_packetbuffer+0x3>
    2af2:	28 ee       	ldi	r18, 0xE8	; 232
    2af4:	33 e0       	ldi	r19, 0x03	; 3
    2af6:	44 e0       	ldi	r20, 0x04	; 4
    2af8:	6d e2       	ldi	r22, 0x2D	; 45
    2afa:	79 e0       	ldi	r23, 0x09	; 9
    2afc:	ce 01       	movw	r24, r28
    2afe:	8c df       	rcall	.-232    	; 0x2a18 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    2b00:	88 23       	and	r24, r24
    2b02:	a9 f0       	breq	.+42     	; 0x2b2e <_ZN9NFC_PN5329SAMConfigEv+0x56>
    2b04:	48 e0       	ldi	r20, 0x08	; 8
    2b06:	6d e2       	ldi	r22, 0x2D	; 45
    2b08:	79 e0       	ldi	r23, 0x09	; 9
    2b0a:	ce 01       	movw	r24, r28
    2b0c:	e1 de       	rcall	.-574    	; 0x28d0 <_ZN9NFC_PN5328readdataEPhh>
    2b0e:	8d 89       	ldd	r24, Y+21	; 0x15
    2b10:	81 11       	cpse	r24, r1
    2b12:	03 c0       	rjmp	.+6      	; 0x2b1a <_ZN9NFC_PN5329SAMConfigEv+0x42>
    2b14:	86 e0       	ldi	r24, 0x06	; 6
    2b16:	90 e0       	ldi	r25, 0x00	; 0
    2b18:	02 c0       	rjmp	.+4      	; 0x2b1e <_ZN9NFC_PN5329SAMConfigEv+0x46>
    2b1a:	85 e0       	ldi	r24, 0x05	; 5
    2b1c:	90 e0       	ldi	r25, 0x00	; 0
    2b1e:	fc 01       	movw	r30, r24
    2b20:	e3 5d       	subi	r30, 0xD3	; 211
    2b22:	f6 4f       	sbci	r31, 0xF6	; 246
    2b24:	81 e0       	ldi	r24, 0x01	; 1
    2b26:	90 81       	ld	r25, Z
    2b28:	95 31       	cpi	r25, 0x15	; 21
    2b2a:	09 f0       	breq	.+2      	; 0x2b2e <_ZN9NFC_PN5329SAMConfigEv+0x56>
    2b2c:	80 e0       	ldi	r24, 0x00	; 0
    2b2e:	df 91       	pop	r29
    2b30:	cf 91       	pop	r28
    2b32:	08 95       	ret

00002b34 <_ZN9NFC_PN53227setPassiveActivationRetriesEh>:
    2b34:	ed e2       	ldi	r30, 0x2D	; 45
    2b36:	f9 e0       	ldi	r31, 0x09	; 9
    2b38:	22 e3       	ldi	r18, 0x32	; 50
    2b3a:	20 83       	st	Z, r18
    2b3c:	25 e0       	ldi	r18, 0x05	; 5
    2b3e:	21 83       	std	Z+1, r18	; 0x01
    2b40:	2f ef       	ldi	r18, 0xFF	; 255
    2b42:	22 83       	std	Z+2, r18	; 0x02
    2b44:	21 e0       	ldi	r18, 0x01	; 1
    2b46:	23 83       	std	Z+3, r18	; 0x03
    2b48:	64 83       	std	Z+4, r22	; 0x04
    2b4a:	28 ee       	ldi	r18, 0xE8	; 232
    2b4c:	33 e0       	ldi	r19, 0x03	; 3
    2b4e:	45 e0       	ldi	r20, 0x05	; 5
    2b50:	bf 01       	movw	r22, r30
    2b52:	62 cf       	rjmp	.-316    	; 0x2a18 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>

00002b54 <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j>:
    2b54:	af 92       	push	r10
    2b56:	bf 92       	push	r11
    2b58:	cf 92       	push	r12
    2b5a:	df 92       	push	r13
    2b5c:	ef 92       	push	r14
    2b5e:	ff 92       	push	r15
    2b60:	0f 93       	push	r16
    2b62:	1f 93       	push	r17
    2b64:	cf 93       	push	r28
    2b66:	df 93       	push	r29
    2b68:	ec 01       	movw	r28, r24
    2b6a:	7a 01       	movw	r14, r20
    2b6c:	59 01       	movw	r10, r18
    2b6e:	68 01       	movw	r12, r16
    2b70:	8a e4       	ldi	r24, 0x4A	; 74
    2b72:	80 93 2d 09 	sts	0x092D, r24	; 0x80092d <pn532_packetbuffer>
    2b76:	81 e0       	ldi	r24, 0x01	; 1
    2b78:	80 93 2e 09 	sts	0x092E, r24	; 0x80092e <pn532_packetbuffer+0x1>
    2b7c:	60 93 2f 09 	sts	0x092F, r22	; 0x80092f <pn532_packetbuffer+0x2>
    2b80:	98 01       	movw	r18, r16
    2b82:	43 e0       	ldi	r20, 0x03	; 3
    2b84:	6d e2       	ldi	r22, 0x2D	; 45
    2b86:	79 e0       	ldi	r23, 0x09	; 9
    2b88:	ce 01       	movw	r24, r28
    2b8a:	46 df       	rcall	.-372    	; 0x2a18 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    2b8c:	18 2f       	mov	r17, r24
    2b8e:	88 23       	and	r24, r24
    2b90:	41 f1       	breq	.+80     	; 0x2be2 <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x8e>
    2b92:	8d 89       	ldd	r24, Y+21	; 0x15
    2b94:	88 23       	and	r24, r24
    2b96:	79 f0       	breq	.+30     	; 0x2bb6 <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x62>
    2b98:	44 e1       	ldi	r20, 0x14	; 20
    2b9a:	6d e2       	ldi	r22, 0x2D	; 45
    2b9c:	79 e0       	ldi	r23, 0x09	; 9
    2b9e:	ce 01       	movw	r24, r28
    2ba0:	97 de       	rcall	.-722    	; 0x28d0 <_ZN9NFC_PN5328readdataEPhh>
    2ba2:	80 91 34 09 	lds	r24, 0x0934	; 0x800934 <pn532_packetbuffer+0x7>
    2ba6:	81 30       	cpi	r24, 0x01	; 1
    2ba8:	e1 f4       	brne	.+56     	; 0x2be2 <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x8e>
    2baa:	80 91 39 09 	lds	r24, 0x0939	; 0x800939 <pn532_packetbuffer+0xc>
    2bae:	f5 01       	movw	r30, r10
    2bb0:	80 83       	st	Z, r24
    2bb2:	80 e0       	ldi	r24, 0x00	; 0
    2bb4:	06 c0       	rjmp	.+12     	; 0x2bc2 <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x6e>
    2bb6:	b6 01       	movw	r22, r12
    2bb8:	ce 01       	movw	r24, r28
    2bba:	5c de       	rcall	.-840    	; 0x2874 <_ZN9NFC_PN5329waitreadyEj>
    2bbc:	81 11       	cpse	r24, r1
    2bbe:	ec cf       	rjmp	.-40     	; 0x2b98 <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x44>
    2bc0:	10 c0       	rjmp	.+32     	; 0x2be2 <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x8e>
    2bc2:	90 91 39 09 	lds	r25, 0x0939	; 0x800939 <pn532_packetbuffer+0xc>
    2bc6:	89 17       	cp	r24, r25
    2bc8:	68 f4       	brcc	.+26     	; 0x2be4 <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x90>
    2bca:	28 2f       	mov	r18, r24
    2bcc:	30 e0       	ldi	r19, 0x00	; 0
    2bce:	f9 01       	movw	r30, r18
    2bd0:	e3 5d       	subi	r30, 0xD3	; 211
    2bd2:	f6 4f       	sbci	r31, 0xF6	; 246
    2bd4:	95 85       	ldd	r25, Z+13	; 0x0d
    2bd6:	f7 01       	movw	r30, r14
    2bd8:	e2 0f       	add	r30, r18
    2bda:	f3 1f       	adc	r31, r19
    2bdc:	90 83       	st	Z, r25
    2bde:	8f 5f       	subi	r24, 0xFF	; 255
    2be0:	f0 cf       	rjmp	.-32     	; 0x2bc2 <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x6e>
    2be2:	10 e0       	ldi	r17, 0x00	; 0
    2be4:	81 2f       	mov	r24, r17
    2be6:	df 91       	pop	r29
    2be8:	cf 91       	pop	r28
    2bea:	1f 91       	pop	r17
    2bec:	0f 91       	pop	r16
    2bee:	ff 90       	pop	r15
    2bf0:	ef 90       	pop	r14
    2bf2:	df 90       	pop	r13
    2bf4:	cf 90       	pop	r12
    2bf6:	bf 90       	pop	r11
    2bf8:	af 90       	pop	r10
    2bfa:	08 95       	ret

00002bfc <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_>:

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
uint8_t NFC_PN532::mifareclassic_AuthenticateBlock (uint8_t * uid, uint8_t uidLen, uint32_t blockNumber, uint8_t keyNumber, uint8_t * keyData)
{
    2bfc:	af 92       	push	r10
    2bfe:	bf 92       	push	r11
    2c00:	cf 92       	push	r12
    2c02:	df 92       	push	r13
    2c04:	ef 92       	push	r14
    2c06:	0f 93       	push	r16
    2c08:	1f 93       	push	r17
    2c0a:	cf 93       	push	r28
    2c0c:	df 93       	push	r29
    2c0e:	ec 01       	movw	r28, r24
    2c10:	14 2f       	mov	r17, r20
  uint8_t len;
  uint8_t i;

  // Hang on to the key and uid data
  memcpy (_key, keyData, 6);
    2c12:	5c 01       	movw	r10, r24
    2c14:	8e e0       	ldi	r24, 0x0E	; 14
    2c16:	a8 0e       	add	r10, r24
    2c18:	b1 1c       	adc	r11, r1
    2c1a:	86 e0       	ldi	r24, 0x06	; 6
    2c1c:	f6 01       	movw	r30, r12
    2c1e:	d5 01       	movw	r26, r10
    2c20:	01 90       	ld	r0, Z+
    2c22:	0d 92       	st	X+, r0
    2c24:	8a 95       	dec	r24
    2c26:	e1 f7       	brne	.-8      	; 0x2c20 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x24>
  memcpy (_uid, uid, uidLen);
    2c28:	50 e0       	ldi	r21, 0x00	; 0
    2c2a:	ce 01       	movw	r24, r28
    2c2c:	06 96       	adiw	r24, 0x06	; 6
    2c2e:	0e 94 d7 36 	call	0x6dae	; 0x6dae <memcpy>
  _uidLen = uidLen;
    2c32:	1d 87       	std	Y+13, r17	; 0x0d
    PN532DEBUGPRINT.print(F("Using authentication KEY "));PN532DEBUGPRINT.print(keyNumber ? 'B' : 'A');PN532DEBUGPRINT.print(F(": "));
    NFC_PN532::PrintHex(_key, 6);
  #endif

  // Prepare the authentication command //
  pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;   /* Data Exchange Header */
    2c34:	80 e4       	ldi	r24, 0x40	; 64
    2c36:	80 93 2d 09 	sts	0x092D, r24	; 0x80092d <pn532_packetbuffer>
  pn532_packetbuffer[1] = 1;                              /* Max card numbers */
    2c3a:	81 e0       	ldi	r24, 0x01	; 1
    2c3c:	80 93 2e 09 	sts	0x092E, r24	; 0x80092e <pn532_packetbuffer+0x1>
  pn532_packetbuffer[2] = (keyNumber) ? MIFARE_CMD_AUTH_B : MIFARE_CMD_AUTH_A;
    2c40:	e1 10       	cpse	r14, r1
    2c42:	02 c0       	rjmp	.+4      	; 0x2c48 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x4c>
    2c44:	80 e6       	ldi	r24, 0x60	; 96
    2c46:	01 c0       	rjmp	.+2      	; 0x2c4a <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x4e>
    2c48:	81 e6       	ldi	r24, 0x61	; 97
    2c4a:	80 93 2f 09 	sts	0x092F, r24	; 0x80092f <pn532_packetbuffer+0x2>
  pn532_packetbuffer[3] = blockNumber;                    /* Block Number (1K = 0..63, 4K = 0..255 */
    2c4e:	00 93 30 09 	sts	0x0930, r16	; 0x800930 <pn532_packetbuffer+0x3>
  memcpy (pn532_packetbuffer+4, _key, 6);
    2c52:	86 e0       	ldi	r24, 0x06	; 6
    2c54:	f5 01       	movw	r30, r10
    2c56:	a1 e3       	ldi	r26, 0x31	; 49
    2c58:	b9 e0       	ldi	r27, 0x09	; 9
    2c5a:	01 90       	ld	r0, Z+
    2c5c:	0d 92       	st	X+, r0
    2c5e:	8a 95       	dec	r24
    2c60:	e1 f7       	brne	.-8      	; 0x2c5a <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x5e>
  for (i = 0; i < _uidLen; i++)
    2c62:	80 e0       	ldi	r24, 0x00	; 0
    2c64:	4d 85       	ldd	r20, Y+13	; 0x0d
    2c66:	84 17       	cp	r24, r20
    2c68:	60 f4       	brcc	.+24     	; 0x2c82 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x86>
  {
    pn532_packetbuffer[10+i] = _uid[i];                /* 4 byte card ID */
    2c6a:	28 2f       	mov	r18, r24
    2c6c:	30 e0       	ldi	r19, 0x00	; 0
    2c6e:	fe 01       	movw	r30, r28
    2c70:	e2 0f       	add	r30, r18
    2c72:	f3 1f       	adc	r31, r19
    2c74:	96 81       	ldd	r25, Z+6	; 0x06
    2c76:	f9 01       	movw	r30, r18
    2c78:	e3 5d       	subi	r30, 0xD3	; 211
    2c7a:	f6 4f       	sbci	r31, 0xF6	; 246
    2c7c:	92 87       	std	Z+10, r25	; 0x0a
  pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;   /* Data Exchange Header */
  pn532_packetbuffer[1] = 1;                              /* Max card numbers */
  pn532_packetbuffer[2] = (keyNumber) ? MIFARE_CMD_AUTH_B : MIFARE_CMD_AUTH_A;
  pn532_packetbuffer[3] = blockNumber;                    /* Block Number (1K = 0..63, 4K = 0..255 */
  memcpy (pn532_packetbuffer+4, _key, 6);
  for (i = 0; i < _uidLen; i++)
    2c7e:	8f 5f       	subi	r24, 0xFF	; 255
    2c80:	f1 cf       	rjmp	.-30     	; 0x2c64 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x68>
  {
    pn532_packetbuffer[10+i] = _uid[i];                /* 4 byte card ID */
  }

  if (! sendCommandCheckAck(pn532_packetbuffer, 10+_uidLen))
    2c82:	46 5f       	subi	r20, 0xF6	; 246
    2c84:	28 ee       	ldi	r18, 0xE8	; 232
    2c86:	33 e0       	ldi	r19, 0x03	; 3
    2c88:	6d e2       	ldi	r22, 0x2D	; 45
    2c8a:	79 e0       	ldi	r23, 0x09	; 9
    2c8c:	ce 01       	movw	r24, r28
    2c8e:	c4 de       	rcall	.-632    	; 0x2a18 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    2c90:	88 23       	and	r24, r24
    2c92:	49 f0       	breq	.+18     	; 0x2ca6 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0xaa>
    return 0;

  // Read the response packet
  readdata(pn532_packetbuffer, 12);
    2c94:	4c e0       	ldi	r20, 0x0C	; 12
    2c96:	6d e2       	ldi	r22, 0x2D	; 45
    2c98:	79 e0       	ldi	r23, 0x09	; 9
    2c9a:	ce 01       	movw	r24, r28
    2c9c:	19 de       	rcall	.-974    	; 0x28d0 <_ZN9NFC_PN5328readdataEPhh>
  {
    pn532_packetbuffer[10+i] = _uid[i];                /* 4 byte card ID */
  }

  if (! sendCommandCheckAck(pn532_packetbuffer, 10+_uidLen))
    return 0;
    2c9e:	81 e0       	ldi	r24, 0x01	; 1
    2ca0:	90 91 34 09 	lds	r25, 0x0934	; 0x800934 <pn532_packetbuffer+0x7>
    2ca4:	91 11       	cpse	r25, r1
    2ca6:	80 e0       	ldi	r24, 0x00	; 0
    #endif
    return 0;
  }

  return 1;
}
    2ca8:	df 91       	pop	r29
    2caa:	cf 91       	pop	r28
    2cac:	1f 91       	pop	r17
    2cae:	0f 91       	pop	r16
    2cb0:	ef 90       	pop	r14
    2cb2:	df 90       	pop	r13
    2cb4:	cf 90       	pop	r12
    2cb6:	bf 90       	pop	r11
    2cb8:	af 90       	pop	r10
    2cba:	08 95       	ret

00002cbc <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh>:

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
uint8_t NFC_PN532::mifareclassic_ReadDataBlock (uint8_t blockNumber, uint8_t * data)
{
    2cbc:	0f 93       	push	r16
    2cbe:	1f 93       	push	r17
    2cc0:	cf 93       	push	r28
    2cc2:	df 93       	push	r29
    2cc4:	ec 01       	movw	r28, r24
    2cc6:	8a 01       	movw	r16, r20
  #ifdef MIFAREDEBUG
    PN532DEBUGPRINT.print(F("Trying to read 16 bytes from block "));PN532DEBUGPRINT.println(blockNumber);
  #endif

  /* Prepare the command */
  pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;
    2cc8:	80 e4       	ldi	r24, 0x40	; 64
    2cca:	80 93 2d 09 	sts	0x092D, r24	; 0x80092d <pn532_packetbuffer>
  pn532_packetbuffer[1] = 1;                      /* Card number */
    2cce:	81 e0       	ldi	r24, 0x01	; 1
    2cd0:	80 93 2e 09 	sts	0x092E, r24	; 0x80092e <pn532_packetbuffer+0x1>
  pn532_packetbuffer[2] = MIFARE_CMD_READ;        /* Mifare Read command = 0x30 */
    2cd4:	80 e3       	ldi	r24, 0x30	; 48
    2cd6:	80 93 2f 09 	sts	0x092F, r24	; 0x80092f <pn532_packetbuffer+0x2>
  pn532_packetbuffer[3] = blockNumber;            /* Block Number (0..63 for 1K, 0..255 for 4K) */
    2cda:	60 93 30 09 	sts	0x0930, r22	; 0x800930 <pn532_packetbuffer+0x3>

  /* Send the command */
  if (! sendCommandCheckAck(pn532_packetbuffer, 4))
    2cde:	28 ee       	ldi	r18, 0xE8	; 232
    2ce0:	33 e0       	ldi	r19, 0x03	; 3
    2ce2:	44 e0       	ldi	r20, 0x04	; 4
    2ce4:	6d e2       	ldi	r22, 0x2D	; 45
    2ce6:	79 e0       	ldi	r23, 0x09	; 9
    2ce8:	ce 01       	movw	r24, r28
    2cea:	96 de       	rcall	.-724    	; 0x2a18 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    2cec:	81 11       	cpse	r24, r1
    2cee:	02 c0       	rjmp	.+4      	; 0x2cf4 <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh+0x38>
  {
    #ifdef MIFAREDEBUG
      PN532DEBUGPRINT.println(F("Failed to receive ACK for read command"));
    #endif
    return 0;
    2cf0:	80 e0       	ldi	r24, 0x00	; 0
    2cf2:	12 c0       	rjmp	.+36     	; 0x2d18 <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh+0x5c>
  }

  /* Read the response packet */
  readdata(pn532_packetbuffer, 26);
    2cf4:	4a e1       	ldi	r20, 0x1A	; 26
    2cf6:	6d e2       	ldi	r22, 0x2D	; 45
    2cf8:	79 e0       	ldi	r23, 0x09	; 9
    2cfa:	ce 01       	movw	r24, r28
    2cfc:	e9 dd       	rcall	.-1070   	; 0x28d0 <_ZN9NFC_PN5328readdataEPhh>

  /* If byte 8 isn't 0x00 we probably have an error */
  if (pn532_packetbuffer[7] != 0x00)
    2cfe:	80 91 34 09 	lds	r24, 0x0934	; 0x800934 <pn532_packetbuffer+0x7>
    2d02:	81 11       	cpse	r24, r1
    2d04:	f5 cf       	rjmp	.-22     	; 0x2cf0 <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh+0x34>
    return 0;
  }

  /* Copy the 16 data bytes to the output buffer        */
  /* Block content starts at byte 9 of a valid response */
  memcpy (data, pn532_packetbuffer+8, 16);
    2d06:	80 e1       	ldi	r24, 0x10	; 16
    2d08:	e5 e3       	ldi	r30, 0x35	; 53
    2d0a:	f9 e0       	ldi	r31, 0x09	; 9
    2d0c:	d8 01       	movw	r26, r16
    2d0e:	01 90       	ld	r0, Z+
    2d10:	0d 92       	st	X+, r0
    2d12:	8a 95       	dec	r24
    2d14:	e1 f7       	brne	.-8      	; 0x2d0e <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh+0x52>
    PN532DEBUGPRINT.print(F("Block "));
    PN532DEBUGPRINT.println(blockNumber);
    NFC_PN532::PrintHexChar(data, 16);
  #endif

  return 1;
    2d16:	81 e0       	ldi	r24, 0x01	; 1
}
    2d18:	df 91       	pop	r29
    2d1a:	cf 91       	pop	r28
    2d1c:	1f 91       	pop	r17
    2d1e:	0f 91       	pop	r16
    2d20:	08 95       	ret

00002d22 <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh>:

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
uint8_t NFC_PN532::mifareclassic_WriteDataBlock (uint8_t blockNumber, uint8_t * data)
{
    2d22:	cf 93       	push	r28
    2d24:	df 93       	push	r29
    2d26:	ec 01       	movw	r28, r24
  #ifdef MIFAREDEBUG
    PN532DEBUGPRINT.print(F("Trying to write 16 bytes to block "));PN532DEBUGPRINT.println(blockNumber);
  #endif

  /* Prepare the first command */
  pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;
    2d28:	80 e4       	ldi	r24, 0x40	; 64
    2d2a:	80 93 2d 09 	sts	0x092D, r24	; 0x80092d <pn532_packetbuffer>
  pn532_packetbuffer[1] = 1;                      /* Card number */
    2d2e:	81 e0       	ldi	r24, 0x01	; 1
    2d30:	80 93 2e 09 	sts	0x092E, r24	; 0x80092e <pn532_packetbuffer+0x1>
  pn532_packetbuffer[2] = MIFARE_CMD_WRITE;       /* Mifare Write command = 0xA0 */
    2d34:	80 ea       	ldi	r24, 0xA0	; 160
    2d36:	80 93 2f 09 	sts	0x092F, r24	; 0x80092f <pn532_packetbuffer+0x2>
  pn532_packetbuffer[3] = blockNumber;            /* Block Number (0..63 for 1K, 0..255 for 4K) */
    2d3a:	60 93 30 09 	sts	0x0930, r22	; 0x800930 <pn532_packetbuffer+0x3>
  memcpy (pn532_packetbuffer+4, data, 16);          /* Data Payload */
    2d3e:	80 e1       	ldi	r24, 0x10	; 16
    2d40:	fa 01       	movw	r30, r20
    2d42:	a1 e3       	ldi	r26, 0x31	; 49
    2d44:	b9 e0       	ldi	r27, 0x09	; 9
    2d46:	01 90       	ld	r0, Z+
    2d48:	0d 92       	st	X+, r0
    2d4a:	8a 95       	dec	r24
    2d4c:	e1 f7       	brne	.-8      	; 0x2d46 <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh+0x24>

  /* Send the command */
  if (! sendCommandCheckAck(pn532_packetbuffer, 20))
    2d4e:	28 ee       	ldi	r18, 0xE8	; 232
    2d50:	33 e0       	ldi	r19, 0x03	; 3
    2d52:	44 e1       	ldi	r20, 0x14	; 20
    2d54:	6d e2       	ldi	r22, 0x2D	; 45
    2d56:	79 e0       	ldi	r23, 0x09	; 9
    2d58:	ce 01       	movw	r24, r28
    2d5a:	5e de       	rcall	.-836    	; 0x2a18 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    2d5c:	88 23       	and	r24, r24
    2d5e:	69 f0       	breq	.+26     	; 0x2d7a <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh+0x58>
    2d60:	8f e3       	ldi	r24, 0x3F	; 63
    2d62:	9c e9       	ldi	r25, 0x9C	; 156
    2d64:	01 97       	sbiw	r24, 0x01	; 1
    2d66:	f1 f7       	brne	.-4      	; 0x2d64 <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh+0x42>
    2d68:	00 c0       	rjmp	.+0      	; 0x2d6a <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh+0x48>
    2d6a:	00 00       	nop
    return 0;
  }
  _delay_ms(10);

  /* Read the response packet */
  readdata(pn532_packetbuffer, 26);
    2d6c:	4a e1       	ldi	r20, 0x1A	; 26
    2d6e:	6d e2       	ldi	r22, 0x2D	; 45
    2d70:	79 e0       	ldi	r23, 0x09	; 9
    2d72:	ce 01       	movw	r24, r28
    2d74:	ad dd       	rcall	.-1190   	; 0x28d0 <_ZN9NFC_PN5328readdataEPhh>
    2d76:	81 e0       	ldi	r24, 0x01	; 1
    2d78:	01 c0       	rjmp	.+2      	; 0x2d7c <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh+0x5a>
  if (! sendCommandCheckAck(pn532_packetbuffer, 20))
  {
    #ifdef MIFAREDEBUG
      PN532DEBUGPRINT.println(F("Failed to receive ACK for write command"));
    #endif
    return 0;
    2d7a:	80 e0       	ldi	r24, 0x00	; 0

  /* Read the response packet */
  readdata(pn532_packetbuffer, 26);

  return 1;
}
    2d7c:	df 91       	pop	r29
    2d7e:	cf 91       	pop	r28
    2d80:	08 95       	ret

00002d82 <_ZL9date2daysjhh>:
} // of method pinAlarm()                                                     //                                  //
/*******************************************************************************************************************
** Method pinSquareWave() will set the control register flag to make the INT/SQW Pin produce a 1Hz signal         **
*******************************************************************************************************************/
void DS3231M_Class::pinSquareWave() {                                         //                                  //
  writeByte(DS3231M_CONTROL,readByte(DS3231M_CONTROL)|0x4);                   // Set bit 3 to off                 //
    2d82:	80 3d       	cpi	r24, 0xD0	; 208
    2d84:	27 e0       	ldi	r18, 0x07	; 7
    2d86:	92 07       	cpc	r25, r18
    2d88:	10 f0       	brcs	.+4      	; 0x2d8e <_ZL9date2daysjhh+0xc>
    2d8a:	80 5d       	subi	r24, 0xD0	; 208
    2d8c:	97 40       	sbci	r25, 0x07	; 7
    2d8e:	50 e0       	ldi	r21, 0x00	; 0
    2d90:	e6 e2       	ldi	r30, 0x26	; 38
    2d92:	f2 e0       	ldi	r31, 0x02	; 2
    2d94:	21 e0       	ldi	r18, 0x01	; 1
    2d96:	26 17       	cp	r18, r22
    2d98:	30 f4       	brcc	.+12     	; 0x2da6 <_ZL9date2daysjhh+0x24>
    2d9a:	34 91       	lpm	r19, Z
    2d9c:	43 0f       	add	r20, r19
    2d9e:	51 1d       	adc	r21, r1
    2da0:	2f 5f       	subi	r18, 0xFF	; 255
    2da2:	31 96       	adiw	r30, 0x01	; 1
    2da4:	f8 cf       	rjmp	.-16     	; 0x2d96 <_ZL9date2daysjhh+0x14>
    2da6:	63 30       	cpi	r22, 0x03	; 3
    2da8:	38 f0       	brcs	.+14     	; 0x2db8 <_ZL9date2daysjhh+0x36>
    2daa:	9c 01       	movw	r18, r24
    2dac:	23 70       	andi	r18, 0x03	; 3
    2dae:	33 27       	eor	r19, r19
    2db0:	23 2b       	or	r18, r19
    2db2:	11 f4       	brne	.+4      	; 0x2db8 <_ZL9date2daysjhh+0x36>
    2db4:	4f 5f       	subi	r20, 0xFF	; 255
    2db6:	5f 4f       	sbci	r21, 0xFF	; 255
    2db8:	bc 01       	movw	r22, r24
    2dba:	6d 5f       	subi	r22, 0xFD	; 253
    2dbc:	7f 4f       	sbci	r23, 0xFF	; 255
    2dbe:	76 95       	lsr	r23
    2dc0:	67 95       	ror	r22
    2dc2:	76 95       	lsr	r23
    2dc4:	67 95       	ror	r22
    2dc6:	ed e6       	ldi	r30, 0x6D	; 109
    2dc8:	f1 e0       	ldi	r31, 0x01	; 1
    2dca:	8e 9f       	mul	r24, r30
    2dcc:	90 01       	movw	r18, r0
    2dce:	8f 9f       	mul	r24, r31
    2dd0:	30 0d       	add	r19, r0
    2dd2:	9e 9f       	mul	r25, r30
    2dd4:	30 0d       	add	r19, r0
    2dd6:	11 24       	eor	r1, r1
    2dd8:	c9 01       	movw	r24, r18
    2dda:	01 97       	sbiw	r24, 0x01	; 1
    2ddc:	86 0f       	add	r24, r22
    2dde:	97 1f       	adc	r25, r23
    2de0:	84 0f       	add	r24, r20
    2de2:	95 1f       	adc	r25, r21
    2de4:	08 95       	ret

00002de6 <_ZL6conv2dPKc>:
    2de6:	fc 01       	movw	r30, r24
    2de8:	90 81       	ld	r25, Z
    2dea:	90 53       	subi	r25, 0x30	; 48
    2dec:	9a 30       	cpi	r25, 0x0A	; 10
    2dee:	08 f0       	brcs	.+2      	; 0x2df2 <_ZL6conv2dPKc+0xc>
    2df0:	90 e0       	ldi	r25, 0x00	; 0
    2df2:	81 81       	ldd	r24, Z+1	; 0x01
    2df4:	80 53       	subi	r24, 0x30	; 48
    2df6:	2a e0       	ldi	r18, 0x0A	; 10
    2df8:	92 9f       	mul	r25, r18
    2dfa:	80 0d       	add	r24, r0
    2dfc:	11 24       	eor	r1, r1
    2dfe:	08 95       	ret

00002e00 <_ZN8DateTimeC1Em>:
    2e00:	8f 92       	push	r8
    2e02:	9f 92       	push	r9
    2e04:	af 92       	push	r10
    2e06:	bf 92       	push	r11
    2e08:	cf 92       	push	r12
    2e0a:	df 92       	push	r13
    2e0c:	ef 92       	push	r14
    2e0e:	ff 92       	push	r15
    2e10:	cf 93       	push	r28
    2e12:	df 93       	push	r29
    2e14:	ec 01       	movw	r28, r24
    2e16:	6a 01       	movw	r12, r20
    2e18:	7b 01       	movw	r14, r22
    2e1a:	80 e8       	ldi	r24, 0x80	; 128
    2e1c:	c8 1a       	sub	r12, r24
    2e1e:	83 e4       	ldi	r24, 0x43	; 67
    2e20:	d8 0a       	sbc	r13, r24
    2e22:	8d e6       	ldi	r24, 0x6D	; 109
    2e24:	e8 0a       	sbc	r14, r24
    2e26:	88 e3       	ldi	r24, 0x38	; 56
    2e28:	f8 0a       	sbc	r15, r24
    2e2a:	8c e3       	ldi	r24, 0x3C	; 60
    2e2c:	88 2e       	mov	r8, r24
    2e2e:	91 2c       	mov	r9, r1
    2e30:	a1 2c       	mov	r10, r1
    2e32:	b1 2c       	mov	r11, r1
    2e34:	c7 01       	movw	r24, r14
    2e36:	b6 01       	movw	r22, r12
    2e38:	a5 01       	movw	r20, r10
    2e3a:	94 01       	movw	r18, r8
    2e3c:	0e 94 5e 34 	call	0x68bc	; 0x68bc <__udivmodsi4>
    2e40:	6d 83       	std	Y+5, r22	; 0x05
    2e42:	ca 01       	movw	r24, r20
    2e44:	b9 01       	movw	r22, r18
    2e46:	a5 01       	movw	r20, r10
    2e48:	94 01       	movw	r18, r8
    2e4a:	0e 94 5e 34 	call	0x68bc	; 0x68bc <__udivmodsi4>
    2e4e:	6c 83       	std	Y+4, r22	; 0x04
    2e50:	c7 01       	movw	r24, r14
    2e52:	b6 01       	movw	r22, r12
    2e54:	20 e1       	ldi	r18, 0x10	; 16
    2e56:	3e e0       	ldi	r19, 0x0E	; 14
    2e58:	40 e0       	ldi	r20, 0x00	; 0
    2e5a:	50 e0       	ldi	r21, 0x00	; 0
    2e5c:	0e 94 5e 34 	call	0x68bc	; 0x68bc <__udivmodsi4>
    2e60:	ca 01       	movw	r24, r20
    2e62:	b9 01       	movw	r22, r18
    2e64:	28 e1       	ldi	r18, 0x18	; 24
    2e66:	30 e0       	ldi	r19, 0x00	; 0
    2e68:	40 e0       	ldi	r20, 0x00	; 0
    2e6a:	50 e0       	ldi	r21, 0x00	; 0
    2e6c:	0e 94 5e 34 	call	0x68bc	; 0x68bc <__udivmodsi4>
    2e70:	6b 83       	std	Y+3, r22	; 0x03
    2e72:	c7 01       	movw	r24, r14
    2e74:	b6 01       	movw	r22, r12
    2e76:	20 e8       	ldi	r18, 0x80	; 128
    2e78:	31 e5       	ldi	r19, 0x51	; 81
    2e7a:	41 e0       	ldi	r20, 0x01	; 1
    2e7c:	50 e0       	ldi	r21, 0x00	; 0
    2e7e:	0e 94 5e 34 	call	0x68bc	; 0x68bc <__udivmodsi4>
    2e82:	18 82       	st	Y, r1
    2e84:	88 81       	ld	r24, Y
    2e86:	98 2f       	mov	r25, r24
    2e88:	93 70       	andi	r25, 0x03	; 3
    2e8a:	41 e0       	ldi	r20, 0x01	; 1
    2e8c:	50 e0       	ldi	r21, 0x00	; 0
    2e8e:	11 f0       	breq	.+4      	; 0x2e94 <_ZN8DateTimeC1Em+0x94>
    2e90:	40 e0       	ldi	r20, 0x00	; 0
    2e92:	50 e0       	ldi	r21, 0x00	; 0
    2e94:	ba 01       	movw	r22, r20
    2e96:	63 59       	subi	r22, 0x93	; 147
    2e98:	7e 4f       	sbci	r23, 0xFE	; 254
    2e9a:	26 17       	cp	r18, r22
    2e9c:	37 07       	cpc	r19, r23
    2e9e:	38 f0       	brcs	.+14     	; 0x2eae <_ZN8DateTimeC1Em+0xae>
    2ea0:	24 1b       	sub	r18, r20
    2ea2:	35 0b       	sbc	r19, r21
    2ea4:	2d 56       	subi	r18, 0x6D	; 109
    2ea6:	31 40       	sbci	r19, 0x01	; 1
    2ea8:	8f 5f       	subi	r24, 0xFF	; 255
    2eaa:	88 83       	st	Y, r24
    2eac:	eb cf       	rjmp	.-42     	; 0x2e84 <_ZN8DateTimeC1Em+0x84>
    2eae:	81 e0       	ldi	r24, 0x01	; 1
    2eb0:	89 83       	std	Y+1, r24	; 0x01
    2eb2:	89 81       	ldd	r24, Y+1	; 0x01
    2eb4:	e8 2f       	mov	r30, r24
    2eb6:	f0 e0       	ldi	r31, 0x00	; 0
    2eb8:	eb 5d       	subi	r30, 0xDB	; 219
    2eba:	fd 4f       	sbci	r31, 0xFD	; 253
    2ebc:	e4 91       	lpm	r30, Z
    2ebe:	91 11       	cpse	r25, r1
    2ec0:	03 c0       	rjmp	.+6      	; 0x2ec8 <_ZN8DateTimeC1Em+0xc8>
    2ec2:	82 30       	cpi	r24, 0x02	; 2
    2ec4:	09 f4       	brne	.+2      	; 0x2ec8 <_ZN8DateTimeC1Em+0xc8>
    2ec6:	ef 5f       	subi	r30, 0xFF	; 255
    2ec8:	f0 e0       	ldi	r31, 0x00	; 0
    2eca:	2e 17       	cp	r18, r30
    2ecc:	3f 07       	cpc	r19, r31
    2ece:	20 f0       	brcs	.+8      	; 0x2ed8 <_ZN8DateTimeC1Em+0xd8>
    2ed0:	2e 1b       	sub	r18, r30
    2ed2:	3f 0b       	sbc	r19, r31
    2ed4:	8f 5f       	subi	r24, 0xFF	; 255
    2ed6:	ec cf       	rjmp	.-40     	; 0x2eb0 <_ZN8DateTimeC1Em+0xb0>
    2ed8:	2f 5f       	subi	r18, 0xFF	; 255
    2eda:	2a 83       	std	Y+2, r18	; 0x02
    2edc:	df 91       	pop	r29
    2ede:	cf 91       	pop	r28
    2ee0:	ff 90       	pop	r15
    2ee2:	ef 90       	pop	r14
    2ee4:	df 90       	pop	r13
    2ee6:	cf 90       	pop	r12
    2ee8:	bf 90       	pop	r11
    2eea:	af 90       	pop	r10
    2eec:	9f 90       	pop	r9
    2eee:	8f 90       	pop	r8
    2ef0:	08 95       	ret

00002ef2 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>:
    2ef2:	ef 92       	push	r14
    2ef4:	ff 92       	push	r15
    2ef6:	0f 93       	push	r16
    2ef8:	1f 93       	push	r17
    2efa:	cf 93       	push	r28
    2efc:	df 93       	push	r29
    2efe:	cd b7       	in	r28, 0x3d	; 61
    2f00:	de b7       	in	r29, 0x3e	; 62
    2f02:	2b 97       	sbiw	r28, 0x0b	; 11
    2f04:	0f b6       	in	r0, 0x3f	; 63
    2f06:	f8 94       	cli
    2f08:	de bf       	out	0x3e, r29	; 62
    2f0a:	0f be       	out	0x3f, r0	; 63
    2f0c:	cd bf       	out	0x3d, r28	; 61
    2f0e:	8c 01       	movw	r16, r24
    2f10:	7a 01       	movw	r14, r20
    2f12:	4b e0       	ldi	r20, 0x0B	; 11
    2f14:	50 e0       	ldi	r21, 0x00	; 0
    2f16:	ce 01       	movw	r24, r28
    2f18:	01 96       	adiw	r24, 0x01	; 1
    2f1a:	0e 94 ce 36 	call	0x6d9c	; 0x6d9c <memcpy_P>
    2f1e:	ce 01       	movw	r24, r28
    2f20:	0a 96       	adiw	r24, 0x0a	; 10
    2f22:	61 df       	rcall	.-318    	; 0x2de6 <_ZL6conv2dPKc>
    2f24:	f8 01       	movw	r30, r16
    2f26:	80 83       	st	Z, r24
    2f28:	e9 81       	ldd	r30, Y+1	; 0x01
    2f2a:	8e 2f       	mov	r24, r30
    2f2c:	90 e0       	ldi	r25, 0x00	; 0
    2f2e:	fc 01       	movw	r30, r24
    2f30:	e1 54       	subi	r30, 0x41	; 65
    2f32:	f1 09       	sbc	r31, r1
    2f34:	e3 31       	cpi	r30, 0x13	; 19
    2f36:	f1 05       	cpc	r31, r1
    2f38:	48 f5       	brcc	.+82     	; 0x2f8c <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
    2f3a:	ee 5a       	subi	r30, 0xAE	; 174
    2f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3e:	0c 94 80 34 	jmp	0x6900	; 0x6900 <__tablejump2__>
    2f42:	8a 81       	ldd	r24, Y+2	; 0x02
    2f44:	81 36       	cpi	r24, 0x61	; 97
    2f46:	29 f0       	breq	.+10     	; 0x2f52 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x60>
    2f48:	8b 81       	ldd	r24, Y+3	; 0x03
    2f4a:	8e 36       	cpi	r24, 0x6E	; 110
    2f4c:	21 f0       	breq	.+8      	; 0x2f56 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x64>
    2f4e:	87 e0       	ldi	r24, 0x07	; 7
    2f50:	1b c0       	rjmp	.+54     	; 0x2f88 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    2f52:	81 e0       	ldi	r24, 0x01	; 1
    2f54:	19 c0       	rjmp	.+50     	; 0x2f88 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    2f56:	86 e0       	ldi	r24, 0x06	; 6
    2f58:	17 c0       	rjmp	.+46     	; 0x2f88 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    2f5a:	82 e0       	ldi	r24, 0x02	; 2
    2f5c:	15 c0       	rjmp	.+42     	; 0x2f88 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    2f5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f60:	82 37       	cpi	r24, 0x72	; 114
    2f62:	11 f0       	breq	.+4      	; 0x2f68 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x76>
    2f64:	88 e0       	ldi	r24, 0x08	; 8
    2f66:	10 c0       	rjmp	.+32     	; 0x2f88 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    2f68:	84 e0       	ldi	r24, 0x04	; 4
    2f6a:	0e c0       	rjmp	.+28     	; 0x2f88 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    2f6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f6e:	82 37       	cpi	r24, 0x72	; 114
    2f70:	11 f0       	breq	.+4      	; 0x2f76 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x84>
    2f72:	85 e0       	ldi	r24, 0x05	; 5
    2f74:	09 c0       	rjmp	.+18     	; 0x2f88 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    2f76:	83 e0       	ldi	r24, 0x03	; 3
    2f78:	07 c0       	rjmp	.+14     	; 0x2f88 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    2f7a:	89 e0       	ldi	r24, 0x09	; 9
    2f7c:	05 c0       	rjmp	.+10     	; 0x2f88 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    2f7e:	8a e0       	ldi	r24, 0x0A	; 10
    2f80:	03 c0       	rjmp	.+6      	; 0x2f88 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    2f82:	8b e0       	ldi	r24, 0x0B	; 11
    2f84:	01 c0       	rjmp	.+2      	; 0x2f88 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    2f86:	8c e0       	ldi	r24, 0x0C	; 12
    2f88:	f8 01       	movw	r30, r16
    2f8a:	81 83       	std	Z+1, r24	; 0x01
    2f8c:	ce 01       	movw	r24, r28
    2f8e:	05 96       	adiw	r24, 0x05	; 5
    2f90:	2a df       	rcall	.-428    	; 0x2de6 <_ZL6conv2dPKc>
    2f92:	f8 01       	movw	r30, r16
    2f94:	82 83       	std	Z+2, r24	; 0x02
    2f96:	48 e0       	ldi	r20, 0x08	; 8
    2f98:	50 e0       	ldi	r21, 0x00	; 0
    2f9a:	b7 01       	movw	r22, r14
    2f9c:	ce 01       	movw	r24, r28
    2f9e:	01 96       	adiw	r24, 0x01	; 1
    2fa0:	0e 94 ce 36 	call	0x6d9c	; 0x6d9c <memcpy_P>
    2fa4:	ce 01       	movw	r24, r28
    2fa6:	01 96       	adiw	r24, 0x01	; 1
    2fa8:	1e df       	rcall	.-452    	; 0x2de6 <_ZL6conv2dPKc>
    2faa:	f8 01       	movw	r30, r16
    2fac:	83 83       	std	Z+3, r24	; 0x03
    2fae:	ce 01       	movw	r24, r28
    2fb0:	04 96       	adiw	r24, 0x04	; 4
    2fb2:	19 df       	rcall	.-462    	; 0x2de6 <_ZL6conv2dPKc>
    2fb4:	f8 01       	movw	r30, r16
    2fb6:	84 83       	std	Z+4, r24	; 0x04
    2fb8:	ce 01       	movw	r24, r28
    2fba:	07 96       	adiw	r24, 0x07	; 7
    2fbc:	14 df       	rcall	.-472    	; 0x2de6 <_ZL6conv2dPKc>
    2fbe:	f8 01       	movw	r30, r16
    2fc0:	85 83       	std	Z+5, r24	; 0x05
    2fc2:	2b 96       	adiw	r28, 0x0b	; 11
    2fc4:	0f b6       	in	r0, 0x3f	; 63
    2fc6:	f8 94       	cli
    2fc8:	de bf       	out	0x3e, r29	; 62
    2fca:	0f be       	out	0x3f, r0	; 63
    2fcc:	cd bf       	out	0x3d, r28	; 61
    2fce:	df 91       	pop	r29
    2fd0:	cf 91       	pop	r28
    2fd2:	1f 91       	pop	r17
    2fd4:	0f 91       	pop	r16
    2fd6:	ff 90       	pop	r15
    2fd8:	ef 90       	pop	r14
    2fda:	08 95       	ret

00002fdc <_ZNK8DateTime12dayOfTheWeekEv>:
    2fdc:	fc 01       	movw	r30, r24
    2fde:	80 81       	ld	r24, Z
    2fe0:	42 81       	ldd	r20, Z+2	; 0x02
    2fe2:	61 81       	ldd	r22, Z+1	; 0x01
    2fe4:	90 e0       	ldi	r25, 0x00	; 0
    2fe6:	cd de       	rcall	.-614    	; 0x2d82 <_ZL9date2daysjhh>
    2fe8:	06 96       	adiw	r24, 0x06	; 6
    2fea:	67 e0       	ldi	r22, 0x07	; 7
    2fec:	70 e0       	ldi	r23, 0x00	; 0
    2fee:	0c 94 4a 34 	jmp	0x6894	; 0x6894 <__udivmodhi4>
    2ff2:	08 95       	ret

00002ff4 <_ZNK8DateTime8unixtimeEv>:
    2ff4:	ef 92       	push	r14
    2ff6:	ff 92       	push	r15
    2ff8:	0f 93       	push	r16
    2ffa:	1f 93       	push	r17
    2ffc:	cf 93       	push	r28
    2ffe:	df 93       	push	r29
    3000:	ec 01       	movw	r28, r24
    3002:	88 81       	ld	r24, Y
    3004:	4a 81       	ldd	r20, Y+2	; 0x02
    3006:	69 81       	ldd	r22, Y+1	; 0x01
    3008:	90 e0       	ldi	r25, 0x00	; 0
    300a:	bb de       	rcall	.-650    	; 0x2d82 <_ZL9date2daysjhh>
    300c:	9c 01       	movw	r18, r24
    300e:	a8 e1       	ldi	r26, 0x18	; 24
    3010:	b0 e0       	ldi	r27, 0x00	; 0
    3012:	0e 94 89 34 	call	0x6912	; 0x6912 <__umulhisi3>
    3016:	2b 81       	ldd	r18, Y+3	; 0x03
    3018:	7b 01       	movw	r14, r22
    301a:	8c 01       	movw	r16, r24
    301c:	e2 0e       	add	r14, r18
    301e:	f1 1c       	adc	r15, r1
    3020:	01 1d       	adc	r16, r1
    3022:	11 1d       	adc	r17, r1
    3024:	a8 01       	movw	r20, r16
    3026:	97 01       	movw	r18, r14
    3028:	ac e3       	ldi	r26, 0x3C	; 60
    302a:	b0 e0       	ldi	r27, 0x00	; 0
    302c:	0e 94 98 34 	call	0x6930	; 0x6930 <__muluhisi3>
    3030:	2c 81       	ldd	r18, Y+4	; 0x04
    3032:	7b 01       	movw	r14, r22
    3034:	8c 01       	movw	r16, r24
    3036:	e2 0e       	add	r14, r18
    3038:	f1 1c       	adc	r15, r1
    303a:	01 1d       	adc	r16, r1
    303c:	11 1d       	adc	r17, r1
    303e:	a8 01       	movw	r20, r16
    3040:	97 01       	movw	r18, r14
    3042:	0e 94 98 34 	call	0x6930	; 0x6930 <__muluhisi3>
    3046:	2d 81       	ldd	r18, Y+5	; 0x05
    3048:	dc 01       	movw	r26, r24
    304a:	cb 01       	movw	r24, r22
    304c:	82 0f       	add	r24, r18
    304e:	91 1d       	adc	r25, r1
    3050:	a1 1d       	adc	r26, r1
    3052:	b1 1d       	adc	r27, r1
    3054:	bc 01       	movw	r22, r24
    3056:	cd 01       	movw	r24, r26
    3058:	60 58       	subi	r22, 0x80	; 128
    305a:	7c 4b       	sbci	r23, 0xBC	; 188
    305c:	82 49       	sbci	r24, 0x92	; 146
    305e:	97 4c       	sbci	r25, 0xC7	; 199
    3060:	df 91       	pop	r29
    3062:	cf 91       	pop	r28
    3064:	1f 91       	pop	r17
    3066:	0f 91       	pop	r16
    3068:	ff 90       	pop	r15
    306a:	ef 90       	pop	r14
    306c:	08 95       	ret

0000306e <_ZNK8DateTime11secondstimeEv>:
    306e:	ef 92       	push	r14
    3070:	ff 92       	push	r15
    3072:	0f 93       	push	r16
    3074:	1f 93       	push	r17
    3076:	cf 93       	push	r28
    3078:	df 93       	push	r29
    307a:	ec 01       	movw	r28, r24
    307c:	88 81       	ld	r24, Y
    307e:	4a 81       	ldd	r20, Y+2	; 0x02
    3080:	69 81       	ldd	r22, Y+1	; 0x01
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	7e de       	rcall	.-772    	; 0x2d82 <_ZL9date2daysjhh>
    3086:	9c 01       	movw	r18, r24
    3088:	a8 e1       	ldi	r26, 0x18	; 24
    308a:	b0 e0       	ldi	r27, 0x00	; 0
    308c:	0e 94 89 34 	call	0x6912	; 0x6912 <__umulhisi3>
    3090:	2b 81       	ldd	r18, Y+3	; 0x03
    3092:	7b 01       	movw	r14, r22
    3094:	8c 01       	movw	r16, r24
    3096:	e2 0e       	add	r14, r18
    3098:	f1 1c       	adc	r15, r1
    309a:	01 1d       	adc	r16, r1
    309c:	11 1d       	adc	r17, r1
    309e:	a8 01       	movw	r20, r16
    30a0:	97 01       	movw	r18, r14
    30a2:	ac e3       	ldi	r26, 0x3C	; 60
    30a4:	b0 e0       	ldi	r27, 0x00	; 0
    30a6:	0e 94 98 34 	call	0x6930	; 0x6930 <__muluhisi3>
    30aa:	2c 81       	ldd	r18, Y+4	; 0x04
    30ac:	7b 01       	movw	r14, r22
    30ae:	8c 01       	movw	r16, r24
    30b0:	e2 0e       	add	r14, r18
    30b2:	f1 1c       	adc	r15, r1
    30b4:	01 1d       	adc	r16, r1
    30b6:	11 1d       	adc	r17, r1
    30b8:	a8 01       	movw	r20, r16
    30ba:	97 01       	movw	r18, r14
    30bc:	0e 94 98 34 	call	0x6930	; 0x6930 <__muluhisi3>
    30c0:	2d 81       	ldd	r18, Y+5	; 0x05
    30c2:	62 0f       	add	r22, r18
    30c4:	71 1d       	adc	r23, r1
    30c6:	81 1d       	adc	r24, r1
    30c8:	91 1d       	adc	r25, r1
    30ca:	df 91       	pop	r29
    30cc:	cf 91       	pop	r28
    30ce:	1f 91       	pop	r17
    30d0:	0f 91       	pop	r16
    30d2:	ff 90       	pop	r15
    30d4:	ef 90       	pop	r14
    30d6:	08 95       	ret

000030d8 <_ZN13DS3231M_ClassC1Ev>:
    30d8:	fc 01       	movw	r30, r24
    30da:	10 82       	st	Z, r1
    30dc:	11 82       	std	Z+1, r1	; 0x01
    30de:	12 82       	std	Z+2, r1	; 0x02
    30e0:	13 82       	std	Z+3, r1	; 0x03
    30e2:	14 82       	std	Z+4, r1	; 0x04
    30e4:	08 95       	ret

000030e6 <_ZN13DS3231M_ClassD1Ev>:
    30e6:	08 95       	ret

000030e8 <_ZN13DS3231M_Class9writeByteEhh>:
    30e8:	0f 93       	push	r16
    30ea:	1f 93       	push	r17
    30ec:	cf 93       	push	r28
    30ee:	df 93       	push	r29
    30f0:	ec 01       	movw	r28, r24
    30f2:	06 2f       	mov	r16, r22
    30f4:	14 2f       	mov	r17, r20
    30f6:	68 e6       	ldi	r22, 0x68	; 104
    30f8:	86 e2       	ldi	r24, 0x26	; 38
    30fa:	9a e0       	ldi	r25, 0x0A	; 10
    30fc:	0e 94 25 2b 	call	0x564a	; 0x564a <_ZN7TwoWire17beginTransmissionEh>
    3100:	60 2f       	mov	r22, r16
    3102:	86 e2       	ldi	r24, 0x26	; 38
    3104:	9a e0       	ldi	r25, 0x0A	; 10
    3106:	0e 94 d4 2a 	call	0x55a8	; 0x55a8 <_ZN7TwoWire5writeEh>
    310a:	61 2f       	mov	r22, r17
    310c:	86 e2       	ldi	r24, 0x26	; 38
    310e:	9a e0       	ldi	r25, 0x0A	; 10
    3110:	0e 94 d4 2a 	call	0x55a8	; 0x55a8 <_ZN7TwoWire5writeEh>
    3114:	86 e2       	ldi	r24, 0x26	; 38
    3116:	9a e0       	ldi	r25, 0x0A	; 10
    3118:	0e 94 a6 2b 	call	0x574c	; 0x574c <_ZN7TwoWire15endTransmissionEv>
    311c:	88 83       	st	Y, r24
    311e:	df 91       	pop	r29
    3120:	cf 91       	pop	r28
    3122:	1f 91       	pop	r17
    3124:	0f 91       	pop	r16
    3126:	08 95       	ret

00003128 <_ZN13DS3231M_Class8readByteEh>:
    3128:	1f 93       	push	r17
    312a:	cf 93       	push	r28
    312c:	df 93       	push	r29
    312e:	ec 01       	movw	r28, r24
    3130:	16 2f       	mov	r17, r22
    3132:	68 e6       	ldi	r22, 0x68	; 104
    3134:	86 e2       	ldi	r24, 0x26	; 38
    3136:	9a e0       	ldi	r25, 0x0A	; 10
    3138:	0e 94 25 2b 	call	0x564a	; 0x564a <_ZN7TwoWire17beginTransmissionEh>
    313c:	61 2f       	mov	r22, r17
    313e:	86 e2       	ldi	r24, 0x26	; 38
    3140:	9a e0       	ldi	r25, 0x0A	; 10
    3142:	0e 94 d4 2a 	call	0x55a8	; 0x55a8 <_ZN7TwoWire5writeEh>
    3146:	86 e2       	ldi	r24, 0x26	; 38
    3148:	9a e0       	ldi	r25, 0x0A	; 10
    314a:	0e 94 a6 2b 	call	0x574c	; 0x574c <_ZN7TwoWire15endTransmissionEv>
    314e:	88 83       	st	Y, r24
    3150:	41 e0       	ldi	r20, 0x01	; 1
    3152:	68 e6       	ldi	r22, 0x68	; 104
    3154:	86 e2       	ldi	r24, 0x26	; 38
    3156:	9a e0       	ldi	r25, 0x0A	; 10
    3158:	0e 94 a2 2b 	call	0x5744	; 0x5744 <_ZN7TwoWire11requestFromEhh>
    315c:	86 e2       	ldi	r24, 0x26	; 38
    315e:	9a e0       	ldi	r25, 0x0A	; 10
    3160:	0e 94 4e 2a 	call	0x549c	; 0x549c <_ZN7TwoWire4readEv>
    3164:	df 91       	pop	r29
    3166:	cf 91       	pop	r28
    3168:	1f 91       	pop	r17
    316a:	08 95       	ret

0000316c <_ZN13DS3231M_Class5beginEm>:
    316c:	cf 92       	push	r12
    316e:	df 92       	push	r13
    3170:	ef 92       	push	r14
    3172:	ff 92       	push	r15
    3174:	cf 93       	push	r28
    3176:	df 93       	push	r29
    3178:	ec 01       	movw	r28, r24
    317a:	6a 01       	movw	r12, r20
    317c:	7b 01       	movw	r14, r22
    317e:	86 e2       	ldi	r24, 0x26	; 38
    3180:	9a e0       	ldi	r25, 0x0A	; 10
    3182:	0e 94 12 2b 	call	0x5624	; 0x5624 <_ZN7TwoWire5beginEv>
    3186:	b7 01       	movw	r22, r14
    3188:	a6 01       	movw	r20, r12
    318a:	86 e2       	ldi	r24, 0x26	; 38
    318c:	9a e0       	ldi	r25, 0x0A	; 10
    318e:	0e 94 22 2b 	call	0x5644	; 0x5644 <_ZN7TwoWire8setClockEm>
    3192:	68 e6       	ldi	r22, 0x68	; 104
    3194:	86 e2       	ldi	r24, 0x26	; 38
    3196:	9a e0       	ldi	r25, 0x0A	; 10
    3198:	0e 94 25 2b 	call	0x564a	; 0x564a <_ZN7TwoWire17beginTransmissionEh>
    319c:	86 e2       	ldi	r24, 0x26	; 38
    319e:	9a e0       	ldi	r25, 0x0A	; 10
    31a0:	0e 94 a6 2b 	call	0x574c	; 0x574c <_ZN7TwoWire15endTransmissionEv>
    31a4:	81 11       	cpse	r24, r1
    31a6:	0a c0       	rjmp	.+20     	; 0x31bc <_ZN13DS3231M_Class5beginEm+0x50>
    31a8:	62 e0       	ldi	r22, 0x02	; 2
    31aa:	ce 01       	movw	r24, r28
    31ac:	bd df       	rcall	.-134    	; 0x3128 <_ZN13DS3231M_Class8readByteEh>
    31ae:	48 2f       	mov	r20, r24
    31b0:	4f 7b       	andi	r20, 0xBF	; 191
    31b2:	62 e0       	ldi	r22, 0x02	; 2
    31b4:	ce 01       	movw	r24, r28
    31b6:	98 df       	rcall	.-208    	; 0x30e8 <_ZN13DS3231M_Class9writeByteEhh>
    31b8:	81 e0       	ldi	r24, 0x01	; 1
    31ba:	01 c0       	rjmp	.+2      	; 0x31be <_ZN13DS3231M_Class5beginEm+0x52>
    31bc:	80 e0       	ldi	r24, 0x00	; 0
    31be:	df 91       	pop	r29
    31c0:	cf 91       	pop	r28
    31c2:	ff 90       	pop	r15
    31c4:	ef 90       	pop	r14
    31c6:	df 90       	pop	r13
    31c8:	cf 90       	pop	r12
    31ca:	08 95       	ret

000031cc <_ZN13DS3231M_Class3nowEv>:
/*******************************************************************************************************************
** Method now() returns the current date/time                                                                     **
** then the power down time is returned, if the timeType = 2 then the power up time is returned. These options are**
** not documented as the official calls are "getPowerOffDate" and "getPowerOnDate"                                **
*******************************************************************************************************************/
DateTime DS3231M_Class::now(){                                                // Return current date/time         //
    31cc:	0f 93       	push	r16
    31ce:	1f 93       	push	r17
    31d0:	cf 93       	push	r28
    31d2:	df 93       	push	r29
    31d4:	8c 01       	movw	r16, r24
    31d6:	eb 01       	movw	r28, r22
  Wire.beginTransmission(DS3231M_ADDRESS);                                    // Address the I2C device           //
    31d8:	68 e6       	ldi	r22, 0x68	; 104
    31da:	86 e2       	ldi	r24, 0x26	; 38
    31dc:	9a e0       	ldi	r25, 0x0A	; 10
    31de:	0e 94 25 2b 	call	0x564a	; 0x564a <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(DS3231M_RTCSEC);                                                 // Start at specified register      //
    31e2:	60 e0       	ldi	r22, 0x00	; 0
    31e4:	86 e2       	ldi	r24, 0x26	; 38
    31e6:	9a e0       	ldi	r25, 0x0A	; 10
    31e8:	0e 94 d4 2a 	call	0x55a8	; 0x55a8 <_ZN7TwoWire5writeEh>
  _TransmissionStatus = Wire.endTransmission();                               // Close transmission               //
    31ec:	86 e2       	ldi	r24, 0x26	; 38
    31ee:	9a e0       	ldi	r25, 0x0A	; 10
    31f0:	0e 94 a6 2b 	call	0x574c	; 0x574c <_ZN7TwoWire15endTransmissionEv>
    31f4:	88 83       	st	Y, r24
  Wire.requestFrom(DS3231M_ADDRESS, (uint8_t)7);                              // Request 7 bytes of data          //
    31f6:	47 e0       	ldi	r20, 0x07	; 7
    31f8:	68 e6       	ldi	r22, 0x68	; 104
    31fa:	86 e2       	ldi	r24, 0x26	; 38
    31fc:	9a e0       	ldi	r25, 0x0A	; 10
    31fe:	0e 94 a2 2b 	call	0x5744	; 0x5744 <_ZN7TwoWire11requestFromEhh>
  if(Wire.available()==7) {                                                   // Wait until the data is ready     //
    3202:	86 e2       	ldi	r24, 0x26	; 38
    3204:	9a e0       	ldi	r25, 0x0A	; 10
    3206:	0e 94 46 2a 	call	0x548c	; 0x548c <_ZN7TwoWire9availableEv>
    320a:	07 97       	sbiw	r24, 0x07	; 7
    320c:	09 f0       	breq	.+2      	; 0x3210 <_ZN13DS3231M_Class3nowEv+0x44>
    320e:	64 c0       	rjmp	.+200    	; 0x32d8 <_ZN13DS3231M_Class3nowEv+0x10c>
    _ss = bcd2int(Wire.read() & 0x7F);                                        // Mask high bit in seconds         //
    3210:	86 e2       	ldi	r24, 0x26	; 38
    3212:	9a e0       	ldi	r25, 0x0A	; 10
    3214:	0e 94 4e 2a 	call	0x549c	; 0x549c <_ZN7TwoWire4readEv>
    3218:	98 2f       	mov	r25, r24
    321a:	96 95       	lsr	r25
    321c:	96 95       	lsr	r25
    321e:	96 95       	lsr	r25
    3220:	9e 70       	andi	r25, 0x0E	; 14
    3222:	29 2f       	mov	r18, r25
    3224:	22 0f       	add	r18, r18
    3226:	22 0f       	add	r18, r18
    3228:	92 0f       	add	r25, r18
    322a:	8f 70       	andi	r24, 0x0F	; 15
    322c:	89 0f       	add	r24, r25
    322e:	8d 83       	std	Y+5, r24	; 0x05
    _mm = bcd2int(Wire.read() & 0x7F);                                        // Mask high bit in minutes         //
    3230:	86 e2       	ldi	r24, 0x26	; 38
    3232:	9a e0       	ldi	r25, 0x0A	; 10
    3234:	0e 94 4e 2a 	call	0x549c	; 0x549c <_ZN7TwoWire4readEv>
    3238:	98 2f       	mov	r25, r24
    323a:	96 95       	lsr	r25
    323c:	96 95       	lsr	r25
    323e:	96 95       	lsr	r25
    3240:	9e 70       	andi	r25, 0x0E	; 14
    3242:	29 2f       	mov	r18, r25
    3244:	22 0f       	add	r18, r18
    3246:	22 0f       	add	r18, r18
    3248:	92 0f       	add	r25, r18
    324a:	8f 70       	andi	r24, 0x0F	; 15
    324c:	89 0f       	add	r24, r25
    324e:	8e 83       	std	Y+6, r24	; 0x06
    _hh = bcd2int(Wire.read() & 0x7F);                                        // Mask high bit in hours           //
    3250:	86 e2       	ldi	r24, 0x26	; 38
    3252:	9a e0       	ldi	r25, 0x0A	; 10
    3254:	0e 94 4e 2a 	call	0x549c	; 0x549c <_ZN7TwoWire4readEv>
    3258:	98 2f       	mov	r25, r24
    325a:	96 95       	lsr	r25
    325c:	96 95       	lsr	r25
    325e:	96 95       	lsr	r25
    3260:	9e 70       	andi	r25, 0x0E	; 14
    3262:	29 2f       	mov	r18, r25
    3264:	22 0f       	add	r18, r18
    3266:	22 0f       	add	r18, r18
    3268:	92 0f       	add	r25, r18
    326a:	8f 70       	andi	r24, 0x0F	; 15
    326c:	89 0f       	add	r24, r25
    326e:	8f 83       	std	Y+7, r24	; 0x07
    Wire.read();                                                              // Ignore Day-Of-Week register      //
    3270:	86 e2       	ldi	r24, 0x26	; 38
    3272:	9a e0       	ldi	r25, 0x0A	; 10
    3274:	0e 94 4e 2a 	call	0x549c	; 0x549c <_ZN7TwoWire4readEv>
    _d = bcd2int(Wire.read()  & 0x3F);                                        // Mask 2 high bits for day of month//
    3278:	86 e2       	ldi	r24, 0x26	; 38
    327a:	9a e0       	ldi	r25, 0x0A	; 10
    327c:	0e 94 4e 2a 	call	0x549c	; 0x549c <_ZN7TwoWire4readEv>
    3280:	98 2f       	mov	r25, r24
    3282:	96 95       	lsr	r25
    3284:	96 95       	lsr	r25
    3286:	96 95       	lsr	r25
    3288:	96 70       	andi	r25, 0x06	; 6
    328a:	29 2f       	mov	r18, r25
    328c:	22 0f       	add	r18, r18
    328e:	22 0f       	add	r18, r18
    3290:	92 0f       	add	r25, r18
    3292:	8f 70       	andi	r24, 0x0F	; 15
    3294:	89 0f       	add	r24, r25
    3296:	88 87       	std	Y+8, r24	; 0x08
    _m = bcd2int(Wire.read()  & 0x1F);                                        // Mask 3 high bits for Month       //
    3298:	86 e2       	ldi	r24, 0x26	; 38
    329a:	9a e0       	ldi	r25, 0x0A	; 10
    329c:	0e 94 4e 2a 	call	0x549c	; 0x549c <_ZN7TwoWire4readEv>
    32a0:	84 fb       	bst	r24, 4
    32a2:	99 27       	eor	r25, r25
    32a4:	90 f9       	bld	r25, 0
    32a6:	99 0f       	add	r25, r25
    32a8:	29 2f       	mov	r18, r25
    32aa:	22 0f       	add	r18, r18
    32ac:	22 0f       	add	r18, r18
    32ae:	92 0f       	add	r25, r18
    32b0:	8f 70       	andi	r24, 0x0F	; 15
    32b2:	89 0f       	add	r24, r25
    32b4:	89 87       	std	Y+9, r24	; 0x09
    _y = bcd2int(Wire.read()) + 2000;                                         // Add 2000 to internal year        //
    32b6:	86 e2       	ldi	r24, 0x26	; 38
    32b8:	9a e0       	ldi	r25, 0x0A	; 10
    32ba:	0e 94 4e 2a 	call	0x549c	; 0x549c <_ZN7TwoWire4readEv>
    32be:	98 2f       	mov	r25, r24
    32c0:	92 95       	swap	r25
    32c2:	9f 70       	andi	r25, 0x0F	; 15
    32c4:	8f 70       	andi	r24, 0x0F	; 15
    32c6:	2a e0       	ldi	r18, 0x0A	; 10
    32c8:	92 9f       	mul	r25, r18
    32ca:	80 0d       	add	r24, r0
    32cc:	11 24       	eor	r1, r1
    32ce:	90 e0       	ldi	r25, 0x00	; 0
    32d0:	80 53       	subi	r24, 0x30	; 48
    32d2:	98 4f       	sbci	r25, 0xF8	; 248
    32d4:	9b 87       	std	Y+11, r25	; 0x0b
    32d6:	8a 87       	std	Y+10, r24	; 0x0a
  } // of if-then there is data to be read                                    //                                  //
  return DateTime (_y, _m, _d, _hh, _mm, _ss);                                // Return class value               //
    32d8:	2d 81       	ldd	r18, Y+5	; 0x05
    32da:	3e 81       	ldd	r19, Y+6	; 0x06
    32dc:	4f 81       	ldd	r20, Y+7	; 0x07
    32de:	58 85       	ldd	r21, Y+8	; 0x08
    32e0:	69 85       	ldd	r22, Y+9	; 0x09
    32e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    32e4:	9b 85       	ldd	r25, Y+11	; 0x0b
  } // of for-next each month                                                 //                                  //
  d = days + 1;                                                               //                                  //
} // of method DateTime()                                                     //----------------------------------//
DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour,  //                                  //
                    uint8_t min, uint8_t sec) {                               //                                  //
  if (year >= 2000)                                                           //                                  //
    32e6:	80 3d       	cpi	r24, 0xD0	; 208
    32e8:	77 e0       	ldi	r23, 0x07	; 7
    32ea:	97 07       	cpc	r25, r23
    32ec:	10 f0       	brcs	.+4      	; 0x32f2 <_ZN13DS3231M_Class3nowEv+0x126>
  year -= 2000;                                                               //                                  //
    32ee:	80 5d       	subi	r24, 0xD0	; 208
    32f0:	97 40       	sbci	r25, 0x07	; 7
  yOff = year;                                                                //                                  //
    32f2:	f8 01       	movw	r30, r16
    32f4:	80 83       	st	Z, r24
  m = month;                                                                  //                                  //
    32f6:	61 83       	std	Z+1, r22	; 0x01
  d = day;                                                                    //                                  //
    32f8:	52 83       	std	Z+2, r21	; 0x02
  hh = hour;                                                                  //                                  //
    32fa:	43 83       	std	Z+3, r20	; 0x03
  mm = min;                                                                   //                                  //
    32fc:	34 83       	std	Z+4, r19	; 0x04
  ss = sec;                                                                   //                                  //
    32fe:	25 83       	std	Z+5, r18	; 0x05
    _d = bcd2int(Wire.read()  & 0x3F);                                        // Mask 2 high bits for day of month//
    _m = bcd2int(Wire.read()  & 0x1F);                                        // Mask 3 high bits for Month       //
    _y = bcd2int(Wire.read()) + 2000;                                         // Add 2000 to internal year        //
  } // of if-then there is data to be read                                    //                                  //
  return DateTime (_y, _m, _d, _hh, _mm, _ss);                                // Return class value               //
} // of method now                                                            //                                  //
    3300:	c8 01       	movw	r24, r16
    3302:	df 91       	pop	r29
    3304:	cf 91       	pop	r28
    3306:	1f 91       	pop	r17
    3308:	0f 91       	pop	r16
    330a:	08 95       	ret

0000330c <_ZN13DS3231M_Class6adjustERK8DateTime>:
** oscillator is stopped during the process and needs to be restarted upon completion.                            **
*******************************************************************************************************************/
void DS3231M_Class::adjust() {                                                // Set the RTC date and Time        //
  adjust(DateTime(F(__DATE__), F(__TIME__)));                                 // Set to compile time              //
} // of method adjust                                                         /-----------------------------------//
void DS3231M_Class::adjust(const DateTime& dt) {                              // Set the RTC date and Time        //
    330c:	df 92       	push	r13
    330e:	ef 92       	push	r14
    3310:	ff 92       	push	r15
    3312:	0f 93       	push	r16
    3314:	1f 93       	push	r17
    3316:	cf 93       	push	r28
    3318:	df 93       	push	r29
    331a:	00 d0       	rcall	.+0      	; 0x331c <_ZN13DS3231M_Class6adjustERK8DateTime+0x10>
    331c:	00 d0       	rcall	.+0      	; 0x331e <_ZN13DS3231M_Class6adjustERK8DateTime+0x12>
    331e:	00 d0       	rcall	.+0      	; 0x3320 <_ZN13DS3231M_Class6adjustERK8DateTime+0x14>
    3320:	cd b7       	in	r28, 0x3d	; 61
    3322:	de b7       	in	r29, 0x3e	; 62
    3324:	8c 01       	movw	r16, r24
    3326:	7b 01       	movw	r14, r22
    3328:	fb 01       	movw	r30, r22
    332a:	85 81       	ldd	r24, Z+5	; 0x05
  writeByte(DS3231M_RTCSEC,int2bcd(dt.second()));                             // Write seconds, keep device off   //
    332c:	9a e0       	ldi	r25, 0x0A	; 10
    332e:	d9 2e       	mov	r13, r25
    3330:	6d 2d       	mov	r22, r13
    3332:	0e 94 3e 34 	call	0x687c	; 0x687c <__udivmodqi4>
    3336:	49 2f       	mov	r20, r25
    3338:	f0 e1       	ldi	r31, 0x10	; 16
    333a:	8f 9f       	mul	r24, r31
    333c:	40 0d       	add	r20, r0
    333e:	11 24       	eor	r1, r1
    3340:	60 e0       	ldi	r22, 0x00	; 0
    3342:	c8 01       	movw	r24, r16
    3344:	d1 de       	rcall	.-606    	; 0x30e8 <_ZN13DS3231M_Class9writeByteEhh>
    3346:	f7 01       	movw	r30, r14
    3348:	84 81       	ldd	r24, Z+4	; 0x04
  writeByte(DS3231M_RTCMIN,int2bcd(dt.minute()));                             // Write the minutes value          //
    334a:	6d 2d       	mov	r22, r13
    334c:	0e 94 3e 34 	call	0x687c	; 0x687c <__udivmodqi4>
    3350:	49 2f       	mov	r20, r25
    3352:	f0 e1       	ldi	r31, 0x10	; 16
    3354:	8f 9f       	mul	r24, r31
    3356:	40 0d       	add	r20, r0
    3358:	11 24       	eor	r1, r1
    335a:	61 e0       	ldi	r22, 0x01	; 1
    335c:	c8 01       	movw	r24, r16
    335e:	c4 de       	rcall	.-632    	; 0x30e8 <_ZN13DS3231M_Class9writeByteEhh>
    3360:	f7 01       	movw	r30, r14
    3362:	83 81       	ldd	r24, Z+3	; 0x03
  writeByte(DS3231M_RTCHOUR,int2bcd(dt.hour()));                              // Also re-sets the 24Hour clock on //
    3364:	6d 2d       	mov	r22, r13
    3366:	0e 94 3e 34 	call	0x687c	; 0x687c <__udivmodqi4>
    336a:	49 2f       	mov	r20, r25
    336c:	f0 e1       	ldi	r31, 0x10	; 16
    336e:	8f 9f       	mul	r24, r31
    3370:	40 0d       	add	r20, r0
    3372:	11 24       	eor	r1, r1
    3374:	62 e0       	ldi	r22, 0x02	; 2
    3376:	c8 01       	movw	r24, r16
  writeByte(DS3231M_RTCWKDAY,dt.dayOfTheWeek());                              // Update the weekday               //
    3378:	b7 de       	rcall	.-658    	; 0x30e8 <_ZN13DS3231M_Class9writeByteEhh>
    337a:	c7 01       	movw	r24, r14
    337c:	2f de       	rcall	.-930    	; 0x2fdc <_ZNK8DateTime12dayOfTheWeekEv>
    337e:	48 2f       	mov	r20, r24
    3380:	63 e0       	ldi	r22, 0x03	; 3
    3382:	c8 01       	movw	r24, r16
    3384:	b1 de       	rcall	.-670    	; 0x30e8 <_ZN13DS3231M_Class9writeByteEhh>
    3386:	f7 01       	movw	r30, r14
    3388:	82 81       	ldd	r24, Z+2	; 0x02
  writeByte(DS3231M_RTCDATE,int2bcd(dt.day()));                               // Write the day of month           //
    338a:	6d 2d       	mov	r22, r13
    338c:	0e 94 3e 34 	call	0x687c	; 0x687c <__udivmodqi4>
    3390:	49 2f       	mov	r20, r25
    3392:	f0 e1       	ldi	r31, 0x10	; 16
    3394:	8f 9f       	mul	r24, r31
    3396:	40 0d       	add	r20, r0
    3398:	11 24       	eor	r1, r1
    339a:	64 e0       	ldi	r22, 0x04	; 4
    339c:	c8 01       	movw	r24, r16
    339e:	a4 de       	rcall	.-696    	; 0x30e8 <_ZN13DS3231M_Class9writeByteEhh>
    33a0:	f7 01       	movw	r30, r14
    33a2:	81 81       	ldd	r24, Z+1	; 0x01
  writeByte(DS3231M_RTCMTH,int2bcd(dt.month()));                              // Month, ignore century bit        //
    33a4:	6d 2d       	mov	r22, r13
    33a6:	0e 94 3e 34 	call	0x687c	; 0x687c <__udivmodqi4>
    33aa:	49 2f       	mov	r20, r25
    33ac:	f0 e1       	ldi	r31, 0x10	; 16
    33ae:	8f 9f       	mul	r24, r31
    33b0:	40 0d       	add	r20, r0
    33b2:	11 24       	eor	r1, r1
    33b4:	65 e0       	ldi	r22, 0x05	; 5
    33b6:	c8 01       	movw	r24, r16
    33b8:	97 de       	rcall	.-722    	; 0x30e8 <_ZN13DS3231M_Class9writeByteEhh>
  writeByte(DS3231M_RTCYEAR,int2bcd(dt.year()-2000));                         // Write the year                   //
    33ba:	f7 01       	movw	r30, r14
    33bc:	80 81       	ld	r24, Z
    33be:	6d 2d       	mov	r22, r13
    33c0:	0e 94 3e 34 	call	0x687c	; 0x687c <__udivmodqi4>
    33c4:	49 2f       	mov	r20, r25
    33c6:	f0 e1       	ldi	r31, 0x10	; 16
    33c8:	8f 9f       	mul	r24, r31
    33ca:	40 0d       	add	r20, r0
    33cc:	11 24       	eor	r1, r1
    33ce:	66 e0       	ldi	r22, 0x06	; 6
    33d0:	c8 01       	movw	r24, r16
  writeByte(DS3231M_STATUS,readByte(DS3231M_STATUS)&B01111111);               // Unset OSC flag bit if set        //
    33d2:	8a de       	rcall	.-748    	; 0x30e8 <_ZN13DS3231M_Class9writeByteEhh>
    33d4:	6f e0       	ldi	r22, 0x0F	; 15
    33d6:	c8 01       	movw	r24, r16
    33d8:	a7 de       	rcall	.-690    	; 0x3128 <_ZN13DS3231M_Class8readByteEh>
    33da:	48 2f       	mov	r20, r24
    33dc:	4f 77       	andi	r20, 0x7F	; 127
    33de:	6f e0       	ldi	r22, 0x0F	; 15
    33e0:	c8 01       	movw	r24, r16
  writeByte(DS3231M_CONTROL,readByte(DS3231M_CONTROL)&B01111111);             // Unset EOSC flag bit if set       //
    33e2:	82 de       	rcall	.-764    	; 0x30e8 <_ZN13DS3231M_Class9writeByteEhh>
    33e4:	6e e0       	ldi	r22, 0x0E	; 14
    33e6:	c8 01       	movw	r24, r16
    33e8:	9f de       	rcall	.-706    	; 0x3128 <_ZN13DS3231M_Class8readByteEh>
    33ea:	48 2f       	mov	r20, r24
    33ec:	4f 77       	andi	r20, 0x7F	; 127
    33ee:	6e e0       	ldi	r22, 0x0E	; 14
    33f0:	c8 01       	movw	r24, r16
  _SetUnixTime = now().unixtime();                                            // Store time of last change        //
    33f2:	7a de       	rcall	.-780    	; 0x30e8 <_ZN13DS3231M_Class9writeByteEhh>
    33f4:	b8 01       	movw	r22, r16
    33f6:	ce 01       	movw	r24, r28
    33f8:	01 96       	adiw	r24, 0x01	; 1
    33fa:	e8 de       	rcall	.-560    	; 0x31cc <_ZN13DS3231M_Class3nowEv>
    33fc:	ce 01       	movw	r24, r28
    33fe:	01 96       	adiw	r24, 0x01	; 1
    3400:	f9 dd       	rcall	.-1038   	; 0x2ff4 <_ZNK8DateTime8unixtimeEv>
    3402:	f8 01       	movw	r30, r16
    3404:	61 83       	std	Z+1, r22	; 0x01
    3406:	72 83       	std	Z+2, r23	; 0x02
    3408:	83 83       	std	Z+3, r24	; 0x03
    340a:	94 83       	std	Z+4, r25	; 0x04
    340c:	26 96       	adiw	r28, 0x06	; 6
} // of method adjust                                                         //                                  //
    340e:	0f b6       	in	r0, 0x3f	; 63
    3410:	f8 94       	cli
    3412:	de bf       	out	0x3e, r29	; 62
    3414:	0f be       	out	0x3f, r0	; 63
    3416:	cd bf       	out	0x3d, r28	; 61
    3418:	df 91       	pop	r29
    341a:	cf 91       	pop	r28
    341c:	1f 91       	pop	r17
    341e:	0f 91       	pop	r16
    3420:	ff 90       	pop	r15
    3422:	ef 90       	pop	r14
    3424:	df 90       	pop	r13
    3426:	08 95       	ret

00003428 <_ZN13DS3231M_Class6adjustEv>:
    3428:	0f 93       	push	r16
/*******************************************************************************************************************
** Method adjust set the current date/time. This is an overloaded function, if called with no parameters then the **
** RTC is set to the date/time when the program was compiled and uploaded. Otherwise the values are set, but the  **
** oscillator is stopped during the process and needs to be restarted upon completion.                            **
*******************************************************************************************************************/
void DS3231M_Class::adjust() {                                                // Set the RTC date and Time        //
    342a:	1f 93       	push	r17
    342c:	cf 93       	push	r28
    342e:	df 93       	push	r29
    3430:	00 d0       	rcall	.+0      	; 0x3432 <_ZN13DS3231M_Class6adjustEv+0xa>
    3432:	00 d0       	rcall	.+0      	; 0x3434 <_ZN13DS3231M_Class6adjustEv+0xc>
    3434:	00 d0       	rcall	.+0      	; 0x3436 <_ZN13DS3231M_Class6adjustEv+0xe>
    3436:	cd b7       	in	r28, 0x3d	; 61
    3438:	de b7       	in	r29, 0x3e	; 62
    343a:	8c 01       	movw	r16, r24
  adjust(DateTime(F(__DATE__), F(__TIME__)));                                 // Set to compile time              //
    343c:	4d e1       	ldi	r20, 0x1D	; 29
    343e:	52 e0       	ldi	r21, 0x02	; 2
    3440:	61 e1       	ldi	r22, 0x11	; 17
    3442:	72 e0       	ldi	r23, 0x02	; 2
    3444:	ce 01       	movw	r24, r28
    3446:	01 96       	adiw	r24, 0x01	; 1
    3448:	54 dd       	rcall	.-1368   	; 0x2ef2 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>
    344a:	be 01       	movw	r22, r28
    344c:	6f 5f       	subi	r22, 0xFF	; 255
    344e:	7f 4f       	sbci	r23, 0xFF	; 255
    3450:	c8 01       	movw	r24, r16
    3452:	5c df       	rcall	.-328    	; 0x330c <_ZN13DS3231M_Class6adjustERK8DateTime>
} // of method adjust                                                         /-----------------------------------//
    3454:	26 96       	adiw	r28, 0x06	; 6
    3456:	0f b6       	in	r0, 0x3f	; 63
    3458:	f8 94       	cli
    345a:	de bf       	out	0x3e, r29	; 62
    345c:	0f be       	out	0x3f, r0	; 63
    345e:	cd bf       	out	0x3d, r28	; 61
    3460:	df 91       	pop	r29
    3462:	cf 91       	pop	r28
    3464:	1f 91       	pop	r17
    3466:	0f 91       	pop	r16
    3468:	08 95       	ret

0000346a <_GLOBAL__sub_I__ZN9DhcpClass13beginWithDHCPEPhmm>:
    unsigned long m = n;
    n /= 16;
    char c = m - 16 * n;
    *str-- = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);
}
    346a:	0f 93       	push	r16
    346c:	00 e0       	ldi	r16, 0x00	; 0
    346e:	20 e0       	ldi	r18, 0x00	; 0
    3470:	40 e0       	ldi	r20, 0x00	; 0
    3472:	60 e0       	ldi	r22, 0x00	; 0
    3474:	8d e6       	ldi	r24, 0x6D	; 109
    3476:	99 e0       	ldi	r25, 0x09	; 9
    3478:	0e 94 a1 2d 	call	0x5b42	; 0x5b42 <_ZN9IPAddressC1Ehhhh>
    347c:	0f 91       	pop	r16
    347e:	08 95       	ret

00003480 <_ZN9DNSClient5beginERK9IPAddress>:
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    3480:	fb 01       	movw	r30, r22
    3482:	42 81       	ldd	r20, Z+2	; 0x02
    3484:	53 81       	ldd	r21, Z+3	; 0x03
    3486:	64 81       	ldd	r22, Z+4	; 0x04
    3488:	75 81       	ldd	r23, Z+5	; 0x05
    348a:	fc 01       	movw	r30, r24
    348c:	42 83       	std	Z+2, r20	; 0x02
    348e:	53 83       	std	Z+3, r21	; 0x03
    3490:	64 83       	std	Z+4, r22	; 0x04
    3492:	75 83       	std	Z+5, r23	; 0x05
#define INVALID_RESPONSE -4

void DNSClient::begin(const IPAddress& aDNSServer)
{
    iDNSServer = aDNSServer;
    iRequestId = 0;
    3494:	17 82       	std	Z+7, r1	; 0x07
    3496:	16 82       	std	Z+6, r1	; 0x06
    3498:	08 95       	ret

0000349a <_ZN9DNSClient9inet_atonEPKcR9IPAddress>:
}


int DNSClient::inet_aton(const char* aIPAddrString, IPAddress& aResult)
{
    349a:	cf 93       	push	r28
    349c:	df 93       	push	r29
    349e:	da 01       	movw	r26, r20
    34a0:	fb 01       	movw	r30, r22
    34a2:	eb 01       	movw	r28, r22
    // See if we've been given a valid IP address
    const char* p =aIPAddrString;
    while (*p &&
    34a4:	89 91       	ld	r24, Y+
    34a6:	81 11       	cpse	r24, r1
    34a8:	fd cf       	rjmp	.-6      	; 0x34a4 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0xa>
    34aa:	80 e0       	ldi	r24, 0x00	; 0
    34ac:	90 e0       	ldi	r25, 0x00	; 0
    34ae:	20 e0       	ldi	r18, 0x00	; 0
    34b0:	30 e0       	ldi	r19, 0x00	; 0
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
    34b2:	4a e0       	ldi	r20, 0x0A	; 10
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
        int segmentValue =0;
        while (*p && (segment < 4))
    34b4:	51 91       	ld	r21, Z+
    34b6:	55 23       	and	r21, r21
    34b8:	e9 f0       	breq	.+58     	; 0x34f4 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x5a>
    34ba:	24 30       	cpi	r18, 0x04	; 4
    34bc:	31 05       	cpc	r19, r1
    34be:	44 f5       	brge	.+80     	; 0x3510 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
        {
            if (*p == '.')
    34c0:	5e 32       	cpi	r21, 0x2E	; 46
    34c2:	69 f4       	brne	.+26     	; 0x34de <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x44>
            {
                // We've reached the end of a segment
                if (segmentValue > 255)
    34c4:	8f 3f       	cpi	r24, 0xFF	; 255
    34c6:	91 05       	cpc	r25, r1
    34c8:	09 f0       	breq	.+2      	; 0x34cc <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x32>
    34ca:	14 f5       	brge	.+68     	; 0x3510 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
                    // You can't have IP address segments that don't fit in a byte
                    return 0;
                }
                else
                {
                    aResult[segment] = (byte)segmentValue;
    34cc:	ed 01       	movw	r28, r26
    34ce:	c2 0f       	add	r28, r18
    34d0:	d3 1f       	adc	r29, r19
    34d2:	8a 83       	std	Y+2, r24	; 0x02
                    segment++;
    34d4:	2f 5f       	subi	r18, 0xFF	; 255
    34d6:	3f 4f       	sbci	r19, 0xFF	; 255
                    segmentValue = 0;
    34d8:	80 e0       	ldi	r24, 0x00	; 0
    34da:	90 e0       	ldi	r25, 0x00	; 0
    34dc:	eb cf       	rjmp	.-42     	; 0x34b4 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x1a>
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
    34de:	48 9f       	mul	r20, r24
    34e0:	b0 01       	movw	r22, r0
    34e2:	49 9f       	mul	r20, r25
    34e4:	70 0d       	add	r23, r0
    34e6:	11 24       	eor	r1, r1
    34e8:	85 2f       	mov	r24, r21
    34ea:	90 e0       	ldi	r25, 0x00	; 0
    34ec:	c0 97       	sbiw	r24, 0x30	; 48
    34ee:	86 0f       	add	r24, r22
    34f0:	97 1f       	adc	r25, r23
    34f2:	e0 cf       	rjmp	.-64     	; 0x34b4 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x1a>
            }
            p++;
        }
        // We've reached the end of address, but there'll still be the last
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
    34f4:	8f 3f       	cpi	r24, 0xFF	; 255
    34f6:	91 05       	cpc	r25, r1
    34f8:	09 f0       	breq	.+2      	; 0x34fc <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x62>
    34fa:	54 f4       	brge	.+20     	; 0x3510 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
    34fc:	24 30       	cpi	r18, 0x04	; 4
    34fe:	31 05       	cpc	r19, r1
    3500:	3c f4       	brge	.+14     	; 0x3510 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
            // or more than four segments
            return 0;
        }
        else
        {
            aResult[segment] = (byte)segmentValue;
    3502:	fd 01       	movw	r30, r26
    3504:	e2 0f       	add	r30, r18
    3506:	f3 1f       	adc	r31, r19
    3508:	82 83       	std	Z+2, r24	; 0x02
            return 1;
    350a:	81 e0       	ldi	r24, 0x01	; 1
    350c:	90 e0       	ldi	r25, 0x00	; 0
    350e:	02 c0       	rjmp	.+4      	; 0x3514 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x7a>
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
        {
            // You can't have IP address segments that don't fit in a byte,
            // or more than four segments
            return 0;
    3510:	80 e0       	ldi	r24, 0x00	; 0
    3512:	90 e0       	ldi	r25, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    3514:	df 91       	pop	r29
    3516:	cf 91       	pop	r28
    3518:	08 95       	ret

0000351a <_GLOBAL__sub_I__ZN9DNSClient5beginERK9IPAddress>:
    // Mark the entire packet as read
    iUdp.flush();

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
}
    351a:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    351c:	00 e0       	ldi	r16, 0x00	; 0
    351e:	20 e0       	ldi	r18, 0x00	; 0
    3520:	40 e0       	ldi	r20, 0x00	; 0
    3522:	60 e0       	ldi	r22, 0x00	; 0
    3524:	83 e7       	ldi	r24, 0x73	; 115
    3526:	99 e0       	ldi	r25, 0x09	; 9
    3528:	0e 94 a1 2d 	call	0x5b42	; 0x5b42 <_ZN9IPAddressC1Ehhhh>
    352c:	0f 91       	pop	r16
    352e:	08 95       	ret

00003530 <_ZN9DNSClient12BuildRequestEPKc>:

    return ret;
}

uint16_t DNSClient::BuildRequest(const char* aName)
{
    3530:	8f 92       	push	r8
    3532:	9f 92       	push	r9
    3534:	af 92       	push	r10
    3536:	bf 92       	push	r11
    3538:	cf 92       	push	r12
    353a:	df 92       	push	r13
    353c:	ef 92       	push	r14
    353e:	ff 92       	push	r15
    3540:	0f 93       	push	r16
    3542:	1f 93       	push	r17
    3544:	cf 93       	push	r28
    3546:	df 93       	push	r29
    3548:	00 d0       	rcall	.+0      	; 0x354a <_ZN9DNSClient12BuildRequestEPKc+0x1a>
    354a:	1f 92       	push	r1
    354c:	cd b7       	in	r28, 0x3d	; 61
    354e:	de b7       	in	r29, 0x3e	; 62
    3550:	6c 01       	movw	r12, r24
    3552:	7b 01       	movw	r14, r22
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    //    |                    ARCOUNT                    |
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    // As we only support one request at a time at present, we can simplify
    // some of this header
    iRequestId = millis(); // generate a random ID
    3554:	0e 94 22 2f 	call	0x5e44	; 0x5e44 <millis>
    3558:	f6 01       	movw	r30, r12
    355a:	77 83       	std	Z+7, r23	; 0x07
    355c:	66 83       	std	Z+6, r22	; 0x06
    uint16_t twoByteBuffer;

    // FIXME We should also check that there's enough space available to write to, rather
    // FIXME than assume there's enough space (as the code does at present)
    iUdp.write((uint8_t*)&iRequestId, sizeof(iRequestId));
    355e:	86 01       	movw	r16, r12
    3560:	08 5f       	subi	r16, 0xF8	; 248
    3562:	1f 4f       	sbci	r17, 0xFF	; 255
    3564:	b6 01       	movw	r22, r12
    3566:	6a 5f       	subi	r22, 0xFA	; 250
    3568:	7f 4f       	sbci	r23, 0xFF	; 255
    356a:	42 e0       	ldi	r20, 0x02	; 2
    356c:	50 e0       	ldi	r21, 0x00	; 0
    356e:	c8 01       	movw	r24, r16
    3570:	30 d5       	rcall	.+2656   	; 0x3fd2 <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = htons(QUERY_FLAG | OPCODE_STANDARD_QUERY | RECURSION_DESIRED_FLAG);
    3572:	81 e0       	ldi	r24, 0x01	; 1
    3574:	90 e0       	ldi	r25, 0x00	; 0
    3576:	9a 83       	std	Y+2, r25	; 0x02
    3578:	89 83       	std	Y+1, r24	; 0x01
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    357a:	42 e0       	ldi	r20, 0x02	; 2
    357c:	50 e0       	ldi	r21, 0x00	; 0
    357e:	be 01       	movw	r22, r28
    3580:	6f 5f       	subi	r22, 0xFF	; 255
    3582:	7f 4f       	sbci	r23, 0xFF	; 255
    3584:	c8 01       	movw	r24, r16
    3586:	25 d5       	rcall	.+2634   	; 0x3fd2 <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = htons(1);  // One question record
    3588:	80 e0       	ldi	r24, 0x00	; 0
    358a:	91 e0       	ldi	r25, 0x01	; 1
    358c:	9a 83       	std	Y+2, r25	; 0x02
    358e:	89 83       	std	Y+1, r24	; 0x01
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    3590:	42 e0       	ldi	r20, 0x02	; 2
    3592:	50 e0       	ldi	r21, 0x00	; 0
    3594:	be 01       	movw	r22, r28
    3596:	6f 5f       	subi	r22, 0xFF	; 255
    3598:	7f 4f       	sbci	r23, 0xFF	; 255
    359a:	c8 01       	movw	r24, r16
    359c:	1a d5       	rcall	.+2612   	; 0x3fd2 <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = 0;  // Zero answer records
    359e:	1a 82       	std	Y+2, r1	; 0x02
    35a0:	19 82       	std	Y+1, r1	; 0x01
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    35a2:	42 e0       	ldi	r20, 0x02	; 2
    35a4:	50 e0       	ldi	r21, 0x00	; 0
    35a6:	be 01       	movw	r22, r28
    35a8:	6f 5f       	subi	r22, 0xFF	; 255
    35aa:	7f 4f       	sbci	r23, 0xFF	; 255
    35ac:	c8 01       	movw	r24, r16
    35ae:	11 d5       	rcall	.+2594   	; 0x3fd2 <_ZN11EthernetUDP5writeEPKhj>

    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    35b0:	42 e0       	ldi	r20, 0x02	; 2
    35b2:	50 e0       	ldi	r21, 0x00	; 0
    35b4:	be 01       	movw	r22, r28
    35b6:	6f 5f       	subi	r22, 0xFF	; 255
    35b8:	7f 4f       	sbci	r23, 0xFF	; 255
    35ba:	c8 01       	movw	r24, r16
    35bc:	0a d5       	rcall	.+2580   	; 0x3fd2 <_ZN11EthernetUDP5writeEPKhj>
    // and zero additional records
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    35be:	42 e0       	ldi	r20, 0x02	; 2
    35c0:	50 e0       	ldi	r21, 0x00	; 0
    35c2:	be 01       	movw	r22, r28
    35c4:	6f 5f       	subi	r22, 0xFF	; 255
    35c6:	7f 4f       	sbci	r23, 0xFF	; 255
    35c8:	c8 01       	movw	r24, r16
    35ca:	03 d5       	rcall	.+2566   	; 0x3fd2 <_ZN11EthernetUDP5writeEPKhj>

    // Build question
    const char* start =aName;
    const char* end =start;
    35cc:	57 01       	movw	r10, r14
    uint8_t len;
    // Run through the name being requested
    while (*end)
    35ce:	f5 01       	movw	r30, r10
    35d0:	80 81       	ld	r24, Z
    35d2:	88 23       	and	r24, r24
    35d4:	f9 f0       	breq	.+62     	; 0x3614 <_ZN9DNSClient12BuildRequestEPKc+0xe4>
    35d6:	a7 01       	movw	r20, r14
    35d8:	5a 01       	movw	r10, r20
    {
        // Find out how long this section of the name is
        end = start;
        while (*end && (*end != '.') )
    35da:	f5 01       	movw	r30, r10
    35dc:	81 91       	ld	r24, Z+
    35de:	6f 01       	movw	r12, r30
    35e0:	88 23       	and	r24, r24
    35e2:	21 f0       	breq	.+8      	; 0x35ec <_ZN9DNSClient12BuildRequestEPKc+0xbc>
    35e4:	8e 32       	cpi	r24, 0x2E	; 46
    35e6:	11 f0       	breq	.+4      	; 0x35ec <_ZN9DNSClient12BuildRequestEPKc+0xbc>
    35e8:	a6 01       	movw	r20, r12
    35ea:	f6 cf       	rjmp	.-20     	; 0x35d8 <_ZN9DNSClient12BuildRequestEPKc+0xa8>
        {
            end++;
        }

        if (end-start > 0)
    35ec:	4a 01       	movw	r8, r20
    35ee:	8e 18       	sub	r8, r14
    35f0:	9f 08       	sbc	r9, r15
    35f2:	18 14       	cp	r1, r8
    35f4:	19 04       	cpc	r1, r9
    35f6:	64 f4       	brge	.+24     	; 0x3610 <_ZN9DNSClient12BuildRequestEPKc+0xe0>
        {
            // Write out the size of this section
            len = end-start;
    35f8:	8b 82       	std	Y+3, r8	; 0x03
            iUdp.write(&len, sizeof(len));
    35fa:	41 e0       	ldi	r20, 0x01	; 1
    35fc:	50 e0       	ldi	r21, 0x00	; 0
    35fe:	be 01       	movw	r22, r28
    3600:	6d 5f       	subi	r22, 0xFD	; 253
    3602:	7f 4f       	sbci	r23, 0xFF	; 255
    3604:	c8 01       	movw	r24, r16
            // And then write out the section
            iUdp.write((uint8_t*)start, end-start);
    3606:	e5 d4       	rcall	.+2506   	; 0x3fd2 <_ZN11EthernetUDP5writeEPKhj>
    3608:	a4 01       	movw	r20, r8
    360a:	b7 01       	movw	r22, r14
    360c:	c8 01       	movw	r24, r16
    360e:	e1 d4       	rcall	.+2498   	; 0x3fd2 <_ZN11EthernetUDP5writeEPKhj>
        }
        start = end+1;
    3610:	76 01       	movw	r14, r12
    }

    // We've got to the end of the question name, so
    // terminate it with a zero-length section
    len = 0;
    3612:	dd cf       	rjmp	.-70     	; 0x35ce <_ZN9DNSClient12BuildRequestEPKc+0x9e>
    iUdp.write(&len, sizeof(len));
    3614:	1b 82       	std	Y+3, r1	; 0x03
    3616:	41 e0       	ldi	r20, 0x01	; 1
    3618:	50 e0       	ldi	r21, 0x00	; 0
    361a:	be 01       	movw	r22, r28
    361c:	6d 5f       	subi	r22, 0xFD	; 253
    361e:	7f 4f       	sbci	r23, 0xFF	; 255
    3620:	c8 01       	movw	r24, r16
    3622:	d7 d4       	rcall	.+2478   	; 0x3fd2 <_ZN11EthernetUDP5writeEPKhj>
    // Finally the type and class of question
    twoByteBuffer = htons(TYPE_A);
    3624:	e1 2c       	mov	r14, r1
    3626:	ff 24       	eor	r15, r15
    3628:	f3 94       	inc	r15
    362a:	fa 82       	std	Y+2, r15	; 0x02
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    362c:	e9 82       	std	Y+1, r14	; 0x01
    362e:	42 e0       	ldi	r20, 0x02	; 2
    3630:	50 e0       	ldi	r21, 0x00	; 0
    3632:	be 01       	movw	r22, r28
    3634:	6f 5f       	subi	r22, 0xFF	; 255
    3636:	7f 4f       	sbci	r23, 0xFF	; 255
    3638:	c8 01       	movw	r24, r16

    twoByteBuffer = htons(CLASS_IN);  // Internet class of question
    363a:	cb d4       	rcall	.+2454   	; 0x3fd2 <_ZN11EthernetUDP5writeEPKhj>
    363c:	fa 82       	std	Y+2, r15	; 0x02
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    363e:	e9 82       	std	Y+1, r14	; 0x01
    3640:	42 e0       	ldi	r20, 0x02	; 2
    3642:	50 e0       	ldi	r21, 0x00	; 0
    3644:	be 01       	movw	r22, r28
    3646:	6f 5f       	subi	r22, 0xFF	; 255
    3648:	7f 4f       	sbci	r23, 0xFF	; 255
    364a:	c8 01       	movw	r24, r16
    364c:	c2 d4       	rcall	.+2436   	; 0x3fd2 <_ZN11EthernetUDP5writeEPKhj>
    // Success!  Everything buffered okay
    return 1;
}
    364e:	81 e0       	ldi	r24, 0x01	; 1
    3650:	90 e0       	ldi	r25, 0x00	; 0
    3652:	0f 90       	pop	r0
    3654:	0f 90       	pop	r0
    3656:	0f 90       	pop	r0
    3658:	df 91       	pop	r29
    365a:	cf 91       	pop	r28
    365c:	1f 91       	pop	r17
    365e:	0f 91       	pop	r16
    3660:	ff 90       	pop	r15
    3662:	ef 90       	pop	r14
    3664:	df 90       	pop	r13
    3666:	cf 90       	pop	r12
    3668:	bf 90       	pop	r11
    366a:	af 90       	pop	r10
    366c:	9f 90       	pop	r9
    366e:	8f 90       	pop	r8
    3670:	08 95       	ret

00003672 <_ZN9DNSClient15ProcessResponseEjR9IPAddress>:


uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    3672:	2f 92       	push	r2
    3674:	3f 92       	push	r3
    3676:	4f 92       	push	r4
    3678:	5f 92       	push	r5
    367a:	6f 92       	push	r6
    367c:	7f 92       	push	r7
    367e:	8f 92       	push	r8
    3680:	9f 92       	push	r9
    3682:	af 92       	push	r10
    3684:	bf 92       	push	r11
    3686:	cf 92       	push	r12
    3688:	df 92       	push	r13
    368a:	ef 92       	push	r14
    368c:	ff 92       	push	r15
    368e:	0f 93       	push	r16
    3690:	1f 93       	push	r17
    3692:	cf 93       	push	r28
    3694:	df 93       	push	r29
    3696:	cd b7       	in	r28, 0x3d	; 61
    3698:	de b7       	in	r29, 0x3e	; 62
    369a:	63 97       	sbiw	r28, 0x13	; 19
    369c:	0f b6       	in	r0, 0x3f	; 63
    369e:	f8 94       	cli
    36a0:	de bf       	out	0x3e, r29	; 62
    36a2:	0f be       	out	0x3f, r0	; 63
    36a4:	cd bf       	out	0x3d, r28	; 61
    36a6:	7c 01       	movw	r14, r24
    36a8:	6b 01       	movw	r12, r22
    36aa:	1a 01       	movw	r2, r20
    uint32_t startTime = millis();
    36ac:	0e 94 22 2f 	call	0x5e44	; 0x5e44 <millis>
    36b0:	4b 01       	movw	r8, r22
    36b2:	5c 01       	movw	r10, r24

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    36b4:	87 01       	movw	r16, r14
    36b6:	08 5f       	subi	r16, 0xF8	; 248
    36b8:	1f 4f       	sbci	r17, 0xFF	; 255
    {
        if((millis() - startTime) > aTimeout)
    36ba:	26 01       	movw	r4, r12
    36bc:	61 2c       	mov	r6, r1
    36be:	71 2c       	mov	r7, r1
uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    36c0:	c8 01       	movw	r24, r16
    36c2:	29 d5       	rcall	.+2642   	; 0x4116 <_ZN11EthernetUDP11parsePacketEv>
    36c4:	18 16       	cp	r1, r24
    36c6:	19 06       	cpc	r1, r25
    36c8:	a4 f0       	brlt	.+40     	; 0x36f2 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x80>
    {
        if((millis() - startTime) > aTimeout)
    36ca:	0e 94 22 2f 	call	0x5e44	; 0x5e44 <millis>
    36ce:	dc 01       	movw	r26, r24
    36d0:	cb 01       	movw	r24, r22
    36d2:	88 19       	sub	r24, r8
    36d4:	99 09       	sbc	r25, r9
    36d6:	aa 09       	sbc	r26, r10
    36d8:	bb 09       	sbc	r27, r11
    36da:	48 16       	cp	r4, r24
    36dc:	59 06       	cpc	r5, r25
    36de:	6a 06       	cpc	r6, r26
    36e0:	7b 06       	cpc	r7, r27
    36e2:	d0 f0       	brcs	.+52     	; 0x3718 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xa6>
            return TIMED_OUT;
        delay(50);
    36e4:	62 e3       	ldi	r22, 0x32	; 50
    36e6:	70 e0       	ldi	r23, 0x00	; 0
    36e8:	80 e0       	ldi	r24, 0x00	; 0
    36ea:	90 e0       	ldi	r25, 0x00	; 0
    36ec:	0e 94 53 2f 	call	0x5ea6	; 0x5ea6 <delay>
uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    36f0:	e7 cf       	rjmp	.-50     	; 0x36c0 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x4e>

    // We've had a reply!
    // Read the UDP header
    uint8_t header[DNS_HEADER_SIZE]; // Enough space to reuse for the DNS header
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
    36f2:	f7 01       	movw	r30, r14
    36f4:	42 81       	ldd	r20, Z+2	; 0x02
    36f6:	53 81       	ldd	r21, Z+3	; 0x03
    36f8:	64 81       	ldd	r22, Z+4	; 0x04
    36fa:	75 81       	ldd	r23, Z+5	; 0x05
    36fc:	81 8d       	ldd	r24, Z+25	; 0x19
    36fe:	92 8d       	ldd	r25, Z+26	; 0x1a
    3700:	a3 8d       	ldd	r26, Z+27	; 0x1b
    3702:	b4 8d       	ldd	r27, Z+28	; 0x1c
    3704:	48 17       	cp	r20, r24
    3706:	59 07       	cpc	r21, r25
    3708:	6a 07       	cpc	r22, r26
    370a:	7b 07       	cpc	r23, r27
    370c:	49 f4       	brne	.+18     	; 0x3720 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xae>
    370e:	85 8d       	ldd	r24, Z+29	; 0x1d
    3710:	96 8d       	ldd	r25, Z+30	; 0x1e
    3712:	c5 97       	sbiw	r24, 0x35	; 53
    3714:	29 f4       	brne	.+10     	; 0x3720 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xae>
    3716:	09 c0       	rjmp	.+18     	; 0x372a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xb8>

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    {
        if((millis() - startTime) > aTimeout)
            return TIMED_OUT;
    3718:	ee 24       	eor	r14, r14
    371a:	ea 94       	dec	r14
    371c:	fe 2c       	mov	r15, r14
    371e:	f0 c0       	rjmp	.+480    	; 0x3900 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
        (iUdp.remotePort() != DNS_PORT) )
    {
        // It's not from who we expected
        return INVALID_SERVER;
    3720:	9e ef       	ldi	r25, 0xFE	; 254
    3722:	e9 2e       	mov	r14, r25
    3724:	ff 24       	eor	r15, r15
    3726:	fa 94       	dec	r15
    3728:	eb c0       	rjmp	.+470    	; 0x3900 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    372a:	c8 01       	movw	r24, r16
    372c:	08 d4       	rcall	.+2064   	; 0x3f3e <_ZN11EthernetUDP9availableEv>
    372e:	0c 97       	sbiw	r24, 0x0c	; 12
    3730:	0c f4       	brge	.+2      	; 0x3734 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xc2>
    3732:	e2 c0       	rjmp	.+452    	; 0x38f8 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x286>
    {
        return TRUNCATED;
    }
    iUdp.read(header, DNS_HEADER_SIZE);
    3734:	4c e0       	ldi	r20, 0x0C	; 12
    3736:	50 e0       	ldi	r21, 0x00	; 0
    3738:	be 01       	movw	r22, r28
    373a:	6f 5f       	subi	r22, 0xFF	; 255
    373c:	7f 4f       	sbci	r23, 0xFF	; 255
    373e:	c8 01       	movw	r24, r16
    3740:	83 d4       	rcall	.+2310   	; 0x4048 <_ZN11EthernetUDP4readEPhj>

    uint16_t header_flags = htons(*((uint16_t*)&header[2]));
    3742:	8b 81       	ldd	r24, Y+3	; 0x03
    3744:	9c 81       	ldd	r25, Y+4	; 0x04
    3746:	98 27       	eor	r25, r24
    3748:	89 27       	eor	r24, r25
    374a:	98 27       	eor	r25, r24
    374c:	9a 8b       	std	Y+18, r25	; 0x12
    374e:	89 8b       	std	Y+17, r24	; 0x11
    // Check that it's a response to this request
    if ( ( iRequestId != (*((uint16_t*)&header[0])) ) ||
    3750:	f7 01       	movw	r30, r14
    3752:	46 81       	ldd	r20, Z+6	; 0x06
    3754:	57 81       	ldd	r21, Z+7	; 0x07
    3756:	29 81       	ldd	r18, Y+1	; 0x01
    3758:	3a 81       	ldd	r19, Y+2	; 0x02
    375a:	42 17       	cp	r20, r18
    375c:	53 07       	cpc	r21, r19
    375e:	11 f4       	brne	.+4      	; 0x3764 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xf2>
    3760:	97 fd       	sbrc	r25, 7
        ((header_flags & QUERY_RESPONSE_MASK) != (uint16_t)RESPONSE_FLAG) )
    {
        // Mark the entire packet as read
        iUdp.flush();
    3762:	07 c0       	rjmp	.+14     	; 0x3772 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x100>
    3764:	c8 01       	movw	r24, r16
    3766:	05 d4       	rcall	.+2058   	; 0x3f72 <_ZN11EthernetUDP5flushEv>
        return INVALID_RESPONSE;
    3768:	7c ef       	ldi	r23, 0xFC	; 252
    376a:	e7 2e       	mov	r14, r23
    376c:	ff 24       	eor	r15, r15
    376e:	fa 94       	dec	r15
    3770:	c7 c0       	rjmp	.+398    	; 0x3900 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    }
    // Check for any errors in the response (or in our request)
    // although we don't do anything to get round these
    if ( (header_flags & TRUNCATION_FLAG) || (header_flags & RESP_MASK) )
    3772:	8f 70       	andi	r24, 0x0F	; 15
    3774:	92 70       	andi	r25, 0x02	; 2
    3776:	89 2b       	or	r24, r25
    {
        // Mark the entire packet as read
        iUdp.flush();
    3778:	39 f0       	breq	.+14     	; 0x3788 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x116>
    377a:	c8 01       	movw	r24, r16
    377c:	fa d3       	rcall	.+2036   	; 0x3f72 <_ZN11EthernetUDP5flushEv>
        return -5; //INVALID_RESPONSE;
    377e:	6b ef       	ldi	r22, 0xFB	; 251
    3780:	e6 2e       	mov	r14, r22
    3782:	ff 24       	eor	r15, r15
    3784:	fa 94       	dec	r15
    3786:	bc c0       	rjmp	.+376    	; 0x3900 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    }

    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
    3788:	cf 80       	ldd	r12, Y+7	; 0x07
    378a:	d8 84       	ldd	r13, Y+8	; 0x08
    378c:	dc 24       	eor	r13, r12
    378e:	cd 24       	eor	r12, r13
    3790:	dc 24       	eor	r13, r12
    if (answerCount == 0 )
    3792:	c1 14       	cp	r12, r1
    3794:	d1 04       	cpc	r13, r1
    3796:	19 f0       	breq	.+6      	; 0x379e <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x12c>
    3798:	e1 2c       	mov	r14, r1
    379a:	f1 2c       	mov	r15, r1
    {
        // Mark the entire packet as read
        iUdp.flush();
    379c:	1f c0       	rjmp	.+62     	; 0x37dc <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x16a>
    379e:	c8 01       	movw	r24, r16
    37a0:	e8 d3       	rcall	.+2000   	; 0x3f72 <_ZN11EthernetUDP5flushEv>
        return -6; //INVALID_RESPONSE;
    37a2:	5a ef       	ldi	r21, 0xFA	; 250
    37a4:	e5 2e       	mov	r14, r21
    37a6:	ff 24       	eor	r15, r15
    37a8:	fa 94       	dec	r15
    37aa:	aa c0       	rjmp	.+340    	; 0x3900 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    {
        // Skip over the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    37ac:	41 e0       	ldi	r20, 0x01	; 1
    37ae:	50 e0       	ldi	r21, 0x00	; 0
    37b0:	be 01       	movw	r22, r28
    37b2:	63 5f       	subi	r22, 0xF3	; 243
    37b4:	7f 4f       	sbci	r23, 0xFF	; 255
    37b6:	c8 01       	movw	r24, r16
    37b8:	47 d4       	rcall	.+2190   	; 0x4048 <_ZN11EthernetUDP4readEPhj>
            if (len > 0)
    37ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    37bc:	81 11       	cpse	r24, r1
                while(len--)
                {
                    iUdp.read(); // we don't care about the returned byte
                }
            }
        } while (len != 0);
    37be:	17 c0       	rjmp	.+46     	; 0x37ee <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x17c>
    37c0:	8d 85       	ldd	r24, Y+13	; 0x0d

        // Now jump over the type and class
        for (int i =0; i < 4; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    37c2:	81 11       	cpse	r24, r1
    37c4:	f3 cf       	rjmp	.-26     	; 0x37ac <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x13a>
    37c6:	c8 01       	movw	r24, r16
    37c8:	17 d4       	rcall	.+2094   	; 0x3ff8 <_ZN11EthernetUDP4readEv>
    37ca:	c8 01       	movw	r24, r16
    37cc:	15 d4       	rcall	.+2090   	; 0x3ff8 <_ZN11EthernetUDP4readEv>
    37ce:	c8 01       	movw	r24, r16
    37d0:	13 d4       	rcall	.+2086   	; 0x3ff8 <_ZN11EthernetUDP4readEv>
    37d2:	c8 01       	movw	r24, r16
    37d4:	11 d4       	rcall	.+2082   	; 0x3ff8 <_ZN11EthernetUDP4readEv>
    37d6:	ff ef       	ldi	r31, 0xFF	; 255
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    37d8:	ef 1a       	sub	r14, r31
    37da:	ff 0a       	sbc	r15, r31
    37dc:	8d 81       	ldd	r24, Y+5	; 0x05
    37de:	9e 81       	ldd	r25, Y+6	; 0x06
    37e0:	98 27       	eor	r25, r24
    37e2:	89 27       	eor	r24, r25
    37e4:	98 27       	eor	r25, r24
    37e6:	e8 16       	cp	r14, r24
    37e8:	f9 06       	cpc	r15, r25
    37ea:	00 f3       	brcs	.-64     	; 0x37ac <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x13a>
    37ec:	09 c0       	rjmp	.+18     	; 0x3800 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x18e>
            iUdp.read(&len, sizeof(len));
            if (len > 0)
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
    37ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    37f0:	9f ef       	ldi	r25, 0xFF	; 255
    37f2:	98 0f       	add	r25, r24
    37f4:	9d 87       	std	Y+13, r25	; 0x0d
    37f6:	88 23       	and	r24, r24
    37f8:	19 f3       	breq	.-58     	; 0x37c0 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x14e>
                {
                    iUdp.read(); // we don't care about the returned byte
    37fa:	c8 01       	movw	r24, r16
    37fc:	fd d3       	rcall	.+2042   	; 0x3ff8 <_ZN11EthernetUDP4readEv>
            iUdp.read(&len, sizeof(len));
            if (len > 0)
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
    37fe:	f7 cf       	rjmp	.-18     	; 0x37ee <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x17c>
    3800:	a1 2c       	mov	r10, r1
    3802:	b1 2c       	mov	r11, r1
    {
        // Skip the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    3804:	41 e0       	ldi	r20, 0x01	; 1
    3806:	50 e0       	ldi	r21, 0x00	; 0
    3808:	be 01       	movw	r22, r28
    380a:	6d 5e       	subi	r22, 0xED	; 237
    380c:	7f 4f       	sbci	r23, 0xFF	; 255
    380e:	c8 01       	movw	r24, r16
    3810:	1b d4       	rcall	.+2102   	; 0x4048 <_ZN11EthernetUDP4readEPhj>
    3812:	8b 89       	ldd	r24, Y+19	; 0x13
            if ((len & LABEL_COMPRESSION_MASK) == 0)
    3814:	98 2f       	mov	r25, r24
    3816:	90 7c       	andi	r25, 0xC0	; 192
    3818:	59 f4       	brne	.+22     	; 0x3830 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1be>
            {
                // It's just a normal label
                if (len > 0)
    381a:	88 23       	and	r24, r24
    381c:	79 f0       	breq	.+30     	; 0x383c <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1ca>
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
    381e:	8b 89       	ldd	r24, Y+19	; 0x13
    3820:	9f ef       	ldi	r25, 0xFF	; 255
    3822:	98 0f       	add	r25, r24
    3824:	9b 8b       	std	Y+19, r25	; 0x13
    3826:	88 23       	and	r24, r24
    3828:	31 f0       	breq	.+12     	; 0x3836 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1c4>
                    {
                        iUdp.read(); // we don't care about the returned byte
    382a:	c8 01       	movw	r24, r16
    382c:	e5 d3       	rcall	.+1994   	; 0x3ff8 <_ZN11EthernetUDP4readEv>
                if (len > 0)
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
    382e:	f7 cf       	rjmp	.-18     	; 0x381e <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1ac>
                // says that a name is either a sequence of labels ended with a
                // 0 length octet or a pointer or a sequence of labels ending in
                // a pointer.  Either way, when we get here we're at the end of
                // the name
                // Skip over the pointer
                iUdp.read(); // we don't care about the returned byte
    3830:	c8 01       	movw	r24, r16
    3832:	e2 d3       	rcall	.+1988   	; 0x3ff8 <_ZN11EthernetUDP4readEv>
    3834:	1b 8a       	std	Y+19, r1	; 0x13
                // And set len so that we drop out of the name loop
                len = 0;
    3836:	8b 89       	ldd	r24, Y+19	; 0x13
            }
        } while (len != 0);
    3838:	81 11       	cpse	r24, r1
    383a:	e4 cf       	rjmp	.-56     	; 0x3804 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x192>

        // Check the type and class
        uint16_t answerType;
        uint16_t answerClass;
        iUdp.read((uint8_t*)&answerType, sizeof(answerType));
    383c:	42 e0       	ldi	r20, 0x02	; 2
    383e:	50 e0       	ldi	r21, 0x00	; 0
    3840:	be 01       	movw	r22, r28
    3842:	61 5f       	subi	r22, 0xF1	; 241
    3844:	7f 4f       	sbci	r23, 0xFF	; 255
        iUdp.read((uint8_t*)&answerClass, sizeof(answerClass));
    3846:	c8 01       	movw	r24, r16
    3848:	ff d3       	rcall	.+2046   	; 0x4048 <_ZN11EthernetUDP4readEPhj>
    384a:	42 e0       	ldi	r20, 0x02	; 2
    384c:	50 e0       	ldi	r21, 0x00	; 0
    384e:	be 01       	movw	r22, r28
    3850:	63 5f       	subi	r22, 0xF3	; 243
    3852:	7f 4f       	sbci	r23, 0xFF	; 255

        // Ignore the Time-To-Live as we don't do any caching
        for (int i =0; i < TTL_SIZE; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    3854:	c8 01       	movw	r24, r16
    3856:	f8 d3       	rcall	.+2032   	; 0x4048 <_ZN11EthernetUDP4readEPhj>
    3858:	c8 01       	movw	r24, r16
    385a:	ce d3       	rcall	.+1948   	; 0x3ff8 <_ZN11EthernetUDP4readEv>
    385c:	c8 01       	movw	r24, r16
    385e:	cc d3       	rcall	.+1944   	; 0x3ff8 <_ZN11EthernetUDP4readEv>
    3860:	c8 01       	movw	r24, r16
    3862:	ca d3       	rcall	.+1940   	; 0x3ff8 <_ZN11EthernetUDP4readEv>
    3864:	c8 01       	movw	r24, r16
    3866:	c8 d3       	rcall	.+1936   	; 0x3ff8 <_ZN11EthernetUDP4readEv>
    3868:	42 e0       	ldi	r20, 0x02	; 2
    386a:	50 e0       	ldi	r21, 0x00	; 0
        }

        // And read out the length of this answer
        // Don't need header_flags anymore, so we can reuse it here
        iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));
    386c:	be 01       	movw	r22, r28
    386e:	6f 5e       	subi	r22, 0xEF	; 239
    3870:	7f 4f       	sbci	r23, 0xFF	; 255
    3872:	c8 01       	movw	r24, r16
    3874:	e9 d3       	rcall	.+2002   	; 0x4048 <_ZN11EthernetUDP4readEPhj>
    3876:	8f 85       	ldd	r24, Y+15	; 0x0f
    3878:	98 89       	ldd	r25, Y+16	; 0x10
    387a:	81 15       	cp	r24, r1

        if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) )
    387c:	91 40       	sbci	r25, 0x01	; 1
    387e:	49 f4       	brne	.+18     	; 0x3892 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x220>
    3880:	ed 84       	ldd	r14, Y+13	; 0x0d
    3882:	fe 84       	ldd	r15, Y+14	; 0x0e
    3884:	fe 24       	eor	r15, r14
    3886:	ef 24       	eor	r14, r15
    3888:	fe 24       	eor	r15, r14
    388a:	81 e0       	ldi	r24, 0x01	; 1
    388c:	e8 16       	cp	r14, r24
    388e:	f1 04       	cpc	r15, r1
    3890:	19 f0       	breq	.+6      	; 0x3898 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x226>
    3892:	e1 2c       	mov	r14, r1
    3894:	f1 2c       	mov	r15, r1
    3896:	14 c0       	rjmp	.+40     	; 0x38c0 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x24e>
    3898:	89 89       	ldd	r24, Y+17	; 0x11
        {
            if (htons(header_flags) != 4)
    389a:	9a 89       	ldd	r25, Y+18	; 0x12
    389c:	81 15       	cp	r24, r1
    389e:	94 40       	sbci	r25, 0x04	; 4
    38a0:	39 f0       	breq	.+14     	; 0x38b0 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x23e>
    38a2:	c8 01       	movw	r24, r16
            {
                // It's a weird size
                // Mark the entire packet as read
                iUdp.flush();
    38a4:	66 d3       	rcall	.+1740   	; 0x3f72 <_ZN11EthernetUDP5flushEv>
    38a6:	47 ef       	ldi	r20, 0xF7	; 247
                return -9;//INVALID_RESPONSE;
    38a8:	e4 2e       	mov	r14, r20
    38aa:	ff 24       	eor	r15, r15
    38ac:	fa 94       	dec	r15
    38ae:	28 c0       	rjmp	.+80     	; 0x3900 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    38b0:	b1 01       	movw	r22, r2

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    38b2:	6e 5f       	subi	r22, 0xFE	; 254
    38b4:	7f 4f       	sbci	r23, 0xFF	; 255
    38b6:	44 e0       	ldi	r20, 0x04	; 4
            }
            iUdp.read(aAddress.raw_address(), 4);
    38b8:	50 e0       	ldi	r21, 0x00	; 0
    38ba:	c8 01       	movw	r24, r16
    38bc:	c5 d3       	rcall	.+1930   	; 0x4048 <_ZN11EthernetUDP4readEPhj>
    38be:	20 c0       	rjmp	.+64     	; 0x3900 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
            return SUCCESS;
    38c0:	89 89       	ldd	r24, Y+17	; 0x11
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    38c2:	9a 89       	ldd	r25, Y+18	; 0x12
    38c4:	98 27       	eor	r25, r24
    38c6:	89 27       	eor	r24, r25
    38c8:	98 27       	eor	r25, r24
    38ca:	e8 16       	cp	r14, r24
    38cc:	f9 06       	cpc	r15, r25
    38ce:	30 f4       	brcc	.+12     	; 0x38dc <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x26a>
    38d0:	c8 01       	movw	r24, r16
            {
                iUdp.read(); // we don't care about the returned byte
    38d2:	92 d3       	rcall	.+1828   	; 0x3ff8 <_ZN11EthernetUDP4readEv>
    38d4:	ff ef       	ldi	r31, 0xFF	; 255
    38d6:	ef 1a       	sub	r14, r31
            return SUCCESS;
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    38d8:	ff 0a       	sbc	r15, r31
    38da:	f2 cf       	rjmp	.-28     	; 0x38c0 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x24e>
    38dc:	2f ef       	ldi	r18, 0xFF	; 255
    38de:	a2 1a       	sub	r10, r18
    // Now we're up to the bit we're interested in, the answer
    // There might be more than one answer (although we'll just use the first
    // type A answer) and some authority and additional resource records but
    // we're going to ignore all of them.

    for (uint16_t i =0; i < answerCount; i++)
    38e0:	b2 0a       	sbc	r11, r18
    38e2:	ca 14       	cp	r12, r10
    38e4:	db 04       	cpc	r13, r11
    38e6:	09 f0       	breq	.+2      	; 0x38ea <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x278>
    38e8:	8d cf       	rjmp	.-230    	; 0x3804 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x192>
    38ea:	c8 01       	movw	r24, r16
    38ec:	42 d3       	rcall	.+1668   	; 0x3f72 <_ZN11EthernetUDP5flushEv>
            }
        }
    }

    // Mark the entire packet as read
    iUdp.flush();
    38ee:	36 ef       	ldi	r19, 0xF6	; 246
    38f0:	e3 2e       	mov	r14, r19
    38f2:	ff 24       	eor	r15, r15

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
    38f4:	fa 94       	dec	r15
    38f6:	04 c0       	rjmp	.+8      	; 0x3900 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    38f8:	8d ef       	ldi	r24, 0xFD	; 253
    38fa:	e8 2e       	mov	r14, r24
    38fc:	ff 24       	eor	r15, r15
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    {
        return TRUNCATED;
    38fe:	fa 94       	dec	r15
    3900:	c7 01       	movw	r24, r14
    3902:	63 96       	adiw	r28, 0x13	; 19
    3904:	0f b6       	in	r0, 0x3f	; 63
    // Mark the entire packet as read
    iUdp.flush();

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
}
    3906:	f8 94       	cli
    3908:	de bf       	out	0x3e, r29	; 62
    390a:	0f be       	out	0x3f, r0	; 63
    390c:	cd bf       	out	0x3d, r28	; 61
    390e:	df 91       	pop	r29
    3910:	cf 91       	pop	r28
    3912:	1f 91       	pop	r17
    3914:	0f 91       	pop	r16
    3916:	ff 90       	pop	r15
    3918:	ef 90       	pop	r14
    391a:	df 90       	pop	r13
    391c:	cf 90       	pop	r12
    391e:	bf 90       	pop	r11
    3920:	af 90       	pop	r10
    3922:	9f 90       	pop	r9
    3924:	8f 90       	pop	r8
    3926:	7f 90       	pop	r7
    3928:	6f 90       	pop	r6
    392a:	5f 90       	pop	r5
    392c:	4f 90       	pop	r4
    392e:	3f 90       	pop	r3
    3930:	2f 90       	pop	r2
    3932:	08 95       	ret

00003934 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>:
    3934:	8f 92       	push	r8
    3936:	9f 92       	push	r9
    3938:	af 92       	push	r10
        return 0;
    }
}

int DNSClient::getHostByName(const char* aHostname, IPAddress& aResult)
{
    393a:	bf 92       	push	r11
    393c:	cf 92       	push	r12
    393e:	df 92       	push	r13
    3940:	ef 92       	push	r14
    3942:	ff 92       	push	r15
    3944:	0f 93       	push	r16
    3946:	1f 93       	push	r17
    3948:	cf 93       	push	r28
    394a:	df 93       	push	r29
    394c:	00 d0       	rcall	.+0      	; 0x394e <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x1a>
    394e:	00 d0       	rcall	.+0      	; 0x3950 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x1c>
    3950:	00 d0       	rcall	.+0      	; 0x3952 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x1e>
    3952:	cd b7       	in	r28, 0x3d	; 61
    3954:	de b7       	in	r29, 0x3e	; 62
    3956:	7c 01       	movw	r14, r24
    3958:	4b 01       	movw	r8, r22
    395a:	5a 01       	movw	r10, r20
    int ret =0;

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
    395c:	9e dd       	rcall	.-1220   	; 0x349a <_ZN9DNSClient9inet_atonEPKcR9IPAddress>
    395e:	8c 01       	movw	r16, r24
    3960:	89 2b       	or	r24, r25
    3962:	09 f0       	breq	.+2      	; 0x3966 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x32>
    3964:	57 c0       	rjmp	.+174    	; 0x3a14 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xe0>
        // It is, our work here is done
        return 1;
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    3966:	f7 01       	movw	r30, r14
    3968:	42 81       	ldd	r20, Z+2	; 0x02
    396a:	53 81       	ldd	r21, Z+3	; 0x03
    396c:	64 81       	ldd	r22, Z+4	; 0x04
    396e:	75 81       	ldd	r23, Z+5	; 0x05
    3970:	80 91 75 09 	lds	r24, 0x0975	; 0x800975 <_ZL11INADDR_NONE+0x2>
    3974:	90 91 76 09 	lds	r25, 0x0976	; 0x800976 <_ZL11INADDR_NONE+0x3>
    3978:	a0 91 77 09 	lds	r26, 0x0977	; 0x800977 <_ZL11INADDR_NONE+0x4>
    397c:	b0 91 78 09 	lds	r27, 0x0978	; 0x800978 <_ZL11INADDR_NONE+0x5>
    3980:	48 17       	cp	r20, r24
    3982:	59 07       	cpc	r21, r25
    3984:	6a 07       	cpc	r22, r26
    3986:	7b 07       	cpc	r23, r27
    3988:	09 f4       	brne	.+2      	; 0x398c <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x58>
    398a:	47 c0       	rjmp	.+142    	; 0x3a1a <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xe6>
    {
        return INVALID_SERVER;
    }
	
    // Find a socket to use
    if (iUdp.begin(1024+(millis() & 0xF)) == 1)
    398c:	0e 94 22 2f 	call	0x5e44	; 0x5e44 <millis>
    3990:	67 01       	movw	r12, r14
    3992:	f8 e0       	ldi	r31, 0x08	; 8
    3994:	cf 0e       	add	r12, r31
    3996:	d1 1c       	adc	r13, r1
    3998:	6f 70       	andi	r22, 0x0F	; 15
    399a:	77 27       	eor	r23, r23
    399c:	7c 5f       	subi	r23, 0xFC	; 252
    399e:	c6 01       	movw	r24, r12
    39a0:	89 d3       	rcall	.+1810   	; 0x40b4 <_ZN11EthernetUDP5beginEj>
    39a2:	81 30       	cpi	r24, 0x01	; 1
    39a4:	09 f0       	breq	.+2      	; 0x39a8 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x74>
    39a6:	3b c0       	rjmp	.+118    	; 0x3a1e <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xea>
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    39a8:	8d ef       	ldi	r24, 0xFD	; 253
    39aa:	97 e0       	ldi	r25, 0x07	; 7
    39ac:	9a 83       	std	Y+2, r25	; 0x02
    39ae:	89 83       	std	Y+1, r24	; 0x01
    39b0:	f7 01       	movw	r30, r14
    39b2:	82 81       	ldd	r24, Z+2	; 0x02
    39b4:	93 81       	ldd	r25, Z+3	; 0x03
    39b6:	a4 81       	ldd	r26, Z+4	; 0x04
    39b8:	b5 81       	ldd	r27, Z+5	; 0x05
    39ba:	8b 83       	std	Y+3, r24	; 0x03
    39bc:	9c 83       	std	Y+4, r25	; 0x04
    39be:	ad 83       	std	Y+5, r26	; 0x05
    39c0:	be 83       	std	Y+6, r27	; 0x06
        // Try up to three times
        int retries = 0;
//        while ((retries < 3) && (ret <= 0))
        {
            // Send DNS request
            ret = iUdp.beginPacket(iDNSServer, DNS_PORT);
    39c2:	45 e3       	ldi	r20, 0x35	; 53
    39c4:	50 e0       	ldi	r21, 0x00	; 0
    39c6:	be 01       	movw	r22, r28
    39c8:	6f 5f       	subi	r22, 0xFF	; 255
    39ca:	7f 4f       	sbci	r23, 0xFF	; 255
    39cc:	c6 01       	movw	r24, r12
    39ce:	f7 d2       	rcall	.+1518   	; 0x3fbe <_ZN11EthernetUDP11beginPacketE9IPAddressj>
            if (ret != 0)
    39d0:	89 2b       	or	r24, r25
    39d2:	19 f4       	brne	.+6      	; 0x39da <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xa6>
    39d4:	00 e0       	ldi	r16, 0x00	; 0
    39d6:	10 e0       	ldi	r17, 0x00	; 0
            {
                // Now output the request data
                ret = BuildRequest(aHostname);
    39d8:	1a c0       	rjmp	.+52     	; 0x3a0e <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xda>
    39da:	b4 01       	movw	r22, r8
    39dc:	c7 01       	movw	r24, r14
                if (ret != 0)
    39de:	a8 dd       	rcall	.-1200   	; 0x3530 <_ZN9DNSClient12BuildRequestEPKc>
    39e0:	89 2b       	or	r24, r25
                {
                    // And finally send the request
                    ret = iUdp.endPacket();
    39e2:	c1 f3       	breq	.-16     	; 0x39d4 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xa0>
    39e4:	c6 01       	movw	r24, r12
    39e6:	f2 d2       	rcall	.+1508   	; 0x3fcc <_ZN11EthernetUDP9endPacketEv>
                    if (ret != 0)
    39e8:	89 2b       	or	r24, r25
    39ea:	a1 f3       	breq	.-24     	; 0x39d4 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xa0>
    39ec:	83 e0       	ldi	r24, 0x03	; 3
    39ee:	88 2e       	mov	r8, r24
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
                        {
                            ret = ProcessResponse(5000, aResult);
    39f0:	91 2c       	mov	r9, r1
    39f2:	a5 01       	movw	r20, r10
    39f4:	68 e8       	ldi	r22, 0x88	; 136
    39f6:	73 e1       	ldi	r23, 0x13	; 19
    39f8:	c7 01       	movw	r24, r14
    39fa:	3b de       	rcall	.-906    	; 0x3672 <_ZN9DNSClient15ProcessResponseEjR9IPAddress>
    39fc:	8c 01       	movw	r16, r24
    39fe:	21 e0       	ldi	r18, 0x01	; 1
    3a00:	82 1a       	sub	r8, r18
    3a02:	91 08       	sbc	r9, r1
                    if (ret != 0)
                    {
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
    3a04:	21 f0       	breq	.+8      	; 0x3a0e <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xda>
    3a06:	0f 3f       	cpi	r16, 0xFF	; 255
    3a08:	ff ef       	ldi	r31, 0xFF	; 255
    3a0a:	1f 07       	cpc	r17, r31
            }
            retries++;
        }

        // We're done with the socket now
        iUdp.stop();
    3a0c:	91 f3       	breq	.-28     	; 0x39f2 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xbe>
    3a0e:	c6 01       	movw	r24, r12
    3a10:	c2 d2       	rcall	.+1412   	; 0x3f96 <_ZN11EthernetUDP4stopEv>
    3a12:	05 c0       	rjmp	.+10     	; 0x3a1e <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xea>

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
    {
        // It is, our work here is done
        return 1;
    3a14:	01 e0       	ldi	r16, 0x01	; 1
    3a16:	10 e0       	ldi	r17, 0x00	; 0
    3a18:	02 c0       	rjmp	.+4      	; 0x3a1e <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xea>
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    {
        return INVALID_SERVER;
    3a1a:	0e ef       	ldi	r16, 0xFE	; 254
    3a1c:	1f ef       	ldi	r17, 0xFF	; 255
        // We're done with the socket now
        iUdp.stop();
    }

    return ret;
}
    3a1e:	c8 01       	movw	r24, r16
    3a20:	26 96       	adiw	r28, 0x06	; 6
    3a22:	0f b6       	in	r0, 0x3f	; 63
    3a24:	f8 94       	cli
    3a26:	de bf       	out	0x3e, r29	; 62
    3a28:	0f be       	out	0x3f, r0	; 63
    3a2a:	cd bf       	out	0x3d, r28	; 61
    3a2c:	df 91       	pop	r29
    3a2e:	cf 91       	pop	r28
    3a30:	1f 91       	pop	r17
    3a32:	0f 91       	pop	r16
    3a34:	ff 90       	pop	r15
    3a36:	ef 90       	pop	r14
    3a38:	df 90       	pop	r13
    3a3a:	cf 90       	pop	r12
    3a3c:	bf 90       	pop	r11
    3a3e:	af 90       	pop	r10
    3a40:	9f 90       	pop	r9
    3a42:	8f 90       	pop	r8
    3a44:	08 95       	ret

00003a46 <_ZN10W5500Class8writeGAREPh>:
    return _dnsDomainName;
}

char* EthernetClass::hostName(){
    return _hostName;
}
    3a46:	24 e0       	ldi	r18, 0x04	; 4
    3a48:	30 e0       	ldi	r19, 0x00	; 0
    3a4a:	ac 01       	movw	r20, r24
    3a4c:	64 e0       	ldi	r22, 0x04	; 4
    3a4e:	81 e0       	ldi	r24, 0x01	; 1
    3a50:	90 e0       	ldi	r25, 0x00	; 0
    3a52:	35 c6       	rjmp	.+3178   	; 0x46be <_ZN10W5500Class5writeEjhPKhj>

00003a54 <_ZN10W5500Class9writeSUBREPh>:
    3a54:	24 e0       	ldi	r18, 0x04	; 4
    3a56:	30 e0       	ldi	r19, 0x00	; 0
    3a58:	ac 01       	movw	r20, r24
    3a5a:	64 e0       	ldi	r22, 0x04	; 4
    3a5c:	85 e0       	ldi	r24, 0x05	; 5
    3a5e:	90 e0       	ldi	r25, 0x00	; 0
    3a60:	2e c6       	rjmp	.+3164   	; 0x46be <_ZN10W5500Class5writeEjhPKhj>

00003a62 <_ZN10W5500Class9writeSHAREPh>:
    3a62:	26 e0       	ldi	r18, 0x06	; 6
    3a64:	30 e0       	ldi	r19, 0x00	; 0
    3a66:	ac 01       	movw	r20, r24
    3a68:	64 e0       	ldi	r22, 0x04	; 4
    3a6a:	89 e0       	ldi	r24, 0x09	; 9
    3a6c:	90 e0       	ldi	r25, 0x00	; 0
    3a6e:	27 c6       	rjmp	.+3150   	; 0x46be <_ZN10W5500Class5writeEjhPKhj>

00003a70 <_ZN10W5500Class9writeSIPREPh>:
    3a70:	24 e0       	ldi	r18, 0x04	; 4
    3a72:	30 e0       	ldi	r19, 0x00	; 0
    3a74:	ac 01       	movw	r20, r24
    3a76:	64 e0       	ldi	r22, 0x04	; 4
    3a78:	8f e0       	ldi	r24, 0x0F	; 15
    3a7a:	90 e0       	ldi	r25, 0x00	; 0
    3a7c:	20 c6       	rjmp	.+3136   	; 0x46be <_ZN10W5500Class5writeEjhPKhj>

00003a7e <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_>:
    3a7e:	8f 92       	push	r8
    3a80:	9f 92       	push	r9
    3a82:	af 92       	push	r10
    3a84:	bf 92       	push	r11
    3a86:	cf 92       	push	r12
    3a88:	df 92       	push	r13
    3a8a:	ef 92       	push	r14
    3a8c:	ff 92       	push	r15
    3a8e:	0f 93       	push	r16
    3a90:	1f 93       	push	r17
    3a92:	cf 93       	push	r28
    3a94:	df 93       	push	r29
    3a96:	4c 01       	movw	r8, r24
    3a98:	5b 01       	movw	r10, r22
    3a9a:	6a 01       	movw	r12, r20
    3a9c:	e9 01       	movw	r28, r18
    3a9e:	fc 01       	movw	r30, r24
    3aa0:	64 85       	ldd	r22, Z+12	; 0x0c
    3aa2:	83 eb       	ldi	r24, 0xB3	; 179
    3aa4:	99 e0       	ldi	r25, 0x09	; 9
    3aa6:	53 d6       	rcall	.+3238   	; 0x474e <_ZN10W5500Class4initEh>
    3aa8:	c5 01       	movw	r24, r10
    3aaa:	db df       	rcall	.-74     	; 0x3a62 <_ZN10W5500Class9writeSHAREPh>
    3aac:	c6 01       	movw	r24, r12
    3aae:	02 96       	adiw	r24, 0x02	; 2
    3ab0:	df df       	rcall	.-66     	; 0x3a70 <_ZN10W5500Class9writeSIPREPh>
    3ab2:	c8 01       	movw	r24, r16
    3ab4:	02 96       	adiw	r24, 0x02	; 2
    3ab6:	c7 df       	rcall	.-114    	; 0x3a46 <_ZN10W5500Class8writeGAREPh>
    3ab8:	c7 01       	movw	r24, r14
    3aba:	02 96       	adiw	r24, 0x02	; 2
    3abc:	cb df       	rcall	.-106    	; 0x3a54 <_ZN10W5500Class9writeSUBREPh>
    3abe:	8a 81       	ldd	r24, Y+2	; 0x02
    3ac0:	9b 81       	ldd	r25, Y+3	; 0x03
    3ac2:	ac 81       	ldd	r26, Y+4	; 0x04
    3ac4:	bd 81       	ldd	r27, Y+5	; 0x05
    3ac6:	f4 01       	movw	r30, r8
    3ac8:	82 83       	std	Z+2, r24	; 0x02
    3aca:	93 83       	std	Z+3, r25	; 0x03
    3acc:	a4 83       	std	Z+4, r26	; 0x04
    3ace:	b5 83       	std	Z+5, r27	; 0x05
    3ad0:	df 91       	pop	r29
    3ad2:	cf 91       	pop	r28
    3ad4:	1f 91       	pop	r17
    3ad6:	0f 91       	pop	r16
    3ad8:	ff 90       	pop	r15
    3ada:	ef 90       	pop	r14
    3adc:	df 90       	pop	r13
    3ade:	cf 90       	pop	r12
    3ae0:	bf 90       	pop	r11
    3ae2:	af 90       	pop	r10
    3ae4:	9f 90       	pop	r9
    3ae6:	8f 90       	pop	r8
    3ae8:	08 95       	ret

00003aea <_ZN13EthernetClass11dnsServerIPEv>:
    3aea:	2d ef       	ldi	r18, 0xFD	; 253
    3aec:	37 e0       	ldi	r19, 0x07	; 7
    3aee:	fc 01       	movw	r30, r24
    3af0:	31 83       	std	Z+1, r19	; 0x01
    3af2:	20 83       	st	Z, r18
    3af4:	fb 01       	movw	r30, r22
    3af6:	42 81       	ldd	r20, Z+2	; 0x02
    3af8:	53 81       	ldd	r21, Z+3	; 0x03
    3afa:	64 81       	ldd	r22, Z+4	; 0x04
    3afc:	75 81       	ldd	r23, Z+5	; 0x05
    3afe:	fc 01       	movw	r30, r24
    3b00:	42 83       	std	Z+2, r20	; 0x02
    3b02:	53 83       	std	Z+3, r21	; 0x03
    3b04:	64 83       	std	Z+4, r22	; 0x04
    3b06:	75 83       	std	Z+5, r23	; 0x05
    3b08:	08 95       	ret

00003b0a <_GLOBAL__sub_I__ZN13EthernetClass6_stateE>:

EthernetClass Ethernet;
    3b0a:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    3b0c:	00 e0       	ldi	r16, 0x00	; 0
    3b0e:	20 e0       	ldi	r18, 0x00	; 0
    3b10:	40 e0       	ldi	r20, 0x00	; 0
    3b12:	60 e0       	ldi	r22, 0x00	; 0
    3b14:	86 e9       	ldi	r24, 0x96	; 150
    3b16:	99 e0       	ldi	r25, 0x09	; 9
    3b18:	0e 94 a1 2d 	call	0x5b42	; 0x5b42 <_ZN9IPAddressC1Ehhhh>
  uint8_t w5500_cspin;

  static uint8_t _state[MAX_SOCK_NUM];
  static uint16_t _server_port[MAX_SOCK_NUM];

  EthernetClass() { _dhcp = NULL; w5500_cspin = 10; }
    3b1c:	89 e7       	ldi	r24, 0x79	; 121
    3b1e:	99 e0       	ldi	r25, 0x09	; 9
    3b20:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN9IPAddressC1Ev>
    3b24:	e9 e7       	ldi	r30, 0x79	; 121
    3b26:	f9 e0       	ldi	r31, 0x09	; 9
    3b28:	13 86       	std	Z+11, r1	; 0x0b
    3b2a:	12 86       	std	Z+10, r1	; 0x0a
    3b2c:	8a e0       	ldi	r24, 0x0A	; 10
    3b2e:	84 87       	std	Z+12, r24	; 0x0c
    3b30:	0f 91       	pop	r16
    3b32:	08 95       	ret

00003b34 <_ZN14EthernetClientneERKS_>:
uint16_t EthernetClient::_srcport = 1024;

EthernetClient::EthernetClient() : _sock(MAX_SOCK_NUM) {
}

EthernetClient::EthernetClient(uint8_t sock) : _sock(sock) {
    3b34:	dc 01       	movw	r26, r24
    3b36:	ed 91       	ld	r30, X+
    3b38:	fc 91       	ld	r31, X
    3b3a:	02 8c       	ldd	r0, Z+26	; 0x1a
    3b3c:	f3 8d       	ldd	r31, Z+27	; 0x1b
    3b3e:	e0 2d       	mov	r30, r0
    3b40:	09 95       	icall
    3b42:	91 e0       	ldi	r25, 0x01	; 1
    3b44:	89 27       	eor	r24, r25
    3b46:	08 95       	ret

00003b48 <_ZN14EthernetClient5writeEh>:
    3b48:	cf 93       	push	r28
    3b4a:	df 93       	push	r29
    3b4c:	1f 92       	push	r1
    3b4e:	cd b7       	in	r28, 0x3d	; 61
    3b50:	de b7       	in	r29, 0x3e	; 62
    3b52:	69 83       	std	Y+1, r22	; 0x01
    3b54:	dc 01       	movw	r26, r24
    3b56:	ed 91       	ld	r30, X+
    3b58:	fc 91       	ld	r31, X
    3b5a:	02 80       	ldd	r0, Z+2	; 0x02
    3b5c:	f3 81       	ldd	r31, Z+3	; 0x03
    3b5e:	e0 2d       	mov	r30, r0
    3b60:	41 e0       	ldi	r20, 0x01	; 1
    3b62:	50 e0       	ldi	r21, 0x00	; 0
    3b64:	be 01       	movw	r22, r28
    3b66:	6f 5f       	subi	r22, 0xFF	; 255
    3b68:	7f 4f       	sbci	r23, 0xFF	; 255
    3b6a:	09 95       	icall
    3b6c:	0f 90       	pop	r0
    3b6e:	df 91       	pop	r29
    3b70:	cf 91       	pop	r28
    3b72:	08 95       	ret

00003b74 <_ZN14EthernetClientcvbEv>:
    3b74:	21 e0       	ldi	r18, 0x01	; 1
    3b76:	fc 01       	movw	r30, r24
    3b78:	84 85       	ldd	r24, Z+12	; 0x0c
    3b7a:	88 30       	cpi	r24, 0x08	; 8
    3b7c:	09 f4       	brne	.+2      	; 0x3b80 <_ZN14EthernetClientcvbEv+0xc>
    3b7e:	20 e0       	ldi	r18, 0x00	; 0
    3b80:	82 2f       	mov	r24, r18
    3b82:	08 95       	ret

00003b84 <_ZN14EthernetClienteqERKS_>:
    3b84:	fc 01       	movw	r30, r24
    3b86:	94 85       	ldd	r25, Z+12	; 0x0c
    3b88:	fb 01       	movw	r30, r22
    3b8a:	84 85       	ldd	r24, Z+12	; 0x0c
    3b8c:	98 13       	cpse	r25, r24
    3b8e:	03 c0       	rjmp	.+6      	; 0x3b96 <_ZN14EthernetClienteqERKS_+0x12>
    3b90:	81 e0       	ldi	r24, 0x01	; 1
    3b92:	98 30       	cpi	r25, 0x08	; 8
    3b94:	09 f4       	brne	.+2      	; 0x3b98 <_ZN14EthernetClienteqERKS_+0x14>
    3b96:	80 e0       	ldi	r24, 0x00	; 0
    3b98:	08 95       	ret

00003b9a <_ZN14EthernetClient7connectEPKcj>:
    3b9a:	cf 92       	push	r12
    3b9c:	df 92       	push	r13
    3b9e:	ef 92       	push	r14
    3ba0:	ff 92       	push	r15
    3ba2:	0f 93       	push	r16
    3ba4:	1f 93       	push	r17
    3ba6:	cf 93       	push	r28
    3ba8:	df 93       	push	r29
    3baa:	cd b7       	in	r28, 0x3d	; 61
    3bac:	de b7       	in	r29, 0x3e	; 62
    3bae:	af 97       	sbiw	r28, 0x2f	; 47
    3bb0:	0f b6       	in	r0, 0x3f	; 63
    3bb2:	f8 94       	cli
    3bb4:	de bf       	out	0x3e, r29	; 62
    3bb6:	0f be       	out	0x3f, r0	; 63
    3bb8:	cd bf       	out	0x3d, r28	; 61
    3bba:	8c 01       	movw	r16, r24
    3bbc:	6b 01       	movw	r12, r22
    3bbe:	7a 01       	movw	r14, r20
    3bc0:	ce 01       	movw	r24, r28
    3bc2:	01 96       	adiw	r24, 0x01	; 1
    3bc4:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN9IPAddressC1Ev>
    3bc8:	ce 01       	movw	r24, r28
    3bca:	09 96       	adiw	r24, 0x09	; 9
    3bcc:	f3 d2       	rcall	.+1510   	; 0x41b4 <_ZN11EthernetUDPC1Ev>
    3bce:	ce 01       	movw	r24, r28
    3bd0:	8a 96       	adiw	r24, 0x2a	; 42
    3bd2:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN9IPAddressC1Ev>
    3bd6:	69 e7       	ldi	r22, 0x79	; 121
    3bd8:	79 e0       	ldi	r23, 0x09	; 9
    3bda:	ce 01       	movw	r24, r28
    3bdc:	84 96       	adiw	r24, 0x24	; 36
    3bde:	85 df       	rcall	.-246    	; 0x3aea <_ZN13EthernetClass11dnsServerIPEv>
    3be0:	be 01       	movw	r22, r28
    3be2:	6c 5d       	subi	r22, 0xDC	; 220
    3be4:	7f 4f       	sbci	r23, 0xFF	; 255
    3be6:	ce 01       	movw	r24, r28
    3be8:	01 96       	adiw	r24, 0x01	; 1
    3bea:	4a dc       	rcall	.-1900   	; 0x3480 <_ZN9DNSClient5beginERK9IPAddress>
    3bec:	ae 01       	movw	r20, r28
    3bee:	46 5d       	subi	r20, 0xD6	; 214
    3bf0:	5f 4f       	sbci	r21, 0xFF	; 255
    3bf2:	b6 01       	movw	r22, r12
    3bf4:	ce 01       	movw	r24, r28
    3bf6:	01 96       	adiw	r24, 0x01	; 1
    3bf8:	9d de       	rcall	.-710    	; 0x3934 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>
    3bfa:	81 30       	cpi	r24, 0x01	; 1
    3bfc:	91 05       	cpc	r25, r1
    3bfe:	c1 f4       	brne	.+48     	; 0x3c30 <_ZN14EthernetClient7connectEPKcj+0x96>
    3c00:	d8 01       	movw	r26, r16
    3c02:	ed 91       	ld	r30, X+
    3c04:	fc 91       	ld	r31, X
    3c06:	06 84       	ldd	r0, Z+14	; 0x0e
    3c08:	f7 85       	ldd	r31, Z+15	; 0x0f
    3c0a:	e0 2d       	mov	r30, r0
    3c0c:	8d ef       	ldi	r24, 0xFD	; 253
    3c0e:	97 e0       	ldi	r25, 0x07	; 7
    3c10:	9d a3       	std	Y+37, r25	; 0x25
    3c12:	8c a3       	std	Y+36, r24	; 0x24
    3c14:	8c a5       	ldd	r24, Y+44	; 0x2c
    3c16:	9d a5       	ldd	r25, Y+45	; 0x2d
    3c18:	ae a5       	ldd	r26, Y+46	; 0x2e
    3c1a:	bf a5       	ldd	r27, Y+47	; 0x2f
    3c1c:	8e a3       	std	Y+38, r24	; 0x26
    3c1e:	9f a3       	std	Y+39, r25	; 0x27
    3c20:	a8 a7       	std	Y+40, r26	; 0x28
    3c22:	b9 a7       	std	Y+41, r27	; 0x29
    3c24:	a7 01       	movw	r20, r14
    3c26:	be 01       	movw	r22, r28
    3c28:	6c 5d       	subi	r22, 0xDC	; 220
    3c2a:	7f 4f       	sbci	r23, 0xFF	; 255
    3c2c:	c8 01       	movw	r24, r16
    3c2e:	09 95       	icall
    3c30:	af 96       	adiw	r28, 0x2f	; 47
    3c32:	0f b6       	in	r0, 0x3f	; 63
    3c34:	f8 94       	cli
    3c36:	de bf       	out	0x3e, r29	; 62
    3c38:	0f be       	out	0x3f, r0	; 63
    3c3a:	cd bf       	out	0x3d, r28	; 61
    3c3c:	df 91       	pop	r29
    3c3e:	cf 91       	pop	r28
    3c40:	1f 91       	pop	r17
    3c42:	0f 91       	pop	r16
    3c44:	ff 90       	pop	r15
    3c46:	ef 90       	pop	r14
    3c48:	df 90       	pop	r13
    3c4a:	cf 90       	pop	r12
    3c4c:	08 95       	ret

00003c4e <_ZN14EthernetClient5writeEPKhj>:
    3c4e:	0f 93       	push	r16
    3c50:	1f 93       	push	r17
    3c52:	cf 93       	push	r28
    3c54:	df 93       	push	r29
    3c56:	8c 01       	movw	r16, r24
    3c58:	d4 2f       	mov	r29, r20
    3c5a:	c5 2f       	mov	r28, r21
    3c5c:	fc 01       	movw	r30, r24
    3c5e:	84 85       	ldd	r24, Z+12	; 0x0c
    3c60:	88 30       	cpi	r24, 0x08	; 8
    3c62:	41 f4       	brne	.+16     	; 0x3c74 <_ZN14EthernetClient5writeEPKhj+0x26>
    3c64:	81 e0       	ldi	r24, 0x01	; 1
    3c66:	90 e0       	ldi	r25, 0x00	; 0
    3c68:	f8 01       	movw	r30, r16
    3c6a:	93 83       	std	Z+3, r25	; 0x03
    3c6c:	82 83       	std	Z+2, r24	; 0x02
    3c6e:	80 e0       	ldi	r24, 0x00	; 0
    3c70:	90 e0       	ldi	r25, 0x00	; 0
    3c72:	05 c0       	rjmp	.+10     	; 0x3c7e <_ZN14EthernetClient5writeEPKhj+0x30>
    3c74:	cf d3       	rcall	.+1950   	; 0x4414 <_Z4sendhPKhj>
    3c76:	89 2b       	or	r24, r25
    3c78:	a9 f3       	breq	.-22     	; 0x3c64 <_ZN14EthernetClient5writeEPKhj+0x16>
    3c7a:	8d 2f       	mov	r24, r29
    3c7c:	9c 2f       	mov	r25, r28
    3c7e:	df 91       	pop	r29
    3c80:	cf 91       	pop	r28
    3c82:	1f 91       	pop	r17
    3c84:	0f 91       	pop	r16
    3c86:	08 95       	ret

00003c88 <_ZN14EthernetClient9availableEv>:
    3c88:	fc 01       	movw	r30, r24
    3c8a:	64 85       	ldd	r22, Z+12	; 0x0c
    3c8c:	68 30       	cpi	r22, 0x08	; 8
    3c8e:	19 f0       	breq	.+6      	; 0x3c96 <_ZN14EthernetClient9availableEv+0xe>
    3c90:	83 eb       	ldi	r24, 0xB3	; 179
    3c92:	99 e0       	ldi	r25, 0x09	; 9
    3c94:	d0 c5       	rjmp	.+2976   	; 0x4836 <_ZN10W5500Class17getRXReceivedSizeEh>
    3c96:	80 e0       	ldi	r24, 0x00	; 0
    3c98:	90 e0       	ldi	r25, 0x00	; 0
    3c9a:	08 95       	ret

00003c9c <_ZN14EthernetClient4readEv>:
    3c9c:	cf 93       	push	r28
    3c9e:	df 93       	push	r29
    3ca0:	1f 92       	push	r1
    3ca2:	cd b7       	in	r28, 0x3d	; 61
    3ca4:	de b7       	in	r29, 0x3e	; 62
    3ca6:	41 e0       	ldi	r20, 0x01	; 1
    3ca8:	50 e0       	ldi	r21, 0x00	; 0
    3caa:	be 01       	movw	r22, r28
    3cac:	6f 5f       	subi	r22, 0xFF	; 255
    3cae:	7f 4f       	sbci	r23, 0xFF	; 255
    3cb0:	fc 01       	movw	r30, r24
    3cb2:	84 85       	ldd	r24, Z+12	; 0x0c
    3cb4:	f7 d3       	rcall	.+2030   	; 0x44a4 <_Z4recvhPhi>
    3cb6:	18 16       	cp	r1, r24
    3cb8:	19 06       	cpc	r1, r25
    3cba:	1c f4       	brge	.+6      	; 0x3cc2 <_ZN14EthernetClient4readEv+0x26>
    3cbc:	89 81       	ldd	r24, Y+1	; 0x01
    3cbe:	90 e0       	ldi	r25, 0x00	; 0
    3cc0:	02 c0       	rjmp	.+4      	; 0x3cc6 <_ZN14EthernetClient4readEv+0x2a>
    3cc2:	8f ef       	ldi	r24, 0xFF	; 255
    3cc4:	9f ef       	ldi	r25, 0xFF	; 255
    3cc6:	0f 90       	pop	r0
    3cc8:	df 91       	pop	r29
    3cca:	cf 91       	pop	r28
    3ccc:	08 95       	ret

00003cce <_ZN14EthernetClient4readEPhj>:
    3cce:	fc 01       	movw	r30, r24
    3cd0:	84 85       	ldd	r24, Z+12	; 0x0c
    3cd2:	e8 c3       	rjmp	.+2000   	; 0x44a4 <_Z4recvhPhi>

00003cd4 <_ZN14EthernetClient4peekEv>:
    3cd4:	0f 93       	push	r16
    3cd6:	1f 93       	push	r17
    3cd8:	cf 93       	push	r28
    3cda:	df 93       	push	r29
    3cdc:	1f 92       	push	r1
    3cde:	cd b7       	in	r28, 0x3d	; 61
    3ce0:	de b7       	in	r29, 0x3e	; 62
    3ce2:	8c 01       	movw	r16, r24
    3ce4:	dc 01       	movw	r26, r24
    3ce6:	ed 91       	ld	r30, X+
    3ce8:	fc 91       	ld	r31, X
    3cea:	00 84       	ldd	r0, Z+8	; 0x08
    3cec:	f1 85       	ldd	r31, Z+9	; 0x09
    3cee:	e0 2d       	mov	r30, r0
    3cf0:	09 95       	icall
    3cf2:	89 2b       	or	r24, r25
    3cf4:	49 f0       	breq	.+18     	; 0x3d08 <_ZN14EthernetClient4peekEv+0x34>
    3cf6:	be 01       	movw	r22, r28
    3cf8:	6f 5f       	subi	r22, 0xFF	; 255
    3cfa:	7f 4f       	sbci	r23, 0xFF	; 255
    3cfc:	f8 01       	movw	r30, r16
    3cfe:	84 85       	ldd	r24, Z+12	; 0x0c
    3d00:	12 d4       	rcall	.+2084   	; 0x4526 <_Z4peekhPh>
    3d02:	89 81       	ldd	r24, Y+1	; 0x01
    3d04:	90 e0       	ldi	r25, 0x00	; 0
    3d06:	02 c0       	rjmp	.+4      	; 0x3d0c <_ZN14EthernetClient4peekEv+0x38>
    3d08:	8f ef       	ldi	r24, 0xFF	; 255
    3d0a:	9f ef       	ldi	r25, 0xFF	; 255
    3d0c:	0f 90       	pop	r0
    3d0e:	df 91       	pop	r29
    3d10:	cf 91       	pop	r28
    3d12:	1f 91       	pop	r17
    3d14:	0f 91       	pop	r16
    3d16:	08 95       	ret

00003d18 <_ZN14EthernetClient5flushEv>:
    3d18:	fc 01       	movw	r30, r24
    3d1a:	84 85       	ldd	r24, Z+12	; 0x0c
    3d1c:	11 c4       	rjmp	.+2082   	; 0x4540 <_Z5flushh>

00003d1e <_ZN14EthernetClientC1Ev>:
    3d1e:	fc 01       	movw	r30, r24
    3d20:	13 82       	std	Z+3, r1	; 0x03
    3d22:	12 82       	std	Z+2, r1	; 0x02
    3d24:	88 ee       	ldi	r24, 0xE8	; 232
    3d26:	93 e0       	ldi	r25, 0x03	; 3
    3d28:	a0 e0       	ldi	r26, 0x00	; 0
    3d2a:	b0 e0       	ldi	r27, 0x00	; 0
    3d2c:	84 83       	std	Z+4, r24	; 0x04
    3d2e:	95 83       	std	Z+5, r25	; 0x05
    3d30:	a6 83       	std	Z+6, r26	; 0x06
    3d32:	b7 83       	std	Z+7, r27	; 0x07
    3d34:	89 e7       	ldi	r24, 0x79	; 121
    3d36:	97 e0       	ldi	r25, 0x07	; 7
    3d38:	91 83       	std	Z+1, r25	; 0x01
    3d3a:	80 83       	st	Z, r24
    3d3c:	88 e0       	ldi	r24, 0x08	; 8
    3d3e:	84 87       	std	Z+12, r24	; 0x0c
    3d40:	08 95       	ret

00003d42 <_ZN14EthernetClient6statusEv>:
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
}

uint8_t EthernetClient::status() {
  if (_sock == MAX_SOCK_NUM) return SnSR::CLOSED;
    3d42:	fc 01       	movw	r30, r24
    3d44:	64 85       	ldd	r22, Z+12	; 0x0c
    3d46:	68 30       	cpi	r22, 0x08	; 8
    3d48:	39 f0       	breq	.+14     	; 0x3d58 <_ZN14EthernetClient6statusEv+0x16>

extern W5500Class w5500;

uint8_t W5500Class::readSn(SOCKET _s, uint16_t _addr) {
    uint8_t cntl_byte = (_s<<5)+0x08;
    return read(_addr, cntl_byte);
    3d4a:	62 95       	swap	r22
    3d4c:	66 0f       	add	r22, r22
    3d4e:	60 7e       	andi	r22, 0xE0	; 224
    3d50:	68 5f       	subi	r22, 0xF8	; 248
    3d52:	83 e0       	ldi	r24, 0x03	; 3
    3d54:	90 e0       	ldi	r25, 0x00	; 0
    3d56:	df c4       	rjmp	.+2494   	; 0x4716 <_ZN10W5500Class4readEjh>
  return w5500.readSnSR(_sock);
}
    3d58:	80 e0       	ldi	r24, 0x00	; 0
    3d5a:	08 95       	ret

00003d5c <_ZN14EthernetClient9connectedEv>:

  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
    3d5c:	cf 93       	push	r28
    3d5e:	df 93       	push	r29
  if (_sock == MAX_SOCK_NUM) return 0;
    3d60:	fc 01       	movw	r30, r24
    3d62:	24 85       	ldd	r18, Z+12	; 0x0c
    3d64:	28 30       	cpi	r18, 0x08	; 8
    3d66:	c9 f0       	breq	.+50     	; 0x3d9a <_ZN14EthernetClient9connectedEv+0x3e>
    3d68:	ec 01       	movw	r28, r24
  
  uint8_t s = status();
    3d6a:	eb df       	rcall	.-42     	; 0x3d42 <_ZN14EthernetClient6statusEv>
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
    3d6c:	84 31       	cpi	r24, 0x14	; 20
    3d6e:	81 f0       	breq	.+32     	; 0x3d90 <_ZN14EthernetClient9connectedEv+0x34>

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
  
  uint8_t s = status();
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    3d70:	88 23       	and	r24, r24
    3d72:	71 f0       	breq	.+28     	; 0x3d90 <_ZN14EthernetClient9connectedEv+0x34>
    3d74:	88 31       	cpi	r24, 0x18	; 24
    3d76:	61 f0       	breq	.+24     	; 0x3d90 <_ZN14EthernetClient9connectedEv+0x34>
    (s == SnSR::CLOSE_WAIT && !available()));
    3d78:	8c 31       	cpi	r24, 0x1C	; 28
    3d7a:	61 f4       	brne	.+24     	; 0x3d94 <_ZN14EthernetClient9connectedEv+0x38>
    3d7c:	e8 81       	ld	r30, Y
    3d7e:	f9 81       	ldd	r31, Y+1	; 0x01
    3d80:	00 84       	ldd	r0, Z+8	; 0x08
    3d82:	f1 85       	ldd	r31, Z+9	; 0x09
    3d84:	e0 2d       	mov	r30, r0
    3d86:	ce 01       	movw	r24, r28
    3d88:	09 95       	icall
    3d8a:	21 e0       	ldi	r18, 0x01	; 1
    3d8c:	89 2b       	or	r24, r25
    3d8e:	19 f4       	brne	.+6      	; 0x3d96 <_ZN14EthernetClient9connectedEv+0x3a>
    3d90:	20 e0       	ldi	r18, 0x00	; 0
    3d92:	01 c0       	rjmp	.+2      	; 0x3d96 <_ZN14EthernetClient9connectedEv+0x3a>
    3d94:	21 e0       	ldi	r18, 0x01	; 1
    3d96:	82 2f       	mov	r24, r18
    3d98:	01 c0       	rjmp	.+2      	; 0x3d9c <_ZN14EthernetClient9connectedEv+0x40>
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
    3d9a:	80 e0       	ldi	r24, 0x00	; 0
  
  uint8_t s = status();
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
}
    3d9c:	df 91       	pop	r29
    3d9e:	cf 91       	pop	r28
    3da0:	08 95       	ret

00003da2 <_ZN14EthernetClient4stopEv>:

void EthernetClient::flush() {
  ::flush(_sock);
}

void EthernetClient::stop() {
    3da2:	cf 92       	push	r12
    3da4:	df 92       	push	r13
    3da6:	ef 92       	push	r14
    3da8:	ff 92       	push	r15
    3daa:	cf 93       	push	r28
    3dac:	df 93       	push	r29
    3dae:	ec 01       	movw	r28, r24
  if (_sock == MAX_SOCK_NUM)
    3db0:	8c 85       	ldd	r24, Y+12	; 0x0c
    3db2:	88 30       	cpi	r24, 0x08	; 8
    3db4:	69 f1       	breq	.+90     	; 0x3e10 <_ZN14EthernetClient4stopEv+0x6e>
    return;

  // attempt to close the connection gracefully (send a FIN to other side)
  disconnect(_sock);
    3db6:	29 d3       	rcall	.+1618   	; 0x440a <_Z10disconnecth>
  unsigned long start = millis();
    3db8:	0e 94 22 2f 	call	0x5e44	; 0x5e44 <millis>
    3dbc:	6b 01       	movw	r12, r22
    3dbe:	7c 01       	movw	r14, r24

  // wait a second for the connection to close
  while (status() != SnSR::CLOSED && millis() - start < 1000)
    3dc0:	ce 01       	movw	r24, r28
    3dc2:	bf df       	rcall	.-130    	; 0x3d42 <_ZN14EthernetClient6statusEv>
    3dc4:	88 23       	and	r24, r24
    3dc6:	a1 f0       	breq	.+40     	; 0x3df0 <_ZN14EthernetClient4stopEv+0x4e>
    3dc8:	0e 94 22 2f 	call	0x5e44	; 0x5e44 <millis>
    3dcc:	dc 01       	movw	r26, r24
    3dce:	cb 01       	movw	r24, r22
    3dd0:	8c 19       	sub	r24, r12
    3dd2:	9d 09       	sbc	r25, r13
    3dd4:	ae 09       	sbc	r26, r14
    3dd6:	bf 09       	sbc	r27, r15
    3dd8:	88 3e       	cpi	r24, 0xE8	; 232
    3dda:	93 40       	sbci	r25, 0x03	; 3
    3ddc:	a1 05       	cpc	r26, r1
    3dde:	b1 05       	cpc	r27, r1
    3de0:	38 f4       	brcc	.+14     	; 0x3df0 <_ZN14EthernetClient4stopEv+0x4e>
    delay(1);
    3de2:	61 e0       	ldi	r22, 0x01	; 1
    3de4:	70 e0       	ldi	r23, 0x00	; 0
    3de6:	80 e0       	ldi	r24, 0x00	; 0
    3de8:	90 e0       	ldi	r25, 0x00	; 0
    3dea:	0e 94 53 2f 	call	0x5ea6	; 0x5ea6 <delay>

  // if it hasn't closed, close it forcefully
  if (status() != SnSR::CLOSED)
    3dee:	e8 cf       	rjmp	.-48     	; 0x3dc0 <_ZN14EthernetClient4stopEv+0x1e>
    3df0:	ce 01       	movw	r24, r28
    3df2:	a7 df       	rcall	.-178    	; 0x3d42 <_ZN14EthernetClient6statusEv>
    3df4:	88 23       	and	r24, r24
    close(_sock);
    3df6:	11 f0       	breq	.+4      	; 0x3dfc <_ZN14EthernetClient4stopEv+0x5a>
    3df8:	8c 85       	ldd	r24, Y+12	; 0x0c
    3dfa:	96 d2       	rcall	.+1324   	; 0x4328 <_Z5closeh>

  EthernetClass::_server_port[_sock] = 0;
    3dfc:	ec 85       	ldd	r30, Y+12	; 0x0c
    3dfe:	f0 e0       	ldi	r31, 0x00	; 0
    3e00:	ee 0f       	add	r30, r30
    3e02:	ff 1f       	adc	r31, r31
    3e04:	ea 57       	subi	r30, 0x7A	; 122
    3e06:	f6 4f       	sbci	r31, 0xF6	; 246
    3e08:	11 82       	std	Z+1, r1	; 0x01
    3e0a:	10 82       	st	Z, r1
  _sock = MAX_SOCK_NUM;
    3e0c:	88 e0       	ldi	r24, 0x08	; 8
    3e0e:	8c 87       	std	Y+12, r24	; 0x0c
}
    3e10:	df 91       	pop	r29
    3e12:	cf 91       	pop	r28
    3e14:	ff 90       	pop	r15
    3e16:	ef 90       	pop	r14
    3e18:	df 90       	pop	r13
    3e1a:	cf 90       	pop	r12
    3e1c:	08 95       	ret

00003e1e <_ZN14EthernetClient7connectE9IPAddressj>:
  } else {
    return ret;
  }
}

int EthernetClient::connect(IPAddress ip, uint16_t port) {
    3e1e:	cf 92       	push	r12
    3e20:	df 92       	push	r13
    3e22:	ff 92       	push	r15
    3e24:	0f 93       	push	r16
    3e26:	1f 93       	push	r17
    3e28:	cf 93       	push	r28
    3e2a:	df 93       	push	r29
  if (_sock != MAX_SOCK_NUM)
    3e2c:	fc 01       	movw	r30, r24
    3e2e:	24 85       	ldd	r18, Z+12	; 0x0c
    3e30:	28 30       	cpi	r18, 0x08	; 8
    3e32:	c1 f5       	brne	.+112    	; 0x3ea4 <_ZN14EthernetClient7connectE9IPAddressj+0x86>
    3e34:	6a 01       	movw	r12, r20
    3e36:	8b 01       	movw	r16, r22
    3e38:	ec 01       	movw	r28, r24
    3e3a:	f1 2c       	mov	r15, r1
    3e3c:	6f 2d       	mov	r22, r15
    3e3e:	62 95       	swap	r22
    3e40:	66 0f       	add	r22, r22
    3e42:	60 7e       	andi	r22, 0xE0	; 224
    3e44:	68 5f       	subi	r22, 0xF8	; 248
    3e46:	83 e0       	ldi	r24, 0x03	; 3
    3e48:	90 e0       	ldi	r25, 0x00	; 0
    3e4a:	65 d4       	rcall	.+2250   	; 0x4716 <_ZN10W5500Class4readEjh>
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
    3e4c:	81 11       	cpse	r24, r1
    3e4e:	02 c0       	rjmp	.+4      	; 0x3e54 <_ZN14EthernetClient7connectE9IPAddressj+0x36>
      _sock = i;
    3e50:	fc 86       	std	Y+12, r15	; 0x0c
    3e52:	07 c0       	rjmp	.+14     	; 0x3e62 <_ZN14EthernetClient7connectE9IPAddressj+0x44>
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
    3e54:	8b 7f       	andi	r24, 0xFB	; 251
    3e56:	88 31       	cpi	r24, 0x18	; 24
    3e58:	d9 f3       	breq	.-10     	; 0x3e50 <_ZN14EthernetClient7connectE9IPAddressj+0x32>
    3e5a:	f3 94       	inc	r15

int EthernetClient::connect(IPAddress ip, uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    3e5c:	f8 e0       	ldi	r31, 0x08	; 8
    3e5e:	ff 12       	cpse	r15, r31
    3e60:	ed cf       	rjmp	.-38     	; 0x3e3c <_ZN14EthernetClient7connectE9IPAddressj+0x1e>
      _sock = i;
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
    3e62:	8c 85       	ldd	r24, Y+12	; 0x0c
    3e64:	88 30       	cpi	r24, 0x08	; 8
    3e66:	f1 f0       	breq	.+60     	; 0x3ea4 <_ZN14EthernetClient7connectE9IPAddressj+0x86>
    return 0;

  _srcport++;
    3e68:	20 91 71 01 	lds	r18, 0x0171	; 0x800171 <_ZN14EthernetClient8_srcportE>
    3e6c:	30 91 72 01 	lds	r19, 0x0172	; 0x800172 <_ZN14EthernetClient8_srcportE+0x1>
    3e70:	2f 5f       	subi	r18, 0xFF	; 255
    3e72:	3f 4f       	sbci	r19, 0xFF	; 255
  if (_srcport == 0) _srcport = 1024;
    3e74:	11 f4       	brne	.+4      	; 0x3e7a <_ZN14EthernetClient7connectE9IPAddressj+0x5c>
    3e76:	20 e0       	ldi	r18, 0x00	; 0
    3e78:	34 e0       	ldi	r19, 0x04	; 4
    3e7a:	30 93 72 01 	sts	0x0172, r19	; 0x800172 <_ZN14EthernetClient8_srcportE+0x1>
    3e7e:	20 93 71 01 	sts	0x0171, r18	; 0x800171 <_ZN14EthernetClient8_srcportE>
  socket(_sock, SnMR::TCP, _srcport, 0);
    3e82:	40 91 71 01 	lds	r20, 0x0171	; 0x800171 <_ZN14EthernetClient8_srcportE>
    3e86:	50 91 72 01 	lds	r21, 0x0172	; 0x800172 <_ZN14EthernetClient8_srcportE+0x1>
    3e8a:	20 e0       	ldi	r18, 0x00	; 0
    3e8c:	61 e0       	ldi	r22, 0x01	; 1
    3e8e:	57 d2       	rcall	.+1198   	; 0x433e <_Z6sockethhjh>

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    3e90:	b8 01       	movw	r22, r16
    3e92:	6e 5f       	subi	r22, 0xFE	; 254
    3e94:	7f 4f       	sbci	r23, 0xFF	; 255

  if (!::connect(_sock, rawIPAddress(ip), port)) {
    3e96:	a6 01       	movw	r20, r12
    3e98:	8c 85       	ldd	r24, Y+12	; 0x0c
    3e9a:	84 d2       	rcall	.+1288   	; 0x43a4 <_Z7connecthPhj>
    3e9c:	81 11       	cpse	r24, r1
    3e9e:	05 c0       	rjmp	.+10     	; 0x3eaa <_ZN14EthernetClient7connectE9IPAddressj+0x8c>
    _sock = MAX_SOCK_NUM;
    3ea0:	88 e0       	ldi	r24, 0x08	; 8
    3ea2:	8c 87       	std	Y+12, r24	; 0x0c
    return 0;
    3ea4:	80 e0       	ldi	r24, 0x00	; 0
    3ea6:	90 e0       	ldi	r25, 0x00	; 0
  }

  while (status() != SnSR::ESTABLISHED) {
    3ea8:	0f c0       	rjmp	.+30     	; 0x3ec8 <_ZN14EthernetClient7connectE9IPAddressj+0xaa>
    3eaa:	ce 01       	movw	r24, r28
    3eac:	4a df       	rcall	.-364    	; 0x3d42 <_ZN14EthernetClient6statusEv>
    3eae:	87 31       	cpi	r24, 0x17	; 23
    3eb0:	49 f0       	breq	.+18     	; 0x3ec4 <_ZN14EthernetClient7connectE9IPAddressj+0xa6>
    delay(1);
    3eb2:	61 e0       	ldi	r22, 0x01	; 1
    3eb4:	70 e0       	ldi	r23, 0x00	; 0
    3eb6:	80 e0       	ldi	r24, 0x00	; 0
    3eb8:	90 e0       	ldi	r25, 0x00	; 0
    3eba:	0e 94 53 2f 	call	0x5ea6	; 0x5ea6 <delay>
    if (status() == SnSR::CLOSED) {
    3ebe:	ce 01       	movw	r24, r28
    3ec0:	40 df       	rcall	.-384    	; 0x3d42 <_ZN14EthernetClient6statusEv>
    3ec2:	ec cf       	rjmp	.-40     	; 0x3e9c <_ZN14EthernetClient7connectE9IPAddressj+0x7e>
      _sock = MAX_SOCK_NUM;
      return 0;
    }
  }

  return 1;
    3ec4:	81 e0       	ldi	r24, 0x01	; 1
    3ec6:	90 e0       	ldi	r25, 0x00	; 0
}
    3ec8:	df 91       	pop	r29
    3eca:	cf 91       	pop	r28
    3ecc:	1f 91       	pop	r17
    3ece:	0f 91       	pop	r16
    3ed0:	ff 90       	pop	r15
    3ed2:	df 90       	pop	r13
    3ed4:	cf 90       	pop	r12
    3ed6:	08 95       	ret

00003ed8 <_GLOBAL__sub_I__ZN14EthernetClient8_srcportE>:
  return _sock != MAX_SOCK_NUM;
}

bool EthernetClient::operator==(const EthernetClient& rhs) {
  return _sock == rhs._sock && _sock != MAX_SOCK_NUM && rhs._sock != MAX_SOCK_NUM;
}
    3ed8:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    3eda:	00 e0       	ldi	r16, 0x00	; 0
    3edc:	20 e0       	ldi	r18, 0x00	; 0
    3ede:	40 e0       	ldi	r20, 0x00	; 0
    3ee0:	60 e0       	ldi	r22, 0x00	; 0
    3ee2:	8c e9       	ldi	r24, 0x9C	; 156
    3ee4:	99 e0       	ldi	r25, 0x09	; 9
    3ee6:	0e 94 a1 2d 	call	0x5b42	; 0x5b42 <_ZN9IPAddressC1Ehhhh>
    3eea:	0f 91       	pop	r16
    3eec:	08 95       	ret

00003eee <_GLOBAL__sub_I__ZN14EthernetServerC2Ej>:
      n += client.write(buffer, size);
    }
  }
  
  return n;
}
    3eee:	0f 93       	push	r16
    3ef0:	00 e0       	ldi	r16, 0x00	; 0
    3ef2:	20 e0       	ldi	r18, 0x00	; 0
    3ef4:	40 e0       	ldi	r20, 0x00	; 0
    3ef6:	60 e0       	ldi	r22, 0x00	; 0
    3ef8:	82 ea       	ldi	r24, 0xA2	; 162
    3efa:	99 e0       	ldi	r25, 0x09	; 9
    3efc:	0e 94 a1 2d 	call	0x5b42	; 0x5b42 <_ZN9IPAddressC1Ehhhh>
    3f00:	0f 91       	pop	r16
    3f02:	08 95       	ret

00003f04 <_ZN3UDP14beginMulticastE9IPAddressj>:

class UDP : public Stream {

public:
  virtual uint8_t begin(uint16_t) =0;  // initialize, start listening on specified port. Returns 1 if successful, 0 if there are no sockets available to use
  virtual uint8_t beginMulticast(IPAddress, uint16_t) { return 0; }  // initialize, start listening on specified multicast IP address and port. Returns 1 if successful, 0 on failure
    3f04:	80 e0       	ldi	r24, 0x00	; 0
    3f06:	08 95       	ret

00003f08 <_ZN11EthernetUDP4readEPcj>:
  // Read up to len bytes from the current packet and place them into buffer
  // Returns the number of bytes read, or 0 if none are available
  virtual int read(unsigned char* buffer, size_t len);
  // Read up to len characters from the current packet and place them into buffer
  // Returns the number of characters read, or 0 if none are available
  virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
    3f08:	dc 01       	movw	r26, r24
    3f0a:	ed 91       	ld	r30, X+
    3f0c:	fc 91       	ld	r31, X
    3f0e:	04 8c       	ldd	r0, Z+28	; 0x1c
    3f10:	f5 8d       	ldd	r31, Z+29	; 0x1d
    3f12:	e0 2d       	mov	r30, r0
    3f14:	09 94       	ijmp

00003f16 <_ZN11EthernetUDP8remoteIPEv>:
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    3f16:	2d ef       	ldi	r18, 0xFD	; 253
    3f18:	37 e0       	ldi	r19, 0x07	; 7
    3f1a:	fc 01       	movw	r30, r24
    3f1c:	31 83       	std	Z+1, r19	; 0x01
    3f1e:	20 83       	st	Z, r18
    3f20:	fb 01       	movw	r30, r22
    3f22:	41 89       	ldd	r20, Z+17	; 0x11
    3f24:	52 89       	ldd	r21, Z+18	; 0x12
    3f26:	63 89       	ldd	r22, Z+19	; 0x13
    3f28:	74 89       	ldd	r23, Z+20	; 0x14
    3f2a:	fc 01       	movw	r30, r24
    3f2c:	42 83       	std	Z+2, r20	; 0x02
    3f2e:	53 83       	std	Z+3, r21	; 0x03
    3f30:	64 83       	std	Z+4, r22	; 0x04
    3f32:	75 83       	std	Z+5, r23	; 0x05
  // Return the next byte from the current packet without moving on to the next byte
  virtual int peek();
  virtual void flush();	// Finish reading the current packet

  // Return the IP address of the host who sent the current incoming packet
  virtual IPAddress remoteIP() { return _remoteIP; };
    3f34:	08 95       	ret

00003f36 <_ZN11EthernetUDP10remotePortEv>:
  // Return the port of the host who sent the current incoming packet
  virtual uint16_t remotePort() { return _remotePort; };
    3f36:	fc 01       	movw	r30, r24
    3f38:	85 89       	ldd	r24, Z+21	; 0x15
    3f3a:	96 89       	ldd	r25, Z+22	; 0x16
    3f3c:	08 95       	ret

00003f3e <_ZN11EthernetUDP9availableEv>:

/* return number of bytes available in the current packet,
   will return zero if parsePacket hasn't been called yet */
int EthernetUDP::available() {
  return _remaining;
}
    3f3e:	fc 01       	movw	r30, r24
    3f40:	81 8d       	ldd	r24, Z+25	; 0x19
    3f42:	92 8d       	ldd	r25, Z+26	; 0x1a
    3f44:	08 95       	ret

00003f46 <_ZN11EthernetUDP5writeEh>:
{
  return sendUDP(_sock);
}

size_t EthernetUDP::write(uint8_t byte)
{
    3f46:	cf 93       	push	r28
    3f48:	df 93       	push	r29
    3f4a:	1f 92       	push	r1
    3f4c:	cd b7       	in	r28, 0x3d	; 61
    3f4e:	de b7       	in	r29, 0x3e	; 62
    3f50:	69 83       	std	Y+1, r22	; 0x01
  return write(&byte, 1);
    3f52:	dc 01       	movw	r26, r24
    3f54:	ed 91       	ld	r30, X+
    3f56:	fc 91       	ld	r31, X
    3f58:	02 80       	ldd	r0, Z+2	; 0x02
    3f5a:	f3 81       	ldd	r31, Z+3	; 0x03
    3f5c:	e0 2d       	mov	r30, r0
    3f5e:	41 e0       	ldi	r20, 0x01	; 1
    3f60:	50 e0       	ldi	r21, 0x00	; 0
    3f62:	be 01       	movw	r22, r28
    3f64:	6f 5f       	subi	r22, 0xFF	; 255
    3f66:	7f 4f       	sbci	r23, 0xFF	; 255
    3f68:	09 95       	icall
}
    3f6a:	0f 90       	pop	r0
    3f6c:	df 91       	pop	r29
    3f6e:	cf 91       	pop	r28
    3f70:	08 95       	ret

00003f72 <_ZN11EthernetUDP5flushEv>:
  ::peek(_sock, &b);
  return b;
}

void EthernetUDP::flush()
{
    3f72:	cf 93       	push	r28
    3f74:	df 93       	push	r29
    3f76:	ec 01       	movw	r28, r24
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5500 always behaves :)

  while (_remaining)
    3f78:	89 8d       	ldd	r24, Y+25	; 0x19
    3f7a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3f7c:	89 2b       	or	r24, r25
    3f7e:	41 f0       	breq	.+16     	; 0x3f90 <_ZN11EthernetUDP5flushEv+0x1e>
  {
    read();
    3f80:	e8 81       	ld	r30, Y
    3f82:	f9 81       	ldd	r31, Y+1	; 0x01
    3f84:	02 84       	ldd	r0, Z+10	; 0x0a
    3f86:	f3 85       	ldd	r31, Z+11	; 0x0b
    3f88:	e0 2d       	mov	r30, r0
    3f8a:	ce 01       	movw	r24, r28
    3f8c:	09 95       	icall
{
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5500 always behaves :)

  while (_remaining)
    3f8e:	f4 cf       	rjmp	.-24     	; 0x3f78 <_ZN11EthernetUDP5flushEv+0x6>
  {
    read();
  }
}
    3f90:	df 91       	pop	r29
    3f92:	cf 91       	pop	r28
    3f94:	08 95       	ret

00003f96 <_ZN11EthernetUDP4stopEv>:
  return _remaining;
}

/* Release any resources being used by this EthernetUDP instance */
void EthernetUDP::stop()
{
    3f96:	cf 93       	push	r28
    3f98:	df 93       	push	r29
    3f9a:	ec 01       	movw	r28, r24
  if (_sock == MAX_SOCK_NUM)
    3f9c:	8c 85       	ldd	r24, Y+12	; 0x0c
    3f9e:	88 30       	cpi	r24, 0x08	; 8
    3fa0:	59 f0       	breq	.+22     	; 0x3fb8 <_ZN11EthernetUDP4stopEv+0x22>
    return;

  close(_sock);
    3fa2:	c2 d1       	rcall	.+900    	; 0x4328 <_Z5closeh>

  EthernetClass::_server_port[_sock] = 0;
    3fa4:	ec 85       	ldd	r30, Y+12	; 0x0c
    3fa6:	f0 e0       	ldi	r31, 0x00	; 0
    3fa8:	ee 0f       	add	r30, r30
    3faa:	ff 1f       	adc	r31, r31
    3fac:	ea 57       	subi	r30, 0x7A	; 122
    3fae:	f6 4f       	sbci	r31, 0xF6	; 246
    3fb0:	11 82       	std	Z+1, r1	; 0x01
    3fb2:	10 82       	st	Z, r1
  _sock = MAX_SOCK_NUM;
    3fb4:	88 e0       	ldi	r24, 0x08	; 8
    3fb6:	8c 87       	std	Y+12, r24	; 0x0c
}
    3fb8:	df 91       	pop	r29
    3fba:	cf 91       	pop	r28
    3fbc:	08 95       	ret

00003fbe <_ZN11EthernetUDP11beginPacketE9IPAddressj>:
  }
}

int EthernetUDP::beginPacket(IPAddress ip, uint16_t port)
{
  _offset = 0;
    3fbe:	fc 01       	movw	r30, r24
    3fc0:	10 8e       	std	Z+24, r1	; 0x18
    3fc2:	17 8a       	std	Z+23, r1	; 0x17

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    3fc4:	6e 5f       	subi	r22, 0xFE	; 254
    3fc6:	7f 4f       	sbci	r23, 0xFF	; 255
  return startUDP(_sock, rawIPAddress(ip), port);
    3fc8:	84 85       	ldd	r24, Z+12	; 0x0c
    3fca:	e6 c2       	rjmp	.+1484   	; 0x4598 <_Z8startUDPhPhj>

00003fcc <_ZN11EthernetUDP9endPacketEv>:
}

int EthernetUDP::endPacket()
{
  return sendUDP(_sock);
    3fcc:	fc 01       	movw	r30, r24
    3fce:	84 85       	ldd	r24, Z+12	; 0x0c
    3fd0:	06 c3       	rjmp	.+1548   	; 0x45de <_Z7sendUDPh>

00003fd2 <_ZN11EthernetUDP5writeEPKhj>:
{
  return write(&byte, 1);
}

size_t EthernetUDP::write(const uint8_t *buffer, size_t size)
{
    3fd2:	cf 93       	push	r28
    3fd4:	df 93       	push	r29
    3fd6:	ec 01       	movw	r28, r24
    3fd8:	9a 01       	movw	r18, r20
  uint16_t bytes_written = bufferData(_sock, _offset, buffer, size);
    3fda:	8f 89       	ldd	r24, Y+23	; 0x17
    3fdc:	98 8d       	ldd	r25, Y+24	; 0x18
    3fde:	ab 01       	movw	r20, r22
    3fe0:	bc 01       	movw	r22, r24
    3fe2:	8c 85       	ldd	r24, Y+12	; 0x0c
    3fe4:	ae d2       	rcall	.+1372   	; 0x4542 <_Z10bufferDatahjPKhj>
  _offset += bytes_written;
    3fe6:	2f 89       	ldd	r18, Y+23	; 0x17
    3fe8:	38 8d       	ldd	r19, Y+24	; 0x18
    3fea:	28 0f       	add	r18, r24
    3fec:	39 1f       	adc	r19, r25
    3fee:	38 8f       	std	Y+24, r19	; 0x18
    3ff0:	2f 8b       	std	Y+23, r18	; 0x17
  return bytes_written;
}
    3ff2:	df 91       	pop	r29
    3ff4:	cf 91       	pop	r28
    3ff6:	08 95       	ret

00003ff8 <_ZN11EthernetUDP4readEv>:
  // There aren't any packets available
  return 0;
}

int EthernetUDP::read()
{
    3ff8:	0f 93       	push	r16
    3ffa:	1f 93       	push	r17
    3ffc:	cf 93       	push	r28
    3ffe:	df 93       	push	r29
    4000:	1f 92       	push	r1
    4002:	cd b7       	in	r28, 0x3d	; 61
    4004:	de b7       	in	r29, 0x3e	; 62
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
    4006:	fc 01       	movw	r30, r24
    4008:	21 8d       	ldd	r18, Z+25	; 0x19
    400a:	32 8d       	ldd	r19, Z+26	; 0x1a
    400c:	23 2b       	or	r18, r19
    400e:	59 f0       	breq	.+22     	; 0x4026 <_ZN11EthernetUDP4readEv+0x2e>
    4010:	8c 01       	movw	r16, r24
    4012:	41 e0       	ldi	r20, 0x01	; 1
    4014:	50 e0       	ldi	r21, 0x00	; 0
    4016:	be 01       	movw	r22, r28
    4018:	6f 5f       	subi	r22, 0xFF	; 255
    401a:	7f 4f       	sbci	r23, 0xFF	; 255
    401c:	84 85       	ldd	r24, Z+12	; 0x0c
    401e:	42 d2       	rcall	.+1156   	; 0x44a4 <_Z4recvhPhi>
    4020:	18 16       	cp	r1, r24
    4022:	19 06       	cpc	r1, r25
    4024:	1c f0       	brlt	.+6      	; 0x402c <_ZN11EthernetUDP4readEv+0x34>
    _remaining--;
    return byte;
  }

  // If we get here, there's no data available
  return -1;
    4026:	8f ef       	ldi	r24, 0xFF	; 255
    4028:	9f ef       	ldi	r25, 0xFF	; 255
    402a:	08 c0       	rjmp	.+16     	; 0x403c <_ZN11EthernetUDP4readEv+0x44>
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
  {
    // We read things without any problems
    _remaining--;
    402c:	f8 01       	movw	r30, r16
    402e:	81 8d       	ldd	r24, Z+25	; 0x19
    4030:	92 8d       	ldd	r25, Z+26	; 0x1a
    4032:	01 97       	sbiw	r24, 0x01	; 1
    4034:	92 8f       	std	Z+26, r25	; 0x1a
    4036:	81 8f       	std	Z+25, r24	; 0x19
    return byte;
    4038:	89 81       	ldd	r24, Y+1	; 0x01
    403a:	90 e0       	ldi	r25, 0x00	; 0
  }

  // If we get here, there's no data available
  return -1;
}
    403c:	0f 90       	pop	r0
    403e:	df 91       	pop	r29
    4040:	cf 91       	pop	r28
    4042:	1f 91       	pop	r17
    4044:	0f 91       	pop	r16
    4046:	08 95       	ret

00004048 <_ZN11EthernetUDP4readEPhj>:

int EthernetUDP::read(unsigned char* buffer, size_t len)
{
    4048:	cf 93       	push	r28
    404a:	df 93       	push	r29

  if (_remaining > 0)
    404c:	fc 01       	movw	r30, r24
    404e:	21 8d       	ldd	r18, Z+25	; 0x19
    4050:	32 8d       	ldd	r19, Z+26	; 0x1a
    4052:	21 15       	cp	r18, r1
    4054:	31 05       	cpc	r19, r1
    4056:	19 f4       	brne	.+6      	; 0x405e <_ZN11EthernetUDP4readEPhj+0x16>
    }

  }

  // If we get here, there's no data available or recv failed
  return -1;
    4058:	8f ef       	ldi	r24, 0xFF	; 255
    405a:	9f ef       	ldi	r25, 0xFF	; 255
    405c:	10 c0       	rjmp	.+32     	; 0x407e <_ZN11EthernetUDP4readEPhj+0x36>
    405e:	ec 01       	movw	r28, r24
  if (_remaining > 0)
  {

    int got;

    if (_remaining <= len)
    4060:	42 17       	cp	r20, r18
    4062:	53 07       	cpc	r21, r19
    4064:	08 f0       	brcs	.+2      	; 0x4068 <_ZN11EthernetUDP4readEPhj+0x20>
    {
      // data should fit in the buffer
      got = recv(_sock, buffer, _remaining);
    4066:	a9 01       	movw	r20, r18
    }
    else
    {
      // too much data for the buffer, 
      // grab as much as will fit
      got = recv(_sock, buffer, len);
    4068:	8c 85       	ldd	r24, Y+12	; 0x0c
    406a:	1c d2       	rcall	.+1080   	; 0x44a4 <_Z4recvhPhi>
    }

    if (got > 0)
    406c:	18 16       	cp	r1, r24
    406e:	19 06       	cpc	r1, r25
    4070:	9c f7       	brge	.-26     	; 0x4058 <_ZN11EthernetUDP4readEPhj+0x10>
    {
      _remaining -= got;
    4072:	29 8d       	ldd	r18, Y+25	; 0x19
    4074:	3a 8d       	ldd	r19, Y+26	; 0x1a
    4076:	28 1b       	sub	r18, r24
    4078:	39 0b       	sbc	r19, r25
    407a:	3a 8f       	std	Y+26, r19	; 0x1a
    407c:	29 8f       	std	Y+25, r18	; 0x19
  }

  // If we get here, there's no data available or recv failed
  return -1;

}
    407e:	df 91       	pop	r29
    4080:	cf 91       	pop	r28
    4082:	08 95       	ret

00004084 <_ZN11EthernetUDP4peekEv>:

int EthernetUDP::peek()
{
    4084:	cf 93       	push	r28
    4086:	df 93       	push	r29
    4088:	1f 92       	push	r1
    408a:	cd b7       	in	r28, 0x3d	; 61
    408c:	de b7       	in	r29, 0x3e	; 62
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
    408e:	fc 01       	movw	r30, r24
    4090:	21 8d       	ldd	r18, Z+25	; 0x19
    4092:	32 8d       	ldd	r19, Z+26	; 0x1a
    4094:	23 2b       	or	r18, r19
    4096:	41 f0       	breq	.+16     	; 0x40a8 <_ZN11EthernetUDP4peekEv+0x24>
    return -1;
  ::peek(_sock, &b);
    4098:	be 01       	movw	r22, r28
    409a:	6f 5f       	subi	r22, 0xFF	; 255
    409c:	7f 4f       	sbci	r23, 0xFF	; 255
    409e:	84 85       	ldd	r24, Z+12	; 0x0c
    40a0:	42 d2       	rcall	.+1156   	; 0x4526 <_Z4peekhPh>
  return b;
    40a2:	89 81       	ldd	r24, Y+1	; 0x01
    40a4:	90 e0       	ldi	r25, 0x00	; 0
    40a6:	02 c0       	rjmp	.+4      	; 0x40ac <_ZN11EthernetUDP4peekEv+0x28>
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
    return -1;
    40a8:	8f ef       	ldi	r24, 0xFF	; 255
    40aa:	9f ef       	ldi	r25, 0xFF	; 255
  ::peek(_sock, &b);
  return b;
}
    40ac:	0f 90       	pop	r0
    40ae:	df 91       	pop	r29
    40b0:	cf 91       	pop	r28
    40b2:	08 95       	ret

000040b4 <_ZN11EthernetUDP5beginEj>:

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
    40b4:	ef 92       	push	r14
    40b6:	ff 92       	push	r15
    40b8:	1f 93       	push	r17
    40ba:	cf 93       	push	r28
    40bc:	df 93       	push	r29
  if (_sock != MAX_SOCK_NUM)
    40be:	fc 01       	movw	r30, r24
    40c0:	24 85       	ldd	r18, Z+12	; 0x0c
    40c2:	28 30       	cpi	r18, 0x08	; 8
    40c4:	11 f0       	breq	.+4      	; 0x40ca <_ZN11EthernetUDP5beginEj+0x16>
    return 0;
    40c6:	80 e0       	ldi	r24, 0x00	; 0
    40c8:	20 c0       	rjmp	.+64     	; 0x410a <__stack+0xb>
    40ca:	7b 01       	movw	r14, r22
    40cc:	ec 01       	movw	r28, r24
    40ce:	10 e0       	ldi	r17, 0x00	; 0
    40d0:	61 2f       	mov	r22, r17
    40d2:	62 95       	swap	r22
    40d4:	66 0f       	add	r22, r22
    40d6:	60 7e       	andi	r22, 0xE0	; 224
    40d8:	68 5f       	subi	r22, 0xF8	; 248
    40da:	83 e0       	ldi	r24, 0x03	; 3
    40dc:	90 e0       	ldi	r25, 0x00	; 0
    40de:	1b d3       	rcall	.+1590   	; 0x4716 <_ZN10W5500Class4readEjh>

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
    40e0:	81 11       	cpse	r24, r1
    40e2:	02 c0       	rjmp	.+4      	; 0x40e8 <_ZN11EthernetUDP5beginEj+0x34>
      _sock = i;
    40e4:	1c 87       	std	Y+12, r17	; 0x0c
    40e6:	05 c0       	rjmp	.+10     	; 0x40f2 <_ZN11EthernetUDP5beginEj+0x3e>
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
    40e8:	88 31       	cpi	r24, 0x18	; 24
    40ea:	e1 f3       	breq	.-8      	; 0x40e4 <_ZN11EthernetUDP5beginEj+0x30>
    40ec:	1f 5f       	subi	r17, 0xFF	; 255
/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    40ee:	18 30       	cpi	r17, 0x08	; 8
    40f0:	79 f7       	brne	.-34     	; 0x40d0 <_ZN11EthernetUDP5beginEj+0x1c>
      _sock = i;
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
    40f2:	8c 85       	ldd	r24, Y+12	; 0x0c
    40f4:	88 30       	cpi	r24, 0x08	; 8
    40f6:	39 f3       	breq	.-50     	; 0x40c6 <_ZN11EthernetUDP5beginEj+0x12>
    return 0;

  _port = port;
    40f8:	fe 86       	std	Y+14, r15	; 0x0e
    40fa:	ed 86       	std	Y+13, r14	; 0x0d
  _remaining = 0;
    40fc:	1a 8e       	std	Y+26, r1	; 0x1a
    40fe:	19 8e       	std	Y+25, r1	; 0x19
  socket(_sock, SnMR::UDP, _port, 0);
    4100:	20 e0       	ldi	r18, 0x00	; 0
    4102:	a7 01       	movw	r20, r14
    4104:	62 e0       	ldi	r22, 0x02	; 2
    4106:	1b d1       	rcall	.+566    	; 0x433e <_Z6sockethhjh>

  return 1;
    4108:	81 e0       	ldi	r24, 0x01	; 1
}
    410a:	df 91       	pop	r29
    410c:	cf 91       	pop	r28
    410e:	1f 91       	pop	r17
    4110:	ff 90       	pop	r15
    4112:	ef 90       	pop	r14
    4114:	08 95       	ret

00004116 <_ZN11EthernetUDP11parsePacketEv>:
  _offset += bytes_written;
  return bytes_written;
}

int EthernetUDP::parsePacket()
{
    4116:	0f 93       	push	r16
    4118:	1f 93       	push	r17
    411a:	cf 93       	push	r28
    411c:	df 93       	push	r29
    411e:	cd b7       	in	r28, 0x3d	; 61
    4120:	de b7       	in	r29, 0x3e	; 62
    4122:	28 97       	sbiw	r28, 0x08	; 8
    4124:	0f b6       	in	r0, 0x3f	; 63
    4126:	f8 94       	cli
    4128:	de bf       	out	0x3e, r29	; 62
    412a:	0f be       	out	0x3f, r0	; 63
    412c:	cd bf       	out	0x3d, r28	; 61
    412e:	8c 01       	movw	r16, r24
  // discard any remaining bytes in the last packet
  flush();
    4130:	dc 01       	movw	r26, r24
    4132:	ed 91       	ld	r30, X+
    4134:	fc 91       	ld	r31, X
    4136:	06 80       	ldd	r0, Z+6	; 0x06
    4138:	f7 81       	ldd	r31, Z+7	; 0x07
    413a:	e0 2d       	mov	r30, r0
    413c:	09 95       	icall

  if (w5500.getRXReceivedSize(_sock) > 0)
    413e:	f8 01       	movw	r30, r16
    4140:	64 85       	ldd	r22, Z+12	; 0x0c
    4142:	83 eb       	ldi	r24, 0xB3	; 179
    4144:	99 e0       	ldi	r25, 0x09	; 9
    4146:	77 d3       	rcall	.+1774   	; 0x4836 <_ZN10W5500Class17getRXReceivedSizeEh>
    4148:	89 2b       	or	r24, r25
    414a:	39 f1       	breq	.+78     	; 0x419a <_ZN11EthernetUDP11parsePacketEv+0x84>
  {
    //HACK - hand-parse the UDP packet using TCP recv method
    uint8_t tmpBuf[8];
    int ret =0; 
    //read 8 header bytes and get IP and port from it
    ret = recv(_sock,tmpBuf,8);
    414c:	48 e0       	ldi	r20, 0x08	; 8
    414e:	50 e0       	ldi	r21, 0x00	; 0
    4150:	be 01       	movw	r22, r28
    4152:	6f 5f       	subi	r22, 0xFF	; 255
    4154:	7f 4f       	sbci	r23, 0xFF	; 255
    4156:	d8 01       	movw	r26, r16
    4158:	1c 96       	adiw	r26, 0x0c	; 12
    415a:	8c 91       	ld	r24, X
    415c:	a3 d1       	rcall	.+838    	; 0x44a4 <_Z4recvhPhi>
    if (ret > 0)
    415e:	18 16       	cp	r1, r24
    4160:	19 06       	cpc	r1, r25
    4162:	ec f4       	brge	.+58     	; 0x419e <_ZN11EthernetUDP11parsePacketEv+0x88>
    {
      _remoteIP = tmpBuf;
    4164:	be 01       	movw	r22, r28
    4166:	6f 5f       	subi	r22, 0xFF	; 255
    4168:	7f 4f       	sbci	r23, 0xFF	; 255
    416a:	c8 01       	movw	r24, r16
    416c:	0f 96       	adiw	r24, 0x0f	; 15
    416e:	0e 94 ad 2d 	call	0x5b5a	; 0x5b5a <_ZN9IPAddressaSEPKh>
      _remotePort = tmpBuf[4];
      _remotePort = (_remotePort << 8) + tmpBuf[5];
    4172:	8d 81       	ldd	r24, Y+5	; 0x05
    4174:	90 e0       	ldi	r25, 0x00	; 0
    4176:	98 2f       	mov	r25, r24
    4178:	88 27       	eor	r24, r24
    417a:	2e 81       	ldd	r18, Y+6	; 0x06
    417c:	82 0f       	add	r24, r18
    417e:	91 1d       	adc	r25, r1
    4180:	f8 01       	movw	r30, r16
    4182:	96 8b       	std	Z+22, r25	; 0x16
    4184:	85 8b       	std	Z+21, r24	; 0x15
      _remaining = tmpBuf[6];
      _remaining = (_remaining << 8) + tmpBuf[7];
    4186:	8f 81       	ldd	r24, Y+7	; 0x07
    4188:	90 e0       	ldi	r25, 0x00	; 0
    418a:	98 2f       	mov	r25, r24
    418c:	88 27       	eor	r24, r24
    418e:	28 85       	ldd	r18, Y+8	; 0x08
    4190:	82 0f       	add	r24, r18
    4192:	91 1d       	adc	r25, r1
    4194:	92 8f       	std	Z+26, r25	; 0x1a
    4196:	81 8f       	std	Z+25, r24	; 0x19
    4198:	02 c0       	rjmp	.+4      	; 0x419e <_ZN11EthernetUDP11parsePacketEv+0x88>
      ret = _remaining;
    }
    return ret;
  }
  // There aren't any packets available
  return 0;
    419a:	80 e0       	ldi	r24, 0x00	; 0
    419c:	90 e0       	ldi	r25, 0x00	; 0
}
    419e:	28 96       	adiw	r28, 0x08	; 8
    41a0:	0f b6       	in	r0, 0x3f	; 63
    41a2:	f8 94       	cli
    41a4:	de bf       	out	0x3e, r29	; 62
    41a6:	0f be       	out	0x3f, r0	; 63
    41a8:	cd bf       	out	0x3d, r28	; 61
    41aa:	df 91       	pop	r29
    41ac:	cf 91       	pop	r28
    41ae:	1f 91       	pop	r17
    41b0:	0f 91       	pop	r16
    41b2:	08 95       	ret

000041b4 <_ZN11EthernetUDPC1Ev>:
#include "Ethernet2.h"
#include "Udp.h"
#include "Dns.h"

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}
    41b4:	fc 01       	movw	r30, r24
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    41b6:	13 82       	std	Z+3, r1	; 0x03
    41b8:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    41ba:	88 ee       	ldi	r24, 0xE8	; 232
    41bc:	93 e0       	ldi	r25, 0x03	; 3
    41be:	a0 e0       	ldi	r26, 0x00	; 0
    41c0:	b0 e0       	ldi	r27, 0x00	; 0
    41c2:	84 83       	std	Z+4, r24	; 0x04
    41c4:	95 83       	std	Z+5, r25	; 0x05
    41c6:	a6 83       	std	Z+6, r26	; 0x06
    41c8:	b7 83       	std	Z+7, r27	; 0x07
    41ca:	8b e9       	ldi	r24, 0x9B	; 155
    41cc:	97 e0       	ldi	r25, 0x07	; 7
    41ce:	91 83       	std	Z+1, r25	; 0x01
    41d0:	80 83       	st	Z, r24
    41d2:	88 e0       	ldi	r24, 0x08	; 8
    41d4:	84 87       	std	Z+12, r24	; 0x0c
    41d6:	cf 01       	movw	r24, r30
    41d8:	0f 96       	adiw	r24, 0x0f	; 15
    41da:	0c 94 97 2d 	jmp	0x5b2e	; 0x5b2e <_ZN9IPAddressC1Ev>

000041de <_ZN11EthernetUDP11beginPacketEPKcj>:
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

int EthernetUDP::beginPacket(const char *host, uint16_t port)
{
    41de:	cf 92       	push	r12
    41e0:	df 92       	push	r13
    41e2:	ef 92       	push	r14
    41e4:	ff 92       	push	r15
    41e6:	0f 93       	push	r16
    41e8:	1f 93       	push	r17
    41ea:	cf 93       	push	r28
    41ec:	df 93       	push	r29
    41ee:	cd b7       	in	r28, 0x3d	; 61
    41f0:	de b7       	in	r29, 0x3e	; 62
    41f2:	af 97       	sbiw	r28, 0x2f	; 47
    41f4:	0f b6       	in	r0, 0x3f	; 63
    41f6:	f8 94       	cli
    41f8:	de bf       	out	0x3e, r29	; 62
    41fa:	0f be       	out	0x3f, r0	; 63
    41fc:	cd bf       	out	0x3d, r28	; 61
    41fe:	8c 01       	movw	r16, r24
    4200:	6b 01       	movw	r12, r22
    4202:	7a 01       	movw	r14, r20
#ifndef DNSClient_h
#define DNSClient_h

#include <EthernetUdp2.h>

class DNSClient
    4204:	ce 01       	movw	r24, r28
    4206:	01 96       	adiw	r24, 0x01	; 1
    4208:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN9IPAddressC1Ev>
    420c:	ce 01       	movw	r24, r28
    420e:	09 96       	adiw	r24, 0x09	; 9
    4210:	d1 df       	rcall	.-94     	; 0x41b4 <_ZN11EthernetUDPC1Ev>
  // Look up the host first
  int ret = 0;
  DNSClient dns;
  IPAddress remote_addr;
    4212:	ce 01       	movw	r24, r28
    4214:	8a 96       	adiw	r24, 0x2a	; 42
    4216:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN9IPAddressC1Ev>

  dns.begin(Ethernet.dnsServerIP());
    421a:	69 e7       	ldi	r22, 0x79	; 121
    421c:	79 e0       	ldi	r23, 0x09	; 9
    421e:	ce 01       	movw	r24, r28
    4220:	84 96       	adiw	r24, 0x24	; 36
    4222:	63 dc       	rcall	.-1850   	; 0x3aea <_ZN13EthernetClass11dnsServerIPEv>
    4224:	be 01       	movw	r22, r28
    4226:	6c 5d       	subi	r22, 0xDC	; 220
    4228:	7f 4f       	sbci	r23, 0xFF	; 255
    422a:	ce 01       	movw	r24, r28
    422c:	01 96       	adiw	r24, 0x01	; 1
    422e:	28 d9       	rcall	.-3504   	; 0x3480 <_ZN9DNSClient5beginERK9IPAddress>
  ret = dns.getHostByName(host, remote_addr);
    4230:	ae 01       	movw	r20, r28
    4232:	46 5d       	subi	r20, 0xD6	; 214
    4234:	5f 4f       	sbci	r21, 0xFF	; 255
    4236:	b6 01       	movw	r22, r12
    4238:	ce 01       	movw	r24, r28
    423a:	01 96       	adiw	r24, 0x01	; 1
    423c:	7b db       	rcall	.-2314   	; 0x3934 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>
  if (ret == 1) {
    423e:	81 30       	cpi	r24, 0x01	; 1
    4240:	91 05       	cpc	r25, r1
    4242:	c1 f4       	brne	.+48     	; 0x4274 <_ZN11EthernetUDP11beginPacketEPKcj+0x96>
    return beginPacket(remote_addr, port);
    4244:	d8 01       	movw	r26, r16
    4246:	ed 91       	ld	r30, X+
    4248:	fc 91       	ld	r31, X
    424a:	04 88       	ldd	r0, Z+20	; 0x14
    424c:	f5 89       	ldd	r31, Z+21	; 0x15
    424e:	e0 2d       	mov	r30, r0
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    4250:	8d ef       	ldi	r24, 0xFD	; 253
    4252:	97 e0       	ldi	r25, 0x07	; 7
    4254:	9d a3       	std	Y+37, r25	; 0x25
    4256:	8c a3       	std	Y+36, r24	; 0x24
    4258:	8c a5       	ldd	r24, Y+44	; 0x2c
    425a:	9d a5       	ldd	r25, Y+45	; 0x2d
    425c:	ae a5       	ldd	r26, Y+46	; 0x2e
    425e:	bf a5       	ldd	r27, Y+47	; 0x2f
    4260:	8e a3       	std	Y+38, r24	; 0x26
    4262:	9f a3       	std	Y+39, r25	; 0x27
    4264:	a8 a7       	std	Y+40, r26	; 0x28
    4266:	b9 a7       	std	Y+41, r27	; 0x29
    4268:	a7 01       	movw	r20, r14
    426a:	be 01       	movw	r22, r28
    426c:	6c 5d       	subi	r22, 0xDC	; 220
    426e:	7f 4f       	sbci	r23, 0xFF	; 255
    4270:	c8 01       	movw	r24, r16
    4272:	09 95       	icall
  } else {
    return ret;
  }
}
    4274:	af 96       	adiw	r28, 0x2f	; 47
    4276:	0f b6       	in	r0, 0x3f	; 63
    4278:	f8 94       	cli
    427a:	de bf       	out	0x3e, r29	; 62
    427c:	0f be       	out	0x3f, r0	; 63
    427e:	cd bf       	out	0x3d, r28	; 61
    4280:	df 91       	pop	r29
    4282:	cf 91       	pop	r28
    4284:	1f 91       	pop	r17
    4286:	0f 91       	pop	r16
    4288:	ff 90       	pop	r15
    428a:	ef 90       	pop	r14
    428c:	df 90       	pop	r13
    428e:	cf 90       	pop	r12
    4290:	08 95       	ret

00004292 <_GLOBAL__sub_I__ZN11EthernetUDPC2Ev>:

  while (_remaining)
  {
    read();
  }
}
    4292:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    4294:	00 e0       	ldi	r16, 0x00	; 0
    4296:	20 e0       	ldi	r18, 0x00	; 0
    4298:	40 e0       	ldi	r20, 0x00	; 0
    429a:	60 e0       	ldi	r22, 0x00	; 0
    429c:	88 ea       	ldi	r24, 0xA8	; 168
    429e:	99 e0       	ldi	r25, 0x09	; 9
    42a0:	0e 94 a1 2d 	call	0x5b42	; 0x5b42 <_ZN9IPAddressC1Ehhhh>
    42a4:	0f 91       	pop	r16
    42a6:	08 95       	ret

000042a8 <_ZN10W5500Class11writeSnDIPREhPh>:
    }
  }

  w5500.writeSnIR(s, SnIR::SEND_OK);
  return ret;
}
    42a8:	ab 01       	movw	r20, r22
    42aa:	82 95       	swap	r24
    42ac:	88 0f       	add	r24, r24
    42ae:	80 7e       	andi	r24, 0xE0	; 224
    42b0:	6c e0       	ldi	r22, 0x0C	; 12
    42b2:	68 0f       	add	r22, r24
    42b4:	24 e0       	ldi	r18, 0x04	; 4
    42b6:	30 e0       	ldi	r19, 0x00	; 0
    42b8:	8c e0       	ldi	r24, 0x0C	; 12
    42ba:	90 e0       	ldi	r25, 0x00	; 0
    42bc:	00 c2       	rjmp	.+1024   	; 0x46be <_ZN10W5500Class5writeEjhPKhj>

000042be <_ZN10W5500Class6readSnEhj>:
    42be:	9b 01       	movw	r18, r22
    42c0:	82 95       	swap	r24
    42c2:	88 0f       	add	r24, r24
    42c4:	80 7e       	andi	r24, 0xE0	; 224
    42c6:	68 e0       	ldi	r22, 0x08	; 8
    42c8:	68 0f       	add	r22, r24
    42ca:	c9 01       	movw	r24, r18
    42cc:	24 c2       	rjmp	.+1096   	; 0x4716 <_ZN10W5500Class4readEjh>

000042ce <_ZN10W5500Class8readSnIREh>:
    42ce:	62 e0       	ldi	r22, 0x02	; 2
    42d0:	70 e0       	ldi	r23, 0x00	; 0
    42d2:	f5 cf       	rjmp	.-22     	; 0x42be <_ZN10W5500Class6readSnEhj>

000042d4 <_ZN10W5500Class7writeSnEhjh>:
    42d4:	9b 01       	movw	r18, r22
    42d6:	82 95       	swap	r24
    42d8:	88 0f       	add	r24, r24
    42da:	80 7e       	andi	r24, 0xE0	; 224
    42dc:	6c e0       	ldi	r22, 0x0C	; 12
    42de:	68 0f       	add	r22, r24
    42e0:	c9 01       	movw	r24, r18
    42e2:	cf c1       	rjmp	.+926    	; 0x4682 <_ZN10W5500Class5writeEjhh>

000042e4 <_ZN10W5500Class11writeSnPORTEhj>:
    42e4:	cf 93       	push	r28
    42e6:	df 93       	push	r29
    42e8:	c8 2f       	mov	r28, r24
    42ea:	d6 2f       	mov	r29, r22
    42ec:	47 2f       	mov	r20, r23
    42ee:	64 e0       	ldi	r22, 0x04	; 4
    42f0:	70 e0       	ldi	r23, 0x00	; 0
    42f2:	f0 df       	rcall	.-32     	; 0x42d4 <_ZN10W5500Class7writeSnEhjh>
    42f4:	4d 2f       	mov	r20, r29
    42f6:	65 e0       	ldi	r22, 0x05	; 5
    42f8:	70 e0       	ldi	r23, 0x00	; 0
    42fa:	8c 2f       	mov	r24, r28
    42fc:	df 91       	pop	r29
    42fe:	cf 91       	pop	r28
    4300:	e9 cf       	rjmp	.-46     	; 0x42d4 <_ZN10W5500Class7writeSnEhjh>

00004302 <_ZN10W5500Class9writeSnIREhh>:
    4302:	46 2f       	mov	r20, r22
    4304:	62 e0       	ldi	r22, 0x02	; 2
    4306:	70 e0       	ldi	r23, 0x00	; 0
    4308:	e5 cf       	rjmp	.-54     	; 0x42d4 <_ZN10W5500Class7writeSnEhjh>

0000430a <_ZN10W5500Class12writeSnDPORTEhj>:
    430a:	cf 93       	push	r28
    430c:	df 93       	push	r29
    430e:	c8 2f       	mov	r28, r24
    4310:	d6 2f       	mov	r29, r22
    4312:	47 2f       	mov	r20, r23
    4314:	60 e1       	ldi	r22, 0x10	; 16
    4316:	70 e0       	ldi	r23, 0x00	; 0
    4318:	dd df       	rcall	.-70     	; 0x42d4 <_ZN10W5500Class7writeSnEhjh>
    431a:	4d 2f       	mov	r20, r29
    431c:	61 e1       	ldi	r22, 0x11	; 17
    431e:	70 e0       	ldi	r23, 0x00	; 0
    4320:	8c 2f       	mov	r24, r28
    4322:	df 91       	pop	r29
    4324:	cf 91       	pop	r28
    4326:	d6 cf       	rjmp	.-84     	; 0x42d4 <_ZN10W5500Class7writeSnEhjh>

00004328 <_Z5closeh>:
    4328:	cf 93       	push	r28
    432a:	c8 2f       	mov	r28, r24
    432c:	40 e1       	ldi	r20, 0x10	; 16
    432e:	68 2f       	mov	r22, r24
    4330:	83 eb       	ldi	r24, 0xB3	; 179
    4332:	99 e0       	ldi	r25, 0x09	; 9
    4334:	70 d3       	rcall	.+1760   	; 0x4a16 <_ZN10W5500Class9execCmdSnEh7SockCMD>
    4336:	6f ef       	ldi	r22, 0xFF	; 255
    4338:	8c 2f       	mov	r24, r28
    433a:	cf 91       	pop	r28
    433c:	e2 cf       	rjmp	.-60     	; 0x4302 <_ZN10W5500Class9writeSnIREhh>

0000433e <_Z6sockethhjh>:
    433e:	ff 92       	push	r15
    4340:	0f 93       	push	r16
    4342:	1f 93       	push	r17
    4344:	cf 93       	push	r28
    4346:	df 93       	push	r29
    4348:	9f ef       	ldi	r25, 0xFF	; 255
    434a:	96 0f       	add	r25, r22
    434c:	95 30       	cpi	r25, 0x05	; 5
    434e:	18 f5       	brcc	.+70     	; 0x4396 <_Z6sockethhjh+0x58>
    4350:	d2 2f       	mov	r29, r18
    4352:	8a 01       	movw	r16, r20
    4354:	f6 2e       	mov	r15, r22
    4356:	c8 2f       	mov	r28, r24
    4358:	e7 df       	rcall	.-50     	; 0x4328 <_Z5closeh>
    435a:	4f 2d       	mov	r20, r15
    435c:	4d 2b       	or	r20, r29
    435e:	60 e0       	ldi	r22, 0x00	; 0
    4360:	70 e0       	ldi	r23, 0x00	; 0
    4362:	8c 2f       	mov	r24, r28
    4364:	b7 df       	rcall	.-146    	; 0x42d4 <_ZN10W5500Class7writeSnEhjh>
    4366:	01 15       	cp	r16, r1
    4368:	11 05       	cpc	r17, r1
    436a:	11 f0       	breq	.+4      	; 0x4370 <_Z6sockethhjh+0x32>
    436c:	b8 01       	movw	r22, r16
    436e:	0a c0       	rjmp	.+20     	; 0x4384 <_Z6sockethhjh+0x46>
    4370:	60 91 ae 09 	lds	r22, 0x09AE	; 0x8009ae <_ZL10local_port>
    4374:	70 91 af 09 	lds	r23, 0x09AF	; 0x8009af <_ZL10local_port+0x1>
    4378:	6f 5f       	subi	r22, 0xFF	; 255
    437a:	7f 4f       	sbci	r23, 0xFF	; 255
    437c:	70 93 af 09 	sts	0x09AF, r23	; 0x8009af <_ZL10local_port+0x1>
    4380:	60 93 ae 09 	sts	0x09AE, r22	; 0x8009ae <_ZL10local_port>
    4384:	8c 2f       	mov	r24, r28
    4386:	ae df       	rcall	.-164    	; 0x42e4 <_ZN10W5500Class11writeSnPORTEhj>
    4388:	41 e0       	ldi	r20, 0x01	; 1
    438a:	6c 2f       	mov	r22, r28
    438c:	83 eb       	ldi	r24, 0xB3	; 179
    438e:	99 e0       	ldi	r25, 0x09	; 9
    4390:	42 d3       	rcall	.+1668   	; 0x4a16 <_ZN10W5500Class9execCmdSnEh7SockCMD>
    4392:	81 e0       	ldi	r24, 0x01	; 1
    4394:	01 c0       	rjmp	.+2      	; 0x4398 <_Z6sockethhjh+0x5a>
    4396:	80 e0       	ldi	r24, 0x00	; 0
    4398:	df 91       	pop	r29
    439a:	cf 91       	pop	r28
    439c:	1f 91       	pop	r17
    439e:	0f 91       	pop	r16
    43a0:	ff 90       	pop	r15
    43a2:	08 95       	ret

000043a4 <_Z7connecthPhj>:
    43a4:	0f 93       	push	r16
    43a6:	1f 93       	push	r17
    43a8:	cf 93       	push	r28
    43aa:	fb 01       	movw	r30, r22
    43ac:	90 81       	ld	r25, Z
    43ae:	9f 3f       	cpi	r25, 0xFF	; 255
    43b0:	51 f4       	brne	.+20     	; 0x43c6 <_Z7connecthPhj+0x22>
    43b2:	91 81       	ldd	r25, Z+1	; 0x01
    43b4:	9f 3f       	cpi	r25, 0xFF	; 255
    43b6:	91 f4       	brne	.+36     	; 0x43dc <_Z7connecthPhj+0x38>
    43b8:	92 81       	ldd	r25, Z+2	; 0x02
    43ba:	9f 3f       	cpi	r25, 0xFF	; 255
    43bc:	79 f4       	brne	.+30     	; 0x43dc <_Z7connecthPhj+0x38>
    43be:	93 81       	ldd	r25, Z+3	; 0x03
    43c0:	9f 3f       	cpi	r25, 0xFF	; 255
    43c2:	61 f4       	brne	.+24     	; 0x43dc <_Z7connecthPhj+0x38>
    43c4:	1c c0       	rjmp	.+56     	; 0x43fe <_Z7connecthPhj+0x5a>
    43c6:	91 11       	cpse	r25, r1
    43c8:	09 c0       	rjmp	.+18     	; 0x43dc <_Z7connecthPhj+0x38>
    43ca:	91 81       	ldd	r25, Z+1	; 0x01
    43cc:	91 11       	cpse	r25, r1
    43ce:	06 c0       	rjmp	.+12     	; 0x43dc <_Z7connecthPhj+0x38>
    43d0:	92 81       	ldd	r25, Z+2	; 0x02
    43d2:	91 11       	cpse	r25, r1
    43d4:	03 c0       	rjmp	.+6      	; 0x43dc <_Z7connecthPhj+0x38>
    43d6:	93 81       	ldd	r25, Z+3	; 0x03
    43d8:	99 23       	and	r25, r25
    43da:	91 f0       	breq	.+36     	; 0x4400 <_Z7connecthPhj+0x5c>
    43dc:	41 15       	cp	r20, r1
    43de:	51 05       	cpc	r21, r1
    43e0:	71 f0       	breq	.+28     	; 0x43fe <_Z7connecthPhj+0x5a>
    43e2:	8a 01       	movw	r16, r20
    43e4:	bf 01       	movw	r22, r30
    43e6:	c8 2f       	mov	r28, r24
    43e8:	5f df       	rcall	.-322    	; 0x42a8 <_ZN10W5500Class11writeSnDIPREhPh>
    43ea:	b8 01       	movw	r22, r16
    43ec:	8c 2f       	mov	r24, r28
    43ee:	8d df       	rcall	.-230    	; 0x430a <_ZN10W5500Class12writeSnDPORTEhj>
    43f0:	44 e0       	ldi	r20, 0x04	; 4
    43f2:	6c 2f       	mov	r22, r28
    43f4:	83 eb       	ldi	r24, 0xB3	; 179
    43f6:	99 e0       	ldi	r25, 0x09	; 9
    43f8:	0e d3       	rcall	.+1564   	; 0x4a16 <_ZN10W5500Class9execCmdSnEh7SockCMD>
    43fa:	91 e0       	ldi	r25, 0x01	; 1
    43fc:	01 c0       	rjmp	.+2      	; 0x4400 <_Z7connecthPhj+0x5c>
    43fe:	90 e0       	ldi	r25, 0x00	; 0
    4400:	89 2f       	mov	r24, r25
    4402:	cf 91       	pop	r28
    4404:	1f 91       	pop	r17
    4406:	0f 91       	pop	r16
    4408:	08 95       	ret

0000440a <_Z10disconnecth>:
    440a:	48 e0       	ldi	r20, 0x08	; 8
    440c:	68 2f       	mov	r22, r24
    440e:	83 eb       	ldi	r24, 0xB3	; 179
    4410:	99 e0       	ldi	r25, 0x09	; 9
    4412:	01 c3       	rjmp	.+1538   	; 0x4a16 <_ZN10W5500Class9execCmdSnEh7SockCMD>

00004414 <_Z4sendhPKhj>:
    4414:	cf 92       	push	r12
    4416:	df 92       	push	r13
    4418:	ef 92       	push	r14
    441a:	ff 92       	push	r15
    441c:	0f 93       	push	r16
    441e:	1f 93       	push	r17
    4420:	cf 93       	push	r28
    4422:	c8 2f       	mov	r28, r24
    4424:	7b 01       	movw	r14, r22
    4426:	8a 01       	movw	r16, r20
    4428:	41 30       	cpi	r20, 0x01	; 1
    442a:	58 40       	sbci	r21, 0x08	; 8
    442c:	10 f0       	brcs	.+4      	; 0x4432 <_Z4sendhPKhj+0x1e>
    442e:	00 e0       	ldi	r16, 0x00	; 0
    4430:	18 e0       	ldi	r17, 0x08	; 8
    4432:	6c 2f       	mov	r22, r28
    4434:	83 eb       	ldi	r24, 0xB3	; 179
    4436:	99 e0       	ldi	r25, 0x09	; 9
    4438:	cd d1       	rcall	.+922    	; 0x47d4 <_ZN10W5500Class13getTXFreeSizeEh>
    443a:	6c 01       	movw	r12, r24
    443c:	63 e0       	ldi	r22, 0x03	; 3
    443e:	70 e0       	ldi	r23, 0x00	; 0
    4440:	8c 2f       	mov	r24, r28
    4442:	3d df       	rcall	.-390    	; 0x42be <_ZN10W5500Class6readSnEhj>
    4444:	87 31       	cpi	r24, 0x17	; 23
    4446:	11 f0       	breq	.+4      	; 0x444c <_Z4sendhPKhj+0x38>
    4448:	8c 31       	cpi	r24, 0x1C	; 28
    444a:	21 f4       	brne	.+8      	; 0x4454 <_Z4sendhPKhj+0x40>
    444c:	c0 16       	cp	r12, r16
    444e:	d1 06       	cpc	r13, r17
    4450:	80 f3       	brcs	.-32     	; 0x4432 <_Z4sendhPKhj+0x1e>
    4452:	02 c0       	rjmp	.+4      	; 0x4458 <_Z4sendhPKhj+0x44>
    4454:	00 e0       	ldi	r16, 0x00	; 0
    4456:	10 e0       	ldi	r17, 0x00	; 0
    4458:	98 01       	movw	r18, r16
    445a:	a7 01       	movw	r20, r14
    445c:	6c 2f       	mov	r22, r28
    445e:	83 eb       	ldi	r24, 0xB3	; 179
    4460:	99 e0       	ldi	r25, 0x09	; 9
    4462:	3d d2       	rcall	.+1146   	; 0x48de <_ZN10W5500Class20send_data_processingEhPKhj>
    4464:	40 e2       	ldi	r20, 0x20	; 32
    4466:	6c 2f       	mov	r22, r28
    4468:	83 eb       	ldi	r24, 0xB3	; 179
    446a:	99 e0       	ldi	r25, 0x09	; 9
    446c:	d4 d2       	rcall	.+1448   	; 0x4a16 <_ZN10W5500Class9execCmdSnEh7SockCMD>
    446e:	8c 2f       	mov	r24, r28
    4470:	2e df       	rcall	.-420    	; 0x42ce <_ZN10W5500Class8readSnIREh>
    4472:	84 fd       	sbrc	r24, 4
    4474:	0b c0       	rjmp	.+22     	; 0x448c <_Z4sendhPKhj+0x78>
    4476:	63 e0       	ldi	r22, 0x03	; 3
    4478:	70 e0       	ldi	r23, 0x00	; 0
    447a:	8c 2f       	mov	r24, r28
    447c:	20 df       	rcall	.-448    	; 0x42be <_ZN10W5500Class6readSnEhj>
    447e:	81 11       	cpse	r24, r1
    4480:	f6 cf       	rjmp	.-20     	; 0x446e <_Z4sendhPKhj+0x5a>
    4482:	8c 2f       	mov	r24, r28
    4484:	51 df       	rcall	.-350    	; 0x4328 <_Z5closeh>
    4486:	80 e0       	ldi	r24, 0x00	; 0
    4488:	90 e0       	ldi	r25, 0x00	; 0
    448a:	04 c0       	rjmp	.+8      	; 0x4494 <_Z4sendhPKhj+0x80>
    448c:	60 e1       	ldi	r22, 0x10	; 16
    448e:	8c 2f       	mov	r24, r28
    4490:	38 df       	rcall	.-400    	; 0x4302 <_ZN10W5500Class9writeSnIREhh>
    4492:	c8 01       	movw	r24, r16
    4494:	cf 91       	pop	r28
    4496:	1f 91       	pop	r17
    4498:	0f 91       	pop	r16
    449a:	ff 90       	pop	r15
    449c:	ef 90       	pop	r14
    449e:	df 90       	pop	r13
    44a0:	cf 90       	pop	r12
    44a2:	08 95       	ret

000044a4 <_Z4recvhPhi>:
    44a4:	cf 92       	push	r12
    44a6:	df 92       	push	r13
    44a8:	ef 92       	push	r14
    44aa:	ff 92       	push	r15
    44ac:	0f 93       	push	r16
    44ae:	1f 93       	push	r17
    44b0:	cf 93       	push	r28
    44b2:	df 93       	push	r29
    44b4:	18 2f       	mov	r17, r24
    44b6:	6b 01       	movw	r12, r22
    44b8:	7a 01       	movw	r14, r20
    44ba:	68 2f       	mov	r22, r24
    44bc:	83 eb       	ldi	r24, 0xB3	; 179
    44be:	99 e0       	ldi	r25, 0x09	; 9
    44c0:	ba d1       	rcall	.+884    	; 0x4836 <_ZN10W5500Class17getRXReceivedSizeEh>
    44c2:	ec 01       	movw	r28, r24
    44c4:	00 97       	sbiw	r24, 0x00	; 0
    44c6:	91 f4       	brne	.+36     	; 0x44ec <_Z4recvhPhi+0x48>
    44c8:	63 e0       	ldi	r22, 0x03	; 3
    44ca:	70 e0       	ldi	r23, 0x00	; 0
    44cc:	81 2f       	mov	r24, r17
    44ce:	f7 de       	rcall	.-530    	; 0x42be <_ZN10W5500Class6readSnEhj>
    44d0:	84 31       	cpi	r24, 0x14	; 20
    44d2:	f9 f0       	breq	.+62     	; 0x4512 <_Z4recvhPhi+0x6e>
    44d4:	88 23       	and	r24, r24
    44d6:	e9 f0       	breq	.+58     	; 0x4512 <_Z4recvhPhi+0x6e>
    44d8:	c1 e0       	ldi	r28, 0x01	; 1
    44da:	d0 e0       	ldi	r29, 0x00	; 0
    44dc:	8c 31       	cpi	r24, 0x1C	; 28
    44de:	11 f4       	brne	.+4      	; 0x44e4 <_Z4recvhPhi+0x40>
    44e0:	c0 e0       	ldi	r28, 0x00	; 0
    44e2:	d0 e0       	ldi	r29, 0x00	; 0
    44e4:	d1 95       	neg	r29
    44e6:	c1 95       	neg	r28
    44e8:	d1 09       	sbc	r29, r1
    44ea:	13 c0       	rjmp	.+38     	; 0x4512 <_Z4recvhPhi+0x6e>
    44ec:	e8 16       	cp	r14, r24
    44ee:	f9 06       	cpc	r15, r25
    44f0:	0c f4       	brge	.+2      	; 0x44f4 <_Z4recvhPhi+0x50>
    44f2:	e7 01       	movw	r28, r14
    44f4:	1c 16       	cp	r1, r28
    44f6:	1d 06       	cpc	r1, r29
    44f8:	64 f4       	brge	.+24     	; 0x4512 <_Z4recvhPhi+0x6e>
    44fa:	00 e0       	ldi	r16, 0x00	; 0
    44fc:	9e 01       	movw	r18, r28
    44fe:	a6 01       	movw	r20, r12
    4500:	61 2f       	mov	r22, r17
    4502:	83 eb       	ldi	r24, 0xB3	; 179
    4504:	99 e0       	ldi	r25, 0x09	; 9
    4506:	3a d2       	rcall	.+1140   	; 0x497c <_ZN10W5500Class20recv_data_processingEhPhjh>
    4508:	40 e4       	ldi	r20, 0x40	; 64
    450a:	61 2f       	mov	r22, r17
    450c:	83 eb       	ldi	r24, 0xB3	; 179
    450e:	99 e0       	ldi	r25, 0x09	; 9
    4510:	82 d2       	rcall	.+1284   	; 0x4a16 <_ZN10W5500Class9execCmdSnEh7SockCMD>
    4512:	ce 01       	movw	r24, r28
    4514:	df 91       	pop	r29
    4516:	cf 91       	pop	r28
    4518:	1f 91       	pop	r17
    451a:	0f 91       	pop	r16
    451c:	ff 90       	pop	r15
    451e:	ef 90       	pop	r14
    4520:	df 90       	pop	r13
    4522:	cf 90       	pop	r12
    4524:	08 95       	ret

00004526 <_Z4peekhPh>:
    4526:	0f 93       	push	r16
    4528:	ab 01       	movw	r20, r22
    452a:	01 e0       	ldi	r16, 0x01	; 1
    452c:	21 e0       	ldi	r18, 0x01	; 1
    452e:	30 e0       	ldi	r19, 0x00	; 0
    4530:	68 2f       	mov	r22, r24
    4532:	83 eb       	ldi	r24, 0xB3	; 179
    4534:	99 e0       	ldi	r25, 0x09	; 9
    4536:	22 d2       	rcall	.+1092   	; 0x497c <_ZN10W5500Class20recv_data_processingEhPhjh>
    4538:	81 e0       	ldi	r24, 0x01	; 1
    453a:	90 e0       	ldi	r25, 0x00	; 0
    453c:	0f 91       	pop	r16
    453e:	08 95       	ret

00004540 <_Z5flushh>:
    4540:	08 95       	ret

00004542 <_Z10bufferDatahjPKhj>:

uint16_t bufferData(SOCKET s, uint16_t offset, const uint8_t* buf, uint16_t len)
{
    4542:	af 92       	push	r10
    4544:	bf 92       	push	r11
    4546:	cf 92       	push	r12
    4548:	df 92       	push	r13
    454a:	ff 92       	push	r15
    454c:	0f 93       	push	r16
    454e:	1f 93       	push	r17
    4550:	cf 93       	push	r28
    4552:	df 93       	push	r29
    4554:	f8 2e       	mov	r15, r24
    4556:	6b 01       	movw	r12, r22
    4558:	5a 01       	movw	r10, r20
    455a:	e9 01       	movw	r28, r18
  uint16_t ret =0;
  if (len > w5500.getTXFreeSize(s))
    455c:	68 2f       	mov	r22, r24
    455e:	83 eb       	ldi	r24, 0xB3	; 179
    4560:	99 e0       	ldi	r25, 0x09	; 9
    4562:	38 d1       	rcall	.+624    	; 0x47d4 <_ZN10W5500Class13getTXFreeSizeEh>
    4564:	8c 17       	cp	r24, r28
    4566:	9d 07       	cpc	r25, r29
    4568:	28 f4       	brcc	.+10     	; 0x4574 <_Z10bufferDatahjPKhj+0x32>
  {
    ret = w5500.getTXFreeSize(s); // check size not to exceed MAX size.
    456a:	6f 2d       	mov	r22, r15
    456c:	83 eb       	ldi	r24, 0xB3	; 179
    456e:	99 e0       	ldi	r25, 0x09	; 9
    4570:	31 d1       	rcall	.+610    	; 0x47d4 <_ZN10W5500Class13getTXFreeSizeEh>
    4572:	ec 01       	movw	r28, r24
  }
  else
  {
    ret = len;
  }
  w5500.send_data_processing_offset(s, offset, buf, ret);
    4574:	8e 01       	movw	r16, r28
    4576:	95 01       	movw	r18, r10
    4578:	a6 01       	movw	r20, r12
    457a:	6f 2d       	mov	r22, r15
    457c:	83 eb       	ldi	r24, 0xB3	; 179
    457e:	99 e0       	ldi	r25, 0x09	; 9
    4580:	74 d1       	rcall	.+744    	; 0x486a <_ZN10W5500Class27send_data_processing_offsetEhjPKhj>
  return ret;
}
    4582:	ce 01       	movw	r24, r28
    4584:	df 91       	pop	r29
    4586:	cf 91       	pop	r28
    4588:	1f 91       	pop	r17
    458a:	0f 91       	pop	r16
    458c:	ff 90       	pop	r15
    458e:	df 90       	pop	r13
    4590:	cf 90       	pop	r12
    4592:	bf 90       	pop	r11
    4594:	af 90       	pop	r10
    4596:	08 95       	ret

00004598 <_Z8startUDPhPhj>:

int startUDP(SOCKET s, uint8_t* addr, uint16_t port)
{
    4598:	0f 93       	push	r16
    459a:	1f 93       	push	r17
    459c:	cf 93       	push	r28
    459e:	fb 01       	movw	r30, r22
  if
    45a0:	90 81       	ld	r25, Z
    45a2:	91 11       	cpse	r25, r1
    45a4:	09 c0       	rjmp	.+18     	; 0x45b8 <_Z8startUDPhPhj+0x20>
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
    45a6:	91 81       	ldd	r25, Z+1	; 0x01
    45a8:	91 11       	cpse	r25, r1
    45aa:	06 c0       	rjmp	.+12     	; 0x45b8 <_Z8startUDPhPhj+0x20>
    45ac:	92 81       	ldd	r25, Z+2	; 0x02
    45ae:	91 11       	cpse	r25, r1
    45b0:	03 c0       	rjmp	.+6      	; 0x45b8 <_Z8startUDPhPhj+0x20>
    45b2:	93 81       	ldd	r25, Z+3	; 0x03
    45b4:	99 23       	and	r25, r25
    45b6:	69 f0       	breq	.+26     	; 0x45d2 <_Z8startUDPhPhj+0x3a>
    45b8:	41 15       	cp	r20, r1
    45ba:	51 05       	cpc	r21, r1
    45bc:	51 f0       	breq	.+20     	; 0x45d2 <_Z8startUDPhPhj+0x3a>
    45be:	8a 01       	movw	r16, r20
    45c0:	bf 01       	movw	r22, r30
    45c2:	c8 2f       	mov	r28, r24
  {
    return 0;
  }
  else
  {
    w5500.writeSnDIPR(s, addr);
    45c4:	71 de       	rcall	.-798    	; 0x42a8 <_ZN10W5500Class11writeSnDIPREhPh>
    w5500.writeSnDPORT(s, port);
    45c6:	b8 01       	movw	r22, r16
    45c8:	8c 2f       	mov	r24, r28
    45ca:	9f de       	rcall	.-706    	; 0x430a <_ZN10W5500Class12writeSnDPORTEhj>
    return 1;
    45cc:	81 e0       	ldi	r24, 0x01	; 1
    45ce:	90 e0       	ldi	r25, 0x00	; 0
    45d0:	02 c0       	rjmp	.+4      	; 0x45d6 <_Z8startUDPhPhj+0x3e>
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
     ((port == 0x00))
    ) 
  {
    return 0;
    45d2:	80 e0       	ldi	r24, 0x00	; 0
    45d4:	90 e0       	ldi	r25, 0x00	; 0
  {
    w5500.writeSnDIPR(s, addr);
    w5500.writeSnDPORT(s, port);
    return 1;
  }
}
    45d6:	cf 91       	pop	r28
    45d8:	1f 91       	pop	r17
    45da:	0f 91       	pop	r16
    45dc:	08 95       	ret

000045de <_Z7sendUDPh>:

int sendUDP(SOCKET s)
{
    45de:	cf 93       	push	r28
    45e0:	c8 2f       	mov	r28, r24
  w5500.execCmdSn(s, Sock_SEND);
    45e2:	40 e2       	ldi	r20, 0x20	; 32
    45e4:	68 2f       	mov	r22, r24
    45e6:	83 eb       	ldi	r24, 0xB3	; 179
    45e8:	99 e0       	ldi	r25, 0x09	; 9
    45ea:	15 d2       	rcall	.+1066   	; 0x4a16 <_ZN10W5500Class9execCmdSnEh7SockCMD>
		
  /* +2008.01 bj */
  while ( (w5500.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
    45ec:	8c 2f       	mov	r24, r28
    45ee:	6f de       	rcall	.-802    	; 0x42ce <_ZN10W5500Class8readSnIREh>
    45f0:	84 fd       	sbrc	r24, 4
    45f2:	0a c0       	rjmp	.+20     	; 0x4608 <_Z7sendUDPh+0x2a>
  {
    if (w5500.readSnIR(s) & SnIR::TIMEOUT)
    45f4:	8c 2f       	mov	r24, r28
    45f6:	6b de       	rcall	.-810    	; 0x42ce <_ZN10W5500Class8readSnIREh>
    45f8:	83 ff       	sbrs	r24, 3
    45fa:	f8 cf       	rjmp	.-16     	; 0x45ec <_Z7sendUDPh+0xe>
    {
      /* +2008.01 [bj]: clear interrupt */
      w5500.writeSnIR(s, (SnIR::SEND_OK|SnIR::TIMEOUT));
    45fc:	68 e1       	ldi	r22, 0x18	; 24
    45fe:	8c 2f       	mov	r24, r28
    4600:	80 de       	rcall	.-768    	; 0x4302 <_ZN10W5500Class9writeSnIREhh>
    4602:	80 e0       	ldi	r24, 0x00	; 0
      return 0;
    4604:	90 e0       	ldi	r25, 0x00	; 0
    4606:	05 c0       	rjmp	.+10     	; 0x4612 <_Z7sendUDPh+0x34>
    }
  }

  /* +2008.01 bj */	
  w5500.writeSnIR(s, SnIR::SEND_OK);
    4608:	60 e1       	ldi	r22, 0x10	; 16
    460a:	8c 2f       	mov	r24, r28
    460c:	7a de       	rcall	.-780    	; 0x4302 <_ZN10W5500Class9writeSnIREhh>
    460e:	81 e0       	ldi	r24, 0x01	; 1

  /* Sent ok */
  return 1;
    4610:	90 e0       	ldi	r25, 0x00	; 0
    4612:	cf 91       	pop	r28
}
    4614:	08 95       	ret

00004616 <_ZN8SPIClass16beginTransactionE11SPISettings>:
    4616:	20 91 b6 09 	lds	r18, 0x09B6	; 0x8009b6 <_ZN8SPIClass13interruptModeE>
    uint8_t _data = SPI.transfer(0);
    resetSS();
    SPI.endTransaction();

    return _data;
}
    461a:	22 23       	and	r18, r18
    461c:	99 f0       	breq	.+38     	; 0x4644 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    461e:	4f b7       	in	r20, 0x3f	; 63
    4620:	f8 94       	cli
    4622:	20 91 b6 09 	lds	r18, 0x09B6	; 0x8009b6 <_ZN8SPIClass13interruptModeE>
    4626:	21 30       	cpi	r18, 0x01	; 1
    4628:	59 f4       	brne	.+22     	; 0x4640 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
    462a:	2d b3       	in	r18, 0x1d	; 29
    462c:	20 93 b4 09 	sts	0x09B4, r18	; 0x8009b4 <_ZN8SPIClass13interruptSaveE>
    4630:	3d b3       	in	r19, 0x1d	; 29
    4632:	20 91 b5 09 	lds	r18, 0x09B5	; 0x8009b5 <_ZN8SPIClass13interruptMaskE>
    4636:	20 95       	com	r18
    4638:	23 23       	and	r18, r19
    463a:	2d bb       	out	0x1d, r18	; 29
    463c:	4f bf       	out	0x3f, r20	; 63
    463e:	02 c0       	rjmp	.+4      	; 0x4644 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    4640:	40 93 b4 09 	sts	0x09B4, r20	; 0x8009b4 <_ZN8SPIClass13interruptSaveE>
    4644:	8c bd       	out	0x2c, r24	; 44
    4646:	9d bd       	out	0x2d, r25	; 45
    4648:	08 95       	ret

0000464a <_ZN8SPIClass8transferEh>:
    464a:	8e bd       	out	0x2e, r24	; 46
    464c:	00 00       	nop
    464e:	0d b4       	in	r0, 0x2d	; 45
    4650:	07 fe       	sbrs	r0, 7
    4652:	fd cf       	rjmp	.-6      	; 0x464e <_ZN8SPIClass8transferEh+0x4>
    4654:	8e b5       	in	r24, 0x2e	; 46
    4656:	08 95       	ret

00004658 <_ZN8SPIClass14endTransactionEv>:
    4658:	80 91 b6 09 	lds	r24, 0x09B6	; 0x8009b6 <_ZN8SPIClass13interruptModeE>
    465c:	88 23       	and	r24, r24
    465e:	61 f0       	breq	.+24     	; 0x4678 <_ZN8SPIClass14endTransactionEv+0x20>
    4660:	9f b7       	in	r25, 0x3f	; 63
    4662:	f8 94       	cli
    4664:	20 91 b6 09 	lds	r18, 0x09B6	; 0x8009b6 <_ZN8SPIClass13interruptModeE>
    4668:	80 91 b4 09 	lds	r24, 0x09B4	; 0x8009b4 <_ZN8SPIClass13interruptSaveE>
    466c:	21 30       	cpi	r18, 0x01	; 1
    466e:	19 f4       	brne	.+6      	; 0x4676 <_ZN8SPIClass14endTransactionEv+0x1e>
    4670:	8d bb       	out	0x1d, r24	; 29
    4672:	9f bf       	out	0x3f, r25	; 63
    4674:	08 95       	ret
    4676:	8f bf       	out	0x3f, r24	; 63
    4678:	08 95       	ret

0000467a <_ZN10W5500Class5setSSEv>:
    467a:	44 98       	cbi	0x08, 4	; 8
    467c:	08 95       	ret

0000467e <_ZN10W5500Class7resetSSEv>:
    467e:	44 9a       	sbi	0x08, 4	; 8
    4680:	08 95       	ret

00004682 <_ZN10W5500Class5writeEjhh>:
    4682:	0f 93       	push	r16
    4684:	1f 93       	push	r17
    4686:	cf 93       	push	r28
    4688:	df 93       	push	r29
    468a:	18 2f       	mov	r17, r24
    468c:	09 2f       	mov	r16, r25
    468e:	d6 2f       	mov	r29, r22
    4690:	c4 2f       	mov	r28, r20
    4692:	80 91 b1 09 	lds	r24, 0x09B1	; 0x8009b1 <wiznet_SPI_settings>
    4696:	90 91 b2 09 	lds	r25, 0x09B2	; 0x8009b2 <wiznet_SPI_settings+0x1>
    469a:	bd df       	rcall	.-134    	; 0x4616 <_ZN8SPIClass16beginTransactionE11SPISettings>
    469c:	ee df       	rcall	.-36     	; 0x467a <_ZN10W5500Class5setSSEv>
    469e:	80 2f       	mov	r24, r16
    46a0:	d4 df       	rcall	.-88     	; 0x464a <_ZN8SPIClass8transferEh>
    46a2:	81 2f       	mov	r24, r17
    46a4:	d2 df       	rcall	.-92     	; 0x464a <_ZN8SPIClass8transferEh>
    46a6:	8d 2f       	mov	r24, r29
    46a8:	d0 df       	rcall	.-96     	; 0x464a <_ZN8SPIClass8transferEh>
    46aa:	8c 2f       	mov	r24, r28
    46ac:	ce df       	rcall	.-100    	; 0x464a <_ZN8SPIClass8transferEh>
    46ae:	e7 df       	rcall	.-50     	; 0x467e <_ZN10W5500Class7resetSSEv>
    46b0:	d3 df       	rcall	.-90     	; 0x4658 <_ZN8SPIClass14endTransactionEv>
    46b2:	81 e0       	ldi	r24, 0x01	; 1
    46b4:	df 91       	pop	r29
    46b6:	cf 91       	pop	r28
    46b8:	1f 91       	pop	r17
    46ba:	0f 91       	pop	r16
    46bc:	08 95       	ret

000046be <_ZN10W5500Class5writeEjhPKhj>:
    46be:	df 92       	push	r13
    46c0:	ef 92       	push	r14
    46c2:	ff 92       	push	r15
    46c4:	0f 93       	push	r16
    46c6:	1f 93       	push	r17
    46c8:	cf 93       	push	r28
    46ca:	df 93       	push	r29
    46cc:	d8 2f       	mov	r29, r24
    46ce:	d9 2e       	mov	r13, r25
    46d0:	c6 2f       	mov	r28, r22
    46d2:	7a 01       	movw	r14, r20
    46d4:	89 01       	movw	r16, r18
    46d6:	80 91 b1 09 	lds	r24, 0x09B1	; 0x8009b1 <wiznet_SPI_settings>
    46da:	90 91 b2 09 	lds	r25, 0x09B2	; 0x8009b2 <wiznet_SPI_settings+0x1>
    46de:	9b df       	rcall	.-202    	; 0x4616 <_ZN8SPIClass16beginTransactionE11SPISettings>
    46e0:	cc df       	rcall	.-104    	; 0x467a <_ZN10W5500Class5setSSEv>
    46e2:	8d 2d       	mov	r24, r13
    46e4:	b2 df       	rcall	.-156    	; 0x464a <_ZN8SPIClass8transferEh>
    46e6:	8d 2f       	mov	r24, r29
    46e8:	b0 df       	rcall	.-160    	; 0x464a <_ZN8SPIClass8transferEh>
    46ea:	8c 2f       	mov	r24, r28
    46ec:	ae df       	rcall	.-164    	; 0x464a <_ZN8SPIClass8transferEh>
    46ee:	e7 01       	movw	r28, r14
    46f0:	e0 0e       	add	r14, r16
    46f2:	f1 1e       	adc	r15, r17
    46f4:	ce 15       	cp	r28, r14
    46f6:	df 05       	cpc	r29, r15
    46f8:	19 f0       	breq	.+6      	; 0x4700 <_ZN10W5500Class5writeEjhPKhj+0x42>
    46fa:	89 91       	ld	r24, Y+
    46fc:	a6 df       	rcall	.-180    	; 0x464a <_ZN8SPIClass8transferEh>
    46fe:	fa cf       	rjmp	.-12     	; 0x46f4 <_ZN10W5500Class5writeEjhPKhj+0x36>
    4700:	be df       	rcall	.-132    	; 0x467e <_ZN10W5500Class7resetSSEv>
    4702:	aa df       	rcall	.-172    	; 0x4658 <_ZN8SPIClass14endTransactionEv>
    4704:	c8 01       	movw	r24, r16
    4706:	df 91       	pop	r29
    4708:	cf 91       	pop	r28
    470a:	1f 91       	pop	r17
    470c:	0f 91       	pop	r16
    470e:	ff 90       	pop	r15
    4710:	ef 90       	pop	r14
    4712:	df 90       	pop	r13
    4714:	08 95       	ret

00004716 <_ZN10W5500Class4readEjh>:
    4716:	1f 93       	push	r17
    4718:	cf 93       	push	r28
    471a:	df 93       	push	r29
    471c:	d8 2f       	mov	r29, r24
    471e:	19 2f       	mov	r17, r25
    4720:	c6 2f       	mov	r28, r22
    4722:	80 91 b1 09 	lds	r24, 0x09B1	; 0x8009b1 <wiznet_SPI_settings>
    4726:	90 91 b2 09 	lds	r25, 0x09B2	; 0x8009b2 <wiznet_SPI_settings+0x1>
    472a:	75 df       	rcall	.-278    	; 0x4616 <_ZN8SPIClass16beginTransactionE11SPISettings>
    472c:	a6 df       	rcall	.-180    	; 0x467a <_ZN10W5500Class5setSSEv>
    472e:	81 2f       	mov	r24, r17
    4730:	8c df       	rcall	.-232    	; 0x464a <_ZN8SPIClass8transferEh>
    4732:	8d 2f       	mov	r24, r29
    4734:	8a df       	rcall	.-236    	; 0x464a <_ZN8SPIClass8transferEh>
    4736:	8c 2f       	mov	r24, r28
    4738:	88 df       	rcall	.-240    	; 0x464a <_ZN8SPIClass8transferEh>
    473a:	80 e0       	ldi	r24, 0x00	; 0
    473c:	86 df       	rcall	.-244    	; 0x464a <_ZN8SPIClass8transferEh>
    473e:	c8 2f       	mov	r28, r24
    4740:	9e df       	rcall	.-196    	; 0x467e <_ZN10W5500Class7resetSSEv>
    4742:	8a df       	rcall	.-236    	; 0x4658 <_ZN8SPIClass14endTransactionEv>
    4744:	8c 2f       	mov	r24, r28
    4746:	df 91       	pop	r29
    4748:	cf 91       	pop	r28
    474a:	1f 91       	pop	r17
    474c:	08 95       	ret

0000474e <_ZN10W5500Class4initEh>:
    474e:	cf 93       	push	r28
    4750:	df 93       	push	r29
    4752:	60 93 b0 09 	sts	0x09B0, r22	; 0x8009b0 <SPI_CS>
    4756:	68 ee       	ldi	r22, 0xE8	; 232
    4758:	73 e0       	ldi	r23, 0x03	; 3
    475a:	80 e0       	ldi	r24, 0x00	; 0
    475c:	90 e0       	ldi	r25, 0x00	; 0
    475e:	0e 94 53 2f 	call	0x5ea6	; 0x5ea6 <delay>
    4762:	3c 9a       	sbi	0x07, 4	; 7
    4764:	10 d4       	rcall	.+2080   	; 0x4f86 <_ZN8SPIClass5beginEv>
    4766:	60 e0       	ldi	r22, 0x00	; 0
    4768:	80 e0       	ldi	r24, 0x00	; 0
    476a:	90 e0       	ldi	r25, 0x00	; 0
    476c:	d4 df       	rcall	.-88     	; 0x4716 <_ZN10W5500Class4readEjh>
    476e:	48 2f       	mov	r20, r24
    4770:	40 68       	ori	r20, 0x80	; 128
    4772:	64 e0       	ldi	r22, 0x04	; 4
    4774:	80 e0       	ldi	r24, 0x00	; 0
    4776:	90 e0       	ldi	r25, 0x00	; 0
    4778:	84 df       	rcall	.-248    	; 0x4682 <_ZN10W5500Class5writeEjhh>
    477a:	c0 e0       	ldi	r28, 0x00	; 0
    477c:	dc 2f       	mov	r29, r28
    477e:	d2 95       	swap	r29
    4780:	dd 0f       	add	r29, r29
    4782:	d0 7e       	andi	r29, 0xE0	; 224
    4784:	d4 5f       	subi	r29, 0xF4	; 244
    4786:	42 e0       	ldi	r20, 0x02	; 2
    4788:	6d 2f       	mov	r22, r29
    478a:	8e e1       	ldi	r24, 0x1E	; 30
    478c:	90 e0       	ldi	r25, 0x00	; 0
    478e:	79 df       	rcall	.-270    	; 0x4682 <_ZN10W5500Class5writeEjhh>
    4790:	42 e0       	ldi	r20, 0x02	; 2
    4792:	6d 2f       	mov	r22, r29
    4794:	8f e1       	ldi	r24, 0x1F	; 31
    4796:	90 e0       	ldi	r25, 0x00	; 0
    4798:	74 df       	rcall	.-280    	; 0x4682 <_ZN10W5500Class5writeEjhh>
    479a:	cf 5f       	subi	r28, 0xFF	; 255
    479c:	c8 30       	cpi	r28, 0x08	; 8
    479e:	71 f7       	brne	.-36     	; 0x477c <_ZN10W5500Class4initEh+0x2e>
    47a0:	df 91       	pop	r29
    47a2:	cf 91       	pop	r28
    47a4:	08 95       	ret

000047a6 <_ZN10W5500Class12readSnTX_FSREh>:
    47a6:	1f 93       	push	r17
    47a8:	cf 93       	push	r28
    47aa:	df 93       	push	r29
    47ac:	18 2f       	mov	r17, r24
    47ae:	60 e2       	ldi	r22, 0x20	; 32
    47b0:	70 e0       	ldi	r23, 0x00	; 0
    47b2:	85 dd       	rcall	.-1270   	; 0x42be <_ZN10W5500Class6readSnEhj>
    47b4:	c8 2f       	mov	r28, r24
    47b6:	d0 e0       	ldi	r29, 0x00	; 0
    47b8:	dc 2f       	mov	r29, r28
    47ba:	cc 27       	eor	r28, r28
    47bc:	61 e2       	ldi	r22, 0x21	; 33
    47be:	70 e0       	ldi	r23, 0x00	; 0
    47c0:	81 2f       	mov	r24, r17
    47c2:	7d dd       	rcall	.-1286   	; 0x42be <_ZN10W5500Class6readSnEhj>
    47c4:	9e 01       	movw	r18, r28
    47c6:	28 0f       	add	r18, r24
    47c8:	31 1d       	adc	r19, r1
    47ca:	c9 01       	movw	r24, r18
    47cc:	df 91       	pop	r29
    47ce:	cf 91       	pop	r28
    47d0:	1f 91       	pop	r17
    47d2:	08 95       	ret

000047d4 <_ZN10W5500Class13getTXFreeSizeEh>:
    47d4:	ff 92       	push	r15
    47d6:	0f 93       	push	r16
    47d8:	1f 93       	push	r17
    47da:	cf 93       	push	r28
    47dc:	df 93       	push	r29
    47de:	f6 2e       	mov	r15, r22
    47e0:	c0 e0       	ldi	r28, 0x00	; 0
    47e2:	d0 e0       	ldi	r29, 0x00	; 0
    47e4:	8f 2d       	mov	r24, r15
    47e6:	df df       	rcall	.-66     	; 0x47a6 <_ZN10W5500Class12readSnTX_FSREh>
    47e8:	8c 01       	movw	r16, r24
    47ea:	89 2b       	or	r24, r25
    47ec:	19 f0       	breq	.+6      	; 0x47f4 <_ZN10W5500Class13getTXFreeSizeEh+0x20>
    47ee:	8f 2d       	mov	r24, r15
    47f0:	da df       	rcall	.-76     	; 0x47a6 <_ZN10W5500Class12readSnTX_FSREh>
    47f2:	ec 01       	movw	r28, r24
    47f4:	c0 17       	cp	r28, r16
    47f6:	d1 07       	cpc	r29, r17
    47f8:	a9 f7       	brne	.-22     	; 0x47e4 <_ZN10W5500Class13getTXFreeSizeEh+0x10>
    47fa:	ce 01       	movw	r24, r28
    47fc:	df 91       	pop	r29
    47fe:	cf 91       	pop	r28
    4800:	1f 91       	pop	r17
    4802:	0f 91       	pop	r16
    4804:	ff 90       	pop	r15
    4806:	08 95       	ret

00004808 <_ZN10W5500Class12readSnRX_RSREh>:
    4808:	1f 93       	push	r17
    480a:	cf 93       	push	r28
    480c:	df 93       	push	r29
    480e:	18 2f       	mov	r17, r24
    4810:	66 e2       	ldi	r22, 0x26	; 38
    4812:	70 e0       	ldi	r23, 0x00	; 0
    4814:	54 dd       	rcall	.-1368   	; 0x42be <_ZN10W5500Class6readSnEhj>
    4816:	c8 2f       	mov	r28, r24
    4818:	d0 e0       	ldi	r29, 0x00	; 0
    481a:	dc 2f       	mov	r29, r28
    481c:	cc 27       	eor	r28, r28
    481e:	67 e2       	ldi	r22, 0x27	; 39
    4820:	70 e0       	ldi	r23, 0x00	; 0
    4822:	81 2f       	mov	r24, r17
    4824:	4c dd       	rcall	.-1384   	; 0x42be <_ZN10W5500Class6readSnEhj>
    4826:	9e 01       	movw	r18, r28
    4828:	28 0f       	add	r18, r24
    482a:	31 1d       	adc	r19, r1
    482c:	c9 01       	movw	r24, r18
    482e:	df 91       	pop	r29
    4830:	cf 91       	pop	r28
    4832:	1f 91       	pop	r17
    4834:	08 95       	ret

00004836 <_ZN10W5500Class17getRXReceivedSizeEh>:
    4836:	ff 92       	push	r15
    4838:	0f 93       	push	r16
    483a:	1f 93       	push	r17
    483c:	cf 93       	push	r28
    483e:	df 93       	push	r29
    4840:	f6 2e       	mov	r15, r22
    4842:	c0 e0       	ldi	r28, 0x00	; 0
    4844:	d0 e0       	ldi	r29, 0x00	; 0
    4846:	8f 2d       	mov	r24, r15
    4848:	df df       	rcall	.-66     	; 0x4808 <_ZN10W5500Class12readSnRX_RSREh>
    484a:	8c 01       	movw	r16, r24
    484c:	89 2b       	or	r24, r25
    484e:	19 f0       	breq	.+6      	; 0x4856 <_ZN10W5500Class17getRXReceivedSizeEh+0x20>
    4850:	8f 2d       	mov	r24, r15
    4852:	da df       	rcall	.-76     	; 0x4808 <_ZN10W5500Class12readSnRX_RSREh>
    4854:	ec 01       	movw	r28, r24
    4856:	c0 17       	cp	r28, r16
    4858:	d1 07       	cpc	r29, r17
    485a:	a9 f7       	brne	.-22     	; 0x4846 <_ZN10W5500Class17getRXReceivedSizeEh+0x10>
    485c:	ce 01       	movw	r24, r28
    485e:	df 91       	pop	r29
    4860:	cf 91       	pop	r28
    4862:	1f 91       	pop	r17
    4864:	0f 91       	pop	r16
    4866:	ff 90       	pop	r15
    4868:	08 95       	ret

0000486a <_ZN10W5500Class27send_data_processing_offsetEhjPKhj>:
    486a:	af 92       	push	r10
    486c:	bf 92       	push	r11
    486e:	df 92       	push	r13
    4870:	ef 92       	push	r14
    4872:	ff 92       	push	r15
    4874:	0f 93       	push	r16
    4876:	1f 93       	push	r17
    4878:	cf 93       	push	r28
    487a:	df 93       	push	r29
    487c:	d6 2e       	mov	r13, r22
    487e:	7a 01       	movw	r14, r20
    4880:	59 01       	movw	r10, r18
    4882:	64 e2       	ldi	r22, 0x24	; 36
    4884:	70 e0       	ldi	r23, 0x00	; 0
    4886:	8d 2d       	mov	r24, r13
    4888:	1a dd       	rcall	.-1484   	; 0x42be <_ZN10W5500Class6readSnEhj>
    488a:	c8 2f       	mov	r28, r24
    488c:	65 e2       	ldi	r22, 0x25	; 37
    488e:	70 e0       	ldi	r23, 0x00	; 0
    4890:	8d 2d       	mov	r24, r13
    4892:	15 dd       	rcall	.-1494   	; 0x42be <_ZN10W5500Class6readSnEhj>
    4894:	d0 e0       	ldi	r29, 0x00	; 0
    4896:	dc 2f       	mov	r29, r28
    4898:	cc 27       	eor	r28, r28
    489a:	e8 0e       	add	r14, r24
    489c:	f1 1c       	adc	r15, r1
    489e:	ce 0d       	add	r28, r14
    48a0:	df 1d       	adc	r29, r15
    48a2:	6d 2d       	mov	r22, r13
    48a4:	62 95       	swap	r22
    48a6:	66 0f       	add	r22, r22
    48a8:	60 7e       	andi	r22, 0xE0	; 224
    48aa:	6c 5e       	subi	r22, 0xEC	; 236
    48ac:	98 01       	movw	r18, r16
    48ae:	a5 01       	movw	r20, r10
    48b0:	ce 01       	movw	r24, r28
    48b2:	05 df       	rcall	.-502    	; 0x46be <_ZN10W5500Class5writeEjhPKhj>
    48b4:	c0 0f       	add	r28, r16
    48b6:	d1 1f       	adc	r29, r17
    48b8:	4d 2f       	mov	r20, r29
    48ba:	64 e2       	ldi	r22, 0x24	; 36
    48bc:	70 e0       	ldi	r23, 0x00	; 0
    48be:	8d 2d       	mov	r24, r13
    48c0:	09 dd       	rcall	.-1518   	; 0x42d4 <_ZN10W5500Class7writeSnEhjh>
    48c2:	4c 2f       	mov	r20, r28
    48c4:	65 e2       	ldi	r22, 0x25	; 37
    48c6:	70 e0       	ldi	r23, 0x00	; 0
    48c8:	8d 2d       	mov	r24, r13
    48ca:	df 91       	pop	r29
    48cc:	cf 91       	pop	r28
    48ce:	1f 91       	pop	r17
    48d0:	0f 91       	pop	r16
    48d2:	ff 90       	pop	r15
    48d4:	ef 90       	pop	r14
    48d6:	df 90       	pop	r13
    48d8:	bf 90       	pop	r11
    48da:	af 90       	pop	r10
    48dc:	fb cc       	rjmp	.-1546   	; 0x42d4 <_ZN10W5500Class7writeSnEhjh>

000048de <_ZN10W5500Class20send_data_processingEhPKhj>:
    48de:	0f 93       	push	r16
    48e0:	1f 93       	push	r17
    48e2:	89 01       	movw	r16, r18
    48e4:	9a 01       	movw	r18, r20
    48e6:	40 e0       	ldi	r20, 0x00	; 0
    48e8:	50 e0       	ldi	r21, 0x00	; 0
    48ea:	bf df       	rcall	.-130    	; 0x486a <_ZN10W5500Class27send_data_processing_offsetEhjPKhj>
    48ec:	1f 91       	pop	r17
    48ee:	0f 91       	pop	r16
    48f0:	08 95       	ret

000048f2 <_ZN10W5500Class4readEjhPhj>:
    48f2:	df 92       	push	r13
    48f4:	ef 92       	push	r14
    48f6:	ff 92       	push	r15
    48f8:	0f 93       	push	r16
    48fa:	1f 93       	push	r17
    48fc:	cf 93       	push	r28
    48fe:	df 93       	push	r29
    4900:	d8 2f       	mov	r29, r24
    4902:	d9 2e       	mov	r13, r25
    4904:	c6 2f       	mov	r28, r22
    4906:	7a 01       	movw	r14, r20
    4908:	89 01       	movw	r16, r18
    490a:	80 91 b1 09 	lds	r24, 0x09B1	; 0x8009b1 <wiznet_SPI_settings>
    490e:	90 91 b2 09 	lds	r25, 0x09B2	; 0x8009b2 <wiznet_SPI_settings+0x1>
    4912:	81 de       	rcall	.-766    	; 0x4616 <_ZN8SPIClass16beginTransactionE11SPISettings>
    4914:	b2 de       	rcall	.-668    	; 0x467a <_ZN10W5500Class5setSSEv>
    4916:	8d 2d       	mov	r24, r13
    4918:	98 de       	rcall	.-720    	; 0x464a <_ZN8SPIClass8transferEh>
    491a:	8d 2f       	mov	r24, r29
    491c:	96 de       	rcall	.-724    	; 0x464a <_ZN8SPIClass8transferEh>
    491e:	8c 2f       	mov	r24, r28
    4920:	94 de       	rcall	.-728    	; 0x464a <_ZN8SPIClass8transferEh>
    4922:	e7 01       	movw	r28, r14
    4924:	e0 0e       	add	r14, r16
    4926:	f1 1e       	adc	r15, r17
    4928:	ce 15       	cp	r28, r14
    492a:	df 05       	cpc	r29, r15
    492c:	21 f0       	breq	.+8      	; 0x4936 <_ZN10W5500Class4readEjhPhj+0x44>
    492e:	80 e0       	ldi	r24, 0x00	; 0
    4930:	8c de       	rcall	.-744    	; 0x464a <_ZN8SPIClass8transferEh>
    4932:	89 93       	st	Y+, r24
    4934:	f9 cf       	rjmp	.-14     	; 0x4928 <_ZN10W5500Class4readEjhPhj+0x36>
    4936:	a3 de       	rcall	.-698    	; 0x467e <_ZN10W5500Class7resetSSEv>
    4938:	8f de       	rcall	.-738    	; 0x4658 <_ZN8SPIClass14endTransactionEv>
    493a:	c8 01       	movw	r24, r16
    493c:	df 91       	pop	r29
    493e:	cf 91       	pop	r28
    4940:	1f 91       	pop	r17
    4942:	0f 91       	pop	r16
    4944:	ff 90       	pop	r15
    4946:	ef 90       	pop	r14
    4948:	df 90       	pop	r13
    494a:	08 95       	ret

0000494c <_ZN10W5500Class9read_dataEhjPVhj>:
    494c:	0f 93       	push	r16
    494e:	1f 93       	push	r17
    4950:	cf 93       	push	r28
    4952:	df 93       	push	r29
    4954:	00 d0       	rcall	.+0      	; 0x4956 <_ZN10W5500Class9read_dataEhjPVhj+0xa>
    4956:	cd b7       	in	r28, 0x3d	; 61
    4958:	de b7       	in	r29, 0x3e	; 62
    495a:	5a 83       	std	Y+2, r21	; 0x02
    495c:	49 83       	std	Y+1, r20	; 0x01
    495e:	a9 01       	movw	r20, r18
    4960:	98 01       	movw	r18, r16
    4962:	89 81       	ldd	r24, Y+1	; 0x01
    4964:	9a 81       	ldd	r25, Y+2	; 0x02
    4966:	62 95       	swap	r22
    4968:	66 0f       	add	r22, r22
    496a:	60 7e       	andi	r22, 0xE0	; 224
    496c:	68 5e       	subi	r22, 0xE8	; 232
    496e:	0f 90       	pop	r0
    4970:	0f 90       	pop	r0
    4972:	df 91       	pop	r29
    4974:	cf 91       	pop	r28
    4976:	1f 91       	pop	r17
    4978:	0f 91       	pop	r16
    497a:	bb cf       	rjmp	.-138    	; 0x48f2 <_ZN10W5500Class4readEjhPhj>

0000497c <_ZN10W5500Class20recv_data_processingEhPhjh>:
    497c:	8f 92       	push	r8
    497e:	9f 92       	push	r9
    4980:	af 92       	push	r10
    4982:	bf 92       	push	r11
    4984:	cf 92       	push	r12
    4986:	df 92       	push	r13
    4988:	ef 92       	push	r14
    498a:	ff 92       	push	r15
    498c:	0f 93       	push	r16
    498e:	1f 93       	push	r17
    4990:	cf 93       	push	r28
    4992:	df 93       	push	r29
    4994:	6c 01       	movw	r12, r24
    4996:	96 2e       	mov	r9, r22
    4998:	5a 01       	movw	r10, r20
    499a:	79 01       	movw	r14, r18
    499c:	80 2e       	mov	r8, r16
    499e:	68 e2       	ldi	r22, 0x28	; 40
    49a0:	70 e0       	ldi	r23, 0x00	; 0
    49a2:	89 2d       	mov	r24, r9
    49a4:	8c dc       	rcall	.-1768   	; 0x42be <_ZN10W5500Class6readSnEhj>
    49a6:	08 2f       	mov	r16, r24
    49a8:	69 e2       	ldi	r22, 0x29	; 41
    49aa:	70 e0       	ldi	r23, 0x00	; 0
    49ac:	89 2d       	mov	r24, r9
    49ae:	87 dc       	rcall	.-1778   	; 0x42be <_ZN10W5500Class6readSnEhj>
    49b0:	10 e0       	ldi	r17, 0x00	; 0
    49b2:	10 2f       	mov	r17, r16
    49b4:	00 27       	eor	r16, r16
    49b6:	e8 01       	movw	r28, r16
    49b8:	c8 0f       	add	r28, r24
    49ba:	d1 1d       	adc	r29, r1
    49bc:	87 01       	movw	r16, r14
    49be:	95 01       	movw	r18, r10
    49c0:	ae 01       	movw	r20, r28
    49c2:	69 2d       	mov	r22, r9
    49c4:	c6 01       	movw	r24, r12
    49c6:	c2 df       	rcall	.-124    	; 0x494c <_ZN10W5500Class9read_dataEhjPVhj>
    49c8:	81 10       	cpse	r8, r1
    49ca:	18 c0       	rjmp	.+48     	; 0x49fc <_ZN10W5500Class20recv_data_processingEhPhjh+0x80>
    49cc:	0c 0f       	add	r16, r28
    49ce:	1d 1f       	adc	r17, r29
    49d0:	41 2f       	mov	r20, r17
    49d2:	68 e2       	ldi	r22, 0x28	; 40
    49d4:	70 e0       	ldi	r23, 0x00	; 0
    49d6:	89 2d       	mov	r24, r9
    49d8:	7d dc       	rcall	.-1798   	; 0x42d4 <_ZN10W5500Class7writeSnEhjh>
    49da:	40 2f       	mov	r20, r16
    49dc:	69 e2       	ldi	r22, 0x29	; 41
    49de:	70 e0       	ldi	r23, 0x00	; 0
    49e0:	89 2d       	mov	r24, r9
    49e2:	df 91       	pop	r29
    49e4:	cf 91       	pop	r28
    49e6:	1f 91       	pop	r17
    49e8:	0f 91       	pop	r16
    49ea:	ff 90       	pop	r15
    49ec:	ef 90       	pop	r14
    49ee:	df 90       	pop	r13
    49f0:	cf 90       	pop	r12
    49f2:	bf 90       	pop	r11
    49f4:	af 90       	pop	r10
    49f6:	9f 90       	pop	r9
    49f8:	8f 90       	pop	r8
    49fa:	6c cc       	rjmp	.-1832   	; 0x42d4 <_ZN10W5500Class7writeSnEhjh>
    49fc:	df 91       	pop	r29
    49fe:	cf 91       	pop	r28
    4a00:	1f 91       	pop	r17
    4a02:	0f 91       	pop	r16
    4a04:	ff 90       	pop	r15
    4a06:	ef 90       	pop	r14
    4a08:	df 90       	pop	r13
    4a0a:	cf 90       	pop	r12
    4a0c:	bf 90       	pop	r11
    4a0e:	af 90       	pop	r10
    4a10:	9f 90       	pop	r9
    4a12:	8f 90       	pop	r8
    4a14:	08 95       	ret

00004a16 <_ZN10W5500Class9execCmdSnEh7SockCMD>:
    4a16:	cf 93       	push	r28
    4a18:	c6 2f       	mov	r28, r22
    4a1a:	61 e0       	ldi	r22, 0x01	; 1
    4a1c:	70 e0       	ldi	r23, 0x00	; 0
    4a1e:	8c 2f       	mov	r24, r28
    4a20:	59 dc       	rcall	.-1870   	; 0x42d4 <_ZN10W5500Class7writeSnEhjh>
    4a22:	61 e0       	ldi	r22, 0x01	; 1
    4a24:	70 e0       	ldi	r23, 0x00	; 0
    4a26:	8c 2f       	mov	r24, r28
    4a28:	4a dc       	rcall	.-1900   	; 0x42be <_ZN10W5500Class6readSnEhj>
    4a2a:	81 11       	cpse	r24, r1
    4a2c:	fa cf       	rjmp	.-12     	; 0x4a22 <_ZN10W5500Class9execCmdSnEh7SockCMD+0xc>
    4a2e:	cf 91       	pop	r28
    4a30:	08 95       	ret

00004a32 <_GLOBAL__sub_I_w5500>:
    // Invert the SPI2X bit
    clockDiv ^= 0x1;

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    4a32:	e1 eb       	ldi	r30, 0xB1	; 177
    4a34:	f9 e0       	ldi	r31, 0x09	; 9
    4a36:	80 e5       	ldi	r24, 0x50	; 80
    4a38:	80 83       	st	Z, r24
    spsr = clockDiv & SPI_2XCLOCK_MASK;
    4a3a:	81 e0       	ldi	r24, 0x01	; 1
    4a3c:	81 83       	std	Z+1, r24	; 0x01
    4a3e:	08 95       	ret

00004a40 <_ZN5I2CIOC1Ev>:
      // Remove the values which are not inputs and get the value of the pin
      pinVal = this->read() & _dirMask;
      pinVal = ( pinVal >> pin ) & 0x01; // Get the pin value
   }
   return (pinVal);
}
    4a40:	fc 01       	movw	r30, r24
    4a42:	12 82       	std	Z+2, r1	; 0x02
    4a44:	8f ef       	ldi	r24, 0xFF	; 255
    4a46:	81 83       	std	Z+1, r24	; 0x01
    4a48:	10 82       	st	Z, r1
    4a4a:	13 82       	std	Z+3, r1	; 0x03
    4a4c:	08 95       	ret

00004a4e <_ZN5I2CIO8portModeEh>:
    4a4e:	fc 01       	movw	r30, r24
    4a50:	83 81       	ldd	r24, Z+3	; 0x03
    4a52:	88 23       	and	r24, r24
    4a54:	31 f0       	breq	.+12     	; 0x4a62 <_ZN5I2CIO8portModeEh+0x14>
    4a56:	61 11       	cpse	r22, r1
    4a58:	03 c0       	rjmp	.+6      	; 0x4a60 <_ZN5I2CIO8portModeEh+0x12>
    4a5a:	8f ef       	ldi	r24, 0xFF	; 255
    4a5c:	81 83       	std	Z+1, r24	; 0x01
    4a5e:	08 95       	ret
    4a60:	11 82       	std	Z+1, r1	; 0x01
    4a62:	08 95       	ret

00004a64 <_ZN5I2CIO11isAvailableEh>:
    4a64:	86 e2       	ldi	r24, 0x26	; 38
    4a66:	9a e0       	ldi	r25, 0x0A	; 10
    4a68:	f0 d5       	rcall	.+3040   	; 0x564a <_ZN7TwoWire17beginTransmissionEh>
    4a6a:	86 e2       	ldi	r24, 0x26	; 38
    4a6c:	9a e0       	ldi	r25, 0x0A	; 10
    4a6e:	6e d6       	rcall	.+3292   	; 0x574c <_ZN7TwoWire15endTransmissionEv>
    4a70:	91 e0       	ldi	r25, 0x01	; 1
    4a72:	81 11       	cpse	r24, r1
    4a74:	90 e0       	ldi	r25, 0x00	; 0
    4a76:	89 2f       	mov	r24, r25
    4a78:	08 95       	ret

00004a7a <_ZN5I2CIO5beginEh>:
    4a7a:	cf 93       	push	r28
    4a7c:	df 93       	push	r29
    4a7e:	ec 01       	movw	r28, r24
    4a80:	6a 83       	std	Y+2, r22	; 0x02
    4a82:	86 e2       	ldi	r24, 0x26	; 38
    4a84:	9a e0       	ldi	r25, 0x0A	; 10
    4a86:	ce d5       	rcall	.+2972   	; 0x5624 <_ZN7TwoWire5beginEv>
    4a88:	6a 81       	ldd	r22, Y+2	; 0x02
    4a8a:	ce 01       	movw	r24, r28
    4a8c:	eb df       	rcall	.-42     	; 0x4a64 <_ZN5I2CIO11isAvailableEh>
    4a8e:	8b 83       	std	Y+3, r24	; 0x03
    4a90:	88 23       	and	r24, r24
    4a92:	21 f0       	breq	.+8      	; 0x4a9c <_ZN5I2CIO5beginEh+0x22>
    4a94:	86 e2       	ldi	r24, 0x26	; 38
    4a96:	9a e0       	ldi	r25, 0x0A	; 10
    4a98:	01 d5       	rcall	.+2562   	; 0x549c <_ZN7TwoWire4readEv>
    4a9a:	88 83       	st	Y, r24
    4a9c:	8b 81       	ldd	r24, Y+3	; 0x03
    4a9e:	90 e0       	ldi	r25, 0x00	; 0
    4aa0:	df 91       	pop	r29
    4aa2:	cf 91       	pop	r28
    4aa4:	08 95       	ret

00004aa6 <_ZN5I2CIO5writeEh>:
}

//
// write
int I2CIO::write ( uint8_t value )
{
    4aa6:	cf 93       	push	r28
    4aa8:	df 93       	push	r29
   int status = 0;
   
   if ( _initialised )
    4aaa:	fc 01       	movw	r30, r24
    4aac:	23 81       	ldd	r18, Z+3	; 0x03
    4aae:	22 23       	and	r18, r18
    4ab0:	99 f0       	breq	.+38     	; 0x4ad8 <_ZN5I2CIO5writeEh+0x32>
    4ab2:	ec 01       	movw	r28, r24
   {
      // Only write HIGH the values of the ports that have been initialised as
      // outputs updating the output shadow of the device
      _shadow = ( value & ~(_dirMask) );
    4ab4:	81 81       	ldd	r24, Z+1	; 0x01
    4ab6:	80 95       	com	r24
    4ab8:	68 23       	and	r22, r24
    4aba:	60 83       	st	Z, r22
   
      Wire.beginTransmission ( _i2cAddr );
    4abc:	62 81       	ldd	r22, Z+2	; 0x02
    4abe:	86 e2       	ldi	r24, 0x26	; 38
    4ac0:	9a e0       	ldi	r25, 0x0A	; 10
    4ac2:	c3 d5       	rcall	.+2950   	; 0x564a <_ZN7TwoWire17beginTransmissionEh>
#if (ARDUINO <  100)
      Wire.send ( _shadow );
#else
      Wire.write ( _shadow );
    4ac4:	68 81       	ld	r22, Y
    4ac6:	86 e2       	ldi	r24, 0x26	; 38
    4ac8:	9a e0       	ldi	r25, 0x0A	; 10
    4aca:	6e d5       	rcall	.+2780   	; 0x55a8 <_ZN7TwoWire5writeEh>
#endif  
      status = Wire.endTransmission ();
    4acc:	86 e2       	ldi	r24, 0x26	; 38
    4ace:	9a e0       	ldi	r25, 0x0A	; 10
    4ad0:	3d d6       	rcall	.+3194   	; 0x574c <_ZN7TwoWire15endTransmissionEv>
    4ad2:	28 2f       	mov	r18, r24
    4ad4:	30 e0       	ldi	r19, 0x00	; 0
    4ad6:	02 c0       	rjmp	.+4      	; 0x4adc <_ZN5I2CIO5writeEh+0x36>

//
// write
int I2CIO::write ( uint8_t value )
{
   int status = 0;
    4ad8:	20 e0       	ldi	r18, 0x00	; 0
    4ada:	30 e0       	ldi	r19, 0x00	; 0
#else
      Wire.write ( _shadow );
#endif  
      status = Wire.endTransmission ();
   }
   return ( (status == 0) );
    4adc:	81 e0       	ldi	r24, 0x01	; 1
    4ade:	90 e0       	ldi	r25, 0x00	; 0
    4ae0:	23 2b       	or	r18, r19
    4ae2:	11 f0       	breq	.+4      	; 0x4ae8 <_ZN5I2CIO5writeEh+0x42>
    4ae4:	80 e0       	ldi	r24, 0x00	; 0
    4ae6:	90 e0       	ldi	r25, 0x00	; 0
}
    4ae8:	df 91       	pop	r29
    4aea:	cf 91       	pop	r28
    4aec:	08 95       	ret

00004aee <_ZN3LCD15setBacklightPinEh13t_backlighPol>:

// This will 'left justify' text from the cursor
void LCD::noAutoscroll(void) 
{
   _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
   command(LCD_ENTRYMODESET | _displaymode);
    4aee:	08 95       	ret

00004af0 <_ZN3LCD12setBacklightEh>:
    4af0:	08 95       	ret

00004af2 <_ZN3LCD5writeEh>:
    4af2:	dc 01       	movw	r26, r24
    4af4:	ed 91       	ld	r30, X+
    4af6:	fc 91       	ld	r31, X
    4af8:	06 84       	ldd	r0, Z+14	; 0x0e
    4afa:	f7 85       	ldd	r31, Z+15	; 0x0f
    4afc:	e0 2d       	mov	r30, r0
    4afe:	41 e0       	ldi	r20, 0x01	; 1
    4b00:	09 95       	icall
    4b02:	81 e0       	ldi	r24, 0x01	; 1
    4b04:	90 e0       	ldi	r25, 0x00	; 0
    4b06:	08 95       	ret

00004b08 <_ZN3LCDC1Ev>:
    4b08:	fc 01       	movw	r30, r24
    4b0a:	13 82       	std	Z+3, r1	; 0x03
    4b0c:	12 82       	std	Z+2, r1	; 0x02
    4b0e:	23 ec       	ldi	r18, 0xC3	; 195
    4b10:	37 e0       	ldi	r19, 0x07	; 7
    4b12:	31 83       	std	Z+1, r19	; 0x01
    4b14:	20 83       	st	Z, r18
    4b16:	08 95       	ret

00004b18 <_ZN3LCD9backlightEv>:
    4b18:	dc 01       	movw	r26, r24
    4b1a:	ed 91       	ld	r30, X+
    4b1c:	fc 91       	ld	r31, X
    4b1e:	04 84       	ldd	r0, Z+12	; 0x0c
    4b20:	f5 85       	ldd	r31, Z+13	; 0x0d
    4b22:	e0 2d       	mov	r30, r0
    4b24:	6f ef       	ldi	r22, 0xFF	; 255
    4b26:	09 94       	ijmp

00004b28 <_ZN3LCD11noBacklightEv>:
    4b28:	dc 01       	movw	r26, r24
    4b2a:	ed 91       	ld	r30, X+
    4b2c:	fc 91       	ld	r31, X
    4b2e:	04 84       	ldd	r0, Z+12	; 0x0c
    4b30:	f5 85       	ldd	r31, Z+13	; 0x0d
    4b32:	e0 2d       	mov	r30, r0
    4b34:	60 e0       	ldi	r22, 0x00	; 0
    4b36:	09 94       	ijmp

00004b38 <_ZN3LCD7commandEh>:
    4b38:	dc 01       	movw	r26, r24
    4b3a:	ed 91       	ld	r30, X+
    4b3c:	fc 91       	ld	r31, X
    4b3e:	06 84       	ldd	r0, Z+14	; 0x0e
    4b40:	f7 85       	ldd	r31, Z+15	; 0x0f
    4b42:	e0 2d       	mov	r30, r0
    4b44:	40 e0       	ldi	r20, 0x00	; 0
    4b46:	09 94       	ijmp

00004b48 <_ZN3LCD5clearEv>:
    4b48:	61 e0       	ldi	r22, 0x01	; 1
    4b4a:	f6 df       	rcall	.-20     	; 0x4b38 <_ZN3LCD7commandEh>
    4b4c:	80 ed       	ldi	r24, 0xD0	; 208
    4b4e:	97 e0       	ldi	r25, 0x07	; 7
    4b50:	0c 94 8c 2f 	jmp	0x5f18	; 0x5f18 <delayMicroseconds>

00004b54 <_ZN3LCD9setCursorEhh>:
    4b54:	cf 93       	push	r28
    4b56:	df 93       	push	r29
    4b58:	cd b7       	in	r28, 0x3d	; 61
    4b5a:	de b7       	in	r29, 0x3e	; 62
    4b5c:	28 97       	sbiw	r28, 0x08	; 8
    4b5e:	0f b6       	in	r0, 0x3f	; 63
    4b60:	f8 94       	cli
    4b62:	de bf       	out	0x3e, r29	; 62
    4b64:	0f be       	out	0x3f, r0	; 63
    4b66:	cd bf       	out	0x3d, r28	; 61
    4b68:	fc 01       	movw	r30, r24
    4b6a:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <_ZN14EthernetClient8_srcportE+0x8>
    4b6e:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <_ZN14EthernetClient8_srcportE+0x9>
    4b72:	a0 91 7b 01 	lds	r26, 0x017B	; 0x80017b <_ZN14EthernetClient8_srcportE+0xa>
    4b76:	b0 91 7c 01 	lds	r27, 0x017C	; 0x80017c <_ZN14EthernetClient8_srcportE+0xb>
    4b7a:	8d 83       	std	Y+5, r24	; 0x05
    4b7c:	9e 83       	std	Y+6, r25	; 0x06
    4b7e:	af 83       	std	Y+7, r26	; 0x07
    4b80:	b8 87       	std	Y+8, r27	; 0x08
    4b82:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <_ZN14EthernetClient8_srcportE+0xc>
    4b86:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <_ZN14EthernetClient8_srcportE+0xd>
    4b8a:	a0 91 7f 01 	lds	r26, 0x017F	; 0x80017f <_ZN14EthernetClient8_srcportE+0xe>
    4b8e:	b0 91 80 01 	lds	r27, 0x0180	; 0x800180 <_ZN14EthernetClient8_srcportE+0xf>
    4b92:	89 83       	std	Y+1, r24	; 0x01
    4b94:	9a 83       	std	Y+2, r25	; 0x02
    4b96:	ab 83       	std	Y+3, r26	; 0x03
    4b98:	bc 83       	std	Y+4, r27	; 0x04
    4b9a:	87 81       	ldd	r24, Z+7	; 0x07
    4b9c:	48 17       	cp	r20, r24
    4b9e:	10 f0       	brcs	.+4      	; 0x4ba4 <_ZN3LCD9setCursorEhh+0x50>
    4ba0:	4f ef       	ldi	r20, 0xFF	; 255
    4ba2:	48 0f       	add	r20, r24
    4ba4:	90 85       	ldd	r25, Z+8	; 0x08
    4ba6:	50 e0       	ldi	r21, 0x00	; 0
    4ba8:	de 01       	movw	r26, r28
    4baa:	a4 0f       	add	r26, r20
    4bac:	b5 1f       	adc	r27, r21
    4bae:	90 31       	cpi	r25, 0x10	; 16
    4bb0:	29 f4       	brne	.+10     	; 0x4bbc <_ZN3LCD9setCursorEhh+0x68>
    4bb2:	84 30       	cpi	r24, 0x04	; 4
    4bb4:	19 f4       	brne	.+6      	; 0x4bbc <_ZN3LCD9setCursorEhh+0x68>
    4bb6:	11 96       	adiw	r26, 0x01	; 1
    4bb8:	9c 91       	ld	r25, X
    4bba:	02 c0       	rjmp	.+4      	; 0x4bc0 <_ZN3LCD9setCursorEhh+0x6c>
    4bbc:	15 96       	adiw	r26, 0x05	; 5
    4bbe:	9c 91       	ld	r25, X
    4bc0:	69 0f       	add	r22, r25
    4bc2:	60 68       	ori	r22, 0x80	; 128
    4bc4:	cf 01       	movw	r24, r30
    4bc6:	28 96       	adiw	r28, 0x08	; 8
    4bc8:	0f b6       	in	r0, 0x3f	; 63
    4bca:	f8 94       	cli
    4bcc:	de bf       	out	0x3e, r29	; 62
    4bce:	0f be       	out	0x3f, r0	; 63
    4bd0:	cd bf       	out	0x3d, r28	; 61
    4bd2:	df 91       	pop	r29
    4bd4:	cf 91       	pop	r28
    4bd6:	b0 cf       	rjmp	.-160    	; 0x4b38 <_ZN3LCD7commandEh>

00004bd8 <_ZN3LCD9noDisplayEv>:
    4bd8:	fc 01       	movw	r30, r24
    4bda:	65 81       	ldd	r22, Z+5	; 0x05
    4bdc:	6b 7f       	andi	r22, 0xFB	; 251
    4bde:	65 83       	std	Z+5, r22	; 0x05
    4be0:	68 60       	ori	r22, 0x08	; 8
    4be2:	aa cf       	rjmp	.-172    	; 0x4b38 <_ZN3LCD7commandEh>

00004be4 <_ZN3LCD7displayEv>:
    4be4:	fc 01       	movw	r30, r24
    4be6:	65 81       	ldd	r22, Z+5	; 0x05
    4be8:	26 2f       	mov	r18, r22
    4bea:	24 60       	ori	r18, 0x04	; 4
    4bec:	25 83       	std	Z+5, r18	; 0x05
    4bee:	6c 60       	ori	r22, 0x0C	; 12
    4bf0:	a3 cf       	rjmp	.-186    	; 0x4b38 <_ZN3LCD7commandEh>

00004bf2 <_ZN3LCD5beginEhhh>:
    4bf2:	cf 93       	push	r28
    4bf4:	df 93       	push	r29
    4bf6:	ec 01       	movw	r28, r24
    4bf8:	42 30       	cpi	r20, 0x02	; 2
    4bfa:	18 f0       	brcs	.+6      	; 0x4c02 <_ZN3LCD5beginEhhh+0x10>
    4bfc:	8c 81       	ldd	r24, Y+4	; 0x04
    4bfe:	88 60       	ori	r24, 0x08	; 8
    4c00:	8c 83       	std	Y+4, r24	; 0x04
    4c02:	4f 83       	std	Y+7, r20	; 0x07
    4c04:	68 87       	std	Y+8, r22	; 0x08
    4c06:	22 23       	and	r18, r18
    4c08:	29 f0       	breq	.+10     	; 0x4c14 <_ZN3LCD5beginEhhh+0x22>
    4c0a:	41 30       	cpi	r20, 0x01	; 1
    4c0c:	19 f4       	brne	.+6      	; 0x4c14 <_ZN3LCD5beginEhhh+0x22>
    4c0e:	8c 81       	ldd	r24, Y+4	; 0x04
    4c10:	84 60       	ori	r24, 0x04	; 4
    4c12:	8c 83       	std	Y+4, r24	; 0x04
    4c14:	64 e6       	ldi	r22, 0x64	; 100
    4c16:	70 e0       	ldi	r23, 0x00	; 0
    4c18:	80 e0       	ldi	r24, 0x00	; 0
    4c1a:	90 e0       	ldi	r25, 0x00	; 0
    4c1c:	0e 94 53 2f 	call	0x5ea6	; 0x5ea6 <delay>
    4c20:	6c 81       	ldd	r22, Y+4	; 0x04
    4c22:	64 fd       	sbrc	r22, 4
    4c24:	31 c0       	rjmp	.+98     	; 0x4c88 <_ZN3LCD5beginEhhh+0x96>
    4c26:	e8 81       	ld	r30, Y
    4c28:	f9 81       	ldd	r31, Y+1	; 0x01
    4c2a:	06 84       	ldd	r0, Z+14	; 0x0e
    4c2c:	f7 85       	ldd	r31, Z+15	; 0x0f
    4c2e:	e0 2d       	mov	r30, r0
    4c30:	42 e0       	ldi	r20, 0x02	; 2
    4c32:	63 e0       	ldi	r22, 0x03	; 3
    4c34:	ce 01       	movw	r24, r28
    4c36:	09 95       	icall
    4c38:	84 e9       	ldi	r24, 0x94	; 148
    4c3a:	91 e1       	ldi	r25, 0x11	; 17
    4c3c:	0e 94 8c 2f 	call	0x5f18	; 0x5f18 <delayMicroseconds>
    4c40:	e8 81       	ld	r30, Y
    4c42:	f9 81       	ldd	r31, Y+1	; 0x01
    4c44:	06 84       	ldd	r0, Z+14	; 0x0e
    4c46:	f7 85       	ldd	r31, Z+15	; 0x0f
    4c48:	e0 2d       	mov	r30, r0
    4c4a:	42 e0       	ldi	r20, 0x02	; 2
    4c4c:	63 e0       	ldi	r22, 0x03	; 3
    4c4e:	ce 01       	movw	r24, r28
    4c50:	09 95       	icall
    4c52:	86 e9       	ldi	r24, 0x96	; 150
    4c54:	90 e0       	ldi	r25, 0x00	; 0
    4c56:	0e 94 8c 2f 	call	0x5f18	; 0x5f18 <delayMicroseconds>
    4c5a:	e8 81       	ld	r30, Y
    4c5c:	f9 81       	ldd	r31, Y+1	; 0x01
    4c5e:	06 84       	ldd	r0, Z+14	; 0x0e
    4c60:	f7 85       	ldd	r31, Z+15	; 0x0f
    4c62:	e0 2d       	mov	r30, r0
    4c64:	42 e0       	ldi	r20, 0x02	; 2
    4c66:	63 e0       	ldi	r22, 0x03	; 3
    4c68:	ce 01       	movw	r24, r28
    4c6a:	09 95       	icall
    4c6c:	86 e9       	ldi	r24, 0x96	; 150
    4c6e:	90 e0       	ldi	r25, 0x00	; 0
    4c70:	0e 94 8c 2f 	call	0x5f18	; 0x5f18 <delayMicroseconds>
    4c74:	e8 81       	ld	r30, Y
    4c76:	f9 81       	ldd	r31, Y+1	; 0x01
    4c78:	06 84       	ldd	r0, Z+14	; 0x0e
    4c7a:	f7 85       	ldd	r31, Z+15	; 0x0f
    4c7c:	e0 2d       	mov	r30, r0
    4c7e:	42 e0       	ldi	r20, 0x02	; 2
    4c80:	62 e0       	ldi	r22, 0x02	; 2
    4c82:	ce 01       	movw	r24, r28
    4c84:	09 95       	icall
    4c86:	13 c0       	rjmp	.+38     	; 0x4cae <_ZN3LCD5beginEhhh+0xbc>
    4c88:	60 62       	ori	r22, 0x20	; 32
    4c8a:	ce 01       	movw	r24, r28
    4c8c:	55 df       	rcall	.-342    	; 0x4b38 <_ZN3LCD7commandEh>
    4c8e:	84 e9       	ldi	r24, 0x94	; 148
    4c90:	91 e1       	ldi	r25, 0x11	; 17
    4c92:	0e 94 8c 2f 	call	0x5f18	; 0x5f18 <delayMicroseconds>
    4c96:	6c 81       	ldd	r22, Y+4	; 0x04
    4c98:	60 62       	ori	r22, 0x20	; 32
    4c9a:	ce 01       	movw	r24, r28
    4c9c:	4d df       	rcall	.-358    	; 0x4b38 <_ZN3LCD7commandEh>
    4c9e:	86 e9       	ldi	r24, 0x96	; 150
    4ca0:	90 e0       	ldi	r25, 0x00	; 0
    4ca2:	0e 94 8c 2f 	call	0x5f18	; 0x5f18 <delayMicroseconds>
    4ca6:	6c 81       	ldd	r22, Y+4	; 0x04
    4ca8:	60 62       	ori	r22, 0x20	; 32
    4caa:	ce 01       	movw	r24, r28
    4cac:	45 df       	rcall	.-374    	; 0x4b38 <_ZN3LCD7commandEh>
    4cae:	86 e9       	ldi	r24, 0x96	; 150
    4cb0:	90 e0       	ldi	r25, 0x00	; 0
    4cb2:	0e 94 8c 2f 	call	0x5f18	; 0x5f18 <delayMicroseconds>
    4cb6:	6c 81       	ldd	r22, Y+4	; 0x04
    4cb8:	60 62       	ori	r22, 0x20	; 32
    4cba:	ce 01       	movw	r24, r28
    4cbc:	3d df       	rcall	.-390    	; 0x4b38 <_ZN3LCD7commandEh>
    4cbe:	8c e3       	ldi	r24, 0x3C	; 60
    4cc0:	90 e0       	ldi	r25, 0x00	; 0
    4cc2:	0e 94 8c 2f 	call	0x5f18	; 0x5f18 <delayMicroseconds>
    4cc6:	84 e0       	ldi	r24, 0x04	; 4
    4cc8:	8d 83       	std	Y+5, r24	; 0x05
    4cca:	ce 01       	movw	r24, r28
    4ccc:	8b df       	rcall	.-234    	; 0x4be4 <_ZN3LCD7displayEv>
    4cce:	ce 01       	movw	r24, r28
    4cd0:	3b df       	rcall	.-394    	; 0x4b48 <_ZN3LCD5clearEv>
    4cd2:	82 e0       	ldi	r24, 0x02	; 2
    4cd4:	8e 83       	std	Y+6, r24	; 0x06
    4cd6:	66 e0       	ldi	r22, 0x06	; 6
    4cd8:	ce 01       	movw	r24, r28
    4cda:	2e df       	rcall	.-420    	; 0x4b38 <_ZN3LCD7commandEh>
    4cdc:	ce 01       	movw	r24, r28
    4cde:	df 91       	pop	r29
    4ce0:	cf 91       	pop	r28
    4ce2:	1a cf       	rjmp	.-460    	; 0x4b18 <_ZN3LCD9backlightEv>

00004ce4 <_ZN3LCD10createCharEhPh>:
}

// Write to CGRAM of new characters
void LCD::createChar(uint8_t location, uint8_t charmap[]) 
{
    4ce4:	ef 92       	push	r14
    4ce6:	ff 92       	push	r15
    4ce8:	0f 93       	push	r16
    4cea:	1f 93       	push	r17
    4cec:	cf 93       	push	r28
    4cee:	df 93       	push	r29
    4cf0:	8c 01       	movw	r16, r24
    4cf2:	7a 01       	movw	r14, r20
   location &= 0x7;            // we only have 8 locations 0-7
   
   command(LCD_SETCGRAMADDR | (location << 3));
    4cf4:	67 70       	andi	r22, 0x07	; 7
    4cf6:	88 e0       	ldi	r24, 0x08	; 8
    4cf8:	68 9f       	mul	r22, r24
    4cfa:	b0 01       	movw	r22, r0
    4cfc:	11 24       	eor	r1, r1
    4cfe:	60 64       	ori	r22, 0x40	; 64
    4d00:	c8 01       	movw	r24, r16
    4d02:	1a df       	rcall	.-460    	; 0x4b38 <_ZN3LCD7commandEh>
   delayMicroseconds(30);
    4d04:	8e e1       	ldi	r24, 0x1E	; 30
    4d06:	90 e0       	ldi	r25, 0x00	; 0
    4d08:	0e 94 8c 2f 	call	0x5f18	; 0x5f18 <delayMicroseconds>
    4d0c:	e7 01       	movw	r28, r14
    4d0e:	a8 e0       	ldi	r26, 0x08	; 8
    4d10:	ea 0e       	add	r14, r26
    4d12:	f1 1c       	adc	r15, r1
   
   for (uint8_t i = 0; i < 8; i++)
   {
      write(charmap[i]);      // call the virtual write method
    4d14:	69 91       	ld	r22, Y+
    4d16:	d8 01       	movw	r26, r16
    4d18:	ed 91       	ld	r30, X+
    4d1a:	fc 91       	ld	r31, X
    4d1c:	01 90       	ld	r0, Z+
    4d1e:	f0 81       	ld	r31, Z
    4d20:	e0 2d       	mov	r30, r0
    4d22:	c8 01       	movw	r24, r16
    4d24:	09 95       	icall
      delayMicroseconds(40);
    4d26:	88 e2       	ldi	r24, 0x28	; 40
    4d28:	90 e0       	ldi	r25, 0x00	; 0
    4d2a:	0e 94 8c 2f 	call	0x5f18	; 0x5f18 <delayMicroseconds>
   location &= 0x7;            // we only have 8 locations 0-7
   
   command(LCD_SETCGRAMADDR | (location << 3));
   delayMicroseconds(30);
   
   for (uint8_t i = 0; i < 8; i++)
    4d2e:	ce 15       	cp	r28, r14
    4d30:	df 05       	cpc	r29, r15
    4d32:	81 f7       	brne	.-32     	; 0x4d14 <_ZN3LCD10createCharEhPh+0x30>
   {
      write(charmap[i]);      // call the virtual write method
      delayMicroseconds(40);
   }
}
    4d34:	df 91       	pop	r29
    4d36:	cf 91       	pop	r28
    4d38:	1f 91       	pop	r17
    4d3a:	0f 91       	pop	r16
    4d3c:	ff 90       	pop	r15
    4d3e:	ef 90       	pop	r14
    4d40:	08 95       	ret

00004d42 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol>:
LiquidCrystal_I2C::LiquidCrystal_I2C(uint8_t lcd_Addr, uint8_t En, uint8_t Rw,
                                     uint8_t Rs, uint8_t d4, uint8_t d5,
                                     uint8_t d6, uint8_t d7 )
{
   config(lcd_Addr, En, Rw, Rs, d4, d5, d6, d7);
}
    4d42:	21 e0       	ldi	r18, 0x01	; 1
    4d44:	01 c0       	rjmp	.+2      	; 0x4d48 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol+0x6>
    4d46:	22 0f       	add	r18, r18
    4d48:	6a 95       	dec	r22
    4d4a:	ea f7       	brpl	.-6      	; 0x4d46 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol+0x4>
    4d4c:	dc 01       	movw	r26, r24
    4d4e:	1b 96       	adiw	r26, 0x0b	; 11
    4d50:	2c 93       	st	X, r18
    4d52:	1b 97       	sbiw	r26, 0x0b	; 11
    4d54:	19 96       	adiw	r26, 0x09	; 9
    4d56:	4c 93       	st	X, r20
    4d58:	19 97       	sbiw	r26, 0x09	; 9
    4d5a:	ed 91       	ld	r30, X+
    4d5c:	fc 91       	ld	r31, X
    4d5e:	04 84       	ldd	r0, Z+12	; 0x0c
    4d60:	f5 85       	ldd	r31, Z+13	; 0x0d
    4d62:	e0 2d       	mov	r30, r0
    4d64:	60 e0       	ldi	r22, 0x00	; 0
    4d66:	09 94       	ijmp

00004d68 <_ZN17LiquidCrystal_I2C12setBacklightEh>:
    4d68:	fc 01       	movw	r30, r24
    4d6a:	83 85       	ldd	r24, Z+11	; 0x0b
    4d6c:	88 23       	and	r24, r24
    4d6e:	89 f0       	breq	.+34     	; 0x4d92 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x2a>
    4d70:	91 85       	ldd	r25, Z+9	; 0x09
    4d72:	91 11       	cpse	r25, r1
    4d74:	03 c0       	rjmp	.+6      	; 0x4d7c <_ZN17LiquidCrystal_I2C12setBacklightEh+0x14>
    4d76:	61 11       	cpse	r22, r1
    4d78:	05 c0       	rjmp	.+10     	; 0x4d84 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x1c>
    4d7a:	06 c0       	rjmp	.+12     	; 0x4d88 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    4d7c:	91 30       	cpi	r25, 0x01	; 1
    4d7e:	21 f4       	brne	.+8      	; 0x4d88 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    4d80:	61 11       	cpse	r22, r1
    4d82:	02 c0       	rjmp	.+4      	; 0x4d88 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    4d84:	84 87       	std	Z+12, r24	; 0x0c
    4d86:	01 c0       	rjmp	.+2      	; 0x4d8a <_ZN17LiquidCrystal_I2C12setBacklightEh+0x22>
    4d88:	14 86       	std	Z+12, r1	; 0x0c
    4d8a:	64 85       	ldd	r22, Z+12	; 0x0c
    4d8c:	cf 01       	movw	r24, r30
    4d8e:	0d 96       	adiw	r24, 0x0d	; 13
    4d90:	8a ce       	rjmp	.-748    	; 0x4aa6 <_ZN5I2CIO5writeEh>
    4d92:	08 95       	ret

00004d94 <_ZN17LiquidCrystal_I2C4initEv>:
    4d94:	0f 93       	push	r16
    4d96:	1f 93       	push	r17
    4d98:	cf 93       	push	r28
    4d9a:	df 93       	push	r29
    4d9c:	8c 01       	movw	r16, r24
    4d9e:	ec 01       	movw	r28, r24
    4da0:	2d 96       	adiw	r28, 0x0d	; 13
    4da2:	fc 01       	movw	r30, r24
    4da4:	62 85       	ldd	r22, Z+10	; 0x0a
    4da6:	ce 01       	movw	r24, r28
    4da8:	68 de       	rcall	.-816    	; 0x4a7a <_ZN5I2CIO5beginEh>
    4daa:	01 97       	sbiw	r24, 0x01	; 1
    4dac:	59 f4       	brne	.+22     	; 0x4dc4 <_ZN17LiquidCrystal_I2C4initEv+0x30>
    4dae:	61 e0       	ldi	r22, 0x01	; 1
    4db0:	ce 01       	movw	r24, r28
    4db2:	4d de       	rcall	.-870    	; 0x4a4e <_ZN5I2CIO8portModeEh>
    4db4:	f8 01       	movw	r30, r16
    4db6:	14 82       	std	Z+4, r1	; 0x04
    4db8:	60 e0       	ldi	r22, 0x00	; 0
    4dba:	ce 01       	movw	r24, r28
    4dbc:	74 de       	rcall	.-792    	; 0x4aa6 <_ZN5I2CIO5writeEh>
    4dbe:	81 e0       	ldi	r24, 0x01	; 1
    4dc0:	90 e0       	ldi	r25, 0x00	; 0
    4dc2:	02 c0       	rjmp	.+4      	; 0x4dc8 <_ZN17LiquidCrystal_I2C4initEv+0x34>
    4dc4:	80 e0       	ldi	r24, 0x00	; 0
    4dc6:	90 e0       	ldi	r25, 0x00	; 0
    4dc8:	df 91       	pop	r29
    4dca:	cf 91       	pop	r28
    4dcc:	1f 91       	pop	r17
    4dce:	0f 91       	pop	r16
    4dd0:	08 95       	ret

00004dd2 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh>:
    4dd2:	8f 92       	push	r8
    4dd4:	af 92       	push	r10
    4dd6:	cf 92       	push	r12
    4dd8:	ef 92       	push	r14
    4dda:	0f 93       	push	r16
    4ddc:	cf 93       	push	r28
    4dde:	df 93       	push	r29
    4de0:	cd b7       	in	r28, 0x3d	; 61
    4de2:	de b7       	in	r29, 0x3e	; 62
    4de4:	fc 01       	movw	r30, r24
    4de6:	62 87       	std	Z+10, r22	; 0x0a
    4de8:	13 86       	std	Z+11, r1	; 0x0b
    4dea:	14 86       	std	Z+12, r1	; 0x0c
    4dec:	11 86       	std	Z+9, r1	; 0x09
    4dee:	81 e0       	ldi	r24, 0x01	; 1
    4df0:	98 2f       	mov	r25, r24
    4df2:	01 c0       	rjmp	.+2      	; 0x4df6 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x24>
    4df4:	99 0f       	add	r25, r25
    4df6:	4a 95       	dec	r20
    4df8:	ea f7       	brpl	.-6      	; 0x4df4 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x22>
    4dfa:	91 8b       	std	Z+17, r25	; 0x11
    4dfc:	98 2f       	mov	r25, r24
    4dfe:	01 c0       	rjmp	.+2      	; 0x4e02 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x30>
    4e00:	99 0f       	add	r25, r25
    4e02:	2a 95       	dec	r18
    4e04:	ea f7       	brpl	.-6      	; 0x4e00 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x2e>
    4e06:	92 8b       	std	Z+18, r25	; 0x12
    4e08:	98 2f       	mov	r25, r24
    4e0a:	01 c0       	rjmp	.+2      	; 0x4e0e <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x3c>
    4e0c:	99 0f       	add	r25, r25
    4e0e:	0a 95       	dec	r16
    4e10:	ea f7       	brpl	.-6      	; 0x4e0c <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x3a>
    4e12:	93 8b       	std	Z+19, r25	; 0x13
    4e14:	98 2f       	mov	r25, r24
    4e16:	01 c0       	rjmp	.+2      	; 0x4e1a <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x48>
    4e18:	99 0f       	add	r25, r25
    4e1a:	ea 94       	dec	r14
    4e1c:	ea f7       	brpl	.-6      	; 0x4e18 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x46>
    4e1e:	94 8b       	std	Z+20, r25	; 0x14
    4e20:	98 2f       	mov	r25, r24
    4e22:	01 c0       	rjmp	.+2      	; 0x4e26 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x54>
    4e24:	99 0f       	add	r25, r25
    4e26:	ca 94       	dec	r12
    4e28:	ea f7       	brpl	.-6      	; 0x4e24 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x52>
    4e2a:	95 8b       	std	Z+21, r25	; 0x15
    4e2c:	98 2f       	mov	r25, r24
    4e2e:	01 c0       	rjmp	.+2      	; 0x4e32 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x60>
    4e30:	99 0f       	add	r25, r25
    4e32:	aa 94       	dec	r10
    4e34:	ea f7       	brpl	.-6      	; 0x4e30 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x5e>
    4e36:	96 8b       	std	Z+22, r25	; 0x16
    4e38:	01 c0       	rjmp	.+2      	; 0x4e3c <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x6a>
    4e3a:	88 0f       	add	r24, r24
    4e3c:	8a 94       	dec	r8
    4e3e:	ea f7       	brpl	.-6      	; 0x4e3a <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x68>
    4e40:	87 8b       	std	Z+23, r24	; 0x17
    4e42:	df 91       	pop	r29
    4e44:	cf 91       	pop	r28
    4e46:	0f 91       	pop	r16
    4e48:	ef 90       	pop	r14
    4e4a:	cf 90       	pop	r12
    4e4c:	af 90       	pop	r10
    4e4e:	8f 90       	pop	r8
    4e50:	08 95       	ret

00004e52 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhhh13t_backlighPol>:

LiquidCrystal_I2C::LiquidCrystal_I2C(uint8_t lcd_Addr, uint8_t En, uint8_t Rw,
    4e52:	6f 92       	push	r6
    4e54:	7f 92       	push	r7
    4e56:	8f 92       	push	r8
    4e58:	9f 92       	push	r9
    4e5a:	af 92       	push	r10
    4e5c:	bf 92       	push	r11
    4e5e:	cf 92       	push	r12
    4e60:	df 92       	push	r13
    4e62:	ef 92       	push	r14
    4e64:	ff 92       	push	r15
    4e66:	0f 93       	push	r16
    4e68:	1f 93       	push	r17
    4e6a:	cf 93       	push	r28
    4e6c:	df 93       	push	r29
    4e6e:	cd b7       	in	r28, 0x3d	; 61
    4e70:	de b7       	in	r29, 0x3e	; 62
    4e72:	3c 01       	movw	r6, r24
    4e74:	d6 2e       	mov	r13, r22
    4e76:	b4 2e       	mov	r11, r20
    4e78:	92 2e       	mov	r9, r18
    4e7a:	19 89       	ldd	r17, Y+17	; 0x11
    4e7c:	fa 88       	ldd	r15, Y+18	; 0x12
                                     uint8_t Rs, uint8_t d4, uint8_t d5,
                                     uint8_t d6, uint8_t d7, uint8_t backlighPin, 
                                     t_backlighPol pol = POSITIVE )
    4e7e:	44 de       	rcall	.-888    	; 0x4b08 <_ZN3LCDC1Ev>
    4e80:	87 ed       	ldi	r24, 0xD7	; 215
    4e82:	97 e0       	ldi	r25, 0x07	; 7
    4e84:	f3 01       	movw	r30, r6
    4e86:	91 83       	std	Z+1, r25	; 0x01
    4e88:	80 83       	st	Z, r24
    4e8a:	c3 01       	movw	r24, r6
    4e8c:	0d 96       	adiw	r24, 0x0d	; 13
    4e8e:	d8 dd       	rcall	.-1104   	; 0x4a40 <_ZN5I2CIOC1Ev>
{
   config(lcd_Addr, En, Rw, Rs, d4, d5, d6, d7);
    4e90:	29 2d       	mov	r18, r9
    4e92:	4b 2d       	mov	r20, r11
    4e94:	6d 2d       	mov	r22, r13
    4e96:	c3 01       	movw	r24, r6
    4e98:	9c df       	rcall	.-200    	; 0x4dd2 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh>
   setBacklightPin(backlighPin, pol);
    4e9a:	4f 2d       	mov	r20, r15
    4e9c:	61 2f       	mov	r22, r17
    4e9e:	c3 01       	movw	r24, r6
}
    4ea0:	df 91       	pop	r29
    4ea2:	cf 91       	pop	r28
    4ea4:	1f 91       	pop	r17
    4ea6:	0f 91       	pop	r16
    4ea8:	ff 90       	pop	r15
    4eaa:	ef 90       	pop	r14
    4eac:	df 90       	pop	r13
    4eae:	cf 90       	pop	r12
    4eb0:	bf 90       	pop	r11
    4eb2:	af 90       	pop	r10
    4eb4:	9f 90       	pop	r9
    4eb6:	8f 90       	pop	r8
    4eb8:	7f 90       	pop	r7
                                     uint8_t Rs, uint8_t d4, uint8_t d5,
                                     uint8_t d6, uint8_t d7, uint8_t backlighPin, 
                                     t_backlighPol pol = POSITIVE )
{
   config(lcd_Addr, En, Rw, Rs, d4, d5, d6, d7);
   setBacklightPin(backlighPin, pol);
    4eba:	6f 90       	pop	r6
    4ebc:	42 cf       	rjmp	.-380    	; 0x4d42 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol>

00004ebe <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
}

//
// pulseEnable
void LiquidCrystal_I2C::pulseEnable (uint8_t data)
{
    4ebe:	ef 92       	push	r14
    4ec0:	ff 92       	push	r15
    4ec2:	0f 93       	push	r16
    4ec4:	1f 93       	push	r17
    4ec6:	cf 93       	push	r28
    4ec8:	8c 01       	movw	r16, r24
    4eca:	c6 2f       	mov	r28, r22
   _i2cio.write (data | _En);   // En HIGH
    4ecc:	7c 01       	movw	r14, r24
    4ece:	8d e0       	ldi	r24, 0x0D	; 13
    4ed0:	e8 0e       	add	r14, r24
    4ed2:	f1 1c       	adc	r15, r1
    4ed4:	f8 01       	movw	r30, r16
    4ed6:	61 89       	ldd	r22, Z+17	; 0x11
    4ed8:	6c 2b       	or	r22, r28
    4eda:	c7 01       	movw	r24, r14
    4edc:	e4 dd       	rcall	.-1080   	; 0x4aa6 <_ZN5I2CIO5writeEh>
   _i2cio.write (data & ~_En);  // En LOW
    4ede:	f8 01       	movw	r30, r16
    4ee0:	61 89       	ldd	r22, Z+17	; 0x11
    4ee2:	60 95       	com	r22
    4ee4:	6c 23       	and	r22, r28
    4ee6:	c7 01       	movw	r24, r14
    4ee8:	cf 91       	pop	r28
    4eea:	1f 91       	pop	r17
    4eec:	0f 91       	pop	r16
    4eee:	ff 90       	pop	r15
//
// pulseEnable
void LiquidCrystal_I2C::pulseEnable (uint8_t data)
{
   _i2cio.write (data | _En);   // En HIGH
   _i2cio.write (data & ~_En);  // En LOW
    4ef0:	ef 90       	pop	r14
    4ef2:	d9 cd       	rjmp	.-1102   	; 0x4aa6 <_ZN5I2CIO5writeEh>

00004ef4 <_ZN17LiquidCrystal_I2C10write4bitsEhh>:
}

//
// write4bits
void LiquidCrystal_I2C::write4bits ( uint8_t value, uint8_t mode ) 
{
    4ef4:	fc 01       	movw	r30, r24
    4ef6:	96 2f       	mov	r25, r22
    4ef8:	df 01       	movw	r26, r30
    4efa:	84 e0       	ldi	r24, 0x04	; 4
   uint8_t pinMapValue = 0;
    4efc:	60 e0       	ldi	r22, 0x00	; 0
   
   // Map the value to LCD pin mapping
   // --------------------------------
   for ( uint8_t i = 0; i < 4; i++ )
   {
      if ( ( value & 0x1 ) == 1 )
    4efe:	90 ff       	sbrs	r25, 0
    4f00:	04 c0       	rjmp	.+8      	; 0x4f0a <_ZN17LiquidCrystal_I2C10write4bitsEhh+0x16>
      {
         pinMapValue |= _data_pins[i];
    4f02:	54 96       	adiw	r26, 0x14	; 20
    4f04:	2c 91       	ld	r18, X
    4f06:	54 97       	sbiw	r26, 0x14	; 20
    4f08:	62 2b       	or	r22, r18
      }
      value = ( value >> 1 );
    4f0a:	96 95       	lsr	r25
    4f0c:	81 50       	subi	r24, 0x01	; 1
    4f0e:	11 96       	adiw	r26, 0x01	; 1
{
   uint8_t pinMapValue = 0;
   
   // Map the value to LCD pin mapping
   // --------------------------------
   for ( uint8_t i = 0; i < 4; i++ )
    4f10:	81 11       	cpse	r24, r1
    4f12:	f5 cf       	rjmp	.-22     	; 0x4efe <_ZN17LiquidCrystal_I2C10write4bitsEhh+0xa>
      value = ( value >> 1 );
   }
   
   // Is it a command or data
   // -----------------------
   if ( mode == DATA )
    4f14:	41 30       	cpi	r20, 0x01	; 1
    4f16:	09 f4       	brne	.+2      	; 0x4f1a <_ZN17LiquidCrystal_I2C10write4bitsEhh+0x26>
   {
      mode = _Rs;
    4f18:	43 89       	ldd	r20, Z+19	; 0x13
    4f1a:	94 85       	ldd	r25, Z+12	; 0x0c
    4f1c:	69 2b       	or	r22, r25
   }
   
   pinMapValue |= mode | _backlightStsMask;
   pulseEnable ( pinMapValue );
    4f1e:	64 2b       	or	r22, r20
    4f20:	cf 01       	movw	r24, r30
    4f22:	cd cf       	rjmp	.-102    	; 0x4ebe <_ZN17LiquidCrystal_I2C11pulseEnableEh>

00004f24 <_ZN17LiquidCrystal_I2C4sendEhh>:
//----------------------------------------------------------------------------

//
// send - write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) 
{
    4f24:	0f 93       	push	r16
    4f26:	1f 93       	push	r17
    4f28:	cf 93       	push	r28
    4f2a:	df 93       	push	r29
    4f2c:	06 2f       	mov	r16, r22
    4f2e:	0f 70       	andi	r16, 0x0F	; 15
   // No need to use the delay routines since the time taken to write takes
   // longer that what is needed both for toggling and enable pin an to execute
   // the command.
   
   if ( mode == FOUR_BITS )
    4f30:	42 30       	cpi	r20, 0x02	; 2
    4f32:	19 f4       	brne	.+6      	; 0x4f3a <_ZN17LiquidCrystal_I2C4sendEhh+0x16>
   {
      write4bits( (value & 0x0F), COMMAND );
    4f34:	40 e0       	ldi	r20, 0x00	; 0
    4f36:	60 2f       	mov	r22, r16
    4f38:	0d c0       	rjmp	.+26     	; 0x4f54 <_ZN17LiquidCrystal_I2C4sendEhh+0x30>
    4f3a:	14 2f       	mov	r17, r20
    4f3c:	ec 01       	movw	r28, r24
   }
   else 
   {
      write4bits( (value >> 4), mode );
    4f3e:	70 e0       	ldi	r23, 0x00	; 0
    4f40:	84 e0       	ldi	r24, 0x04	; 4
    4f42:	75 95       	asr	r23
    4f44:	67 95       	ror	r22
    4f46:	8a 95       	dec	r24
    4f48:	e1 f7       	brne	.-8      	; 0x4f42 <_ZN17LiquidCrystal_I2C4sendEhh+0x1e>
    4f4a:	ce 01       	movw	r24, r28
    4f4c:	d3 df       	rcall	.-90     	; 0x4ef4 <_ZN17LiquidCrystal_I2C10write4bitsEhh>
      write4bits( (value & 0x0F), mode);
    4f4e:	41 2f       	mov	r20, r17
    4f50:	60 2f       	mov	r22, r16
    4f52:	ce 01       	movw	r24, r28
   }
}
    4f54:	df 91       	pop	r29
    4f56:	cf 91       	pop	r28
    4f58:	1f 91       	pop	r17
      write4bits( (value & 0x0F), COMMAND );
   }
   else 
   {
      write4bits( (value >> 4), mode );
      write4bits( (value & 0x0F), mode);
    4f5a:	0f 91       	pop	r16
    4f5c:	cb cf       	rjmp	.-106    	; 0x4ef4 <_ZN17LiquidCrystal_I2C10write4bitsEhh>

00004f5e <_ZN17LiquidCrystal_I2C5beginEhhh>:
// ---------------------------------------------------------------------------

//
// begin
void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) 
{
    4f5e:	ff 92       	push	r15
    4f60:	0f 93       	push	r16
    4f62:	1f 93       	push	r17
    4f64:	cf 93       	push	r28
    4f66:	df 93       	push	r29
    4f68:	ec 01       	movw	r28, r24
    4f6a:	16 2f       	mov	r17, r22
    4f6c:	04 2f       	mov	r16, r20
    4f6e:	f2 2e       	mov	r15, r18
   
   init();     // Initialise the I2C expander interface
    4f70:	11 df       	rcall	.-478    	; 0x4d94 <_ZN17LiquidCrystal_I2C4initEv>
   LCD::begin ( cols, lines, dotsize );   
    4f72:	2f 2d       	mov	r18, r15
    4f74:	40 2f       	mov	r20, r16
    4f76:	61 2f       	mov	r22, r17
    4f78:	ce 01       	movw	r24, r28
}
    4f7a:	df 91       	pop	r29
    4f7c:	cf 91       	pop	r28
    4f7e:	1f 91       	pop	r17
    4f80:	0f 91       	pop	r16
// begin
void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) 
{
   
   init();     // Initialise the I2C expander interface
   LCD::begin ( cols, lines, dotsize );   
    4f82:	ff 90       	pop	r15
    4f84:	36 ce       	rjmp	.-916    	; 0x4bf2 <_ZN3LCD5beginEhhh>

00004f86 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    4f86:	cf 93       	push	r28
  uint8_t sreg = SREG;
    4f88:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    4f8a:	f8 94       	cli
  if (!initialized) {
    4f8c:	80 91 b7 09 	lds	r24, 0x09B7	; 0x8009b7 <_ZN8SPIClass11initializedE>
    4f90:	81 11       	cpse	r24, r1
    4f92:	27 c0       	rjmp	.+78     	; 0x4fe2 <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    4f94:	ec e7       	ldi	r30, 0x7C	; 124
    4f96:	f2 e0       	ldi	r31, 0x02	; 2
    4f98:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    4f9a:	ec e5       	ldi	r30, 0x5C	; 92
    4f9c:	f2 e0       	ldi	r31, 0x02	; 2
    4f9e:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    4fa0:	e8 2f       	mov	r30, r24
    4fa2:	f0 e0       	ldi	r31, 0x00	; 0
    4fa4:	ee 0f       	add	r30, r30
    4fa6:	ff 1f       	adc	r31, r31
    4fa8:	ea 55       	subi	r30, 0x5A	; 90
    4faa:	fd 4f       	sbci	r31, 0xFD	; 253
    4fac:	a5 91       	lpm	r26, Z+
    4fae:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    4fb0:	ec 91       	ld	r30, X
    4fb2:	e9 23       	and	r30, r25
    4fb4:	21 f4       	brne	.+8      	; 0x4fbe <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    4fb6:	61 e0       	ldi	r22, 0x01	; 1
    4fb8:	8a e0       	ldi	r24, 0x0A	; 10
    4fba:	0e 94 37 30 	call	0x606e	; 0x606e <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    4fbe:	61 e0       	ldi	r22, 0x01	; 1
    4fc0:	8a e0       	ldi	r24, 0x0A	; 10
    4fc2:	0e 94 fb 2f 	call	0x5ff6	; 0x5ff6 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    4fc6:	8c b5       	in	r24, 0x2c	; 44
    4fc8:	80 61       	ori	r24, 0x10	; 16
    4fca:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    4fcc:	8c b5       	in	r24, 0x2c	; 44
    4fce:	80 64       	ori	r24, 0x40	; 64
    4fd0:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    4fd2:	61 e0       	ldi	r22, 0x01	; 1
    4fd4:	8d e0       	ldi	r24, 0x0D	; 13
    4fd6:	0e 94 fb 2f 	call	0x5ff6	; 0x5ff6 <pinMode>
    pinMode(MOSI, OUTPUT);
    4fda:	61 e0       	ldi	r22, 0x01	; 1
    4fdc:	8b e0       	ldi	r24, 0x0B	; 11
    4fde:	0e 94 fb 2f 	call	0x5ff6	; 0x5ff6 <pinMode>
  }
  initialized++; // reference count
    4fe2:	80 91 b7 09 	lds	r24, 0x09B7	; 0x8009b7 <_ZN8SPIClass11initializedE>
    4fe6:	8f 5f       	subi	r24, 0xFF	; 255
    4fe8:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    4fec:	cf bf       	out	0x3f, r28	; 63
}
    4fee:	cf 91       	pop	r28
    4ff0:	08 95       	ret

00004ff2 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    4ff2:	10 92 25 0a 	sts	0x0A25, r1	; 0x800a25 <twi_state>
    4ff6:	81 e0       	ldi	r24, 0x01	; 1
    4ff8:	80 93 23 0a 	sts	0x0A23, r24	; 0x800a23 <twi_sendStop>
    4ffc:	10 92 22 0a 	sts	0x0A22, r1	; 0x800a22 <twi_inRepStart>
    5000:	61 e0       	ldi	r22, 0x01	; 1
    5002:	8d e1       	ldi	r24, 0x1D	; 29
    5004:	0e 94 37 30 	call	0x606e	; 0x606e <digitalWrite>
    5008:	61 e0       	ldi	r22, 0x01	; 1
    500a:	8c e1       	ldi	r24, 0x1C	; 28
    500c:	0e 94 37 30 	call	0x606e	; 0x606e <digitalWrite>
    5010:	e9 eb       	ldi	r30, 0xB9	; 185
    5012:	f0 e0       	ldi	r31, 0x00	; 0
    5014:	80 81       	ld	r24, Z
    5016:	8e 7f       	andi	r24, 0xFE	; 254
    5018:	80 83       	st	Z, r24
    501a:	80 81       	ld	r24, Z
    501c:	8d 7f       	andi	r24, 0xFD	; 253
    501e:	80 83       	st	Z, r24
    5020:	88 e4       	ldi	r24, 0x48	; 72
    5022:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    5026:	85 e4       	ldi	r24, 0x45	; 69
    5028:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    502c:	08 95       	ret

0000502e <twi_disable>:
    502e:	ec eb       	ldi	r30, 0xBC	; 188
    5030:	f0 e0       	ldi	r31, 0x00	; 0
    5032:	80 81       	ld	r24, Z
    5034:	8a 7b       	andi	r24, 0xBA	; 186
    5036:	80 83       	st	Z, r24
    5038:	60 e0       	ldi	r22, 0x00	; 0
    503a:	8d e1       	ldi	r24, 0x1D	; 29
    503c:	0e 94 37 30 	call	0x606e	; 0x606e <digitalWrite>
    5040:	60 e0       	ldi	r22, 0x00	; 0
    5042:	8c e1       	ldi	r24, 0x1C	; 28
    5044:	0c 94 37 30 	jmp	0x606e	; 0x606e <digitalWrite>

00005048 <twi_setFrequency>:
    5048:	9b 01       	movw	r18, r22
    504a:	ac 01       	movw	r20, r24
    504c:	60 e0       	ldi	r22, 0x00	; 0
    504e:	74 e2       	ldi	r23, 0x24	; 36
    5050:	84 ef       	ldi	r24, 0xF4	; 244
    5052:	90 e0       	ldi	r25, 0x00	; 0
    5054:	0e 94 5e 34 	call	0x68bc	; 0x68bc <__udivmodsi4>
    5058:	da 01       	movw	r26, r20
    505a:	c9 01       	movw	r24, r18
    505c:	40 97       	sbiw	r24, 0x10	; 16
    505e:	a1 09       	sbc	r26, r1
    5060:	b1 09       	sbc	r27, r1
    5062:	b6 95       	lsr	r27
    5064:	a7 95       	ror	r26
    5066:	97 95       	ror	r25
    5068:	87 95       	ror	r24
    506a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    506e:	08 95       	ret

00005070 <twi_readFrom>:
    5070:	41 32       	cpi	r20, 0x21	; 33
    5072:	08 f0       	brcs	.+2      	; 0x5076 <twi_readFrom+0x6>
    5074:	43 c0       	rjmp	.+134    	; 0x50fc <twi_readFrom+0x8c>
    5076:	90 91 25 0a 	lds	r25, 0x0A25	; 0x800a25 <twi_state>
    507a:	91 11       	cpse	r25, r1
    507c:	fc cf       	rjmp	.-8      	; 0x5076 <twi_readFrom+0x6>
    507e:	91 e0       	ldi	r25, 0x01	; 1
    5080:	90 93 25 0a 	sts	0x0A25, r25	; 0x800a25 <twi_state>
    5084:	20 93 23 0a 	sts	0x0A23, r18	; 0x800a23 <twi_sendStop>
    5088:	2f ef       	ldi	r18, 0xFF	; 255
    508a:	20 93 b8 09 	sts	0x09B8, r18	; 0x8009b8 <twi_error>
    508e:	10 92 fd 09 	sts	0x09FD, r1	; 0x8009fd <twi_masterBufferIndex>
    5092:	24 0f       	add	r18, r20
    5094:	20 93 fc 09 	sts	0x09FC, r18	; 0x8009fc <twi_masterBufferLength>
    5098:	90 93 24 0a 	sts	0x0A24, r25	; 0x800a24 <twi_slarw>
    509c:	90 91 24 0a 	lds	r25, 0x0A24	; 0x800a24 <twi_slarw>
    50a0:	88 0f       	add	r24, r24
    50a2:	89 2b       	or	r24, r25
    50a4:	80 93 24 0a 	sts	0x0A24, r24	; 0x800a24 <twi_slarw>
    50a8:	80 91 22 0a 	lds	r24, 0x0A22	; 0x800a22 <twi_inRepStart>
    50ac:	81 30       	cpi	r24, 0x01	; 1
    50ae:	61 f4       	brne	.+24     	; 0x50c8 <twi_readFrom+0x58>
    50b0:	10 92 22 0a 	sts	0x0A22, r1	; 0x800a22 <twi_inRepStart>
    50b4:	80 91 24 0a 	lds	r24, 0x0A24	; 0x800a24 <twi_slarw>
    50b8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    50bc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    50c0:	83 fd       	sbrc	r24, 3
    50c2:	f8 cf       	rjmp	.-16     	; 0x50b4 <twi_readFrom+0x44>
    50c4:	85 ec       	ldi	r24, 0xC5	; 197
    50c6:	01 c0       	rjmp	.+2      	; 0x50ca <twi_readFrom+0x5a>
    50c8:	85 ee       	ldi	r24, 0xE5	; 229
    50ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    50ce:	80 91 25 0a 	lds	r24, 0x0A25	; 0x800a25 <twi_state>
    50d2:	81 30       	cpi	r24, 0x01	; 1
    50d4:	e1 f3       	breq	.-8      	; 0x50ce <twi_readFrom+0x5e>
    50d6:	80 91 fd 09 	lds	r24, 0x09FD	; 0x8009fd <twi_masterBufferIndex>
    50da:	84 17       	cp	r24, r20
    50dc:	10 f4       	brcc	.+4      	; 0x50e2 <twi_readFrom+0x72>
    50de:	40 91 fd 09 	lds	r20, 0x09FD	; 0x8009fd <twi_masterBufferIndex>
    50e2:	ae ef       	ldi	r26, 0xFE	; 254
    50e4:	b9 e0       	ldi	r27, 0x09	; 9
    50e6:	96 2f       	mov	r25, r22
    50e8:	fb 01       	movw	r30, r22
    50ea:	8e 2f       	mov	r24, r30
    50ec:	89 1b       	sub	r24, r25
    50ee:	84 17       	cp	r24, r20
    50f0:	18 f4       	brcc	.+6      	; 0x50f8 <twi_readFrom+0x88>
    50f2:	8d 91       	ld	r24, X+
    50f4:	81 93       	st	Z+, r24
    50f6:	f9 cf       	rjmp	.-14     	; 0x50ea <twi_readFrom+0x7a>
    50f8:	84 2f       	mov	r24, r20
    50fa:	08 95       	ret
    50fc:	80 e0       	ldi	r24, 0x00	; 0
    50fe:	08 95       	ret

00005100 <twi_writeTo>:
    5100:	0f 93       	push	r16
    5102:	41 32       	cpi	r20, 0x21	; 33
    5104:	08 f0       	brcs	.+2      	; 0x5108 <twi_writeTo+0x8>
    5106:	4a c0       	rjmp	.+148    	; 0x519c <twi_writeTo+0x9c>
    5108:	90 91 25 0a 	lds	r25, 0x0A25	; 0x800a25 <twi_state>
    510c:	91 11       	cpse	r25, r1
    510e:	fc cf       	rjmp	.-8      	; 0x5108 <twi_writeTo+0x8>
    5110:	32 e0       	ldi	r19, 0x02	; 2
    5112:	30 93 25 0a 	sts	0x0A25, r19	; 0x800a25 <twi_state>
    5116:	00 93 23 0a 	sts	0x0A23, r16	; 0x800a23 <twi_sendStop>
    511a:	3f ef       	ldi	r19, 0xFF	; 255
    511c:	30 93 b8 09 	sts	0x09B8, r19	; 0x8009b8 <twi_error>
    5120:	10 92 fd 09 	sts	0x09FD, r1	; 0x8009fd <twi_masterBufferIndex>
    5124:	40 93 fc 09 	sts	0x09FC, r20	; 0x8009fc <twi_masterBufferLength>
    5128:	56 2f       	mov	r21, r22
    512a:	ae ef       	ldi	r26, 0xFE	; 254
    512c:	b9 e0       	ldi	r27, 0x09	; 9
    512e:	fb 01       	movw	r30, r22
    5130:	3e 2f       	mov	r19, r30
    5132:	35 1b       	sub	r19, r21
    5134:	34 17       	cp	r19, r20
    5136:	18 f4       	brcc	.+6      	; 0x513e <twi_writeTo+0x3e>
    5138:	31 91       	ld	r19, Z+
    513a:	3d 93       	st	X+, r19
    513c:	f9 cf       	rjmp	.-14     	; 0x5130 <twi_writeTo+0x30>
    513e:	10 92 24 0a 	sts	0x0A24, r1	; 0x800a24 <twi_slarw>
    5142:	30 91 24 0a 	lds	r19, 0x0A24	; 0x800a24 <twi_slarw>
    5146:	88 0f       	add	r24, r24
    5148:	83 2b       	or	r24, r19
    514a:	80 93 24 0a 	sts	0x0A24, r24	; 0x800a24 <twi_slarw>
    514e:	80 91 22 0a 	lds	r24, 0x0A22	; 0x800a22 <twi_inRepStart>
    5152:	81 30       	cpi	r24, 0x01	; 1
    5154:	61 f4       	brne	.+24     	; 0x516e <twi_writeTo+0x6e>
    5156:	10 92 22 0a 	sts	0x0A22, r1	; 0x800a22 <twi_inRepStart>
    515a:	80 91 24 0a 	lds	r24, 0x0A24	; 0x800a24 <twi_slarw>
    515e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5162:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5166:	83 fd       	sbrc	r24, 3
    5168:	f8 cf       	rjmp	.-16     	; 0x515a <twi_writeTo+0x5a>
    516a:	85 ec       	ldi	r24, 0xC5	; 197
    516c:	01 c0       	rjmp	.+2      	; 0x5170 <twi_writeTo+0x70>
    516e:	85 ee       	ldi	r24, 0xE5	; 229
    5170:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5174:	22 23       	and	r18, r18
    5176:	21 f0       	breq	.+8      	; 0x5180 <twi_writeTo+0x80>
    5178:	80 91 25 0a 	lds	r24, 0x0A25	; 0x800a25 <twi_state>
    517c:	82 30       	cpi	r24, 0x02	; 2
    517e:	d1 f3       	breq	.-12     	; 0x5174 <twi_writeTo+0x74>
    5180:	80 91 b8 09 	lds	r24, 0x09B8	; 0x8009b8 <twi_error>
    5184:	8f 3f       	cpi	r24, 0xFF	; 255
    5186:	79 f0       	breq	.+30     	; 0x51a6 <twi_writeTo+0xa6>
    5188:	80 91 b8 09 	lds	r24, 0x09B8	; 0x8009b8 <twi_error>
    518c:	80 32       	cpi	r24, 0x20	; 32
    518e:	41 f0       	breq	.+16     	; 0x51a0 <twi_writeTo+0xa0>
    5190:	80 91 b8 09 	lds	r24, 0x09B8	; 0x8009b8 <twi_error>
    5194:	80 33       	cpi	r24, 0x30	; 48
    5196:	31 f0       	breq	.+12     	; 0x51a4 <twi_writeTo+0xa4>
    5198:	94 e0       	ldi	r25, 0x04	; 4
    519a:	05 c0       	rjmp	.+10     	; 0x51a6 <twi_writeTo+0xa6>
    519c:	91 e0       	ldi	r25, 0x01	; 1
    519e:	03 c0       	rjmp	.+6      	; 0x51a6 <twi_writeTo+0xa6>
    51a0:	92 e0       	ldi	r25, 0x02	; 2
    51a2:	01 c0       	rjmp	.+2      	; 0x51a6 <twi_writeTo+0xa6>
    51a4:	93 e0       	ldi	r25, 0x03	; 3
    51a6:	89 2f       	mov	r24, r25
    51a8:	0f 91       	pop	r16
    51aa:	08 95       	ret

000051ac <twi_transmit>:
    51ac:	40 91 da 09 	lds	r20, 0x09DA	; 0x8009da <twi_txBufferLength>
    51b0:	26 2f       	mov	r18, r22
    51b2:	30 e0       	ldi	r19, 0x00	; 0
    51b4:	24 0f       	add	r18, r20
    51b6:	31 1d       	adc	r19, r1
    51b8:	21 32       	cpi	r18, 0x21	; 33
    51ba:	31 05       	cpc	r19, r1
    51bc:	dc f4       	brge	.+54     	; 0x51f4 <twi_transmit+0x48>
    51be:	20 91 25 0a 	lds	r18, 0x0A25	; 0x800a25 <twi_state>
    51c2:	24 30       	cpi	r18, 0x04	; 4
    51c4:	c9 f4       	brne	.+50     	; 0x51f8 <twi_transmit+0x4c>
    51c6:	fc 01       	movw	r30, r24
    51c8:	80 e0       	ldi	r24, 0x00	; 0
    51ca:	90 e0       	ldi	r25, 0x00	; 0
    51cc:	86 17       	cp	r24, r22
    51ce:	58 f4       	brcc	.+22     	; 0x51e6 <twi_transmit+0x3a>
    51d0:	30 91 da 09 	lds	r19, 0x09DA	; 0x8009da <twi_txBufferLength>
    51d4:	21 91       	ld	r18, Z+
    51d6:	dc 01       	movw	r26, r24
    51d8:	a4 52       	subi	r26, 0x24	; 36
    51da:	b6 4f       	sbci	r27, 0xF6	; 246
    51dc:	a3 0f       	add	r26, r19
    51de:	b1 1d       	adc	r27, r1
    51e0:	2c 93       	st	X, r18
    51e2:	01 96       	adiw	r24, 0x01	; 1
    51e4:	f3 cf       	rjmp	.-26     	; 0x51cc <twi_transmit+0x20>
    51e6:	80 91 da 09 	lds	r24, 0x09DA	; 0x8009da <twi_txBufferLength>
    51ea:	68 0f       	add	r22, r24
    51ec:	60 93 da 09 	sts	0x09DA, r22	; 0x8009da <twi_txBufferLength>
    51f0:	80 e0       	ldi	r24, 0x00	; 0
    51f2:	08 95       	ret
    51f4:	81 e0       	ldi	r24, 0x01	; 1
    51f6:	08 95       	ret
    51f8:	82 e0       	ldi	r24, 0x02	; 2
    51fa:	08 95       	ret

000051fc <twi_attachSlaveRxEvent>:
    51fc:	90 93 1f 0a 	sts	0x0A1F, r25	; 0x800a1f <twi_onSlaveReceive+0x1>
    5200:	80 93 1e 0a 	sts	0x0A1E, r24	; 0x800a1e <twi_onSlaveReceive>
    5204:	08 95       	ret

00005206 <twi_attachSlaveTxEvent>:
    5206:	90 93 21 0a 	sts	0x0A21, r25	; 0x800a21 <twi_onSlaveTransmit+0x1>
    520a:	80 93 20 0a 	sts	0x0A20, r24	; 0x800a20 <twi_onSlaveTransmit>
    520e:	08 95       	ret

00005210 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    5210:	85 ed       	ldi	r24, 0xD5	; 213
    5212:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    5216:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    521a:	84 fd       	sbrc	r24, 4
    521c:	fc cf       	rjmp	.-8      	; 0x5216 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    521e:	10 92 25 0a 	sts	0x0A25, r1	; 0x800a25 <twi_state>
    5222:	08 95       	ret

00005224 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    5224:	85 ec       	ldi	r24, 0xC5	; 197
    5226:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    522a:	10 92 25 0a 	sts	0x0A25, r1	; 0x800a25 <twi_state>
    522e:	08 95       	ret

00005230 <__vector_26>:
}

ISR(TWI_vect)
{
    5230:	1f 92       	push	r1
    5232:	0f 92       	push	r0
    5234:	0f b6       	in	r0, 0x3f	; 63
    5236:	0f 92       	push	r0
    5238:	11 24       	eor	r1, r1
    523a:	0b b6       	in	r0, 0x3b	; 59
    523c:	0f 92       	push	r0
    523e:	2f 93       	push	r18
    5240:	3f 93       	push	r19
    5242:	4f 93       	push	r20
    5244:	5f 93       	push	r21
    5246:	6f 93       	push	r22
    5248:	7f 93       	push	r23
    524a:	8f 93       	push	r24
    524c:	9f 93       	push	r25
    524e:	af 93       	push	r26
    5250:	bf 93       	push	r27
    5252:	ef 93       	push	r30
    5254:	ff 93       	push	r31
  switch(TW_STATUS){
    5256:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    525a:	88 7f       	andi	r24, 0xF8	; 248
    525c:	80 36       	cpi	r24, 0x60	; 96
    525e:	09 f4       	brne	.+2      	; 0x5262 <__vector_26+0x32>
    5260:	9d c0       	rjmp	.+314    	; 0x539c <__vector_26+0x16c>
    5262:	70 f5       	brcc	.+92     	; 0x52c0 <__vector_26+0x90>
    5264:	88 32       	cpi	r24, 0x28	; 40
    5266:	09 f4       	brne	.+2      	; 0x526a <__vector_26+0x3a>
    5268:	5c c0       	rjmp	.+184    	; 0x5322 <__vector_26+0xf2>
    526a:	90 f4       	brcc	.+36     	; 0x5290 <__vector_26+0x60>
    526c:	80 31       	cpi	r24, 0x10	; 16
    526e:	09 f4       	brne	.+2      	; 0x5272 <__vector_26+0x42>
    5270:	55 c0       	rjmp	.+170    	; 0x531c <__vector_26+0xec>
    5272:	38 f4       	brcc	.+14     	; 0x5282 <__vector_26+0x52>
    5274:	88 23       	and	r24, r24
    5276:	09 f4       	brne	.+2      	; 0x527a <__vector_26+0x4a>
    5278:	f3 c0       	rjmp	.+486    	; 0x5460 <__vector_26+0x230>
    527a:	88 30       	cpi	r24, 0x08	; 8
    527c:	09 f4       	brne	.+2      	; 0x5280 <__vector_26+0x50>
    527e:	4e c0       	rjmp	.+156    	; 0x531c <__vector_26+0xec>
    5280:	f2 c0       	rjmp	.+484    	; 0x5466 <__vector_26+0x236>
    5282:	88 31       	cpi	r24, 0x18	; 24
    5284:	09 f4       	brne	.+2      	; 0x5288 <__vector_26+0x58>
    5286:	4d c0       	rjmp	.+154    	; 0x5322 <__vector_26+0xf2>
    5288:	80 32       	cpi	r24, 0x20	; 32
    528a:	09 f4       	brne	.+2      	; 0x528e <__vector_26+0x5e>
    528c:	5e c0       	rjmp	.+188    	; 0x534a <__vector_26+0x11a>
    528e:	eb c0       	rjmp	.+470    	; 0x5466 <__vector_26+0x236>
    5290:	80 34       	cpi	r24, 0x40	; 64
    5292:	09 f4       	brne	.+2      	; 0x5296 <__vector_26+0x66>
    5294:	69 c0       	rjmp	.+210    	; 0x5368 <__vector_26+0x138>
    5296:	50 f4       	brcc	.+20     	; 0x52ac <__vector_26+0x7c>
    5298:	80 33       	cpi	r24, 0x30	; 48
    529a:	09 f4       	brne	.+2      	; 0x529e <__vector_26+0x6e>
    529c:	56 c0       	rjmp	.+172    	; 0x534a <__vector_26+0x11a>
    529e:	88 33       	cpi	r24, 0x38	; 56
    52a0:	09 f0       	breq	.+2      	; 0x52a4 <__vector_26+0x74>
    52a2:	e1 c0       	rjmp	.+450    	; 0x5466 <__vector_26+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    52a4:	80 93 b8 09 	sts	0x09B8, r24	; 0x8009b8 <twi_error>
      twi_releaseBus();
    52a8:	bd df       	rcall	.-134    	; 0x5224 <twi_releaseBus>
      break;
    52aa:	dd c0       	rjmp	.+442    	; 0x5466 <__vector_26+0x236>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    52ac:	80 35       	cpi	r24, 0x50	; 80
    52ae:	09 f4       	brne	.+2      	; 0x52b2 <__vector_26+0x82>
    52b0:	4f c0       	rjmp	.+158    	; 0x5350 <__vector_26+0x120>
    52b2:	88 35       	cpi	r24, 0x58	; 88
    52b4:	09 f4       	brne	.+2      	; 0x52b8 <__vector_26+0x88>
    52b6:	5d c0       	rjmp	.+186    	; 0x5372 <__vector_26+0x142>
    52b8:	88 34       	cpi	r24, 0x48	; 72
    52ba:	09 f0       	breq	.+2      	; 0x52be <__vector_26+0x8e>
    52bc:	d4 c0       	rjmp	.+424    	; 0x5466 <__vector_26+0x236>
    52be:	d2 c0       	rjmp	.+420    	; 0x5464 <__vector_26+0x234>
    52c0:	88 39       	cpi	r24, 0x98	; 152
    52c2:	09 f4       	brne	.+2      	; 0x52c6 <__vector_26+0x96>
    52c4:	c3 c0       	rjmp	.+390    	; 0x544c <__vector_26+0x21c>
    52c6:	a8 f4       	brcc	.+42     	; 0x52f2 <__vector_26+0xc2>
    52c8:	88 37       	cpi	r24, 0x78	; 120
    52ca:	09 f4       	brne	.+2      	; 0x52ce <__vector_26+0x9e>
    52cc:	67 c0       	rjmp	.+206    	; 0x539c <__vector_26+0x16c>
    52ce:	38 f4       	brcc	.+14     	; 0x52de <__vector_26+0xae>
    52d0:	88 36       	cpi	r24, 0x68	; 104
    52d2:	09 f4       	brne	.+2      	; 0x52d6 <__vector_26+0xa6>
    52d4:	63 c0       	rjmp	.+198    	; 0x539c <__vector_26+0x16c>
    52d6:	80 37       	cpi	r24, 0x70	; 112
    52d8:	09 f4       	brne	.+2      	; 0x52dc <__vector_26+0xac>
    52da:	60 c0       	rjmp	.+192    	; 0x539c <__vector_26+0x16c>
    52dc:	c4 c0       	rjmp	.+392    	; 0x5466 <__vector_26+0x236>
    52de:	88 38       	cpi	r24, 0x88	; 136
    52e0:	09 f4       	brne	.+2      	; 0x52e4 <__vector_26+0xb4>
    52e2:	b4 c0       	rjmp	.+360    	; 0x544c <__vector_26+0x21c>
    52e4:	80 39       	cpi	r24, 0x90	; 144
    52e6:	09 f4       	brne	.+2      	; 0x52ea <__vector_26+0xba>
    52e8:	5f c0       	rjmp	.+190    	; 0x53a8 <__vector_26+0x178>
    52ea:	80 38       	cpi	r24, 0x80	; 128
    52ec:	09 f0       	breq	.+2      	; 0x52f0 <__vector_26+0xc0>
    52ee:	bb c0       	rjmp	.+374    	; 0x5466 <__vector_26+0x236>
    52f0:	5b c0       	rjmp	.+182    	; 0x53a8 <__vector_26+0x178>
    52f2:	80 3b       	cpi	r24, 0xB0	; 176
    52f4:	09 f4       	brne	.+2      	; 0x52f8 <__vector_26+0xc8>
    52f6:	82 c0       	rjmp	.+260    	; 0x53fc <__vector_26+0x1cc>
    52f8:	38 f4       	brcc	.+14     	; 0x5308 <__vector_26+0xd8>
    52fa:	80 3a       	cpi	r24, 0xA0	; 160
    52fc:	09 f4       	brne	.+2      	; 0x5300 <__vector_26+0xd0>
    52fe:	66 c0       	rjmp	.+204    	; 0x53cc <__vector_26+0x19c>
    5300:	88 3a       	cpi	r24, 0xA8	; 168
    5302:	09 f4       	brne	.+2      	; 0x5306 <__vector_26+0xd6>
    5304:	7b c0       	rjmp	.+246    	; 0x53fc <__vector_26+0x1cc>
    5306:	af c0       	rjmp	.+350    	; 0x5466 <__vector_26+0x236>
    5308:	80 3c       	cpi	r24, 0xC0	; 192
    530a:	09 f4       	brne	.+2      	; 0x530e <__vector_26+0xde>
    530c:	a3 c0       	rjmp	.+326    	; 0x5454 <__vector_26+0x224>
    530e:	88 3c       	cpi	r24, 0xC8	; 200
    5310:	09 f4       	brne	.+2      	; 0x5314 <__vector_26+0xe4>
    5312:	a0 c0       	rjmp	.+320    	; 0x5454 <__vector_26+0x224>
    5314:	88 3b       	cpi	r24, 0xB8	; 184
    5316:	09 f4       	brne	.+2      	; 0x531a <__vector_26+0xea>
    5318:	86 c0       	rjmp	.+268    	; 0x5426 <__vector_26+0x1f6>
    531a:	a5 c0       	rjmp	.+330    	; 0x5466 <__vector_26+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    531c:	80 91 24 0a 	lds	r24, 0x0A24	; 0x800a24 <twi_slarw>
    5320:	10 c0       	rjmp	.+32     	; 0x5342 <__vector_26+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    5322:	90 91 fd 09 	lds	r25, 0x09FD	; 0x8009fd <twi_masterBufferIndex>
    5326:	80 91 fc 09 	lds	r24, 0x09FC	; 0x8009fc <twi_masterBufferLength>
    532a:	98 17       	cp	r25, r24
    532c:	70 f5       	brcc	.+92     	; 0x538a <__vector_26+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    532e:	e0 91 fd 09 	lds	r30, 0x09FD	; 0x8009fd <twi_masterBufferIndex>
    5332:	81 e0       	ldi	r24, 0x01	; 1
    5334:	8e 0f       	add	r24, r30
    5336:	80 93 fd 09 	sts	0x09FD, r24	; 0x8009fd <twi_masterBufferIndex>
    533a:	f0 e0       	ldi	r31, 0x00	; 0
    533c:	e2 50       	subi	r30, 0x02	; 2
    533e:	f6 4f       	sbci	r31, 0xF6	; 246
    5340:	80 81       	ld	r24, Z
    5342:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    5346:	85 ec       	ldi	r24, 0xC5	; 197
    5348:	82 c0       	rjmp	.+260    	; 0x544e <__vector_26+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    534a:	80 93 b8 09 	sts	0x09B8, r24	; 0x8009b8 <twi_error>
    534e:	8a c0       	rjmp	.+276    	; 0x5464 <__vector_26+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    5350:	e0 91 fd 09 	lds	r30, 0x09FD	; 0x8009fd <twi_masterBufferIndex>
    5354:	81 e0       	ldi	r24, 0x01	; 1
    5356:	8e 0f       	add	r24, r30
    5358:	80 93 fd 09 	sts	0x09FD, r24	; 0x8009fd <twi_masterBufferIndex>
    535c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5360:	f0 e0       	ldi	r31, 0x00	; 0
    5362:	e2 50       	subi	r30, 0x02	; 2
    5364:	f6 4f       	sbci	r31, 0xF6	; 246
    5366:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    5368:	90 91 fd 09 	lds	r25, 0x09FD	; 0x8009fd <twi_masterBufferIndex>
    536c:	80 91 fc 09 	lds	r24, 0x09FC	; 0x8009fc <twi_masterBufferLength>
    5370:	6a c0       	rjmp	.+212    	; 0x5446 <__vector_26+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    5372:	e0 91 fd 09 	lds	r30, 0x09FD	; 0x8009fd <twi_masterBufferIndex>
    5376:	81 e0       	ldi	r24, 0x01	; 1
    5378:	8e 0f       	add	r24, r30
    537a:	80 93 fd 09 	sts	0x09FD, r24	; 0x8009fd <twi_masterBufferIndex>
    537e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5382:	f0 e0       	ldi	r31, 0x00	; 0
    5384:	e2 50       	subi	r30, 0x02	; 2
    5386:	f6 4f       	sbci	r31, 0xF6	; 246
    5388:	80 83       	st	Z, r24
	if (twi_sendStop)
    538a:	80 91 23 0a 	lds	r24, 0x0A23	; 0x800a23 <twi_sendStop>
    538e:	81 11       	cpse	r24, r1
    5390:	69 c0       	rjmp	.+210    	; 0x5464 <__vector_26+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    5392:	81 e0       	ldi	r24, 0x01	; 1
    5394:	80 93 22 0a 	sts	0x0A22, r24	; 0x800a22 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    5398:	84 ea       	ldi	r24, 0xA4	; 164
    539a:	5d c0       	rjmp	.+186    	; 0x5456 <__vector_26+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    539c:	83 e0       	ldi	r24, 0x03	; 3
    539e:	80 93 25 0a 	sts	0x0A25, r24	; 0x800a25 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    53a2:	10 92 b9 09 	sts	0x09B9, r1	; 0x8009b9 <twi_rxBufferIndex>
    53a6:	cf cf       	rjmp	.-98     	; 0x5346 <__vector_26+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    53a8:	80 91 b9 09 	lds	r24, 0x09B9	; 0x8009b9 <twi_rxBufferIndex>
    53ac:	80 32       	cpi	r24, 0x20	; 32
    53ae:	08 f0       	brcs	.+2      	; 0x53b2 <__vector_26+0x182>
    53b0:	4d c0       	rjmp	.+154    	; 0x544c <__vector_26+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    53b2:	e0 91 b9 09 	lds	r30, 0x09B9	; 0x8009b9 <twi_rxBufferIndex>
    53b6:	81 e0       	ldi	r24, 0x01	; 1
    53b8:	8e 0f       	add	r24, r30
    53ba:	80 93 b9 09 	sts	0x09B9, r24	; 0x8009b9 <twi_rxBufferIndex>
    53be:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    53c2:	f0 e0       	ldi	r31, 0x00	; 0
    53c4:	e6 54       	subi	r30, 0x46	; 70
    53c6:	f6 4f       	sbci	r31, 0xF6	; 246
    53c8:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    53ca:	bd cf       	rjmp	.-134    	; 0x5346 <__vector_26+0x116>
    53cc:	2b df       	rcall	.-426    	; 0x5224 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    53ce:	80 91 b9 09 	lds	r24, 0x09B9	; 0x8009b9 <twi_rxBufferIndex>
    53d2:	80 32       	cpi	r24, 0x20	; 32
    53d4:	30 f4       	brcc	.+12     	; 0x53e2 <__vector_26+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    53d6:	e0 91 b9 09 	lds	r30, 0x09B9	; 0x8009b9 <twi_rxBufferIndex>
    53da:	f0 e0       	ldi	r31, 0x00	; 0
    53dc:	e6 54       	subi	r30, 0x46	; 70
    53de:	f6 4f       	sbci	r31, 0xF6	; 246
    53e0:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    53e2:	60 91 b9 09 	lds	r22, 0x09B9	; 0x8009b9 <twi_rxBufferIndex>
    53e6:	70 e0       	ldi	r23, 0x00	; 0
    53e8:	e0 91 1e 0a 	lds	r30, 0x0A1E	; 0x800a1e <twi_onSlaveReceive>
    53ec:	f0 91 1f 0a 	lds	r31, 0x0A1F	; 0x800a1f <twi_onSlaveReceive+0x1>
    53f0:	8a eb       	ldi	r24, 0xBA	; 186
    53f2:	99 e0       	ldi	r25, 0x09	; 9
    53f4:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    53f6:	10 92 b9 09 	sts	0x09B9, r1	; 0x8009b9 <twi_rxBufferIndex>
      break;
    53fa:	35 c0       	rjmp	.+106    	; 0x5466 <__vector_26+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    53fc:	84 e0       	ldi	r24, 0x04	; 4
    53fe:	80 93 25 0a 	sts	0x0A25, r24	; 0x800a25 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    5402:	10 92 db 09 	sts	0x09DB, r1	; 0x8009db <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    5406:	10 92 da 09 	sts	0x09DA, r1	; 0x8009da <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    540a:	e0 91 20 0a 	lds	r30, 0x0A20	; 0x800a20 <twi_onSlaveTransmit>
    540e:	f0 91 21 0a 	lds	r31, 0x0A21	; 0x800a21 <twi_onSlaveTransmit+0x1>
    5412:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    5414:	80 91 da 09 	lds	r24, 0x09DA	; 0x8009da <twi_txBufferLength>
    5418:	81 11       	cpse	r24, r1
    541a:	05 c0       	rjmp	.+10     	; 0x5426 <__vector_26+0x1f6>
        twi_txBufferLength = 1;
    541c:	81 e0       	ldi	r24, 0x01	; 1
    541e:	80 93 da 09 	sts	0x09DA, r24	; 0x8009da <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    5422:	10 92 dc 09 	sts	0x09DC, r1	; 0x8009dc <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    5426:	e0 91 db 09 	lds	r30, 0x09DB	; 0x8009db <twi_txBufferIndex>
    542a:	81 e0       	ldi	r24, 0x01	; 1
    542c:	8e 0f       	add	r24, r30
    542e:	80 93 db 09 	sts	0x09DB, r24	; 0x8009db <twi_txBufferIndex>
    5432:	f0 e0       	ldi	r31, 0x00	; 0
    5434:	e4 52       	subi	r30, 0x24	; 36
    5436:	f6 4f       	sbci	r31, 0xF6	; 246
    5438:	80 81       	ld	r24, Z
    543a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    543e:	90 91 db 09 	lds	r25, 0x09DB	; 0x8009db <twi_txBufferIndex>
    5442:	80 91 da 09 	lds	r24, 0x09DA	; 0x8009da <twi_txBufferLength>
    5446:	98 17       	cp	r25, r24
    5448:	08 f4       	brcc	.+2      	; 0x544c <__vector_26+0x21c>
    544a:	7d cf       	rjmp	.-262    	; 0x5346 <__vector_26+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    544c:	85 e8       	ldi	r24, 0x85	; 133
    544e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5452:	09 c0       	rjmp	.+18     	; 0x5466 <__vector_26+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    5454:	85 ec       	ldi	r24, 0xC5	; 197
    5456:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    545a:	10 92 25 0a 	sts	0x0A25, r1	; 0x800a25 <twi_state>
      break;
    545e:	03 c0       	rjmp	.+6      	; 0x5466 <__vector_26+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    5460:	10 92 b8 09 	sts	0x09B8, r1	; 0x8009b8 <twi_error>
      twi_stop();
    5464:	d5 de       	rcall	.-598    	; 0x5210 <twi_stop>
      break;
  }
}
    5466:	ff 91       	pop	r31
    5468:	ef 91       	pop	r30
    546a:	bf 91       	pop	r27
    546c:	af 91       	pop	r26
    546e:	9f 91       	pop	r25
    5470:	8f 91       	pop	r24
    5472:	7f 91       	pop	r23
    5474:	6f 91       	pop	r22
    5476:	5f 91       	pop	r21
    5478:	4f 91       	pop	r20
    547a:	3f 91       	pop	r19
    547c:	2f 91       	pop	r18
    547e:	0f 90       	pop	r0
    5480:	0b be       	out	0x3b, r0	; 59
    5482:	0f 90       	pop	r0
    5484:	0f be       	out	0x3f, r0	; 63
    5486:	0f 90       	pop	r0
    5488:	1f 90       	pop	r1
    548a:	18 95       	reti

0000548c <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    548c:	80 91 5a 0a 	lds	r24, 0x0A5A	; 0x800a5a <_ZN7TwoWire14rxBufferLengthE>
    5490:	90 e0       	ldi	r25, 0x00	; 0
    5492:	20 91 5b 0a 	lds	r18, 0x0A5B	; 0x800a5b <_ZN7TwoWire13rxBufferIndexE>
    5496:	82 1b       	sub	r24, r18
    5498:	91 09       	sbc	r25, r1
    549a:	08 95       	ret

0000549c <_ZN7TwoWire4readEv>:
    549c:	90 91 5b 0a 	lds	r25, 0x0A5B	; 0x800a5b <_ZN7TwoWire13rxBufferIndexE>
    54a0:	80 91 5a 0a 	lds	r24, 0x0A5A	; 0x800a5a <_ZN7TwoWire14rxBufferLengthE>
    54a4:	98 17       	cp	r25, r24
    54a6:	50 f4       	brcc	.+20     	; 0x54bc <_ZN7TwoWire4readEv+0x20>
    54a8:	e9 2f       	mov	r30, r25
    54aa:	f0 e0       	ldi	r31, 0x00	; 0
    54ac:	e4 5a       	subi	r30, 0xA4	; 164
    54ae:	f5 4f       	sbci	r31, 0xF5	; 245
    54b0:	20 81       	ld	r18, Z
    54b2:	30 e0       	ldi	r19, 0x00	; 0
    54b4:	9f 5f       	subi	r25, 0xFF	; 255
    54b6:	90 93 5b 0a 	sts	0x0A5B, r25	; 0x800a5b <_ZN7TwoWire13rxBufferIndexE>
    54ba:	02 c0       	rjmp	.+4      	; 0x54c0 <_ZN7TwoWire4readEv+0x24>
    54bc:	2f ef       	ldi	r18, 0xFF	; 255
    54be:	3f ef       	ldi	r19, 0xFF	; 255
    54c0:	c9 01       	movw	r24, r18
    54c2:	08 95       	ret

000054c4 <_ZN7TwoWire4peekEv>:
    54c4:	e0 91 5b 0a 	lds	r30, 0x0A5B	; 0x800a5b <_ZN7TwoWire13rxBufferIndexE>
    54c8:	80 91 5a 0a 	lds	r24, 0x0A5A	; 0x800a5a <_ZN7TwoWire14rxBufferLengthE>
    54cc:	e8 17       	cp	r30, r24
    54ce:	30 f4       	brcc	.+12     	; 0x54dc <_ZN7TwoWire4peekEv+0x18>
    54d0:	f0 e0       	ldi	r31, 0x00	; 0
    54d2:	e4 5a       	subi	r30, 0xA4	; 164
    54d4:	f5 4f       	sbci	r31, 0xF5	; 245
    54d6:	80 81       	ld	r24, Z
    54d8:	90 e0       	ldi	r25, 0x00	; 0
    54da:	08 95       	ret
    54dc:	8f ef       	ldi	r24, 0xFF	; 255
    54de:	9f ef       	ldi	r25, 0xFF	; 255
    54e0:	08 95       	ret

000054e2 <_ZN7TwoWire5flushEv>:
    54e2:	08 95       	ret

000054e4 <_ZN7TwoWire16onReceiveServiceEPhi>:
    54e4:	cf 93       	push	r28
    54e6:	df 93       	push	r29
    54e8:	ec 01       	movw	r28, r24
    54ea:	e0 91 32 0a 	lds	r30, 0x0A32	; 0x800a32 <_ZN7TwoWire14user_onReceiveE>
    54ee:	f0 91 33 0a 	lds	r31, 0x0A33	; 0x800a33 <_ZN7TwoWire14user_onReceiveE+0x1>
    54f2:	30 97       	sbiw	r30, 0x00	; 0
    54f4:	f1 f0       	breq	.+60     	; 0x5532 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    54f6:	90 91 5b 0a 	lds	r25, 0x0A5B	; 0x800a5b <_ZN7TwoWire13rxBufferIndexE>
    54fa:	80 91 5a 0a 	lds	r24, 0x0A5A	; 0x800a5a <_ZN7TwoWire14rxBufferLengthE>
    54fe:	98 17       	cp	r25, r24
    5500:	c0 f0       	brcs	.+48     	; 0x5532 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    5502:	90 e0       	ldi	r25, 0x00	; 0
    5504:	29 2f       	mov	r18, r25
    5506:	30 e0       	ldi	r19, 0x00	; 0
    5508:	26 17       	cp	r18, r22
    550a:	37 07       	cpc	r19, r23
    550c:	54 f4       	brge	.+20     	; 0x5522 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    550e:	de 01       	movw	r26, r28
    5510:	a2 0f       	add	r26, r18
    5512:	b3 1f       	adc	r27, r19
    5514:	4c 91       	ld	r20, X
    5516:	d9 01       	movw	r26, r18
    5518:	a4 5a       	subi	r26, 0xA4	; 164
    551a:	b5 4f       	sbci	r27, 0xF5	; 245
    551c:	4c 93       	st	X, r20
    551e:	9f 5f       	subi	r25, 0xFF	; 255
    5520:	f1 cf       	rjmp	.-30     	; 0x5504 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    5522:	10 92 5b 0a 	sts	0x0A5B, r1	; 0x800a5b <_ZN7TwoWire13rxBufferIndexE>
    5526:	60 93 5a 0a 	sts	0x0A5A, r22	; 0x800a5a <_ZN7TwoWire14rxBufferLengthE>
    552a:	cb 01       	movw	r24, r22
    552c:	df 91       	pop	r29
    552e:	cf 91       	pop	r28
    5530:	09 94       	ijmp
    5532:	df 91       	pop	r29
    5534:	cf 91       	pop	r28
    5536:	08 95       	ret

00005538 <_ZN7TwoWire16onRequestServiceEv>:
    5538:	e0 91 34 0a 	lds	r30, 0x0A34	; 0x800a34 <_ZN7TwoWire14user_onRequestE>
    553c:	f0 91 35 0a 	lds	r31, 0x0A35	; 0x800a35 <_ZN7TwoWire14user_onRequestE+0x1>
    5540:	30 97       	sbiw	r30, 0x00	; 0
    5542:	29 f0       	breq	.+10     	; 0x554e <_ZN7TwoWire16onRequestServiceEv+0x16>
    5544:	10 92 38 0a 	sts	0x0A38, r1	; 0x800a38 <_ZN7TwoWire13txBufferIndexE>
    5548:	10 92 37 0a 	sts	0x0A37, r1	; 0x800a37 <_ZN7TwoWire14txBufferLengthE>
    554c:	09 94       	ijmp
    554e:	08 95       	ret

00005550 <_ZN7TwoWire5writeEPKhj>:
    5550:	cf 92       	push	r12
    5552:	df 92       	push	r13
    5554:	ef 92       	push	r14
    5556:	ff 92       	push	r15
    5558:	0f 93       	push	r16
    555a:	1f 93       	push	r17
    555c:	cf 93       	push	r28
    555e:	df 93       	push	r29
    5560:	7c 01       	movw	r14, r24
    5562:	cb 01       	movw	r24, r22
    5564:	8a 01       	movw	r16, r20
    5566:	20 91 36 0a 	lds	r18, 0x0A36	; 0x800a36 <_ZN7TwoWire12transmittingE>
    556a:	22 23       	and	r18, r18
    556c:	89 f0       	breq	.+34     	; 0x5590 <_ZN7TwoWire5writeEPKhj+0x40>
    556e:	eb 01       	movw	r28, r22
    5570:	6b 01       	movw	r12, r22
    5572:	c4 0e       	add	r12, r20
    5574:	d5 1e       	adc	r13, r21
    5576:	cc 15       	cp	r28, r12
    5578:	dd 05       	cpc	r29, r13
    557a:	61 f0       	breq	.+24     	; 0x5594 <_ZN7TwoWire5writeEPKhj+0x44>
    557c:	69 91       	ld	r22, Y+
    557e:	d7 01       	movw	r26, r14
    5580:	ed 91       	ld	r30, X+
    5582:	fc 91       	ld	r31, X
    5584:	01 90       	ld	r0, Z+
    5586:	f0 81       	ld	r31, Z
    5588:	e0 2d       	mov	r30, r0
    558a:	c7 01       	movw	r24, r14
    558c:	09 95       	icall
    558e:	f3 cf       	rjmp	.-26     	; 0x5576 <_ZN7TwoWire5writeEPKhj+0x26>
    5590:	64 2f       	mov	r22, r20
    5592:	0c de       	rcall	.-1000   	; 0x51ac <twi_transmit>
    5594:	c8 01       	movw	r24, r16
    5596:	df 91       	pop	r29
    5598:	cf 91       	pop	r28
    559a:	1f 91       	pop	r17
    559c:	0f 91       	pop	r16
    559e:	ff 90       	pop	r15
    55a0:	ef 90       	pop	r14
    55a2:	df 90       	pop	r13
    55a4:	cf 90       	pop	r12
    55a6:	08 95       	ret

000055a8 <_ZN7TwoWire5writeEh>:
    55a8:	cf 93       	push	r28
    55aa:	df 93       	push	r29
    55ac:	1f 92       	push	r1
    55ae:	cd b7       	in	r28, 0x3d	; 61
    55b0:	de b7       	in	r29, 0x3e	; 62
    55b2:	69 83       	std	Y+1, r22	; 0x01
    55b4:	20 91 36 0a 	lds	r18, 0x0A36	; 0x800a36 <_ZN7TwoWire12transmittingE>
    55b8:	22 23       	and	r18, r18
    55ba:	d1 f0       	breq	.+52     	; 0x55f0 <_ZN7TwoWire5writeEh+0x48>
    55bc:	20 91 37 0a 	lds	r18, 0x0A37	; 0x800a37 <_ZN7TwoWire14txBufferLengthE>
    55c0:	20 32       	cpi	r18, 0x20	; 32
    55c2:	40 f0       	brcs	.+16     	; 0x55d4 <_ZN7TwoWire5writeEh+0x2c>
    55c4:	21 e0       	ldi	r18, 0x01	; 1
    55c6:	30 e0       	ldi	r19, 0x00	; 0
    55c8:	fc 01       	movw	r30, r24
    55ca:	33 83       	std	Z+3, r19	; 0x03
    55cc:	22 83       	std	Z+2, r18	; 0x02
    55ce:	80 e0       	ldi	r24, 0x00	; 0
    55d0:	90 e0       	ldi	r25, 0x00	; 0
    55d2:	14 c0       	rjmp	.+40     	; 0x55fc <_ZN7TwoWire5writeEh+0x54>
    55d4:	80 91 38 0a 	lds	r24, 0x0A38	; 0x800a38 <_ZN7TwoWire13txBufferIndexE>
    55d8:	e8 2f       	mov	r30, r24
    55da:	f0 e0       	ldi	r31, 0x00	; 0
    55dc:	e7 5c       	subi	r30, 0xC7	; 199
    55de:	f5 4f       	sbci	r31, 0xF5	; 245
    55e0:	99 81       	ldd	r25, Y+1	; 0x01
    55e2:	90 83       	st	Z, r25
    55e4:	8f 5f       	subi	r24, 0xFF	; 255
    55e6:	80 93 38 0a 	sts	0x0A38, r24	; 0x800a38 <_ZN7TwoWire13txBufferIndexE>
    55ea:	80 93 37 0a 	sts	0x0A37, r24	; 0x800a37 <_ZN7TwoWire14txBufferLengthE>
    55ee:	04 c0       	rjmp	.+8      	; 0x55f8 <_ZN7TwoWire5writeEh+0x50>
    55f0:	61 e0       	ldi	r22, 0x01	; 1
    55f2:	ce 01       	movw	r24, r28
    55f4:	01 96       	adiw	r24, 0x01	; 1
    55f6:	da dd       	rcall	.-1100   	; 0x51ac <twi_transmit>
    55f8:	81 e0       	ldi	r24, 0x01	; 1
    55fa:	90 e0       	ldi	r25, 0x00	; 0
    55fc:	0f 90       	pop	r0
    55fe:	df 91       	pop	r29
    5600:	cf 91       	pop	r28
    5602:	08 95       	ret

00005604 <_ZN7TwoWireC1Ev>:
    5604:	fc 01       	movw	r30, r24
    5606:	13 82       	std	Z+3, r1	; 0x03
    5608:	12 82       	std	Z+2, r1	; 0x02
    560a:	88 ee       	ldi	r24, 0xE8	; 232
    560c:	93 e0       	ldi	r25, 0x03	; 3
    560e:	a0 e0       	ldi	r26, 0x00	; 0
    5610:	b0 e0       	ldi	r27, 0x00	; 0
    5612:	84 83       	std	Z+4, r24	; 0x04
    5614:	95 83       	std	Z+5, r25	; 0x05
    5616:	a6 83       	std	Z+6, r26	; 0x06
    5618:	b7 83       	std	Z+7, r27	; 0x07
    561a:	8b ee       	ldi	r24, 0xEB	; 235
    561c:	97 e0       	ldi	r25, 0x07	; 7
    561e:	91 83       	std	Z+1, r25	; 0x01
    5620:	80 83       	st	Z, r24
    5622:	08 95       	ret

00005624 <_ZN7TwoWire5beginEv>:
    5624:	10 92 5b 0a 	sts	0x0A5B, r1	; 0x800a5b <_ZN7TwoWire13rxBufferIndexE>
    5628:	10 92 5a 0a 	sts	0x0A5A, r1	; 0x800a5a <_ZN7TwoWire14rxBufferLengthE>
    562c:	10 92 38 0a 	sts	0x0A38, r1	; 0x800a38 <_ZN7TwoWire13txBufferIndexE>
    5630:	10 92 37 0a 	sts	0x0A37, r1	; 0x800a37 <_ZN7TwoWire14txBufferLengthE>
    5634:	de dc       	rcall	.-1604   	; 0x4ff2 <twi_init>
    5636:	8c e9       	ldi	r24, 0x9C	; 156
    5638:	9a e2       	ldi	r25, 0x2A	; 42
    563a:	e5 dd       	rcall	.-1078   	; 0x5206 <twi_attachSlaveTxEvent>
    563c:	82 e7       	ldi	r24, 0x72	; 114
    563e:	9a e2       	ldi	r25, 0x2A	; 42
    5640:	dd cd       	rjmp	.-1094   	; 0x51fc <twi_attachSlaveRxEvent>

00005642 <_ZN7TwoWire3endEv>:
    5642:	f5 cc       	rjmp	.-1558   	; 0x502e <twi_disable>

00005644 <_ZN7TwoWire8setClockEm>:
    5644:	cb 01       	movw	r24, r22
    5646:	ba 01       	movw	r22, r20
    5648:	ff cc       	rjmp	.-1538   	; 0x5048 <twi_setFrequency>

0000564a <_ZN7TwoWire17beginTransmissionEh>:
    564a:	81 e0       	ldi	r24, 0x01	; 1
    564c:	80 93 36 0a 	sts	0x0A36, r24	; 0x800a36 <_ZN7TwoWire12transmittingE>
    5650:	60 93 59 0a 	sts	0x0A59, r22	; 0x800a59 <_ZN7TwoWire9txAddressE>
    5654:	10 92 38 0a 	sts	0x0A38, r1	; 0x800a38 <_ZN7TwoWire13txBufferIndexE>
    5658:	10 92 37 0a 	sts	0x0A37, r1	; 0x800a37 <_ZN7TwoWire14txBufferLengthE>
    565c:	08 95       	ret

0000565e <_ZN7TwoWire17beginTransmissionEi>:
    565e:	f5 cf       	rjmp	.-22     	; 0x564a <_ZN7TwoWire17beginTransmissionEh>

00005660 <_ZN7TwoWire15endTransmissionEh>:
    5660:	0f 93       	push	r16
    5662:	06 2f       	mov	r16, r22
    5664:	21 e0       	ldi	r18, 0x01	; 1
    5666:	40 91 37 0a 	lds	r20, 0x0A37	; 0x800a37 <_ZN7TwoWire14txBufferLengthE>
    566a:	69 e3       	ldi	r22, 0x39	; 57
    566c:	7a e0       	ldi	r23, 0x0A	; 10
    566e:	80 91 59 0a 	lds	r24, 0x0A59	; 0x800a59 <_ZN7TwoWire9txAddressE>
    5672:	46 dd       	rcall	.-1396   	; 0x5100 <twi_writeTo>
    5674:	10 92 38 0a 	sts	0x0A38, r1	; 0x800a38 <_ZN7TwoWire13txBufferIndexE>
    5678:	10 92 37 0a 	sts	0x0A37, r1	; 0x800a37 <_ZN7TwoWire14txBufferLengthE>
    567c:	10 92 36 0a 	sts	0x0A36, r1	; 0x800a36 <_ZN7TwoWire12transmittingE>
    5680:	0f 91       	pop	r16
    5682:	08 95       	ret

00005684 <_ZN7TwoWire11requestFromEhhmhh>:
    5684:	4f 92       	push	r4
    5686:	5f 92       	push	r5
    5688:	6f 92       	push	r6
    568a:	7f 92       	push	r7
    568c:	af 92       	push	r10
    568e:	bf 92       	push	r11
    5690:	cf 92       	push	r12
    5692:	ef 92       	push	r14
    5694:	ff 92       	push	r15
    5696:	0f 93       	push	r16
    5698:	1f 93       	push	r17
    569a:	cf 93       	push	r28
    569c:	df 93       	push	r29
    569e:	5c 01       	movw	r10, r24
    56a0:	f6 2e       	mov	r15, r22
    56a2:	d4 2f       	mov	r29, r20
    56a4:	28 01       	movw	r4, r16
    56a6:	39 01       	movw	r6, r18
    56a8:	ee 20       	and	r14, r14
    56aa:	11 f1       	breq	.+68     	; 0x56f0 <_ZN7TwoWire11requestFromEhhmhh+0x6c>
    56ac:	ce df       	rcall	.-100    	; 0x564a <_ZN7TwoWire17beginTransmissionEh>
    56ae:	ce 2d       	mov	r28, r14
    56b0:	c4 30       	cpi	r28, 0x04	; 4
    56b2:	08 f0       	brcs	.+2      	; 0x56b6 <_ZN7TwoWire11requestFromEhhmhh+0x32>
    56b4:	c3 e0       	ldi	r28, 0x03	; 3
    56b6:	c1 50       	subi	r28, 0x01	; 1
    56b8:	c0 f0       	brcs	.+48     	; 0x56ea <_ZN7TwoWire11requestFromEhhmhh+0x66>
    56ba:	28 e0       	ldi	r18, 0x08	; 8
    56bc:	c2 9f       	mul	r28, r18
    56be:	c0 01       	movw	r24, r0
    56c0:	11 24       	eor	r1, r1
    56c2:	a3 01       	movw	r20, r6
    56c4:	92 01       	movw	r18, r4
    56c6:	04 c0       	rjmp	.+8      	; 0x56d0 <_ZN7TwoWire11requestFromEhhmhh+0x4c>
    56c8:	56 95       	lsr	r21
    56ca:	47 95       	ror	r20
    56cc:	37 95       	ror	r19
    56ce:	27 95       	ror	r18
    56d0:	8a 95       	dec	r24
    56d2:	d2 f7       	brpl	.-12     	; 0x56c8 <_ZN7TwoWire11requestFromEhhmhh+0x44>
    56d4:	ca 01       	movw	r24, r20
    56d6:	b9 01       	movw	r22, r18
    56d8:	d5 01       	movw	r26, r10
    56da:	ed 91       	ld	r30, X+
    56dc:	fc 91       	ld	r31, X
    56de:	01 90       	ld	r0, Z+
    56e0:	f0 81       	ld	r31, Z
    56e2:	e0 2d       	mov	r30, r0
    56e4:	c5 01       	movw	r24, r10
    56e6:	09 95       	icall
    56e8:	e6 cf       	rjmp	.-52     	; 0x56b6 <_ZN7TwoWire11requestFromEhhmhh+0x32>
    56ea:	60 e0       	ldi	r22, 0x00	; 0
    56ec:	c5 01       	movw	r24, r10
    56ee:	b8 df       	rcall	.-144    	; 0x5660 <_ZN7TwoWire15endTransmissionEh>
    56f0:	4d 2f       	mov	r20, r29
    56f2:	d1 32       	cpi	r29, 0x21	; 33
    56f4:	08 f0       	brcs	.+2      	; 0x56f8 <_ZN7TwoWire11requestFromEhhmhh+0x74>
    56f6:	40 e2       	ldi	r20, 0x20	; 32
    56f8:	2c 2d       	mov	r18, r12
    56fa:	6c e5       	ldi	r22, 0x5C	; 92
    56fc:	7a e0       	ldi	r23, 0x0A	; 10
    56fe:	8f 2d       	mov	r24, r15
    5700:	b7 dc       	rcall	.-1682   	; 0x5070 <twi_readFrom>
    5702:	10 92 5b 0a 	sts	0x0A5B, r1	; 0x800a5b <_ZN7TwoWire13rxBufferIndexE>
    5706:	80 93 5a 0a 	sts	0x0A5A, r24	; 0x800a5a <_ZN7TwoWire14rxBufferLengthE>
    570a:	df 91       	pop	r29
    570c:	cf 91       	pop	r28
    570e:	1f 91       	pop	r17
    5710:	0f 91       	pop	r16
    5712:	ff 90       	pop	r15
    5714:	ef 90       	pop	r14
    5716:	cf 90       	pop	r12
    5718:	bf 90       	pop	r11
    571a:	af 90       	pop	r10
    571c:	7f 90       	pop	r7
    571e:	6f 90       	pop	r6
    5720:	5f 90       	pop	r5
    5722:	4f 90       	pop	r4
    5724:	08 95       	ret

00005726 <_ZN7TwoWire11requestFromEhhh>:
    5726:	cf 92       	push	r12
    5728:	ef 92       	push	r14
    572a:	0f 93       	push	r16
    572c:	1f 93       	push	r17
    572e:	c2 2e       	mov	r12, r18
    5730:	e1 2c       	mov	r14, r1
    5732:	00 e0       	ldi	r16, 0x00	; 0
    5734:	10 e0       	ldi	r17, 0x00	; 0
    5736:	98 01       	movw	r18, r16
    5738:	a5 df       	rcall	.-182    	; 0x5684 <_ZN7TwoWire11requestFromEhhmhh>
    573a:	1f 91       	pop	r17
    573c:	0f 91       	pop	r16
    573e:	ef 90       	pop	r14
    5740:	cf 90       	pop	r12
    5742:	08 95       	ret

00005744 <_ZN7TwoWire11requestFromEhh>:
    5744:	21 e0       	ldi	r18, 0x01	; 1
    5746:	ef cf       	rjmp	.-34     	; 0x5726 <_ZN7TwoWire11requestFromEhhh>

00005748 <_ZN7TwoWire11requestFromEii>:
    5748:	21 e0       	ldi	r18, 0x01	; 1
    574a:	ed cf       	rjmp	.-38     	; 0x5726 <_ZN7TwoWire11requestFromEhhh>

0000574c <_ZN7TwoWire15endTransmissionEv>:
    574c:	61 e0       	ldi	r22, 0x01	; 1
    574e:	88 cf       	rjmp	.-240    	; 0x5660 <_ZN7TwoWire15endTransmissionEh>

00005750 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    5750:	86 e2       	ldi	r24, 0x26	; 38
    5752:	9a e0       	ldi	r25, 0x0A	; 10
    5754:	57 cf       	rjmp	.-338    	; 0x5604 <_ZN7TwoWireC1Ev>

00005756 <__cmpsf2>:
    5756:	a8 d0       	rcall	.+336    	; 0x58a8 <__fp_cmp>
    5758:	08 f4       	brcc	.+2      	; 0x575c <__cmpsf2+0x6>
    575a:	81 e0       	ldi	r24, 0x01	; 1
    575c:	08 95       	ret

0000575e <__divsf3>:
    575e:	0c d0       	rcall	.+24     	; 0x5778 <__divsf3x>
    5760:	de c0       	rjmp	.+444    	; 0x591e <__fp_round>
    5762:	d6 d0       	rcall	.+428    	; 0x5910 <__fp_pscB>
    5764:	40 f0       	brcs	.+16     	; 0x5776 <__divsf3+0x18>
    5766:	cd d0       	rcall	.+410    	; 0x5902 <__fp_pscA>
    5768:	30 f0       	brcs	.+12     	; 0x5776 <__divsf3+0x18>
    576a:	21 f4       	brne	.+8      	; 0x5774 <__divsf3+0x16>
    576c:	5f 3f       	cpi	r21, 0xFF	; 255
    576e:	19 f0       	breq	.+6      	; 0x5776 <__divsf3+0x18>
    5770:	bf c0       	rjmp	.+382    	; 0x58f0 <__fp_inf>
    5772:	51 11       	cpse	r21, r1
    5774:	08 c1       	rjmp	.+528    	; 0x5986 <__fp_szero>
    5776:	c2 c0       	rjmp	.+388    	; 0x58fc <__fp_nan>

00005778 <__divsf3x>:
    5778:	e3 d0       	rcall	.+454    	; 0x5940 <__fp_split3>
    577a:	98 f3       	brcs	.-26     	; 0x5762 <__divsf3+0x4>

0000577c <__divsf3_pse>:
    577c:	99 23       	and	r25, r25
    577e:	c9 f3       	breq	.-14     	; 0x5772 <__divsf3+0x14>
    5780:	55 23       	and	r21, r21
    5782:	b1 f3       	breq	.-20     	; 0x5770 <__divsf3+0x12>
    5784:	95 1b       	sub	r25, r21
    5786:	55 0b       	sbc	r21, r21
    5788:	bb 27       	eor	r27, r27
    578a:	aa 27       	eor	r26, r26
    578c:	62 17       	cp	r22, r18
    578e:	73 07       	cpc	r23, r19
    5790:	84 07       	cpc	r24, r20
    5792:	38 f0       	brcs	.+14     	; 0x57a2 <__divsf3_pse+0x26>
    5794:	9f 5f       	subi	r25, 0xFF	; 255
    5796:	5f 4f       	sbci	r21, 0xFF	; 255
    5798:	22 0f       	add	r18, r18
    579a:	33 1f       	adc	r19, r19
    579c:	44 1f       	adc	r20, r20
    579e:	aa 1f       	adc	r26, r26
    57a0:	a9 f3       	breq	.-22     	; 0x578c <__divsf3_pse+0x10>
    57a2:	33 d0       	rcall	.+102    	; 0x580a <__divsf3_pse+0x8e>
    57a4:	0e 2e       	mov	r0, r30
    57a6:	3a f0       	brmi	.+14     	; 0x57b6 <__divsf3_pse+0x3a>
    57a8:	e0 e8       	ldi	r30, 0x80	; 128
    57aa:	30 d0       	rcall	.+96     	; 0x580c <__divsf3_pse+0x90>
    57ac:	91 50       	subi	r25, 0x01	; 1
    57ae:	50 40       	sbci	r21, 0x00	; 0
    57b0:	e6 95       	lsr	r30
    57b2:	00 1c       	adc	r0, r0
    57b4:	ca f7       	brpl	.-14     	; 0x57a8 <__divsf3_pse+0x2c>
    57b6:	29 d0       	rcall	.+82     	; 0x580a <__divsf3_pse+0x8e>
    57b8:	fe 2f       	mov	r31, r30
    57ba:	27 d0       	rcall	.+78     	; 0x580a <__divsf3_pse+0x8e>
    57bc:	66 0f       	add	r22, r22
    57be:	77 1f       	adc	r23, r23
    57c0:	88 1f       	adc	r24, r24
    57c2:	bb 1f       	adc	r27, r27
    57c4:	26 17       	cp	r18, r22
    57c6:	37 07       	cpc	r19, r23
    57c8:	48 07       	cpc	r20, r24
    57ca:	ab 07       	cpc	r26, r27
    57cc:	b0 e8       	ldi	r27, 0x80	; 128
    57ce:	09 f0       	breq	.+2      	; 0x57d2 <__divsf3_pse+0x56>
    57d0:	bb 0b       	sbc	r27, r27
    57d2:	80 2d       	mov	r24, r0
    57d4:	bf 01       	movw	r22, r30
    57d6:	ff 27       	eor	r31, r31
    57d8:	93 58       	subi	r25, 0x83	; 131
    57da:	5f 4f       	sbci	r21, 0xFF	; 255
    57dc:	2a f0       	brmi	.+10     	; 0x57e8 <__divsf3_pse+0x6c>
    57de:	9e 3f       	cpi	r25, 0xFE	; 254
    57e0:	51 05       	cpc	r21, r1
    57e2:	68 f0       	brcs	.+26     	; 0x57fe <__divsf3_pse+0x82>
    57e4:	85 c0       	rjmp	.+266    	; 0x58f0 <__fp_inf>
    57e6:	cf c0       	rjmp	.+414    	; 0x5986 <__fp_szero>
    57e8:	5f 3f       	cpi	r21, 0xFF	; 255
    57ea:	ec f3       	brlt	.-6      	; 0x57e6 <__divsf3_pse+0x6a>
    57ec:	98 3e       	cpi	r25, 0xE8	; 232
    57ee:	dc f3       	brlt	.-10     	; 0x57e6 <__divsf3_pse+0x6a>
    57f0:	86 95       	lsr	r24
    57f2:	77 95       	ror	r23
    57f4:	67 95       	ror	r22
    57f6:	b7 95       	ror	r27
    57f8:	f7 95       	ror	r31
    57fa:	9f 5f       	subi	r25, 0xFF	; 255
    57fc:	c9 f7       	brne	.-14     	; 0x57f0 <__divsf3_pse+0x74>
    57fe:	88 0f       	add	r24, r24
    5800:	91 1d       	adc	r25, r1
    5802:	96 95       	lsr	r25
    5804:	87 95       	ror	r24
    5806:	97 f9       	bld	r25, 7
    5808:	08 95       	ret
    580a:	e1 e0       	ldi	r30, 0x01	; 1
    580c:	66 0f       	add	r22, r22
    580e:	77 1f       	adc	r23, r23
    5810:	88 1f       	adc	r24, r24
    5812:	bb 1f       	adc	r27, r27
    5814:	62 17       	cp	r22, r18
    5816:	73 07       	cpc	r23, r19
    5818:	84 07       	cpc	r24, r20
    581a:	ba 07       	cpc	r27, r26
    581c:	20 f0       	brcs	.+8      	; 0x5826 <__divsf3_pse+0xaa>
    581e:	62 1b       	sub	r22, r18
    5820:	73 0b       	sbc	r23, r19
    5822:	84 0b       	sbc	r24, r20
    5824:	ba 0b       	sbc	r27, r26
    5826:	ee 1f       	adc	r30, r30
    5828:	88 f7       	brcc	.-30     	; 0x580c <__divsf3_pse+0x90>
    582a:	e0 95       	com	r30
    582c:	08 95       	ret

0000582e <__floatunsisf>:
    582e:	e8 94       	clt
    5830:	09 c0       	rjmp	.+18     	; 0x5844 <__floatsisf+0x12>

00005832 <__floatsisf>:
    5832:	97 fb       	bst	r25, 7
    5834:	3e f4       	brtc	.+14     	; 0x5844 <__floatsisf+0x12>
    5836:	90 95       	com	r25
    5838:	80 95       	com	r24
    583a:	70 95       	com	r23
    583c:	61 95       	neg	r22
    583e:	7f 4f       	sbci	r23, 0xFF	; 255
    5840:	8f 4f       	sbci	r24, 0xFF	; 255
    5842:	9f 4f       	sbci	r25, 0xFF	; 255
    5844:	99 23       	and	r25, r25
    5846:	a9 f0       	breq	.+42     	; 0x5872 <__floatsisf+0x40>
    5848:	f9 2f       	mov	r31, r25
    584a:	96 e9       	ldi	r25, 0x96	; 150
    584c:	bb 27       	eor	r27, r27
    584e:	93 95       	inc	r25
    5850:	f6 95       	lsr	r31
    5852:	87 95       	ror	r24
    5854:	77 95       	ror	r23
    5856:	67 95       	ror	r22
    5858:	b7 95       	ror	r27
    585a:	f1 11       	cpse	r31, r1
    585c:	f8 cf       	rjmp	.-16     	; 0x584e <__floatsisf+0x1c>
    585e:	fa f4       	brpl	.+62     	; 0x589e <__floatsisf+0x6c>
    5860:	bb 0f       	add	r27, r27
    5862:	11 f4       	brne	.+4      	; 0x5868 <__floatsisf+0x36>
    5864:	60 ff       	sbrs	r22, 0
    5866:	1b c0       	rjmp	.+54     	; 0x589e <__floatsisf+0x6c>
    5868:	6f 5f       	subi	r22, 0xFF	; 255
    586a:	7f 4f       	sbci	r23, 0xFF	; 255
    586c:	8f 4f       	sbci	r24, 0xFF	; 255
    586e:	9f 4f       	sbci	r25, 0xFF	; 255
    5870:	16 c0       	rjmp	.+44     	; 0x589e <__floatsisf+0x6c>
    5872:	88 23       	and	r24, r24
    5874:	11 f0       	breq	.+4      	; 0x587a <__floatsisf+0x48>
    5876:	96 e9       	ldi	r25, 0x96	; 150
    5878:	11 c0       	rjmp	.+34     	; 0x589c <__floatsisf+0x6a>
    587a:	77 23       	and	r23, r23
    587c:	21 f0       	breq	.+8      	; 0x5886 <__floatsisf+0x54>
    587e:	9e e8       	ldi	r25, 0x8E	; 142
    5880:	87 2f       	mov	r24, r23
    5882:	76 2f       	mov	r23, r22
    5884:	05 c0       	rjmp	.+10     	; 0x5890 <__floatsisf+0x5e>
    5886:	66 23       	and	r22, r22
    5888:	71 f0       	breq	.+28     	; 0x58a6 <__floatsisf+0x74>
    588a:	96 e8       	ldi	r25, 0x86	; 134
    588c:	86 2f       	mov	r24, r22
    588e:	70 e0       	ldi	r23, 0x00	; 0
    5890:	60 e0       	ldi	r22, 0x00	; 0
    5892:	2a f0       	brmi	.+10     	; 0x589e <__floatsisf+0x6c>
    5894:	9a 95       	dec	r25
    5896:	66 0f       	add	r22, r22
    5898:	77 1f       	adc	r23, r23
    589a:	88 1f       	adc	r24, r24
    589c:	da f7       	brpl	.-10     	; 0x5894 <__floatsisf+0x62>
    589e:	88 0f       	add	r24, r24
    58a0:	96 95       	lsr	r25
    58a2:	87 95       	ror	r24
    58a4:	97 f9       	bld	r25, 7
    58a6:	08 95       	ret

000058a8 <__fp_cmp>:
    58a8:	99 0f       	add	r25, r25
    58aa:	00 08       	sbc	r0, r0
    58ac:	55 0f       	add	r21, r21
    58ae:	aa 0b       	sbc	r26, r26
    58b0:	e0 e8       	ldi	r30, 0x80	; 128
    58b2:	fe ef       	ldi	r31, 0xFE	; 254
    58b4:	16 16       	cp	r1, r22
    58b6:	17 06       	cpc	r1, r23
    58b8:	e8 07       	cpc	r30, r24
    58ba:	f9 07       	cpc	r31, r25
    58bc:	c0 f0       	brcs	.+48     	; 0x58ee <__fp_cmp+0x46>
    58be:	12 16       	cp	r1, r18
    58c0:	13 06       	cpc	r1, r19
    58c2:	e4 07       	cpc	r30, r20
    58c4:	f5 07       	cpc	r31, r21
    58c6:	98 f0       	brcs	.+38     	; 0x58ee <__fp_cmp+0x46>
    58c8:	62 1b       	sub	r22, r18
    58ca:	73 0b       	sbc	r23, r19
    58cc:	84 0b       	sbc	r24, r20
    58ce:	95 0b       	sbc	r25, r21
    58d0:	39 f4       	brne	.+14     	; 0x58e0 <__fp_cmp+0x38>
    58d2:	0a 26       	eor	r0, r26
    58d4:	61 f0       	breq	.+24     	; 0x58ee <__fp_cmp+0x46>
    58d6:	23 2b       	or	r18, r19
    58d8:	24 2b       	or	r18, r20
    58da:	25 2b       	or	r18, r21
    58dc:	21 f4       	brne	.+8      	; 0x58e6 <__fp_cmp+0x3e>
    58de:	08 95       	ret
    58e0:	0a 26       	eor	r0, r26
    58e2:	09 f4       	brne	.+2      	; 0x58e6 <__fp_cmp+0x3e>
    58e4:	a1 40       	sbci	r26, 0x01	; 1
    58e6:	a6 95       	lsr	r26
    58e8:	8f ef       	ldi	r24, 0xFF	; 255
    58ea:	81 1d       	adc	r24, r1
    58ec:	81 1d       	adc	r24, r1
    58ee:	08 95       	ret

000058f0 <__fp_inf>:
    58f0:	97 f9       	bld	r25, 7
    58f2:	9f 67       	ori	r25, 0x7F	; 127
    58f4:	80 e8       	ldi	r24, 0x80	; 128
    58f6:	70 e0       	ldi	r23, 0x00	; 0
    58f8:	60 e0       	ldi	r22, 0x00	; 0
    58fa:	08 95       	ret

000058fc <__fp_nan>:
    58fc:	9f ef       	ldi	r25, 0xFF	; 255
    58fe:	80 ec       	ldi	r24, 0xC0	; 192
    5900:	08 95       	ret

00005902 <__fp_pscA>:
    5902:	00 24       	eor	r0, r0
    5904:	0a 94       	dec	r0
    5906:	16 16       	cp	r1, r22
    5908:	17 06       	cpc	r1, r23
    590a:	18 06       	cpc	r1, r24
    590c:	09 06       	cpc	r0, r25
    590e:	08 95       	ret

00005910 <__fp_pscB>:
    5910:	00 24       	eor	r0, r0
    5912:	0a 94       	dec	r0
    5914:	12 16       	cp	r1, r18
    5916:	13 06       	cpc	r1, r19
    5918:	14 06       	cpc	r1, r20
    591a:	05 06       	cpc	r0, r21
    591c:	08 95       	ret

0000591e <__fp_round>:
    591e:	09 2e       	mov	r0, r25
    5920:	03 94       	inc	r0
    5922:	00 0c       	add	r0, r0
    5924:	11 f4       	brne	.+4      	; 0x592a <__fp_round+0xc>
    5926:	88 23       	and	r24, r24
    5928:	52 f0       	brmi	.+20     	; 0x593e <__fp_round+0x20>
    592a:	bb 0f       	add	r27, r27
    592c:	40 f4       	brcc	.+16     	; 0x593e <__fp_round+0x20>
    592e:	bf 2b       	or	r27, r31
    5930:	11 f4       	brne	.+4      	; 0x5936 <__fp_round+0x18>
    5932:	60 ff       	sbrs	r22, 0
    5934:	04 c0       	rjmp	.+8      	; 0x593e <__fp_round+0x20>
    5936:	6f 5f       	subi	r22, 0xFF	; 255
    5938:	7f 4f       	sbci	r23, 0xFF	; 255
    593a:	8f 4f       	sbci	r24, 0xFF	; 255
    593c:	9f 4f       	sbci	r25, 0xFF	; 255
    593e:	08 95       	ret

00005940 <__fp_split3>:
    5940:	57 fd       	sbrc	r21, 7
    5942:	90 58       	subi	r25, 0x80	; 128
    5944:	44 0f       	add	r20, r20
    5946:	55 1f       	adc	r21, r21
    5948:	59 f0       	breq	.+22     	; 0x5960 <__fp_splitA+0x10>
    594a:	5f 3f       	cpi	r21, 0xFF	; 255
    594c:	71 f0       	breq	.+28     	; 0x596a <__fp_splitA+0x1a>
    594e:	47 95       	ror	r20

00005950 <__fp_splitA>:
    5950:	88 0f       	add	r24, r24
    5952:	97 fb       	bst	r25, 7
    5954:	99 1f       	adc	r25, r25
    5956:	61 f0       	breq	.+24     	; 0x5970 <__fp_splitA+0x20>
    5958:	9f 3f       	cpi	r25, 0xFF	; 255
    595a:	79 f0       	breq	.+30     	; 0x597a <__fp_splitA+0x2a>
    595c:	87 95       	ror	r24
    595e:	08 95       	ret
    5960:	12 16       	cp	r1, r18
    5962:	13 06       	cpc	r1, r19
    5964:	14 06       	cpc	r1, r20
    5966:	55 1f       	adc	r21, r21
    5968:	f2 cf       	rjmp	.-28     	; 0x594e <__fp_split3+0xe>
    596a:	46 95       	lsr	r20
    596c:	f1 df       	rcall	.-30     	; 0x5950 <__fp_splitA>
    596e:	08 c0       	rjmp	.+16     	; 0x5980 <__fp_splitA+0x30>
    5970:	16 16       	cp	r1, r22
    5972:	17 06       	cpc	r1, r23
    5974:	18 06       	cpc	r1, r24
    5976:	99 1f       	adc	r25, r25
    5978:	f1 cf       	rjmp	.-30     	; 0x595c <__fp_splitA+0xc>
    597a:	86 95       	lsr	r24
    597c:	71 05       	cpc	r23, r1
    597e:	61 05       	cpc	r22, r1
    5980:	08 94       	sec
    5982:	08 95       	ret

00005984 <__fp_zero>:
    5984:	e8 94       	clt

00005986 <__fp_szero>:
    5986:	bb 27       	eor	r27, r27
    5988:	66 27       	eor	r22, r22
    598a:	77 27       	eor	r23, r23
    598c:	cb 01       	movw	r24, r22
    598e:	97 f9       	bld	r25, 7
    5990:	08 95       	ret

00005992 <__cxa_pure_virtual>:
    5992:	0e 94 c2 36 	call	0x6d84	; 0x6d84 <abort>

00005996 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    5996:	1f 92       	push	r1
    5998:	0f 92       	push	r0
    599a:	0f b6       	in	r0, 0x3f	; 63
    599c:	0f 92       	push	r0
    599e:	11 24       	eor	r1, r1
    59a0:	2f 93       	push	r18
    59a2:	8f 93       	push	r24
    59a4:	9f 93       	push	r25
    59a6:	ef 93       	push	r30
    59a8:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    59aa:	e0 91 8c 0a 	lds	r30, 0x0A8C	; 0x800a8c <Serial+0x10>
    59ae:	f0 91 8d 0a 	lds	r31, 0x0A8D	; 0x800a8d <Serial+0x11>
    59b2:	80 81       	ld	r24, Z
    59b4:	e0 91 92 0a 	lds	r30, 0x0A92	; 0x800a92 <Serial+0x16>
    59b8:	f0 91 93 0a 	lds	r31, 0x0A93	; 0x800a93 <Serial+0x17>
    59bc:	82 fd       	sbrc	r24, 2
    59be:	12 c0       	rjmp	.+36     	; 0x59e4 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    59c0:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    59c2:	80 91 95 0a 	lds	r24, 0x0A95	; 0x800a95 <Serial+0x19>
    59c6:	8f 5f       	subi	r24, 0xFF	; 255
    59c8:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    59ca:	20 91 96 0a 	lds	r18, 0x0A96	; 0x800a96 <Serial+0x1a>
    59ce:	82 17       	cp	r24, r18
    59d0:	51 f0       	breq	.+20     	; 0x59e6 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    59d2:	e0 91 95 0a 	lds	r30, 0x0A95	; 0x800a95 <Serial+0x19>
    59d6:	f0 e0       	ldi	r31, 0x00	; 0
    59d8:	e4 58       	subi	r30, 0x84	; 132
    59da:	f5 4f       	sbci	r31, 0xF5	; 245
    59dc:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    59de:	80 93 95 0a 	sts	0x0A95, r24	; 0x800a95 <Serial+0x19>
    59e2:	01 c0       	rjmp	.+2      	; 0x59e6 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    59e4:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    59e6:	ff 91       	pop	r31
    59e8:	ef 91       	pop	r30
    59ea:	9f 91       	pop	r25
    59ec:	8f 91       	pop	r24
    59ee:	2f 91       	pop	r18
    59f0:	0f 90       	pop	r0
    59f2:	0f be       	out	0x3f, r0	; 63
    59f4:	0f 90       	pop	r0
    59f6:	1f 90       	pop	r1
    59f8:	18 95       	reti

000059fa <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    59fa:	1f 92       	push	r1
    59fc:	0f 92       	push	r0
    59fe:	0f b6       	in	r0, 0x3f	; 63
    5a00:	0f 92       	push	r0
    5a02:	11 24       	eor	r1, r1
    5a04:	2f 93       	push	r18
    5a06:	3f 93       	push	r19
    5a08:	4f 93       	push	r20
    5a0a:	5f 93       	push	r21
    5a0c:	6f 93       	push	r22
    5a0e:	7f 93       	push	r23
    5a10:	8f 93       	push	r24
    5a12:	9f 93       	push	r25
    5a14:	af 93       	push	r26
    5a16:	bf 93       	push	r27
    5a18:	ef 93       	push	r30
    5a1a:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    5a1c:	8c e7       	ldi	r24, 0x7C	; 124
    5a1e:	9a e0       	ldi	r25, 0x0A	; 10
    5a20:	9d d6       	rcall	.+3386   	; 0x675c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    5a22:	ff 91       	pop	r31
    5a24:	ef 91       	pop	r30
    5a26:	bf 91       	pop	r27
    5a28:	af 91       	pop	r26
    5a2a:	9f 91       	pop	r25
    5a2c:	8f 91       	pop	r24
    5a2e:	7f 91       	pop	r23
    5a30:	6f 91       	pop	r22
    5a32:	5f 91       	pop	r21
    5a34:	4f 91       	pop	r20
    5a36:	3f 91       	pop	r19
    5a38:	2f 91       	pop	r18
    5a3a:	0f 90       	pop	r0
    5a3c:	0f be       	out	0x3f, r0	; 63
    5a3e:	0f 90       	pop	r0
    5a40:	1f 90       	pop	r1
    5a42:	18 95       	reti

00005a44 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    5a44:	8c e7       	ldi	r24, 0x7C	; 124
    5a46:	9a e0       	ldi	r25, 0x0A	; 10
    5a48:	3f d6       	rcall	.+3198   	; 0x66c8 <_ZN14HardwareSerial9availableEv>
    5a4a:	21 e0       	ldi	r18, 0x01	; 1
    5a4c:	89 2b       	or	r24, r25
    5a4e:	09 f4       	brne	.+2      	; 0x5a52 <_Z17Serial0_availablev+0xe>
    5a50:	20 e0       	ldi	r18, 0x00	; 0
}
    5a52:	82 2f       	mov	r24, r18
    5a54:	08 95       	ret

00005a56 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    5a56:	ec e7       	ldi	r30, 0x7C	; 124
    5a58:	fa e0       	ldi	r31, 0x0A	; 10
    5a5a:	13 82       	std	Z+3, r1	; 0x03
    5a5c:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    5a5e:	88 ee       	ldi	r24, 0xE8	; 232
    5a60:	93 e0       	ldi	r25, 0x03	; 3
    5a62:	a0 e0       	ldi	r26, 0x00	; 0
    5a64:	b0 e0       	ldi	r27, 0x00	; 0
    5a66:	84 83       	std	Z+4, r24	; 0x04
    5a68:	95 83       	std	Z+5, r25	; 0x05
    5a6a:	a6 83       	std	Z+6, r26	; 0x06
    5a6c:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    5a6e:	8f e0       	ldi	r24, 0x0F	; 15
    5a70:	98 e0       	ldi	r25, 0x08	; 8
    5a72:	91 83       	std	Z+1, r25	; 0x01
    5a74:	80 83       	st	Z, r24
    5a76:	85 ec       	ldi	r24, 0xC5	; 197
    5a78:	90 e0       	ldi	r25, 0x00	; 0
    5a7a:	95 87       	std	Z+13, r25	; 0x0d
    5a7c:	84 87       	std	Z+12, r24	; 0x0c
    5a7e:	84 ec       	ldi	r24, 0xC4	; 196
    5a80:	90 e0       	ldi	r25, 0x00	; 0
    5a82:	97 87       	std	Z+15, r25	; 0x0f
    5a84:	86 87       	std	Z+14, r24	; 0x0e
    5a86:	80 ec       	ldi	r24, 0xC0	; 192
    5a88:	90 e0       	ldi	r25, 0x00	; 0
    5a8a:	91 8b       	std	Z+17, r25	; 0x11
    5a8c:	80 8b       	std	Z+16, r24	; 0x10
    5a8e:	81 ec       	ldi	r24, 0xC1	; 193
    5a90:	90 e0       	ldi	r25, 0x00	; 0
    5a92:	93 8b       	std	Z+19, r25	; 0x13
    5a94:	82 8b       	std	Z+18, r24	; 0x12
    5a96:	82 ec       	ldi	r24, 0xC2	; 194
    5a98:	90 e0       	ldi	r25, 0x00	; 0
    5a9a:	95 8b       	std	Z+21, r25	; 0x15
    5a9c:	84 8b       	std	Z+20, r24	; 0x14
    5a9e:	86 ec       	ldi	r24, 0xC6	; 198
    5aa0:	90 e0       	ldi	r25, 0x00	; 0
    5aa2:	97 8b       	std	Z+23, r25	; 0x17
    5aa4:	86 8b       	std	Z+22, r24	; 0x16
    5aa6:	11 8e       	std	Z+25, r1	; 0x19
    5aa8:	12 8e       	std	Z+26, r1	; 0x1a
    5aaa:	13 8e       	std	Z+27, r1	; 0x1b
    5aac:	14 8e       	std	Z+28, r1	; 0x1c
    5aae:	08 95       	ret

00005ab0 <_ZNK9IPAddress7printToER5Print>:
        // Too few dots (there must be 3 dots)
        return false;
    }
    _address.bytes[3] = acc;
    return true;
}
    5ab0:	8f 92       	push	r8
    5ab2:	9f 92       	push	r9
    5ab4:	af 92       	push	r10
    5ab6:	bf 92       	push	r11
    5ab8:	cf 92       	push	r12
    5aba:	df 92       	push	r13
    5abc:	ef 92       	push	r14
    5abe:	ff 92       	push	r15
    5ac0:	0f 93       	push	r16
    5ac2:	1f 93       	push	r17
    5ac4:	cf 93       	push	r28
    5ac6:	df 93       	push	r29
    5ac8:	7c 01       	movw	r14, r24
    5aca:	8b 01       	movw	r16, r22
    5acc:	4c 01       	movw	r8, r24
    5ace:	82 e0       	ldi	r24, 0x02	; 2
    5ad0:	88 0e       	add	r8, r24
    5ad2:	91 1c       	adc	r9, r1
    5ad4:	57 01       	movw	r10, r14
    5ad6:	e5 e0       	ldi	r30, 0x05	; 5
    5ad8:	ae 0e       	add	r10, r30
    5ada:	b1 1c       	adc	r11, r1
    5adc:	c0 e0       	ldi	r28, 0x00	; 0
    5ade:	d0 e0       	ldi	r29, 0x00	; 0
    5ae0:	f4 01       	movw	r30, r8
    5ae2:	61 91       	ld	r22, Z+
    5ae4:	4f 01       	movw	r8, r30
    5ae6:	4a e0       	ldi	r20, 0x0A	; 10
    5ae8:	50 e0       	ldi	r21, 0x00	; 0
    5aea:	c8 01       	movw	r24, r16
    5aec:	4b d1       	rcall	.+662    	; 0x5d84 <_ZN5Print5printEhi>
    5aee:	6c 01       	movw	r12, r24
    5af0:	6e e2       	ldi	r22, 0x2E	; 46
    5af2:	c8 01       	movw	r24, r16
    5af4:	ba d0       	rcall	.+372    	; 0x5c6a <_ZN5Print5printEc>
    5af6:	8c 0d       	add	r24, r12
    5af8:	9d 1d       	adc	r25, r13
    5afa:	c8 0f       	add	r28, r24
    5afc:	d9 1f       	adc	r29, r25
    5afe:	8a 14       	cp	r8, r10
    5b00:	9b 04       	cpc	r9, r11
    5b02:	71 f7       	brne	.-36     	; 0x5ae0 <_ZNK9IPAddress7printToER5Print+0x30>
    5b04:	4a e0       	ldi	r20, 0x0A	; 10
    5b06:	50 e0       	ldi	r21, 0x00	; 0
    5b08:	f7 01       	movw	r30, r14
    5b0a:	65 81       	ldd	r22, Z+5	; 0x05
    5b0c:	c8 01       	movw	r24, r16
    5b0e:	3a d1       	rcall	.+628    	; 0x5d84 <_ZN5Print5printEhi>
    5b10:	8c 0f       	add	r24, r28
    5b12:	9d 1f       	adc	r25, r29
    5b14:	df 91       	pop	r29
    5b16:	cf 91       	pop	r28
    5b18:	1f 91       	pop	r17
    5b1a:	0f 91       	pop	r16
    5b1c:	ff 90       	pop	r15
    5b1e:	ef 90       	pop	r14
    5b20:	df 90       	pop	r13
    5b22:	cf 90       	pop	r12
    5b24:	bf 90       	pop	r11
    5b26:	af 90       	pop	r10
    5b28:	9f 90       	pop	r9
    5b2a:	8f 90       	pop	r8
    5b2c:	08 95       	ret

00005b2e <_ZN9IPAddressC1Ev>:
    5b2e:	2d ef       	ldi	r18, 0xFD	; 253
    5b30:	37 e0       	ldi	r19, 0x07	; 7
    5b32:	fc 01       	movw	r30, r24
    5b34:	31 83       	std	Z+1, r19	; 0x01
    5b36:	20 83       	st	Z, r18
    5b38:	12 82       	std	Z+2, r1	; 0x02
    5b3a:	13 82       	std	Z+3, r1	; 0x03
    5b3c:	14 82       	std	Z+4, r1	; 0x04
    5b3e:	15 82       	std	Z+5, r1	; 0x05
    5b40:	08 95       	ret

00005b42 <_ZN9IPAddressC1Ehhhh>:
    5b42:	0f 93       	push	r16
    5b44:	fc 01       	movw	r30, r24
    5b46:	8d ef       	ldi	r24, 0xFD	; 253
    5b48:	97 e0       	ldi	r25, 0x07	; 7
    5b4a:	91 83       	std	Z+1, r25	; 0x01
    5b4c:	80 83       	st	Z, r24
    5b4e:	62 83       	std	Z+2, r22	; 0x02
    5b50:	43 83       	std	Z+3, r20	; 0x03
    5b52:	24 83       	std	Z+4, r18	; 0x04
    5b54:	05 83       	std	Z+5, r16	; 0x05
    5b56:	0f 91       	pop	r16
    5b58:	08 95       	ret

00005b5a <_ZN9IPAddressaSEPKh>:

IPAddress& IPAddress::operator=(const uint8_t *address)
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
    5b5a:	dc 01       	movw	r26, r24
    5b5c:	12 96       	adiw	r26, 0x02	; 2
    5b5e:	24 e0       	ldi	r18, 0x04	; 4
    5b60:	fb 01       	movw	r30, r22
    5b62:	01 90       	ld	r0, Z+
    5b64:	0d 92       	st	X+, r0
    5b66:	2a 95       	dec	r18
    5b68:	e1 f7       	brne	.-8      	; 0x5b62 <_ZN9IPAddressaSEPKh+0x8>
    return *this;
}
    5b6a:	08 95       	ret

00005b6c <initVariant>:
    5b6c:	08 95       	ret

00005b6e <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    5b6e:	df d1       	rcall	.+958    	; 0x5f2e <init>

	initVariant();
    5b70:	fd df       	rcall	.-6      	; 0x5b6c <initVariant>
    5b72:	0e 94 0d 11 	call	0x221a	; 0x221a <setup>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    5b76:	c1 ea       	ldi	r28, 0xA1	; 161
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    5b78:	d3 e3       	ldi	r29, 0x33	; 51
    5b7a:	0e 94 56 09 	call	0x12ac	; 0x12ac <loop>
#endif
	
	setup();
    
	for (;;) {
		loop();
    5b7e:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
    5b80:	e1 f3       	breq	.-8      	; 0x5b7a <main+0xc>
    5b82:	df d5       	rcall	.+3006   	; 0x6742 <_Z14serialEventRunv>
    5b84:	fa cf       	rjmp	.-12     	; 0x5b7a <main+0xc>

00005b86 <_ZN5Print5writeEPKhj>:
    5b86:	cf 92       	push	r12
size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    5b88:	df 92       	push	r13
    5b8a:	ef 92       	push	r14
    5b8c:	ff 92       	push	r15
    5b8e:	0f 93       	push	r16
    5b90:	1f 93       	push	r17
    5b92:	cf 93       	push	r28
    5b94:	df 93       	push	r29
    5b96:	6c 01       	movw	r12, r24
    5b98:	7a 01       	movw	r14, r20
    5b9a:	8b 01       	movw	r16, r22
    5b9c:	c0 e0       	ldi	r28, 0x00	; 0
    5b9e:	d0 e0       	ldi	r29, 0x00	; 0
    5ba0:	ce 15       	cp	r28, r14
    5ba2:	df 05       	cpc	r29, r15
    5ba4:	81 f0       	breq	.+32     	; 0x5bc6 <_ZN5Print5writeEPKhj+0x40>
    5ba6:	d8 01       	movw	r26, r16
    5ba8:	6d 91       	ld	r22, X+
    5baa:	8d 01       	movw	r16, r26
    5bac:	d6 01       	movw	r26, r12
    5bae:	ed 91       	ld	r30, X+
    5bb0:	fc 91       	ld	r31, X
    5bb2:	01 90       	ld	r0, Z+
    5bb4:	f0 81       	ld	r31, Z
    5bb6:	e0 2d       	mov	r30, r0
    5bb8:	c6 01       	movw	r24, r12
    5bba:	09 95       	icall
    5bbc:	89 2b       	or	r24, r25
    5bbe:	11 f0       	breq	.+4      	; 0x5bc4 <_ZN5Print5writeEPKhj+0x3e>
    5bc0:	21 96       	adiw	r28, 0x01	; 1
    5bc2:	ee cf       	rjmp	.-36     	; 0x5ba0 <_ZN5Print5writeEPKhj+0x1a>
    5bc4:	7e 01       	movw	r14, r28
    5bc6:	c7 01       	movw	r24, r14
    5bc8:	df 91       	pop	r29
    5bca:	cf 91       	pop	r28
    5bcc:	1f 91       	pop	r17
    5bce:	0f 91       	pop	r16
    5bd0:	ff 90       	pop	r15
    5bd2:	ef 90       	pop	r14
    5bd4:	df 90       	pop	r13
    5bd6:	cf 90       	pop	r12
    5bd8:	08 95       	ret

00005bda <_ZN5Print5writeEPKc>:
    5bda:	61 15       	cp	r22, r1
    5bdc:	71 05       	cpc	r23, r1
    5bde:	79 f0       	breq	.+30     	; 0x5bfe <_ZN5Print5writeEPKc+0x24>
    5be0:	fb 01       	movw	r30, r22
    5be2:	01 90       	ld	r0, Z+
    5be4:	00 20       	and	r0, r0
    5be6:	e9 f7       	brne	.-6      	; 0x5be2 <_ZN5Print5writeEPKc+0x8>
    5be8:	31 97       	sbiw	r30, 0x01	; 1
    5bea:	af 01       	movw	r20, r30
    5bec:	46 1b       	sub	r20, r22
    5bee:	57 0b       	sbc	r21, r23
    5bf0:	dc 01       	movw	r26, r24
    5bf2:	ed 91       	ld	r30, X+
    5bf4:	fc 91       	ld	r31, X
    5bf6:	02 80       	ldd	r0, Z+2	; 0x02
    5bf8:	f3 81       	ldd	r31, Z+3	; 0x03
    5bfa:	e0 2d       	mov	r30, r0
    5bfc:	09 94       	ijmp
    5bfe:	80 e0       	ldi	r24, 0x00	; 0
    5c00:	90 e0       	ldi	r25, 0x00	; 0
    5c02:	08 95       	ret

00005c04 <_ZN5Print5printEPK19__FlashStringHelper>:
    5c04:	ef 92       	push	r14
    5c06:	ff 92       	push	r15
    5c08:	0f 93       	push	r16
    5c0a:	1f 93       	push	r17
    5c0c:	cf 93       	push	r28
    5c0e:	df 93       	push	r29
    5c10:	8c 01       	movw	r16, r24
    5c12:	7b 01       	movw	r14, r22
    5c14:	c0 e0       	ldi	r28, 0x00	; 0
    5c16:	d0 e0       	ldi	r29, 0x00	; 0
    5c18:	f7 01       	movw	r30, r14
    5c1a:	ec 0f       	add	r30, r28
    5c1c:	fd 1f       	adc	r31, r29
    5c1e:	64 91       	lpm	r22, Z
    5c20:	66 23       	and	r22, r22
    5c22:	61 f0       	breq	.+24     	; 0x5c3c <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    5c24:	d8 01       	movw	r26, r16
    5c26:	ed 91       	ld	r30, X+
    5c28:	fc 91       	ld	r31, X
    5c2a:	01 90       	ld	r0, Z+
    5c2c:	f0 81       	ld	r31, Z
    5c2e:	e0 2d       	mov	r30, r0
    5c30:	c8 01       	movw	r24, r16
    5c32:	09 95       	icall
    5c34:	89 2b       	or	r24, r25
    5c36:	11 f0       	breq	.+4      	; 0x5c3c <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    5c38:	21 96       	adiw	r28, 0x01	; 1
    5c3a:	ee cf       	rjmp	.-36     	; 0x5c18 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    5c3c:	ce 01       	movw	r24, r28
    5c3e:	df 91       	pop	r29
    5c40:	cf 91       	pop	r28
    5c42:	1f 91       	pop	r17
    5c44:	0f 91       	pop	r16
    5c46:	ff 90       	pop	r15
    5c48:	ef 90       	pop	r14
    5c4a:	08 95       	ret

00005c4c <_ZN5Print5printERK6String>:
    5c4c:	db 01       	movw	r26, r22
    5c4e:	14 96       	adiw	r26, 0x04	; 4
    5c50:	4d 91       	ld	r20, X+
    5c52:	5c 91       	ld	r21, X
    5c54:	15 97       	sbiw	r26, 0x05	; 5
    5c56:	6d 91       	ld	r22, X+
    5c58:	7c 91       	ld	r23, X
    5c5a:	dc 01       	movw	r26, r24
    5c5c:	ed 91       	ld	r30, X+
    5c5e:	fc 91       	ld	r31, X
    5c60:	02 80       	ldd	r0, Z+2	; 0x02
    5c62:	f3 81       	ldd	r31, Z+3	; 0x03
    5c64:	e0 2d       	mov	r30, r0
    5c66:	09 94       	ijmp

00005c68 <_ZN5Print5printEPKc>:
    5c68:	b8 cf       	rjmp	.-144    	; 0x5bda <_ZN5Print5writeEPKc>

00005c6a <_ZN5Print5printEc>:
    5c6a:	dc 01       	movw	r26, r24
    5c6c:	ed 91       	ld	r30, X+
    5c6e:	fc 91       	ld	r31, X
    5c70:	01 90       	ld	r0, Z+
    5c72:	f0 81       	ld	r31, Z
    5c74:	e0 2d       	mov	r30, r0
    5c76:	09 94       	ijmp

00005c78 <_ZN5Print7printlnEv>:
    5c78:	6b ef       	ldi	r22, 0xFB	; 251
    5c7a:	73 e0       	ldi	r23, 0x03	; 3
    5c7c:	ae cf       	rjmp	.-164    	; 0x5bda <_ZN5Print5writeEPKc>

00005c7e <_ZN5Print7printlnEPK19__FlashStringHelper>:
    5c7e:	0f 93       	push	r16
    5c80:	1f 93       	push	r17
    5c82:	cf 93       	push	r28
    5c84:	df 93       	push	r29
    5c86:	ec 01       	movw	r28, r24
    5c88:	bd df       	rcall	.-134    	; 0x5c04 <_ZN5Print5printEPK19__FlashStringHelper>
    5c8a:	8c 01       	movw	r16, r24
    5c8c:	ce 01       	movw	r24, r28
    5c8e:	f4 df       	rcall	.-24     	; 0x5c78 <_ZN5Print7printlnEv>
    5c90:	80 0f       	add	r24, r16
    5c92:	91 1f       	adc	r25, r17
    5c94:	df 91       	pop	r29
    5c96:	cf 91       	pop	r28
    5c98:	1f 91       	pop	r17
    5c9a:	0f 91       	pop	r16
    5c9c:	08 95       	ret

00005c9e <_ZN5Print7printlnERK6String>:
    5c9e:	0f 93       	push	r16
    5ca0:	1f 93       	push	r17
    5ca2:	cf 93       	push	r28
    5ca4:	df 93       	push	r29
    5ca6:	ec 01       	movw	r28, r24
    5ca8:	d1 df       	rcall	.-94     	; 0x5c4c <_ZN5Print5printERK6String>
    5caa:	8c 01       	movw	r16, r24
    5cac:	ce 01       	movw	r24, r28
    5cae:	e4 df       	rcall	.-56     	; 0x5c78 <_ZN5Print7printlnEv>
    5cb0:	80 0f       	add	r24, r16
    5cb2:	91 1f       	adc	r25, r17
    5cb4:	df 91       	pop	r29
    5cb6:	cf 91       	pop	r28
    5cb8:	1f 91       	pop	r17
    5cba:	0f 91       	pop	r16
    5cbc:	08 95       	ret

00005cbe <_ZN5Print7printlnEPKc>:
    5cbe:	0f 93       	push	r16
    5cc0:	1f 93       	push	r17
    5cc2:	cf 93       	push	r28
    5cc4:	df 93       	push	r29
    5cc6:	ec 01       	movw	r28, r24
    5cc8:	88 df       	rcall	.-240    	; 0x5bda <_ZN5Print5writeEPKc>
    5cca:	8c 01       	movw	r16, r24
    5ccc:	ce 01       	movw	r24, r28
    5cce:	d4 df       	rcall	.-88     	; 0x5c78 <_ZN5Print7printlnEv>
    5cd0:	80 0f       	add	r24, r16
    5cd2:	91 1f       	adc	r25, r17
    5cd4:	df 91       	pop	r29
    5cd6:	cf 91       	pop	r28
    5cd8:	1f 91       	pop	r17
    5cda:	0f 91       	pop	r16
    5cdc:	08 95       	ret

00005cde <_ZN5Print11printNumberEmh>:
    5cde:	8f 92       	push	r8
    5ce0:	9f 92       	push	r9
    5ce2:	af 92       	push	r10
    5ce4:	bf 92       	push	r11
    5ce6:	ef 92       	push	r14
    5ce8:	ff 92       	push	r15
    5cea:	0f 93       	push	r16
    5cec:	1f 93       	push	r17
    5cee:	cf 93       	push	r28
    5cf0:	df 93       	push	r29
    5cf2:	cd b7       	in	r28, 0x3d	; 61
    5cf4:	de b7       	in	r29, 0x3e	; 62
    5cf6:	a1 97       	sbiw	r28, 0x21	; 33
    5cf8:	0f b6       	in	r0, 0x3f	; 63
    5cfa:	f8 94       	cli
    5cfc:	de bf       	out	0x3e, r29	; 62
    5cfe:	0f be       	out	0x3f, r0	; 63
    5d00:	cd bf       	out	0x3d, r28	; 61
    5d02:	7c 01       	movw	r14, r24
    5d04:	fa 01       	movw	r30, r20
    5d06:	cb 01       	movw	r24, r22
    5d08:	19 a2       	std	Y+33, r1	; 0x21
    5d0a:	22 30       	cpi	r18, 0x02	; 2
    5d0c:	08 f4       	brcc	.+2      	; 0x5d10 <_ZN5Print11printNumberEmh+0x32>
    5d0e:	2a e0       	ldi	r18, 0x0A	; 10
    5d10:	8e 01       	movw	r16, r28
    5d12:	0f 5d       	subi	r16, 0xDF	; 223
    5d14:	1f 4f       	sbci	r17, 0xFF	; 255
    5d16:	82 2e       	mov	r8, r18
    5d18:	91 2c       	mov	r9, r1
    5d1a:	a1 2c       	mov	r10, r1
    5d1c:	b1 2c       	mov	r11, r1
    5d1e:	bf 01       	movw	r22, r30
    5d20:	a5 01       	movw	r20, r10
    5d22:	94 01       	movw	r18, r8
    5d24:	cb d5       	rcall	.+2966   	; 0x68bc <__udivmodsi4>
    5d26:	f9 01       	movw	r30, r18
    5d28:	ca 01       	movw	r24, r20
    5d2a:	01 50       	subi	r16, 0x01	; 1
    5d2c:	11 09       	sbc	r17, r1
    5d2e:	6a 30       	cpi	r22, 0x0A	; 10
    5d30:	10 f4       	brcc	.+4      	; 0x5d36 <_ZN5Print11printNumberEmh+0x58>
    5d32:	60 5d       	subi	r22, 0xD0	; 208
    5d34:	01 c0       	rjmp	.+2      	; 0x5d38 <_ZN5Print11printNumberEmh+0x5a>
    5d36:	69 5c       	subi	r22, 0xC9	; 201
    5d38:	d8 01       	movw	r26, r16
    5d3a:	6c 93       	st	X, r22
    5d3c:	23 2b       	or	r18, r19
    5d3e:	24 2b       	or	r18, r20
    5d40:	25 2b       	or	r18, r21
    5d42:	69 f7       	brne	.-38     	; 0x5d1e <_ZN5Print11printNumberEmh+0x40>
    5d44:	b8 01       	movw	r22, r16
    5d46:	c7 01       	movw	r24, r14
    5d48:	48 df       	rcall	.-368    	; 0x5bda <_ZN5Print5writeEPKc>
    5d4a:	a1 96       	adiw	r28, 0x21	; 33
    5d4c:	0f b6       	in	r0, 0x3f	; 63
    5d4e:	f8 94       	cli
    5d50:	de bf       	out	0x3e, r29	; 62
    5d52:	0f be       	out	0x3f, r0	; 63
    5d54:	cd bf       	out	0x3d, r28	; 61
    5d56:	df 91       	pop	r29
    5d58:	cf 91       	pop	r28
    5d5a:	1f 91       	pop	r17
    5d5c:	0f 91       	pop	r16
    5d5e:	ff 90       	pop	r15
    5d60:	ef 90       	pop	r14
    5d62:	bf 90       	pop	r11
    5d64:	af 90       	pop	r10
    5d66:	9f 90       	pop	r9
    5d68:	8f 90       	pop	r8
    5d6a:	08 95       	ret

00005d6c <_ZN5Print5printEmi>:
    5d6c:	21 15       	cp	r18, r1
    5d6e:	31 05       	cpc	r19, r1
    5d70:	41 f4       	brne	.+16     	; 0x5d82 <_ZN5Print5printEmi+0x16>
    5d72:	dc 01       	movw	r26, r24
    5d74:	ed 91       	ld	r30, X+
    5d76:	fc 91       	ld	r31, X
    5d78:	01 90       	ld	r0, Z+
    5d7a:	f0 81       	ld	r31, Z
    5d7c:	e0 2d       	mov	r30, r0
    5d7e:	64 2f       	mov	r22, r20
    5d80:	09 94       	ijmp
    5d82:	ad cf       	rjmp	.-166    	; 0x5cde <_ZN5Print11printNumberEmh>

00005d84 <_ZN5Print5printEhi>:
    5d84:	9a 01       	movw	r18, r20
    5d86:	46 2f       	mov	r20, r22
    5d88:	50 e0       	ldi	r21, 0x00	; 0
    5d8a:	60 e0       	ldi	r22, 0x00	; 0
    5d8c:	70 e0       	ldi	r23, 0x00	; 0
    5d8e:	ee cf       	rjmp	.-36     	; 0x5d6c <_ZN5Print5printEmi>

00005d90 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    5d90:	0f 93       	push	r16
    5d92:	1f 93       	push	r17
    5d94:	cf 93       	push	r28
    5d96:	df 93       	push	r29
    5d98:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    5d9a:	e8 df       	rcall	.-48     	; 0x5d6c <_ZN5Print5printEmi>
    5d9c:	8c 01       	movw	r16, r24
  n += println();
    5d9e:	ce 01       	movw	r24, r28
    5da0:	6b df       	rcall	.-298    	; 0x5c78 <_ZN5Print7printlnEv>
  return n;
}
    5da2:	80 0f       	add	r24, r16
    5da4:	91 1f       	adc	r25, r17
    5da6:	df 91       	pop	r29
    5da8:	cf 91       	pop	r28
    5daa:	1f 91       	pop	r17
    5dac:	0f 91       	pop	r16
    5dae:	08 95       	ret

00005db0 <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    5db0:	1f 92       	push	r1
    5db2:	0f 92       	push	r0
    5db4:	0f b6       	in	r0, 0x3f	; 63
    5db6:	0f 92       	push	r0
    5db8:	11 24       	eor	r1, r1
    5dba:	2f 93       	push	r18
    5dbc:	3f 93       	push	r19
    5dbe:	8f 93       	push	r24
    5dc0:	9f 93       	push	r25
    5dc2:	af 93       	push	r26
    5dc4:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    5dc6:	80 91 1a 0b 	lds	r24, 0x0B1A	; 0x800b1a <timer0_millis>
    5dca:	90 91 1b 0b 	lds	r25, 0x0B1B	; 0x800b1b <timer0_millis+0x1>
    5dce:	a0 91 1c 0b 	lds	r26, 0x0B1C	; 0x800b1c <timer0_millis+0x2>
    5dd2:	b0 91 1d 0b 	lds	r27, 0x0B1D	; 0x800b1d <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    5dd6:	30 91 19 0b 	lds	r19, 0x0B19	; 0x800b19 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    5dda:	23 e0       	ldi	r18, 0x03	; 3
    5ddc:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    5dde:	2d 37       	cpi	r18, 0x7D	; 125
    5de0:	20 f4       	brcc	.+8      	; 0x5dea <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    5de2:	01 96       	adiw	r24, 0x01	; 1
    5de4:	a1 1d       	adc	r26, r1
    5de6:	b1 1d       	adc	r27, r1
    5de8:	05 c0       	rjmp	.+10     	; 0x5df4 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    5dea:	26 e8       	ldi	r18, 0x86	; 134
    5dec:	23 0f       	add	r18, r19
		m += 1;
    5dee:	02 96       	adiw	r24, 0x02	; 2
    5df0:	a1 1d       	adc	r26, r1
    5df2:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    5df4:	20 93 19 0b 	sts	0x0B19, r18	; 0x800b19 <timer0_fract>
	timer0_millis = m;
    5df8:	80 93 1a 0b 	sts	0x0B1A, r24	; 0x800b1a <timer0_millis>
    5dfc:	90 93 1b 0b 	sts	0x0B1B, r25	; 0x800b1b <timer0_millis+0x1>
    5e00:	a0 93 1c 0b 	sts	0x0B1C, r26	; 0x800b1c <timer0_millis+0x2>
    5e04:	b0 93 1d 0b 	sts	0x0B1D, r27	; 0x800b1d <timer0_millis+0x3>
	timer0_overflow_count++;
    5e08:	80 91 1e 0b 	lds	r24, 0x0B1E	; 0x800b1e <timer0_overflow_count>
    5e0c:	90 91 1f 0b 	lds	r25, 0x0B1F	; 0x800b1f <timer0_overflow_count+0x1>
    5e10:	a0 91 20 0b 	lds	r26, 0x0B20	; 0x800b20 <timer0_overflow_count+0x2>
    5e14:	b0 91 21 0b 	lds	r27, 0x0B21	; 0x800b21 <timer0_overflow_count+0x3>
    5e18:	01 96       	adiw	r24, 0x01	; 1
    5e1a:	a1 1d       	adc	r26, r1
    5e1c:	b1 1d       	adc	r27, r1
    5e1e:	80 93 1e 0b 	sts	0x0B1E, r24	; 0x800b1e <timer0_overflow_count>
    5e22:	90 93 1f 0b 	sts	0x0B1F, r25	; 0x800b1f <timer0_overflow_count+0x1>
    5e26:	a0 93 20 0b 	sts	0x0B20, r26	; 0x800b20 <timer0_overflow_count+0x2>
    5e2a:	b0 93 21 0b 	sts	0x0B21, r27	; 0x800b21 <timer0_overflow_count+0x3>
}
    5e2e:	bf 91       	pop	r27
    5e30:	af 91       	pop	r26
    5e32:	9f 91       	pop	r25
    5e34:	8f 91       	pop	r24
    5e36:	3f 91       	pop	r19
    5e38:	2f 91       	pop	r18
    5e3a:	0f 90       	pop	r0
    5e3c:	0f be       	out	0x3f, r0	; 63
    5e3e:	0f 90       	pop	r0
    5e40:	1f 90       	pop	r1
    5e42:	18 95       	reti

00005e44 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    5e44:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    5e46:	f8 94       	cli
	m = timer0_millis;
    5e48:	60 91 1a 0b 	lds	r22, 0x0B1A	; 0x800b1a <timer0_millis>
    5e4c:	70 91 1b 0b 	lds	r23, 0x0B1B	; 0x800b1b <timer0_millis+0x1>
    5e50:	80 91 1c 0b 	lds	r24, 0x0B1C	; 0x800b1c <timer0_millis+0x2>
    5e54:	90 91 1d 0b 	lds	r25, 0x0B1D	; 0x800b1d <timer0_millis+0x3>
	SREG = oldSREG;
    5e58:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    5e5a:	08 95       	ret

00005e5c <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    5e5c:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    5e5e:	f8 94       	cli
	m = timer0_overflow_count;
    5e60:	80 91 1e 0b 	lds	r24, 0x0B1E	; 0x800b1e <timer0_overflow_count>
    5e64:	90 91 1f 0b 	lds	r25, 0x0B1F	; 0x800b1f <timer0_overflow_count+0x1>
    5e68:	a0 91 20 0b 	lds	r26, 0x0B20	; 0x800b20 <timer0_overflow_count+0x2>
    5e6c:	b0 91 21 0b 	lds	r27, 0x0B21	; 0x800b21 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    5e70:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    5e72:	a8 9b       	sbis	0x15, 0	; 21
    5e74:	05 c0       	rjmp	.+10     	; 0x5e80 <micros+0x24>
    5e76:	2f 3f       	cpi	r18, 0xFF	; 255
    5e78:	19 f0       	breq	.+6      	; 0x5e80 <micros+0x24>
		m++;
    5e7a:	01 96       	adiw	r24, 0x01	; 1
    5e7c:	a1 1d       	adc	r26, r1
    5e7e:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    5e80:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    5e82:	ba 2f       	mov	r27, r26
    5e84:	a9 2f       	mov	r26, r25
    5e86:	98 2f       	mov	r25, r24
    5e88:	88 27       	eor	r24, r24
    5e8a:	82 0f       	add	r24, r18
    5e8c:	91 1d       	adc	r25, r1
    5e8e:	a1 1d       	adc	r26, r1
    5e90:	b1 1d       	adc	r27, r1
    5e92:	bc 01       	movw	r22, r24
    5e94:	cd 01       	movw	r24, r26
    5e96:	42 e0       	ldi	r20, 0x02	; 2
    5e98:	66 0f       	add	r22, r22
    5e9a:	77 1f       	adc	r23, r23
    5e9c:	88 1f       	adc	r24, r24
    5e9e:	99 1f       	adc	r25, r25
    5ea0:	4a 95       	dec	r20
    5ea2:	d1 f7       	brne	.-12     	; 0x5e98 <micros+0x3c>
}
    5ea4:	08 95       	ret

00005ea6 <delay>:

void delay(unsigned long ms)
{
    5ea6:	8f 92       	push	r8
    5ea8:	9f 92       	push	r9
    5eaa:	af 92       	push	r10
    5eac:	bf 92       	push	r11
    5eae:	cf 92       	push	r12
    5eb0:	df 92       	push	r13
    5eb2:	ef 92       	push	r14
    5eb4:	ff 92       	push	r15
    5eb6:	6b 01       	movw	r12, r22
    5eb8:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    5eba:	d0 df       	rcall	.-96     	; 0x5e5c <micros>
    5ebc:	4b 01       	movw	r8, r22
    5ebe:	5c 01       	movw	r10, r24

	while (ms > 0) {
    5ec0:	c1 14       	cp	r12, r1
    5ec2:	d1 04       	cpc	r13, r1
    5ec4:	e1 04       	cpc	r14, r1
    5ec6:	f1 04       	cpc	r15, r1
		yield();
    5ec8:	f1 f0       	breq	.+60     	; 0x5f06 <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    5eca:	d7 d4       	rcall	.+2478   	; 0x687a <yield>
    5ecc:	c7 df       	rcall	.-114    	; 0x5e5c <micros>
    5ece:	dc 01       	movw	r26, r24
    5ed0:	cb 01       	movw	r24, r22
    5ed2:	88 19       	sub	r24, r8
    5ed4:	99 09       	sbc	r25, r9
    5ed6:	aa 09       	sbc	r26, r10
    5ed8:	bb 09       	sbc	r27, r11
    5eda:	88 3e       	cpi	r24, 0xE8	; 232
    5edc:	93 40       	sbci	r25, 0x03	; 3
    5ede:	a1 05       	cpc	r26, r1
    5ee0:	b1 05       	cpc	r27, r1
    5ee2:	70 f3       	brcs	.-36     	; 0x5ec0 <delay+0x1a>
			ms--;
    5ee4:	21 e0       	ldi	r18, 0x01	; 1
    5ee6:	c2 1a       	sub	r12, r18
    5ee8:	d1 08       	sbc	r13, r1
    5eea:	e1 08       	sbc	r14, r1
    5eec:	f1 08       	sbc	r15, r1
			start += 1000;
    5eee:	88 ee       	ldi	r24, 0xE8	; 232
    5ef0:	88 0e       	add	r8, r24
    5ef2:	83 e0       	ldi	r24, 0x03	; 3
    5ef4:	98 1e       	adc	r9, r24
    5ef6:	a1 1c       	adc	r10, r1
    5ef8:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    5efa:	c1 14       	cp	r12, r1
    5efc:	d1 04       	cpc	r13, r1
    5efe:	e1 04       	cpc	r14, r1
    5f00:	f1 04       	cpc	r15, r1
    5f02:	21 f7       	brne	.-56     	; 0x5ecc <delay+0x26>
    5f04:	dd cf       	rjmp	.-70     	; 0x5ec0 <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    5f06:	ff 90       	pop	r15
    5f08:	ef 90       	pop	r14
    5f0a:	df 90       	pop	r13
    5f0c:	cf 90       	pop	r12
    5f0e:	bf 90       	pop	r11
    5f10:	af 90       	pop	r10
    5f12:	9f 90       	pop	r9
    5f14:	8f 90       	pop	r8
    5f16:	08 95       	ret

00005f18 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    5f18:	82 30       	cpi	r24, 0x02	; 2
    5f1a:	91 05       	cpc	r25, r1
    5f1c:	38 f0       	brcs	.+14     	; 0x5f2c <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    5f1e:	88 0f       	add	r24, r24
    5f20:	99 1f       	adc	r25, r25
    5f22:	88 0f       	add	r24, r24
    5f24:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    5f26:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    5f28:	01 97       	sbiw	r24, 0x01	; 1
    5f2a:	f1 f7       	brne	.-4      	; 0x5f28 <delayMicroseconds+0x10>
    5f2c:	08 95       	ret

00005f2e <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    5f2e:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    5f30:	84 b5       	in	r24, 0x24	; 36
    5f32:	82 60       	ori	r24, 0x02	; 2
    5f34:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    5f36:	84 b5       	in	r24, 0x24	; 36
    5f38:	81 60       	ori	r24, 0x01	; 1
    5f3a:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    5f3c:	85 b5       	in	r24, 0x25	; 37
    5f3e:	82 60       	ori	r24, 0x02	; 2
    5f40:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    5f42:	85 b5       	in	r24, 0x25	; 37
    5f44:	81 60       	ori	r24, 0x01	; 1
    5f46:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    5f48:	ee e6       	ldi	r30, 0x6E	; 110
    5f4a:	f0 e0       	ldi	r31, 0x00	; 0
    5f4c:	80 81       	ld	r24, Z
    5f4e:	81 60       	ori	r24, 0x01	; 1
    5f50:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    5f52:	e1 e8       	ldi	r30, 0x81	; 129
    5f54:	f0 e0       	ldi	r31, 0x00	; 0
    5f56:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    5f58:	80 81       	ld	r24, Z
    5f5a:	82 60       	ori	r24, 0x02	; 2
    5f5c:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    5f5e:	80 81       	ld	r24, Z
    5f60:	81 60       	ori	r24, 0x01	; 1
    5f62:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    5f64:	e0 e8       	ldi	r30, 0x80	; 128
    5f66:	f0 e0       	ldi	r31, 0x00	; 0
    5f68:	80 81       	ld	r24, Z
    5f6a:	81 60       	ori	r24, 0x01	; 1
    5f6c:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    5f6e:	e1 eb       	ldi	r30, 0xB1	; 177
    5f70:	f0 e0       	ldi	r31, 0x00	; 0
    5f72:	80 81       	ld	r24, Z
    5f74:	84 60       	ori	r24, 0x04	; 4
    5f76:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    5f78:	e0 eb       	ldi	r30, 0xB0	; 176
    5f7a:	f0 e0       	ldi	r31, 0x00	; 0
    5f7c:	80 81       	ld	r24, Z
    5f7e:	81 60       	ori	r24, 0x01	; 1
    5f80:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    5f82:	ea e7       	ldi	r30, 0x7A	; 122
    5f84:	f0 e0       	ldi	r31, 0x00	; 0
    5f86:	80 81       	ld	r24, Z
    5f88:	84 60       	ori	r24, 0x04	; 4
    5f8a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    5f8c:	80 81       	ld	r24, Z
    5f8e:	82 60       	ori	r24, 0x02	; 2
    5f90:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    5f92:	80 81       	ld	r24, Z
    5f94:	81 60       	ori	r24, 0x01	; 1
    5f96:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    5f98:	80 81       	ld	r24, Z
    5f9a:	80 68       	ori	r24, 0x80	; 128
    5f9c:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    5f9e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    5fa2:	08 95       	ret

00005fa4 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    5fa4:	83 30       	cpi	r24, 0x03	; 3
    5fa6:	81 f0       	breq	.+32     	; 0x5fc8 <turnOffPWM+0x24>
    5fa8:	28 f4       	brcc	.+10     	; 0x5fb4 <turnOffPWM+0x10>
    5faa:	81 30       	cpi	r24, 0x01	; 1
    5fac:	99 f0       	breq	.+38     	; 0x5fd4 <turnOffPWM+0x30>
    5fae:	82 30       	cpi	r24, 0x02	; 2
    5fb0:	a1 f0       	breq	.+40     	; 0x5fda <turnOffPWM+0x36>
    5fb2:	08 95       	ret
    5fb4:	87 30       	cpi	r24, 0x07	; 7
    5fb6:	a9 f0       	breq	.+42     	; 0x5fe2 <turnOffPWM+0x3e>
    5fb8:	88 30       	cpi	r24, 0x08	; 8
    5fba:	b9 f0       	breq	.+46     	; 0x5fea <turnOffPWM+0x46>
    5fbc:	84 30       	cpi	r24, 0x04	; 4
    5fbe:	d1 f4       	brne	.+52     	; 0x5ff4 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    5fc0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    5fc4:	8f 7d       	andi	r24, 0xDF	; 223
    5fc6:	03 c0       	rjmp	.+6      	; 0x5fce <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    5fc8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    5fcc:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    5fce:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    5fd2:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    5fd4:	84 b5       	in	r24, 0x24	; 36
    5fd6:	8f 77       	andi	r24, 0x7F	; 127
    5fd8:	02 c0       	rjmp	.+4      	; 0x5fde <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    5fda:	84 b5       	in	r24, 0x24	; 36
    5fdc:	8f 7d       	andi	r24, 0xDF	; 223
    5fde:	84 bd       	out	0x24, r24	; 36
    5fe0:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    5fe2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    5fe6:	8f 77       	andi	r24, 0x7F	; 127
    5fe8:	03 c0       	rjmp	.+6      	; 0x5ff0 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    5fea:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    5fee:	8f 7d       	andi	r24, 0xDF	; 223
    5ff0:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    5ff4:	08 95       	ret

00005ff6 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    5ff6:	cf 93       	push	r28
    5ff8:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    5ffa:	90 e0       	ldi	r25, 0x00	; 0
    5ffc:	fc 01       	movw	r30, r24
    5ffe:	ee 5a       	subi	r30, 0xAE	; 174
    6000:	fd 4f       	sbci	r31, 0xFD	; 253
    6002:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    6004:	fc 01       	movw	r30, r24
    6006:	ee 58       	subi	r30, 0x8E	; 142
    6008:	fd 4f       	sbci	r31, 0xFD	; 253
    600a:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    600c:	88 23       	and	r24, r24
    600e:	61 f1       	breq	.+88     	; 0x6068 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    6010:	90 e0       	ldi	r25, 0x00	; 0
    6012:	88 0f       	add	r24, r24
    6014:	99 1f       	adc	r25, r25
    6016:	fc 01       	movw	r30, r24
    6018:	ea 55       	subi	r30, 0x5A	; 90
    601a:	fd 4f       	sbci	r31, 0xFD	; 253
    601c:	c5 91       	lpm	r28, Z+
    601e:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    6020:	fc 01       	movw	r30, r24
    6022:	e4 56       	subi	r30, 0x64	; 100
    6024:	fd 4f       	sbci	r31, 0xFD	; 253
    6026:	a5 91       	lpm	r26, Z+
    6028:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    602a:	61 11       	cpse	r22, r1
    602c:	09 c0       	rjmp	.+18     	; 0x6040 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    602e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    6030:	f8 94       	cli
		*reg &= ~bit;
    6032:	88 81       	ld	r24, Y
    6034:	20 95       	com	r18
    6036:	82 23       	and	r24, r18
    6038:	88 83       	st	Y, r24
		*out &= ~bit;
    603a:	ec 91       	ld	r30, X
    603c:	2e 23       	and	r18, r30
    603e:	0b c0       	rjmp	.+22     	; 0x6056 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    6040:	62 30       	cpi	r22, 0x02	; 2
    6042:	61 f4       	brne	.+24     	; 0x605c <pinMode+0x66>
		uint8_t oldSREG = SREG;
    6044:	9f b7       	in	r25, 0x3f	; 63
                cli();
    6046:	f8 94       	cli
		*reg &= ~bit;
    6048:	88 81       	ld	r24, Y
    604a:	32 2f       	mov	r19, r18
    604c:	30 95       	com	r19
    604e:	83 23       	and	r24, r19
    6050:	88 83       	st	Y, r24
		*out |= bit;
    6052:	ec 91       	ld	r30, X
    6054:	2e 2b       	or	r18, r30
    6056:	2c 93       	st	X, r18
		SREG = oldSREG;
    6058:	9f bf       	out	0x3f, r25	; 63
    605a:	06 c0       	rjmp	.+12     	; 0x6068 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    605c:	8f b7       	in	r24, 0x3f	; 63
                cli();
    605e:	f8 94       	cli
		*reg |= bit;
    6060:	e8 81       	ld	r30, Y
    6062:	2e 2b       	or	r18, r30
    6064:	28 83       	st	Y, r18
		SREG = oldSREG;
    6066:	8f bf       	out	0x3f, r24	; 63
	}
}
    6068:	df 91       	pop	r29
    606a:	cf 91       	pop	r28
    606c:	08 95       	ret

0000606e <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    606e:	1f 93       	push	r17
    6070:	cf 93       	push	r28
    6072:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    6074:	28 2f       	mov	r18, r24
    6076:	30 e0       	ldi	r19, 0x00	; 0
    6078:	f9 01       	movw	r30, r18
    607a:	ee 5c       	subi	r30, 0xCE	; 206
    607c:	fd 4f       	sbci	r31, 0xFD	; 253
    607e:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    6080:	f9 01       	movw	r30, r18
    6082:	ee 5a       	subi	r30, 0xAE	; 174
    6084:	fd 4f       	sbci	r31, 0xFD	; 253
    6086:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    6088:	f9 01       	movw	r30, r18
    608a:	ee 58       	subi	r30, 0x8E	; 142
    608c:	fd 4f       	sbci	r31, 0xFD	; 253
    608e:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    6090:	cc 23       	and	r28, r28
    6092:	b9 f0       	breq	.+46     	; 0x60c2 <digitalWrite+0x54>
    6094:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    6096:	81 11       	cpse	r24, r1
    6098:	85 df       	rcall	.-246    	; 0x5fa4 <turnOffPWM>

	out = portOutputRegister(port);
    609a:	ec 2f       	mov	r30, r28
    609c:	f0 e0       	ldi	r31, 0x00	; 0
    609e:	ee 0f       	add	r30, r30
    60a0:	ff 1f       	adc	r31, r31
    60a2:	e4 56       	subi	r30, 0x64	; 100
    60a4:	fd 4f       	sbci	r31, 0xFD	; 253
    60a6:	a5 91       	lpm	r26, Z+
    60a8:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    60aa:	9f b7       	in	r25, 0x3f	; 63
	cli();
    60ac:	f8 94       	cli

	if (val == LOW) {
    60ae:	11 11       	cpse	r17, r1
    60b0:	04 c0       	rjmp	.+8      	; 0x60ba <digitalWrite+0x4c>
		*out &= ~bit;
    60b2:	8c 91       	ld	r24, X
    60b4:	d0 95       	com	r29
    60b6:	d8 23       	and	r29, r24
    60b8:	02 c0       	rjmp	.+4      	; 0x60be <digitalWrite+0x50>
	} else {
		*out |= bit;
    60ba:	ec 91       	ld	r30, X
    60bc:	de 2b       	or	r29, r30
    60be:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    60c0:	9f bf       	out	0x3f, r25	; 63
}
    60c2:	df 91       	pop	r29
    60c4:	cf 91       	pop	r28
    60c6:	1f 91       	pop	r17
    60c8:	08 95       	ret

000060ca <digitalRead>:

int digitalRead(uint8_t pin)
{
    60ca:	cf 93       	push	r28
    60cc:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    60ce:	28 2f       	mov	r18, r24
    60d0:	30 e0       	ldi	r19, 0x00	; 0
    60d2:	f9 01       	movw	r30, r18
    60d4:	ee 5c       	subi	r30, 0xCE	; 206
    60d6:	fd 4f       	sbci	r31, 0xFD	; 253
    60d8:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    60da:	f9 01       	movw	r30, r18
    60dc:	ee 5a       	subi	r30, 0xAE	; 174
    60de:	fd 4f       	sbci	r31, 0xFD	; 253
    60e0:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    60e2:	f9 01       	movw	r30, r18
    60e4:	ee 58       	subi	r30, 0x8E	; 142
    60e6:	fd 4f       	sbci	r31, 0xFD	; 253
    60e8:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    60ea:	cc 23       	and	r28, r28
    60ec:	89 f0       	breq	.+34     	; 0x6110 <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    60ee:	81 11       	cpse	r24, r1
    60f0:	59 df       	rcall	.-334    	; 0x5fa4 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    60f2:	ec 2f       	mov	r30, r28
    60f4:	f0 e0       	ldi	r31, 0x00	; 0
    60f6:	ee 0f       	add	r30, r30
    60f8:	ff 1f       	adc	r31, r31
    60fa:	ee 56       	subi	r30, 0x6E	; 110
    60fc:	fd 4f       	sbci	r31, 0xFD	; 253
    60fe:	a5 91       	lpm	r26, Z+
    6100:	b4 91       	lpm	r27, Z
    6102:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    6104:	ed 23       	and	r30, r29
    6106:	81 e0       	ldi	r24, 0x01	; 1
    6108:	90 e0       	ldi	r25, 0x00	; 0
    610a:	21 f4       	brne	.+8      	; 0x6114 <digitalRead+0x4a>
    610c:	80 e0       	ldi	r24, 0x00	; 0
    610e:	02 c0       	rjmp	.+4      	; 0x6114 <digitalRead+0x4a>
    6110:	80 e0       	ldi	r24, 0x00	; 0
    6112:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    6114:	df 91       	pop	r29
    6116:	cf 91       	pop	r28
    6118:	08 95       	ret

0000611a <_ZNK6String14StringIfHelperEv>:
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
		*p = toupper(*p);
	}
}
    611a:	08 95       	ret

0000611c <_ZN6StringD1Ev>:
    611c:	fc 01       	movw	r30, r24
    611e:	80 81       	ld	r24, Z
    6120:	91 81       	ldd	r25, Z+1	; 0x01
    6122:	c7 c4       	rjmp	.+2446   	; 0x6ab2 <free>

00006124 <_ZN6String10invalidateEv>:
    6124:	cf 93       	push	r28
    6126:	df 93       	push	r29
    6128:	ec 01       	movw	r28, r24
    612a:	88 81       	ld	r24, Y
    612c:	99 81       	ldd	r25, Y+1	; 0x01
    612e:	00 97       	sbiw	r24, 0x00	; 0
    6130:	09 f0       	breq	.+2      	; 0x6134 <_ZN6String10invalidateEv+0x10>
    6132:	bf d4       	rcall	.+2430   	; 0x6ab2 <free>
    6134:	19 82       	std	Y+1, r1	; 0x01
    6136:	18 82       	st	Y, r1
    6138:	1d 82       	std	Y+5, r1	; 0x05
    613a:	1c 82       	std	Y+4, r1	; 0x04
    613c:	1b 82       	std	Y+3, r1	; 0x03
    613e:	1a 82       	std	Y+2, r1	; 0x02
    6140:	df 91       	pop	r29
    6142:	cf 91       	pop	r28
    6144:	08 95       	ret

00006146 <_ZN6String12changeBufferEj>:
    6146:	0f 93       	push	r16
    6148:	1f 93       	push	r17
    614a:	cf 93       	push	r28
    614c:	df 93       	push	r29
    614e:	ec 01       	movw	r28, r24
    6150:	8b 01       	movw	r16, r22
    6152:	6f 5f       	subi	r22, 0xFF	; 255
    6154:	7f 4f       	sbci	r23, 0xFF	; 255
    6156:	88 81       	ld	r24, Y
    6158:	99 81       	ldd	r25, Y+1	; 0x01
    615a:	34 d5       	rcall	.+2664   	; 0x6bc4 <realloc>
    615c:	00 97       	sbiw	r24, 0x00	; 0
    615e:	31 f0       	breq	.+12     	; 0x616c <_ZN6String12changeBufferEj+0x26>
    6160:	99 83       	std	Y+1, r25	; 0x01
    6162:	88 83       	st	Y, r24
    6164:	1b 83       	std	Y+3, r17	; 0x03
    6166:	0a 83       	std	Y+2, r16	; 0x02
    6168:	81 e0       	ldi	r24, 0x01	; 1
    616a:	01 c0       	rjmp	.+2      	; 0x616e <_ZN6String12changeBufferEj+0x28>
    616c:	80 e0       	ldi	r24, 0x00	; 0
    616e:	df 91       	pop	r29
    6170:	cf 91       	pop	r28
    6172:	1f 91       	pop	r17
    6174:	0f 91       	pop	r16
    6176:	08 95       	ret

00006178 <_ZN6String7reserveEj>:
    6178:	cf 93       	push	r28
    617a:	df 93       	push	r29
    617c:	ec 01       	movw	r28, r24
    617e:	88 81       	ld	r24, Y
    6180:	99 81       	ldd	r25, Y+1	; 0x01
    6182:	89 2b       	or	r24, r25
    6184:	29 f0       	breq	.+10     	; 0x6190 <_ZN6String7reserveEj+0x18>
    6186:	8a 81       	ldd	r24, Y+2	; 0x02
    6188:	9b 81       	ldd	r25, Y+3	; 0x03
    618a:	86 17       	cp	r24, r22
    618c:	97 07       	cpc	r25, r23
    618e:	58 f4       	brcc	.+22     	; 0x61a6 <_ZN6String7reserveEj+0x2e>
    6190:	ce 01       	movw	r24, r28
    6192:	d9 df       	rcall	.-78     	; 0x6146 <_ZN6String12changeBufferEj>
    6194:	88 23       	and	r24, r24
    6196:	41 f0       	breq	.+16     	; 0x61a8 <_ZN6String7reserveEj+0x30>
    6198:	8c 81       	ldd	r24, Y+4	; 0x04
    619a:	9d 81       	ldd	r25, Y+5	; 0x05
    619c:	89 2b       	or	r24, r25
    619e:	19 f4       	brne	.+6      	; 0x61a6 <_ZN6String7reserveEj+0x2e>
    61a0:	e8 81       	ld	r30, Y
    61a2:	f9 81       	ldd	r31, Y+1	; 0x01
    61a4:	10 82       	st	Z, r1
    61a6:	81 e0       	ldi	r24, 0x01	; 1
    61a8:	df 91       	pop	r29
    61aa:	cf 91       	pop	r28
    61ac:	08 95       	ret

000061ae <_ZN6String4copyEPKcj>:
    61ae:	ef 92       	push	r14
    61b0:	ff 92       	push	r15
    61b2:	0f 93       	push	r16
    61b4:	1f 93       	push	r17
    61b6:	cf 93       	push	r28
    61b8:	df 93       	push	r29
    61ba:	ec 01       	movw	r28, r24
    61bc:	7b 01       	movw	r14, r22
    61be:	8a 01       	movw	r16, r20
    61c0:	ba 01       	movw	r22, r20
    61c2:	da df       	rcall	.-76     	; 0x6178 <_ZN6String7reserveEj>
    61c4:	81 11       	cpse	r24, r1
    61c6:	03 c0       	rjmp	.+6      	; 0x61ce <_ZN6String4copyEPKcj+0x20>
    61c8:	ce 01       	movw	r24, r28
    61ca:	ac df       	rcall	.-168    	; 0x6124 <_ZN6String10invalidateEv>
    61cc:	06 c0       	rjmp	.+12     	; 0x61da <_ZN6String4copyEPKcj+0x2c>
    61ce:	1d 83       	std	Y+5, r17	; 0x05
    61d0:	0c 83       	std	Y+4, r16	; 0x04
    61d2:	b7 01       	movw	r22, r14
    61d4:	88 81       	ld	r24, Y
    61d6:	99 81       	ldd	r25, Y+1	; 0x01
    61d8:	fc d5       	rcall	.+3064   	; 0x6dd2 <strcpy>
    61da:	ce 01       	movw	r24, r28
    61dc:	df 91       	pop	r29
    61de:	cf 91       	pop	r28
    61e0:	1f 91       	pop	r17
    61e2:	0f 91       	pop	r16
    61e4:	ff 90       	pop	r15
    61e6:	ef 90       	pop	r14
    61e8:	08 95       	ret

000061ea <_ZN6StringC1EPKc>:
    61ea:	fc 01       	movw	r30, r24
    61ec:	11 82       	std	Z+1, r1	; 0x01
    61ee:	10 82       	st	Z, r1
    61f0:	13 82       	std	Z+3, r1	; 0x03
    61f2:	12 82       	std	Z+2, r1	; 0x02
    61f4:	15 82       	std	Z+5, r1	; 0x05
    61f6:	14 82       	std	Z+4, r1	; 0x04
    61f8:	61 15       	cp	r22, r1
    61fa:	71 05       	cpc	r23, r1
    61fc:	49 f0       	breq	.+18     	; 0x6210 <_ZN6StringC1EPKc+0x26>
    61fe:	fb 01       	movw	r30, r22
    6200:	01 90       	ld	r0, Z+
    6202:	00 20       	and	r0, r0
    6204:	e9 f7       	brne	.-6      	; 0x6200 <_ZN6StringC1EPKc+0x16>
    6206:	31 97       	sbiw	r30, 0x01	; 1
    6208:	af 01       	movw	r20, r30
    620a:	46 1b       	sub	r20, r22
    620c:	57 0b       	sbc	r21, r23
    620e:	cf cf       	rjmp	.-98     	; 0x61ae <_ZN6String4copyEPKcj>
    6210:	08 95       	ret

00006212 <_ZN6String4moveERS_>:
    6212:	0f 93       	push	r16
    6214:	1f 93       	push	r17
    6216:	cf 93       	push	r28
    6218:	df 93       	push	r29
    621a:	8c 01       	movw	r16, r24
    621c:	eb 01       	movw	r28, r22
    621e:	fc 01       	movw	r30, r24
    6220:	80 81       	ld	r24, Z
    6222:	91 81       	ldd	r25, Z+1	; 0x01
    6224:	00 97       	sbiw	r24, 0x00	; 0
    6226:	c1 f0       	breq	.+48     	; 0x6258 <_ZN6String4moveERS_+0x46>
    6228:	68 81       	ld	r22, Y
    622a:	79 81       	ldd	r23, Y+1	; 0x01
    622c:	61 15       	cp	r22, r1
    622e:	71 05       	cpc	r23, r1
    6230:	91 f0       	breq	.+36     	; 0x6256 <_ZN6String4moveERS_+0x44>
    6232:	2d e8       	ldi	r18, 0x8D	; 141
    6234:	30 e3       	ldi	r19, 0x30	; 48
    6236:	23 2b       	or	r18, r19
    6238:	71 f0       	breq	.+28     	; 0x6256 <_ZN6String4moveERS_+0x44>
    623a:	42 81       	ldd	r20, Z+2	; 0x02
    623c:	53 81       	ldd	r21, Z+3	; 0x03
    623e:	2c 81       	ldd	r18, Y+4	; 0x04
    6240:	3d 81       	ldd	r19, Y+5	; 0x05
    6242:	42 17       	cp	r20, r18
    6244:	53 07       	cpc	r21, r19
    6246:	38 f0       	brcs	.+14     	; 0x6256 <_ZN6String4moveERS_+0x44>
    6248:	c4 d5       	rcall	.+2952   	; 0x6dd2 <strcpy>
    624a:	8c 81       	ldd	r24, Y+4	; 0x04
    624c:	9d 81       	ldd	r25, Y+5	; 0x05
    624e:	f8 01       	movw	r30, r16
    6250:	95 83       	std	Z+5, r25	; 0x05
    6252:	84 83       	std	Z+4, r24	; 0x04
    6254:	12 c0       	rjmp	.+36     	; 0x627a <_ZN6String4moveERS_+0x68>
    6256:	2d d4       	rcall	.+2138   	; 0x6ab2 <free>
    6258:	88 81       	ld	r24, Y
    625a:	99 81       	ldd	r25, Y+1	; 0x01
    625c:	f8 01       	movw	r30, r16
    625e:	91 83       	std	Z+1, r25	; 0x01
    6260:	80 83       	st	Z, r24
    6262:	8a 81       	ldd	r24, Y+2	; 0x02
    6264:	9b 81       	ldd	r25, Y+3	; 0x03
    6266:	93 83       	std	Z+3, r25	; 0x03
    6268:	82 83       	std	Z+2, r24	; 0x02
    626a:	8c 81       	ldd	r24, Y+4	; 0x04
    626c:	9d 81       	ldd	r25, Y+5	; 0x05
    626e:	95 83       	std	Z+5, r25	; 0x05
    6270:	84 83       	std	Z+4, r24	; 0x04
    6272:	19 82       	std	Y+1, r1	; 0x01
    6274:	18 82       	st	Y, r1
    6276:	1b 82       	std	Y+3, r1	; 0x03
    6278:	1a 82       	std	Y+2, r1	; 0x02
    627a:	1d 82       	std	Y+5, r1	; 0x05
    627c:	1c 82       	std	Y+4, r1	; 0x04
    627e:	df 91       	pop	r29
    6280:	cf 91       	pop	r28
    6282:	1f 91       	pop	r17
    6284:	0f 91       	pop	r16
    6286:	08 95       	ret

00006288 <_ZN6StringC1EOS_>:
    6288:	fc 01       	movw	r30, r24
    628a:	11 82       	std	Z+1, r1	; 0x01
    628c:	10 82       	st	Z, r1
    628e:	13 82       	std	Z+3, r1	; 0x03
    6290:	12 82       	std	Z+2, r1	; 0x02
    6292:	15 82       	std	Z+5, r1	; 0x05
    6294:	14 82       	std	Z+4, r1	; 0x04
    6296:	bd cf       	rjmp	.-134    	; 0x6212 <_ZN6String4moveERS_>

00006298 <_ZN6StringaSERKS_>:
    6298:	cf 93       	push	r28
    629a:	df 93       	push	r29
    629c:	ec 01       	movw	r28, r24
    629e:	fb 01       	movw	r30, r22
    62a0:	86 17       	cp	r24, r22
    62a2:	97 07       	cpc	r25, r23
    62a4:	51 f0       	breq	.+20     	; 0x62ba <_ZN6StringaSERKS_+0x22>
    62a6:	60 81       	ld	r22, Z
    62a8:	71 81       	ldd	r23, Z+1	; 0x01
    62aa:	61 15       	cp	r22, r1
    62ac:	71 05       	cpc	r23, r1
    62ae:	21 f0       	breq	.+8      	; 0x62b8 <_ZN6StringaSERKS_+0x20>
    62b0:	44 81       	ldd	r20, Z+4	; 0x04
    62b2:	55 81       	ldd	r21, Z+5	; 0x05
    62b4:	7c df       	rcall	.-264    	; 0x61ae <_ZN6String4copyEPKcj>
    62b6:	01 c0       	rjmp	.+2      	; 0x62ba <_ZN6StringaSERKS_+0x22>
    62b8:	35 df       	rcall	.-406    	; 0x6124 <_ZN6String10invalidateEv>
    62ba:	ce 01       	movw	r24, r28
    62bc:	df 91       	pop	r29
    62be:	cf 91       	pop	r28
    62c0:	08 95       	ret

000062c2 <_ZN6StringC1ERKS_>:
    62c2:	fc 01       	movw	r30, r24
    62c4:	11 82       	std	Z+1, r1	; 0x01
    62c6:	10 82       	st	Z, r1
    62c8:	13 82       	std	Z+3, r1	; 0x03
    62ca:	12 82       	std	Z+2, r1	; 0x02
    62cc:	15 82       	std	Z+5, r1	; 0x05
    62ce:	14 82       	std	Z+4, r1	; 0x04
    62d0:	e3 cf       	rjmp	.-58     	; 0x6298 <_ZN6StringaSERKS_>

000062d2 <_ZN6StringaSEOS_>:
    62d2:	cf 93       	push	r28
    62d4:	df 93       	push	r29
    62d6:	ec 01       	movw	r28, r24
    62d8:	86 17       	cp	r24, r22
    62da:	97 07       	cpc	r25, r23
    62dc:	09 f0       	breq	.+2      	; 0x62e0 <_ZN6StringaSEOS_+0xe>
    62de:	99 df       	rcall	.-206    	; 0x6212 <_ZN6String4moveERS_>
    62e0:	ce 01       	movw	r24, r28
    62e2:	df 91       	pop	r29
    62e4:	cf 91       	pop	r28
    62e6:	08 95       	ret

000062e8 <_ZN6StringaSEPKc>:
    62e8:	cf 93       	push	r28
    62ea:	df 93       	push	r29
    62ec:	ec 01       	movw	r28, r24
    62ee:	61 15       	cp	r22, r1
    62f0:	71 05       	cpc	r23, r1
    62f2:	51 f0       	breq	.+20     	; 0x6308 <_ZN6StringaSEPKc+0x20>
    62f4:	fb 01       	movw	r30, r22
    62f6:	01 90       	ld	r0, Z+
    62f8:	00 20       	and	r0, r0
    62fa:	e9 f7       	brne	.-6      	; 0x62f6 <_ZN6StringaSEPKc+0xe>
    62fc:	31 97       	sbiw	r30, 0x01	; 1
    62fe:	af 01       	movw	r20, r30
    6300:	46 1b       	sub	r20, r22
    6302:	57 0b       	sbc	r21, r23
    6304:	54 df       	rcall	.-344    	; 0x61ae <_ZN6String4copyEPKcj>
    6306:	01 c0       	rjmp	.+2      	; 0x630a <_ZN6StringaSEPKc+0x22>
    6308:	0d df       	rcall	.-486    	; 0x6124 <_ZN6String10invalidateEv>
    630a:	ce 01       	movw	r24, r28
    630c:	df 91       	pop	r29
    630e:	cf 91       	pop	r28
    6310:	08 95       	ret

00006312 <_ZN6StringC1Ec>:
    6312:	cf 93       	push	r28
    6314:	df 93       	push	r29
    6316:	00 d0       	rcall	.+0      	; 0x6318 <_ZN6StringC1Ec+0x6>
    6318:	cd b7       	in	r28, 0x3d	; 61
    631a:	de b7       	in	r29, 0x3e	; 62
    631c:	fc 01       	movw	r30, r24
    631e:	11 82       	std	Z+1, r1	; 0x01
    6320:	10 82       	st	Z, r1
    6322:	13 82       	std	Z+3, r1	; 0x03
    6324:	12 82       	std	Z+2, r1	; 0x02
    6326:	15 82       	std	Z+5, r1	; 0x05
    6328:	14 82       	std	Z+4, r1	; 0x04
    632a:	69 83       	std	Y+1, r22	; 0x01
    632c:	1a 82       	std	Y+2, r1	; 0x02
    632e:	be 01       	movw	r22, r28
    6330:	6f 5f       	subi	r22, 0xFF	; 255
    6332:	7f 4f       	sbci	r23, 0xFF	; 255
    6334:	d9 df       	rcall	.-78     	; 0x62e8 <_ZN6StringaSEPKc>
    6336:	0f 90       	pop	r0
    6338:	0f 90       	pop	r0
    633a:	df 91       	pop	r29
    633c:	cf 91       	pop	r28
    633e:	08 95       	ret

00006340 <_ZN6StringC1Ehh>:
    6340:	0f 93       	push	r16
    6342:	1f 93       	push	r17
    6344:	cf 93       	push	r28
    6346:	df 93       	push	r29
    6348:	cd b7       	in	r28, 0x3d	; 61
    634a:	de b7       	in	r29, 0x3e	; 62
    634c:	29 97       	sbiw	r28, 0x09	; 9
    634e:	0f b6       	in	r0, 0x3f	; 63
    6350:	f8 94       	cli
    6352:	de bf       	out	0x3e, r29	; 62
    6354:	0f be       	out	0x3f, r0	; 63
    6356:	cd bf       	out	0x3d, r28	; 61
    6358:	8c 01       	movw	r16, r24
    635a:	86 2f       	mov	r24, r22
    635c:	f8 01       	movw	r30, r16
    635e:	11 82       	std	Z+1, r1	; 0x01
    6360:	10 82       	st	Z, r1
    6362:	13 82       	std	Z+3, r1	; 0x03
    6364:	12 82       	std	Z+2, r1	; 0x02
    6366:	15 82       	std	Z+5, r1	; 0x05
    6368:	14 82       	std	Z+4, r1	; 0x04
    636a:	50 e0       	ldi	r21, 0x00	; 0
    636c:	be 01       	movw	r22, r28
    636e:	6f 5f       	subi	r22, 0xFF	; 255
    6370:	7f 4f       	sbci	r23, 0xFF	; 255
    6372:	90 e0       	ldi	r25, 0x00	; 0
    6374:	78 d5       	rcall	.+2800   	; 0x6e66 <utoa>
    6376:	be 01       	movw	r22, r28
    6378:	6f 5f       	subi	r22, 0xFF	; 255
    637a:	7f 4f       	sbci	r23, 0xFF	; 255
    637c:	c8 01       	movw	r24, r16
    637e:	b4 df       	rcall	.-152    	; 0x62e8 <_ZN6StringaSEPKc>
    6380:	29 96       	adiw	r28, 0x09	; 9
    6382:	0f b6       	in	r0, 0x3f	; 63
    6384:	f8 94       	cli
    6386:	de bf       	out	0x3e, r29	; 62
    6388:	0f be       	out	0x3f, r0	; 63
    638a:	cd bf       	out	0x3d, r28	; 61
    638c:	df 91       	pop	r29
    638e:	cf 91       	pop	r28
    6390:	1f 91       	pop	r17
    6392:	0f 91       	pop	r16
    6394:	08 95       	ret

00006396 <_ZN6StringC1Emh>:
    6396:	0f 93       	push	r16
    6398:	1f 93       	push	r17
    639a:	cf 93       	push	r28
    639c:	df 93       	push	r29
    639e:	cd b7       	in	r28, 0x3d	; 61
    63a0:	de b7       	in	r29, 0x3e	; 62
    63a2:	a1 97       	sbiw	r28, 0x21	; 33
    63a4:	0f b6       	in	r0, 0x3f	; 63
    63a6:	f8 94       	cli
    63a8:	de bf       	out	0x3e, r29	; 62
    63aa:	0f be       	out	0x3f, r0	; 63
    63ac:	cd bf       	out	0x3d, r28	; 61
    63ae:	8c 01       	movw	r16, r24
    63b0:	cb 01       	movw	r24, r22
    63b2:	ba 01       	movw	r22, r20
    63b4:	f8 01       	movw	r30, r16
    63b6:	11 82       	std	Z+1, r1	; 0x01
    63b8:	10 82       	st	Z, r1
    63ba:	13 82       	std	Z+3, r1	; 0x03
    63bc:	12 82       	std	Z+2, r1	; 0x02
    63be:	15 82       	std	Z+5, r1	; 0x05
    63c0:	14 82       	std	Z+4, r1	; 0x04
    63c2:	30 e0       	ldi	r19, 0x00	; 0
    63c4:	ae 01       	movw	r20, r28
    63c6:	4f 5f       	subi	r20, 0xFF	; 255
    63c8:	5f 4f       	sbci	r21, 0xFF	; 255
    63ca:	22 d5       	rcall	.+2628   	; 0x6e10 <ultoa>
    63cc:	be 01       	movw	r22, r28
    63ce:	6f 5f       	subi	r22, 0xFF	; 255
    63d0:	7f 4f       	sbci	r23, 0xFF	; 255
    63d2:	c8 01       	movw	r24, r16
    63d4:	89 df       	rcall	.-238    	; 0x62e8 <_ZN6StringaSEPKc>
    63d6:	a1 96       	adiw	r28, 0x21	; 33
    63d8:	0f b6       	in	r0, 0x3f	; 63
    63da:	f8 94       	cli
    63dc:	de bf       	out	0x3e, r29	; 62
    63de:	0f be       	out	0x3f, r0	; 63
    63e0:	cd bf       	out	0x3d, r28	; 61
    63e2:	df 91       	pop	r29
    63e4:	cf 91       	pop	r28
    63e6:	1f 91       	pop	r17
    63e8:	0f 91       	pop	r16
    63ea:	08 95       	ret

000063ec <_ZN6StringC1Edh>:
    63ec:	ef 92       	push	r14
    63ee:	ff 92       	push	r15
    63f0:	0f 93       	push	r16
    63f2:	1f 93       	push	r17
    63f4:	cf 93       	push	r28
    63f6:	df 93       	push	r29
    63f8:	cd b7       	in	r28, 0x3d	; 61
    63fa:	de b7       	in	r29, 0x3e	; 62
    63fc:	a1 97       	sbiw	r28, 0x21	; 33
    63fe:	0f b6       	in	r0, 0x3f	; 63
    6400:	f8 94       	cli
    6402:	de bf       	out	0x3e, r29	; 62
    6404:	0f be       	out	0x3f, r0	; 63
    6406:	cd bf       	out	0x3d, r28	; 61
    6408:	7c 01       	movw	r14, r24
    640a:	cb 01       	movw	r24, r22
    640c:	ba 01       	movw	r22, r20
    640e:	f7 01       	movw	r30, r14
    6410:	11 82       	std	Z+1, r1	; 0x01
    6412:	10 82       	st	Z, r1
    6414:	13 82       	std	Z+3, r1	; 0x03
    6416:	12 82       	std	Z+2, r1	; 0x02
    6418:	15 82       	std	Z+5, r1	; 0x05
    641a:	14 82       	std	Z+4, r1	; 0x04
    641c:	42 e0       	ldi	r20, 0x02	; 2
    641e:	42 0f       	add	r20, r18
    6420:	8e 01       	movw	r16, r28
    6422:	0f 5f       	subi	r16, 0xFF	; 255
    6424:	1f 4f       	sbci	r17, 0xFF	; 255
    6426:	8e d2       	rcall	.+1308   	; 0x6944 <dtostrf>
    6428:	bc 01       	movw	r22, r24
    642a:	c7 01       	movw	r24, r14
    642c:	5d df       	rcall	.-326    	; 0x62e8 <_ZN6StringaSEPKc>
    642e:	a1 96       	adiw	r28, 0x21	; 33
    6430:	0f b6       	in	r0, 0x3f	; 63
    6432:	f8 94       	cli
    6434:	de bf       	out	0x3e, r29	; 62
    6436:	0f be       	out	0x3f, r0	; 63
    6438:	cd bf       	out	0x3d, r28	; 61
    643a:	df 91       	pop	r29
    643c:	cf 91       	pop	r28
    643e:	1f 91       	pop	r17
    6440:	0f 91       	pop	r16
    6442:	ff 90       	pop	r15
    6444:	ef 90       	pop	r14
    6446:	08 95       	ret

00006448 <_ZN6String6concatEPKcj>:
    6448:	ef 92       	push	r14
    644a:	ff 92       	push	r15
    644c:	0f 93       	push	r16
    644e:	1f 93       	push	r17
    6450:	cf 93       	push	r28
    6452:	df 93       	push	r29
    6454:	61 15       	cp	r22, r1
    6456:	71 05       	cpc	r23, r1
    6458:	11 f4       	brne	.+4      	; 0x645e <_ZN6String6concatEPKcj+0x16>
    645a:	80 e0       	ldi	r24, 0x00	; 0
    645c:	1a c0       	rjmp	.+52     	; 0x6492 <_ZN6String6concatEPKcj+0x4a>
    645e:	41 15       	cp	r20, r1
    6460:	51 05       	cpc	r21, r1
    6462:	b1 f0       	breq	.+44     	; 0x6490 <_ZN6String6concatEPKcj+0x48>
    6464:	7b 01       	movw	r14, r22
    6466:	ec 01       	movw	r28, r24
    6468:	8c 81       	ldd	r24, Y+4	; 0x04
    646a:	9d 81       	ldd	r25, Y+5	; 0x05
    646c:	8a 01       	movw	r16, r20
    646e:	08 0f       	add	r16, r24
    6470:	19 1f       	adc	r17, r25
    6472:	b8 01       	movw	r22, r16
    6474:	ce 01       	movw	r24, r28
    6476:	80 de       	rcall	.-768    	; 0x6178 <_ZN6String7reserveEj>
    6478:	88 23       	and	r24, r24
    647a:	79 f3       	breq	.-34     	; 0x645a <_ZN6String6concatEPKcj+0x12>
    647c:	28 81       	ld	r18, Y
    647e:	39 81       	ldd	r19, Y+1	; 0x01
    6480:	8c 81       	ldd	r24, Y+4	; 0x04
    6482:	9d 81       	ldd	r25, Y+5	; 0x05
    6484:	b7 01       	movw	r22, r14
    6486:	82 0f       	add	r24, r18
    6488:	93 1f       	adc	r25, r19
    648a:	a3 d4       	rcall	.+2374   	; 0x6dd2 <strcpy>
    648c:	1d 83       	std	Y+5, r17	; 0x05
    648e:	0c 83       	std	Y+4, r16	; 0x04
    6490:	81 e0       	ldi	r24, 0x01	; 1
    6492:	df 91       	pop	r29
    6494:	cf 91       	pop	r28
    6496:	1f 91       	pop	r17
    6498:	0f 91       	pop	r16
    649a:	ff 90       	pop	r15
    649c:	ef 90       	pop	r14
    649e:	08 95       	ret

000064a0 <_ZN6String6concatERKS_>:
    64a0:	fb 01       	movw	r30, r22
    64a2:	44 81       	ldd	r20, Z+4	; 0x04
    64a4:	55 81       	ldd	r21, Z+5	; 0x05
    64a6:	60 81       	ld	r22, Z
    64a8:	71 81       	ldd	r23, Z+1	; 0x01
    64aa:	ce cf       	rjmp	.-100    	; 0x6448 <_ZN6String6concatEPKcj>

000064ac <_ZN6String6concatEPKc>:
    64ac:	61 15       	cp	r22, r1
    64ae:	71 05       	cpc	r23, r1
    64b0:	49 f0       	breq	.+18     	; 0x64c4 <_ZN6String6concatEPKc+0x18>
    64b2:	fb 01       	movw	r30, r22
    64b4:	01 90       	ld	r0, Z+
    64b6:	00 20       	and	r0, r0
    64b8:	e9 f7       	brne	.-6      	; 0x64b4 <_ZN6String6concatEPKc+0x8>
    64ba:	31 97       	sbiw	r30, 0x01	; 1
    64bc:	af 01       	movw	r20, r30
    64be:	46 1b       	sub	r20, r22
    64c0:	57 0b       	sbc	r21, r23
    64c2:	c2 cf       	rjmp	.-124    	; 0x6448 <_ZN6String6concatEPKcj>
    64c4:	80 e0       	ldi	r24, 0x00	; 0
    64c6:	08 95       	ret

000064c8 <_ZN6String6concatEc>:
    64c8:	cf 93       	push	r28
    64ca:	df 93       	push	r29
    64cc:	00 d0       	rcall	.+0      	; 0x64ce <_ZN6String6concatEc+0x6>
    64ce:	cd b7       	in	r28, 0x3d	; 61
    64d0:	de b7       	in	r29, 0x3e	; 62
    64d2:	69 83       	std	Y+1, r22	; 0x01
    64d4:	1a 82       	std	Y+2, r1	; 0x02
    64d6:	41 e0       	ldi	r20, 0x01	; 1
    64d8:	50 e0       	ldi	r21, 0x00	; 0
    64da:	be 01       	movw	r22, r28
    64dc:	6f 5f       	subi	r22, 0xFF	; 255
    64de:	7f 4f       	sbci	r23, 0xFF	; 255
    64e0:	b3 df       	rcall	.-154    	; 0x6448 <_ZN6String6concatEPKcj>
    64e2:	0f 90       	pop	r0
    64e4:	0f 90       	pop	r0
    64e6:	df 91       	pop	r29
    64e8:	cf 91       	pop	r28
    64ea:	08 95       	ret

000064ec <_ZplRK15StringSumHelperRK6String>:
    64ec:	cf 93       	push	r28
    64ee:	df 93       	push	r29
    64f0:	ec 01       	movw	r28, r24
    64f2:	fb 01       	movw	r30, r22
    64f4:	44 81       	ldd	r20, Z+4	; 0x04
    64f6:	55 81       	ldd	r21, Z+5	; 0x05
    64f8:	60 81       	ld	r22, Z
    64fa:	71 81       	ldd	r23, Z+1	; 0x01
    64fc:	a5 df       	rcall	.-182    	; 0x6448 <_ZN6String6concatEPKcj>
    64fe:	81 11       	cpse	r24, r1
    6500:	02 c0       	rjmp	.+4      	; 0x6506 <_ZplRK15StringSumHelperRK6String+0x1a>
    6502:	ce 01       	movw	r24, r28
    6504:	0f de       	rcall	.-994    	; 0x6124 <_ZN6String10invalidateEv>
    6506:	ce 01       	movw	r24, r28
    6508:	df 91       	pop	r29
    650a:	cf 91       	pop	r28
    650c:	08 95       	ret

0000650e <_ZplRK15StringSumHelperPKc>:
    650e:	cf 93       	push	r28
    6510:	df 93       	push	r29
    6512:	ec 01       	movw	r28, r24
    6514:	61 15       	cp	r22, r1
    6516:	71 05       	cpc	r23, r1
    6518:	59 f0       	breq	.+22     	; 0x6530 <_ZplRK15StringSumHelperPKc+0x22>
    651a:	fb 01       	movw	r30, r22
    651c:	01 90       	ld	r0, Z+
    651e:	00 20       	and	r0, r0
    6520:	e9 f7       	brne	.-6      	; 0x651c <_ZplRK15StringSumHelperPKc+0xe>
    6522:	31 97       	sbiw	r30, 0x01	; 1
    6524:	af 01       	movw	r20, r30
    6526:	46 1b       	sub	r20, r22
    6528:	57 0b       	sbc	r21, r23
    652a:	8e df       	rcall	.-228    	; 0x6448 <_ZN6String6concatEPKcj>
    652c:	81 11       	cpse	r24, r1
    652e:	02 c0       	rjmp	.+4      	; 0x6534 <_ZplRK15StringSumHelperPKc+0x26>
    6530:	ce 01       	movw	r24, r28
    6532:	f8 dd       	rcall	.-1040   	; 0x6124 <_ZN6String10invalidateEv>
    6534:	ce 01       	movw	r24, r28
    6536:	df 91       	pop	r29
    6538:	cf 91       	pop	r28
    653a:	08 95       	ret

0000653c <_ZplRK15StringSumHelperc>:
    653c:	cf 93       	push	r28
    653e:	df 93       	push	r29
    6540:	ec 01       	movw	r28, r24
    6542:	c2 df       	rcall	.-124    	; 0x64c8 <_ZN6String6concatEc>
    6544:	81 11       	cpse	r24, r1
    6546:	02 c0       	rjmp	.+4      	; 0x654c <_ZplRK15StringSumHelperc+0x10>
    6548:	ce 01       	movw	r24, r28
    654a:	ec dd       	rcall	.-1064   	; 0x6124 <_ZN6String10invalidateEv>
    654c:	ce 01       	movw	r24, r28
    654e:	df 91       	pop	r29
    6550:	cf 91       	pop	r28
    6552:	08 95       	ret

00006554 <_ZNK6String6equalsEPKc>:
    6554:	fc 01       	movw	r30, r24
    6556:	24 81       	ldd	r18, Z+4	; 0x04
    6558:	35 81       	ldd	r19, Z+5	; 0x05
    655a:	23 2b       	or	r18, r19
    655c:	31 f4       	brne	.+12     	; 0x656a <_ZNK6String6equalsEPKc+0x16>
    655e:	21 e0       	ldi	r18, 0x01	; 1
    6560:	61 15       	cp	r22, r1
    6562:	71 05       	cpc	r23, r1
    6564:	99 f0       	breq	.+38     	; 0x658c <_ZNK6String6equalsEPKc+0x38>
    6566:	fb 01       	movw	r30, r22
    6568:	08 c0       	rjmp	.+16     	; 0x657a <_ZNK6String6equalsEPKc+0x26>
    656a:	fc 01       	movw	r30, r24
    656c:	80 81       	ld	r24, Z
    656e:	91 81       	ldd	r25, Z+1	; 0x01
    6570:	61 15       	cp	r22, r1
    6572:	71 05       	cpc	r23, r1
    6574:	31 f4       	brne	.+12     	; 0x6582 <_ZNK6String6equalsEPKc+0x2e>
    6576:	21 e0       	ldi	r18, 0x01	; 1
    6578:	fc 01       	movw	r30, r24
    657a:	80 81       	ld	r24, Z
    657c:	88 23       	and	r24, r24
    657e:	31 f0       	breq	.+12     	; 0x658c <_ZNK6String6equalsEPKc+0x38>
    6580:	04 c0       	rjmp	.+8      	; 0x658a <_ZNK6String6equalsEPKc+0x36>
    6582:	1e d4       	rcall	.+2108   	; 0x6dc0 <strcmp>
    6584:	21 e0       	ldi	r18, 0x01	; 1
    6586:	89 2b       	or	r24, r25
    6588:	09 f0       	breq	.+2      	; 0x658c <_ZNK6String6equalsEPKc+0x38>
    658a:	20 e0       	ldi	r18, 0x00	; 0
    658c:	82 2f       	mov	r24, r18
    658e:	08 95       	ret

00006590 <_ZNK6String9substringEjj>:
    6590:	bf 92       	push	r11
    6592:	cf 92       	push	r12
    6594:	df 92       	push	r13
    6596:	ef 92       	push	r14
    6598:	ff 92       	push	r15
    659a:	0f 93       	push	r16
    659c:	1f 93       	push	r17
    659e:	cf 93       	push	r28
    65a0:	df 93       	push	r29
    65a2:	7c 01       	movw	r14, r24
    65a4:	6b 01       	movw	r12, r22
    65a6:	8a 01       	movw	r16, r20
    65a8:	e9 01       	movw	r28, r18
    65aa:	24 17       	cp	r18, r20
    65ac:	35 07       	cpc	r19, r21
    65ae:	20 f4       	brcc	.+8      	; 0x65b8 <_ZNK6String9substringEjj+0x28>
    65b0:	81 2f       	mov	r24, r17
    65b2:	89 01       	movw	r16, r18
    65b4:	c4 2f       	mov	r28, r20
    65b6:	d8 2f       	mov	r29, r24
    65b8:	64 e8       	ldi	r22, 0x84	; 132
    65ba:	71 e0       	ldi	r23, 0x01	; 1
    65bc:	c7 01       	movw	r24, r14
    65be:	15 de       	rcall	.-982    	; 0x61ea <_ZN6StringC1EPKc>
    65c0:	d6 01       	movw	r26, r12
    65c2:	14 96       	adiw	r26, 0x04	; 4
    65c4:	8d 91       	ld	r24, X+
    65c6:	9c 91       	ld	r25, X
    65c8:	15 97       	sbiw	r26, 0x05	; 5
    65ca:	08 17       	cp	r16, r24
    65cc:	19 07       	cpc	r17, r25
    65ce:	c0 f4       	brcc	.+48     	; 0x6600 <_ZNK6String9substringEjj+0x70>
    65d0:	8c 17       	cp	r24, r28
    65d2:	9d 07       	cpc	r25, r29
    65d4:	08 f4       	brcc	.+2      	; 0x65d8 <_ZNK6String9substringEjj+0x48>
    65d6:	ec 01       	movw	r28, r24
    65d8:	d6 01       	movw	r26, r12
    65da:	ed 91       	ld	r30, X+
    65dc:	fc 91       	ld	r31, X
    65de:	11 97       	sbiw	r26, 0x01	; 1
    65e0:	ec 0f       	add	r30, r28
    65e2:	fd 1f       	adc	r31, r29
    65e4:	b0 80       	ld	r11, Z
    65e6:	10 82       	st	Z, r1
    65e8:	6d 91       	ld	r22, X+
    65ea:	7c 91       	ld	r23, X
    65ec:	60 0f       	add	r22, r16
    65ee:	71 1f       	adc	r23, r17
    65f0:	c7 01       	movw	r24, r14
    65f2:	7a de       	rcall	.-780    	; 0x62e8 <_ZN6StringaSEPKc>
    65f4:	d6 01       	movw	r26, r12
    65f6:	ed 91       	ld	r30, X+
    65f8:	fc 91       	ld	r31, X
    65fa:	ec 0f       	add	r30, r28
    65fc:	fd 1f       	adc	r31, r29
    65fe:	b0 82       	st	Z, r11
    6600:	c7 01       	movw	r24, r14
    6602:	df 91       	pop	r29
    6604:	cf 91       	pop	r28
    6606:	1f 91       	pop	r17
    6608:	0f 91       	pop	r16
    660a:	ff 90       	pop	r15
    660c:	ef 90       	pop	r14
    660e:	df 90       	pop	r13
    6610:	cf 90       	pop	r12
    6612:	bf 90       	pop	r11
    6614:	08 95       	ret

00006616 <_ZN6String4trimEv>:

void String::trim(void)
{
    6616:	af 92       	push	r10
    6618:	bf 92       	push	r11
    661a:	cf 92       	push	r12
    661c:	df 92       	push	r13
    661e:	ef 92       	push	r14
    6620:	ff 92       	push	r15
    6622:	0f 93       	push	r16
    6624:	1f 93       	push	r17
    6626:	cf 93       	push	r28
    6628:	df 93       	push	r29
	if (!buffer || len == 0) return;
    662a:	dc 01       	movw	r26, r24
    662c:	cd 90       	ld	r12, X+
    662e:	dc 90       	ld	r13, X
    6630:	11 97       	sbiw	r26, 0x01	; 1
    6632:	c1 14       	cp	r12, r1
    6634:	d1 04       	cpc	r13, r1
    6636:	09 f4       	brne	.+2      	; 0x663a <_ZN6String4trimEv+0x24>
    6638:	3c c0       	rjmp	.+120    	; 0x66b2 <_ZN6String4trimEv+0x9c>
    663a:	14 96       	adiw	r26, 0x04	; 4
    663c:	cd 91       	ld	r28, X+
    663e:	dc 91       	ld	r29, X
    6640:	15 97       	sbiw	r26, 0x05	; 5
    6642:	20 97       	sbiw	r28, 0x00	; 0
    6644:	b1 f1       	breq	.+108    	; 0x66b2 <_ZN6String4trimEv+0x9c>
    6646:	8c 01       	movw	r16, r24
    6648:	76 01       	movw	r14, r12
    664a:	57 01       	movw	r10, r14
    664c:	bf ef       	ldi	r27, 0xFF	; 255
    664e:	ab 1a       	sub	r10, r27
    6650:	bb 0a       	sbc	r11, r27
	char *begin = buffer;
	while (isspace(*begin)) begin++;
    6652:	f7 01       	movw	r30, r14
    6654:	80 81       	ld	r24, Z
    6656:	90 e0       	ldi	r25, 0x00	; 0
    6658:	99 d3       	rcall	.+1842   	; 0x6d8c <isspace>
    665a:	89 2b       	or	r24, r25
    665c:	11 f0       	breq	.+4      	; 0x6662 <_ZN6String4trimEv+0x4c>
    665e:	75 01       	movw	r14, r10
    6660:	f4 cf       	rjmp	.-24     	; 0x664a <_ZN6String4trimEv+0x34>
	char *end = buffer + len - 1;
    6662:	21 97       	sbiw	r28, 0x01	; 1
    6664:	cc 0d       	add	r28, r12
    6666:	dd 1d       	adc	r29, r13
	while (isspace(*end) && end >= begin) end--;
    6668:	88 81       	ld	r24, Y
    666a:	90 e0       	ldi	r25, 0x00	; 0
    666c:	8f d3       	rcall	.+1822   	; 0x6d8c <isspace>
    666e:	89 2b       	or	r24, r25
    6670:	29 f0       	breq	.+10     	; 0x667c <_ZN6String4trimEv+0x66>
    6672:	ce 15       	cp	r28, r14
    6674:	df 05       	cpc	r29, r15
    6676:	10 f0       	brcs	.+4      	; 0x667c <_ZN6String4trimEv+0x66>
    6678:	21 97       	sbiw	r28, 0x01	; 1
    667a:	f6 cf       	rjmp	.-20     	; 0x6668 <_ZN6String4trimEv+0x52>
	len = end + 1 - begin;
    667c:	ae 01       	movw	r20, r28
    667e:	4f 5f       	subi	r20, 0xFF	; 255
    6680:	5f 4f       	sbci	r21, 0xFF	; 255
    6682:	4e 19       	sub	r20, r14
    6684:	5f 09       	sbc	r21, r15
    6686:	d8 01       	movw	r26, r16
    6688:	15 96       	adiw	r26, 0x05	; 5
    668a:	5c 93       	st	X, r21
    668c:	4e 93       	st	-X, r20
    668e:	14 97       	sbiw	r26, 0x04	; 4
	if (begin > buffer) memcpy(buffer, begin, len);
    6690:	ce 14       	cp	r12, r14
    6692:	df 04       	cpc	r13, r15
    6694:	18 f4       	brcc	.+6      	; 0x669c <_ZN6String4trimEv+0x86>
    6696:	b7 01       	movw	r22, r14
    6698:	c6 01       	movw	r24, r12
    669a:	89 d3       	rcall	.+1810   	; 0x6dae <memcpy>
	buffer[len] = 0;
    669c:	d8 01       	movw	r26, r16
    669e:	ed 91       	ld	r30, X+
    66a0:	fc 91       	ld	r31, X
    66a2:	11 97       	sbiw	r26, 0x01	; 1
    66a4:	14 96       	adiw	r26, 0x04	; 4
    66a6:	8d 91       	ld	r24, X+
    66a8:	9c 91       	ld	r25, X
    66aa:	15 97       	sbiw	r26, 0x05	; 5
    66ac:	e8 0f       	add	r30, r24
    66ae:	f9 1f       	adc	r31, r25
    66b0:	10 82       	st	Z, r1
}
    66b2:	df 91       	pop	r29
    66b4:	cf 91       	pop	r28
    66b6:	1f 91       	pop	r17
    66b8:	0f 91       	pop	r16
    66ba:	ff 90       	pop	r15
    66bc:	ef 90       	pop	r14
    66be:	df 90       	pop	r13
    66c0:	cf 90       	pop	r12
    66c2:	bf 90       	pop	r11
    66c4:	af 90       	pop	r10
    66c6:	08 95       	ret

000066c8 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    66c8:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    66ca:	91 8d       	ldd	r25, Z+25	; 0x19
    66cc:	22 8d       	ldd	r18, Z+26	; 0x1a
    66ce:	89 2f       	mov	r24, r25
    66d0:	90 e0       	ldi	r25, 0x00	; 0
    66d2:	80 5c       	subi	r24, 0xC0	; 192
    66d4:	9f 4f       	sbci	r25, 0xFF	; 255
    66d6:	82 1b       	sub	r24, r18
    66d8:	91 09       	sbc	r25, r1
}
    66da:	8f 73       	andi	r24, 0x3F	; 63
    66dc:	99 27       	eor	r25, r25
    66de:	08 95       	ret

000066e0 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    66e0:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    66e2:	91 8d       	ldd	r25, Z+25	; 0x19
    66e4:	82 8d       	ldd	r24, Z+26	; 0x1a
    66e6:	98 17       	cp	r25, r24
    66e8:	31 f0       	breq	.+12     	; 0x66f6 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    66ea:	82 8d       	ldd	r24, Z+26	; 0x1a
    66ec:	e8 0f       	add	r30, r24
    66ee:	f1 1d       	adc	r31, r1
    66f0:	85 8d       	ldd	r24, Z+29	; 0x1d
    66f2:	90 e0       	ldi	r25, 0x00	; 0
    66f4:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    66f6:	8f ef       	ldi	r24, 0xFF	; 255
    66f8:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    66fa:	08 95       	ret

000066fc <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    66fc:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    66fe:	91 8d       	ldd	r25, Z+25	; 0x19
    6700:	82 8d       	ldd	r24, Z+26	; 0x1a
    6702:	98 17       	cp	r25, r24
    6704:	61 f0       	breq	.+24     	; 0x671e <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    6706:	82 8d       	ldd	r24, Z+26	; 0x1a
    6708:	df 01       	movw	r26, r30
    670a:	a8 0f       	add	r26, r24
    670c:	b1 1d       	adc	r27, r1
    670e:	5d 96       	adiw	r26, 0x1d	; 29
    6710:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    6712:	92 8d       	ldd	r25, Z+26	; 0x1a
    6714:	9f 5f       	subi	r25, 0xFF	; 255
    6716:	9f 73       	andi	r25, 0x3F	; 63
    6718:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    671a:	90 e0       	ldi	r25, 0x00	; 0
    671c:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    671e:	8f ef       	ldi	r24, 0xFF	; 255
    6720:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    6722:	08 95       	ret

00006724 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    6724:	fc 01       	movw	r30, r24
    6726:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    6728:	44 8d       	ldd	r20, Z+28	; 0x1c
    672a:	25 2f       	mov	r18, r21
    672c:	30 e0       	ldi	r19, 0x00	; 0
    672e:	84 2f       	mov	r24, r20
    6730:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    6732:	82 1b       	sub	r24, r18
    6734:	93 0b       	sbc	r25, r19
    6736:	54 17       	cp	r21, r20
    6738:	10 f0       	brcs	.+4      	; 0x673e <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    673a:	cf 96       	adiw	r24, 0x3f	; 63
    673c:	08 95       	ret
  return tail - head - 1;
    673e:	01 97       	sbiw	r24, 0x01	; 1
}
    6740:	08 95       	ret

00006742 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    6742:	82 e2       	ldi	r24, 0x22	; 34
    6744:	9d e2       	ldi	r25, 0x2D	; 45
    6746:	89 2b       	or	r24, r25
    6748:	41 f0       	breq	.+16     	; 0x675a <_Z14serialEventRunv+0x18>
    674a:	80 e0       	ldi	r24, 0x00	; 0
    674c:	90 e0       	ldi	r25, 0x00	; 0
    674e:	89 2b       	or	r24, r25
    6750:	21 f0       	breq	.+8      	; 0x675a <_Z14serialEventRunv+0x18>
    6752:	78 d9       	rcall	.-3344   	; 0x5a44 <_Z17Serial0_availablev>
    6754:	81 11       	cpse	r24, r1
    6756:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    675a:	08 95       	ret

0000675c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    675c:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    675e:	84 8d       	ldd	r24, Z+28	; 0x1c
    6760:	df 01       	movw	r26, r30
    6762:	a8 0f       	add	r26, r24
    6764:	b1 1d       	adc	r27, r1
    6766:	a3 5a       	subi	r26, 0xA3	; 163
    6768:	bf 4f       	sbci	r27, 0xFF	; 255
    676a:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    676c:	84 8d       	ldd	r24, Z+28	; 0x1c
    676e:	90 e0       	ldi	r25, 0x00	; 0
    6770:	01 96       	adiw	r24, 0x01	; 1
    6772:	8f 73       	andi	r24, 0x3F	; 63
    6774:	99 27       	eor	r25, r25
    6776:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    6778:	a6 89       	ldd	r26, Z+22	; 0x16
    677a:	b7 89       	ldd	r27, Z+23	; 0x17
    677c:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    677e:	a0 89       	ldd	r26, Z+16	; 0x10
    6780:	b1 89       	ldd	r27, Z+17	; 0x11
    6782:	8c 91       	ld	r24, X
    6784:	83 70       	andi	r24, 0x03	; 3
    6786:	80 64       	ori	r24, 0x40	; 64
    6788:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    678a:	93 8d       	ldd	r25, Z+27	; 0x1b
    678c:	84 8d       	ldd	r24, Z+28	; 0x1c
    678e:	98 13       	cpse	r25, r24
    6790:	06 c0       	rjmp	.+12     	; 0x679e <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    6792:	02 88       	ldd	r0, Z+18	; 0x12
    6794:	f3 89       	ldd	r31, Z+19	; 0x13
    6796:	e0 2d       	mov	r30, r0
    6798:	80 81       	ld	r24, Z
    679a:	8f 7d       	andi	r24, 0xDF	; 223
    679c:	80 83       	st	Z, r24
    679e:	08 95       	ret

000067a0 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    67a0:	ef 92       	push	r14
    67a2:	ff 92       	push	r15
    67a4:	0f 93       	push	r16
    67a6:	1f 93       	push	r17
    67a8:	cf 93       	push	r28
    67aa:	df 93       	push	r29
    67ac:	ec 01       	movw	r28, r24
  _written = true;
    67ae:	81 e0       	ldi	r24, 0x01	; 1
    67b0:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    67b2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    67b4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    67b6:	98 13       	cpse	r25, r24
    67b8:	05 c0       	rjmp	.+10     	; 0x67c4 <_ZN14HardwareSerial5writeEh+0x24>
    67ba:	e8 89       	ldd	r30, Y+16	; 0x10
    67bc:	f9 89       	ldd	r31, Y+17	; 0x11
    67be:	80 81       	ld	r24, Z
    67c0:	85 fd       	sbrc	r24, 5
    67c2:	25 c0       	rjmp	.+74     	; 0x680e <_ZN14HardwareSerial5writeEh+0x6e>
    67c4:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    67c6:	0b 8d       	ldd	r16, Y+27	; 0x1b
    67c8:	10 e0       	ldi	r17, 0x00	; 0
    67ca:	0f 5f       	subi	r16, 0xFF	; 255
    67cc:	1f 4f       	sbci	r17, 0xFF	; 255
    67ce:	0f 73       	andi	r16, 0x3F	; 63
    67d0:	11 27       	eor	r17, r17
    67d2:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    67d4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    67d6:	e8 12       	cpse	r14, r24
    67d8:	0b c0       	rjmp	.+22     	; 0x67f0 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    67da:	0f b6       	in	r0, 0x3f	; 63
    67dc:	07 fc       	sbrc	r0, 7
    67de:	fa cf       	rjmp	.-12     	; 0x67d4 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    67e0:	e8 89       	ldd	r30, Y+16	; 0x10
    67e2:	f9 89       	ldd	r31, Y+17	; 0x11
    67e4:	80 81       	ld	r24, Z
    67e6:	85 ff       	sbrs	r24, 5
    67e8:	f5 cf       	rjmp	.-22     	; 0x67d4 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    67ea:	ce 01       	movw	r24, r28
    67ec:	b7 df       	rcall	.-146    	; 0x675c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    67ee:	f2 cf       	rjmp	.-28     	; 0x67d4 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    67f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    67f2:	fe 01       	movw	r30, r28
    67f4:	e8 0f       	add	r30, r24
    67f6:	f1 1d       	adc	r31, r1
    67f8:	e3 5a       	subi	r30, 0xA3	; 163
    67fa:	ff 4f       	sbci	r31, 0xFF	; 255
    67fc:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    67fe:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    6800:	f8 94       	cli
    _tx_buffer_head = i;
    6802:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    6804:	ea 89       	ldd	r30, Y+18	; 0x12
    6806:	fb 89       	ldd	r31, Y+19	; 0x13
    6808:	80 81       	ld	r24, Z
    680a:	80 62       	ori	r24, 0x20	; 32
    680c:	0a c0       	rjmp	.+20     	; 0x6822 <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    680e:	9f b7       	in	r25, 0x3f	; 63
    6810:	f8 94       	cli
      *_udr = c;
    6812:	ee 89       	ldd	r30, Y+22	; 0x16
    6814:	ff 89       	ldd	r31, Y+23	; 0x17
    6816:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    6818:	e8 89       	ldd	r30, Y+16	; 0x10
    681a:	f9 89       	ldd	r31, Y+17	; 0x11
    681c:	80 81       	ld	r24, Z
    681e:	83 70       	andi	r24, 0x03	; 3
    6820:	80 64       	ori	r24, 0x40	; 64
    6822:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    6824:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    6826:	81 e0       	ldi	r24, 0x01	; 1
    6828:	90 e0       	ldi	r25, 0x00	; 0
    682a:	df 91       	pop	r29
    682c:	cf 91       	pop	r28
    682e:	1f 91       	pop	r17
    6830:	0f 91       	pop	r16
    6832:	ff 90       	pop	r15
    6834:	ef 90       	pop	r14
    6836:	08 95       	ret

00006838 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    6838:	cf 93       	push	r28
    683a:	df 93       	push	r29
    683c:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    683e:	88 8d       	ldd	r24, Y+24	; 0x18
    6840:	88 23       	and	r24, r24
    6842:	c1 f0       	breq	.+48     	; 0x6874 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    6844:	ea 89       	ldd	r30, Y+18	; 0x12
    6846:	fb 89       	ldd	r31, Y+19	; 0x13
    6848:	80 81       	ld	r24, Z
    684a:	85 fd       	sbrc	r24, 5
    684c:	05 c0       	rjmp	.+10     	; 0x6858 <_ZN14HardwareSerial5flushEv+0x20>
    684e:	a8 89       	ldd	r26, Y+16	; 0x10
    6850:	b9 89       	ldd	r27, Y+17	; 0x11
    6852:	8c 91       	ld	r24, X
    6854:	86 fd       	sbrc	r24, 6
    6856:	0e c0       	rjmp	.+28     	; 0x6874 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    6858:	0f b6       	in	r0, 0x3f	; 63
    685a:	07 fc       	sbrc	r0, 7
    685c:	f5 cf       	rjmp	.-22     	; 0x6848 <_ZN14HardwareSerial5flushEv+0x10>
    685e:	80 81       	ld	r24, Z
    6860:	85 ff       	sbrs	r24, 5
    6862:	f2 cf       	rjmp	.-28     	; 0x6848 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    6864:	a8 89       	ldd	r26, Y+16	; 0x10
    6866:	b9 89       	ldd	r27, Y+17	; 0x11
    6868:	8c 91       	ld	r24, X
    686a:	85 ff       	sbrs	r24, 5
    686c:	ed cf       	rjmp	.-38     	; 0x6848 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    686e:	ce 01       	movw	r24, r28
    6870:	75 df       	rcall	.-278    	; 0x675c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    6872:	e8 cf       	rjmp	.-48     	; 0x6844 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    6874:	df 91       	pop	r29
    6876:	cf 91       	pop	r28
    6878:	08 95       	ret

0000687a <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    687a:	08 95       	ret

0000687c <__udivmodqi4>:
    687c:	99 1b       	sub	r25, r25
    687e:	79 e0       	ldi	r23, 0x09	; 9
    6880:	04 c0       	rjmp	.+8      	; 0x688a <__udivmodqi4_ep>

00006882 <__udivmodqi4_loop>:
    6882:	99 1f       	adc	r25, r25
    6884:	96 17       	cp	r25, r22
    6886:	08 f0       	brcs	.+2      	; 0x688a <__udivmodqi4_ep>
    6888:	96 1b       	sub	r25, r22

0000688a <__udivmodqi4_ep>:
    688a:	88 1f       	adc	r24, r24
    688c:	7a 95       	dec	r23
    688e:	c9 f7       	brne	.-14     	; 0x6882 <__udivmodqi4_loop>
    6890:	80 95       	com	r24
    6892:	08 95       	ret

00006894 <__udivmodhi4>:
    6894:	aa 1b       	sub	r26, r26
    6896:	bb 1b       	sub	r27, r27
    6898:	51 e1       	ldi	r21, 0x11	; 17
    689a:	07 c0       	rjmp	.+14     	; 0x68aa <__udivmodhi4_ep>

0000689c <__udivmodhi4_loop>:
    689c:	aa 1f       	adc	r26, r26
    689e:	bb 1f       	adc	r27, r27
    68a0:	a6 17       	cp	r26, r22
    68a2:	b7 07       	cpc	r27, r23
    68a4:	10 f0       	brcs	.+4      	; 0x68aa <__udivmodhi4_ep>
    68a6:	a6 1b       	sub	r26, r22
    68a8:	b7 0b       	sbc	r27, r23

000068aa <__udivmodhi4_ep>:
    68aa:	88 1f       	adc	r24, r24
    68ac:	99 1f       	adc	r25, r25
    68ae:	5a 95       	dec	r21
    68b0:	a9 f7       	brne	.-22     	; 0x689c <__udivmodhi4_loop>
    68b2:	80 95       	com	r24
    68b4:	90 95       	com	r25
    68b6:	bc 01       	movw	r22, r24
    68b8:	cd 01       	movw	r24, r26
    68ba:	08 95       	ret

000068bc <__udivmodsi4>:
    68bc:	a1 e2       	ldi	r26, 0x21	; 33
    68be:	1a 2e       	mov	r1, r26
    68c0:	aa 1b       	sub	r26, r26
    68c2:	bb 1b       	sub	r27, r27
    68c4:	fd 01       	movw	r30, r26
    68c6:	0d c0       	rjmp	.+26     	; 0x68e2 <__udivmodsi4_ep>

000068c8 <__udivmodsi4_loop>:
    68c8:	aa 1f       	adc	r26, r26
    68ca:	bb 1f       	adc	r27, r27
    68cc:	ee 1f       	adc	r30, r30
    68ce:	ff 1f       	adc	r31, r31
    68d0:	a2 17       	cp	r26, r18
    68d2:	b3 07       	cpc	r27, r19
    68d4:	e4 07       	cpc	r30, r20
    68d6:	f5 07       	cpc	r31, r21
    68d8:	20 f0       	brcs	.+8      	; 0x68e2 <__udivmodsi4_ep>
    68da:	a2 1b       	sub	r26, r18
    68dc:	b3 0b       	sbc	r27, r19
    68de:	e4 0b       	sbc	r30, r20
    68e0:	f5 0b       	sbc	r31, r21

000068e2 <__udivmodsi4_ep>:
    68e2:	66 1f       	adc	r22, r22
    68e4:	77 1f       	adc	r23, r23
    68e6:	88 1f       	adc	r24, r24
    68e8:	99 1f       	adc	r25, r25
    68ea:	1a 94       	dec	r1
    68ec:	69 f7       	brne	.-38     	; 0x68c8 <__udivmodsi4_loop>
    68ee:	60 95       	com	r22
    68f0:	70 95       	com	r23
    68f2:	80 95       	com	r24
    68f4:	90 95       	com	r25
    68f6:	9b 01       	movw	r18, r22
    68f8:	ac 01       	movw	r20, r24
    68fa:	bd 01       	movw	r22, r26
    68fc:	cf 01       	movw	r24, r30
    68fe:	08 95       	ret

00006900 <__tablejump2__>:
    6900:	ee 0f       	add	r30, r30
    6902:	ff 1f       	adc	r31, r31
    6904:	00 24       	eor	r0, r0
    6906:	00 1c       	adc	r0, r0
    6908:	0b be       	out	0x3b, r0	; 59
    690a:	07 90       	elpm	r0, Z+
    690c:	f6 91       	elpm	r31, Z
    690e:	e0 2d       	mov	r30, r0
    6910:	09 94       	ijmp

00006912 <__umulhisi3>:
    6912:	a2 9f       	mul	r26, r18
    6914:	b0 01       	movw	r22, r0
    6916:	b3 9f       	mul	r27, r19
    6918:	c0 01       	movw	r24, r0
    691a:	a3 9f       	mul	r26, r19
    691c:	70 0d       	add	r23, r0
    691e:	81 1d       	adc	r24, r1
    6920:	11 24       	eor	r1, r1
    6922:	91 1d       	adc	r25, r1
    6924:	b2 9f       	mul	r27, r18
    6926:	70 0d       	add	r23, r0
    6928:	81 1d       	adc	r24, r1
    692a:	11 24       	eor	r1, r1
    692c:	91 1d       	adc	r25, r1
    692e:	08 95       	ret

00006930 <__muluhisi3>:
    6930:	f0 df       	rcall	.-32     	; 0x6912 <__umulhisi3>
    6932:	a5 9f       	mul	r26, r21
    6934:	90 0d       	add	r25, r0
    6936:	b4 9f       	mul	r27, r20
    6938:	90 0d       	add	r25, r0
    693a:	a4 9f       	mul	r26, r20
    693c:	80 0d       	add	r24, r0
    693e:	91 1d       	adc	r25, r1
    6940:	11 24       	eor	r1, r1
    6942:	08 95       	ret

00006944 <dtostrf>:
    6944:	ef 92       	push	r14
    6946:	0f 93       	push	r16
    6948:	1f 93       	push	r17
    694a:	cf 93       	push	r28
    694c:	df 93       	push	r29
    694e:	e8 01       	movw	r28, r16
    6950:	47 fd       	sbrc	r20, 7
    6952:	02 c0       	rjmp	.+4      	; 0x6958 <dtostrf+0x14>
    6954:	34 e0       	ldi	r19, 0x04	; 4
    6956:	01 c0       	rjmp	.+2      	; 0x695a <dtostrf+0x16>
    6958:	34 e1       	ldi	r19, 0x14	; 20
    695a:	04 2e       	mov	r0, r20
    695c:	00 0c       	add	r0, r0
    695e:	55 0b       	sbc	r21, r21
    6960:	57 ff       	sbrs	r21, 7
    6962:	03 c0       	rjmp	.+6      	; 0x696a <dtostrf+0x26>
    6964:	51 95       	neg	r21
    6966:	41 95       	neg	r20
    6968:	51 09       	sbc	r21, r1
    696a:	e3 2e       	mov	r14, r19
    696c:	02 2f       	mov	r16, r18
    696e:	24 2f       	mov	r18, r20
    6970:	ae 01       	movw	r20, r28
    6972:	9c d2       	rcall	.+1336   	; 0x6eac <dtoa_prf>
    6974:	ce 01       	movw	r24, r28
    6976:	df 91       	pop	r29
    6978:	cf 91       	pop	r28
    697a:	1f 91       	pop	r17
    697c:	0f 91       	pop	r16
    697e:	ef 90       	pop	r14
    6980:	08 95       	ret

00006982 <malloc>:
    6982:	0f 93       	push	r16
    6984:	1f 93       	push	r17
    6986:	cf 93       	push	r28
    6988:	df 93       	push	r29
    698a:	82 30       	cpi	r24, 0x02	; 2
    698c:	91 05       	cpc	r25, r1
    698e:	10 f4       	brcc	.+4      	; 0x6994 <malloc+0x12>
    6990:	82 e0       	ldi	r24, 0x02	; 2
    6992:	90 e0       	ldi	r25, 0x00	; 0
    6994:	e0 91 24 0b 	lds	r30, 0x0B24	; 0x800b24 <__flp>
    6998:	f0 91 25 0b 	lds	r31, 0x0B25	; 0x800b25 <__flp+0x1>
    699c:	20 e0       	ldi	r18, 0x00	; 0
    699e:	30 e0       	ldi	r19, 0x00	; 0
    69a0:	a0 e0       	ldi	r26, 0x00	; 0
    69a2:	b0 e0       	ldi	r27, 0x00	; 0
    69a4:	30 97       	sbiw	r30, 0x00	; 0
    69a6:	19 f1       	breq	.+70     	; 0x69ee <malloc+0x6c>
    69a8:	40 81       	ld	r20, Z
    69aa:	51 81       	ldd	r21, Z+1	; 0x01
    69ac:	02 81       	ldd	r16, Z+2	; 0x02
    69ae:	13 81       	ldd	r17, Z+3	; 0x03
    69b0:	48 17       	cp	r20, r24
    69b2:	59 07       	cpc	r21, r25
    69b4:	c8 f0       	brcs	.+50     	; 0x69e8 <malloc+0x66>
    69b6:	84 17       	cp	r24, r20
    69b8:	95 07       	cpc	r25, r21
    69ba:	69 f4       	brne	.+26     	; 0x69d6 <malloc+0x54>
    69bc:	10 97       	sbiw	r26, 0x00	; 0
    69be:	31 f0       	breq	.+12     	; 0x69cc <malloc+0x4a>
    69c0:	12 96       	adiw	r26, 0x02	; 2
    69c2:	0c 93       	st	X, r16
    69c4:	12 97       	sbiw	r26, 0x02	; 2
    69c6:	13 96       	adiw	r26, 0x03	; 3
    69c8:	1c 93       	st	X, r17
    69ca:	27 c0       	rjmp	.+78     	; 0x6a1a <malloc+0x98>
    69cc:	00 93 24 0b 	sts	0x0B24, r16	; 0x800b24 <__flp>
    69d0:	10 93 25 0b 	sts	0x0B25, r17	; 0x800b25 <__flp+0x1>
    69d4:	22 c0       	rjmp	.+68     	; 0x6a1a <malloc+0x98>
    69d6:	21 15       	cp	r18, r1
    69d8:	31 05       	cpc	r19, r1
    69da:	19 f0       	breq	.+6      	; 0x69e2 <malloc+0x60>
    69dc:	42 17       	cp	r20, r18
    69de:	53 07       	cpc	r21, r19
    69e0:	18 f4       	brcc	.+6      	; 0x69e8 <malloc+0x66>
    69e2:	9a 01       	movw	r18, r20
    69e4:	bd 01       	movw	r22, r26
    69e6:	ef 01       	movw	r28, r30
    69e8:	df 01       	movw	r26, r30
    69ea:	f8 01       	movw	r30, r16
    69ec:	db cf       	rjmp	.-74     	; 0x69a4 <malloc+0x22>
    69ee:	21 15       	cp	r18, r1
    69f0:	31 05       	cpc	r19, r1
    69f2:	f9 f0       	breq	.+62     	; 0x6a32 <malloc+0xb0>
    69f4:	28 1b       	sub	r18, r24
    69f6:	39 0b       	sbc	r19, r25
    69f8:	24 30       	cpi	r18, 0x04	; 4
    69fa:	31 05       	cpc	r19, r1
    69fc:	80 f4       	brcc	.+32     	; 0x6a1e <malloc+0x9c>
    69fe:	8a 81       	ldd	r24, Y+2	; 0x02
    6a00:	9b 81       	ldd	r25, Y+3	; 0x03
    6a02:	61 15       	cp	r22, r1
    6a04:	71 05       	cpc	r23, r1
    6a06:	21 f0       	breq	.+8      	; 0x6a10 <malloc+0x8e>
    6a08:	fb 01       	movw	r30, r22
    6a0a:	93 83       	std	Z+3, r25	; 0x03
    6a0c:	82 83       	std	Z+2, r24	; 0x02
    6a0e:	04 c0       	rjmp	.+8      	; 0x6a18 <malloc+0x96>
    6a10:	90 93 25 0b 	sts	0x0B25, r25	; 0x800b25 <__flp+0x1>
    6a14:	80 93 24 0b 	sts	0x0B24, r24	; 0x800b24 <__flp>
    6a18:	fe 01       	movw	r30, r28
    6a1a:	32 96       	adiw	r30, 0x02	; 2
    6a1c:	44 c0       	rjmp	.+136    	; 0x6aa6 <malloc+0x124>
    6a1e:	fe 01       	movw	r30, r28
    6a20:	e2 0f       	add	r30, r18
    6a22:	f3 1f       	adc	r31, r19
    6a24:	81 93       	st	Z+, r24
    6a26:	91 93       	st	Z+, r25
    6a28:	22 50       	subi	r18, 0x02	; 2
    6a2a:	31 09       	sbc	r19, r1
    6a2c:	39 83       	std	Y+1, r19	; 0x01
    6a2e:	28 83       	st	Y, r18
    6a30:	3a c0       	rjmp	.+116    	; 0x6aa6 <malloc+0x124>
    6a32:	20 91 22 0b 	lds	r18, 0x0B22	; 0x800b22 <__brkval>
    6a36:	30 91 23 0b 	lds	r19, 0x0B23	; 0x800b23 <__brkval+0x1>
    6a3a:	23 2b       	or	r18, r19
    6a3c:	41 f4       	brne	.+16     	; 0x6a4e <malloc+0xcc>
    6a3e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    6a42:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    6a46:	30 93 23 0b 	sts	0x0B23, r19	; 0x800b23 <__brkval+0x1>
    6a4a:	20 93 22 0b 	sts	0x0B22, r18	; 0x800b22 <__brkval>
    6a4e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    6a52:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    6a56:	21 15       	cp	r18, r1
    6a58:	31 05       	cpc	r19, r1
    6a5a:	41 f4       	brne	.+16     	; 0x6a6c <malloc+0xea>
    6a5c:	2d b7       	in	r18, 0x3d	; 61
    6a5e:	3e b7       	in	r19, 0x3e	; 62
    6a60:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    6a64:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    6a68:	24 1b       	sub	r18, r20
    6a6a:	35 0b       	sbc	r19, r21
    6a6c:	e0 91 22 0b 	lds	r30, 0x0B22	; 0x800b22 <__brkval>
    6a70:	f0 91 23 0b 	lds	r31, 0x0B23	; 0x800b23 <__brkval+0x1>
    6a74:	e2 17       	cp	r30, r18
    6a76:	f3 07       	cpc	r31, r19
    6a78:	a0 f4       	brcc	.+40     	; 0x6aa2 <malloc+0x120>
    6a7a:	2e 1b       	sub	r18, r30
    6a7c:	3f 0b       	sbc	r19, r31
    6a7e:	28 17       	cp	r18, r24
    6a80:	39 07       	cpc	r19, r25
    6a82:	78 f0       	brcs	.+30     	; 0x6aa2 <malloc+0x120>
    6a84:	ac 01       	movw	r20, r24
    6a86:	4e 5f       	subi	r20, 0xFE	; 254
    6a88:	5f 4f       	sbci	r21, 0xFF	; 255
    6a8a:	24 17       	cp	r18, r20
    6a8c:	35 07       	cpc	r19, r21
    6a8e:	48 f0       	brcs	.+18     	; 0x6aa2 <malloc+0x120>
    6a90:	4e 0f       	add	r20, r30
    6a92:	5f 1f       	adc	r21, r31
    6a94:	50 93 23 0b 	sts	0x0B23, r21	; 0x800b23 <__brkval+0x1>
    6a98:	40 93 22 0b 	sts	0x0B22, r20	; 0x800b22 <__brkval>
    6a9c:	81 93       	st	Z+, r24
    6a9e:	91 93       	st	Z+, r25
    6aa0:	02 c0       	rjmp	.+4      	; 0x6aa6 <malloc+0x124>
    6aa2:	e0 e0       	ldi	r30, 0x00	; 0
    6aa4:	f0 e0       	ldi	r31, 0x00	; 0
    6aa6:	cf 01       	movw	r24, r30
    6aa8:	df 91       	pop	r29
    6aaa:	cf 91       	pop	r28
    6aac:	1f 91       	pop	r17
    6aae:	0f 91       	pop	r16
    6ab0:	08 95       	ret

00006ab2 <free>:
    6ab2:	cf 93       	push	r28
    6ab4:	df 93       	push	r29
    6ab6:	00 97       	sbiw	r24, 0x00	; 0
    6ab8:	09 f4       	brne	.+2      	; 0x6abc <free+0xa>
    6aba:	81 c0       	rjmp	.+258    	; 0x6bbe <free+0x10c>
    6abc:	fc 01       	movw	r30, r24
    6abe:	32 97       	sbiw	r30, 0x02	; 2
    6ac0:	13 82       	std	Z+3, r1	; 0x03
    6ac2:	12 82       	std	Z+2, r1	; 0x02
    6ac4:	a0 91 24 0b 	lds	r26, 0x0B24	; 0x800b24 <__flp>
    6ac8:	b0 91 25 0b 	lds	r27, 0x0B25	; 0x800b25 <__flp+0x1>
    6acc:	10 97       	sbiw	r26, 0x00	; 0
    6ace:	81 f4       	brne	.+32     	; 0x6af0 <free+0x3e>
    6ad0:	20 81       	ld	r18, Z
    6ad2:	31 81       	ldd	r19, Z+1	; 0x01
    6ad4:	82 0f       	add	r24, r18
    6ad6:	93 1f       	adc	r25, r19
    6ad8:	20 91 22 0b 	lds	r18, 0x0B22	; 0x800b22 <__brkval>
    6adc:	30 91 23 0b 	lds	r19, 0x0B23	; 0x800b23 <__brkval+0x1>
    6ae0:	28 17       	cp	r18, r24
    6ae2:	39 07       	cpc	r19, r25
    6ae4:	51 f5       	brne	.+84     	; 0x6b3a <free+0x88>
    6ae6:	f0 93 23 0b 	sts	0x0B23, r31	; 0x800b23 <__brkval+0x1>
    6aea:	e0 93 22 0b 	sts	0x0B22, r30	; 0x800b22 <__brkval>
    6aee:	67 c0       	rjmp	.+206    	; 0x6bbe <free+0x10c>
    6af0:	ed 01       	movw	r28, r26
    6af2:	20 e0       	ldi	r18, 0x00	; 0
    6af4:	30 e0       	ldi	r19, 0x00	; 0
    6af6:	ce 17       	cp	r28, r30
    6af8:	df 07       	cpc	r29, r31
    6afa:	40 f4       	brcc	.+16     	; 0x6b0c <free+0x5a>
    6afc:	4a 81       	ldd	r20, Y+2	; 0x02
    6afe:	5b 81       	ldd	r21, Y+3	; 0x03
    6b00:	9e 01       	movw	r18, r28
    6b02:	41 15       	cp	r20, r1
    6b04:	51 05       	cpc	r21, r1
    6b06:	f1 f0       	breq	.+60     	; 0x6b44 <free+0x92>
    6b08:	ea 01       	movw	r28, r20
    6b0a:	f5 cf       	rjmp	.-22     	; 0x6af6 <free+0x44>
    6b0c:	d3 83       	std	Z+3, r29	; 0x03
    6b0e:	c2 83       	std	Z+2, r28	; 0x02
    6b10:	40 81       	ld	r20, Z
    6b12:	51 81       	ldd	r21, Z+1	; 0x01
    6b14:	84 0f       	add	r24, r20
    6b16:	95 1f       	adc	r25, r21
    6b18:	c8 17       	cp	r28, r24
    6b1a:	d9 07       	cpc	r29, r25
    6b1c:	59 f4       	brne	.+22     	; 0x6b34 <free+0x82>
    6b1e:	88 81       	ld	r24, Y
    6b20:	99 81       	ldd	r25, Y+1	; 0x01
    6b22:	84 0f       	add	r24, r20
    6b24:	95 1f       	adc	r25, r21
    6b26:	02 96       	adiw	r24, 0x02	; 2
    6b28:	91 83       	std	Z+1, r25	; 0x01
    6b2a:	80 83       	st	Z, r24
    6b2c:	8a 81       	ldd	r24, Y+2	; 0x02
    6b2e:	9b 81       	ldd	r25, Y+3	; 0x03
    6b30:	93 83       	std	Z+3, r25	; 0x03
    6b32:	82 83       	std	Z+2, r24	; 0x02
    6b34:	21 15       	cp	r18, r1
    6b36:	31 05       	cpc	r19, r1
    6b38:	29 f4       	brne	.+10     	; 0x6b44 <free+0x92>
    6b3a:	f0 93 25 0b 	sts	0x0B25, r31	; 0x800b25 <__flp+0x1>
    6b3e:	e0 93 24 0b 	sts	0x0B24, r30	; 0x800b24 <__flp>
    6b42:	3d c0       	rjmp	.+122    	; 0x6bbe <free+0x10c>
    6b44:	e9 01       	movw	r28, r18
    6b46:	fb 83       	std	Y+3, r31	; 0x03
    6b48:	ea 83       	std	Y+2, r30	; 0x02
    6b4a:	49 91       	ld	r20, Y+
    6b4c:	59 91       	ld	r21, Y+
    6b4e:	c4 0f       	add	r28, r20
    6b50:	d5 1f       	adc	r29, r21
    6b52:	ec 17       	cp	r30, r28
    6b54:	fd 07       	cpc	r31, r29
    6b56:	61 f4       	brne	.+24     	; 0x6b70 <free+0xbe>
    6b58:	80 81       	ld	r24, Z
    6b5a:	91 81       	ldd	r25, Z+1	; 0x01
    6b5c:	84 0f       	add	r24, r20
    6b5e:	95 1f       	adc	r25, r21
    6b60:	02 96       	adiw	r24, 0x02	; 2
    6b62:	e9 01       	movw	r28, r18
    6b64:	99 83       	std	Y+1, r25	; 0x01
    6b66:	88 83       	st	Y, r24
    6b68:	82 81       	ldd	r24, Z+2	; 0x02
    6b6a:	93 81       	ldd	r25, Z+3	; 0x03
    6b6c:	9b 83       	std	Y+3, r25	; 0x03
    6b6e:	8a 83       	std	Y+2, r24	; 0x02
    6b70:	e0 e0       	ldi	r30, 0x00	; 0
    6b72:	f0 e0       	ldi	r31, 0x00	; 0
    6b74:	12 96       	adiw	r26, 0x02	; 2
    6b76:	8d 91       	ld	r24, X+
    6b78:	9c 91       	ld	r25, X
    6b7a:	13 97       	sbiw	r26, 0x03	; 3
    6b7c:	00 97       	sbiw	r24, 0x00	; 0
    6b7e:	19 f0       	breq	.+6      	; 0x6b86 <free+0xd4>
    6b80:	fd 01       	movw	r30, r26
    6b82:	dc 01       	movw	r26, r24
    6b84:	f7 cf       	rjmp	.-18     	; 0x6b74 <free+0xc2>
    6b86:	8d 91       	ld	r24, X+
    6b88:	9c 91       	ld	r25, X
    6b8a:	11 97       	sbiw	r26, 0x01	; 1
    6b8c:	9d 01       	movw	r18, r26
    6b8e:	2e 5f       	subi	r18, 0xFE	; 254
    6b90:	3f 4f       	sbci	r19, 0xFF	; 255
    6b92:	82 0f       	add	r24, r18
    6b94:	93 1f       	adc	r25, r19
    6b96:	20 91 22 0b 	lds	r18, 0x0B22	; 0x800b22 <__brkval>
    6b9a:	30 91 23 0b 	lds	r19, 0x0B23	; 0x800b23 <__brkval+0x1>
    6b9e:	28 17       	cp	r18, r24
    6ba0:	39 07       	cpc	r19, r25
    6ba2:	69 f4       	brne	.+26     	; 0x6bbe <free+0x10c>
    6ba4:	30 97       	sbiw	r30, 0x00	; 0
    6ba6:	29 f4       	brne	.+10     	; 0x6bb2 <free+0x100>
    6ba8:	10 92 25 0b 	sts	0x0B25, r1	; 0x800b25 <__flp+0x1>
    6bac:	10 92 24 0b 	sts	0x0B24, r1	; 0x800b24 <__flp>
    6bb0:	02 c0       	rjmp	.+4      	; 0x6bb6 <free+0x104>
    6bb2:	13 82       	std	Z+3, r1	; 0x03
    6bb4:	12 82       	std	Z+2, r1	; 0x02
    6bb6:	b0 93 23 0b 	sts	0x0B23, r27	; 0x800b23 <__brkval+0x1>
    6bba:	a0 93 22 0b 	sts	0x0B22, r26	; 0x800b22 <__brkval>
    6bbe:	df 91       	pop	r29
    6bc0:	cf 91       	pop	r28
    6bc2:	08 95       	ret

00006bc4 <realloc>:
    6bc4:	6f 92       	push	r6
    6bc6:	7f 92       	push	r7
    6bc8:	8f 92       	push	r8
    6bca:	9f 92       	push	r9
    6bcc:	af 92       	push	r10
    6bce:	bf 92       	push	r11
    6bd0:	cf 92       	push	r12
    6bd2:	df 92       	push	r13
    6bd4:	ef 92       	push	r14
    6bd6:	ff 92       	push	r15
    6bd8:	0f 93       	push	r16
    6bda:	1f 93       	push	r17
    6bdc:	cf 93       	push	r28
    6bde:	df 93       	push	r29
    6be0:	00 97       	sbiw	r24, 0x00	; 0
    6be2:	81 f4       	brne	.+32     	; 0x6c04 <realloc+0x40>
    6be4:	cb 01       	movw	r24, r22
    6be6:	df 91       	pop	r29
    6be8:	cf 91       	pop	r28
    6bea:	1f 91       	pop	r17
    6bec:	0f 91       	pop	r16
    6bee:	ff 90       	pop	r15
    6bf0:	ef 90       	pop	r14
    6bf2:	df 90       	pop	r13
    6bf4:	cf 90       	pop	r12
    6bf6:	bf 90       	pop	r11
    6bf8:	af 90       	pop	r10
    6bfa:	9f 90       	pop	r9
    6bfc:	8f 90       	pop	r8
    6bfe:	7f 90       	pop	r7
    6c00:	6f 90       	pop	r6
    6c02:	bf ce       	rjmp	.-642    	; 0x6982 <malloc>
    6c04:	fc 01       	movw	r30, r24
    6c06:	e6 0f       	add	r30, r22
    6c08:	f7 1f       	adc	r31, r23
    6c0a:	9c 01       	movw	r18, r24
    6c0c:	22 50       	subi	r18, 0x02	; 2
    6c0e:	31 09       	sbc	r19, r1
    6c10:	e2 17       	cp	r30, r18
    6c12:	f3 07       	cpc	r31, r19
    6c14:	08 f4       	brcc	.+2      	; 0x6c18 <realloc+0x54>
    6c16:	a5 c0       	rjmp	.+330    	; 0x6d62 <realloc+0x19e>
    6c18:	ec 01       	movw	r28, r24
    6c1a:	d9 01       	movw	r26, r18
    6c1c:	0d 91       	ld	r16, X+
    6c1e:	1c 91       	ld	r17, X
    6c20:	11 97       	sbiw	r26, 0x01	; 1
    6c22:	06 17       	cp	r16, r22
    6c24:	17 07       	cpc	r17, r23
    6c26:	a8 f0       	brcs	.+42     	; 0x6c52 <realloc+0x8e>
    6c28:	05 30       	cpi	r16, 0x05	; 5
    6c2a:	11 05       	cpc	r17, r1
    6c2c:	08 f4       	brcc	.+2      	; 0x6c30 <realloc+0x6c>
    6c2e:	97 c0       	rjmp	.+302    	; 0x6d5e <realloc+0x19a>
    6c30:	c8 01       	movw	r24, r16
    6c32:	04 97       	sbiw	r24, 0x04	; 4
    6c34:	86 17       	cp	r24, r22
    6c36:	97 07       	cpc	r25, r23
    6c38:	08 f4       	brcc	.+2      	; 0x6c3c <realloc+0x78>
    6c3a:	91 c0       	rjmp	.+290    	; 0x6d5e <realloc+0x19a>
    6c3c:	02 50       	subi	r16, 0x02	; 2
    6c3e:	11 09       	sbc	r17, r1
    6c40:	06 1b       	sub	r16, r22
    6c42:	17 0b       	sbc	r17, r23
    6c44:	01 93       	st	Z+, r16
    6c46:	11 93       	st	Z+, r17
    6c48:	6d 93       	st	X+, r22
    6c4a:	7c 93       	st	X, r23
    6c4c:	cf 01       	movw	r24, r30
    6c4e:	31 df       	rcall	.-414    	; 0x6ab2 <free>
    6c50:	86 c0       	rjmp	.+268    	; 0x6d5e <realloc+0x19a>
    6c52:	5b 01       	movw	r10, r22
    6c54:	a0 1a       	sub	r10, r16
    6c56:	b1 0a       	sbc	r11, r17
    6c58:	4c 01       	movw	r8, r24
    6c5a:	80 0e       	add	r8, r16
    6c5c:	91 1e       	adc	r9, r17
    6c5e:	a0 91 24 0b 	lds	r26, 0x0B24	; 0x800b24 <__flp>
    6c62:	b0 91 25 0b 	lds	r27, 0x0B25	; 0x800b25 <__flp+0x1>
    6c66:	61 2c       	mov	r6, r1
    6c68:	71 2c       	mov	r7, r1
    6c6a:	e1 2c       	mov	r14, r1
    6c6c:	f1 2c       	mov	r15, r1
    6c6e:	10 97       	sbiw	r26, 0x00	; 0
    6c70:	09 f4       	brne	.+2      	; 0x6c74 <realloc+0xb0>
    6c72:	46 c0       	rjmp	.+140    	; 0x6d00 <realloc+0x13c>
    6c74:	8d 91       	ld	r24, X+
    6c76:	9c 91       	ld	r25, X
    6c78:	11 97       	sbiw	r26, 0x01	; 1
    6c7a:	a8 15       	cp	r26, r8
    6c7c:	b9 05       	cpc	r27, r9
    6c7e:	b1 f5       	brne	.+108    	; 0x6cec <realloc+0x128>
    6c80:	6c 01       	movw	r12, r24
    6c82:	42 e0       	ldi	r20, 0x02	; 2
    6c84:	c4 0e       	add	r12, r20
    6c86:	d1 1c       	adc	r13, r1
    6c88:	ca 14       	cp	r12, r10
    6c8a:	db 04       	cpc	r13, r11
    6c8c:	78 f1       	brcs	.+94     	; 0x6cec <realloc+0x128>
    6c8e:	4c 01       	movw	r8, r24
    6c90:	8a 18       	sub	r8, r10
    6c92:	9b 08       	sbc	r9, r11
    6c94:	64 01       	movw	r12, r8
    6c96:	42 e0       	ldi	r20, 0x02	; 2
    6c98:	c4 0e       	add	r12, r20
    6c9a:	d1 1c       	adc	r13, r1
    6c9c:	12 96       	adiw	r26, 0x02	; 2
    6c9e:	bc 90       	ld	r11, X
    6ca0:	12 97       	sbiw	r26, 0x02	; 2
    6ca2:	13 96       	adiw	r26, 0x03	; 3
    6ca4:	ac 91       	ld	r26, X
    6ca6:	b5 e0       	ldi	r27, 0x05	; 5
    6ca8:	cb 16       	cp	r12, r27
    6caa:	d1 04       	cpc	r13, r1
    6cac:	40 f0       	brcs	.+16     	; 0x6cbe <realloc+0xfa>
    6cae:	b2 82       	std	Z+2, r11	; 0x02
    6cb0:	a3 83       	std	Z+3, r26	; 0x03
    6cb2:	91 82       	std	Z+1, r9	; 0x01
    6cb4:	80 82       	st	Z, r8
    6cb6:	d9 01       	movw	r26, r18
    6cb8:	6d 93       	st	X+, r22
    6cba:	7c 93       	st	X, r23
    6cbc:	09 c0       	rjmp	.+18     	; 0x6cd0 <realloc+0x10c>
    6cbe:	0e 5f       	subi	r16, 0xFE	; 254
    6cc0:	1f 4f       	sbci	r17, 0xFF	; 255
    6cc2:	80 0f       	add	r24, r16
    6cc4:	91 1f       	adc	r25, r17
    6cc6:	f9 01       	movw	r30, r18
    6cc8:	91 83       	std	Z+1, r25	; 0x01
    6cca:	80 83       	st	Z, r24
    6ccc:	eb 2d       	mov	r30, r11
    6cce:	fa 2f       	mov	r31, r26
    6cd0:	e1 14       	cp	r14, r1
    6cd2:	f1 04       	cpc	r15, r1
    6cd4:	31 f0       	breq	.+12     	; 0x6ce2 <realloc+0x11e>
    6cd6:	d7 01       	movw	r26, r14
    6cd8:	13 96       	adiw	r26, 0x03	; 3
    6cda:	fc 93       	st	X, r31
    6cdc:	ee 93       	st	-X, r30
    6cde:	12 97       	sbiw	r26, 0x02	; 2
    6ce0:	3e c0       	rjmp	.+124    	; 0x6d5e <realloc+0x19a>
    6ce2:	f0 93 25 0b 	sts	0x0B25, r31	; 0x800b25 <__flp+0x1>
    6ce6:	e0 93 24 0b 	sts	0x0B24, r30	; 0x800b24 <__flp>
    6cea:	39 c0       	rjmp	.+114    	; 0x6d5e <realloc+0x19a>
    6cec:	68 16       	cp	r6, r24
    6cee:	79 06       	cpc	r7, r25
    6cf0:	08 f4       	brcc	.+2      	; 0x6cf4 <realloc+0x130>
    6cf2:	3c 01       	movw	r6, r24
    6cf4:	7d 01       	movw	r14, r26
    6cf6:	12 96       	adiw	r26, 0x02	; 2
    6cf8:	0d 90       	ld	r0, X+
    6cfa:	bc 91       	ld	r27, X
    6cfc:	a0 2d       	mov	r26, r0
    6cfe:	b7 cf       	rjmp	.-146    	; 0x6c6e <realloc+0xaa>
    6d00:	80 91 22 0b 	lds	r24, 0x0B22	; 0x800b22 <__brkval>
    6d04:	90 91 23 0b 	lds	r25, 0x0B23	; 0x800b23 <__brkval+0x1>
    6d08:	88 16       	cp	r8, r24
    6d0a:	99 06       	cpc	r9, r25
    6d0c:	e1 f4       	brne	.+56     	; 0x6d46 <realloc+0x182>
    6d0e:	66 16       	cp	r6, r22
    6d10:	77 06       	cpc	r7, r23
    6d12:	c8 f4       	brcc	.+50     	; 0x6d46 <realloc+0x182>
    6d14:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    6d18:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    6d1c:	00 97       	sbiw	r24, 0x00	; 0
    6d1e:	41 f4       	brne	.+16     	; 0x6d30 <realloc+0x16c>
    6d20:	8d b7       	in	r24, 0x3d	; 61
    6d22:	9e b7       	in	r25, 0x3e	; 62
    6d24:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    6d28:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    6d2c:	84 1b       	sub	r24, r20
    6d2e:	95 0b       	sbc	r25, r21
    6d30:	e8 17       	cp	r30, r24
    6d32:	f9 07       	cpc	r31, r25
    6d34:	b0 f4       	brcc	.+44     	; 0x6d62 <realloc+0x19e>
    6d36:	f0 93 23 0b 	sts	0x0B23, r31	; 0x800b23 <__brkval+0x1>
    6d3a:	e0 93 22 0b 	sts	0x0B22, r30	; 0x800b22 <__brkval>
    6d3e:	f9 01       	movw	r30, r18
    6d40:	71 83       	std	Z+1, r23	; 0x01
    6d42:	60 83       	st	Z, r22
    6d44:	0c c0       	rjmp	.+24     	; 0x6d5e <realloc+0x19a>
    6d46:	cb 01       	movw	r24, r22
    6d48:	1c de       	rcall	.-968    	; 0x6982 <malloc>
    6d4a:	7c 01       	movw	r14, r24
    6d4c:	00 97       	sbiw	r24, 0x00	; 0
    6d4e:	49 f0       	breq	.+18     	; 0x6d62 <realloc+0x19e>
    6d50:	a8 01       	movw	r20, r16
    6d52:	be 01       	movw	r22, r28
    6d54:	2c d0       	rcall	.+88     	; 0x6dae <memcpy>
    6d56:	ce 01       	movw	r24, r28
    6d58:	ac de       	rcall	.-680    	; 0x6ab2 <free>
    6d5a:	c7 01       	movw	r24, r14
    6d5c:	04 c0       	rjmp	.+8      	; 0x6d66 <realloc+0x1a2>
    6d5e:	ce 01       	movw	r24, r28
    6d60:	02 c0       	rjmp	.+4      	; 0x6d66 <realloc+0x1a2>
    6d62:	80 e0       	ldi	r24, 0x00	; 0
    6d64:	90 e0       	ldi	r25, 0x00	; 0
    6d66:	df 91       	pop	r29
    6d68:	cf 91       	pop	r28
    6d6a:	1f 91       	pop	r17
    6d6c:	0f 91       	pop	r16
    6d6e:	ff 90       	pop	r15
    6d70:	ef 90       	pop	r14
    6d72:	df 90       	pop	r13
    6d74:	cf 90       	pop	r12
    6d76:	bf 90       	pop	r11
    6d78:	af 90       	pop	r10
    6d7a:	9f 90       	pop	r9
    6d7c:	8f 90       	pop	r8
    6d7e:	7f 90       	pop	r7
    6d80:	6f 90       	pop	r6
    6d82:	08 95       	ret

00006d84 <abort>:
    6d84:	81 e0       	ldi	r24, 0x01	; 1
    6d86:	90 e0       	ldi	r25, 0x00	; 0
    6d88:	f8 94       	cli
    6d8a:	f1 c2       	rjmp	.+1506   	; 0x736e <__do_global_dtors>

00006d8c <isspace>:
    6d8c:	91 11       	cpse	r25, r1
    6d8e:	dc c2       	rjmp	.+1464   	; 0x7348 <__ctype_isfalse>
    6d90:	80 32       	cpi	r24, 0x20	; 32
    6d92:	19 f0       	breq	.+6      	; 0x6d9a <isspace+0xe>
    6d94:	89 50       	subi	r24, 0x09	; 9
    6d96:	85 50       	subi	r24, 0x05	; 5
    6d98:	d0 f7       	brcc	.-12     	; 0x6d8e <isspace+0x2>
    6d9a:	08 95       	ret

00006d9c <memcpy_P>:
    6d9c:	fb 01       	movw	r30, r22
    6d9e:	dc 01       	movw	r26, r24
    6da0:	02 c0       	rjmp	.+4      	; 0x6da6 <memcpy_P+0xa>
    6da2:	05 90       	lpm	r0, Z+
    6da4:	0d 92       	st	X+, r0
    6da6:	41 50       	subi	r20, 0x01	; 1
    6da8:	50 40       	sbci	r21, 0x00	; 0
    6daa:	d8 f7       	brcc	.-10     	; 0x6da2 <memcpy_P+0x6>
    6dac:	08 95       	ret

00006dae <memcpy>:
    6dae:	fb 01       	movw	r30, r22
    6db0:	dc 01       	movw	r26, r24
    6db2:	02 c0       	rjmp	.+4      	; 0x6db8 <memcpy+0xa>
    6db4:	01 90       	ld	r0, Z+
    6db6:	0d 92       	st	X+, r0
    6db8:	41 50       	subi	r20, 0x01	; 1
    6dba:	50 40       	sbci	r21, 0x00	; 0
    6dbc:	d8 f7       	brcc	.-10     	; 0x6db4 <memcpy+0x6>
    6dbe:	08 95       	ret

00006dc0 <strcmp>:
    6dc0:	fb 01       	movw	r30, r22
    6dc2:	dc 01       	movw	r26, r24
    6dc4:	8d 91       	ld	r24, X+
    6dc6:	01 90       	ld	r0, Z+
    6dc8:	80 19       	sub	r24, r0
    6dca:	01 10       	cpse	r0, r1
    6dcc:	d9 f3       	breq	.-10     	; 0x6dc4 <strcmp+0x4>
    6dce:	99 0b       	sbc	r25, r25
    6dd0:	08 95       	ret

00006dd2 <strcpy>:
    6dd2:	fb 01       	movw	r30, r22
    6dd4:	dc 01       	movw	r26, r24
    6dd6:	01 90       	ld	r0, Z+
    6dd8:	0d 92       	st	X+, r0
    6dda:	00 20       	and	r0, r0
    6ddc:	e1 f7       	brne	.-8      	; 0x6dd6 <strcpy+0x4>
    6dde:	08 95       	ret

00006de0 <strncmp>:
    6de0:	fb 01       	movw	r30, r22
    6de2:	dc 01       	movw	r26, r24
    6de4:	41 50       	subi	r20, 0x01	; 1
    6de6:	50 40       	sbci	r21, 0x00	; 0
    6de8:	30 f0       	brcs	.+12     	; 0x6df6 <strncmp+0x16>
    6dea:	8d 91       	ld	r24, X+
    6dec:	01 90       	ld	r0, Z+
    6dee:	80 19       	sub	r24, r0
    6df0:	19 f4       	brne	.+6      	; 0x6df8 <strncmp+0x18>
    6df2:	00 20       	and	r0, r0
    6df4:	b9 f7       	brne	.-18     	; 0x6de4 <strncmp+0x4>
    6df6:	88 1b       	sub	r24, r24
    6df8:	99 0b       	sbc	r25, r25
    6dfa:	08 95       	ret

00006dfc <__itoa_ncheck>:
    6dfc:	bb 27       	eor	r27, r27
    6dfe:	4a 30       	cpi	r20, 0x0A	; 10
    6e00:	31 f4       	brne	.+12     	; 0x6e0e <__itoa_ncheck+0x12>
    6e02:	99 23       	and	r25, r25
    6e04:	22 f4       	brpl	.+8      	; 0x6e0e <__itoa_ncheck+0x12>
    6e06:	bd e2       	ldi	r27, 0x2D	; 45
    6e08:	90 95       	com	r25
    6e0a:	81 95       	neg	r24
    6e0c:	9f 4f       	sbci	r25, 0xFF	; 255
    6e0e:	36 c0       	rjmp	.+108    	; 0x6e7c <__utoa_common>

00006e10 <ultoa>:
    6e10:	25 32       	cpi	r18, 0x25	; 37
    6e12:	31 05       	cpc	r19, r1
    6e14:	18 f4       	brcc	.+6      	; 0x6e1c <ultoa+0xc>
    6e16:	22 30       	cpi	r18, 0x02	; 2
    6e18:	08 f0       	brcs	.+2      	; 0x6e1c <ultoa+0xc>
    6e1a:	04 c0       	rjmp	.+8      	; 0x6e24 <__ultoa_ncheck>
    6e1c:	fa 01       	movw	r30, r20
    6e1e:	10 82       	st	Z, r1
    6e20:	ca 01       	movw	r24, r20
    6e22:	08 95       	ret

00006e24 <__ultoa_ncheck>:
    6e24:	bb 27       	eor	r27, r27

00006e26 <__ultoa_common>:
    6e26:	fa 01       	movw	r30, r20
    6e28:	a6 2f       	mov	r26, r22
    6e2a:	62 17       	cp	r22, r18
    6e2c:	71 05       	cpc	r23, r1
    6e2e:	81 05       	cpc	r24, r1
    6e30:	91 05       	cpc	r25, r1
    6e32:	33 0b       	sbc	r19, r19
    6e34:	30 fb       	bst	r19, 0
    6e36:	66 f0       	brts	.+24     	; 0x6e50 <__ultoa_common+0x2a>
    6e38:	aa 27       	eor	r26, r26
    6e3a:	66 0f       	add	r22, r22
    6e3c:	77 1f       	adc	r23, r23
    6e3e:	88 1f       	adc	r24, r24
    6e40:	99 1f       	adc	r25, r25
    6e42:	aa 1f       	adc	r26, r26
    6e44:	a2 17       	cp	r26, r18
    6e46:	10 f0       	brcs	.+4      	; 0x6e4c <__ultoa_common+0x26>
    6e48:	a2 1b       	sub	r26, r18
    6e4a:	63 95       	inc	r22
    6e4c:	38 50       	subi	r19, 0x08	; 8
    6e4e:	a9 f7       	brne	.-22     	; 0x6e3a <__ultoa_common+0x14>
    6e50:	a0 5d       	subi	r26, 0xD0	; 208
    6e52:	aa 33       	cpi	r26, 0x3A	; 58
    6e54:	08 f0       	brcs	.+2      	; 0x6e58 <__ultoa_common+0x32>
    6e56:	a9 5d       	subi	r26, 0xD9	; 217
    6e58:	a1 93       	st	Z+, r26
    6e5a:	36 f7       	brtc	.-52     	; 0x6e28 <__ultoa_common+0x2>
    6e5c:	b1 11       	cpse	r27, r1
    6e5e:	b1 93       	st	Z+, r27
    6e60:	10 82       	st	Z, r1
    6e62:	ca 01       	movw	r24, r20
    6e64:	74 c2       	rjmp	.+1256   	; 0x734e <strrev>

00006e66 <utoa>:
    6e66:	45 32       	cpi	r20, 0x25	; 37
    6e68:	51 05       	cpc	r21, r1
    6e6a:	18 f4       	brcc	.+6      	; 0x6e72 <utoa+0xc>
    6e6c:	42 30       	cpi	r20, 0x02	; 2
    6e6e:	08 f0       	brcs	.+2      	; 0x6e72 <utoa+0xc>
    6e70:	04 c0       	rjmp	.+8      	; 0x6e7a <__utoa_ncheck>
    6e72:	fb 01       	movw	r30, r22
    6e74:	10 82       	st	Z, r1
    6e76:	cb 01       	movw	r24, r22
    6e78:	08 95       	ret

00006e7a <__utoa_ncheck>:
    6e7a:	bb 27       	eor	r27, r27

00006e7c <__utoa_common>:
    6e7c:	fb 01       	movw	r30, r22
    6e7e:	55 27       	eor	r21, r21
    6e80:	aa 27       	eor	r26, r26
    6e82:	88 0f       	add	r24, r24
    6e84:	99 1f       	adc	r25, r25
    6e86:	aa 1f       	adc	r26, r26
    6e88:	a4 17       	cp	r26, r20
    6e8a:	10 f0       	brcs	.+4      	; 0x6e90 <__utoa_common+0x14>
    6e8c:	a4 1b       	sub	r26, r20
    6e8e:	83 95       	inc	r24
    6e90:	50 51       	subi	r21, 0x10	; 16
    6e92:	b9 f7       	brne	.-18     	; 0x6e82 <__utoa_common+0x6>
    6e94:	a0 5d       	subi	r26, 0xD0	; 208
    6e96:	aa 33       	cpi	r26, 0x3A	; 58
    6e98:	08 f0       	brcs	.+2      	; 0x6e9c <__utoa_common+0x20>
    6e9a:	a9 5d       	subi	r26, 0xD9	; 217
    6e9c:	a1 93       	st	Z+, r26
    6e9e:	00 97       	sbiw	r24, 0x00	; 0
    6ea0:	79 f7       	brne	.-34     	; 0x6e80 <__utoa_common+0x4>
    6ea2:	b1 11       	cpse	r27, r1
    6ea4:	b1 93       	st	Z+, r27
    6ea6:	11 92       	st	Z+, r1
    6ea8:	cb 01       	movw	r24, r22
    6eaa:	51 c2       	rjmp	.+1186   	; 0x734e <strrev>

00006eac <dtoa_prf>:
    6eac:	8f 92       	push	r8
    6eae:	9f 92       	push	r9
    6eb0:	af 92       	push	r10
    6eb2:	bf 92       	push	r11
    6eb4:	cf 92       	push	r12
    6eb6:	df 92       	push	r13
    6eb8:	ef 92       	push	r14
    6eba:	ff 92       	push	r15
    6ebc:	0f 93       	push	r16
    6ebe:	1f 93       	push	r17
    6ec0:	cf 93       	push	r28
    6ec2:	df 93       	push	r29
    6ec4:	cd b7       	in	r28, 0x3d	; 61
    6ec6:	de b7       	in	r29, 0x3e	; 62
    6ec8:	29 97       	sbiw	r28, 0x09	; 9
    6eca:	0f b6       	in	r0, 0x3f	; 63
    6ecc:	f8 94       	cli
    6ece:	de bf       	out	0x3e, r29	; 62
    6ed0:	0f be       	out	0x3f, r0	; 63
    6ed2:	cd bf       	out	0x3d, r28	; 61
    6ed4:	6a 01       	movw	r12, r20
    6ed6:	12 2f       	mov	r17, r18
    6ed8:	b0 2e       	mov	r11, r16
    6eda:	2b e3       	ldi	r18, 0x3B	; 59
    6edc:	20 17       	cp	r18, r16
    6ede:	20 f0       	brcs	.+8      	; 0x6ee8 <dtoa_prf+0x3c>
    6ee0:	ff 24       	eor	r15, r15
    6ee2:	f3 94       	inc	r15
    6ee4:	f0 0e       	add	r15, r16
    6ee6:	02 c0       	rjmp	.+4      	; 0x6eec <dtoa_prf+0x40>
    6ee8:	2c e3       	ldi	r18, 0x3C	; 60
    6eea:	f2 2e       	mov	r15, r18
    6eec:	0f 2d       	mov	r16, r15
    6eee:	27 e0       	ldi	r18, 0x07	; 7
    6ef0:	ae 01       	movw	r20, r28
    6ef2:	4f 5f       	subi	r20, 0xFF	; 255
    6ef4:	5f 4f       	sbci	r21, 0xFF	; 255
    6ef6:	50 d1       	rcall	.+672    	; 0x7198 <__ftoa_engine>
    6ef8:	bc 01       	movw	r22, r24
    6efa:	49 81       	ldd	r20, Y+1	; 0x01
    6efc:	84 2f       	mov	r24, r20
    6efe:	89 70       	andi	r24, 0x09	; 9
    6f00:	81 30       	cpi	r24, 0x01	; 1
    6f02:	31 f0       	breq	.+12     	; 0x6f10 <dtoa_prf+0x64>
    6f04:	e1 fc       	sbrc	r14, 1
    6f06:	06 c0       	rjmp	.+12     	; 0x6f14 <dtoa_prf+0x68>
    6f08:	e0 fe       	sbrs	r14, 0
    6f0a:	06 c0       	rjmp	.+12     	; 0x6f18 <dtoa_prf+0x6c>
    6f0c:	90 e2       	ldi	r25, 0x20	; 32
    6f0e:	05 c0       	rjmp	.+10     	; 0x6f1a <dtoa_prf+0x6e>
    6f10:	9d e2       	ldi	r25, 0x2D	; 45
    6f12:	03 c0       	rjmp	.+6      	; 0x6f1a <dtoa_prf+0x6e>
    6f14:	9b e2       	ldi	r25, 0x2B	; 43
    6f16:	01 c0       	rjmp	.+2      	; 0x6f1a <dtoa_prf+0x6e>
    6f18:	90 e0       	ldi	r25, 0x00	; 0
    6f1a:	5e 2d       	mov	r21, r14
    6f1c:	50 71       	andi	r21, 0x10	; 16
    6f1e:	43 ff       	sbrs	r20, 3
    6f20:	3c c0       	rjmp	.+120    	; 0x6f9a <dtoa_prf+0xee>
    6f22:	91 11       	cpse	r25, r1
    6f24:	02 c0       	rjmp	.+4      	; 0x6f2a <dtoa_prf+0x7e>
    6f26:	83 e0       	ldi	r24, 0x03	; 3
    6f28:	01 c0       	rjmp	.+2      	; 0x6f2c <dtoa_prf+0x80>
    6f2a:	84 e0       	ldi	r24, 0x04	; 4
    6f2c:	81 17       	cp	r24, r17
    6f2e:	18 f4       	brcc	.+6      	; 0x6f36 <dtoa_prf+0x8a>
    6f30:	21 2f       	mov	r18, r17
    6f32:	28 1b       	sub	r18, r24
    6f34:	01 c0       	rjmp	.+2      	; 0x6f38 <dtoa_prf+0x8c>
    6f36:	20 e0       	ldi	r18, 0x00	; 0
    6f38:	51 11       	cpse	r21, r1
    6f3a:	0b c0       	rjmp	.+22     	; 0x6f52 <dtoa_prf+0xa6>
    6f3c:	f6 01       	movw	r30, r12
    6f3e:	82 2f       	mov	r24, r18
    6f40:	30 e2       	ldi	r19, 0x20	; 32
    6f42:	88 23       	and	r24, r24
    6f44:	19 f0       	breq	.+6      	; 0x6f4c <dtoa_prf+0xa0>
    6f46:	31 93       	st	Z+, r19
    6f48:	81 50       	subi	r24, 0x01	; 1
    6f4a:	fb cf       	rjmp	.-10     	; 0x6f42 <dtoa_prf+0x96>
    6f4c:	c2 0e       	add	r12, r18
    6f4e:	d1 1c       	adc	r13, r1
    6f50:	20 e0       	ldi	r18, 0x00	; 0
    6f52:	99 23       	and	r25, r25
    6f54:	29 f0       	breq	.+10     	; 0x6f60 <dtoa_prf+0xb4>
    6f56:	d6 01       	movw	r26, r12
    6f58:	9c 93       	st	X, r25
    6f5a:	f6 01       	movw	r30, r12
    6f5c:	31 96       	adiw	r30, 0x01	; 1
    6f5e:	6f 01       	movw	r12, r30
    6f60:	c6 01       	movw	r24, r12
    6f62:	03 96       	adiw	r24, 0x03	; 3
    6f64:	e2 fe       	sbrs	r14, 2
    6f66:	0a c0       	rjmp	.+20     	; 0x6f7c <dtoa_prf+0xd0>
    6f68:	3e e4       	ldi	r19, 0x4E	; 78
    6f6a:	d6 01       	movw	r26, r12
    6f6c:	3c 93       	st	X, r19
    6f6e:	41 e4       	ldi	r20, 0x41	; 65
    6f70:	11 96       	adiw	r26, 0x01	; 1
    6f72:	4c 93       	st	X, r20
    6f74:	11 97       	sbiw	r26, 0x01	; 1
    6f76:	12 96       	adiw	r26, 0x02	; 2
    6f78:	3c 93       	st	X, r19
    6f7a:	06 c0       	rjmp	.+12     	; 0x6f88 <dtoa_prf+0xdc>
    6f7c:	3e e6       	ldi	r19, 0x6E	; 110
    6f7e:	f6 01       	movw	r30, r12
    6f80:	30 83       	st	Z, r19
    6f82:	41 e6       	ldi	r20, 0x61	; 97
    6f84:	41 83       	std	Z+1, r20	; 0x01
    6f86:	32 83       	std	Z+2, r19	; 0x02
    6f88:	fc 01       	movw	r30, r24
    6f8a:	32 2f       	mov	r19, r18
    6f8c:	40 e2       	ldi	r20, 0x20	; 32
    6f8e:	33 23       	and	r19, r19
    6f90:	09 f4       	brne	.+2      	; 0x6f94 <dtoa_prf+0xe8>
    6f92:	42 c0       	rjmp	.+132    	; 0x7018 <dtoa_prf+0x16c>
    6f94:	41 93       	st	Z+, r20
    6f96:	31 50       	subi	r19, 0x01	; 1
    6f98:	fa cf       	rjmp	.-12     	; 0x6f8e <dtoa_prf+0xe2>
    6f9a:	42 ff       	sbrs	r20, 2
    6f9c:	44 c0       	rjmp	.+136    	; 0x7026 <dtoa_prf+0x17a>
    6f9e:	91 11       	cpse	r25, r1
    6fa0:	02 c0       	rjmp	.+4      	; 0x6fa6 <dtoa_prf+0xfa>
    6fa2:	83 e0       	ldi	r24, 0x03	; 3
    6fa4:	01 c0       	rjmp	.+2      	; 0x6fa8 <dtoa_prf+0xfc>
    6fa6:	84 e0       	ldi	r24, 0x04	; 4
    6fa8:	81 17       	cp	r24, r17
    6faa:	18 f4       	brcc	.+6      	; 0x6fb2 <dtoa_prf+0x106>
    6fac:	21 2f       	mov	r18, r17
    6fae:	28 1b       	sub	r18, r24
    6fb0:	01 c0       	rjmp	.+2      	; 0x6fb4 <dtoa_prf+0x108>
    6fb2:	20 e0       	ldi	r18, 0x00	; 0
    6fb4:	51 11       	cpse	r21, r1
    6fb6:	0b c0       	rjmp	.+22     	; 0x6fce <dtoa_prf+0x122>
    6fb8:	f6 01       	movw	r30, r12
    6fba:	82 2f       	mov	r24, r18
    6fbc:	30 e2       	ldi	r19, 0x20	; 32
    6fbe:	88 23       	and	r24, r24
    6fc0:	19 f0       	breq	.+6      	; 0x6fc8 <dtoa_prf+0x11c>
    6fc2:	31 93       	st	Z+, r19
    6fc4:	81 50       	subi	r24, 0x01	; 1
    6fc6:	fb cf       	rjmp	.-10     	; 0x6fbe <dtoa_prf+0x112>
    6fc8:	c2 0e       	add	r12, r18
    6fca:	d1 1c       	adc	r13, r1
    6fcc:	20 e0       	ldi	r18, 0x00	; 0
    6fce:	99 23       	and	r25, r25
    6fd0:	29 f0       	breq	.+10     	; 0x6fdc <dtoa_prf+0x130>
    6fd2:	d6 01       	movw	r26, r12
    6fd4:	9c 93       	st	X, r25
    6fd6:	f6 01       	movw	r30, r12
    6fd8:	31 96       	adiw	r30, 0x01	; 1
    6fda:	6f 01       	movw	r12, r30
    6fdc:	c6 01       	movw	r24, r12
    6fde:	03 96       	adiw	r24, 0x03	; 3
    6fe0:	e2 fe       	sbrs	r14, 2
    6fe2:	0b c0       	rjmp	.+22     	; 0x6ffa <dtoa_prf+0x14e>
    6fe4:	39 e4       	ldi	r19, 0x49	; 73
    6fe6:	d6 01       	movw	r26, r12
    6fe8:	3c 93       	st	X, r19
    6fea:	3e e4       	ldi	r19, 0x4E	; 78
    6fec:	11 96       	adiw	r26, 0x01	; 1
    6fee:	3c 93       	st	X, r19
    6ff0:	11 97       	sbiw	r26, 0x01	; 1
    6ff2:	36 e4       	ldi	r19, 0x46	; 70
    6ff4:	12 96       	adiw	r26, 0x02	; 2
    6ff6:	3c 93       	st	X, r19
    6ff8:	07 c0       	rjmp	.+14     	; 0x7008 <dtoa_prf+0x15c>
    6ffa:	39 e6       	ldi	r19, 0x69	; 105
    6ffc:	f6 01       	movw	r30, r12
    6ffe:	30 83       	st	Z, r19
    7000:	3e e6       	ldi	r19, 0x6E	; 110
    7002:	31 83       	std	Z+1, r19	; 0x01
    7004:	36 e6       	ldi	r19, 0x66	; 102
    7006:	32 83       	std	Z+2, r19	; 0x02
    7008:	fc 01       	movw	r30, r24
    700a:	32 2f       	mov	r19, r18
    700c:	40 e2       	ldi	r20, 0x20	; 32
    700e:	33 23       	and	r19, r19
    7010:	19 f0       	breq	.+6      	; 0x7018 <dtoa_prf+0x16c>
    7012:	41 93       	st	Z+, r20
    7014:	31 50       	subi	r19, 0x01	; 1
    7016:	fb cf       	rjmp	.-10     	; 0x700e <dtoa_prf+0x162>
    7018:	fc 01       	movw	r30, r24
    701a:	e2 0f       	add	r30, r18
    701c:	f1 1d       	adc	r31, r1
    701e:	10 82       	st	Z, r1
    7020:	8e ef       	ldi	r24, 0xFE	; 254
    7022:	9f ef       	ldi	r25, 0xFF	; 255
    7024:	a6 c0       	rjmp	.+332    	; 0x7172 <dtoa_prf+0x2c6>
    7026:	21 e0       	ldi	r18, 0x01	; 1
    7028:	30 e0       	ldi	r19, 0x00	; 0
    702a:	91 11       	cpse	r25, r1
    702c:	02 c0       	rjmp	.+4      	; 0x7032 <dtoa_prf+0x186>
    702e:	20 e0       	ldi	r18, 0x00	; 0
    7030:	30 e0       	ldi	r19, 0x00	; 0
    7032:	16 16       	cp	r1, r22
    7034:	17 06       	cpc	r1, r23
    7036:	1c f4       	brge	.+6      	; 0x703e <dtoa_prf+0x192>
    7038:	fb 01       	movw	r30, r22
    703a:	31 96       	adiw	r30, 0x01	; 1
    703c:	02 c0       	rjmp	.+4      	; 0x7042 <dtoa_prf+0x196>
    703e:	e1 e0       	ldi	r30, 0x01	; 1
    7040:	f0 e0       	ldi	r31, 0x00	; 0
    7042:	2e 0f       	add	r18, r30
    7044:	3f 1f       	adc	r19, r31
    7046:	bb 20       	and	r11, r11
    7048:	21 f0       	breq	.+8      	; 0x7052 <dtoa_prf+0x1a6>
    704a:	eb 2d       	mov	r30, r11
    704c:	f0 e0       	ldi	r31, 0x00	; 0
    704e:	31 96       	adiw	r30, 0x01	; 1
    7050:	02 c0       	rjmp	.+4      	; 0x7056 <dtoa_prf+0x1aa>
    7052:	e0 e0       	ldi	r30, 0x00	; 0
    7054:	f0 e0       	ldi	r31, 0x00	; 0
    7056:	2e 0f       	add	r18, r30
    7058:	3f 1f       	adc	r19, r31
    705a:	e1 2f       	mov	r30, r17
    705c:	f0 e0       	ldi	r31, 0x00	; 0
    705e:	2e 17       	cp	r18, r30
    7060:	3f 07       	cpc	r19, r31
    7062:	1c f4       	brge	.+6      	; 0x706a <dtoa_prf+0x1be>
    7064:	12 1b       	sub	r17, r18
    7066:	21 2f       	mov	r18, r17
    7068:	01 c0       	rjmp	.+2      	; 0x706c <dtoa_prf+0x1c0>
    706a:	20 e0       	ldi	r18, 0x00	; 0
    706c:	8e 2d       	mov	r24, r14
    706e:	88 71       	andi	r24, 0x18	; 24
    7070:	59 f4       	brne	.+22     	; 0x7088 <dtoa_prf+0x1dc>
    7072:	f6 01       	movw	r30, r12
    7074:	82 2f       	mov	r24, r18
    7076:	30 e2       	ldi	r19, 0x20	; 32
    7078:	88 23       	and	r24, r24
    707a:	19 f0       	breq	.+6      	; 0x7082 <dtoa_prf+0x1d6>
    707c:	31 93       	st	Z+, r19
    707e:	81 50       	subi	r24, 0x01	; 1
    7080:	fb cf       	rjmp	.-10     	; 0x7078 <dtoa_prf+0x1cc>
    7082:	c2 0e       	add	r12, r18
    7084:	d1 1c       	adc	r13, r1
    7086:	20 e0       	ldi	r18, 0x00	; 0
    7088:	99 23       	and	r25, r25
    708a:	29 f0       	breq	.+10     	; 0x7096 <dtoa_prf+0x1ea>
    708c:	d6 01       	movw	r26, r12
    708e:	9c 93       	st	X, r25
    7090:	f6 01       	movw	r30, r12
    7092:	31 96       	adiw	r30, 0x01	; 1
    7094:	6f 01       	movw	r12, r30
    7096:	51 11       	cpse	r21, r1
    7098:	0b c0       	rjmp	.+22     	; 0x70b0 <dtoa_prf+0x204>
    709a:	f6 01       	movw	r30, r12
    709c:	82 2f       	mov	r24, r18
    709e:	90 e3       	ldi	r25, 0x30	; 48
    70a0:	88 23       	and	r24, r24
    70a2:	19 f0       	breq	.+6      	; 0x70aa <dtoa_prf+0x1fe>
    70a4:	91 93       	st	Z+, r25
    70a6:	81 50       	subi	r24, 0x01	; 1
    70a8:	fb cf       	rjmp	.-10     	; 0x70a0 <dtoa_prf+0x1f4>
    70aa:	c2 0e       	add	r12, r18
    70ac:	d1 1c       	adc	r13, r1
    70ae:	20 e0       	ldi	r18, 0x00	; 0
    70b0:	0f 2d       	mov	r16, r15
    70b2:	06 0f       	add	r16, r22
    70b4:	9a 81       	ldd	r25, Y+2	; 0x02
    70b6:	34 2f       	mov	r19, r20
    70b8:	30 71       	andi	r19, 0x10	; 16
    70ba:	44 ff       	sbrs	r20, 4
    70bc:	03 c0       	rjmp	.+6      	; 0x70c4 <dtoa_prf+0x218>
    70be:	91 33       	cpi	r25, 0x31	; 49
    70c0:	09 f4       	brne	.+2      	; 0x70c4 <dtoa_prf+0x218>
    70c2:	01 50       	subi	r16, 0x01	; 1
    70c4:	10 16       	cp	r1, r16
    70c6:	24 f4       	brge	.+8      	; 0x70d0 <dtoa_prf+0x224>
    70c8:	09 30       	cpi	r16, 0x09	; 9
    70ca:	18 f0       	brcs	.+6      	; 0x70d2 <dtoa_prf+0x226>
    70cc:	08 e0       	ldi	r16, 0x08	; 8
    70ce:	01 c0       	rjmp	.+2      	; 0x70d2 <dtoa_prf+0x226>
    70d0:	01 e0       	ldi	r16, 0x01	; 1
    70d2:	ab 01       	movw	r20, r22
    70d4:	77 ff       	sbrs	r23, 7
    70d6:	02 c0       	rjmp	.+4      	; 0x70dc <dtoa_prf+0x230>
    70d8:	40 e0       	ldi	r20, 0x00	; 0
    70da:	50 e0       	ldi	r21, 0x00	; 0
    70dc:	fb 01       	movw	r30, r22
    70de:	e4 1b       	sub	r30, r20
    70e0:	f5 0b       	sbc	r31, r21
    70e2:	a1 e0       	ldi	r26, 0x01	; 1
    70e4:	b0 e0       	ldi	r27, 0x00	; 0
    70e6:	ac 0f       	add	r26, r28
    70e8:	bd 1f       	adc	r27, r29
    70ea:	ea 0f       	add	r30, r26
    70ec:	fb 1f       	adc	r31, r27
    70ee:	8e e2       	ldi	r24, 0x2E	; 46
    70f0:	a8 2e       	mov	r10, r24
    70f2:	4b 01       	movw	r8, r22
    70f4:	80 1a       	sub	r8, r16
    70f6:	91 08       	sbc	r9, r1
    70f8:	0b 2d       	mov	r16, r11
    70fa:	10 e0       	ldi	r17, 0x00	; 0
    70fc:	11 95       	neg	r17
    70fe:	01 95       	neg	r16
    7100:	11 09       	sbc	r17, r1
    7102:	4f 3f       	cpi	r20, 0xFF	; 255
    7104:	bf ef       	ldi	r27, 0xFF	; 255
    7106:	5b 07       	cpc	r21, r27
    7108:	21 f4       	brne	.+8      	; 0x7112 <dtoa_prf+0x266>
    710a:	d6 01       	movw	r26, r12
    710c:	ac 92       	st	X, r10
    710e:	11 96       	adiw	r26, 0x01	; 1
    7110:	6d 01       	movw	r12, r26
    7112:	64 17       	cp	r22, r20
    7114:	75 07       	cpc	r23, r21
    7116:	2c f0       	brlt	.+10     	; 0x7122 <dtoa_prf+0x276>
    7118:	84 16       	cp	r8, r20
    711a:	95 06       	cpc	r9, r21
    711c:	14 f4       	brge	.+4      	; 0x7122 <dtoa_prf+0x276>
    711e:	81 81       	ldd	r24, Z+1	; 0x01
    7120:	01 c0       	rjmp	.+2      	; 0x7124 <dtoa_prf+0x278>
    7122:	80 e3       	ldi	r24, 0x30	; 48
    7124:	41 50       	subi	r20, 0x01	; 1
    7126:	51 09       	sbc	r21, r1
    7128:	31 96       	adiw	r30, 0x01	; 1
    712a:	d6 01       	movw	r26, r12
    712c:	11 96       	adiw	r26, 0x01	; 1
    712e:	7d 01       	movw	r14, r26
    7130:	40 17       	cp	r20, r16
    7132:	51 07       	cpc	r21, r17
    7134:	24 f0       	brlt	.+8      	; 0x713e <dtoa_prf+0x292>
    7136:	d6 01       	movw	r26, r12
    7138:	8c 93       	st	X, r24
    713a:	67 01       	movw	r12, r14
    713c:	e2 cf       	rjmp	.-60     	; 0x7102 <dtoa_prf+0x256>
    713e:	64 17       	cp	r22, r20
    7140:	75 07       	cpc	r23, r21
    7142:	39 f4       	brne	.+14     	; 0x7152 <dtoa_prf+0x2a6>
    7144:	96 33       	cpi	r25, 0x36	; 54
    7146:	20 f4       	brcc	.+8      	; 0x7150 <dtoa_prf+0x2a4>
    7148:	95 33       	cpi	r25, 0x35	; 53
    714a:	19 f4       	brne	.+6      	; 0x7152 <dtoa_prf+0x2a6>
    714c:	31 11       	cpse	r19, r1
    714e:	01 c0       	rjmp	.+2      	; 0x7152 <dtoa_prf+0x2a6>
    7150:	81 e3       	ldi	r24, 0x31	; 49
    7152:	f6 01       	movw	r30, r12
    7154:	80 83       	st	Z, r24
    7156:	f7 01       	movw	r30, r14
    7158:	82 2f       	mov	r24, r18
    715a:	90 e2       	ldi	r25, 0x20	; 32
    715c:	88 23       	and	r24, r24
    715e:	19 f0       	breq	.+6      	; 0x7166 <dtoa_prf+0x2ba>
    7160:	91 93       	st	Z+, r25
    7162:	81 50       	subi	r24, 0x01	; 1
    7164:	fb cf       	rjmp	.-10     	; 0x715c <dtoa_prf+0x2b0>
    7166:	f7 01       	movw	r30, r14
    7168:	e2 0f       	add	r30, r18
    716a:	f1 1d       	adc	r31, r1
    716c:	10 82       	st	Z, r1
    716e:	80 e0       	ldi	r24, 0x00	; 0
    7170:	90 e0       	ldi	r25, 0x00	; 0
    7172:	29 96       	adiw	r28, 0x09	; 9
    7174:	0f b6       	in	r0, 0x3f	; 63
    7176:	f8 94       	cli
    7178:	de bf       	out	0x3e, r29	; 62
    717a:	0f be       	out	0x3f, r0	; 63
    717c:	cd bf       	out	0x3d, r28	; 61
    717e:	df 91       	pop	r29
    7180:	cf 91       	pop	r28
    7182:	1f 91       	pop	r17
    7184:	0f 91       	pop	r16
    7186:	ff 90       	pop	r15
    7188:	ef 90       	pop	r14
    718a:	df 90       	pop	r13
    718c:	cf 90       	pop	r12
    718e:	bf 90       	pop	r11
    7190:	af 90       	pop	r10
    7192:	9f 90       	pop	r9
    7194:	8f 90       	pop	r8
    7196:	08 95       	ret

00007198 <__ftoa_engine>:
    7198:	28 30       	cpi	r18, 0x08	; 8
    719a:	08 f0       	brcs	.+2      	; 0x719e <__ftoa_engine+0x6>
    719c:	27 e0       	ldi	r18, 0x07	; 7
    719e:	33 27       	eor	r19, r19
    71a0:	da 01       	movw	r26, r20
    71a2:	99 0f       	add	r25, r25
    71a4:	31 1d       	adc	r19, r1
    71a6:	87 fd       	sbrc	r24, 7
    71a8:	91 60       	ori	r25, 0x01	; 1
    71aa:	00 96       	adiw	r24, 0x00	; 0
    71ac:	61 05       	cpc	r22, r1
    71ae:	71 05       	cpc	r23, r1
    71b0:	39 f4       	brne	.+14     	; 0x71c0 <__ftoa_engine+0x28>
    71b2:	32 60       	ori	r19, 0x02	; 2
    71b4:	2e 5f       	subi	r18, 0xFE	; 254
    71b6:	3d 93       	st	X+, r19
    71b8:	30 e3       	ldi	r19, 0x30	; 48
    71ba:	2a 95       	dec	r18
    71bc:	e1 f7       	brne	.-8      	; 0x71b6 <__ftoa_engine+0x1e>
    71be:	08 95       	ret
    71c0:	9f 3f       	cpi	r25, 0xFF	; 255
    71c2:	30 f0       	brcs	.+12     	; 0x71d0 <__ftoa_engine+0x38>
    71c4:	80 38       	cpi	r24, 0x80	; 128
    71c6:	71 05       	cpc	r23, r1
    71c8:	61 05       	cpc	r22, r1
    71ca:	09 f0       	breq	.+2      	; 0x71ce <__ftoa_engine+0x36>
    71cc:	3c 5f       	subi	r19, 0xFC	; 252
    71ce:	3c 5f       	subi	r19, 0xFC	; 252
    71d0:	3d 93       	st	X+, r19
    71d2:	91 30       	cpi	r25, 0x01	; 1
    71d4:	08 f0       	brcs	.+2      	; 0x71d8 <__ftoa_engine+0x40>
    71d6:	80 68       	ori	r24, 0x80	; 128
    71d8:	91 1d       	adc	r25, r1
    71da:	df 93       	push	r29
    71dc:	cf 93       	push	r28
    71de:	1f 93       	push	r17
    71e0:	0f 93       	push	r16
    71e2:	ff 92       	push	r15
    71e4:	ef 92       	push	r14
    71e6:	19 2f       	mov	r17, r25
    71e8:	98 7f       	andi	r25, 0xF8	; 248
    71ea:	96 95       	lsr	r25
    71ec:	e9 2f       	mov	r30, r25
    71ee:	96 95       	lsr	r25
    71f0:	96 95       	lsr	r25
    71f2:	e9 0f       	add	r30, r25
    71f4:	ff 27       	eor	r31, r31
    71f6:	ec 5d       	subi	r30, 0xDC	; 220
    71f8:	fe 4f       	sbci	r31, 0xFE	; 254
    71fa:	99 27       	eor	r25, r25
    71fc:	33 27       	eor	r19, r19
    71fe:	ee 24       	eor	r14, r14
    7200:	ff 24       	eor	r15, r15
    7202:	a7 01       	movw	r20, r14
    7204:	e7 01       	movw	r28, r14
    7206:	05 90       	lpm	r0, Z+
    7208:	08 94       	sec
    720a:	07 94       	ror	r0
    720c:	28 f4       	brcc	.+10     	; 0x7218 <__ftoa_engine+0x80>
    720e:	36 0f       	add	r19, r22
    7210:	e7 1e       	adc	r14, r23
    7212:	f8 1e       	adc	r15, r24
    7214:	49 1f       	adc	r20, r25
    7216:	51 1d       	adc	r21, r1
    7218:	66 0f       	add	r22, r22
    721a:	77 1f       	adc	r23, r23
    721c:	88 1f       	adc	r24, r24
    721e:	99 1f       	adc	r25, r25
    7220:	06 94       	lsr	r0
    7222:	a1 f7       	brne	.-24     	; 0x720c <__ftoa_engine+0x74>
    7224:	05 90       	lpm	r0, Z+
    7226:	07 94       	ror	r0
    7228:	28 f4       	brcc	.+10     	; 0x7234 <__ftoa_engine+0x9c>
    722a:	e7 0e       	add	r14, r23
    722c:	f8 1e       	adc	r15, r24
    722e:	49 1f       	adc	r20, r25
    7230:	56 1f       	adc	r21, r22
    7232:	c1 1d       	adc	r28, r1
    7234:	77 0f       	add	r23, r23
    7236:	88 1f       	adc	r24, r24
    7238:	99 1f       	adc	r25, r25
    723a:	66 1f       	adc	r22, r22
    723c:	06 94       	lsr	r0
    723e:	a1 f7       	brne	.-24     	; 0x7228 <__ftoa_engine+0x90>
    7240:	05 90       	lpm	r0, Z+
    7242:	07 94       	ror	r0
    7244:	28 f4       	brcc	.+10     	; 0x7250 <__ftoa_engine+0xb8>
    7246:	f8 0e       	add	r15, r24
    7248:	49 1f       	adc	r20, r25
    724a:	56 1f       	adc	r21, r22
    724c:	c7 1f       	adc	r28, r23
    724e:	d1 1d       	adc	r29, r1
    7250:	88 0f       	add	r24, r24
    7252:	99 1f       	adc	r25, r25
    7254:	66 1f       	adc	r22, r22
    7256:	77 1f       	adc	r23, r23
    7258:	06 94       	lsr	r0
    725a:	a1 f7       	brne	.-24     	; 0x7244 <__ftoa_engine+0xac>
    725c:	05 90       	lpm	r0, Z+
    725e:	07 94       	ror	r0
    7260:	20 f4       	brcc	.+8      	; 0x726a <__ftoa_engine+0xd2>
    7262:	49 0f       	add	r20, r25
    7264:	56 1f       	adc	r21, r22
    7266:	c7 1f       	adc	r28, r23
    7268:	d8 1f       	adc	r29, r24
    726a:	99 0f       	add	r25, r25
    726c:	66 1f       	adc	r22, r22
    726e:	77 1f       	adc	r23, r23
    7270:	88 1f       	adc	r24, r24
    7272:	06 94       	lsr	r0
    7274:	a9 f7       	brne	.-22     	; 0x7260 <__ftoa_engine+0xc8>
    7276:	84 91       	lpm	r24, Z
    7278:	10 95       	com	r17
    727a:	17 70       	andi	r17, 0x07	; 7
    727c:	41 f0       	breq	.+16     	; 0x728e <__ftoa_engine+0xf6>
    727e:	d6 95       	lsr	r29
    7280:	c7 95       	ror	r28
    7282:	57 95       	ror	r21
    7284:	47 95       	ror	r20
    7286:	f7 94       	ror	r15
    7288:	e7 94       	ror	r14
    728a:	1a 95       	dec	r17
    728c:	c1 f7       	brne	.-16     	; 0x727e <__ftoa_engine+0xe6>
    728e:	ea ec       	ldi	r30, 0xCA	; 202
    7290:	f0 e0       	ldi	r31, 0x00	; 0
    7292:	68 94       	set
    7294:	15 90       	lpm	r1, Z+
    7296:	15 91       	lpm	r17, Z+
    7298:	35 91       	lpm	r19, Z+
    729a:	65 91       	lpm	r22, Z+
    729c:	95 91       	lpm	r25, Z+
    729e:	05 90       	lpm	r0, Z+
    72a0:	7f e2       	ldi	r23, 0x2F	; 47
    72a2:	73 95       	inc	r23
    72a4:	e1 18       	sub	r14, r1
    72a6:	f1 0a       	sbc	r15, r17
    72a8:	43 0b       	sbc	r20, r19
    72aa:	56 0b       	sbc	r21, r22
    72ac:	c9 0b       	sbc	r28, r25
    72ae:	d0 09       	sbc	r29, r0
    72b0:	c0 f7       	brcc	.-16     	; 0x72a2 <__ftoa_engine+0x10a>
    72b2:	e1 0c       	add	r14, r1
    72b4:	f1 1e       	adc	r15, r17
    72b6:	43 1f       	adc	r20, r19
    72b8:	56 1f       	adc	r21, r22
    72ba:	c9 1f       	adc	r28, r25
    72bc:	d0 1d       	adc	r29, r0
    72be:	7e f4       	brtc	.+30     	; 0x72de <__ftoa_engine+0x146>
    72c0:	70 33       	cpi	r23, 0x30	; 48
    72c2:	11 f4       	brne	.+4      	; 0x72c8 <__ftoa_engine+0x130>
    72c4:	8a 95       	dec	r24
    72c6:	e6 cf       	rjmp	.-52     	; 0x7294 <__ftoa_engine+0xfc>
    72c8:	e8 94       	clt
    72ca:	01 50       	subi	r16, 0x01	; 1
    72cc:	30 f0       	brcs	.+12     	; 0x72da <__ftoa_engine+0x142>
    72ce:	08 0f       	add	r16, r24
    72d0:	0a f4       	brpl	.+2      	; 0x72d4 <__ftoa_engine+0x13c>
    72d2:	00 27       	eor	r16, r16
    72d4:	02 17       	cp	r16, r18
    72d6:	08 f4       	brcc	.+2      	; 0x72da <__ftoa_engine+0x142>
    72d8:	20 2f       	mov	r18, r16
    72da:	23 95       	inc	r18
    72dc:	02 2f       	mov	r16, r18
    72de:	7a 33       	cpi	r23, 0x3A	; 58
    72e0:	28 f0       	brcs	.+10     	; 0x72ec <__ftoa_engine+0x154>
    72e2:	79 e3       	ldi	r23, 0x39	; 57
    72e4:	7d 93       	st	X+, r23
    72e6:	2a 95       	dec	r18
    72e8:	e9 f7       	brne	.-6      	; 0x72e4 <__ftoa_engine+0x14c>
    72ea:	10 c0       	rjmp	.+32     	; 0x730c <__ftoa_engine+0x174>
    72ec:	7d 93       	st	X+, r23
    72ee:	2a 95       	dec	r18
    72f0:	89 f6       	brne	.-94     	; 0x7294 <__ftoa_engine+0xfc>
    72f2:	06 94       	lsr	r0
    72f4:	97 95       	ror	r25
    72f6:	67 95       	ror	r22
    72f8:	37 95       	ror	r19
    72fa:	17 95       	ror	r17
    72fc:	17 94       	ror	r1
    72fe:	e1 18       	sub	r14, r1
    7300:	f1 0a       	sbc	r15, r17
    7302:	43 0b       	sbc	r20, r19
    7304:	56 0b       	sbc	r21, r22
    7306:	c9 0b       	sbc	r28, r25
    7308:	d0 09       	sbc	r29, r0
    730a:	98 f0       	brcs	.+38     	; 0x7332 <__ftoa_engine+0x19a>
    730c:	23 95       	inc	r18
    730e:	7e 91       	ld	r23, -X
    7310:	73 95       	inc	r23
    7312:	7a 33       	cpi	r23, 0x3A	; 58
    7314:	08 f0       	brcs	.+2      	; 0x7318 <__ftoa_engine+0x180>
    7316:	70 e3       	ldi	r23, 0x30	; 48
    7318:	7c 93       	st	X, r23
    731a:	20 13       	cpse	r18, r16
    731c:	b8 f7       	brcc	.-18     	; 0x730c <__ftoa_engine+0x174>
    731e:	7e 91       	ld	r23, -X
    7320:	70 61       	ori	r23, 0x10	; 16
    7322:	7d 93       	st	X+, r23
    7324:	30 f0       	brcs	.+12     	; 0x7332 <__ftoa_engine+0x19a>
    7326:	83 95       	inc	r24
    7328:	71 e3       	ldi	r23, 0x31	; 49
    732a:	7d 93       	st	X+, r23
    732c:	70 e3       	ldi	r23, 0x30	; 48
    732e:	2a 95       	dec	r18
    7330:	e1 f7       	brne	.-8      	; 0x732a <__ftoa_engine+0x192>
    7332:	11 24       	eor	r1, r1
    7334:	ef 90       	pop	r14
    7336:	ff 90       	pop	r15
    7338:	0f 91       	pop	r16
    733a:	1f 91       	pop	r17
    733c:	cf 91       	pop	r28
    733e:	df 91       	pop	r29
    7340:	99 27       	eor	r25, r25
    7342:	87 fd       	sbrc	r24, 7
    7344:	90 95       	com	r25
    7346:	08 95       	ret

00007348 <__ctype_isfalse>:
    7348:	99 27       	eor	r25, r25
    734a:	88 27       	eor	r24, r24

0000734c <__ctype_istrue>:
    734c:	08 95       	ret

0000734e <strrev>:
    734e:	dc 01       	movw	r26, r24
    7350:	fc 01       	movw	r30, r24
    7352:	67 2f       	mov	r22, r23
    7354:	71 91       	ld	r23, Z+
    7356:	77 23       	and	r23, r23
    7358:	e1 f7       	brne	.-8      	; 0x7352 <strrev+0x4>
    735a:	32 97       	sbiw	r30, 0x02	; 2
    735c:	04 c0       	rjmp	.+8      	; 0x7366 <strrev+0x18>
    735e:	7c 91       	ld	r23, X
    7360:	6d 93       	st	X+, r22
    7362:	70 83       	st	Z, r23
    7364:	62 91       	ld	r22, -Z
    7366:	ae 17       	cp	r26, r30
    7368:	bf 07       	cpc	r27, r31
    736a:	c8 f3       	brcs	.-14     	; 0x735e <strrev+0x10>
    736c:	08 95       	ret

0000736e <__do_global_dtors>:
    736e:	11 e0       	ldi	r17, 0x01	; 1
    7370:	c2 e6       	ldi	r28, 0x62	; 98
    7372:	d1 e0       	ldi	r29, 0x01	; 1
    7374:	03 c0       	rjmp	.+6      	; 0x737c <__do_global_dtors+0xe>
    7376:	fe 01       	movw	r30, r28
    7378:	c3 da       	rcall	.-2682   	; 0x6900 <__tablejump2__>
    737a:	21 96       	adiw	r28, 0x01	; 1
    737c:	c3 36       	cpi	r28, 0x63	; 99
    737e:	d1 07       	cpc	r29, r17
    7380:	d1 f7       	brne	.-12     	; 0x7376 <__do_global_dtors+0x8>
    7382:	f8 94       	cli

00007384 <__stop_program>:
    7384:	ff cf       	rjmp	.-2      	; 0x7384 <__stop_program>
