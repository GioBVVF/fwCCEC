
templateVuoto.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000087a  00800100  00008f8e  00009022  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00008f8e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000047f  0080097a  0080097a  0000989c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000989c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000098cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00001568  00000000  00000000  0000990c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00045978  00000000  00000000  0000ae74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000083da  00000000  00000000  000507ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000dea0  00000000  00000000  00058bc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00005094  00000000  00000000  00066a68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000998f  00000000  00000000  0006bafc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001e263  00000000  00000000  0007548b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000017a0  00000000  00000000  000936ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	67 c1       	rjmp	.+718    	; 0x2d0 <__dtors_end>
       2:	00 00       	nop
       4:	8f c1       	rjmp	.+798    	; 0x324 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c1       	rjmp	.+794    	; 0x324 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c1       	rjmp	.+790    	; 0x324 <__bad_interrupt>
       e:	00 00       	nop
      10:	0c 94 26 08 	jmp	0x104c	; 0x104c <__vector_4>
      14:	87 c1       	rjmp	.+782    	; 0x324 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c1       	rjmp	.+778    	; 0x324 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	0c 94 4a 08 	jmp	0x1094	; 0x1094 <__vector_7>
      20:	81 c1       	rjmp	.+770    	; 0x324 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c1       	rjmp	.+766    	; 0x324 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c1       	rjmp	.+762    	; 0x324 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c1       	rjmp	.+758    	; 0x324 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c1       	rjmp	.+754    	; 0x324 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c1       	rjmp	.+750    	; 0x324 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c1       	rjmp	.+746    	; 0x324 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c1       	rjmp	.+742    	; 0x324 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 c2 3b 	jmp	0x7784	; 0x7784 <__vector_16>
      44:	6f c1       	rjmp	.+734    	; 0x324 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 99 39 	jmp	0x7332	; 0x7332 <__vector_18>
      4c:	0c 94 cb 39 	jmp	0x7396	; 0x7396 <__vector_19>
      50:	69 c1       	rjmp	.+722    	; 0x324 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c1       	rjmp	.+718    	; 0x324 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c1       	rjmp	.+714    	; 0x324 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c1       	rjmp	.+710    	; 0x324 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c1       	rjmp	.+706    	; 0x324 <__bad_interrupt>
      62:	00 00       	nop
      64:	5f c1       	rjmp	.+702    	; 0x324 <__bad_interrupt>
      66:	00 00       	nop
      68:	0c 94 e6 35 	jmp	0x6bcc	; 0x6bcc <__vector_26>
      6c:	5b c1       	rjmp	.+694    	; 0x324 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c1       	rjmp	.+690    	; 0x324 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c1       	rjmp	.+686    	; 0x324 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c1       	rjmp	.+682    	; 0x324 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c1       	rjmp	.+678    	; 0x324 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c1       	rjmp	.+674    	; 0x324 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c1       	rjmp	.+670    	; 0x324 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c1       	rjmp	.+666    	; 0x324 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	49 10       	cpse	r4, r9
      8e:	6f 10       	cpse	r6, r15
      90:	86 10       	cpse	r8, r6
      92:	b1 10       	cpse	r11, r1
      94:	fc 10       	cpse	r15, r12
      96:	30 11       	cpse	r19, r0
      98:	b4 11       	cpse	r27, r4
      9a:	01 12       	cpse	r0, r17
      9c:	39 12       	cpse	r3, r25
      9e:	9c 12       	cpse	r9, r28
      a0:	37 13       	cpse	r19, r23
      a2:	c7 13       	cpse	r28, r23
      a4:	7d 1b       	sub	r23, r29
      a6:	94 1b       	sub	r25, r20
      a8:	94 1b       	sub	r25, r20
      aa:	91 1b       	sub	r25, r17
      ac:	94 1b       	sub	r25, r20
      ae:	7b 1b       	sub	r23, r27
      b0:	94 1b       	sub	r25, r20
      b2:	94 1b       	sub	r25, r20
      b4:	94 1b       	sub	r25, r20
      b6:	6f 1b       	sub	r22, r31
      b8:	94 1b       	sub	r25, r20
      ba:	94 1b       	sub	r25, r20
      bc:	84 1b       	sub	r24, r20
      be:	8f 1b       	sub	r24, r31
      c0:	8d 1b       	sub	r24, r29
      c2:	94 1b       	sub	r25, r20
      c4:	94 1b       	sub	r25, r20
      c6:	94 1b       	sub	r25, r20
      c8:	8b 1b       	sub	r24, r27

000000ca <__trampolines_end>:
      ca:	00 40       	sbci	r16, 0x00	; 0
      cc:	7a 10       	cpse	r7, r10
      ce:	f3 5a       	subi	r31, 0xA3	; 163
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	72 4e       	sbci	r23, 0xE2	; 226
      d4:	18 09       	sbc	r17, r8
      d6:	00 10       	cpse	r0, r0
      d8:	a5 d4       	rcall	.+2378   	; 0xa24 <_Z17leggi_IP_REGISTERv+0x20>
      da:	e8 00       	.word	0x00e8	; ????
      dc:	00 e8       	ldi	r16, 0x80	; 128
      de:	76 48       	sbci	r23, 0x86	; 134
      e0:	17 00       	.word	0x0017	; ????
      e2:	00 e4       	ldi	r16, 0x40	; 64
      e4:	0b 54       	subi	r16, 0x4B	; 75
      e6:	02 00       	.word	0x0002	; ????
      e8:	00 ca       	rjmp	.-3072   	; 0xfffff4ea <__eeprom_end+0xff7ef4ea>
      ea:	9a 3b       	cpi	r25, 0xBA	; 186
      ec:	00 00       	nop
      ee:	00 e1       	ldi	r16, 0x10	; 16
      f0:	f5 05       	cpc	r31, r5
      f2:	00 00       	nop
      f4:	80 96       	adiw	r24, 0x20	; 32
      f6:	98 00       	.word	0x0098	; ????
      f8:	00 00       	nop
      fa:	40 42       	sbci	r20, 0x20	; 32
      fc:	0f 00       	.word	0x000f	; ????
      fe:	00 00       	nop
     100:	a0 86       	std	Z+8, r10	; 0x08
     102:	01 00       	.word	0x0001	; ????
     104:	00 00       	nop
     106:	10 27       	eor	r17, r16
     108:	00 00       	nop
     10a:	00 00       	nop
     10c:	e8 03       	fmulsu	r22, r16
     10e:	00 00       	nop
     110:	00 00       	nop
     112:	64 00       	.word	0x0064	; ????
     114:	00 00       	nop
     116:	00 00       	nop
     118:	0a 00       	.word	0x000a	; ????
     11a:	00 00       	nop
     11c:	00 00       	nop
     11e:	01 00       	.word	0x0001	; ????
     120:	00 00       	nop
     122:	00 00       	nop
     124:	2c 76       	andi	r18, 0x6C	; 108
     126:	d8 88       	ldd	r13, Y+16	; 0x10
     128:	dc 67       	ori	r29, 0x7C	; 124
     12a:	4f 08       	sbc	r4, r15
     12c:	23 df       	rcall	.-442    	; 0xffffff74 <__eeprom_end+0xff7eff74>
     12e:	c1 df       	rcall	.-126    	; 0xb2 <__SREG__+0x73>
     130:	ae 59       	subi	r26, 0x9E	; 158
     132:	e1 b1       	in	r30, 0x01	; 1
     134:	b7 96       	adiw	r30, 0x27	; 39
     136:	e5 e3       	ldi	r30, 0x35	; 53
     138:	e4 53       	subi	r30, 0x34	; 52
     13a:	c6 3a       	cpi	r28, 0xA6	; 166
     13c:	e6 51       	subi	r30, 0x16	; 22
     13e:	99 76       	andi	r25, 0x69	; 105
     140:	96 e8       	ldi	r25, 0x86	; 134
     142:	e6 c2       	rjmp	.+1484   	; 0x710 <_Z14FlashpowerDownj+0x8>
     144:	84 26       	eor	r8, r20
     146:	eb 89       	ldd	r30, Y+19	; 0x13
     148:	8c 9b       	sbis	0x11, 4	; 17
     14a:	62 ed       	ldi	r22, 0xD2	; 210
     14c:	40 7c       	andi	r20, 0xC0	; 192
     14e:	6f fc       	.word	0xfc6f	; ????
     150:	ef bc       	out	0x2f, r14	; 47
     152:	9c 9f       	mul	r25, r28
     154:	40 f2       	brcs	.-112    	; 0xe6 <__trampolines_end+0x1c>
     156:	ba a5       	ldd	r27, Y+42	; 0x2a
     158:	6f a5       	ldd	r22, Y+47	; 0x2f
     15a:	f4 90       	lpm	r15, Z
     15c:	05 5a       	subi	r16, 0xA5	; 165
     15e:	2a f7       	brpl	.-54     	; 0x12a <__trampolines_end+0x60>
     160:	5c 93       	st	X, r21
     162:	6b 6c       	ori	r22, 0xCB	; 203
     164:	f9 67       	ori	r31, 0x79	; 121
     166:	6d c1       	rjmp	.+730    	; 0x442 <_Z8printTabh+0x12>
     168:	1b fc       	.word	0xfc1b	; ????
     16a:	e0 e4       	ldi	r30, 0x40	; 64
     16c:	0d 47       	sbci	r16, 0x7D	; 125
     16e:	fe f5       	brtc	.+126    	; 0x1ee <_ZZ5setupE3__c+0x15>
     170:	20 e6       	ldi	r18, 0x60	; 96
     172:	b5 00       	.word	0x00b5	; ????
     174:	d0 ed       	ldi	r29, 0xD0	; 208
     176:	90 2e       	mov	r9, r16
     178:	03 00       	.word	0x0003	; ????
     17a:	94 35       	cpi	r25, 0x54	; 84
     17c:	77 05       	cpc	r23, r7
     17e:	00 80       	ld	r0, Z
     180:	84 1e       	adc	r8, r20
     182:	08 00       	.word	0x0008	; ????
     184:	00 20       	and	r0, r0
     186:	4e 0a       	sbc	r4, r30
     188:	00 00       	nop
     18a:	00 c8       	rjmp	.-4096   	; 0xfffff18c <__eeprom_end+0xff7ef18c>
     18c:	0c 33       	cpi	r16, 0x3C	; 60
     18e:	33 33       	cpi	r19, 0x33	; 51
     190:	33 0f       	add	r19, r19
     192:	98 6e       	ori	r25, 0xE8	; 232
     194:	12 83       	std	Z+2, r17	; 0x02
     196:	11 41       	sbci	r17, 0x11	; 17
     198:	ef 8d       	ldd	r30, Y+31	; 0x1f
     19a:	21 14       	cp	r2, r1
     19c:	89 3b       	cpi	r24, 0xB9	; 185
     19e:	e6 55       	subi	r30, 0x56	; 86
     1a0:	16 cf       	rjmp	.-468    	; 0xffffffce <__eeprom_end+0xff7effce>
     1a2:	fe e6       	ldi	r31, 0x6E	; 110
     1a4:	db 18       	sub	r13, r11
     1a6:	d1 84       	ldd	r13, Z+9	; 0x09
     1a8:	4b 38       	cpi	r20, 0x8B	; 139
     1aa:	1b f7       	brvc	.-58     	; 0x172 <__trampolines_end+0xa8>
     1ac:	7c 1d       	adc	r23, r12
     1ae:	90 1d       	adc	r25, r0
     1b0:	a4 bb       	out	0x14, r26	; 20
     1b2:	e4 24       	eor	r14, r4
     1b4:	20 32       	cpi	r18, 0x20	; 32
     1b6:	84 72       	andi	r24, 0x24	; 36
     1b8:	5e 22       	and	r5, r30
     1ba:	81 00       	.word	0x0081	; ????
     1bc:	c9 f1       	breq	.+114    	; 0x230 <_ZZN11Diagnostics15_printErrorCodeEvE3__c+0x5>
     1be:	24 ec       	ldi	r18, 0xC4	; 196
     1c0:	a1 e5       	ldi	r26, 0x51	; 81
     1c2:	3d 27       	eor	r19, r29

000001c4 <_ZZ5setupE3__c_0>:
     1c4:	44 53 33 32 33 31 4d 20 69 6e 69 74 69 61 6c 69     DS3231M initiali
     1d4:	7a 65 64 2e 00                                      zed..

000001d9 <_ZZ5setupE3__c>:
     1d9:	55 6e 61 62 6c 65 20 74 6f 20 66 69 6e 64 20 44     Unable to find D
     1e9:	53 33 32 33 31 4d 4d 2e 20 43 68 65 63 6b 69 6e     S3231MM. Checkin
     1f9:	67 20 61 67 61 69 6e 20 69 6e 20 33 73 2e 00        g again in 3s..

00000208 <_ZZN13DS3231M_Class6adjustEvE3__c>:
     208:	4d 61 79 20 20 31 20 32 30 32 30 00                 May  1 2020.

00000214 <_ZZN13DS3231M_Class6adjustEvE3__c_0>:
     214:	31 31 3a 35 35 3a 31 31 00                          11:55:11.

0000021d <_ZL11daysInMonth>:
     21d:	1f 1c 1f 1e 1f 1e 1f 1f 1e 1f 1e 1f                 ............

00000229 <_ZZN11Diagnostics15_printErrorCodeEvE3__c_0>:
     229:	30 00                                               0.

0000022b <_ZZN11Diagnostics15_printErrorCodeEvE3__c>:
     22b:	45 72 72 6f 72 20 63 6f 64 65 3a 20 30 78 00        Error code: 0x.

0000023a <digital_pin_to_timer_PGM>:
     23a:	00 00 00 00 04 03 08 07 00 00 02 00 09 0a 00 00     ................
	...
     256:	00 00 00 01                                         ....

0000025a <digital_pin_to_bit_mask_PGM>:
     25a:	01 02 04 08 10 20 40 80 01 02 10 20 40 80 10 20     ..... @.... @.. 
     26a:	40 80 10 08 20 04 40 80 01 02 04 08 01 02 04 08     @... .@.........

0000027a <digital_pin_to_port_PGM>:
     27a:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 01 01     ................
     28a:	01 01 03 03 03 03 03 03 01 01 01 01 03 03 02 02     ................

0000029a <port_to_input_PGM>:
     29a:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000002a4 <port_to_output_PGM>:
     2a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000002ae <port_to_mode_PGM>:
     2ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000002b8 <__ctors_start>:
     2b8:	fb 08       	sbc	r15, r11
     2ba:	03 1e       	adc	r0, r19
     2bc:	5b 1e       	adc	r5, r27
     2be:	53 21       	and	r21, r3
     2c0:	4f 23       	and	r20, r31
     2c2:	6a 24       	eor	r6, r10
     2c4:	3c 26       	eor	r3, r28
     2c6:	47 26       	eor	r4, r23
     2c8:	06 2a       	or	r0, r22
     2ca:	76 38       	cpi	r23, 0x86	; 134
     2cc:	f9 39       	cpi	r31, 0x99	; 153

000002ce <__ctors_end>:
     2ce:	ed 09       	sbc	r30, r13

000002d0 <__dtors_end>:
     2d0:	11 24       	eor	r1, r1
     2d2:	1f be       	out	0x3f, r1	; 63
     2d4:	cf ef       	ldi	r28, 0xFF	; 255
     2d6:	d0 e4       	ldi	r29, 0x40	; 64
     2d8:	de bf       	out	0x3e, r29	; 62
     2da:	cd bf       	out	0x3d, r28	; 61

000002dc <__do_copy_data>:
     2dc:	19 e0       	ldi	r17, 0x09	; 9
     2de:	a0 e0       	ldi	r26, 0x00	; 0
     2e0:	b1 e0       	ldi	r27, 0x01	; 1
     2e2:	ee e8       	ldi	r30, 0x8E	; 142
     2e4:	ff e8       	ldi	r31, 0x8F	; 143
     2e6:	00 e0       	ldi	r16, 0x00	; 0
     2e8:	0b bf       	out	0x3b, r16	; 59
     2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <__do_copy_data+0x14>
     2ec:	07 90       	elpm	r0, Z+
     2ee:	0d 92       	st	X+, r0
     2f0:	aa 37       	cpi	r26, 0x7A	; 122
     2f2:	b1 07       	cpc	r27, r17
     2f4:	d9 f7       	brne	.-10     	; 0x2ec <__do_copy_data+0x10>

000002f6 <__do_clear_bss>:
     2f6:	2d e0       	ldi	r18, 0x0D	; 13
     2f8:	aa e7       	ldi	r26, 0x7A	; 122
     2fa:	b9 e0       	ldi	r27, 0x09	; 9
     2fc:	01 c0       	rjmp	.+2      	; 0x300 <.do_clear_bss_start>

000002fe <.do_clear_bss_loop>:
     2fe:	1d 92       	st	X+, r1

00000300 <.do_clear_bss_start>:
     300:	a9 3f       	cpi	r26, 0xF9	; 249
     302:	b2 07       	cpc	r27, r18
     304:	e1 f7       	brne	.-8      	; 0x2fe <.do_clear_bss_loop>

00000306 <__do_global_ctors>:
     306:	11 e0       	ldi	r17, 0x01	; 1
     308:	c7 e6       	ldi	r28, 0x67	; 103
     30a:	d1 e0       	ldi	r29, 0x01	; 1
     30c:	04 c0       	rjmp	.+8      	; 0x316 <__do_global_ctors+0x10>
     30e:	21 97       	sbiw	r28, 0x01	; 1
     310:	fe 01       	movw	r30, r28
     312:	0e 94 63 41 	call	0x82c6	; 0x82c6 <__tablejump2__>
     316:	cc 35       	cpi	r28, 0x5C	; 92
     318:	d1 07       	cpc	r29, r17
     31a:	c9 f7       	brne	.-14     	; 0x30e <__do_global_ctors+0x8>
     31c:	0e 94 91 3a 	call	0x7522	; 0x7522 <main>
     320:	0c 94 bb 47 	jmp	0x8f76	; 0x8f76 <__do_global_dtors>

00000324 <__bad_interrupt>:
     324:	6d ce       	rjmp	.-806    	; 0x0 <__vectors>

00000326 <_ZL11disable_ETHv>:
      if (rispostaGetTimbrature == "200"){ valida = 1; }
      _delay_ms(80);
    }
  }
  return valida;
}
     326:	44 9a       	sbi	0x08, 4	; 8
     328:	08 95       	ret

0000032a <_ZL13disable_FLASHv>:
     32a:	2c 9a       	sbi	0x05, 4	; 5
     32c:	08 95       	ret

0000032e <_ZN7TwoWire5writeEi>:
     32e:	dc 01       	movw	r26, r24
     330:	ed 91       	ld	r30, X+
     332:	fc 91       	ld	r31, X
     334:	01 90       	ld	r0, Z+
     336:	f0 81       	ld	r31, Z
     338:	e0 2d       	mov	r30, r0
     33a:	09 94       	ijmp

0000033c <_Z14initIOExpanderv>:
     33c:	89 ef       	ldi	r24, 0xF9	; 249
     33e:	9c e0       	ldi	r25, 0x0C	; 12
     340:	0e 94 e0 37 	call	0x6fc0	; 0x6fc0 <_ZN7TwoWire5beginEv>
     344:	60 e2       	ldi	r22, 0x20	; 32
     346:	89 ef       	ldi	r24, 0xF9	; 249
     348:	9c e0       	ldi	r25, 0x0C	; 12
     34a:	0e 94 f3 37 	call	0x6fe6	; 0x6fe6 <_ZN7TwoWire17beginTransmissionEh>
     34e:	61 e0       	ldi	r22, 0x01	; 1
     350:	70 e0       	ldi	r23, 0x00	; 0
     352:	89 ef       	ldi	r24, 0xF9	; 249
     354:	9c e0       	ldi	r25, 0x0C	; 12
     356:	eb df       	rcall	.-42     	; 0x32e <_ZN7TwoWire5writeEi>
     358:	63 ec       	ldi	r22, 0xC3	; 195
     35a:	70 e0       	ldi	r23, 0x00	; 0
     35c:	89 ef       	ldi	r24, 0xF9	; 249
     35e:	9c e0       	ldi	r25, 0x0C	; 12
     360:	e6 df       	rcall	.-52     	; 0x32e <_ZN7TwoWire5writeEi>
     362:	89 ef       	ldi	r24, 0xF9	; 249
     364:	9c e0       	ldi	r25, 0x0C	; 12
     366:	0e 94 74 38 	call	0x70e8	; 0x70e8 <_ZN7TwoWire15endTransmissionEv>
     36a:	60 e2       	ldi	r22, 0x20	; 32
     36c:	89 ef       	ldi	r24, 0xF9	; 249
     36e:	9c e0       	ldi	r25, 0x0C	; 12
     370:	0e 94 f3 37 	call	0x6fe6	; 0x6fe6 <_ZN7TwoWire17beginTransmissionEh>
     374:	62 e0       	ldi	r22, 0x02	; 2
     376:	70 e0       	ldi	r23, 0x00	; 0
     378:	89 ef       	ldi	r24, 0xF9	; 249
     37a:	9c e0       	ldi	r25, 0x0C	; 12
     37c:	d8 df       	rcall	.-80     	; 0x32e <_ZN7TwoWire5writeEi>
     37e:	60 e0       	ldi	r22, 0x00	; 0
     380:	70 e0       	ldi	r23, 0x00	; 0
     382:	89 ef       	ldi	r24, 0xF9	; 249
     384:	9c e0       	ldi	r25, 0x0C	; 12
     386:	d3 df       	rcall	.-90     	; 0x32e <_ZN7TwoWire5writeEi>
     388:	89 ef       	ldi	r24, 0xF9	; 249
     38a:	9c e0       	ldi	r25, 0x0C	; 12
     38c:	0e 94 74 38 	call	0x70e8	; 0x70e8 <_ZN7TwoWire15endTransmissionEv>
     390:	8f e3       	ldi	r24, 0x3F	; 63
     392:	9c e9       	ldi	r25, 0x9C	; 156
     394:	01 97       	sbiw	r24, 0x01	; 1
     396:	f1 f7       	brne	.-4      	; 0x394 <_Z14initIOExpanderv+0x58>
     398:	00 c0       	rjmp	.+0      	; 0x39a <_Z14initIOExpanderv+0x5e>
     39a:	00 00       	nop
     39c:	60 e2       	ldi	r22, 0x20	; 32
     39e:	89 ef       	ldi	r24, 0xF9	; 249
     3a0:	9c e0       	ldi	r25, 0x0C	; 12
     3a2:	0e 94 f3 37 	call	0x6fe6	; 0x6fe6 <_ZN7TwoWire17beginTransmissionEh>
     3a6:	63 e0       	ldi	r22, 0x03	; 3
     3a8:	70 e0       	ldi	r23, 0x00	; 0
     3aa:	89 ef       	ldi	r24, 0xF9	; 249
     3ac:	9c e0       	ldi	r25, 0x0C	; 12
     3ae:	bf df       	rcall	.-130    	; 0x32e <_ZN7TwoWire5writeEi>
     3b0:	6c e3       	ldi	r22, 0x3C	; 60
     3b2:	70 e0       	ldi	r23, 0x00	; 0
     3b4:	89 ef       	ldi	r24, 0xF9	; 249
     3b6:	9c e0       	ldi	r25, 0x0C	; 12
     3b8:	ba df       	rcall	.-140    	; 0x32e <_ZN7TwoWire5writeEi>
     3ba:	89 ef       	ldi	r24, 0xF9	; 249
     3bc:	9c e0       	ldi	r25, 0x0C	; 12
     3be:	0e 94 74 38 	call	0x70e8	; 0x70e8 <_ZN7TwoWire15endTransmissionEv>
     3c2:	8f e3       	ldi	r24, 0x3F	; 63
     3c4:	9c e9       	ldi	r25, 0x9C	; 156
     3c6:	01 97       	sbiw	r24, 0x01	; 1
     3c8:	f1 f7       	brne	.-4      	; 0x3c6 <_Z14initIOExpanderv+0x8a>
     3ca:	00 c0       	rjmp	.+0      	; 0x3cc <_Z14initIOExpanderv+0x90>
     3cc:	00 00       	nop
     3ce:	60 e2       	ldi	r22, 0x20	; 32
     3d0:	89 ef       	ldi	r24, 0xF9	; 249
     3d2:	9c e0       	ldi	r25, 0x0C	; 12
     3d4:	0e 94 f3 37 	call	0x6fe6	; 0x6fe6 <_ZN7TwoWire17beginTransmissionEh>
     3d8:	60 e0       	ldi	r22, 0x00	; 0
     3da:	70 e0       	ldi	r23, 0x00	; 0
     3dc:	89 ef       	ldi	r24, 0xF9	; 249
     3de:	9c e0       	ldi	r25, 0x0C	; 12
     3e0:	a6 df       	rcall	.-180    	; 0x32e <_ZN7TwoWire5writeEi>
     3e2:	89 ef       	ldi	r24, 0xF9	; 249
     3e4:	9c e0       	ldi	r25, 0x0C	; 12
     3e6:	0e 94 74 38 	call	0x70e8	; 0x70e8 <_ZN7TwoWire15endTransmissionEv>
     3ea:	89 ef       	ldi	r24, 0xF9	; 249
     3ec:	9c e0       	ldi	r25, 0x0C	; 12
     3ee:	0c 94 e0 37 	jmp	0x6fc0	; 0x6fc0 <_ZN7TwoWire5beginEv>

000003f2 <_Z11my_delay_msi>:
     3f2:	18 16       	cp	r1, r24
     3f4:	19 06       	cpc	r1, r25
     3f6:	44 f4       	brge	.+16     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     3f8:	ef e9       	ldi	r30, 0x9F	; 159
     3fa:	ff e0       	ldi	r31, 0x0F	; 15
     3fc:	31 97       	sbiw	r30, 0x01	; 1
     3fe:	f1 f7       	brne	.-4      	; 0x3fc <_Z11my_delay_msi+0xa>
     400:	00 c0       	rjmp	.+0      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     402:	00 00       	nop
     404:	01 97       	sbiw	r24, 0x01	; 1
     406:	f5 cf       	rjmp	.-22     	; 0x3f2 <_Z11my_delay_msi>
     408:	08 95       	ret

0000040a <_Z9printLinev>:
     40a:	cf 93       	push	r28
     40c:	8f e4       	ldi	r24, 0x4F	; 79
     40e:	9d e0       	ldi	r25, 0x0D	; 13
     410:	0e 94 16 3b 	call	0x762c	; 0x762c <_ZN5Print7printlnEv>
     414:	cd e7       	ldi	r28, 0x7D	; 125
     416:	60 ec       	ldi	r22, 0xC0	; 192
     418:	71 e0       	ldi	r23, 0x01	; 1
     41a:	8f e4       	ldi	r24, 0x4F	; 79
     41c:	9d e0       	ldi	r25, 0x0D	; 13
     41e:	0e 94 0e 3b 	call	0x761c	; 0x761c <_ZN5Print5printEPKc>
     422:	c1 50       	subi	r28, 0x01	; 1
     424:	c1 f7       	brne	.-16     	; 0x416 <_Z9printLinev+0xc>
     426:	8f e4       	ldi	r24, 0x4F	; 79
     428:	9d e0       	ldi	r25, 0x0D	; 13
     42a:	cf 91       	pop	r28
     42c:	0c 94 16 3b 	jmp	0x762c	; 0x762c <_ZN5Print7printlnEv>

00000430 <_Z8printTabh>:
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
     434:	d8 2f       	mov	r29, r24
     436:	c0 e0       	ldi	r28, 0x00	; 0
     438:	cd 17       	cp	r28, r29
     43a:	41 f0       	breq	.+16     	; 0x44c <_Z8printTabh+0x1c>
     43c:	62 ec       	ldi	r22, 0xC2	; 194
     43e:	71 e0       	ldi	r23, 0x01	; 1
     440:	8f e4       	ldi	r24, 0x4F	; 79
     442:	9d e0       	ldi	r25, 0x0D	; 13
     444:	0e 94 0e 3b 	call	0x761c	; 0x761c <_ZN5Print5printEPKc>
     448:	cf 5f       	subi	r28, 0xFF	; 255
     44a:	f6 cf       	rjmp	.-20     	; 0x438 <_Z8printTabh+0x8>
     44c:	df 91       	pop	r29
     44e:	cf 91       	pop	r28
     450:	08 95       	ret

00000452 <_Z4passb>:
     452:	cf 93       	push	r28
     454:	c8 2f       	mov	r28, r24
     456:	81 e0       	ldi	r24, 0x01	; 1
     458:	eb df       	rcall	.-42     	; 0x430 <_Z8printTabh>
     45a:	64 ec       	ldi	r22, 0xC4	; 196
     45c:	71 e0       	ldi	r23, 0x01	; 1
     45e:	8f e4       	ldi	r24, 0x4F	; 79
     460:	9d e0       	ldi	r25, 0x0D	; 13
     462:	0e 94 0e 3b 	call	0x761c	; 0x761c <_ZN5Print5printEPKc>
     466:	cc 23       	and	r28, r28
     468:	19 f0       	breq	.+6      	; 0x470 <_Z4passb+0x1e>
     46a:	68 ec       	ldi	r22, 0xC8	; 200
     46c:	71 e0       	ldi	r23, 0x01	; 1
     46e:	02 c0       	rjmp	.+4      	; 0x474 <_Z4passb+0x22>
     470:	6d ec       	ldi	r22, 0xCD	; 205
     472:	71 e0       	ldi	r23, 0x01	; 1
     474:	8f e4       	ldi	r24, 0x4F	; 79
     476:	9d e0       	ldi	r25, 0x0D	; 13
     478:	0e 94 0e 3b 	call	0x761c	; 0x761c <_ZN5Print5printEPKc>
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	cf 91       	pop	r28
     480:	d7 cf       	rjmp	.-82     	; 0x430 <_Z8printTabh>

00000482 <_Z13printUniqueIDv>:
     482:	4f 92       	push	r4
     484:	5f 92       	push	r5
     486:	6f 92       	push	r6
     488:	7f 92       	push	r7
     48a:	8f 92       	push	r8
     48c:	9f 92       	push	r9
     48e:	af 92       	push	r10
     490:	bf 92       	push	r11
     492:	cf 92       	push	r12
     494:	df 92       	push	r13
     496:	ef 92       	push	r14
     498:	ff 92       	push	r15
     49a:	0f 93       	push	r16
     49c:	1f 93       	push	r17
     49e:	cf 93       	push	r28
     4a0:	df 93       	push	r29
     4a2:	8a e7       	ldi	r24, 0x7A	; 122
     4a4:	99 e0       	ldi	r25, 0x09	; 9
     4a6:	0e 94 8f 2d 	call	0x5b1e	; 0x5b1e <_ZN8SPIFlash11getUniqueIDEv>
     4aa:	49 01       	movw	r8, r18
     4ac:	d4 2f       	mov	r29, r20
     4ae:	c5 2f       	mov	r28, r21
     4b0:	2b 01       	movw	r4, r22
     4b2:	3c 01       	movw	r6, r24
     4b4:	a0 e0       	ldi	r26, 0x00	; 0
     4b6:	0e 94 95 42 	call	0x852a	; 0x852a <__cmpdi2_s8>
     4ba:	09 f4       	brne	.+2      	; 0x4be <_Z13printUniqueIDv+0x3c>
     4bc:	60 c0       	rjmp	.+192    	; 0x57e <_Z13printUniqueIDv+0xfc>
     4be:	62 ed       	ldi	r22, 0xD2	; 210
     4c0:	71 e0       	ldi	r23, 0x01	; 1
     4c2:	8f e4       	ldi	r24, 0x4F	; 79
     4c4:	9d e0       	ldi	r25, 0x0D	; 13
     4c6:	0e 94 0e 3b 	call	0x761c	; 0x761c <_ZN5Print5printEPKc>
     4ca:	80 e4       	ldi	r24, 0x40	; 64
     4cc:	a8 2e       	mov	r10, r24
     4ce:	92 e4       	ldi	r25, 0x42	; 66
     4d0:	b9 2e       	mov	r11, r25
     4d2:	2f e0       	ldi	r18, 0x0F	; 15
     4d4:	c2 2e       	mov	r12, r18
     4d6:	d1 2c       	mov	r13, r1
     4d8:	e1 2c       	mov	r14, r1
     4da:	f1 2c       	mov	r15, r1
     4dc:	00 e0       	ldi	r16, 0x00	; 0
     4de:	10 e0       	ldi	r17, 0x00	; 0
     4e0:	94 01       	movw	r18, r8
     4e2:	4d 2f       	mov	r20, r29
     4e4:	5c 2f       	mov	r21, r28
     4e6:	b2 01       	movw	r22, r4
     4e8:	c3 01       	movw	r24, r6
     4ea:	0e 94 87 41 	call	0x830e	; 0x830e <__divdi3>
     4ee:	f2 2f       	mov	r31, r18
     4f0:	e3 2f       	mov	r30, r19
     4f2:	2a e0       	ldi	r18, 0x0A	; 10
     4f4:	30 e0       	ldi	r19, 0x00	; 0
     4f6:	cf 01       	movw	r24, r30
     4f8:	ba 01       	movw	r22, r20
     4fa:	49 2f       	mov	r20, r25
     4fc:	58 2f       	mov	r21, r24
     4fe:	8f e4       	ldi	r24, 0x4F	; 79
     500:	9d e0       	ldi	r25, 0x0D	; 13
     502:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN5Print5printEmi>
     506:	94 01       	movw	r18, r8
     508:	4d 2f       	mov	r20, r29
     50a:	5c 2f       	mov	r21, r28
     50c:	b2 01       	movw	r22, r4
     50e:	c3 01       	movw	r24, r6
     510:	0e 94 85 41 	call	0x830a	; 0x830a <__moddi3>
     514:	f2 2f       	mov	r31, r18
     516:	e3 2f       	mov	r30, r19
     518:	2a e0       	ldi	r18, 0x0A	; 10
     51a:	30 e0       	ldi	r19, 0x00	; 0
     51c:	cf 01       	movw	r24, r30
     51e:	ba 01       	movw	r22, r20
     520:	49 2f       	mov	r20, r25
     522:	58 2f       	mov	r21, r24
     524:	8f e4       	ldi	r24, 0x4F	; 79
     526:	9d e0       	ldi	r25, 0x0D	; 13
     528:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN5Print5printEmi>
     52c:	6e ed       	ldi	r22, 0xDE	; 222
     52e:	71 e0       	ldi	r23, 0x01	; 1
     530:	8f e4       	ldi	r24, 0x4F	; 79
     532:	9d e0       	ldi	r25, 0x0D	; 13
     534:	0e 94 0e 3b 	call	0x761c	; 0x761c <_ZN5Print5printEPKc>
     538:	69 e6       	ldi	r22, 0x69	; 105
     53a:	72 e0       	ldi	r23, 0x02	; 2
     53c:	8f e4       	ldi	r24, 0x4F	; 79
     53e:	9d e0       	ldi	r25, 0x0D	; 13
     540:	0e 94 0e 3b 	call	0x761c	; 0x761c <_ZN5Print5printEPKc>
     544:	94 01       	movw	r18, r8
     546:	4d 2f       	mov	r20, r29
     548:	5c 2f       	mov	r21, r28
     54a:	b2 01       	movw	r22, r4
     54c:	c3 01       	movw	r24, r6
     54e:	00 e2       	ldi	r16, 0x20	; 32
     550:	0e 94 6e 42 	call	0x84dc	; 0x84dc <__ashrdi3>
     554:	f2 2f       	mov	r31, r18
     556:	e3 2f       	mov	r30, r19
     558:	20 e1       	ldi	r18, 0x10	; 16
     55a:	30 e0       	ldi	r19, 0x00	; 0
     55c:	cf 01       	movw	r24, r30
     55e:	ba 01       	movw	r22, r20
     560:	49 2f       	mov	r20, r25
     562:	58 2f       	mov	r21, r24
     564:	8f e4       	ldi	r24, 0x4F	; 79
     566:	9d e0       	ldi	r25, 0x0D	; 13
     568:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN5Print5printEmi>
     56c:	20 e1       	ldi	r18, 0x10	; 16
     56e:	30 e0       	ldi	r19, 0x00	; 0
     570:	a4 01       	movw	r20, r8
     572:	6d 2f       	mov	r22, r29
     574:	7c 2f       	mov	r23, r28
     576:	8f e4       	ldi	r24, 0x4F	; 79
     578:	9d e0       	ldi	r25, 0x0D	; 13
     57a:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN5Print5printEmi>
     57e:	df 91       	pop	r29
     580:	cf 91       	pop	r28
     582:	1f 91       	pop	r17
     584:	0f 91       	pop	r16
     586:	ff 90       	pop	r15
     588:	ef 90       	pop	r14
     58a:	df 90       	pop	r13
     58c:	cf 90       	pop	r12
     58e:	bf 90       	pop	r11
     590:	af 90       	pop	r10
     592:	9f 90       	pop	r9
     594:	8f 90       	pop	r8
     596:	7f 90       	pop	r7
     598:	6f 90       	pop	r6
     59a:	5f 90       	pop	r5
     59c:	4f 90       	pop	r4
     59e:	35 cf       	rjmp	.-406    	; 0x40a <_Z9printLinev>

000005a0 <_Z16FlasheraseSectormj>:
     5a0:	cf 92       	push	r12
     5a2:	df 92       	push	r13
     5a4:	ef 92       	push	r14
     5a6:	ff 92       	push	r15
     5a8:	cf 93       	push	r28
     5aa:	df 93       	push	r29
     5ac:	6b 01       	movw	r12, r22
     5ae:	7c 01       	movw	r14, r24
     5b0:	ea 01       	movw	r28, r20
     5b2:	83 e0       	ldi	r24, 0x03	; 3
     5b4:	3d df       	rcall	.-390    	; 0x430 <_Z8printTabh>
     5b6:	61 ee       	ldi	r22, 0xE1	; 225
     5b8:	71 e0       	ldi	r23, 0x01	; 1
     5ba:	8f e4       	ldi	r24, 0x4F	; 79
     5bc:	9d e0       	ldi	r25, 0x0D	; 13
     5be:	0e 94 0e 3b 	call	0x761c	; 0x761c <_ZN5Print5printEPKc>
     5c2:	81 e0       	ldi	r24, 0x01	; 1
     5c4:	35 df       	rcall	.-406    	; 0x430 <_Z8printTabh>
     5c6:	b7 01       	movw	r22, r14
     5c8:	a6 01       	movw	r20, r12
     5ca:	8a e7       	ldi	r24, 0x7A	; 122
     5cc:	99 e0       	ldi	r25, 0x09	; 9
     5ce:	0e 94 81 30 	call	0x6102	; 0x6102 <_ZN8SPIFlash11eraseSectorEm>
     5d2:	88 23       	and	r24, r24
     5d4:	99 f0       	breq	.+38     	; 0x5fc <_Z16FlasheraseSectormj+0x5c>
     5d6:	81 e0       	ldi	r24, 0x01	; 1
     5d8:	3c df       	rcall	.-392    	; 0x452 <_Z4passb>
     5da:	6b ee       	ldi	r22, 0xEB	; 235
     5dc:	71 e0       	ldi	r23, 0x01	; 1
     5de:	8f e4       	ldi	r24, 0x4F	; 79
     5e0:	9d e0       	ldi	r25, 0x0D	; 13
     5e2:	0e 94 39 3b 	call	0x7672	; 0x7672 <_ZN5Print7printlnEPKc>
     5e6:	81 e0       	ldi	r24, 0x01	; 1
     5e8:	23 df       	rcall	.-442    	; 0x430 <_Z8printTabh>
     5ea:	0f df       	rcall	.-482    	; 0x40a <_Z9printLinev>
     5ec:	ce 01       	movw	r24, r28
     5ee:	df 91       	pop	r29
     5f0:	cf 91       	pop	r28
     5f2:	ff 90       	pop	r15
     5f4:	ef 90       	pop	r14
     5f6:	df 90       	pop	r13
     5f8:	cf 90       	pop	r12
     5fa:	fb ce       	rjmp	.-522    	; 0x3f2 <_Z11my_delay_msi>
     5fc:	80 e0       	ldi	r24, 0x00	; 0
     5fe:	df 91       	pop	r29
     600:	cf 91       	pop	r28
     602:	ff 90       	pop	r15
     604:	ef 90       	pop	r14
     606:	df 90       	pop	r13
     608:	cf 90       	pop	r12
     60a:	23 cf       	rjmp	.-442    	; 0x452 <_Z4passb>

0000060c <_Z15erogazioniSaverm6String>:
     60c:	8f 92       	push	r8
     60e:	9f 92       	push	r9
     610:	af 92       	push	r10
     612:	bf 92       	push	r11
     614:	ef 92       	push	r14
     616:	ff 92       	push	r15
     618:	0f 93       	push	r16
     61a:	cf 93       	push	r28
     61c:	df 93       	push	r29
     61e:	00 d0       	rcall	.+0      	; 0x620 <_Z15erogazioniSaverm6String+0x14>
     620:	00 d0       	rcall	.+0      	; 0x622 <_Z15erogazioniSaverm6String+0x16>
     622:	00 d0       	rcall	.+0      	; 0x624 <_Z15erogazioniSaverm6String+0x18>
     624:	cd b7       	in	r28, 0x3d	; 61
     626:	de b7       	in	r29, 0x3e	; 62
     628:	4b 01       	movw	r8, r22
     62a:	5c 01       	movw	r10, r24
     62c:	7a 01       	movw	r14, r20
     62e:	63 ec       	ldi	r22, 0xC3	; 195
     630:	71 e0       	ldi	r23, 0x01	; 1
     632:	ce 01       	movw	r24, r28
     634:	01 96       	adiw	r24, 0x01	; 1
     636:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <_ZN6StringC1EPKc>
     63a:	68 ef       	ldi	r22, 0xF8	; 248
     63c:	71 e0       	ldi	r23, 0x01	; 1
     63e:	c7 01       	movw	r24, r14
     640:	0e 94 5f 3f 	call	0x7ebe	; 0x7ebe <_ZNK6String6equalsEPKc>
     644:	81 11       	cpse	r24, r1
     646:	22 c0       	rjmp	.+68     	; 0x68c <_Z15erogazioniSaverm6String+0x80>
     648:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <addr_erog>
     64c:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <addr_erog+0x1>
     650:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <addr_erog+0x2>
     654:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <addr_erog+0x3>
     658:	00 e0       	ldi	r16, 0x00	; 0
     65a:	9e 01       	movw	r18, r28
     65c:	2f 5f       	subi	r18, 0xFF	; 255
     65e:	3f 4f       	sbci	r19, 0xFF	; 255
     660:	8a e7       	ldi	r24, 0x7A	; 122
     662:	99 e0       	ldi	r25, 0x09	; 9
     664:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <_ZN8SPIFlash7readStrEmR6Stringb>
     668:	6e ef       	ldi	r22, 0xFE	; 254
     66a:	71 e0       	ldi	r23, 0x01	; 1
     66c:	ce 01       	movw	r24, r28
     66e:	01 96       	adiw	r24, 0x01	; 1
     670:	0e 94 29 3f 	call	0x7e52	; 0x7e52 <_ZN6String6concatEPKc>
     674:	b7 01       	movw	r22, r14
     676:	ce 01       	movw	r24, r28
     678:	01 96       	adiw	r24, 0x01	; 1
     67a:	0e 94 23 3f 	call	0x7e46	; 0x7e46 <_ZN6String6concatERKS_>
     67e:	8f e1       	ldi	r24, 0x1F	; 31
     680:	9e e4       	ldi	r25, 0x4E	; 78
     682:	01 97       	sbiw	r24, 0x01	; 1
     684:	f1 f7       	brne	.-4      	; 0x682 <_Z15erogazioniSaverm6String+0x76>
     686:	00 c0       	rjmp	.+0      	; 0x688 <_Z15erogazioniSaverm6String+0x7c>
     688:	00 00       	nop
     68a:	05 c0       	rjmp	.+10     	; 0x696 <_Z15erogazioniSaverm6String+0x8a>
     68c:	b7 01       	movw	r22, r14
     68e:	ce 01       	movw	r24, r28
     690:	01 96       	adiw	r24, 0x01	; 1
     692:	0e 94 36 3e 	call	0x7c6c	; 0x7c6c <_ZN6StringaSERKS_>
     696:	44 ef       	ldi	r20, 0xF4	; 244
     698:	51 e0       	ldi	r21, 0x01	; 1
     69a:	c5 01       	movw	r24, r10
     69c:	b4 01       	movw	r22, r8
     69e:	80 df       	rcall	.-256    	; 0x5a0 <_Z16FlasheraseSectormj>
     6a0:	8f e1       	ldi	r24, 0x1F	; 31
     6a2:	9e e4       	ldi	r25, 0x4E	; 78
     6a4:	01 97       	sbiw	r24, 0x01	; 1
     6a6:	f1 f7       	brne	.-4      	; 0x6a4 <_Z15erogazioniSaverm6String+0x98>
     6a8:	00 c0       	rjmp	.+0      	; 0x6aa <_Z15erogazioniSaverm6String+0x9e>
     6aa:	00 00       	nop
     6ac:	01 e0       	ldi	r16, 0x01	; 1
     6ae:	9e 01       	movw	r18, r28
     6b0:	2f 5f       	subi	r18, 0xFF	; 255
     6b2:	3f 4f       	sbci	r19, 0xFF	; 255
     6b4:	b5 01       	movw	r22, r10
     6b6:	a4 01       	movw	r20, r8
     6b8:	8a e7       	ldi	r24, 0x7A	; 122
     6ba:	99 e0       	ldi	r25, 0x09	; 9
     6bc:	0e 94 bd 2e 	call	0x5d7a	; 0x5d7a <_ZN8SPIFlash8writeStrEmR6Stringb>
     6c0:	88 23       	and	r24, r24
     6c2:	71 f0       	breq	.+28     	; 0x6e0 <_Z15erogazioniSaverm6String+0xd4>
     6c4:	63 e0       	ldi	r22, 0x03	; 3
     6c6:	72 e0       	ldi	r23, 0x02	; 2
     6c8:	8f e4       	ldi	r24, 0x4F	; 79
     6ca:	9d e0       	ldi	r25, 0x0D	; 13
     6cc:	0e 94 0e 3b 	call	0x761c	; 0x761c <_ZN5Print5printEPKc>
     6d0:	be 01       	movw	r22, r28
     6d2:	6f 5f       	subi	r22, 0xFF	; 255
     6d4:	7f 4f       	sbci	r23, 0xFF	; 255
     6d6:	8f e4       	ldi	r24, 0x4F	; 79
     6d8:	9d e0       	ldi	r25, 0x0D	; 13
     6da:	0e 94 29 3b 	call	0x7652	; 0x7652 <_ZN5Print7printlnERK6String>
     6de:	95 de       	rcall	.-726    	; 0x40a <_Z9printLinev>
     6e0:	ce 01       	movw	r24, r28
     6e2:	01 96       	adiw	r24, 0x01	; 1
     6e4:	0e 94 78 3d 	call	0x7af0	; 0x7af0 <_ZN6StringD1Ev>
     6e8:	26 96       	adiw	r28, 0x06	; 6
     6ea:	0f b6       	in	r0, 0x3f	; 63
     6ec:	f8 94       	cli
     6ee:	de bf       	out	0x3e, r29	; 62
     6f0:	0f be       	out	0x3f, r0	; 63
     6f2:	cd bf       	out	0x3d, r28	; 61
     6f4:	df 91       	pop	r29
     6f6:	cf 91       	pop	r28
     6f8:	0f 91       	pop	r16
     6fa:	ff 90       	pop	r15
     6fc:	ef 90       	pop	r14
     6fe:	bf 90       	pop	r11
     700:	af 90       	pop	r10
     702:	9f 90       	pop	r9
     704:	8f 90       	pop	r8
     706:	08 95       	ret

00000708 <_Z14FlashpowerDownj>:
     708:	cf 93       	push	r28
     70a:	df 93       	push	r29
     70c:	ec 01       	movw	r28, r24
     70e:	83 e0       	ldi	r24, 0x03	; 3
     710:	8f de       	rcall	.-738    	; 0x430 <_Z8printTabh>
     712:	68 e1       	ldi	r22, 0x18	; 24
     714:	72 e0       	ldi	r23, 0x02	; 2
     716:	8f e4       	ldi	r24, 0x4F	; 79
     718:	9d e0       	ldi	r25, 0x0D	; 13
     71a:	0e 94 0e 3b 	call	0x761c	; 0x761c <_ZN5Print5printEPKc>
     71e:	81 e0       	ldi	r24, 0x01	; 1
     720:	87 de       	rcall	.-754    	; 0x430 <_Z8printTabh>
     722:	8a e7       	ldi	r24, 0x7A	; 122
     724:	99 e0       	ldi	r25, 0x09	; 9
     726:	0e 94 df 30 	call	0x61be	; 0x61be <_ZN8SPIFlash9powerDownEv>
     72a:	88 23       	and	r24, r24
     72c:	79 f0       	breq	.+30     	; 0x74c <_Z14FlashpowerDownj+0x44>
     72e:	81 e0       	ldi	r24, 0x01	; 1
     730:	90 de       	rcall	.-736    	; 0x452 <_Z4passb>
     732:	63 e2       	ldi	r22, 0x23	; 35
     734:	72 e0       	ldi	r23, 0x02	; 2
     736:	8f e4       	ldi	r24, 0x4F	; 79
     738:	9d e0       	ldi	r25, 0x0D	; 13
     73a:	0e 94 0e 3b 	call	0x761c	; 0x761c <_ZN5Print5printEPKc>
     73e:	ce 01       	movw	r24, r28
     740:	58 de       	rcall	.-848    	; 0x3f2 <_Z11my_delay_msi>
     742:	81 e0       	ldi	r24, 0x01	; 1
     744:	75 de       	rcall	.-790    	; 0x430 <_Z8printTabh>
     746:	df 91       	pop	r29
     748:	cf 91       	pop	r28
     74a:	5f ce       	rjmp	.-834    	; 0x40a <_Z9printLinev>
     74c:	80 e0       	ldi	r24, 0x00	; 0
     74e:	81 de       	rcall	.-766    	; 0x452 <_Z4passb>
     750:	82 e0       	ldi	r24, 0x02	; 2
     752:	df 91       	pop	r29
     754:	cf 91       	pop	r28
     756:	6c ce       	rjmp	.-808    	; 0x430 <_Z8printTabh>

00000758 <_Z12FlashpowerUpj>:
     758:	cf 93       	push	r28
     75a:	df 93       	push	r29
     75c:	ec 01       	movw	r28, r24
     75e:	83 e0       	ldi	r24, 0x03	; 3
     760:	67 de       	rcall	.-818    	; 0x430 <_Z8printTabh>
     762:	61 e3       	ldi	r22, 0x31	; 49
     764:	72 e0       	ldi	r23, 0x02	; 2
     766:	8f e4       	ldi	r24, 0x4F	; 79
     768:	9d e0       	ldi	r25, 0x0D	; 13
     76a:	0e 94 0e 3b 	call	0x761c	; 0x761c <_ZN5Print5printEPKc>
     76e:	81 e0       	ldi	r24, 0x01	; 1
     770:	5f de       	rcall	.-834    	; 0x430 <_Z8printTabh>
     772:	8a e7       	ldi	r24, 0x7A	; 122
     774:	99 e0       	ldi	r25, 0x09	; 9
     776:	0e 94 09 31 	call	0x6212	; 0x6212 <_ZN8SPIFlash7powerUpEv>
     77a:	88 23       	and	r24, r24
     77c:	79 f0       	breq	.+30     	; 0x79c <_Z12FlashpowerUpj+0x44>
     77e:	81 e0       	ldi	r24, 0x01	; 1
     780:	68 de       	rcall	.-816    	; 0x452 <_Z4passb>
     782:	6a e3       	ldi	r22, 0x3A	; 58
     784:	72 e0       	ldi	r23, 0x02	; 2
     786:	8f e4       	ldi	r24, 0x4F	; 79
     788:	9d e0       	ldi	r25, 0x0D	; 13
     78a:	0e 94 0e 3b 	call	0x761c	; 0x761c <_ZN5Print5printEPKc>
     78e:	ce 01       	movw	r24, r28
     790:	30 de       	rcall	.-928    	; 0x3f2 <_Z11my_delay_msi>
     792:	81 e0       	ldi	r24, 0x01	; 1
     794:	4d de       	rcall	.-870    	; 0x430 <_Z8printTabh>
     796:	df 91       	pop	r29
     798:	cf 91       	pop	r28
     79a:	37 ce       	rjmp	.-914    	; 0x40a <_Z9printLinev>
     79c:	80 e0       	ldi	r24, 0x00	; 0
     79e:	59 de       	rcall	.-846    	; 0x452 <_Z4passb>
     7a0:	82 e0       	ldi	r24, 0x02	; 2
     7a2:	df 91       	pop	r29
     7a4:	cf 91       	pop	r28
     7a6:	44 ce       	rjmp	.-888    	; 0x430 <_Z8printTabh>

000007a8 <_Z13eraseChipTestj>:
     7a8:	cf 93       	push	r28
     7aa:	df 93       	push	r29
     7ac:	ec 01       	movw	r28, r24
     7ae:	83 e0       	ldi	r24, 0x03	; 3
     7b0:	3f de       	rcall	.-898    	; 0x430 <_Z8printTabh>
     7b2:	66 e4       	ldi	r22, 0x46	; 70
     7b4:	72 e0       	ldi	r23, 0x02	; 2
     7b6:	8f e4       	ldi	r24, 0x4F	; 79
     7b8:	9d e0       	ldi	r25, 0x0D	; 13
     7ba:	0e 94 0e 3b 	call	0x761c	; 0x761c <_ZN5Print5printEPKc>
     7be:	81 e0       	ldi	r24, 0x01	; 1
     7c0:	37 de       	rcall	.-914    	; 0x430 <_Z8printTabh>
     7c2:	8a e7       	ldi	r24, 0x7A	; 122
     7c4:	99 e0       	ldi	r25, 0x09	; 9
     7c6:	0e 94 b5 30 	call	0x616a	; 0x616a <_ZN8SPIFlash9eraseChipEv>
     7ca:	88 23       	and	r24, r24
     7cc:	79 f0       	breq	.+30     	; 0x7ec <_Z13eraseChipTestj+0x44>
     7ce:	81 e0       	ldi	r24, 0x01	; 1
     7d0:	40 de       	rcall	.-896    	; 0x452 <_Z4passb>
     7d2:	61 e5       	ldi	r22, 0x51	; 81
     7d4:	72 e0       	ldi	r23, 0x02	; 2
     7d6:	8f e4       	ldi	r24, 0x4F	; 79
     7d8:	9d e0       	ldi	r25, 0x0D	; 13
     7da:	0e 94 0e 3b 	call	0x761c	; 0x761c <_ZN5Print5printEPKc>
     7de:	ce 01       	movw	r24, r28
     7e0:	08 de       	rcall	.-1008   	; 0x3f2 <_Z11my_delay_msi>
     7e2:	81 e0       	ldi	r24, 0x01	; 1
     7e4:	25 de       	rcall	.-950    	; 0x430 <_Z8printTabh>
     7e6:	df 91       	pop	r29
     7e8:	cf 91       	pop	r28
     7ea:	0f ce       	rjmp	.-994    	; 0x40a <_Z9printLinev>
     7ec:	80 e0       	ldi	r24, 0x00	; 0
     7ee:	df 91       	pop	r29
     7f0:	cf 91       	pop	r28
     7f2:	2f ce       	rjmp	.-930    	; 0x452 <_Z4passb>

000007f4 <_Z5getIDv>:
     7f4:	8f 92       	push	r8
     7f6:	9f 92       	push	r9
     7f8:	af 92       	push	r10
     7fa:	bf 92       	push	r11
     7fc:	cf 92       	push	r12
     7fe:	df 92       	push	r13
     800:	ef 92       	push	r14
     802:	ff 92       	push	r15
     804:	8f e4       	ldi	r24, 0x4F	; 79
     806:	9d e0       	ldi	r25, 0x0D	; 13
     808:	0e 94 16 3b 	call	0x762c	; 0x762c <_ZN5Print7printlnEv>
     80c:	8a e7       	ldi	r24, 0x7A	; 122
     80e:	99 e0       	ldi	r25, 0x09	; 9
     810:	0e 94 7d 2d 	call	0x5afa	; 0x5afa <_ZN8SPIFlash10getJEDECIDEv>
     814:	6b 01       	movw	r12, r22
     816:	7c 01       	movw	r14, r24
     818:	67 2b       	or	r22, r23
     81a:	68 2b       	or	r22, r24
     81c:	69 2b       	or	r22, r25
     81e:	09 f4       	brne	.+2      	; 0x822 <_Z5getIDv+0x2e>
     820:	b3 c0       	rjmp	.+358    	; 0x988 <_Z5getIDv+0x194>
     822:	6f e5       	ldi	r22, 0x5F	; 95
     824:	72 e0       	ldi	r23, 0x02	; 2
     826:	8f e4       	ldi	r24, 0x4F	; 79
     828:	9d e0       	ldi	r25, 0x0D	; 13
     82a:	0e 94 0e 3b 	call	0x761c	; 0x761c <_ZN5Print5printEPKc>
     82e:	20 e1       	ldi	r18, 0x10	; 16
     830:	30 e0       	ldi	r19, 0x00	; 0
     832:	b7 01       	movw	r22, r14
     834:	a6 01       	movw	r20, r12
     836:	8f e4       	ldi	r24, 0x4F	; 79
     838:	9d e0       	ldi	r25, 0x0D	; 13
     83a:	0e 94 b2 3b 	call	0x7764	; 0x7764 <_ZN5Print7printlnEmi>
     83e:	6c e6       	ldi	r22, 0x6C	; 108
     840:	72 e0       	ldi	r23, 0x02	; 2
     842:	8f e4       	ldi	r24, 0x4F	; 79
     844:	9d e0       	ldi	r25, 0x0D	; 13
     846:	0e 94 0e 3b 	call	0x761c	; 0x761c <_ZN5Print5printEPKc>
     84a:	b7 01       	movw	r22, r14
     84c:	88 27       	eor	r24, r24
     84e:	99 27       	eor	r25, r25
     850:	40 e1       	ldi	r20, 0x10	; 16
     852:	50 e0       	ldi	r21, 0x00	; 0
     854:	8f e4       	ldi	r24, 0x4F	; 79
     856:	9d e0       	ldi	r25, 0x0D	; 13
     858:	0e 94 a2 3b 	call	0x7744	; 0x7744 <_ZN5Print7printlnEhi>
     85c:	67 e7       	ldi	r22, 0x77	; 119
     85e:	72 e0       	ldi	r23, 0x02	; 2
     860:	8f e4       	ldi	r24, 0x4F	; 79
     862:	9d e0       	ldi	r25, 0x0D	; 13
     864:	0e 94 0e 3b 	call	0x761c	; 0x761c <_ZN5Print5printEPKc>
     868:	8d 2c       	mov	r8, r13
     86a:	9e 2c       	mov	r9, r14
     86c:	af 2c       	mov	r10, r15
     86e:	bb 24       	eor	r11, r11
     870:	40 e1       	ldi	r20, 0x10	; 16
     872:	50 e0       	ldi	r21, 0x00	; 0
     874:	68 2d       	mov	r22, r8
     876:	8f e4       	ldi	r24, 0x4F	; 79
     878:	9d e0       	ldi	r25, 0x0D	; 13
     87a:	0e 94 a2 3b 	call	0x7744	; 0x7744 <_ZN5Print7printlnEhi>
     87e:	65 e8       	ldi	r22, 0x85	; 133
     880:	72 e0       	ldi	r23, 0x02	; 2
     882:	8f e4       	ldi	r24, 0x4F	; 79
     884:	9d e0       	ldi	r25, 0x0D	; 13
     886:	0e 94 0e 3b 	call	0x761c	; 0x761c <_ZN5Print5printEPKc>
     88a:	8a e7       	ldi	r24, 0x7A	; 122
     88c:	99 e0       	ldi	r25, 0x09	; 9
     88e:	0e 94 66 2d 	call	0x5acc	; 0x5acc <_ZN8SPIFlash11getCapacityEv>
     892:	ab 01       	movw	r20, r22
     894:	bc 01       	movw	r22, r24
     896:	2a e0       	ldi	r18, 0x0A	; 10
     898:	30 e0       	ldi	r19, 0x00	; 0
     89a:	8f e4       	ldi	r24, 0x4F	; 79
     89c:	9d e0       	ldi	r25, 0x0D	; 13
     89e:	0e 94 b2 3b 	call	0x7764	; 0x7764 <_ZN5Print7printlnEmi>
     8a2:	60 e9       	ldi	r22, 0x90	; 144
     8a4:	72 e0       	ldi	r23, 0x02	; 2
     8a6:	8f e4       	ldi	r24, 0x4F	; 79
     8a8:	9d e0       	ldi	r25, 0x0D	; 13
     8aa:	0e 94 0e 3b 	call	0x761c	; 0x761c <_ZN5Print5printEPKc>
     8ae:	8a e7       	ldi	r24, 0x7A	; 122
     8b0:	99 e0       	ldi	r25, 0x09	; 9
     8b2:	0e 94 6c 2d 	call	0x5ad8	; 0x5ad8 <_ZN8SPIFlash10getMaxPageEv>
     8b6:	ab 01       	movw	r20, r22
     8b8:	bc 01       	movw	r22, r24
     8ba:	2a e0       	ldi	r18, 0x0A	; 10
     8bc:	30 e0       	ldi	r19, 0x00	; 0
     8be:	8f e4       	ldi	r24, 0x4F	; 79
     8c0:	9d e0       	ldi	r25, 0x0D	; 13
     8c2:	0e 94 b2 3b 	call	0x7764	; 0x7764 <_ZN5Print7printlnEmi>
     8c6:	dd dd       	rcall	.-1094   	; 0x482 <_Z13printUniqueIDv>
     8c8:	80 ec       	ldi	r24, 0xC0	; 192
     8ca:	9b e0       	ldi	r25, 0x0B	; 11
     8cc:	0e 94 98 2a 	call	0x5530	; 0x5530 <_ZN3LCD5clearEv>
     8d0:	6f e5       	ldi	r22, 0x5F	; 95
     8d2:	72 e0       	ldi	r23, 0x02	; 2
     8d4:	80 ec       	ldi	r24, 0xC0	; 192
     8d6:	9b e0       	ldi	r25, 0x0B	; 11
     8d8:	0e 94 0e 3b 	call	0x761c	; 0x761c <_ZN5Print5printEPKc>
     8dc:	20 e1       	ldi	r18, 0x10	; 16
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	b7 01       	movw	r22, r14
     8e2:	a6 01       	movw	r20, r12
     8e4:	80 ec       	ldi	r24, 0xC0	; 192
     8e6:	9b e0       	ldi	r25, 0x0B	; 11
     8e8:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN5Print5printEmi>
     8ec:	41 e0       	ldi	r20, 0x01	; 1
     8ee:	60 e0       	ldi	r22, 0x00	; 0
     8f0:	80 ec       	ldi	r24, 0xC0	; 192
     8f2:	9b e0       	ldi	r25, 0x0B	; 11
     8f4:	0e 94 9e 2a 	call	0x553c	; 0x553c <_ZN3LCD9setCursorEhh>
     8f8:	6c e9       	ldi	r22, 0x9C	; 156
     8fa:	72 e0       	ldi	r23, 0x02	; 2
     8fc:	80 ec       	ldi	r24, 0xC0	; 192
     8fe:	9b e0       	ldi	r25, 0x0B	; 11
     900:	0e 94 0e 3b 	call	0x761c	; 0x761c <_ZN5Print5printEPKc>
     904:	8a e7       	ldi	r24, 0x7A	; 122
     906:	99 e0       	ldi	r25, 0x09	; 9
     908:	0e 94 66 2d 	call	0x5acc	; 0x5acc <_ZN8SPIFlash11getCapacityEv>
     90c:	ab 01       	movw	r20, r22
     90e:	bc 01       	movw	r22, r24
     910:	2a e0       	ldi	r18, 0x0A	; 10
     912:	30 e0       	ldi	r19, 0x00	; 0
     914:	80 ec       	ldi	r24, 0xC0	; 192
     916:	9b e0       	ldi	r25, 0x0B	; 11
     918:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN5Print5printEmi>
     91c:	42 e0       	ldi	r20, 0x02	; 2
     91e:	60 e0       	ldi	r22, 0x00	; 0
     920:	80 ec       	ldi	r24, 0xC0	; 192
     922:	9b e0       	ldi	r25, 0x0B	; 11
     924:	0e 94 9e 2a 	call	0x553c	; 0x553c <_ZN3LCD9setCursorEhh>
     928:	67 e7       	ldi	r22, 0x77	; 119
     92a:	72 e0       	ldi	r23, 0x02	; 2
     92c:	80 ec       	ldi	r24, 0xC0	; 192
     92e:	9b e0       	ldi	r25, 0x0B	; 11
     930:	0e 94 0e 3b 	call	0x761c	; 0x761c <_ZN5Print5printEPKc>
     934:	40 e1       	ldi	r20, 0x10	; 16
     936:	50 e0       	ldi	r21, 0x00	; 0
     938:	68 2d       	mov	r22, r8
     93a:	80 ec       	ldi	r24, 0xC0	; 192
     93c:	9b e0       	ldi	r25, 0x0B	; 11
     93e:	0e 94 9c 3b 	call	0x7738	; 0x7738 <_ZN5Print5printEhi>
     942:	43 e0       	ldi	r20, 0x03	; 3
     944:	60 e0       	ldi	r22, 0x00	; 0
     946:	80 ec       	ldi	r24, 0xC0	; 192
     948:	9b e0       	ldi	r25, 0x0B	; 11
     94a:	0e 94 9e 2a 	call	0x553c	; 0x553c <_ZN3LCD9setCursorEhh>
     94e:	60 e9       	ldi	r22, 0x90	; 144
     950:	72 e0       	ldi	r23, 0x02	; 2
     952:	80 ec       	ldi	r24, 0xC0	; 192
     954:	9b e0       	ldi	r25, 0x0B	; 11
     956:	0e 94 0e 3b 	call	0x761c	; 0x761c <_ZN5Print5printEPKc>
     95a:	8a e7       	ldi	r24, 0x7A	; 122
     95c:	99 e0       	ldi	r25, 0x09	; 9
     95e:	0e 94 6c 2d 	call	0x5ad8	; 0x5ad8 <_ZN8SPIFlash10getMaxPageEv>
     962:	ab 01       	movw	r20, r22
     964:	bc 01       	movw	r22, r24
     966:	2a e0       	ldi	r18, 0x0A	; 10
     968:	30 e0       	ldi	r19, 0x00	; 0
     96a:	80 ec       	ldi	r24, 0xC0	; 192
     96c:	9b e0       	ldi	r25, 0x0B	; 11
     96e:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN5Print5printEmi>
     972:	2f ef       	ldi	r18, 0xFF	; 255
     974:	83 ed       	ldi	r24, 0xD3	; 211
     976:	90 e3       	ldi	r25, 0x30	; 48
     978:	21 50       	subi	r18, 0x01	; 1
     97a:	80 40       	sbci	r24, 0x00	; 0
     97c:	90 40       	sbci	r25, 0x00	; 0
     97e:	e1 f7       	brne	.-8      	; 0x978 <_Z5getIDv+0x184>
     980:	00 c0       	rjmp	.+0      	; 0x982 <_Z5getIDv+0x18e>
     982:	00 00       	nop
     984:	81 e0       	ldi	r24, 0x01	; 1
     986:	01 c0       	rjmp	.+2      	; 0x98a <_Z5getIDv+0x196>
     988:	80 e0       	ldi	r24, 0x00	; 0
     98a:	ff 90       	pop	r15
     98c:	ef 90       	pop	r14
     98e:	df 90       	pop	r13
     990:	cf 90       	pop	r12
     992:	bf 90       	pop	r11
     994:	af 90       	pop	r10
     996:	9f 90       	pop	r9
     998:	8f 90       	pop	r8
     99a:	08 95       	ret

0000099c <_Z10leggiRighev>:
     99c:	60 e2       	ldi	r22, 0x20	; 32
     99e:	89 ef       	ldi	r24, 0xF9	; 249
     9a0:	9c e0       	ldi	r25, 0x0C	; 12
     9a2:	0e 94 f3 37 	call	0x6fe6	; 0x6fe6 <_ZN7TwoWire17beginTransmissionEh>
     9a6:	63 e0       	ldi	r22, 0x03	; 3
     9a8:	70 e0       	ldi	r23, 0x00	; 0
     9aa:	89 ef       	ldi	r24, 0xF9	; 249
     9ac:	9c e0       	ldi	r25, 0x0C	; 12
     9ae:	bf dc       	rcall	.-1666   	; 0x32e <_ZN7TwoWire5writeEi>
     9b0:	63 ec       	ldi	r22, 0xC3	; 195
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	89 ef       	ldi	r24, 0xF9	; 249
     9b6:	9c e0       	ldi	r25, 0x0C	; 12
     9b8:	ba dc       	rcall	.-1676   	; 0x32e <_ZN7TwoWire5writeEi>
     9ba:	89 ef       	ldi	r24, 0xF9	; 249
     9bc:	9c e0       	ldi	r25, 0x0C	; 12
     9be:	0e 94 74 38 	call	0x70e8	; 0x70e8 <_ZN7TwoWire15endTransmissionEv>
     9c2:	8f e1       	ldi	r24, 0x1F	; 31
     9c4:	9e e4       	ldi	r25, 0x4E	; 78
     9c6:	01 97       	sbiw	r24, 0x01	; 1
     9c8:	f1 f7       	brne	.-4      	; 0x9c6 <_Z10leggiRighev+0x2a>
     9ca:	00 c0       	rjmp	.+0      	; 0x9cc <_Z10leggiRighev+0x30>
     9cc:	00 00       	nop
     9ce:	08 95       	ret

000009d0 <_Z12leggiColonnev>:
     9d0:	60 e2       	ldi	r22, 0x20	; 32
     9d2:	89 ef       	ldi	r24, 0xF9	; 249
     9d4:	9c e0       	ldi	r25, 0x0C	; 12
     9d6:	0e 94 f3 37 	call	0x6fe6	; 0x6fe6 <_ZN7TwoWire17beginTransmissionEh>
     9da:	63 e0       	ldi	r22, 0x03	; 3
     9dc:	70 e0       	ldi	r23, 0x00	; 0
     9de:	89 ef       	ldi	r24, 0xF9	; 249
     9e0:	9c e0       	ldi	r25, 0x0C	; 12
     9e2:	a5 dc       	rcall	.-1718   	; 0x32e <_ZN7TwoWire5writeEi>
     9e4:	6c e3       	ldi	r22, 0x3C	; 60
     9e6:	70 e0       	ldi	r23, 0x00	; 0
     9e8:	89 ef       	ldi	r24, 0xF9	; 249
     9ea:	9c e0       	ldi	r25, 0x0C	; 12
     9ec:	a0 dc       	rcall	.-1728   	; 0x32e <_ZN7TwoWire5writeEi>
     9ee:	89 ef       	ldi	r24, 0xF9	; 249
     9f0:	9c e0       	ldi	r25, 0x0C	; 12
     9f2:	0e 94 74 38 	call	0x70e8	; 0x70e8 <_ZN7TwoWire15endTransmissionEv>
     9f6:	8f e1       	ldi	r24, 0x1F	; 31
     9f8:	9e e4       	ldi	r25, 0x4E	; 78
     9fa:	01 97       	sbiw	r24, 0x01	; 1
     9fc:	f1 f7       	brne	.-4      	; 0x9fa <_Z12leggiColonnev+0x2a>
     9fe:	00 c0       	rjmp	.+0      	; 0xa00 <_Z12leggiColonnev+0x30>
     a00:	00 00       	nop
     a02:	08 95       	ret

00000a04 <_Z17leggi_IP_REGISTERv>:
     a04:	60 e2       	ldi	r22, 0x20	; 32
     a06:	89 ef       	ldi	r24, 0xF9	; 249
     a08:	9c e0       	ldi	r25, 0x0C	; 12
     a0a:	0e 94 f3 37 	call	0x6fe6	; 0x6fe6 <_ZN7TwoWire17beginTransmissionEh>
     a0e:	60 e0       	ldi	r22, 0x00	; 0
     a10:	70 e0       	ldi	r23, 0x00	; 0
     a12:	89 ef       	ldi	r24, 0xF9	; 249
     a14:	9c e0       	ldi	r25, 0x0C	; 12
     a16:	8b dc       	rcall	.-1770   	; 0x32e <_ZN7TwoWire5writeEi>
     a18:	89 ef       	ldi	r24, 0xF9	; 249
     a1a:	9c e0       	ldi	r25, 0x0C	; 12
     a1c:	0e 94 74 38 	call	0x70e8	; 0x70e8 <_ZN7TwoWire15endTransmissionEv>
     a20:	8f e1       	ldi	r24, 0x1F	; 31
     a22:	9e e4       	ldi	r25, 0x4E	; 78
     a24:	01 97       	sbiw	r24, 0x01	; 1
     a26:	f1 f7       	brne	.-4      	; 0xa24 <_Z17leggi_IP_REGISTERv+0x20>
     a28:	00 c0       	rjmp	.+0      	; 0xa2a <_Z17leggi_IP_REGISTERv+0x26>
     a2a:	00 00       	nop
     a2c:	08 95       	ret

00000a2e <_Z17leggi_OP_REGISTERv>:
     a2e:	60 e2       	ldi	r22, 0x20	; 32
     a30:	89 ef       	ldi	r24, 0xF9	; 249
     a32:	9c e0       	ldi	r25, 0x0C	; 12
     a34:	0e 94 f3 37 	call	0x6fe6	; 0x6fe6 <_ZN7TwoWire17beginTransmissionEh>
     a38:	61 e0       	ldi	r22, 0x01	; 1
     a3a:	70 e0       	ldi	r23, 0x00	; 0
     a3c:	89 ef       	ldi	r24, 0xF9	; 249
     a3e:	9c e0       	ldi	r25, 0x0C	; 12
     a40:	76 dc       	rcall	.-1812   	; 0x32e <_ZN7TwoWire5writeEi>
     a42:	89 ef       	ldi	r24, 0xF9	; 249
     a44:	9c e0       	ldi	r25, 0x0C	; 12
     a46:	0e 94 74 38 	call	0x70e8	; 0x70e8 <_ZN7TwoWire15endTransmissionEv>
     a4a:	8f e1       	ldi	r24, 0x1F	; 31
     a4c:	9e e4       	ldi	r25, 0x4E	; 78
     a4e:	01 97       	sbiw	r24, 0x01	; 1
     a50:	f1 f7       	brne	.-4      	; 0xa4e <_Z17leggi_OP_REGISTERv+0x20>
     a52:	00 c0       	rjmp	.+0      	; 0xa54 <_Z17leggi_OP_REGISTERv+0x26>
     a54:	00 00       	nop
     a56:	08 95       	ret

00000a58 <_Z10displayLCDP6Stringii>:
     a58:	cf 92       	push	r12
     a5a:	df 92       	push	r13
     a5c:	ef 92       	push	r14
     a5e:	ff 92       	push	r15
     a60:	0f 93       	push	r16
     a62:	1f 93       	push	r17
     a64:	cf 93       	push	r28
     a66:	df 93       	push	r29
     a68:	cd b7       	in	r28, 0x3d	; 61
     a6a:	de b7       	in	r29, 0x3e	; 62
     a6c:	2c 97       	sbiw	r28, 0x0c	; 12
     a6e:	0f b6       	in	r0, 0x3f	; 63
     a70:	f8 94       	cli
     a72:	de bf       	out	0x3e, r29	; 62
     a74:	0f be       	out	0x3f, r0	; 63
     a76:	cd bf       	out	0x3d, r28	; 61
     a78:	8c 01       	movw	r16, r24
     a7a:	6b 01       	movw	r12, r22
     a7c:	7a 01       	movw	r14, r20
     a7e:	80 ec       	ldi	r24, 0xC0	; 192
     a80:	9b e0       	ldi	r25, 0x0B	; 11
     a82:	0e 94 98 2a 	call	0x5530	; 0x5530 <_ZN3LCD5clearEv>
     a86:	83 e0       	ldi	r24, 0x03	; 3
     a88:	c8 16       	cp	r12, r24
     a8a:	d1 04       	cpc	r13, r1
     a8c:	0c f4       	brge	.+2      	; 0xa90 <_Z10displayLCDP6Stringii+0x38>
     a8e:	47 c0       	rjmp	.+142    	; 0xb1e <_Z10displayLCDP6Stringii+0xc6>
     a90:	40 91 78 0a 	lds	r20, 0x0A78	; 0x800a78 <UltimoPassaggioStato>
     a94:	50 91 79 0a 	lds	r21, 0x0A79	; 0x800a79 <UltimoPassaggioStato+0x1>
     a98:	60 91 7a 0a 	lds	r22, 0x0A7A	; 0x800a7a <UltimoPassaggioStato+0x2>
     a9c:	70 91 7b 0a 	lds	r23, 0x0A7B	; 0x800a7b <UltimoPassaggioStato+0x3>
     aa0:	80 91 74 0a 	lds	r24, 0x0A74	; 0x800a74 <Timer>
     aa4:	90 91 75 0a 	lds	r25, 0x0A75	; 0x800a75 <Timer+0x1>
     aa8:	a0 91 76 0a 	lds	r26, 0x0A76	; 0x800a76 <Timer+0x2>
     aac:	b0 91 77 0a 	lds	r27, 0x0A77	; 0x800a77 <Timer+0x3>
     ab0:	48 0f       	add	r20, r24
     ab2:	59 1f       	adc	r21, r25
     ab4:	6a 1f       	adc	r22, r26
     ab6:	7b 1f       	adc	r23, r27
     ab8:	41 50       	subi	r20, 0x01	; 1
     aba:	51 09       	sbc	r21, r1
     abc:	61 09       	sbc	r22, r1
     abe:	71 09       	sbc	r23, r1
     ac0:	80 91 7c 0a 	lds	r24, 0x0A7C	; 0x800a7c <secs>
     ac4:	90 91 7d 0a 	lds	r25, 0x0A7D	; 0x800a7d <secs+0x1>
     ac8:	a0 91 7e 0a 	lds	r26, 0x0A7E	; 0x800a7e <secs+0x2>
     acc:	b0 91 7f 0a 	lds	r27, 0x0A7F	; 0x800a7f <secs+0x3>
     ad0:	48 1b       	sub	r20, r24
     ad2:	59 0b       	sbc	r21, r25
     ad4:	6a 0b       	sbc	r22, r26
     ad6:	7b 0b       	sbc	r23, r27
     ad8:	2a e0       	ldi	r18, 0x0A	; 10
     ada:	ce 01       	movw	r24, r28
     adc:	07 96       	adiw	r24, 0x07	; 7
     ade:	0e 94 9e 3e 	call	0x7d3c	; 0x7d3c <_ZN6StringC1Emh>
     ae2:	62 ea       	ldi	r22, 0xA2	; 162
     ae4:	72 e0       	ldi	r23, 0x02	; 2
     ae6:	ce 01       	movw	r24, r28
     ae8:	01 96       	adiw	r24, 0x01	; 1
     aea:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <_ZN6StringC1EPKc>
     aee:	be 01       	movw	r22, r28
     af0:	69 5f       	subi	r22, 0xF9	; 249
     af2:	7f 4f       	sbci	r23, 0xFF	; 255
     af4:	ce 01       	movw	r24, r28
     af6:	01 96       	adiw	r24, 0x01	; 1
     af8:	0e 94 37 3f 	call	0x7e6e	; 0x7e6e <_ZplRK15StringSumHelperRK6String>
     afc:	6a ea       	ldi	r22, 0xAA	; 170
     afe:	72 e0       	ldi	r23, 0x02	; 2
     b00:	0e 94 48 3f 	call	0x7e90	; 0x7e90 <_ZplRK15StringSumHelperPKc>
     b04:	bc 01       	movw	r22, r24
     b06:	80 ec       	ldi	r24, 0xC0	; 192
     b08:	9b e0       	ldi	r25, 0x0B	; 11
     b0a:	0e 94 00 3b 	call	0x7600	; 0x7600 <_ZN5Print5printERK6String>
     b0e:	ce 01       	movw	r24, r28
     b10:	01 96       	adiw	r24, 0x01	; 1
     b12:	0e 94 78 3d 	call	0x7af0	; 0x7af0 <_ZN6StringD1Ev>
     b16:	ce 01       	movw	r24, r28
     b18:	07 96       	adiw	r24, 0x07	; 7
     b1a:	0e 94 78 3d 	call	0x7af0	; 0x7af0 <_ZN6StringD1Ev>
     b1e:	61 e0       	ldi	r22, 0x01	; 1
     b20:	80 ec       	ldi	r24, 0xC0	; 192
     b22:	9b e0       	ldi	r25, 0x0B	; 11
     b24:	0e 94 0f 3b 	call	0x761e	; 0x761e <_ZN5Print5printEc>
     b28:	41 e0       	ldi	r20, 0x01	; 1
     b2a:	60 e0       	ldi	r22, 0x00	; 0
     b2c:	80 ec       	ldi	r24, 0xC0	; 192
     b2e:	9b e0       	ldi	r25, 0x0B	; 11
     b30:	0e 94 9e 2a 	call	0x553c	; 0x553c <_ZN3LCD9setCursorEhh>
     b34:	b8 01       	movw	r22, r16
     b36:	6a 5f       	subi	r22, 0xFA	; 250
     b38:	7f 4f       	sbci	r23, 0xFF	; 255
     b3a:	80 ec       	ldi	r24, 0xC0	; 192
     b3c:	9b e0       	ldi	r25, 0x0B	; 11
     b3e:	0e 94 00 3b 	call	0x7600	; 0x7600 <_ZN5Print5printERK6String>
     b42:	42 e0       	ldi	r20, 0x02	; 2
     b44:	60 e0       	ldi	r22, 0x00	; 0
     b46:	80 ec       	ldi	r24, 0xC0	; 192
     b48:	9b e0       	ldi	r25, 0x0B	; 11
     b4a:	0e 94 9e 2a 	call	0x553c	; 0x553c <_ZN3LCD9setCursorEhh>
     b4e:	b8 01       	movw	r22, r16
     b50:	64 5f       	subi	r22, 0xF4	; 244
     b52:	7f 4f       	sbci	r23, 0xFF	; 255
     b54:	80 ec       	ldi	r24, 0xC0	; 192
     b56:	9b e0       	ldi	r25, 0x0B	; 11
     b58:	0e 94 00 3b 	call	0x7600	; 0x7600 <_ZN5Print5printERK6String>
     b5c:	43 e0       	ldi	r20, 0x03	; 3
     b5e:	60 e0       	ldi	r22, 0x00	; 0
     b60:	80 ec       	ldi	r24, 0xC0	; 192
     b62:	9b e0       	ldi	r25, 0x0B	; 11
     b64:	0e 94 9e 2a 	call	0x553c	; 0x553c <_ZN3LCD9setCursorEhh>
     b68:	b8 01       	movw	r22, r16
     b6a:	6e 5e       	subi	r22, 0xEE	; 238
     b6c:	7f 4f       	sbci	r23, 0xFF	; 255
     b6e:	80 ec       	ldi	r24, 0xC0	; 192
     b70:	9b e0       	ldi	r25, 0x0B	; 11
     b72:	0e 94 00 3b 	call	0x7600	; 0x7600 <_ZN5Print5printERK6String>
     b76:	c7 01       	movw	r24, r14
     b78:	3c dc       	rcall	.-1928   	; 0x3f2 <_Z11my_delay_msi>
     b7a:	2c 96       	adiw	r28, 0x0c	; 12
     b7c:	0f b6       	in	r0, 0x3f	; 63
     b7e:	f8 94       	cli
     b80:	de bf       	out	0x3e, r29	; 62
     b82:	0f be       	out	0x3f, r0	; 63
     b84:	cd bf       	out	0x3d, r28	; 61
     b86:	df 91       	pop	r29
     b88:	cf 91       	pop	r28
     b8a:	1f 91       	pop	r17
     b8c:	0f 91       	pop	r16
     b8e:	ff 90       	pop	r15
     b90:	ef 90       	pop	r14
     b92:	df 90       	pop	r13
     b94:	cf 90       	pop	r12
     b96:	08 95       	ret

00000b98 <_Z11avanzaStatom>:
     b98:	60 93 74 0a 	sts	0x0A74, r22	; 0x800a74 <Timer>
     b9c:	70 93 75 0a 	sts	0x0A75, r23	; 0x800a75 <Timer+0x1>
     ba0:	80 93 76 0a 	sts	0x0A76, r24	; 0x800a76 <Timer+0x2>
     ba4:	90 93 77 0a 	sts	0x0A77, r25	; 0x800a77 <Timer+0x3>
     ba8:	8e e6       	ldi	r24, 0x6E	; 110
     baa:	9a e0       	ldi	r25, 0x0A	; 10
     bac:	0e 94 05 1c 	call	0x380a	; 0x380a <_ZNK8DateTime11secondstimeEv>
     bb0:	60 93 78 0a 	sts	0x0A78, r22	; 0x800a78 <UltimoPassaggioStato>
     bb4:	70 93 79 0a 	sts	0x0A79, r23	; 0x800a79 <UltimoPassaggioStato+0x1>
     bb8:	80 93 7a 0a 	sts	0x0A7A, r24	; 0x800a7a <UltimoPassaggioStato+0x2>
     bbc:	90 93 7b 0a 	sts	0x0A7B, r25	; 0x800a7b <UltimoPassaggioStato+0x3>
     bc0:	80 91 97 0b 	lds	r24, 0x0B97	; 0x800b97 <stato_procedura>
     bc4:	90 91 98 0b 	lds	r25, 0x0B98	; 0x800b98 <stato_procedura+0x1>
     bc8:	01 96       	adiw	r24, 0x01	; 1
     bca:	90 93 98 0b 	sts	0x0B98, r25	; 0x800b98 <stato_procedura+0x1>
     bce:	80 93 97 0b 	sts	0x0B97, r24	; 0x800b97 <stato_procedura>
     bd2:	08 95       	ret

00000bd4 <_Z14leggiTAG_Mezzob>:
     bd4:	af 92       	push	r10
     bd6:	bf 92       	push	r11
     bd8:	cf 92       	push	r12
     bda:	df 92       	push	r13
     bdc:	ef 92       	push	r14
     bde:	ff 92       	push	r15
     be0:	0f 93       	push	r16
     be2:	1f 93       	push	r17
     be4:	cf 93       	push	r28
     be6:	df 93       	push	r29
     be8:	cd b7       	in	r28, 0x3d	; 61
     bea:	de b7       	in	r29, 0x3e	; 62
     bec:	a2 97       	sbiw	r28, 0x22	; 34
     bee:	0f b6       	in	r0, 0x3f	; 63
     bf0:	f8 94       	cli
     bf2:	de bf       	out	0x3e, r29	; 62
     bf4:	0f be       	out	0x3f, r0	; 63
     bf6:	cd bf       	out	0x3d, r28	; 61
     bf8:	5c 01       	movw	r10, r24
     bfa:	f6 2e       	mov	r15, r22
     bfc:	63 ec       	ldi	r22, 0xC3	; 195
     bfe:	71 e0       	ldi	r23, 0x01	; 1
     c00:	ce 01       	movw	r24, r28
     c02:	4d 96       	adiw	r24, 0x1d	; 29
     c04:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <_ZN6StringC1EPKc>
     c08:	08 ec       	ldi	r16, 0xC8	; 200
     c0a:	10 e0       	ldi	r17, 0x00	; 0
     c0c:	20 ee       	ldi	r18, 0xE0	; 224
     c0e:	3b e0       	ldi	r19, 0x0B	; 11
     c10:	49 ed       	ldi	r20, 0xD9	; 217
     c12:	5b e0       	ldi	r21, 0x0B	; 11
     c14:	60 e0       	ldi	r22, 0x00	; 0
     c16:	89 ea       	ldi	r24, 0xA9	; 169
     c18:	9b e0       	ldi	r25, 0x0B	; 11
     c1a:	0e 94 78 19 	call	0x32f0	; 0x32f0 <_ZN14Adafruit_PN53219readPassiveTargetIDEhPhS0_j>
     c1e:	80 93 e1 0b 	sts	0x0BE1, r24	; 0x800be1 <success>
     c22:	88 23       	and	r24, r24
     c24:	09 f4       	brne	.+2      	; 0xc28 <_Z14leggiTAG_Mezzob+0x54>
     c26:	97 c0       	rjmp	.+302    	; 0xd56 <_Z14leggiTAG_Mezzob+0x182>
     c28:	80 91 e0 0b 	lds	r24, 0x0BE0	; 0x800be0 <uidLength>
     c2c:	84 30       	cpi	r24, 0x04	; 4
     c2e:	09 f0       	breq	.+2      	; 0xc32 <_Z14leggiTAG_Mezzob+0x5e>
     c30:	8c c0       	rjmp	.+280    	; 0xd4a <_Z14leggiTAG_Mezzob+0x176>
     c32:	86 e0       	ldi	r24, 0x06	; 6
     c34:	ec e4       	ldi	r30, 0x4C	; 76
     c36:	f1 e0       	ldi	r31, 0x01	; 1
     c38:	de 01       	movw	r26, r28
     c3a:	57 96       	adiw	r26, 0x17	; 23
     c3c:	01 90       	ld	r0, Z+
     c3e:	0d 92       	st	X+, r0
     c40:	8a 95       	dec	r24
     c42:	e1 f7       	brne	.-8      	; 0xc3c <_Z14leggiTAG_Mezzob+0x68>
     c44:	ce 01       	movw	r24, r28
     c46:	47 96       	adiw	r24, 0x17	; 23
     c48:	6c 01       	movw	r12, r24
     c4a:	e1 2c       	mov	r14, r1
     c4c:	04 e0       	ldi	r16, 0x04	; 4
     c4e:	10 e0       	ldi	r17, 0x00	; 0
     c50:	20 e0       	ldi	r18, 0x00	; 0
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	44 e0       	ldi	r20, 0x04	; 4
     c56:	69 ed       	ldi	r22, 0xD9	; 217
     c58:	7b e0       	ldi	r23, 0x0B	; 11
     c5a:	89 ea       	ldi	r24, 0xA9	; 169
     c5c:	9b e0       	ldi	r25, 0x0B	; 11
     c5e:	0e 94 cc 19 	call	0x3398	; 0x3398 <_ZN14Adafruit_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_>
     c62:	80 93 e1 0b 	sts	0x0BE1, r24	; 0x800be1 <success>
     c66:	88 23       	and	r24, r24
     c68:	09 f4       	brne	.+2      	; 0xc6c <_Z14leggiTAG_Mezzob+0x98>
     c6a:	5f c0       	rjmp	.+190    	; 0xd2a <_Z14leggiTAG_Mezzob+0x156>
     c6c:	ff 20       	and	r15, r15
     c6e:	99 f0       	breq	.+38     	; 0xc96 <_Z14leggiTAG_Mezzob+0xc2>
     c70:	80 e1       	ldi	r24, 0x10	; 16
     c72:	eb ea       	ldi	r30, 0xAB	; 171
     c74:	f8 e0       	ldi	r31, 0x08	; 8
     c76:	de 01       	movw	r26, r28
     c78:	11 96       	adiw	r26, 0x01	; 1
     c7a:	01 90       	ld	r0, Z+
     c7c:	0d 92       	st	X+, r0
     c7e:	8a 95       	dec	r24
     c80:	e1 f7       	brne	.-8      	; 0xc7a <_Z14leggiTAG_Mezzob+0xa6>
     c82:	ae 01       	movw	r20, r28
     c84:	4f 5f       	subi	r20, 0xFF	; 255
     c86:	5f 4f       	sbci	r21, 0xFF	; 255
     c88:	64 e0       	ldi	r22, 0x04	; 4
     c8a:	89 ea       	ldi	r24, 0xA9	; 169
     c8c:	9b e0       	ldi	r25, 0x0B	; 11
     c8e:	0e 94 5f 1a 	call	0x34be	; 0x34be <_ZN14Adafruit_PN53228mifareclassic_WriteDataBlockEhPh>
     c92:	80 93 e1 0b 	sts	0x0BE1, r24	; 0x800be1 <success>
     c96:	ae 01       	movw	r20, r28
     c98:	4f 5f       	subi	r20, 0xFF	; 255
     c9a:	5f 4f       	sbci	r21, 0xFF	; 255
     c9c:	64 e0       	ldi	r22, 0x04	; 4
     c9e:	89 ea       	ldi	r24, 0xA9	; 169
     ca0:	9b e0       	ldi	r25, 0x0B	; 11
     ca2:	0e 94 2c 1a 	call	0x3458	; 0x3458 <_ZN14Adafruit_PN53227mifareclassic_ReadDataBlockEhPh>
     ca6:	80 93 e1 0b 	sts	0x0BE1, r24	; 0x800be1 <success>
     caa:	88 23       	and	r24, r24
     cac:	89 f1       	breq	.+98     	; 0xd10 <_Z14leggiTAG_Mezzob+0x13c>
     cae:	60 eb       	ldi	r22, 0xB0	; 176
     cb0:	72 e0       	ldi	r23, 0x02	; 2
     cb2:	8f e4       	ldi	r24, 0x4F	; 79
     cb4:	9d e0       	ldi	r25, 0x0D	; 13
     cb6:	0e 94 39 3b 	call	0x7672	; 0x7672 <_ZN5Print7printlnEPKc>
     cba:	be 01       	movw	r22, r28
     cbc:	6f 5f       	subi	r22, 0xFF	; 255
     cbe:	7f 4f       	sbci	r23, 0xFF	; 255
     cc0:	ce 01       	movw	r24, r28
     cc2:	41 96       	adiw	r24, 0x11	; 17
     cc4:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <_ZN6StringC1EPKc>
     cc8:	be 01       	movw	r22, r28
     cca:	6f 5e       	subi	r22, 0xEF	; 239
     ccc:	7f 4f       	sbci	r23, 0xFF	; 255
     cce:	8f e4       	ldi	r24, 0x4F	; 79
     cd0:	9d e0       	ldi	r25, 0x0D	; 13
     cd2:	0e 94 29 3b 	call	0x7652	; 0x7652 <_ZN5Print7printlnERK6String>
     cd6:	8d 89       	ldd	r24, Y+21	; 0x15
     cd8:	9e 89       	ldd	r25, Y+22	; 0x16
     cda:	06 97       	sbiw	r24, 0x06	; 6
     cdc:	59 f4       	brne	.+22     	; 0xcf4 <_Z14leggiTAG_Mezzob+0x120>
     cde:	be 01       	movw	r22, r28
     ce0:	6f 5e       	subi	r22, 0xEF	; 239
     ce2:	7f 4f       	sbci	r23, 0xFF	; 255
     ce4:	c5 01       	movw	r24, r10
     ce6:	0e 94 2e 3e 	call	0x7c5c	; 0x7c5c <_ZN6StringC1EOS_>
     cea:	ce 01       	movw	r24, r28
     cec:	41 96       	adiw	r24, 0x11	; 17
     cee:	0e 94 78 3d 	call	0x7af0	; 0x7af0 <_ZN6StringD1Ev>
     cf2:	37 c0       	rjmp	.+110    	; 0xd62 <_Z14leggiTAG_Mezzob+0x18e>
     cf4:	9f ef       	ldi	r25, 0xFF	; 255
     cf6:	21 ee       	ldi	r18, 0xE1	; 225
     cf8:	84 e0       	ldi	r24, 0x04	; 4
     cfa:	91 50       	subi	r25, 0x01	; 1
     cfc:	20 40       	sbci	r18, 0x00	; 0
     cfe:	80 40       	sbci	r24, 0x00	; 0
     d00:	e1 f7       	brne	.-8      	; 0xcfa <_Z14leggiTAG_Mezzob+0x126>
     d02:	00 c0       	rjmp	.+0      	; 0xd04 <_Z14leggiTAG_Mezzob+0x130>
     d04:	00 00       	nop
     d06:	ce 01       	movw	r24, r28
     d08:	41 96       	adiw	r24, 0x11	; 17
     d0a:	0e 94 78 3d 	call	0x7af0	; 0x7af0 <_ZN6StringD1Ev>
     d0e:	1d c0       	rjmp	.+58     	; 0xd4a <_Z14leggiTAG_Mezzob+0x176>
     d10:	80 ec       	ldi	r24, 0xC0	; 192
     d12:	9b e0       	ldi	r25, 0x0B	; 11
     d14:	0e 94 98 2a 	call	0x5530	; 0x5530 <_ZN3LCD5clearEv>
     d18:	41 e0       	ldi	r20, 0x01	; 1
     d1a:	60 e0       	ldi	r22, 0x00	; 0
     d1c:	80 ec       	ldi	r24, 0xC0	; 192
     d1e:	9b e0       	ldi	r25, 0x0B	; 11
     d20:	0e 94 9e 2a 	call	0x553c	; 0x553c <_ZN3LCD9setCursorEhh>
     d24:	6e eb       	ldi	r22, 0xBE	; 190
     d26:	72 e0       	ldi	r23, 0x02	; 2
     d28:	0c c0       	rjmp	.+24     	; 0xd42 <_Z14leggiTAG_Mezzob+0x16e>
     d2a:	80 ec       	ldi	r24, 0xC0	; 192
     d2c:	9b e0       	ldi	r25, 0x0B	; 11
     d2e:	0e 94 98 2a 	call	0x5530	; 0x5530 <_ZN3LCD5clearEv>
     d32:	41 e0       	ldi	r20, 0x01	; 1
     d34:	60 e0       	ldi	r22, 0x00	; 0
     d36:	80 ec       	ldi	r24, 0xC0	; 192
     d38:	9b e0       	ldi	r25, 0x0B	; 11
     d3a:	0e 94 9e 2a 	call	0x553c	; 0x553c <_ZN3LCD9setCursorEhh>
     d3e:	68 ec       	ldi	r22, 0xC8	; 200
     d40:	72 e0       	ldi	r23, 0x02	; 2
     d42:	80 ec       	ldi	r24, 0xC0	; 192
     d44:	9b e0       	ldi	r25, 0x0B	; 11
     d46:	0e 94 0e 3b 	call	0x761c	; 0x761c <_ZN5Print5printEPKc>
     d4a:	63 ec       	ldi	r22, 0xC3	; 195
     d4c:	71 e0       	ldi	r23, 0x01	; 1
     d4e:	8f e4       	ldi	r24, 0x4F	; 79
     d50:	9d e0       	ldi	r25, 0x0D	; 13
     d52:	0e 94 39 3b 	call	0x7672	; 0x7672 <_ZN5Print7printlnEPKc>
     d56:	be 01       	movw	r22, r28
     d58:	63 5e       	subi	r22, 0xE3	; 227
     d5a:	7f 4f       	sbci	r23, 0xFF	; 255
     d5c:	c5 01       	movw	r24, r10
     d5e:	0e 94 2e 3e 	call	0x7c5c	; 0x7c5c <_ZN6StringC1EOS_>
     d62:	ce 01       	movw	r24, r28
     d64:	4d 96       	adiw	r24, 0x1d	; 29
     d66:	0e 94 78 3d 	call	0x7af0	; 0x7af0 <_ZN6StringD1Ev>
     d6a:	c5 01       	movw	r24, r10
     d6c:	a2 96       	adiw	r28, 0x22	; 34
     d6e:	0f b6       	in	r0, 0x3f	; 63
     d70:	f8 94       	cli
     d72:	de bf       	out	0x3e, r29	; 62
     d74:	0f be       	out	0x3f, r0	; 63
     d76:	cd bf       	out	0x3d, r28	; 61
     d78:	df 91       	pop	r29
     d7a:	cf 91       	pop	r28
     d7c:	1f 91       	pop	r17
     d7e:	0f 91       	pop	r16
     d80:	ff 90       	pop	r15
     d82:	ef 90       	pop	r14
     d84:	df 90       	pop	r13
     d86:	cf 90       	pop	r12
     d88:	bf 90       	pop	r11
     d8a:	af 90       	pop	r10
     d8c:	08 95       	ret

00000d8e <_Z14GetCodeRfidATev>:
     d8e:	cf 92       	push	r12
     d90:	df 92       	push	r13
     d92:	ef 92       	push	r14
     d94:	ff 92       	push	r15
     d96:	0f 93       	push	r16
     d98:	1f 93       	push	r17
     d9a:	cf 93       	push	r28
     d9c:	df 93       	push	r29
     d9e:	cd b7       	in	r28, 0x3d	; 61
     da0:	de b7       	in	r29, 0x3e	; 62
     da2:	64 97       	sbiw	r28, 0x14	; 20
     da4:	0f b6       	in	r0, 0x3f	; 63
     da6:	f8 94       	cli
     da8:	de bf       	out	0x3e, r29	; 62
     daa:	0f be       	out	0x3f, r0	; 63
     dac:	cd bf       	out	0x3d, r28	; 61
     dae:	7c 01       	movw	r14, r24
     db0:	ce 01       	movw	r24, r28
     db2:	01 96       	adiw	r24, 0x01	; 1
     db4:	6c 01       	movw	r12, r24
     db6:	87 e0       	ldi	r24, 0x07	; 7
     db8:	f6 01       	movw	r30, r12
     dba:	11 92       	st	Z+, r1
     dbc:	8a 95       	dec	r24
     dbe:	e9 f7       	brne	.-6      	; 0xdba <_Z14GetCodeRfidATev+0x2c>
     dc0:	60 ed       	ldi	r22, 0xD0	; 208
     dc2:	72 e0       	ldi	r23, 0x02	; 2
     dc4:	c7 01       	movw	r24, r14
     dc6:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <_ZN6StringC1EPKc>
     dca:	00 e0       	ldi	r16, 0x00	; 0
     dcc:	10 e0       	ldi	r17, 0x00	; 0
     dce:	9e 01       	movw	r18, r28
     dd0:	2c 5e       	subi	r18, 0xEC	; 236
     dd2:	3f 4f       	sbci	r19, 0xFF	; 255
     dd4:	a6 01       	movw	r20, r12
     dd6:	60 e0       	ldi	r22, 0x00	; 0
     dd8:	89 ea       	ldi	r24, 0xA9	; 169
     dda:	9b e0       	ldi	r25, 0x0B	; 11
     ddc:	0e 94 78 19 	call	0x32f0	; 0x32f0 <_ZN14Adafruit_PN53219readPassiveTargetIDEhPhS0_j>
     de0:	88 23       	and	r24, r24
     de2:	59 f1       	breq	.+86     	; 0xe3a <_Z14GetCodeRfidATev+0xac>
     de4:	0c 89       	ldd	r16, Y+20	; 0x14
     de6:	10 e0       	ldi	r17, 0x00	; 0
     de8:	20 e0       	ldi	r18, 0x00	; 0
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	a6 01       	movw	r20, r12
     dee:	69 ea       	ldi	r22, 0xA9	; 169
     df0:	7b e0       	ldi	r23, 0x0B	; 11
     df2:	ce 01       	movw	r24, r28
     df4:	0e 96       	adiw	r24, 0x0e	; 14
     df6:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <_ZN14Adafruit_PN53210GetHexCodeEPKhm>
     dfa:	ce 01       	movw	r24, r28
     dfc:	0e 96       	adiw	r24, 0x0e	; 14
     dfe:	0e 94 ee 3f 	call	0x7fdc	; 0x7fdc <_ZN6String4trimEv>
     e02:	28 e0       	ldi	r18, 0x08	; 8
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	40 e0       	ldi	r20, 0x00	; 0
     e08:	50 e0       	ldi	r21, 0x00	; 0
     e0a:	be 01       	movw	r22, r28
     e0c:	62 5f       	subi	r22, 0xF2	; 242
     e0e:	7f 4f       	sbci	r23, 0xFF	; 255
     e10:	ce 01       	movw	r24, r28
     e12:	08 96       	adiw	r24, 0x08	; 8
     e14:	0e 94 ab 3f 	call	0x7f56	; 0x7f56 <_ZNK6String9substringEjj>
     e18:	be 01       	movw	r22, r28
     e1a:	68 5f       	subi	r22, 0xF8	; 248
     e1c:	7f 4f       	sbci	r23, 0xFF	; 255
     e1e:	c7 01       	movw	r24, r14
     e20:	0e 94 53 3e 	call	0x7ca6	; 0x7ca6 <_ZN6StringaSEOS_>
     e24:	ce 01       	movw	r24, r28
     e26:	08 96       	adiw	r24, 0x08	; 8
     e28:	0e 94 78 3d 	call	0x7af0	; 0x7af0 <_ZN6StringD1Ev>
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	80 93 d8 0b 	sts	0x0BD8, r24	; 0x800bd8 <alreadyTimbrata>
     e32:	ce 01       	movw	r24, r28
     e34:	0e 96       	adiw	r24, 0x0e	; 14
     e36:	0e 94 78 3d 	call	0x7af0	; 0x7af0 <_ZN6StringD1Ev>
     e3a:	c7 01       	movw	r24, r14
     e3c:	64 96       	adiw	r28, 0x14	; 20
     e3e:	0f b6       	in	r0, 0x3f	; 63
     e40:	f8 94       	cli
     e42:	de bf       	out	0x3e, r29	; 62
     e44:	0f be       	out	0x3f, r0	; 63
     e46:	cd bf       	out	0x3d, r28	; 61
     e48:	df 91       	pop	r29
     e4a:	cf 91       	pop	r28
     e4c:	1f 91       	pop	r17
     e4e:	0f 91       	pop	r16
     e50:	ff 90       	pop	r15
     e52:	ef 90       	pop	r14
     e54:	df 90       	pop	r13
     e56:	cf 90       	pop	r12
     e58:	08 95       	ret

00000e5a <_Z15abilitaPulsantiv>:
     e5a:	57 98       	cbi	0x0a, 7	; 10
     e5c:	56 98       	cbi	0x0a, 6	; 10
     e5e:	88 e0       	ldi	r24, 0x08	; 8
     e60:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
     e64:	80 ec       	ldi	r24, 0xC0	; 192
     e66:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
     e6a:	78 94       	sei
     e6c:	08 95       	ret

00000e6e <_Z22abilitaContattiPistolav>:
     e6e:	09 98       	cbi	0x01, 1	; 1
     e70:	0a 98       	cbi	0x01, 2	; 1
     e72:	08 95       	ret

00000e74 <_Z13abilitaPulserc>:
     e74:	91 e0       	ldi	r25, 0x01	; 1
     e76:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
     e7a:	84 34       	cpi	r24, 0x44	; 68
     e7c:	19 f4       	brne	.+6      	; 0xe84 <_Z13abilitaPulserc+0x10>
     e7e:	0d 98       	cbi	0x01, 5	; 1
     e80:	80 e2       	ldi	r24, 0x20	; 32
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <_Z13abilitaPulserc+0x14>
     e84:	0e 98       	cbi	0x01, 6	; 1
     e86:	80 e4       	ldi	r24, 0x40	; 64
     e88:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
     e8c:	78 94       	sei
     e8e:	08 95       	ret

00000e90 <_Z14impulsiToLitrii>:
     e90:	cf 92       	push	r12
     e92:	df 92       	push	r13
     e94:	ef 92       	push	r14
     e96:	ff 92       	push	r15
     e98:	bc 01       	movw	r22, r24
     e9a:	99 0f       	add	r25, r25
     e9c:	88 0b       	sbc	r24, r24
     e9e:	99 0b       	sbc	r25, r25
     ea0:	0e 94 e7 38 	call	0x71ce	; 0x71ce <__floatsisf>
     ea4:	6b 01       	movw	r12, r22
     ea6:	7c 01       	movw	r14, r24
     ea8:	20 e0       	ldi	r18, 0x00	; 0
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	a9 01       	movw	r20, r18
     eae:	0e 94 79 38 	call	0x70f2	; 0x70f2 <__cmpsf2>
     eb2:	87 ff       	sbrs	r24, 7
     eb4:	03 c0       	rjmp	.+6      	; 0xebc <_Z14impulsiToLitrii+0x2c>
     eb6:	c1 2c       	mov	r12, r1
     eb8:	d1 2c       	mov	r13, r1
     eba:	76 01       	movw	r14, r12
     ebc:	60 91 34 01 	lds	r22, 0x0134	; 0x800134 <ImpulsiLitro>
     ec0:	70 91 35 01 	lds	r23, 0x0135	; 0x800135 <ImpulsiLitro+0x1>
     ec4:	07 2e       	mov	r0, r23
     ec6:	00 0c       	add	r0, r0
     ec8:	88 0b       	sbc	r24, r24
     eca:	99 0b       	sbc	r25, r25
     ecc:	0e 94 e7 38 	call	0x71ce	; 0x71ce <__floatsisf>
     ed0:	9b 01       	movw	r18, r22
     ed2:	ac 01       	movw	r20, r24
     ed4:	c7 01       	movw	r24, r14
     ed6:	b6 01       	movw	r22, r12
     ed8:	0e 94 7d 38 	call	0x70fa	; 0x70fa <__divsf3>
     edc:	ff 90       	pop	r15
     ede:	ef 90       	pop	r14
     ee0:	df 90       	pop	r13
     ee2:	cf 90       	pop	r12
     ee4:	08 95       	ret

00000ee6 <_Z18Rele_Abilitazione1ii>:
     ee6:	3f 9a       	sbi	0x07, 7	; 7
     ee8:	81 30       	cpi	r24, 0x01	; 1
     eea:	91 05       	cpc	r25, r1
     eec:	71 f0       	breq	.+28     	; 0xf0a <_Z18Rele_Abilitazione1ii+0x24>
     eee:	82 30       	cpi	r24, 0x02	; 2
     ef0:	91 05       	cpc	r25, r1
     ef2:	e1 f0       	breq	.+56     	; 0xf2c <_Z18Rele_Abilitazione1ii+0x46>
     ef4:	89 2b       	or	r24, r25
     ef6:	89 f5       	brne	.+98     	; 0xf5a <_Z18Rele_Abilitazione1ii+0x74>
     ef8:	47 98       	cbi	0x08, 7	; 8
     efa:	2f ef       	ldi	r18, 0xFF	; 255
     efc:	30 e7       	ldi	r19, 0x70	; 112
     efe:	42 e0       	ldi	r20, 0x02	; 2
     f00:	21 50       	subi	r18, 0x01	; 1
     f02:	30 40       	sbci	r19, 0x00	; 0
     f04:	40 40       	sbci	r20, 0x00	; 0
     f06:	e1 f7       	brne	.-8      	; 0xf00 <_Z18Rele_Abilitazione1ii+0x1a>
     f08:	0e c0       	rjmp	.+28     	; 0xf26 <_Z18Rele_Abilitazione1ii+0x40>
     f0a:	28 b1       	in	r18, 0x08	; 8
     f0c:	01 c0       	rjmp	.+2      	; 0xf10 <_Z18Rele_Abilitazione1ii+0x2a>
     f0e:	88 0f       	add	r24, r24
     f10:	6a 95       	dec	r22
     f12:	ea f7       	brpl	.-6      	; 0xf0e <_Z18Rele_Abilitazione1ii+0x28>
     f14:	82 2b       	or	r24, r18
     f16:	88 b9       	out	0x08, r24	; 8
     f18:	8f ef       	ldi	r24, 0xFF	; 255
     f1a:	90 e7       	ldi	r25, 0x70	; 112
     f1c:	22 e0       	ldi	r18, 0x02	; 2
     f1e:	81 50       	subi	r24, 0x01	; 1
     f20:	90 40       	sbci	r25, 0x00	; 0
     f22:	20 40       	sbci	r18, 0x00	; 0
     f24:	e1 f7       	brne	.-8      	; 0xf1e <_Z18Rele_Abilitazione1ii+0x38>
     f26:	00 c0       	rjmp	.+0      	; 0xf28 <_Z18Rele_Abilitazione1ii+0x42>
     f28:	00 00       	nop
     f2a:	08 95       	ret
     f2c:	28 b1       	in	r18, 0x08	; 8
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	01 c0       	rjmp	.+2      	; 0xf36 <_Z18Rele_Abilitazione1ii+0x50>
     f34:	88 0f       	add	r24, r24
     f36:	6a 95       	dec	r22
     f38:	ea f7       	brpl	.-6      	; 0xf34 <_Z18Rele_Abilitazione1ii+0x4e>
     f3a:	98 2f       	mov	r25, r24
     f3c:	90 95       	com	r25
     f3e:	92 23       	and	r25, r18
     f40:	98 b9       	out	0x08, r25	; 8
     f42:	3f ef       	ldi	r19, 0xFF	; 255
     f44:	45 ea       	ldi	r20, 0xA5	; 165
     f46:	2e e0       	ldi	r18, 0x0E	; 14
     f48:	31 50       	subi	r19, 0x01	; 1
     f4a:	40 40       	sbci	r20, 0x00	; 0
     f4c:	20 40       	sbci	r18, 0x00	; 0
     f4e:	e1 f7       	brne	.-8      	; 0xf48 <_Z18Rele_Abilitazione1ii+0x62>
     f50:	00 c0       	rjmp	.+0      	; 0xf52 <_Z18Rele_Abilitazione1ii+0x6c>
     f52:	00 00       	nop
     f54:	98 b1       	in	r25, 0x08	; 8
     f56:	89 2b       	or	r24, r25
     f58:	88 b9       	out	0x08, r24	; 8
     f5a:	08 95       	ret

00000f5c <_Z18Rele_Abilitazione2ii>:
     f5c:	0f 9a       	sbi	0x01, 7	; 1
     f5e:	81 30       	cpi	r24, 0x01	; 1
     f60:	91 05       	cpc	r25, r1
     f62:	b9 f0       	breq	.+46     	; 0xf92 <_Z18Rele_Abilitazione2ii+0x36>
     f64:	82 30       	cpi	r24, 0x02	; 2
     f66:	91 05       	cpc	r25, r1
     f68:	29 f1       	breq	.+74     	; 0xfb4 <_Z18Rele_Abilitazione2ii+0x58>
     f6a:	89 2b       	or	r24, r25
     f6c:	d1 f5       	brne	.+116    	; 0xfe2 <_Z18Rele_Abilitazione2ii+0x86>
     f6e:	22 b1       	in	r18, 0x02	; 2
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	01 c0       	rjmp	.+2      	; 0xf78 <_Z18Rele_Abilitazione2ii+0x1c>
     f76:	88 0f       	add	r24, r24
     f78:	6a 95       	dec	r22
     f7a:	ea f7       	brpl	.-6      	; 0xf76 <_Z18Rele_Abilitazione2ii+0x1a>
     f7c:	80 95       	com	r24
     f7e:	82 23       	and	r24, r18
     f80:	82 b9       	out	0x02, r24	; 2
     f82:	2f ef       	ldi	r18, 0xFF	; 255
     f84:	30 e7       	ldi	r19, 0x70	; 112
     f86:	42 e0       	ldi	r20, 0x02	; 2
     f88:	21 50       	subi	r18, 0x01	; 1
     f8a:	30 40       	sbci	r19, 0x00	; 0
     f8c:	40 40       	sbci	r20, 0x00	; 0
     f8e:	e1 f7       	brne	.-8      	; 0xf88 <_Z18Rele_Abilitazione2ii+0x2c>
     f90:	0e c0       	rjmp	.+28     	; 0xfae <_Z18Rele_Abilitazione2ii+0x52>
     f92:	22 b1       	in	r18, 0x02	; 2
     f94:	01 c0       	rjmp	.+2      	; 0xf98 <_Z18Rele_Abilitazione2ii+0x3c>
     f96:	88 0f       	add	r24, r24
     f98:	6a 95       	dec	r22
     f9a:	ea f7       	brpl	.-6      	; 0xf96 <_Z18Rele_Abilitazione2ii+0x3a>
     f9c:	82 2b       	or	r24, r18
     f9e:	82 b9       	out	0x02, r24	; 2
     fa0:	8f ef       	ldi	r24, 0xFF	; 255
     fa2:	90 e7       	ldi	r25, 0x70	; 112
     fa4:	22 e0       	ldi	r18, 0x02	; 2
     fa6:	81 50       	subi	r24, 0x01	; 1
     fa8:	90 40       	sbci	r25, 0x00	; 0
     faa:	20 40       	sbci	r18, 0x00	; 0
     fac:	e1 f7       	brne	.-8      	; 0xfa6 <_Z18Rele_Abilitazione2ii+0x4a>
     fae:	00 c0       	rjmp	.+0      	; 0xfb0 <_Z18Rele_Abilitazione2ii+0x54>
     fb0:	00 00       	nop
     fb2:	08 95       	ret
     fb4:	22 b1       	in	r18, 0x02	; 2
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	01 c0       	rjmp	.+2      	; 0xfbe <_Z18Rele_Abilitazione2ii+0x62>
     fbc:	88 0f       	add	r24, r24
     fbe:	6a 95       	dec	r22
     fc0:	ea f7       	brpl	.-6      	; 0xfbc <_Z18Rele_Abilitazione2ii+0x60>
     fc2:	98 2f       	mov	r25, r24
     fc4:	90 95       	com	r25
     fc6:	92 23       	and	r25, r18
     fc8:	92 b9       	out	0x02, r25	; 2
     fca:	3f ef       	ldi	r19, 0xFF	; 255
     fcc:	45 ea       	ldi	r20, 0xA5	; 165
     fce:	2e e0       	ldi	r18, 0x0E	; 14
     fd0:	31 50       	subi	r19, 0x01	; 1
     fd2:	40 40       	sbci	r20, 0x00	; 0
     fd4:	20 40       	sbci	r18, 0x00	; 0
     fd6:	e1 f7       	brne	.-8      	; 0xfd0 <_Z18Rele_Abilitazione2ii+0x74>
     fd8:	00 c0       	rjmp	.+0      	; 0xfda <_Z18Rele_Abilitazione2ii+0x7e>
     fda:	00 00       	nop
     fdc:	92 b1       	in	r25, 0x02	; 2
     fde:	89 2b       	or	r24, r25
     fe0:	82 b9       	out	0x02, r24	; 2
     fe2:	08 95       	ret

00000fe4 <_Z12Control_WIFIi>:
     fe4:	23 9a       	sbi	0x04, 3	; 4
     fe6:	2f ef       	ldi	r18, 0xFF	; 255
     fe8:	36 e7       	ldi	r19, 0x76	; 118
     fea:	41 e0       	ldi	r20, 0x01	; 1
     fec:	21 50       	subi	r18, 0x01	; 1
     fee:	30 40       	sbci	r19, 0x00	; 0
     ff0:	40 40       	sbci	r20, 0x00	; 0
     ff2:	e1 f7       	brne	.-8      	; 0xfec <_Z12Control_WIFIi+0x8>
     ff4:	00 c0       	rjmp	.+0      	; 0xff6 <_Z12Control_WIFIi+0x12>
     ff6:	00 00       	nop
     ff8:	81 30       	cpi	r24, 0x01	; 1
     ffa:	91 05       	cpc	r25, r1
     ffc:	11 f4       	brne	.+4      	; 0x1002 <_Z12Control_WIFIi+0x1e>
     ffe:	2b 9a       	sbi	0x05, 3	; 5
    1000:	08 95       	ret
    1002:	89 2b       	or	r24, r25
    1004:	09 f4       	brne	.+2      	; 0x1008 <_Z12Control_WIFIi+0x24>
    1006:	2b 98       	cbi	0x05, 3	; 5
    1008:	08 95       	ret

0000100a <_Z32CompletoRifornimentoPerInvioDatii>:
    100a:	10 92 96 0b 	sts	0x0B96, r1	; 0x800b96 <impulsi+0x1>
    100e:	10 92 95 0b 	sts	0x0B95, r1	; 0x800b95 <impulsi>
    1012:	10 92 9c 0b 	sts	0x0B9C, r1	; 0x800b9c <Litri+0x1>
    1016:	10 92 9b 0b 	sts	0x0B9B, r1	; 0x800b9b <Litri>
    101a:	61 e7       	ldi	r22, 0x71	; 113
    101c:	76 e0       	ldi	r23, 0x06	; 6
    101e:	8d e4       	ldi	r24, 0x4D	; 77
    1020:	9b e0       	ldi	r25, 0x0B	; 11
    1022:	0e 94 29 3f 	call	0x7e52	; 0x7e52 <_ZN6String6concatEPKc>
    1026:	2f ef       	ldi	r18, 0xFF	; 255
    1028:	81 ee       	ldi	r24, 0xE1	; 225
    102a:	94 e0       	ldi	r25, 0x04	; 4
    102c:	21 50       	subi	r18, 0x01	; 1
    102e:	80 40       	sbci	r24, 0x00	; 0
    1030:	90 40       	sbci	r25, 0x00	; 0
    1032:	e1 f7       	brne	.-8      	; 0x102c <_Z32CompletoRifornimentoPerInvioDatii+0x22>
    1034:	00 c0       	rjmp	.+0      	; 0x1036 <_Z32CompletoRifornimentoPerInvioDatii+0x2c>
    1036:	00 00       	nop
    1038:	20 e0       	ldi	r18, 0x00	; 0
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	44 e6       	ldi	r20, 0x64	; 100
    103e:	50 e0       	ldi	r21, 0x00	; 0
    1040:	61 ed       	ldi	r22, 0xD1	; 209
    1042:	7a e0       	ldi	r23, 0x0A	; 10
    1044:	8d e4       	ldi	r24, 0x4D	; 77
    1046:	9b e0       	ldi	r25, 0x0B	; 11
    1048:	0c 94 7d 3f 	jmp	0x7efa	; 0x7efa <_ZNK6String8getBytesEPhjj>

0000104c <__vector_4>:
    104c:	1f 92       	push	r1
    104e:	0f 92       	push	r0
    1050:	0f b6       	in	r0, 0x3f	; 63
    1052:	0f 92       	push	r0
    1054:	11 24       	eor	r1, r1
    1056:	8f 93       	push	r24
    1058:	9f 93       	push	r25
    105a:	05 9b       	sbis	0x00, 5	; 0
    105c:	09 c0       	rjmp	.+18     	; 0x1070 <__vector_4+0x24>
    105e:	80 91 95 0b 	lds	r24, 0x0B95	; 0x800b95 <impulsi>
    1062:	90 91 96 0b 	lds	r25, 0x0B96	; 0x800b96 <impulsi+0x1>
    1066:	01 96       	adiw	r24, 0x01	; 1
    1068:	90 93 96 0b 	sts	0x0B96, r25	; 0x800b96 <impulsi+0x1>
    106c:	80 93 95 0b 	sts	0x0B95, r24	; 0x800b95 <impulsi>
    1070:	06 9b       	sbis	0x00, 6	; 0
    1072:	09 c0       	rjmp	.+18     	; 0x1086 <__vector_4+0x3a>
    1074:	80 91 95 0b 	lds	r24, 0x0B95	; 0x800b95 <impulsi>
    1078:	90 91 96 0b 	lds	r25, 0x0B96	; 0x800b96 <impulsi+0x1>
    107c:	01 96       	adiw	r24, 0x01	; 1
    107e:	90 93 96 0b 	sts	0x0B96, r25	; 0x800b96 <impulsi+0x1>
    1082:	80 93 95 0b 	sts	0x0B95, r24	; 0x800b95 <impulsi>
    1086:	9f 91       	pop	r25
    1088:	8f 91       	pop	r24
    108a:	0f 90       	pop	r0
    108c:	0f be       	out	0x3f, r0	; 63
    108e:	0f 90       	pop	r0
    1090:	1f 90       	pop	r1
    1092:	18 95       	reti

00001094 <__vector_7>:
    1094:	1f 92       	push	r1
    1096:	0f 92       	push	r0
    1098:	0f b6       	in	r0, 0x3f	; 63
    109a:	0f 92       	push	r0
    109c:	11 24       	eor	r1, r1
    109e:	0b b6       	in	r0, 0x3b	; 59
    10a0:	0f 92       	push	r0
    10a2:	2f 93       	push	r18
    10a4:	3f 93       	push	r19
    10a6:	4f 93       	push	r20
    10a8:	5f 93       	push	r21
    10aa:	6f 93       	push	r22
    10ac:	7f 93       	push	r23
    10ae:	8f 93       	push	r24
    10b0:	9f 93       	push	r25
    10b2:	af 93       	push	r26
    10b4:	bf 93       	push	r27
    10b6:	ef 93       	push	r30
    10b8:	ff 93       	push	r31
    10ba:	80 91 97 0b 	lds	r24, 0x0B97	; 0x800b97 <stato_procedura>
    10be:	90 91 98 0b 	lds	r25, 0x0B98	; 0x800b98 <stato_procedura+0x1>
    10c2:	04 97       	sbiw	r24, 0x04	; 4
    10c4:	09 f0       	breq	.+2      	; 0x10c8 <__vector_7+0x34>
    10c6:	84 c0       	rjmp	.+264    	; 0x11d0 <__vector_7+0x13c>
    10c8:	4e 9b       	sbis	0x09, 6	; 9
    10ca:	29 c0       	rjmp	.+82     	; 0x111e <__vector_7+0x8a>
    10cc:	80 91 f1 0b 	lds	r24, 0x0BF1	; 0x800bf1 <intConsecutivePresses>
    10d0:	90 91 f2 0b 	lds	r25, 0x0BF2	; 0x800bf2 <intConsecutivePresses+0x1>
    10d4:	01 96       	adiw	r24, 0x01	; 1
    10d6:	90 93 f2 0b 	sts	0x0BF2, r25	; 0x800bf2 <intConsecutivePresses+0x1>
    10da:	80 93 f1 0b 	sts	0x0BF1, r24	; 0x800bf1 <intConsecutivePresses>
    10de:	80 91 f1 0b 	lds	r24, 0x0BF1	; 0x800bf1 <intConsecutivePresses>
    10e2:	90 91 f2 0b 	lds	r25, 0x0BF2	; 0x800bf2 <intConsecutivePresses+0x1>
    10e6:	18 16       	cp	r1, r24
    10e8:	19 06       	cpc	r1, r25
    10ea:	84 f5       	brge	.+96     	; 0x114c <__vector_7+0xb8>
    10ec:	82 e4       	ldi	r24, 0x42	; 66
    10ee:	c2 de       	rcall	.-636    	; 0xe74 <_Z13abilitaPulserc>
    10f0:	67 e0       	ldi	r22, 0x07	; 7
    10f2:	70 e0       	ldi	r23, 0x00	; 0
    10f4:	80 e0       	ldi	r24, 0x00	; 0
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	31 df       	rcall	.-414    	; 0xf5c <_Z18Rele_Abilitazione2ii>
    10fa:	69 ee       	ldi	r22, 0xE9	; 233
    10fc:	71 e0       	ldi	r23, 0x01	; 1
    10fe:	85 e6       	ldi	r24, 0x65	; 101
    1100:	9b e0       	ldi	r25, 0x0B	; 11
    1102:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <_ZN6StringaSEPKc>
    1106:	6f ed       	ldi	r22, 0xDF	; 223
    1108:	72 e0       	ldi	r23, 0x02	; 2
    110a:	83 ea       	ldi	r24, 0xA3	; 163
    110c:	9b e0       	ldi	r25, 0x0B	; 11
    110e:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <_ZN6StringaSEPKc>
    1112:	6a e0       	ldi	r22, 0x0A	; 10
    1114:	70 e0       	ldi	r23, 0x00	; 0
    1116:	80 e0       	ldi	r24, 0x00	; 0
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	3e dd       	rcall	.-1412   	; 0xb98 <_Z11avanzaStatom>
    111c:	0f c0       	rjmp	.+30     	; 0x113c <__vector_7+0xa8>
    111e:	80 91 ef 0b 	lds	r24, 0x0BEF	; 0x800bef <intConsecutiveNonPresses>
    1122:	90 91 f0 0b 	lds	r25, 0x0BF0	; 0x800bf0 <intConsecutiveNonPresses+0x1>
    1126:	01 96       	adiw	r24, 0x01	; 1
    1128:	90 93 f0 0b 	sts	0x0BF0, r25	; 0x800bf0 <intConsecutiveNonPresses+0x1>
    112c:	80 93 ef 0b 	sts	0x0BEF, r24	; 0x800bef <intConsecutiveNonPresses>
    1130:	80 91 ef 0b 	lds	r24, 0x0BEF	; 0x800bef <intConsecutiveNonPresses>
    1134:	90 91 f0 0b 	lds	r25, 0x0BF0	; 0x800bf0 <intConsecutiveNonPresses+0x1>
    1138:	02 97       	sbiw	r24, 0x02	; 2
    113a:	44 f0       	brlt	.+16     	; 0x114c <__vector_7+0xb8>
    113c:	10 92 f2 0b 	sts	0x0BF2, r1	; 0x800bf2 <intConsecutivePresses+0x1>
    1140:	10 92 f1 0b 	sts	0x0BF1, r1	; 0x800bf1 <intConsecutivePresses>
    1144:	10 92 f0 0b 	sts	0x0BF0, r1	; 0x800bf0 <intConsecutiveNonPresses+0x1>
    1148:	10 92 ef 0b 	sts	0x0BEF, r1	; 0x800bef <intConsecutiveNonPresses>
    114c:	4f 9b       	sbis	0x09, 7	; 9
    114e:	29 c0       	rjmp	.+82     	; 0x11a2 <__vector_7+0x10e>
    1150:	80 91 f1 0b 	lds	r24, 0x0BF1	; 0x800bf1 <intConsecutivePresses>
    1154:	90 91 f2 0b 	lds	r25, 0x0BF2	; 0x800bf2 <intConsecutivePresses+0x1>
    1158:	01 96       	adiw	r24, 0x01	; 1
    115a:	90 93 f2 0b 	sts	0x0BF2, r25	; 0x800bf2 <intConsecutivePresses+0x1>
    115e:	80 93 f1 0b 	sts	0x0BF1, r24	; 0x800bf1 <intConsecutivePresses>
    1162:	80 91 f1 0b 	lds	r24, 0x0BF1	; 0x800bf1 <intConsecutivePresses>
    1166:	90 91 f2 0b 	lds	r25, 0x0BF2	; 0x800bf2 <intConsecutivePresses+0x1>
    116a:	18 16       	cp	r1, r24
    116c:	19 06       	cpc	r1, r25
    116e:	84 f5       	brge	.+96     	; 0x11d0 <__vector_7+0x13c>
    1170:	84 e4       	ldi	r24, 0x44	; 68
    1172:	80 de       	rcall	.-768    	; 0xe74 <_Z13abilitaPulserc>
    1174:	67 e0       	ldi	r22, 0x07	; 7
    1176:	70 e0       	ldi	r23, 0x00	; 0
    1178:	80 e0       	ldi	r24, 0x00	; 0
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	b4 de       	rcall	.-664    	; 0xee6 <_Z18Rele_Abilitazione1ii>
    117e:	67 ee       	ldi	r22, 0xE7	; 231
    1180:	72 e0       	ldi	r23, 0x02	; 2
    1182:	85 e6       	ldi	r24, 0x65	; 101
    1184:	9b e0       	ldi	r25, 0x0B	; 11
    1186:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <_ZN6StringaSEPKc>
    118a:	69 ee       	ldi	r22, 0xE9	; 233
    118c:	72 e0       	ldi	r23, 0x02	; 2
    118e:	83 ea       	ldi	r24, 0xA3	; 163
    1190:	9b e0       	ldi	r25, 0x0B	; 11
    1192:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <_ZN6StringaSEPKc>
    1196:	6a e0       	ldi	r22, 0x0A	; 10
    1198:	70 e0       	ldi	r23, 0x00	; 0
    119a:	80 e0       	ldi	r24, 0x00	; 0
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	fc dc       	rcall	.-1544   	; 0xb98 <_Z11avanzaStatom>
    11a0:	0f c0       	rjmp	.+30     	; 0x11c0 <__vector_7+0x12c>
    11a2:	80 91 ef 0b 	lds	r24, 0x0BEF	; 0x800bef <intConsecutiveNonPresses>
    11a6:	90 91 f0 0b 	lds	r25, 0x0BF0	; 0x800bf0 <intConsecutiveNonPresses+0x1>
    11aa:	01 96       	adiw	r24, 0x01	; 1
    11ac:	90 93 f0 0b 	sts	0x0BF0, r25	; 0x800bf0 <intConsecutiveNonPresses+0x1>
    11b0:	80 93 ef 0b 	sts	0x0BEF, r24	; 0x800bef <intConsecutiveNonPresses>
    11b4:	80 91 ef 0b 	lds	r24, 0x0BEF	; 0x800bef <intConsecutiveNonPresses>
    11b8:	90 91 f0 0b 	lds	r25, 0x0BF0	; 0x800bf0 <intConsecutiveNonPresses+0x1>
    11bc:	02 97       	sbiw	r24, 0x02	; 2
    11be:	44 f0       	brlt	.+16     	; 0x11d0 <__vector_7+0x13c>
    11c0:	10 92 f2 0b 	sts	0x0BF2, r1	; 0x800bf2 <intConsecutivePresses+0x1>
    11c4:	10 92 f1 0b 	sts	0x0BF1, r1	; 0x800bf1 <intConsecutivePresses>
    11c8:	10 92 f0 0b 	sts	0x0BF0, r1	; 0x800bf0 <intConsecutiveNonPresses+0x1>
    11cc:	10 92 ef 0b 	sts	0x0BEF, r1	; 0x800bef <intConsecutiveNonPresses>
    11d0:	ff 91       	pop	r31
    11d2:	ef 91       	pop	r30
    11d4:	bf 91       	pop	r27
    11d6:	af 91       	pop	r26
    11d8:	9f 91       	pop	r25
    11da:	8f 91       	pop	r24
    11dc:	7f 91       	pop	r23
    11de:	6f 91       	pop	r22
    11e0:	5f 91       	pop	r21
    11e2:	4f 91       	pop	r20
    11e4:	3f 91       	pop	r19
    11e6:	2f 91       	pop	r18
    11e8:	0f 90       	pop	r0
    11ea:	0b be       	out	0x3b, r0	; 59
    11ec:	0f 90       	pop	r0
    11ee:	0f be       	out	0x3f, r0	; 63
    11f0:	0f 90       	pop	r0
    11f2:	1f 90       	pop	r1
    11f4:	18 95       	reti

000011f6 <_GLOBAL__sub_I_intConsecutivePresses>:
    11f6:	8f 92       	push	r8
    11f8:	af 92       	push	r10
    11fa:	cf 92       	push	r12
    11fc:	ef 92       	push	r14
    11fe:	0f 93       	push	r16
    1200:	00 e0       	ldi	r16, 0x00	; 0
    1202:	20 e0       	ldi	r18, 0x00	; 0
    1204:	40 e0       	ldi	r20, 0x00	; 0
    1206:	60 e0       	ldi	r22, 0x00	; 0
    1208:	83 ef       	ldi	r24, 0xF3	; 243
    120a:	9b e0       	ldi	r25, 0x0B	; 11
    120c:	0e 94 6f 3a 	call	0x74de	; 0x74de <_ZN9IPAddressC1Ehhhh>
    1210:	63 ec       	ldi	r22, 0xC3	; 195
    1212:	71 e0       	ldi	r23, 0x01	; 1
    1214:	82 ee       	ldi	r24, 0xE2	; 226
    1216:	9b e0       	ldi	r25, 0x0B	; 11
    1218:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <_ZN6StringC1EPKc>
    121c:	63 ec       	ldi	r22, 0xC3	; 195
    121e:	71 e0       	ldi	r23, 0x01	; 1
    1220:	88 ee       	ldi	r24, 0xE8	; 232
    1222:	9b e0       	ldi	r25, 0x0B	; 11
    1224:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <_ZN6StringC1EPKc>
    1228:	1f 92       	push	r1
    122a:	83 e0       	ldi	r24, 0x03	; 3
    122c:	8f 93       	push	r24
    122e:	87 e0       	ldi	r24, 0x07	; 7
    1230:	88 2e       	mov	r8, r24
    1232:	96 e0       	ldi	r25, 0x06	; 6
    1234:	a9 2e       	mov	r10, r25
    1236:	25 e0       	ldi	r18, 0x05	; 5
    1238:	c2 2e       	mov	r12, r18
    123a:	34 e0       	ldi	r19, 0x04	; 4
    123c:	e3 2e       	mov	r14, r19
    123e:	21 e0       	ldi	r18, 0x01	; 1
    1240:	42 e0       	ldi	r20, 0x02	; 2
    1242:	67 e2       	ldi	r22, 0x27	; 39
    1244:	80 ec       	ldi	r24, 0xC0	; 192
    1246:	9b e0       	ldi	r25, 0x0B	; 11
    1248:	0e 94 1d 2c 	call	0x583a	; 0x583a <_ZN17LiquidCrystal_I2CC1Ehhhhhhhhh13t_backlighPol>
    124c:	43 e0       	ldi	r20, 0x03	; 3
    124e:	64 e0       	ldi	r22, 0x04	; 4
    1250:	89 ea       	ldi	r24, 0xA9	; 169
    1252:	9b e0       	ldi	r25, 0x0B	; 11
    1254:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <_ZN14Adafruit_PN532C1Ehh>
    1258:	61 ef       	ldi	r22, 0xF1	; 241
    125a:	72 e0       	ldi	r23, 0x02	; 2
    125c:	83 ea       	ldi	r24, 0xA3	; 163
    125e:	9b e0       	ldi	r25, 0x0B	; 11
    1260:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <_ZN6StringC1EPKc>
    1264:	63 ec       	ldi	r22, 0xC3	; 195
    1266:	71 e0       	ldi	r23, 0x01	; 1
    1268:	8d e9       	ldi	r24, 0x9D	; 157
    126a:	9b e0       	ldi	r25, 0x0B	; 11
    126c:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <_ZN6StringC1EPKc>
    1270:	63 ec       	ldi	r22, 0xC3	; 195
    1272:	71 e0       	ldi	r23, 0x01	; 1
    1274:	8f e8       	ldi	r24, 0x8F	; 143
    1276:	9b e0       	ldi	r25, 0x0B	; 11
    1278:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <_ZN6StringC1EPKc>
    127c:	63 ec       	ldi	r22, 0xC3	; 195
    127e:	71 e0       	ldi	r23, 0x01	; 1
    1280:	8b e6       	ldi	r24, 0x6B	; 107
    1282:	9b e0       	ldi	r25, 0x0B	; 11
    1284:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <_ZN6StringC1EPKc>
    1288:	63 ec       	ldi	r22, 0xC3	; 195
    128a:	71 e0       	ldi	r23, 0x01	; 1
    128c:	81 e7       	ldi	r24, 0x71	; 113
    128e:	9b e0       	ldi	r25, 0x0B	; 11
    1290:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <_ZN6StringC1EPKc>
    1294:	63 ec       	ldi	r22, 0xC3	; 195
    1296:	71 e0       	ldi	r23, 0x01	; 1
    1298:	87 e7       	ldi	r24, 0x77	; 119
    129a:	9b e0       	ldi	r25, 0x0B	; 11
    129c:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <_ZN6StringC1EPKc>
    12a0:	63 ec       	ldi	r22, 0xC3	; 195
    12a2:	71 e0       	ldi	r23, 0x01	; 1
    12a4:	8d e7       	ldi	r24, 0x7D	; 125
    12a6:	9b e0       	ldi	r25, 0x0B	; 11
    12a8:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <_ZN6StringC1EPKc>
    12ac:	63 ec       	ldi	r22, 0xC3	; 195
    12ae:	71 e0       	ldi	r23, 0x01	; 1
    12b0:	83 e8       	ldi	r24, 0x83	; 131
    12b2:	9b e0       	ldi	r25, 0x0B	; 11
    12b4:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <_ZN6StringC1EPKc>
    12b8:	63 ec       	ldi	r22, 0xC3	; 195
    12ba:	71 e0       	ldi	r23, 0x01	; 1
    12bc:	89 e8       	ldi	r24, 0x89	; 137
    12be:	9b e0       	ldi	r25, 0x0B	; 11
    12c0:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <_ZN6StringC1EPKc>
    12c4:	6a ef       	ldi	r22, 0xFA	; 250
    12c6:	72 e0       	ldi	r23, 0x02	; 2
    12c8:	85 e6       	ldi	r24, 0x65	; 101
    12ca:	9b e0       	ldi	r25, 0x0B	; 11
    12cc:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <_ZN6StringC1EPKc>
    12d0:	6a ef       	ldi	r22, 0xFA	; 250
    12d2:	72 e0       	ldi	r23, 0x02	; 2
    12d4:	89 e5       	ldi	r24, 0x59	; 89
    12d6:	9b e0       	ldi	r25, 0x0B	; 11
    12d8:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <_ZN6StringC1EPKc>
    12dc:	6a ef       	ldi	r22, 0xFA	; 250
    12de:	72 e0       	ldi	r23, 0x02	; 2
    12e0:	8f e5       	ldi	r24, 0x5F	; 95
    12e2:	9b e0       	ldi	r25, 0x0B	; 11
    12e4:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <_ZN6StringC1EPKc>
    12e8:	63 ec       	ldi	r22, 0xC3	; 195
    12ea:	71 e0       	ldi	r23, 0x01	; 1
    12ec:	83 e5       	ldi	r24, 0x53	; 83
    12ee:	9b e0       	ldi	r25, 0x0B	; 11
    12f0:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <_ZN6StringC1EPKc>
    12f4:	63 ec       	ldi	r22, 0xC3	; 195
    12f6:	71 e0       	ldi	r23, 0x01	; 1
    12f8:	8d e4       	ldi	r24, 0x4D	; 77
    12fa:	9b e0       	ldi	r25, 0x0B	; 11
    12fc:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <_ZN6StringC1EPKc>
    1300:	6a ef       	ldi	r22, 0xFA	; 250
    1302:	72 e0       	ldi	r23, 0x02	; 2
    1304:	85 e3       	ldi	r24, 0x35	; 53
    1306:	9b e0       	ldi	r25, 0x0B	; 11
    1308:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <_ZN6StringC1EPKc>
    130c:	6a ef       	ldi	r22, 0xFA	; 250
    130e:	72 e0       	ldi	r23, 0x02	; 2
    1310:	8b e3       	ldi	r24, 0x3B	; 59
    1312:	9b e0       	ldi	r25, 0x0B	; 11
    1314:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <_ZN6StringC1EPKc>
    1318:	6a ef       	ldi	r22, 0xFA	; 250
    131a:	72 e0       	ldi	r23, 0x02	; 2
    131c:	81 e4       	ldi	r24, 0x41	; 65
    131e:	9b e0       	ldi	r25, 0x0B	; 11
    1320:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <_ZN6StringC1EPKc>
    1324:	6a ef       	ldi	r22, 0xFA	; 250
    1326:	72 e0       	ldi	r23, 0x02	; 2
    1328:	87 e4       	ldi	r24, 0x47	; 71
    132a:	9b e0       	ldi	r25, 0x0B	; 11
    132c:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <_ZN6StringC1EPKc>
    1330:	09 e0       	ldi	r16, 0x09	; 9
    1332:	25 e0       	ldi	r18, 0x05	; 5
    1334:	48 ea       	ldi	r20, 0xA8	; 168
    1336:	60 ec       	ldi	r22, 0xC0	; 192
    1338:	8b ec       	ldi	r24, 0xCB	; 203
    133a:	9a e0       	ldi	r25, 0x0A	; 10
    133c:	0e 94 6f 3a 	call	0x74de	; 0x74de <_ZN9IPAddressC1Ehhhh>
    1340:	05 e1       	ldi	r16, 0x15	; 21
    1342:	21 e0       	ldi	r18, 0x01	; 1
    1344:	48 ea       	ldi	r20, 0xA8	; 168
    1346:	60 ec       	ldi	r22, 0xC0	; 192
    1348:	85 ec       	ldi	r24, 0xC5	; 197
    134a:	9a e0       	ldi	r25, 0x0A	; 10
    134c:	0e 94 6f 3a 	call	0x74de	; 0x74de <_ZN9IPAddressC1Ehhhh>
    1350:	01 e0       	ldi	r16, 0x01	; 1
    1352:	20 e0       	ldi	r18, 0x00	; 0
    1354:	48 ea       	ldi	r20, 0xA8	; 168
    1356:	60 ec       	ldi	r22, 0xC0	; 192
    1358:	8f eb       	ldi	r24, 0xBF	; 191
    135a:	9a e0       	ldi	r25, 0x0A	; 10
    135c:	0e 94 6f 3a 	call	0x74de	; 0x74de <_ZN9IPAddressC1Ehhhh>
    1360:	00 e0       	ldi	r16, 0x00	; 0
    1362:	20 e0       	ldi	r18, 0x00	; 0
    1364:	4f ef       	ldi	r20, 0xFF	; 255
    1366:	6f ef       	ldi	r22, 0xFF	; 255
    1368:	89 eb       	ldi	r24, 0xB9	; 185
    136a:	9a e0       	ldi	r25, 0x0A	; 10
    136c:	0e 94 6f 3a 	call	0x74de	; 0x74de <_ZN9IPAddressC1Ehhhh>
    1370:	8c ea       	ldi	r24, 0xAC	; 172
    1372:	9a e0       	ldi	r25, 0x0A	; 10
    1374:	0e 94 61 22 	call	0x44c2	; 0x44c2 <_ZN14EthernetClientC1Ev>
    1378:	8f e9       	ldi	r24, 0x9F	; 159
    137a:	9a e0       	ldi	r25, 0x0A	; 10
    137c:	0e 94 61 22 	call	0x44c2	; 0x44c2 <_ZN14EthernetClientC1Ev>
    1380:	69 e1       	ldi	r22, 0x19	; 25
    1382:	79 e7       	ldi	r23, 0x79	; 121
    1384:	89 e9       	ldi	r24, 0x99	; 153
    1386:	9a e0       	ldi	r25, 0x0A	; 10
    1388:	0e 94 b0 23 	call	0x4760	; 0x4760 <_ZN14EthernetServerC1Ej>
    138c:	8c e8       	ldi	r24, 0x8C	; 140
    138e:	9a e0       	ldi	r25, 0x0A	; 10
    1390:	0e 94 61 22 	call	0x44c2	; 0x44c2 <_ZN14EthernetClientC1Ev>
    1394:	80 e8       	ldi	r24, 0x80	; 128
    1396:	9a e0       	ldi	r25, 0x0A	; 10
    1398:	0e 94 3a 1c 	call	0x3874	; 0x3874 <_ZN13DS3231M_ClassC1Ev>
    139c:	40 e0       	ldi	r20, 0x00	; 0
    139e:	50 e0       	ldi	r21, 0x00	; 0
    13a0:	ba 01       	movw	r22, r20
    13a2:	8e e6       	ldi	r24, 0x6E	; 110
    13a4:	9a e0       	ldi	r25, 0x0A	; 10
    13a6:	0e 94 ce 1a 	call	0x359c	; 0x359c <_ZN8DateTimeC1Em>
    13aa:	63 ec       	ldi	r22, 0xC3	; 195
    13ac:	71 e0       	ldi	r23, 0x01	; 1
    13ae:	84 e6       	ldi	r24, 0x64	; 100
    13b0:	9a e0       	ldi	r25, 0x0A	; 10
    13b2:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <_ZN6StringC1EPKc>
    13b6:	63 ec       	ldi	r22, 0xC3	; 195
    13b8:	71 e0       	ldi	r23, 0x01	; 1
    13ba:	8e e5       	ldi	r24, 0x5E	; 94
    13bc:	9a e0       	ldi	r25, 0x0A	; 10
    13be:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <_ZN6StringC1EPKc>
    13c2:	0f 90       	pop	r0
    13c4:	0f 90       	pop	r0
    13c6:	64 e0       	ldi	r22, 0x04	; 4
    13c8:	8a e7       	ldi	r24, 0x7A	; 122
    13ca:	99 e0       	ldi	r25, 0x09	; 9
    13cc:	0f 91       	pop	r16
    13ce:	ef 90       	pop	r14
    13d0:	cf 90       	pop	r12
    13d2:	af 90       	pop	r10
    13d4:	8f 90       	pop	r8
    13d6:	0c 94 d7 2c 	jmp	0x59ae	; 0x59ae <_ZN8SPIFlashC1Eh>

000013da <_GLOBAL__sub_D_intConsecutivePresses>:
    13da:	cf 93       	push	r28
    13dc:	df 93       	push	r29
    13de:	8e e5       	ldi	r24, 0x5E	; 94
    13e0:	9a e0       	ldi	r25, 0x0A	; 10
    13e2:	0e 94 78 3d 	call	0x7af0	; 0x7af0 <_ZN6StringD1Ev>
    13e6:	84 e6       	ldi	r24, 0x64	; 100
    13e8:	9a e0       	ldi	r25, 0x0A	; 10
    13ea:	0e 94 78 3d 	call	0x7af0	; 0x7af0 <_ZN6StringD1Ev>
    13ee:	80 e8       	ldi	r24, 0x80	; 128
    13f0:	9a e0       	ldi	r25, 0x0A	; 10
    13f2:	0e 94 41 1c 	call	0x3882	; 0x3882 <_ZN13DS3231M_ClassD1Ev>
    13f6:	87 e4       	ldi	r24, 0x47	; 71
    13f8:	9b e0       	ldi	r25, 0x0B	; 11
    13fa:	0e 94 78 3d 	call	0x7af0	; 0x7af0 <_ZN6StringD1Ev>
    13fe:	81 e4       	ldi	r24, 0x41	; 65
    1400:	9b e0       	ldi	r25, 0x0B	; 11
    1402:	0e 94 78 3d 	call	0x7af0	; 0x7af0 <_ZN6StringD1Ev>
    1406:	8b e3       	ldi	r24, 0x3B	; 59
    1408:	9b e0       	ldi	r25, 0x0B	; 11
    140a:	0e 94 78 3d 	call	0x7af0	; 0x7af0 <_ZN6StringD1Ev>
    140e:	85 e3       	ldi	r24, 0x35	; 53
    1410:	9b e0       	ldi	r25, 0x0B	; 11
    1412:	0e 94 78 3d 	call	0x7af0	; 0x7af0 <_ZN6StringD1Ev>
    1416:	8d e4       	ldi	r24, 0x4D	; 77
    1418:	9b e0       	ldi	r25, 0x0B	; 11
    141a:	0e 94 78 3d 	call	0x7af0	; 0x7af0 <_ZN6StringD1Ev>
    141e:	83 e5       	ldi	r24, 0x53	; 83
    1420:	9b e0       	ldi	r25, 0x0B	; 11
    1422:	0e 94 78 3d 	call	0x7af0	; 0x7af0 <_ZN6StringD1Ev>
    1426:	8f e5       	ldi	r24, 0x5F	; 95
    1428:	9b e0       	ldi	r25, 0x0B	; 11
    142a:	0e 94 78 3d 	call	0x7af0	; 0x7af0 <_ZN6StringD1Ev>
    142e:	89 e5       	ldi	r24, 0x59	; 89
    1430:	9b e0       	ldi	r25, 0x0B	; 11
    1432:	0e 94 78 3d 	call	0x7af0	; 0x7af0 <_ZN6StringD1Ev>
    1436:	85 e6       	ldi	r24, 0x65	; 101
    1438:	9b e0       	ldi	r25, 0x0B	; 11
    143a:	0e 94 78 3d 	call	0x7af0	; 0x7af0 <_ZN6StringD1Ev>
    143e:	cf e8       	ldi	r28, 0x8F	; 143
    1440:	db e0       	ldi	r29, 0x0B	; 11
    1442:	26 97       	sbiw	r28, 0x06	; 6
    1444:	ce 01       	movw	r24, r28
    1446:	0e 94 78 3d 	call	0x7af0	; 0x7af0 <_ZN6StringD1Ev>
    144a:	8b e0       	ldi	r24, 0x0B	; 11
    144c:	cb 36       	cpi	r28, 0x6B	; 107
    144e:	d8 07       	cpc	r29, r24
    1450:	c1 f7       	brne	.-16     	; 0x1442 <_GLOBAL__sub_D_intConsecutivePresses+0x68>
    1452:	8f e8       	ldi	r24, 0x8F	; 143
    1454:	9b e0       	ldi	r25, 0x0B	; 11
    1456:	0e 94 78 3d 	call	0x7af0	; 0x7af0 <_ZN6StringD1Ev>
    145a:	8d e9       	ldi	r24, 0x9D	; 157
    145c:	9b e0       	ldi	r25, 0x0B	; 11
    145e:	0e 94 78 3d 	call	0x7af0	; 0x7af0 <_ZN6StringD1Ev>
    1462:	83 ea       	ldi	r24, 0xA3	; 163
    1464:	9b e0       	ldi	r25, 0x0B	; 11
    1466:	0e 94 78 3d 	call	0x7af0	; 0x7af0 <_ZN6StringD1Ev>
    146a:	88 ee       	ldi	r24, 0xE8	; 232
    146c:	9b e0       	ldi	r25, 0x0B	; 11
    146e:	0e 94 78 3d 	call	0x7af0	; 0x7af0 <_ZN6StringD1Ev>
    1472:	82 ee       	ldi	r24, 0xE2	; 226
    1474:	9b e0       	ldi	r25, 0x0B	; 11
    1476:	df 91       	pop	r29
    1478:	cf 91       	pop	r28
    147a:	0c 94 78 3d 	jmp	0x7af0	; 0x7af0 <_ZN6StringD1Ev>

0000147e <_Z19InizializzaEthernetv>:
    147e:	cf 92       	push	r12
    1480:	df 92       	push	r13
    1482:	ef 92       	push	r14
    1484:	ff 92       	push	r15
    1486:	0f 93       	push	r16
    1488:	1f 93       	push	r17
    148a:	cf 93       	push	r28
    148c:	df 93       	push	r29
    148e:	cd b7       	in	r28, 0x3d	; 61
    1490:	de b7       	in	r29, 0x3e	; 62
    1492:	68 97       	sbiw	r28, 0x18	; 24
    1494:	0f b6       	in	r0, 0x3f	; 63
    1496:	f8 94       	cli
    1498:	de bf       	out	0x3e, r29	; 62
    149a:	0f be       	out	0x3f, r0	; 63
    149c:	cd bf       	out	0x3d, r28	; 61
    149e:	8a e5       	ldi	r24, 0x5A	; 90
    14a0:	c8 2e       	mov	r12, r24
    14a2:	89 e0       	ldi	r24, 0x09	; 9
    14a4:	d8 2e       	mov	r13, r24
    14a6:	da 82       	std	Y+2, r13	; 0x02
    14a8:	c9 82       	std	Y+1, r12	; 0x01
    14aa:	80 91 bb 0a 	lds	r24, 0x0ABB	; 0x800abb <subnet+0x2>
    14ae:	90 91 bc 0a 	lds	r25, 0x0ABC	; 0x800abc <subnet+0x3>
    14b2:	a0 91 bd 0a 	lds	r26, 0x0ABD	; 0x800abd <subnet+0x4>
    14b6:	b0 91 be 0a 	lds	r27, 0x0ABE	; 0x800abe <subnet+0x5>
    14ba:	8b 83       	std	Y+3, r24	; 0x03
    14bc:	9c 83       	std	Y+4, r25	; 0x04
    14be:	ad 83       	std	Y+5, r26	; 0x05
    14c0:	be 83       	std	Y+6, r27	; 0x06
    14c2:	d8 86       	std	Y+8, r13	; 0x08
    14c4:	cf 82       	std	Y+7, r12	; 0x07
    14c6:	80 91 c1 0a 	lds	r24, 0x0AC1	; 0x800ac1 <gateway+0x2>
    14ca:	90 91 c2 0a 	lds	r25, 0x0AC2	; 0x800ac2 <gateway+0x3>
    14ce:	a0 91 c3 0a 	lds	r26, 0x0AC3	; 0x800ac3 <gateway+0x4>
    14d2:	b0 91 c4 0a 	lds	r27, 0x0AC4	; 0x800ac4 <gateway+0x5>
    14d6:	89 87       	std	Y+9, r24	; 0x09
    14d8:	9a 87       	std	Y+10, r25	; 0x0a
    14da:	ab 87       	std	Y+11, r26	; 0x0b
    14dc:	bc 87       	std	Y+12, r27	; 0x0c
    14de:	de 86       	std	Y+14, r13	; 0x0e
    14e0:	cd 86       	std	Y+13, r12	; 0x0d
    14e2:	80 91 c7 0a 	lds	r24, 0x0AC7	; 0x800ac7 <myDns+0x2>
    14e6:	90 91 c8 0a 	lds	r25, 0x0AC8	; 0x800ac8 <myDns+0x3>
    14ea:	a0 91 c9 0a 	lds	r26, 0x0AC9	; 0x800ac9 <myDns+0x4>
    14ee:	b0 91 ca 0a 	lds	r27, 0x0ACA	; 0x800aca <myDns+0x5>
    14f2:	8f 87       	std	Y+15, r24	; 0x0f
    14f4:	98 8b       	std	Y+16, r25	; 0x10
    14f6:	a9 8b       	std	Y+17, r26	; 0x11
    14f8:	ba 8b       	std	Y+18, r27	; 0x12
    14fa:	60 e3       	ldi	r22, 0x30	; 48
    14fc:	71 e0       	ldi	r23, 0x01	; 1
    14fe:	ce 01       	movw	r24, r28
    1500:	43 96       	adiw	r24, 0x13	; 19
    1502:	0e 94 7b 3a 	call	0x74f6	; 0x74f6 <_ZN9IPAddressC1EPKh>
    1506:	ce 01       	movw	r24, r28
    1508:	01 96       	adiw	r24, 0x01	; 1
    150a:	7c 01       	movw	r14, r24
    150c:	8e 01       	movw	r16, r28
    150e:	09 5f       	subi	r16, 0xF9	; 249
    1510:	1f 4f       	sbci	r17, 0xFF	; 255
    1512:	9e 01       	movw	r18, r28
    1514:	23 5f       	subi	r18, 0xF3	; 243
    1516:	3f 4f       	sbci	r19, 0xFF	; 255
    1518:	ae 01       	movw	r20, r28
    151a:	4d 5e       	subi	r20, 0xED	; 237
    151c:	5f 4f       	sbci	r21, 0xFF	; 255
    151e:	6a e2       	ldi	r22, 0x2A	; 42
    1520:	71 e0       	ldi	r23, 0x01	; 1
    1522:	85 e4       	ldi	r24, 0x45	; 69
    1524:	9c e0       	ldi	r25, 0x0C	; 12
    1526:	0e 94 0d 21 	call	0x421a	; 0x421a <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_>
    152a:	89 e9       	ldi	r24, 0x99	; 153
    152c:	9a e0       	ldi	r25, 0x0A	; 10
    152e:	0e 94 70 23 	call	0x46e0	; 0x46e0 <_ZN14EthernetServer5beginEv>
    1532:	da 82       	std	Y+2, r13	; 0x02
    1534:	c9 82       	std	Y+1, r12	; 0x01
    1536:	80 91 cd 0a 	lds	r24, 0x0ACD	; 0x800acd <servizio+0x2>
    153a:	90 91 ce 0a 	lds	r25, 0x0ACE	; 0x800ace <servizio+0x3>
    153e:	a0 91 cf 0a 	lds	r26, 0x0ACF	; 0x800acf <servizio+0x4>
    1542:	b0 91 d0 0a 	lds	r27, 0x0AD0	; 0x800ad0 <servizio+0x5>
    1546:	8b 83       	std	Y+3, r24	; 0x03
    1548:	9c 83       	std	Y+4, r25	; 0x04
    154a:	ad 83       	std	Y+5, r26	; 0x05
    154c:	be 83       	std	Y+6, r27	; 0x06
    154e:	49 ef       	ldi	r20, 0xF9	; 249
    1550:	5a e2       	ldi	r21, 0x2A	; 42
    1552:	b7 01       	movw	r22, r14
    1554:	8f e9       	ldi	r24, 0x9F	; 159
    1556:	9a e0       	ldi	r25, 0x0A	; 10
    1558:	0e 94 f2 22 	call	0x45e4	; 0x45e4 <_ZN14EthernetClient7connectE9IPAddressj>
    155c:	89 2b       	or	r24, r25
    155e:	81 f0       	breq	.+32     	; 0x1580 <_Z19InizializzaEthernetv+0x102>
    1560:	6c ef       	ldi	r22, 0xFC	; 252
    1562:	72 e0       	ldi	r23, 0x02	; 2
    1564:	8f e4       	ldi	r24, 0x4F	; 79
    1566:	9d e0       	ldi	r25, 0x0D	; 13
    1568:	0e 94 39 3b 	call	0x7672	; 0x7672 <_ZN5Print7printlnEPKc>
    156c:	8f e9       	ldi	r24, 0x9F	; 159
    156e:	9a e0       	ldi	r25, 0x0A	; 10
    1570:	0e 94 91 22 	call	0x4522	; 0x4522 <_ZN14EthernetClient9connectedEv>
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	90 93 9a 0b 	sts	0x0B9A, r25	; 0x800b9a <Connected+0x1>
    157a:	80 93 99 0b 	sts	0x0B99, r24	; 0x800b99 <Connected>
    157e:	06 c0       	rjmp	.+12     	; 0x158c <_Z19InizializzaEthernetv+0x10e>
    1580:	6f e0       	ldi	r22, 0x0F	; 15
    1582:	73 e0       	ldi	r23, 0x03	; 3
    1584:	8f e4       	ldi	r24, 0x4F	; 79
    1586:	9d e0       	ldi	r25, 0x0D	; 13
    1588:	0e 94 39 3b 	call	0x7672	; 0x7672 <_ZN5Print7printlnEPKc>
    158c:	68 96       	adiw	r28, 0x18	; 24
    158e:	0f b6       	in	r0, 0x3f	; 63
    1590:	f8 94       	cli
    1592:	de bf       	out	0x3e, r29	; 62
    1594:	0f be       	out	0x3f, r0	; 63
    1596:	cd bf       	out	0x3d, r28	; 61
    1598:	df 91       	pop	r29
    159a:	cf 91       	pop	r28
    159c:	1f 91       	pop	r17
    159e:	0f 91       	pop	r16
    15a0:	ff 90       	pop	r15
    15a2:	ef 90       	pop	r14
    15a4:	df 90       	pop	r13
    15a6:	cf 90       	pop	r12
    15a8:	08 95       	ret

000015aa <setup>:
    15aa:	cf 92       	push	r12
    15ac:	df 92       	push	r13
    15ae:	ef 92       	push	r14
    15b0:	ff 92       	push	r15
    15b2:	0f 93       	push	r16
    15b4:	1f 93       	push	r17
    15b6:	cf 93       	push	r28
    15b8:	df 93       	push	r29
    15ba:	00 d0       	rcall	.+0      	; 0x15bc <setup+0x12>
    15bc:	00 d0       	rcall	.+0      	; 0x15be <setup+0x14>
    15be:	00 d0       	rcall	.+0      	; 0x15c0 <setup+0x16>
    15c0:	cd b7       	in	r28, 0x3d	; 61
    15c2:	de b7       	in	r29, 0x3e	; 62
    15c4:	3c 9a       	sbi	0x07, 4	; 7
    15c6:	8f e1       	ldi	r24, 0x1F	; 31
    15c8:	9e e4       	ldi	r25, 0x4E	; 78
    15ca:	01 97       	sbiw	r24, 0x01	; 1
    15cc:	f1 f7       	brne	.-4      	; 0x15ca <setup+0x20>
    15ce:	00 c0       	rjmp	.+0      	; 0x15d0 <setup+0x26>
    15d0:	00 00       	nop
    15d2:	0e 94 93 01 	call	0x326	; 0x326 <_ZL11disable_ETHv>
    15d6:	8f e1       	ldi	r24, 0x1F	; 31
    15d8:	9e e4       	ldi	r25, 0x4E	; 78
    15da:	01 97       	sbiw	r24, 0x01	; 1
    15dc:	f1 f7       	brne	.-4      	; 0x15da <setup+0x30>
    15de:	00 c0       	rjmp	.+0      	; 0x15e0 <setup+0x36>
    15e0:	00 00       	nop
    15e2:	24 9a       	sbi	0x04, 4	; 4
    15e4:	8f e1       	ldi	r24, 0x1F	; 31
    15e6:	9e e4       	ldi	r25, 0x4E	; 78
    15e8:	01 97       	sbiw	r24, 0x01	; 1
    15ea:	f1 f7       	brne	.-4      	; 0x15e8 <setup+0x3e>
    15ec:	00 c0       	rjmp	.+0      	; 0x15ee <setup+0x44>
    15ee:	00 00       	nop
    15f0:	0e 94 95 01 	call	0x32a	; 0x32a <_ZL13disable_FLASHv>
    15f4:	8f e1       	ldi	r24, 0x1F	; 31
    15f6:	9e e4       	ldi	r25, 0x4E	; 78
    15f8:	01 97       	sbiw	r24, 0x01	; 1
    15fa:	f1 f7       	brne	.-4      	; 0x15f8 <setup+0x4e>
    15fc:	00 c0       	rjmp	.+0      	; 0x15fe <setup+0x54>
    15fe:	00 00       	nop
    1600:	63 e2       	ldi	r22, 0x23	; 35
    1602:	73 e0       	ldi	r23, 0x03	; 3
    1604:	8f e4       	ldi	r24, 0x4F	; 79
    1606:	9d e0       	ldi	r25, 0x0D	; 13
    1608:	0e 94 39 3b 	call	0x7672	; 0x7672 <_ZN5Print7printlnEPKc>
    160c:	3f 9a       	sbi	0x07, 7	; 7
    160e:	0f 9a       	sbi	0x01, 7	; 1
    1610:	8f e3       	ldi	r24, 0x3F	; 63
    1612:	9c e9       	ldi	r25, 0x9C	; 156
    1614:	01 97       	sbiw	r24, 0x01	; 1
    1616:	f1 f7       	brne	.-4      	; 0x1614 <setup+0x6a>
    1618:	00 c0       	rjmp	.+0      	; 0x161a <setup+0x70>
    161a:	00 00       	nop
    161c:	47 9a       	sbi	0x08, 7	; 8
    161e:	8f e3       	ldi	r24, 0x3F	; 63
    1620:	9c e9       	ldi	r25, 0x9C	; 156
    1622:	01 97       	sbiw	r24, 0x01	; 1
    1624:	f1 f7       	brne	.-4      	; 0x1622 <setup+0x78>
    1626:	00 c0       	rjmp	.+0      	; 0x1628 <setup+0x7e>
    1628:	00 00       	nop
    162a:	17 9a       	sbi	0x02, 7	; 2
    162c:	0e 94 05 02 	call	0x40a	; 0x40a <_Z9printLinev>
    1630:	20 e0       	ldi	r18, 0x00	; 0
    1632:	44 e0       	ldi	r20, 0x04	; 4
    1634:	64 e1       	ldi	r22, 0x14	; 20
    1636:	80 ec       	ldi	r24, 0xC0	; 192
    1638:	9b e0       	ldi	r25, 0x0B	; 11
    163a:	0e 94 a3 2c 	call	0x5946	; 0x5946 <_ZN17LiquidCrystal_I2C5beginEhhh>
    163e:	80 ec       	ldi	r24, 0xC0	; 192
    1640:	9b e0       	ldi	r25, 0x0B	; 11
    1642:	0e 94 80 2a 	call	0x5500	; 0x5500 <_ZN3LCD9backlightEv>
    1646:	9f ef       	ldi	r25, 0xFF	; 255
    1648:	24 e3       	ldi	r18, 0x34	; 52
    164a:	8c e0       	ldi	r24, 0x0C	; 12
    164c:	91 50       	subi	r25, 0x01	; 1
    164e:	20 40       	sbci	r18, 0x00	; 0
    1650:	80 40       	sbci	r24, 0x00	; 0
    1652:	e1 f7       	brne	.-8      	; 0x164c <setup+0xa2>
    1654:	00 c0       	rjmp	.+0      	; 0x1656 <setup+0xac>
    1656:	00 00       	nop
    1658:	80 ec       	ldi	r24, 0xC0	; 192
    165a:	9b e0       	ldi	r25, 0x0B	; 11
    165c:	0e 94 88 2a 	call	0x5510	; 0x5510 <_ZN3LCD11noBacklightEv>
    1660:	9f ef       	ldi	r25, 0xFF	; 255
    1662:	24 e3       	ldi	r18, 0x34	; 52
    1664:	8c e0       	ldi	r24, 0x0C	; 12
    1666:	91 50       	subi	r25, 0x01	; 1
    1668:	20 40       	sbci	r18, 0x00	; 0
    166a:	80 40       	sbci	r24, 0x00	; 0
    166c:	e1 f7       	brne	.-8      	; 0x1666 <setup+0xbc>
    166e:	00 c0       	rjmp	.+0      	; 0x1670 <setup+0xc6>
    1670:	00 00       	nop
    1672:	80 ec       	ldi	r24, 0xC0	; 192
    1674:	9b e0       	ldi	r25, 0x0B	; 11
    1676:	0e 94 80 2a 	call	0x5500	; 0x5500 <_ZN3LCD9backlightEv>
    167a:	9f ef       	ldi	r25, 0xFF	; 255
    167c:	24 e3       	ldi	r18, 0x34	; 52
    167e:	8c e0       	ldi	r24, 0x0C	; 12
    1680:	91 50       	subi	r25, 0x01	; 1
    1682:	20 40       	sbci	r18, 0x00	; 0
    1684:	80 40       	sbci	r24, 0x00	; 0
    1686:	e1 f7       	brne	.-8      	; 0x1680 <setup+0xd6>
    1688:	00 c0       	rjmp	.+0      	; 0x168a <setup+0xe0>
    168a:	00 00       	nop
    168c:	80 ec       	ldi	r24, 0xC0	; 192
    168e:	9b e0       	ldi	r25, 0x0B	; 11
    1690:	0e 94 88 2a 	call	0x5510	; 0x5510 <_ZN3LCD11noBacklightEv>
    1694:	9f ef       	ldi	r25, 0xFF	; 255
    1696:	24 e3       	ldi	r18, 0x34	; 52
    1698:	8c e0       	ldi	r24, 0x0C	; 12
    169a:	91 50       	subi	r25, 0x01	; 1
    169c:	20 40       	sbci	r18, 0x00	; 0
    169e:	80 40       	sbci	r24, 0x00	; 0
    16a0:	e1 f7       	brne	.-8      	; 0x169a <setup+0xf0>
    16a2:	00 c0       	rjmp	.+0      	; 0x16a4 <setup+0xfa>
    16a4:	00 00       	nop
    16a6:	46 e3       	ldi	r20, 0x36	; 54
    16a8:	51 e0       	ldi	r21, 0x01	; 1
    16aa:	61 e0       	ldi	r22, 0x01	; 1
    16ac:	80 ec       	ldi	r24, 0xC0	; 192
    16ae:	9b e0       	ldi	r25, 0x0B	; 11
    16b0:	0e 94 66 2b 	call	0x56cc	; 0x56cc <_ZN3LCD10createCharEhPh>
    16b4:	9f ef       	ldi	r25, 0xFF	; 255
    16b6:	29 ef       	ldi	r18, 0xF9	; 249
    16b8:	80 e0       	ldi	r24, 0x00	; 0
    16ba:	91 50       	subi	r25, 0x01	; 1
    16bc:	20 40       	sbci	r18, 0x00	; 0
    16be:	80 40       	sbci	r24, 0x00	; 0
    16c0:	e1 f7       	brne	.-8      	; 0x16ba <setup+0x110>
    16c2:	00 c0       	rjmp	.+0      	; 0x16c4 <setup+0x11a>
    16c4:	00 00       	nop
    16c6:	80 ec       	ldi	r24, 0xC0	; 192
    16c8:	9b e0       	ldi	r25, 0x0B	; 11
    16ca:	0e 94 80 2a 	call	0x5500	; 0x5500 <_ZN3LCD9backlightEv>
    16ce:	05 e3       	ldi	r16, 0x35	; 53
    16d0:	1b e0       	ldi	r17, 0x0B	; 11
    16d2:	63 ec       	ldi	r22, 0xC3	; 195
    16d4:	71 e0       	ldi	r23, 0x01	; 1
    16d6:	c8 01       	movw	r24, r16
    16d8:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <_ZN6StringaSEPKc>
    16dc:	0a 5f       	subi	r16, 0xFA	; 250
    16de:	1f 4f       	sbci	r17, 0xFF	; 255
    16e0:	9b e0       	ldi	r25, 0x0B	; 11
    16e2:	0d 34       	cpi	r16, 0x4D	; 77
    16e4:	19 07       	cpc	r17, r25
    16e6:	a9 f7       	brne	.-22     	; 0x16d2 <setup+0x128>
    16e8:	0e 94 05 02 	call	0x40a	; 0x40a <_Z9printLinev>
    16ec:	89 ea       	ldi	r24, 0xA9	; 169
    16ee:	9b e0       	ldi	r25, 0x0B	; 11
    16f0:	0e 94 a5 18 	call	0x314a	; 0x314a <_ZN14Adafruit_PN5325beginEv>
    16f4:	2f ef       	ldi	r18, 0xFF	; 255
    16f6:	80 e7       	ldi	r24, 0x70	; 112
    16f8:	92 e0       	ldi	r25, 0x02	; 2
    16fa:	21 50       	subi	r18, 0x01	; 1
    16fc:	80 40       	sbci	r24, 0x00	; 0
    16fe:	90 40       	sbci	r25, 0x00	; 0
    1700:	e1 f7       	brne	.-8      	; 0x16fa <setup+0x150>
    1702:	00 c0       	rjmp	.+0      	; 0x1704 <setup+0x15a>
    1704:	00 00       	nop
    1706:	89 ea       	ldi	r24, 0xA9	; 169
    1708:	9b e0       	ldi	r25, 0x0B	; 11
    170a:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <_ZN14Adafruit_PN53218getFirmwareVersionEv>
    170e:	6b 01       	movw	r12, r22
    1710:	7c 01       	movw	r14, r24
    1712:	67 2b       	or	r22, r23
    1714:	68 2b       	or	r22, r24
    1716:	69 2b       	or	r22, r25
    1718:	69 f5       	brne	.+90     	; 0x1774 <setup+0x1ca>
    171a:	68 e3       	ldi	r22, 0x38	; 56
    171c:	73 e0       	ldi	r23, 0x03	; 3
    171e:	8f e4       	ldi	r24, 0x4F	; 79
    1720:	9d e0       	ldi	r25, 0x0D	; 13
    1722:	0e 94 0e 3b 	call	0x761c	; 0x761c <_ZN5Print5printEPKc>
    1726:	80 ec       	ldi	r24, 0xC0	; 192
    1728:	9b e0       	ldi	r25, 0x0B	; 11
    172a:	0e 94 80 2a 	call	0x5500	; 0x5500 <_ZN3LCD9backlightEv>
    172e:	2f ef       	ldi	r18, 0xFF	; 255
    1730:	84 e3       	ldi	r24, 0x34	; 52
    1732:	9c e0       	ldi	r25, 0x0C	; 12
    1734:	21 50       	subi	r18, 0x01	; 1
    1736:	80 40       	sbci	r24, 0x00	; 0
    1738:	90 40       	sbci	r25, 0x00	; 0
    173a:	e1 f7       	brne	.-8      	; 0x1734 <setup+0x18a>
    173c:	00 c0       	rjmp	.+0      	; 0x173e <setup+0x194>
    173e:	00 00       	nop
    1740:	80 ec       	ldi	r24, 0xC0	; 192
    1742:	9b e0       	ldi	r25, 0x0B	; 11
    1744:	0e 94 98 2a 	call	0x5530	; 0x5530 <_ZN3LCD5clearEv>
    1748:	61 e5       	ldi	r22, 0x51	; 81
    174a:	73 e0       	ldi	r23, 0x03	; 3
    174c:	80 ec       	ldi	r24, 0xC0	; 192
    174e:	9b e0       	ldi	r25, 0x0B	; 11
    1750:	0e 94 0e 3b 	call	0x761c	; 0x761c <_ZN5Print5printEPKc>
    1754:	2f ef       	ldi	r18, 0xFF	; 255
    1756:	87 ea       	ldi	r24, 0xA7	; 167
    1758:	91 e6       	ldi	r25, 0x61	; 97
    175a:	21 50       	subi	r18, 0x01	; 1
    175c:	80 40       	sbci	r24, 0x00	; 0
    175e:	90 40       	sbci	r25, 0x00	; 0
    1760:	e1 f7       	brne	.-8      	; 0x175a <setup+0x1b0>
    1762:	00 c0       	rjmp	.+0      	; 0x1764 <setup+0x1ba>
    1764:	00 00       	nop
    1766:	6b e6       	ldi	r22, 0x6B	; 107
    1768:	73 e0       	ldi	r23, 0x03	; 3
    176a:	83 ea       	ldi	r24, 0xA3	; 163
    176c:	9b e0       	ldi	r25, 0x0B	; 11
    176e:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <_ZN6StringaSEPKc>
    1772:	06 c0       	rjmp	.+12     	; 0x1780 <setup+0x1d6>
    1774:	6e e7       	ldi	r22, 0x7E	; 126
    1776:	73 e0       	ldi	r23, 0x03	; 3
    1778:	8f e4       	ldi	r24, 0x4F	; 79
    177a:	9d e0       	ldi	r25, 0x0D	; 13
    177c:	0e 94 39 3b 	call	0x7672	; 0x7672 <_ZN5Print7printlnEPKc>
    1780:	63 e9       	ldi	r22, 0x93	; 147
    1782:	73 e0       	ldi	r23, 0x03	; 3
    1784:	8f e4       	ldi	r24, 0x4F	; 79
    1786:	9d e0       	ldi	r25, 0x0D	; 13
    1788:	0e 94 0e 3b 	call	0x761c	; 0x761c <_ZN5Print5printEPKc>
    178c:	4f 2d       	mov	r20, r15
    178e:	55 27       	eor	r21, r21
    1790:	66 27       	eor	r22, r22
    1792:	77 27       	eor	r23, r23
    1794:	20 e1       	ldi	r18, 0x10	; 16
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	8f e4       	ldi	r24, 0x4F	; 79
    179a:	9d e0       	ldi	r25, 0x0D	; 13
    179c:	0e 94 b2 3b 	call	0x7764	; 0x7764 <_ZN5Print7printlnEmi>
    17a0:	62 ea       	ldi	r22, 0xA2	; 162
    17a2:	73 e0       	ldi	r23, 0x03	; 3
    17a4:	8f e4       	ldi	r24, 0x4F	; 79
    17a6:	9d e0       	ldi	r25, 0x0D	; 13
    17a8:	0e 94 0e 3b 	call	0x761c	; 0x761c <_ZN5Print5printEPKc>
    17ac:	4e 2d       	mov	r20, r14
    17ae:	50 e0       	ldi	r21, 0x00	; 0
    17b0:	60 e0       	ldi	r22, 0x00	; 0
    17b2:	70 e0       	ldi	r23, 0x00	; 0
    17b4:	2a e0       	ldi	r18, 0x0A	; 10
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	8f e4       	ldi	r24, 0x4F	; 79
    17ba:	9d e0       	ldi	r25, 0x0D	; 13
    17bc:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN5Print5printEmi>
    17c0:	6e e2       	ldi	r22, 0x2E	; 46
    17c2:	8f e4       	ldi	r24, 0x4F	; 79
    17c4:	9d e0       	ldi	r25, 0x0D	; 13
    17c6:	0e 94 0f 3b 	call	0x761e	; 0x761e <_ZN5Print5printEc>
    17ca:	4d 2d       	mov	r20, r13
    17cc:	50 e0       	ldi	r21, 0x00	; 0
    17ce:	60 e0       	ldi	r22, 0x00	; 0
    17d0:	70 e0       	ldi	r23, 0x00	; 0
    17d2:	2a e0       	ldi	r18, 0x0A	; 10
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	8f e4       	ldi	r24, 0x4F	; 79
    17d8:	9d e0       	ldi	r25, 0x0D	; 13
    17da:	0e 94 b2 3b 	call	0x7764	; 0x7764 <_ZN5Print7printlnEmi>
    17de:	6f ef       	ldi	r22, 0xFF	; 255
    17e0:	89 ea       	ldi	r24, 0xA9	; 169
    17e2:	9b e0       	ldi	r25, 0x0B	; 11
    17e4:	0e 94 68 19 	call	0x32d0	; 0x32d0 <_ZN14Adafruit_PN53227setPassiveActivationRetriesEh>
    17e8:	89 ea       	ldi	r24, 0xA9	; 169
    17ea:	9b e0       	ldi	r25, 0x0B	; 11
    17ec:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN14Adafruit_PN5329SAMConfigEv>
    17f0:	0e 94 05 02 	call	0x40a	; 0x40a <_Z9printLinev>
    17f4:	2c 98       	cbi	0x05, 4	; 5
    17f6:	60 e0       	ldi	r22, 0x00	; 0
    17f8:	8a e7       	ldi	r24, 0x7A	; 122
    17fa:	99 e0       	ldi	r25, 0x09	; 9
    17fc:	0e 94 5d 2d 	call	0x5aba	; 0x5aba <_ZN8SPIFlash5errorEb>
    1800:	88 23       	and	r24, r24
    1802:	61 f0       	breq	.+24     	; 0x181c <setup+0x272>
    1804:	61 e0       	ldi	r22, 0x01	; 1
    1806:	8a e7       	ldi	r24, 0x7A	; 122
    1808:	99 e0       	ldi	r25, 0x09	; 9
    180a:	0e 94 5d 2d 	call	0x5aba	; 0x5aba <_ZN8SPIFlash5errorEb>
    180e:	4a e0       	ldi	r20, 0x0A	; 10
    1810:	50 e0       	ldi	r21, 0x00	; 0
    1812:	68 2f       	mov	r22, r24
    1814:	8f e4       	ldi	r24, 0x4F	; 79
    1816:	9d e0       	ldi	r25, 0x0D	; 13
    1818:	0e 94 a2 3b 	call	0x7744	; 0x7744 <_ZN5Print7printlnEhi>
    181c:	40 e0       	ldi	r20, 0x00	; 0
    181e:	50 e0       	ldi	r21, 0x00	; 0
    1820:	ba 01       	movw	r22, r20
    1822:	8a e7       	ldi	r24, 0x7A	; 122
    1824:	99 e0       	ldi	r25, 0x09	; 9
    1826:	0e 94 35 2d 	call	0x5a6a	; 0x5a6a <_ZN8SPIFlash5beginEm>
    182a:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <_Z5getIDv>
    182e:	88 23       	and	r24, r24
    1830:	09 f4       	brne	.+2      	; 0x1834 <setup+0x28a>
    1832:	3f c0       	rjmp	.+126    	; 0x18b2 <setup+0x308>
    1834:	0e 94 05 02 	call	0x40a	; 0x40a <_Z9printLinev>
    1838:	83 e0       	ldi	r24, 0x03	; 3
    183a:	0e 94 18 02 	call	0x430	; 0x430 <_Z8printTabh>
    183e:	61 eb       	ldi	r22, 0xB1	; 177
    1840:	73 e0       	ldi	r23, 0x03	; 3
    1842:	8f e4       	ldi	r24, 0x4F	; 79
    1844:	9d e0       	ldi	r25, 0x0D	; 13
    1846:	0e 94 0e 3b 	call	0x761c	; 0x761c <_ZN5Print5printEPKc>
    184a:	0e 94 05 02 	call	0x40a	; 0x40a <_Z9printLinev>
    184e:	82 e0       	ldi	r24, 0x02	; 2
    1850:	0e 94 18 02 	call	0x430	; 0x430 <_Z8printTabh>
    1854:	84 e6       	ldi	r24, 0x64	; 100
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	0e 94 ac 03 	call	0x758	; 0x758 <_Z12FlashpowerUpj>
    185c:	8f e4       	ldi	r24, 0x4F	; 79
    185e:	9d e0       	ldi	r25, 0x0D	; 13
    1860:	0e 94 16 3b 	call	0x762c	; 0x762c <_ZN5Print7printlnEv>
    1864:	84 e6       	ldi	r24, 0x64	; 100
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <_Z13eraseChipTestj>
    186c:	8f e4       	ldi	r24, 0x4F	; 79
    186e:	9d e0       	ldi	r25, 0x0D	; 13
    1870:	0e 94 16 3b 	call	0x762c	; 0x762c <_ZN5Print7printlnEv>
    1874:	68 ef       	ldi	r22, 0xF8	; 248
    1876:	71 e0       	ldi	r23, 0x01	; 1
    1878:	ce 01       	movw	r24, r28
    187a:	01 96       	adiw	r24, 0x01	; 1
    187c:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <_ZN6StringC1EPKc>
    1880:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <addr_erog>
    1884:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <addr_erog+0x1>
    1888:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <addr_erog+0x2>
    188c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <addr_erog+0x3>
    1890:	ae 01       	movw	r20, r28
    1892:	4f 5f       	subi	r20, 0xFF	; 255
    1894:	5f 4f       	sbci	r21, 0xFF	; 255
    1896:	0e 94 06 03 	call	0x60c	; 0x60c <_Z15erogazioniSaverm6String>
    189a:	ce 01       	movw	r24, r28
    189c:	01 96       	adiw	r24, 0x01	; 1
    189e:	0e 94 78 3d 	call	0x7af0	; 0x7af0 <_ZN6StringD1Ev>
    18a2:	88 ec       	ldi	r24, 0xC8	; 200
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	0e 94 84 03 	call	0x708	; 0x708 <_Z14FlashpowerDownj>
    18aa:	8f e4       	ldi	r24, 0x4F	; 79
    18ac:	9d e0       	ldi	r25, 0x0D	; 13
    18ae:	0e 94 16 3b 	call	0x762c	; 0x762c <_ZN5Print7printlnEv>
    18b2:	0e 94 05 02 	call	0x40a	; 0x40a <_Z9printLinev>
    18b6:	40 ea       	ldi	r20, 0xA0	; 160
    18b8:	56 e8       	ldi	r21, 0x86	; 134
    18ba:	61 e0       	ldi	r22, 0x01	; 1
    18bc:	70 e0       	ldi	r23, 0x00	; 0
    18be:	80 e8       	ldi	r24, 0x80	; 128
    18c0:	9a e0       	ldi	r25, 0x0A	; 10
    18c2:	0e 94 84 1c 	call	0x3908	; 0x3908 <_ZN13DS3231M_Class5beginEm>
    18c6:	81 11       	cpse	r24, r1
    18c8:	10 c0       	rjmp	.+32     	; 0x18ea <setup+0x340>
    18ca:	69 ed       	ldi	r22, 0xD9	; 217
    18cc:	71 e0       	ldi	r23, 0x01	; 1
    18ce:	8f e4       	ldi	r24, 0x4F	; 79
    18d0:	9d e0       	ldi	r25, 0x0D	; 13
    18d2:	0e 94 19 3b 	call	0x7632	; 0x7632 <_ZN5Print7printlnEPK19__FlashStringHelper>
    18d6:	2f ef       	ldi	r18, 0xFF	; 255
    18d8:	83 ed       	ldi	r24, 0xD3	; 211
    18da:	90 e3       	ldi	r25, 0x30	; 48
    18dc:	21 50       	subi	r18, 0x01	; 1
    18de:	80 40       	sbci	r24, 0x00	; 0
    18e0:	90 40       	sbci	r25, 0x00	; 0
    18e2:	e1 f7       	brne	.-8      	; 0x18dc <setup+0x332>
    18e4:	00 c0       	rjmp	.+0      	; 0x18e6 <setup+0x33c>
    18e6:	00 00       	nop
    18e8:	e6 cf       	rjmp	.-52     	; 0x18b6 <setup+0x30c>
    18ea:	2f ef       	ldi	r18, 0xFF	; 255
    18ec:	80 e7       	ldi	r24, 0x70	; 112
    18ee:	92 e0       	ldi	r25, 0x02	; 2
    18f0:	21 50       	subi	r18, 0x01	; 1
    18f2:	80 40       	sbci	r24, 0x00	; 0
    18f4:	90 40       	sbci	r25, 0x00	; 0
    18f6:	e1 f7       	brne	.-8      	; 0x18f0 <setup+0x346>
    18f8:	00 c0       	rjmp	.+0      	; 0x18fa <setup+0x350>
    18fa:	00 00       	nop
    18fc:	64 ec       	ldi	r22, 0xC4	; 196
    18fe:	71 e0       	ldi	r23, 0x01	; 1
    1900:	8f e4       	ldi	r24, 0x4F	; 79
    1902:	9d e0       	ldi	r25, 0x0D	; 13
    1904:	0e 94 19 3b 	call	0x7632	; 0x7632 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1908:	80 e8       	ldi	r24, 0x80	; 128
    190a:	9a e0       	ldi	r25, 0x0A	; 10
    190c:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <_ZN13DS3231M_Class6adjustEv>
    1910:	0e 94 05 02 	call	0x40a	; 0x40a <_Z9printLinev>
    1914:	6a eb       	ldi	r22, 0xBA	; 186
    1916:	73 e0       	ldi	r23, 0x03	; 3
    1918:	8f e4       	ldi	r24, 0x4F	; 79
    191a:	9d e0       	ldi	r25, 0x0D	; 13
    191c:	0e 94 39 3b 	call	0x7672	; 0x7672 <_ZN5Print7printlnEPKc>
    1920:	89 ef       	ldi	r24, 0xF9	; 249
    1922:	9c e0       	ldi	r25, 0x0C	; 12
    1924:	0e 94 e0 37 	call	0x6fc0	; 0x6fc0 <_ZN7TwoWire5beginEv>
    1928:	68 e2       	ldi	r22, 0x28	; 40
    192a:	70 e0       	ldi	r23, 0x00	; 0
    192c:	89 ef       	ldi	r24, 0xF9	; 249
    192e:	9c e0       	ldi	r25, 0x0C	; 12
    1930:	0e 94 fd 37 	call	0x6ffa	; 0x6ffa <_ZN7TwoWire17beginTransmissionEi>
    1934:	60 e0       	ldi	r22, 0x00	; 0
    1936:	89 ef       	ldi	r24, 0xF9	; 249
    1938:	9c e0       	ldi	r25, 0x0C	; 12
    193a:	0e 94 a2 37 	call	0x6f44	; 0x6f44 <_ZN7TwoWire5writeEh>
    193e:	62 e3       	ldi	r22, 0x32	; 50
    1940:	70 e0       	ldi	r23, 0x00	; 0
    1942:	89 ef       	ldi	r24, 0xF9	; 249
    1944:	9c e0       	ldi	r25, 0x0C	; 12
    1946:	0e 94 97 01 	call	0x32e	; 0x32e <_ZN7TwoWire5writeEi>
    194a:	89 ef       	ldi	r24, 0xF9	; 249
    194c:	9c e0       	ldi	r25, 0x0C	; 12
    194e:	0e 94 74 38 	call	0x70e8	; 0x70e8 <_ZN7TwoWire15endTransmissionEv>
    1952:	2f ef       	ldi	r18, 0xFF	; 255
    1954:	80 e7       	ldi	r24, 0x70	; 112
    1956:	92 e0       	ldi	r25, 0x02	; 2
    1958:	21 50       	subi	r18, 0x01	; 1
    195a:	80 40       	sbci	r24, 0x00	; 0
    195c:	90 40       	sbci	r25, 0x00	; 0
    195e:	e1 f7       	brne	.-8      	; 0x1958 <setup+0x3ae>
    1960:	00 c0       	rjmp	.+0      	; 0x1962 <setup+0x3b8>
    1962:	00 00       	nop
    1964:	62 e5       	ldi	r22, 0x52	; 82
    1966:	70 e0       	ldi	r23, 0x00	; 0
    1968:	89 ef       	ldi	r24, 0xF9	; 249
    196a:	9c e0       	ldi	r25, 0x0C	; 12
    196c:	0e 94 fd 37 	call	0x6ffa	; 0x6ffa <_ZN7TwoWire17beginTransmissionEi>
    1970:	60 e0       	ldi	r22, 0x00	; 0
    1972:	89 ef       	ldi	r24, 0xF9	; 249
    1974:	9c e0       	ldi	r25, 0x0C	; 12
    1976:	0e 94 a2 37 	call	0x6f44	; 0x6f44 <_ZN7TwoWire5writeEh>
    197a:	62 e3       	ldi	r22, 0x32	; 50
    197c:	70 e0       	ldi	r23, 0x00	; 0
    197e:	89 ef       	ldi	r24, 0xF9	; 249
    1980:	9c e0       	ldi	r25, 0x0C	; 12
    1982:	0e 94 97 01 	call	0x32e	; 0x32e <_ZN7TwoWire5writeEi>
    1986:	89 ef       	ldi	r24, 0xF9	; 249
    1988:	9c e0       	ldi	r25, 0x0C	; 12
    198a:	0e 94 74 38 	call	0x70e8	; 0x70e8 <_ZN7TwoWire15endTransmissionEv>
    198e:	89 ef       	ldi	r24, 0xF9	; 249
    1990:	9c e0       	ldi	r25, 0x0C	; 12
    1992:	0e 94 ef 37 	call	0x6fde	; 0x6fde <_ZN7TwoWire3endEv>
    1996:	6e ee       	ldi	r22, 0xEE	; 238
    1998:	73 e0       	ldi	r23, 0x03	; 3
    199a:	8f e4       	ldi	r24, 0x4F	; 79
    199c:	9d e0       	ldi	r25, 0x0D	; 13
    199e:	0e 94 39 3b 	call	0x7672	; 0x7672 <_ZN5Print7printlnEPKc>
    19a2:	0e 94 05 02 	call	0x40a	; 0x40a <_Z9printLinev>
    19a6:	0e 94 05 02 	call	0x40a	; 0x40a <_Z9printLinev>
    19aa:	6f ef       	ldi	r22, 0xFF	; 255
    19ac:	73 e0       	ldi	r23, 0x03	; 3
    19ae:	8f e4       	ldi	r24, 0x4F	; 79
    19b0:	9d e0       	ldi	r25, 0x0D	; 13
    19b2:	0e 94 39 3b 	call	0x7672	; 0x7672 <_ZN5Print7printlnEPKc>
    19b6:	66 e3       	ldi	r22, 0x36	; 54
    19b8:	74 e0       	ldi	r23, 0x04	; 4
    19ba:	8f e4       	ldi	r24, 0x4F	; 79
    19bc:	9d e0       	ldi	r25, 0x0D	; 13
    19be:	0e 94 39 3b 	call	0x7672	; 0x7672 <_ZN5Print7printlnEPKc>
    19c2:	2f ef       	ldi	r18, 0xFF	; 255
    19c4:	80 e7       	ldi	r24, 0x70	; 112
    19c6:	92 e0       	ldi	r25, 0x02	; 2
    19c8:	21 50       	subi	r18, 0x01	; 1
    19ca:	80 40       	sbci	r24, 0x00	; 0
    19cc:	90 40       	sbci	r25, 0x00	; 0
    19ce:	e1 f7       	brne	.-8      	; 0x19c8 <setup+0x41e>
    19d0:	00 c0       	rjmp	.+0      	; 0x19d2 <setup+0x428>
    19d2:	00 00       	nop
    19d4:	0e 94 9e 01 	call	0x33c	; 0x33c <_Z14initIOExpanderv>
    19d8:	2f ef       	ldi	r18, 0xFF	; 255
    19da:	80 e7       	ldi	r24, 0x70	; 112
    19dc:	92 e0       	ldi	r25, 0x02	; 2
    19de:	21 50       	subi	r18, 0x01	; 1
    19e0:	80 40       	sbci	r24, 0x00	; 0
    19e2:	90 40       	sbci	r25, 0x00	; 0
    19e4:	e1 f7       	brne	.-8      	; 0x19de <setup+0x434>
    19e6:	00 c0       	rjmp	.+0      	; 0x19e8 <setup+0x43e>
    19e8:	00 00       	nop
    19ea:	0e 94 05 02 	call	0x40a	; 0x40a <_Z9printLinev>
    19ee:	8e ef       	ldi	r24, 0xFE	; 254
    19f0:	9f ef       	ldi	r25, 0xFF	; 255
    19f2:	90 93 98 0b 	sts	0x0B98, r25	; 0x800b98 <stato_procedura+0x1>
    19f6:	80 93 97 0b 	sts	0x0B97, r24	; 0x800b97 <stato_procedura>
    19fa:	61 e5       	ldi	r22, 0x51	; 81
    19fc:	74 e0       	ldi	r23, 0x04	; 4
    19fe:	83 ea       	ldi	r24, 0xA3	; 163
    1a00:	9b e0       	ldi	r25, 0x0B	; 11
    1a02:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <_ZN6StringaSEPKc>
    1a06:	63 ea       	ldi	r22, 0xA3	; 163
    1a08:	7b e0       	ldi	r23, 0x0B	; 11
    1a0a:	8f e4       	ldi	r24, 0x4F	; 79
    1a0c:	9d e0       	ldi	r25, 0x0D	; 13
    1a0e:	0e 94 29 3b 	call	0x7652	; 0x7652 <_ZN5Print7printlnERK6String>
    1a12:	26 96       	adiw	r28, 0x06	; 6
    1a14:	0f b6       	in	r0, 0x3f	; 63
    1a16:	f8 94       	cli
    1a18:	de bf       	out	0x3e, r29	; 62
    1a1a:	0f be       	out	0x3f, r0	; 63
    1a1c:	cd bf       	out	0x3d, r28	; 61
    1a1e:	df 91       	pop	r29
    1a20:	cf 91       	pop	r28
    1a22:	1f 91       	pop	r17
    1a24:	0f 91       	pop	r16
    1a26:	ff 90       	pop	r15
    1a28:	ef 90       	pop	r14
    1a2a:	df 90       	pop	r13
    1a2c:	cf 90       	pop	r12
    1a2e:	08 95       	ret

00001a30 <_Z23getTastoPremuto_x_targav>:
    1a30:	ef 92       	push	r14
    1a32:	ff 92       	push	r15
    1a34:	0f 93       	push	r16
    1a36:	1f 93       	push	r17
    1a38:	cf 93       	push	r28
    1a3a:	df 93       	push	r29
    1a3c:	cd b7       	in	r28, 0x3d	; 61
    1a3e:	de b7       	in	r29, 0x3e	; 62
    1a40:	62 97       	sbiw	r28, 0x12	; 18
    1a42:	0f b6       	in	r0, 0x3f	; 63
    1a44:	f8 94       	cli
    1a46:	de bf       	out	0x3e, r29	; 62
    1a48:	0f be       	out	0x3f, r0	; 63
    1a4a:	cd bf       	out	0x3d, r28	; 61
    1a4c:	89 ef       	ldi	r24, 0xF9	; 249
    1a4e:	9c e0       	ldi	r25, 0x0C	; 12
    1a50:	0e 94 3f 37 	call	0x6e7e	; 0x6e7e <_ZN7TwoWire5flushEv>
    1a54:	41 e0       	ldi	r20, 0x01	; 1
    1a56:	50 e0       	ldi	r21, 0x00	; 0
    1a58:	60 e2       	ldi	r22, 0x20	; 32
    1a5a:	70 e0       	ldi	r23, 0x00	; 0
    1a5c:	89 ef       	ldi	r24, 0xF9	; 249
    1a5e:	9c e0       	ldi	r25, 0x0C	; 12
    1a60:	0e 94 72 38 	call	0x70e4	; 0x70e4 <_ZN7TwoWire11requestFromEii>
    1a64:	63 ec       	ldi	r22, 0xC3	; 195
    1a66:	71 e0       	ldi	r23, 0x01	; 1
    1a68:	ce 01       	movw	r24, r28
    1a6a:	0d 96       	adiw	r24, 0x0d	; 13
    1a6c:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <_ZN6StringC1EPKc>
    1a70:	11 e0       	ldi	r17, 0x01	; 1
    1a72:	02 e0       	ldi	r16, 0x02	; 2
    1a74:	83 e0       	ldi	r24, 0x03	; 3
    1a76:	f8 2e       	mov	r15, r24
    1a78:	94 e0       	ldi	r25, 0x04	; 4
    1a7a:	e9 2e       	mov	r14, r25
    1a7c:	89 ef       	ldi	r24, 0xF9	; 249
    1a7e:	9c e0       	ldi	r25, 0x0C	; 12
    1a80:	0e 94 14 37 	call	0x6e28	; 0x6e28 <_ZN7TwoWire9availableEv>
    1a84:	89 2b       	or	r24, r25
    1a86:	09 f4       	brne	.+2      	; 0x1a8a <_Z23getTastoPremuto_x_targav+0x5a>
    1a88:	46 c1       	rjmp	.+652    	; 0x1d16 <_Z23getTastoPremuto_x_targav+0x2e6>
    1a8a:	89 ef       	ldi	r24, 0xF9	; 249
    1a8c:	9c e0       	ldi	r25, 0x0C	; 12
    1a8e:	0e 94 1c 37 	call	0x6e38	; 0x6e38 <_ZN7TwoWire4readEv>
    1a92:	99 27       	eor	r25, r25
    1a94:	82 3c       	cpi	r24, 0xC2	; 194
    1a96:	91 05       	cpc	r25, r1
    1a98:	49 f1       	breq	.+82     	; 0x1aec <_Z23getTastoPremuto_x_targav+0xbc>
    1a9a:	94 f4       	brge	.+36     	; 0x1ac0 <_Z23getTastoPremuto_x_targav+0x90>
    1a9c:	83 34       	cpi	r24, 0x43	; 67
    1a9e:	91 05       	cpc	r25, r1
    1aa0:	41 f1       	breq	.+80     	; 0x1af2 <_Z23getTastoPremuto_x_targav+0xc2>
    1aa2:	24 f4       	brge	.+8      	; 0x1aac <_Z23getTastoPremuto_x_targav+0x7c>
    1aa4:	cc 97       	sbiw	r24, 0x3c	; 60
    1aa6:	09 f4       	brne	.+2      	; 0x1aaa <_Z23getTastoPremuto_x_targav+0x7a>
    1aa8:	49 c0       	rjmp	.+146    	; 0x1b3c <_Z23getTastoPremuto_x_targav+0x10c>
    1aaa:	46 c0       	rjmp	.+140    	; 0x1b38 <_Z23getTastoPremuto_x_targav+0x108>
    1aac:	83 38       	cpi	r24, 0x83	; 131
    1aae:	91 05       	cpc	r25, r1
    1ab0:	81 f1       	breq	.+96     	; 0x1b12 <_Z23getTastoPremuto_x_targav+0xe2>
    1ab2:	81 3c       	cpi	r24, 0xC1	; 193
    1ab4:	91 05       	cpc	r25, r1
    1ab6:	09 f0       	breq	.+2      	; 0x1aba <_Z23getTastoPremuto_x_targav+0x8a>
    1ab8:	3f c0       	rjmp	.+126    	; 0x1b38 <_Z23getTastoPremuto_x_targav+0x108>
    1aba:	00 93 6c 0a 	sts	0x0A6C, r16	; 0x800a6c <key_idx>
    1abe:	1b c0       	rjmp	.+54     	; 0x1af6 <_Z23getTastoPremuto_x_targav+0xc6>
    1ac0:	8b 3c       	cpi	r24, 0xCB	; 203
    1ac2:	91 05       	cpc	r25, r1
    1ac4:	49 f1       	breq	.+82     	; 0x1b18 <_Z23getTastoPremuto_x_targav+0xe8>
    1ac6:	4c f4       	brge	.+18     	; 0x1ada <_Z23getTastoPremuto_x_targav+0xaa>
    1ac8:	83 3c       	cpi	r24, 0xC3	; 195
    1aca:	91 05       	cpc	r25, r1
    1acc:	b9 f1       	breq	.+110    	; 0x1b3c <_Z23getTastoPremuto_x_targav+0x10c>
    1ace:	87 3c       	cpi	r24, 0xC7	; 199
    1ad0:	91 05       	cpc	r25, r1
    1ad2:	91 f5       	brne	.+100    	; 0x1b38 <_Z23getTastoPremuto_x_targav+0x108>
    1ad4:	10 93 6d 0a 	sts	0x0A6D, r17	; 0x800a6d <key_idx+0x1>
    1ad8:	24 c0       	rjmp	.+72     	; 0x1b22 <_Z23getTastoPremuto_x_targav+0xf2>
    1ada:	83 3d       	cpi	r24, 0xD3	; 211
    1adc:	91 05       	cpc	r25, r1
    1ade:	f9 f0       	breq	.+62     	; 0x1b1e <_Z23getTastoPremuto_x_targav+0xee>
    1ae0:	83 3e       	cpi	r24, 0xE3	; 227
    1ae2:	91 05       	cpc	r25, r1
    1ae4:	49 f5       	brne	.+82     	; 0x1b38 <_Z23getTastoPremuto_x_targav+0x108>
    1ae6:	e0 92 6d 0a 	sts	0x0A6D, r14	; 0x800a6d <key_idx+0x1>
    1aea:	1b c0       	rjmp	.+54     	; 0x1b22 <_Z23getTastoPremuto_x_targav+0xf2>
    1aec:	10 93 6c 0a 	sts	0x0A6C, r17	; 0x800a6c <key_idx>
    1af0:	02 c0       	rjmp	.+4      	; 0x1af6 <_Z23getTastoPremuto_x_targav+0xc6>
    1af2:	f0 92 6c 0a 	sts	0x0A6C, r15	; 0x800a6c <key_idx>
    1af6:	8f e1       	ldi	r24, 0x1F	; 31
    1af8:	9e e4       	ldi	r25, 0x4E	; 78
    1afa:	01 97       	sbiw	r24, 0x01	; 1
    1afc:	f1 f7       	brne	.-4      	; 0x1afa <_Z23getTastoPremuto_x_targav+0xca>
    1afe:	00 c0       	rjmp	.+0      	; 0x1b00 <_Z23getTastoPremuto_x_targav+0xd0>
    1b00:	00 00       	nop
    1b02:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <_Z12leggiColonnev>
    1b06:	80 91 6b 0a 	lds	r24, 0x0A6B	; 0x800a6b <premuto>
    1b0a:	8f 5f       	subi	r24, 0xFF	; 255
    1b0c:	80 93 6b 0a 	sts	0x0A6B, r24	; 0x800a6b <premuto>
    1b10:	15 c0       	rjmp	.+42     	; 0x1b3c <_Z23getTastoPremuto_x_targav+0x10c>
    1b12:	e0 92 6c 0a 	sts	0x0A6C, r14	; 0x800a6c <key_idx>
    1b16:	ef cf       	rjmp	.-34     	; 0x1af6 <_Z23getTastoPremuto_x_targav+0xc6>
    1b18:	00 93 6d 0a 	sts	0x0A6D, r16	; 0x800a6d <key_idx+0x1>
    1b1c:	02 c0       	rjmp	.+4      	; 0x1b22 <_Z23getTastoPremuto_x_targav+0xf2>
    1b1e:	f0 92 6d 0a 	sts	0x0A6D, r15	; 0x800a6d <key_idx+0x1>
    1b22:	8f e1       	ldi	r24, 0x1F	; 31
    1b24:	9e e4       	ldi	r25, 0x4E	; 78
    1b26:	01 97       	sbiw	r24, 0x01	; 1
    1b28:	f1 f7       	brne	.-4      	; 0x1b26 <_Z23getTastoPremuto_x_targav+0xf6>
    1b2a:	00 c0       	rjmp	.+0      	; 0x1b2c <_Z23getTastoPremuto_x_targav+0xfc>
    1b2c:	00 00       	nop
    1b2e:	0e 94 ce 04 	call	0x99c	; 0x99c <_Z10leggiRighev>
    1b32:	0e 94 17 05 	call	0xa2e	; 0xa2e <_Z17leggi_OP_REGISTERv>
    1b36:	02 c0       	rjmp	.+4      	; 0x1b3c <_Z23getTastoPremuto_x_targav+0x10c>
    1b38:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <_Z12leggiColonnev>
    1b3c:	0e 94 02 05 	call	0xa04	; 0xa04 <_Z17leggi_IP_REGISTERv>
    1b40:	80 91 6b 0a 	lds	r24, 0x0A6B	; 0x800a6b <premuto>
    1b44:	88 23       	and	r24, r24
    1b46:	09 f4       	brne	.+2      	; 0x1b4a <_Z23getTastoPremuto_x_targav+0x11a>
    1b48:	df c0       	rjmp	.+446    	; 0x1d08 <_Z23getTastoPremuto_x_targav+0x2d8>
    1b4a:	60 91 6c 0a 	lds	r22, 0x0A6C	; 0x800a6c <key_idx>
    1b4e:	94 e0       	ldi	r25, 0x04	; 4
    1b50:	69 9f       	mul	r22, r25
    1b52:	b0 01       	movw	r22, r0
    1b54:	11 24       	eor	r1, r1
    1b56:	6a 5f       	subi	r22, 0xFA	; 250
    1b58:	7e 4f       	sbci	r23, 0xFE	; 254
    1b5a:	84 e6       	ldi	r24, 0x64	; 100
    1b5c:	9a e0       	ldi	r25, 0x0A	; 10
    1b5e:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <_ZN6StringaSEPKc>
    1b62:	80 91 6c 0a 	lds	r24, 0x0A6C	; 0x800a6c <key_idx>
    1b66:	84 30       	cpi	r24, 0x04	; 4
    1b68:	09 f0       	breq	.+2      	; 0x1b6c <_Z23getTastoPremuto_x_targav+0x13c>
    1b6a:	62 c0       	rjmp	.+196    	; 0x1c30 <_Z23getTastoPremuto_x_targav+0x200>
    1b6c:	80 91 6d 0a 	lds	r24, 0x0A6D	; 0x800a6d <key_idx+0x1>
    1b70:	83 30       	cpi	r24, 0x03	; 3
    1b72:	81 f4       	brne	.+32     	; 0x1b94 <_Z23getTastoPremuto_x_targav+0x164>
    1b74:	80 91 6a 0a 	lds	r24, 0x0A6A	; 0x800a6a <prolungato>
    1b78:	8f 5f       	subi	r24, 0xFF	; 255
    1b7a:	80 93 6a 0a 	sts	0x0A6A, r24	; 0x800a6a <prolungato>
    1b7e:	83 30       	cpi	r24, 0x03	; 3
    1b80:	08 f4       	brcc	.+2      	; 0x1b84 <_Z23getTastoPremuto_x_targav+0x154>
    1b82:	c0 c0       	rjmp	.+384    	; 0x1d04 <_Z23getTastoPremuto_x_targav+0x2d4>
    1b84:	80 91 62 0a 	lds	r24, 0x0A62	; 0x800a62 <TARGA+0x4>
    1b88:	90 91 63 0a 	lds	r25, 0x0A63	; 0x800a63 <TARGA+0x5>
    1b8c:	05 97       	sbiw	r24, 0x05	; 5
    1b8e:	09 f0       	breq	.+2      	; 0x1b92 <_Z23getTastoPremuto_x_targav+0x162>
    1b90:	b9 c0       	rjmp	.+370    	; 0x1d04 <_Z23getTastoPremuto_x_targav+0x2d4>
    1b92:	3f c1       	rjmp	.+638    	; 0x1e12 <_Z23getTastoPremuto_x_targav+0x3e2>
    1b94:	81 30       	cpi	r24, 0x01	; 1
    1b96:	09 f0       	breq	.+2      	; 0x1b9a <_Z23getTastoPremuto_x_targav+0x16a>
    1b98:	53 c0       	rjmp	.+166    	; 0x1c40 <_Z23getTastoPremuto_x_targav+0x210>
    1b9a:	80 91 6a 0a 	lds	r24, 0x0A6A	; 0x800a6a <prolungato>
    1b9e:	8f 5f       	subi	r24, 0xFF	; 255
    1ba0:	80 93 6a 0a 	sts	0x0A6A, r24	; 0x800a6a <prolungato>
    1ba4:	83 30       	cpi	r24, 0x03	; 3
    1ba6:	08 f4       	brcc	.+2      	; 0x1baa <_Z23getTastoPremuto_x_targav+0x17a>
    1ba8:	ad c0       	rjmp	.+346    	; 0x1d04 <_Z23getTastoPremuto_x_targav+0x2d4>
    1baa:	63 ec       	ldi	r22, 0xC3	; 195
    1bac:	71 e0       	ldi	r23, 0x01	; 1
    1bae:	8e e5       	ldi	r24, 0x5E	; 94
    1bb0:	9a e0       	ldi	r25, 0x0A	; 10
    1bb2:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <_ZN6StringaSEPKc>
    1bb6:	6f e5       	ldi	r22, 0x5F	; 95
    1bb8:	74 e0       	ldi	r23, 0x04	; 4
    1bba:	8b e3       	ldi	r24, 0x3B	; 59
    1bbc:	9b e0       	ldi	r25, 0x0B	; 11
    1bbe:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <_ZN6StringaSEPKc>
    1bc2:	63 ec       	ldi	r22, 0xC3	; 195
    1bc4:	71 e0       	ldi	r23, 0x01	; 1
    1bc6:	81 e4       	ldi	r24, 0x41	; 65
    1bc8:	9b e0       	ldi	r25, 0x0B	; 11
    1bca:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <_ZN6StringaSEPKc>
    1bce:	63 e7       	ldi	r22, 0x73	; 115
    1bd0:	74 e0       	ldi	r23, 0x04	; 4
    1bd2:	ce 01       	movw	r24, r28
    1bd4:	01 96       	adiw	r24, 0x01	; 1
    1bd6:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <_ZN6StringC1EPKc>
    1bda:	6e e5       	ldi	r22, 0x5E	; 94
    1bdc:	7a e0       	ldi	r23, 0x0A	; 10
    1bde:	ce 01       	movw	r24, r28
    1be0:	01 96       	adiw	r24, 0x01	; 1
    1be2:	0e 94 37 3f 	call	0x7e6e	; 0x7e6e <_ZplRK15StringSumHelperRK6String>
    1be6:	bc 01       	movw	r22, r24
    1be8:	87 e4       	ldi	r24, 0x47	; 71
    1bea:	9b e0       	ldi	r25, 0x0B	; 11
    1bec:	0e 94 36 3e 	call	0x7c6c	; 0x7c6c <_ZN6StringaSERKS_>
    1bf0:	ce 01       	movw	r24, r28
    1bf2:	01 96       	adiw	r24, 0x01	; 1
    1bf4:	0e 94 78 3d 	call	0x7af0	; 0x7af0 <_ZN6StringD1Ev>
    1bf8:	80 ec       	ldi	r24, 0xC0	; 192
    1bfa:	9b e0       	ldi	r25, 0x0B	; 11
    1bfc:	0e 94 98 2a 	call	0x5530	; 0x5530 <_ZN3LCD5clearEv>
    1c00:	43 e0       	ldi	r20, 0x03	; 3
    1c02:	60 e0       	ldi	r22, 0x00	; 0
    1c04:	80 ec       	ldi	r24, 0xC0	; 192
    1c06:	9b e0       	ldi	r25, 0x0B	; 11
    1c08:	0e 94 9e 2a 	call	0x553c	; 0x553c <_ZN3LCD9setCursorEhh>
    1c0c:	63 e7       	ldi	r22, 0x73	; 115
    1c0e:	74 e0       	ldi	r23, 0x04	; 4
    1c10:	ce 01       	movw	r24, r28
    1c12:	01 96       	adiw	r24, 0x01	; 1
    1c14:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <_ZN6StringC1EPKc>
    1c18:	6e e5       	ldi	r22, 0x5E	; 94
    1c1a:	7a e0       	ldi	r23, 0x0A	; 10
    1c1c:	ce 01       	movw	r24, r28
    1c1e:	01 96       	adiw	r24, 0x01	; 1
    1c20:	0e 94 37 3f 	call	0x7e6e	; 0x7e6e <_ZplRK15StringSumHelperRK6String>
    1c24:	bc 01       	movw	r22, r24
    1c26:	80 ec       	ldi	r24, 0xC0	; 192
    1c28:	9b e0       	ldi	r25, 0x0B	; 11
    1c2a:	0e 94 00 3b 	call	0x7600	; 0x7600 <_ZN5Print5printERK6String>
    1c2e:	27 c0       	rjmp	.+78     	; 0x1c7e <_Z23getTastoPremuto_x_targav+0x24e>
    1c30:	81 30       	cpi	r24, 0x01	; 1
    1c32:	21 f0       	breq	.+8      	; 0x1c3c <_Z23getTastoPremuto_x_targav+0x20c>
    1c34:	82 30       	cpi	r24, 0x02	; 2
    1c36:	11 f0       	breq	.+4      	; 0x1c3c <_Z23getTastoPremuto_x_targav+0x20c>
    1c38:	83 30       	cpi	r24, 0x03	; 3
    1c3a:	31 f5       	brne	.+76     	; 0x1c88 <_Z23getTastoPremuto_x_targav+0x258>
    1c3c:	80 91 6d 0a 	lds	r24, 0x0A6D	; 0x800a6d <key_idx+0x1>
    1c40:	84 30       	cpi	r24, 0x04	; 4
    1c42:	11 f5       	brne	.+68     	; 0x1c88 <_Z23getTastoPremuto_x_targav+0x258>
    1c44:	6f e5       	ldi	r22, 0x5F	; 95
    1c46:	74 e0       	ldi	r23, 0x04	; 4
    1c48:	8b e3       	ldi	r24, 0x3B	; 59
    1c4a:	9b e0       	ldi	r25, 0x0B	; 11
    1c4c:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <_ZN6StringaSEPKc>
    1c50:	63 ec       	ldi	r22, 0xC3	; 195
    1c52:	71 e0       	ldi	r23, 0x01	; 1
    1c54:	81 e4       	ldi	r24, 0x41	; 65
    1c56:	9b e0       	ldi	r25, 0x0B	; 11
    1c58:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <_ZN6StringaSEPKc>
    1c5c:	63 e7       	ldi	r22, 0x73	; 115
    1c5e:	74 e0       	ldi	r23, 0x04	; 4
    1c60:	ce 01       	movw	r24, r28
    1c62:	01 96       	adiw	r24, 0x01	; 1
    1c64:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <_ZN6StringC1EPKc>
    1c68:	6e e5       	ldi	r22, 0x5E	; 94
    1c6a:	7a e0       	ldi	r23, 0x0A	; 10
    1c6c:	ce 01       	movw	r24, r28
    1c6e:	01 96       	adiw	r24, 0x01	; 1
    1c70:	0e 94 37 3f 	call	0x7e6e	; 0x7e6e <_ZplRK15StringSumHelperRK6String>
    1c74:	bc 01       	movw	r22, r24
    1c76:	87 e4       	ldi	r24, 0x47	; 71
    1c78:	9b e0       	ldi	r25, 0x0B	; 11
    1c7a:	0e 94 36 3e 	call	0x7c6c	; 0x7c6c <_ZN6StringaSERKS_>
    1c7e:	ce 01       	movw	r24, r28
    1c80:	01 96       	adiw	r24, 0x01	; 1
    1c82:	0e 94 78 3d 	call	0x7af0	; 0x7af0 <_ZN6StringD1Ev>
    1c86:	3e c0       	rjmp	.+124    	; 0x1d04 <_Z23getTastoPremuto_x_targav+0x2d4>
    1c88:	80 91 6b 0a 	lds	r24, 0x0A6B	; 0x800a6b <premuto>
    1c8c:	82 30       	cpi	r24, 0x02	; 2
    1c8e:	d0 f5       	brcc	.+116    	; 0x1d04 <_Z23getTastoPremuto_x_targav+0x2d4>
    1c90:	20 91 6d 0a 	lds	r18, 0x0A6D	; 0x800a6d <key_idx+0x1>
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	a9 01       	movw	r20, r18
    1c98:	41 50       	subi	r20, 0x01	; 1
    1c9a:	51 09       	sbc	r21, r1
    1c9c:	64 e6       	ldi	r22, 0x64	; 100
    1c9e:	7a e0       	ldi	r23, 0x0A	; 10
    1ca0:	ce 01       	movw	r24, r28
    1ca2:	01 96       	adiw	r24, 0x01	; 1
    1ca4:	0e 94 ab 3f 	call	0x7f56	; 0x7f56 <_ZNK6String9substringEjj>
    1ca8:	be 01       	movw	r22, r28
    1caa:	6f 5f       	subi	r22, 0xFF	; 255
    1cac:	7f 4f       	sbci	r23, 0xFF	; 255
    1cae:	8e e5       	ldi	r24, 0x5E	; 94
    1cb0:	9a e0       	ldi	r25, 0x0A	; 10
    1cb2:	0e 94 23 3f 	call	0x7e46	; 0x7e46 <_ZN6String6concatERKS_>
    1cb6:	ce 01       	movw	r24, r28
    1cb8:	01 96       	adiw	r24, 0x01	; 1
    1cba:	0e 94 78 3d 	call	0x7af0	; 0x7af0 <_ZN6StringD1Ev>
    1cbe:	6f e5       	ldi	r22, 0x5F	; 95
    1cc0:	74 e0       	ldi	r23, 0x04	; 4
    1cc2:	8b e3       	ldi	r24, 0x3B	; 59
    1cc4:	9b e0       	ldi	r25, 0x0B	; 11
    1cc6:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <_ZN6StringaSEPKc>
    1cca:	63 ec       	ldi	r22, 0xC3	; 195
    1ccc:	71 e0       	ldi	r23, 0x01	; 1
    1cce:	81 e4       	ldi	r24, 0x41	; 65
    1cd0:	9b e0       	ldi	r25, 0x0B	; 11
    1cd2:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <_ZN6StringaSEPKc>
    1cd6:	63 e7       	ldi	r22, 0x73	; 115
    1cd8:	74 e0       	ldi	r23, 0x04	; 4
    1cda:	ce 01       	movw	r24, r28
    1cdc:	01 96       	adiw	r24, 0x01	; 1
    1cde:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <_ZN6StringC1EPKc>
    1ce2:	6e e5       	ldi	r22, 0x5E	; 94
    1ce4:	7a e0       	ldi	r23, 0x0A	; 10
    1ce6:	ce 01       	movw	r24, r28
    1ce8:	01 96       	adiw	r24, 0x01	; 1
    1cea:	0e 94 37 3f 	call	0x7e6e	; 0x7e6e <_ZplRK15StringSumHelperRK6String>
    1cee:	bc 01       	movw	r22, r24
    1cf0:	87 e4       	ldi	r24, 0x47	; 71
    1cf2:	9b e0       	ldi	r25, 0x0B	; 11
    1cf4:	0e 94 36 3e 	call	0x7c6c	; 0x7c6c <_ZN6StringaSERKS_>
    1cf8:	ce 01       	movw	r24, r28
    1cfa:	01 96       	adiw	r24, 0x01	; 1
    1cfc:	0e 94 78 3d 	call	0x7af0	; 0x7af0 <_ZN6StringD1Ev>
    1d00:	10 92 6a 0a 	sts	0x0A6A, r1	; 0x800a6a <prolungato>
    1d04:	10 92 6b 0a 	sts	0x0A6B, r1	; 0x800a6b <premuto>
    1d08:	8f e3       	ldi	r24, 0x3F	; 63
    1d0a:	9f e1       	ldi	r25, 0x1F	; 31
    1d0c:	01 97       	sbiw	r24, 0x01	; 1
    1d0e:	f1 f7       	brne	.-4      	; 0x1d0c <_Z23getTastoPremuto_x_targav+0x2dc>
    1d10:	00 c0       	rjmp	.+0      	; 0x1d12 <_Z23getTastoPremuto_x_targav+0x2e2>
    1d12:	00 00       	nop
    1d14:	b3 ce       	rjmp	.-666    	; 0x1a7c <_Z23getTastoPremuto_x_targav+0x4c>
    1d16:	40 e0       	ldi	r20, 0x00	; 0
    1d18:	60 e0       	ldi	r22, 0x00	; 0
    1d1a:	80 ec       	ldi	r24, 0xC0	; 192
    1d1c:	9b e0       	ldi	r25, 0x0B	; 11
    1d1e:	0e 94 9e 2a 	call	0x553c	; 0x553c <_ZN3LCD9setCursorEhh>
    1d22:	40 91 78 0a 	lds	r20, 0x0A78	; 0x800a78 <UltimoPassaggioStato>
    1d26:	50 91 79 0a 	lds	r21, 0x0A79	; 0x800a79 <UltimoPassaggioStato+0x1>
    1d2a:	60 91 7a 0a 	lds	r22, 0x0A7A	; 0x800a7a <UltimoPassaggioStato+0x2>
    1d2e:	70 91 7b 0a 	lds	r23, 0x0A7B	; 0x800a7b <UltimoPassaggioStato+0x3>
    1d32:	80 91 74 0a 	lds	r24, 0x0A74	; 0x800a74 <Timer>
    1d36:	90 91 75 0a 	lds	r25, 0x0A75	; 0x800a75 <Timer+0x1>
    1d3a:	a0 91 76 0a 	lds	r26, 0x0A76	; 0x800a76 <Timer+0x2>
    1d3e:	b0 91 77 0a 	lds	r27, 0x0A77	; 0x800a77 <Timer+0x3>
    1d42:	48 0f       	add	r20, r24
    1d44:	59 1f       	adc	r21, r25
    1d46:	6a 1f       	adc	r22, r26
    1d48:	7b 1f       	adc	r23, r27
    1d4a:	41 50       	subi	r20, 0x01	; 1
    1d4c:	51 09       	sbc	r21, r1
    1d4e:	61 09       	sbc	r22, r1
    1d50:	71 09       	sbc	r23, r1
    1d52:	80 91 7c 0a 	lds	r24, 0x0A7C	; 0x800a7c <secs>
    1d56:	90 91 7d 0a 	lds	r25, 0x0A7D	; 0x800a7d <secs+0x1>
    1d5a:	a0 91 7e 0a 	lds	r26, 0x0A7E	; 0x800a7e <secs+0x2>
    1d5e:	b0 91 7f 0a 	lds	r27, 0x0A7F	; 0x800a7f <secs+0x3>
    1d62:	48 1b       	sub	r20, r24
    1d64:	59 0b       	sbc	r21, r25
    1d66:	6a 0b       	sbc	r22, r26
    1d68:	7b 0b       	sbc	r23, r27
    1d6a:	2a e0       	ldi	r18, 0x0A	; 10
    1d6c:	ce 01       	movw	r24, r28
    1d6e:	07 96       	adiw	r24, 0x07	; 7
    1d70:	0e 94 9e 3e 	call	0x7d3c	; 0x7d3c <_ZN6StringC1Emh>
    1d74:	62 ea       	ldi	r22, 0xA2	; 162
    1d76:	72 e0       	ldi	r23, 0x02	; 2
    1d78:	ce 01       	movw	r24, r28
    1d7a:	01 96       	adiw	r24, 0x01	; 1
    1d7c:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <_ZN6StringC1EPKc>
    1d80:	be 01       	movw	r22, r28
    1d82:	69 5f       	subi	r22, 0xF9	; 249
    1d84:	7f 4f       	sbci	r23, 0xFF	; 255
    1d86:	ce 01       	movw	r24, r28
    1d88:	01 96       	adiw	r24, 0x01	; 1
    1d8a:	0e 94 37 3f 	call	0x7e6e	; 0x7e6e <_ZplRK15StringSumHelperRK6String>
    1d8e:	6a ea       	ldi	r22, 0xAA	; 170
    1d90:	72 e0       	ldi	r23, 0x02	; 2
    1d92:	0e 94 48 3f 	call	0x7e90	; 0x7e90 <_ZplRK15StringSumHelperPKc>
    1d96:	bc 01       	movw	r22, r24
    1d98:	80 ec       	ldi	r24, 0xC0	; 192
    1d9a:	9b e0       	ldi	r25, 0x0B	; 11
    1d9c:	0e 94 00 3b 	call	0x7600	; 0x7600 <_ZN5Print5printERK6String>
    1da0:	ce 01       	movw	r24, r28
    1da2:	01 96       	adiw	r24, 0x01	; 1
    1da4:	0e 94 78 3d 	call	0x7af0	; 0x7af0 <_ZN6StringD1Ev>
    1da8:	ce 01       	movw	r24, r28
    1daa:	07 96       	adiw	r24, 0x07	; 7
    1dac:	0e 94 78 3d 	call	0x7af0	; 0x7af0 <_ZN6StringD1Ev>
    1db0:	61 e0       	ldi	r22, 0x01	; 1
    1db2:	80 ec       	ldi	r24, 0xC0	; 192
    1db4:	9b e0       	ldi	r25, 0x0B	; 11
    1db6:	0e 94 0f 3b 	call	0x761e	; 0x761e <_ZN5Print5printEc>
    1dba:	43 e0       	ldi	r20, 0x03	; 3
    1dbc:	60 e0       	ldi	r22, 0x00	; 0
    1dbe:	80 ec       	ldi	r24, 0xC0	; 192
    1dc0:	9b e0       	ldi	r25, 0x0B	; 11
    1dc2:	0e 94 9e 2a 	call	0x553c	; 0x553c <_ZN3LCD9setCursorEhh>
    1dc6:	63 e7       	ldi	r22, 0x73	; 115
    1dc8:	74 e0       	ldi	r23, 0x04	; 4
    1dca:	ce 01       	movw	r24, r28
    1dcc:	01 96       	adiw	r24, 0x01	; 1
    1dce:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <_ZN6StringC1EPKc>
    1dd2:	6e e5       	ldi	r22, 0x5E	; 94
    1dd4:	7a e0       	ldi	r23, 0x0A	; 10
    1dd6:	ce 01       	movw	r24, r28
    1dd8:	01 96       	adiw	r24, 0x01	; 1
    1dda:	0e 94 37 3f 	call	0x7e6e	; 0x7e6e <_ZplRK15StringSumHelperRK6String>
    1dde:	bc 01       	movw	r22, r24
    1de0:	80 ec       	ldi	r24, 0xC0	; 192
    1de2:	9b e0       	ldi	r25, 0x0B	; 11
    1de4:	0e 94 00 3b 	call	0x7600	; 0x7600 <_ZN5Print5printERK6String>
    1de8:	ce 01       	movw	r24, r28
    1dea:	01 96       	adiw	r24, 0x01	; 1
    1dec:	0e 94 78 3d 	call	0x7af0	; 0x7af0 <_ZN6StringD1Ev>
    1df0:	ce 01       	movw	r24, r28
    1df2:	0d 96       	adiw	r24, 0x0d	; 13
    1df4:	0e 94 78 3d 	call	0x7af0	; 0x7af0 <_ZN6StringD1Ev>
    1df8:	62 96       	adiw	r28, 0x12	; 18
    1dfa:	0f b6       	in	r0, 0x3f	; 63
    1dfc:	f8 94       	cli
    1dfe:	de bf       	out	0x3e, r29	; 62
    1e00:	0f be       	out	0x3f, r0	; 63
    1e02:	cd bf       	out	0x3d, r28	; 61
    1e04:	df 91       	pop	r29
    1e06:	cf 91       	pop	r28
    1e08:	1f 91       	pop	r17
    1e0a:	0f 91       	pop	r16
    1e0c:	ff 90       	pop	r15
    1e0e:	ef 90       	pop	r14
    1e10:	08 95       	ret
    1e12:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <TselDistributore>
    1e16:	70 91 23 01 	lds	r23, 0x0123	; 0x800123 <TselDistributore+0x1>
    1e1a:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <TselDistributore+0x2>
    1e1e:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <TselDistributore+0x3>
    1e22:	0e 94 cc 05 	call	0xb98	; 0xb98 <_Z11avanzaStatom>
    1e26:	6e cf       	rjmp	.-292    	; 0x1d04 <_Z23getTastoPremuto_x_targav+0x2d4>

00001e28 <_Z6Azzerav>:
   if (azione == 1) {SET_BIT(PORTB,3);} else if (azione == 0) { CLEAR_BIT(PORTB,3); }
}

void Azzera()
{
   RispostaHTTP = "";
    1e28:	63 ec       	ldi	r22, 0xC3	; 195
    1e2a:	71 e0       	ldi	r23, 0x01	; 1
    1e2c:	8f e8       	ldi	r24, 0x8F	; 143
    1e2e:	9b e0       	ldi	r25, 0x0B	; 11
    1e30:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <_ZN6StringaSEPKc>
   impulsi = 0;
    1e34:	10 92 96 0b 	sts	0x0B96, r1	; 0x800b96 <impulsi+0x1>
    1e38:	10 92 95 0b 	sts	0x0B95, r1	; 0x800b95 <impulsi>
   alreadyTimbrata = false;
    1e3c:	10 92 d8 0b 	sts	0x0BD8, r1	; 0x800bd8 <alreadyTimbrata>
   
   Carburante = "X";
    1e40:	6a ef       	ldi	r22, 0xFA	; 250
    1e42:	72 e0       	ldi	r23, 0x02	; 2
    1e44:	85 e6       	ldi	r24, 0x65	; 101
    1e46:	9b e0       	ldi	r25, 0x0B	; 11
    1e48:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <_ZN6StringaSEPKc>
   SequenzaKeypad[0] = "";
    1e4c:	63 ec       	ldi	r22, 0xC3	; 195
    1e4e:	71 e0       	ldi	r23, 0x01	; 1
    1e50:	89 e5       	ldi	r24, 0x59	; 89
    1e52:	9b e0       	ldi	r25, 0x0B	; 11
    1e54:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <_ZN6StringaSEPKc>
   SequenzaKeypad[1] = "";
    1e58:	63 ec       	ldi	r22, 0xC3	; 195
    1e5a:	71 e0       	ldi	r23, 0x01	; 1
    1e5c:	8f e5       	ldi	r24, 0x5F	; 95
    1e5e:	9b e0       	ldi	r25, 0x0B	; 11
    1e60:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <_ZN6StringaSEPKc>
   
   Rele_Abilitazione1(1,7);
    1e64:	67 e0       	ldi	r22, 0x07	; 7
    1e66:	70 e0       	ldi	r23, 0x00	; 0
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	3c d8       	rcall	.-3976   	; 0xee6 <_Z18Rele_Abilitazione1ii>
   Rele_Abilitazione2(1,7);
    1e6e:	67 e0       	ldi	r22, 0x07	; 7
    1e70:	70 e0       	ldi	r23, 0x00	; 0
    1e72:	81 e0       	ldi	r24, 0x01	; 1
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	72 d8       	rcall	.-3868   	; 0xf5c <_Z18Rele_Abilitazione2ii>
   Control_WIFI(0);
    1e78:	80 e0       	ldi	r24, 0x00	; 0
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	b3 d8       	rcall	.-3738   	; 0xfe4 <_Z12Control_WIFIi>
   
   clientToServizio.flush();
    1e7e:	8f e9       	ldi	r24, 0x9F	; 159
    1e80:	9a e0       	ldi	r25, 0x0A	; 10
    1e82:	0e 94 5e 22 	call	0x44bc	; 0x44bc <_ZN14EthernetClient5flushEv>
   clientToServizio.stop();
    1e86:	8f e9       	ldi	r24, 0x9F	; 159
    1e88:	9a e0       	ldi	r25, 0x0A	; 10
    1e8a:	0e 94 b4 22 	call	0x4568	; 0x4568 <_ZN14EthernetClient4stopEv>
   clientREST.flush();
    1e8e:	8c ea       	ldi	r24, 0xAC	; 172
    1e90:	9a e0       	ldi	r25, 0x0A	; 10
    1e92:	0e 94 5e 22 	call	0x44bc	; 0x44bc <_ZN14EthernetClient5flushEv>
   clientREST.stop();
    1e96:	8c ea       	ldi	r24, 0xAC	; 172
    1e98:	9a e0       	ldi	r25, 0x0A	; 10
    1e9a:	0e 94 b4 22 	call	0x4568	; 0x4568 <_ZN14EthernetClient4stopEv>
   Connected = false;
    1e9e:	10 92 9a 0b 	sts	0x0B9A, r1	; 0x800b9a <Connected+0x1>
    1ea2:	10 92 99 0b 	sts	0x0B99, r1	; 0x800b99 <Connected>
static const uint8_t RELE2 = PORTA7;

static inline void initSS_FLASH()  { DDRB |= (1 << PB4); } // set DDRB bit 4, sets PB4 for output
static inline void initSS_ETH()    { DDRC |= (1 << PC4); } // set DDRC bit 4, sets PC4 for output
static inline void enable_ETH()    { PORTC &= ~(1 << PC4); } // Set 0 Bit 4 PORTC Register
static inline void enable_FLASH()  { PORTB &= ~(1 << PB4); } // Set 0 Bit 4 PORTB Register
    1ea6:	2c 98       	cbi	0x05, 4	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1ea8:	8f e1       	ldi	r24, 0x1F	; 31
    1eaa:	9e e4       	ldi	r25, 0x4E	; 78
    1eac:	01 97       	sbiw	r24, 0x01	; 1
    1eae:	f1 f7       	brne	.-4      	; 0x1eac <_Z6Azzerav+0x84>
    1eb0:	00 c0       	rjmp	.+0      	; 0x1eb2 <_Z6Azzerav+0x8a>
    1eb2:	00 00       	nop
   clientREST.stop();
   Connected = false;
   
   enable_FLASH();
   _delay_ms(5);
   disable_FLASH();
    1eb4:	0e 94 95 01 	call	0x32a	; 0x32a <_ZL13disable_FLASHv>
    1eb8:	8f e1       	ldi	r24, 0x1F	; 31
    1eba:	9e e4       	ldi	r25, 0x4E	; 78
    1ebc:	01 97       	sbiw	r24, 0x01	; 1
    1ebe:	f1 f7       	brne	.-4      	; 0x1ebc <_Z6Azzerav+0x94>
    1ec0:	00 c0       	rjmp	.+0      	; 0x1ec2 <_Z6Azzerav+0x9a>
    1ec2:	00 00       	nop
   _delay_ms(5);
   disable_ETH();
    1ec4:	0e 94 93 01 	call	0x326	; 0x326 <_ZL11disable_ETHv>
    1ec8:	8f e1       	ldi	r24, 0x1F	; 31
    1eca:	9e e4       	ldi	r25, 0x4E	; 78
    1ecc:	01 97       	sbiw	r24, 0x01	; 1
    1ece:	f1 f7       	brne	.-4      	; 0x1ecc <_Z6Azzerav+0xa4>
    1ed0:	00 c0       	rjmp	.+0      	; 0x1ed2 <_Z6Azzerav+0xaa>
    1ed2:	00 00       	nop
static const uint8_t RELE1 = PORTC7;
static const uint8_t RELE2 = PORTA7;

static inline void initSS_FLASH()  { DDRB |= (1 << PB4); } // set DDRB bit 4, sets PB4 for output
static inline void initSS_ETH()    { DDRC |= (1 << PC4); } // set DDRC bit 4, sets PC4 for output
static inline void enable_ETH()    { PORTC &= ~(1 << PC4); } // Set 0 Bit 4 PORTC Register
    1ed4:	44 98       	cbi	0x08, 4	; 8
   _delay_ms(5);
   disable_ETH();
   _delay_ms(5); 
   enable_ETH(); 
     
   SET_BIT(PORTA,A1);
    1ed6:	82 b1       	in	r24, 0x02	; 2
    1ed8:	82 b9       	out	0x02, r24	; 2
   SET_BIT(PORTA,A2);
    1eda:	82 b1       	in	r24, 0x02	; 2
    1edc:	82 b9       	out	0x02, r24	; 2
   
   righeDisplay[1] =  "";
    1ede:	63 ec       	ldi	r22, 0xC3	; 195
    1ee0:	71 e0       	ldi	r23, 0x01	; 1
    1ee2:	8b e3       	ldi	r24, 0x3B	; 59
    1ee4:	9b e0       	ldi	r25, 0x0B	; 11
    1ee6:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <_ZN6StringaSEPKc>
   righeDisplay[2] =  "";
    1eea:	63 ec       	ldi	r22, 0xC3	; 195
    1eec:	71 e0       	ldi	r23, 0x01	; 1
    1eee:	81 e4       	ldi	r24, 0x41	; 65
    1ef0:	9b e0       	ldi	r25, 0x0B	; 11
    1ef2:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <_ZN6StringaSEPKc>
   righeDisplay[2] =  "";
    1ef6:	63 ec       	ldi	r22, 0xC3	; 195
    1ef8:	71 e0       	ldi	r23, 0x01	; 1
    1efa:	81 e4       	ldi	r24, 0x41	; 65
    1efc:	9b e0       	ldi	r25, 0x0B	; 11
    1efe:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <_ZN6StringaSEPKc>
   
   lcd.noBacklight();
    1f02:	80 ec       	ldi	r24, 0xC0	; 192
    1f04:	9b e0       	ldi	r25, 0x0B	; 11
    1f06:	0e 94 88 2a 	call	0x5510	; 0x5510 <_ZN3LCD11noBacklightEv>
   lcd.noDisplay();
    1f0a:	80 ec       	ldi	r24, 0xC0	; 192
    1f0c:	9b e0       	ldi	r25, 0x0B	; 11
    1f0e:	0e 94 e0 2a 	call	0x55c0	; 0x55c0 <_ZN3LCD9noDisplayEv>
   secs = 0;
    1f12:	10 92 7c 0a 	sts	0x0A7C, r1	; 0x800a7c <secs>
    1f16:	10 92 7d 0a 	sts	0x0A7D, r1	; 0x800a7d <secs+0x1>
    1f1a:	10 92 7e 0a 	sts	0x0A7E, r1	; 0x800a7e <secs+0x2>
    1f1e:	10 92 7f 0a 	sts	0x0A7F, r1	; 0x800a7f <secs+0x3>
   UltimoPassaggioStato = 0;
    1f22:	10 92 78 0a 	sts	0x0A78, r1	; 0x800a78 <UltimoPassaggioStato>
    1f26:	10 92 79 0a 	sts	0x0A79, r1	; 0x800a79 <UltimoPassaggioStato+0x1>
    1f2a:	10 92 7a 0a 	sts	0x0A7A, r1	; 0x800a7a <UltimoPassaggioStato+0x2>
    1f2e:	10 92 7b 0a 	sts	0x0A7B, r1	; 0x800a7b <UltimoPassaggioStato+0x3>
   
   printLine();
    1f32:	0e 94 05 02 	call	0x40a	; 0x40a <_Z9printLinev>
   Serial.println("Azzera....... OK");
    1f36:	66 ea       	ldi	r22, 0xA6	; 166
    1f38:	76 e0       	ldi	r23, 0x06	; 6
    1f3a:	8f e4       	ldi	r24, 0x4F	; 79
    1f3c:	9d e0       	ldi	r25, 0x0D	; 13
    1f3e:	0e 94 39 3b 	call	0x7672	; 0x7672 <_ZN5Print7printlnEPKc>
   printLine();
    1f42:	0e 94 05 02 	call	0x40a	; 0x40a <_Z9printLinev>
   
   stato_procedura = -2;
    1f46:	8e ef       	ldi	r24, 0xFE	; 254
    1f48:	9f ef       	ldi	r25, 0xFF	; 255
    1f4a:	90 93 98 0b 	sts	0x0B98, r25	; 0x800b98 <stato_procedura+0x1>
    1f4e:	80 93 97 0b 	sts	0x0B97, r24	; 0x800b97 <stato_procedura>
    1f52:	08 95       	ret

00001f54 <_Z17InviaRifornimentoiiPci6String>:

/********************************************************************/


bool InviaRifornimento(int P_stato,int p_connesso, char P_datiVerifica[],int P_l_buffer,String P_prefisso)
{ 
    1f54:	af 92       	push	r10
    1f56:	bf 92       	push	r11
    1f58:	cf 92       	push	r12
    1f5a:	df 92       	push	r13
    1f5c:	ef 92       	push	r14
    1f5e:	ff 92       	push	r15
    1f60:	0f 93       	push	r16
    1f62:	1f 93       	push	r17
    1f64:	cf 93       	push	r28
    1f66:	df 93       	push	r29
    1f68:	00 d0       	rcall	.+0      	; 0x1f6a <_Z17InviaRifornimentoiiPci6String+0x16>
    1f6a:	00 d0       	rcall	.+0      	; 0x1f6c <_Z17InviaRifornimentoiiPci6String+0x18>
    1f6c:	00 d0       	rcall	.+0      	; 0x1f6e <_Z17InviaRifornimentoiiPci6String+0x1a>
    1f6e:	cd b7       	in	r28, 0x3d	; 61
    1f70:	de b7       	in	r29, 0x3e	; 62
    1f72:	5b 01       	movw	r10, r22
    1f74:	8a 01       	movw	r16, r20
    1f76:	69 01       	movw	r12, r18
    clientToServizio.flush();
    //clientToServizio.stop();
    return true;
  }
  else {return false;};
}
    1f78:	ed b6       	in	r14, 0x3d	; 61
    1f7a:	fe b6       	in	r15, 0x3e	; 62


bool InviaRifornimento(int P_stato,int p_connesso, char P_datiVerifica[],int P_l_buffer,String P_prefisso)
{ 
  //Risposta = "999";
  Serial.println("START InviaRifornimento !!");
    1f7c:	67 eb       	ldi	r22, 0xB7	; 183
    1f7e:	76 e0       	ldi	r23, 0x06	; 6
    1f80:	8f e4       	ldi	r24, 0x4F	; 79
    1f82:	9d e0       	ldi	r25, 0x0D	; 13
    1f84:	0e 94 39 3b 	call	0x7672	; 0x7672 <_ZN5Print7printlnEPKc>
  
  if ((p_connesso))// && (P_stato == 7 ))
    1f88:	ab 28       	or	r10, r11
    1f8a:	09 f4       	brne	.+2      	; 0x1f8e <_Z17InviaRifornimentoiiPci6String+0x3a>
    1f8c:	4e c0       	rjmp	.+156    	; 0x202a <_Z17InviaRifornimentoiiPci6String+0xd6>
  {
    Serial.println("Connected to Server -- Invio Erogazione !!");
    1f8e:	62 ed       	ldi	r22, 0xD2	; 210
    1f90:	76 e0       	ldi	r23, 0x06	; 6
    1f92:	8f e4       	ldi	r24, 0x4F	; 79
    1f94:	9d e0       	ldi	r25, 0x0D	; 13
    1f96:	0e 94 39 3b 	call	0x7672	; 0x7672 <_ZN5Print7printlnEPKc>
    stato_procedura++;
    1f9a:	80 91 97 0b 	lds	r24, 0x0B97	; 0x800b97 <stato_procedura>
    1f9e:	90 91 98 0b 	lds	r25, 0x0B98	; 0x800b98 <stato_procedura+0x1>
    1fa2:	01 96       	adiw	r24, 0x01	; 1
    1fa4:	90 93 98 0b 	sts	0x0B98, r25	; 0x800b98 <stato_procedura+0x1>
    1fa8:	80 93 97 0b 	sts	0x0B97, r24	; 0x800b97 <stato_procedura>
    String TX =  String(P_datiVerifica);
    1fac:	b8 01       	movw	r22, r16
    1fae:	ce 01       	movw	r24, r28
    1fb0:	01 96       	adiw	r24, 0x01	; 1
    1fb2:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <_ZN6StringC1EPKc>
    char Invio[P_l_buffer];
    1fb6:	8d b7       	in	r24, 0x3d	; 61
    1fb8:	9e b7       	in	r25, 0x3e	; 62
    1fba:	8c 19       	sub	r24, r12
    1fbc:	9d 09       	sbc	r25, r13
    1fbe:	0f b6       	in	r0, 0x3f	; 63
    1fc0:	f8 94       	cli
    1fc2:	9e bf       	out	0x3e, r25	; 62
    1fc4:	0f be       	out	0x3f, r0	; 63
    1fc6:	8d bf       	out	0x3d, r24	; 61
    1fc8:	0d b7       	in	r16, 0x3d	; 61
    1fca:	1e b7       	in	r17, 0x3e	; 62
    1fcc:	0f 5f       	subi	r16, 0xFF	; 255
    1fce:	1f 4f       	sbci	r17, 0xFF	; 255
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{ getBytes((unsigned char *)buf, bufsize, index); }
    1fd0:	20 e0       	ldi	r18, 0x00	; 0
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	a6 01       	movw	r20, r12
    1fd6:	b8 01       	movw	r22, r16
    1fd8:	ce 01       	movw	r24, r28
    1fda:	01 96       	adiw	r24, 0x01	; 1
    1fdc:	0e 94 7d 3f 	call	0x7efa	; 0x7efa <_ZNK6String8getBytesEPhjj>
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    1fe0:	f8 01       	movw	r30, r16
    1fe2:	01 90       	ld	r0, Z+
    1fe4:	00 20       	and	r0, r0
    1fe6:	e9 f7       	brne	.-6      	; 0x1fe2 <_Z17InviaRifornimentoiiPci6String+0x8e>
    1fe8:	31 97       	sbiw	r30, 0x01	; 1
    1fea:	af 01       	movw	r20, r30
    1fec:	40 1b       	sub	r20, r16
    1fee:	51 0b       	sbc	r21, r17
    1ff0:	b8 01       	movw	r22, r16
    1ff2:	8f e9       	ldi	r24, 0x9F	; 159
    1ff4:	9a e0       	ldi	r25, 0x0A	; 10
    1ff6:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <_ZN14EthernetClient5writeEPKhj>
    1ffa:	9f ef       	ldi	r25, 0xFF	; 255
    1ffc:	29 ef       	ldi	r18, 0xF9	; 249
    1ffe:	80 e0       	ldi	r24, 0x00	; 0
    2000:	91 50       	subi	r25, 0x01	; 1
    2002:	20 40       	sbci	r18, 0x00	; 0
    2004:	80 40       	sbci	r24, 0x00	; 0
    2006:	e1 f7       	brne	.-8      	; 0x2000 <_Z17InviaRifornimentoiiPci6String+0xac>
    2008:	00 c0       	rjmp	.+0      	; 0x200a <_Z17InviaRifornimentoiiPci6String+0xb6>
    200a:	00 00       	nop
    TX.toCharArray(Invio,P_l_buffer);
    clientToServizio.write(Invio);
    _delay_ms(20);
    clientToServizio.flush();
    200c:	8f e9       	ldi	r24, 0x9F	; 159
    200e:	9a e0       	ldi	r25, 0x0A	; 10
    2010:	0e 94 5e 22 	call	0x44bc	; 0x44bc <_ZN14EthernetClient5flushEv>
  
  if ((p_connesso))// && (P_stato == 7 ))
  {
    Serial.println("Connected to Server -- Invio Erogazione !!");
    stato_procedura++;
    String TX =  String(P_datiVerifica);
    2014:	ce 01       	movw	r24, r28
    2016:	01 96       	adiw	r24, 0x01	; 1
    2018:	0e 94 78 3d 	call	0x7af0	; 0x7af0 <_ZN6StringD1Ev>
    201c:	0f b6       	in	r0, 0x3f	; 63
    201e:	f8 94       	cli
    2020:	fe be       	out	0x3e, r15	; 62
    2022:	0f be       	out	0x3f, r0	; 63
    2024:	ed be       	out	0x3d, r14	; 61
    2026:	81 e0       	ldi	r24, 0x01	; 1
    2028:	01 c0       	rjmp	.+2      	; 0x202c <_Z17InviaRifornimentoiiPci6String+0xd8>
    _delay_ms(20);
    clientToServizio.flush();
    //clientToServizio.stop();
    return true;
  }
  else {return false;};
    202a:	80 e0       	ldi	r24, 0x00	; 0
}
    202c:	0f b6       	in	r0, 0x3f	; 63
    202e:	f8 94       	cli
    2030:	fe be       	out	0x3e, r15	; 62
    2032:	0f be       	out	0x3f, r0	; 63
    2034:	ed be       	out	0x3d, r14	; 61
    2036:	26 96       	adiw	r28, 0x06	; 6
    2038:	0f b6       	in	r0, 0x3f	; 63
    203a:	f8 94       	cli
    203c:	de bf       	out	0x3e, r29	; 62
    203e:	0f be       	out	0x3f, r0	; 63
    2040:	cd bf       	out	0x3d, r28	; 61
    2042:	df 91       	pop	r29
    2044:	cf 91       	pop	r28
    2046:	1f 91       	pop	r17
    2048:	0f 91       	pop	r16
    204a:	ff 90       	pop	r15
    204c:	ef 90       	pop	r14
    204e:	df 90       	pop	r13
    2050:	cf 90       	pop	r12
    2052:	bf 90       	pop	r11
    2054:	af 90       	pop	r10
    2056:	08 95       	ret

00002058 <loop>:
    _delay_ms(100);
    Messaggio.toCharArray(MessaggioToServer, 100);  
}

/**************************LOOP PROCEDURA************************************/
void loop() {
    2058:	cf 92       	push	r12
    205a:	df 92       	push	r13
    205c:	ef 92       	push	r14
    205e:	ff 92       	push	r15
    2060:	0f 93       	push	r16
    2062:	1f 93       	push	r17
    2064:	cf 93       	push	r28
    2066:	df 93       	push	r29
    2068:	cd b7       	in	r28, 0x3d	; 61
    206a:	de b7       	in	r29, 0x3e	; 62
    206c:	6e 97       	sbiw	r28, 0x1e	; 30
    206e:	0f b6       	in	r0, 0x3f	; 63
    2070:	f8 94       	cli
    2072:	de bf       	out	0x3e, r29	; 62
    2074:	0f be       	out	0x3f, r0	; 63
    2076:	cd bf       	out	0x3d, r28	; 61
      
  switch (stato_procedura) {
    2078:	e0 91 97 0b 	lds	r30, 0x0B97	; 0x800b97 <stato_procedura>
    207c:	f0 91 98 0b 	lds	r31, 0x0B98	; 0x800b98 <stato_procedura+0x1>
    2080:	32 96       	adiw	r30, 0x02	; 2
    2082:	ec 30       	cpi	r30, 0x0C	; 12
    2084:	f1 05       	cpc	r31, r1
    2086:	08 f0       	brcs	.+2      	; 0x208a <loop+0x32>
    2088:	ca c3       	rjmp	.+1940   	; 0x281e <loop+0x7c6>
    208a:	ea 5b       	subi	r30, 0xBA	; 186
    208c:	ff 4f       	sbci	r31, 0xFF	; 255
    208e:	0c 94 63 41 	jmp	0x82c6	; 0x82c6 <__tablejump2__>
    case -2:
    { //cli(); // disable interrupt      
            
      righeDisplay[1] =  "";
    2092:	63 ec       	ldi	r22, 0xC3	; 195
    2094:	71 e0       	ldi	r23, 0x01	; 1
    2096:	8b e3       	ldi	r24, 0x3B	; 59
    2098:	9b e0       	ldi	r25, 0x0B	; 11
    209a:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <_ZN6StringaSEPKc>
      righeDisplay[2] = "Setting....";
    209e:	6d ef       	ldi	r22, 0xFD	; 253
    20a0:	76 e0       	ldi	r23, 0x06	; 6
    20a2:	81 e4       	ldi	r24, 0x41	; 65
    20a4:	9b e0       	ldi	r25, 0x0B	; 11
    20a6:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <_ZN6StringaSEPKc>
      righeDisplay[3] =  "";
    20aa:	63 ec       	ldi	r22, 0xC3	; 195
    20ac:	71 e0       	ldi	r23, 0x01	; 1
    20ae:	87 e4       	ldi	r24, 0x47	; 71
    20b0:	9b e0       	ldi	r25, 0x0B	; 11
    20b2:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <_ZN6StringaSEPKc>
      
      displayLCD(righeDisplay,stato_procedura,100);
    20b6:	60 91 97 0b 	lds	r22, 0x0B97	; 0x800b97 <stato_procedura>
    20ba:	70 91 98 0b 	lds	r23, 0x0B98	; 0x800b98 <stato_procedura+0x1>
    20be:	44 e6       	ldi	r20, 0x64	; 100
    20c0:	50 e0       	ldi	r21, 0x00	; 0
    20c2:	85 e3       	ldi	r24, 0x35	; 53
    20c4:	9b e0       	ldi	r25, 0x0B	; 11
    20c6:	0e 94 2c 05 	call	0xa58	; 0xa58 <_Z10displayLCDP6Stringii>
    20ca:	2f ef       	ldi	r18, 0xFF	; 255
    20cc:	83 ec       	ldi	r24, 0xC3	; 195
    20ce:	99 e0       	ldi	r25, 0x09	; 9
    20d0:	21 50       	subi	r18, 0x01	; 1
    20d2:	80 40       	sbci	r24, 0x00	; 0
    20d4:	90 40       	sbci	r25, 0x00	; 0
    20d6:	e1 f7       	brne	.-8      	; 0x20d0 <loop+0x78>
    20d8:	00 c0       	rjmp	.+0      	; 0x20da <loop+0x82>
    20da:	00 00       	nop
    20dc:	0d c0       	rjmp	.+26     	; 0x20f8 <loop+0xa0>
      stato_procedura++;
    }
    break;
    case -1:
    {             
    abilitaPulsanti();
    20de:	0e 94 2d 07 	call	0xe5a	; 0xe5a <_Z15abilitaPulsantiv>
    20e2:	2f ef       	ldi	r18, 0xFF	; 255
    20e4:	89 ef       	ldi	r24, 0xF9	; 249
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	21 50       	subi	r18, 0x01	; 1
    20ea:	80 40       	sbci	r24, 0x00	; 0
    20ec:	90 40       	sbci	r25, 0x00	; 0
    20ee:	e1 f7       	brne	.-8      	; 0x20e8 <loop+0x90>
    20f0:	00 c0       	rjmp	.+0      	; 0x20f2 <loop+0x9a>
    20f2:	00 00       	nop
    _delay_ms(20);
    abilitaContattiPistola();
    20f4:	0e 94 37 07 	call	0xe6e	; 0xe6e <_Z22abilitaContattiPistolav>
    
    stato_procedura++;
    20f8:	80 91 97 0b 	lds	r24, 0x0B97	; 0x800b97 <stato_procedura>
    20fc:	90 91 98 0b 	lds	r25, 0x0B98	; 0x800b98 <stato_procedura+0x1>
    2100:	01 96       	adiw	r24, 0x01	; 1
    2102:	90 93 98 0b 	sts	0x0B98, r25	; 0x800b98 <stato_procedura+0x1>
    2106:	80 93 97 0b 	sts	0x0B97, r24	; 0x800b97 <stato_procedura>
    }
    break;
    210a:	89 c3       	rjmp	.+1810   	; 0x281e <loop+0x7c6>
    case 0:
    { 
      righeDisplay[1] =  "";
    210c:	63 ec       	ldi	r22, 0xC3	; 195
    210e:	71 e0       	ldi	r23, 0x01	; 1
    2110:	8b e3       	ldi	r24, 0x3B	; 59
    2112:	9b e0       	ldi	r25, 0x0B	; 11
    2114:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <_ZN6StringaSEPKc>
      righeDisplay[2] =  "";
    2118:	63 ec       	ldi	r22, 0xC3	; 195
    211a:	71 e0       	ldi	r23, 0x01	; 1
    211c:	81 e4       	ldi	r24, 0x41	; 65
    211e:	9b e0       	ldi	r25, 0x0B	; 11
    2120:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <_ZN6StringaSEPKc>
      righeDisplay[3] =  "";
    2124:	63 ec       	ldi	r22, 0xC3	; 195
    2126:	71 e0       	ldi	r23, 0x01	; 1
    2128:	87 e4       	ldi	r24, 0x47	; 71
    212a:	9b e0       	ldi	r25, 0x0B	; 11
    212c:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <_ZN6StringaSEPKc>
          
      displayLCD(righeDisplay,stato_procedura,100);
    2130:	60 91 97 0b 	lds	r22, 0x0B97	; 0x800b97 <stato_procedura>
    2134:	70 91 98 0b 	lds	r23, 0x0B98	; 0x800b98 <stato_procedura+0x1>
    2138:	44 e6       	ldi	r20, 0x64	; 100
    213a:	50 e0       	ldi	r21, 0x00	; 0
    213c:	85 e3       	ldi	r24, 0x35	; 53
    213e:	9b e0       	ldi	r25, 0x0B	; 11
    2140:	0e 94 2c 05 	call	0xa58	; 0xa58 <_Z10displayLCDP6Stringii>
    2144:	2f ef       	ldi	r18, 0xFF	; 255
    2146:	87 ea       	ldi	r24, 0xA7	; 167
    2148:	91 e6       	ldi	r25, 0x61	; 97
    214a:	21 50       	subi	r18, 0x01	; 1
    214c:	80 40       	sbci	r24, 0x00	; 0
    214e:	90 40       	sbci	r25, 0x00	; 0
    2150:	e1 f7       	brne	.-8      	; 0x214a <loop+0xf2>
    2152:	00 c0       	rjmp	.+0      	; 0x2154 <loop+0xfc>
    2154:	00 00       	nop
      _delay_ms(2000);
      alreadyTimbrata = false;  
    2156:	10 92 d8 0b 	sts	0x0BD8, r1	; 0x800bd8 <alreadyTimbrata>
static const uint8_t RELE1 = PORTC7;
static const uint8_t RELE2 = PORTA7;

static inline void initSS_FLASH()  { DDRB |= (1 << PB4); } // set DDRB bit 4, sets PB4 for output
static inline void initSS_ETH()    { DDRC |= (1 << PC4); } // set DDRC bit 4, sets PC4 for output
static inline void enable_ETH()    { PORTC &= ~(1 << PC4); } // Set 0 Bit 4 PORTC Register
    215a:	44 98       	cbi	0x08, 4	; 8
          
      displayLCD(righeDisplay,stato_procedura,100);
      _delay_ms(2000);
      alreadyTimbrata = false;  
      enable_ETH();
    disable_FLASH();
    215c:	0e 94 95 01 	call	0x32a	; 0x32a <_ZL13disable_FLASHv>
    2160:	cb cf       	rjmp	.-106    	; 0x20f8 <loop+0xa0>
    stato_procedura++;
    }
    break;
    case 1:
    { 
      righeDisplay[1] = " * AUTENTICAZIONE *";
    2162:	69 e0       	ldi	r22, 0x09	; 9
    2164:	77 e0       	ldi	r23, 0x07	; 7
    2166:	8b e3       	ldi	r24, 0x3B	; 59
    2168:	9b e0       	ldi	r25, 0x0B	; 11
    216a:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <_ZN6StringaSEPKc>
      righeDisplay[2] = "";
    216e:	63 ec       	ldi	r22, 0xC3	; 195
    2170:	71 e0       	ldi	r23, 0x01	; 1
    2172:	81 e4       	ldi	r24, 0x41	; 65
    2174:	9b e0       	ldi	r25, 0x0B	; 11
    2176:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <_ZN6StringaSEPKc>
      righeDisplay[3] = "    Avvicina ATE  ";
    217a:	6d e1       	ldi	r22, 0x1D	; 29
    217c:	77 e0       	ldi	r23, 0x07	; 7
    217e:	87 e4       	ldi	r24, 0x47	; 71
    2180:	9b e0       	ldi	r25, 0x0B	; 11
    2182:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <_ZN6StringaSEPKc>
    
      displayLCD(righeDisplay,stato_procedura,100);     
    2186:	60 91 97 0b 	lds	r22, 0x0B97	; 0x800b97 <stato_procedura>
    218a:	70 91 98 0b 	lds	r23, 0x0B98	; 0x800b98 <stato_procedura+0x1>
    218e:	44 e6       	ldi	r20, 0x64	; 100
    2190:	50 e0       	ldi	r21, 0x00	; 0
    2192:	85 e3       	ldi	r24, 0x35	; 53
    2194:	9b e0       	ldi	r25, 0x0B	; 11
    2196:	0e 94 2c 05 	call	0xa58	; 0xa58 <_Z10displayLCDP6Stringii>
      
      String ATe = "ERRORE";
    219a:	60 ed       	ldi	r22, 0xD0	; 208
    219c:	72 e0       	ldi	r23, 0x02	; 2
    219e:	ce 01       	movw	r24, r28
    21a0:	49 96       	adiw	r24, 0x19	; 25
    21a2:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <_ZN6StringC1EPKc>

      if (!alreadyTimbrata) {ATe = GetCodeRfidATe(); Buzzer(2,100);}
    21a6:	80 91 d8 0b 	lds	r24, 0x0BD8	; 0x800bd8 <alreadyTimbrata>
    21aa:	81 11       	cpse	r24, r1
    21ac:	0f c0       	rjmp	.+30     	; 0x21cc <loop+0x174>
    21ae:	ce 01       	movw	r24, r28
    21b0:	01 96       	adiw	r24, 0x01	; 1
    21b2:	0e 94 c7 06 	call	0xd8e	; 0xd8e <_Z14GetCodeRfidATev>
    21b6:	be 01       	movw	r22, r28
    21b8:	6f 5f       	subi	r22, 0xFF	; 255
    21ba:	7f 4f       	sbci	r23, 0xFF	; 255
    21bc:	ce 01       	movw	r24, r28
    21be:	49 96       	adiw	r24, 0x19	; 25
    21c0:	0e 94 53 3e 	call	0x7ca6	; 0x7ca6 <_ZN6StringaSEOS_>
    21c4:	ce 01       	movw	r24, r28
    21c6:	01 96       	adiw	r24, 0x01	; 1
    21c8:	0e 94 78 3d 	call	0x7af0	; 0x7af0 <_ZN6StringD1Ev>
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
    21cc:	60 ed       	ldi	r22, 0xD0	; 208
    21ce:	72 e0       	ldi	r23, 0x02	; 2
    21d0:	ce 01       	movw	r24, r28
    21d2:	49 96       	adiw	r24, 0x19	; 25
    21d4:	0e 94 5f 3f 	call	0x7ebe	; 0x7ebe <_ZNK6String6equalsEPKc>
      
        if ((ATe != "ERRORE") && (BIT_IS_CLEAR(PORTC,4)))
    21d8:	81 11       	cpse	r24, r1
    21da:	02 c0       	rjmp	.+4      	; 0x21e0 <loop+0x188>
    21dc:	44 9b       	sbis	0x08, 4	; 8
    21de:	5c c3       	rjmp	.+1720   	; 0x2898 <loop+0x840>

         // Effettua chiamata REST per validare CARD NFC
         // Se la CARD è valida memorizza in memoria l'operazione e prosegui
         // Altrimenti Memorizza in Memoria e Azzera la procedura.
      
         stato_procedura++; // da commentare
    21e0:	80 91 97 0b 	lds	r24, 0x0B97	; 0x800b97 <stato_procedura>
    21e4:	90 91 98 0b 	lds	r25, 0x0B98	; 0x800b98 <stato_procedura+0x1>
    21e8:	01 96       	adiw	r24, 0x01	; 1
    21ea:	90 93 98 0b 	sts	0x0B98, r25	; 0x800b98 <stato_procedura+0x1>
    21ee:	80 93 97 0b 	sts	0x0B97, r24	; 0x800b97 <stato_procedura>
      righeDisplay[2] = "";
      righeDisplay[3] = "    Avvicina ATE  ";
    
      displayLCD(righeDisplay,stato_procedura,100);     
      
      String ATe = "ERRORE";
    21f2:	ce 01       	movw	r24, r28
    21f4:	49 96       	adiw	r24, 0x19	; 25
    21f6:	11 c3       	rjmp	.+1570   	; 0x281a <loop+0x7c2>
          *****************************************************/
    }
    break;
    case 2:
    {   
      disable_ETH();
    21f8:	0e 94 93 01 	call	0x326	; 0x326 <_ZL11disable_ETHv>
    21fc:	8f e3       	ldi	r24, 0x3F	; 63
    21fe:	9f e1       	ldi	r25, 0x1F	; 31
    2200:	01 97       	sbiw	r24, 0x01	; 1
    2202:	f1 f7       	brne	.-4      	; 0x2200 <loop+0x1a8>
    2204:	00 c0       	rjmp	.+0      	; 0x2206 <loop+0x1ae>
    2206:	00 00       	nop
static const uint8_t RELE1 = PORTC7;
static const uint8_t RELE2 = PORTA7;

static inline void initSS_FLASH()  { DDRB |= (1 << PB4); } // set DDRB bit 4, sets PB4 for output
static inline void initSS_ETH()    { DDRC |= (1 << PC4); } // set DDRC bit 4, sets PC4 for output
static inline void enable_ETH()    { PORTC &= ~(1 << PC4); } // Set 0 Bit 4 PORTC Register
    2208:	44 98       	cbi	0x08, 4	; 8
      // da commentare
      // Carburante = "D"; // Simulo Abilitazione Diesel
      // da commentare
      // Carburante = "B"; // Simulo Abilitazione Benzina
      
      TARGA = "";
    220a:	63 ec       	ldi	r22, 0xC3	; 195
    220c:	71 e0       	ldi	r23, 0x01	; 1
    220e:	8e e5       	ldi	r24, 0x5E	; 94
    2210:	9a e0       	ldi	r25, 0x0A	; 10
    2212:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <_ZN6StringaSEPKc>
      righeDisplay[1] =  "****** TARGA ******";
    2216:	6f e5       	ldi	r22, 0x5F	; 95
    2218:	74 e0       	ldi	r23, 0x04	; 4
    221a:	8b e3       	ldi	r24, 0x3B	; 59
    221c:	9b e0       	ldi	r25, 0x0B	; 11
    221e:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <_ZN6StringaSEPKc>
      righeDisplay[2] =  "";
    2222:	63 ec       	ldi	r22, 0xC3	; 195
    2224:	71 e0       	ldi	r23, 0x01	; 1
    2226:	81 e4       	ldi	r24, 0x41	; 65
    2228:	9b e0       	ldi	r25, 0x0B	; 11
    222a:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <_ZN6StringaSEPKc>
      righeDisplay[3] = "TARGA:";
    222e:	63 e7       	ldi	r22, 0x73	; 115
    2230:	74 e0       	ldi	r23, 0x04	; 4
    2232:	87 e4       	ldi	r24, 0x47	; 71
    2234:	9b e0       	ldi	r25, 0x0B	; 11
    2236:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <_ZN6StringaSEPKc>
      displayLCD(righeDisplay,stato_procedura,10);
    223a:	60 91 97 0b 	lds	r22, 0x0B97	; 0x800b97 <stato_procedura>
    223e:	70 91 98 0b 	lds	r23, 0x0B98	; 0x800b98 <stato_procedura+0x1>
    2242:	4a e0       	ldi	r20, 0x0A	; 10
    2244:	50 e0       	ldi	r21, 0x00	; 0
    2246:	85 e3       	ldi	r24, 0x35	; 53
    2248:	9b e0       	ldi	r25, 0x0B	; 11
    224a:	0e 94 2c 05 	call	0xa58	; 0xa58 <_Z10displayLCDP6Stringii>
      
      avanzaStato(TinputTarga);
    224e:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <TinputTarga>
    2252:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <TinputTarga+0x1>
    2256:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <TinputTarga+0x2>
    225a:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <TinputTarga+0x3>
    225e:	4b c4       	rjmp	.+2198   	; 0x2af6 <loop+0xa9e>
    }
    break;
    case 3:
    {       
       getTastoPremuto_x_targa();
    2260:	e7 db       	rcall	.-2098   	; 0x1a30 <_Z23getTastoPremuto_x_targav>
      String mezzoString = leggiTAG_Mezzo(false); // con TRUE scrive sul blocco 4 della card NFC
    2262:	60 e0       	ldi	r22, 0x00	; 0
    2264:	ce 01       	movw	r24, r28
    2266:	07 96       	adiw	r24, 0x07	; 7
    2268:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <_Z14leggiTAG_Mezzob>
    226c:	8f e3       	ldi	r24, 0x3F	; 63
    226e:	9c e9       	ldi	r25, 0x9C	; 156
    2270:	01 97       	sbiw	r24, 0x01	; 1
    2272:	f1 f7       	brne	.-4      	; 0x2270 <loop+0x218>
    2274:	00 c0       	rjmp	.+0      	; 0x2276 <loop+0x21e>
    2276:	00 00       	nop
      _delay_ms(10);

      Serial.println(mezzoString);
    2278:	be 01       	movw	r22, r28
    227a:	69 5f       	subi	r22, 0xF9	; 249
    227c:	7f 4f       	sbci	r23, 0xFF	; 255
    227e:	8f e4       	ldi	r24, 0x4F	; 79
    2280:	9d e0       	ldi	r25, 0x0D	; 13
    2282:	0e 94 29 3b 	call	0x7652	; 0x7652 <_ZN5Print7printlnERK6String>
	int indexOf( const String &str, unsigned int fromIndex ) const;
	int lastIndexOf( char ch ) const;
	int lastIndexOf( char ch, unsigned int fromIndex ) const;
	int lastIndexOf( const String &str ) const;
	int lastIndexOf( const String &str, unsigned int fromIndex ) const;
	String substring( unsigned int beginIndex ) const { return substring(beginIndex, len); };
    2286:	2b 85       	ldd	r18, Y+11	; 0x0b
    2288:	3c 85       	ldd	r19, Y+12	; 0x0c
    228a:	45 e0       	ldi	r20, 0x05	; 5
    228c:	50 e0       	ldi	r21, 0x00	; 0
    228e:	be 01       	movw	r22, r28
    2290:	69 5f       	subi	r22, 0xF9	; 249
    2292:	7f 4f       	sbci	r23, 0xFF	; 255
    2294:	ce 01       	movw	r24, r28
    2296:	01 96       	adiw	r24, 0x01	; 1
    2298:	0e 94 ab 3f 	call	0x7f56	; 0x7f56 <_ZNK6String9substringEjj>
      
      mezzo.Carb = mezzoString.substring(5);
    229c:	be 01       	movw	r22, r28
    229e:	6f 5f       	subi	r22, 0xFF	; 255
    22a0:	7f 4f       	sbci	r23, 0xFF	; 255
    22a2:	82 ee       	ldi	r24, 0xE2	; 226
    22a4:	9b e0       	ldi	r25, 0x0B	; 11
    22a6:	0e 94 53 3e 	call	0x7ca6	; 0x7ca6 <_ZN6StringaSEOS_>
    22aa:	ce 01       	movw	r24, r28
    22ac:	01 96       	adiw	r24, 0x01	; 1
    22ae:	0e 94 78 3d 	call	0x7af0	; 0x7af0 <_ZN6StringD1Ev>
      mezzo.TARGA = mezzoString.substring(0,5);
    22b2:	25 e0       	ldi	r18, 0x05	; 5
    22b4:	30 e0       	ldi	r19, 0x00	; 0
    22b6:	40 e0       	ldi	r20, 0x00	; 0
    22b8:	50 e0       	ldi	r21, 0x00	; 0
    22ba:	be 01       	movw	r22, r28
    22bc:	69 5f       	subi	r22, 0xF9	; 249
    22be:	7f 4f       	sbci	r23, 0xFF	; 255
    22c0:	ce 01       	movw	r24, r28
    22c2:	01 96       	adiw	r24, 0x01	; 1
    22c4:	0e 94 ab 3f 	call	0x7f56	; 0x7f56 <_ZNK6String9substringEjj>
    22c8:	be 01       	movw	r22, r28
    22ca:	6f 5f       	subi	r22, 0xFF	; 255
    22cc:	7f 4f       	sbci	r23, 0xFF	; 255
    22ce:	88 ee       	ldi	r24, 0xE8	; 232
    22d0:	9b e0       	ldi	r25, 0x0B	; 11
    22d2:	0e 94 53 3e 	call	0x7ca6	; 0x7ca6 <_ZN6StringaSEOS_>
    22d6:	ce 01       	movw	r24, r28
    22d8:	01 96       	adiw	r24, 0x01	; 1
    22da:	0e 94 78 3d 	call	0x7af0	; 0x7af0 <_ZN6StringD1Ev>
      mezzo.KM = 0;
    22de:	10 92 ee 0b 	sts	0x0BEE, r1	; 0x800bee <mezzo+0xc>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    22e2:	60 e3       	ldi	r22, 0x30	; 48
    22e4:	77 e0       	ldi	r23, 0x07	; 7
    22e6:	ce 01       	movw	r24, r28
    22e8:	01 96       	adiw	r24, 0x01	; 1
    22ea:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <_ZN6StringC1EPKc>

      Serial.println("TIPO CARBURANTE: " + mezzo.Carb);    
    22ee:	62 ee       	ldi	r22, 0xE2	; 226
    22f0:	7b e0       	ldi	r23, 0x0B	; 11
    22f2:	ce 01       	movw	r24, r28
    22f4:	01 96       	adiw	r24, 0x01	; 1
    22f6:	0e 94 37 3f 	call	0x7e6e	; 0x7e6e <_ZplRK15StringSumHelperRK6String>
    22fa:	bc 01       	movw	r22, r24
    22fc:	8f e4       	ldi	r24, 0x4F	; 79
    22fe:	9d e0       	ldi	r25, 0x0D	; 13
    2300:	0e 94 29 3b 	call	0x7652	; 0x7652 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2304:	ce 01       	movw	r24, r28
    2306:	01 96       	adiw	r24, 0x01	; 1
    2308:	0e 94 78 3d 	call	0x7af0	; 0x7af0 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    230c:	62 e4       	ldi	r22, 0x42	; 66
    230e:	77 e0       	ldi	r23, 0x07	; 7
    2310:	ce 01       	movw	r24, r28
    2312:	01 96       	adiw	r24, 0x01	; 1
    2314:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <_ZN6StringC1EPKc>
      Serial.println("TARGA: " + mezzo.TARGA);              
    2318:	68 ee       	ldi	r22, 0xE8	; 232
    231a:	7b e0       	ldi	r23, 0x0B	; 11
    231c:	ce 01       	movw	r24, r28
    231e:	01 96       	adiw	r24, 0x01	; 1
    2320:	0e 94 37 3f 	call	0x7e6e	; 0x7e6e <_ZplRK15StringSumHelperRK6String>
    2324:	bc 01       	movw	r22, r24
    2326:	8f e4       	ldi	r24, 0x4F	; 79
    2328:	9d e0       	ldi	r25, 0x0D	; 13
    232a:	0e 94 29 3b 	call	0x7652	; 0x7652 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    232e:	ce 01       	movw	r24, r28
    2330:	01 96       	adiw	r24, 0x01	; 1
    2332:	0e 94 78 3d 	call	0x7af0	; 0x7af0 <_ZN6StringD1Ev>

      Carburante = mezzo.Carb;                 
    2336:	62 ee       	ldi	r22, 0xE2	; 226
    2338:	7b e0       	ldi	r23, 0x0B	; 11
    233a:	85 e6       	ldi	r24, 0x65	; 101
    233c:	9b e0       	ldi	r25, 0x0B	; 11
    233e:	0e 94 36 3e 	call	0x7c6c	; 0x7c6c <_ZN6StringaSERKS_>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    2342:	69 ee       	ldi	r22, 0xE9	; 233
    2344:	71 e0       	ldi	r23, 0x01	; 1
    2346:	82 ee       	ldi	r24, 0xE2	; 226
    2348:	9b e0       	ldi	r25, 0x0B	; 11
    234a:	0e 94 5f 3f 	call	0x7ebe	; 0x7ebe <_ZNK6String6equalsEPKc>
      if ((mezzo.Carb == "B") || (mezzo.Carb == "D")) {
    234e:	81 11       	cpse	r24, r1
    2350:	60 c3       	rjmp	.+1728   	; 0x2a12 <loop+0x9ba>
    2352:	67 ee       	ldi	r22, 0xE7	; 231
    2354:	72 e0       	ldi	r23, 0x02	; 2
    2356:	82 ee       	ldi	r24, 0xE2	; 226
    2358:	9b e0       	ldi	r25, 0x0B	; 11
    235a:	0e 94 5f 3f 	call	0x7ebe	; 0x7ebe <_ZNK6String6equalsEPKc>
    235e:	81 11       	cpse	r24, r1
    2360:	58 c3       	rjmp	.+1712   	; 0x2a12 <loop+0x9ba>
    }
    break;
    case 3:
    {       
       getTastoPremuto_x_targa();
      String mezzoString = leggiTAG_Mezzo(false); // con TRUE scrive sul blocco 4 della card NFC
    2362:	ce 01       	movw	r24, r28
    2364:	07 96       	adiw	r24, 0x07	; 7
    2366:	59 c2       	rjmp	.+1202   	; 0x281a <loop+0x7c2>
      // avanzaStato(TselDistributore);  
    }
    break;
    case 4:
    { 
    righeDisplay[1] =  "****** DISTRIBUTORE ******";
    2368:	6a e4       	ldi	r22, 0x4A	; 74
    236a:	77 e0       	ldi	r23, 0x07	; 7
    236c:	8b e3       	ldi	r24, 0x3B	; 59
    236e:	9b e0       	ldi	r25, 0x0B	; 11
    2370:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <_ZN6StringaSEPKc>
    righeDisplay[2] =  "";
    2374:	63 ec       	ldi	r22, 0xC3	; 195
    2376:	71 e0       	ldi	r23, 0x01	; 1
    2378:	81 e4       	ldi	r24, 0x41	; 65
    237a:	9b e0       	ldi	r25, 0x0B	; 11
    237c:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <_ZN6StringaSEPKc>
    righeDisplay[3] = "**** SCEGLI ****";
    2380:	65 e6       	ldi	r22, 0x65	; 101
    2382:	77 e0       	ldi	r23, 0x07	; 7
    2384:	87 e4       	ldi	r24, 0x47	; 71
    2386:	9b e0       	ldi	r25, 0x0B	; 11
    2388:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <_ZN6StringaSEPKc>

    displayLCD(righeDisplay,stato_procedura,100);
    238c:	60 91 97 0b 	lds	r22, 0x0B97	; 0x800b97 <stato_procedura>
    2390:	70 91 98 0b 	lds	r23, 0x0B98	; 0x800b98 <stato_procedura+0x1>
    2394:	44 e6       	ldi	r20, 0x64	; 100
    2396:	50 e0       	ldi	r21, 0x00	; 0
    2398:	85 e3       	ldi	r24, 0x35	; 53
    239a:	9b e0       	ldi	r25, 0x0B	; 11
    239c:	0e 94 2c 05 	call	0xa58	; 0xa58 <_Z10displayLCDP6Stringii>
    23a0:	69 ee       	ldi	r22, 0xE9	; 233
    23a2:	71 e0       	ldi	r23, 0x01	; 1
    23a4:	82 ee       	ldi	r24, 0xE2	; 226
    23a6:	9b e0       	ldi	r25, 0x0B	; 11
    23a8:	0e 94 5f 3f 	call	0x7ebe	; 0x7ebe <_ZNK6String6equalsEPKc>

    // Verifica scelta distributore
    
      if (mezzo.Carb == "B")
    23ac:	88 23       	and	r24, r24
    23ae:	61 f0       	breq	.+24     	; 0x23c8 <loop+0x370>
      {
        abilitaPulser('B');
    23b0:	82 e4       	ldi	r24, 0x42	; 66
    23b2:	0e 94 3a 07 	call	0xe74	; 0xe74 <_Z13abilitaPulserc>
        Rele_Abilitazione2(0,7); // chiudi relè
    23b6:	67 e0       	ldi	r22, 0x07	; 7
    23b8:	70 e0       	ldi	r23, 0x00	; 0
    23ba:	80 e0       	ldi	r24, 0x00	; 0
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	0e 94 ae 07 	call	0xf5c	; 0xf5c <_Z18Rele_Abilitazione2ii>
        StatoAttuale = "BENZINA";
    23c2:	6f ed       	ldi	r22, 0xDF	; 223
    23c4:	72 e0       	ldi	r23, 0x02	; 2
    23c6:	14 c0       	rjmp	.+40     	; 0x23f0 <loop+0x398>
    23c8:	67 ee       	ldi	r22, 0xE7	; 231
    23ca:	72 e0       	ldi	r23, 0x02	; 2
    23cc:	82 ee       	ldi	r24, 0xE2	; 226
    23ce:	9b e0       	ldi	r25, 0x0B	; 11
    23d0:	0e 94 5f 3f 	call	0x7ebe	; 0x7ebe <_ZNK6String6equalsEPKc>
        avanzaStato(10);
      }
      else if (mezzo.Carb == "D")
    23d4:	88 23       	and	r24, r24
    23d6:	09 f4       	brne	.+2      	; 0x23da <loop+0x382>
    23d8:	22 c2       	rjmp	.+1092   	; 0x281e <loop+0x7c6>
      {
        abilitaPulser('D');
    23da:	84 e4       	ldi	r24, 0x44	; 68
    23dc:	0e 94 3a 07 	call	0xe74	; 0xe74 <_Z13abilitaPulserc>
        Rele_Abilitazione1(0,7); // chiudi relè
    23e0:	67 e0       	ldi	r22, 0x07	; 7
    23e2:	70 e0       	ldi	r23, 0x00	; 0
    23e4:	80 e0       	ldi	r24, 0x00	; 0
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	0e 94 73 07 	call	0xee6	; 0xee6 <_Z18Rele_Abilitazione1ii>
        StatoAttuale = "GASOLIO";
    23ec:	69 ee       	ldi	r22, 0xE9	; 233
    23ee:	72 e0       	ldi	r23, 0x02	; 2
    23f0:	83 ea       	ldi	r24, 0xA3	; 163
    23f2:	9b e0       	ldi	r25, 0x0B	; 11
    23f4:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <_ZN6StringaSEPKc>
        avanzaStato(10);
    23f8:	6a e0       	ldi	r22, 0x0A	; 10
    23fa:	70 e0       	ldi	r23, 0x00	; 0
    23fc:	80 e0       	ldi	r24, 0x00	; 0
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	7a c3       	rjmp	.+1780   	; 0x2af6 <loop+0xa9e>
    break;
    case 5:
    {             
      // VALIDA MEZZO CON WBSERVICES
      
      impulsi = 0;
    2402:	10 92 96 0b 	sts	0x0B96, r1	; 0x800b96 <impulsi+0x1>
    2406:	10 92 95 0b 	sts	0x0B95, r1	; 0x800b95 <impulsi>
      
      righeDisplay[1] = "**** Distributore ****";
    240a:	66 e7       	ldi	r22, 0x76	; 118
    240c:	77 e0       	ldi	r23, 0x07	; 7
    240e:	8b e3       	ldi	r24, 0x3B	; 59
    2410:	9b e0       	ldi	r25, 0x0B	; 11
    2412:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <_ZN6StringaSEPKc>
      righeDisplay[2] =  "";
    2416:	63 ec       	ldi	r22, 0xC3	; 195
    2418:	71 e0       	ldi	r23, 0x01	; 1
    241a:	81 e4       	ldi	r24, 0x41	; 65
    241c:	9b e0       	ldi	r25, 0x0B	; 11
    241e:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <_ZN6StringaSEPKc>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2422:	6d e8       	ldi	r22, 0x8D	; 141
    2424:	77 e0       	ldi	r23, 0x07	; 7
    2426:	ce 01       	movw	r24, r28
    2428:	01 96       	adiw	r24, 0x01	; 1
    242a:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <_ZN6StringC1EPKc>
      righeDisplay[3] = "***** " + StatoAttuale + " *****";
    242e:	63 ea       	ldi	r22, 0xA3	; 163
    2430:	7b e0       	ldi	r23, 0x0B	; 11
    2432:	ce 01       	movw	r24, r28
    2434:	01 96       	adiw	r24, 0x01	; 1
    2436:	0e 94 37 3f 	call	0x7e6e	; 0x7e6e <_ZplRK15StringSumHelperRK6String>
    243a:	64 e9       	ldi	r22, 0x94	; 148
    243c:	77 e0       	ldi	r23, 0x07	; 7
    243e:	0e 94 48 3f 	call	0x7e90	; 0x7e90 <_ZplRK15StringSumHelperPKc>
    2442:	bc 01       	movw	r22, r24
    2444:	87 e4       	ldi	r24, 0x47	; 71
    2446:	9b e0       	ldi	r25, 0x0B	; 11
    2448:	0e 94 36 3e 	call	0x7c6c	; 0x7c6c <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    244c:	ce 01       	movw	r24, r28
    244e:	01 96       	adiw	r24, 0x01	; 1
    2450:	0e 94 78 3d 	call	0x7af0	; 0x7af0 <_ZN6StringD1Ev>
      
      displayLCD(righeDisplay,stato_procedura,100);
    2454:	60 91 97 0b 	lds	r22, 0x0B97	; 0x800b97 <stato_procedura>
    2458:	70 91 98 0b 	lds	r23, 0x0B98	; 0x800b98 <stato_procedura+0x1>
    245c:	44 e6       	ldi	r20, 0x64	; 100
    245e:	50 e0       	ldi	r21, 0x00	; 0
    2460:	85 e3       	ldi	r24, 0x35	; 53
    2462:	9b e0       	ldi	r25, 0x0B	; 11
    2464:	0e 94 2c 05 	call	0xa58	; 0xa58 <_Z10displayLCDP6Stringii>

      avanzaStato(20);
    2468:	64 e1       	ldi	r22, 0x14	; 20
    246a:	70 e0       	ldi	r23, 0x00	; 0
    246c:	80 e0       	ldi	r24, 0x00	; 0
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	42 c3       	rjmp	.+1668   	; 0x2af6 <loop+0xa9e>
    }
    break;
    case 6:
    { 
      double lt = impulsiToLitri(impulsi);      
    2472:	80 91 95 0b 	lds	r24, 0x0B95	; 0x800b95 <impulsi>
    2476:	90 91 96 0b 	lds	r25, 0x0B96	; 0x800b96 <impulsi+0x1>
    247a:	0e 94 48 07 	call	0xe90	; 0xe90 <_Z14impulsiToLitrii>
    247e:	6b 01       	movw	r12, r22
    2480:	7c 01       	movw	r14, r24
      
      righeDisplay[1] = "LITRI :" + String(lt);
    2482:	22 e0       	ldi	r18, 0x02	; 2
    2484:	ab 01       	movw	r20, r22
    2486:	bc 01       	movw	r22, r24
    2488:	ce 01       	movw	r24, r28
    248a:	07 96       	adiw	r24, 0x07	; 7
    248c:	0e 94 c9 3e 	call	0x7d92	; 0x7d92 <_ZN6StringC1Edh>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2490:	6b e9       	ldi	r22, 0x9B	; 155
    2492:	77 e0       	ldi	r23, 0x07	; 7
    2494:	ce 01       	movw	r24, r28
    2496:	01 96       	adiw	r24, 0x01	; 1
    2498:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <_ZN6StringC1EPKc>
    249c:	be 01       	movw	r22, r28
    249e:	69 5f       	subi	r22, 0xF9	; 249
    24a0:	7f 4f       	sbci	r23, 0xFF	; 255
    24a2:	ce 01       	movw	r24, r28
    24a4:	01 96       	adiw	r24, 0x01	; 1
    24a6:	0e 94 37 3f 	call	0x7e6e	; 0x7e6e <_ZplRK15StringSumHelperRK6String>
    24aa:	bc 01       	movw	r22, r24
    24ac:	8b e3       	ldi	r24, 0x3B	; 59
    24ae:	9b e0       	ldi	r25, 0x0B	; 11
    24b0:	0e 94 36 3e 	call	0x7c6c	; 0x7c6c <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    24b4:	ce 01       	movw	r24, r28
    24b6:	01 96       	adiw	r24, 0x01	; 1
    24b8:	0e 94 78 3d 	call	0x7af0	; 0x7af0 <_ZN6StringD1Ev>
    24bc:	ce 01       	movw	r24, r28
    24be:	07 96       	adiw	r24, 0x07	; 7
    24c0:	0e 94 78 3d 	call	0x7af0	; 0x7af0 <_ZN6StringD1Ev>
      righeDisplay[2] = "";     
    24c4:	63 ec       	ldi	r22, 0xC3	; 195
    24c6:	71 e0       	ldi	r23, 0x01	; 1
    24c8:	81 e4       	ldi	r24, 0x41	; 65
    24ca:	9b e0       	ldi	r25, 0x0B	; 11
    24cc:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <_ZN6StringaSEPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    24d0:	63 ea       	ldi	r22, 0xA3	; 163
    24d2:	77 e0       	ldi	r23, 0x07	; 7
    24d4:	ce 01       	movw	r24, r28
    24d6:	01 96       	adiw	r24, 0x01	; 1
    24d8:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <_ZN6StringC1EPKc>
      righeDisplay[3] = "Erogazione: " + StatoAttuale;
    24dc:	63 ea       	ldi	r22, 0xA3	; 163
    24de:	7b e0       	ldi	r23, 0x0B	; 11
    24e0:	ce 01       	movw	r24, r28
    24e2:	01 96       	adiw	r24, 0x01	; 1
    24e4:	0e 94 37 3f 	call	0x7e6e	; 0x7e6e <_ZplRK15StringSumHelperRK6String>
    24e8:	bc 01       	movw	r22, r24
    24ea:	87 e4       	ldi	r24, 0x47	; 71
    24ec:	9b e0       	ldi	r25, 0x0B	; 11
    24ee:	0e 94 36 3e 	call	0x7c6c	; 0x7c6c <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    24f2:	ce 01       	movw	r24, r28
    24f4:	01 96       	adiw	r24, 0x01	; 1
    24f6:	0e 94 78 3d 	call	0x7af0	; 0x7af0 <_ZN6StringD1Ev>
      
      displayLCD(righeDisplay,stato_procedura,100);   
    24fa:	60 91 97 0b 	lds	r22, 0x0B97	; 0x800b97 <stato_procedura>
    24fe:	70 91 98 0b 	lds	r23, 0x0B98	; 0x800b98 <stato_procedura+0x1>
    2502:	44 e6       	ldi	r20, 0x64	; 100
    2504:	50 e0       	ldi	r21, 0x00	; 0
    2506:	85 e3       	ldi	r24, 0x35	; 53
    2508:	9b e0       	ldi	r25, 0x0B	; 11
    250a:	0e 94 2c 05 	call	0xa58	; 0xa58 <_Z10displayLCDP6Stringii>

      /* CONTATTO PISTOLA DIESEL*/
      
      if ((PINA & _BV(PA1)) && (Carburante == "D"))
    250e:	01 9b       	sbis	0x00, 1	; 0
    2510:	08 c0       	rjmp	.+16     	; 0x2522 <loop+0x4ca>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    2512:	67 ee       	ldi	r22, 0xE7	; 231
    2514:	72 e0       	ldi	r23, 0x02	; 2
    2516:	85 e6       	ldi	r24, 0x65	; 101
    2518:	9b e0       	ldi	r25, 0x0B	; 11
    251a:	0e 94 5f 3f 	call	0x7ebe	; 0x7ebe <_ZNK6String6equalsEPKc>
    251e:	81 11       	cpse	r24, r1
    2520:	8f c2       	rjmp	.+1310   	; 0x2a40 <loop+0x9e8>
        avanzaStato(10);
      }
      
      /* CONTATTO PISTOLA BENZINA*/
      
      if  ((PINB & _BV(PB1)) && (Carburante == "B"))
    2522:	19 9b       	sbis	0x03, 1	; 3
    2524:	7c c1       	rjmp	.+760    	; 0x281e <loop+0x7c6>
    2526:	69 ee       	ldi	r22, 0xE9	; 233
    2528:	71 e0       	ldi	r23, 0x01	; 1
    252a:	85 e6       	ldi	r24, 0x65	; 101
    252c:	9b e0       	ldi	r25, 0x0B	; 11
    252e:	0e 94 5f 3f 	call	0x7ebe	; 0x7ebe <_ZNK6String6equalsEPKc>
    2532:	81 11       	cpse	r24, r1
    2534:	b4 c2       	rjmp	.+1384   	; 0x2a9e <loop+0xa46>
    2536:	73 c1       	rjmp	.+742    	; 0x281e <loop+0x7c6>
      /**************************************
       Control_WIFI(1);
       _delay_ms(2000);
      /**************************************/
      
      righeDisplay[1] =  "";      
    2538:	63 ec       	ldi	r22, 0xC3	; 195
    253a:	71 e0       	ldi	r23, 0x01	; 1
    253c:	8b e3       	ldi	r24, 0x3B	; 59
    253e:	9b e0       	ldi	r25, 0x0B	; 11
    2540:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <_ZN6StringaSEPKc>
      righeDisplay[2] = "Invio........";
    2544:	60 eb       	ldi	r22, 0xB0	; 176
    2546:	77 e0       	ldi	r23, 0x07	; 7
    2548:	81 e4       	ldi	r24, 0x41	; 65
    254a:	9b e0       	ldi	r25, 0x0B	; 11
    254c:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <_ZN6StringaSEPKc>
      righeDisplay[3] =  "";
    2550:	63 ec       	ldi	r22, 0xC3	; 195
    2552:	71 e0       	ldi	r23, 0x01	; 1
    2554:	87 e4       	ldi	r24, 0x47	; 71
    2556:	9b e0       	ldi	r25, 0x0B	; 11
    2558:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <_ZN6StringaSEPKc>
          
      if (BIT_IS_CLEAR(PORTC,4)) 
    255c:	44 99       	sbic	0x08, 4	; 8
    255e:	5f c1       	rjmp	.+702    	; 0x281e <loop+0x7c6>
      {
        displayLCD(righeDisplay,stato_procedura,10);  
    2560:	60 91 97 0b 	lds	r22, 0x0B97	; 0x800b97 <stato_procedura>
    2564:	70 91 98 0b 	lds	r23, 0x0B98	; 0x800b98 <stato_procedura+0x1>
    2568:	4a e0       	ldi	r20, 0x0A	; 10
    256a:	50 e0       	ldi	r21, 0x00	; 0
    256c:	85 e3       	ldi	r24, 0x35	; 53
    256e:	9b e0       	ldi	r25, 0x0B	; 11
    2570:	0e 94 2c 05 	call	0xa58	; 0xa58 <_Z10displayLCDP6Stringii>
        InizializzaEthernet();
    2574:	0e 94 3f 0a 	call	0x147e	; 0x147e <_Z19InizializzaEthernetv>
    2578:	9f ef       	ldi	r25, 0xFF	; 255
    257a:	23 ed       	ldi	r18, 0xD3	; 211
    257c:	80 e3       	ldi	r24, 0x30	; 48
    257e:	91 50       	subi	r25, 0x01	; 1
    2580:	20 40       	sbci	r18, 0x00	; 0
    2582:	80 40       	sbci	r24, 0x00	; 0
    2584:	e1 f7       	brne	.-8      	; 0x257e <loop+0x526>
    2586:	00 c0       	rjmp	.+0      	; 0x2588 <loop+0x530>
    2588:	00 00       	nop
        _delay_ms(1000);
        //Control_WIFI(0);
        
        Messaggio = ""; 
    258a:	63 ec       	ldi	r22, 0xC3	; 195
    258c:	71 e0       	ldi	r23, 0x01	; 1
    258e:	8d e4       	ldi	r24, 0x4D	; 77
    2590:	9b e0       	ldi	r25, 0x0B	; 11
    2592:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <_ZN6StringaSEPKc>
    2596:	0b e6       	ldi	r16, 0x6B	; 107
    2598:	1b e0       	ldi	r17, 0x0B	; 11
    259a:	83 e8       	ldi	r24, 0x83	; 131
    259c:	e8 2e       	mov	r14, r24
    259e:	8b e0       	ldi	r24, 0x0B	; 11
    25a0:	f8 2e       	mov	r15, r24
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
    25a2:	b8 01       	movw	r22, r16
    25a4:	ce 01       	movw	r24, r28
    25a6:	01 96       	adiw	r24, 0x01	; 1
    25a8:	0e 94 4b 3e 	call	0x7c96	; 0x7c96 <_ZN6StringC1ERKS_>
        
        for (int k = 0;k<4;k++)
          Messaggio.concat(RaccoltaDati[k]+";");        
    25ac:	61 e0       	ldi	r22, 0x01	; 1
    25ae:	72 e0       	ldi	r23, 0x02	; 2
    25b0:	ce 01       	movw	r24, r28
    25b2:	01 96       	adiw	r24, 0x01	; 1
    25b4:	0e 94 48 3f 	call	0x7e90	; 0x7e90 <_ZplRK15StringSumHelperPKc>
    25b8:	bc 01       	movw	r22, r24
    25ba:	8d e4       	ldi	r24, 0x4D	; 77
    25bc:	9b e0       	ldi	r25, 0x0B	; 11
    25be:	0e 94 23 3f 	call	0x7e46	; 0x7e46 <_ZN6String6concatERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    25c2:	ce 01       	movw	r24, r28
    25c4:	01 96       	adiw	r24, 0x01	; 1
    25c6:	0e 94 78 3d 	call	0x7af0	; 0x7af0 <_ZN6StringD1Ev>
    25ca:	0a 5f       	subi	r16, 0xFA	; 250
    25cc:	1f 4f       	sbci	r17, 0xFF	; 255
        _delay_ms(1000);
        //Control_WIFI(0);
        
        Messaggio = ""; 
        
        for (int k = 0;k<4;k++)
    25ce:	e0 16       	cp	r14, r16
    25d0:	f1 06       	cpc	r15, r17
    25d2:	39 f7       	brne	.-50     	; 0x25a2 <loop+0x54a>
          Messaggio.concat(RaccoltaDati[k]+";");        
        
        //Messaggio = "000;2149016745;00001;2658;Diesel;70.00";
        CompletoRifornimentoPerInvioDati(stato_procedura);
    25d4:	80 91 97 0b 	lds	r24, 0x0B97	; 0x800b97 <stato_procedura>
    25d8:	90 91 98 0b 	lds	r25, 0x0B98	; 0x800b98 <stato_procedura+0x1>
    25dc:	0e 94 05 08 	call	0x100a	; 0x100a <_Z32CompletoRifornimentoPerInvioDatii>
        
        if(InviaRifornimento(stato_procedura,Connected,MessaggioToServer,100,""))
    25e0:	63 ec       	ldi	r22, 0xC3	; 195
    25e2:	71 e0       	ldi	r23, 0x01	; 1
    25e4:	ce 01       	movw	r24, r28
    25e6:	01 96       	adiw	r24, 0x01	; 1
    25e8:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <_ZN6StringC1EPKc>
    25ec:	60 91 99 0b 	lds	r22, 0x0B99	; 0x800b99 <Connected>
    25f0:	70 91 9a 0b 	lds	r23, 0x0B9A	; 0x800b9a <Connected+0x1>
    25f4:	8e 01       	movw	r16, r28
    25f6:	0f 5f       	subi	r16, 0xFF	; 255
    25f8:	1f 4f       	sbci	r17, 0xFF	; 255
    25fa:	24 e6       	ldi	r18, 0x64	; 100
    25fc:	30 e0       	ldi	r19, 0x00	; 0
    25fe:	41 ed       	ldi	r20, 0xD1	; 209
    2600:	5a e0       	ldi	r21, 0x0A	; 10
    2602:	80 91 97 0b 	lds	r24, 0x0B97	; 0x800b97 <stato_procedura>
    2606:	90 91 98 0b 	lds	r25, 0x0B98	; 0x800b98 <stato_procedura+0x1>
    260a:	a4 dc       	rcall	.-1720   	; 0x1f54 <_Z17InviaRifornimentoiiPci6String>
    260c:	18 2f       	mov	r17, r24
    260e:	ce 01       	movw	r24, r28
    2610:	01 96       	adiw	r24, 0x01	; 1
    2612:	0e 94 78 3d 	call	0x7af0	; 0x7af0 <_ZN6StringD1Ev>
    2616:	11 23       	and	r17, r17
    2618:	09 f4       	brne	.+2      	; 0x261c <loop+0x5c4>
    261a:	b0 c0       	rjmp	.+352    	; 0x277c <loop+0x724>
        { 
       
          disable_ETH();
    261c:	0e 94 93 01 	call	0x326	; 0x326 <_ZL11disable_ETHv>
          
          righeDisplay[1] = "";
    2620:	63 ec       	ldi	r22, 0xC3	; 195
    2622:	71 e0       	ldi	r23, 0x01	; 1
    2624:	8b e3       	ldi	r24, 0x3B	; 59
    2626:	9b e0       	ldi	r25, 0x0B	; 11
    2628:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <_ZN6StringaSEPKc>
          righeDisplay[2] = " Dati Inviati ";
    262c:	6e eb       	ldi	r22, 0xBE	; 190
    262e:	77 e0       	ldi	r23, 0x07	; 7
    2630:	81 e4       	ldi	r24, 0x41	; 65
    2632:	9b e0       	ldi	r25, 0x0B	; 11
    2634:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <_ZN6StringaSEPKc>
          righeDisplay[3] =  "";
    2638:	63 ec       	ldi	r22, 0xC3	; 195
    263a:	71 e0       	ldi	r23, 0x01	; 1
    263c:	87 e4       	ldi	r24, 0x47	; 71
    263e:	9b e0       	ldi	r25, 0x0B	; 11
    2640:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <_ZN6StringaSEPKc>
          
          displayLCD(righeDisplay,stato_procedura,100);
    2644:	60 91 97 0b 	lds	r22, 0x0B97	; 0x800b97 <stato_procedura>
    2648:	70 91 98 0b 	lds	r23, 0x0B98	; 0x800b98 <stato_procedura+0x1>
    264c:	44 e6       	ldi	r20, 0x64	; 100
    264e:	50 e0       	ldi	r21, 0x00	; 0
    2650:	85 e3       	ldi	r24, 0x35	; 53
    2652:	9b e0       	ldi	r25, 0x0B	; 11
    2654:	0e 94 2c 05 	call	0xa58	; 0xa58 <_Z10displayLCDP6Stringii>
    2658:	9f ef       	ldi	r25, 0xFF	; 255
    265a:	29 ef       	ldi	r18, 0xF9	; 249
    265c:	80 e0       	ldi	r24, 0x00	; 0
    265e:	91 50       	subi	r25, 0x01	; 1
    2660:	20 40       	sbci	r18, 0x00	; 0
    2662:	80 40       	sbci	r24, 0x00	; 0
    2664:	e1 f7       	brne	.-8      	; 0x265e <loop+0x606>
    2666:	00 c0       	rjmp	.+0      	; 0x2668 <loop+0x610>
          
          _delay_ms(20);     
          
          Azzera();
    2668:	00 00       	nop
    266a:	de db       	rcall	.-2116   	; 0x1e28 <_Z6Azzerav>
    266c:	d8 c0       	rjmp	.+432    	; 0x281e <loop+0x7c6>
      }
    }
    break;
    case 8:
    { 
          righeDisplay[1] =  "";
    266e:	63 ec       	ldi	r22, 0xC3	; 195
    2670:	71 e0       	ldi	r23, 0x01	; 1
    2672:	8b e3       	ldi	r24, 0x3B	; 59
    2674:	9b e0       	ldi	r25, 0x0B	; 11
    2676:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <_ZN6StringaSEPKc>
          righeDisplay[2] = "Salvo Dati........";
    267a:	6d ec       	ldi	r22, 0xCD	; 205
    267c:	77 e0       	ldi	r23, 0x07	; 7
    267e:	81 e4       	ldi	r24, 0x41	; 65
    2680:	9b e0       	ldi	r25, 0x0B	; 11
    2682:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <_ZN6StringaSEPKc>
          righeDisplay[3] =  "";
    2686:	63 ec       	ldi	r22, 0xC3	; 195
    2688:	71 e0       	ldi	r23, 0x01	; 1
    268a:	87 e4       	ldi	r24, 0x47	; 71
    268c:	9b e0       	ldi	r25, 0x0B	; 11
    268e:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <_ZN6StringaSEPKc>
          displayLCD(righeDisplay,stato_procedura,10);
    2692:	60 91 97 0b 	lds	r22, 0x0B97	; 0x800b97 <stato_procedura>
    2696:	70 91 98 0b 	lds	r23, 0x0B98	; 0x800b98 <stato_procedura+0x1>
    269a:	4a e0       	ldi	r20, 0x0A	; 10
    269c:	50 e0       	ldi	r21, 0x00	; 0
    269e:	85 e3       	ldi	r24, 0x35	; 53
    26a0:	9b e0       	ldi	r25, 0x0B	; 11
    26a2:	0e 94 2c 05 	call	0xa58	; 0xa58 <_Z10displayLCDP6Stringii>
    26a6:	8f e1       	ldi	r24, 0x1F	; 31
    26a8:	9e e4       	ldi	r25, 0x4E	; 78
    26aa:	01 97       	sbiw	r24, 0x01	; 1
    26ac:	f1 f7       	brne	.-4      	; 0x26aa <loop+0x652>
    26ae:	00 c0       	rjmp	.+0      	; 0x26b0 <loop+0x658>
    26b0:	00 00       	nop
           _delay_ms(5);
          disable_ETH();
    26b2:	0e 94 93 01 	call	0x326	; 0x326 <_ZL11disable_ETHv>
          Serial.println("ETH SS Disable");
    26b6:	60 ee       	ldi	r22, 0xE0	; 224
    26b8:	77 e0       	ldi	r23, 0x07	; 7
    26ba:	8f e4       	ldi	r24, 0x4F	; 79
    26bc:	9d e0       	ldi	r25, 0x0D	; 13
    26be:	0e 94 39 3b 	call	0x7672	; 0x7672 <_ZN5Print7printlnEPKc>
    26c2:	8f e1       	ldi	r24, 0x1F	; 31
    26c4:	9e e4       	ldi	r25, 0x4E	; 78
    26c6:	01 97       	sbiw	r24, 0x01	; 1
    26c8:	f1 f7       	brne	.-4      	; 0x26c6 <loop+0x66e>
    26ca:	00 c0       	rjmp	.+0      	; 0x26cc <loop+0x674>
    26cc:	00 00       	nop
static const uint8_t RELE2 = PORTA7;

static inline void initSS_FLASH()  { DDRB |= (1 << PB4); } // set DDRB bit 4, sets PB4 for output
static inline void initSS_ETH()    { DDRC |= (1 << PC4); } // set DDRC bit 4, sets PC4 for output
static inline void enable_ETH()    { PORTC &= ~(1 << PC4); } // Set 0 Bit 4 PORTC Register
static inline void enable_FLASH()  { PORTB &= ~(1 << PB4); } // Set 0 Bit 4 PORTB Register
    26ce:	2c 98       	cbi	0x05, 4	; 5
           _delay_ms(5);
          disable_ETH();
          Serial.println("ETH SS Disable");
          _delay_ms(5);
          enable_FLASH();
          Serial.println("FLASH SS Enable");
    26d0:	6f ee       	ldi	r22, 0xEF	; 239
    26d2:	77 e0       	ldi	r23, 0x07	; 7
    26d4:	8f e4       	ldi	r24, 0x4F	; 79
    26d6:	9d e0       	ldi	r25, 0x0D	; 13
    26d8:	0e 94 39 3b 	call	0x7672	; 0x7672 <_ZN5Print7printlnEPKc>
          printLine();
    26dc:	0e 94 05 02 	call	0x40a	; 0x40a <_Z9printLinev>
          FlashpowerUp(100); 
    26e0:	84 e6       	ldi	r24, 0x64	; 100
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	0e 94 ac 03 	call	0x758	; 0x758 <_Z12FlashpowerUpj>
    26e8:	8f e1       	ldi	r24, 0x1F	; 31
    26ea:	9e e4       	ldi	r25, 0x4E	; 78
    26ec:	01 97       	sbiw	r24, 0x01	; 1
    26ee:	f1 f7       	brne	.-4      	; 0x26ec <loop+0x694>
    26f0:	00 c0       	rjmp	.+0      	; 0x26f2 <loop+0x69a>
    26f2:	00 00       	nop
          _delay_ms(5); 
          erogazioniSaver(addr_erog,Messaggio);   
    26f4:	6d e4       	ldi	r22, 0x4D	; 77
    26f6:	7b e0       	ldi	r23, 0x0B	; 11
    26f8:	ce 01       	movw	r24, r28
    26fa:	01 96       	adiw	r24, 0x01	; 1
    26fc:	0e 94 4b 3e 	call	0x7c96	; 0x7c96 <_ZN6StringC1ERKS_>
    2700:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <addr_erog>
    2704:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <addr_erog+0x1>
    2708:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <addr_erog+0x2>
    270c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <addr_erog+0x3>
    2710:	ae 01       	movw	r20, r28
    2712:	4f 5f       	subi	r20, 0xFF	; 255
    2714:	5f 4f       	sbci	r21, 0xFF	; 255
    2716:	0e 94 06 03 	call	0x60c	; 0x60c <_Z15erogazioniSaverm6String>
    271a:	ce 01       	movw	r24, r28
    271c:	01 96       	adiw	r24, 0x01	; 1
    271e:	0e 94 78 3d 	call	0x7af0	; 0x7af0 <_ZN6StringD1Ev>
    2722:	8f e1       	ldi	r24, 0x1F	; 31
    2724:	9e e4       	ldi	r25, 0x4E	; 78
    2726:	01 97       	sbiw	r24, 0x01	; 1
    2728:	f1 f7       	brne	.-4      	; 0x2726 <loop+0x6ce>
    272a:	00 c0       	rjmp	.+0      	; 0x272c <loop+0x6d4>
    272c:	00 00       	nop
          _delay_ms(5);
          printLine();
    272e:	0e 94 05 02 	call	0x40a	; 0x40a <_Z9printLinev>
		  righeDisplay[1] =  "";
    2732:	63 ec       	ldi	r22, 0xC3	; 195
    2734:	71 e0       	ldi	r23, 0x01	; 1
    2736:	8b e3       	ldi	r24, 0x3B	; 59
    2738:	9b e0       	ldi	r25, 0x0B	; 11
    273a:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <_ZN6StringaSEPKc>
		  righeDisplay[2] = "Dati Salvati..";
    273e:	6f ef       	ldi	r22, 0xFF	; 255
    2740:	77 e0       	ldi	r23, 0x07	; 7
    2742:	81 e4       	ldi	r24, 0x41	; 65
    2744:	9b e0       	ldi	r25, 0x0B	; 11
    2746:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <_ZN6StringaSEPKc>
		  righeDisplay[3] =  "";
    274a:	63 ec       	ldi	r22, 0xC3	; 195
    274c:	71 e0       	ldi	r23, 0x01	; 1
    274e:	87 e4       	ldi	r24, 0x47	; 71
    2750:	9b e0       	ldi	r25, 0x0B	; 11
    2752:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <_ZN6StringaSEPKc>
		  displayLCD(righeDisplay,stato_procedura,10);
    2756:	60 91 97 0b 	lds	r22, 0x0B97	; 0x800b97 <stato_procedura>
    275a:	70 91 98 0b 	lds	r23, 0x0B98	; 0x800b98 <stato_procedura+0x1>
    275e:	4a e0       	ldi	r20, 0x0A	; 10
    2760:	50 e0       	ldi	r21, 0x00	; 0
    2762:	85 e3       	ldi	r24, 0x35	; 53
    2764:	9b e0       	ldi	r25, 0x0B	; 11
    2766:	0e 94 2c 05 	call	0xa58	; 0xa58 <_Z10displayLCDP6Stringii>
    276a:	9f ef       	ldi	r25, 0xFF	; 255
    276c:	23 ed       	ldi	r18, 0xD3	; 211
    276e:	80 e3       	ldi	r24, 0x30	; 48
    2770:	91 50       	subi	r25, 0x01	; 1
    2772:	20 40       	sbci	r18, 0x00	; 0
    2774:	80 40       	sbci	r24, 0x00	; 0
    2776:	e1 f7       	brne	.-8      	; 0x2770 <loop+0x718>
    2778:	00 c0       	rjmp	.+0      	; 0x277a <loop+0x722>
    277a:	00 00       	nop
		  _delay_ms(1000); 
		  avanzaStato(TmaxSalvataggio);       
    277c:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <TmaxSalvataggio>
    2780:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <TmaxSalvataggio+0x1>
    2784:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <TmaxSalvataggio+0x2>
    2788:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <TmaxSalvataggio+0x3>
    278c:	b4 c1       	rjmp	.+872    	; 0x2af6 <loop+0xa9e>
    }
    break;
    case 9:
    {   
		  /***************************************/
			disable_ETH();
    278e:	0e 94 93 01 	call	0x326	; 0x326 <_ZL11disable_ETHv>
    2792:	8f e1       	ldi	r24, 0x1F	; 31
    2794:	9e e4       	ldi	r25, 0x4E	; 78
    2796:	01 97       	sbiw	r24, 0x01	; 1
    2798:	f1 f7       	brne	.-4      	; 0x2796 <loop+0x73e>
    279a:	00 c0       	rjmp	.+0      	; 0x279c <loop+0x744>
    279c:	00 00       	nop
			_delay_ms(5);
			String a;
    279e:	63 ec       	ldi	r22, 0xC3	; 195
    27a0:	71 e0       	ldi	r23, 0x01	; 1
    27a2:	ce 01       	movw	r24, r28
    27a4:	01 96       	adiw	r24, 0x01	; 1
    27a6:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <_ZN6StringC1EPKc>
			flash.readStr(addr_erog,a);
    27aa:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <addr_erog>
    27ae:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <addr_erog+0x1>
    27b2:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <addr_erog+0x2>
    27b6:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <addr_erog+0x3>
    27ba:	00 e0       	ldi	r16, 0x00	; 0
    27bc:	9e 01       	movw	r18, r28
    27be:	2f 5f       	subi	r18, 0xFF	; 255
    27c0:	3f 4f       	sbci	r19, 0xFF	; 255
    27c2:	8a e7       	ldi	r24, 0x7A	; 122
    27c4:	99 e0       	ldi	r25, 0x09	; 9
    27c6:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <_ZN8SPIFlash7readStrEmR6Stringb>
    27ca:	8f e1       	ldi	r24, 0x1F	; 31
    27cc:	9e e4       	ldi	r25, 0x4E	; 78
    27ce:	01 97       	sbiw	r24, 0x01	; 1
    27d0:	f1 f7       	brne	.-4      	; 0x27ce <loop+0x776>
    27d2:	00 c0       	rjmp	.+0      	; 0x27d4 <loop+0x77c>
    27d4:	00 00       	nop
			_delay_ms(5);
			Serial.print("NON INVIATE : ");
    27d6:	6e e0       	ldi	r22, 0x0E	; 14
    27d8:	78 e0       	ldi	r23, 0x08	; 8
    27da:	8f e4       	ldi	r24, 0x4F	; 79
    27dc:	9d e0       	ldi	r25, 0x0D	; 13
    27de:	0e 94 0e 3b 	call	0x761c	; 0x761c <_ZN5Print5printEPKc>
			Serial.println(a);
    27e2:	be 01       	movw	r22, r28
    27e4:	6f 5f       	subi	r22, 0xFF	; 255
    27e6:	7f 4f       	sbci	r23, 0xFF	; 255
    27e8:	8f e4       	ldi	r24, 0x4F	; 79
    27ea:	9d e0       	ldi	r25, 0x0D	; 13
    27ec:	0e 94 29 3b 	call	0x7652	; 0x7652 <_ZN5Print7printlnERK6String>
    27f0:	8f e1       	ldi	r24, 0x1F	; 31
    27f2:	9e e4       	ldi	r25, 0x4E	; 78
    27f4:	01 97       	sbiw	r24, 0x01	; 1
    27f6:	f1 f7       	brne	.-4      	; 0x27f4 <loop+0x79c>
    27f8:	00 c0       	rjmp	.+0      	; 0x27fa <loop+0x7a2>
    27fa:	00 00       	nop
			_delay_ms(5);
			FlashpowerDown(100);
    27fc:	84 e6       	ldi	r24, 0x64	; 100
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	0e 94 84 03 	call	0x708	; 0x708 <_Z14FlashpowerDownj>
    2804:	8f e1       	ldi	r24, 0x1F	; 31
    2806:	9e e4       	ldi	r25, 0x4E	; 78
    2808:	01 97       	sbiw	r24, 0x01	; 1
    280a:	f1 f7       	brne	.-4      	; 0x2808 <loop+0x7b0>
    280c:	00 c0       	rjmp	.+0      	; 0x280e <loop+0x7b6>
			_delay_ms(5);
			disable_FLASH();  
    280e:	00 00       	nop
    2810:	0e 94 95 01 	call	0x32a	; 0x32a <_ZL13disable_FLASHv>
			Azzera();
    2814:	09 db       	rcall	.-2542   	; 0x1e28 <_Z6Azzerav>
    case 9:
    {   
		  /***************************************/
			disable_ETH();
			_delay_ms(5);
			String a;
    2816:	ce 01       	movw	r24, r28
    2818:	01 96       	adiw	r24, 0x01	; 1
    281a:	0e 94 78 3d 	call	0x7af0	; 0x7af0 <_ZN6StringD1Ev>
    {      
    }
    break;
  }

  nowTimer = DS3231M.now();
    281e:	60 e8       	ldi	r22, 0x80	; 128
    2820:	7a e0       	ldi	r23, 0x0A	; 10
    2822:	ce 01       	movw	r24, r28
    2824:	01 96       	adiw	r24, 0x01	; 1
    2826:	0e 94 b4 1c 	call	0x3968	; 0x3968 <_ZN13DS3231M_Class3nowEv>
    282a:	86 e0       	ldi	r24, 0x06	; 6
    282c:	fe 01       	movw	r30, r28
    282e:	31 96       	adiw	r30, 0x01	; 1
    2830:	ae e6       	ldi	r26, 0x6E	; 110
    2832:	ba e0       	ldi	r27, 0x0A	; 10
    2834:	01 90       	ld	r0, Z+
    2836:	0d 92       	st	X+, r0
    2838:	8a 95       	dec	r24
  secs = nowTimer.secondstime();
    283a:	e1 f7       	brne	.-8      	; 0x2834 <loop+0x7dc>
    283c:	8e e6       	ldi	r24, 0x6E	; 110
    283e:	9a e0       	ldi	r25, 0x0A	; 10
    2840:	e4 d7       	rcall	.+4040   	; 0x380a <_ZNK8DateTime11secondstimeEv>
    2842:	60 93 7c 0a 	sts	0x0A7C, r22	; 0x800a7c <secs>
    2846:	70 93 7d 0a 	sts	0x0A7D, r23	; 0x800a7d <secs+0x1>
    284a:	80 93 7e 0a 	sts	0x0A7E, r24	; 0x800a7e <secs+0x2>
    284e:	90 93 7f 0a 	sts	0x0A7F, r25	; 0x800a7f <secs+0x3>
  if ((UltimoPassaggioStato+Timer-secs) <= 1) Azzera();
    2852:	00 91 78 0a 	lds	r16, 0x0A78	; 0x800a78 <UltimoPassaggioStato>
    2856:	10 91 79 0a 	lds	r17, 0x0A79	; 0x800a79 <UltimoPassaggioStato+0x1>
    285a:	20 91 7a 0a 	lds	r18, 0x0A7A	; 0x800a7a <UltimoPassaggioStato+0x2>
    285e:	30 91 7b 0a 	lds	r19, 0x0A7B	; 0x800a7b <UltimoPassaggioStato+0x3>
    2862:	c0 90 74 0a 	lds	r12, 0x0A74	; 0x800a74 <Timer>
    2866:	d0 90 75 0a 	lds	r13, 0x0A75	; 0x800a75 <Timer+0x1>
    286a:	e0 90 76 0a 	lds	r14, 0x0A76	; 0x800a76 <Timer+0x2>
    286e:	f0 90 77 0a 	lds	r15, 0x0A77	; 0x800a77 <Timer+0x3>
    2872:	0c 0d       	add	r16, r12
    2874:	1d 1d       	adc	r17, r13
    2876:	2e 1d       	adc	r18, r14
    2878:	3f 1d       	adc	r19, r15
    287a:	68 01       	movw	r12, r16
    287c:	79 01       	movw	r14, r18
    287e:	c6 1a       	sub	r12, r22
    2880:	d7 0a       	sbc	r13, r23
    2882:	e8 0a       	sbc	r14, r24
    2884:	f9 0a       	sbc	r15, r25
    2886:	d7 01       	movw	r26, r14
    2888:	c6 01       	movw	r24, r12
    288a:	02 97       	sbiw	r24, 0x02	; 2
    288c:	a1 05       	cpc	r26, r1
    288e:	b1 05       	cpc	r27, r1
    2890:	08 f0       	brcs	.+2      	; 0x2894 <loop+0x83c>
    2892:	34 c1       	rjmp	.+616    	; 0x2afc <loop+0xaa4>
    2894:	c9 da       	rcall	.-2670   	; 0x1e28 <_Z6Azzerav>

}
    2896:	32 c1       	rjmp	.+612    	; 0x2afc <loop+0xaa4>

      if (!alreadyTimbrata) {ATe = GetCodeRfidATe(); Buzzer(2,100);}
      
        if ((ATe != "ERRORE") && (BIT_IS_CLEAR(PORTC,4)))
        { 
           Serial.println("");
    2898:	63 ec       	ldi	r22, 0xC3	; 195
    289a:	71 e0       	ldi	r23, 0x01	; 1
    289c:	8f e4       	ldi	r24, 0x4F	; 79
    289e:	9d e0       	ldi	r25, 0x0D	; 13
    28a0:	0e 94 39 3b 	call	0x7672	; 0x7672 <_ZN5Print7printlnEPKc>
           Serial.print("***************************************************************");
    28a4:	6d e1       	ldi	r22, 0x1D	; 29
    28a6:	78 e0       	ldi	r23, 0x08	; 8
    28a8:	8f e4       	ldi	r24, 0x4F	; 79
    28aa:	9d e0       	ldi	r25, 0x0D	; 13
    28ac:	0e 94 0e 3b 	call	0x761c	; 0x761c <_ZN5Print5printEPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    28b0:	6d e5       	ldi	r22, 0x5D	; 93
    28b2:	78 e0       	ldi	r23, 0x08	; 8
    28b4:	ce 01       	movw	r24, r28
    28b6:	01 96       	adiw	r24, 0x01	; 1
    28b8:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <_ZN6StringC1EPKc>
           Serial.println(" Tessera ID : " + ATe);
    28bc:	be 01       	movw	r22, r28
    28be:	67 5e       	subi	r22, 0xE7	; 231
    28c0:	7f 4f       	sbci	r23, 0xFF	; 255
    28c2:	ce 01       	movw	r24, r28
    28c4:	01 96       	adiw	r24, 0x01	; 1
    28c6:	0e 94 37 3f 	call	0x7e6e	; 0x7e6e <_ZplRK15StringSumHelperRK6String>
    28ca:	bc 01       	movw	r22, r24
    28cc:	8f e4       	ldi	r24, 0x4F	; 79
    28ce:	9d e0       	ldi	r25, 0x0D	; 13
    28d0:	0e 94 29 3b 	call	0x7652	; 0x7652 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    28d4:	ce 01       	movw	r24, r28
    28d6:	01 96       	adiw	r24, 0x01	; 1
    28d8:	0e 94 78 3d 	call	0x7af0	; 0x7af0 <_ZN6StringD1Ev>
           Serial.print("***************************************************************");
    28dc:	6d e1       	ldi	r22, 0x1D	; 29
    28de:	78 e0       	ldi	r23, 0x08	; 8
    28e0:	8f e4       	ldi	r24, 0x4F	; 79
    28e2:	9d e0       	ldi	r25, 0x0D	; 13
    28e4:	0e 94 0e 3b 	call	0x761c	; 0x761c <_ZN5Print5printEPKc>
           Serial.println("Riconoscimento Tessera .............");
    28e8:	6c e6       	ldi	r22, 0x6C	; 108
    28ea:	78 e0       	ldi	r23, 0x08	; 8
    28ec:	8f e4       	ldi	r24, 0x4F	; 79
    28ee:	9d e0       	ldi	r25, 0x0D	; 13
    28f0:	0e 94 39 3b 	call	0x7672	; 0x7672 <_ZN5Print7printlnEPKc>
                     
           RaccoltaDati[0] = ATe;
    28f4:	be 01       	movw	r22, r28
    28f6:	67 5e       	subi	r22, 0xE7	; 231
    28f8:	7f 4f       	sbci	r23, 0xFF	; 255
    28fa:	8b e6       	ldi	r24, 0x6B	; 107
    28fc:	9b e0       	ldi	r25, 0x0B	; 11
    28fe:	0e 94 36 3e 	call	0x7c6c	; 0x7c6c <_ZN6StringaSERKS_>
           
           lcd.backlight();
    2902:	80 ec       	ldi	r24, 0xC0	; 192
    2904:	9b e0       	ldi	r25, 0x0B	; 11
    2906:	0e 94 80 2a 	call	0x5500	; 0x5500 <_ZN3LCD9backlightEv>
           lcd.display();          
    290a:	80 ec       	ldi	r24, 0xC0	; 192
    290c:	9b e0       	ldi	r25, 0x0B	; 11
    290e:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <_ZN3LCD7displayEv>
    2912:	8f e3       	ldi	r24, 0x3F	; 63
    2914:	9c e9       	ldi	r25, 0x9C	; 156
    2916:	01 97       	sbiw	r24, 0x01	; 1
    2918:	f1 f7       	brne	.-4      	; 0x2916 <loop+0x8be>
    291a:	00 c0       	rjmp	.+0      	; 0x291c <loop+0x8c4>
    291c:	00 00       	nop
           _delay_ms(10);
            
           righeDisplay[1] = " * AUTENTICAZIONE *";
    291e:	69 e0       	ldi	r22, 0x09	; 9
    2920:	77 e0       	ldi	r23, 0x07	; 7
    2922:	8b e3       	ldi	r24, 0x3B	; 59
    2924:	9b e0       	ldi	r25, 0x0B	; 11
    2926:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <_ZN6StringaSEPKc>
           righeDisplay[2] = "";
    292a:	63 ec       	ldi	r22, 0xC3	; 195
    292c:	71 e0       	ldi	r23, 0x01	; 1
    292e:	81 e4       	ldi	r24, 0x41	; 65
    2930:	9b e0       	ldi	r25, 0x0B	; 11
    2932:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <_ZN6StringaSEPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2936:	61 e9       	ldi	r22, 0x91	; 145
    2938:	78 e0       	ldi	r23, 0x08	; 8
    293a:	ce 01       	movw	r24, r28
    293c:	01 96       	adiw	r24, 0x01	; 1
    293e:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <_ZN6StringC1EPKc>
           righeDisplay[3] = "   Rfid: " + ATe;
    2942:	be 01       	movw	r22, r28
    2944:	67 5e       	subi	r22, 0xE7	; 231
    2946:	7f 4f       	sbci	r23, 0xFF	; 255
    2948:	ce 01       	movw	r24, r28
    294a:	01 96       	adiw	r24, 0x01	; 1
    294c:	0e 94 37 3f 	call	0x7e6e	; 0x7e6e <_ZplRK15StringSumHelperRK6String>
    2950:	bc 01       	movw	r22, r24
    2952:	87 e4       	ldi	r24, 0x47	; 71
    2954:	9b e0       	ldi	r25, 0x0B	; 11
    2956:	0e 94 36 3e 	call	0x7c6c	; 0x7c6c <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    295a:	ce 01       	movw	r24, r28
    295c:	01 96       	adiw	r24, 0x01	; 1
    295e:	0e 94 78 3d 	call	0x7af0	; 0x7af0 <_ZN6StringD1Ev>
         
           displayLCD(righeDisplay,stato_procedura,100);
    2962:	60 91 97 0b 	lds	r22, 0x0B97	; 0x800b97 <stato_procedura>
    2966:	70 91 98 0b 	lds	r23, 0x0B98	; 0x800b98 <stato_procedura+0x1>
    296a:	44 e6       	ldi	r20, 0x64	; 100
    296c:	50 e0       	ldi	r21, 0x00	; 0
    296e:	85 e3       	ldi	r24, 0x35	; 53
    2970:	9b e0       	ldi	r25, 0x0B	; 11
    2972:	0e 94 2c 05 	call	0xa58	; 0xa58 <_Z10displayLCDP6Stringii>
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    2976:	8a e5       	ldi	r24, 0x5A	; 90
    2978:	99 e0       	ldi	r25, 0x09	; 9
    297a:	9a 83       	std	Y+2, r25	; 0x02
    297c:	89 83       	std	Y+1, r24	; 0x01
    297e:	40 91 bb 0a 	lds	r20, 0x0ABB	; 0x800abb <subnet+0x2>
    2982:	50 91 bc 0a 	lds	r21, 0x0ABC	; 0x800abc <subnet+0x3>
    2986:	60 91 bd 0a 	lds	r22, 0x0ABD	; 0x800abd <subnet+0x4>
    298a:	70 91 be 0a 	lds	r23, 0x0ABE	; 0x800abe <subnet+0x5>
    298e:	4b 83       	std	Y+3, r20	; 0x03
    2990:	5c 83       	std	Y+4, r21	; 0x04
    2992:	6d 83       	std	Y+5, r22	; 0x05
    2994:	7e 83       	std	Y+6, r23	; 0x06
    2996:	98 87       	std	Y+8, r25	; 0x08
    2998:	8f 83       	std	Y+7, r24	; 0x07
    299a:	40 91 c1 0a 	lds	r20, 0x0AC1	; 0x800ac1 <gateway+0x2>
    299e:	50 91 c2 0a 	lds	r21, 0x0AC2	; 0x800ac2 <gateway+0x3>
    29a2:	60 91 c3 0a 	lds	r22, 0x0AC3	; 0x800ac3 <gateway+0x4>
    29a6:	70 91 c4 0a 	lds	r23, 0x0AC4	; 0x800ac4 <gateway+0x5>
    29aa:	49 87       	std	Y+9, r20	; 0x09
    29ac:	5a 87       	std	Y+10, r21	; 0x0a
    29ae:	6b 87       	std	Y+11, r22	; 0x0b
    29b0:	7c 87       	std	Y+12, r23	; 0x0c
    29b2:	9e 87       	std	Y+14, r25	; 0x0e
    29b4:	8d 87       	std	Y+13, r24	; 0x0d
    29b6:	80 91 c7 0a 	lds	r24, 0x0AC7	; 0x800ac7 <myDns+0x2>
    29ba:	90 91 c8 0a 	lds	r25, 0x0AC8	; 0x800ac8 <myDns+0x3>
    29be:	a0 91 c9 0a 	lds	r26, 0x0AC9	; 0x800ac9 <myDns+0x4>
    29c2:	b0 91 ca 0a 	lds	r27, 0x0ACA	; 0x800aca <myDns+0x5>
    29c6:	8f 87       	std	Y+15, r24	; 0x0f
    29c8:	98 8b       	std	Y+16, r25	; 0x10
    29ca:	a9 8b       	std	Y+17, r26	; 0x11
    29cc:	ba 8b       	std	Y+18, r27	; 0x12
           Ethernet.begin(mac, ip, myDns, gateway, subnet);
    29ce:	60 e3       	ldi	r22, 0x30	; 48
    29d0:	71 e0       	ldi	r23, 0x01	; 1
    29d2:	ce 01       	movw	r24, r28
    29d4:	43 96       	adiw	r24, 0x13	; 19
    29d6:	0e 94 7b 3a 	call	0x74f6	; 0x74f6 <_ZN9IPAddressC1EPKh>
    29da:	ce 01       	movw	r24, r28
    29dc:	01 96       	adiw	r24, 0x01	; 1
    29de:	7c 01       	movw	r14, r24
    29e0:	8e 01       	movw	r16, r28
    29e2:	09 5f       	subi	r16, 0xF9	; 249
    29e4:	1f 4f       	sbci	r17, 0xFF	; 255
    29e6:	9e 01       	movw	r18, r28
    29e8:	23 5f       	subi	r18, 0xF3	; 243
    29ea:	3f 4f       	sbci	r19, 0xFF	; 255
    29ec:	ae 01       	movw	r20, r28
    29ee:	4d 5e       	subi	r20, 0xED	; 237
    29f0:	5f 4f       	sbci	r21, 0xFF	; 255
    29f2:	6a e2       	ldi	r22, 0x2A	; 42
    29f4:	71 e0       	ldi	r23, 0x01	; 1
    29f6:	85 e4       	ldi	r24, 0x45	; 69
    29f8:	9c e0       	ldi	r25, 0x0C	; 12
    29fa:	0e 94 0d 21 	call	0x421a	; 0x421a <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_>
    29fe:	9f ef       	ldi	r25, 0xFF	; 255
    2a00:	23 ed       	ldi	r18, 0xD3	; 211
    2a02:	80 e3       	ldi	r24, 0x30	; 48
    2a04:	91 50       	subi	r25, 0x01	; 1
    2a06:	20 40       	sbci	r18, 0x00	; 0
    2a08:	80 40       	sbci	r24, 0x00	; 0
    2a0a:	e1 f7       	brne	.-8      	; 0x2a04 <loop+0x9ac>
    2a0c:	00 c0       	rjmp	.+0      	; 0x2a0e <loop+0x9b6>
    2a0e:	00 00       	nop
    2a10:	e7 cb       	rjmp	.-2098   	; 0x21e0 <loop+0x188>
      Serial.println("TIPO CARBURANTE: " + mezzo.Carb);    
      Serial.println("TARGA: " + mezzo.TARGA);              

      Carburante = mezzo.Carb;                 
      if ((mezzo.Carb == "B") || (mezzo.Carb == "D")) {
        RaccoltaDati[1] = mezzo.TARGA;
    2a12:	68 ee       	ldi	r22, 0xE8	; 232
    2a14:	7b e0       	ldi	r23, 0x0B	; 11
    2a16:	81 e7       	ldi	r24, 0x71	; 113
    2a18:	9b e0       	ldi	r25, 0x0B	; 11
    2a1a:	0e 94 36 3e 	call	0x7c6c	; 0x7c6c <_ZN6StringaSERKS_>
        RaccoltaDati[2] = mezzo.Carb;
    2a1e:	62 ee       	ldi	r22, 0xE2	; 226
    2a20:	7b e0       	ldi	r23, 0x0B	; 11
    2a22:	87 e7       	ldi	r24, 0x77	; 119
    2a24:	9b e0       	ldi	r25, 0x0B	; 11
    2a26:	0e 94 36 3e 	call	0x7c6c	; 0x7c6c <_ZN6StringaSERKS_>
        avanzaStato(TselDistributore); 
    2a2a:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <TselDistributore>
    2a2e:	70 91 23 01 	lds	r23, 0x0123	; 0x800123 <TselDistributore+0x1>
    2a32:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <TselDistributore+0x2>
    2a36:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <TselDistributore+0x3>
    2a3a:	0e 94 cc 05 	call	0xb98	; 0xb98 <_Z11avanzaStatom>
    2a3e:	91 cc       	rjmp	.-1758   	; 0x2362 <loop+0x30a>

      /* CONTATTO PISTOLA DIESEL*/
      
      if ((PINA & _BV(PA1)) && (Carburante == "D"))
      {       
        RaccoltaDati[3] = String(lt);
    2a40:	22 e0       	ldi	r18, 0x02	; 2
    2a42:	b7 01       	movw	r22, r14
    2a44:	a6 01       	movw	r20, r12
    2a46:	ce 01       	movw	r24, r28
    2a48:	01 96       	adiw	r24, 0x01	; 1
    2a4a:	0e 94 c9 3e 	call	0x7d92	; 0x7d92 <_ZN6StringC1Edh>
    2a4e:	be 01       	movw	r22, r28
    2a50:	6f 5f       	subi	r22, 0xFF	; 255
    2a52:	7f 4f       	sbci	r23, 0xFF	; 255
    2a54:	8d e7       	ldi	r24, 0x7D	; 125
    2a56:	9b e0       	ldi	r25, 0x0B	; 11
    2a58:	0e 94 53 3e 	call	0x7ca6	; 0x7ca6 <_ZN6StringaSEOS_>
    2a5c:	ce 01       	movw	r24, r28
    2a5e:	01 96       	adiw	r24, 0x01	; 1
    2a60:	0e 94 78 3d 	call	0x7af0	; 0x7af0 <_ZN6StringD1Ev>
        
        StatoAttuale = "STOP EROGAZIONE";
    2a64:	6b e9       	ldi	r22, 0x9B	; 155
    2a66:	78 e0       	ldi	r23, 0x08	; 8
    2a68:	83 ea       	ldi	r24, 0xA3	; 163
    2a6a:	9b e0       	ldi	r25, 0x0B	; 11
    2a6c:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <_ZN6StringaSEPKc>
        Rele_Abilitazione2(1,7); //  apri relè
    2a70:	67 e0       	ldi	r22, 0x07	; 7
    2a72:	70 e0       	ldi	r23, 0x00	; 0
    2a74:	81 e0       	ldi	r24, 0x01	; 1
    2a76:	90 e0       	ldi	r25, 0x00	; 0
    2a78:	0e 94 ae 07 	call	0xf5c	; 0xf5c <_Z18Rele_Abilitazione2ii>
        Rele_Abilitazione1(1,7); //  apri relè  
    2a7c:	67 e0       	ldi	r22, 0x07	; 7
    2a7e:	70 e0       	ldi	r23, 0x00	; 0
    2a80:	81 e0       	ldi	r24, 0x01	; 1
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	0e 94 73 07 	call	0xee6	; 0xee6 <_Z18Rele_Abilitazione1ii>
        TOGGLE_BIT(PORTA,1);      
    2a88:	92 b1       	in	r25, 0x02	; 2
    2a8a:	82 e0       	ldi	r24, 0x02	; 2
    2a8c:	89 27       	eor	r24, r25
    2a8e:	82 b9       	out	0x02, r24	; 2
        avanzaStato(10);
    2a90:	6a e0       	ldi	r22, 0x0A	; 10
    2a92:	70 e0       	ldi	r23, 0x00	; 0
    2a94:	80 e0       	ldi	r24, 0x00	; 0
    2a96:	90 e0       	ldi	r25, 0x00	; 0
    2a98:	0e 94 cc 05 	call	0xb98	; 0xb98 <_Z11avanzaStatom>
    2a9c:	42 cd       	rjmp	.-1404   	; 0x2522 <loop+0x4ca>
      
      /* CONTATTO PISTOLA BENZINA*/
      
      if  ((PINB & _BV(PB1)) && (Carburante == "B"))
      {
        RaccoltaDati[3] = String(lt);
    2a9e:	22 e0       	ldi	r18, 0x02	; 2
    2aa0:	b7 01       	movw	r22, r14
    2aa2:	a6 01       	movw	r20, r12
    2aa4:	ce 01       	movw	r24, r28
    2aa6:	01 96       	adiw	r24, 0x01	; 1
    2aa8:	0e 94 c9 3e 	call	0x7d92	; 0x7d92 <_ZN6StringC1Edh>
    2aac:	be 01       	movw	r22, r28
    2aae:	6f 5f       	subi	r22, 0xFF	; 255
    2ab0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ab2:	8d e7       	ldi	r24, 0x7D	; 125
    2ab4:	9b e0       	ldi	r25, 0x0B	; 11
    2ab6:	0e 94 53 3e 	call	0x7ca6	; 0x7ca6 <_ZN6StringaSEOS_>
    2aba:	ce 01       	movw	r24, r28
    2abc:	01 96       	adiw	r24, 0x01	; 1
    2abe:	0e 94 78 3d 	call	0x7af0	; 0x7af0 <_ZN6StringD1Ev>
        
        StatoAttuale = "STOP EROGAZIONE";
    2ac2:	6b e9       	ldi	r22, 0x9B	; 155
    2ac4:	78 e0       	ldi	r23, 0x08	; 8
    2ac6:	83 ea       	ldi	r24, 0xA3	; 163
    2ac8:	9b e0       	ldi	r25, 0x0B	; 11
    2aca:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <_ZN6StringaSEPKc>
        Rele_Abilitazione2(1,7); //  apri relè
    2ace:	67 e0       	ldi	r22, 0x07	; 7
    2ad0:	70 e0       	ldi	r23, 0x00	; 0
    2ad2:	81 e0       	ldi	r24, 0x01	; 1
    2ad4:	90 e0       	ldi	r25, 0x00	; 0
    2ad6:	0e 94 ae 07 	call	0xf5c	; 0xf5c <_Z18Rele_Abilitazione2ii>
        Rele_Abilitazione1(1,7); //  apri relè        
    2ada:	67 e0       	ldi	r22, 0x07	; 7
    2adc:	70 e0       	ldi	r23, 0x00	; 0
    2ade:	81 e0       	ldi	r24, 0x01	; 1
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	0e 94 73 07 	call	0xee6	; 0xee6 <_Z18Rele_Abilitazione1ii>
        avanzaStato(TmaxInviodati);
    2ae6:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <TmaxInviodati>
    2aea:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <TmaxInviodati+0x1>
    2aee:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <TmaxInviodati+0x2>
    2af2:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <TmaxInviodati+0x3>
    2af6:	0e 94 cc 05 	call	0xb98	; 0xb98 <_Z11avanzaStatom>
    2afa:	91 ce       	rjmp	.-734    	; 0x281e <loop+0x7c6>

  nowTimer = DS3231M.now();
  secs = nowTimer.secondstime();
  if ((UltimoPassaggioStato+Timer-secs) <= 1) Azzera();

}
    2afc:	6e 96       	adiw	r28, 0x1e	; 30
    2afe:	0f b6       	in	r0, 0x3f	; 63
    2b00:	f8 94       	cli
    2b02:	de bf       	out	0x3e, r29	; 62
    2b04:	0f be       	out	0x3f, r0	; 63
    2b06:	cd bf       	out	0x3d, r28	; 61
    2b08:	df 91       	pop	r29
    2b0a:	cf 91       	pop	r28
    2b0c:	1f 91       	pop	r17
    2b0e:	0f 91       	pop	r16
    2b10:	ff 90       	pop	r15
    2b12:	ef 90       	pop	r14
    2b14:	df 90       	pop	r13
    2b16:	cf 90       	pop	r12
    2b18:	08 95       	ret

00002b1a <_ZN8SPIClass16beginTransactionE11SPISettings>:
    #endif
    return false;
  }

  return true;
}
    2b1a:	20 91 89 0c 	lds	r18, 0x0C89	; 0x800c89 <_ZN8SPIClass13interruptModeE>
    2b1e:	22 23       	and	r18, r18
    2b20:	99 f0       	breq	.+38     	; 0x2b48 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    2b22:	4f b7       	in	r20, 0x3f	; 63
    2b24:	f8 94       	cli
    2b26:	20 91 89 0c 	lds	r18, 0x0C89	; 0x800c89 <_ZN8SPIClass13interruptModeE>
    2b2a:	21 30       	cpi	r18, 0x01	; 1
    2b2c:	59 f4       	brne	.+22     	; 0x2b44 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
    2b2e:	2d b3       	in	r18, 0x1d	; 29
    2b30:	20 93 87 0c 	sts	0x0C87, r18	; 0x800c87 <_ZN8SPIClass13interruptSaveE>
    2b34:	3d b3       	in	r19, 0x1d	; 29
    2b36:	20 91 88 0c 	lds	r18, 0x0C88	; 0x800c88 <_ZN8SPIClass13interruptMaskE>
    2b3a:	20 95       	com	r18
    2b3c:	23 23       	and	r18, r19
    2b3e:	2d bb       	out	0x1d, r18	; 29
    2b40:	4f bf       	out	0x3f, r20	; 63
    2b42:	02 c0       	rjmp	.+4      	; 0x2b48 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    2b44:	40 93 87 0c 	sts	0x0C87, r20	; 0x800c87 <_ZN8SPIClass13interruptSaveE>
    2b48:	8c bd       	out	0x2c, r24	; 44
    2b4a:	9d bd       	out	0x2d, r25	; 45
    2b4c:	08 95       	ret

00002b4e <_ZN8SPIClass14endTransactionEv>:
    2b4e:	80 91 89 0c 	lds	r24, 0x0C89	; 0x800c89 <_ZN8SPIClass13interruptModeE>
    2b52:	88 23       	and	r24, r24
    2b54:	61 f0       	breq	.+24     	; 0x2b6e <_ZN8SPIClass14endTransactionEv+0x20>
    2b56:	9f b7       	in	r25, 0x3f	; 63
    2b58:	f8 94       	cli
    2b5a:	20 91 89 0c 	lds	r18, 0x0C89	; 0x800c89 <_ZN8SPIClass13interruptModeE>
    2b5e:	80 91 87 0c 	lds	r24, 0x0C87	; 0x800c87 <_ZN8SPIClass13interruptSaveE>
    2b62:	21 30       	cpi	r18, 0x01	; 1
    2b64:	19 f4       	brne	.+6      	; 0x2b6c <_ZN8SPIClass14endTransactionEv+0x1e>
    2b66:	8d bb       	out	0x1d, r24	; 29
    2b68:	9f bf       	out	0x3f, r25	; 63
    2b6a:	08 95       	ret
    2b6c:	8f bf       	out	0x3f, r24	; 63
    2b6e:	08 95       	ret

00002b70 <_ZN14Adafruit_PN532C1Ehh>:
    2b70:	cf 93       	push	r28
    2b72:	df 93       	push	r29
    2b74:	ec 01       	movw	r28, r24
    2b76:	86 2f       	mov	r24, r22
    2b78:	18 82       	st	Y, r1
    2b7a:	19 82       	std	Y+1, r1	; 0x01
    2b7c:	1a 82       	std	Y+2, r1	; 0x02
    2b7e:	1b 82       	std	Y+3, r1	; 0x03
    2b80:	6c 83       	std	Y+4, r22	; 0x04
    2b82:	4d 83       	std	Y+5, r20	; 0x05
    2b84:	1d 8a       	std	Y+21, r1	; 0x15
    2b86:	1e 8a       	std	Y+22, r1	; 0x16
    2b88:	60 e0       	ldi	r22, 0x00	; 0
    2b8a:	0e 94 e5 3c 	call	0x79ca	; 0x79ca <pinMode>
    2b8e:	61 e0       	ldi	r22, 0x01	; 1
    2b90:	8d 81       	ldd	r24, Y+5	; 0x05
    2b92:	df 91       	pop	r29
    2b94:	cf 91       	pop	r28
    2b96:	0c 94 e5 3c 	jmp	0x79ca	; 0x79ca <pinMode>

00002b9a <_ZN14Adafruit_PN53210GetHexCodeEPKhm>:
    2b9a:	4f 92       	push	r4
    2b9c:	5f 92       	push	r5
    2b9e:	6f 92       	push	r6
    2ba0:	7f 92       	push	r7
    2ba2:	8f 92       	push	r8
    2ba4:	9f 92       	push	r9
    2ba6:	af 92       	push	r10
    2ba8:	bf 92       	push	r11
    2baa:	ef 92       	push	r14
    2bac:	ff 92       	push	r15
    2bae:	0f 93       	push	r16
    2bb0:	1f 93       	push	r17
    2bb2:	cf 93       	push	r28
    2bb4:	df 93       	push	r29
    2bb6:	cd b7       	in	r28, 0x3d	; 61
    2bb8:	de b7       	in	r29, 0x3e	; 62
    2bba:	2c 97       	sbiw	r28, 0x0c	; 12
    2bbc:	0f b6       	in	r0, 0x3f	; 63
    2bbe:	f8 94       	cli
    2bc0:	de bf       	out	0x3e, r29	; 62
    2bc2:	0f be       	out	0x3f, r0	; 63
    2bc4:	cd bf       	out	0x3d, r28	; 61
    2bc6:	7c 01       	movw	r14, r24
    2bc8:	5a 01       	movw	r10, r20
    2bca:	28 01       	movw	r4, r16
    2bcc:	39 01       	movw	r6, r18
    2bce:	63 ec       	ldi	r22, 0xC3	; 195
    2bd0:	71 e0       	ldi	r23, 0x01	; 1
    2bd2:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <_ZN6StringC1EPKc>
    2bd6:	85 01       	movw	r16, r10
    2bd8:	81 2c       	mov	r8, r1
    2bda:	91 2c       	mov	r9, r1
    2bdc:	54 01       	movw	r10, r8
    2bde:	84 14       	cp	r8, r4
    2be0:	95 04       	cpc	r9, r5
    2be2:	a6 04       	cpc	r10, r6
    2be4:	b7 04       	cpc	r11, r7
    2be6:	09 f4       	brne	.+2      	; 0x2bea <_ZN14Adafruit_PN53210GetHexCodeEPKhm+0x50>
    2be8:	46 c0       	rjmp	.+140    	; 0x2c76 <_ZN14Adafruit_PN53210GetHexCodeEPKhm+0xdc>
    2bea:	f8 01       	movw	r30, r16
    2bec:	61 91       	ld	r22, Z+
    2bee:	8f 01       	movw	r16, r30
    2bf0:	40 e1       	ldi	r20, 0x10	; 16
    2bf2:	ce 01       	movw	r24, r28
    2bf4:	60 31       	cpi	r22, 0x10	; 16
    2bf6:	f0 f4       	brcc	.+60     	; 0x2c34 <_ZN14Adafruit_PN53210GetHexCodeEPKhm+0x9a>
    2bf8:	01 96       	adiw	r24, 0x01	; 1
    2bfa:	0e 94 73 3e 	call	0x7ce6	; 0x7ce6 <_ZN6StringC1Ehh>
    2bfe:	b7 01       	movw	r22, r14
    2c00:	ce 01       	movw	r24, r28
    2c02:	07 96       	adiw	r24, 0x07	; 7
    2c04:	0e 94 4b 3e 	call	0x7c96	; 0x7c96 <_ZN6StringC1ERKS_>
    2c08:	6d e2       	ldi	r22, 0x2D	; 45
    2c0a:	76 e0       	ldi	r23, 0x06	; 6
    2c0c:	ce 01       	movw	r24, r28
    2c0e:	07 96       	adiw	r24, 0x07	; 7
    2c10:	0e 94 48 3f 	call	0x7e90	; 0x7e90 <_ZplRK15StringSumHelperPKc>
    2c14:	be 01       	movw	r22, r28
    2c16:	6f 5f       	subi	r22, 0xFF	; 255
    2c18:	7f 4f       	sbci	r23, 0xFF	; 255
    2c1a:	0e 94 37 3f 	call	0x7e6e	; 0x7e6e <_ZplRK15StringSumHelperRK6String>
    2c1e:	bc 01       	movw	r22, r24
    2c20:	c7 01       	movw	r24, r14
    2c22:	0e 94 36 3e 	call	0x7c6c	; 0x7c6c <_ZN6StringaSERKS_>
    2c26:	ce 01       	movw	r24, r28
    2c28:	07 96       	adiw	r24, 0x07	; 7
    2c2a:	0e 94 78 3d 	call	0x7af0	; 0x7af0 <_ZN6StringD1Ev>
    2c2e:	ce 01       	movw	r24, r28
    2c30:	01 96       	adiw	r24, 0x01	; 1
    2c32:	19 c0       	rjmp	.+50     	; 0x2c66 <_ZN14Adafruit_PN53210GetHexCodeEPKhm+0xcc>
    2c34:	07 96       	adiw	r24, 0x07	; 7
    2c36:	0e 94 73 3e 	call	0x7ce6	; 0x7ce6 <_ZN6StringC1Ehh>
    2c3a:	b7 01       	movw	r22, r14
    2c3c:	ce 01       	movw	r24, r28
    2c3e:	01 96       	adiw	r24, 0x01	; 1
    2c40:	0e 94 4b 3e 	call	0x7c96	; 0x7c96 <_ZN6StringC1ERKS_>
    2c44:	be 01       	movw	r22, r28
    2c46:	69 5f       	subi	r22, 0xF9	; 249
    2c48:	7f 4f       	sbci	r23, 0xFF	; 255
    2c4a:	ce 01       	movw	r24, r28
    2c4c:	01 96       	adiw	r24, 0x01	; 1
    2c4e:	0e 94 37 3f 	call	0x7e6e	; 0x7e6e <_ZplRK15StringSumHelperRK6String>
    2c52:	bc 01       	movw	r22, r24
    2c54:	c7 01       	movw	r24, r14
    2c56:	0e 94 36 3e 	call	0x7c6c	; 0x7c6c <_ZN6StringaSERKS_>
    2c5a:	ce 01       	movw	r24, r28
    2c5c:	01 96       	adiw	r24, 0x01	; 1
    2c5e:	0e 94 78 3d 	call	0x7af0	; 0x7af0 <_ZN6StringD1Ev>
    2c62:	ce 01       	movw	r24, r28
    2c64:	07 96       	adiw	r24, 0x07	; 7
    2c66:	0e 94 78 3d 	call	0x7af0	; 0x7af0 <_ZN6StringD1Ev>
    2c6a:	ff ef       	ldi	r31, 0xFF	; 255
    2c6c:	8f 1a       	sub	r8, r31
    2c6e:	9f 0a       	sbc	r9, r31
    2c70:	af 0a       	sbc	r10, r31
    2c72:	bf 0a       	sbc	r11, r31
    2c74:	b4 cf       	rjmp	.-152    	; 0x2bde <_ZN14Adafruit_PN53210GetHexCodeEPKhm+0x44>
    2c76:	8f e4       	ldi	r24, 0x4F	; 79
    2c78:	9d e0       	ldi	r25, 0x0D	; 13
    2c7a:	0e 94 16 3b 	call	0x762c	; 0x762c <_ZN5Print7printlnEv>
    2c7e:	c7 01       	movw	r24, r14
    2c80:	2c 96       	adiw	r28, 0x0c	; 12
    2c82:	0f b6       	in	r0, 0x3f	; 63
    2c84:	f8 94       	cli
    2c86:	de bf       	out	0x3e, r29	; 62
    2c88:	0f be       	out	0x3f, r0	; 63
    2c8a:	cd bf       	out	0x3d, r28	; 61
    2c8c:	df 91       	pop	r29
    2c8e:	cf 91       	pop	r28
    2c90:	1f 91       	pop	r17
    2c92:	0f 91       	pop	r16
    2c94:	ff 90       	pop	r15
    2c96:	ef 90       	pop	r14
    2c98:	bf 90       	pop	r11
    2c9a:	af 90       	pop	r10
    2c9c:	9f 90       	pop	r9
    2c9e:	8f 90       	pop	r8
    2ca0:	7f 90       	pop	r7
    2ca2:	6f 90       	pop	r6
    2ca4:	5f 90       	pop	r5
    2ca6:	4f 90       	pop	r4
    2ca8:	08 95       	ret

00002caa <_ZN14Adafruit_PN5329spi_writeEh>:
    2caa:	ef 92       	push	r14
    2cac:	ff 92       	push	r15
    2cae:	0f 93       	push	r16
    2cb0:	1f 93       	push	r17
    2cb2:	cf 93       	push	r28
    2cb4:	df 93       	push	r29
    2cb6:	fc 01       	movw	r30, r24
    2cb8:	26 89       	ldd	r18, Z+22	; 0x16
    2cba:	22 23       	and	r18, r18
    2cbc:	39 f0       	breq	.+14     	; 0x2ccc <_ZN14Adafruit_PN5329spi_writeEh+0x22>
    2cbe:	6e bd       	out	0x2e, r22	; 46
    2cc0:	00 00       	nop
    2cc2:	0d b4       	in	r0, 0x2d	; 45
    2cc4:	07 fe       	sbrs	r0, 7
    2cc6:	fd cf       	rjmp	.-6      	; 0x2cc2 <_ZN14Adafruit_PN5329spi_writeEh+0x18>
    2cc8:	8e b5       	in	r24, 0x2e	; 46
    2cca:	27 c0       	rjmp	.+78     	; 0x2d1a <_ZN14Adafruit_PN5329spi_writeEh+0x70>
    2ccc:	06 2f       	mov	r16, r22
    2cce:	ec 01       	movw	r28, r24
    2cd0:	61 e0       	ldi	r22, 0x01	; 1
    2cd2:	81 81       	ldd	r24, Z+1	; 0x01
    2cd4:	0e 94 21 3d 	call	0x7a42	; 0x7a42 <digitalWrite>
    2cd8:	e1 2c       	mov	r14, r1
    2cda:	f1 2c       	mov	r15, r1
    2cdc:	10 e0       	ldi	r17, 0x00	; 0
    2cde:	60 e0       	ldi	r22, 0x00	; 0
    2ce0:	89 81       	ldd	r24, Y+1	; 0x01
    2ce2:	0e 94 21 3d 	call	0x7a42	; 0x7a42 <digitalWrite>
    2ce6:	c8 01       	movw	r24, r16
    2ce8:	0e 2c       	mov	r0, r14
    2cea:	02 c0       	rjmp	.+4      	; 0x2cf0 <_ZN14Adafruit_PN5329spi_writeEh+0x46>
    2cec:	95 95       	asr	r25
    2cee:	87 95       	ror	r24
    2cf0:	0a 94       	dec	r0
    2cf2:	e2 f7       	brpl	.-8      	; 0x2cec <_ZN14Adafruit_PN5329spi_writeEh+0x42>
    2cf4:	80 ff       	sbrs	r24, 0
    2cf6:	02 c0       	rjmp	.+4      	; 0x2cfc <_ZN14Adafruit_PN5329spi_writeEh+0x52>
    2cf8:	61 e0       	ldi	r22, 0x01	; 1
    2cfa:	01 c0       	rjmp	.+2      	; 0x2cfe <_ZN14Adafruit_PN5329spi_writeEh+0x54>
    2cfc:	60 e0       	ldi	r22, 0x00	; 0
    2cfe:	8a 81       	ldd	r24, Y+2	; 0x02
    2d00:	0e 94 21 3d 	call	0x7a42	; 0x7a42 <digitalWrite>
    2d04:	61 e0       	ldi	r22, 0x01	; 1
    2d06:	89 81       	ldd	r24, Y+1	; 0x01
    2d08:	0e 94 21 3d 	call	0x7a42	; 0x7a42 <digitalWrite>
    2d0c:	ff ef       	ldi	r31, 0xFF	; 255
    2d0e:	ef 1a       	sub	r14, r31
    2d10:	ff 0a       	sbc	r15, r31
    2d12:	88 e0       	ldi	r24, 0x08	; 8
    2d14:	e8 16       	cp	r14, r24
    2d16:	f1 04       	cpc	r15, r1
    2d18:	11 f7       	brne	.-60     	; 0x2cde <_ZN14Adafruit_PN5329spi_writeEh+0x34>
    2d1a:	df 91       	pop	r29
    2d1c:	cf 91       	pop	r28
    2d1e:	1f 91       	pop	r17
    2d20:	0f 91       	pop	r16
    2d22:	ff 90       	pop	r15
    2d24:	ef 90       	pop	r14
    2d26:	08 95       	ret

00002d28 <_ZN14Adafruit_PN5328spi_readEv>:
    2d28:	cf 92       	push	r12
    2d2a:	df 92       	push	r13
    2d2c:	ef 92       	push	r14
    2d2e:	ff 92       	push	r15
    2d30:	1f 93       	push	r17
    2d32:	cf 93       	push	r28
    2d34:	df 93       	push	r29
    2d36:	fc 01       	movw	r30, r24
    2d38:	26 89       	ldd	r18, Z+22	; 0x16
    2d3a:	22 23       	and	r18, r18
    2d3c:	39 f0       	breq	.+14     	; 0x2d4c <_ZN14Adafruit_PN5328spi_readEv+0x24>
    2d3e:	1e bc       	out	0x2e, r1	; 46
    2d40:	00 00       	nop
    2d42:	0d b4       	in	r0, 0x2d	; 45
    2d44:	07 fe       	sbrs	r0, 7
    2d46:	fd cf       	rjmp	.-6      	; 0x2d42 <_ZN14Adafruit_PN5328spi_readEv+0x1a>
    2d48:	1e b5       	in	r17, 0x2e	; 46
    2d4a:	26 c0       	rjmp	.+76     	; 0x2d98 <_ZN14Adafruit_PN5328spi_readEv+0x70>
    2d4c:	ec 01       	movw	r28, r24
    2d4e:	61 e0       	ldi	r22, 0x01	; 1
    2d50:	81 81       	ldd	r24, Z+1	; 0x01
    2d52:	0e 94 21 3d 	call	0x7a42	; 0x7a42 <digitalWrite>
    2d56:	e1 2c       	mov	r14, r1
    2d58:	f1 2c       	mov	r15, r1
    2d5a:	10 e0       	ldi	r17, 0x00	; 0
    2d5c:	cc 24       	eor	r12, r12
    2d5e:	c3 94       	inc	r12
    2d60:	d1 2c       	mov	r13, r1
    2d62:	8b 81       	ldd	r24, Y+3	; 0x03
    2d64:	0e 94 4f 3d 	call	0x7a9e	; 0x7a9e <digitalRead>
    2d68:	89 2b       	or	r24, r25
    2d6a:	39 f0       	breq	.+14     	; 0x2d7a <_ZN14Adafruit_PN5328spi_readEv+0x52>
    2d6c:	c6 01       	movw	r24, r12
    2d6e:	0e 2c       	mov	r0, r14
    2d70:	01 c0       	rjmp	.+2      	; 0x2d74 <_ZN14Adafruit_PN5328spi_readEv+0x4c>
    2d72:	88 0f       	add	r24, r24
    2d74:	0a 94       	dec	r0
    2d76:	ea f7       	brpl	.-6      	; 0x2d72 <_ZN14Adafruit_PN5328spi_readEv+0x4a>
    2d78:	18 2b       	or	r17, r24
    2d7a:	60 e0       	ldi	r22, 0x00	; 0
    2d7c:	89 81       	ldd	r24, Y+1	; 0x01
    2d7e:	0e 94 21 3d 	call	0x7a42	; 0x7a42 <digitalWrite>
    2d82:	61 e0       	ldi	r22, 0x01	; 1
    2d84:	89 81       	ldd	r24, Y+1	; 0x01
    2d86:	0e 94 21 3d 	call	0x7a42	; 0x7a42 <digitalWrite>
    2d8a:	ff ef       	ldi	r31, 0xFF	; 255
    2d8c:	ef 1a       	sub	r14, r31
    2d8e:	ff 0a       	sbc	r15, r31
    2d90:	88 e0       	ldi	r24, 0x08	; 8
    2d92:	e8 16       	cp	r14, r24
    2d94:	f1 04       	cpc	r15, r1
    2d96:	29 f7       	brne	.-54     	; 0x2d62 <_ZN14Adafruit_PN5328spi_readEv+0x3a>
    2d98:	81 2f       	mov	r24, r17
    2d9a:	df 91       	pop	r29
    2d9c:	cf 91       	pop	r28
    2d9e:	1f 91       	pop	r17
    2da0:	ff 90       	pop	r15
    2da2:	ef 90       	pop	r14
    2da4:	df 90       	pop	r13
    2da6:	cf 90       	pop	r12
    2da8:	08 95       	ret

00002daa <_ZN14Adafruit_PN5327isreadyEv>:
    2daa:	1f 93       	push	r17
    2dac:	cf 93       	push	r28
    2dae:	df 93       	push	r29
    2db0:	ec 01       	movw	r28, r24
    2db2:	8d 89       	ldd	r24, Y+21	; 0x15
    2db4:	88 23       	and	r24, r24
    2db6:	09 f1       	breq	.+66     	; 0x2dfa <_ZN14Adafruit_PN5327isreadyEv+0x50>
    2db8:	8e 89       	ldd	r24, Y+22	; 0x16
    2dba:	88 23       	and	r24, r24
    2dbc:	19 f0       	breq	.+6      	; 0x2dc4 <_ZN14Adafruit_PN5327isreadyEv+0x1a>
    2dbe:	81 e7       	ldi	r24, 0x71	; 113
    2dc0:	90 e0       	ldi	r25, 0x00	; 0
    2dc2:	ab de       	rcall	.-682    	; 0x2b1a <_ZN8SPIClass16beginTransactionE11SPISettings>
    2dc4:	60 e0       	ldi	r22, 0x00	; 0
    2dc6:	88 81       	ld	r24, Y
    2dc8:	0e 94 21 3d 	call	0x7a42	; 0x7a42 <digitalWrite>
    2dcc:	62 e0       	ldi	r22, 0x02	; 2
    2dce:	70 e0       	ldi	r23, 0x00	; 0
    2dd0:	80 e0       	ldi	r24, 0x00	; 0
    2dd2:	90 e0       	ldi	r25, 0x00	; 0
    2dd4:	0e 94 3d 3c 	call	0x787a	; 0x787a <delay>
    2dd8:	62 e0       	ldi	r22, 0x02	; 2
    2dda:	ce 01       	movw	r24, r28
    2ddc:	66 df       	rcall	.-308    	; 0x2caa <_ZN14Adafruit_PN5329spi_writeEh>
    2dde:	ce 01       	movw	r24, r28
    2de0:	a3 df       	rcall	.-186    	; 0x2d28 <_ZN14Adafruit_PN5328spi_readEv>
    2de2:	18 2f       	mov	r17, r24
    2de4:	61 e0       	ldi	r22, 0x01	; 1
    2de6:	88 81       	ld	r24, Y
    2de8:	0e 94 21 3d 	call	0x7a42	; 0x7a42 <digitalWrite>
    2dec:	8e 89       	ldd	r24, Y+22	; 0x16
    2dee:	81 11       	cpse	r24, r1
    2df0:	ae de       	rcall	.-676    	; 0x2b4e <_ZN8SPIClass14endTransactionEv>
    2df2:	91 e0       	ldi	r25, 0x01	; 1
    2df4:	11 30       	cpi	r17, 0x01	; 1
    2df6:	31 f4       	brne	.+12     	; 0x2e04 <_ZN14Adafruit_PN5327isreadyEv+0x5a>
    2df8:	06 c0       	rjmp	.+12     	; 0x2e06 <_ZN14Adafruit_PN5327isreadyEv+0x5c>
    2dfa:	8c 81       	ldd	r24, Y+4	; 0x04
    2dfc:	0e 94 4f 3d 	call	0x7a9e	; 0x7a9e <digitalRead>
    2e00:	91 e0       	ldi	r25, 0x01	; 1
    2e02:	81 11       	cpse	r24, r1
    2e04:	90 e0       	ldi	r25, 0x00	; 0
    2e06:	89 2f       	mov	r24, r25
    2e08:	df 91       	pop	r29
    2e0a:	cf 91       	pop	r28
    2e0c:	1f 91       	pop	r17
    2e0e:	08 95       	ret

00002e10 <_ZN14Adafruit_PN5329waitreadyEj>:
    2e10:	cf 92       	push	r12
    2e12:	df 92       	push	r13
    2e14:	ef 92       	push	r14
    2e16:	ff 92       	push	r15
    2e18:	1f 93       	push	r17
    2e1a:	cf 93       	push	r28
    2e1c:	df 93       	push	r29
    2e1e:	6c 01       	movw	r12, r24
    2e20:	7b 01       	movw	r14, r22
    2e22:	c0 e0       	ldi	r28, 0x00	; 0
    2e24:	d0 e0       	ldi	r29, 0x00	; 0
    2e26:	c6 01       	movw	r24, r12
    2e28:	c0 df       	rcall	.-128    	; 0x2daa <_ZN14Adafruit_PN5327isreadyEv>
    2e2a:	18 2f       	mov	r17, r24
    2e2c:	81 11       	cpse	r24, r1
    2e2e:	15 c0       	rjmp	.+42     	; 0x2e5a <_ZN14Adafruit_PN5329waitreadyEj+0x4a>
    2e30:	e1 14       	cp	r14, r1
    2e32:	f1 04       	cpc	r15, r1
    2e34:	59 f0       	breq	.+22     	; 0x2e4c <_ZN14Adafruit_PN5329waitreadyEj+0x3c>
    2e36:	2a 96       	adiw	r28, 0x0a	; 10
    2e38:	ec 16       	cp	r14, r28
    2e3a:	fd 06       	cpc	r15, r29
    2e3c:	38 f4       	brcc	.+14     	; 0x2e4c <_ZN14Adafruit_PN5329waitreadyEj+0x3c>
    2e3e:	6b eb       	ldi	r22, 0xBB	; 187
    2e40:	78 e0       	ldi	r23, 0x08	; 8
    2e42:	8f e4       	ldi	r24, 0x4F	; 79
    2e44:	9d e0       	ldi	r25, 0x0D	; 13
    2e46:	0e 94 39 3b 	call	0x7672	; 0x7672 <_ZN5Print7printlnEPKc>
    2e4a:	07 c0       	rjmp	.+14     	; 0x2e5a <_ZN14Adafruit_PN5329waitreadyEj+0x4a>
    2e4c:	6a e0       	ldi	r22, 0x0A	; 10
    2e4e:	70 e0       	ldi	r23, 0x00	; 0
    2e50:	80 e0       	ldi	r24, 0x00	; 0
    2e52:	90 e0       	ldi	r25, 0x00	; 0
    2e54:	0e 94 3d 3c 	call	0x787a	; 0x787a <delay>
    2e58:	e6 cf       	rjmp	.-52     	; 0x2e26 <_ZN14Adafruit_PN5329waitreadyEj+0x16>
    2e5a:	81 2f       	mov	r24, r17
    2e5c:	df 91       	pop	r29
    2e5e:	cf 91       	pop	r28
    2e60:	1f 91       	pop	r17
    2e62:	ff 90       	pop	r15
    2e64:	ef 90       	pop	r14
    2e66:	df 90       	pop	r13
    2e68:	cf 90       	pop	r12
    2e6a:	08 95       	ret

00002e6c <_ZN14Adafruit_PN5328readdataEPhh>:
    2e6c:	cf 92       	push	r12
    2e6e:	df 92       	push	r13
    2e70:	ef 92       	push	r14
    2e72:	ff 92       	push	r15
    2e74:	0f 93       	push	r16
    2e76:	1f 93       	push	r17
    2e78:	cf 93       	push	r28
    2e7a:	df 93       	push	r29
    2e7c:	ec 01       	movw	r28, r24
    2e7e:	6b 01       	movw	r12, r22
    2e80:	f4 2e       	mov	r15, r20
    2e82:	8d 89       	ldd	r24, Y+21	; 0x15
    2e84:	04 2f       	mov	r16, r20
    2e86:	10 e0       	ldi	r17, 0x00	; 0
    2e88:	88 23       	and	r24, r24
    2e8a:	a9 f1       	breq	.+106    	; 0x2ef6 <_ZN14Adafruit_PN5328readdataEPhh+0x8a>
    2e8c:	8e 89       	ldd	r24, Y+22	; 0x16
    2e8e:	88 23       	and	r24, r24
    2e90:	19 f0       	breq	.+6      	; 0x2e98 <_ZN14Adafruit_PN5328readdataEPhh+0x2c>
    2e92:	81 e7       	ldi	r24, 0x71	; 113
    2e94:	90 e0       	ldi	r25, 0x00	; 0
    2e96:	41 de       	rcall	.-894    	; 0x2b1a <_ZN8SPIClass16beginTransactionE11SPISettings>
    2e98:	60 e0       	ldi	r22, 0x00	; 0
    2e9a:	88 81       	ld	r24, Y
    2e9c:	0e 94 21 3d 	call	0x7a42	; 0x7a42 <digitalWrite>
    2ea0:	62 e0       	ldi	r22, 0x02	; 2
    2ea2:	70 e0       	ldi	r23, 0x00	; 0
    2ea4:	80 e0       	ldi	r24, 0x00	; 0
    2ea6:	90 e0       	ldi	r25, 0x00	; 0
    2ea8:	0e 94 3d 3c 	call	0x787a	; 0x787a <delay>
    2eac:	63 e0       	ldi	r22, 0x03	; 3
    2eae:	ce 01       	movw	r24, r28
    2eb0:	fc de       	rcall	.-520    	; 0x2caa <_ZN14Adafruit_PN5329spi_writeEh>
    2eb2:	76 01       	movw	r14, r12
    2eb4:	0c 0d       	add	r16, r12
    2eb6:	1d 1d       	adc	r17, r13
    2eb8:	0e 15       	cp	r16, r14
    2eba:	1f 05       	cpc	r17, r15
    2ebc:	61 f0       	breq	.+24     	; 0x2ed6 <_ZN14Adafruit_PN5328readdataEPhh+0x6a>
    2ebe:	61 e0       	ldi	r22, 0x01	; 1
    2ec0:	70 e0       	ldi	r23, 0x00	; 0
    2ec2:	80 e0       	ldi	r24, 0x00	; 0
    2ec4:	90 e0       	ldi	r25, 0x00	; 0
    2ec6:	0e 94 3d 3c 	call	0x787a	; 0x787a <delay>
    2eca:	ce 01       	movw	r24, r28
    2ecc:	2d df       	rcall	.-422    	; 0x2d28 <_ZN14Adafruit_PN5328spi_readEv>
    2ece:	f7 01       	movw	r30, r14
    2ed0:	81 93       	st	Z+, r24
    2ed2:	7f 01       	movw	r14, r30
    2ed4:	f1 cf       	rjmp	.-30     	; 0x2eb8 <_ZN14Adafruit_PN5328readdataEPhh+0x4c>
    2ed6:	61 e0       	ldi	r22, 0x01	; 1
    2ed8:	88 81       	ld	r24, Y
    2eda:	0e 94 21 3d 	call	0x7a42	; 0x7a42 <digitalWrite>
    2ede:	8e 89       	ldd	r24, Y+22	; 0x16
    2ee0:	88 23       	and	r24, r24
    2ee2:	61 f1       	breq	.+88     	; 0x2f3c <_ZN14Adafruit_PN5328readdataEPhh+0xd0>
    2ee4:	df 91       	pop	r29
    2ee6:	cf 91       	pop	r28
    2ee8:	1f 91       	pop	r17
    2eea:	0f 91       	pop	r16
    2eec:	ff 90       	pop	r15
    2eee:	ef 90       	pop	r14
    2ef0:	df 90       	pop	r13
    2ef2:	cf 90       	pop	r12
    2ef4:	2c ce       	rjmp	.-936    	; 0x2b4e <_ZN8SPIClass14endTransactionEv>
    2ef6:	62 e0       	ldi	r22, 0x02	; 2
    2ef8:	70 e0       	ldi	r23, 0x00	; 0
    2efa:	80 e0       	ldi	r24, 0x00	; 0
    2efc:	90 e0       	ldi	r25, 0x00	; 0
    2efe:	0e 94 3d 3c 	call	0x787a	; 0x787a <delay>
    2f02:	42 e0       	ldi	r20, 0x02	; 2
    2f04:	4f 0d       	add	r20, r15
    2f06:	64 e2       	ldi	r22, 0x24	; 36
    2f08:	89 ef       	ldi	r24, 0xF9	; 249
    2f0a:	9c e0       	ldi	r25, 0x0C	; 12
    2f0c:	0e 94 70 38 	call	0x70e0	; 0x70e0 <_ZN7TwoWire11requestFromEhh>
    2f10:	89 ef       	ldi	r24, 0xF9	; 249
    2f12:	9c e0       	ldi	r25, 0x0C	; 12
    2f14:	0e 94 1c 37 	call	0x6e38	; 0x6e38 <_ZN7TwoWire4readEv>
    2f18:	e6 01       	movw	r28, r12
    2f1a:	0c 0d       	add	r16, r12
    2f1c:	1d 1d       	adc	r17, r13
    2f1e:	c0 17       	cp	r28, r16
    2f20:	d1 07       	cpc	r29, r17
    2f22:	61 f0       	breq	.+24     	; 0x2f3c <_ZN14Adafruit_PN5328readdataEPhh+0xd0>
    2f24:	61 e0       	ldi	r22, 0x01	; 1
    2f26:	70 e0       	ldi	r23, 0x00	; 0
    2f28:	80 e0       	ldi	r24, 0x00	; 0
    2f2a:	90 e0       	ldi	r25, 0x00	; 0
    2f2c:	0e 94 3d 3c 	call	0x787a	; 0x787a <delay>
    2f30:	89 ef       	ldi	r24, 0xF9	; 249
    2f32:	9c e0       	ldi	r25, 0x0C	; 12
    2f34:	0e 94 1c 37 	call	0x6e38	; 0x6e38 <_ZN7TwoWire4readEv>
    2f38:	89 93       	st	Y+, r24
    2f3a:	f1 cf       	rjmp	.-30     	; 0x2f1e <_ZN14Adafruit_PN5328readdataEPhh+0xb2>
    2f3c:	df 91       	pop	r29
    2f3e:	cf 91       	pop	r28
    2f40:	1f 91       	pop	r17
    2f42:	0f 91       	pop	r16
    2f44:	ff 90       	pop	r15
    2f46:	ef 90       	pop	r14
    2f48:	df 90       	pop	r13
    2f4a:	cf 90       	pop	r12
    2f4c:	08 95       	ret

00002f4e <_ZN14Adafruit_PN5327readackEv>:
    2f4e:	cf 93       	push	r28
    2f50:	df 93       	push	r29
    2f52:	00 d0       	rcall	.+0      	; 0x2f54 <_ZN14Adafruit_PN5327readackEv+0x6>
    2f54:	00 d0       	rcall	.+0      	; 0x2f56 <_ZN14Adafruit_PN5327readackEv+0x8>
    2f56:	00 d0       	rcall	.+0      	; 0x2f58 <_ZN14Adafruit_PN5327readackEv+0xa>
    2f58:	cd b7       	in	r28, 0x3d	; 61
    2f5a:	de b7       	in	r29, 0x3e	; 62
    2f5c:	46 e0       	ldi	r20, 0x06	; 6
    2f5e:	be 01       	movw	r22, r28
    2f60:	6f 5f       	subi	r22, 0xFF	; 255
    2f62:	7f 4f       	sbci	r23, 0xFF	; 255
    2f64:	83 df       	rcall	.-250    	; 0x2e6c <_ZN14Adafruit_PN5328readdataEPhh>
    2f66:	46 e0       	ldi	r20, 0x06	; 6
    2f68:	50 e0       	ldi	r21, 0x00	; 0
    2f6a:	64 e4       	ldi	r22, 0x44	; 68
    2f6c:	71 e0       	ldi	r23, 0x01	; 1
    2f6e:	ce 01       	movw	r24, r28
    2f70:	01 96       	adiw	r24, 0x01	; 1
    2f72:	0e 94 ef 44 	call	0x89de	; 0x89de <strncmp>
    2f76:	21 e0       	ldi	r18, 0x01	; 1
    2f78:	89 2b       	or	r24, r25
    2f7a:	09 f0       	breq	.+2      	; 0x2f7e <_ZN14Adafruit_PN5327readackEv+0x30>
    2f7c:	20 e0       	ldi	r18, 0x00	; 0
    2f7e:	82 2f       	mov	r24, r18
    2f80:	26 96       	adiw	r28, 0x06	; 6
    2f82:	0f b6       	in	r0, 0x3f	; 63
    2f84:	f8 94       	cli
    2f86:	de bf       	out	0x3e, r29	; 62
    2f88:	0f be       	out	0x3f, r0	; 63
    2f8a:	cd bf       	out	0x3d, r28	; 61
    2f8c:	df 91       	pop	r29
    2f8e:	cf 91       	pop	r28
    2f90:	08 95       	ret

00002f92 <_ZL8i2c_sendh>:
    2f92:	68 2f       	mov	r22, r24
    2f94:	89 ef       	ldi	r24, 0xF9	; 249
    2f96:	9c e0       	ldi	r25, 0x0C	; 12
    2f98:	0c 94 a2 37 	jmp	0x6f44	; 0x6f44 <_ZN7TwoWire5writeEh>

00002f9c <_ZN14Adafruit_PN53212writecommandEPhh>:
    2f9c:	af 92       	push	r10
    2f9e:	bf 92       	push	r11
    2fa0:	cf 92       	push	r12
    2fa2:	df 92       	push	r13
    2fa4:	ef 92       	push	r14
    2fa6:	ff 92       	push	r15
    2fa8:	0f 93       	push	r16
    2faa:	1f 93       	push	r17
    2fac:	cf 93       	push	r28
    2fae:	df 93       	push	r29
    2fb0:	7c 01       	movw	r14, r24
    2fb2:	8b 01       	movw	r16, r22
    2fb4:	fc 01       	movw	r30, r24
    2fb6:	85 89       	ldd	r24, Z+21	; 0x15
    2fb8:	c1 e0       	ldi	r28, 0x01	; 1
    2fba:	c4 0f       	add	r28, r20
    2fbc:	88 23       	and	r24, r24
    2fbe:	09 f4       	brne	.+2      	; 0x2fc2 <_ZN14Adafruit_PN53212writecommandEPhh+0x26>
    2fc0:	58 c0       	rjmp	.+176    	; 0x3072 <_ZN14Adafruit_PN53212writecommandEPhh+0xd6>
    2fc2:	86 89       	ldd	r24, Z+22	; 0x16
    2fc4:	88 23       	and	r24, r24
    2fc6:	19 f0       	breq	.+6      	; 0x2fce <_ZN14Adafruit_PN53212writecommandEPhh+0x32>
    2fc8:	81 e7       	ldi	r24, 0x71	; 113
    2fca:	90 e0       	ldi	r25, 0x00	; 0
    2fcc:	a6 dd       	rcall	.-1204   	; 0x2b1a <_ZN8SPIClass16beginTransactionE11SPISettings>
    2fce:	60 e0       	ldi	r22, 0x00	; 0
    2fd0:	f7 01       	movw	r30, r14
    2fd2:	80 81       	ld	r24, Z
    2fd4:	0e 94 21 3d 	call	0x7a42	; 0x7a42 <digitalWrite>
    2fd8:	62 e0       	ldi	r22, 0x02	; 2
    2fda:	70 e0       	ldi	r23, 0x00	; 0
    2fdc:	80 e0       	ldi	r24, 0x00	; 0
    2fde:	90 e0       	ldi	r25, 0x00	; 0
    2fe0:	0e 94 3d 3c 	call	0x787a	; 0x787a <delay>
    2fe4:	61 e0       	ldi	r22, 0x01	; 1
    2fe6:	c7 01       	movw	r24, r14
    2fe8:	60 de       	rcall	.-832    	; 0x2caa <_ZN14Adafruit_PN5329spi_writeEh>
    2fea:	60 e0       	ldi	r22, 0x00	; 0
    2fec:	c7 01       	movw	r24, r14
    2fee:	5d de       	rcall	.-838    	; 0x2caa <_ZN14Adafruit_PN5329spi_writeEh>
    2ff0:	60 e0       	ldi	r22, 0x00	; 0
    2ff2:	c7 01       	movw	r24, r14
    2ff4:	5a de       	rcall	.-844    	; 0x2caa <_ZN14Adafruit_PN5329spi_writeEh>
    2ff6:	6f ef       	ldi	r22, 0xFF	; 255
    2ff8:	c7 01       	movw	r24, r14
    2ffa:	57 de       	rcall	.-850    	; 0x2caa <_ZN14Adafruit_PN5329spi_writeEh>
    2ffc:	6c 2f       	mov	r22, r28
    2ffe:	c7 01       	movw	r24, r14
    3000:	54 de       	rcall	.-856    	; 0x2caa <_ZN14Adafruit_PN5329spi_writeEh>
    3002:	6c 2f       	mov	r22, r28
    3004:	61 95       	neg	r22
    3006:	c7 01       	movw	r24, r14
    3008:	50 de       	rcall	.-864    	; 0x2caa <_ZN14Adafruit_PN5329spi_writeEh>
    300a:	64 ed       	ldi	r22, 0xD4	; 212
    300c:	c7 01       	movw	r24, r14
    300e:	4d de       	rcall	.-870    	; 0x2caa <_ZN14Adafruit_PN5329spi_writeEh>
    3010:	c1 2c       	mov	r12, r1
    3012:	93 ed       	ldi	r25, 0xD3	; 211
    3014:	d9 2e       	mov	r13, r25
    3016:	d0 e0       	ldi	r29, 0x00	; 0
    3018:	21 97       	sbiw	r28, 0x01	; 1
    301a:	ac 2c       	mov	r10, r12
    301c:	b1 2c       	mov	r11, r1
    301e:	ac 16       	cp	r10, r28
    3020:	bd 06       	cpc	r11, r29
    3022:	5c f4       	brge	.+22     	; 0x303a <_ZN14Adafruit_PN53212writecommandEPhh+0x9e>
    3024:	a0 0e       	add	r10, r16
    3026:	b1 1e       	adc	r11, r17
    3028:	f5 01       	movw	r30, r10
    302a:	60 81       	ld	r22, Z
    302c:	c7 01       	movw	r24, r14
    302e:	3d de       	rcall	.-902    	; 0x2caa <_ZN14Adafruit_PN5329spi_writeEh>
    3030:	f5 01       	movw	r30, r10
    3032:	80 81       	ld	r24, Z
    3034:	d8 0e       	add	r13, r24
    3036:	c3 94       	inc	r12
    3038:	f0 cf       	rjmp	.-32     	; 0x301a <_ZN14Adafruit_PN53212writecommandEPhh+0x7e>
    303a:	6d 2d       	mov	r22, r13
    303c:	60 95       	com	r22
    303e:	c7 01       	movw	r24, r14
    3040:	34 de       	rcall	.-920    	; 0x2caa <_ZN14Adafruit_PN5329spi_writeEh>
    3042:	60 e0       	ldi	r22, 0x00	; 0
    3044:	c7 01       	movw	r24, r14
    3046:	31 de       	rcall	.-926    	; 0x2caa <_ZN14Adafruit_PN5329spi_writeEh>
    3048:	61 e0       	ldi	r22, 0x01	; 1
    304a:	f7 01       	movw	r30, r14
    304c:	80 81       	ld	r24, Z
    304e:	0e 94 21 3d 	call	0x7a42	; 0x7a42 <digitalWrite>
    3052:	f7 01       	movw	r30, r14
    3054:	86 89       	ldd	r24, Z+22	; 0x16
    3056:	88 23       	and	r24, r24
    3058:	09 f4       	brne	.+2      	; 0x305c <_ZN14Adafruit_PN53212writecommandEPhh+0xc0>
    305a:	4b c0       	rjmp	.+150    	; 0x30f2 <_ZN14Adafruit_PN53212writecommandEPhh+0x156>
    305c:	df 91       	pop	r29
    305e:	cf 91       	pop	r28
    3060:	1f 91       	pop	r17
    3062:	0f 91       	pop	r16
    3064:	ff 90       	pop	r15
    3066:	ef 90       	pop	r14
    3068:	df 90       	pop	r13
    306a:	cf 90       	pop	r12
    306c:	bf 90       	pop	r11
    306e:	af 90       	pop	r10
    3070:	6e cd       	rjmp	.-1316   	; 0x2b4e <_ZN8SPIClass14endTransactionEv>
    3072:	62 e0       	ldi	r22, 0x02	; 2
    3074:	70 e0       	ldi	r23, 0x00	; 0
    3076:	80 e0       	ldi	r24, 0x00	; 0
    3078:	90 e0       	ldi	r25, 0x00	; 0
    307a:	0e 94 3d 3c 	call	0x787a	; 0x787a <delay>
    307e:	64 e2       	ldi	r22, 0x24	; 36
    3080:	70 e0       	ldi	r23, 0x00	; 0
    3082:	89 ef       	ldi	r24, 0xF9	; 249
    3084:	9c e0       	ldi	r25, 0x0C	; 12
    3086:	0e 94 fd 37 	call	0x6ffa	; 0x6ffa <_ZN7TwoWire17beginTransmissionEi>
    308a:	80 e0       	ldi	r24, 0x00	; 0
    308c:	82 df       	rcall	.-252    	; 0x2f92 <_ZL8i2c_sendh>
    308e:	80 e0       	ldi	r24, 0x00	; 0
    3090:	80 df       	rcall	.-256    	; 0x2f92 <_ZL8i2c_sendh>
    3092:	8f ef       	ldi	r24, 0xFF	; 255
    3094:	7e df       	rcall	.-260    	; 0x2f92 <_ZL8i2c_sendh>
    3096:	8c 2f       	mov	r24, r28
    3098:	7c df       	rcall	.-264    	; 0x2f92 <_ZL8i2c_sendh>
    309a:	8c 2f       	mov	r24, r28
    309c:	81 95       	neg	r24
    309e:	79 df       	rcall	.-270    	; 0x2f92 <_ZL8i2c_sendh>
    30a0:	84 ed       	ldi	r24, 0xD4	; 212
    30a2:	77 df       	rcall	.-274    	; 0x2f92 <_ZL8i2c_sendh>
    30a4:	b1 2c       	mov	r11, r1
    30a6:	83 ed       	ldi	r24, 0xD3	; 211
    30a8:	d8 2e       	mov	r13, r24
    30aa:	d0 e0       	ldi	r29, 0x00	; 0
    30ac:	21 97       	sbiw	r28, 0x01	; 1
    30ae:	eb 2c       	mov	r14, r11
    30b0:	f1 2c       	mov	r15, r1
    30b2:	ec 16       	cp	r14, r28
    30b4:	fd 06       	cpc	r15, r29
    30b6:	54 f4       	brge	.+20     	; 0x30cc <_ZN14Adafruit_PN53212writecommandEPhh+0x130>
    30b8:	e0 0e       	add	r14, r16
    30ba:	f1 1e       	adc	r15, r17
    30bc:	f7 01       	movw	r30, r14
    30be:	80 81       	ld	r24, Z
    30c0:	68 df       	rcall	.-304    	; 0x2f92 <_ZL8i2c_sendh>
    30c2:	f7 01       	movw	r30, r14
    30c4:	80 81       	ld	r24, Z
    30c6:	d8 0e       	add	r13, r24
    30c8:	b3 94       	inc	r11
    30ca:	f1 cf       	rjmp	.-30     	; 0x30ae <_ZN14Adafruit_PN53212writecommandEPhh+0x112>
    30cc:	8d 2d       	mov	r24, r13
    30ce:	80 95       	com	r24
    30d0:	60 df       	rcall	.-320    	; 0x2f92 <_ZL8i2c_sendh>
    30d2:	80 e0       	ldi	r24, 0x00	; 0
    30d4:	5e df       	rcall	.-324    	; 0x2f92 <_ZL8i2c_sendh>
    30d6:	89 ef       	ldi	r24, 0xF9	; 249
    30d8:	9c e0       	ldi	r25, 0x0C	; 12
    30da:	df 91       	pop	r29
    30dc:	cf 91       	pop	r28
    30de:	1f 91       	pop	r17
    30e0:	0f 91       	pop	r16
    30e2:	ff 90       	pop	r15
    30e4:	ef 90       	pop	r14
    30e6:	df 90       	pop	r13
    30e8:	cf 90       	pop	r12
    30ea:	bf 90       	pop	r11
    30ec:	af 90       	pop	r10
    30ee:	0c 94 74 38 	jmp	0x70e8	; 0x70e8 <_ZN7TwoWire15endTransmissionEv>
    30f2:	df 91       	pop	r29
    30f4:	cf 91       	pop	r28
    30f6:	1f 91       	pop	r17
    30f8:	0f 91       	pop	r16
    30fa:	ff 90       	pop	r15
    30fc:	ef 90       	pop	r14
    30fe:	df 90       	pop	r13
    3100:	cf 90       	pop	r12
    3102:	bf 90       	pop	r11
    3104:	af 90       	pop	r10
    3106:	08 95       	ret

00003108 <_ZN14Adafruit_PN53219sendCommandCheckAckEPhhj>:
    3108:	0f 93       	push	r16
    310a:	1f 93       	push	r17
    310c:	cf 93       	push	r28
    310e:	df 93       	push	r29
    3110:	ec 01       	movw	r28, r24
    3112:	89 01       	movw	r16, r18
    3114:	43 df       	rcall	.-378    	; 0x2f9c <_ZN14Adafruit_PN53212writecommandEPhh>
    3116:	b8 01       	movw	r22, r16
    3118:	ce 01       	movw	r24, r28
    311a:	7a de       	rcall	.-780    	; 0x2e10 <_ZN14Adafruit_PN5329waitreadyEj>
    311c:	81 11       	cpse	r24, r1
    311e:	02 c0       	rjmp	.+4      	; 0x3124 <_ZN14Adafruit_PN53219sendCommandCheckAckEPhhj+0x1c>
    3120:	80 e0       	ldi	r24, 0x00	; 0
    3122:	0e c0       	rjmp	.+28     	; 0x3140 <_ZN14Adafruit_PN53219sendCommandCheckAckEPhhj+0x38>
    3124:	ce 01       	movw	r24, r28
    3126:	13 df       	rcall	.-474    	; 0x2f4e <_ZN14Adafruit_PN5327readackEv>
    3128:	88 23       	and	r24, r24
    312a:	d1 f3       	breq	.-12     	; 0x3120 <_ZN14Adafruit_PN53219sendCommandCheckAckEPhhj+0x18>
    312c:	9d 89       	ldd	r25, Y+21	; 0x15
    312e:	99 23       	and	r25, r25
    3130:	39 f0       	breq	.+14     	; 0x3140 <_ZN14Adafruit_PN53219sendCommandCheckAckEPhhj+0x38>
    3132:	b8 01       	movw	r22, r16
    3134:	ce 01       	movw	r24, r28
    3136:	df 91       	pop	r29
    3138:	cf 91       	pop	r28
    313a:	1f 91       	pop	r17
    313c:	0f 91       	pop	r16
    313e:	68 ce       	rjmp	.-816    	; 0x2e10 <_ZN14Adafruit_PN5329waitreadyEj>
    3140:	df 91       	pop	r29
    3142:	cf 91       	pop	r28
    3144:	1f 91       	pop	r17
    3146:	0f 91       	pop	r16
    3148:	08 95       	ret

0000314a <_ZN14Adafruit_PN5325beginEv>:
    314a:	cf 93       	push	r28
    314c:	df 93       	push	r29
    314e:	ec 01       	movw	r28, r24
    3150:	8d 89       	ldd	r24, Y+21	; 0x15
    3152:	88 23       	and	r24, r24
    3154:	31 f1       	breq	.+76     	; 0x31a2 <_ZN14Adafruit_PN5325beginEv+0x58>
    3156:	8e 89       	ldd	r24, Y+22	; 0x16
    3158:	88 23       	and	r24, r24
    315a:	29 f0       	breq	.+10     	; 0x3166 <_ZN14Adafruit_PN5325beginEv+0x1c>
    315c:	0e 94 91 34 	call	0x6922	; 0x6922 <_ZN8SPIClass5beginEv>
    3160:	81 e7       	ldi	r24, 0x71	; 113
    3162:	90 e0       	ldi	r25, 0x00	; 0
    3164:	da dc       	rcall	.-1612   	; 0x2b1a <_ZN8SPIClass16beginTransactionE11SPISettings>
    3166:	60 e0       	ldi	r22, 0x00	; 0
    3168:	88 81       	ld	r24, Y
    316a:	0e 94 21 3d 	call	0x7a42	; 0x7a42 <digitalWrite>
    316e:	68 ee       	ldi	r22, 0xE8	; 232
    3170:	73 e0       	ldi	r23, 0x03	; 3
    3172:	80 e0       	ldi	r24, 0x00	; 0
    3174:	90 e0       	ldi	r25, 0x00	; 0
    3176:	0e 94 3d 3c 	call	0x787a	; 0x787a <delay>
    317a:	82 e0       	ldi	r24, 0x02	; 2
    317c:	80 93 f9 0b 	sts	0x0BF9, r24	; 0x800bf9 <pn532_packetbuffer>
    3180:	28 ee       	ldi	r18, 0xE8	; 232
    3182:	33 e0       	ldi	r19, 0x03	; 3
    3184:	41 e0       	ldi	r20, 0x01	; 1
    3186:	69 ef       	ldi	r22, 0xF9	; 249
    3188:	7b e0       	ldi	r23, 0x0B	; 11
    318a:	ce 01       	movw	r24, r28
    318c:	bd df       	rcall	.-134    	; 0x3108 <_ZN14Adafruit_PN53219sendCommandCheckAckEPhhj>
    318e:	61 e0       	ldi	r22, 0x01	; 1
    3190:	88 81       	ld	r24, Y
    3192:	0e 94 21 3d 	call	0x7a42	; 0x7a42 <digitalWrite>
    3196:	8e 89       	ldd	r24, Y+22	; 0x16
    3198:	88 23       	and	r24, r24
    319a:	09 f1       	breq	.+66     	; 0x31de <_ZN14Adafruit_PN5325beginEv+0x94>
    319c:	df 91       	pop	r29
    319e:	cf 91       	pop	r28
    31a0:	d6 cc       	rjmp	.-1620   	; 0x2b4e <_ZN8SPIClass14endTransactionEv>
    31a2:	89 ef       	ldi	r24, 0xF9	; 249
    31a4:	9c e0       	ldi	r25, 0x0C	; 12
    31a6:	0e 94 e0 37 	call	0x6fc0	; 0x6fc0 <_ZN7TwoWire5beginEv>
    31aa:	61 e0       	ldi	r22, 0x01	; 1
    31ac:	8d 81       	ldd	r24, Y+5	; 0x05
    31ae:	0e 94 21 3d 	call	0x7a42	; 0x7a42 <digitalWrite>
    31b2:	60 e0       	ldi	r22, 0x00	; 0
    31b4:	8d 81       	ldd	r24, Y+5	; 0x05
    31b6:	0e 94 21 3d 	call	0x7a42	; 0x7a42 <digitalWrite>
    31ba:	60 e9       	ldi	r22, 0x90	; 144
    31bc:	71 e0       	ldi	r23, 0x01	; 1
    31be:	80 e0       	ldi	r24, 0x00	; 0
    31c0:	90 e0       	ldi	r25, 0x00	; 0
    31c2:	0e 94 3d 3c 	call	0x787a	; 0x787a <delay>
    31c6:	61 e0       	ldi	r22, 0x01	; 1
    31c8:	8d 81       	ldd	r24, Y+5	; 0x05
    31ca:	0e 94 21 3d 	call	0x7a42	; 0x7a42 <digitalWrite>
    31ce:	6a e0       	ldi	r22, 0x0A	; 10
    31d0:	70 e0       	ldi	r23, 0x00	; 0
    31d2:	80 e0       	ldi	r24, 0x00	; 0
    31d4:	90 e0       	ldi	r25, 0x00	; 0
    31d6:	df 91       	pop	r29
    31d8:	cf 91       	pop	r28
    31da:	0c 94 3d 3c 	jmp	0x787a	; 0x787a <delay>
    31de:	df 91       	pop	r29
    31e0:	cf 91       	pop	r28
    31e2:	08 95       	ret

000031e4 <_ZN14Adafruit_PN53218getFirmwareVersionEv>:
    31e4:	cf 93       	push	r28
    31e6:	df 93       	push	r29
    31e8:	ec 01       	movw	r28, r24
    31ea:	82 e0       	ldi	r24, 0x02	; 2
    31ec:	80 93 f9 0b 	sts	0x0BF9, r24	; 0x800bf9 <pn532_packetbuffer>
    31f0:	28 ee       	ldi	r18, 0xE8	; 232
    31f2:	33 e0       	ldi	r19, 0x03	; 3
    31f4:	41 e0       	ldi	r20, 0x01	; 1
    31f6:	69 ef       	ldi	r22, 0xF9	; 249
    31f8:	7b e0       	ldi	r23, 0x0B	; 11
    31fa:	ce 01       	movw	r24, r28
    31fc:	85 df       	rcall	.-246    	; 0x3108 <_ZN14Adafruit_PN53219sendCommandCheckAckEPhhj>
    31fe:	81 11       	cpse	r24, r1
    3200:	04 c0       	rjmp	.+8      	; 0x320a <_ZN14Adafruit_PN53218getFirmwareVersionEv+0x26>
    3202:	60 e0       	ldi	r22, 0x00	; 0
    3204:	70 e0       	ldi	r23, 0x00	; 0
    3206:	cb 01       	movw	r24, r22
    3208:	32 c0       	rjmp	.+100    	; 0x326e <_ZN14Adafruit_PN53218getFirmwareVersionEv+0x8a>
    320a:	4c e0       	ldi	r20, 0x0C	; 12
    320c:	69 ef       	ldi	r22, 0xF9	; 249
    320e:	7b e0       	ldi	r23, 0x0B	; 11
    3210:	ce 01       	movw	r24, r28
    3212:	2c de       	rcall	.-936    	; 0x2e6c <_ZN14Adafruit_PN5328readdataEPhh>
    3214:	46 e0       	ldi	r20, 0x06	; 6
    3216:	50 e0       	ldi	r21, 0x00	; 0
    3218:	6e e3       	ldi	r22, 0x3E	; 62
    321a:	71 e0       	ldi	r23, 0x01	; 1
    321c:	89 ef       	ldi	r24, 0xF9	; 249
    321e:	9b e0       	ldi	r25, 0x0B	; 11
    3220:	0e 94 ef 44 	call	0x89de	; 0x89de <strncmp>
    3224:	89 2b       	or	r24, r25
    3226:	69 f7       	brne	.-38     	; 0x3202 <_ZN14Adafruit_PN53218getFirmwareVersionEv+0x1e>
    3228:	8d 89       	ldd	r24, Y+21	; 0x15
    322a:	81 11       	cpse	r24, r1
    322c:	03 c0       	rjmp	.+6      	; 0x3234 <_ZN14Adafruit_PN53218getFirmwareVersionEv+0x50>
    322e:	e7 e0       	ldi	r30, 0x07	; 7
    3230:	f0 e0       	ldi	r31, 0x00	; 0
    3232:	02 c0       	rjmp	.+4      	; 0x3238 <_ZN14Adafruit_PN53218getFirmwareVersionEv+0x54>
    3234:	e6 e0       	ldi	r30, 0x06	; 6
    3236:	f0 e0       	ldi	r31, 0x00	; 0
    3238:	e7 50       	subi	r30, 0x07	; 7
    323a:	f4 4f       	sbci	r31, 0xF4	; 244
    323c:	60 81       	ld	r22, Z
    323e:	86 2f       	mov	r24, r22
    3240:	90 e0       	ldi	r25, 0x00	; 0
    3242:	a0 e0       	ldi	r26, 0x00	; 0
    3244:	b0 e0       	ldi	r27, 0x00	; 0
    3246:	ba 2f       	mov	r27, r26
    3248:	a9 2f       	mov	r26, r25
    324a:	98 2f       	mov	r25, r24
    324c:	88 27       	eor	r24, r24
    324e:	21 81       	ldd	r18, Z+1	; 0x01
    3250:	82 2b       	or	r24, r18
    3252:	ba 2f       	mov	r27, r26
    3254:	a9 2f       	mov	r26, r25
    3256:	98 2f       	mov	r25, r24
    3258:	88 27       	eor	r24, r24
    325a:	22 81       	ldd	r18, Z+2	; 0x02
    325c:	82 2b       	or	r24, r18
    325e:	ba 2f       	mov	r27, r26
    3260:	a9 2f       	mov	r26, r25
    3262:	98 2f       	mov	r25, r24
    3264:	88 27       	eor	r24, r24
    3266:	23 81       	ldd	r18, Z+3	; 0x03
    3268:	bc 01       	movw	r22, r24
    326a:	cd 01       	movw	r24, r26
    326c:	62 2b       	or	r22, r18
    326e:	df 91       	pop	r29
    3270:	cf 91       	pop	r28
    3272:	08 95       	ret

00003274 <_ZN14Adafruit_PN5329SAMConfigEv>:
    3274:	cf 93       	push	r28
    3276:	df 93       	push	r29
    3278:	ec 01       	movw	r28, r24
    327a:	94 e1       	ldi	r25, 0x14	; 20
    327c:	90 93 f9 0b 	sts	0x0BF9, r25	; 0x800bf9 <pn532_packetbuffer>
    3280:	81 e0       	ldi	r24, 0x01	; 1
    3282:	80 93 fa 0b 	sts	0x0BFA, r24	; 0x800bfa <pn532_packetbuffer+0x1>
    3286:	90 93 fb 0b 	sts	0x0BFB, r25	; 0x800bfb <pn532_packetbuffer+0x2>
    328a:	80 93 fc 0b 	sts	0x0BFC, r24	; 0x800bfc <pn532_packetbuffer+0x3>
    328e:	28 ee       	ldi	r18, 0xE8	; 232
    3290:	33 e0       	ldi	r19, 0x03	; 3
    3292:	44 e0       	ldi	r20, 0x04	; 4
    3294:	69 ef       	ldi	r22, 0xF9	; 249
    3296:	7b e0       	ldi	r23, 0x0B	; 11
    3298:	ce 01       	movw	r24, r28
    329a:	36 df       	rcall	.-404    	; 0x3108 <_ZN14Adafruit_PN53219sendCommandCheckAckEPhhj>
    329c:	88 23       	and	r24, r24
    329e:	a9 f0       	breq	.+42     	; 0x32ca <_ZN14Adafruit_PN5329SAMConfigEv+0x56>
    32a0:	48 e0       	ldi	r20, 0x08	; 8
    32a2:	69 ef       	ldi	r22, 0xF9	; 249
    32a4:	7b e0       	ldi	r23, 0x0B	; 11
    32a6:	ce 01       	movw	r24, r28
    32a8:	e1 dd       	rcall	.-1086   	; 0x2e6c <_ZN14Adafruit_PN5328readdataEPhh>
    32aa:	8d 89       	ldd	r24, Y+21	; 0x15
    32ac:	81 11       	cpse	r24, r1
    32ae:	03 c0       	rjmp	.+6      	; 0x32b6 <_ZN14Adafruit_PN5329SAMConfigEv+0x42>
    32b0:	86 e0       	ldi	r24, 0x06	; 6
    32b2:	90 e0       	ldi	r25, 0x00	; 0
    32b4:	02 c0       	rjmp	.+4      	; 0x32ba <_ZN14Adafruit_PN5329SAMConfigEv+0x46>
    32b6:	85 e0       	ldi	r24, 0x05	; 5
    32b8:	90 e0       	ldi	r25, 0x00	; 0
    32ba:	fc 01       	movw	r30, r24
    32bc:	e7 50       	subi	r30, 0x07	; 7
    32be:	f4 4f       	sbci	r31, 0xF4	; 244
    32c0:	81 e0       	ldi	r24, 0x01	; 1
    32c2:	90 81       	ld	r25, Z
    32c4:	95 31       	cpi	r25, 0x15	; 21
    32c6:	09 f0       	breq	.+2      	; 0x32ca <_ZN14Adafruit_PN5329SAMConfigEv+0x56>
    32c8:	80 e0       	ldi	r24, 0x00	; 0
    32ca:	df 91       	pop	r29
    32cc:	cf 91       	pop	r28
    32ce:	08 95       	ret

000032d0 <_ZN14Adafruit_PN53227setPassiveActivationRetriesEh>:
    32d0:	e9 ef       	ldi	r30, 0xF9	; 249
    32d2:	fb e0       	ldi	r31, 0x0B	; 11
    32d4:	22 e3       	ldi	r18, 0x32	; 50
    32d6:	20 83       	st	Z, r18
    32d8:	25 e0       	ldi	r18, 0x05	; 5
    32da:	21 83       	std	Z+1, r18	; 0x01
    32dc:	2f ef       	ldi	r18, 0xFF	; 255
    32de:	22 83       	std	Z+2, r18	; 0x02
    32e0:	21 e0       	ldi	r18, 0x01	; 1
    32e2:	23 83       	std	Z+3, r18	; 0x03
    32e4:	64 83       	std	Z+4, r22	; 0x04
    32e6:	28 ee       	ldi	r18, 0xE8	; 232
    32e8:	33 e0       	ldi	r19, 0x03	; 3
    32ea:	45 e0       	ldi	r20, 0x05	; 5
    32ec:	bf 01       	movw	r22, r30
    32ee:	0c cf       	rjmp	.-488    	; 0x3108 <_ZN14Adafruit_PN53219sendCommandCheckAckEPhhj>

000032f0 <_ZN14Adafruit_PN53219readPassiveTargetIDEhPhS0_j>:
    32f0:	af 92       	push	r10
    32f2:	bf 92       	push	r11
    32f4:	cf 92       	push	r12
    32f6:	df 92       	push	r13
    32f8:	ef 92       	push	r14
    32fa:	ff 92       	push	r15
    32fc:	0f 93       	push	r16
    32fe:	1f 93       	push	r17
    3300:	cf 93       	push	r28
    3302:	df 93       	push	r29
    3304:	ec 01       	movw	r28, r24
    3306:	7a 01       	movw	r14, r20
    3308:	59 01       	movw	r10, r18
    330a:	68 01       	movw	r12, r16
    330c:	8a e4       	ldi	r24, 0x4A	; 74
    330e:	80 93 f9 0b 	sts	0x0BF9, r24	; 0x800bf9 <pn532_packetbuffer>
    3312:	81 e0       	ldi	r24, 0x01	; 1
    3314:	80 93 fa 0b 	sts	0x0BFA, r24	; 0x800bfa <pn532_packetbuffer+0x1>
    3318:	60 93 fb 0b 	sts	0x0BFB, r22	; 0x800bfb <pn532_packetbuffer+0x2>
    331c:	98 01       	movw	r18, r16
    331e:	43 e0       	ldi	r20, 0x03	; 3
    3320:	69 ef       	ldi	r22, 0xF9	; 249
    3322:	7b e0       	ldi	r23, 0x0B	; 11
    3324:	ce 01       	movw	r24, r28
    3326:	f0 de       	rcall	.-544    	; 0x3108 <_ZN14Adafruit_PN53219sendCommandCheckAckEPhhj>
    3328:	18 2f       	mov	r17, r24
    332a:	88 23       	and	r24, r24
    332c:	41 f1       	breq	.+80     	; 0x337e <_ZN14Adafruit_PN53219readPassiveTargetIDEhPhS0_j+0x8e>
    332e:	8d 89       	ldd	r24, Y+21	; 0x15
    3330:	88 23       	and	r24, r24
    3332:	79 f0       	breq	.+30     	; 0x3352 <_ZN14Adafruit_PN53219readPassiveTargetIDEhPhS0_j+0x62>
    3334:	44 e1       	ldi	r20, 0x14	; 20
    3336:	69 ef       	ldi	r22, 0xF9	; 249
    3338:	7b e0       	ldi	r23, 0x0B	; 11
    333a:	ce 01       	movw	r24, r28
    333c:	97 dd       	rcall	.-1234   	; 0x2e6c <_ZN14Adafruit_PN5328readdataEPhh>
    333e:	80 91 00 0c 	lds	r24, 0x0C00	; 0x800c00 <pn532_packetbuffer+0x7>
    3342:	81 30       	cpi	r24, 0x01	; 1
    3344:	e1 f4       	brne	.+56     	; 0x337e <_ZN14Adafruit_PN53219readPassiveTargetIDEhPhS0_j+0x8e>
    3346:	80 91 05 0c 	lds	r24, 0x0C05	; 0x800c05 <pn532_packetbuffer+0xc>
    334a:	f5 01       	movw	r30, r10
    334c:	80 83       	st	Z, r24
    334e:	80 e0       	ldi	r24, 0x00	; 0
    3350:	06 c0       	rjmp	.+12     	; 0x335e <_ZN14Adafruit_PN53219readPassiveTargetIDEhPhS0_j+0x6e>
    3352:	b6 01       	movw	r22, r12
    3354:	ce 01       	movw	r24, r28
    3356:	5c dd       	rcall	.-1352   	; 0x2e10 <_ZN14Adafruit_PN5329waitreadyEj>
    3358:	81 11       	cpse	r24, r1
    335a:	ec cf       	rjmp	.-40     	; 0x3334 <_ZN14Adafruit_PN53219readPassiveTargetIDEhPhS0_j+0x44>
    335c:	10 c0       	rjmp	.+32     	; 0x337e <_ZN14Adafruit_PN53219readPassiveTargetIDEhPhS0_j+0x8e>
    335e:	90 91 05 0c 	lds	r25, 0x0C05	; 0x800c05 <pn532_packetbuffer+0xc>
    3362:	89 17       	cp	r24, r25
    3364:	68 f4       	brcc	.+26     	; 0x3380 <_ZN14Adafruit_PN53219readPassiveTargetIDEhPhS0_j+0x90>
    3366:	28 2f       	mov	r18, r24
    3368:	30 e0       	ldi	r19, 0x00	; 0
    336a:	f9 01       	movw	r30, r18
    336c:	e7 50       	subi	r30, 0x07	; 7
    336e:	f4 4f       	sbci	r31, 0xF4	; 244
    3370:	95 85       	ldd	r25, Z+13	; 0x0d
    3372:	f7 01       	movw	r30, r14
    3374:	e2 0f       	add	r30, r18
    3376:	f3 1f       	adc	r31, r19
    3378:	90 83       	st	Z, r25
    337a:	8f 5f       	subi	r24, 0xFF	; 255
    337c:	f0 cf       	rjmp	.-32     	; 0x335e <_ZN14Adafruit_PN53219readPassiveTargetIDEhPhS0_j+0x6e>
    337e:	10 e0       	ldi	r17, 0x00	; 0
    3380:	81 2f       	mov	r24, r17
    3382:	df 91       	pop	r29
    3384:	cf 91       	pop	r28
    3386:	1f 91       	pop	r17
    3388:	0f 91       	pop	r16
    338a:	ff 90       	pop	r15
    338c:	ef 90       	pop	r14
    338e:	df 90       	pop	r13
    3390:	cf 90       	pop	r12
    3392:	bf 90       	pop	r11
    3394:	af 90       	pop	r10
    3396:	08 95       	ret

00003398 <_ZN14Adafruit_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_>:

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
uint8_t Adafruit_PN532::mifareclassic_AuthenticateBlock (uint8_t * uid, uint8_t uidLen, uint32_t blockNumber, uint8_t keyNumber, uint8_t * keyData)
{
    3398:	af 92       	push	r10
    339a:	bf 92       	push	r11
    339c:	cf 92       	push	r12
    339e:	df 92       	push	r13
    33a0:	ef 92       	push	r14
    33a2:	0f 93       	push	r16
    33a4:	1f 93       	push	r17
    33a6:	cf 93       	push	r28
    33a8:	df 93       	push	r29
    33aa:	ec 01       	movw	r28, r24
    33ac:	14 2f       	mov	r17, r20
  uint8_t len;
  uint8_t i;

  // Hang on to the key and uid data
  memcpy (_key, keyData, 6);
    33ae:	5c 01       	movw	r10, r24
    33b0:	8e e0       	ldi	r24, 0x0E	; 14
    33b2:	a8 0e       	add	r10, r24
    33b4:	b1 1c       	adc	r11, r1
    33b6:	86 e0       	ldi	r24, 0x06	; 6
    33b8:	f6 01       	movw	r30, r12
    33ba:	d5 01       	movw	r26, r10
    33bc:	01 90       	ld	r0, Z+
    33be:	0d 92       	st	X+, r0
    33c0:	8a 95       	dec	r24
    33c2:	e1 f7       	brne	.-8      	; 0x33bc <_ZN14Adafruit_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x24>
  memcpy (_uid, uid, uidLen);
    33c4:	50 e0       	ldi	r21, 0x00	; 0
    33c6:	ce 01       	movw	r24, r28
    33c8:	06 96       	adiw	r24, 0x06	; 6
    33ca:	0e 94 d6 44 	call	0x89ac	; 0x89ac <memcpy>
  _uidLen = uidLen;
    33ce:	1d 87       	std	Y+13, r17	; 0x0d
    PN532DEBUGPRINT.print(F("Using authentication KEY "));PN532DEBUGPRINT.print(keyNumber ? 'B' : 'A');PN532DEBUGPRINT.print(F(": "));
    Adafruit_PN532::PrintHex(_key, 6);
  #endif

  // Prepare the authentication command //
  pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;   /* Data Exchange Header */
    33d0:	80 e4       	ldi	r24, 0x40	; 64
    33d2:	80 93 f9 0b 	sts	0x0BF9, r24	; 0x800bf9 <pn532_packetbuffer>
  pn532_packetbuffer[1] = 1;                              /* Max card numbers */
    33d6:	81 e0       	ldi	r24, 0x01	; 1
    33d8:	80 93 fa 0b 	sts	0x0BFA, r24	; 0x800bfa <pn532_packetbuffer+0x1>
  pn532_packetbuffer[2] = (keyNumber) ? MIFARE_CMD_AUTH_B : MIFARE_CMD_AUTH_A;
    33dc:	e1 10       	cpse	r14, r1
    33de:	02 c0       	rjmp	.+4      	; 0x33e4 <_ZN14Adafruit_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x4c>
    33e0:	80 e6       	ldi	r24, 0x60	; 96
    33e2:	01 c0       	rjmp	.+2      	; 0x33e6 <_ZN14Adafruit_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x4e>
    33e4:	81 e6       	ldi	r24, 0x61	; 97
    33e6:	80 93 fb 0b 	sts	0x0BFB, r24	; 0x800bfb <pn532_packetbuffer+0x2>
  pn532_packetbuffer[3] = blockNumber;                    /* Block Number (1K = 0..63, 4K = 0..255 */
    33ea:	00 93 fc 0b 	sts	0x0BFC, r16	; 0x800bfc <pn532_packetbuffer+0x3>
  memcpy (pn532_packetbuffer+4, _key, 6);
    33ee:	86 e0       	ldi	r24, 0x06	; 6
    33f0:	f5 01       	movw	r30, r10
    33f2:	ad ef       	ldi	r26, 0xFD	; 253
    33f4:	bb e0       	ldi	r27, 0x0B	; 11
    33f6:	01 90       	ld	r0, Z+
    33f8:	0d 92       	st	X+, r0
    33fa:	8a 95       	dec	r24
    33fc:	e1 f7       	brne	.-8      	; 0x33f6 <_ZN14Adafruit_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x5e>
  for (i = 0; i < _uidLen; i++)
    33fe:	80 e0       	ldi	r24, 0x00	; 0
    3400:	4d 85       	ldd	r20, Y+13	; 0x0d
    3402:	84 17       	cp	r24, r20
    3404:	60 f4       	brcc	.+24     	; 0x341e <_ZN14Adafruit_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x86>
  {
    pn532_packetbuffer[10+i] = _uid[i];                /* 4 byte card ID */
    3406:	28 2f       	mov	r18, r24
    3408:	30 e0       	ldi	r19, 0x00	; 0
    340a:	fe 01       	movw	r30, r28
    340c:	e2 0f       	add	r30, r18
    340e:	f3 1f       	adc	r31, r19
    3410:	96 81       	ldd	r25, Z+6	; 0x06
    3412:	f9 01       	movw	r30, r18
    3414:	e7 50       	subi	r30, 0x07	; 7
    3416:	f4 4f       	sbci	r31, 0xF4	; 244
    3418:	92 87       	std	Z+10, r25	; 0x0a
  pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;   /* Data Exchange Header */
  pn532_packetbuffer[1] = 1;                              /* Max card numbers */
  pn532_packetbuffer[2] = (keyNumber) ? MIFARE_CMD_AUTH_B : MIFARE_CMD_AUTH_A;
  pn532_packetbuffer[3] = blockNumber;                    /* Block Number (1K = 0..63, 4K = 0..255 */
  memcpy (pn532_packetbuffer+4, _key, 6);
  for (i = 0; i < _uidLen; i++)
    341a:	8f 5f       	subi	r24, 0xFF	; 255
    341c:	f1 cf       	rjmp	.-30     	; 0x3400 <_ZN14Adafruit_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x68>
  {
    pn532_packetbuffer[10+i] = _uid[i];                /* 4 byte card ID */
  }

  if (! sendCommandCheckAck(pn532_packetbuffer, 10+_uidLen))
    341e:	46 5f       	subi	r20, 0xF6	; 246
    3420:	28 ee       	ldi	r18, 0xE8	; 232
    3422:	33 e0       	ldi	r19, 0x03	; 3
    3424:	69 ef       	ldi	r22, 0xF9	; 249
    3426:	7b e0       	ldi	r23, 0x0B	; 11
    3428:	ce 01       	movw	r24, r28
    342a:	6e de       	rcall	.-804    	; 0x3108 <_ZN14Adafruit_PN53219sendCommandCheckAckEPhhj>
    342c:	88 23       	and	r24, r24
    342e:	49 f0       	breq	.+18     	; 0x3442 <_ZN14Adafruit_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0xaa>
    return 0;

  // Read the response packet
  readdata(pn532_packetbuffer, 12);
    3430:	4c e0       	ldi	r20, 0x0C	; 12
    3432:	69 ef       	ldi	r22, 0xF9	; 249
    3434:	7b e0       	ldi	r23, 0x0B	; 11
    3436:	ce 01       	movw	r24, r28
    3438:	19 dd       	rcall	.-1486   	; 0x2e6c <_ZN14Adafruit_PN5328readdataEPhh>
  {
    pn532_packetbuffer[10+i] = _uid[i];                /* 4 byte card ID */
  }

  if (! sendCommandCheckAck(pn532_packetbuffer, 10+_uidLen))
    return 0;
    343a:	81 e0       	ldi	r24, 0x01	; 1
    343c:	90 91 00 0c 	lds	r25, 0x0C00	; 0x800c00 <pn532_packetbuffer+0x7>
    3440:	91 11       	cpse	r25, r1
    3442:	80 e0       	ldi	r24, 0x00	; 0
    #endif
    return 0;
  }

  return 1;
}
    3444:	df 91       	pop	r29
    3446:	cf 91       	pop	r28
    3448:	1f 91       	pop	r17
    344a:	0f 91       	pop	r16
    344c:	ef 90       	pop	r14
    344e:	df 90       	pop	r13
    3450:	cf 90       	pop	r12
    3452:	bf 90       	pop	r11
    3454:	af 90       	pop	r10
    3456:	08 95       	ret

00003458 <_ZN14Adafruit_PN53227mifareclassic_ReadDataBlockEhPh>:

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
uint8_t Adafruit_PN532::mifareclassic_ReadDataBlock (uint8_t blockNumber, uint8_t * data)
{
    3458:	0f 93       	push	r16
    345a:	1f 93       	push	r17
    345c:	cf 93       	push	r28
    345e:	df 93       	push	r29
    3460:	ec 01       	movw	r28, r24
    3462:	8a 01       	movw	r16, r20
  #ifdef MIFAREDEBUG
    PN532DEBUGPRINT.print(F("Trying to read 16 bytes from block "));PN532DEBUGPRINT.println(blockNumber);
  #endif

  /* Prepare the command */
  pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;
    3464:	80 e4       	ldi	r24, 0x40	; 64
    3466:	80 93 f9 0b 	sts	0x0BF9, r24	; 0x800bf9 <pn532_packetbuffer>
  pn532_packetbuffer[1] = 1;                      /* Card number */
    346a:	81 e0       	ldi	r24, 0x01	; 1
    346c:	80 93 fa 0b 	sts	0x0BFA, r24	; 0x800bfa <pn532_packetbuffer+0x1>
  pn532_packetbuffer[2] = MIFARE_CMD_READ;        /* Mifare Read command = 0x30 */
    3470:	80 e3       	ldi	r24, 0x30	; 48
    3472:	80 93 fb 0b 	sts	0x0BFB, r24	; 0x800bfb <pn532_packetbuffer+0x2>
  pn532_packetbuffer[3] = blockNumber;            /* Block Number (0..63 for 1K, 0..255 for 4K) */
    3476:	60 93 fc 0b 	sts	0x0BFC, r22	; 0x800bfc <pn532_packetbuffer+0x3>

  /* Send the command */
  if (! sendCommandCheckAck(pn532_packetbuffer, 4))
    347a:	28 ee       	ldi	r18, 0xE8	; 232
    347c:	33 e0       	ldi	r19, 0x03	; 3
    347e:	44 e0       	ldi	r20, 0x04	; 4
    3480:	69 ef       	ldi	r22, 0xF9	; 249
    3482:	7b e0       	ldi	r23, 0x0B	; 11
    3484:	ce 01       	movw	r24, r28
    3486:	40 de       	rcall	.-896    	; 0x3108 <_ZN14Adafruit_PN53219sendCommandCheckAckEPhhj>
    3488:	81 11       	cpse	r24, r1
    348a:	02 c0       	rjmp	.+4      	; 0x3490 <_ZN14Adafruit_PN53227mifareclassic_ReadDataBlockEhPh+0x38>
  {
    #ifdef MIFAREDEBUG
      PN532DEBUGPRINT.println(F("Failed to receive ACK for read command"));
    #endif
    return 0;
    348c:	80 e0       	ldi	r24, 0x00	; 0
    348e:	12 c0       	rjmp	.+36     	; 0x34b4 <_ZN14Adafruit_PN53227mifareclassic_ReadDataBlockEhPh+0x5c>
  }

  /* Read the response packet */
  readdata(pn532_packetbuffer, 26);
    3490:	4a e1       	ldi	r20, 0x1A	; 26
    3492:	69 ef       	ldi	r22, 0xF9	; 249
    3494:	7b e0       	ldi	r23, 0x0B	; 11
    3496:	ce 01       	movw	r24, r28
    3498:	e9 dc       	rcall	.-1582   	; 0x2e6c <_ZN14Adafruit_PN5328readdataEPhh>

  /* If byte 8 isn't 0x00 we probably have an error */
  if (pn532_packetbuffer[7] != 0x00)
    349a:	80 91 00 0c 	lds	r24, 0x0C00	; 0x800c00 <pn532_packetbuffer+0x7>
    349e:	81 11       	cpse	r24, r1
    34a0:	f5 cf       	rjmp	.-22     	; 0x348c <_ZN14Adafruit_PN53227mifareclassic_ReadDataBlockEhPh+0x34>
    return 0;
  }

  /* Copy the 16 data bytes to the output buffer        */
  /* Block content starts at byte 9 of a valid response */
  memcpy (data, pn532_packetbuffer+8, 16);
    34a2:	80 e1       	ldi	r24, 0x10	; 16
    34a4:	e1 e0       	ldi	r30, 0x01	; 1
    34a6:	fc e0       	ldi	r31, 0x0C	; 12
    34a8:	d8 01       	movw	r26, r16
    34aa:	01 90       	ld	r0, Z+
    34ac:	0d 92       	st	X+, r0
    34ae:	8a 95       	dec	r24
    34b0:	e1 f7       	brne	.-8      	; 0x34aa <_ZN14Adafruit_PN53227mifareclassic_ReadDataBlockEhPh+0x52>
    PN532DEBUGPRINT.print(F("Block "));
    PN532DEBUGPRINT.println(blockNumber);
    Adafruit_PN532::PrintHexChar(data, 16);
  #endif

  return 1;
    34b2:	81 e0       	ldi	r24, 0x01	; 1
}
    34b4:	df 91       	pop	r29
    34b6:	cf 91       	pop	r28
    34b8:	1f 91       	pop	r17
    34ba:	0f 91       	pop	r16
    34bc:	08 95       	ret

000034be <_ZN14Adafruit_PN53228mifareclassic_WriteDataBlockEhPh>:

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
uint8_t Adafruit_PN532::mifareclassic_WriteDataBlock (uint8_t blockNumber, uint8_t * data)
{
    34be:	cf 93       	push	r28
    34c0:	df 93       	push	r29
    34c2:	ec 01       	movw	r28, r24
  #ifdef MIFAREDEBUG
    PN532DEBUGPRINT.print(F("Trying to write 16 bytes to block "));PN532DEBUGPRINT.println(blockNumber);
  #endif

  /* Prepare the first command */
  pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;
    34c4:	80 e4       	ldi	r24, 0x40	; 64
    34c6:	80 93 f9 0b 	sts	0x0BF9, r24	; 0x800bf9 <pn532_packetbuffer>
  pn532_packetbuffer[1] = 1;                      /* Card number */
    34ca:	81 e0       	ldi	r24, 0x01	; 1
    34cc:	80 93 fa 0b 	sts	0x0BFA, r24	; 0x800bfa <pn532_packetbuffer+0x1>
  pn532_packetbuffer[2] = MIFARE_CMD_WRITE;       /* Mifare Write command = 0xA0 */
    34d0:	80 ea       	ldi	r24, 0xA0	; 160
    34d2:	80 93 fb 0b 	sts	0x0BFB, r24	; 0x800bfb <pn532_packetbuffer+0x2>
  pn532_packetbuffer[3] = blockNumber;            /* Block Number (0..63 for 1K, 0..255 for 4K) */
    34d6:	60 93 fc 0b 	sts	0x0BFC, r22	; 0x800bfc <pn532_packetbuffer+0x3>
  memcpy (pn532_packetbuffer+4, data, 16);          /* Data Payload */
    34da:	80 e1       	ldi	r24, 0x10	; 16
    34dc:	fa 01       	movw	r30, r20
    34de:	ad ef       	ldi	r26, 0xFD	; 253
    34e0:	bb e0       	ldi	r27, 0x0B	; 11
    34e2:	01 90       	ld	r0, Z+
    34e4:	0d 92       	st	X+, r0
    34e6:	8a 95       	dec	r24
    34e8:	e1 f7       	brne	.-8      	; 0x34e2 <_ZN14Adafruit_PN53228mifareclassic_WriteDataBlockEhPh+0x24>

  /* Send the command */
  if (! sendCommandCheckAck(pn532_packetbuffer, 20))
    34ea:	28 ee       	ldi	r18, 0xE8	; 232
    34ec:	33 e0       	ldi	r19, 0x03	; 3
    34ee:	44 e1       	ldi	r20, 0x14	; 20
    34f0:	69 ef       	ldi	r22, 0xF9	; 249
    34f2:	7b e0       	ldi	r23, 0x0B	; 11
    34f4:	ce 01       	movw	r24, r28
    34f6:	08 de       	rcall	.-1008   	; 0x3108 <_ZN14Adafruit_PN53219sendCommandCheckAckEPhhj>
    34f8:	88 23       	and	r24, r24
    34fa:	69 f0       	breq	.+26     	; 0x3516 <_ZN14Adafruit_PN53228mifareclassic_WriteDataBlockEhPh+0x58>
    #endif

    // Return Failed Signal
    return 0;
  }
  delay(10);
    34fc:	6a e0       	ldi	r22, 0x0A	; 10
    34fe:	70 e0       	ldi	r23, 0x00	; 0
    3500:	80 e0       	ldi	r24, 0x00	; 0
    3502:	90 e0       	ldi	r25, 0x00	; 0
    3504:	0e 94 3d 3c 	call	0x787a	; 0x787a <delay>

  /* Read the response packet */
  readdata(pn532_packetbuffer, 26);
    3508:	4a e1       	ldi	r20, 0x1A	; 26
    350a:	69 ef       	ldi	r22, 0xF9	; 249
    350c:	7b e0       	ldi	r23, 0x0B	; 11
    350e:	ce 01       	movw	r24, r28
    3510:	ad dc       	rcall	.-1702   	; 0x2e6c <_ZN14Adafruit_PN5328readdataEPhh>
    3512:	81 e0       	ldi	r24, 0x01	; 1
    3514:	01 c0       	rjmp	.+2      	; 0x3518 <_ZN14Adafruit_PN53228mifareclassic_WriteDataBlockEhPh+0x5a>
  if (! sendCommandCheckAck(pn532_packetbuffer, 20))
  {
    #ifdef MIFAREDEBUG
      PN532DEBUGPRINT.println(F("Failed to receive ACK for write command"));
    #endif
    return 0;
    3516:	80 e0       	ldi	r24, 0x00	; 0

  /* Read the response packet */
  readdata(pn532_packetbuffer, 26);

  return 1;
}
    3518:	df 91       	pop	r29
    351a:	cf 91       	pop	r28
    351c:	08 95       	ret

0000351e <_ZL9date2daysjhh>:
} // of method pinAlarm()                                                     //                                  //
/*******************************************************************************************************************
** Method pinSquareWave() will set the control register flag to make the INT/SQW Pin produce a 1Hz signal         **
*******************************************************************************************************************/
void DS3231M_Class::pinSquareWave() {                                         //                                  //
  writeByte(DS3231M_CONTROL,readByte(DS3231M_CONTROL)|0x4);                   // Set bit 3 to off                 //
    351e:	80 3d       	cpi	r24, 0xD0	; 208
    3520:	27 e0       	ldi	r18, 0x07	; 7
    3522:	92 07       	cpc	r25, r18
    3524:	10 f0       	brcs	.+4      	; 0x352a <_ZL9date2daysjhh+0xc>
    3526:	80 5d       	subi	r24, 0xD0	; 208
    3528:	97 40       	sbci	r25, 0x07	; 7
    352a:	50 e0       	ldi	r21, 0x00	; 0
    352c:	ed e1       	ldi	r30, 0x1D	; 29
    352e:	f2 e0       	ldi	r31, 0x02	; 2
    3530:	21 e0       	ldi	r18, 0x01	; 1
    3532:	26 17       	cp	r18, r22
    3534:	30 f4       	brcc	.+12     	; 0x3542 <_ZL9date2daysjhh+0x24>
    3536:	34 91       	lpm	r19, Z
    3538:	43 0f       	add	r20, r19
    353a:	51 1d       	adc	r21, r1
    353c:	2f 5f       	subi	r18, 0xFF	; 255
    353e:	31 96       	adiw	r30, 0x01	; 1
    3540:	f8 cf       	rjmp	.-16     	; 0x3532 <_ZL9date2daysjhh+0x14>
    3542:	63 30       	cpi	r22, 0x03	; 3
    3544:	38 f0       	brcs	.+14     	; 0x3554 <_ZL9date2daysjhh+0x36>
    3546:	9c 01       	movw	r18, r24
    3548:	23 70       	andi	r18, 0x03	; 3
    354a:	33 27       	eor	r19, r19
    354c:	23 2b       	or	r18, r19
    354e:	11 f4       	brne	.+4      	; 0x3554 <_ZL9date2daysjhh+0x36>
    3550:	4f 5f       	subi	r20, 0xFF	; 255
    3552:	5f 4f       	sbci	r21, 0xFF	; 255
    3554:	bc 01       	movw	r22, r24
    3556:	6d 5f       	subi	r22, 0xFD	; 253
    3558:	7f 4f       	sbci	r23, 0xFF	; 255
    355a:	76 95       	lsr	r23
    355c:	67 95       	ror	r22
    355e:	76 95       	lsr	r23
    3560:	67 95       	ror	r22
    3562:	ed e6       	ldi	r30, 0x6D	; 109
    3564:	f1 e0       	ldi	r31, 0x01	; 1
    3566:	8e 9f       	mul	r24, r30
    3568:	90 01       	movw	r18, r0
    356a:	8f 9f       	mul	r24, r31
    356c:	30 0d       	add	r19, r0
    356e:	9e 9f       	mul	r25, r30
    3570:	30 0d       	add	r19, r0
    3572:	11 24       	eor	r1, r1
    3574:	c9 01       	movw	r24, r18
    3576:	01 97       	sbiw	r24, 0x01	; 1
    3578:	86 0f       	add	r24, r22
    357a:	97 1f       	adc	r25, r23
    357c:	84 0f       	add	r24, r20
    357e:	95 1f       	adc	r25, r21
    3580:	08 95       	ret

00003582 <_ZL6conv2dPKc>:
    3582:	fc 01       	movw	r30, r24
    3584:	90 81       	ld	r25, Z
    3586:	90 53       	subi	r25, 0x30	; 48
    3588:	9a 30       	cpi	r25, 0x0A	; 10
    358a:	08 f0       	brcs	.+2      	; 0x358e <_ZL6conv2dPKc+0xc>
    358c:	90 e0       	ldi	r25, 0x00	; 0
    358e:	81 81       	ldd	r24, Z+1	; 0x01
    3590:	80 53       	subi	r24, 0x30	; 48
    3592:	2a e0       	ldi	r18, 0x0A	; 10
    3594:	92 9f       	mul	r25, r18
    3596:	80 0d       	add	r24, r0
    3598:	11 24       	eor	r1, r1
    359a:	08 95       	ret

0000359c <_ZN8DateTimeC1Em>:
    359c:	8f 92       	push	r8
    359e:	9f 92       	push	r9
    35a0:	af 92       	push	r10
    35a2:	bf 92       	push	r11
    35a4:	cf 92       	push	r12
    35a6:	df 92       	push	r13
    35a8:	ef 92       	push	r14
    35aa:	ff 92       	push	r15
    35ac:	cf 93       	push	r28
    35ae:	df 93       	push	r29
    35b0:	ec 01       	movw	r28, r24
    35b2:	6a 01       	movw	r12, r20
    35b4:	7b 01       	movw	r14, r22
    35b6:	80 e8       	ldi	r24, 0x80	; 128
    35b8:	c8 1a       	sub	r12, r24
    35ba:	83 e4       	ldi	r24, 0x43	; 67
    35bc:	d8 0a       	sbc	r13, r24
    35be:	8d e6       	ldi	r24, 0x6D	; 109
    35c0:	e8 0a       	sbc	r14, r24
    35c2:	88 e3       	ldi	r24, 0x38	; 56
    35c4:	f8 0a       	sbc	r15, r24
    35c6:	8c e3       	ldi	r24, 0x3C	; 60
    35c8:	88 2e       	mov	r8, r24
    35ca:	91 2c       	mov	r9, r1
    35cc:	a1 2c       	mov	r10, r1
    35ce:	b1 2c       	mov	r11, r1
    35d0:	c7 01       	movw	r24, r14
    35d2:	b6 01       	movw	r22, r12
    35d4:	a5 01       	movw	r20, r10
    35d6:	94 01       	movw	r18, r8
    35d8:	0e 94 41 41 	call	0x8282	; 0x8282 <__udivmodsi4>
    35dc:	6d 83       	std	Y+5, r22	; 0x05
    35de:	ca 01       	movw	r24, r20
    35e0:	b9 01       	movw	r22, r18
    35e2:	a5 01       	movw	r20, r10
    35e4:	94 01       	movw	r18, r8
    35e6:	0e 94 41 41 	call	0x8282	; 0x8282 <__udivmodsi4>
    35ea:	6c 83       	std	Y+4, r22	; 0x04
    35ec:	c7 01       	movw	r24, r14
    35ee:	b6 01       	movw	r22, r12
    35f0:	20 e1       	ldi	r18, 0x10	; 16
    35f2:	3e e0       	ldi	r19, 0x0E	; 14
    35f4:	40 e0       	ldi	r20, 0x00	; 0
    35f6:	50 e0       	ldi	r21, 0x00	; 0
    35f8:	0e 94 41 41 	call	0x8282	; 0x8282 <__udivmodsi4>
    35fc:	ca 01       	movw	r24, r20
    35fe:	b9 01       	movw	r22, r18
    3600:	28 e1       	ldi	r18, 0x18	; 24
    3602:	30 e0       	ldi	r19, 0x00	; 0
    3604:	40 e0       	ldi	r20, 0x00	; 0
    3606:	50 e0       	ldi	r21, 0x00	; 0
    3608:	0e 94 41 41 	call	0x8282	; 0x8282 <__udivmodsi4>
    360c:	6b 83       	std	Y+3, r22	; 0x03
    360e:	c7 01       	movw	r24, r14
    3610:	b6 01       	movw	r22, r12
    3612:	20 e8       	ldi	r18, 0x80	; 128
    3614:	31 e5       	ldi	r19, 0x51	; 81
    3616:	41 e0       	ldi	r20, 0x01	; 1
    3618:	50 e0       	ldi	r21, 0x00	; 0
    361a:	0e 94 41 41 	call	0x8282	; 0x8282 <__udivmodsi4>
    361e:	18 82       	st	Y, r1
    3620:	88 81       	ld	r24, Y
    3622:	98 2f       	mov	r25, r24
    3624:	93 70       	andi	r25, 0x03	; 3
    3626:	41 e0       	ldi	r20, 0x01	; 1
    3628:	50 e0       	ldi	r21, 0x00	; 0
    362a:	11 f0       	breq	.+4      	; 0x3630 <_ZN8DateTimeC1Em+0x94>
    362c:	40 e0       	ldi	r20, 0x00	; 0
    362e:	50 e0       	ldi	r21, 0x00	; 0
    3630:	ba 01       	movw	r22, r20
    3632:	63 59       	subi	r22, 0x93	; 147
    3634:	7e 4f       	sbci	r23, 0xFE	; 254
    3636:	26 17       	cp	r18, r22
    3638:	37 07       	cpc	r19, r23
    363a:	38 f0       	brcs	.+14     	; 0x364a <_ZN8DateTimeC1Em+0xae>
    363c:	24 1b       	sub	r18, r20
    363e:	35 0b       	sbc	r19, r21
    3640:	2d 56       	subi	r18, 0x6D	; 109
    3642:	31 40       	sbci	r19, 0x01	; 1
    3644:	8f 5f       	subi	r24, 0xFF	; 255
    3646:	88 83       	st	Y, r24
    3648:	eb cf       	rjmp	.-42     	; 0x3620 <_ZN8DateTimeC1Em+0x84>
    364a:	81 e0       	ldi	r24, 0x01	; 1
    364c:	89 83       	std	Y+1, r24	; 0x01
    364e:	89 81       	ldd	r24, Y+1	; 0x01
    3650:	e8 2f       	mov	r30, r24
    3652:	f0 e0       	ldi	r31, 0x00	; 0
    3654:	e4 5e       	subi	r30, 0xE4	; 228
    3656:	fd 4f       	sbci	r31, 0xFD	; 253
    3658:	e4 91       	lpm	r30, Z
    365a:	91 11       	cpse	r25, r1
    365c:	03 c0       	rjmp	.+6      	; 0x3664 <_ZN8DateTimeC1Em+0xc8>
    365e:	82 30       	cpi	r24, 0x02	; 2
    3660:	09 f4       	brne	.+2      	; 0x3664 <_ZN8DateTimeC1Em+0xc8>
    3662:	ef 5f       	subi	r30, 0xFF	; 255
    3664:	f0 e0       	ldi	r31, 0x00	; 0
    3666:	2e 17       	cp	r18, r30
    3668:	3f 07       	cpc	r19, r31
    366a:	20 f0       	brcs	.+8      	; 0x3674 <_ZN8DateTimeC1Em+0xd8>
    366c:	2e 1b       	sub	r18, r30
    366e:	3f 0b       	sbc	r19, r31
    3670:	8f 5f       	subi	r24, 0xFF	; 255
    3672:	ec cf       	rjmp	.-40     	; 0x364c <_ZN8DateTimeC1Em+0xb0>
    3674:	2f 5f       	subi	r18, 0xFF	; 255
    3676:	2a 83       	std	Y+2, r18	; 0x02
    3678:	df 91       	pop	r29
    367a:	cf 91       	pop	r28
    367c:	ff 90       	pop	r15
    367e:	ef 90       	pop	r14
    3680:	df 90       	pop	r13
    3682:	cf 90       	pop	r12
    3684:	bf 90       	pop	r11
    3686:	af 90       	pop	r10
    3688:	9f 90       	pop	r9
    368a:	8f 90       	pop	r8
    368c:	08 95       	ret

0000368e <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>:
    368e:	ef 92       	push	r14
    3690:	ff 92       	push	r15
    3692:	0f 93       	push	r16
    3694:	1f 93       	push	r17
    3696:	cf 93       	push	r28
    3698:	df 93       	push	r29
    369a:	cd b7       	in	r28, 0x3d	; 61
    369c:	de b7       	in	r29, 0x3e	; 62
    369e:	2b 97       	sbiw	r28, 0x0b	; 11
    36a0:	0f b6       	in	r0, 0x3f	; 63
    36a2:	f8 94       	cli
    36a4:	de bf       	out	0x3e, r29	; 62
    36a6:	0f be       	out	0x3f, r0	; 63
    36a8:	cd bf       	out	0x3d, r28	; 61
    36aa:	8c 01       	movw	r16, r24
    36ac:	7a 01       	movw	r14, r20
    36ae:	4b e0       	ldi	r20, 0x0B	; 11
    36b0:	50 e0       	ldi	r21, 0x00	; 0
    36b2:	ce 01       	movw	r24, r28
    36b4:	01 96       	adiw	r24, 0x01	; 1
    36b6:	0e 94 cd 44 	call	0x899a	; 0x899a <memcpy_P>
    36ba:	ce 01       	movw	r24, r28
    36bc:	0a 96       	adiw	r24, 0x0a	; 10
    36be:	61 df       	rcall	.-318    	; 0x3582 <_ZL6conv2dPKc>
    36c0:	f8 01       	movw	r30, r16
    36c2:	80 83       	st	Z, r24
    36c4:	e9 81       	ldd	r30, Y+1	; 0x01
    36c6:	8e 2f       	mov	r24, r30
    36c8:	90 e0       	ldi	r25, 0x00	; 0
    36ca:	fc 01       	movw	r30, r24
    36cc:	e1 54       	subi	r30, 0x41	; 65
    36ce:	f1 09       	sbc	r31, r1
    36d0:	e3 31       	cpi	r30, 0x13	; 19
    36d2:	f1 05       	cpc	r31, r1
    36d4:	48 f5       	brcc	.+82     	; 0x3728 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
    36d6:	ee 5a       	subi	r30, 0xAE	; 174
    36d8:	ff 4f       	sbci	r31, 0xFF	; 255
    36da:	0c 94 63 41 	jmp	0x82c6	; 0x82c6 <__tablejump2__>
    36de:	8a 81       	ldd	r24, Y+2	; 0x02
    36e0:	81 36       	cpi	r24, 0x61	; 97
    36e2:	29 f0       	breq	.+10     	; 0x36ee <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x60>
    36e4:	8b 81       	ldd	r24, Y+3	; 0x03
    36e6:	8e 36       	cpi	r24, 0x6E	; 110
    36e8:	21 f0       	breq	.+8      	; 0x36f2 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x64>
    36ea:	87 e0       	ldi	r24, 0x07	; 7
    36ec:	1b c0       	rjmp	.+54     	; 0x3724 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    36ee:	81 e0       	ldi	r24, 0x01	; 1
    36f0:	19 c0       	rjmp	.+50     	; 0x3724 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    36f2:	86 e0       	ldi	r24, 0x06	; 6
    36f4:	17 c0       	rjmp	.+46     	; 0x3724 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    36f6:	82 e0       	ldi	r24, 0x02	; 2
    36f8:	15 c0       	rjmp	.+42     	; 0x3724 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    36fa:	8b 81       	ldd	r24, Y+3	; 0x03
    36fc:	82 37       	cpi	r24, 0x72	; 114
    36fe:	11 f0       	breq	.+4      	; 0x3704 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x76>
    3700:	88 e0       	ldi	r24, 0x08	; 8
    3702:	10 c0       	rjmp	.+32     	; 0x3724 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    3704:	84 e0       	ldi	r24, 0x04	; 4
    3706:	0e c0       	rjmp	.+28     	; 0x3724 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    3708:	8b 81       	ldd	r24, Y+3	; 0x03
    370a:	82 37       	cpi	r24, 0x72	; 114
    370c:	11 f0       	breq	.+4      	; 0x3712 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x84>
    370e:	85 e0       	ldi	r24, 0x05	; 5
    3710:	09 c0       	rjmp	.+18     	; 0x3724 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    3712:	83 e0       	ldi	r24, 0x03	; 3
    3714:	07 c0       	rjmp	.+14     	; 0x3724 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    3716:	89 e0       	ldi	r24, 0x09	; 9
    3718:	05 c0       	rjmp	.+10     	; 0x3724 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    371a:	8a e0       	ldi	r24, 0x0A	; 10
    371c:	03 c0       	rjmp	.+6      	; 0x3724 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    371e:	8b e0       	ldi	r24, 0x0B	; 11
    3720:	01 c0       	rjmp	.+2      	; 0x3724 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    3722:	8c e0       	ldi	r24, 0x0C	; 12
    3724:	f8 01       	movw	r30, r16
    3726:	81 83       	std	Z+1, r24	; 0x01
    3728:	ce 01       	movw	r24, r28
    372a:	05 96       	adiw	r24, 0x05	; 5
    372c:	2a df       	rcall	.-428    	; 0x3582 <_ZL6conv2dPKc>
    372e:	f8 01       	movw	r30, r16
    3730:	82 83       	std	Z+2, r24	; 0x02
    3732:	48 e0       	ldi	r20, 0x08	; 8
    3734:	50 e0       	ldi	r21, 0x00	; 0
    3736:	b7 01       	movw	r22, r14
    3738:	ce 01       	movw	r24, r28
    373a:	01 96       	adiw	r24, 0x01	; 1
    373c:	0e 94 cd 44 	call	0x899a	; 0x899a <memcpy_P>
    3740:	ce 01       	movw	r24, r28
    3742:	01 96       	adiw	r24, 0x01	; 1
    3744:	1e df       	rcall	.-452    	; 0x3582 <_ZL6conv2dPKc>
    3746:	f8 01       	movw	r30, r16
    3748:	83 83       	std	Z+3, r24	; 0x03
    374a:	ce 01       	movw	r24, r28
    374c:	04 96       	adiw	r24, 0x04	; 4
    374e:	19 df       	rcall	.-462    	; 0x3582 <_ZL6conv2dPKc>
    3750:	f8 01       	movw	r30, r16
    3752:	84 83       	std	Z+4, r24	; 0x04
    3754:	ce 01       	movw	r24, r28
    3756:	07 96       	adiw	r24, 0x07	; 7
    3758:	14 df       	rcall	.-472    	; 0x3582 <_ZL6conv2dPKc>
    375a:	f8 01       	movw	r30, r16
    375c:	85 83       	std	Z+5, r24	; 0x05
    375e:	2b 96       	adiw	r28, 0x0b	; 11
    3760:	0f b6       	in	r0, 0x3f	; 63
    3762:	f8 94       	cli
    3764:	de bf       	out	0x3e, r29	; 62
    3766:	0f be       	out	0x3f, r0	; 63
    3768:	cd bf       	out	0x3d, r28	; 61
    376a:	df 91       	pop	r29
    376c:	cf 91       	pop	r28
    376e:	1f 91       	pop	r17
    3770:	0f 91       	pop	r16
    3772:	ff 90       	pop	r15
    3774:	ef 90       	pop	r14
    3776:	08 95       	ret

00003778 <_ZNK8DateTime12dayOfTheWeekEv>:
    3778:	fc 01       	movw	r30, r24
    377a:	80 81       	ld	r24, Z
    377c:	42 81       	ldd	r20, Z+2	; 0x02
    377e:	61 81       	ldd	r22, Z+1	; 0x01
    3780:	90 e0       	ldi	r25, 0x00	; 0
    3782:	cd de       	rcall	.-614    	; 0x351e <_ZL9date2daysjhh>
    3784:	06 96       	adiw	r24, 0x06	; 6
    3786:	67 e0       	ldi	r22, 0x07	; 7
    3788:	70 e0       	ldi	r23, 0x00	; 0
    378a:	0c 94 2d 41 	jmp	0x825a	; 0x825a <__udivmodhi4>
    378e:	08 95       	ret

00003790 <_ZNK8DateTime8unixtimeEv>:
    3790:	ef 92       	push	r14
    3792:	ff 92       	push	r15
    3794:	0f 93       	push	r16
    3796:	1f 93       	push	r17
    3798:	cf 93       	push	r28
    379a:	df 93       	push	r29
    379c:	ec 01       	movw	r28, r24
    379e:	88 81       	ld	r24, Y
    37a0:	4a 81       	ldd	r20, Y+2	; 0x02
    37a2:	69 81       	ldd	r22, Y+1	; 0x01
    37a4:	90 e0       	ldi	r25, 0x00	; 0
    37a6:	bb de       	rcall	.-650    	; 0x351e <_ZL9date2daysjhh>
    37a8:	9c 01       	movw	r18, r24
    37aa:	a8 e1       	ldi	r26, 0x18	; 24
    37ac:	b0 e0       	ldi	r27, 0x00	; 0
    37ae:	0e 94 6c 41 	call	0x82d8	; 0x82d8 <__umulhisi3>
    37b2:	2b 81       	ldd	r18, Y+3	; 0x03
    37b4:	7b 01       	movw	r14, r22
    37b6:	8c 01       	movw	r16, r24
    37b8:	e2 0e       	add	r14, r18
    37ba:	f1 1c       	adc	r15, r1
    37bc:	01 1d       	adc	r16, r1
    37be:	11 1d       	adc	r17, r1
    37c0:	a8 01       	movw	r20, r16
    37c2:	97 01       	movw	r18, r14
    37c4:	ac e3       	ldi	r26, 0x3C	; 60
    37c6:	b0 e0       	ldi	r27, 0x00	; 0
    37c8:	0e 94 7b 41 	call	0x82f6	; 0x82f6 <__muluhisi3>
    37cc:	2c 81       	ldd	r18, Y+4	; 0x04
    37ce:	7b 01       	movw	r14, r22
    37d0:	8c 01       	movw	r16, r24
    37d2:	e2 0e       	add	r14, r18
    37d4:	f1 1c       	adc	r15, r1
    37d6:	01 1d       	adc	r16, r1
    37d8:	11 1d       	adc	r17, r1
    37da:	a8 01       	movw	r20, r16
    37dc:	97 01       	movw	r18, r14
    37de:	0e 94 7b 41 	call	0x82f6	; 0x82f6 <__muluhisi3>
    37e2:	2d 81       	ldd	r18, Y+5	; 0x05
    37e4:	dc 01       	movw	r26, r24
    37e6:	cb 01       	movw	r24, r22
    37e8:	82 0f       	add	r24, r18
    37ea:	91 1d       	adc	r25, r1
    37ec:	a1 1d       	adc	r26, r1
    37ee:	b1 1d       	adc	r27, r1
    37f0:	bc 01       	movw	r22, r24
    37f2:	cd 01       	movw	r24, r26
    37f4:	60 58       	subi	r22, 0x80	; 128
    37f6:	7c 4b       	sbci	r23, 0xBC	; 188
    37f8:	82 49       	sbci	r24, 0x92	; 146
    37fa:	97 4c       	sbci	r25, 0xC7	; 199
    37fc:	df 91       	pop	r29
    37fe:	cf 91       	pop	r28
    3800:	1f 91       	pop	r17
    3802:	0f 91       	pop	r16
    3804:	ff 90       	pop	r15
    3806:	ef 90       	pop	r14
    3808:	08 95       	ret

0000380a <_ZNK8DateTime11secondstimeEv>:
    380a:	ef 92       	push	r14
    380c:	ff 92       	push	r15
    380e:	0f 93       	push	r16
    3810:	1f 93       	push	r17
    3812:	cf 93       	push	r28
    3814:	df 93       	push	r29
    3816:	ec 01       	movw	r28, r24
    3818:	88 81       	ld	r24, Y
    381a:	4a 81       	ldd	r20, Y+2	; 0x02
    381c:	69 81       	ldd	r22, Y+1	; 0x01
    381e:	90 e0       	ldi	r25, 0x00	; 0
    3820:	7e de       	rcall	.-772    	; 0x351e <_ZL9date2daysjhh>
    3822:	9c 01       	movw	r18, r24
    3824:	a8 e1       	ldi	r26, 0x18	; 24
    3826:	b0 e0       	ldi	r27, 0x00	; 0
    3828:	0e 94 6c 41 	call	0x82d8	; 0x82d8 <__umulhisi3>
    382c:	2b 81       	ldd	r18, Y+3	; 0x03
    382e:	7b 01       	movw	r14, r22
    3830:	8c 01       	movw	r16, r24
    3832:	e2 0e       	add	r14, r18
    3834:	f1 1c       	adc	r15, r1
    3836:	01 1d       	adc	r16, r1
    3838:	11 1d       	adc	r17, r1
    383a:	a8 01       	movw	r20, r16
    383c:	97 01       	movw	r18, r14
    383e:	ac e3       	ldi	r26, 0x3C	; 60
    3840:	b0 e0       	ldi	r27, 0x00	; 0
    3842:	0e 94 7b 41 	call	0x82f6	; 0x82f6 <__muluhisi3>
    3846:	2c 81       	ldd	r18, Y+4	; 0x04
    3848:	7b 01       	movw	r14, r22
    384a:	8c 01       	movw	r16, r24
    384c:	e2 0e       	add	r14, r18
    384e:	f1 1c       	adc	r15, r1
    3850:	01 1d       	adc	r16, r1
    3852:	11 1d       	adc	r17, r1
    3854:	a8 01       	movw	r20, r16
    3856:	97 01       	movw	r18, r14
    3858:	0e 94 7b 41 	call	0x82f6	; 0x82f6 <__muluhisi3>
    385c:	2d 81       	ldd	r18, Y+5	; 0x05
    385e:	62 0f       	add	r22, r18
    3860:	71 1d       	adc	r23, r1
    3862:	81 1d       	adc	r24, r1
    3864:	91 1d       	adc	r25, r1
    3866:	df 91       	pop	r29
    3868:	cf 91       	pop	r28
    386a:	1f 91       	pop	r17
    386c:	0f 91       	pop	r16
    386e:	ff 90       	pop	r15
    3870:	ef 90       	pop	r14
    3872:	08 95       	ret

00003874 <_ZN13DS3231M_ClassC1Ev>:
    3874:	fc 01       	movw	r30, r24
    3876:	10 82       	st	Z, r1
    3878:	11 82       	std	Z+1, r1	; 0x01
    387a:	12 82       	std	Z+2, r1	; 0x02
    387c:	13 82       	std	Z+3, r1	; 0x03
    387e:	14 82       	std	Z+4, r1	; 0x04
    3880:	08 95       	ret

00003882 <_ZN13DS3231M_ClassD1Ev>:
    3882:	08 95       	ret

00003884 <_ZN13DS3231M_Class9writeByteEhh>:
    3884:	0f 93       	push	r16
    3886:	1f 93       	push	r17
    3888:	cf 93       	push	r28
    388a:	df 93       	push	r29
    388c:	ec 01       	movw	r28, r24
    388e:	06 2f       	mov	r16, r22
    3890:	14 2f       	mov	r17, r20
    3892:	68 e6       	ldi	r22, 0x68	; 104
    3894:	89 ef       	ldi	r24, 0xF9	; 249
    3896:	9c e0       	ldi	r25, 0x0C	; 12
    3898:	0e 94 f3 37 	call	0x6fe6	; 0x6fe6 <_ZN7TwoWire17beginTransmissionEh>
    389c:	60 2f       	mov	r22, r16
    389e:	89 ef       	ldi	r24, 0xF9	; 249
    38a0:	9c e0       	ldi	r25, 0x0C	; 12
    38a2:	0e 94 a2 37 	call	0x6f44	; 0x6f44 <_ZN7TwoWire5writeEh>
    38a6:	61 2f       	mov	r22, r17
    38a8:	89 ef       	ldi	r24, 0xF9	; 249
    38aa:	9c e0       	ldi	r25, 0x0C	; 12
    38ac:	0e 94 a2 37 	call	0x6f44	; 0x6f44 <_ZN7TwoWire5writeEh>
    38b0:	89 ef       	ldi	r24, 0xF9	; 249
    38b2:	9c e0       	ldi	r25, 0x0C	; 12
    38b4:	0e 94 74 38 	call	0x70e8	; 0x70e8 <_ZN7TwoWire15endTransmissionEv>
    38b8:	88 83       	st	Y, r24
    38ba:	df 91       	pop	r29
    38bc:	cf 91       	pop	r28
    38be:	1f 91       	pop	r17
    38c0:	0f 91       	pop	r16
    38c2:	08 95       	ret

000038c4 <_ZN13DS3231M_Class8readByteEh>:
    38c4:	1f 93       	push	r17
    38c6:	cf 93       	push	r28
    38c8:	df 93       	push	r29
    38ca:	ec 01       	movw	r28, r24
    38cc:	16 2f       	mov	r17, r22
    38ce:	68 e6       	ldi	r22, 0x68	; 104
    38d0:	89 ef       	ldi	r24, 0xF9	; 249
    38d2:	9c e0       	ldi	r25, 0x0C	; 12
    38d4:	0e 94 f3 37 	call	0x6fe6	; 0x6fe6 <_ZN7TwoWire17beginTransmissionEh>
    38d8:	61 2f       	mov	r22, r17
    38da:	89 ef       	ldi	r24, 0xF9	; 249
    38dc:	9c e0       	ldi	r25, 0x0C	; 12
    38de:	0e 94 a2 37 	call	0x6f44	; 0x6f44 <_ZN7TwoWire5writeEh>
    38e2:	89 ef       	ldi	r24, 0xF9	; 249
    38e4:	9c e0       	ldi	r25, 0x0C	; 12
    38e6:	0e 94 74 38 	call	0x70e8	; 0x70e8 <_ZN7TwoWire15endTransmissionEv>
    38ea:	88 83       	st	Y, r24
    38ec:	41 e0       	ldi	r20, 0x01	; 1
    38ee:	68 e6       	ldi	r22, 0x68	; 104
    38f0:	89 ef       	ldi	r24, 0xF9	; 249
    38f2:	9c e0       	ldi	r25, 0x0C	; 12
    38f4:	0e 94 70 38 	call	0x70e0	; 0x70e0 <_ZN7TwoWire11requestFromEhh>
    38f8:	89 ef       	ldi	r24, 0xF9	; 249
    38fa:	9c e0       	ldi	r25, 0x0C	; 12
    38fc:	0e 94 1c 37 	call	0x6e38	; 0x6e38 <_ZN7TwoWire4readEv>
    3900:	df 91       	pop	r29
    3902:	cf 91       	pop	r28
    3904:	1f 91       	pop	r17
    3906:	08 95       	ret

00003908 <_ZN13DS3231M_Class5beginEm>:
    3908:	cf 92       	push	r12
    390a:	df 92       	push	r13
    390c:	ef 92       	push	r14
    390e:	ff 92       	push	r15
    3910:	cf 93       	push	r28
    3912:	df 93       	push	r29
    3914:	ec 01       	movw	r28, r24
    3916:	6a 01       	movw	r12, r20
    3918:	7b 01       	movw	r14, r22
    391a:	89 ef       	ldi	r24, 0xF9	; 249
    391c:	9c e0       	ldi	r25, 0x0C	; 12
    391e:	0e 94 e0 37 	call	0x6fc0	; 0x6fc0 <_ZN7TwoWire5beginEv>
    3922:	b7 01       	movw	r22, r14
    3924:	a6 01       	movw	r20, r12
    3926:	89 ef       	ldi	r24, 0xF9	; 249
    3928:	9c e0       	ldi	r25, 0x0C	; 12
    392a:	0e 94 f0 37 	call	0x6fe0	; 0x6fe0 <_ZN7TwoWire8setClockEm>
    392e:	68 e6       	ldi	r22, 0x68	; 104
    3930:	89 ef       	ldi	r24, 0xF9	; 249
    3932:	9c e0       	ldi	r25, 0x0C	; 12
    3934:	0e 94 f3 37 	call	0x6fe6	; 0x6fe6 <_ZN7TwoWire17beginTransmissionEh>
    3938:	89 ef       	ldi	r24, 0xF9	; 249
    393a:	9c e0       	ldi	r25, 0x0C	; 12
    393c:	0e 94 74 38 	call	0x70e8	; 0x70e8 <_ZN7TwoWire15endTransmissionEv>
    3940:	81 11       	cpse	r24, r1
    3942:	0a c0       	rjmp	.+20     	; 0x3958 <_ZN13DS3231M_Class5beginEm+0x50>
    3944:	62 e0       	ldi	r22, 0x02	; 2
    3946:	ce 01       	movw	r24, r28
    3948:	bd df       	rcall	.-134    	; 0x38c4 <_ZN13DS3231M_Class8readByteEh>
    394a:	48 2f       	mov	r20, r24
    394c:	4f 7b       	andi	r20, 0xBF	; 191
    394e:	62 e0       	ldi	r22, 0x02	; 2
    3950:	ce 01       	movw	r24, r28
    3952:	98 df       	rcall	.-208    	; 0x3884 <_ZN13DS3231M_Class9writeByteEhh>
    3954:	81 e0       	ldi	r24, 0x01	; 1
    3956:	01 c0       	rjmp	.+2      	; 0x395a <_ZN13DS3231M_Class5beginEm+0x52>
    3958:	80 e0       	ldi	r24, 0x00	; 0
    395a:	df 91       	pop	r29
    395c:	cf 91       	pop	r28
    395e:	ff 90       	pop	r15
    3960:	ef 90       	pop	r14
    3962:	df 90       	pop	r13
    3964:	cf 90       	pop	r12
    3966:	08 95       	ret

00003968 <_ZN13DS3231M_Class3nowEv>:
/*******************************************************************************************************************
** Method now() returns the current date/time                                                                     **
** then the power down time is returned, if the timeType = 2 then the power up time is returned. These options are**
** not documented as the official calls are "getPowerOffDate" and "getPowerOnDate"                                **
*******************************************************************************************************************/
DateTime DS3231M_Class::now(){                                                // Return current date/time         //
    3968:	0f 93       	push	r16
    396a:	1f 93       	push	r17
    396c:	cf 93       	push	r28
    396e:	df 93       	push	r29
    3970:	8c 01       	movw	r16, r24
    3972:	eb 01       	movw	r28, r22
  Wire.beginTransmission(DS3231M_ADDRESS);                                    // Address the I2C device           //
    3974:	68 e6       	ldi	r22, 0x68	; 104
    3976:	89 ef       	ldi	r24, 0xF9	; 249
    3978:	9c e0       	ldi	r25, 0x0C	; 12
    397a:	0e 94 f3 37 	call	0x6fe6	; 0x6fe6 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(DS3231M_RTCSEC);                                                 // Start at specified register      //
    397e:	60 e0       	ldi	r22, 0x00	; 0
    3980:	89 ef       	ldi	r24, 0xF9	; 249
    3982:	9c e0       	ldi	r25, 0x0C	; 12
    3984:	0e 94 a2 37 	call	0x6f44	; 0x6f44 <_ZN7TwoWire5writeEh>
  _TransmissionStatus = Wire.endTransmission();                               // Close transmission               //
    3988:	89 ef       	ldi	r24, 0xF9	; 249
    398a:	9c e0       	ldi	r25, 0x0C	; 12
    398c:	0e 94 74 38 	call	0x70e8	; 0x70e8 <_ZN7TwoWire15endTransmissionEv>
    3990:	88 83       	st	Y, r24
  Wire.requestFrom(DS3231M_ADDRESS, (uint8_t)7);                              // Request 7 bytes of data          //
    3992:	47 e0       	ldi	r20, 0x07	; 7
    3994:	68 e6       	ldi	r22, 0x68	; 104
    3996:	89 ef       	ldi	r24, 0xF9	; 249
    3998:	9c e0       	ldi	r25, 0x0C	; 12
    399a:	0e 94 70 38 	call	0x70e0	; 0x70e0 <_ZN7TwoWire11requestFromEhh>
  if(Wire.available()==7) {                                                   // Wait until the data is ready     //
    399e:	89 ef       	ldi	r24, 0xF9	; 249
    39a0:	9c e0       	ldi	r25, 0x0C	; 12
    39a2:	0e 94 14 37 	call	0x6e28	; 0x6e28 <_ZN7TwoWire9availableEv>
    39a6:	07 97       	sbiw	r24, 0x07	; 7
    39a8:	09 f0       	breq	.+2      	; 0x39ac <_ZN13DS3231M_Class3nowEv+0x44>
    39aa:	64 c0       	rjmp	.+200    	; 0x3a74 <_ZN13DS3231M_Class3nowEv+0x10c>
    _ss = bcd2int(Wire.read() & 0x7F);                                        // Mask high bit in seconds         //
    39ac:	89 ef       	ldi	r24, 0xF9	; 249
    39ae:	9c e0       	ldi	r25, 0x0C	; 12
    39b0:	0e 94 1c 37 	call	0x6e38	; 0x6e38 <_ZN7TwoWire4readEv>
    39b4:	98 2f       	mov	r25, r24
    39b6:	96 95       	lsr	r25
    39b8:	96 95       	lsr	r25
    39ba:	96 95       	lsr	r25
    39bc:	9e 70       	andi	r25, 0x0E	; 14
    39be:	29 2f       	mov	r18, r25
    39c0:	22 0f       	add	r18, r18
    39c2:	22 0f       	add	r18, r18
    39c4:	92 0f       	add	r25, r18
    39c6:	8f 70       	andi	r24, 0x0F	; 15
    39c8:	89 0f       	add	r24, r25
    39ca:	8d 83       	std	Y+5, r24	; 0x05
    _mm = bcd2int(Wire.read() & 0x7F);                                        // Mask high bit in minutes         //
    39cc:	89 ef       	ldi	r24, 0xF9	; 249
    39ce:	9c e0       	ldi	r25, 0x0C	; 12
    39d0:	0e 94 1c 37 	call	0x6e38	; 0x6e38 <_ZN7TwoWire4readEv>
    39d4:	98 2f       	mov	r25, r24
    39d6:	96 95       	lsr	r25
    39d8:	96 95       	lsr	r25
    39da:	96 95       	lsr	r25
    39dc:	9e 70       	andi	r25, 0x0E	; 14
    39de:	29 2f       	mov	r18, r25
    39e0:	22 0f       	add	r18, r18
    39e2:	22 0f       	add	r18, r18
    39e4:	92 0f       	add	r25, r18
    39e6:	8f 70       	andi	r24, 0x0F	; 15
    39e8:	89 0f       	add	r24, r25
    39ea:	8e 83       	std	Y+6, r24	; 0x06
    _hh = bcd2int(Wire.read() & 0x7F);                                        // Mask high bit in hours           //
    39ec:	89 ef       	ldi	r24, 0xF9	; 249
    39ee:	9c e0       	ldi	r25, 0x0C	; 12
    39f0:	0e 94 1c 37 	call	0x6e38	; 0x6e38 <_ZN7TwoWire4readEv>
    39f4:	98 2f       	mov	r25, r24
    39f6:	96 95       	lsr	r25
    39f8:	96 95       	lsr	r25
    39fa:	96 95       	lsr	r25
    39fc:	9e 70       	andi	r25, 0x0E	; 14
    39fe:	29 2f       	mov	r18, r25
    3a00:	22 0f       	add	r18, r18
    3a02:	22 0f       	add	r18, r18
    3a04:	92 0f       	add	r25, r18
    3a06:	8f 70       	andi	r24, 0x0F	; 15
    3a08:	89 0f       	add	r24, r25
    3a0a:	8f 83       	std	Y+7, r24	; 0x07
    Wire.read();                                                              // Ignore Day-Of-Week register      //
    3a0c:	89 ef       	ldi	r24, 0xF9	; 249
    3a0e:	9c e0       	ldi	r25, 0x0C	; 12
    3a10:	0e 94 1c 37 	call	0x6e38	; 0x6e38 <_ZN7TwoWire4readEv>
    _d = bcd2int(Wire.read()  & 0x3F);                                        // Mask 2 high bits for day of month//
    3a14:	89 ef       	ldi	r24, 0xF9	; 249
    3a16:	9c e0       	ldi	r25, 0x0C	; 12
    3a18:	0e 94 1c 37 	call	0x6e38	; 0x6e38 <_ZN7TwoWire4readEv>
    3a1c:	98 2f       	mov	r25, r24
    3a1e:	96 95       	lsr	r25
    3a20:	96 95       	lsr	r25
    3a22:	96 95       	lsr	r25
    3a24:	96 70       	andi	r25, 0x06	; 6
    3a26:	29 2f       	mov	r18, r25
    3a28:	22 0f       	add	r18, r18
    3a2a:	22 0f       	add	r18, r18
    3a2c:	92 0f       	add	r25, r18
    3a2e:	8f 70       	andi	r24, 0x0F	; 15
    3a30:	89 0f       	add	r24, r25
    3a32:	88 87       	std	Y+8, r24	; 0x08
    _m = bcd2int(Wire.read()  & 0x1F);                                        // Mask 3 high bits for Month       //
    3a34:	89 ef       	ldi	r24, 0xF9	; 249
    3a36:	9c e0       	ldi	r25, 0x0C	; 12
    3a38:	0e 94 1c 37 	call	0x6e38	; 0x6e38 <_ZN7TwoWire4readEv>
    3a3c:	84 fb       	bst	r24, 4
    3a3e:	99 27       	eor	r25, r25
    3a40:	90 f9       	bld	r25, 0
    3a42:	99 0f       	add	r25, r25
    3a44:	29 2f       	mov	r18, r25
    3a46:	22 0f       	add	r18, r18
    3a48:	22 0f       	add	r18, r18
    3a4a:	92 0f       	add	r25, r18
    3a4c:	8f 70       	andi	r24, 0x0F	; 15
    3a4e:	89 0f       	add	r24, r25
    3a50:	89 87       	std	Y+9, r24	; 0x09
    _y = bcd2int(Wire.read()) + 2000;                                         // Add 2000 to internal year        //
    3a52:	89 ef       	ldi	r24, 0xF9	; 249
    3a54:	9c e0       	ldi	r25, 0x0C	; 12
    3a56:	0e 94 1c 37 	call	0x6e38	; 0x6e38 <_ZN7TwoWire4readEv>
    3a5a:	98 2f       	mov	r25, r24
    3a5c:	92 95       	swap	r25
    3a5e:	9f 70       	andi	r25, 0x0F	; 15
    3a60:	8f 70       	andi	r24, 0x0F	; 15
    3a62:	2a e0       	ldi	r18, 0x0A	; 10
    3a64:	92 9f       	mul	r25, r18
    3a66:	80 0d       	add	r24, r0
    3a68:	11 24       	eor	r1, r1
    3a6a:	90 e0       	ldi	r25, 0x00	; 0
    3a6c:	80 53       	subi	r24, 0x30	; 48
    3a6e:	98 4f       	sbci	r25, 0xF8	; 248
    3a70:	9b 87       	std	Y+11, r25	; 0x0b
    3a72:	8a 87       	std	Y+10, r24	; 0x0a
  } // of if-then there is data to be read                                    //                                  //
  return DateTime (_y, _m, _d, _hh, _mm, _ss);                                // Return class value               //
    3a74:	2d 81       	ldd	r18, Y+5	; 0x05
    3a76:	3e 81       	ldd	r19, Y+6	; 0x06
    3a78:	4f 81       	ldd	r20, Y+7	; 0x07
    3a7a:	58 85       	ldd	r21, Y+8	; 0x08
    3a7c:	69 85       	ldd	r22, Y+9	; 0x09
    3a7e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a80:	9b 85       	ldd	r25, Y+11	; 0x0b
  } // of for-next each month                                                 //                                  //
  d = days + 1;                                                               //                                  //
} // of method DateTime()                                                     //----------------------------------//
DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour,  //                                  //
                    uint8_t min, uint8_t sec) {                               //                                  //
  if (year >= 2000)                                                           //                                  //
    3a82:	80 3d       	cpi	r24, 0xD0	; 208
    3a84:	77 e0       	ldi	r23, 0x07	; 7
    3a86:	97 07       	cpc	r25, r23
    3a88:	10 f0       	brcs	.+4      	; 0x3a8e <_ZN13DS3231M_Class3nowEv+0x126>
  year -= 2000;                                                               //                                  //
    3a8a:	80 5d       	subi	r24, 0xD0	; 208
    3a8c:	97 40       	sbci	r25, 0x07	; 7
  yOff = year;                                                                //                                  //
    3a8e:	f8 01       	movw	r30, r16
    3a90:	80 83       	st	Z, r24
  m = month;                                                                  //                                  //
    3a92:	61 83       	std	Z+1, r22	; 0x01
  d = day;                                                                    //                                  //
    3a94:	52 83       	std	Z+2, r21	; 0x02
  hh = hour;                                                                  //                                  //
    3a96:	43 83       	std	Z+3, r20	; 0x03
  mm = min;                                                                   //                                  //
    3a98:	34 83       	std	Z+4, r19	; 0x04
  ss = sec;                                                                   //                                  //
    3a9a:	25 83       	std	Z+5, r18	; 0x05
    _d = bcd2int(Wire.read()  & 0x3F);                                        // Mask 2 high bits for day of month//
    _m = bcd2int(Wire.read()  & 0x1F);                                        // Mask 3 high bits for Month       //
    _y = bcd2int(Wire.read()) + 2000;                                         // Add 2000 to internal year        //
  } // of if-then there is data to be read                                    //                                  //
  return DateTime (_y, _m, _d, _hh, _mm, _ss);                                // Return class value               //
} // of method now                                                            //                                  //
    3a9c:	c8 01       	movw	r24, r16
    3a9e:	df 91       	pop	r29
    3aa0:	cf 91       	pop	r28
    3aa2:	1f 91       	pop	r17
    3aa4:	0f 91       	pop	r16
    3aa6:	08 95       	ret

00003aa8 <_ZN13DS3231M_Class6adjustERK8DateTime>:
** oscillator is stopped during the process and needs to be restarted upon completion.                            **
*******************************************************************************************************************/
void DS3231M_Class::adjust() {                                                // Set the RTC date and Time        //
  adjust(DateTime(F(__DATE__), F(__TIME__)));                                 // Set to compile time              //
} // of method adjust                                                         /-----------------------------------//
void DS3231M_Class::adjust(const DateTime& dt) {                              // Set the RTC date and Time        //
    3aa8:	df 92       	push	r13
    3aaa:	ef 92       	push	r14
    3aac:	ff 92       	push	r15
    3aae:	0f 93       	push	r16
    3ab0:	1f 93       	push	r17
    3ab2:	cf 93       	push	r28
    3ab4:	df 93       	push	r29
    3ab6:	00 d0       	rcall	.+0      	; 0x3ab8 <_ZN13DS3231M_Class6adjustERK8DateTime+0x10>
    3ab8:	00 d0       	rcall	.+0      	; 0x3aba <_ZN13DS3231M_Class6adjustERK8DateTime+0x12>
    3aba:	00 d0       	rcall	.+0      	; 0x3abc <_ZN13DS3231M_Class6adjustERK8DateTime+0x14>
    3abc:	cd b7       	in	r28, 0x3d	; 61
    3abe:	de b7       	in	r29, 0x3e	; 62
    3ac0:	8c 01       	movw	r16, r24
    3ac2:	7b 01       	movw	r14, r22
    3ac4:	fb 01       	movw	r30, r22
    3ac6:	85 81       	ldd	r24, Z+5	; 0x05
  writeByte(DS3231M_RTCSEC,int2bcd(dt.second()));                             // Write seconds, keep device off   //
    3ac8:	9a e0       	ldi	r25, 0x0A	; 10
    3aca:	d9 2e       	mov	r13, r25
    3acc:	6d 2d       	mov	r22, r13
    3ace:	0e 94 21 41 	call	0x8242	; 0x8242 <__udivmodqi4>
    3ad2:	49 2f       	mov	r20, r25
    3ad4:	f0 e1       	ldi	r31, 0x10	; 16
    3ad6:	8f 9f       	mul	r24, r31
    3ad8:	40 0d       	add	r20, r0
    3ada:	11 24       	eor	r1, r1
    3adc:	60 e0       	ldi	r22, 0x00	; 0
    3ade:	c8 01       	movw	r24, r16
    3ae0:	d1 de       	rcall	.-606    	; 0x3884 <_ZN13DS3231M_Class9writeByteEhh>
    3ae2:	f7 01       	movw	r30, r14
    3ae4:	84 81       	ldd	r24, Z+4	; 0x04
  writeByte(DS3231M_RTCMIN,int2bcd(dt.minute()));                             // Write the minutes value          //
    3ae6:	6d 2d       	mov	r22, r13
    3ae8:	0e 94 21 41 	call	0x8242	; 0x8242 <__udivmodqi4>
    3aec:	49 2f       	mov	r20, r25
    3aee:	f0 e1       	ldi	r31, 0x10	; 16
    3af0:	8f 9f       	mul	r24, r31
    3af2:	40 0d       	add	r20, r0
    3af4:	11 24       	eor	r1, r1
    3af6:	61 e0       	ldi	r22, 0x01	; 1
    3af8:	c8 01       	movw	r24, r16
    3afa:	c4 de       	rcall	.-632    	; 0x3884 <_ZN13DS3231M_Class9writeByteEhh>
    3afc:	f7 01       	movw	r30, r14
    3afe:	83 81       	ldd	r24, Z+3	; 0x03
  writeByte(DS3231M_RTCHOUR,int2bcd(dt.hour()));                              // Also re-sets the 24Hour clock on //
    3b00:	6d 2d       	mov	r22, r13
    3b02:	0e 94 21 41 	call	0x8242	; 0x8242 <__udivmodqi4>
    3b06:	49 2f       	mov	r20, r25
    3b08:	f0 e1       	ldi	r31, 0x10	; 16
    3b0a:	8f 9f       	mul	r24, r31
    3b0c:	40 0d       	add	r20, r0
    3b0e:	11 24       	eor	r1, r1
    3b10:	62 e0       	ldi	r22, 0x02	; 2
    3b12:	c8 01       	movw	r24, r16
  writeByte(DS3231M_RTCWKDAY,dt.dayOfTheWeek());                              // Update the weekday               //
    3b14:	b7 de       	rcall	.-658    	; 0x3884 <_ZN13DS3231M_Class9writeByteEhh>
    3b16:	c7 01       	movw	r24, r14
    3b18:	2f de       	rcall	.-930    	; 0x3778 <_ZNK8DateTime12dayOfTheWeekEv>
    3b1a:	48 2f       	mov	r20, r24
    3b1c:	63 e0       	ldi	r22, 0x03	; 3
    3b1e:	c8 01       	movw	r24, r16
    3b20:	b1 de       	rcall	.-670    	; 0x3884 <_ZN13DS3231M_Class9writeByteEhh>
    3b22:	f7 01       	movw	r30, r14
    3b24:	82 81       	ldd	r24, Z+2	; 0x02
  writeByte(DS3231M_RTCDATE,int2bcd(dt.day()));                               // Write the day of month           //
    3b26:	6d 2d       	mov	r22, r13
    3b28:	0e 94 21 41 	call	0x8242	; 0x8242 <__udivmodqi4>
    3b2c:	49 2f       	mov	r20, r25
    3b2e:	f0 e1       	ldi	r31, 0x10	; 16
    3b30:	8f 9f       	mul	r24, r31
    3b32:	40 0d       	add	r20, r0
    3b34:	11 24       	eor	r1, r1
    3b36:	64 e0       	ldi	r22, 0x04	; 4
    3b38:	c8 01       	movw	r24, r16
    3b3a:	a4 de       	rcall	.-696    	; 0x3884 <_ZN13DS3231M_Class9writeByteEhh>
    3b3c:	f7 01       	movw	r30, r14
    3b3e:	81 81       	ldd	r24, Z+1	; 0x01
  writeByte(DS3231M_RTCMTH,int2bcd(dt.month()));                              // Month, ignore century bit        //
    3b40:	6d 2d       	mov	r22, r13
    3b42:	0e 94 21 41 	call	0x8242	; 0x8242 <__udivmodqi4>
    3b46:	49 2f       	mov	r20, r25
    3b48:	f0 e1       	ldi	r31, 0x10	; 16
    3b4a:	8f 9f       	mul	r24, r31
    3b4c:	40 0d       	add	r20, r0
    3b4e:	11 24       	eor	r1, r1
    3b50:	65 e0       	ldi	r22, 0x05	; 5
    3b52:	c8 01       	movw	r24, r16
    3b54:	97 de       	rcall	.-722    	; 0x3884 <_ZN13DS3231M_Class9writeByteEhh>
  writeByte(DS3231M_RTCYEAR,int2bcd(dt.year()-2000));                         // Write the year                   //
    3b56:	f7 01       	movw	r30, r14
    3b58:	80 81       	ld	r24, Z
    3b5a:	6d 2d       	mov	r22, r13
    3b5c:	0e 94 21 41 	call	0x8242	; 0x8242 <__udivmodqi4>
    3b60:	49 2f       	mov	r20, r25
    3b62:	f0 e1       	ldi	r31, 0x10	; 16
    3b64:	8f 9f       	mul	r24, r31
    3b66:	40 0d       	add	r20, r0
    3b68:	11 24       	eor	r1, r1
    3b6a:	66 e0       	ldi	r22, 0x06	; 6
    3b6c:	c8 01       	movw	r24, r16
  writeByte(DS3231M_STATUS,readByte(DS3231M_STATUS)&B01111111);               // Unset OSC flag bit if set        //
    3b6e:	8a de       	rcall	.-748    	; 0x3884 <_ZN13DS3231M_Class9writeByteEhh>
    3b70:	6f e0       	ldi	r22, 0x0F	; 15
    3b72:	c8 01       	movw	r24, r16
    3b74:	a7 de       	rcall	.-690    	; 0x38c4 <_ZN13DS3231M_Class8readByteEh>
    3b76:	48 2f       	mov	r20, r24
    3b78:	4f 77       	andi	r20, 0x7F	; 127
    3b7a:	6f e0       	ldi	r22, 0x0F	; 15
    3b7c:	c8 01       	movw	r24, r16
  writeByte(DS3231M_CONTROL,readByte(DS3231M_CONTROL)&B01111111);             // Unset EOSC flag bit if set       //
    3b7e:	82 de       	rcall	.-764    	; 0x3884 <_ZN13DS3231M_Class9writeByteEhh>
    3b80:	6e e0       	ldi	r22, 0x0E	; 14
    3b82:	c8 01       	movw	r24, r16
    3b84:	9f de       	rcall	.-706    	; 0x38c4 <_ZN13DS3231M_Class8readByteEh>
    3b86:	48 2f       	mov	r20, r24
    3b88:	4f 77       	andi	r20, 0x7F	; 127
    3b8a:	6e e0       	ldi	r22, 0x0E	; 14
    3b8c:	c8 01       	movw	r24, r16
  _SetUnixTime = now().unixtime();                                            // Store time of last change        //
    3b8e:	7a de       	rcall	.-780    	; 0x3884 <_ZN13DS3231M_Class9writeByteEhh>
    3b90:	b8 01       	movw	r22, r16
    3b92:	ce 01       	movw	r24, r28
    3b94:	01 96       	adiw	r24, 0x01	; 1
    3b96:	e8 de       	rcall	.-560    	; 0x3968 <_ZN13DS3231M_Class3nowEv>
    3b98:	ce 01       	movw	r24, r28
    3b9a:	01 96       	adiw	r24, 0x01	; 1
    3b9c:	f9 dd       	rcall	.-1038   	; 0x3790 <_ZNK8DateTime8unixtimeEv>
    3b9e:	f8 01       	movw	r30, r16
    3ba0:	61 83       	std	Z+1, r22	; 0x01
    3ba2:	72 83       	std	Z+2, r23	; 0x02
    3ba4:	83 83       	std	Z+3, r24	; 0x03
    3ba6:	94 83       	std	Z+4, r25	; 0x04
    3ba8:	26 96       	adiw	r28, 0x06	; 6
} // of method adjust                                                         //                                  //
    3baa:	0f b6       	in	r0, 0x3f	; 63
    3bac:	f8 94       	cli
    3bae:	de bf       	out	0x3e, r29	; 62
    3bb0:	0f be       	out	0x3f, r0	; 63
    3bb2:	cd bf       	out	0x3d, r28	; 61
    3bb4:	df 91       	pop	r29
    3bb6:	cf 91       	pop	r28
    3bb8:	1f 91       	pop	r17
    3bba:	0f 91       	pop	r16
    3bbc:	ff 90       	pop	r15
    3bbe:	ef 90       	pop	r14
    3bc0:	df 90       	pop	r13
    3bc2:	08 95       	ret

00003bc4 <_ZN13DS3231M_Class6adjustEv>:
    3bc4:	0f 93       	push	r16
/*******************************************************************************************************************
** Method adjust set the current date/time. This is an overloaded function, if called with no parameters then the **
** RTC is set to the date/time when the program was compiled and uploaded. Otherwise the values are set, but the  **
** oscillator is stopped during the process and needs to be restarted upon completion.                            **
*******************************************************************************************************************/
void DS3231M_Class::adjust() {                                                // Set the RTC date and Time        //
    3bc6:	1f 93       	push	r17
    3bc8:	cf 93       	push	r28
    3bca:	df 93       	push	r29
    3bcc:	00 d0       	rcall	.+0      	; 0x3bce <_ZN13DS3231M_Class6adjustEv+0xa>
    3bce:	00 d0       	rcall	.+0      	; 0x3bd0 <_ZN13DS3231M_Class6adjustEv+0xc>
    3bd0:	00 d0       	rcall	.+0      	; 0x3bd2 <_ZN13DS3231M_Class6adjustEv+0xe>
    3bd2:	cd b7       	in	r28, 0x3d	; 61
    3bd4:	de b7       	in	r29, 0x3e	; 62
    3bd6:	8c 01       	movw	r16, r24
  adjust(DateTime(F(__DATE__), F(__TIME__)));                                 // Set to compile time              //
    3bd8:	44 e1       	ldi	r20, 0x14	; 20
    3bda:	52 e0       	ldi	r21, 0x02	; 2
    3bdc:	68 e0       	ldi	r22, 0x08	; 8
    3bde:	72 e0       	ldi	r23, 0x02	; 2
    3be0:	ce 01       	movw	r24, r28
    3be2:	01 96       	adiw	r24, 0x01	; 1
    3be4:	54 dd       	rcall	.-1368   	; 0x368e <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>
    3be6:	be 01       	movw	r22, r28
    3be8:	6f 5f       	subi	r22, 0xFF	; 255
    3bea:	7f 4f       	sbci	r23, 0xFF	; 255
    3bec:	c8 01       	movw	r24, r16
    3bee:	5c df       	rcall	.-328    	; 0x3aa8 <_ZN13DS3231M_Class6adjustERK8DateTime>
} // of method adjust                                                         /-----------------------------------//
    3bf0:	26 96       	adiw	r28, 0x06	; 6
    3bf2:	0f b6       	in	r0, 0x3f	; 63
    3bf4:	f8 94       	cli
    3bf6:	de bf       	out	0x3e, r29	; 62
    3bf8:	0f be       	out	0x3f, r0	; 63
    3bfa:	cd bf       	out	0x3d, r28	; 61
    3bfc:	df 91       	pop	r29
    3bfe:	cf 91       	pop	r28
    3c00:	1f 91       	pop	r17
    3c02:	0f 91       	pop	r16
    3c04:	08 95       	ret

00003c06 <_GLOBAL__sub_I__ZN9DhcpClass13beginWithDHCPEPhmm>:
    unsigned long m = n;
    n /= 16;
    char c = m - 16 * n;
    *str-- = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);
}
    3c06:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    3c08:	00 e0       	ldi	r16, 0x00	; 0
    3c0a:	20 e0       	ldi	r18, 0x00	; 0
    3c0c:	40 e0       	ldi	r20, 0x00	; 0
    3c0e:	60 e0       	ldi	r22, 0x00	; 0
    3c10:	89 e3       	ldi	r24, 0x39	; 57
    3c12:	9c e0       	ldi	r25, 0x0C	; 12
    3c14:	0e 94 6f 3a 	call	0x74de	; 0x74de <_ZN9IPAddressC1Ehhhh>
    3c18:	0f 91       	pop	r16
    3c1a:	08 95       	ret

00003c1c <_ZN9DNSClient5beginERK9IPAddress>:
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    3c1c:	fb 01       	movw	r30, r22
    3c1e:	42 81       	ldd	r20, Z+2	; 0x02
    3c20:	53 81       	ldd	r21, Z+3	; 0x03
    3c22:	64 81       	ldd	r22, Z+4	; 0x04
    3c24:	75 81       	ldd	r23, Z+5	; 0x05
    3c26:	fc 01       	movw	r30, r24
    3c28:	42 83       	std	Z+2, r20	; 0x02
    3c2a:	53 83       	std	Z+3, r21	; 0x03
    3c2c:	64 83       	std	Z+4, r22	; 0x04
    3c2e:	75 83       	std	Z+5, r23	; 0x05
#define INVALID_RESPONSE -4

void DNSClient::begin(const IPAddress& aDNSServer)
{
    iDNSServer = aDNSServer;
    iRequestId = 0;
    3c30:	17 82       	std	Z+7, r1	; 0x07
    3c32:	16 82       	std	Z+6, r1	; 0x06
    3c34:	08 95       	ret

00003c36 <_ZN9DNSClient9inet_atonEPKcR9IPAddress>:
}


int DNSClient::inet_aton(const char* aIPAddrString, IPAddress& aResult)
{
    3c36:	cf 93       	push	r28
    3c38:	df 93       	push	r29
    3c3a:	da 01       	movw	r26, r20
    3c3c:	fb 01       	movw	r30, r22
    3c3e:	eb 01       	movw	r28, r22
    // See if we've been given a valid IP address
    const char* p =aIPAddrString;
    while (*p &&
    3c40:	89 91       	ld	r24, Y+
    3c42:	81 11       	cpse	r24, r1
    3c44:	fd cf       	rjmp	.-6      	; 0x3c40 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0xa>
    3c46:	80 e0       	ldi	r24, 0x00	; 0
    3c48:	90 e0       	ldi	r25, 0x00	; 0
    3c4a:	20 e0       	ldi	r18, 0x00	; 0
    3c4c:	30 e0       	ldi	r19, 0x00	; 0
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
    3c4e:	4a e0       	ldi	r20, 0x0A	; 10
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
        int segmentValue =0;
        while (*p && (segment < 4))
    3c50:	51 91       	ld	r21, Z+
    3c52:	55 23       	and	r21, r21
    3c54:	e9 f0       	breq	.+58     	; 0x3c90 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x5a>
    3c56:	24 30       	cpi	r18, 0x04	; 4
    3c58:	31 05       	cpc	r19, r1
    3c5a:	44 f5       	brge	.+80     	; 0x3cac <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
        {
            if (*p == '.')
    3c5c:	5e 32       	cpi	r21, 0x2E	; 46
    3c5e:	69 f4       	brne	.+26     	; 0x3c7a <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x44>
            {
                // We've reached the end of a segment
                if (segmentValue > 255)
    3c60:	8f 3f       	cpi	r24, 0xFF	; 255
    3c62:	91 05       	cpc	r25, r1
    3c64:	09 f0       	breq	.+2      	; 0x3c68 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x32>
    3c66:	14 f5       	brge	.+68     	; 0x3cac <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
                    // You can't have IP address segments that don't fit in a byte
                    return 0;
                }
                else
                {
                    aResult[segment] = (byte)segmentValue;
    3c68:	ed 01       	movw	r28, r26
    3c6a:	c2 0f       	add	r28, r18
    3c6c:	d3 1f       	adc	r29, r19
    3c6e:	8a 83       	std	Y+2, r24	; 0x02
                    segment++;
    3c70:	2f 5f       	subi	r18, 0xFF	; 255
    3c72:	3f 4f       	sbci	r19, 0xFF	; 255
                    segmentValue = 0;
    3c74:	80 e0       	ldi	r24, 0x00	; 0
    3c76:	90 e0       	ldi	r25, 0x00	; 0
    3c78:	eb cf       	rjmp	.-42     	; 0x3c50 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x1a>
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
    3c7a:	48 9f       	mul	r20, r24
    3c7c:	b0 01       	movw	r22, r0
    3c7e:	49 9f       	mul	r20, r25
    3c80:	70 0d       	add	r23, r0
    3c82:	11 24       	eor	r1, r1
    3c84:	85 2f       	mov	r24, r21
    3c86:	90 e0       	ldi	r25, 0x00	; 0
    3c88:	c0 97       	sbiw	r24, 0x30	; 48
    3c8a:	86 0f       	add	r24, r22
    3c8c:	97 1f       	adc	r25, r23
    3c8e:	e0 cf       	rjmp	.-64     	; 0x3c50 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x1a>
            }
            p++;
        }
        // We've reached the end of address, but there'll still be the last
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
    3c90:	8f 3f       	cpi	r24, 0xFF	; 255
    3c92:	91 05       	cpc	r25, r1
    3c94:	09 f0       	breq	.+2      	; 0x3c98 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x62>
    3c96:	54 f4       	brge	.+20     	; 0x3cac <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
    3c98:	24 30       	cpi	r18, 0x04	; 4
    3c9a:	31 05       	cpc	r19, r1
    3c9c:	3c f4       	brge	.+14     	; 0x3cac <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
            // or more than four segments
            return 0;
        }
        else
        {
            aResult[segment] = (byte)segmentValue;
    3c9e:	fd 01       	movw	r30, r26
    3ca0:	e2 0f       	add	r30, r18
    3ca2:	f3 1f       	adc	r31, r19
    3ca4:	82 83       	std	Z+2, r24	; 0x02
            return 1;
    3ca6:	81 e0       	ldi	r24, 0x01	; 1
    3ca8:	90 e0       	ldi	r25, 0x00	; 0
    3caa:	02 c0       	rjmp	.+4      	; 0x3cb0 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x7a>
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
        {
            // You can't have IP address segments that don't fit in a byte,
            // or more than four segments
            return 0;
    3cac:	80 e0       	ldi	r24, 0x00	; 0
    3cae:	90 e0       	ldi	r25, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    3cb0:	df 91       	pop	r29
    3cb2:	cf 91       	pop	r28
    3cb4:	08 95       	ret

00003cb6 <_GLOBAL__sub_I__ZN9DNSClient5beginERK9IPAddress>:
    // Mark the entire packet as read
    iUdp.flush();

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
}
    3cb6:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    3cb8:	00 e0       	ldi	r16, 0x00	; 0
    3cba:	20 e0       	ldi	r18, 0x00	; 0
    3cbc:	40 e0       	ldi	r20, 0x00	; 0
    3cbe:	60 e0       	ldi	r22, 0x00	; 0
    3cc0:	8f e3       	ldi	r24, 0x3F	; 63
    3cc2:	9c e0       	ldi	r25, 0x0C	; 12
    3cc4:	0e 94 6f 3a 	call	0x74de	; 0x74de <_ZN9IPAddressC1Ehhhh>
    3cc8:	0f 91       	pop	r16
    3cca:	08 95       	ret

00003ccc <_ZN9DNSClient12BuildRequestEPKc>:

    return ret;
}

uint16_t DNSClient::BuildRequest(const char* aName)
{
    3ccc:	8f 92       	push	r8
    3cce:	9f 92       	push	r9
    3cd0:	af 92       	push	r10
    3cd2:	bf 92       	push	r11
    3cd4:	cf 92       	push	r12
    3cd6:	df 92       	push	r13
    3cd8:	ef 92       	push	r14
    3cda:	ff 92       	push	r15
    3cdc:	0f 93       	push	r16
    3cde:	1f 93       	push	r17
    3ce0:	cf 93       	push	r28
    3ce2:	df 93       	push	r29
    3ce4:	00 d0       	rcall	.+0      	; 0x3ce6 <_ZN9DNSClient12BuildRequestEPKc+0x1a>
    3ce6:	1f 92       	push	r1
    3ce8:	cd b7       	in	r28, 0x3d	; 61
    3cea:	de b7       	in	r29, 0x3e	; 62
    3cec:	6c 01       	movw	r12, r24
    3cee:	7b 01       	movw	r14, r22
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    //    |                    ARCOUNT                    |
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    // As we only support one request at a time at present, we can simplify
    // some of this header
    iRequestId = millis(); // generate a random ID
    3cf0:	0e 94 0c 3c 	call	0x7818	; 0x7818 <millis>
    3cf4:	f6 01       	movw	r30, r12
    3cf6:	77 83       	std	Z+7, r23	; 0x07
    3cf8:	66 83       	std	Z+6, r22	; 0x06
    uint16_t twoByteBuffer;

    // FIXME We should also check that there's enough space available to write to, rather
    // FIXME than assume there's enough space (as the code does at present)
    iUdp.write((uint8_t*)&iRequestId, sizeof(iRequestId));
    3cfa:	86 01       	movw	r16, r12
    3cfc:	08 5f       	subi	r16, 0xF8	; 248
    3cfe:	1f 4f       	sbci	r17, 0xFF	; 255
    3d00:	b6 01       	movw	r22, r12
    3d02:	6a 5f       	subi	r22, 0xFA	; 250
    3d04:	7f 4f       	sbci	r23, 0xFF	; 255
    3d06:	42 e0       	ldi	r20, 0x02	; 2
    3d08:	50 e0       	ldi	r21, 0x00	; 0
    3d0a:	c8 01       	movw	r24, r16
    3d0c:	55 d6       	rcall	.+3242   	; 0x49b8 <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = htons(QUERY_FLAG | OPCODE_STANDARD_QUERY | RECURSION_DESIRED_FLAG);
    3d0e:	81 e0       	ldi	r24, 0x01	; 1
    3d10:	90 e0       	ldi	r25, 0x00	; 0
    3d12:	9a 83       	std	Y+2, r25	; 0x02
    3d14:	89 83       	std	Y+1, r24	; 0x01
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    3d16:	42 e0       	ldi	r20, 0x02	; 2
    3d18:	50 e0       	ldi	r21, 0x00	; 0
    3d1a:	be 01       	movw	r22, r28
    3d1c:	6f 5f       	subi	r22, 0xFF	; 255
    3d1e:	7f 4f       	sbci	r23, 0xFF	; 255
    3d20:	c8 01       	movw	r24, r16
    3d22:	4a d6       	rcall	.+3220   	; 0x49b8 <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = htons(1);  // One question record
    3d24:	80 e0       	ldi	r24, 0x00	; 0
    3d26:	91 e0       	ldi	r25, 0x01	; 1
    3d28:	9a 83       	std	Y+2, r25	; 0x02
    3d2a:	89 83       	std	Y+1, r24	; 0x01
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    3d2c:	42 e0       	ldi	r20, 0x02	; 2
    3d2e:	50 e0       	ldi	r21, 0x00	; 0
    3d30:	be 01       	movw	r22, r28
    3d32:	6f 5f       	subi	r22, 0xFF	; 255
    3d34:	7f 4f       	sbci	r23, 0xFF	; 255
    3d36:	c8 01       	movw	r24, r16
    3d38:	3f d6       	rcall	.+3198   	; 0x49b8 <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = 0;  // Zero answer records
    3d3a:	1a 82       	std	Y+2, r1	; 0x02
    3d3c:	19 82       	std	Y+1, r1	; 0x01
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    3d3e:	42 e0       	ldi	r20, 0x02	; 2
    3d40:	50 e0       	ldi	r21, 0x00	; 0
    3d42:	be 01       	movw	r22, r28
    3d44:	6f 5f       	subi	r22, 0xFF	; 255
    3d46:	7f 4f       	sbci	r23, 0xFF	; 255
    3d48:	c8 01       	movw	r24, r16
    3d4a:	36 d6       	rcall	.+3180   	; 0x49b8 <_ZN11EthernetUDP5writeEPKhj>

    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    3d4c:	42 e0       	ldi	r20, 0x02	; 2
    3d4e:	50 e0       	ldi	r21, 0x00	; 0
    3d50:	be 01       	movw	r22, r28
    3d52:	6f 5f       	subi	r22, 0xFF	; 255
    3d54:	7f 4f       	sbci	r23, 0xFF	; 255
    3d56:	c8 01       	movw	r24, r16
    3d58:	2f d6       	rcall	.+3166   	; 0x49b8 <_ZN11EthernetUDP5writeEPKhj>
    // and zero additional records
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    3d5a:	42 e0       	ldi	r20, 0x02	; 2
    3d5c:	50 e0       	ldi	r21, 0x00	; 0
    3d5e:	be 01       	movw	r22, r28
    3d60:	6f 5f       	subi	r22, 0xFF	; 255
    3d62:	7f 4f       	sbci	r23, 0xFF	; 255
    3d64:	c8 01       	movw	r24, r16
    3d66:	28 d6       	rcall	.+3152   	; 0x49b8 <_ZN11EthernetUDP5writeEPKhj>

    // Build question
    const char* start =aName;
    const char* end =start;
    3d68:	57 01       	movw	r10, r14
    uint8_t len;
    // Run through the name being requested
    while (*end)
    3d6a:	f5 01       	movw	r30, r10
    3d6c:	80 81       	ld	r24, Z
    3d6e:	88 23       	and	r24, r24
    3d70:	f9 f0       	breq	.+62     	; 0x3db0 <_ZN9DNSClient12BuildRequestEPKc+0xe4>
    3d72:	a7 01       	movw	r20, r14
    3d74:	5a 01       	movw	r10, r20
    {
        // Find out how long this section of the name is
        end = start;
        while (*end && (*end != '.') )
    3d76:	f5 01       	movw	r30, r10
    3d78:	81 91       	ld	r24, Z+
    3d7a:	6f 01       	movw	r12, r30
    3d7c:	88 23       	and	r24, r24
    3d7e:	21 f0       	breq	.+8      	; 0x3d88 <_ZN9DNSClient12BuildRequestEPKc+0xbc>
    3d80:	8e 32       	cpi	r24, 0x2E	; 46
    3d82:	11 f0       	breq	.+4      	; 0x3d88 <_ZN9DNSClient12BuildRequestEPKc+0xbc>
    3d84:	a6 01       	movw	r20, r12
    3d86:	f6 cf       	rjmp	.-20     	; 0x3d74 <_ZN9DNSClient12BuildRequestEPKc+0xa8>
        {
            end++;
        }

        if (end-start > 0)
    3d88:	4a 01       	movw	r8, r20
    3d8a:	8e 18       	sub	r8, r14
    3d8c:	9f 08       	sbc	r9, r15
    3d8e:	18 14       	cp	r1, r8
    3d90:	19 04       	cpc	r1, r9
    3d92:	64 f4       	brge	.+24     	; 0x3dac <_ZN9DNSClient12BuildRequestEPKc+0xe0>
        {
            // Write out the size of this section
            len = end-start;
    3d94:	8b 82       	std	Y+3, r8	; 0x03
            iUdp.write(&len, sizeof(len));
    3d96:	41 e0       	ldi	r20, 0x01	; 1
    3d98:	50 e0       	ldi	r21, 0x00	; 0
    3d9a:	be 01       	movw	r22, r28
    3d9c:	6d 5f       	subi	r22, 0xFD	; 253
    3d9e:	7f 4f       	sbci	r23, 0xFF	; 255
    3da0:	c8 01       	movw	r24, r16
            // And then write out the section
            iUdp.write((uint8_t*)start, end-start);
    3da2:	0a d6       	rcall	.+3092   	; 0x49b8 <_ZN11EthernetUDP5writeEPKhj>
    3da4:	a4 01       	movw	r20, r8
    3da6:	b7 01       	movw	r22, r14
    3da8:	c8 01       	movw	r24, r16
    3daa:	06 d6       	rcall	.+3084   	; 0x49b8 <_ZN11EthernetUDP5writeEPKhj>
        }
        start = end+1;
    3dac:	76 01       	movw	r14, r12
    }

    // We've got to the end of the question name, so
    // terminate it with a zero-length section
    len = 0;
    3dae:	dd cf       	rjmp	.-70     	; 0x3d6a <_ZN9DNSClient12BuildRequestEPKc+0x9e>
    iUdp.write(&len, sizeof(len));
    3db0:	1b 82       	std	Y+3, r1	; 0x03
    3db2:	41 e0       	ldi	r20, 0x01	; 1
    3db4:	50 e0       	ldi	r21, 0x00	; 0
    3db6:	be 01       	movw	r22, r28
    3db8:	6d 5f       	subi	r22, 0xFD	; 253
    3dba:	7f 4f       	sbci	r23, 0xFF	; 255
    3dbc:	c8 01       	movw	r24, r16
    3dbe:	fc d5       	rcall	.+3064   	; 0x49b8 <_ZN11EthernetUDP5writeEPKhj>
    // Finally the type and class of question
    twoByteBuffer = htons(TYPE_A);
    3dc0:	e1 2c       	mov	r14, r1
    3dc2:	ff 24       	eor	r15, r15
    3dc4:	f3 94       	inc	r15
    3dc6:	fa 82       	std	Y+2, r15	; 0x02
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    3dc8:	e9 82       	std	Y+1, r14	; 0x01
    3dca:	42 e0       	ldi	r20, 0x02	; 2
    3dcc:	50 e0       	ldi	r21, 0x00	; 0
    3dce:	be 01       	movw	r22, r28
    3dd0:	6f 5f       	subi	r22, 0xFF	; 255
    3dd2:	7f 4f       	sbci	r23, 0xFF	; 255
    3dd4:	c8 01       	movw	r24, r16

    twoByteBuffer = htons(CLASS_IN);  // Internet class of question
    3dd6:	f0 d5       	rcall	.+3040   	; 0x49b8 <_ZN11EthernetUDP5writeEPKhj>
    3dd8:	fa 82       	std	Y+2, r15	; 0x02
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    3dda:	e9 82       	std	Y+1, r14	; 0x01
    3ddc:	42 e0       	ldi	r20, 0x02	; 2
    3dde:	50 e0       	ldi	r21, 0x00	; 0
    3de0:	be 01       	movw	r22, r28
    3de2:	6f 5f       	subi	r22, 0xFF	; 255
    3de4:	7f 4f       	sbci	r23, 0xFF	; 255
    3de6:	c8 01       	movw	r24, r16
    3de8:	e7 d5       	rcall	.+3022   	; 0x49b8 <_ZN11EthernetUDP5writeEPKhj>
    // Success!  Everything buffered okay
    return 1;
}
    3dea:	81 e0       	ldi	r24, 0x01	; 1
    3dec:	90 e0       	ldi	r25, 0x00	; 0
    3dee:	0f 90       	pop	r0
    3df0:	0f 90       	pop	r0
    3df2:	0f 90       	pop	r0
    3df4:	df 91       	pop	r29
    3df6:	cf 91       	pop	r28
    3df8:	1f 91       	pop	r17
    3dfa:	0f 91       	pop	r16
    3dfc:	ff 90       	pop	r15
    3dfe:	ef 90       	pop	r14
    3e00:	df 90       	pop	r13
    3e02:	cf 90       	pop	r12
    3e04:	bf 90       	pop	r11
    3e06:	af 90       	pop	r10
    3e08:	9f 90       	pop	r9
    3e0a:	8f 90       	pop	r8
    3e0c:	08 95       	ret

00003e0e <_ZN9DNSClient15ProcessResponseEjR9IPAddress>:


uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    3e0e:	2f 92       	push	r2
    3e10:	3f 92       	push	r3
    3e12:	4f 92       	push	r4
    3e14:	5f 92       	push	r5
    3e16:	6f 92       	push	r6
    3e18:	7f 92       	push	r7
    3e1a:	8f 92       	push	r8
    3e1c:	9f 92       	push	r9
    3e1e:	af 92       	push	r10
    3e20:	bf 92       	push	r11
    3e22:	cf 92       	push	r12
    3e24:	df 92       	push	r13
    3e26:	ef 92       	push	r14
    3e28:	ff 92       	push	r15
    3e2a:	0f 93       	push	r16
    3e2c:	1f 93       	push	r17
    3e2e:	cf 93       	push	r28
    3e30:	df 93       	push	r29
    3e32:	cd b7       	in	r28, 0x3d	; 61
    3e34:	de b7       	in	r29, 0x3e	; 62
    3e36:	63 97       	sbiw	r28, 0x13	; 19
    3e38:	0f b6       	in	r0, 0x3f	; 63
    3e3a:	f8 94       	cli
    3e3c:	de bf       	out	0x3e, r29	; 62
    3e3e:	0f be       	out	0x3f, r0	; 63
    3e40:	cd bf       	out	0x3d, r28	; 61
    3e42:	7c 01       	movw	r14, r24
    3e44:	6b 01       	movw	r12, r22
    3e46:	1a 01       	movw	r2, r20
    uint32_t startTime = millis();
    3e48:	0e 94 0c 3c 	call	0x7818	; 0x7818 <millis>
    3e4c:	4b 01       	movw	r8, r22
    3e4e:	5c 01       	movw	r10, r24

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    3e50:	87 01       	movw	r16, r14
    3e52:	08 5f       	subi	r16, 0xF8	; 248
    3e54:	1f 4f       	sbci	r17, 0xFF	; 255
    {
        if((millis() - startTime) > aTimeout)
    3e56:	26 01       	movw	r4, r12
    3e58:	61 2c       	mov	r6, r1
    3e5a:	71 2c       	mov	r7, r1
uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    3e5c:	c8 01       	movw	r24, r16
    3e5e:	4e d6       	rcall	.+3228   	; 0x4afc <_ZN11EthernetUDP11parsePacketEv>
    3e60:	18 16       	cp	r1, r24
    3e62:	19 06       	cpc	r1, r25
    3e64:	a4 f0       	brlt	.+40     	; 0x3e8e <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x80>
    {
        if((millis() - startTime) > aTimeout)
    3e66:	0e 94 0c 3c 	call	0x7818	; 0x7818 <millis>
    3e6a:	dc 01       	movw	r26, r24
    3e6c:	cb 01       	movw	r24, r22
    3e6e:	88 19       	sub	r24, r8
    3e70:	99 09       	sbc	r25, r9
    3e72:	aa 09       	sbc	r26, r10
    3e74:	bb 09       	sbc	r27, r11
    3e76:	48 16       	cp	r4, r24
    3e78:	59 06       	cpc	r5, r25
    3e7a:	6a 06       	cpc	r6, r26
    3e7c:	7b 06       	cpc	r7, r27
    3e7e:	d0 f0       	brcs	.+52     	; 0x3eb4 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xa6>
            return TIMED_OUT;
        delay(50);
    3e80:	62 e3       	ldi	r22, 0x32	; 50
    3e82:	70 e0       	ldi	r23, 0x00	; 0
    3e84:	80 e0       	ldi	r24, 0x00	; 0
    3e86:	90 e0       	ldi	r25, 0x00	; 0
    3e88:	0e 94 3d 3c 	call	0x787a	; 0x787a <delay>
uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    3e8c:	e7 cf       	rjmp	.-50     	; 0x3e5c <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x4e>

    // We've had a reply!
    // Read the UDP header
    uint8_t header[DNS_HEADER_SIZE]; // Enough space to reuse for the DNS header
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
    3e8e:	f7 01       	movw	r30, r14
    3e90:	42 81       	ldd	r20, Z+2	; 0x02
    3e92:	53 81       	ldd	r21, Z+3	; 0x03
    3e94:	64 81       	ldd	r22, Z+4	; 0x04
    3e96:	75 81       	ldd	r23, Z+5	; 0x05
    3e98:	81 8d       	ldd	r24, Z+25	; 0x19
    3e9a:	92 8d       	ldd	r25, Z+26	; 0x1a
    3e9c:	a3 8d       	ldd	r26, Z+27	; 0x1b
    3e9e:	b4 8d       	ldd	r27, Z+28	; 0x1c
    3ea0:	48 17       	cp	r20, r24
    3ea2:	59 07       	cpc	r21, r25
    3ea4:	6a 07       	cpc	r22, r26
    3ea6:	7b 07       	cpc	r23, r27
    3ea8:	49 f4       	brne	.+18     	; 0x3ebc <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xae>
    3eaa:	85 8d       	ldd	r24, Z+29	; 0x1d
    3eac:	96 8d       	ldd	r25, Z+30	; 0x1e
    3eae:	c5 97       	sbiw	r24, 0x35	; 53
    3eb0:	29 f4       	brne	.+10     	; 0x3ebc <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xae>
    3eb2:	09 c0       	rjmp	.+18     	; 0x3ec6 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xb8>

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    {
        if((millis() - startTime) > aTimeout)
            return TIMED_OUT;
    3eb4:	ee 24       	eor	r14, r14
    3eb6:	ea 94       	dec	r14
    3eb8:	fe 2c       	mov	r15, r14
    3eba:	f0 c0       	rjmp	.+480    	; 0x409c <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
        (iUdp.remotePort() != DNS_PORT) )
    {
        // It's not from who we expected
        return INVALID_SERVER;
    3ebc:	9e ef       	ldi	r25, 0xFE	; 254
    3ebe:	e9 2e       	mov	r14, r25
    3ec0:	ff 24       	eor	r15, r15
    3ec2:	fa 94       	dec	r15
    3ec4:	eb c0       	rjmp	.+470    	; 0x409c <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    3ec6:	c8 01       	movw	r24, r16
    3ec8:	2d d5       	rcall	.+2650   	; 0x4924 <_ZN11EthernetUDP9availableEv>
    3eca:	0c 97       	sbiw	r24, 0x0c	; 12
    3ecc:	0c f4       	brge	.+2      	; 0x3ed0 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xc2>
    3ece:	e2 c0       	rjmp	.+452    	; 0x4094 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x286>
    {
        return TRUNCATED;
    }
    iUdp.read(header, DNS_HEADER_SIZE);
    3ed0:	4c e0       	ldi	r20, 0x0C	; 12
    3ed2:	50 e0       	ldi	r21, 0x00	; 0
    3ed4:	be 01       	movw	r22, r28
    3ed6:	6f 5f       	subi	r22, 0xFF	; 255
    3ed8:	7f 4f       	sbci	r23, 0xFF	; 255
    3eda:	c8 01       	movw	r24, r16
    3edc:	a8 d5       	rcall	.+2896   	; 0x4a2e <_ZN11EthernetUDP4readEPhj>

    uint16_t header_flags = htons(*((uint16_t*)&header[2]));
    3ede:	8b 81       	ldd	r24, Y+3	; 0x03
    3ee0:	9c 81       	ldd	r25, Y+4	; 0x04
    3ee2:	98 27       	eor	r25, r24
    3ee4:	89 27       	eor	r24, r25
    3ee6:	98 27       	eor	r25, r24
    3ee8:	9a 8b       	std	Y+18, r25	; 0x12
    3eea:	89 8b       	std	Y+17, r24	; 0x11
    // Check that it's a response to this request
    if ( ( iRequestId != (*((uint16_t*)&header[0])) ) ||
    3eec:	f7 01       	movw	r30, r14
    3eee:	46 81       	ldd	r20, Z+6	; 0x06
    3ef0:	57 81       	ldd	r21, Z+7	; 0x07
    3ef2:	29 81       	ldd	r18, Y+1	; 0x01
    3ef4:	3a 81       	ldd	r19, Y+2	; 0x02
    3ef6:	42 17       	cp	r20, r18
    3ef8:	53 07       	cpc	r21, r19
    3efa:	11 f4       	brne	.+4      	; 0x3f00 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xf2>
    3efc:	97 fd       	sbrc	r25, 7
        ((header_flags & QUERY_RESPONSE_MASK) != (uint16_t)RESPONSE_FLAG) )
    {
        // Mark the entire packet as read
        iUdp.flush();
    3efe:	07 c0       	rjmp	.+14     	; 0x3f0e <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x100>
    3f00:	c8 01       	movw	r24, r16
    3f02:	2a d5       	rcall	.+2644   	; 0x4958 <_ZN11EthernetUDP5flushEv>
        return INVALID_RESPONSE;
    3f04:	7c ef       	ldi	r23, 0xFC	; 252
    3f06:	e7 2e       	mov	r14, r23
    3f08:	ff 24       	eor	r15, r15
    3f0a:	fa 94       	dec	r15
    3f0c:	c7 c0       	rjmp	.+398    	; 0x409c <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    }
    // Check for any errors in the response (or in our request)
    // although we don't do anything to get round these
    if ( (header_flags & TRUNCATION_FLAG) || (header_flags & RESP_MASK) )
    3f0e:	8f 70       	andi	r24, 0x0F	; 15
    3f10:	92 70       	andi	r25, 0x02	; 2
    3f12:	89 2b       	or	r24, r25
    {
        // Mark the entire packet as read
        iUdp.flush();
    3f14:	39 f0       	breq	.+14     	; 0x3f24 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x116>
    3f16:	c8 01       	movw	r24, r16
    3f18:	1f d5       	rcall	.+2622   	; 0x4958 <_ZN11EthernetUDP5flushEv>
        return -5; //INVALID_RESPONSE;
    3f1a:	6b ef       	ldi	r22, 0xFB	; 251
    3f1c:	e6 2e       	mov	r14, r22
    3f1e:	ff 24       	eor	r15, r15
    3f20:	fa 94       	dec	r15
    3f22:	bc c0       	rjmp	.+376    	; 0x409c <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    }

    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
    3f24:	cf 80       	ldd	r12, Y+7	; 0x07
    3f26:	d8 84       	ldd	r13, Y+8	; 0x08
    3f28:	dc 24       	eor	r13, r12
    3f2a:	cd 24       	eor	r12, r13
    3f2c:	dc 24       	eor	r13, r12
    if (answerCount == 0 )
    3f2e:	c1 14       	cp	r12, r1
    3f30:	d1 04       	cpc	r13, r1
    3f32:	19 f0       	breq	.+6      	; 0x3f3a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x12c>
    3f34:	e1 2c       	mov	r14, r1
    3f36:	f1 2c       	mov	r15, r1
    {
        // Mark the entire packet as read
        iUdp.flush();
    3f38:	1f c0       	rjmp	.+62     	; 0x3f78 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x16a>
    3f3a:	c8 01       	movw	r24, r16
    3f3c:	0d d5       	rcall	.+2586   	; 0x4958 <_ZN11EthernetUDP5flushEv>
        return -6; //INVALID_RESPONSE;
    3f3e:	5a ef       	ldi	r21, 0xFA	; 250
    3f40:	e5 2e       	mov	r14, r21
    3f42:	ff 24       	eor	r15, r15
    3f44:	fa 94       	dec	r15
    3f46:	aa c0       	rjmp	.+340    	; 0x409c <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    {
        // Skip over the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    3f48:	41 e0       	ldi	r20, 0x01	; 1
    3f4a:	50 e0       	ldi	r21, 0x00	; 0
    3f4c:	be 01       	movw	r22, r28
    3f4e:	63 5f       	subi	r22, 0xF3	; 243
    3f50:	7f 4f       	sbci	r23, 0xFF	; 255
    3f52:	c8 01       	movw	r24, r16
    3f54:	6c d5       	rcall	.+2776   	; 0x4a2e <_ZN11EthernetUDP4readEPhj>
            if (len > 0)
    3f56:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f58:	81 11       	cpse	r24, r1
                while(len--)
                {
                    iUdp.read(); // we don't care about the returned byte
                }
            }
        } while (len != 0);
    3f5a:	17 c0       	rjmp	.+46     	; 0x3f8a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x17c>
    3f5c:	8d 85       	ldd	r24, Y+13	; 0x0d

        // Now jump over the type and class
        for (int i =0; i < 4; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    3f5e:	81 11       	cpse	r24, r1
    3f60:	f3 cf       	rjmp	.-26     	; 0x3f48 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x13a>
    3f62:	c8 01       	movw	r24, r16
    3f64:	3c d5       	rcall	.+2680   	; 0x49de <_ZN11EthernetUDP4readEv>
    3f66:	c8 01       	movw	r24, r16
    3f68:	3a d5       	rcall	.+2676   	; 0x49de <_ZN11EthernetUDP4readEv>
    3f6a:	c8 01       	movw	r24, r16
    3f6c:	38 d5       	rcall	.+2672   	; 0x49de <_ZN11EthernetUDP4readEv>
    3f6e:	c8 01       	movw	r24, r16
    3f70:	36 d5       	rcall	.+2668   	; 0x49de <_ZN11EthernetUDP4readEv>
    3f72:	ff ef       	ldi	r31, 0xFF	; 255
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    3f74:	ef 1a       	sub	r14, r31
    3f76:	ff 0a       	sbc	r15, r31
    3f78:	8d 81       	ldd	r24, Y+5	; 0x05
    3f7a:	9e 81       	ldd	r25, Y+6	; 0x06
    3f7c:	98 27       	eor	r25, r24
    3f7e:	89 27       	eor	r24, r25
    3f80:	98 27       	eor	r25, r24
    3f82:	e8 16       	cp	r14, r24
    3f84:	f9 06       	cpc	r15, r25
    3f86:	00 f3       	brcs	.-64     	; 0x3f48 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x13a>
    3f88:	09 c0       	rjmp	.+18     	; 0x3f9c <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x18e>
            iUdp.read(&len, sizeof(len));
            if (len > 0)
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
    3f8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f8c:	9f ef       	ldi	r25, 0xFF	; 255
    3f8e:	98 0f       	add	r25, r24
    3f90:	9d 87       	std	Y+13, r25	; 0x0d
    3f92:	88 23       	and	r24, r24
    3f94:	19 f3       	breq	.-58     	; 0x3f5c <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x14e>
                {
                    iUdp.read(); // we don't care about the returned byte
    3f96:	c8 01       	movw	r24, r16
    3f98:	22 d5       	rcall	.+2628   	; 0x49de <_ZN11EthernetUDP4readEv>
            iUdp.read(&len, sizeof(len));
            if (len > 0)
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
    3f9a:	f7 cf       	rjmp	.-18     	; 0x3f8a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x17c>
    3f9c:	a1 2c       	mov	r10, r1
    3f9e:	b1 2c       	mov	r11, r1
    {
        // Skip the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    3fa0:	41 e0       	ldi	r20, 0x01	; 1
    3fa2:	50 e0       	ldi	r21, 0x00	; 0
    3fa4:	be 01       	movw	r22, r28
    3fa6:	6d 5e       	subi	r22, 0xED	; 237
    3fa8:	7f 4f       	sbci	r23, 0xFF	; 255
    3faa:	c8 01       	movw	r24, r16
    3fac:	40 d5       	rcall	.+2688   	; 0x4a2e <_ZN11EthernetUDP4readEPhj>
    3fae:	8b 89       	ldd	r24, Y+19	; 0x13
            if ((len & LABEL_COMPRESSION_MASK) == 0)
    3fb0:	98 2f       	mov	r25, r24
    3fb2:	90 7c       	andi	r25, 0xC0	; 192
    3fb4:	59 f4       	brne	.+22     	; 0x3fcc <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1be>
            {
                // It's just a normal label
                if (len > 0)
    3fb6:	88 23       	and	r24, r24
    3fb8:	79 f0       	breq	.+30     	; 0x3fd8 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1ca>
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
    3fba:	8b 89       	ldd	r24, Y+19	; 0x13
    3fbc:	9f ef       	ldi	r25, 0xFF	; 255
    3fbe:	98 0f       	add	r25, r24
    3fc0:	9b 8b       	std	Y+19, r25	; 0x13
    3fc2:	88 23       	and	r24, r24
    3fc4:	31 f0       	breq	.+12     	; 0x3fd2 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1c4>
                    {
                        iUdp.read(); // we don't care about the returned byte
    3fc6:	c8 01       	movw	r24, r16
    3fc8:	0a d5       	rcall	.+2580   	; 0x49de <_ZN11EthernetUDP4readEv>
                if (len > 0)
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
    3fca:	f7 cf       	rjmp	.-18     	; 0x3fba <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1ac>
                // says that a name is either a sequence of labels ended with a
                // 0 length octet or a pointer or a sequence of labels ending in
                // a pointer.  Either way, when we get here we're at the end of
                // the name
                // Skip over the pointer
                iUdp.read(); // we don't care about the returned byte
    3fcc:	c8 01       	movw	r24, r16
    3fce:	07 d5       	rcall	.+2574   	; 0x49de <_ZN11EthernetUDP4readEv>
    3fd0:	1b 8a       	std	Y+19, r1	; 0x13
                // And set len so that we drop out of the name loop
                len = 0;
    3fd2:	8b 89       	ldd	r24, Y+19	; 0x13
            }
        } while (len != 0);
    3fd4:	81 11       	cpse	r24, r1
    3fd6:	e4 cf       	rjmp	.-56     	; 0x3fa0 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x192>

        // Check the type and class
        uint16_t answerType;
        uint16_t answerClass;
        iUdp.read((uint8_t*)&answerType, sizeof(answerType));
    3fd8:	42 e0       	ldi	r20, 0x02	; 2
    3fda:	50 e0       	ldi	r21, 0x00	; 0
    3fdc:	be 01       	movw	r22, r28
    3fde:	61 5f       	subi	r22, 0xF1	; 241
    3fe0:	7f 4f       	sbci	r23, 0xFF	; 255
        iUdp.read((uint8_t*)&answerClass, sizeof(answerClass));
    3fe2:	c8 01       	movw	r24, r16
    3fe4:	24 d5       	rcall	.+2632   	; 0x4a2e <_ZN11EthernetUDP4readEPhj>
    3fe6:	42 e0       	ldi	r20, 0x02	; 2
    3fe8:	50 e0       	ldi	r21, 0x00	; 0
    3fea:	be 01       	movw	r22, r28
    3fec:	63 5f       	subi	r22, 0xF3	; 243
    3fee:	7f 4f       	sbci	r23, 0xFF	; 255

        // Ignore the Time-To-Live as we don't do any caching
        for (int i =0; i < TTL_SIZE; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    3ff0:	c8 01       	movw	r24, r16
    3ff2:	1d d5       	rcall	.+2618   	; 0x4a2e <_ZN11EthernetUDP4readEPhj>
    3ff4:	c8 01       	movw	r24, r16
    3ff6:	f3 d4       	rcall	.+2534   	; 0x49de <_ZN11EthernetUDP4readEv>
    3ff8:	c8 01       	movw	r24, r16
    3ffa:	f1 d4       	rcall	.+2530   	; 0x49de <_ZN11EthernetUDP4readEv>
    3ffc:	c8 01       	movw	r24, r16
    3ffe:	ef d4       	rcall	.+2526   	; 0x49de <_ZN11EthernetUDP4readEv>
    4000:	c8 01       	movw	r24, r16
    4002:	ed d4       	rcall	.+2522   	; 0x49de <_ZN11EthernetUDP4readEv>
    4004:	42 e0       	ldi	r20, 0x02	; 2
    4006:	50 e0       	ldi	r21, 0x00	; 0
        }

        // And read out the length of this answer
        // Don't need header_flags anymore, so we can reuse it here
        iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));
    4008:	be 01       	movw	r22, r28
    400a:	6f 5e       	subi	r22, 0xEF	; 239
    400c:	7f 4f       	sbci	r23, 0xFF	; 255
    400e:	c8 01       	movw	r24, r16
    4010:	0e d5       	rcall	.+2588   	; 0x4a2e <_ZN11EthernetUDP4readEPhj>
    4012:	8f 85       	ldd	r24, Y+15	; 0x0f
    4014:	98 89       	ldd	r25, Y+16	; 0x10
    4016:	81 15       	cp	r24, r1

        if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) )
    4018:	91 40       	sbci	r25, 0x01	; 1
    401a:	49 f4       	brne	.+18     	; 0x402e <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x220>
    401c:	ed 84       	ldd	r14, Y+13	; 0x0d
    401e:	fe 84       	ldd	r15, Y+14	; 0x0e
    4020:	fe 24       	eor	r15, r14
    4022:	ef 24       	eor	r14, r15
    4024:	fe 24       	eor	r15, r14
    4026:	81 e0       	ldi	r24, 0x01	; 1
    4028:	e8 16       	cp	r14, r24
    402a:	f1 04       	cpc	r15, r1
    402c:	19 f0       	breq	.+6      	; 0x4034 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x226>
    402e:	e1 2c       	mov	r14, r1
    4030:	f1 2c       	mov	r15, r1
    4032:	14 c0       	rjmp	.+40     	; 0x405c <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x24e>
    4034:	89 89       	ldd	r24, Y+17	; 0x11
        {
            if (htons(header_flags) != 4)
    4036:	9a 89       	ldd	r25, Y+18	; 0x12
    4038:	81 15       	cp	r24, r1
    403a:	94 40       	sbci	r25, 0x04	; 4
    403c:	39 f0       	breq	.+14     	; 0x404c <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x23e>
    403e:	c8 01       	movw	r24, r16
            {
                // It's a weird size
                // Mark the entire packet as read
                iUdp.flush();
    4040:	8b d4       	rcall	.+2326   	; 0x4958 <_ZN11EthernetUDP5flushEv>
    4042:	47 ef       	ldi	r20, 0xF7	; 247
                return -9;//INVALID_RESPONSE;
    4044:	e4 2e       	mov	r14, r20
    4046:	ff 24       	eor	r15, r15
    4048:	fa 94       	dec	r15
    404a:	28 c0       	rjmp	.+80     	; 0x409c <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    404c:	b1 01       	movw	r22, r2

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    404e:	6e 5f       	subi	r22, 0xFE	; 254
    4050:	7f 4f       	sbci	r23, 0xFF	; 255
    4052:	44 e0       	ldi	r20, 0x04	; 4
            }
            iUdp.read(aAddress.raw_address(), 4);
    4054:	50 e0       	ldi	r21, 0x00	; 0
    4056:	c8 01       	movw	r24, r16
    4058:	ea d4       	rcall	.+2516   	; 0x4a2e <_ZN11EthernetUDP4readEPhj>
    405a:	20 c0       	rjmp	.+64     	; 0x409c <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
            return SUCCESS;
    405c:	89 89       	ldd	r24, Y+17	; 0x11
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    405e:	9a 89       	ldd	r25, Y+18	; 0x12
    4060:	98 27       	eor	r25, r24
    4062:	89 27       	eor	r24, r25
    4064:	98 27       	eor	r25, r24
    4066:	e8 16       	cp	r14, r24
    4068:	f9 06       	cpc	r15, r25
    406a:	30 f4       	brcc	.+12     	; 0x4078 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x26a>
    406c:	c8 01       	movw	r24, r16
            {
                iUdp.read(); // we don't care about the returned byte
    406e:	b7 d4       	rcall	.+2414   	; 0x49de <_ZN11EthernetUDP4readEv>
    4070:	ff ef       	ldi	r31, 0xFF	; 255
    4072:	ef 1a       	sub	r14, r31
            return SUCCESS;
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    4074:	ff 0a       	sbc	r15, r31
    4076:	f2 cf       	rjmp	.-28     	; 0x405c <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x24e>
    4078:	2f ef       	ldi	r18, 0xFF	; 255
    407a:	a2 1a       	sub	r10, r18
    // Now we're up to the bit we're interested in, the answer
    // There might be more than one answer (although we'll just use the first
    // type A answer) and some authority and additional resource records but
    // we're going to ignore all of them.

    for (uint16_t i =0; i < answerCount; i++)
    407c:	b2 0a       	sbc	r11, r18
    407e:	ca 14       	cp	r12, r10
    4080:	db 04       	cpc	r13, r11
    4082:	09 f0       	breq	.+2      	; 0x4086 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x278>
    4084:	8d cf       	rjmp	.-230    	; 0x3fa0 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x192>
    4086:	c8 01       	movw	r24, r16
    4088:	67 d4       	rcall	.+2254   	; 0x4958 <_ZN11EthernetUDP5flushEv>
            }
        }
    }

    // Mark the entire packet as read
    iUdp.flush();
    408a:	36 ef       	ldi	r19, 0xF6	; 246
    408c:	e3 2e       	mov	r14, r19
    408e:	ff 24       	eor	r15, r15

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
    4090:	fa 94       	dec	r15
    4092:	04 c0       	rjmp	.+8      	; 0x409c <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    4094:	8d ef       	ldi	r24, 0xFD	; 253
    4096:	e8 2e       	mov	r14, r24
    4098:	ff 24       	eor	r15, r15
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    {
        return TRUNCATED;
    409a:	fa 94       	dec	r15
    409c:	c7 01       	movw	r24, r14
    409e:	63 96       	adiw	r28, 0x13	; 19
    40a0:	0f b6       	in	r0, 0x3f	; 63
    // Mark the entire packet as read
    iUdp.flush();

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
}
    40a2:	f8 94       	cli
    40a4:	de bf       	out	0x3e, r29	; 62
    40a6:	0f be       	out	0x3f, r0	; 63
    40a8:	cd bf       	out	0x3d, r28	; 61
    40aa:	df 91       	pop	r29
    40ac:	cf 91       	pop	r28
    40ae:	1f 91       	pop	r17
    40b0:	0f 91       	pop	r16
    40b2:	ff 90       	pop	r15
    40b4:	ef 90       	pop	r14
    40b6:	df 90       	pop	r13
    40b8:	cf 90       	pop	r12
    40ba:	bf 90       	pop	r11
    40bc:	af 90       	pop	r10
    40be:	9f 90       	pop	r9
    40c0:	8f 90       	pop	r8
    40c2:	7f 90       	pop	r7
    40c4:	6f 90       	pop	r6
    40c6:	5f 90       	pop	r5
    40c8:	4f 90       	pop	r4
    40ca:	3f 90       	pop	r3
    40cc:	2f 90       	pop	r2
    40ce:	08 95       	ret

000040d0 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>:
    40d0:	8f 92       	push	r8
    40d2:	9f 92       	push	r9
    40d4:	af 92       	push	r10
        return 0;
    }
}

int DNSClient::getHostByName(const char* aHostname, IPAddress& aResult)
{
    40d6:	bf 92       	push	r11
    40d8:	cf 92       	push	r12
    40da:	df 92       	push	r13
    40dc:	ef 92       	push	r14
    40de:	ff 92       	push	r15
    40e0:	0f 93       	push	r16
    40e2:	1f 93       	push	r17
    40e4:	cf 93       	push	r28
    40e6:	df 93       	push	r29
    40e8:	00 d0       	rcall	.+0      	; 0x40ea <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x1a>
    40ea:	00 d0       	rcall	.+0      	; 0x40ec <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x1c>
    40ec:	00 d0       	rcall	.+0      	; 0x40ee <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x1e>
    40ee:	cd b7       	in	r28, 0x3d	; 61
    40f0:	de b7       	in	r29, 0x3e	; 62
    40f2:	7c 01       	movw	r14, r24
    40f4:	4b 01       	movw	r8, r22
    40f6:	5a 01       	movw	r10, r20
    int ret =0;

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
    40f8:	9e dd       	rcall	.-1220   	; 0x3c36 <_ZN9DNSClient9inet_atonEPKcR9IPAddress>
    40fa:	8c 01       	movw	r16, r24
    40fc:	89 2b       	or	r24, r25
    40fe:	09 f0       	breq	.+2      	; 0x4102 <__stack+0x3>
    4100:	57 c0       	rjmp	.+174    	; 0x41b0 <__stack+0xb1>
        // It is, our work here is done
        return 1;
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    4102:	f7 01       	movw	r30, r14
    4104:	42 81       	ldd	r20, Z+2	; 0x02
    4106:	53 81       	ldd	r21, Z+3	; 0x03
    4108:	64 81       	ldd	r22, Z+4	; 0x04
    410a:	75 81       	ldd	r23, Z+5	; 0x05
    410c:	80 91 41 0c 	lds	r24, 0x0C41	; 0x800c41 <_ZL11INADDR_NONE+0x2>
    4110:	90 91 42 0c 	lds	r25, 0x0C42	; 0x800c42 <_ZL11INADDR_NONE+0x3>
    4114:	a0 91 43 0c 	lds	r26, 0x0C43	; 0x800c43 <_ZL11INADDR_NONE+0x4>
    4118:	b0 91 44 0c 	lds	r27, 0x0C44	; 0x800c44 <_ZL11INADDR_NONE+0x5>
    411c:	48 17       	cp	r20, r24
    411e:	59 07       	cpc	r21, r25
    4120:	6a 07       	cpc	r22, r26
    4122:	7b 07       	cpc	r23, r27
    4124:	09 f4       	brne	.+2      	; 0x4128 <__stack+0x29>
    4126:	47 c0       	rjmp	.+142    	; 0x41b6 <__stack+0xb7>
    {
        return INVALID_SERVER;
    }
	
    // Find a socket to use
    if (iUdp.begin(1024+(millis() & 0xF)) == 1)
    4128:	0e 94 0c 3c 	call	0x7818	; 0x7818 <millis>
    412c:	67 01       	movw	r12, r14
    412e:	f8 e0       	ldi	r31, 0x08	; 8
    4130:	cf 0e       	add	r12, r31
    4132:	d1 1c       	adc	r13, r1
    4134:	6f 70       	andi	r22, 0x0F	; 15
    4136:	77 27       	eor	r23, r23
    4138:	7c 5f       	subi	r23, 0xFC	; 252
    413a:	c6 01       	movw	r24, r12
    413c:	ae d4       	rcall	.+2396   	; 0x4a9a <_ZN11EthernetUDP5beginEj>
    413e:	81 30       	cpi	r24, 0x01	; 1
    4140:	09 f0       	breq	.+2      	; 0x4144 <__stack+0x45>
    4142:	3b c0       	rjmp	.+118    	; 0x41ba <__stack+0xbb>
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    4144:	8a e5       	ldi	r24, 0x5A	; 90
    4146:	99 e0       	ldi	r25, 0x09	; 9
    4148:	9a 83       	std	Y+2, r25	; 0x02
    414a:	89 83       	std	Y+1, r24	; 0x01
    414c:	f7 01       	movw	r30, r14
    414e:	82 81       	ldd	r24, Z+2	; 0x02
    4150:	93 81       	ldd	r25, Z+3	; 0x03
    4152:	a4 81       	ldd	r26, Z+4	; 0x04
    4154:	b5 81       	ldd	r27, Z+5	; 0x05
    4156:	8b 83       	std	Y+3, r24	; 0x03
    4158:	9c 83       	std	Y+4, r25	; 0x04
    415a:	ad 83       	std	Y+5, r26	; 0x05
    415c:	be 83       	std	Y+6, r27	; 0x06
        // Try up to three times
        int retries = 0;
//        while ((retries < 3) && (ret <= 0))
        {
            // Send DNS request
            ret = iUdp.beginPacket(iDNSServer, DNS_PORT);
    415e:	45 e3       	ldi	r20, 0x35	; 53
    4160:	50 e0       	ldi	r21, 0x00	; 0
    4162:	be 01       	movw	r22, r28
    4164:	6f 5f       	subi	r22, 0xFF	; 255
    4166:	7f 4f       	sbci	r23, 0xFF	; 255
    4168:	c6 01       	movw	r24, r12
    416a:	1c d4       	rcall	.+2104   	; 0x49a4 <_ZN11EthernetUDP11beginPacketE9IPAddressj>
            if (ret != 0)
    416c:	89 2b       	or	r24, r25
    416e:	19 f4       	brne	.+6      	; 0x4176 <__stack+0x77>
    4170:	00 e0       	ldi	r16, 0x00	; 0
    4172:	10 e0       	ldi	r17, 0x00	; 0
            {
                // Now output the request data
                ret = BuildRequest(aHostname);
    4174:	1a c0       	rjmp	.+52     	; 0x41aa <__stack+0xab>
    4176:	b4 01       	movw	r22, r8
    4178:	c7 01       	movw	r24, r14
                if (ret != 0)
    417a:	a8 dd       	rcall	.-1200   	; 0x3ccc <_ZN9DNSClient12BuildRequestEPKc>
    417c:	89 2b       	or	r24, r25
                {
                    // And finally send the request
                    ret = iUdp.endPacket();
    417e:	c1 f3       	breq	.-16     	; 0x4170 <__stack+0x71>
    4180:	c6 01       	movw	r24, r12
    4182:	17 d4       	rcall	.+2094   	; 0x49b2 <_ZN11EthernetUDP9endPacketEv>
                    if (ret != 0)
    4184:	89 2b       	or	r24, r25
    4186:	a1 f3       	breq	.-24     	; 0x4170 <__stack+0x71>
    4188:	83 e0       	ldi	r24, 0x03	; 3
    418a:	88 2e       	mov	r8, r24
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
                        {
                            ret = ProcessResponse(5000, aResult);
    418c:	91 2c       	mov	r9, r1
    418e:	a5 01       	movw	r20, r10
    4190:	68 e8       	ldi	r22, 0x88	; 136
    4192:	73 e1       	ldi	r23, 0x13	; 19
    4194:	c7 01       	movw	r24, r14
    4196:	3b de       	rcall	.-906    	; 0x3e0e <_ZN9DNSClient15ProcessResponseEjR9IPAddress>
    4198:	8c 01       	movw	r16, r24
    419a:	21 e0       	ldi	r18, 0x01	; 1
    419c:	82 1a       	sub	r8, r18
    419e:	91 08       	sbc	r9, r1
                    if (ret != 0)
                    {
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
    41a0:	21 f0       	breq	.+8      	; 0x41aa <__stack+0xab>
    41a2:	0f 3f       	cpi	r16, 0xFF	; 255
    41a4:	ff ef       	ldi	r31, 0xFF	; 255
    41a6:	1f 07       	cpc	r17, r31
            }
            retries++;
        }

        // We're done with the socket now
        iUdp.stop();
    41a8:	91 f3       	breq	.-28     	; 0x418e <__stack+0x8f>
    41aa:	c6 01       	movw	r24, r12
    41ac:	e7 d3       	rcall	.+1998   	; 0x497c <_ZN11EthernetUDP4stopEv>
    41ae:	05 c0       	rjmp	.+10     	; 0x41ba <__stack+0xbb>

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
    {
        // It is, our work here is done
        return 1;
    41b0:	01 e0       	ldi	r16, 0x01	; 1
    41b2:	10 e0       	ldi	r17, 0x00	; 0
    41b4:	02 c0       	rjmp	.+4      	; 0x41ba <__stack+0xbb>
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    {
        return INVALID_SERVER;
    41b6:	0e ef       	ldi	r16, 0xFE	; 254
    41b8:	1f ef       	ldi	r17, 0xFF	; 255
        // We're done with the socket now
        iUdp.stop();
    }

    return ret;
}
    41ba:	c8 01       	movw	r24, r16
    41bc:	26 96       	adiw	r28, 0x06	; 6
    41be:	0f b6       	in	r0, 0x3f	; 63
    41c0:	f8 94       	cli
    41c2:	de bf       	out	0x3e, r29	; 62
    41c4:	0f be       	out	0x3f, r0	; 63
    41c6:	cd bf       	out	0x3d, r28	; 61
    41c8:	df 91       	pop	r29
    41ca:	cf 91       	pop	r28
    41cc:	1f 91       	pop	r17
    41ce:	0f 91       	pop	r16
    41d0:	ff 90       	pop	r15
    41d2:	ef 90       	pop	r14
    41d4:	df 90       	pop	r13
    41d6:	cf 90       	pop	r12
    41d8:	bf 90       	pop	r11
    41da:	af 90       	pop	r10
    41dc:	9f 90       	pop	r9
    41de:	8f 90       	pop	r8
    41e0:	08 95       	ret

000041e2 <_ZN10W5500Class8writeGAREPh>:
    return _dnsDomainName;
}

char* EthernetClass::hostName(){
    return _hostName;
}
    41e2:	24 e0       	ldi	r18, 0x04	; 4
    41e4:	30 e0       	ldi	r19, 0x00	; 0
    41e6:	ac 01       	movw	r20, r24
    41e8:	64 e0       	ldi	r22, 0x04	; 4
    41ea:	81 e0       	ldi	r24, 0x01	; 1
    41ec:	90 e0       	ldi	r25, 0x00	; 0
    41ee:	4d c7       	rjmp	.+3738   	; 0x508a <_ZN10W5500Class5writeEjhPKhj>

000041f0 <_ZN10W5500Class9writeSUBREPh>:
    41f0:	24 e0       	ldi	r18, 0x04	; 4
    41f2:	30 e0       	ldi	r19, 0x00	; 0
    41f4:	ac 01       	movw	r20, r24
    41f6:	64 e0       	ldi	r22, 0x04	; 4
    41f8:	85 e0       	ldi	r24, 0x05	; 5
    41fa:	90 e0       	ldi	r25, 0x00	; 0
    41fc:	46 c7       	rjmp	.+3724   	; 0x508a <_ZN10W5500Class5writeEjhPKhj>

000041fe <_ZN10W5500Class9writeSHAREPh>:
    41fe:	26 e0       	ldi	r18, 0x06	; 6
    4200:	30 e0       	ldi	r19, 0x00	; 0
    4202:	ac 01       	movw	r20, r24
    4204:	64 e0       	ldi	r22, 0x04	; 4
    4206:	89 e0       	ldi	r24, 0x09	; 9
    4208:	90 e0       	ldi	r25, 0x00	; 0
    420a:	3f c7       	rjmp	.+3710   	; 0x508a <_ZN10W5500Class5writeEjhPKhj>

0000420c <_ZN10W5500Class9writeSIPREPh>:
    420c:	24 e0       	ldi	r18, 0x04	; 4
    420e:	30 e0       	ldi	r19, 0x00	; 0
    4210:	ac 01       	movw	r20, r24
    4212:	64 e0       	ldi	r22, 0x04	; 4
    4214:	8f e0       	ldi	r24, 0x0F	; 15
    4216:	90 e0       	ldi	r25, 0x00	; 0
    4218:	38 c7       	rjmp	.+3696   	; 0x508a <_ZN10W5500Class5writeEjhPKhj>

0000421a <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_>:
    421a:	8f 92       	push	r8
    421c:	9f 92       	push	r9
    421e:	af 92       	push	r10
    4220:	bf 92       	push	r11
    4222:	cf 92       	push	r12
    4224:	df 92       	push	r13
    4226:	ef 92       	push	r14
    4228:	ff 92       	push	r15
    422a:	0f 93       	push	r16
    422c:	1f 93       	push	r17
    422e:	cf 93       	push	r28
    4230:	df 93       	push	r29
    4232:	4c 01       	movw	r8, r24
    4234:	5b 01       	movw	r10, r22
    4236:	6a 01       	movw	r12, r20
    4238:	e9 01       	movw	r28, r18
    423a:	fc 01       	movw	r30, r24
    423c:	64 85       	ldd	r22, Z+12	; 0x0c
    423e:	85 e8       	ldi	r24, 0x85	; 133
    4240:	9c e0       	ldi	r25, 0x0C	; 12
    4242:	6f d7       	rcall	.+3806   	; 0x5122 <_ZN10W5500Class4initEh>
    4244:	c5 01       	movw	r24, r10
    4246:	db df       	rcall	.-74     	; 0x41fe <_ZN10W5500Class9writeSHAREPh>
    4248:	c6 01       	movw	r24, r12
    424a:	02 96       	adiw	r24, 0x02	; 2
    424c:	df df       	rcall	.-66     	; 0x420c <_ZN10W5500Class9writeSIPREPh>
    424e:	c8 01       	movw	r24, r16
    4250:	02 96       	adiw	r24, 0x02	; 2
    4252:	c7 df       	rcall	.-114    	; 0x41e2 <_ZN10W5500Class8writeGAREPh>
    4254:	c7 01       	movw	r24, r14
    4256:	02 96       	adiw	r24, 0x02	; 2
    4258:	cb df       	rcall	.-106    	; 0x41f0 <_ZN10W5500Class9writeSUBREPh>
    425a:	8a 81       	ldd	r24, Y+2	; 0x02
    425c:	9b 81       	ldd	r25, Y+3	; 0x03
    425e:	ac 81       	ldd	r26, Y+4	; 0x04
    4260:	bd 81       	ldd	r27, Y+5	; 0x05
    4262:	f4 01       	movw	r30, r8
    4264:	82 83       	std	Z+2, r24	; 0x02
    4266:	93 83       	std	Z+3, r25	; 0x03
    4268:	a4 83       	std	Z+4, r26	; 0x04
    426a:	b5 83       	std	Z+5, r27	; 0x05
    426c:	df 91       	pop	r29
    426e:	cf 91       	pop	r28
    4270:	1f 91       	pop	r17
    4272:	0f 91       	pop	r16
    4274:	ff 90       	pop	r15
    4276:	ef 90       	pop	r14
    4278:	df 90       	pop	r13
    427a:	cf 90       	pop	r12
    427c:	bf 90       	pop	r11
    427e:	af 90       	pop	r10
    4280:	9f 90       	pop	r9
    4282:	8f 90       	pop	r8
    4284:	08 95       	ret

00004286 <_ZN13EthernetClass11dnsServerIPEv>:
    4286:	2a e5       	ldi	r18, 0x5A	; 90
    4288:	39 e0       	ldi	r19, 0x09	; 9
    428a:	fc 01       	movw	r30, r24
    428c:	31 83       	std	Z+1, r19	; 0x01
    428e:	20 83       	st	Z, r18
    4290:	fb 01       	movw	r30, r22
    4292:	42 81       	ldd	r20, Z+2	; 0x02
    4294:	53 81       	ldd	r21, Z+3	; 0x03
    4296:	64 81       	ldd	r22, Z+4	; 0x04
    4298:	75 81       	ldd	r23, Z+5	; 0x05
    429a:	fc 01       	movw	r30, r24
    429c:	42 83       	std	Z+2, r20	; 0x02
    429e:	53 83       	std	Z+3, r21	; 0x03
    42a0:	64 83       	std	Z+4, r22	; 0x04
    42a2:	75 83       	std	Z+5, r23	; 0x05
    42a4:	08 95       	ret

000042a6 <_GLOBAL__sub_I__ZN13EthernetClass6_stateE>:

EthernetClass Ethernet;
    42a6:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    42a8:	00 e0       	ldi	r16, 0x00	; 0
    42aa:	20 e0       	ldi	r18, 0x00	; 0
    42ac:	40 e0       	ldi	r20, 0x00	; 0
    42ae:	60 e0       	ldi	r22, 0x00	; 0
    42b0:	82 e6       	ldi	r24, 0x62	; 98
    42b2:	9c e0       	ldi	r25, 0x0C	; 12
    42b4:	0e 94 6f 3a 	call	0x74de	; 0x74de <_ZN9IPAddressC1Ehhhh>
  uint8_t w5500_cspin;

  static uint8_t _state[MAX_SOCK_NUM];
  static uint16_t _server_port[MAX_SOCK_NUM];

  EthernetClass() { _dhcp = NULL; w5500_cspin = 10; }
    42b8:	85 e4       	ldi	r24, 0x45	; 69
    42ba:	9c e0       	ldi	r25, 0x0C	; 12
    42bc:	0e 94 65 3a 	call	0x74ca	; 0x74ca <_ZN9IPAddressC1Ev>
    42c0:	e5 e4       	ldi	r30, 0x45	; 69
    42c2:	fc e0       	ldi	r31, 0x0C	; 12
    42c4:	13 86       	std	Z+11, r1	; 0x0b
    42c6:	12 86       	std	Z+10, r1	; 0x0a
    42c8:	8a e0       	ldi	r24, 0x0A	; 10
    42ca:	84 87       	std	Z+12, r24	; 0x0c
    42cc:	0f 91       	pop	r16
    42ce:	08 95       	ret

000042d0 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    42d0:	80 e0       	ldi	r24, 0x00	; 0
    42d2:	90 e0       	ldi	r25, 0x00	; 0
    42d4:	08 95       	ret

000042d6 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    42d6:	08 95       	ret

000042d8 <_ZN14EthernetClientneERKS_>:
  virtual void flush();
  virtual void stop();
  virtual uint8_t connected();
  virtual operator bool();
  virtual bool operator==(const EthernetClient&);
  virtual bool operator!=(const EthernetClient& rhs) { return !this->operator==(rhs); };
    42d8:	dc 01       	movw	r26, r24
    42da:	ed 91       	ld	r30, X+
    42dc:	fc 91       	ld	r31, X
    42de:	02 8c       	ldd	r0, Z+26	; 0x1a
    42e0:	f3 8d       	ldd	r31, Z+27	; 0x1b
    42e2:	e0 2d       	mov	r30, r0
    42e4:	09 95       	icall
    42e6:	91 e0       	ldi	r25, 0x01	; 1
    42e8:	89 27       	eor	r24, r25
    42ea:	08 95       	ret

000042ec <_ZN14EthernetClient5writeEh>:
  }

  return 1;
}

size_t EthernetClient::write(uint8_t b) {
    42ec:	cf 93       	push	r28
    42ee:	df 93       	push	r29
    42f0:	1f 92       	push	r1
    42f2:	cd b7       	in	r28, 0x3d	; 61
    42f4:	de b7       	in	r29, 0x3e	; 62
    42f6:	69 83       	std	Y+1, r22	; 0x01
  return write(&b, 1);
    42f8:	dc 01       	movw	r26, r24
    42fa:	ed 91       	ld	r30, X+
    42fc:	fc 91       	ld	r31, X
    42fe:	02 80       	ldd	r0, Z+2	; 0x02
    4300:	f3 81       	ldd	r31, Z+3	; 0x03
    4302:	e0 2d       	mov	r30, r0
    4304:	41 e0       	ldi	r20, 0x01	; 1
    4306:	50 e0       	ldi	r21, 0x00	; 0
    4308:	be 01       	movw	r22, r28
    430a:	6f 5f       	subi	r22, 0xFF	; 255
    430c:	7f 4f       	sbci	r23, 0xFF	; 255
    430e:	09 95       	icall
}
    4310:	0f 90       	pop	r0
    4312:	df 91       	pop	r29
    4314:	cf 91       	pop	r28
    4316:	08 95       	ret

00004318 <_ZN14EthernetClientcvbEv>:

// the next function allows us to use the client returned by
// EthernetServer::available() as the condition in an if-statement.

EthernetClient::operator bool() {
  return _sock != MAX_SOCK_NUM;
    4318:	21 e0       	ldi	r18, 0x01	; 1
    431a:	fc 01       	movw	r30, r24
    431c:	84 85       	ldd	r24, Z+12	; 0x0c
    431e:	88 30       	cpi	r24, 0x08	; 8
    4320:	09 f4       	brne	.+2      	; 0x4324 <_ZN14EthernetClientcvbEv+0xc>
    4322:	20 e0       	ldi	r18, 0x00	; 0
}
    4324:	82 2f       	mov	r24, r18
    4326:	08 95       	ret

00004328 <_ZN14EthernetClienteqERKS_>:

bool EthernetClient::operator==(const EthernetClient& rhs) {
  return _sock == rhs._sock && _sock != MAX_SOCK_NUM && rhs._sock != MAX_SOCK_NUM;
    4328:	fc 01       	movw	r30, r24
    432a:	94 85       	ldd	r25, Z+12	; 0x0c
    432c:	fb 01       	movw	r30, r22
    432e:	84 85       	ldd	r24, Z+12	; 0x0c
    4330:	98 13       	cpse	r25, r24
    4332:	03 c0       	rjmp	.+6      	; 0x433a <_ZN14EthernetClienteqERKS_+0x12>
    4334:	81 e0       	ldi	r24, 0x01	; 1
    4336:	98 30       	cpi	r25, 0x08	; 8
    4338:	09 f4       	brne	.+2      	; 0x433c <_ZN14EthernetClienteqERKS_+0x14>
    433a:	80 e0       	ldi	r24, 0x00	; 0
}
    433c:	08 95       	ret

0000433e <_ZN14EthernetClient7connectEPKcj>:
}

EthernetClient::EthernetClient(uint8_t sock) : _sock(sock) {
}

int EthernetClient::connect(const char* host, uint16_t port) {
    433e:	cf 92       	push	r12
    4340:	df 92       	push	r13
    4342:	ef 92       	push	r14
    4344:	ff 92       	push	r15
    4346:	0f 93       	push	r16
    4348:	1f 93       	push	r17
    434a:	cf 93       	push	r28
    434c:	df 93       	push	r29
    434e:	cd b7       	in	r28, 0x3d	; 61
    4350:	de b7       	in	r29, 0x3e	; 62
    4352:	af 97       	sbiw	r28, 0x2f	; 47
    4354:	0f b6       	in	r0, 0x3f	; 63
    4356:	f8 94       	cli
    4358:	de bf       	out	0x3e, r29	; 62
    435a:	0f be       	out	0x3f, r0	; 63
    435c:	cd bf       	out	0x3d, r28	; 61
    435e:	8c 01       	movw	r16, r24
    4360:	6b 01       	movw	r12, r22
    4362:	7a 01       	movw	r14, r20
#ifndef DNSClient_h
#define DNSClient_h

#include <EthernetUdp2.h>

class DNSClient
    4364:	ce 01       	movw	r24, r28
    4366:	01 96       	adiw	r24, 0x01	; 1
    4368:	0e 94 65 3a 	call	0x74ca	; 0x74ca <_ZN9IPAddressC1Ev>
    436c:	ce 01       	movw	r24, r28
    436e:	09 96       	adiw	r24, 0x09	; 9
    4370:	14 d4       	rcall	.+2088   	; 0x4b9a <_ZN11EthernetUDPC1Ev>
  // Look up the host first
  int ret = 0;
  DNSClient dns;
  IPAddress remote_addr;
    4372:	ce 01       	movw	r24, r28
    4374:	8a 96       	adiw	r24, 0x2a	; 42
    4376:	0e 94 65 3a 	call	0x74ca	; 0x74ca <_ZN9IPAddressC1Ev>

  dns.begin(Ethernet.dnsServerIP());
    437a:	65 e4       	ldi	r22, 0x45	; 69
    437c:	7c e0       	ldi	r23, 0x0C	; 12
    437e:	ce 01       	movw	r24, r28
    4380:	84 96       	adiw	r24, 0x24	; 36
    4382:	81 df       	rcall	.-254    	; 0x4286 <_ZN13EthernetClass11dnsServerIPEv>
    4384:	be 01       	movw	r22, r28
    4386:	6c 5d       	subi	r22, 0xDC	; 220
    4388:	7f 4f       	sbci	r23, 0xFF	; 255
    438a:	ce 01       	movw	r24, r28
    438c:	01 96       	adiw	r24, 0x01	; 1
    438e:	46 dc       	rcall	.-1908   	; 0x3c1c <_ZN9DNSClient5beginERK9IPAddress>
  ret = dns.getHostByName(host, remote_addr);
    4390:	ae 01       	movw	r20, r28
    4392:	46 5d       	subi	r20, 0xD6	; 214
    4394:	5f 4f       	sbci	r21, 0xFF	; 255
    4396:	b6 01       	movw	r22, r12
    4398:	ce 01       	movw	r24, r28
    439a:	01 96       	adiw	r24, 0x01	; 1
    439c:	99 de       	rcall	.-718    	; 0x40d0 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>
  if (ret == 1) {
    439e:	81 30       	cpi	r24, 0x01	; 1
    43a0:	91 05       	cpc	r25, r1
    43a2:	c1 f4       	brne	.+48     	; 0x43d4 <_ZN14EthernetClient7connectEPKcj+0x96>
    return connect(remote_addr, port);
    43a4:	d8 01       	movw	r26, r16
    43a6:	ed 91       	ld	r30, X+
    43a8:	fc 91       	ld	r31, X
    43aa:	06 84       	ldd	r0, Z+14	; 0x0e
    43ac:	f7 85       	ldd	r31, Z+15	; 0x0f
    43ae:	e0 2d       	mov	r30, r0
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    43b0:	8a e5       	ldi	r24, 0x5A	; 90
    43b2:	99 e0       	ldi	r25, 0x09	; 9
    43b4:	9d a3       	std	Y+37, r25	; 0x25
    43b6:	8c a3       	std	Y+36, r24	; 0x24
    43b8:	8c a5       	ldd	r24, Y+44	; 0x2c
    43ba:	9d a5       	ldd	r25, Y+45	; 0x2d
    43bc:	ae a5       	ldd	r26, Y+46	; 0x2e
    43be:	bf a5       	ldd	r27, Y+47	; 0x2f
    43c0:	8e a3       	std	Y+38, r24	; 0x26
    43c2:	9f a3       	std	Y+39, r25	; 0x27
    43c4:	a8 a7       	std	Y+40, r26	; 0x28
    43c6:	b9 a7       	std	Y+41, r27	; 0x29
    43c8:	a7 01       	movw	r20, r14
    43ca:	be 01       	movw	r22, r28
    43cc:	6c 5d       	subi	r22, 0xDC	; 220
    43ce:	7f 4f       	sbci	r23, 0xFF	; 255
    43d0:	c8 01       	movw	r24, r16
    43d2:	09 95       	icall
  } else {
    return ret;
  }
}
    43d4:	af 96       	adiw	r28, 0x2f	; 47
    43d6:	0f b6       	in	r0, 0x3f	; 63
    43d8:	f8 94       	cli
    43da:	de bf       	out	0x3e, r29	; 62
    43dc:	0f be       	out	0x3f, r0	; 63
    43de:	cd bf       	out	0x3d, r28	; 61
    43e0:	df 91       	pop	r29
    43e2:	cf 91       	pop	r28
    43e4:	1f 91       	pop	r17
    43e6:	0f 91       	pop	r16
    43e8:	ff 90       	pop	r15
    43ea:	ef 90       	pop	r14
    43ec:	df 90       	pop	r13
    43ee:	cf 90       	pop	r12
    43f0:	08 95       	ret

000043f2 <_ZN14EthernetClient5writeEPKhj>:

size_t EthernetClient::write(uint8_t b) {
  return write(&b, 1);
}

size_t EthernetClient::write(const uint8_t *buf, size_t size) {
    43f2:	0f 93       	push	r16
    43f4:	1f 93       	push	r17
    43f6:	cf 93       	push	r28
    43f8:	df 93       	push	r29
    43fa:	8c 01       	movw	r16, r24
    43fc:	d4 2f       	mov	r29, r20
    43fe:	c5 2f       	mov	r28, r21
  if (_sock == MAX_SOCK_NUM) {
    4400:	fc 01       	movw	r30, r24
    4402:	84 85       	ldd	r24, Z+12	; 0x0c
    4404:	88 30       	cpi	r24, 0x08	; 8
    4406:	41 f4       	brne	.+16     	; 0x4418 <_ZN14EthernetClient5writeEPKhj+0x26>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    4408:	81 e0       	ldi	r24, 0x01	; 1
    440a:	90 e0       	ldi	r25, 0x00	; 0
    440c:	f8 01       	movw	r30, r16
    440e:	93 83       	std	Z+3, r25	; 0x03
    4410:	82 83       	std	Z+2, r24	; 0x02
    setWriteError();
    return 0;
    4412:	80 e0       	ldi	r24, 0x00	; 0
    4414:	90 e0       	ldi	r25, 0x00	; 0
    4416:	05 c0       	rjmp	.+10     	; 0x4422 <_ZN14EthernetClient5writeEPKhj+0x30>
  }
  if (!send(_sock, buf, size)) {
    4418:	0c d5       	rcall	.+2584   	; 0x4e32 <_Z4sendhPKhj>
    441a:	89 2b       	or	r24, r25
    441c:	a9 f3       	breq	.-22     	; 0x4408 <_ZN14EthernetClient5writeEPKhj+0x16>
    setWriteError();
    return 0;
  }
  return size;
    441e:	8d 2f       	mov	r24, r29
    4420:	9c 2f       	mov	r25, r28
}
    4422:	df 91       	pop	r29
    4424:	cf 91       	pop	r28
    4426:	1f 91       	pop	r17
    4428:	0f 91       	pop	r16
    442a:	08 95       	ret

0000442c <_ZN14EthernetClient9availableEv>:

int EthernetClient::available() {
  if (_sock != MAX_SOCK_NUM)
    442c:	fc 01       	movw	r30, r24
    442e:	64 85       	ldd	r22, Z+12	; 0x0c
    4430:	68 30       	cpi	r22, 0x08	; 8
    4432:	19 f0       	breq	.+6      	; 0x443a <_ZN14EthernetClient9availableEv+0xe>
    return w5500.getRXReceivedSize(_sock);
    4434:	85 e8       	ldi	r24, 0x85	; 133
    4436:	9c e0       	ldi	r25, 0x0C	; 12
    4438:	e9 c6       	rjmp	.+3538   	; 0x520c <_ZN10W5500Class17getRXReceivedSizeEh>
  return 0;
}
    443a:	80 e0       	ldi	r24, 0x00	; 0
    443c:	90 e0       	ldi	r25, 0x00	; 0
    443e:	08 95       	ret

00004440 <_ZN14EthernetClient4readEv>:

int EthernetClient::read() {
    4440:	cf 93       	push	r28
    4442:	df 93       	push	r29
    4444:	1f 92       	push	r1
    4446:	cd b7       	in	r28, 0x3d	; 61
    4448:	de b7       	in	r29, 0x3e	; 62
  uint8_t b;
  if ( recv(_sock, &b, 1) > 0 )
    444a:	41 e0       	ldi	r20, 0x01	; 1
    444c:	50 e0       	ldi	r21, 0x00	; 0
    444e:	be 01       	movw	r22, r28
    4450:	6f 5f       	subi	r22, 0xFF	; 255
    4452:	7f 4f       	sbci	r23, 0xFF	; 255
    4454:	fc 01       	movw	r30, r24
    4456:	84 85       	ldd	r24, Z+12	; 0x0c
    4458:	34 d5       	rcall	.+2664   	; 0x4ec2 <_Z4recvhPhi>
    445a:	18 16       	cp	r1, r24
    445c:	19 06       	cpc	r1, r25
    445e:	1c f4       	brge	.+6      	; 0x4466 <_ZN14EthernetClient4readEv+0x26>
  {
    // recv worked
    return b;
    4460:	89 81       	ldd	r24, Y+1	; 0x01
    4462:	90 e0       	ldi	r25, 0x00	; 0
    4464:	02 c0       	rjmp	.+4      	; 0x446a <_ZN14EthernetClient4readEv+0x2a>
  }
  else
  {
    // No data available
    return -1;
    4466:	8f ef       	ldi	r24, 0xFF	; 255
    4468:	9f ef       	ldi	r25, 0xFF	; 255
  }
}
    446a:	0f 90       	pop	r0
    446c:	df 91       	pop	r29
    446e:	cf 91       	pop	r28
    4470:	08 95       	ret

00004472 <_ZN14EthernetClient4readEPhj>:

int EthernetClient::read(uint8_t *buf, size_t size) {
  return recv(_sock, buf, size);
    4472:	fc 01       	movw	r30, r24
    4474:	84 85       	ldd	r24, Z+12	; 0x0c
    4476:	25 c5       	rjmp	.+2634   	; 0x4ec2 <_Z4recvhPhi>

00004478 <_ZN14EthernetClient4peekEv>:
}

int EthernetClient::peek() {
    4478:	0f 93       	push	r16
    447a:	1f 93       	push	r17
    447c:	cf 93       	push	r28
    447e:	df 93       	push	r29
    4480:	1f 92       	push	r1
    4482:	cd b7       	in	r28, 0x3d	; 61
    4484:	de b7       	in	r29, 0x3e	; 62
    4486:	8c 01       	movw	r16, r24
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must
  if (!available())
    4488:	dc 01       	movw	r26, r24
    448a:	ed 91       	ld	r30, X+
    448c:	fc 91       	ld	r31, X
    448e:	00 84       	ldd	r0, Z+8	; 0x08
    4490:	f1 85       	ldd	r31, Z+9	; 0x09
    4492:	e0 2d       	mov	r30, r0
    4494:	09 95       	icall
    4496:	89 2b       	or	r24, r25
    4498:	49 f0       	breq	.+18     	; 0x44ac <_ZN14EthernetClient4peekEv+0x34>
    return -1;
  ::peek(_sock, &b);
    449a:	be 01       	movw	r22, r28
    449c:	6f 5f       	subi	r22, 0xFF	; 255
    449e:	7f 4f       	sbci	r23, 0xFF	; 255
    44a0:	f8 01       	movw	r30, r16
    44a2:	84 85       	ldd	r24, Z+12	; 0x0c
    44a4:	4f d5       	rcall	.+2718   	; 0x4f44 <_Z4peekhPh>
  return b;
    44a6:	89 81       	ldd	r24, Y+1	; 0x01
    44a8:	90 e0       	ldi	r25, 0x00	; 0
    44aa:	02 c0       	rjmp	.+4      	; 0x44b0 <_ZN14EthernetClient4peekEv+0x38>

int EthernetClient::peek() {
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must
  if (!available())
    return -1;
    44ac:	8f ef       	ldi	r24, 0xFF	; 255
    44ae:	9f ef       	ldi	r25, 0xFF	; 255
  ::peek(_sock, &b);
  return b;
}
    44b0:	0f 90       	pop	r0
    44b2:	df 91       	pop	r29
    44b4:	cf 91       	pop	r28
    44b6:	1f 91       	pop	r17
    44b8:	0f 91       	pop	r16
    44ba:	08 95       	ret

000044bc <_ZN14EthernetClient5flushEv>:

void EthernetClient::flush() {
  ::flush(_sock);
    44bc:	fc 01       	movw	r30, r24
    44be:	84 85       	ldd	r24, Z+12	; 0x0c
    44c0:	4e c5       	rjmp	.+2716   	; 0x4f5e <_Z5flushh>

000044c2 <_ZN14EthernetClientC1Ev>:
#include "EthernetServer.h"
#include "Dns.h"

uint16_t EthernetClient::_srcport = 1024;

EthernetClient::EthernetClient() : _sock(MAX_SOCK_NUM) {
    44c2:	fc 01       	movw	r30, r24
  public:
    Print() : write_error(0) {}
    44c4:	13 82       	std	Z+3, r1	; 0x03
    44c6:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    44c8:	88 ee       	ldi	r24, 0xE8	; 232
    44ca:	93 e0       	ldi	r25, 0x03	; 3
    44cc:	a0 e0       	ldi	r26, 0x00	; 0
    44ce:	b0 e0       	ldi	r27, 0x00	; 0
    44d0:	84 83       	std	Z+4, r24	; 0x04
    44d2:	95 83       	std	Z+5, r25	; 0x05
    44d4:	a6 83       	std	Z+6, r26	; 0x06
    44d6:	b7 83       	std	Z+7, r27	; 0x07
    44d8:	88 ec       	ldi	r24, 0xC8	; 200
    44da:	98 e0       	ldi	r25, 0x08	; 8
    44dc:	91 83       	std	Z+1, r25	; 0x01
    44de:	80 83       	st	Z, r24
    44e0:	88 e0       	ldi	r24, 0x08	; 8
    44e2:	84 87       	std	Z+12, r24	; 0x0c
    44e4:	08 95       	ret

000044e6 <_ZN14EthernetClientC1Eh>:
}

EthernetClient::EthernetClient(uint8_t sock) : _sock(sock) {
    44e6:	fc 01       	movw	r30, r24
    44e8:	13 82       	std	Z+3, r1	; 0x03
    44ea:	12 82       	std	Z+2, r1	; 0x02
    44ec:	88 ee       	ldi	r24, 0xE8	; 232
    44ee:	93 e0       	ldi	r25, 0x03	; 3
    44f0:	a0 e0       	ldi	r26, 0x00	; 0
    44f2:	b0 e0       	ldi	r27, 0x00	; 0
    44f4:	84 83       	std	Z+4, r24	; 0x04
    44f6:	95 83       	std	Z+5, r25	; 0x05
    44f8:	a6 83       	std	Z+6, r26	; 0x06
    44fa:	b7 83       	std	Z+7, r27	; 0x07
    44fc:	88 ec       	ldi	r24, 0xC8	; 200
    44fe:	98 e0       	ldi	r25, 0x08	; 8
    4500:	91 83       	std	Z+1, r25	; 0x01
    4502:	80 83       	st	Z, r24
    4504:	64 87       	std	Z+12, r22	; 0x0c
    4506:	08 95       	ret

00004508 <_ZN14EthernetClient6statusEv>:
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
}

uint8_t EthernetClient::status() {
  if (_sock == MAX_SOCK_NUM) return SnSR::CLOSED;
    4508:	fc 01       	movw	r30, r24
    450a:	64 85       	ldd	r22, Z+12	; 0x0c
    450c:	68 30       	cpi	r22, 0x08	; 8
    450e:	39 f0       	breq	.+14     	; 0x451e <_ZN14EthernetClient6statusEv+0x16>

extern W5500Class w5500;

uint8_t W5500Class::readSn(SOCKET _s, uint16_t _addr) {
    uint8_t cntl_byte = (_s<<5)+0x08;
    return read(_addr, cntl_byte);
    4510:	62 95       	swap	r22
    4512:	66 0f       	add	r22, r22
    4514:	60 7e       	andi	r22, 0xE0	; 224
    4516:	68 5f       	subi	r22, 0xF8	; 248
    4518:	83 e0       	ldi	r24, 0x03	; 3
    451a:	90 e0       	ldi	r25, 0x00	; 0
    451c:	e4 c5       	rjmp	.+3016   	; 0x50e6 <_ZN10W5500Class4readEjh>
  return w5500.readSnSR(_sock);
}
    451e:	80 e0       	ldi	r24, 0x00	; 0
    4520:	08 95       	ret

00004522 <_ZN14EthernetClient9connectedEv>:

  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
    4522:	cf 93       	push	r28
    4524:	df 93       	push	r29
  if (_sock == MAX_SOCK_NUM) return 0;
    4526:	fc 01       	movw	r30, r24
    4528:	24 85       	ldd	r18, Z+12	; 0x0c
    452a:	28 30       	cpi	r18, 0x08	; 8
    452c:	c9 f0       	breq	.+50     	; 0x4560 <_ZN14EthernetClient9connectedEv+0x3e>
    452e:	ec 01       	movw	r28, r24
  
  uint8_t s = status();
    4530:	eb df       	rcall	.-42     	; 0x4508 <_ZN14EthernetClient6statusEv>
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
    4532:	84 31       	cpi	r24, 0x14	; 20
    4534:	81 f0       	breq	.+32     	; 0x4556 <_ZN14EthernetClient9connectedEv+0x34>

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
  
  uint8_t s = status();
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    4536:	88 23       	and	r24, r24
    4538:	71 f0       	breq	.+28     	; 0x4556 <_ZN14EthernetClient9connectedEv+0x34>
    453a:	88 31       	cpi	r24, 0x18	; 24
    453c:	61 f0       	breq	.+24     	; 0x4556 <_ZN14EthernetClient9connectedEv+0x34>
    (s == SnSR::CLOSE_WAIT && !available()));
    453e:	8c 31       	cpi	r24, 0x1C	; 28
    4540:	61 f4       	brne	.+24     	; 0x455a <_ZN14EthernetClient9connectedEv+0x38>
    4542:	e8 81       	ld	r30, Y
    4544:	f9 81       	ldd	r31, Y+1	; 0x01
    4546:	00 84       	ldd	r0, Z+8	; 0x08
    4548:	f1 85       	ldd	r31, Z+9	; 0x09
    454a:	e0 2d       	mov	r30, r0
    454c:	ce 01       	movw	r24, r28
    454e:	09 95       	icall
    4550:	21 e0       	ldi	r18, 0x01	; 1
    4552:	89 2b       	or	r24, r25
    4554:	19 f4       	brne	.+6      	; 0x455c <_ZN14EthernetClient9connectedEv+0x3a>
    4556:	20 e0       	ldi	r18, 0x00	; 0
    4558:	01 c0       	rjmp	.+2      	; 0x455c <_ZN14EthernetClient9connectedEv+0x3a>
    455a:	21 e0       	ldi	r18, 0x01	; 1
    455c:	82 2f       	mov	r24, r18
    455e:	01 c0       	rjmp	.+2      	; 0x4562 <_ZN14EthernetClient9connectedEv+0x40>
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
    4560:	80 e0       	ldi	r24, 0x00	; 0
  
  uint8_t s = status();
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
}
    4562:	df 91       	pop	r29
    4564:	cf 91       	pop	r28
    4566:	08 95       	ret

00004568 <_ZN14EthernetClient4stopEv>:

void EthernetClient::flush() {
  ::flush(_sock);
}

void EthernetClient::stop() {
    4568:	cf 92       	push	r12
    456a:	df 92       	push	r13
    456c:	ef 92       	push	r14
    456e:	ff 92       	push	r15
    4570:	cf 93       	push	r28
    4572:	df 93       	push	r29
    4574:	ec 01       	movw	r28, r24
  if (_sock == MAX_SOCK_NUM)
    4576:	8c 85       	ldd	r24, Y+12	; 0x0c
    4578:	88 30       	cpi	r24, 0x08	; 8
    457a:	69 f1       	breq	.+90     	; 0x45d6 <_ZN14EthernetClient4stopEv+0x6e>
    return;

  // attempt to close the connection gracefully (send a FIN to other side)
  disconnect(_sock);
    457c:	55 d4       	rcall	.+2218   	; 0x4e28 <_Z10disconnecth>
  unsigned long start = millis();
    457e:	0e 94 0c 3c 	call	0x7818	; 0x7818 <millis>
    4582:	6b 01       	movw	r12, r22
    4584:	7c 01       	movw	r14, r24

  // wait a second for the connection to close
  while (status() != SnSR::CLOSED && millis() - start < 1000)
    4586:	ce 01       	movw	r24, r28
    4588:	bf df       	rcall	.-130    	; 0x4508 <_ZN14EthernetClient6statusEv>
    458a:	88 23       	and	r24, r24
    458c:	a1 f0       	breq	.+40     	; 0x45b6 <_ZN14EthernetClient4stopEv+0x4e>
    458e:	0e 94 0c 3c 	call	0x7818	; 0x7818 <millis>
    4592:	dc 01       	movw	r26, r24
    4594:	cb 01       	movw	r24, r22
    4596:	8c 19       	sub	r24, r12
    4598:	9d 09       	sbc	r25, r13
    459a:	ae 09       	sbc	r26, r14
    459c:	bf 09       	sbc	r27, r15
    459e:	88 3e       	cpi	r24, 0xE8	; 232
    45a0:	93 40       	sbci	r25, 0x03	; 3
    45a2:	a1 05       	cpc	r26, r1
    45a4:	b1 05       	cpc	r27, r1
    45a6:	38 f4       	brcc	.+14     	; 0x45b6 <_ZN14EthernetClient4stopEv+0x4e>
    delay(1);
    45a8:	61 e0       	ldi	r22, 0x01	; 1
    45aa:	70 e0       	ldi	r23, 0x00	; 0
    45ac:	80 e0       	ldi	r24, 0x00	; 0
    45ae:	90 e0       	ldi	r25, 0x00	; 0
    45b0:	0e 94 3d 3c 	call	0x787a	; 0x787a <delay>

  // if it hasn't closed, close it forcefully
  if (status() != SnSR::CLOSED)
    45b4:	e8 cf       	rjmp	.-48     	; 0x4586 <_ZN14EthernetClient4stopEv+0x1e>
    45b6:	ce 01       	movw	r24, r28
    45b8:	a7 df       	rcall	.-178    	; 0x4508 <_ZN14EthernetClient6statusEv>
    45ba:	88 23       	and	r24, r24
    close(_sock);
    45bc:	11 f0       	breq	.+4      	; 0x45c2 <_ZN14EthernetClient4stopEv+0x5a>
    45be:	8c 85       	ldd	r24, Y+12	; 0x0c
    45c0:	b1 d3       	rcall	.+1890   	; 0x4d24 <_Z5closeh>

  EthernetClass::_server_port[_sock] = 0;
    45c2:	ec 85       	ldd	r30, Y+12	; 0x0c
    45c4:	f0 e0       	ldi	r31, 0x00	; 0
    45c6:	ee 0f       	add	r30, r30
    45c8:	ff 1f       	adc	r31, r31
    45ca:	ee 5a       	subi	r30, 0xAE	; 174
    45cc:	f3 4f       	sbci	r31, 0xF3	; 243
    45ce:	11 82       	std	Z+1, r1	; 0x01
    45d0:	10 82       	st	Z, r1
  _sock = MAX_SOCK_NUM;
    45d2:	88 e0       	ldi	r24, 0x08	; 8
    45d4:	8c 87       	std	Y+12, r24	; 0x0c
}
    45d6:	df 91       	pop	r29
    45d8:	cf 91       	pop	r28
    45da:	ff 90       	pop	r15
    45dc:	ef 90       	pop	r14
    45de:	df 90       	pop	r13
    45e0:	cf 90       	pop	r12
    45e2:	08 95       	ret

000045e4 <_ZN14EthernetClient7connectE9IPAddressj>:
  } else {
    return ret;
  }
}

int EthernetClient::connect(IPAddress ip, uint16_t port) {
    45e4:	cf 92       	push	r12
    45e6:	df 92       	push	r13
    45e8:	ff 92       	push	r15
    45ea:	0f 93       	push	r16
    45ec:	1f 93       	push	r17
    45ee:	cf 93       	push	r28
    45f0:	df 93       	push	r29
  if (_sock != MAX_SOCK_NUM)
    45f2:	fc 01       	movw	r30, r24
    45f4:	24 85       	ldd	r18, Z+12	; 0x0c
    45f6:	28 30       	cpi	r18, 0x08	; 8
    45f8:	c1 f5       	brne	.+112    	; 0x466a <_ZN14EthernetClient7connectE9IPAddressj+0x86>
    45fa:	6a 01       	movw	r12, r20
    45fc:	8b 01       	movw	r16, r22
    45fe:	ec 01       	movw	r28, r24
    4600:	f1 2c       	mov	r15, r1
    4602:	6f 2d       	mov	r22, r15
    4604:	62 95       	swap	r22
    4606:	66 0f       	add	r22, r22
    4608:	60 7e       	andi	r22, 0xE0	; 224
    460a:	68 5f       	subi	r22, 0xF8	; 248
    460c:	83 e0       	ldi	r24, 0x03	; 3
    460e:	90 e0       	ldi	r25, 0x00	; 0
    4610:	6a d5       	rcall	.+2772   	; 0x50e6 <_ZN10W5500Class4readEjh>
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
    4612:	81 11       	cpse	r24, r1
    4614:	02 c0       	rjmp	.+4      	; 0x461a <_ZN14EthernetClient7connectE9IPAddressj+0x36>
      _sock = i;
    4616:	fc 86       	std	Y+12, r15	; 0x0c
    4618:	07 c0       	rjmp	.+14     	; 0x4628 <_ZN14EthernetClient7connectE9IPAddressj+0x44>
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
    461a:	8b 7f       	andi	r24, 0xFB	; 251
    461c:	88 31       	cpi	r24, 0x18	; 24
    461e:	d9 f3       	breq	.-10     	; 0x4616 <_ZN14EthernetClient7connectE9IPAddressj+0x32>
    4620:	f3 94       	inc	r15

int EthernetClient::connect(IPAddress ip, uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    4622:	f8 e0       	ldi	r31, 0x08	; 8
    4624:	ff 12       	cpse	r15, r31
    4626:	ed cf       	rjmp	.-38     	; 0x4602 <_ZN14EthernetClient7connectE9IPAddressj+0x1e>
      _sock = i;
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
    4628:	8c 85       	ldd	r24, Y+12	; 0x0c
    462a:	88 30       	cpi	r24, 0x08	; 8
    462c:	f1 f0       	breq	.+60     	; 0x466a <_ZN14EthernetClient7connectE9IPAddressj+0x86>
    return 0;

  _srcport++;
    462e:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <_ZN14EthernetClient8_srcportE>
    4632:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <_ZN14EthernetClient8_srcportE+0x1>
    4636:	2f 5f       	subi	r18, 0xFF	; 255
    4638:	3f 4f       	sbci	r19, 0xFF	; 255
  if (_srcport == 0) _srcport = 1024;
    463a:	11 f4       	brne	.+4      	; 0x4640 <_ZN14EthernetClient7connectE9IPAddressj+0x5c>
    463c:	20 e0       	ldi	r18, 0x00	; 0
    463e:	34 e0       	ldi	r19, 0x04	; 4
    4640:	30 93 4b 01 	sts	0x014B, r19	; 0x80014b <_ZN14EthernetClient8_srcportE+0x1>
    4644:	20 93 4a 01 	sts	0x014A, r18	; 0x80014a <_ZN14EthernetClient8_srcportE>
  socket(_sock, SnMR::TCP, _srcport, 0);
    4648:	40 91 4a 01 	lds	r20, 0x014A	; 0x80014a <_ZN14EthernetClient8_srcportE>
    464c:	50 91 4b 01 	lds	r21, 0x014B	; 0x80014b <_ZN14EthernetClient8_srcportE+0x1>
    4650:	20 e0       	ldi	r18, 0x00	; 0
    4652:	61 e0       	ldi	r22, 0x01	; 1
    4654:	72 d3       	rcall	.+1764   	; 0x4d3a <_Z6sockethhjh>

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    4656:	b8 01       	movw	r22, r16
    4658:	6e 5f       	subi	r22, 0xFE	; 254
    465a:	7f 4f       	sbci	r23, 0xFF	; 255

  if (!::connect(_sock, rawIPAddress(ip), port)) {
    465c:	a6 01       	movw	r20, r12
    465e:	8c 85       	ldd	r24, Y+12	; 0x0c
    4660:	b0 d3       	rcall	.+1888   	; 0x4dc2 <_Z7connecthPhj>
    4662:	81 11       	cpse	r24, r1
    4664:	05 c0       	rjmp	.+10     	; 0x4670 <_ZN14EthernetClient7connectE9IPAddressj+0x8c>
    _sock = MAX_SOCK_NUM;
    4666:	88 e0       	ldi	r24, 0x08	; 8
    4668:	8c 87       	std	Y+12, r24	; 0x0c
    return 0;
    466a:	80 e0       	ldi	r24, 0x00	; 0
    466c:	90 e0       	ldi	r25, 0x00	; 0
  }

  while (status() != SnSR::ESTABLISHED) {
    466e:	0f c0       	rjmp	.+30     	; 0x468e <_ZN14EthernetClient7connectE9IPAddressj+0xaa>
    4670:	ce 01       	movw	r24, r28
    4672:	4a df       	rcall	.-364    	; 0x4508 <_ZN14EthernetClient6statusEv>
    4674:	87 31       	cpi	r24, 0x17	; 23
    4676:	49 f0       	breq	.+18     	; 0x468a <_ZN14EthernetClient7connectE9IPAddressj+0xa6>
    delay(1);
    4678:	61 e0       	ldi	r22, 0x01	; 1
    467a:	70 e0       	ldi	r23, 0x00	; 0
    467c:	80 e0       	ldi	r24, 0x00	; 0
    467e:	90 e0       	ldi	r25, 0x00	; 0
    4680:	0e 94 3d 3c 	call	0x787a	; 0x787a <delay>
    if (status() == SnSR::CLOSED) {
    4684:	ce 01       	movw	r24, r28
    4686:	40 df       	rcall	.-384    	; 0x4508 <_ZN14EthernetClient6statusEv>
    4688:	ec cf       	rjmp	.-40     	; 0x4662 <_ZN14EthernetClient7connectE9IPAddressj+0x7e>
      _sock = MAX_SOCK_NUM;
      return 0;
    }
  }

  return 1;
    468a:	81 e0       	ldi	r24, 0x01	; 1
    468c:	90 e0       	ldi	r25, 0x00	; 0
}
    468e:	df 91       	pop	r29
    4690:	cf 91       	pop	r28
    4692:	1f 91       	pop	r17
    4694:	0f 91       	pop	r16
    4696:	ff 90       	pop	r15
    4698:	df 90       	pop	r13
    469a:	cf 90       	pop	r12
    469c:	08 95       	ret

0000469e <_GLOBAL__sub_I__ZN14EthernetClient8_srcportE>:
  return _sock != MAX_SOCK_NUM;
}

bool EthernetClient::operator==(const EthernetClient& rhs) {
  return _sock == rhs._sock && _sock != MAX_SOCK_NUM && rhs._sock != MAX_SOCK_NUM;
}
    469e:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    46a0:	00 e0       	ldi	r16, 0x00	; 0
    46a2:	20 e0       	ldi	r18, 0x00	; 0
    46a4:	40 e0       	ldi	r20, 0x00	; 0
    46a6:	60 e0       	ldi	r22, 0x00	; 0
    46a8:	88 e6       	ldi	r24, 0x68	; 104
    46aa:	9c e0       	ldi	r25, 0x0C	; 12
    46ac:	0e 94 6f 3a 	call	0x74de	; 0x74de <_ZN9IPAddressC1Ehhhh>
    46b0:	0f 91       	pop	r16
    46b2:	08 95       	ret

000046b4 <_ZN14EthernetServer5writeEh>:
      }
    }
  }

  return EthernetClient(MAX_SOCK_NUM);
}
    46b4:	cf 93       	push	r28
    46b6:	df 93       	push	r29
    46b8:	1f 92       	push	r1
    46ba:	cd b7       	in	r28, 0x3d	; 61
    46bc:	de b7       	in	r29, 0x3e	; 62
    46be:	69 83       	std	Y+1, r22	; 0x01
    46c0:	dc 01       	movw	r26, r24
    46c2:	ed 91       	ld	r30, X+
    46c4:	fc 91       	ld	r31, X
    46c6:	02 80       	ldd	r0, Z+2	; 0x02
    46c8:	f3 81       	ldd	r31, Z+3	; 0x03
    46ca:	e0 2d       	mov	r30, r0
    46cc:	41 e0       	ldi	r20, 0x01	; 1
    46ce:	50 e0       	ldi	r21, 0x00	; 0
    46d0:	be 01       	movw	r22, r28
    46d2:	6f 5f       	subi	r22, 0xFF	; 255
    46d4:	7f 4f       	sbci	r23, 0xFF	; 255
    46d6:	09 95       	icall
    46d8:	0f 90       	pop	r0
    46da:	df 91       	pop	r29
    46dc:	cf 91       	pop	r28
    46de:	08 95       	ret

000046e0 <_ZN14EthernetServer5beginEv>:
    46e0:	ef 92       	push	r14
    46e2:	ff 92       	push	r15
    46e4:	0f 93       	push	r16
    46e6:	1f 93       	push	r17
    46e8:	cf 93       	push	r28
    46ea:	df 93       	push	r29
    46ec:	cd b7       	in	r28, 0x3d	; 61
    46ee:	de b7       	in	r29, 0x3e	; 62
    46f0:	2d 97       	sbiw	r28, 0x0d	; 13
    46f2:	0f b6       	in	r0, 0x3f	; 63
    46f4:	f8 94       	cli
    46f6:	de bf       	out	0x3e, r29	; 62
    46f8:	0f be       	out	0x3f, r0	; 63
    46fa:	cd bf       	out	0x3d, r28	; 61
    46fc:	7c 01       	movw	r14, r24
    46fe:	00 e0       	ldi	r16, 0x00	; 0
    4700:	10 e0       	ldi	r17, 0x00	; 0
    4702:	60 2f       	mov	r22, r16
    4704:	ce 01       	movw	r24, r28
    4706:	01 96       	adiw	r24, 0x01	; 1
    4708:	ee de       	rcall	.-548    	; 0x44e6 <_ZN14EthernetClientC1Eh>
    470a:	ce 01       	movw	r24, r28
    470c:	01 96       	adiw	r24, 0x01	; 1
    470e:	fc de       	rcall	.-520    	; 0x4508 <_ZN14EthernetClient6statusEv>
    4710:	81 11       	cpse	r24, r1
    4712:	14 c0       	rjmp	.+40     	; 0x473c <_ZN14EthernetServer5beginEv+0x5c>
    4714:	f7 01       	movw	r30, r14
    4716:	44 81       	ldd	r20, Z+4	; 0x04
    4718:	55 81       	ldd	r21, Z+5	; 0x05
    471a:	20 e0       	ldi	r18, 0x00	; 0
    471c:	61 e0       	ldi	r22, 0x01	; 1
    471e:	80 2f       	mov	r24, r16
    4720:	0c d3       	rcall	.+1560   	; 0x4d3a <_Z6sockethhjh>
    4722:	80 2f       	mov	r24, r16
    4724:	3d d3       	rcall	.+1658   	; 0x4da0 <_Z6listenh>
    4726:	f7 01       	movw	r30, r14
    4728:	84 81       	ldd	r24, Z+4	; 0x04
    472a:	95 81       	ldd	r25, Z+5	; 0x05
    472c:	00 0f       	add	r16, r16
    472e:	11 1f       	adc	r17, r17
    4730:	f8 01       	movw	r30, r16
    4732:	ee 5a       	subi	r30, 0xAE	; 174
    4734:	f3 4f       	sbci	r31, 0xF3	; 243
    4736:	91 83       	std	Z+1, r25	; 0x01
    4738:	80 83       	st	Z, r24
    473a:	05 c0       	rjmp	.+10     	; 0x4746 <_ZN14EthernetServer5beginEv+0x66>
    473c:	0f 5f       	subi	r16, 0xFF	; 255
    473e:	1f 4f       	sbci	r17, 0xFF	; 255
    4740:	08 30       	cpi	r16, 0x08	; 8
    4742:	11 05       	cpc	r17, r1
    4744:	f1 f6       	brne	.-68     	; 0x4702 <_ZN14EthernetServer5beginEv+0x22>
    4746:	2d 96       	adiw	r28, 0x0d	; 13
    4748:	0f b6       	in	r0, 0x3f	; 63
    474a:	f8 94       	cli
    474c:	de bf       	out	0x3e, r29	; 62
    474e:	0f be       	out	0x3f, r0	; 63
    4750:	cd bf       	out	0x3d, r28	; 61
    4752:	df 91       	pop	r29
    4754:	cf 91       	pop	r28
    4756:	1f 91       	pop	r17
    4758:	0f 91       	pop	r16
    475a:	ff 90       	pop	r15
    475c:	ef 90       	pop	r14
    475e:	08 95       	ret

00004760 <_ZN14EthernetServerC1Ej>:
    4760:	fc 01       	movw	r30, r24
    4762:	13 82       	std	Z+3, r1	; 0x03
    4764:	12 82       	std	Z+2, r1	; 0x02
    4766:	8a ee       	ldi	r24, 0xEA	; 234
    4768:	98 e0       	ldi	r25, 0x08	; 8
    476a:	91 83       	std	Z+1, r25	; 0x01
    476c:	80 83       	st	Z, r24
    476e:	75 83       	std	Z+5, r23	; 0x05
    4770:	64 83       	std	Z+4, r22	; 0x04
    4772:	08 95       	ret

00004774 <_ZN14EthernetServer6acceptEv>:
    4774:	af 92       	push	r10
    4776:	bf 92       	push	r11
    4778:	cf 92       	push	r12
    477a:	df 92       	push	r13
    477c:	ef 92       	push	r14
    477e:	ff 92       	push	r15
    4780:	1f 93       	push	r17
    4782:	cf 93       	push	r28
    4784:	df 93       	push	r29
    4786:	cd b7       	in	r28, 0x3d	; 61
    4788:	de b7       	in	r29, 0x3e	; 62
    478a:	2d 97       	sbiw	r28, 0x0d	; 13
    478c:	0f b6       	in	r0, 0x3f	; 63
    478e:	f8 94       	cli
    4790:	de bf       	out	0x3e, r29	; 62
    4792:	0f be       	out	0x3f, r0	; 63
    4794:	cd bf       	out	0x3d, r28	; 61
    4796:	7c 01       	movw	r14, r24
    4798:	92 e5       	ldi	r25, 0x52	; 82
    479a:	a9 2e       	mov	r10, r25
    479c:	9c e0       	ldi	r25, 0x0C	; 12
    479e:	b9 2e       	mov	r11, r25
    47a0:	10 e0       	ldi	r17, 0x00	; 0
    47a2:	c1 2c       	mov	r12, r1
    47a4:	d1 2c       	mov	r13, r1
    47a6:	61 2f       	mov	r22, r17
    47a8:	ce 01       	movw	r24, r28
    47aa:	01 96       	adiw	r24, 0x01	; 1
    47ac:	9c de       	rcall	.-712    	; 0x44e6 <_ZN14EthernetClientC1Eh>
    47ae:	d5 01       	movw	r26, r10
    47b0:	2d 91       	ld	r18, X+
    47b2:	3d 91       	ld	r19, X+
    47b4:	5d 01       	movw	r10, r26
    47b6:	f7 01       	movw	r30, r14
    47b8:	84 81       	ldd	r24, Z+4	; 0x04
    47ba:	95 81       	ldd	r25, Z+5	; 0x05
    47bc:	28 17       	cp	r18, r24
    47be:	39 07       	cpc	r19, r25
    47c0:	99 f4       	brne	.+38     	; 0x47e8 <_ZN14EthernetServer6acceptEv+0x74>
    47c2:	ce 01       	movw	r24, r28
    47c4:	01 96       	adiw	r24, 0x01	; 1
    47c6:	a0 de       	rcall	.-704    	; 0x4508 <_ZN14EthernetClient6statusEv>
    47c8:	84 31       	cpi	r24, 0x14	; 20
    47ca:	59 f0       	breq	.+22     	; 0x47e2 <_ZN14EthernetServer6acceptEv+0x6e>
    47cc:	ce 01       	movw	r24, r28
    47ce:	01 96       	adiw	r24, 0x01	; 1
    47d0:	9b de       	rcall	.-714    	; 0x4508 <_ZN14EthernetClient6statusEv>
    47d2:	8c 31       	cpi	r24, 0x1C	; 28
    47d4:	49 f4       	brne	.+18     	; 0x47e8 <_ZN14EthernetServer6acceptEv+0x74>
    47d6:	ce 01       	movw	r24, r28
    47d8:	01 96       	adiw	r24, 0x01	; 1
    47da:	28 de       	rcall	.-944    	; 0x442c <_ZN14EthernetClient9availableEv>
    47dc:	89 2b       	or	r24, r25
    47de:	91 f0       	breq	.+36     	; 0x4804 <_ZN14EthernetServer6acceptEv+0x90>
    47e0:	03 c0       	rjmp	.+6      	; 0x47e8 <_ZN14EthernetServer6acceptEv+0x74>
    47e2:	cc 24       	eor	r12, r12
    47e4:	c3 94       	inc	r12
    47e6:	d1 2c       	mov	r13, r1
    47e8:	1f 5f       	subi	r17, 0xFF	; 255
    47ea:	18 30       	cpi	r17, 0x08	; 8
    47ec:	e1 f6       	brne	.-72     	; 0x47a6 <_ZN14EthernetServer6acceptEv+0x32>
    47ee:	cd 28       	or	r12, r13
    47f0:	69 f4       	brne	.+26     	; 0x480c <_ZN14EthernetServer6acceptEv+0x98>
    47f2:	d7 01       	movw	r26, r14
    47f4:	ed 91       	ld	r30, X+
    47f6:	fc 91       	ld	r31, X
    47f8:	00 84       	ldd	r0, Z+8	; 0x08
    47fa:	f1 85       	ldd	r31, Z+9	; 0x09
    47fc:	e0 2d       	mov	r30, r0
    47fe:	c7 01       	movw	r24, r14
    4800:	09 95       	icall
    4802:	04 c0       	rjmp	.+8      	; 0x480c <_ZN14EthernetServer6acceptEv+0x98>
    4804:	ce 01       	movw	r24, r28
    4806:	01 96       	adiw	r24, 0x01	; 1
    4808:	af de       	rcall	.-674    	; 0x4568 <_ZN14EthernetClient4stopEv>
    480a:	ee cf       	rjmp	.-36     	; 0x47e8 <_ZN14EthernetServer6acceptEv+0x74>
    480c:	2d 96       	adiw	r28, 0x0d	; 13
    480e:	0f b6       	in	r0, 0x3f	; 63
    4810:	f8 94       	cli
    4812:	de bf       	out	0x3e, r29	; 62
    4814:	0f be       	out	0x3f, r0	; 63
    4816:	cd bf       	out	0x3d, r28	; 61
    4818:	df 91       	pop	r29
    481a:	cf 91       	pop	r28
    481c:	1f 91       	pop	r17
    481e:	ff 90       	pop	r15
    4820:	ef 90       	pop	r14
    4822:	df 90       	pop	r13
    4824:	cf 90       	pop	r12
    4826:	bf 90       	pop	r11
    4828:	af 90       	pop	r10
    482a:	08 95       	ret

0000482c <_ZN14EthernetServer5writeEPKhj>:
    482c:	7f 92       	push	r7
    482e:	8f 92       	push	r8
    4830:	9f 92       	push	r9
    4832:	af 92       	push	r10
    4834:	bf 92       	push	r11
    4836:	cf 92       	push	r12
    4838:	df 92       	push	r13
    483a:	ef 92       	push	r14
    483c:	ff 92       	push	r15
    483e:	0f 93       	push	r16
    4840:	1f 93       	push	r17
    4842:	cf 93       	push	r28
    4844:	df 93       	push	r29
    4846:	cd b7       	in	r28, 0x3d	; 61
    4848:	de b7       	in	r29, 0x3e	; 62
    484a:	2d 97       	sbiw	r28, 0x0d	; 13
    484c:	0f b6       	in	r0, 0x3f	; 63
    484e:	f8 94       	cli
    4850:	de bf       	out	0x3e, r29	; 62
    4852:	0f be       	out	0x3f, r0	; 63
    4854:	cd bf       	out	0x3d, r28	; 61
    4856:	6c 01       	movw	r12, r24
    4858:	5b 01       	movw	r10, r22
    485a:	4a 01       	movw	r8, r20
    485c:	8b df       	rcall	.-234    	; 0x4774 <_ZN14EthernetServer6acceptEv>
    485e:	82 e5       	ldi	r24, 0x52	; 82
    4860:	e8 2e       	mov	r14, r24
    4862:	8c e0       	ldi	r24, 0x0C	; 12
    4864:	f8 2e       	mov	r15, r24
    4866:	71 2c       	mov	r7, r1
    4868:	00 e0       	ldi	r16, 0x00	; 0
    486a:	10 e0       	ldi	r17, 0x00	; 0
    486c:	67 2d       	mov	r22, r7
    486e:	ce 01       	movw	r24, r28
    4870:	01 96       	adiw	r24, 0x01	; 1
    4872:	39 de       	rcall	.-910    	; 0x44e6 <_ZN14EthernetClientC1Eh>
    4874:	f7 01       	movw	r30, r14
    4876:	21 91       	ld	r18, Z+
    4878:	31 91       	ld	r19, Z+
    487a:	7f 01       	movw	r14, r30
    487c:	f6 01       	movw	r30, r12
    487e:	84 81       	ldd	r24, Z+4	; 0x04
    4880:	95 81       	ldd	r25, Z+5	; 0x05
    4882:	28 17       	cp	r18, r24
    4884:	39 07       	cpc	r19, r25
    4886:	29 f4       	brne	.+10     	; 0x4892 <_ZN14EthernetServer5writeEPKhj+0x66>
    4888:	ce 01       	movw	r24, r28
    488a:	01 96       	adiw	r24, 0x01	; 1
    488c:	3d de       	rcall	.-902    	; 0x4508 <_ZN14EthernetClient6statusEv>
    488e:	87 31       	cpi	r24, 0x17	; 23
    4890:	c9 f0       	breq	.+50     	; 0x48c4 <_ZN14EthernetServer5writeEPKhj+0x98>
    4892:	73 94       	inc	r7
    4894:	f8 e0       	ldi	r31, 0x08	; 8
    4896:	7f 12       	cpse	r7, r31
    4898:	e9 cf       	rjmp	.-46     	; 0x486c <_ZN14EthernetServer5writeEPKhj+0x40>
    489a:	c8 01       	movw	r24, r16
    489c:	2d 96       	adiw	r28, 0x0d	; 13
    489e:	0f b6       	in	r0, 0x3f	; 63
    48a0:	f8 94       	cli
    48a2:	de bf       	out	0x3e, r29	; 62
    48a4:	0f be       	out	0x3f, r0	; 63
    48a6:	cd bf       	out	0x3d, r28	; 61
    48a8:	df 91       	pop	r29
    48aa:	cf 91       	pop	r28
    48ac:	1f 91       	pop	r17
    48ae:	0f 91       	pop	r16
    48b0:	ff 90       	pop	r15
    48b2:	ef 90       	pop	r14
    48b4:	df 90       	pop	r13
    48b6:	cf 90       	pop	r12
    48b8:	bf 90       	pop	r11
    48ba:	af 90       	pop	r10
    48bc:	9f 90       	pop	r9
    48be:	8f 90       	pop	r8
    48c0:	7f 90       	pop	r7
    48c2:	08 95       	ret
    48c4:	a4 01       	movw	r20, r8
    48c6:	b5 01       	movw	r22, r10
    48c8:	ce 01       	movw	r24, r28
    48ca:	01 96       	adiw	r24, 0x01	; 1
    48cc:	92 dd       	rcall	.-1244   	; 0x43f2 <_ZN14EthernetClient5writeEPKhj>
    48ce:	08 0f       	add	r16, r24
    48d0:	19 1f       	adc	r17, r25
    48d2:	df cf       	rjmp	.-66     	; 0x4892 <_ZN14EthernetServer5writeEPKhj+0x66>

000048d4 <_GLOBAL__sub_I__ZN14EthernetServerC2Ej>:
      n += client.write(buffer, size);
    }
  }
  
  return n;
}
    48d4:	0f 93       	push	r16
    48d6:	00 e0       	ldi	r16, 0x00	; 0
    48d8:	20 e0       	ldi	r18, 0x00	; 0
    48da:	40 e0       	ldi	r20, 0x00	; 0
    48dc:	60 e0       	ldi	r22, 0x00	; 0
    48de:	8e e6       	ldi	r24, 0x6E	; 110
    48e0:	9c e0       	ldi	r25, 0x0C	; 12
    48e2:	0e 94 6f 3a 	call	0x74de	; 0x74de <_ZN9IPAddressC1Ehhhh>
    48e6:	0f 91       	pop	r16
    48e8:	08 95       	ret

000048ea <_ZN3UDP14beginMulticastE9IPAddressj>:

class UDP : public Stream {

public:
  virtual uint8_t begin(uint16_t) =0;  // initialize, start listening on specified port. Returns 1 if successful, 0 if there are no sockets available to use
  virtual uint8_t beginMulticast(IPAddress, uint16_t) { return 0; }  // initialize, start listening on specified multicast IP address and port. Returns 1 if successful, 0 on failure
    48ea:	80 e0       	ldi	r24, 0x00	; 0
    48ec:	08 95       	ret

000048ee <_ZN11EthernetUDP4readEPcj>:
  // Read up to len bytes from the current packet and place them into buffer
  // Returns the number of bytes read, or 0 if none are available
  virtual int read(unsigned char* buffer, size_t len);
  // Read up to len characters from the current packet and place them into buffer
  // Returns the number of characters read, or 0 if none are available
  virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
    48ee:	dc 01       	movw	r26, r24
    48f0:	ed 91       	ld	r30, X+
    48f2:	fc 91       	ld	r31, X
    48f4:	04 8c       	ldd	r0, Z+28	; 0x1c
    48f6:	f5 8d       	ldd	r31, Z+29	; 0x1d
    48f8:	e0 2d       	mov	r30, r0
    48fa:	09 94       	ijmp

000048fc <_ZN11EthernetUDP8remoteIPEv>:
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    48fc:	2a e5       	ldi	r18, 0x5A	; 90
    48fe:	39 e0       	ldi	r19, 0x09	; 9
    4900:	fc 01       	movw	r30, r24
    4902:	31 83       	std	Z+1, r19	; 0x01
    4904:	20 83       	st	Z, r18
    4906:	fb 01       	movw	r30, r22
    4908:	41 89       	ldd	r20, Z+17	; 0x11
    490a:	52 89       	ldd	r21, Z+18	; 0x12
    490c:	63 89       	ldd	r22, Z+19	; 0x13
    490e:	74 89       	ldd	r23, Z+20	; 0x14
    4910:	fc 01       	movw	r30, r24
    4912:	42 83       	std	Z+2, r20	; 0x02
    4914:	53 83       	std	Z+3, r21	; 0x03
    4916:	64 83       	std	Z+4, r22	; 0x04
    4918:	75 83       	std	Z+5, r23	; 0x05
  // Return the next byte from the current packet without moving on to the next byte
  virtual int peek();
  virtual void flush();	// Finish reading the current packet

  // Return the IP address of the host who sent the current incoming packet
  virtual IPAddress remoteIP() { return _remoteIP; };
    491a:	08 95       	ret

0000491c <_ZN11EthernetUDP10remotePortEv>:
  // Return the port of the host who sent the current incoming packet
  virtual uint16_t remotePort() { return _remotePort; };
    491c:	fc 01       	movw	r30, r24
    491e:	85 89       	ldd	r24, Z+21	; 0x15
    4920:	96 89       	ldd	r25, Z+22	; 0x16
    4922:	08 95       	ret

00004924 <_ZN11EthernetUDP9availableEv>:

/* return number of bytes available in the current packet,
   will return zero if parsePacket hasn't been called yet */
int EthernetUDP::available() {
  return _remaining;
}
    4924:	fc 01       	movw	r30, r24
    4926:	81 8d       	ldd	r24, Z+25	; 0x19
    4928:	92 8d       	ldd	r25, Z+26	; 0x1a
    492a:	08 95       	ret

0000492c <_ZN11EthernetUDP5writeEh>:
{
  return sendUDP(_sock);
}

size_t EthernetUDP::write(uint8_t byte)
{
    492c:	cf 93       	push	r28
    492e:	df 93       	push	r29
    4930:	1f 92       	push	r1
    4932:	cd b7       	in	r28, 0x3d	; 61
    4934:	de b7       	in	r29, 0x3e	; 62
    4936:	69 83       	std	Y+1, r22	; 0x01
  return write(&byte, 1);
    4938:	dc 01       	movw	r26, r24
    493a:	ed 91       	ld	r30, X+
    493c:	fc 91       	ld	r31, X
    493e:	02 80       	ldd	r0, Z+2	; 0x02
    4940:	f3 81       	ldd	r31, Z+3	; 0x03
    4942:	e0 2d       	mov	r30, r0
    4944:	41 e0       	ldi	r20, 0x01	; 1
    4946:	50 e0       	ldi	r21, 0x00	; 0
    4948:	be 01       	movw	r22, r28
    494a:	6f 5f       	subi	r22, 0xFF	; 255
    494c:	7f 4f       	sbci	r23, 0xFF	; 255
    494e:	09 95       	icall
}
    4950:	0f 90       	pop	r0
    4952:	df 91       	pop	r29
    4954:	cf 91       	pop	r28
    4956:	08 95       	ret

00004958 <_ZN11EthernetUDP5flushEv>:
  ::peek(_sock, &b);
  return b;
}

void EthernetUDP::flush()
{
    4958:	cf 93       	push	r28
    495a:	df 93       	push	r29
    495c:	ec 01       	movw	r28, r24
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5500 always behaves :)

  while (_remaining)
    495e:	89 8d       	ldd	r24, Y+25	; 0x19
    4960:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4962:	89 2b       	or	r24, r25
    4964:	41 f0       	breq	.+16     	; 0x4976 <_ZN11EthernetUDP5flushEv+0x1e>
  {
    read();
    4966:	e8 81       	ld	r30, Y
    4968:	f9 81       	ldd	r31, Y+1	; 0x01
    496a:	02 84       	ldd	r0, Z+10	; 0x0a
    496c:	f3 85       	ldd	r31, Z+11	; 0x0b
    496e:	e0 2d       	mov	r30, r0
    4970:	ce 01       	movw	r24, r28
    4972:	09 95       	icall
{
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5500 always behaves :)

  while (_remaining)
    4974:	f4 cf       	rjmp	.-24     	; 0x495e <_ZN11EthernetUDP5flushEv+0x6>
  {
    read();
  }
}
    4976:	df 91       	pop	r29
    4978:	cf 91       	pop	r28
    497a:	08 95       	ret

0000497c <_ZN11EthernetUDP4stopEv>:
  return _remaining;
}

/* Release any resources being used by this EthernetUDP instance */
void EthernetUDP::stop()
{
    497c:	cf 93       	push	r28
    497e:	df 93       	push	r29
    4980:	ec 01       	movw	r28, r24
  if (_sock == MAX_SOCK_NUM)
    4982:	8c 85       	ldd	r24, Y+12	; 0x0c
    4984:	88 30       	cpi	r24, 0x08	; 8
    4986:	59 f0       	breq	.+22     	; 0x499e <_ZN11EthernetUDP4stopEv+0x22>
    return;

  close(_sock);
    4988:	cd d1       	rcall	.+922    	; 0x4d24 <_Z5closeh>

  EthernetClass::_server_port[_sock] = 0;
    498a:	ec 85       	ldd	r30, Y+12	; 0x0c
    498c:	f0 e0       	ldi	r31, 0x00	; 0
    498e:	ee 0f       	add	r30, r30
    4990:	ff 1f       	adc	r31, r31
    4992:	ee 5a       	subi	r30, 0xAE	; 174
    4994:	f3 4f       	sbci	r31, 0xF3	; 243
    4996:	11 82       	std	Z+1, r1	; 0x01
    4998:	10 82       	st	Z, r1
  _sock = MAX_SOCK_NUM;
    499a:	88 e0       	ldi	r24, 0x08	; 8
    499c:	8c 87       	std	Y+12, r24	; 0x0c
}
    499e:	df 91       	pop	r29
    49a0:	cf 91       	pop	r28
    49a2:	08 95       	ret

000049a4 <_ZN11EthernetUDP11beginPacketE9IPAddressj>:
  }
}

int EthernetUDP::beginPacket(IPAddress ip, uint16_t port)
{
  _offset = 0;
    49a4:	fc 01       	movw	r30, r24
    49a6:	10 8e       	std	Z+24, r1	; 0x18
    49a8:	17 8a       	std	Z+23, r1	; 0x17

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    49aa:	6e 5f       	subi	r22, 0xFE	; 254
    49ac:	7f 4f       	sbci	r23, 0xFF	; 255
  return startUDP(_sock, rawIPAddress(ip), port);
    49ae:	84 85       	ldd	r24, Z+12	; 0x0c
    49b0:	02 c3       	rjmp	.+1540   	; 0x4fb6 <_Z8startUDPhPhj>

000049b2 <_ZN11EthernetUDP9endPacketEv>:
}

int EthernetUDP::endPacket()
{
  return sendUDP(_sock);
    49b2:	fc 01       	movw	r30, r24
    49b4:	84 85       	ldd	r24, Z+12	; 0x0c
    49b6:	22 c3       	rjmp	.+1604   	; 0x4ffc <_Z7sendUDPh>

000049b8 <_ZN11EthernetUDP5writeEPKhj>:
{
  return write(&byte, 1);
}

size_t EthernetUDP::write(const uint8_t *buffer, size_t size)
{
    49b8:	cf 93       	push	r28
    49ba:	df 93       	push	r29
    49bc:	ec 01       	movw	r28, r24
    49be:	9a 01       	movw	r18, r20
  uint16_t bytes_written = bufferData(_sock, _offset, buffer, size);
    49c0:	8f 89       	ldd	r24, Y+23	; 0x17
    49c2:	98 8d       	ldd	r25, Y+24	; 0x18
    49c4:	ab 01       	movw	r20, r22
    49c6:	bc 01       	movw	r22, r24
    49c8:	8c 85       	ldd	r24, Y+12	; 0x0c
    49ca:	ca d2       	rcall	.+1428   	; 0x4f60 <_Z10bufferDatahjPKhj>
  _offset += bytes_written;
    49cc:	2f 89       	ldd	r18, Y+23	; 0x17
    49ce:	38 8d       	ldd	r19, Y+24	; 0x18
    49d0:	28 0f       	add	r18, r24
    49d2:	39 1f       	adc	r19, r25
    49d4:	38 8f       	std	Y+24, r19	; 0x18
    49d6:	2f 8b       	std	Y+23, r18	; 0x17
  return bytes_written;
}
    49d8:	df 91       	pop	r29
    49da:	cf 91       	pop	r28
    49dc:	08 95       	ret

000049de <_ZN11EthernetUDP4readEv>:
  // There aren't any packets available
  return 0;
}

int EthernetUDP::read()
{
    49de:	0f 93       	push	r16
    49e0:	1f 93       	push	r17
    49e2:	cf 93       	push	r28
    49e4:	df 93       	push	r29
    49e6:	1f 92       	push	r1
    49e8:	cd b7       	in	r28, 0x3d	; 61
    49ea:	de b7       	in	r29, 0x3e	; 62
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
    49ec:	fc 01       	movw	r30, r24
    49ee:	21 8d       	ldd	r18, Z+25	; 0x19
    49f0:	32 8d       	ldd	r19, Z+26	; 0x1a
    49f2:	23 2b       	or	r18, r19
    49f4:	59 f0       	breq	.+22     	; 0x4a0c <_ZN11EthernetUDP4readEv+0x2e>
    49f6:	8c 01       	movw	r16, r24
    49f8:	41 e0       	ldi	r20, 0x01	; 1
    49fa:	50 e0       	ldi	r21, 0x00	; 0
    49fc:	be 01       	movw	r22, r28
    49fe:	6f 5f       	subi	r22, 0xFF	; 255
    4a00:	7f 4f       	sbci	r23, 0xFF	; 255
    4a02:	84 85       	ldd	r24, Z+12	; 0x0c
    4a04:	5e d2       	rcall	.+1212   	; 0x4ec2 <_Z4recvhPhi>
    4a06:	18 16       	cp	r1, r24
    4a08:	19 06       	cpc	r1, r25
    4a0a:	1c f0       	brlt	.+6      	; 0x4a12 <_ZN11EthernetUDP4readEv+0x34>
    _remaining--;
    return byte;
  }

  // If we get here, there's no data available
  return -1;
    4a0c:	8f ef       	ldi	r24, 0xFF	; 255
    4a0e:	9f ef       	ldi	r25, 0xFF	; 255
    4a10:	08 c0       	rjmp	.+16     	; 0x4a22 <_ZN11EthernetUDP4readEv+0x44>
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
  {
    // We read things without any problems
    _remaining--;
    4a12:	f8 01       	movw	r30, r16
    4a14:	81 8d       	ldd	r24, Z+25	; 0x19
    4a16:	92 8d       	ldd	r25, Z+26	; 0x1a
    4a18:	01 97       	sbiw	r24, 0x01	; 1
    4a1a:	92 8f       	std	Z+26, r25	; 0x1a
    4a1c:	81 8f       	std	Z+25, r24	; 0x19
    return byte;
    4a1e:	89 81       	ldd	r24, Y+1	; 0x01
    4a20:	90 e0       	ldi	r25, 0x00	; 0
  }

  // If we get here, there's no data available
  return -1;
}
    4a22:	0f 90       	pop	r0
    4a24:	df 91       	pop	r29
    4a26:	cf 91       	pop	r28
    4a28:	1f 91       	pop	r17
    4a2a:	0f 91       	pop	r16
    4a2c:	08 95       	ret

00004a2e <_ZN11EthernetUDP4readEPhj>:

int EthernetUDP::read(unsigned char* buffer, size_t len)
{
    4a2e:	cf 93       	push	r28
    4a30:	df 93       	push	r29

  if (_remaining > 0)
    4a32:	fc 01       	movw	r30, r24
    4a34:	21 8d       	ldd	r18, Z+25	; 0x19
    4a36:	32 8d       	ldd	r19, Z+26	; 0x1a
    4a38:	21 15       	cp	r18, r1
    4a3a:	31 05       	cpc	r19, r1
    4a3c:	19 f4       	brne	.+6      	; 0x4a44 <_ZN11EthernetUDP4readEPhj+0x16>
    }

  }

  // If we get here, there's no data available or recv failed
  return -1;
    4a3e:	8f ef       	ldi	r24, 0xFF	; 255
    4a40:	9f ef       	ldi	r25, 0xFF	; 255
    4a42:	10 c0       	rjmp	.+32     	; 0x4a64 <_ZN11EthernetUDP4readEPhj+0x36>
    4a44:	ec 01       	movw	r28, r24
  if (_remaining > 0)
  {

    int got;

    if (_remaining <= len)
    4a46:	42 17       	cp	r20, r18
    4a48:	53 07       	cpc	r21, r19
    4a4a:	08 f0       	brcs	.+2      	; 0x4a4e <_ZN11EthernetUDP4readEPhj+0x20>
    {
      // data should fit in the buffer
      got = recv(_sock, buffer, _remaining);
    4a4c:	a9 01       	movw	r20, r18
    }
    else
    {
      // too much data for the buffer, 
      // grab as much as will fit
      got = recv(_sock, buffer, len);
    4a4e:	8c 85       	ldd	r24, Y+12	; 0x0c
    4a50:	38 d2       	rcall	.+1136   	; 0x4ec2 <_Z4recvhPhi>
    }

    if (got > 0)
    4a52:	18 16       	cp	r1, r24
    4a54:	19 06       	cpc	r1, r25
    4a56:	9c f7       	brge	.-26     	; 0x4a3e <_ZN11EthernetUDP4readEPhj+0x10>
    {
      _remaining -= got;
    4a58:	29 8d       	ldd	r18, Y+25	; 0x19
    4a5a:	3a 8d       	ldd	r19, Y+26	; 0x1a
    4a5c:	28 1b       	sub	r18, r24
    4a5e:	39 0b       	sbc	r19, r25
    4a60:	3a 8f       	std	Y+26, r19	; 0x1a
    4a62:	29 8f       	std	Y+25, r18	; 0x19
  }

  // If we get here, there's no data available or recv failed
  return -1;

}
    4a64:	df 91       	pop	r29
    4a66:	cf 91       	pop	r28
    4a68:	08 95       	ret

00004a6a <_ZN11EthernetUDP4peekEv>:

int EthernetUDP::peek()
{
    4a6a:	cf 93       	push	r28
    4a6c:	df 93       	push	r29
    4a6e:	1f 92       	push	r1
    4a70:	cd b7       	in	r28, 0x3d	; 61
    4a72:	de b7       	in	r29, 0x3e	; 62
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
    4a74:	fc 01       	movw	r30, r24
    4a76:	21 8d       	ldd	r18, Z+25	; 0x19
    4a78:	32 8d       	ldd	r19, Z+26	; 0x1a
    4a7a:	23 2b       	or	r18, r19
    4a7c:	41 f0       	breq	.+16     	; 0x4a8e <_ZN11EthernetUDP4peekEv+0x24>
    return -1;
  ::peek(_sock, &b);
    4a7e:	be 01       	movw	r22, r28
    4a80:	6f 5f       	subi	r22, 0xFF	; 255
    4a82:	7f 4f       	sbci	r23, 0xFF	; 255
    4a84:	84 85       	ldd	r24, Z+12	; 0x0c
    4a86:	5e d2       	rcall	.+1212   	; 0x4f44 <_Z4peekhPh>
  return b;
    4a88:	89 81       	ldd	r24, Y+1	; 0x01
    4a8a:	90 e0       	ldi	r25, 0x00	; 0
    4a8c:	02 c0       	rjmp	.+4      	; 0x4a92 <_ZN11EthernetUDP4peekEv+0x28>
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
    return -1;
    4a8e:	8f ef       	ldi	r24, 0xFF	; 255
    4a90:	9f ef       	ldi	r25, 0xFF	; 255
  ::peek(_sock, &b);
  return b;
}
    4a92:	0f 90       	pop	r0
    4a94:	df 91       	pop	r29
    4a96:	cf 91       	pop	r28
    4a98:	08 95       	ret

00004a9a <_ZN11EthernetUDP5beginEj>:

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
    4a9a:	ef 92       	push	r14
    4a9c:	ff 92       	push	r15
    4a9e:	1f 93       	push	r17
    4aa0:	cf 93       	push	r28
    4aa2:	df 93       	push	r29
  if (_sock != MAX_SOCK_NUM)
    4aa4:	fc 01       	movw	r30, r24
    4aa6:	24 85       	ldd	r18, Z+12	; 0x0c
    4aa8:	28 30       	cpi	r18, 0x08	; 8
    4aaa:	11 f0       	breq	.+4      	; 0x4ab0 <_ZN11EthernetUDP5beginEj+0x16>
    return 0;
    4aac:	80 e0       	ldi	r24, 0x00	; 0
    4aae:	20 c0       	rjmp	.+64     	; 0x4af0 <_ZN11EthernetUDP5beginEj+0x56>
    4ab0:	7b 01       	movw	r14, r22
    4ab2:	ec 01       	movw	r28, r24
    4ab4:	10 e0       	ldi	r17, 0x00	; 0
    4ab6:	61 2f       	mov	r22, r17
    4ab8:	62 95       	swap	r22
    4aba:	66 0f       	add	r22, r22
    4abc:	60 7e       	andi	r22, 0xE0	; 224
    4abe:	68 5f       	subi	r22, 0xF8	; 248
    4ac0:	83 e0       	ldi	r24, 0x03	; 3
    4ac2:	90 e0       	ldi	r25, 0x00	; 0
    4ac4:	10 d3       	rcall	.+1568   	; 0x50e6 <_ZN10W5500Class4readEjh>

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
    4ac6:	81 11       	cpse	r24, r1
    4ac8:	02 c0       	rjmp	.+4      	; 0x4ace <_ZN11EthernetUDP5beginEj+0x34>
      _sock = i;
    4aca:	1c 87       	std	Y+12, r17	; 0x0c
    4acc:	05 c0       	rjmp	.+10     	; 0x4ad8 <_ZN11EthernetUDP5beginEj+0x3e>
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
    4ace:	88 31       	cpi	r24, 0x18	; 24
    4ad0:	e1 f3       	breq	.-8      	; 0x4aca <_ZN11EthernetUDP5beginEj+0x30>
    4ad2:	1f 5f       	subi	r17, 0xFF	; 255
/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    4ad4:	18 30       	cpi	r17, 0x08	; 8
    4ad6:	79 f7       	brne	.-34     	; 0x4ab6 <_ZN11EthernetUDP5beginEj+0x1c>
      _sock = i;
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
    4ad8:	8c 85       	ldd	r24, Y+12	; 0x0c
    4ada:	88 30       	cpi	r24, 0x08	; 8
    4adc:	39 f3       	breq	.-50     	; 0x4aac <_ZN11EthernetUDP5beginEj+0x12>
    return 0;

  _port = port;
    4ade:	fe 86       	std	Y+14, r15	; 0x0e
    4ae0:	ed 86       	std	Y+13, r14	; 0x0d
  _remaining = 0;
    4ae2:	1a 8e       	std	Y+26, r1	; 0x1a
    4ae4:	19 8e       	std	Y+25, r1	; 0x19
  socket(_sock, SnMR::UDP, _port, 0);
    4ae6:	20 e0       	ldi	r18, 0x00	; 0
    4ae8:	a7 01       	movw	r20, r14
    4aea:	62 e0       	ldi	r22, 0x02	; 2
    4aec:	26 d1       	rcall	.+588    	; 0x4d3a <_Z6sockethhjh>

  return 1;
    4aee:	81 e0       	ldi	r24, 0x01	; 1
}
    4af0:	df 91       	pop	r29
    4af2:	cf 91       	pop	r28
    4af4:	1f 91       	pop	r17
    4af6:	ff 90       	pop	r15
    4af8:	ef 90       	pop	r14
    4afa:	08 95       	ret

00004afc <_ZN11EthernetUDP11parsePacketEv>:
  _offset += bytes_written;
  return bytes_written;
}

int EthernetUDP::parsePacket()
{
    4afc:	0f 93       	push	r16
    4afe:	1f 93       	push	r17
    4b00:	cf 93       	push	r28
    4b02:	df 93       	push	r29
    4b04:	cd b7       	in	r28, 0x3d	; 61
    4b06:	de b7       	in	r29, 0x3e	; 62
    4b08:	28 97       	sbiw	r28, 0x08	; 8
    4b0a:	0f b6       	in	r0, 0x3f	; 63
    4b0c:	f8 94       	cli
    4b0e:	de bf       	out	0x3e, r29	; 62
    4b10:	0f be       	out	0x3f, r0	; 63
    4b12:	cd bf       	out	0x3d, r28	; 61
    4b14:	8c 01       	movw	r16, r24
  // discard any remaining bytes in the last packet
  flush();
    4b16:	dc 01       	movw	r26, r24
    4b18:	ed 91       	ld	r30, X+
    4b1a:	fc 91       	ld	r31, X
    4b1c:	06 80       	ldd	r0, Z+6	; 0x06
    4b1e:	f7 81       	ldd	r31, Z+7	; 0x07
    4b20:	e0 2d       	mov	r30, r0
    4b22:	09 95       	icall

  if (w5500.getRXReceivedSize(_sock) > 0)
    4b24:	f8 01       	movw	r30, r16
    4b26:	64 85       	ldd	r22, Z+12	; 0x0c
    4b28:	85 e8       	ldi	r24, 0x85	; 133
    4b2a:	9c e0       	ldi	r25, 0x0C	; 12
    4b2c:	6f d3       	rcall	.+1758   	; 0x520c <_ZN10W5500Class17getRXReceivedSizeEh>
    4b2e:	89 2b       	or	r24, r25
    4b30:	39 f1       	breq	.+78     	; 0x4b80 <_ZN11EthernetUDP11parsePacketEv+0x84>
  {
    //HACK - hand-parse the UDP packet using TCP recv method
    uint8_t tmpBuf[8];
    int ret =0; 
    //read 8 header bytes and get IP and port from it
    ret = recv(_sock,tmpBuf,8);
    4b32:	48 e0       	ldi	r20, 0x08	; 8
    4b34:	50 e0       	ldi	r21, 0x00	; 0
    4b36:	be 01       	movw	r22, r28
    4b38:	6f 5f       	subi	r22, 0xFF	; 255
    4b3a:	7f 4f       	sbci	r23, 0xFF	; 255
    4b3c:	d8 01       	movw	r26, r16
    4b3e:	1c 96       	adiw	r26, 0x0c	; 12
    4b40:	8c 91       	ld	r24, X
    4b42:	bf d1       	rcall	.+894    	; 0x4ec2 <_Z4recvhPhi>
    if (ret > 0)
    4b44:	18 16       	cp	r1, r24
    4b46:	19 06       	cpc	r1, r25
    4b48:	ec f4       	brge	.+58     	; 0x4b84 <_ZN11EthernetUDP11parsePacketEv+0x88>
    {
      _remoteIP = tmpBuf;
    4b4a:	be 01       	movw	r22, r28
    4b4c:	6f 5f       	subi	r22, 0xFF	; 255
    4b4e:	7f 4f       	sbci	r23, 0xFF	; 255
    4b50:	c8 01       	movw	r24, r16
    4b52:	0f 96       	adiw	r24, 0x0f	; 15
    4b54:	0e 94 87 3a 	call	0x750e	; 0x750e <_ZN9IPAddressaSEPKh>
      _remotePort = tmpBuf[4];
      _remotePort = (_remotePort << 8) + tmpBuf[5];
    4b58:	8d 81       	ldd	r24, Y+5	; 0x05
    4b5a:	90 e0       	ldi	r25, 0x00	; 0
    4b5c:	98 2f       	mov	r25, r24
    4b5e:	88 27       	eor	r24, r24
    4b60:	2e 81       	ldd	r18, Y+6	; 0x06
    4b62:	82 0f       	add	r24, r18
    4b64:	91 1d       	adc	r25, r1
    4b66:	f8 01       	movw	r30, r16
    4b68:	96 8b       	std	Z+22, r25	; 0x16
    4b6a:	85 8b       	std	Z+21, r24	; 0x15
      _remaining = tmpBuf[6];
      _remaining = (_remaining << 8) + tmpBuf[7];
    4b6c:	8f 81       	ldd	r24, Y+7	; 0x07
    4b6e:	90 e0       	ldi	r25, 0x00	; 0
    4b70:	98 2f       	mov	r25, r24
    4b72:	88 27       	eor	r24, r24
    4b74:	28 85       	ldd	r18, Y+8	; 0x08
    4b76:	82 0f       	add	r24, r18
    4b78:	91 1d       	adc	r25, r1
    4b7a:	92 8f       	std	Z+26, r25	; 0x1a
    4b7c:	81 8f       	std	Z+25, r24	; 0x19
    4b7e:	02 c0       	rjmp	.+4      	; 0x4b84 <_ZN11EthernetUDP11parsePacketEv+0x88>
      ret = _remaining;
    }
    return ret;
  }
  // There aren't any packets available
  return 0;
    4b80:	80 e0       	ldi	r24, 0x00	; 0
    4b82:	90 e0       	ldi	r25, 0x00	; 0
}
    4b84:	28 96       	adiw	r28, 0x08	; 8
    4b86:	0f b6       	in	r0, 0x3f	; 63
    4b88:	f8 94       	cli
    4b8a:	de bf       	out	0x3e, r29	; 62
    4b8c:	0f be       	out	0x3f, r0	; 63
    4b8e:	cd bf       	out	0x3d, r28	; 61
    4b90:	df 91       	pop	r29
    4b92:	cf 91       	pop	r28
    4b94:	1f 91       	pop	r17
    4b96:	0f 91       	pop	r16
    4b98:	08 95       	ret

00004b9a <_ZN11EthernetUDPC1Ev>:
#include "Ethernet2.h"
#include "Udp.h"
#include "Dns.h"

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}
    4b9a:	fc 01       	movw	r30, r24
    4b9c:	13 82       	std	Z+3, r1	; 0x03
    4b9e:	12 82       	std	Z+2, r1	; 0x02
    4ba0:	88 ee       	ldi	r24, 0xE8	; 232
    4ba2:	93 e0       	ldi	r25, 0x03	; 3
    4ba4:	a0 e0       	ldi	r26, 0x00	; 0
    4ba6:	b0 e0       	ldi	r27, 0x00	; 0
    4ba8:	84 83       	std	Z+4, r24	; 0x04
    4baa:	95 83       	std	Z+5, r25	; 0x05
    4bac:	a6 83       	std	Z+6, r26	; 0x06
    4bae:	b7 83       	std	Z+7, r27	; 0x07
    4bb0:	88 ef       	ldi	r24, 0xF8	; 248
    4bb2:	98 e0       	ldi	r25, 0x08	; 8
    4bb4:	91 83       	std	Z+1, r25	; 0x01
    4bb6:	80 83       	st	Z, r24
    4bb8:	88 e0       	ldi	r24, 0x08	; 8
    4bba:	84 87       	std	Z+12, r24	; 0x0c
    4bbc:	cf 01       	movw	r24, r30
    4bbe:	0f 96       	adiw	r24, 0x0f	; 15
    4bc0:	0c 94 65 3a 	jmp	0x74ca	; 0x74ca <_ZN9IPAddressC1Ev>

00004bc4 <_ZN11EthernetUDP11beginPacketEPKcj>:
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

int EthernetUDP::beginPacket(const char *host, uint16_t port)
{
    4bc4:	cf 92       	push	r12
    4bc6:	df 92       	push	r13
    4bc8:	ef 92       	push	r14
    4bca:	ff 92       	push	r15
    4bcc:	0f 93       	push	r16
    4bce:	1f 93       	push	r17
    4bd0:	cf 93       	push	r28
    4bd2:	df 93       	push	r29
    4bd4:	cd b7       	in	r28, 0x3d	; 61
    4bd6:	de b7       	in	r29, 0x3e	; 62
    4bd8:	af 97       	sbiw	r28, 0x2f	; 47
    4bda:	0f b6       	in	r0, 0x3f	; 63
    4bdc:	f8 94       	cli
    4bde:	de bf       	out	0x3e, r29	; 62
    4be0:	0f be       	out	0x3f, r0	; 63
    4be2:	cd bf       	out	0x3d, r28	; 61
    4be4:	8c 01       	movw	r16, r24
    4be6:	6b 01       	movw	r12, r22
    4be8:	7a 01       	movw	r14, r20
    4bea:	ce 01       	movw	r24, r28
    4bec:	01 96       	adiw	r24, 0x01	; 1
    4bee:	0e 94 65 3a 	call	0x74ca	; 0x74ca <_ZN9IPAddressC1Ev>
    4bf2:	ce 01       	movw	r24, r28
    4bf4:	09 96       	adiw	r24, 0x09	; 9
    4bf6:	d1 df       	rcall	.-94     	; 0x4b9a <_ZN11EthernetUDPC1Ev>
  // Look up the host first
  int ret = 0;
  DNSClient dns;
  IPAddress remote_addr;
    4bf8:	ce 01       	movw	r24, r28
    4bfa:	8a 96       	adiw	r24, 0x2a	; 42
    4bfc:	0e 94 65 3a 	call	0x74ca	; 0x74ca <_ZN9IPAddressC1Ev>

  dns.begin(Ethernet.dnsServerIP());
    4c00:	65 e4       	ldi	r22, 0x45	; 69
    4c02:	7c e0       	ldi	r23, 0x0C	; 12
    4c04:	ce 01       	movw	r24, r28
    4c06:	84 96       	adiw	r24, 0x24	; 36
    4c08:	3e db       	rcall	.-2436   	; 0x4286 <_ZN13EthernetClass11dnsServerIPEv>
    4c0a:	be 01       	movw	r22, r28
    4c0c:	6c 5d       	subi	r22, 0xDC	; 220
    4c0e:	7f 4f       	sbci	r23, 0xFF	; 255
    4c10:	ce 01       	movw	r24, r28
    4c12:	01 96       	adiw	r24, 0x01	; 1
    4c14:	03 d8       	rcall	.-4090   	; 0x3c1c <_ZN9DNSClient5beginERK9IPAddress>
  ret = dns.getHostByName(host, remote_addr);
    4c16:	ae 01       	movw	r20, r28
    4c18:	46 5d       	subi	r20, 0xD6	; 214
    4c1a:	5f 4f       	sbci	r21, 0xFF	; 255
    4c1c:	b6 01       	movw	r22, r12
    4c1e:	ce 01       	movw	r24, r28
    4c20:	01 96       	adiw	r24, 0x01	; 1
    4c22:	56 da       	rcall	.-2900   	; 0x40d0 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>
  if (ret == 1) {
    4c24:	81 30       	cpi	r24, 0x01	; 1
    4c26:	91 05       	cpc	r25, r1
    4c28:	c1 f4       	brne	.+48     	; 0x4c5a <_ZN11EthernetUDP11beginPacketEPKcj+0x96>
    return beginPacket(remote_addr, port);
    4c2a:	d8 01       	movw	r26, r16
    4c2c:	ed 91       	ld	r30, X+
    4c2e:	fc 91       	ld	r31, X
    4c30:	04 88       	ldd	r0, Z+20	; 0x14
    4c32:	f5 89       	ldd	r31, Z+21	; 0x15
    4c34:	e0 2d       	mov	r30, r0
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    4c36:	8a e5       	ldi	r24, 0x5A	; 90
    4c38:	99 e0       	ldi	r25, 0x09	; 9
    4c3a:	9d a3       	std	Y+37, r25	; 0x25
    4c3c:	8c a3       	std	Y+36, r24	; 0x24
    4c3e:	8c a5       	ldd	r24, Y+44	; 0x2c
    4c40:	9d a5       	ldd	r25, Y+45	; 0x2d
    4c42:	ae a5       	ldd	r26, Y+46	; 0x2e
    4c44:	bf a5       	ldd	r27, Y+47	; 0x2f
    4c46:	8e a3       	std	Y+38, r24	; 0x26
    4c48:	9f a3       	std	Y+39, r25	; 0x27
    4c4a:	a8 a7       	std	Y+40, r26	; 0x28
    4c4c:	b9 a7       	std	Y+41, r27	; 0x29
    4c4e:	a7 01       	movw	r20, r14
    4c50:	be 01       	movw	r22, r28
    4c52:	6c 5d       	subi	r22, 0xDC	; 220
    4c54:	7f 4f       	sbci	r23, 0xFF	; 255
    4c56:	c8 01       	movw	r24, r16
    4c58:	09 95       	icall
  } else {
    return ret;
  }
}
    4c5a:	af 96       	adiw	r28, 0x2f	; 47
    4c5c:	0f b6       	in	r0, 0x3f	; 63
    4c5e:	f8 94       	cli
    4c60:	de bf       	out	0x3e, r29	; 62
    4c62:	0f be       	out	0x3f, r0	; 63
    4c64:	cd bf       	out	0x3d, r28	; 61
    4c66:	df 91       	pop	r29
    4c68:	cf 91       	pop	r28
    4c6a:	1f 91       	pop	r17
    4c6c:	0f 91       	pop	r16
    4c6e:	ff 90       	pop	r15
    4c70:	ef 90       	pop	r14
    4c72:	df 90       	pop	r13
    4c74:	cf 90       	pop	r12
    4c76:	08 95       	ret

00004c78 <_GLOBAL__sub_I__ZN11EthernetUDPC2Ev>:

  while (_remaining)
  {
    read();
  }
}
    4c78:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    4c7a:	00 e0       	ldi	r16, 0x00	; 0
    4c7c:	20 e0       	ldi	r18, 0x00	; 0
    4c7e:	40 e0       	ldi	r20, 0x00	; 0
    4c80:	60 e0       	ldi	r22, 0x00	; 0
    4c82:	84 e7       	ldi	r24, 0x74	; 116
    4c84:	9c e0       	ldi	r25, 0x0C	; 12
    4c86:	0e 94 6f 3a 	call	0x74de	; 0x74de <_ZN9IPAddressC1Ehhhh>
    4c8a:	0f 91       	pop	r16
    4c8c:	08 95       	ret

00004c8e <_GLOBAL__sub_I__ZN7TwitterC2EPKc>:

int Twitter::wait(Print *debug)
{
	while (checkStatus(debug));
	return statusCode;
}
    4c8e:	0f 93       	push	r16
    4c90:	00 e0       	ldi	r16, 0x00	; 0
    4c92:	20 e0       	ldi	r18, 0x00	; 0
    4c94:	40 e0       	ldi	r20, 0x00	; 0
    4c96:	60 e0       	ldi	r22, 0x00	; 0
    4c98:	8a e7       	ldi	r24, 0x7A	; 122
    4c9a:	9c e0       	ldi	r25, 0x0C	; 12
    4c9c:	0e 94 6f 3a 	call	0x74de	; 0x74de <_ZN9IPAddressC1Ehhhh>
    4ca0:	0f 91       	pop	r16
    4ca2:	08 95       	ret

00004ca4 <_ZN10W5500Class11writeSnDIPREhPh>:
    }
  }

  w5500.writeSnIR(s, SnIR::SEND_OK);
  return ret;
}
    4ca4:	ab 01       	movw	r20, r22
    4ca6:	82 95       	swap	r24
    4ca8:	88 0f       	add	r24, r24
    4caa:	80 7e       	andi	r24, 0xE0	; 224
    4cac:	6c e0       	ldi	r22, 0x0C	; 12
    4cae:	68 0f       	add	r22, r24
    4cb0:	24 e0       	ldi	r18, 0x04	; 4
    4cb2:	30 e0       	ldi	r19, 0x00	; 0
    4cb4:	8c e0       	ldi	r24, 0x0C	; 12
    4cb6:	90 e0       	ldi	r25, 0x00	; 0
    4cb8:	e8 c1       	rjmp	.+976    	; 0x508a <_ZN10W5500Class5writeEjhPKhj>

00004cba <_ZN10W5500Class6readSnEhj>:
    4cba:	9b 01       	movw	r18, r22
    4cbc:	82 95       	swap	r24
    4cbe:	88 0f       	add	r24, r24
    4cc0:	80 7e       	andi	r24, 0xE0	; 224
    4cc2:	68 e0       	ldi	r22, 0x08	; 8
    4cc4:	68 0f       	add	r22, r24
    4cc6:	c9 01       	movw	r24, r18
    4cc8:	0e c2       	rjmp	.+1052   	; 0x50e6 <_ZN10W5500Class4readEjh>

00004cca <_ZN10W5500Class8readSnIREh>:
    4cca:	62 e0       	ldi	r22, 0x02	; 2
    4ccc:	70 e0       	ldi	r23, 0x00	; 0
    4cce:	f5 cf       	rjmp	.-22     	; 0x4cba <_ZN10W5500Class6readSnEhj>

00004cd0 <_ZN10W5500Class7writeSnEhjh>:
    4cd0:	9b 01       	movw	r18, r22
    4cd2:	82 95       	swap	r24
    4cd4:	88 0f       	add	r24, r24
    4cd6:	80 7e       	andi	r24, 0xE0	; 224
    4cd8:	6c e0       	ldi	r22, 0x0C	; 12
    4cda:	68 0f       	add	r22, r24
    4cdc:	c9 01       	movw	r24, r18
    4cde:	b5 c1       	rjmp	.+874    	; 0x504a <_ZN10W5500Class5writeEjhh>

00004ce0 <_ZN10W5500Class11writeSnPORTEhj>:
    4ce0:	cf 93       	push	r28
    4ce2:	df 93       	push	r29
    4ce4:	c8 2f       	mov	r28, r24
    4ce6:	d6 2f       	mov	r29, r22
    4ce8:	47 2f       	mov	r20, r23
    4cea:	64 e0       	ldi	r22, 0x04	; 4
    4cec:	70 e0       	ldi	r23, 0x00	; 0
    4cee:	f0 df       	rcall	.-32     	; 0x4cd0 <_ZN10W5500Class7writeSnEhjh>
    4cf0:	4d 2f       	mov	r20, r29
    4cf2:	65 e0       	ldi	r22, 0x05	; 5
    4cf4:	70 e0       	ldi	r23, 0x00	; 0
    4cf6:	8c 2f       	mov	r24, r28
    4cf8:	df 91       	pop	r29
    4cfa:	cf 91       	pop	r28
    4cfc:	e9 cf       	rjmp	.-46     	; 0x4cd0 <_ZN10W5500Class7writeSnEhjh>

00004cfe <_ZN10W5500Class9writeSnIREhh>:
    4cfe:	46 2f       	mov	r20, r22
    4d00:	62 e0       	ldi	r22, 0x02	; 2
    4d02:	70 e0       	ldi	r23, 0x00	; 0
    4d04:	e5 cf       	rjmp	.-54     	; 0x4cd0 <_ZN10W5500Class7writeSnEhjh>

00004d06 <_ZN10W5500Class12writeSnDPORTEhj>:
    4d06:	cf 93       	push	r28
    4d08:	df 93       	push	r29
    4d0a:	c8 2f       	mov	r28, r24
    4d0c:	d6 2f       	mov	r29, r22
    4d0e:	47 2f       	mov	r20, r23
    4d10:	60 e1       	ldi	r22, 0x10	; 16
    4d12:	70 e0       	ldi	r23, 0x00	; 0
    4d14:	dd df       	rcall	.-70     	; 0x4cd0 <_ZN10W5500Class7writeSnEhjh>
    4d16:	4d 2f       	mov	r20, r29
    4d18:	61 e1       	ldi	r22, 0x11	; 17
    4d1a:	70 e0       	ldi	r23, 0x00	; 0
    4d1c:	8c 2f       	mov	r24, r28
    4d1e:	df 91       	pop	r29
    4d20:	cf 91       	pop	r28
    4d22:	d6 cf       	rjmp	.-84     	; 0x4cd0 <_ZN10W5500Class7writeSnEhjh>

00004d24 <_Z5closeh>:
    4d24:	cf 93       	push	r28
    4d26:	c8 2f       	mov	r28, r24
    4d28:	40 e1       	ldi	r20, 0x10	; 16
    4d2a:	68 2f       	mov	r22, r24
    4d2c:	85 e8       	ldi	r24, 0x85	; 133
    4d2e:	9c e0       	ldi	r25, 0x0C	; 12
    4d30:	5f d3       	rcall	.+1726   	; 0x53f0 <_ZN10W5500Class9execCmdSnEh7SockCMD>
    4d32:	6f ef       	ldi	r22, 0xFF	; 255
    4d34:	8c 2f       	mov	r24, r28
    4d36:	cf 91       	pop	r28
    4d38:	e2 cf       	rjmp	.-60     	; 0x4cfe <_ZN10W5500Class9writeSnIREhh>

00004d3a <_Z6sockethhjh>:
    4d3a:	ff 92       	push	r15
    4d3c:	0f 93       	push	r16
    4d3e:	1f 93       	push	r17
    4d40:	cf 93       	push	r28
    4d42:	df 93       	push	r29
    4d44:	9f ef       	ldi	r25, 0xFF	; 255
    4d46:	96 0f       	add	r25, r22
    4d48:	95 30       	cpi	r25, 0x05	; 5
    4d4a:	18 f5       	brcc	.+70     	; 0x4d92 <_Z6sockethhjh+0x58>
    4d4c:	d2 2f       	mov	r29, r18
    4d4e:	8a 01       	movw	r16, r20
    4d50:	f6 2e       	mov	r15, r22
    4d52:	c8 2f       	mov	r28, r24
    4d54:	e7 df       	rcall	.-50     	; 0x4d24 <_Z5closeh>
    4d56:	4f 2d       	mov	r20, r15
    4d58:	4d 2b       	or	r20, r29
    4d5a:	60 e0       	ldi	r22, 0x00	; 0
    4d5c:	70 e0       	ldi	r23, 0x00	; 0
    4d5e:	8c 2f       	mov	r24, r28
    4d60:	b7 df       	rcall	.-146    	; 0x4cd0 <_ZN10W5500Class7writeSnEhjh>
    4d62:	01 15       	cp	r16, r1
    4d64:	11 05       	cpc	r17, r1
    4d66:	11 f0       	breq	.+4      	; 0x4d6c <_Z6sockethhjh+0x32>
    4d68:	b8 01       	movw	r22, r16
    4d6a:	0a c0       	rjmp	.+20     	; 0x4d80 <_Z6sockethhjh+0x46>
    4d6c:	60 91 80 0c 	lds	r22, 0x0C80	; 0x800c80 <_ZL10local_port>
    4d70:	70 91 81 0c 	lds	r23, 0x0C81	; 0x800c81 <_ZL10local_port+0x1>
    4d74:	6f 5f       	subi	r22, 0xFF	; 255
    4d76:	7f 4f       	sbci	r23, 0xFF	; 255
    4d78:	70 93 81 0c 	sts	0x0C81, r23	; 0x800c81 <_ZL10local_port+0x1>
    4d7c:	60 93 80 0c 	sts	0x0C80, r22	; 0x800c80 <_ZL10local_port>
    4d80:	8c 2f       	mov	r24, r28
    4d82:	ae df       	rcall	.-164    	; 0x4ce0 <_ZN10W5500Class11writeSnPORTEhj>
    4d84:	41 e0       	ldi	r20, 0x01	; 1
    4d86:	6c 2f       	mov	r22, r28
    4d88:	85 e8       	ldi	r24, 0x85	; 133
    4d8a:	9c e0       	ldi	r25, 0x0C	; 12
    4d8c:	31 d3       	rcall	.+1634   	; 0x53f0 <_ZN10W5500Class9execCmdSnEh7SockCMD>
    4d8e:	81 e0       	ldi	r24, 0x01	; 1
    4d90:	01 c0       	rjmp	.+2      	; 0x4d94 <_Z6sockethhjh+0x5a>
    4d92:	80 e0       	ldi	r24, 0x00	; 0
    4d94:	df 91       	pop	r29
    4d96:	cf 91       	pop	r28
    4d98:	1f 91       	pop	r17
    4d9a:	0f 91       	pop	r16
    4d9c:	ff 90       	pop	r15
    4d9e:	08 95       	ret

00004da0 <_Z6listenh>:
    4da0:	cf 93       	push	r28
    4da2:	c8 2f       	mov	r28, r24
    4da4:	63 e0       	ldi	r22, 0x03	; 3
    4da6:	70 e0       	ldi	r23, 0x00	; 0
    4da8:	88 df       	rcall	.-240    	; 0x4cba <_ZN10W5500Class6readSnEhj>
    4daa:	83 31       	cpi	r24, 0x13	; 19
    4dac:	39 f4       	brne	.+14     	; 0x4dbc <_Z6listenh+0x1c>
    4dae:	42 e0       	ldi	r20, 0x02	; 2
    4db0:	6c 2f       	mov	r22, r28
    4db2:	85 e8       	ldi	r24, 0x85	; 133
    4db4:	9c e0       	ldi	r25, 0x0C	; 12
    4db6:	1c d3       	rcall	.+1592   	; 0x53f0 <_ZN10W5500Class9execCmdSnEh7SockCMD>
    4db8:	81 e0       	ldi	r24, 0x01	; 1
    4dba:	01 c0       	rjmp	.+2      	; 0x4dbe <_Z6listenh+0x1e>
    4dbc:	80 e0       	ldi	r24, 0x00	; 0
    4dbe:	cf 91       	pop	r28
    4dc0:	08 95       	ret

00004dc2 <_Z7connecthPhj>:
    4dc2:	0f 93       	push	r16
    4dc4:	1f 93       	push	r17
    4dc6:	cf 93       	push	r28
    4dc8:	fb 01       	movw	r30, r22
    4dca:	90 81       	ld	r25, Z
    4dcc:	9f 3f       	cpi	r25, 0xFF	; 255
    4dce:	51 f4       	brne	.+20     	; 0x4de4 <_Z7connecthPhj+0x22>
    4dd0:	91 81       	ldd	r25, Z+1	; 0x01
    4dd2:	9f 3f       	cpi	r25, 0xFF	; 255
    4dd4:	91 f4       	brne	.+36     	; 0x4dfa <_Z7connecthPhj+0x38>
    4dd6:	92 81       	ldd	r25, Z+2	; 0x02
    4dd8:	9f 3f       	cpi	r25, 0xFF	; 255
    4dda:	79 f4       	brne	.+30     	; 0x4dfa <_Z7connecthPhj+0x38>
    4ddc:	93 81       	ldd	r25, Z+3	; 0x03
    4dde:	9f 3f       	cpi	r25, 0xFF	; 255
    4de0:	61 f4       	brne	.+24     	; 0x4dfa <_Z7connecthPhj+0x38>
    4de2:	1c c0       	rjmp	.+56     	; 0x4e1c <_Z7connecthPhj+0x5a>
    4de4:	91 11       	cpse	r25, r1
    4de6:	09 c0       	rjmp	.+18     	; 0x4dfa <_Z7connecthPhj+0x38>
    4de8:	91 81       	ldd	r25, Z+1	; 0x01
    4dea:	91 11       	cpse	r25, r1
    4dec:	06 c0       	rjmp	.+12     	; 0x4dfa <_Z7connecthPhj+0x38>
    4dee:	92 81       	ldd	r25, Z+2	; 0x02
    4df0:	91 11       	cpse	r25, r1
    4df2:	03 c0       	rjmp	.+6      	; 0x4dfa <_Z7connecthPhj+0x38>
    4df4:	93 81       	ldd	r25, Z+3	; 0x03
    4df6:	99 23       	and	r25, r25
    4df8:	91 f0       	breq	.+36     	; 0x4e1e <_Z7connecthPhj+0x5c>
    4dfa:	41 15       	cp	r20, r1
    4dfc:	51 05       	cpc	r21, r1
    4dfe:	71 f0       	breq	.+28     	; 0x4e1c <_Z7connecthPhj+0x5a>
    4e00:	8a 01       	movw	r16, r20
    4e02:	bf 01       	movw	r22, r30
    4e04:	c8 2f       	mov	r28, r24
    4e06:	4e df       	rcall	.-356    	; 0x4ca4 <_ZN10W5500Class11writeSnDIPREhPh>
    4e08:	b8 01       	movw	r22, r16
    4e0a:	8c 2f       	mov	r24, r28
    4e0c:	7c df       	rcall	.-264    	; 0x4d06 <_ZN10W5500Class12writeSnDPORTEhj>
    4e0e:	44 e0       	ldi	r20, 0x04	; 4
    4e10:	6c 2f       	mov	r22, r28
    4e12:	85 e8       	ldi	r24, 0x85	; 133
    4e14:	9c e0       	ldi	r25, 0x0C	; 12
    4e16:	ec d2       	rcall	.+1496   	; 0x53f0 <_ZN10W5500Class9execCmdSnEh7SockCMD>
    4e18:	91 e0       	ldi	r25, 0x01	; 1
    4e1a:	01 c0       	rjmp	.+2      	; 0x4e1e <_Z7connecthPhj+0x5c>
    4e1c:	90 e0       	ldi	r25, 0x00	; 0
    4e1e:	89 2f       	mov	r24, r25
    4e20:	cf 91       	pop	r28
    4e22:	1f 91       	pop	r17
    4e24:	0f 91       	pop	r16
    4e26:	08 95       	ret

00004e28 <_Z10disconnecth>:
    4e28:	48 e0       	ldi	r20, 0x08	; 8
    4e2a:	68 2f       	mov	r22, r24
    4e2c:	85 e8       	ldi	r24, 0x85	; 133
    4e2e:	9c e0       	ldi	r25, 0x0C	; 12
    4e30:	df c2       	rjmp	.+1470   	; 0x53f0 <_ZN10W5500Class9execCmdSnEh7SockCMD>

00004e32 <_Z4sendhPKhj>:
    4e32:	cf 92       	push	r12
    4e34:	df 92       	push	r13
    4e36:	ef 92       	push	r14
    4e38:	ff 92       	push	r15
    4e3a:	0f 93       	push	r16
    4e3c:	1f 93       	push	r17
    4e3e:	cf 93       	push	r28
    4e40:	c8 2f       	mov	r28, r24
    4e42:	7b 01       	movw	r14, r22
    4e44:	8a 01       	movw	r16, r20
    4e46:	41 30       	cpi	r20, 0x01	; 1
    4e48:	58 40       	sbci	r21, 0x08	; 8
    4e4a:	10 f0       	brcs	.+4      	; 0x4e50 <_Z4sendhPKhj+0x1e>
    4e4c:	00 e0       	ldi	r16, 0x00	; 0
    4e4e:	18 e0       	ldi	r17, 0x08	; 8
    4e50:	6c 2f       	mov	r22, r28
    4e52:	85 e8       	ldi	r24, 0x85	; 133
    4e54:	9c e0       	ldi	r25, 0x0C	; 12
    4e56:	a9 d1       	rcall	.+850    	; 0x51aa <_ZN10W5500Class13getTXFreeSizeEh>
    4e58:	6c 01       	movw	r12, r24
    4e5a:	63 e0       	ldi	r22, 0x03	; 3
    4e5c:	70 e0       	ldi	r23, 0x00	; 0
    4e5e:	8c 2f       	mov	r24, r28
    4e60:	2c df       	rcall	.-424    	; 0x4cba <_ZN10W5500Class6readSnEhj>
    4e62:	87 31       	cpi	r24, 0x17	; 23
    4e64:	11 f0       	breq	.+4      	; 0x4e6a <_Z4sendhPKhj+0x38>
    4e66:	8c 31       	cpi	r24, 0x1C	; 28
    4e68:	21 f4       	brne	.+8      	; 0x4e72 <_Z4sendhPKhj+0x40>
    4e6a:	c0 16       	cp	r12, r16
    4e6c:	d1 06       	cpc	r13, r17
    4e6e:	80 f3       	brcs	.-32     	; 0x4e50 <_Z4sendhPKhj+0x1e>
    4e70:	02 c0       	rjmp	.+4      	; 0x4e76 <_Z4sendhPKhj+0x44>
    4e72:	00 e0       	ldi	r16, 0x00	; 0
    4e74:	10 e0       	ldi	r17, 0x00	; 0
    4e76:	98 01       	movw	r18, r16
    4e78:	a7 01       	movw	r20, r14
    4e7a:	6c 2f       	mov	r22, r28
    4e7c:	85 e8       	ldi	r24, 0x85	; 133
    4e7e:	9c e0       	ldi	r25, 0x0C	; 12
    4e80:	19 d2       	rcall	.+1074   	; 0x52b4 <_ZN10W5500Class20send_data_processingEhPKhj>
    4e82:	40 e2       	ldi	r20, 0x20	; 32
    4e84:	6c 2f       	mov	r22, r28
    4e86:	85 e8       	ldi	r24, 0x85	; 133
    4e88:	9c e0       	ldi	r25, 0x0C	; 12
    4e8a:	b2 d2       	rcall	.+1380   	; 0x53f0 <_ZN10W5500Class9execCmdSnEh7SockCMD>
    4e8c:	8c 2f       	mov	r24, r28
    4e8e:	1d df       	rcall	.-454    	; 0x4cca <_ZN10W5500Class8readSnIREh>
    4e90:	84 fd       	sbrc	r24, 4
    4e92:	0b c0       	rjmp	.+22     	; 0x4eaa <_Z4sendhPKhj+0x78>
    4e94:	63 e0       	ldi	r22, 0x03	; 3
    4e96:	70 e0       	ldi	r23, 0x00	; 0
    4e98:	8c 2f       	mov	r24, r28
    4e9a:	0f df       	rcall	.-482    	; 0x4cba <_ZN10W5500Class6readSnEhj>
    4e9c:	81 11       	cpse	r24, r1
    4e9e:	f6 cf       	rjmp	.-20     	; 0x4e8c <_Z4sendhPKhj+0x5a>
    4ea0:	8c 2f       	mov	r24, r28
    4ea2:	40 df       	rcall	.-384    	; 0x4d24 <_Z5closeh>
    4ea4:	80 e0       	ldi	r24, 0x00	; 0
    4ea6:	90 e0       	ldi	r25, 0x00	; 0
    4ea8:	04 c0       	rjmp	.+8      	; 0x4eb2 <_Z4sendhPKhj+0x80>
    4eaa:	60 e1       	ldi	r22, 0x10	; 16
    4eac:	8c 2f       	mov	r24, r28
    4eae:	27 df       	rcall	.-434    	; 0x4cfe <_ZN10W5500Class9writeSnIREhh>
    4eb0:	c8 01       	movw	r24, r16
    4eb2:	cf 91       	pop	r28
    4eb4:	1f 91       	pop	r17
    4eb6:	0f 91       	pop	r16
    4eb8:	ff 90       	pop	r15
    4eba:	ef 90       	pop	r14
    4ebc:	df 90       	pop	r13
    4ebe:	cf 90       	pop	r12
    4ec0:	08 95       	ret

00004ec2 <_Z4recvhPhi>:
    4ec2:	cf 92       	push	r12
    4ec4:	df 92       	push	r13
    4ec6:	ef 92       	push	r14
    4ec8:	ff 92       	push	r15
    4eca:	0f 93       	push	r16
    4ecc:	1f 93       	push	r17
    4ece:	cf 93       	push	r28
    4ed0:	df 93       	push	r29
    4ed2:	18 2f       	mov	r17, r24
    4ed4:	6b 01       	movw	r12, r22
    4ed6:	7a 01       	movw	r14, r20
    4ed8:	68 2f       	mov	r22, r24
    4eda:	85 e8       	ldi	r24, 0x85	; 133
    4edc:	9c e0       	ldi	r25, 0x0C	; 12
    4ede:	96 d1       	rcall	.+812    	; 0x520c <_ZN10W5500Class17getRXReceivedSizeEh>
    4ee0:	ec 01       	movw	r28, r24
    4ee2:	00 97       	sbiw	r24, 0x00	; 0
    4ee4:	91 f4       	brne	.+36     	; 0x4f0a <_Z4recvhPhi+0x48>
    4ee6:	63 e0       	ldi	r22, 0x03	; 3
    4ee8:	70 e0       	ldi	r23, 0x00	; 0
    4eea:	81 2f       	mov	r24, r17
    4eec:	e6 de       	rcall	.-564    	; 0x4cba <_ZN10W5500Class6readSnEhj>
    4eee:	84 31       	cpi	r24, 0x14	; 20
    4ef0:	f9 f0       	breq	.+62     	; 0x4f30 <_Z4recvhPhi+0x6e>
    4ef2:	88 23       	and	r24, r24
    4ef4:	e9 f0       	breq	.+58     	; 0x4f30 <_Z4recvhPhi+0x6e>
    4ef6:	c1 e0       	ldi	r28, 0x01	; 1
    4ef8:	d0 e0       	ldi	r29, 0x00	; 0
    4efa:	8c 31       	cpi	r24, 0x1C	; 28
    4efc:	11 f4       	brne	.+4      	; 0x4f02 <_Z4recvhPhi+0x40>
    4efe:	c0 e0       	ldi	r28, 0x00	; 0
    4f00:	d0 e0       	ldi	r29, 0x00	; 0
    4f02:	d1 95       	neg	r29
    4f04:	c1 95       	neg	r28
    4f06:	d1 09       	sbc	r29, r1
    4f08:	13 c0       	rjmp	.+38     	; 0x4f30 <_Z4recvhPhi+0x6e>
    4f0a:	e8 16       	cp	r14, r24
    4f0c:	f9 06       	cpc	r15, r25
    4f0e:	0c f4       	brge	.+2      	; 0x4f12 <_Z4recvhPhi+0x50>
    4f10:	e7 01       	movw	r28, r14
    4f12:	1c 16       	cp	r1, r28
    4f14:	1d 06       	cpc	r1, r29
    4f16:	64 f4       	brge	.+24     	; 0x4f30 <_Z4recvhPhi+0x6e>
    4f18:	00 e0       	ldi	r16, 0x00	; 0
    4f1a:	9e 01       	movw	r18, r28
    4f1c:	a6 01       	movw	r20, r12
    4f1e:	61 2f       	mov	r22, r17
    4f20:	85 e8       	ldi	r24, 0x85	; 133
    4f22:	9c e0       	ldi	r25, 0x0C	; 12
    4f24:	18 d2       	rcall	.+1072   	; 0x5356 <_ZN10W5500Class20recv_data_processingEhPhjh>
    4f26:	40 e4       	ldi	r20, 0x40	; 64
    4f28:	61 2f       	mov	r22, r17
    4f2a:	85 e8       	ldi	r24, 0x85	; 133
    4f2c:	9c e0       	ldi	r25, 0x0C	; 12
    4f2e:	60 d2       	rcall	.+1216   	; 0x53f0 <_ZN10W5500Class9execCmdSnEh7SockCMD>
    4f30:	ce 01       	movw	r24, r28
    4f32:	df 91       	pop	r29
    4f34:	cf 91       	pop	r28
    4f36:	1f 91       	pop	r17
    4f38:	0f 91       	pop	r16
    4f3a:	ff 90       	pop	r15
    4f3c:	ef 90       	pop	r14
    4f3e:	df 90       	pop	r13
    4f40:	cf 90       	pop	r12
    4f42:	08 95       	ret

00004f44 <_Z4peekhPh>:
    4f44:	0f 93       	push	r16
    4f46:	ab 01       	movw	r20, r22
    4f48:	01 e0       	ldi	r16, 0x01	; 1
    4f4a:	21 e0       	ldi	r18, 0x01	; 1
    4f4c:	30 e0       	ldi	r19, 0x00	; 0
    4f4e:	68 2f       	mov	r22, r24
    4f50:	85 e8       	ldi	r24, 0x85	; 133
    4f52:	9c e0       	ldi	r25, 0x0C	; 12
    4f54:	00 d2       	rcall	.+1024   	; 0x5356 <_ZN10W5500Class20recv_data_processingEhPhjh>
    4f56:	81 e0       	ldi	r24, 0x01	; 1
    4f58:	90 e0       	ldi	r25, 0x00	; 0
    4f5a:	0f 91       	pop	r16
    4f5c:	08 95       	ret

00004f5e <_Z5flushh>:
    4f5e:	08 95       	ret

00004f60 <_Z10bufferDatahjPKhj>:

uint16_t bufferData(SOCKET s, uint16_t offset, const uint8_t* buf, uint16_t len)
{
    4f60:	af 92       	push	r10
    4f62:	bf 92       	push	r11
    4f64:	cf 92       	push	r12
    4f66:	df 92       	push	r13
    4f68:	ff 92       	push	r15
    4f6a:	0f 93       	push	r16
    4f6c:	1f 93       	push	r17
    4f6e:	cf 93       	push	r28
    4f70:	df 93       	push	r29
    4f72:	f8 2e       	mov	r15, r24
    4f74:	6b 01       	movw	r12, r22
    4f76:	5a 01       	movw	r10, r20
    4f78:	e9 01       	movw	r28, r18
  uint16_t ret =0;
  if (len > w5500.getTXFreeSize(s))
    4f7a:	68 2f       	mov	r22, r24
    4f7c:	85 e8       	ldi	r24, 0x85	; 133
    4f7e:	9c e0       	ldi	r25, 0x0C	; 12
    4f80:	14 d1       	rcall	.+552    	; 0x51aa <_ZN10W5500Class13getTXFreeSizeEh>
    4f82:	8c 17       	cp	r24, r28
    4f84:	9d 07       	cpc	r25, r29
    4f86:	28 f4       	brcc	.+10     	; 0x4f92 <_Z10bufferDatahjPKhj+0x32>
  {
    ret = w5500.getTXFreeSize(s); // check size not to exceed MAX size.
    4f88:	6f 2d       	mov	r22, r15
    4f8a:	85 e8       	ldi	r24, 0x85	; 133
    4f8c:	9c e0       	ldi	r25, 0x0C	; 12
    4f8e:	0d d1       	rcall	.+538    	; 0x51aa <_ZN10W5500Class13getTXFreeSizeEh>
    4f90:	ec 01       	movw	r28, r24
  }
  else
  {
    ret = len;
  }
  w5500.send_data_processing_offset(s, offset, buf, ret);
    4f92:	8e 01       	movw	r16, r28
    4f94:	95 01       	movw	r18, r10
    4f96:	a6 01       	movw	r20, r12
    4f98:	6f 2d       	mov	r22, r15
    4f9a:	85 e8       	ldi	r24, 0x85	; 133
    4f9c:	9c e0       	ldi	r25, 0x0C	; 12
    4f9e:	50 d1       	rcall	.+672    	; 0x5240 <_ZN10W5500Class27send_data_processing_offsetEhjPKhj>
  return ret;
}
    4fa0:	ce 01       	movw	r24, r28
    4fa2:	df 91       	pop	r29
    4fa4:	cf 91       	pop	r28
    4fa6:	1f 91       	pop	r17
    4fa8:	0f 91       	pop	r16
    4faa:	ff 90       	pop	r15
    4fac:	df 90       	pop	r13
    4fae:	cf 90       	pop	r12
    4fb0:	bf 90       	pop	r11
    4fb2:	af 90       	pop	r10
    4fb4:	08 95       	ret

00004fb6 <_Z8startUDPhPhj>:

int startUDP(SOCKET s, uint8_t* addr, uint16_t port)
{
    4fb6:	0f 93       	push	r16
    4fb8:	1f 93       	push	r17
    4fba:	cf 93       	push	r28
    4fbc:	fb 01       	movw	r30, r22
  if
    4fbe:	90 81       	ld	r25, Z
    4fc0:	91 11       	cpse	r25, r1
    4fc2:	09 c0       	rjmp	.+18     	; 0x4fd6 <_Z8startUDPhPhj+0x20>
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
    4fc4:	91 81       	ldd	r25, Z+1	; 0x01
    4fc6:	91 11       	cpse	r25, r1
    4fc8:	06 c0       	rjmp	.+12     	; 0x4fd6 <_Z8startUDPhPhj+0x20>
    4fca:	92 81       	ldd	r25, Z+2	; 0x02
    4fcc:	91 11       	cpse	r25, r1
    4fce:	03 c0       	rjmp	.+6      	; 0x4fd6 <_Z8startUDPhPhj+0x20>
    4fd0:	93 81       	ldd	r25, Z+3	; 0x03
    4fd2:	99 23       	and	r25, r25
    4fd4:	69 f0       	breq	.+26     	; 0x4ff0 <_Z8startUDPhPhj+0x3a>
    4fd6:	41 15       	cp	r20, r1
    4fd8:	51 05       	cpc	r21, r1
    4fda:	51 f0       	breq	.+20     	; 0x4ff0 <_Z8startUDPhPhj+0x3a>
    4fdc:	8a 01       	movw	r16, r20
    4fde:	bf 01       	movw	r22, r30
    4fe0:	c8 2f       	mov	r28, r24
  {
    return 0;
  }
  else
  {
    w5500.writeSnDIPR(s, addr);
    4fe2:	60 de       	rcall	.-832    	; 0x4ca4 <_ZN10W5500Class11writeSnDIPREhPh>
    w5500.writeSnDPORT(s, port);
    4fe4:	b8 01       	movw	r22, r16
    4fe6:	8c 2f       	mov	r24, r28
    4fe8:	8e de       	rcall	.-740    	; 0x4d06 <_ZN10W5500Class12writeSnDPORTEhj>
    return 1;
    4fea:	81 e0       	ldi	r24, 0x01	; 1
    4fec:	90 e0       	ldi	r25, 0x00	; 0
    4fee:	02 c0       	rjmp	.+4      	; 0x4ff4 <_Z8startUDPhPhj+0x3e>
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
     ((port == 0x00))
    ) 
  {
    return 0;
    4ff0:	80 e0       	ldi	r24, 0x00	; 0
    4ff2:	90 e0       	ldi	r25, 0x00	; 0
  {
    w5500.writeSnDIPR(s, addr);
    w5500.writeSnDPORT(s, port);
    return 1;
  }
}
    4ff4:	cf 91       	pop	r28
    4ff6:	1f 91       	pop	r17
    4ff8:	0f 91       	pop	r16
    4ffa:	08 95       	ret

00004ffc <_Z7sendUDPh>:

int sendUDP(SOCKET s)
{
    4ffc:	cf 93       	push	r28
    4ffe:	c8 2f       	mov	r28, r24
  w5500.execCmdSn(s, Sock_SEND);
    5000:	40 e2       	ldi	r20, 0x20	; 32
    5002:	68 2f       	mov	r22, r24
    5004:	85 e8       	ldi	r24, 0x85	; 133
    5006:	9c e0       	ldi	r25, 0x0C	; 12
    5008:	f3 d1       	rcall	.+998    	; 0x53f0 <_ZN10W5500Class9execCmdSnEh7SockCMD>
		
  /* +2008.01 bj */
  while ( (w5500.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
    500a:	8c 2f       	mov	r24, r28
    500c:	5e de       	rcall	.-836    	; 0x4cca <_ZN10W5500Class8readSnIREh>
    500e:	84 fd       	sbrc	r24, 4
    5010:	0a c0       	rjmp	.+20     	; 0x5026 <_Z7sendUDPh+0x2a>
  {
    if (w5500.readSnIR(s) & SnIR::TIMEOUT)
    5012:	8c 2f       	mov	r24, r28
    5014:	5a de       	rcall	.-844    	; 0x4cca <_ZN10W5500Class8readSnIREh>
    5016:	83 ff       	sbrs	r24, 3
    5018:	f8 cf       	rjmp	.-16     	; 0x500a <_Z7sendUDPh+0xe>
    {
      /* +2008.01 [bj]: clear interrupt */
      w5500.writeSnIR(s, (SnIR::SEND_OK|SnIR::TIMEOUT));
    501a:	68 e1       	ldi	r22, 0x18	; 24
    501c:	8c 2f       	mov	r24, r28
    501e:	6f de       	rcall	.-802    	; 0x4cfe <_ZN10W5500Class9writeSnIREhh>
    5020:	80 e0       	ldi	r24, 0x00	; 0
      return 0;
    5022:	90 e0       	ldi	r25, 0x00	; 0
    5024:	05 c0       	rjmp	.+10     	; 0x5030 <_Z7sendUDPh+0x34>
    }
  }

  /* +2008.01 bj */	
  w5500.writeSnIR(s, SnIR::SEND_OK);
    5026:	60 e1       	ldi	r22, 0x10	; 16
    5028:	8c 2f       	mov	r24, r28
    502a:	69 de       	rcall	.-814    	; 0x4cfe <_ZN10W5500Class9writeSnIREhh>
    502c:	81 e0       	ldi	r24, 0x01	; 1

  /* Sent ok */
  return 1;
    502e:	90 e0       	ldi	r25, 0x00	; 0
    5030:	cf 91       	pop	r28
}
    5032:	08 95       	ret

00005034 <_ZN8SPIClass8transferEh>:
    5034:	8e bd       	out	0x2e, r24	; 46
    uint8_t _data = SPI.transfer(0);
    resetSS();
    SPI.endTransaction();

    return _data;
}
    5036:	00 00       	nop
    5038:	0d b4       	in	r0, 0x2d	; 45
    503a:	07 fe       	sbrs	r0, 7
    503c:	fd cf       	rjmp	.-6      	; 0x5038 <_ZN8SPIClass8transferEh+0x4>
    503e:	8e b5       	in	r24, 0x2e	; 46
    5040:	08 95       	ret

00005042 <_ZN10W5500Class5setSSEv>:
    5042:	44 98       	cbi	0x08, 4	; 8
    5044:	08 95       	ret

00005046 <_ZN10W5500Class7resetSSEv>:
    5046:	44 9a       	sbi	0x08, 4	; 8
    5048:	08 95       	ret

0000504a <_ZN10W5500Class5writeEjhh>:
    504a:	0f 93       	push	r16
    504c:	1f 93       	push	r17
    504e:	cf 93       	push	r28
    5050:	df 93       	push	r29
    5052:	18 2f       	mov	r17, r24
    5054:	09 2f       	mov	r16, r25
    5056:	d6 2f       	mov	r29, r22
    5058:	c4 2f       	mov	r28, r20
    505a:	80 91 83 0c 	lds	r24, 0x0C83	; 0x800c83 <wiznet_SPI_settings>
    505e:	90 91 84 0c 	lds	r25, 0x0C84	; 0x800c84 <wiznet_SPI_settings+0x1>
    5062:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN8SPIClass16beginTransactionE11SPISettings>
    5066:	ed df       	rcall	.-38     	; 0x5042 <_ZN10W5500Class5setSSEv>
    5068:	80 2f       	mov	r24, r16
    506a:	e4 df       	rcall	.-56     	; 0x5034 <_ZN8SPIClass8transferEh>
    506c:	81 2f       	mov	r24, r17
    506e:	e2 df       	rcall	.-60     	; 0x5034 <_ZN8SPIClass8transferEh>
    5070:	8d 2f       	mov	r24, r29
    5072:	e0 df       	rcall	.-64     	; 0x5034 <_ZN8SPIClass8transferEh>
    5074:	8c 2f       	mov	r24, r28
    5076:	de df       	rcall	.-68     	; 0x5034 <_ZN8SPIClass8transferEh>
    5078:	e6 df       	rcall	.-52     	; 0x5046 <_ZN10W5500Class7resetSSEv>
    507a:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <_ZN8SPIClass14endTransactionEv>
    507e:	81 e0       	ldi	r24, 0x01	; 1
    5080:	df 91       	pop	r29
    5082:	cf 91       	pop	r28
    5084:	1f 91       	pop	r17
    5086:	0f 91       	pop	r16
    5088:	08 95       	ret

0000508a <_ZN10W5500Class5writeEjhPKhj>:
    508a:	df 92       	push	r13
    508c:	ef 92       	push	r14
    508e:	ff 92       	push	r15
    5090:	0f 93       	push	r16
    5092:	1f 93       	push	r17
    5094:	cf 93       	push	r28
    5096:	df 93       	push	r29
    5098:	d8 2f       	mov	r29, r24
    509a:	d9 2e       	mov	r13, r25
    509c:	c6 2f       	mov	r28, r22
    509e:	7a 01       	movw	r14, r20
    50a0:	89 01       	movw	r16, r18
    50a2:	80 91 83 0c 	lds	r24, 0x0C83	; 0x800c83 <wiznet_SPI_settings>
    50a6:	90 91 84 0c 	lds	r25, 0x0C84	; 0x800c84 <wiznet_SPI_settings+0x1>
    50aa:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN8SPIClass16beginTransactionE11SPISettings>
    50ae:	c9 df       	rcall	.-110    	; 0x5042 <_ZN10W5500Class5setSSEv>
    50b0:	8d 2d       	mov	r24, r13
    50b2:	c0 df       	rcall	.-128    	; 0x5034 <_ZN8SPIClass8transferEh>
    50b4:	8d 2f       	mov	r24, r29
    50b6:	be df       	rcall	.-132    	; 0x5034 <_ZN8SPIClass8transferEh>
    50b8:	8c 2f       	mov	r24, r28
    50ba:	bc df       	rcall	.-136    	; 0x5034 <_ZN8SPIClass8transferEh>
    50bc:	e7 01       	movw	r28, r14
    50be:	e0 0e       	add	r14, r16
    50c0:	f1 1e       	adc	r15, r17
    50c2:	ce 15       	cp	r28, r14
    50c4:	df 05       	cpc	r29, r15
    50c6:	19 f0       	breq	.+6      	; 0x50ce <_ZN10W5500Class5writeEjhPKhj+0x44>
    50c8:	89 91       	ld	r24, Y+
    50ca:	b4 df       	rcall	.-152    	; 0x5034 <_ZN8SPIClass8transferEh>
    50cc:	fa cf       	rjmp	.-12     	; 0x50c2 <_ZN10W5500Class5writeEjhPKhj+0x38>
    50ce:	bb df       	rcall	.-138    	; 0x5046 <_ZN10W5500Class7resetSSEv>
    50d0:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <_ZN8SPIClass14endTransactionEv>
    50d4:	c8 01       	movw	r24, r16
    50d6:	df 91       	pop	r29
    50d8:	cf 91       	pop	r28
    50da:	1f 91       	pop	r17
    50dc:	0f 91       	pop	r16
    50de:	ff 90       	pop	r15
    50e0:	ef 90       	pop	r14
    50e2:	df 90       	pop	r13
    50e4:	08 95       	ret

000050e6 <_ZN10W5500Class4readEjh>:
    50e6:	1f 93       	push	r17
    50e8:	cf 93       	push	r28
    50ea:	df 93       	push	r29
    50ec:	d8 2f       	mov	r29, r24
    50ee:	19 2f       	mov	r17, r25
    50f0:	c6 2f       	mov	r28, r22
    50f2:	80 91 83 0c 	lds	r24, 0x0C83	; 0x800c83 <wiznet_SPI_settings>
    50f6:	90 91 84 0c 	lds	r25, 0x0C84	; 0x800c84 <wiznet_SPI_settings+0x1>
    50fa:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN8SPIClass16beginTransactionE11SPISettings>
    50fe:	a1 df       	rcall	.-190    	; 0x5042 <_ZN10W5500Class5setSSEv>
    5100:	81 2f       	mov	r24, r17
    5102:	98 df       	rcall	.-208    	; 0x5034 <_ZN8SPIClass8transferEh>
    5104:	8d 2f       	mov	r24, r29
    5106:	96 df       	rcall	.-212    	; 0x5034 <_ZN8SPIClass8transferEh>
    5108:	8c 2f       	mov	r24, r28
    510a:	94 df       	rcall	.-216    	; 0x5034 <_ZN8SPIClass8transferEh>
    510c:	80 e0       	ldi	r24, 0x00	; 0
    510e:	92 df       	rcall	.-220    	; 0x5034 <_ZN8SPIClass8transferEh>
    5110:	c8 2f       	mov	r28, r24
    5112:	99 df       	rcall	.-206    	; 0x5046 <_ZN10W5500Class7resetSSEv>
    5114:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <_ZN8SPIClass14endTransactionEv>
    5118:	8c 2f       	mov	r24, r28
    511a:	df 91       	pop	r29
    511c:	cf 91       	pop	r28
    511e:	1f 91       	pop	r17
    5120:	08 95       	ret

00005122 <_ZN10W5500Class4initEh>:
    5122:	cf 93       	push	r28
    5124:	df 93       	push	r29
    5126:	60 93 82 0c 	sts	0x0C82, r22	; 0x800c82 <SPI_CS>
    512a:	68 ee       	ldi	r22, 0xE8	; 232
    512c:	73 e0       	ldi	r23, 0x03	; 3
    512e:	80 e0       	ldi	r24, 0x00	; 0
    5130:	90 e0       	ldi	r25, 0x00	; 0
    5132:	0e 94 3d 3c 	call	0x787a	; 0x787a <delay>
    5136:	3c 9a       	sbi	0x07, 4	; 7
    5138:	0e 94 91 34 	call	0x6922	; 0x6922 <_ZN8SPIClass5beginEv>
    513c:	60 e0       	ldi	r22, 0x00	; 0
    513e:	80 e0       	ldi	r24, 0x00	; 0
    5140:	90 e0       	ldi	r25, 0x00	; 0
    5142:	d1 df       	rcall	.-94     	; 0x50e6 <_ZN10W5500Class4readEjh>
    5144:	48 2f       	mov	r20, r24
    5146:	40 68       	ori	r20, 0x80	; 128
    5148:	64 e0       	ldi	r22, 0x04	; 4
    514a:	80 e0       	ldi	r24, 0x00	; 0
    514c:	90 e0       	ldi	r25, 0x00	; 0
    514e:	7d df       	rcall	.-262    	; 0x504a <_ZN10W5500Class5writeEjhh>
    5150:	c0 e0       	ldi	r28, 0x00	; 0
    5152:	dc 2f       	mov	r29, r28
    5154:	d2 95       	swap	r29
    5156:	dd 0f       	add	r29, r29
    5158:	d0 7e       	andi	r29, 0xE0	; 224
    515a:	d4 5f       	subi	r29, 0xF4	; 244
    515c:	42 e0       	ldi	r20, 0x02	; 2
    515e:	6d 2f       	mov	r22, r29
    5160:	8e e1       	ldi	r24, 0x1E	; 30
    5162:	90 e0       	ldi	r25, 0x00	; 0
    5164:	72 df       	rcall	.-284    	; 0x504a <_ZN10W5500Class5writeEjhh>
    5166:	42 e0       	ldi	r20, 0x02	; 2
    5168:	6d 2f       	mov	r22, r29
    516a:	8f e1       	ldi	r24, 0x1F	; 31
    516c:	90 e0       	ldi	r25, 0x00	; 0
    516e:	6d df       	rcall	.-294    	; 0x504a <_ZN10W5500Class5writeEjhh>
    5170:	cf 5f       	subi	r28, 0xFF	; 255
    5172:	c8 30       	cpi	r28, 0x08	; 8
    5174:	71 f7       	brne	.-36     	; 0x5152 <_ZN10W5500Class4initEh+0x30>
    5176:	df 91       	pop	r29
    5178:	cf 91       	pop	r28
    517a:	08 95       	ret

0000517c <_ZN10W5500Class12readSnTX_FSREh>:
    517c:	1f 93       	push	r17
    517e:	cf 93       	push	r28
    5180:	df 93       	push	r29
    5182:	18 2f       	mov	r17, r24
    5184:	60 e2       	ldi	r22, 0x20	; 32
    5186:	70 e0       	ldi	r23, 0x00	; 0
    5188:	98 dd       	rcall	.-1232   	; 0x4cba <_ZN10W5500Class6readSnEhj>
    518a:	c8 2f       	mov	r28, r24
    518c:	d0 e0       	ldi	r29, 0x00	; 0
    518e:	dc 2f       	mov	r29, r28
    5190:	cc 27       	eor	r28, r28
    5192:	61 e2       	ldi	r22, 0x21	; 33
    5194:	70 e0       	ldi	r23, 0x00	; 0
    5196:	81 2f       	mov	r24, r17
    5198:	90 dd       	rcall	.-1248   	; 0x4cba <_ZN10W5500Class6readSnEhj>
    519a:	9e 01       	movw	r18, r28
    519c:	28 0f       	add	r18, r24
    519e:	31 1d       	adc	r19, r1
    51a0:	c9 01       	movw	r24, r18
    51a2:	df 91       	pop	r29
    51a4:	cf 91       	pop	r28
    51a6:	1f 91       	pop	r17
    51a8:	08 95       	ret

000051aa <_ZN10W5500Class13getTXFreeSizeEh>:
    51aa:	ff 92       	push	r15
    51ac:	0f 93       	push	r16
    51ae:	1f 93       	push	r17
    51b0:	cf 93       	push	r28
    51b2:	df 93       	push	r29
    51b4:	f6 2e       	mov	r15, r22
    51b6:	c0 e0       	ldi	r28, 0x00	; 0
    51b8:	d0 e0       	ldi	r29, 0x00	; 0
    51ba:	8f 2d       	mov	r24, r15
    51bc:	df df       	rcall	.-66     	; 0x517c <_ZN10W5500Class12readSnTX_FSREh>
    51be:	8c 01       	movw	r16, r24
    51c0:	89 2b       	or	r24, r25
    51c2:	19 f0       	breq	.+6      	; 0x51ca <_ZN10W5500Class13getTXFreeSizeEh+0x20>
    51c4:	8f 2d       	mov	r24, r15
    51c6:	da df       	rcall	.-76     	; 0x517c <_ZN10W5500Class12readSnTX_FSREh>
    51c8:	ec 01       	movw	r28, r24
    51ca:	c0 17       	cp	r28, r16
    51cc:	d1 07       	cpc	r29, r17
    51ce:	a9 f7       	brne	.-22     	; 0x51ba <_ZN10W5500Class13getTXFreeSizeEh+0x10>
    51d0:	ce 01       	movw	r24, r28
    51d2:	df 91       	pop	r29
    51d4:	cf 91       	pop	r28
    51d6:	1f 91       	pop	r17
    51d8:	0f 91       	pop	r16
    51da:	ff 90       	pop	r15
    51dc:	08 95       	ret

000051de <_ZN10W5500Class12readSnRX_RSREh>:
    51de:	1f 93       	push	r17
    51e0:	cf 93       	push	r28
    51e2:	df 93       	push	r29
    51e4:	18 2f       	mov	r17, r24
    51e6:	66 e2       	ldi	r22, 0x26	; 38
    51e8:	70 e0       	ldi	r23, 0x00	; 0
    51ea:	67 dd       	rcall	.-1330   	; 0x4cba <_ZN10W5500Class6readSnEhj>
    51ec:	c8 2f       	mov	r28, r24
    51ee:	d0 e0       	ldi	r29, 0x00	; 0
    51f0:	dc 2f       	mov	r29, r28
    51f2:	cc 27       	eor	r28, r28
    51f4:	67 e2       	ldi	r22, 0x27	; 39
    51f6:	70 e0       	ldi	r23, 0x00	; 0
    51f8:	81 2f       	mov	r24, r17
    51fa:	5f dd       	rcall	.-1346   	; 0x4cba <_ZN10W5500Class6readSnEhj>
    51fc:	9e 01       	movw	r18, r28
    51fe:	28 0f       	add	r18, r24
    5200:	31 1d       	adc	r19, r1
    5202:	c9 01       	movw	r24, r18
    5204:	df 91       	pop	r29
    5206:	cf 91       	pop	r28
    5208:	1f 91       	pop	r17
    520a:	08 95       	ret

0000520c <_ZN10W5500Class17getRXReceivedSizeEh>:
    520c:	ff 92       	push	r15
    520e:	0f 93       	push	r16
    5210:	1f 93       	push	r17
    5212:	cf 93       	push	r28
    5214:	df 93       	push	r29
    5216:	f6 2e       	mov	r15, r22
    5218:	c0 e0       	ldi	r28, 0x00	; 0
    521a:	d0 e0       	ldi	r29, 0x00	; 0
    521c:	8f 2d       	mov	r24, r15
    521e:	df df       	rcall	.-66     	; 0x51de <_ZN10W5500Class12readSnRX_RSREh>
    5220:	8c 01       	movw	r16, r24
    5222:	89 2b       	or	r24, r25
    5224:	19 f0       	breq	.+6      	; 0x522c <_ZN10W5500Class17getRXReceivedSizeEh+0x20>
    5226:	8f 2d       	mov	r24, r15
    5228:	da df       	rcall	.-76     	; 0x51de <_ZN10W5500Class12readSnRX_RSREh>
    522a:	ec 01       	movw	r28, r24
    522c:	c0 17       	cp	r28, r16
    522e:	d1 07       	cpc	r29, r17
    5230:	a9 f7       	brne	.-22     	; 0x521c <_ZN10W5500Class17getRXReceivedSizeEh+0x10>
    5232:	ce 01       	movw	r24, r28
    5234:	df 91       	pop	r29
    5236:	cf 91       	pop	r28
    5238:	1f 91       	pop	r17
    523a:	0f 91       	pop	r16
    523c:	ff 90       	pop	r15
    523e:	08 95       	ret

00005240 <_ZN10W5500Class27send_data_processing_offsetEhjPKhj>:
    5240:	af 92       	push	r10
    5242:	bf 92       	push	r11
    5244:	df 92       	push	r13
    5246:	ef 92       	push	r14
    5248:	ff 92       	push	r15
    524a:	0f 93       	push	r16
    524c:	1f 93       	push	r17
    524e:	cf 93       	push	r28
    5250:	df 93       	push	r29
    5252:	d6 2e       	mov	r13, r22
    5254:	7a 01       	movw	r14, r20
    5256:	59 01       	movw	r10, r18
    5258:	64 e2       	ldi	r22, 0x24	; 36
    525a:	70 e0       	ldi	r23, 0x00	; 0
    525c:	8d 2d       	mov	r24, r13
    525e:	2d dd       	rcall	.-1446   	; 0x4cba <_ZN10W5500Class6readSnEhj>
    5260:	c8 2f       	mov	r28, r24
    5262:	65 e2       	ldi	r22, 0x25	; 37
    5264:	70 e0       	ldi	r23, 0x00	; 0
    5266:	8d 2d       	mov	r24, r13
    5268:	28 dd       	rcall	.-1456   	; 0x4cba <_ZN10W5500Class6readSnEhj>
    526a:	d0 e0       	ldi	r29, 0x00	; 0
    526c:	dc 2f       	mov	r29, r28
    526e:	cc 27       	eor	r28, r28
    5270:	e8 0e       	add	r14, r24
    5272:	f1 1c       	adc	r15, r1
    5274:	ce 0d       	add	r28, r14
    5276:	df 1d       	adc	r29, r15
    5278:	6d 2d       	mov	r22, r13
    527a:	62 95       	swap	r22
    527c:	66 0f       	add	r22, r22
    527e:	60 7e       	andi	r22, 0xE0	; 224
    5280:	6c 5e       	subi	r22, 0xEC	; 236
    5282:	98 01       	movw	r18, r16
    5284:	a5 01       	movw	r20, r10
    5286:	ce 01       	movw	r24, r28
    5288:	00 df       	rcall	.-512    	; 0x508a <_ZN10W5500Class5writeEjhPKhj>
    528a:	c0 0f       	add	r28, r16
    528c:	d1 1f       	adc	r29, r17
    528e:	4d 2f       	mov	r20, r29
    5290:	64 e2       	ldi	r22, 0x24	; 36
    5292:	70 e0       	ldi	r23, 0x00	; 0
    5294:	8d 2d       	mov	r24, r13
    5296:	1c dd       	rcall	.-1480   	; 0x4cd0 <_ZN10W5500Class7writeSnEhjh>
    5298:	4c 2f       	mov	r20, r28
    529a:	65 e2       	ldi	r22, 0x25	; 37
    529c:	70 e0       	ldi	r23, 0x00	; 0
    529e:	8d 2d       	mov	r24, r13
    52a0:	df 91       	pop	r29
    52a2:	cf 91       	pop	r28
    52a4:	1f 91       	pop	r17
    52a6:	0f 91       	pop	r16
    52a8:	ff 90       	pop	r15
    52aa:	ef 90       	pop	r14
    52ac:	df 90       	pop	r13
    52ae:	bf 90       	pop	r11
    52b0:	af 90       	pop	r10
    52b2:	0e cd       	rjmp	.-1508   	; 0x4cd0 <_ZN10W5500Class7writeSnEhjh>

000052b4 <_ZN10W5500Class20send_data_processingEhPKhj>:
    52b4:	0f 93       	push	r16
    52b6:	1f 93       	push	r17
    52b8:	89 01       	movw	r16, r18
    52ba:	9a 01       	movw	r18, r20
    52bc:	40 e0       	ldi	r20, 0x00	; 0
    52be:	50 e0       	ldi	r21, 0x00	; 0
    52c0:	bf df       	rcall	.-130    	; 0x5240 <_ZN10W5500Class27send_data_processing_offsetEhjPKhj>
    52c2:	1f 91       	pop	r17
    52c4:	0f 91       	pop	r16
    52c6:	08 95       	ret

000052c8 <_ZN10W5500Class4readEjhPhj>:
    52c8:	df 92       	push	r13
    52ca:	ef 92       	push	r14
    52cc:	ff 92       	push	r15
    52ce:	0f 93       	push	r16
    52d0:	1f 93       	push	r17
    52d2:	cf 93       	push	r28
    52d4:	df 93       	push	r29
    52d6:	d8 2f       	mov	r29, r24
    52d8:	d9 2e       	mov	r13, r25
    52da:	c6 2f       	mov	r28, r22
    52dc:	7a 01       	movw	r14, r20
    52de:	89 01       	movw	r16, r18
    52e0:	80 91 83 0c 	lds	r24, 0x0C83	; 0x800c83 <wiznet_SPI_settings>
    52e4:	90 91 84 0c 	lds	r25, 0x0C84	; 0x800c84 <wiznet_SPI_settings+0x1>
    52e8:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN8SPIClass16beginTransactionE11SPISettings>
    52ec:	aa de       	rcall	.-684    	; 0x5042 <_ZN10W5500Class5setSSEv>
    52ee:	8d 2d       	mov	r24, r13
    52f0:	a1 de       	rcall	.-702    	; 0x5034 <_ZN8SPIClass8transferEh>
    52f2:	8d 2f       	mov	r24, r29
    52f4:	9f de       	rcall	.-706    	; 0x5034 <_ZN8SPIClass8transferEh>
    52f6:	8c 2f       	mov	r24, r28
    52f8:	9d de       	rcall	.-710    	; 0x5034 <_ZN8SPIClass8transferEh>
    52fa:	e7 01       	movw	r28, r14
    52fc:	e0 0e       	add	r14, r16
    52fe:	f1 1e       	adc	r15, r17
    5300:	ce 15       	cp	r28, r14
    5302:	df 05       	cpc	r29, r15
    5304:	21 f0       	breq	.+8      	; 0x530e <_ZN10W5500Class4readEjhPhj+0x46>
    5306:	80 e0       	ldi	r24, 0x00	; 0
    5308:	95 de       	rcall	.-726    	; 0x5034 <_ZN8SPIClass8transferEh>
    530a:	89 93       	st	Y+, r24
    530c:	f9 cf       	rjmp	.-14     	; 0x5300 <_ZN10W5500Class4readEjhPhj+0x38>
    530e:	9b de       	rcall	.-714    	; 0x5046 <_ZN10W5500Class7resetSSEv>
    5310:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <_ZN8SPIClass14endTransactionEv>
    5314:	c8 01       	movw	r24, r16
    5316:	df 91       	pop	r29
    5318:	cf 91       	pop	r28
    531a:	1f 91       	pop	r17
    531c:	0f 91       	pop	r16
    531e:	ff 90       	pop	r15
    5320:	ef 90       	pop	r14
    5322:	df 90       	pop	r13
    5324:	08 95       	ret

00005326 <_ZN10W5500Class9read_dataEhjPVhj>:
    5326:	0f 93       	push	r16
    5328:	1f 93       	push	r17
    532a:	cf 93       	push	r28
    532c:	df 93       	push	r29
    532e:	00 d0       	rcall	.+0      	; 0x5330 <_ZN10W5500Class9read_dataEhjPVhj+0xa>
    5330:	cd b7       	in	r28, 0x3d	; 61
    5332:	de b7       	in	r29, 0x3e	; 62
    5334:	5a 83       	std	Y+2, r21	; 0x02
    5336:	49 83       	std	Y+1, r20	; 0x01
    5338:	a9 01       	movw	r20, r18
    533a:	98 01       	movw	r18, r16
    533c:	89 81       	ldd	r24, Y+1	; 0x01
    533e:	9a 81       	ldd	r25, Y+2	; 0x02
    5340:	62 95       	swap	r22
    5342:	66 0f       	add	r22, r22
    5344:	60 7e       	andi	r22, 0xE0	; 224
    5346:	68 5e       	subi	r22, 0xE8	; 232
    5348:	0f 90       	pop	r0
    534a:	0f 90       	pop	r0
    534c:	df 91       	pop	r29
    534e:	cf 91       	pop	r28
    5350:	1f 91       	pop	r17
    5352:	0f 91       	pop	r16
    5354:	b9 cf       	rjmp	.-142    	; 0x52c8 <_ZN10W5500Class4readEjhPhj>

00005356 <_ZN10W5500Class20recv_data_processingEhPhjh>:
    5356:	8f 92       	push	r8
    5358:	9f 92       	push	r9
    535a:	af 92       	push	r10
    535c:	bf 92       	push	r11
    535e:	cf 92       	push	r12
    5360:	df 92       	push	r13
    5362:	ef 92       	push	r14
    5364:	ff 92       	push	r15
    5366:	0f 93       	push	r16
    5368:	1f 93       	push	r17
    536a:	cf 93       	push	r28
    536c:	df 93       	push	r29
    536e:	6c 01       	movw	r12, r24
    5370:	96 2e       	mov	r9, r22
    5372:	5a 01       	movw	r10, r20
    5374:	79 01       	movw	r14, r18
    5376:	80 2e       	mov	r8, r16
    5378:	68 e2       	ldi	r22, 0x28	; 40
    537a:	70 e0       	ldi	r23, 0x00	; 0
    537c:	89 2d       	mov	r24, r9
    537e:	9d dc       	rcall	.-1734   	; 0x4cba <_ZN10W5500Class6readSnEhj>
    5380:	08 2f       	mov	r16, r24
    5382:	69 e2       	ldi	r22, 0x29	; 41
    5384:	70 e0       	ldi	r23, 0x00	; 0
    5386:	89 2d       	mov	r24, r9
    5388:	98 dc       	rcall	.-1744   	; 0x4cba <_ZN10W5500Class6readSnEhj>
    538a:	10 e0       	ldi	r17, 0x00	; 0
    538c:	10 2f       	mov	r17, r16
    538e:	00 27       	eor	r16, r16
    5390:	e8 01       	movw	r28, r16
    5392:	c8 0f       	add	r28, r24
    5394:	d1 1d       	adc	r29, r1
    5396:	87 01       	movw	r16, r14
    5398:	95 01       	movw	r18, r10
    539a:	ae 01       	movw	r20, r28
    539c:	69 2d       	mov	r22, r9
    539e:	c6 01       	movw	r24, r12
    53a0:	c2 df       	rcall	.-124    	; 0x5326 <_ZN10W5500Class9read_dataEhjPVhj>
    53a2:	81 10       	cpse	r8, r1
    53a4:	18 c0       	rjmp	.+48     	; 0x53d6 <_ZN10W5500Class20recv_data_processingEhPhjh+0x80>
    53a6:	0c 0f       	add	r16, r28
    53a8:	1d 1f       	adc	r17, r29
    53aa:	41 2f       	mov	r20, r17
    53ac:	68 e2       	ldi	r22, 0x28	; 40
    53ae:	70 e0       	ldi	r23, 0x00	; 0
    53b0:	89 2d       	mov	r24, r9
    53b2:	8e dc       	rcall	.-1764   	; 0x4cd0 <_ZN10W5500Class7writeSnEhjh>
    53b4:	40 2f       	mov	r20, r16
    53b6:	69 e2       	ldi	r22, 0x29	; 41
    53b8:	70 e0       	ldi	r23, 0x00	; 0
    53ba:	89 2d       	mov	r24, r9
    53bc:	df 91       	pop	r29
    53be:	cf 91       	pop	r28
    53c0:	1f 91       	pop	r17
    53c2:	0f 91       	pop	r16
    53c4:	ff 90       	pop	r15
    53c6:	ef 90       	pop	r14
    53c8:	df 90       	pop	r13
    53ca:	cf 90       	pop	r12
    53cc:	bf 90       	pop	r11
    53ce:	af 90       	pop	r10
    53d0:	9f 90       	pop	r9
    53d2:	8f 90       	pop	r8
    53d4:	7d cc       	rjmp	.-1798   	; 0x4cd0 <_ZN10W5500Class7writeSnEhjh>
    53d6:	df 91       	pop	r29
    53d8:	cf 91       	pop	r28
    53da:	1f 91       	pop	r17
    53dc:	0f 91       	pop	r16
    53de:	ff 90       	pop	r15
    53e0:	ef 90       	pop	r14
    53e2:	df 90       	pop	r13
    53e4:	cf 90       	pop	r12
    53e6:	bf 90       	pop	r11
    53e8:	af 90       	pop	r10
    53ea:	9f 90       	pop	r9
    53ec:	8f 90       	pop	r8
    53ee:	08 95       	ret

000053f0 <_ZN10W5500Class9execCmdSnEh7SockCMD>:
    53f0:	cf 93       	push	r28
    53f2:	c6 2f       	mov	r28, r22
    53f4:	61 e0       	ldi	r22, 0x01	; 1
    53f6:	70 e0       	ldi	r23, 0x00	; 0
    53f8:	8c 2f       	mov	r24, r28
    53fa:	6a dc       	rcall	.-1836   	; 0x4cd0 <_ZN10W5500Class7writeSnEhjh>
    53fc:	61 e0       	ldi	r22, 0x01	; 1
    53fe:	70 e0       	ldi	r23, 0x00	; 0
    5400:	8c 2f       	mov	r24, r28
    5402:	5b dc       	rcall	.-1866   	; 0x4cba <_ZN10W5500Class6readSnEhj>
    5404:	81 11       	cpse	r24, r1
    5406:	fa cf       	rjmp	.-12     	; 0x53fc <_ZN10W5500Class9execCmdSnEh7SockCMD+0xc>
    5408:	cf 91       	pop	r28
    540a:	08 95       	ret

0000540c <_GLOBAL__sub_I_w5500>:
    // Invert the SPI2X bit
    clockDiv ^= 0x1;

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    540c:	e3 e8       	ldi	r30, 0x83	; 131
    540e:	fc e0       	ldi	r31, 0x0C	; 12
    5410:	80 e5       	ldi	r24, 0x50	; 80
    5412:	80 83       	st	Z, r24
    spsr = clockDiv & SPI_2XCLOCK_MASK;
    5414:	81 e0       	ldi	r24, 0x01	; 1
    5416:	81 83       	std	Z+1, r24	; 0x01
    5418:	08 95       	ret

0000541a <_ZN5I2CIOC1Ev>:
      // Remove the values which are not inputs and get the value of the pin
      pinVal = this->read() & _dirMask;
      pinVal = ( pinVal >> pin ) & 0x01; // Get the pin value
   }
   return (pinVal);
}
    541a:	fc 01       	movw	r30, r24
    541c:	12 82       	std	Z+2, r1	; 0x02
    541e:	8f ef       	ldi	r24, 0xFF	; 255
    5420:	81 83       	std	Z+1, r24	; 0x01
    5422:	10 82       	st	Z, r1
    5424:	13 82       	std	Z+3, r1	; 0x03
    5426:	08 95       	ret

00005428 <_ZN5I2CIO8portModeEh>:
    5428:	fc 01       	movw	r30, r24
    542a:	83 81       	ldd	r24, Z+3	; 0x03
    542c:	88 23       	and	r24, r24
    542e:	31 f0       	breq	.+12     	; 0x543c <_ZN5I2CIO8portModeEh+0x14>
    5430:	61 11       	cpse	r22, r1
    5432:	03 c0       	rjmp	.+6      	; 0x543a <_ZN5I2CIO8portModeEh+0x12>
    5434:	8f ef       	ldi	r24, 0xFF	; 255
    5436:	81 83       	std	Z+1, r24	; 0x01
    5438:	08 95       	ret
    543a:	11 82       	std	Z+1, r1	; 0x01
    543c:	08 95       	ret

0000543e <_ZN5I2CIO11isAvailableEh>:
    543e:	89 ef       	ldi	r24, 0xF9	; 249
    5440:	9c e0       	ldi	r25, 0x0C	; 12
    5442:	0e 94 f3 37 	call	0x6fe6	; 0x6fe6 <_ZN7TwoWire17beginTransmissionEh>
    5446:	89 ef       	ldi	r24, 0xF9	; 249
    5448:	9c e0       	ldi	r25, 0x0C	; 12
    544a:	0e 94 74 38 	call	0x70e8	; 0x70e8 <_ZN7TwoWire15endTransmissionEv>
    544e:	91 e0       	ldi	r25, 0x01	; 1
    5450:	81 11       	cpse	r24, r1
    5452:	90 e0       	ldi	r25, 0x00	; 0
    5454:	89 2f       	mov	r24, r25
    5456:	08 95       	ret

00005458 <_ZN5I2CIO5beginEh>:
    5458:	cf 93       	push	r28
    545a:	df 93       	push	r29
    545c:	ec 01       	movw	r28, r24
    545e:	6a 83       	std	Y+2, r22	; 0x02
    5460:	89 ef       	ldi	r24, 0xF9	; 249
    5462:	9c e0       	ldi	r25, 0x0C	; 12
    5464:	0e 94 e0 37 	call	0x6fc0	; 0x6fc0 <_ZN7TwoWire5beginEv>
    5468:	6a 81       	ldd	r22, Y+2	; 0x02
    546a:	ce 01       	movw	r24, r28
    546c:	e8 df       	rcall	.-48     	; 0x543e <_ZN5I2CIO11isAvailableEh>
    546e:	8b 83       	std	Y+3, r24	; 0x03
    5470:	88 23       	and	r24, r24
    5472:	29 f0       	breq	.+10     	; 0x547e <_ZN5I2CIO5beginEh+0x26>
    5474:	89 ef       	ldi	r24, 0xF9	; 249
    5476:	9c e0       	ldi	r25, 0x0C	; 12
    5478:	0e 94 1c 37 	call	0x6e38	; 0x6e38 <_ZN7TwoWire4readEv>
    547c:	88 83       	st	Y, r24
    547e:	8b 81       	ldd	r24, Y+3	; 0x03
    5480:	90 e0       	ldi	r25, 0x00	; 0
    5482:	df 91       	pop	r29
    5484:	cf 91       	pop	r28
    5486:	08 95       	ret

00005488 <_ZN5I2CIO5writeEh>:
}

//
// write
int I2CIO::write ( uint8_t value )
{
    5488:	cf 93       	push	r28
    548a:	df 93       	push	r29
   int status = 0;
   
   if ( _initialised )
    548c:	fc 01       	movw	r30, r24
    548e:	23 81       	ldd	r18, Z+3	; 0x03
    5490:	22 23       	and	r18, r18
    5492:	b1 f0       	breq	.+44     	; 0x54c0 <_ZN5I2CIO5writeEh+0x38>
    5494:	ec 01       	movw	r28, r24
   {
      // Only write HIGH the values of the ports that have been initialised as
      // outputs updating the output shadow of the device
      _shadow = ( value & ~(_dirMask) );
    5496:	81 81       	ldd	r24, Z+1	; 0x01
    5498:	80 95       	com	r24
    549a:	68 23       	and	r22, r24
    549c:	60 83       	st	Z, r22
   
      Wire.beginTransmission ( _i2cAddr );
    549e:	62 81       	ldd	r22, Z+2	; 0x02
    54a0:	89 ef       	ldi	r24, 0xF9	; 249
    54a2:	9c e0       	ldi	r25, 0x0C	; 12
    54a4:	0e 94 f3 37 	call	0x6fe6	; 0x6fe6 <_ZN7TwoWire17beginTransmissionEh>
#if (ARDUINO <  100)
      Wire.send ( _shadow );
#else
      Wire.write ( _shadow );
    54a8:	68 81       	ld	r22, Y
    54aa:	89 ef       	ldi	r24, 0xF9	; 249
    54ac:	9c e0       	ldi	r25, 0x0C	; 12
    54ae:	0e 94 a2 37 	call	0x6f44	; 0x6f44 <_ZN7TwoWire5writeEh>
#endif  
      status = Wire.endTransmission ();
    54b2:	89 ef       	ldi	r24, 0xF9	; 249
    54b4:	9c e0       	ldi	r25, 0x0C	; 12
    54b6:	0e 94 74 38 	call	0x70e8	; 0x70e8 <_ZN7TwoWire15endTransmissionEv>
    54ba:	28 2f       	mov	r18, r24
    54bc:	30 e0       	ldi	r19, 0x00	; 0
    54be:	02 c0       	rjmp	.+4      	; 0x54c4 <_ZN5I2CIO5writeEh+0x3c>

//
// write
int I2CIO::write ( uint8_t value )
{
   int status = 0;
    54c0:	20 e0       	ldi	r18, 0x00	; 0
    54c2:	30 e0       	ldi	r19, 0x00	; 0
#else
      Wire.write ( _shadow );
#endif  
      status = Wire.endTransmission ();
   }
   return ( (status == 0) );
    54c4:	81 e0       	ldi	r24, 0x01	; 1
    54c6:	90 e0       	ldi	r25, 0x00	; 0
    54c8:	23 2b       	or	r18, r19
    54ca:	11 f0       	breq	.+4      	; 0x54d0 <_ZN5I2CIO5writeEh+0x48>
    54cc:	80 e0       	ldi	r24, 0x00	; 0
    54ce:	90 e0       	ldi	r25, 0x00	; 0
}
    54d0:	df 91       	pop	r29
    54d2:	cf 91       	pop	r28
    54d4:	08 95       	ret

000054d6 <_ZN3LCD15setBacklightPinEh13t_backlighPol>:

// This will 'left justify' text from the cursor
void LCD::noAutoscroll(void) 
{
   _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
   command(LCD_ENTRYMODESET | _displaymode);
    54d6:	08 95       	ret

000054d8 <_ZN3LCD12setBacklightEh>:
    54d8:	08 95       	ret

000054da <_ZN3LCD5writeEh>:
    54da:	dc 01       	movw	r26, r24
    54dc:	ed 91       	ld	r30, X+
    54de:	fc 91       	ld	r31, X
    54e0:	06 84       	ldd	r0, Z+14	; 0x0e
    54e2:	f7 85       	ldd	r31, Z+15	; 0x0f
    54e4:	e0 2d       	mov	r30, r0
    54e6:	41 e0       	ldi	r20, 0x01	; 1
    54e8:	09 95       	icall
    54ea:	81 e0       	ldi	r24, 0x01	; 1
    54ec:	90 e0       	ldi	r25, 0x00	; 0
    54ee:	08 95       	ret

000054f0 <_ZN3LCDC1Ev>:
    54f0:	fc 01       	movw	r30, r24
    54f2:	13 82       	std	Z+3, r1	; 0x03
    54f4:	12 82       	std	Z+2, r1	; 0x02
    54f6:	20 e2       	ldi	r18, 0x20	; 32
    54f8:	39 e0       	ldi	r19, 0x09	; 9
    54fa:	31 83       	std	Z+1, r19	; 0x01
    54fc:	20 83       	st	Z, r18
    54fe:	08 95       	ret

00005500 <_ZN3LCD9backlightEv>:
    5500:	dc 01       	movw	r26, r24
    5502:	ed 91       	ld	r30, X+
    5504:	fc 91       	ld	r31, X
    5506:	04 84       	ldd	r0, Z+12	; 0x0c
    5508:	f5 85       	ldd	r31, Z+13	; 0x0d
    550a:	e0 2d       	mov	r30, r0
    550c:	6f ef       	ldi	r22, 0xFF	; 255
    550e:	09 94       	ijmp

00005510 <_ZN3LCD11noBacklightEv>:
    5510:	dc 01       	movw	r26, r24
    5512:	ed 91       	ld	r30, X+
    5514:	fc 91       	ld	r31, X
    5516:	04 84       	ldd	r0, Z+12	; 0x0c
    5518:	f5 85       	ldd	r31, Z+13	; 0x0d
    551a:	e0 2d       	mov	r30, r0
    551c:	60 e0       	ldi	r22, 0x00	; 0
    551e:	09 94       	ijmp

00005520 <_ZN3LCD7commandEh>:
    5520:	dc 01       	movw	r26, r24
    5522:	ed 91       	ld	r30, X+
    5524:	fc 91       	ld	r31, X
    5526:	06 84       	ldd	r0, Z+14	; 0x0e
    5528:	f7 85       	ldd	r31, Z+15	; 0x0f
    552a:	e0 2d       	mov	r30, r0
    552c:	40 e0       	ldi	r20, 0x00	; 0
    552e:	09 94       	ijmp

00005530 <_ZN3LCD5clearEv>:
    5530:	61 e0       	ldi	r22, 0x01	; 1
    5532:	f6 df       	rcall	.-20     	; 0x5520 <_ZN3LCD7commandEh>
    5534:	80 ed       	ldi	r24, 0xD0	; 208
    5536:	97 e0       	ldi	r25, 0x07	; 7
    5538:	0c 94 76 3c 	jmp	0x78ec	; 0x78ec <delayMicroseconds>

0000553c <_ZN3LCD9setCursorEhh>:
    553c:	cf 93       	push	r28
    553e:	df 93       	push	r29
    5540:	cd b7       	in	r28, 0x3d	; 61
    5542:	de b7       	in	r29, 0x3e	; 62
    5544:	28 97       	sbiw	r28, 0x08	; 8
    5546:	0f b6       	in	r0, 0x3f	; 63
    5548:	f8 94       	cli
    554a:	de bf       	out	0x3e, r29	; 62
    554c:	0f be       	out	0x3f, r0	; 63
    554e:	cd bf       	out	0x3d, r28	; 61
    5550:	fc 01       	movw	r30, r24
    5552:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <_ZN14EthernetClient8_srcportE+0x8>
    5556:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <_ZN14EthernetClient8_srcportE+0x9>
    555a:	a0 91 54 01 	lds	r26, 0x0154	; 0x800154 <_ZN14EthernetClient8_srcportE+0xa>
    555e:	b0 91 55 01 	lds	r27, 0x0155	; 0x800155 <_ZN14EthernetClient8_srcportE+0xb>
    5562:	8d 83       	std	Y+5, r24	; 0x05
    5564:	9e 83       	std	Y+6, r25	; 0x06
    5566:	af 83       	std	Y+7, r26	; 0x07
    5568:	b8 87       	std	Y+8, r27	; 0x08
    556a:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <_ZN14EthernetClient8_srcportE+0xc>
    556e:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <_ZN14EthernetClient8_srcportE+0xd>
    5572:	a0 91 58 01 	lds	r26, 0x0158	; 0x800158 <_ZN14EthernetClient8_srcportE+0xe>
    5576:	b0 91 59 01 	lds	r27, 0x0159	; 0x800159 <_ZN14EthernetClient8_srcportE+0xf>
    557a:	89 83       	std	Y+1, r24	; 0x01
    557c:	9a 83       	std	Y+2, r25	; 0x02
    557e:	ab 83       	std	Y+3, r26	; 0x03
    5580:	bc 83       	std	Y+4, r27	; 0x04
    5582:	87 81       	ldd	r24, Z+7	; 0x07
    5584:	48 17       	cp	r20, r24
    5586:	10 f0       	brcs	.+4      	; 0x558c <_ZN3LCD9setCursorEhh+0x50>
    5588:	4f ef       	ldi	r20, 0xFF	; 255
    558a:	48 0f       	add	r20, r24
    558c:	90 85       	ldd	r25, Z+8	; 0x08
    558e:	50 e0       	ldi	r21, 0x00	; 0
    5590:	de 01       	movw	r26, r28
    5592:	a4 0f       	add	r26, r20
    5594:	b5 1f       	adc	r27, r21
    5596:	90 31       	cpi	r25, 0x10	; 16
    5598:	29 f4       	brne	.+10     	; 0x55a4 <_ZN3LCD9setCursorEhh+0x68>
    559a:	84 30       	cpi	r24, 0x04	; 4
    559c:	19 f4       	brne	.+6      	; 0x55a4 <_ZN3LCD9setCursorEhh+0x68>
    559e:	11 96       	adiw	r26, 0x01	; 1
    55a0:	9c 91       	ld	r25, X
    55a2:	02 c0       	rjmp	.+4      	; 0x55a8 <_ZN3LCD9setCursorEhh+0x6c>
    55a4:	15 96       	adiw	r26, 0x05	; 5
    55a6:	9c 91       	ld	r25, X
    55a8:	69 0f       	add	r22, r25
    55aa:	60 68       	ori	r22, 0x80	; 128
    55ac:	cf 01       	movw	r24, r30
    55ae:	28 96       	adiw	r28, 0x08	; 8
    55b0:	0f b6       	in	r0, 0x3f	; 63
    55b2:	f8 94       	cli
    55b4:	de bf       	out	0x3e, r29	; 62
    55b6:	0f be       	out	0x3f, r0	; 63
    55b8:	cd bf       	out	0x3d, r28	; 61
    55ba:	df 91       	pop	r29
    55bc:	cf 91       	pop	r28
    55be:	b0 cf       	rjmp	.-160    	; 0x5520 <_ZN3LCD7commandEh>

000055c0 <_ZN3LCD9noDisplayEv>:
    55c0:	fc 01       	movw	r30, r24
    55c2:	65 81       	ldd	r22, Z+5	; 0x05
    55c4:	6b 7f       	andi	r22, 0xFB	; 251
    55c6:	65 83       	std	Z+5, r22	; 0x05
    55c8:	68 60       	ori	r22, 0x08	; 8
    55ca:	aa cf       	rjmp	.-172    	; 0x5520 <_ZN3LCD7commandEh>

000055cc <_ZN3LCD7displayEv>:
    55cc:	fc 01       	movw	r30, r24
    55ce:	65 81       	ldd	r22, Z+5	; 0x05
    55d0:	26 2f       	mov	r18, r22
    55d2:	24 60       	ori	r18, 0x04	; 4
    55d4:	25 83       	std	Z+5, r18	; 0x05
    55d6:	6c 60       	ori	r22, 0x0C	; 12
    55d8:	a3 cf       	rjmp	.-186    	; 0x5520 <_ZN3LCD7commandEh>

000055da <_ZN3LCD5beginEhhh>:
    55da:	cf 93       	push	r28
    55dc:	df 93       	push	r29
    55de:	ec 01       	movw	r28, r24
    55e0:	42 30       	cpi	r20, 0x02	; 2
    55e2:	18 f0       	brcs	.+6      	; 0x55ea <_ZN3LCD5beginEhhh+0x10>
    55e4:	8c 81       	ldd	r24, Y+4	; 0x04
    55e6:	88 60       	ori	r24, 0x08	; 8
    55e8:	8c 83       	std	Y+4, r24	; 0x04
    55ea:	4f 83       	std	Y+7, r20	; 0x07
    55ec:	68 87       	std	Y+8, r22	; 0x08
    55ee:	22 23       	and	r18, r18
    55f0:	29 f0       	breq	.+10     	; 0x55fc <_ZN3LCD5beginEhhh+0x22>
    55f2:	41 30       	cpi	r20, 0x01	; 1
    55f4:	19 f4       	brne	.+6      	; 0x55fc <_ZN3LCD5beginEhhh+0x22>
    55f6:	8c 81       	ldd	r24, Y+4	; 0x04
    55f8:	84 60       	ori	r24, 0x04	; 4
    55fa:	8c 83       	std	Y+4, r24	; 0x04
    55fc:	64 e6       	ldi	r22, 0x64	; 100
    55fe:	70 e0       	ldi	r23, 0x00	; 0
    5600:	80 e0       	ldi	r24, 0x00	; 0
    5602:	90 e0       	ldi	r25, 0x00	; 0
    5604:	0e 94 3d 3c 	call	0x787a	; 0x787a <delay>
    5608:	6c 81       	ldd	r22, Y+4	; 0x04
    560a:	64 fd       	sbrc	r22, 4
    560c:	31 c0       	rjmp	.+98     	; 0x5670 <_ZN3LCD5beginEhhh+0x96>
    560e:	e8 81       	ld	r30, Y
    5610:	f9 81       	ldd	r31, Y+1	; 0x01
    5612:	06 84       	ldd	r0, Z+14	; 0x0e
    5614:	f7 85       	ldd	r31, Z+15	; 0x0f
    5616:	e0 2d       	mov	r30, r0
    5618:	42 e0       	ldi	r20, 0x02	; 2
    561a:	63 e0       	ldi	r22, 0x03	; 3
    561c:	ce 01       	movw	r24, r28
    561e:	09 95       	icall
    5620:	84 e9       	ldi	r24, 0x94	; 148
    5622:	91 e1       	ldi	r25, 0x11	; 17
    5624:	0e 94 76 3c 	call	0x78ec	; 0x78ec <delayMicroseconds>
    5628:	e8 81       	ld	r30, Y
    562a:	f9 81       	ldd	r31, Y+1	; 0x01
    562c:	06 84       	ldd	r0, Z+14	; 0x0e
    562e:	f7 85       	ldd	r31, Z+15	; 0x0f
    5630:	e0 2d       	mov	r30, r0
    5632:	42 e0       	ldi	r20, 0x02	; 2
    5634:	63 e0       	ldi	r22, 0x03	; 3
    5636:	ce 01       	movw	r24, r28
    5638:	09 95       	icall
    563a:	86 e9       	ldi	r24, 0x96	; 150
    563c:	90 e0       	ldi	r25, 0x00	; 0
    563e:	0e 94 76 3c 	call	0x78ec	; 0x78ec <delayMicroseconds>
    5642:	e8 81       	ld	r30, Y
    5644:	f9 81       	ldd	r31, Y+1	; 0x01
    5646:	06 84       	ldd	r0, Z+14	; 0x0e
    5648:	f7 85       	ldd	r31, Z+15	; 0x0f
    564a:	e0 2d       	mov	r30, r0
    564c:	42 e0       	ldi	r20, 0x02	; 2
    564e:	63 e0       	ldi	r22, 0x03	; 3
    5650:	ce 01       	movw	r24, r28
    5652:	09 95       	icall
    5654:	86 e9       	ldi	r24, 0x96	; 150
    5656:	90 e0       	ldi	r25, 0x00	; 0
    5658:	0e 94 76 3c 	call	0x78ec	; 0x78ec <delayMicroseconds>
    565c:	e8 81       	ld	r30, Y
    565e:	f9 81       	ldd	r31, Y+1	; 0x01
    5660:	06 84       	ldd	r0, Z+14	; 0x0e
    5662:	f7 85       	ldd	r31, Z+15	; 0x0f
    5664:	e0 2d       	mov	r30, r0
    5666:	42 e0       	ldi	r20, 0x02	; 2
    5668:	62 e0       	ldi	r22, 0x02	; 2
    566a:	ce 01       	movw	r24, r28
    566c:	09 95       	icall
    566e:	13 c0       	rjmp	.+38     	; 0x5696 <_ZN3LCD5beginEhhh+0xbc>
    5670:	60 62       	ori	r22, 0x20	; 32
    5672:	ce 01       	movw	r24, r28
    5674:	55 df       	rcall	.-342    	; 0x5520 <_ZN3LCD7commandEh>
    5676:	84 e9       	ldi	r24, 0x94	; 148
    5678:	91 e1       	ldi	r25, 0x11	; 17
    567a:	0e 94 76 3c 	call	0x78ec	; 0x78ec <delayMicroseconds>
    567e:	6c 81       	ldd	r22, Y+4	; 0x04
    5680:	60 62       	ori	r22, 0x20	; 32
    5682:	ce 01       	movw	r24, r28
    5684:	4d df       	rcall	.-358    	; 0x5520 <_ZN3LCD7commandEh>
    5686:	86 e9       	ldi	r24, 0x96	; 150
    5688:	90 e0       	ldi	r25, 0x00	; 0
    568a:	0e 94 76 3c 	call	0x78ec	; 0x78ec <delayMicroseconds>
    568e:	6c 81       	ldd	r22, Y+4	; 0x04
    5690:	60 62       	ori	r22, 0x20	; 32
    5692:	ce 01       	movw	r24, r28
    5694:	45 df       	rcall	.-374    	; 0x5520 <_ZN3LCD7commandEh>
    5696:	86 e9       	ldi	r24, 0x96	; 150
    5698:	90 e0       	ldi	r25, 0x00	; 0
    569a:	0e 94 76 3c 	call	0x78ec	; 0x78ec <delayMicroseconds>
    569e:	6c 81       	ldd	r22, Y+4	; 0x04
    56a0:	60 62       	ori	r22, 0x20	; 32
    56a2:	ce 01       	movw	r24, r28
    56a4:	3d df       	rcall	.-390    	; 0x5520 <_ZN3LCD7commandEh>
    56a6:	8c e3       	ldi	r24, 0x3C	; 60
    56a8:	90 e0       	ldi	r25, 0x00	; 0
    56aa:	0e 94 76 3c 	call	0x78ec	; 0x78ec <delayMicroseconds>
    56ae:	84 e0       	ldi	r24, 0x04	; 4
    56b0:	8d 83       	std	Y+5, r24	; 0x05
    56b2:	ce 01       	movw	r24, r28
    56b4:	8b df       	rcall	.-234    	; 0x55cc <_ZN3LCD7displayEv>
    56b6:	ce 01       	movw	r24, r28
    56b8:	3b df       	rcall	.-394    	; 0x5530 <_ZN3LCD5clearEv>
    56ba:	82 e0       	ldi	r24, 0x02	; 2
    56bc:	8e 83       	std	Y+6, r24	; 0x06
    56be:	66 e0       	ldi	r22, 0x06	; 6
    56c0:	ce 01       	movw	r24, r28
    56c2:	2e df       	rcall	.-420    	; 0x5520 <_ZN3LCD7commandEh>
    56c4:	ce 01       	movw	r24, r28
    56c6:	df 91       	pop	r29
    56c8:	cf 91       	pop	r28
    56ca:	1a cf       	rjmp	.-460    	; 0x5500 <_ZN3LCD9backlightEv>

000056cc <_ZN3LCD10createCharEhPh>:
}

// Write to CGRAM of new characters
void LCD::createChar(uint8_t location, uint8_t charmap[]) 
{
    56cc:	ef 92       	push	r14
    56ce:	ff 92       	push	r15
    56d0:	0f 93       	push	r16
    56d2:	1f 93       	push	r17
    56d4:	cf 93       	push	r28
    56d6:	df 93       	push	r29
    56d8:	8c 01       	movw	r16, r24
    56da:	7a 01       	movw	r14, r20
   location &= 0x7;            // we only have 8 locations 0-7
   
   command(LCD_SETCGRAMADDR | (location << 3));
    56dc:	67 70       	andi	r22, 0x07	; 7
    56de:	88 e0       	ldi	r24, 0x08	; 8
    56e0:	68 9f       	mul	r22, r24
    56e2:	b0 01       	movw	r22, r0
    56e4:	11 24       	eor	r1, r1
    56e6:	60 64       	ori	r22, 0x40	; 64
    56e8:	c8 01       	movw	r24, r16
    56ea:	1a df       	rcall	.-460    	; 0x5520 <_ZN3LCD7commandEh>
   delayMicroseconds(30);
    56ec:	8e e1       	ldi	r24, 0x1E	; 30
    56ee:	90 e0       	ldi	r25, 0x00	; 0
    56f0:	0e 94 76 3c 	call	0x78ec	; 0x78ec <delayMicroseconds>
    56f4:	e7 01       	movw	r28, r14
    56f6:	a8 e0       	ldi	r26, 0x08	; 8
    56f8:	ea 0e       	add	r14, r26
    56fa:	f1 1c       	adc	r15, r1
   
   for (uint8_t i = 0; i < 8; i++)
   {
      write(charmap[i]);      // call the virtual write method
    56fc:	69 91       	ld	r22, Y+
    56fe:	d8 01       	movw	r26, r16
    5700:	ed 91       	ld	r30, X+
    5702:	fc 91       	ld	r31, X
    5704:	01 90       	ld	r0, Z+
    5706:	f0 81       	ld	r31, Z
    5708:	e0 2d       	mov	r30, r0
    570a:	c8 01       	movw	r24, r16
    570c:	09 95       	icall
      delayMicroseconds(40);
    570e:	88 e2       	ldi	r24, 0x28	; 40
    5710:	90 e0       	ldi	r25, 0x00	; 0
    5712:	0e 94 76 3c 	call	0x78ec	; 0x78ec <delayMicroseconds>
   location &= 0x7;            // we only have 8 locations 0-7
   
   command(LCD_SETCGRAMADDR | (location << 3));
   delayMicroseconds(30);
   
   for (uint8_t i = 0; i < 8; i++)
    5716:	ce 15       	cp	r28, r14
    5718:	df 05       	cpc	r29, r15
    571a:	81 f7       	brne	.-32     	; 0x56fc <_ZN3LCD10createCharEhPh+0x30>
   {
      write(charmap[i]);      // call the virtual write method
      delayMicroseconds(40);
   }
}
    571c:	df 91       	pop	r29
    571e:	cf 91       	pop	r28
    5720:	1f 91       	pop	r17
    5722:	0f 91       	pop	r16
    5724:	ff 90       	pop	r15
    5726:	ef 90       	pop	r14
    5728:	08 95       	ret

0000572a <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol>:
LiquidCrystal_I2C::LiquidCrystal_I2C(uint8_t lcd_Addr, uint8_t En, uint8_t Rw,
                                     uint8_t Rs, uint8_t d4, uint8_t d5,
                                     uint8_t d6, uint8_t d7 )
{
   config(lcd_Addr, En, Rw, Rs, d4, d5, d6, d7);
}
    572a:	21 e0       	ldi	r18, 0x01	; 1
    572c:	01 c0       	rjmp	.+2      	; 0x5730 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol+0x6>
    572e:	22 0f       	add	r18, r18
    5730:	6a 95       	dec	r22
    5732:	ea f7       	brpl	.-6      	; 0x572e <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol+0x4>
    5734:	dc 01       	movw	r26, r24
    5736:	1b 96       	adiw	r26, 0x0b	; 11
    5738:	2c 93       	st	X, r18
    573a:	1b 97       	sbiw	r26, 0x0b	; 11
    573c:	19 96       	adiw	r26, 0x09	; 9
    573e:	4c 93       	st	X, r20
    5740:	19 97       	sbiw	r26, 0x09	; 9
    5742:	ed 91       	ld	r30, X+
    5744:	fc 91       	ld	r31, X
    5746:	04 84       	ldd	r0, Z+12	; 0x0c
    5748:	f5 85       	ldd	r31, Z+13	; 0x0d
    574a:	e0 2d       	mov	r30, r0
    574c:	60 e0       	ldi	r22, 0x00	; 0
    574e:	09 94       	ijmp

00005750 <_ZN17LiquidCrystal_I2C12setBacklightEh>:
    5750:	fc 01       	movw	r30, r24
    5752:	83 85       	ldd	r24, Z+11	; 0x0b
    5754:	88 23       	and	r24, r24
    5756:	89 f0       	breq	.+34     	; 0x577a <_ZN17LiquidCrystal_I2C12setBacklightEh+0x2a>
    5758:	91 85       	ldd	r25, Z+9	; 0x09
    575a:	91 11       	cpse	r25, r1
    575c:	03 c0       	rjmp	.+6      	; 0x5764 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x14>
    575e:	61 11       	cpse	r22, r1
    5760:	05 c0       	rjmp	.+10     	; 0x576c <_ZN17LiquidCrystal_I2C12setBacklightEh+0x1c>
    5762:	06 c0       	rjmp	.+12     	; 0x5770 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    5764:	91 30       	cpi	r25, 0x01	; 1
    5766:	21 f4       	brne	.+8      	; 0x5770 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    5768:	61 11       	cpse	r22, r1
    576a:	02 c0       	rjmp	.+4      	; 0x5770 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    576c:	84 87       	std	Z+12, r24	; 0x0c
    576e:	01 c0       	rjmp	.+2      	; 0x5772 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x22>
    5770:	14 86       	std	Z+12, r1	; 0x0c
    5772:	64 85       	ldd	r22, Z+12	; 0x0c
    5774:	cf 01       	movw	r24, r30
    5776:	0d 96       	adiw	r24, 0x0d	; 13
    5778:	87 ce       	rjmp	.-754    	; 0x5488 <_ZN5I2CIO5writeEh>
    577a:	08 95       	ret

0000577c <_ZN17LiquidCrystal_I2C4initEv>:
    577c:	0f 93       	push	r16
    577e:	1f 93       	push	r17
    5780:	cf 93       	push	r28
    5782:	df 93       	push	r29
    5784:	8c 01       	movw	r16, r24
    5786:	ec 01       	movw	r28, r24
    5788:	2d 96       	adiw	r28, 0x0d	; 13
    578a:	fc 01       	movw	r30, r24
    578c:	62 85       	ldd	r22, Z+10	; 0x0a
    578e:	ce 01       	movw	r24, r28
    5790:	63 de       	rcall	.-826    	; 0x5458 <_ZN5I2CIO5beginEh>
    5792:	01 97       	sbiw	r24, 0x01	; 1
    5794:	59 f4       	brne	.+22     	; 0x57ac <_ZN17LiquidCrystal_I2C4initEv+0x30>
    5796:	61 e0       	ldi	r22, 0x01	; 1
    5798:	ce 01       	movw	r24, r28
    579a:	46 de       	rcall	.-884    	; 0x5428 <_ZN5I2CIO8portModeEh>
    579c:	f8 01       	movw	r30, r16
    579e:	14 82       	std	Z+4, r1	; 0x04
    57a0:	60 e0       	ldi	r22, 0x00	; 0
    57a2:	ce 01       	movw	r24, r28
    57a4:	71 de       	rcall	.-798    	; 0x5488 <_ZN5I2CIO5writeEh>
    57a6:	81 e0       	ldi	r24, 0x01	; 1
    57a8:	90 e0       	ldi	r25, 0x00	; 0
    57aa:	02 c0       	rjmp	.+4      	; 0x57b0 <_ZN17LiquidCrystal_I2C4initEv+0x34>
    57ac:	80 e0       	ldi	r24, 0x00	; 0
    57ae:	90 e0       	ldi	r25, 0x00	; 0
    57b0:	df 91       	pop	r29
    57b2:	cf 91       	pop	r28
    57b4:	1f 91       	pop	r17
    57b6:	0f 91       	pop	r16
    57b8:	08 95       	ret

000057ba <_ZN17LiquidCrystal_I2C6configEhhhhhhhh>:
    57ba:	8f 92       	push	r8
    57bc:	af 92       	push	r10
    57be:	cf 92       	push	r12
    57c0:	ef 92       	push	r14
    57c2:	0f 93       	push	r16
    57c4:	cf 93       	push	r28
    57c6:	df 93       	push	r29
    57c8:	cd b7       	in	r28, 0x3d	; 61
    57ca:	de b7       	in	r29, 0x3e	; 62
    57cc:	fc 01       	movw	r30, r24
    57ce:	62 87       	std	Z+10, r22	; 0x0a
    57d0:	13 86       	std	Z+11, r1	; 0x0b
    57d2:	14 86       	std	Z+12, r1	; 0x0c
    57d4:	11 86       	std	Z+9, r1	; 0x09
    57d6:	81 e0       	ldi	r24, 0x01	; 1
    57d8:	98 2f       	mov	r25, r24
    57da:	01 c0       	rjmp	.+2      	; 0x57de <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x24>
    57dc:	99 0f       	add	r25, r25
    57de:	4a 95       	dec	r20
    57e0:	ea f7       	brpl	.-6      	; 0x57dc <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x22>
    57e2:	91 8b       	std	Z+17, r25	; 0x11
    57e4:	98 2f       	mov	r25, r24
    57e6:	01 c0       	rjmp	.+2      	; 0x57ea <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x30>
    57e8:	99 0f       	add	r25, r25
    57ea:	2a 95       	dec	r18
    57ec:	ea f7       	brpl	.-6      	; 0x57e8 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x2e>
    57ee:	92 8b       	std	Z+18, r25	; 0x12
    57f0:	98 2f       	mov	r25, r24
    57f2:	01 c0       	rjmp	.+2      	; 0x57f6 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x3c>
    57f4:	99 0f       	add	r25, r25
    57f6:	0a 95       	dec	r16
    57f8:	ea f7       	brpl	.-6      	; 0x57f4 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x3a>
    57fa:	93 8b       	std	Z+19, r25	; 0x13
    57fc:	98 2f       	mov	r25, r24
    57fe:	01 c0       	rjmp	.+2      	; 0x5802 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x48>
    5800:	99 0f       	add	r25, r25
    5802:	ea 94       	dec	r14
    5804:	ea f7       	brpl	.-6      	; 0x5800 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x46>
    5806:	94 8b       	std	Z+20, r25	; 0x14
    5808:	98 2f       	mov	r25, r24
    580a:	01 c0       	rjmp	.+2      	; 0x580e <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x54>
    580c:	99 0f       	add	r25, r25
    580e:	ca 94       	dec	r12
    5810:	ea f7       	brpl	.-6      	; 0x580c <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x52>
    5812:	95 8b       	std	Z+21, r25	; 0x15
    5814:	98 2f       	mov	r25, r24
    5816:	01 c0       	rjmp	.+2      	; 0x581a <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x60>
    5818:	99 0f       	add	r25, r25
    581a:	aa 94       	dec	r10
    581c:	ea f7       	brpl	.-6      	; 0x5818 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x5e>
    581e:	96 8b       	std	Z+22, r25	; 0x16
    5820:	01 c0       	rjmp	.+2      	; 0x5824 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x6a>
    5822:	88 0f       	add	r24, r24
    5824:	8a 94       	dec	r8
    5826:	ea f7       	brpl	.-6      	; 0x5822 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x68>
    5828:	87 8b       	std	Z+23, r24	; 0x17
    582a:	df 91       	pop	r29
    582c:	cf 91       	pop	r28
    582e:	0f 91       	pop	r16
    5830:	ef 90       	pop	r14
    5832:	cf 90       	pop	r12
    5834:	af 90       	pop	r10
    5836:	8f 90       	pop	r8
    5838:	08 95       	ret

0000583a <_ZN17LiquidCrystal_I2CC1Ehhhhhhhhh13t_backlighPol>:

LiquidCrystal_I2C::LiquidCrystal_I2C(uint8_t lcd_Addr, uint8_t En, uint8_t Rw,
    583a:	6f 92       	push	r6
    583c:	7f 92       	push	r7
    583e:	8f 92       	push	r8
    5840:	9f 92       	push	r9
    5842:	af 92       	push	r10
    5844:	bf 92       	push	r11
    5846:	cf 92       	push	r12
    5848:	df 92       	push	r13
    584a:	ef 92       	push	r14
    584c:	ff 92       	push	r15
    584e:	0f 93       	push	r16
    5850:	1f 93       	push	r17
    5852:	cf 93       	push	r28
    5854:	df 93       	push	r29
    5856:	cd b7       	in	r28, 0x3d	; 61
    5858:	de b7       	in	r29, 0x3e	; 62
    585a:	3c 01       	movw	r6, r24
    585c:	d6 2e       	mov	r13, r22
    585e:	b4 2e       	mov	r11, r20
    5860:	92 2e       	mov	r9, r18
    5862:	19 89       	ldd	r17, Y+17	; 0x11
    5864:	fa 88       	ldd	r15, Y+18	; 0x12
                                     uint8_t Rs, uint8_t d4, uint8_t d5,
                                     uint8_t d6, uint8_t d7, uint8_t backlighPin, 
                                     t_backlighPol pol = POSITIVE )
    5866:	44 de       	rcall	.-888    	; 0x54f0 <_ZN3LCDC1Ev>
    5868:	84 e3       	ldi	r24, 0x34	; 52
    586a:	99 e0       	ldi	r25, 0x09	; 9
    586c:	f3 01       	movw	r30, r6
    586e:	91 83       	std	Z+1, r25	; 0x01
    5870:	80 83       	st	Z, r24
    5872:	c3 01       	movw	r24, r6
    5874:	0d 96       	adiw	r24, 0x0d	; 13
    5876:	d1 dd       	rcall	.-1118   	; 0x541a <_ZN5I2CIOC1Ev>
{
   config(lcd_Addr, En, Rw, Rs, d4, d5, d6, d7);
    5878:	29 2d       	mov	r18, r9
    587a:	4b 2d       	mov	r20, r11
    587c:	6d 2d       	mov	r22, r13
    587e:	c3 01       	movw	r24, r6
    5880:	9c df       	rcall	.-200    	; 0x57ba <_ZN17LiquidCrystal_I2C6configEhhhhhhhh>
   setBacklightPin(backlighPin, pol);
    5882:	4f 2d       	mov	r20, r15
    5884:	61 2f       	mov	r22, r17
    5886:	c3 01       	movw	r24, r6
}
    5888:	df 91       	pop	r29
    588a:	cf 91       	pop	r28
    588c:	1f 91       	pop	r17
    588e:	0f 91       	pop	r16
    5890:	ff 90       	pop	r15
    5892:	ef 90       	pop	r14
    5894:	df 90       	pop	r13
    5896:	cf 90       	pop	r12
    5898:	bf 90       	pop	r11
    589a:	af 90       	pop	r10
    589c:	9f 90       	pop	r9
    589e:	8f 90       	pop	r8
    58a0:	7f 90       	pop	r7
                                     uint8_t Rs, uint8_t d4, uint8_t d5,
                                     uint8_t d6, uint8_t d7, uint8_t backlighPin, 
                                     t_backlighPol pol = POSITIVE )
{
   config(lcd_Addr, En, Rw, Rs, d4, d5, d6, d7);
   setBacklightPin(backlighPin, pol);
    58a2:	6f 90       	pop	r6
    58a4:	42 cf       	rjmp	.-380    	; 0x572a <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol>

000058a6 <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
}

//
// pulseEnable
void LiquidCrystal_I2C::pulseEnable (uint8_t data)
{
    58a6:	ef 92       	push	r14
    58a8:	ff 92       	push	r15
    58aa:	0f 93       	push	r16
    58ac:	1f 93       	push	r17
    58ae:	cf 93       	push	r28
    58b0:	8c 01       	movw	r16, r24
    58b2:	c6 2f       	mov	r28, r22
   _i2cio.write (data | _En);   // En HIGH
    58b4:	7c 01       	movw	r14, r24
    58b6:	8d e0       	ldi	r24, 0x0D	; 13
    58b8:	e8 0e       	add	r14, r24
    58ba:	f1 1c       	adc	r15, r1
    58bc:	f8 01       	movw	r30, r16
    58be:	61 89       	ldd	r22, Z+17	; 0x11
    58c0:	6c 2b       	or	r22, r28
    58c2:	c7 01       	movw	r24, r14
    58c4:	e1 dd       	rcall	.-1086   	; 0x5488 <_ZN5I2CIO5writeEh>
   _i2cio.write (data & ~_En);  // En LOW
    58c6:	f8 01       	movw	r30, r16
    58c8:	61 89       	ldd	r22, Z+17	; 0x11
    58ca:	60 95       	com	r22
    58cc:	6c 23       	and	r22, r28
    58ce:	c7 01       	movw	r24, r14
    58d0:	cf 91       	pop	r28
    58d2:	1f 91       	pop	r17
    58d4:	0f 91       	pop	r16
    58d6:	ff 90       	pop	r15
//
// pulseEnable
void LiquidCrystal_I2C::pulseEnable (uint8_t data)
{
   _i2cio.write (data | _En);   // En HIGH
   _i2cio.write (data & ~_En);  // En LOW
    58d8:	ef 90       	pop	r14
    58da:	d6 cd       	rjmp	.-1108   	; 0x5488 <_ZN5I2CIO5writeEh>

000058dc <_ZN17LiquidCrystal_I2C10write4bitsEhh>:
}

//
// write4bits
void LiquidCrystal_I2C::write4bits ( uint8_t value, uint8_t mode ) 
{
    58dc:	fc 01       	movw	r30, r24
    58de:	96 2f       	mov	r25, r22
    58e0:	df 01       	movw	r26, r30
    58e2:	84 e0       	ldi	r24, 0x04	; 4
   uint8_t pinMapValue = 0;
    58e4:	60 e0       	ldi	r22, 0x00	; 0
   
   // Map the value to LCD pin mapping
   // --------------------------------
   for ( uint8_t i = 0; i < 4; i++ )
   {
      if ( ( value & 0x1 ) == 1 )
    58e6:	90 ff       	sbrs	r25, 0
    58e8:	04 c0       	rjmp	.+8      	; 0x58f2 <_ZN17LiquidCrystal_I2C10write4bitsEhh+0x16>
      {
         pinMapValue |= _data_pins[i];
    58ea:	54 96       	adiw	r26, 0x14	; 20
    58ec:	2c 91       	ld	r18, X
    58ee:	54 97       	sbiw	r26, 0x14	; 20
    58f0:	62 2b       	or	r22, r18
      }
      value = ( value >> 1 );
    58f2:	96 95       	lsr	r25
    58f4:	81 50       	subi	r24, 0x01	; 1
    58f6:	11 96       	adiw	r26, 0x01	; 1
{
   uint8_t pinMapValue = 0;
   
   // Map the value to LCD pin mapping
   // --------------------------------
   for ( uint8_t i = 0; i < 4; i++ )
    58f8:	81 11       	cpse	r24, r1
    58fa:	f5 cf       	rjmp	.-22     	; 0x58e6 <_ZN17LiquidCrystal_I2C10write4bitsEhh+0xa>
      value = ( value >> 1 );
   }
   
   // Is it a command or data
   // -----------------------
   if ( mode == DATA )
    58fc:	41 30       	cpi	r20, 0x01	; 1
    58fe:	09 f4       	brne	.+2      	; 0x5902 <_ZN17LiquidCrystal_I2C10write4bitsEhh+0x26>
   {
      mode = _Rs;
    5900:	43 89       	ldd	r20, Z+19	; 0x13
    5902:	94 85       	ldd	r25, Z+12	; 0x0c
    5904:	69 2b       	or	r22, r25
   }
   
   pinMapValue |= mode | _backlightStsMask;
   pulseEnable ( pinMapValue );
    5906:	64 2b       	or	r22, r20
    5908:	cf 01       	movw	r24, r30
    590a:	cd cf       	rjmp	.-102    	; 0x58a6 <_ZN17LiquidCrystal_I2C11pulseEnableEh>

0000590c <_ZN17LiquidCrystal_I2C4sendEhh>:
//----------------------------------------------------------------------------

//
// send - write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) 
{
    590c:	0f 93       	push	r16
    590e:	1f 93       	push	r17
    5910:	cf 93       	push	r28
    5912:	df 93       	push	r29
    5914:	06 2f       	mov	r16, r22
    5916:	0f 70       	andi	r16, 0x0F	; 15
   // No need to use the delay routines since the time taken to write takes
   // longer that what is needed both for toggling and enable pin an to execute
   // the command.
   
   if ( mode == FOUR_BITS )
    5918:	42 30       	cpi	r20, 0x02	; 2
    591a:	19 f4       	brne	.+6      	; 0x5922 <_ZN17LiquidCrystal_I2C4sendEhh+0x16>
   {
      write4bits( (value & 0x0F), COMMAND );
    591c:	40 e0       	ldi	r20, 0x00	; 0
    591e:	60 2f       	mov	r22, r16
    5920:	0d c0       	rjmp	.+26     	; 0x593c <_ZN17LiquidCrystal_I2C4sendEhh+0x30>
    5922:	14 2f       	mov	r17, r20
    5924:	ec 01       	movw	r28, r24
   }
   else 
   {
      write4bits( (value >> 4), mode );
    5926:	70 e0       	ldi	r23, 0x00	; 0
    5928:	84 e0       	ldi	r24, 0x04	; 4
    592a:	75 95       	asr	r23
    592c:	67 95       	ror	r22
    592e:	8a 95       	dec	r24
    5930:	e1 f7       	brne	.-8      	; 0x592a <_ZN17LiquidCrystal_I2C4sendEhh+0x1e>
    5932:	ce 01       	movw	r24, r28
    5934:	d3 df       	rcall	.-90     	; 0x58dc <_ZN17LiquidCrystal_I2C10write4bitsEhh>
      write4bits( (value & 0x0F), mode);
    5936:	41 2f       	mov	r20, r17
    5938:	60 2f       	mov	r22, r16
    593a:	ce 01       	movw	r24, r28
   }
}
    593c:	df 91       	pop	r29
    593e:	cf 91       	pop	r28
    5940:	1f 91       	pop	r17
      write4bits( (value & 0x0F), COMMAND );
   }
   else 
   {
      write4bits( (value >> 4), mode );
      write4bits( (value & 0x0F), mode);
    5942:	0f 91       	pop	r16
    5944:	cb cf       	rjmp	.-106    	; 0x58dc <_ZN17LiquidCrystal_I2C10write4bitsEhh>

00005946 <_ZN17LiquidCrystal_I2C5beginEhhh>:
// ---------------------------------------------------------------------------

//
// begin
void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) 
{
    5946:	ff 92       	push	r15
    5948:	0f 93       	push	r16
    594a:	1f 93       	push	r17
    594c:	cf 93       	push	r28
    594e:	df 93       	push	r29
    5950:	ec 01       	movw	r28, r24
    5952:	16 2f       	mov	r17, r22
    5954:	04 2f       	mov	r16, r20
    5956:	f2 2e       	mov	r15, r18
   
   init();     // Initialise the I2C expander interface
    5958:	11 df       	rcall	.-478    	; 0x577c <_ZN17LiquidCrystal_I2C4initEv>
   LCD::begin ( cols, lines, dotsize );   
    595a:	2f 2d       	mov	r18, r15
    595c:	40 2f       	mov	r20, r16
    595e:	61 2f       	mov	r22, r17
    5960:	ce 01       	movw	r24, r28
}
    5962:	df 91       	pop	r29
    5964:	cf 91       	pop	r28
    5966:	1f 91       	pop	r17
    5968:	0f 91       	pop	r16
// begin
void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) 
{
   
   init();     // Initialise the I2C expander interface
   LCD::begin ( cols, lines, dotsize );   
    596a:	ff 90       	pop	r15
    596c:	36 ce       	rjmp	.-916    	; 0x55da <_ZN3LCD5beginEhhh>

0000596e <_ZN11Diagnostics15_printErrorCodeEv>:
  Serial.println(errorcode, HEX);
}

void Diagnostics::_printSupportLink(void) {
  Serial.print(F("If this does not help resolve/clarify this issue, "));
  Serial.println(F("please raise an issue at http://www.github.com/Marzogh/SPIMemory/issues with the details of what your were doing when this error occurred"));
    596e:	cf 93       	push	r28
    5970:	df 93       	push	r29
    5972:	ec 01       	movw	r28, r24
    5974:	6b e2       	ldi	r22, 0x2B	; 43
    5976:	72 e0       	ldi	r23, 0x02	; 2
    5978:	8f e4       	ldi	r24, 0x4F	; 79
    597a:	9d e0       	ldi	r25, 0x0D	; 13
    597c:	0e 94 dc 3a 	call	0x75b8	; 0x75b8 <_ZN5Print5printEPK19__FlashStringHelper>
    5980:	88 81       	ld	r24, Y
    5982:	80 31       	cpi	r24, 0x10	; 16
    5984:	30 f4       	brcc	.+12     	; 0x5992 <_ZN11Diagnostics15_printErrorCodeEv+0x24>
    5986:	69 e2       	ldi	r22, 0x29	; 41
    5988:	72 e0       	ldi	r23, 0x02	; 2
    598a:	8f e4       	ldi	r24, 0x4F	; 79
    598c:	9d e0       	ldi	r25, 0x0D	; 13
    598e:	0e 94 dc 3a 	call	0x75b8	; 0x75b8 <_ZN5Print5printEPK19__FlashStringHelper>
    5992:	40 e1       	ldi	r20, 0x10	; 16
    5994:	50 e0       	ldi	r21, 0x00	; 0
    5996:	68 81       	ld	r22, Y
    5998:	8f e4       	ldi	r24, 0x4F	; 79
    599a:	9d e0       	ldi	r25, 0x0D	; 13
    599c:	df 91       	pop	r29
    599e:	cf 91       	pop	r28
    59a0:	0c 94 a2 3b 	jmp	0x7744	; 0x7744 <_ZN5Print7printlnEhi>

000059a4 <_ZN11Diagnostics12troubleshootEhb>:
}
//Troubleshooting function. Called when #ifdef RUNDIAGNOSTIC is uncommented at the top of SPIMemory.h.
void Diagnostics::troubleshoot(uint8_t _code, bool printoverride) {
  bool _printoverride;
  errorcode = _code;
    59a4:	fc 01       	movw	r30, r24
    59a6:	60 83       	st	Z, r22
  _printErrorCode();
#endif
#if !defined (RUNDIAGNOSTIC)
  _printoverride = printoverride;
#endif
  if (_printoverride) {
    59a8:	41 11       	cpse	r20, r1
  #if defined (ARDUINO_ARCH_AVR)
    _printErrorCode();
    59aa:	e1 cf       	rjmp	.-62     	; 0x596e <_ZN11Diagnostics15_printErrorCodeEv>
    59ac:	08 95       	ret

000059ae <_ZN8SPIFlashC1Eh>:

	if(_notBusy(10) || !_noSuspend()) {
    return false;
  }
  return true;
}
    59ae:	cf 93       	push	r28
    59b0:	df 93       	push	r29
    59b2:	ec 01       	movw	r28, r24
    59b4:	80 e5       	ldi	r24, 0x50	; 80
    59b6:	88 83       	st	Y, r24
    59b8:	19 82       	std	Y+1, r1	; 0x01
    59ba:	1a 82       	std	Y+2, r1	; 0x02
    59bc:	8f ef       	ldi	r24, 0xFF	; 255
    59be:	8e 83       	std	Y+6, r24	; 0x06
    59c0:	8f 83       	std	Y+7, r24	; 0x07
    59c2:	88 87       	std	Y+8, r24	; 0x08
    59c4:	89 87       	std	Y+9, r24	; 0x09
    59c6:	1e 86       	std	Y+14, r1	; 0x0e
    59c8:	1f 86       	std	Y+15, r1	; 0x0f
    59ca:	18 8a       	std	Y+16, r1	; 0x10
    59cc:	19 8a       	std	Y+17, r1	; 0x11
    59ce:	82 e5       	ldi	r24, 0x52	; 82
    59d0:	8c 8f       	std	Y+28, r24	; 0x1c
    59d2:	87 e5       	ldi	r24, 0x57	; 87
    59d4:	8d 8f       	std	Y+29, r24	; 0x1d
    59d6:	1e 8e       	std	Y+30, r1	; 0x1e
    59d8:	1f 8e       	std	Y+31, r1	; 0x1f
    59da:	18 a2       	std	Y+32, r1	; 0x20
    59dc:	19 a2       	std	Y+33, r1	; 0x21
    59de:	fe 01       	movw	r30, r28
    59e0:	e6 5a       	subi	r30, 0xA6	; 166
    59e2:	ff 4f       	sbci	r31, 0xFF	; 255
    59e4:	10 82       	st	Z, r1
    59e6:	11 82       	std	Z+1, r1	; 0x01
    59e8:	12 82       	std	Z+2, r1	; 0x02
    59ea:	13 82       	std	Z+3, r1	; 0x03
    59ec:	34 96       	adiw	r30, 0x04	; 4
    59ee:	10 82       	st	Z, r1
    59f0:	11 82       	std	Z+1, r1	; 0x01
    59f2:	12 82       	std	Z+2, r1	; 0x02
    59f4:	13 82       	std	Z+3, r1	; 0x03
    59f6:	de 01       	movw	r26, r28
    59f8:	a2 58       	subi	r26, 0x82	; 130
    59fa:	bf 4f       	sbci	r27, 0xFF	; 255
    59fc:	82 e1       	ldi	r24, 0x12	; 18
    59fe:	ea e5       	ldi	r30, 0x5A	; 90
    5a00:	f1 e0       	ldi	r31, 0x01	; 1
    5a02:	01 90       	ld	r0, Z+
    5a04:	0d 92       	st	X+, r0
    5a06:	8a 95       	dec	r24
    5a08:	e1 f7       	brne	.-8      	; 0x5a02 <_ZN8SPIFlashC1Eh+0x54>
    5a0a:	de 01       	movw	r26, r28
    5a0c:	a0 57       	subi	r26, 0x70	; 112
    5a0e:	bf 4f       	sbci	r27, 0xFF	; 255
    5a10:	88 e4       	ldi	r24, 0x48	; 72
    5a12:	ec e6       	ldi	r30, 0x6C	; 108
    5a14:	f1 e0       	ldi	r31, 0x01	; 1
    5a16:	01 90       	ld	r0, Z+
    5a18:	0d 92       	st	X+, r0
    5a1a:	8a 95       	dec	r24
    5a1c:	e1 f7       	brne	.-8      	; 0x5a16 <_ZN8SPIFlashC1Eh+0x68>
    5a1e:	de 01       	movw	r26, r28
    5a20:	a8 52       	subi	r26, 0x28	; 40
    5a22:	bf 4f       	sbci	r27, 0xFF	; 255
    5a24:	89 e0       	ldi	r24, 0x09	; 9
    5a26:	e4 eb       	ldi	r30, 0xB4	; 180
    5a28:	f1 e0       	ldi	r31, 0x01	; 1
    5a2a:	01 90       	ld	r0, Z+
    5a2c:	0d 92       	st	X+, r0
    5a2e:	8a 95       	dec	r24
    5a30:	e1 f7       	brne	.-8      	; 0x5a2a <_ZN8SPIFlashC1Eh+0x7c>
    5a32:	fe 01       	movw	r30, r28
    5a34:	ef 51       	subi	r30, 0x1F	; 31
    5a36:	ff 4f       	sbci	r31, 0xFF	; 255
    5a38:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <_ZN14EthernetClient8_srcportE+0x73>
    5a3c:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <_ZN14EthernetClient8_srcportE+0x74>
    5a40:	a0 91 bf 01 	lds	r26, 0x01BF	; 0x8001bf <_ZN14EthernetClient8_srcportE+0x75>
    5a44:	80 83       	st	Z, r24
    5a46:	91 83       	std	Z+1, r25	; 0x01
    5a48:	a2 83       	std	Z+2, r26	; 0x02
    5a4a:	8a e0       	ldi	r24, 0x0A	; 10
    5a4c:	8a 87       	std	Y+10, r24	; 0x0a
    5a4e:	6d 83       	std	Y+5, r22	; 0x05
    5a50:	24 b1       	in	r18, 0x04	; 4
    5a52:	81 e0       	ldi	r24, 0x01	; 1
    5a54:	90 e0       	ldi	r25, 0x00	; 0
    5a56:	01 c0       	rjmp	.+2      	; 0x5a5a <_ZN8SPIFlashC1Eh+0xac>
    5a58:	88 0f       	add	r24, r24
    5a5a:	6a 95       	dec	r22
    5a5c:	ea f7       	brpl	.-6      	; 0x5a58 <_ZN8SPIFlashC1Eh+0xaa>
    5a5e:	82 2b       	or	r24, r18
    5a60:	84 b9       	out	0x04, r24	; 4
    5a62:	2c 9a       	sbi	0x05, 4	; 5
    5a64:	df 91       	pop	r29
    5a66:	cf 91       	pop	r28
    5a68:	08 95       	ret

00005a6a <_ZN8SPIFlash5beginEm>:
    5a6a:	cf 92       	push	r12
    5a6c:	df 92       	push	r13
    5a6e:	ef 92       	push	r14
    5a70:	ff 92       	push	r15
    5a72:	1f 93       	push	r17
    5a74:	cf 93       	push	r28
    5a76:	df 93       	push	r29
    5a78:	ec 01       	movw	r28, r24
    5a7a:	6a 01       	movw	r12, r20
    5a7c:	7b 01       	movw	r14, r22
    5a7e:	8a 85       	ldd	r24, Y+10	; 0x0a
    5a80:	8b 30       	cpi	r24, 0x0B	; 11
    5a82:	09 f0       	breq	.+2      	; 0x5a86 <_ZN8SPIFlash5beginEm+0x1c>
    5a84:	4e d7       	rcall	.+3740   	; 0x6922 <_ZN8SPIClass5beginEv>
    5a86:	8a 81       	ldd	r24, Y+2	; 0x02
    5a88:	81 11       	cpse	r24, r1
    5a8a:	04 c0       	rjmp	.+8      	; 0x5a94 <_ZN8SPIFlash5beginEm+0x2a>
    5a8c:	80 e5       	ldi	r24, 0x50	; 80
    5a8e:	88 83       	st	Y, r24
    5a90:	81 e0       	ldi	r24, 0x01	; 1
    5a92:	89 83       	std	Y+1, r24	; 0x01
    5a94:	b7 01       	movw	r22, r14
    5a96:	a6 01       	movw	r20, r12
    5a98:	ce 01       	movw	r24, r28
    5a9a:	69 d6       	rcall	.+3282   	; 0x676e <_ZN8SPIFlash7_chipIDEm>
    5a9c:	18 2f       	mov	r17, r24
    5a9e:	ce 01       	movw	r24, r28
    5aa0:	04 d5       	rcall	.+2568   	; 0x64aa <_ZN8SPIFlash7_endSPIEv>
    5aa2:	1f 86       	std	Y+15, r1	; 0x0f
    5aa4:	ce 01       	movw	r24, r28
    5aa6:	27 d6       	rcall	.+3150   	; 0x66f6 <_ZN8SPIFlash26_disableGlobalBlockProtectEv>
    5aa8:	81 2f       	mov	r24, r17
    5aaa:	df 91       	pop	r29
    5aac:	cf 91       	pop	r28
    5aae:	1f 91       	pop	r17
    5ab0:	ff 90       	pop	r15
    5ab2:	ef 90       	pop	r14
    5ab4:	df 90       	pop	r13
    5ab6:	cf 90       	pop	r12
    5ab8:	08 95       	ret

00005aba <_ZN8SPIFlash5errorEb>:
    5aba:	66 23       	and	r22, r22
    5abc:	21 f0       	breq	.+8      	; 0x5ac6 <_ZN8SPIFlash5errorEb+0xc>
    5abe:	41 e0       	ldi	r20, 0x01	; 1
    5ac0:	60 91 86 0c 	lds	r22, 0x0C86	; 0x800c86 <diagnostics>
    5ac4:	2b d7       	rcall	.+3670   	; 0x691c <_ZN8SPIFlash13_troubleshootEhb>
    5ac6:	80 91 86 0c 	lds	r24, 0x0C86	; 0x800c86 <diagnostics>
    5aca:	08 95       	ret

00005acc <_ZN8SPIFlash11getCapacityEv>:
    5acc:	fc 01       	movw	r30, r24
    5ace:	60 a5       	ldd	r22, Z+40	; 0x28
    5ad0:	71 a5       	ldd	r23, Z+41	; 0x29
    5ad2:	82 a5       	ldd	r24, Z+42	; 0x2a
    5ad4:	93 a5       	ldd	r25, Z+43	; 0x2b
    5ad6:	08 95       	ret

00005ad8 <_ZN8SPIFlash10getMaxPageEv>:
    5ad8:	fc 01       	movw	r30, r24
    5ada:	ec 5a       	subi	r30, 0xAC	; 172
    5adc:	ff 4f       	sbci	r31, 0xFF	; 255
    5ade:	20 81       	ld	r18, Z
    5ae0:	31 81       	ldd	r19, Z+1	; 0x01
    5ae2:	40 e0       	ldi	r20, 0x00	; 0
    5ae4:	50 e0       	ldi	r21, 0x00	; 0
    5ae6:	fc 01       	movw	r30, r24
    5ae8:	60 a5       	ldd	r22, Z+40	; 0x28
    5aea:	71 a5       	ldd	r23, Z+41	; 0x29
    5aec:	82 a5       	ldd	r24, Z+42	; 0x2a
    5aee:	93 a5       	ldd	r25, Z+43	; 0x2b
    5af0:	0e 94 41 41 	call	0x8282	; 0x8282 <__udivmodsi4>
    5af4:	ca 01       	movw	r24, r20
    5af6:	b9 01       	movw	r22, r18
    5af8:	08 95       	ret

00005afa <_ZN8SPIFlash10getJEDECIDEv>:
    5afa:	fc 01       	movw	r30, r24
    5afc:	65 a1       	ldd	r22, Z+37	; 0x25
    5afe:	76 a1       	ldd	r23, Z+38	; 0x26
    5b00:	76 27       	eor	r23, r22
    5b02:	67 27       	eor	r22, r23
    5b04:	76 27       	eor	r23, r22
    5b06:	cb 01       	movw	r24, r22
    5b08:	a0 e0       	ldi	r26, 0x00	; 0
    5b0a:	b0 e0       	ldi	r27, 0x00	; 0
    5b0c:	ba 2f       	mov	r27, r26
    5b0e:	a9 2f       	mov	r26, r25
    5b10:	98 2f       	mov	r25, r24
    5b12:	88 27       	eor	r24, r24
    5b14:	27 a1       	ldd	r18, Z+39	; 0x27
    5b16:	bc 01       	movw	r22, r24
    5b18:	cd 01       	movw	r24, r26
    5b1a:	62 2b       	or	r22, r18
    5b1c:	08 95       	ret

00005b1e <_ZN8SPIFlash11getUniqueIDEv>:
    5b1e:	6f 92       	push	r6
    5b20:	7f 92       	push	r7
    5b22:	8f 92       	push	r8
    5b24:	9f 92       	push	r9
    5b26:	af 92       	push	r10
    5b28:	bf 92       	push	r11
    5b2a:	cf 92       	push	r12
    5b2c:	df 92       	push	r13
    5b2e:	ef 92       	push	r14
    5b30:	ff 92       	push	r15
    5b32:	0f 93       	push	r16
    5b34:	1f 93       	push	r17
    5b36:	cf 93       	push	r28
    5b38:	df 93       	push	r29
    5b3a:	ec 01       	movw	r28, r24
    5b3c:	40 e0       	ldi	r20, 0x00	; 0
    5b3e:	5a ec       	ldi	r21, 0xCA	; 202
    5b40:	6a e9       	ldi	r22, 0x9A	; 154
    5b42:	7b e3       	ldi	r23, 0x3B	; 59
    5b44:	e5 d4       	rcall	.+2506   	; 0x6510 <_ZN8SPIFlash8_notBusyEm>
    5b46:	88 23       	and	r24, r24
    5b48:	21 f0       	breq	.+8      	; 0x5b52 <_ZN8SPIFlash11getUniqueIDEv+0x34>
    5b4a:	ce 01       	movw	r24, r28
    5b4c:	d4 d4       	rcall	.+2472   	; 0x64f6 <_ZN8SPIFlash18_isChipPoweredDownEv>
    5b4e:	88 23       	and	r24, r24
    5b50:	49 f0       	breq	.+18     	; 0x5b64 <_ZN8SPIFlash11getUniqueIDEv+0x46>
    5b52:	20 e0       	ldi	r18, 0x00	; 0
    5b54:	30 e0       	ldi	r19, 0x00	; 0
    5b56:	40 e0       	ldi	r20, 0x00	; 0
    5b58:	50 e0       	ldi	r21, 0x00	; 0
    5b5a:	60 e0       	ldi	r22, 0x00	; 0
    5b5c:	70 e0       	ldi	r23, 0x00	; 0
    5b5e:	80 e0       	ldi	r24, 0x00	; 0
    5b60:	90 e0       	ldi	r25, 0x00	; 0
    5b62:	43 c0       	rjmp	.+134    	; 0x5bea <_ZN8SPIFlash11getUniqueIDEv+0xcc>
    5b64:	6b e4       	ldi	r22, 0x4B	; 75
    5b66:	ce 01       	movw	r24, r28
    5b68:	20 d4       	rcall	.+2112   	; 0x63aa <_ZN8SPIFlash9_beginSPIEh>
    5b6a:	14 e0       	ldi	r17, 0x04	; 4
    5b6c:	4e ee       	ldi	r20, 0xEE	; 238
    5b6e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    5b70:	ce 01       	movw	r24, r28
    5b72:	87 d4       	rcall	.+2318   	; 0x6482 <_ZN8SPIFlash9_nextByteEch>
    5b74:	11 50       	subi	r17, 0x01	; 1
    5b76:	d1 f7       	brne	.-12     	; 0x5b6c <_ZN8SPIFlash11getUniqueIDEv+0x4e>
    5b78:	88 89       	ldd	r24, Y+16	; 0x10
    5b7a:	88 23       	and	r24, r24
    5b7c:	21 f0       	breq	.+8      	; 0x5b86 <_ZN8SPIFlash11getUniqueIDEv+0x68>
    5b7e:	4e ee       	ldi	r20, 0xEE	; 238
    5b80:	6d 8d       	ldd	r22, Y+29	; 0x1d
    5b82:	ce 01       	movw	r24, r28
    5b84:	7e d4       	rcall	.+2300   	; 0x6482 <_ZN8SPIFlash9_nextByteEch>
    5b86:	4e 01       	movw	r8, r28
    5b88:	86 e7       	ldi	r24, 0x76	; 118
    5b8a:	88 0e       	add	r8, r24
    5b8c:	91 1c       	adc	r9, r1
    5b8e:	3e 01       	movw	r6, r28
    5b90:	ee e7       	ldi	r30, 0x7E	; 126
    5b92:	6e 0e       	add	r6, r30
    5b94:	71 1c       	adc	r7, r1
    5b96:	84 01       	movw	r16, r8
    5b98:	40 e0       	ldi	r20, 0x00	; 0
    5b9a:	6c 8d       	ldd	r22, Y+28	; 0x1c
    5b9c:	ce 01       	movw	r24, r28
    5b9e:	71 d4       	rcall	.+2274   	; 0x6482 <_ZN8SPIFlash9_nextByteEch>
    5ba0:	f8 01       	movw	r30, r16
    5ba2:	81 93       	st	Z+, r24
    5ba4:	8f 01       	movw	r16, r30
    5ba6:	6e 16       	cp	r6, r30
    5ba8:	7f 06       	cpc	r7, r31
    5baa:	b1 f7       	brne	.-20     	; 0x5b98 <_ZN8SPIFlash11getUniqueIDEv+0x7a>
    5bac:	2c 9a       	sbi	0x05, 4	; 5
    5bae:	a1 2c       	mov	r10, r1
    5bb0:	b1 2c       	mov	r11, r1
    5bb2:	c1 2c       	mov	r12, r1
    5bb4:	d1 2c       	mov	r13, r1
    5bb6:	e1 2c       	mov	r14, r1
    5bb8:	f1 2c       	mov	r15, r1
    5bba:	00 e0       	ldi	r16, 0x00	; 0
    5bbc:	10 e0       	ldi	r17, 0x00	; 0
    5bbe:	f4 01       	movw	r30, r8
    5bc0:	21 91       	ld	r18, Z+
    5bc2:	4f 01       	movw	r8, r30
    5bc4:	30 e0       	ldi	r19, 0x00	; 0
    5bc6:	40 e0       	ldi	r20, 0x00	; 0
    5bc8:	50 e0       	ldi	r21, 0x00	; 0
    5bca:	60 e0       	ldi	r22, 0x00	; 0
    5bcc:	70 e0       	ldi	r23, 0x00	; 0
    5bce:	80 e0       	ldi	r24, 0x00	; 0
    5bd0:	90 e0       	ldi	r25, 0x00	; 0
    5bd2:	0e 94 8c 42 	call	0x8518	; 0x8518 <__adddi3>
    5bd6:	08 e0       	ldi	r16, 0x08	; 8
    5bd8:	0e 94 55 42 	call	0x84aa	; 0x84aa <__ashldi3>
    5bdc:	59 01       	movw	r10, r18
    5bde:	6a 01       	movw	r12, r20
    5be0:	7b 01       	movw	r14, r22
    5be2:	8c 01       	movw	r16, r24
    5be4:	e6 15       	cp	r30, r6
    5be6:	f7 05       	cpc	r31, r7
    5be8:	51 f7       	brne	.-44     	; 0x5bbe <_ZN8SPIFlash11getUniqueIDEv+0xa0>
    5bea:	df 91       	pop	r29
    5bec:	cf 91       	pop	r28
    5bee:	1f 91       	pop	r17
    5bf0:	0f 91       	pop	r16
    5bf2:	ff 90       	pop	r15
    5bf4:	ef 90       	pop	r14
    5bf6:	df 90       	pop	r13
    5bf8:	cf 90       	pop	r12
    5bfa:	bf 90       	pop	r11
    5bfc:	af 90       	pop	r10
    5bfe:	9f 90       	pop	r9
    5c00:	8f 90       	pop	r8
    5c02:	7f 90       	pop	r7
    5c04:	6f 90       	pop	r6
    5c06:	08 95       	ret

00005c08 <_ZN8SPIFlash7readStrEmR6Stringb>:
    5c08:	2f 92       	push	r2
    5c0a:	3f 92       	push	r3
    5c0c:	4f 92       	push	r4
    5c0e:	5f 92       	push	r5
    5c10:	6f 92       	push	r6
    5c12:	7f 92       	push	r7
    5c14:	8f 92       	push	r8
    5c16:	9f 92       	push	r9
    5c18:	af 92       	push	r10
    5c1a:	bf 92       	push	r11
    5c1c:	cf 92       	push	r12
    5c1e:	df 92       	push	r13
    5c20:	ef 92       	push	r14
    5c22:	ff 92       	push	r15
    5c24:	0f 93       	push	r16
    5c26:	1f 93       	push	r17
    5c28:	cf 93       	push	r28
    5c2a:	df 93       	push	r29
    5c2c:	cd b7       	in	r28, 0x3d	; 61
    5c2e:	de b7       	in	r29, 0x3e	; 62
    5c30:	29 97       	sbiw	r28, 0x09	; 9
    5c32:	0f b6       	in	r0, 0x3f	; 63
    5c34:	f8 94       	cli
    5c36:	de bf       	out	0x3e, r29	; 62
    5c38:	0f be       	out	0x3f, r0	; 63
    5c3a:	cd bf       	out	0x3d, r28	; 61
    5c3c:	6c 01       	movw	r12, r24
    5c3e:	2a 01       	movw	r4, r20
    5c40:	3b 01       	movw	r6, r22
    5c42:	39 87       	std	Y+9, r19	; 0x09
    5c44:	28 87       	std	Y+8, r18	; 0x08
    5c46:	0f 83       	std	Y+7, r16	; 0x07
    5c48:	2d b6       	in	r2, 0x3d	; 61
    5c4a:	3e b6       	in	r3, 0x3e	; 62
    5c4c:	e1 2c       	mov	r14, r1
    5c4e:	f1 2c       	mov	r15, r1
    5c50:	87 01       	movw	r16, r14
    5c52:	9a 01       	movw	r18, r20
    5c54:	ab 01       	movw	r20, r22
    5c56:	63 e0       	ldi	r22, 0x03	; 3
    5c58:	bd d4       	rcall	.+2426   	; 0x65d4 <_ZN8SPIFlash5_prepEhmm>
    5c5a:	88 23       	and	r24, r24
    5c5c:	09 f4       	brne	.+2      	; 0x5c60 <_ZN8SPIFlash7readStrEmR6Stringb+0x58>
    5c5e:	4c c0       	rjmp	.+152    	; 0x5cf8 <_ZN8SPIFlash7readStrEmR6Stringb+0xf0>
    5c60:	8f 81       	ldd	r24, Y+7	; 0x07
    5c62:	88 23       	and	r24, r24
    5c64:	11 f0       	breq	.+4      	; 0x5c6a <_ZN8SPIFlash7readStrEmR6Stringb+0x62>
    5c66:	6b e0       	ldi	r22, 0x0B	; 11
    5c68:	01 c0       	rjmp	.+2      	; 0x5c6c <_ZN8SPIFlash7readStrEmR6Stringb+0x64>
    5c6a:	63 e0       	ldi	r22, 0x03	; 3
    5c6c:	c6 01       	movw	r24, r12
    5c6e:	9d d3       	rcall	.+1850   	; 0x63aa <_ZN8SPIFlash9_beginSPIEh>
    5c70:	e1 2c       	mov	r14, r1
    5c72:	f1 2c       	mov	r15, r1
    5c74:	81 2c       	mov	r8, r1
    5c76:	91 2c       	mov	r9, r1
    5c78:	54 01       	movw	r10, r8
    5c7a:	40 e0       	ldi	r20, 0x00	; 0
    5c7c:	f6 01       	movw	r30, r12
    5c7e:	64 8d       	ldd	r22, Z+28	; 0x1c
    5c80:	c6 01       	movw	r24, r12
    5c82:	ff d3       	rcall	.+2046   	; 0x6482 <_ZN8SPIFlash9_nextByteEch>
    5c84:	90 e0       	ldi	r25, 0x00	; 0
    5c86:	0e 2c       	mov	r0, r14
    5c88:	02 c0       	rjmp	.+4      	; 0x5c8e <_ZN8SPIFlash7readStrEmR6Stringb+0x86>
    5c8a:	88 0f       	add	r24, r24
    5c8c:	99 1f       	adc	r25, r25
    5c8e:	0a 94       	dec	r0
    5c90:	e2 f7       	brpl	.-8      	; 0x5c8a <_ZN8SPIFlash7readStrEmR6Stringb+0x82>
    5c92:	09 2e       	mov	r0, r25
    5c94:	00 0c       	add	r0, r0
    5c96:	aa 0b       	sbc	r26, r26
    5c98:	bb 0b       	sbc	r27, r27
    5c9a:	88 2a       	or	r8, r24
    5c9c:	99 2a       	or	r9, r25
    5c9e:	aa 2a       	or	r10, r26
    5ca0:	bb 2a       	or	r11, r27
    5ca2:	f8 e0       	ldi	r31, 0x08	; 8
    5ca4:	ef 0e       	add	r14, r31
    5ca6:	f1 1c       	adc	r15, r1
    5ca8:	80 e2       	ldi	r24, 0x20	; 32
    5caa:	e8 16       	cp	r14, r24
    5cac:	f1 04       	cpc	r15, r1
    5cae:	29 f7       	brne	.-54     	; 0x5c7a <_ZN8SPIFlash7readStrEmR6Stringb+0x72>
    5cb0:	c6 01       	movw	r24, r12
    5cb2:	fb d3       	rcall	.+2038   	; 0x64aa <_ZN8SPIFlash7_endSPIEv>
    5cb4:	ed b7       	in	r30, 0x3d	; 61
    5cb6:	fe b7       	in	r31, 0x3e	; 62
    5cb8:	e8 19       	sub	r30, r8
    5cba:	f9 09       	sbc	r31, r9
    5cbc:	0f b6       	in	r0, 0x3f	; 63
    5cbe:	f8 94       	cli
    5cc0:	fe bf       	out	0x3e, r31	; 62
    5cc2:	0f be       	out	0x3f, r0	; 63
    5cc4:	ed bf       	out	0x3d, r30	; 61
    5cc6:	8d b7       	in	r24, 0x3d	; 61
    5cc8:	9e b7       	in	r25, 0x3e	; 62
    5cca:	01 96       	adiw	r24, 0x01	; 1
    5ccc:	7c 01       	movw	r14, r24
    5cce:	b3 01       	movw	r22, r6
    5cd0:	a2 01       	movw	r20, r4
    5cd2:	4c 5f       	subi	r20, 0xFC	; 252
    5cd4:	5f 4f       	sbci	r21, 0xFF	; 255
    5cd6:	6f 4f       	sbci	r22, 0xFF	; 255
    5cd8:	7f 4f       	sbci	r23, 0xFF	; 255
    5cda:	95 01       	movw	r18, r10
    5cdc:	84 01       	movw	r16, r8
    5cde:	c6 01       	movw	r24, r12
    5ce0:	cb d2       	rcall	.+1430   	; 0x6278 <_ZN8SPIFlash13_addressCheckEmm>
    5ce2:	88 23       	and	r24, r24
    5ce4:	49 f0       	breq	.+18     	; 0x5cf8 <_ZN8SPIFlash7readStrEmR6Stringb+0xf0>
    5ce6:	40 e0       	ldi	r20, 0x00	; 0
    5ce8:	5a ec       	ldi	r21, 0xCA	; 202
    5cea:	6a e9       	ldi	r22, 0x9A	; 154
    5cec:	7b e3       	ldi	r23, 0x3B	; 59
    5cee:	c6 01       	movw	r24, r12
    5cf0:	0f d4       	rcall	.+2078   	; 0x6510 <_ZN8SPIFlash8_notBusyEm>
    5cf2:	78 2e       	mov	r7, r24
    5cf4:	81 11       	cpse	r24, r1
    5cf6:	02 c0       	rjmp	.+4      	; 0x5cfc <_ZN8SPIFlash7readStrEmR6Stringb+0xf4>
    5cf8:	71 2c       	mov	r7, r1
    5cfa:	20 c0       	rjmp	.+64     	; 0x5d3c <_ZN8SPIFlash7readStrEmR6Stringb+0x134>
    5cfc:	9f 81       	ldd	r25, Y+7	; 0x07
    5cfe:	99 23       	and	r25, r25
    5d00:	11 f0       	breq	.+4      	; 0x5d06 <_ZN8SPIFlash7readStrEmR6Stringb+0xfe>
    5d02:	6b e0       	ldi	r22, 0x0B	; 11
    5d04:	01 c0       	rjmp	.+2      	; 0x5d08 <_ZN8SPIFlash7readStrEmR6Stringb+0x100>
    5d06:	63 e0       	ldi	r22, 0x03	; 3
    5d08:	c6 01       	movw	r24, r12
    5d0a:	4f d3       	rcall	.+1694   	; 0x63aa <_ZN8SPIFlash9_beginSPIEh>
    5d0c:	95 01       	movw	r18, r10
    5d0e:	84 01       	movw	r16, r8
    5d10:	a7 01       	movw	r20, r14
    5d12:	63 e0       	ldi	r22, 0x03	; 3
    5d14:	c6 01       	movw	r24, r12
    5d16:	b8 d3       	rcall	.+1904   	; 0x6488 <_ZN8SPIFlash8_nextBufEhPhm>
    5d18:	c6 01       	movw	r24, r12
    5d1a:	c7 d3       	rcall	.+1934   	; 0x64aa <_ZN8SPIFlash7_endSPIEv>
    5d1c:	b7 01       	movw	r22, r14
    5d1e:	ce 01       	movw	r24, r28
    5d20:	01 96       	adiw	r24, 0x01	; 1
    5d22:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <_ZN6StringC1EPKc>
    5d26:	be 01       	movw	r22, r28
    5d28:	6f 5f       	subi	r22, 0xFF	; 255
    5d2a:	7f 4f       	sbci	r23, 0xFF	; 255
    5d2c:	88 85       	ldd	r24, Y+8	; 0x08
    5d2e:	99 85       	ldd	r25, Y+9	; 0x09
    5d30:	0e 94 53 3e 	call	0x7ca6	; 0x7ca6 <_ZN6StringaSEOS_>
    5d34:	ce 01       	movw	r24, r28
    5d36:	01 96       	adiw	r24, 0x01	; 1
    5d38:	0e 94 78 3d 	call	0x7af0	; 0x7af0 <_ZN6StringD1Ev>
    5d3c:	87 2d       	mov	r24, r7
    5d3e:	0f b6       	in	r0, 0x3f	; 63
    5d40:	f8 94       	cli
    5d42:	3e be       	out	0x3e, r3	; 62
    5d44:	0f be       	out	0x3f, r0	; 63
    5d46:	2d be       	out	0x3d, r2	; 61
    5d48:	29 96       	adiw	r28, 0x09	; 9
    5d4a:	0f b6       	in	r0, 0x3f	; 63
    5d4c:	f8 94       	cli
    5d4e:	de bf       	out	0x3e, r29	; 62
    5d50:	0f be       	out	0x3f, r0	; 63
    5d52:	cd bf       	out	0x3d, r28	; 61
    5d54:	df 91       	pop	r29
    5d56:	cf 91       	pop	r28
    5d58:	1f 91       	pop	r17
    5d5a:	0f 91       	pop	r16
    5d5c:	ff 90       	pop	r15
    5d5e:	ef 90       	pop	r14
    5d60:	df 90       	pop	r13
    5d62:	cf 90       	pop	r12
    5d64:	bf 90       	pop	r11
    5d66:	af 90       	pop	r10
    5d68:	9f 90       	pop	r9
    5d6a:	8f 90       	pop	r8
    5d6c:	7f 90       	pop	r7
    5d6e:	6f 90       	pop	r6
    5d70:	5f 90       	pop	r5
    5d72:	4f 90       	pop	r4
    5d74:	3f 90       	pop	r3
    5d76:	2f 90       	pop	r2
    5d78:	08 95       	ret

00005d7a <_ZN8SPIFlash8writeStrEmR6Stringb>:
    5d7a:	2f 92       	push	r2
    5d7c:	3f 92       	push	r3
    5d7e:	4f 92       	push	r4
    5d80:	5f 92       	push	r5
    5d82:	6f 92       	push	r6
    5d84:	7f 92       	push	r7
    5d86:	8f 92       	push	r8
    5d88:	9f 92       	push	r9
    5d8a:	af 92       	push	r10
    5d8c:	bf 92       	push	r11
    5d8e:	cf 92       	push	r12
    5d90:	df 92       	push	r13
    5d92:	ef 92       	push	r14
    5d94:	ff 92       	push	r15
    5d96:	0f 93       	push	r16
    5d98:	1f 93       	push	r17
    5d9a:	cf 93       	push	r28
    5d9c:	df 93       	push	r29
    5d9e:	cd b7       	in	r28, 0x3d	; 61
    5da0:	de b7       	in	r29, 0x3e	; 62
    5da2:	2f 97       	sbiw	r28, 0x0f	; 15
    5da4:	0f b6       	in	r0, 0x3f	; 63
    5da6:	f8 94       	cli
    5da8:	de bf       	out	0x3e, r29	; 62
    5daa:	0f be       	out	0x3f, r0	; 63
    5dac:	cd bf       	out	0x3d, r28	; 61
    5dae:	7c 01       	movw	r14, r24
    5db0:	1a 01       	movw	r2, r20
    5db2:	2b 01       	movw	r4, r22
    5db4:	c9 01       	movw	r24, r18
    5db6:	0d 87       	std	Y+13, r16	; 0x0d
    5db8:	2d b7       	in	r18, 0x3d	; 61
    5dba:	3e b7       	in	r19, 0x3e	; 62
    5dbc:	3f 87       	std	Y+15, r19	; 0x0f
    5dbe:	2e 87       	std	Y+14, r18	; 0x0e
    5dc0:	dc 01       	movw	r26, r24
    5dc2:	14 96       	adiw	r26, 0x04	; 4
    5dc4:	cd 90       	ld	r12, X+
    5dc6:	dc 90       	ld	r13, X
    5dc8:	15 97       	sbiw	r26, 0x05	; 5
    5dca:	bf ef       	ldi	r27, 0xFF	; 255
    5dcc:	cb 1a       	sub	r12, r27
    5dce:	db 0a       	sbc	r13, r27
    5dd0:	dc 86       	std	Y+12, r13	; 0x0c
    5dd2:	cb 86       	std	Y+11, r12	; 0x0b
    5dd4:	ed b7       	in	r30, 0x3d	; 61
    5dd6:	fe b7       	in	r31, 0x3e	; 62
    5dd8:	ec 19       	sub	r30, r12
    5dda:	fd 09       	sbc	r31, r13
    5ddc:	0f b6       	in	r0, 0x3f	; 63
    5dde:	f8 94       	cli
    5de0:	fe bf       	out	0x3e, r31	; 62
    5de2:	0f be       	out	0x3f, r0	; 63
    5de4:	ed bf       	out	0x3d, r30	; 61
    5de6:	2d b7       	in	r18, 0x3d	; 61
    5de8:	3e b7       	in	r19, 0x3e	; 62
    5dea:	2f 5f       	subi	r18, 0xFF	; 255
    5dec:	3f 4f       	sbci	r19, 0xFF	; 255
    5dee:	3a 83       	std	Y+2, r19	; 0x02
    5df0:	29 83       	std	Y+1, r18	; 0x01
    5df2:	20 e0       	ldi	r18, 0x00	; 0
    5df4:	30 e0       	ldi	r19, 0x00	; 0
    5df6:	a6 01       	movw	r20, r12
    5df8:	69 81       	ldd	r22, Y+1	; 0x01
    5dfa:	7a 81       	ldd	r23, Y+2	; 0x02
    5dfc:	0e 94 7d 3f 	call	0x7efa	; 0x7efa <_ZNK6String8getBytesEPhjj>
    5e00:	c7 01       	movw	r24, r14
    5e02:	79 d3       	rcall	.+1778   	; 0x64f6 <_ZN8SPIFlash18_isChipPoweredDownEv>
    5e04:	78 2e       	mov	r7, r24
    5e06:	81 11       	cpse	r24, r1
    5e08:	81 c0       	rjmp	.+258    	; 0x5f0c <_ZN8SPIFlash8writeStrEmR6Stringb+0x192>
    5e0a:	04 e0       	ldi	r16, 0x04	; 4
    5e0c:	10 e0       	ldi	r17, 0x00	; 0
    5e0e:	20 e0       	ldi	r18, 0x00	; 0
    5e10:	30 e0       	ldi	r19, 0x00	; 0
    5e12:	b2 01       	movw	r22, r4
    5e14:	a1 01       	movw	r20, r2
    5e16:	c7 01       	movw	r24, r14
    5e18:	2f d2       	rcall	.+1118   	; 0x6278 <_ZN8SPIFlash13_addressCheckEmm>
    5e1a:	88 23       	and	r24, r24
    5e1c:	09 f4       	brne	.+2      	; 0x5e20 <_ZN8SPIFlash8writeStrEmR6Stringb+0xa6>
    5e1e:	76 c0       	rjmp	.+236    	; 0x5f0c <_ZN8SPIFlash8writeStrEmR6Stringb+0x192>
    5e20:	46 01       	movw	r8, r12
    5e22:	a1 2c       	mov	r10, r1
    5e24:	b1 2c       	mov	r11, r1
    5e26:	95 01       	movw	r18, r10
    5e28:	84 01       	movw	r16, r8
    5e2a:	0c 5f       	subi	r16, 0xFC	; 252
    5e2c:	1f 4f       	sbci	r17, 0xFF	; 255
    5e2e:	2f 4f       	sbci	r18, 0xFF	; 255
    5e30:	3f 4f       	sbci	r19, 0xFF	; 255
    5e32:	b2 01       	movw	r22, r4
    5e34:	a1 01       	movw	r20, r2
    5e36:	c7 01       	movw	r24, r14
    5e38:	ee d2       	rcall	.+1500   	; 0x6416 <_ZN8SPIFlash15_notPrevWrittenEmm>
    5e3a:	88 23       	and	r24, r24
    5e3c:	09 f4       	brne	.+2      	; 0x5e40 <_ZN8SPIFlash8writeStrEmR6Stringb+0xc6>
    5e3e:	66 c0       	rjmp	.+204    	; 0x5f0c <_ZN8SPIFlash8writeStrEmR6Stringb+0x192>
    5e40:	40 e0       	ldi	r20, 0x00	; 0
    5e42:	5a ec       	ldi	r21, 0xCA	; 202
    5e44:	6a e9       	ldi	r22, 0x9A	; 154
    5e46:	7b e3       	ldi	r23, 0x3B	; 59
    5e48:	c7 01       	movw	r24, r14
    5e4a:	62 d3       	rcall	.+1732   	; 0x6510 <_ZN8SPIFlash8_notBusyEm>
    5e4c:	88 23       	and	r24, r24
    5e4e:	09 f4       	brne	.+2      	; 0x5e52 <_ZN8SPIFlash8writeStrEmR6Stringb+0xd8>
    5e50:	5d c0       	rjmp	.+186    	; 0x5f0c <_ZN8SPIFlash8writeStrEmR6Stringb+0x192>
    5e52:	61 e0       	ldi	r22, 0x01	; 1
    5e54:	c7 01       	movw	r24, r14
    5e56:	a3 d3       	rcall	.+1862   	; 0x659e <_ZN8SPIFlash12_writeEnableEb>
    5e58:	88 23       	and	r24, r24
    5e5a:	09 f4       	brne	.+2      	; 0x5e5e <_ZN8SPIFlash8writeStrEmR6Stringb+0xe4>
    5e5c:	57 c0       	rjmp	.+174    	; 0x5f0c <_ZN8SPIFlash8writeStrEmR6Stringb+0x192>
    5e5e:	62 e0       	ldi	r22, 0x02	; 2
    5e60:	c7 01       	movw	r24, r14
    5e62:	a3 d2       	rcall	.+1350   	; 0x63aa <_ZN8SPIFlash9_beginSPIEh>
    5e64:	00 e0       	ldi	r16, 0x00	; 0
    5e66:	10 e0       	ldi	r17, 0x00	; 0
    5e68:	b5 01       	movw	r22, r10
    5e6a:	a4 01       	movw	r20, r8
    5e6c:	00 2e       	mov	r0, r16
    5e6e:	04 c0       	rjmp	.+8      	; 0x5e78 <_ZN8SPIFlash8writeStrEmR6Stringb+0xfe>
    5e70:	76 95       	lsr	r23
    5e72:	67 95       	ror	r22
    5e74:	57 95       	ror	r21
    5e76:	47 95       	ror	r20
    5e78:	0a 94       	dec	r0
    5e7a:	d2 f7       	brpl	.-12     	; 0x5e70 <_ZN8SPIFlash8writeStrEmR6Stringb+0xf6>
    5e7c:	d7 01       	movw	r26, r14
    5e7e:	5d 96       	adiw	r26, 0x1d	; 29
    5e80:	6c 91       	ld	r22, X
    5e82:	c7 01       	movw	r24, r14
    5e84:	fe d2       	rcall	.+1532   	; 0x6482 <_ZN8SPIFlash9_nextByteEch>
    5e86:	08 5f       	subi	r16, 0xF8	; 248
    5e88:	1f 4f       	sbci	r17, 0xFF	; 255
    5e8a:	00 32       	cpi	r16, 0x20	; 32
    5e8c:	11 05       	cpc	r17, r1
    5e8e:	61 f7       	brne	.-40     	; 0x5e68 <_ZN8SPIFlash8writeStrEmR6Stringb+0xee>
    5e90:	2c 9a       	sbi	0x05, 4	; 5
    5e92:	c7 01       	movw	r24, r14
    5e94:	0a d3       	rcall	.+1556   	; 0x64aa <_ZN8SPIFlash7_endSPIEv>
    5e96:	d2 01       	movw	r26, r4
    5e98:	c1 01       	movw	r24, r2
    5e9a:	04 96       	adiw	r24, 0x04	; 4
    5e9c:	a1 1d       	adc	r26, r1
    5e9e:	b1 1d       	adc	r27, r1
    5ea0:	8b 83       	std	Y+3, r24	; 0x03
    5ea2:	9c 83       	std	Y+4, r25	; 0x04
    5ea4:	ad 83       	std	Y+5, r26	; 0x05
    5ea6:	be 83       	std	Y+6, r27	; 0x06
    5ea8:	95 01       	movw	r18, r10
    5eaa:	84 01       	movw	r16, r8
    5eac:	ac 01       	movw	r20, r24
    5eae:	bd 01       	movw	r22, r26
    5eb0:	c7 01       	movw	r24, r14
    5eb2:	e2 d1       	rcall	.+964    	; 0x6278 <_ZN8SPIFlash13_addressCheckEmm>
    5eb4:	88 23       	and	r24, r24
    5eb6:	51 f1       	breq	.+84     	; 0x5f0c <_ZN8SPIFlash8writeStrEmR6Stringb+0x192>
    5eb8:	40 e0       	ldi	r20, 0x00	; 0
    5eba:	5a ec       	ldi	r21, 0xCA	; 202
    5ebc:	6a e9       	ldi	r22, 0x9A	; 154
    5ebe:	7b e3       	ldi	r23, 0x3B	; 59
    5ec0:	c7 01       	movw	r24, r14
    5ec2:	26 d3       	rcall	.+1612   	; 0x6510 <_ZN8SPIFlash8_notBusyEm>
    5ec4:	88 23       	and	r24, r24
    5ec6:	11 f1       	breq	.+68     	; 0x5f0c <_ZN8SPIFlash8writeStrEmR6Stringb+0x192>
    5ec8:	61 e0       	ldi	r22, 0x01	; 1
    5eca:	c7 01       	movw	r24, r14
    5ecc:	68 d3       	rcall	.+1744   	; 0x659e <_ZN8SPIFlash12_writeEnableEb>
    5ece:	68 2e       	mov	r6, r24
    5ed0:	81 11       	cpse	r24, r1
    5ed2:	1e c0       	rjmp	.+60     	; 0x5f10 <_ZN8SPIFlash8writeStrEmR6Stringb+0x196>
    5ed4:	1b c0       	rjmp	.+54     	; 0x5f0c <_ZN8SPIFlash8writeStrEmR6Stringb+0x192>
    5ed6:	2c 9a       	sbi	0x05, 4	; 5
    5ed8:	e9 85       	ldd	r30, Y+9	; 0x09
    5eda:	fa 85       	ldd	r31, Y+10	; 0x0a
    5edc:	80 81       	ld	r24, Z
    5ede:	91 81       	ldd	r25, Z+1	; 0x01
    5ee0:	a2 81       	ldd	r26, Z+2	; 0x02
    5ee2:	b3 81       	ldd	r27, Z+3	; 0x03
    5ee4:	80 0f       	add	r24, r16
    5ee6:	91 1f       	adc	r25, r17
    5ee8:	a1 1d       	adc	r26, r1
    5eea:	b1 1d       	adc	r27, r1
    5eec:	80 83       	st	Z, r24
    5eee:	91 83       	std	Z+1, r25	; 0x01
    5ef0:	a2 83       	std	Z+2, r26	; 0x02
    5ef2:	b3 83       	std	Z+3, r27	; 0x03
    5ef4:	40 0e       	add	r4, r16
    5ef6:	51 1e       	adc	r5, r17
    5ef8:	c0 1a       	sub	r12, r16
    5efa:	d1 0a       	sbc	r13, r17
    5efc:	40 e0       	ldi	r20, 0x00	; 0
    5efe:	5a ec       	ldi	r21, 0xCA	; 202
    5f00:	6a e9       	ldi	r22, 0x9A	; 154
    5f02:	7b e3       	ldi	r23, 0x3B	; 59
    5f04:	c7 01       	movw	r24, r14
    5f06:	04 d3       	rcall	.+1544   	; 0x6510 <_ZN8SPIFlash8_notBusyEm>
    5f08:	81 11       	cpse	r24, r1
    5f0a:	31 c0       	rjmp	.+98     	; 0x5f6e <_ZN8SPIFlash8writeStrEmR6Stringb+0x1f4>
    5f0c:	71 2c       	mov	r7, r1
    5f0e:	d8 c0       	rjmp	.+432    	; 0x60c0 <_ZN8SPIFlash8writeStrEmR6Stringb+0x346>
    5f10:	33 24       	eor	r3, r3
    5f12:	00 e0       	ldi	r16, 0x00	; 0
    5f14:	11 e0       	ldi	r17, 0x01	; 1
    5f16:	02 19       	sub	r16, r2
    5f18:	13 09       	sbc	r17, r3
    5f1a:	c8 01       	movw	r24, r16
    5f1c:	a0 e0       	ldi	r26, 0x00	; 0
    5f1e:	b0 e0       	ldi	r27, 0x00	; 0
    5f20:	88 15       	cp	r24, r8
    5f22:	99 05       	cpc	r25, r9
    5f24:	aa 05       	cpc	r26, r10
    5f26:	bb 05       	cpc	r27, r11
    5f28:	08 f4       	brcc	.+2      	; 0x5f2c <_ZN8SPIFlash8writeStrEmR6Stringb+0x1b2>
    5f2a:	9e c0       	rjmp	.+316    	; 0x6068 <_ZN8SPIFlash8writeStrEmR6Stringb+0x2ee>
    5f2c:	2c 98       	cbi	0x05, 4	; 5
    5f2e:	42 e0       	ldi	r20, 0x02	; 2
    5f30:	d7 01       	movw	r26, r14
    5f32:	5d 96       	adiw	r26, 0x1d	; 29
    5f34:	6c 91       	ld	r22, X
    5f36:	c7 01       	movw	r24, r14
    5f38:	a4 d2       	rcall	.+1352   	; 0x6482 <_ZN8SPIFlash9_nextByteEch>
    5f3a:	c7 01       	movw	r24, r14
    5f3c:	f2 d1       	rcall	.+996    	; 0x6322 <_ZN8SPIFlash16_transferAddressEv>
    5f3e:	09 81       	ldd	r16, Y+1	; 0x01
    5f40:	1a 81       	ldd	r17, Y+2	; 0x02
    5f42:	c8 01       	movw	r24, r16
    5f44:	e9 81       	ldd	r30, Y+1	; 0x01
    5f46:	fa 81       	ldd	r31, Y+2	; 0x02
    5f48:	8e 1b       	sub	r24, r30
    5f4a:	9f 0b       	sbc	r25, r31
    5f4c:	a0 e0       	ldi	r26, 0x00	; 0
    5f4e:	b0 e0       	ldi	r27, 0x00	; 0
    5f50:	88 15       	cp	r24, r8
    5f52:	99 05       	cpc	r25, r9
    5f54:	aa 05       	cpc	r26, r10
    5f56:	bb 05       	cpc	r27, r11
    5f58:	40 f4       	brcc	.+16     	; 0x5f6a <_ZN8SPIFlash8writeStrEmR6Stringb+0x1f0>
    5f5a:	d8 01       	movw	r26, r16
    5f5c:	4d 91       	ld	r20, X+
    5f5e:	8d 01       	movw	r16, r26
    5f60:	f7 01       	movw	r30, r14
    5f62:	65 8d       	ldd	r22, Z+29	; 0x1d
    5f64:	c7 01       	movw	r24, r14
    5f66:	8d d2       	rcall	.+1306   	; 0x6482 <_ZN8SPIFlash9_nextByteEch>
    5f68:	ec cf       	rjmp	.-40     	; 0x5f42 <_ZN8SPIFlash8writeStrEmR6Stringb+0x1c8>
    5f6a:	2c 9a       	sbi	0x05, 4	; 5
    5f6c:	0b c0       	rjmp	.+22     	; 0x5f84 <_ZN8SPIFlash8writeStrEmR6Stringb+0x20a>
    5f6e:	61 e0       	ldi	r22, 0x01	; 1
    5f70:	c7 01       	movw	r24, r14
    5f72:	15 d3       	rcall	.+1578   	; 0x659e <_ZN8SPIFlash12_writeEnableEb>
    5f74:	88 23       	and	r24, r24
    5f76:	51 f2       	breq	.-108    	; 0x5f0c <_ZN8SPIFlash8writeStrEmR6Stringb+0x192>
    5f78:	00 e0       	ldi	r16, 0x00	; 0
    5f7a:	11 e0       	ldi	r17, 0x01	; 1
    5f7c:	c1 14       	cp	r12, r1
    5f7e:	d1 04       	cpc	r13, r1
    5f80:	09 f0       	breq	.+2      	; 0x5f84 <_ZN8SPIFlash8writeStrEmR6Stringb+0x20a>
    5f82:	79 c0       	rjmp	.+242    	; 0x6076 <_ZN8SPIFlash8writeStrEmR6Stringb+0x2fc>
    5f84:	fd 85       	ldd	r31, Y+13	; 0x0d
    5f86:	f1 11       	cpse	r31, r1
    5f88:	03 c0       	rjmp	.+6      	; 0x5f90 <_ZN8SPIFlash8writeStrEmR6Stringb+0x216>
    5f8a:	c7 01       	movw	r24, r14
    5f8c:	8e d2       	rcall	.+1308   	; 0x64aa <_ZN8SPIFlash7_endSPIEv>
    5f8e:	64 c0       	rjmp	.+200    	; 0x6058 <_ZN8SPIFlash8writeStrEmR6Stringb+0x2de>
    5f90:	cd b6       	in	r12, 0x3d	; 61
    5f92:	de b6       	in	r13, 0x3e	; 62
    5f94:	40 e0       	ldi	r20, 0x00	; 0
    5f96:	5a ec       	ldi	r21, 0xCA	; 202
    5f98:	6a e9       	ldi	r22, 0x9A	; 154
    5f9a:	7b e3       	ldi	r23, 0x3B	; 59
    5f9c:	c7 01       	movw	r24, r14
    5f9e:	b8 d2       	rcall	.+1392   	; 0x6510 <_ZN8SPIFlash8_notBusyEm>
    5fa0:	68 2e       	mov	r6, r24
    5fa2:	88 23       	and	r24, r24
    5fa4:	09 f4       	brne	.+2      	; 0x5fa8 <_ZN8SPIFlash8writeStrEmR6Stringb+0x22e>
    5fa6:	5a c0       	rjmp	.+180    	; 0x605c <_ZN8SPIFlash8writeStrEmR6Stringb+0x2e2>
    5fa8:	f7 01       	movw	r30, r14
    5faa:	e6 5a       	subi	r30, 0xA6	; 166
    5fac:	ff 4f       	sbci	r31, 0xFF	; 255
    5fae:	8b 81       	ldd	r24, Y+3	; 0x03
    5fb0:	9c 81       	ldd	r25, Y+4	; 0x04
    5fb2:	ad 81       	ldd	r26, Y+5	; 0x05
    5fb4:	be 81       	ldd	r27, Y+6	; 0x06
    5fb6:	80 83       	st	Z, r24
    5fb8:	91 83       	std	Z+1, r25	; 0x01
    5fba:	a2 83       	std	Z+2, r26	; 0x02
    5fbc:	b3 83       	std	Z+3, r27	; 0x03
    5fbe:	ad b7       	in	r26, 0x3d	; 61
    5fc0:	be b7       	in	r27, 0x3e	; 62
    5fc2:	eb 85       	ldd	r30, Y+11	; 0x0b
    5fc4:	fc 85       	ldd	r31, Y+12	; 0x0c
    5fc6:	ae 1b       	sub	r26, r30
    5fc8:	bf 0b       	sbc	r27, r31
    5fca:	0f b6       	in	r0, 0x3f	; 63
    5fcc:	f8 94       	cli
    5fce:	be bf       	out	0x3e, r27	; 62
    5fd0:	0f be       	out	0x3f, r0	; 63
    5fd2:	ad bf       	out	0x3d, r26	; 61
    5fd4:	0d b7       	in	r16, 0x3d	; 61
    5fd6:	1e b7       	in	r17, 0x3e	; 62
    5fd8:	0f 5f       	subi	r16, 0xFF	; 255
    5fda:	1f 4f       	sbci	r17, 0xFF	; 255
    5fdc:	2c 98       	cbi	0x05, 4	; 5
    5fde:	43 e0       	ldi	r20, 0x03	; 3
    5fe0:	d7 01       	movw	r26, r14
    5fe2:	5d 96       	adiw	r26, 0x1d	; 29
    5fe4:	6c 91       	ld	r22, X
    5fe6:	c7 01       	movw	r24, r14
    5fe8:	4c d2       	rcall	.+1176   	; 0x6482 <_ZN8SPIFlash9_nextByteEch>
    5fea:	c7 01       	movw	r24, r14
    5fec:	9a d1       	rcall	.+820    	; 0x6322 <_ZN8SPIFlash16_transferAddressEv>
    5fee:	51 2c       	mov	r5, r1
    5ff0:	85 2d       	mov	r24, r5
    5ff2:	90 e0       	ldi	r25, 0x00	; 0
    5ff4:	a0 e0       	ldi	r26, 0x00	; 0
    5ff6:	b0 e0       	ldi	r27, 0x00	; 0
    5ff8:	88 15       	cp	r24, r8
    5ffa:	99 05       	cpc	r25, r9
    5ffc:	aa 05       	cpc	r26, r10
    5ffe:	bb 05       	cpc	r27, r11
    6000:	58 f4       	brcc	.+22     	; 0x6018 <_ZN8SPIFlash8writeStrEmR6Stringb+0x29e>
    6002:	40 e0       	ldi	r20, 0x00	; 0
    6004:	f7 01       	movw	r30, r14
    6006:	64 8d       	ldd	r22, Z+28	; 0x1c
    6008:	c7 01       	movw	r24, r14
    600a:	3b d2       	rcall	.+1142   	; 0x6482 <_ZN8SPIFlash9_nextByteEch>
    600c:	f8 01       	movw	r30, r16
    600e:	e5 0d       	add	r30, r5
    6010:	f1 1d       	adc	r31, r1
    6012:	80 83       	st	Z, r24
    6014:	53 94       	inc	r5
    6016:	ec cf       	rjmp	.-40     	; 0x5ff0 <_ZN8SPIFlash8writeStrEmR6Stringb+0x276>
    6018:	c7 01       	movw	r24, r14
    601a:	47 d2       	rcall	.+1166   	; 0x64aa <_ZN8SPIFlash7_endSPIEv>
    601c:	80 e0       	ldi	r24, 0x00	; 0
    601e:	48 2f       	mov	r20, r24
    6020:	50 e0       	ldi	r21, 0x00	; 0
    6022:	60 e0       	ldi	r22, 0x00	; 0
    6024:	70 e0       	ldi	r23, 0x00	; 0
    6026:	48 15       	cp	r20, r8
    6028:	59 05       	cpc	r21, r9
    602a:	6a 05       	cpc	r22, r10
    602c:	7b 05       	cpc	r23, r11
    602e:	78 f4       	brcc	.+30     	; 0x604e <_ZN8SPIFlash8writeStrEmR6Stringb+0x2d4>
    6030:	28 2f       	mov	r18, r24
    6032:	30 e0       	ldi	r19, 0x00	; 0
    6034:	f8 01       	movw	r30, r16
    6036:	e2 0f       	add	r30, r18
    6038:	f3 1f       	adc	r31, r19
    603a:	a9 81       	ldd	r26, Y+1	; 0x01
    603c:	ba 81       	ldd	r27, Y+2	; 0x02
    603e:	a2 0f       	add	r26, r18
    6040:	b3 1f       	adc	r27, r19
    6042:	40 81       	ld	r20, Z
    6044:	9c 91       	ld	r25, X
    6046:	49 13       	cpse	r20, r25
    6048:	09 c0       	rjmp	.+18     	; 0x605c <_ZN8SPIFlash8writeStrEmR6Stringb+0x2e2>
    604a:	8f 5f       	subi	r24, 0xFF	; 255
    604c:	e8 cf       	rjmp	.-48     	; 0x601e <_ZN8SPIFlash8writeStrEmR6Stringb+0x2a4>
    604e:	0f b6       	in	r0, 0x3f	; 63
    6050:	f8 94       	cli
    6052:	de be       	out	0x3e, r13	; 62
    6054:	0f be       	out	0x3f, r0	; 63
    6056:	cd be       	out	0x3d, r12	; 61
    6058:	76 2c       	mov	r7, r6
    605a:	32 c0       	rjmp	.+100    	; 0x60c0 <_ZN8SPIFlash8writeStrEmR6Stringb+0x346>
    605c:	0f b6       	in	r0, 0x3f	; 63
    605e:	f8 94       	cli
    6060:	de be       	out	0x3e, r13	; 62
    6062:	0f be       	out	0x3f, r0	; 63
    6064:	cd be       	out	0x3d, r12	; 61
    6066:	2c c0       	rjmp	.+88     	; 0x60c0 <_ZN8SPIFlash8writeStrEmR6Stringb+0x346>
    6068:	41 2c       	mov	r4, r1
    606a:	51 2c       	mov	r5, r1
    606c:	97 01       	movw	r18, r14
    606e:	26 5a       	subi	r18, 0xA6	; 166
    6070:	3f 4f       	sbci	r19, 0xFF	; 255
    6072:	3a 87       	std	Y+10, r19	; 0x0a
    6074:	29 87       	std	Y+9, r18	; 0x09
    6076:	c0 16       	cp	r12, r16
    6078:	d1 06       	cpc	r13, r17
    607a:	08 f4       	brcc	.+2      	; 0x607e <_ZN8SPIFlash8writeStrEmR6Stringb+0x304>
    607c:	86 01       	movw	r16, r12
    607e:	2c 98       	cbi	0x05, 4	; 5
    6080:	42 e0       	ldi	r20, 0x02	; 2
    6082:	d7 01       	movw	r26, r14
    6084:	5d 96       	adiw	r26, 0x1d	; 29
    6086:	6c 91       	ld	r22, X
    6088:	c7 01       	movw	r24, r14
    608a:	fb d1       	rcall	.+1014   	; 0x6482 <_ZN8SPIFlash9_nextByteEch>
    608c:	c7 01       	movw	r24, r14
    608e:	49 d1       	rcall	.+658    	; 0x6322 <_ZN8SPIFlash16_transferAddressEv>
    6090:	e9 81       	ldd	r30, Y+1	; 0x01
    6092:	fa 81       	ldd	r31, Y+2	; 0x02
    6094:	e4 0d       	add	r30, r4
    6096:	f5 1d       	adc	r31, r5
    6098:	f8 87       	std	Y+8, r31	; 0x08
    609a:	ef 83       	std	Y+7, r30	; 0x07
    609c:	1f 01       	movw	r2, r30
    609e:	c1 01       	movw	r24, r2
    60a0:	2f 81       	ldd	r18, Y+7	; 0x07
    60a2:	38 85       	ldd	r19, Y+8	; 0x08
    60a4:	82 1b       	sub	r24, r18
    60a6:	93 0b       	sbc	r25, r19
    60a8:	80 17       	cp	r24, r16
    60aa:	91 07       	cpc	r25, r17
    60ac:	08 f0       	brcs	.+2      	; 0x60b0 <_ZN8SPIFlash8writeStrEmR6Stringb+0x336>
    60ae:	13 cf       	rjmp	.-474    	; 0x5ed6 <_ZN8SPIFlash8writeStrEmR6Stringb+0x15c>
    60b0:	d1 01       	movw	r26, r2
    60b2:	4d 91       	ld	r20, X+
    60b4:	1d 01       	movw	r2, r26
    60b6:	f7 01       	movw	r30, r14
    60b8:	65 8d       	ldd	r22, Z+29	; 0x1d
    60ba:	c7 01       	movw	r24, r14
    60bc:	e2 d1       	rcall	.+964    	; 0x6482 <_ZN8SPIFlash9_nextByteEch>
    60be:	ef cf       	rjmp	.-34     	; 0x609e <_ZN8SPIFlash8writeStrEmR6Stringb+0x324>
    60c0:	87 2d       	mov	r24, r7
    60c2:	ae 85       	ldd	r26, Y+14	; 0x0e
    60c4:	bf 85       	ldd	r27, Y+15	; 0x0f
    60c6:	0f b6       	in	r0, 0x3f	; 63
    60c8:	f8 94       	cli
    60ca:	be bf       	out	0x3e, r27	; 62
    60cc:	0f be       	out	0x3f, r0	; 63
    60ce:	ad bf       	out	0x3d, r26	; 61
    60d0:	2f 96       	adiw	r28, 0x0f	; 15
    60d2:	0f b6       	in	r0, 0x3f	; 63
    60d4:	f8 94       	cli
    60d6:	de bf       	out	0x3e, r29	; 62
    60d8:	0f be       	out	0x3f, r0	; 63
    60da:	cd bf       	out	0x3d, r28	; 61
    60dc:	df 91       	pop	r29
    60de:	cf 91       	pop	r28
    60e0:	1f 91       	pop	r17
    60e2:	0f 91       	pop	r16
    60e4:	ff 90       	pop	r15
    60e6:	ef 90       	pop	r14
    60e8:	df 90       	pop	r13
    60ea:	cf 90       	pop	r12
    60ec:	bf 90       	pop	r11
    60ee:	af 90       	pop	r10
    60f0:	9f 90       	pop	r9
    60f2:	8f 90       	pop	r8
    60f4:	7f 90       	pop	r7
    60f6:	6f 90       	pop	r6
    60f8:	5f 90       	pop	r5
    60fa:	4f 90       	pop	r4
    60fc:	3f 90       	pop	r3
    60fe:	2f 90       	pop	r2
    6100:	08 95       	ret

00006102 <_ZN8SPIFlash11eraseSectorEm>:
    6102:	ef 92       	push	r14
    6104:	ff 92       	push	r15
    6106:	0f 93       	push	r16
    6108:	1f 93       	push	r17
    610a:	cf 93       	push	r28
    610c:	df 93       	push	r29
    610e:	ec 01       	movw	r28, r24
    6110:	88 a9       	ldd	r24, Y+48	; 0x30
    6112:	81 11       	cpse	r24, r1
    6114:	05 c0       	rjmp	.+10     	; 0x6120 <_ZN8SPIFlash11eraseSectorEm+0x1e>
    6116:	40 e0       	ldi	r20, 0x00	; 0
    6118:	6c e0       	ldi	r22, 0x0C	; 12
    611a:	ce 01       	movw	r24, r28
    611c:	ff d3       	rcall	.+2046   	; 0x691c <_ZN8SPIFlash13_troubleshootEhb>
    611e:	1d c0       	rjmp	.+58     	; 0x615a <_ZN8SPIFlash11eraseSectorEm+0x58>
    6120:	e1 2c       	mov	r14, r1
    6122:	10 e1       	ldi	r17, 0x10	; 16
    6124:	f1 2e       	mov	r15, r17
    6126:	00 e0       	ldi	r16, 0x00	; 0
    6128:	10 e0       	ldi	r17, 0x00	; 0
    612a:	9a 01       	movw	r18, r20
    612c:	ab 01       	movw	r20, r22
    612e:	6f ee       	ldi	r22, 0xEF	; 239
    6130:	ce 01       	movw	r24, r28
    6132:	50 d2       	rcall	.+1184   	; 0x65d4 <_ZN8SPIFlash5_prepEhmm>
    6134:	88 23       	and	r24, r24
    6136:	89 f0       	breq	.+34     	; 0x615a <_ZN8SPIFlash11eraseSectorEm+0x58>
    6138:	69 a9       	ldd	r22, Y+49	; 0x31
    613a:	ce 01       	movw	r24, r28
    613c:	36 d1       	rcall	.+620    	; 0x63aa <_ZN8SPIFlash9_beginSPIEh>
    613e:	ce 01       	movw	r24, r28
    6140:	b4 d1       	rcall	.+872    	; 0x64aa <_ZN8SPIFlash7_endSPIEv>
    6142:	4a a9       	ldd	r20, Y+50	; 0x32
    6144:	5b a9       	ldd	r21, Y+51	; 0x33
    6146:	6c a9       	ldd	r22, Y+52	; 0x34
    6148:	7d a9       	ldd	r23, Y+53	; 0x35
    614a:	ce 01       	movw	r24, r28
    614c:	df 91       	pop	r29
    614e:	cf 91       	pop	r28
    6150:	1f 91       	pop	r17
    6152:	0f 91       	pop	r16
    6154:	ff 90       	pop	r15
    6156:	ef 90       	pop	r14
    6158:	db c1       	rjmp	.+950    	; 0x6510 <_ZN8SPIFlash8_notBusyEm>
    615a:	80 e0       	ldi	r24, 0x00	; 0
    615c:	df 91       	pop	r29
    615e:	cf 91       	pop	r28
    6160:	1f 91       	pop	r17
    6162:	0f 91       	pop	r16
    6164:	ff 90       	pop	r15
    6166:	ef 90       	pop	r14
    6168:	08 95       	ret

0000616a <_ZN8SPIFlash9eraseChipEv>:
    616a:	1f 93       	push	r17
    616c:	cf 93       	push	r28
    616e:	df 93       	push	r29
    6170:	ec 01       	movw	r28, r24
    6172:	c1 d1       	rcall	.+898    	; 0x64f6 <_ZN8SPIFlash18_isChipPoweredDownEv>
    6174:	81 11       	cpse	r24, r1
    6176:	1d c0       	rjmp	.+58     	; 0x61b2 <_ZN8SPIFlash9eraseChipEv+0x48>
    6178:	40 e0       	ldi	r20, 0x00	; 0
    617a:	5a ec       	ldi	r21, 0xCA	; 202
    617c:	6a e9       	ldi	r22, 0x9A	; 154
    617e:	7b e3       	ldi	r23, 0x3B	; 59
    6180:	ce 01       	movw	r24, r28
    6182:	c6 d1       	rcall	.+908    	; 0x6510 <_ZN8SPIFlash8_notBusyEm>
    6184:	88 23       	and	r24, r24
    6186:	a9 f0       	breq	.+42     	; 0x61b2 <_ZN8SPIFlash9eraseChipEv+0x48>
    6188:	61 e0       	ldi	r22, 0x01	; 1
    618a:	ce 01       	movw	r24, r28
    618c:	08 d2       	rcall	.+1040   	; 0x659e <_ZN8SPIFlash12_writeEnableEb>
    618e:	18 2f       	mov	r17, r24
    6190:	88 23       	and	r24, r24
    6192:	79 f0       	breq	.+30     	; 0x61b2 <_ZN8SPIFlash9eraseChipEv+0x48>
    6194:	fe 01       	movw	r30, r28
    6196:	e7 5b       	subi	r30, 0xB7	; 183
    6198:	ff 4f       	sbci	r31, 0xFF	; 255
    619a:	60 81       	ld	r22, Z
    619c:	ce 01       	movw	r24, r28
    619e:	05 d1       	rcall	.+522    	; 0x63aa <_ZN8SPIFlash9_beginSPIEh>
    61a0:	ce 01       	movw	r24, r28
    61a2:	83 d1       	rcall	.+774    	; 0x64aa <_ZN8SPIFlash7_endSPIEv>
    61a4:	ce 01       	movw	r24, r28
    61a6:	99 d1       	rcall	.+818    	; 0x64da <_ZN8SPIFlash10_readStat1Ev>
    61a8:	80 fd       	sbrc	r24, 0
    61aa:	fc cf       	rjmp	.-8      	; 0x61a4 <_ZN8SPIFlash9eraseChipEv+0x3a>
    61ac:	ce 01       	movw	r24, r28
    61ae:	7d d1       	rcall	.+762    	; 0x64aa <_ZN8SPIFlash7_endSPIEv>
    61b0:	01 c0       	rjmp	.+2      	; 0x61b4 <_ZN8SPIFlash9eraseChipEv+0x4a>
    61b2:	10 e0       	ldi	r17, 0x00	; 0
    61b4:	81 2f       	mov	r24, r17
    61b6:	df 91       	pop	r29
    61b8:	cf 91       	pop	r28
    61ba:	1f 91       	pop	r17
    61bc:	08 95       	ret

000061be <_ZN8SPIFlash9powerDownEv>:

//Puts device in low power state. Good for battery powered operations.
//In powerDown() the chip will only respond to powerUp()
bool SPIFlash::powerDown(void) {
    61be:	0f 93       	push	r16
    61c0:	1f 93       	push	r17
    61c2:	cf 93       	push	r28
    61c4:	8c 01       	movw	r16, r24
  if (_chip.manufacturerID != MICROCHIP_MANID) {
    61c6:	fc 01       	movw	r30, r24
    61c8:	85 a1       	ldd	r24, Z+37	; 0x25
    61ca:	8f 3b       	cpi	r24, 0xBF	; 191
    61cc:	c9 f0       	breq	.+50     	; 0x6200 <_ZN8SPIFlash9powerDownEv+0x42>
  	if(!_notBusy(20))
    61ce:	44 e1       	ldi	r20, 0x14	; 20
    61d0:	50 e0       	ldi	r21, 0x00	; 0
    61d2:	60 e0       	ldi	r22, 0x00	; 0
    61d4:	70 e0       	ldi	r23, 0x00	; 0
    61d6:	c8 01       	movw	r24, r16
    61d8:	9b d1       	rcall	.+822    	; 0x6510 <_ZN8SPIFlash8_notBusyEm>
    61da:	88 23       	and	r24, r24
    61dc:	b1 f0       	breq	.+44     	; 0x620a <_ZN8SPIFlash9powerDownEv+0x4c>
  		return false;
  	_beginSPI(POWERDOWN);
    61de:	69 eb       	ldi	r22, 0xB9	; 185
    61e0:	c8 01       	movw	r24, r16
    61e2:	e3 d0       	rcall	.+454    	; 0x63aa <_ZN8SPIFlash9_beginSPIEh>
    _endSPI();
    61e4:	c8 01       	movw	r24, r16
    61e6:	61 d1       	rcall	.+706    	; 0x64aa <_ZN8SPIFlash7_endSPIEv>
    61e8:	fa e1       	ldi	r31, 0x1A	; 26
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    61ea:	fa 95       	dec	r31
    61ec:	f1 f7       	brne	.-4      	; 0x61ea <_ZN8SPIFlash9powerDownEv+0x2c>
    61ee:	00 c0       	rjmp	.+0      	; 0x61f0 <_ZN8SPIFlash9powerDownEv+0x32>
    61f0:	c1 e0       	ldi	r28, 0x01	; 1
    _delay_us(5);
    chipPoweredDown = true;
    61f2:	f8 01       	movw	r30, r16
    61f4:	c7 87       	std	Z+15, r28	; 0x0f
    return !_writeEnable(false);
    61f6:	60 e0       	ldi	r22, 0x00	; 0
    61f8:	c8 01       	movw	r24, r16
    61fa:	d1 d1       	rcall	.+930    	; 0x659e <_ZN8SPIFlash12_writeEnableEb>
    61fc:	8c 27       	eor	r24, r28
    61fe:	05 c0       	rjmp	.+10     	; 0x620a <_ZN8SPIFlash9powerDownEv+0x4c>
  }
  else {
    _troubleshoot(UNSUPPORTEDFUNC);
    6200:	40 e0       	ldi	r20, 0x00	; 0
    6202:	6c e0       	ldi	r22, 0x0C	; 12
    6204:	c8 01       	movw	r24, r16
    6206:	8a d3       	rcall	.+1812   	; 0x691c <_ZN8SPIFlash13_troubleshootEhb>
    6208:	80 e0       	ldi	r24, 0x00	; 0
    return false;
    620a:	cf 91       	pop	r28
  }
}
    620c:	1f 91       	pop	r17
    620e:	0f 91       	pop	r16
    6210:	08 95       	ret

00006212 <_ZN8SPIFlash7powerUpEv>:
    6212:	1f 93       	push	r17

//Wakes chip from low power state.
bool SPIFlash::powerUp(void) {
    6214:	cf 93       	push	r28
    6216:	df 93       	push	r29
    6218:	ec 01       	movw	r28, r24
  _beginSPI(RELEASE);
    621a:	6b ea       	ldi	r22, 0xAB	; 171
    621c:	c6 d0       	rcall	.+396    	; 0x63aa <_ZN8SPIFlash9_beginSPIEh>
  _endSPI();
    621e:	ce 01       	movw	r24, r28
    6220:	44 d1       	rcall	.+648    	; 0x64aa <_ZN8SPIFlash7_endSPIEv>
    6222:	80 e1       	ldi	r24, 0x10	; 16
    6224:	8a 95       	dec	r24
    6226:	f1 f7       	brne	.-4      	; 0x6224 <_ZN8SPIFlash7powerUpEv+0x12>
	_delay_us(3);						    //Max release enable time according to the Datasheet

  if (_writeEnable(false)) {
    6228:	60 e0       	ldi	r22, 0x00	; 0
    622a:	ce 01       	movw	r24, r28
    622c:	b8 d1       	rcall	.+880    	; 0x659e <_ZN8SPIFlash12_writeEnableEb>
    622e:	18 2f       	mov	r17, r24
    6230:	88 23       	and	r24, r24
    _writeDisable();
    6232:	19 f0       	breq	.+6      	; 0x623a <_ZN8SPIFlash7powerUpEv+0x28>
    6234:	ce 01       	movw	r24, r28
    6236:	30 d2       	rcall	.+1120   	; 0x6698 <_ZN8SPIFlash13_writeDisableEv>
    chipPoweredDown = false;
    6238:	1f 86       	std	Y+15, r1	; 0x0f
    return true;
  }
  return false;  
}
    623a:	81 2f       	mov	r24, r17
    623c:	df 91       	pop	r29
    623e:	cf 91       	pop	r28
    6240:	1f 91       	pop	r17
    6242:	08 95       	ret

00006244 <_ZN8SPIClass8transferEPvj.part.0>:
   _nextByte(READ);
   *b1 = _nextByte(READ);
   *b2 = _nextByte(READ);
   CHIP_DESELECT
   return true;
 }
    6244:	fc 01       	movw	r30, r24
    6246:	20 81       	ld	r18, Z
    6248:	2e bd       	out	0x2e, r18	; 46
    624a:	9b 01       	movw	r18, r22
    624c:	21 50       	subi	r18, 0x01	; 1
    624e:	31 09       	sbc	r19, r1
    6250:	41 f0       	breq	.+16     	; 0x6262 <_ZN8SPIClass8transferEPvj.part.0+0x1e>
    6252:	51 81       	ldd	r21, Z+1	; 0x01
    6254:	0d b4       	in	r0, 0x2d	; 45
    6256:	07 fe       	sbrs	r0, 7
    6258:	fd cf       	rjmp	.-6      	; 0x6254 <_ZN8SPIClass8transferEPvj.part.0+0x10>
    625a:	4e b5       	in	r20, 0x2e	; 46
    625c:	5e bd       	out	0x2e, r21	; 46
    625e:	41 93       	st	Z+, r20
    6260:	f5 cf       	rjmp	.-22     	; 0x624c <_ZN8SPIClass8transferEPvj.part.0+0x8>
    6262:	61 50       	subi	r22, 0x01	; 1
    6264:	71 09       	sbc	r23, r1
    6266:	fc 01       	movw	r30, r24
    6268:	e6 0f       	add	r30, r22
    626a:	f7 1f       	adc	r31, r23
    626c:	0d b4       	in	r0, 0x2d	; 45
    626e:	07 fe       	sbrs	r0, 7
    6270:	fd cf       	rjmp	.-6      	; 0x626c <_ZN8SPIClass8transferEPvj.part.0+0x28>
    6272:	8e b5       	in	r24, 0x2e	; 46
    6274:	80 83       	st	Z, r24
    6276:	08 95       	ret

00006278 <_ZN8SPIFlash13_addressCheckEmm>:
    6278:	8f 92       	push	r8
    627a:	9f 92       	push	r9
    627c:	af 92       	push	r10
    627e:	bf 92       	push	r11
    6280:	cf 92       	push	r12
    6282:	df 92       	push	r13
    6284:	ef 92       	push	r14
    6286:	ff 92       	push	r15
    6288:	0f 93       	push	r16
    628a:	1f 93       	push	r17
    628c:	cf 93       	push	r28
    628e:	df 93       	push	r29
    6290:	ec 01       	movw	r28, r24
    6292:	4a 01       	movw	r8, r20
    6294:	5b 01       	movw	r10, r22
    6296:	68 01       	movw	r12, r16
    6298:	79 01       	movw	r14, r18
    629a:	60 e0       	ldi	r22, 0x00	; 0
    629c:	0e dc       	rcall	.-2020   	; 0x5aba <_ZN8SPIFlash5errorEb>
    629e:	87 7f       	andi	r24, 0xF7	; 247
    62a0:	83 30       	cpi	r24, 0x03	; 3
    62a2:	89 f1       	breq	.+98     	; 0x6306 <_ZN8SPIFlash13_addressCheckEmm+0x8e>
    62a4:	88 a5       	ldd	r24, Y+40	; 0x28
    62a6:	99 a5       	ldd	r25, Y+41	; 0x29
    62a8:	aa a5       	ldd	r26, Y+42	; 0x2a
    62aa:	bb a5       	ldd	r27, Y+43	; 0x2b
    62ac:	00 97       	sbiw	r24, 0x00	; 0
    62ae:	a1 05       	cpc	r26, r1
    62b0:	b1 05       	cpc	r27, r1
    62b2:	31 f4       	brne	.+12     	; 0x62c0 <_ZN8SPIFlash13_addressCheckEmm+0x48>
    62b4:	40 e0       	ldi	r20, 0x00	; 0
    62b6:	61 e0       	ldi	r22, 0x01	; 1
    62b8:	86 e8       	ldi	r24, 0x86	; 134
    62ba:	9c e0       	ldi	r25, 0x0C	; 12
    62bc:	73 db       	rcall	.-2330   	; 0x59a4 <_ZN11Diagnostics12troubleshootEhb>
    62be:	23 c0       	rjmp	.+70     	; 0x6306 <_ZN8SPIFlash13_addressCheckEmm+0x8e>
    62c0:	95 01       	movw	r18, r10
    62c2:	84 01       	movw	r16, r8
    62c4:	0c 0d       	add	r16, r12
    62c6:	1d 1d       	adc	r17, r13
    62c8:	2e 1d       	adc	r18, r14
    62ca:	3f 1d       	adc	r19, r15
    62cc:	fe 01       	movw	r30, r28
    62ce:	e2 5a       	subi	r30, 0xA2	; 162
    62d0:	ff 4f       	sbci	r31, 0xFF	; 255
    62d2:	c6 5a       	subi	r28, 0xA6	; 166
    62d4:	df 4f       	sbci	r29, 0xFF	; 255
    62d6:	08 17       	cp	r16, r24
    62d8:	19 07       	cpc	r17, r25
    62da:	2a 07       	cpc	r18, r26
    62dc:	3b 07       	cpc	r19, r27
    62de:	48 f0       	brcs	.+18     	; 0x62f2 <_ZN8SPIFlash13_addressCheckEmm+0x7a>
    62e0:	08 1b       	sub	r16, r24
    62e2:	19 0b       	sbc	r17, r25
    62e4:	2a 0b       	sbc	r18, r26
    62e6:	3b 0b       	sbc	r19, r27
    62e8:	00 83       	st	Z, r16
    62ea:	11 83       	std	Z+1, r17	; 0x01
    62ec:	22 83       	std	Z+2, r18	; 0x02
    62ee:	33 83       	std	Z+3, r19	; 0x03
    62f0:	04 c0       	rjmp	.+8      	; 0x62fa <_ZN8SPIFlash13_addressCheckEmm+0x82>
    62f2:	10 82       	st	Z, r1
    62f4:	11 82       	std	Z+1, r1	; 0x01
    62f6:	12 82       	std	Z+2, r1	; 0x02
    62f8:	13 82       	std	Z+3, r1	; 0x03
    62fa:	88 82       	st	Y, r8
    62fc:	99 82       	std	Y+1, r9	; 0x01
    62fe:	aa 82       	std	Y+2, r10	; 0x02
    6300:	bb 82       	std	Y+3, r11	; 0x03
    6302:	81 e0       	ldi	r24, 0x01	; 1
    6304:	01 c0       	rjmp	.+2      	; 0x6308 <_ZN8SPIFlash13_addressCheckEmm+0x90>
    6306:	80 e0       	ldi	r24, 0x00	; 0
    6308:	df 91       	pop	r29
    630a:	cf 91       	pop	r28
    630c:	1f 91       	pop	r17
    630e:	0f 91       	pop	r16
    6310:	ff 90       	pop	r15
    6312:	ef 90       	pop	r14
    6314:	df 90       	pop	r13
    6316:	cf 90       	pop	r12
    6318:	bf 90       	pop	r11
    631a:	af 90       	pop	r10
    631c:	9f 90       	pop	r9
    631e:	8f 90       	pop	r8
    6320:	08 95       	ret

00006322 <_ZN8SPIFlash16_transferAddressEv>:
    6322:	cf 93       	push	r28
    6324:	df 93       	push	r29
    6326:	ec 01       	movw	r28, r24
    6328:	88 89       	ldd	r24, Y+16	; 0x10
    632a:	88 23       	and	r24, r24
    632c:	31 f0       	breq	.+12     	; 0x633a <_ZN8SPIFlash16_transferAddressEv+0x18>
    632e:	fe 01       	movw	r30, r28
    6330:	e3 5a       	subi	r30, 0xA3	; 163
    6332:	ff 4f       	sbci	r31, 0xFF	; 255
    6334:	80 81       	ld	r24, Z
    6336:	0e 94 1a 28 	call	0x5034	; 0x5034 <_ZN8SPIClass8transferEh>
    633a:	fe 01       	movw	r30, r28
    633c:	e4 5a       	subi	r30, 0xA4	; 164
    633e:	ff 4f       	sbci	r31, 0xFF	; 255
    6340:	80 81       	ld	r24, Z
    6342:	0e 94 1a 28 	call	0x5034	; 0x5034 <_ZN8SPIClass8transferEh>
    6346:	fe 01       	movw	r30, r28
    6348:	e5 5a       	subi	r30, 0xA5	; 165
    634a:	ff 4f       	sbci	r31, 0xFF	; 255
    634c:	80 81       	ld	r24, Z
    634e:	0e 94 1a 28 	call	0x5034	; 0x5034 <_ZN8SPIClass8transferEh>
    6352:	c6 5a       	subi	r28, 0xA6	; 166
    6354:	df 4f       	sbci	r29, 0xFF	; 255
    6356:	88 81       	ld	r24, Y
    6358:	0e 94 1a 28 	call	0x5034	; 0x5034 <_ZN8SPIClass8transferEh>
    635c:	81 e0       	ldi	r24, 0x01	; 1
    635e:	df 91       	pop	r29
    6360:	cf 91       	pop	r28
    6362:	08 95       	ret

00006364 <_ZN8SPIFlash12_startSPIBusEv>:
    6364:	fc 01       	movw	r30, r24
    6366:	8c b5       	in	r24, 0x2c	; 44
    6368:	87 8b       	std	Z+23, r24	; 0x17
    636a:	8d b5       	in	r24, 0x2d	; 45
    636c:	80 8f       	std	Z+24, r24	; 0x18
    636e:	40 81       	ld	r20, Z
    6370:	31 81       	ldd	r19, Z+1	; 0x01
    6372:	80 91 89 0c 	lds	r24, 0x0C89	; 0x800c89 <_ZN8SPIClass13interruptModeE>
    6376:	88 23       	and	r24, r24
    6378:	99 f0       	breq	.+38     	; 0x63a0 <_ZN8SPIFlash12_startSPIBusEv+0x3c>
    637a:	2f b7       	in	r18, 0x3f	; 63
    637c:	f8 94       	cli
    637e:	80 91 89 0c 	lds	r24, 0x0C89	; 0x800c89 <_ZN8SPIClass13interruptModeE>
    6382:	81 30       	cpi	r24, 0x01	; 1
    6384:	59 f4       	brne	.+22     	; 0x639c <_ZN8SPIFlash12_startSPIBusEv+0x38>
    6386:	8d b3       	in	r24, 0x1d	; 29
    6388:	80 93 87 0c 	sts	0x0C87, r24	; 0x800c87 <_ZN8SPIClass13interruptSaveE>
    638c:	9d b3       	in	r25, 0x1d	; 29
    638e:	80 91 88 0c 	lds	r24, 0x0C88	; 0x800c88 <_ZN8SPIClass13interruptMaskE>
    6392:	80 95       	com	r24
    6394:	89 23       	and	r24, r25
    6396:	8d bb       	out	0x1d, r24	; 29
    6398:	2f bf       	out	0x3f, r18	; 63
    639a:	02 c0       	rjmp	.+4      	; 0x63a0 <_ZN8SPIFlash12_startSPIBusEv+0x3c>
    639c:	20 93 87 0c 	sts	0x0C87, r18	; 0x800c87 <_ZN8SPIClass13interruptSaveE>
    63a0:	4c bd       	out	0x2c, r20	; 44
    63a2:	3d bd       	out	0x2d, r19	; 45
    63a4:	81 e0       	ldi	r24, 0x01	; 1
    63a6:	86 87       	std	Z+14, r24	; 0x0e
    63a8:	08 95       	ret

000063aa <_ZN8SPIFlash9_beginSPIEh>:
    63aa:	0f 93       	push	r16
    63ac:	1f 93       	push	r17
    63ae:	cf 93       	push	r28
    63b0:	8c 01       	movw	r16, r24
    63b2:	c6 2f       	mov	r28, r22
    63b4:	fc 01       	movw	r30, r24
    63b6:	86 85       	ldd	r24, Z+14	; 0x0e
    63b8:	81 11       	cpse	r24, r1
    63ba:	02 c0       	rjmp	.+4      	; 0x63c0 <_ZN8SPIFlash9_beginSPIEh+0x16>
    63bc:	c8 01       	movw	r24, r16
    63be:	d2 df       	rcall	.-92     	; 0x6364 <_ZN8SPIFlash12_startSPIBusEv>
    63c0:	2c 98       	cbi	0x05, 4	; 5
    63c2:	cb 30       	cpi	r28, 0x0B	; 11
    63c4:	a9 f0       	breq	.+42     	; 0x63f0 <_ZN8SPIFlash9_beginSPIEh+0x46>
    63c6:	30 f4       	brcc	.+12     	; 0x63d4 <_ZN8SPIFlash9_beginSPIEh+0x2a>
    63c8:	c2 30       	cpi	r28, 0x02	; 2
    63ca:	61 f0       	breq	.+24     	; 0x63e4 <_ZN8SPIFlash9_beginSPIEh+0x3a>
    63cc:	c3 30       	cpi	r28, 0x03	; 3
    63ce:	d9 f4       	brne	.+54     	; 0x6406 <_ZN8SPIFlash9_beginSPIEh+0x5c>
    63d0:	83 e0       	ldi	r24, 0x03	; 3
    63d2:	09 c0       	rjmp	.+18     	; 0x63e6 <_ZN8SPIFlash9_beginSPIEh+0x3c>
    63d4:	c2 35       	cpi	r28, 0x52	; 82
    63d6:	99 f0       	breq	.+38     	; 0x63fe <_ZN8SPIFlash9_beginSPIEh+0x54>
    63d8:	c8 3d       	cpi	r28, 0xD8	; 216
    63da:	99 f0       	breq	.+38     	; 0x6402 <_ZN8SPIFlash9_beginSPIEh+0x58>
    63dc:	c0 32       	cpi	r28, 0x20	; 32
    63de:	99 f4       	brne	.+38     	; 0x6406 <_ZN8SPIFlash9_beginSPIEh+0x5c>
    63e0:	80 e2       	ldi	r24, 0x20	; 32
    63e2:	01 c0       	rjmp	.+2      	; 0x63e6 <_ZN8SPIFlash9_beginSPIEh+0x3c>
    63e4:	82 e0       	ldi	r24, 0x02	; 2
    63e6:	0e 94 1a 28 	call	0x5034	; 0x5034 <_ZN8SPIClass8transferEh>
    63ea:	c8 01       	movw	r24, r16
    63ec:	9a df       	rcall	.-204    	; 0x6322 <_ZN8SPIFlash16_transferAddressEv>
    63ee:	0e c0       	rjmp	.+28     	; 0x640c <_ZN8SPIFlash9_beginSPIEh+0x62>
    63f0:	8b e0       	ldi	r24, 0x0B	; 11
    63f2:	0e 94 1a 28 	call	0x5034	; 0x5034 <_ZN8SPIClass8transferEh>
    63f6:	c8 01       	movw	r24, r16
    63f8:	94 df       	rcall	.-216    	; 0x6322 <_ZN8SPIFlash16_transferAddressEv>
    63fa:	8e ee       	ldi	r24, 0xEE	; 238
    63fc:	05 c0       	rjmp	.+10     	; 0x6408 <_ZN8SPIFlash9_beginSPIEh+0x5e>
    63fe:	82 e5       	ldi	r24, 0x52	; 82
    6400:	f2 cf       	rjmp	.-28     	; 0x63e6 <_ZN8SPIFlash9_beginSPIEh+0x3c>
    6402:	88 ed       	ldi	r24, 0xD8	; 216
    6404:	f0 cf       	rjmp	.-32     	; 0x63e6 <_ZN8SPIFlash9_beginSPIEh+0x3c>
    6406:	8c 2f       	mov	r24, r28
    6408:	0e 94 1a 28 	call	0x5034	; 0x5034 <_ZN8SPIClass8transferEh>
    640c:	81 e0       	ldi	r24, 0x01	; 1
    640e:	cf 91       	pop	r28
    6410:	1f 91       	pop	r17
    6412:	0f 91       	pop	r16
    6414:	08 95       	ret

00006416 <_ZN8SPIFlash15_notPrevWrittenEmm>:
    6416:	8f 92       	push	r8
    6418:	9f 92       	push	r9
    641a:	af 92       	push	r10
    641c:	bf 92       	push	r11
    641e:	cf 92       	push	r12
    6420:	df 92       	push	r13
    6422:	ef 92       	push	r14
    6424:	ff 92       	push	r15
    6426:	0f 93       	push	r16
    6428:	1f 93       	push	r17
    642a:	48 01       	movw	r8, r16
    642c:	59 01       	movw	r10, r18
    642e:	63 e0       	ldi	r22, 0x03	; 3
    6430:	bc df       	rcall	.-136    	; 0x63aa <_ZN8SPIFlash9_beginSPIEh>
    6432:	c1 2c       	mov	r12, r1
    6434:	d1 2c       	mov	r13, r1
    6436:	76 01       	movw	r14, r12
    6438:	c8 14       	cp	r12, r8
    643a:	d9 04       	cpc	r13, r9
    643c:	ea 04       	cpc	r14, r10
    643e:	fb 04       	cpc	r15, r11
    6440:	99 f0       	breq	.+38     	; 0x6468 <_ZN8SPIFlash15_notPrevWrittenEmm+0x52>
    6442:	80 e0       	ldi	r24, 0x00	; 0
    6444:	0e 94 1a 28 	call	0x5034	; 0x5034 <_ZN8SPIClass8transferEh>
    6448:	8f 3f       	cpi	r24, 0xFF	; 255
    644a:	41 f0       	breq	.+16     	; 0x645c <_ZN8SPIFlash15_notPrevWrittenEmm+0x46>
    644c:	2c 9a       	sbi	0x05, 4	; 5
    644e:	40 e0       	ldi	r20, 0x00	; 0
    6450:	67 e0       	ldi	r22, 0x07	; 7
    6452:	86 e8       	ldi	r24, 0x86	; 134
    6454:	9c e0       	ldi	r25, 0x0C	; 12
    6456:	a6 da       	rcall	.-2740   	; 0x59a4 <_ZN11Diagnostics12troubleshootEhb>
    6458:	80 e0       	ldi	r24, 0x00	; 0
    645a:	08 c0       	rjmp	.+16     	; 0x646c <_ZN8SPIFlash15_notPrevWrittenEmm+0x56>
    645c:	8f ef       	ldi	r24, 0xFF	; 255
    645e:	c8 1a       	sub	r12, r24
    6460:	d8 0a       	sbc	r13, r24
    6462:	e8 0a       	sbc	r14, r24
    6464:	f8 0a       	sbc	r15, r24
    6466:	e8 cf       	rjmp	.-48     	; 0x6438 <_ZN8SPIFlash15_notPrevWrittenEmm+0x22>
    6468:	2c 9a       	sbi	0x05, 4	; 5
    646a:	81 e0       	ldi	r24, 0x01	; 1
    646c:	1f 91       	pop	r17
    646e:	0f 91       	pop	r16
    6470:	ff 90       	pop	r15
    6472:	ef 90       	pop	r14
    6474:	df 90       	pop	r13
    6476:	cf 90       	pop	r12
    6478:	bf 90       	pop	r11
    647a:	af 90       	pop	r10
    647c:	9f 90       	pop	r9
    647e:	8f 90       	pop	r8
    6480:	08 95       	ret

00006482 <_ZN8SPIFlash9_nextByteEch>:
    6482:	84 2f       	mov	r24, r20
    6484:	0c 94 1a 28 	jmp	0x5034	; 0x5034 <_ZN8SPIClass8transferEh>

00006488 <_ZN8SPIFlash8_nextBufEhPhm>:
    6488:	0f 93       	push	r16
    648a:	1f 93       	push	r17
    648c:	ca 01       	movw	r24, r20
    648e:	62 30       	cpi	r22, 0x02	; 2
    6490:	11 f0       	breq	.+4      	; 0x6496 <_ZN8SPIFlash8_nextBufEhPhm+0xe>
    6492:	63 30       	cpi	r22, 0x03	; 3
    6494:	39 f4       	brne	.+14     	; 0x64a4 <_ZN8SPIFlash8_nextBufEhPhm+0x1c>
    6496:	01 15       	cp	r16, r1
    6498:	11 05       	cpc	r17, r1
    649a:	21 f0       	breq	.+8      	; 0x64a4 <_ZN8SPIFlash8_nextBufEhPhm+0x1c>
    649c:	b8 01       	movw	r22, r16
    649e:	1f 91       	pop	r17
    64a0:	0f 91       	pop	r16
    64a2:	d0 ce       	rjmp	.-608    	; 0x6244 <_ZN8SPIClass8transferEPvj.part.0>
    64a4:	1f 91       	pop	r17
    64a6:	0f 91       	pop	r16
    64a8:	08 95       	ret

000064aa <_ZN8SPIFlash7_endSPIEv>:
    64aa:	fc 01       	movw	r30, r24
    64ac:	2c 9a       	sbi	0x05, 4	; 5
    64ae:	80 91 89 0c 	lds	r24, 0x0C89	; 0x800c89 <_ZN8SPIClass13interruptModeE>
    64b2:	88 23       	and	r24, r24
    64b4:	61 f0       	breq	.+24     	; 0x64ce <_ZN8SPIFlash7_endSPIEv+0x24>
    64b6:	9f b7       	in	r25, 0x3f	; 63
    64b8:	f8 94       	cli
    64ba:	20 91 89 0c 	lds	r18, 0x0C89	; 0x800c89 <_ZN8SPIClass13interruptModeE>
    64be:	80 91 87 0c 	lds	r24, 0x0C87	; 0x800c87 <_ZN8SPIClass13interruptSaveE>
    64c2:	21 30       	cpi	r18, 0x01	; 1
    64c4:	19 f4       	brne	.+6      	; 0x64cc <_ZN8SPIFlash7_endSPIEv+0x22>
    64c6:	8d bb       	out	0x1d, r24	; 29
    64c8:	9f bf       	out	0x3f, r25	; 63
    64ca:	01 c0       	rjmp	.+2      	; 0x64ce <_ZN8SPIFlash7_endSPIEv+0x24>
    64cc:	8f bf       	out	0x3f, r24	; 63
    64ce:	87 89       	ldd	r24, Z+23	; 0x17
    64d0:	8c bd       	out	0x2c, r24	; 44
    64d2:	80 8d       	ldd	r24, Z+24	; 0x18
    64d4:	8d bd       	out	0x2d, r24	; 45
    64d6:	16 86       	std	Z+14, r1	; 0x0e
    64d8:	08 95       	ret

000064da <_ZN8SPIFlash10_readStat1Ev>:
    64da:	cf 93       	push	r28
    64dc:	df 93       	push	r29
    64de:	ec 01       	movw	r28, r24
    64e0:	65 e0       	ldi	r22, 0x05	; 5
    64e2:	63 df       	rcall	.-314    	; 0x63aa <_ZN8SPIFlash9_beginSPIEh>
    64e4:	80 e0       	ldi	r24, 0x00	; 0
    64e6:	0e 94 1a 28 	call	0x5034	; 0x5034 <_ZN8SPIClass8transferEh>
    64ea:	8c 8b       	std	Y+20, r24	; 0x14
    64ec:	2c 9a       	sbi	0x05, 4	; 5
    64ee:	8c 89       	ldd	r24, Y+20	; 0x14
    64f0:	df 91       	pop	r29
    64f2:	cf 91       	pop	r28
    64f4:	08 95       	ret

000064f6 <_ZN8SPIFlash18_isChipPoweredDownEv>:
    64f6:	cf 93       	push	r28
    64f8:	fc 01       	movw	r30, r24
    64fa:	c7 85       	ldd	r28, Z+15	; 0x0f
    64fc:	cc 23       	and	r28, r28
    64fe:	29 f0       	breq	.+10     	; 0x650a <_ZN8SPIFlash18_isChipPoweredDownEv+0x14>
    6500:	40 e0       	ldi	r20, 0x00	; 0
    6502:	6f e0       	ldi	r22, 0x0F	; 15
    6504:	86 e8       	ldi	r24, 0x86	; 134
    6506:	9c e0       	ldi	r25, 0x0C	; 12
    6508:	4d da       	rcall	.-2918   	; 0x59a4 <_ZN11Diagnostics12troubleshootEhb>
    650a:	8c 2f       	mov	r24, r28
    650c:	cf 91       	pop	r28
    650e:	08 95       	ret

00006510 <_ZN8SPIFlash8_notBusyEm>:
    6510:	8f 92       	push	r8
    6512:	9f 92       	push	r9
    6514:	af 92       	push	r10
    6516:	bf 92       	push	r11
    6518:	cf 92       	push	r12
    651a:	df 92       	push	r13
    651c:	ef 92       	push	r14
    651e:	ff 92       	push	r15
    6520:	cf 93       	push	r28
    6522:	df 93       	push	r29
    6524:	ec 01       	movw	r28, r24
    6526:	6a 01       	movw	r12, r20
    6528:	7b 01       	movw	r14, r22
    652a:	8a e0       	ldi	r24, 0x0A	; 10
    652c:	8a 95       	dec	r24
    652e:	f1 f7       	brne	.-4      	; 0x652c <_ZN8SPIFlash8_notBusyEm+0x1c>
    6530:	00 c0       	rjmp	.+0      	; 0x6532 <_ZN8SPIFlash8_notBusyEm+0x22>
    6532:	0e 94 18 3c 	call	0x7830	; 0x7830 <micros>
    6536:	4b 01       	movw	r8, r22
    6538:	5c 01       	movw	r10, r24
    653a:	ce 01       	movw	r24, r28
    653c:	ce df       	rcall	.-100    	; 0x64da <_ZN8SPIFlash10_readStat1Ev>
    653e:	8c 89       	ldd	r24, Y+20	; 0x14
    6540:	80 fd       	sbrc	r24, 0
    6542:	02 c0       	rjmp	.+4      	; 0x6548 <_ZN8SPIFlash8_notBusyEm+0x38>
    6544:	81 e0       	ldi	r24, 0x01	; 1
    6546:	20 c0       	rjmp	.+64     	; 0x6588 <_ZN8SPIFlash8_notBusyEm+0x78>
    6548:	0e 94 18 3c 	call	0x7830	; 0x7830 <micros>
    654c:	dc 01       	movw	r26, r24
    654e:	cb 01       	movw	r24, r22
    6550:	88 19       	sub	r24, r8
    6552:	99 09       	sbc	r25, r9
    6554:	aa 09       	sbc	r26, r10
    6556:	bb 09       	sbc	r27, r11
    6558:	8c 15       	cp	r24, r12
    655a:	9d 05       	cpc	r25, r13
    655c:	ae 05       	cpc	r26, r14
    655e:	bf 05       	cpc	r27, r15
    6560:	60 f3       	brcs	.-40     	; 0x653a <_ZN8SPIFlash8_notBusyEm+0x2a>
    6562:	0e 94 18 3c 	call	0x7830	; 0x7830 <micros>
    6566:	dc 01       	movw	r26, r24
    6568:	cb 01       	movw	r24, r22
    656a:	88 19       	sub	r24, r8
    656c:	99 09       	sbc	r25, r9
    656e:	aa 09       	sbc	r26, r10
    6570:	bb 09       	sbc	r27, r11
    6572:	8c 15       	cp	r24, r12
    6574:	9d 05       	cpc	r25, r13
    6576:	ae 05       	cpc	r26, r14
    6578:	bf 05       	cpc	r27, r15
    657a:	20 f3       	brcs	.-56     	; 0x6544 <_ZN8SPIFlash8_notBusyEm+0x34>
    657c:	40 e0       	ldi	r20, 0x00	; 0
    657e:	64 e0       	ldi	r22, 0x04	; 4
    6580:	86 e8       	ldi	r24, 0x86	; 134
    6582:	9c e0       	ldi	r25, 0x0C	; 12
    6584:	0f da       	rcall	.-3042   	; 0x59a4 <_ZN11Diagnostics12troubleshootEhb>
    6586:	80 e0       	ldi	r24, 0x00	; 0
    6588:	df 91       	pop	r29
    658a:	cf 91       	pop	r28
    658c:	ff 90       	pop	r15
    658e:	ef 90       	pop	r14
    6590:	df 90       	pop	r13
    6592:	cf 90       	pop	r12
    6594:	bf 90       	pop	r11
    6596:	af 90       	pop	r10
    6598:	9f 90       	pop	r9
    659a:	8f 90       	pop	r8
    659c:	08 95       	ret

0000659e <_ZN8SPIFlash12_writeEnableEb>:
    659e:	1f 93       	push	r17
    65a0:	cf 93       	push	r28
    65a2:	df 93       	push	r29
    65a4:	ec 01       	movw	r28, r24
    65a6:	16 2f       	mov	r17, r22
    65a8:	66 e0       	ldi	r22, 0x06	; 6
    65aa:	ff de       	rcall	.-514    	; 0x63aa <_ZN8SPIFlash9_beginSPIEh>
    65ac:	2c 9a       	sbi	0x05, 4	; 5
    65ae:	ce 01       	movw	r24, r28
    65b0:	94 df       	rcall	.-216    	; 0x64da <_ZN8SPIFlash10_readStat1Ev>
    65b2:	81 fd       	sbrc	r24, 1
    65b4:	08 c0       	rjmp	.+16     	; 0x65c6 <_ZN8SPIFlash12_writeEnableEb+0x28>
    65b6:	11 23       	and	r17, r17
    65b8:	41 f0       	breq	.+16     	; 0x65ca <_ZN8SPIFlash12_writeEnableEb+0x2c>
    65ba:	40 e0       	ldi	r20, 0x00	; 0
    65bc:	66 e0       	ldi	r22, 0x06	; 6
    65be:	86 e8       	ldi	r24, 0x86	; 134
    65c0:	9c e0       	ldi	r25, 0x0C	; 12
    65c2:	f0 d9       	rcall	.-3104   	; 0x59a4 <_ZN11Diagnostics12troubleshootEhb>
    65c4:	02 c0       	rjmp	.+4      	; 0x65ca <_ZN8SPIFlash12_writeEnableEb+0x2c>
    65c6:	81 e0       	ldi	r24, 0x01	; 1
    65c8:	01 c0       	rjmp	.+2      	; 0x65cc <_ZN8SPIFlash12_writeEnableEb+0x2e>
    65ca:	80 e0       	ldi	r24, 0x00	; 0
    65cc:	df 91       	pop	r29
    65ce:	cf 91       	pop	r28
    65d0:	1f 91       	pop	r17
    65d2:	08 95       	ret

000065d4 <_ZN8SPIFlash5_prepEhmm>:
    65d4:	8f 92       	push	r8
    65d6:	9f 92       	push	r9
    65d8:	af 92       	push	r10
    65da:	bf 92       	push	r11
    65dc:	cf 92       	push	r12
    65de:	df 92       	push	r13
    65e0:	ef 92       	push	r14
    65e2:	ff 92       	push	r15
    65e4:	0f 93       	push	r16
    65e6:	1f 93       	push	r17
    65e8:	cf 93       	push	r28
    65ea:	df 93       	push	r29
    65ec:	ec 01       	movw	r28, r24
    65ee:	49 01       	movw	r8, r18
    65f0:	5a 01       	movw	r10, r20
    65f2:	67 01       	movw	r12, r14
    65f4:	78 01       	movw	r14, r16
    65f6:	62 30       	cpi	r22, 0x02	; 2
    65f8:	19 f0       	breq	.+6      	; 0x6600 <_ZN8SPIFlash5_prepEhmm+0x2c>
    65fa:	6f 3e       	cpi	r22, 0xEF	; 239
    65fc:	99 f0       	breq	.+38     	; 0x6624 <_ZN8SPIFlash5_prepEhmm+0x50>
    65fe:	2c c0       	rjmp	.+88     	; 0x6658 <_ZN8SPIFlash5_prepEhmm+0x84>
    6600:	7a df       	rcall	.-268    	; 0x64f6 <_ZN8SPIFlash18_isChipPoweredDownEv>
    6602:	81 11       	cpse	r24, r1
    6604:	3b c0       	rjmp	.+118    	; 0x667c <_ZN8SPIFlash5_prepEhmm+0xa8>
    6606:	97 01       	movw	r18, r14
    6608:	86 01       	movw	r16, r12
    660a:	b5 01       	movw	r22, r10
    660c:	a4 01       	movw	r20, r8
    660e:	ce 01       	movw	r24, r28
    6610:	33 de       	rcall	.-922    	; 0x6278 <_ZN8SPIFlash13_addressCheckEmm>
    6612:	88 23       	and	r24, r24
    6614:	99 f1       	breq	.+102    	; 0x667c <_ZN8SPIFlash5_prepEhmm+0xa8>
    6616:	97 01       	movw	r18, r14
    6618:	86 01       	movw	r16, r12
    661a:	b5 01       	movw	r22, r10
    661c:	a4 01       	movw	r20, r8
    661e:	ce 01       	movw	r24, r28
    6620:	fa de       	rcall	.-524    	; 0x6416 <_ZN8SPIFlash15_notPrevWrittenEmm>
    6622:	09 c0       	rjmp	.+18     	; 0x6636 <_ZN8SPIFlash5_prepEhmm+0x62>
    6624:	68 df       	rcall	.-304    	; 0x64f6 <_ZN8SPIFlash18_isChipPoweredDownEv>
    6626:	81 11       	cpse	r24, r1
    6628:	29 c0       	rjmp	.+82     	; 0x667c <_ZN8SPIFlash5_prepEhmm+0xa8>
    662a:	97 01       	movw	r18, r14
    662c:	86 01       	movw	r16, r12
    662e:	b5 01       	movw	r22, r10
    6630:	a4 01       	movw	r20, r8
    6632:	ce 01       	movw	r24, r28
    6634:	21 de       	rcall	.-958    	; 0x6278 <_ZN8SPIFlash13_addressCheckEmm>
    6636:	88 23       	and	r24, r24
    6638:	09 f1       	breq	.+66     	; 0x667c <_ZN8SPIFlash5_prepEhmm+0xa8>
    663a:	40 e0       	ldi	r20, 0x00	; 0
    663c:	5a ec       	ldi	r21, 0xCA	; 202
    663e:	6a e9       	ldi	r22, 0x9A	; 154
    6640:	7b e3       	ldi	r23, 0x3B	; 59
    6642:	ce 01       	movw	r24, r28
    6644:	65 df       	rcall	.-310    	; 0x6510 <_ZN8SPIFlash8_notBusyEm>
    6646:	88 23       	and	r24, r24
    6648:	c9 f0       	breq	.+50     	; 0x667c <_ZN8SPIFlash5_prepEhmm+0xa8>
    664a:	61 e0       	ldi	r22, 0x01	; 1
    664c:	ce 01       	movw	r24, r28
    664e:	a7 df       	rcall	.-178    	; 0x659e <_ZN8SPIFlash12_writeEnableEb>
    6650:	88 23       	and	r24, r24
    6652:	a1 f0       	breq	.+40     	; 0x667c <_ZN8SPIFlash5_prepEhmm+0xa8>
    6654:	81 e0       	ldi	r24, 0x01	; 1
    6656:	13 c0       	rjmp	.+38     	; 0x667e <_ZN8SPIFlash5_prepEhmm+0xaa>
    6658:	4e df       	rcall	.-356    	; 0x64f6 <_ZN8SPIFlash18_isChipPoweredDownEv>
    665a:	81 11       	cpse	r24, r1
    665c:	0f c0       	rjmp	.+30     	; 0x667c <_ZN8SPIFlash5_prepEhmm+0xa8>
    665e:	97 01       	movw	r18, r14
    6660:	86 01       	movw	r16, r12
    6662:	b5 01       	movw	r22, r10
    6664:	a4 01       	movw	r20, r8
    6666:	ce 01       	movw	r24, r28
    6668:	07 de       	rcall	.-1010   	; 0x6278 <_ZN8SPIFlash13_addressCheckEmm>
    666a:	88 23       	and	r24, r24
    666c:	39 f0       	breq	.+14     	; 0x667c <_ZN8SPIFlash5_prepEhmm+0xa8>
    666e:	40 e0       	ldi	r20, 0x00	; 0
    6670:	5a ec       	ldi	r21, 0xCA	; 202
    6672:	6a e9       	ldi	r22, 0x9A	; 154
    6674:	7b e3       	ldi	r23, 0x3B	; 59
    6676:	ce 01       	movw	r24, r28
    6678:	4b df       	rcall	.-362    	; 0x6510 <_ZN8SPIFlash8_notBusyEm>
    667a:	ea cf       	rjmp	.-44     	; 0x6650 <_ZN8SPIFlash5_prepEhmm+0x7c>
    667c:	80 e0       	ldi	r24, 0x00	; 0
    667e:	df 91       	pop	r29
    6680:	cf 91       	pop	r28
    6682:	1f 91       	pop	r17
    6684:	0f 91       	pop	r16
    6686:	ff 90       	pop	r15
    6688:	ef 90       	pop	r14
    668a:	df 90       	pop	r13
    668c:	cf 90       	pop	r12
    668e:	bf 90       	pop	r11
    6690:	af 90       	pop	r10
    6692:	9f 90       	pop	r9
    6694:	8f 90       	pop	r8
    6696:	08 95       	ret

00006698 <_ZN8SPIFlash13_writeDisableEv>:
    6698:	64 e0       	ldi	r22, 0x04	; 4
    669a:	87 de       	rcall	.-754    	; 0x63aa <_ZN8SPIFlash9_beginSPIEh>
    669c:	2c 9a       	sbi	0x05, 4	; 5
    669e:	81 e0       	ldi	r24, 0x01	; 1
    66a0:	08 95       	ret

000066a2 <_ZN8SPIFlash11_getJedecIdEv>:

 //Checks for presence of chip by requesting JEDEC ID
 bool SPIFlash::_getJedecId(void) {
    66a2:	1f 93       	push	r17
    66a4:	cf 93       	push	r28
    66a6:	df 93       	push	r29
    66a8:	ec 01       	movw	r28, r24
   if(!_notBusy()) {
    66aa:	40 e0       	ldi	r20, 0x00	; 0
    66ac:	5a ec       	ldi	r21, 0xCA	; 202
    66ae:	6a e9       	ldi	r22, 0x9A	; 154
    66b0:	7b e3       	ldi	r23, 0x3B	; 59
    66b2:	2e df       	rcall	.-420    	; 0x6510 <_ZN8SPIFlash8_notBusyEm>
    66b4:	18 2f       	mov	r17, r24
    66b6:	88 23       	and	r24, r24
    66b8:	c9 f0       	breq	.+50     	; 0x66ec <_ZN8SPIFlash11_getJedecIdEv+0x4a>
     return false;
   }
   _beginSPI(JEDECID);
    66ba:	6f e9       	ldi	r22, 0x9F	; 159
    66bc:	ce 01       	movw	r24, r28
    66be:	75 de       	rcall	.-790    	; 0x63aa <_ZN8SPIFlash9_beginSPIEh>
     return rxData.val;
   #else
     return xfer(data);
   #endif
 #else
   return xfer(data);
    66c0:	80 e0       	ldi	r24, 0x00	; 0
    66c2:	0e 94 1a 28 	call	0x5034	; 0x5034 <_ZN8SPIClass8transferEh>
 bool SPIFlash::_getJedecId(void) {
   if(!_notBusy()) {
     return false;
   }
   _beginSPI(JEDECID);
 	_chip.manufacturerID = _nextByte(READ);		// manufacturer id
    66c6:	8d a3       	std	Y+37, r24	; 0x25
     return rxData.val;
   #else
     return xfer(data);
   #endif
 #else
   return xfer(data);
    66c8:	80 e0       	ldi	r24, 0x00	; 0
    66ca:	0e 94 1a 28 	call	0x5034	; 0x5034 <_ZN8SPIClass8transferEh>
   if(!_notBusy()) {
     return false;
   }
   _beginSPI(JEDECID);
 	_chip.manufacturerID = _nextByte(READ);		// manufacturer id
 	_chip.memoryTypeID = _nextByte(READ);		// memory type
    66ce:	8e a3       	std	Y+38, r24	; 0x26
     return rxData.val;
   #else
     return xfer(data);
   #endif
 #else
   return xfer(data);
    66d0:	80 e0       	ldi	r24, 0x00	; 0
    66d2:	0e 94 1a 28 	call	0x5034	; 0x5034 <_ZN8SPIClass8transferEh>
     return false;
   }
   _beginSPI(JEDECID);
 	_chip.manufacturerID = _nextByte(READ);		// manufacturer id
 	_chip.memoryTypeID = _nextByte(READ);		// memory type
 	_chip.capacityID = _nextByte(READ);		// capacity
    66d6:	8f a3       	std	Y+39, r24	; 0x27
   CHIP_DESELECT
    66d8:	2c 9a       	sbi	0x05, 4	; 5
   if (!_chip.manufacturerID) {
    66da:	8d a1       	ldd	r24, Y+37	; 0x25
    66dc:	81 11       	cpse	r24, r1
    66de:	06 c0       	rjmp	.+12     	; 0x66ec <_ZN8SPIFlash11_getJedecIdEv+0x4a>
   return true;
 }

 //Troubleshooting function. Called when #ifdef RUNDIAGNOSTIC is uncommented at the top of this file.
 void SPIFlash::_troubleshoot(uint8_t _code, bool printoverride) {
   diagnostics.troubleshoot(_code, printoverride);
    66e0:	40 e0       	ldi	r20, 0x00	; 0
    66e2:	6b e0       	ldi	r22, 0x0B	; 11
    66e4:	86 e8       	ldi	r24, 0x86	; 134
    66e6:	9c e0       	ldi	r25, 0x0C	; 12
    66e8:	5d d9       	rcall	.-3398   	; 0x59a4 <_ZN11Diagnostics12troubleshootEhb>
    66ea:	10 e0       	ldi	r17, 0x00	; 0
     return false;
   }
   else {
     return true;
   }
 }
    66ec:	81 2f       	mov	r24, r17
    66ee:	df 91       	pop	r29
    66f0:	cf 91       	pop	r28
    66f2:	1f 91       	pop	r17
    66f4:	08 95       	ret

000066f6 <_ZN8SPIFlash26_disableGlobalBlockProtectEv>:

 bool SPIFlash::_disableGlobalBlockProtect(void) {
    66f6:	1f 93       	push	r17
    66f8:	cf 93       	push	r28
    66fa:	df 93       	push	r29
    66fc:	ec 01       	movw	r28, r24
   if (_chip.memoryTypeID == SST25) {
    66fe:	8e a1       	ldd	r24, Y+38	; 0x26
    6700:	85 32       	cpi	r24, 0x25	; 37
    6702:	81 f4       	brne	.+32     	; 0x6724 <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x2e>
     _readStat1();
    6704:	ce 01       	movw	r24, r28
    6706:	e9 de       	rcall	.-558    	; 0x64da <_ZN8SPIFlash10_readStat1Ev>
     uint8_t _tempStat1 = stat1 & 0xC3;
    6708:	1c 89       	ldd	r17, Y+20	; 0x14
    670a:	13 7c       	andi	r17, 0xC3	; 195
     _beginSPI(WRITESTATEN);
    670c:	60 e5       	ldi	r22, 0x50	; 80
    670e:	ce 01       	movw	r24, r28
    6710:	4c de       	rcall	.-872    	; 0x63aa <_ZN8SPIFlash9_beginSPIEh>
     CHIP_DESELECT
    6712:	2c 9a       	sbi	0x05, 4	; 5
     _beginSPI(WRITESTAT1);
    6714:	61 e0       	ldi	r22, 0x01	; 1
    6716:	ce 01       	movw	r24, r28
    6718:	48 de       	rcall	.-880    	; 0x63aa <_ZN8SPIFlash9_beginSPIEh>
     return rxData.val;
   #else
     return xfer(data);
   #endif
 #else
   return xfer(data);
    671a:	81 2f       	mov	r24, r17
    671c:	0e 94 1a 28 	call	0x5034	; 0x5034 <_ZN8SPIClass8transferEh>
     uint8_t _tempStat1 = stat1 & 0xC3;
     _beginSPI(WRITESTATEN);
     CHIP_DESELECT
     _beginSPI(WRITESTAT1);
     _nextByte(WRITE, _tempStat1);
     CHIP_DESELECT
    6720:	2c 9a       	sbi	0x05, 4	; 5
    6722:	1f c0       	rjmp	.+62     	; 0x6762 <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x6c>
   }
   else if (_chip.memoryTypeID == SST26) {
    6724:	86 32       	cpi	r24, 0x26	; 38
    6726:	e9 f4       	brne	.+58     	; 0x6762 <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x6c>
     if(!_notBusy()) {
    6728:	40 e0       	ldi	r20, 0x00	; 0
    672a:	5a ec       	ldi	r21, 0xCA	; 202
    672c:	6a e9       	ldi	r22, 0x9A	; 154
    672e:	7b e3       	ldi	r23, 0x3B	; 59
    6730:	ce 01       	movw	r24, r28
    6732:	ee de       	rcall	.-548    	; 0x6510 <_ZN8SPIFlash8_notBusyEm>
    6734:	18 2f       	mov	r17, r24
    6736:	88 23       	and	r24, r24
     	return false;
     }
     _writeEnable();
    6738:	a9 f0       	breq	.+42     	; 0x6764 <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x6e>
    673a:	61 e0       	ldi	r22, 0x01	; 1
    673c:	ce 01       	movw	r24, r28
    673e:	2f df       	rcall	.-418    	; 0x659e <_ZN8SPIFlash12_writeEnableEb>
    6740:	85 e3       	ldi	r24, 0x35	; 53
    6742:	8a 95       	dec	r24
    6744:	f1 f7       	brne	.-4      	; 0x6742 <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x4c>
     _delay_us(10);
     _beginSPI(ULBPR);
    6746:	00 00       	nop
    6748:	68 e9       	ldi	r22, 0x98	; 152
    674a:	ce 01       	movw	r24, r28
    674c:	2e de       	rcall	.-932    	; 0x63aa <_ZN8SPIFlash9_beginSPIEh>
     CHIP_DESELECT
    674e:	2c 9a       	sbi	0x05, 4	; 5
    6750:	87 ec       	ldi	r24, 0xC7	; 199
    6752:	90 e0       	ldi	r25, 0x00	; 0
    6754:	01 97       	sbiw	r24, 0x01	; 1
    6756:	f1 f7       	brne	.-4      	; 0x6754 <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x5e>
    6758:	00 c0       	rjmp	.+0      	; 0x675a <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x64>
     _delay_us(50);
     _writeDisable();
    675a:	00 00       	nop
    675c:	ce 01       	movw	r24, r28
    675e:	9c df       	rcall	.-200    	; 0x6698 <_ZN8SPIFlash13_writeDisableEv>
    6760:	01 c0       	rjmp	.+2      	; 0x6764 <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x6e>
   }
   return true;
    6762:	11 e0       	ldi	r17, 0x01	; 1
 }
    6764:	81 2f       	mov	r24, r17
    6766:	df 91       	pop	r29
    6768:	cf 91       	pop	r28
    676a:	1f 91       	pop	r17
    676c:	08 95       	ret

0000676e <_ZN8SPIFlash7_chipIDEm>:

 //Identifies the chip
 bool SPIFlash::_chipID(uint32_t flashChipSize) {
    676e:	cf 92       	push	r12
    6770:	df 92       	push	r13
    6772:	ef 92       	push	r14
    6774:	ff 92       	push	r15
    6776:	0f 93       	push	r16
    6778:	1f 93       	push	r17
    677a:	cf 93       	push	r28
    677c:	df 93       	push	r29
    677e:	ec 01       	movw	r28, r24
    6780:	6a 01       	movw	r12, r20
    6782:	7b 01       	movw	r14, r22
   //set some default values
   kb4Erase.supported = kb32Erase.supported = kb64Erase.supported = chipErase.supported = true;
    6784:	fc 01       	movw	r30, r24
    6786:	e8 5b       	subi	r30, 0xB8	; 184
    6788:	ff 4f       	sbci	r31, 0xFF	; 255
    678a:	81 e0       	ldi	r24, 0x01	; 1
    678c:	80 83       	st	Z, r24
    678e:	8c af       	std	Y+60, r24	; 0x3c
    6790:	8e ab       	std	Y+54, r24	; 0x36
    6792:	88 ab       	std	Y+48, r24	; 0x30
   kb4Erase.opcode = SECTORERASE;
    6794:	80 e2       	ldi	r24, 0x20	; 32
    6796:	89 ab       	std	Y+49, r24	; 0x31
   kb32Erase.opcode = BLOCK32ERASE;
    6798:	82 e5       	ldi	r24, 0x52	; 82
    679a:	8f ab       	std	Y+55, r24	; 0x37
   kb64Erase.opcode = BLOCK64ERASE;
    679c:	88 ed       	ldi	r24, 0xD8	; 216
    679e:	8d af       	std	Y+61, r24	; 0x3d
   kb4Erase.time = BUSY_TIMEOUT;
    67a0:	80 e0       	ldi	r24, 0x00	; 0
    67a2:	9a ec       	ldi	r25, 0xCA	; 202
    67a4:	aa e9       	ldi	r26, 0x9A	; 154
    67a6:	bb e3       	ldi	r27, 0x3B	; 59
    67a8:	8a ab       	std	Y+50, r24	; 0x32
    67aa:	9b ab       	std	Y+51, r25	; 0x33
    67ac:	ac ab       	std	Y+52, r26	; 0x34
    67ae:	bd ab       	std	Y+53, r27	; 0x35
   kb32Erase.time = kb4Erase.time * 8;
    67b0:	80 e0       	ldi	r24, 0x00	; 0
    67b2:	90 e5       	ldi	r25, 0x50	; 80
    67b4:	a6 ed       	ldi	r26, 0xD6	; 214
    67b6:	bc ed       	ldi	r27, 0xDC	; 220
    67b8:	88 af       	std	Y+56, r24	; 0x38
    67ba:	99 af       	std	Y+57, r25	; 0x39
    67bc:	aa af       	std	Y+58, r26	; 0x3a
    67be:	bb af       	std	Y+59, r27	; 0x3b
   kb64Erase.time = kb32Erase.time * 4;
    67c0:	3a 97       	sbiw	r30, 0x0a	; 10
    67c2:	80 e0       	ldi	r24, 0x00	; 0
    67c4:	90 e4       	ldi	r25, 0x40	; 64
    67c6:	a9 e5       	ldi	r26, 0x59	; 89
    67c8:	b3 e7       	ldi	r27, 0x73	; 115
    67ca:	80 83       	st	Z, r24
    67cc:	91 83       	std	Z+1, r25	; 0x01
    67ce:	a2 83       	std	Z+2, r26	; 0x02
    67d0:	b3 83       	std	Z+3, r27	; 0x03
   kb256Erase.supported = false;
    67d2:	34 96       	adiw	r30, 0x04	; 4
    67d4:	10 82       	st	Z, r1
   chipErase.opcode = CHIPERASE;
    67d6:	8e 01       	movw	r16, r28
    67d8:	07 5b       	subi	r16, 0xB7	; 183
    67da:	1f 4f       	sbci	r17, 0xFF	; 255
    67dc:	80 e6       	ldi	r24, 0x60	; 96
    67de:	f8 01       	movw	r30, r16
    67e0:	80 83       	st	Z, r24
   chipErase.time = kb64Erase.time * 100L;
    67e2:	31 96       	adiw	r30, 0x01	; 1
    67e4:	80 e0       	ldi	r24, 0x00	; 0
    67e6:	90 e0       	ldi	r25, 0x00	; 0
    67e8:	ad ed       	ldi	r26, 0xDD	; 221
    67ea:	be e0       	ldi	r27, 0x0E	; 14
    67ec:	80 83       	st	Z, r24
    67ee:	91 83       	std	Z+1, r25	; 0x01
    67f0:	a2 83       	std	Z+2, r26	; 0x02
    67f2:	b3 83       	std	Z+3, r27	; 0x03
   _pageSize = SPI_PAGESIZE;
    67f4:	3a 96       	adiw	r30, 0x0a	; 10
    67f6:	80 e0       	ldi	r24, 0x00	; 0
    67f8:	91 e0       	ldi	r25, 0x01	; 1
    67fa:	91 83       	std	Z+1, r25	; 0x01
    67fc:	80 83       	st	Z, r24

   _getJedecId();
    67fe:	ce 01       	movw	r24, r28
    6800:	50 df       	rcall	.-352    	; 0x66a2 <_ZN8SPIFlash11_getJedecIdEv>

   for (uint8_t i = 0; i < sizeof(_supportedManID); i++) {
     if (_chip.manufacturerID == _supportedManID[i]) {
    6802:	9d a1       	ldd	r25, Y+37	; 0x25
    6804:	fe 01       	movw	r30, r28
    6806:	e8 52       	subi	r30, 0x28	; 40
    6808:	ff 4f       	sbci	r31, 0xFF	; 255
    680a:	de 01       	movw	r26, r28
    680c:	af 51       	subi	r26, 0x1F	; 31
    680e:	bf 4f       	sbci	r27, 0xFF	; 255
    6810:	81 91       	ld	r24, Z+
    6812:	98 13       	cpse	r25, r24
    6814:	03 c0       	rjmp	.+6      	; 0x681c <_ZN8SPIFlash7_chipIDEm+0xae>
       _chip.supportedMan = true;
    6816:	81 e0       	ldi	r24, 0x01	; 1
    6818:	8b a3       	std	Y+35, r24	; 0x23
       break;
    681a:	03 c0       	rjmp	.+6      	; 0x6822 <_ZN8SPIFlash7_chipIDEm+0xb4>
   chipErase.time = kb64Erase.time * 100L;
   _pageSize = SPI_PAGESIZE;

   _getJedecId();

   for (uint8_t i = 0; i < sizeof(_supportedManID); i++) {
    681c:	ea 17       	cp	r30, r26
    681e:	fb 07       	cpc	r31, r27
    6820:	b9 f7       	brne	.-18     	; 0x6810 <_ZN8SPIFlash7_chipIDEm+0xa2>
       break;
     }
   }

   for (uint8_t i = 0; i < sizeof(_altChipEraseReq); i++) {
     if (_chip.memoryTypeID == _altChipEraseReq[i]) {
    6822:	8e a1       	ldd	r24, Y+38	; 0x26
    6824:	2c 91       	ld	r18, X
    6826:	82 17       	cp	r24, r18
    6828:	51 f0       	breq	.+20     	; 0x683e <_ZN8SPIFlash7_chipIDEm+0xd0>
    682a:	fe 01       	movw	r30, r28
    682c:	ee 51       	subi	r30, 0x1E	; 30
    682e:	ff 4f       	sbci	r31, 0xFF	; 255
    6830:	20 81       	ld	r18, Z
    6832:	82 17       	cp	r24, r18
    6834:	21 f0       	breq	.+8      	; 0x683e <_ZN8SPIFlash7_chipIDEm+0xd0>
    6836:	31 96       	adiw	r30, 0x01	; 1
    6838:	20 81       	ld	r18, Z
    683a:	82 13       	cpse	r24, r18
    683c:	03 c0       	rjmp	.+6      	; 0x6844 <_ZN8SPIFlash7_chipIDEm+0xd6>
       chipErase.opcode = ALT_CHIPERASE;
    683e:	87 ec       	ldi	r24, 0xC7	; 199
    6840:	f8 01       	movw	r30, r16
    6842:	80 83       	st	Z, r24
       _getSFDPFlashParam();
     }
    #endif
     //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ End SFDP ID section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//

   if (_chip.supportedMan) {
    6844:	1b a1       	ldd	r17, Y+35	; 0x23
    6846:	11 23       	and	r17, r17
    6848:	d9 f1       	breq	.+118    	; 0x68c0 <_ZN8SPIFlash7_chipIDEm+0x152>
     #ifdef RUNDIAGNOSTIC
       Serial.println(F("No Chip size defined by user. Checking library support."));
     #endif
     //Identify capacity
     if(_chip.manufacturerID == MACRONIX_MANID)
    684a:	92 3c       	cpi	r25, 0xC2	; 194
    684c:	c1 f4       	brne	.+48     	; 0x687e <_ZN8SPIFlash7_chipIDEm+0x110>
     {
       switch(_chip.capacityID)
    684e:	8f a1       	ldd	r24, Y+39	; 0x27
    6850:	83 31       	cpi	r24, 0x13	; 19
    6852:	39 f0       	breq	.+14     	; 0x6862 <_ZN8SPIFlash7_chipIDEm+0xf4>
    6854:	84 31       	cpi	r24, 0x14	; 20
    6856:	71 f4       	brne	.+28     	; 0x6874 <_ZN8SPIFlash7_chipIDEm+0x106>
         case MX25L4005:
         _chip.capacity = MB(4);
         break;

         case MX25L8005:
         _chip.capacity = MB(8);
    6858:	80 e0       	ldi	r24, 0x00	; 0
    685a:	90 e0       	ldi	r25, 0x00	; 0
    685c:	a0 e8       	ldi	r26, 0x80	; 128
    685e:	b0 e0       	ldi	r27, 0x00	; 0
    6860:	04 c0       	rjmp	.+8      	; 0x686a <_ZN8SPIFlash7_chipIDEm+0xfc>
     if(_chip.manufacturerID == MACRONIX_MANID)
     {
       switch(_chip.capacityID)
       {
         case MX25L4005:
         _chip.capacity = MB(4);
    6862:	80 e0       	ldi	r24, 0x00	; 0
    6864:	90 e0       	ldi	r25, 0x00	; 0
    6866:	a0 e4       	ldi	r26, 0x40	; 64
    6868:	b0 e0       	ldi	r27, 0x00	; 0
         break;

         case MX25L8005:
         _chip.capacity = MB(8);
    686a:	88 a7       	std	Y+40, r24	; 0x28
    686c:	99 a7       	std	Y+41, r25	; 0x29
    686e:	aa a7       	std	Y+42, r26	; 0x2a
    6870:	bb a7       	std	Y+43, r27	; 0x2b
         break;
    6872:	05 c0       	rjmp	.+10     	; 0x687e <_ZN8SPIFlash7_chipIDEm+0x110>
   return true;
 }

 //Troubleshooting function. Called when #ifdef RUNDIAGNOSTIC is uncommented at the top of this file.
 void SPIFlash::_troubleshoot(uint8_t _code, bool printoverride) {
   diagnostics.troubleshoot(_code, printoverride);
    6874:	40 e0       	ldi	r20, 0x00	; 0
    6876:	62 e0       	ldi	r22, 0x02	; 2
    6878:	86 e8       	ldi	r24, 0x86	; 134
    687a:	9c e0       	ldi	r25, 0x0C	; 12
    687c:	93 d8       	rcall	.-3802   	; 0x59a4 <_ZN11Diagnostics12troubleshootEhb>
         default:
         _troubleshoot(UNKNOWNCHIP); //Error code for unidentified capacity
 		 } //TODO - Set up other manufaturerIDs in a similar pattern.
 	 }
     for (uint8_t j = 0; j < sizeof(_capID); j++) {
       if (_chip.capacityID == _capID[j]) {
    687e:	2f a1       	ldd	r18, Y+39	; 0x27
    6880:	fe 01       	movw	r30, r28
    6882:	e2 58       	subi	r30, 0x82	; 130
    6884:	ff 4f       	sbci	r31, 0xFF	; 255
    6886:	80 e0       	ldi	r24, 0x00	; 0
    6888:	90 e0       	ldi	r25, 0x00	; 0
    688a:	31 91       	ld	r19, Z+
    688c:	23 13       	cpse	r18, r19
    688e:	13 c0       	rjmp	.+38     	; 0x68b6 <_ZN8SPIFlash7_chipIDEm+0x148>
         _chip.capacity = (_memSize[j]);
    6890:	fc 01       	movw	r30, r24
    6892:	b4 96       	adiw	r30, 0x24	; 36
    6894:	ee 0f       	add	r30, r30
    6896:	ff 1f       	adc	r31, r31
    6898:	ee 0f       	add	r30, r30
    689a:	ff 1f       	adc	r31, r31
    689c:	ec 0f       	add	r30, r28
    689e:	fd 1f       	adc	r31, r29
    68a0:	80 81       	ld	r24, Z
    68a2:	91 81       	ldd	r25, Z+1	; 0x01
    68a4:	a2 81       	ldd	r26, Z+2	; 0x02
    68a6:	b3 81       	ldd	r27, Z+3	; 0x03
    68a8:	88 a7       	std	Y+40, r24	; 0x28
    68aa:	99 a7       	std	Y+41, r25	; 0x29
    68ac:	aa a7       	std	Y+42, r26	; 0x2a
    68ae:	bb a7       	std	Y+43, r27	; 0x2b
         _chip.supported = true;
    68b0:	81 e0       	ldi	r24, 0x01	; 1
    68b2:	8a a3       	std	Y+34, r24	; 0x22
         #ifdef RUNDIAGNOSTIC
           Serial.println(F("Chip identified. This chip is fully supported by the library."));
         #endif
         return true;
    68b4:	29 c0       	rjmp	.+82     	; 0x6908 <_ZN8SPIFlash7_chipIDEm+0x19a>
    68b6:	01 96       	adiw	r24, 0x01	; 1

         default:
         _troubleshoot(UNKNOWNCHIP); //Error code for unidentified capacity
 		 } //TODO - Set up other manufaturerIDs in a similar pattern.
 	 }
     for (uint8_t j = 0; j < sizeof(_capID); j++) {
    68b8:	82 31       	cpi	r24, 0x12	; 18
    68ba:	91 05       	cpc	r25, r1
    68bc:	31 f7       	brne	.-52     	; 0x688a <_ZN8SPIFlash7_chipIDEm+0x11c>
    68be:	0b c0       	rjmp	.+22     	; 0x68d6 <_ZN8SPIFlash7_chipIDEm+0x168>
         return true;
       }
     }
   }
   else {
     if (_chip.sfdpAvailable) {
    68c0:	1c a1       	ldd	r17, Y+36	; 0x24
    68c2:	11 23       	and	r17, r17
    68c4:	11 f0       	breq	.+4      	; 0x68ca <_ZN8SPIFlash7_chipIDEm+0x15c>
       #ifdef RUNDIAGNOSTIC
         Serial.println(F("SFDP ID finished."));
       #endif
       return true;
    68c6:	11 e0       	ldi	r17, 0x01	; 1
    68c8:	1f c0       	rjmp	.+62     	; 0x6908 <_ZN8SPIFlash7_chipIDEm+0x19a>
   return true;
 }

 //Troubleshooting function. Called when #ifdef RUNDIAGNOSTIC is uncommented at the top of this file.
 void SPIFlash::_troubleshoot(uint8_t _code, bool printoverride) {
   diagnostics.troubleshoot(_code, printoverride);
    68ca:	40 e0       	ldi	r20, 0x00	; 0
    68cc:	62 e0       	ldi	r22, 0x02	; 2
    68ce:	86 e8       	ldi	r24, 0x86	; 134
    68d0:	9c e0       	ldi	r25, 0x0C	; 12
    68d2:	68 d8       	rcall	.-3888   	; 0x59a4 <_ZN11Diagnostics12troubleshootEhb>
       #endif
       return true;
     }
     else {
       _troubleshoot(UNKNOWNCHIP); //Error code for unidentified capacity
       return false;
    68d4:	19 c0       	rjmp	.+50     	; 0x6908 <_ZN8SPIFlash7_chipIDEm+0x19a>
     }

   }

   if (!_chip.capacity) {
    68d6:	88 a5       	ldd	r24, Y+40	; 0x28
    68d8:	99 a5       	ldd	r25, Y+41	; 0x29
    68da:	aa a5       	ldd	r26, Y+42	; 0x2a
    68dc:	bb a5       	ldd	r27, Y+43	; 0x2b
    68de:	89 2b       	or	r24, r25
    68e0:	8a 2b       	or	r24, r26
    68e2:	8b 2b       	or	r24, r27
    68e4:	81 f7       	brne	.-32     	; 0x68c6 <_ZN8SPIFlash7_chipIDEm+0x158>
     #ifdef RUNDIAGNOSTIC
       Serial.println(F("Chip capacity cannot be identified"));
     #endif
     if (flashChipSize) {
    68e6:	c1 14       	cp	r12, r1
    68e8:	d1 04       	cpc	r13, r1
    68ea:	e1 04       	cpc	r14, r1
    68ec:	f1 04       	cpc	r15, r1
    68ee:	31 f0       	breq	.+12     	; 0x68fc <_ZN8SPIFlash7_chipIDEm+0x18e>
       // If a custom chip size is defined
       #ifdef RUNDIAGNOSTIC
       Serial.println(F("Custom Chipsize defined"));
       #endif
       _chip.capacity = flashChipSize;
    68f0:	c8 a6       	std	Y+40, r12	; 0x28
    68f2:	d9 a6       	std	Y+41, r13	; 0x29
    68f4:	ea a6       	std	Y+42, r14	; 0x2a
    68f6:	fb a6       	std	Y+43, r15	; 0x2b
       _chip.supported = false;
    68f8:	1a a2       	std	Y+34, r1	; 0x22
       return true;
    68fa:	06 c0       	rjmp	.+12     	; 0x6908 <_ZN8SPIFlash7_chipIDEm+0x19a>
   return true;
 }

 //Troubleshooting function. Called when #ifdef RUNDIAGNOSTIC is uncommented at the top of this file.
 void SPIFlash::_troubleshoot(uint8_t _code, bool printoverride) {
   diagnostics.troubleshoot(_code, printoverride);
    68fc:	40 e0       	ldi	r20, 0x00	; 0
    68fe:	63 e0       	ldi	r22, 0x03	; 3
    6900:	86 e8       	ldi	r24, 0x86	; 134
    6902:	9c e0       	ldi	r25, 0x0C	; 12
    6904:	4f d8       	rcall	.-3938   	; 0x59a4 <_ZN11Diagnostics12troubleshootEhb>
       return true;
     }

     else {
       _troubleshoot(UNKNOWNCAP);
       return false;
    6906:	10 e0       	ldi	r17, 0x00	; 0
     }

   }
   return true;
 }
    6908:	81 2f       	mov	r24, r17
    690a:	df 91       	pop	r29
    690c:	cf 91       	pop	r28
    690e:	1f 91       	pop	r17
    6910:	0f 91       	pop	r16
    6912:	ff 90       	pop	r15
    6914:	ef 90       	pop	r14
    6916:	df 90       	pop	r13
    6918:	cf 90       	pop	r12
    691a:	08 95       	ret

0000691c <_ZN8SPIFlash13_troubleshootEhb>:

 //Troubleshooting function. Called when #ifdef RUNDIAGNOSTIC is uncommented at the top of this file.
 void SPIFlash::_troubleshoot(uint8_t _code, bool printoverride) {
   diagnostics.troubleshoot(_code, printoverride);
    691c:	86 e8       	ldi	r24, 0x86	; 134
    691e:	9c e0       	ldi	r25, 0x0C	; 12
    6920:	41 c8       	rjmp	.-3966   	; 0x59a4 <_ZN11Diagnostics12troubleshootEhb>

00006922 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    6922:	cf 93       	push	r28
  uint8_t sreg = SREG;
    6924:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    6926:	f8 94       	cli
  if (!initialized) {
    6928:	80 91 8a 0c 	lds	r24, 0x0C8A	; 0x800c8a <_ZN8SPIClass11initializedE>
    692c:	81 11       	cpse	r24, r1
    692e:	27 c0       	rjmp	.+78     	; 0x697e <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    6930:	e4 e8       	ldi	r30, 0x84	; 132
    6932:	f2 e0       	ldi	r31, 0x02	; 2
    6934:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    6936:	e4 e6       	ldi	r30, 0x64	; 100
    6938:	f2 e0       	ldi	r31, 0x02	; 2
    693a:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    693c:	e8 2f       	mov	r30, r24
    693e:	f0 e0       	ldi	r31, 0x00	; 0
    6940:	ee 0f       	add	r30, r30
    6942:	ff 1f       	adc	r31, r31
    6944:	e2 55       	subi	r30, 0x52	; 82
    6946:	fd 4f       	sbci	r31, 0xFD	; 253
    6948:	a5 91       	lpm	r26, Z+
    694a:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    694c:	ec 91       	ld	r30, X
    694e:	e9 23       	and	r30, r25
    6950:	21 f4       	brne	.+8      	; 0x695a <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    6952:	61 e0       	ldi	r22, 0x01	; 1
    6954:	8a e0       	ldi	r24, 0x0A	; 10
    6956:	0e 94 21 3d 	call	0x7a42	; 0x7a42 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    695a:	61 e0       	ldi	r22, 0x01	; 1
    695c:	8a e0       	ldi	r24, 0x0A	; 10
    695e:	0e 94 e5 3c 	call	0x79ca	; 0x79ca <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    6962:	8c b5       	in	r24, 0x2c	; 44
    6964:	80 61       	ori	r24, 0x10	; 16
    6966:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    6968:	8c b5       	in	r24, 0x2c	; 44
    696a:	80 64       	ori	r24, 0x40	; 64
    696c:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    696e:	61 e0       	ldi	r22, 0x01	; 1
    6970:	8d e0       	ldi	r24, 0x0D	; 13
    6972:	0e 94 e5 3c 	call	0x79ca	; 0x79ca <pinMode>
    pinMode(MOSI, OUTPUT);
    6976:	61 e0       	ldi	r22, 0x01	; 1
    6978:	8b e0       	ldi	r24, 0x0B	; 11
    697a:	0e 94 e5 3c 	call	0x79ca	; 0x79ca <pinMode>
  }
  initialized++; // reference count
    697e:	80 91 8a 0c 	lds	r24, 0x0C8A	; 0x800c8a <_ZN8SPIClass11initializedE>
    6982:	8f 5f       	subi	r24, 0xFF	; 255
    6984:	80 93 8a 0c 	sts	0x0C8A, r24	; 0x800c8a <_ZN8SPIClass11initializedE>
  SREG = sreg;
    6988:	cf bf       	out	0x3f, r28	; 63
}
    698a:	cf 91       	pop	r28
    698c:	08 95       	ret

0000698e <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    698e:	10 92 f8 0c 	sts	0x0CF8, r1	; 0x800cf8 <twi_state>
    6992:	81 e0       	ldi	r24, 0x01	; 1
    6994:	80 93 f6 0c 	sts	0x0CF6, r24	; 0x800cf6 <twi_sendStop>
    6998:	10 92 f5 0c 	sts	0x0CF5, r1	; 0x800cf5 <twi_inRepStart>
    699c:	61 e0       	ldi	r22, 0x01	; 1
    699e:	8d e1       	ldi	r24, 0x1D	; 29
    69a0:	0e 94 21 3d 	call	0x7a42	; 0x7a42 <digitalWrite>
    69a4:	61 e0       	ldi	r22, 0x01	; 1
    69a6:	8c e1       	ldi	r24, 0x1C	; 28
    69a8:	0e 94 21 3d 	call	0x7a42	; 0x7a42 <digitalWrite>
    69ac:	e9 eb       	ldi	r30, 0xB9	; 185
    69ae:	f0 e0       	ldi	r31, 0x00	; 0
    69b0:	80 81       	ld	r24, Z
    69b2:	8e 7f       	andi	r24, 0xFE	; 254
    69b4:	80 83       	st	Z, r24
    69b6:	80 81       	ld	r24, Z
    69b8:	8d 7f       	andi	r24, 0xFD	; 253
    69ba:	80 83       	st	Z, r24
    69bc:	88 e4       	ldi	r24, 0x48	; 72
    69be:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    69c2:	85 e4       	ldi	r24, 0x45	; 69
    69c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    69c8:	08 95       	ret

000069ca <twi_disable>:
    69ca:	ec eb       	ldi	r30, 0xBC	; 188
    69cc:	f0 e0       	ldi	r31, 0x00	; 0
    69ce:	80 81       	ld	r24, Z
    69d0:	8a 7b       	andi	r24, 0xBA	; 186
    69d2:	80 83       	st	Z, r24
    69d4:	60 e0       	ldi	r22, 0x00	; 0
    69d6:	8d e1       	ldi	r24, 0x1D	; 29
    69d8:	0e 94 21 3d 	call	0x7a42	; 0x7a42 <digitalWrite>
    69dc:	60 e0       	ldi	r22, 0x00	; 0
    69de:	8c e1       	ldi	r24, 0x1C	; 28
    69e0:	0c 94 21 3d 	jmp	0x7a42	; 0x7a42 <digitalWrite>

000069e4 <twi_setFrequency>:
    69e4:	9b 01       	movw	r18, r22
    69e6:	ac 01       	movw	r20, r24
    69e8:	60 e0       	ldi	r22, 0x00	; 0
    69ea:	74 e2       	ldi	r23, 0x24	; 36
    69ec:	84 ef       	ldi	r24, 0xF4	; 244
    69ee:	90 e0       	ldi	r25, 0x00	; 0
    69f0:	0e 94 41 41 	call	0x8282	; 0x8282 <__udivmodsi4>
    69f4:	da 01       	movw	r26, r20
    69f6:	c9 01       	movw	r24, r18
    69f8:	40 97       	sbiw	r24, 0x10	; 16
    69fa:	a1 09       	sbc	r26, r1
    69fc:	b1 09       	sbc	r27, r1
    69fe:	b6 95       	lsr	r27
    6a00:	a7 95       	ror	r26
    6a02:	97 95       	ror	r25
    6a04:	87 95       	ror	r24
    6a06:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    6a0a:	08 95       	ret

00006a0c <twi_readFrom>:
    6a0c:	41 32       	cpi	r20, 0x21	; 33
    6a0e:	08 f0       	brcs	.+2      	; 0x6a12 <twi_readFrom+0x6>
    6a10:	43 c0       	rjmp	.+134    	; 0x6a98 <twi_readFrom+0x8c>
    6a12:	90 91 f8 0c 	lds	r25, 0x0CF8	; 0x800cf8 <twi_state>
    6a16:	91 11       	cpse	r25, r1
    6a18:	fc cf       	rjmp	.-8      	; 0x6a12 <twi_readFrom+0x6>
    6a1a:	91 e0       	ldi	r25, 0x01	; 1
    6a1c:	90 93 f8 0c 	sts	0x0CF8, r25	; 0x800cf8 <twi_state>
    6a20:	20 93 f6 0c 	sts	0x0CF6, r18	; 0x800cf6 <twi_sendStop>
    6a24:	2f ef       	ldi	r18, 0xFF	; 255
    6a26:	20 93 8b 0c 	sts	0x0C8B, r18	; 0x800c8b <twi_error>
    6a2a:	10 92 d0 0c 	sts	0x0CD0, r1	; 0x800cd0 <twi_masterBufferIndex>
    6a2e:	24 0f       	add	r18, r20
    6a30:	20 93 cf 0c 	sts	0x0CCF, r18	; 0x800ccf <twi_masterBufferLength>
    6a34:	90 93 f7 0c 	sts	0x0CF7, r25	; 0x800cf7 <twi_slarw>
    6a38:	90 91 f7 0c 	lds	r25, 0x0CF7	; 0x800cf7 <twi_slarw>
    6a3c:	88 0f       	add	r24, r24
    6a3e:	89 2b       	or	r24, r25
    6a40:	80 93 f7 0c 	sts	0x0CF7, r24	; 0x800cf7 <twi_slarw>
    6a44:	80 91 f5 0c 	lds	r24, 0x0CF5	; 0x800cf5 <twi_inRepStart>
    6a48:	81 30       	cpi	r24, 0x01	; 1
    6a4a:	61 f4       	brne	.+24     	; 0x6a64 <twi_readFrom+0x58>
    6a4c:	10 92 f5 0c 	sts	0x0CF5, r1	; 0x800cf5 <twi_inRepStart>
    6a50:	80 91 f7 0c 	lds	r24, 0x0CF7	; 0x800cf7 <twi_slarw>
    6a54:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    6a58:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    6a5c:	83 fd       	sbrc	r24, 3
    6a5e:	f8 cf       	rjmp	.-16     	; 0x6a50 <twi_readFrom+0x44>
    6a60:	85 ec       	ldi	r24, 0xC5	; 197
    6a62:	01 c0       	rjmp	.+2      	; 0x6a66 <twi_readFrom+0x5a>
    6a64:	85 ee       	ldi	r24, 0xE5	; 229
    6a66:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    6a6a:	80 91 f8 0c 	lds	r24, 0x0CF8	; 0x800cf8 <twi_state>
    6a6e:	81 30       	cpi	r24, 0x01	; 1
    6a70:	e1 f3       	breq	.-8      	; 0x6a6a <twi_readFrom+0x5e>
    6a72:	80 91 d0 0c 	lds	r24, 0x0CD0	; 0x800cd0 <twi_masterBufferIndex>
    6a76:	84 17       	cp	r24, r20
    6a78:	10 f4       	brcc	.+4      	; 0x6a7e <twi_readFrom+0x72>
    6a7a:	40 91 d0 0c 	lds	r20, 0x0CD0	; 0x800cd0 <twi_masterBufferIndex>
    6a7e:	a1 ed       	ldi	r26, 0xD1	; 209
    6a80:	bc e0       	ldi	r27, 0x0C	; 12
    6a82:	96 2f       	mov	r25, r22
    6a84:	fb 01       	movw	r30, r22
    6a86:	8e 2f       	mov	r24, r30
    6a88:	89 1b       	sub	r24, r25
    6a8a:	84 17       	cp	r24, r20
    6a8c:	18 f4       	brcc	.+6      	; 0x6a94 <twi_readFrom+0x88>
    6a8e:	8d 91       	ld	r24, X+
    6a90:	81 93       	st	Z+, r24
    6a92:	f9 cf       	rjmp	.-14     	; 0x6a86 <twi_readFrom+0x7a>
    6a94:	84 2f       	mov	r24, r20
    6a96:	08 95       	ret
    6a98:	80 e0       	ldi	r24, 0x00	; 0
    6a9a:	08 95       	ret

00006a9c <twi_writeTo>:
    6a9c:	0f 93       	push	r16
    6a9e:	41 32       	cpi	r20, 0x21	; 33
    6aa0:	08 f0       	brcs	.+2      	; 0x6aa4 <twi_writeTo+0x8>
    6aa2:	4a c0       	rjmp	.+148    	; 0x6b38 <twi_writeTo+0x9c>
    6aa4:	90 91 f8 0c 	lds	r25, 0x0CF8	; 0x800cf8 <twi_state>
    6aa8:	91 11       	cpse	r25, r1
    6aaa:	fc cf       	rjmp	.-8      	; 0x6aa4 <twi_writeTo+0x8>
    6aac:	32 e0       	ldi	r19, 0x02	; 2
    6aae:	30 93 f8 0c 	sts	0x0CF8, r19	; 0x800cf8 <twi_state>
    6ab2:	00 93 f6 0c 	sts	0x0CF6, r16	; 0x800cf6 <twi_sendStop>
    6ab6:	3f ef       	ldi	r19, 0xFF	; 255
    6ab8:	30 93 8b 0c 	sts	0x0C8B, r19	; 0x800c8b <twi_error>
    6abc:	10 92 d0 0c 	sts	0x0CD0, r1	; 0x800cd0 <twi_masterBufferIndex>
    6ac0:	40 93 cf 0c 	sts	0x0CCF, r20	; 0x800ccf <twi_masterBufferLength>
    6ac4:	56 2f       	mov	r21, r22
    6ac6:	a1 ed       	ldi	r26, 0xD1	; 209
    6ac8:	bc e0       	ldi	r27, 0x0C	; 12
    6aca:	fb 01       	movw	r30, r22
    6acc:	3e 2f       	mov	r19, r30
    6ace:	35 1b       	sub	r19, r21
    6ad0:	34 17       	cp	r19, r20
    6ad2:	18 f4       	brcc	.+6      	; 0x6ada <twi_writeTo+0x3e>
    6ad4:	31 91       	ld	r19, Z+
    6ad6:	3d 93       	st	X+, r19
    6ad8:	f9 cf       	rjmp	.-14     	; 0x6acc <twi_writeTo+0x30>
    6ada:	10 92 f7 0c 	sts	0x0CF7, r1	; 0x800cf7 <twi_slarw>
    6ade:	30 91 f7 0c 	lds	r19, 0x0CF7	; 0x800cf7 <twi_slarw>
    6ae2:	88 0f       	add	r24, r24
    6ae4:	83 2b       	or	r24, r19
    6ae6:	80 93 f7 0c 	sts	0x0CF7, r24	; 0x800cf7 <twi_slarw>
    6aea:	80 91 f5 0c 	lds	r24, 0x0CF5	; 0x800cf5 <twi_inRepStart>
    6aee:	81 30       	cpi	r24, 0x01	; 1
    6af0:	61 f4       	brne	.+24     	; 0x6b0a <twi_writeTo+0x6e>
    6af2:	10 92 f5 0c 	sts	0x0CF5, r1	; 0x800cf5 <twi_inRepStart>
    6af6:	80 91 f7 0c 	lds	r24, 0x0CF7	; 0x800cf7 <twi_slarw>
    6afa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    6afe:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    6b02:	83 fd       	sbrc	r24, 3
    6b04:	f8 cf       	rjmp	.-16     	; 0x6af6 <twi_writeTo+0x5a>
    6b06:	85 ec       	ldi	r24, 0xC5	; 197
    6b08:	01 c0       	rjmp	.+2      	; 0x6b0c <twi_writeTo+0x70>
    6b0a:	85 ee       	ldi	r24, 0xE5	; 229
    6b0c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    6b10:	22 23       	and	r18, r18
    6b12:	21 f0       	breq	.+8      	; 0x6b1c <twi_writeTo+0x80>
    6b14:	80 91 f8 0c 	lds	r24, 0x0CF8	; 0x800cf8 <twi_state>
    6b18:	82 30       	cpi	r24, 0x02	; 2
    6b1a:	d1 f3       	breq	.-12     	; 0x6b10 <twi_writeTo+0x74>
    6b1c:	80 91 8b 0c 	lds	r24, 0x0C8B	; 0x800c8b <twi_error>
    6b20:	8f 3f       	cpi	r24, 0xFF	; 255
    6b22:	79 f0       	breq	.+30     	; 0x6b42 <twi_writeTo+0xa6>
    6b24:	80 91 8b 0c 	lds	r24, 0x0C8B	; 0x800c8b <twi_error>
    6b28:	80 32       	cpi	r24, 0x20	; 32
    6b2a:	41 f0       	breq	.+16     	; 0x6b3c <twi_writeTo+0xa0>
    6b2c:	80 91 8b 0c 	lds	r24, 0x0C8B	; 0x800c8b <twi_error>
    6b30:	80 33       	cpi	r24, 0x30	; 48
    6b32:	31 f0       	breq	.+12     	; 0x6b40 <twi_writeTo+0xa4>
    6b34:	94 e0       	ldi	r25, 0x04	; 4
    6b36:	05 c0       	rjmp	.+10     	; 0x6b42 <twi_writeTo+0xa6>
    6b38:	91 e0       	ldi	r25, 0x01	; 1
    6b3a:	03 c0       	rjmp	.+6      	; 0x6b42 <twi_writeTo+0xa6>
    6b3c:	92 e0       	ldi	r25, 0x02	; 2
    6b3e:	01 c0       	rjmp	.+2      	; 0x6b42 <twi_writeTo+0xa6>
    6b40:	93 e0       	ldi	r25, 0x03	; 3
    6b42:	89 2f       	mov	r24, r25
    6b44:	0f 91       	pop	r16
    6b46:	08 95       	ret

00006b48 <twi_transmit>:
    6b48:	40 91 ad 0c 	lds	r20, 0x0CAD	; 0x800cad <twi_txBufferLength>
    6b4c:	26 2f       	mov	r18, r22
    6b4e:	30 e0       	ldi	r19, 0x00	; 0
    6b50:	24 0f       	add	r18, r20
    6b52:	31 1d       	adc	r19, r1
    6b54:	21 32       	cpi	r18, 0x21	; 33
    6b56:	31 05       	cpc	r19, r1
    6b58:	dc f4       	brge	.+54     	; 0x6b90 <twi_transmit+0x48>
    6b5a:	20 91 f8 0c 	lds	r18, 0x0CF8	; 0x800cf8 <twi_state>
    6b5e:	24 30       	cpi	r18, 0x04	; 4
    6b60:	c9 f4       	brne	.+50     	; 0x6b94 <twi_transmit+0x4c>
    6b62:	fc 01       	movw	r30, r24
    6b64:	80 e0       	ldi	r24, 0x00	; 0
    6b66:	90 e0       	ldi	r25, 0x00	; 0
    6b68:	86 17       	cp	r24, r22
    6b6a:	58 f4       	brcc	.+22     	; 0x6b82 <twi_transmit+0x3a>
    6b6c:	30 91 ad 0c 	lds	r19, 0x0CAD	; 0x800cad <twi_txBufferLength>
    6b70:	21 91       	ld	r18, Z+
    6b72:	dc 01       	movw	r26, r24
    6b74:	a1 55       	subi	r26, 0x51	; 81
    6b76:	b3 4f       	sbci	r27, 0xF3	; 243
    6b78:	a3 0f       	add	r26, r19
    6b7a:	b1 1d       	adc	r27, r1
    6b7c:	2c 93       	st	X, r18
    6b7e:	01 96       	adiw	r24, 0x01	; 1
    6b80:	f3 cf       	rjmp	.-26     	; 0x6b68 <twi_transmit+0x20>
    6b82:	80 91 ad 0c 	lds	r24, 0x0CAD	; 0x800cad <twi_txBufferLength>
    6b86:	68 0f       	add	r22, r24
    6b88:	60 93 ad 0c 	sts	0x0CAD, r22	; 0x800cad <twi_txBufferLength>
    6b8c:	80 e0       	ldi	r24, 0x00	; 0
    6b8e:	08 95       	ret
    6b90:	81 e0       	ldi	r24, 0x01	; 1
    6b92:	08 95       	ret
    6b94:	82 e0       	ldi	r24, 0x02	; 2
    6b96:	08 95       	ret

00006b98 <twi_attachSlaveRxEvent>:
    6b98:	90 93 f2 0c 	sts	0x0CF2, r25	; 0x800cf2 <twi_onSlaveReceive+0x1>
    6b9c:	80 93 f1 0c 	sts	0x0CF1, r24	; 0x800cf1 <twi_onSlaveReceive>
    6ba0:	08 95       	ret

00006ba2 <twi_attachSlaveTxEvent>:
    6ba2:	90 93 f4 0c 	sts	0x0CF4, r25	; 0x800cf4 <twi_onSlaveTransmit+0x1>
    6ba6:	80 93 f3 0c 	sts	0x0CF3, r24	; 0x800cf3 <twi_onSlaveTransmit>
    6baa:	08 95       	ret

00006bac <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    6bac:	85 ed       	ldi	r24, 0xD5	; 213
    6bae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    6bb2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    6bb6:	84 fd       	sbrc	r24, 4
    6bb8:	fc cf       	rjmp	.-8      	; 0x6bb2 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    6bba:	10 92 f8 0c 	sts	0x0CF8, r1	; 0x800cf8 <twi_state>
    6bbe:	08 95       	ret

00006bc0 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    6bc0:	85 ec       	ldi	r24, 0xC5	; 197
    6bc2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    6bc6:	10 92 f8 0c 	sts	0x0CF8, r1	; 0x800cf8 <twi_state>
    6bca:	08 95       	ret

00006bcc <__vector_26>:
}

ISR(TWI_vect)
{
    6bcc:	1f 92       	push	r1
    6bce:	0f 92       	push	r0
    6bd0:	0f b6       	in	r0, 0x3f	; 63
    6bd2:	0f 92       	push	r0
    6bd4:	11 24       	eor	r1, r1
    6bd6:	0b b6       	in	r0, 0x3b	; 59
    6bd8:	0f 92       	push	r0
    6bda:	2f 93       	push	r18
    6bdc:	3f 93       	push	r19
    6bde:	4f 93       	push	r20
    6be0:	5f 93       	push	r21
    6be2:	6f 93       	push	r22
    6be4:	7f 93       	push	r23
    6be6:	8f 93       	push	r24
    6be8:	9f 93       	push	r25
    6bea:	af 93       	push	r26
    6bec:	bf 93       	push	r27
    6bee:	ef 93       	push	r30
    6bf0:	ff 93       	push	r31
  switch(TW_STATUS){
    6bf2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    6bf6:	88 7f       	andi	r24, 0xF8	; 248
    6bf8:	80 36       	cpi	r24, 0x60	; 96
    6bfa:	09 f4       	brne	.+2      	; 0x6bfe <__vector_26+0x32>
    6bfc:	9d c0       	rjmp	.+314    	; 0x6d38 <__vector_26+0x16c>
    6bfe:	70 f5       	brcc	.+92     	; 0x6c5c <__vector_26+0x90>
    6c00:	88 32       	cpi	r24, 0x28	; 40
    6c02:	09 f4       	brne	.+2      	; 0x6c06 <__vector_26+0x3a>
    6c04:	5c c0       	rjmp	.+184    	; 0x6cbe <__vector_26+0xf2>
    6c06:	90 f4       	brcc	.+36     	; 0x6c2c <__vector_26+0x60>
    6c08:	80 31       	cpi	r24, 0x10	; 16
    6c0a:	09 f4       	brne	.+2      	; 0x6c0e <__vector_26+0x42>
    6c0c:	55 c0       	rjmp	.+170    	; 0x6cb8 <__vector_26+0xec>
    6c0e:	38 f4       	brcc	.+14     	; 0x6c1e <__vector_26+0x52>
    6c10:	88 23       	and	r24, r24
    6c12:	09 f4       	brne	.+2      	; 0x6c16 <__vector_26+0x4a>
    6c14:	f3 c0       	rjmp	.+486    	; 0x6dfc <__vector_26+0x230>
    6c16:	88 30       	cpi	r24, 0x08	; 8
    6c18:	09 f4       	brne	.+2      	; 0x6c1c <__vector_26+0x50>
    6c1a:	4e c0       	rjmp	.+156    	; 0x6cb8 <__vector_26+0xec>
    6c1c:	f2 c0       	rjmp	.+484    	; 0x6e02 <__vector_26+0x236>
    6c1e:	88 31       	cpi	r24, 0x18	; 24
    6c20:	09 f4       	brne	.+2      	; 0x6c24 <__vector_26+0x58>
    6c22:	4d c0       	rjmp	.+154    	; 0x6cbe <__vector_26+0xf2>
    6c24:	80 32       	cpi	r24, 0x20	; 32
    6c26:	09 f4       	brne	.+2      	; 0x6c2a <__vector_26+0x5e>
    6c28:	5e c0       	rjmp	.+188    	; 0x6ce6 <__vector_26+0x11a>
    6c2a:	eb c0       	rjmp	.+470    	; 0x6e02 <__vector_26+0x236>
    6c2c:	80 34       	cpi	r24, 0x40	; 64
    6c2e:	09 f4       	brne	.+2      	; 0x6c32 <__vector_26+0x66>
    6c30:	69 c0       	rjmp	.+210    	; 0x6d04 <__vector_26+0x138>
    6c32:	50 f4       	brcc	.+20     	; 0x6c48 <__vector_26+0x7c>
    6c34:	80 33       	cpi	r24, 0x30	; 48
    6c36:	09 f4       	brne	.+2      	; 0x6c3a <__vector_26+0x6e>
    6c38:	56 c0       	rjmp	.+172    	; 0x6ce6 <__vector_26+0x11a>
    6c3a:	88 33       	cpi	r24, 0x38	; 56
    6c3c:	09 f0       	breq	.+2      	; 0x6c40 <__vector_26+0x74>
    6c3e:	e1 c0       	rjmp	.+450    	; 0x6e02 <__vector_26+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    6c40:	80 93 8b 0c 	sts	0x0C8B, r24	; 0x800c8b <twi_error>
      twi_releaseBus();
    6c44:	bd df       	rcall	.-134    	; 0x6bc0 <twi_releaseBus>
      break;
    6c46:	dd c0       	rjmp	.+442    	; 0x6e02 <__vector_26+0x236>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    6c48:	80 35       	cpi	r24, 0x50	; 80
    6c4a:	09 f4       	brne	.+2      	; 0x6c4e <__vector_26+0x82>
    6c4c:	4f c0       	rjmp	.+158    	; 0x6cec <__vector_26+0x120>
    6c4e:	88 35       	cpi	r24, 0x58	; 88
    6c50:	09 f4       	brne	.+2      	; 0x6c54 <__vector_26+0x88>
    6c52:	5d c0       	rjmp	.+186    	; 0x6d0e <__vector_26+0x142>
    6c54:	88 34       	cpi	r24, 0x48	; 72
    6c56:	09 f0       	breq	.+2      	; 0x6c5a <__vector_26+0x8e>
    6c58:	d4 c0       	rjmp	.+424    	; 0x6e02 <__vector_26+0x236>
    6c5a:	d2 c0       	rjmp	.+420    	; 0x6e00 <__vector_26+0x234>
    6c5c:	88 39       	cpi	r24, 0x98	; 152
    6c5e:	09 f4       	brne	.+2      	; 0x6c62 <__vector_26+0x96>
    6c60:	c3 c0       	rjmp	.+390    	; 0x6de8 <__vector_26+0x21c>
    6c62:	a8 f4       	brcc	.+42     	; 0x6c8e <__vector_26+0xc2>
    6c64:	88 37       	cpi	r24, 0x78	; 120
    6c66:	09 f4       	brne	.+2      	; 0x6c6a <__vector_26+0x9e>
    6c68:	67 c0       	rjmp	.+206    	; 0x6d38 <__vector_26+0x16c>
    6c6a:	38 f4       	brcc	.+14     	; 0x6c7a <__vector_26+0xae>
    6c6c:	88 36       	cpi	r24, 0x68	; 104
    6c6e:	09 f4       	brne	.+2      	; 0x6c72 <__vector_26+0xa6>
    6c70:	63 c0       	rjmp	.+198    	; 0x6d38 <__vector_26+0x16c>
    6c72:	80 37       	cpi	r24, 0x70	; 112
    6c74:	09 f4       	brne	.+2      	; 0x6c78 <__vector_26+0xac>
    6c76:	60 c0       	rjmp	.+192    	; 0x6d38 <__vector_26+0x16c>
    6c78:	c4 c0       	rjmp	.+392    	; 0x6e02 <__vector_26+0x236>
    6c7a:	88 38       	cpi	r24, 0x88	; 136
    6c7c:	09 f4       	brne	.+2      	; 0x6c80 <__vector_26+0xb4>
    6c7e:	b4 c0       	rjmp	.+360    	; 0x6de8 <__vector_26+0x21c>
    6c80:	80 39       	cpi	r24, 0x90	; 144
    6c82:	09 f4       	brne	.+2      	; 0x6c86 <__vector_26+0xba>
    6c84:	5f c0       	rjmp	.+190    	; 0x6d44 <__vector_26+0x178>
    6c86:	80 38       	cpi	r24, 0x80	; 128
    6c88:	09 f0       	breq	.+2      	; 0x6c8c <__vector_26+0xc0>
    6c8a:	bb c0       	rjmp	.+374    	; 0x6e02 <__vector_26+0x236>
    6c8c:	5b c0       	rjmp	.+182    	; 0x6d44 <__vector_26+0x178>
    6c8e:	80 3b       	cpi	r24, 0xB0	; 176
    6c90:	09 f4       	brne	.+2      	; 0x6c94 <__vector_26+0xc8>
    6c92:	82 c0       	rjmp	.+260    	; 0x6d98 <__vector_26+0x1cc>
    6c94:	38 f4       	brcc	.+14     	; 0x6ca4 <__vector_26+0xd8>
    6c96:	80 3a       	cpi	r24, 0xA0	; 160
    6c98:	09 f4       	brne	.+2      	; 0x6c9c <__vector_26+0xd0>
    6c9a:	66 c0       	rjmp	.+204    	; 0x6d68 <__vector_26+0x19c>
    6c9c:	88 3a       	cpi	r24, 0xA8	; 168
    6c9e:	09 f4       	brne	.+2      	; 0x6ca2 <__vector_26+0xd6>
    6ca0:	7b c0       	rjmp	.+246    	; 0x6d98 <__vector_26+0x1cc>
    6ca2:	af c0       	rjmp	.+350    	; 0x6e02 <__vector_26+0x236>
    6ca4:	80 3c       	cpi	r24, 0xC0	; 192
    6ca6:	09 f4       	brne	.+2      	; 0x6caa <__vector_26+0xde>
    6ca8:	a3 c0       	rjmp	.+326    	; 0x6df0 <__vector_26+0x224>
    6caa:	88 3c       	cpi	r24, 0xC8	; 200
    6cac:	09 f4       	brne	.+2      	; 0x6cb0 <__vector_26+0xe4>
    6cae:	a0 c0       	rjmp	.+320    	; 0x6df0 <__vector_26+0x224>
    6cb0:	88 3b       	cpi	r24, 0xB8	; 184
    6cb2:	09 f4       	brne	.+2      	; 0x6cb6 <__vector_26+0xea>
    6cb4:	86 c0       	rjmp	.+268    	; 0x6dc2 <__vector_26+0x1f6>
    6cb6:	a5 c0       	rjmp	.+330    	; 0x6e02 <__vector_26+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    6cb8:	80 91 f7 0c 	lds	r24, 0x0CF7	; 0x800cf7 <twi_slarw>
    6cbc:	10 c0       	rjmp	.+32     	; 0x6cde <__vector_26+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    6cbe:	90 91 d0 0c 	lds	r25, 0x0CD0	; 0x800cd0 <twi_masterBufferIndex>
    6cc2:	80 91 cf 0c 	lds	r24, 0x0CCF	; 0x800ccf <twi_masterBufferLength>
    6cc6:	98 17       	cp	r25, r24
    6cc8:	70 f5       	brcc	.+92     	; 0x6d26 <__vector_26+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    6cca:	e0 91 d0 0c 	lds	r30, 0x0CD0	; 0x800cd0 <twi_masterBufferIndex>
    6cce:	81 e0       	ldi	r24, 0x01	; 1
    6cd0:	8e 0f       	add	r24, r30
    6cd2:	80 93 d0 0c 	sts	0x0CD0, r24	; 0x800cd0 <twi_masterBufferIndex>
    6cd6:	f0 e0       	ldi	r31, 0x00	; 0
    6cd8:	ef 52       	subi	r30, 0x2F	; 47
    6cda:	f3 4f       	sbci	r31, 0xF3	; 243
    6cdc:	80 81       	ld	r24, Z
    6cde:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    6ce2:	85 ec       	ldi	r24, 0xC5	; 197
    6ce4:	82 c0       	rjmp	.+260    	; 0x6dea <__vector_26+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    6ce6:	80 93 8b 0c 	sts	0x0C8B, r24	; 0x800c8b <twi_error>
    6cea:	8a c0       	rjmp	.+276    	; 0x6e00 <__vector_26+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    6cec:	e0 91 d0 0c 	lds	r30, 0x0CD0	; 0x800cd0 <twi_masterBufferIndex>
    6cf0:	81 e0       	ldi	r24, 0x01	; 1
    6cf2:	8e 0f       	add	r24, r30
    6cf4:	80 93 d0 0c 	sts	0x0CD0, r24	; 0x800cd0 <twi_masterBufferIndex>
    6cf8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    6cfc:	f0 e0       	ldi	r31, 0x00	; 0
    6cfe:	ef 52       	subi	r30, 0x2F	; 47
    6d00:	f3 4f       	sbci	r31, 0xF3	; 243
    6d02:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    6d04:	90 91 d0 0c 	lds	r25, 0x0CD0	; 0x800cd0 <twi_masterBufferIndex>
    6d08:	80 91 cf 0c 	lds	r24, 0x0CCF	; 0x800ccf <twi_masterBufferLength>
    6d0c:	6a c0       	rjmp	.+212    	; 0x6de2 <__vector_26+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    6d0e:	e0 91 d0 0c 	lds	r30, 0x0CD0	; 0x800cd0 <twi_masterBufferIndex>
    6d12:	81 e0       	ldi	r24, 0x01	; 1
    6d14:	8e 0f       	add	r24, r30
    6d16:	80 93 d0 0c 	sts	0x0CD0, r24	; 0x800cd0 <twi_masterBufferIndex>
    6d1a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    6d1e:	f0 e0       	ldi	r31, 0x00	; 0
    6d20:	ef 52       	subi	r30, 0x2F	; 47
    6d22:	f3 4f       	sbci	r31, 0xF3	; 243
    6d24:	80 83       	st	Z, r24
	if (twi_sendStop)
    6d26:	80 91 f6 0c 	lds	r24, 0x0CF6	; 0x800cf6 <twi_sendStop>
    6d2a:	81 11       	cpse	r24, r1
    6d2c:	69 c0       	rjmp	.+210    	; 0x6e00 <__vector_26+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    6d2e:	81 e0       	ldi	r24, 0x01	; 1
    6d30:	80 93 f5 0c 	sts	0x0CF5, r24	; 0x800cf5 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    6d34:	84 ea       	ldi	r24, 0xA4	; 164
    6d36:	5d c0       	rjmp	.+186    	; 0x6df2 <__vector_26+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    6d38:	83 e0       	ldi	r24, 0x03	; 3
    6d3a:	80 93 f8 0c 	sts	0x0CF8, r24	; 0x800cf8 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    6d3e:	10 92 8c 0c 	sts	0x0C8C, r1	; 0x800c8c <twi_rxBufferIndex>
    6d42:	cf cf       	rjmp	.-98     	; 0x6ce2 <__vector_26+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    6d44:	80 91 8c 0c 	lds	r24, 0x0C8C	; 0x800c8c <twi_rxBufferIndex>
    6d48:	80 32       	cpi	r24, 0x20	; 32
    6d4a:	08 f0       	brcs	.+2      	; 0x6d4e <__vector_26+0x182>
    6d4c:	4d c0       	rjmp	.+154    	; 0x6de8 <__vector_26+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    6d4e:	e0 91 8c 0c 	lds	r30, 0x0C8C	; 0x800c8c <twi_rxBufferIndex>
    6d52:	81 e0       	ldi	r24, 0x01	; 1
    6d54:	8e 0f       	add	r24, r30
    6d56:	80 93 8c 0c 	sts	0x0C8C, r24	; 0x800c8c <twi_rxBufferIndex>
    6d5a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    6d5e:	f0 e0       	ldi	r31, 0x00	; 0
    6d60:	e3 57       	subi	r30, 0x73	; 115
    6d62:	f3 4f       	sbci	r31, 0xF3	; 243
    6d64:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    6d66:	bd cf       	rjmp	.-134    	; 0x6ce2 <__vector_26+0x116>
    6d68:	2b df       	rcall	.-426    	; 0x6bc0 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    6d6a:	80 91 8c 0c 	lds	r24, 0x0C8C	; 0x800c8c <twi_rxBufferIndex>
    6d6e:	80 32       	cpi	r24, 0x20	; 32
    6d70:	30 f4       	brcc	.+12     	; 0x6d7e <__vector_26+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    6d72:	e0 91 8c 0c 	lds	r30, 0x0C8C	; 0x800c8c <twi_rxBufferIndex>
    6d76:	f0 e0       	ldi	r31, 0x00	; 0
    6d78:	e3 57       	subi	r30, 0x73	; 115
    6d7a:	f3 4f       	sbci	r31, 0xF3	; 243
    6d7c:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    6d7e:	60 91 8c 0c 	lds	r22, 0x0C8C	; 0x800c8c <twi_rxBufferIndex>
    6d82:	70 e0       	ldi	r23, 0x00	; 0
    6d84:	e0 91 f1 0c 	lds	r30, 0x0CF1	; 0x800cf1 <twi_onSlaveReceive>
    6d88:	f0 91 f2 0c 	lds	r31, 0x0CF2	; 0x800cf2 <twi_onSlaveReceive+0x1>
    6d8c:	8d e8       	ldi	r24, 0x8D	; 141
    6d8e:	9c e0       	ldi	r25, 0x0C	; 12
    6d90:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    6d92:	10 92 8c 0c 	sts	0x0C8C, r1	; 0x800c8c <twi_rxBufferIndex>
      break;
    6d96:	35 c0       	rjmp	.+106    	; 0x6e02 <__vector_26+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    6d98:	84 e0       	ldi	r24, 0x04	; 4
    6d9a:	80 93 f8 0c 	sts	0x0CF8, r24	; 0x800cf8 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    6d9e:	10 92 ae 0c 	sts	0x0CAE, r1	; 0x800cae <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    6da2:	10 92 ad 0c 	sts	0x0CAD, r1	; 0x800cad <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    6da6:	e0 91 f3 0c 	lds	r30, 0x0CF3	; 0x800cf3 <twi_onSlaveTransmit>
    6daa:	f0 91 f4 0c 	lds	r31, 0x0CF4	; 0x800cf4 <twi_onSlaveTransmit+0x1>
    6dae:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    6db0:	80 91 ad 0c 	lds	r24, 0x0CAD	; 0x800cad <twi_txBufferLength>
    6db4:	81 11       	cpse	r24, r1
    6db6:	05 c0       	rjmp	.+10     	; 0x6dc2 <__vector_26+0x1f6>
        twi_txBufferLength = 1;
    6db8:	81 e0       	ldi	r24, 0x01	; 1
    6dba:	80 93 ad 0c 	sts	0x0CAD, r24	; 0x800cad <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    6dbe:	10 92 af 0c 	sts	0x0CAF, r1	; 0x800caf <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    6dc2:	e0 91 ae 0c 	lds	r30, 0x0CAE	; 0x800cae <twi_txBufferIndex>
    6dc6:	81 e0       	ldi	r24, 0x01	; 1
    6dc8:	8e 0f       	add	r24, r30
    6dca:	80 93 ae 0c 	sts	0x0CAE, r24	; 0x800cae <twi_txBufferIndex>
    6dce:	f0 e0       	ldi	r31, 0x00	; 0
    6dd0:	e1 55       	subi	r30, 0x51	; 81
    6dd2:	f3 4f       	sbci	r31, 0xF3	; 243
    6dd4:	80 81       	ld	r24, Z
    6dd6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    6dda:	90 91 ae 0c 	lds	r25, 0x0CAE	; 0x800cae <twi_txBufferIndex>
    6dde:	80 91 ad 0c 	lds	r24, 0x0CAD	; 0x800cad <twi_txBufferLength>
    6de2:	98 17       	cp	r25, r24
    6de4:	08 f4       	brcc	.+2      	; 0x6de8 <__vector_26+0x21c>
    6de6:	7d cf       	rjmp	.-262    	; 0x6ce2 <__vector_26+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    6de8:	85 e8       	ldi	r24, 0x85	; 133
    6dea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    6dee:	09 c0       	rjmp	.+18     	; 0x6e02 <__vector_26+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    6df0:	85 ec       	ldi	r24, 0xC5	; 197
    6df2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    6df6:	10 92 f8 0c 	sts	0x0CF8, r1	; 0x800cf8 <twi_state>
      break;
    6dfa:	03 c0       	rjmp	.+6      	; 0x6e02 <__vector_26+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    6dfc:	10 92 8b 0c 	sts	0x0C8B, r1	; 0x800c8b <twi_error>
      twi_stop();
    6e00:	d5 de       	rcall	.-598    	; 0x6bac <twi_stop>
      break;
  }
}
    6e02:	ff 91       	pop	r31
    6e04:	ef 91       	pop	r30
    6e06:	bf 91       	pop	r27
    6e08:	af 91       	pop	r26
    6e0a:	9f 91       	pop	r25
    6e0c:	8f 91       	pop	r24
    6e0e:	7f 91       	pop	r23
    6e10:	6f 91       	pop	r22
    6e12:	5f 91       	pop	r21
    6e14:	4f 91       	pop	r20
    6e16:	3f 91       	pop	r19
    6e18:	2f 91       	pop	r18
    6e1a:	0f 90       	pop	r0
    6e1c:	0b be       	out	0x3b, r0	; 59
    6e1e:	0f 90       	pop	r0
    6e20:	0f be       	out	0x3f, r0	; 63
    6e22:	0f 90       	pop	r0
    6e24:	1f 90       	pop	r1
    6e26:	18 95       	reti

00006e28 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    6e28:	80 91 2d 0d 	lds	r24, 0x0D2D	; 0x800d2d <_ZN7TwoWire14rxBufferLengthE>
    6e2c:	90 e0       	ldi	r25, 0x00	; 0
    6e2e:	20 91 2e 0d 	lds	r18, 0x0D2E	; 0x800d2e <_ZN7TwoWire13rxBufferIndexE>
    6e32:	82 1b       	sub	r24, r18
    6e34:	91 09       	sbc	r25, r1
    6e36:	08 95       	ret

00006e38 <_ZN7TwoWire4readEv>:
    6e38:	90 91 2e 0d 	lds	r25, 0x0D2E	; 0x800d2e <_ZN7TwoWire13rxBufferIndexE>
    6e3c:	80 91 2d 0d 	lds	r24, 0x0D2D	; 0x800d2d <_ZN7TwoWire14rxBufferLengthE>
    6e40:	98 17       	cp	r25, r24
    6e42:	50 f4       	brcc	.+20     	; 0x6e58 <_ZN7TwoWire4readEv+0x20>
    6e44:	e9 2f       	mov	r30, r25
    6e46:	f0 e0       	ldi	r31, 0x00	; 0
    6e48:	e1 5d       	subi	r30, 0xD1	; 209
    6e4a:	f2 4f       	sbci	r31, 0xF2	; 242
    6e4c:	20 81       	ld	r18, Z
    6e4e:	30 e0       	ldi	r19, 0x00	; 0
    6e50:	9f 5f       	subi	r25, 0xFF	; 255
    6e52:	90 93 2e 0d 	sts	0x0D2E, r25	; 0x800d2e <_ZN7TwoWire13rxBufferIndexE>
    6e56:	02 c0       	rjmp	.+4      	; 0x6e5c <_ZN7TwoWire4readEv+0x24>
    6e58:	2f ef       	ldi	r18, 0xFF	; 255
    6e5a:	3f ef       	ldi	r19, 0xFF	; 255
    6e5c:	c9 01       	movw	r24, r18
    6e5e:	08 95       	ret

00006e60 <_ZN7TwoWire4peekEv>:
    6e60:	e0 91 2e 0d 	lds	r30, 0x0D2E	; 0x800d2e <_ZN7TwoWire13rxBufferIndexE>
    6e64:	80 91 2d 0d 	lds	r24, 0x0D2D	; 0x800d2d <_ZN7TwoWire14rxBufferLengthE>
    6e68:	e8 17       	cp	r30, r24
    6e6a:	30 f4       	brcc	.+12     	; 0x6e78 <_ZN7TwoWire4peekEv+0x18>
    6e6c:	f0 e0       	ldi	r31, 0x00	; 0
    6e6e:	e1 5d       	subi	r30, 0xD1	; 209
    6e70:	f2 4f       	sbci	r31, 0xF2	; 242
    6e72:	80 81       	ld	r24, Z
    6e74:	90 e0       	ldi	r25, 0x00	; 0
    6e76:	08 95       	ret
    6e78:	8f ef       	ldi	r24, 0xFF	; 255
    6e7a:	9f ef       	ldi	r25, 0xFF	; 255
    6e7c:	08 95       	ret

00006e7e <_ZN7TwoWire5flushEv>:
    6e7e:	08 95       	ret

00006e80 <_ZN7TwoWire16onReceiveServiceEPhi>:
    6e80:	cf 93       	push	r28
    6e82:	df 93       	push	r29
    6e84:	ec 01       	movw	r28, r24
    6e86:	e0 91 05 0d 	lds	r30, 0x0D05	; 0x800d05 <_ZN7TwoWire14user_onReceiveE>
    6e8a:	f0 91 06 0d 	lds	r31, 0x0D06	; 0x800d06 <_ZN7TwoWire14user_onReceiveE+0x1>
    6e8e:	30 97       	sbiw	r30, 0x00	; 0
    6e90:	f1 f0       	breq	.+60     	; 0x6ece <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    6e92:	90 91 2e 0d 	lds	r25, 0x0D2E	; 0x800d2e <_ZN7TwoWire13rxBufferIndexE>
    6e96:	80 91 2d 0d 	lds	r24, 0x0D2D	; 0x800d2d <_ZN7TwoWire14rxBufferLengthE>
    6e9a:	98 17       	cp	r25, r24
    6e9c:	c0 f0       	brcs	.+48     	; 0x6ece <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    6e9e:	90 e0       	ldi	r25, 0x00	; 0
    6ea0:	29 2f       	mov	r18, r25
    6ea2:	30 e0       	ldi	r19, 0x00	; 0
    6ea4:	26 17       	cp	r18, r22
    6ea6:	37 07       	cpc	r19, r23
    6ea8:	54 f4       	brge	.+20     	; 0x6ebe <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    6eaa:	de 01       	movw	r26, r28
    6eac:	a2 0f       	add	r26, r18
    6eae:	b3 1f       	adc	r27, r19
    6eb0:	4c 91       	ld	r20, X
    6eb2:	d9 01       	movw	r26, r18
    6eb4:	a1 5d       	subi	r26, 0xD1	; 209
    6eb6:	b2 4f       	sbci	r27, 0xF2	; 242
    6eb8:	4c 93       	st	X, r20
    6eba:	9f 5f       	subi	r25, 0xFF	; 255
    6ebc:	f1 cf       	rjmp	.-30     	; 0x6ea0 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    6ebe:	10 92 2e 0d 	sts	0x0D2E, r1	; 0x800d2e <_ZN7TwoWire13rxBufferIndexE>
    6ec2:	60 93 2d 0d 	sts	0x0D2D, r22	; 0x800d2d <_ZN7TwoWire14rxBufferLengthE>
    6ec6:	cb 01       	movw	r24, r22
    6ec8:	df 91       	pop	r29
    6eca:	cf 91       	pop	r28
    6ecc:	09 94       	ijmp
    6ece:	df 91       	pop	r29
    6ed0:	cf 91       	pop	r28
    6ed2:	08 95       	ret

00006ed4 <_ZN7TwoWire16onRequestServiceEv>:
    6ed4:	e0 91 07 0d 	lds	r30, 0x0D07	; 0x800d07 <_ZN7TwoWire14user_onRequestE>
    6ed8:	f0 91 08 0d 	lds	r31, 0x0D08	; 0x800d08 <_ZN7TwoWire14user_onRequestE+0x1>
    6edc:	30 97       	sbiw	r30, 0x00	; 0
    6ede:	29 f0       	breq	.+10     	; 0x6eea <_ZN7TwoWire16onRequestServiceEv+0x16>
    6ee0:	10 92 0b 0d 	sts	0x0D0B, r1	; 0x800d0b <_ZN7TwoWire13txBufferIndexE>
    6ee4:	10 92 0a 0d 	sts	0x0D0A, r1	; 0x800d0a <_ZN7TwoWire14txBufferLengthE>
    6ee8:	09 94       	ijmp
    6eea:	08 95       	ret

00006eec <_ZN7TwoWire5writeEPKhj>:
    6eec:	cf 92       	push	r12
    6eee:	df 92       	push	r13
    6ef0:	ef 92       	push	r14
    6ef2:	ff 92       	push	r15
    6ef4:	0f 93       	push	r16
    6ef6:	1f 93       	push	r17
    6ef8:	cf 93       	push	r28
    6efa:	df 93       	push	r29
    6efc:	7c 01       	movw	r14, r24
    6efe:	cb 01       	movw	r24, r22
    6f00:	8a 01       	movw	r16, r20
    6f02:	20 91 09 0d 	lds	r18, 0x0D09	; 0x800d09 <_ZN7TwoWire12transmittingE>
    6f06:	22 23       	and	r18, r18
    6f08:	89 f0       	breq	.+34     	; 0x6f2c <_ZN7TwoWire5writeEPKhj+0x40>
    6f0a:	eb 01       	movw	r28, r22
    6f0c:	6b 01       	movw	r12, r22
    6f0e:	c4 0e       	add	r12, r20
    6f10:	d5 1e       	adc	r13, r21
    6f12:	cc 15       	cp	r28, r12
    6f14:	dd 05       	cpc	r29, r13
    6f16:	61 f0       	breq	.+24     	; 0x6f30 <_ZN7TwoWire5writeEPKhj+0x44>
    6f18:	69 91       	ld	r22, Y+
    6f1a:	d7 01       	movw	r26, r14
    6f1c:	ed 91       	ld	r30, X+
    6f1e:	fc 91       	ld	r31, X
    6f20:	01 90       	ld	r0, Z+
    6f22:	f0 81       	ld	r31, Z
    6f24:	e0 2d       	mov	r30, r0
    6f26:	c7 01       	movw	r24, r14
    6f28:	09 95       	icall
    6f2a:	f3 cf       	rjmp	.-26     	; 0x6f12 <_ZN7TwoWire5writeEPKhj+0x26>
    6f2c:	64 2f       	mov	r22, r20
    6f2e:	0c de       	rcall	.-1000   	; 0x6b48 <twi_transmit>
    6f30:	c8 01       	movw	r24, r16
    6f32:	df 91       	pop	r29
    6f34:	cf 91       	pop	r28
    6f36:	1f 91       	pop	r17
    6f38:	0f 91       	pop	r16
    6f3a:	ff 90       	pop	r15
    6f3c:	ef 90       	pop	r14
    6f3e:	df 90       	pop	r13
    6f40:	cf 90       	pop	r12
    6f42:	08 95       	ret

00006f44 <_ZN7TwoWire5writeEh>:
    6f44:	cf 93       	push	r28
    6f46:	df 93       	push	r29
    6f48:	1f 92       	push	r1
    6f4a:	cd b7       	in	r28, 0x3d	; 61
    6f4c:	de b7       	in	r29, 0x3e	; 62
    6f4e:	69 83       	std	Y+1, r22	; 0x01
    6f50:	20 91 09 0d 	lds	r18, 0x0D09	; 0x800d09 <_ZN7TwoWire12transmittingE>
    6f54:	22 23       	and	r18, r18
    6f56:	d1 f0       	breq	.+52     	; 0x6f8c <_ZN7TwoWire5writeEh+0x48>
    6f58:	20 91 0a 0d 	lds	r18, 0x0D0A	; 0x800d0a <_ZN7TwoWire14txBufferLengthE>
    6f5c:	20 32       	cpi	r18, 0x20	; 32
    6f5e:	40 f0       	brcs	.+16     	; 0x6f70 <_ZN7TwoWire5writeEh+0x2c>
    6f60:	21 e0       	ldi	r18, 0x01	; 1
    6f62:	30 e0       	ldi	r19, 0x00	; 0
    6f64:	fc 01       	movw	r30, r24
    6f66:	33 83       	std	Z+3, r19	; 0x03
    6f68:	22 83       	std	Z+2, r18	; 0x02
    6f6a:	80 e0       	ldi	r24, 0x00	; 0
    6f6c:	90 e0       	ldi	r25, 0x00	; 0
    6f6e:	14 c0       	rjmp	.+40     	; 0x6f98 <_ZN7TwoWire5writeEh+0x54>
    6f70:	80 91 0b 0d 	lds	r24, 0x0D0B	; 0x800d0b <_ZN7TwoWire13txBufferIndexE>
    6f74:	e8 2f       	mov	r30, r24
    6f76:	f0 e0       	ldi	r31, 0x00	; 0
    6f78:	e4 5f       	subi	r30, 0xF4	; 244
    6f7a:	f2 4f       	sbci	r31, 0xF2	; 242
    6f7c:	99 81       	ldd	r25, Y+1	; 0x01
    6f7e:	90 83       	st	Z, r25
    6f80:	8f 5f       	subi	r24, 0xFF	; 255
    6f82:	80 93 0b 0d 	sts	0x0D0B, r24	; 0x800d0b <_ZN7TwoWire13txBufferIndexE>
    6f86:	80 93 0a 0d 	sts	0x0D0A, r24	; 0x800d0a <_ZN7TwoWire14txBufferLengthE>
    6f8a:	04 c0       	rjmp	.+8      	; 0x6f94 <_ZN7TwoWire5writeEh+0x50>
    6f8c:	61 e0       	ldi	r22, 0x01	; 1
    6f8e:	ce 01       	movw	r24, r28
    6f90:	01 96       	adiw	r24, 0x01	; 1
    6f92:	da dd       	rcall	.-1100   	; 0x6b48 <twi_transmit>
    6f94:	81 e0       	ldi	r24, 0x01	; 1
    6f96:	90 e0       	ldi	r25, 0x00	; 0
    6f98:	0f 90       	pop	r0
    6f9a:	df 91       	pop	r29
    6f9c:	cf 91       	pop	r28
    6f9e:	08 95       	ret

00006fa0 <_ZN7TwoWireC1Ev>:
    6fa0:	fc 01       	movw	r30, r24
    6fa2:	13 82       	std	Z+3, r1	; 0x03
    6fa4:	12 82       	std	Z+2, r1	; 0x02
    6fa6:	88 ee       	ldi	r24, 0xE8	; 232
    6fa8:	93 e0       	ldi	r25, 0x03	; 3
    6faa:	a0 e0       	ldi	r26, 0x00	; 0
    6fac:	b0 e0       	ldi	r27, 0x00	; 0
    6fae:	84 83       	std	Z+4, r24	; 0x04
    6fb0:	95 83       	std	Z+5, r25	; 0x05
    6fb2:	a6 83       	std	Z+6, r26	; 0x06
    6fb4:	b7 83       	std	Z+7, r27	; 0x07
    6fb6:	88 e4       	ldi	r24, 0x48	; 72
    6fb8:	99 e0       	ldi	r25, 0x09	; 9
    6fba:	91 83       	std	Z+1, r25	; 0x01
    6fbc:	80 83       	st	Z, r24
    6fbe:	08 95       	ret

00006fc0 <_ZN7TwoWire5beginEv>:
    6fc0:	10 92 2e 0d 	sts	0x0D2E, r1	; 0x800d2e <_ZN7TwoWire13rxBufferIndexE>
    6fc4:	10 92 2d 0d 	sts	0x0D2D, r1	; 0x800d2d <_ZN7TwoWire14rxBufferLengthE>
    6fc8:	10 92 0b 0d 	sts	0x0D0B, r1	; 0x800d0b <_ZN7TwoWire13txBufferIndexE>
    6fcc:	10 92 0a 0d 	sts	0x0D0A, r1	; 0x800d0a <_ZN7TwoWire14txBufferLengthE>
    6fd0:	de dc       	rcall	.-1604   	; 0x698e <twi_init>
    6fd2:	8a e6       	ldi	r24, 0x6A	; 106
    6fd4:	97 e3       	ldi	r25, 0x37	; 55
    6fd6:	e5 dd       	rcall	.-1078   	; 0x6ba2 <twi_attachSlaveTxEvent>
    6fd8:	80 e4       	ldi	r24, 0x40	; 64
    6fda:	97 e3       	ldi	r25, 0x37	; 55
    6fdc:	dd cd       	rjmp	.-1094   	; 0x6b98 <twi_attachSlaveRxEvent>

00006fde <_ZN7TwoWire3endEv>:
    6fde:	f5 cc       	rjmp	.-1558   	; 0x69ca <twi_disable>

00006fe0 <_ZN7TwoWire8setClockEm>:
    6fe0:	cb 01       	movw	r24, r22
    6fe2:	ba 01       	movw	r22, r20
    6fe4:	ff cc       	rjmp	.-1538   	; 0x69e4 <twi_setFrequency>

00006fe6 <_ZN7TwoWire17beginTransmissionEh>:
    6fe6:	81 e0       	ldi	r24, 0x01	; 1
    6fe8:	80 93 09 0d 	sts	0x0D09, r24	; 0x800d09 <_ZN7TwoWire12transmittingE>
    6fec:	60 93 2c 0d 	sts	0x0D2C, r22	; 0x800d2c <_ZN7TwoWire9txAddressE>
    6ff0:	10 92 0b 0d 	sts	0x0D0B, r1	; 0x800d0b <_ZN7TwoWire13txBufferIndexE>
    6ff4:	10 92 0a 0d 	sts	0x0D0A, r1	; 0x800d0a <_ZN7TwoWire14txBufferLengthE>
    6ff8:	08 95       	ret

00006ffa <_ZN7TwoWire17beginTransmissionEi>:
    6ffa:	f5 cf       	rjmp	.-22     	; 0x6fe6 <_ZN7TwoWire17beginTransmissionEh>

00006ffc <_ZN7TwoWire15endTransmissionEh>:
    6ffc:	0f 93       	push	r16
    6ffe:	06 2f       	mov	r16, r22
    7000:	21 e0       	ldi	r18, 0x01	; 1
    7002:	40 91 0a 0d 	lds	r20, 0x0D0A	; 0x800d0a <_ZN7TwoWire14txBufferLengthE>
    7006:	6c e0       	ldi	r22, 0x0C	; 12
    7008:	7d e0       	ldi	r23, 0x0D	; 13
    700a:	80 91 2c 0d 	lds	r24, 0x0D2C	; 0x800d2c <_ZN7TwoWire9txAddressE>
    700e:	46 dd       	rcall	.-1396   	; 0x6a9c <twi_writeTo>
    7010:	10 92 0b 0d 	sts	0x0D0B, r1	; 0x800d0b <_ZN7TwoWire13txBufferIndexE>
    7014:	10 92 0a 0d 	sts	0x0D0A, r1	; 0x800d0a <_ZN7TwoWire14txBufferLengthE>
    7018:	10 92 09 0d 	sts	0x0D09, r1	; 0x800d09 <_ZN7TwoWire12transmittingE>
    701c:	0f 91       	pop	r16
    701e:	08 95       	ret

00007020 <_ZN7TwoWire11requestFromEhhmhh>:
    7020:	4f 92       	push	r4
    7022:	5f 92       	push	r5
    7024:	6f 92       	push	r6
    7026:	7f 92       	push	r7
    7028:	af 92       	push	r10
    702a:	bf 92       	push	r11
    702c:	cf 92       	push	r12
    702e:	ef 92       	push	r14
    7030:	ff 92       	push	r15
    7032:	0f 93       	push	r16
    7034:	1f 93       	push	r17
    7036:	cf 93       	push	r28
    7038:	df 93       	push	r29
    703a:	5c 01       	movw	r10, r24
    703c:	f6 2e       	mov	r15, r22
    703e:	d4 2f       	mov	r29, r20
    7040:	28 01       	movw	r4, r16
    7042:	39 01       	movw	r6, r18
    7044:	ee 20       	and	r14, r14
    7046:	11 f1       	breq	.+68     	; 0x708c <_ZN7TwoWire11requestFromEhhmhh+0x6c>
    7048:	ce df       	rcall	.-100    	; 0x6fe6 <_ZN7TwoWire17beginTransmissionEh>
    704a:	ce 2d       	mov	r28, r14
    704c:	c4 30       	cpi	r28, 0x04	; 4
    704e:	08 f0       	brcs	.+2      	; 0x7052 <_ZN7TwoWire11requestFromEhhmhh+0x32>
    7050:	c3 e0       	ldi	r28, 0x03	; 3
    7052:	c1 50       	subi	r28, 0x01	; 1
    7054:	c0 f0       	brcs	.+48     	; 0x7086 <_ZN7TwoWire11requestFromEhhmhh+0x66>
    7056:	28 e0       	ldi	r18, 0x08	; 8
    7058:	c2 9f       	mul	r28, r18
    705a:	c0 01       	movw	r24, r0
    705c:	11 24       	eor	r1, r1
    705e:	a3 01       	movw	r20, r6
    7060:	92 01       	movw	r18, r4
    7062:	04 c0       	rjmp	.+8      	; 0x706c <_ZN7TwoWire11requestFromEhhmhh+0x4c>
    7064:	56 95       	lsr	r21
    7066:	47 95       	ror	r20
    7068:	37 95       	ror	r19
    706a:	27 95       	ror	r18
    706c:	8a 95       	dec	r24
    706e:	d2 f7       	brpl	.-12     	; 0x7064 <_ZN7TwoWire11requestFromEhhmhh+0x44>
    7070:	ca 01       	movw	r24, r20
    7072:	b9 01       	movw	r22, r18
    7074:	d5 01       	movw	r26, r10
    7076:	ed 91       	ld	r30, X+
    7078:	fc 91       	ld	r31, X
    707a:	01 90       	ld	r0, Z+
    707c:	f0 81       	ld	r31, Z
    707e:	e0 2d       	mov	r30, r0
    7080:	c5 01       	movw	r24, r10
    7082:	09 95       	icall
    7084:	e6 cf       	rjmp	.-52     	; 0x7052 <_ZN7TwoWire11requestFromEhhmhh+0x32>
    7086:	60 e0       	ldi	r22, 0x00	; 0
    7088:	c5 01       	movw	r24, r10
    708a:	b8 df       	rcall	.-144    	; 0x6ffc <_ZN7TwoWire15endTransmissionEh>
    708c:	4d 2f       	mov	r20, r29
    708e:	d1 32       	cpi	r29, 0x21	; 33
    7090:	08 f0       	brcs	.+2      	; 0x7094 <_ZN7TwoWire11requestFromEhhmhh+0x74>
    7092:	40 e2       	ldi	r20, 0x20	; 32
    7094:	2c 2d       	mov	r18, r12
    7096:	6f e2       	ldi	r22, 0x2F	; 47
    7098:	7d e0       	ldi	r23, 0x0D	; 13
    709a:	8f 2d       	mov	r24, r15
    709c:	b7 dc       	rcall	.-1682   	; 0x6a0c <twi_readFrom>
    709e:	10 92 2e 0d 	sts	0x0D2E, r1	; 0x800d2e <_ZN7TwoWire13rxBufferIndexE>
    70a2:	80 93 2d 0d 	sts	0x0D2D, r24	; 0x800d2d <_ZN7TwoWire14rxBufferLengthE>
    70a6:	df 91       	pop	r29
    70a8:	cf 91       	pop	r28
    70aa:	1f 91       	pop	r17
    70ac:	0f 91       	pop	r16
    70ae:	ff 90       	pop	r15
    70b0:	ef 90       	pop	r14
    70b2:	cf 90       	pop	r12
    70b4:	bf 90       	pop	r11
    70b6:	af 90       	pop	r10
    70b8:	7f 90       	pop	r7
    70ba:	6f 90       	pop	r6
    70bc:	5f 90       	pop	r5
    70be:	4f 90       	pop	r4
    70c0:	08 95       	ret

000070c2 <_ZN7TwoWire11requestFromEhhh>:
    70c2:	cf 92       	push	r12
    70c4:	ef 92       	push	r14
    70c6:	0f 93       	push	r16
    70c8:	1f 93       	push	r17
    70ca:	c2 2e       	mov	r12, r18
    70cc:	e1 2c       	mov	r14, r1
    70ce:	00 e0       	ldi	r16, 0x00	; 0
    70d0:	10 e0       	ldi	r17, 0x00	; 0
    70d2:	98 01       	movw	r18, r16
    70d4:	a5 df       	rcall	.-182    	; 0x7020 <_ZN7TwoWire11requestFromEhhmhh>
    70d6:	1f 91       	pop	r17
    70d8:	0f 91       	pop	r16
    70da:	ef 90       	pop	r14
    70dc:	cf 90       	pop	r12
    70de:	08 95       	ret

000070e0 <_ZN7TwoWire11requestFromEhh>:
    70e0:	21 e0       	ldi	r18, 0x01	; 1
    70e2:	ef cf       	rjmp	.-34     	; 0x70c2 <_ZN7TwoWire11requestFromEhhh>

000070e4 <_ZN7TwoWire11requestFromEii>:
    70e4:	21 e0       	ldi	r18, 0x01	; 1
    70e6:	ed cf       	rjmp	.-38     	; 0x70c2 <_ZN7TwoWire11requestFromEhhh>

000070e8 <_ZN7TwoWire15endTransmissionEv>:
    70e8:	61 e0       	ldi	r22, 0x01	; 1
    70ea:	88 cf       	rjmp	.-240    	; 0x6ffc <_ZN7TwoWire15endTransmissionEh>

000070ec <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    70ec:	89 ef       	ldi	r24, 0xF9	; 249
    70ee:	9c e0       	ldi	r25, 0x0C	; 12
    70f0:	57 cf       	rjmp	.-338    	; 0x6fa0 <_ZN7TwoWireC1Ev>

000070f2 <__cmpsf2>:
    70f2:	a8 d0       	rcall	.+336    	; 0x7244 <__fp_cmp>
    70f4:	08 f4       	brcc	.+2      	; 0x70f8 <__cmpsf2+0x6>
    70f6:	81 e0       	ldi	r24, 0x01	; 1
    70f8:	08 95       	ret

000070fa <__divsf3>:
    70fa:	0c d0       	rcall	.+24     	; 0x7114 <__divsf3x>
    70fc:	de c0       	rjmp	.+444    	; 0x72ba <__fp_round>
    70fe:	d6 d0       	rcall	.+428    	; 0x72ac <__fp_pscB>
    7100:	40 f0       	brcs	.+16     	; 0x7112 <__divsf3+0x18>
    7102:	cd d0       	rcall	.+410    	; 0x729e <__fp_pscA>
    7104:	30 f0       	brcs	.+12     	; 0x7112 <__divsf3+0x18>
    7106:	21 f4       	brne	.+8      	; 0x7110 <__divsf3+0x16>
    7108:	5f 3f       	cpi	r21, 0xFF	; 255
    710a:	19 f0       	breq	.+6      	; 0x7112 <__divsf3+0x18>
    710c:	bf c0       	rjmp	.+382    	; 0x728c <__fp_inf>
    710e:	51 11       	cpse	r21, r1
    7110:	08 c1       	rjmp	.+528    	; 0x7322 <__fp_szero>
    7112:	c2 c0       	rjmp	.+388    	; 0x7298 <__fp_nan>

00007114 <__divsf3x>:
    7114:	e3 d0       	rcall	.+454    	; 0x72dc <__fp_split3>
    7116:	98 f3       	brcs	.-26     	; 0x70fe <__divsf3+0x4>

00007118 <__divsf3_pse>:
    7118:	99 23       	and	r25, r25
    711a:	c9 f3       	breq	.-14     	; 0x710e <__divsf3+0x14>
    711c:	55 23       	and	r21, r21
    711e:	b1 f3       	breq	.-20     	; 0x710c <__divsf3+0x12>
    7120:	95 1b       	sub	r25, r21
    7122:	55 0b       	sbc	r21, r21
    7124:	bb 27       	eor	r27, r27
    7126:	aa 27       	eor	r26, r26
    7128:	62 17       	cp	r22, r18
    712a:	73 07       	cpc	r23, r19
    712c:	84 07       	cpc	r24, r20
    712e:	38 f0       	brcs	.+14     	; 0x713e <__divsf3_pse+0x26>
    7130:	9f 5f       	subi	r25, 0xFF	; 255
    7132:	5f 4f       	sbci	r21, 0xFF	; 255
    7134:	22 0f       	add	r18, r18
    7136:	33 1f       	adc	r19, r19
    7138:	44 1f       	adc	r20, r20
    713a:	aa 1f       	adc	r26, r26
    713c:	a9 f3       	breq	.-22     	; 0x7128 <__divsf3_pse+0x10>
    713e:	33 d0       	rcall	.+102    	; 0x71a6 <__divsf3_pse+0x8e>
    7140:	0e 2e       	mov	r0, r30
    7142:	3a f0       	brmi	.+14     	; 0x7152 <__divsf3_pse+0x3a>
    7144:	e0 e8       	ldi	r30, 0x80	; 128
    7146:	30 d0       	rcall	.+96     	; 0x71a8 <__divsf3_pse+0x90>
    7148:	91 50       	subi	r25, 0x01	; 1
    714a:	50 40       	sbci	r21, 0x00	; 0
    714c:	e6 95       	lsr	r30
    714e:	00 1c       	adc	r0, r0
    7150:	ca f7       	brpl	.-14     	; 0x7144 <__divsf3_pse+0x2c>
    7152:	29 d0       	rcall	.+82     	; 0x71a6 <__divsf3_pse+0x8e>
    7154:	fe 2f       	mov	r31, r30
    7156:	27 d0       	rcall	.+78     	; 0x71a6 <__divsf3_pse+0x8e>
    7158:	66 0f       	add	r22, r22
    715a:	77 1f       	adc	r23, r23
    715c:	88 1f       	adc	r24, r24
    715e:	bb 1f       	adc	r27, r27
    7160:	26 17       	cp	r18, r22
    7162:	37 07       	cpc	r19, r23
    7164:	48 07       	cpc	r20, r24
    7166:	ab 07       	cpc	r26, r27
    7168:	b0 e8       	ldi	r27, 0x80	; 128
    716a:	09 f0       	breq	.+2      	; 0x716e <__divsf3_pse+0x56>
    716c:	bb 0b       	sbc	r27, r27
    716e:	80 2d       	mov	r24, r0
    7170:	bf 01       	movw	r22, r30
    7172:	ff 27       	eor	r31, r31
    7174:	93 58       	subi	r25, 0x83	; 131
    7176:	5f 4f       	sbci	r21, 0xFF	; 255
    7178:	2a f0       	brmi	.+10     	; 0x7184 <__divsf3_pse+0x6c>
    717a:	9e 3f       	cpi	r25, 0xFE	; 254
    717c:	51 05       	cpc	r21, r1
    717e:	68 f0       	brcs	.+26     	; 0x719a <__divsf3_pse+0x82>
    7180:	85 c0       	rjmp	.+266    	; 0x728c <__fp_inf>
    7182:	cf c0       	rjmp	.+414    	; 0x7322 <__fp_szero>
    7184:	5f 3f       	cpi	r21, 0xFF	; 255
    7186:	ec f3       	brlt	.-6      	; 0x7182 <__divsf3_pse+0x6a>
    7188:	98 3e       	cpi	r25, 0xE8	; 232
    718a:	dc f3       	brlt	.-10     	; 0x7182 <__divsf3_pse+0x6a>
    718c:	86 95       	lsr	r24
    718e:	77 95       	ror	r23
    7190:	67 95       	ror	r22
    7192:	b7 95       	ror	r27
    7194:	f7 95       	ror	r31
    7196:	9f 5f       	subi	r25, 0xFF	; 255
    7198:	c9 f7       	brne	.-14     	; 0x718c <__divsf3_pse+0x74>
    719a:	88 0f       	add	r24, r24
    719c:	91 1d       	adc	r25, r1
    719e:	96 95       	lsr	r25
    71a0:	87 95       	ror	r24
    71a2:	97 f9       	bld	r25, 7
    71a4:	08 95       	ret
    71a6:	e1 e0       	ldi	r30, 0x01	; 1
    71a8:	66 0f       	add	r22, r22
    71aa:	77 1f       	adc	r23, r23
    71ac:	88 1f       	adc	r24, r24
    71ae:	bb 1f       	adc	r27, r27
    71b0:	62 17       	cp	r22, r18
    71b2:	73 07       	cpc	r23, r19
    71b4:	84 07       	cpc	r24, r20
    71b6:	ba 07       	cpc	r27, r26
    71b8:	20 f0       	brcs	.+8      	; 0x71c2 <__divsf3_pse+0xaa>
    71ba:	62 1b       	sub	r22, r18
    71bc:	73 0b       	sbc	r23, r19
    71be:	84 0b       	sbc	r24, r20
    71c0:	ba 0b       	sbc	r27, r26
    71c2:	ee 1f       	adc	r30, r30
    71c4:	88 f7       	brcc	.-30     	; 0x71a8 <__divsf3_pse+0x90>
    71c6:	e0 95       	com	r30
    71c8:	08 95       	ret

000071ca <__floatunsisf>:
    71ca:	e8 94       	clt
    71cc:	09 c0       	rjmp	.+18     	; 0x71e0 <__floatsisf+0x12>

000071ce <__floatsisf>:
    71ce:	97 fb       	bst	r25, 7
    71d0:	3e f4       	brtc	.+14     	; 0x71e0 <__floatsisf+0x12>
    71d2:	90 95       	com	r25
    71d4:	80 95       	com	r24
    71d6:	70 95       	com	r23
    71d8:	61 95       	neg	r22
    71da:	7f 4f       	sbci	r23, 0xFF	; 255
    71dc:	8f 4f       	sbci	r24, 0xFF	; 255
    71de:	9f 4f       	sbci	r25, 0xFF	; 255
    71e0:	99 23       	and	r25, r25
    71e2:	a9 f0       	breq	.+42     	; 0x720e <__floatsisf+0x40>
    71e4:	f9 2f       	mov	r31, r25
    71e6:	96 e9       	ldi	r25, 0x96	; 150
    71e8:	bb 27       	eor	r27, r27
    71ea:	93 95       	inc	r25
    71ec:	f6 95       	lsr	r31
    71ee:	87 95       	ror	r24
    71f0:	77 95       	ror	r23
    71f2:	67 95       	ror	r22
    71f4:	b7 95       	ror	r27
    71f6:	f1 11       	cpse	r31, r1
    71f8:	f8 cf       	rjmp	.-16     	; 0x71ea <__floatsisf+0x1c>
    71fa:	fa f4       	brpl	.+62     	; 0x723a <__floatsisf+0x6c>
    71fc:	bb 0f       	add	r27, r27
    71fe:	11 f4       	brne	.+4      	; 0x7204 <__floatsisf+0x36>
    7200:	60 ff       	sbrs	r22, 0
    7202:	1b c0       	rjmp	.+54     	; 0x723a <__floatsisf+0x6c>
    7204:	6f 5f       	subi	r22, 0xFF	; 255
    7206:	7f 4f       	sbci	r23, 0xFF	; 255
    7208:	8f 4f       	sbci	r24, 0xFF	; 255
    720a:	9f 4f       	sbci	r25, 0xFF	; 255
    720c:	16 c0       	rjmp	.+44     	; 0x723a <__floatsisf+0x6c>
    720e:	88 23       	and	r24, r24
    7210:	11 f0       	breq	.+4      	; 0x7216 <__floatsisf+0x48>
    7212:	96 e9       	ldi	r25, 0x96	; 150
    7214:	11 c0       	rjmp	.+34     	; 0x7238 <__floatsisf+0x6a>
    7216:	77 23       	and	r23, r23
    7218:	21 f0       	breq	.+8      	; 0x7222 <__floatsisf+0x54>
    721a:	9e e8       	ldi	r25, 0x8E	; 142
    721c:	87 2f       	mov	r24, r23
    721e:	76 2f       	mov	r23, r22
    7220:	05 c0       	rjmp	.+10     	; 0x722c <__floatsisf+0x5e>
    7222:	66 23       	and	r22, r22
    7224:	71 f0       	breq	.+28     	; 0x7242 <__floatsisf+0x74>
    7226:	96 e8       	ldi	r25, 0x86	; 134
    7228:	86 2f       	mov	r24, r22
    722a:	70 e0       	ldi	r23, 0x00	; 0
    722c:	60 e0       	ldi	r22, 0x00	; 0
    722e:	2a f0       	brmi	.+10     	; 0x723a <__floatsisf+0x6c>
    7230:	9a 95       	dec	r25
    7232:	66 0f       	add	r22, r22
    7234:	77 1f       	adc	r23, r23
    7236:	88 1f       	adc	r24, r24
    7238:	da f7       	brpl	.-10     	; 0x7230 <__floatsisf+0x62>
    723a:	88 0f       	add	r24, r24
    723c:	96 95       	lsr	r25
    723e:	87 95       	ror	r24
    7240:	97 f9       	bld	r25, 7
    7242:	08 95       	ret

00007244 <__fp_cmp>:
    7244:	99 0f       	add	r25, r25
    7246:	00 08       	sbc	r0, r0
    7248:	55 0f       	add	r21, r21
    724a:	aa 0b       	sbc	r26, r26
    724c:	e0 e8       	ldi	r30, 0x80	; 128
    724e:	fe ef       	ldi	r31, 0xFE	; 254
    7250:	16 16       	cp	r1, r22
    7252:	17 06       	cpc	r1, r23
    7254:	e8 07       	cpc	r30, r24
    7256:	f9 07       	cpc	r31, r25
    7258:	c0 f0       	brcs	.+48     	; 0x728a <__fp_cmp+0x46>
    725a:	12 16       	cp	r1, r18
    725c:	13 06       	cpc	r1, r19
    725e:	e4 07       	cpc	r30, r20
    7260:	f5 07       	cpc	r31, r21
    7262:	98 f0       	brcs	.+38     	; 0x728a <__fp_cmp+0x46>
    7264:	62 1b       	sub	r22, r18
    7266:	73 0b       	sbc	r23, r19
    7268:	84 0b       	sbc	r24, r20
    726a:	95 0b       	sbc	r25, r21
    726c:	39 f4       	brne	.+14     	; 0x727c <__fp_cmp+0x38>
    726e:	0a 26       	eor	r0, r26
    7270:	61 f0       	breq	.+24     	; 0x728a <__fp_cmp+0x46>
    7272:	23 2b       	or	r18, r19
    7274:	24 2b       	or	r18, r20
    7276:	25 2b       	or	r18, r21
    7278:	21 f4       	brne	.+8      	; 0x7282 <__fp_cmp+0x3e>
    727a:	08 95       	ret
    727c:	0a 26       	eor	r0, r26
    727e:	09 f4       	brne	.+2      	; 0x7282 <__fp_cmp+0x3e>
    7280:	a1 40       	sbci	r26, 0x01	; 1
    7282:	a6 95       	lsr	r26
    7284:	8f ef       	ldi	r24, 0xFF	; 255
    7286:	81 1d       	adc	r24, r1
    7288:	81 1d       	adc	r24, r1
    728a:	08 95       	ret

0000728c <__fp_inf>:
    728c:	97 f9       	bld	r25, 7
    728e:	9f 67       	ori	r25, 0x7F	; 127
    7290:	80 e8       	ldi	r24, 0x80	; 128
    7292:	70 e0       	ldi	r23, 0x00	; 0
    7294:	60 e0       	ldi	r22, 0x00	; 0
    7296:	08 95       	ret

00007298 <__fp_nan>:
    7298:	9f ef       	ldi	r25, 0xFF	; 255
    729a:	80 ec       	ldi	r24, 0xC0	; 192
    729c:	08 95       	ret

0000729e <__fp_pscA>:
    729e:	00 24       	eor	r0, r0
    72a0:	0a 94       	dec	r0
    72a2:	16 16       	cp	r1, r22
    72a4:	17 06       	cpc	r1, r23
    72a6:	18 06       	cpc	r1, r24
    72a8:	09 06       	cpc	r0, r25
    72aa:	08 95       	ret

000072ac <__fp_pscB>:
    72ac:	00 24       	eor	r0, r0
    72ae:	0a 94       	dec	r0
    72b0:	12 16       	cp	r1, r18
    72b2:	13 06       	cpc	r1, r19
    72b4:	14 06       	cpc	r1, r20
    72b6:	05 06       	cpc	r0, r21
    72b8:	08 95       	ret

000072ba <__fp_round>:
    72ba:	09 2e       	mov	r0, r25
    72bc:	03 94       	inc	r0
    72be:	00 0c       	add	r0, r0
    72c0:	11 f4       	brne	.+4      	; 0x72c6 <__fp_round+0xc>
    72c2:	88 23       	and	r24, r24
    72c4:	52 f0       	brmi	.+20     	; 0x72da <__fp_round+0x20>
    72c6:	bb 0f       	add	r27, r27
    72c8:	40 f4       	brcc	.+16     	; 0x72da <__fp_round+0x20>
    72ca:	bf 2b       	or	r27, r31
    72cc:	11 f4       	brne	.+4      	; 0x72d2 <__fp_round+0x18>
    72ce:	60 ff       	sbrs	r22, 0
    72d0:	04 c0       	rjmp	.+8      	; 0x72da <__fp_round+0x20>
    72d2:	6f 5f       	subi	r22, 0xFF	; 255
    72d4:	7f 4f       	sbci	r23, 0xFF	; 255
    72d6:	8f 4f       	sbci	r24, 0xFF	; 255
    72d8:	9f 4f       	sbci	r25, 0xFF	; 255
    72da:	08 95       	ret

000072dc <__fp_split3>:
    72dc:	57 fd       	sbrc	r21, 7
    72de:	90 58       	subi	r25, 0x80	; 128
    72e0:	44 0f       	add	r20, r20
    72e2:	55 1f       	adc	r21, r21
    72e4:	59 f0       	breq	.+22     	; 0x72fc <__fp_splitA+0x10>
    72e6:	5f 3f       	cpi	r21, 0xFF	; 255
    72e8:	71 f0       	breq	.+28     	; 0x7306 <__fp_splitA+0x1a>
    72ea:	47 95       	ror	r20

000072ec <__fp_splitA>:
    72ec:	88 0f       	add	r24, r24
    72ee:	97 fb       	bst	r25, 7
    72f0:	99 1f       	adc	r25, r25
    72f2:	61 f0       	breq	.+24     	; 0x730c <__fp_splitA+0x20>
    72f4:	9f 3f       	cpi	r25, 0xFF	; 255
    72f6:	79 f0       	breq	.+30     	; 0x7316 <__fp_splitA+0x2a>
    72f8:	87 95       	ror	r24
    72fa:	08 95       	ret
    72fc:	12 16       	cp	r1, r18
    72fe:	13 06       	cpc	r1, r19
    7300:	14 06       	cpc	r1, r20
    7302:	55 1f       	adc	r21, r21
    7304:	f2 cf       	rjmp	.-28     	; 0x72ea <__fp_split3+0xe>
    7306:	46 95       	lsr	r20
    7308:	f1 df       	rcall	.-30     	; 0x72ec <__fp_splitA>
    730a:	08 c0       	rjmp	.+16     	; 0x731c <__fp_splitA+0x30>
    730c:	16 16       	cp	r1, r22
    730e:	17 06       	cpc	r1, r23
    7310:	18 06       	cpc	r1, r24
    7312:	99 1f       	adc	r25, r25
    7314:	f1 cf       	rjmp	.-30     	; 0x72f8 <__fp_splitA+0xc>
    7316:	86 95       	lsr	r24
    7318:	71 05       	cpc	r23, r1
    731a:	61 05       	cpc	r22, r1
    731c:	08 94       	sec
    731e:	08 95       	ret

00007320 <__fp_zero>:
    7320:	e8 94       	clt

00007322 <__fp_szero>:
    7322:	bb 27       	eor	r27, r27
    7324:	66 27       	eor	r22, r22
    7326:	77 27       	eor	r23, r23
    7328:	cb 01       	movw	r24, r22
    732a:	97 f9       	bld	r25, 7
    732c:	08 95       	ret

0000732e <__cxa_pure_virtual>:
    732e:	0e 94 c1 44 	call	0x8982	; 0x8982 <abort>

00007332 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    7332:	1f 92       	push	r1
    7334:	0f 92       	push	r0
    7336:	0f b6       	in	r0, 0x3f	; 63
    7338:	0f 92       	push	r0
    733a:	11 24       	eor	r1, r1
    733c:	2f 93       	push	r18
    733e:	8f 93       	push	r24
    7340:	9f 93       	push	r25
    7342:	ef 93       	push	r30
    7344:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    7346:	e0 91 5f 0d 	lds	r30, 0x0D5F	; 0x800d5f <Serial+0x10>
    734a:	f0 91 60 0d 	lds	r31, 0x0D60	; 0x800d60 <Serial+0x11>
    734e:	80 81       	ld	r24, Z
    7350:	e0 91 65 0d 	lds	r30, 0x0D65	; 0x800d65 <Serial+0x16>
    7354:	f0 91 66 0d 	lds	r31, 0x0D66	; 0x800d66 <Serial+0x17>
    7358:	82 fd       	sbrc	r24, 2
    735a:	12 c0       	rjmp	.+36     	; 0x7380 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    735c:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    735e:	80 91 68 0d 	lds	r24, 0x0D68	; 0x800d68 <Serial+0x19>
    7362:	8f 5f       	subi	r24, 0xFF	; 255
    7364:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    7366:	20 91 69 0d 	lds	r18, 0x0D69	; 0x800d69 <Serial+0x1a>
    736a:	82 17       	cp	r24, r18
    736c:	51 f0       	breq	.+20     	; 0x7382 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    736e:	e0 91 68 0d 	lds	r30, 0x0D68	; 0x800d68 <Serial+0x19>
    7372:	f0 e0       	ldi	r31, 0x00	; 0
    7374:	e1 5b       	subi	r30, 0xB1	; 177
    7376:	f2 4f       	sbci	r31, 0xF2	; 242
    7378:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    737a:	80 93 68 0d 	sts	0x0D68, r24	; 0x800d68 <Serial+0x19>
    737e:	01 c0       	rjmp	.+2      	; 0x7382 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    7380:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    7382:	ff 91       	pop	r31
    7384:	ef 91       	pop	r30
    7386:	9f 91       	pop	r25
    7388:	8f 91       	pop	r24
    738a:	2f 91       	pop	r18
    738c:	0f 90       	pop	r0
    738e:	0f be       	out	0x3f, r0	; 63
    7390:	0f 90       	pop	r0
    7392:	1f 90       	pop	r1
    7394:	18 95       	reti

00007396 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    7396:	1f 92       	push	r1
    7398:	0f 92       	push	r0
    739a:	0f b6       	in	r0, 0x3f	; 63
    739c:	0f 92       	push	r0
    739e:	11 24       	eor	r1, r1
    73a0:	2f 93       	push	r18
    73a2:	3f 93       	push	r19
    73a4:	4f 93       	push	r20
    73a6:	5f 93       	push	r21
    73a8:	6f 93       	push	r22
    73aa:	7f 93       	push	r23
    73ac:	8f 93       	push	r24
    73ae:	9f 93       	push	r25
    73b0:	af 93       	push	r26
    73b2:	bf 93       	push	r27
    73b4:	ef 93       	push	r30
    73b6:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    73b8:	8f e4       	ldi	r24, 0x4F	; 79
    73ba:	9d e0       	ldi	r25, 0x0D	; 13
    73bc:	b2 d6       	rcall	.+3428   	; 0x8122 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    73be:	ff 91       	pop	r31
    73c0:	ef 91       	pop	r30
    73c2:	bf 91       	pop	r27
    73c4:	af 91       	pop	r26
    73c6:	9f 91       	pop	r25
    73c8:	8f 91       	pop	r24
    73ca:	7f 91       	pop	r23
    73cc:	6f 91       	pop	r22
    73ce:	5f 91       	pop	r21
    73d0:	4f 91       	pop	r20
    73d2:	3f 91       	pop	r19
    73d4:	2f 91       	pop	r18
    73d6:	0f 90       	pop	r0
    73d8:	0f be       	out	0x3f, r0	; 63
    73da:	0f 90       	pop	r0
    73dc:	1f 90       	pop	r1
    73de:	18 95       	reti

000073e0 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    73e0:	8f e4       	ldi	r24, 0x4F	; 79
    73e2:	9d e0       	ldi	r25, 0x0D	; 13
    73e4:	54 d6       	rcall	.+3240   	; 0x808e <_ZN14HardwareSerial9availableEv>
    73e6:	21 e0       	ldi	r18, 0x01	; 1
    73e8:	89 2b       	or	r24, r25
    73ea:	09 f4       	brne	.+2      	; 0x73ee <_Z17Serial0_availablev+0xe>
    73ec:	20 e0       	ldi	r18, 0x00	; 0
}
    73ee:	82 2f       	mov	r24, r18
    73f0:	08 95       	ret

000073f2 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    73f2:	ef e4       	ldi	r30, 0x4F	; 79
    73f4:	fd e0       	ldi	r31, 0x0D	; 13
    73f6:	13 82       	std	Z+3, r1	; 0x03
    73f8:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    73fa:	88 ee       	ldi	r24, 0xE8	; 232
    73fc:	93 e0       	ldi	r25, 0x03	; 3
    73fe:	a0 e0       	ldi	r26, 0x00	; 0
    7400:	b0 e0       	ldi	r27, 0x00	; 0
    7402:	84 83       	std	Z+4, r24	; 0x04
    7404:	95 83       	std	Z+5, r25	; 0x05
    7406:	a6 83       	std	Z+6, r26	; 0x06
    7408:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    740a:	8c e6       	ldi	r24, 0x6C	; 108
    740c:	99 e0       	ldi	r25, 0x09	; 9
    740e:	91 83       	std	Z+1, r25	; 0x01
    7410:	80 83       	st	Z, r24
    7412:	85 ec       	ldi	r24, 0xC5	; 197
    7414:	90 e0       	ldi	r25, 0x00	; 0
    7416:	95 87       	std	Z+13, r25	; 0x0d
    7418:	84 87       	std	Z+12, r24	; 0x0c
    741a:	84 ec       	ldi	r24, 0xC4	; 196
    741c:	90 e0       	ldi	r25, 0x00	; 0
    741e:	97 87       	std	Z+15, r25	; 0x0f
    7420:	86 87       	std	Z+14, r24	; 0x0e
    7422:	80 ec       	ldi	r24, 0xC0	; 192
    7424:	90 e0       	ldi	r25, 0x00	; 0
    7426:	91 8b       	std	Z+17, r25	; 0x11
    7428:	80 8b       	std	Z+16, r24	; 0x10
    742a:	81 ec       	ldi	r24, 0xC1	; 193
    742c:	90 e0       	ldi	r25, 0x00	; 0
    742e:	93 8b       	std	Z+19, r25	; 0x13
    7430:	82 8b       	std	Z+18, r24	; 0x12
    7432:	82 ec       	ldi	r24, 0xC2	; 194
    7434:	90 e0       	ldi	r25, 0x00	; 0
    7436:	95 8b       	std	Z+21, r25	; 0x15
    7438:	84 8b       	std	Z+20, r24	; 0x14
    743a:	86 ec       	ldi	r24, 0xC6	; 198
    743c:	90 e0       	ldi	r25, 0x00	; 0
    743e:	97 8b       	std	Z+23, r25	; 0x17
    7440:	86 8b       	std	Z+22, r24	; 0x16
    7442:	11 8e       	std	Z+25, r1	; 0x19
    7444:	12 8e       	std	Z+26, r1	; 0x1a
    7446:	13 8e       	std	Z+27, r1	; 0x1b
    7448:	14 8e       	std	Z+28, r1	; 0x1c
    744a:	08 95       	ret

0000744c <_ZNK9IPAddress7printToER5Print>:
        // Too few dots (there must be 3 dots)
        return false;
    }
    _address.bytes[3] = acc;
    return true;
}
    744c:	8f 92       	push	r8
    744e:	9f 92       	push	r9
    7450:	af 92       	push	r10
    7452:	bf 92       	push	r11
    7454:	cf 92       	push	r12
    7456:	df 92       	push	r13
    7458:	ef 92       	push	r14
    745a:	ff 92       	push	r15
    745c:	0f 93       	push	r16
    745e:	1f 93       	push	r17
    7460:	cf 93       	push	r28
    7462:	df 93       	push	r29
    7464:	7c 01       	movw	r14, r24
    7466:	8b 01       	movw	r16, r22
    7468:	4c 01       	movw	r8, r24
    746a:	82 e0       	ldi	r24, 0x02	; 2
    746c:	88 0e       	add	r8, r24
    746e:	91 1c       	adc	r9, r1
    7470:	57 01       	movw	r10, r14
    7472:	e5 e0       	ldi	r30, 0x05	; 5
    7474:	ae 0e       	add	r10, r30
    7476:	b1 1c       	adc	r11, r1
    7478:	c0 e0       	ldi	r28, 0x00	; 0
    747a:	d0 e0       	ldi	r29, 0x00	; 0
    747c:	f4 01       	movw	r30, r8
    747e:	61 91       	ld	r22, Z+
    7480:	4f 01       	movw	r8, r30
    7482:	4a e0       	ldi	r20, 0x0A	; 10
    7484:	50 e0       	ldi	r21, 0x00	; 0
    7486:	c8 01       	movw	r24, r16
    7488:	57 d1       	rcall	.+686    	; 0x7738 <_ZN5Print5printEhi>
    748a:	6c 01       	movw	r12, r24
    748c:	6e e2       	ldi	r22, 0x2E	; 46
    748e:	c8 01       	movw	r24, r16
    7490:	c6 d0       	rcall	.+396    	; 0x761e <_ZN5Print5printEc>
    7492:	8c 0d       	add	r24, r12
    7494:	9d 1d       	adc	r25, r13
    7496:	c8 0f       	add	r28, r24
    7498:	d9 1f       	adc	r29, r25
    749a:	8a 14       	cp	r8, r10
    749c:	9b 04       	cpc	r9, r11
    749e:	71 f7       	brne	.-36     	; 0x747c <_ZNK9IPAddress7printToER5Print+0x30>
    74a0:	4a e0       	ldi	r20, 0x0A	; 10
    74a2:	50 e0       	ldi	r21, 0x00	; 0
    74a4:	f7 01       	movw	r30, r14
    74a6:	65 81       	ldd	r22, Z+5	; 0x05
    74a8:	c8 01       	movw	r24, r16
    74aa:	46 d1       	rcall	.+652    	; 0x7738 <_ZN5Print5printEhi>
    74ac:	8c 0f       	add	r24, r28
    74ae:	9d 1f       	adc	r25, r29
    74b0:	df 91       	pop	r29
    74b2:	cf 91       	pop	r28
    74b4:	1f 91       	pop	r17
    74b6:	0f 91       	pop	r16
    74b8:	ff 90       	pop	r15
    74ba:	ef 90       	pop	r14
    74bc:	df 90       	pop	r13
    74be:	cf 90       	pop	r12
    74c0:	bf 90       	pop	r11
    74c2:	af 90       	pop	r10
    74c4:	9f 90       	pop	r9
    74c6:	8f 90       	pop	r8
    74c8:	08 95       	ret

000074ca <_ZN9IPAddressC1Ev>:
    74ca:	2a e5       	ldi	r18, 0x5A	; 90
    74cc:	39 e0       	ldi	r19, 0x09	; 9
    74ce:	fc 01       	movw	r30, r24
    74d0:	31 83       	std	Z+1, r19	; 0x01
    74d2:	20 83       	st	Z, r18
    74d4:	12 82       	std	Z+2, r1	; 0x02
    74d6:	13 82       	std	Z+3, r1	; 0x03
    74d8:	14 82       	std	Z+4, r1	; 0x04
    74da:	15 82       	std	Z+5, r1	; 0x05
    74dc:	08 95       	ret

000074de <_ZN9IPAddressC1Ehhhh>:
    74de:	0f 93       	push	r16
    74e0:	fc 01       	movw	r30, r24
    74e2:	8a e5       	ldi	r24, 0x5A	; 90
    74e4:	99 e0       	ldi	r25, 0x09	; 9
    74e6:	91 83       	std	Z+1, r25	; 0x01
    74e8:	80 83       	st	Z, r24
    74ea:	62 83       	std	Z+2, r22	; 0x02
    74ec:	43 83       	std	Z+3, r20	; 0x03
    74ee:	24 83       	std	Z+4, r18	; 0x04
    74f0:	05 83       	std	Z+5, r16	; 0x05
    74f2:	0f 91       	pop	r16
    74f4:	08 95       	ret

000074f6 <_ZN9IPAddressC1EPKh>:
    74f6:	dc 01       	movw	r26, r24
    74f8:	8a e5       	ldi	r24, 0x5A	; 90
    74fa:	99 e0       	ldi	r25, 0x09	; 9
    74fc:	8d 93       	st	X+, r24
    74fe:	9d 93       	st	X+, r25
    7500:	84 e0       	ldi	r24, 0x04	; 4
    7502:	fb 01       	movw	r30, r22
    7504:	01 90       	ld	r0, Z+
    7506:	0d 92       	st	X+, r0
    7508:	8a 95       	dec	r24
    750a:	e1 f7       	brne	.-8      	; 0x7504 <_ZN9IPAddressC1EPKh+0xe>
    750c:	08 95       	ret

0000750e <_ZN9IPAddressaSEPKh>:

IPAddress& IPAddress::operator=(const uint8_t *address)
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
    750e:	dc 01       	movw	r26, r24
    7510:	12 96       	adiw	r26, 0x02	; 2
    7512:	24 e0       	ldi	r18, 0x04	; 4
    7514:	fb 01       	movw	r30, r22
    7516:	01 90       	ld	r0, Z+
    7518:	0d 92       	st	X+, r0
    751a:	2a 95       	dec	r18
    751c:	e1 f7       	brne	.-8      	; 0x7516 <_ZN9IPAddressaSEPKh+0x8>
    return *this;
}
    751e:	08 95       	ret

00007520 <initVariant>:
    7520:	08 95       	ret

00007522 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    7522:	ef d1       	rcall	.+990    	; 0x7902 <init>

	initVariant();
    7524:	fd df       	rcall	.-6      	; 0x7520 <initVariant>
    7526:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <setup>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    752a:	c4 e8       	ldi	r28, 0x84	; 132
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    752c:	d0 e4       	ldi	r29, 0x40	; 64
    752e:	0e 94 2c 10 	call	0x2058	; 0x2058 <loop>
#endif
	
	setup();
    
	for (;;) {
		loop();
    7532:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
    7534:	e1 f3       	breq	.-8      	; 0x752e <main+0xc>
    7536:	e8 d5       	rcall	.+3024   	; 0x8108 <_Z14serialEventRunv>
    7538:	fa cf       	rjmp	.-12     	; 0x752e <main+0xc>

0000753a <_ZN5Print5writeEPKhj>:
    753a:	cf 92       	push	r12
size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    753c:	df 92       	push	r13
    753e:	ef 92       	push	r14
    7540:	ff 92       	push	r15
    7542:	0f 93       	push	r16
    7544:	1f 93       	push	r17
    7546:	cf 93       	push	r28
    7548:	df 93       	push	r29
    754a:	6c 01       	movw	r12, r24
    754c:	7a 01       	movw	r14, r20
    754e:	8b 01       	movw	r16, r22
    7550:	c0 e0       	ldi	r28, 0x00	; 0
    7552:	d0 e0       	ldi	r29, 0x00	; 0
    7554:	ce 15       	cp	r28, r14
    7556:	df 05       	cpc	r29, r15
    7558:	81 f0       	breq	.+32     	; 0x757a <_ZN5Print5writeEPKhj+0x40>
    755a:	d8 01       	movw	r26, r16
    755c:	6d 91       	ld	r22, X+
    755e:	8d 01       	movw	r16, r26
    7560:	d6 01       	movw	r26, r12
    7562:	ed 91       	ld	r30, X+
    7564:	fc 91       	ld	r31, X
    7566:	01 90       	ld	r0, Z+
    7568:	f0 81       	ld	r31, Z
    756a:	e0 2d       	mov	r30, r0
    756c:	c6 01       	movw	r24, r12
    756e:	09 95       	icall
    7570:	89 2b       	or	r24, r25
    7572:	11 f0       	breq	.+4      	; 0x7578 <_ZN5Print5writeEPKhj+0x3e>
    7574:	21 96       	adiw	r28, 0x01	; 1
    7576:	ee cf       	rjmp	.-36     	; 0x7554 <_ZN5Print5writeEPKhj+0x1a>
    7578:	7e 01       	movw	r14, r28
    757a:	c7 01       	movw	r24, r14
    757c:	df 91       	pop	r29
    757e:	cf 91       	pop	r28
    7580:	1f 91       	pop	r17
    7582:	0f 91       	pop	r16
    7584:	ff 90       	pop	r15
    7586:	ef 90       	pop	r14
    7588:	df 90       	pop	r13
    758a:	cf 90       	pop	r12
    758c:	08 95       	ret

0000758e <_ZN5Print5writeEPKc>:
    758e:	61 15       	cp	r22, r1
    7590:	71 05       	cpc	r23, r1
    7592:	79 f0       	breq	.+30     	; 0x75b2 <_ZN5Print5writeEPKc+0x24>
    7594:	fb 01       	movw	r30, r22
    7596:	01 90       	ld	r0, Z+
    7598:	00 20       	and	r0, r0
    759a:	e9 f7       	brne	.-6      	; 0x7596 <_ZN5Print5writeEPKc+0x8>
    759c:	31 97       	sbiw	r30, 0x01	; 1
    759e:	af 01       	movw	r20, r30
    75a0:	46 1b       	sub	r20, r22
    75a2:	57 0b       	sbc	r21, r23
    75a4:	dc 01       	movw	r26, r24
    75a6:	ed 91       	ld	r30, X+
    75a8:	fc 91       	ld	r31, X
    75aa:	02 80       	ldd	r0, Z+2	; 0x02
    75ac:	f3 81       	ldd	r31, Z+3	; 0x03
    75ae:	e0 2d       	mov	r30, r0
    75b0:	09 94       	ijmp
    75b2:	80 e0       	ldi	r24, 0x00	; 0
    75b4:	90 e0       	ldi	r25, 0x00	; 0
    75b6:	08 95       	ret

000075b8 <_ZN5Print5printEPK19__FlashStringHelper>:
    75b8:	ef 92       	push	r14
    75ba:	ff 92       	push	r15
    75bc:	0f 93       	push	r16
    75be:	1f 93       	push	r17
    75c0:	cf 93       	push	r28
    75c2:	df 93       	push	r29
    75c4:	8c 01       	movw	r16, r24
    75c6:	7b 01       	movw	r14, r22
    75c8:	c0 e0       	ldi	r28, 0x00	; 0
    75ca:	d0 e0       	ldi	r29, 0x00	; 0
    75cc:	f7 01       	movw	r30, r14
    75ce:	ec 0f       	add	r30, r28
    75d0:	fd 1f       	adc	r31, r29
    75d2:	64 91       	lpm	r22, Z
    75d4:	66 23       	and	r22, r22
    75d6:	61 f0       	breq	.+24     	; 0x75f0 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    75d8:	d8 01       	movw	r26, r16
    75da:	ed 91       	ld	r30, X+
    75dc:	fc 91       	ld	r31, X
    75de:	01 90       	ld	r0, Z+
    75e0:	f0 81       	ld	r31, Z
    75e2:	e0 2d       	mov	r30, r0
    75e4:	c8 01       	movw	r24, r16
    75e6:	09 95       	icall
    75e8:	89 2b       	or	r24, r25
    75ea:	11 f0       	breq	.+4      	; 0x75f0 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    75ec:	21 96       	adiw	r28, 0x01	; 1
    75ee:	ee cf       	rjmp	.-36     	; 0x75cc <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    75f0:	ce 01       	movw	r24, r28
    75f2:	df 91       	pop	r29
    75f4:	cf 91       	pop	r28
    75f6:	1f 91       	pop	r17
    75f8:	0f 91       	pop	r16
    75fa:	ff 90       	pop	r15
    75fc:	ef 90       	pop	r14
    75fe:	08 95       	ret

00007600 <_ZN5Print5printERK6String>:
    7600:	db 01       	movw	r26, r22
    7602:	14 96       	adiw	r26, 0x04	; 4
    7604:	4d 91       	ld	r20, X+
    7606:	5c 91       	ld	r21, X
    7608:	15 97       	sbiw	r26, 0x05	; 5
    760a:	6d 91       	ld	r22, X+
    760c:	7c 91       	ld	r23, X
    760e:	dc 01       	movw	r26, r24
    7610:	ed 91       	ld	r30, X+
    7612:	fc 91       	ld	r31, X
    7614:	02 80       	ldd	r0, Z+2	; 0x02
    7616:	f3 81       	ldd	r31, Z+3	; 0x03
    7618:	e0 2d       	mov	r30, r0
    761a:	09 94       	ijmp

0000761c <_ZN5Print5printEPKc>:
    761c:	b8 cf       	rjmp	.-144    	; 0x758e <_ZN5Print5writeEPKc>

0000761e <_ZN5Print5printEc>:
    761e:	dc 01       	movw	r26, r24
    7620:	ed 91       	ld	r30, X+
    7622:	fc 91       	ld	r31, X
    7624:	01 90       	ld	r0, Z+
    7626:	f0 81       	ld	r31, Z
    7628:	e0 2d       	mov	r30, r0
    762a:	09 94       	ijmp

0000762c <_ZN5Print7printlnEv>:
    762c:	61 e7       	ldi	r22, 0x71	; 113
    762e:	76 e0       	ldi	r23, 0x06	; 6
    7630:	ae cf       	rjmp	.-164    	; 0x758e <_ZN5Print5writeEPKc>

00007632 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    7632:	0f 93       	push	r16
    7634:	1f 93       	push	r17
    7636:	cf 93       	push	r28
    7638:	df 93       	push	r29
    763a:	ec 01       	movw	r28, r24
    763c:	bd df       	rcall	.-134    	; 0x75b8 <_ZN5Print5printEPK19__FlashStringHelper>
    763e:	8c 01       	movw	r16, r24
    7640:	ce 01       	movw	r24, r28
    7642:	f4 df       	rcall	.-24     	; 0x762c <_ZN5Print7printlnEv>
    7644:	80 0f       	add	r24, r16
    7646:	91 1f       	adc	r25, r17
    7648:	df 91       	pop	r29
    764a:	cf 91       	pop	r28
    764c:	1f 91       	pop	r17
    764e:	0f 91       	pop	r16
    7650:	08 95       	ret

00007652 <_ZN5Print7printlnERK6String>:
    7652:	0f 93       	push	r16
    7654:	1f 93       	push	r17
    7656:	cf 93       	push	r28
    7658:	df 93       	push	r29
    765a:	ec 01       	movw	r28, r24
    765c:	d1 df       	rcall	.-94     	; 0x7600 <_ZN5Print5printERK6String>
    765e:	8c 01       	movw	r16, r24
    7660:	ce 01       	movw	r24, r28
    7662:	e4 df       	rcall	.-56     	; 0x762c <_ZN5Print7printlnEv>
    7664:	80 0f       	add	r24, r16
    7666:	91 1f       	adc	r25, r17
    7668:	df 91       	pop	r29
    766a:	cf 91       	pop	r28
    766c:	1f 91       	pop	r17
    766e:	0f 91       	pop	r16
    7670:	08 95       	ret

00007672 <_ZN5Print7printlnEPKc>:
    7672:	0f 93       	push	r16
    7674:	1f 93       	push	r17
    7676:	cf 93       	push	r28
    7678:	df 93       	push	r29
    767a:	ec 01       	movw	r28, r24
    767c:	88 df       	rcall	.-240    	; 0x758e <_ZN5Print5writeEPKc>
    767e:	8c 01       	movw	r16, r24
    7680:	ce 01       	movw	r24, r28
    7682:	d4 df       	rcall	.-88     	; 0x762c <_ZN5Print7printlnEv>
    7684:	80 0f       	add	r24, r16
    7686:	91 1f       	adc	r25, r17
    7688:	df 91       	pop	r29
    768a:	cf 91       	pop	r28
    768c:	1f 91       	pop	r17
    768e:	0f 91       	pop	r16
    7690:	08 95       	ret

00007692 <_ZN5Print11printNumberEmh>:
    7692:	8f 92       	push	r8
    7694:	9f 92       	push	r9
    7696:	af 92       	push	r10
    7698:	bf 92       	push	r11
    769a:	ef 92       	push	r14
    769c:	ff 92       	push	r15
    769e:	0f 93       	push	r16
    76a0:	1f 93       	push	r17
    76a2:	cf 93       	push	r28
    76a4:	df 93       	push	r29
    76a6:	cd b7       	in	r28, 0x3d	; 61
    76a8:	de b7       	in	r29, 0x3e	; 62
    76aa:	a1 97       	sbiw	r28, 0x21	; 33
    76ac:	0f b6       	in	r0, 0x3f	; 63
    76ae:	f8 94       	cli
    76b0:	de bf       	out	0x3e, r29	; 62
    76b2:	0f be       	out	0x3f, r0	; 63
    76b4:	cd bf       	out	0x3d, r28	; 61
    76b6:	7c 01       	movw	r14, r24
    76b8:	fa 01       	movw	r30, r20
    76ba:	cb 01       	movw	r24, r22
    76bc:	19 a2       	std	Y+33, r1	; 0x21
    76be:	22 30       	cpi	r18, 0x02	; 2
    76c0:	08 f4       	brcc	.+2      	; 0x76c4 <_ZN5Print11printNumberEmh+0x32>
    76c2:	2a e0       	ldi	r18, 0x0A	; 10
    76c4:	8e 01       	movw	r16, r28
    76c6:	0f 5d       	subi	r16, 0xDF	; 223
    76c8:	1f 4f       	sbci	r17, 0xFF	; 255
    76ca:	82 2e       	mov	r8, r18
    76cc:	91 2c       	mov	r9, r1
    76ce:	a1 2c       	mov	r10, r1
    76d0:	b1 2c       	mov	r11, r1
    76d2:	bf 01       	movw	r22, r30
    76d4:	a5 01       	movw	r20, r10
    76d6:	94 01       	movw	r18, r8
    76d8:	d4 d5       	rcall	.+2984   	; 0x8282 <__udivmodsi4>
    76da:	f9 01       	movw	r30, r18
    76dc:	ca 01       	movw	r24, r20
    76de:	01 50       	subi	r16, 0x01	; 1
    76e0:	11 09       	sbc	r17, r1
    76e2:	6a 30       	cpi	r22, 0x0A	; 10
    76e4:	10 f4       	brcc	.+4      	; 0x76ea <_ZN5Print11printNumberEmh+0x58>
    76e6:	60 5d       	subi	r22, 0xD0	; 208
    76e8:	01 c0       	rjmp	.+2      	; 0x76ec <_ZN5Print11printNumberEmh+0x5a>
    76ea:	69 5c       	subi	r22, 0xC9	; 201
    76ec:	d8 01       	movw	r26, r16
    76ee:	6c 93       	st	X, r22
    76f0:	23 2b       	or	r18, r19
    76f2:	24 2b       	or	r18, r20
    76f4:	25 2b       	or	r18, r21
    76f6:	69 f7       	brne	.-38     	; 0x76d2 <_ZN5Print11printNumberEmh+0x40>
    76f8:	b8 01       	movw	r22, r16
    76fa:	c7 01       	movw	r24, r14
    76fc:	48 df       	rcall	.-368    	; 0x758e <_ZN5Print5writeEPKc>
    76fe:	a1 96       	adiw	r28, 0x21	; 33
    7700:	0f b6       	in	r0, 0x3f	; 63
    7702:	f8 94       	cli
    7704:	de bf       	out	0x3e, r29	; 62
    7706:	0f be       	out	0x3f, r0	; 63
    7708:	cd bf       	out	0x3d, r28	; 61
    770a:	df 91       	pop	r29
    770c:	cf 91       	pop	r28
    770e:	1f 91       	pop	r17
    7710:	0f 91       	pop	r16
    7712:	ff 90       	pop	r15
    7714:	ef 90       	pop	r14
    7716:	bf 90       	pop	r11
    7718:	af 90       	pop	r10
    771a:	9f 90       	pop	r9
    771c:	8f 90       	pop	r8
    771e:	08 95       	ret

00007720 <_ZN5Print5printEmi>:
    7720:	21 15       	cp	r18, r1
    7722:	31 05       	cpc	r19, r1
    7724:	41 f4       	brne	.+16     	; 0x7736 <_ZN5Print5printEmi+0x16>
    7726:	dc 01       	movw	r26, r24
    7728:	ed 91       	ld	r30, X+
    772a:	fc 91       	ld	r31, X
    772c:	01 90       	ld	r0, Z+
    772e:	f0 81       	ld	r31, Z
    7730:	e0 2d       	mov	r30, r0
    7732:	64 2f       	mov	r22, r20
    7734:	09 94       	ijmp
    7736:	ad cf       	rjmp	.-166    	; 0x7692 <_ZN5Print11printNumberEmh>

00007738 <_ZN5Print5printEhi>:
    7738:	9a 01       	movw	r18, r20
    773a:	46 2f       	mov	r20, r22
    773c:	50 e0       	ldi	r21, 0x00	; 0
    773e:	60 e0       	ldi	r22, 0x00	; 0
    7740:	70 e0       	ldi	r23, 0x00	; 0
    7742:	ee cf       	rjmp	.-36     	; 0x7720 <_ZN5Print5printEmi>

00007744 <_ZN5Print7printlnEhi>:
    7744:	0f 93       	push	r16
    7746:	1f 93       	push	r17
    7748:	cf 93       	push	r28
    774a:	df 93       	push	r29
    774c:	ec 01       	movw	r28, r24
    774e:	f4 df       	rcall	.-24     	; 0x7738 <_ZN5Print5printEhi>
    7750:	8c 01       	movw	r16, r24
    7752:	ce 01       	movw	r24, r28
    7754:	6b df       	rcall	.-298    	; 0x762c <_ZN5Print7printlnEv>
    7756:	80 0f       	add	r24, r16
    7758:	91 1f       	adc	r25, r17
    775a:	df 91       	pop	r29
    775c:	cf 91       	pop	r28
    775e:	1f 91       	pop	r17
    7760:	0f 91       	pop	r16
    7762:	08 95       	ret

00007764 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    7764:	0f 93       	push	r16
    7766:	1f 93       	push	r17
    7768:	cf 93       	push	r28
    776a:	df 93       	push	r29
    776c:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    776e:	d8 df       	rcall	.-80     	; 0x7720 <_ZN5Print5printEmi>
    7770:	8c 01       	movw	r16, r24
  n += println();
    7772:	ce 01       	movw	r24, r28
    7774:	5b df       	rcall	.-330    	; 0x762c <_ZN5Print7printlnEv>
  return n;
}
    7776:	80 0f       	add	r24, r16
    7778:	91 1f       	adc	r25, r17
    777a:	df 91       	pop	r29
    777c:	cf 91       	pop	r28
    777e:	1f 91       	pop	r17
    7780:	0f 91       	pop	r16
    7782:	08 95       	ret

00007784 <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    7784:	1f 92       	push	r1
    7786:	0f 92       	push	r0
    7788:	0f b6       	in	r0, 0x3f	; 63
    778a:	0f 92       	push	r0
    778c:	11 24       	eor	r1, r1
    778e:	2f 93       	push	r18
    7790:	3f 93       	push	r19
    7792:	8f 93       	push	r24
    7794:	9f 93       	push	r25
    7796:	af 93       	push	r26
    7798:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    779a:	80 91 ed 0d 	lds	r24, 0x0DED	; 0x800ded <timer0_millis>
    779e:	90 91 ee 0d 	lds	r25, 0x0DEE	; 0x800dee <timer0_millis+0x1>
    77a2:	a0 91 ef 0d 	lds	r26, 0x0DEF	; 0x800def <timer0_millis+0x2>
    77a6:	b0 91 f0 0d 	lds	r27, 0x0DF0	; 0x800df0 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    77aa:	30 91 ec 0d 	lds	r19, 0x0DEC	; 0x800dec <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    77ae:	23 e0       	ldi	r18, 0x03	; 3
    77b0:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    77b2:	2d 37       	cpi	r18, 0x7D	; 125
    77b4:	20 f4       	brcc	.+8      	; 0x77be <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    77b6:	01 96       	adiw	r24, 0x01	; 1
    77b8:	a1 1d       	adc	r26, r1
    77ba:	b1 1d       	adc	r27, r1
    77bc:	05 c0       	rjmp	.+10     	; 0x77c8 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    77be:	26 e8       	ldi	r18, 0x86	; 134
    77c0:	23 0f       	add	r18, r19
		m += 1;
    77c2:	02 96       	adiw	r24, 0x02	; 2
    77c4:	a1 1d       	adc	r26, r1
    77c6:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    77c8:	20 93 ec 0d 	sts	0x0DEC, r18	; 0x800dec <timer0_fract>
	timer0_millis = m;
    77cc:	80 93 ed 0d 	sts	0x0DED, r24	; 0x800ded <timer0_millis>
    77d0:	90 93 ee 0d 	sts	0x0DEE, r25	; 0x800dee <timer0_millis+0x1>
    77d4:	a0 93 ef 0d 	sts	0x0DEF, r26	; 0x800def <timer0_millis+0x2>
    77d8:	b0 93 f0 0d 	sts	0x0DF0, r27	; 0x800df0 <timer0_millis+0x3>
	timer0_overflow_count++;
    77dc:	80 91 f1 0d 	lds	r24, 0x0DF1	; 0x800df1 <timer0_overflow_count>
    77e0:	90 91 f2 0d 	lds	r25, 0x0DF2	; 0x800df2 <timer0_overflow_count+0x1>
    77e4:	a0 91 f3 0d 	lds	r26, 0x0DF3	; 0x800df3 <timer0_overflow_count+0x2>
    77e8:	b0 91 f4 0d 	lds	r27, 0x0DF4	; 0x800df4 <timer0_overflow_count+0x3>
    77ec:	01 96       	adiw	r24, 0x01	; 1
    77ee:	a1 1d       	adc	r26, r1
    77f0:	b1 1d       	adc	r27, r1
    77f2:	80 93 f1 0d 	sts	0x0DF1, r24	; 0x800df1 <timer0_overflow_count>
    77f6:	90 93 f2 0d 	sts	0x0DF2, r25	; 0x800df2 <timer0_overflow_count+0x1>
    77fa:	a0 93 f3 0d 	sts	0x0DF3, r26	; 0x800df3 <timer0_overflow_count+0x2>
    77fe:	b0 93 f4 0d 	sts	0x0DF4, r27	; 0x800df4 <timer0_overflow_count+0x3>
}
    7802:	bf 91       	pop	r27
    7804:	af 91       	pop	r26
    7806:	9f 91       	pop	r25
    7808:	8f 91       	pop	r24
    780a:	3f 91       	pop	r19
    780c:	2f 91       	pop	r18
    780e:	0f 90       	pop	r0
    7810:	0f be       	out	0x3f, r0	; 63
    7812:	0f 90       	pop	r0
    7814:	1f 90       	pop	r1
    7816:	18 95       	reti

00007818 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    7818:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    781a:	f8 94       	cli
	m = timer0_millis;
    781c:	60 91 ed 0d 	lds	r22, 0x0DED	; 0x800ded <timer0_millis>
    7820:	70 91 ee 0d 	lds	r23, 0x0DEE	; 0x800dee <timer0_millis+0x1>
    7824:	80 91 ef 0d 	lds	r24, 0x0DEF	; 0x800def <timer0_millis+0x2>
    7828:	90 91 f0 0d 	lds	r25, 0x0DF0	; 0x800df0 <timer0_millis+0x3>
	SREG = oldSREG;
    782c:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    782e:	08 95       	ret

00007830 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    7830:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    7832:	f8 94       	cli
	m = timer0_overflow_count;
    7834:	80 91 f1 0d 	lds	r24, 0x0DF1	; 0x800df1 <timer0_overflow_count>
    7838:	90 91 f2 0d 	lds	r25, 0x0DF2	; 0x800df2 <timer0_overflow_count+0x1>
    783c:	a0 91 f3 0d 	lds	r26, 0x0DF3	; 0x800df3 <timer0_overflow_count+0x2>
    7840:	b0 91 f4 0d 	lds	r27, 0x0DF4	; 0x800df4 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    7844:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    7846:	a8 9b       	sbis	0x15, 0	; 21
    7848:	05 c0       	rjmp	.+10     	; 0x7854 <micros+0x24>
    784a:	2f 3f       	cpi	r18, 0xFF	; 255
    784c:	19 f0       	breq	.+6      	; 0x7854 <micros+0x24>
		m++;
    784e:	01 96       	adiw	r24, 0x01	; 1
    7850:	a1 1d       	adc	r26, r1
    7852:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    7854:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    7856:	ba 2f       	mov	r27, r26
    7858:	a9 2f       	mov	r26, r25
    785a:	98 2f       	mov	r25, r24
    785c:	88 27       	eor	r24, r24
    785e:	82 0f       	add	r24, r18
    7860:	91 1d       	adc	r25, r1
    7862:	a1 1d       	adc	r26, r1
    7864:	b1 1d       	adc	r27, r1
    7866:	bc 01       	movw	r22, r24
    7868:	cd 01       	movw	r24, r26
    786a:	42 e0       	ldi	r20, 0x02	; 2
    786c:	66 0f       	add	r22, r22
    786e:	77 1f       	adc	r23, r23
    7870:	88 1f       	adc	r24, r24
    7872:	99 1f       	adc	r25, r25
    7874:	4a 95       	dec	r20
    7876:	d1 f7       	brne	.-12     	; 0x786c <micros+0x3c>
}
    7878:	08 95       	ret

0000787a <delay>:

void delay(unsigned long ms)
{
    787a:	8f 92       	push	r8
    787c:	9f 92       	push	r9
    787e:	af 92       	push	r10
    7880:	bf 92       	push	r11
    7882:	cf 92       	push	r12
    7884:	df 92       	push	r13
    7886:	ef 92       	push	r14
    7888:	ff 92       	push	r15
    788a:	6b 01       	movw	r12, r22
    788c:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    788e:	d0 df       	rcall	.-96     	; 0x7830 <micros>
    7890:	4b 01       	movw	r8, r22
    7892:	5c 01       	movw	r10, r24

	while (ms > 0) {
    7894:	c1 14       	cp	r12, r1
    7896:	d1 04       	cpc	r13, r1
    7898:	e1 04       	cpc	r14, r1
    789a:	f1 04       	cpc	r15, r1
		yield();
    789c:	f1 f0       	breq	.+60     	; 0x78da <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    789e:	d0 d4       	rcall	.+2464   	; 0x8240 <yield>
    78a0:	c7 df       	rcall	.-114    	; 0x7830 <micros>
    78a2:	dc 01       	movw	r26, r24
    78a4:	cb 01       	movw	r24, r22
    78a6:	88 19       	sub	r24, r8
    78a8:	99 09       	sbc	r25, r9
    78aa:	aa 09       	sbc	r26, r10
    78ac:	bb 09       	sbc	r27, r11
    78ae:	88 3e       	cpi	r24, 0xE8	; 232
    78b0:	93 40       	sbci	r25, 0x03	; 3
    78b2:	a1 05       	cpc	r26, r1
    78b4:	b1 05       	cpc	r27, r1
    78b6:	70 f3       	brcs	.-36     	; 0x7894 <delay+0x1a>
			ms--;
    78b8:	21 e0       	ldi	r18, 0x01	; 1
    78ba:	c2 1a       	sub	r12, r18
    78bc:	d1 08       	sbc	r13, r1
    78be:	e1 08       	sbc	r14, r1
    78c0:	f1 08       	sbc	r15, r1
			start += 1000;
    78c2:	88 ee       	ldi	r24, 0xE8	; 232
    78c4:	88 0e       	add	r8, r24
    78c6:	83 e0       	ldi	r24, 0x03	; 3
    78c8:	98 1e       	adc	r9, r24
    78ca:	a1 1c       	adc	r10, r1
    78cc:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    78ce:	c1 14       	cp	r12, r1
    78d0:	d1 04       	cpc	r13, r1
    78d2:	e1 04       	cpc	r14, r1
    78d4:	f1 04       	cpc	r15, r1
    78d6:	21 f7       	brne	.-56     	; 0x78a0 <delay+0x26>
    78d8:	dd cf       	rjmp	.-70     	; 0x7894 <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    78da:	ff 90       	pop	r15
    78dc:	ef 90       	pop	r14
    78de:	df 90       	pop	r13
    78e0:	cf 90       	pop	r12
    78e2:	bf 90       	pop	r11
    78e4:	af 90       	pop	r10
    78e6:	9f 90       	pop	r9
    78e8:	8f 90       	pop	r8
    78ea:	08 95       	ret

000078ec <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    78ec:	82 30       	cpi	r24, 0x02	; 2
    78ee:	91 05       	cpc	r25, r1
    78f0:	38 f0       	brcs	.+14     	; 0x7900 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    78f2:	88 0f       	add	r24, r24
    78f4:	99 1f       	adc	r25, r25
    78f6:	88 0f       	add	r24, r24
    78f8:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    78fa:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    78fc:	01 97       	sbiw	r24, 0x01	; 1
    78fe:	f1 f7       	brne	.-4      	; 0x78fc <delayMicroseconds+0x10>
    7900:	08 95       	ret

00007902 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    7902:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    7904:	84 b5       	in	r24, 0x24	; 36
    7906:	82 60       	ori	r24, 0x02	; 2
    7908:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    790a:	84 b5       	in	r24, 0x24	; 36
    790c:	81 60       	ori	r24, 0x01	; 1
    790e:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    7910:	85 b5       	in	r24, 0x25	; 37
    7912:	82 60       	ori	r24, 0x02	; 2
    7914:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    7916:	85 b5       	in	r24, 0x25	; 37
    7918:	81 60       	ori	r24, 0x01	; 1
    791a:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    791c:	ee e6       	ldi	r30, 0x6E	; 110
    791e:	f0 e0       	ldi	r31, 0x00	; 0
    7920:	80 81       	ld	r24, Z
    7922:	81 60       	ori	r24, 0x01	; 1
    7924:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    7926:	e1 e8       	ldi	r30, 0x81	; 129
    7928:	f0 e0       	ldi	r31, 0x00	; 0
    792a:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    792c:	80 81       	ld	r24, Z
    792e:	82 60       	ori	r24, 0x02	; 2
    7930:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    7932:	80 81       	ld	r24, Z
    7934:	81 60       	ori	r24, 0x01	; 1
    7936:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    7938:	e0 e8       	ldi	r30, 0x80	; 128
    793a:	f0 e0       	ldi	r31, 0x00	; 0
    793c:	80 81       	ld	r24, Z
    793e:	81 60       	ori	r24, 0x01	; 1
    7940:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    7942:	e1 eb       	ldi	r30, 0xB1	; 177
    7944:	f0 e0       	ldi	r31, 0x00	; 0
    7946:	80 81       	ld	r24, Z
    7948:	84 60       	ori	r24, 0x04	; 4
    794a:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    794c:	e0 eb       	ldi	r30, 0xB0	; 176
    794e:	f0 e0       	ldi	r31, 0x00	; 0
    7950:	80 81       	ld	r24, Z
    7952:	81 60       	ori	r24, 0x01	; 1
    7954:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    7956:	ea e7       	ldi	r30, 0x7A	; 122
    7958:	f0 e0       	ldi	r31, 0x00	; 0
    795a:	80 81       	ld	r24, Z
    795c:	84 60       	ori	r24, 0x04	; 4
    795e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    7960:	80 81       	ld	r24, Z
    7962:	82 60       	ori	r24, 0x02	; 2
    7964:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    7966:	80 81       	ld	r24, Z
    7968:	81 60       	ori	r24, 0x01	; 1
    796a:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    796c:	80 81       	ld	r24, Z
    796e:	80 68       	ori	r24, 0x80	; 128
    7970:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    7972:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    7976:	08 95       	ret

00007978 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    7978:	83 30       	cpi	r24, 0x03	; 3
    797a:	81 f0       	breq	.+32     	; 0x799c <turnOffPWM+0x24>
    797c:	28 f4       	brcc	.+10     	; 0x7988 <turnOffPWM+0x10>
    797e:	81 30       	cpi	r24, 0x01	; 1
    7980:	99 f0       	breq	.+38     	; 0x79a8 <turnOffPWM+0x30>
    7982:	82 30       	cpi	r24, 0x02	; 2
    7984:	a1 f0       	breq	.+40     	; 0x79ae <turnOffPWM+0x36>
    7986:	08 95       	ret
    7988:	87 30       	cpi	r24, 0x07	; 7
    798a:	a9 f0       	breq	.+42     	; 0x79b6 <turnOffPWM+0x3e>
    798c:	88 30       	cpi	r24, 0x08	; 8
    798e:	b9 f0       	breq	.+46     	; 0x79be <turnOffPWM+0x46>
    7990:	84 30       	cpi	r24, 0x04	; 4
    7992:	d1 f4       	brne	.+52     	; 0x79c8 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    7994:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    7998:	8f 7d       	andi	r24, 0xDF	; 223
    799a:	03 c0       	rjmp	.+6      	; 0x79a2 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    799c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    79a0:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    79a2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    79a6:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    79a8:	84 b5       	in	r24, 0x24	; 36
    79aa:	8f 77       	andi	r24, 0x7F	; 127
    79ac:	02 c0       	rjmp	.+4      	; 0x79b2 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    79ae:	84 b5       	in	r24, 0x24	; 36
    79b0:	8f 7d       	andi	r24, 0xDF	; 223
    79b2:	84 bd       	out	0x24, r24	; 36
    79b4:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    79b6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    79ba:	8f 77       	andi	r24, 0x7F	; 127
    79bc:	03 c0       	rjmp	.+6      	; 0x79c4 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    79be:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    79c2:	8f 7d       	andi	r24, 0xDF	; 223
    79c4:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    79c8:	08 95       	ret

000079ca <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    79ca:	cf 93       	push	r28
    79cc:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    79ce:	90 e0       	ldi	r25, 0x00	; 0
    79d0:	fc 01       	movw	r30, r24
    79d2:	e6 5a       	subi	r30, 0xA6	; 166
    79d4:	fd 4f       	sbci	r31, 0xFD	; 253
    79d6:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    79d8:	fc 01       	movw	r30, r24
    79da:	e6 58       	subi	r30, 0x86	; 134
    79dc:	fd 4f       	sbci	r31, 0xFD	; 253
    79de:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    79e0:	88 23       	and	r24, r24
    79e2:	61 f1       	breq	.+88     	; 0x7a3c <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    79e4:	90 e0       	ldi	r25, 0x00	; 0
    79e6:	88 0f       	add	r24, r24
    79e8:	99 1f       	adc	r25, r25
    79ea:	fc 01       	movw	r30, r24
    79ec:	e2 55       	subi	r30, 0x52	; 82
    79ee:	fd 4f       	sbci	r31, 0xFD	; 253
    79f0:	c5 91       	lpm	r28, Z+
    79f2:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    79f4:	fc 01       	movw	r30, r24
    79f6:	ec 55       	subi	r30, 0x5C	; 92
    79f8:	fd 4f       	sbci	r31, 0xFD	; 253
    79fa:	a5 91       	lpm	r26, Z+
    79fc:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    79fe:	61 11       	cpse	r22, r1
    7a00:	09 c0       	rjmp	.+18     	; 0x7a14 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    7a02:	9f b7       	in	r25, 0x3f	; 63
                cli();
    7a04:	f8 94       	cli
		*reg &= ~bit;
    7a06:	88 81       	ld	r24, Y
    7a08:	20 95       	com	r18
    7a0a:	82 23       	and	r24, r18
    7a0c:	88 83       	st	Y, r24
		*out &= ~bit;
    7a0e:	ec 91       	ld	r30, X
    7a10:	2e 23       	and	r18, r30
    7a12:	0b c0       	rjmp	.+22     	; 0x7a2a <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    7a14:	62 30       	cpi	r22, 0x02	; 2
    7a16:	61 f4       	brne	.+24     	; 0x7a30 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    7a18:	9f b7       	in	r25, 0x3f	; 63
                cli();
    7a1a:	f8 94       	cli
		*reg &= ~bit;
    7a1c:	88 81       	ld	r24, Y
    7a1e:	32 2f       	mov	r19, r18
    7a20:	30 95       	com	r19
    7a22:	83 23       	and	r24, r19
    7a24:	88 83       	st	Y, r24
		*out |= bit;
    7a26:	ec 91       	ld	r30, X
    7a28:	2e 2b       	or	r18, r30
    7a2a:	2c 93       	st	X, r18
		SREG = oldSREG;
    7a2c:	9f bf       	out	0x3f, r25	; 63
    7a2e:	06 c0       	rjmp	.+12     	; 0x7a3c <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    7a30:	8f b7       	in	r24, 0x3f	; 63
                cli();
    7a32:	f8 94       	cli
		*reg |= bit;
    7a34:	e8 81       	ld	r30, Y
    7a36:	2e 2b       	or	r18, r30
    7a38:	28 83       	st	Y, r18
		SREG = oldSREG;
    7a3a:	8f bf       	out	0x3f, r24	; 63
	}
}
    7a3c:	df 91       	pop	r29
    7a3e:	cf 91       	pop	r28
    7a40:	08 95       	ret

00007a42 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    7a42:	1f 93       	push	r17
    7a44:	cf 93       	push	r28
    7a46:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    7a48:	28 2f       	mov	r18, r24
    7a4a:	30 e0       	ldi	r19, 0x00	; 0
    7a4c:	f9 01       	movw	r30, r18
    7a4e:	e6 5c       	subi	r30, 0xC6	; 198
    7a50:	fd 4f       	sbci	r31, 0xFD	; 253
    7a52:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    7a54:	f9 01       	movw	r30, r18
    7a56:	e6 5a       	subi	r30, 0xA6	; 166
    7a58:	fd 4f       	sbci	r31, 0xFD	; 253
    7a5a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    7a5c:	f9 01       	movw	r30, r18
    7a5e:	e6 58       	subi	r30, 0x86	; 134
    7a60:	fd 4f       	sbci	r31, 0xFD	; 253
    7a62:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    7a64:	cc 23       	and	r28, r28
    7a66:	b9 f0       	breq	.+46     	; 0x7a96 <digitalWrite+0x54>
    7a68:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    7a6a:	81 11       	cpse	r24, r1
    7a6c:	85 df       	rcall	.-246    	; 0x7978 <turnOffPWM>

	out = portOutputRegister(port);
    7a6e:	ec 2f       	mov	r30, r28
    7a70:	f0 e0       	ldi	r31, 0x00	; 0
    7a72:	ee 0f       	add	r30, r30
    7a74:	ff 1f       	adc	r31, r31
    7a76:	ec 55       	subi	r30, 0x5C	; 92
    7a78:	fd 4f       	sbci	r31, 0xFD	; 253
    7a7a:	a5 91       	lpm	r26, Z+
    7a7c:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    7a7e:	9f b7       	in	r25, 0x3f	; 63
	cli();
    7a80:	f8 94       	cli

	if (val == LOW) {
    7a82:	11 11       	cpse	r17, r1
    7a84:	04 c0       	rjmp	.+8      	; 0x7a8e <digitalWrite+0x4c>
		*out &= ~bit;
    7a86:	8c 91       	ld	r24, X
    7a88:	d0 95       	com	r29
    7a8a:	d8 23       	and	r29, r24
    7a8c:	02 c0       	rjmp	.+4      	; 0x7a92 <digitalWrite+0x50>
	} else {
		*out |= bit;
    7a8e:	ec 91       	ld	r30, X
    7a90:	de 2b       	or	r29, r30
    7a92:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    7a94:	9f bf       	out	0x3f, r25	; 63
}
    7a96:	df 91       	pop	r29
    7a98:	cf 91       	pop	r28
    7a9a:	1f 91       	pop	r17
    7a9c:	08 95       	ret

00007a9e <digitalRead>:

int digitalRead(uint8_t pin)
{
    7a9e:	cf 93       	push	r28
    7aa0:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    7aa2:	28 2f       	mov	r18, r24
    7aa4:	30 e0       	ldi	r19, 0x00	; 0
    7aa6:	f9 01       	movw	r30, r18
    7aa8:	e6 5c       	subi	r30, 0xC6	; 198
    7aaa:	fd 4f       	sbci	r31, 0xFD	; 253
    7aac:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    7aae:	f9 01       	movw	r30, r18
    7ab0:	e6 5a       	subi	r30, 0xA6	; 166
    7ab2:	fd 4f       	sbci	r31, 0xFD	; 253
    7ab4:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    7ab6:	f9 01       	movw	r30, r18
    7ab8:	e6 58       	subi	r30, 0x86	; 134
    7aba:	fd 4f       	sbci	r31, 0xFD	; 253
    7abc:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    7abe:	cc 23       	and	r28, r28
    7ac0:	89 f0       	breq	.+34     	; 0x7ae4 <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    7ac2:	81 11       	cpse	r24, r1
    7ac4:	59 df       	rcall	.-334    	; 0x7978 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    7ac6:	ec 2f       	mov	r30, r28
    7ac8:	f0 e0       	ldi	r31, 0x00	; 0
    7aca:	ee 0f       	add	r30, r30
    7acc:	ff 1f       	adc	r31, r31
    7ace:	e6 56       	subi	r30, 0x66	; 102
    7ad0:	fd 4f       	sbci	r31, 0xFD	; 253
    7ad2:	a5 91       	lpm	r26, Z+
    7ad4:	b4 91       	lpm	r27, Z
    7ad6:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    7ad8:	ed 23       	and	r30, r29
    7ada:	81 e0       	ldi	r24, 0x01	; 1
    7adc:	90 e0       	ldi	r25, 0x00	; 0
    7ade:	21 f4       	brne	.+8      	; 0x7ae8 <digitalRead+0x4a>
    7ae0:	80 e0       	ldi	r24, 0x00	; 0
    7ae2:	02 c0       	rjmp	.+4      	; 0x7ae8 <digitalRead+0x4a>
    7ae4:	80 e0       	ldi	r24, 0x00	; 0
    7ae6:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    7ae8:	df 91       	pop	r29
    7aea:	cf 91       	pop	r28
    7aec:	08 95       	ret

00007aee <_ZNK6String14StringIfHelperEv>:
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
		*p = toupper(*p);
	}
}
    7aee:	08 95       	ret

00007af0 <_ZN6StringD1Ev>:
    7af0:	fc 01       	movw	r30, r24
    7af2:	80 81       	ld	r24, Z
    7af4:	91 81       	ldd	r25, Z+1	; 0x01
    7af6:	dc c5       	rjmp	.+3000   	; 0x86b0 <free>

00007af8 <_ZN6String10invalidateEv>:
    7af8:	cf 93       	push	r28
    7afa:	df 93       	push	r29
    7afc:	ec 01       	movw	r28, r24
    7afe:	88 81       	ld	r24, Y
    7b00:	99 81       	ldd	r25, Y+1	; 0x01
    7b02:	00 97       	sbiw	r24, 0x00	; 0
    7b04:	09 f0       	breq	.+2      	; 0x7b08 <_ZN6String10invalidateEv+0x10>
    7b06:	d4 d5       	rcall	.+2984   	; 0x86b0 <free>
    7b08:	19 82       	std	Y+1, r1	; 0x01
    7b0a:	18 82       	st	Y, r1
    7b0c:	1d 82       	std	Y+5, r1	; 0x05
    7b0e:	1c 82       	std	Y+4, r1	; 0x04
    7b10:	1b 82       	std	Y+3, r1	; 0x03
    7b12:	1a 82       	std	Y+2, r1	; 0x02
    7b14:	df 91       	pop	r29
    7b16:	cf 91       	pop	r28
    7b18:	08 95       	ret

00007b1a <_ZN6String12changeBufferEj>:
    7b1a:	0f 93       	push	r16
    7b1c:	1f 93       	push	r17
    7b1e:	cf 93       	push	r28
    7b20:	df 93       	push	r29
    7b22:	ec 01       	movw	r28, r24
    7b24:	8b 01       	movw	r16, r22
    7b26:	6f 5f       	subi	r22, 0xFF	; 255
    7b28:	7f 4f       	sbci	r23, 0xFF	; 255
    7b2a:	88 81       	ld	r24, Y
    7b2c:	99 81       	ldd	r25, Y+1	; 0x01
    7b2e:	49 d6       	rcall	.+3218   	; 0x87c2 <realloc>
    7b30:	00 97       	sbiw	r24, 0x00	; 0
    7b32:	31 f0       	breq	.+12     	; 0x7b40 <_ZN6String12changeBufferEj+0x26>
    7b34:	99 83       	std	Y+1, r25	; 0x01
    7b36:	88 83       	st	Y, r24
    7b38:	1b 83       	std	Y+3, r17	; 0x03
    7b3a:	0a 83       	std	Y+2, r16	; 0x02
    7b3c:	81 e0       	ldi	r24, 0x01	; 1
    7b3e:	01 c0       	rjmp	.+2      	; 0x7b42 <_ZN6String12changeBufferEj+0x28>
    7b40:	80 e0       	ldi	r24, 0x00	; 0
    7b42:	df 91       	pop	r29
    7b44:	cf 91       	pop	r28
    7b46:	1f 91       	pop	r17
    7b48:	0f 91       	pop	r16
    7b4a:	08 95       	ret

00007b4c <_ZN6String7reserveEj>:
    7b4c:	cf 93       	push	r28
    7b4e:	df 93       	push	r29
    7b50:	ec 01       	movw	r28, r24
    7b52:	88 81       	ld	r24, Y
    7b54:	99 81       	ldd	r25, Y+1	; 0x01
    7b56:	89 2b       	or	r24, r25
    7b58:	29 f0       	breq	.+10     	; 0x7b64 <_ZN6String7reserveEj+0x18>
    7b5a:	8a 81       	ldd	r24, Y+2	; 0x02
    7b5c:	9b 81       	ldd	r25, Y+3	; 0x03
    7b5e:	86 17       	cp	r24, r22
    7b60:	97 07       	cpc	r25, r23
    7b62:	58 f4       	brcc	.+22     	; 0x7b7a <_ZN6String7reserveEj+0x2e>
    7b64:	ce 01       	movw	r24, r28
    7b66:	d9 df       	rcall	.-78     	; 0x7b1a <_ZN6String12changeBufferEj>
    7b68:	88 23       	and	r24, r24
    7b6a:	41 f0       	breq	.+16     	; 0x7b7c <_ZN6String7reserveEj+0x30>
    7b6c:	8c 81       	ldd	r24, Y+4	; 0x04
    7b6e:	9d 81       	ldd	r25, Y+5	; 0x05
    7b70:	89 2b       	or	r24, r25
    7b72:	19 f4       	brne	.+6      	; 0x7b7a <_ZN6String7reserveEj+0x2e>
    7b74:	e8 81       	ld	r30, Y
    7b76:	f9 81       	ldd	r31, Y+1	; 0x01
    7b78:	10 82       	st	Z, r1
    7b7a:	81 e0       	ldi	r24, 0x01	; 1
    7b7c:	df 91       	pop	r29
    7b7e:	cf 91       	pop	r28
    7b80:	08 95       	ret

00007b82 <_ZN6String4copyEPKcj>:
    7b82:	ef 92       	push	r14
    7b84:	ff 92       	push	r15
    7b86:	0f 93       	push	r16
    7b88:	1f 93       	push	r17
    7b8a:	cf 93       	push	r28
    7b8c:	df 93       	push	r29
    7b8e:	ec 01       	movw	r28, r24
    7b90:	7b 01       	movw	r14, r22
    7b92:	8a 01       	movw	r16, r20
    7b94:	ba 01       	movw	r22, r20
    7b96:	da df       	rcall	.-76     	; 0x7b4c <_ZN6String7reserveEj>
    7b98:	81 11       	cpse	r24, r1
    7b9a:	03 c0       	rjmp	.+6      	; 0x7ba2 <_ZN6String4copyEPKcj+0x20>
    7b9c:	ce 01       	movw	r24, r28
    7b9e:	ac df       	rcall	.-168    	; 0x7af8 <_ZN6String10invalidateEv>
    7ba0:	06 c0       	rjmp	.+12     	; 0x7bae <_ZN6String4copyEPKcj+0x2c>
    7ba2:	1d 83       	std	Y+5, r17	; 0x05
    7ba4:	0c 83       	std	Y+4, r16	; 0x04
    7ba6:	b7 01       	movw	r22, r14
    7ba8:	88 81       	ld	r24, Y
    7baa:	99 81       	ldd	r25, Y+1	; 0x01
    7bac:	11 d7       	rcall	.+3618   	; 0x89d0 <strcpy>
    7bae:	ce 01       	movw	r24, r28
    7bb0:	df 91       	pop	r29
    7bb2:	cf 91       	pop	r28
    7bb4:	1f 91       	pop	r17
    7bb6:	0f 91       	pop	r16
    7bb8:	ff 90       	pop	r15
    7bba:	ef 90       	pop	r14
    7bbc:	08 95       	ret

00007bbe <_ZN6StringC1EPKc>:
    7bbe:	fc 01       	movw	r30, r24
    7bc0:	11 82       	std	Z+1, r1	; 0x01
    7bc2:	10 82       	st	Z, r1
    7bc4:	13 82       	std	Z+3, r1	; 0x03
    7bc6:	12 82       	std	Z+2, r1	; 0x02
    7bc8:	15 82       	std	Z+5, r1	; 0x05
    7bca:	14 82       	std	Z+4, r1	; 0x04
    7bcc:	61 15       	cp	r22, r1
    7bce:	71 05       	cpc	r23, r1
    7bd0:	49 f0       	breq	.+18     	; 0x7be4 <_ZN6StringC1EPKc+0x26>
    7bd2:	fb 01       	movw	r30, r22
    7bd4:	01 90       	ld	r0, Z+
    7bd6:	00 20       	and	r0, r0
    7bd8:	e9 f7       	brne	.-6      	; 0x7bd4 <_ZN6StringC1EPKc+0x16>
    7bda:	31 97       	sbiw	r30, 0x01	; 1
    7bdc:	af 01       	movw	r20, r30
    7bde:	46 1b       	sub	r20, r22
    7be0:	57 0b       	sbc	r21, r23
    7be2:	cf cf       	rjmp	.-98     	; 0x7b82 <_ZN6String4copyEPKcj>
    7be4:	08 95       	ret

00007be6 <_ZN6String4moveERS_>:
    7be6:	0f 93       	push	r16
    7be8:	1f 93       	push	r17
    7bea:	cf 93       	push	r28
    7bec:	df 93       	push	r29
    7bee:	8c 01       	movw	r16, r24
    7bf0:	eb 01       	movw	r28, r22
    7bf2:	fc 01       	movw	r30, r24
    7bf4:	80 81       	ld	r24, Z
    7bf6:	91 81       	ldd	r25, Z+1	; 0x01
    7bf8:	00 97       	sbiw	r24, 0x00	; 0
    7bfa:	c1 f0       	breq	.+48     	; 0x7c2c <_ZN6String4moveERS_+0x46>
    7bfc:	68 81       	ld	r22, Y
    7bfe:	79 81       	ldd	r23, Y+1	; 0x01
    7c00:	61 15       	cp	r22, r1
    7c02:	71 05       	cpc	r23, r1
    7c04:	91 f0       	breq	.+36     	; 0x7c2a <_ZN6String4moveERS_+0x44>
    7c06:	27 e7       	ldi	r18, 0x77	; 119
    7c08:	3d e3       	ldi	r19, 0x3D	; 61
    7c0a:	23 2b       	or	r18, r19
    7c0c:	71 f0       	breq	.+28     	; 0x7c2a <_ZN6String4moveERS_+0x44>
    7c0e:	42 81       	ldd	r20, Z+2	; 0x02
    7c10:	53 81       	ldd	r21, Z+3	; 0x03
    7c12:	2c 81       	ldd	r18, Y+4	; 0x04
    7c14:	3d 81       	ldd	r19, Y+5	; 0x05
    7c16:	42 17       	cp	r20, r18
    7c18:	53 07       	cpc	r21, r19
    7c1a:	38 f0       	brcs	.+14     	; 0x7c2a <_ZN6String4moveERS_+0x44>
    7c1c:	d9 d6       	rcall	.+3506   	; 0x89d0 <strcpy>
    7c1e:	8c 81       	ldd	r24, Y+4	; 0x04
    7c20:	9d 81       	ldd	r25, Y+5	; 0x05
    7c22:	f8 01       	movw	r30, r16
    7c24:	95 83       	std	Z+5, r25	; 0x05
    7c26:	84 83       	std	Z+4, r24	; 0x04
    7c28:	12 c0       	rjmp	.+36     	; 0x7c4e <_ZN6String4moveERS_+0x68>
    7c2a:	42 d5       	rcall	.+2692   	; 0x86b0 <free>
    7c2c:	88 81       	ld	r24, Y
    7c2e:	99 81       	ldd	r25, Y+1	; 0x01
    7c30:	f8 01       	movw	r30, r16
    7c32:	91 83       	std	Z+1, r25	; 0x01
    7c34:	80 83       	st	Z, r24
    7c36:	8a 81       	ldd	r24, Y+2	; 0x02
    7c38:	9b 81       	ldd	r25, Y+3	; 0x03
    7c3a:	93 83       	std	Z+3, r25	; 0x03
    7c3c:	82 83       	std	Z+2, r24	; 0x02
    7c3e:	8c 81       	ldd	r24, Y+4	; 0x04
    7c40:	9d 81       	ldd	r25, Y+5	; 0x05
    7c42:	95 83       	std	Z+5, r25	; 0x05
    7c44:	84 83       	std	Z+4, r24	; 0x04
    7c46:	19 82       	std	Y+1, r1	; 0x01
    7c48:	18 82       	st	Y, r1
    7c4a:	1b 82       	std	Y+3, r1	; 0x03
    7c4c:	1a 82       	std	Y+2, r1	; 0x02
    7c4e:	1d 82       	std	Y+5, r1	; 0x05
    7c50:	1c 82       	std	Y+4, r1	; 0x04
    7c52:	df 91       	pop	r29
    7c54:	cf 91       	pop	r28
    7c56:	1f 91       	pop	r17
    7c58:	0f 91       	pop	r16
    7c5a:	08 95       	ret

00007c5c <_ZN6StringC1EOS_>:
    7c5c:	fc 01       	movw	r30, r24
    7c5e:	11 82       	std	Z+1, r1	; 0x01
    7c60:	10 82       	st	Z, r1
    7c62:	13 82       	std	Z+3, r1	; 0x03
    7c64:	12 82       	std	Z+2, r1	; 0x02
    7c66:	15 82       	std	Z+5, r1	; 0x05
    7c68:	14 82       	std	Z+4, r1	; 0x04
    7c6a:	bd cf       	rjmp	.-134    	; 0x7be6 <_ZN6String4moveERS_>

00007c6c <_ZN6StringaSERKS_>:
    7c6c:	cf 93       	push	r28
    7c6e:	df 93       	push	r29
    7c70:	ec 01       	movw	r28, r24
    7c72:	fb 01       	movw	r30, r22
    7c74:	86 17       	cp	r24, r22
    7c76:	97 07       	cpc	r25, r23
    7c78:	51 f0       	breq	.+20     	; 0x7c8e <_ZN6StringaSERKS_+0x22>
    7c7a:	60 81       	ld	r22, Z
    7c7c:	71 81       	ldd	r23, Z+1	; 0x01
    7c7e:	61 15       	cp	r22, r1
    7c80:	71 05       	cpc	r23, r1
    7c82:	21 f0       	breq	.+8      	; 0x7c8c <_ZN6StringaSERKS_+0x20>
    7c84:	44 81       	ldd	r20, Z+4	; 0x04
    7c86:	55 81       	ldd	r21, Z+5	; 0x05
    7c88:	7c df       	rcall	.-264    	; 0x7b82 <_ZN6String4copyEPKcj>
    7c8a:	01 c0       	rjmp	.+2      	; 0x7c8e <_ZN6StringaSERKS_+0x22>
    7c8c:	35 df       	rcall	.-406    	; 0x7af8 <_ZN6String10invalidateEv>
    7c8e:	ce 01       	movw	r24, r28
    7c90:	df 91       	pop	r29
    7c92:	cf 91       	pop	r28
    7c94:	08 95       	ret

00007c96 <_ZN6StringC1ERKS_>:
    7c96:	fc 01       	movw	r30, r24
    7c98:	11 82       	std	Z+1, r1	; 0x01
    7c9a:	10 82       	st	Z, r1
    7c9c:	13 82       	std	Z+3, r1	; 0x03
    7c9e:	12 82       	std	Z+2, r1	; 0x02
    7ca0:	15 82       	std	Z+5, r1	; 0x05
    7ca2:	14 82       	std	Z+4, r1	; 0x04
    7ca4:	e3 cf       	rjmp	.-58     	; 0x7c6c <_ZN6StringaSERKS_>

00007ca6 <_ZN6StringaSEOS_>:
    7ca6:	cf 93       	push	r28
    7ca8:	df 93       	push	r29
    7caa:	ec 01       	movw	r28, r24
    7cac:	86 17       	cp	r24, r22
    7cae:	97 07       	cpc	r25, r23
    7cb0:	09 f0       	breq	.+2      	; 0x7cb4 <_ZN6StringaSEOS_+0xe>
    7cb2:	99 df       	rcall	.-206    	; 0x7be6 <_ZN6String4moveERS_>
    7cb4:	ce 01       	movw	r24, r28
    7cb6:	df 91       	pop	r29
    7cb8:	cf 91       	pop	r28
    7cba:	08 95       	ret

00007cbc <_ZN6StringaSEPKc>:
    7cbc:	cf 93       	push	r28
    7cbe:	df 93       	push	r29
    7cc0:	ec 01       	movw	r28, r24
    7cc2:	61 15       	cp	r22, r1
    7cc4:	71 05       	cpc	r23, r1
    7cc6:	51 f0       	breq	.+20     	; 0x7cdc <_ZN6StringaSEPKc+0x20>
    7cc8:	fb 01       	movw	r30, r22
    7cca:	01 90       	ld	r0, Z+
    7ccc:	00 20       	and	r0, r0
    7cce:	e9 f7       	brne	.-6      	; 0x7cca <_ZN6StringaSEPKc+0xe>
    7cd0:	31 97       	sbiw	r30, 0x01	; 1
    7cd2:	af 01       	movw	r20, r30
    7cd4:	46 1b       	sub	r20, r22
    7cd6:	57 0b       	sbc	r21, r23
    7cd8:	54 df       	rcall	.-344    	; 0x7b82 <_ZN6String4copyEPKcj>
    7cda:	01 c0       	rjmp	.+2      	; 0x7cde <_ZN6StringaSEPKc+0x22>
    7cdc:	0d df       	rcall	.-486    	; 0x7af8 <_ZN6String10invalidateEv>
    7cde:	ce 01       	movw	r24, r28
    7ce0:	df 91       	pop	r29
    7ce2:	cf 91       	pop	r28
    7ce4:	08 95       	ret

00007ce6 <_ZN6StringC1Ehh>:
    7ce6:	0f 93       	push	r16
    7ce8:	1f 93       	push	r17
    7cea:	cf 93       	push	r28
    7cec:	df 93       	push	r29
    7cee:	cd b7       	in	r28, 0x3d	; 61
    7cf0:	de b7       	in	r29, 0x3e	; 62
    7cf2:	29 97       	sbiw	r28, 0x09	; 9
    7cf4:	0f b6       	in	r0, 0x3f	; 63
    7cf6:	f8 94       	cli
    7cf8:	de bf       	out	0x3e, r29	; 62
    7cfa:	0f be       	out	0x3f, r0	; 63
    7cfc:	cd bf       	out	0x3d, r28	; 61
    7cfe:	8c 01       	movw	r16, r24
    7d00:	86 2f       	mov	r24, r22
    7d02:	f8 01       	movw	r30, r16
    7d04:	11 82       	std	Z+1, r1	; 0x01
    7d06:	10 82       	st	Z, r1
    7d08:	13 82       	std	Z+3, r1	; 0x03
    7d0a:	12 82       	std	Z+2, r1	; 0x02
    7d0c:	15 82       	std	Z+5, r1	; 0x05
    7d0e:	14 82       	std	Z+4, r1	; 0x04
    7d10:	50 e0       	ldi	r21, 0x00	; 0
    7d12:	be 01       	movw	r22, r28
    7d14:	6f 5f       	subi	r22, 0xFF	; 255
    7d16:	7f 4f       	sbci	r23, 0xFF	; 255
    7d18:	90 e0       	ldi	r25, 0x00	; 0
    7d1a:	a9 d6       	rcall	.+3410   	; 0x8a6e <utoa>
    7d1c:	be 01       	movw	r22, r28
    7d1e:	6f 5f       	subi	r22, 0xFF	; 255
    7d20:	7f 4f       	sbci	r23, 0xFF	; 255
    7d22:	c8 01       	movw	r24, r16
    7d24:	cb df       	rcall	.-106    	; 0x7cbc <_ZN6StringaSEPKc>
    7d26:	29 96       	adiw	r28, 0x09	; 9
    7d28:	0f b6       	in	r0, 0x3f	; 63
    7d2a:	f8 94       	cli
    7d2c:	de bf       	out	0x3e, r29	; 62
    7d2e:	0f be       	out	0x3f, r0	; 63
    7d30:	cd bf       	out	0x3d, r28	; 61
    7d32:	df 91       	pop	r29
    7d34:	cf 91       	pop	r28
    7d36:	1f 91       	pop	r17
    7d38:	0f 91       	pop	r16
    7d3a:	08 95       	ret

00007d3c <_ZN6StringC1Emh>:
    7d3c:	0f 93       	push	r16
    7d3e:	1f 93       	push	r17
    7d40:	cf 93       	push	r28
    7d42:	df 93       	push	r29
    7d44:	cd b7       	in	r28, 0x3d	; 61
    7d46:	de b7       	in	r29, 0x3e	; 62
    7d48:	a1 97       	sbiw	r28, 0x21	; 33
    7d4a:	0f b6       	in	r0, 0x3f	; 63
    7d4c:	f8 94       	cli
    7d4e:	de bf       	out	0x3e, r29	; 62
    7d50:	0f be       	out	0x3f, r0	; 63
    7d52:	cd bf       	out	0x3d, r28	; 61
    7d54:	8c 01       	movw	r16, r24
    7d56:	cb 01       	movw	r24, r22
    7d58:	ba 01       	movw	r22, r20
    7d5a:	f8 01       	movw	r30, r16
    7d5c:	11 82       	std	Z+1, r1	; 0x01
    7d5e:	10 82       	st	Z, r1
    7d60:	13 82       	std	Z+3, r1	; 0x03
    7d62:	12 82       	std	Z+2, r1	; 0x02
    7d64:	15 82       	std	Z+5, r1	; 0x05
    7d66:	14 82       	std	Z+4, r1	; 0x04
    7d68:	30 e0       	ldi	r19, 0x00	; 0
    7d6a:	ae 01       	movw	r20, r28
    7d6c:	4f 5f       	subi	r20, 0xFF	; 255
    7d6e:	5f 4f       	sbci	r21, 0xFF	; 255
    7d70:	53 d6       	rcall	.+3238   	; 0x8a18 <ultoa>
    7d72:	be 01       	movw	r22, r28
    7d74:	6f 5f       	subi	r22, 0xFF	; 255
    7d76:	7f 4f       	sbci	r23, 0xFF	; 255
    7d78:	c8 01       	movw	r24, r16
    7d7a:	a0 df       	rcall	.-192    	; 0x7cbc <_ZN6StringaSEPKc>
    7d7c:	a1 96       	adiw	r28, 0x21	; 33
    7d7e:	0f b6       	in	r0, 0x3f	; 63
    7d80:	f8 94       	cli
    7d82:	de bf       	out	0x3e, r29	; 62
    7d84:	0f be       	out	0x3f, r0	; 63
    7d86:	cd bf       	out	0x3d, r28	; 61
    7d88:	df 91       	pop	r29
    7d8a:	cf 91       	pop	r28
    7d8c:	1f 91       	pop	r17
    7d8e:	0f 91       	pop	r16
    7d90:	08 95       	ret

00007d92 <_ZN6StringC1Edh>:
    7d92:	ef 92       	push	r14
    7d94:	ff 92       	push	r15
    7d96:	0f 93       	push	r16
    7d98:	1f 93       	push	r17
    7d9a:	cf 93       	push	r28
    7d9c:	df 93       	push	r29
    7d9e:	cd b7       	in	r28, 0x3d	; 61
    7da0:	de b7       	in	r29, 0x3e	; 62
    7da2:	a1 97       	sbiw	r28, 0x21	; 33
    7da4:	0f b6       	in	r0, 0x3f	; 63
    7da6:	f8 94       	cli
    7da8:	de bf       	out	0x3e, r29	; 62
    7daa:	0f be       	out	0x3f, r0	; 63
    7dac:	cd bf       	out	0x3d, r28	; 61
    7dae:	7c 01       	movw	r14, r24
    7db0:	cb 01       	movw	r24, r22
    7db2:	ba 01       	movw	r22, r20
    7db4:	f7 01       	movw	r30, r14
    7db6:	11 82       	std	Z+1, r1	; 0x01
    7db8:	10 82       	st	Z, r1
    7dba:	13 82       	std	Z+3, r1	; 0x03
    7dbc:	12 82       	std	Z+2, r1	; 0x02
    7dbe:	15 82       	std	Z+5, r1	; 0x05
    7dc0:	14 82       	std	Z+4, r1	; 0x04
    7dc2:	42 e0       	ldi	r20, 0x02	; 2
    7dc4:	42 0f       	add	r20, r18
    7dc6:	8e 01       	movw	r16, r28
    7dc8:	0f 5f       	subi	r16, 0xFF	; 255
    7dca:	1f 4f       	sbci	r17, 0xFF	; 255
    7dcc:	ba d3       	rcall	.+1908   	; 0x8542 <dtostrf>
    7dce:	bc 01       	movw	r22, r24
    7dd0:	c7 01       	movw	r24, r14
    7dd2:	74 df       	rcall	.-280    	; 0x7cbc <_ZN6StringaSEPKc>
    7dd4:	a1 96       	adiw	r28, 0x21	; 33
    7dd6:	0f b6       	in	r0, 0x3f	; 63
    7dd8:	f8 94       	cli
    7dda:	de bf       	out	0x3e, r29	; 62
    7ddc:	0f be       	out	0x3f, r0	; 63
    7dde:	cd bf       	out	0x3d, r28	; 61
    7de0:	df 91       	pop	r29
    7de2:	cf 91       	pop	r28
    7de4:	1f 91       	pop	r17
    7de6:	0f 91       	pop	r16
    7de8:	ff 90       	pop	r15
    7dea:	ef 90       	pop	r14
    7dec:	08 95       	ret

00007dee <_ZN6String6concatEPKcj>:
    7dee:	ef 92       	push	r14
    7df0:	ff 92       	push	r15
    7df2:	0f 93       	push	r16
    7df4:	1f 93       	push	r17
    7df6:	cf 93       	push	r28
    7df8:	df 93       	push	r29
    7dfa:	61 15       	cp	r22, r1
    7dfc:	71 05       	cpc	r23, r1
    7dfe:	11 f4       	brne	.+4      	; 0x7e04 <_ZN6String6concatEPKcj+0x16>
    7e00:	80 e0       	ldi	r24, 0x00	; 0
    7e02:	1a c0       	rjmp	.+52     	; 0x7e38 <_ZN6String6concatEPKcj+0x4a>
    7e04:	41 15       	cp	r20, r1
    7e06:	51 05       	cpc	r21, r1
    7e08:	b1 f0       	breq	.+44     	; 0x7e36 <_ZN6String6concatEPKcj+0x48>
    7e0a:	7b 01       	movw	r14, r22
    7e0c:	ec 01       	movw	r28, r24
    7e0e:	8c 81       	ldd	r24, Y+4	; 0x04
    7e10:	9d 81       	ldd	r25, Y+5	; 0x05
    7e12:	8a 01       	movw	r16, r20
    7e14:	08 0f       	add	r16, r24
    7e16:	19 1f       	adc	r17, r25
    7e18:	b8 01       	movw	r22, r16
    7e1a:	ce 01       	movw	r24, r28
    7e1c:	97 de       	rcall	.-722    	; 0x7b4c <_ZN6String7reserveEj>
    7e1e:	88 23       	and	r24, r24
    7e20:	79 f3       	breq	.-34     	; 0x7e00 <_ZN6String6concatEPKcj+0x12>
    7e22:	28 81       	ld	r18, Y
    7e24:	39 81       	ldd	r19, Y+1	; 0x01
    7e26:	8c 81       	ldd	r24, Y+4	; 0x04
    7e28:	9d 81       	ldd	r25, Y+5	; 0x05
    7e2a:	b7 01       	movw	r22, r14
    7e2c:	82 0f       	add	r24, r18
    7e2e:	93 1f       	adc	r25, r19
    7e30:	cf d5       	rcall	.+2974   	; 0x89d0 <strcpy>
    7e32:	1d 83       	std	Y+5, r17	; 0x05
    7e34:	0c 83       	std	Y+4, r16	; 0x04
    7e36:	81 e0       	ldi	r24, 0x01	; 1
    7e38:	df 91       	pop	r29
    7e3a:	cf 91       	pop	r28
    7e3c:	1f 91       	pop	r17
    7e3e:	0f 91       	pop	r16
    7e40:	ff 90       	pop	r15
    7e42:	ef 90       	pop	r14
    7e44:	08 95       	ret

00007e46 <_ZN6String6concatERKS_>:
    7e46:	fb 01       	movw	r30, r22
    7e48:	44 81       	ldd	r20, Z+4	; 0x04
    7e4a:	55 81       	ldd	r21, Z+5	; 0x05
    7e4c:	60 81       	ld	r22, Z
    7e4e:	71 81       	ldd	r23, Z+1	; 0x01
    7e50:	ce cf       	rjmp	.-100    	; 0x7dee <_ZN6String6concatEPKcj>

00007e52 <_ZN6String6concatEPKc>:
    7e52:	61 15       	cp	r22, r1
    7e54:	71 05       	cpc	r23, r1
    7e56:	49 f0       	breq	.+18     	; 0x7e6a <_ZN6String6concatEPKc+0x18>
    7e58:	fb 01       	movw	r30, r22
    7e5a:	01 90       	ld	r0, Z+
    7e5c:	00 20       	and	r0, r0
    7e5e:	e9 f7       	brne	.-6      	; 0x7e5a <_ZN6String6concatEPKc+0x8>
    7e60:	31 97       	sbiw	r30, 0x01	; 1
    7e62:	af 01       	movw	r20, r30
    7e64:	46 1b       	sub	r20, r22
    7e66:	57 0b       	sbc	r21, r23
    7e68:	c2 cf       	rjmp	.-124    	; 0x7dee <_ZN6String6concatEPKcj>
    7e6a:	80 e0       	ldi	r24, 0x00	; 0
    7e6c:	08 95       	ret

00007e6e <_ZplRK15StringSumHelperRK6String>:
    7e6e:	cf 93       	push	r28
    7e70:	df 93       	push	r29
    7e72:	ec 01       	movw	r28, r24
    7e74:	fb 01       	movw	r30, r22
    7e76:	44 81       	ldd	r20, Z+4	; 0x04
    7e78:	55 81       	ldd	r21, Z+5	; 0x05
    7e7a:	60 81       	ld	r22, Z
    7e7c:	71 81       	ldd	r23, Z+1	; 0x01
    7e7e:	b7 df       	rcall	.-146    	; 0x7dee <_ZN6String6concatEPKcj>
    7e80:	81 11       	cpse	r24, r1
    7e82:	02 c0       	rjmp	.+4      	; 0x7e88 <_ZplRK15StringSumHelperRK6String+0x1a>
    7e84:	ce 01       	movw	r24, r28
    7e86:	38 de       	rcall	.-912    	; 0x7af8 <_ZN6String10invalidateEv>
    7e88:	ce 01       	movw	r24, r28
    7e8a:	df 91       	pop	r29
    7e8c:	cf 91       	pop	r28
    7e8e:	08 95       	ret

00007e90 <_ZplRK15StringSumHelperPKc>:
    7e90:	cf 93       	push	r28
    7e92:	df 93       	push	r29
    7e94:	ec 01       	movw	r28, r24
    7e96:	61 15       	cp	r22, r1
    7e98:	71 05       	cpc	r23, r1
    7e9a:	59 f0       	breq	.+22     	; 0x7eb2 <_ZplRK15StringSumHelperPKc+0x22>
    7e9c:	fb 01       	movw	r30, r22
    7e9e:	01 90       	ld	r0, Z+
    7ea0:	00 20       	and	r0, r0
    7ea2:	e9 f7       	brne	.-6      	; 0x7e9e <_ZplRK15StringSumHelperPKc+0xe>
    7ea4:	31 97       	sbiw	r30, 0x01	; 1
    7ea6:	af 01       	movw	r20, r30
    7ea8:	46 1b       	sub	r20, r22
    7eaa:	57 0b       	sbc	r21, r23
    7eac:	a0 df       	rcall	.-192    	; 0x7dee <_ZN6String6concatEPKcj>
    7eae:	81 11       	cpse	r24, r1
    7eb0:	02 c0       	rjmp	.+4      	; 0x7eb6 <_ZplRK15StringSumHelperPKc+0x26>
    7eb2:	ce 01       	movw	r24, r28
    7eb4:	21 de       	rcall	.-958    	; 0x7af8 <_ZN6String10invalidateEv>
    7eb6:	ce 01       	movw	r24, r28
    7eb8:	df 91       	pop	r29
    7eba:	cf 91       	pop	r28
    7ebc:	08 95       	ret

00007ebe <_ZNK6String6equalsEPKc>:
    7ebe:	fc 01       	movw	r30, r24
    7ec0:	24 81       	ldd	r18, Z+4	; 0x04
    7ec2:	35 81       	ldd	r19, Z+5	; 0x05
    7ec4:	23 2b       	or	r18, r19
    7ec6:	31 f4       	brne	.+12     	; 0x7ed4 <_ZNK6String6equalsEPKc+0x16>
    7ec8:	21 e0       	ldi	r18, 0x01	; 1
    7eca:	61 15       	cp	r22, r1
    7ecc:	71 05       	cpc	r23, r1
    7ece:	99 f0       	breq	.+38     	; 0x7ef6 <_ZNK6String6equalsEPKc+0x38>
    7ed0:	fb 01       	movw	r30, r22
    7ed2:	08 c0       	rjmp	.+16     	; 0x7ee4 <_ZNK6String6equalsEPKc+0x26>
    7ed4:	fc 01       	movw	r30, r24
    7ed6:	80 81       	ld	r24, Z
    7ed8:	91 81       	ldd	r25, Z+1	; 0x01
    7eda:	61 15       	cp	r22, r1
    7edc:	71 05       	cpc	r23, r1
    7ede:	31 f4       	brne	.+12     	; 0x7eec <_ZNK6String6equalsEPKc+0x2e>
    7ee0:	21 e0       	ldi	r18, 0x01	; 1
    7ee2:	fc 01       	movw	r30, r24
    7ee4:	80 81       	ld	r24, Z
    7ee6:	88 23       	and	r24, r24
    7ee8:	31 f0       	breq	.+12     	; 0x7ef6 <_ZNK6String6equalsEPKc+0x38>
    7eea:	04 c0       	rjmp	.+8      	; 0x7ef4 <_ZNK6String6equalsEPKc+0x36>
    7eec:	68 d5       	rcall	.+2768   	; 0x89be <strcmp>
    7eee:	21 e0       	ldi	r18, 0x01	; 1
    7ef0:	89 2b       	or	r24, r25
    7ef2:	09 f0       	breq	.+2      	; 0x7ef6 <_ZNK6String6equalsEPKc+0x38>
    7ef4:	20 e0       	ldi	r18, 0x00	; 0
    7ef6:	82 2f       	mov	r24, r18
    7ef8:	08 95       	ret

00007efa <_ZNK6String8getBytesEPhjj>:
    7efa:	0f 93       	push	r16
    7efc:	1f 93       	push	r17
    7efe:	cf 93       	push	r28
    7f00:	df 93       	push	r29
    7f02:	41 15       	cp	r20, r1
    7f04:	51 05       	cpc	r21, r1
    7f06:	11 f1       	breq	.+68     	; 0x7f4c <_ZNK6String8getBytesEPhjj+0x52>
    7f08:	61 15       	cp	r22, r1
    7f0a:	71 05       	cpc	r23, r1
    7f0c:	f9 f0       	breq	.+62     	; 0x7f4c <_ZNK6String8getBytesEPhjj+0x52>
    7f0e:	dc 01       	movw	r26, r24
    7f10:	14 96       	adiw	r26, 0x04	; 4
    7f12:	ed 91       	ld	r30, X+
    7f14:	fc 91       	ld	r31, X
    7f16:	15 97       	sbiw	r26, 0x05	; 5
    7f18:	2e 17       	cp	r18, r30
    7f1a:	3f 07       	cpc	r19, r31
    7f1c:	18 f0       	brcs	.+6      	; 0x7f24 <_ZNK6String8getBytesEPhjj+0x2a>
    7f1e:	fb 01       	movw	r30, r22
    7f20:	10 82       	st	Z, r1
    7f22:	14 c0       	rjmp	.+40     	; 0x7f4c <_ZNK6String8getBytesEPhjj+0x52>
    7f24:	e2 1b       	sub	r30, r18
    7f26:	f3 0b       	sbc	r31, r19
    7f28:	ea 01       	movw	r28, r20
    7f2a:	21 97       	sbiw	r28, 0x01	; 1
    7f2c:	ec 17       	cp	r30, r28
    7f2e:	fd 07       	cpc	r31, r29
    7f30:	08 f4       	brcc	.+2      	; 0x7f34 <_ZNK6String8getBytesEPhjj+0x3a>
    7f32:	ef 01       	movw	r28, r30
    7f34:	8b 01       	movw	r16, r22
    7f36:	fc 01       	movw	r30, r24
    7f38:	60 81       	ld	r22, Z
    7f3a:	71 81       	ldd	r23, Z+1	; 0x01
    7f3c:	62 0f       	add	r22, r18
    7f3e:	73 1f       	adc	r23, r19
    7f40:	ae 01       	movw	r20, r28
    7f42:	c8 01       	movw	r24, r16
    7f44:	5a d5       	rcall	.+2740   	; 0x89fa <strncpy>
    7f46:	c0 0f       	add	r28, r16
    7f48:	d1 1f       	adc	r29, r17
    7f4a:	18 82       	st	Y, r1
    7f4c:	df 91       	pop	r29
    7f4e:	cf 91       	pop	r28
    7f50:	1f 91       	pop	r17
    7f52:	0f 91       	pop	r16
    7f54:	08 95       	ret

00007f56 <_ZNK6String9substringEjj>:
    7f56:	bf 92       	push	r11
    7f58:	cf 92       	push	r12
    7f5a:	df 92       	push	r13
    7f5c:	ef 92       	push	r14
    7f5e:	ff 92       	push	r15
    7f60:	0f 93       	push	r16
    7f62:	1f 93       	push	r17
    7f64:	cf 93       	push	r28
    7f66:	df 93       	push	r29
    7f68:	7c 01       	movw	r14, r24
    7f6a:	6b 01       	movw	r12, r22
    7f6c:	8a 01       	movw	r16, r20
    7f6e:	e9 01       	movw	r28, r18
    7f70:	24 17       	cp	r18, r20
    7f72:	35 07       	cpc	r19, r21
    7f74:	20 f4       	brcc	.+8      	; 0x7f7e <_ZNK6String9substringEjj+0x28>
    7f76:	81 2f       	mov	r24, r17
    7f78:	89 01       	movw	r16, r18
    7f7a:	c4 2f       	mov	r28, r20
    7f7c:	d8 2f       	mov	r29, r24
    7f7e:	63 ec       	ldi	r22, 0xC3	; 195
    7f80:	71 e0       	ldi	r23, 0x01	; 1
    7f82:	c7 01       	movw	r24, r14
    7f84:	1c de       	rcall	.-968    	; 0x7bbe <_ZN6StringC1EPKc>
    7f86:	d6 01       	movw	r26, r12
    7f88:	14 96       	adiw	r26, 0x04	; 4
    7f8a:	8d 91       	ld	r24, X+
    7f8c:	9c 91       	ld	r25, X
    7f8e:	15 97       	sbiw	r26, 0x05	; 5
    7f90:	08 17       	cp	r16, r24
    7f92:	19 07       	cpc	r17, r25
    7f94:	c0 f4       	brcc	.+48     	; 0x7fc6 <_ZNK6String9substringEjj+0x70>
    7f96:	8c 17       	cp	r24, r28
    7f98:	9d 07       	cpc	r25, r29
    7f9a:	08 f4       	brcc	.+2      	; 0x7f9e <_ZNK6String9substringEjj+0x48>
    7f9c:	ec 01       	movw	r28, r24
    7f9e:	d6 01       	movw	r26, r12
    7fa0:	ed 91       	ld	r30, X+
    7fa2:	fc 91       	ld	r31, X
    7fa4:	11 97       	sbiw	r26, 0x01	; 1
    7fa6:	ec 0f       	add	r30, r28
    7fa8:	fd 1f       	adc	r31, r29
    7faa:	b0 80       	ld	r11, Z
    7fac:	10 82       	st	Z, r1
    7fae:	6d 91       	ld	r22, X+
    7fb0:	7c 91       	ld	r23, X
    7fb2:	60 0f       	add	r22, r16
    7fb4:	71 1f       	adc	r23, r17
    7fb6:	c7 01       	movw	r24, r14
    7fb8:	81 de       	rcall	.-766    	; 0x7cbc <_ZN6StringaSEPKc>
    7fba:	d6 01       	movw	r26, r12
    7fbc:	ed 91       	ld	r30, X+
    7fbe:	fc 91       	ld	r31, X
    7fc0:	ec 0f       	add	r30, r28
    7fc2:	fd 1f       	adc	r31, r29
    7fc4:	b0 82       	st	Z, r11
    7fc6:	c7 01       	movw	r24, r14
    7fc8:	df 91       	pop	r29
    7fca:	cf 91       	pop	r28
    7fcc:	1f 91       	pop	r17
    7fce:	0f 91       	pop	r16
    7fd0:	ff 90       	pop	r15
    7fd2:	ef 90       	pop	r14
    7fd4:	df 90       	pop	r13
    7fd6:	cf 90       	pop	r12
    7fd8:	bf 90       	pop	r11
    7fda:	08 95       	ret

00007fdc <_ZN6String4trimEv>:

void String::trim(void)
{
    7fdc:	af 92       	push	r10
    7fde:	bf 92       	push	r11
    7fe0:	cf 92       	push	r12
    7fe2:	df 92       	push	r13
    7fe4:	ef 92       	push	r14
    7fe6:	ff 92       	push	r15
    7fe8:	0f 93       	push	r16
    7fea:	1f 93       	push	r17
    7fec:	cf 93       	push	r28
    7fee:	df 93       	push	r29
	if (!buffer || len == 0) return;
    7ff0:	dc 01       	movw	r26, r24
    7ff2:	cd 90       	ld	r12, X+
    7ff4:	dc 90       	ld	r13, X
    7ff6:	11 97       	sbiw	r26, 0x01	; 1
    7ff8:	c1 14       	cp	r12, r1
    7ffa:	d1 04       	cpc	r13, r1
    7ffc:	09 f4       	brne	.+2      	; 0x8000 <_ZN6String4trimEv+0x24>
    7ffe:	3c c0       	rjmp	.+120    	; 0x8078 <_ZN6String4trimEv+0x9c>
    8000:	14 96       	adiw	r26, 0x04	; 4
    8002:	cd 91       	ld	r28, X+
    8004:	dc 91       	ld	r29, X
    8006:	15 97       	sbiw	r26, 0x05	; 5
    8008:	20 97       	sbiw	r28, 0x00	; 0
    800a:	b1 f1       	breq	.+108    	; 0x8078 <_ZN6String4trimEv+0x9c>
    800c:	8c 01       	movw	r16, r24
    800e:	76 01       	movw	r14, r12
    8010:	57 01       	movw	r10, r14
    8012:	bf ef       	ldi	r27, 0xFF	; 255
    8014:	ab 1a       	sub	r10, r27
    8016:	bb 0a       	sbc	r11, r27
	char *begin = buffer;
	while (isspace(*begin)) begin++;
    8018:	f7 01       	movw	r30, r14
    801a:	80 81       	ld	r24, Z
    801c:	90 e0       	ldi	r25, 0x00	; 0
    801e:	b5 d4       	rcall	.+2410   	; 0x898a <isspace>
    8020:	89 2b       	or	r24, r25
    8022:	11 f0       	breq	.+4      	; 0x8028 <_ZN6String4trimEv+0x4c>
    8024:	75 01       	movw	r14, r10
    8026:	f4 cf       	rjmp	.-24     	; 0x8010 <_ZN6String4trimEv+0x34>
	char *end = buffer + len - 1;
    8028:	21 97       	sbiw	r28, 0x01	; 1
    802a:	cc 0d       	add	r28, r12
    802c:	dd 1d       	adc	r29, r13
	while (isspace(*end) && end >= begin) end--;
    802e:	88 81       	ld	r24, Y
    8030:	90 e0       	ldi	r25, 0x00	; 0
    8032:	ab d4       	rcall	.+2390   	; 0x898a <isspace>
    8034:	89 2b       	or	r24, r25
    8036:	29 f0       	breq	.+10     	; 0x8042 <_ZN6String4trimEv+0x66>
    8038:	ce 15       	cp	r28, r14
    803a:	df 05       	cpc	r29, r15
    803c:	10 f0       	brcs	.+4      	; 0x8042 <_ZN6String4trimEv+0x66>
    803e:	21 97       	sbiw	r28, 0x01	; 1
    8040:	f6 cf       	rjmp	.-20     	; 0x802e <_ZN6String4trimEv+0x52>
	len = end + 1 - begin;
    8042:	ae 01       	movw	r20, r28
    8044:	4f 5f       	subi	r20, 0xFF	; 255
    8046:	5f 4f       	sbci	r21, 0xFF	; 255
    8048:	4e 19       	sub	r20, r14
    804a:	5f 09       	sbc	r21, r15
    804c:	d8 01       	movw	r26, r16
    804e:	15 96       	adiw	r26, 0x05	; 5
    8050:	5c 93       	st	X, r21
    8052:	4e 93       	st	-X, r20
    8054:	14 97       	sbiw	r26, 0x04	; 4
	if (begin > buffer) memcpy(buffer, begin, len);
    8056:	ce 14       	cp	r12, r14
    8058:	df 04       	cpc	r13, r15
    805a:	18 f4       	brcc	.+6      	; 0x8062 <_ZN6String4trimEv+0x86>
    805c:	b7 01       	movw	r22, r14
    805e:	c6 01       	movw	r24, r12
    8060:	a5 d4       	rcall	.+2378   	; 0x89ac <memcpy>
	buffer[len] = 0;
    8062:	d8 01       	movw	r26, r16
    8064:	ed 91       	ld	r30, X+
    8066:	fc 91       	ld	r31, X
    8068:	11 97       	sbiw	r26, 0x01	; 1
    806a:	14 96       	adiw	r26, 0x04	; 4
    806c:	8d 91       	ld	r24, X+
    806e:	9c 91       	ld	r25, X
    8070:	15 97       	sbiw	r26, 0x05	; 5
    8072:	e8 0f       	add	r30, r24
    8074:	f9 1f       	adc	r31, r25
    8076:	10 82       	st	Z, r1
}
    8078:	df 91       	pop	r29
    807a:	cf 91       	pop	r28
    807c:	1f 91       	pop	r17
    807e:	0f 91       	pop	r16
    8080:	ff 90       	pop	r15
    8082:	ef 90       	pop	r14
    8084:	df 90       	pop	r13
    8086:	cf 90       	pop	r12
    8088:	bf 90       	pop	r11
    808a:	af 90       	pop	r10
    808c:	08 95       	ret

0000808e <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    808e:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    8090:	91 8d       	ldd	r25, Z+25	; 0x19
    8092:	22 8d       	ldd	r18, Z+26	; 0x1a
    8094:	89 2f       	mov	r24, r25
    8096:	90 e0       	ldi	r25, 0x00	; 0
    8098:	80 5c       	subi	r24, 0xC0	; 192
    809a:	9f 4f       	sbci	r25, 0xFF	; 255
    809c:	82 1b       	sub	r24, r18
    809e:	91 09       	sbc	r25, r1
}
    80a0:	8f 73       	andi	r24, 0x3F	; 63
    80a2:	99 27       	eor	r25, r25
    80a4:	08 95       	ret

000080a6 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    80a6:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    80a8:	91 8d       	ldd	r25, Z+25	; 0x19
    80aa:	82 8d       	ldd	r24, Z+26	; 0x1a
    80ac:	98 17       	cp	r25, r24
    80ae:	31 f0       	breq	.+12     	; 0x80bc <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    80b0:	82 8d       	ldd	r24, Z+26	; 0x1a
    80b2:	e8 0f       	add	r30, r24
    80b4:	f1 1d       	adc	r31, r1
    80b6:	85 8d       	ldd	r24, Z+29	; 0x1d
    80b8:	90 e0       	ldi	r25, 0x00	; 0
    80ba:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    80bc:	8f ef       	ldi	r24, 0xFF	; 255
    80be:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    80c0:	08 95       	ret

000080c2 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    80c2:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    80c4:	91 8d       	ldd	r25, Z+25	; 0x19
    80c6:	82 8d       	ldd	r24, Z+26	; 0x1a
    80c8:	98 17       	cp	r25, r24
    80ca:	61 f0       	breq	.+24     	; 0x80e4 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    80cc:	82 8d       	ldd	r24, Z+26	; 0x1a
    80ce:	df 01       	movw	r26, r30
    80d0:	a8 0f       	add	r26, r24
    80d2:	b1 1d       	adc	r27, r1
    80d4:	5d 96       	adiw	r26, 0x1d	; 29
    80d6:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    80d8:	92 8d       	ldd	r25, Z+26	; 0x1a
    80da:	9f 5f       	subi	r25, 0xFF	; 255
    80dc:	9f 73       	andi	r25, 0x3F	; 63
    80de:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    80e0:	90 e0       	ldi	r25, 0x00	; 0
    80e2:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    80e4:	8f ef       	ldi	r24, 0xFF	; 255
    80e6:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    80e8:	08 95       	ret

000080ea <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    80ea:	fc 01       	movw	r30, r24
    80ec:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    80ee:	44 8d       	ldd	r20, Z+28	; 0x1c
    80f0:	25 2f       	mov	r18, r21
    80f2:	30 e0       	ldi	r19, 0x00	; 0
    80f4:	84 2f       	mov	r24, r20
    80f6:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    80f8:	82 1b       	sub	r24, r18
    80fa:	93 0b       	sbc	r25, r19
    80fc:	54 17       	cp	r21, r20
    80fe:	10 f0       	brcs	.+4      	; 0x8104 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    8100:	cf 96       	adiw	r24, 0x3f	; 63
    8102:	08 95       	ret
  return tail - head - 1;
    8104:	01 97       	sbiw	r24, 0x01	; 1
}
    8106:	08 95       	ret

00008108 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    8108:	80 ef       	ldi	r24, 0xF0	; 240
    810a:	99 e3       	ldi	r25, 0x39	; 57
    810c:	89 2b       	or	r24, r25
    810e:	41 f0       	breq	.+16     	; 0x8120 <_Z14serialEventRunv+0x18>
    8110:	80 e0       	ldi	r24, 0x00	; 0
    8112:	90 e0       	ldi	r25, 0x00	; 0
    8114:	89 2b       	or	r24, r25
    8116:	21 f0       	breq	.+8      	; 0x8120 <_Z14serialEventRunv+0x18>
    8118:	63 d9       	rcall	.-3386   	; 0x73e0 <_Z17Serial0_availablev>
    811a:	81 11       	cpse	r24, r1
    811c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    8120:	08 95       	ret

00008122 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    8122:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    8124:	84 8d       	ldd	r24, Z+28	; 0x1c
    8126:	df 01       	movw	r26, r30
    8128:	a8 0f       	add	r26, r24
    812a:	b1 1d       	adc	r27, r1
    812c:	a3 5a       	subi	r26, 0xA3	; 163
    812e:	bf 4f       	sbci	r27, 0xFF	; 255
    8130:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    8132:	84 8d       	ldd	r24, Z+28	; 0x1c
    8134:	90 e0       	ldi	r25, 0x00	; 0
    8136:	01 96       	adiw	r24, 0x01	; 1
    8138:	8f 73       	andi	r24, 0x3F	; 63
    813a:	99 27       	eor	r25, r25
    813c:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    813e:	a6 89       	ldd	r26, Z+22	; 0x16
    8140:	b7 89       	ldd	r27, Z+23	; 0x17
    8142:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    8144:	a0 89       	ldd	r26, Z+16	; 0x10
    8146:	b1 89       	ldd	r27, Z+17	; 0x11
    8148:	8c 91       	ld	r24, X
    814a:	83 70       	andi	r24, 0x03	; 3
    814c:	80 64       	ori	r24, 0x40	; 64
    814e:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    8150:	93 8d       	ldd	r25, Z+27	; 0x1b
    8152:	84 8d       	ldd	r24, Z+28	; 0x1c
    8154:	98 13       	cpse	r25, r24
    8156:	06 c0       	rjmp	.+12     	; 0x8164 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    8158:	02 88       	ldd	r0, Z+18	; 0x12
    815a:	f3 89       	ldd	r31, Z+19	; 0x13
    815c:	e0 2d       	mov	r30, r0
    815e:	80 81       	ld	r24, Z
    8160:	8f 7d       	andi	r24, 0xDF	; 223
    8162:	80 83       	st	Z, r24
    8164:	08 95       	ret

00008166 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    8166:	ef 92       	push	r14
    8168:	ff 92       	push	r15
    816a:	0f 93       	push	r16
    816c:	1f 93       	push	r17
    816e:	cf 93       	push	r28
    8170:	df 93       	push	r29
    8172:	ec 01       	movw	r28, r24
  _written = true;
    8174:	81 e0       	ldi	r24, 0x01	; 1
    8176:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    8178:	9b 8d       	ldd	r25, Y+27	; 0x1b
    817a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    817c:	98 13       	cpse	r25, r24
    817e:	05 c0       	rjmp	.+10     	; 0x818a <_ZN14HardwareSerial5writeEh+0x24>
    8180:	e8 89       	ldd	r30, Y+16	; 0x10
    8182:	f9 89       	ldd	r31, Y+17	; 0x11
    8184:	80 81       	ld	r24, Z
    8186:	85 fd       	sbrc	r24, 5
    8188:	25 c0       	rjmp	.+74     	; 0x81d4 <_ZN14HardwareSerial5writeEh+0x6e>
    818a:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    818c:	0b 8d       	ldd	r16, Y+27	; 0x1b
    818e:	10 e0       	ldi	r17, 0x00	; 0
    8190:	0f 5f       	subi	r16, 0xFF	; 255
    8192:	1f 4f       	sbci	r17, 0xFF	; 255
    8194:	0f 73       	andi	r16, 0x3F	; 63
    8196:	11 27       	eor	r17, r17
    8198:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    819a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    819c:	e8 12       	cpse	r14, r24
    819e:	0b c0       	rjmp	.+22     	; 0x81b6 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    81a0:	0f b6       	in	r0, 0x3f	; 63
    81a2:	07 fc       	sbrc	r0, 7
    81a4:	fa cf       	rjmp	.-12     	; 0x819a <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    81a6:	e8 89       	ldd	r30, Y+16	; 0x10
    81a8:	f9 89       	ldd	r31, Y+17	; 0x11
    81aa:	80 81       	ld	r24, Z
    81ac:	85 ff       	sbrs	r24, 5
    81ae:	f5 cf       	rjmp	.-22     	; 0x819a <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    81b0:	ce 01       	movw	r24, r28
    81b2:	b7 df       	rcall	.-146    	; 0x8122 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    81b4:	f2 cf       	rjmp	.-28     	; 0x819a <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    81b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    81b8:	fe 01       	movw	r30, r28
    81ba:	e8 0f       	add	r30, r24
    81bc:	f1 1d       	adc	r31, r1
    81be:	e3 5a       	subi	r30, 0xA3	; 163
    81c0:	ff 4f       	sbci	r31, 0xFF	; 255
    81c2:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    81c4:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    81c6:	f8 94       	cli
    _tx_buffer_head = i;
    81c8:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    81ca:	ea 89       	ldd	r30, Y+18	; 0x12
    81cc:	fb 89       	ldd	r31, Y+19	; 0x13
    81ce:	80 81       	ld	r24, Z
    81d0:	80 62       	ori	r24, 0x20	; 32
    81d2:	0a c0       	rjmp	.+20     	; 0x81e8 <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    81d4:	9f b7       	in	r25, 0x3f	; 63
    81d6:	f8 94       	cli
      *_udr = c;
    81d8:	ee 89       	ldd	r30, Y+22	; 0x16
    81da:	ff 89       	ldd	r31, Y+23	; 0x17
    81dc:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    81de:	e8 89       	ldd	r30, Y+16	; 0x10
    81e0:	f9 89       	ldd	r31, Y+17	; 0x11
    81e2:	80 81       	ld	r24, Z
    81e4:	83 70       	andi	r24, 0x03	; 3
    81e6:	80 64       	ori	r24, 0x40	; 64
    81e8:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    81ea:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    81ec:	81 e0       	ldi	r24, 0x01	; 1
    81ee:	90 e0       	ldi	r25, 0x00	; 0
    81f0:	df 91       	pop	r29
    81f2:	cf 91       	pop	r28
    81f4:	1f 91       	pop	r17
    81f6:	0f 91       	pop	r16
    81f8:	ff 90       	pop	r15
    81fa:	ef 90       	pop	r14
    81fc:	08 95       	ret

000081fe <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    81fe:	cf 93       	push	r28
    8200:	df 93       	push	r29
    8202:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    8204:	88 8d       	ldd	r24, Y+24	; 0x18
    8206:	88 23       	and	r24, r24
    8208:	c1 f0       	breq	.+48     	; 0x823a <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    820a:	ea 89       	ldd	r30, Y+18	; 0x12
    820c:	fb 89       	ldd	r31, Y+19	; 0x13
    820e:	80 81       	ld	r24, Z
    8210:	85 fd       	sbrc	r24, 5
    8212:	05 c0       	rjmp	.+10     	; 0x821e <_ZN14HardwareSerial5flushEv+0x20>
    8214:	a8 89       	ldd	r26, Y+16	; 0x10
    8216:	b9 89       	ldd	r27, Y+17	; 0x11
    8218:	8c 91       	ld	r24, X
    821a:	86 fd       	sbrc	r24, 6
    821c:	0e c0       	rjmp	.+28     	; 0x823a <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    821e:	0f b6       	in	r0, 0x3f	; 63
    8220:	07 fc       	sbrc	r0, 7
    8222:	f5 cf       	rjmp	.-22     	; 0x820e <_ZN14HardwareSerial5flushEv+0x10>
    8224:	80 81       	ld	r24, Z
    8226:	85 ff       	sbrs	r24, 5
    8228:	f2 cf       	rjmp	.-28     	; 0x820e <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    822a:	a8 89       	ldd	r26, Y+16	; 0x10
    822c:	b9 89       	ldd	r27, Y+17	; 0x11
    822e:	8c 91       	ld	r24, X
    8230:	85 ff       	sbrs	r24, 5
    8232:	ed cf       	rjmp	.-38     	; 0x820e <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    8234:	ce 01       	movw	r24, r28
    8236:	75 df       	rcall	.-278    	; 0x8122 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    8238:	e8 cf       	rjmp	.-48     	; 0x820a <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    823a:	df 91       	pop	r29
    823c:	cf 91       	pop	r28
    823e:	08 95       	ret

00008240 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    8240:	08 95       	ret

00008242 <__udivmodqi4>:
    8242:	99 1b       	sub	r25, r25
    8244:	79 e0       	ldi	r23, 0x09	; 9
    8246:	04 c0       	rjmp	.+8      	; 0x8250 <__udivmodqi4_ep>

00008248 <__udivmodqi4_loop>:
    8248:	99 1f       	adc	r25, r25
    824a:	96 17       	cp	r25, r22
    824c:	08 f0       	brcs	.+2      	; 0x8250 <__udivmodqi4_ep>
    824e:	96 1b       	sub	r25, r22

00008250 <__udivmodqi4_ep>:
    8250:	88 1f       	adc	r24, r24
    8252:	7a 95       	dec	r23
    8254:	c9 f7       	brne	.-14     	; 0x8248 <__udivmodqi4_loop>
    8256:	80 95       	com	r24
    8258:	08 95       	ret

0000825a <__udivmodhi4>:
    825a:	aa 1b       	sub	r26, r26
    825c:	bb 1b       	sub	r27, r27
    825e:	51 e1       	ldi	r21, 0x11	; 17
    8260:	07 c0       	rjmp	.+14     	; 0x8270 <__udivmodhi4_ep>

00008262 <__udivmodhi4_loop>:
    8262:	aa 1f       	adc	r26, r26
    8264:	bb 1f       	adc	r27, r27
    8266:	a6 17       	cp	r26, r22
    8268:	b7 07       	cpc	r27, r23
    826a:	10 f0       	brcs	.+4      	; 0x8270 <__udivmodhi4_ep>
    826c:	a6 1b       	sub	r26, r22
    826e:	b7 0b       	sbc	r27, r23

00008270 <__udivmodhi4_ep>:
    8270:	88 1f       	adc	r24, r24
    8272:	99 1f       	adc	r25, r25
    8274:	5a 95       	dec	r21
    8276:	a9 f7       	brne	.-22     	; 0x8262 <__udivmodhi4_loop>
    8278:	80 95       	com	r24
    827a:	90 95       	com	r25
    827c:	bc 01       	movw	r22, r24
    827e:	cd 01       	movw	r24, r26
    8280:	08 95       	ret

00008282 <__udivmodsi4>:
    8282:	a1 e2       	ldi	r26, 0x21	; 33
    8284:	1a 2e       	mov	r1, r26
    8286:	aa 1b       	sub	r26, r26
    8288:	bb 1b       	sub	r27, r27
    828a:	fd 01       	movw	r30, r26
    828c:	0d c0       	rjmp	.+26     	; 0x82a8 <__udivmodsi4_ep>

0000828e <__udivmodsi4_loop>:
    828e:	aa 1f       	adc	r26, r26
    8290:	bb 1f       	adc	r27, r27
    8292:	ee 1f       	adc	r30, r30
    8294:	ff 1f       	adc	r31, r31
    8296:	a2 17       	cp	r26, r18
    8298:	b3 07       	cpc	r27, r19
    829a:	e4 07       	cpc	r30, r20
    829c:	f5 07       	cpc	r31, r21
    829e:	20 f0       	brcs	.+8      	; 0x82a8 <__udivmodsi4_ep>
    82a0:	a2 1b       	sub	r26, r18
    82a2:	b3 0b       	sbc	r27, r19
    82a4:	e4 0b       	sbc	r30, r20
    82a6:	f5 0b       	sbc	r31, r21

000082a8 <__udivmodsi4_ep>:
    82a8:	66 1f       	adc	r22, r22
    82aa:	77 1f       	adc	r23, r23
    82ac:	88 1f       	adc	r24, r24
    82ae:	99 1f       	adc	r25, r25
    82b0:	1a 94       	dec	r1
    82b2:	69 f7       	brne	.-38     	; 0x828e <__udivmodsi4_loop>
    82b4:	60 95       	com	r22
    82b6:	70 95       	com	r23
    82b8:	80 95       	com	r24
    82ba:	90 95       	com	r25
    82bc:	9b 01       	movw	r18, r22
    82be:	ac 01       	movw	r20, r24
    82c0:	bd 01       	movw	r22, r26
    82c2:	cf 01       	movw	r24, r30
    82c4:	08 95       	ret

000082c6 <__tablejump2__>:
    82c6:	ee 0f       	add	r30, r30
    82c8:	ff 1f       	adc	r31, r31
    82ca:	00 24       	eor	r0, r0
    82cc:	00 1c       	adc	r0, r0
    82ce:	0b be       	out	0x3b, r0	; 59
    82d0:	07 90       	elpm	r0, Z+
    82d2:	f6 91       	elpm	r31, Z
    82d4:	e0 2d       	mov	r30, r0
    82d6:	09 94       	ijmp

000082d8 <__umulhisi3>:
    82d8:	a2 9f       	mul	r26, r18
    82da:	b0 01       	movw	r22, r0
    82dc:	b3 9f       	mul	r27, r19
    82de:	c0 01       	movw	r24, r0
    82e0:	a3 9f       	mul	r26, r19
    82e2:	70 0d       	add	r23, r0
    82e4:	81 1d       	adc	r24, r1
    82e6:	11 24       	eor	r1, r1
    82e8:	91 1d       	adc	r25, r1
    82ea:	b2 9f       	mul	r27, r18
    82ec:	70 0d       	add	r23, r0
    82ee:	81 1d       	adc	r24, r1
    82f0:	11 24       	eor	r1, r1
    82f2:	91 1d       	adc	r25, r1
    82f4:	08 95       	ret

000082f6 <__muluhisi3>:
    82f6:	f0 df       	rcall	.-32     	; 0x82d8 <__umulhisi3>
    82f8:	a5 9f       	mul	r26, r21
    82fa:	90 0d       	add	r25, r0
    82fc:	b4 9f       	mul	r27, r20
    82fe:	90 0d       	add	r25, r0
    8300:	a4 9f       	mul	r26, r20
    8302:	80 0d       	add	r24, r0
    8304:	91 1d       	adc	r25, r1
    8306:	11 24       	eor	r1, r1
    8308:	08 95       	ret

0000830a <__moddi3>:
    830a:	68 94       	set
    830c:	01 c0       	rjmp	.+2      	; 0x8310 <__divdi3_moddi3>

0000830e <__divdi3>:
    830e:	e8 94       	clt

00008310 <__divdi3_moddi3>:
    8310:	f9 2f       	mov	r31, r25
    8312:	f1 2b       	or	r31, r17
    8314:	0a f0       	brmi	.+2      	; 0x8318 <__divdi3_moddi3+0x8>
    8316:	27 c0       	rjmp	.+78     	; 0x8366 <__udivdi3_umoddi3>
    8318:	a0 e0       	ldi	r26, 0x00	; 0
    831a:	b0 e0       	ldi	r27, 0x00	; 0
    831c:	e1 e9       	ldi	r30, 0x91	; 145
    831e:	f1 e4       	ldi	r31, 0x41	; 65
    8320:	93 c0       	rjmp	.+294    	; 0x8448 <__prologue_saves__+0xc>
    8322:	09 2e       	mov	r0, r25
    8324:	05 94       	asr	r0
    8326:	1a f4       	brpl	.+6      	; 0x832e <__divdi3_moddi3+0x1e>
    8328:	79 d0       	rcall	.+242    	; 0x841c <__negdi2>
    832a:	11 23       	and	r17, r17
    832c:	92 f4       	brpl	.+36     	; 0x8352 <__divdi3_moddi3+0x42>
    832e:	f0 e8       	ldi	r31, 0x80	; 128
    8330:	0f 26       	eor	r0, r31
    8332:	ff ef       	ldi	r31, 0xFF	; 255
    8334:	e0 94       	com	r14
    8336:	f0 94       	com	r15
    8338:	00 95       	com	r16
    833a:	10 95       	com	r17
    833c:	b0 94       	com	r11
    833e:	c0 94       	com	r12
    8340:	d0 94       	com	r13
    8342:	a1 94       	neg	r10
    8344:	bf 0a       	sbc	r11, r31
    8346:	cf 0a       	sbc	r12, r31
    8348:	df 0a       	sbc	r13, r31
    834a:	ef 0a       	sbc	r14, r31
    834c:	ff 0a       	sbc	r15, r31
    834e:	0f 0b       	sbc	r16, r31
    8350:	1f 0b       	sbc	r17, r31
    8352:	13 d0       	rcall	.+38     	; 0x837a <__udivmod64>
    8354:	07 fc       	sbrc	r0, 7
    8356:	62 d0       	rcall	.+196    	; 0x841c <__negdi2>
    8358:	cd b7       	in	r28, 0x3d	; 61
    835a:	de b7       	in	r29, 0x3e	; 62
    835c:	ec e0       	ldi	r30, 0x0C	; 12
    835e:	90 c0       	rjmp	.+288    	; 0x8480 <__epilogue_restores__+0xc>

00008360 <__umoddi3>:
    8360:	68 94       	set
    8362:	01 c0       	rjmp	.+2      	; 0x8366 <__udivdi3_umoddi3>

00008364 <__udivdi3>:
    8364:	e8 94       	clt

00008366 <__udivdi3_umoddi3>:
    8366:	8f 92       	push	r8
    8368:	9f 92       	push	r9
    836a:	cf 93       	push	r28
    836c:	df 93       	push	r29
    836e:	05 d0       	rcall	.+10     	; 0x837a <__udivmod64>
    8370:	df 91       	pop	r29
    8372:	cf 91       	pop	r28
    8374:	9f 90       	pop	r9
    8376:	8f 90       	pop	r8
    8378:	08 95       	ret

0000837a <__udivmod64>:
    837a:	88 24       	eor	r8, r8
    837c:	99 24       	eor	r9, r9
    837e:	f4 01       	movw	r30, r8
    8380:	e4 01       	movw	r28, r8
    8382:	b0 e4       	ldi	r27, 0x40	; 64
    8384:	9f 93       	push	r25
    8386:	aa 27       	eor	r26, r26
    8388:	9a 15       	cp	r25, r10
    838a:	8b 04       	cpc	r8, r11
    838c:	9c 04       	cpc	r9, r12
    838e:	ed 05       	cpc	r30, r13
    8390:	fe 05       	cpc	r31, r14
    8392:	cf 05       	cpc	r28, r15
    8394:	d0 07       	cpc	r29, r16
    8396:	a1 07       	cpc	r26, r17
    8398:	98 f4       	brcc	.+38     	; 0x83c0 <__udivmod64+0x46>
    839a:	ad 2f       	mov	r26, r29
    839c:	dc 2f       	mov	r29, r28
    839e:	cf 2f       	mov	r28, r31
    83a0:	fe 2f       	mov	r31, r30
    83a2:	e9 2d       	mov	r30, r9
    83a4:	98 2c       	mov	r9, r8
    83a6:	89 2e       	mov	r8, r25
    83a8:	98 2f       	mov	r25, r24
    83aa:	87 2f       	mov	r24, r23
    83ac:	76 2f       	mov	r23, r22
    83ae:	65 2f       	mov	r22, r21
    83b0:	54 2f       	mov	r21, r20
    83b2:	43 2f       	mov	r20, r19
    83b4:	32 2f       	mov	r19, r18
    83b6:	22 27       	eor	r18, r18
    83b8:	b8 50       	subi	r27, 0x08	; 8
    83ba:	31 f7       	brne	.-52     	; 0x8388 <__udivmod64+0xe>
    83bc:	bf 91       	pop	r27
    83be:	27 c0       	rjmp	.+78     	; 0x840e <__udivmod64+0x94>
    83c0:	1b 2e       	mov	r1, r27
    83c2:	bf 91       	pop	r27
    83c4:	bb 27       	eor	r27, r27
    83c6:	22 0f       	add	r18, r18
    83c8:	33 1f       	adc	r19, r19
    83ca:	44 1f       	adc	r20, r20
    83cc:	55 1f       	adc	r21, r21
    83ce:	66 1f       	adc	r22, r22
    83d0:	77 1f       	adc	r23, r23
    83d2:	88 1f       	adc	r24, r24
    83d4:	99 1f       	adc	r25, r25
    83d6:	88 1c       	adc	r8, r8
    83d8:	99 1c       	adc	r9, r9
    83da:	ee 1f       	adc	r30, r30
    83dc:	ff 1f       	adc	r31, r31
    83de:	cc 1f       	adc	r28, r28
    83e0:	dd 1f       	adc	r29, r29
    83e2:	aa 1f       	adc	r26, r26
    83e4:	bb 1f       	adc	r27, r27
    83e6:	8a 14       	cp	r8, r10
    83e8:	9b 04       	cpc	r9, r11
    83ea:	ec 05       	cpc	r30, r12
    83ec:	fd 05       	cpc	r31, r13
    83ee:	ce 05       	cpc	r28, r14
    83f0:	df 05       	cpc	r29, r15
    83f2:	a0 07       	cpc	r26, r16
    83f4:	b1 07       	cpc	r27, r17
    83f6:	48 f0       	brcs	.+18     	; 0x840a <__udivmod64+0x90>
    83f8:	8a 18       	sub	r8, r10
    83fa:	9b 08       	sbc	r9, r11
    83fc:	ec 09       	sbc	r30, r12
    83fe:	fd 09       	sbc	r31, r13
    8400:	ce 09       	sbc	r28, r14
    8402:	df 09       	sbc	r29, r15
    8404:	a0 0b       	sbc	r26, r16
    8406:	b1 0b       	sbc	r27, r17
    8408:	21 60       	ori	r18, 0x01	; 1
    840a:	1a 94       	dec	r1
    840c:	e1 f6       	brne	.-72     	; 0x83c6 <__udivmod64+0x4c>
    840e:	2e f4       	brtc	.+10     	; 0x841a <__udivmod64+0xa0>
    8410:	94 01       	movw	r18, r8
    8412:	af 01       	movw	r20, r30
    8414:	be 01       	movw	r22, r28
    8416:	cd 01       	movw	r24, r26
    8418:	00 0c       	add	r0, r0
    841a:	08 95       	ret

0000841c <__negdi2>:
    841c:	60 95       	com	r22
    841e:	70 95       	com	r23
    8420:	80 95       	com	r24
    8422:	90 95       	com	r25
    8424:	30 95       	com	r19
    8426:	40 95       	com	r20
    8428:	50 95       	com	r21
    842a:	21 95       	neg	r18
    842c:	3f 4f       	sbci	r19, 0xFF	; 255
    842e:	4f 4f       	sbci	r20, 0xFF	; 255
    8430:	5f 4f       	sbci	r21, 0xFF	; 255
    8432:	6f 4f       	sbci	r22, 0xFF	; 255
    8434:	7f 4f       	sbci	r23, 0xFF	; 255
    8436:	8f 4f       	sbci	r24, 0xFF	; 255
    8438:	9f 4f       	sbci	r25, 0xFF	; 255
    843a:	08 95       	ret

0000843c <__prologue_saves__>:
    843c:	2f 92       	push	r2
    843e:	3f 92       	push	r3
    8440:	4f 92       	push	r4
    8442:	5f 92       	push	r5
    8444:	6f 92       	push	r6
    8446:	7f 92       	push	r7
    8448:	8f 92       	push	r8
    844a:	9f 92       	push	r9
    844c:	af 92       	push	r10
    844e:	bf 92       	push	r11
    8450:	cf 92       	push	r12
    8452:	df 92       	push	r13
    8454:	ef 92       	push	r14
    8456:	ff 92       	push	r15
    8458:	0f 93       	push	r16
    845a:	1f 93       	push	r17
    845c:	cf 93       	push	r28
    845e:	df 93       	push	r29
    8460:	cd b7       	in	r28, 0x3d	; 61
    8462:	de b7       	in	r29, 0x3e	; 62
    8464:	ca 1b       	sub	r28, r26
    8466:	db 0b       	sbc	r29, r27
    8468:	0f b6       	in	r0, 0x3f	; 63
    846a:	f8 94       	cli
    846c:	de bf       	out	0x3e, r29	; 62
    846e:	0f be       	out	0x3f, r0	; 63
    8470:	cd bf       	out	0x3d, r28	; 61
    8472:	09 94       	ijmp

00008474 <__epilogue_restores__>:
    8474:	2a 88       	ldd	r2, Y+18	; 0x12
    8476:	39 88       	ldd	r3, Y+17	; 0x11
    8478:	48 88       	ldd	r4, Y+16	; 0x10
    847a:	5f 84       	ldd	r5, Y+15	; 0x0f
    847c:	6e 84       	ldd	r6, Y+14	; 0x0e
    847e:	7d 84       	ldd	r7, Y+13	; 0x0d
    8480:	8c 84       	ldd	r8, Y+12	; 0x0c
    8482:	9b 84       	ldd	r9, Y+11	; 0x0b
    8484:	aa 84       	ldd	r10, Y+10	; 0x0a
    8486:	b9 84       	ldd	r11, Y+9	; 0x09
    8488:	c8 84       	ldd	r12, Y+8	; 0x08
    848a:	df 80       	ldd	r13, Y+7	; 0x07
    848c:	ee 80       	ldd	r14, Y+6	; 0x06
    848e:	fd 80       	ldd	r15, Y+5	; 0x05
    8490:	0c 81       	ldd	r16, Y+4	; 0x04
    8492:	1b 81       	ldd	r17, Y+3	; 0x03
    8494:	aa 81       	ldd	r26, Y+2	; 0x02
    8496:	b9 81       	ldd	r27, Y+1	; 0x01
    8498:	ce 0f       	add	r28, r30
    849a:	d1 1d       	adc	r29, r1
    849c:	0f b6       	in	r0, 0x3f	; 63
    849e:	f8 94       	cli
    84a0:	de bf       	out	0x3e, r29	; 62
    84a2:	0f be       	out	0x3f, r0	; 63
    84a4:	cd bf       	out	0x3d, r28	; 61
    84a6:	ed 01       	movw	r28, r26
    84a8:	08 95       	ret

000084aa <__ashldi3>:
    84aa:	0f 93       	push	r16
    84ac:	08 30       	cpi	r16, 0x08	; 8
    84ae:	90 f0       	brcs	.+36     	; 0x84d4 <__ashldi3+0x2a>
    84b0:	98 2f       	mov	r25, r24
    84b2:	87 2f       	mov	r24, r23
    84b4:	76 2f       	mov	r23, r22
    84b6:	65 2f       	mov	r22, r21
    84b8:	54 2f       	mov	r21, r20
    84ba:	43 2f       	mov	r20, r19
    84bc:	32 2f       	mov	r19, r18
    84be:	22 27       	eor	r18, r18
    84c0:	08 50       	subi	r16, 0x08	; 8
    84c2:	f4 cf       	rjmp	.-24     	; 0x84ac <__ashldi3+0x2>
    84c4:	22 0f       	add	r18, r18
    84c6:	33 1f       	adc	r19, r19
    84c8:	44 1f       	adc	r20, r20
    84ca:	55 1f       	adc	r21, r21
    84cc:	66 1f       	adc	r22, r22
    84ce:	77 1f       	adc	r23, r23
    84d0:	88 1f       	adc	r24, r24
    84d2:	99 1f       	adc	r25, r25
    84d4:	0a 95       	dec	r16
    84d6:	b2 f7       	brpl	.-20     	; 0x84c4 <__ashldi3+0x1a>
    84d8:	0f 91       	pop	r16
    84da:	08 95       	ret

000084dc <__ashrdi3>:
    84dc:	97 fb       	bst	r25, 7
    84de:	10 f8       	bld	r1, 0

000084e0 <__lshrdi3>:
    84e0:	16 94       	lsr	r1
    84e2:	00 08       	sbc	r0, r0
    84e4:	0f 93       	push	r16
    84e6:	08 30       	cpi	r16, 0x08	; 8
    84e8:	98 f0       	brcs	.+38     	; 0x8510 <__lshrdi3+0x30>
    84ea:	08 50       	subi	r16, 0x08	; 8
    84ec:	23 2f       	mov	r18, r19
    84ee:	34 2f       	mov	r19, r20
    84f0:	45 2f       	mov	r20, r21
    84f2:	56 2f       	mov	r21, r22
    84f4:	67 2f       	mov	r22, r23
    84f6:	78 2f       	mov	r23, r24
    84f8:	89 2f       	mov	r24, r25
    84fa:	90 2d       	mov	r25, r0
    84fc:	f4 cf       	rjmp	.-24     	; 0x84e6 <__lshrdi3+0x6>
    84fe:	05 94       	asr	r0
    8500:	97 95       	ror	r25
    8502:	87 95       	ror	r24
    8504:	77 95       	ror	r23
    8506:	67 95       	ror	r22
    8508:	57 95       	ror	r21
    850a:	47 95       	ror	r20
    850c:	37 95       	ror	r19
    850e:	27 95       	ror	r18
    8510:	0a 95       	dec	r16
    8512:	aa f7       	brpl	.-22     	; 0x84fe <__lshrdi3+0x1e>
    8514:	0f 91       	pop	r16
    8516:	08 95       	ret

00008518 <__adddi3>:
    8518:	2a 0d       	add	r18, r10
    851a:	3b 1d       	adc	r19, r11
    851c:	4c 1d       	adc	r20, r12
    851e:	5d 1d       	adc	r21, r13
    8520:	6e 1d       	adc	r22, r14
    8522:	7f 1d       	adc	r23, r15
    8524:	80 1f       	adc	r24, r16
    8526:	91 1f       	adc	r25, r17
    8528:	08 95       	ret

0000852a <__cmpdi2_s8>:
    852a:	00 24       	eor	r0, r0
    852c:	a7 fd       	sbrc	r26, 7
    852e:	00 94       	com	r0
    8530:	2a 17       	cp	r18, r26
    8532:	30 05       	cpc	r19, r0
    8534:	40 05       	cpc	r20, r0
    8536:	50 05       	cpc	r21, r0
    8538:	60 05       	cpc	r22, r0
    853a:	70 05       	cpc	r23, r0
    853c:	80 05       	cpc	r24, r0
    853e:	90 05       	cpc	r25, r0
    8540:	08 95       	ret

00008542 <dtostrf>:
    8542:	ef 92       	push	r14
    8544:	0f 93       	push	r16
    8546:	1f 93       	push	r17
    8548:	cf 93       	push	r28
    854a:	df 93       	push	r29
    854c:	e8 01       	movw	r28, r16
    854e:	47 fd       	sbrc	r20, 7
    8550:	02 c0       	rjmp	.+4      	; 0x8556 <dtostrf+0x14>
    8552:	34 e0       	ldi	r19, 0x04	; 4
    8554:	01 c0       	rjmp	.+2      	; 0x8558 <dtostrf+0x16>
    8556:	34 e1       	ldi	r19, 0x14	; 20
    8558:	04 2e       	mov	r0, r20
    855a:	00 0c       	add	r0, r0
    855c:	55 0b       	sbc	r21, r21
    855e:	57 ff       	sbrs	r21, 7
    8560:	03 c0       	rjmp	.+6      	; 0x8568 <dtostrf+0x26>
    8562:	51 95       	neg	r21
    8564:	41 95       	neg	r20
    8566:	51 09       	sbc	r21, r1
    8568:	e3 2e       	mov	r14, r19
    856a:	02 2f       	mov	r16, r18
    856c:	24 2f       	mov	r18, r20
    856e:	ae 01       	movw	r20, r28
    8570:	a1 d2       	rcall	.+1346   	; 0x8ab4 <dtoa_prf>
    8572:	ce 01       	movw	r24, r28
    8574:	df 91       	pop	r29
    8576:	cf 91       	pop	r28
    8578:	1f 91       	pop	r17
    857a:	0f 91       	pop	r16
    857c:	ef 90       	pop	r14
    857e:	08 95       	ret

00008580 <malloc>:
    8580:	0f 93       	push	r16
    8582:	1f 93       	push	r17
    8584:	cf 93       	push	r28
    8586:	df 93       	push	r29
    8588:	82 30       	cpi	r24, 0x02	; 2
    858a:	91 05       	cpc	r25, r1
    858c:	10 f4       	brcc	.+4      	; 0x8592 <malloc+0x12>
    858e:	82 e0       	ldi	r24, 0x02	; 2
    8590:	90 e0       	ldi	r25, 0x00	; 0
    8592:	e0 91 f7 0d 	lds	r30, 0x0DF7	; 0x800df7 <__flp>
    8596:	f0 91 f8 0d 	lds	r31, 0x0DF8	; 0x800df8 <__flp+0x1>
    859a:	20 e0       	ldi	r18, 0x00	; 0
    859c:	30 e0       	ldi	r19, 0x00	; 0
    859e:	a0 e0       	ldi	r26, 0x00	; 0
    85a0:	b0 e0       	ldi	r27, 0x00	; 0
    85a2:	30 97       	sbiw	r30, 0x00	; 0
    85a4:	19 f1       	breq	.+70     	; 0x85ec <malloc+0x6c>
    85a6:	40 81       	ld	r20, Z
    85a8:	51 81       	ldd	r21, Z+1	; 0x01
    85aa:	02 81       	ldd	r16, Z+2	; 0x02
    85ac:	13 81       	ldd	r17, Z+3	; 0x03
    85ae:	48 17       	cp	r20, r24
    85b0:	59 07       	cpc	r21, r25
    85b2:	c8 f0       	brcs	.+50     	; 0x85e6 <malloc+0x66>
    85b4:	84 17       	cp	r24, r20
    85b6:	95 07       	cpc	r25, r21
    85b8:	69 f4       	brne	.+26     	; 0x85d4 <malloc+0x54>
    85ba:	10 97       	sbiw	r26, 0x00	; 0
    85bc:	31 f0       	breq	.+12     	; 0x85ca <malloc+0x4a>
    85be:	12 96       	adiw	r26, 0x02	; 2
    85c0:	0c 93       	st	X, r16
    85c2:	12 97       	sbiw	r26, 0x02	; 2
    85c4:	13 96       	adiw	r26, 0x03	; 3
    85c6:	1c 93       	st	X, r17
    85c8:	27 c0       	rjmp	.+78     	; 0x8618 <malloc+0x98>
    85ca:	00 93 f7 0d 	sts	0x0DF7, r16	; 0x800df7 <__flp>
    85ce:	10 93 f8 0d 	sts	0x0DF8, r17	; 0x800df8 <__flp+0x1>
    85d2:	22 c0       	rjmp	.+68     	; 0x8618 <malloc+0x98>
    85d4:	21 15       	cp	r18, r1
    85d6:	31 05       	cpc	r19, r1
    85d8:	19 f0       	breq	.+6      	; 0x85e0 <malloc+0x60>
    85da:	42 17       	cp	r20, r18
    85dc:	53 07       	cpc	r21, r19
    85de:	18 f4       	brcc	.+6      	; 0x85e6 <malloc+0x66>
    85e0:	9a 01       	movw	r18, r20
    85e2:	bd 01       	movw	r22, r26
    85e4:	ef 01       	movw	r28, r30
    85e6:	df 01       	movw	r26, r30
    85e8:	f8 01       	movw	r30, r16
    85ea:	db cf       	rjmp	.-74     	; 0x85a2 <malloc+0x22>
    85ec:	21 15       	cp	r18, r1
    85ee:	31 05       	cpc	r19, r1
    85f0:	f9 f0       	breq	.+62     	; 0x8630 <malloc+0xb0>
    85f2:	28 1b       	sub	r18, r24
    85f4:	39 0b       	sbc	r19, r25
    85f6:	24 30       	cpi	r18, 0x04	; 4
    85f8:	31 05       	cpc	r19, r1
    85fa:	80 f4       	brcc	.+32     	; 0x861c <malloc+0x9c>
    85fc:	8a 81       	ldd	r24, Y+2	; 0x02
    85fe:	9b 81       	ldd	r25, Y+3	; 0x03
    8600:	61 15       	cp	r22, r1
    8602:	71 05       	cpc	r23, r1
    8604:	21 f0       	breq	.+8      	; 0x860e <malloc+0x8e>
    8606:	fb 01       	movw	r30, r22
    8608:	93 83       	std	Z+3, r25	; 0x03
    860a:	82 83       	std	Z+2, r24	; 0x02
    860c:	04 c0       	rjmp	.+8      	; 0x8616 <malloc+0x96>
    860e:	90 93 f8 0d 	sts	0x0DF8, r25	; 0x800df8 <__flp+0x1>
    8612:	80 93 f7 0d 	sts	0x0DF7, r24	; 0x800df7 <__flp>
    8616:	fe 01       	movw	r30, r28
    8618:	32 96       	adiw	r30, 0x02	; 2
    861a:	44 c0       	rjmp	.+136    	; 0x86a4 <malloc+0x124>
    861c:	fe 01       	movw	r30, r28
    861e:	e2 0f       	add	r30, r18
    8620:	f3 1f       	adc	r31, r19
    8622:	81 93       	st	Z+, r24
    8624:	91 93       	st	Z+, r25
    8626:	22 50       	subi	r18, 0x02	; 2
    8628:	31 09       	sbc	r19, r1
    862a:	39 83       	std	Y+1, r19	; 0x01
    862c:	28 83       	st	Y, r18
    862e:	3a c0       	rjmp	.+116    	; 0x86a4 <malloc+0x124>
    8630:	20 91 f5 0d 	lds	r18, 0x0DF5	; 0x800df5 <__brkval>
    8634:	30 91 f6 0d 	lds	r19, 0x0DF6	; 0x800df6 <__brkval+0x1>
    8638:	23 2b       	or	r18, r19
    863a:	41 f4       	brne	.+16     	; 0x864c <malloc+0xcc>
    863c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    8640:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    8644:	30 93 f6 0d 	sts	0x0DF6, r19	; 0x800df6 <__brkval+0x1>
    8648:	20 93 f5 0d 	sts	0x0DF5, r18	; 0x800df5 <__brkval>
    864c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    8650:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    8654:	21 15       	cp	r18, r1
    8656:	31 05       	cpc	r19, r1
    8658:	41 f4       	brne	.+16     	; 0x866a <malloc+0xea>
    865a:	2d b7       	in	r18, 0x3d	; 61
    865c:	3e b7       	in	r19, 0x3e	; 62
    865e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    8662:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    8666:	24 1b       	sub	r18, r20
    8668:	35 0b       	sbc	r19, r21
    866a:	e0 91 f5 0d 	lds	r30, 0x0DF5	; 0x800df5 <__brkval>
    866e:	f0 91 f6 0d 	lds	r31, 0x0DF6	; 0x800df6 <__brkval+0x1>
    8672:	e2 17       	cp	r30, r18
    8674:	f3 07       	cpc	r31, r19
    8676:	a0 f4       	brcc	.+40     	; 0x86a0 <malloc+0x120>
    8678:	2e 1b       	sub	r18, r30
    867a:	3f 0b       	sbc	r19, r31
    867c:	28 17       	cp	r18, r24
    867e:	39 07       	cpc	r19, r25
    8680:	78 f0       	brcs	.+30     	; 0x86a0 <malloc+0x120>
    8682:	ac 01       	movw	r20, r24
    8684:	4e 5f       	subi	r20, 0xFE	; 254
    8686:	5f 4f       	sbci	r21, 0xFF	; 255
    8688:	24 17       	cp	r18, r20
    868a:	35 07       	cpc	r19, r21
    868c:	48 f0       	brcs	.+18     	; 0x86a0 <malloc+0x120>
    868e:	4e 0f       	add	r20, r30
    8690:	5f 1f       	adc	r21, r31
    8692:	50 93 f6 0d 	sts	0x0DF6, r21	; 0x800df6 <__brkval+0x1>
    8696:	40 93 f5 0d 	sts	0x0DF5, r20	; 0x800df5 <__brkval>
    869a:	81 93       	st	Z+, r24
    869c:	91 93       	st	Z+, r25
    869e:	02 c0       	rjmp	.+4      	; 0x86a4 <malloc+0x124>
    86a0:	e0 e0       	ldi	r30, 0x00	; 0
    86a2:	f0 e0       	ldi	r31, 0x00	; 0
    86a4:	cf 01       	movw	r24, r30
    86a6:	df 91       	pop	r29
    86a8:	cf 91       	pop	r28
    86aa:	1f 91       	pop	r17
    86ac:	0f 91       	pop	r16
    86ae:	08 95       	ret

000086b0 <free>:
    86b0:	cf 93       	push	r28
    86b2:	df 93       	push	r29
    86b4:	00 97       	sbiw	r24, 0x00	; 0
    86b6:	09 f4       	brne	.+2      	; 0x86ba <free+0xa>
    86b8:	81 c0       	rjmp	.+258    	; 0x87bc <free+0x10c>
    86ba:	fc 01       	movw	r30, r24
    86bc:	32 97       	sbiw	r30, 0x02	; 2
    86be:	13 82       	std	Z+3, r1	; 0x03
    86c0:	12 82       	std	Z+2, r1	; 0x02
    86c2:	a0 91 f7 0d 	lds	r26, 0x0DF7	; 0x800df7 <__flp>
    86c6:	b0 91 f8 0d 	lds	r27, 0x0DF8	; 0x800df8 <__flp+0x1>
    86ca:	10 97       	sbiw	r26, 0x00	; 0
    86cc:	81 f4       	brne	.+32     	; 0x86ee <free+0x3e>
    86ce:	20 81       	ld	r18, Z
    86d0:	31 81       	ldd	r19, Z+1	; 0x01
    86d2:	82 0f       	add	r24, r18
    86d4:	93 1f       	adc	r25, r19
    86d6:	20 91 f5 0d 	lds	r18, 0x0DF5	; 0x800df5 <__brkval>
    86da:	30 91 f6 0d 	lds	r19, 0x0DF6	; 0x800df6 <__brkval+0x1>
    86de:	28 17       	cp	r18, r24
    86e0:	39 07       	cpc	r19, r25
    86e2:	51 f5       	brne	.+84     	; 0x8738 <free+0x88>
    86e4:	f0 93 f6 0d 	sts	0x0DF6, r31	; 0x800df6 <__brkval+0x1>
    86e8:	e0 93 f5 0d 	sts	0x0DF5, r30	; 0x800df5 <__brkval>
    86ec:	67 c0       	rjmp	.+206    	; 0x87bc <free+0x10c>
    86ee:	ed 01       	movw	r28, r26
    86f0:	20 e0       	ldi	r18, 0x00	; 0
    86f2:	30 e0       	ldi	r19, 0x00	; 0
    86f4:	ce 17       	cp	r28, r30
    86f6:	df 07       	cpc	r29, r31
    86f8:	40 f4       	brcc	.+16     	; 0x870a <free+0x5a>
    86fa:	4a 81       	ldd	r20, Y+2	; 0x02
    86fc:	5b 81       	ldd	r21, Y+3	; 0x03
    86fe:	9e 01       	movw	r18, r28
    8700:	41 15       	cp	r20, r1
    8702:	51 05       	cpc	r21, r1
    8704:	f1 f0       	breq	.+60     	; 0x8742 <free+0x92>
    8706:	ea 01       	movw	r28, r20
    8708:	f5 cf       	rjmp	.-22     	; 0x86f4 <free+0x44>
    870a:	d3 83       	std	Z+3, r29	; 0x03
    870c:	c2 83       	std	Z+2, r28	; 0x02
    870e:	40 81       	ld	r20, Z
    8710:	51 81       	ldd	r21, Z+1	; 0x01
    8712:	84 0f       	add	r24, r20
    8714:	95 1f       	adc	r25, r21
    8716:	c8 17       	cp	r28, r24
    8718:	d9 07       	cpc	r29, r25
    871a:	59 f4       	brne	.+22     	; 0x8732 <free+0x82>
    871c:	88 81       	ld	r24, Y
    871e:	99 81       	ldd	r25, Y+1	; 0x01
    8720:	84 0f       	add	r24, r20
    8722:	95 1f       	adc	r25, r21
    8724:	02 96       	adiw	r24, 0x02	; 2
    8726:	91 83       	std	Z+1, r25	; 0x01
    8728:	80 83       	st	Z, r24
    872a:	8a 81       	ldd	r24, Y+2	; 0x02
    872c:	9b 81       	ldd	r25, Y+3	; 0x03
    872e:	93 83       	std	Z+3, r25	; 0x03
    8730:	82 83       	std	Z+2, r24	; 0x02
    8732:	21 15       	cp	r18, r1
    8734:	31 05       	cpc	r19, r1
    8736:	29 f4       	brne	.+10     	; 0x8742 <free+0x92>
    8738:	f0 93 f8 0d 	sts	0x0DF8, r31	; 0x800df8 <__flp+0x1>
    873c:	e0 93 f7 0d 	sts	0x0DF7, r30	; 0x800df7 <__flp>
    8740:	3d c0       	rjmp	.+122    	; 0x87bc <free+0x10c>
    8742:	e9 01       	movw	r28, r18
    8744:	fb 83       	std	Y+3, r31	; 0x03
    8746:	ea 83       	std	Y+2, r30	; 0x02
    8748:	49 91       	ld	r20, Y+
    874a:	59 91       	ld	r21, Y+
    874c:	c4 0f       	add	r28, r20
    874e:	d5 1f       	adc	r29, r21
    8750:	ec 17       	cp	r30, r28
    8752:	fd 07       	cpc	r31, r29
    8754:	61 f4       	brne	.+24     	; 0x876e <free+0xbe>
    8756:	80 81       	ld	r24, Z
    8758:	91 81       	ldd	r25, Z+1	; 0x01
    875a:	84 0f       	add	r24, r20
    875c:	95 1f       	adc	r25, r21
    875e:	02 96       	adiw	r24, 0x02	; 2
    8760:	e9 01       	movw	r28, r18
    8762:	99 83       	std	Y+1, r25	; 0x01
    8764:	88 83       	st	Y, r24
    8766:	82 81       	ldd	r24, Z+2	; 0x02
    8768:	93 81       	ldd	r25, Z+3	; 0x03
    876a:	9b 83       	std	Y+3, r25	; 0x03
    876c:	8a 83       	std	Y+2, r24	; 0x02
    876e:	e0 e0       	ldi	r30, 0x00	; 0
    8770:	f0 e0       	ldi	r31, 0x00	; 0
    8772:	12 96       	adiw	r26, 0x02	; 2
    8774:	8d 91       	ld	r24, X+
    8776:	9c 91       	ld	r25, X
    8778:	13 97       	sbiw	r26, 0x03	; 3
    877a:	00 97       	sbiw	r24, 0x00	; 0
    877c:	19 f0       	breq	.+6      	; 0x8784 <free+0xd4>
    877e:	fd 01       	movw	r30, r26
    8780:	dc 01       	movw	r26, r24
    8782:	f7 cf       	rjmp	.-18     	; 0x8772 <free+0xc2>
    8784:	8d 91       	ld	r24, X+
    8786:	9c 91       	ld	r25, X
    8788:	11 97       	sbiw	r26, 0x01	; 1
    878a:	9d 01       	movw	r18, r26
    878c:	2e 5f       	subi	r18, 0xFE	; 254
    878e:	3f 4f       	sbci	r19, 0xFF	; 255
    8790:	82 0f       	add	r24, r18
    8792:	93 1f       	adc	r25, r19
    8794:	20 91 f5 0d 	lds	r18, 0x0DF5	; 0x800df5 <__brkval>
    8798:	30 91 f6 0d 	lds	r19, 0x0DF6	; 0x800df6 <__brkval+0x1>
    879c:	28 17       	cp	r18, r24
    879e:	39 07       	cpc	r19, r25
    87a0:	69 f4       	brne	.+26     	; 0x87bc <free+0x10c>
    87a2:	30 97       	sbiw	r30, 0x00	; 0
    87a4:	29 f4       	brne	.+10     	; 0x87b0 <free+0x100>
    87a6:	10 92 f8 0d 	sts	0x0DF8, r1	; 0x800df8 <__flp+0x1>
    87aa:	10 92 f7 0d 	sts	0x0DF7, r1	; 0x800df7 <__flp>
    87ae:	02 c0       	rjmp	.+4      	; 0x87b4 <free+0x104>
    87b0:	13 82       	std	Z+3, r1	; 0x03
    87b2:	12 82       	std	Z+2, r1	; 0x02
    87b4:	b0 93 f6 0d 	sts	0x0DF6, r27	; 0x800df6 <__brkval+0x1>
    87b8:	a0 93 f5 0d 	sts	0x0DF5, r26	; 0x800df5 <__brkval>
    87bc:	df 91       	pop	r29
    87be:	cf 91       	pop	r28
    87c0:	08 95       	ret

000087c2 <realloc>:
    87c2:	6f 92       	push	r6
    87c4:	7f 92       	push	r7
    87c6:	8f 92       	push	r8
    87c8:	9f 92       	push	r9
    87ca:	af 92       	push	r10
    87cc:	bf 92       	push	r11
    87ce:	cf 92       	push	r12
    87d0:	df 92       	push	r13
    87d2:	ef 92       	push	r14
    87d4:	ff 92       	push	r15
    87d6:	0f 93       	push	r16
    87d8:	1f 93       	push	r17
    87da:	cf 93       	push	r28
    87dc:	df 93       	push	r29
    87de:	00 97       	sbiw	r24, 0x00	; 0
    87e0:	81 f4       	brne	.+32     	; 0x8802 <realloc+0x40>
    87e2:	cb 01       	movw	r24, r22
    87e4:	df 91       	pop	r29
    87e6:	cf 91       	pop	r28
    87e8:	1f 91       	pop	r17
    87ea:	0f 91       	pop	r16
    87ec:	ff 90       	pop	r15
    87ee:	ef 90       	pop	r14
    87f0:	df 90       	pop	r13
    87f2:	cf 90       	pop	r12
    87f4:	bf 90       	pop	r11
    87f6:	af 90       	pop	r10
    87f8:	9f 90       	pop	r9
    87fa:	8f 90       	pop	r8
    87fc:	7f 90       	pop	r7
    87fe:	6f 90       	pop	r6
    8800:	bf ce       	rjmp	.-642    	; 0x8580 <malloc>
    8802:	fc 01       	movw	r30, r24
    8804:	e6 0f       	add	r30, r22
    8806:	f7 1f       	adc	r31, r23
    8808:	9c 01       	movw	r18, r24
    880a:	22 50       	subi	r18, 0x02	; 2
    880c:	31 09       	sbc	r19, r1
    880e:	e2 17       	cp	r30, r18
    8810:	f3 07       	cpc	r31, r19
    8812:	08 f4       	brcc	.+2      	; 0x8816 <realloc+0x54>
    8814:	a5 c0       	rjmp	.+330    	; 0x8960 <realloc+0x19e>
    8816:	ec 01       	movw	r28, r24
    8818:	d9 01       	movw	r26, r18
    881a:	0d 91       	ld	r16, X+
    881c:	1c 91       	ld	r17, X
    881e:	11 97       	sbiw	r26, 0x01	; 1
    8820:	06 17       	cp	r16, r22
    8822:	17 07       	cpc	r17, r23
    8824:	a8 f0       	brcs	.+42     	; 0x8850 <realloc+0x8e>
    8826:	05 30       	cpi	r16, 0x05	; 5
    8828:	11 05       	cpc	r17, r1
    882a:	08 f4       	brcc	.+2      	; 0x882e <realloc+0x6c>
    882c:	97 c0       	rjmp	.+302    	; 0x895c <realloc+0x19a>
    882e:	c8 01       	movw	r24, r16
    8830:	04 97       	sbiw	r24, 0x04	; 4
    8832:	86 17       	cp	r24, r22
    8834:	97 07       	cpc	r25, r23
    8836:	08 f4       	brcc	.+2      	; 0x883a <realloc+0x78>
    8838:	91 c0       	rjmp	.+290    	; 0x895c <realloc+0x19a>
    883a:	02 50       	subi	r16, 0x02	; 2
    883c:	11 09       	sbc	r17, r1
    883e:	06 1b       	sub	r16, r22
    8840:	17 0b       	sbc	r17, r23
    8842:	01 93       	st	Z+, r16
    8844:	11 93       	st	Z+, r17
    8846:	6d 93       	st	X+, r22
    8848:	7c 93       	st	X, r23
    884a:	cf 01       	movw	r24, r30
    884c:	31 df       	rcall	.-414    	; 0x86b0 <free>
    884e:	86 c0       	rjmp	.+268    	; 0x895c <realloc+0x19a>
    8850:	5b 01       	movw	r10, r22
    8852:	a0 1a       	sub	r10, r16
    8854:	b1 0a       	sbc	r11, r17
    8856:	4c 01       	movw	r8, r24
    8858:	80 0e       	add	r8, r16
    885a:	91 1e       	adc	r9, r17
    885c:	a0 91 f7 0d 	lds	r26, 0x0DF7	; 0x800df7 <__flp>
    8860:	b0 91 f8 0d 	lds	r27, 0x0DF8	; 0x800df8 <__flp+0x1>
    8864:	61 2c       	mov	r6, r1
    8866:	71 2c       	mov	r7, r1
    8868:	e1 2c       	mov	r14, r1
    886a:	f1 2c       	mov	r15, r1
    886c:	10 97       	sbiw	r26, 0x00	; 0
    886e:	09 f4       	brne	.+2      	; 0x8872 <realloc+0xb0>
    8870:	46 c0       	rjmp	.+140    	; 0x88fe <realloc+0x13c>
    8872:	8d 91       	ld	r24, X+
    8874:	9c 91       	ld	r25, X
    8876:	11 97       	sbiw	r26, 0x01	; 1
    8878:	a8 15       	cp	r26, r8
    887a:	b9 05       	cpc	r27, r9
    887c:	b1 f5       	brne	.+108    	; 0x88ea <realloc+0x128>
    887e:	6c 01       	movw	r12, r24
    8880:	42 e0       	ldi	r20, 0x02	; 2
    8882:	c4 0e       	add	r12, r20
    8884:	d1 1c       	adc	r13, r1
    8886:	ca 14       	cp	r12, r10
    8888:	db 04       	cpc	r13, r11
    888a:	78 f1       	brcs	.+94     	; 0x88ea <realloc+0x128>
    888c:	4c 01       	movw	r8, r24
    888e:	8a 18       	sub	r8, r10
    8890:	9b 08       	sbc	r9, r11
    8892:	64 01       	movw	r12, r8
    8894:	42 e0       	ldi	r20, 0x02	; 2
    8896:	c4 0e       	add	r12, r20
    8898:	d1 1c       	adc	r13, r1
    889a:	12 96       	adiw	r26, 0x02	; 2
    889c:	bc 90       	ld	r11, X
    889e:	12 97       	sbiw	r26, 0x02	; 2
    88a0:	13 96       	adiw	r26, 0x03	; 3
    88a2:	ac 91       	ld	r26, X
    88a4:	b5 e0       	ldi	r27, 0x05	; 5
    88a6:	cb 16       	cp	r12, r27
    88a8:	d1 04       	cpc	r13, r1
    88aa:	40 f0       	brcs	.+16     	; 0x88bc <realloc+0xfa>
    88ac:	b2 82       	std	Z+2, r11	; 0x02
    88ae:	a3 83       	std	Z+3, r26	; 0x03
    88b0:	91 82       	std	Z+1, r9	; 0x01
    88b2:	80 82       	st	Z, r8
    88b4:	d9 01       	movw	r26, r18
    88b6:	6d 93       	st	X+, r22
    88b8:	7c 93       	st	X, r23
    88ba:	09 c0       	rjmp	.+18     	; 0x88ce <realloc+0x10c>
    88bc:	0e 5f       	subi	r16, 0xFE	; 254
    88be:	1f 4f       	sbci	r17, 0xFF	; 255
    88c0:	80 0f       	add	r24, r16
    88c2:	91 1f       	adc	r25, r17
    88c4:	f9 01       	movw	r30, r18
    88c6:	91 83       	std	Z+1, r25	; 0x01
    88c8:	80 83       	st	Z, r24
    88ca:	eb 2d       	mov	r30, r11
    88cc:	fa 2f       	mov	r31, r26
    88ce:	e1 14       	cp	r14, r1
    88d0:	f1 04       	cpc	r15, r1
    88d2:	31 f0       	breq	.+12     	; 0x88e0 <realloc+0x11e>
    88d4:	d7 01       	movw	r26, r14
    88d6:	13 96       	adiw	r26, 0x03	; 3
    88d8:	fc 93       	st	X, r31
    88da:	ee 93       	st	-X, r30
    88dc:	12 97       	sbiw	r26, 0x02	; 2
    88de:	3e c0       	rjmp	.+124    	; 0x895c <realloc+0x19a>
    88e0:	f0 93 f8 0d 	sts	0x0DF8, r31	; 0x800df8 <__flp+0x1>
    88e4:	e0 93 f7 0d 	sts	0x0DF7, r30	; 0x800df7 <__flp>
    88e8:	39 c0       	rjmp	.+114    	; 0x895c <realloc+0x19a>
    88ea:	68 16       	cp	r6, r24
    88ec:	79 06       	cpc	r7, r25
    88ee:	08 f4       	brcc	.+2      	; 0x88f2 <realloc+0x130>
    88f0:	3c 01       	movw	r6, r24
    88f2:	7d 01       	movw	r14, r26
    88f4:	12 96       	adiw	r26, 0x02	; 2
    88f6:	0d 90       	ld	r0, X+
    88f8:	bc 91       	ld	r27, X
    88fa:	a0 2d       	mov	r26, r0
    88fc:	b7 cf       	rjmp	.-146    	; 0x886c <realloc+0xaa>
    88fe:	80 91 f5 0d 	lds	r24, 0x0DF5	; 0x800df5 <__brkval>
    8902:	90 91 f6 0d 	lds	r25, 0x0DF6	; 0x800df6 <__brkval+0x1>
    8906:	88 16       	cp	r8, r24
    8908:	99 06       	cpc	r9, r25
    890a:	e1 f4       	brne	.+56     	; 0x8944 <realloc+0x182>
    890c:	66 16       	cp	r6, r22
    890e:	77 06       	cpc	r7, r23
    8910:	c8 f4       	brcc	.+50     	; 0x8944 <realloc+0x182>
    8912:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    8916:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    891a:	00 97       	sbiw	r24, 0x00	; 0
    891c:	41 f4       	brne	.+16     	; 0x892e <realloc+0x16c>
    891e:	8d b7       	in	r24, 0x3d	; 61
    8920:	9e b7       	in	r25, 0x3e	; 62
    8922:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    8926:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    892a:	84 1b       	sub	r24, r20
    892c:	95 0b       	sbc	r25, r21
    892e:	e8 17       	cp	r30, r24
    8930:	f9 07       	cpc	r31, r25
    8932:	b0 f4       	brcc	.+44     	; 0x8960 <realloc+0x19e>
    8934:	f0 93 f6 0d 	sts	0x0DF6, r31	; 0x800df6 <__brkval+0x1>
    8938:	e0 93 f5 0d 	sts	0x0DF5, r30	; 0x800df5 <__brkval>
    893c:	f9 01       	movw	r30, r18
    893e:	71 83       	std	Z+1, r23	; 0x01
    8940:	60 83       	st	Z, r22
    8942:	0c c0       	rjmp	.+24     	; 0x895c <realloc+0x19a>
    8944:	cb 01       	movw	r24, r22
    8946:	1c de       	rcall	.-968    	; 0x8580 <malloc>
    8948:	7c 01       	movw	r14, r24
    894a:	00 97       	sbiw	r24, 0x00	; 0
    894c:	49 f0       	breq	.+18     	; 0x8960 <realloc+0x19e>
    894e:	a8 01       	movw	r20, r16
    8950:	be 01       	movw	r22, r28
    8952:	2c d0       	rcall	.+88     	; 0x89ac <memcpy>
    8954:	ce 01       	movw	r24, r28
    8956:	ac de       	rcall	.-680    	; 0x86b0 <free>
    8958:	c7 01       	movw	r24, r14
    895a:	04 c0       	rjmp	.+8      	; 0x8964 <realloc+0x1a2>
    895c:	ce 01       	movw	r24, r28
    895e:	02 c0       	rjmp	.+4      	; 0x8964 <realloc+0x1a2>
    8960:	80 e0       	ldi	r24, 0x00	; 0
    8962:	90 e0       	ldi	r25, 0x00	; 0
    8964:	df 91       	pop	r29
    8966:	cf 91       	pop	r28
    8968:	1f 91       	pop	r17
    896a:	0f 91       	pop	r16
    896c:	ff 90       	pop	r15
    896e:	ef 90       	pop	r14
    8970:	df 90       	pop	r13
    8972:	cf 90       	pop	r12
    8974:	bf 90       	pop	r11
    8976:	af 90       	pop	r10
    8978:	9f 90       	pop	r9
    897a:	8f 90       	pop	r8
    897c:	7f 90       	pop	r7
    897e:	6f 90       	pop	r6
    8980:	08 95       	ret

00008982 <abort>:
    8982:	81 e0       	ldi	r24, 0x01	; 1
    8984:	90 e0       	ldi	r25, 0x00	; 0
    8986:	f8 94       	cli
    8988:	f6 c2       	rjmp	.+1516   	; 0x8f76 <__do_global_dtors>

0000898a <isspace>:
    898a:	91 11       	cpse	r25, r1
    898c:	e1 c2       	rjmp	.+1474   	; 0x8f50 <__ctype_isfalse>
    898e:	80 32       	cpi	r24, 0x20	; 32
    8990:	19 f0       	breq	.+6      	; 0x8998 <isspace+0xe>
    8992:	89 50       	subi	r24, 0x09	; 9
    8994:	85 50       	subi	r24, 0x05	; 5
    8996:	d0 f7       	brcc	.-12     	; 0x898c <isspace+0x2>
    8998:	08 95       	ret

0000899a <memcpy_P>:
    899a:	fb 01       	movw	r30, r22
    899c:	dc 01       	movw	r26, r24
    899e:	02 c0       	rjmp	.+4      	; 0x89a4 <memcpy_P+0xa>
    89a0:	05 90       	lpm	r0, Z+
    89a2:	0d 92       	st	X+, r0
    89a4:	41 50       	subi	r20, 0x01	; 1
    89a6:	50 40       	sbci	r21, 0x00	; 0
    89a8:	d8 f7       	brcc	.-10     	; 0x89a0 <memcpy_P+0x6>
    89aa:	08 95       	ret

000089ac <memcpy>:
    89ac:	fb 01       	movw	r30, r22
    89ae:	dc 01       	movw	r26, r24
    89b0:	02 c0       	rjmp	.+4      	; 0x89b6 <memcpy+0xa>
    89b2:	01 90       	ld	r0, Z+
    89b4:	0d 92       	st	X+, r0
    89b6:	41 50       	subi	r20, 0x01	; 1
    89b8:	50 40       	sbci	r21, 0x00	; 0
    89ba:	d8 f7       	brcc	.-10     	; 0x89b2 <memcpy+0x6>
    89bc:	08 95       	ret

000089be <strcmp>:
    89be:	fb 01       	movw	r30, r22
    89c0:	dc 01       	movw	r26, r24
    89c2:	8d 91       	ld	r24, X+
    89c4:	01 90       	ld	r0, Z+
    89c6:	80 19       	sub	r24, r0
    89c8:	01 10       	cpse	r0, r1
    89ca:	d9 f3       	breq	.-10     	; 0x89c2 <strcmp+0x4>
    89cc:	99 0b       	sbc	r25, r25
    89ce:	08 95       	ret

000089d0 <strcpy>:
    89d0:	fb 01       	movw	r30, r22
    89d2:	dc 01       	movw	r26, r24
    89d4:	01 90       	ld	r0, Z+
    89d6:	0d 92       	st	X+, r0
    89d8:	00 20       	and	r0, r0
    89da:	e1 f7       	brne	.-8      	; 0x89d4 <strcpy+0x4>
    89dc:	08 95       	ret

000089de <strncmp>:
    89de:	fb 01       	movw	r30, r22
    89e0:	dc 01       	movw	r26, r24
    89e2:	41 50       	subi	r20, 0x01	; 1
    89e4:	50 40       	sbci	r21, 0x00	; 0
    89e6:	30 f0       	brcs	.+12     	; 0x89f4 <strncmp+0x16>
    89e8:	8d 91       	ld	r24, X+
    89ea:	01 90       	ld	r0, Z+
    89ec:	80 19       	sub	r24, r0
    89ee:	19 f4       	brne	.+6      	; 0x89f6 <strncmp+0x18>
    89f0:	00 20       	and	r0, r0
    89f2:	b9 f7       	brne	.-18     	; 0x89e2 <strncmp+0x4>
    89f4:	88 1b       	sub	r24, r24
    89f6:	99 0b       	sbc	r25, r25
    89f8:	08 95       	ret

000089fa <strncpy>:
    89fa:	fb 01       	movw	r30, r22
    89fc:	dc 01       	movw	r26, r24
    89fe:	41 50       	subi	r20, 0x01	; 1
    8a00:	50 40       	sbci	r21, 0x00	; 0
    8a02:	48 f0       	brcs	.+18     	; 0x8a16 <strncpy+0x1c>
    8a04:	01 90       	ld	r0, Z+
    8a06:	0d 92       	st	X+, r0
    8a08:	00 20       	and	r0, r0
    8a0a:	c9 f7       	brne	.-14     	; 0x89fe <strncpy+0x4>
    8a0c:	01 c0       	rjmp	.+2      	; 0x8a10 <strncpy+0x16>
    8a0e:	1d 92       	st	X+, r1
    8a10:	41 50       	subi	r20, 0x01	; 1
    8a12:	50 40       	sbci	r21, 0x00	; 0
    8a14:	e0 f7       	brcc	.-8      	; 0x8a0e <strncpy+0x14>
    8a16:	08 95       	ret

00008a18 <ultoa>:
    8a18:	25 32       	cpi	r18, 0x25	; 37
    8a1a:	31 05       	cpc	r19, r1
    8a1c:	18 f4       	brcc	.+6      	; 0x8a24 <ultoa+0xc>
    8a1e:	22 30       	cpi	r18, 0x02	; 2
    8a20:	08 f0       	brcs	.+2      	; 0x8a24 <ultoa+0xc>
    8a22:	04 c0       	rjmp	.+8      	; 0x8a2c <__ultoa_ncheck>
    8a24:	fa 01       	movw	r30, r20
    8a26:	10 82       	st	Z, r1
    8a28:	ca 01       	movw	r24, r20
    8a2a:	08 95       	ret

00008a2c <__ultoa_ncheck>:
    8a2c:	bb 27       	eor	r27, r27

00008a2e <__ultoa_common>:
    8a2e:	fa 01       	movw	r30, r20
    8a30:	a6 2f       	mov	r26, r22
    8a32:	62 17       	cp	r22, r18
    8a34:	71 05       	cpc	r23, r1
    8a36:	81 05       	cpc	r24, r1
    8a38:	91 05       	cpc	r25, r1
    8a3a:	33 0b       	sbc	r19, r19
    8a3c:	30 fb       	bst	r19, 0
    8a3e:	66 f0       	brts	.+24     	; 0x8a58 <__ultoa_common+0x2a>
    8a40:	aa 27       	eor	r26, r26
    8a42:	66 0f       	add	r22, r22
    8a44:	77 1f       	adc	r23, r23
    8a46:	88 1f       	adc	r24, r24
    8a48:	99 1f       	adc	r25, r25
    8a4a:	aa 1f       	adc	r26, r26
    8a4c:	a2 17       	cp	r26, r18
    8a4e:	10 f0       	brcs	.+4      	; 0x8a54 <__ultoa_common+0x26>
    8a50:	a2 1b       	sub	r26, r18
    8a52:	63 95       	inc	r22
    8a54:	38 50       	subi	r19, 0x08	; 8
    8a56:	a9 f7       	brne	.-22     	; 0x8a42 <__ultoa_common+0x14>
    8a58:	a0 5d       	subi	r26, 0xD0	; 208
    8a5a:	aa 33       	cpi	r26, 0x3A	; 58
    8a5c:	08 f0       	brcs	.+2      	; 0x8a60 <__ultoa_common+0x32>
    8a5e:	a9 5d       	subi	r26, 0xD9	; 217
    8a60:	a1 93       	st	Z+, r26
    8a62:	36 f7       	brtc	.-52     	; 0x8a30 <__ultoa_common+0x2>
    8a64:	b1 11       	cpse	r27, r1
    8a66:	b1 93       	st	Z+, r27
    8a68:	10 82       	st	Z, r1
    8a6a:	ca 01       	movw	r24, r20
    8a6c:	74 c2       	rjmp	.+1256   	; 0x8f56 <strrev>

00008a6e <utoa>:
    8a6e:	45 32       	cpi	r20, 0x25	; 37
    8a70:	51 05       	cpc	r21, r1
    8a72:	18 f4       	brcc	.+6      	; 0x8a7a <utoa+0xc>
    8a74:	42 30       	cpi	r20, 0x02	; 2
    8a76:	08 f0       	brcs	.+2      	; 0x8a7a <utoa+0xc>
    8a78:	04 c0       	rjmp	.+8      	; 0x8a82 <__utoa_ncheck>
    8a7a:	fb 01       	movw	r30, r22
    8a7c:	10 82       	st	Z, r1
    8a7e:	cb 01       	movw	r24, r22
    8a80:	08 95       	ret

00008a82 <__utoa_ncheck>:
    8a82:	bb 27       	eor	r27, r27

00008a84 <__utoa_common>:
    8a84:	fb 01       	movw	r30, r22
    8a86:	55 27       	eor	r21, r21
    8a88:	aa 27       	eor	r26, r26
    8a8a:	88 0f       	add	r24, r24
    8a8c:	99 1f       	adc	r25, r25
    8a8e:	aa 1f       	adc	r26, r26
    8a90:	a4 17       	cp	r26, r20
    8a92:	10 f0       	brcs	.+4      	; 0x8a98 <__utoa_common+0x14>
    8a94:	a4 1b       	sub	r26, r20
    8a96:	83 95       	inc	r24
    8a98:	50 51       	subi	r21, 0x10	; 16
    8a9a:	b9 f7       	brne	.-18     	; 0x8a8a <__utoa_common+0x6>
    8a9c:	a0 5d       	subi	r26, 0xD0	; 208
    8a9e:	aa 33       	cpi	r26, 0x3A	; 58
    8aa0:	08 f0       	brcs	.+2      	; 0x8aa4 <__utoa_common+0x20>
    8aa2:	a9 5d       	subi	r26, 0xD9	; 217
    8aa4:	a1 93       	st	Z+, r26
    8aa6:	00 97       	sbiw	r24, 0x00	; 0
    8aa8:	79 f7       	brne	.-34     	; 0x8a88 <__utoa_common+0x4>
    8aaa:	b1 11       	cpse	r27, r1
    8aac:	b1 93       	st	Z+, r27
    8aae:	11 92       	st	Z+, r1
    8ab0:	cb 01       	movw	r24, r22
    8ab2:	51 c2       	rjmp	.+1186   	; 0x8f56 <strrev>

00008ab4 <dtoa_prf>:
    8ab4:	8f 92       	push	r8
    8ab6:	9f 92       	push	r9
    8ab8:	af 92       	push	r10
    8aba:	bf 92       	push	r11
    8abc:	cf 92       	push	r12
    8abe:	df 92       	push	r13
    8ac0:	ef 92       	push	r14
    8ac2:	ff 92       	push	r15
    8ac4:	0f 93       	push	r16
    8ac6:	1f 93       	push	r17
    8ac8:	cf 93       	push	r28
    8aca:	df 93       	push	r29
    8acc:	cd b7       	in	r28, 0x3d	; 61
    8ace:	de b7       	in	r29, 0x3e	; 62
    8ad0:	29 97       	sbiw	r28, 0x09	; 9
    8ad2:	0f b6       	in	r0, 0x3f	; 63
    8ad4:	f8 94       	cli
    8ad6:	de bf       	out	0x3e, r29	; 62
    8ad8:	0f be       	out	0x3f, r0	; 63
    8ada:	cd bf       	out	0x3d, r28	; 61
    8adc:	6a 01       	movw	r12, r20
    8ade:	12 2f       	mov	r17, r18
    8ae0:	b0 2e       	mov	r11, r16
    8ae2:	2b e3       	ldi	r18, 0x3B	; 59
    8ae4:	20 17       	cp	r18, r16
    8ae6:	20 f0       	brcs	.+8      	; 0x8af0 <dtoa_prf+0x3c>
    8ae8:	ff 24       	eor	r15, r15
    8aea:	f3 94       	inc	r15
    8aec:	f0 0e       	add	r15, r16
    8aee:	02 c0       	rjmp	.+4      	; 0x8af4 <dtoa_prf+0x40>
    8af0:	2c e3       	ldi	r18, 0x3C	; 60
    8af2:	f2 2e       	mov	r15, r18
    8af4:	0f 2d       	mov	r16, r15
    8af6:	27 e0       	ldi	r18, 0x07	; 7
    8af8:	ae 01       	movw	r20, r28
    8afa:	4f 5f       	subi	r20, 0xFF	; 255
    8afc:	5f 4f       	sbci	r21, 0xFF	; 255
    8afe:	50 d1       	rcall	.+672    	; 0x8da0 <__ftoa_engine>
    8b00:	bc 01       	movw	r22, r24
    8b02:	49 81       	ldd	r20, Y+1	; 0x01
    8b04:	84 2f       	mov	r24, r20
    8b06:	89 70       	andi	r24, 0x09	; 9
    8b08:	81 30       	cpi	r24, 0x01	; 1
    8b0a:	31 f0       	breq	.+12     	; 0x8b18 <dtoa_prf+0x64>
    8b0c:	e1 fc       	sbrc	r14, 1
    8b0e:	06 c0       	rjmp	.+12     	; 0x8b1c <dtoa_prf+0x68>
    8b10:	e0 fe       	sbrs	r14, 0
    8b12:	06 c0       	rjmp	.+12     	; 0x8b20 <dtoa_prf+0x6c>
    8b14:	90 e2       	ldi	r25, 0x20	; 32
    8b16:	05 c0       	rjmp	.+10     	; 0x8b22 <dtoa_prf+0x6e>
    8b18:	9d e2       	ldi	r25, 0x2D	; 45
    8b1a:	03 c0       	rjmp	.+6      	; 0x8b22 <dtoa_prf+0x6e>
    8b1c:	9b e2       	ldi	r25, 0x2B	; 43
    8b1e:	01 c0       	rjmp	.+2      	; 0x8b22 <dtoa_prf+0x6e>
    8b20:	90 e0       	ldi	r25, 0x00	; 0
    8b22:	5e 2d       	mov	r21, r14
    8b24:	50 71       	andi	r21, 0x10	; 16
    8b26:	43 ff       	sbrs	r20, 3
    8b28:	3c c0       	rjmp	.+120    	; 0x8ba2 <dtoa_prf+0xee>
    8b2a:	91 11       	cpse	r25, r1
    8b2c:	02 c0       	rjmp	.+4      	; 0x8b32 <dtoa_prf+0x7e>
    8b2e:	83 e0       	ldi	r24, 0x03	; 3
    8b30:	01 c0       	rjmp	.+2      	; 0x8b34 <dtoa_prf+0x80>
    8b32:	84 e0       	ldi	r24, 0x04	; 4
    8b34:	81 17       	cp	r24, r17
    8b36:	18 f4       	brcc	.+6      	; 0x8b3e <dtoa_prf+0x8a>
    8b38:	21 2f       	mov	r18, r17
    8b3a:	28 1b       	sub	r18, r24
    8b3c:	01 c0       	rjmp	.+2      	; 0x8b40 <dtoa_prf+0x8c>
    8b3e:	20 e0       	ldi	r18, 0x00	; 0
    8b40:	51 11       	cpse	r21, r1
    8b42:	0b c0       	rjmp	.+22     	; 0x8b5a <dtoa_prf+0xa6>
    8b44:	f6 01       	movw	r30, r12
    8b46:	82 2f       	mov	r24, r18
    8b48:	30 e2       	ldi	r19, 0x20	; 32
    8b4a:	88 23       	and	r24, r24
    8b4c:	19 f0       	breq	.+6      	; 0x8b54 <dtoa_prf+0xa0>
    8b4e:	31 93       	st	Z+, r19
    8b50:	81 50       	subi	r24, 0x01	; 1
    8b52:	fb cf       	rjmp	.-10     	; 0x8b4a <dtoa_prf+0x96>
    8b54:	c2 0e       	add	r12, r18
    8b56:	d1 1c       	adc	r13, r1
    8b58:	20 e0       	ldi	r18, 0x00	; 0
    8b5a:	99 23       	and	r25, r25
    8b5c:	29 f0       	breq	.+10     	; 0x8b68 <dtoa_prf+0xb4>
    8b5e:	d6 01       	movw	r26, r12
    8b60:	9c 93       	st	X, r25
    8b62:	f6 01       	movw	r30, r12
    8b64:	31 96       	adiw	r30, 0x01	; 1
    8b66:	6f 01       	movw	r12, r30
    8b68:	c6 01       	movw	r24, r12
    8b6a:	03 96       	adiw	r24, 0x03	; 3
    8b6c:	e2 fe       	sbrs	r14, 2
    8b6e:	0a c0       	rjmp	.+20     	; 0x8b84 <dtoa_prf+0xd0>
    8b70:	3e e4       	ldi	r19, 0x4E	; 78
    8b72:	d6 01       	movw	r26, r12
    8b74:	3c 93       	st	X, r19
    8b76:	41 e4       	ldi	r20, 0x41	; 65
    8b78:	11 96       	adiw	r26, 0x01	; 1
    8b7a:	4c 93       	st	X, r20
    8b7c:	11 97       	sbiw	r26, 0x01	; 1
    8b7e:	12 96       	adiw	r26, 0x02	; 2
    8b80:	3c 93       	st	X, r19
    8b82:	06 c0       	rjmp	.+12     	; 0x8b90 <dtoa_prf+0xdc>
    8b84:	3e e6       	ldi	r19, 0x6E	; 110
    8b86:	f6 01       	movw	r30, r12
    8b88:	30 83       	st	Z, r19
    8b8a:	41 e6       	ldi	r20, 0x61	; 97
    8b8c:	41 83       	std	Z+1, r20	; 0x01
    8b8e:	32 83       	std	Z+2, r19	; 0x02
    8b90:	fc 01       	movw	r30, r24
    8b92:	32 2f       	mov	r19, r18
    8b94:	40 e2       	ldi	r20, 0x20	; 32
    8b96:	33 23       	and	r19, r19
    8b98:	09 f4       	brne	.+2      	; 0x8b9c <dtoa_prf+0xe8>
    8b9a:	42 c0       	rjmp	.+132    	; 0x8c20 <dtoa_prf+0x16c>
    8b9c:	41 93       	st	Z+, r20
    8b9e:	31 50       	subi	r19, 0x01	; 1
    8ba0:	fa cf       	rjmp	.-12     	; 0x8b96 <dtoa_prf+0xe2>
    8ba2:	42 ff       	sbrs	r20, 2
    8ba4:	44 c0       	rjmp	.+136    	; 0x8c2e <dtoa_prf+0x17a>
    8ba6:	91 11       	cpse	r25, r1
    8ba8:	02 c0       	rjmp	.+4      	; 0x8bae <dtoa_prf+0xfa>
    8baa:	83 e0       	ldi	r24, 0x03	; 3
    8bac:	01 c0       	rjmp	.+2      	; 0x8bb0 <dtoa_prf+0xfc>
    8bae:	84 e0       	ldi	r24, 0x04	; 4
    8bb0:	81 17       	cp	r24, r17
    8bb2:	18 f4       	brcc	.+6      	; 0x8bba <dtoa_prf+0x106>
    8bb4:	21 2f       	mov	r18, r17
    8bb6:	28 1b       	sub	r18, r24
    8bb8:	01 c0       	rjmp	.+2      	; 0x8bbc <dtoa_prf+0x108>
    8bba:	20 e0       	ldi	r18, 0x00	; 0
    8bbc:	51 11       	cpse	r21, r1
    8bbe:	0b c0       	rjmp	.+22     	; 0x8bd6 <dtoa_prf+0x122>
    8bc0:	f6 01       	movw	r30, r12
    8bc2:	82 2f       	mov	r24, r18
    8bc4:	30 e2       	ldi	r19, 0x20	; 32
    8bc6:	88 23       	and	r24, r24
    8bc8:	19 f0       	breq	.+6      	; 0x8bd0 <dtoa_prf+0x11c>
    8bca:	31 93       	st	Z+, r19
    8bcc:	81 50       	subi	r24, 0x01	; 1
    8bce:	fb cf       	rjmp	.-10     	; 0x8bc6 <dtoa_prf+0x112>
    8bd0:	c2 0e       	add	r12, r18
    8bd2:	d1 1c       	adc	r13, r1
    8bd4:	20 e0       	ldi	r18, 0x00	; 0
    8bd6:	99 23       	and	r25, r25
    8bd8:	29 f0       	breq	.+10     	; 0x8be4 <dtoa_prf+0x130>
    8bda:	d6 01       	movw	r26, r12
    8bdc:	9c 93       	st	X, r25
    8bde:	f6 01       	movw	r30, r12
    8be0:	31 96       	adiw	r30, 0x01	; 1
    8be2:	6f 01       	movw	r12, r30
    8be4:	c6 01       	movw	r24, r12
    8be6:	03 96       	adiw	r24, 0x03	; 3
    8be8:	e2 fe       	sbrs	r14, 2
    8bea:	0b c0       	rjmp	.+22     	; 0x8c02 <dtoa_prf+0x14e>
    8bec:	39 e4       	ldi	r19, 0x49	; 73
    8bee:	d6 01       	movw	r26, r12
    8bf0:	3c 93       	st	X, r19
    8bf2:	3e e4       	ldi	r19, 0x4E	; 78
    8bf4:	11 96       	adiw	r26, 0x01	; 1
    8bf6:	3c 93       	st	X, r19
    8bf8:	11 97       	sbiw	r26, 0x01	; 1
    8bfa:	36 e4       	ldi	r19, 0x46	; 70
    8bfc:	12 96       	adiw	r26, 0x02	; 2
    8bfe:	3c 93       	st	X, r19
    8c00:	07 c0       	rjmp	.+14     	; 0x8c10 <dtoa_prf+0x15c>
    8c02:	39 e6       	ldi	r19, 0x69	; 105
    8c04:	f6 01       	movw	r30, r12
    8c06:	30 83       	st	Z, r19
    8c08:	3e e6       	ldi	r19, 0x6E	; 110
    8c0a:	31 83       	std	Z+1, r19	; 0x01
    8c0c:	36 e6       	ldi	r19, 0x66	; 102
    8c0e:	32 83       	std	Z+2, r19	; 0x02
    8c10:	fc 01       	movw	r30, r24
    8c12:	32 2f       	mov	r19, r18
    8c14:	40 e2       	ldi	r20, 0x20	; 32
    8c16:	33 23       	and	r19, r19
    8c18:	19 f0       	breq	.+6      	; 0x8c20 <dtoa_prf+0x16c>
    8c1a:	41 93       	st	Z+, r20
    8c1c:	31 50       	subi	r19, 0x01	; 1
    8c1e:	fb cf       	rjmp	.-10     	; 0x8c16 <dtoa_prf+0x162>
    8c20:	fc 01       	movw	r30, r24
    8c22:	e2 0f       	add	r30, r18
    8c24:	f1 1d       	adc	r31, r1
    8c26:	10 82       	st	Z, r1
    8c28:	8e ef       	ldi	r24, 0xFE	; 254
    8c2a:	9f ef       	ldi	r25, 0xFF	; 255
    8c2c:	a6 c0       	rjmp	.+332    	; 0x8d7a <dtoa_prf+0x2c6>
    8c2e:	21 e0       	ldi	r18, 0x01	; 1
    8c30:	30 e0       	ldi	r19, 0x00	; 0
    8c32:	91 11       	cpse	r25, r1
    8c34:	02 c0       	rjmp	.+4      	; 0x8c3a <dtoa_prf+0x186>
    8c36:	20 e0       	ldi	r18, 0x00	; 0
    8c38:	30 e0       	ldi	r19, 0x00	; 0
    8c3a:	16 16       	cp	r1, r22
    8c3c:	17 06       	cpc	r1, r23
    8c3e:	1c f4       	brge	.+6      	; 0x8c46 <dtoa_prf+0x192>
    8c40:	fb 01       	movw	r30, r22
    8c42:	31 96       	adiw	r30, 0x01	; 1
    8c44:	02 c0       	rjmp	.+4      	; 0x8c4a <dtoa_prf+0x196>
    8c46:	e1 e0       	ldi	r30, 0x01	; 1
    8c48:	f0 e0       	ldi	r31, 0x00	; 0
    8c4a:	2e 0f       	add	r18, r30
    8c4c:	3f 1f       	adc	r19, r31
    8c4e:	bb 20       	and	r11, r11
    8c50:	21 f0       	breq	.+8      	; 0x8c5a <dtoa_prf+0x1a6>
    8c52:	eb 2d       	mov	r30, r11
    8c54:	f0 e0       	ldi	r31, 0x00	; 0
    8c56:	31 96       	adiw	r30, 0x01	; 1
    8c58:	02 c0       	rjmp	.+4      	; 0x8c5e <dtoa_prf+0x1aa>
    8c5a:	e0 e0       	ldi	r30, 0x00	; 0
    8c5c:	f0 e0       	ldi	r31, 0x00	; 0
    8c5e:	2e 0f       	add	r18, r30
    8c60:	3f 1f       	adc	r19, r31
    8c62:	e1 2f       	mov	r30, r17
    8c64:	f0 e0       	ldi	r31, 0x00	; 0
    8c66:	2e 17       	cp	r18, r30
    8c68:	3f 07       	cpc	r19, r31
    8c6a:	1c f4       	brge	.+6      	; 0x8c72 <dtoa_prf+0x1be>
    8c6c:	12 1b       	sub	r17, r18
    8c6e:	21 2f       	mov	r18, r17
    8c70:	01 c0       	rjmp	.+2      	; 0x8c74 <dtoa_prf+0x1c0>
    8c72:	20 e0       	ldi	r18, 0x00	; 0
    8c74:	8e 2d       	mov	r24, r14
    8c76:	88 71       	andi	r24, 0x18	; 24
    8c78:	59 f4       	brne	.+22     	; 0x8c90 <dtoa_prf+0x1dc>
    8c7a:	f6 01       	movw	r30, r12
    8c7c:	82 2f       	mov	r24, r18
    8c7e:	30 e2       	ldi	r19, 0x20	; 32
    8c80:	88 23       	and	r24, r24
    8c82:	19 f0       	breq	.+6      	; 0x8c8a <dtoa_prf+0x1d6>
    8c84:	31 93       	st	Z+, r19
    8c86:	81 50       	subi	r24, 0x01	; 1
    8c88:	fb cf       	rjmp	.-10     	; 0x8c80 <dtoa_prf+0x1cc>
    8c8a:	c2 0e       	add	r12, r18
    8c8c:	d1 1c       	adc	r13, r1
    8c8e:	20 e0       	ldi	r18, 0x00	; 0
    8c90:	99 23       	and	r25, r25
    8c92:	29 f0       	breq	.+10     	; 0x8c9e <dtoa_prf+0x1ea>
    8c94:	d6 01       	movw	r26, r12
    8c96:	9c 93       	st	X, r25
    8c98:	f6 01       	movw	r30, r12
    8c9a:	31 96       	adiw	r30, 0x01	; 1
    8c9c:	6f 01       	movw	r12, r30
    8c9e:	51 11       	cpse	r21, r1
    8ca0:	0b c0       	rjmp	.+22     	; 0x8cb8 <dtoa_prf+0x204>
    8ca2:	f6 01       	movw	r30, r12
    8ca4:	82 2f       	mov	r24, r18
    8ca6:	90 e3       	ldi	r25, 0x30	; 48
    8ca8:	88 23       	and	r24, r24
    8caa:	19 f0       	breq	.+6      	; 0x8cb2 <dtoa_prf+0x1fe>
    8cac:	91 93       	st	Z+, r25
    8cae:	81 50       	subi	r24, 0x01	; 1
    8cb0:	fb cf       	rjmp	.-10     	; 0x8ca8 <dtoa_prf+0x1f4>
    8cb2:	c2 0e       	add	r12, r18
    8cb4:	d1 1c       	adc	r13, r1
    8cb6:	20 e0       	ldi	r18, 0x00	; 0
    8cb8:	0f 2d       	mov	r16, r15
    8cba:	06 0f       	add	r16, r22
    8cbc:	9a 81       	ldd	r25, Y+2	; 0x02
    8cbe:	34 2f       	mov	r19, r20
    8cc0:	30 71       	andi	r19, 0x10	; 16
    8cc2:	44 ff       	sbrs	r20, 4
    8cc4:	03 c0       	rjmp	.+6      	; 0x8ccc <dtoa_prf+0x218>
    8cc6:	91 33       	cpi	r25, 0x31	; 49
    8cc8:	09 f4       	brne	.+2      	; 0x8ccc <dtoa_prf+0x218>
    8cca:	01 50       	subi	r16, 0x01	; 1
    8ccc:	10 16       	cp	r1, r16
    8cce:	24 f4       	brge	.+8      	; 0x8cd8 <dtoa_prf+0x224>
    8cd0:	09 30       	cpi	r16, 0x09	; 9
    8cd2:	18 f0       	brcs	.+6      	; 0x8cda <dtoa_prf+0x226>
    8cd4:	08 e0       	ldi	r16, 0x08	; 8
    8cd6:	01 c0       	rjmp	.+2      	; 0x8cda <dtoa_prf+0x226>
    8cd8:	01 e0       	ldi	r16, 0x01	; 1
    8cda:	ab 01       	movw	r20, r22
    8cdc:	77 ff       	sbrs	r23, 7
    8cde:	02 c0       	rjmp	.+4      	; 0x8ce4 <dtoa_prf+0x230>
    8ce0:	40 e0       	ldi	r20, 0x00	; 0
    8ce2:	50 e0       	ldi	r21, 0x00	; 0
    8ce4:	fb 01       	movw	r30, r22
    8ce6:	e4 1b       	sub	r30, r20
    8ce8:	f5 0b       	sbc	r31, r21
    8cea:	a1 e0       	ldi	r26, 0x01	; 1
    8cec:	b0 e0       	ldi	r27, 0x00	; 0
    8cee:	ac 0f       	add	r26, r28
    8cf0:	bd 1f       	adc	r27, r29
    8cf2:	ea 0f       	add	r30, r26
    8cf4:	fb 1f       	adc	r31, r27
    8cf6:	8e e2       	ldi	r24, 0x2E	; 46
    8cf8:	a8 2e       	mov	r10, r24
    8cfa:	4b 01       	movw	r8, r22
    8cfc:	80 1a       	sub	r8, r16
    8cfe:	91 08       	sbc	r9, r1
    8d00:	0b 2d       	mov	r16, r11
    8d02:	10 e0       	ldi	r17, 0x00	; 0
    8d04:	11 95       	neg	r17
    8d06:	01 95       	neg	r16
    8d08:	11 09       	sbc	r17, r1
    8d0a:	4f 3f       	cpi	r20, 0xFF	; 255
    8d0c:	bf ef       	ldi	r27, 0xFF	; 255
    8d0e:	5b 07       	cpc	r21, r27
    8d10:	21 f4       	brne	.+8      	; 0x8d1a <dtoa_prf+0x266>
    8d12:	d6 01       	movw	r26, r12
    8d14:	ac 92       	st	X, r10
    8d16:	11 96       	adiw	r26, 0x01	; 1
    8d18:	6d 01       	movw	r12, r26
    8d1a:	64 17       	cp	r22, r20
    8d1c:	75 07       	cpc	r23, r21
    8d1e:	2c f0       	brlt	.+10     	; 0x8d2a <dtoa_prf+0x276>
    8d20:	84 16       	cp	r8, r20
    8d22:	95 06       	cpc	r9, r21
    8d24:	14 f4       	brge	.+4      	; 0x8d2a <dtoa_prf+0x276>
    8d26:	81 81       	ldd	r24, Z+1	; 0x01
    8d28:	01 c0       	rjmp	.+2      	; 0x8d2c <dtoa_prf+0x278>
    8d2a:	80 e3       	ldi	r24, 0x30	; 48
    8d2c:	41 50       	subi	r20, 0x01	; 1
    8d2e:	51 09       	sbc	r21, r1
    8d30:	31 96       	adiw	r30, 0x01	; 1
    8d32:	d6 01       	movw	r26, r12
    8d34:	11 96       	adiw	r26, 0x01	; 1
    8d36:	7d 01       	movw	r14, r26
    8d38:	40 17       	cp	r20, r16
    8d3a:	51 07       	cpc	r21, r17
    8d3c:	24 f0       	brlt	.+8      	; 0x8d46 <dtoa_prf+0x292>
    8d3e:	d6 01       	movw	r26, r12
    8d40:	8c 93       	st	X, r24
    8d42:	67 01       	movw	r12, r14
    8d44:	e2 cf       	rjmp	.-60     	; 0x8d0a <dtoa_prf+0x256>
    8d46:	64 17       	cp	r22, r20
    8d48:	75 07       	cpc	r23, r21
    8d4a:	39 f4       	brne	.+14     	; 0x8d5a <dtoa_prf+0x2a6>
    8d4c:	96 33       	cpi	r25, 0x36	; 54
    8d4e:	20 f4       	brcc	.+8      	; 0x8d58 <dtoa_prf+0x2a4>
    8d50:	95 33       	cpi	r25, 0x35	; 53
    8d52:	19 f4       	brne	.+6      	; 0x8d5a <dtoa_prf+0x2a6>
    8d54:	31 11       	cpse	r19, r1
    8d56:	01 c0       	rjmp	.+2      	; 0x8d5a <dtoa_prf+0x2a6>
    8d58:	81 e3       	ldi	r24, 0x31	; 49
    8d5a:	f6 01       	movw	r30, r12
    8d5c:	80 83       	st	Z, r24
    8d5e:	f7 01       	movw	r30, r14
    8d60:	82 2f       	mov	r24, r18
    8d62:	90 e2       	ldi	r25, 0x20	; 32
    8d64:	88 23       	and	r24, r24
    8d66:	19 f0       	breq	.+6      	; 0x8d6e <dtoa_prf+0x2ba>
    8d68:	91 93       	st	Z+, r25
    8d6a:	81 50       	subi	r24, 0x01	; 1
    8d6c:	fb cf       	rjmp	.-10     	; 0x8d64 <dtoa_prf+0x2b0>
    8d6e:	f7 01       	movw	r30, r14
    8d70:	e2 0f       	add	r30, r18
    8d72:	f1 1d       	adc	r31, r1
    8d74:	10 82       	st	Z, r1
    8d76:	80 e0       	ldi	r24, 0x00	; 0
    8d78:	90 e0       	ldi	r25, 0x00	; 0
    8d7a:	29 96       	adiw	r28, 0x09	; 9
    8d7c:	0f b6       	in	r0, 0x3f	; 63
    8d7e:	f8 94       	cli
    8d80:	de bf       	out	0x3e, r29	; 62
    8d82:	0f be       	out	0x3f, r0	; 63
    8d84:	cd bf       	out	0x3d, r28	; 61
    8d86:	df 91       	pop	r29
    8d88:	cf 91       	pop	r28
    8d8a:	1f 91       	pop	r17
    8d8c:	0f 91       	pop	r16
    8d8e:	ff 90       	pop	r15
    8d90:	ef 90       	pop	r14
    8d92:	df 90       	pop	r13
    8d94:	cf 90       	pop	r12
    8d96:	bf 90       	pop	r11
    8d98:	af 90       	pop	r10
    8d9a:	9f 90       	pop	r9
    8d9c:	8f 90       	pop	r8
    8d9e:	08 95       	ret

00008da0 <__ftoa_engine>:
    8da0:	28 30       	cpi	r18, 0x08	; 8
    8da2:	08 f0       	brcs	.+2      	; 0x8da6 <__ftoa_engine+0x6>
    8da4:	27 e0       	ldi	r18, 0x07	; 7
    8da6:	33 27       	eor	r19, r19
    8da8:	da 01       	movw	r26, r20
    8daa:	99 0f       	add	r25, r25
    8dac:	31 1d       	adc	r19, r1
    8dae:	87 fd       	sbrc	r24, 7
    8db0:	91 60       	ori	r25, 0x01	; 1
    8db2:	00 96       	adiw	r24, 0x00	; 0
    8db4:	61 05       	cpc	r22, r1
    8db6:	71 05       	cpc	r23, r1
    8db8:	39 f4       	brne	.+14     	; 0x8dc8 <__ftoa_engine+0x28>
    8dba:	32 60       	ori	r19, 0x02	; 2
    8dbc:	2e 5f       	subi	r18, 0xFE	; 254
    8dbe:	3d 93       	st	X+, r19
    8dc0:	30 e3       	ldi	r19, 0x30	; 48
    8dc2:	2a 95       	dec	r18
    8dc4:	e1 f7       	brne	.-8      	; 0x8dbe <__ftoa_engine+0x1e>
    8dc6:	08 95       	ret
    8dc8:	9f 3f       	cpi	r25, 0xFF	; 255
    8dca:	30 f0       	brcs	.+12     	; 0x8dd8 <__ftoa_engine+0x38>
    8dcc:	80 38       	cpi	r24, 0x80	; 128
    8dce:	71 05       	cpc	r23, r1
    8dd0:	61 05       	cpc	r22, r1
    8dd2:	09 f0       	breq	.+2      	; 0x8dd6 <__ftoa_engine+0x36>
    8dd4:	3c 5f       	subi	r19, 0xFC	; 252
    8dd6:	3c 5f       	subi	r19, 0xFC	; 252
    8dd8:	3d 93       	st	X+, r19
    8dda:	91 30       	cpi	r25, 0x01	; 1
    8ddc:	08 f0       	brcs	.+2      	; 0x8de0 <__ftoa_engine+0x40>
    8dde:	80 68       	ori	r24, 0x80	; 128
    8de0:	91 1d       	adc	r25, r1
    8de2:	df 93       	push	r29
    8de4:	cf 93       	push	r28
    8de6:	1f 93       	push	r17
    8de8:	0f 93       	push	r16
    8dea:	ff 92       	push	r15
    8dec:	ef 92       	push	r14
    8dee:	19 2f       	mov	r17, r25
    8df0:	98 7f       	andi	r25, 0xF8	; 248
    8df2:	96 95       	lsr	r25
    8df4:	e9 2f       	mov	r30, r25
    8df6:	96 95       	lsr	r25
    8df8:	96 95       	lsr	r25
    8dfa:	e9 0f       	add	r30, r25
    8dfc:	ff 27       	eor	r31, r31
    8dfe:	ec 5d       	subi	r30, 0xDC	; 220
    8e00:	fe 4f       	sbci	r31, 0xFE	; 254
    8e02:	99 27       	eor	r25, r25
    8e04:	33 27       	eor	r19, r19
    8e06:	ee 24       	eor	r14, r14
    8e08:	ff 24       	eor	r15, r15
    8e0a:	a7 01       	movw	r20, r14
    8e0c:	e7 01       	movw	r28, r14
    8e0e:	05 90       	lpm	r0, Z+
    8e10:	08 94       	sec
    8e12:	07 94       	ror	r0
    8e14:	28 f4       	brcc	.+10     	; 0x8e20 <__ftoa_engine+0x80>
    8e16:	36 0f       	add	r19, r22
    8e18:	e7 1e       	adc	r14, r23
    8e1a:	f8 1e       	adc	r15, r24
    8e1c:	49 1f       	adc	r20, r25
    8e1e:	51 1d       	adc	r21, r1
    8e20:	66 0f       	add	r22, r22
    8e22:	77 1f       	adc	r23, r23
    8e24:	88 1f       	adc	r24, r24
    8e26:	99 1f       	adc	r25, r25
    8e28:	06 94       	lsr	r0
    8e2a:	a1 f7       	brne	.-24     	; 0x8e14 <__ftoa_engine+0x74>
    8e2c:	05 90       	lpm	r0, Z+
    8e2e:	07 94       	ror	r0
    8e30:	28 f4       	brcc	.+10     	; 0x8e3c <__ftoa_engine+0x9c>
    8e32:	e7 0e       	add	r14, r23
    8e34:	f8 1e       	adc	r15, r24
    8e36:	49 1f       	adc	r20, r25
    8e38:	56 1f       	adc	r21, r22
    8e3a:	c1 1d       	adc	r28, r1
    8e3c:	77 0f       	add	r23, r23
    8e3e:	88 1f       	adc	r24, r24
    8e40:	99 1f       	adc	r25, r25
    8e42:	66 1f       	adc	r22, r22
    8e44:	06 94       	lsr	r0
    8e46:	a1 f7       	brne	.-24     	; 0x8e30 <__ftoa_engine+0x90>
    8e48:	05 90       	lpm	r0, Z+
    8e4a:	07 94       	ror	r0
    8e4c:	28 f4       	brcc	.+10     	; 0x8e58 <__ftoa_engine+0xb8>
    8e4e:	f8 0e       	add	r15, r24
    8e50:	49 1f       	adc	r20, r25
    8e52:	56 1f       	adc	r21, r22
    8e54:	c7 1f       	adc	r28, r23
    8e56:	d1 1d       	adc	r29, r1
    8e58:	88 0f       	add	r24, r24
    8e5a:	99 1f       	adc	r25, r25
    8e5c:	66 1f       	adc	r22, r22
    8e5e:	77 1f       	adc	r23, r23
    8e60:	06 94       	lsr	r0
    8e62:	a1 f7       	brne	.-24     	; 0x8e4c <__ftoa_engine+0xac>
    8e64:	05 90       	lpm	r0, Z+
    8e66:	07 94       	ror	r0
    8e68:	20 f4       	brcc	.+8      	; 0x8e72 <__ftoa_engine+0xd2>
    8e6a:	49 0f       	add	r20, r25
    8e6c:	56 1f       	adc	r21, r22
    8e6e:	c7 1f       	adc	r28, r23
    8e70:	d8 1f       	adc	r29, r24
    8e72:	99 0f       	add	r25, r25
    8e74:	66 1f       	adc	r22, r22
    8e76:	77 1f       	adc	r23, r23
    8e78:	88 1f       	adc	r24, r24
    8e7a:	06 94       	lsr	r0
    8e7c:	a9 f7       	brne	.-22     	; 0x8e68 <__ftoa_engine+0xc8>
    8e7e:	84 91       	lpm	r24, Z
    8e80:	10 95       	com	r17
    8e82:	17 70       	andi	r17, 0x07	; 7
    8e84:	41 f0       	breq	.+16     	; 0x8e96 <__ftoa_engine+0xf6>
    8e86:	d6 95       	lsr	r29
    8e88:	c7 95       	ror	r28
    8e8a:	57 95       	ror	r21
    8e8c:	47 95       	ror	r20
    8e8e:	f7 94       	ror	r15
    8e90:	e7 94       	ror	r14
    8e92:	1a 95       	dec	r17
    8e94:	c1 f7       	brne	.-16     	; 0x8e86 <__ftoa_engine+0xe6>
    8e96:	ea ec       	ldi	r30, 0xCA	; 202
    8e98:	f0 e0       	ldi	r31, 0x00	; 0
    8e9a:	68 94       	set
    8e9c:	15 90       	lpm	r1, Z+
    8e9e:	15 91       	lpm	r17, Z+
    8ea0:	35 91       	lpm	r19, Z+
    8ea2:	65 91       	lpm	r22, Z+
    8ea4:	95 91       	lpm	r25, Z+
    8ea6:	05 90       	lpm	r0, Z+
    8ea8:	7f e2       	ldi	r23, 0x2F	; 47
    8eaa:	73 95       	inc	r23
    8eac:	e1 18       	sub	r14, r1
    8eae:	f1 0a       	sbc	r15, r17
    8eb0:	43 0b       	sbc	r20, r19
    8eb2:	56 0b       	sbc	r21, r22
    8eb4:	c9 0b       	sbc	r28, r25
    8eb6:	d0 09       	sbc	r29, r0
    8eb8:	c0 f7       	brcc	.-16     	; 0x8eaa <__ftoa_engine+0x10a>
    8eba:	e1 0c       	add	r14, r1
    8ebc:	f1 1e       	adc	r15, r17
    8ebe:	43 1f       	adc	r20, r19
    8ec0:	56 1f       	adc	r21, r22
    8ec2:	c9 1f       	adc	r28, r25
    8ec4:	d0 1d       	adc	r29, r0
    8ec6:	7e f4       	brtc	.+30     	; 0x8ee6 <__ftoa_engine+0x146>
    8ec8:	70 33       	cpi	r23, 0x30	; 48
    8eca:	11 f4       	brne	.+4      	; 0x8ed0 <__ftoa_engine+0x130>
    8ecc:	8a 95       	dec	r24
    8ece:	e6 cf       	rjmp	.-52     	; 0x8e9c <__ftoa_engine+0xfc>
    8ed0:	e8 94       	clt
    8ed2:	01 50       	subi	r16, 0x01	; 1
    8ed4:	30 f0       	brcs	.+12     	; 0x8ee2 <__ftoa_engine+0x142>
    8ed6:	08 0f       	add	r16, r24
    8ed8:	0a f4       	brpl	.+2      	; 0x8edc <__ftoa_engine+0x13c>
    8eda:	00 27       	eor	r16, r16
    8edc:	02 17       	cp	r16, r18
    8ede:	08 f4       	brcc	.+2      	; 0x8ee2 <__ftoa_engine+0x142>
    8ee0:	20 2f       	mov	r18, r16
    8ee2:	23 95       	inc	r18
    8ee4:	02 2f       	mov	r16, r18
    8ee6:	7a 33       	cpi	r23, 0x3A	; 58
    8ee8:	28 f0       	brcs	.+10     	; 0x8ef4 <__ftoa_engine+0x154>
    8eea:	79 e3       	ldi	r23, 0x39	; 57
    8eec:	7d 93       	st	X+, r23
    8eee:	2a 95       	dec	r18
    8ef0:	e9 f7       	brne	.-6      	; 0x8eec <__ftoa_engine+0x14c>
    8ef2:	10 c0       	rjmp	.+32     	; 0x8f14 <__ftoa_engine+0x174>
    8ef4:	7d 93       	st	X+, r23
    8ef6:	2a 95       	dec	r18
    8ef8:	89 f6       	brne	.-94     	; 0x8e9c <__ftoa_engine+0xfc>
    8efa:	06 94       	lsr	r0
    8efc:	97 95       	ror	r25
    8efe:	67 95       	ror	r22
    8f00:	37 95       	ror	r19
    8f02:	17 95       	ror	r17
    8f04:	17 94       	ror	r1
    8f06:	e1 18       	sub	r14, r1
    8f08:	f1 0a       	sbc	r15, r17
    8f0a:	43 0b       	sbc	r20, r19
    8f0c:	56 0b       	sbc	r21, r22
    8f0e:	c9 0b       	sbc	r28, r25
    8f10:	d0 09       	sbc	r29, r0
    8f12:	98 f0       	brcs	.+38     	; 0x8f3a <__ftoa_engine+0x19a>
    8f14:	23 95       	inc	r18
    8f16:	7e 91       	ld	r23, -X
    8f18:	73 95       	inc	r23
    8f1a:	7a 33       	cpi	r23, 0x3A	; 58
    8f1c:	08 f0       	brcs	.+2      	; 0x8f20 <__ftoa_engine+0x180>
    8f1e:	70 e3       	ldi	r23, 0x30	; 48
    8f20:	7c 93       	st	X, r23
    8f22:	20 13       	cpse	r18, r16
    8f24:	b8 f7       	brcc	.-18     	; 0x8f14 <__ftoa_engine+0x174>
    8f26:	7e 91       	ld	r23, -X
    8f28:	70 61       	ori	r23, 0x10	; 16
    8f2a:	7d 93       	st	X+, r23
    8f2c:	30 f0       	brcs	.+12     	; 0x8f3a <__ftoa_engine+0x19a>
    8f2e:	83 95       	inc	r24
    8f30:	71 e3       	ldi	r23, 0x31	; 49
    8f32:	7d 93       	st	X+, r23
    8f34:	70 e3       	ldi	r23, 0x30	; 48
    8f36:	2a 95       	dec	r18
    8f38:	e1 f7       	brne	.-8      	; 0x8f32 <__ftoa_engine+0x192>
    8f3a:	11 24       	eor	r1, r1
    8f3c:	ef 90       	pop	r14
    8f3e:	ff 90       	pop	r15
    8f40:	0f 91       	pop	r16
    8f42:	1f 91       	pop	r17
    8f44:	cf 91       	pop	r28
    8f46:	df 91       	pop	r29
    8f48:	99 27       	eor	r25, r25
    8f4a:	87 fd       	sbrc	r24, 7
    8f4c:	90 95       	com	r25
    8f4e:	08 95       	ret

00008f50 <__ctype_isfalse>:
    8f50:	99 27       	eor	r25, r25
    8f52:	88 27       	eor	r24, r24

00008f54 <__ctype_istrue>:
    8f54:	08 95       	ret

00008f56 <strrev>:
    8f56:	dc 01       	movw	r26, r24
    8f58:	fc 01       	movw	r30, r24
    8f5a:	67 2f       	mov	r22, r23
    8f5c:	71 91       	ld	r23, Z+
    8f5e:	77 23       	and	r23, r23
    8f60:	e1 f7       	brne	.-8      	; 0x8f5a <strrev+0x4>
    8f62:	32 97       	sbiw	r30, 0x02	; 2
    8f64:	04 c0       	rjmp	.+8      	; 0x8f6e <strrev+0x18>
    8f66:	7c 91       	ld	r23, X
    8f68:	6d 93       	st	X+, r22
    8f6a:	70 83       	st	Z, r23
    8f6c:	62 91       	ld	r22, -Z
    8f6e:	ae 17       	cp	r26, r30
    8f70:	bf 07       	cpc	r27, r31
    8f72:	c8 f3       	brcs	.-14     	; 0x8f66 <strrev+0x10>
    8f74:	08 95       	ret

00008f76 <__do_global_dtors>:
    8f76:	11 e0       	ldi	r17, 0x01	; 1
    8f78:	c7 e6       	ldi	r28, 0x67	; 103
    8f7a:	d1 e0       	ldi	r29, 0x01	; 1
    8f7c:	03 c0       	rjmp	.+6      	; 0x8f84 <__do_global_dtors+0xe>
    8f7e:	fe 01       	movw	r30, r28
    8f80:	a2 d9       	rcall	.-3260   	; 0x82c6 <__tablejump2__>
    8f82:	21 96       	adiw	r28, 0x01	; 1
    8f84:	c8 36       	cpi	r28, 0x68	; 104
    8f86:	d1 07       	cpc	r29, r17
    8f88:	d1 f7       	brne	.-12     	; 0x8f7e <__do_global_dtors+0x8>
    8f8a:	f8 94       	cli

00008f8c <__stop_program>:
    8f8c:	ff cf       	rjmp	.-2      	; 0x8f8c <__stop_program>
