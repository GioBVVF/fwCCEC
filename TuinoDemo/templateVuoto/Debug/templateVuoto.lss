
templateVuoto.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000882  00800100  00008fd2  00009066  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00008fd2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000047d  00800982  00800982  000098e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000098e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00009918  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00001568  00000000  00000000  00009958  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000459e2  00000000  00000000  0000aec0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000083cc  00000000  00000000  000508a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000defb  00000000  00000000  00058c6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00005094  00000000  00000000  00066b6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000998b  00000000  00000000  0006bc00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001e1ee  00000000  00000000  0007558b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001740  00000000  00000000  00093779  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	66 c1       	rjmp	.+716    	; 0x2ce <__dtors_end>
       2:	00 00       	nop
       4:	8e c1       	rjmp	.+796    	; 0x322 <__bad_interrupt>
       6:	00 00       	nop
       8:	8c c1       	rjmp	.+792    	; 0x322 <__bad_interrupt>
       a:	00 00       	nop
       c:	8a c1       	rjmp	.+788    	; 0x322 <__bad_interrupt>
       e:	00 00       	nop
      10:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__vector_4>
      14:	86 c1       	rjmp	.+780    	; 0x322 <__bad_interrupt>
      16:	00 00       	nop
      18:	84 c1       	rjmp	.+776    	; 0x322 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	0c 94 56 08 	jmp	0x10ac	; 0x10ac <__vector_7>
      20:	80 c1       	rjmp	.+768    	; 0x322 <__bad_interrupt>
      22:	00 00       	nop
      24:	7e c1       	rjmp	.+764    	; 0x322 <__bad_interrupt>
      26:	00 00       	nop
      28:	7c c1       	rjmp	.+760    	; 0x322 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7a c1       	rjmp	.+756    	; 0x322 <__bad_interrupt>
      2e:	00 00       	nop
      30:	78 c1       	rjmp	.+752    	; 0x322 <__bad_interrupt>
      32:	00 00       	nop
      34:	76 c1       	rjmp	.+748    	; 0x322 <__bad_interrupt>
      36:	00 00       	nop
      38:	74 c1       	rjmp	.+744    	; 0x322 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	72 c1       	rjmp	.+740    	; 0x322 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 e4 3b 	jmp	0x77c8	; 0x77c8 <__vector_16>
      44:	6e c1       	rjmp	.+732    	; 0x322 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 bb 39 	jmp	0x7376	; 0x7376 <__vector_18>
      4c:	0c 94 ed 39 	jmp	0x73da	; 0x73da <__vector_19>
      50:	68 c1       	rjmp	.+720    	; 0x322 <__bad_interrupt>
      52:	00 00       	nop
      54:	66 c1       	rjmp	.+716    	; 0x322 <__bad_interrupt>
      56:	00 00       	nop
      58:	64 c1       	rjmp	.+712    	; 0x322 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	62 c1       	rjmp	.+708    	; 0x322 <__bad_interrupt>
      5e:	00 00       	nop
      60:	60 c1       	rjmp	.+704    	; 0x322 <__bad_interrupt>
      62:	00 00       	nop
      64:	5e c1       	rjmp	.+700    	; 0x322 <__bad_interrupt>
      66:	00 00       	nop
      68:	0c 94 08 36 	jmp	0x6c10	; 0x6c10 <__vector_26>
      6c:	5a c1       	rjmp	.+692    	; 0x322 <__bad_interrupt>
      6e:	00 00       	nop
      70:	58 c1       	rjmp	.+688    	; 0x322 <__bad_interrupt>
      72:	00 00       	nop
      74:	56 c1       	rjmp	.+684    	; 0x322 <__bad_interrupt>
      76:	00 00       	nop
      78:	54 c1       	rjmp	.+680    	; 0x322 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	52 c1       	rjmp	.+676    	; 0x322 <__bad_interrupt>
      7e:	00 00       	nop
      80:	50 c1       	rjmp	.+672    	; 0x322 <__bad_interrupt>
      82:	00 00       	nop
      84:	4e c1       	rjmp	.+668    	; 0x322 <__bad_interrupt>
      86:	00 00       	nop
      88:	4c c1       	rjmp	.+664    	; 0x322 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	70 10       	cpse	r7, r0
      8e:	96 10       	cpse	r9, r6
      90:	0a 11       	cpse	r16, r10
      92:	3e 11       	cpse	r19, r14
      94:	92 11       	cpse	r25, r2
      96:	c6 11       	cpse	r28, r6
      98:	4a 12       	cpse	r4, r26
      9a:	99 12       	cpse	r9, r25
      9c:	d1 12       	cpse	r13, r17
      9e:	34 13       	cpse	r19, r20
      a0:	d0 13       	cpse	r29, r16
      a2:	9f 1b       	sub	r25, r31
      a4:	b6 1b       	sub	r27, r22
      a6:	b6 1b       	sub	r27, r22
      a8:	b3 1b       	sub	r27, r19
      aa:	b6 1b       	sub	r27, r22
      ac:	9d 1b       	sub	r25, r29
      ae:	b6 1b       	sub	r27, r22
      b0:	b6 1b       	sub	r27, r22
      b2:	b6 1b       	sub	r27, r22
      b4:	91 1b       	sub	r25, r17
      b6:	b6 1b       	sub	r27, r22
      b8:	b6 1b       	sub	r27, r22
      ba:	a6 1b       	sub	r26, r22
      bc:	b1 1b       	sub	r27, r17
      be:	af 1b       	sub	r26, r31
      c0:	b6 1b       	sub	r27, r22
      c2:	b6 1b       	sub	r27, r22
      c4:	b6 1b       	sub	r27, r22
      c6:	ad 1b       	sub	r26, r29

000000c8 <__trampolines_end>:
      c8:	00 40       	sbci	r16, 0x00	; 0
      ca:	7a 10       	cpse	r7, r10
      cc:	f3 5a       	subi	r31, 0xA3	; 163
      ce:	00 a0       	ldd	r0, Z+32	; 0x20
      d0:	72 4e       	sbci	r23, 0xE2	; 226
      d2:	18 09       	sbc	r17, r8
      d4:	00 10       	cpse	r0, r0
      d6:	a5 d4       	rcall	.+2378   	; 0xa22 <_Z12leggiColonnev+0x4>
      d8:	e8 00       	.word	0x00e8	; ????
      da:	00 e8       	ldi	r16, 0x80	; 128
      dc:	76 48       	sbci	r23, 0x86	; 134
      de:	17 00       	.word	0x0017	; ????
      e0:	00 e4       	ldi	r16, 0x40	; 64
      e2:	0b 54       	subi	r16, 0x4B	; 75
      e4:	02 00       	.word	0x0002	; ????
      e6:	00 ca       	rjmp	.-3072   	; 0xfffff4e8 <__eeprom_end+0xff7ef4e8>
      e8:	9a 3b       	cpi	r25, 0xBA	; 186
      ea:	00 00       	nop
      ec:	00 e1       	ldi	r16, 0x10	; 16
      ee:	f5 05       	cpc	r31, r5
      f0:	00 00       	nop
      f2:	80 96       	adiw	r24, 0x20	; 32
      f4:	98 00       	.word	0x0098	; ????
      f6:	00 00       	nop
      f8:	40 42       	sbci	r20, 0x20	; 32
      fa:	0f 00       	.word	0x000f	; ????
      fc:	00 00       	nop
      fe:	a0 86       	std	Z+8, r10	; 0x08
     100:	01 00       	.word	0x0001	; ????
     102:	00 00       	nop
     104:	10 27       	eor	r17, r16
     106:	00 00       	nop
     108:	00 00       	nop
     10a:	e8 03       	fmulsu	r22, r16
     10c:	00 00       	nop
     10e:	00 00       	nop
     110:	64 00       	.word	0x0064	; ????
     112:	00 00       	nop
     114:	00 00       	nop
     116:	0a 00       	.word	0x000a	; ????
     118:	00 00       	nop
     11a:	00 00       	nop
     11c:	01 00       	.word	0x0001	; ????
     11e:	00 00       	nop
     120:	00 00       	nop
     122:	2c 76       	andi	r18, 0x6C	; 108
     124:	d8 88       	ldd	r13, Y+16	; 0x10
     126:	dc 67       	ori	r29, 0x7C	; 124
     128:	4f 08       	sbc	r4, r15
     12a:	23 df       	rcall	.-442    	; 0xffffff72 <__eeprom_end+0xff7eff72>
     12c:	c1 df       	rcall	.-126    	; 0xb0 <__SREG__+0x71>
     12e:	ae 59       	subi	r26, 0x9E	; 158
     130:	e1 b1       	in	r30, 0x01	; 1
     132:	b7 96       	adiw	r30, 0x27	; 39
     134:	e5 e3       	ldi	r30, 0x35	; 53
     136:	e4 53       	subi	r30, 0x34	; 52
     138:	c6 3a       	cpi	r28, 0xA6	; 166
     13a:	e6 51       	subi	r30, 0x16	; 22
     13c:	99 76       	andi	r25, 0x69	; 105
     13e:	96 e8       	ldi	r25, 0x86	; 134
     140:	e6 c2       	rjmp	.+1484   	; 0x70e <_Z14FlashpowerDownv+0x22>
     142:	84 26       	eor	r8, r20
     144:	eb 89       	ldd	r30, Y+19	; 0x13
     146:	8c 9b       	sbis	0x11, 4	; 17
     148:	62 ed       	ldi	r22, 0xD2	; 210
     14a:	40 7c       	andi	r20, 0xC0	; 192
     14c:	6f fc       	.word	0xfc6f	; ????
     14e:	ef bc       	out	0x2f, r14	; 47
     150:	9c 9f       	mul	r25, r28
     152:	40 f2       	brcs	.-112    	; 0xe4 <__trampolines_end+0x1c>
     154:	ba a5       	ldd	r27, Y+42	; 0x2a
     156:	6f a5       	ldd	r22, Y+47	; 0x2f
     158:	f4 90       	lpm	r15, Z
     15a:	05 5a       	subi	r16, 0xA5	; 165
     15c:	2a f7       	brpl	.-54     	; 0x128 <__trampolines_end+0x60>
     15e:	5c 93       	st	X, r21
     160:	6b 6c       	ori	r22, 0xCB	; 203
     162:	f9 67       	ori	r31, 0x79	; 121
     164:	6d c1       	rjmp	.+730    	; 0x440 <_Z4passb+0x8>
     166:	1b fc       	.word	0xfc1b	; ????
     168:	e0 e4       	ldi	r30, 0x40	; 64
     16a:	0d 47       	sbci	r16, 0x7D	; 125
     16c:	fe f5       	brtc	.+126    	; 0x1ec <_ZZ5setupE3__c+0x15>
     16e:	20 e6       	ldi	r18, 0x60	; 96
     170:	b5 00       	.word	0x00b5	; ????
     172:	d0 ed       	ldi	r29, 0xD0	; 208
     174:	90 2e       	mov	r9, r16
     176:	03 00       	.word	0x0003	; ????
     178:	94 35       	cpi	r25, 0x54	; 84
     17a:	77 05       	cpc	r23, r7
     17c:	00 80       	ld	r0, Z
     17e:	84 1e       	adc	r8, r20
     180:	08 00       	.word	0x0008	; ????
     182:	00 20       	and	r0, r0
     184:	4e 0a       	sbc	r4, r30
     186:	00 00       	nop
     188:	00 c8       	rjmp	.-4096   	; 0xfffff18a <__eeprom_end+0xff7ef18a>
     18a:	0c 33       	cpi	r16, 0x3C	; 60
     18c:	33 33       	cpi	r19, 0x33	; 51
     18e:	33 0f       	add	r19, r19
     190:	98 6e       	ori	r25, 0xE8	; 232
     192:	12 83       	std	Z+2, r17	; 0x02
     194:	11 41       	sbci	r17, 0x11	; 17
     196:	ef 8d       	ldd	r30, Y+31	; 0x1f
     198:	21 14       	cp	r2, r1
     19a:	89 3b       	cpi	r24, 0xB9	; 185
     19c:	e6 55       	subi	r30, 0x56	; 86
     19e:	16 cf       	rjmp	.-468    	; 0xffffffcc <__eeprom_end+0xff7effcc>
     1a0:	fe e6       	ldi	r31, 0x6E	; 110
     1a2:	db 18       	sub	r13, r11
     1a4:	d1 84       	ldd	r13, Z+9	; 0x09
     1a6:	4b 38       	cpi	r20, 0x8B	; 139
     1a8:	1b f7       	brvc	.-58     	; 0x170 <__trampolines_end+0xa8>
     1aa:	7c 1d       	adc	r23, r12
     1ac:	90 1d       	adc	r25, r0
     1ae:	a4 bb       	out	0x14, r26	; 20
     1b0:	e4 24       	eor	r14, r4
     1b2:	20 32       	cpi	r18, 0x20	; 32
     1b4:	84 72       	andi	r24, 0x24	; 36
     1b6:	5e 22       	and	r5, r30
     1b8:	81 00       	.word	0x0081	; ????
     1ba:	c9 f1       	breq	.+114    	; 0x22e <_ZZN11Diagnostics15_printErrorCodeEvE3__c+0x5>
     1bc:	24 ec       	ldi	r18, 0xC4	; 196
     1be:	a1 e5       	ldi	r26, 0x51	; 81
     1c0:	3d 27       	eor	r19, r29

000001c2 <_ZZ5setupE3__c_0>:
     1c2:	44 53 33 32 33 31 4d 20 69 6e 69 74 69 61 6c 69     DS3231M initiali
     1d2:	7a 65 64 2e 00                                      zed..

000001d7 <_ZZ5setupE3__c>:
     1d7:	55 6e 61 62 6c 65 20 74 6f 20 66 69 6e 64 20 44     Unable to find D
     1e7:	53 33 32 33 31 4d 4d 2e 20 43 68 65 63 6b 69 6e     S3231MM. Checkin
     1f7:	67 20 61 67 61 69 6e 20 69 6e 20 33 73 2e 00        g again in 3s..

00000206 <_ZZN13DS3231M_Class6adjustEvE3__c>:
     206:	41 70 72 20 32 38 20 32 30 32 30 00                 Apr 28 2020.

00000212 <_ZZN13DS3231M_Class6adjustEvE3__c_0>:
     212:	31 36 3a 34 36 3a 32 35 00                          16:46:25.

0000021b <_ZL11daysInMonth>:
     21b:	1f 1c 1f 1e 1f 1e 1f 1f 1e 1f 1e 1f                 ............

00000227 <_ZZN11Diagnostics15_printErrorCodeEvE3__c_0>:
     227:	30 00                                               0.

00000229 <_ZZN11Diagnostics15_printErrorCodeEvE3__c>:
     229:	45 72 72 6f 72 20 63 6f 64 65 3a 20 30 78 00        Error code: 0x.

00000238 <digital_pin_to_timer_PGM>:
     238:	00 00 00 00 04 03 08 07 00 00 02 00 09 0a 00 00     ................
	...
     254:	00 00 00 01                                         ....

00000258 <digital_pin_to_bit_mask_PGM>:
     258:	01 02 04 08 10 20 40 80 01 02 10 20 40 80 10 20     ..... @.... @.. 
     268:	40 80 10 08 20 04 40 80 01 02 04 08 01 02 04 08     @... .@.........

00000278 <digital_pin_to_port_PGM>:
     278:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 01 01     ................
     288:	01 01 03 03 03 03 03 03 01 01 01 01 03 03 02 02     ................

00000298 <port_to_input_PGM>:
     298:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000002a2 <port_to_output_PGM>:
     2a2:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000002ac <port_to_mode_PGM>:
     2ac:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000002b6 <__ctors_start>:
     2b6:	07 09       	sbc	r16, r7
     2b8:	25 1e       	adc	r2, r21
     2ba:	7d 1e       	adc	r7, r29
     2bc:	75 21       	and	r23, r5
     2be:	71 23       	and	r23, r17
     2c0:	8c 24       	eor	r8, r12
     2c2:	5e 26       	eor	r5, r30
     2c4:	69 26       	eor	r6, r25
     2c6:	28 2a       	or	r2, r24
     2c8:	98 38       	cpi	r25, 0x88	; 136
     2ca:	1b 3a       	cpi	r17, 0xAB	; 171

000002cc <__ctors_end>:
     2cc:	f9 09       	sbc	r31, r9

000002ce <__dtors_end>:
     2ce:	11 24       	eor	r1, r1
     2d0:	1f be       	out	0x3f, r1	; 63
     2d2:	cf ef       	ldi	r28, 0xFF	; 255
     2d4:	d0 e4       	ldi	r29, 0x40	; 64
     2d6:	de bf       	out	0x3e, r29	; 62
     2d8:	cd bf       	out	0x3d, r28	; 61

000002da <__do_copy_data>:
     2da:	19 e0       	ldi	r17, 0x09	; 9
     2dc:	a0 e0       	ldi	r26, 0x00	; 0
     2de:	b1 e0       	ldi	r27, 0x01	; 1
     2e0:	e2 ed       	ldi	r30, 0xD2	; 210
     2e2:	ff e8       	ldi	r31, 0x8F	; 143
     2e4:	00 e0       	ldi	r16, 0x00	; 0
     2e6:	0b bf       	out	0x3b, r16	; 59
     2e8:	02 c0       	rjmp	.+4      	; 0x2ee <__do_copy_data+0x14>
     2ea:	07 90       	elpm	r0, Z+
     2ec:	0d 92       	st	X+, r0
     2ee:	a2 38       	cpi	r26, 0x82	; 130
     2f0:	b1 07       	cpc	r27, r17
     2f2:	d9 f7       	brne	.-10     	; 0x2ea <__do_copy_data+0x10>

000002f4 <__do_clear_bss>:
     2f4:	2d e0       	ldi	r18, 0x0D	; 13
     2f6:	a2 e8       	ldi	r26, 0x82	; 130
     2f8:	b9 e0       	ldi	r27, 0x09	; 9
     2fa:	01 c0       	rjmp	.+2      	; 0x2fe <.do_clear_bss_start>

000002fc <.do_clear_bss_loop>:
     2fc:	1d 92       	st	X+, r1

000002fe <.do_clear_bss_start>:
     2fe:	af 3f       	cpi	r26, 0xFF	; 255
     300:	b2 07       	cpc	r27, r18
     302:	e1 f7       	brne	.-8      	; 0x2fc <.do_clear_bss_loop>

00000304 <__do_global_ctors>:
     304:	11 e0       	ldi	r17, 0x01	; 1
     306:	c6 e6       	ldi	r28, 0x66	; 102
     308:	d1 e0       	ldi	r29, 0x01	; 1
     30a:	04 c0       	rjmp	.+8      	; 0x314 <__do_global_ctors+0x10>
     30c:	21 97       	sbiw	r28, 0x01	; 1
     30e:	fe 01       	movw	r30, r28
     310:	0e 94 85 41 	call	0x830a	; 0x830a <__tablejump2__>
     314:	cb 35       	cpi	r28, 0x5B	; 91
     316:	d1 07       	cpc	r29, r17
     318:	c9 f7       	brne	.-14     	; 0x30c <__do_global_ctors+0x8>
     31a:	0e 94 b3 3a 	call	0x7566	; 0x7566 <main>
     31e:	0c 94 dd 47 	jmp	0x8fba	; 0x8fba <__do_global_dtors>

00000322 <__bad_interrupt>:
     322:	6e ce       	rjmp	.-804    	; 0x0 <__vectors>

00000324 <_ZL11disable_ETHv>:
      if (rispostaGetTimbrature == "200"){ valida = 1; }
      _delay_ms(80);
    }
  }
  return valida;
}
     324:	44 9a       	sbi	0x08, 4	; 8
     326:	08 95       	ret

00000328 <_ZL13disable_FLASHv>:
     328:	2c 9a       	sbi	0x05, 4	; 5
     32a:	08 95       	ret

0000032c <_ZN7TwoWire5writeEi>:
     32c:	dc 01       	movw	r26, r24
     32e:	ed 91       	ld	r30, X+
     330:	fc 91       	ld	r31, X
     332:	01 90       	ld	r0, Z+
     334:	f0 81       	ld	r31, Z
     336:	e0 2d       	mov	r30, r0
     338:	09 94       	ijmp

0000033a <_Z14initIOExpanderv>:
     33a:	8f ef       	ldi	r24, 0xFF	; 255
     33c:	9c e0       	ldi	r25, 0x0C	; 12
     33e:	0e 94 02 38 	call	0x7004	; 0x7004 <_ZN7TwoWire5beginEv>
     342:	60 e2       	ldi	r22, 0x20	; 32
     344:	8f ef       	ldi	r24, 0xFF	; 255
     346:	9c e0       	ldi	r25, 0x0C	; 12
     348:	0e 94 15 38 	call	0x702a	; 0x702a <_ZN7TwoWire17beginTransmissionEh>
     34c:	61 e0       	ldi	r22, 0x01	; 1
     34e:	70 e0       	ldi	r23, 0x00	; 0
     350:	8f ef       	ldi	r24, 0xFF	; 255
     352:	9c e0       	ldi	r25, 0x0C	; 12
     354:	eb df       	rcall	.-42     	; 0x32c <_ZN7TwoWire5writeEi>
     356:	63 ec       	ldi	r22, 0xC3	; 195
     358:	70 e0       	ldi	r23, 0x00	; 0
     35a:	8f ef       	ldi	r24, 0xFF	; 255
     35c:	9c e0       	ldi	r25, 0x0C	; 12
     35e:	e6 df       	rcall	.-52     	; 0x32c <_ZN7TwoWire5writeEi>
     360:	8f ef       	ldi	r24, 0xFF	; 255
     362:	9c e0       	ldi	r25, 0x0C	; 12
     364:	0e 94 96 38 	call	0x712c	; 0x712c <_ZN7TwoWire15endTransmissionEv>
     368:	60 e2       	ldi	r22, 0x20	; 32
     36a:	8f ef       	ldi	r24, 0xFF	; 255
     36c:	9c e0       	ldi	r25, 0x0C	; 12
     36e:	0e 94 15 38 	call	0x702a	; 0x702a <_ZN7TwoWire17beginTransmissionEh>
     372:	62 e0       	ldi	r22, 0x02	; 2
     374:	70 e0       	ldi	r23, 0x00	; 0
     376:	8f ef       	ldi	r24, 0xFF	; 255
     378:	9c e0       	ldi	r25, 0x0C	; 12
     37a:	d8 df       	rcall	.-80     	; 0x32c <_ZN7TwoWire5writeEi>
     37c:	60 e0       	ldi	r22, 0x00	; 0
     37e:	70 e0       	ldi	r23, 0x00	; 0
     380:	8f ef       	ldi	r24, 0xFF	; 255
     382:	9c e0       	ldi	r25, 0x0C	; 12
     384:	d3 df       	rcall	.-90     	; 0x32c <_ZN7TwoWire5writeEi>
     386:	8f ef       	ldi	r24, 0xFF	; 255
     388:	9c e0       	ldi	r25, 0x0C	; 12
     38a:	0e 94 96 38 	call	0x712c	; 0x712c <_ZN7TwoWire15endTransmissionEv>
     38e:	8f e3       	ldi	r24, 0x3F	; 63
     390:	9c e9       	ldi	r25, 0x9C	; 156
     392:	01 97       	sbiw	r24, 0x01	; 1
     394:	f1 f7       	brne	.-4      	; 0x392 <_Z14initIOExpanderv+0x58>
     396:	00 c0       	rjmp	.+0      	; 0x398 <_Z14initIOExpanderv+0x5e>
     398:	00 00       	nop
     39a:	60 e2       	ldi	r22, 0x20	; 32
     39c:	8f ef       	ldi	r24, 0xFF	; 255
     39e:	9c e0       	ldi	r25, 0x0C	; 12
     3a0:	0e 94 15 38 	call	0x702a	; 0x702a <_ZN7TwoWire17beginTransmissionEh>
     3a4:	63 e0       	ldi	r22, 0x03	; 3
     3a6:	70 e0       	ldi	r23, 0x00	; 0
     3a8:	8f ef       	ldi	r24, 0xFF	; 255
     3aa:	9c e0       	ldi	r25, 0x0C	; 12
     3ac:	bf df       	rcall	.-130    	; 0x32c <_ZN7TwoWire5writeEi>
     3ae:	6c e3       	ldi	r22, 0x3C	; 60
     3b0:	70 e0       	ldi	r23, 0x00	; 0
     3b2:	8f ef       	ldi	r24, 0xFF	; 255
     3b4:	9c e0       	ldi	r25, 0x0C	; 12
     3b6:	ba df       	rcall	.-140    	; 0x32c <_ZN7TwoWire5writeEi>
     3b8:	8f ef       	ldi	r24, 0xFF	; 255
     3ba:	9c e0       	ldi	r25, 0x0C	; 12
     3bc:	0e 94 96 38 	call	0x712c	; 0x712c <_ZN7TwoWire15endTransmissionEv>
     3c0:	8f e3       	ldi	r24, 0x3F	; 63
     3c2:	9c e9       	ldi	r25, 0x9C	; 156
     3c4:	01 97       	sbiw	r24, 0x01	; 1
     3c6:	f1 f7       	brne	.-4      	; 0x3c4 <_Z14initIOExpanderv+0x8a>
     3c8:	00 c0       	rjmp	.+0      	; 0x3ca <_Z14initIOExpanderv+0x90>
     3ca:	00 00       	nop
     3cc:	60 e2       	ldi	r22, 0x20	; 32
     3ce:	8f ef       	ldi	r24, 0xFF	; 255
     3d0:	9c e0       	ldi	r25, 0x0C	; 12
     3d2:	0e 94 15 38 	call	0x702a	; 0x702a <_ZN7TwoWire17beginTransmissionEh>
     3d6:	60 e0       	ldi	r22, 0x00	; 0
     3d8:	70 e0       	ldi	r23, 0x00	; 0
     3da:	8f ef       	ldi	r24, 0xFF	; 255
     3dc:	9c e0       	ldi	r25, 0x0C	; 12
     3de:	a6 df       	rcall	.-180    	; 0x32c <_ZN7TwoWire5writeEi>
     3e0:	8f ef       	ldi	r24, 0xFF	; 255
     3e2:	9c e0       	ldi	r25, 0x0C	; 12
     3e4:	0e 94 96 38 	call	0x712c	; 0x712c <_ZN7TwoWire15endTransmissionEv>
     3e8:	8f ef       	ldi	r24, 0xFF	; 255
     3ea:	9c e0       	ldi	r25, 0x0C	; 12
     3ec:	0c 94 02 38 	jmp	0x7004	; 0x7004 <_ZN7TwoWire5beginEv>

000003f0 <_Z9printLinev>:
     3f0:	cf 93       	push	r28
     3f2:	85 e5       	ldi	r24, 0x55	; 85
     3f4:	9d e0       	ldi	r25, 0x0D	; 13
     3f6:	0e 94 38 3b 	call	0x7670	; 0x7670 <_ZN5Print7printlnEv>
     3fa:	cd e7       	ldi	r28, 0x7D	; 125
     3fc:	60 ec       	ldi	r22, 0xC0	; 192
     3fe:	71 e0       	ldi	r23, 0x01	; 1
     400:	85 e5       	ldi	r24, 0x55	; 85
     402:	9d e0       	ldi	r25, 0x0D	; 13
     404:	0e 94 30 3b 	call	0x7660	; 0x7660 <_ZN5Print5printEPKc>
     408:	c1 50       	subi	r28, 0x01	; 1
     40a:	c1 f7       	brne	.-16     	; 0x3fc <_Z9printLinev+0xc>
     40c:	85 e5       	ldi	r24, 0x55	; 85
     40e:	9d e0       	ldi	r25, 0x0D	; 13
     410:	cf 91       	pop	r28
     412:	0c 94 38 3b 	jmp	0x7670	; 0x7670 <_ZN5Print7printlnEv>

00000416 <_Z8printTabh>:
     416:	cf 93       	push	r28
     418:	df 93       	push	r29
     41a:	d8 2f       	mov	r29, r24
     41c:	c0 e0       	ldi	r28, 0x00	; 0
     41e:	cd 17       	cp	r28, r29
     420:	41 f0       	breq	.+16     	; 0x432 <_Z8printTabh+0x1c>
     422:	62 ec       	ldi	r22, 0xC2	; 194
     424:	71 e0       	ldi	r23, 0x01	; 1
     426:	85 e5       	ldi	r24, 0x55	; 85
     428:	9d e0       	ldi	r25, 0x0D	; 13
     42a:	0e 94 30 3b 	call	0x7660	; 0x7660 <_ZN5Print5printEPKc>
     42e:	cf 5f       	subi	r28, 0xFF	; 255
     430:	f6 cf       	rjmp	.-20     	; 0x41e <_Z8printTabh+0x8>
     432:	df 91       	pop	r29
     434:	cf 91       	pop	r28
     436:	08 95       	ret

00000438 <_Z4passb>:
     438:	cf 93       	push	r28
     43a:	c8 2f       	mov	r28, r24
     43c:	81 e0       	ldi	r24, 0x01	; 1
     43e:	eb df       	rcall	.-42     	; 0x416 <_Z8printTabh>
     440:	64 ec       	ldi	r22, 0xC4	; 196
     442:	71 e0       	ldi	r23, 0x01	; 1
     444:	85 e5       	ldi	r24, 0x55	; 85
     446:	9d e0       	ldi	r25, 0x0D	; 13
     448:	0e 94 30 3b 	call	0x7660	; 0x7660 <_ZN5Print5printEPKc>
     44c:	cc 23       	and	r28, r28
     44e:	19 f0       	breq	.+6      	; 0x456 <_Z4passb+0x1e>
     450:	68 ec       	ldi	r22, 0xC8	; 200
     452:	71 e0       	ldi	r23, 0x01	; 1
     454:	02 c0       	rjmp	.+4      	; 0x45a <_Z4passb+0x22>
     456:	6d ec       	ldi	r22, 0xCD	; 205
     458:	71 e0       	ldi	r23, 0x01	; 1
     45a:	85 e5       	ldi	r24, 0x55	; 85
     45c:	9d e0       	ldi	r25, 0x0D	; 13
     45e:	0e 94 30 3b 	call	0x7660	; 0x7660 <_ZN5Print5printEPKc>
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	cf 91       	pop	r28
     466:	d7 cf       	rjmp	.-82     	; 0x416 <_Z8printTabh>

00000468 <_Z13printUniqueIDv>:
     468:	4f 92       	push	r4
     46a:	5f 92       	push	r5
     46c:	6f 92       	push	r6
     46e:	7f 92       	push	r7
     470:	8f 92       	push	r8
     472:	9f 92       	push	r9
     474:	af 92       	push	r10
     476:	bf 92       	push	r11
     478:	cf 92       	push	r12
     47a:	df 92       	push	r13
     47c:	ef 92       	push	r14
     47e:	ff 92       	push	r15
     480:	0f 93       	push	r16
     482:	1f 93       	push	r17
     484:	cf 93       	push	r28
     486:	df 93       	push	r29
     488:	82 e8       	ldi	r24, 0x82	; 130
     48a:	99 e0       	ldi	r25, 0x09	; 9
     48c:	0e 94 b1 2d 	call	0x5b62	; 0x5b62 <_ZN8SPIFlash11getUniqueIDEv>
     490:	49 01       	movw	r8, r18
     492:	d4 2f       	mov	r29, r20
     494:	c5 2f       	mov	r28, r21
     496:	2b 01       	movw	r4, r22
     498:	3c 01       	movw	r6, r24
     49a:	a0 e0       	ldi	r26, 0x00	; 0
     49c:	0e 94 b7 42 	call	0x856e	; 0x856e <__cmpdi2_s8>
     4a0:	09 f4       	brne	.+2      	; 0x4a4 <_Z13printUniqueIDv+0x3c>
     4a2:	60 c0       	rjmp	.+192    	; 0x564 <_Z13printUniqueIDv+0xfc>
     4a4:	62 ed       	ldi	r22, 0xD2	; 210
     4a6:	71 e0       	ldi	r23, 0x01	; 1
     4a8:	85 e5       	ldi	r24, 0x55	; 85
     4aa:	9d e0       	ldi	r25, 0x0D	; 13
     4ac:	0e 94 30 3b 	call	0x7660	; 0x7660 <_ZN5Print5printEPKc>
     4b0:	80 e4       	ldi	r24, 0x40	; 64
     4b2:	a8 2e       	mov	r10, r24
     4b4:	92 e4       	ldi	r25, 0x42	; 66
     4b6:	b9 2e       	mov	r11, r25
     4b8:	2f e0       	ldi	r18, 0x0F	; 15
     4ba:	c2 2e       	mov	r12, r18
     4bc:	d1 2c       	mov	r13, r1
     4be:	e1 2c       	mov	r14, r1
     4c0:	f1 2c       	mov	r15, r1
     4c2:	00 e0       	ldi	r16, 0x00	; 0
     4c4:	10 e0       	ldi	r17, 0x00	; 0
     4c6:	94 01       	movw	r18, r8
     4c8:	4d 2f       	mov	r20, r29
     4ca:	5c 2f       	mov	r21, r28
     4cc:	b2 01       	movw	r22, r4
     4ce:	c3 01       	movw	r24, r6
     4d0:	0e 94 a9 41 	call	0x8352	; 0x8352 <__divdi3>
     4d4:	f2 2f       	mov	r31, r18
     4d6:	e3 2f       	mov	r30, r19
     4d8:	2a e0       	ldi	r18, 0x0A	; 10
     4da:	30 e0       	ldi	r19, 0x00	; 0
     4dc:	cf 01       	movw	r24, r30
     4de:	ba 01       	movw	r22, r20
     4e0:	49 2f       	mov	r20, r25
     4e2:	58 2f       	mov	r21, r24
     4e4:	85 e5       	ldi	r24, 0x55	; 85
     4e6:	9d e0       	ldi	r25, 0x0D	; 13
     4e8:	0e 94 b2 3b 	call	0x7764	; 0x7764 <_ZN5Print5printEmi>
     4ec:	94 01       	movw	r18, r8
     4ee:	4d 2f       	mov	r20, r29
     4f0:	5c 2f       	mov	r21, r28
     4f2:	b2 01       	movw	r22, r4
     4f4:	c3 01       	movw	r24, r6
     4f6:	0e 94 a7 41 	call	0x834e	; 0x834e <__moddi3>
     4fa:	f2 2f       	mov	r31, r18
     4fc:	e3 2f       	mov	r30, r19
     4fe:	2a e0       	ldi	r18, 0x0A	; 10
     500:	30 e0       	ldi	r19, 0x00	; 0
     502:	cf 01       	movw	r24, r30
     504:	ba 01       	movw	r22, r20
     506:	49 2f       	mov	r20, r25
     508:	58 2f       	mov	r21, r24
     50a:	85 e5       	ldi	r24, 0x55	; 85
     50c:	9d e0       	ldi	r25, 0x0D	; 13
     50e:	0e 94 b2 3b 	call	0x7764	; 0x7764 <_ZN5Print5printEmi>
     512:	6e ed       	ldi	r22, 0xDE	; 222
     514:	71 e0       	ldi	r23, 0x01	; 1
     516:	85 e5       	ldi	r24, 0x55	; 85
     518:	9d e0       	ldi	r25, 0x0D	; 13
     51a:	0e 94 30 3b 	call	0x7660	; 0x7660 <_ZN5Print5printEPKc>
     51e:	69 e6       	ldi	r22, 0x69	; 105
     520:	72 e0       	ldi	r23, 0x02	; 2
     522:	85 e5       	ldi	r24, 0x55	; 85
     524:	9d e0       	ldi	r25, 0x0D	; 13
     526:	0e 94 30 3b 	call	0x7660	; 0x7660 <_ZN5Print5printEPKc>
     52a:	94 01       	movw	r18, r8
     52c:	4d 2f       	mov	r20, r29
     52e:	5c 2f       	mov	r21, r28
     530:	b2 01       	movw	r22, r4
     532:	c3 01       	movw	r24, r6
     534:	00 e2       	ldi	r16, 0x20	; 32
     536:	0e 94 90 42 	call	0x8520	; 0x8520 <__ashrdi3>
     53a:	f2 2f       	mov	r31, r18
     53c:	e3 2f       	mov	r30, r19
     53e:	20 e1       	ldi	r18, 0x10	; 16
     540:	30 e0       	ldi	r19, 0x00	; 0
     542:	cf 01       	movw	r24, r30
     544:	ba 01       	movw	r22, r20
     546:	49 2f       	mov	r20, r25
     548:	58 2f       	mov	r21, r24
     54a:	85 e5       	ldi	r24, 0x55	; 85
     54c:	9d e0       	ldi	r25, 0x0D	; 13
     54e:	0e 94 b2 3b 	call	0x7764	; 0x7764 <_ZN5Print5printEmi>
     552:	20 e1       	ldi	r18, 0x10	; 16
     554:	30 e0       	ldi	r19, 0x00	; 0
     556:	a4 01       	movw	r20, r8
     558:	6d 2f       	mov	r22, r29
     55a:	7c 2f       	mov	r23, r28
     55c:	85 e5       	ldi	r24, 0x55	; 85
     55e:	9d e0       	ldi	r25, 0x0D	; 13
     560:	0e 94 b2 3b 	call	0x7764	; 0x7764 <_ZN5Print5printEmi>
     564:	df 91       	pop	r29
     566:	cf 91       	pop	r28
     568:	1f 91       	pop	r17
     56a:	0f 91       	pop	r16
     56c:	ff 90       	pop	r15
     56e:	ef 90       	pop	r14
     570:	df 90       	pop	r13
     572:	cf 90       	pop	r12
     574:	bf 90       	pop	r11
     576:	af 90       	pop	r10
     578:	9f 90       	pop	r9
     57a:	8f 90       	pop	r8
     57c:	7f 90       	pop	r7
     57e:	6f 90       	pop	r6
     580:	5f 90       	pop	r5
     582:	4f 90       	pop	r4
     584:	35 cf       	rjmp	.-406    	; 0x3f0 <_Z9printLinev>

00000586 <_Z16FlasheraseSectorm>:
     586:	cf 92       	push	r12
     588:	df 92       	push	r13
     58a:	ef 92       	push	r14
     58c:	ff 92       	push	r15
     58e:	6b 01       	movw	r12, r22
     590:	7c 01       	movw	r14, r24
     592:	83 e0       	ldi	r24, 0x03	; 3
     594:	40 df       	rcall	.-384    	; 0x416 <_Z8printTabh>
     596:	61 ee       	ldi	r22, 0xE1	; 225
     598:	71 e0       	ldi	r23, 0x01	; 1
     59a:	85 e5       	ldi	r24, 0x55	; 85
     59c:	9d e0       	ldi	r25, 0x0D	; 13
     59e:	0e 94 30 3b 	call	0x7660	; 0x7660 <_ZN5Print5printEPKc>
     5a2:	81 e0       	ldi	r24, 0x01	; 1
     5a4:	38 df       	rcall	.-400    	; 0x416 <_Z8printTabh>
     5a6:	b7 01       	movw	r22, r14
     5a8:	a6 01       	movw	r20, r12
     5aa:	82 e8       	ldi	r24, 0x82	; 130
     5ac:	99 e0       	ldi	r25, 0x09	; 9
     5ae:	0e 94 a3 30 	call	0x6146	; 0x6146 <_ZN8SPIFlash11eraseSectorEm>
     5b2:	88 23       	and	r24, r24
     5b4:	c9 f0       	breq	.+50     	; 0x5e8 <_Z16FlasheraseSectorm+0x62>
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	3f df       	rcall	.-386    	; 0x438 <_Z4passb>
     5ba:	6b ee       	ldi	r22, 0xEB	; 235
     5bc:	71 e0       	ldi	r23, 0x01	; 1
     5be:	85 e5       	ldi	r24, 0x55	; 85
     5c0:	9d e0       	ldi	r25, 0x0D	; 13
     5c2:	0e 94 5b 3b 	call	0x76b6	; 0x76b6 <_ZN5Print7printlnEPKc>
     5c6:	81 e0       	ldi	r24, 0x01	; 1
     5c8:	26 df       	rcall	.-436    	; 0x416 <_Z8printTabh>
     5ca:	12 df       	rcall	.-476    	; 0x3f0 <_Z9printLinev>
     5cc:	2f ef       	ldi	r18, 0xFF	; 255
     5ce:	83 ed       	ldi	r24, 0xD3	; 211
     5d0:	90 e3       	ldi	r25, 0x30	; 48
     5d2:	21 50       	subi	r18, 0x01	; 1
     5d4:	80 40       	sbci	r24, 0x00	; 0
     5d6:	90 40       	sbci	r25, 0x00	; 0
     5d8:	e1 f7       	brne	.-8      	; 0x5d2 <_Z16FlasheraseSectorm+0x4c>
     5da:	00 c0       	rjmp	.+0      	; 0x5dc <_Z16FlasheraseSectorm+0x56>
     5dc:	00 00       	nop
     5de:	ff 90       	pop	r15
     5e0:	ef 90       	pop	r14
     5e2:	df 90       	pop	r13
     5e4:	cf 90       	pop	r12
     5e6:	08 95       	ret
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	ff 90       	pop	r15
     5ec:	ef 90       	pop	r14
     5ee:	df 90       	pop	r13
     5f0:	cf 90       	pop	r12
     5f2:	22 cf       	rjmp	.-444    	; 0x438 <_Z4passb>

000005f4 <_Z15erogazioniSaverm6String>:
     5f4:	8f 92       	push	r8
     5f6:	9f 92       	push	r9
     5f8:	af 92       	push	r10
     5fa:	bf 92       	push	r11
     5fc:	ef 92       	push	r14
     5fe:	ff 92       	push	r15
     600:	0f 93       	push	r16
     602:	cf 93       	push	r28
     604:	df 93       	push	r29
     606:	00 d0       	rcall	.+0      	; 0x608 <_Z15erogazioniSaverm6String+0x14>
     608:	00 d0       	rcall	.+0      	; 0x60a <_Z15erogazioniSaverm6String+0x16>
     60a:	00 d0       	rcall	.+0      	; 0x60c <_Z15erogazioniSaverm6String+0x18>
     60c:	cd b7       	in	r28, 0x3d	; 61
     60e:	de b7       	in	r29, 0x3e	; 62
     610:	4b 01       	movw	r8, r22
     612:	5c 01       	movw	r10, r24
     614:	7a 01       	movw	r14, r20
     616:	63 ec       	ldi	r22, 0xC3	; 195
     618:	71 e0       	ldi	r23, 0x01	; 1
     61a:	ce 01       	movw	r24, r28
     61c:	01 96       	adiw	r24, 0x01	; 1
     61e:	0e 94 01 3e 	call	0x7c02	; 0x7c02 <_ZN6StringC1EPKc>
     622:	68 ef       	ldi	r22, 0xF8	; 248
     624:	71 e0       	ldi	r23, 0x01	; 1
     626:	c7 01       	movw	r24, r14
     628:	0e 94 81 3f 	call	0x7f02	; 0x7f02 <_ZNK6String6equalsEPKc>
     62c:	81 11       	cpse	r24, r1
     62e:	22 c0       	rjmp	.+68     	; 0x674 <_Z15erogazioniSaverm6String+0x80>
     630:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <addr_erog>
     634:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <addr_erog+0x1>
     638:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <addr_erog+0x2>
     63c:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <addr_erog+0x3>
     640:	00 e0       	ldi	r16, 0x00	; 0
     642:	9e 01       	movw	r18, r28
     644:	2f 5f       	subi	r18, 0xFF	; 255
     646:	3f 4f       	sbci	r19, 0xFF	; 255
     648:	82 e8       	ldi	r24, 0x82	; 130
     64a:	99 e0       	ldi	r25, 0x09	; 9
     64c:	0e 94 26 2e 	call	0x5c4c	; 0x5c4c <_ZN8SPIFlash7readStrEmR6Stringb>
     650:	6e ef       	ldi	r22, 0xFE	; 254
     652:	71 e0       	ldi	r23, 0x01	; 1
     654:	ce 01       	movw	r24, r28
     656:	01 96       	adiw	r24, 0x01	; 1
     658:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <_ZN6String6concatEPKc>
     65c:	b7 01       	movw	r22, r14
     65e:	ce 01       	movw	r24, r28
     660:	01 96       	adiw	r24, 0x01	; 1
     662:	0e 94 45 3f 	call	0x7e8a	; 0x7e8a <_ZN6String6concatERKS_>
     666:	8f e1       	ldi	r24, 0x1F	; 31
     668:	9e e4       	ldi	r25, 0x4E	; 78
     66a:	01 97       	sbiw	r24, 0x01	; 1
     66c:	f1 f7       	brne	.-4      	; 0x66a <_Z15erogazioniSaverm6String+0x76>
     66e:	00 c0       	rjmp	.+0      	; 0x670 <_Z15erogazioniSaverm6String+0x7c>
     670:	00 00       	nop
     672:	05 c0       	rjmp	.+10     	; 0x67e <_Z15erogazioniSaverm6String+0x8a>
     674:	b7 01       	movw	r22, r14
     676:	ce 01       	movw	r24, r28
     678:	01 96       	adiw	r24, 0x01	; 1
     67a:	0e 94 58 3e 	call	0x7cb0	; 0x7cb0 <_ZN6StringaSERKS_>
     67e:	c5 01       	movw	r24, r10
     680:	b4 01       	movw	r22, r8
     682:	81 df       	rcall	.-254    	; 0x586 <_Z16FlasheraseSectorm>
     684:	8f e1       	ldi	r24, 0x1F	; 31
     686:	9e e4       	ldi	r25, 0x4E	; 78
     688:	01 97       	sbiw	r24, 0x01	; 1
     68a:	f1 f7       	brne	.-4      	; 0x688 <_Z15erogazioniSaverm6String+0x94>
     68c:	00 c0       	rjmp	.+0      	; 0x68e <_Z15erogazioniSaverm6String+0x9a>
     68e:	00 00       	nop
     690:	01 e0       	ldi	r16, 0x01	; 1
     692:	9e 01       	movw	r18, r28
     694:	2f 5f       	subi	r18, 0xFF	; 255
     696:	3f 4f       	sbci	r19, 0xFF	; 255
     698:	b5 01       	movw	r22, r10
     69a:	a4 01       	movw	r20, r8
     69c:	82 e8       	ldi	r24, 0x82	; 130
     69e:	99 e0       	ldi	r25, 0x09	; 9
     6a0:	0e 94 df 2e 	call	0x5dbe	; 0x5dbe <_ZN8SPIFlash8writeStrEmR6Stringb>
     6a4:	88 23       	and	r24, r24
     6a6:	71 f0       	breq	.+28     	; 0x6c4 <_Z15erogazioniSaverm6String+0xd0>
     6a8:	63 e0       	ldi	r22, 0x03	; 3
     6aa:	72 e0       	ldi	r23, 0x02	; 2
     6ac:	85 e5       	ldi	r24, 0x55	; 85
     6ae:	9d e0       	ldi	r25, 0x0D	; 13
     6b0:	0e 94 30 3b 	call	0x7660	; 0x7660 <_ZN5Print5printEPKc>
     6b4:	be 01       	movw	r22, r28
     6b6:	6f 5f       	subi	r22, 0xFF	; 255
     6b8:	7f 4f       	sbci	r23, 0xFF	; 255
     6ba:	85 e5       	ldi	r24, 0x55	; 85
     6bc:	9d e0       	ldi	r25, 0x0D	; 13
     6be:	0e 94 4b 3b 	call	0x7696	; 0x7696 <_ZN5Print7printlnERK6String>
     6c2:	96 de       	rcall	.-724    	; 0x3f0 <_Z9printLinev>
     6c4:	ce 01       	movw	r24, r28
     6c6:	01 96       	adiw	r24, 0x01	; 1
     6c8:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <_ZN6StringD1Ev>
     6cc:	26 96       	adiw	r28, 0x06	; 6
     6ce:	0f b6       	in	r0, 0x3f	; 63
     6d0:	f8 94       	cli
     6d2:	de bf       	out	0x3e, r29	; 62
     6d4:	0f be       	out	0x3f, r0	; 63
     6d6:	cd bf       	out	0x3d, r28	; 61
     6d8:	df 91       	pop	r29
     6da:	cf 91       	pop	r28
     6dc:	0f 91       	pop	r16
     6de:	ff 90       	pop	r15
     6e0:	ef 90       	pop	r14
     6e2:	bf 90       	pop	r11
     6e4:	af 90       	pop	r10
     6e6:	9f 90       	pop	r9
     6e8:	8f 90       	pop	r8
     6ea:	08 95       	ret

000006ec <_Z14FlashpowerDownv>:
     6ec:	83 e0       	ldi	r24, 0x03	; 3
     6ee:	93 de       	rcall	.-730    	; 0x416 <_Z8printTabh>
     6f0:	68 e1       	ldi	r22, 0x18	; 24
     6f2:	72 e0       	ldi	r23, 0x02	; 2
     6f4:	85 e5       	ldi	r24, 0x55	; 85
     6f6:	9d e0       	ldi	r25, 0x0D	; 13
     6f8:	0e 94 30 3b 	call	0x7660	; 0x7660 <_ZN5Print5printEPKc>
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	8b de       	rcall	.-746    	; 0x416 <_Z8printTabh>
     700:	82 e8       	ldi	r24, 0x82	; 130
     702:	99 e0       	ldi	r25, 0x09	; 9
     704:	0e 94 01 31 	call	0x6202	; 0x6202 <_ZN8SPIFlash9powerDownEv>
     708:	88 23       	and	r24, r24
     70a:	a1 f0       	breq	.+40     	; 0x734 <_Z14FlashpowerDownv+0x48>
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	94 de       	rcall	.-728    	; 0x438 <_Z4passb>
     710:	63 e2       	ldi	r22, 0x23	; 35
     712:	72 e0       	ldi	r23, 0x02	; 2
     714:	85 e5       	ldi	r24, 0x55	; 85
     716:	9d e0       	ldi	r25, 0x0D	; 13
     718:	0e 94 30 3b 	call	0x7660	; 0x7660 <_ZN5Print5printEPKc>
     71c:	2f ef       	ldi	r18, 0xFF	; 255
     71e:	83 ed       	ldi	r24, 0xD3	; 211
     720:	90 e3       	ldi	r25, 0x30	; 48
     722:	21 50       	subi	r18, 0x01	; 1
     724:	80 40       	sbci	r24, 0x00	; 0
     726:	90 40       	sbci	r25, 0x00	; 0
     728:	e1 f7       	brne	.-8      	; 0x722 <_Z14FlashpowerDownv+0x36>
     72a:	00 c0       	rjmp	.+0      	; 0x72c <_Z14FlashpowerDownv+0x40>
     72c:	00 00       	nop
     72e:	81 e0       	ldi	r24, 0x01	; 1
     730:	72 de       	rcall	.-796    	; 0x416 <_Z8printTabh>
     732:	5e ce       	rjmp	.-836    	; 0x3f0 <_Z9printLinev>
     734:	80 e0       	ldi	r24, 0x00	; 0
     736:	80 de       	rcall	.-768    	; 0x438 <_Z4passb>
     738:	82 e0       	ldi	r24, 0x02	; 2
     73a:	6d ce       	rjmp	.-806    	; 0x416 <_Z8printTabh>

0000073c <_Z12FlashpowerUpv>:
     73c:	83 e0       	ldi	r24, 0x03	; 3
     73e:	6b de       	rcall	.-810    	; 0x416 <_Z8printTabh>
     740:	61 e3       	ldi	r22, 0x31	; 49
     742:	72 e0       	ldi	r23, 0x02	; 2
     744:	85 e5       	ldi	r24, 0x55	; 85
     746:	9d e0       	ldi	r25, 0x0D	; 13
     748:	0e 94 30 3b 	call	0x7660	; 0x7660 <_ZN5Print5printEPKc>
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	63 de       	rcall	.-826    	; 0x416 <_Z8printTabh>
     750:	82 e8       	ldi	r24, 0x82	; 130
     752:	99 e0       	ldi	r25, 0x09	; 9
     754:	0e 94 2b 31 	call	0x6256	; 0x6256 <_ZN8SPIFlash7powerUpEv>
     758:	88 23       	and	r24, r24
     75a:	a1 f0       	breq	.+40     	; 0x784 <_Z12FlashpowerUpv+0x48>
     75c:	81 e0       	ldi	r24, 0x01	; 1
     75e:	6c de       	rcall	.-808    	; 0x438 <_Z4passb>
     760:	6a e3       	ldi	r22, 0x3A	; 58
     762:	72 e0       	ldi	r23, 0x02	; 2
     764:	85 e5       	ldi	r24, 0x55	; 85
     766:	9d e0       	ldi	r25, 0x0D	; 13
     768:	0e 94 30 3b 	call	0x7660	; 0x7660 <_ZN5Print5printEPKc>
     76c:	2f ef       	ldi	r18, 0xFF	; 255
     76e:	83 ed       	ldi	r24, 0xD3	; 211
     770:	90 e3       	ldi	r25, 0x30	; 48
     772:	21 50       	subi	r18, 0x01	; 1
     774:	80 40       	sbci	r24, 0x00	; 0
     776:	90 40       	sbci	r25, 0x00	; 0
     778:	e1 f7       	brne	.-8      	; 0x772 <_Z12FlashpowerUpv+0x36>
     77a:	00 c0       	rjmp	.+0      	; 0x77c <_Z12FlashpowerUpv+0x40>
     77c:	00 00       	nop
     77e:	81 e0       	ldi	r24, 0x01	; 1
     780:	4a de       	rcall	.-876    	; 0x416 <_Z8printTabh>
     782:	36 ce       	rjmp	.-916    	; 0x3f0 <_Z9printLinev>
     784:	80 e0       	ldi	r24, 0x00	; 0
     786:	58 de       	rcall	.-848    	; 0x438 <_Z4passb>
     788:	82 e0       	ldi	r24, 0x02	; 2
     78a:	45 ce       	rjmp	.-886    	; 0x416 <_Z8printTabh>

0000078c <_Z13eraseChipTestv>:
     78c:	83 e0       	ldi	r24, 0x03	; 3
     78e:	43 de       	rcall	.-890    	; 0x416 <_Z8printTabh>
     790:	66 e4       	ldi	r22, 0x46	; 70
     792:	72 e0       	ldi	r23, 0x02	; 2
     794:	85 e5       	ldi	r24, 0x55	; 85
     796:	9d e0       	ldi	r25, 0x0D	; 13
     798:	0e 94 30 3b 	call	0x7660	; 0x7660 <_ZN5Print5printEPKc>
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	3b de       	rcall	.-906    	; 0x416 <_Z8printTabh>
     7a0:	82 e8       	ldi	r24, 0x82	; 130
     7a2:	99 e0       	ldi	r25, 0x09	; 9
     7a4:	0e 94 d7 30 	call	0x61ae	; 0x61ae <_ZN8SPIFlash9eraseChipEv>
     7a8:	88 23       	and	r24, r24
     7aa:	a1 f0       	breq	.+40     	; 0x7d4 <_Z13eraseChipTestv+0x48>
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	44 de       	rcall	.-888    	; 0x438 <_Z4passb>
     7b0:	61 e5       	ldi	r22, 0x51	; 81
     7b2:	72 e0       	ldi	r23, 0x02	; 2
     7b4:	85 e5       	ldi	r24, 0x55	; 85
     7b6:	9d e0       	ldi	r25, 0x0D	; 13
     7b8:	0e 94 30 3b 	call	0x7660	; 0x7660 <_ZN5Print5printEPKc>
     7bc:	2f ef       	ldi	r18, 0xFF	; 255
     7be:	83 ed       	ldi	r24, 0xD3	; 211
     7c0:	90 e3       	ldi	r25, 0x30	; 48
     7c2:	21 50       	subi	r18, 0x01	; 1
     7c4:	80 40       	sbci	r24, 0x00	; 0
     7c6:	90 40       	sbci	r25, 0x00	; 0
     7c8:	e1 f7       	brne	.-8      	; 0x7c2 <_Z13eraseChipTestv+0x36>
     7ca:	00 c0       	rjmp	.+0      	; 0x7cc <_Z13eraseChipTestv+0x40>
     7cc:	00 00       	nop
     7ce:	81 e0       	ldi	r24, 0x01	; 1
     7d0:	22 de       	rcall	.-956    	; 0x416 <_Z8printTabh>
     7d2:	0e ce       	rjmp	.-996    	; 0x3f0 <_Z9printLinev>
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	30 ce       	rjmp	.-928    	; 0x438 <_Z4passb>

000007d8 <_Z5getIDv>:
     7d8:	8f 92       	push	r8
     7da:	9f 92       	push	r9
     7dc:	af 92       	push	r10
     7de:	bf 92       	push	r11
     7e0:	cf 92       	push	r12
     7e2:	df 92       	push	r13
     7e4:	ef 92       	push	r14
     7e6:	ff 92       	push	r15
     7e8:	85 e5       	ldi	r24, 0x55	; 85
     7ea:	9d e0       	ldi	r25, 0x0D	; 13
     7ec:	0e 94 38 3b 	call	0x7670	; 0x7670 <_ZN5Print7printlnEv>
     7f0:	82 e8       	ldi	r24, 0x82	; 130
     7f2:	99 e0       	ldi	r25, 0x09	; 9
     7f4:	0e 94 9f 2d 	call	0x5b3e	; 0x5b3e <_ZN8SPIFlash10getJEDECIDEv>
     7f8:	6b 01       	movw	r12, r22
     7fa:	7c 01       	movw	r14, r24
     7fc:	67 2b       	or	r22, r23
     7fe:	68 2b       	or	r22, r24
     800:	69 2b       	or	r22, r25
     802:	09 f4       	brne	.+2      	; 0x806 <_Z5getIDv+0x2e>
     804:	b3 c0       	rjmp	.+358    	; 0x96c <_Z5getIDv+0x194>
     806:	6f e5       	ldi	r22, 0x5F	; 95
     808:	72 e0       	ldi	r23, 0x02	; 2
     80a:	85 e5       	ldi	r24, 0x55	; 85
     80c:	9d e0       	ldi	r25, 0x0D	; 13
     80e:	0e 94 30 3b 	call	0x7660	; 0x7660 <_ZN5Print5printEPKc>
     812:	20 e1       	ldi	r18, 0x10	; 16
     814:	30 e0       	ldi	r19, 0x00	; 0
     816:	b7 01       	movw	r22, r14
     818:	a6 01       	movw	r20, r12
     81a:	85 e5       	ldi	r24, 0x55	; 85
     81c:	9d e0       	ldi	r25, 0x0D	; 13
     81e:	0e 94 d4 3b 	call	0x77a8	; 0x77a8 <_ZN5Print7printlnEmi>
     822:	6c e6       	ldi	r22, 0x6C	; 108
     824:	72 e0       	ldi	r23, 0x02	; 2
     826:	85 e5       	ldi	r24, 0x55	; 85
     828:	9d e0       	ldi	r25, 0x0D	; 13
     82a:	0e 94 30 3b 	call	0x7660	; 0x7660 <_ZN5Print5printEPKc>
     82e:	b7 01       	movw	r22, r14
     830:	88 27       	eor	r24, r24
     832:	99 27       	eor	r25, r25
     834:	40 e1       	ldi	r20, 0x10	; 16
     836:	50 e0       	ldi	r21, 0x00	; 0
     838:	85 e5       	ldi	r24, 0x55	; 85
     83a:	9d e0       	ldi	r25, 0x0D	; 13
     83c:	0e 94 c4 3b 	call	0x7788	; 0x7788 <_ZN5Print7printlnEhi>
     840:	67 e7       	ldi	r22, 0x77	; 119
     842:	72 e0       	ldi	r23, 0x02	; 2
     844:	85 e5       	ldi	r24, 0x55	; 85
     846:	9d e0       	ldi	r25, 0x0D	; 13
     848:	0e 94 30 3b 	call	0x7660	; 0x7660 <_ZN5Print5printEPKc>
     84c:	8d 2c       	mov	r8, r13
     84e:	9e 2c       	mov	r9, r14
     850:	af 2c       	mov	r10, r15
     852:	bb 24       	eor	r11, r11
     854:	40 e1       	ldi	r20, 0x10	; 16
     856:	50 e0       	ldi	r21, 0x00	; 0
     858:	68 2d       	mov	r22, r8
     85a:	85 e5       	ldi	r24, 0x55	; 85
     85c:	9d e0       	ldi	r25, 0x0D	; 13
     85e:	0e 94 c4 3b 	call	0x7788	; 0x7788 <_ZN5Print7printlnEhi>
     862:	65 e8       	ldi	r22, 0x85	; 133
     864:	72 e0       	ldi	r23, 0x02	; 2
     866:	85 e5       	ldi	r24, 0x55	; 85
     868:	9d e0       	ldi	r25, 0x0D	; 13
     86a:	0e 94 30 3b 	call	0x7660	; 0x7660 <_ZN5Print5printEPKc>
     86e:	82 e8       	ldi	r24, 0x82	; 130
     870:	99 e0       	ldi	r25, 0x09	; 9
     872:	0e 94 88 2d 	call	0x5b10	; 0x5b10 <_ZN8SPIFlash11getCapacityEv>
     876:	ab 01       	movw	r20, r22
     878:	bc 01       	movw	r22, r24
     87a:	2a e0       	ldi	r18, 0x0A	; 10
     87c:	30 e0       	ldi	r19, 0x00	; 0
     87e:	85 e5       	ldi	r24, 0x55	; 85
     880:	9d e0       	ldi	r25, 0x0D	; 13
     882:	0e 94 d4 3b 	call	0x77a8	; 0x77a8 <_ZN5Print7printlnEmi>
     886:	60 e9       	ldi	r22, 0x90	; 144
     888:	72 e0       	ldi	r23, 0x02	; 2
     88a:	85 e5       	ldi	r24, 0x55	; 85
     88c:	9d e0       	ldi	r25, 0x0D	; 13
     88e:	0e 94 30 3b 	call	0x7660	; 0x7660 <_ZN5Print5printEPKc>
     892:	82 e8       	ldi	r24, 0x82	; 130
     894:	99 e0       	ldi	r25, 0x09	; 9
     896:	0e 94 8e 2d 	call	0x5b1c	; 0x5b1c <_ZN8SPIFlash10getMaxPageEv>
     89a:	ab 01       	movw	r20, r22
     89c:	bc 01       	movw	r22, r24
     89e:	2a e0       	ldi	r18, 0x0A	; 10
     8a0:	30 e0       	ldi	r19, 0x00	; 0
     8a2:	85 e5       	ldi	r24, 0x55	; 85
     8a4:	9d e0       	ldi	r25, 0x0D	; 13
     8a6:	0e 94 d4 3b 	call	0x77a8	; 0x77a8 <_ZN5Print7printlnEmi>
     8aa:	de dd       	rcall	.-1092   	; 0x468 <_Z13printUniqueIDv>
     8ac:	86 ec       	ldi	r24, 0xC6	; 198
     8ae:	9b e0       	ldi	r25, 0x0B	; 11
     8b0:	0e 94 ba 2a 	call	0x5574	; 0x5574 <_ZN3LCD5clearEv>
     8b4:	6f e5       	ldi	r22, 0x5F	; 95
     8b6:	72 e0       	ldi	r23, 0x02	; 2
     8b8:	86 ec       	ldi	r24, 0xC6	; 198
     8ba:	9b e0       	ldi	r25, 0x0B	; 11
     8bc:	0e 94 30 3b 	call	0x7660	; 0x7660 <_ZN5Print5printEPKc>
     8c0:	20 e1       	ldi	r18, 0x10	; 16
     8c2:	30 e0       	ldi	r19, 0x00	; 0
     8c4:	b7 01       	movw	r22, r14
     8c6:	a6 01       	movw	r20, r12
     8c8:	86 ec       	ldi	r24, 0xC6	; 198
     8ca:	9b e0       	ldi	r25, 0x0B	; 11
     8cc:	0e 94 b2 3b 	call	0x7764	; 0x7764 <_ZN5Print5printEmi>
     8d0:	41 e0       	ldi	r20, 0x01	; 1
     8d2:	60 e0       	ldi	r22, 0x00	; 0
     8d4:	86 ec       	ldi	r24, 0xC6	; 198
     8d6:	9b e0       	ldi	r25, 0x0B	; 11
     8d8:	0e 94 c0 2a 	call	0x5580	; 0x5580 <_ZN3LCD9setCursorEhh>
     8dc:	6c e9       	ldi	r22, 0x9C	; 156
     8de:	72 e0       	ldi	r23, 0x02	; 2
     8e0:	86 ec       	ldi	r24, 0xC6	; 198
     8e2:	9b e0       	ldi	r25, 0x0B	; 11
     8e4:	0e 94 30 3b 	call	0x7660	; 0x7660 <_ZN5Print5printEPKc>
     8e8:	82 e8       	ldi	r24, 0x82	; 130
     8ea:	99 e0       	ldi	r25, 0x09	; 9
     8ec:	0e 94 88 2d 	call	0x5b10	; 0x5b10 <_ZN8SPIFlash11getCapacityEv>
     8f0:	ab 01       	movw	r20, r22
     8f2:	bc 01       	movw	r22, r24
     8f4:	2a e0       	ldi	r18, 0x0A	; 10
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	86 ec       	ldi	r24, 0xC6	; 198
     8fa:	9b e0       	ldi	r25, 0x0B	; 11
     8fc:	0e 94 b2 3b 	call	0x7764	; 0x7764 <_ZN5Print5printEmi>
     900:	42 e0       	ldi	r20, 0x02	; 2
     902:	60 e0       	ldi	r22, 0x00	; 0
     904:	86 ec       	ldi	r24, 0xC6	; 198
     906:	9b e0       	ldi	r25, 0x0B	; 11
     908:	0e 94 c0 2a 	call	0x5580	; 0x5580 <_ZN3LCD9setCursorEhh>
     90c:	67 e7       	ldi	r22, 0x77	; 119
     90e:	72 e0       	ldi	r23, 0x02	; 2
     910:	86 ec       	ldi	r24, 0xC6	; 198
     912:	9b e0       	ldi	r25, 0x0B	; 11
     914:	0e 94 30 3b 	call	0x7660	; 0x7660 <_ZN5Print5printEPKc>
     918:	40 e1       	ldi	r20, 0x10	; 16
     91a:	50 e0       	ldi	r21, 0x00	; 0
     91c:	68 2d       	mov	r22, r8
     91e:	86 ec       	ldi	r24, 0xC6	; 198
     920:	9b e0       	ldi	r25, 0x0B	; 11
     922:	0e 94 be 3b 	call	0x777c	; 0x777c <_ZN5Print5printEhi>
     926:	43 e0       	ldi	r20, 0x03	; 3
     928:	60 e0       	ldi	r22, 0x00	; 0
     92a:	86 ec       	ldi	r24, 0xC6	; 198
     92c:	9b e0       	ldi	r25, 0x0B	; 11
     92e:	0e 94 c0 2a 	call	0x5580	; 0x5580 <_ZN3LCD9setCursorEhh>
     932:	60 e9       	ldi	r22, 0x90	; 144
     934:	72 e0       	ldi	r23, 0x02	; 2
     936:	86 ec       	ldi	r24, 0xC6	; 198
     938:	9b e0       	ldi	r25, 0x0B	; 11
     93a:	0e 94 30 3b 	call	0x7660	; 0x7660 <_ZN5Print5printEPKc>
     93e:	82 e8       	ldi	r24, 0x82	; 130
     940:	99 e0       	ldi	r25, 0x09	; 9
     942:	0e 94 8e 2d 	call	0x5b1c	; 0x5b1c <_ZN8SPIFlash10getMaxPageEv>
     946:	ab 01       	movw	r20, r22
     948:	bc 01       	movw	r22, r24
     94a:	2a e0       	ldi	r18, 0x0A	; 10
     94c:	30 e0       	ldi	r19, 0x00	; 0
     94e:	86 ec       	ldi	r24, 0xC6	; 198
     950:	9b e0       	ldi	r25, 0x0B	; 11
     952:	0e 94 b2 3b 	call	0x7764	; 0x7764 <_ZN5Print5printEmi>
     956:	2f ef       	ldi	r18, 0xFF	; 255
     958:	83 ed       	ldi	r24, 0xD3	; 211
     95a:	90 e3       	ldi	r25, 0x30	; 48
     95c:	21 50       	subi	r18, 0x01	; 1
     95e:	80 40       	sbci	r24, 0x00	; 0
     960:	90 40       	sbci	r25, 0x00	; 0
     962:	e1 f7       	brne	.-8      	; 0x95c <_Z5getIDv+0x184>
     964:	00 c0       	rjmp	.+0      	; 0x966 <_Z5getIDv+0x18e>
     966:	00 00       	nop
     968:	81 e0       	ldi	r24, 0x01	; 1
     96a:	01 c0       	rjmp	.+2      	; 0x96e <_Z5getIDv+0x196>
     96c:	80 e0       	ldi	r24, 0x00	; 0
     96e:	ff 90       	pop	r15
     970:	ef 90       	pop	r14
     972:	df 90       	pop	r13
     974:	cf 90       	pop	r12
     976:	bf 90       	pop	r11
     978:	af 90       	pop	r10
     97a:	9f 90       	pop	r9
     97c:	8f 90       	pop	r8
     97e:	08 95       	ret

00000980 <_Z11my_delay_msi>:
     980:	18 16       	cp	r1, r24
     982:	19 06       	cpc	r1, r25
     984:	44 f4       	brge	.+16     	; 0x996 <_Z11my_delay_msi+0x16>
     986:	ef e9       	ldi	r30, 0x9F	; 159
     988:	ff e0       	ldi	r31, 0x0F	; 15
     98a:	31 97       	sbiw	r30, 0x01	; 1
     98c:	f1 f7       	brne	.-4      	; 0x98a <_Z11my_delay_msi+0xa>
     98e:	00 c0       	rjmp	.+0      	; 0x990 <_Z11my_delay_msi+0x10>
     990:	00 00       	nop
     992:	01 97       	sbiw	r24, 0x01	; 1
     994:	f5 cf       	rjmp	.-22     	; 0x980 <_Z11my_delay_msi>
     996:	08 95       	ret

00000998 <_Z6Buzzerhm>:
     998:	8f 92       	push	r8
     99a:	9f 92       	push	r9
     99c:	af 92       	push	r10
     99e:	bf 92       	push	r11
     9a0:	ff 92       	push	r15
     9a2:	0f 93       	push	r16
     9a4:	1f 93       	push	r17
     9a6:	cf 93       	push	r28
     9a8:	df 93       	push	r29
     9aa:	4a 01       	movw	r8, r20
     9ac:	5b 01       	movw	r10, r22
     9ae:	c0 e0       	ldi	r28, 0x00	; 0
     9b0:	d0 e0       	ldi	r29, 0x00	; 0
     9b2:	08 2f       	mov	r16, r24
     9b4:	10 e0       	ldi	r17, 0x00	; 0
     9b6:	80 e4       	ldi	r24, 0x40	; 64
     9b8:	f8 2e       	mov	r15, r24
     9ba:	c0 17       	cp	r28, r16
     9bc:	d1 07       	cpc	r29, r17
     9be:	5c f4       	brge	.+22     	; 0x9d6 <_Z6Buzzerhm+0x3e>
     9c0:	3e 9a       	sbi	0x07, 6	; 7
     9c2:	98 b1       	in	r25, 0x08	; 8
     9c4:	9f 25       	eor	r25, r15
     9c6:	98 b9       	out	0x08, r25	; 8
     9c8:	c4 01       	movw	r24, r8
     9ca:	da df       	rcall	.-76     	; 0x980 <_Z11my_delay_msi>
     9cc:	98 b1       	in	r25, 0x08	; 8
     9ce:	9f 25       	eor	r25, r15
     9d0:	98 b9       	out	0x08, r25	; 8
     9d2:	21 96       	adiw	r28, 0x01	; 1
     9d4:	f2 cf       	rjmp	.-28     	; 0x9ba <_Z6Buzzerhm+0x22>
     9d6:	df 91       	pop	r29
     9d8:	cf 91       	pop	r28
     9da:	1f 91       	pop	r17
     9dc:	0f 91       	pop	r16
     9de:	ff 90       	pop	r15
     9e0:	bf 90       	pop	r11
     9e2:	af 90       	pop	r10
     9e4:	9f 90       	pop	r9
     9e6:	8f 90       	pop	r8
     9e8:	08 95       	ret

000009ea <_Z10leggiRighev>:
     9ea:	60 e2       	ldi	r22, 0x20	; 32
     9ec:	8f ef       	ldi	r24, 0xFF	; 255
     9ee:	9c e0       	ldi	r25, 0x0C	; 12
     9f0:	0e 94 15 38 	call	0x702a	; 0x702a <_ZN7TwoWire17beginTransmissionEh>
     9f4:	63 e0       	ldi	r22, 0x03	; 3
     9f6:	70 e0       	ldi	r23, 0x00	; 0
     9f8:	8f ef       	ldi	r24, 0xFF	; 255
     9fa:	9c e0       	ldi	r25, 0x0C	; 12
     9fc:	97 dc       	rcall	.-1746   	; 0x32c <_ZN7TwoWire5writeEi>
     9fe:	63 ec       	ldi	r22, 0xC3	; 195
     a00:	70 e0       	ldi	r23, 0x00	; 0
     a02:	8f ef       	ldi	r24, 0xFF	; 255
     a04:	9c e0       	ldi	r25, 0x0C	; 12
     a06:	92 dc       	rcall	.-1756   	; 0x32c <_ZN7TwoWire5writeEi>
     a08:	8f ef       	ldi	r24, 0xFF	; 255
     a0a:	9c e0       	ldi	r25, 0x0C	; 12
     a0c:	0e 94 96 38 	call	0x712c	; 0x712c <_ZN7TwoWire15endTransmissionEv>
     a10:	8f e1       	ldi	r24, 0x1F	; 31
     a12:	9e e4       	ldi	r25, 0x4E	; 78
     a14:	01 97       	sbiw	r24, 0x01	; 1
     a16:	f1 f7       	brne	.-4      	; 0xa14 <_Z10leggiRighev+0x2a>
     a18:	00 c0       	rjmp	.+0      	; 0xa1a <_Z10leggiRighev+0x30>
     a1a:	00 00       	nop
     a1c:	08 95       	ret

00000a1e <_Z12leggiColonnev>:
     a1e:	60 e2       	ldi	r22, 0x20	; 32
     a20:	8f ef       	ldi	r24, 0xFF	; 255
     a22:	9c e0       	ldi	r25, 0x0C	; 12
     a24:	0e 94 15 38 	call	0x702a	; 0x702a <_ZN7TwoWire17beginTransmissionEh>
     a28:	63 e0       	ldi	r22, 0x03	; 3
     a2a:	70 e0       	ldi	r23, 0x00	; 0
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	9c e0       	ldi	r25, 0x0C	; 12
     a30:	7d dc       	rcall	.-1798   	; 0x32c <_ZN7TwoWire5writeEi>
     a32:	6c e3       	ldi	r22, 0x3C	; 60
     a34:	70 e0       	ldi	r23, 0x00	; 0
     a36:	8f ef       	ldi	r24, 0xFF	; 255
     a38:	9c e0       	ldi	r25, 0x0C	; 12
     a3a:	78 dc       	rcall	.-1808   	; 0x32c <_ZN7TwoWire5writeEi>
     a3c:	8f ef       	ldi	r24, 0xFF	; 255
     a3e:	9c e0       	ldi	r25, 0x0C	; 12
     a40:	0e 94 96 38 	call	0x712c	; 0x712c <_ZN7TwoWire15endTransmissionEv>
     a44:	8f e1       	ldi	r24, 0x1F	; 31
     a46:	9e e4       	ldi	r25, 0x4E	; 78
     a48:	01 97       	sbiw	r24, 0x01	; 1
     a4a:	f1 f7       	brne	.-4      	; 0xa48 <_Z12leggiColonnev+0x2a>
     a4c:	00 c0       	rjmp	.+0      	; 0xa4e <_Z12leggiColonnev+0x30>
     a4e:	00 00       	nop
     a50:	08 95       	ret

00000a52 <_Z17leggi_IP_REGISTERv>:
     a52:	60 e2       	ldi	r22, 0x20	; 32
     a54:	8f ef       	ldi	r24, 0xFF	; 255
     a56:	9c e0       	ldi	r25, 0x0C	; 12
     a58:	0e 94 15 38 	call	0x702a	; 0x702a <_ZN7TwoWire17beginTransmissionEh>
     a5c:	60 e0       	ldi	r22, 0x00	; 0
     a5e:	70 e0       	ldi	r23, 0x00	; 0
     a60:	8f ef       	ldi	r24, 0xFF	; 255
     a62:	9c e0       	ldi	r25, 0x0C	; 12
     a64:	63 dc       	rcall	.-1850   	; 0x32c <_ZN7TwoWire5writeEi>
     a66:	8f ef       	ldi	r24, 0xFF	; 255
     a68:	9c e0       	ldi	r25, 0x0C	; 12
     a6a:	0e 94 96 38 	call	0x712c	; 0x712c <_ZN7TwoWire15endTransmissionEv>
     a6e:	8f e1       	ldi	r24, 0x1F	; 31
     a70:	9e e4       	ldi	r25, 0x4E	; 78
     a72:	01 97       	sbiw	r24, 0x01	; 1
     a74:	f1 f7       	brne	.-4      	; 0xa72 <_Z17leggi_IP_REGISTERv+0x20>
     a76:	00 c0       	rjmp	.+0      	; 0xa78 <_Z17leggi_IP_REGISTERv+0x26>
     a78:	00 00       	nop
     a7a:	08 95       	ret

00000a7c <_Z17leggi_OP_REGISTERv>:
     a7c:	60 e2       	ldi	r22, 0x20	; 32
     a7e:	8f ef       	ldi	r24, 0xFF	; 255
     a80:	9c e0       	ldi	r25, 0x0C	; 12
     a82:	0e 94 15 38 	call	0x702a	; 0x702a <_ZN7TwoWire17beginTransmissionEh>
     a86:	61 e0       	ldi	r22, 0x01	; 1
     a88:	70 e0       	ldi	r23, 0x00	; 0
     a8a:	8f ef       	ldi	r24, 0xFF	; 255
     a8c:	9c e0       	ldi	r25, 0x0C	; 12
     a8e:	4e dc       	rcall	.-1892   	; 0x32c <_ZN7TwoWire5writeEi>
     a90:	8f ef       	ldi	r24, 0xFF	; 255
     a92:	9c e0       	ldi	r25, 0x0C	; 12
     a94:	0e 94 96 38 	call	0x712c	; 0x712c <_ZN7TwoWire15endTransmissionEv>
     a98:	8f e1       	ldi	r24, 0x1F	; 31
     a9a:	9e e4       	ldi	r25, 0x4E	; 78
     a9c:	01 97       	sbiw	r24, 0x01	; 1
     a9e:	f1 f7       	brne	.-4      	; 0xa9c <_Z17leggi_OP_REGISTERv+0x20>
     aa0:	00 c0       	rjmp	.+0      	; 0xaa2 <_Z17leggi_OP_REGISTERv+0x26>
     aa2:	00 00       	nop
     aa4:	08 95       	ret

00000aa6 <_Z10displayLCDP6Stringii>:
     aa6:	cf 92       	push	r12
     aa8:	df 92       	push	r13
     aaa:	ef 92       	push	r14
     aac:	ff 92       	push	r15
     aae:	0f 93       	push	r16
     ab0:	1f 93       	push	r17
     ab2:	cf 93       	push	r28
     ab4:	df 93       	push	r29
     ab6:	cd b7       	in	r28, 0x3d	; 61
     ab8:	de b7       	in	r29, 0x3e	; 62
     aba:	2c 97       	sbiw	r28, 0x0c	; 12
     abc:	0f b6       	in	r0, 0x3f	; 63
     abe:	f8 94       	cli
     ac0:	de bf       	out	0x3e, r29	; 62
     ac2:	0f be       	out	0x3f, r0	; 63
     ac4:	cd bf       	out	0x3d, r28	; 61
     ac6:	8c 01       	movw	r16, r24
     ac8:	6b 01       	movw	r12, r22
     aca:	7a 01       	movw	r14, r20
     acc:	86 ec       	ldi	r24, 0xC6	; 198
     ace:	9b e0       	ldi	r25, 0x0B	; 11
     ad0:	0e 94 ba 2a 	call	0x5574	; 0x5574 <_ZN3LCD5clearEv>
     ad4:	83 e0       	ldi	r24, 0x03	; 3
     ad6:	c8 16       	cp	r12, r24
     ad8:	d1 04       	cpc	r13, r1
     ada:	0c f4       	brge	.+2      	; 0xade <_Z10displayLCDP6Stringii+0x38>
     adc:	47 c0       	rjmp	.+142    	; 0xb6c <_Z10displayLCDP6Stringii+0xc6>
     ade:	40 91 80 0a 	lds	r20, 0x0A80	; 0x800a80 <UltimoPassaggioStato>
     ae2:	50 91 81 0a 	lds	r21, 0x0A81	; 0x800a81 <UltimoPassaggioStato+0x1>
     ae6:	60 91 82 0a 	lds	r22, 0x0A82	; 0x800a82 <UltimoPassaggioStato+0x2>
     aea:	70 91 83 0a 	lds	r23, 0x0A83	; 0x800a83 <UltimoPassaggioStato+0x3>
     aee:	80 91 7c 0a 	lds	r24, 0x0A7C	; 0x800a7c <Timer>
     af2:	90 91 7d 0a 	lds	r25, 0x0A7D	; 0x800a7d <Timer+0x1>
     af6:	a0 91 7e 0a 	lds	r26, 0x0A7E	; 0x800a7e <Timer+0x2>
     afa:	b0 91 7f 0a 	lds	r27, 0x0A7F	; 0x800a7f <Timer+0x3>
     afe:	48 0f       	add	r20, r24
     b00:	59 1f       	adc	r21, r25
     b02:	6a 1f       	adc	r22, r26
     b04:	7b 1f       	adc	r23, r27
     b06:	41 50       	subi	r20, 0x01	; 1
     b08:	51 09       	sbc	r21, r1
     b0a:	61 09       	sbc	r22, r1
     b0c:	71 09       	sbc	r23, r1
     b0e:	80 91 84 0a 	lds	r24, 0x0A84	; 0x800a84 <secs>
     b12:	90 91 85 0a 	lds	r25, 0x0A85	; 0x800a85 <secs+0x1>
     b16:	a0 91 86 0a 	lds	r26, 0x0A86	; 0x800a86 <secs+0x2>
     b1a:	b0 91 87 0a 	lds	r27, 0x0A87	; 0x800a87 <secs+0x3>
     b1e:	48 1b       	sub	r20, r24
     b20:	59 0b       	sbc	r21, r25
     b22:	6a 0b       	sbc	r22, r26
     b24:	7b 0b       	sbc	r23, r27
     b26:	2a e0       	ldi	r18, 0x0A	; 10
     b28:	ce 01       	movw	r24, r28
     b2a:	07 96       	adiw	r24, 0x07	; 7
     b2c:	0e 94 c0 3e 	call	0x7d80	; 0x7d80 <_ZN6StringC1Emh>
     b30:	62 ea       	ldi	r22, 0xA2	; 162
     b32:	72 e0       	ldi	r23, 0x02	; 2
     b34:	ce 01       	movw	r24, r28
     b36:	01 96       	adiw	r24, 0x01	; 1
     b38:	0e 94 01 3e 	call	0x7c02	; 0x7c02 <_ZN6StringC1EPKc>
     b3c:	be 01       	movw	r22, r28
     b3e:	69 5f       	subi	r22, 0xF9	; 249
     b40:	7f 4f       	sbci	r23, 0xFF	; 255
     b42:	ce 01       	movw	r24, r28
     b44:	01 96       	adiw	r24, 0x01	; 1
     b46:	0e 94 59 3f 	call	0x7eb2	; 0x7eb2 <_ZplRK15StringSumHelperRK6String>
     b4a:	6a ea       	ldi	r22, 0xAA	; 170
     b4c:	72 e0       	ldi	r23, 0x02	; 2
     b4e:	0e 94 6a 3f 	call	0x7ed4	; 0x7ed4 <_ZplRK15StringSumHelperPKc>
     b52:	bc 01       	movw	r22, r24
     b54:	86 ec       	ldi	r24, 0xC6	; 198
     b56:	9b e0       	ldi	r25, 0x0B	; 11
     b58:	0e 94 22 3b 	call	0x7644	; 0x7644 <_ZN5Print5printERK6String>
     b5c:	ce 01       	movw	r24, r28
     b5e:	01 96       	adiw	r24, 0x01	; 1
     b60:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <_ZN6StringD1Ev>
     b64:	ce 01       	movw	r24, r28
     b66:	07 96       	adiw	r24, 0x07	; 7
     b68:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <_ZN6StringD1Ev>
     b6c:	61 e0       	ldi	r22, 0x01	; 1
     b6e:	86 ec       	ldi	r24, 0xC6	; 198
     b70:	9b e0       	ldi	r25, 0x0B	; 11
     b72:	0e 94 31 3b 	call	0x7662	; 0x7662 <_ZN5Print5printEc>
     b76:	41 e0       	ldi	r20, 0x01	; 1
     b78:	60 e0       	ldi	r22, 0x00	; 0
     b7a:	86 ec       	ldi	r24, 0xC6	; 198
     b7c:	9b e0       	ldi	r25, 0x0B	; 11
     b7e:	0e 94 c0 2a 	call	0x5580	; 0x5580 <_ZN3LCD9setCursorEhh>
     b82:	b8 01       	movw	r22, r16
     b84:	6a 5f       	subi	r22, 0xFA	; 250
     b86:	7f 4f       	sbci	r23, 0xFF	; 255
     b88:	86 ec       	ldi	r24, 0xC6	; 198
     b8a:	9b e0       	ldi	r25, 0x0B	; 11
     b8c:	0e 94 22 3b 	call	0x7644	; 0x7644 <_ZN5Print5printERK6String>
     b90:	42 e0       	ldi	r20, 0x02	; 2
     b92:	60 e0       	ldi	r22, 0x00	; 0
     b94:	86 ec       	ldi	r24, 0xC6	; 198
     b96:	9b e0       	ldi	r25, 0x0B	; 11
     b98:	0e 94 c0 2a 	call	0x5580	; 0x5580 <_ZN3LCD9setCursorEhh>
     b9c:	b8 01       	movw	r22, r16
     b9e:	64 5f       	subi	r22, 0xF4	; 244
     ba0:	7f 4f       	sbci	r23, 0xFF	; 255
     ba2:	86 ec       	ldi	r24, 0xC6	; 198
     ba4:	9b e0       	ldi	r25, 0x0B	; 11
     ba6:	0e 94 22 3b 	call	0x7644	; 0x7644 <_ZN5Print5printERK6String>
     baa:	43 e0       	ldi	r20, 0x03	; 3
     bac:	60 e0       	ldi	r22, 0x00	; 0
     bae:	86 ec       	ldi	r24, 0xC6	; 198
     bb0:	9b e0       	ldi	r25, 0x0B	; 11
     bb2:	0e 94 c0 2a 	call	0x5580	; 0x5580 <_ZN3LCD9setCursorEhh>
     bb6:	b8 01       	movw	r22, r16
     bb8:	6e 5e       	subi	r22, 0xEE	; 238
     bba:	7f 4f       	sbci	r23, 0xFF	; 255
     bbc:	86 ec       	ldi	r24, 0xC6	; 198
     bbe:	9b e0       	ldi	r25, 0x0B	; 11
     bc0:	0e 94 22 3b 	call	0x7644	; 0x7644 <_ZN5Print5printERK6String>
     bc4:	c7 01       	movw	r24, r14
     bc6:	dc de       	rcall	.-584    	; 0x980 <_Z11my_delay_msi>
     bc8:	2c 96       	adiw	r28, 0x0c	; 12
     bca:	0f b6       	in	r0, 0x3f	; 63
     bcc:	f8 94       	cli
     bce:	de bf       	out	0x3e, r29	; 62
     bd0:	0f be       	out	0x3f, r0	; 63
     bd2:	cd bf       	out	0x3d, r28	; 61
     bd4:	df 91       	pop	r29
     bd6:	cf 91       	pop	r28
     bd8:	1f 91       	pop	r17
     bda:	0f 91       	pop	r16
     bdc:	ff 90       	pop	r15
     bde:	ef 90       	pop	r14
     be0:	df 90       	pop	r13
     be2:	cf 90       	pop	r12
     be4:	08 95       	ret

00000be6 <_Z11avanzaStatom>:
     be6:	60 93 7c 0a 	sts	0x0A7C, r22	; 0x800a7c <Timer>
     bea:	70 93 7d 0a 	sts	0x0A7D, r23	; 0x800a7d <Timer+0x1>
     bee:	80 93 7e 0a 	sts	0x0A7E, r24	; 0x800a7e <Timer+0x2>
     bf2:	90 93 7f 0a 	sts	0x0A7F, r25	; 0x800a7f <Timer+0x3>
     bf6:	86 e7       	ldi	r24, 0x76	; 118
     bf8:	9a e0       	ldi	r25, 0x0A	; 10
     bfa:	0e 94 27 1c 	call	0x384e	; 0x384e <_ZNK8DateTime11secondstimeEv>
     bfe:	60 93 80 0a 	sts	0x0A80, r22	; 0x800a80 <UltimoPassaggioStato>
     c02:	70 93 81 0a 	sts	0x0A81, r23	; 0x800a81 <UltimoPassaggioStato+0x1>
     c06:	80 93 82 0a 	sts	0x0A82, r24	; 0x800a82 <UltimoPassaggioStato+0x2>
     c0a:	90 93 83 0a 	sts	0x0A83, r25	; 0x800a83 <UltimoPassaggioStato+0x3>
     c0e:	80 91 9f 0b 	lds	r24, 0x0B9F	; 0x800b9f <stato_procedura>
     c12:	90 91 a0 0b 	lds	r25, 0x0BA0	; 0x800ba0 <stato_procedura+0x1>
     c16:	01 96       	adiw	r24, 0x01	; 1
     c18:	90 93 a0 0b 	sts	0x0BA0, r25	; 0x800ba0 <stato_procedura+0x1>
     c1c:	80 93 9f 0b 	sts	0x0B9F, r24	; 0x800b9f <stato_procedura>
     c20:	08 95       	ret

00000c22 <_Z14leggiTAG_Mezzob>:
     c22:	af 92       	push	r10
     c24:	bf 92       	push	r11
     c26:	cf 92       	push	r12
     c28:	df 92       	push	r13
     c2a:	ef 92       	push	r14
     c2c:	ff 92       	push	r15
     c2e:	0f 93       	push	r16
     c30:	1f 93       	push	r17
     c32:	cf 93       	push	r28
     c34:	df 93       	push	r29
     c36:	cd b7       	in	r28, 0x3d	; 61
     c38:	de b7       	in	r29, 0x3e	; 62
     c3a:	a2 97       	sbiw	r28, 0x22	; 34
     c3c:	0f b6       	in	r0, 0x3f	; 63
     c3e:	f8 94       	cli
     c40:	de bf       	out	0x3e, r29	; 62
     c42:	0f be       	out	0x3f, r0	; 63
     c44:	cd bf       	out	0x3d, r28	; 61
     c46:	5c 01       	movw	r10, r24
     c48:	f6 2e       	mov	r15, r22
     c4a:	63 ec       	ldi	r22, 0xC3	; 195
     c4c:	71 e0       	ldi	r23, 0x01	; 1
     c4e:	ce 01       	movw	r24, r28
     c50:	4d 96       	adiw	r24, 0x1d	; 29
     c52:	0e 94 01 3e 	call	0x7c02	; 0x7c02 <_ZN6StringC1EPKc>
     c56:	08 ec       	ldi	r16, 0xC8	; 200
     c58:	10 e0       	ldi	r17, 0x00	; 0
     c5a:	26 ee       	ldi	r18, 0xE6	; 230
     c5c:	3b e0       	ldi	r19, 0x0B	; 11
     c5e:	4f ed       	ldi	r20, 0xDF	; 223
     c60:	5b e0       	ldi	r21, 0x0B	; 11
     c62:	60 e0       	ldi	r22, 0x00	; 0
     c64:	8f ea       	ldi	r24, 0xAF	; 175
     c66:	9b e0       	ldi	r25, 0x0B	; 11
     c68:	0e 94 9a 19 	call	0x3334	; 0x3334 <_ZN14Adafruit_PN53219readPassiveTargetIDEhPhS0_j>
     c6c:	80 93 e7 0b 	sts	0x0BE7, r24	; 0x800be7 <success>
     c70:	88 23       	and	r24, r24
     c72:	09 f4       	brne	.+2      	; 0xc76 <_Z14leggiTAG_Mezzob+0x54>
     c74:	9d c0       	rjmp	.+314    	; 0xdb0 <_Z14leggiTAG_Mezzob+0x18e>
     c76:	4e e1       	ldi	r20, 0x1E	; 30
     c78:	50 e0       	ldi	r21, 0x00	; 0
     c7a:	60 e0       	ldi	r22, 0x00	; 0
     c7c:	70 e0       	ldi	r23, 0x00	; 0
     c7e:	82 e0       	ldi	r24, 0x02	; 2
     c80:	8b de       	rcall	.-746    	; 0x998 <_Z6Buzzerhm>
     c82:	80 91 e6 0b 	lds	r24, 0x0BE6	; 0x800be6 <uidLength>
     c86:	84 30       	cpi	r24, 0x04	; 4
     c88:	09 f0       	breq	.+2      	; 0xc8c <_Z14leggiTAG_Mezzob+0x6a>
     c8a:	8c c0       	rjmp	.+280    	; 0xda4 <_Z14leggiTAG_Mezzob+0x182>
     c8c:	86 e0       	ldi	r24, 0x06	; 6
     c8e:	ec e4       	ldi	r30, 0x4C	; 76
     c90:	f1 e0       	ldi	r31, 0x01	; 1
     c92:	de 01       	movw	r26, r28
     c94:	57 96       	adiw	r26, 0x17	; 23
     c96:	01 90       	ld	r0, Z+
     c98:	0d 92       	st	X+, r0
     c9a:	8a 95       	dec	r24
     c9c:	e1 f7       	brne	.-8      	; 0xc96 <_Z14leggiTAG_Mezzob+0x74>
     c9e:	ce 01       	movw	r24, r28
     ca0:	47 96       	adiw	r24, 0x17	; 23
     ca2:	6c 01       	movw	r12, r24
     ca4:	e1 2c       	mov	r14, r1
     ca6:	04 e0       	ldi	r16, 0x04	; 4
     ca8:	10 e0       	ldi	r17, 0x00	; 0
     caa:	20 e0       	ldi	r18, 0x00	; 0
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	44 e0       	ldi	r20, 0x04	; 4
     cb0:	6f ed       	ldi	r22, 0xDF	; 223
     cb2:	7b e0       	ldi	r23, 0x0B	; 11
     cb4:	8f ea       	ldi	r24, 0xAF	; 175
     cb6:	9b e0       	ldi	r25, 0x0B	; 11
     cb8:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN14Adafruit_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_>
     cbc:	80 93 e7 0b 	sts	0x0BE7, r24	; 0x800be7 <success>
     cc0:	88 23       	and	r24, r24
     cc2:	09 f4       	brne	.+2      	; 0xcc6 <_Z14leggiTAG_Mezzob+0xa4>
     cc4:	5f c0       	rjmp	.+190    	; 0xd84 <_Z14leggiTAG_Mezzob+0x162>
     cc6:	ff 20       	and	r15, r15
     cc8:	99 f0       	breq	.+38     	; 0xcf0 <_Z14leggiTAG_Mezzob+0xce>
     cca:	80 e1       	ldi	r24, 0x10	; 16
     ccc:	e2 eb       	ldi	r30, 0xB2	; 178
     cce:	f8 e0       	ldi	r31, 0x08	; 8
     cd0:	de 01       	movw	r26, r28
     cd2:	11 96       	adiw	r26, 0x01	; 1
     cd4:	01 90       	ld	r0, Z+
     cd6:	0d 92       	st	X+, r0
     cd8:	8a 95       	dec	r24
     cda:	e1 f7       	brne	.-8      	; 0xcd4 <_Z14leggiTAG_Mezzob+0xb2>
     cdc:	ae 01       	movw	r20, r28
     cde:	4f 5f       	subi	r20, 0xFF	; 255
     ce0:	5f 4f       	sbci	r21, 0xFF	; 255
     ce2:	64 e0       	ldi	r22, 0x04	; 4
     ce4:	8f ea       	ldi	r24, 0xAF	; 175
     ce6:	9b e0       	ldi	r25, 0x0B	; 11
     ce8:	0e 94 81 1a 	call	0x3502	; 0x3502 <_ZN14Adafruit_PN53228mifareclassic_WriteDataBlockEhPh>
     cec:	80 93 e7 0b 	sts	0x0BE7, r24	; 0x800be7 <success>
     cf0:	ae 01       	movw	r20, r28
     cf2:	4f 5f       	subi	r20, 0xFF	; 255
     cf4:	5f 4f       	sbci	r21, 0xFF	; 255
     cf6:	64 e0       	ldi	r22, 0x04	; 4
     cf8:	8f ea       	ldi	r24, 0xAF	; 175
     cfa:	9b e0       	ldi	r25, 0x0B	; 11
     cfc:	0e 94 4e 1a 	call	0x349c	; 0x349c <_ZN14Adafruit_PN53227mifareclassic_ReadDataBlockEhPh>
     d00:	80 93 e7 0b 	sts	0x0BE7, r24	; 0x800be7 <success>
     d04:	88 23       	and	r24, r24
     d06:	89 f1       	breq	.+98     	; 0xd6a <_Z14leggiTAG_Mezzob+0x148>
     d08:	60 eb       	ldi	r22, 0xB0	; 176
     d0a:	72 e0       	ldi	r23, 0x02	; 2
     d0c:	85 e5       	ldi	r24, 0x55	; 85
     d0e:	9d e0       	ldi	r25, 0x0D	; 13
     d10:	0e 94 5b 3b 	call	0x76b6	; 0x76b6 <_ZN5Print7printlnEPKc>
     d14:	be 01       	movw	r22, r28
     d16:	6f 5f       	subi	r22, 0xFF	; 255
     d18:	7f 4f       	sbci	r23, 0xFF	; 255
     d1a:	ce 01       	movw	r24, r28
     d1c:	41 96       	adiw	r24, 0x11	; 17
     d1e:	0e 94 01 3e 	call	0x7c02	; 0x7c02 <_ZN6StringC1EPKc>
     d22:	be 01       	movw	r22, r28
     d24:	6f 5e       	subi	r22, 0xEF	; 239
     d26:	7f 4f       	sbci	r23, 0xFF	; 255
     d28:	85 e5       	ldi	r24, 0x55	; 85
     d2a:	9d e0       	ldi	r25, 0x0D	; 13
     d2c:	0e 94 4b 3b 	call	0x7696	; 0x7696 <_ZN5Print7printlnERK6String>
     d30:	8d 89       	ldd	r24, Y+21	; 0x15
     d32:	9e 89       	ldd	r25, Y+22	; 0x16
     d34:	06 97       	sbiw	r24, 0x06	; 6
     d36:	59 f4       	brne	.+22     	; 0xd4e <_Z14leggiTAG_Mezzob+0x12c>
     d38:	be 01       	movw	r22, r28
     d3a:	6f 5e       	subi	r22, 0xEF	; 239
     d3c:	7f 4f       	sbci	r23, 0xFF	; 255
     d3e:	c5 01       	movw	r24, r10
     d40:	0e 94 50 3e 	call	0x7ca0	; 0x7ca0 <_ZN6StringC1EOS_>
     d44:	ce 01       	movw	r24, r28
     d46:	41 96       	adiw	r24, 0x11	; 17
     d48:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <_ZN6StringD1Ev>
     d4c:	37 c0       	rjmp	.+110    	; 0xdbc <_Z14leggiTAG_Mezzob+0x19a>
     d4e:	9f ef       	ldi	r25, 0xFF	; 255
     d50:	21 ee       	ldi	r18, 0xE1	; 225
     d52:	84 e0       	ldi	r24, 0x04	; 4
     d54:	91 50       	subi	r25, 0x01	; 1
     d56:	20 40       	sbci	r18, 0x00	; 0
     d58:	80 40       	sbci	r24, 0x00	; 0
     d5a:	e1 f7       	brne	.-8      	; 0xd54 <_Z14leggiTAG_Mezzob+0x132>
     d5c:	00 c0       	rjmp	.+0      	; 0xd5e <_Z14leggiTAG_Mezzob+0x13c>
     d5e:	00 00       	nop
     d60:	ce 01       	movw	r24, r28
     d62:	41 96       	adiw	r24, 0x11	; 17
     d64:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <_ZN6StringD1Ev>
     d68:	1d c0       	rjmp	.+58     	; 0xda4 <_Z14leggiTAG_Mezzob+0x182>
     d6a:	86 ec       	ldi	r24, 0xC6	; 198
     d6c:	9b e0       	ldi	r25, 0x0B	; 11
     d6e:	0e 94 ba 2a 	call	0x5574	; 0x5574 <_ZN3LCD5clearEv>
     d72:	41 e0       	ldi	r20, 0x01	; 1
     d74:	60 e0       	ldi	r22, 0x00	; 0
     d76:	86 ec       	ldi	r24, 0xC6	; 198
     d78:	9b e0       	ldi	r25, 0x0B	; 11
     d7a:	0e 94 c0 2a 	call	0x5580	; 0x5580 <_ZN3LCD9setCursorEhh>
     d7e:	6e eb       	ldi	r22, 0xBE	; 190
     d80:	72 e0       	ldi	r23, 0x02	; 2
     d82:	0c c0       	rjmp	.+24     	; 0xd9c <_Z14leggiTAG_Mezzob+0x17a>
     d84:	86 ec       	ldi	r24, 0xC6	; 198
     d86:	9b e0       	ldi	r25, 0x0B	; 11
     d88:	0e 94 ba 2a 	call	0x5574	; 0x5574 <_ZN3LCD5clearEv>
     d8c:	41 e0       	ldi	r20, 0x01	; 1
     d8e:	60 e0       	ldi	r22, 0x00	; 0
     d90:	86 ec       	ldi	r24, 0xC6	; 198
     d92:	9b e0       	ldi	r25, 0x0B	; 11
     d94:	0e 94 c0 2a 	call	0x5580	; 0x5580 <_ZN3LCD9setCursorEhh>
     d98:	68 ec       	ldi	r22, 0xC8	; 200
     d9a:	72 e0       	ldi	r23, 0x02	; 2
     d9c:	86 ec       	ldi	r24, 0xC6	; 198
     d9e:	9b e0       	ldi	r25, 0x0B	; 11
     da0:	0e 94 30 3b 	call	0x7660	; 0x7660 <_ZN5Print5printEPKc>
     da4:	63 ec       	ldi	r22, 0xC3	; 195
     da6:	71 e0       	ldi	r23, 0x01	; 1
     da8:	85 e5       	ldi	r24, 0x55	; 85
     daa:	9d e0       	ldi	r25, 0x0D	; 13
     dac:	0e 94 5b 3b 	call	0x76b6	; 0x76b6 <_ZN5Print7printlnEPKc>
     db0:	be 01       	movw	r22, r28
     db2:	63 5e       	subi	r22, 0xE3	; 227
     db4:	7f 4f       	sbci	r23, 0xFF	; 255
     db6:	c5 01       	movw	r24, r10
     db8:	0e 94 50 3e 	call	0x7ca0	; 0x7ca0 <_ZN6StringC1EOS_>
     dbc:	ce 01       	movw	r24, r28
     dbe:	4d 96       	adiw	r24, 0x1d	; 29
     dc0:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <_ZN6StringD1Ev>
     dc4:	c5 01       	movw	r24, r10
     dc6:	a2 96       	adiw	r28, 0x22	; 34
     dc8:	0f b6       	in	r0, 0x3f	; 63
     dca:	f8 94       	cli
     dcc:	de bf       	out	0x3e, r29	; 62
     dce:	0f be       	out	0x3f, r0	; 63
     dd0:	cd bf       	out	0x3d, r28	; 61
     dd2:	df 91       	pop	r29
     dd4:	cf 91       	pop	r28
     dd6:	1f 91       	pop	r17
     dd8:	0f 91       	pop	r16
     dda:	ff 90       	pop	r15
     ddc:	ef 90       	pop	r14
     dde:	df 90       	pop	r13
     de0:	cf 90       	pop	r12
     de2:	bf 90       	pop	r11
     de4:	af 90       	pop	r10
     de6:	08 95       	ret

00000de8 <_Z14GetCodeRfidATev>:
     de8:	cf 92       	push	r12
     dea:	df 92       	push	r13
     dec:	ef 92       	push	r14
     dee:	ff 92       	push	r15
     df0:	0f 93       	push	r16
     df2:	1f 93       	push	r17
     df4:	cf 93       	push	r28
     df6:	df 93       	push	r29
     df8:	cd b7       	in	r28, 0x3d	; 61
     dfa:	de b7       	in	r29, 0x3e	; 62
     dfc:	64 97       	sbiw	r28, 0x14	; 20
     dfe:	0f b6       	in	r0, 0x3f	; 63
     e00:	f8 94       	cli
     e02:	de bf       	out	0x3e, r29	; 62
     e04:	0f be       	out	0x3f, r0	; 63
     e06:	cd bf       	out	0x3d, r28	; 61
     e08:	7c 01       	movw	r14, r24
     e0a:	ce 01       	movw	r24, r28
     e0c:	01 96       	adiw	r24, 0x01	; 1
     e0e:	6c 01       	movw	r12, r24
     e10:	87 e0       	ldi	r24, 0x07	; 7
     e12:	f6 01       	movw	r30, r12
     e14:	11 92       	st	Z+, r1
     e16:	8a 95       	dec	r24
     e18:	e9 f7       	brne	.-6      	; 0xe14 <_Z14GetCodeRfidATev+0x2c>
     e1a:	60 ed       	ldi	r22, 0xD0	; 208
     e1c:	72 e0       	ldi	r23, 0x02	; 2
     e1e:	c7 01       	movw	r24, r14
     e20:	0e 94 01 3e 	call	0x7c02	; 0x7c02 <_ZN6StringC1EPKc>
     e24:	00 e0       	ldi	r16, 0x00	; 0
     e26:	10 e0       	ldi	r17, 0x00	; 0
     e28:	9e 01       	movw	r18, r28
     e2a:	2c 5e       	subi	r18, 0xEC	; 236
     e2c:	3f 4f       	sbci	r19, 0xFF	; 255
     e2e:	a6 01       	movw	r20, r12
     e30:	60 e0       	ldi	r22, 0x00	; 0
     e32:	8f ea       	ldi	r24, 0xAF	; 175
     e34:	9b e0       	ldi	r25, 0x0B	; 11
     e36:	0e 94 9a 19 	call	0x3334	; 0x3334 <_ZN14Adafruit_PN53219readPassiveTargetIDEhPhS0_j>
     e3a:	88 23       	and	r24, r24
     e3c:	59 f1       	breq	.+86     	; 0xe94 <_Z14GetCodeRfidATev+0xac>
     e3e:	0c 89       	ldd	r16, Y+20	; 0x14
     e40:	10 e0       	ldi	r17, 0x00	; 0
     e42:	20 e0       	ldi	r18, 0x00	; 0
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	a6 01       	movw	r20, r12
     e48:	6f ea       	ldi	r22, 0xAF	; 175
     e4a:	7b e0       	ldi	r23, 0x0B	; 11
     e4c:	ce 01       	movw	r24, r28
     e4e:	0e 96       	adiw	r24, 0x0e	; 14
     e50:	0e 94 ef 15 	call	0x2bde	; 0x2bde <_ZN14Adafruit_PN53210GetHexCodeEPKhm>
     e54:	ce 01       	movw	r24, r28
     e56:	0e 96       	adiw	r24, 0x0e	; 14
     e58:	0e 94 10 40 	call	0x8020	; 0x8020 <_ZN6String4trimEv>
     e5c:	28 e0       	ldi	r18, 0x08	; 8
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	40 e0       	ldi	r20, 0x00	; 0
     e62:	50 e0       	ldi	r21, 0x00	; 0
     e64:	be 01       	movw	r22, r28
     e66:	62 5f       	subi	r22, 0xF2	; 242
     e68:	7f 4f       	sbci	r23, 0xFF	; 255
     e6a:	ce 01       	movw	r24, r28
     e6c:	08 96       	adiw	r24, 0x08	; 8
     e6e:	0e 94 cd 3f 	call	0x7f9a	; 0x7f9a <_ZNK6String9substringEjj>
     e72:	be 01       	movw	r22, r28
     e74:	68 5f       	subi	r22, 0xF8	; 248
     e76:	7f 4f       	sbci	r23, 0xFF	; 255
     e78:	c7 01       	movw	r24, r14
     e7a:	0e 94 75 3e 	call	0x7cea	; 0x7cea <_ZN6StringaSEOS_>
     e7e:	ce 01       	movw	r24, r28
     e80:	08 96       	adiw	r24, 0x08	; 8
     e82:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <_ZN6StringD1Ev>
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	80 93 de 0b 	sts	0x0BDE, r24	; 0x800bde <alreadyTimbrata>
     e8c:	ce 01       	movw	r24, r28
     e8e:	0e 96       	adiw	r24, 0x0e	; 14
     e90:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <_ZN6StringD1Ev>
     e94:	c7 01       	movw	r24, r14
     e96:	64 96       	adiw	r28, 0x14	; 20
     e98:	0f b6       	in	r0, 0x3f	; 63
     e9a:	f8 94       	cli
     e9c:	de bf       	out	0x3e, r29	; 62
     e9e:	0f be       	out	0x3f, r0	; 63
     ea0:	cd bf       	out	0x3d, r28	; 61
     ea2:	df 91       	pop	r29
     ea4:	cf 91       	pop	r28
     ea6:	1f 91       	pop	r17
     ea8:	0f 91       	pop	r16
     eaa:	ff 90       	pop	r15
     eac:	ef 90       	pop	r14
     eae:	df 90       	pop	r13
     eb0:	cf 90       	pop	r12
     eb2:	08 95       	ret

00000eb4 <_Z15abilitaPulsantiv>:
     eb4:	57 98       	cbi	0x0a, 7	; 10
     eb6:	56 98       	cbi	0x0a, 6	; 10
     eb8:	88 e0       	ldi	r24, 0x08	; 8
     eba:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
     ebe:	80 ec       	ldi	r24, 0xC0	; 192
     ec0:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
     ec4:	78 94       	sei
     ec6:	08 95       	ret

00000ec8 <_Z22abilitaContattiPistolav>:
     ec8:	09 98       	cbi	0x01, 1	; 1
     eca:	0a 98       	cbi	0x01, 2	; 1
     ecc:	08 95       	ret

00000ece <_Z13abilitaPulserc>:
     ece:	91 e0       	ldi	r25, 0x01	; 1
     ed0:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
     ed4:	84 34       	cpi	r24, 0x44	; 68
     ed6:	19 f4       	brne	.+6      	; 0xede <_Z13abilitaPulserc+0x10>
     ed8:	0d 98       	cbi	0x01, 5	; 1
     eda:	80 e2       	ldi	r24, 0x20	; 32
     edc:	02 c0       	rjmp	.+4      	; 0xee2 <_Z13abilitaPulserc+0x14>
     ede:	0e 98       	cbi	0x01, 6	; 1
     ee0:	80 e4       	ldi	r24, 0x40	; 64
     ee2:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
     ee6:	78 94       	sei
     ee8:	08 95       	ret

00000eea <_Z14impulsiToLitrii>:
     eea:	cf 92       	push	r12
     eec:	df 92       	push	r13
     eee:	ef 92       	push	r14
     ef0:	ff 92       	push	r15
     ef2:	bc 01       	movw	r22, r24
     ef4:	99 0f       	add	r25, r25
     ef6:	88 0b       	sbc	r24, r24
     ef8:	99 0b       	sbc	r25, r25
     efa:	0e 94 09 39 	call	0x7212	; 0x7212 <__floatsisf>
     efe:	6b 01       	movw	r12, r22
     f00:	7c 01       	movw	r14, r24
     f02:	20 e0       	ldi	r18, 0x00	; 0
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	a9 01       	movw	r20, r18
     f08:	0e 94 9b 38 	call	0x7136	; 0x7136 <__cmpsf2>
     f0c:	87 ff       	sbrs	r24, 7
     f0e:	03 c0       	rjmp	.+6      	; 0xf16 <_Z14impulsiToLitrii+0x2c>
     f10:	c1 2c       	mov	r12, r1
     f12:	d1 2c       	mov	r13, r1
     f14:	76 01       	movw	r14, r12
     f16:	60 91 34 01 	lds	r22, 0x0134	; 0x800134 <ImpulsiLitro>
     f1a:	70 91 35 01 	lds	r23, 0x0135	; 0x800135 <ImpulsiLitro+0x1>
     f1e:	07 2e       	mov	r0, r23
     f20:	00 0c       	add	r0, r0
     f22:	88 0b       	sbc	r24, r24
     f24:	99 0b       	sbc	r25, r25
     f26:	0e 94 09 39 	call	0x7212	; 0x7212 <__floatsisf>
     f2a:	9b 01       	movw	r18, r22
     f2c:	ac 01       	movw	r20, r24
     f2e:	c7 01       	movw	r24, r14
     f30:	b6 01       	movw	r22, r12
     f32:	0e 94 9f 38 	call	0x713e	; 0x713e <__divsf3>
     f36:	ff 90       	pop	r15
     f38:	ef 90       	pop	r14
     f3a:	df 90       	pop	r13
     f3c:	cf 90       	pop	r12
     f3e:	08 95       	ret

00000f40 <_Z18Rele_Abilitazione1ii>:
     f40:	3f 9a       	sbi	0x07, 7	; 7
     f42:	81 30       	cpi	r24, 0x01	; 1
     f44:	91 05       	cpc	r25, r1
     f46:	71 f0       	breq	.+28     	; 0xf64 <_Z18Rele_Abilitazione1ii+0x24>
     f48:	82 30       	cpi	r24, 0x02	; 2
     f4a:	91 05       	cpc	r25, r1
     f4c:	e1 f0       	breq	.+56     	; 0xf86 <_Z18Rele_Abilitazione1ii+0x46>
     f4e:	89 2b       	or	r24, r25
     f50:	89 f5       	brne	.+98     	; 0xfb4 <_Z18Rele_Abilitazione1ii+0x74>
     f52:	47 98       	cbi	0x08, 7	; 8
     f54:	2f ef       	ldi	r18, 0xFF	; 255
     f56:	30 e7       	ldi	r19, 0x70	; 112
     f58:	42 e0       	ldi	r20, 0x02	; 2
     f5a:	21 50       	subi	r18, 0x01	; 1
     f5c:	30 40       	sbci	r19, 0x00	; 0
     f5e:	40 40       	sbci	r20, 0x00	; 0
     f60:	e1 f7       	brne	.-8      	; 0xf5a <_Z18Rele_Abilitazione1ii+0x1a>
     f62:	0e c0       	rjmp	.+28     	; 0xf80 <_Z18Rele_Abilitazione1ii+0x40>
     f64:	28 b1       	in	r18, 0x08	; 8
     f66:	01 c0       	rjmp	.+2      	; 0xf6a <_Z18Rele_Abilitazione1ii+0x2a>
     f68:	88 0f       	add	r24, r24
     f6a:	6a 95       	dec	r22
     f6c:	ea f7       	brpl	.-6      	; 0xf68 <_Z18Rele_Abilitazione1ii+0x28>
     f6e:	82 2b       	or	r24, r18
     f70:	88 b9       	out	0x08, r24	; 8
     f72:	8f ef       	ldi	r24, 0xFF	; 255
     f74:	90 e7       	ldi	r25, 0x70	; 112
     f76:	22 e0       	ldi	r18, 0x02	; 2
     f78:	81 50       	subi	r24, 0x01	; 1
     f7a:	90 40       	sbci	r25, 0x00	; 0
     f7c:	20 40       	sbci	r18, 0x00	; 0
     f7e:	e1 f7       	brne	.-8      	; 0xf78 <_Z18Rele_Abilitazione1ii+0x38>
     f80:	00 c0       	rjmp	.+0      	; 0xf82 <_Z18Rele_Abilitazione1ii+0x42>
     f82:	00 00       	nop
     f84:	08 95       	ret
     f86:	28 b1       	in	r18, 0x08	; 8
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	01 c0       	rjmp	.+2      	; 0xf90 <_Z18Rele_Abilitazione1ii+0x50>
     f8e:	88 0f       	add	r24, r24
     f90:	6a 95       	dec	r22
     f92:	ea f7       	brpl	.-6      	; 0xf8e <_Z18Rele_Abilitazione1ii+0x4e>
     f94:	98 2f       	mov	r25, r24
     f96:	90 95       	com	r25
     f98:	92 23       	and	r25, r18
     f9a:	98 b9       	out	0x08, r25	; 8
     f9c:	3f ef       	ldi	r19, 0xFF	; 255
     f9e:	45 ea       	ldi	r20, 0xA5	; 165
     fa0:	2e e0       	ldi	r18, 0x0E	; 14
     fa2:	31 50       	subi	r19, 0x01	; 1
     fa4:	40 40       	sbci	r20, 0x00	; 0
     fa6:	20 40       	sbci	r18, 0x00	; 0
     fa8:	e1 f7       	brne	.-8      	; 0xfa2 <_Z18Rele_Abilitazione1ii+0x62>
     faa:	00 c0       	rjmp	.+0      	; 0xfac <_Z18Rele_Abilitazione1ii+0x6c>
     fac:	00 00       	nop
     fae:	98 b1       	in	r25, 0x08	; 8
     fb0:	89 2b       	or	r24, r25
     fb2:	88 b9       	out	0x08, r24	; 8
     fb4:	08 95       	ret

00000fb6 <_Z18Rele_Abilitazione2ii>:
     fb6:	0f 9a       	sbi	0x01, 7	; 1
     fb8:	81 30       	cpi	r24, 0x01	; 1
     fba:	91 05       	cpc	r25, r1
     fbc:	b9 f0       	breq	.+46     	; 0xfec <_Z18Rele_Abilitazione2ii+0x36>
     fbe:	82 30       	cpi	r24, 0x02	; 2
     fc0:	91 05       	cpc	r25, r1
     fc2:	29 f1       	breq	.+74     	; 0x100e <_Z18Rele_Abilitazione2ii+0x58>
     fc4:	89 2b       	or	r24, r25
     fc6:	d1 f5       	brne	.+116    	; 0x103c <_Z18Rele_Abilitazione2ii+0x86>
     fc8:	22 b1       	in	r18, 0x02	; 2
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	01 c0       	rjmp	.+2      	; 0xfd2 <_Z18Rele_Abilitazione2ii+0x1c>
     fd0:	88 0f       	add	r24, r24
     fd2:	6a 95       	dec	r22
     fd4:	ea f7       	brpl	.-6      	; 0xfd0 <_Z18Rele_Abilitazione2ii+0x1a>
     fd6:	80 95       	com	r24
     fd8:	82 23       	and	r24, r18
     fda:	82 b9       	out	0x02, r24	; 2
     fdc:	2f ef       	ldi	r18, 0xFF	; 255
     fde:	30 e7       	ldi	r19, 0x70	; 112
     fe0:	42 e0       	ldi	r20, 0x02	; 2
     fe2:	21 50       	subi	r18, 0x01	; 1
     fe4:	30 40       	sbci	r19, 0x00	; 0
     fe6:	40 40       	sbci	r20, 0x00	; 0
     fe8:	e1 f7       	brne	.-8      	; 0xfe2 <_Z18Rele_Abilitazione2ii+0x2c>
     fea:	0e c0       	rjmp	.+28     	; 0x1008 <_Z18Rele_Abilitazione2ii+0x52>
     fec:	22 b1       	in	r18, 0x02	; 2
     fee:	01 c0       	rjmp	.+2      	; 0xff2 <_Z18Rele_Abilitazione2ii+0x3c>
     ff0:	88 0f       	add	r24, r24
     ff2:	6a 95       	dec	r22
     ff4:	ea f7       	brpl	.-6      	; 0xff0 <_Z18Rele_Abilitazione2ii+0x3a>
     ff6:	82 2b       	or	r24, r18
     ff8:	82 b9       	out	0x02, r24	; 2
     ffa:	8f ef       	ldi	r24, 0xFF	; 255
     ffc:	90 e7       	ldi	r25, 0x70	; 112
     ffe:	22 e0       	ldi	r18, 0x02	; 2
    1000:	81 50       	subi	r24, 0x01	; 1
    1002:	90 40       	sbci	r25, 0x00	; 0
    1004:	20 40       	sbci	r18, 0x00	; 0
    1006:	e1 f7       	brne	.-8      	; 0x1000 <_Z18Rele_Abilitazione2ii+0x4a>
    1008:	00 c0       	rjmp	.+0      	; 0x100a <_Z18Rele_Abilitazione2ii+0x54>
    100a:	00 00       	nop
    100c:	08 95       	ret
    100e:	22 b1       	in	r18, 0x02	; 2
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	01 c0       	rjmp	.+2      	; 0x1018 <_Z18Rele_Abilitazione2ii+0x62>
    1016:	88 0f       	add	r24, r24
    1018:	6a 95       	dec	r22
    101a:	ea f7       	brpl	.-6      	; 0x1016 <_Z18Rele_Abilitazione2ii+0x60>
    101c:	98 2f       	mov	r25, r24
    101e:	90 95       	com	r25
    1020:	92 23       	and	r25, r18
    1022:	92 b9       	out	0x02, r25	; 2
    1024:	3f ef       	ldi	r19, 0xFF	; 255
    1026:	45 ea       	ldi	r20, 0xA5	; 165
    1028:	2e e0       	ldi	r18, 0x0E	; 14
    102a:	31 50       	subi	r19, 0x01	; 1
    102c:	40 40       	sbci	r20, 0x00	; 0
    102e:	20 40       	sbci	r18, 0x00	; 0
    1030:	e1 f7       	brne	.-8      	; 0x102a <_Z18Rele_Abilitazione2ii+0x74>
    1032:	00 c0       	rjmp	.+0      	; 0x1034 <_Z18Rele_Abilitazione2ii+0x7e>
    1034:	00 00       	nop
    1036:	92 b1       	in	r25, 0x02	; 2
    1038:	89 2b       	or	r24, r25
    103a:	82 b9       	out	0x02, r24	; 2
    103c:	08 95       	ret

0000103e <_Z12Control_WIFIi>:
    103e:	23 9a       	sbi	0x04, 3	; 4
    1040:	2f ef       	ldi	r18, 0xFF	; 255
    1042:	36 e7       	ldi	r19, 0x76	; 118
    1044:	41 e0       	ldi	r20, 0x01	; 1
    1046:	21 50       	subi	r18, 0x01	; 1
    1048:	30 40       	sbci	r19, 0x00	; 0
    104a:	40 40       	sbci	r20, 0x00	; 0
    104c:	e1 f7       	brne	.-8      	; 0x1046 <_Z12Control_WIFIi+0x8>
    104e:	00 c0       	rjmp	.+0      	; 0x1050 <_Z12Control_WIFIi+0x12>
    1050:	00 00       	nop
    1052:	81 30       	cpi	r24, 0x01	; 1
    1054:	91 05       	cpc	r25, r1
    1056:	11 f4       	brne	.+4      	; 0x105c <_Z12Control_WIFIi+0x1e>
    1058:	2b 9a       	sbi	0x05, 3	; 5
    105a:	08 95       	ret
    105c:	89 2b       	or	r24, r25
    105e:	09 f4       	brne	.+2      	; 0x1062 <_Z12Control_WIFIi+0x24>
    1060:	2b 98       	cbi	0x05, 3	; 5
    1062:	08 95       	ret

00001064 <__vector_4>:
    1064:	1f 92       	push	r1
    1066:	0f 92       	push	r0
    1068:	0f b6       	in	r0, 0x3f	; 63
    106a:	0f 92       	push	r0
    106c:	11 24       	eor	r1, r1
    106e:	8f 93       	push	r24
    1070:	9f 93       	push	r25
    1072:	05 9b       	sbis	0x00, 5	; 0
    1074:	09 c0       	rjmp	.+18     	; 0x1088 <__vector_4+0x24>
    1076:	80 91 9d 0b 	lds	r24, 0x0B9D	; 0x800b9d <impulsi>
    107a:	90 91 9e 0b 	lds	r25, 0x0B9E	; 0x800b9e <impulsi+0x1>
    107e:	01 96       	adiw	r24, 0x01	; 1
    1080:	90 93 9e 0b 	sts	0x0B9E, r25	; 0x800b9e <impulsi+0x1>
    1084:	80 93 9d 0b 	sts	0x0B9D, r24	; 0x800b9d <impulsi>
    1088:	06 9b       	sbis	0x00, 6	; 0
    108a:	09 c0       	rjmp	.+18     	; 0x109e <__vector_4+0x3a>
    108c:	80 91 9d 0b 	lds	r24, 0x0B9D	; 0x800b9d <impulsi>
    1090:	90 91 9e 0b 	lds	r25, 0x0B9E	; 0x800b9e <impulsi+0x1>
    1094:	01 96       	adiw	r24, 0x01	; 1
    1096:	90 93 9e 0b 	sts	0x0B9E, r25	; 0x800b9e <impulsi+0x1>
    109a:	80 93 9d 0b 	sts	0x0B9D, r24	; 0x800b9d <impulsi>
    109e:	9f 91       	pop	r25
    10a0:	8f 91       	pop	r24
    10a2:	0f 90       	pop	r0
    10a4:	0f be       	out	0x3f, r0	; 63
    10a6:	0f 90       	pop	r0
    10a8:	1f 90       	pop	r1
    10aa:	18 95       	reti

000010ac <__vector_7>:
    10ac:	1f 92       	push	r1
    10ae:	0f 92       	push	r0
    10b0:	0f b6       	in	r0, 0x3f	; 63
    10b2:	0f 92       	push	r0
    10b4:	11 24       	eor	r1, r1
    10b6:	0b b6       	in	r0, 0x3b	; 59
    10b8:	0f 92       	push	r0
    10ba:	2f 93       	push	r18
    10bc:	3f 93       	push	r19
    10be:	4f 93       	push	r20
    10c0:	5f 93       	push	r21
    10c2:	6f 93       	push	r22
    10c4:	7f 93       	push	r23
    10c6:	8f 93       	push	r24
    10c8:	9f 93       	push	r25
    10ca:	af 93       	push	r26
    10cc:	bf 93       	push	r27
    10ce:	ef 93       	push	r30
    10d0:	ff 93       	push	r31
    10d2:	80 91 9f 0b 	lds	r24, 0x0B9F	; 0x800b9f <stato_procedura>
    10d6:	90 91 a0 0b 	lds	r25, 0x0BA0	; 0x800ba0 <stato_procedura+0x1>
    10da:	04 97       	sbiw	r24, 0x04	; 4
    10dc:	09 f0       	breq	.+2      	; 0x10e0 <__vector_7+0x34>
    10de:	84 c0       	rjmp	.+264    	; 0x11e8 <__vector_7+0x13c>
    10e0:	4e 9b       	sbis	0x09, 6	; 9
    10e2:	29 c0       	rjmp	.+82     	; 0x1136 <__vector_7+0x8a>
    10e4:	80 91 f7 0b 	lds	r24, 0x0BF7	; 0x800bf7 <intConsecutivePresses>
    10e8:	90 91 f8 0b 	lds	r25, 0x0BF8	; 0x800bf8 <intConsecutivePresses+0x1>
    10ec:	01 96       	adiw	r24, 0x01	; 1
    10ee:	90 93 f8 0b 	sts	0x0BF8, r25	; 0x800bf8 <intConsecutivePresses+0x1>
    10f2:	80 93 f7 0b 	sts	0x0BF7, r24	; 0x800bf7 <intConsecutivePresses>
    10f6:	80 91 f7 0b 	lds	r24, 0x0BF7	; 0x800bf7 <intConsecutivePresses>
    10fa:	90 91 f8 0b 	lds	r25, 0x0BF8	; 0x800bf8 <intConsecutivePresses+0x1>
    10fe:	18 16       	cp	r1, r24
    1100:	19 06       	cpc	r1, r25
    1102:	84 f5       	brge	.+96     	; 0x1164 <__vector_7+0xb8>
    1104:	82 e4       	ldi	r24, 0x42	; 66
    1106:	e3 de       	rcall	.-570    	; 0xece <_Z13abilitaPulserc>
    1108:	67 e0       	ldi	r22, 0x07	; 7
    110a:	70 e0       	ldi	r23, 0x00	; 0
    110c:	80 e0       	ldi	r24, 0x00	; 0
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	52 df       	rcall	.-348    	; 0xfb6 <_Z18Rele_Abilitazione2ii>
    1112:	69 ee       	ldi	r22, 0xE9	; 233
    1114:	71 e0       	ldi	r23, 0x01	; 1
    1116:	8d e6       	ldi	r24, 0x6D	; 109
    1118:	9b e0       	ldi	r25, 0x0B	; 11
    111a:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <_ZN6StringaSEPKc>
    111e:	6f ed       	ldi	r22, 0xDF	; 223
    1120:	72 e0       	ldi	r23, 0x02	; 2
    1122:	89 ea       	ldi	r24, 0xA9	; 169
    1124:	9b e0       	ldi	r25, 0x0B	; 11
    1126:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <_ZN6StringaSEPKc>
    112a:	6a e0       	ldi	r22, 0x0A	; 10
    112c:	70 e0       	ldi	r23, 0x00	; 0
    112e:	80 e0       	ldi	r24, 0x00	; 0
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	59 dd       	rcall	.-1358   	; 0xbe6 <_Z11avanzaStatom>
    1134:	0f c0       	rjmp	.+30     	; 0x1154 <__vector_7+0xa8>
    1136:	80 91 f5 0b 	lds	r24, 0x0BF5	; 0x800bf5 <intConsecutiveNonPresses>
    113a:	90 91 f6 0b 	lds	r25, 0x0BF6	; 0x800bf6 <intConsecutiveNonPresses+0x1>
    113e:	01 96       	adiw	r24, 0x01	; 1
    1140:	90 93 f6 0b 	sts	0x0BF6, r25	; 0x800bf6 <intConsecutiveNonPresses+0x1>
    1144:	80 93 f5 0b 	sts	0x0BF5, r24	; 0x800bf5 <intConsecutiveNonPresses>
    1148:	80 91 f5 0b 	lds	r24, 0x0BF5	; 0x800bf5 <intConsecutiveNonPresses>
    114c:	90 91 f6 0b 	lds	r25, 0x0BF6	; 0x800bf6 <intConsecutiveNonPresses+0x1>
    1150:	02 97       	sbiw	r24, 0x02	; 2
    1152:	44 f0       	brlt	.+16     	; 0x1164 <__vector_7+0xb8>
    1154:	10 92 f8 0b 	sts	0x0BF8, r1	; 0x800bf8 <intConsecutivePresses+0x1>
    1158:	10 92 f7 0b 	sts	0x0BF7, r1	; 0x800bf7 <intConsecutivePresses>
    115c:	10 92 f6 0b 	sts	0x0BF6, r1	; 0x800bf6 <intConsecutiveNonPresses+0x1>
    1160:	10 92 f5 0b 	sts	0x0BF5, r1	; 0x800bf5 <intConsecutiveNonPresses>
    1164:	4f 9b       	sbis	0x09, 7	; 9
    1166:	29 c0       	rjmp	.+82     	; 0x11ba <__vector_7+0x10e>
    1168:	80 91 f7 0b 	lds	r24, 0x0BF7	; 0x800bf7 <intConsecutivePresses>
    116c:	90 91 f8 0b 	lds	r25, 0x0BF8	; 0x800bf8 <intConsecutivePresses+0x1>
    1170:	01 96       	adiw	r24, 0x01	; 1
    1172:	90 93 f8 0b 	sts	0x0BF8, r25	; 0x800bf8 <intConsecutivePresses+0x1>
    1176:	80 93 f7 0b 	sts	0x0BF7, r24	; 0x800bf7 <intConsecutivePresses>
    117a:	80 91 f7 0b 	lds	r24, 0x0BF7	; 0x800bf7 <intConsecutivePresses>
    117e:	90 91 f8 0b 	lds	r25, 0x0BF8	; 0x800bf8 <intConsecutivePresses+0x1>
    1182:	18 16       	cp	r1, r24
    1184:	19 06       	cpc	r1, r25
    1186:	84 f5       	brge	.+96     	; 0x11e8 <__vector_7+0x13c>
    1188:	84 e4       	ldi	r24, 0x44	; 68
    118a:	a1 de       	rcall	.-702    	; 0xece <_Z13abilitaPulserc>
    118c:	67 e0       	ldi	r22, 0x07	; 7
    118e:	70 e0       	ldi	r23, 0x00	; 0
    1190:	80 e0       	ldi	r24, 0x00	; 0
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	d5 de       	rcall	.-598    	; 0xf40 <_Z18Rele_Abilitazione1ii>
    1196:	67 ee       	ldi	r22, 0xE7	; 231
    1198:	72 e0       	ldi	r23, 0x02	; 2
    119a:	8d e6       	ldi	r24, 0x6D	; 109
    119c:	9b e0       	ldi	r25, 0x0B	; 11
    119e:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <_ZN6StringaSEPKc>
    11a2:	69 ee       	ldi	r22, 0xE9	; 233
    11a4:	72 e0       	ldi	r23, 0x02	; 2
    11a6:	89 ea       	ldi	r24, 0xA9	; 169
    11a8:	9b e0       	ldi	r25, 0x0B	; 11
    11aa:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <_ZN6StringaSEPKc>
    11ae:	6a e0       	ldi	r22, 0x0A	; 10
    11b0:	70 e0       	ldi	r23, 0x00	; 0
    11b2:	80 e0       	ldi	r24, 0x00	; 0
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	17 dd       	rcall	.-1490   	; 0xbe6 <_Z11avanzaStatom>
    11b8:	0f c0       	rjmp	.+30     	; 0x11d8 <__vector_7+0x12c>
    11ba:	80 91 f5 0b 	lds	r24, 0x0BF5	; 0x800bf5 <intConsecutiveNonPresses>
    11be:	90 91 f6 0b 	lds	r25, 0x0BF6	; 0x800bf6 <intConsecutiveNonPresses+0x1>
    11c2:	01 96       	adiw	r24, 0x01	; 1
    11c4:	90 93 f6 0b 	sts	0x0BF6, r25	; 0x800bf6 <intConsecutiveNonPresses+0x1>
    11c8:	80 93 f5 0b 	sts	0x0BF5, r24	; 0x800bf5 <intConsecutiveNonPresses>
    11cc:	80 91 f5 0b 	lds	r24, 0x0BF5	; 0x800bf5 <intConsecutiveNonPresses>
    11d0:	90 91 f6 0b 	lds	r25, 0x0BF6	; 0x800bf6 <intConsecutiveNonPresses+0x1>
    11d4:	02 97       	sbiw	r24, 0x02	; 2
    11d6:	44 f0       	brlt	.+16     	; 0x11e8 <__vector_7+0x13c>
    11d8:	10 92 f8 0b 	sts	0x0BF8, r1	; 0x800bf8 <intConsecutivePresses+0x1>
    11dc:	10 92 f7 0b 	sts	0x0BF7, r1	; 0x800bf7 <intConsecutivePresses>
    11e0:	10 92 f6 0b 	sts	0x0BF6, r1	; 0x800bf6 <intConsecutiveNonPresses+0x1>
    11e4:	10 92 f5 0b 	sts	0x0BF5, r1	; 0x800bf5 <intConsecutiveNonPresses>
    11e8:	ff 91       	pop	r31
    11ea:	ef 91       	pop	r30
    11ec:	bf 91       	pop	r27
    11ee:	af 91       	pop	r26
    11f0:	9f 91       	pop	r25
    11f2:	8f 91       	pop	r24
    11f4:	7f 91       	pop	r23
    11f6:	6f 91       	pop	r22
    11f8:	5f 91       	pop	r21
    11fa:	4f 91       	pop	r20
    11fc:	3f 91       	pop	r19
    11fe:	2f 91       	pop	r18
    1200:	0f 90       	pop	r0
    1202:	0b be       	out	0x3b, r0	; 59
    1204:	0f 90       	pop	r0
    1206:	0f be       	out	0x3f, r0	; 63
    1208:	0f 90       	pop	r0
    120a:	1f 90       	pop	r1
    120c:	18 95       	reti

0000120e <_GLOBAL__sub_I_intConsecutivePresses>:
    120e:	8f 92       	push	r8
    1210:	af 92       	push	r10
    1212:	cf 92       	push	r12
    1214:	ef 92       	push	r14
    1216:	0f 93       	push	r16
    1218:	00 e0       	ldi	r16, 0x00	; 0
    121a:	20 e0       	ldi	r18, 0x00	; 0
    121c:	40 e0       	ldi	r20, 0x00	; 0
    121e:	60 e0       	ldi	r22, 0x00	; 0
    1220:	89 ef       	ldi	r24, 0xF9	; 249
    1222:	9b e0       	ldi	r25, 0x0B	; 11
    1224:	0e 94 91 3a 	call	0x7522	; 0x7522 <_ZN9IPAddressC1Ehhhh>
    1228:	63 ec       	ldi	r22, 0xC3	; 195
    122a:	71 e0       	ldi	r23, 0x01	; 1
    122c:	88 ee       	ldi	r24, 0xE8	; 232
    122e:	9b e0       	ldi	r25, 0x0B	; 11
    1230:	0e 94 01 3e 	call	0x7c02	; 0x7c02 <_ZN6StringC1EPKc>
    1234:	63 ec       	ldi	r22, 0xC3	; 195
    1236:	71 e0       	ldi	r23, 0x01	; 1
    1238:	8e ee       	ldi	r24, 0xEE	; 238
    123a:	9b e0       	ldi	r25, 0x0B	; 11
    123c:	0e 94 01 3e 	call	0x7c02	; 0x7c02 <_ZN6StringC1EPKc>
    1240:	1f 92       	push	r1
    1242:	83 e0       	ldi	r24, 0x03	; 3
    1244:	8f 93       	push	r24
    1246:	87 e0       	ldi	r24, 0x07	; 7
    1248:	88 2e       	mov	r8, r24
    124a:	96 e0       	ldi	r25, 0x06	; 6
    124c:	a9 2e       	mov	r10, r25
    124e:	25 e0       	ldi	r18, 0x05	; 5
    1250:	c2 2e       	mov	r12, r18
    1252:	34 e0       	ldi	r19, 0x04	; 4
    1254:	e3 2e       	mov	r14, r19
    1256:	21 e0       	ldi	r18, 0x01	; 1
    1258:	42 e0       	ldi	r20, 0x02	; 2
    125a:	67 e2       	ldi	r22, 0x27	; 39
    125c:	86 ec       	ldi	r24, 0xC6	; 198
    125e:	9b e0       	ldi	r25, 0x0B	; 11
    1260:	0e 94 3f 2c 	call	0x587e	; 0x587e <_ZN17LiquidCrystal_I2CC1Ehhhhhhhhh13t_backlighPol>
    1264:	43 e0       	ldi	r20, 0x03	; 3
    1266:	64 e0       	ldi	r22, 0x04	; 4
    1268:	8f ea       	ldi	r24, 0xAF	; 175
    126a:	9b e0       	ldi	r25, 0x0B	; 11
    126c:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <_ZN14Adafruit_PN532C1Ehh>
    1270:	61 ef       	ldi	r22, 0xF1	; 241
    1272:	72 e0       	ldi	r23, 0x02	; 2
    1274:	89 ea       	ldi	r24, 0xA9	; 169
    1276:	9b e0       	ldi	r25, 0x0B	; 11
    1278:	0e 94 01 3e 	call	0x7c02	; 0x7c02 <_ZN6StringC1EPKc>
    127c:	63 ec       	ldi	r22, 0xC3	; 195
    127e:	71 e0       	ldi	r23, 0x01	; 1
    1280:	83 ea       	ldi	r24, 0xA3	; 163
    1282:	9b e0       	ldi	r25, 0x0B	; 11
    1284:	0e 94 01 3e 	call	0x7c02	; 0x7c02 <_ZN6StringC1EPKc>
    1288:	63 ec       	ldi	r22, 0xC3	; 195
    128a:	71 e0       	ldi	r23, 0x01	; 1
    128c:	87 e9       	ldi	r24, 0x97	; 151
    128e:	9b e0       	ldi	r25, 0x0B	; 11
    1290:	0e 94 01 3e 	call	0x7c02	; 0x7c02 <_ZN6StringC1EPKc>
    1294:	63 ec       	ldi	r22, 0xC3	; 195
    1296:	71 e0       	ldi	r23, 0x01	; 1
    1298:	83 e7       	ldi	r24, 0x73	; 115
    129a:	9b e0       	ldi	r25, 0x0B	; 11
    129c:	0e 94 01 3e 	call	0x7c02	; 0x7c02 <_ZN6StringC1EPKc>
    12a0:	63 ec       	ldi	r22, 0xC3	; 195
    12a2:	71 e0       	ldi	r23, 0x01	; 1
    12a4:	89 e7       	ldi	r24, 0x79	; 121
    12a6:	9b e0       	ldi	r25, 0x0B	; 11
    12a8:	0e 94 01 3e 	call	0x7c02	; 0x7c02 <_ZN6StringC1EPKc>
    12ac:	63 ec       	ldi	r22, 0xC3	; 195
    12ae:	71 e0       	ldi	r23, 0x01	; 1
    12b0:	8f e7       	ldi	r24, 0x7F	; 127
    12b2:	9b e0       	ldi	r25, 0x0B	; 11
    12b4:	0e 94 01 3e 	call	0x7c02	; 0x7c02 <_ZN6StringC1EPKc>
    12b8:	63 ec       	ldi	r22, 0xC3	; 195
    12ba:	71 e0       	ldi	r23, 0x01	; 1
    12bc:	85 e8       	ldi	r24, 0x85	; 133
    12be:	9b e0       	ldi	r25, 0x0B	; 11
    12c0:	0e 94 01 3e 	call	0x7c02	; 0x7c02 <_ZN6StringC1EPKc>
    12c4:	63 ec       	ldi	r22, 0xC3	; 195
    12c6:	71 e0       	ldi	r23, 0x01	; 1
    12c8:	8b e8       	ldi	r24, 0x8B	; 139
    12ca:	9b e0       	ldi	r25, 0x0B	; 11
    12cc:	0e 94 01 3e 	call	0x7c02	; 0x7c02 <_ZN6StringC1EPKc>
    12d0:	63 ec       	ldi	r22, 0xC3	; 195
    12d2:	71 e0       	ldi	r23, 0x01	; 1
    12d4:	81 e9       	ldi	r24, 0x91	; 145
    12d6:	9b e0       	ldi	r25, 0x0B	; 11
    12d8:	0e 94 01 3e 	call	0x7c02	; 0x7c02 <_ZN6StringC1EPKc>
    12dc:	6a ef       	ldi	r22, 0xFA	; 250
    12de:	72 e0       	ldi	r23, 0x02	; 2
    12e0:	8d e6       	ldi	r24, 0x6D	; 109
    12e2:	9b e0       	ldi	r25, 0x0B	; 11
    12e4:	0e 94 01 3e 	call	0x7c02	; 0x7c02 <_ZN6StringC1EPKc>
    12e8:	6a ef       	ldi	r22, 0xFA	; 250
    12ea:	72 e0       	ldi	r23, 0x02	; 2
    12ec:	81 e6       	ldi	r24, 0x61	; 97
    12ee:	9b e0       	ldi	r25, 0x0B	; 11
    12f0:	0e 94 01 3e 	call	0x7c02	; 0x7c02 <_ZN6StringC1EPKc>
    12f4:	6a ef       	ldi	r22, 0xFA	; 250
    12f6:	72 e0       	ldi	r23, 0x02	; 2
    12f8:	87 e6       	ldi	r24, 0x67	; 103
    12fa:	9b e0       	ldi	r25, 0x0B	; 11
    12fc:	0e 94 01 3e 	call	0x7c02	; 0x7c02 <_ZN6StringC1EPKc>
    1300:	63 ec       	ldi	r22, 0xC3	; 195
    1302:	71 e0       	ldi	r23, 0x01	; 1
    1304:	8b e5       	ldi	r24, 0x5B	; 91
    1306:	9b e0       	ldi	r25, 0x0B	; 11
    1308:	0e 94 01 3e 	call	0x7c02	; 0x7c02 <_ZN6StringC1EPKc>
    130c:	63 ec       	ldi	r22, 0xC3	; 195
    130e:	71 e0       	ldi	r23, 0x01	; 1
    1310:	85 e5       	ldi	r24, 0x55	; 85
    1312:	9b e0       	ldi	r25, 0x0B	; 11
    1314:	0e 94 01 3e 	call	0x7c02	; 0x7c02 <_ZN6StringC1EPKc>
    1318:	6a ef       	ldi	r22, 0xFA	; 250
    131a:	72 e0       	ldi	r23, 0x02	; 2
    131c:	8d e3       	ldi	r24, 0x3D	; 61
    131e:	9b e0       	ldi	r25, 0x0B	; 11
    1320:	0e 94 01 3e 	call	0x7c02	; 0x7c02 <_ZN6StringC1EPKc>
    1324:	6a ef       	ldi	r22, 0xFA	; 250
    1326:	72 e0       	ldi	r23, 0x02	; 2
    1328:	83 e4       	ldi	r24, 0x43	; 67
    132a:	9b e0       	ldi	r25, 0x0B	; 11
    132c:	0e 94 01 3e 	call	0x7c02	; 0x7c02 <_ZN6StringC1EPKc>
    1330:	6a ef       	ldi	r22, 0xFA	; 250
    1332:	72 e0       	ldi	r23, 0x02	; 2
    1334:	89 e4       	ldi	r24, 0x49	; 73
    1336:	9b e0       	ldi	r25, 0x0B	; 11
    1338:	0e 94 01 3e 	call	0x7c02	; 0x7c02 <_ZN6StringC1EPKc>
    133c:	6a ef       	ldi	r22, 0xFA	; 250
    133e:	72 e0       	ldi	r23, 0x02	; 2
    1340:	8f e4       	ldi	r24, 0x4F	; 79
    1342:	9b e0       	ldi	r25, 0x0B	; 11
    1344:	0e 94 01 3e 	call	0x7c02	; 0x7c02 <_ZN6StringC1EPKc>
    1348:	09 e0       	ldi	r16, 0x09	; 9
    134a:	25 e0       	ldi	r18, 0x05	; 5
    134c:	48 ea       	ldi	r20, 0xA8	; 168
    134e:	60 ec       	ldi	r22, 0xC0	; 192
    1350:	83 ed       	ldi	r24, 0xD3	; 211
    1352:	9a e0       	ldi	r25, 0x0A	; 10
    1354:	0e 94 91 3a 	call	0x7522	; 0x7522 <_ZN9IPAddressC1Ehhhh>
    1358:	05 e1       	ldi	r16, 0x15	; 21
    135a:	21 e0       	ldi	r18, 0x01	; 1
    135c:	48 ea       	ldi	r20, 0xA8	; 168
    135e:	60 ec       	ldi	r22, 0xC0	; 192
    1360:	8d ec       	ldi	r24, 0xCD	; 205
    1362:	9a e0       	ldi	r25, 0x0A	; 10
    1364:	0e 94 91 3a 	call	0x7522	; 0x7522 <_ZN9IPAddressC1Ehhhh>
    1368:	01 e0       	ldi	r16, 0x01	; 1
    136a:	20 e0       	ldi	r18, 0x00	; 0
    136c:	48 ea       	ldi	r20, 0xA8	; 168
    136e:	60 ec       	ldi	r22, 0xC0	; 192
    1370:	87 ec       	ldi	r24, 0xC7	; 199
    1372:	9a e0       	ldi	r25, 0x0A	; 10
    1374:	0e 94 91 3a 	call	0x7522	; 0x7522 <_ZN9IPAddressC1Ehhhh>
    1378:	00 e0       	ldi	r16, 0x00	; 0
    137a:	20 e0       	ldi	r18, 0x00	; 0
    137c:	4f ef       	ldi	r20, 0xFF	; 255
    137e:	6f ef       	ldi	r22, 0xFF	; 255
    1380:	81 ec       	ldi	r24, 0xC1	; 193
    1382:	9a e0       	ldi	r25, 0x0A	; 10
    1384:	0e 94 91 3a 	call	0x7522	; 0x7522 <_ZN9IPAddressC1Ehhhh>
    1388:	84 eb       	ldi	r24, 0xB4	; 180
    138a:	9a e0       	ldi	r25, 0x0A	; 10
    138c:	0e 94 83 22 	call	0x4506	; 0x4506 <_ZN14EthernetClientC1Ev>
    1390:	87 ea       	ldi	r24, 0xA7	; 167
    1392:	9a e0       	ldi	r25, 0x0A	; 10
    1394:	0e 94 83 22 	call	0x4506	; 0x4506 <_ZN14EthernetClientC1Ev>
    1398:	69 e1       	ldi	r22, 0x19	; 25
    139a:	79 e7       	ldi	r23, 0x79	; 121
    139c:	81 ea       	ldi	r24, 0xA1	; 161
    139e:	9a e0       	ldi	r25, 0x0A	; 10
    13a0:	0e 94 d2 23 	call	0x47a4	; 0x47a4 <_ZN14EthernetServerC1Ej>
    13a4:	84 e9       	ldi	r24, 0x94	; 148
    13a6:	9a e0       	ldi	r25, 0x0A	; 10
    13a8:	0e 94 83 22 	call	0x4506	; 0x4506 <_ZN14EthernetClientC1Ev>
    13ac:	88 e8       	ldi	r24, 0x88	; 136
    13ae:	9a e0       	ldi	r25, 0x0A	; 10
    13b0:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <_ZN13DS3231M_ClassC1Ev>
    13b4:	40 e0       	ldi	r20, 0x00	; 0
    13b6:	50 e0       	ldi	r21, 0x00	; 0
    13b8:	ba 01       	movw	r22, r20
    13ba:	86 e7       	ldi	r24, 0x76	; 118
    13bc:	9a e0       	ldi	r25, 0x0A	; 10
    13be:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <_ZN8DateTimeC1Em>
    13c2:	63 ec       	ldi	r22, 0xC3	; 195
    13c4:	71 e0       	ldi	r23, 0x01	; 1
    13c6:	8c e6       	ldi	r24, 0x6C	; 108
    13c8:	9a e0       	ldi	r25, 0x0A	; 10
    13ca:	0e 94 01 3e 	call	0x7c02	; 0x7c02 <_ZN6StringC1EPKc>
    13ce:	63 ec       	ldi	r22, 0xC3	; 195
    13d0:	71 e0       	ldi	r23, 0x01	; 1
    13d2:	86 e6       	ldi	r24, 0x66	; 102
    13d4:	9a e0       	ldi	r25, 0x0A	; 10
    13d6:	0e 94 01 3e 	call	0x7c02	; 0x7c02 <_ZN6StringC1EPKc>
    13da:	0f 90       	pop	r0
    13dc:	0f 90       	pop	r0
    13de:	64 e0       	ldi	r22, 0x04	; 4
    13e0:	82 e8       	ldi	r24, 0x82	; 130
    13e2:	99 e0       	ldi	r25, 0x09	; 9
    13e4:	0f 91       	pop	r16
    13e6:	ef 90       	pop	r14
    13e8:	cf 90       	pop	r12
    13ea:	af 90       	pop	r10
    13ec:	8f 90       	pop	r8
    13ee:	0c 94 f9 2c 	jmp	0x59f2	; 0x59f2 <_ZN8SPIFlashC1Eh>

000013f2 <_GLOBAL__sub_D_intConsecutivePresses>:
    13f2:	cf 93       	push	r28
    13f4:	df 93       	push	r29
    13f6:	86 e6       	ldi	r24, 0x66	; 102
    13f8:	9a e0       	ldi	r25, 0x0A	; 10
    13fa:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <_ZN6StringD1Ev>
    13fe:	8c e6       	ldi	r24, 0x6C	; 108
    1400:	9a e0       	ldi	r25, 0x0A	; 10
    1402:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <_ZN6StringD1Ev>
    1406:	88 e8       	ldi	r24, 0x88	; 136
    1408:	9a e0       	ldi	r25, 0x0A	; 10
    140a:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <_ZN13DS3231M_ClassD1Ev>
    140e:	8f e4       	ldi	r24, 0x4F	; 79
    1410:	9b e0       	ldi	r25, 0x0B	; 11
    1412:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <_ZN6StringD1Ev>
    1416:	89 e4       	ldi	r24, 0x49	; 73
    1418:	9b e0       	ldi	r25, 0x0B	; 11
    141a:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <_ZN6StringD1Ev>
    141e:	83 e4       	ldi	r24, 0x43	; 67
    1420:	9b e0       	ldi	r25, 0x0B	; 11
    1422:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <_ZN6StringD1Ev>
    1426:	8d e3       	ldi	r24, 0x3D	; 61
    1428:	9b e0       	ldi	r25, 0x0B	; 11
    142a:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <_ZN6StringD1Ev>
    142e:	85 e5       	ldi	r24, 0x55	; 85
    1430:	9b e0       	ldi	r25, 0x0B	; 11
    1432:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <_ZN6StringD1Ev>
    1436:	8b e5       	ldi	r24, 0x5B	; 91
    1438:	9b e0       	ldi	r25, 0x0B	; 11
    143a:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <_ZN6StringD1Ev>
    143e:	87 e6       	ldi	r24, 0x67	; 103
    1440:	9b e0       	ldi	r25, 0x0B	; 11
    1442:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <_ZN6StringD1Ev>
    1446:	81 e6       	ldi	r24, 0x61	; 97
    1448:	9b e0       	ldi	r25, 0x0B	; 11
    144a:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <_ZN6StringD1Ev>
    144e:	8d e6       	ldi	r24, 0x6D	; 109
    1450:	9b e0       	ldi	r25, 0x0B	; 11
    1452:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <_ZN6StringD1Ev>
    1456:	c7 e9       	ldi	r28, 0x97	; 151
    1458:	db e0       	ldi	r29, 0x0B	; 11
    145a:	26 97       	sbiw	r28, 0x06	; 6
    145c:	ce 01       	movw	r24, r28
    145e:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <_ZN6StringD1Ev>
    1462:	8b e0       	ldi	r24, 0x0B	; 11
    1464:	c3 37       	cpi	r28, 0x73	; 115
    1466:	d8 07       	cpc	r29, r24
    1468:	c1 f7       	brne	.-16     	; 0x145a <_GLOBAL__sub_D_intConsecutivePresses+0x68>
    146a:	87 e9       	ldi	r24, 0x97	; 151
    146c:	9b e0       	ldi	r25, 0x0B	; 11
    146e:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <_ZN6StringD1Ev>
    1472:	83 ea       	ldi	r24, 0xA3	; 163
    1474:	9b e0       	ldi	r25, 0x0B	; 11
    1476:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <_ZN6StringD1Ev>
    147a:	89 ea       	ldi	r24, 0xA9	; 169
    147c:	9b e0       	ldi	r25, 0x0B	; 11
    147e:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <_ZN6StringD1Ev>
    1482:	8e ee       	ldi	r24, 0xEE	; 238
    1484:	9b e0       	ldi	r25, 0x0B	; 11
    1486:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <_ZN6StringD1Ev>
    148a:	88 ee       	ldi	r24, 0xE8	; 232
    148c:	9b e0       	ldi	r25, 0x0B	; 11
    148e:	df 91       	pop	r29
    1490:	cf 91       	pop	r28
    1492:	0c 94 9a 3d 	jmp	0x7b34	; 0x7b34 <_ZN6StringD1Ev>

00001496 <_Z19InizializzaEthernetv>:
    1496:	cf 92       	push	r12
    1498:	df 92       	push	r13
    149a:	ef 92       	push	r14
    149c:	ff 92       	push	r15
    149e:	0f 93       	push	r16
    14a0:	1f 93       	push	r17
    14a2:	cf 93       	push	r28
    14a4:	df 93       	push	r29
    14a6:	cd b7       	in	r28, 0x3d	; 61
    14a8:	de b7       	in	r29, 0x3e	; 62
    14aa:	68 97       	sbiw	r28, 0x18	; 24
    14ac:	0f b6       	in	r0, 0x3f	; 63
    14ae:	f8 94       	cli
    14b0:	de bf       	out	0x3e, r29	; 62
    14b2:	0f be       	out	0x3f, r0	; 63
    14b4:	cd bf       	out	0x3d, r28	; 61
    14b6:	81 e6       	ldi	r24, 0x61	; 97
    14b8:	c8 2e       	mov	r12, r24
    14ba:	89 e0       	ldi	r24, 0x09	; 9
    14bc:	d8 2e       	mov	r13, r24
    14be:	da 82       	std	Y+2, r13	; 0x02
    14c0:	c9 82       	std	Y+1, r12	; 0x01
    14c2:	80 91 c3 0a 	lds	r24, 0x0AC3	; 0x800ac3 <subnet+0x2>
    14c6:	90 91 c4 0a 	lds	r25, 0x0AC4	; 0x800ac4 <subnet+0x3>
    14ca:	a0 91 c5 0a 	lds	r26, 0x0AC5	; 0x800ac5 <subnet+0x4>
    14ce:	b0 91 c6 0a 	lds	r27, 0x0AC6	; 0x800ac6 <subnet+0x5>
    14d2:	8b 83       	std	Y+3, r24	; 0x03
    14d4:	9c 83       	std	Y+4, r25	; 0x04
    14d6:	ad 83       	std	Y+5, r26	; 0x05
    14d8:	be 83       	std	Y+6, r27	; 0x06
    14da:	d8 86       	std	Y+8, r13	; 0x08
    14dc:	cf 82       	std	Y+7, r12	; 0x07
    14de:	80 91 c9 0a 	lds	r24, 0x0AC9	; 0x800ac9 <gateway+0x2>
    14e2:	90 91 ca 0a 	lds	r25, 0x0ACA	; 0x800aca <gateway+0x3>
    14e6:	a0 91 cb 0a 	lds	r26, 0x0ACB	; 0x800acb <gateway+0x4>
    14ea:	b0 91 cc 0a 	lds	r27, 0x0ACC	; 0x800acc <gateway+0x5>
    14ee:	89 87       	std	Y+9, r24	; 0x09
    14f0:	9a 87       	std	Y+10, r25	; 0x0a
    14f2:	ab 87       	std	Y+11, r26	; 0x0b
    14f4:	bc 87       	std	Y+12, r27	; 0x0c
    14f6:	de 86       	std	Y+14, r13	; 0x0e
    14f8:	cd 86       	std	Y+13, r12	; 0x0d
    14fa:	80 91 cf 0a 	lds	r24, 0x0ACF	; 0x800acf <myDns+0x2>
    14fe:	90 91 d0 0a 	lds	r25, 0x0AD0	; 0x800ad0 <myDns+0x3>
    1502:	a0 91 d1 0a 	lds	r26, 0x0AD1	; 0x800ad1 <myDns+0x4>
    1506:	b0 91 d2 0a 	lds	r27, 0x0AD2	; 0x800ad2 <myDns+0x5>
    150a:	8f 87       	std	Y+15, r24	; 0x0f
    150c:	98 8b       	std	Y+16, r25	; 0x10
    150e:	a9 8b       	std	Y+17, r26	; 0x11
    1510:	ba 8b       	std	Y+18, r27	; 0x12
    1512:	60 e3       	ldi	r22, 0x30	; 48
    1514:	71 e0       	ldi	r23, 0x01	; 1
    1516:	ce 01       	movw	r24, r28
    1518:	43 96       	adiw	r24, 0x13	; 19
    151a:	0e 94 9d 3a 	call	0x753a	; 0x753a <_ZN9IPAddressC1EPKh>
    151e:	ce 01       	movw	r24, r28
    1520:	01 96       	adiw	r24, 0x01	; 1
    1522:	7c 01       	movw	r14, r24
    1524:	8e 01       	movw	r16, r28
    1526:	09 5f       	subi	r16, 0xF9	; 249
    1528:	1f 4f       	sbci	r17, 0xFF	; 255
    152a:	9e 01       	movw	r18, r28
    152c:	23 5f       	subi	r18, 0xF3	; 243
    152e:	3f 4f       	sbci	r19, 0xFF	; 255
    1530:	ae 01       	movw	r20, r28
    1532:	4d 5e       	subi	r20, 0xED	; 237
    1534:	5f 4f       	sbci	r21, 0xFF	; 255
    1536:	6a e2       	ldi	r22, 0x2A	; 42
    1538:	71 e0       	ldi	r23, 0x01	; 1
    153a:	8b e4       	ldi	r24, 0x4B	; 75
    153c:	9c e0       	ldi	r25, 0x0C	; 12
    153e:	0e 94 2f 21 	call	0x425e	; 0x425e <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_>
    1542:	81 ea       	ldi	r24, 0xA1	; 161
    1544:	9a e0       	ldi	r25, 0x0A	; 10
    1546:	0e 94 92 23 	call	0x4724	; 0x4724 <_ZN14EthernetServer5beginEv>
    154a:	da 82       	std	Y+2, r13	; 0x02
    154c:	c9 82       	std	Y+1, r12	; 0x01
    154e:	80 91 d5 0a 	lds	r24, 0x0AD5	; 0x800ad5 <servizio+0x2>
    1552:	90 91 d6 0a 	lds	r25, 0x0AD6	; 0x800ad6 <servizio+0x3>
    1556:	a0 91 d7 0a 	lds	r26, 0x0AD7	; 0x800ad7 <servizio+0x4>
    155a:	b0 91 d8 0a 	lds	r27, 0x0AD8	; 0x800ad8 <servizio+0x5>
    155e:	8b 83       	std	Y+3, r24	; 0x03
    1560:	9c 83       	std	Y+4, r25	; 0x04
    1562:	ad 83       	std	Y+5, r26	; 0x05
    1564:	be 83       	std	Y+6, r27	; 0x06
    1566:	49 ef       	ldi	r20, 0xF9	; 249
    1568:	5a e2       	ldi	r21, 0x2A	; 42
    156a:	b7 01       	movw	r22, r14
    156c:	87 ea       	ldi	r24, 0xA7	; 167
    156e:	9a e0       	ldi	r25, 0x0A	; 10
    1570:	0e 94 14 23 	call	0x4628	; 0x4628 <_ZN14EthernetClient7connectE9IPAddressj>
    1574:	89 2b       	or	r24, r25
    1576:	81 f0       	breq	.+32     	; 0x1598 <_Z19InizializzaEthernetv+0x102>
    1578:	6c ef       	ldi	r22, 0xFC	; 252
    157a:	72 e0       	ldi	r23, 0x02	; 2
    157c:	85 e5       	ldi	r24, 0x55	; 85
    157e:	9d e0       	ldi	r25, 0x0D	; 13
    1580:	0e 94 5b 3b 	call	0x76b6	; 0x76b6 <_ZN5Print7printlnEPKc>
    1584:	87 ea       	ldi	r24, 0xA7	; 167
    1586:	9a e0       	ldi	r25, 0x0A	; 10
    1588:	0e 94 b3 22 	call	0x4566	; 0x4566 <_ZN14EthernetClient9connectedEv>
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	90 93 a2 0b 	sts	0x0BA2, r25	; 0x800ba2 <Connected+0x1>
    1592:	80 93 a1 0b 	sts	0x0BA1, r24	; 0x800ba1 <Connected>
    1596:	06 c0       	rjmp	.+12     	; 0x15a4 <_Z19InizializzaEthernetv+0x10e>
    1598:	6f e0       	ldi	r22, 0x0F	; 15
    159a:	73 e0       	ldi	r23, 0x03	; 3
    159c:	85 e5       	ldi	r24, 0x55	; 85
    159e:	9d e0       	ldi	r25, 0x0D	; 13
    15a0:	0e 94 5b 3b 	call	0x76b6	; 0x76b6 <_ZN5Print7printlnEPKc>
    15a4:	68 96       	adiw	r28, 0x18	; 24
    15a6:	0f b6       	in	r0, 0x3f	; 63
    15a8:	f8 94       	cli
    15aa:	de bf       	out	0x3e, r29	; 62
    15ac:	0f be       	out	0x3f, r0	; 63
    15ae:	cd bf       	out	0x3d, r28	; 61
    15b0:	df 91       	pop	r29
    15b2:	cf 91       	pop	r28
    15b4:	1f 91       	pop	r17
    15b6:	0f 91       	pop	r16
    15b8:	ff 90       	pop	r15
    15ba:	ef 90       	pop	r14
    15bc:	df 90       	pop	r13
    15be:	cf 90       	pop	r12
    15c0:	08 95       	ret

000015c2 <setup>:
    15c2:	cf 92       	push	r12
    15c4:	df 92       	push	r13
    15c6:	ef 92       	push	r14
    15c8:	ff 92       	push	r15
    15ca:	0f 93       	push	r16
    15cc:	1f 93       	push	r17
    15ce:	cf 93       	push	r28
    15d0:	df 93       	push	r29
    15d2:	00 d0       	rcall	.+0      	; 0x15d4 <setup+0x12>
    15d4:	00 d0       	rcall	.+0      	; 0x15d6 <setup+0x14>
    15d6:	00 d0       	rcall	.+0      	; 0x15d8 <setup+0x16>
    15d8:	cd b7       	in	r28, 0x3d	; 61
    15da:	de b7       	in	r29, 0x3e	; 62
    15dc:	3c 9a       	sbi	0x07, 4	; 7
    15de:	8f e1       	ldi	r24, 0x1F	; 31
    15e0:	9e e4       	ldi	r25, 0x4E	; 78
    15e2:	01 97       	sbiw	r24, 0x01	; 1
    15e4:	f1 f7       	brne	.-4      	; 0x15e2 <setup+0x20>
    15e6:	00 c0       	rjmp	.+0      	; 0x15e8 <setup+0x26>
    15e8:	00 00       	nop
    15ea:	0e 94 92 01 	call	0x324	; 0x324 <_ZL11disable_ETHv>
    15ee:	8f e1       	ldi	r24, 0x1F	; 31
    15f0:	9e e4       	ldi	r25, 0x4E	; 78
    15f2:	01 97       	sbiw	r24, 0x01	; 1
    15f4:	f1 f7       	brne	.-4      	; 0x15f2 <setup+0x30>
    15f6:	00 c0       	rjmp	.+0      	; 0x15f8 <setup+0x36>
    15f8:	00 00       	nop
    15fa:	24 9a       	sbi	0x04, 4	; 4
    15fc:	8f e1       	ldi	r24, 0x1F	; 31
    15fe:	9e e4       	ldi	r25, 0x4E	; 78
    1600:	01 97       	sbiw	r24, 0x01	; 1
    1602:	f1 f7       	brne	.-4      	; 0x1600 <setup+0x3e>
    1604:	00 c0       	rjmp	.+0      	; 0x1606 <setup+0x44>
    1606:	00 00       	nop
    1608:	0e 94 94 01 	call	0x328	; 0x328 <_ZL13disable_FLASHv>
    160c:	8f e1       	ldi	r24, 0x1F	; 31
    160e:	9e e4       	ldi	r25, 0x4E	; 78
    1610:	01 97       	sbiw	r24, 0x01	; 1
    1612:	f1 f7       	brne	.-4      	; 0x1610 <setup+0x4e>
    1614:	00 c0       	rjmp	.+0      	; 0x1616 <setup+0x54>
    1616:	00 00       	nop
    1618:	63 e2       	ldi	r22, 0x23	; 35
    161a:	73 e0       	ldi	r23, 0x03	; 3
    161c:	85 e5       	ldi	r24, 0x55	; 85
    161e:	9d e0       	ldi	r25, 0x0D	; 13
    1620:	0e 94 5b 3b 	call	0x76b6	; 0x76b6 <_ZN5Print7printlnEPKc>
    1624:	3f 9a       	sbi	0x07, 7	; 7
    1626:	0f 9a       	sbi	0x01, 7	; 1
    1628:	8f e3       	ldi	r24, 0x3F	; 63
    162a:	9c e9       	ldi	r25, 0x9C	; 156
    162c:	01 97       	sbiw	r24, 0x01	; 1
    162e:	f1 f7       	brne	.-4      	; 0x162c <setup+0x6a>
    1630:	00 c0       	rjmp	.+0      	; 0x1632 <setup+0x70>
    1632:	00 00       	nop
    1634:	47 9a       	sbi	0x08, 7	; 8
    1636:	8f e3       	ldi	r24, 0x3F	; 63
    1638:	9c e9       	ldi	r25, 0x9C	; 156
    163a:	01 97       	sbiw	r24, 0x01	; 1
    163c:	f1 f7       	brne	.-4      	; 0x163a <setup+0x78>
    163e:	00 c0       	rjmp	.+0      	; 0x1640 <setup+0x7e>
    1640:	00 00       	nop
    1642:	17 9a       	sbi	0x02, 7	; 2
    1644:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <_Z9printLinev>
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	44 e0       	ldi	r20, 0x04	; 4
    164c:	64 e1       	ldi	r22, 0x14	; 20
    164e:	86 ec       	ldi	r24, 0xC6	; 198
    1650:	9b e0       	ldi	r25, 0x0B	; 11
    1652:	0e 94 c5 2c 	call	0x598a	; 0x598a <_ZN17LiquidCrystal_I2C5beginEhhh>
    1656:	86 ec       	ldi	r24, 0xC6	; 198
    1658:	9b e0       	ldi	r25, 0x0B	; 11
    165a:	0e 94 a2 2a 	call	0x5544	; 0x5544 <_ZN3LCD9backlightEv>
    165e:	9f ef       	ldi	r25, 0xFF	; 255
    1660:	24 e3       	ldi	r18, 0x34	; 52
    1662:	8c e0       	ldi	r24, 0x0C	; 12
    1664:	91 50       	subi	r25, 0x01	; 1
    1666:	20 40       	sbci	r18, 0x00	; 0
    1668:	80 40       	sbci	r24, 0x00	; 0
    166a:	e1 f7       	brne	.-8      	; 0x1664 <setup+0xa2>
    166c:	00 c0       	rjmp	.+0      	; 0x166e <setup+0xac>
    166e:	00 00       	nop
    1670:	86 ec       	ldi	r24, 0xC6	; 198
    1672:	9b e0       	ldi	r25, 0x0B	; 11
    1674:	0e 94 aa 2a 	call	0x5554	; 0x5554 <_ZN3LCD11noBacklightEv>
    1678:	9f ef       	ldi	r25, 0xFF	; 255
    167a:	24 e3       	ldi	r18, 0x34	; 52
    167c:	8c e0       	ldi	r24, 0x0C	; 12
    167e:	91 50       	subi	r25, 0x01	; 1
    1680:	20 40       	sbci	r18, 0x00	; 0
    1682:	80 40       	sbci	r24, 0x00	; 0
    1684:	e1 f7       	brne	.-8      	; 0x167e <setup+0xbc>
    1686:	00 c0       	rjmp	.+0      	; 0x1688 <setup+0xc6>
    1688:	00 00       	nop
    168a:	86 ec       	ldi	r24, 0xC6	; 198
    168c:	9b e0       	ldi	r25, 0x0B	; 11
    168e:	0e 94 a2 2a 	call	0x5544	; 0x5544 <_ZN3LCD9backlightEv>
    1692:	9f ef       	ldi	r25, 0xFF	; 255
    1694:	24 e3       	ldi	r18, 0x34	; 52
    1696:	8c e0       	ldi	r24, 0x0C	; 12
    1698:	91 50       	subi	r25, 0x01	; 1
    169a:	20 40       	sbci	r18, 0x00	; 0
    169c:	80 40       	sbci	r24, 0x00	; 0
    169e:	e1 f7       	brne	.-8      	; 0x1698 <setup+0xd6>
    16a0:	00 c0       	rjmp	.+0      	; 0x16a2 <setup+0xe0>
    16a2:	00 00       	nop
    16a4:	86 ec       	ldi	r24, 0xC6	; 198
    16a6:	9b e0       	ldi	r25, 0x0B	; 11
    16a8:	0e 94 aa 2a 	call	0x5554	; 0x5554 <_ZN3LCD11noBacklightEv>
    16ac:	9f ef       	ldi	r25, 0xFF	; 255
    16ae:	24 e3       	ldi	r18, 0x34	; 52
    16b0:	8c e0       	ldi	r24, 0x0C	; 12
    16b2:	91 50       	subi	r25, 0x01	; 1
    16b4:	20 40       	sbci	r18, 0x00	; 0
    16b6:	80 40       	sbci	r24, 0x00	; 0
    16b8:	e1 f7       	brne	.-8      	; 0x16b2 <setup+0xf0>
    16ba:	00 c0       	rjmp	.+0      	; 0x16bc <setup+0xfa>
    16bc:	00 00       	nop
    16be:	46 e3       	ldi	r20, 0x36	; 54
    16c0:	51 e0       	ldi	r21, 0x01	; 1
    16c2:	61 e0       	ldi	r22, 0x01	; 1
    16c4:	86 ec       	ldi	r24, 0xC6	; 198
    16c6:	9b e0       	ldi	r25, 0x0B	; 11
    16c8:	0e 94 88 2b 	call	0x5710	; 0x5710 <_ZN3LCD10createCharEhPh>
    16cc:	9f ef       	ldi	r25, 0xFF	; 255
    16ce:	29 ef       	ldi	r18, 0xF9	; 249
    16d0:	80 e0       	ldi	r24, 0x00	; 0
    16d2:	91 50       	subi	r25, 0x01	; 1
    16d4:	20 40       	sbci	r18, 0x00	; 0
    16d6:	80 40       	sbci	r24, 0x00	; 0
    16d8:	e1 f7       	brne	.-8      	; 0x16d2 <setup+0x110>
    16da:	00 c0       	rjmp	.+0      	; 0x16dc <setup+0x11a>
    16dc:	00 00       	nop
    16de:	86 ec       	ldi	r24, 0xC6	; 198
    16e0:	9b e0       	ldi	r25, 0x0B	; 11
    16e2:	0e 94 a2 2a 	call	0x5544	; 0x5544 <_ZN3LCD9backlightEv>
    16e6:	0d e3       	ldi	r16, 0x3D	; 61
    16e8:	1b e0       	ldi	r17, 0x0B	; 11
    16ea:	63 ec       	ldi	r22, 0xC3	; 195
    16ec:	71 e0       	ldi	r23, 0x01	; 1
    16ee:	c8 01       	movw	r24, r16
    16f0:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <_ZN6StringaSEPKc>
    16f4:	0a 5f       	subi	r16, 0xFA	; 250
    16f6:	1f 4f       	sbci	r17, 0xFF	; 255
    16f8:	9b e0       	ldi	r25, 0x0B	; 11
    16fa:	05 35       	cpi	r16, 0x55	; 85
    16fc:	19 07       	cpc	r17, r25
    16fe:	a9 f7       	brne	.-22     	; 0x16ea <setup+0x128>
    1700:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <_Z9printLinev>
    1704:	8f ea       	ldi	r24, 0xAF	; 175
    1706:	9b e0       	ldi	r25, 0x0B	; 11
    1708:	0e 94 c7 18 	call	0x318e	; 0x318e <_ZN14Adafruit_PN5325beginEv>
    170c:	2f ef       	ldi	r18, 0xFF	; 255
    170e:	80 e7       	ldi	r24, 0x70	; 112
    1710:	92 e0       	ldi	r25, 0x02	; 2
    1712:	21 50       	subi	r18, 0x01	; 1
    1714:	80 40       	sbci	r24, 0x00	; 0
    1716:	90 40       	sbci	r25, 0x00	; 0
    1718:	e1 f7       	brne	.-8      	; 0x1712 <setup+0x150>
    171a:	00 c0       	rjmp	.+0      	; 0x171c <setup+0x15a>
    171c:	00 00       	nop
    171e:	8f ea       	ldi	r24, 0xAF	; 175
    1720:	9b e0       	ldi	r25, 0x0B	; 11
    1722:	0e 94 14 19 	call	0x3228	; 0x3228 <_ZN14Adafruit_PN53218getFirmwareVersionEv>
    1726:	6b 01       	movw	r12, r22
    1728:	7c 01       	movw	r14, r24
    172a:	67 2b       	or	r22, r23
    172c:	68 2b       	or	r22, r24
    172e:	69 2b       	or	r22, r25
    1730:	69 f5       	brne	.+90     	; 0x178c <setup+0x1ca>
    1732:	68 e3       	ldi	r22, 0x38	; 56
    1734:	73 e0       	ldi	r23, 0x03	; 3
    1736:	85 e5       	ldi	r24, 0x55	; 85
    1738:	9d e0       	ldi	r25, 0x0D	; 13
    173a:	0e 94 30 3b 	call	0x7660	; 0x7660 <_ZN5Print5printEPKc>
    173e:	86 ec       	ldi	r24, 0xC6	; 198
    1740:	9b e0       	ldi	r25, 0x0B	; 11
    1742:	0e 94 a2 2a 	call	0x5544	; 0x5544 <_ZN3LCD9backlightEv>
    1746:	2f ef       	ldi	r18, 0xFF	; 255
    1748:	84 e3       	ldi	r24, 0x34	; 52
    174a:	9c e0       	ldi	r25, 0x0C	; 12
    174c:	21 50       	subi	r18, 0x01	; 1
    174e:	80 40       	sbci	r24, 0x00	; 0
    1750:	90 40       	sbci	r25, 0x00	; 0
    1752:	e1 f7       	brne	.-8      	; 0x174c <setup+0x18a>
    1754:	00 c0       	rjmp	.+0      	; 0x1756 <setup+0x194>
    1756:	00 00       	nop
    1758:	86 ec       	ldi	r24, 0xC6	; 198
    175a:	9b e0       	ldi	r25, 0x0B	; 11
    175c:	0e 94 ba 2a 	call	0x5574	; 0x5574 <_ZN3LCD5clearEv>
    1760:	61 e5       	ldi	r22, 0x51	; 81
    1762:	73 e0       	ldi	r23, 0x03	; 3
    1764:	86 ec       	ldi	r24, 0xC6	; 198
    1766:	9b e0       	ldi	r25, 0x0B	; 11
    1768:	0e 94 30 3b 	call	0x7660	; 0x7660 <_ZN5Print5printEPKc>
    176c:	2f ef       	ldi	r18, 0xFF	; 255
    176e:	87 ea       	ldi	r24, 0xA7	; 167
    1770:	91 e6       	ldi	r25, 0x61	; 97
    1772:	21 50       	subi	r18, 0x01	; 1
    1774:	80 40       	sbci	r24, 0x00	; 0
    1776:	90 40       	sbci	r25, 0x00	; 0
    1778:	e1 f7       	brne	.-8      	; 0x1772 <setup+0x1b0>
    177a:	00 c0       	rjmp	.+0      	; 0x177c <setup+0x1ba>
    177c:	00 00       	nop
    177e:	6b e6       	ldi	r22, 0x6B	; 107
    1780:	73 e0       	ldi	r23, 0x03	; 3
    1782:	89 ea       	ldi	r24, 0xA9	; 169
    1784:	9b e0       	ldi	r25, 0x0B	; 11
    1786:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <_ZN6StringaSEPKc>
    178a:	06 c0       	rjmp	.+12     	; 0x1798 <setup+0x1d6>
    178c:	6e e7       	ldi	r22, 0x7E	; 126
    178e:	73 e0       	ldi	r23, 0x03	; 3
    1790:	85 e5       	ldi	r24, 0x55	; 85
    1792:	9d e0       	ldi	r25, 0x0D	; 13
    1794:	0e 94 5b 3b 	call	0x76b6	; 0x76b6 <_ZN5Print7printlnEPKc>
    1798:	63 e9       	ldi	r22, 0x93	; 147
    179a:	73 e0       	ldi	r23, 0x03	; 3
    179c:	85 e5       	ldi	r24, 0x55	; 85
    179e:	9d e0       	ldi	r25, 0x0D	; 13
    17a0:	0e 94 30 3b 	call	0x7660	; 0x7660 <_ZN5Print5printEPKc>
    17a4:	4f 2d       	mov	r20, r15
    17a6:	55 27       	eor	r21, r21
    17a8:	66 27       	eor	r22, r22
    17aa:	77 27       	eor	r23, r23
    17ac:	20 e1       	ldi	r18, 0x10	; 16
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	85 e5       	ldi	r24, 0x55	; 85
    17b2:	9d e0       	ldi	r25, 0x0D	; 13
    17b4:	0e 94 d4 3b 	call	0x77a8	; 0x77a8 <_ZN5Print7printlnEmi>
    17b8:	62 ea       	ldi	r22, 0xA2	; 162
    17ba:	73 e0       	ldi	r23, 0x03	; 3
    17bc:	85 e5       	ldi	r24, 0x55	; 85
    17be:	9d e0       	ldi	r25, 0x0D	; 13
    17c0:	0e 94 30 3b 	call	0x7660	; 0x7660 <_ZN5Print5printEPKc>
    17c4:	4e 2d       	mov	r20, r14
    17c6:	50 e0       	ldi	r21, 0x00	; 0
    17c8:	60 e0       	ldi	r22, 0x00	; 0
    17ca:	70 e0       	ldi	r23, 0x00	; 0
    17cc:	2a e0       	ldi	r18, 0x0A	; 10
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	85 e5       	ldi	r24, 0x55	; 85
    17d2:	9d e0       	ldi	r25, 0x0D	; 13
    17d4:	0e 94 b2 3b 	call	0x7764	; 0x7764 <_ZN5Print5printEmi>
    17d8:	6e e2       	ldi	r22, 0x2E	; 46
    17da:	85 e5       	ldi	r24, 0x55	; 85
    17dc:	9d e0       	ldi	r25, 0x0D	; 13
    17de:	0e 94 31 3b 	call	0x7662	; 0x7662 <_ZN5Print5printEc>
    17e2:	4d 2d       	mov	r20, r13
    17e4:	50 e0       	ldi	r21, 0x00	; 0
    17e6:	60 e0       	ldi	r22, 0x00	; 0
    17e8:	70 e0       	ldi	r23, 0x00	; 0
    17ea:	2a e0       	ldi	r18, 0x0A	; 10
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	85 e5       	ldi	r24, 0x55	; 85
    17f0:	9d e0       	ldi	r25, 0x0D	; 13
    17f2:	0e 94 d4 3b 	call	0x77a8	; 0x77a8 <_ZN5Print7printlnEmi>
    17f6:	6f ef       	ldi	r22, 0xFF	; 255
    17f8:	8f ea       	ldi	r24, 0xAF	; 175
    17fa:	9b e0       	ldi	r25, 0x0B	; 11
    17fc:	0e 94 8a 19 	call	0x3314	; 0x3314 <_ZN14Adafruit_PN53227setPassiveActivationRetriesEh>
    1800:	8f ea       	ldi	r24, 0xAF	; 175
    1802:	9b e0       	ldi	r25, 0x0B	; 11
    1804:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <_ZN14Adafruit_PN5329SAMConfigEv>
    1808:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <_Z9printLinev>
    180c:	2c 98       	cbi	0x05, 4	; 5
    180e:	60 e0       	ldi	r22, 0x00	; 0
    1810:	82 e8       	ldi	r24, 0x82	; 130
    1812:	99 e0       	ldi	r25, 0x09	; 9
    1814:	0e 94 7f 2d 	call	0x5afe	; 0x5afe <_ZN8SPIFlash5errorEb>
    1818:	88 23       	and	r24, r24
    181a:	61 f0       	breq	.+24     	; 0x1834 <setup+0x272>
    181c:	61 e0       	ldi	r22, 0x01	; 1
    181e:	82 e8       	ldi	r24, 0x82	; 130
    1820:	99 e0       	ldi	r25, 0x09	; 9
    1822:	0e 94 7f 2d 	call	0x5afe	; 0x5afe <_ZN8SPIFlash5errorEb>
    1826:	4a e0       	ldi	r20, 0x0A	; 10
    1828:	50 e0       	ldi	r21, 0x00	; 0
    182a:	68 2f       	mov	r22, r24
    182c:	85 e5       	ldi	r24, 0x55	; 85
    182e:	9d e0       	ldi	r25, 0x0D	; 13
    1830:	0e 94 c4 3b 	call	0x7788	; 0x7788 <_ZN5Print7printlnEhi>
    1834:	40 e0       	ldi	r20, 0x00	; 0
    1836:	50 e0       	ldi	r21, 0x00	; 0
    1838:	ba 01       	movw	r22, r20
    183a:	82 e8       	ldi	r24, 0x82	; 130
    183c:	99 e0       	ldi	r25, 0x09	; 9
    183e:	0e 94 57 2d 	call	0x5aae	; 0x5aae <_ZN8SPIFlash5beginEm>
    1842:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <_Z5getIDv>
    1846:	88 23       	and	r24, r24
    1848:	09 f4       	brne	.+2      	; 0x184c <setup+0x28a>
    184a:	44 c0       	rjmp	.+136    	; 0x18d4 <setup+0x312>
    184c:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <_Z9printLinev>
    1850:	87 e0       	ldi	r24, 0x07	; 7
    1852:	0e 94 0b 02 	call	0x416	; 0x416 <_Z8printTabh>
    1856:	61 eb       	ldi	r22, 0xB1	; 177
    1858:	73 e0       	ldi	r23, 0x03	; 3
    185a:	85 e5       	ldi	r24, 0x55	; 85
    185c:	9d e0       	ldi	r25, 0x0D	; 13
    185e:	0e 94 30 3b 	call	0x7660	; 0x7660 <_ZN5Print5printEPKc>
    1862:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <_Z9printLinev>
    1866:	83 e0       	ldi	r24, 0x03	; 3
    1868:	0e 94 0b 02 	call	0x416	; 0x416 <_Z8printTabh>
    186c:	66 ec       	ldi	r22, 0xC6	; 198
    186e:	73 e0       	ldi	r23, 0x03	; 3
    1870:	85 e5       	ldi	r24, 0x55	; 85
    1872:	9d e0       	ldi	r25, 0x0D	; 13
    1874:	0e 94 30 3b 	call	0x7660	; 0x7660 <_ZN5Print5printEPKc>
    1878:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <_Z9printLinev>
    187c:	82 e0       	ldi	r24, 0x02	; 2
    187e:	0e 94 0b 02 	call	0x416	; 0x416 <_Z8printTabh>
    1882:	0e 94 9e 03 	call	0x73c	; 0x73c <_Z12FlashpowerUpv>
    1886:	85 e5       	ldi	r24, 0x55	; 85
    1888:	9d e0       	ldi	r25, 0x0D	; 13
    188a:	0e 94 38 3b 	call	0x7670	; 0x7670 <_ZN5Print7printlnEv>
    188e:	0e 94 c6 03 	call	0x78c	; 0x78c <_Z13eraseChipTestv>
    1892:	85 e5       	ldi	r24, 0x55	; 85
    1894:	9d e0       	ldi	r25, 0x0D	; 13
    1896:	0e 94 38 3b 	call	0x7670	; 0x7670 <_ZN5Print7printlnEv>
    189a:	68 ef       	ldi	r22, 0xF8	; 248
    189c:	71 e0       	ldi	r23, 0x01	; 1
    189e:	ce 01       	movw	r24, r28
    18a0:	01 96       	adiw	r24, 0x01	; 1
    18a2:	0e 94 01 3e 	call	0x7c02	; 0x7c02 <_ZN6StringC1EPKc>
    18a6:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <addr_erog>
    18aa:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <addr_erog+0x1>
    18ae:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <addr_erog+0x2>
    18b2:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <addr_erog+0x3>
    18b6:	ae 01       	movw	r20, r28
    18b8:	4f 5f       	subi	r20, 0xFF	; 255
    18ba:	5f 4f       	sbci	r21, 0xFF	; 255
    18bc:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z15erogazioniSaverm6String>
    18c0:	ce 01       	movw	r24, r28
    18c2:	01 96       	adiw	r24, 0x01	; 1
    18c4:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <_ZN6StringD1Ev>
    18c8:	0e 94 76 03 	call	0x6ec	; 0x6ec <_Z14FlashpowerDownv>
    18cc:	85 e5       	ldi	r24, 0x55	; 85
    18ce:	9d e0       	ldi	r25, 0x0D	; 13
    18d0:	0e 94 38 3b 	call	0x7670	; 0x7670 <_ZN5Print7printlnEv>
    18d4:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <_Z9printLinev>
    18d8:	40 ea       	ldi	r20, 0xA0	; 160
    18da:	56 e8       	ldi	r21, 0x86	; 134
    18dc:	61 e0       	ldi	r22, 0x01	; 1
    18de:	70 e0       	ldi	r23, 0x00	; 0
    18e0:	88 e8       	ldi	r24, 0x88	; 136
    18e2:	9a e0       	ldi	r25, 0x0A	; 10
    18e4:	0e 94 a6 1c 	call	0x394c	; 0x394c <_ZN13DS3231M_Class5beginEm>
    18e8:	81 11       	cpse	r24, r1
    18ea:	10 c0       	rjmp	.+32     	; 0x190c <setup+0x34a>
    18ec:	67 ed       	ldi	r22, 0xD7	; 215
    18ee:	71 e0       	ldi	r23, 0x01	; 1
    18f0:	85 e5       	ldi	r24, 0x55	; 85
    18f2:	9d e0       	ldi	r25, 0x0D	; 13
    18f4:	0e 94 3b 3b 	call	0x7676	; 0x7676 <_ZN5Print7printlnEPK19__FlashStringHelper>
    18f8:	2f ef       	ldi	r18, 0xFF	; 255
    18fa:	83 ed       	ldi	r24, 0xD3	; 211
    18fc:	90 e3       	ldi	r25, 0x30	; 48
    18fe:	21 50       	subi	r18, 0x01	; 1
    1900:	80 40       	sbci	r24, 0x00	; 0
    1902:	90 40       	sbci	r25, 0x00	; 0
    1904:	e1 f7       	brne	.-8      	; 0x18fe <setup+0x33c>
    1906:	00 c0       	rjmp	.+0      	; 0x1908 <setup+0x346>
    1908:	00 00       	nop
    190a:	e6 cf       	rjmp	.-52     	; 0x18d8 <setup+0x316>
    190c:	2f ef       	ldi	r18, 0xFF	; 255
    190e:	80 e7       	ldi	r24, 0x70	; 112
    1910:	92 e0       	ldi	r25, 0x02	; 2
    1912:	21 50       	subi	r18, 0x01	; 1
    1914:	80 40       	sbci	r24, 0x00	; 0
    1916:	90 40       	sbci	r25, 0x00	; 0
    1918:	e1 f7       	brne	.-8      	; 0x1912 <setup+0x350>
    191a:	00 c0       	rjmp	.+0      	; 0x191c <setup+0x35a>
    191c:	00 00       	nop
    191e:	62 ec       	ldi	r22, 0xC2	; 194
    1920:	71 e0       	ldi	r23, 0x01	; 1
    1922:	85 e5       	ldi	r24, 0x55	; 85
    1924:	9d e0       	ldi	r25, 0x0D	; 13
    1926:	0e 94 3b 3b 	call	0x7676	; 0x7676 <_ZN5Print7printlnEPK19__FlashStringHelper>
    192a:	88 e8       	ldi	r24, 0x88	; 136
    192c:	9a e0       	ldi	r25, 0x0A	; 10
    192e:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <_ZN13DS3231M_Class6adjustEv>
    1932:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <_Z9printLinev>
    1936:	6f ec       	ldi	r22, 0xCF	; 207
    1938:	73 e0       	ldi	r23, 0x03	; 3
    193a:	85 e5       	ldi	r24, 0x55	; 85
    193c:	9d e0       	ldi	r25, 0x0D	; 13
    193e:	0e 94 5b 3b 	call	0x76b6	; 0x76b6 <_ZN5Print7printlnEPKc>
    1942:	8f ef       	ldi	r24, 0xFF	; 255
    1944:	9c e0       	ldi	r25, 0x0C	; 12
    1946:	0e 94 02 38 	call	0x7004	; 0x7004 <_ZN7TwoWire5beginEv>
    194a:	68 e2       	ldi	r22, 0x28	; 40
    194c:	70 e0       	ldi	r23, 0x00	; 0
    194e:	8f ef       	ldi	r24, 0xFF	; 255
    1950:	9c e0       	ldi	r25, 0x0C	; 12
    1952:	0e 94 1f 38 	call	0x703e	; 0x703e <_ZN7TwoWire17beginTransmissionEi>
    1956:	60 e0       	ldi	r22, 0x00	; 0
    1958:	8f ef       	ldi	r24, 0xFF	; 255
    195a:	9c e0       	ldi	r25, 0x0C	; 12
    195c:	0e 94 c4 37 	call	0x6f88	; 0x6f88 <_ZN7TwoWire5writeEh>
    1960:	62 e3       	ldi	r22, 0x32	; 50
    1962:	70 e0       	ldi	r23, 0x00	; 0
    1964:	8f ef       	ldi	r24, 0xFF	; 255
    1966:	9c e0       	ldi	r25, 0x0C	; 12
    1968:	0e 94 96 01 	call	0x32c	; 0x32c <_ZN7TwoWire5writeEi>
    196c:	8f ef       	ldi	r24, 0xFF	; 255
    196e:	9c e0       	ldi	r25, 0x0C	; 12
    1970:	0e 94 96 38 	call	0x712c	; 0x712c <_ZN7TwoWire15endTransmissionEv>
    1974:	2f ef       	ldi	r18, 0xFF	; 255
    1976:	80 e7       	ldi	r24, 0x70	; 112
    1978:	92 e0       	ldi	r25, 0x02	; 2
    197a:	21 50       	subi	r18, 0x01	; 1
    197c:	80 40       	sbci	r24, 0x00	; 0
    197e:	90 40       	sbci	r25, 0x00	; 0
    1980:	e1 f7       	brne	.-8      	; 0x197a <setup+0x3b8>
    1982:	00 c0       	rjmp	.+0      	; 0x1984 <setup+0x3c2>
    1984:	00 00       	nop
    1986:	62 e5       	ldi	r22, 0x52	; 82
    1988:	70 e0       	ldi	r23, 0x00	; 0
    198a:	8f ef       	ldi	r24, 0xFF	; 255
    198c:	9c e0       	ldi	r25, 0x0C	; 12
    198e:	0e 94 1f 38 	call	0x703e	; 0x703e <_ZN7TwoWire17beginTransmissionEi>
    1992:	60 e0       	ldi	r22, 0x00	; 0
    1994:	8f ef       	ldi	r24, 0xFF	; 255
    1996:	9c e0       	ldi	r25, 0x0C	; 12
    1998:	0e 94 c4 37 	call	0x6f88	; 0x6f88 <_ZN7TwoWire5writeEh>
    199c:	62 e3       	ldi	r22, 0x32	; 50
    199e:	70 e0       	ldi	r23, 0x00	; 0
    19a0:	8f ef       	ldi	r24, 0xFF	; 255
    19a2:	9c e0       	ldi	r25, 0x0C	; 12
    19a4:	0e 94 96 01 	call	0x32c	; 0x32c <_ZN7TwoWire5writeEi>
    19a8:	8f ef       	ldi	r24, 0xFF	; 255
    19aa:	9c e0       	ldi	r25, 0x0C	; 12
    19ac:	0e 94 96 38 	call	0x712c	; 0x712c <_ZN7TwoWire15endTransmissionEv>
    19b0:	8f ef       	ldi	r24, 0xFF	; 255
    19b2:	9c e0       	ldi	r25, 0x0C	; 12
    19b4:	0e 94 11 38 	call	0x7022	; 0x7022 <_ZN7TwoWire3endEv>
    19b8:	63 e0       	ldi	r22, 0x03	; 3
    19ba:	74 e0       	ldi	r23, 0x04	; 4
    19bc:	85 e5       	ldi	r24, 0x55	; 85
    19be:	9d e0       	ldi	r25, 0x0D	; 13
    19c0:	0e 94 5b 3b 	call	0x76b6	; 0x76b6 <_ZN5Print7printlnEPKc>
    19c4:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <_Z9printLinev>
    19c8:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <_Z9printLinev>
    19cc:	64 e1       	ldi	r22, 0x14	; 20
    19ce:	74 e0       	ldi	r23, 0x04	; 4
    19d0:	85 e5       	ldi	r24, 0x55	; 85
    19d2:	9d e0       	ldi	r25, 0x0D	; 13
    19d4:	0e 94 5b 3b 	call	0x76b6	; 0x76b6 <_ZN5Print7printlnEPKc>
    19d8:	6b e4       	ldi	r22, 0x4B	; 75
    19da:	74 e0       	ldi	r23, 0x04	; 4
    19dc:	85 e5       	ldi	r24, 0x55	; 85
    19de:	9d e0       	ldi	r25, 0x0D	; 13
    19e0:	0e 94 5b 3b 	call	0x76b6	; 0x76b6 <_ZN5Print7printlnEPKc>
    19e4:	2f ef       	ldi	r18, 0xFF	; 255
    19e6:	80 e7       	ldi	r24, 0x70	; 112
    19e8:	92 e0       	ldi	r25, 0x02	; 2
    19ea:	21 50       	subi	r18, 0x01	; 1
    19ec:	80 40       	sbci	r24, 0x00	; 0
    19ee:	90 40       	sbci	r25, 0x00	; 0
    19f0:	e1 f7       	brne	.-8      	; 0x19ea <setup+0x428>
    19f2:	00 c0       	rjmp	.+0      	; 0x19f4 <setup+0x432>
    19f4:	00 00       	nop
    19f6:	0e 94 9d 01 	call	0x33a	; 0x33a <_Z14initIOExpanderv>
    19fa:	2f ef       	ldi	r18, 0xFF	; 255
    19fc:	80 e7       	ldi	r24, 0x70	; 112
    19fe:	92 e0       	ldi	r25, 0x02	; 2
    1a00:	21 50       	subi	r18, 0x01	; 1
    1a02:	80 40       	sbci	r24, 0x00	; 0
    1a04:	90 40       	sbci	r25, 0x00	; 0
    1a06:	e1 f7       	brne	.-8      	; 0x1a00 <setup+0x43e>
    1a08:	00 c0       	rjmp	.+0      	; 0x1a0a <setup+0x448>
    1a0a:	00 00       	nop
    1a0c:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <_Z9printLinev>
    1a10:	8e ef       	ldi	r24, 0xFE	; 254
    1a12:	9f ef       	ldi	r25, 0xFF	; 255
    1a14:	90 93 a0 0b 	sts	0x0BA0, r25	; 0x800ba0 <stato_procedura+0x1>
    1a18:	80 93 9f 0b 	sts	0x0B9F, r24	; 0x800b9f <stato_procedura>
    1a1c:	66 e6       	ldi	r22, 0x66	; 102
    1a1e:	74 e0       	ldi	r23, 0x04	; 4
    1a20:	89 ea       	ldi	r24, 0xA9	; 169
    1a22:	9b e0       	ldi	r25, 0x0B	; 11
    1a24:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <_ZN6StringaSEPKc>
    1a28:	69 ea       	ldi	r22, 0xA9	; 169
    1a2a:	7b e0       	ldi	r23, 0x0B	; 11
    1a2c:	85 e5       	ldi	r24, 0x55	; 85
    1a2e:	9d e0       	ldi	r25, 0x0D	; 13
    1a30:	0e 94 4b 3b 	call	0x7696	; 0x7696 <_ZN5Print7printlnERK6String>
    1a34:	26 96       	adiw	r28, 0x06	; 6
    1a36:	0f b6       	in	r0, 0x3f	; 63
    1a38:	f8 94       	cli
    1a3a:	de bf       	out	0x3e, r29	; 62
    1a3c:	0f be       	out	0x3f, r0	; 63
    1a3e:	cd bf       	out	0x3d, r28	; 61
    1a40:	df 91       	pop	r29
    1a42:	cf 91       	pop	r28
    1a44:	1f 91       	pop	r17
    1a46:	0f 91       	pop	r16
    1a48:	ff 90       	pop	r15
    1a4a:	ef 90       	pop	r14
    1a4c:	df 90       	pop	r13
    1a4e:	cf 90       	pop	r12
    1a50:	08 95       	ret

00001a52 <_Z23getTastoPremuto_x_targav>:
    1a52:	ef 92       	push	r14
    1a54:	ff 92       	push	r15
    1a56:	0f 93       	push	r16
    1a58:	1f 93       	push	r17
    1a5a:	cf 93       	push	r28
    1a5c:	df 93       	push	r29
    1a5e:	cd b7       	in	r28, 0x3d	; 61
    1a60:	de b7       	in	r29, 0x3e	; 62
    1a62:	62 97       	sbiw	r28, 0x12	; 18
    1a64:	0f b6       	in	r0, 0x3f	; 63
    1a66:	f8 94       	cli
    1a68:	de bf       	out	0x3e, r29	; 62
    1a6a:	0f be       	out	0x3f, r0	; 63
    1a6c:	cd bf       	out	0x3d, r28	; 61
    1a6e:	8f ef       	ldi	r24, 0xFF	; 255
    1a70:	9c e0       	ldi	r25, 0x0C	; 12
    1a72:	0e 94 61 37 	call	0x6ec2	; 0x6ec2 <_ZN7TwoWire5flushEv>
    1a76:	41 e0       	ldi	r20, 0x01	; 1
    1a78:	50 e0       	ldi	r21, 0x00	; 0
    1a7a:	60 e2       	ldi	r22, 0x20	; 32
    1a7c:	70 e0       	ldi	r23, 0x00	; 0
    1a7e:	8f ef       	ldi	r24, 0xFF	; 255
    1a80:	9c e0       	ldi	r25, 0x0C	; 12
    1a82:	0e 94 94 38 	call	0x7128	; 0x7128 <_ZN7TwoWire11requestFromEii>
    1a86:	63 ec       	ldi	r22, 0xC3	; 195
    1a88:	71 e0       	ldi	r23, 0x01	; 1
    1a8a:	ce 01       	movw	r24, r28
    1a8c:	0d 96       	adiw	r24, 0x0d	; 13
    1a8e:	0e 94 01 3e 	call	0x7c02	; 0x7c02 <_ZN6StringC1EPKc>
    1a92:	11 e0       	ldi	r17, 0x01	; 1
    1a94:	02 e0       	ldi	r16, 0x02	; 2
    1a96:	83 e0       	ldi	r24, 0x03	; 3
    1a98:	f8 2e       	mov	r15, r24
    1a9a:	94 e0       	ldi	r25, 0x04	; 4
    1a9c:	e9 2e       	mov	r14, r25
    1a9e:	8f ef       	ldi	r24, 0xFF	; 255
    1aa0:	9c e0       	ldi	r25, 0x0C	; 12
    1aa2:	0e 94 36 37 	call	0x6e6c	; 0x6e6c <_ZN7TwoWire9availableEv>
    1aa6:	89 2b       	or	r24, r25
    1aa8:	09 f4       	brne	.+2      	; 0x1aac <_Z23getTastoPremuto_x_targav+0x5a>
    1aaa:	55 c1       	rjmp	.+682    	; 0x1d56 <_Z23getTastoPremuto_x_targav+0x304>
    1aac:	8f ef       	ldi	r24, 0xFF	; 255
    1aae:	9c e0       	ldi	r25, 0x0C	; 12
    1ab0:	0e 94 3e 37 	call	0x6e7c	; 0x6e7c <_ZN7TwoWire4readEv>
    1ab4:	99 27       	eor	r25, r25
    1ab6:	82 3c       	cpi	r24, 0xC2	; 194
    1ab8:	91 05       	cpc	r25, r1
    1aba:	49 f1       	breq	.+82     	; 0x1b0e <_Z23getTastoPremuto_x_targav+0xbc>
    1abc:	94 f4       	brge	.+36     	; 0x1ae2 <_Z23getTastoPremuto_x_targav+0x90>
    1abe:	83 34       	cpi	r24, 0x43	; 67
    1ac0:	91 05       	cpc	r25, r1
    1ac2:	41 f1       	breq	.+80     	; 0x1b14 <_Z23getTastoPremuto_x_targav+0xc2>
    1ac4:	24 f4       	brge	.+8      	; 0x1ace <_Z23getTastoPremuto_x_targav+0x7c>
    1ac6:	cc 97       	sbiw	r24, 0x3c	; 60
    1ac8:	09 f4       	brne	.+2      	; 0x1acc <_Z23getTastoPremuto_x_targav+0x7a>
    1aca:	49 c0       	rjmp	.+146    	; 0x1b5e <_Z23getTastoPremuto_x_targav+0x10c>
    1acc:	46 c0       	rjmp	.+140    	; 0x1b5a <_Z23getTastoPremuto_x_targav+0x108>
    1ace:	83 38       	cpi	r24, 0x83	; 131
    1ad0:	91 05       	cpc	r25, r1
    1ad2:	81 f1       	breq	.+96     	; 0x1b34 <_Z23getTastoPremuto_x_targav+0xe2>
    1ad4:	81 3c       	cpi	r24, 0xC1	; 193
    1ad6:	91 05       	cpc	r25, r1
    1ad8:	09 f0       	breq	.+2      	; 0x1adc <_Z23getTastoPremuto_x_targav+0x8a>
    1ada:	3f c0       	rjmp	.+126    	; 0x1b5a <_Z23getTastoPremuto_x_targav+0x108>
    1adc:	00 93 74 0a 	sts	0x0A74, r16	; 0x800a74 <key_idx>
    1ae0:	1b c0       	rjmp	.+54     	; 0x1b18 <_Z23getTastoPremuto_x_targav+0xc6>
    1ae2:	8b 3c       	cpi	r24, 0xCB	; 203
    1ae4:	91 05       	cpc	r25, r1
    1ae6:	49 f1       	breq	.+82     	; 0x1b3a <_Z23getTastoPremuto_x_targav+0xe8>
    1ae8:	4c f4       	brge	.+18     	; 0x1afc <_Z23getTastoPremuto_x_targav+0xaa>
    1aea:	83 3c       	cpi	r24, 0xC3	; 195
    1aec:	91 05       	cpc	r25, r1
    1aee:	b9 f1       	breq	.+110    	; 0x1b5e <_Z23getTastoPremuto_x_targav+0x10c>
    1af0:	87 3c       	cpi	r24, 0xC7	; 199
    1af2:	91 05       	cpc	r25, r1
    1af4:	91 f5       	brne	.+100    	; 0x1b5a <_Z23getTastoPremuto_x_targav+0x108>
    1af6:	10 93 75 0a 	sts	0x0A75, r17	; 0x800a75 <key_idx+0x1>
    1afa:	24 c0       	rjmp	.+72     	; 0x1b44 <_Z23getTastoPremuto_x_targav+0xf2>
    1afc:	83 3d       	cpi	r24, 0xD3	; 211
    1afe:	91 05       	cpc	r25, r1
    1b00:	f9 f0       	breq	.+62     	; 0x1b40 <_Z23getTastoPremuto_x_targav+0xee>
    1b02:	83 3e       	cpi	r24, 0xE3	; 227
    1b04:	91 05       	cpc	r25, r1
    1b06:	49 f5       	brne	.+82     	; 0x1b5a <_Z23getTastoPremuto_x_targav+0x108>
    1b08:	e0 92 75 0a 	sts	0x0A75, r14	; 0x800a75 <key_idx+0x1>
    1b0c:	1b c0       	rjmp	.+54     	; 0x1b44 <_Z23getTastoPremuto_x_targav+0xf2>
    1b0e:	10 93 74 0a 	sts	0x0A74, r17	; 0x800a74 <key_idx>
    1b12:	02 c0       	rjmp	.+4      	; 0x1b18 <_Z23getTastoPremuto_x_targav+0xc6>
    1b14:	f0 92 74 0a 	sts	0x0A74, r15	; 0x800a74 <key_idx>
    1b18:	8f e1       	ldi	r24, 0x1F	; 31
    1b1a:	9e e4       	ldi	r25, 0x4E	; 78
    1b1c:	01 97       	sbiw	r24, 0x01	; 1
    1b1e:	f1 f7       	brne	.-4      	; 0x1b1c <_Z23getTastoPremuto_x_targav+0xca>
    1b20:	00 c0       	rjmp	.+0      	; 0x1b22 <_Z23getTastoPremuto_x_targav+0xd0>
    1b22:	00 00       	nop
    1b24:	0e 94 0f 05 	call	0xa1e	; 0xa1e <_Z12leggiColonnev>
    1b28:	80 91 73 0a 	lds	r24, 0x0A73	; 0x800a73 <premuto>
    1b2c:	8f 5f       	subi	r24, 0xFF	; 255
    1b2e:	80 93 73 0a 	sts	0x0A73, r24	; 0x800a73 <premuto>
    1b32:	15 c0       	rjmp	.+42     	; 0x1b5e <_Z23getTastoPremuto_x_targav+0x10c>
    1b34:	e0 92 74 0a 	sts	0x0A74, r14	; 0x800a74 <key_idx>
    1b38:	ef cf       	rjmp	.-34     	; 0x1b18 <_Z23getTastoPremuto_x_targav+0xc6>
    1b3a:	00 93 75 0a 	sts	0x0A75, r16	; 0x800a75 <key_idx+0x1>
    1b3e:	02 c0       	rjmp	.+4      	; 0x1b44 <_Z23getTastoPremuto_x_targav+0xf2>
    1b40:	f0 92 75 0a 	sts	0x0A75, r15	; 0x800a75 <key_idx+0x1>
    1b44:	8f e1       	ldi	r24, 0x1F	; 31
    1b46:	9e e4       	ldi	r25, 0x4E	; 78
    1b48:	01 97       	sbiw	r24, 0x01	; 1
    1b4a:	f1 f7       	brne	.-4      	; 0x1b48 <_Z23getTastoPremuto_x_targav+0xf6>
    1b4c:	00 c0       	rjmp	.+0      	; 0x1b4e <_Z23getTastoPremuto_x_targav+0xfc>
    1b4e:	00 00       	nop
    1b50:	0e 94 f5 04 	call	0x9ea	; 0x9ea <_Z10leggiRighev>
    1b54:	0e 94 3e 05 	call	0xa7c	; 0xa7c <_Z17leggi_OP_REGISTERv>
    1b58:	02 c0       	rjmp	.+4      	; 0x1b5e <_Z23getTastoPremuto_x_targav+0x10c>
    1b5a:	0e 94 0f 05 	call	0xa1e	; 0xa1e <_Z12leggiColonnev>
    1b5e:	0e 94 29 05 	call	0xa52	; 0xa52 <_Z17leggi_IP_REGISTERv>
    1b62:	80 91 73 0a 	lds	r24, 0x0A73	; 0x800a73 <premuto>
    1b66:	88 23       	and	r24, r24
    1b68:	09 f4       	brne	.+2      	; 0x1b6c <_Z23getTastoPremuto_x_targav+0x11a>
    1b6a:	ee c0       	rjmp	.+476    	; 0x1d48 <_Z23getTastoPremuto_x_targav+0x2f6>
    1b6c:	60 91 74 0a 	lds	r22, 0x0A74	; 0x800a74 <key_idx>
    1b70:	94 e0       	ldi	r25, 0x04	; 4
    1b72:	69 9f       	mul	r22, r25
    1b74:	b0 01       	movw	r22, r0
    1b76:	11 24       	eor	r1, r1
    1b78:	6a 5f       	subi	r22, 0xFA	; 250
    1b7a:	7e 4f       	sbci	r23, 0xFE	; 254
    1b7c:	8c e6       	ldi	r24, 0x6C	; 108
    1b7e:	9a e0       	ldi	r25, 0x0A	; 10
    1b80:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <_ZN6StringaSEPKc>
    1b84:	80 91 74 0a 	lds	r24, 0x0A74	; 0x800a74 <key_idx>
    1b88:	84 30       	cpi	r24, 0x04	; 4
    1b8a:	09 f0       	breq	.+2      	; 0x1b8e <_Z23getTastoPremuto_x_targav+0x13c>
    1b8c:	69 c0       	rjmp	.+210    	; 0x1c60 <_Z23getTastoPremuto_x_targav+0x20e>
    1b8e:	80 91 75 0a 	lds	r24, 0x0A75	; 0x800a75 <key_idx+0x1>
    1b92:	83 30       	cpi	r24, 0x03	; 3
    1b94:	81 f4       	brne	.+32     	; 0x1bb6 <_Z23getTastoPremuto_x_targav+0x164>
    1b96:	80 91 72 0a 	lds	r24, 0x0A72	; 0x800a72 <prolungato>
    1b9a:	8f 5f       	subi	r24, 0xFF	; 255
    1b9c:	80 93 72 0a 	sts	0x0A72, r24	; 0x800a72 <prolungato>
    1ba0:	83 30       	cpi	r24, 0x03	; 3
    1ba2:	08 f4       	brcc	.+2      	; 0x1ba6 <_Z23getTastoPremuto_x_targav+0x154>
    1ba4:	cf c0       	rjmp	.+414    	; 0x1d44 <_Z23getTastoPremuto_x_targav+0x2f2>
    1ba6:	80 91 6a 0a 	lds	r24, 0x0A6A	; 0x800a6a <TARGA+0x4>
    1baa:	90 91 6b 0a 	lds	r25, 0x0A6B	; 0x800a6b <TARGA+0x5>
    1bae:	05 97       	sbiw	r24, 0x05	; 5
    1bb0:	09 f0       	breq	.+2      	; 0x1bb4 <_Z23getTastoPremuto_x_targav+0x162>
    1bb2:	c8 c0       	rjmp	.+400    	; 0x1d44 <_Z23getTastoPremuto_x_targav+0x2f2>
    1bb4:	4e c1       	rjmp	.+668    	; 0x1e52 <_Z23getTastoPremuto_x_targav+0x400>
    1bb6:	81 30       	cpi	r24, 0x01	; 1
    1bb8:	09 f0       	breq	.+2      	; 0x1bbc <_Z23getTastoPremuto_x_targav+0x16a>
    1bba:	5a c0       	rjmp	.+180    	; 0x1c70 <_Z23getTastoPremuto_x_targav+0x21e>
    1bbc:	80 91 72 0a 	lds	r24, 0x0A72	; 0x800a72 <prolungato>
    1bc0:	8f 5f       	subi	r24, 0xFF	; 255
    1bc2:	80 93 72 0a 	sts	0x0A72, r24	; 0x800a72 <prolungato>
    1bc6:	83 30       	cpi	r24, 0x03	; 3
    1bc8:	08 f4       	brcc	.+2      	; 0x1bcc <_Z23getTastoPremuto_x_targav+0x17a>
    1bca:	bc c0       	rjmp	.+376    	; 0x1d44 <_Z23getTastoPremuto_x_targav+0x2f2>
    1bcc:	46 e9       	ldi	r20, 0x96	; 150
    1bce:	50 e0       	ldi	r21, 0x00	; 0
    1bd0:	60 e0       	ldi	r22, 0x00	; 0
    1bd2:	70 e0       	ldi	r23, 0x00	; 0
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	0e 94 cc 04 	call	0x998	; 0x998 <_Z6Buzzerhm>
    1bda:	63 ec       	ldi	r22, 0xC3	; 195
    1bdc:	71 e0       	ldi	r23, 0x01	; 1
    1bde:	86 e6       	ldi	r24, 0x66	; 102
    1be0:	9a e0       	ldi	r25, 0x0A	; 10
    1be2:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <_ZN6StringaSEPKc>
    1be6:	64 e7       	ldi	r22, 0x74	; 116
    1be8:	74 e0       	ldi	r23, 0x04	; 4
    1bea:	83 e4       	ldi	r24, 0x43	; 67
    1bec:	9b e0       	ldi	r25, 0x0B	; 11
    1bee:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <_ZN6StringaSEPKc>
    1bf2:	63 ec       	ldi	r22, 0xC3	; 195
    1bf4:	71 e0       	ldi	r23, 0x01	; 1
    1bf6:	89 e4       	ldi	r24, 0x49	; 73
    1bf8:	9b e0       	ldi	r25, 0x0B	; 11
    1bfa:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <_ZN6StringaSEPKc>
    1bfe:	68 e8       	ldi	r22, 0x88	; 136
    1c00:	74 e0       	ldi	r23, 0x04	; 4
    1c02:	ce 01       	movw	r24, r28
    1c04:	01 96       	adiw	r24, 0x01	; 1
    1c06:	0e 94 01 3e 	call	0x7c02	; 0x7c02 <_ZN6StringC1EPKc>
    1c0a:	66 e6       	ldi	r22, 0x66	; 102
    1c0c:	7a e0       	ldi	r23, 0x0A	; 10
    1c0e:	ce 01       	movw	r24, r28
    1c10:	01 96       	adiw	r24, 0x01	; 1
    1c12:	0e 94 59 3f 	call	0x7eb2	; 0x7eb2 <_ZplRK15StringSumHelperRK6String>
    1c16:	bc 01       	movw	r22, r24
    1c18:	8f e4       	ldi	r24, 0x4F	; 79
    1c1a:	9b e0       	ldi	r25, 0x0B	; 11
    1c1c:	0e 94 58 3e 	call	0x7cb0	; 0x7cb0 <_ZN6StringaSERKS_>
    1c20:	ce 01       	movw	r24, r28
    1c22:	01 96       	adiw	r24, 0x01	; 1
    1c24:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <_ZN6StringD1Ev>
    1c28:	86 ec       	ldi	r24, 0xC6	; 198
    1c2a:	9b e0       	ldi	r25, 0x0B	; 11
    1c2c:	0e 94 ba 2a 	call	0x5574	; 0x5574 <_ZN3LCD5clearEv>
    1c30:	43 e0       	ldi	r20, 0x03	; 3
    1c32:	60 e0       	ldi	r22, 0x00	; 0
    1c34:	86 ec       	ldi	r24, 0xC6	; 198
    1c36:	9b e0       	ldi	r25, 0x0B	; 11
    1c38:	0e 94 c0 2a 	call	0x5580	; 0x5580 <_ZN3LCD9setCursorEhh>
    1c3c:	68 e8       	ldi	r22, 0x88	; 136
    1c3e:	74 e0       	ldi	r23, 0x04	; 4
    1c40:	ce 01       	movw	r24, r28
    1c42:	01 96       	adiw	r24, 0x01	; 1
    1c44:	0e 94 01 3e 	call	0x7c02	; 0x7c02 <_ZN6StringC1EPKc>
    1c48:	66 e6       	ldi	r22, 0x66	; 102
    1c4a:	7a e0       	ldi	r23, 0x0A	; 10
    1c4c:	ce 01       	movw	r24, r28
    1c4e:	01 96       	adiw	r24, 0x01	; 1
    1c50:	0e 94 59 3f 	call	0x7eb2	; 0x7eb2 <_ZplRK15StringSumHelperRK6String>
    1c54:	bc 01       	movw	r22, r24
    1c56:	86 ec       	ldi	r24, 0xC6	; 198
    1c58:	9b e0       	ldi	r25, 0x0B	; 11
    1c5a:	0e 94 22 3b 	call	0x7644	; 0x7644 <_ZN5Print5printERK6String>
    1c5e:	27 c0       	rjmp	.+78     	; 0x1cae <_Z23getTastoPremuto_x_targav+0x25c>
    1c60:	81 30       	cpi	r24, 0x01	; 1
    1c62:	21 f0       	breq	.+8      	; 0x1c6c <_Z23getTastoPremuto_x_targav+0x21a>
    1c64:	82 30       	cpi	r24, 0x02	; 2
    1c66:	11 f0       	breq	.+4      	; 0x1c6c <_Z23getTastoPremuto_x_targav+0x21a>
    1c68:	83 30       	cpi	r24, 0x03	; 3
    1c6a:	31 f5       	brne	.+76     	; 0x1cb8 <_Z23getTastoPremuto_x_targav+0x266>
    1c6c:	80 91 75 0a 	lds	r24, 0x0A75	; 0x800a75 <key_idx+0x1>
    1c70:	84 30       	cpi	r24, 0x04	; 4
    1c72:	11 f5       	brne	.+68     	; 0x1cb8 <_Z23getTastoPremuto_x_targav+0x266>
    1c74:	64 e7       	ldi	r22, 0x74	; 116
    1c76:	74 e0       	ldi	r23, 0x04	; 4
    1c78:	83 e4       	ldi	r24, 0x43	; 67
    1c7a:	9b e0       	ldi	r25, 0x0B	; 11
    1c7c:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <_ZN6StringaSEPKc>
    1c80:	63 ec       	ldi	r22, 0xC3	; 195
    1c82:	71 e0       	ldi	r23, 0x01	; 1
    1c84:	89 e4       	ldi	r24, 0x49	; 73
    1c86:	9b e0       	ldi	r25, 0x0B	; 11
    1c88:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <_ZN6StringaSEPKc>
    1c8c:	68 e8       	ldi	r22, 0x88	; 136
    1c8e:	74 e0       	ldi	r23, 0x04	; 4
    1c90:	ce 01       	movw	r24, r28
    1c92:	01 96       	adiw	r24, 0x01	; 1
    1c94:	0e 94 01 3e 	call	0x7c02	; 0x7c02 <_ZN6StringC1EPKc>
    1c98:	66 e6       	ldi	r22, 0x66	; 102
    1c9a:	7a e0       	ldi	r23, 0x0A	; 10
    1c9c:	ce 01       	movw	r24, r28
    1c9e:	01 96       	adiw	r24, 0x01	; 1
    1ca0:	0e 94 59 3f 	call	0x7eb2	; 0x7eb2 <_ZplRK15StringSumHelperRK6String>
    1ca4:	bc 01       	movw	r22, r24
    1ca6:	8f e4       	ldi	r24, 0x4F	; 79
    1ca8:	9b e0       	ldi	r25, 0x0B	; 11
    1caa:	0e 94 58 3e 	call	0x7cb0	; 0x7cb0 <_ZN6StringaSERKS_>
    1cae:	ce 01       	movw	r24, r28
    1cb0:	01 96       	adiw	r24, 0x01	; 1
    1cb2:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <_ZN6StringD1Ev>
    1cb6:	46 c0       	rjmp	.+140    	; 0x1d44 <_Z23getTastoPremuto_x_targav+0x2f2>
    1cb8:	80 91 73 0a 	lds	r24, 0x0A73	; 0x800a73 <premuto>
    1cbc:	82 30       	cpi	r24, 0x02	; 2
    1cbe:	08 f0       	brcs	.+2      	; 0x1cc2 <_Z23getTastoPremuto_x_targav+0x270>
    1cc0:	41 c0       	rjmp	.+130    	; 0x1d44 <_Z23getTastoPremuto_x_targav+0x2f2>
    1cc2:	20 91 75 0a 	lds	r18, 0x0A75	; 0x800a75 <key_idx+0x1>
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	a9 01       	movw	r20, r18
    1cca:	41 50       	subi	r20, 0x01	; 1
    1ccc:	51 09       	sbc	r21, r1
    1cce:	6c e6       	ldi	r22, 0x6C	; 108
    1cd0:	7a e0       	ldi	r23, 0x0A	; 10
    1cd2:	ce 01       	movw	r24, r28
    1cd4:	01 96       	adiw	r24, 0x01	; 1
    1cd6:	0e 94 cd 3f 	call	0x7f9a	; 0x7f9a <_ZNK6String9substringEjj>
    1cda:	be 01       	movw	r22, r28
    1cdc:	6f 5f       	subi	r22, 0xFF	; 255
    1cde:	7f 4f       	sbci	r23, 0xFF	; 255
    1ce0:	86 e6       	ldi	r24, 0x66	; 102
    1ce2:	9a e0       	ldi	r25, 0x0A	; 10
    1ce4:	0e 94 45 3f 	call	0x7e8a	; 0x7e8a <_ZN6String6concatERKS_>
    1ce8:	ce 01       	movw	r24, r28
    1cea:	01 96       	adiw	r24, 0x01	; 1
    1cec:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <_ZN6StringD1Ev>
    1cf0:	64 e7       	ldi	r22, 0x74	; 116
    1cf2:	74 e0       	ldi	r23, 0x04	; 4
    1cf4:	83 e4       	ldi	r24, 0x43	; 67
    1cf6:	9b e0       	ldi	r25, 0x0B	; 11
    1cf8:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <_ZN6StringaSEPKc>
    1cfc:	63 ec       	ldi	r22, 0xC3	; 195
    1cfe:	71 e0       	ldi	r23, 0x01	; 1
    1d00:	89 e4       	ldi	r24, 0x49	; 73
    1d02:	9b e0       	ldi	r25, 0x0B	; 11
    1d04:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <_ZN6StringaSEPKc>
    1d08:	68 e8       	ldi	r22, 0x88	; 136
    1d0a:	74 e0       	ldi	r23, 0x04	; 4
    1d0c:	ce 01       	movw	r24, r28
    1d0e:	01 96       	adiw	r24, 0x01	; 1
    1d10:	0e 94 01 3e 	call	0x7c02	; 0x7c02 <_ZN6StringC1EPKc>
    1d14:	66 e6       	ldi	r22, 0x66	; 102
    1d16:	7a e0       	ldi	r23, 0x0A	; 10
    1d18:	ce 01       	movw	r24, r28
    1d1a:	01 96       	adiw	r24, 0x01	; 1
    1d1c:	0e 94 59 3f 	call	0x7eb2	; 0x7eb2 <_ZplRK15StringSumHelperRK6String>
    1d20:	bc 01       	movw	r22, r24
    1d22:	8f e4       	ldi	r24, 0x4F	; 79
    1d24:	9b e0       	ldi	r25, 0x0B	; 11
    1d26:	0e 94 58 3e 	call	0x7cb0	; 0x7cb0 <_ZN6StringaSERKS_>
    1d2a:	ce 01       	movw	r24, r28
    1d2c:	01 96       	adiw	r24, 0x01	; 1
    1d2e:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <_ZN6StringD1Ev>
    1d32:	10 92 72 0a 	sts	0x0A72, r1	; 0x800a72 <prolungato>
    1d36:	4a e0       	ldi	r20, 0x0A	; 10
    1d38:	50 e0       	ldi	r21, 0x00	; 0
    1d3a:	60 e0       	ldi	r22, 0x00	; 0
    1d3c:	70 e0       	ldi	r23, 0x00	; 0
    1d3e:	81 e0       	ldi	r24, 0x01	; 1
    1d40:	0e 94 cc 04 	call	0x998	; 0x998 <_Z6Buzzerhm>
    1d44:	10 92 73 0a 	sts	0x0A73, r1	; 0x800a73 <premuto>
    1d48:	8f e3       	ldi	r24, 0x3F	; 63
    1d4a:	9f e1       	ldi	r25, 0x1F	; 31
    1d4c:	01 97       	sbiw	r24, 0x01	; 1
    1d4e:	f1 f7       	brne	.-4      	; 0x1d4c <_Z23getTastoPremuto_x_targav+0x2fa>
    1d50:	00 c0       	rjmp	.+0      	; 0x1d52 <_Z23getTastoPremuto_x_targav+0x300>
    1d52:	00 00       	nop
    1d54:	a4 ce       	rjmp	.-696    	; 0x1a9e <_Z23getTastoPremuto_x_targav+0x4c>
    1d56:	40 e0       	ldi	r20, 0x00	; 0
    1d58:	60 e0       	ldi	r22, 0x00	; 0
    1d5a:	86 ec       	ldi	r24, 0xC6	; 198
    1d5c:	9b e0       	ldi	r25, 0x0B	; 11
    1d5e:	0e 94 c0 2a 	call	0x5580	; 0x5580 <_ZN3LCD9setCursorEhh>
    1d62:	40 91 80 0a 	lds	r20, 0x0A80	; 0x800a80 <UltimoPassaggioStato>
    1d66:	50 91 81 0a 	lds	r21, 0x0A81	; 0x800a81 <UltimoPassaggioStato+0x1>
    1d6a:	60 91 82 0a 	lds	r22, 0x0A82	; 0x800a82 <UltimoPassaggioStato+0x2>
    1d6e:	70 91 83 0a 	lds	r23, 0x0A83	; 0x800a83 <UltimoPassaggioStato+0x3>
    1d72:	80 91 7c 0a 	lds	r24, 0x0A7C	; 0x800a7c <Timer>
    1d76:	90 91 7d 0a 	lds	r25, 0x0A7D	; 0x800a7d <Timer+0x1>
    1d7a:	a0 91 7e 0a 	lds	r26, 0x0A7E	; 0x800a7e <Timer+0x2>
    1d7e:	b0 91 7f 0a 	lds	r27, 0x0A7F	; 0x800a7f <Timer+0x3>
    1d82:	48 0f       	add	r20, r24
    1d84:	59 1f       	adc	r21, r25
    1d86:	6a 1f       	adc	r22, r26
    1d88:	7b 1f       	adc	r23, r27
    1d8a:	41 50       	subi	r20, 0x01	; 1
    1d8c:	51 09       	sbc	r21, r1
    1d8e:	61 09       	sbc	r22, r1
    1d90:	71 09       	sbc	r23, r1
    1d92:	80 91 84 0a 	lds	r24, 0x0A84	; 0x800a84 <secs>
    1d96:	90 91 85 0a 	lds	r25, 0x0A85	; 0x800a85 <secs+0x1>
    1d9a:	a0 91 86 0a 	lds	r26, 0x0A86	; 0x800a86 <secs+0x2>
    1d9e:	b0 91 87 0a 	lds	r27, 0x0A87	; 0x800a87 <secs+0x3>
    1da2:	48 1b       	sub	r20, r24
    1da4:	59 0b       	sbc	r21, r25
    1da6:	6a 0b       	sbc	r22, r26
    1da8:	7b 0b       	sbc	r23, r27
    1daa:	2a e0       	ldi	r18, 0x0A	; 10
    1dac:	ce 01       	movw	r24, r28
    1dae:	07 96       	adiw	r24, 0x07	; 7
    1db0:	0e 94 c0 3e 	call	0x7d80	; 0x7d80 <_ZN6StringC1Emh>
    1db4:	62 ea       	ldi	r22, 0xA2	; 162
    1db6:	72 e0       	ldi	r23, 0x02	; 2
    1db8:	ce 01       	movw	r24, r28
    1dba:	01 96       	adiw	r24, 0x01	; 1
    1dbc:	0e 94 01 3e 	call	0x7c02	; 0x7c02 <_ZN6StringC1EPKc>
    1dc0:	be 01       	movw	r22, r28
    1dc2:	69 5f       	subi	r22, 0xF9	; 249
    1dc4:	7f 4f       	sbci	r23, 0xFF	; 255
    1dc6:	ce 01       	movw	r24, r28
    1dc8:	01 96       	adiw	r24, 0x01	; 1
    1dca:	0e 94 59 3f 	call	0x7eb2	; 0x7eb2 <_ZplRK15StringSumHelperRK6String>
    1dce:	6a ea       	ldi	r22, 0xAA	; 170
    1dd0:	72 e0       	ldi	r23, 0x02	; 2
    1dd2:	0e 94 6a 3f 	call	0x7ed4	; 0x7ed4 <_ZplRK15StringSumHelperPKc>
    1dd6:	bc 01       	movw	r22, r24
    1dd8:	86 ec       	ldi	r24, 0xC6	; 198
    1dda:	9b e0       	ldi	r25, 0x0B	; 11
    1ddc:	0e 94 22 3b 	call	0x7644	; 0x7644 <_ZN5Print5printERK6String>
    1de0:	ce 01       	movw	r24, r28
    1de2:	01 96       	adiw	r24, 0x01	; 1
    1de4:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <_ZN6StringD1Ev>
    1de8:	ce 01       	movw	r24, r28
    1dea:	07 96       	adiw	r24, 0x07	; 7
    1dec:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <_ZN6StringD1Ev>
    1df0:	61 e0       	ldi	r22, 0x01	; 1
    1df2:	86 ec       	ldi	r24, 0xC6	; 198
    1df4:	9b e0       	ldi	r25, 0x0B	; 11
    1df6:	0e 94 31 3b 	call	0x7662	; 0x7662 <_ZN5Print5printEc>
    1dfa:	43 e0       	ldi	r20, 0x03	; 3
    1dfc:	60 e0       	ldi	r22, 0x00	; 0
    1dfe:	86 ec       	ldi	r24, 0xC6	; 198
    1e00:	9b e0       	ldi	r25, 0x0B	; 11
    1e02:	0e 94 c0 2a 	call	0x5580	; 0x5580 <_ZN3LCD9setCursorEhh>
    1e06:	68 e8       	ldi	r22, 0x88	; 136
    1e08:	74 e0       	ldi	r23, 0x04	; 4
    1e0a:	ce 01       	movw	r24, r28
    1e0c:	01 96       	adiw	r24, 0x01	; 1
    1e0e:	0e 94 01 3e 	call	0x7c02	; 0x7c02 <_ZN6StringC1EPKc>
    1e12:	66 e6       	ldi	r22, 0x66	; 102
    1e14:	7a e0       	ldi	r23, 0x0A	; 10
    1e16:	ce 01       	movw	r24, r28
    1e18:	01 96       	adiw	r24, 0x01	; 1
    1e1a:	0e 94 59 3f 	call	0x7eb2	; 0x7eb2 <_ZplRK15StringSumHelperRK6String>
    1e1e:	bc 01       	movw	r22, r24
    1e20:	86 ec       	ldi	r24, 0xC6	; 198
    1e22:	9b e0       	ldi	r25, 0x0B	; 11
    1e24:	0e 94 22 3b 	call	0x7644	; 0x7644 <_ZN5Print5printERK6String>
    1e28:	ce 01       	movw	r24, r28
    1e2a:	01 96       	adiw	r24, 0x01	; 1
    1e2c:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <_ZN6StringD1Ev>
    1e30:	ce 01       	movw	r24, r28
    1e32:	0d 96       	adiw	r24, 0x0d	; 13
    1e34:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <_ZN6StringD1Ev>
    1e38:	62 96       	adiw	r28, 0x12	; 18
    1e3a:	0f b6       	in	r0, 0x3f	; 63
    1e3c:	f8 94       	cli
    1e3e:	de bf       	out	0x3e, r29	; 62
    1e40:	0f be       	out	0x3f, r0	; 63
    1e42:	cd bf       	out	0x3d, r28	; 61
    1e44:	df 91       	pop	r29
    1e46:	cf 91       	pop	r28
    1e48:	1f 91       	pop	r17
    1e4a:	0f 91       	pop	r16
    1e4c:	ff 90       	pop	r15
    1e4e:	ef 90       	pop	r14
    1e50:	08 95       	ret
    1e52:	44 e6       	ldi	r20, 0x64	; 100
    1e54:	50 e0       	ldi	r21, 0x00	; 0
    1e56:	60 e0       	ldi	r22, 0x00	; 0
    1e58:	70 e0       	ldi	r23, 0x00	; 0
    1e5a:	81 e0       	ldi	r24, 0x01	; 1
    1e5c:	0e 94 cc 04 	call	0x998	; 0x998 <_Z6Buzzerhm>
    1e60:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <TselDistributore>
    1e64:	70 91 23 01 	lds	r23, 0x0123	; 0x800123 <TselDistributore+0x1>
    1e68:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <TselDistributore+0x2>
    1e6c:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <TselDistributore+0x3>
    1e70:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <_Z11avanzaStatom>
    1e74:	67 cf       	rjmp	.-306    	; 0x1d44 <_Z23getTastoPremuto_x_targav+0x2f2>

00001e76 <_Z6Azzerav>:
   if (azione == 1) {SET_BIT(PORTB,3);} else if (azione == 0) { CLEAR_BIT(PORTB,3); }
}

void Azzera()
{
   RispostaHTTP = "";
    1e76:	63 ec       	ldi	r22, 0xC3	; 195
    1e78:	71 e0       	ldi	r23, 0x01	; 1
    1e7a:	87 e9       	ldi	r24, 0x97	; 151
    1e7c:	9b e0       	ldi	r25, 0x0B	; 11
    1e7e:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <_ZN6StringaSEPKc>
   impulsi = 0;
    1e82:	10 92 9e 0b 	sts	0x0B9E, r1	; 0x800b9e <impulsi+0x1>
    1e86:	10 92 9d 0b 	sts	0x0B9D, r1	; 0x800b9d <impulsi>
   alreadyTimbrata = false;
    1e8a:	10 92 de 0b 	sts	0x0BDE, r1	; 0x800bde <alreadyTimbrata>
   
   Carburante = "X";
    1e8e:	6a ef       	ldi	r22, 0xFA	; 250
    1e90:	72 e0       	ldi	r23, 0x02	; 2
    1e92:	8d e6       	ldi	r24, 0x6D	; 109
    1e94:	9b e0       	ldi	r25, 0x0B	; 11
    1e96:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <_ZN6StringaSEPKc>
   SequenzaKeypad[0] = "";
    1e9a:	63 ec       	ldi	r22, 0xC3	; 195
    1e9c:	71 e0       	ldi	r23, 0x01	; 1
    1e9e:	81 e6       	ldi	r24, 0x61	; 97
    1ea0:	9b e0       	ldi	r25, 0x0B	; 11
    1ea2:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <_ZN6StringaSEPKc>
   SequenzaKeypad[1] = "";
    1ea6:	63 ec       	ldi	r22, 0xC3	; 195
    1ea8:	71 e0       	ldi	r23, 0x01	; 1
    1eaa:	87 e6       	ldi	r24, 0x67	; 103
    1eac:	9b e0       	ldi	r25, 0x0B	; 11
    1eae:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <_ZN6StringaSEPKc>
   
   Rele_Abilitazione1(1,7);
    1eb2:	67 e0       	ldi	r22, 0x07	; 7
    1eb4:	70 e0       	ldi	r23, 0x00	; 0
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	42 d8       	rcall	.-3964   	; 0xf40 <_Z18Rele_Abilitazione1ii>
   Rele_Abilitazione2(1,7);
    1ebc:	67 e0       	ldi	r22, 0x07	; 7
    1ebe:	70 e0       	ldi	r23, 0x00	; 0
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	78 d8       	rcall	.-3856   	; 0xfb6 <_Z18Rele_Abilitazione2ii>
   Control_WIFI(0);
    1ec6:	80 e0       	ldi	r24, 0x00	; 0
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	b9 d8       	rcall	.-3726   	; 0x103e <_Z12Control_WIFIi>
   
   clientToServizio.flush();
    1ecc:	87 ea       	ldi	r24, 0xA7	; 167
    1ece:	9a e0       	ldi	r25, 0x0A	; 10
    1ed0:	0e 94 80 22 	call	0x4500	; 0x4500 <_ZN14EthernetClient5flushEv>
   clientToServizio.stop();
    1ed4:	87 ea       	ldi	r24, 0xA7	; 167
    1ed6:	9a e0       	ldi	r25, 0x0A	; 10
    1ed8:	0e 94 d6 22 	call	0x45ac	; 0x45ac <_ZN14EthernetClient4stopEv>
   clientREST.flush();
    1edc:	84 eb       	ldi	r24, 0xB4	; 180
    1ede:	9a e0       	ldi	r25, 0x0A	; 10
    1ee0:	0e 94 80 22 	call	0x4500	; 0x4500 <_ZN14EthernetClient5flushEv>
   clientREST.stop();
    1ee4:	84 eb       	ldi	r24, 0xB4	; 180
    1ee6:	9a e0       	ldi	r25, 0x0A	; 10
    1ee8:	0e 94 d6 22 	call	0x45ac	; 0x45ac <_ZN14EthernetClient4stopEv>
   Connected = false;
    1eec:	10 92 a2 0b 	sts	0x0BA2, r1	; 0x800ba2 <Connected+0x1>
    1ef0:	10 92 a1 0b 	sts	0x0BA1, r1	; 0x800ba1 <Connected>
static const uint8_t RELE2 = PORTA7;

static inline void initSS_FLASH()  { DDRB |= (1 << PB4); } // set DDRB bit 4, sets PB4 for output
static inline void initSS_ETH()    { DDRC |= (1 << PC4); } // set DDRC bit 4, sets PC4 for output
static inline void enable_ETH()    { PORTC &= ~(1 << PC4); } // Set 0 Bit 4 PORTC Register
static inline void enable_FLASH()  { PORTB &= ~(1 << PB4); } // Set 0 Bit 4 PORTB Register
    1ef4:	2c 98       	cbi	0x05, 4	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1ef6:	8f e1       	ldi	r24, 0x1F	; 31
    1ef8:	9e e4       	ldi	r25, 0x4E	; 78
    1efa:	01 97       	sbiw	r24, 0x01	; 1
    1efc:	f1 f7       	brne	.-4      	; 0x1efa <_Z6Azzerav+0x84>
    1efe:	00 c0       	rjmp	.+0      	; 0x1f00 <_Z6Azzerav+0x8a>
    1f00:	00 00       	nop
   clientREST.stop();
   Connected = false;
   
   enable_FLASH();
   _delay_ms(5);
   disable_FLASH();
    1f02:	0e 94 94 01 	call	0x328	; 0x328 <_ZL13disable_FLASHv>
    1f06:	8f e1       	ldi	r24, 0x1F	; 31
    1f08:	9e e4       	ldi	r25, 0x4E	; 78
    1f0a:	01 97       	sbiw	r24, 0x01	; 1
    1f0c:	f1 f7       	brne	.-4      	; 0x1f0a <_Z6Azzerav+0x94>
    1f0e:	00 c0       	rjmp	.+0      	; 0x1f10 <_Z6Azzerav+0x9a>
    1f10:	00 00       	nop
   _delay_ms(5);
   disable_ETH();
    1f12:	0e 94 92 01 	call	0x324	; 0x324 <_ZL11disable_ETHv>
    1f16:	8f e1       	ldi	r24, 0x1F	; 31
    1f18:	9e e4       	ldi	r25, 0x4E	; 78
    1f1a:	01 97       	sbiw	r24, 0x01	; 1
    1f1c:	f1 f7       	brne	.-4      	; 0x1f1a <_Z6Azzerav+0xa4>
    1f1e:	00 c0       	rjmp	.+0      	; 0x1f20 <_Z6Azzerav+0xaa>
    1f20:	00 00       	nop
static const uint8_t RELE1 = PORTC7;
static const uint8_t RELE2 = PORTA7;

static inline void initSS_FLASH()  { DDRB |= (1 << PB4); } // set DDRB bit 4, sets PB4 for output
static inline void initSS_ETH()    { DDRC |= (1 << PC4); } // set DDRC bit 4, sets PC4 for output
static inline void enable_ETH()    { PORTC &= ~(1 << PC4); } // Set 0 Bit 4 PORTC Register
    1f22:	44 98       	cbi	0x08, 4	; 8
   _delay_ms(5);
   disable_ETH();
   _delay_ms(5); 
   enable_ETH(); 
     
   SET_BIT(PORTA,A1);
    1f24:	82 b1       	in	r24, 0x02	; 2
    1f26:	82 b9       	out	0x02, r24	; 2
   SET_BIT(PORTA,A2);
    1f28:	82 b1       	in	r24, 0x02	; 2
    1f2a:	82 b9       	out	0x02, r24	; 2
   
   righeDisplay[1] =  "";
    1f2c:	63 ec       	ldi	r22, 0xC3	; 195
    1f2e:	71 e0       	ldi	r23, 0x01	; 1
    1f30:	83 e4       	ldi	r24, 0x43	; 67
    1f32:	9b e0       	ldi	r25, 0x0B	; 11
    1f34:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <_ZN6StringaSEPKc>
   righeDisplay[2] =  "";
    1f38:	63 ec       	ldi	r22, 0xC3	; 195
    1f3a:	71 e0       	ldi	r23, 0x01	; 1
    1f3c:	89 e4       	ldi	r24, 0x49	; 73
    1f3e:	9b e0       	ldi	r25, 0x0B	; 11
    1f40:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <_ZN6StringaSEPKc>
   righeDisplay[2] =  "";
    1f44:	63 ec       	ldi	r22, 0xC3	; 195
    1f46:	71 e0       	ldi	r23, 0x01	; 1
    1f48:	89 e4       	ldi	r24, 0x49	; 73
    1f4a:	9b e0       	ldi	r25, 0x0B	; 11
    1f4c:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <_ZN6StringaSEPKc>
   
   lcd.noBacklight();
    1f50:	86 ec       	ldi	r24, 0xC6	; 198
    1f52:	9b e0       	ldi	r25, 0x0B	; 11
    1f54:	0e 94 aa 2a 	call	0x5554	; 0x5554 <_ZN3LCD11noBacklightEv>
   lcd.noDisplay();
    1f58:	86 ec       	ldi	r24, 0xC6	; 198
    1f5a:	9b e0       	ldi	r25, 0x0B	; 11
    1f5c:	0e 94 02 2b 	call	0x5604	; 0x5604 <_ZN3LCD9noDisplayEv>
   secs = 0;
    1f60:	10 92 84 0a 	sts	0x0A84, r1	; 0x800a84 <secs>
    1f64:	10 92 85 0a 	sts	0x0A85, r1	; 0x800a85 <secs+0x1>
    1f68:	10 92 86 0a 	sts	0x0A86, r1	; 0x800a86 <secs+0x2>
    1f6c:	10 92 87 0a 	sts	0x0A87, r1	; 0x800a87 <secs+0x3>
   UltimoPassaggioStato = 0;
    1f70:	10 92 80 0a 	sts	0x0A80, r1	; 0x800a80 <UltimoPassaggioStato>
    1f74:	10 92 81 0a 	sts	0x0A81, r1	; 0x800a81 <UltimoPassaggioStato+0x1>
    1f78:	10 92 82 0a 	sts	0x0A82, r1	; 0x800a82 <UltimoPassaggioStato+0x2>
    1f7c:	10 92 83 0a 	sts	0x0A83, r1	; 0x800a83 <UltimoPassaggioStato+0x3>
   
   printLine();
    1f80:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <_Z9printLinev>
   Serial.println("Azzera....... OK");
    1f84:	6b eb       	ldi	r22, 0xBB	; 187
    1f86:	76 e0       	ldi	r23, 0x06	; 6
    1f88:	85 e5       	ldi	r24, 0x55	; 85
    1f8a:	9d e0       	ldi	r25, 0x0D	; 13
    1f8c:	0e 94 5b 3b 	call	0x76b6	; 0x76b6 <_ZN5Print7printlnEPKc>
   printLine();
    1f90:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <_Z9printLinev>
   
   stato_procedura = -2;
    1f94:	8e ef       	ldi	r24, 0xFE	; 254
    1f96:	9f ef       	ldi	r25, 0xFF	; 255
    1f98:	90 93 a0 0b 	sts	0x0BA0, r25	; 0x800ba0 <stato_procedura+0x1>
    1f9c:	80 93 9f 0b 	sts	0x0B9F, r24	; 0x800b9f <stato_procedura>
    1fa0:	08 95       	ret

00001fa2 <_Z17InviaRifornimentoiiPci6String>:

/********************************************************************/


bool InviaRifornimento(int P_stato,int p_connesso, char P_datiVerifica[],int P_l_buffer,String P_prefisso)
{ 
    1fa2:	af 92       	push	r10
    1fa4:	bf 92       	push	r11
    1fa6:	cf 92       	push	r12
    1fa8:	df 92       	push	r13
    1faa:	ef 92       	push	r14
    1fac:	ff 92       	push	r15
    1fae:	0f 93       	push	r16
    1fb0:	1f 93       	push	r17
    1fb2:	cf 93       	push	r28
    1fb4:	df 93       	push	r29
    1fb6:	00 d0       	rcall	.+0      	; 0x1fb8 <_Z17InviaRifornimentoiiPci6String+0x16>
    1fb8:	00 d0       	rcall	.+0      	; 0x1fba <_Z17InviaRifornimentoiiPci6String+0x18>
    1fba:	00 d0       	rcall	.+0      	; 0x1fbc <_Z17InviaRifornimentoiiPci6String+0x1a>
    1fbc:	cd b7       	in	r28, 0x3d	; 61
    1fbe:	de b7       	in	r29, 0x3e	; 62
    1fc0:	5b 01       	movw	r10, r22
    1fc2:	8a 01       	movw	r16, r20
    1fc4:	69 01       	movw	r12, r18
    clientToServizio.flush();
    //clientToServizio.stop();
    return true;
  }
  else {return false;};
}
    1fc6:	ed b6       	in	r14, 0x3d	; 61
    1fc8:	fe b6       	in	r15, 0x3e	; 62


bool InviaRifornimento(int P_stato,int p_connesso, char P_datiVerifica[],int P_l_buffer,String P_prefisso)
{ 
  //Risposta = "999";
  Serial.println("START InviaRifornimento !!");
    1fca:	6c ec       	ldi	r22, 0xCC	; 204
    1fcc:	76 e0       	ldi	r23, 0x06	; 6
    1fce:	85 e5       	ldi	r24, 0x55	; 85
    1fd0:	9d e0       	ldi	r25, 0x0D	; 13
    1fd2:	0e 94 5b 3b 	call	0x76b6	; 0x76b6 <_ZN5Print7printlnEPKc>
  
  if ((p_connesso))// && (P_stato == 7 ))
    1fd6:	ab 28       	or	r10, r11
    1fd8:	09 f4       	brne	.+2      	; 0x1fdc <_Z17InviaRifornimentoiiPci6String+0x3a>
    1fda:	4e c0       	rjmp	.+156    	; 0x2078 <_Z17InviaRifornimentoiiPci6String+0xd6>
  {
    Serial.println("Connected to Server -- Invio Erogazione !!");
    1fdc:	67 ee       	ldi	r22, 0xE7	; 231
    1fde:	76 e0       	ldi	r23, 0x06	; 6
    1fe0:	85 e5       	ldi	r24, 0x55	; 85
    1fe2:	9d e0       	ldi	r25, 0x0D	; 13
    1fe4:	0e 94 5b 3b 	call	0x76b6	; 0x76b6 <_ZN5Print7printlnEPKc>
    stato_procedura++;
    1fe8:	80 91 9f 0b 	lds	r24, 0x0B9F	; 0x800b9f <stato_procedura>
    1fec:	90 91 a0 0b 	lds	r25, 0x0BA0	; 0x800ba0 <stato_procedura+0x1>
    1ff0:	01 96       	adiw	r24, 0x01	; 1
    1ff2:	90 93 a0 0b 	sts	0x0BA0, r25	; 0x800ba0 <stato_procedura+0x1>
    1ff6:	80 93 9f 0b 	sts	0x0B9F, r24	; 0x800b9f <stato_procedura>
    String TX =  String(P_datiVerifica);
    1ffa:	b8 01       	movw	r22, r16
    1ffc:	ce 01       	movw	r24, r28
    1ffe:	01 96       	adiw	r24, 0x01	; 1
    2000:	0e 94 01 3e 	call	0x7c02	; 0x7c02 <_ZN6StringC1EPKc>
    char Invio[P_l_buffer];
    2004:	8d b7       	in	r24, 0x3d	; 61
    2006:	9e b7       	in	r25, 0x3e	; 62
    2008:	8c 19       	sub	r24, r12
    200a:	9d 09       	sbc	r25, r13
    200c:	0f b6       	in	r0, 0x3f	; 63
    200e:	f8 94       	cli
    2010:	9e bf       	out	0x3e, r25	; 62
    2012:	0f be       	out	0x3f, r0	; 63
    2014:	8d bf       	out	0x3d, r24	; 61
    2016:	0d b7       	in	r16, 0x3d	; 61
    2018:	1e b7       	in	r17, 0x3e	; 62
    201a:	0f 5f       	subi	r16, 0xFF	; 255
    201c:	1f 4f       	sbci	r17, 0xFF	; 255
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{ getBytes((unsigned char *)buf, bufsize, index); }
    201e:	20 e0       	ldi	r18, 0x00	; 0
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	a6 01       	movw	r20, r12
    2024:	b8 01       	movw	r22, r16
    2026:	ce 01       	movw	r24, r28
    2028:	01 96       	adiw	r24, 0x01	; 1
    202a:	0e 94 9f 3f 	call	0x7f3e	; 0x7f3e <_ZNK6String8getBytesEPhjj>
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    202e:	f8 01       	movw	r30, r16
    2030:	01 90       	ld	r0, Z+
    2032:	00 20       	and	r0, r0
    2034:	e9 f7       	brne	.-6      	; 0x2030 <_Z17InviaRifornimentoiiPci6String+0x8e>
    2036:	31 97       	sbiw	r30, 0x01	; 1
    2038:	af 01       	movw	r20, r30
    203a:	40 1b       	sub	r20, r16
    203c:	51 0b       	sbc	r21, r17
    203e:	b8 01       	movw	r22, r16
    2040:	87 ea       	ldi	r24, 0xA7	; 167
    2042:	9a e0       	ldi	r25, 0x0A	; 10
    2044:	0e 94 1b 22 	call	0x4436	; 0x4436 <_ZN14EthernetClient5writeEPKhj>
    2048:	9f ef       	ldi	r25, 0xFF	; 255
    204a:	29 ef       	ldi	r18, 0xF9	; 249
    204c:	80 e0       	ldi	r24, 0x00	; 0
    204e:	91 50       	subi	r25, 0x01	; 1
    2050:	20 40       	sbci	r18, 0x00	; 0
    2052:	80 40       	sbci	r24, 0x00	; 0
    2054:	e1 f7       	brne	.-8      	; 0x204e <_Z17InviaRifornimentoiiPci6String+0xac>
    2056:	00 c0       	rjmp	.+0      	; 0x2058 <_Z17InviaRifornimentoiiPci6String+0xb6>
    2058:	00 00       	nop
    TX.toCharArray(Invio,P_l_buffer);
    clientToServizio.write(Invio);
    _delay_ms(20);
    clientToServizio.flush();
    205a:	87 ea       	ldi	r24, 0xA7	; 167
    205c:	9a e0       	ldi	r25, 0x0A	; 10
    205e:	0e 94 80 22 	call	0x4500	; 0x4500 <_ZN14EthernetClient5flushEv>
  
  if ((p_connesso))// && (P_stato == 7 ))
  {
    Serial.println("Connected to Server -- Invio Erogazione !!");
    stato_procedura++;
    String TX =  String(P_datiVerifica);
    2062:	ce 01       	movw	r24, r28
    2064:	01 96       	adiw	r24, 0x01	; 1
    2066:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <_ZN6StringD1Ev>
    206a:	0f b6       	in	r0, 0x3f	; 63
    206c:	f8 94       	cli
    206e:	fe be       	out	0x3e, r15	; 62
    2070:	0f be       	out	0x3f, r0	; 63
    2072:	ed be       	out	0x3d, r14	; 61
    2074:	81 e0       	ldi	r24, 0x01	; 1
    2076:	01 c0       	rjmp	.+2      	; 0x207a <_Z17InviaRifornimentoiiPci6String+0xd8>
    _delay_ms(20);
    clientToServizio.flush();
    //clientToServizio.stop();
    return true;
  }
  else {return false;};
    2078:	80 e0       	ldi	r24, 0x00	; 0
}
    207a:	0f b6       	in	r0, 0x3f	; 63
    207c:	f8 94       	cli
    207e:	fe be       	out	0x3e, r15	; 62
    2080:	0f be       	out	0x3f, r0	; 63
    2082:	ed be       	out	0x3d, r14	; 61
    2084:	26 96       	adiw	r28, 0x06	; 6
    2086:	0f b6       	in	r0, 0x3f	; 63
    2088:	f8 94       	cli
    208a:	de bf       	out	0x3e, r29	; 62
    208c:	0f be       	out	0x3f, r0	; 63
    208e:	cd bf       	out	0x3d, r28	; 61
    2090:	df 91       	pop	r29
    2092:	cf 91       	pop	r28
    2094:	1f 91       	pop	r17
    2096:	0f 91       	pop	r16
    2098:	ff 90       	pop	r15
    209a:	ef 90       	pop	r14
    209c:	df 90       	pop	r13
    209e:	cf 90       	pop	r12
    20a0:	bf 90       	pop	r11
    20a2:	af 90       	pop	r10
    20a4:	08 95       	ret

000020a6 <loop>:
    _delay_ms(100);
    Messaggio.toCharArray(MessaggioToServer, 100);  
}

/**************************LOOP PROCEDURA************************************/
void loop() {
    20a6:	cf 92       	push	r12
    20a8:	df 92       	push	r13
    20aa:	ef 92       	push	r14
    20ac:	ff 92       	push	r15
    20ae:	0f 93       	push	r16
    20b0:	1f 93       	push	r17
    20b2:	cf 93       	push	r28
    20b4:	df 93       	push	r29
    20b6:	cd b7       	in	r28, 0x3d	; 61
    20b8:	de b7       	in	r29, 0x3e	; 62
    20ba:	6e 97       	sbiw	r28, 0x1e	; 30
    20bc:	0f b6       	in	r0, 0x3f	; 63
    20be:	f8 94       	cli
    20c0:	de bf       	out	0x3e, r29	; 62
    20c2:	0f be       	out	0x3f, r0	; 63
    20c4:	cd bf       	out	0x3d, r28	; 61
      
  switch (stato_procedura) {
    20c6:	e0 91 9f 0b 	lds	r30, 0x0B9F	; 0x800b9f <stato_procedura>
    20ca:	f0 91 a0 0b 	lds	r31, 0x0BA0	; 0x800ba0 <stato_procedura+0x1>
    20ce:	32 96       	adiw	r30, 0x02	; 2
    20d0:	eb 30       	cpi	r30, 0x0B	; 11
    20d2:	f1 05       	cpc	r31, r1
    20d4:	08 f0       	brcs	.+2      	; 0x20d8 <loop+0x32>
    20d6:	c7 c3       	rjmp	.+1934   	; 0x2866 <loop+0x7c0>
    20d8:	ea 5b       	subi	r30, 0xBA	; 186
    20da:	ff 4f       	sbci	r31, 0xFF	; 255
    20dc:	0c 94 85 41 	jmp	0x830a	; 0x830a <__tablejump2__>
    case -2:
    { //cli(); // disable interrupt      
            
      righeDisplay[1] =  "";
    20e0:	63 ec       	ldi	r22, 0xC3	; 195
    20e2:	71 e0       	ldi	r23, 0x01	; 1
    20e4:	83 e4       	ldi	r24, 0x43	; 67
    20e6:	9b e0       	ldi	r25, 0x0B	; 11
    20e8:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <_ZN6StringaSEPKc>
      righeDisplay[2] = "Setting....";
    20ec:	62 e1       	ldi	r22, 0x12	; 18
    20ee:	77 e0       	ldi	r23, 0x07	; 7
    20f0:	89 e4       	ldi	r24, 0x49	; 73
    20f2:	9b e0       	ldi	r25, 0x0B	; 11
    20f4:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <_ZN6StringaSEPKc>
      righeDisplay[3] =  "";
    20f8:	63 ec       	ldi	r22, 0xC3	; 195
    20fa:	71 e0       	ldi	r23, 0x01	; 1
    20fc:	8f e4       	ldi	r24, 0x4F	; 79
    20fe:	9b e0       	ldi	r25, 0x0B	; 11
    2100:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <_ZN6StringaSEPKc>
      
      displayLCD(righeDisplay,stato_procedura,100);
    2104:	60 91 9f 0b 	lds	r22, 0x0B9F	; 0x800b9f <stato_procedura>
    2108:	70 91 a0 0b 	lds	r23, 0x0BA0	; 0x800ba0 <stato_procedura+0x1>
    210c:	44 e6       	ldi	r20, 0x64	; 100
    210e:	50 e0       	ldi	r21, 0x00	; 0
    2110:	8d e3       	ldi	r24, 0x3D	; 61
    2112:	9b e0       	ldi	r25, 0x0B	; 11
    2114:	0e 94 53 05 	call	0xaa6	; 0xaa6 <_Z10displayLCDP6Stringii>
    2118:	2f ef       	ldi	r18, 0xFF	; 255
    211a:	83 ec       	ldi	r24, 0xC3	; 195
    211c:	99 e0       	ldi	r25, 0x09	; 9
    211e:	21 50       	subi	r18, 0x01	; 1
    2120:	80 40       	sbci	r24, 0x00	; 0
    2122:	90 40       	sbci	r25, 0x00	; 0
    2124:	e1 f7       	brne	.-8      	; 0x211e <loop+0x78>
    2126:	00 c0       	rjmp	.+0      	; 0x2128 <loop+0x82>
    2128:	00 00       	nop
    212a:	9e c0       	rjmp	.+316    	; 0x2268 <loop+0x1c2>
    }
    break;
    case -1:
    { 
    /***************************************************/
    disable_ETH();
    212c:	0e 94 92 01 	call	0x324	; 0x324 <_ZL11disable_ETHv>
    2130:	8f e3       	ldi	r24, 0x3F	; 63
    2132:	9f e1       	ldi	r25, 0x1F	; 31
    2134:	01 97       	sbiw	r24, 0x01	; 1
    2136:	f1 f7       	brne	.-4      	; 0x2134 <loop+0x8e>
    2138:	00 c0       	rjmp	.+0      	; 0x213a <loop+0x94>
    213a:	00 00       	nop
    _delay_ms(2);
    FlashpowerUp();
    213c:	0e 94 9e 03 	call	0x73c	; 0x73c <_Z12FlashpowerUpv>
    2140:	8f e1       	ldi	r24, 0x1F	; 31
    2142:	9e e4       	ldi	r25, 0x4E	; 78
    2144:	01 97       	sbiw	r24, 0x01	; 1
    2146:	f1 f7       	brne	.-4      	; 0x2144 <loop+0x9e>
    2148:	00 c0       	rjmp	.+0      	; 0x214a <loop+0xa4>
    214a:	00 00       	nop
    _delay_ms(5);
    String a;
    214c:	63 ec       	ldi	r22, 0xC3	; 195
    214e:	71 e0       	ldi	r23, 0x01	; 1
    2150:	ce 01       	movw	r24, r28
    2152:	01 96       	adiw	r24, 0x01	; 1
    2154:	0e 94 01 3e 	call	0x7c02	; 0x7c02 <_ZN6StringC1EPKc>
    flash.readStr(addr_erog,a);
    2158:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <addr_erog>
    215c:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <addr_erog+0x1>
    2160:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <addr_erog+0x2>
    2164:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <addr_erog+0x3>
    2168:	00 e0       	ldi	r16, 0x00	; 0
    216a:	9e 01       	movw	r18, r28
    216c:	2f 5f       	subi	r18, 0xFF	; 255
    216e:	3f 4f       	sbci	r19, 0xFF	; 255
    2170:	82 e8       	ldi	r24, 0x82	; 130
    2172:	99 e0       	ldi	r25, 0x09	; 9
    2174:	0e 94 26 2e 	call	0x5c4c	; 0x5c4c <_ZN8SPIFlash7readStrEmR6Stringb>
    2178:	8f e1       	ldi	r24, 0x1F	; 31
    217a:	9e e4       	ldi	r25, 0x4E	; 78
    217c:	01 97       	sbiw	r24, 0x01	; 1
    217e:	f1 f7       	brne	.-4      	; 0x217c <loop+0xd6>
    2180:	00 c0       	rjmp	.+0      	; 0x2182 <loop+0xdc>
    2182:	00 00       	nop
    _delay_ms(5);
    Serial.print("NON INVIATE : ");
    2184:	6e e1       	ldi	r22, 0x1E	; 30
    2186:	77 e0       	ldi	r23, 0x07	; 7
    2188:	85 e5       	ldi	r24, 0x55	; 85
    218a:	9d e0       	ldi	r25, 0x0D	; 13
    218c:	0e 94 30 3b 	call	0x7660	; 0x7660 <_ZN5Print5printEPKc>
    Serial.println(a);
    2190:	be 01       	movw	r22, r28
    2192:	6f 5f       	subi	r22, 0xFF	; 255
    2194:	7f 4f       	sbci	r23, 0xFF	; 255
    2196:	85 e5       	ldi	r24, 0x55	; 85
    2198:	9d e0       	ldi	r25, 0x0D	; 13
    219a:	0e 94 4b 3b 	call	0x7696	; 0x7696 <_ZN5Print7printlnERK6String>
    219e:	8f e1       	ldi	r24, 0x1F	; 31
    21a0:	9e e4       	ldi	r25, 0x4E	; 78
    21a2:	01 97       	sbiw	r24, 0x01	; 1
    21a4:	f1 f7       	brne	.-4      	; 0x21a2 <loop+0xfc>
    21a6:	00 c0       	rjmp	.+0      	; 0x21a8 <loop+0x102>
    21a8:	00 00       	nop
    _delay_ms(5);
    FlashpowerDown();
    21aa:	0e 94 76 03 	call	0x6ec	; 0x6ec <_Z14FlashpowerDownv>
    21ae:	8f e1       	ldi	r24, 0x1F	; 31
    21b0:	9e e4       	ldi	r25, 0x4E	; 78
    21b2:	01 97       	sbiw	r24, 0x01	; 1
    21b4:	f1 f7       	brne	.-4      	; 0x21b2 <loop+0x10c>
    21b6:	00 c0       	rjmp	.+0      	; 0x21b8 <loop+0x112>
    21b8:	00 00       	nop
    _delay_ms(5);
    disable_FLASH();
    21ba:	0e 94 94 01 	call	0x328	; 0x328 <_ZL13disable_FLASHv>
    /***************************************************/  
      righeDisplay[1] =  "";
    21be:	63 ec       	ldi	r22, 0xC3	; 195
    21c0:	71 e0       	ldi	r23, 0x01	; 1
    21c2:	83 e4       	ldi	r24, 0x43	; 67
    21c4:	9b e0       	ldi	r25, 0x0B	; 11
    21c6:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <_ZN6StringaSEPKc>
      righeDisplay[2] =  "";
    21ca:	63 ec       	ldi	r22, 0xC3	; 195
    21cc:	71 e0       	ldi	r23, 0x01	; 1
    21ce:	89 e4       	ldi	r24, 0x49	; 73
    21d0:	9b e0       	ldi	r25, 0x0B	; 11
    21d2:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <_ZN6StringaSEPKc>
      righeDisplay[3] =  "";
    21d6:	63 ec       	ldi	r22, 0xC3	; 195
    21d8:	71 e0       	ldi	r23, 0x01	; 1
    21da:	8f e4       	ldi	r24, 0x4F	; 79
    21dc:	9b e0       	ldi	r25, 0x0B	; 11
    21de:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <_ZN6StringaSEPKc>
      
      abilitaPulsanti();
    21e2:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <_Z15abilitaPulsantiv>
    21e6:	9f ef       	ldi	r25, 0xFF	; 255
    21e8:	29 ef       	ldi	r18, 0xF9	; 249
    21ea:	80 e0       	ldi	r24, 0x00	; 0
    21ec:	91 50       	subi	r25, 0x01	; 1
    21ee:	20 40       	sbci	r18, 0x00	; 0
    21f0:	80 40       	sbci	r24, 0x00	; 0
    21f2:	e1 f7       	brne	.-8      	; 0x21ec <loop+0x146>
    21f4:	00 c0       	rjmp	.+0      	; 0x21f6 <loop+0x150>
    21f6:	00 00       	nop
      _delay_ms(20);
      abilitaContattiPistola();
    21f8:	0e 94 64 07 	call	0xec8	; 0xec8 <_Z22abilitaContattiPistolav>
      stato_procedura++;
    21fc:	80 91 9f 0b 	lds	r24, 0x0B9F	; 0x800b9f <stato_procedura>
    2200:	90 91 a0 0b 	lds	r25, 0x0BA0	; 0x800ba0 <stato_procedura+0x1>
    2204:	01 96       	adiw	r24, 0x01	; 1
    2206:	90 93 a0 0b 	sts	0x0BA0, r25	; 0x800ba0 <stato_procedura+0x1>
    220a:	80 93 9f 0b 	sts	0x0B9F, r24	; 0x800b9f <stato_procedura>
    /***************************************************/
    disable_ETH();
    _delay_ms(2);
    FlashpowerUp();
    _delay_ms(5);
    String a;
    220e:	ce 01       	movw	r24, r28
    2210:	01 96       	adiw	r24, 0x01	; 1
    2212:	85 c0       	rjmp	.+266    	; 0x231e <loop+0x278>
      stato_procedura++;
    }
    break;
    case 0:
    { 
      righeDisplay[1] =  "";
    2214:	63 ec       	ldi	r22, 0xC3	; 195
    2216:	71 e0       	ldi	r23, 0x01	; 1
    2218:	83 e4       	ldi	r24, 0x43	; 67
    221a:	9b e0       	ldi	r25, 0x0B	; 11
    221c:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <_ZN6StringaSEPKc>
      righeDisplay[2] =  "";
    2220:	63 ec       	ldi	r22, 0xC3	; 195
    2222:	71 e0       	ldi	r23, 0x01	; 1
    2224:	89 e4       	ldi	r24, 0x49	; 73
    2226:	9b e0       	ldi	r25, 0x0B	; 11
    2228:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <_ZN6StringaSEPKc>
      righeDisplay[3] =  "";
    222c:	63 ec       	ldi	r22, 0xC3	; 195
    222e:	71 e0       	ldi	r23, 0x01	; 1
    2230:	8f e4       	ldi	r24, 0x4F	; 79
    2232:	9b e0       	ldi	r25, 0x0B	; 11
    2234:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <_ZN6StringaSEPKc>
          
      displayLCD(righeDisplay,stato_procedura,100);
    2238:	60 91 9f 0b 	lds	r22, 0x0B9F	; 0x800b9f <stato_procedura>
    223c:	70 91 a0 0b 	lds	r23, 0x0BA0	; 0x800ba0 <stato_procedura+0x1>
    2240:	44 e6       	ldi	r20, 0x64	; 100
    2242:	50 e0       	ldi	r21, 0x00	; 0
    2244:	8d e3       	ldi	r24, 0x3D	; 61
    2246:	9b e0       	ldi	r25, 0x0B	; 11
    2248:	0e 94 53 05 	call	0xaa6	; 0xaa6 <_Z10displayLCDP6Stringii>
    224c:	9f ef       	ldi	r25, 0xFF	; 255
    224e:	27 ea       	ldi	r18, 0xA7	; 167
    2250:	81 e6       	ldi	r24, 0x61	; 97
    2252:	91 50       	subi	r25, 0x01	; 1
    2254:	20 40       	sbci	r18, 0x00	; 0
    2256:	80 40       	sbci	r24, 0x00	; 0
    2258:	e1 f7       	brne	.-8      	; 0x2252 <loop+0x1ac>
    225a:	00 c0       	rjmp	.+0      	; 0x225c <loop+0x1b6>
    225c:	00 00       	nop
      _delay_ms(2000);
      alreadyTimbrata = false;  
    225e:	10 92 de 0b 	sts	0x0BDE, r1	; 0x800bde <alreadyTimbrata>
static const uint8_t RELE1 = PORTC7;
static const uint8_t RELE2 = PORTA7;

static inline void initSS_FLASH()  { DDRB |= (1 << PB4); } // set DDRB bit 4, sets PB4 for output
static inline void initSS_ETH()    { DDRC |= (1 << PC4); } // set DDRC bit 4, sets PC4 for output
static inline void enable_ETH()    { PORTC &= ~(1 << PC4); } // Set 0 Bit 4 PORTC Register
    2262:	44 98       	cbi	0x08, 4	; 8
          
      displayLCD(righeDisplay,stato_procedura,100);
      _delay_ms(2000);
      alreadyTimbrata = false;  
      enable_ETH();
	  disable_FLASH();
    2264:	0e 94 94 01 	call	0x328	; 0x328 <_ZL13disable_FLASHv>
	  stato_procedura++;
    2268:	80 91 9f 0b 	lds	r24, 0x0B9F	; 0x800b9f <stato_procedura>
    226c:	90 91 a0 0b 	lds	r25, 0x0BA0	; 0x800ba0 <stato_procedura+0x1>
    2270:	01 96       	adiw	r24, 0x01	; 1
    2272:	90 93 a0 0b 	sts	0x0BA0, r25	; 0x800ba0 <stato_procedura+0x1>
    2276:	80 93 9f 0b 	sts	0x0B9F, r24	; 0x800b9f <stato_procedura>
    }
    break;
    227a:	f5 c2       	rjmp	.+1514   	; 0x2866 <loop+0x7c0>
    case 1:
    { 
      righeDisplay[1] = " * AUTENTICAZIONE *";
    227c:	6d e2       	ldi	r22, 0x2D	; 45
    227e:	77 e0       	ldi	r23, 0x07	; 7
    2280:	83 e4       	ldi	r24, 0x43	; 67
    2282:	9b e0       	ldi	r25, 0x0B	; 11
    2284:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <_ZN6StringaSEPKc>
      righeDisplay[2] = "";
    2288:	63 ec       	ldi	r22, 0xC3	; 195
    228a:	71 e0       	ldi	r23, 0x01	; 1
    228c:	89 e4       	ldi	r24, 0x49	; 73
    228e:	9b e0       	ldi	r25, 0x0B	; 11
    2290:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <_ZN6StringaSEPKc>
      righeDisplay[3] = "    Avvicina ATE  ";
    2294:	61 e4       	ldi	r22, 0x41	; 65
    2296:	77 e0       	ldi	r23, 0x07	; 7
    2298:	8f e4       	ldi	r24, 0x4F	; 79
    229a:	9b e0       	ldi	r25, 0x0B	; 11
    229c:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <_ZN6StringaSEPKc>
    
      displayLCD(righeDisplay,stato_procedura,100);     
    22a0:	60 91 9f 0b 	lds	r22, 0x0B9F	; 0x800b9f <stato_procedura>
    22a4:	70 91 a0 0b 	lds	r23, 0x0BA0	; 0x800ba0 <stato_procedura+0x1>
    22a8:	44 e6       	ldi	r20, 0x64	; 100
    22aa:	50 e0       	ldi	r21, 0x00	; 0
    22ac:	8d e3       	ldi	r24, 0x3D	; 61
    22ae:	9b e0       	ldi	r25, 0x0B	; 11
    22b0:	0e 94 53 05 	call	0xaa6	; 0xaa6 <_Z10displayLCDP6Stringii>
      
      String ATe = "ERRORE";
    22b4:	60 ed       	ldi	r22, 0xD0	; 208
    22b6:	72 e0       	ldi	r23, 0x02	; 2
    22b8:	ce 01       	movw	r24, r28
    22ba:	49 96       	adiw	r24, 0x19	; 25
    22bc:	0e 94 01 3e 	call	0x7c02	; 0x7c02 <_ZN6StringC1EPKc>

      if (!alreadyTimbrata) {ATe = GetCodeRfidATe(); Buzzer(2,100);}
    22c0:	80 91 de 0b 	lds	r24, 0x0BDE	; 0x800bde <alreadyTimbrata>
    22c4:	81 11       	cpse	r24, r1
    22c6:	16 c0       	rjmp	.+44     	; 0x22f4 <loop+0x24e>
    22c8:	ce 01       	movw	r24, r28
    22ca:	01 96       	adiw	r24, 0x01	; 1
    22cc:	0e 94 f4 06 	call	0xde8	; 0xde8 <_Z14GetCodeRfidATev>
    22d0:	be 01       	movw	r22, r28
    22d2:	6f 5f       	subi	r22, 0xFF	; 255
    22d4:	7f 4f       	sbci	r23, 0xFF	; 255
    22d6:	ce 01       	movw	r24, r28
    22d8:	49 96       	adiw	r24, 0x19	; 25
    22da:	0e 94 75 3e 	call	0x7cea	; 0x7cea <_ZN6StringaSEOS_>
    22de:	ce 01       	movw	r24, r28
    22e0:	01 96       	adiw	r24, 0x01	; 1
    22e2:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <_ZN6StringD1Ev>
    22e6:	44 e6       	ldi	r20, 0x64	; 100
    22e8:	50 e0       	ldi	r21, 0x00	; 0
    22ea:	60 e0       	ldi	r22, 0x00	; 0
    22ec:	70 e0       	ldi	r23, 0x00	; 0
    22ee:	82 e0       	ldi	r24, 0x02	; 2
    22f0:	0e 94 cc 04 	call	0x998	; 0x998 <_Z6Buzzerhm>
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
    22f4:	60 ed       	ldi	r22, 0xD0	; 208
    22f6:	72 e0       	ldi	r23, 0x02	; 2
    22f8:	ce 01       	movw	r24, r28
    22fa:	49 96       	adiw	r24, 0x19	; 25
    22fc:	0e 94 81 3f 	call	0x7f02	; 0x7f02 <_ZNK6String6equalsEPKc>
      
        if ((ATe != "ERRORE") && (BIT_IS_CLEAR(PORTC,4)))
    2300:	81 11       	cpse	r24, r1
    2302:	02 c0       	rjmp	.+4      	; 0x2308 <loop+0x262>
    2304:	44 9b       	sbis	0x08, 4	; 8
    2306:	ec c2       	rjmp	.+1496   	; 0x28e0 <loop+0x83a>

         // Effettua chiamata REST per validare CARD NFC
         // Se la CARD è valida memorizza in memoria l'operazione e prosegui
         // Altrimenti Memorizza in Memoria e Azzera la procedura.
      
         stato_procedura++; // da commentare
    2308:	80 91 9f 0b 	lds	r24, 0x0B9F	; 0x800b9f <stato_procedura>
    230c:	90 91 a0 0b 	lds	r25, 0x0BA0	; 0x800ba0 <stato_procedura+0x1>
    2310:	01 96       	adiw	r24, 0x01	; 1
    2312:	90 93 a0 0b 	sts	0x0BA0, r25	; 0x800ba0 <stato_procedura+0x1>
    2316:	80 93 9f 0b 	sts	0x0B9F, r24	; 0x800b9f <stato_procedura>
      righeDisplay[2] = "";
      righeDisplay[3] = "    Avvicina ATE  ";
    
      displayLCD(righeDisplay,stato_procedura,100);     
      
      String ATe = "ERRORE";
    231a:	ce 01       	movw	r24, r28
    231c:	49 96       	adiw	r24, 0x19	; 25
    231e:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <_ZN6StringD1Ev>
            _delay_ms(1000);
            Azzera();
           }   
          *****************************************************/
    }
    break;
    2322:	a1 c2       	rjmp	.+1346   	; 0x2866 <loop+0x7c0>
    case 2:
    {   
      disable_ETH();
    2324:	0e 94 92 01 	call	0x324	; 0x324 <_ZL11disable_ETHv>
    2328:	8f e3       	ldi	r24, 0x3F	; 63
    232a:	9f e1       	ldi	r25, 0x1F	; 31
    232c:	01 97       	sbiw	r24, 0x01	; 1
    232e:	f1 f7       	brne	.-4      	; 0x232c <loop+0x286>
    2330:	00 c0       	rjmp	.+0      	; 0x2332 <loop+0x28c>
    2332:	00 00       	nop
static const uint8_t RELE1 = PORTC7;
static const uint8_t RELE2 = PORTA7;

static inline void initSS_FLASH()  { DDRB |= (1 << PB4); } // set DDRB bit 4, sets PB4 for output
static inline void initSS_ETH()    { DDRC |= (1 << PC4); } // set DDRC bit 4, sets PC4 for output
static inline void enable_ETH()    { PORTC &= ~(1 << PC4); } // Set 0 Bit 4 PORTC Register
    2334:	44 98       	cbi	0x08, 4	; 8
      // da commentare
      // Carburante = "D"; // Simulo Abilitazione Diesel
      // da commentare
      // Carburante = "B"; // Simulo Abilitazione Benzina
      
      TARGA = "";
    2336:	63 ec       	ldi	r22, 0xC3	; 195
    2338:	71 e0       	ldi	r23, 0x01	; 1
    233a:	86 e6       	ldi	r24, 0x66	; 102
    233c:	9a e0       	ldi	r25, 0x0A	; 10
    233e:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <_ZN6StringaSEPKc>
      righeDisplay[1] =  "****** TARGA ******";
    2342:	64 e7       	ldi	r22, 0x74	; 116
    2344:	74 e0       	ldi	r23, 0x04	; 4
    2346:	83 e4       	ldi	r24, 0x43	; 67
    2348:	9b e0       	ldi	r25, 0x0B	; 11
    234a:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <_ZN6StringaSEPKc>
      righeDisplay[2] =  "";
    234e:	63 ec       	ldi	r22, 0xC3	; 195
    2350:	71 e0       	ldi	r23, 0x01	; 1
    2352:	89 e4       	ldi	r24, 0x49	; 73
    2354:	9b e0       	ldi	r25, 0x0B	; 11
    2356:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <_ZN6StringaSEPKc>
      righeDisplay[3] = "TARGA:";
    235a:	68 e8       	ldi	r22, 0x88	; 136
    235c:	74 e0       	ldi	r23, 0x04	; 4
    235e:	8f e4       	ldi	r24, 0x4F	; 79
    2360:	9b e0       	ldi	r25, 0x0B	; 11
    2362:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <_ZN6StringaSEPKc>
      displayLCD(righeDisplay,stato_procedura,10);
    2366:	60 91 9f 0b 	lds	r22, 0x0B9F	; 0x800b9f <stato_procedura>
    236a:	70 91 a0 0b 	lds	r23, 0x0BA0	; 0x800ba0 <stato_procedura+0x1>
    236e:	4a e0       	ldi	r20, 0x0A	; 10
    2370:	50 e0       	ldi	r21, 0x00	; 0
    2372:	8d e3       	ldi	r24, 0x3D	; 61
    2374:	9b e0       	ldi	r25, 0x0B	; 11
    2376:	0e 94 53 05 	call	0xaa6	; 0xaa6 <_Z10displayLCDP6Stringii>
      
      avanzaStato(TinputTarga);
    237a:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <TinputTarga>
    237e:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <TinputTarga+0x1>
    2382:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <TinputTarga+0x2>
    2386:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <TinputTarga+0x3>
    238a:	bb c0       	rjmp	.+374    	; 0x2502 <loop+0x45c>
    }
    break;
    case 3:
    {       
       getTastoPremuto_x_targa();
    238c:	62 db       	rcall	.-2364   	; 0x1a52 <_Z23getTastoPremuto_x_targav>
      String mezzoString = leggiTAG_Mezzo(false); // con TRUE scrive sul blocco 4 della card NFC
    238e:	60 e0       	ldi	r22, 0x00	; 0
    2390:	ce 01       	movw	r24, r28
    2392:	07 96       	adiw	r24, 0x07	; 7
    2394:	0e 94 11 06 	call	0xc22	; 0xc22 <_Z14leggiTAG_Mezzob>
    2398:	8f e3       	ldi	r24, 0x3F	; 63
    239a:	9c e9       	ldi	r25, 0x9C	; 156
    239c:	01 97       	sbiw	r24, 0x01	; 1
    239e:	f1 f7       	brne	.-4      	; 0x239c <loop+0x2f6>
    23a0:	00 c0       	rjmp	.+0      	; 0x23a2 <loop+0x2fc>
    23a2:	00 00       	nop
      _delay_ms(10);

      Serial.println(mezzoString);
    23a4:	be 01       	movw	r22, r28
    23a6:	69 5f       	subi	r22, 0xF9	; 249
    23a8:	7f 4f       	sbci	r23, 0xFF	; 255
    23aa:	85 e5       	ldi	r24, 0x55	; 85
    23ac:	9d e0       	ldi	r25, 0x0D	; 13
    23ae:	0e 94 4b 3b 	call	0x7696	; 0x7696 <_ZN5Print7printlnERK6String>
	int indexOf( const String &str, unsigned int fromIndex ) const;
	int lastIndexOf( char ch ) const;
	int lastIndexOf( char ch, unsigned int fromIndex ) const;
	int lastIndexOf( const String &str ) const;
	int lastIndexOf( const String &str, unsigned int fromIndex ) const;
	String substring( unsigned int beginIndex ) const { return substring(beginIndex, len); };
    23b2:	2b 85       	ldd	r18, Y+11	; 0x0b
    23b4:	3c 85       	ldd	r19, Y+12	; 0x0c
    23b6:	45 e0       	ldi	r20, 0x05	; 5
    23b8:	50 e0       	ldi	r21, 0x00	; 0
    23ba:	be 01       	movw	r22, r28
    23bc:	69 5f       	subi	r22, 0xF9	; 249
    23be:	7f 4f       	sbci	r23, 0xFF	; 255
    23c0:	ce 01       	movw	r24, r28
    23c2:	01 96       	adiw	r24, 0x01	; 1
    23c4:	0e 94 cd 3f 	call	0x7f9a	; 0x7f9a <_ZNK6String9substringEjj>
      
      mezzo.Carb = mezzoString.substring(5);
    23c8:	be 01       	movw	r22, r28
    23ca:	6f 5f       	subi	r22, 0xFF	; 255
    23cc:	7f 4f       	sbci	r23, 0xFF	; 255
    23ce:	88 ee       	ldi	r24, 0xE8	; 232
    23d0:	9b e0       	ldi	r25, 0x0B	; 11
    23d2:	0e 94 75 3e 	call	0x7cea	; 0x7cea <_ZN6StringaSEOS_>
    23d6:	ce 01       	movw	r24, r28
    23d8:	01 96       	adiw	r24, 0x01	; 1
    23da:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <_ZN6StringD1Ev>
      mezzo.TARGA = mezzoString.substring(0,5);
    23de:	25 e0       	ldi	r18, 0x05	; 5
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	40 e0       	ldi	r20, 0x00	; 0
    23e4:	50 e0       	ldi	r21, 0x00	; 0
    23e6:	be 01       	movw	r22, r28
    23e8:	69 5f       	subi	r22, 0xF9	; 249
    23ea:	7f 4f       	sbci	r23, 0xFF	; 255
    23ec:	ce 01       	movw	r24, r28
    23ee:	01 96       	adiw	r24, 0x01	; 1
    23f0:	0e 94 cd 3f 	call	0x7f9a	; 0x7f9a <_ZNK6String9substringEjj>
    23f4:	be 01       	movw	r22, r28
    23f6:	6f 5f       	subi	r22, 0xFF	; 255
    23f8:	7f 4f       	sbci	r23, 0xFF	; 255
    23fa:	8e ee       	ldi	r24, 0xEE	; 238
    23fc:	9b e0       	ldi	r25, 0x0B	; 11
    23fe:	0e 94 75 3e 	call	0x7cea	; 0x7cea <_ZN6StringaSEOS_>
    2402:	ce 01       	movw	r24, r28
    2404:	01 96       	adiw	r24, 0x01	; 1
    2406:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <_ZN6StringD1Ev>
      mezzo.KM = 0;
    240a:	10 92 f4 0b 	sts	0x0BF4, r1	; 0x800bf4 <mezzo+0xc>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    240e:	64 e5       	ldi	r22, 0x54	; 84
    2410:	77 e0       	ldi	r23, 0x07	; 7
    2412:	ce 01       	movw	r24, r28
    2414:	01 96       	adiw	r24, 0x01	; 1
    2416:	0e 94 01 3e 	call	0x7c02	; 0x7c02 <_ZN6StringC1EPKc>

      Serial.println("TIPO CARBURANTE: " + mezzo.Carb);    
    241a:	68 ee       	ldi	r22, 0xE8	; 232
    241c:	7b e0       	ldi	r23, 0x0B	; 11
    241e:	ce 01       	movw	r24, r28
    2420:	01 96       	adiw	r24, 0x01	; 1
    2422:	0e 94 59 3f 	call	0x7eb2	; 0x7eb2 <_ZplRK15StringSumHelperRK6String>
    2426:	bc 01       	movw	r22, r24
    2428:	85 e5       	ldi	r24, 0x55	; 85
    242a:	9d e0       	ldi	r25, 0x0D	; 13
    242c:	0e 94 4b 3b 	call	0x7696	; 0x7696 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2430:	ce 01       	movw	r24, r28
    2432:	01 96       	adiw	r24, 0x01	; 1
    2434:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2438:	66 e6       	ldi	r22, 0x66	; 102
    243a:	77 e0       	ldi	r23, 0x07	; 7
    243c:	ce 01       	movw	r24, r28
    243e:	01 96       	adiw	r24, 0x01	; 1
    2440:	0e 94 01 3e 	call	0x7c02	; 0x7c02 <_ZN6StringC1EPKc>
      Serial.println("TARGA: " + mezzo.TARGA);              
    2444:	6e ee       	ldi	r22, 0xEE	; 238
    2446:	7b e0       	ldi	r23, 0x0B	; 11
    2448:	ce 01       	movw	r24, r28
    244a:	01 96       	adiw	r24, 0x01	; 1
    244c:	0e 94 59 3f 	call	0x7eb2	; 0x7eb2 <_ZplRK15StringSumHelperRK6String>
    2450:	bc 01       	movw	r22, r24
    2452:	85 e5       	ldi	r24, 0x55	; 85
    2454:	9d e0       	ldi	r25, 0x0D	; 13
    2456:	0e 94 4b 3b 	call	0x7696	; 0x7696 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    245a:	ce 01       	movw	r24, r28
    245c:	01 96       	adiw	r24, 0x01	; 1
    245e:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <_ZN6StringD1Ev>

      Carburante = mezzo.Carb;                 
    2462:	68 ee       	ldi	r22, 0xE8	; 232
    2464:	7b e0       	ldi	r23, 0x0B	; 11
    2466:	8d e6       	ldi	r24, 0x6D	; 109
    2468:	9b e0       	ldi	r25, 0x0B	; 11
    246a:	0e 94 58 3e 	call	0x7cb0	; 0x7cb0 <_ZN6StringaSERKS_>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    246e:	69 ee       	ldi	r22, 0xE9	; 233
    2470:	71 e0       	ldi	r23, 0x01	; 1
    2472:	88 ee       	ldi	r24, 0xE8	; 232
    2474:	9b e0       	ldi	r25, 0x0B	; 11
    2476:	0e 94 81 3f 	call	0x7f02	; 0x7f02 <_ZNK6String6equalsEPKc>
      if ((mezzo.Carb == "B") || (mezzo.Carb == "D")) {
    247a:	81 11       	cpse	r24, r1
    247c:	ee c2       	rjmp	.+1500   	; 0x2a5a <loop+0x9b4>
    247e:	67 ee       	ldi	r22, 0xE7	; 231
    2480:	72 e0       	ldi	r23, 0x02	; 2
    2482:	88 ee       	ldi	r24, 0xE8	; 232
    2484:	9b e0       	ldi	r25, 0x0B	; 11
    2486:	0e 94 81 3f 	call	0x7f02	; 0x7f02 <_ZNK6String6equalsEPKc>
    248a:	81 11       	cpse	r24, r1
    248c:	e6 c2       	rjmp	.+1484   	; 0x2a5a <loop+0x9b4>
    }
    break;
    case 3:
    {       
       getTastoPremuto_x_targa();
      String mezzoString = leggiTAG_Mezzo(false); // con TRUE scrive sul blocco 4 della card NFC
    248e:	ce 01       	movw	r24, r28
    2490:	07 96       	adiw	r24, 0x07	; 7
    2492:	45 cf       	rjmp	.-374    	; 0x231e <loop+0x278>
      // avanzaStato(TselDistributore);  
    }
    break;
    case 4:
    { 
    righeDisplay[1] =  "****** DISTRIBUTORE ******";
    2494:	6e e6       	ldi	r22, 0x6E	; 110
    2496:	77 e0       	ldi	r23, 0x07	; 7
    2498:	83 e4       	ldi	r24, 0x43	; 67
    249a:	9b e0       	ldi	r25, 0x0B	; 11
    249c:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <_ZN6StringaSEPKc>
    righeDisplay[2] =  "";
    24a0:	63 ec       	ldi	r22, 0xC3	; 195
    24a2:	71 e0       	ldi	r23, 0x01	; 1
    24a4:	89 e4       	ldi	r24, 0x49	; 73
    24a6:	9b e0       	ldi	r25, 0x0B	; 11
    24a8:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <_ZN6StringaSEPKc>
    righeDisplay[3] = "**** SCEGLI ****";
    24ac:	69 e8       	ldi	r22, 0x89	; 137
    24ae:	77 e0       	ldi	r23, 0x07	; 7
    24b0:	8f e4       	ldi	r24, 0x4F	; 79
    24b2:	9b e0       	ldi	r25, 0x0B	; 11
    24b4:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <_ZN6StringaSEPKc>

    displayLCD(righeDisplay,stato_procedura,100);
    24b8:	60 91 9f 0b 	lds	r22, 0x0B9F	; 0x800b9f <stato_procedura>
    24bc:	70 91 a0 0b 	lds	r23, 0x0BA0	; 0x800ba0 <stato_procedura+0x1>
    24c0:	44 e6       	ldi	r20, 0x64	; 100
    24c2:	50 e0       	ldi	r21, 0x00	; 0
    24c4:	8d e3       	ldi	r24, 0x3D	; 61
    24c6:	9b e0       	ldi	r25, 0x0B	; 11
    24c8:	0e 94 53 05 	call	0xaa6	; 0xaa6 <_Z10displayLCDP6Stringii>
    24cc:	69 ee       	ldi	r22, 0xE9	; 233
    24ce:	71 e0       	ldi	r23, 0x01	; 1
    24d0:	88 ee       	ldi	r24, 0xE8	; 232
    24d2:	9b e0       	ldi	r25, 0x0B	; 11
    24d4:	0e 94 81 3f 	call	0x7f02	; 0x7f02 <_ZNK6String6equalsEPKc>

    // Verifica scelta distributore
    
      if (mezzo.Carb == "B")
    24d8:	88 23       	and	r24, r24
    24da:	b1 f0       	breq	.+44     	; 0x2508 <loop+0x462>
      {
        abilitaPulser('B');
    24dc:	82 e4       	ldi	r24, 0x42	; 66
    24de:	0e 94 67 07 	call	0xece	; 0xece <_Z13abilitaPulserc>
        Rele_Abilitazione2(0,7); // chiudi relè
    24e2:	67 e0       	ldi	r22, 0x07	; 7
    24e4:	70 e0       	ldi	r23, 0x00	; 0
    24e6:	80 e0       	ldi	r24, 0x00	; 0
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	0e 94 db 07 	call	0xfb6	; 0xfb6 <_Z18Rele_Abilitazione2ii>
        StatoAttuale = "BENZINA";
    24ee:	6f ed       	ldi	r22, 0xDF	; 223
    24f0:	72 e0       	ldi	r23, 0x02	; 2
    24f2:	89 ea       	ldi	r24, 0xA9	; 169
    24f4:	9b e0       	ldi	r25, 0x0B	; 11
    24f6:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <_ZN6StringaSEPKc>
        avanzaStato(10);
    24fa:	6a e0       	ldi	r22, 0x0A	; 10
    24fc:	70 e0       	ldi	r23, 0x00	; 0
    24fe:	80 e0       	ldi	r24, 0x00	; 0
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <_Z11avanzaStatom>
    2506:	af c1       	rjmp	.+862    	; 0x2866 <loop+0x7c0>
    2508:	67 ee       	ldi	r22, 0xE7	; 231
    250a:	72 e0       	ldi	r23, 0x02	; 2
    250c:	88 ee       	ldi	r24, 0xE8	; 232
    250e:	9b e0       	ldi	r25, 0x0B	; 11
    2510:	0e 94 81 3f 	call	0x7f02	; 0x7f02 <_ZNK6String6equalsEPKc>
      }
      else if (mezzo.Carb == "D")
    2514:	88 23       	and	r24, r24
    2516:	09 f4       	brne	.+2      	; 0x251a <loop+0x474>
    2518:	a6 c1       	rjmp	.+844    	; 0x2866 <loop+0x7c0>
      {
        abilitaPulser('D');
    251a:	84 e4       	ldi	r24, 0x44	; 68
    251c:	0e 94 67 07 	call	0xece	; 0xece <_Z13abilitaPulserc>
        Rele_Abilitazione1(0,7); // chiudi relè
    2520:	67 e0       	ldi	r22, 0x07	; 7
    2522:	70 e0       	ldi	r23, 0x00	; 0
    2524:	80 e0       	ldi	r24, 0x00	; 0
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	0e 94 a0 07 	call	0xf40	; 0xf40 <_Z18Rele_Abilitazione1ii>
        StatoAttuale = "GASOLIO";
    252c:	69 ee       	ldi	r22, 0xE9	; 233
    252e:	72 e0       	ldi	r23, 0x02	; 2
    2530:	e0 cf       	rjmp	.-64     	; 0x24f2 <loop+0x44c>
    break;
    case 5:
    {             
      // VALIDA MEZZO CON WBSERVICES
      
      impulsi = 0;
    2532:	10 92 9e 0b 	sts	0x0B9E, r1	; 0x800b9e <impulsi+0x1>
    2536:	10 92 9d 0b 	sts	0x0B9D, r1	; 0x800b9d <impulsi>
      
      righeDisplay[1] = "**** Distributore ****";
    253a:	6a e9       	ldi	r22, 0x9A	; 154
    253c:	77 e0       	ldi	r23, 0x07	; 7
    253e:	83 e4       	ldi	r24, 0x43	; 67
    2540:	9b e0       	ldi	r25, 0x0B	; 11
    2542:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <_ZN6StringaSEPKc>
      righeDisplay[2] =  "";
    2546:	63 ec       	ldi	r22, 0xC3	; 195
    2548:	71 e0       	ldi	r23, 0x01	; 1
    254a:	89 e4       	ldi	r24, 0x49	; 73
    254c:	9b e0       	ldi	r25, 0x0B	; 11
    254e:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <_ZN6StringaSEPKc>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2552:	61 eb       	ldi	r22, 0xB1	; 177
    2554:	77 e0       	ldi	r23, 0x07	; 7
    2556:	ce 01       	movw	r24, r28
    2558:	01 96       	adiw	r24, 0x01	; 1
    255a:	0e 94 01 3e 	call	0x7c02	; 0x7c02 <_ZN6StringC1EPKc>
      righeDisplay[3] = "***** " + StatoAttuale + " *****";
    255e:	69 ea       	ldi	r22, 0xA9	; 169
    2560:	7b e0       	ldi	r23, 0x0B	; 11
    2562:	ce 01       	movw	r24, r28
    2564:	01 96       	adiw	r24, 0x01	; 1
    2566:	0e 94 59 3f 	call	0x7eb2	; 0x7eb2 <_ZplRK15StringSumHelperRK6String>
    256a:	68 eb       	ldi	r22, 0xB8	; 184
    256c:	77 e0       	ldi	r23, 0x07	; 7
    256e:	0e 94 6a 3f 	call	0x7ed4	; 0x7ed4 <_ZplRK15StringSumHelperPKc>
    2572:	bc 01       	movw	r22, r24
    2574:	8f e4       	ldi	r24, 0x4F	; 79
    2576:	9b e0       	ldi	r25, 0x0B	; 11
    2578:	0e 94 58 3e 	call	0x7cb0	; 0x7cb0 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    257c:	ce 01       	movw	r24, r28
    257e:	01 96       	adiw	r24, 0x01	; 1
    2580:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <_ZN6StringD1Ev>
      
      displayLCD(righeDisplay,stato_procedura,100);
    2584:	60 91 9f 0b 	lds	r22, 0x0B9F	; 0x800b9f <stato_procedura>
    2588:	70 91 a0 0b 	lds	r23, 0x0BA0	; 0x800ba0 <stato_procedura+0x1>
    258c:	44 e6       	ldi	r20, 0x64	; 100
    258e:	50 e0       	ldi	r21, 0x00	; 0
    2590:	8d e3       	ldi	r24, 0x3D	; 61
    2592:	9b e0       	ldi	r25, 0x0B	; 11
    2594:	0e 94 53 05 	call	0xaa6	; 0xaa6 <_Z10displayLCDP6Stringii>

      avanzaStato(20);
    2598:	64 e1       	ldi	r22, 0x14	; 20
    259a:	70 e0       	ldi	r23, 0x00	; 0
    259c:	80 e0       	ldi	r24, 0x00	; 0
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	b0 cf       	rjmp	.-160    	; 0x2502 <loop+0x45c>
    }
    break;
    case 6:
    { 
      double lt = impulsiToLitri(impulsi);      
    25a2:	80 91 9d 0b 	lds	r24, 0x0B9D	; 0x800b9d <impulsi>
    25a6:	90 91 9e 0b 	lds	r25, 0x0B9E	; 0x800b9e <impulsi+0x1>
    25aa:	0e 94 75 07 	call	0xeea	; 0xeea <_Z14impulsiToLitrii>
    25ae:	6b 01       	movw	r12, r22
    25b0:	7c 01       	movw	r14, r24
      
      righeDisplay[1] = "LITRI :" + String(lt);
    25b2:	22 e0       	ldi	r18, 0x02	; 2
    25b4:	ab 01       	movw	r20, r22
    25b6:	bc 01       	movw	r22, r24
    25b8:	ce 01       	movw	r24, r28
    25ba:	07 96       	adiw	r24, 0x07	; 7
    25bc:	0e 94 eb 3e 	call	0x7dd6	; 0x7dd6 <_ZN6StringC1Edh>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    25c0:	6f eb       	ldi	r22, 0xBF	; 191
    25c2:	77 e0       	ldi	r23, 0x07	; 7
    25c4:	ce 01       	movw	r24, r28
    25c6:	01 96       	adiw	r24, 0x01	; 1
    25c8:	0e 94 01 3e 	call	0x7c02	; 0x7c02 <_ZN6StringC1EPKc>
    25cc:	be 01       	movw	r22, r28
    25ce:	69 5f       	subi	r22, 0xF9	; 249
    25d0:	7f 4f       	sbci	r23, 0xFF	; 255
    25d2:	ce 01       	movw	r24, r28
    25d4:	01 96       	adiw	r24, 0x01	; 1
    25d6:	0e 94 59 3f 	call	0x7eb2	; 0x7eb2 <_ZplRK15StringSumHelperRK6String>
    25da:	bc 01       	movw	r22, r24
    25dc:	83 e4       	ldi	r24, 0x43	; 67
    25de:	9b e0       	ldi	r25, 0x0B	; 11
    25e0:	0e 94 58 3e 	call	0x7cb0	; 0x7cb0 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    25e4:	ce 01       	movw	r24, r28
    25e6:	01 96       	adiw	r24, 0x01	; 1
    25e8:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <_ZN6StringD1Ev>
    25ec:	ce 01       	movw	r24, r28
    25ee:	07 96       	adiw	r24, 0x07	; 7
    25f0:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <_ZN6StringD1Ev>
      righeDisplay[2] = "";     
    25f4:	63 ec       	ldi	r22, 0xC3	; 195
    25f6:	71 e0       	ldi	r23, 0x01	; 1
    25f8:	89 e4       	ldi	r24, 0x49	; 73
    25fa:	9b e0       	ldi	r25, 0x0B	; 11
    25fc:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <_ZN6StringaSEPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2600:	67 ec       	ldi	r22, 0xC7	; 199
    2602:	77 e0       	ldi	r23, 0x07	; 7
    2604:	ce 01       	movw	r24, r28
    2606:	01 96       	adiw	r24, 0x01	; 1
    2608:	0e 94 01 3e 	call	0x7c02	; 0x7c02 <_ZN6StringC1EPKc>
      righeDisplay[3] = "Erogazione: " + StatoAttuale;
    260c:	69 ea       	ldi	r22, 0xA9	; 169
    260e:	7b e0       	ldi	r23, 0x0B	; 11
    2610:	ce 01       	movw	r24, r28
    2612:	01 96       	adiw	r24, 0x01	; 1
    2614:	0e 94 59 3f 	call	0x7eb2	; 0x7eb2 <_ZplRK15StringSumHelperRK6String>
    2618:	bc 01       	movw	r22, r24
    261a:	8f e4       	ldi	r24, 0x4F	; 79
    261c:	9b e0       	ldi	r25, 0x0B	; 11
    261e:	0e 94 58 3e 	call	0x7cb0	; 0x7cb0 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2622:	ce 01       	movw	r24, r28
    2624:	01 96       	adiw	r24, 0x01	; 1
    2626:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <_ZN6StringD1Ev>
      
      displayLCD(righeDisplay,stato_procedura,100);   
    262a:	60 91 9f 0b 	lds	r22, 0x0B9F	; 0x800b9f <stato_procedura>
    262e:	70 91 a0 0b 	lds	r23, 0x0BA0	; 0x800ba0 <stato_procedura+0x1>
    2632:	44 e6       	ldi	r20, 0x64	; 100
    2634:	50 e0       	ldi	r21, 0x00	; 0
    2636:	8d e3       	ldi	r24, 0x3D	; 61
    2638:	9b e0       	ldi	r25, 0x0B	; 11
    263a:	0e 94 53 05 	call	0xaa6	; 0xaa6 <_Z10displayLCDP6Stringii>

      /* CONTATTO PISTOLA DIESEL*/
      
      if ((PINA & _BV(PA1)) && (Carburante == "D"))
    263e:	01 9b       	sbis	0x00, 1	; 0
    2640:	08 c0       	rjmp	.+16     	; 0x2652 <loop+0x5ac>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    2642:	67 ee       	ldi	r22, 0xE7	; 231
    2644:	72 e0       	ldi	r23, 0x02	; 2
    2646:	8d e6       	ldi	r24, 0x6D	; 109
    2648:	9b e0       	ldi	r25, 0x0B	; 11
    264a:	0e 94 81 3f 	call	0x7f02	; 0x7f02 <_ZNK6String6equalsEPKc>
    264e:	81 11       	cpse	r24, r1
    2650:	1b c2       	rjmp	.+1078   	; 0x2a88 <loop+0x9e2>
        avanzaStato(10);
      }
      
      /* CONTATTO PISTOLA BENZINA*/
      
      if  ((PINB & _BV(PB1)) && (Carburante == "B"))
    2652:	19 9b       	sbis	0x03, 1	; 3
    2654:	08 c1       	rjmp	.+528    	; 0x2866 <loop+0x7c0>
    2656:	69 ee       	ldi	r22, 0xE9	; 233
    2658:	71 e0       	ldi	r23, 0x01	; 1
    265a:	8d e6       	ldi	r24, 0x6D	; 109
    265c:	9b e0       	ldi	r25, 0x0B	; 11
    265e:	0e 94 81 3f 	call	0x7f02	; 0x7f02 <_ZNK6String6equalsEPKc>
    2662:	81 11       	cpse	r24, r1
    2664:	40 c2       	rjmp	.+1152   	; 0x2ae6 <loop+0xa40>
    2666:	ff c0       	rjmp	.+510    	; 0x2866 <loop+0x7c0>
      /**************************************
       Control_WIFI(1);
       _delay_ms(2000);
      /**************************************/
      
      righeDisplay[1] =  "";      
    2668:	63 ec       	ldi	r22, 0xC3	; 195
    266a:	71 e0       	ldi	r23, 0x01	; 1
    266c:	83 e4       	ldi	r24, 0x43	; 67
    266e:	9b e0       	ldi	r25, 0x0B	; 11
    2670:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <_ZN6StringaSEPKc>
      righeDisplay[2] = "Invio........";
    2674:	64 ed       	ldi	r22, 0xD4	; 212
    2676:	77 e0       	ldi	r23, 0x07	; 7
    2678:	89 e4       	ldi	r24, 0x49	; 73
    267a:	9b e0       	ldi	r25, 0x0B	; 11
    267c:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <_ZN6StringaSEPKc>
      righeDisplay[3] =  "";
    2680:	63 ec       	ldi	r22, 0xC3	; 195
    2682:	71 e0       	ldi	r23, 0x01	; 1
    2684:	8f e4       	ldi	r24, 0x4F	; 79
    2686:	9b e0       	ldi	r25, 0x0B	; 11
    2688:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <_ZN6StringaSEPKc>
          
      if (BIT_IS_CLEAR(PORTC,4)) 
    268c:	44 99       	sbic	0x08, 4	; 8
    268e:	eb c0       	rjmp	.+470    	; 0x2866 <loop+0x7c0>
      {
        displayLCD(righeDisplay,stato_procedura,10);  
    2690:	60 91 9f 0b 	lds	r22, 0x0B9F	; 0x800b9f <stato_procedura>
    2694:	70 91 a0 0b 	lds	r23, 0x0BA0	; 0x800ba0 <stato_procedura+0x1>
    2698:	4a e0       	ldi	r20, 0x0A	; 10
    269a:	50 e0       	ldi	r21, 0x00	; 0
    269c:	8d e3       	ldi	r24, 0x3D	; 61
    269e:	9b e0       	ldi	r25, 0x0B	; 11
    26a0:	0e 94 53 05 	call	0xaa6	; 0xaa6 <_Z10displayLCDP6Stringii>
        InizializzaEthernet();
    26a4:	0e 94 4b 0a 	call	0x1496	; 0x1496 <_Z19InizializzaEthernetv>
    26a8:	9f ef       	ldi	r25, 0xFF	; 255
    26aa:	23 ed       	ldi	r18, 0xD3	; 211
    26ac:	80 e3       	ldi	r24, 0x30	; 48
    26ae:	91 50       	subi	r25, 0x01	; 1
    26b0:	20 40       	sbci	r18, 0x00	; 0
    26b2:	80 40       	sbci	r24, 0x00	; 0
    26b4:	e1 f7       	brne	.-8      	; 0x26ae <loop+0x608>
    26b6:	00 c0       	rjmp	.+0      	; 0x26b8 <loop+0x612>
    26b8:	00 00       	nop
        _delay_ms(1000);
        //Control_WIFI(0);
        
        Messaggio = ""; 
    26ba:	63 ec       	ldi	r22, 0xC3	; 195
    26bc:	71 e0       	ldi	r23, 0x01	; 1
    26be:	85 e5       	ldi	r24, 0x55	; 85
    26c0:	9b e0       	ldi	r25, 0x0B	; 11
    26c2:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <_ZN6StringaSEPKc>
    26c6:	03 e7       	ldi	r16, 0x73	; 115
    26c8:	1b e0       	ldi	r17, 0x0B	; 11
    26ca:	8b e8       	ldi	r24, 0x8B	; 139
    26cc:	e8 2e       	mov	r14, r24
    26ce:	8b e0       	ldi	r24, 0x0B	; 11
    26d0:	f8 2e       	mov	r15, r24
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
    26d2:	b8 01       	movw	r22, r16
    26d4:	ce 01       	movw	r24, r28
    26d6:	01 96       	adiw	r24, 0x01	; 1
    26d8:	0e 94 6d 3e 	call	0x7cda	; 0x7cda <_ZN6StringC1ERKS_>
        
        for (int k = 0;k<4;k++)
          Messaggio.concat(RaccoltaDati[k]+";");        
    26dc:	61 e0       	ldi	r22, 0x01	; 1
    26de:	72 e0       	ldi	r23, 0x02	; 2
    26e0:	ce 01       	movw	r24, r28
    26e2:	01 96       	adiw	r24, 0x01	; 1
    26e4:	0e 94 6a 3f 	call	0x7ed4	; 0x7ed4 <_ZplRK15StringSumHelperPKc>
    26e8:	bc 01       	movw	r22, r24
    26ea:	85 e5       	ldi	r24, 0x55	; 85
    26ec:	9b e0       	ldi	r25, 0x0B	; 11
    26ee:	0e 94 45 3f 	call	0x7e8a	; 0x7e8a <_ZN6String6concatERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    26f2:	ce 01       	movw	r24, r28
    26f4:	01 96       	adiw	r24, 0x01	; 1
    26f6:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <_ZN6StringD1Ev>
    26fa:	0a 5f       	subi	r16, 0xFA	; 250
    26fc:	1f 4f       	sbci	r17, 0xFF	; 255
        _delay_ms(1000);
        //Control_WIFI(0);
        
        Messaggio = ""; 
        
        for (int k = 0;k<4;k++)
    26fe:	e0 16       	cp	r14, r16
    2700:	f1 06       	cpc	r15, r17
    2702:	39 f7       	brne	.-50     	; 0x26d2 <loop+0x62c>
          Messaggio.concat(RaccoltaDati[k]+";");        
        
        //Messaggio = "000;2149016745;00001;2658;Diesel;70.00";
        //CompletoRifornimentoPerInvioDati(stato_procedura);
        
        if(InviaRifornimento(stato_procedura,Connected,MessaggioToServer,100,""))
    2704:	63 ec       	ldi	r22, 0xC3	; 195
    2706:	71 e0       	ldi	r23, 0x01	; 1
    2708:	ce 01       	movw	r24, r28
    270a:	01 96       	adiw	r24, 0x01	; 1
    270c:	0e 94 01 3e 	call	0x7c02	; 0x7c02 <_ZN6StringC1EPKc>
    2710:	60 91 a1 0b 	lds	r22, 0x0BA1	; 0x800ba1 <Connected>
    2714:	70 91 a2 0b 	lds	r23, 0x0BA2	; 0x800ba2 <Connected+0x1>
    2718:	8e 01       	movw	r16, r28
    271a:	0f 5f       	subi	r16, 0xFF	; 255
    271c:	1f 4f       	sbci	r17, 0xFF	; 255
    271e:	24 e6       	ldi	r18, 0x64	; 100
    2720:	30 e0       	ldi	r19, 0x00	; 0
    2722:	49 ed       	ldi	r20, 0xD9	; 217
    2724:	5a e0       	ldi	r21, 0x0A	; 10
    2726:	80 91 9f 0b 	lds	r24, 0x0B9F	; 0x800b9f <stato_procedura>
    272a:	90 91 a0 0b 	lds	r25, 0x0BA0	; 0x800ba0 <stato_procedura+0x1>
    272e:	39 dc       	rcall	.-1934   	; 0x1fa2 <_Z17InviaRifornimentoiiPci6String>
    2730:	18 2f       	mov	r17, r24
    2732:	ce 01       	movw	r24, r28
    2734:	01 96       	adiw	r24, 0x01	; 1
    2736:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <_ZN6StringD1Ev>
    273a:	11 23       	and	r17, r17
    273c:	41 f1       	breq	.+80     	; 0x278e <loop+0x6e8>
        { 
       
          disable_ETH();
    273e:	0e 94 92 01 	call	0x324	; 0x324 <_ZL11disable_ETHv>
          
          righeDisplay[1] = "";
    2742:	63 ec       	ldi	r22, 0xC3	; 195
    2744:	71 e0       	ldi	r23, 0x01	; 1
    2746:	83 e4       	ldi	r24, 0x43	; 67
    2748:	9b e0       	ldi	r25, 0x0B	; 11
    274a:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <_ZN6StringaSEPKc>
          righeDisplay[2] = " Dati Inviati ";
    274e:	62 ee       	ldi	r22, 0xE2	; 226
    2750:	77 e0       	ldi	r23, 0x07	; 7
    2752:	89 e4       	ldi	r24, 0x49	; 73
    2754:	9b e0       	ldi	r25, 0x0B	; 11
    2756:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <_ZN6StringaSEPKc>
          righeDisplay[3] =  "";
    275a:	63 ec       	ldi	r22, 0xC3	; 195
    275c:	71 e0       	ldi	r23, 0x01	; 1
    275e:	8f e4       	ldi	r24, 0x4F	; 79
    2760:	9b e0       	ldi	r25, 0x0B	; 11
    2762:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <_ZN6StringaSEPKc>
          
          displayLCD(righeDisplay,stato_procedura,100);
    2766:	60 91 9f 0b 	lds	r22, 0x0B9F	; 0x800b9f <stato_procedura>
    276a:	70 91 a0 0b 	lds	r23, 0x0BA0	; 0x800ba0 <stato_procedura+0x1>
    276e:	44 e6       	ldi	r20, 0x64	; 100
    2770:	50 e0       	ldi	r21, 0x00	; 0
    2772:	8d e3       	ldi	r24, 0x3D	; 61
    2774:	9b e0       	ldi	r25, 0x0B	; 11
    2776:	0e 94 53 05 	call	0xaa6	; 0xaa6 <_Z10displayLCDP6Stringii>
    277a:	9f ef       	ldi	r25, 0xFF	; 255
    277c:	29 ef       	ldi	r18, 0xF9	; 249
    277e:	80 e0       	ldi	r24, 0x00	; 0
    2780:	91 50       	subi	r25, 0x01	; 1
    2782:	20 40       	sbci	r18, 0x00	; 0
    2784:	80 40       	sbci	r24, 0x00	; 0
    2786:	e1 f7       	brne	.-8      	; 0x2780 <loop+0x6da>
    2788:	00 c0       	rjmp	.+0      	; 0x278a <loop+0x6e4>
    278a:	00 00       	nop
    278c:	6b c0       	rjmp	.+214    	; 0x2864 <loop+0x7be>
          
          Azzera();
        }
        else { 
           // stato_procedura++;
           avanzaStato(TmaxSalvataggio);
    278e:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <TmaxSalvataggio>
    2792:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <TmaxSalvataggio+0x1>
    2796:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <TmaxSalvataggio+0x2>
    279a:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <TmaxSalvataggio+0x3>
    279e:	b1 ce       	rjmp	.-670    	; 0x2502 <loop+0x45c>
      }
    }
    break;
    case 8:
    { 
          righeDisplay[1] =  "";
    27a0:	63 ec       	ldi	r22, 0xC3	; 195
    27a2:	71 e0       	ldi	r23, 0x01	; 1
    27a4:	83 e4       	ldi	r24, 0x43	; 67
    27a6:	9b e0       	ldi	r25, 0x0B	; 11
    27a8:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <_ZN6StringaSEPKc>
          righeDisplay[2] = "Salvo Dati........";
    27ac:	61 ef       	ldi	r22, 0xF1	; 241
    27ae:	77 e0       	ldi	r23, 0x07	; 7
    27b0:	89 e4       	ldi	r24, 0x49	; 73
    27b2:	9b e0       	ldi	r25, 0x0B	; 11
    27b4:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <_ZN6StringaSEPKc>
          righeDisplay[3] =  "";  
    27b8:	63 ec       	ldi	r22, 0xC3	; 195
    27ba:	71 e0       	ldi	r23, 0x01	; 1
    27bc:	8f e4       	ldi	r24, 0x4F	; 79
    27be:	9b e0       	ldi	r25, 0x0B	; 11
    27c0:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <_ZN6StringaSEPKc>
          displayLCD(righeDisplay,stato_procedura,10);
    27c4:	60 91 9f 0b 	lds	r22, 0x0B9F	; 0x800b9f <stato_procedura>
    27c8:	70 91 a0 0b 	lds	r23, 0x0BA0	; 0x800ba0 <stato_procedura+0x1>
    27cc:	4a e0       	ldi	r20, 0x0A	; 10
    27ce:	50 e0       	ldi	r21, 0x00	; 0
    27d0:	8d e3       	ldi	r24, 0x3D	; 61
    27d2:	9b e0       	ldi	r25, 0x0B	; 11
    27d4:	0e 94 53 05 	call	0xaa6	; 0xaa6 <_Z10displayLCDP6Stringii>
    27d8:	8f e1       	ldi	r24, 0x1F	; 31
    27da:	9e e4       	ldi	r25, 0x4E	; 78
    27dc:	01 97       	sbiw	r24, 0x01	; 1
    27de:	f1 f7       	brne	.-4      	; 0x27dc <loop+0x736>
    27e0:	00 c0       	rjmp	.+0      	; 0x27e2 <loop+0x73c>
    27e2:	00 00       	nop
          /*******************************/
          _delay_ms(5);
          disable_ETH();
    27e4:	0e 94 92 01 	call	0x324	; 0x324 <_ZL11disable_ETHv>
          Serial.println("ETH Disabilitata");
    27e8:	64 e0       	ldi	r22, 0x04	; 4
    27ea:	78 e0       	ldi	r23, 0x08	; 8
    27ec:	85 e5       	ldi	r24, 0x55	; 85
    27ee:	9d e0       	ldi	r25, 0x0D	; 13
    27f0:	0e 94 5b 3b 	call	0x76b6	; 0x76b6 <_ZN5Print7printlnEPKc>
    27f4:	8f e1       	ldi	r24, 0x1F	; 31
    27f6:	9e e4       	ldi	r25, 0x4E	; 78
    27f8:	01 97       	sbiw	r24, 0x01	; 1
    27fa:	f1 f7       	brne	.-4      	; 0x27f8 <loop+0x752>
    27fc:	00 c0       	rjmp	.+0      	; 0x27fe <loop+0x758>
    27fe:	00 00       	nop
static const uint8_t RELE2 = PORTA7;

static inline void initSS_FLASH()  { DDRB |= (1 << PB4); } // set DDRB bit 4, sets PB4 for output
static inline void initSS_ETH()    { DDRC |= (1 << PC4); } // set DDRC bit 4, sets PC4 for output
static inline void enable_ETH()    { PORTC &= ~(1 << PC4); } // Set 0 Bit 4 PORTC Register
static inline void enable_FLASH()  { PORTB &= ~(1 << PB4); } // Set 0 Bit 4 PORTB Register
    2800:	2c 98       	cbi	0x05, 4	; 5
          disable_ETH();
          Serial.println("ETH Disabilitata");
          /*******************************/
          _delay_ms(5);
          enable_FLASH();
          Serial.println("FLASH Ablitata");
    2802:	65 e1       	ldi	r22, 0x15	; 21
    2804:	78 e0       	ldi	r23, 0x08	; 8
    2806:	85 e5       	ldi	r24, 0x55	; 85
    2808:	9d e0       	ldi	r25, 0x0D	; 13
    280a:	0e 94 5b 3b 	call	0x76b6	; 0x76b6 <_ZN5Print7printlnEPKc>
          printLine();
    280e:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <_Z9printLinev>
          /******************************/        
          FlashpowerUp(); 
    2812:	0e 94 9e 03 	call	0x73c	; 0x73c <_Z12FlashpowerUpv>
    2816:	8f e1       	ldi	r24, 0x1F	; 31
    2818:	9e e4       	ldi	r25, 0x4E	; 78
    281a:	01 97       	sbiw	r24, 0x01	; 1
    281c:	f1 f7       	brne	.-4      	; 0x281a <loop+0x774>
    281e:	00 c0       	rjmp	.+0      	; 0x2820 <loop+0x77a>
    2820:	00 00       	nop
          _delay_ms(5); 
          erogazioniSaver(addr_erog,Messaggio);   
    2822:	65 e5       	ldi	r22, 0x55	; 85
    2824:	7b e0       	ldi	r23, 0x0B	; 11
    2826:	ce 01       	movw	r24, r28
    2828:	01 96       	adiw	r24, 0x01	; 1
    282a:	0e 94 6d 3e 	call	0x7cda	; 0x7cda <_ZN6StringC1ERKS_>
    282e:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <addr_erog>
    2832:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <addr_erog+0x1>
    2836:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <addr_erog+0x2>
    283a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <addr_erog+0x3>
    283e:	ae 01       	movw	r20, r28
    2840:	4f 5f       	subi	r20, 0xFF	; 255
    2842:	5f 4f       	sbci	r21, 0xFF	; 255
    2844:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z15erogazioniSaverm6String>
    2848:	ce 01       	movw	r24, r28
    284a:	01 96       	adiw	r24, 0x01	; 1
    284c:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <_ZN6StringD1Ev>
    2850:	8f e1       	ldi	r24, 0x1F	; 31
    2852:	9e e4       	ldi	r25, 0x4E	; 78
    2854:	01 97       	sbiw	r24, 0x01	; 1
    2856:	f1 f7       	brne	.-4      	; 0x2854 <loop+0x7ae>
    2858:	00 c0       	rjmp	.+0      	; 0x285a <loop+0x7b4>
    285a:	00 00       	nop
          _delay_ms(5);
          FlashpowerDown();          
    285c:	0e 94 76 03 	call	0x6ec	; 0x6ec <_Z14FlashpowerDownv>
          printLine();
    2860:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <_Z9printLinev>
          Azzera();
    2864:	08 db       	rcall	.-2544   	; 0x1e76 <_Z6Azzerav>
    {      
    }
    break;
  }

  nowTimer = DS3231M.now();
    2866:	68 e8       	ldi	r22, 0x88	; 136
    2868:	7a e0       	ldi	r23, 0x0A	; 10
    286a:	ce 01       	movw	r24, r28
    286c:	01 96       	adiw	r24, 0x01	; 1
    286e:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <_ZN13DS3231M_Class3nowEv>
    2872:	86 e0       	ldi	r24, 0x06	; 6
    2874:	fe 01       	movw	r30, r28
    2876:	31 96       	adiw	r30, 0x01	; 1
    2878:	a6 e7       	ldi	r26, 0x76	; 118
    287a:	ba e0       	ldi	r27, 0x0A	; 10
    287c:	01 90       	ld	r0, Z+
    287e:	0d 92       	st	X+, r0
    2880:	8a 95       	dec	r24
  secs = nowTimer.secondstime();
    2882:	e1 f7       	brne	.-8      	; 0x287c <loop+0x7d6>
    2884:	86 e7       	ldi	r24, 0x76	; 118
    2886:	9a e0       	ldi	r25, 0x0A	; 10
    2888:	e2 d7       	rcall	.+4036   	; 0x384e <_ZNK8DateTime11secondstimeEv>
    288a:	60 93 84 0a 	sts	0x0A84, r22	; 0x800a84 <secs>
    288e:	70 93 85 0a 	sts	0x0A85, r23	; 0x800a85 <secs+0x1>
    2892:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <secs+0x2>
    2896:	90 93 87 0a 	sts	0x0A87, r25	; 0x800a87 <secs+0x3>
  if ((UltimoPassaggioStato+Timer-secs) <= 1) Azzera();
    289a:	00 91 80 0a 	lds	r16, 0x0A80	; 0x800a80 <UltimoPassaggioStato>
    289e:	10 91 81 0a 	lds	r17, 0x0A81	; 0x800a81 <UltimoPassaggioStato+0x1>
    28a2:	20 91 82 0a 	lds	r18, 0x0A82	; 0x800a82 <UltimoPassaggioStato+0x2>
    28a6:	30 91 83 0a 	lds	r19, 0x0A83	; 0x800a83 <UltimoPassaggioStato+0x3>
    28aa:	c0 90 7c 0a 	lds	r12, 0x0A7C	; 0x800a7c <Timer>
    28ae:	d0 90 7d 0a 	lds	r13, 0x0A7D	; 0x800a7d <Timer+0x1>
    28b2:	e0 90 7e 0a 	lds	r14, 0x0A7E	; 0x800a7e <Timer+0x2>
    28b6:	f0 90 7f 0a 	lds	r15, 0x0A7F	; 0x800a7f <Timer+0x3>
    28ba:	0c 0d       	add	r16, r12
    28bc:	1d 1d       	adc	r17, r13
    28be:	2e 1d       	adc	r18, r14
    28c0:	3f 1d       	adc	r19, r15
    28c2:	68 01       	movw	r12, r16
    28c4:	79 01       	movw	r14, r18
    28c6:	c6 1a       	sub	r12, r22
    28c8:	d7 0a       	sbc	r13, r23
    28ca:	e8 0a       	sbc	r14, r24
    28cc:	f9 0a       	sbc	r15, r25
    28ce:	d7 01       	movw	r26, r14
    28d0:	c6 01       	movw	r24, r12
    28d2:	02 97       	sbiw	r24, 0x02	; 2
    28d4:	a1 05       	cpc	r26, r1
    28d6:	b1 05       	cpc	r27, r1
    28d8:	08 f0       	brcs	.+2      	; 0x28dc <loop+0x836>
    28da:	32 c1       	rjmp	.+612    	; 0x2b40 <loop+0xa9a>
    28dc:	cc da       	rcall	.-2664   	; 0x1e76 <_Z6Azzerav>

}
    28de:	30 c1       	rjmp	.+608    	; 0x2b40 <loop+0xa9a>

      if (!alreadyTimbrata) {ATe = GetCodeRfidATe(); Buzzer(2,100);}
      
        if ((ATe != "ERRORE") && (BIT_IS_CLEAR(PORTC,4)))
        { 
           Serial.println("");
    28e0:	63 ec       	ldi	r22, 0xC3	; 195
    28e2:	71 e0       	ldi	r23, 0x01	; 1
    28e4:	85 e5       	ldi	r24, 0x55	; 85
    28e6:	9d e0       	ldi	r25, 0x0D	; 13
    28e8:	0e 94 5b 3b 	call	0x76b6	; 0x76b6 <_ZN5Print7printlnEPKc>
           Serial.print("***************************************************************");
    28ec:	64 e2       	ldi	r22, 0x24	; 36
    28ee:	78 e0       	ldi	r23, 0x08	; 8
    28f0:	85 e5       	ldi	r24, 0x55	; 85
    28f2:	9d e0       	ldi	r25, 0x0D	; 13
    28f4:	0e 94 30 3b 	call	0x7660	; 0x7660 <_ZN5Print5printEPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    28f8:	64 e6       	ldi	r22, 0x64	; 100
    28fa:	78 e0       	ldi	r23, 0x08	; 8
    28fc:	ce 01       	movw	r24, r28
    28fe:	01 96       	adiw	r24, 0x01	; 1
    2900:	0e 94 01 3e 	call	0x7c02	; 0x7c02 <_ZN6StringC1EPKc>
           Serial.println(" Tessera ID : " + ATe);
    2904:	be 01       	movw	r22, r28
    2906:	67 5e       	subi	r22, 0xE7	; 231
    2908:	7f 4f       	sbci	r23, 0xFF	; 255
    290a:	ce 01       	movw	r24, r28
    290c:	01 96       	adiw	r24, 0x01	; 1
    290e:	0e 94 59 3f 	call	0x7eb2	; 0x7eb2 <_ZplRK15StringSumHelperRK6String>
    2912:	bc 01       	movw	r22, r24
    2914:	85 e5       	ldi	r24, 0x55	; 85
    2916:	9d e0       	ldi	r25, 0x0D	; 13
    2918:	0e 94 4b 3b 	call	0x7696	; 0x7696 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    291c:	ce 01       	movw	r24, r28
    291e:	01 96       	adiw	r24, 0x01	; 1
    2920:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <_ZN6StringD1Ev>
           Serial.print("***************************************************************");
    2924:	64 e2       	ldi	r22, 0x24	; 36
    2926:	78 e0       	ldi	r23, 0x08	; 8
    2928:	85 e5       	ldi	r24, 0x55	; 85
    292a:	9d e0       	ldi	r25, 0x0D	; 13
    292c:	0e 94 30 3b 	call	0x7660	; 0x7660 <_ZN5Print5printEPKc>
           Serial.println("Riconoscimento Tessera .............");
    2930:	63 e7       	ldi	r22, 0x73	; 115
    2932:	78 e0       	ldi	r23, 0x08	; 8
    2934:	85 e5       	ldi	r24, 0x55	; 85
    2936:	9d e0       	ldi	r25, 0x0D	; 13
    2938:	0e 94 5b 3b 	call	0x76b6	; 0x76b6 <_ZN5Print7printlnEPKc>
                     
           RaccoltaDati[0] = ATe;
    293c:	be 01       	movw	r22, r28
    293e:	67 5e       	subi	r22, 0xE7	; 231
    2940:	7f 4f       	sbci	r23, 0xFF	; 255
    2942:	83 e7       	ldi	r24, 0x73	; 115
    2944:	9b e0       	ldi	r25, 0x0B	; 11
    2946:	0e 94 58 3e 	call	0x7cb0	; 0x7cb0 <_ZN6StringaSERKS_>
           
           lcd.backlight();
    294a:	86 ec       	ldi	r24, 0xC6	; 198
    294c:	9b e0       	ldi	r25, 0x0B	; 11
    294e:	0e 94 a2 2a 	call	0x5544	; 0x5544 <_ZN3LCD9backlightEv>
           lcd.display();          
    2952:	86 ec       	ldi	r24, 0xC6	; 198
    2954:	9b e0       	ldi	r25, 0x0B	; 11
    2956:	0e 94 08 2b 	call	0x5610	; 0x5610 <_ZN3LCD7displayEv>
    295a:	8f e3       	ldi	r24, 0x3F	; 63
    295c:	9c e9       	ldi	r25, 0x9C	; 156
    295e:	01 97       	sbiw	r24, 0x01	; 1
    2960:	f1 f7       	brne	.-4      	; 0x295e <loop+0x8b8>
    2962:	00 c0       	rjmp	.+0      	; 0x2964 <loop+0x8be>
    2964:	00 00       	nop
           _delay_ms(10);
            
           righeDisplay[1] = " * AUTENTICAZIONE *";
    2966:	6d e2       	ldi	r22, 0x2D	; 45
    2968:	77 e0       	ldi	r23, 0x07	; 7
    296a:	83 e4       	ldi	r24, 0x43	; 67
    296c:	9b e0       	ldi	r25, 0x0B	; 11
    296e:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <_ZN6StringaSEPKc>
           righeDisplay[2] = "";
    2972:	63 ec       	ldi	r22, 0xC3	; 195
    2974:	71 e0       	ldi	r23, 0x01	; 1
    2976:	89 e4       	ldi	r24, 0x49	; 73
    2978:	9b e0       	ldi	r25, 0x0B	; 11
    297a:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <_ZN6StringaSEPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    297e:	68 e9       	ldi	r22, 0x98	; 152
    2980:	78 e0       	ldi	r23, 0x08	; 8
    2982:	ce 01       	movw	r24, r28
    2984:	01 96       	adiw	r24, 0x01	; 1
    2986:	0e 94 01 3e 	call	0x7c02	; 0x7c02 <_ZN6StringC1EPKc>
           righeDisplay[3] = "   Rfid: " + ATe;
    298a:	be 01       	movw	r22, r28
    298c:	67 5e       	subi	r22, 0xE7	; 231
    298e:	7f 4f       	sbci	r23, 0xFF	; 255
    2990:	ce 01       	movw	r24, r28
    2992:	01 96       	adiw	r24, 0x01	; 1
    2994:	0e 94 59 3f 	call	0x7eb2	; 0x7eb2 <_ZplRK15StringSumHelperRK6String>
    2998:	bc 01       	movw	r22, r24
    299a:	8f e4       	ldi	r24, 0x4F	; 79
    299c:	9b e0       	ldi	r25, 0x0B	; 11
    299e:	0e 94 58 3e 	call	0x7cb0	; 0x7cb0 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    29a2:	ce 01       	movw	r24, r28
    29a4:	01 96       	adiw	r24, 0x01	; 1
    29a6:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <_ZN6StringD1Ev>
         
           displayLCD(righeDisplay,stato_procedura,100);
    29aa:	60 91 9f 0b 	lds	r22, 0x0B9F	; 0x800b9f <stato_procedura>
    29ae:	70 91 a0 0b 	lds	r23, 0x0BA0	; 0x800ba0 <stato_procedura+0x1>
    29b2:	44 e6       	ldi	r20, 0x64	; 100
    29b4:	50 e0       	ldi	r21, 0x00	; 0
    29b6:	8d e3       	ldi	r24, 0x3D	; 61
    29b8:	9b e0       	ldi	r25, 0x0B	; 11
    29ba:	0e 94 53 05 	call	0xaa6	; 0xaa6 <_Z10displayLCDP6Stringii>
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    29be:	81 e6       	ldi	r24, 0x61	; 97
    29c0:	99 e0       	ldi	r25, 0x09	; 9
    29c2:	9a 83       	std	Y+2, r25	; 0x02
    29c4:	89 83       	std	Y+1, r24	; 0x01
    29c6:	40 91 c3 0a 	lds	r20, 0x0AC3	; 0x800ac3 <subnet+0x2>
    29ca:	50 91 c4 0a 	lds	r21, 0x0AC4	; 0x800ac4 <subnet+0x3>
    29ce:	60 91 c5 0a 	lds	r22, 0x0AC5	; 0x800ac5 <subnet+0x4>
    29d2:	70 91 c6 0a 	lds	r23, 0x0AC6	; 0x800ac6 <subnet+0x5>
    29d6:	4b 83       	std	Y+3, r20	; 0x03
    29d8:	5c 83       	std	Y+4, r21	; 0x04
    29da:	6d 83       	std	Y+5, r22	; 0x05
    29dc:	7e 83       	std	Y+6, r23	; 0x06
    29de:	98 87       	std	Y+8, r25	; 0x08
    29e0:	8f 83       	std	Y+7, r24	; 0x07
    29e2:	40 91 c9 0a 	lds	r20, 0x0AC9	; 0x800ac9 <gateway+0x2>
    29e6:	50 91 ca 0a 	lds	r21, 0x0ACA	; 0x800aca <gateway+0x3>
    29ea:	60 91 cb 0a 	lds	r22, 0x0ACB	; 0x800acb <gateway+0x4>
    29ee:	70 91 cc 0a 	lds	r23, 0x0ACC	; 0x800acc <gateway+0x5>
    29f2:	49 87       	std	Y+9, r20	; 0x09
    29f4:	5a 87       	std	Y+10, r21	; 0x0a
    29f6:	6b 87       	std	Y+11, r22	; 0x0b
    29f8:	7c 87       	std	Y+12, r23	; 0x0c
    29fa:	9e 87       	std	Y+14, r25	; 0x0e
    29fc:	8d 87       	std	Y+13, r24	; 0x0d
    29fe:	80 91 cf 0a 	lds	r24, 0x0ACF	; 0x800acf <myDns+0x2>
    2a02:	90 91 d0 0a 	lds	r25, 0x0AD0	; 0x800ad0 <myDns+0x3>
    2a06:	a0 91 d1 0a 	lds	r26, 0x0AD1	; 0x800ad1 <myDns+0x4>
    2a0a:	b0 91 d2 0a 	lds	r27, 0x0AD2	; 0x800ad2 <myDns+0x5>
    2a0e:	8f 87       	std	Y+15, r24	; 0x0f
    2a10:	98 8b       	std	Y+16, r25	; 0x10
    2a12:	a9 8b       	std	Y+17, r26	; 0x11
    2a14:	ba 8b       	std	Y+18, r27	; 0x12
           Ethernet.begin(mac, ip, myDns, gateway, subnet);
    2a16:	60 e3       	ldi	r22, 0x30	; 48
    2a18:	71 e0       	ldi	r23, 0x01	; 1
    2a1a:	ce 01       	movw	r24, r28
    2a1c:	43 96       	adiw	r24, 0x13	; 19
    2a1e:	0e 94 9d 3a 	call	0x753a	; 0x753a <_ZN9IPAddressC1EPKh>
    2a22:	ce 01       	movw	r24, r28
    2a24:	01 96       	adiw	r24, 0x01	; 1
    2a26:	7c 01       	movw	r14, r24
    2a28:	8e 01       	movw	r16, r28
    2a2a:	09 5f       	subi	r16, 0xF9	; 249
    2a2c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a2e:	9e 01       	movw	r18, r28
    2a30:	23 5f       	subi	r18, 0xF3	; 243
    2a32:	3f 4f       	sbci	r19, 0xFF	; 255
    2a34:	ae 01       	movw	r20, r28
    2a36:	4d 5e       	subi	r20, 0xED	; 237
    2a38:	5f 4f       	sbci	r21, 0xFF	; 255
    2a3a:	6a e2       	ldi	r22, 0x2A	; 42
    2a3c:	71 e0       	ldi	r23, 0x01	; 1
    2a3e:	8b e4       	ldi	r24, 0x4B	; 75
    2a40:	9c e0       	ldi	r25, 0x0C	; 12
    2a42:	0e 94 2f 21 	call	0x425e	; 0x425e <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_>
    2a46:	9f ef       	ldi	r25, 0xFF	; 255
    2a48:	23 ed       	ldi	r18, 0xD3	; 211
    2a4a:	80 e3       	ldi	r24, 0x30	; 48
    2a4c:	91 50       	subi	r25, 0x01	; 1
    2a4e:	20 40       	sbci	r18, 0x00	; 0
    2a50:	80 40       	sbci	r24, 0x00	; 0
    2a52:	e1 f7       	brne	.-8      	; 0x2a4c <loop+0x9a6>
    2a54:	00 c0       	rjmp	.+0      	; 0x2a56 <loop+0x9b0>
    2a56:	00 00       	nop
    2a58:	57 cc       	rjmp	.-1874   	; 0x2308 <loop+0x262>
      Serial.println("TIPO CARBURANTE: " + mezzo.Carb);    
      Serial.println("TARGA: " + mezzo.TARGA);              

      Carburante = mezzo.Carb;                 
      if ((mezzo.Carb == "B") || (mezzo.Carb == "D")) {
        RaccoltaDati[1] = mezzo.TARGA;
    2a5a:	6e ee       	ldi	r22, 0xEE	; 238
    2a5c:	7b e0       	ldi	r23, 0x0B	; 11
    2a5e:	89 e7       	ldi	r24, 0x79	; 121
    2a60:	9b e0       	ldi	r25, 0x0B	; 11
    2a62:	0e 94 58 3e 	call	0x7cb0	; 0x7cb0 <_ZN6StringaSERKS_>
        RaccoltaDati[2] = mezzo.Carb;
    2a66:	68 ee       	ldi	r22, 0xE8	; 232
    2a68:	7b e0       	ldi	r23, 0x0B	; 11
    2a6a:	8f e7       	ldi	r24, 0x7F	; 127
    2a6c:	9b e0       	ldi	r25, 0x0B	; 11
    2a6e:	0e 94 58 3e 	call	0x7cb0	; 0x7cb0 <_ZN6StringaSERKS_>
        avanzaStato(TselDistributore); 
    2a72:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <TselDistributore>
    2a76:	70 91 23 01 	lds	r23, 0x0123	; 0x800123 <TselDistributore+0x1>
    2a7a:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <TselDistributore+0x2>
    2a7e:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <TselDistributore+0x3>
    2a82:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <_Z11avanzaStatom>
    2a86:	03 cd       	rjmp	.-1530   	; 0x248e <loop+0x3e8>

      /* CONTATTO PISTOLA DIESEL*/
      
      if ((PINA & _BV(PA1)) && (Carburante == "D"))
      {       
        RaccoltaDati[3] = String(lt);
    2a88:	22 e0       	ldi	r18, 0x02	; 2
    2a8a:	b7 01       	movw	r22, r14
    2a8c:	a6 01       	movw	r20, r12
    2a8e:	ce 01       	movw	r24, r28
    2a90:	01 96       	adiw	r24, 0x01	; 1
    2a92:	0e 94 eb 3e 	call	0x7dd6	; 0x7dd6 <_ZN6StringC1Edh>
    2a96:	be 01       	movw	r22, r28
    2a98:	6f 5f       	subi	r22, 0xFF	; 255
    2a9a:	7f 4f       	sbci	r23, 0xFF	; 255
    2a9c:	85 e8       	ldi	r24, 0x85	; 133
    2a9e:	9b e0       	ldi	r25, 0x0B	; 11
    2aa0:	0e 94 75 3e 	call	0x7cea	; 0x7cea <_ZN6StringaSEOS_>
    2aa4:	ce 01       	movw	r24, r28
    2aa6:	01 96       	adiw	r24, 0x01	; 1
    2aa8:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <_ZN6StringD1Ev>
        
        StatoAttuale = "STOP EROGAZIONE";
    2aac:	62 ea       	ldi	r22, 0xA2	; 162
    2aae:	78 e0       	ldi	r23, 0x08	; 8
    2ab0:	89 ea       	ldi	r24, 0xA9	; 169
    2ab2:	9b e0       	ldi	r25, 0x0B	; 11
    2ab4:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <_ZN6StringaSEPKc>
        Rele_Abilitazione2(1,7); //  apri relè
    2ab8:	67 e0       	ldi	r22, 0x07	; 7
    2aba:	70 e0       	ldi	r23, 0x00	; 0
    2abc:	81 e0       	ldi	r24, 0x01	; 1
    2abe:	90 e0       	ldi	r25, 0x00	; 0
    2ac0:	0e 94 db 07 	call	0xfb6	; 0xfb6 <_Z18Rele_Abilitazione2ii>
        Rele_Abilitazione1(1,7); //  apri relè  
    2ac4:	67 e0       	ldi	r22, 0x07	; 7
    2ac6:	70 e0       	ldi	r23, 0x00	; 0
    2ac8:	81 e0       	ldi	r24, 0x01	; 1
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	0e 94 a0 07 	call	0xf40	; 0xf40 <_Z18Rele_Abilitazione1ii>
        TOGGLE_BIT(PORTA,1);      
    2ad0:	92 b1       	in	r25, 0x02	; 2
    2ad2:	82 e0       	ldi	r24, 0x02	; 2
    2ad4:	89 27       	eor	r24, r25
    2ad6:	82 b9       	out	0x02, r24	; 2
        avanzaStato(10);
    2ad8:	6a e0       	ldi	r22, 0x0A	; 10
    2ada:	70 e0       	ldi	r23, 0x00	; 0
    2adc:	80 e0       	ldi	r24, 0x00	; 0
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <_Z11avanzaStatom>
    2ae4:	b6 cd       	rjmp	.-1172   	; 0x2652 <loop+0x5ac>
      
      /* CONTATTO PISTOLA BENZINA*/
      
      if  ((PINB & _BV(PB1)) && (Carburante == "B"))
      {
        RaccoltaDati[3] = String(lt);
    2ae6:	22 e0       	ldi	r18, 0x02	; 2
    2ae8:	b7 01       	movw	r22, r14
    2aea:	a6 01       	movw	r20, r12
    2aec:	ce 01       	movw	r24, r28
    2aee:	01 96       	adiw	r24, 0x01	; 1
    2af0:	0e 94 eb 3e 	call	0x7dd6	; 0x7dd6 <_ZN6StringC1Edh>
    2af4:	be 01       	movw	r22, r28
    2af6:	6f 5f       	subi	r22, 0xFF	; 255
    2af8:	7f 4f       	sbci	r23, 0xFF	; 255
    2afa:	85 e8       	ldi	r24, 0x85	; 133
    2afc:	9b e0       	ldi	r25, 0x0B	; 11
    2afe:	0e 94 75 3e 	call	0x7cea	; 0x7cea <_ZN6StringaSEOS_>
    2b02:	ce 01       	movw	r24, r28
    2b04:	01 96       	adiw	r24, 0x01	; 1
    2b06:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <_ZN6StringD1Ev>
        
        StatoAttuale = "STOP EROGAZIONE";
    2b0a:	62 ea       	ldi	r22, 0xA2	; 162
    2b0c:	78 e0       	ldi	r23, 0x08	; 8
    2b0e:	89 ea       	ldi	r24, 0xA9	; 169
    2b10:	9b e0       	ldi	r25, 0x0B	; 11
    2b12:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <_ZN6StringaSEPKc>
        Rele_Abilitazione2(1,7); //  apri relè
    2b16:	67 e0       	ldi	r22, 0x07	; 7
    2b18:	70 e0       	ldi	r23, 0x00	; 0
    2b1a:	81 e0       	ldi	r24, 0x01	; 1
    2b1c:	90 e0       	ldi	r25, 0x00	; 0
    2b1e:	0e 94 db 07 	call	0xfb6	; 0xfb6 <_Z18Rele_Abilitazione2ii>
        Rele_Abilitazione1(1,7); //  apri relè        
    2b22:	67 e0       	ldi	r22, 0x07	; 7
    2b24:	70 e0       	ldi	r23, 0x00	; 0
    2b26:	81 e0       	ldi	r24, 0x01	; 1
    2b28:	90 e0       	ldi	r25, 0x00	; 0
    2b2a:	0e 94 a0 07 	call	0xf40	; 0xf40 <_Z18Rele_Abilitazione1ii>
        avanzaStato(TmaxInviodati);
    2b2e:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <TmaxInviodati>
    2b32:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <TmaxInviodati+0x1>
    2b36:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <TmaxInviodati+0x2>
    2b3a:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <TmaxInviodati+0x3>
    2b3e:	e1 cc       	rjmp	.-1598   	; 0x2502 <loop+0x45c>

  nowTimer = DS3231M.now();
  secs = nowTimer.secondstime();
  if ((UltimoPassaggioStato+Timer-secs) <= 1) Azzera();

}
    2b40:	6e 96       	adiw	r28, 0x1e	; 30
    2b42:	0f b6       	in	r0, 0x3f	; 63
    2b44:	f8 94       	cli
    2b46:	de bf       	out	0x3e, r29	; 62
    2b48:	0f be       	out	0x3f, r0	; 63
    2b4a:	cd bf       	out	0x3d, r28	; 61
    2b4c:	df 91       	pop	r29
    2b4e:	cf 91       	pop	r28
    2b50:	1f 91       	pop	r17
    2b52:	0f 91       	pop	r16
    2b54:	ff 90       	pop	r15
    2b56:	ef 90       	pop	r14
    2b58:	df 90       	pop	r13
    2b5a:	cf 90       	pop	r12
    2b5c:	08 95       	ret

00002b5e <_ZN8SPIClass16beginTransactionE11SPISettings>:
    #endif
    return false;
  }

  return true;
}
    2b5e:	20 91 8f 0c 	lds	r18, 0x0C8F	; 0x800c8f <_ZN8SPIClass13interruptModeE>
    2b62:	22 23       	and	r18, r18
    2b64:	99 f0       	breq	.+38     	; 0x2b8c <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    2b66:	4f b7       	in	r20, 0x3f	; 63
    2b68:	f8 94       	cli
    2b6a:	20 91 8f 0c 	lds	r18, 0x0C8F	; 0x800c8f <_ZN8SPIClass13interruptModeE>
    2b6e:	21 30       	cpi	r18, 0x01	; 1
    2b70:	59 f4       	brne	.+22     	; 0x2b88 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
    2b72:	2d b3       	in	r18, 0x1d	; 29
    2b74:	20 93 8d 0c 	sts	0x0C8D, r18	; 0x800c8d <_ZN8SPIClass13interruptSaveE>
    2b78:	3d b3       	in	r19, 0x1d	; 29
    2b7a:	20 91 8e 0c 	lds	r18, 0x0C8E	; 0x800c8e <_ZN8SPIClass13interruptMaskE>
    2b7e:	20 95       	com	r18
    2b80:	23 23       	and	r18, r19
    2b82:	2d bb       	out	0x1d, r18	; 29
    2b84:	4f bf       	out	0x3f, r20	; 63
    2b86:	02 c0       	rjmp	.+4      	; 0x2b8c <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    2b88:	40 93 8d 0c 	sts	0x0C8D, r20	; 0x800c8d <_ZN8SPIClass13interruptSaveE>
    2b8c:	8c bd       	out	0x2c, r24	; 44
    2b8e:	9d bd       	out	0x2d, r25	; 45
    2b90:	08 95       	ret

00002b92 <_ZN8SPIClass14endTransactionEv>:
    2b92:	80 91 8f 0c 	lds	r24, 0x0C8F	; 0x800c8f <_ZN8SPIClass13interruptModeE>
    2b96:	88 23       	and	r24, r24
    2b98:	61 f0       	breq	.+24     	; 0x2bb2 <_ZN8SPIClass14endTransactionEv+0x20>
    2b9a:	9f b7       	in	r25, 0x3f	; 63
    2b9c:	f8 94       	cli
    2b9e:	20 91 8f 0c 	lds	r18, 0x0C8F	; 0x800c8f <_ZN8SPIClass13interruptModeE>
    2ba2:	80 91 8d 0c 	lds	r24, 0x0C8D	; 0x800c8d <_ZN8SPIClass13interruptSaveE>
    2ba6:	21 30       	cpi	r18, 0x01	; 1
    2ba8:	19 f4       	brne	.+6      	; 0x2bb0 <_ZN8SPIClass14endTransactionEv+0x1e>
    2baa:	8d bb       	out	0x1d, r24	; 29
    2bac:	9f bf       	out	0x3f, r25	; 63
    2bae:	08 95       	ret
    2bb0:	8f bf       	out	0x3f, r24	; 63
    2bb2:	08 95       	ret

00002bb4 <_ZN14Adafruit_PN532C1Ehh>:
    2bb4:	cf 93       	push	r28
    2bb6:	df 93       	push	r29
    2bb8:	ec 01       	movw	r28, r24
    2bba:	86 2f       	mov	r24, r22
    2bbc:	18 82       	st	Y, r1
    2bbe:	19 82       	std	Y+1, r1	; 0x01
    2bc0:	1a 82       	std	Y+2, r1	; 0x02
    2bc2:	1b 82       	std	Y+3, r1	; 0x03
    2bc4:	6c 83       	std	Y+4, r22	; 0x04
    2bc6:	4d 83       	std	Y+5, r20	; 0x05
    2bc8:	1d 8a       	std	Y+21, r1	; 0x15
    2bca:	1e 8a       	std	Y+22, r1	; 0x16
    2bcc:	60 e0       	ldi	r22, 0x00	; 0
    2bce:	0e 94 07 3d 	call	0x7a0e	; 0x7a0e <pinMode>
    2bd2:	61 e0       	ldi	r22, 0x01	; 1
    2bd4:	8d 81       	ldd	r24, Y+5	; 0x05
    2bd6:	df 91       	pop	r29
    2bd8:	cf 91       	pop	r28
    2bda:	0c 94 07 3d 	jmp	0x7a0e	; 0x7a0e <pinMode>

00002bde <_ZN14Adafruit_PN53210GetHexCodeEPKhm>:
    2bde:	4f 92       	push	r4
    2be0:	5f 92       	push	r5
    2be2:	6f 92       	push	r6
    2be4:	7f 92       	push	r7
    2be6:	8f 92       	push	r8
    2be8:	9f 92       	push	r9
    2bea:	af 92       	push	r10
    2bec:	bf 92       	push	r11
    2bee:	ef 92       	push	r14
    2bf0:	ff 92       	push	r15
    2bf2:	0f 93       	push	r16
    2bf4:	1f 93       	push	r17
    2bf6:	cf 93       	push	r28
    2bf8:	df 93       	push	r29
    2bfa:	cd b7       	in	r28, 0x3d	; 61
    2bfc:	de b7       	in	r29, 0x3e	; 62
    2bfe:	2c 97       	sbiw	r28, 0x0c	; 12
    2c00:	0f b6       	in	r0, 0x3f	; 63
    2c02:	f8 94       	cli
    2c04:	de bf       	out	0x3e, r29	; 62
    2c06:	0f be       	out	0x3f, r0	; 63
    2c08:	cd bf       	out	0x3d, r28	; 61
    2c0a:	7c 01       	movw	r14, r24
    2c0c:	5a 01       	movw	r10, r20
    2c0e:	28 01       	movw	r4, r16
    2c10:	39 01       	movw	r6, r18
    2c12:	63 ec       	ldi	r22, 0xC3	; 195
    2c14:	71 e0       	ldi	r23, 0x01	; 1
    2c16:	0e 94 01 3e 	call	0x7c02	; 0x7c02 <_ZN6StringC1EPKc>
    2c1a:	85 01       	movw	r16, r10
    2c1c:	81 2c       	mov	r8, r1
    2c1e:	91 2c       	mov	r9, r1
    2c20:	54 01       	movw	r10, r8
    2c22:	84 14       	cp	r8, r4
    2c24:	95 04       	cpc	r9, r5
    2c26:	a6 04       	cpc	r10, r6
    2c28:	b7 04       	cpc	r11, r7
    2c2a:	09 f4       	brne	.+2      	; 0x2c2e <_ZN14Adafruit_PN53210GetHexCodeEPKhm+0x50>
    2c2c:	46 c0       	rjmp	.+140    	; 0x2cba <_ZN14Adafruit_PN53210GetHexCodeEPKhm+0xdc>
    2c2e:	f8 01       	movw	r30, r16
    2c30:	61 91       	ld	r22, Z+
    2c32:	8f 01       	movw	r16, r30
    2c34:	40 e1       	ldi	r20, 0x10	; 16
    2c36:	ce 01       	movw	r24, r28
    2c38:	60 31       	cpi	r22, 0x10	; 16
    2c3a:	f0 f4       	brcc	.+60     	; 0x2c78 <_ZN14Adafruit_PN53210GetHexCodeEPKhm+0x9a>
    2c3c:	01 96       	adiw	r24, 0x01	; 1
    2c3e:	0e 94 95 3e 	call	0x7d2a	; 0x7d2a <_ZN6StringC1Ehh>
    2c42:	b7 01       	movw	r22, r14
    2c44:	ce 01       	movw	r24, r28
    2c46:	07 96       	adiw	r24, 0x07	; 7
    2c48:	0e 94 6d 3e 	call	0x7cda	; 0x7cda <_ZN6StringC1ERKS_>
    2c4c:	62 e4       	ldi	r22, 0x42	; 66
    2c4e:	76 e0       	ldi	r23, 0x06	; 6
    2c50:	ce 01       	movw	r24, r28
    2c52:	07 96       	adiw	r24, 0x07	; 7
    2c54:	0e 94 6a 3f 	call	0x7ed4	; 0x7ed4 <_ZplRK15StringSumHelperPKc>
    2c58:	be 01       	movw	r22, r28
    2c5a:	6f 5f       	subi	r22, 0xFF	; 255
    2c5c:	7f 4f       	sbci	r23, 0xFF	; 255
    2c5e:	0e 94 59 3f 	call	0x7eb2	; 0x7eb2 <_ZplRK15StringSumHelperRK6String>
    2c62:	bc 01       	movw	r22, r24
    2c64:	c7 01       	movw	r24, r14
    2c66:	0e 94 58 3e 	call	0x7cb0	; 0x7cb0 <_ZN6StringaSERKS_>
    2c6a:	ce 01       	movw	r24, r28
    2c6c:	07 96       	adiw	r24, 0x07	; 7
    2c6e:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <_ZN6StringD1Ev>
    2c72:	ce 01       	movw	r24, r28
    2c74:	01 96       	adiw	r24, 0x01	; 1
    2c76:	19 c0       	rjmp	.+50     	; 0x2caa <_ZN14Adafruit_PN53210GetHexCodeEPKhm+0xcc>
    2c78:	07 96       	adiw	r24, 0x07	; 7
    2c7a:	0e 94 95 3e 	call	0x7d2a	; 0x7d2a <_ZN6StringC1Ehh>
    2c7e:	b7 01       	movw	r22, r14
    2c80:	ce 01       	movw	r24, r28
    2c82:	01 96       	adiw	r24, 0x01	; 1
    2c84:	0e 94 6d 3e 	call	0x7cda	; 0x7cda <_ZN6StringC1ERKS_>
    2c88:	be 01       	movw	r22, r28
    2c8a:	69 5f       	subi	r22, 0xF9	; 249
    2c8c:	7f 4f       	sbci	r23, 0xFF	; 255
    2c8e:	ce 01       	movw	r24, r28
    2c90:	01 96       	adiw	r24, 0x01	; 1
    2c92:	0e 94 59 3f 	call	0x7eb2	; 0x7eb2 <_ZplRK15StringSumHelperRK6String>
    2c96:	bc 01       	movw	r22, r24
    2c98:	c7 01       	movw	r24, r14
    2c9a:	0e 94 58 3e 	call	0x7cb0	; 0x7cb0 <_ZN6StringaSERKS_>
    2c9e:	ce 01       	movw	r24, r28
    2ca0:	01 96       	adiw	r24, 0x01	; 1
    2ca2:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <_ZN6StringD1Ev>
    2ca6:	ce 01       	movw	r24, r28
    2ca8:	07 96       	adiw	r24, 0x07	; 7
    2caa:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <_ZN6StringD1Ev>
    2cae:	ff ef       	ldi	r31, 0xFF	; 255
    2cb0:	8f 1a       	sub	r8, r31
    2cb2:	9f 0a       	sbc	r9, r31
    2cb4:	af 0a       	sbc	r10, r31
    2cb6:	bf 0a       	sbc	r11, r31
    2cb8:	b4 cf       	rjmp	.-152    	; 0x2c22 <_ZN14Adafruit_PN53210GetHexCodeEPKhm+0x44>
    2cba:	85 e5       	ldi	r24, 0x55	; 85
    2cbc:	9d e0       	ldi	r25, 0x0D	; 13
    2cbe:	0e 94 38 3b 	call	0x7670	; 0x7670 <_ZN5Print7printlnEv>
    2cc2:	c7 01       	movw	r24, r14
    2cc4:	2c 96       	adiw	r28, 0x0c	; 12
    2cc6:	0f b6       	in	r0, 0x3f	; 63
    2cc8:	f8 94       	cli
    2cca:	de bf       	out	0x3e, r29	; 62
    2ccc:	0f be       	out	0x3f, r0	; 63
    2cce:	cd bf       	out	0x3d, r28	; 61
    2cd0:	df 91       	pop	r29
    2cd2:	cf 91       	pop	r28
    2cd4:	1f 91       	pop	r17
    2cd6:	0f 91       	pop	r16
    2cd8:	ff 90       	pop	r15
    2cda:	ef 90       	pop	r14
    2cdc:	bf 90       	pop	r11
    2cde:	af 90       	pop	r10
    2ce0:	9f 90       	pop	r9
    2ce2:	8f 90       	pop	r8
    2ce4:	7f 90       	pop	r7
    2ce6:	6f 90       	pop	r6
    2ce8:	5f 90       	pop	r5
    2cea:	4f 90       	pop	r4
    2cec:	08 95       	ret

00002cee <_ZN14Adafruit_PN5329spi_writeEh>:
    2cee:	ef 92       	push	r14
    2cf0:	ff 92       	push	r15
    2cf2:	0f 93       	push	r16
    2cf4:	1f 93       	push	r17
    2cf6:	cf 93       	push	r28
    2cf8:	df 93       	push	r29
    2cfa:	fc 01       	movw	r30, r24
    2cfc:	26 89       	ldd	r18, Z+22	; 0x16
    2cfe:	22 23       	and	r18, r18
    2d00:	39 f0       	breq	.+14     	; 0x2d10 <_ZN14Adafruit_PN5329spi_writeEh+0x22>
    2d02:	6e bd       	out	0x2e, r22	; 46
    2d04:	00 00       	nop
    2d06:	0d b4       	in	r0, 0x2d	; 45
    2d08:	07 fe       	sbrs	r0, 7
    2d0a:	fd cf       	rjmp	.-6      	; 0x2d06 <_ZN14Adafruit_PN5329spi_writeEh+0x18>
    2d0c:	8e b5       	in	r24, 0x2e	; 46
    2d0e:	27 c0       	rjmp	.+78     	; 0x2d5e <_ZN14Adafruit_PN5329spi_writeEh+0x70>
    2d10:	06 2f       	mov	r16, r22
    2d12:	ec 01       	movw	r28, r24
    2d14:	61 e0       	ldi	r22, 0x01	; 1
    2d16:	81 81       	ldd	r24, Z+1	; 0x01
    2d18:	0e 94 43 3d 	call	0x7a86	; 0x7a86 <digitalWrite>
    2d1c:	e1 2c       	mov	r14, r1
    2d1e:	f1 2c       	mov	r15, r1
    2d20:	10 e0       	ldi	r17, 0x00	; 0
    2d22:	60 e0       	ldi	r22, 0x00	; 0
    2d24:	89 81       	ldd	r24, Y+1	; 0x01
    2d26:	0e 94 43 3d 	call	0x7a86	; 0x7a86 <digitalWrite>
    2d2a:	c8 01       	movw	r24, r16
    2d2c:	0e 2c       	mov	r0, r14
    2d2e:	02 c0       	rjmp	.+4      	; 0x2d34 <_ZN14Adafruit_PN5329spi_writeEh+0x46>
    2d30:	95 95       	asr	r25
    2d32:	87 95       	ror	r24
    2d34:	0a 94       	dec	r0
    2d36:	e2 f7       	brpl	.-8      	; 0x2d30 <_ZN14Adafruit_PN5329spi_writeEh+0x42>
    2d38:	80 ff       	sbrs	r24, 0
    2d3a:	02 c0       	rjmp	.+4      	; 0x2d40 <_ZN14Adafruit_PN5329spi_writeEh+0x52>
    2d3c:	61 e0       	ldi	r22, 0x01	; 1
    2d3e:	01 c0       	rjmp	.+2      	; 0x2d42 <_ZN14Adafruit_PN5329spi_writeEh+0x54>
    2d40:	60 e0       	ldi	r22, 0x00	; 0
    2d42:	8a 81       	ldd	r24, Y+2	; 0x02
    2d44:	0e 94 43 3d 	call	0x7a86	; 0x7a86 <digitalWrite>
    2d48:	61 e0       	ldi	r22, 0x01	; 1
    2d4a:	89 81       	ldd	r24, Y+1	; 0x01
    2d4c:	0e 94 43 3d 	call	0x7a86	; 0x7a86 <digitalWrite>
    2d50:	ff ef       	ldi	r31, 0xFF	; 255
    2d52:	ef 1a       	sub	r14, r31
    2d54:	ff 0a       	sbc	r15, r31
    2d56:	88 e0       	ldi	r24, 0x08	; 8
    2d58:	e8 16       	cp	r14, r24
    2d5a:	f1 04       	cpc	r15, r1
    2d5c:	11 f7       	brne	.-60     	; 0x2d22 <_ZN14Adafruit_PN5329spi_writeEh+0x34>
    2d5e:	df 91       	pop	r29
    2d60:	cf 91       	pop	r28
    2d62:	1f 91       	pop	r17
    2d64:	0f 91       	pop	r16
    2d66:	ff 90       	pop	r15
    2d68:	ef 90       	pop	r14
    2d6a:	08 95       	ret

00002d6c <_ZN14Adafruit_PN5328spi_readEv>:
    2d6c:	cf 92       	push	r12
    2d6e:	df 92       	push	r13
    2d70:	ef 92       	push	r14
    2d72:	ff 92       	push	r15
    2d74:	1f 93       	push	r17
    2d76:	cf 93       	push	r28
    2d78:	df 93       	push	r29
    2d7a:	fc 01       	movw	r30, r24
    2d7c:	26 89       	ldd	r18, Z+22	; 0x16
    2d7e:	22 23       	and	r18, r18
    2d80:	39 f0       	breq	.+14     	; 0x2d90 <_ZN14Adafruit_PN5328spi_readEv+0x24>
    2d82:	1e bc       	out	0x2e, r1	; 46
    2d84:	00 00       	nop
    2d86:	0d b4       	in	r0, 0x2d	; 45
    2d88:	07 fe       	sbrs	r0, 7
    2d8a:	fd cf       	rjmp	.-6      	; 0x2d86 <_ZN14Adafruit_PN5328spi_readEv+0x1a>
    2d8c:	1e b5       	in	r17, 0x2e	; 46
    2d8e:	26 c0       	rjmp	.+76     	; 0x2ddc <_ZN14Adafruit_PN5328spi_readEv+0x70>
    2d90:	ec 01       	movw	r28, r24
    2d92:	61 e0       	ldi	r22, 0x01	; 1
    2d94:	81 81       	ldd	r24, Z+1	; 0x01
    2d96:	0e 94 43 3d 	call	0x7a86	; 0x7a86 <digitalWrite>
    2d9a:	e1 2c       	mov	r14, r1
    2d9c:	f1 2c       	mov	r15, r1
    2d9e:	10 e0       	ldi	r17, 0x00	; 0
    2da0:	cc 24       	eor	r12, r12
    2da2:	c3 94       	inc	r12
    2da4:	d1 2c       	mov	r13, r1
    2da6:	8b 81       	ldd	r24, Y+3	; 0x03
    2da8:	0e 94 71 3d 	call	0x7ae2	; 0x7ae2 <digitalRead>
    2dac:	89 2b       	or	r24, r25
    2dae:	39 f0       	breq	.+14     	; 0x2dbe <_ZN14Adafruit_PN5328spi_readEv+0x52>
    2db0:	c6 01       	movw	r24, r12
    2db2:	0e 2c       	mov	r0, r14
    2db4:	01 c0       	rjmp	.+2      	; 0x2db8 <_ZN14Adafruit_PN5328spi_readEv+0x4c>
    2db6:	88 0f       	add	r24, r24
    2db8:	0a 94       	dec	r0
    2dba:	ea f7       	brpl	.-6      	; 0x2db6 <_ZN14Adafruit_PN5328spi_readEv+0x4a>
    2dbc:	18 2b       	or	r17, r24
    2dbe:	60 e0       	ldi	r22, 0x00	; 0
    2dc0:	89 81       	ldd	r24, Y+1	; 0x01
    2dc2:	0e 94 43 3d 	call	0x7a86	; 0x7a86 <digitalWrite>
    2dc6:	61 e0       	ldi	r22, 0x01	; 1
    2dc8:	89 81       	ldd	r24, Y+1	; 0x01
    2dca:	0e 94 43 3d 	call	0x7a86	; 0x7a86 <digitalWrite>
    2dce:	ff ef       	ldi	r31, 0xFF	; 255
    2dd0:	ef 1a       	sub	r14, r31
    2dd2:	ff 0a       	sbc	r15, r31
    2dd4:	88 e0       	ldi	r24, 0x08	; 8
    2dd6:	e8 16       	cp	r14, r24
    2dd8:	f1 04       	cpc	r15, r1
    2dda:	29 f7       	brne	.-54     	; 0x2da6 <_ZN14Adafruit_PN5328spi_readEv+0x3a>
    2ddc:	81 2f       	mov	r24, r17
    2dde:	df 91       	pop	r29
    2de0:	cf 91       	pop	r28
    2de2:	1f 91       	pop	r17
    2de4:	ff 90       	pop	r15
    2de6:	ef 90       	pop	r14
    2de8:	df 90       	pop	r13
    2dea:	cf 90       	pop	r12
    2dec:	08 95       	ret

00002dee <_ZN14Adafruit_PN5327isreadyEv>:
    2dee:	1f 93       	push	r17
    2df0:	cf 93       	push	r28
    2df2:	df 93       	push	r29
    2df4:	ec 01       	movw	r28, r24
    2df6:	8d 89       	ldd	r24, Y+21	; 0x15
    2df8:	88 23       	and	r24, r24
    2dfa:	09 f1       	breq	.+66     	; 0x2e3e <_ZN14Adafruit_PN5327isreadyEv+0x50>
    2dfc:	8e 89       	ldd	r24, Y+22	; 0x16
    2dfe:	88 23       	and	r24, r24
    2e00:	19 f0       	breq	.+6      	; 0x2e08 <_ZN14Adafruit_PN5327isreadyEv+0x1a>
    2e02:	81 e7       	ldi	r24, 0x71	; 113
    2e04:	90 e0       	ldi	r25, 0x00	; 0
    2e06:	ab de       	rcall	.-682    	; 0x2b5e <_ZN8SPIClass16beginTransactionE11SPISettings>
    2e08:	60 e0       	ldi	r22, 0x00	; 0
    2e0a:	88 81       	ld	r24, Y
    2e0c:	0e 94 43 3d 	call	0x7a86	; 0x7a86 <digitalWrite>
    2e10:	62 e0       	ldi	r22, 0x02	; 2
    2e12:	70 e0       	ldi	r23, 0x00	; 0
    2e14:	80 e0       	ldi	r24, 0x00	; 0
    2e16:	90 e0       	ldi	r25, 0x00	; 0
    2e18:	0e 94 5f 3c 	call	0x78be	; 0x78be <delay>
    2e1c:	62 e0       	ldi	r22, 0x02	; 2
    2e1e:	ce 01       	movw	r24, r28
    2e20:	66 df       	rcall	.-308    	; 0x2cee <_ZN14Adafruit_PN5329spi_writeEh>
    2e22:	ce 01       	movw	r24, r28
    2e24:	a3 df       	rcall	.-186    	; 0x2d6c <_ZN14Adafruit_PN5328spi_readEv>
    2e26:	18 2f       	mov	r17, r24
    2e28:	61 e0       	ldi	r22, 0x01	; 1
    2e2a:	88 81       	ld	r24, Y
    2e2c:	0e 94 43 3d 	call	0x7a86	; 0x7a86 <digitalWrite>
    2e30:	8e 89       	ldd	r24, Y+22	; 0x16
    2e32:	81 11       	cpse	r24, r1
    2e34:	ae de       	rcall	.-676    	; 0x2b92 <_ZN8SPIClass14endTransactionEv>
    2e36:	91 e0       	ldi	r25, 0x01	; 1
    2e38:	11 30       	cpi	r17, 0x01	; 1
    2e3a:	31 f4       	brne	.+12     	; 0x2e48 <_ZN14Adafruit_PN5327isreadyEv+0x5a>
    2e3c:	06 c0       	rjmp	.+12     	; 0x2e4a <_ZN14Adafruit_PN5327isreadyEv+0x5c>
    2e3e:	8c 81       	ldd	r24, Y+4	; 0x04
    2e40:	0e 94 71 3d 	call	0x7ae2	; 0x7ae2 <digitalRead>
    2e44:	91 e0       	ldi	r25, 0x01	; 1
    2e46:	81 11       	cpse	r24, r1
    2e48:	90 e0       	ldi	r25, 0x00	; 0
    2e4a:	89 2f       	mov	r24, r25
    2e4c:	df 91       	pop	r29
    2e4e:	cf 91       	pop	r28
    2e50:	1f 91       	pop	r17
    2e52:	08 95       	ret

00002e54 <_ZN14Adafruit_PN5329waitreadyEj>:
    2e54:	cf 92       	push	r12
    2e56:	df 92       	push	r13
    2e58:	ef 92       	push	r14
    2e5a:	ff 92       	push	r15
    2e5c:	1f 93       	push	r17
    2e5e:	cf 93       	push	r28
    2e60:	df 93       	push	r29
    2e62:	6c 01       	movw	r12, r24
    2e64:	7b 01       	movw	r14, r22
    2e66:	c0 e0       	ldi	r28, 0x00	; 0
    2e68:	d0 e0       	ldi	r29, 0x00	; 0
    2e6a:	c6 01       	movw	r24, r12
    2e6c:	c0 df       	rcall	.-128    	; 0x2dee <_ZN14Adafruit_PN5327isreadyEv>
    2e6e:	18 2f       	mov	r17, r24
    2e70:	81 11       	cpse	r24, r1
    2e72:	15 c0       	rjmp	.+42     	; 0x2e9e <_ZN14Adafruit_PN5329waitreadyEj+0x4a>
    2e74:	e1 14       	cp	r14, r1
    2e76:	f1 04       	cpc	r15, r1
    2e78:	59 f0       	breq	.+22     	; 0x2e90 <_ZN14Adafruit_PN5329waitreadyEj+0x3c>
    2e7a:	2a 96       	adiw	r28, 0x0a	; 10
    2e7c:	ec 16       	cp	r14, r28
    2e7e:	fd 06       	cpc	r15, r29
    2e80:	38 f4       	brcc	.+14     	; 0x2e90 <_ZN14Adafruit_PN5329waitreadyEj+0x3c>
    2e82:	62 ec       	ldi	r22, 0xC2	; 194
    2e84:	78 e0       	ldi	r23, 0x08	; 8
    2e86:	85 e5       	ldi	r24, 0x55	; 85
    2e88:	9d e0       	ldi	r25, 0x0D	; 13
    2e8a:	0e 94 5b 3b 	call	0x76b6	; 0x76b6 <_ZN5Print7printlnEPKc>
    2e8e:	07 c0       	rjmp	.+14     	; 0x2e9e <_ZN14Adafruit_PN5329waitreadyEj+0x4a>
    2e90:	6a e0       	ldi	r22, 0x0A	; 10
    2e92:	70 e0       	ldi	r23, 0x00	; 0
    2e94:	80 e0       	ldi	r24, 0x00	; 0
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	0e 94 5f 3c 	call	0x78be	; 0x78be <delay>
    2e9c:	e6 cf       	rjmp	.-52     	; 0x2e6a <_ZN14Adafruit_PN5329waitreadyEj+0x16>
    2e9e:	81 2f       	mov	r24, r17
    2ea0:	df 91       	pop	r29
    2ea2:	cf 91       	pop	r28
    2ea4:	1f 91       	pop	r17
    2ea6:	ff 90       	pop	r15
    2ea8:	ef 90       	pop	r14
    2eaa:	df 90       	pop	r13
    2eac:	cf 90       	pop	r12
    2eae:	08 95       	ret

00002eb0 <_ZN14Adafruit_PN5328readdataEPhh>:
    2eb0:	cf 92       	push	r12
    2eb2:	df 92       	push	r13
    2eb4:	ef 92       	push	r14
    2eb6:	ff 92       	push	r15
    2eb8:	0f 93       	push	r16
    2eba:	1f 93       	push	r17
    2ebc:	cf 93       	push	r28
    2ebe:	df 93       	push	r29
    2ec0:	ec 01       	movw	r28, r24
    2ec2:	6b 01       	movw	r12, r22
    2ec4:	f4 2e       	mov	r15, r20
    2ec6:	8d 89       	ldd	r24, Y+21	; 0x15
    2ec8:	04 2f       	mov	r16, r20
    2eca:	10 e0       	ldi	r17, 0x00	; 0
    2ecc:	88 23       	and	r24, r24
    2ece:	a9 f1       	breq	.+106    	; 0x2f3a <_ZN14Adafruit_PN5328readdataEPhh+0x8a>
    2ed0:	8e 89       	ldd	r24, Y+22	; 0x16
    2ed2:	88 23       	and	r24, r24
    2ed4:	19 f0       	breq	.+6      	; 0x2edc <_ZN14Adafruit_PN5328readdataEPhh+0x2c>
    2ed6:	81 e7       	ldi	r24, 0x71	; 113
    2ed8:	90 e0       	ldi	r25, 0x00	; 0
    2eda:	41 de       	rcall	.-894    	; 0x2b5e <_ZN8SPIClass16beginTransactionE11SPISettings>
    2edc:	60 e0       	ldi	r22, 0x00	; 0
    2ede:	88 81       	ld	r24, Y
    2ee0:	0e 94 43 3d 	call	0x7a86	; 0x7a86 <digitalWrite>
    2ee4:	62 e0       	ldi	r22, 0x02	; 2
    2ee6:	70 e0       	ldi	r23, 0x00	; 0
    2ee8:	80 e0       	ldi	r24, 0x00	; 0
    2eea:	90 e0       	ldi	r25, 0x00	; 0
    2eec:	0e 94 5f 3c 	call	0x78be	; 0x78be <delay>
    2ef0:	63 e0       	ldi	r22, 0x03	; 3
    2ef2:	ce 01       	movw	r24, r28
    2ef4:	fc de       	rcall	.-520    	; 0x2cee <_ZN14Adafruit_PN5329spi_writeEh>
    2ef6:	76 01       	movw	r14, r12
    2ef8:	0c 0d       	add	r16, r12
    2efa:	1d 1d       	adc	r17, r13
    2efc:	0e 15       	cp	r16, r14
    2efe:	1f 05       	cpc	r17, r15
    2f00:	61 f0       	breq	.+24     	; 0x2f1a <_ZN14Adafruit_PN5328readdataEPhh+0x6a>
    2f02:	61 e0       	ldi	r22, 0x01	; 1
    2f04:	70 e0       	ldi	r23, 0x00	; 0
    2f06:	80 e0       	ldi	r24, 0x00	; 0
    2f08:	90 e0       	ldi	r25, 0x00	; 0
    2f0a:	0e 94 5f 3c 	call	0x78be	; 0x78be <delay>
    2f0e:	ce 01       	movw	r24, r28
    2f10:	2d df       	rcall	.-422    	; 0x2d6c <_ZN14Adafruit_PN5328spi_readEv>
    2f12:	f7 01       	movw	r30, r14
    2f14:	81 93       	st	Z+, r24
    2f16:	7f 01       	movw	r14, r30
    2f18:	f1 cf       	rjmp	.-30     	; 0x2efc <_ZN14Adafruit_PN5328readdataEPhh+0x4c>
    2f1a:	61 e0       	ldi	r22, 0x01	; 1
    2f1c:	88 81       	ld	r24, Y
    2f1e:	0e 94 43 3d 	call	0x7a86	; 0x7a86 <digitalWrite>
    2f22:	8e 89       	ldd	r24, Y+22	; 0x16
    2f24:	88 23       	and	r24, r24
    2f26:	61 f1       	breq	.+88     	; 0x2f80 <_ZN14Adafruit_PN5328readdataEPhh+0xd0>
    2f28:	df 91       	pop	r29
    2f2a:	cf 91       	pop	r28
    2f2c:	1f 91       	pop	r17
    2f2e:	0f 91       	pop	r16
    2f30:	ff 90       	pop	r15
    2f32:	ef 90       	pop	r14
    2f34:	df 90       	pop	r13
    2f36:	cf 90       	pop	r12
    2f38:	2c ce       	rjmp	.-936    	; 0x2b92 <_ZN8SPIClass14endTransactionEv>
    2f3a:	62 e0       	ldi	r22, 0x02	; 2
    2f3c:	70 e0       	ldi	r23, 0x00	; 0
    2f3e:	80 e0       	ldi	r24, 0x00	; 0
    2f40:	90 e0       	ldi	r25, 0x00	; 0
    2f42:	0e 94 5f 3c 	call	0x78be	; 0x78be <delay>
    2f46:	42 e0       	ldi	r20, 0x02	; 2
    2f48:	4f 0d       	add	r20, r15
    2f4a:	64 e2       	ldi	r22, 0x24	; 36
    2f4c:	8f ef       	ldi	r24, 0xFF	; 255
    2f4e:	9c e0       	ldi	r25, 0x0C	; 12
    2f50:	0e 94 92 38 	call	0x7124	; 0x7124 <_ZN7TwoWire11requestFromEhh>
    2f54:	8f ef       	ldi	r24, 0xFF	; 255
    2f56:	9c e0       	ldi	r25, 0x0C	; 12
    2f58:	0e 94 3e 37 	call	0x6e7c	; 0x6e7c <_ZN7TwoWire4readEv>
    2f5c:	e6 01       	movw	r28, r12
    2f5e:	0c 0d       	add	r16, r12
    2f60:	1d 1d       	adc	r17, r13
    2f62:	c0 17       	cp	r28, r16
    2f64:	d1 07       	cpc	r29, r17
    2f66:	61 f0       	breq	.+24     	; 0x2f80 <_ZN14Adafruit_PN5328readdataEPhh+0xd0>
    2f68:	61 e0       	ldi	r22, 0x01	; 1
    2f6a:	70 e0       	ldi	r23, 0x00	; 0
    2f6c:	80 e0       	ldi	r24, 0x00	; 0
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	0e 94 5f 3c 	call	0x78be	; 0x78be <delay>
    2f74:	8f ef       	ldi	r24, 0xFF	; 255
    2f76:	9c e0       	ldi	r25, 0x0C	; 12
    2f78:	0e 94 3e 37 	call	0x6e7c	; 0x6e7c <_ZN7TwoWire4readEv>
    2f7c:	89 93       	st	Y+, r24
    2f7e:	f1 cf       	rjmp	.-30     	; 0x2f62 <_ZN14Adafruit_PN5328readdataEPhh+0xb2>
    2f80:	df 91       	pop	r29
    2f82:	cf 91       	pop	r28
    2f84:	1f 91       	pop	r17
    2f86:	0f 91       	pop	r16
    2f88:	ff 90       	pop	r15
    2f8a:	ef 90       	pop	r14
    2f8c:	df 90       	pop	r13
    2f8e:	cf 90       	pop	r12
    2f90:	08 95       	ret

00002f92 <_ZN14Adafruit_PN5327readackEv>:
    2f92:	cf 93       	push	r28
    2f94:	df 93       	push	r29
    2f96:	00 d0       	rcall	.+0      	; 0x2f98 <_ZN14Adafruit_PN5327readackEv+0x6>
    2f98:	00 d0       	rcall	.+0      	; 0x2f9a <_ZN14Adafruit_PN5327readackEv+0x8>
    2f9a:	00 d0       	rcall	.+0      	; 0x2f9c <_ZN14Adafruit_PN5327readackEv+0xa>
    2f9c:	cd b7       	in	r28, 0x3d	; 61
    2f9e:	de b7       	in	r29, 0x3e	; 62
    2fa0:	46 e0       	ldi	r20, 0x06	; 6
    2fa2:	be 01       	movw	r22, r28
    2fa4:	6f 5f       	subi	r22, 0xFF	; 255
    2fa6:	7f 4f       	sbci	r23, 0xFF	; 255
    2fa8:	83 df       	rcall	.-250    	; 0x2eb0 <_ZN14Adafruit_PN5328readdataEPhh>
    2faa:	46 e0       	ldi	r20, 0x06	; 6
    2fac:	50 e0       	ldi	r21, 0x00	; 0
    2fae:	64 e4       	ldi	r22, 0x44	; 68
    2fb0:	71 e0       	ldi	r23, 0x01	; 1
    2fb2:	ce 01       	movw	r24, r28
    2fb4:	01 96       	adiw	r24, 0x01	; 1
    2fb6:	0e 94 11 45 	call	0x8a22	; 0x8a22 <strncmp>
    2fba:	21 e0       	ldi	r18, 0x01	; 1
    2fbc:	89 2b       	or	r24, r25
    2fbe:	09 f0       	breq	.+2      	; 0x2fc2 <_ZN14Adafruit_PN5327readackEv+0x30>
    2fc0:	20 e0       	ldi	r18, 0x00	; 0
    2fc2:	82 2f       	mov	r24, r18
    2fc4:	26 96       	adiw	r28, 0x06	; 6
    2fc6:	0f b6       	in	r0, 0x3f	; 63
    2fc8:	f8 94       	cli
    2fca:	de bf       	out	0x3e, r29	; 62
    2fcc:	0f be       	out	0x3f, r0	; 63
    2fce:	cd bf       	out	0x3d, r28	; 61
    2fd0:	df 91       	pop	r29
    2fd2:	cf 91       	pop	r28
    2fd4:	08 95       	ret

00002fd6 <_ZL8i2c_sendh>:
    2fd6:	68 2f       	mov	r22, r24
    2fd8:	8f ef       	ldi	r24, 0xFF	; 255
    2fda:	9c e0       	ldi	r25, 0x0C	; 12
    2fdc:	0c 94 c4 37 	jmp	0x6f88	; 0x6f88 <_ZN7TwoWire5writeEh>

00002fe0 <_ZN14Adafruit_PN53212writecommandEPhh>:
    2fe0:	af 92       	push	r10
    2fe2:	bf 92       	push	r11
    2fe4:	cf 92       	push	r12
    2fe6:	df 92       	push	r13
    2fe8:	ef 92       	push	r14
    2fea:	ff 92       	push	r15
    2fec:	0f 93       	push	r16
    2fee:	1f 93       	push	r17
    2ff0:	cf 93       	push	r28
    2ff2:	df 93       	push	r29
    2ff4:	7c 01       	movw	r14, r24
    2ff6:	8b 01       	movw	r16, r22
    2ff8:	fc 01       	movw	r30, r24
    2ffa:	85 89       	ldd	r24, Z+21	; 0x15
    2ffc:	c1 e0       	ldi	r28, 0x01	; 1
    2ffe:	c4 0f       	add	r28, r20
    3000:	88 23       	and	r24, r24
    3002:	09 f4       	brne	.+2      	; 0x3006 <_ZN14Adafruit_PN53212writecommandEPhh+0x26>
    3004:	58 c0       	rjmp	.+176    	; 0x30b6 <_ZN14Adafruit_PN53212writecommandEPhh+0xd6>
    3006:	86 89       	ldd	r24, Z+22	; 0x16
    3008:	88 23       	and	r24, r24
    300a:	19 f0       	breq	.+6      	; 0x3012 <_ZN14Adafruit_PN53212writecommandEPhh+0x32>
    300c:	81 e7       	ldi	r24, 0x71	; 113
    300e:	90 e0       	ldi	r25, 0x00	; 0
    3010:	a6 dd       	rcall	.-1204   	; 0x2b5e <_ZN8SPIClass16beginTransactionE11SPISettings>
    3012:	60 e0       	ldi	r22, 0x00	; 0
    3014:	f7 01       	movw	r30, r14
    3016:	80 81       	ld	r24, Z
    3018:	0e 94 43 3d 	call	0x7a86	; 0x7a86 <digitalWrite>
    301c:	62 e0       	ldi	r22, 0x02	; 2
    301e:	70 e0       	ldi	r23, 0x00	; 0
    3020:	80 e0       	ldi	r24, 0x00	; 0
    3022:	90 e0       	ldi	r25, 0x00	; 0
    3024:	0e 94 5f 3c 	call	0x78be	; 0x78be <delay>
    3028:	61 e0       	ldi	r22, 0x01	; 1
    302a:	c7 01       	movw	r24, r14
    302c:	60 de       	rcall	.-832    	; 0x2cee <_ZN14Adafruit_PN5329spi_writeEh>
    302e:	60 e0       	ldi	r22, 0x00	; 0
    3030:	c7 01       	movw	r24, r14
    3032:	5d de       	rcall	.-838    	; 0x2cee <_ZN14Adafruit_PN5329spi_writeEh>
    3034:	60 e0       	ldi	r22, 0x00	; 0
    3036:	c7 01       	movw	r24, r14
    3038:	5a de       	rcall	.-844    	; 0x2cee <_ZN14Adafruit_PN5329spi_writeEh>
    303a:	6f ef       	ldi	r22, 0xFF	; 255
    303c:	c7 01       	movw	r24, r14
    303e:	57 de       	rcall	.-850    	; 0x2cee <_ZN14Adafruit_PN5329spi_writeEh>
    3040:	6c 2f       	mov	r22, r28
    3042:	c7 01       	movw	r24, r14
    3044:	54 de       	rcall	.-856    	; 0x2cee <_ZN14Adafruit_PN5329spi_writeEh>
    3046:	6c 2f       	mov	r22, r28
    3048:	61 95       	neg	r22
    304a:	c7 01       	movw	r24, r14
    304c:	50 de       	rcall	.-864    	; 0x2cee <_ZN14Adafruit_PN5329spi_writeEh>
    304e:	64 ed       	ldi	r22, 0xD4	; 212
    3050:	c7 01       	movw	r24, r14
    3052:	4d de       	rcall	.-870    	; 0x2cee <_ZN14Adafruit_PN5329spi_writeEh>
    3054:	c1 2c       	mov	r12, r1
    3056:	93 ed       	ldi	r25, 0xD3	; 211
    3058:	d9 2e       	mov	r13, r25
    305a:	d0 e0       	ldi	r29, 0x00	; 0
    305c:	21 97       	sbiw	r28, 0x01	; 1
    305e:	ac 2c       	mov	r10, r12
    3060:	b1 2c       	mov	r11, r1
    3062:	ac 16       	cp	r10, r28
    3064:	bd 06       	cpc	r11, r29
    3066:	5c f4       	brge	.+22     	; 0x307e <_ZN14Adafruit_PN53212writecommandEPhh+0x9e>
    3068:	a0 0e       	add	r10, r16
    306a:	b1 1e       	adc	r11, r17
    306c:	f5 01       	movw	r30, r10
    306e:	60 81       	ld	r22, Z
    3070:	c7 01       	movw	r24, r14
    3072:	3d de       	rcall	.-902    	; 0x2cee <_ZN14Adafruit_PN5329spi_writeEh>
    3074:	f5 01       	movw	r30, r10
    3076:	80 81       	ld	r24, Z
    3078:	d8 0e       	add	r13, r24
    307a:	c3 94       	inc	r12
    307c:	f0 cf       	rjmp	.-32     	; 0x305e <_ZN14Adafruit_PN53212writecommandEPhh+0x7e>
    307e:	6d 2d       	mov	r22, r13
    3080:	60 95       	com	r22
    3082:	c7 01       	movw	r24, r14
    3084:	34 de       	rcall	.-920    	; 0x2cee <_ZN14Adafruit_PN5329spi_writeEh>
    3086:	60 e0       	ldi	r22, 0x00	; 0
    3088:	c7 01       	movw	r24, r14
    308a:	31 de       	rcall	.-926    	; 0x2cee <_ZN14Adafruit_PN5329spi_writeEh>
    308c:	61 e0       	ldi	r22, 0x01	; 1
    308e:	f7 01       	movw	r30, r14
    3090:	80 81       	ld	r24, Z
    3092:	0e 94 43 3d 	call	0x7a86	; 0x7a86 <digitalWrite>
    3096:	f7 01       	movw	r30, r14
    3098:	86 89       	ldd	r24, Z+22	; 0x16
    309a:	88 23       	and	r24, r24
    309c:	09 f4       	brne	.+2      	; 0x30a0 <_ZN14Adafruit_PN53212writecommandEPhh+0xc0>
    309e:	4b c0       	rjmp	.+150    	; 0x3136 <_ZN14Adafruit_PN53212writecommandEPhh+0x156>
    30a0:	df 91       	pop	r29
    30a2:	cf 91       	pop	r28
    30a4:	1f 91       	pop	r17
    30a6:	0f 91       	pop	r16
    30a8:	ff 90       	pop	r15
    30aa:	ef 90       	pop	r14
    30ac:	df 90       	pop	r13
    30ae:	cf 90       	pop	r12
    30b0:	bf 90       	pop	r11
    30b2:	af 90       	pop	r10
    30b4:	6e cd       	rjmp	.-1316   	; 0x2b92 <_ZN8SPIClass14endTransactionEv>
    30b6:	62 e0       	ldi	r22, 0x02	; 2
    30b8:	70 e0       	ldi	r23, 0x00	; 0
    30ba:	80 e0       	ldi	r24, 0x00	; 0
    30bc:	90 e0       	ldi	r25, 0x00	; 0
    30be:	0e 94 5f 3c 	call	0x78be	; 0x78be <delay>
    30c2:	64 e2       	ldi	r22, 0x24	; 36
    30c4:	70 e0       	ldi	r23, 0x00	; 0
    30c6:	8f ef       	ldi	r24, 0xFF	; 255
    30c8:	9c e0       	ldi	r25, 0x0C	; 12
    30ca:	0e 94 1f 38 	call	0x703e	; 0x703e <_ZN7TwoWire17beginTransmissionEi>
    30ce:	80 e0       	ldi	r24, 0x00	; 0
    30d0:	82 df       	rcall	.-252    	; 0x2fd6 <_ZL8i2c_sendh>
    30d2:	80 e0       	ldi	r24, 0x00	; 0
    30d4:	80 df       	rcall	.-256    	; 0x2fd6 <_ZL8i2c_sendh>
    30d6:	8f ef       	ldi	r24, 0xFF	; 255
    30d8:	7e df       	rcall	.-260    	; 0x2fd6 <_ZL8i2c_sendh>
    30da:	8c 2f       	mov	r24, r28
    30dc:	7c df       	rcall	.-264    	; 0x2fd6 <_ZL8i2c_sendh>
    30de:	8c 2f       	mov	r24, r28
    30e0:	81 95       	neg	r24
    30e2:	79 df       	rcall	.-270    	; 0x2fd6 <_ZL8i2c_sendh>
    30e4:	84 ed       	ldi	r24, 0xD4	; 212
    30e6:	77 df       	rcall	.-274    	; 0x2fd6 <_ZL8i2c_sendh>
    30e8:	b1 2c       	mov	r11, r1
    30ea:	83 ed       	ldi	r24, 0xD3	; 211
    30ec:	d8 2e       	mov	r13, r24
    30ee:	d0 e0       	ldi	r29, 0x00	; 0
    30f0:	21 97       	sbiw	r28, 0x01	; 1
    30f2:	eb 2c       	mov	r14, r11
    30f4:	f1 2c       	mov	r15, r1
    30f6:	ec 16       	cp	r14, r28
    30f8:	fd 06       	cpc	r15, r29
    30fa:	54 f4       	brge	.+20     	; 0x3110 <_ZN14Adafruit_PN53212writecommandEPhh+0x130>
    30fc:	e0 0e       	add	r14, r16
    30fe:	f1 1e       	adc	r15, r17
    3100:	f7 01       	movw	r30, r14
    3102:	80 81       	ld	r24, Z
    3104:	68 df       	rcall	.-304    	; 0x2fd6 <_ZL8i2c_sendh>
    3106:	f7 01       	movw	r30, r14
    3108:	80 81       	ld	r24, Z
    310a:	d8 0e       	add	r13, r24
    310c:	b3 94       	inc	r11
    310e:	f1 cf       	rjmp	.-30     	; 0x30f2 <_ZN14Adafruit_PN53212writecommandEPhh+0x112>
    3110:	8d 2d       	mov	r24, r13
    3112:	80 95       	com	r24
    3114:	60 df       	rcall	.-320    	; 0x2fd6 <_ZL8i2c_sendh>
    3116:	80 e0       	ldi	r24, 0x00	; 0
    3118:	5e df       	rcall	.-324    	; 0x2fd6 <_ZL8i2c_sendh>
    311a:	8f ef       	ldi	r24, 0xFF	; 255
    311c:	9c e0       	ldi	r25, 0x0C	; 12
    311e:	df 91       	pop	r29
    3120:	cf 91       	pop	r28
    3122:	1f 91       	pop	r17
    3124:	0f 91       	pop	r16
    3126:	ff 90       	pop	r15
    3128:	ef 90       	pop	r14
    312a:	df 90       	pop	r13
    312c:	cf 90       	pop	r12
    312e:	bf 90       	pop	r11
    3130:	af 90       	pop	r10
    3132:	0c 94 96 38 	jmp	0x712c	; 0x712c <_ZN7TwoWire15endTransmissionEv>
    3136:	df 91       	pop	r29
    3138:	cf 91       	pop	r28
    313a:	1f 91       	pop	r17
    313c:	0f 91       	pop	r16
    313e:	ff 90       	pop	r15
    3140:	ef 90       	pop	r14
    3142:	df 90       	pop	r13
    3144:	cf 90       	pop	r12
    3146:	bf 90       	pop	r11
    3148:	af 90       	pop	r10
    314a:	08 95       	ret

0000314c <_ZN14Adafruit_PN53219sendCommandCheckAckEPhhj>:
    314c:	0f 93       	push	r16
    314e:	1f 93       	push	r17
    3150:	cf 93       	push	r28
    3152:	df 93       	push	r29
    3154:	ec 01       	movw	r28, r24
    3156:	89 01       	movw	r16, r18
    3158:	43 df       	rcall	.-378    	; 0x2fe0 <_ZN14Adafruit_PN53212writecommandEPhh>
    315a:	b8 01       	movw	r22, r16
    315c:	ce 01       	movw	r24, r28
    315e:	7a de       	rcall	.-780    	; 0x2e54 <_ZN14Adafruit_PN5329waitreadyEj>
    3160:	81 11       	cpse	r24, r1
    3162:	02 c0       	rjmp	.+4      	; 0x3168 <_ZN14Adafruit_PN53219sendCommandCheckAckEPhhj+0x1c>
    3164:	80 e0       	ldi	r24, 0x00	; 0
    3166:	0e c0       	rjmp	.+28     	; 0x3184 <_ZN14Adafruit_PN53219sendCommandCheckAckEPhhj+0x38>
    3168:	ce 01       	movw	r24, r28
    316a:	13 df       	rcall	.-474    	; 0x2f92 <_ZN14Adafruit_PN5327readackEv>
    316c:	88 23       	and	r24, r24
    316e:	d1 f3       	breq	.-12     	; 0x3164 <_ZN14Adafruit_PN53219sendCommandCheckAckEPhhj+0x18>
    3170:	9d 89       	ldd	r25, Y+21	; 0x15
    3172:	99 23       	and	r25, r25
    3174:	39 f0       	breq	.+14     	; 0x3184 <_ZN14Adafruit_PN53219sendCommandCheckAckEPhhj+0x38>
    3176:	b8 01       	movw	r22, r16
    3178:	ce 01       	movw	r24, r28
    317a:	df 91       	pop	r29
    317c:	cf 91       	pop	r28
    317e:	1f 91       	pop	r17
    3180:	0f 91       	pop	r16
    3182:	68 ce       	rjmp	.-816    	; 0x2e54 <_ZN14Adafruit_PN5329waitreadyEj>
    3184:	df 91       	pop	r29
    3186:	cf 91       	pop	r28
    3188:	1f 91       	pop	r17
    318a:	0f 91       	pop	r16
    318c:	08 95       	ret

0000318e <_ZN14Adafruit_PN5325beginEv>:
    318e:	cf 93       	push	r28
    3190:	df 93       	push	r29
    3192:	ec 01       	movw	r28, r24
    3194:	8d 89       	ldd	r24, Y+21	; 0x15
    3196:	88 23       	and	r24, r24
    3198:	31 f1       	breq	.+76     	; 0x31e6 <_ZN14Adafruit_PN5325beginEv+0x58>
    319a:	8e 89       	ldd	r24, Y+22	; 0x16
    319c:	88 23       	and	r24, r24
    319e:	29 f0       	breq	.+10     	; 0x31aa <_ZN14Adafruit_PN5325beginEv+0x1c>
    31a0:	0e 94 b3 34 	call	0x6966	; 0x6966 <_ZN8SPIClass5beginEv>
    31a4:	81 e7       	ldi	r24, 0x71	; 113
    31a6:	90 e0       	ldi	r25, 0x00	; 0
    31a8:	da dc       	rcall	.-1612   	; 0x2b5e <_ZN8SPIClass16beginTransactionE11SPISettings>
    31aa:	60 e0       	ldi	r22, 0x00	; 0
    31ac:	88 81       	ld	r24, Y
    31ae:	0e 94 43 3d 	call	0x7a86	; 0x7a86 <digitalWrite>
    31b2:	68 ee       	ldi	r22, 0xE8	; 232
    31b4:	73 e0       	ldi	r23, 0x03	; 3
    31b6:	80 e0       	ldi	r24, 0x00	; 0
    31b8:	90 e0       	ldi	r25, 0x00	; 0
    31ba:	0e 94 5f 3c 	call	0x78be	; 0x78be <delay>
    31be:	82 e0       	ldi	r24, 0x02	; 2
    31c0:	80 93 ff 0b 	sts	0x0BFF, r24	; 0x800bff <pn532_packetbuffer>
    31c4:	28 ee       	ldi	r18, 0xE8	; 232
    31c6:	33 e0       	ldi	r19, 0x03	; 3
    31c8:	41 e0       	ldi	r20, 0x01	; 1
    31ca:	6f ef       	ldi	r22, 0xFF	; 255
    31cc:	7b e0       	ldi	r23, 0x0B	; 11
    31ce:	ce 01       	movw	r24, r28
    31d0:	bd df       	rcall	.-134    	; 0x314c <_ZN14Adafruit_PN53219sendCommandCheckAckEPhhj>
    31d2:	61 e0       	ldi	r22, 0x01	; 1
    31d4:	88 81       	ld	r24, Y
    31d6:	0e 94 43 3d 	call	0x7a86	; 0x7a86 <digitalWrite>
    31da:	8e 89       	ldd	r24, Y+22	; 0x16
    31dc:	88 23       	and	r24, r24
    31de:	09 f1       	breq	.+66     	; 0x3222 <_ZN14Adafruit_PN5325beginEv+0x94>
    31e0:	df 91       	pop	r29
    31e2:	cf 91       	pop	r28
    31e4:	d6 cc       	rjmp	.-1620   	; 0x2b92 <_ZN8SPIClass14endTransactionEv>
    31e6:	8f ef       	ldi	r24, 0xFF	; 255
    31e8:	9c e0       	ldi	r25, 0x0C	; 12
    31ea:	0e 94 02 38 	call	0x7004	; 0x7004 <_ZN7TwoWire5beginEv>
    31ee:	61 e0       	ldi	r22, 0x01	; 1
    31f0:	8d 81       	ldd	r24, Y+5	; 0x05
    31f2:	0e 94 43 3d 	call	0x7a86	; 0x7a86 <digitalWrite>
    31f6:	60 e0       	ldi	r22, 0x00	; 0
    31f8:	8d 81       	ldd	r24, Y+5	; 0x05
    31fa:	0e 94 43 3d 	call	0x7a86	; 0x7a86 <digitalWrite>
    31fe:	60 e9       	ldi	r22, 0x90	; 144
    3200:	71 e0       	ldi	r23, 0x01	; 1
    3202:	80 e0       	ldi	r24, 0x00	; 0
    3204:	90 e0       	ldi	r25, 0x00	; 0
    3206:	0e 94 5f 3c 	call	0x78be	; 0x78be <delay>
    320a:	61 e0       	ldi	r22, 0x01	; 1
    320c:	8d 81       	ldd	r24, Y+5	; 0x05
    320e:	0e 94 43 3d 	call	0x7a86	; 0x7a86 <digitalWrite>
    3212:	6a e0       	ldi	r22, 0x0A	; 10
    3214:	70 e0       	ldi	r23, 0x00	; 0
    3216:	80 e0       	ldi	r24, 0x00	; 0
    3218:	90 e0       	ldi	r25, 0x00	; 0
    321a:	df 91       	pop	r29
    321c:	cf 91       	pop	r28
    321e:	0c 94 5f 3c 	jmp	0x78be	; 0x78be <delay>
    3222:	df 91       	pop	r29
    3224:	cf 91       	pop	r28
    3226:	08 95       	ret

00003228 <_ZN14Adafruit_PN53218getFirmwareVersionEv>:
    3228:	cf 93       	push	r28
    322a:	df 93       	push	r29
    322c:	ec 01       	movw	r28, r24
    322e:	82 e0       	ldi	r24, 0x02	; 2
    3230:	80 93 ff 0b 	sts	0x0BFF, r24	; 0x800bff <pn532_packetbuffer>
    3234:	28 ee       	ldi	r18, 0xE8	; 232
    3236:	33 e0       	ldi	r19, 0x03	; 3
    3238:	41 e0       	ldi	r20, 0x01	; 1
    323a:	6f ef       	ldi	r22, 0xFF	; 255
    323c:	7b e0       	ldi	r23, 0x0B	; 11
    323e:	ce 01       	movw	r24, r28
    3240:	85 df       	rcall	.-246    	; 0x314c <_ZN14Adafruit_PN53219sendCommandCheckAckEPhhj>
    3242:	81 11       	cpse	r24, r1
    3244:	04 c0       	rjmp	.+8      	; 0x324e <_ZN14Adafruit_PN53218getFirmwareVersionEv+0x26>
    3246:	60 e0       	ldi	r22, 0x00	; 0
    3248:	70 e0       	ldi	r23, 0x00	; 0
    324a:	cb 01       	movw	r24, r22
    324c:	32 c0       	rjmp	.+100    	; 0x32b2 <_ZN14Adafruit_PN53218getFirmwareVersionEv+0x8a>
    324e:	4c e0       	ldi	r20, 0x0C	; 12
    3250:	6f ef       	ldi	r22, 0xFF	; 255
    3252:	7b e0       	ldi	r23, 0x0B	; 11
    3254:	ce 01       	movw	r24, r28
    3256:	2c de       	rcall	.-936    	; 0x2eb0 <_ZN14Adafruit_PN5328readdataEPhh>
    3258:	46 e0       	ldi	r20, 0x06	; 6
    325a:	50 e0       	ldi	r21, 0x00	; 0
    325c:	6e e3       	ldi	r22, 0x3E	; 62
    325e:	71 e0       	ldi	r23, 0x01	; 1
    3260:	8f ef       	ldi	r24, 0xFF	; 255
    3262:	9b e0       	ldi	r25, 0x0B	; 11
    3264:	0e 94 11 45 	call	0x8a22	; 0x8a22 <strncmp>
    3268:	89 2b       	or	r24, r25
    326a:	69 f7       	brne	.-38     	; 0x3246 <_ZN14Adafruit_PN53218getFirmwareVersionEv+0x1e>
    326c:	8d 89       	ldd	r24, Y+21	; 0x15
    326e:	81 11       	cpse	r24, r1
    3270:	03 c0       	rjmp	.+6      	; 0x3278 <_ZN14Adafruit_PN53218getFirmwareVersionEv+0x50>
    3272:	e7 e0       	ldi	r30, 0x07	; 7
    3274:	f0 e0       	ldi	r31, 0x00	; 0
    3276:	02 c0       	rjmp	.+4      	; 0x327c <_ZN14Adafruit_PN53218getFirmwareVersionEv+0x54>
    3278:	e6 e0       	ldi	r30, 0x06	; 6
    327a:	f0 e0       	ldi	r31, 0x00	; 0
    327c:	e1 50       	subi	r30, 0x01	; 1
    327e:	f4 4f       	sbci	r31, 0xF4	; 244
    3280:	60 81       	ld	r22, Z
    3282:	86 2f       	mov	r24, r22
    3284:	90 e0       	ldi	r25, 0x00	; 0
    3286:	a0 e0       	ldi	r26, 0x00	; 0
    3288:	b0 e0       	ldi	r27, 0x00	; 0
    328a:	ba 2f       	mov	r27, r26
    328c:	a9 2f       	mov	r26, r25
    328e:	98 2f       	mov	r25, r24
    3290:	88 27       	eor	r24, r24
    3292:	21 81       	ldd	r18, Z+1	; 0x01
    3294:	82 2b       	or	r24, r18
    3296:	ba 2f       	mov	r27, r26
    3298:	a9 2f       	mov	r26, r25
    329a:	98 2f       	mov	r25, r24
    329c:	88 27       	eor	r24, r24
    329e:	22 81       	ldd	r18, Z+2	; 0x02
    32a0:	82 2b       	or	r24, r18
    32a2:	ba 2f       	mov	r27, r26
    32a4:	a9 2f       	mov	r26, r25
    32a6:	98 2f       	mov	r25, r24
    32a8:	88 27       	eor	r24, r24
    32aa:	23 81       	ldd	r18, Z+3	; 0x03
    32ac:	bc 01       	movw	r22, r24
    32ae:	cd 01       	movw	r24, r26
    32b0:	62 2b       	or	r22, r18
    32b2:	df 91       	pop	r29
    32b4:	cf 91       	pop	r28
    32b6:	08 95       	ret

000032b8 <_ZN14Adafruit_PN5329SAMConfigEv>:
    32b8:	cf 93       	push	r28
    32ba:	df 93       	push	r29
    32bc:	ec 01       	movw	r28, r24
    32be:	94 e1       	ldi	r25, 0x14	; 20
    32c0:	90 93 ff 0b 	sts	0x0BFF, r25	; 0x800bff <pn532_packetbuffer>
    32c4:	81 e0       	ldi	r24, 0x01	; 1
    32c6:	80 93 00 0c 	sts	0x0C00, r24	; 0x800c00 <pn532_packetbuffer+0x1>
    32ca:	90 93 01 0c 	sts	0x0C01, r25	; 0x800c01 <pn532_packetbuffer+0x2>
    32ce:	80 93 02 0c 	sts	0x0C02, r24	; 0x800c02 <pn532_packetbuffer+0x3>
    32d2:	28 ee       	ldi	r18, 0xE8	; 232
    32d4:	33 e0       	ldi	r19, 0x03	; 3
    32d6:	44 e0       	ldi	r20, 0x04	; 4
    32d8:	6f ef       	ldi	r22, 0xFF	; 255
    32da:	7b e0       	ldi	r23, 0x0B	; 11
    32dc:	ce 01       	movw	r24, r28
    32de:	36 df       	rcall	.-404    	; 0x314c <_ZN14Adafruit_PN53219sendCommandCheckAckEPhhj>
    32e0:	88 23       	and	r24, r24
    32e2:	a9 f0       	breq	.+42     	; 0x330e <_ZN14Adafruit_PN5329SAMConfigEv+0x56>
    32e4:	48 e0       	ldi	r20, 0x08	; 8
    32e6:	6f ef       	ldi	r22, 0xFF	; 255
    32e8:	7b e0       	ldi	r23, 0x0B	; 11
    32ea:	ce 01       	movw	r24, r28
    32ec:	e1 dd       	rcall	.-1086   	; 0x2eb0 <_ZN14Adafruit_PN5328readdataEPhh>
    32ee:	8d 89       	ldd	r24, Y+21	; 0x15
    32f0:	81 11       	cpse	r24, r1
    32f2:	03 c0       	rjmp	.+6      	; 0x32fa <_ZN14Adafruit_PN5329SAMConfigEv+0x42>
    32f4:	86 e0       	ldi	r24, 0x06	; 6
    32f6:	90 e0       	ldi	r25, 0x00	; 0
    32f8:	02 c0       	rjmp	.+4      	; 0x32fe <_ZN14Adafruit_PN5329SAMConfigEv+0x46>
    32fa:	85 e0       	ldi	r24, 0x05	; 5
    32fc:	90 e0       	ldi	r25, 0x00	; 0
    32fe:	fc 01       	movw	r30, r24
    3300:	e1 50       	subi	r30, 0x01	; 1
    3302:	f4 4f       	sbci	r31, 0xF4	; 244
    3304:	81 e0       	ldi	r24, 0x01	; 1
    3306:	90 81       	ld	r25, Z
    3308:	95 31       	cpi	r25, 0x15	; 21
    330a:	09 f0       	breq	.+2      	; 0x330e <_ZN14Adafruit_PN5329SAMConfigEv+0x56>
    330c:	80 e0       	ldi	r24, 0x00	; 0
    330e:	df 91       	pop	r29
    3310:	cf 91       	pop	r28
    3312:	08 95       	ret

00003314 <_ZN14Adafruit_PN53227setPassiveActivationRetriesEh>:
    3314:	ef ef       	ldi	r30, 0xFF	; 255
    3316:	fb e0       	ldi	r31, 0x0B	; 11
    3318:	22 e3       	ldi	r18, 0x32	; 50
    331a:	20 83       	st	Z, r18
    331c:	25 e0       	ldi	r18, 0x05	; 5
    331e:	21 83       	std	Z+1, r18	; 0x01
    3320:	2f ef       	ldi	r18, 0xFF	; 255
    3322:	22 83       	std	Z+2, r18	; 0x02
    3324:	21 e0       	ldi	r18, 0x01	; 1
    3326:	23 83       	std	Z+3, r18	; 0x03
    3328:	64 83       	std	Z+4, r22	; 0x04
    332a:	28 ee       	ldi	r18, 0xE8	; 232
    332c:	33 e0       	ldi	r19, 0x03	; 3
    332e:	45 e0       	ldi	r20, 0x05	; 5
    3330:	bf 01       	movw	r22, r30
    3332:	0c cf       	rjmp	.-488    	; 0x314c <_ZN14Adafruit_PN53219sendCommandCheckAckEPhhj>

00003334 <_ZN14Adafruit_PN53219readPassiveTargetIDEhPhS0_j>:
    3334:	af 92       	push	r10
    3336:	bf 92       	push	r11
    3338:	cf 92       	push	r12
    333a:	df 92       	push	r13
    333c:	ef 92       	push	r14
    333e:	ff 92       	push	r15
    3340:	0f 93       	push	r16
    3342:	1f 93       	push	r17
    3344:	cf 93       	push	r28
    3346:	df 93       	push	r29
    3348:	ec 01       	movw	r28, r24
    334a:	7a 01       	movw	r14, r20
    334c:	59 01       	movw	r10, r18
    334e:	68 01       	movw	r12, r16
    3350:	8a e4       	ldi	r24, 0x4A	; 74
    3352:	80 93 ff 0b 	sts	0x0BFF, r24	; 0x800bff <pn532_packetbuffer>
    3356:	81 e0       	ldi	r24, 0x01	; 1
    3358:	80 93 00 0c 	sts	0x0C00, r24	; 0x800c00 <pn532_packetbuffer+0x1>
    335c:	60 93 01 0c 	sts	0x0C01, r22	; 0x800c01 <pn532_packetbuffer+0x2>
    3360:	98 01       	movw	r18, r16
    3362:	43 e0       	ldi	r20, 0x03	; 3
    3364:	6f ef       	ldi	r22, 0xFF	; 255
    3366:	7b e0       	ldi	r23, 0x0B	; 11
    3368:	ce 01       	movw	r24, r28
    336a:	f0 de       	rcall	.-544    	; 0x314c <_ZN14Adafruit_PN53219sendCommandCheckAckEPhhj>
    336c:	18 2f       	mov	r17, r24
    336e:	88 23       	and	r24, r24
    3370:	41 f1       	breq	.+80     	; 0x33c2 <_ZN14Adafruit_PN53219readPassiveTargetIDEhPhS0_j+0x8e>
    3372:	8d 89       	ldd	r24, Y+21	; 0x15
    3374:	88 23       	and	r24, r24
    3376:	79 f0       	breq	.+30     	; 0x3396 <_ZN14Adafruit_PN53219readPassiveTargetIDEhPhS0_j+0x62>
    3378:	44 e1       	ldi	r20, 0x14	; 20
    337a:	6f ef       	ldi	r22, 0xFF	; 255
    337c:	7b e0       	ldi	r23, 0x0B	; 11
    337e:	ce 01       	movw	r24, r28
    3380:	97 dd       	rcall	.-1234   	; 0x2eb0 <_ZN14Adafruit_PN5328readdataEPhh>
    3382:	80 91 06 0c 	lds	r24, 0x0C06	; 0x800c06 <pn532_packetbuffer+0x7>
    3386:	81 30       	cpi	r24, 0x01	; 1
    3388:	e1 f4       	brne	.+56     	; 0x33c2 <_ZN14Adafruit_PN53219readPassiveTargetIDEhPhS0_j+0x8e>
    338a:	80 91 0b 0c 	lds	r24, 0x0C0B	; 0x800c0b <pn532_packetbuffer+0xc>
    338e:	f5 01       	movw	r30, r10
    3390:	80 83       	st	Z, r24
    3392:	80 e0       	ldi	r24, 0x00	; 0
    3394:	06 c0       	rjmp	.+12     	; 0x33a2 <_ZN14Adafruit_PN53219readPassiveTargetIDEhPhS0_j+0x6e>
    3396:	b6 01       	movw	r22, r12
    3398:	ce 01       	movw	r24, r28
    339a:	5c dd       	rcall	.-1352   	; 0x2e54 <_ZN14Adafruit_PN5329waitreadyEj>
    339c:	81 11       	cpse	r24, r1
    339e:	ec cf       	rjmp	.-40     	; 0x3378 <_ZN14Adafruit_PN53219readPassiveTargetIDEhPhS0_j+0x44>
    33a0:	10 c0       	rjmp	.+32     	; 0x33c2 <_ZN14Adafruit_PN53219readPassiveTargetIDEhPhS0_j+0x8e>
    33a2:	90 91 0b 0c 	lds	r25, 0x0C0B	; 0x800c0b <pn532_packetbuffer+0xc>
    33a6:	89 17       	cp	r24, r25
    33a8:	68 f4       	brcc	.+26     	; 0x33c4 <_ZN14Adafruit_PN53219readPassiveTargetIDEhPhS0_j+0x90>
    33aa:	28 2f       	mov	r18, r24
    33ac:	30 e0       	ldi	r19, 0x00	; 0
    33ae:	f9 01       	movw	r30, r18
    33b0:	e1 50       	subi	r30, 0x01	; 1
    33b2:	f4 4f       	sbci	r31, 0xF4	; 244
    33b4:	95 85       	ldd	r25, Z+13	; 0x0d
    33b6:	f7 01       	movw	r30, r14
    33b8:	e2 0f       	add	r30, r18
    33ba:	f3 1f       	adc	r31, r19
    33bc:	90 83       	st	Z, r25
    33be:	8f 5f       	subi	r24, 0xFF	; 255
    33c0:	f0 cf       	rjmp	.-32     	; 0x33a2 <_ZN14Adafruit_PN53219readPassiveTargetIDEhPhS0_j+0x6e>
    33c2:	10 e0       	ldi	r17, 0x00	; 0
    33c4:	81 2f       	mov	r24, r17
    33c6:	df 91       	pop	r29
    33c8:	cf 91       	pop	r28
    33ca:	1f 91       	pop	r17
    33cc:	0f 91       	pop	r16
    33ce:	ff 90       	pop	r15
    33d0:	ef 90       	pop	r14
    33d2:	df 90       	pop	r13
    33d4:	cf 90       	pop	r12
    33d6:	bf 90       	pop	r11
    33d8:	af 90       	pop	r10
    33da:	08 95       	ret

000033dc <_ZN14Adafruit_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_>:

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
uint8_t Adafruit_PN532::mifareclassic_AuthenticateBlock (uint8_t * uid, uint8_t uidLen, uint32_t blockNumber, uint8_t keyNumber, uint8_t * keyData)
{
    33dc:	af 92       	push	r10
    33de:	bf 92       	push	r11
    33e0:	cf 92       	push	r12
    33e2:	df 92       	push	r13
    33e4:	ef 92       	push	r14
    33e6:	0f 93       	push	r16
    33e8:	1f 93       	push	r17
    33ea:	cf 93       	push	r28
    33ec:	df 93       	push	r29
    33ee:	ec 01       	movw	r28, r24
    33f0:	14 2f       	mov	r17, r20
  uint8_t len;
  uint8_t i;

  // Hang on to the key and uid data
  memcpy (_key, keyData, 6);
    33f2:	5c 01       	movw	r10, r24
    33f4:	8e e0       	ldi	r24, 0x0E	; 14
    33f6:	a8 0e       	add	r10, r24
    33f8:	b1 1c       	adc	r11, r1
    33fa:	86 e0       	ldi	r24, 0x06	; 6
    33fc:	f6 01       	movw	r30, r12
    33fe:	d5 01       	movw	r26, r10
    3400:	01 90       	ld	r0, Z+
    3402:	0d 92       	st	X+, r0
    3404:	8a 95       	dec	r24
    3406:	e1 f7       	brne	.-8      	; 0x3400 <_ZN14Adafruit_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x24>
  memcpy (_uid, uid, uidLen);
    3408:	50 e0       	ldi	r21, 0x00	; 0
    340a:	ce 01       	movw	r24, r28
    340c:	06 96       	adiw	r24, 0x06	; 6
    340e:	0e 94 f8 44 	call	0x89f0	; 0x89f0 <memcpy>
  _uidLen = uidLen;
    3412:	1d 87       	std	Y+13, r17	; 0x0d
    PN532DEBUGPRINT.print(F("Using authentication KEY "));PN532DEBUGPRINT.print(keyNumber ? 'B' : 'A');PN532DEBUGPRINT.print(F(": "));
    Adafruit_PN532::PrintHex(_key, 6);
  #endif

  // Prepare the authentication command //
  pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;   /* Data Exchange Header */
    3414:	80 e4       	ldi	r24, 0x40	; 64
    3416:	80 93 ff 0b 	sts	0x0BFF, r24	; 0x800bff <pn532_packetbuffer>
  pn532_packetbuffer[1] = 1;                              /* Max card numbers */
    341a:	81 e0       	ldi	r24, 0x01	; 1
    341c:	80 93 00 0c 	sts	0x0C00, r24	; 0x800c00 <pn532_packetbuffer+0x1>
  pn532_packetbuffer[2] = (keyNumber) ? MIFARE_CMD_AUTH_B : MIFARE_CMD_AUTH_A;
    3420:	e1 10       	cpse	r14, r1
    3422:	02 c0       	rjmp	.+4      	; 0x3428 <_ZN14Adafruit_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x4c>
    3424:	80 e6       	ldi	r24, 0x60	; 96
    3426:	01 c0       	rjmp	.+2      	; 0x342a <_ZN14Adafruit_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x4e>
    3428:	81 e6       	ldi	r24, 0x61	; 97
    342a:	80 93 01 0c 	sts	0x0C01, r24	; 0x800c01 <pn532_packetbuffer+0x2>
  pn532_packetbuffer[3] = blockNumber;                    /* Block Number (1K = 0..63, 4K = 0..255 */
    342e:	00 93 02 0c 	sts	0x0C02, r16	; 0x800c02 <pn532_packetbuffer+0x3>
  memcpy (pn532_packetbuffer+4, _key, 6);
    3432:	86 e0       	ldi	r24, 0x06	; 6
    3434:	f5 01       	movw	r30, r10
    3436:	a3 e0       	ldi	r26, 0x03	; 3
    3438:	bc e0       	ldi	r27, 0x0C	; 12
    343a:	01 90       	ld	r0, Z+
    343c:	0d 92       	st	X+, r0
    343e:	8a 95       	dec	r24
    3440:	e1 f7       	brne	.-8      	; 0x343a <_ZN14Adafruit_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x5e>
  for (i = 0; i < _uidLen; i++)
    3442:	80 e0       	ldi	r24, 0x00	; 0
    3444:	4d 85       	ldd	r20, Y+13	; 0x0d
    3446:	84 17       	cp	r24, r20
    3448:	60 f4       	brcc	.+24     	; 0x3462 <_ZN14Adafruit_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x86>
  {
    pn532_packetbuffer[10+i] = _uid[i];                /* 4 byte card ID */
    344a:	28 2f       	mov	r18, r24
    344c:	30 e0       	ldi	r19, 0x00	; 0
    344e:	fe 01       	movw	r30, r28
    3450:	e2 0f       	add	r30, r18
    3452:	f3 1f       	adc	r31, r19
    3454:	96 81       	ldd	r25, Z+6	; 0x06
    3456:	f9 01       	movw	r30, r18
    3458:	e1 50       	subi	r30, 0x01	; 1
    345a:	f4 4f       	sbci	r31, 0xF4	; 244
    345c:	92 87       	std	Z+10, r25	; 0x0a
  pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;   /* Data Exchange Header */
  pn532_packetbuffer[1] = 1;                              /* Max card numbers */
  pn532_packetbuffer[2] = (keyNumber) ? MIFARE_CMD_AUTH_B : MIFARE_CMD_AUTH_A;
  pn532_packetbuffer[3] = blockNumber;                    /* Block Number (1K = 0..63, 4K = 0..255 */
  memcpy (pn532_packetbuffer+4, _key, 6);
  for (i = 0; i < _uidLen; i++)
    345e:	8f 5f       	subi	r24, 0xFF	; 255
    3460:	f1 cf       	rjmp	.-30     	; 0x3444 <_ZN14Adafruit_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x68>
  {
    pn532_packetbuffer[10+i] = _uid[i];                /* 4 byte card ID */
  }

  if (! sendCommandCheckAck(pn532_packetbuffer, 10+_uidLen))
    3462:	46 5f       	subi	r20, 0xF6	; 246
    3464:	28 ee       	ldi	r18, 0xE8	; 232
    3466:	33 e0       	ldi	r19, 0x03	; 3
    3468:	6f ef       	ldi	r22, 0xFF	; 255
    346a:	7b e0       	ldi	r23, 0x0B	; 11
    346c:	ce 01       	movw	r24, r28
    346e:	6e de       	rcall	.-804    	; 0x314c <_ZN14Adafruit_PN53219sendCommandCheckAckEPhhj>
    3470:	88 23       	and	r24, r24
    3472:	49 f0       	breq	.+18     	; 0x3486 <_ZN14Adafruit_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0xaa>
    return 0;

  // Read the response packet
  readdata(pn532_packetbuffer, 12);
    3474:	4c e0       	ldi	r20, 0x0C	; 12
    3476:	6f ef       	ldi	r22, 0xFF	; 255
    3478:	7b e0       	ldi	r23, 0x0B	; 11
    347a:	ce 01       	movw	r24, r28
    347c:	19 dd       	rcall	.-1486   	; 0x2eb0 <_ZN14Adafruit_PN5328readdataEPhh>
  {
    pn532_packetbuffer[10+i] = _uid[i];                /* 4 byte card ID */
  }

  if (! sendCommandCheckAck(pn532_packetbuffer, 10+_uidLen))
    return 0;
    347e:	81 e0       	ldi	r24, 0x01	; 1
    3480:	90 91 06 0c 	lds	r25, 0x0C06	; 0x800c06 <pn532_packetbuffer+0x7>
    3484:	91 11       	cpse	r25, r1
    3486:	80 e0       	ldi	r24, 0x00	; 0
    #endif
    return 0;
  }

  return 1;
}
    3488:	df 91       	pop	r29
    348a:	cf 91       	pop	r28
    348c:	1f 91       	pop	r17
    348e:	0f 91       	pop	r16
    3490:	ef 90       	pop	r14
    3492:	df 90       	pop	r13
    3494:	cf 90       	pop	r12
    3496:	bf 90       	pop	r11
    3498:	af 90       	pop	r10
    349a:	08 95       	ret

0000349c <_ZN14Adafruit_PN53227mifareclassic_ReadDataBlockEhPh>:

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
uint8_t Adafruit_PN532::mifareclassic_ReadDataBlock (uint8_t blockNumber, uint8_t * data)
{
    349c:	0f 93       	push	r16
    349e:	1f 93       	push	r17
    34a0:	cf 93       	push	r28
    34a2:	df 93       	push	r29
    34a4:	ec 01       	movw	r28, r24
    34a6:	8a 01       	movw	r16, r20
  #ifdef MIFAREDEBUG
    PN532DEBUGPRINT.print(F("Trying to read 16 bytes from block "));PN532DEBUGPRINT.println(blockNumber);
  #endif

  /* Prepare the command */
  pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;
    34a8:	80 e4       	ldi	r24, 0x40	; 64
    34aa:	80 93 ff 0b 	sts	0x0BFF, r24	; 0x800bff <pn532_packetbuffer>
  pn532_packetbuffer[1] = 1;                      /* Card number */
    34ae:	81 e0       	ldi	r24, 0x01	; 1
    34b0:	80 93 00 0c 	sts	0x0C00, r24	; 0x800c00 <pn532_packetbuffer+0x1>
  pn532_packetbuffer[2] = MIFARE_CMD_READ;        /* Mifare Read command = 0x30 */
    34b4:	80 e3       	ldi	r24, 0x30	; 48
    34b6:	80 93 01 0c 	sts	0x0C01, r24	; 0x800c01 <pn532_packetbuffer+0x2>
  pn532_packetbuffer[3] = blockNumber;            /* Block Number (0..63 for 1K, 0..255 for 4K) */
    34ba:	60 93 02 0c 	sts	0x0C02, r22	; 0x800c02 <pn532_packetbuffer+0x3>

  /* Send the command */
  if (! sendCommandCheckAck(pn532_packetbuffer, 4))
    34be:	28 ee       	ldi	r18, 0xE8	; 232
    34c0:	33 e0       	ldi	r19, 0x03	; 3
    34c2:	44 e0       	ldi	r20, 0x04	; 4
    34c4:	6f ef       	ldi	r22, 0xFF	; 255
    34c6:	7b e0       	ldi	r23, 0x0B	; 11
    34c8:	ce 01       	movw	r24, r28
    34ca:	40 de       	rcall	.-896    	; 0x314c <_ZN14Adafruit_PN53219sendCommandCheckAckEPhhj>
    34cc:	81 11       	cpse	r24, r1
    34ce:	02 c0       	rjmp	.+4      	; 0x34d4 <_ZN14Adafruit_PN53227mifareclassic_ReadDataBlockEhPh+0x38>
  {
    #ifdef MIFAREDEBUG
      PN532DEBUGPRINT.println(F("Failed to receive ACK for read command"));
    #endif
    return 0;
    34d0:	80 e0       	ldi	r24, 0x00	; 0
    34d2:	12 c0       	rjmp	.+36     	; 0x34f8 <_ZN14Adafruit_PN53227mifareclassic_ReadDataBlockEhPh+0x5c>
  }

  /* Read the response packet */
  readdata(pn532_packetbuffer, 26);
    34d4:	4a e1       	ldi	r20, 0x1A	; 26
    34d6:	6f ef       	ldi	r22, 0xFF	; 255
    34d8:	7b e0       	ldi	r23, 0x0B	; 11
    34da:	ce 01       	movw	r24, r28
    34dc:	e9 dc       	rcall	.-1582   	; 0x2eb0 <_ZN14Adafruit_PN5328readdataEPhh>

  /* If byte 8 isn't 0x00 we probably have an error */
  if (pn532_packetbuffer[7] != 0x00)
    34de:	80 91 06 0c 	lds	r24, 0x0C06	; 0x800c06 <pn532_packetbuffer+0x7>
    34e2:	81 11       	cpse	r24, r1
    34e4:	f5 cf       	rjmp	.-22     	; 0x34d0 <_ZN14Adafruit_PN53227mifareclassic_ReadDataBlockEhPh+0x34>
    return 0;
  }

  /* Copy the 16 data bytes to the output buffer        */
  /* Block content starts at byte 9 of a valid response */
  memcpy (data, pn532_packetbuffer+8, 16);
    34e6:	80 e1       	ldi	r24, 0x10	; 16
    34e8:	e7 e0       	ldi	r30, 0x07	; 7
    34ea:	fc e0       	ldi	r31, 0x0C	; 12
    34ec:	d8 01       	movw	r26, r16
    34ee:	01 90       	ld	r0, Z+
    34f0:	0d 92       	st	X+, r0
    34f2:	8a 95       	dec	r24
    34f4:	e1 f7       	brne	.-8      	; 0x34ee <_ZN14Adafruit_PN53227mifareclassic_ReadDataBlockEhPh+0x52>
    PN532DEBUGPRINT.print(F("Block "));
    PN532DEBUGPRINT.println(blockNumber);
    Adafruit_PN532::PrintHexChar(data, 16);
  #endif

  return 1;
    34f6:	81 e0       	ldi	r24, 0x01	; 1
}
    34f8:	df 91       	pop	r29
    34fa:	cf 91       	pop	r28
    34fc:	1f 91       	pop	r17
    34fe:	0f 91       	pop	r16
    3500:	08 95       	ret

00003502 <_ZN14Adafruit_PN53228mifareclassic_WriteDataBlockEhPh>:

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
uint8_t Adafruit_PN532::mifareclassic_WriteDataBlock (uint8_t blockNumber, uint8_t * data)
{
    3502:	cf 93       	push	r28
    3504:	df 93       	push	r29
    3506:	ec 01       	movw	r28, r24
  #ifdef MIFAREDEBUG
    PN532DEBUGPRINT.print(F("Trying to write 16 bytes to block "));PN532DEBUGPRINT.println(blockNumber);
  #endif

  /* Prepare the first command */
  pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;
    3508:	80 e4       	ldi	r24, 0x40	; 64
    350a:	80 93 ff 0b 	sts	0x0BFF, r24	; 0x800bff <pn532_packetbuffer>
  pn532_packetbuffer[1] = 1;                      /* Card number */
    350e:	81 e0       	ldi	r24, 0x01	; 1
    3510:	80 93 00 0c 	sts	0x0C00, r24	; 0x800c00 <pn532_packetbuffer+0x1>
  pn532_packetbuffer[2] = MIFARE_CMD_WRITE;       /* Mifare Write command = 0xA0 */
    3514:	80 ea       	ldi	r24, 0xA0	; 160
    3516:	80 93 01 0c 	sts	0x0C01, r24	; 0x800c01 <pn532_packetbuffer+0x2>
  pn532_packetbuffer[3] = blockNumber;            /* Block Number (0..63 for 1K, 0..255 for 4K) */
    351a:	60 93 02 0c 	sts	0x0C02, r22	; 0x800c02 <pn532_packetbuffer+0x3>
  memcpy (pn532_packetbuffer+4, data, 16);          /* Data Payload */
    351e:	80 e1       	ldi	r24, 0x10	; 16
    3520:	fa 01       	movw	r30, r20
    3522:	a3 e0       	ldi	r26, 0x03	; 3
    3524:	bc e0       	ldi	r27, 0x0C	; 12
    3526:	01 90       	ld	r0, Z+
    3528:	0d 92       	st	X+, r0
    352a:	8a 95       	dec	r24
    352c:	e1 f7       	brne	.-8      	; 0x3526 <_ZN14Adafruit_PN53228mifareclassic_WriteDataBlockEhPh+0x24>

  /* Send the command */
  if (! sendCommandCheckAck(pn532_packetbuffer, 20))
    352e:	28 ee       	ldi	r18, 0xE8	; 232
    3530:	33 e0       	ldi	r19, 0x03	; 3
    3532:	44 e1       	ldi	r20, 0x14	; 20
    3534:	6f ef       	ldi	r22, 0xFF	; 255
    3536:	7b e0       	ldi	r23, 0x0B	; 11
    3538:	ce 01       	movw	r24, r28
    353a:	08 de       	rcall	.-1008   	; 0x314c <_ZN14Adafruit_PN53219sendCommandCheckAckEPhhj>
    353c:	88 23       	and	r24, r24
    353e:	69 f0       	breq	.+26     	; 0x355a <_ZN14Adafruit_PN53228mifareclassic_WriteDataBlockEhPh+0x58>
    #endif

    // Return Failed Signal
    return 0;
  }
  delay(10);
    3540:	6a e0       	ldi	r22, 0x0A	; 10
    3542:	70 e0       	ldi	r23, 0x00	; 0
    3544:	80 e0       	ldi	r24, 0x00	; 0
    3546:	90 e0       	ldi	r25, 0x00	; 0
    3548:	0e 94 5f 3c 	call	0x78be	; 0x78be <delay>

  /* Read the response packet */
  readdata(pn532_packetbuffer, 26);
    354c:	4a e1       	ldi	r20, 0x1A	; 26
    354e:	6f ef       	ldi	r22, 0xFF	; 255
    3550:	7b e0       	ldi	r23, 0x0B	; 11
    3552:	ce 01       	movw	r24, r28
    3554:	ad dc       	rcall	.-1702   	; 0x2eb0 <_ZN14Adafruit_PN5328readdataEPhh>
    3556:	81 e0       	ldi	r24, 0x01	; 1
    3558:	01 c0       	rjmp	.+2      	; 0x355c <_ZN14Adafruit_PN53228mifareclassic_WriteDataBlockEhPh+0x5a>
  if (! sendCommandCheckAck(pn532_packetbuffer, 20))
  {
    #ifdef MIFAREDEBUG
      PN532DEBUGPRINT.println(F("Failed to receive ACK for write command"));
    #endif
    return 0;
    355a:	80 e0       	ldi	r24, 0x00	; 0

  /* Read the response packet */
  readdata(pn532_packetbuffer, 26);

  return 1;
}
    355c:	df 91       	pop	r29
    355e:	cf 91       	pop	r28
    3560:	08 95       	ret

00003562 <_ZL9date2daysjhh>:
} // of method pinAlarm()                                                     //                                  //
/*******************************************************************************************************************
** Method pinSquareWave() will set the control register flag to make the INT/SQW Pin produce a 1Hz signal         **
*******************************************************************************************************************/
void DS3231M_Class::pinSquareWave() {                                         //                                  //
  writeByte(DS3231M_CONTROL,readByte(DS3231M_CONTROL)|0x4);                   // Set bit 3 to off                 //
    3562:	80 3d       	cpi	r24, 0xD0	; 208
    3564:	27 e0       	ldi	r18, 0x07	; 7
    3566:	92 07       	cpc	r25, r18
    3568:	10 f0       	brcs	.+4      	; 0x356e <_ZL9date2daysjhh+0xc>
    356a:	80 5d       	subi	r24, 0xD0	; 208
    356c:	97 40       	sbci	r25, 0x07	; 7
    356e:	50 e0       	ldi	r21, 0x00	; 0
    3570:	eb e1       	ldi	r30, 0x1B	; 27
    3572:	f2 e0       	ldi	r31, 0x02	; 2
    3574:	21 e0       	ldi	r18, 0x01	; 1
    3576:	26 17       	cp	r18, r22
    3578:	30 f4       	brcc	.+12     	; 0x3586 <_ZL9date2daysjhh+0x24>
    357a:	34 91       	lpm	r19, Z
    357c:	43 0f       	add	r20, r19
    357e:	51 1d       	adc	r21, r1
    3580:	2f 5f       	subi	r18, 0xFF	; 255
    3582:	31 96       	adiw	r30, 0x01	; 1
    3584:	f8 cf       	rjmp	.-16     	; 0x3576 <_ZL9date2daysjhh+0x14>
    3586:	63 30       	cpi	r22, 0x03	; 3
    3588:	38 f0       	brcs	.+14     	; 0x3598 <_ZL9date2daysjhh+0x36>
    358a:	9c 01       	movw	r18, r24
    358c:	23 70       	andi	r18, 0x03	; 3
    358e:	33 27       	eor	r19, r19
    3590:	23 2b       	or	r18, r19
    3592:	11 f4       	brne	.+4      	; 0x3598 <_ZL9date2daysjhh+0x36>
    3594:	4f 5f       	subi	r20, 0xFF	; 255
    3596:	5f 4f       	sbci	r21, 0xFF	; 255
    3598:	bc 01       	movw	r22, r24
    359a:	6d 5f       	subi	r22, 0xFD	; 253
    359c:	7f 4f       	sbci	r23, 0xFF	; 255
    359e:	76 95       	lsr	r23
    35a0:	67 95       	ror	r22
    35a2:	76 95       	lsr	r23
    35a4:	67 95       	ror	r22
    35a6:	ed e6       	ldi	r30, 0x6D	; 109
    35a8:	f1 e0       	ldi	r31, 0x01	; 1
    35aa:	8e 9f       	mul	r24, r30
    35ac:	90 01       	movw	r18, r0
    35ae:	8f 9f       	mul	r24, r31
    35b0:	30 0d       	add	r19, r0
    35b2:	9e 9f       	mul	r25, r30
    35b4:	30 0d       	add	r19, r0
    35b6:	11 24       	eor	r1, r1
    35b8:	c9 01       	movw	r24, r18
    35ba:	01 97       	sbiw	r24, 0x01	; 1
    35bc:	86 0f       	add	r24, r22
    35be:	97 1f       	adc	r25, r23
    35c0:	84 0f       	add	r24, r20
    35c2:	95 1f       	adc	r25, r21
    35c4:	08 95       	ret

000035c6 <_ZL6conv2dPKc>:
    35c6:	fc 01       	movw	r30, r24
    35c8:	90 81       	ld	r25, Z
    35ca:	90 53       	subi	r25, 0x30	; 48
    35cc:	9a 30       	cpi	r25, 0x0A	; 10
    35ce:	08 f0       	brcs	.+2      	; 0x35d2 <_ZL6conv2dPKc+0xc>
    35d0:	90 e0       	ldi	r25, 0x00	; 0
    35d2:	81 81       	ldd	r24, Z+1	; 0x01
    35d4:	80 53       	subi	r24, 0x30	; 48
    35d6:	2a e0       	ldi	r18, 0x0A	; 10
    35d8:	92 9f       	mul	r25, r18
    35da:	80 0d       	add	r24, r0
    35dc:	11 24       	eor	r1, r1
    35de:	08 95       	ret

000035e0 <_ZN8DateTimeC1Em>:
    35e0:	8f 92       	push	r8
    35e2:	9f 92       	push	r9
    35e4:	af 92       	push	r10
    35e6:	bf 92       	push	r11
    35e8:	cf 92       	push	r12
    35ea:	df 92       	push	r13
    35ec:	ef 92       	push	r14
    35ee:	ff 92       	push	r15
    35f0:	cf 93       	push	r28
    35f2:	df 93       	push	r29
    35f4:	ec 01       	movw	r28, r24
    35f6:	6a 01       	movw	r12, r20
    35f8:	7b 01       	movw	r14, r22
    35fa:	80 e8       	ldi	r24, 0x80	; 128
    35fc:	c8 1a       	sub	r12, r24
    35fe:	83 e4       	ldi	r24, 0x43	; 67
    3600:	d8 0a       	sbc	r13, r24
    3602:	8d e6       	ldi	r24, 0x6D	; 109
    3604:	e8 0a       	sbc	r14, r24
    3606:	88 e3       	ldi	r24, 0x38	; 56
    3608:	f8 0a       	sbc	r15, r24
    360a:	8c e3       	ldi	r24, 0x3C	; 60
    360c:	88 2e       	mov	r8, r24
    360e:	91 2c       	mov	r9, r1
    3610:	a1 2c       	mov	r10, r1
    3612:	b1 2c       	mov	r11, r1
    3614:	c7 01       	movw	r24, r14
    3616:	b6 01       	movw	r22, r12
    3618:	a5 01       	movw	r20, r10
    361a:	94 01       	movw	r18, r8
    361c:	0e 94 63 41 	call	0x82c6	; 0x82c6 <__udivmodsi4>
    3620:	6d 83       	std	Y+5, r22	; 0x05
    3622:	ca 01       	movw	r24, r20
    3624:	b9 01       	movw	r22, r18
    3626:	a5 01       	movw	r20, r10
    3628:	94 01       	movw	r18, r8
    362a:	0e 94 63 41 	call	0x82c6	; 0x82c6 <__udivmodsi4>
    362e:	6c 83       	std	Y+4, r22	; 0x04
    3630:	c7 01       	movw	r24, r14
    3632:	b6 01       	movw	r22, r12
    3634:	20 e1       	ldi	r18, 0x10	; 16
    3636:	3e e0       	ldi	r19, 0x0E	; 14
    3638:	40 e0       	ldi	r20, 0x00	; 0
    363a:	50 e0       	ldi	r21, 0x00	; 0
    363c:	0e 94 63 41 	call	0x82c6	; 0x82c6 <__udivmodsi4>
    3640:	ca 01       	movw	r24, r20
    3642:	b9 01       	movw	r22, r18
    3644:	28 e1       	ldi	r18, 0x18	; 24
    3646:	30 e0       	ldi	r19, 0x00	; 0
    3648:	40 e0       	ldi	r20, 0x00	; 0
    364a:	50 e0       	ldi	r21, 0x00	; 0
    364c:	0e 94 63 41 	call	0x82c6	; 0x82c6 <__udivmodsi4>
    3650:	6b 83       	std	Y+3, r22	; 0x03
    3652:	c7 01       	movw	r24, r14
    3654:	b6 01       	movw	r22, r12
    3656:	20 e8       	ldi	r18, 0x80	; 128
    3658:	31 e5       	ldi	r19, 0x51	; 81
    365a:	41 e0       	ldi	r20, 0x01	; 1
    365c:	50 e0       	ldi	r21, 0x00	; 0
    365e:	0e 94 63 41 	call	0x82c6	; 0x82c6 <__udivmodsi4>
    3662:	18 82       	st	Y, r1
    3664:	88 81       	ld	r24, Y
    3666:	98 2f       	mov	r25, r24
    3668:	93 70       	andi	r25, 0x03	; 3
    366a:	41 e0       	ldi	r20, 0x01	; 1
    366c:	50 e0       	ldi	r21, 0x00	; 0
    366e:	11 f0       	breq	.+4      	; 0x3674 <_ZN8DateTimeC1Em+0x94>
    3670:	40 e0       	ldi	r20, 0x00	; 0
    3672:	50 e0       	ldi	r21, 0x00	; 0
    3674:	ba 01       	movw	r22, r20
    3676:	63 59       	subi	r22, 0x93	; 147
    3678:	7e 4f       	sbci	r23, 0xFE	; 254
    367a:	26 17       	cp	r18, r22
    367c:	37 07       	cpc	r19, r23
    367e:	38 f0       	brcs	.+14     	; 0x368e <_ZN8DateTimeC1Em+0xae>
    3680:	24 1b       	sub	r18, r20
    3682:	35 0b       	sbc	r19, r21
    3684:	2d 56       	subi	r18, 0x6D	; 109
    3686:	31 40       	sbci	r19, 0x01	; 1
    3688:	8f 5f       	subi	r24, 0xFF	; 255
    368a:	88 83       	st	Y, r24
    368c:	eb cf       	rjmp	.-42     	; 0x3664 <_ZN8DateTimeC1Em+0x84>
    368e:	81 e0       	ldi	r24, 0x01	; 1
    3690:	89 83       	std	Y+1, r24	; 0x01
    3692:	89 81       	ldd	r24, Y+1	; 0x01
    3694:	e8 2f       	mov	r30, r24
    3696:	f0 e0       	ldi	r31, 0x00	; 0
    3698:	e6 5e       	subi	r30, 0xE6	; 230
    369a:	fd 4f       	sbci	r31, 0xFD	; 253
    369c:	e4 91       	lpm	r30, Z
    369e:	91 11       	cpse	r25, r1
    36a0:	03 c0       	rjmp	.+6      	; 0x36a8 <_ZN8DateTimeC1Em+0xc8>
    36a2:	82 30       	cpi	r24, 0x02	; 2
    36a4:	09 f4       	brne	.+2      	; 0x36a8 <_ZN8DateTimeC1Em+0xc8>
    36a6:	ef 5f       	subi	r30, 0xFF	; 255
    36a8:	f0 e0       	ldi	r31, 0x00	; 0
    36aa:	2e 17       	cp	r18, r30
    36ac:	3f 07       	cpc	r19, r31
    36ae:	20 f0       	brcs	.+8      	; 0x36b8 <_ZN8DateTimeC1Em+0xd8>
    36b0:	2e 1b       	sub	r18, r30
    36b2:	3f 0b       	sbc	r19, r31
    36b4:	8f 5f       	subi	r24, 0xFF	; 255
    36b6:	ec cf       	rjmp	.-40     	; 0x3690 <_ZN8DateTimeC1Em+0xb0>
    36b8:	2f 5f       	subi	r18, 0xFF	; 255
    36ba:	2a 83       	std	Y+2, r18	; 0x02
    36bc:	df 91       	pop	r29
    36be:	cf 91       	pop	r28
    36c0:	ff 90       	pop	r15
    36c2:	ef 90       	pop	r14
    36c4:	df 90       	pop	r13
    36c6:	cf 90       	pop	r12
    36c8:	bf 90       	pop	r11
    36ca:	af 90       	pop	r10
    36cc:	9f 90       	pop	r9
    36ce:	8f 90       	pop	r8
    36d0:	08 95       	ret

000036d2 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>:
    36d2:	ef 92       	push	r14
    36d4:	ff 92       	push	r15
    36d6:	0f 93       	push	r16
    36d8:	1f 93       	push	r17
    36da:	cf 93       	push	r28
    36dc:	df 93       	push	r29
    36de:	cd b7       	in	r28, 0x3d	; 61
    36e0:	de b7       	in	r29, 0x3e	; 62
    36e2:	2b 97       	sbiw	r28, 0x0b	; 11
    36e4:	0f b6       	in	r0, 0x3f	; 63
    36e6:	f8 94       	cli
    36e8:	de bf       	out	0x3e, r29	; 62
    36ea:	0f be       	out	0x3f, r0	; 63
    36ec:	cd bf       	out	0x3d, r28	; 61
    36ee:	8c 01       	movw	r16, r24
    36f0:	7a 01       	movw	r14, r20
    36f2:	4b e0       	ldi	r20, 0x0B	; 11
    36f4:	50 e0       	ldi	r21, 0x00	; 0
    36f6:	ce 01       	movw	r24, r28
    36f8:	01 96       	adiw	r24, 0x01	; 1
    36fa:	0e 94 ef 44 	call	0x89de	; 0x89de <memcpy_P>
    36fe:	ce 01       	movw	r24, r28
    3700:	0a 96       	adiw	r24, 0x0a	; 10
    3702:	61 df       	rcall	.-318    	; 0x35c6 <_ZL6conv2dPKc>
    3704:	f8 01       	movw	r30, r16
    3706:	80 83       	st	Z, r24
    3708:	e9 81       	ldd	r30, Y+1	; 0x01
    370a:	8e 2f       	mov	r24, r30
    370c:	90 e0       	ldi	r25, 0x00	; 0
    370e:	fc 01       	movw	r30, r24
    3710:	e1 54       	subi	r30, 0x41	; 65
    3712:	f1 09       	sbc	r31, r1
    3714:	e3 31       	cpi	r30, 0x13	; 19
    3716:	f1 05       	cpc	r31, r1
    3718:	48 f5       	brcc	.+82     	; 0x376c <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
    371a:	ef 5a       	subi	r30, 0xAF	; 175
    371c:	ff 4f       	sbci	r31, 0xFF	; 255
    371e:	0c 94 85 41 	jmp	0x830a	; 0x830a <__tablejump2__>
    3722:	8a 81       	ldd	r24, Y+2	; 0x02
    3724:	81 36       	cpi	r24, 0x61	; 97
    3726:	29 f0       	breq	.+10     	; 0x3732 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x60>
    3728:	8b 81       	ldd	r24, Y+3	; 0x03
    372a:	8e 36       	cpi	r24, 0x6E	; 110
    372c:	21 f0       	breq	.+8      	; 0x3736 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x64>
    372e:	87 e0       	ldi	r24, 0x07	; 7
    3730:	1b c0       	rjmp	.+54     	; 0x3768 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    3732:	81 e0       	ldi	r24, 0x01	; 1
    3734:	19 c0       	rjmp	.+50     	; 0x3768 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    3736:	86 e0       	ldi	r24, 0x06	; 6
    3738:	17 c0       	rjmp	.+46     	; 0x3768 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    373a:	82 e0       	ldi	r24, 0x02	; 2
    373c:	15 c0       	rjmp	.+42     	; 0x3768 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    373e:	8b 81       	ldd	r24, Y+3	; 0x03
    3740:	82 37       	cpi	r24, 0x72	; 114
    3742:	11 f0       	breq	.+4      	; 0x3748 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x76>
    3744:	88 e0       	ldi	r24, 0x08	; 8
    3746:	10 c0       	rjmp	.+32     	; 0x3768 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    3748:	84 e0       	ldi	r24, 0x04	; 4
    374a:	0e c0       	rjmp	.+28     	; 0x3768 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    374c:	8b 81       	ldd	r24, Y+3	; 0x03
    374e:	82 37       	cpi	r24, 0x72	; 114
    3750:	11 f0       	breq	.+4      	; 0x3756 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x84>
    3752:	85 e0       	ldi	r24, 0x05	; 5
    3754:	09 c0       	rjmp	.+18     	; 0x3768 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    3756:	83 e0       	ldi	r24, 0x03	; 3
    3758:	07 c0       	rjmp	.+14     	; 0x3768 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    375a:	89 e0       	ldi	r24, 0x09	; 9
    375c:	05 c0       	rjmp	.+10     	; 0x3768 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    375e:	8a e0       	ldi	r24, 0x0A	; 10
    3760:	03 c0       	rjmp	.+6      	; 0x3768 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    3762:	8b e0       	ldi	r24, 0x0B	; 11
    3764:	01 c0       	rjmp	.+2      	; 0x3768 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    3766:	8c e0       	ldi	r24, 0x0C	; 12
    3768:	f8 01       	movw	r30, r16
    376a:	81 83       	std	Z+1, r24	; 0x01
    376c:	ce 01       	movw	r24, r28
    376e:	05 96       	adiw	r24, 0x05	; 5
    3770:	2a df       	rcall	.-428    	; 0x35c6 <_ZL6conv2dPKc>
    3772:	f8 01       	movw	r30, r16
    3774:	82 83       	std	Z+2, r24	; 0x02
    3776:	48 e0       	ldi	r20, 0x08	; 8
    3778:	50 e0       	ldi	r21, 0x00	; 0
    377a:	b7 01       	movw	r22, r14
    377c:	ce 01       	movw	r24, r28
    377e:	01 96       	adiw	r24, 0x01	; 1
    3780:	0e 94 ef 44 	call	0x89de	; 0x89de <memcpy_P>
    3784:	ce 01       	movw	r24, r28
    3786:	01 96       	adiw	r24, 0x01	; 1
    3788:	1e df       	rcall	.-452    	; 0x35c6 <_ZL6conv2dPKc>
    378a:	f8 01       	movw	r30, r16
    378c:	83 83       	std	Z+3, r24	; 0x03
    378e:	ce 01       	movw	r24, r28
    3790:	04 96       	adiw	r24, 0x04	; 4
    3792:	19 df       	rcall	.-462    	; 0x35c6 <_ZL6conv2dPKc>
    3794:	f8 01       	movw	r30, r16
    3796:	84 83       	std	Z+4, r24	; 0x04
    3798:	ce 01       	movw	r24, r28
    379a:	07 96       	adiw	r24, 0x07	; 7
    379c:	14 df       	rcall	.-472    	; 0x35c6 <_ZL6conv2dPKc>
    379e:	f8 01       	movw	r30, r16
    37a0:	85 83       	std	Z+5, r24	; 0x05
    37a2:	2b 96       	adiw	r28, 0x0b	; 11
    37a4:	0f b6       	in	r0, 0x3f	; 63
    37a6:	f8 94       	cli
    37a8:	de bf       	out	0x3e, r29	; 62
    37aa:	0f be       	out	0x3f, r0	; 63
    37ac:	cd bf       	out	0x3d, r28	; 61
    37ae:	df 91       	pop	r29
    37b0:	cf 91       	pop	r28
    37b2:	1f 91       	pop	r17
    37b4:	0f 91       	pop	r16
    37b6:	ff 90       	pop	r15
    37b8:	ef 90       	pop	r14
    37ba:	08 95       	ret

000037bc <_ZNK8DateTime12dayOfTheWeekEv>:
    37bc:	fc 01       	movw	r30, r24
    37be:	80 81       	ld	r24, Z
    37c0:	42 81       	ldd	r20, Z+2	; 0x02
    37c2:	61 81       	ldd	r22, Z+1	; 0x01
    37c4:	90 e0       	ldi	r25, 0x00	; 0
    37c6:	cd de       	rcall	.-614    	; 0x3562 <_ZL9date2daysjhh>
    37c8:	06 96       	adiw	r24, 0x06	; 6
    37ca:	67 e0       	ldi	r22, 0x07	; 7
    37cc:	70 e0       	ldi	r23, 0x00	; 0
    37ce:	0c 94 4f 41 	jmp	0x829e	; 0x829e <__udivmodhi4>
    37d2:	08 95       	ret

000037d4 <_ZNK8DateTime8unixtimeEv>:
    37d4:	ef 92       	push	r14
    37d6:	ff 92       	push	r15
    37d8:	0f 93       	push	r16
    37da:	1f 93       	push	r17
    37dc:	cf 93       	push	r28
    37de:	df 93       	push	r29
    37e0:	ec 01       	movw	r28, r24
    37e2:	88 81       	ld	r24, Y
    37e4:	4a 81       	ldd	r20, Y+2	; 0x02
    37e6:	69 81       	ldd	r22, Y+1	; 0x01
    37e8:	90 e0       	ldi	r25, 0x00	; 0
    37ea:	bb de       	rcall	.-650    	; 0x3562 <_ZL9date2daysjhh>
    37ec:	9c 01       	movw	r18, r24
    37ee:	a8 e1       	ldi	r26, 0x18	; 24
    37f0:	b0 e0       	ldi	r27, 0x00	; 0
    37f2:	0e 94 8e 41 	call	0x831c	; 0x831c <__umulhisi3>
    37f6:	2b 81       	ldd	r18, Y+3	; 0x03
    37f8:	7b 01       	movw	r14, r22
    37fa:	8c 01       	movw	r16, r24
    37fc:	e2 0e       	add	r14, r18
    37fe:	f1 1c       	adc	r15, r1
    3800:	01 1d       	adc	r16, r1
    3802:	11 1d       	adc	r17, r1
    3804:	a8 01       	movw	r20, r16
    3806:	97 01       	movw	r18, r14
    3808:	ac e3       	ldi	r26, 0x3C	; 60
    380a:	b0 e0       	ldi	r27, 0x00	; 0
    380c:	0e 94 9d 41 	call	0x833a	; 0x833a <__muluhisi3>
    3810:	2c 81       	ldd	r18, Y+4	; 0x04
    3812:	7b 01       	movw	r14, r22
    3814:	8c 01       	movw	r16, r24
    3816:	e2 0e       	add	r14, r18
    3818:	f1 1c       	adc	r15, r1
    381a:	01 1d       	adc	r16, r1
    381c:	11 1d       	adc	r17, r1
    381e:	a8 01       	movw	r20, r16
    3820:	97 01       	movw	r18, r14
    3822:	0e 94 9d 41 	call	0x833a	; 0x833a <__muluhisi3>
    3826:	2d 81       	ldd	r18, Y+5	; 0x05
    3828:	dc 01       	movw	r26, r24
    382a:	cb 01       	movw	r24, r22
    382c:	82 0f       	add	r24, r18
    382e:	91 1d       	adc	r25, r1
    3830:	a1 1d       	adc	r26, r1
    3832:	b1 1d       	adc	r27, r1
    3834:	bc 01       	movw	r22, r24
    3836:	cd 01       	movw	r24, r26
    3838:	60 58       	subi	r22, 0x80	; 128
    383a:	7c 4b       	sbci	r23, 0xBC	; 188
    383c:	82 49       	sbci	r24, 0x92	; 146
    383e:	97 4c       	sbci	r25, 0xC7	; 199
    3840:	df 91       	pop	r29
    3842:	cf 91       	pop	r28
    3844:	1f 91       	pop	r17
    3846:	0f 91       	pop	r16
    3848:	ff 90       	pop	r15
    384a:	ef 90       	pop	r14
    384c:	08 95       	ret

0000384e <_ZNK8DateTime11secondstimeEv>:
    384e:	ef 92       	push	r14
    3850:	ff 92       	push	r15
    3852:	0f 93       	push	r16
    3854:	1f 93       	push	r17
    3856:	cf 93       	push	r28
    3858:	df 93       	push	r29
    385a:	ec 01       	movw	r28, r24
    385c:	88 81       	ld	r24, Y
    385e:	4a 81       	ldd	r20, Y+2	; 0x02
    3860:	69 81       	ldd	r22, Y+1	; 0x01
    3862:	90 e0       	ldi	r25, 0x00	; 0
    3864:	7e de       	rcall	.-772    	; 0x3562 <_ZL9date2daysjhh>
    3866:	9c 01       	movw	r18, r24
    3868:	a8 e1       	ldi	r26, 0x18	; 24
    386a:	b0 e0       	ldi	r27, 0x00	; 0
    386c:	0e 94 8e 41 	call	0x831c	; 0x831c <__umulhisi3>
    3870:	2b 81       	ldd	r18, Y+3	; 0x03
    3872:	7b 01       	movw	r14, r22
    3874:	8c 01       	movw	r16, r24
    3876:	e2 0e       	add	r14, r18
    3878:	f1 1c       	adc	r15, r1
    387a:	01 1d       	adc	r16, r1
    387c:	11 1d       	adc	r17, r1
    387e:	a8 01       	movw	r20, r16
    3880:	97 01       	movw	r18, r14
    3882:	ac e3       	ldi	r26, 0x3C	; 60
    3884:	b0 e0       	ldi	r27, 0x00	; 0
    3886:	0e 94 9d 41 	call	0x833a	; 0x833a <__muluhisi3>
    388a:	2c 81       	ldd	r18, Y+4	; 0x04
    388c:	7b 01       	movw	r14, r22
    388e:	8c 01       	movw	r16, r24
    3890:	e2 0e       	add	r14, r18
    3892:	f1 1c       	adc	r15, r1
    3894:	01 1d       	adc	r16, r1
    3896:	11 1d       	adc	r17, r1
    3898:	a8 01       	movw	r20, r16
    389a:	97 01       	movw	r18, r14
    389c:	0e 94 9d 41 	call	0x833a	; 0x833a <__muluhisi3>
    38a0:	2d 81       	ldd	r18, Y+5	; 0x05
    38a2:	62 0f       	add	r22, r18
    38a4:	71 1d       	adc	r23, r1
    38a6:	81 1d       	adc	r24, r1
    38a8:	91 1d       	adc	r25, r1
    38aa:	df 91       	pop	r29
    38ac:	cf 91       	pop	r28
    38ae:	1f 91       	pop	r17
    38b0:	0f 91       	pop	r16
    38b2:	ff 90       	pop	r15
    38b4:	ef 90       	pop	r14
    38b6:	08 95       	ret

000038b8 <_ZN13DS3231M_ClassC1Ev>:
    38b8:	fc 01       	movw	r30, r24
    38ba:	10 82       	st	Z, r1
    38bc:	11 82       	std	Z+1, r1	; 0x01
    38be:	12 82       	std	Z+2, r1	; 0x02
    38c0:	13 82       	std	Z+3, r1	; 0x03
    38c2:	14 82       	std	Z+4, r1	; 0x04
    38c4:	08 95       	ret

000038c6 <_ZN13DS3231M_ClassD1Ev>:
    38c6:	08 95       	ret

000038c8 <_ZN13DS3231M_Class9writeByteEhh>:
    38c8:	0f 93       	push	r16
    38ca:	1f 93       	push	r17
    38cc:	cf 93       	push	r28
    38ce:	df 93       	push	r29
    38d0:	ec 01       	movw	r28, r24
    38d2:	06 2f       	mov	r16, r22
    38d4:	14 2f       	mov	r17, r20
    38d6:	68 e6       	ldi	r22, 0x68	; 104
    38d8:	8f ef       	ldi	r24, 0xFF	; 255
    38da:	9c e0       	ldi	r25, 0x0C	; 12
    38dc:	0e 94 15 38 	call	0x702a	; 0x702a <_ZN7TwoWire17beginTransmissionEh>
    38e0:	60 2f       	mov	r22, r16
    38e2:	8f ef       	ldi	r24, 0xFF	; 255
    38e4:	9c e0       	ldi	r25, 0x0C	; 12
    38e6:	0e 94 c4 37 	call	0x6f88	; 0x6f88 <_ZN7TwoWire5writeEh>
    38ea:	61 2f       	mov	r22, r17
    38ec:	8f ef       	ldi	r24, 0xFF	; 255
    38ee:	9c e0       	ldi	r25, 0x0C	; 12
    38f0:	0e 94 c4 37 	call	0x6f88	; 0x6f88 <_ZN7TwoWire5writeEh>
    38f4:	8f ef       	ldi	r24, 0xFF	; 255
    38f6:	9c e0       	ldi	r25, 0x0C	; 12
    38f8:	0e 94 96 38 	call	0x712c	; 0x712c <_ZN7TwoWire15endTransmissionEv>
    38fc:	88 83       	st	Y, r24
    38fe:	df 91       	pop	r29
    3900:	cf 91       	pop	r28
    3902:	1f 91       	pop	r17
    3904:	0f 91       	pop	r16
    3906:	08 95       	ret

00003908 <_ZN13DS3231M_Class8readByteEh>:
    3908:	1f 93       	push	r17
    390a:	cf 93       	push	r28
    390c:	df 93       	push	r29
    390e:	ec 01       	movw	r28, r24
    3910:	16 2f       	mov	r17, r22
    3912:	68 e6       	ldi	r22, 0x68	; 104
    3914:	8f ef       	ldi	r24, 0xFF	; 255
    3916:	9c e0       	ldi	r25, 0x0C	; 12
    3918:	0e 94 15 38 	call	0x702a	; 0x702a <_ZN7TwoWire17beginTransmissionEh>
    391c:	61 2f       	mov	r22, r17
    391e:	8f ef       	ldi	r24, 0xFF	; 255
    3920:	9c e0       	ldi	r25, 0x0C	; 12
    3922:	0e 94 c4 37 	call	0x6f88	; 0x6f88 <_ZN7TwoWire5writeEh>
    3926:	8f ef       	ldi	r24, 0xFF	; 255
    3928:	9c e0       	ldi	r25, 0x0C	; 12
    392a:	0e 94 96 38 	call	0x712c	; 0x712c <_ZN7TwoWire15endTransmissionEv>
    392e:	88 83       	st	Y, r24
    3930:	41 e0       	ldi	r20, 0x01	; 1
    3932:	68 e6       	ldi	r22, 0x68	; 104
    3934:	8f ef       	ldi	r24, 0xFF	; 255
    3936:	9c e0       	ldi	r25, 0x0C	; 12
    3938:	0e 94 92 38 	call	0x7124	; 0x7124 <_ZN7TwoWire11requestFromEhh>
    393c:	8f ef       	ldi	r24, 0xFF	; 255
    393e:	9c e0       	ldi	r25, 0x0C	; 12
    3940:	0e 94 3e 37 	call	0x6e7c	; 0x6e7c <_ZN7TwoWire4readEv>
    3944:	df 91       	pop	r29
    3946:	cf 91       	pop	r28
    3948:	1f 91       	pop	r17
    394a:	08 95       	ret

0000394c <_ZN13DS3231M_Class5beginEm>:
    394c:	cf 92       	push	r12
    394e:	df 92       	push	r13
    3950:	ef 92       	push	r14
    3952:	ff 92       	push	r15
    3954:	cf 93       	push	r28
    3956:	df 93       	push	r29
    3958:	ec 01       	movw	r28, r24
    395a:	6a 01       	movw	r12, r20
    395c:	7b 01       	movw	r14, r22
    395e:	8f ef       	ldi	r24, 0xFF	; 255
    3960:	9c e0       	ldi	r25, 0x0C	; 12
    3962:	0e 94 02 38 	call	0x7004	; 0x7004 <_ZN7TwoWire5beginEv>
    3966:	b7 01       	movw	r22, r14
    3968:	a6 01       	movw	r20, r12
    396a:	8f ef       	ldi	r24, 0xFF	; 255
    396c:	9c e0       	ldi	r25, 0x0C	; 12
    396e:	0e 94 12 38 	call	0x7024	; 0x7024 <_ZN7TwoWire8setClockEm>
    3972:	68 e6       	ldi	r22, 0x68	; 104
    3974:	8f ef       	ldi	r24, 0xFF	; 255
    3976:	9c e0       	ldi	r25, 0x0C	; 12
    3978:	0e 94 15 38 	call	0x702a	; 0x702a <_ZN7TwoWire17beginTransmissionEh>
    397c:	8f ef       	ldi	r24, 0xFF	; 255
    397e:	9c e0       	ldi	r25, 0x0C	; 12
    3980:	0e 94 96 38 	call	0x712c	; 0x712c <_ZN7TwoWire15endTransmissionEv>
    3984:	81 11       	cpse	r24, r1
    3986:	0a c0       	rjmp	.+20     	; 0x399c <_ZN13DS3231M_Class5beginEm+0x50>
    3988:	62 e0       	ldi	r22, 0x02	; 2
    398a:	ce 01       	movw	r24, r28
    398c:	bd df       	rcall	.-134    	; 0x3908 <_ZN13DS3231M_Class8readByteEh>
    398e:	48 2f       	mov	r20, r24
    3990:	4f 7b       	andi	r20, 0xBF	; 191
    3992:	62 e0       	ldi	r22, 0x02	; 2
    3994:	ce 01       	movw	r24, r28
    3996:	98 df       	rcall	.-208    	; 0x38c8 <_ZN13DS3231M_Class9writeByteEhh>
    3998:	81 e0       	ldi	r24, 0x01	; 1
    399a:	01 c0       	rjmp	.+2      	; 0x399e <_ZN13DS3231M_Class5beginEm+0x52>
    399c:	80 e0       	ldi	r24, 0x00	; 0
    399e:	df 91       	pop	r29
    39a0:	cf 91       	pop	r28
    39a2:	ff 90       	pop	r15
    39a4:	ef 90       	pop	r14
    39a6:	df 90       	pop	r13
    39a8:	cf 90       	pop	r12
    39aa:	08 95       	ret

000039ac <_ZN13DS3231M_Class3nowEv>:
/*******************************************************************************************************************
** Method now() returns the current date/time                                                                     **
** then the power down time is returned, if the timeType = 2 then the power up time is returned. These options are**
** not documented as the official calls are "getPowerOffDate" and "getPowerOnDate"                                **
*******************************************************************************************************************/
DateTime DS3231M_Class::now(){                                                // Return current date/time         //
    39ac:	0f 93       	push	r16
    39ae:	1f 93       	push	r17
    39b0:	cf 93       	push	r28
    39b2:	df 93       	push	r29
    39b4:	8c 01       	movw	r16, r24
    39b6:	eb 01       	movw	r28, r22
  Wire.beginTransmission(DS3231M_ADDRESS);                                    // Address the I2C device           //
    39b8:	68 e6       	ldi	r22, 0x68	; 104
    39ba:	8f ef       	ldi	r24, 0xFF	; 255
    39bc:	9c e0       	ldi	r25, 0x0C	; 12
    39be:	0e 94 15 38 	call	0x702a	; 0x702a <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(DS3231M_RTCSEC);                                                 // Start at specified register      //
    39c2:	60 e0       	ldi	r22, 0x00	; 0
    39c4:	8f ef       	ldi	r24, 0xFF	; 255
    39c6:	9c e0       	ldi	r25, 0x0C	; 12
    39c8:	0e 94 c4 37 	call	0x6f88	; 0x6f88 <_ZN7TwoWire5writeEh>
  _TransmissionStatus = Wire.endTransmission();                               // Close transmission               //
    39cc:	8f ef       	ldi	r24, 0xFF	; 255
    39ce:	9c e0       	ldi	r25, 0x0C	; 12
    39d0:	0e 94 96 38 	call	0x712c	; 0x712c <_ZN7TwoWire15endTransmissionEv>
    39d4:	88 83       	st	Y, r24
  Wire.requestFrom(DS3231M_ADDRESS, (uint8_t)7);                              // Request 7 bytes of data          //
    39d6:	47 e0       	ldi	r20, 0x07	; 7
    39d8:	68 e6       	ldi	r22, 0x68	; 104
    39da:	8f ef       	ldi	r24, 0xFF	; 255
    39dc:	9c e0       	ldi	r25, 0x0C	; 12
    39de:	0e 94 92 38 	call	0x7124	; 0x7124 <_ZN7TwoWire11requestFromEhh>
  if(Wire.available()==7) {                                                   // Wait until the data is ready     //
    39e2:	8f ef       	ldi	r24, 0xFF	; 255
    39e4:	9c e0       	ldi	r25, 0x0C	; 12
    39e6:	0e 94 36 37 	call	0x6e6c	; 0x6e6c <_ZN7TwoWire9availableEv>
    39ea:	07 97       	sbiw	r24, 0x07	; 7
    39ec:	09 f0       	breq	.+2      	; 0x39f0 <_ZN13DS3231M_Class3nowEv+0x44>
    39ee:	64 c0       	rjmp	.+200    	; 0x3ab8 <_ZN13DS3231M_Class3nowEv+0x10c>
    _ss = bcd2int(Wire.read() & 0x7F);                                        // Mask high bit in seconds         //
    39f0:	8f ef       	ldi	r24, 0xFF	; 255
    39f2:	9c e0       	ldi	r25, 0x0C	; 12
    39f4:	0e 94 3e 37 	call	0x6e7c	; 0x6e7c <_ZN7TwoWire4readEv>
    39f8:	98 2f       	mov	r25, r24
    39fa:	96 95       	lsr	r25
    39fc:	96 95       	lsr	r25
    39fe:	96 95       	lsr	r25
    3a00:	9e 70       	andi	r25, 0x0E	; 14
    3a02:	29 2f       	mov	r18, r25
    3a04:	22 0f       	add	r18, r18
    3a06:	22 0f       	add	r18, r18
    3a08:	92 0f       	add	r25, r18
    3a0a:	8f 70       	andi	r24, 0x0F	; 15
    3a0c:	89 0f       	add	r24, r25
    3a0e:	8d 83       	std	Y+5, r24	; 0x05
    _mm = bcd2int(Wire.read() & 0x7F);                                        // Mask high bit in minutes         //
    3a10:	8f ef       	ldi	r24, 0xFF	; 255
    3a12:	9c e0       	ldi	r25, 0x0C	; 12
    3a14:	0e 94 3e 37 	call	0x6e7c	; 0x6e7c <_ZN7TwoWire4readEv>
    3a18:	98 2f       	mov	r25, r24
    3a1a:	96 95       	lsr	r25
    3a1c:	96 95       	lsr	r25
    3a1e:	96 95       	lsr	r25
    3a20:	9e 70       	andi	r25, 0x0E	; 14
    3a22:	29 2f       	mov	r18, r25
    3a24:	22 0f       	add	r18, r18
    3a26:	22 0f       	add	r18, r18
    3a28:	92 0f       	add	r25, r18
    3a2a:	8f 70       	andi	r24, 0x0F	; 15
    3a2c:	89 0f       	add	r24, r25
    3a2e:	8e 83       	std	Y+6, r24	; 0x06
    _hh = bcd2int(Wire.read() & 0x7F);                                        // Mask high bit in hours           //
    3a30:	8f ef       	ldi	r24, 0xFF	; 255
    3a32:	9c e0       	ldi	r25, 0x0C	; 12
    3a34:	0e 94 3e 37 	call	0x6e7c	; 0x6e7c <_ZN7TwoWire4readEv>
    3a38:	98 2f       	mov	r25, r24
    3a3a:	96 95       	lsr	r25
    3a3c:	96 95       	lsr	r25
    3a3e:	96 95       	lsr	r25
    3a40:	9e 70       	andi	r25, 0x0E	; 14
    3a42:	29 2f       	mov	r18, r25
    3a44:	22 0f       	add	r18, r18
    3a46:	22 0f       	add	r18, r18
    3a48:	92 0f       	add	r25, r18
    3a4a:	8f 70       	andi	r24, 0x0F	; 15
    3a4c:	89 0f       	add	r24, r25
    3a4e:	8f 83       	std	Y+7, r24	; 0x07
    Wire.read();                                                              // Ignore Day-Of-Week register      //
    3a50:	8f ef       	ldi	r24, 0xFF	; 255
    3a52:	9c e0       	ldi	r25, 0x0C	; 12
    3a54:	0e 94 3e 37 	call	0x6e7c	; 0x6e7c <_ZN7TwoWire4readEv>
    _d = bcd2int(Wire.read()  & 0x3F);                                        // Mask 2 high bits for day of month//
    3a58:	8f ef       	ldi	r24, 0xFF	; 255
    3a5a:	9c e0       	ldi	r25, 0x0C	; 12
    3a5c:	0e 94 3e 37 	call	0x6e7c	; 0x6e7c <_ZN7TwoWire4readEv>
    3a60:	98 2f       	mov	r25, r24
    3a62:	96 95       	lsr	r25
    3a64:	96 95       	lsr	r25
    3a66:	96 95       	lsr	r25
    3a68:	96 70       	andi	r25, 0x06	; 6
    3a6a:	29 2f       	mov	r18, r25
    3a6c:	22 0f       	add	r18, r18
    3a6e:	22 0f       	add	r18, r18
    3a70:	92 0f       	add	r25, r18
    3a72:	8f 70       	andi	r24, 0x0F	; 15
    3a74:	89 0f       	add	r24, r25
    3a76:	88 87       	std	Y+8, r24	; 0x08
    _m = bcd2int(Wire.read()  & 0x1F);                                        // Mask 3 high bits for Month       //
    3a78:	8f ef       	ldi	r24, 0xFF	; 255
    3a7a:	9c e0       	ldi	r25, 0x0C	; 12
    3a7c:	0e 94 3e 37 	call	0x6e7c	; 0x6e7c <_ZN7TwoWire4readEv>
    3a80:	84 fb       	bst	r24, 4
    3a82:	99 27       	eor	r25, r25
    3a84:	90 f9       	bld	r25, 0
    3a86:	99 0f       	add	r25, r25
    3a88:	29 2f       	mov	r18, r25
    3a8a:	22 0f       	add	r18, r18
    3a8c:	22 0f       	add	r18, r18
    3a8e:	92 0f       	add	r25, r18
    3a90:	8f 70       	andi	r24, 0x0F	; 15
    3a92:	89 0f       	add	r24, r25
    3a94:	89 87       	std	Y+9, r24	; 0x09
    _y = bcd2int(Wire.read()) + 2000;                                         // Add 2000 to internal year        //
    3a96:	8f ef       	ldi	r24, 0xFF	; 255
    3a98:	9c e0       	ldi	r25, 0x0C	; 12
    3a9a:	0e 94 3e 37 	call	0x6e7c	; 0x6e7c <_ZN7TwoWire4readEv>
    3a9e:	98 2f       	mov	r25, r24
    3aa0:	92 95       	swap	r25
    3aa2:	9f 70       	andi	r25, 0x0F	; 15
    3aa4:	8f 70       	andi	r24, 0x0F	; 15
    3aa6:	2a e0       	ldi	r18, 0x0A	; 10
    3aa8:	92 9f       	mul	r25, r18
    3aaa:	80 0d       	add	r24, r0
    3aac:	11 24       	eor	r1, r1
    3aae:	90 e0       	ldi	r25, 0x00	; 0
    3ab0:	80 53       	subi	r24, 0x30	; 48
    3ab2:	98 4f       	sbci	r25, 0xF8	; 248
    3ab4:	9b 87       	std	Y+11, r25	; 0x0b
    3ab6:	8a 87       	std	Y+10, r24	; 0x0a
  } // of if-then there is data to be read                                    //                                  //
  return DateTime (_y, _m, _d, _hh, _mm, _ss);                                // Return class value               //
    3ab8:	2d 81       	ldd	r18, Y+5	; 0x05
    3aba:	3e 81       	ldd	r19, Y+6	; 0x06
    3abc:	4f 81       	ldd	r20, Y+7	; 0x07
    3abe:	58 85       	ldd	r21, Y+8	; 0x08
    3ac0:	69 85       	ldd	r22, Y+9	; 0x09
    3ac2:	8a 85       	ldd	r24, Y+10	; 0x0a
    3ac4:	9b 85       	ldd	r25, Y+11	; 0x0b
  } // of for-next each month                                                 //                                  //
  d = days + 1;                                                               //                                  //
} // of method DateTime()                                                     //----------------------------------//
DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour,  //                                  //
                    uint8_t min, uint8_t sec) {                               //                                  //
  if (year >= 2000)                                                           //                                  //
    3ac6:	80 3d       	cpi	r24, 0xD0	; 208
    3ac8:	77 e0       	ldi	r23, 0x07	; 7
    3aca:	97 07       	cpc	r25, r23
    3acc:	10 f0       	brcs	.+4      	; 0x3ad2 <_ZN13DS3231M_Class3nowEv+0x126>
  year -= 2000;                                                               //                                  //
    3ace:	80 5d       	subi	r24, 0xD0	; 208
    3ad0:	97 40       	sbci	r25, 0x07	; 7
  yOff = year;                                                                //                                  //
    3ad2:	f8 01       	movw	r30, r16
    3ad4:	80 83       	st	Z, r24
  m = month;                                                                  //                                  //
    3ad6:	61 83       	std	Z+1, r22	; 0x01
  d = day;                                                                    //                                  //
    3ad8:	52 83       	std	Z+2, r21	; 0x02
  hh = hour;                                                                  //                                  //
    3ada:	43 83       	std	Z+3, r20	; 0x03
  mm = min;                                                                   //                                  //
    3adc:	34 83       	std	Z+4, r19	; 0x04
  ss = sec;                                                                   //                                  //
    3ade:	25 83       	std	Z+5, r18	; 0x05
    _d = bcd2int(Wire.read()  & 0x3F);                                        // Mask 2 high bits for day of month//
    _m = bcd2int(Wire.read()  & 0x1F);                                        // Mask 3 high bits for Month       //
    _y = bcd2int(Wire.read()) + 2000;                                         // Add 2000 to internal year        //
  } // of if-then there is data to be read                                    //                                  //
  return DateTime (_y, _m, _d, _hh, _mm, _ss);                                // Return class value               //
} // of method now                                                            //                                  //
    3ae0:	c8 01       	movw	r24, r16
    3ae2:	df 91       	pop	r29
    3ae4:	cf 91       	pop	r28
    3ae6:	1f 91       	pop	r17
    3ae8:	0f 91       	pop	r16
    3aea:	08 95       	ret

00003aec <_ZN13DS3231M_Class6adjustERK8DateTime>:
** oscillator is stopped during the process and needs to be restarted upon completion.                            **
*******************************************************************************************************************/
void DS3231M_Class::adjust() {                                                // Set the RTC date and Time        //
  adjust(DateTime(F(__DATE__), F(__TIME__)));                                 // Set to compile time              //
} // of method adjust                                                         /-----------------------------------//
void DS3231M_Class::adjust(const DateTime& dt) {                              // Set the RTC date and Time        //
    3aec:	df 92       	push	r13
    3aee:	ef 92       	push	r14
    3af0:	ff 92       	push	r15
    3af2:	0f 93       	push	r16
    3af4:	1f 93       	push	r17
    3af6:	cf 93       	push	r28
    3af8:	df 93       	push	r29
    3afa:	00 d0       	rcall	.+0      	; 0x3afc <_ZN13DS3231M_Class6adjustERK8DateTime+0x10>
    3afc:	00 d0       	rcall	.+0      	; 0x3afe <_ZN13DS3231M_Class6adjustERK8DateTime+0x12>
    3afe:	00 d0       	rcall	.+0      	; 0x3b00 <_ZN13DS3231M_Class6adjustERK8DateTime+0x14>
    3b00:	cd b7       	in	r28, 0x3d	; 61
    3b02:	de b7       	in	r29, 0x3e	; 62
    3b04:	8c 01       	movw	r16, r24
    3b06:	7b 01       	movw	r14, r22
    3b08:	fb 01       	movw	r30, r22
    3b0a:	85 81       	ldd	r24, Z+5	; 0x05
  writeByte(DS3231M_RTCSEC,int2bcd(dt.second()));                             // Write seconds, keep device off   //
    3b0c:	9a e0       	ldi	r25, 0x0A	; 10
    3b0e:	d9 2e       	mov	r13, r25
    3b10:	6d 2d       	mov	r22, r13
    3b12:	0e 94 43 41 	call	0x8286	; 0x8286 <__udivmodqi4>
    3b16:	49 2f       	mov	r20, r25
    3b18:	f0 e1       	ldi	r31, 0x10	; 16
    3b1a:	8f 9f       	mul	r24, r31
    3b1c:	40 0d       	add	r20, r0
    3b1e:	11 24       	eor	r1, r1
    3b20:	60 e0       	ldi	r22, 0x00	; 0
    3b22:	c8 01       	movw	r24, r16
    3b24:	d1 de       	rcall	.-606    	; 0x38c8 <_ZN13DS3231M_Class9writeByteEhh>
    3b26:	f7 01       	movw	r30, r14
    3b28:	84 81       	ldd	r24, Z+4	; 0x04
  writeByte(DS3231M_RTCMIN,int2bcd(dt.minute()));                             // Write the minutes value          //
    3b2a:	6d 2d       	mov	r22, r13
    3b2c:	0e 94 43 41 	call	0x8286	; 0x8286 <__udivmodqi4>
    3b30:	49 2f       	mov	r20, r25
    3b32:	f0 e1       	ldi	r31, 0x10	; 16
    3b34:	8f 9f       	mul	r24, r31
    3b36:	40 0d       	add	r20, r0
    3b38:	11 24       	eor	r1, r1
    3b3a:	61 e0       	ldi	r22, 0x01	; 1
    3b3c:	c8 01       	movw	r24, r16
    3b3e:	c4 de       	rcall	.-632    	; 0x38c8 <_ZN13DS3231M_Class9writeByteEhh>
    3b40:	f7 01       	movw	r30, r14
    3b42:	83 81       	ldd	r24, Z+3	; 0x03
  writeByte(DS3231M_RTCHOUR,int2bcd(dt.hour()));                              // Also re-sets the 24Hour clock on //
    3b44:	6d 2d       	mov	r22, r13
    3b46:	0e 94 43 41 	call	0x8286	; 0x8286 <__udivmodqi4>
    3b4a:	49 2f       	mov	r20, r25
    3b4c:	f0 e1       	ldi	r31, 0x10	; 16
    3b4e:	8f 9f       	mul	r24, r31
    3b50:	40 0d       	add	r20, r0
    3b52:	11 24       	eor	r1, r1
    3b54:	62 e0       	ldi	r22, 0x02	; 2
    3b56:	c8 01       	movw	r24, r16
  writeByte(DS3231M_RTCWKDAY,dt.dayOfTheWeek());                              // Update the weekday               //
    3b58:	b7 de       	rcall	.-658    	; 0x38c8 <_ZN13DS3231M_Class9writeByteEhh>
    3b5a:	c7 01       	movw	r24, r14
    3b5c:	2f de       	rcall	.-930    	; 0x37bc <_ZNK8DateTime12dayOfTheWeekEv>
    3b5e:	48 2f       	mov	r20, r24
    3b60:	63 e0       	ldi	r22, 0x03	; 3
    3b62:	c8 01       	movw	r24, r16
    3b64:	b1 de       	rcall	.-670    	; 0x38c8 <_ZN13DS3231M_Class9writeByteEhh>
    3b66:	f7 01       	movw	r30, r14
    3b68:	82 81       	ldd	r24, Z+2	; 0x02
  writeByte(DS3231M_RTCDATE,int2bcd(dt.day()));                               // Write the day of month           //
    3b6a:	6d 2d       	mov	r22, r13
    3b6c:	0e 94 43 41 	call	0x8286	; 0x8286 <__udivmodqi4>
    3b70:	49 2f       	mov	r20, r25
    3b72:	f0 e1       	ldi	r31, 0x10	; 16
    3b74:	8f 9f       	mul	r24, r31
    3b76:	40 0d       	add	r20, r0
    3b78:	11 24       	eor	r1, r1
    3b7a:	64 e0       	ldi	r22, 0x04	; 4
    3b7c:	c8 01       	movw	r24, r16
    3b7e:	a4 de       	rcall	.-696    	; 0x38c8 <_ZN13DS3231M_Class9writeByteEhh>
    3b80:	f7 01       	movw	r30, r14
    3b82:	81 81       	ldd	r24, Z+1	; 0x01
  writeByte(DS3231M_RTCMTH,int2bcd(dt.month()));                              // Month, ignore century bit        //
    3b84:	6d 2d       	mov	r22, r13
    3b86:	0e 94 43 41 	call	0x8286	; 0x8286 <__udivmodqi4>
    3b8a:	49 2f       	mov	r20, r25
    3b8c:	f0 e1       	ldi	r31, 0x10	; 16
    3b8e:	8f 9f       	mul	r24, r31
    3b90:	40 0d       	add	r20, r0
    3b92:	11 24       	eor	r1, r1
    3b94:	65 e0       	ldi	r22, 0x05	; 5
    3b96:	c8 01       	movw	r24, r16
    3b98:	97 de       	rcall	.-722    	; 0x38c8 <_ZN13DS3231M_Class9writeByteEhh>
  writeByte(DS3231M_RTCYEAR,int2bcd(dt.year()-2000));                         // Write the year                   //
    3b9a:	f7 01       	movw	r30, r14
    3b9c:	80 81       	ld	r24, Z
    3b9e:	6d 2d       	mov	r22, r13
    3ba0:	0e 94 43 41 	call	0x8286	; 0x8286 <__udivmodqi4>
    3ba4:	49 2f       	mov	r20, r25
    3ba6:	f0 e1       	ldi	r31, 0x10	; 16
    3ba8:	8f 9f       	mul	r24, r31
    3baa:	40 0d       	add	r20, r0
    3bac:	11 24       	eor	r1, r1
    3bae:	66 e0       	ldi	r22, 0x06	; 6
    3bb0:	c8 01       	movw	r24, r16
  writeByte(DS3231M_STATUS,readByte(DS3231M_STATUS)&B01111111);               // Unset OSC flag bit if set        //
    3bb2:	8a de       	rcall	.-748    	; 0x38c8 <_ZN13DS3231M_Class9writeByteEhh>
    3bb4:	6f e0       	ldi	r22, 0x0F	; 15
    3bb6:	c8 01       	movw	r24, r16
    3bb8:	a7 de       	rcall	.-690    	; 0x3908 <_ZN13DS3231M_Class8readByteEh>
    3bba:	48 2f       	mov	r20, r24
    3bbc:	4f 77       	andi	r20, 0x7F	; 127
    3bbe:	6f e0       	ldi	r22, 0x0F	; 15
    3bc0:	c8 01       	movw	r24, r16
  writeByte(DS3231M_CONTROL,readByte(DS3231M_CONTROL)&B01111111);             // Unset EOSC flag bit if set       //
    3bc2:	82 de       	rcall	.-764    	; 0x38c8 <_ZN13DS3231M_Class9writeByteEhh>
    3bc4:	6e e0       	ldi	r22, 0x0E	; 14
    3bc6:	c8 01       	movw	r24, r16
    3bc8:	9f de       	rcall	.-706    	; 0x3908 <_ZN13DS3231M_Class8readByteEh>
    3bca:	48 2f       	mov	r20, r24
    3bcc:	4f 77       	andi	r20, 0x7F	; 127
    3bce:	6e e0       	ldi	r22, 0x0E	; 14
    3bd0:	c8 01       	movw	r24, r16
  _SetUnixTime = now().unixtime();                                            // Store time of last change        //
    3bd2:	7a de       	rcall	.-780    	; 0x38c8 <_ZN13DS3231M_Class9writeByteEhh>
    3bd4:	b8 01       	movw	r22, r16
    3bd6:	ce 01       	movw	r24, r28
    3bd8:	01 96       	adiw	r24, 0x01	; 1
    3bda:	e8 de       	rcall	.-560    	; 0x39ac <_ZN13DS3231M_Class3nowEv>
    3bdc:	ce 01       	movw	r24, r28
    3bde:	01 96       	adiw	r24, 0x01	; 1
    3be0:	f9 dd       	rcall	.-1038   	; 0x37d4 <_ZNK8DateTime8unixtimeEv>
    3be2:	f8 01       	movw	r30, r16
    3be4:	61 83       	std	Z+1, r22	; 0x01
    3be6:	72 83       	std	Z+2, r23	; 0x02
    3be8:	83 83       	std	Z+3, r24	; 0x03
    3bea:	94 83       	std	Z+4, r25	; 0x04
    3bec:	26 96       	adiw	r28, 0x06	; 6
} // of method adjust                                                         //                                  //
    3bee:	0f b6       	in	r0, 0x3f	; 63
    3bf0:	f8 94       	cli
    3bf2:	de bf       	out	0x3e, r29	; 62
    3bf4:	0f be       	out	0x3f, r0	; 63
    3bf6:	cd bf       	out	0x3d, r28	; 61
    3bf8:	df 91       	pop	r29
    3bfa:	cf 91       	pop	r28
    3bfc:	1f 91       	pop	r17
    3bfe:	0f 91       	pop	r16
    3c00:	ff 90       	pop	r15
    3c02:	ef 90       	pop	r14
    3c04:	df 90       	pop	r13
    3c06:	08 95       	ret

00003c08 <_ZN13DS3231M_Class6adjustEv>:
    3c08:	0f 93       	push	r16
/*******************************************************************************************************************
** Method adjust set the current date/time. This is an overloaded function, if called with no parameters then the **
** RTC is set to the date/time when the program was compiled and uploaded. Otherwise the values are set, but the  **
** oscillator is stopped during the process and needs to be restarted upon completion.                            **
*******************************************************************************************************************/
void DS3231M_Class::adjust() {                                                // Set the RTC date and Time        //
    3c0a:	1f 93       	push	r17
    3c0c:	cf 93       	push	r28
    3c0e:	df 93       	push	r29
    3c10:	00 d0       	rcall	.+0      	; 0x3c12 <_ZN13DS3231M_Class6adjustEv+0xa>
    3c12:	00 d0       	rcall	.+0      	; 0x3c14 <_ZN13DS3231M_Class6adjustEv+0xc>
    3c14:	00 d0       	rcall	.+0      	; 0x3c16 <_ZN13DS3231M_Class6adjustEv+0xe>
    3c16:	cd b7       	in	r28, 0x3d	; 61
    3c18:	de b7       	in	r29, 0x3e	; 62
    3c1a:	8c 01       	movw	r16, r24
  adjust(DateTime(F(__DATE__), F(__TIME__)));                                 // Set to compile time              //
    3c1c:	42 e1       	ldi	r20, 0x12	; 18
    3c1e:	52 e0       	ldi	r21, 0x02	; 2
    3c20:	66 e0       	ldi	r22, 0x06	; 6
    3c22:	72 e0       	ldi	r23, 0x02	; 2
    3c24:	ce 01       	movw	r24, r28
    3c26:	01 96       	adiw	r24, 0x01	; 1
    3c28:	54 dd       	rcall	.-1368   	; 0x36d2 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>
    3c2a:	be 01       	movw	r22, r28
    3c2c:	6f 5f       	subi	r22, 0xFF	; 255
    3c2e:	7f 4f       	sbci	r23, 0xFF	; 255
    3c30:	c8 01       	movw	r24, r16
    3c32:	5c df       	rcall	.-328    	; 0x3aec <_ZN13DS3231M_Class6adjustERK8DateTime>
} // of method adjust                                                         /-----------------------------------//
    3c34:	26 96       	adiw	r28, 0x06	; 6
    3c36:	0f b6       	in	r0, 0x3f	; 63
    3c38:	f8 94       	cli
    3c3a:	de bf       	out	0x3e, r29	; 62
    3c3c:	0f be       	out	0x3f, r0	; 63
    3c3e:	cd bf       	out	0x3d, r28	; 61
    3c40:	df 91       	pop	r29
    3c42:	cf 91       	pop	r28
    3c44:	1f 91       	pop	r17
    3c46:	0f 91       	pop	r16
    3c48:	08 95       	ret

00003c4a <_GLOBAL__sub_I__ZN9DhcpClass13beginWithDHCPEPhmm>:
    unsigned long m = n;
    n /= 16;
    char c = m - 16 * n;
    *str-- = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);
}
    3c4a:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    3c4c:	00 e0       	ldi	r16, 0x00	; 0
    3c4e:	20 e0       	ldi	r18, 0x00	; 0
    3c50:	40 e0       	ldi	r20, 0x00	; 0
    3c52:	60 e0       	ldi	r22, 0x00	; 0
    3c54:	8f e3       	ldi	r24, 0x3F	; 63
    3c56:	9c e0       	ldi	r25, 0x0C	; 12
    3c58:	0e 94 91 3a 	call	0x7522	; 0x7522 <_ZN9IPAddressC1Ehhhh>
    3c5c:	0f 91       	pop	r16
    3c5e:	08 95       	ret

00003c60 <_ZN9DNSClient5beginERK9IPAddress>:
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    3c60:	fb 01       	movw	r30, r22
    3c62:	42 81       	ldd	r20, Z+2	; 0x02
    3c64:	53 81       	ldd	r21, Z+3	; 0x03
    3c66:	64 81       	ldd	r22, Z+4	; 0x04
    3c68:	75 81       	ldd	r23, Z+5	; 0x05
    3c6a:	fc 01       	movw	r30, r24
    3c6c:	42 83       	std	Z+2, r20	; 0x02
    3c6e:	53 83       	std	Z+3, r21	; 0x03
    3c70:	64 83       	std	Z+4, r22	; 0x04
    3c72:	75 83       	std	Z+5, r23	; 0x05
#define INVALID_RESPONSE -4

void DNSClient::begin(const IPAddress& aDNSServer)
{
    iDNSServer = aDNSServer;
    iRequestId = 0;
    3c74:	17 82       	std	Z+7, r1	; 0x07
    3c76:	16 82       	std	Z+6, r1	; 0x06
    3c78:	08 95       	ret

00003c7a <_ZN9DNSClient9inet_atonEPKcR9IPAddress>:
}


int DNSClient::inet_aton(const char* aIPAddrString, IPAddress& aResult)
{
    3c7a:	cf 93       	push	r28
    3c7c:	df 93       	push	r29
    3c7e:	da 01       	movw	r26, r20
    3c80:	fb 01       	movw	r30, r22
    3c82:	eb 01       	movw	r28, r22
    // See if we've been given a valid IP address
    const char* p =aIPAddrString;
    while (*p &&
    3c84:	89 91       	ld	r24, Y+
    3c86:	81 11       	cpse	r24, r1
    3c88:	fd cf       	rjmp	.-6      	; 0x3c84 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0xa>
    3c8a:	80 e0       	ldi	r24, 0x00	; 0
    3c8c:	90 e0       	ldi	r25, 0x00	; 0
    3c8e:	20 e0       	ldi	r18, 0x00	; 0
    3c90:	30 e0       	ldi	r19, 0x00	; 0
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
    3c92:	4a e0       	ldi	r20, 0x0A	; 10
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
        int segmentValue =0;
        while (*p && (segment < 4))
    3c94:	51 91       	ld	r21, Z+
    3c96:	55 23       	and	r21, r21
    3c98:	e9 f0       	breq	.+58     	; 0x3cd4 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x5a>
    3c9a:	24 30       	cpi	r18, 0x04	; 4
    3c9c:	31 05       	cpc	r19, r1
    3c9e:	44 f5       	brge	.+80     	; 0x3cf0 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
        {
            if (*p == '.')
    3ca0:	5e 32       	cpi	r21, 0x2E	; 46
    3ca2:	69 f4       	brne	.+26     	; 0x3cbe <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x44>
            {
                // We've reached the end of a segment
                if (segmentValue > 255)
    3ca4:	8f 3f       	cpi	r24, 0xFF	; 255
    3ca6:	91 05       	cpc	r25, r1
    3ca8:	09 f0       	breq	.+2      	; 0x3cac <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x32>
    3caa:	14 f5       	brge	.+68     	; 0x3cf0 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
                    // You can't have IP address segments that don't fit in a byte
                    return 0;
                }
                else
                {
                    aResult[segment] = (byte)segmentValue;
    3cac:	ed 01       	movw	r28, r26
    3cae:	c2 0f       	add	r28, r18
    3cb0:	d3 1f       	adc	r29, r19
    3cb2:	8a 83       	std	Y+2, r24	; 0x02
                    segment++;
    3cb4:	2f 5f       	subi	r18, 0xFF	; 255
    3cb6:	3f 4f       	sbci	r19, 0xFF	; 255
                    segmentValue = 0;
    3cb8:	80 e0       	ldi	r24, 0x00	; 0
    3cba:	90 e0       	ldi	r25, 0x00	; 0
    3cbc:	eb cf       	rjmp	.-42     	; 0x3c94 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x1a>
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
    3cbe:	48 9f       	mul	r20, r24
    3cc0:	b0 01       	movw	r22, r0
    3cc2:	49 9f       	mul	r20, r25
    3cc4:	70 0d       	add	r23, r0
    3cc6:	11 24       	eor	r1, r1
    3cc8:	85 2f       	mov	r24, r21
    3cca:	90 e0       	ldi	r25, 0x00	; 0
    3ccc:	c0 97       	sbiw	r24, 0x30	; 48
    3cce:	86 0f       	add	r24, r22
    3cd0:	97 1f       	adc	r25, r23
    3cd2:	e0 cf       	rjmp	.-64     	; 0x3c94 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x1a>
            }
            p++;
        }
        // We've reached the end of address, but there'll still be the last
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
    3cd4:	8f 3f       	cpi	r24, 0xFF	; 255
    3cd6:	91 05       	cpc	r25, r1
    3cd8:	09 f0       	breq	.+2      	; 0x3cdc <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x62>
    3cda:	54 f4       	brge	.+20     	; 0x3cf0 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
    3cdc:	24 30       	cpi	r18, 0x04	; 4
    3cde:	31 05       	cpc	r19, r1
    3ce0:	3c f4       	brge	.+14     	; 0x3cf0 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
            // or more than four segments
            return 0;
        }
        else
        {
            aResult[segment] = (byte)segmentValue;
    3ce2:	fd 01       	movw	r30, r26
    3ce4:	e2 0f       	add	r30, r18
    3ce6:	f3 1f       	adc	r31, r19
    3ce8:	82 83       	std	Z+2, r24	; 0x02
            return 1;
    3cea:	81 e0       	ldi	r24, 0x01	; 1
    3cec:	90 e0       	ldi	r25, 0x00	; 0
    3cee:	02 c0       	rjmp	.+4      	; 0x3cf4 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x7a>
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
        {
            // You can't have IP address segments that don't fit in a byte,
            // or more than four segments
            return 0;
    3cf0:	80 e0       	ldi	r24, 0x00	; 0
    3cf2:	90 e0       	ldi	r25, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    3cf4:	df 91       	pop	r29
    3cf6:	cf 91       	pop	r28
    3cf8:	08 95       	ret

00003cfa <_GLOBAL__sub_I__ZN9DNSClient5beginERK9IPAddress>:
    // Mark the entire packet as read
    iUdp.flush();

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
}
    3cfa:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    3cfc:	00 e0       	ldi	r16, 0x00	; 0
    3cfe:	20 e0       	ldi	r18, 0x00	; 0
    3d00:	40 e0       	ldi	r20, 0x00	; 0
    3d02:	60 e0       	ldi	r22, 0x00	; 0
    3d04:	85 e4       	ldi	r24, 0x45	; 69
    3d06:	9c e0       	ldi	r25, 0x0C	; 12
    3d08:	0e 94 91 3a 	call	0x7522	; 0x7522 <_ZN9IPAddressC1Ehhhh>
    3d0c:	0f 91       	pop	r16
    3d0e:	08 95       	ret

00003d10 <_ZN9DNSClient12BuildRequestEPKc>:

    return ret;
}

uint16_t DNSClient::BuildRequest(const char* aName)
{
    3d10:	8f 92       	push	r8
    3d12:	9f 92       	push	r9
    3d14:	af 92       	push	r10
    3d16:	bf 92       	push	r11
    3d18:	cf 92       	push	r12
    3d1a:	df 92       	push	r13
    3d1c:	ef 92       	push	r14
    3d1e:	ff 92       	push	r15
    3d20:	0f 93       	push	r16
    3d22:	1f 93       	push	r17
    3d24:	cf 93       	push	r28
    3d26:	df 93       	push	r29
    3d28:	00 d0       	rcall	.+0      	; 0x3d2a <_ZN9DNSClient12BuildRequestEPKc+0x1a>
    3d2a:	1f 92       	push	r1
    3d2c:	cd b7       	in	r28, 0x3d	; 61
    3d2e:	de b7       	in	r29, 0x3e	; 62
    3d30:	6c 01       	movw	r12, r24
    3d32:	7b 01       	movw	r14, r22
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    //    |                    ARCOUNT                    |
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    // As we only support one request at a time at present, we can simplify
    // some of this header
    iRequestId = millis(); // generate a random ID
    3d34:	0e 94 2e 3c 	call	0x785c	; 0x785c <millis>
    3d38:	f6 01       	movw	r30, r12
    3d3a:	77 83       	std	Z+7, r23	; 0x07
    3d3c:	66 83       	std	Z+6, r22	; 0x06
    uint16_t twoByteBuffer;

    // FIXME We should also check that there's enough space available to write to, rather
    // FIXME than assume there's enough space (as the code does at present)
    iUdp.write((uint8_t*)&iRequestId, sizeof(iRequestId));
    3d3e:	86 01       	movw	r16, r12
    3d40:	08 5f       	subi	r16, 0xF8	; 248
    3d42:	1f 4f       	sbci	r17, 0xFF	; 255
    3d44:	b6 01       	movw	r22, r12
    3d46:	6a 5f       	subi	r22, 0xFA	; 250
    3d48:	7f 4f       	sbci	r23, 0xFF	; 255
    3d4a:	42 e0       	ldi	r20, 0x02	; 2
    3d4c:	50 e0       	ldi	r21, 0x00	; 0
    3d4e:	c8 01       	movw	r24, r16
    3d50:	55 d6       	rcall	.+3242   	; 0x49fc <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = htons(QUERY_FLAG | OPCODE_STANDARD_QUERY | RECURSION_DESIRED_FLAG);
    3d52:	81 e0       	ldi	r24, 0x01	; 1
    3d54:	90 e0       	ldi	r25, 0x00	; 0
    3d56:	9a 83       	std	Y+2, r25	; 0x02
    3d58:	89 83       	std	Y+1, r24	; 0x01
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    3d5a:	42 e0       	ldi	r20, 0x02	; 2
    3d5c:	50 e0       	ldi	r21, 0x00	; 0
    3d5e:	be 01       	movw	r22, r28
    3d60:	6f 5f       	subi	r22, 0xFF	; 255
    3d62:	7f 4f       	sbci	r23, 0xFF	; 255
    3d64:	c8 01       	movw	r24, r16
    3d66:	4a d6       	rcall	.+3220   	; 0x49fc <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = htons(1);  // One question record
    3d68:	80 e0       	ldi	r24, 0x00	; 0
    3d6a:	91 e0       	ldi	r25, 0x01	; 1
    3d6c:	9a 83       	std	Y+2, r25	; 0x02
    3d6e:	89 83       	std	Y+1, r24	; 0x01
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    3d70:	42 e0       	ldi	r20, 0x02	; 2
    3d72:	50 e0       	ldi	r21, 0x00	; 0
    3d74:	be 01       	movw	r22, r28
    3d76:	6f 5f       	subi	r22, 0xFF	; 255
    3d78:	7f 4f       	sbci	r23, 0xFF	; 255
    3d7a:	c8 01       	movw	r24, r16
    3d7c:	3f d6       	rcall	.+3198   	; 0x49fc <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = 0;  // Zero answer records
    3d7e:	1a 82       	std	Y+2, r1	; 0x02
    3d80:	19 82       	std	Y+1, r1	; 0x01
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    3d82:	42 e0       	ldi	r20, 0x02	; 2
    3d84:	50 e0       	ldi	r21, 0x00	; 0
    3d86:	be 01       	movw	r22, r28
    3d88:	6f 5f       	subi	r22, 0xFF	; 255
    3d8a:	7f 4f       	sbci	r23, 0xFF	; 255
    3d8c:	c8 01       	movw	r24, r16
    3d8e:	36 d6       	rcall	.+3180   	; 0x49fc <_ZN11EthernetUDP5writeEPKhj>

    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    3d90:	42 e0       	ldi	r20, 0x02	; 2
    3d92:	50 e0       	ldi	r21, 0x00	; 0
    3d94:	be 01       	movw	r22, r28
    3d96:	6f 5f       	subi	r22, 0xFF	; 255
    3d98:	7f 4f       	sbci	r23, 0xFF	; 255
    3d9a:	c8 01       	movw	r24, r16
    3d9c:	2f d6       	rcall	.+3166   	; 0x49fc <_ZN11EthernetUDP5writeEPKhj>
    // and zero additional records
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    3d9e:	42 e0       	ldi	r20, 0x02	; 2
    3da0:	50 e0       	ldi	r21, 0x00	; 0
    3da2:	be 01       	movw	r22, r28
    3da4:	6f 5f       	subi	r22, 0xFF	; 255
    3da6:	7f 4f       	sbci	r23, 0xFF	; 255
    3da8:	c8 01       	movw	r24, r16
    3daa:	28 d6       	rcall	.+3152   	; 0x49fc <_ZN11EthernetUDP5writeEPKhj>

    // Build question
    const char* start =aName;
    const char* end =start;
    3dac:	57 01       	movw	r10, r14
    uint8_t len;
    // Run through the name being requested
    while (*end)
    3dae:	f5 01       	movw	r30, r10
    3db0:	80 81       	ld	r24, Z
    3db2:	88 23       	and	r24, r24
    3db4:	f9 f0       	breq	.+62     	; 0x3df4 <_ZN9DNSClient12BuildRequestEPKc+0xe4>
    3db6:	a7 01       	movw	r20, r14
    3db8:	5a 01       	movw	r10, r20
    {
        // Find out how long this section of the name is
        end = start;
        while (*end && (*end != '.') )
    3dba:	f5 01       	movw	r30, r10
    3dbc:	81 91       	ld	r24, Z+
    3dbe:	6f 01       	movw	r12, r30
    3dc0:	88 23       	and	r24, r24
    3dc2:	21 f0       	breq	.+8      	; 0x3dcc <_ZN9DNSClient12BuildRequestEPKc+0xbc>
    3dc4:	8e 32       	cpi	r24, 0x2E	; 46
    3dc6:	11 f0       	breq	.+4      	; 0x3dcc <_ZN9DNSClient12BuildRequestEPKc+0xbc>
    3dc8:	a6 01       	movw	r20, r12
    3dca:	f6 cf       	rjmp	.-20     	; 0x3db8 <_ZN9DNSClient12BuildRequestEPKc+0xa8>
        {
            end++;
        }

        if (end-start > 0)
    3dcc:	4a 01       	movw	r8, r20
    3dce:	8e 18       	sub	r8, r14
    3dd0:	9f 08       	sbc	r9, r15
    3dd2:	18 14       	cp	r1, r8
    3dd4:	19 04       	cpc	r1, r9
    3dd6:	64 f4       	brge	.+24     	; 0x3df0 <_ZN9DNSClient12BuildRequestEPKc+0xe0>
        {
            // Write out the size of this section
            len = end-start;
    3dd8:	8b 82       	std	Y+3, r8	; 0x03
            iUdp.write(&len, sizeof(len));
    3dda:	41 e0       	ldi	r20, 0x01	; 1
    3ddc:	50 e0       	ldi	r21, 0x00	; 0
    3dde:	be 01       	movw	r22, r28
    3de0:	6d 5f       	subi	r22, 0xFD	; 253
    3de2:	7f 4f       	sbci	r23, 0xFF	; 255
    3de4:	c8 01       	movw	r24, r16
            // And then write out the section
            iUdp.write((uint8_t*)start, end-start);
    3de6:	0a d6       	rcall	.+3092   	; 0x49fc <_ZN11EthernetUDP5writeEPKhj>
    3de8:	a4 01       	movw	r20, r8
    3dea:	b7 01       	movw	r22, r14
    3dec:	c8 01       	movw	r24, r16
    3dee:	06 d6       	rcall	.+3084   	; 0x49fc <_ZN11EthernetUDP5writeEPKhj>
        }
        start = end+1;
    3df0:	76 01       	movw	r14, r12
    }

    // We've got to the end of the question name, so
    // terminate it with a zero-length section
    len = 0;
    3df2:	dd cf       	rjmp	.-70     	; 0x3dae <_ZN9DNSClient12BuildRequestEPKc+0x9e>
    iUdp.write(&len, sizeof(len));
    3df4:	1b 82       	std	Y+3, r1	; 0x03
    3df6:	41 e0       	ldi	r20, 0x01	; 1
    3df8:	50 e0       	ldi	r21, 0x00	; 0
    3dfa:	be 01       	movw	r22, r28
    3dfc:	6d 5f       	subi	r22, 0xFD	; 253
    3dfe:	7f 4f       	sbci	r23, 0xFF	; 255
    3e00:	c8 01       	movw	r24, r16
    3e02:	fc d5       	rcall	.+3064   	; 0x49fc <_ZN11EthernetUDP5writeEPKhj>
    // Finally the type and class of question
    twoByteBuffer = htons(TYPE_A);
    3e04:	e1 2c       	mov	r14, r1
    3e06:	ff 24       	eor	r15, r15
    3e08:	f3 94       	inc	r15
    3e0a:	fa 82       	std	Y+2, r15	; 0x02
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    3e0c:	e9 82       	std	Y+1, r14	; 0x01
    3e0e:	42 e0       	ldi	r20, 0x02	; 2
    3e10:	50 e0       	ldi	r21, 0x00	; 0
    3e12:	be 01       	movw	r22, r28
    3e14:	6f 5f       	subi	r22, 0xFF	; 255
    3e16:	7f 4f       	sbci	r23, 0xFF	; 255
    3e18:	c8 01       	movw	r24, r16

    twoByteBuffer = htons(CLASS_IN);  // Internet class of question
    3e1a:	f0 d5       	rcall	.+3040   	; 0x49fc <_ZN11EthernetUDP5writeEPKhj>
    3e1c:	fa 82       	std	Y+2, r15	; 0x02
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    3e1e:	e9 82       	std	Y+1, r14	; 0x01
    3e20:	42 e0       	ldi	r20, 0x02	; 2
    3e22:	50 e0       	ldi	r21, 0x00	; 0
    3e24:	be 01       	movw	r22, r28
    3e26:	6f 5f       	subi	r22, 0xFF	; 255
    3e28:	7f 4f       	sbci	r23, 0xFF	; 255
    3e2a:	c8 01       	movw	r24, r16
    3e2c:	e7 d5       	rcall	.+3022   	; 0x49fc <_ZN11EthernetUDP5writeEPKhj>
    // Success!  Everything buffered okay
    return 1;
}
    3e2e:	81 e0       	ldi	r24, 0x01	; 1
    3e30:	90 e0       	ldi	r25, 0x00	; 0
    3e32:	0f 90       	pop	r0
    3e34:	0f 90       	pop	r0
    3e36:	0f 90       	pop	r0
    3e38:	df 91       	pop	r29
    3e3a:	cf 91       	pop	r28
    3e3c:	1f 91       	pop	r17
    3e3e:	0f 91       	pop	r16
    3e40:	ff 90       	pop	r15
    3e42:	ef 90       	pop	r14
    3e44:	df 90       	pop	r13
    3e46:	cf 90       	pop	r12
    3e48:	bf 90       	pop	r11
    3e4a:	af 90       	pop	r10
    3e4c:	9f 90       	pop	r9
    3e4e:	8f 90       	pop	r8
    3e50:	08 95       	ret

00003e52 <_ZN9DNSClient15ProcessResponseEjR9IPAddress>:


uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    3e52:	2f 92       	push	r2
    3e54:	3f 92       	push	r3
    3e56:	4f 92       	push	r4
    3e58:	5f 92       	push	r5
    3e5a:	6f 92       	push	r6
    3e5c:	7f 92       	push	r7
    3e5e:	8f 92       	push	r8
    3e60:	9f 92       	push	r9
    3e62:	af 92       	push	r10
    3e64:	bf 92       	push	r11
    3e66:	cf 92       	push	r12
    3e68:	df 92       	push	r13
    3e6a:	ef 92       	push	r14
    3e6c:	ff 92       	push	r15
    3e6e:	0f 93       	push	r16
    3e70:	1f 93       	push	r17
    3e72:	cf 93       	push	r28
    3e74:	df 93       	push	r29
    3e76:	cd b7       	in	r28, 0x3d	; 61
    3e78:	de b7       	in	r29, 0x3e	; 62
    3e7a:	63 97       	sbiw	r28, 0x13	; 19
    3e7c:	0f b6       	in	r0, 0x3f	; 63
    3e7e:	f8 94       	cli
    3e80:	de bf       	out	0x3e, r29	; 62
    3e82:	0f be       	out	0x3f, r0	; 63
    3e84:	cd bf       	out	0x3d, r28	; 61
    3e86:	7c 01       	movw	r14, r24
    3e88:	6b 01       	movw	r12, r22
    3e8a:	1a 01       	movw	r2, r20
    uint32_t startTime = millis();
    3e8c:	0e 94 2e 3c 	call	0x785c	; 0x785c <millis>
    3e90:	4b 01       	movw	r8, r22
    3e92:	5c 01       	movw	r10, r24

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    3e94:	87 01       	movw	r16, r14
    3e96:	08 5f       	subi	r16, 0xF8	; 248
    3e98:	1f 4f       	sbci	r17, 0xFF	; 255
    {
        if((millis() - startTime) > aTimeout)
    3e9a:	26 01       	movw	r4, r12
    3e9c:	61 2c       	mov	r6, r1
    3e9e:	71 2c       	mov	r7, r1
uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    3ea0:	c8 01       	movw	r24, r16
    3ea2:	4e d6       	rcall	.+3228   	; 0x4b40 <_ZN11EthernetUDP11parsePacketEv>
    3ea4:	18 16       	cp	r1, r24
    3ea6:	19 06       	cpc	r1, r25
    3ea8:	a4 f0       	brlt	.+40     	; 0x3ed2 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x80>
    {
        if((millis() - startTime) > aTimeout)
    3eaa:	0e 94 2e 3c 	call	0x785c	; 0x785c <millis>
    3eae:	dc 01       	movw	r26, r24
    3eb0:	cb 01       	movw	r24, r22
    3eb2:	88 19       	sub	r24, r8
    3eb4:	99 09       	sbc	r25, r9
    3eb6:	aa 09       	sbc	r26, r10
    3eb8:	bb 09       	sbc	r27, r11
    3eba:	48 16       	cp	r4, r24
    3ebc:	59 06       	cpc	r5, r25
    3ebe:	6a 06       	cpc	r6, r26
    3ec0:	7b 06       	cpc	r7, r27
    3ec2:	d0 f0       	brcs	.+52     	; 0x3ef8 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xa6>
            return TIMED_OUT;
        delay(50);
    3ec4:	62 e3       	ldi	r22, 0x32	; 50
    3ec6:	70 e0       	ldi	r23, 0x00	; 0
    3ec8:	80 e0       	ldi	r24, 0x00	; 0
    3eca:	90 e0       	ldi	r25, 0x00	; 0
    3ecc:	0e 94 5f 3c 	call	0x78be	; 0x78be <delay>
uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    3ed0:	e7 cf       	rjmp	.-50     	; 0x3ea0 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x4e>

    // We've had a reply!
    // Read the UDP header
    uint8_t header[DNS_HEADER_SIZE]; // Enough space to reuse for the DNS header
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
    3ed2:	f7 01       	movw	r30, r14
    3ed4:	42 81       	ldd	r20, Z+2	; 0x02
    3ed6:	53 81       	ldd	r21, Z+3	; 0x03
    3ed8:	64 81       	ldd	r22, Z+4	; 0x04
    3eda:	75 81       	ldd	r23, Z+5	; 0x05
    3edc:	81 8d       	ldd	r24, Z+25	; 0x19
    3ede:	92 8d       	ldd	r25, Z+26	; 0x1a
    3ee0:	a3 8d       	ldd	r26, Z+27	; 0x1b
    3ee2:	b4 8d       	ldd	r27, Z+28	; 0x1c
    3ee4:	48 17       	cp	r20, r24
    3ee6:	59 07       	cpc	r21, r25
    3ee8:	6a 07       	cpc	r22, r26
    3eea:	7b 07       	cpc	r23, r27
    3eec:	49 f4       	brne	.+18     	; 0x3f00 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xae>
    3eee:	85 8d       	ldd	r24, Z+29	; 0x1d
    3ef0:	96 8d       	ldd	r25, Z+30	; 0x1e
    3ef2:	c5 97       	sbiw	r24, 0x35	; 53
    3ef4:	29 f4       	brne	.+10     	; 0x3f00 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xae>
    3ef6:	09 c0       	rjmp	.+18     	; 0x3f0a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xb8>

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    {
        if((millis() - startTime) > aTimeout)
            return TIMED_OUT;
    3ef8:	ee 24       	eor	r14, r14
    3efa:	ea 94       	dec	r14
    3efc:	fe 2c       	mov	r15, r14
    3efe:	f0 c0       	rjmp	.+480    	; 0x40e0 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
        (iUdp.remotePort() != DNS_PORT) )
    {
        // It's not from who we expected
        return INVALID_SERVER;
    3f00:	9e ef       	ldi	r25, 0xFE	; 254
    3f02:	e9 2e       	mov	r14, r25
    3f04:	ff 24       	eor	r15, r15
    3f06:	fa 94       	dec	r15
    3f08:	eb c0       	rjmp	.+470    	; 0x40e0 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    3f0a:	c8 01       	movw	r24, r16
    3f0c:	2d d5       	rcall	.+2650   	; 0x4968 <_ZN11EthernetUDP9availableEv>
    3f0e:	0c 97       	sbiw	r24, 0x0c	; 12
    3f10:	0c f4       	brge	.+2      	; 0x3f14 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xc2>
    3f12:	e2 c0       	rjmp	.+452    	; 0x40d8 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x286>
    {
        return TRUNCATED;
    }
    iUdp.read(header, DNS_HEADER_SIZE);
    3f14:	4c e0       	ldi	r20, 0x0C	; 12
    3f16:	50 e0       	ldi	r21, 0x00	; 0
    3f18:	be 01       	movw	r22, r28
    3f1a:	6f 5f       	subi	r22, 0xFF	; 255
    3f1c:	7f 4f       	sbci	r23, 0xFF	; 255
    3f1e:	c8 01       	movw	r24, r16
    3f20:	a8 d5       	rcall	.+2896   	; 0x4a72 <_ZN11EthernetUDP4readEPhj>

    uint16_t header_flags = htons(*((uint16_t*)&header[2]));
    3f22:	8b 81       	ldd	r24, Y+3	; 0x03
    3f24:	9c 81       	ldd	r25, Y+4	; 0x04
    3f26:	98 27       	eor	r25, r24
    3f28:	89 27       	eor	r24, r25
    3f2a:	98 27       	eor	r25, r24
    3f2c:	9a 8b       	std	Y+18, r25	; 0x12
    3f2e:	89 8b       	std	Y+17, r24	; 0x11
    // Check that it's a response to this request
    if ( ( iRequestId != (*((uint16_t*)&header[0])) ) ||
    3f30:	f7 01       	movw	r30, r14
    3f32:	46 81       	ldd	r20, Z+6	; 0x06
    3f34:	57 81       	ldd	r21, Z+7	; 0x07
    3f36:	29 81       	ldd	r18, Y+1	; 0x01
    3f38:	3a 81       	ldd	r19, Y+2	; 0x02
    3f3a:	42 17       	cp	r20, r18
    3f3c:	53 07       	cpc	r21, r19
    3f3e:	11 f4       	brne	.+4      	; 0x3f44 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xf2>
    3f40:	97 fd       	sbrc	r25, 7
        ((header_flags & QUERY_RESPONSE_MASK) != (uint16_t)RESPONSE_FLAG) )
    {
        // Mark the entire packet as read
        iUdp.flush();
    3f42:	07 c0       	rjmp	.+14     	; 0x3f52 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x100>
    3f44:	c8 01       	movw	r24, r16
    3f46:	2a d5       	rcall	.+2644   	; 0x499c <_ZN11EthernetUDP5flushEv>
        return INVALID_RESPONSE;
    3f48:	7c ef       	ldi	r23, 0xFC	; 252
    3f4a:	e7 2e       	mov	r14, r23
    3f4c:	ff 24       	eor	r15, r15
    3f4e:	fa 94       	dec	r15
    3f50:	c7 c0       	rjmp	.+398    	; 0x40e0 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    }
    // Check for any errors in the response (or in our request)
    // although we don't do anything to get round these
    if ( (header_flags & TRUNCATION_FLAG) || (header_flags & RESP_MASK) )
    3f52:	8f 70       	andi	r24, 0x0F	; 15
    3f54:	92 70       	andi	r25, 0x02	; 2
    3f56:	89 2b       	or	r24, r25
    {
        // Mark the entire packet as read
        iUdp.flush();
    3f58:	39 f0       	breq	.+14     	; 0x3f68 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x116>
    3f5a:	c8 01       	movw	r24, r16
    3f5c:	1f d5       	rcall	.+2622   	; 0x499c <_ZN11EthernetUDP5flushEv>
        return -5; //INVALID_RESPONSE;
    3f5e:	6b ef       	ldi	r22, 0xFB	; 251
    3f60:	e6 2e       	mov	r14, r22
    3f62:	ff 24       	eor	r15, r15
    3f64:	fa 94       	dec	r15
    3f66:	bc c0       	rjmp	.+376    	; 0x40e0 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    }

    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
    3f68:	cf 80       	ldd	r12, Y+7	; 0x07
    3f6a:	d8 84       	ldd	r13, Y+8	; 0x08
    3f6c:	dc 24       	eor	r13, r12
    3f6e:	cd 24       	eor	r12, r13
    3f70:	dc 24       	eor	r13, r12
    if (answerCount == 0 )
    3f72:	c1 14       	cp	r12, r1
    3f74:	d1 04       	cpc	r13, r1
    3f76:	19 f0       	breq	.+6      	; 0x3f7e <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x12c>
    3f78:	e1 2c       	mov	r14, r1
    3f7a:	f1 2c       	mov	r15, r1
    {
        // Mark the entire packet as read
        iUdp.flush();
    3f7c:	1f c0       	rjmp	.+62     	; 0x3fbc <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x16a>
    3f7e:	c8 01       	movw	r24, r16
    3f80:	0d d5       	rcall	.+2586   	; 0x499c <_ZN11EthernetUDP5flushEv>
        return -6; //INVALID_RESPONSE;
    3f82:	5a ef       	ldi	r21, 0xFA	; 250
    3f84:	e5 2e       	mov	r14, r21
    3f86:	ff 24       	eor	r15, r15
    3f88:	fa 94       	dec	r15
    3f8a:	aa c0       	rjmp	.+340    	; 0x40e0 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    {
        // Skip over the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    3f8c:	41 e0       	ldi	r20, 0x01	; 1
    3f8e:	50 e0       	ldi	r21, 0x00	; 0
    3f90:	be 01       	movw	r22, r28
    3f92:	63 5f       	subi	r22, 0xF3	; 243
    3f94:	7f 4f       	sbci	r23, 0xFF	; 255
    3f96:	c8 01       	movw	r24, r16
    3f98:	6c d5       	rcall	.+2776   	; 0x4a72 <_ZN11EthernetUDP4readEPhj>
            if (len > 0)
    3f9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f9c:	81 11       	cpse	r24, r1
                while(len--)
                {
                    iUdp.read(); // we don't care about the returned byte
                }
            }
        } while (len != 0);
    3f9e:	17 c0       	rjmp	.+46     	; 0x3fce <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x17c>
    3fa0:	8d 85       	ldd	r24, Y+13	; 0x0d

        // Now jump over the type and class
        for (int i =0; i < 4; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    3fa2:	81 11       	cpse	r24, r1
    3fa4:	f3 cf       	rjmp	.-26     	; 0x3f8c <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x13a>
    3fa6:	c8 01       	movw	r24, r16
    3fa8:	3c d5       	rcall	.+2680   	; 0x4a22 <_ZN11EthernetUDP4readEv>
    3faa:	c8 01       	movw	r24, r16
    3fac:	3a d5       	rcall	.+2676   	; 0x4a22 <_ZN11EthernetUDP4readEv>
    3fae:	c8 01       	movw	r24, r16
    3fb0:	38 d5       	rcall	.+2672   	; 0x4a22 <_ZN11EthernetUDP4readEv>
    3fb2:	c8 01       	movw	r24, r16
    3fb4:	36 d5       	rcall	.+2668   	; 0x4a22 <_ZN11EthernetUDP4readEv>
    3fb6:	ff ef       	ldi	r31, 0xFF	; 255
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    3fb8:	ef 1a       	sub	r14, r31
    3fba:	ff 0a       	sbc	r15, r31
    3fbc:	8d 81       	ldd	r24, Y+5	; 0x05
    3fbe:	9e 81       	ldd	r25, Y+6	; 0x06
    3fc0:	98 27       	eor	r25, r24
    3fc2:	89 27       	eor	r24, r25
    3fc4:	98 27       	eor	r25, r24
    3fc6:	e8 16       	cp	r14, r24
    3fc8:	f9 06       	cpc	r15, r25
    3fca:	00 f3       	brcs	.-64     	; 0x3f8c <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x13a>
    3fcc:	09 c0       	rjmp	.+18     	; 0x3fe0 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x18e>
            iUdp.read(&len, sizeof(len));
            if (len > 0)
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
    3fce:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fd0:	9f ef       	ldi	r25, 0xFF	; 255
    3fd2:	98 0f       	add	r25, r24
    3fd4:	9d 87       	std	Y+13, r25	; 0x0d
    3fd6:	88 23       	and	r24, r24
    3fd8:	19 f3       	breq	.-58     	; 0x3fa0 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x14e>
                {
                    iUdp.read(); // we don't care about the returned byte
    3fda:	c8 01       	movw	r24, r16
    3fdc:	22 d5       	rcall	.+2628   	; 0x4a22 <_ZN11EthernetUDP4readEv>
            iUdp.read(&len, sizeof(len));
            if (len > 0)
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
    3fde:	f7 cf       	rjmp	.-18     	; 0x3fce <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x17c>
    3fe0:	a1 2c       	mov	r10, r1
    3fe2:	b1 2c       	mov	r11, r1
    {
        // Skip the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    3fe4:	41 e0       	ldi	r20, 0x01	; 1
    3fe6:	50 e0       	ldi	r21, 0x00	; 0
    3fe8:	be 01       	movw	r22, r28
    3fea:	6d 5e       	subi	r22, 0xED	; 237
    3fec:	7f 4f       	sbci	r23, 0xFF	; 255
    3fee:	c8 01       	movw	r24, r16
    3ff0:	40 d5       	rcall	.+2688   	; 0x4a72 <_ZN11EthernetUDP4readEPhj>
    3ff2:	8b 89       	ldd	r24, Y+19	; 0x13
            if ((len & LABEL_COMPRESSION_MASK) == 0)
    3ff4:	98 2f       	mov	r25, r24
    3ff6:	90 7c       	andi	r25, 0xC0	; 192
    3ff8:	59 f4       	brne	.+22     	; 0x4010 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1be>
            {
                // It's just a normal label
                if (len > 0)
    3ffa:	88 23       	and	r24, r24
    3ffc:	79 f0       	breq	.+30     	; 0x401c <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1ca>
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
    3ffe:	8b 89       	ldd	r24, Y+19	; 0x13
    4000:	9f ef       	ldi	r25, 0xFF	; 255
    4002:	98 0f       	add	r25, r24
    4004:	9b 8b       	std	Y+19, r25	; 0x13
    4006:	88 23       	and	r24, r24
    4008:	31 f0       	breq	.+12     	; 0x4016 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1c4>
                    {
                        iUdp.read(); // we don't care about the returned byte
    400a:	c8 01       	movw	r24, r16
    400c:	0a d5       	rcall	.+2580   	; 0x4a22 <_ZN11EthernetUDP4readEv>
                if (len > 0)
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
    400e:	f7 cf       	rjmp	.-18     	; 0x3ffe <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1ac>
                // says that a name is either a sequence of labels ended with a
                // 0 length octet or a pointer or a sequence of labels ending in
                // a pointer.  Either way, when we get here we're at the end of
                // the name
                // Skip over the pointer
                iUdp.read(); // we don't care about the returned byte
    4010:	c8 01       	movw	r24, r16
    4012:	07 d5       	rcall	.+2574   	; 0x4a22 <_ZN11EthernetUDP4readEv>
    4014:	1b 8a       	std	Y+19, r1	; 0x13
                // And set len so that we drop out of the name loop
                len = 0;
    4016:	8b 89       	ldd	r24, Y+19	; 0x13
            }
        } while (len != 0);
    4018:	81 11       	cpse	r24, r1
    401a:	e4 cf       	rjmp	.-56     	; 0x3fe4 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x192>

        // Check the type and class
        uint16_t answerType;
        uint16_t answerClass;
        iUdp.read((uint8_t*)&answerType, sizeof(answerType));
    401c:	42 e0       	ldi	r20, 0x02	; 2
    401e:	50 e0       	ldi	r21, 0x00	; 0
    4020:	be 01       	movw	r22, r28
    4022:	61 5f       	subi	r22, 0xF1	; 241
    4024:	7f 4f       	sbci	r23, 0xFF	; 255
        iUdp.read((uint8_t*)&answerClass, sizeof(answerClass));
    4026:	c8 01       	movw	r24, r16
    4028:	24 d5       	rcall	.+2632   	; 0x4a72 <_ZN11EthernetUDP4readEPhj>
    402a:	42 e0       	ldi	r20, 0x02	; 2
    402c:	50 e0       	ldi	r21, 0x00	; 0
    402e:	be 01       	movw	r22, r28
    4030:	63 5f       	subi	r22, 0xF3	; 243
    4032:	7f 4f       	sbci	r23, 0xFF	; 255

        // Ignore the Time-To-Live as we don't do any caching
        for (int i =0; i < TTL_SIZE; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    4034:	c8 01       	movw	r24, r16
    4036:	1d d5       	rcall	.+2618   	; 0x4a72 <_ZN11EthernetUDP4readEPhj>
    4038:	c8 01       	movw	r24, r16
    403a:	f3 d4       	rcall	.+2534   	; 0x4a22 <_ZN11EthernetUDP4readEv>
    403c:	c8 01       	movw	r24, r16
    403e:	f1 d4       	rcall	.+2530   	; 0x4a22 <_ZN11EthernetUDP4readEv>
    4040:	c8 01       	movw	r24, r16
    4042:	ef d4       	rcall	.+2526   	; 0x4a22 <_ZN11EthernetUDP4readEv>
    4044:	c8 01       	movw	r24, r16
    4046:	ed d4       	rcall	.+2522   	; 0x4a22 <_ZN11EthernetUDP4readEv>
    4048:	42 e0       	ldi	r20, 0x02	; 2
    404a:	50 e0       	ldi	r21, 0x00	; 0
        }

        // And read out the length of this answer
        // Don't need header_flags anymore, so we can reuse it here
        iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));
    404c:	be 01       	movw	r22, r28
    404e:	6f 5e       	subi	r22, 0xEF	; 239
    4050:	7f 4f       	sbci	r23, 0xFF	; 255
    4052:	c8 01       	movw	r24, r16
    4054:	0e d5       	rcall	.+2588   	; 0x4a72 <_ZN11EthernetUDP4readEPhj>
    4056:	8f 85       	ldd	r24, Y+15	; 0x0f
    4058:	98 89       	ldd	r25, Y+16	; 0x10
    405a:	81 15       	cp	r24, r1

        if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) )
    405c:	91 40       	sbci	r25, 0x01	; 1
    405e:	49 f4       	brne	.+18     	; 0x4072 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x220>
    4060:	ed 84       	ldd	r14, Y+13	; 0x0d
    4062:	fe 84       	ldd	r15, Y+14	; 0x0e
    4064:	fe 24       	eor	r15, r14
    4066:	ef 24       	eor	r14, r15
    4068:	fe 24       	eor	r15, r14
    406a:	81 e0       	ldi	r24, 0x01	; 1
    406c:	e8 16       	cp	r14, r24
    406e:	f1 04       	cpc	r15, r1
    4070:	19 f0       	breq	.+6      	; 0x4078 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x226>
    4072:	e1 2c       	mov	r14, r1
    4074:	f1 2c       	mov	r15, r1
    4076:	14 c0       	rjmp	.+40     	; 0x40a0 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x24e>
    4078:	89 89       	ldd	r24, Y+17	; 0x11
        {
            if (htons(header_flags) != 4)
    407a:	9a 89       	ldd	r25, Y+18	; 0x12
    407c:	81 15       	cp	r24, r1
    407e:	94 40       	sbci	r25, 0x04	; 4
    4080:	39 f0       	breq	.+14     	; 0x4090 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x23e>
    4082:	c8 01       	movw	r24, r16
            {
                // It's a weird size
                // Mark the entire packet as read
                iUdp.flush();
    4084:	8b d4       	rcall	.+2326   	; 0x499c <_ZN11EthernetUDP5flushEv>
    4086:	47 ef       	ldi	r20, 0xF7	; 247
                return -9;//INVALID_RESPONSE;
    4088:	e4 2e       	mov	r14, r20
    408a:	ff 24       	eor	r15, r15
    408c:	fa 94       	dec	r15
    408e:	28 c0       	rjmp	.+80     	; 0x40e0 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    4090:	b1 01       	movw	r22, r2

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    4092:	6e 5f       	subi	r22, 0xFE	; 254
    4094:	7f 4f       	sbci	r23, 0xFF	; 255
    4096:	44 e0       	ldi	r20, 0x04	; 4
            }
            iUdp.read(aAddress.raw_address(), 4);
    4098:	50 e0       	ldi	r21, 0x00	; 0
    409a:	c8 01       	movw	r24, r16
    409c:	ea d4       	rcall	.+2516   	; 0x4a72 <_ZN11EthernetUDP4readEPhj>
    409e:	20 c0       	rjmp	.+64     	; 0x40e0 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
            return SUCCESS;
    40a0:	89 89       	ldd	r24, Y+17	; 0x11
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    40a2:	9a 89       	ldd	r25, Y+18	; 0x12
    40a4:	98 27       	eor	r25, r24
    40a6:	89 27       	eor	r24, r25
    40a8:	98 27       	eor	r25, r24
    40aa:	e8 16       	cp	r14, r24
    40ac:	f9 06       	cpc	r15, r25
    40ae:	30 f4       	brcc	.+12     	; 0x40bc <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x26a>
    40b0:	c8 01       	movw	r24, r16
            {
                iUdp.read(); // we don't care about the returned byte
    40b2:	b7 d4       	rcall	.+2414   	; 0x4a22 <_ZN11EthernetUDP4readEv>
    40b4:	ff ef       	ldi	r31, 0xFF	; 255
    40b6:	ef 1a       	sub	r14, r31
            return SUCCESS;
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    40b8:	ff 0a       	sbc	r15, r31
    40ba:	f2 cf       	rjmp	.-28     	; 0x40a0 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x24e>
    40bc:	2f ef       	ldi	r18, 0xFF	; 255
    40be:	a2 1a       	sub	r10, r18
    // Now we're up to the bit we're interested in, the answer
    // There might be more than one answer (although we'll just use the first
    // type A answer) and some authority and additional resource records but
    // we're going to ignore all of them.

    for (uint16_t i =0; i < answerCount; i++)
    40c0:	b2 0a       	sbc	r11, r18
    40c2:	ca 14       	cp	r12, r10
    40c4:	db 04       	cpc	r13, r11
    40c6:	09 f0       	breq	.+2      	; 0x40ca <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x278>
    40c8:	8d cf       	rjmp	.-230    	; 0x3fe4 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x192>
    40ca:	c8 01       	movw	r24, r16
    40cc:	67 d4       	rcall	.+2254   	; 0x499c <_ZN11EthernetUDP5flushEv>
            }
        }
    }

    // Mark the entire packet as read
    iUdp.flush();
    40ce:	36 ef       	ldi	r19, 0xF6	; 246
    40d0:	e3 2e       	mov	r14, r19
    40d2:	ff 24       	eor	r15, r15

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
    40d4:	fa 94       	dec	r15
    40d6:	04 c0       	rjmp	.+8      	; 0x40e0 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    40d8:	8d ef       	ldi	r24, 0xFD	; 253
    40da:	e8 2e       	mov	r14, r24
    40dc:	ff 24       	eor	r15, r15
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    {
        return TRUNCATED;
    40de:	fa 94       	dec	r15
    40e0:	c7 01       	movw	r24, r14
    40e2:	63 96       	adiw	r28, 0x13	; 19
    40e4:	0f b6       	in	r0, 0x3f	; 63
    // Mark the entire packet as read
    iUdp.flush();

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
}
    40e6:	f8 94       	cli
    40e8:	de bf       	out	0x3e, r29	; 62
    40ea:	0f be       	out	0x3f, r0	; 63
    40ec:	cd bf       	out	0x3d, r28	; 61
    40ee:	df 91       	pop	r29
    40f0:	cf 91       	pop	r28
    40f2:	1f 91       	pop	r17
    40f4:	0f 91       	pop	r16
    40f6:	ff 90       	pop	r15
    40f8:	ef 90       	pop	r14
    40fa:	df 90       	pop	r13
    40fc:	cf 90       	pop	r12
    40fe:	bf 90       	pop	r11
    4100:	af 90       	pop	r10
    4102:	9f 90       	pop	r9
    4104:	8f 90       	pop	r8
    4106:	7f 90       	pop	r7
    4108:	6f 90       	pop	r6
    410a:	5f 90       	pop	r5
    410c:	4f 90       	pop	r4
    410e:	3f 90       	pop	r3
    4110:	2f 90       	pop	r2
    4112:	08 95       	ret

00004114 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>:
    4114:	8f 92       	push	r8
    4116:	9f 92       	push	r9
    4118:	af 92       	push	r10
        return 0;
    }
}

int DNSClient::getHostByName(const char* aHostname, IPAddress& aResult)
{
    411a:	bf 92       	push	r11
    411c:	cf 92       	push	r12
    411e:	df 92       	push	r13
    4120:	ef 92       	push	r14
    4122:	ff 92       	push	r15
    4124:	0f 93       	push	r16
    4126:	1f 93       	push	r17
    4128:	cf 93       	push	r28
    412a:	df 93       	push	r29
    412c:	00 d0       	rcall	.+0      	; 0x412e <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x1a>
    412e:	00 d0       	rcall	.+0      	; 0x4130 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x1c>
    4130:	00 d0       	rcall	.+0      	; 0x4132 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x1e>
    4132:	cd b7       	in	r28, 0x3d	; 61
    4134:	de b7       	in	r29, 0x3e	; 62
    4136:	7c 01       	movw	r14, r24
    4138:	4b 01       	movw	r8, r22
    413a:	5a 01       	movw	r10, r20
    int ret =0;

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
    413c:	9e dd       	rcall	.-1220   	; 0x3c7a <_ZN9DNSClient9inet_atonEPKcR9IPAddress>
    413e:	8c 01       	movw	r16, r24
    4140:	89 2b       	or	r24, r25
    4142:	09 f0       	breq	.+2      	; 0x4146 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x32>
    4144:	57 c0       	rjmp	.+174    	; 0x41f4 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xe0>
        // It is, our work here is done
        return 1;
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    4146:	f7 01       	movw	r30, r14
    4148:	42 81       	ldd	r20, Z+2	; 0x02
    414a:	53 81       	ldd	r21, Z+3	; 0x03
    414c:	64 81       	ldd	r22, Z+4	; 0x04
    414e:	75 81       	ldd	r23, Z+5	; 0x05
    4150:	80 91 47 0c 	lds	r24, 0x0C47	; 0x800c47 <_ZL11INADDR_NONE+0x2>
    4154:	90 91 48 0c 	lds	r25, 0x0C48	; 0x800c48 <_ZL11INADDR_NONE+0x3>
    4158:	a0 91 49 0c 	lds	r26, 0x0C49	; 0x800c49 <_ZL11INADDR_NONE+0x4>
    415c:	b0 91 4a 0c 	lds	r27, 0x0C4A	; 0x800c4a <_ZL11INADDR_NONE+0x5>
    4160:	48 17       	cp	r20, r24
    4162:	59 07       	cpc	r21, r25
    4164:	6a 07       	cpc	r22, r26
    4166:	7b 07       	cpc	r23, r27
    4168:	09 f4       	brne	.+2      	; 0x416c <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x58>
    416a:	47 c0       	rjmp	.+142    	; 0x41fa <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xe6>
    {
        return INVALID_SERVER;
    }
	
    // Find a socket to use
    if (iUdp.begin(1024+(millis() & 0xF)) == 1)
    416c:	0e 94 2e 3c 	call	0x785c	; 0x785c <millis>
    4170:	67 01       	movw	r12, r14
    4172:	f8 e0       	ldi	r31, 0x08	; 8
    4174:	cf 0e       	add	r12, r31
    4176:	d1 1c       	adc	r13, r1
    4178:	6f 70       	andi	r22, 0x0F	; 15
    417a:	77 27       	eor	r23, r23
    417c:	7c 5f       	subi	r23, 0xFC	; 252
    417e:	c6 01       	movw	r24, r12
    4180:	ae d4       	rcall	.+2396   	; 0x4ade <_ZN11EthernetUDP5beginEj>
    4182:	81 30       	cpi	r24, 0x01	; 1
    4184:	09 f0       	breq	.+2      	; 0x4188 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x74>
    4186:	3b c0       	rjmp	.+118    	; 0x41fe <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xea>
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    4188:	81 e6       	ldi	r24, 0x61	; 97
    418a:	99 e0       	ldi	r25, 0x09	; 9
    418c:	9a 83       	std	Y+2, r25	; 0x02
    418e:	89 83       	std	Y+1, r24	; 0x01
    4190:	f7 01       	movw	r30, r14
    4192:	82 81       	ldd	r24, Z+2	; 0x02
    4194:	93 81       	ldd	r25, Z+3	; 0x03
    4196:	a4 81       	ldd	r26, Z+4	; 0x04
    4198:	b5 81       	ldd	r27, Z+5	; 0x05
    419a:	8b 83       	std	Y+3, r24	; 0x03
    419c:	9c 83       	std	Y+4, r25	; 0x04
    419e:	ad 83       	std	Y+5, r26	; 0x05
    41a0:	be 83       	std	Y+6, r27	; 0x06
        // Try up to three times
        int retries = 0;
//        while ((retries < 3) && (ret <= 0))
        {
            // Send DNS request
            ret = iUdp.beginPacket(iDNSServer, DNS_PORT);
    41a2:	45 e3       	ldi	r20, 0x35	; 53
    41a4:	50 e0       	ldi	r21, 0x00	; 0
    41a6:	be 01       	movw	r22, r28
    41a8:	6f 5f       	subi	r22, 0xFF	; 255
    41aa:	7f 4f       	sbci	r23, 0xFF	; 255
    41ac:	c6 01       	movw	r24, r12
    41ae:	1c d4       	rcall	.+2104   	; 0x49e8 <_ZN11EthernetUDP11beginPacketE9IPAddressj>
            if (ret != 0)
    41b0:	89 2b       	or	r24, r25
    41b2:	19 f4       	brne	.+6      	; 0x41ba <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xa6>
    41b4:	00 e0       	ldi	r16, 0x00	; 0
    41b6:	10 e0       	ldi	r17, 0x00	; 0
            {
                // Now output the request data
                ret = BuildRequest(aHostname);
    41b8:	1a c0       	rjmp	.+52     	; 0x41ee <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xda>
    41ba:	b4 01       	movw	r22, r8
    41bc:	c7 01       	movw	r24, r14
                if (ret != 0)
    41be:	a8 dd       	rcall	.-1200   	; 0x3d10 <_ZN9DNSClient12BuildRequestEPKc>
    41c0:	89 2b       	or	r24, r25
                {
                    // And finally send the request
                    ret = iUdp.endPacket();
    41c2:	c1 f3       	breq	.-16     	; 0x41b4 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xa0>
    41c4:	c6 01       	movw	r24, r12
    41c6:	17 d4       	rcall	.+2094   	; 0x49f6 <_ZN11EthernetUDP9endPacketEv>
                    if (ret != 0)
    41c8:	89 2b       	or	r24, r25
    41ca:	a1 f3       	breq	.-24     	; 0x41b4 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xa0>
    41cc:	83 e0       	ldi	r24, 0x03	; 3
    41ce:	88 2e       	mov	r8, r24
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
                        {
                            ret = ProcessResponse(5000, aResult);
    41d0:	91 2c       	mov	r9, r1
    41d2:	a5 01       	movw	r20, r10
    41d4:	68 e8       	ldi	r22, 0x88	; 136
    41d6:	73 e1       	ldi	r23, 0x13	; 19
    41d8:	c7 01       	movw	r24, r14
    41da:	3b de       	rcall	.-906    	; 0x3e52 <_ZN9DNSClient15ProcessResponseEjR9IPAddress>
    41dc:	8c 01       	movw	r16, r24
    41de:	21 e0       	ldi	r18, 0x01	; 1
    41e0:	82 1a       	sub	r8, r18
    41e2:	91 08       	sbc	r9, r1
                    if (ret != 0)
                    {
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
    41e4:	21 f0       	breq	.+8      	; 0x41ee <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xda>
    41e6:	0f 3f       	cpi	r16, 0xFF	; 255
    41e8:	ff ef       	ldi	r31, 0xFF	; 255
    41ea:	1f 07       	cpc	r17, r31
            }
            retries++;
        }

        // We're done with the socket now
        iUdp.stop();
    41ec:	91 f3       	breq	.-28     	; 0x41d2 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xbe>
    41ee:	c6 01       	movw	r24, r12
    41f0:	e7 d3       	rcall	.+1998   	; 0x49c0 <_ZN11EthernetUDP4stopEv>
    41f2:	05 c0       	rjmp	.+10     	; 0x41fe <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xea>

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
    {
        // It is, our work here is done
        return 1;
    41f4:	01 e0       	ldi	r16, 0x01	; 1
    41f6:	10 e0       	ldi	r17, 0x00	; 0
    41f8:	02 c0       	rjmp	.+4      	; 0x41fe <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xea>
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    {
        return INVALID_SERVER;
    41fa:	0e ef       	ldi	r16, 0xFE	; 254
    41fc:	1f ef       	ldi	r17, 0xFF	; 255
        // We're done with the socket now
        iUdp.stop();
    }

    return ret;
}
    41fe:	c8 01       	movw	r24, r16
    4200:	26 96       	adiw	r28, 0x06	; 6
    4202:	0f b6       	in	r0, 0x3f	; 63
    4204:	f8 94       	cli
    4206:	de bf       	out	0x3e, r29	; 62
    4208:	0f be       	out	0x3f, r0	; 63
    420a:	cd bf       	out	0x3d, r28	; 61
    420c:	df 91       	pop	r29
    420e:	cf 91       	pop	r28
    4210:	1f 91       	pop	r17
    4212:	0f 91       	pop	r16
    4214:	ff 90       	pop	r15
    4216:	ef 90       	pop	r14
    4218:	df 90       	pop	r13
    421a:	cf 90       	pop	r12
    421c:	bf 90       	pop	r11
    421e:	af 90       	pop	r10
    4220:	9f 90       	pop	r9
    4222:	8f 90       	pop	r8
    4224:	08 95       	ret

00004226 <_ZN10W5500Class8writeGAREPh>:
    return _dnsDomainName;
}

char* EthernetClass::hostName(){
    return _hostName;
}
    4226:	24 e0       	ldi	r18, 0x04	; 4
    4228:	30 e0       	ldi	r19, 0x00	; 0
    422a:	ac 01       	movw	r20, r24
    422c:	64 e0       	ldi	r22, 0x04	; 4
    422e:	81 e0       	ldi	r24, 0x01	; 1
    4230:	90 e0       	ldi	r25, 0x00	; 0
    4232:	4d c7       	rjmp	.+3738   	; 0x50ce <_ZN10W5500Class5writeEjhPKhj>

00004234 <_ZN10W5500Class9writeSUBREPh>:
    4234:	24 e0       	ldi	r18, 0x04	; 4
    4236:	30 e0       	ldi	r19, 0x00	; 0
    4238:	ac 01       	movw	r20, r24
    423a:	64 e0       	ldi	r22, 0x04	; 4
    423c:	85 e0       	ldi	r24, 0x05	; 5
    423e:	90 e0       	ldi	r25, 0x00	; 0
    4240:	46 c7       	rjmp	.+3724   	; 0x50ce <_ZN10W5500Class5writeEjhPKhj>

00004242 <_ZN10W5500Class9writeSHAREPh>:
    4242:	26 e0       	ldi	r18, 0x06	; 6
    4244:	30 e0       	ldi	r19, 0x00	; 0
    4246:	ac 01       	movw	r20, r24
    4248:	64 e0       	ldi	r22, 0x04	; 4
    424a:	89 e0       	ldi	r24, 0x09	; 9
    424c:	90 e0       	ldi	r25, 0x00	; 0
    424e:	3f c7       	rjmp	.+3710   	; 0x50ce <_ZN10W5500Class5writeEjhPKhj>

00004250 <_ZN10W5500Class9writeSIPREPh>:
    4250:	24 e0       	ldi	r18, 0x04	; 4
    4252:	30 e0       	ldi	r19, 0x00	; 0
    4254:	ac 01       	movw	r20, r24
    4256:	64 e0       	ldi	r22, 0x04	; 4
    4258:	8f e0       	ldi	r24, 0x0F	; 15
    425a:	90 e0       	ldi	r25, 0x00	; 0
    425c:	38 c7       	rjmp	.+3696   	; 0x50ce <_ZN10W5500Class5writeEjhPKhj>

0000425e <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_>:
    425e:	8f 92       	push	r8
    4260:	9f 92       	push	r9
    4262:	af 92       	push	r10
    4264:	bf 92       	push	r11
    4266:	cf 92       	push	r12
    4268:	df 92       	push	r13
    426a:	ef 92       	push	r14
    426c:	ff 92       	push	r15
    426e:	0f 93       	push	r16
    4270:	1f 93       	push	r17
    4272:	cf 93       	push	r28
    4274:	df 93       	push	r29
    4276:	4c 01       	movw	r8, r24
    4278:	5b 01       	movw	r10, r22
    427a:	6a 01       	movw	r12, r20
    427c:	e9 01       	movw	r28, r18
    427e:	fc 01       	movw	r30, r24
    4280:	64 85       	ldd	r22, Z+12	; 0x0c
    4282:	8b e8       	ldi	r24, 0x8B	; 139
    4284:	9c e0       	ldi	r25, 0x0C	; 12
    4286:	6f d7       	rcall	.+3806   	; 0x5166 <_ZN10W5500Class4initEh>
    4288:	c5 01       	movw	r24, r10
    428a:	db df       	rcall	.-74     	; 0x4242 <_ZN10W5500Class9writeSHAREPh>
    428c:	c6 01       	movw	r24, r12
    428e:	02 96       	adiw	r24, 0x02	; 2
    4290:	df df       	rcall	.-66     	; 0x4250 <_ZN10W5500Class9writeSIPREPh>
    4292:	c8 01       	movw	r24, r16
    4294:	02 96       	adiw	r24, 0x02	; 2
    4296:	c7 df       	rcall	.-114    	; 0x4226 <_ZN10W5500Class8writeGAREPh>
    4298:	c7 01       	movw	r24, r14
    429a:	02 96       	adiw	r24, 0x02	; 2
    429c:	cb df       	rcall	.-106    	; 0x4234 <_ZN10W5500Class9writeSUBREPh>
    429e:	8a 81       	ldd	r24, Y+2	; 0x02
    42a0:	9b 81       	ldd	r25, Y+3	; 0x03
    42a2:	ac 81       	ldd	r26, Y+4	; 0x04
    42a4:	bd 81       	ldd	r27, Y+5	; 0x05
    42a6:	f4 01       	movw	r30, r8
    42a8:	82 83       	std	Z+2, r24	; 0x02
    42aa:	93 83       	std	Z+3, r25	; 0x03
    42ac:	a4 83       	std	Z+4, r26	; 0x04
    42ae:	b5 83       	std	Z+5, r27	; 0x05
    42b0:	df 91       	pop	r29
    42b2:	cf 91       	pop	r28
    42b4:	1f 91       	pop	r17
    42b6:	0f 91       	pop	r16
    42b8:	ff 90       	pop	r15
    42ba:	ef 90       	pop	r14
    42bc:	df 90       	pop	r13
    42be:	cf 90       	pop	r12
    42c0:	bf 90       	pop	r11
    42c2:	af 90       	pop	r10
    42c4:	9f 90       	pop	r9
    42c6:	8f 90       	pop	r8
    42c8:	08 95       	ret

000042ca <_ZN13EthernetClass11dnsServerIPEv>:
    42ca:	21 e6       	ldi	r18, 0x61	; 97
    42cc:	39 e0       	ldi	r19, 0x09	; 9
    42ce:	fc 01       	movw	r30, r24
    42d0:	31 83       	std	Z+1, r19	; 0x01
    42d2:	20 83       	st	Z, r18
    42d4:	fb 01       	movw	r30, r22
    42d6:	42 81       	ldd	r20, Z+2	; 0x02
    42d8:	53 81       	ldd	r21, Z+3	; 0x03
    42da:	64 81       	ldd	r22, Z+4	; 0x04
    42dc:	75 81       	ldd	r23, Z+5	; 0x05
    42de:	fc 01       	movw	r30, r24
    42e0:	42 83       	std	Z+2, r20	; 0x02
    42e2:	53 83       	std	Z+3, r21	; 0x03
    42e4:	64 83       	std	Z+4, r22	; 0x04
    42e6:	75 83       	std	Z+5, r23	; 0x05
    42e8:	08 95       	ret

000042ea <_GLOBAL__sub_I__ZN13EthernetClass6_stateE>:

EthernetClass Ethernet;
    42ea:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    42ec:	00 e0       	ldi	r16, 0x00	; 0
    42ee:	20 e0       	ldi	r18, 0x00	; 0
    42f0:	40 e0       	ldi	r20, 0x00	; 0
    42f2:	60 e0       	ldi	r22, 0x00	; 0
    42f4:	88 e6       	ldi	r24, 0x68	; 104
    42f6:	9c e0       	ldi	r25, 0x0C	; 12
    42f8:	0e 94 91 3a 	call	0x7522	; 0x7522 <_ZN9IPAddressC1Ehhhh>
  uint8_t w5500_cspin;

  static uint8_t _state[MAX_SOCK_NUM];
  static uint16_t _server_port[MAX_SOCK_NUM];

  EthernetClass() { _dhcp = NULL; w5500_cspin = 10; }
    42fc:	8b e4       	ldi	r24, 0x4B	; 75
    42fe:	9c e0       	ldi	r25, 0x0C	; 12
    4300:	0e 94 87 3a 	call	0x750e	; 0x750e <_ZN9IPAddressC1Ev>
    4304:	eb e4       	ldi	r30, 0x4B	; 75
    4306:	fc e0       	ldi	r31, 0x0C	; 12
    4308:	13 86       	std	Z+11, r1	; 0x0b
    430a:	12 86       	std	Z+10, r1	; 0x0a
    430c:	8a e0       	ldi	r24, 0x0A	; 10
    430e:	84 87       	std	Z+12, r24	; 0x0c
    4310:	0f 91       	pop	r16
    4312:	08 95       	ret

00004314 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    4314:	80 e0       	ldi	r24, 0x00	; 0
    4316:	90 e0       	ldi	r25, 0x00	; 0
    4318:	08 95       	ret

0000431a <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    431a:	08 95       	ret

0000431c <_ZN14EthernetClientneERKS_>:
  virtual void flush();
  virtual void stop();
  virtual uint8_t connected();
  virtual operator bool();
  virtual bool operator==(const EthernetClient&);
  virtual bool operator!=(const EthernetClient& rhs) { return !this->operator==(rhs); };
    431c:	dc 01       	movw	r26, r24
    431e:	ed 91       	ld	r30, X+
    4320:	fc 91       	ld	r31, X
    4322:	02 8c       	ldd	r0, Z+26	; 0x1a
    4324:	f3 8d       	ldd	r31, Z+27	; 0x1b
    4326:	e0 2d       	mov	r30, r0
    4328:	09 95       	icall
    432a:	91 e0       	ldi	r25, 0x01	; 1
    432c:	89 27       	eor	r24, r25
    432e:	08 95       	ret

00004330 <_ZN14EthernetClient5writeEh>:
  }

  return 1;
}

size_t EthernetClient::write(uint8_t b) {
    4330:	cf 93       	push	r28
    4332:	df 93       	push	r29
    4334:	1f 92       	push	r1
    4336:	cd b7       	in	r28, 0x3d	; 61
    4338:	de b7       	in	r29, 0x3e	; 62
    433a:	69 83       	std	Y+1, r22	; 0x01
  return write(&b, 1);
    433c:	dc 01       	movw	r26, r24
    433e:	ed 91       	ld	r30, X+
    4340:	fc 91       	ld	r31, X
    4342:	02 80       	ldd	r0, Z+2	; 0x02
    4344:	f3 81       	ldd	r31, Z+3	; 0x03
    4346:	e0 2d       	mov	r30, r0
    4348:	41 e0       	ldi	r20, 0x01	; 1
    434a:	50 e0       	ldi	r21, 0x00	; 0
    434c:	be 01       	movw	r22, r28
    434e:	6f 5f       	subi	r22, 0xFF	; 255
    4350:	7f 4f       	sbci	r23, 0xFF	; 255
    4352:	09 95       	icall
}
    4354:	0f 90       	pop	r0
    4356:	df 91       	pop	r29
    4358:	cf 91       	pop	r28
    435a:	08 95       	ret

0000435c <_ZN14EthernetClientcvbEv>:

// the next function allows us to use the client returned by
// EthernetServer::available() as the condition in an if-statement.

EthernetClient::operator bool() {
  return _sock != MAX_SOCK_NUM;
    435c:	21 e0       	ldi	r18, 0x01	; 1
    435e:	fc 01       	movw	r30, r24
    4360:	84 85       	ldd	r24, Z+12	; 0x0c
    4362:	88 30       	cpi	r24, 0x08	; 8
    4364:	09 f4       	brne	.+2      	; 0x4368 <_ZN14EthernetClientcvbEv+0xc>
    4366:	20 e0       	ldi	r18, 0x00	; 0
}
    4368:	82 2f       	mov	r24, r18
    436a:	08 95       	ret

0000436c <_ZN14EthernetClienteqERKS_>:

bool EthernetClient::operator==(const EthernetClient& rhs) {
  return _sock == rhs._sock && _sock != MAX_SOCK_NUM && rhs._sock != MAX_SOCK_NUM;
    436c:	fc 01       	movw	r30, r24
    436e:	94 85       	ldd	r25, Z+12	; 0x0c
    4370:	fb 01       	movw	r30, r22
    4372:	84 85       	ldd	r24, Z+12	; 0x0c
    4374:	98 13       	cpse	r25, r24
    4376:	03 c0       	rjmp	.+6      	; 0x437e <_ZN14EthernetClienteqERKS_+0x12>
    4378:	81 e0       	ldi	r24, 0x01	; 1
    437a:	98 30       	cpi	r25, 0x08	; 8
    437c:	09 f4       	brne	.+2      	; 0x4380 <_ZN14EthernetClienteqERKS_+0x14>
    437e:	80 e0       	ldi	r24, 0x00	; 0
}
    4380:	08 95       	ret

00004382 <_ZN14EthernetClient7connectEPKcj>:
}

EthernetClient::EthernetClient(uint8_t sock) : _sock(sock) {
}

int EthernetClient::connect(const char* host, uint16_t port) {
    4382:	cf 92       	push	r12
    4384:	df 92       	push	r13
    4386:	ef 92       	push	r14
    4388:	ff 92       	push	r15
    438a:	0f 93       	push	r16
    438c:	1f 93       	push	r17
    438e:	cf 93       	push	r28
    4390:	df 93       	push	r29
    4392:	cd b7       	in	r28, 0x3d	; 61
    4394:	de b7       	in	r29, 0x3e	; 62
    4396:	af 97       	sbiw	r28, 0x2f	; 47
    4398:	0f b6       	in	r0, 0x3f	; 63
    439a:	f8 94       	cli
    439c:	de bf       	out	0x3e, r29	; 62
    439e:	0f be       	out	0x3f, r0	; 63
    43a0:	cd bf       	out	0x3d, r28	; 61
    43a2:	8c 01       	movw	r16, r24
    43a4:	6b 01       	movw	r12, r22
    43a6:	7a 01       	movw	r14, r20
#ifndef DNSClient_h
#define DNSClient_h

#include <EthernetUdp2.h>

class DNSClient
    43a8:	ce 01       	movw	r24, r28
    43aa:	01 96       	adiw	r24, 0x01	; 1
    43ac:	0e 94 87 3a 	call	0x750e	; 0x750e <_ZN9IPAddressC1Ev>
    43b0:	ce 01       	movw	r24, r28
    43b2:	09 96       	adiw	r24, 0x09	; 9
    43b4:	14 d4       	rcall	.+2088   	; 0x4bde <_ZN11EthernetUDPC1Ev>
  // Look up the host first
  int ret = 0;
  DNSClient dns;
  IPAddress remote_addr;
    43b6:	ce 01       	movw	r24, r28
    43b8:	8a 96       	adiw	r24, 0x2a	; 42
    43ba:	0e 94 87 3a 	call	0x750e	; 0x750e <_ZN9IPAddressC1Ev>

  dns.begin(Ethernet.dnsServerIP());
    43be:	6b e4       	ldi	r22, 0x4B	; 75
    43c0:	7c e0       	ldi	r23, 0x0C	; 12
    43c2:	ce 01       	movw	r24, r28
    43c4:	84 96       	adiw	r24, 0x24	; 36
    43c6:	81 df       	rcall	.-254    	; 0x42ca <_ZN13EthernetClass11dnsServerIPEv>
    43c8:	be 01       	movw	r22, r28
    43ca:	6c 5d       	subi	r22, 0xDC	; 220
    43cc:	7f 4f       	sbci	r23, 0xFF	; 255
    43ce:	ce 01       	movw	r24, r28
    43d0:	01 96       	adiw	r24, 0x01	; 1
    43d2:	46 dc       	rcall	.-1908   	; 0x3c60 <_ZN9DNSClient5beginERK9IPAddress>
  ret = dns.getHostByName(host, remote_addr);
    43d4:	ae 01       	movw	r20, r28
    43d6:	46 5d       	subi	r20, 0xD6	; 214
    43d8:	5f 4f       	sbci	r21, 0xFF	; 255
    43da:	b6 01       	movw	r22, r12
    43dc:	ce 01       	movw	r24, r28
    43de:	01 96       	adiw	r24, 0x01	; 1
    43e0:	99 de       	rcall	.-718    	; 0x4114 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>
  if (ret == 1) {
    43e2:	81 30       	cpi	r24, 0x01	; 1
    43e4:	91 05       	cpc	r25, r1
    43e6:	c1 f4       	brne	.+48     	; 0x4418 <_ZN14EthernetClient7connectEPKcj+0x96>
    return connect(remote_addr, port);
    43e8:	d8 01       	movw	r26, r16
    43ea:	ed 91       	ld	r30, X+
    43ec:	fc 91       	ld	r31, X
    43ee:	06 84       	ldd	r0, Z+14	; 0x0e
    43f0:	f7 85       	ldd	r31, Z+15	; 0x0f
    43f2:	e0 2d       	mov	r30, r0
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    43f4:	81 e6       	ldi	r24, 0x61	; 97
    43f6:	99 e0       	ldi	r25, 0x09	; 9
    43f8:	9d a3       	std	Y+37, r25	; 0x25
    43fa:	8c a3       	std	Y+36, r24	; 0x24
    43fc:	8c a5       	ldd	r24, Y+44	; 0x2c
    43fe:	9d a5       	ldd	r25, Y+45	; 0x2d
    4400:	ae a5       	ldd	r26, Y+46	; 0x2e
    4402:	bf a5       	ldd	r27, Y+47	; 0x2f
    4404:	8e a3       	std	Y+38, r24	; 0x26
    4406:	9f a3       	std	Y+39, r25	; 0x27
    4408:	a8 a7       	std	Y+40, r26	; 0x28
    440a:	b9 a7       	std	Y+41, r27	; 0x29
    440c:	a7 01       	movw	r20, r14
    440e:	be 01       	movw	r22, r28
    4410:	6c 5d       	subi	r22, 0xDC	; 220
    4412:	7f 4f       	sbci	r23, 0xFF	; 255
    4414:	c8 01       	movw	r24, r16
    4416:	09 95       	icall
  } else {
    return ret;
  }
}
    4418:	af 96       	adiw	r28, 0x2f	; 47
    441a:	0f b6       	in	r0, 0x3f	; 63
    441c:	f8 94       	cli
    441e:	de bf       	out	0x3e, r29	; 62
    4420:	0f be       	out	0x3f, r0	; 63
    4422:	cd bf       	out	0x3d, r28	; 61
    4424:	df 91       	pop	r29
    4426:	cf 91       	pop	r28
    4428:	1f 91       	pop	r17
    442a:	0f 91       	pop	r16
    442c:	ff 90       	pop	r15
    442e:	ef 90       	pop	r14
    4430:	df 90       	pop	r13
    4432:	cf 90       	pop	r12
    4434:	08 95       	ret

00004436 <_ZN14EthernetClient5writeEPKhj>:

size_t EthernetClient::write(uint8_t b) {
  return write(&b, 1);
}

size_t EthernetClient::write(const uint8_t *buf, size_t size) {
    4436:	0f 93       	push	r16
    4438:	1f 93       	push	r17
    443a:	cf 93       	push	r28
    443c:	df 93       	push	r29
    443e:	8c 01       	movw	r16, r24
    4440:	d4 2f       	mov	r29, r20
    4442:	c5 2f       	mov	r28, r21
  if (_sock == MAX_SOCK_NUM) {
    4444:	fc 01       	movw	r30, r24
    4446:	84 85       	ldd	r24, Z+12	; 0x0c
    4448:	88 30       	cpi	r24, 0x08	; 8
    444a:	41 f4       	brne	.+16     	; 0x445c <_ZN14EthernetClient5writeEPKhj+0x26>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    444c:	81 e0       	ldi	r24, 0x01	; 1
    444e:	90 e0       	ldi	r25, 0x00	; 0
    4450:	f8 01       	movw	r30, r16
    4452:	93 83       	std	Z+3, r25	; 0x03
    4454:	82 83       	std	Z+2, r24	; 0x02
    setWriteError();
    return 0;
    4456:	80 e0       	ldi	r24, 0x00	; 0
    4458:	90 e0       	ldi	r25, 0x00	; 0
    445a:	05 c0       	rjmp	.+10     	; 0x4466 <_ZN14EthernetClient5writeEPKhj+0x30>
  }
  if (!send(_sock, buf, size)) {
    445c:	0c d5       	rcall	.+2584   	; 0x4e76 <_Z4sendhPKhj>
    445e:	89 2b       	or	r24, r25
    4460:	a9 f3       	breq	.-22     	; 0x444c <_ZN14EthernetClient5writeEPKhj+0x16>
    setWriteError();
    return 0;
  }
  return size;
    4462:	8d 2f       	mov	r24, r29
    4464:	9c 2f       	mov	r25, r28
}
    4466:	df 91       	pop	r29
    4468:	cf 91       	pop	r28
    446a:	1f 91       	pop	r17
    446c:	0f 91       	pop	r16
    446e:	08 95       	ret

00004470 <_ZN14EthernetClient9availableEv>:

int EthernetClient::available() {
  if (_sock != MAX_SOCK_NUM)
    4470:	fc 01       	movw	r30, r24
    4472:	64 85       	ldd	r22, Z+12	; 0x0c
    4474:	68 30       	cpi	r22, 0x08	; 8
    4476:	19 f0       	breq	.+6      	; 0x447e <_ZN14EthernetClient9availableEv+0xe>
    return w5500.getRXReceivedSize(_sock);
    4478:	8b e8       	ldi	r24, 0x8B	; 139
    447a:	9c e0       	ldi	r25, 0x0C	; 12
    447c:	e9 c6       	rjmp	.+3538   	; 0x5250 <_ZN10W5500Class17getRXReceivedSizeEh>
  return 0;
}
    447e:	80 e0       	ldi	r24, 0x00	; 0
    4480:	90 e0       	ldi	r25, 0x00	; 0
    4482:	08 95       	ret

00004484 <_ZN14EthernetClient4readEv>:

int EthernetClient::read() {
    4484:	cf 93       	push	r28
    4486:	df 93       	push	r29
    4488:	1f 92       	push	r1
    448a:	cd b7       	in	r28, 0x3d	; 61
    448c:	de b7       	in	r29, 0x3e	; 62
  uint8_t b;
  if ( recv(_sock, &b, 1) > 0 )
    448e:	41 e0       	ldi	r20, 0x01	; 1
    4490:	50 e0       	ldi	r21, 0x00	; 0
    4492:	be 01       	movw	r22, r28
    4494:	6f 5f       	subi	r22, 0xFF	; 255
    4496:	7f 4f       	sbci	r23, 0xFF	; 255
    4498:	fc 01       	movw	r30, r24
    449a:	84 85       	ldd	r24, Z+12	; 0x0c
    449c:	34 d5       	rcall	.+2664   	; 0x4f06 <_Z4recvhPhi>
    449e:	18 16       	cp	r1, r24
    44a0:	19 06       	cpc	r1, r25
    44a2:	1c f4       	brge	.+6      	; 0x44aa <_ZN14EthernetClient4readEv+0x26>
  {
    // recv worked
    return b;
    44a4:	89 81       	ldd	r24, Y+1	; 0x01
    44a6:	90 e0       	ldi	r25, 0x00	; 0
    44a8:	02 c0       	rjmp	.+4      	; 0x44ae <_ZN14EthernetClient4readEv+0x2a>
  }
  else
  {
    // No data available
    return -1;
    44aa:	8f ef       	ldi	r24, 0xFF	; 255
    44ac:	9f ef       	ldi	r25, 0xFF	; 255
  }
}
    44ae:	0f 90       	pop	r0
    44b0:	df 91       	pop	r29
    44b2:	cf 91       	pop	r28
    44b4:	08 95       	ret

000044b6 <_ZN14EthernetClient4readEPhj>:

int EthernetClient::read(uint8_t *buf, size_t size) {
  return recv(_sock, buf, size);
    44b6:	fc 01       	movw	r30, r24
    44b8:	84 85       	ldd	r24, Z+12	; 0x0c
    44ba:	25 c5       	rjmp	.+2634   	; 0x4f06 <_Z4recvhPhi>

000044bc <_ZN14EthernetClient4peekEv>:
}

int EthernetClient::peek() {
    44bc:	0f 93       	push	r16
    44be:	1f 93       	push	r17
    44c0:	cf 93       	push	r28
    44c2:	df 93       	push	r29
    44c4:	1f 92       	push	r1
    44c6:	cd b7       	in	r28, 0x3d	; 61
    44c8:	de b7       	in	r29, 0x3e	; 62
    44ca:	8c 01       	movw	r16, r24
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must
  if (!available())
    44cc:	dc 01       	movw	r26, r24
    44ce:	ed 91       	ld	r30, X+
    44d0:	fc 91       	ld	r31, X
    44d2:	00 84       	ldd	r0, Z+8	; 0x08
    44d4:	f1 85       	ldd	r31, Z+9	; 0x09
    44d6:	e0 2d       	mov	r30, r0
    44d8:	09 95       	icall
    44da:	89 2b       	or	r24, r25
    44dc:	49 f0       	breq	.+18     	; 0x44f0 <_ZN14EthernetClient4peekEv+0x34>
    return -1;
  ::peek(_sock, &b);
    44de:	be 01       	movw	r22, r28
    44e0:	6f 5f       	subi	r22, 0xFF	; 255
    44e2:	7f 4f       	sbci	r23, 0xFF	; 255
    44e4:	f8 01       	movw	r30, r16
    44e6:	84 85       	ldd	r24, Z+12	; 0x0c
    44e8:	4f d5       	rcall	.+2718   	; 0x4f88 <_Z4peekhPh>
  return b;
    44ea:	89 81       	ldd	r24, Y+1	; 0x01
    44ec:	90 e0       	ldi	r25, 0x00	; 0
    44ee:	02 c0       	rjmp	.+4      	; 0x44f4 <_ZN14EthernetClient4peekEv+0x38>

int EthernetClient::peek() {
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must
  if (!available())
    return -1;
    44f0:	8f ef       	ldi	r24, 0xFF	; 255
    44f2:	9f ef       	ldi	r25, 0xFF	; 255
  ::peek(_sock, &b);
  return b;
}
    44f4:	0f 90       	pop	r0
    44f6:	df 91       	pop	r29
    44f8:	cf 91       	pop	r28
    44fa:	1f 91       	pop	r17
    44fc:	0f 91       	pop	r16
    44fe:	08 95       	ret

00004500 <_ZN14EthernetClient5flushEv>:

void EthernetClient::flush() {
  ::flush(_sock);
    4500:	fc 01       	movw	r30, r24
    4502:	84 85       	ldd	r24, Z+12	; 0x0c
    4504:	4e c5       	rjmp	.+2716   	; 0x4fa2 <_Z5flushh>

00004506 <_ZN14EthernetClientC1Ev>:
#include "EthernetServer.h"
#include "Dns.h"

uint16_t EthernetClient::_srcport = 1024;

EthernetClient::EthernetClient() : _sock(MAX_SOCK_NUM) {
    4506:	fc 01       	movw	r30, r24
  public:
    Print() : write_error(0) {}
    4508:	13 82       	std	Z+3, r1	; 0x03
    450a:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    450c:	88 ee       	ldi	r24, 0xE8	; 232
    450e:	93 e0       	ldi	r25, 0x03	; 3
    4510:	a0 e0       	ldi	r26, 0x00	; 0
    4512:	b0 e0       	ldi	r27, 0x00	; 0
    4514:	84 83       	std	Z+4, r24	; 0x04
    4516:	95 83       	std	Z+5, r25	; 0x05
    4518:	a6 83       	std	Z+6, r26	; 0x06
    451a:	b7 83       	std	Z+7, r27	; 0x07
    451c:	8f ec       	ldi	r24, 0xCF	; 207
    451e:	98 e0       	ldi	r25, 0x08	; 8
    4520:	91 83       	std	Z+1, r25	; 0x01
    4522:	80 83       	st	Z, r24
    4524:	88 e0       	ldi	r24, 0x08	; 8
    4526:	84 87       	std	Z+12, r24	; 0x0c
    4528:	08 95       	ret

0000452a <_ZN14EthernetClientC1Eh>:
}

EthernetClient::EthernetClient(uint8_t sock) : _sock(sock) {
    452a:	fc 01       	movw	r30, r24
    452c:	13 82       	std	Z+3, r1	; 0x03
    452e:	12 82       	std	Z+2, r1	; 0x02
    4530:	88 ee       	ldi	r24, 0xE8	; 232
    4532:	93 e0       	ldi	r25, 0x03	; 3
    4534:	a0 e0       	ldi	r26, 0x00	; 0
    4536:	b0 e0       	ldi	r27, 0x00	; 0
    4538:	84 83       	std	Z+4, r24	; 0x04
    453a:	95 83       	std	Z+5, r25	; 0x05
    453c:	a6 83       	std	Z+6, r26	; 0x06
    453e:	b7 83       	std	Z+7, r27	; 0x07
    4540:	8f ec       	ldi	r24, 0xCF	; 207
    4542:	98 e0       	ldi	r25, 0x08	; 8
    4544:	91 83       	std	Z+1, r25	; 0x01
    4546:	80 83       	st	Z, r24
    4548:	64 87       	std	Z+12, r22	; 0x0c
    454a:	08 95       	ret

0000454c <_ZN14EthernetClient6statusEv>:
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
}

uint8_t EthernetClient::status() {
  if (_sock == MAX_SOCK_NUM) return SnSR::CLOSED;
    454c:	fc 01       	movw	r30, r24
    454e:	64 85       	ldd	r22, Z+12	; 0x0c
    4550:	68 30       	cpi	r22, 0x08	; 8
    4552:	39 f0       	breq	.+14     	; 0x4562 <_ZN14EthernetClient6statusEv+0x16>

extern W5500Class w5500;

uint8_t W5500Class::readSn(SOCKET _s, uint16_t _addr) {
    uint8_t cntl_byte = (_s<<5)+0x08;
    return read(_addr, cntl_byte);
    4554:	62 95       	swap	r22
    4556:	66 0f       	add	r22, r22
    4558:	60 7e       	andi	r22, 0xE0	; 224
    455a:	68 5f       	subi	r22, 0xF8	; 248
    455c:	83 e0       	ldi	r24, 0x03	; 3
    455e:	90 e0       	ldi	r25, 0x00	; 0
    4560:	e4 c5       	rjmp	.+3016   	; 0x512a <_ZN10W5500Class4readEjh>
  return w5500.readSnSR(_sock);
}
    4562:	80 e0       	ldi	r24, 0x00	; 0
    4564:	08 95       	ret

00004566 <_ZN14EthernetClient9connectedEv>:

  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
    4566:	cf 93       	push	r28
    4568:	df 93       	push	r29
  if (_sock == MAX_SOCK_NUM) return 0;
    456a:	fc 01       	movw	r30, r24
    456c:	24 85       	ldd	r18, Z+12	; 0x0c
    456e:	28 30       	cpi	r18, 0x08	; 8
    4570:	c9 f0       	breq	.+50     	; 0x45a4 <_ZN14EthernetClient9connectedEv+0x3e>
    4572:	ec 01       	movw	r28, r24
  
  uint8_t s = status();
    4574:	eb df       	rcall	.-42     	; 0x454c <_ZN14EthernetClient6statusEv>
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
    4576:	84 31       	cpi	r24, 0x14	; 20
    4578:	81 f0       	breq	.+32     	; 0x459a <_ZN14EthernetClient9connectedEv+0x34>

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
  
  uint8_t s = status();
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    457a:	88 23       	and	r24, r24
    457c:	71 f0       	breq	.+28     	; 0x459a <_ZN14EthernetClient9connectedEv+0x34>
    457e:	88 31       	cpi	r24, 0x18	; 24
    4580:	61 f0       	breq	.+24     	; 0x459a <_ZN14EthernetClient9connectedEv+0x34>
    (s == SnSR::CLOSE_WAIT && !available()));
    4582:	8c 31       	cpi	r24, 0x1C	; 28
    4584:	61 f4       	brne	.+24     	; 0x459e <_ZN14EthernetClient9connectedEv+0x38>
    4586:	e8 81       	ld	r30, Y
    4588:	f9 81       	ldd	r31, Y+1	; 0x01
    458a:	00 84       	ldd	r0, Z+8	; 0x08
    458c:	f1 85       	ldd	r31, Z+9	; 0x09
    458e:	e0 2d       	mov	r30, r0
    4590:	ce 01       	movw	r24, r28
    4592:	09 95       	icall
    4594:	21 e0       	ldi	r18, 0x01	; 1
    4596:	89 2b       	or	r24, r25
    4598:	19 f4       	brne	.+6      	; 0x45a0 <_ZN14EthernetClient9connectedEv+0x3a>
    459a:	20 e0       	ldi	r18, 0x00	; 0
    459c:	01 c0       	rjmp	.+2      	; 0x45a0 <_ZN14EthernetClient9connectedEv+0x3a>
    459e:	21 e0       	ldi	r18, 0x01	; 1
    45a0:	82 2f       	mov	r24, r18
    45a2:	01 c0       	rjmp	.+2      	; 0x45a6 <_ZN14EthernetClient9connectedEv+0x40>
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
    45a4:	80 e0       	ldi	r24, 0x00	; 0
  
  uint8_t s = status();
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
}
    45a6:	df 91       	pop	r29
    45a8:	cf 91       	pop	r28
    45aa:	08 95       	ret

000045ac <_ZN14EthernetClient4stopEv>:

void EthernetClient::flush() {
  ::flush(_sock);
}

void EthernetClient::stop() {
    45ac:	cf 92       	push	r12
    45ae:	df 92       	push	r13
    45b0:	ef 92       	push	r14
    45b2:	ff 92       	push	r15
    45b4:	cf 93       	push	r28
    45b6:	df 93       	push	r29
    45b8:	ec 01       	movw	r28, r24
  if (_sock == MAX_SOCK_NUM)
    45ba:	8c 85       	ldd	r24, Y+12	; 0x0c
    45bc:	88 30       	cpi	r24, 0x08	; 8
    45be:	69 f1       	breq	.+90     	; 0x461a <_ZN14EthernetClient4stopEv+0x6e>
    return;

  // attempt to close the connection gracefully (send a FIN to other side)
  disconnect(_sock);
    45c0:	55 d4       	rcall	.+2218   	; 0x4e6c <_Z10disconnecth>
  unsigned long start = millis();
    45c2:	0e 94 2e 3c 	call	0x785c	; 0x785c <millis>
    45c6:	6b 01       	movw	r12, r22
    45c8:	7c 01       	movw	r14, r24

  // wait a second for the connection to close
  while (status() != SnSR::CLOSED && millis() - start < 1000)
    45ca:	ce 01       	movw	r24, r28
    45cc:	bf df       	rcall	.-130    	; 0x454c <_ZN14EthernetClient6statusEv>
    45ce:	88 23       	and	r24, r24
    45d0:	a1 f0       	breq	.+40     	; 0x45fa <_ZN14EthernetClient4stopEv+0x4e>
    45d2:	0e 94 2e 3c 	call	0x785c	; 0x785c <millis>
    45d6:	dc 01       	movw	r26, r24
    45d8:	cb 01       	movw	r24, r22
    45da:	8c 19       	sub	r24, r12
    45dc:	9d 09       	sbc	r25, r13
    45de:	ae 09       	sbc	r26, r14
    45e0:	bf 09       	sbc	r27, r15
    45e2:	88 3e       	cpi	r24, 0xE8	; 232
    45e4:	93 40       	sbci	r25, 0x03	; 3
    45e6:	a1 05       	cpc	r26, r1
    45e8:	b1 05       	cpc	r27, r1
    45ea:	38 f4       	brcc	.+14     	; 0x45fa <_ZN14EthernetClient4stopEv+0x4e>
    delay(1);
    45ec:	61 e0       	ldi	r22, 0x01	; 1
    45ee:	70 e0       	ldi	r23, 0x00	; 0
    45f0:	80 e0       	ldi	r24, 0x00	; 0
    45f2:	90 e0       	ldi	r25, 0x00	; 0
    45f4:	0e 94 5f 3c 	call	0x78be	; 0x78be <delay>

  // if it hasn't closed, close it forcefully
  if (status() != SnSR::CLOSED)
    45f8:	e8 cf       	rjmp	.-48     	; 0x45ca <_ZN14EthernetClient4stopEv+0x1e>
    45fa:	ce 01       	movw	r24, r28
    45fc:	a7 df       	rcall	.-178    	; 0x454c <_ZN14EthernetClient6statusEv>
    45fe:	88 23       	and	r24, r24
    close(_sock);
    4600:	11 f0       	breq	.+4      	; 0x4606 <_ZN14EthernetClient4stopEv+0x5a>
    4602:	8c 85       	ldd	r24, Y+12	; 0x0c
    4604:	b1 d3       	rcall	.+1890   	; 0x4d68 <_Z5closeh>

  EthernetClass::_server_port[_sock] = 0;
    4606:	ec 85       	ldd	r30, Y+12	; 0x0c
    4608:	f0 e0       	ldi	r31, 0x00	; 0
    460a:	ee 0f       	add	r30, r30
    460c:	ff 1f       	adc	r31, r31
    460e:	e8 5a       	subi	r30, 0xA8	; 168
    4610:	f3 4f       	sbci	r31, 0xF3	; 243
    4612:	11 82       	std	Z+1, r1	; 0x01
    4614:	10 82       	st	Z, r1
  _sock = MAX_SOCK_NUM;
    4616:	88 e0       	ldi	r24, 0x08	; 8
    4618:	8c 87       	std	Y+12, r24	; 0x0c
}
    461a:	df 91       	pop	r29
    461c:	cf 91       	pop	r28
    461e:	ff 90       	pop	r15
    4620:	ef 90       	pop	r14
    4622:	df 90       	pop	r13
    4624:	cf 90       	pop	r12
    4626:	08 95       	ret

00004628 <_ZN14EthernetClient7connectE9IPAddressj>:
  } else {
    return ret;
  }
}

int EthernetClient::connect(IPAddress ip, uint16_t port) {
    4628:	cf 92       	push	r12
    462a:	df 92       	push	r13
    462c:	ff 92       	push	r15
    462e:	0f 93       	push	r16
    4630:	1f 93       	push	r17
    4632:	cf 93       	push	r28
    4634:	df 93       	push	r29
  if (_sock != MAX_SOCK_NUM)
    4636:	fc 01       	movw	r30, r24
    4638:	24 85       	ldd	r18, Z+12	; 0x0c
    463a:	28 30       	cpi	r18, 0x08	; 8
    463c:	c1 f5       	brne	.+112    	; 0x46ae <_ZN14EthernetClient7connectE9IPAddressj+0x86>
    463e:	6a 01       	movw	r12, r20
    4640:	8b 01       	movw	r16, r22
    4642:	ec 01       	movw	r28, r24
    4644:	f1 2c       	mov	r15, r1
    4646:	6f 2d       	mov	r22, r15
    4648:	62 95       	swap	r22
    464a:	66 0f       	add	r22, r22
    464c:	60 7e       	andi	r22, 0xE0	; 224
    464e:	68 5f       	subi	r22, 0xF8	; 248
    4650:	83 e0       	ldi	r24, 0x03	; 3
    4652:	90 e0       	ldi	r25, 0x00	; 0
    4654:	6a d5       	rcall	.+2772   	; 0x512a <_ZN10W5500Class4readEjh>
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
    4656:	81 11       	cpse	r24, r1
    4658:	02 c0       	rjmp	.+4      	; 0x465e <_ZN14EthernetClient7connectE9IPAddressj+0x36>
      _sock = i;
    465a:	fc 86       	std	Y+12, r15	; 0x0c
    465c:	07 c0       	rjmp	.+14     	; 0x466c <_ZN14EthernetClient7connectE9IPAddressj+0x44>
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
    465e:	8b 7f       	andi	r24, 0xFB	; 251
    4660:	88 31       	cpi	r24, 0x18	; 24
    4662:	d9 f3       	breq	.-10     	; 0x465a <_ZN14EthernetClient7connectE9IPAddressj+0x32>
    4664:	f3 94       	inc	r15

int EthernetClient::connect(IPAddress ip, uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    4666:	f8 e0       	ldi	r31, 0x08	; 8
    4668:	ff 12       	cpse	r15, r31
    466a:	ed cf       	rjmp	.-38     	; 0x4646 <_ZN14EthernetClient7connectE9IPAddressj+0x1e>
      _sock = i;
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
    466c:	8c 85       	ldd	r24, Y+12	; 0x0c
    466e:	88 30       	cpi	r24, 0x08	; 8
    4670:	f1 f0       	breq	.+60     	; 0x46ae <_ZN14EthernetClient7connectE9IPAddressj+0x86>
    return 0;

  _srcport++;
    4672:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <_ZN14EthernetClient8_srcportE>
    4676:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <_ZN14EthernetClient8_srcportE+0x1>
    467a:	2f 5f       	subi	r18, 0xFF	; 255
    467c:	3f 4f       	sbci	r19, 0xFF	; 255
  if (_srcport == 0) _srcport = 1024;
    467e:	11 f4       	brne	.+4      	; 0x4684 <_ZN14EthernetClient7connectE9IPAddressj+0x5c>
    4680:	20 e0       	ldi	r18, 0x00	; 0
    4682:	34 e0       	ldi	r19, 0x04	; 4
    4684:	30 93 4b 01 	sts	0x014B, r19	; 0x80014b <_ZN14EthernetClient8_srcportE+0x1>
    4688:	20 93 4a 01 	sts	0x014A, r18	; 0x80014a <_ZN14EthernetClient8_srcportE>
  socket(_sock, SnMR::TCP, _srcport, 0);
    468c:	40 91 4a 01 	lds	r20, 0x014A	; 0x80014a <_ZN14EthernetClient8_srcportE>
    4690:	50 91 4b 01 	lds	r21, 0x014B	; 0x80014b <_ZN14EthernetClient8_srcportE+0x1>
    4694:	20 e0       	ldi	r18, 0x00	; 0
    4696:	61 e0       	ldi	r22, 0x01	; 1
    4698:	72 d3       	rcall	.+1764   	; 0x4d7e <_Z6sockethhjh>

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    469a:	b8 01       	movw	r22, r16
    469c:	6e 5f       	subi	r22, 0xFE	; 254
    469e:	7f 4f       	sbci	r23, 0xFF	; 255

  if (!::connect(_sock, rawIPAddress(ip), port)) {
    46a0:	a6 01       	movw	r20, r12
    46a2:	8c 85       	ldd	r24, Y+12	; 0x0c
    46a4:	b0 d3       	rcall	.+1888   	; 0x4e06 <_Z7connecthPhj>
    46a6:	81 11       	cpse	r24, r1
    46a8:	05 c0       	rjmp	.+10     	; 0x46b4 <_ZN14EthernetClient7connectE9IPAddressj+0x8c>
    _sock = MAX_SOCK_NUM;
    46aa:	88 e0       	ldi	r24, 0x08	; 8
    46ac:	8c 87       	std	Y+12, r24	; 0x0c
    return 0;
    46ae:	80 e0       	ldi	r24, 0x00	; 0
    46b0:	90 e0       	ldi	r25, 0x00	; 0
  }

  while (status() != SnSR::ESTABLISHED) {
    46b2:	0f c0       	rjmp	.+30     	; 0x46d2 <_ZN14EthernetClient7connectE9IPAddressj+0xaa>
    46b4:	ce 01       	movw	r24, r28
    46b6:	4a df       	rcall	.-364    	; 0x454c <_ZN14EthernetClient6statusEv>
    46b8:	87 31       	cpi	r24, 0x17	; 23
    46ba:	49 f0       	breq	.+18     	; 0x46ce <_ZN14EthernetClient7connectE9IPAddressj+0xa6>
    delay(1);
    46bc:	61 e0       	ldi	r22, 0x01	; 1
    46be:	70 e0       	ldi	r23, 0x00	; 0
    46c0:	80 e0       	ldi	r24, 0x00	; 0
    46c2:	90 e0       	ldi	r25, 0x00	; 0
    46c4:	0e 94 5f 3c 	call	0x78be	; 0x78be <delay>
    if (status() == SnSR::CLOSED) {
    46c8:	ce 01       	movw	r24, r28
    46ca:	40 df       	rcall	.-384    	; 0x454c <_ZN14EthernetClient6statusEv>
    46cc:	ec cf       	rjmp	.-40     	; 0x46a6 <_ZN14EthernetClient7connectE9IPAddressj+0x7e>
      _sock = MAX_SOCK_NUM;
      return 0;
    }
  }

  return 1;
    46ce:	81 e0       	ldi	r24, 0x01	; 1
    46d0:	90 e0       	ldi	r25, 0x00	; 0
}
    46d2:	df 91       	pop	r29
    46d4:	cf 91       	pop	r28
    46d6:	1f 91       	pop	r17
    46d8:	0f 91       	pop	r16
    46da:	ff 90       	pop	r15
    46dc:	df 90       	pop	r13
    46de:	cf 90       	pop	r12
    46e0:	08 95       	ret

000046e2 <_GLOBAL__sub_I__ZN14EthernetClient8_srcportE>:
  return _sock != MAX_SOCK_NUM;
}

bool EthernetClient::operator==(const EthernetClient& rhs) {
  return _sock == rhs._sock && _sock != MAX_SOCK_NUM && rhs._sock != MAX_SOCK_NUM;
}
    46e2:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    46e4:	00 e0       	ldi	r16, 0x00	; 0
    46e6:	20 e0       	ldi	r18, 0x00	; 0
    46e8:	40 e0       	ldi	r20, 0x00	; 0
    46ea:	60 e0       	ldi	r22, 0x00	; 0
    46ec:	8e e6       	ldi	r24, 0x6E	; 110
    46ee:	9c e0       	ldi	r25, 0x0C	; 12
    46f0:	0e 94 91 3a 	call	0x7522	; 0x7522 <_ZN9IPAddressC1Ehhhh>
    46f4:	0f 91       	pop	r16
    46f6:	08 95       	ret

000046f8 <_ZN14EthernetServer5writeEh>:
      }
    }
  }

  return EthernetClient(MAX_SOCK_NUM);
}
    46f8:	cf 93       	push	r28
    46fa:	df 93       	push	r29
    46fc:	1f 92       	push	r1
    46fe:	cd b7       	in	r28, 0x3d	; 61
    4700:	de b7       	in	r29, 0x3e	; 62
    4702:	69 83       	std	Y+1, r22	; 0x01
    4704:	dc 01       	movw	r26, r24
    4706:	ed 91       	ld	r30, X+
    4708:	fc 91       	ld	r31, X
    470a:	02 80       	ldd	r0, Z+2	; 0x02
    470c:	f3 81       	ldd	r31, Z+3	; 0x03
    470e:	e0 2d       	mov	r30, r0
    4710:	41 e0       	ldi	r20, 0x01	; 1
    4712:	50 e0       	ldi	r21, 0x00	; 0
    4714:	be 01       	movw	r22, r28
    4716:	6f 5f       	subi	r22, 0xFF	; 255
    4718:	7f 4f       	sbci	r23, 0xFF	; 255
    471a:	09 95       	icall
    471c:	0f 90       	pop	r0
    471e:	df 91       	pop	r29
    4720:	cf 91       	pop	r28
    4722:	08 95       	ret

00004724 <_ZN14EthernetServer5beginEv>:
    4724:	ef 92       	push	r14
    4726:	ff 92       	push	r15
    4728:	0f 93       	push	r16
    472a:	1f 93       	push	r17
    472c:	cf 93       	push	r28
    472e:	df 93       	push	r29
    4730:	cd b7       	in	r28, 0x3d	; 61
    4732:	de b7       	in	r29, 0x3e	; 62
    4734:	2d 97       	sbiw	r28, 0x0d	; 13
    4736:	0f b6       	in	r0, 0x3f	; 63
    4738:	f8 94       	cli
    473a:	de bf       	out	0x3e, r29	; 62
    473c:	0f be       	out	0x3f, r0	; 63
    473e:	cd bf       	out	0x3d, r28	; 61
    4740:	7c 01       	movw	r14, r24
    4742:	00 e0       	ldi	r16, 0x00	; 0
    4744:	10 e0       	ldi	r17, 0x00	; 0
    4746:	60 2f       	mov	r22, r16
    4748:	ce 01       	movw	r24, r28
    474a:	01 96       	adiw	r24, 0x01	; 1
    474c:	ee de       	rcall	.-548    	; 0x452a <_ZN14EthernetClientC1Eh>
    474e:	ce 01       	movw	r24, r28
    4750:	01 96       	adiw	r24, 0x01	; 1
    4752:	fc de       	rcall	.-520    	; 0x454c <_ZN14EthernetClient6statusEv>
    4754:	81 11       	cpse	r24, r1
    4756:	14 c0       	rjmp	.+40     	; 0x4780 <_ZN14EthernetServer5beginEv+0x5c>
    4758:	f7 01       	movw	r30, r14
    475a:	44 81       	ldd	r20, Z+4	; 0x04
    475c:	55 81       	ldd	r21, Z+5	; 0x05
    475e:	20 e0       	ldi	r18, 0x00	; 0
    4760:	61 e0       	ldi	r22, 0x01	; 1
    4762:	80 2f       	mov	r24, r16
    4764:	0c d3       	rcall	.+1560   	; 0x4d7e <_Z6sockethhjh>
    4766:	80 2f       	mov	r24, r16
    4768:	3d d3       	rcall	.+1658   	; 0x4de4 <_Z6listenh>
    476a:	f7 01       	movw	r30, r14
    476c:	84 81       	ldd	r24, Z+4	; 0x04
    476e:	95 81       	ldd	r25, Z+5	; 0x05
    4770:	00 0f       	add	r16, r16
    4772:	11 1f       	adc	r17, r17
    4774:	f8 01       	movw	r30, r16
    4776:	e8 5a       	subi	r30, 0xA8	; 168
    4778:	f3 4f       	sbci	r31, 0xF3	; 243
    477a:	91 83       	std	Z+1, r25	; 0x01
    477c:	80 83       	st	Z, r24
    477e:	05 c0       	rjmp	.+10     	; 0x478a <_ZN14EthernetServer5beginEv+0x66>
    4780:	0f 5f       	subi	r16, 0xFF	; 255
    4782:	1f 4f       	sbci	r17, 0xFF	; 255
    4784:	08 30       	cpi	r16, 0x08	; 8
    4786:	11 05       	cpc	r17, r1
    4788:	f1 f6       	brne	.-68     	; 0x4746 <_ZN14EthernetServer5beginEv+0x22>
    478a:	2d 96       	adiw	r28, 0x0d	; 13
    478c:	0f b6       	in	r0, 0x3f	; 63
    478e:	f8 94       	cli
    4790:	de bf       	out	0x3e, r29	; 62
    4792:	0f be       	out	0x3f, r0	; 63
    4794:	cd bf       	out	0x3d, r28	; 61
    4796:	df 91       	pop	r29
    4798:	cf 91       	pop	r28
    479a:	1f 91       	pop	r17
    479c:	0f 91       	pop	r16
    479e:	ff 90       	pop	r15
    47a0:	ef 90       	pop	r14
    47a2:	08 95       	ret

000047a4 <_ZN14EthernetServerC1Ej>:
    47a4:	fc 01       	movw	r30, r24
    47a6:	13 82       	std	Z+3, r1	; 0x03
    47a8:	12 82       	std	Z+2, r1	; 0x02
    47aa:	81 ef       	ldi	r24, 0xF1	; 241
    47ac:	98 e0       	ldi	r25, 0x08	; 8
    47ae:	91 83       	std	Z+1, r25	; 0x01
    47b0:	80 83       	st	Z, r24
    47b2:	75 83       	std	Z+5, r23	; 0x05
    47b4:	64 83       	std	Z+4, r22	; 0x04
    47b6:	08 95       	ret

000047b8 <_ZN14EthernetServer6acceptEv>:
    47b8:	af 92       	push	r10
    47ba:	bf 92       	push	r11
    47bc:	cf 92       	push	r12
    47be:	df 92       	push	r13
    47c0:	ef 92       	push	r14
    47c2:	ff 92       	push	r15
    47c4:	1f 93       	push	r17
    47c6:	cf 93       	push	r28
    47c8:	df 93       	push	r29
    47ca:	cd b7       	in	r28, 0x3d	; 61
    47cc:	de b7       	in	r29, 0x3e	; 62
    47ce:	2d 97       	sbiw	r28, 0x0d	; 13
    47d0:	0f b6       	in	r0, 0x3f	; 63
    47d2:	f8 94       	cli
    47d4:	de bf       	out	0x3e, r29	; 62
    47d6:	0f be       	out	0x3f, r0	; 63
    47d8:	cd bf       	out	0x3d, r28	; 61
    47da:	7c 01       	movw	r14, r24
    47dc:	98 e5       	ldi	r25, 0x58	; 88
    47de:	a9 2e       	mov	r10, r25
    47e0:	9c e0       	ldi	r25, 0x0C	; 12
    47e2:	b9 2e       	mov	r11, r25
    47e4:	10 e0       	ldi	r17, 0x00	; 0
    47e6:	c1 2c       	mov	r12, r1
    47e8:	d1 2c       	mov	r13, r1
    47ea:	61 2f       	mov	r22, r17
    47ec:	ce 01       	movw	r24, r28
    47ee:	01 96       	adiw	r24, 0x01	; 1
    47f0:	9c de       	rcall	.-712    	; 0x452a <_ZN14EthernetClientC1Eh>
    47f2:	d5 01       	movw	r26, r10
    47f4:	2d 91       	ld	r18, X+
    47f6:	3d 91       	ld	r19, X+
    47f8:	5d 01       	movw	r10, r26
    47fa:	f7 01       	movw	r30, r14
    47fc:	84 81       	ldd	r24, Z+4	; 0x04
    47fe:	95 81       	ldd	r25, Z+5	; 0x05
    4800:	28 17       	cp	r18, r24
    4802:	39 07       	cpc	r19, r25
    4804:	99 f4       	brne	.+38     	; 0x482c <_ZN14EthernetServer6acceptEv+0x74>
    4806:	ce 01       	movw	r24, r28
    4808:	01 96       	adiw	r24, 0x01	; 1
    480a:	a0 de       	rcall	.-704    	; 0x454c <_ZN14EthernetClient6statusEv>
    480c:	84 31       	cpi	r24, 0x14	; 20
    480e:	59 f0       	breq	.+22     	; 0x4826 <_ZN14EthernetServer6acceptEv+0x6e>
    4810:	ce 01       	movw	r24, r28
    4812:	01 96       	adiw	r24, 0x01	; 1
    4814:	9b de       	rcall	.-714    	; 0x454c <_ZN14EthernetClient6statusEv>
    4816:	8c 31       	cpi	r24, 0x1C	; 28
    4818:	49 f4       	brne	.+18     	; 0x482c <_ZN14EthernetServer6acceptEv+0x74>
    481a:	ce 01       	movw	r24, r28
    481c:	01 96       	adiw	r24, 0x01	; 1
    481e:	28 de       	rcall	.-944    	; 0x4470 <_ZN14EthernetClient9availableEv>
    4820:	89 2b       	or	r24, r25
    4822:	91 f0       	breq	.+36     	; 0x4848 <_ZN14EthernetServer6acceptEv+0x90>
    4824:	03 c0       	rjmp	.+6      	; 0x482c <_ZN14EthernetServer6acceptEv+0x74>
    4826:	cc 24       	eor	r12, r12
    4828:	c3 94       	inc	r12
    482a:	d1 2c       	mov	r13, r1
    482c:	1f 5f       	subi	r17, 0xFF	; 255
    482e:	18 30       	cpi	r17, 0x08	; 8
    4830:	e1 f6       	brne	.-72     	; 0x47ea <_ZN14EthernetServer6acceptEv+0x32>
    4832:	cd 28       	or	r12, r13
    4834:	69 f4       	brne	.+26     	; 0x4850 <_ZN14EthernetServer6acceptEv+0x98>
    4836:	d7 01       	movw	r26, r14
    4838:	ed 91       	ld	r30, X+
    483a:	fc 91       	ld	r31, X
    483c:	00 84       	ldd	r0, Z+8	; 0x08
    483e:	f1 85       	ldd	r31, Z+9	; 0x09
    4840:	e0 2d       	mov	r30, r0
    4842:	c7 01       	movw	r24, r14
    4844:	09 95       	icall
    4846:	04 c0       	rjmp	.+8      	; 0x4850 <_ZN14EthernetServer6acceptEv+0x98>
    4848:	ce 01       	movw	r24, r28
    484a:	01 96       	adiw	r24, 0x01	; 1
    484c:	af de       	rcall	.-674    	; 0x45ac <_ZN14EthernetClient4stopEv>
    484e:	ee cf       	rjmp	.-36     	; 0x482c <_ZN14EthernetServer6acceptEv+0x74>
    4850:	2d 96       	adiw	r28, 0x0d	; 13
    4852:	0f b6       	in	r0, 0x3f	; 63
    4854:	f8 94       	cli
    4856:	de bf       	out	0x3e, r29	; 62
    4858:	0f be       	out	0x3f, r0	; 63
    485a:	cd bf       	out	0x3d, r28	; 61
    485c:	df 91       	pop	r29
    485e:	cf 91       	pop	r28
    4860:	1f 91       	pop	r17
    4862:	ff 90       	pop	r15
    4864:	ef 90       	pop	r14
    4866:	df 90       	pop	r13
    4868:	cf 90       	pop	r12
    486a:	bf 90       	pop	r11
    486c:	af 90       	pop	r10
    486e:	08 95       	ret

00004870 <_ZN14EthernetServer5writeEPKhj>:
    4870:	7f 92       	push	r7
    4872:	8f 92       	push	r8
    4874:	9f 92       	push	r9
    4876:	af 92       	push	r10
    4878:	bf 92       	push	r11
    487a:	cf 92       	push	r12
    487c:	df 92       	push	r13
    487e:	ef 92       	push	r14
    4880:	ff 92       	push	r15
    4882:	0f 93       	push	r16
    4884:	1f 93       	push	r17
    4886:	cf 93       	push	r28
    4888:	df 93       	push	r29
    488a:	cd b7       	in	r28, 0x3d	; 61
    488c:	de b7       	in	r29, 0x3e	; 62
    488e:	2d 97       	sbiw	r28, 0x0d	; 13
    4890:	0f b6       	in	r0, 0x3f	; 63
    4892:	f8 94       	cli
    4894:	de bf       	out	0x3e, r29	; 62
    4896:	0f be       	out	0x3f, r0	; 63
    4898:	cd bf       	out	0x3d, r28	; 61
    489a:	6c 01       	movw	r12, r24
    489c:	5b 01       	movw	r10, r22
    489e:	4a 01       	movw	r8, r20
    48a0:	8b df       	rcall	.-234    	; 0x47b8 <_ZN14EthernetServer6acceptEv>
    48a2:	88 e5       	ldi	r24, 0x58	; 88
    48a4:	e8 2e       	mov	r14, r24
    48a6:	8c e0       	ldi	r24, 0x0C	; 12
    48a8:	f8 2e       	mov	r15, r24
    48aa:	71 2c       	mov	r7, r1
    48ac:	00 e0       	ldi	r16, 0x00	; 0
    48ae:	10 e0       	ldi	r17, 0x00	; 0
    48b0:	67 2d       	mov	r22, r7
    48b2:	ce 01       	movw	r24, r28
    48b4:	01 96       	adiw	r24, 0x01	; 1
    48b6:	39 de       	rcall	.-910    	; 0x452a <_ZN14EthernetClientC1Eh>
    48b8:	f7 01       	movw	r30, r14
    48ba:	21 91       	ld	r18, Z+
    48bc:	31 91       	ld	r19, Z+
    48be:	7f 01       	movw	r14, r30
    48c0:	f6 01       	movw	r30, r12
    48c2:	84 81       	ldd	r24, Z+4	; 0x04
    48c4:	95 81       	ldd	r25, Z+5	; 0x05
    48c6:	28 17       	cp	r18, r24
    48c8:	39 07       	cpc	r19, r25
    48ca:	29 f4       	brne	.+10     	; 0x48d6 <_ZN14EthernetServer5writeEPKhj+0x66>
    48cc:	ce 01       	movw	r24, r28
    48ce:	01 96       	adiw	r24, 0x01	; 1
    48d0:	3d de       	rcall	.-902    	; 0x454c <_ZN14EthernetClient6statusEv>
    48d2:	87 31       	cpi	r24, 0x17	; 23
    48d4:	c9 f0       	breq	.+50     	; 0x4908 <_ZN14EthernetServer5writeEPKhj+0x98>
    48d6:	73 94       	inc	r7
    48d8:	f8 e0       	ldi	r31, 0x08	; 8
    48da:	7f 12       	cpse	r7, r31
    48dc:	e9 cf       	rjmp	.-46     	; 0x48b0 <_ZN14EthernetServer5writeEPKhj+0x40>
    48de:	c8 01       	movw	r24, r16
    48e0:	2d 96       	adiw	r28, 0x0d	; 13
    48e2:	0f b6       	in	r0, 0x3f	; 63
    48e4:	f8 94       	cli
    48e6:	de bf       	out	0x3e, r29	; 62
    48e8:	0f be       	out	0x3f, r0	; 63
    48ea:	cd bf       	out	0x3d, r28	; 61
    48ec:	df 91       	pop	r29
    48ee:	cf 91       	pop	r28
    48f0:	1f 91       	pop	r17
    48f2:	0f 91       	pop	r16
    48f4:	ff 90       	pop	r15
    48f6:	ef 90       	pop	r14
    48f8:	df 90       	pop	r13
    48fa:	cf 90       	pop	r12
    48fc:	bf 90       	pop	r11
    48fe:	af 90       	pop	r10
    4900:	9f 90       	pop	r9
    4902:	8f 90       	pop	r8
    4904:	7f 90       	pop	r7
    4906:	08 95       	ret
    4908:	a4 01       	movw	r20, r8
    490a:	b5 01       	movw	r22, r10
    490c:	ce 01       	movw	r24, r28
    490e:	01 96       	adiw	r24, 0x01	; 1
    4910:	92 dd       	rcall	.-1244   	; 0x4436 <_ZN14EthernetClient5writeEPKhj>
    4912:	08 0f       	add	r16, r24
    4914:	19 1f       	adc	r17, r25
    4916:	df cf       	rjmp	.-66     	; 0x48d6 <_ZN14EthernetServer5writeEPKhj+0x66>

00004918 <_GLOBAL__sub_I__ZN14EthernetServerC2Ej>:
      n += client.write(buffer, size);
    }
  }
  
  return n;
}
    4918:	0f 93       	push	r16
    491a:	00 e0       	ldi	r16, 0x00	; 0
    491c:	20 e0       	ldi	r18, 0x00	; 0
    491e:	40 e0       	ldi	r20, 0x00	; 0
    4920:	60 e0       	ldi	r22, 0x00	; 0
    4922:	84 e7       	ldi	r24, 0x74	; 116
    4924:	9c e0       	ldi	r25, 0x0C	; 12
    4926:	0e 94 91 3a 	call	0x7522	; 0x7522 <_ZN9IPAddressC1Ehhhh>
    492a:	0f 91       	pop	r16
    492c:	08 95       	ret

0000492e <_ZN3UDP14beginMulticastE9IPAddressj>:

class UDP : public Stream {

public:
  virtual uint8_t begin(uint16_t) =0;  // initialize, start listening on specified port. Returns 1 if successful, 0 if there are no sockets available to use
  virtual uint8_t beginMulticast(IPAddress, uint16_t) { return 0; }  // initialize, start listening on specified multicast IP address and port. Returns 1 if successful, 0 on failure
    492e:	80 e0       	ldi	r24, 0x00	; 0
    4930:	08 95       	ret

00004932 <_ZN11EthernetUDP4readEPcj>:
  // Read up to len bytes from the current packet and place them into buffer
  // Returns the number of bytes read, or 0 if none are available
  virtual int read(unsigned char* buffer, size_t len);
  // Read up to len characters from the current packet and place them into buffer
  // Returns the number of characters read, or 0 if none are available
  virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
    4932:	dc 01       	movw	r26, r24
    4934:	ed 91       	ld	r30, X+
    4936:	fc 91       	ld	r31, X
    4938:	04 8c       	ldd	r0, Z+28	; 0x1c
    493a:	f5 8d       	ldd	r31, Z+29	; 0x1d
    493c:	e0 2d       	mov	r30, r0
    493e:	09 94       	ijmp

00004940 <_ZN11EthernetUDP8remoteIPEv>:
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    4940:	21 e6       	ldi	r18, 0x61	; 97
    4942:	39 e0       	ldi	r19, 0x09	; 9
    4944:	fc 01       	movw	r30, r24
    4946:	31 83       	std	Z+1, r19	; 0x01
    4948:	20 83       	st	Z, r18
    494a:	fb 01       	movw	r30, r22
    494c:	41 89       	ldd	r20, Z+17	; 0x11
    494e:	52 89       	ldd	r21, Z+18	; 0x12
    4950:	63 89       	ldd	r22, Z+19	; 0x13
    4952:	74 89       	ldd	r23, Z+20	; 0x14
    4954:	fc 01       	movw	r30, r24
    4956:	42 83       	std	Z+2, r20	; 0x02
    4958:	53 83       	std	Z+3, r21	; 0x03
    495a:	64 83       	std	Z+4, r22	; 0x04
    495c:	75 83       	std	Z+5, r23	; 0x05
  // Return the next byte from the current packet without moving on to the next byte
  virtual int peek();
  virtual void flush();	// Finish reading the current packet

  // Return the IP address of the host who sent the current incoming packet
  virtual IPAddress remoteIP() { return _remoteIP; };
    495e:	08 95       	ret

00004960 <_ZN11EthernetUDP10remotePortEv>:
  // Return the port of the host who sent the current incoming packet
  virtual uint16_t remotePort() { return _remotePort; };
    4960:	fc 01       	movw	r30, r24
    4962:	85 89       	ldd	r24, Z+21	; 0x15
    4964:	96 89       	ldd	r25, Z+22	; 0x16
    4966:	08 95       	ret

00004968 <_ZN11EthernetUDP9availableEv>:

/* return number of bytes available in the current packet,
   will return zero if parsePacket hasn't been called yet */
int EthernetUDP::available() {
  return _remaining;
}
    4968:	fc 01       	movw	r30, r24
    496a:	81 8d       	ldd	r24, Z+25	; 0x19
    496c:	92 8d       	ldd	r25, Z+26	; 0x1a
    496e:	08 95       	ret

00004970 <_ZN11EthernetUDP5writeEh>:
{
  return sendUDP(_sock);
}

size_t EthernetUDP::write(uint8_t byte)
{
    4970:	cf 93       	push	r28
    4972:	df 93       	push	r29
    4974:	1f 92       	push	r1
    4976:	cd b7       	in	r28, 0x3d	; 61
    4978:	de b7       	in	r29, 0x3e	; 62
    497a:	69 83       	std	Y+1, r22	; 0x01
  return write(&byte, 1);
    497c:	dc 01       	movw	r26, r24
    497e:	ed 91       	ld	r30, X+
    4980:	fc 91       	ld	r31, X
    4982:	02 80       	ldd	r0, Z+2	; 0x02
    4984:	f3 81       	ldd	r31, Z+3	; 0x03
    4986:	e0 2d       	mov	r30, r0
    4988:	41 e0       	ldi	r20, 0x01	; 1
    498a:	50 e0       	ldi	r21, 0x00	; 0
    498c:	be 01       	movw	r22, r28
    498e:	6f 5f       	subi	r22, 0xFF	; 255
    4990:	7f 4f       	sbci	r23, 0xFF	; 255
    4992:	09 95       	icall
}
    4994:	0f 90       	pop	r0
    4996:	df 91       	pop	r29
    4998:	cf 91       	pop	r28
    499a:	08 95       	ret

0000499c <_ZN11EthernetUDP5flushEv>:
  ::peek(_sock, &b);
  return b;
}

void EthernetUDP::flush()
{
    499c:	cf 93       	push	r28
    499e:	df 93       	push	r29
    49a0:	ec 01       	movw	r28, r24
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5500 always behaves :)

  while (_remaining)
    49a2:	89 8d       	ldd	r24, Y+25	; 0x19
    49a4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    49a6:	89 2b       	or	r24, r25
    49a8:	41 f0       	breq	.+16     	; 0x49ba <_ZN11EthernetUDP5flushEv+0x1e>
  {
    read();
    49aa:	e8 81       	ld	r30, Y
    49ac:	f9 81       	ldd	r31, Y+1	; 0x01
    49ae:	02 84       	ldd	r0, Z+10	; 0x0a
    49b0:	f3 85       	ldd	r31, Z+11	; 0x0b
    49b2:	e0 2d       	mov	r30, r0
    49b4:	ce 01       	movw	r24, r28
    49b6:	09 95       	icall
{
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5500 always behaves :)

  while (_remaining)
    49b8:	f4 cf       	rjmp	.-24     	; 0x49a2 <_ZN11EthernetUDP5flushEv+0x6>
  {
    read();
  }
}
    49ba:	df 91       	pop	r29
    49bc:	cf 91       	pop	r28
    49be:	08 95       	ret

000049c0 <_ZN11EthernetUDP4stopEv>:
  return _remaining;
}

/* Release any resources being used by this EthernetUDP instance */
void EthernetUDP::stop()
{
    49c0:	cf 93       	push	r28
    49c2:	df 93       	push	r29
    49c4:	ec 01       	movw	r28, r24
  if (_sock == MAX_SOCK_NUM)
    49c6:	8c 85       	ldd	r24, Y+12	; 0x0c
    49c8:	88 30       	cpi	r24, 0x08	; 8
    49ca:	59 f0       	breq	.+22     	; 0x49e2 <_ZN11EthernetUDP4stopEv+0x22>
    return;

  close(_sock);
    49cc:	cd d1       	rcall	.+922    	; 0x4d68 <_Z5closeh>

  EthernetClass::_server_port[_sock] = 0;
    49ce:	ec 85       	ldd	r30, Y+12	; 0x0c
    49d0:	f0 e0       	ldi	r31, 0x00	; 0
    49d2:	ee 0f       	add	r30, r30
    49d4:	ff 1f       	adc	r31, r31
    49d6:	e8 5a       	subi	r30, 0xA8	; 168
    49d8:	f3 4f       	sbci	r31, 0xF3	; 243
    49da:	11 82       	std	Z+1, r1	; 0x01
    49dc:	10 82       	st	Z, r1
  _sock = MAX_SOCK_NUM;
    49de:	88 e0       	ldi	r24, 0x08	; 8
    49e0:	8c 87       	std	Y+12, r24	; 0x0c
}
    49e2:	df 91       	pop	r29
    49e4:	cf 91       	pop	r28
    49e6:	08 95       	ret

000049e8 <_ZN11EthernetUDP11beginPacketE9IPAddressj>:
  }
}

int EthernetUDP::beginPacket(IPAddress ip, uint16_t port)
{
  _offset = 0;
    49e8:	fc 01       	movw	r30, r24
    49ea:	10 8e       	std	Z+24, r1	; 0x18
    49ec:	17 8a       	std	Z+23, r1	; 0x17

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    49ee:	6e 5f       	subi	r22, 0xFE	; 254
    49f0:	7f 4f       	sbci	r23, 0xFF	; 255
  return startUDP(_sock, rawIPAddress(ip), port);
    49f2:	84 85       	ldd	r24, Z+12	; 0x0c
    49f4:	02 c3       	rjmp	.+1540   	; 0x4ffa <_Z8startUDPhPhj>

000049f6 <_ZN11EthernetUDP9endPacketEv>:
}

int EthernetUDP::endPacket()
{
  return sendUDP(_sock);
    49f6:	fc 01       	movw	r30, r24
    49f8:	84 85       	ldd	r24, Z+12	; 0x0c
    49fa:	22 c3       	rjmp	.+1604   	; 0x5040 <_Z7sendUDPh>

000049fc <_ZN11EthernetUDP5writeEPKhj>:
{
  return write(&byte, 1);
}

size_t EthernetUDP::write(const uint8_t *buffer, size_t size)
{
    49fc:	cf 93       	push	r28
    49fe:	df 93       	push	r29
    4a00:	ec 01       	movw	r28, r24
    4a02:	9a 01       	movw	r18, r20
  uint16_t bytes_written = bufferData(_sock, _offset, buffer, size);
    4a04:	8f 89       	ldd	r24, Y+23	; 0x17
    4a06:	98 8d       	ldd	r25, Y+24	; 0x18
    4a08:	ab 01       	movw	r20, r22
    4a0a:	bc 01       	movw	r22, r24
    4a0c:	8c 85       	ldd	r24, Y+12	; 0x0c
    4a0e:	ca d2       	rcall	.+1428   	; 0x4fa4 <_Z10bufferDatahjPKhj>
  _offset += bytes_written;
    4a10:	2f 89       	ldd	r18, Y+23	; 0x17
    4a12:	38 8d       	ldd	r19, Y+24	; 0x18
    4a14:	28 0f       	add	r18, r24
    4a16:	39 1f       	adc	r19, r25
    4a18:	38 8f       	std	Y+24, r19	; 0x18
    4a1a:	2f 8b       	std	Y+23, r18	; 0x17
  return bytes_written;
}
    4a1c:	df 91       	pop	r29
    4a1e:	cf 91       	pop	r28
    4a20:	08 95       	ret

00004a22 <_ZN11EthernetUDP4readEv>:
  // There aren't any packets available
  return 0;
}

int EthernetUDP::read()
{
    4a22:	0f 93       	push	r16
    4a24:	1f 93       	push	r17
    4a26:	cf 93       	push	r28
    4a28:	df 93       	push	r29
    4a2a:	1f 92       	push	r1
    4a2c:	cd b7       	in	r28, 0x3d	; 61
    4a2e:	de b7       	in	r29, 0x3e	; 62
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
    4a30:	fc 01       	movw	r30, r24
    4a32:	21 8d       	ldd	r18, Z+25	; 0x19
    4a34:	32 8d       	ldd	r19, Z+26	; 0x1a
    4a36:	23 2b       	or	r18, r19
    4a38:	59 f0       	breq	.+22     	; 0x4a50 <_ZN11EthernetUDP4readEv+0x2e>
    4a3a:	8c 01       	movw	r16, r24
    4a3c:	41 e0       	ldi	r20, 0x01	; 1
    4a3e:	50 e0       	ldi	r21, 0x00	; 0
    4a40:	be 01       	movw	r22, r28
    4a42:	6f 5f       	subi	r22, 0xFF	; 255
    4a44:	7f 4f       	sbci	r23, 0xFF	; 255
    4a46:	84 85       	ldd	r24, Z+12	; 0x0c
    4a48:	5e d2       	rcall	.+1212   	; 0x4f06 <_Z4recvhPhi>
    4a4a:	18 16       	cp	r1, r24
    4a4c:	19 06       	cpc	r1, r25
    4a4e:	1c f0       	brlt	.+6      	; 0x4a56 <_ZN11EthernetUDP4readEv+0x34>
    _remaining--;
    return byte;
  }

  // If we get here, there's no data available
  return -1;
    4a50:	8f ef       	ldi	r24, 0xFF	; 255
    4a52:	9f ef       	ldi	r25, 0xFF	; 255
    4a54:	08 c0       	rjmp	.+16     	; 0x4a66 <_ZN11EthernetUDP4readEv+0x44>
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
  {
    // We read things without any problems
    _remaining--;
    4a56:	f8 01       	movw	r30, r16
    4a58:	81 8d       	ldd	r24, Z+25	; 0x19
    4a5a:	92 8d       	ldd	r25, Z+26	; 0x1a
    4a5c:	01 97       	sbiw	r24, 0x01	; 1
    4a5e:	92 8f       	std	Z+26, r25	; 0x1a
    4a60:	81 8f       	std	Z+25, r24	; 0x19
    return byte;
    4a62:	89 81       	ldd	r24, Y+1	; 0x01
    4a64:	90 e0       	ldi	r25, 0x00	; 0
  }

  // If we get here, there's no data available
  return -1;
}
    4a66:	0f 90       	pop	r0
    4a68:	df 91       	pop	r29
    4a6a:	cf 91       	pop	r28
    4a6c:	1f 91       	pop	r17
    4a6e:	0f 91       	pop	r16
    4a70:	08 95       	ret

00004a72 <_ZN11EthernetUDP4readEPhj>:

int EthernetUDP::read(unsigned char* buffer, size_t len)
{
    4a72:	cf 93       	push	r28
    4a74:	df 93       	push	r29

  if (_remaining > 0)
    4a76:	fc 01       	movw	r30, r24
    4a78:	21 8d       	ldd	r18, Z+25	; 0x19
    4a7a:	32 8d       	ldd	r19, Z+26	; 0x1a
    4a7c:	21 15       	cp	r18, r1
    4a7e:	31 05       	cpc	r19, r1
    4a80:	19 f4       	brne	.+6      	; 0x4a88 <_ZN11EthernetUDP4readEPhj+0x16>
    }

  }

  // If we get here, there's no data available or recv failed
  return -1;
    4a82:	8f ef       	ldi	r24, 0xFF	; 255
    4a84:	9f ef       	ldi	r25, 0xFF	; 255
    4a86:	10 c0       	rjmp	.+32     	; 0x4aa8 <_ZN11EthernetUDP4readEPhj+0x36>
    4a88:	ec 01       	movw	r28, r24
  if (_remaining > 0)
  {

    int got;

    if (_remaining <= len)
    4a8a:	42 17       	cp	r20, r18
    4a8c:	53 07       	cpc	r21, r19
    4a8e:	08 f0       	brcs	.+2      	; 0x4a92 <_ZN11EthernetUDP4readEPhj+0x20>
    {
      // data should fit in the buffer
      got = recv(_sock, buffer, _remaining);
    4a90:	a9 01       	movw	r20, r18
    }
    else
    {
      // too much data for the buffer, 
      // grab as much as will fit
      got = recv(_sock, buffer, len);
    4a92:	8c 85       	ldd	r24, Y+12	; 0x0c
    4a94:	38 d2       	rcall	.+1136   	; 0x4f06 <_Z4recvhPhi>
    }

    if (got > 0)
    4a96:	18 16       	cp	r1, r24
    4a98:	19 06       	cpc	r1, r25
    4a9a:	9c f7       	brge	.-26     	; 0x4a82 <_ZN11EthernetUDP4readEPhj+0x10>
    {
      _remaining -= got;
    4a9c:	29 8d       	ldd	r18, Y+25	; 0x19
    4a9e:	3a 8d       	ldd	r19, Y+26	; 0x1a
    4aa0:	28 1b       	sub	r18, r24
    4aa2:	39 0b       	sbc	r19, r25
    4aa4:	3a 8f       	std	Y+26, r19	; 0x1a
    4aa6:	29 8f       	std	Y+25, r18	; 0x19
  }

  // If we get here, there's no data available or recv failed
  return -1;

}
    4aa8:	df 91       	pop	r29
    4aaa:	cf 91       	pop	r28
    4aac:	08 95       	ret

00004aae <_ZN11EthernetUDP4peekEv>:

int EthernetUDP::peek()
{
    4aae:	cf 93       	push	r28
    4ab0:	df 93       	push	r29
    4ab2:	1f 92       	push	r1
    4ab4:	cd b7       	in	r28, 0x3d	; 61
    4ab6:	de b7       	in	r29, 0x3e	; 62
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
    4ab8:	fc 01       	movw	r30, r24
    4aba:	21 8d       	ldd	r18, Z+25	; 0x19
    4abc:	32 8d       	ldd	r19, Z+26	; 0x1a
    4abe:	23 2b       	or	r18, r19
    4ac0:	41 f0       	breq	.+16     	; 0x4ad2 <_ZN11EthernetUDP4peekEv+0x24>
    return -1;
  ::peek(_sock, &b);
    4ac2:	be 01       	movw	r22, r28
    4ac4:	6f 5f       	subi	r22, 0xFF	; 255
    4ac6:	7f 4f       	sbci	r23, 0xFF	; 255
    4ac8:	84 85       	ldd	r24, Z+12	; 0x0c
    4aca:	5e d2       	rcall	.+1212   	; 0x4f88 <_Z4peekhPh>
  return b;
    4acc:	89 81       	ldd	r24, Y+1	; 0x01
    4ace:	90 e0       	ldi	r25, 0x00	; 0
    4ad0:	02 c0       	rjmp	.+4      	; 0x4ad6 <_ZN11EthernetUDP4peekEv+0x28>
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
    return -1;
    4ad2:	8f ef       	ldi	r24, 0xFF	; 255
    4ad4:	9f ef       	ldi	r25, 0xFF	; 255
  ::peek(_sock, &b);
  return b;
}
    4ad6:	0f 90       	pop	r0
    4ad8:	df 91       	pop	r29
    4ada:	cf 91       	pop	r28
    4adc:	08 95       	ret

00004ade <_ZN11EthernetUDP5beginEj>:

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
    4ade:	ef 92       	push	r14
    4ae0:	ff 92       	push	r15
    4ae2:	1f 93       	push	r17
    4ae4:	cf 93       	push	r28
    4ae6:	df 93       	push	r29
  if (_sock != MAX_SOCK_NUM)
    4ae8:	fc 01       	movw	r30, r24
    4aea:	24 85       	ldd	r18, Z+12	; 0x0c
    4aec:	28 30       	cpi	r18, 0x08	; 8
    4aee:	11 f0       	breq	.+4      	; 0x4af4 <_ZN11EthernetUDP5beginEj+0x16>
    return 0;
    4af0:	80 e0       	ldi	r24, 0x00	; 0
    4af2:	20 c0       	rjmp	.+64     	; 0x4b34 <_ZN11EthernetUDP5beginEj+0x56>
    4af4:	7b 01       	movw	r14, r22
    4af6:	ec 01       	movw	r28, r24
    4af8:	10 e0       	ldi	r17, 0x00	; 0
    4afa:	61 2f       	mov	r22, r17
    4afc:	62 95       	swap	r22
    4afe:	66 0f       	add	r22, r22
    4b00:	60 7e       	andi	r22, 0xE0	; 224
    4b02:	68 5f       	subi	r22, 0xF8	; 248
    4b04:	83 e0       	ldi	r24, 0x03	; 3
    4b06:	90 e0       	ldi	r25, 0x00	; 0
    4b08:	10 d3       	rcall	.+1568   	; 0x512a <_ZN10W5500Class4readEjh>

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
    4b0a:	81 11       	cpse	r24, r1
    4b0c:	02 c0       	rjmp	.+4      	; 0x4b12 <_ZN11EthernetUDP5beginEj+0x34>
      _sock = i;
    4b0e:	1c 87       	std	Y+12, r17	; 0x0c
    4b10:	05 c0       	rjmp	.+10     	; 0x4b1c <_ZN11EthernetUDP5beginEj+0x3e>
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
    4b12:	88 31       	cpi	r24, 0x18	; 24
    4b14:	e1 f3       	breq	.-8      	; 0x4b0e <_ZN11EthernetUDP5beginEj+0x30>
    4b16:	1f 5f       	subi	r17, 0xFF	; 255
/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    4b18:	18 30       	cpi	r17, 0x08	; 8
    4b1a:	79 f7       	brne	.-34     	; 0x4afa <_ZN11EthernetUDP5beginEj+0x1c>
      _sock = i;
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
    4b1c:	8c 85       	ldd	r24, Y+12	; 0x0c
    4b1e:	88 30       	cpi	r24, 0x08	; 8
    4b20:	39 f3       	breq	.-50     	; 0x4af0 <_ZN11EthernetUDP5beginEj+0x12>
    return 0;

  _port = port;
    4b22:	fe 86       	std	Y+14, r15	; 0x0e
    4b24:	ed 86       	std	Y+13, r14	; 0x0d
  _remaining = 0;
    4b26:	1a 8e       	std	Y+26, r1	; 0x1a
    4b28:	19 8e       	std	Y+25, r1	; 0x19
  socket(_sock, SnMR::UDP, _port, 0);
    4b2a:	20 e0       	ldi	r18, 0x00	; 0
    4b2c:	a7 01       	movw	r20, r14
    4b2e:	62 e0       	ldi	r22, 0x02	; 2
    4b30:	26 d1       	rcall	.+588    	; 0x4d7e <_Z6sockethhjh>

  return 1;
    4b32:	81 e0       	ldi	r24, 0x01	; 1
}
    4b34:	df 91       	pop	r29
    4b36:	cf 91       	pop	r28
    4b38:	1f 91       	pop	r17
    4b3a:	ff 90       	pop	r15
    4b3c:	ef 90       	pop	r14
    4b3e:	08 95       	ret

00004b40 <_ZN11EthernetUDP11parsePacketEv>:
  _offset += bytes_written;
  return bytes_written;
}

int EthernetUDP::parsePacket()
{
    4b40:	0f 93       	push	r16
    4b42:	1f 93       	push	r17
    4b44:	cf 93       	push	r28
    4b46:	df 93       	push	r29
    4b48:	cd b7       	in	r28, 0x3d	; 61
    4b4a:	de b7       	in	r29, 0x3e	; 62
    4b4c:	28 97       	sbiw	r28, 0x08	; 8
    4b4e:	0f b6       	in	r0, 0x3f	; 63
    4b50:	f8 94       	cli
    4b52:	de bf       	out	0x3e, r29	; 62
    4b54:	0f be       	out	0x3f, r0	; 63
    4b56:	cd bf       	out	0x3d, r28	; 61
    4b58:	8c 01       	movw	r16, r24
  // discard any remaining bytes in the last packet
  flush();
    4b5a:	dc 01       	movw	r26, r24
    4b5c:	ed 91       	ld	r30, X+
    4b5e:	fc 91       	ld	r31, X
    4b60:	06 80       	ldd	r0, Z+6	; 0x06
    4b62:	f7 81       	ldd	r31, Z+7	; 0x07
    4b64:	e0 2d       	mov	r30, r0
    4b66:	09 95       	icall

  if (w5500.getRXReceivedSize(_sock) > 0)
    4b68:	f8 01       	movw	r30, r16
    4b6a:	64 85       	ldd	r22, Z+12	; 0x0c
    4b6c:	8b e8       	ldi	r24, 0x8B	; 139
    4b6e:	9c e0       	ldi	r25, 0x0C	; 12
    4b70:	6f d3       	rcall	.+1758   	; 0x5250 <_ZN10W5500Class17getRXReceivedSizeEh>
    4b72:	89 2b       	or	r24, r25
    4b74:	39 f1       	breq	.+78     	; 0x4bc4 <_ZN11EthernetUDP11parsePacketEv+0x84>
  {
    //HACK - hand-parse the UDP packet using TCP recv method
    uint8_t tmpBuf[8];
    int ret =0; 
    //read 8 header bytes and get IP and port from it
    ret = recv(_sock,tmpBuf,8);
    4b76:	48 e0       	ldi	r20, 0x08	; 8
    4b78:	50 e0       	ldi	r21, 0x00	; 0
    4b7a:	be 01       	movw	r22, r28
    4b7c:	6f 5f       	subi	r22, 0xFF	; 255
    4b7e:	7f 4f       	sbci	r23, 0xFF	; 255
    4b80:	d8 01       	movw	r26, r16
    4b82:	1c 96       	adiw	r26, 0x0c	; 12
    4b84:	8c 91       	ld	r24, X
    4b86:	bf d1       	rcall	.+894    	; 0x4f06 <_Z4recvhPhi>
    if (ret > 0)
    4b88:	18 16       	cp	r1, r24
    4b8a:	19 06       	cpc	r1, r25
    4b8c:	ec f4       	brge	.+58     	; 0x4bc8 <_ZN11EthernetUDP11parsePacketEv+0x88>
    {
      _remoteIP = tmpBuf;
    4b8e:	be 01       	movw	r22, r28
    4b90:	6f 5f       	subi	r22, 0xFF	; 255
    4b92:	7f 4f       	sbci	r23, 0xFF	; 255
    4b94:	c8 01       	movw	r24, r16
    4b96:	0f 96       	adiw	r24, 0x0f	; 15
    4b98:	0e 94 a9 3a 	call	0x7552	; 0x7552 <_ZN9IPAddressaSEPKh>
      _remotePort = tmpBuf[4];
      _remotePort = (_remotePort << 8) + tmpBuf[5];
    4b9c:	8d 81       	ldd	r24, Y+5	; 0x05
    4b9e:	90 e0       	ldi	r25, 0x00	; 0
    4ba0:	98 2f       	mov	r25, r24
    4ba2:	88 27       	eor	r24, r24
    4ba4:	2e 81       	ldd	r18, Y+6	; 0x06
    4ba6:	82 0f       	add	r24, r18
    4ba8:	91 1d       	adc	r25, r1
    4baa:	f8 01       	movw	r30, r16
    4bac:	96 8b       	std	Z+22, r25	; 0x16
    4bae:	85 8b       	std	Z+21, r24	; 0x15
      _remaining = tmpBuf[6];
      _remaining = (_remaining << 8) + tmpBuf[7];
    4bb0:	8f 81       	ldd	r24, Y+7	; 0x07
    4bb2:	90 e0       	ldi	r25, 0x00	; 0
    4bb4:	98 2f       	mov	r25, r24
    4bb6:	88 27       	eor	r24, r24
    4bb8:	28 85       	ldd	r18, Y+8	; 0x08
    4bba:	82 0f       	add	r24, r18
    4bbc:	91 1d       	adc	r25, r1
    4bbe:	92 8f       	std	Z+26, r25	; 0x1a
    4bc0:	81 8f       	std	Z+25, r24	; 0x19
    4bc2:	02 c0       	rjmp	.+4      	; 0x4bc8 <_ZN11EthernetUDP11parsePacketEv+0x88>
      ret = _remaining;
    }
    return ret;
  }
  // There aren't any packets available
  return 0;
    4bc4:	80 e0       	ldi	r24, 0x00	; 0
    4bc6:	90 e0       	ldi	r25, 0x00	; 0
}
    4bc8:	28 96       	adiw	r28, 0x08	; 8
    4bca:	0f b6       	in	r0, 0x3f	; 63
    4bcc:	f8 94       	cli
    4bce:	de bf       	out	0x3e, r29	; 62
    4bd0:	0f be       	out	0x3f, r0	; 63
    4bd2:	cd bf       	out	0x3d, r28	; 61
    4bd4:	df 91       	pop	r29
    4bd6:	cf 91       	pop	r28
    4bd8:	1f 91       	pop	r17
    4bda:	0f 91       	pop	r16
    4bdc:	08 95       	ret

00004bde <_ZN11EthernetUDPC1Ev>:
#include "Ethernet2.h"
#include "Udp.h"
#include "Dns.h"

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}
    4bde:	fc 01       	movw	r30, r24
    4be0:	13 82       	std	Z+3, r1	; 0x03
    4be2:	12 82       	std	Z+2, r1	; 0x02
    4be4:	88 ee       	ldi	r24, 0xE8	; 232
    4be6:	93 e0       	ldi	r25, 0x03	; 3
    4be8:	a0 e0       	ldi	r26, 0x00	; 0
    4bea:	b0 e0       	ldi	r27, 0x00	; 0
    4bec:	84 83       	std	Z+4, r24	; 0x04
    4bee:	95 83       	std	Z+5, r25	; 0x05
    4bf0:	a6 83       	std	Z+6, r26	; 0x06
    4bf2:	b7 83       	std	Z+7, r27	; 0x07
    4bf4:	8f ef       	ldi	r24, 0xFF	; 255
    4bf6:	98 e0       	ldi	r25, 0x08	; 8
    4bf8:	91 83       	std	Z+1, r25	; 0x01
    4bfa:	80 83       	st	Z, r24
    4bfc:	88 e0       	ldi	r24, 0x08	; 8
    4bfe:	84 87       	std	Z+12, r24	; 0x0c
    4c00:	cf 01       	movw	r24, r30
    4c02:	0f 96       	adiw	r24, 0x0f	; 15
    4c04:	0c 94 87 3a 	jmp	0x750e	; 0x750e <_ZN9IPAddressC1Ev>

00004c08 <_ZN11EthernetUDP11beginPacketEPKcj>:
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

int EthernetUDP::beginPacket(const char *host, uint16_t port)
{
    4c08:	cf 92       	push	r12
    4c0a:	df 92       	push	r13
    4c0c:	ef 92       	push	r14
    4c0e:	ff 92       	push	r15
    4c10:	0f 93       	push	r16
    4c12:	1f 93       	push	r17
    4c14:	cf 93       	push	r28
    4c16:	df 93       	push	r29
    4c18:	cd b7       	in	r28, 0x3d	; 61
    4c1a:	de b7       	in	r29, 0x3e	; 62
    4c1c:	af 97       	sbiw	r28, 0x2f	; 47
    4c1e:	0f b6       	in	r0, 0x3f	; 63
    4c20:	f8 94       	cli
    4c22:	de bf       	out	0x3e, r29	; 62
    4c24:	0f be       	out	0x3f, r0	; 63
    4c26:	cd bf       	out	0x3d, r28	; 61
    4c28:	8c 01       	movw	r16, r24
    4c2a:	6b 01       	movw	r12, r22
    4c2c:	7a 01       	movw	r14, r20
    4c2e:	ce 01       	movw	r24, r28
    4c30:	01 96       	adiw	r24, 0x01	; 1
    4c32:	0e 94 87 3a 	call	0x750e	; 0x750e <_ZN9IPAddressC1Ev>
    4c36:	ce 01       	movw	r24, r28
    4c38:	09 96       	adiw	r24, 0x09	; 9
    4c3a:	d1 df       	rcall	.-94     	; 0x4bde <_ZN11EthernetUDPC1Ev>
  // Look up the host first
  int ret = 0;
  DNSClient dns;
  IPAddress remote_addr;
    4c3c:	ce 01       	movw	r24, r28
    4c3e:	8a 96       	adiw	r24, 0x2a	; 42
    4c40:	0e 94 87 3a 	call	0x750e	; 0x750e <_ZN9IPAddressC1Ev>

  dns.begin(Ethernet.dnsServerIP());
    4c44:	6b e4       	ldi	r22, 0x4B	; 75
    4c46:	7c e0       	ldi	r23, 0x0C	; 12
    4c48:	ce 01       	movw	r24, r28
    4c4a:	84 96       	adiw	r24, 0x24	; 36
    4c4c:	3e db       	rcall	.-2436   	; 0x42ca <_ZN13EthernetClass11dnsServerIPEv>
    4c4e:	be 01       	movw	r22, r28
    4c50:	6c 5d       	subi	r22, 0xDC	; 220
    4c52:	7f 4f       	sbci	r23, 0xFF	; 255
    4c54:	ce 01       	movw	r24, r28
    4c56:	01 96       	adiw	r24, 0x01	; 1
    4c58:	03 d8       	rcall	.-4090   	; 0x3c60 <_ZN9DNSClient5beginERK9IPAddress>
  ret = dns.getHostByName(host, remote_addr);
    4c5a:	ae 01       	movw	r20, r28
    4c5c:	46 5d       	subi	r20, 0xD6	; 214
    4c5e:	5f 4f       	sbci	r21, 0xFF	; 255
    4c60:	b6 01       	movw	r22, r12
    4c62:	ce 01       	movw	r24, r28
    4c64:	01 96       	adiw	r24, 0x01	; 1
    4c66:	56 da       	rcall	.-2900   	; 0x4114 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>
  if (ret == 1) {
    4c68:	81 30       	cpi	r24, 0x01	; 1
    4c6a:	91 05       	cpc	r25, r1
    4c6c:	c1 f4       	brne	.+48     	; 0x4c9e <_ZN11EthernetUDP11beginPacketEPKcj+0x96>
    return beginPacket(remote_addr, port);
    4c6e:	d8 01       	movw	r26, r16
    4c70:	ed 91       	ld	r30, X+
    4c72:	fc 91       	ld	r31, X
    4c74:	04 88       	ldd	r0, Z+20	; 0x14
    4c76:	f5 89       	ldd	r31, Z+21	; 0x15
    4c78:	e0 2d       	mov	r30, r0
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    4c7a:	81 e6       	ldi	r24, 0x61	; 97
    4c7c:	99 e0       	ldi	r25, 0x09	; 9
    4c7e:	9d a3       	std	Y+37, r25	; 0x25
    4c80:	8c a3       	std	Y+36, r24	; 0x24
    4c82:	8c a5       	ldd	r24, Y+44	; 0x2c
    4c84:	9d a5       	ldd	r25, Y+45	; 0x2d
    4c86:	ae a5       	ldd	r26, Y+46	; 0x2e
    4c88:	bf a5       	ldd	r27, Y+47	; 0x2f
    4c8a:	8e a3       	std	Y+38, r24	; 0x26
    4c8c:	9f a3       	std	Y+39, r25	; 0x27
    4c8e:	a8 a7       	std	Y+40, r26	; 0x28
    4c90:	b9 a7       	std	Y+41, r27	; 0x29
    4c92:	a7 01       	movw	r20, r14
    4c94:	be 01       	movw	r22, r28
    4c96:	6c 5d       	subi	r22, 0xDC	; 220
    4c98:	7f 4f       	sbci	r23, 0xFF	; 255
    4c9a:	c8 01       	movw	r24, r16
    4c9c:	09 95       	icall
  } else {
    return ret;
  }
}
    4c9e:	af 96       	adiw	r28, 0x2f	; 47
    4ca0:	0f b6       	in	r0, 0x3f	; 63
    4ca2:	f8 94       	cli
    4ca4:	de bf       	out	0x3e, r29	; 62
    4ca6:	0f be       	out	0x3f, r0	; 63
    4ca8:	cd bf       	out	0x3d, r28	; 61
    4caa:	df 91       	pop	r29
    4cac:	cf 91       	pop	r28
    4cae:	1f 91       	pop	r17
    4cb0:	0f 91       	pop	r16
    4cb2:	ff 90       	pop	r15
    4cb4:	ef 90       	pop	r14
    4cb6:	df 90       	pop	r13
    4cb8:	cf 90       	pop	r12
    4cba:	08 95       	ret

00004cbc <_GLOBAL__sub_I__ZN11EthernetUDPC2Ev>:

  while (_remaining)
  {
    read();
  }
}
    4cbc:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    4cbe:	00 e0       	ldi	r16, 0x00	; 0
    4cc0:	20 e0       	ldi	r18, 0x00	; 0
    4cc2:	40 e0       	ldi	r20, 0x00	; 0
    4cc4:	60 e0       	ldi	r22, 0x00	; 0
    4cc6:	8a e7       	ldi	r24, 0x7A	; 122
    4cc8:	9c e0       	ldi	r25, 0x0C	; 12
    4cca:	0e 94 91 3a 	call	0x7522	; 0x7522 <_ZN9IPAddressC1Ehhhh>
    4cce:	0f 91       	pop	r16
    4cd0:	08 95       	ret

00004cd2 <_GLOBAL__sub_I__ZN7TwitterC2EPKc>:

int Twitter::wait(Print *debug)
{
	while (checkStatus(debug));
	return statusCode;
}
    4cd2:	0f 93       	push	r16
    4cd4:	00 e0       	ldi	r16, 0x00	; 0
    4cd6:	20 e0       	ldi	r18, 0x00	; 0
    4cd8:	40 e0       	ldi	r20, 0x00	; 0
    4cda:	60 e0       	ldi	r22, 0x00	; 0
    4cdc:	80 e8       	ldi	r24, 0x80	; 128
    4cde:	9c e0       	ldi	r25, 0x0C	; 12
    4ce0:	0e 94 91 3a 	call	0x7522	; 0x7522 <_ZN9IPAddressC1Ehhhh>
    4ce4:	0f 91       	pop	r16
    4ce6:	08 95       	ret

00004ce8 <_ZN10W5500Class11writeSnDIPREhPh>:
    }
  }

  w5500.writeSnIR(s, SnIR::SEND_OK);
  return ret;
}
    4ce8:	ab 01       	movw	r20, r22
    4cea:	82 95       	swap	r24
    4cec:	88 0f       	add	r24, r24
    4cee:	80 7e       	andi	r24, 0xE0	; 224
    4cf0:	6c e0       	ldi	r22, 0x0C	; 12
    4cf2:	68 0f       	add	r22, r24
    4cf4:	24 e0       	ldi	r18, 0x04	; 4
    4cf6:	30 e0       	ldi	r19, 0x00	; 0
    4cf8:	8c e0       	ldi	r24, 0x0C	; 12
    4cfa:	90 e0       	ldi	r25, 0x00	; 0
    4cfc:	e8 c1       	rjmp	.+976    	; 0x50ce <_ZN10W5500Class5writeEjhPKhj>

00004cfe <_ZN10W5500Class6readSnEhj>:
    4cfe:	9b 01       	movw	r18, r22
    4d00:	82 95       	swap	r24
    4d02:	88 0f       	add	r24, r24
    4d04:	80 7e       	andi	r24, 0xE0	; 224
    4d06:	68 e0       	ldi	r22, 0x08	; 8
    4d08:	68 0f       	add	r22, r24
    4d0a:	c9 01       	movw	r24, r18
    4d0c:	0e c2       	rjmp	.+1052   	; 0x512a <_ZN10W5500Class4readEjh>

00004d0e <_ZN10W5500Class8readSnIREh>:
    4d0e:	62 e0       	ldi	r22, 0x02	; 2
    4d10:	70 e0       	ldi	r23, 0x00	; 0
    4d12:	f5 cf       	rjmp	.-22     	; 0x4cfe <_ZN10W5500Class6readSnEhj>

00004d14 <_ZN10W5500Class7writeSnEhjh>:
    4d14:	9b 01       	movw	r18, r22
    4d16:	82 95       	swap	r24
    4d18:	88 0f       	add	r24, r24
    4d1a:	80 7e       	andi	r24, 0xE0	; 224
    4d1c:	6c e0       	ldi	r22, 0x0C	; 12
    4d1e:	68 0f       	add	r22, r24
    4d20:	c9 01       	movw	r24, r18
    4d22:	b5 c1       	rjmp	.+874    	; 0x508e <_ZN10W5500Class5writeEjhh>

00004d24 <_ZN10W5500Class11writeSnPORTEhj>:
    4d24:	cf 93       	push	r28
    4d26:	df 93       	push	r29
    4d28:	c8 2f       	mov	r28, r24
    4d2a:	d6 2f       	mov	r29, r22
    4d2c:	47 2f       	mov	r20, r23
    4d2e:	64 e0       	ldi	r22, 0x04	; 4
    4d30:	70 e0       	ldi	r23, 0x00	; 0
    4d32:	f0 df       	rcall	.-32     	; 0x4d14 <_ZN10W5500Class7writeSnEhjh>
    4d34:	4d 2f       	mov	r20, r29
    4d36:	65 e0       	ldi	r22, 0x05	; 5
    4d38:	70 e0       	ldi	r23, 0x00	; 0
    4d3a:	8c 2f       	mov	r24, r28
    4d3c:	df 91       	pop	r29
    4d3e:	cf 91       	pop	r28
    4d40:	e9 cf       	rjmp	.-46     	; 0x4d14 <_ZN10W5500Class7writeSnEhjh>

00004d42 <_ZN10W5500Class9writeSnIREhh>:
    4d42:	46 2f       	mov	r20, r22
    4d44:	62 e0       	ldi	r22, 0x02	; 2
    4d46:	70 e0       	ldi	r23, 0x00	; 0
    4d48:	e5 cf       	rjmp	.-54     	; 0x4d14 <_ZN10W5500Class7writeSnEhjh>

00004d4a <_ZN10W5500Class12writeSnDPORTEhj>:
    4d4a:	cf 93       	push	r28
    4d4c:	df 93       	push	r29
    4d4e:	c8 2f       	mov	r28, r24
    4d50:	d6 2f       	mov	r29, r22
    4d52:	47 2f       	mov	r20, r23
    4d54:	60 e1       	ldi	r22, 0x10	; 16
    4d56:	70 e0       	ldi	r23, 0x00	; 0
    4d58:	dd df       	rcall	.-70     	; 0x4d14 <_ZN10W5500Class7writeSnEhjh>
    4d5a:	4d 2f       	mov	r20, r29
    4d5c:	61 e1       	ldi	r22, 0x11	; 17
    4d5e:	70 e0       	ldi	r23, 0x00	; 0
    4d60:	8c 2f       	mov	r24, r28
    4d62:	df 91       	pop	r29
    4d64:	cf 91       	pop	r28
    4d66:	d6 cf       	rjmp	.-84     	; 0x4d14 <_ZN10W5500Class7writeSnEhjh>

00004d68 <_Z5closeh>:
    4d68:	cf 93       	push	r28
    4d6a:	c8 2f       	mov	r28, r24
    4d6c:	40 e1       	ldi	r20, 0x10	; 16
    4d6e:	68 2f       	mov	r22, r24
    4d70:	8b e8       	ldi	r24, 0x8B	; 139
    4d72:	9c e0       	ldi	r25, 0x0C	; 12
    4d74:	5f d3       	rcall	.+1726   	; 0x5434 <_ZN10W5500Class9execCmdSnEh7SockCMD>
    4d76:	6f ef       	ldi	r22, 0xFF	; 255
    4d78:	8c 2f       	mov	r24, r28
    4d7a:	cf 91       	pop	r28
    4d7c:	e2 cf       	rjmp	.-60     	; 0x4d42 <_ZN10W5500Class9writeSnIREhh>

00004d7e <_Z6sockethhjh>:
    4d7e:	ff 92       	push	r15
    4d80:	0f 93       	push	r16
    4d82:	1f 93       	push	r17
    4d84:	cf 93       	push	r28
    4d86:	df 93       	push	r29
    4d88:	9f ef       	ldi	r25, 0xFF	; 255
    4d8a:	96 0f       	add	r25, r22
    4d8c:	95 30       	cpi	r25, 0x05	; 5
    4d8e:	18 f5       	brcc	.+70     	; 0x4dd6 <_Z6sockethhjh+0x58>
    4d90:	d2 2f       	mov	r29, r18
    4d92:	8a 01       	movw	r16, r20
    4d94:	f6 2e       	mov	r15, r22
    4d96:	c8 2f       	mov	r28, r24
    4d98:	e7 df       	rcall	.-50     	; 0x4d68 <_Z5closeh>
    4d9a:	4f 2d       	mov	r20, r15
    4d9c:	4d 2b       	or	r20, r29
    4d9e:	60 e0       	ldi	r22, 0x00	; 0
    4da0:	70 e0       	ldi	r23, 0x00	; 0
    4da2:	8c 2f       	mov	r24, r28
    4da4:	b7 df       	rcall	.-146    	; 0x4d14 <_ZN10W5500Class7writeSnEhjh>
    4da6:	01 15       	cp	r16, r1
    4da8:	11 05       	cpc	r17, r1
    4daa:	11 f0       	breq	.+4      	; 0x4db0 <_Z6sockethhjh+0x32>
    4dac:	b8 01       	movw	r22, r16
    4dae:	0a c0       	rjmp	.+20     	; 0x4dc4 <_Z6sockethhjh+0x46>
    4db0:	60 91 86 0c 	lds	r22, 0x0C86	; 0x800c86 <_ZL10local_port>
    4db4:	70 91 87 0c 	lds	r23, 0x0C87	; 0x800c87 <_ZL10local_port+0x1>
    4db8:	6f 5f       	subi	r22, 0xFF	; 255
    4dba:	7f 4f       	sbci	r23, 0xFF	; 255
    4dbc:	70 93 87 0c 	sts	0x0C87, r23	; 0x800c87 <_ZL10local_port+0x1>
    4dc0:	60 93 86 0c 	sts	0x0C86, r22	; 0x800c86 <_ZL10local_port>
    4dc4:	8c 2f       	mov	r24, r28
    4dc6:	ae df       	rcall	.-164    	; 0x4d24 <_ZN10W5500Class11writeSnPORTEhj>
    4dc8:	41 e0       	ldi	r20, 0x01	; 1
    4dca:	6c 2f       	mov	r22, r28
    4dcc:	8b e8       	ldi	r24, 0x8B	; 139
    4dce:	9c e0       	ldi	r25, 0x0C	; 12
    4dd0:	31 d3       	rcall	.+1634   	; 0x5434 <_ZN10W5500Class9execCmdSnEh7SockCMD>
    4dd2:	81 e0       	ldi	r24, 0x01	; 1
    4dd4:	01 c0       	rjmp	.+2      	; 0x4dd8 <_Z6sockethhjh+0x5a>
    4dd6:	80 e0       	ldi	r24, 0x00	; 0
    4dd8:	df 91       	pop	r29
    4dda:	cf 91       	pop	r28
    4ddc:	1f 91       	pop	r17
    4dde:	0f 91       	pop	r16
    4de0:	ff 90       	pop	r15
    4de2:	08 95       	ret

00004de4 <_Z6listenh>:
    4de4:	cf 93       	push	r28
    4de6:	c8 2f       	mov	r28, r24
    4de8:	63 e0       	ldi	r22, 0x03	; 3
    4dea:	70 e0       	ldi	r23, 0x00	; 0
    4dec:	88 df       	rcall	.-240    	; 0x4cfe <_ZN10W5500Class6readSnEhj>
    4dee:	83 31       	cpi	r24, 0x13	; 19
    4df0:	39 f4       	brne	.+14     	; 0x4e00 <_Z6listenh+0x1c>
    4df2:	42 e0       	ldi	r20, 0x02	; 2
    4df4:	6c 2f       	mov	r22, r28
    4df6:	8b e8       	ldi	r24, 0x8B	; 139
    4df8:	9c e0       	ldi	r25, 0x0C	; 12
    4dfa:	1c d3       	rcall	.+1592   	; 0x5434 <_ZN10W5500Class9execCmdSnEh7SockCMD>
    4dfc:	81 e0       	ldi	r24, 0x01	; 1
    4dfe:	01 c0       	rjmp	.+2      	; 0x4e02 <_Z6listenh+0x1e>
    4e00:	80 e0       	ldi	r24, 0x00	; 0
    4e02:	cf 91       	pop	r28
    4e04:	08 95       	ret

00004e06 <_Z7connecthPhj>:
    4e06:	0f 93       	push	r16
    4e08:	1f 93       	push	r17
    4e0a:	cf 93       	push	r28
    4e0c:	fb 01       	movw	r30, r22
    4e0e:	90 81       	ld	r25, Z
    4e10:	9f 3f       	cpi	r25, 0xFF	; 255
    4e12:	51 f4       	brne	.+20     	; 0x4e28 <_Z7connecthPhj+0x22>
    4e14:	91 81       	ldd	r25, Z+1	; 0x01
    4e16:	9f 3f       	cpi	r25, 0xFF	; 255
    4e18:	91 f4       	brne	.+36     	; 0x4e3e <_Z7connecthPhj+0x38>
    4e1a:	92 81       	ldd	r25, Z+2	; 0x02
    4e1c:	9f 3f       	cpi	r25, 0xFF	; 255
    4e1e:	79 f4       	brne	.+30     	; 0x4e3e <_Z7connecthPhj+0x38>
    4e20:	93 81       	ldd	r25, Z+3	; 0x03
    4e22:	9f 3f       	cpi	r25, 0xFF	; 255
    4e24:	61 f4       	brne	.+24     	; 0x4e3e <_Z7connecthPhj+0x38>
    4e26:	1c c0       	rjmp	.+56     	; 0x4e60 <_Z7connecthPhj+0x5a>
    4e28:	91 11       	cpse	r25, r1
    4e2a:	09 c0       	rjmp	.+18     	; 0x4e3e <_Z7connecthPhj+0x38>
    4e2c:	91 81       	ldd	r25, Z+1	; 0x01
    4e2e:	91 11       	cpse	r25, r1
    4e30:	06 c0       	rjmp	.+12     	; 0x4e3e <_Z7connecthPhj+0x38>
    4e32:	92 81       	ldd	r25, Z+2	; 0x02
    4e34:	91 11       	cpse	r25, r1
    4e36:	03 c0       	rjmp	.+6      	; 0x4e3e <_Z7connecthPhj+0x38>
    4e38:	93 81       	ldd	r25, Z+3	; 0x03
    4e3a:	99 23       	and	r25, r25
    4e3c:	91 f0       	breq	.+36     	; 0x4e62 <_Z7connecthPhj+0x5c>
    4e3e:	41 15       	cp	r20, r1
    4e40:	51 05       	cpc	r21, r1
    4e42:	71 f0       	breq	.+28     	; 0x4e60 <_Z7connecthPhj+0x5a>
    4e44:	8a 01       	movw	r16, r20
    4e46:	bf 01       	movw	r22, r30
    4e48:	c8 2f       	mov	r28, r24
    4e4a:	4e df       	rcall	.-356    	; 0x4ce8 <_ZN10W5500Class11writeSnDIPREhPh>
    4e4c:	b8 01       	movw	r22, r16
    4e4e:	8c 2f       	mov	r24, r28
    4e50:	7c df       	rcall	.-264    	; 0x4d4a <_ZN10W5500Class12writeSnDPORTEhj>
    4e52:	44 e0       	ldi	r20, 0x04	; 4
    4e54:	6c 2f       	mov	r22, r28
    4e56:	8b e8       	ldi	r24, 0x8B	; 139
    4e58:	9c e0       	ldi	r25, 0x0C	; 12
    4e5a:	ec d2       	rcall	.+1496   	; 0x5434 <_ZN10W5500Class9execCmdSnEh7SockCMD>
    4e5c:	91 e0       	ldi	r25, 0x01	; 1
    4e5e:	01 c0       	rjmp	.+2      	; 0x4e62 <_Z7connecthPhj+0x5c>
    4e60:	90 e0       	ldi	r25, 0x00	; 0
    4e62:	89 2f       	mov	r24, r25
    4e64:	cf 91       	pop	r28
    4e66:	1f 91       	pop	r17
    4e68:	0f 91       	pop	r16
    4e6a:	08 95       	ret

00004e6c <_Z10disconnecth>:
    4e6c:	48 e0       	ldi	r20, 0x08	; 8
    4e6e:	68 2f       	mov	r22, r24
    4e70:	8b e8       	ldi	r24, 0x8B	; 139
    4e72:	9c e0       	ldi	r25, 0x0C	; 12
    4e74:	df c2       	rjmp	.+1470   	; 0x5434 <_ZN10W5500Class9execCmdSnEh7SockCMD>

00004e76 <_Z4sendhPKhj>:
    4e76:	cf 92       	push	r12
    4e78:	df 92       	push	r13
    4e7a:	ef 92       	push	r14
    4e7c:	ff 92       	push	r15
    4e7e:	0f 93       	push	r16
    4e80:	1f 93       	push	r17
    4e82:	cf 93       	push	r28
    4e84:	c8 2f       	mov	r28, r24
    4e86:	7b 01       	movw	r14, r22
    4e88:	8a 01       	movw	r16, r20
    4e8a:	41 30       	cpi	r20, 0x01	; 1
    4e8c:	58 40       	sbci	r21, 0x08	; 8
    4e8e:	10 f0       	brcs	.+4      	; 0x4e94 <_Z4sendhPKhj+0x1e>
    4e90:	00 e0       	ldi	r16, 0x00	; 0
    4e92:	18 e0       	ldi	r17, 0x08	; 8
    4e94:	6c 2f       	mov	r22, r28
    4e96:	8b e8       	ldi	r24, 0x8B	; 139
    4e98:	9c e0       	ldi	r25, 0x0C	; 12
    4e9a:	a9 d1       	rcall	.+850    	; 0x51ee <_ZN10W5500Class13getTXFreeSizeEh>
    4e9c:	6c 01       	movw	r12, r24
    4e9e:	63 e0       	ldi	r22, 0x03	; 3
    4ea0:	70 e0       	ldi	r23, 0x00	; 0
    4ea2:	8c 2f       	mov	r24, r28
    4ea4:	2c df       	rcall	.-424    	; 0x4cfe <_ZN10W5500Class6readSnEhj>
    4ea6:	87 31       	cpi	r24, 0x17	; 23
    4ea8:	11 f0       	breq	.+4      	; 0x4eae <_Z4sendhPKhj+0x38>
    4eaa:	8c 31       	cpi	r24, 0x1C	; 28
    4eac:	21 f4       	brne	.+8      	; 0x4eb6 <_Z4sendhPKhj+0x40>
    4eae:	c0 16       	cp	r12, r16
    4eb0:	d1 06       	cpc	r13, r17
    4eb2:	80 f3       	brcs	.-32     	; 0x4e94 <_Z4sendhPKhj+0x1e>
    4eb4:	02 c0       	rjmp	.+4      	; 0x4eba <_Z4sendhPKhj+0x44>
    4eb6:	00 e0       	ldi	r16, 0x00	; 0
    4eb8:	10 e0       	ldi	r17, 0x00	; 0
    4eba:	98 01       	movw	r18, r16
    4ebc:	a7 01       	movw	r20, r14
    4ebe:	6c 2f       	mov	r22, r28
    4ec0:	8b e8       	ldi	r24, 0x8B	; 139
    4ec2:	9c e0       	ldi	r25, 0x0C	; 12
    4ec4:	19 d2       	rcall	.+1074   	; 0x52f8 <_ZN10W5500Class20send_data_processingEhPKhj>
    4ec6:	40 e2       	ldi	r20, 0x20	; 32
    4ec8:	6c 2f       	mov	r22, r28
    4eca:	8b e8       	ldi	r24, 0x8B	; 139
    4ecc:	9c e0       	ldi	r25, 0x0C	; 12
    4ece:	b2 d2       	rcall	.+1380   	; 0x5434 <_ZN10W5500Class9execCmdSnEh7SockCMD>
    4ed0:	8c 2f       	mov	r24, r28
    4ed2:	1d df       	rcall	.-454    	; 0x4d0e <_ZN10W5500Class8readSnIREh>
    4ed4:	84 fd       	sbrc	r24, 4
    4ed6:	0b c0       	rjmp	.+22     	; 0x4eee <_Z4sendhPKhj+0x78>
    4ed8:	63 e0       	ldi	r22, 0x03	; 3
    4eda:	70 e0       	ldi	r23, 0x00	; 0
    4edc:	8c 2f       	mov	r24, r28
    4ede:	0f df       	rcall	.-482    	; 0x4cfe <_ZN10W5500Class6readSnEhj>
    4ee0:	81 11       	cpse	r24, r1
    4ee2:	f6 cf       	rjmp	.-20     	; 0x4ed0 <_Z4sendhPKhj+0x5a>
    4ee4:	8c 2f       	mov	r24, r28
    4ee6:	40 df       	rcall	.-384    	; 0x4d68 <_Z5closeh>
    4ee8:	80 e0       	ldi	r24, 0x00	; 0
    4eea:	90 e0       	ldi	r25, 0x00	; 0
    4eec:	04 c0       	rjmp	.+8      	; 0x4ef6 <_Z4sendhPKhj+0x80>
    4eee:	60 e1       	ldi	r22, 0x10	; 16
    4ef0:	8c 2f       	mov	r24, r28
    4ef2:	27 df       	rcall	.-434    	; 0x4d42 <_ZN10W5500Class9writeSnIREhh>
    4ef4:	c8 01       	movw	r24, r16
    4ef6:	cf 91       	pop	r28
    4ef8:	1f 91       	pop	r17
    4efa:	0f 91       	pop	r16
    4efc:	ff 90       	pop	r15
    4efe:	ef 90       	pop	r14
    4f00:	df 90       	pop	r13
    4f02:	cf 90       	pop	r12
    4f04:	08 95       	ret

00004f06 <_Z4recvhPhi>:
    4f06:	cf 92       	push	r12
    4f08:	df 92       	push	r13
    4f0a:	ef 92       	push	r14
    4f0c:	ff 92       	push	r15
    4f0e:	0f 93       	push	r16
    4f10:	1f 93       	push	r17
    4f12:	cf 93       	push	r28
    4f14:	df 93       	push	r29
    4f16:	18 2f       	mov	r17, r24
    4f18:	6b 01       	movw	r12, r22
    4f1a:	7a 01       	movw	r14, r20
    4f1c:	68 2f       	mov	r22, r24
    4f1e:	8b e8       	ldi	r24, 0x8B	; 139
    4f20:	9c e0       	ldi	r25, 0x0C	; 12
    4f22:	96 d1       	rcall	.+812    	; 0x5250 <_ZN10W5500Class17getRXReceivedSizeEh>
    4f24:	ec 01       	movw	r28, r24
    4f26:	00 97       	sbiw	r24, 0x00	; 0
    4f28:	91 f4       	brne	.+36     	; 0x4f4e <_Z4recvhPhi+0x48>
    4f2a:	63 e0       	ldi	r22, 0x03	; 3
    4f2c:	70 e0       	ldi	r23, 0x00	; 0
    4f2e:	81 2f       	mov	r24, r17
    4f30:	e6 de       	rcall	.-564    	; 0x4cfe <_ZN10W5500Class6readSnEhj>
    4f32:	84 31       	cpi	r24, 0x14	; 20
    4f34:	f9 f0       	breq	.+62     	; 0x4f74 <_Z4recvhPhi+0x6e>
    4f36:	88 23       	and	r24, r24
    4f38:	e9 f0       	breq	.+58     	; 0x4f74 <_Z4recvhPhi+0x6e>
    4f3a:	c1 e0       	ldi	r28, 0x01	; 1
    4f3c:	d0 e0       	ldi	r29, 0x00	; 0
    4f3e:	8c 31       	cpi	r24, 0x1C	; 28
    4f40:	11 f4       	brne	.+4      	; 0x4f46 <_Z4recvhPhi+0x40>
    4f42:	c0 e0       	ldi	r28, 0x00	; 0
    4f44:	d0 e0       	ldi	r29, 0x00	; 0
    4f46:	d1 95       	neg	r29
    4f48:	c1 95       	neg	r28
    4f4a:	d1 09       	sbc	r29, r1
    4f4c:	13 c0       	rjmp	.+38     	; 0x4f74 <_Z4recvhPhi+0x6e>
    4f4e:	e8 16       	cp	r14, r24
    4f50:	f9 06       	cpc	r15, r25
    4f52:	0c f4       	brge	.+2      	; 0x4f56 <_Z4recvhPhi+0x50>
    4f54:	e7 01       	movw	r28, r14
    4f56:	1c 16       	cp	r1, r28
    4f58:	1d 06       	cpc	r1, r29
    4f5a:	64 f4       	brge	.+24     	; 0x4f74 <_Z4recvhPhi+0x6e>
    4f5c:	00 e0       	ldi	r16, 0x00	; 0
    4f5e:	9e 01       	movw	r18, r28
    4f60:	a6 01       	movw	r20, r12
    4f62:	61 2f       	mov	r22, r17
    4f64:	8b e8       	ldi	r24, 0x8B	; 139
    4f66:	9c e0       	ldi	r25, 0x0C	; 12
    4f68:	18 d2       	rcall	.+1072   	; 0x539a <_ZN10W5500Class20recv_data_processingEhPhjh>
    4f6a:	40 e4       	ldi	r20, 0x40	; 64
    4f6c:	61 2f       	mov	r22, r17
    4f6e:	8b e8       	ldi	r24, 0x8B	; 139
    4f70:	9c e0       	ldi	r25, 0x0C	; 12
    4f72:	60 d2       	rcall	.+1216   	; 0x5434 <_ZN10W5500Class9execCmdSnEh7SockCMD>
    4f74:	ce 01       	movw	r24, r28
    4f76:	df 91       	pop	r29
    4f78:	cf 91       	pop	r28
    4f7a:	1f 91       	pop	r17
    4f7c:	0f 91       	pop	r16
    4f7e:	ff 90       	pop	r15
    4f80:	ef 90       	pop	r14
    4f82:	df 90       	pop	r13
    4f84:	cf 90       	pop	r12
    4f86:	08 95       	ret

00004f88 <_Z4peekhPh>:
    4f88:	0f 93       	push	r16
    4f8a:	ab 01       	movw	r20, r22
    4f8c:	01 e0       	ldi	r16, 0x01	; 1
    4f8e:	21 e0       	ldi	r18, 0x01	; 1
    4f90:	30 e0       	ldi	r19, 0x00	; 0
    4f92:	68 2f       	mov	r22, r24
    4f94:	8b e8       	ldi	r24, 0x8B	; 139
    4f96:	9c e0       	ldi	r25, 0x0C	; 12
    4f98:	00 d2       	rcall	.+1024   	; 0x539a <_ZN10W5500Class20recv_data_processingEhPhjh>
    4f9a:	81 e0       	ldi	r24, 0x01	; 1
    4f9c:	90 e0       	ldi	r25, 0x00	; 0
    4f9e:	0f 91       	pop	r16
    4fa0:	08 95       	ret

00004fa2 <_Z5flushh>:
    4fa2:	08 95       	ret

00004fa4 <_Z10bufferDatahjPKhj>:

uint16_t bufferData(SOCKET s, uint16_t offset, const uint8_t* buf, uint16_t len)
{
    4fa4:	af 92       	push	r10
    4fa6:	bf 92       	push	r11
    4fa8:	cf 92       	push	r12
    4faa:	df 92       	push	r13
    4fac:	ff 92       	push	r15
    4fae:	0f 93       	push	r16
    4fb0:	1f 93       	push	r17
    4fb2:	cf 93       	push	r28
    4fb4:	df 93       	push	r29
    4fb6:	f8 2e       	mov	r15, r24
    4fb8:	6b 01       	movw	r12, r22
    4fba:	5a 01       	movw	r10, r20
    4fbc:	e9 01       	movw	r28, r18
  uint16_t ret =0;
  if (len > w5500.getTXFreeSize(s))
    4fbe:	68 2f       	mov	r22, r24
    4fc0:	8b e8       	ldi	r24, 0x8B	; 139
    4fc2:	9c e0       	ldi	r25, 0x0C	; 12
    4fc4:	14 d1       	rcall	.+552    	; 0x51ee <_ZN10W5500Class13getTXFreeSizeEh>
    4fc6:	8c 17       	cp	r24, r28
    4fc8:	9d 07       	cpc	r25, r29
    4fca:	28 f4       	brcc	.+10     	; 0x4fd6 <_Z10bufferDatahjPKhj+0x32>
  {
    ret = w5500.getTXFreeSize(s); // check size not to exceed MAX size.
    4fcc:	6f 2d       	mov	r22, r15
    4fce:	8b e8       	ldi	r24, 0x8B	; 139
    4fd0:	9c e0       	ldi	r25, 0x0C	; 12
    4fd2:	0d d1       	rcall	.+538    	; 0x51ee <_ZN10W5500Class13getTXFreeSizeEh>
    4fd4:	ec 01       	movw	r28, r24
  }
  else
  {
    ret = len;
  }
  w5500.send_data_processing_offset(s, offset, buf, ret);
    4fd6:	8e 01       	movw	r16, r28
    4fd8:	95 01       	movw	r18, r10
    4fda:	a6 01       	movw	r20, r12
    4fdc:	6f 2d       	mov	r22, r15
    4fde:	8b e8       	ldi	r24, 0x8B	; 139
    4fe0:	9c e0       	ldi	r25, 0x0C	; 12
    4fe2:	50 d1       	rcall	.+672    	; 0x5284 <_ZN10W5500Class27send_data_processing_offsetEhjPKhj>
  return ret;
}
    4fe4:	ce 01       	movw	r24, r28
    4fe6:	df 91       	pop	r29
    4fe8:	cf 91       	pop	r28
    4fea:	1f 91       	pop	r17
    4fec:	0f 91       	pop	r16
    4fee:	ff 90       	pop	r15
    4ff0:	df 90       	pop	r13
    4ff2:	cf 90       	pop	r12
    4ff4:	bf 90       	pop	r11
    4ff6:	af 90       	pop	r10
    4ff8:	08 95       	ret

00004ffa <_Z8startUDPhPhj>:

int startUDP(SOCKET s, uint8_t* addr, uint16_t port)
{
    4ffa:	0f 93       	push	r16
    4ffc:	1f 93       	push	r17
    4ffe:	cf 93       	push	r28
    5000:	fb 01       	movw	r30, r22
  if
    5002:	90 81       	ld	r25, Z
    5004:	91 11       	cpse	r25, r1
    5006:	09 c0       	rjmp	.+18     	; 0x501a <_Z8startUDPhPhj+0x20>
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
    5008:	91 81       	ldd	r25, Z+1	; 0x01
    500a:	91 11       	cpse	r25, r1
    500c:	06 c0       	rjmp	.+12     	; 0x501a <_Z8startUDPhPhj+0x20>
    500e:	92 81       	ldd	r25, Z+2	; 0x02
    5010:	91 11       	cpse	r25, r1
    5012:	03 c0       	rjmp	.+6      	; 0x501a <_Z8startUDPhPhj+0x20>
    5014:	93 81       	ldd	r25, Z+3	; 0x03
    5016:	99 23       	and	r25, r25
    5018:	69 f0       	breq	.+26     	; 0x5034 <_Z8startUDPhPhj+0x3a>
    501a:	41 15       	cp	r20, r1
    501c:	51 05       	cpc	r21, r1
    501e:	51 f0       	breq	.+20     	; 0x5034 <_Z8startUDPhPhj+0x3a>
    5020:	8a 01       	movw	r16, r20
    5022:	bf 01       	movw	r22, r30
    5024:	c8 2f       	mov	r28, r24
  {
    return 0;
  }
  else
  {
    w5500.writeSnDIPR(s, addr);
    5026:	60 de       	rcall	.-832    	; 0x4ce8 <_ZN10W5500Class11writeSnDIPREhPh>
    w5500.writeSnDPORT(s, port);
    5028:	b8 01       	movw	r22, r16
    502a:	8c 2f       	mov	r24, r28
    502c:	8e de       	rcall	.-740    	; 0x4d4a <_ZN10W5500Class12writeSnDPORTEhj>
    return 1;
    502e:	81 e0       	ldi	r24, 0x01	; 1
    5030:	90 e0       	ldi	r25, 0x00	; 0
    5032:	02 c0       	rjmp	.+4      	; 0x5038 <_Z8startUDPhPhj+0x3e>
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
     ((port == 0x00))
    ) 
  {
    return 0;
    5034:	80 e0       	ldi	r24, 0x00	; 0
    5036:	90 e0       	ldi	r25, 0x00	; 0
  {
    w5500.writeSnDIPR(s, addr);
    w5500.writeSnDPORT(s, port);
    return 1;
  }
}
    5038:	cf 91       	pop	r28
    503a:	1f 91       	pop	r17
    503c:	0f 91       	pop	r16
    503e:	08 95       	ret

00005040 <_Z7sendUDPh>:

int sendUDP(SOCKET s)
{
    5040:	cf 93       	push	r28
    5042:	c8 2f       	mov	r28, r24
  w5500.execCmdSn(s, Sock_SEND);
    5044:	40 e2       	ldi	r20, 0x20	; 32
    5046:	68 2f       	mov	r22, r24
    5048:	8b e8       	ldi	r24, 0x8B	; 139
    504a:	9c e0       	ldi	r25, 0x0C	; 12
    504c:	f3 d1       	rcall	.+998    	; 0x5434 <_ZN10W5500Class9execCmdSnEh7SockCMD>
		
  /* +2008.01 bj */
  while ( (w5500.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
    504e:	8c 2f       	mov	r24, r28
    5050:	5e de       	rcall	.-836    	; 0x4d0e <_ZN10W5500Class8readSnIREh>
    5052:	84 fd       	sbrc	r24, 4
    5054:	0a c0       	rjmp	.+20     	; 0x506a <_Z7sendUDPh+0x2a>
  {
    if (w5500.readSnIR(s) & SnIR::TIMEOUT)
    5056:	8c 2f       	mov	r24, r28
    5058:	5a de       	rcall	.-844    	; 0x4d0e <_ZN10W5500Class8readSnIREh>
    505a:	83 ff       	sbrs	r24, 3
    505c:	f8 cf       	rjmp	.-16     	; 0x504e <_Z7sendUDPh+0xe>
    {
      /* +2008.01 [bj]: clear interrupt */
      w5500.writeSnIR(s, (SnIR::SEND_OK|SnIR::TIMEOUT));
    505e:	68 e1       	ldi	r22, 0x18	; 24
    5060:	8c 2f       	mov	r24, r28
    5062:	6f de       	rcall	.-802    	; 0x4d42 <_ZN10W5500Class9writeSnIREhh>
    5064:	80 e0       	ldi	r24, 0x00	; 0
      return 0;
    5066:	90 e0       	ldi	r25, 0x00	; 0
    5068:	05 c0       	rjmp	.+10     	; 0x5074 <_Z7sendUDPh+0x34>
    }
  }

  /* +2008.01 bj */	
  w5500.writeSnIR(s, SnIR::SEND_OK);
    506a:	60 e1       	ldi	r22, 0x10	; 16
    506c:	8c 2f       	mov	r24, r28
    506e:	69 de       	rcall	.-814    	; 0x4d42 <_ZN10W5500Class9writeSnIREhh>
    5070:	81 e0       	ldi	r24, 0x01	; 1

  /* Sent ok */
  return 1;
    5072:	90 e0       	ldi	r25, 0x00	; 0
    5074:	cf 91       	pop	r28
}
    5076:	08 95       	ret

00005078 <_ZN8SPIClass8transferEh>:
    5078:	8e bd       	out	0x2e, r24	; 46
    uint8_t _data = SPI.transfer(0);
    resetSS();
    SPI.endTransaction();

    return _data;
}
    507a:	00 00       	nop
    507c:	0d b4       	in	r0, 0x2d	; 45
    507e:	07 fe       	sbrs	r0, 7
    5080:	fd cf       	rjmp	.-6      	; 0x507c <_ZN8SPIClass8transferEh+0x4>
    5082:	8e b5       	in	r24, 0x2e	; 46
    5084:	08 95       	ret

00005086 <_ZN10W5500Class5setSSEv>:
    5086:	44 98       	cbi	0x08, 4	; 8
    5088:	08 95       	ret

0000508a <_ZN10W5500Class7resetSSEv>:
    508a:	44 9a       	sbi	0x08, 4	; 8
    508c:	08 95       	ret

0000508e <_ZN10W5500Class5writeEjhh>:
    508e:	0f 93       	push	r16
    5090:	1f 93       	push	r17
    5092:	cf 93       	push	r28
    5094:	df 93       	push	r29
    5096:	18 2f       	mov	r17, r24
    5098:	09 2f       	mov	r16, r25
    509a:	d6 2f       	mov	r29, r22
    509c:	c4 2f       	mov	r28, r20
    509e:	80 91 89 0c 	lds	r24, 0x0C89	; 0x800c89 <wiznet_SPI_settings>
    50a2:	90 91 8a 0c 	lds	r25, 0x0C8A	; 0x800c8a <wiznet_SPI_settings+0x1>
    50a6:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <_ZN8SPIClass16beginTransactionE11SPISettings>
    50aa:	ed df       	rcall	.-38     	; 0x5086 <_ZN10W5500Class5setSSEv>
    50ac:	80 2f       	mov	r24, r16
    50ae:	e4 df       	rcall	.-56     	; 0x5078 <_ZN8SPIClass8transferEh>
    50b0:	81 2f       	mov	r24, r17
    50b2:	e2 df       	rcall	.-60     	; 0x5078 <_ZN8SPIClass8transferEh>
    50b4:	8d 2f       	mov	r24, r29
    50b6:	e0 df       	rcall	.-64     	; 0x5078 <_ZN8SPIClass8transferEh>
    50b8:	8c 2f       	mov	r24, r28
    50ba:	de df       	rcall	.-68     	; 0x5078 <_ZN8SPIClass8transferEh>
    50bc:	e6 df       	rcall	.-52     	; 0x508a <_ZN10W5500Class7resetSSEv>
    50be:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <_ZN8SPIClass14endTransactionEv>
    50c2:	81 e0       	ldi	r24, 0x01	; 1
    50c4:	df 91       	pop	r29
    50c6:	cf 91       	pop	r28
    50c8:	1f 91       	pop	r17
    50ca:	0f 91       	pop	r16
    50cc:	08 95       	ret

000050ce <_ZN10W5500Class5writeEjhPKhj>:
    50ce:	df 92       	push	r13
    50d0:	ef 92       	push	r14
    50d2:	ff 92       	push	r15
    50d4:	0f 93       	push	r16
    50d6:	1f 93       	push	r17
    50d8:	cf 93       	push	r28
    50da:	df 93       	push	r29
    50dc:	d8 2f       	mov	r29, r24
    50de:	d9 2e       	mov	r13, r25
    50e0:	c6 2f       	mov	r28, r22
    50e2:	7a 01       	movw	r14, r20
    50e4:	89 01       	movw	r16, r18
    50e6:	80 91 89 0c 	lds	r24, 0x0C89	; 0x800c89 <wiznet_SPI_settings>
    50ea:	90 91 8a 0c 	lds	r25, 0x0C8A	; 0x800c8a <wiznet_SPI_settings+0x1>
    50ee:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <_ZN8SPIClass16beginTransactionE11SPISettings>
    50f2:	c9 df       	rcall	.-110    	; 0x5086 <_ZN10W5500Class5setSSEv>
    50f4:	8d 2d       	mov	r24, r13
    50f6:	c0 df       	rcall	.-128    	; 0x5078 <_ZN8SPIClass8transferEh>
    50f8:	8d 2f       	mov	r24, r29
    50fa:	be df       	rcall	.-132    	; 0x5078 <_ZN8SPIClass8transferEh>
    50fc:	8c 2f       	mov	r24, r28
    50fe:	bc df       	rcall	.-136    	; 0x5078 <_ZN8SPIClass8transferEh>
    5100:	e7 01       	movw	r28, r14
    5102:	e0 0e       	add	r14, r16
    5104:	f1 1e       	adc	r15, r17
    5106:	ce 15       	cp	r28, r14
    5108:	df 05       	cpc	r29, r15
    510a:	19 f0       	breq	.+6      	; 0x5112 <_ZN10W5500Class5writeEjhPKhj+0x44>
    510c:	89 91       	ld	r24, Y+
    510e:	b4 df       	rcall	.-152    	; 0x5078 <_ZN8SPIClass8transferEh>
    5110:	fa cf       	rjmp	.-12     	; 0x5106 <_ZN10W5500Class5writeEjhPKhj+0x38>
    5112:	bb df       	rcall	.-138    	; 0x508a <_ZN10W5500Class7resetSSEv>
    5114:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <_ZN8SPIClass14endTransactionEv>
    5118:	c8 01       	movw	r24, r16
    511a:	df 91       	pop	r29
    511c:	cf 91       	pop	r28
    511e:	1f 91       	pop	r17
    5120:	0f 91       	pop	r16
    5122:	ff 90       	pop	r15
    5124:	ef 90       	pop	r14
    5126:	df 90       	pop	r13
    5128:	08 95       	ret

0000512a <_ZN10W5500Class4readEjh>:
    512a:	1f 93       	push	r17
    512c:	cf 93       	push	r28
    512e:	df 93       	push	r29
    5130:	d8 2f       	mov	r29, r24
    5132:	19 2f       	mov	r17, r25
    5134:	c6 2f       	mov	r28, r22
    5136:	80 91 89 0c 	lds	r24, 0x0C89	; 0x800c89 <wiznet_SPI_settings>
    513a:	90 91 8a 0c 	lds	r25, 0x0C8A	; 0x800c8a <wiznet_SPI_settings+0x1>
    513e:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <_ZN8SPIClass16beginTransactionE11SPISettings>
    5142:	a1 df       	rcall	.-190    	; 0x5086 <_ZN10W5500Class5setSSEv>
    5144:	81 2f       	mov	r24, r17
    5146:	98 df       	rcall	.-208    	; 0x5078 <_ZN8SPIClass8transferEh>
    5148:	8d 2f       	mov	r24, r29
    514a:	96 df       	rcall	.-212    	; 0x5078 <_ZN8SPIClass8transferEh>
    514c:	8c 2f       	mov	r24, r28
    514e:	94 df       	rcall	.-216    	; 0x5078 <_ZN8SPIClass8transferEh>
    5150:	80 e0       	ldi	r24, 0x00	; 0
    5152:	92 df       	rcall	.-220    	; 0x5078 <_ZN8SPIClass8transferEh>
    5154:	c8 2f       	mov	r28, r24
    5156:	99 df       	rcall	.-206    	; 0x508a <_ZN10W5500Class7resetSSEv>
    5158:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <_ZN8SPIClass14endTransactionEv>
    515c:	8c 2f       	mov	r24, r28
    515e:	df 91       	pop	r29
    5160:	cf 91       	pop	r28
    5162:	1f 91       	pop	r17
    5164:	08 95       	ret

00005166 <_ZN10W5500Class4initEh>:
    5166:	cf 93       	push	r28
    5168:	df 93       	push	r29
    516a:	60 93 88 0c 	sts	0x0C88, r22	; 0x800c88 <SPI_CS>
    516e:	68 ee       	ldi	r22, 0xE8	; 232
    5170:	73 e0       	ldi	r23, 0x03	; 3
    5172:	80 e0       	ldi	r24, 0x00	; 0
    5174:	90 e0       	ldi	r25, 0x00	; 0
    5176:	0e 94 5f 3c 	call	0x78be	; 0x78be <delay>
    517a:	3c 9a       	sbi	0x07, 4	; 7
    517c:	0e 94 b3 34 	call	0x6966	; 0x6966 <_ZN8SPIClass5beginEv>
    5180:	60 e0       	ldi	r22, 0x00	; 0
    5182:	80 e0       	ldi	r24, 0x00	; 0
    5184:	90 e0       	ldi	r25, 0x00	; 0
    5186:	d1 df       	rcall	.-94     	; 0x512a <_ZN10W5500Class4readEjh>
    5188:	48 2f       	mov	r20, r24
    518a:	40 68       	ori	r20, 0x80	; 128
    518c:	64 e0       	ldi	r22, 0x04	; 4
    518e:	80 e0       	ldi	r24, 0x00	; 0
    5190:	90 e0       	ldi	r25, 0x00	; 0
    5192:	7d df       	rcall	.-262    	; 0x508e <_ZN10W5500Class5writeEjhh>
    5194:	c0 e0       	ldi	r28, 0x00	; 0
    5196:	dc 2f       	mov	r29, r28
    5198:	d2 95       	swap	r29
    519a:	dd 0f       	add	r29, r29
    519c:	d0 7e       	andi	r29, 0xE0	; 224
    519e:	d4 5f       	subi	r29, 0xF4	; 244
    51a0:	42 e0       	ldi	r20, 0x02	; 2
    51a2:	6d 2f       	mov	r22, r29
    51a4:	8e e1       	ldi	r24, 0x1E	; 30
    51a6:	90 e0       	ldi	r25, 0x00	; 0
    51a8:	72 df       	rcall	.-284    	; 0x508e <_ZN10W5500Class5writeEjhh>
    51aa:	42 e0       	ldi	r20, 0x02	; 2
    51ac:	6d 2f       	mov	r22, r29
    51ae:	8f e1       	ldi	r24, 0x1F	; 31
    51b0:	90 e0       	ldi	r25, 0x00	; 0
    51b2:	6d df       	rcall	.-294    	; 0x508e <_ZN10W5500Class5writeEjhh>
    51b4:	cf 5f       	subi	r28, 0xFF	; 255
    51b6:	c8 30       	cpi	r28, 0x08	; 8
    51b8:	71 f7       	brne	.-36     	; 0x5196 <_ZN10W5500Class4initEh+0x30>
    51ba:	df 91       	pop	r29
    51bc:	cf 91       	pop	r28
    51be:	08 95       	ret

000051c0 <_ZN10W5500Class12readSnTX_FSREh>:
    51c0:	1f 93       	push	r17
    51c2:	cf 93       	push	r28
    51c4:	df 93       	push	r29
    51c6:	18 2f       	mov	r17, r24
    51c8:	60 e2       	ldi	r22, 0x20	; 32
    51ca:	70 e0       	ldi	r23, 0x00	; 0
    51cc:	98 dd       	rcall	.-1232   	; 0x4cfe <_ZN10W5500Class6readSnEhj>
    51ce:	c8 2f       	mov	r28, r24
    51d0:	d0 e0       	ldi	r29, 0x00	; 0
    51d2:	dc 2f       	mov	r29, r28
    51d4:	cc 27       	eor	r28, r28
    51d6:	61 e2       	ldi	r22, 0x21	; 33
    51d8:	70 e0       	ldi	r23, 0x00	; 0
    51da:	81 2f       	mov	r24, r17
    51dc:	90 dd       	rcall	.-1248   	; 0x4cfe <_ZN10W5500Class6readSnEhj>
    51de:	9e 01       	movw	r18, r28
    51e0:	28 0f       	add	r18, r24
    51e2:	31 1d       	adc	r19, r1
    51e4:	c9 01       	movw	r24, r18
    51e6:	df 91       	pop	r29
    51e8:	cf 91       	pop	r28
    51ea:	1f 91       	pop	r17
    51ec:	08 95       	ret

000051ee <_ZN10W5500Class13getTXFreeSizeEh>:
    51ee:	ff 92       	push	r15
    51f0:	0f 93       	push	r16
    51f2:	1f 93       	push	r17
    51f4:	cf 93       	push	r28
    51f6:	df 93       	push	r29
    51f8:	f6 2e       	mov	r15, r22
    51fa:	c0 e0       	ldi	r28, 0x00	; 0
    51fc:	d0 e0       	ldi	r29, 0x00	; 0
    51fe:	8f 2d       	mov	r24, r15
    5200:	df df       	rcall	.-66     	; 0x51c0 <_ZN10W5500Class12readSnTX_FSREh>
    5202:	8c 01       	movw	r16, r24
    5204:	89 2b       	or	r24, r25
    5206:	19 f0       	breq	.+6      	; 0x520e <_ZN10W5500Class13getTXFreeSizeEh+0x20>
    5208:	8f 2d       	mov	r24, r15
    520a:	da df       	rcall	.-76     	; 0x51c0 <_ZN10W5500Class12readSnTX_FSREh>
    520c:	ec 01       	movw	r28, r24
    520e:	c0 17       	cp	r28, r16
    5210:	d1 07       	cpc	r29, r17
    5212:	a9 f7       	brne	.-22     	; 0x51fe <_ZN10W5500Class13getTXFreeSizeEh+0x10>
    5214:	ce 01       	movw	r24, r28
    5216:	df 91       	pop	r29
    5218:	cf 91       	pop	r28
    521a:	1f 91       	pop	r17
    521c:	0f 91       	pop	r16
    521e:	ff 90       	pop	r15
    5220:	08 95       	ret

00005222 <_ZN10W5500Class12readSnRX_RSREh>:
    5222:	1f 93       	push	r17
    5224:	cf 93       	push	r28
    5226:	df 93       	push	r29
    5228:	18 2f       	mov	r17, r24
    522a:	66 e2       	ldi	r22, 0x26	; 38
    522c:	70 e0       	ldi	r23, 0x00	; 0
    522e:	67 dd       	rcall	.-1330   	; 0x4cfe <_ZN10W5500Class6readSnEhj>
    5230:	c8 2f       	mov	r28, r24
    5232:	d0 e0       	ldi	r29, 0x00	; 0
    5234:	dc 2f       	mov	r29, r28
    5236:	cc 27       	eor	r28, r28
    5238:	67 e2       	ldi	r22, 0x27	; 39
    523a:	70 e0       	ldi	r23, 0x00	; 0
    523c:	81 2f       	mov	r24, r17
    523e:	5f dd       	rcall	.-1346   	; 0x4cfe <_ZN10W5500Class6readSnEhj>
    5240:	9e 01       	movw	r18, r28
    5242:	28 0f       	add	r18, r24
    5244:	31 1d       	adc	r19, r1
    5246:	c9 01       	movw	r24, r18
    5248:	df 91       	pop	r29
    524a:	cf 91       	pop	r28
    524c:	1f 91       	pop	r17
    524e:	08 95       	ret

00005250 <_ZN10W5500Class17getRXReceivedSizeEh>:
    5250:	ff 92       	push	r15
    5252:	0f 93       	push	r16
    5254:	1f 93       	push	r17
    5256:	cf 93       	push	r28
    5258:	df 93       	push	r29
    525a:	f6 2e       	mov	r15, r22
    525c:	c0 e0       	ldi	r28, 0x00	; 0
    525e:	d0 e0       	ldi	r29, 0x00	; 0
    5260:	8f 2d       	mov	r24, r15
    5262:	df df       	rcall	.-66     	; 0x5222 <_ZN10W5500Class12readSnRX_RSREh>
    5264:	8c 01       	movw	r16, r24
    5266:	89 2b       	or	r24, r25
    5268:	19 f0       	breq	.+6      	; 0x5270 <_ZN10W5500Class17getRXReceivedSizeEh+0x20>
    526a:	8f 2d       	mov	r24, r15
    526c:	da df       	rcall	.-76     	; 0x5222 <_ZN10W5500Class12readSnRX_RSREh>
    526e:	ec 01       	movw	r28, r24
    5270:	c0 17       	cp	r28, r16
    5272:	d1 07       	cpc	r29, r17
    5274:	a9 f7       	brne	.-22     	; 0x5260 <_ZN10W5500Class17getRXReceivedSizeEh+0x10>
    5276:	ce 01       	movw	r24, r28
    5278:	df 91       	pop	r29
    527a:	cf 91       	pop	r28
    527c:	1f 91       	pop	r17
    527e:	0f 91       	pop	r16
    5280:	ff 90       	pop	r15
    5282:	08 95       	ret

00005284 <_ZN10W5500Class27send_data_processing_offsetEhjPKhj>:
    5284:	af 92       	push	r10
    5286:	bf 92       	push	r11
    5288:	df 92       	push	r13
    528a:	ef 92       	push	r14
    528c:	ff 92       	push	r15
    528e:	0f 93       	push	r16
    5290:	1f 93       	push	r17
    5292:	cf 93       	push	r28
    5294:	df 93       	push	r29
    5296:	d6 2e       	mov	r13, r22
    5298:	7a 01       	movw	r14, r20
    529a:	59 01       	movw	r10, r18
    529c:	64 e2       	ldi	r22, 0x24	; 36
    529e:	70 e0       	ldi	r23, 0x00	; 0
    52a0:	8d 2d       	mov	r24, r13
    52a2:	2d dd       	rcall	.-1446   	; 0x4cfe <_ZN10W5500Class6readSnEhj>
    52a4:	c8 2f       	mov	r28, r24
    52a6:	65 e2       	ldi	r22, 0x25	; 37
    52a8:	70 e0       	ldi	r23, 0x00	; 0
    52aa:	8d 2d       	mov	r24, r13
    52ac:	28 dd       	rcall	.-1456   	; 0x4cfe <_ZN10W5500Class6readSnEhj>
    52ae:	d0 e0       	ldi	r29, 0x00	; 0
    52b0:	dc 2f       	mov	r29, r28
    52b2:	cc 27       	eor	r28, r28
    52b4:	e8 0e       	add	r14, r24
    52b6:	f1 1c       	adc	r15, r1
    52b8:	ce 0d       	add	r28, r14
    52ba:	df 1d       	adc	r29, r15
    52bc:	6d 2d       	mov	r22, r13
    52be:	62 95       	swap	r22
    52c0:	66 0f       	add	r22, r22
    52c2:	60 7e       	andi	r22, 0xE0	; 224
    52c4:	6c 5e       	subi	r22, 0xEC	; 236
    52c6:	98 01       	movw	r18, r16
    52c8:	a5 01       	movw	r20, r10
    52ca:	ce 01       	movw	r24, r28
    52cc:	00 df       	rcall	.-512    	; 0x50ce <_ZN10W5500Class5writeEjhPKhj>
    52ce:	c0 0f       	add	r28, r16
    52d0:	d1 1f       	adc	r29, r17
    52d2:	4d 2f       	mov	r20, r29
    52d4:	64 e2       	ldi	r22, 0x24	; 36
    52d6:	70 e0       	ldi	r23, 0x00	; 0
    52d8:	8d 2d       	mov	r24, r13
    52da:	1c dd       	rcall	.-1480   	; 0x4d14 <_ZN10W5500Class7writeSnEhjh>
    52dc:	4c 2f       	mov	r20, r28
    52de:	65 e2       	ldi	r22, 0x25	; 37
    52e0:	70 e0       	ldi	r23, 0x00	; 0
    52e2:	8d 2d       	mov	r24, r13
    52e4:	df 91       	pop	r29
    52e6:	cf 91       	pop	r28
    52e8:	1f 91       	pop	r17
    52ea:	0f 91       	pop	r16
    52ec:	ff 90       	pop	r15
    52ee:	ef 90       	pop	r14
    52f0:	df 90       	pop	r13
    52f2:	bf 90       	pop	r11
    52f4:	af 90       	pop	r10
    52f6:	0e cd       	rjmp	.-1508   	; 0x4d14 <_ZN10W5500Class7writeSnEhjh>

000052f8 <_ZN10W5500Class20send_data_processingEhPKhj>:
    52f8:	0f 93       	push	r16
    52fa:	1f 93       	push	r17
    52fc:	89 01       	movw	r16, r18
    52fe:	9a 01       	movw	r18, r20
    5300:	40 e0       	ldi	r20, 0x00	; 0
    5302:	50 e0       	ldi	r21, 0x00	; 0
    5304:	bf df       	rcall	.-130    	; 0x5284 <_ZN10W5500Class27send_data_processing_offsetEhjPKhj>
    5306:	1f 91       	pop	r17
    5308:	0f 91       	pop	r16
    530a:	08 95       	ret

0000530c <_ZN10W5500Class4readEjhPhj>:
    530c:	df 92       	push	r13
    530e:	ef 92       	push	r14
    5310:	ff 92       	push	r15
    5312:	0f 93       	push	r16
    5314:	1f 93       	push	r17
    5316:	cf 93       	push	r28
    5318:	df 93       	push	r29
    531a:	d8 2f       	mov	r29, r24
    531c:	d9 2e       	mov	r13, r25
    531e:	c6 2f       	mov	r28, r22
    5320:	7a 01       	movw	r14, r20
    5322:	89 01       	movw	r16, r18
    5324:	80 91 89 0c 	lds	r24, 0x0C89	; 0x800c89 <wiznet_SPI_settings>
    5328:	90 91 8a 0c 	lds	r25, 0x0C8A	; 0x800c8a <wiznet_SPI_settings+0x1>
    532c:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <_ZN8SPIClass16beginTransactionE11SPISettings>
    5330:	aa de       	rcall	.-684    	; 0x5086 <_ZN10W5500Class5setSSEv>
    5332:	8d 2d       	mov	r24, r13
    5334:	a1 de       	rcall	.-702    	; 0x5078 <_ZN8SPIClass8transferEh>
    5336:	8d 2f       	mov	r24, r29
    5338:	9f de       	rcall	.-706    	; 0x5078 <_ZN8SPIClass8transferEh>
    533a:	8c 2f       	mov	r24, r28
    533c:	9d de       	rcall	.-710    	; 0x5078 <_ZN8SPIClass8transferEh>
    533e:	e7 01       	movw	r28, r14
    5340:	e0 0e       	add	r14, r16
    5342:	f1 1e       	adc	r15, r17
    5344:	ce 15       	cp	r28, r14
    5346:	df 05       	cpc	r29, r15
    5348:	21 f0       	breq	.+8      	; 0x5352 <_ZN10W5500Class4readEjhPhj+0x46>
    534a:	80 e0       	ldi	r24, 0x00	; 0
    534c:	95 de       	rcall	.-726    	; 0x5078 <_ZN8SPIClass8transferEh>
    534e:	89 93       	st	Y+, r24
    5350:	f9 cf       	rjmp	.-14     	; 0x5344 <_ZN10W5500Class4readEjhPhj+0x38>
    5352:	9b de       	rcall	.-714    	; 0x508a <_ZN10W5500Class7resetSSEv>
    5354:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <_ZN8SPIClass14endTransactionEv>
    5358:	c8 01       	movw	r24, r16
    535a:	df 91       	pop	r29
    535c:	cf 91       	pop	r28
    535e:	1f 91       	pop	r17
    5360:	0f 91       	pop	r16
    5362:	ff 90       	pop	r15
    5364:	ef 90       	pop	r14
    5366:	df 90       	pop	r13
    5368:	08 95       	ret

0000536a <_ZN10W5500Class9read_dataEhjPVhj>:
    536a:	0f 93       	push	r16
    536c:	1f 93       	push	r17
    536e:	cf 93       	push	r28
    5370:	df 93       	push	r29
    5372:	00 d0       	rcall	.+0      	; 0x5374 <_ZN10W5500Class9read_dataEhjPVhj+0xa>
    5374:	cd b7       	in	r28, 0x3d	; 61
    5376:	de b7       	in	r29, 0x3e	; 62
    5378:	5a 83       	std	Y+2, r21	; 0x02
    537a:	49 83       	std	Y+1, r20	; 0x01
    537c:	a9 01       	movw	r20, r18
    537e:	98 01       	movw	r18, r16
    5380:	89 81       	ldd	r24, Y+1	; 0x01
    5382:	9a 81       	ldd	r25, Y+2	; 0x02
    5384:	62 95       	swap	r22
    5386:	66 0f       	add	r22, r22
    5388:	60 7e       	andi	r22, 0xE0	; 224
    538a:	68 5e       	subi	r22, 0xE8	; 232
    538c:	0f 90       	pop	r0
    538e:	0f 90       	pop	r0
    5390:	df 91       	pop	r29
    5392:	cf 91       	pop	r28
    5394:	1f 91       	pop	r17
    5396:	0f 91       	pop	r16
    5398:	b9 cf       	rjmp	.-142    	; 0x530c <_ZN10W5500Class4readEjhPhj>

0000539a <_ZN10W5500Class20recv_data_processingEhPhjh>:
    539a:	8f 92       	push	r8
    539c:	9f 92       	push	r9
    539e:	af 92       	push	r10
    53a0:	bf 92       	push	r11
    53a2:	cf 92       	push	r12
    53a4:	df 92       	push	r13
    53a6:	ef 92       	push	r14
    53a8:	ff 92       	push	r15
    53aa:	0f 93       	push	r16
    53ac:	1f 93       	push	r17
    53ae:	cf 93       	push	r28
    53b0:	df 93       	push	r29
    53b2:	6c 01       	movw	r12, r24
    53b4:	96 2e       	mov	r9, r22
    53b6:	5a 01       	movw	r10, r20
    53b8:	79 01       	movw	r14, r18
    53ba:	80 2e       	mov	r8, r16
    53bc:	68 e2       	ldi	r22, 0x28	; 40
    53be:	70 e0       	ldi	r23, 0x00	; 0
    53c0:	89 2d       	mov	r24, r9
    53c2:	9d dc       	rcall	.-1734   	; 0x4cfe <_ZN10W5500Class6readSnEhj>
    53c4:	08 2f       	mov	r16, r24
    53c6:	69 e2       	ldi	r22, 0x29	; 41
    53c8:	70 e0       	ldi	r23, 0x00	; 0
    53ca:	89 2d       	mov	r24, r9
    53cc:	98 dc       	rcall	.-1744   	; 0x4cfe <_ZN10W5500Class6readSnEhj>
    53ce:	10 e0       	ldi	r17, 0x00	; 0
    53d0:	10 2f       	mov	r17, r16
    53d2:	00 27       	eor	r16, r16
    53d4:	e8 01       	movw	r28, r16
    53d6:	c8 0f       	add	r28, r24
    53d8:	d1 1d       	adc	r29, r1
    53da:	87 01       	movw	r16, r14
    53dc:	95 01       	movw	r18, r10
    53de:	ae 01       	movw	r20, r28
    53e0:	69 2d       	mov	r22, r9
    53e2:	c6 01       	movw	r24, r12
    53e4:	c2 df       	rcall	.-124    	; 0x536a <_ZN10W5500Class9read_dataEhjPVhj>
    53e6:	81 10       	cpse	r8, r1
    53e8:	18 c0       	rjmp	.+48     	; 0x541a <_ZN10W5500Class20recv_data_processingEhPhjh+0x80>
    53ea:	0c 0f       	add	r16, r28
    53ec:	1d 1f       	adc	r17, r29
    53ee:	41 2f       	mov	r20, r17
    53f0:	68 e2       	ldi	r22, 0x28	; 40
    53f2:	70 e0       	ldi	r23, 0x00	; 0
    53f4:	89 2d       	mov	r24, r9
    53f6:	8e dc       	rcall	.-1764   	; 0x4d14 <_ZN10W5500Class7writeSnEhjh>
    53f8:	40 2f       	mov	r20, r16
    53fa:	69 e2       	ldi	r22, 0x29	; 41
    53fc:	70 e0       	ldi	r23, 0x00	; 0
    53fe:	89 2d       	mov	r24, r9
    5400:	df 91       	pop	r29
    5402:	cf 91       	pop	r28
    5404:	1f 91       	pop	r17
    5406:	0f 91       	pop	r16
    5408:	ff 90       	pop	r15
    540a:	ef 90       	pop	r14
    540c:	df 90       	pop	r13
    540e:	cf 90       	pop	r12
    5410:	bf 90       	pop	r11
    5412:	af 90       	pop	r10
    5414:	9f 90       	pop	r9
    5416:	8f 90       	pop	r8
    5418:	7d cc       	rjmp	.-1798   	; 0x4d14 <_ZN10W5500Class7writeSnEhjh>
    541a:	df 91       	pop	r29
    541c:	cf 91       	pop	r28
    541e:	1f 91       	pop	r17
    5420:	0f 91       	pop	r16
    5422:	ff 90       	pop	r15
    5424:	ef 90       	pop	r14
    5426:	df 90       	pop	r13
    5428:	cf 90       	pop	r12
    542a:	bf 90       	pop	r11
    542c:	af 90       	pop	r10
    542e:	9f 90       	pop	r9
    5430:	8f 90       	pop	r8
    5432:	08 95       	ret

00005434 <_ZN10W5500Class9execCmdSnEh7SockCMD>:
    5434:	cf 93       	push	r28
    5436:	c6 2f       	mov	r28, r22
    5438:	61 e0       	ldi	r22, 0x01	; 1
    543a:	70 e0       	ldi	r23, 0x00	; 0
    543c:	8c 2f       	mov	r24, r28
    543e:	6a dc       	rcall	.-1836   	; 0x4d14 <_ZN10W5500Class7writeSnEhjh>
    5440:	61 e0       	ldi	r22, 0x01	; 1
    5442:	70 e0       	ldi	r23, 0x00	; 0
    5444:	8c 2f       	mov	r24, r28
    5446:	5b dc       	rcall	.-1866   	; 0x4cfe <_ZN10W5500Class6readSnEhj>
    5448:	81 11       	cpse	r24, r1
    544a:	fa cf       	rjmp	.-12     	; 0x5440 <_ZN10W5500Class9execCmdSnEh7SockCMD+0xc>
    544c:	cf 91       	pop	r28
    544e:	08 95       	ret

00005450 <_GLOBAL__sub_I_w5500>:
    // Invert the SPI2X bit
    clockDiv ^= 0x1;

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    5450:	e9 e8       	ldi	r30, 0x89	; 137
    5452:	fc e0       	ldi	r31, 0x0C	; 12
    5454:	80 e5       	ldi	r24, 0x50	; 80
    5456:	80 83       	st	Z, r24
    spsr = clockDiv & SPI_2XCLOCK_MASK;
    5458:	81 e0       	ldi	r24, 0x01	; 1
    545a:	81 83       	std	Z+1, r24	; 0x01
    545c:	08 95       	ret

0000545e <_ZN5I2CIOC1Ev>:
      // Remove the values which are not inputs and get the value of the pin
      pinVal = this->read() & _dirMask;
      pinVal = ( pinVal >> pin ) & 0x01; // Get the pin value
   }
   return (pinVal);
}
    545e:	fc 01       	movw	r30, r24
    5460:	12 82       	std	Z+2, r1	; 0x02
    5462:	8f ef       	ldi	r24, 0xFF	; 255
    5464:	81 83       	std	Z+1, r24	; 0x01
    5466:	10 82       	st	Z, r1
    5468:	13 82       	std	Z+3, r1	; 0x03
    546a:	08 95       	ret

0000546c <_ZN5I2CIO8portModeEh>:
    546c:	fc 01       	movw	r30, r24
    546e:	83 81       	ldd	r24, Z+3	; 0x03
    5470:	88 23       	and	r24, r24
    5472:	31 f0       	breq	.+12     	; 0x5480 <_ZN5I2CIO8portModeEh+0x14>
    5474:	61 11       	cpse	r22, r1
    5476:	03 c0       	rjmp	.+6      	; 0x547e <_ZN5I2CIO8portModeEh+0x12>
    5478:	8f ef       	ldi	r24, 0xFF	; 255
    547a:	81 83       	std	Z+1, r24	; 0x01
    547c:	08 95       	ret
    547e:	11 82       	std	Z+1, r1	; 0x01
    5480:	08 95       	ret

00005482 <_ZN5I2CIO11isAvailableEh>:
    5482:	8f ef       	ldi	r24, 0xFF	; 255
    5484:	9c e0       	ldi	r25, 0x0C	; 12
    5486:	0e 94 15 38 	call	0x702a	; 0x702a <_ZN7TwoWire17beginTransmissionEh>
    548a:	8f ef       	ldi	r24, 0xFF	; 255
    548c:	9c e0       	ldi	r25, 0x0C	; 12
    548e:	0e 94 96 38 	call	0x712c	; 0x712c <_ZN7TwoWire15endTransmissionEv>
    5492:	91 e0       	ldi	r25, 0x01	; 1
    5494:	81 11       	cpse	r24, r1
    5496:	90 e0       	ldi	r25, 0x00	; 0
    5498:	89 2f       	mov	r24, r25
    549a:	08 95       	ret

0000549c <_ZN5I2CIO5beginEh>:
    549c:	cf 93       	push	r28
    549e:	df 93       	push	r29
    54a0:	ec 01       	movw	r28, r24
    54a2:	6a 83       	std	Y+2, r22	; 0x02
    54a4:	8f ef       	ldi	r24, 0xFF	; 255
    54a6:	9c e0       	ldi	r25, 0x0C	; 12
    54a8:	0e 94 02 38 	call	0x7004	; 0x7004 <_ZN7TwoWire5beginEv>
    54ac:	6a 81       	ldd	r22, Y+2	; 0x02
    54ae:	ce 01       	movw	r24, r28
    54b0:	e8 df       	rcall	.-48     	; 0x5482 <_ZN5I2CIO11isAvailableEh>
    54b2:	8b 83       	std	Y+3, r24	; 0x03
    54b4:	88 23       	and	r24, r24
    54b6:	29 f0       	breq	.+10     	; 0x54c2 <_ZN5I2CIO5beginEh+0x26>
    54b8:	8f ef       	ldi	r24, 0xFF	; 255
    54ba:	9c e0       	ldi	r25, 0x0C	; 12
    54bc:	0e 94 3e 37 	call	0x6e7c	; 0x6e7c <_ZN7TwoWire4readEv>
    54c0:	88 83       	st	Y, r24
    54c2:	8b 81       	ldd	r24, Y+3	; 0x03
    54c4:	90 e0       	ldi	r25, 0x00	; 0
    54c6:	df 91       	pop	r29
    54c8:	cf 91       	pop	r28
    54ca:	08 95       	ret

000054cc <_ZN5I2CIO5writeEh>:
}

//
// write
int I2CIO::write ( uint8_t value )
{
    54cc:	cf 93       	push	r28
    54ce:	df 93       	push	r29
   int status = 0;
   
   if ( _initialised )
    54d0:	fc 01       	movw	r30, r24
    54d2:	23 81       	ldd	r18, Z+3	; 0x03
    54d4:	22 23       	and	r18, r18
    54d6:	b1 f0       	breq	.+44     	; 0x5504 <_ZN5I2CIO5writeEh+0x38>
    54d8:	ec 01       	movw	r28, r24
   {
      // Only write HIGH the values of the ports that have been initialised as
      // outputs updating the output shadow of the device
      _shadow = ( value & ~(_dirMask) );
    54da:	81 81       	ldd	r24, Z+1	; 0x01
    54dc:	80 95       	com	r24
    54de:	68 23       	and	r22, r24
    54e0:	60 83       	st	Z, r22
   
      Wire.beginTransmission ( _i2cAddr );
    54e2:	62 81       	ldd	r22, Z+2	; 0x02
    54e4:	8f ef       	ldi	r24, 0xFF	; 255
    54e6:	9c e0       	ldi	r25, 0x0C	; 12
    54e8:	0e 94 15 38 	call	0x702a	; 0x702a <_ZN7TwoWire17beginTransmissionEh>
#if (ARDUINO <  100)
      Wire.send ( _shadow );
#else
      Wire.write ( _shadow );
    54ec:	68 81       	ld	r22, Y
    54ee:	8f ef       	ldi	r24, 0xFF	; 255
    54f0:	9c e0       	ldi	r25, 0x0C	; 12
    54f2:	0e 94 c4 37 	call	0x6f88	; 0x6f88 <_ZN7TwoWire5writeEh>
#endif  
      status = Wire.endTransmission ();
    54f6:	8f ef       	ldi	r24, 0xFF	; 255
    54f8:	9c e0       	ldi	r25, 0x0C	; 12
    54fa:	0e 94 96 38 	call	0x712c	; 0x712c <_ZN7TwoWire15endTransmissionEv>
    54fe:	28 2f       	mov	r18, r24
    5500:	30 e0       	ldi	r19, 0x00	; 0
    5502:	02 c0       	rjmp	.+4      	; 0x5508 <_ZN5I2CIO5writeEh+0x3c>

//
// write
int I2CIO::write ( uint8_t value )
{
   int status = 0;
    5504:	20 e0       	ldi	r18, 0x00	; 0
    5506:	30 e0       	ldi	r19, 0x00	; 0
#else
      Wire.write ( _shadow );
#endif  
      status = Wire.endTransmission ();
   }
   return ( (status == 0) );
    5508:	81 e0       	ldi	r24, 0x01	; 1
    550a:	90 e0       	ldi	r25, 0x00	; 0
    550c:	23 2b       	or	r18, r19
    550e:	11 f0       	breq	.+4      	; 0x5514 <_ZN5I2CIO5writeEh+0x48>
    5510:	80 e0       	ldi	r24, 0x00	; 0
    5512:	90 e0       	ldi	r25, 0x00	; 0
}
    5514:	df 91       	pop	r29
    5516:	cf 91       	pop	r28
    5518:	08 95       	ret

0000551a <_ZN3LCD15setBacklightPinEh13t_backlighPol>:

// This will 'left justify' text from the cursor
void LCD::noAutoscroll(void) 
{
   _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
   command(LCD_ENTRYMODESET | _displaymode);
    551a:	08 95       	ret

0000551c <_ZN3LCD12setBacklightEh>:
    551c:	08 95       	ret

0000551e <_ZN3LCD5writeEh>:
    551e:	dc 01       	movw	r26, r24
    5520:	ed 91       	ld	r30, X+
    5522:	fc 91       	ld	r31, X
    5524:	06 84       	ldd	r0, Z+14	; 0x0e
    5526:	f7 85       	ldd	r31, Z+15	; 0x0f
    5528:	e0 2d       	mov	r30, r0
    552a:	41 e0       	ldi	r20, 0x01	; 1
    552c:	09 95       	icall
    552e:	81 e0       	ldi	r24, 0x01	; 1
    5530:	90 e0       	ldi	r25, 0x00	; 0
    5532:	08 95       	ret

00005534 <_ZN3LCDC1Ev>:
    5534:	fc 01       	movw	r30, r24
    5536:	13 82       	std	Z+3, r1	; 0x03
    5538:	12 82       	std	Z+2, r1	; 0x02
    553a:	27 e2       	ldi	r18, 0x27	; 39
    553c:	39 e0       	ldi	r19, 0x09	; 9
    553e:	31 83       	std	Z+1, r19	; 0x01
    5540:	20 83       	st	Z, r18
    5542:	08 95       	ret

00005544 <_ZN3LCD9backlightEv>:
    5544:	dc 01       	movw	r26, r24
    5546:	ed 91       	ld	r30, X+
    5548:	fc 91       	ld	r31, X
    554a:	04 84       	ldd	r0, Z+12	; 0x0c
    554c:	f5 85       	ldd	r31, Z+13	; 0x0d
    554e:	e0 2d       	mov	r30, r0
    5550:	6f ef       	ldi	r22, 0xFF	; 255
    5552:	09 94       	ijmp

00005554 <_ZN3LCD11noBacklightEv>:
    5554:	dc 01       	movw	r26, r24
    5556:	ed 91       	ld	r30, X+
    5558:	fc 91       	ld	r31, X
    555a:	04 84       	ldd	r0, Z+12	; 0x0c
    555c:	f5 85       	ldd	r31, Z+13	; 0x0d
    555e:	e0 2d       	mov	r30, r0
    5560:	60 e0       	ldi	r22, 0x00	; 0
    5562:	09 94       	ijmp

00005564 <_ZN3LCD7commandEh>:
    5564:	dc 01       	movw	r26, r24
    5566:	ed 91       	ld	r30, X+
    5568:	fc 91       	ld	r31, X
    556a:	06 84       	ldd	r0, Z+14	; 0x0e
    556c:	f7 85       	ldd	r31, Z+15	; 0x0f
    556e:	e0 2d       	mov	r30, r0
    5570:	40 e0       	ldi	r20, 0x00	; 0
    5572:	09 94       	ijmp

00005574 <_ZN3LCD5clearEv>:
    5574:	61 e0       	ldi	r22, 0x01	; 1
    5576:	f6 df       	rcall	.-20     	; 0x5564 <_ZN3LCD7commandEh>
    5578:	80 ed       	ldi	r24, 0xD0	; 208
    557a:	97 e0       	ldi	r25, 0x07	; 7
    557c:	0c 94 98 3c 	jmp	0x7930	; 0x7930 <delayMicroseconds>

00005580 <_ZN3LCD9setCursorEhh>:
    5580:	cf 93       	push	r28
    5582:	df 93       	push	r29
    5584:	cd b7       	in	r28, 0x3d	; 61
    5586:	de b7       	in	r29, 0x3e	; 62
    5588:	28 97       	sbiw	r28, 0x08	; 8
    558a:	0f b6       	in	r0, 0x3f	; 63
    558c:	f8 94       	cli
    558e:	de bf       	out	0x3e, r29	; 62
    5590:	0f be       	out	0x3f, r0	; 63
    5592:	cd bf       	out	0x3d, r28	; 61
    5594:	fc 01       	movw	r30, r24
    5596:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <_ZN14EthernetClient8_srcportE+0x8>
    559a:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <_ZN14EthernetClient8_srcportE+0x9>
    559e:	a0 91 54 01 	lds	r26, 0x0154	; 0x800154 <_ZN14EthernetClient8_srcportE+0xa>
    55a2:	b0 91 55 01 	lds	r27, 0x0155	; 0x800155 <_ZN14EthernetClient8_srcportE+0xb>
    55a6:	8d 83       	std	Y+5, r24	; 0x05
    55a8:	9e 83       	std	Y+6, r25	; 0x06
    55aa:	af 83       	std	Y+7, r26	; 0x07
    55ac:	b8 87       	std	Y+8, r27	; 0x08
    55ae:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <_ZN14EthernetClient8_srcportE+0xc>
    55b2:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <_ZN14EthernetClient8_srcportE+0xd>
    55b6:	a0 91 58 01 	lds	r26, 0x0158	; 0x800158 <_ZN14EthernetClient8_srcportE+0xe>
    55ba:	b0 91 59 01 	lds	r27, 0x0159	; 0x800159 <_ZN14EthernetClient8_srcportE+0xf>
    55be:	89 83       	std	Y+1, r24	; 0x01
    55c0:	9a 83       	std	Y+2, r25	; 0x02
    55c2:	ab 83       	std	Y+3, r26	; 0x03
    55c4:	bc 83       	std	Y+4, r27	; 0x04
    55c6:	87 81       	ldd	r24, Z+7	; 0x07
    55c8:	48 17       	cp	r20, r24
    55ca:	10 f0       	brcs	.+4      	; 0x55d0 <_ZN3LCD9setCursorEhh+0x50>
    55cc:	4f ef       	ldi	r20, 0xFF	; 255
    55ce:	48 0f       	add	r20, r24
    55d0:	90 85       	ldd	r25, Z+8	; 0x08
    55d2:	50 e0       	ldi	r21, 0x00	; 0
    55d4:	de 01       	movw	r26, r28
    55d6:	a4 0f       	add	r26, r20
    55d8:	b5 1f       	adc	r27, r21
    55da:	90 31       	cpi	r25, 0x10	; 16
    55dc:	29 f4       	brne	.+10     	; 0x55e8 <_ZN3LCD9setCursorEhh+0x68>
    55de:	84 30       	cpi	r24, 0x04	; 4
    55e0:	19 f4       	brne	.+6      	; 0x55e8 <_ZN3LCD9setCursorEhh+0x68>
    55e2:	11 96       	adiw	r26, 0x01	; 1
    55e4:	9c 91       	ld	r25, X
    55e6:	02 c0       	rjmp	.+4      	; 0x55ec <_ZN3LCD9setCursorEhh+0x6c>
    55e8:	15 96       	adiw	r26, 0x05	; 5
    55ea:	9c 91       	ld	r25, X
    55ec:	69 0f       	add	r22, r25
    55ee:	60 68       	ori	r22, 0x80	; 128
    55f0:	cf 01       	movw	r24, r30
    55f2:	28 96       	adiw	r28, 0x08	; 8
    55f4:	0f b6       	in	r0, 0x3f	; 63
    55f6:	f8 94       	cli
    55f8:	de bf       	out	0x3e, r29	; 62
    55fa:	0f be       	out	0x3f, r0	; 63
    55fc:	cd bf       	out	0x3d, r28	; 61
    55fe:	df 91       	pop	r29
    5600:	cf 91       	pop	r28
    5602:	b0 cf       	rjmp	.-160    	; 0x5564 <_ZN3LCD7commandEh>

00005604 <_ZN3LCD9noDisplayEv>:
    5604:	fc 01       	movw	r30, r24
    5606:	65 81       	ldd	r22, Z+5	; 0x05
    5608:	6b 7f       	andi	r22, 0xFB	; 251
    560a:	65 83       	std	Z+5, r22	; 0x05
    560c:	68 60       	ori	r22, 0x08	; 8
    560e:	aa cf       	rjmp	.-172    	; 0x5564 <_ZN3LCD7commandEh>

00005610 <_ZN3LCD7displayEv>:
    5610:	fc 01       	movw	r30, r24
    5612:	65 81       	ldd	r22, Z+5	; 0x05
    5614:	26 2f       	mov	r18, r22
    5616:	24 60       	ori	r18, 0x04	; 4
    5618:	25 83       	std	Z+5, r18	; 0x05
    561a:	6c 60       	ori	r22, 0x0C	; 12
    561c:	a3 cf       	rjmp	.-186    	; 0x5564 <_ZN3LCD7commandEh>

0000561e <_ZN3LCD5beginEhhh>:
    561e:	cf 93       	push	r28
    5620:	df 93       	push	r29
    5622:	ec 01       	movw	r28, r24
    5624:	42 30       	cpi	r20, 0x02	; 2
    5626:	18 f0       	brcs	.+6      	; 0x562e <_ZN3LCD5beginEhhh+0x10>
    5628:	8c 81       	ldd	r24, Y+4	; 0x04
    562a:	88 60       	ori	r24, 0x08	; 8
    562c:	8c 83       	std	Y+4, r24	; 0x04
    562e:	4f 83       	std	Y+7, r20	; 0x07
    5630:	68 87       	std	Y+8, r22	; 0x08
    5632:	22 23       	and	r18, r18
    5634:	29 f0       	breq	.+10     	; 0x5640 <_ZN3LCD5beginEhhh+0x22>
    5636:	41 30       	cpi	r20, 0x01	; 1
    5638:	19 f4       	brne	.+6      	; 0x5640 <_ZN3LCD5beginEhhh+0x22>
    563a:	8c 81       	ldd	r24, Y+4	; 0x04
    563c:	84 60       	ori	r24, 0x04	; 4
    563e:	8c 83       	std	Y+4, r24	; 0x04
    5640:	64 e6       	ldi	r22, 0x64	; 100
    5642:	70 e0       	ldi	r23, 0x00	; 0
    5644:	80 e0       	ldi	r24, 0x00	; 0
    5646:	90 e0       	ldi	r25, 0x00	; 0
    5648:	0e 94 5f 3c 	call	0x78be	; 0x78be <delay>
    564c:	6c 81       	ldd	r22, Y+4	; 0x04
    564e:	64 fd       	sbrc	r22, 4
    5650:	31 c0       	rjmp	.+98     	; 0x56b4 <_ZN3LCD5beginEhhh+0x96>
    5652:	e8 81       	ld	r30, Y
    5654:	f9 81       	ldd	r31, Y+1	; 0x01
    5656:	06 84       	ldd	r0, Z+14	; 0x0e
    5658:	f7 85       	ldd	r31, Z+15	; 0x0f
    565a:	e0 2d       	mov	r30, r0
    565c:	42 e0       	ldi	r20, 0x02	; 2
    565e:	63 e0       	ldi	r22, 0x03	; 3
    5660:	ce 01       	movw	r24, r28
    5662:	09 95       	icall
    5664:	84 e9       	ldi	r24, 0x94	; 148
    5666:	91 e1       	ldi	r25, 0x11	; 17
    5668:	0e 94 98 3c 	call	0x7930	; 0x7930 <delayMicroseconds>
    566c:	e8 81       	ld	r30, Y
    566e:	f9 81       	ldd	r31, Y+1	; 0x01
    5670:	06 84       	ldd	r0, Z+14	; 0x0e
    5672:	f7 85       	ldd	r31, Z+15	; 0x0f
    5674:	e0 2d       	mov	r30, r0
    5676:	42 e0       	ldi	r20, 0x02	; 2
    5678:	63 e0       	ldi	r22, 0x03	; 3
    567a:	ce 01       	movw	r24, r28
    567c:	09 95       	icall
    567e:	86 e9       	ldi	r24, 0x96	; 150
    5680:	90 e0       	ldi	r25, 0x00	; 0
    5682:	0e 94 98 3c 	call	0x7930	; 0x7930 <delayMicroseconds>
    5686:	e8 81       	ld	r30, Y
    5688:	f9 81       	ldd	r31, Y+1	; 0x01
    568a:	06 84       	ldd	r0, Z+14	; 0x0e
    568c:	f7 85       	ldd	r31, Z+15	; 0x0f
    568e:	e0 2d       	mov	r30, r0
    5690:	42 e0       	ldi	r20, 0x02	; 2
    5692:	63 e0       	ldi	r22, 0x03	; 3
    5694:	ce 01       	movw	r24, r28
    5696:	09 95       	icall
    5698:	86 e9       	ldi	r24, 0x96	; 150
    569a:	90 e0       	ldi	r25, 0x00	; 0
    569c:	0e 94 98 3c 	call	0x7930	; 0x7930 <delayMicroseconds>
    56a0:	e8 81       	ld	r30, Y
    56a2:	f9 81       	ldd	r31, Y+1	; 0x01
    56a4:	06 84       	ldd	r0, Z+14	; 0x0e
    56a6:	f7 85       	ldd	r31, Z+15	; 0x0f
    56a8:	e0 2d       	mov	r30, r0
    56aa:	42 e0       	ldi	r20, 0x02	; 2
    56ac:	62 e0       	ldi	r22, 0x02	; 2
    56ae:	ce 01       	movw	r24, r28
    56b0:	09 95       	icall
    56b2:	13 c0       	rjmp	.+38     	; 0x56da <_ZN3LCD5beginEhhh+0xbc>
    56b4:	60 62       	ori	r22, 0x20	; 32
    56b6:	ce 01       	movw	r24, r28
    56b8:	55 df       	rcall	.-342    	; 0x5564 <_ZN3LCD7commandEh>
    56ba:	84 e9       	ldi	r24, 0x94	; 148
    56bc:	91 e1       	ldi	r25, 0x11	; 17
    56be:	0e 94 98 3c 	call	0x7930	; 0x7930 <delayMicroseconds>
    56c2:	6c 81       	ldd	r22, Y+4	; 0x04
    56c4:	60 62       	ori	r22, 0x20	; 32
    56c6:	ce 01       	movw	r24, r28
    56c8:	4d df       	rcall	.-358    	; 0x5564 <_ZN3LCD7commandEh>
    56ca:	86 e9       	ldi	r24, 0x96	; 150
    56cc:	90 e0       	ldi	r25, 0x00	; 0
    56ce:	0e 94 98 3c 	call	0x7930	; 0x7930 <delayMicroseconds>
    56d2:	6c 81       	ldd	r22, Y+4	; 0x04
    56d4:	60 62       	ori	r22, 0x20	; 32
    56d6:	ce 01       	movw	r24, r28
    56d8:	45 df       	rcall	.-374    	; 0x5564 <_ZN3LCD7commandEh>
    56da:	86 e9       	ldi	r24, 0x96	; 150
    56dc:	90 e0       	ldi	r25, 0x00	; 0
    56de:	0e 94 98 3c 	call	0x7930	; 0x7930 <delayMicroseconds>
    56e2:	6c 81       	ldd	r22, Y+4	; 0x04
    56e4:	60 62       	ori	r22, 0x20	; 32
    56e6:	ce 01       	movw	r24, r28
    56e8:	3d df       	rcall	.-390    	; 0x5564 <_ZN3LCD7commandEh>
    56ea:	8c e3       	ldi	r24, 0x3C	; 60
    56ec:	90 e0       	ldi	r25, 0x00	; 0
    56ee:	0e 94 98 3c 	call	0x7930	; 0x7930 <delayMicroseconds>
    56f2:	84 e0       	ldi	r24, 0x04	; 4
    56f4:	8d 83       	std	Y+5, r24	; 0x05
    56f6:	ce 01       	movw	r24, r28
    56f8:	8b df       	rcall	.-234    	; 0x5610 <_ZN3LCD7displayEv>
    56fa:	ce 01       	movw	r24, r28
    56fc:	3b df       	rcall	.-394    	; 0x5574 <_ZN3LCD5clearEv>
    56fe:	82 e0       	ldi	r24, 0x02	; 2
    5700:	8e 83       	std	Y+6, r24	; 0x06
    5702:	66 e0       	ldi	r22, 0x06	; 6
    5704:	ce 01       	movw	r24, r28
    5706:	2e df       	rcall	.-420    	; 0x5564 <_ZN3LCD7commandEh>
    5708:	ce 01       	movw	r24, r28
    570a:	df 91       	pop	r29
    570c:	cf 91       	pop	r28
    570e:	1a cf       	rjmp	.-460    	; 0x5544 <_ZN3LCD9backlightEv>

00005710 <_ZN3LCD10createCharEhPh>:
}

// Write to CGRAM of new characters
void LCD::createChar(uint8_t location, uint8_t charmap[]) 
{
    5710:	ef 92       	push	r14
    5712:	ff 92       	push	r15
    5714:	0f 93       	push	r16
    5716:	1f 93       	push	r17
    5718:	cf 93       	push	r28
    571a:	df 93       	push	r29
    571c:	8c 01       	movw	r16, r24
    571e:	7a 01       	movw	r14, r20
   location &= 0x7;            // we only have 8 locations 0-7
   
   command(LCD_SETCGRAMADDR | (location << 3));
    5720:	67 70       	andi	r22, 0x07	; 7
    5722:	88 e0       	ldi	r24, 0x08	; 8
    5724:	68 9f       	mul	r22, r24
    5726:	b0 01       	movw	r22, r0
    5728:	11 24       	eor	r1, r1
    572a:	60 64       	ori	r22, 0x40	; 64
    572c:	c8 01       	movw	r24, r16
    572e:	1a df       	rcall	.-460    	; 0x5564 <_ZN3LCD7commandEh>
   delayMicroseconds(30);
    5730:	8e e1       	ldi	r24, 0x1E	; 30
    5732:	90 e0       	ldi	r25, 0x00	; 0
    5734:	0e 94 98 3c 	call	0x7930	; 0x7930 <delayMicroseconds>
    5738:	e7 01       	movw	r28, r14
    573a:	a8 e0       	ldi	r26, 0x08	; 8
    573c:	ea 0e       	add	r14, r26
    573e:	f1 1c       	adc	r15, r1
   
   for (uint8_t i = 0; i < 8; i++)
   {
      write(charmap[i]);      // call the virtual write method
    5740:	69 91       	ld	r22, Y+
    5742:	d8 01       	movw	r26, r16
    5744:	ed 91       	ld	r30, X+
    5746:	fc 91       	ld	r31, X
    5748:	01 90       	ld	r0, Z+
    574a:	f0 81       	ld	r31, Z
    574c:	e0 2d       	mov	r30, r0
    574e:	c8 01       	movw	r24, r16
    5750:	09 95       	icall
      delayMicroseconds(40);
    5752:	88 e2       	ldi	r24, 0x28	; 40
    5754:	90 e0       	ldi	r25, 0x00	; 0
    5756:	0e 94 98 3c 	call	0x7930	; 0x7930 <delayMicroseconds>
   location &= 0x7;            // we only have 8 locations 0-7
   
   command(LCD_SETCGRAMADDR | (location << 3));
   delayMicroseconds(30);
   
   for (uint8_t i = 0; i < 8; i++)
    575a:	ce 15       	cp	r28, r14
    575c:	df 05       	cpc	r29, r15
    575e:	81 f7       	brne	.-32     	; 0x5740 <_ZN3LCD10createCharEhPh+0x30>
   {
      write(charmap[i]);      // call the virtual write method
      delayMicroseconds(40);
   }
}
    5760:	df 91       	pop	r29
    5762:	cf 91       	pop	r28
    5764:	1f 91       	pop	r17
    5766:	0f 91       	pop	r16
    5768:	ff 90       	pop	r15
    576a:	ef 90       	pop	r14
    576c:	08 95       	ret

0000576e <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol>:
LiquidCrystal_I2C::LiquidCrystal_I2C(uint8_t lcd_Addr, uint8_t En, uint8_t Rw,
                                     uint8_t Rs, uint8_t d4, uint8_t d5,
                                     uint8_t d6, uint8_t d7 )
{
   config(lcd_Addr, En, Rw, Rs, d4, d5, d6, d7);
}
    576e:	21 e0       	ldi	r18, 0x01	; 1
    5770:	01 c0       	rjmp	.+2      	; 0x5774 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol+0x6>
    5772:	22 0f       	add	r18, r18
    5774:	6a 95       	dec	r22
    5776:	ea f7       	brpl	.-6      	; 0x5772 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol+0x4>
    5778:	dc 01       	movw	r26, r24
    577a:	1b 96       	adiw	r26, 0x0b	; 11
    577c:	2c 93       	st	X, r18
    577e:	1b 97       	sbiw	r26, 0x0b	; 11
    5780:	19 96       	adiw	r26, 0x09	; 9
    5782:	4c 93       	st	X, r20
    5784:	19 97       	sbiw	r26, 0x09	; 9
    5786:	ed 91       	ld	r30, X+
    5788:	fc 91       	ld	r31, X
    578a:	04 84       	ldd	r0, Z+12	; 0x0c
    578c:	f5 85       	ldd	r31, Z+13	; 0x0d
    578e:	e0 2d       	mov	r30, r0
    5790:	60 e0       	ldi	r22, 0x00	; 0
    5792:	09 94       	ijmp

00005794 <_ZN17LiquidCrystal_I2C12setBacklightEh>:
    5794:	fc 01       	movw	r30, r24
    5796:	83 85       	ldd	r24, Z+11	; 0x0b
    5798:	88 23       	and	r24, r24
    579a:	89 f0       	breq	.+34     	; 0x57be <_ZN17LiquidCrystal_I2C12setBacklightEh+0x2a>
    579c:	91 85       	ldd	r25, Z+9	; 0x09
    579e:	91 11       	cpse	r25, r1
    57a0:	03 c0       	rjmp	.+6      	; 0x57a8 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x14>
    57a2:	61 11       	cpse	r22, r1
    57a4:	05 c0       	rjmp	.+10     	; 0x57b0 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x1c>
    57a6:	06 c0       	rjmp	.+12     	; 0x57b4 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    57a8:	91 30       	cpi	r25, 0x01	; 1
    57aa:	21 f4       	brne	.+8      	; 0x57b4 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    57ac:	61 11       	cpse	r22, r1
    57ae:	02 c0       	rjmp	.+4      	; 0x57b4 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    57b0:	84 87       	std	Z+12, r24	; 0x0c
    57b2:	01 c0       	rjmp	.+2      	; 0x57b6 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x22>
    57b4:	14 86       	std	Z+12, r1	; 0x0c
    57b6:	64 85       	ldd	r22, Z+12	; 0x0c
    57b8:	cf 01       	movw	r24, r30
    57ba:	0d 96       	adiw	r24, 0x0d	; 13
    57bc:	87 ce       	rjmp	.-754    	; 0x54cc <_ZN5I2CIO5writeEh>
    57be:	08 95       	ret

000057c0 <_ZN17LiquidCrystal_I2C4initEv>:
    57c0:	0f 93       	push	r16
    57c2:	1f 93       	push	r17
    57c4:	cf 93       	push	r28
    57c6:	df 93       	push	r29
    57c8:	8c 01       	movw	r16, r24
    57ca:	ec 01       	movw	r28, r24
    57cc:	2d 96       	adiw	r28, 0x0d	; 13
    57ce:	fc 01       	movw	r30, r24
    57d0:	62 85       	ldd	r22, Z+10	; 0x0a
    57d2:	ce 01       	movw	r24, r28
    57d4:	63 de       	rcall	.-826    	; 0x549c <_ZN5I2CIO5beginEh>
    57d6:	01 97       	sbiw	r24, 0x01	; 1
    57d8:	59 f4       	brne	.+22     	; 0x57f0 <_ZN17LiquidCrystal_I2C4initEv+0x30>
    57da:	61 e0       	ldi	r22, 0x01	; 1
    57dc:	ce 01       	movw	r24, r28
    57de:	46 de       	rcall	.-884    	; 0x546c <_ZN5I2CIO8portModeEh>
    57e0:	f8 01       	movw	r30, r16
    57e2:	14 82       	std	Z+4, r1	; 0x04
    57e4:	60 e0       	ldi	r22, 0x00	; 0
    57e6:	ce 01       	movw	r24, r28
    57e8:	71 de       	rcall	.-798    	; 0x54cc <_ZN5I2CIO5writeEh>
    57ea:	81 e0       	ldi	r24, 0x01	; 1
    57ec:	90 e0       	ldi	r25, 0x00	; 0
    57ee:	02 c0       	rjmp	.+4      	; 0x57f4 <_ZN17LiquidCrystal_I2C4initEv+0x34>
    57f0:	80 e0       	ldi	r24, 0x00	; 0
    57f2:	90 e0       	ldi	r25, 0x00	; 0
    57f4:	df 91       	pop	r29
    57f6:	cf 91       	pop	r28
    57f8:	1f 91       	pop	r17
    57fa:	0f 91       	pop	r16
    57fc:	08 95       	ret

000057fe <_ZN17LiquidCrystal_I2C6configEhhhhhhhh>:
    57fe:	8f 92       	push	r8
    5800:	af 92       	push	r10
    5802:	cf 92       	push	r12
    5804:	ef 92       	push	r14
    5806:	0f 93       	push	r16
    5808:	cf 93       	push	r28
    580a:	df 93       	push	r29
    580c:	cd b7       	in	r28, 0x3d	; 61
    580e:	de b7       	in	r29, 0x3e	; 62
    5810:	fc 01       	movw	r30, r24
    5812:	62 87       	std	Z+10, r22	; 0x0a
    5814:	13 86       	std	Z+11, r1	; 0x0b
    5816:	14 86       	std	Z+12, r1	; 0x0c
    5818:	11 86       	std	Z+9, r1	; 0x09
    581a:	81 e0       	ldi	r24, 0x01	; 1
    581c:	98 2f       	mov	r25, r24
    581e:	01 c0       	rjmp	.+2      	; 0x5822 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x24>
    5820:	99 0f       	add	r25, r25
    5822:	4a 95       	dec	r20
    5824:	ea f7       	brpl	.-6      	; 0x5820 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x22>
    5826:	91 8b       	std	Z+17, r25	; 0x11
    5828:	98 2f       	mov	r25, r24
    582a:	01 c0       	rjmp	.+2      	; 0x582e <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x30>
    582c:	99 0f       	add	r25, r25
    582e:	2a 95       	dec	r18
    5830:	ea f7       	brpl	.-6      	; 0x582c <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x2e>
    5832:	92 8b       	std	Z+18, r25	; 0x12
    5834:	98 2f       	mov	r25, r24
    5836:	01 c0       	rjmp	.+2      	; 0x583a <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x3c>
    5838:	99 0f       	add	r25, r25
    583a:	0a 95       	dec	r16
    583c:	ea f7       	brpl	.-6      	; 0x5838 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x3a>
    583e:	93 8b       	std	Z+19, r25	; 0x13
    5840:	98 2f       	mov	r25, r24
    5842:	01 c0       	rjmp	.+2      	; 0x5846 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x48>
    5844:	99 0f       	add	r25, r25
    5846:	ea 94       	dec	r14
    5848:	ea f7       	brpl	.-6      	; 0x5844 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x46>
    584a:	94 8b       	std	Z+20, r25	; 0x14
    584c:	98 2f       	mov	r25, r24
    584e:	01 c0       	rjmp	.+2      	; 0x5852 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x54>
    5850:	99 0f       	add	r25, r25
    5852:	ca 94       	dec	r12
    5854:	ea f7       	brpl	.-6      	; 0x5850 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x52>
    5856:	95 8b       	std	Z+21, r25	; 0x15
    5858:	98 2f       	mov	r25, r24
    585a:	01 c0       	rjmp	.+2      	; 0x585e <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x60>
    585c:	99 0f       	add	r25, r25
    585e:	aa 94       	dec	r10
    5860:	ea f7       	brpl	.-6      	; 0x585c <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x5e>
    5862:	96 8b       	std	Z+22, r25	; 0x16
    5864:	01 c0       	rjmp	.+2      	; 0x5868 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x6a>
    5866:	88 0f       	add	r24, r24
    5868:	8a 94       	dec	r8
    586a:	ea f7       	brpl	.-6      	; 0x5866 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x68>
    586c:	87 8b       	std	Z+23, r24	; 0x17
    586e:	df 91       	pop	r29
    5870:	cf 91       	pop	r28
    5872:	0f 91       	pop	r16
    5874:	ef 90       	pop	r14
    5876:	cf 90       	pop	r12
    5878:	af 90       	pop	r10
    587a:	8f 90       	pop	r8
    587c:	08 95       	ret

0000587e <_ZN17LiquidCrystal_I2CC1Ehhhhhhhhh13t_backlighPol>:

LiquidCrystal_I2C::LiquidCrystal_I2C(uint8_t lcd_Addr, uint8_t En, uint8_t Rw,
    587e:	6f 92       	push	r6
    5880:	7f 92       	push	r7
    5882:	8f 92       	push	r8
    5884:	9f 92       	push	r9
    5886:	af 92       	push	r10
    5888:	bf 92       	push	r11
    588a:	cf 92       	push	r12
    588c:	df 92       	push	r13
    588e:	ef 92       	push	r14
    5890:	ff 92       	push	r15
    5892:	0f 93       	push	r16
    5894:	1f 93       	push	r17
    5896:	cf 93       	push	r28
    5898:	df 93       	push	r29
    589a:	cd b7       	in	r28, 0x3d	; 61
    589c:	de b7       	in	r29, 0x3e	; 62
    589e:	3c 01       	movw	r6, r24
    58a0:	d6 2e       	mov	r13, r22
    58a2:	b4 2e       	mov	r11, r20
    58a4:	92 2e       	mov	r9, r18
    58a6:	19 89       	ldd	r17, Y+17	; 0x11
    58a8:	fa 88       	ldd	r15, Y+18	; 0x12
                                     uint8_t Rs, uint8_t d4, uint8_t d5,
                                     uint8_t d6, uint8_t d7, uint8_t backlighPin, 
                                     t_backlighPol pol = POSITIVE )
    58aa:	44 de       	rcall	.-888    	; 0x5534 <_ZN3LCDC1Ev>
    58ac:	8b e3       	ldi	r24, 0x3B	; 59
    58ae:	99 e0       	ldi	r25, 0x09	; 9
    58b0:	f3 01       	movw	r30, r6
    58b2:	91 83       	std	Z+1, r25	; 0x01
    58b4:	80 83       	st	Z, r24
    58b6:	c3 01       	movw	r24, r6
    58b8:	0d 96       	adiw	r24, 0x0d	; 13
    58ba:	d1 dd       	rcall	.-1118   	; 0x545e <_ZN5I2CIOC1Ev>
{
   config(lcd_Addr, En, Rw, Rs, d4, d5, d6, d7);
    58bc:	29 2d       	mov	r18, r9
    58be:	4b 2d       	mov	r20, r11
    58c0:	6d 2d       	mov	r22, r13
    58c2:	c3 01       	movw	r24, r6
    58c4:	9c df       	rcall	.-200    	; 0x57fe <_ZN17LiquidCrystal_I2C6configEhhhhhhhh>
   setBacklightPin(backlighPin, pol);
    58c6:	4f 2d       	mov	r20, r15
    58c8:	61 2f       	mov	r22, r17
    58ca:	c3 01       	movw	r24, r6
}
    58cc:	df 91       	pop	r29
    58ce:	cf 91       	pop	r28
    58d0:	1f 91       	pop	r17
    58d2:	0f 91       	pop	r16
    58d4:	ff 90       	pop	r15
    58d6:	ef 90       	pop	r14
    58d8:	df 90       	pop	r13
    58da:	cf 90       	pop	r12
    58dc:	bf 90       	pop	r11
    58de:	af 90       	pop	r10
    58e0:	9f 90       	pop	r9
    58e2:	8f 90       	pop	r8
    58e4:	7f 90       	pop	r7
                                     uint8_t Rs, uint8_t d4, uint8_t d5,
                                     uint8_t d6, uint8_t d7, uint8_t backlighPin, 
                                     t_backlighPol pol = POSITIVE )
{
   config(lcd_Addr, En, Rw, Rs, d4, d5, d6, d7);
   setBacklightPin(backlighPin, pol);
    58e6:	6f 90       	pop	r6
    58e8:	42 cf       	rjmp	.-380    	; 0x576e <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol>

000058ea <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
}

//
// pulseEnable
void LiquidCrystal_I2C::pulseEnable (uint8_t data)
{
    58ea:	ef 92       	push	r14
    58ec:	ff 92       	push	r15
    58ee:	0f 93       	push	r16
    58f0:	1f 93       	push	r17
    58f2:	cf 93       	push	r28
    58f4:	8c 01       	movw	r16, r24
    58f6:	c6 2f       	mov	r28, r22
   _i2cio.write (data | _En);   // En HIGH
    58f8:	7c 01       	movw	r14, r24
    58fa:	8d e0       	ldi	r24, 0x0D	; 13
    58fc:	e8 0e       	add	r14, r24
    58fe:	f1 1c       	adc	r15, r1
    5900:	f8 01       	movw	r30, r16
    5902:	61 89       	ldd	r22, Z+17	; 0x11
    5904:	6c 2b       	or	r22, r28
    5906:	c7 01       	movw	r24, r14
    5908:	e1 dd       	rcall	.-1086   	; 0x54cc <_ZN5I2CIO5writeEh>
   _i2cio.write (data & ~_En);  // En LOW
    590a:	f8 01       	movw	r30, r16
    590c:	61 89       	ldd	r22, Z+17	; 0x11
    590e:	60 95       	com	r22
    5910:	6c 23       	and	r22, r28
    5912:	c7 01       	movw	r24, r14
    5914:	cf 91       	pop	r28
    5916:	1f 91       	pop	r17
    5918:	0f 91       	pop	r16
    591a:	ff 90       	pop	r15
//
// pulseEnable
void LiquidCrystal_I2C::pulseEnable (uint8_t data)
{
   _i2cio.write (data | _En);   // En HIGH
   _i2cio.write (data & ~_En);  // En LOW
    591c:	ef 90       	pop	r14
    591e:	d6 cd       	rjmp	.-1108   	; 0x54cc <_ZN5I2CIO5writeEh>

00005920 <_ZN17LiquidCrystal_I2C10write4bitsEhh>:
}

//
// write4bits
void LiquidCrystal_I2C::write4bits ( uint8_t value, uint8_t mode ) 
{
    5920:	fc 01       	movw	r30, r24
    5922:	96 2f       	mov	r25, r22
    5924:	df 01       	movw	r26, r30
    5926:	84 e0       	ldi	r24, 0x04	; 4
   uint8_t pinMapValue = 0;
    5928:	60 e0       	ldi	r22, 0x00	; 0
   
   // Map the value to LCD pin mapping
   // --------------------------------
   for ( uint8_t i = 0; i < 4; i++ )
   {
      if ( ( value & 0x1 ) == 1 )
    592a:	90 ff       	sbrs	r25, 0
    592c:	04 c0       	rjmp	.+8      	; 0x5936 <_ZN17LiquidCrystal_I2C10write4bitsEhh+0x16>
      {
         pinMapValue |= _data_pins[i];
    592e:	54 96       	adiw	r26, 0x14	; 20
    5930:	2c 91       	ld	r18, X
    5932:	54 97       	sbiw	r26, 0x14	; 20
    5934:	62 2b       	or	r22, r18
      }
      value = ( value >> 1 );
    5936:	96 95       	lsr	r25
    5938:	81 50       	subi	r24, 0x01	; 1
    593a:	11 96       	adiw	r26, 0x01	; 1
{
   uint8_t pinMapValue = 0;
   
   // Map the value to LCD pin mapping
   // --------------------------------
   for ( uint8_t i = 0; i < 4; i++ )
    593c:	81 11       	cpse	r24, r1
    593e:	f5 cf       	rjmp	.-22     	; 0x592a <_ZN17LiquidCrystal_I2C10write4bitsEhh+0xa>
      value = ( value >> 1 );
   }
   
   // Is it a command or data
   // -----------------------
   if ( mode == DATA )
    5940:	41 30       	cpi	r20, 0x01	; 1
    5942:	09 f4       	brne	.+2      	; 0x5946 <_ZN17LiquidCrystal_I2C10write4bitsEhh+0x26>
   {
      mode = _Rs;
    5944:	43 89       	ldd	r20, Z+19	; 0x13
    5946:	94 85       	ldd	r25, Z+12	; 0x0c
    5948:	69 2b       	or	r22, r25
   }
   
   pinMapValue |= mode | _backlightStsMask;
   pulseEnable ( pinMapValue );
    594a:	64 2b       	or	r22, r20
    594c:	cf 01       	movw	r24, r30
    594e:	cd cf       	rjmp	.-102    	; 0x58ea <_ZN17LiquidCrystal_I2C11pulseEnableEh>

00005950 <_ZN17LiquidCrystal_I2C4sendEhh>:
//----------------------------------------------------------------------------

//
// send - write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) 
{
    5950:	0f 93       	push	r16
    5952:	1f 93       	push	r17
    5954:	cf 93       	push	r28
    5956:	df 93       	push	r29
    5958:	06 2f       	mov	r16, r22
    595a:	0f 70       	andi	r16, 0x0F	; 15
   // No need to use the delay routines since the time taken to write takes
   // longer that what is needed both for toggling and enable pin an to execute
   // the command.
   
   if ( mode == FOUR_BITS )
    595c:	42 30       	cpi	r20, 0x02	; 2
    595e:	19 f4       	brne	.+6      	; 0x5966 <_ZN17LiquidCrystal_I2C4sendEhh+0x16>
   {
      write4bits( (value & 0x0F), COMMAND );
    5960:	40 e0       	ldi	r20, 0x00	; 0
    5962:	60 2f       	mov	r22, r16
    5964:	0d c0       	rjmp	.+26     	; 0x5980 <_ZN17LiquidCrystal_I2C4sendEhh+0x30>
    5966:	14 2f       	mov	r17, r20
    5968:	ec 01       	movw	r28, r24
   }
   else 
   {
      write4bits( (value >> 4), mode );
    596a:	70 e0       	ldi	r23, 0x00	; 0
    596c:	84 e0       	ldi	r24, 0x04	; 4
    596e:	75 95       	asr	r23
    5970:	67 95       	ror	r22
    5972:	8a 95       	dec	r24
    5974:	e1 f7       	brne	.-8      	; 0x596e <_ZN17LiquidCrystal_I2C4sendEhh+0x1e>
    5976:	ce 01       	movw	r24, r28
    5978:	d3 df       	rcall	.-90     	; 0x5920 <_ZN17LiquidCrystal_I2C10write4bitsEhh>
      write4bits( (value & 0x0F), mode);
    597a:	41 2f       	mov	r20, r17
    597c:	60 2f       	mov	r22, r16
    597e:	ce 01       	movw	r24, r28
   }
}
    5980:	df 91       	pop	r29
    5982:	cf 91       	pop	r28
    5984:	1f 91       	pop	r17
      write4bits( (value & 0x0F), COMMAND );
   }
   else 
   {
      write4bits( (value >> 4), mode );
      write4bits( (value & 0x0F), mode);
    5986:	0f 91       	pop	r16
    5988:	cb cf       	rjmp	.-106    	; 0x5920 <_ZN17LiquidCrystal_I2C10write4bitsEhh>

0000598a <_ZN17LiquidCrystal_I2C5beginEhhh>:
// ---------------------------------------------------------------------------

//
// begin
void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) 
{
    598a:	ff 92       	push	r15
    598c:	0f 93       	push	r16
    598e:	1f 93       	push	r17
    5990:	cf 93       	push	r28
    5992:	df 93       	push	r29
    5994:	ec 01       	movw	r28, r24
    5996:	16 2f       	mov	r17, r22
    5998:	04 2f       	mov	r16, r20
    599a:	f2 2e       	mov	r15, r18
   
   init();     // Initialise the I2C expander interface
    599c:	11 df       	rcall	.-478    	; 0x57c0 <_ZN17LiquidCrystal_I2C4initEv>
   LCD::begin ( cols, lines, dotsize );   
    599e:	2f 2d       	mov	r18, r15
    59a0:	40 2f       	mov	r20, r16
    59a2:	61 2f       	mov	r22, r17
    59a4:	ce 01       	movw	r24, r28
}
    59a6:	df 91       	pop	r29
    59a8:	cf 91       	pop	r28
    59aa:	1f 91       	pop	r17
    59ac:	0f 91       	pop	r16
// begin
void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) 
{
   
   init();     // Initialise the I2C expander interface
   LCD::begin ( cols, lines, dotsize );   
    59ae:	ff 90       	pop	r15
    59b0:	36 ce       	rjmp	.-916    	; 0x561e <_ZN3LCD5beginEhhh>

000059b2 <_ZN11Diagnostics15_printErrorCodeEv>:
  Serial.println(errorcode, HEX);
}

void Diagnostics::_printSupportLink(void) {
  Serial.print(F("If this does not help resolve/clarify this issue, "));
  Serial.println(F("please raise an issue at http://www.github.com/Marzogh/SPIMemory/issues with the details of what your were doing when this error occurred"));
    59b2:	cf 93       	push	r28
    59b4:	df 93       	push	r29
    59b6:	ec 01       	movw	r28, r24
    59b8:	69 e2       	ldi	r22, 0x29	; 41
    59ba:	72 e0       	ldi	r23, 0x02	; 2
    59bc:	85 e5       	ldi	r24, 0x55	; 85
    59be:	9d e0       	ldi	r25, 0x0D	; 13
    59c0:	0e 94 fe 3a 	call	0x75fc	; 0x75fc <_ZN5Print5printEPK19__FlashStringHelper>
    59c4:	88 81       	ld	r24, Y
    59c6:	80 31       	cpi	r24, 0x10	; 16
    59c8:	30 f4       	brcc	.+12     	; 0x59d6 <_ZN11Diagnostics15_printErrorCodeEv+0x24>
    59ca:	67 e2       	ldi	r22, 0x27	; 39
    59cc:	72 e0       	ldi	r23, 0x02	; 2
    59ce:	85 e5       	ldi	r24, 0x55	; 85
    59d0:	9d e0       	ldi	r25, 0x0D	; 13
    59d2:	0e 94 fe 3a 	call	0x75fc	; 0x75fc <_ZN5Print5printEPK19__FlashStringHelper>
    59d6:	40 e1       	ldi	r20, 0x10	; 16
    59d8:	50 e0       	ldi	r21, 0x00	; 0
    59da:	68 81       	ld	r22, Y
    59dc:	85 e5       	ldi	r24, 0x55	; 85
    59de:	9d e0       	ldi	r25, 0x0D	; 13
    59e0:	df 91       	pop	r29
    59e2:	cf 91       	pop	r28
    59e4:	0c 94 c4 3b 	jmp	0x7788	; 0x7788 <_ZN5Print7printlnEhi>

000059e8 <_ZN11Diagnostics12troubleshootEhb>:
}
//Troubleshooting function. Called when #ifdef RUNDIAGNOSTIC is uncommented at the top of SPIMemory.h.
void Diagnostics::troubleshoot(uint8_t _code, bool printoverride) {
  bool _printoverride;
  errorcode = _code;
    59e8:	fc 01       	movw	r30, r24
    59ea:	60 83       	st	Z, r22
  _printErrorCode();
#endif
#if !defined (RUNDIAGNOSTIC)
  _printoverride = printoverride;
#endif
  if (_printoverride) {
    59ec:	41 11       	cpse	r20, r1
  #if defined (ARDUINO_ARCH_AVR)
    _printErrorCode();
    59ee:	e1 cf       	rjmp	.-62     	; 0x59b2 <_ZN11Diagnostics15_printErrorCodeEv>
    59f0:	08 95       	ret

000059f2 <_ZN8SPIFlashC1Eh>:
  #ifdef RUNDIAGNOSTIC
    _spifuncruntime = micros() - _spifuncruntime;
  #endif
  return true;

}
    59f2:	cf 93       	push	r28
    59f4:	df 93       	push	r29
    59f6:	ec 01       	movw	r28, r24
    59f8:	80 e5       	ldi	r24, 0x50	; 80
    59fa:	88 83       	st	Y, r24
    59fc:	19 82       	std	Y+1, r1	; 0x01
    59fe:	1a 82       	std	Y+2, r1	; 0x02
    5a00:	8f ef       	ldi	r24, 0xFF	; 255
    5a02:	8e 83       	std	Y+6, r24	; 0x06
    5a04:	8f 83       	std	Y+7, r24	; 0x07
    5a06:	88 87       	std	Y+8, r24	; 0x08
    5a08:	89 87       	std	Y+9, r24	; 0x09
    5a0a:	1e 86       	std	Y+14, r1	; 0x0e
    5a0c:	1f 86       	std	Y+15, r1	; 0x0f
    5a0e:	18 8a       	std	Y+16, r1	; 0x10
    5a10:	19 8a       	std	Y+17, r1	; 0x11
    5a12:	82 e5       	ldi	r24, 0x52	; 82
    5a14:	8c 8f       	std	Y+28, r24	; 0x1c
    5a16:	87 e5       	ldi	r24, 0x57	; 87
    5a18:	8d 8f       	std	Y+29, r24	; 0x1d
    5a1a:	1e 8e       	std	Y+30, r1	; 0x1e
    5a1c:	1f 8e       	std	Y+31, r1	; 0x1f
    5a1e:	18 a2       	std	Y+32, r1	; 0x20
    5a20:	19 a2       	std	Y+33, r1	; 0x21
    5a22:	fe 01       	movw	r30, r28
    5a24:	e6 5a       	subi	r30, 0xA6	; 166
    5a26:	ff 4f       	sbci	r31, 0xFF	; 255
    5a28:	10 82       	st	Z, r1
    5a2a:	11 82       	std	Z+1, r1	; 0x01
    5a2c:	12 82       	std	Z+2, r1	; 0x02
    5a2e:	13 82       	std	Z+3, r1	; 0x03
    5a30:	34 96       	adiw	r30, 0x04	; 4
    5a32:	10 82       	st	Z, r1
    5a34:	11 82       	std	Z+1, r1	; 0x01
    5a36:	12 82       	std	Z+2, r1	; 0x02
    5a38:	13 82       	std	Z+3, r1	; 0x03
    5a3a:	de 01       	movw	r26, r28
    5a3c:	a2 58       	subi	r26, 0x82	; 130
    5a3e:	bf 4f       	sbci	r27, 0xFF	; 255
    5a40:	82 e1       	ldi	r24, 0x12	; 18
    5a42:	ea e5       	ldi	r30, 0x5A	; 90
    5a44:	f1 e0       	ldi	r31, 0x01	; 1
    5a46:	01 90       	ld	r0, Z+
    5a48:	0d 92       	st	X+, r0
    5a4a:	8a 95       	dec	r24
    5a4c:	e1 f7       	brne	.-8      	; 0x5a46 <_ZN8SPIFlashC1Eh+0x54>
    5a4e:	de 01       	movw	r26, r28
    5a50:	a0 57       	subi	r26, 0x70	; 112
    5a52:	bf 4f       	sbci	r27, 0xFF	; 255
    5a54:	88 e4       	ldi	r24, 0x48	; 72
    5a56:	ec e6       	ldi	r30, 0x6C	; 108
    5a58:	f1 e0       	ldi	r31, 0x01	; 1
    5a5a:	01 90       	ld	r0, Z+
    5a5c:	0d 92       	st	X+, r0
    5a5e:	8a 95       	dec	r24
    5a60:	e1 f7       	brne	.-8      	; 0x5a5a <_ZN8SPIFlashC1Eh+0x68>
    5a62:	de 01       	movw	r26, r28
    5a64:	a8 52       	subi	r26, 0x28	; 40
    5a66:	bf 4f       	sbci	r27, 0xFF	; 255
    5a68:	89 e0       	ldi	r24, 0x09	; 9
    5a6a:	e4 eb       	ldi	r30, 0xB4	; 180
    5a6c:	f1 e0       	ldi	r31, 0x01	; 1
    5a6e:	01 90       	ld	r0, Z+
    5a70:	0d 92       	st	X+, r0
    5a72:	8a 95       	dec	r24
    5a74:	e1 f7       	brne	.-8      	; 0x5a6e <_ZN8SPIFlashC1Eh+0x7c>
    5a76:	fe 01       	movw	r30, r28
    5a78:	ef 51       	subi	r30, 0x1F	; 31
    5a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    5a7c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <_ZN14EthernetClient8_srcportE+0x73>
    5a80:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <_ZN14EthernetClient8_srcportE+0x74>
    5a84:	a0 91 bf 01 	lds	r26, 0x01BF	; 0x8001bf <_ZN14EthernetClient8_srcportE+0x75>
    5a88:	80 83       	st	Z, r24
    5a8a:	91 83       	std	Z+1, r25	; 0x01
    5a8c:	a2 83       	std	Z+2, r26	; 0x02
    5a8e:	8a e0       	ldi	r24, 0x0A	; 10
    5a90:	8a 87       	std	Y+10, r24	; 0x0a
    5a92:	6d 83       	std	Y+5, r22	; 0x05
    5a94:	24 b1       	in	r18, 0x04	; 4
    5a96:	81 e0       	ldi	r24, 0x01	; 1
    5a98:	90 e0       	ldi	r25, 0x00	; 0
    5a9a:	01 c0       	rjmp	.+2      	; 0x5a9e <_ZN8SPIFlashC1Eh+0xac>
    5a9c:	88 0f       	add	r24, r24
    5a9e:	6a 95       	dec	r22
    5aa0:	ea f7       	brpl	.-6      	; 0x5a9c <_ZN8SPIFlashC1Eh+0xaa>
    5aa2:	82 2b       	or	r24, r18
    5aa4:	84 b9       	out	0x04, r24	; 4
    5aa6:	2c 9a       	sbi	0x05, 4	; 5
    5aa8:	df 91       	pop	r29
    5aaa:	cf 91       	pop	r28
    5aac:	08 95       	ret

00005aae <_ZN8SPIFlash5beginEm>:
    5aae:	cf 92       	push	r12
    5ab0:	df 92       	push	r13
    5ab2:	ef 92       	push	r14
    5ab4:	ff 92       	push	r15
    5ab6:	1f 93       	push	r17
    5ab8:	cf 93       	push	r28
    5aba:	df 93       	push	r29
    5abc:	ec 01       	movw	r28, r24
    5abe:	6a 01       	movw	r12, r20
    5ac0:	7b 01       	movw	r14, r22
    5ac2:	8a 85       	ldd	r24, Y+10	; 0x0a
    5ac4:	8b 30       	cpi	r24, 0x0B	; 11
    5ac6:	09 f0       	breq	.+2      	; 0x5aca <_ZN8SPIFlash5beginEm+0x1c>
    5ac8:	4e d7       	rcall	.+3740   	; 0x6966 <_ZN8SPIClass5beginEv>
    5aca:	8a 81       	ldd	r24, Y+2	; 0x02
    5acc:	81 11       	cpse	r24, r1
    5ace:	04 c0       	rjmp	.+8      	; 0x5ad8 <_ZN8SPIFlash5beginEm+0x2a>
    5ad0:	80 e5       	ldi	r24, 0x50	; 80
    5ad2:	88 83       	st	Y, r24
    5ad4:	81 e0       	ldi	r24, 0x01	; 1
    5ad6:	89 83       	std	Y+1, r24	; 0x01
    5ad8:	b7 01       	movw	r22, r14
    5ada:	a6 01       	movw	r20, r12
    5adc:	ce 01       	movw	r24, r28
    5ade:	69 d6       	rcall	.+3282   	; 0x67b2 <_ZN8SPIFlash7_chipIDEm>
    5ae0:	18 2f       	mov	r17, r24
    5ae2:	ce 01       	movw	r24, r28
    5ae4:	04 d5       	rcall	.+2568   	; 0x64ee <_ZN8SPIFlash7_endSPIEv>
    5ae6:	1f 86       	std	Y+15, r1	; 0x0f
    5ae8:	ce 01       	movw	r24, r28
    5aea:	27 d6       	rcall	.+3150   	; 0x673a <_ZN8SPIFlash26_disableGlobalBlockProtectEv>
    5aec:	81 2f       	mov	r24, r17
    5aee:	df 91       	pop	r29
    5af0:	cf 91       	pop	r28
    5af2:	1f 91       	pop	r17
    5af4:	ff 90       	pop	r15
    5af6:	ef 90       	pop	r14
    5af8:	df 90       	pop	r13
    5afa:	cf 90       	pop	r12
    5afc:	08 95       	ret

00005afe <_ZN8SPIFlash5errorEb>:
    5afe:	66 23       	and	r22, r22
    5b00:	21 f0       	breq	.+8      	; 0x5b0a <_ZN8SPIFlash5errorEb+0xc>
    5b02:	41 e0       	ldi	r20, 0x01	; 1
    5b04:	60 91 8c 0c 	lds	r22, 0x0C8C	; 0x800c8c <diagnostics>
    5b08:	2b d7       	rcall	.+3670   	; 0x6960 <_ZN8SPIFlash13_troubleshootEhb>
    5b0a:	80 91 8c 0c 	lds	r24, 0x0C8C	; 0x800c8c <diagnostics>
    5b0e:	08 95       	ret

00005b10 <_ZN8SPIFlash11getCapacityEv>:
    5b10:	fc 01       	movw	r30, r24
    5b12:	60 a5       	ldd	r22, Z+40	; 0x28
    5b14:	71 a5       	ldd	r23, Z+41	; 0x29
    5b16:	82 a5       	ldd	r24, Z+42	; 0x2a
    5b18:	93 a5       	ldd	r25, Z+43	; 0x2b
    5b1a:	08 95       	ret

00005b1c <_ZN8SPIFlash10getMaxPageEv>:
    5b1c:	fc 01       	movw	r30, r24
    5b1e:	ec 5a       	subi	r30, 0xAC	; 172
    5b20:	ff 4f       	sbci	r31, 0xFF	; 255
    5b22:	20 81       	ld	r18, Z
    5b24:	31 81       	ldd	r19, Z+1	; 0x01
    5b26:	40 e0       	ldi	r20, 0x00	; 0
    5b28:	50 e0       	ldi	r21, 0x00	; 0
    5b2a:	fc 01       	movw	r30, r24
    5b2c:	60 a5       	ldd	r22, Z+40	; 0x28
    5b2e:	71 a5       	ldd	r23, Z+41	; 0x29
    5b30:	82 a5       	ldd	r24, Z+42	; 0x2a
    5b32:	93 a5       	ldd	r25, Z+43	; 0x2b
    5b34:	0e 94 63 41 	call	0x82c6	; 0x82c6 <__udivmodsi4>
    5b38:	ca 01       	movw	r24, r20
    5b3a:	b9 01       	movw	r22, r18
    5b3c:	08 95       	ret

00005b3e <_ZN8SPIFlash10getJEDECIDEv>:
    5b3e:	fc 01       	movw	r30, r24
    5b40:	65 a1       	ldd	r22, Z+37	; 0x25
    5b42:	76 a1       	ldd	r23, Z+38	; 0x26
    5b44:	76 27       	eor	r23, r22
    5b46:	67 27       	eor	r22, r23
    5b48:	76 27       	eor	r23, r22
    5b4a:	cb 01       	movw	r24, r22
    5b4c:	a0 e0       	ldi	r26, 0x00	; 0
    5b4e:	b0 e0       	ldi	r27, 0x00	; 0
    5b50:	ba 2f       	mov	r27, r26
    5b52:	a9 2f       	mov	r26, r25
    5b54:	98 2f       	mov	r25, r24
    5b56:	88 27       	eor	r24, r24
    5b58:	27 a1       	ldd	r18, Z+39	; 0x27
    5b5a:	bc 01       	movw	r22, r24
    5b5c:	cd 01       	movw	r24, r26
    5b5e:	62 2b       	or	r22, r18
    5b60:	08 95       	ret

00005b62 <_ZN8SPIFlash11getUniqueIDEv>:
    5b62:	6f 92       	push	r6
    5b64:	7f 92       	push	r7
    5b66:	8f 92       	push	r8
    5b68:	9f 92       	push	r9
    5b6a:	af 92       	push	r10
    5b6c:	bf 92       	push	r11
    5b6e:	cf 92       	push	r12
    5b70:	df 92       	push	r13
    5b72:	ef 92       	push	r14
    5b74:	ff 92       	push	r15
    5b76:	0f 93       	push	r16
    5b78:	1f 93       	push	r17
    5b7a:	cf 93       	push	r28
    5b7c:	df 93       	push	r29
    5b7e:	ec 01       	movw	r28, r24
    5b80:	40 e0       	ldi	r20, 0x00	; 0
    5b82:	5a ec       	ldi	r21, 0xCA	; 202
    5b84:	6a e9       	ldi	r22, 0x9A	; 154
    5b86:	7b e3       	ldi	r23, 0x3B	; 59
    5b88:	e5 d4       	rcall	.+2506   	; 0x6554 <_ZN8SPIFlash8_notBusyEm>
    5b8a:	88 23       	and	r24, r24
    5b8c:	21 f0       	breq	.+8      	; 0x5b96 <_ZN8SPIFlash11getUniqueIDEv+0x34>
    5b8e:	ce 01       	movw	r24, r28
    5b90:	d4 d4       	rcall	.+2472   	; 0x653a <_ZN8SPIFlash18_isChipPoweredDownEv>
    5b92:	88 23       	and	r24, r24
    5b94:	49 f0       	breq	.+18     	; 0x5ba8 <_ZN8SPIFlash11getUniqueIDEv+0x46>
    5b96:	20 e0       	ldi	r18, 0x00	; 0
    5b98:	30 e0       	ldi	r19, 0x00	; 0
    5b9a:	40 e0       	ldi	r20, 0x00	; 0
    5b9c:	50 e0       	ldi	r21, 0x00	; 0
    5b9e:	60 e0       	ldi	r22, 0x00	; 0
    5ba0:	70 e0       	ldi	r23, 0x00	; 0
    5ba2:	80 e0       	ldi	r24, 0x00	; 0
    5ba4:	90 e0       	ldi	r25, 0x00	; 0
    5ba6:	43 c0       	rjmp	.+134    	; 0x5c2e <_ZN8SPIFlash11getUniqueIDEv+0xcc>
    5ba8:	6b e4       	ldi	r22, 0x4B	; 75
    5baa:	ce 01       	movw	r24, r28
    5bac:	20 d4       	rcall	.+2112   	; 0x63ee <_ZN8SPIFlash9_beginSPIEh>
    5bae:	14 e0       	ldi	r17, 0x04	; 4
    5bb0:	4e ee       	ldi	r20, 0xEE	; 238
    5bb2:	6d 8d       	ldd	r22, Y+29	; 0x1d
    5bb4:	ce 01       	movw	r24, r28
    5bb6:	87 d4       	rcall	.+2318   	; 0x64c6 <_ZN8SPIFlash9_nextByteEch>
    5bb8:	11 50       	subi	r17, 0x01	; 1
    5bba:	d1 f7       	brne	.-12     	; 0x5bb0 <_ZN8SPIFlash11getUniqueIDEv+0x4e>
    5bbc:	88 89       	ldd	r24, Y+16	; 0x10
    5bbe:	88 23       	and	r24, r24
    5bc0:	21 f0       	breq	.+8      	; 0x5bca <_ZN8SPIFlash11getUniqueIDEv+0x68>
    5bc2:	4e ee       	ldi	r20, 0xEE	; 238
    5bc4:	6d 8d       	ldd	r22, Y+29	; 0x1d
    5bc6:	ce 01       	movw	r24, r28
    5bc8:	7e d4       	rcall	.+2300   	; 0x64c6 <_ZN8SPIFlash9_nextByteEch>
    5bca:	4e 01       	movw	r8, r28
    5bcc:	86 e7       	ldi	r24, 0x76	; 118
    5bce:	88 0e       	add	r8, r24
    5bd0:	91 1c       	adc	r9, r1
    5bd2:	3e 01       	movw	r6, r28
    5bd4:	ee e7       	ldi	r30, 0x7E	; 126
    5bd6:	6e 0e       	add	r6, r30
    5bd8:	71 1c       	adc	r7, r1
    5bda:	84 01       	movw	r16, r8
    5bdc:	40 e0       	ldi	r20, 0x00	; 0
    5bde:	6c 8d       	ldd	r22, Y+28	; 0x1c
    5be0:	ce 01       	movw	r24, r28
    5be2:	71 d4       	rcall	.+2274   	; 0x64c6 <_ZN8SPIFlash9_nextByteEch>
    5be4:	f8 01       	movw	r30, r16
    5be6:	81 93       	st	Z+, r24
    5be8:	8f 01       	movw	r16, r30
    5bea:	6e 16       	cp	r6, r30
    5bec:	7f 06       	cpc	r7, r31
    5bee:	b1 f7       	brne	.-20     	; 0x5bdc <_ZN8SPIFlash11getUniqueIDEv+0x7a>
    5bf0:	2c 9a       	sbi	0x05, 4	; 5
    5bf2:	a1 2c       	mov	r10, r1
    5bf4:	b1 2c       	mov	r11, r1
    5bf6:	c1 2c       	mov	r12, r1
    5bf8:	d1 2c       	mov	r13, r1
    5bfa:	e1 2c       	mov	r14, r1
    5bfc:	f1 2c       	mov	r15, r1
    5bfe:	00 e0       	ldi	r16, 0x00	; 0
    5c00:	10 e0       	ldi	r17, 0x00	; 0
    5c02:	f4 01       	movw	r30, r8
    5c04:	21 91       	ld	r18, Z+
    5c06:	4f 01       	movw	r8, r30
    5c08:	30 e0       	ldi	r19, 0x00	; 0
    5c0a:	40 e0       	ldi	r20, 0x00	; 0
    5c0c:	50 e0       	ldi	r21, 0x00	; 0
    5c0e:	60 e0       	ldi	r22, 0x00	; 0
    5c10:	70 e0       	ldi	r23, 0x00	; 0
    5c12:	80 e0       	ldi	r24, 0x00	; 0
    5c14:	90 e0       	ldi	r25, 0x00	; 0
    5c16:	0e 94 ae 42 	call	0x855c	; 0x855c <__adddi3>
    5c1a:	08 e0       	ldi	r16, 0x08	; 8
    5c1c:	0e 94 77 42 	call	0x84ee	; 0x84ee <__ashldi3>
    5c20:	59 01       	movw	r10, r18
    5c22:	6a 01       	movw	r12, r20
    5c24:	7b 01       	movw	r14, r22
    5c26:	8c 01       	movw	r16, r24
    5c28:	e6 15       	cp	r30, r6
    5c2a:	f7 05       	cpc	r31, r7
    5c2c:	51 f7       	brne	.-44     	; 0x5c02 <_ZN8SPIFlash11getUniqueIDEv+0xa0>
    5c2e:	df 91       	pop	r29
    5c30:	cf 91       	pop	r28
    5c32:	1f 91       	pop	r17
    5c34:	0f 91       	pop	r16
    5c36:	ff 90       	pop	r15
    5c38:	ef 90       	pop	r14
    5c3a:	df 90       	pop	r13
    5c3c:	cf 90       	pop	r12
    5c3e:	bf 90       	pop	r11
    5c40:	af 90       	pop	r10
    5c42:	9f 90       	pop	r9
    5c44:	8f 90       	pop	r8
    5c46:	7f 90       	pop	r7
    5c48:	6f 90       	pop	r6
    5c4a:	08 95       	ret

00005c4c <_ZN8SPIFlash7readStrEmR6Stringb>:
    5c4c:	2f 92       	push	r2
    5c4e:	3f 92       	push	r3
    5c50:	4f 92       	push	r4
    5c52:	5f 92       	push	r5
    5c54:	6f 92       	push	r6
    5c56:	7f 92       	push	r7
    5c58:	8f 92       	push	r8
    5c5a:	9f 92       	push	r9
    5c5c:	af 92       	push	r10
    5c5e:	bf 92       	push	r11
    5c60:	cf 92       	push	r12
    5c62:	df 92       	push	r13
    5c64:	ef 92       	push	r14
    5c66:	ff 92       	push	r15
    5c68:	0f 93       	push	r16
    5c6a:	1f 93       	push	r17
    5c6c:	cf 93       	push	r28
    5c6e:	df 93       	push	r29
    5c70:	cd b7       	in	r28, 0x3d	; 61
    5c72:	de b7       	in	r29, 0x3e	; 62
    5c74:	29 97       	sbiw	r28, 0x09	; 9
    5c76:	0f b6       	in	r0, 0x3f	; 63
    5c78:	f8 94       	cli
    5c7a:	de bf       	out	0x3e, r29	; 62
    5c7c:	0f be       	out	0x3f, r0	; 63
    5c7e:	cd bf       	out	0x3d, r28	; 61
    5c80:	6c 01       	movw	r12, r24
    5c82:	2a 01       	movw	r4, r20
    5c84:	3b 01       	movw	r6, r22
    5c86:	39 87       	std	Y+9, r19	; 0x09
    5c88:	28 87       	std	Y+8, r18	; 0x08
    5c8a:	0f 83       	std	Y+7, r16	; 0x07
    5c8c:	2d b6       	in	r2, 0x3d	; 61
    5c8e:	3e b6       	in	r3, 0x3e	; 62
    5c90:	e1 2c       	mov	r14, r1
    5c92:	f1 2c       	mov	r15, r1
    5c94:	87 01       	movw	r16, r14
    5c96:	9a 01       	movw	r18, r20
    5c98:	ab 01       	movw	r20, r22
    5c9a:	63 e0       	ldi	r22, 0x03	; 3
    5c9c:	bd d4       	rcall	.+2426   	; 0x6618 <_ZN8SPIFlash5_prepEhmm>
    5c9e:	88 23       	and	r24, r24
    5ca0:	09 f4       	brne	.+2      	; 0x5ca4 <_ZN8SPIFlash7readStrEmR6Stringb+0x58>
    5ca2:	4c c0       	rjmp	.+152    	; 0x5d3c <_ZN8SPIFlash7readStrEmR6Stringb+0xf0>
    5ca4:	8f 81       	ldd	r24, Y+7	; 0x07
    5ca6:	88 23       	and	r24, r24
    5ca8:	11 f0       	breq	.+4      	; 0x5cae <_ZN8SPIFlash7readStrEmR6Stringb+0x62>
    5caa:	6b e0       	ldi	r22, 0x0B	; 11
    5cac:	01 c0       	rjmp	.+2      	; 0x5cb0 <_ZN8SPIFlash7readStrEmR6Stringb+0x64>
    5cae:	63 e0       	ldi	r22, 0x03	; 3
    5cb0:	c6 01       	movw	r24, r12
    5cb2:	9d d3       	rcall	.+1850   	; 0x63ee <_ZN8SPIFlash9_beginSPIEh>
    5cb4:	e1 2c       	mov	r14, r1
    5cb6:	f1 2c       	mov	r15, r1
    5cb8:	81 2c       	mov	r8, r1
    5cba:	91 2c       	mov	r9, r1
    5cbc:	54 01       	movw	r10, r8
    5cbe:	40 e0       	ldi	r20, 0x00	; 0
    5cc0:	f6 01       	movw	r30, r12
    5cc2:	64 8d       	ldd	r22, Z+28	; 0x1c
    5cc4:	c6 01       	movw	r24, r12
    5cc6:	ff d3       	rcall	.+2046   	; 0x64c6 <_ZN8SPIFlash9_nextByteEch>
    5cc8:	90 e0       	ldi	r25, 0x00	; 0
    5cca:	0e 2c       	mov	r0, r14
    5ccc:	02 c0       	rjmp	.+4      	; 0x5cd2 <_ZN8SPIFlash7readStrEmR6Stringb+0x86>
    5cce:	88 0f       	add	r24, r24
    5cd0:	99 1f       	adc	r25, r25
    5cd2:	0a 94       	dec	r0
    5cd4:	e2 f7       	brpl	.-8      	; 0x5cce <_ZN8SPIFlash7readStrEmR6Stringb+0x82>
    5cd6:	09 2e       	mov	r0, r25
    5cd8:	00 0c       	add	r0, r0
    5cda:	aa 0b       	sbc	r26, r26
    5cdc:	bb 0b       	sbc	r27, r27
    5cde:	88 2a       	or	r8, r24
    5ce0:	99 2a       	or	r9, r25
    5ce2:	aa 2a       	or	r10, r26
    5ce4:	bb 2a       	or	r11, r27
    5ce6:	f8 e0       	ldi	r31, 0x08	; 8
    5ce8:	ef 0e       	add	r14, r31
    5cea:	f1 1c       	adc	r15, r1
    5cec:	80 e2       	ldi	r24, 0x20	; 32
    5cee:	e8 16       	cp	r14, r24
    5cf0:	f1 04       	cpc	r15, r1
    5cf2:	29 f7       	brne	.-54     	; 0x5cbe <_ZN8SPIFlash7readStrEmR6Stringb+0x72>
    5cf4:	c6 01       	movw	r24, r12
    5cf6:	fb d3       	rcall	.+2038   	; 0x64ee <_ZN8SPIFlash7_endSPIEv>
    5cf8:	ed b7       	in	r30, 0x3d	; 61
    5cfa:	fe b7       	in	r31, 0x3e	; 62
    5cfc:	e8 19       	sub	r30, r8
    5cfe:	f9 09       	sbc	r31, r9
    5d00:	0f b6       	in	r0, 0x3f	; 63
    5d02:	f8 94       	cli
    5d04:	fe bf       	out	0x3e, r31	; 62
    5d06:	0f be       	out	0x3f, r0	; 63
    5d08:	ed bf       	out	0x3d, r30	; 61
    5d0a:	8d b7       	in	r24, 0x3d	; 61
    5d0c:	9e b7       	in	r25, 0x3e	; 62
    5d0e:	01 96       	adiw	r24, 0x01	; 1
    5d10:	7c 01       	movw	r14, r24
    5d12:	b3 01       	movw	r22, r6
    5d14:	a2 01       	movw	r20, r4
    5d16:	4c 5f       	subi	r20, 0xFC	; 252
    5d18:	5f 4f       	sbci	r21, 0xFF	; 255
    5d1a:	6f 4f       	sbci	r22, 0xFF	; 255
    5d1c:	7f 4f       	sbci	r23, 0xFF	; 255
    5d1e:	95 01       	movw	r18, r10
    5d20:	84 01       	movw	r16, r8
    5d22:	c6 01       	movw	r24, r12
    5d24:	cb d2       	rcall	.+1430   	; 0x62bc <_ZN8SPIFlash13_addressCheckEmm>
    5d26:	88 23       	and	r24, r24
    5d28:	49 f0       	breq	.+18     	; 0x5d3c <_ZN8SPIFlash7readStrEmR6Stringb+0xf0>
    5d2a:	40 e0       	ldi	r20, 0x00	; 0
    5d2c:	5a ec       	ldi	r21, 0xCA	; 202
    5d2e:	6a e9       	ldi	r22, 0x9A	; 154
    5d30:	7b e3       	ldi	r23, 0x3B	; 59
    5d32:	c6 01       	movw	r24, r12
    5d34:	0f d4       	rcall	.+2078   	; 0x6554 <_ZN8SPIFlash8_notBusyEm>
    5d36:	78 2e       	mov	r7, r24
    5d38:	81 11       	cpse	r24, r1
    5d3a:	02 c0       	rjmp	.+4      	; 0x5d40 <_ZN8SPIFlash7readStrEmR6Stringb+0xf4>
    5d3c:	71 2c       	mov	r7, r1
    5d3e:	20 c0       	rjmp	.+64     	; 0x5d80 <_ZN8SPIFlash7readStrEmR6Stringb+0x134>
    5d40:	9f 81       	ldd	r25, Y+7	; 0x07
    5d42:	99 23       	and	r25, r25
    5d44:	11 f0       	breq	.+4      	; 0x5d4a <_ZN8SPIFlash7readStrEmR6Stringb+0xfe>
    5d46:	6b e0       	ldi	r22, 0x0B	; 11
    5d48:	01 c0       	rjmp	.+2      	; 0x5d4c <_ZN8SPIFlash7readStrEmR6Stringb+0x100>
    5d4a:	63 e0       	ldi	r22, 0x03	; 3
    5d4c:	c6 01       	movw	r24, r12
    5d4e:	4f d3       	rcall	.+1694   	; 0x63ee <_ZN8SPIFlash9_beginSPIEh>
    5d50:	95 01       	movw	r18, r10
    5d52:	84 01       	movw	r16, r8
    5d54:	a7 01       	movw	r20, r14
    5d56:	63 e0       	ldi	r22, 0x03	; 3
    5d58:	c6 01       	movw	r24, r12
    5d5a:	b8 d3       	rcall	.+1904   	; 0x64cc <_ZN8SPIFlash8_nextBufEhPhm>
    5d5c:	c6 01       	movw	r24, r12
    5d5e:	c7 d3       	rcall	.+1934   	; 0x64ee <_ZN8SPIFlash7_endSPIEv>
    5d60:	b7 01       	movw	r22, r14
    5d62:	ce 01       	movw	r24, r28
    5d64:	01 96       	adiw	r24, 0x01	; 1
    5d66:	0e 94 01 3e 	call	0x7c02	; 0x7c02 <_ZN6StringC1EPKc>
    5d6a:	be 01       	movw	r22, r28
    5d6c:	6f 5f       	subi	r22, 0xFF	; 255
    5d6e:	7f 4f       	sbci	r23, 0xFF	; 255
    5d70:	88 85       	ldd	r24, Y+8	; 0x08
    5d72:	99 85       	ldd	r25, Y+9	; 0x09
    5d74:	0e 94 75 3e 	call	0x7cea	; 0x7cea <_ZN6StringaSEOS_>
    5d78:	ce 01       	movw	r24, r28
    5d7a:	01 96       	adiw	r24, 0x01	; 1
    5d7c:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <_ZN6StringD1Ev>
    5d80:	87 2d       	mov	r24, r7
    5d82:	0f b6       	in	r0, 0x3f	; 63
    5d84:	f8 94       	cli
    5d86:	3e be       	out	0x3e, r3	; 62
    5d88:	0f be       	out	0x3f, r0	; 63
    5d8a:	2d be       	out	0x3d, r2	; 61
    5d8c:	29 96       	adiw	r28, 0x09	; 9
    5d8e:	0f b6       	in	r0, 0x3f	; 63
    5d90:	f8 94       	cli
    5d92:	de bf       	out	0x3e, r29	; 62
    5d94:	0f be       	out	0x3f, r0	; 63
    5d96:	cd bf       	out	0x3d, r28	; 61
    5d98:	df 91       	pop	r29
    5d9a:	cf 91       	pop	r28
    5d9c:	1f 91       	pop	r17
    5d9e:	0f 91       	pop	r16
    5da0:	ff 90       	pop	r15
    5da2:	ef 90       	pop	r14
    5da4:	df 90       	pop	r13
    5da6:	cf 90       	pop	r12
    5da8:	bf 90       	pop	r11
    5daa:	af 90       	pop	r10
    5dac:	9f 90       	pop	r9
    5dae:	8f 90       	pop	r8
    5db0:	7f 90       	pop	r7
    5db2:	6f 90       	pop	r6
    5db4:	5f 90       	pop	r5
    5db6:	4f 90       	pop	r4
    5db8:	3f 90       	pop	r3
    5dba:	2f 90       	pop	r2
    5dbc:	08 95       	ret

00005dbe <_ZN8SPIFlash8writeStrEmR6Stringb>:
    5dbe:	2f 92       	push	r2
    5dc0:	3f 92       	push	r3
    5dc2:	4f 92       	push	r4
    5dc4:	5f 92       	push	r5
    5dc6:	6f 92       	push	r6
    5dc8:	7f 92       	push	r7
    5dca:	8f 92       	push	r8
    5dcc:	9f 92       	push	r9
    5dce:	af 92       	push	r10
    5dd0:	bf 92       	push	r11
    5dd2:	cf 92       	push	r12
    5dd4:	df 92       	push	r13
    5dd6:	ef 92       	push	r14
    5dd8:	ff 92       	push	r15
    5dda:	0f 93       	push	r16
    5ddc:	1f 93       	push	r17
    5dde:	cf 93       	push	r28
    5de0:	df 93       	push	r29
    5de2:	cd b7       	in	r28, 0x3d	; 61
    5de4:	de b7       	in	r29, 0x3e	; 62
    5de6:	2f 97       	sbiw	r28, 0x0f	; 15
    5de8:	0f b6       	in	r0, 0x3f	; 63
    5dea:	f8 94       	cli
    5dec:	de bf       	out	0x3e, r29	; 62
    5dee:	0f be       	out	0x3f, r0	; 63
    5df0:	cd bf       	out	0x3d, r28	; 61
    5df2:	7c 01       	movw	r14, r24
    5df4:	1a 01       	movw	r2, r20
    5df6:	2b 01       	movw	r4, r22
    5df8:	c9 01       	movw	r24, r18
    5dfa:	0d 87       	std	Y+13, r16	; 0x0d
    5dfc:	2d b7       	in	r18, 0x3d	; 61
    5dfe:	3e b7       	in	r19, 0x3e	; 62
    5e00:	3f 87       	std	Y+15, r19	; 0x0f
    5e02:	2e 87       	std	Y+14, r18	; 0x0e
    5e04:	dc 01       	movw	r26, r24
    5e06:	14 96       	adiw	r26, 0x04	; 4
    5e08:	cd 90       	ld	r12, X+
    5e0a:	dc 90       	ld	r13, X
    5e0c:	15 97       	sbiw	r26, 0x05	; 5
    5e0e:	bf ef       	ldi	r27, 0xFF	; 255
    5e10:	cb 1a       	sub	r12, r27
    5e12:	db 0a       	sbc	r13, r27
    5e14:	dc 86       	std	Y+12, r13	; 0x0c
    5e16:	cb 86       	std	Y+11, r12	; 0x0b
    5e18:	ed b7       	in	r30, 0x3d	; 61
    5e1a:	fe b7       	in	r31, 0x3e	; 62
    5e1c:	ec 19       	sub	r30, r12
    5e1e:	fd 09       	sbc	r31, r13
    5e20:	0f b6       	in	r0, 0x3f	; 63
    5e22:	f8 94       	cli
    5e24:	fe bf       	out	0x3e, r31	; 62
    5e26:	0f be       	out	0x3f, r0	; 63
    5e28:	ed bf       	out	0x3d, r30	; 61
    5e2a:	2d b7       	in	r18, 0x3d	; 61
    5e2c:	3e b7       	in	r19, 0x3e	; 62
    5e2e:	2f 5f       	subi	r18, 0xFF	; 255
    5e30:	3f 4f       	sbci	r19, 0xFF	; 255
    5e32:	3a 83       	std	Y+2, r19	; 0x02
    5e34:	29 83       	std	Y+1, r18	; 0x01
    5e36:	20 e0       	ldi	r18, 0x00	; 0
    5e38:	30 e0       	ldi	r19, 0x00	; 0
    5e3a:	a6 01       	movw	r20, r12
    5e3c:	69 81       	ldd	r22, Y+1	; 0x01
    5e3e:	7a 81       	ldd	r23, Y+2	; 0x02
    5e40:	0e 94 9f 3f 	call	0x7f3e	; 0x7f3e <_ZNK6String8getBytesEPhjj>
    5e44:	c7 01       	movw	r24, r14
    5e46:	79 d3       	rcall	.+1778   	; 0x653a <_ZN8SPIFlash18_isChipPoweredDownEv>
    5e48:	78 2e       	mov	r7, r24
    5e4a:	81 11       	cpse	r24, r1
    5e4c:	81 c0       	rjmp	.+258    	; 0x5f50 <_ZN8SPIFlash8writeStrEmR6Stringb+0x192>
    5e4e:	04 e0       	ldi	r16, 0x04	; 4
    5e50:	10 e0       	ldi	r17, 0x00	; 0
    5e52:	20 e0       	ldi	r18, 0x00	; 0
    5e54:	30 e0       	ldi	r19, 0x00	; 0
    5e56:	b2 01       	movw	r22, r4
    5e58:	a1 01       	movw	r20, r2
    5e5a:	c7 01       	movw	r24, r14
    5e5c:	2f d2       	rcall	.+1118   	; 0x62bc <_ZN8SPIFlash13_addressCheckEmm>
    5e5e:	88 23       	and	r24, r24
    5e60:	09 f4       	brne	.+2      	; 0x5e64 <_ZN8SPIFlash8writeStrEmR6Stringb+0xa6>
    5e62:	76 c0       	rjmp	.+236    	; 0x5f50 <_ZN8SPIFlash8writeStrEmR6Stringb+0x192>
    5e64:	46 01       	movw	r8, r12
    5e66:	a1 2c       	mov	r10, r1
    5e68:	b1 2c       	mov	r11, r1
    5e6a:	95 01       	movw	r18, r10
    5e6c:	84 01       	movw	r16, r8
    5e6e:	0c 5f       	subi	r16, 0xFC	; 252
    5e70:	1f 4f       	sbci	r17, 0xFF	; 255
    5e72:	2f 4f       	sbci	r18, 0xFF	; 255
    5e74:	3f 4f       	sbci	r19, 0xFF	; 255
    5e76:	b2 01       	movw	r22, r4
    5e78:	a1 01       	movw	r20, r2
    5e7a:	c7 01       	movw	r24, r14
    5e7c:	ee d2       	rcall	.+1500   	; 0x645a <_ZN8SPIFlash15_notPrevWrittenEmm>
    5e7e:	88 23       	and	r24, r24
    5e80:	09 f4       	brne	.+2      	; 0x5e84 <_ZN8SPIFlash8writeStrEmR6Stringb+0xc6>
    5e82:	66 c0       	rjmp	.+204    	; 0x5f50 <_ZN8SPIFlash8writeStrEmR6Stringb+0x192>
    5e84:	40 e0       	ldi	r20, 0x00	; 0
    5e86:	5a ec       	ldi	r21, 0xCA	; 202
    5e88:	6a e9       	ldi	r22, 0x9A	; 154
    5e8a:	7b e3       	ldi	r23, 0x3B	; 59
    5e8c:	c7 01       	movw	r24, r14
    5e8e:	62 d3       	rcall	.+1732   	; 0x6554 <_ZN8SPIFlash8_notBusyEm>
    5e90:	88 23       	and	r24, r24
    5e92:	09 f4       	brne	.+2      	; 0x5e96 <_ZN8SPIFlash8writeStrEmR6Stringb+0xd8>
    5e94:	5d c0       	rjmp	.+186    	; 0x5f50 <_ZN8SPIFlash8writeStrEmR6Stringb+0x192>
    5e96:	61 e0       	ldi	r22, 0x01	; 1
    5e98:	c7 01       	movw	r24, r14
    5e9a:	a3 d3       	rcall	.+1862   	; 0x65e2 <_ZN8SPIFlash12_writeEnableEb>
    5e9c:	88 23       	and	r24, r24
    5e9e:	09 f4       	brne	.+2      	; 0x5ea2 <_ZN8SPIFlash8writeStrEmR6Stringb+0xe4>
    5ea0:	57 c0       	rjmp	.+174    	; 0x5f50 <_ZN8SPIFlash8writeStrEmR6Stringb+0x192>
    5ea2:	62 e0       	ldi	r22, 0x02	; 2
    5ea4:	c7 01       	movw	r24, r14
    5ea6:	a3 d2       	rcall	.+1350   	; 0x63ee <_ZN8SPIFlash9_beginSPIEh>
    5ea8:	00 e0       	ldi	r16, 0x00	; 0
    5eaa:	10 e0       	ldi	r17, 0x00	; 0
    5eac:	b5 01       	movw	r22, r10
    5eae:	a4 01       	movw	r20, r8
    5eb0:	00 2e       	mov	r0, r16
    5eb2:	04 c0       	rjmp	.+8      	; 0x5ebc <_ZN8SPIFlash8writeStrEmR6Stringb+0xfe>
    5eb4:	76 95       	lsr	r23
    5eb6:	67 95       	ror	r22
    5eb8:	57 95       	ror	r21
    5eba:	47 95       	ror	r20
    5ebc:	0a 94       	dec	r0
    5ebe:	d2 f7       	brpl	.-12     	; 0x5eb4 <_ZN8SPIFlash8writeStrEmR6Stringb+0xf6>
    5ec0:	d7 01       	movw	r26, r14
    5ec2:	5d 96       	adiw	r26, 0x1d	; 29
    5ec4:	6c 91       	ld	r22, X
    5ec6:	c7 01       	movw	r24, r14
    5ec8:	fe d2       	rcall	.+1532   	; 0x64c6 <_ZN8SPIFlash9_nextByteEch>
    5eca:	08 5f       	subi	r16, 0xF8	; 248
    5ecc:	1f 4f       	sbci	r17, 0xFF	; 255
    5ece:	00 32       	cpi	r16, 0x20	; 32
    5ed0:	11 05       	cpc	r17, r1
    5ed2:	61 f7       	brne	.-40     	; 0x5eac <_ZN8SPIFlash8writeStrEmR6Stringb+0xee>
    5ed4:	2c 9a       	sbi	0x05, 4	; 5
    5ed6:	c7 01       	movw	r24, r14
    5ed8:	0a d3       	rcall	.+1556   	; 0x64ee <_ZN8SPIFlash7_endSPIEv>
    5eda:	d2 01       	movw	r26, r4
    5edc:	c1 01       	movw	r24, r2
    5ede:	04 96       	adiw	r24, 0x04	; 4
    5ee0:	a1 1d       	adc	r26, r1
    5ee2:	b1 1d       	adc	r27, r1
    5ee4:	8b 83       	std	Y+3, r24	; 0x03
    5ee6:	9c 83       	std	Y+4, r25	; 0x04
    5ee8:	ad 83       	std	Y+5, r26	; 0x05
    5eea:	be 83       	std	Y+6, r27	; 0x06
    5eec:	95 01       	movw	r18, r10
    5eee:	84 01       	movw	r16, r8
    5ef0:	ac 01       	movw	r20, r24
    5ef2:	bd 01       	movw	r22, r26
    5ef4:	c7 01       	movw	r24, r14
    5ef6:	e2 d1       	rcall	.+964    	; 0x62bc <_ZN8SPIFlash13_addressCheckEmm>
    5ef8:	88 23       	and	r24, r24
    5efa:	51 f1       	breq	.+84     	; 0x5f50 <_ZN8SPIFlash8writeStrEmR6Stringb+0x192>
    5efc:	40 e0       	ldi	r20, 0x00	; 0
    5efe:	5a ec       	ldi	r21, 0xCA	; 202
    5f00:	6a e9       	ldi	r22, 0x9A	; 154
    5f02:	7b e3       	ldi	r23, 0x3B	; 59
    5f04:	c7 01       	movw	r24, r14
    5f06:	26 d3       	rcall	.+1612   	; 0x6554 <_ZN8SPIFlash8_notBusyEm>
    5f08:	88 23       	and	r24, r24
    5f0a:	11 f1       	breq	.+68     	; 0x5f50 <_ZN8SPIFlash8writeStrEmR6Stringb+0x192>
    5f0c:	61 e0       	ldi	r22, 0x01	; 1
    5f0e:	c7 01       	movw	r24, r14
    5f10:	68 d3       	rcall	.+1744   	; 0x65e2 <_ZN8SPIFlash12_writeEnableEb>
    5f12:	68 2e       	mov	r6, r24
    5f14:	81 11       	cpse	r24, r1
    5f16:	1e c0       	rjmp	.+60     	; 0x5f54 <_ZN8SPIFlash8writeStrEmR6Stringb+0x196>
    5f18:	1b c0       	rjmp	.+54     	; 0x5f50 <_ZN8SPIFlash8writeStrEmR6Stringb+0x192>
    5f1a:	2c 9a       	sbi	0x05, 4	; 5
    5f1c:	e9 85       	ldd	r30, Y+9	; 0x09
    5f1e:	fa 85       	ldd	r31, Y+10	; 0x0a
    5f20:	80 81       	ld	r24, Z
    5f22:	91 81       	ldd	r25, Z+1	; 0x01
    5f24:	a2 81       	ldd	r26, Z+2	; 0x02
    5f26:	b3 81       	ldd	r27, Z+3	; 0x03
    5f28:	80 0f       	add	r24, r16
    5f2a:	91 1f       	adc	r25, r17
    5f2c:	a1 1d       	adc	r26, r1
    5f2e:	b1 1d       	adc	r27, r1
    5f30:	80 83       	st	Z, r24
    5f32:	91 83       	std	Z+1, r25	; 0x01
    5f34:	a2 83       	std	Z+2, r26	; 0x02
    5f36:	b3 83       	std	Z+3, r27	; 0x03
    5f38:	40 0e       	add	r4, r16
    5f3a:	51 1e       	adc	r5, r17
    5f3c:	c0 1a       	sub	r12, r16
    5f3e:	d1 0a       	sbc	r13, r17
    5f40:	40 e0       	ldi	r20, 0x00	; 0
    5f42:	5a ec       	ldi	r21, 0xCA	; 202
    5f44:	6a e9       	ldi	r22, 0x9A	; 154
    5f46:	7b e3       	ldi	r23, 0x3B	; 59
    5f48:	c7 01       	movw	r24, r14
    5f4a:	04 d3       	rcall	.+1544   	; 0x6554 <_ZN8SPIFlash8_notBusyEm>
    5f4c:	81 11       	cpse	r24, r1
    5f4e:	31 c0       	rjmp	.+98     	; 0x5fb2 <_ZN8SPIFlash8writeStrEmR6Stringb+0x1f4>
    5f50:	71 2c       	mov	r7, r1
    5f52:	d8 c0       	rjmp	.+432    	; 0x6104 <_ZN8SPIFlash8writeStrEmR6Stringb+0x346>
    5f54:	33 24       	eor	r3, r3
    5f56:	00 e0       	ldi	r16, 0x00	; 0
    5f58:	11 e0       	ldi	r17, 0x01	; 1
    5f5a:	02 19       	sub	r16, r2
    5f5c:	13 09       	sbc	r17, r3
    5f5e:	c8 01       	movw	r24, r16
    5f60:	a0 e0       	ldi	r26, 0x00	; 0
    5f62:	b0 e0       	ldi	r27, 0x00	; 0
    5f64:	88 15       	cp	r24, r8
    5f66:	99 05       	cpc	r25, r9
    5f68:	aa 05       	cpc	r26, r10
    5f6a:	bb 05       	cpc	r27, r11
    5f6c:	08 f4       	brcc	.+2      	; 0x5f70 <_ZN8SPIFlash8writeStrEmR6Stringb+0x1b2>
    5f6e:	9e c0       	rjmp	.+316    	; 0x60ac <_ZN8SPIFlash8writeStrEmR6Stringb+0x2ee>
    5f70:	2c 98       	cbi	0x05, 4	; 5
    5f72:	42 e0       	ldi	r20, 0x02	; 2
    5f74:	d7 01       	movw	r26, r14
    5f76:	5d 96       	adiw	r26, 0x1d	; 29
    5f78:	6c 91       	ld	r22, X
    5f7a:	c7 01       	movw	r24, r14
    5f7c:	a4 d2       	rcall	.+1352   	; 0x64c6 <_ZN8SPIFlash9_nextByteEch>
    5f7e:	c7 01       	movw	r24, r14
    5f80:	f2 d1       	rcall	.+996    	; 0x6366 <_ZN8SPIFlash16_transferAddressEv>
    5f82:	09 81       	ldd	r16, Y+1	; 0x01
    5f84:	1a 81       	ldd	r17, Y+2	; 0x02
    5f86:	c8 01       	movw	r24, r16
    5f88:	e9 81       	ldd	r30, Y+1	; 0x01
    5f8a:	fa 81       	ldd	r31, Y+2	; 0x02
    5f8c:	8e 1b       	sub	r24, r30
    5f8e:	9f 0b       	sbc	r25, r31
    5f90:	a0 e0       	ldi	r26, 0x00	; 0
    5f92:	b0 e0       	ldi	r27, 0x00	; 0
    5f94:	88 15       	cp	r24, r8
    5f96:	99 05       	cpc	r25, r9
    5f98:	aa 05       	cpc	r26, r10
    5f9a:	bb 05       	cpc	r27, r11
    5f9c:	40 f4       	brcc	.+16     	; 0x5fae <_ZN8SPIFlash8writeStrEmR6Stringb+0x1f0>
    5f9e:	d8 01       	movw	r26, r16
    5fa0:	4d 91       	ld	r20, X+
    5fa2:	8d 01       	movw	r16, r26
    5fa4:	f7 01       	movw	r30, r14
    5fa6:	65 8d       	ldd	r22, Z+29	; 0x1d
    5fa8:	c7 01       	movw	r24, r14
    5faa:	8d d2       	rcall	.+1306   	; 0x64c6 <_ZN8SPIFlash9_nextByteEch>
    5fac:	ec cf       	rjmp	.-40     	; 0x5f86 <_ZN8SPIFlash8writeStrEmR6Stringb+0x1c8>
    5fae:	2c 9a       	sbi	0x05, 4	; 5
    5fb0:	0b c0       	rjmp	.+22     	; 0x5fc8 <_ZN8SPIFlash8writeStrEmR6Stringb+0x20a>
    5fb2:	61 e0       	ldi	r22, 0x01	; 1
    5fb4:	c7 01       	movw	r24, r14
    5fb6:	15 d3       	rcall	.+1578   	; 0x65e2 <_ZN8SPIFlash12_writeEnableEb>
    5fb8:	88 23       	and	r24, r24
    5fba:	51 f2       	breq	.-108    	; 0x5f50 <_ZN8SPIFlash8writeStrEmR6Stringb+0x192>
    5fbc:	00 e0       	ldi	r16, 0x00	; 0
    5fbe:	11 e0       	ldi	r17, 0x01	; 1
    5fc0:	c1 14       	cp	r12, r1
    5fc2:	d1 04       	cpc	r13, r1
    5fc4:	09 f0       	breq	.+2      	; 0x5fc8 <_ZN8SPIFlash8writeStrEmR6Stringb+0x20a>
    5fc6:	79 c0       	rjmp	.+242    	; 0x60ba <_ZN8SPIFlash8writeStrEmR6Stringb+0x2fc>
    5fc8:	fd 85       	ldd	r31, Y+13	; 0x0d
    5fca:	f1 11       	cpse	r31, r1
    5fcc:	03 c0       	rjmp	.+6      	; 0x5fd4 <_ZN8SPIFlash8writeStrEmR6Stringb+0x216>
    5fce:	c7 01       	movw	r24, r14
    5fd0:	8e d2       	rcall	.+1308   	; 0x64ee <_ZN8SPIFlash7_endSPIEv>
    5fd2:	64 c0       	rjmp	.+200    	; 0x609c <_ZN8SPIFlash8writeStrEmR6Stringb+0x2de>
    5fd4:	cd b6       	in	r12, 0x3d	; 61
    5fd6:	de b6       	in	r13, 0x3e	; 62
    5fd8:	40 e0       	ldi	r20, 0x00	; 0
    5fda:	5a ec       	ldi	r21, 0xCA	; 202
    5fdc:	6a e9       	ldi	r22, 0x9A	; 154
    5fde:	7b e3       	ldi	r23, 0x3B	; 59
    5fe0:	c7 01       	movw	r24, r14
    5fe2:	b8 d2       	rcall	.+1392   	; 0x6554 <_ZN8SPIFlash8_notBusyEm>
    5fe4:	68 2e       	mov	r6, r24
    5fe6:	88 23       	and	r24, r24
    5fe8:	09 f4       	brne	.+2      	; 0x5fec <_ZN8SPIFlash8writeStrEmR6Stringb+0x22e>
    5fea:	5a c0       	rjmp	.+180    	; 0x60a0 <_ZN8SPIFlash8writeStrEmR6Stringb+0x2e2>
    5fec:	f7 01       	movw	r30, r14
    5fee:	e6 5a       	subi	r30, 0xA6	; 166
    5ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    5ff2:	8b 81       	ldd	r24, Y+3	; 0x03
    5ff4:	9c 81       	ldd	r25, Y+4	; 0x04
    5ff6:	ad 81       	ldd	r26, Y+5	; 0x05
    5ff8:	be 81       	ldd	r27, Y+6	; 0x06
    5ffa:	80 83       	st	Z, r24
    5ffc:	91 83       	std	Z+1, r25	; 0x01
    5ffe:	a2 83       	std	Z+2, r26	; 0x02
    6000:	b3 83       	std	Z+3, r27	; 0x03
    6002:	ad b7       	in	r26, 0x3d	; 61
    6004:	be b7       	in	r27, 0x3e	; 62
    6006:	eb 85       	ldd	r30, Y+11	; 0x0b
    6008:	fc 85       	ldd	r31, Y+12	; 0x0c
    600a:	ae 1b       	sub	r26, r30
    600c:	bf 0b       	sbc	r27, r31
    600e:	0f b6       	in	r0, 0x3f	; 63
    6010:	f8 94       	cli
    6012:	be bf       	out	0x3e, r27	; 62
    6014:	0f be       	out	0x3f, r0	; 63
    6016:	ad bf       	out	0x3d, r26	; 61
    6018:	0d b7       	in	r16, 0x3d	; 61
    601a:	1e b7       	in	r17, 0x3e	; 62
    601c:	0f 5f       	subi	r16, 0xFF	; 255
    601e:	1f 4f       	sbci	r17, 0xFF	; 255
    6020:	2c 98       	cbi	0x05, 4	; 5
    6022:	43 e0       	ldi	r20, 0x03	; 3
    6024:	d7 01       	movw	r26, r14
    6026:	5d 96       	adiw	r26, 0x1d	; 29
    6028:	6c 91       	ld	r22, X
    602a:	c7 01       	movw	r24, r14
    602c:	4c d2       	rcall	.+1176   	; 0x64c6 <_ZN8SPIFlash9_nextByteEch>
    602e:	c7 01       	movw	r24, r14
    6030:	9a d1       	rcall	.+820    	; 0x6366 <_ZN8SPIFlash16_transferAddressEv>
    6032:	51 2c       	mov	r5, r1
    6034:	85 2d       	mov	r24, r5
    6036:	90 e0       	ldi	r25, 0x00	; 0
    6038:	a0 e0       	ldi	r26, 0x00	; 0
    603a:	b0 e0       	ldi	r27, 0x00	; 0
    603c:	88 15       	cp	r24, r8
    603e:	99 05       	cpc	r25, r9
    6040:	aa 05       	cpc	r26, r10
    6042:	bb 05       	cpc	r27, r11
    6044:	58 f4       	brcc	.+22     	; 0x605c <_ZN8SPIFlash8writeStrEmR6Stringb+0x29e>
    6046:	40 e0       	ldi	r20, 0x00	; 0
    6048:	f7 01       	movw	r30, r14
    604a:	64 8d       	ldd	r22, Z+28	; 0x1c
    604c:	c7 01       	movw	r24, r14
    604e:	3b d2       	rcall	.+1142   	; 0x64c6 <_ZN8SPIFlash9_nextByteEch>
    6050:	f8 01       	movw	r30, r16
    6052:	e5 0d       	add	r30, r5
    6054:	f1 1d       	adc	r31, r1
    6056:	80 83       	st	Z, r24
    6058:	53 94       	inc	r5
    605a:	ec cf       	rjmp	.-40     	; 0x6034 <_ZN8SPIFlash8writeStrEmR6Stringb+0x276>
    605c:	c7 01       	movw	r24, r14
    605e:	47 d2       	rcall	.+1166   	; 0x64ee <_ZN8SPIFlash7_endSPIEv>
    6060:	80 e0       	ldi	r24, 0x00	; 0
    6062:	48 2f       	mov	r20, r24
    6064:	50 e0       	ldi	r21, 0x00	; 0
    6066:	60 e0       	ldi	r22, 0x00	; 0
    6068:	70 e0       	ldi	r23, 0x00	; 0
    606a:	48 15       	cp	r20, r8
    606c:	59 05       	cpc	r21, r9
    606e:	6a 05       	cpc	r22, r10
    6070:	7b 05       	cpc	r23, r11
    6072:	78 f4       	brcc	.+30     	; 0x6092 <_ZN8SPIFlash8writeStrEmR6Stringb+0x2d4>
    6074:	28 2f       	mov	r18, r24
    6076:	30 e0       	ldi	r19, 0x00	; 0
    6078:	f8 01       	movw	r30, r16
    607a:	e2 0f       	add	r30, r18
    607c:	f3 1f       	adc	r31, r19
    607e:	a9 81       	ldd	r26, Y+1	; 0x01
    6080:	ba 81       	ldd	r27, Y+2	; 0x02
    6082:	a2 0f       	add	r26, r18
    6084:	b3 1f       	adc	r27, r19
    6086:	40 81       	ld	r20, Z
    6088:	9c 91       	ld	r25, X
    608a:	49 13       	cpse	r20, r25
    608c:	09 c0       	rjmp	.+18     	; 0x60a0 <_ZN8SPIFlash8writeStrEmR6Stringb+0x2e2>
    608e:	8f 5f       	subi	r24, 0xFF	; 255
    6090:	e8 cf       	rjmp	.-48     	; 0x6062 <_ZN8SPIFlash8writeStrEmR6Stringb+0x2a4>
    6092:	0f b6       	in	r0, 0x3f	; 63
    6094:	f8 94       	cli
    6096:	de be       	out	0x3e, r13	; 62
    6098:	0f be       	out	0x3f, r0	; 63
    609a:	cd be       	out	0x3d, r12	; 61
    609c:	76 2c       	mov	r7, r6
    609e:	32 c0       	rjmp	.+100    	; 0x6104 <_ZN8SPIFlash8writeStrEmR6Stringb+0x346>
    60a0:	0f b6       	in	r0, 0x3f	; 63
    60a2:	f8 94       	cli
    60a4:	de be       	out	0x3e, r13	; 62
    60a6:	0f be       	out	0x3f, r0	; 63
    60a8:	cd be       	out	0x3d, r12	; 61
    60aa:	2c c0       	rjmp	.+88     	; 0x6104 <_ZN8SPIFlash8writeStrEmR6Stringb+0x346>
    60ac:	41 2c       	mov	r4, r1
    60ae:	51 2c       	mov	r5, r1
    60b0:	97 01       	movw	r18, r14
    60b2:	26 5a       	subi	r18, 0xA6	; 166
    60b4:	3f 4f       	sbci	r19, 0xFF	; 255
    60b6:	3a 87       	std	Y+10, r19	; 0x0a
    60b8:	29 87       	std	Y+9, r18	; 0x09
    60ba:	c0 16       	cp	r12, r16
    60bc:	d1 06       	cpc	r13, r17
    60be:	08 f4       	brcc	.+2      	; 0x60c2 <_ZN8SPIFlash8writeStrEmR6Stringb+0x304>
    60c0:	86 01       	movw	r16, r12
    60c2:	2c 98       	cbi	0x05, 4	; 5
    60c4:	42 e0       	ldi	r20, 0x02	; 2
    60c6:	d7 01       	movw	r26, r14
    60c8:	5d 96       	adiw	r26, 0x1d	; 29
    60ca:	6c 91       	ld	r22, X
    60cc:	c7 01       	movw	r24, r14
    60ce:	fb d1       	rcall	.+1014   	; 0x64c6 <_ZN8SPIFlash9_nextByteEch>
    60d0:	c7 01       	movw	r24, r14
    60d2:	49 d1       	rcall	.+658    	; 0x6366 <_ZN8SPIFlash16_transferAddressEv>
    60d4:	e9 81       	ldd	r30, Y+1	; 0x01
    60d6:	fa 81       	ldd	r31, Y+2	; 0x02
    60d8:	e4 0d       	add	r30, r4
    60da:	f5 1d       	adc	r31, r5
    60dc:	f8 87       	std	Y+8, r31	; 0x08
    60de:	ef 83       	std	Y+7, r30	; 0x07
    60e0:	1f 01       	movw	r2, r30
    60e2:	c1 01       	movw	r24, r2
    60e4:	2f 81       	ldd	r18, Y+7	; 0x07
    60e6:	38 85       	ldd	r19, Y+8	; 0x08
    60e8:	82 1b       	sub	r24, r18
    60ea:	93 0b       	sbc	r25, r19
    60ec:	80 17       	cp	r24, r16
    60ee:	91 07       	cpc	r25, r17
    60f0:	08 f0       	brcs	.+2      	; 0x60f4 <_ZN8SPIFlash8writeStrEmR6Stringb+0x336>
    60f2:	13 cf       	rjmp	.-474    	; 0x5f1a <_ZN8SPIFlash8writeStrEmR6Stringb+0x15c>
    60f4:	d1 01       	movw	r26, r2
    60f6:	4d 91       	ld	r20, X+
    60f8:	1d 01       	movw	r2, r26
    60fa:	f7 01       	movw	r30, r14
    60fc:	65 8d       	ldd	r22, Z+29	; 0x1d
    60fe:	c7 01       	movw	r24, r14
    6100:	e2 d1       	rcall	.+964    	; 0x64c6 <_ZN8SPIFlash9_nextByteEch>
    6102:	ef cf       	rjmp	.-34     	; 0x60e2 <_ZN8SPIFlash8writeStrEmR6Stringb+0x324>
    6104:	87 2d       	mov	r24, r7
    6106:	ae 85       	ldd	r26, Y+14	; 0x0e
    6108:	bf 85       	ldd	r27, Y+15	; 0x0f
    610a:	0f b6       	in	r0, 0x3f	; 63
    610c:	f8 94       	cli
    610e:	be bf       	out	0x3e, r27	; 62
    6110:	0f be       	out	0x3f, r0	; 63
    6112:	ad bf       	out	0x3d, r26	; 61
    6114:	2f 96       	adiw	r28, 0x0f	; 15
    6116:	0f b6       	in	r0, 0x3f	; 63
    6118:	f8 94       	cli
    611a:	de bf       	out	0x3e, r29	; 62
    611c:	0f be       	out	0x3f, r0	; 63
    611e:	cd bf       	out	0x3d, r28	; 61
    6120:	df 91       	pop	r29
    6122:	cf 91       	pop	r28
    6124:	1f 91       	pop	r17
    6126:	0f 91       	pop	r16
    6128:	ff 90       	pop	r15
    612a:	ef 90       	pop	r14
    612c:	df 90       	pop	r13
    612e:	cf 90       	pop	r12
    6130:	bf 90       	pop	r11
    6132:	af 90       	pop	r10
    6134:	9f 90       	pop	r9
    6136:	8f 90       	pop	r8
    6138:	7f 90       	pop	r7
    613a:	6f 90       	pop	r6
    613c:	5f 90       	pop	r5
    613e:	4f 90       	pop	r4
    6140:	3f 90       	pop	r3
    6142:	2f 90       	pop	r2
    6144:	08 95       	ret

00006146 <_ZN8SPIFlash11eraseSectorEm>:
    6146:	ef 92       	push	r14
    6148:	ff 92       	push	r15
    614a:	0f 93       	push	r16
    614c:	1f 93       	push	r17
    614e:	cf 93       	push	r28
    6150:	df 93       	push	r29
    6152:	ec 01       	movw	r28, r24
    6154:	88 a9       	ldd	r24, Y+48	; 0x30
    6156:	81 11       	cpse	r24, r1
    6158:	05 c0       	rjmp	.+10     	; 0x6164 <_ZN8SPIFlash11eraseSectorEm+0x1e>
    615a:	40 e0       	ldi	r20, 0x00	; 0
    615c:	6c e0       	ldi	r22, 0x0C	; 12
    615e:	ce 01       	movw	r24, r28
    6160:	ff d3       	rcall	.+2046   	; 0x6960 <_ZN8SPIFlash13_troubleshootEhb>
    6162:	1d c0       	rjmp	.+58     	; 0x619e <_ZN8SPIFlash11eraseSectorEm+0x58>
    6164:	e1 2c       	mov	r14, r1
    6166:	10 e1       	ldi	r17, 0x10	; 16
    6168:	f1 2e       	mov	r15, r17
    616a:	00 e0       	ldi	r16, 0x00	; 0
    616c:	10 e0       	ldi	r17, 0x00	; 0
    616e:	9a 01       	movw	r18, r20
    6170:	ab 01       	movw	r20, r22
    6172:	6f ee       	ldi	r22, 0xEF	; 239
    6174:	ce 01       	movw	r24, r28
    6176:	50 d2       	rcall	.+1184   	; 0x6618 <_ZN8SPIFlash5_prepEhmm>
    6178:	88 23       	and	r24, r24
    617a:	89 f0       	breq	.+34     	; 0x619e <_ZN8SPIFlash11eraseSectorEm+0x58>
    617c:	69 a9       	ldd	r22, Y+49	; 0x31
    617e:	ce 01       	movw	r24, r28
    6180:	36 d1       	rcall	.+620    	; 0x63ee <_ZN8SPIFlash9_beginSPIEh>
    6182:	ce 01       	movw	r24, r28
    6184:	b4 d1       	rcall	.+872    	; 0x64ee <_ZN8SPIFlash7_endSPIEv>
    6186:	4a a9       	ldd	r20, Y+50	; 0x32
    6188:	5b a9       	ldd	r21, Y+51	; 0x33
    618a:	6c a9       	ldd	r22, Y+52	; 0x34
    618c:	7d a9       	ldd	r23, Y+53	; 0x35
    618e:	ce 01       	movw	r24, r28
    6190:	df 91       	pop	r29
    6192:	cf 91       	pop	r28
    6194:	1f 91       	pop	r17
    6196:	0f 91       	pop	r16
    6198:	ff 90       	pop	r15
    619a:	ef 90       	pop	r14
    619c:	db c1       	rjmp	.+950    	; 0x6554 <_ZN8SPIFlash8_notBusyEm>
    619e:	80 e0       	ldi	r24, 0x00	; 0
    61a0:	df 91       	pop	r29
    61a2:	cf 91       	pop	r28
    61a4:	1f 91       	pop	r17
    61a6:	0f 91       	pop	r16
    61a8:	ff 90       	pop	r15
    61aa:	ef 90       	pop	r14
    61ac:	08 95       	ret

000061ae <_ZN8SPIFlash9eraseChipEv>:
    61ae:	1f 93       	push	r17
    61b0:	cf 93       	push	r28
    61b2:	df 93       	push	r29
    61b4:	ec 01       	movw	r28, r24
    61b6:	c1 d1       	rcall	.+898    	; 0x653a <_ZN8SPIFlash18_isChipPoweredDownEv>
    61b8:	81 11       	cpse	r24, r1
    61ba:	1d c0       	rjmp	.+58     	; 0x61f6 <_ZN8SPIFlash9eraseChipEv+0x48>
    61bc:	40 e0       	ldi	r20, 0x00	; 0
    61be:	5a ec       	ldi	r21, 0xCA	; 202
    61c0:	6a e9       	ldi	r22, 0x9A	; 154
    61c2:	7b e3       	ldi	r23, 0x3B	; 59
    61c4:	ce 01       	movw	r24, r28
    61c6:	c6 d1       	rcall	.+908    	; 0x6554 <_ZN8SPIFlash8_notBusyEm>
    61c8:	88 23       	and	r24, r24
    61ca:	a9 f0       	breq	.+42     	; 0x61f6 <_ZN8SPIFlash9eraseChipEv+0x48>
    61cc:	61 e0       	ldi	r22, 0x01	; 1
    61ce:	ce 01       	movw	r24, r28
    61d0:	08 d2       	rcall	.+1040   	; 0x65e2 <_ZN8SPIFlash12_writeEnableEb>
    61d2:	18 2f       	mov	r17, r24
    61d4:	88 23       	and	r24, r24
    61d6:	79 f0       	breq	.+30     	; 0x61f6 <_ZN8SPIFlash9eraseChipEv+0x48>
    61d8:	fe 01       	movw	r30, r28
    61da:	e7 5b       	subi	r30, 0xB7	; 183
    61dc:	ff 4f       	sbci	r31, 0xFF	; 255
    61de:	60 81       	ld	r22, Z
    61e0:	ce 01       	movw	r24, r28
    61e2:	05 d1       	rcall	.+522    	; 0x63ee <_ZN8SPIFlash9_beginSPIEh>
    61e4:	ce 01       	movw	r24, r28
    61e6:	83 d1       	rcall	.+774    	; 0x64ee <_ZN8SPIFlash7_endSPIEv>
    61e8:	ce 01       	movw	r24, r28
    61ea:	99 d1       	rcall	.+818    	; 0x651e <_ZN8SPIFlash10_readStat1Ev>
    61ec:	80 fd       	sbrc	r24, 0
    61ee:	fc cf       	rjmp	.-8      	; 0x61e8 <_ZN8SPIFlash9eraseChipEv+0x3a>
    61f0:	ce 01       	movw	r24, r28
    61f2:	7d d1       	rcall	.+762    	; 0x64ee <_ZN8SPIFlash7_endSPIEv>
    61f4:	01 c0       	rjmp	.+2      	; 0x61f8 <_ZN8SPIFlash9eraseChipEv+0x4a>
    61f6:	10 e0       	ldi	r17, 0x00	; 0
    61f8:	81 2f       	mov	r24, r17
    61fa:	df 91       	pop	r29
    61fc:	cf 91       	pop	r28
    61fe:	1f 91       	pop	r17
    6200:	08 95       	ret

00006202 <_ZN8SPIFlash9powerDownEv>:

//Puts device in low power state. Good for battery powered operations.
//In powerDown() the chip will only respond to powerUp()
bool SPIFlash::powerDown(void) {
    6202:	0f 93       	push	r16
    6204:	1f 93       	push	r17
    6206:	cf 93       	push	r28
    6208:	8c 01       	movw	r16, r24
  if (_chip.manufacturerID != MICROCHIP_MANID) {
    620a:	fc 01       	movw	r30, r24
    620c:	85 a1       	ldd	r24, Z+37	; 0x25
    620e:	8f 3b       	cpi	r24, 0xBF	; 191
    6210:	c9 f0       	breq	.+50     	; 0x6244 <_ZN8SPIFlash9powerDownEv+0x42>
    #ifdef RUNDIAGNOSTIC
      _spifuncruntime = micros();
    #endif
  	if(!_notBusy(20))
    6212:	44 e1       	ldi	r20, 0x14	; 20
    6214:	50 e0       	ldi	r21, 0x00	; 0
    6216:	60 e0       	ldi	r22, 0x00	; 0
    6218:	70 e0       	ldi	r23, 0x00	; 0
    621a:	c8 01       	movw	r24, r16
    621c:	9b d1       	rcall	.+822    	; 0x6554 <_ZN8SPIFlash8_notBusyEm>
    621e:	88 23       	and	r24, r24
    6220:	b1 f0       	breq	.+44     	; 0x624e <_ZN8SPIFlash9powerDownEv+0x4c>
  		return false;

  	_beginSPI(POWERDOWN);
    6222:	69 eb       	ldi	r22, 0xB9	; 185
    6224:	c8 01       	movw	r24, r16
    6226:	e3 d0       	rcall	.+454    	; 0x63ee <_ZN8SPIFlash9_beginSPIEh>
    _endSPI();
    6228:	c8 01       	movw	r24, r16
    622a:	61 d1       	rcall	.+706    	; 0x64ee <_ZN8SPIFlash7_endSPIEv>
    622c:	fa e1       	ldi	r31, 0x1A	; 26
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    622e:	fa 95       	dec	r31
    6230:	f1 f7       	brne	.-4      	; 0x622e <_ZN8SPIFlash9powerDownEv+0x2c>
    6232:	00 c0       	rjmp	.+0      	; 0x6234 <_ZN8SPIFlash9powerDownEv+0x32>
    6234:	c1 e0       	ldi	r28, 0x01	; 1
      chipPoweredDown = true;
      bool _retVal = !_writeEnable(false);
      _spifuncruntime = micros() - _spifuncruntime;
      return _retVal;
    #else
      chipPoweredDown = true;
    6236:	f8 01       	movw	r30, r16
    6238:	c7 87       	std	Z+15, r28	; 0x0f
      return !_writeEnable(false);
    623a:	60 e0       	ldi	r22, 0x00	; 0
    623c:	c8 01       	movw	r24, r16
    623e:	d1 d1       	rcall	.+930    	; 0x65e2 <_ZN8SPIFlash12_writeEnableEb>
    6240:	8c 27       	eor	r24, r28
    6242:	05 c0       	rjmp	.+10     	; 0x624e <_ZN8SPIFlash9powerDownEv+0x4c>
    #endif
  }
  else {
    _troubleshoot(UNSUPPORTEDFUNC);
    6244:	40 e0       	ldi	r20, 0x00	; 0
    6246:	6c e0       	ldi	r22, 0x0C	; 12
    6248:	c8 01       	movw	r24, r16
    624a:	8a d3       	rcall	.+1812   	; 0x6960 <_ZN8SPIFlash13_troubleshootEhb>
    624c:	80 e0       	ldi	r24, 0x00	; 0
    return false;
    624e:	cf 91       	pop	r28
  }
}
    6250:	1f 91       	pop	r17
    6252:	0f 91       	pop	r16
    6254:	08 95       	ret

00006256 <_ZN8SPIFlash7powerUpEv>:
    6256:	1f 93       	push	r17

//Wakes chip from low power state.
bool SPIFlash::powerUp(void) {
    6258:	cf 93       	push	r28
    625a:	df 93       	push	r29
    625c:	ec 01       	movw	r28, r24
  #ifdef RUNDIAGNOSTIC
    _spifuncruntime = micros();
  #endif
	_beginSPI(RELEASE);
    625e:	6b ea       	ldi	r22, 0xAB	; 171
    6260:	c6 d0       	rcall	.+396    	; 0x63ee <_ZN8SPIFlash9_beginSPIEh>
  _endSPI();
    6262:	ce 01       	movw	r24, r28
    6264:	44 d1       	rcall	.+648    	; 0x64ee <_ZN8SPIFlash7_endSPIEv>
    6266:	80 e1       	ldi	r24, 0x10	; 16
    6268:	8a 95       	dec	r24
    626a:	f1 f7       	brne	.-4      	; 0x6268 <_ZN8SPIFlash7powerUpEv+0x12>
      chipPoweredDown = false;
      return true;
    }
    return false;
  #else
  if (_writeEnable(false)) {
    626c:	60 e0       	ldi	r22, 0x00	; 0
    626e:	ce 01       	movw	r24, r28
    6270:	b8 d1       	rcall	.+880    	; 0x65e2 <_ZN8SPIFlash12_writeEnableEb>
    6272:	18 2f       	mov	r17, r24
    6274:	88 23       	and	r24, r24
    _writeDisable();
    6276:	19 f0       	breq	.+6      	; 0x627e <_ZN8SPIFlash7powerUpEv+0x28>
    6278:	ce 01       	movw	r24, r28
    627a:	30 d2       	rcall	.+1120   	; 0x66dc <_ZN8SPIFlash13_writeDisableEv>
    chipPoweredDown = false;
    627c:	1f 86       	std	Y+15, r1	; 0x0f
    return true;
  }
  return false;
  #endif
}
    627e:	81 2f       	mov	r24, r17
    6280:	df 91       	pop	r29
    6282:	cf 91       	pop	r28
    6284:	1f 91       	pop	r17
    6286:	08 95       	ret

00006288 <_ZN8SPIClass8transferEPvj.part.0>:
   _nextByte(READ);
   *b1 = _nextByte(READ);
   *b2 = _nextByte(READ);
   CHIP_DESELECT
   return true;
 }
    6288:	fc 01       	movw	r30, r24
    628a:	20 81       	ld	r18, Z
    628c:	2e bd       	out	0x2e, r18	; 46
    628e:	9b 01       	movw	r18, r22
    6290:	21 50       	subi	r18, 0x01	; 1
    6292:	31 09       	sbc	r19, r1
    6294:	41 f0       	breq	.+16     	; 0x62a6 <_ZN8SPIClass8transferEPvj.part.0+0x1e>
    6296:	51 81       	ldd	r21, Z+1	; 0x01
    6298:	0d b4       	in	r0, 0x2d	; 45
    629a:	07 fe       	sbrs	r0, 7
    629c:	fd cf       	rjmp	.-6      	; 0x6298 <_ZN8SPIClass8transferEPvj.part.0+0x10>
    629e:	4e b5       	in	r20, 0x2e	; 46
    62a0:	5e bd       	out	0x2e, r21	; 46
    62a2:	41 93       	st	Z+, r20
    62a4:	f5 cf       	rjmp	.-22     	; 0x6290 <_ZN8SPIClass8transferEPvj.part.0+0x8>
    62a6:	61 50       	subi	r22, 0x01	; 1
    62a8:	71 09       	sbc	r23, r1
    62aa:	fc 01       	movw	r30, r24
    62ac:	e6 0f       	add	r30, r22
    62ae:	f7 1f       	adc	r31, r23
    62b0:	0d b4       	in	r0, 0x2d	; 45
    62b2:	07 fe       	sbrs	r0, 7
    62b4:	fd cf       	rjmp	.-6      	; 0x62b0 <_ZN8SPIClass8transferEPvj.part.0+0x28>
    62b6:	8e b5       	in	r24, 0x2e	; 46
    62b8:	80 83       	st	Z, r24
    62ba:	08 95       	ret

000062bc <_ZN8SPIFlash13_addressCheckEmm>:
    62bc:	8f 92       	push	r8
    62be:	9f 92       	push	r9
    62c0:	af 92       	push	r10
    62c2:	bf 92       	push	r11
    62c4:	cf 92       	push	r12
    62c6:	df 92       	push	r13
    62c8:	ef 92       	push	r14
    62ca:	ff 92       	push	r15
    62cc:	0f 93       	push	r16
    62ce:	1f 93       	push	r17
    62d0:	cf 93       	push	r28
    62d2:	df 93       	push	r29
    62d4:	ec 01       	movw	r28, r24
    62d6:	4a 01       	movw	r8, r20
    62d8:	5b 01       	movw	r10, r22
    62da:	68 01       	movw	r12, r16
    62dc:	79 01       	movw	r14, r18
    62de:	60 e0       	ldi	r22, 0x00	; 0
    62e0:	0e dc       	rcall	.-2020   	; 0x5afe <_ZN8SPIFlash5errorEb>
    62e2:	87 7f       	andi	r24, 0xF7	; 247
    62e4:	83 30       	cpi	r24, 0x03	; 3
    62e6:	89 f1       	breq	.+98     	; 0x634a <_ZN8SPIFlash13_addressCheckEmm+0x8e>
    62e8:	88 a5       	ldd	r24, Y+40	; 0x28
    62ea:	99 a5       	ldd	r25, Y+41	; 0x29
    62ec:	aa a5       	ldd	r26, Y+42	; 0x2a
    62ee:	bb a5       	ldd	r27, Y+43	; 0x2b
    62f0:	00 97       	sbiw	r24, 0x00	; 0
    62f2:	a1 05       	cpc	r26, r1
    62f4:	b1 05       	cpc	r27, r1
    62f6:	31 f4       	brne	.+12     	; 0x6304 <_ZN8SPIFlash13_addressCheckEmm+0x48>
    62f8:	40 e0       	ldi	r20, 0x00	; 0
    62fa:	61 e0       	ldi	r22, 0x01	; 1
    62fc:	8c e8       	ldi	r24, 0x8C	; 140
    62fe:	9c e0       	ldi	r25, 0x0C	; 12
    6300:	73 db       	rcall	.-2330   	; 0x59e8 <_ZN11Diagnostics12troubleshootEhb>
    6302:	23 c0       	rjmp	.+70     	; 0x634a <_ZN8SPIFlash13_addressCheckEmm+0x8e>
    6304:	95 01       	movw	r18, r10
    6306:	84 01       	movw	r16, r8
    6308:	0c 0d       	add	r16, r12
    630a:	1d 1d       	adc	r17, r13
    630c:	2e 1d       	adc	r18, r14
    630e:	3f 1d       	adc	r19, r15
    6310:	fe 01       	movw	r30, r28
    6312:	e2 5a       	subi	r30, 0xA2	; 162
    6314:	ff 4f       	sbci	r31, 0xFF	; 255
    6316:	c6 5a       	subi	r28, 0xA6	; 166
    6318:	df 4f       	sbci	r29, 0xFF	; 255
    631a:	08 17       	cp	r16, r24
    631c:	19 07       	cpc	r17, r25
    631e:	2a 07       	cpc	r18, r26
    6320:	3b 07       	cpc	r19, r27
    6322:	48 f0       	brcs	.+18     	; 0x6336 <_ZN8SPIFlash13_addressCheckEmm+0x7a>
    6324:	08 1b       	sub	r16, r24
    6326:	19 0b       	sbc	r17, r25
    6328:	2a 0b       	sbc	r18, r26
    632a:	3b 0b       	sbc	r19, r27
    632c:	00 83       	st	Z, r16
    632e:	11 83       	std	Z+1, r17	; 0x01
    6330:	22 83       	std	Z+2, r18	; 0x02
    6332:	33 83       	std	Z+3, r19	; 0x03
    6334:	04 c0       	rjmp	.+8      	; 0x633e <_ZN8SPIFlash13_addressCheckEmm+0x82>
    6336:	10 82       	st	Z, r1
    6338:	11 82       	std	Z+1, r1	; 0x01
    633a:	12 82       	std	Z+2, r1	; 0x02
    633c:	13 82       	std	Z+3, r1	; 0x03
    633e:	88 82       	st	Y, r8
    6340:	99 82       	std	Y+1, r9	; 0x01
    6342:	aa 82       	std	Y+2, r10	; 0x02
    6344:	bb 82       	std	Y+3, r11	; 0x03
    6346:	81 e0       	ldi	r24, 0x01	; 1
    6348:	01 c0       	rjmp	.+2      	; 0x634c <_ZN8SPIFlash13_addressCheckEmm+0x90>
    634a:	80 e0       	ldi	r24, 0x00	; 0
    634c:	df 91       	pop	r29
    634e:	cf 91       	pop	r28
    6350:	1f 91       	pop	r17
    6352:	0f 91       	pop	r16
    6354:	ff 90       	pop	r15
    6356:	ef 90       	pop	r14
    6358:	df 90       	pop	r13
    635a:	cf 90       	pop	r12
    635c:	bf 90       	pop	r11
    635e:	af 90       	pop	r10
    6360:	9f 90       	pop	r9
    6362:	8f 90       	pop	r8
    6364:	08 95       	ret

00006366 <_ZN8SPIFlash16_transferAddressEv>:
    6366:	cf 93       	push	r28
    6368:	df 93       	push	r29
    636a:	ec 01       	movw	r28, r24
    636c:	88 89       	ldd	r24, Y+16	; 0x10
    636e:	88 23       	and	r24, r24
    6370:	31 f0       	breq	.+12     	; 0x637e <_ZN8SPIFlash16_transferAddressEv+0x18>
    6372:	fe 01       	movw	r30, r28
    6374:	e3 5a       	subi	r30, 0xA3	; 163
    6376:	ff 4f       	sbci	r31, 0xFF	; 255
    6378:	80 81       	ld	r24, Z
    637a:	0e 94 3c 28 	call	0x5078	; 0x5078 <_ZN8SPIClass8transferEh>
    637e:	fe 01       	movw	r30, r28
    6380:	e4 5a       	subi	r30, 0xA4	; 164
    6382:	ff 4f       	sbci	r31, 0xFF	; 255
    6384:	80 81       	ld	r24, Z
    6386:	0e 94 3c 28 	call	0x5078	; 0x5078 <_ZN8SPIClass8transferEh>
    638a:	fe 01       	movw	r30, r28
    638c:	e5 5a       	subi	r30, 0xA5	; 165
    638e:	ff 4f       	sbci	r31, 0xFF	; 255
    6390:	80 81       	ld	r24, Z
    6392:	0e 94 3c 28 	call	0x5078	; 0x5078 <_ZN8SPIClass8transferEh>
    6396:	c6 5a       	subi	r28, 0xA6	; 166
    6398:	df 4f       	sbci	r29, 0xFF	; 255
    639a:	88 81       	ld	r24, Y
    639c:	0e 94 3c 28 	call	0x5078	; 0x5078 <_ZN8SPIClass8transferEh>
    63a0:	81 e0       	ldi	r24, 0x01	; 1
    63a2:	df 91       	pop	r29
    63a4:	cf 91       	pop	r28
    63a6:	08 95       	ret

000063a8 <_ZN8SPIFlash12_startSPIBusEv>:
    63a8:	fc 01       	movw	r30, r24
    63aa:	8c b5       	in	r24, 0x2c	; 44
    63ac:	87 8b       	std	Z+23, r24	; 0x17
    63ae:	8d b5       	in	r24, 0x2d	; 45
    63b0:	80 8f       	std	Z+24, r24	; 0x18
    63b2:	40 81       	ld	r20, Z
    63b4:	31 81       	ldd	r19, Z+1	; 0x01
    63b6:	80 91 8f 0c 	lds	r24, 0x0C8F	; 0x800c8f <_ZN8SPIClass13interruptModeE>
    63ba:	88 23       	and	r24, r24
    63bc:	99 f0       	breq	.+38     	; 0x63e4 <_ZN8SPIFlash12_startSPIBusEv+0x3c>
    63be:	2f b7       	in	r18, 0x3f	; 63
    63c0:	f8 94       	cli
    63c2:	80 91 8f 0c 	lds	r24, 0x0C8F	; 0x800c8f <_ZN8SPIClass13interruptModeE>
    63c6:	81 30       	cpi	r24, 0x01	; 1
    63c8:	59 f4       	brne	.+22     	; 0x63e0 <_ZN8SPIFlash12_startSPIBusEv+0x38>
    63ca:	8d b3       	in	r24, 0x1d	; 29
    63cc:	80 93 8d 0c 	sts	0x0C8D, r24	; 0x800c8d <_ZN8SPIClass13interruptSaveE>
    63d0:	9d b3       	in	r25, 0x1d	; 29
    63d2:	80 91 8e 0c 	lds	r24, 0x0C8E	; 0x800c8e <_ZN8SPIClass13interruptMaskE>
    63d6:	80 95       	com	r24
    63d8:	89 23       	and	r24, r25
    63da:	8d bb       	out	0x1d, r24	; 29
    63dc:	2f bf       	out	0x3f, r18	; 63
    63de:	02 c0       	rjmp	.+4      	; 0x63e4 <_ZN8SPIFlash12_startSPIBusEv+0x3c>
    63e0:	20 93 8d 0c 	sts	0x0C8D, r18	; 0x800c8d <_ZN8SPIClass13interruptSaveE>
    63e4:	4c bd       	out	0x2c, r20	; 44
    63e6:	3d bd       	out	0x2d, r19	; 45
    63e8:	81 e0       	ldi	r24, 0x01	; 1
    63ea:	86 87       	std	Z+14, r24	; 0x0e
    63ec:	08 95       	ret

000063ee <_ZN8SPIFlash9_beginSPIEh>:
    63ee:	0f 93       	push	r16
    63f0:	1f 93       	push	r17
    63f2:	cf 93       	push	r28
    63f4:	8c 01       	movw	r16, r24
    63f6:	c6 2f       	mov	r28, r22
    63f8:	fc 01       	movw	r30, r24
    63fa:	86 85       	ldd	r24, Z+14	; 0x0e
    63fc:	81 11       	cpse	r24, r1
    63fe:	02 c0       	rjmp	.+4      	; 0x6404 <_ZN8SPIFlash9_beginSPIEh+0x16>
    6400:	c8 01       	movw	r24, r16
    6402:	d2 df       	rcall	.-92     	; 0x63a8 <_ZN8SPIFlash12_startSPIBusEv>
    6404:	2c 98       	cbi	0x05, 4	; 5
    6406:	cb 30       	cpi	r28, 0x0B	; 11
    6408:	a9 f0       	breq	.+42     	; 0x6434 <_ZN8SPIFlash9_beginSPIEh+0x46>
    640a:	30 f4       	brcc	.+12     	; 0x6418 <_ZN8SPIFlash9_beginSPIEh+0x2a>
    640c:	c2 30       	cpi	r28, 0x02	; 2
    640e:	61 f0       	breq	.+24     	; 0x6428 <_ZN8SPIFlash9_beginSPIEh+0x3a>
    6410:	c3 30       	cpi	r28, 0x03	; 3
    6412:	d9 f4       	brne	.+54     	; 0x644a <_ZN8SPIFlash9_beginSPIEh+0x5c>
    6414:	83 e0       	ldi	r24, 0x03	; 3
    6416:	09 c0       	rjmp	.+18     	; 0x642a <_ZN8SPIFlash9_beginSPIEh+0x3c>
    6418:	c2 35       	cpi	r28, 0x52	; 82
    641a:	99 f0       	breq	.+38     	; 0x6442 <_ZN8SPIFlash9_beginSPIEh+0x54>
    641c:	c8 3d       	cpi	r28, 0xD8	; 216
    641e:	99 f0       	breq	.+38     	; 0x6446 <_ZN8SPIFlash9_beginSPIEh+0x58>
    6420:	c0 32       	cpi	r28, 0x20	; 32
    6422:	99 f4       	brne	.+38     	; 0x644a <_ZN8SPIFlash9_beginSPIEh+0x5c>
    6424:	80 e2       	ldi	r24, 0x20	; 32
    6426:	01 c0       	rjmp	.+2      	; 0x642a <_ZN8SPIFlash9_beginSPIEh+0x3c>
    6428:	82 e0       	ldi	r24, 0x02	; 2
    642a:	0e 94 3c 28 	call	0x5078	; 0x5078 <_ZN8SPIClass8transferEh>
    642e:	c8 01       	movw	r24, r16
    6430:	9a df       	rcall	.-204    	; 0x6366 <_ZN8SPIFlash16_transferAddressEv>
    6432:	0e c0       	rjmp	.+28     	; 0x6450 <_ZN8SPIFlash9_beginSPIEh+0x62>
    6434:	8b e0       	ldi	r24, 0x0B	; 11
    6436:	0e 94 3c 28 	call	0x5078	; 0x5078 <_ZN8SPIClass8transferEh>
    643a:	c8 01       	movw	r24, r16
    643c:	94 df       	rcall	.-216    	; 0x6366 <_ZN8SPIFlash16_transferAddressEv>
    643e:	8e ee       	ldi	r24, 0xEE	; 238
    6440:	05 c0       	rjmp	.+10     	; 0x644c <_ZN8SPIFlash9_beginSPIEh+0x5e>
    6442:	82 e5       	ldi	r24, 0x52	; 82
    6444:	f2 cf       	rjmp	.-28     	; 0x642a <_ZN8SPIFlash9_beginSPIEh+0x3c>
    6446:	88 ed       	ldi	r24, 0xD8	; 216
    6448:	f0 cf       	rjmp	.-32     	; 0x642a <_ZN8SPIFlash9_beginSPIEh+0x3c>
    644a:	8c 2f       	mov	r24, r28
    644c:	0e 94 3c 28 	call	0x5078	; 0x5078 <_ZN8SPIClass8transferEh>
    6450:	81 e0       	ldi	r24, 0x01	; 1
    6452:	cf 91       	pop	r28
    6454:	1f 91       	pop	r17
    6456:	0f 91       	pop	r16
    6458:	08 95       	ret

0000645a <_ZN8SPIFlash15_notPrevWrittenEmm>:
    645a:	8f 92       	push	r8
    645c:	9f 92       	push	r9
    645e:	af 92       	push	r10
    6460:	bf 92       	push	r11
    6462:	cf 92       	push	r12
    6464:	df 92       	push	r13
    6466:	ef 92       	push	r14
    6468:	ff 92       	push	r15
    646a:	0f 93       	push	r16
    646c:	1f 93       	push	r17
    646e:	48 01       	movw	r8, r16
    6470:	59 01       	movw	r10, r18
    6472:	63 e0       	ldi	r22, 0x03	; 3
    6474:	bc df       	rcall	.-136    	; 0x63ee <_ZN8SPIFlash9_beginSPIEh>
    6476:	c1 2c       	mov	r12, r1
    6478:	d1 2c       	mov	r13, r1
    647a:	76 01       	movw	r14, r12
    647c:	c8 14       	cp	r12, r8
    647e:	d9 04       	cpc	r13, r9
    6480:	ea 04       	cpc	r14, r10
    6482:	fb 04       	cpc	r15, r11
    6484:	99 f0       	breq	.+38     	; 0x64ac <_ZN8SPIFlash15_notPrevWrittenEmm+0x52>
    6486:	80 e0       	ldi	r24, 0x00	; 0
    6488:	0e 94 3c 28 	call	0x5078	; 0x5078 <_ZN8SPIClass8transferEh>
    648c:	8f 3f       	cpi	r24, 0xFF	; 255
    648e:	41 f0       	breq	.+16     	; 0x64a0 <_ZN8SPIFlash15_notPrevWrittenEmm+0x46>
    6490:	2c 9a       	sbi	0x05, 4	; 5
    6492:	40 e0       	ldi	r20, 0x00	; 0
    6494:	67 e0       	ldi	r22, 0x07	; 7
    6496:	8c e8       	ldi	r24, 0x8C	; 140
    6498:	9c e0       	ldi	r25, 0x0C	; 12
    649a:	a6 da       	rcall	.-2740   	; 0x59e8 <_ZN11Diagnostics12troubleshootEhb>
    649c:	80 e0       	ldi	r24, 0x00	; 0
    649e:	08 c0       	rjmp	.+16     	; 0x64b0 <_ZN8SPIFlash15_notPrevWrittenEmm+0x56>
    64a0:	8f ef       	ldi	r24, 0xFF	; 255
    64a2:	c8 1a       	sub	r12, r24
    64a4:	d8 0a       	sbc	r13, r24
    64a6:	e8 0a       	sbc	r14, r24
    64a8:	f8 0a       	sbc	r15, r24
    64aa:	e8 cf       	rjmp	.-48     	; 0x647c <_ZN8SPIFlash15_notPrevWrittenEmm+0x22>
    64ac:	2c 9a       	sbi	0x05, 4	; 5
    64ae:	81 e0       	ldi	r24, 0x01	; 1
    64b0:	1f 91       	pop	r17
    64b2:	0f 91       	pop	r16
    64b4:	ff 90       	pop	r15
    64b6:	ef 90       	pop	r14
    64b8:	df 90       	pop	r13
    64ba:	cf 90       	pop	r12
    64bc:	bf 90       	pop	r11
    64be:	af 90       	pop	r10
    64c0:	9f 90       	pop	r9
    64c2:	8f 90       	pop	r8
    64c4:	08 95       	ret

000064c6 <_ZN8SPIFlash9_nextByteEch>:
    64c6:	84 2f       	mov	r24, r20
    64c8:	0c 94 3c 28 	jmp	0x5078	; 0x5078 <_ZN8SPIClass8transferEh>

000064cc <_ZN8SPIFlash8_nextBufEhPhm>:
    64cc:	0f 93       	push	r16
    64ce:	1f 93       	push	r17
    64d0:	ca 01       	movw	r24, r20
    64d2:	62 30       	cpi	r22, 0x02	; 2
    64d4:	11 f0       	breq	.+4      	; 0x64da <_ZN8SPIFlash8_nextBufEhPhm+0xe>
    64d6:	63 30       	cpi	r22, 0x03	; 3
    64d8:	39 f4       	brne	.+14     	; 0x64e8 <_ZN8SPIFlash8_nextBufEhPhm+0x1c>
    64da:	01 15       	cp	r16, r1
    64dc:	11 05       	cpc	r17, r1
    64de:	21 f0       	breq	.+8      	; 0x64e8 <_ZN8SPIFlash8_nextBufEhPhm+0x1c>
    64e0:	b8 01       	movw	r22, r16
    64e2:	1f 91       	pop	r17
    64e4:	0f 91       	pop	r16
    64e6:	d0 ce       	rjmp	.-608    	; 0x6288 <_ZN8SPIClass8transferEPvj.part.0>
    64e8:	1f 91       	pop	r17
    64ea:	0f 91       	pop	r16
    64ec:	08 95       	ret

000064ee <_ZN8SPIFlash7_endSPIEv>:
    64ee:	fc 01       	movw	r30, r24
    64f0:	2c 9a       	sbi	0x05, 4	; 5
    64f2:	80 91 8f 0c 	lds	r24, 0x0C8F	; 0x800c8f <_ZN8SPIClass13interruptModeE>
    64f6:	88 23       	and	r24, r24
    64f8:	61 f0       	breq	.+24     	; 0x6512 <_ZN8SPIFlash7_endSPIEv+0x24>
    64fa:	9f b7       	in	r25, 0x3f	; 63
    64fc:	f8 94       	cli
    64fe:	20 91 8f 0c 	lds	r18, 0x0C8F	; 0x800c8f <_ZN8SPIClass13interruptModeE>
    6502:	80 91 8d 0c 	lds	r24, 0x0C8D	; 0x800c8d <_ZN8SPIClass13interruptSaveE>
    6506:	21 30       	cpi	r18, 0x01	; 1
    6508:	19 f4       	brne	.+6      	; 0x6510 <_ZN8SPIFlash7_endSPIEv+0x22>
    650a:	8d bb       	out	0x1d, r24	; 29
    650c:	9f bf       	out	0x3f, r25	; 63
    650e:	01 c0       	rjmp	.+2      	; 0x6512 <_ZN8SPIFlash7_endSPIEv+0x24>
    6510:	8f bf       	out	0x3f, r24	; 63
    6512:	87 89       	ldd	r24, Z+23	; 0x17
    6514:	8c bd       	out	0x2c, r24	; 44
    6516:	80 8d       	ldd	r24, Z+24	; 0x18
    6518:	8d bd       	out	0x2d, r24	; 45
    651a:	16 86       	std	Z+14, r1	; 0x0e
    651c:	08 95       	ret

0000651e <_ZN8SPIFlash10_readStat1Ev>:
    651e:	cf 93       	push	r28
    6520:	df 93       	push	r29
    6522:	ec 01       	movw	r28, r24
    6524:	65 e0       	ldi	r22, 0x05	; 5
    6526:	63 df       	rcall	.-314    	; 0x63ee <_ZN8SPIFlash9_beginSPIEh>
    6528:	80 e0       	ldi	r24, 0x00	; 0
    652a:	0e 94 3c 28 	call	0x5078	; 0x5078 <_ZN8SPIClass8transferEh>
    652e:	8c 8b       	std	Y+20, r24	; 0x14
    6530:	2c 9a       	sbi	0x05, 4	; 5
    6532:	8c 89       	ldd	r24, Y+20	; 0x14
    6534:	df 91       	pop	r29
    6536:	cf 91       	pop	r28
    6538:	08 95       	ret

0000653a <_ZN8SPIFlash18_isChipPoweredDownEv>:
    653a:	cf 93       	push	r28
    653c:	fc 01       	movw	r30, r24
    653e:	c7 85       	ldd	r28, Z+15	; 0x0f
    6540:	cc 23       	and	r28, r28
    6542:	29 f0       	breq	.+10     	; 0x654e <_ZN8SPIFlash18_isChipPoweredDownEv+0x14>
    6544:	40 e0       	ldi	r20, 0x00	; 0
    6546:	6f e0       	ldi	r22, 0x0F	; 15
    6548:	8c e8       	ldi	r24, 0x8C	; 140
    654a:	9c e0       	ldi	r25, 0x0C	; 12
    654c:	4d da       	rcall	.-2918   	; 0x59e8 <_ZN11Diagnostics12troubleshootEhb>
    654e:	8c 2f       	mov	r24, r28
    6550:	cf 91       	pop	r28
    6552:	08 95       	ret

00006554 <_ZN8SPIFlash8_notBusyEm>:
    6554:	8f 92       	push	r8
    6556:	9f 92       	push	r9
    6558:	af 92       	push	r10
    655a:	bf 92       	push	r11
    655c:	cf 92       	push	r12
    655e:	df 92       	push	r13
    6560:	ef 92       	push	r14
    6562:	ff 92       	push	r15
    6564:	cf 93       	push	r28
    6566:	df 93       	push	r29
    6568:	ec 01       	movw	r28, r24
    656a:	6a 01       	movw	r12, r20
    656c:	7b 01       	movw	r14, r22
    656e:	8a e0       	ldi	r24, 0x0A	; 10
    6570:	8a 95       	dec	r24
    6572:	f1 f7       	brne	.-4      	; 0x6570 <_ZN8SPIFlash8_notBusyEm+0x1c>
    6574:	00 c0       	rjmp	.+0      	; 0x6576 <_ZN8SPIFlash8_notBusyEm+0x22>
    6576:	0e 94 3a 3c 	call	0x7874	; 0x7874 <micros>
    657a:	4b 01       	movw	r8, r22
    657c:	5c 01       	movw	r10, r24
    657e:	ce 01       	movw	r24, r28
    6580:	ce df       	rcall	.-100    	; 0x651e <_ZN8SPIFlash10_readStat1Ev>
    6582:	8c 89       	ldd	r24, Y+20	; 0x14
    6584:	80 fd       	sbrc	r24, 0
    6586:	02 c0       	rjmp	.+4      	; 0x658c <_ZN8SPIFlash8_notBusyEm+0x38>
    6588:	81 e0       	ldi	r24, 0x01	; 1
    658a:	20 c0       	rjmp	.+64     	; 0x65cc <_ZN8SPIFlash8_notBusyEm+0x78>
    658c:	0e 94 3a 3c 	call	0x7874	; 0x7874 <micros>
    6590:	dc 01       	movw	r26, r24
    6592:	cb 01       	movw	r24, r22
    6594:	88 19       	sub	r24, r8
    6596:	99 09       	sbc	r25, r9
    6598:	aa 09       	sbc	r26, r10
    659a:	bb 09       	sbc	r27, r11
    659c:	8c 15       	cp	r24, r12
    659e:	9d 05       	cpc	r25, r13
    65a0:	ae 05       	cpc	r26, r14
    65a2:	bf 05       	cpc	r27, r15
    65a4:	60 f3       	brcs	.-40     	; 0x657e <_ZN8SPIFlash8_notBusyEm+0x2a>
    65a6:	0e 94 3a 3c 	call	0x7874	; 0x7874 <micros>
    65aa:	dc 01       	movw	r26, r24
    65ac:	cb 01       	movw	r24, r22
    65ae:	88 19       	sub	r24, r8
    65b0:	99 09       	sbc	r25, r9
    65b2:	aa 09       	sbc	r26, r10
    65b4:	bb 09       	sbc	r27, r11
    65b6:	8c 15       	cp	r24, r12
    65b8:	9d 05       	cpc	r25, r13
    65ba:	ae 05       	cpc	r26, r14
    65bc:	bf 05       	cpc	r27, r15
    65be:	20 f3       	brcs	.-56     	; 0x6588 <_ZN8SPIFlash8_notBusyEm+0x34>
    65c0:	40 e0       	ldi	r20, 0x00	; 0
    65c2:	64 e0       	ldi	r22, 0x04	; 4
    65c4:	8c e8       	ldi	r24, 0x8C	; 140
    65c6:	9c e0       	ldi	r25, 0x0C	; 12
    65c8:	0f da       	rcall	.-3042   	; 0x59e8 <_ZN11Diagnostics12troubleshootEhb>
    65ca:	80 e0       	ldi	r24, 0x00	; 0
    65cc:	df 91       	pop	r29
    65ce:	cf 91       	pop	r28
    65d0:	ff 90       	pop	r15
    65d2:	ef 90       	pop	r14
    65d4:	df 90       	pop	r13
    65d6:	cf 90       	pop	r12
    65d8:	bf 90       	pop	r11
    65da:	af 90       	pop	r10
    65dc:	9f 90       	pop	r9
    65de:	8f 90       	pop	r8
    65e0:	08 95       	ret

000065e2 <_ZN8SPIFlash12_writeEnableEb>:
    65e2:	1f 93       	push	r17
    65e4:	cf 93       	push	r28
    65e6:	df 93       	push	r29
    65e8:	ec 01       	movw	r28, r24
    65ea:	16 2f       	mov	r17, r22
    65ec:	66 e0       	ldi	r22, 0x06	; 6
    65ee:	ff de       	rcall	.-514    	; 0x63ee <_ZN8SPIFlash9_beginSPIEh>
    65f0:	2c 9a       	sbi	0x05, 4	; 5
    65f2:	ce 01       	movw	r24, r28
    65f4:	94 df       	rcall	.-216    	; 0x651e <_ZN8SPIFlash10_readStat1Ev>
    65f6:	81 fd       	sbrc	r24, 1
    65f8:	08 c0       	rjmp	.+16     	; 0x660a <_ZN8SPIFlash12_writeEnableEb+0x28>
    65fa:	11 23       	and	r17, r17
    65fc:	41 f0       	breq	.+16     	; 0x660e <_ZN8SPIFlash12_writeEnableEb+0x2c>
    65fe:	40 e0       	ldi	r20, 0x00	; 0
    6600:	66 e0       	ldi	r22, 0x06	; 6
    6602:	8c e8       	ldi	r24, 0x8C	; 140
    6604:	9c e0       	ldi	r25, 0x0C	; 12
    6606:	f0 d9       	rcall	.-3104   	; 0x59e8 <_ZN11Diagnostics12troubleshootEhb>
    6608:	02 c0       	rjmp	.+4      	; 0x660e <_ZN8SPIFlash12_writeEnableEb+0x2c>
    660a:	81 e0       	ldi	r24, 0x01	; 1
    660c:	01 c0       	rjmp	.+2      	; 0x6610 <_ZN8SPIFlash12_writeEnableEb+0x2e>
    660e:	80 e0       	ldi	r24, 0x00	; 0
    6610:	df 91       	pop	r29
    6612:	cf 91       	pop	r28
    6614:	1f 91       	pop	r17
    6616:	08 95       	ret

00006618 <_ZN8SPIFlash5_prepEhmm>:
    6618:	8f 92       	push	r8
    661a:	9f 92       	push	r9
    661c:	af 92       	push	r10
    661e:	bf 92       	push	r11
    6620:	cf 92       	push	r12
    6622:	df 92       	push	r13
    6624:	ef 92       	push	r14
    6626:	ff 92       	push	r15
    6628:	0f 93       	push	r16
    662a:	1f 93       	push	r17
    662c:	cf 93       	push	r28
    662e:	df 93       	push	r29
    6630:	ec 01       	movw	r28, r24
    6632:	49 01       	movw	r8, r18
    6634:	5a 01       	movw	r10, r20
    6636:	67 01       	movw	r12, r14
    6638:	78 01       	movw	r14, r16
    663a:	62 30       	cpi	r22, 0x02	; 2
    663c:	19 f0       	breq	.+6      	; 0x6644 <_ZN8SPIFlash5_prepEhmm+0x2c>
    663e:	6f 3e       	cpi	r22, 0xEF	; 239
    6640:	99 f0       	breq	.+38     	; 0x6668 <_ZN8SPIFlash5_prepEhmm+0x50>
    6642:	2c c0       	rjmp	.+88     	; 0x669c <_ZN8SPIFlash5_prepEhmm+0x84>
    6644:	7a df       	rcall	.-268    	; 0x653a <_ZN8SPIFlash18_isChipPoweredDownEv>
    6646:	81 11       	cpse	r24, r1
    6648:	3b c0       	rjmp	.+118    	; 0x66c0 <_ZN8SPIFlash5_prepEhmm+0xa8>
    664a:	97 01       	movw	r18, r14
    664c:	86 01       	movw	r16, r12
    664e:	b5 01       	movw	r22, r10
    6650:	a4 01       	movw	r20, r8
    6652:	ce 01       	movw	r24, r28
    6654:	33 de       	rcall	.-922    	; 0x62bc <_ZN8SPIFlash13_addressCheckEmm>
    6656:	88 23       	and	r24, r24
    6658:	99 f1       	breq	.+102    	; 0x66c0 <_ZN8SPIFlash5_prepEhmm+0xa8>
    665a:	97 01       	movw	r18, r14
    665c:	86 01       	movw	r16, r12
    665e:	b5 01       	movw	r22, r10
    6660:	a4 01       	movw	r20, r8
    6662:	ce 01       	movw	r24, r28
    6664:	fa de       	rcall	.-524    	; 0x645a <_ZN8SPIFlash15_notPrevWrittenEmm>
    6666:	09 c0       	rjmp	.+18     	; 0x667a <_ZN8SPIFlash5_prepEhmm+0x62>
    6668:	68 df       	rcall	.-304    	; 0x653a <_ZN8SPIFlash18_isChipPoweredDownEv>
    666a:	81 11       	cpse	r24, r1
    666c:	29 c0       	rjmp	.+82     	; 0x66c0 <_ZN8SPIFlash5_prepEhmm+0xa8>
    666e:	97 01       	movw	r18, r14
    6670:	86 01       	movw	r16, r12
    6672:	b5 01       	movw	r22, r10
    6674:	a4 01       	movw	r20, r8
    6676:	ce 01       	movw	r24, r28
    6678:	21 de       	rcall	.-958    	; 0x62bc <_ZN8SPIFlash13_addressCheckEmm>
    667a:	88 23       	and	r24, r24
    667c:	09 f1       	breq	.+66     	; 0x66c0 <_ZN8SPIFlash5_prepEhmm+0xa8>
    667e:	40 e0       	ldi	r20, 0x00	; 0
    6680:	5a ec       	ldi	r21, 0xCA	; 202
    6682:	6a e9       	ldi	r22, 0x9A	; 154
    6684:	7b e3       	ldi	r23, 0x3B	; 59
    6686:	ce 01       	movw	r24, r28
    6688:	65 df       	rcall	.-310    	; 0x6554 <_ZN8SPIFlash8_notBusyEm>
    668a:	88 23       	and	r24, r24
    668c:	c9 f0       	breq	.+50     	; 0x66c0 <_ZN8SPIFlash5_prepEhmm+0xa8>
    668e:	61 e0       	ldi	r22, 0x01	; 1
    6690:	ce 01       	movw	r24, r28
    6692:	a7 df       	rcall	.-178    	; 0x65e2 <_ZN8SPIFlash12_writeEnableEb>
    6694:	88 23       	and	r24, r24
    6696:	a1 f0       	breq	.+40     	; 0x66c0 <_ZN8SPIFlash5_prepEhmm+0xa8>
    6698:	81 e0       	ldi	r24, 0x01	; 1
    669a:	13 c0       	rjmp	.+38     	; 0x66c2 <_ZN8SPIFlash5_prepEhmm+0xaa>
    669c:	4e df       	rcall	.-356    	; 0x653a <_ZN8SPIFlash18_isChipPoweredDownEv>
    669e:	81 11       	cpse	r24, r1
    66a0:	0f c0       	rjmp	.+30     	; 0x66c0 <_ZN8SPIFlash5_prepEhmm+0xa8>
    66a2:	97 01       	movw	r18, r14
    66a4:	86 01       	movw	r16, r12
    66a6:	b5 01       	movw	r22, r10
    66a8:	a4 01       	movw	r20, r8
    66aa:	ce 01       	movw	r24, r28
    66ac:	07 de       	rcall	.-1010   	; 0x62bc <_ZN8SPIFlash13_addressCheckEmm>
    66ae:	88 23       	and	r24, r24
    66b0:	39 f0       	breq	.+14     	; 0x66c0 <_ZN8SPIFlash5_prepEhmm+0xa8>
    66b2:	40 e0       	ldi	r20, 0x00	; 0
    66b4:	5a ec       	ldi	r21, 0xCA	; 202
    66b6:	6a e9       	ldi	r22, 0x9A	; 154
    66b8:	7b e3       	ldi	r23, 0x3B	; 59
    66ba:	ce 01       	movw	r24, r28
    66bc:	4b df       	rcall	.-362    	; 0x6554 <_ZN8SPIFlash8_notBusyEm>
    66be:	ea cf       	rjmp	.-44     	; 0x6694 <_ZN8SPIFlash5_prepEhmm+0x7c>
    66c0:	80 e0       	ldi	r24, 0x00	; 0
    66c2:	df 91       	pop	r29
    66c4:	cf 91       	pop	r28
    66c6:	1f 91       	pop	r17
    66c8:	0f 91       	pop	r16
    66ca:	ff 90       	pop	r15
    66cc:	ef 90       	pop	r14
    66ce:	df 90       	pop	r13
    66d0:	cf 90       	pop	r12
    66d2:	bf 90       	pop	r11
    66d4:	af 90       	pop	r10
    66d6:	9f 90       	pop	r9
    66d8:	8f 90       	pop	r8
    66da:	08 95       	ret

000066dc <_ZN8SPIFlash13_writeDisableEv>:
    66dc:	64 e0       	ldi	r22, 0x04	; 4
    66de:	87 de       	rcall	.-754    	; 0x63ee <_ZN8SPIFlash9_beginSPIEh>
    66e0:	2c 9a       	sbi	0x05, 4	; 5
    66e2:	81 e0       	ldi	r24, 0x01	; 1
    66e4:	08 95       	ret

000066e6 <_ZN8SPIFlash11_getJedecIdEv>:

 //Checks for presence of chip by requesting JEDEC ID
 bool SPIFlash::_getJedecId(void) {
    66e6:	1f 93       	push	r17
    66e8:	cf 93       	push	r28
    66ea:	df 93       	push	r29
    66ec:	ec 01       	movw	r28, r24
   if(!_notBusy()) {
    66ee:	40 e0       	ldi	r20, 0x00	; 0
    66f0:	5a ec       	ldi	r21, 0xCA	; 202
    66f2:	6a e9       	ldi	r22, 0x9A	; 154
    66f4:	7b e3       	ldi	r23, 0x3B	; 59
    66f6:	2e df       	rcall	.-420    	; 0x6554 <_ZN8SPIFlash8_notBusyEm>
    66f8:	18 2f       	mov	r17, r24
    66fa:	88 23       	and	r24, r24
    66fc:	c9 f0       	breq	.+50     	; 0x6730 <_ZN8SPIFlash11_getJedecIdEv+0x4a>
     return false;
   }
   _beginSPI(JEDECID);
    66fe:	6f e9       	ldi	r22, 0x9F	; 159
    6700:	ce 01       	movw	r24, r28
    6702:	75 de       	rcall	.-790    	; 0x63ee <_ZN8SPIFlash9_beginSPIEh>
     return rxData.val;
   #else
     return xfer(data);
   #endif
 #else
   return xfer(data);
    6704:	80 e0       	ldi	r24, 0x00	; 0
    6706:	0e 94 3c 28 	call	0x5078	; 0x5078 <_ZN8SPIClass8transferEh>
 bool SPIFlash::_getJedecId(void) {
   if(!_notBusy()) {
     return false;
   }
   _beginSPI(JEDECID);
 	_chip.manufacturerID = _nextByte(READ);		// manufacturer id
    670a:	8d a3       	std	Y+37, r24	; 0x25
     return rxData.val;
   #else
     return xfer(data);
   #endif
 #else
   return xfer(data);
    670c:	80 e0       	ldi	r24, 0x00	; 0
    670e:	0e 94 3c 28 	call	0x5078	; 0x5078 <_ZN8SPIClass8transferEh>
   if(!_notBusy()) {
     return false;
   }
   _beginSPI(JEDECID);
 	_chip.manufacturerID = _nextByte(READ);		// manufacturer id
 	_chip.memoryTypeID = _nextByte(READ);		// memory type
    6712:	8e a3       	std	Y+38, r24	; 0x26
     return rxData.val;
   #else
     return xfer(data);
   #endif
 #else
   return xfer(data);
    6714:	80 e0       	ldi	r24, 0x00	; 0
    6716:	0e 94 3c 28 	call	0x5078	; 0x5078 <_ZN8SPIClass8transferEh>
     return false;
   }
   _beginSPI(JEDECID);
 	_chip.manufacturerID = _nextByte(READ);		// manufacturer id
 	_chip.memoryTypeID = _nextByte(READ);		// memory type
 	_chip.capacityID = _nextByte(READ);		// capacity
    671a:	8f a3       	std	Y+39, r24	; 0x27
   CHIP_DESELECT
    671c:	2c 9a       	sbi	0x05, 4	; 5
   if (!_chip.manufacturerID) {
    671e:	8d a1       	ldd	r24, Y+37	; 0x25
    6720:	81 11       	cpse	r24, r1
    6722:	06 c0       	rjmp	.+12     	; 0x6730 <_ZN8SPIFlash11_getJedecIdEv+0x4a>
   return true;
 }

 //Troubleshooting function. Called when #ifdef RUNDIAGNOSTIC is uncommented at the top of this file.
 void SPIFlash::_troubleshoot(uint8_t _code, bool printoverride) {
   diagnostics.troubleshoot(_code, printoverride);
    6724:	40 e0       	ldi	r20, 0x00	; 0
    6726:	6b e0       	ldi	r22, 0x0B	; 11
    6728:	8c e8       	ldi	r24, 0x8C	; 140
    672a:	9c e0       	ldi	r25, 0x0C	; 12
    672c:	5d d9       	rcall	.-3398   	; 0x59e8 <_ZN11Diagnostics12troubleshootEhb>
    672e:	10 e0       	ldi	r17, 0x00	; 0
     return false;
   }
   else {
     return true;
   }
 }
    6730:	81 2f       	mov	r24, r17
    6732:	df 91       	pop	r29
    6734:	cf 91       	pop	r28
    6736:	1f 91       	pop	r17
    6738:	08 95       	ret

0000673a <_ZN8SPIFlash26_disableGlobalBlockProtectEv>:

 bool SPIFlash::_disableGlobalBlockProtect(void) {
    673a:	1f 93       	push	r17
    673c:	cf 93       	push	r28
    673e:	df 93       	push	r29
    6740:	ec 01       	movw	r28, r24
   if (_chip.memoryTypeID == SST25) {
    6742:	8e a1       	ldd	r24, Y+38	; 0x26
    6744:	85 32       	cpi	r24, 0x25	; 37
    6746:	81 f4       	brne	.+32     	; 0x6768 <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x2e>
     _readStat1();
    6748:	ce 01       	movw	r24, r28
    674a:	e9 de       	rcall	.-558    	; 0x651e <_ZN8SPIFlash10_readStat1Ev>
     uint8_t _tempStat1 = stat1 & 0xC3;
    674c:	1c 89       	ldd	r17, Y+20	; 0x14
    674e:	13 7c       	andi	r17, 0xC3	; 195
     _beginSPI(WRITESTATEN);
    6750:	60 e5       	ldi	r22, 0x50	; 80
    6752:	ce 01       	movw	r24, r28
    6754:	4c de       	rcall	.-872    	; 0x63ee <_ZN8SPIFlash9_beginSPIEh>
     CHIP_DESELECT
    6756:	2c 9a       	sbi	0x05, 4	; 5
     _beginSPI(WRITESTAT1);
    6758:	61 e0       	ldi	r22, 0x01	; 1
    675a:	ce 01       	movw	r24, r28
    675c:	48 de       	rcall	.-880    	; 0x63ee <_ZN8SPIFlash9_beginSPIEh>
     return rxData.val;
   #else
     return xfer(data);
   #endif
 #else
   return xfer(data);
    675e:	81 2f       	mov	r24, r17
    6760:	0e 94 3c 28 	call	0x5078	; 0x5078 <_ZN8SPIClass8transferEh>
     uint8_t _tempStat1 = stat1 & 0xC3;
     _beginSPI(WRITESTATEN);
     CHIP_DESELECT
     _beginSPI(WRITESTAT1);
     _nextByte(WRITE, _tempStat1);
     CHIP_DESELECT
    6764:	2c 9a       	sbi	0x05, 4	; 5
    6766:	1f c0       	rjmp	.+62     	; 0x67a6 <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x6c>
   }
   else if (_chip.memoryTypeID == SST26) {
    6768:	86 32       	cpi	r24, 0x26	; 38
    676a:	e9 f4       	brne	.+58     	; 0x67a6 <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x6c>
     if(!_notBusy()) {
    676c:	40 e0       	ldi	r20, 0x00	; 0
    676e:	5a ec       	ldi	r21, 0xCA	; 202
    6770:	6a e9       	ldi	r22, 0x9A	; 154
    6772:	7b e3       	ldi	r23, 0x3B	; 59
    6774:	ce 01       	movw	r24, r28
    6776:	ee de       	rcall	.-548    	; 0x6554 <_ZN8SPIFlash8_notBusyEm>
    6778:	18 2f       	mov	r17, r24
    677a:	88 23       	and	r24, r24
     	return false;
     }
     _writeEnable();
    677c:	a9 f0       	breq	.+42     	; 0x67a8 <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x6e>
    677e:	61 e0       	ldi	r22, 0x01	; 1
    6780:	ce 01       	movw	r24, r28
    6782:	2f df       	rcall	.-418    	; 0x65e2 <_ZN8SPIFlash12_writeEnableEb>
    6784:	85 e3       	ldi	r24, 0x35	; 53
    6786:	8a 95       	dec	r24
    6788:	f1 f7       	brne	.-4      	; 0x6786 <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x4c>
     _delay_us(10);
     _beginSPI(ULBPR);
    678a:	00 00       	nop
    678c:	68 e9       	ldi	r22, 0x98	; 152
    678e:	ce 01       	movw	r24, r28
    6790:	2e de       	rcall	.-932    	; 0x63ee <_ZN8SPIFlash9_beginSPIEh>
     CHIP_DESELECT
    6792:	2c 9a       	sbi	0x05, 4	; 5
    6794:	87 ec       	ldi	r24, 0xC7	; 199
    6796:	90 e0       	ldi	r25, 0x00	; 0
    6798:	01 97       	sbiw	r24, 0x01	; 1
    679a:	f1 f7       	brne	.-4      	; 0x6798 <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x5e>
    679c:	00 c0       	rjmp	.+0      	; 0x679e <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x64>
     _delay_us(50);
     _writeDisable();
    679e:	00 00       	nop
    67a0:	ce 01       	movw	r24, r28
    67a2:	9c df       	rcall	.-200    	; 0x66dc <_ZN8SPIFlash13_writeDisableEv>
    67a4:	01 c0       	rjmp	.+2      	; 0x67a8 <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x6e>
   }
   return true;
    67a6:	11 e0       	ldi	r17, 0x01	; 1
 }
    67a8:	81 2f       	mov	r24, r17
    67aa:	df 91       	pop	r29
    67ac:	cf 91       	pop	r28
    67ae:	1f 91       	pop	r17
    67b0:	08 95       	ret

000067b2 <_ZN8SPIFlash7_chipIDEm>:

 //Identifies the chip
 bool SPIFlash::_chipID(uint32_t flashChipSize) {
    67b2:	cf 92       	push	r12
    67b4:	df 92       	push	r13
    67b6:	ef 92       	push	r14
    67b8:	ff 92       	push	r15
    67ba:	0f 93       	push	r16
    67bc:	1f 93       	push	r17
    67be:	cf 93       	push	r28
    67c0:	df 93       	push	r29
    67c2:	ec 01       	movw	r28, r24
    67c4:	6a 01       	movw	r12, r20
    67c6:	7b 01       	movw	r14, r22
   //set some default values
   kb4Erase.supported = kb32Erase.supported = kb64Erase.supported = chipErase.supported = true;
    67c8:	fc 01       	movw	r30, r24
    67ca:	e8 5b       	subi	r30, 0xB8	; 184
    67cc:	ff 4f       	sbci	r31, 0xFF	; 255
    67ce:	81 e0       	ldi	r24, 0x01	; 1
    67d0:	80 83       	st	Z, r24
    67d2:	8c af       	std	Y+60, r24	; 0x3c
    67d4:	8e ab       	std	Y+54, r24	; 0x36
    67d6:	88 ab       	std	Y+48, r24	; 0x30
   kb4Erase.opcode = SECTORERASE;
    67d8:	80 e2       	ldi	r24, 0x20	; 32
    67da:	89 ab       	std	Y+49, r24	; 0x31
   kb32Erase.opcode = BLOCK32ERASE;
    67dc:	82 e5       	ldi	r24, 0x52	; 82
    67de:	8f ab       	std	Y+55, r24	; 0x37
   kb64Erase.opcode = BLOCK64ERASE;
    67e0:	88 ed       	ldi	r24, 0xD8	; 216
    67e2:	8d af       	std	Y+61, r24	; 0x3d
   kb4Erase.time = BUSY_TIMEOUT;
    67e4:	80 e0       	ldi	r24, 0x00	; 0
    67e6:	9a ec       	ldi	r25, 0xCA	; 202
    67e8:	aa e9       	ldi	r26, 0x9A	; 154
    67ea:	bb e3       	ldi	r27, 0x3B	; 59
    67ec:	8a ab       	std	Y+50, r24	; 0x32
    67ee:	9b ab       	std	Y+51, r25	; 0x33
    67f0:	ac ab       	std	Y+52, r26	; 0x34
    67f2:	bd ab       	std	Y+53, r27	; 0x35
   kb32Erase.time = kb4Erase.time * 8;
    67f4:	80 e0       	ldi	r24, 0x00	; 0
    67f6:	90 e5       	ldi	r25, 0x50	; 80
    67f8:	a6 ed       	ldi	r26, 0xD6	; 214
    67fa:	bc ed       	ldi	r27, 0xDC	; 220
    67fc:	88 af       	std	Y+56, r24	; 0x38
    67fe:	99 af       	std	Y+57, r25	; 0x39
    6800:	aa af       	std	Y+58, r26	; 0x3a
    6802:	bb af       	std	Y+59, r27	; 0x3b
   kb64Erase.time = kb32Erase.time * 4;
    6804:	3a 97       	sbiw	r30, 0x0a	; 10
    6806:	80 e0       	ldi	r24, 0x00	; 0
    6808:	90 e4       	ldi	r25, 0x40	; 64
    680a:	a9 e5       	ldi	r26, 0x59	; 89
    680c:	b3 e7       	ldi	r27, 0x73	; 115
    680e:	80 83       	st	Z, r24
    6810:	91 83       	std	Z+1, r25	; 0x01
    6812:	a2 83       	std	Z+2, r26	; 0x02
    6814:	b3 83       	std	Z+3, r27	; 0x03
   kb256Erase.supported = false;
    6816:	34 96       	adiw	r30, 0x04	; 4
    6818:	10 82       	st	Z, r1
   chipErase.opcode = CHIPERASE;
    681a:	8e 01       	movw	r16, r28
    681c:	07 5b       	subi	r16, 0xB7	; 183
    681e:	1f 4f       	sbci	r17, 0xFF	; 255
    6820:	80 e6       	ldi	r24, 0x60	; 96
    6822:	f8 01       	movw	r30, r16
    6824:	80 83       	st	Z, r24
   chipErase.time = kb64Erase.time * 100L;
    6826:	31 96       	adiw	r30, 0x01	; 1
    6828:	80 e0       	ldi	r24, 0x00	; 0
    682a:	90 e0       	ldi	r25, 0x00	; 0
    682c:	ad ed       	ldi	r26, 0xDD	; 221
    682e:	be e0       	ldi	r27, 0x0E	; 14
    6830:	80 83       	st	Z, r24
    6832:	91 83       	std	Z+1, r25	; 0x01
    6834:	a2 83       	std	Z+2, r26	; 0x02
    6836:	b3 83       	std	Z+3, r27	; 0x03
   _pageSize = SPI_PAGESIZE;
    6838:	3a 96       	adiw	r30, 0x0a	; 10
    683a:	80 e0       	ldi	r24, 0x00	; 0
    683c:	91 e0       	ldi	r25, 0x01	; 1
    683e:	91 83       	std	Z+1, r25	; 0x01
    6840:	80 83       	st	Z, r24

   _getJedecId();
    6842:	ce 01       	movw	r24, r28
    6844:	50 df       	rcall	.-352    	; 0x66e6 <_ZN8SPIFlash11_getJedecIdEv>

   for (uint8_t i = 0; i < sizeof(_supportedManID); i++) {
     if (_chip.manufacturerID == _supportedManID[i]) {
    6846:	9d a1       	ldd	r25, Y+37	; 0x25
    6848:	fe 01       	movw	r30, r28
    684a:	e8 52       	subi	r30, 0x28	; 40
    684c:	ff 4f       	sbci	r31, 0xFF	; 255
    684e:	de 01       	movw	r26, r28
    6850:	af 51       	subi	r26, 0x1F	; 31
    6852:	bf 4f       	sbci	r27, 0xFF	; 255
    6854:	81 91       	ld	r24, Z+
    6856:	98 13       	cpse	r25, r24
    6858:	03 c0       	rjmp	.+6      	; 0x6860 <_ZN8SPIFlash7_chipIDEm+0xae>
       _chip.supportedMan = true;
    685a:	81 e0       	ldi	r24, 0x01	; 1
    685c:	8b a3       	std	Y+35, r24	; 0x23
       break;
    685e:	03 c0       	rjmp	.+6      	; 0x6866 <_ZN8SPIFlash7_chipIDEm+0xb4>
   chipErase.time = kb64Erase.time * 100L;
   _pageSize = SPI_PAGESIZE;

   _getJedecId();

   for (uint8_t i = 0; i < sizeof(_supportedManID); i++) {
    6860:	ea 17       	cp	r30, r26
    6862:	fb 07       	cpc	r31, r27
    6864:	b9 f7       	brne	.-18     	; 0x6854 <_ZN8SPIFlash7_chipIDEm+0xa2>
       break;
     }
   }

   for (uint8_t i = 0; i < sizeof(_altChipEraseReq); i++) {
     if (_chip.memoryTypeID == _altChipEraseReq[i]) {
    6866:	8e a1       	ldd	r24, Y+38	; 0x26
    6868:	2c 91       	ld	r18, X
    686a:	82 17       	cp	r24, r18
    686c:	51 f0       	breq	.+20     	; 0x6882 <_ZN8SPIFlash7_chipIDEm+0xd0>
    686e:	fe 01       	movw	r30, r28
    6870:	ee 51       	subi	r30, 0x1E	; 30
    6872:	ff 4f       	sbci	r31, 0xFF	; 255
    6874:	20 81       	ld	r18, Z
    6876:	82 17       	cp	r24, r18
    6878:	21 f0       	breq	.+8      	; 0x6882 <_ZN8SPIFlash7_chipIDEm+0xd0>
    687a:	31 96       	adiw	r30, 0x01	; 1
    687c:	20 81       	ld	r18, Z
    687e:	82 13       	cpse	r24, r18
    6880:	03 c0       	rjmp	.+6      	; 0x6888 <_ZN8SPIFlash7_chipIDEm+0xd6>
       chipErase.opcode = ALT_CHIPERASE;
    6882:	87 ec       	ldi	r24, 0xC7	; 199
    6884:	f8 01       	movw	r30, r16
    6886:	80 83       	st	Z, r24
       _getSFDPFlashParam();
     }
    #endif
     //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ End SFDP ID section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//

   if (_chip.supportedMan) {
    6888:	1b a1       	ldd	r17, Y+35	; 0x23
    688a:	11 23       	and	r17, r17
    688c:	d9 f1       	breq	.+118    	; 0x6904 <_ZN8SPIFlash7_chipIDEm+0x152>
     #ifdef RUNDIAGNOSTIC
       Serial.println(F("No Chip size defined by user. Checking library support."));
     #endif
     //Identify capacity
     if(_chip.manufacturerID == MACRONIX_MANID)
    688e:	92 3c       	cpi	r25, 0xC2	; 194
    6890:	c1 f4       	brne	.+48     	; 0x68c2 <_ZN8SPIFlash7_chipIDEm+0x110>
     {
       switch(_chip.capacityID)
    6892:	8f a1       	ldd	r24, Y+39	; 0x27
    6894:	83 31       	cpi	r24, 0x13	; 19
    6896:	39 f0       	breq	.+14     	; 0x68a6 <_ZN8SPIFlash7_chipIDEm+0xf4>
    6898:	84 31       	cpi	r24, 0x14	; 20
    689a:	71 f4       	brne	.+28     	; 0x68b8 <_ZN8SPIFlash7_chipIDEm+0x106>
         case MX25L4005:
         _chip.capacity = MB(4);
         break;

         case MX25L8005:
         _chip.capacity = MB(8);
    689c:	80 e0       	ldi	r24, 0x00	; 0
    689e:	90 e0       	ldi	r25, 0x00	; 0
    68a0:	a0 e8       	ldi	r26, 0x80	; 128
    68a2:	b0 e0       	ldi	r27, 0x00	; 0
    68a4:	04 c0       	rjmp	.+8      	; 0x68ae <_ZN8SPIFlash7_chipIDEm+0xfc>
     if(_chip.manufacturerID == MACRONIX_MANID)
     {
       switch(_chip.capacityID)
       {
         case MX25L4005:
         _chip.capacity = MB(4);
    68a6:	80 e0       	ldi	r24, 0x00	; 0
    68a8:	90 e0       	ldi	r25, 0x00	; 0
    68aa:	a0 e4       	ldi	r26, 0x40	; 64
    68ac:	b0 e0       	ldi	r27, 0x00	; 0
         break;

         case MX25L8005:
         _chip.capacity = MB(8);
    68ae:	88 a7       	std	Y+40, r24	; 0x28
    68b0:	99 a7       	std	Y+41, r25	; 0x29
    68b2:	aa a7       	std	Y+42, r26	; 0x2a
    68b4:	bb a7       	std	Y+43, r27	; 0x2b
         break;
    68b6:	05 c0       	rjmp	.+10     	; 0x68c2 <_ZN8SPIFlash7_chipIDEm+0x110>
   return true;
 }

 //Troubleshooting function. Called when #ifdef RUNDIAGNOSTIC is uncommented at the top of this file.
 void SPIFlash::_troubleshoot(uint8_t _code, bool printoverride) {
   diagnostics.troubleshoot(_code, printoverride);
    68b8:	40 e0       	ldi	r20, 0x00	; 0
    68ba:	62 e0       	ldi	r22, 0x02	; 2
    68bc:	8c e8       	ldi	r24, 0x8C	; 140
    68be:	9c e0       	ldi	r25, 0x0C	; 12
    68c0:	93 d8       	rcall	.-3802   	; 0x59e8 <_ZN11Diagnostics12troubleshootEhb>
         default:
         _troubleshoot(UNKNOWNCHIP); //Error code for unidentified capacity
 		 } //TODO - Set up other manufaturerIDs in a similar pattern.
 	 }
     for (uint8_t j = 0; j < sizeof(_capID); j++) {
       if (_chip.capacityID == _capID[j]) {
    68c2:	2f a1       	ldd	r18, Y+39	; 0x27
    68c4:	fe 01       	movw	r30, r28
    68c6:	e2 58       	subi	r30, 0x82	; 130
    68c8:	ff 4f       	sbci	r31, 0xFF	; 255
    68ca:	80 e0       	ldi	r24, 0x00	; 0
    68cc:	90 e0       	ldi	r25, 0x00	; 0
    68ce:	31 91       	ld	r19, Z+
    68d0:	23 13       	cpse	r18, r19
    68d2:	13 c0       	rjmp	.+38     	; 0x68fa <_ZN8SPIFlash7_chipIDEm+0x148>
         _chip.capacity = (_memSize[j]);
    68d4:	fc 01       	movw	r30, r24
    68d6:	b4 96       	adiw	r30, 0x24	; 36
    68d8:	ee 0f       	add	r30, r30
    68da:	ff 1f       	adc	r31, r31
    68dc:	ee 0f       	add	r30, r30
    68de:	ff 1f       	adc	r31, r31
    68e0:	ec 0f       	add	r30, r28
    68e2:	fd 1f       	adc	r31, r29
    68e4:	80 81       	ld	r24, Z
    68e6:	91 81       	ldd	r25, Z+1	; 0x01
    68e8:	a2 81       	ldd	r26, Z+2	; 0x02
    68ea:	b3 81       	ldd	r27, Z+3	; 0x03
    68ec:	88 a7       	std	Y+40, r24	; 0x28
    68ee:	99 a7       	std	Y+41, r25	; 0x29
    68f0:	aa a7       	std	Y+42, r26	; 0x2a
    68f2:	bb a7       	std	Y+43, r27	; 0x2b
         _chip.supported = true;
    68f4:	81 e0       	ldi	r24, 0x01	; 1
    68f6:	8a a3       	std	Y+34, r24	; 0x22
         #ifdef RUNDIAGNOSTIC
           Serial.println(F("Chip identified. This chip is fully supported by the library."));
         #endif
         return true;
    68f8:	29 c0       	rjmp	.+82     	; 0x694c <_ZN8SPIFlash7_chipIDEm+0x19a>
    68fa:	01 96       	adiw	r24, 0x01	; 1

         default:
         _troubleshoot(UNKNOWNCHIP); //Error code for unidentified capacity
 		 } //TODO - Set up other manufaturerIDs in a similar pattern.
 	 }
     for (uint8_t j = 0; j < sizeof(_capID); j++) {
    68fc:	82 31       	cpi	r24, 0x12	; 18
    68fe:	91 05       	cpc	r25, r1
    6900:	31 f7       	brne	.-52     	; 0x68ce <_ZN8SPIFlash7_chipIDEm+0x11c>
    6902:	0b c0       	rjmp	.+22     	; 0x691a <_ZN8SPIFlash7_chipIDEm+0x168>
         return true;
       }
     }
   }
   else {
     if (_chip.sfdpAvailable) {
    6904:	1c a1       	ldd	r17, Y+36	; 0x24
    6906:	11 23       	and	r17, r17
    6908:	11 f0       	breq	.+4      	; 0x690e <_ZN8SPIFlash7_chipIDEm+0x15c>
       #ifdef RUNDIAGNOSTIC
         Serial.println(F("SFDP ID finished."));
       #endif
       return true;
    690a:	11 e0       	ldi	r17, 0x01	; 1
    690c:	1f c0       	rjmp	.+62     	; 0x694c <_ZN8SPIFlash7_chipIDEm+0x19a>
   return true;
 }

 //Troubleshooting function. Called when #ifdef RUNDIAGNOSTIC is uncommented at the top of this file.
 void SPIFlash::_troubleshoot(uint8_t _code, bool printoverride) {
   diagnostics.troubleshoot(_code, printoverride);
    690e:	40 e0       	ldi	r20, 0x00	; 0
    6910:	62 e0       	ldi	r22, 0x02	; 2
    6912:	8c e8       	ldi	r24, 0x8C	; 140
    6914:	9c e0       	ldi	r25, 0x0C	; 12
    6916:	68 d8       	rcall	.-3888   	; 0x59e8 <_ZN11Diagnostics12troubleshootEhb>
       #endif
       return true;
     }
     else {
       _troubleshoot(UNKNOWNCHIP); //Error code for unidentified capacity
       return false;
    6918:	19 c0       	rjmp	.+50     	; 0x694c <_ZN8SPIFlash7_chipIDEm+0x19a>
     }

   }

   if (!_chip.capacity) {
    691a:	88 a5       	ldd	r24, Y+40	; 0x28
    691c:	99 a5       	ldd	r25, Y+41	; 0x29
    691e:	aa a5       	ldd	r26, Y+42	; 0x2a
    6920:	bb a5       	ldd	r27, Y+43	; 0x2b
    6922:	89 2b       	or	r24, r25
    6924:	8a 2b       	or	r24, r26
    6926:	8b 2b       	or	r24, r27
    6928:	81 f7       	brne	.-32     	; 0x690a <_ZN8SPIFlash7_chipIDEm+0x158>
     #ifdef RUNDIAGNOSTIC
       Serial.println(F("Chip capacity cannot be identified"));
     #endif
     if (flashChipSize) {
    692a:	c1 14       	cp	r12, r1
    692c:	d1 04       	cpc	r13, r1
    692e:	e1 04       	cpc	r14, r1
    6930:	f1 04       	cpc	r15, r1
    6932:	31 f0       	breq	.+12     	; 0x6940 <_ZN8SPIFlash7_chipIDEm+0x18e>
       // If a custom chip size is defined
       #ifdef RUNDIAGNOSTIC
       Serial.println(F("Custom Chipsize defined"));
       #endif
       _chip.capacity = flashChipSize;
    6934:	c8 a6       	std	Y+40, r12	; 0x28
    6936:	d9 a6       	std	Y+41, r13	; 0x29
    6938:	ea a6       	std	Y+42, r14	; 0x2a
    693a:	fb a6       	std	Y+43, r15	; 0x2b
       _chip.supported = false;
    693c:	1a a2       	std	Y+34, r1	; 0x22
       return true;
    693e:	06 c0       	rjmp	.+12     	; 0x694c <_ZN8SPIFlash7_chipIDEm+0x19a>
   return true;
 }

 //Troubleshooting function. Called when #ifdef RUNDIAGNOSTIC is uncommented at the top of this file.
 void SPIFlash::_troubleshoot(uint8_t _code, bool printoverride) {
   diagnostics.troubleshoot(_code, printoverride);
    6940:	40 e0       	ldi	r20, 0x00	; 0
    6942:	63 e0       	ldi	r22, 0x03	; 3
    6944:	8c e8       	ldi	r24, 0x8C	; 140
    6946:	9c e0       	ldi	r25, 0x0C	; 12
    6948:	4f d8       	rcall	.-3938   	; 0x59e8 <_ZN11Diagnostics12troubleshootEhb>
       return true;
     }

     else {
       _troubleshoot(UNKNOWNCAP);
       return false;
    694a:	10 e0       	ldi	r17, 0x00	; 0
     }

   }
   return true;
 }
    694c:	81 2f       	mov	r24, r17
    694e:	df 91       	pop	r29
    6950:	cf 91       	pop	r28
    6952:	1f 91       	pop	r17
    6954:	0f 91       	pop	r16
    6956:	ff 90       	pop	r15
    6958:	ef 90       	pop	r14
    695a:	df 90       	pop	r13
    695c:	cf 90       	pop	r12
    695e:	08 95       	ret

00006960 <_ZN8SPIFlash13_troubleshootEhb>:

 //Troubleshooting function. Called when #ifdef RUNDIAGNOSTIC is uncommented at the top of this file.
 void SPIFlash::_troubleshoot(uint8_t _code, bool printoverride) {
   diagnostics.troubleshoot(_code, printoverride);
    6960:	8c e8       	ldi	r24, 0x8C	; 140
    6962:	9c e0       	ldi	r25, 0x0C	; 12
    6964:	41 c8       	rjmp	.-3966   	; 0x59e8 <_ZN11Diagnostics12troubleshootEhb>

00006966 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    6966:	cf 93       	push	r28
  uint8_t sreg = SREG;
    6968:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    696a:	f8 94       	cli
  if (!initialized) {
    696c:	80 91 90 0c 	lds	r24, 0x0C90	; 0x800c90 <_ZN8SPIClass11initializedE>
    6970:	81 11       	cpse	r24, r1
    6972:	27 c0       	rjmp	.+78     	; 0x69c2 <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    6974:	e2 e8       	ldi	r30, 0x82	; 130
    6976:	f2 e0       	ldi	r31, 0x02	; 2
    6978:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    697a:	e2 e6       	ldi	r30, 0x62	; 98
    697c:	f2 e0       	ldi	r31, 0x02	; 2
    697e:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    6980:	e8 2f       	mov	r30, r24
    6982:	f0 e0       	ldi	r31, 0x00	; 0
    6984:	ee 0f       	add	r30, r30
    6986:	ff 1f       	adc	r31, r31
    6988:	e4 55       	subi	r30, 0x54	; 84
    698a:	fd 4f       	sbci	r31, 0xFD	; 253
    698c:	a5 91       	lpm	r26, Z+
    698e:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    6990:	ec 91       	ld	r30, X
    6992:	e9 23       	and	r30, r25
    6994:	21 f4       	brne	.+8      	; 0x699e <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    6996:	61 e0       	ldi	r22, 0x01	; 1
    6998:	8a e0       	ldi	r24, 0x0A	; 10
    699a:	0e 94 43 3d 	call	0x7a86	; 0x7a86 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    699e:	61 e0       	ldi	r22, 0x01	; 1
    69a0:	8a e0       	ldi	r24, 0x0A	; 10
    69a2:	0e 94 07 3d 	call	0x7a0e	; 0x7a0e <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    69a6:	8c b5       	in	r24, 0x2c	; 44
    69a8:	80 61       	ori	r24, 0x10	; 16
    69aa:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    69ac:	8c b5       	in	r24, 0x2c	; 44
    69ae:	80 64       	ori	r24, 0x40	; 64
    69b0:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    69b2:	61 e0       	ldi	r22, 0x01	; 1
    69b4:	8d e0       	ldi	r24, 0x0D	; 13
    69b6:	0e 94 07 3d 	call	0x7a0e	; 0x7a0e <pinMode>
    pinMode(MOSI, OUTPUT);
    69ba:	61 e0       	ldi	r22, 0x01	; 1
    69bc:	8b e0       	ldi	r24, 0x0B	; 11
    69be:	0e 94 07 3d 	call	0x7a0e	; 0x7a0e <pinMode>
  }
  initialized++; // reference count
    69c2:	80 91 90 0c 	lds	r24, 0x0C90	; 0x800c90 <_ZN8SPIClass11initializedE>
    69c6:	8f 5f       	subi	r24, 0xFF	; 255
    69c8:	80 93 90 0c 	sts	0x0C90, r24	; 0x800c90 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    69cc:	cf bf       	out	0x3f, r28	; 63
}
    69ce:	cf 91       	pop	r28
    69d0:	08 95       	ret

000069d2 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    69d2:	10 92 fe 0c 	sts	0x0CFE, r1	; 0x800cfe <twi_state>
    69d6:	81 e0       	ldi	r24, 0x01	; 1
    69d8:	80 93 fc 0c 	sts	0x0CFC, r24	; 0x800cfc <twi_sendStop>
    69dc:	10 92 fb 0c 	sts	0x0CFB, r1	; 0x800cfb <twi_inRepStart>
    69e0:	61 e0       	ldi	r22, 0x01	; 1
    69e2:	8d e1       	ldi	r24, 0x1D	; 29
    69e4:	0e 94 43 3d 	call	0x7a86	; 0x7a86 <digitalWrite>
    69e8:	61 e0       	ldi	r22, 0x01	; 1
    69ea:	8c e1       	ldi	r24, 0x1C	; 28
    69ec:	0e 94 43 3d 	call	0x7a86	; 0x7a86 <digitalWrite>
    69f0:	e9 eb       	ldi	r30, 0xB9	; 185
    69f2:	f0 e0       	ldi	r31, 0x00	; 0
    69f4:	80 81       	ld	r24, Z
    69f6:	8e 7f       	andi	r24, 0xFE	; 254
    69f8:	80 83       	st	Z, r24
    69fa:	80 81       	ld	r24, Z
    69fc:	8d 7f       	andi	r24, 0xFD	; 253
    69fe:	80 83       	st	Z, r24
    6a00:	88 e4       	ldi	r24, 0x48	; 72
    6a02:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    6a06:	85 e4       	ldi	r24, 0x45	; 69
    6a08:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    6a0c:	08 95       	ret

00006a0e <twi_disable>:
    6a0e:	ec eb       	ldi	r30, 0xBC	; 188
    6a10:	f0 e0       	ldi	r31, 0x00	; 0
    6a12:	80 81       	ld	r24, Z
    6a14:	8a 7b       	andi	r24, 0xBA	; 186
    6a16:	80 83       	st	Z, r24
    6a18:	60 e0       	ldi	r22, 0x00	; 0
    6a1a:	8d e1       	ldi	r24, 0x1D	; 29
    6a1c:	0e 94 43 3d 	call	0x7a86	; 0x7a86 <digitalWrite>
    6a20:	60 e0       	ldi	r22, 0x00	; 0
    6a22:	8c e1       	ldi	r24, 0x1C	; 28
    6a24:	0c 94 43 3d 	jmp	0x7a86	; 0x7a86 <digitalWrite>

00006a28 <twi_setFrequency>:
    6a28:	9b 01       	movw	r18, r22
    6a2a:	ac 01       	movw	r20, r24
    6a2c:	60 e0       	ldi	r22, 0x00	; 0
    6a2e:	74 e2       	ldi	r23, 0x24	; 36
    6a30:	84 ef       	ldi	r24, 0xF4	; 244
    6a32:	90 e0       	ldi	r25, 0x00	; 0
    6a34:	0e 94 63 41 	call	0x82c6	; 0x82c6 <__udivmodsi4>
    6a38:	da 01       	movw	r26, r20
    6a3a:	c9 01       	movw	r24, r18
    6a3c:	40 97       	sbiw	r24, 0x10	; 16
    6a3e:	a1 09       	sbc	r26, r1
    6a40:	b1 09       	sbc	r27, r1
    6a42:	b6 95       	lsr	r27
    6a44:	a7 95       	ror	r26
    6a46:	97 95       	ror	r25
    6a48:	87 95       	ror	r24
    6a4a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    6a4e:	08 95       	ret

00006a50 <twi_readFrom>:
    6a50:	41 32       	cpi	r20, 0x21	; 33
    6a52:	08 f0       	brcs	.+2      	; 0x6a56 <twi_readFrom+0x6>
    6a54:	43 c0       	rjmp	.+134    	; 0x6adc <twi_readFrom+0x8c>
    6a56:	90 91 fe 0c 	lds	r25, 0x0CFE	; 0x800cfe <twi_state>
    6a5a:	91 11       	cpse	r25, r1
    6a5c:	fc cf       	rjmp	.-8      	; 0x6a56 <twi_readFrom+0x6>
    6a5e:	91 e0       	ldi	r25, 0x01	; 1
    6a60:	90 93 fe 0c 	sts	0x0CFE, r25	; 0x800cfe <twi_state>
    6a64:	20 93 fc 0c 	sts	0x0CFC, r18	; 0x800cfc <twi_sendStop>
    6a68:	2f ef       	ldi	r18, 0xFF	; 255
    6a6a:	20 93 91 0c 	sts	0x0C91, r18	; 0x800c91 <twi_error>
    6a6e:	10 92 d6 0c 	sts	0x0CD6, r1	; 0x800cd6 <twi_masterBufferIndex>
    6a72:	24 0f       	add	r18, r20
    6a74:	20 93 d5 0c 	sts	0x0CD5, r18	; 0x800cd5 <twi_masterBufferLength>
    6a78:	90 93 fd 0c 	sts	0x0CFD, r25	; 0x800cfd <twi_slarw>
    6a7c:	90 91 fd 0c 	lds	r25, 0x0CFD	; 0x800cfd <twi_slarw>
    6a80:	88 0f       	add	r24, r24
    6a82:	89 2b       	or	r24, r25
    6a84:	80 93 fd 0c 	sts	0x0CFD, r24	; 0x800cfd <twi_slarw>
    6a88:	80 91 fb 0c 	lds	r24, 0x0CFB	; 0x800cfb <twi_inRepStart>
    6a8c:	81 30       	cpi	r24, 0x01	; 1
    6a8e:	61 f4       	brne	.+24     	; 0x6aa8 <twi_readFrom+0x58>
    6a90:	10 92 fb 0c 	sts	0x0CFB, r1	; 0x800cfb <twi_inRepStart>
    6a94:	80 91 fd 0c 	lds	r24, 0x0CFD	; 0x800cfd <twi_slarw>
    6a98:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    6a9c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    6aa0:	83 fd       	sbrc	r24, 3
    6aa2:	f8 cf       	rjmp	.-16     	; 0x6a94 <twi_readFrom+0x44>
    6aa4:	85 ec       	ldi	r24, 0xC5	; 197
    6aa6:	01 c0       	rjmp	.+2      	; 0x6aaa <twi_readFrom+0x5a>
    6aa8:	85 ee       	ldi	r24, 0xE5	; 229
    6aaa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    6aae:	80 91 fe 0c 	lds	r24, 0x0CFE	; 0x800cfe <twi_state>
    6ab2:	81 30       	cpi	r24, 0x01	; 1
    6ab4:	e1 f3       	breq	.-8      	; 0x6aae <twi_readFrom+0x5e>
    6ab6:	80 91 d6 0c 	lds	r24, 0x0CD6	; 0x800cd6 <twi_masterBufferIndex>
    6aba:	84 17       	cp	r24, r20
    6abc:	10 f4       	brcc	.+4      	; 0x6ac2 <twi_readFrom+0x72>
    6abe:	40 91 d6 0c 	lds	r20, 0x0CD6	; 0x800cd6 <twi_masterBufferIndex>
    6ac2:	a7 ed       	ldi	r26, 0xD7	; 215
    6ac4:	bc e0       	ldi	r27, 0x0C	; 12
    6ac6:	96 2f       	mov	r25, r22
    6ac8:	fb 01       	movw	r30, r22
    6aca:	8e 2f       	mov	r24, r30
    6acc:	89 1b       	sub	r24, r25
    6ace:	84 17       	cp	r24, r20
    6ad0:	18 f4       	brcc	.+6      	; 0x6ad8 <twi_readFrom+0x88>
    6ad2:	8d 91       	ld	r24, X+
    6ad4:	81 93       	st	Z+, r24
    6ad6:	f9 cf       	rjmp	.-14     	; 0x6aca <twi_readFrom+0x7a>
    6ad8:	84 2f       	mov	r24, r20
    6ada:	08 95       	ret
    6adc:	80 e0       	ldi	r24, 0x00	; 0
    6ade:	08 95       	ret

00006ae0 <twi_writeTo>:
    6ae0:	0f 93       	push	r16
    6ae2:	41 32       	cpi	r20, 0x21	; 33
    6ae4:	08 f0       	brcs	.+2      	; 0x6ae8 <twi_writeTo+0x8>
    6ae6:	4a c0       	rjmp	.+148    	; 0x6b7c <twi_writeTo+0x9c>
    6ae8:	90 91 fe 0c 	lds	r25, 0x0CFE	; 0x800cfe <twi_state>
    6aec:	91 11       	cpse	r25, r1
    6aee:	fc cf       	rjmp	.-8      	; 0x6ae8 <twi_writeTo+0x8>
    6af0:	32 e0       	ldi	r19, 0x02	; 2
    6af2:	30 93 fe 0c 	sts	0x0CFE, r19	; 0x800cfe <twi_state>
    6af6:	00 93 fc 0c 	sts	0x0CFC, r16	; 0x800cfc <twi_sendStop>
    6afa:	3f ef       	ldi	r19, 0xFF	; 255
    6afc:	30 93 91 0c 	sts	0x0C91, r19	; 0x800c91 <twi_error>
    6b00:	10 92 d6 0c 	sts	0x0CD6, r1	; 0x800cd6 <twi_masterBufferIndex>
    6b04:	40 93 d5 0c 	sts	0x0CD5, r20	; 0x800cd5 <twi_masterBufferLength>
    6b08:	56 2f       	mov	r21, r22
    6b0a:	a7 ed       	ldi	r26, 0xD7	; 215
    6b0c:	bc e0       	ldi	r27, 0x0C	; 12
    6b0e:	fb 01       	movw	r30, r22
    6b10:	3e 2f       	mov	r19, r30
    6b12:	35 1b       	sub	r19, r21
    6b14:	34 17       	cp	r19, r20
    6b16:	18 f4       	brcc	.+6      	; 0x6b1e <twi_writeTo+0x3e>
    6b18:	31 91       	ld	r19, Z+
    6b1a:	3d 93       	st	X+, r19
    6b1c:	f9 cf       	rjmp	.-14     	; 0x6b10 <twi_writeTo+0x30>
    6b1e:	10 92 fd 0c 	sts	0x0CFD, r1	; 0x800cfd <twi_slarw>
    6b22:	30 91 fd 0c 	lds	r19, 0x0CFD	; 0x800cfd <twi_slarw>
    6b26:	88 0f       	add	r24, r24
    6b28:	83 2b       	or	r24, r19
    6b2a:	80 93 fd 0c 	sts	0x0CFD, r24	; 0x800cfd <twi_slarw>
    6b2e:	80 91 fb 0c 	lds	r24, 0x0CFB	; 0x800cfb <twi_inRepStart>
    6b32:	81 30       	cpi	r24, 0x01	; 1
    6b34:	61 f4       	brne	.+24     	; 0x6b4e <twi_writeTo+0x6e>
    6b36:	10 92 fb 0c 	sts	0x0CFB, r1	; 0x800cfb <twi_inRepStart>
    6b3a:	80 91 fd 0c 	lds	r24, 0x0CFD	; 0x800cfd <twi_slarw>
    6b3e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    6b42:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    6b46:	83 fd       	sbrc	r24, 3
    6b48:	f8 cf       	rjmp	.-16     	; 0x6b3a <twi_writeTo+0x5a>
    6b4a:	85 ec       	ldi	r24, 0xC5	; 197
    6b4c:	01 c0       	rjmp	.+2      	; 0x6b50 <twi_writeTo+0x70>
    6b4e:	85 ee       	ldi	r24, 0xE5	; 229
    6b50:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    6b54:	22 23       	and	r18, r18
    6b56:	21 f0       	breq	.+8      	; 0x6b60 <twi_writeTo+0x80>
    6b58:	80 91 fe 0c 	lds	r24, 0x0CFE	; 0x800cfe <twi_state>
    6b5c:	82 30       	cpi	r24, 0x02	; 2
    6b5e:	d1 f3       	breq	.-12     	; 0x6b54 <twi_writeTo+0x74>
    6b60:	80 91 91 0c 	lds	r24, 0x0C91	; 0x800c91 <twi_error>
    6b64:	8f 3f       	cpi	r24, 0xFF	; 255
    6b66:	79 f0       	breq	.+30     	; 0x6b86 <twi_writeTo+0xa6>
    6b68:	80 91 91 0c 	lds	r24, 0x0C91	; 0x800c91 <twi_error>
    6b6c:	80 32       	cpi	r24, 0x20	; 32
    6b6e:	41 f0       	breq	.+16     	; 0x6b80 <twi_writeTo+0xa0>
    6b70:	80 91 91 0c 	lds	r24, 0x0C91	; 0x800c91 <twi_error>
    6b74:	80 33       	cpi	r24, 0x30	; 48
    6b76:	31 f0       	breq	.+12     	; 0x6b84 <twi_writeTo+0xa4>
    6b78:	94 e0       	ldi	r25, 0x04	; 4
    6b7a:	05 c0       	rjmp	.+10     	; 0x6b86 <twi_writeTo+0xa6>
    6b7c:	91 e0       	ldi	r25, 0x01	; 1
    6b7e:	03 c0       	rjmp	.+6      	; 0x6b86 <twi_writeTo+0xa6>
    6b80:	92 e0       	ldi	r25, 0x02	; 2
    6b82:	01 c0       	rjmp	.+2      	; 0x6b86 <twi_writeTo+0xa6>
    6b84:	93 e0       	ldi	r25, 0x03	; 3
    6b86:	89 2f       	mov	r24, r25
    6b88:	0f 91       	pop	r16
    6b8a:	08 95       	ret

00006b8c <twi_transmit>:
    6b8c:	40 91 b3 0c 	lds	r20, 0x0CB3	; 0x800cb3 <twi_txBufferLength>
    6b90:	26 2f       	mov	r18, r22
    6b92:	30 e0       	ldi	r19, 0x00	; 0
    6b94:	24 0f       	add	r18, r20
    6b96:	31 1d       	adc	r19, r1
    6b98:	21 32       	cpi	r18, 0x21	; 33
    6b9a:	31 05       	cpc	r19, r1
    6b9c:	dc f4       	brge	.+54     	; 0x6bd4 <twi_transmit+0x48>
    6b9e:	20 91 fe 0c 	lds	r18, 0x0CFE	; 0x800cfe <twi_state>
    6ba2:	24 30       	cpi	r18, 0x04	; 4
    6ba4:	c9 f4       	brne	.+50     	; 0x6bd8 <twi_transmit+0x4c>
    6ba6:	fc 01       	movw	r30, r24
    6ba8:	80 e0       	ldi	r24, 0x00	; 0
    6baa:	90 e0       	ldi	r25, 0x00	; 0
    6bac:	86 17       	cp	r24, r22
    6bae:	58 f4       	brcc	.+22     	; 0x6bc6 <twi_transmit+0x3a>
    6bb0:	30 91 b3 0c 	lds	r19, 0x0CB3	; 0x800cb3 <twi_txBufferLength>
    6bb4:	21 91       	ld	r18, Z+
    6bb6:	dc 01       	movw	r26, r24
    6bb8:	ab 54       	subi	r26, 0x4B	; 75
    6bba:	b3 4f       	sbci	r27, 0xF3	; 243
    6bbc:	a3 0f       	add	r26, r19
    6bbe:	b1 1d       	adc	r27, r1
    6bc0:	2c 93       	st	X, r18
    6bc2:	01 96       	adiw	r24, 0x01	; 1
    6bc4:	f3 cf       	rjmp	.-26     	; 0x6bac <twi_transmit+0x20>
    6bc6:	80 91 b3 0c 	lds	r24, 0x0CB3	; 0x800cb3 <twi_txBufferLength>
    6bca:	68 0f       	add	r22, r24
    6bcc:	60 93 b3 0c 	sts	0x0CB3, r22	; 0x800cb3 <twi_txBufferLength>
    6bd0:	80 e0       	ldi	r24, 0x00	; 0
    6bd2:	08 95       	ret
    6bd4:	81 e0       	ldi	r24, 0x01	; 1
    6bd6:	08 95       	ret
    6bd8:	82 e0       	ldi	r24, 0x02	; 2
    6bda:	08 95       	ret

00006bdc <twi_attachSlaveRxEvent>:
    6bdc:	90 93 f8 0c 	sts	0x0CF8, r25	; 0x800cf8 <twi_onSlaveReceive+0x1>
    6be0:	80 93 f7 0c 	sts	0x0CF7, r24	; 0x800cf7 <twi_onSlaveReceive>
    6be4:	08 95       	ret

00006be6 <twi_attachSlaveTxEvent>:
    6be6:	90 93 fa 0c 	sts	0x0CFA, r25	; 0x800cfa <twi_onSlaveTransmit+0x1>
    6bea:	80 93 f9 0c 	sts	0x0CF9, r24	; 0x800cf9 <twi_onSlaveTransmit>
    6bee:	08 95       	ret

00006bf0 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    6bf0:	85 ed       	ldi	r24, 0xD5	; 213
    6bf2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    6bf6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    6bfa:	84 fd       	sbrc	r24, 4
    6bfc:	fc cf       	rjmp	.-8      	; 0x6bf6 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    6bfe:	10 92 fe 0c 	sts	0x0CFE, r1	; 0x800cfe <twi_state>
    6c02:	08 95       	ret

00006c04 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    6c04:	85 ec       	ldi	r24, 0xC5	; 197
    6c06:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    6c0a:	10 92 fe 0c 	sts	0x0CFE, r1	; 0x800cfe <twi_state>
    6c0e:	08 95       	ret

00006c10 <__vector_26>:
}

ISR(TWI_vect)
{
    6c10:	1f 92       	push	r1
    6c12:	0f 92       	push	r0
    6c14:	0f b6       	in	r0, 0x3f	; 63
    6c16:	0f 92       	push	r0
    6c18:	11 24       	eor	r1, r1
    6c1a:	0b b6       	in	r0, 0x3b	; 59
    6c1c:	0f 92       	push	r0
    6c1e:	2f 93       	push	r18
    6c20:	3f 93       	push	r19
    6c22:	4f 93       	push	r20
    6c24:	5f 93       	push	r21
    6c26:	6f 93       	push	r22
    6c28:	7f 93       	push	r23
    6c2a:	8f 93       	push	r24
    6c2c:	9f 93       	push	r25
    6c2e:	af 93       	push	r26
    6c30:	bf 93       	push	r27
    6c32:	ef 93       	push	r30
    6c34:	ff 93       	push	r31
  switch(TW_STATUS){
    6c36:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    6c3a:	88 7f       	andi	r24, 0xF8	; 248
    6c3c:	80 36       	cpi	r24, 0x60	; 96
    6c3e:	09 f4       	brne	.+2      	; 0x6c42 <__vector_26+0x32>
    6c40:	9d c0       	rjmp	.+314    	; 0x6d7c <__vector_26+0x16c>
    6c42:	70 f5       	brcc	.+92     	; 0x6ca0 <__vector_26+0x90>
    6c44:	88 32       	cpi	r24, 0x28	; 40
    6c46:	09 f4       	brne	.+2      	; 0x6c4a <__vector_26+0x3a>
    6c48:	5c c0       	rjmp	.+184    	; 0x6d02 <__vector_26+0xf2>
    6c4a:	90 f4       	brcc	.+36     	; 0x6c70 <__vector_26+0x60>
    6c4c:	80 31       	cpi	r24, 0x10	; 16
    6c4e:	09 f4       	brne	.+2      	; 0x6c52 <__vector_26+0x42>
    6c50:	55 c0       	rjmp	.+170    	; 0x6cfc <__vector_26+0xec>
    6c52:	38 f4       	brcc	.+14     	; 0x6c62 <__vector_26+0x52>
    6c54:	88 23       	and	r24, r24
    6c56:	09 f4       	brne	.+2      	; 0x6c5a <__vector_26+0x4a>
    6c58:	f3 c0       	rjmp	.+486    	; 0x6e40 <__vector_26+0x230>
    6c5a:	88 30       	cpi	r24, 0x08	; 8
    6c5c:	09 f4       	brne	.+2      	; 0x6c60 <__vector_26+0x50>
    6c5e:	4e c0       	rjmp	.+156    	; 0x6cfc <__vector_26+0xec>
    6c60:	f2 c0       	rjmp	.+484    	; 0x6e46 <__vector_26+0x236>
    6c62:	88 31       	cpi	r24, 0x18	; 24
    6c64:	09 f4       	brne	.+2      	; 0x6c68 <__vector_26+0x58>
    6c66:	4d c0       	rjmp	.+154    	; 0x6d02 <__vector_26+0xf2>
    6c68:	80 32       	cpi	r24, 0x20	; 32
    6c6a:	09 f4       	brne	.+2      	; 0x6c6e <__vector_26+0x5e>
    6c6c:	5e c0       	rjmp	.+188    	; 0x6d2a <__vector_26+0x11a>
    6c6e:	eb c0       	rjmp	.+470    	; 0x6e46 <__vector_26+0x236>
    6c70:	80 34       	cpi	r24, 0x40	; 64
    6c72:	09 f4       	brne	.+2      	; 0x6c76 <__vector_26+0x66>
    6c74:	69 c0       	rjmp	.+210    	; 0x6d48 <__vector_26+0x138>
    6c76:	50 f4       	brcc	.+20     	; 0x6c8c <__vector_26+0x7c>
    6c78:	80 33       	cpi	r24, 0x30	; 48
    6c7a:	09 f4       	brne	.+2      	; 0x6c7e <__vector_26+0x6e>
    6c7c:	56 c0       	rjmp	.+172    	; 0x6d2a <__vector_26+0x11a>
    6c7e:	88 33       	cpi	r24, 0x38	; 56
    6c80:	09 f0       	breq	.+2      	; 0x6c84 <__vector_26+0x74>
    6c82:	e1 c0       	rjmp	.+450    	; 0x6e46 <__vector_26+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    6c84:	80 93 91 0c 	sts	0x0C91, r24	; 0x800c91 <twi_error>
      twi_releaseBus();
    6c88:	bd df       	rcall	.-134    	; 0x6c04 <twi_releaseBus>
      break;
    6c8a:	dd c0       	rjmp	.+442    	; 0x6e46 <__vector_26+0x236>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    6c8c:	80 35       	cpi	r24, 0x50	; 80
    6c8e:	09 f4       	brne	.+2      	; 0x6c92 <__vector_26+0x82>
    6c90:	4f c0       	rjmp	.+158    	; 0x6d30 <__vector_26+0x120>
    6c92:	88 35       	cpi	r24, 0x58	; 88
    6c94:	09 f4       	brne	.+2      	; 0x6c98 <__vector_26+0x88>
    6c96:	5d c0       	rjmp	.+186    	; 0x6d52 <__vector_26+0x142>
    6c98:	88 34       	cpi	r24, 0x48	; 72
    6c9a:	09 f0       	breq	.+2      	; 0x6c9e <__vector_26+0x8e>
    6c9c:	d4 c0       	rjmp	.+424    	; 0x6e46 <__vector_26+0x236>
    6c9e:	d2 c0       	rjmp	.+420    	; 0x6e44 <__vector_26+0x234>
    6ca0:	88 39       	cpi	r24, 0x98	; 152
    6ca2:	09 f4       	brne	.+2      	; 0x6ca6 <__vector_26+0x96>
    6ca4:	c3 c0       	rjmp	.+390    	; 0x6e2c <__vector_26+0x21c>
    6ca6:	a8 f4       	brcc	.+42     	; 0x6cd2 <__vector_26+0xc2>
    6ca8:	88 37       	cpi	r24, 0x78	; 120
    6caa:	09 f4       	brne	.+2      	; 0x6cae <__vector_26+0x9e>
    6cac:	67 c0       	rjmp	.+206    	; 0x6d7c <__vector_26+0x16c>
    6cae:	38 f4       	brcc	.+14     	; 0x6cbe <__vector_26+0xae>
    6cb0:	88 36       	cpi	r24, 0x68	; 104
    6cb2:	09 f4       	brne	.+2      	; 0x6cb6 <__vector_26+0xa6>
    6cb4:	63 c0       	rjmp	.+198    	; 0x6d7c <__vector_26+0x16c>
    6cb6:	80 37       	cpi	r24, 0x70	; 112
    6cb8:	09 f4       	brne	.+2      	; 0x6cbc <__vector_26+0xac>
    6cba:	60 c0       	rjmp	.+192    	; 0x6d7c <__vector_26+0x16c>
    6cbc:	c4 c0       	rjmp	.+392    	; 0x6e46 <__vector_26+0x236>
    6cbe:	88 38       	cpi	r24, 0x88	; 136
    6cc0:	09 f4       	brne	.+2      	; 0x6cc4 <__vector_26+0xb4>
    6cc2:	b4 c0       	rjmp	.+360    	; 0x6e2c <__vector_26+0x21c>
    6cc4:	80 39       	cpi	r24, 0x90	; 144
    6cc6:	09 f4       	brne	.+2      	; 0x6cca <__vector_26+0xba>
    6cc8:	5f c0       	rjmp	.+190    	; 0x6d88 <__vector_26+0x178>
    6cca:	80 38       	cpi	r24, 0x80	; 128
    6ccc:	09 f0       	breq	.+2      	; 0x6cd0 <__vector_26+0xc0>
    6cce:	bb c0       	rjmp	.+374    	; 0x6e46 <__vector_26+0x236>
    6cd0:	5b c0       	rjmp	.+182    	; 0x6d88 <__vector_26+0x178>
    6cd2:	80 3b       	cpi	r24, 0xB0	; 176
    6cd4:	09 f4       	brne	.+2      	; 0x6cd8 <__vector_26+0xc8>
    6cd6:	82 c0       	rjmp	.+260    	; 0x6ddc <__vector_26+0x1cc>
    6cd8:	38 f4       	brcc	.+14     	; 0x6ce8 <__vector_26+0xd8>
    6cda:	80 3a       	cpi	r24, 0xA0	; 160
    6cdc:	09 f4       	brne	.+2      	; 0x6ce0 <__vector_26+0xd0>
    6cde:	66 c0       	rjmp	.+204    	; 0x6dac <__vector_26+0x19c>
    6ce0:	88 3a       	cpi	r24, 0xA8	; 168
    6ce2:	09 f4       	brne	.+2      	; 0x6ce6 <__vector_26+0xd6>
    6ce4:	7b c0       	rjmp	.+246    	; 0x6ddc <__vector_26+0x1cc>
    6ce6:	af c0       	rjmp	.+350    	; 0x6e46 <__vector_26+0x236>
    6ce8:	80 3c       	cpi	r24, 0xC0	; 192
    6cea:	09 f4       	brne	.+2      	; 0x6cee <__vector_26+0xde>
    6cec:	a3 c0       	rjmp	.+326    	; 0x6e34 <__vector_26+0x224>
    6cee:	88 3c       	cpi	r24, 0xC8	; 200
    6cf0:	09 f4       	brne	.+2      	; 0x6cf4 <__vector_26+0xe4>
    6cf2:	a0 c0       	rjmp	.+320    	; 0x6e34 <__vector_26+0x224>
    6cf4:	88 3b       	cpi	r24, 0xB8	; 184
    6cf6:	09 f4       	brne	.+2      	; 0x6cfa <__vector_26+0xea>
    6cf8:	86 c0       	rjmp	.+268    	; 0x6e06 <__vector_26+0x1f6>
    6cfa:	a5 c0       	rjmp	.+330    	; 0x6e46 <__vector_26+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    6cfc:	80 91 fd 0c 	lds	r24, 0x0CFD	; 0x800cfd <twi_slarw>
    6d00:	10 c0       	rjmp	.+32     	; 0x6d22 <__vector_26+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    6d02:	90 91 d6 0c 	lds	r25, 0x0CD6	; 0x800cd6 <twi_masterBufferIndex>
    6d06:	80 91 d5 0c 	lds	r24, 0x0CD5	; 0x800cd5 <twi_masterBufferLength>
    6d0a:	98 17       	cp	r25, r24
    6d0c:	70 f5       	brcc	.+92     	; 0x6d6a <__vector_26+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    6d0e:	e0 91 d6 0c 	lds	r30, 0x0CD6	; 0x800cd6 <twi_masterBufferIndex>
    6d12:	81 e0       	ldi	r24, 0x01	; 1
    6d14:	8e 0f       	add	r24, r30
    6d16:	80 93 d6 0c 	sts	0x0CD6, r24	; 0x800cd6 <twi_masterBufferIndex>
    6d1a:	f0 e0       	ldi	r31, 0x00	; 0
    6d1c:	e9 52       	subi	r30, 0x29	; 41
    6d1e:	f3 4f       	sbci	r31, 0xF3	; 243
    6d20:	80 81       	ld	r24, Z
    6d22:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    6d26:	85 ec       	ldi	r24, 0xC5	; 197
    6d28:	82 c0       	rjmp	.+260    	; 0x6e2e <__vector_26+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    6d2a:	80 93 91 0c 	sts	0x0C91, r24	; 0x800c91 <twi_error>
    6d2e:	8a c0       	rjmp	.+276    	; 0x6e44 <__vector_26+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    6d30:	e0 91 d6 0c 	lds	r30, 0x0CD6	; 0x800cd6 <twi_masterBufferIndex>
    6d34:	81 e0       	ldi	r24, 0x01	; 1
    6d36:	8e 0f       	add	r24, r30
    6d38:	80 93 d6 0c 	sts	0x0CD6, r24	; 0x800cd6 <twi_masterBufferIndex>
    6d3c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    6d40:	f0 e0       	ldi	r31, 0x00	; 0
    6d42:	e9 52       	subi	r30, 0x29	; 41
    6d44:	f3 4f       	sbci	r31, 0xF3	; 243
    6d46:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    6d48:	90 91 d6 0c 	lds	r25, 0x0CD6	; 0x800cd6 <twi_masterBufferIndex>
    6d4c:	80 91 d5 0c 	lds	r24, 0x0CD5	; 0x800cd5 <twi_masterBufferLength>
    6d50:	6a c0       	rjmp	.+212    	; 0x6e26 <__vector_26+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    6d52:	e0 91 d6 0c 	lds	r30, 0x0CD6	; 0x800cd6 <twi_masterBufferIndex>
    6d56:	81 e0       	ldi	r24, 0x01	; 1
    6d58:	8e 0f       	add	r24, r30
    6d5a:	80 93 d6 0c 	sts	0x0CD6, r24	; 0x800cd6 <twi_masterBufferIndex>
    6d5e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    6d62:	f0 e0       	ldi	r31, 0x00	; 0
    6d64:	e9 52       	subi	r30, 0x29	; 41
    6d66:	f3 4f       	sbci	r31, 0xF3	; 243
    6d68:	80 83       	st	Z, r24
	if (twi_sendStop)
    6d6a:	80 91 fc 0c 	lds	r24, 0x0CFC	; 0x800cfc <twi_sendStop>
    6d6e:	81 11       	cpse	r24, r1
    6d70:	69 c0       	rjmp	.+210    	; 0x6e44 <__vector_26+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    6d72:	81 e0       	ldi	r24, 0x01	; 1
    6d74:	80 93 fb 0c 	sts	0x0CFB, r24	; 0x800cfb <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    6d78:	84 ea       	ldi	r24, 0xA4	; 164
    6d7a:	5d c0       	rjmp	.+186    	; 0x6e36 <__vector_26+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    6d7c:	83 e0       	ldi	r24, 0x03	; 3
    6d7e:	80 93 fe 0c 	sts	0x0CFE, r24	; 0x800cfe <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    6d82:	10 92 92 0c 	sts	0x0C92, r1	; 0x800c92 <twi_rxBufferIndex>
    6d86:	cf cf       	rjmp	.-98     	; 0x6d26 <__vector_26+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    6d88:	80 91 92 0c 	lds	r24, 0x0C92	; 0x800c92 <twi_rxBufferIndex>
    6d8c:	80 32       	cpi	r24, 0x20	; 32
    6d8e:	08 f0       	brcs	.+2      	; 0x6d92 <__vector_26+0x182>
    6d90:	4d c0       	rjmp	.+154    	; 0x6e2c <__vector_26+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    6d92:	e0 91 92 0c 	lds	r30, 0x0C92	; 0x800c92 <twi_rxBufferIndex>
    6d96:	81 e0       	ldi	r24, 0x01	; 1
    6d98:	8e 0f       	add	r24, r30
    6d9a:	80 93 92 0c 	sts	0x0C92, r24	; 0x800c92 <twi_rxBufferIndex>
    6d9e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    6da2:	f0 e0       	ldi	r31, 0x00	; 0
    6da4:	ed 56       	subi	r30, 0x6D	; 109
    6da6:	f3 4f       	sbci	r31, 0xF3	; 243
    6da8:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    6daa:	bd cf       	rjmp	.-134    	; 0x6d26 <__vector_26+0x116>
    6dac:	2b df       	rcall	.-426    	; 0x6c04 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    6dae:	80 91 92 0c 	lds	r24, 0x0C92	; 0x800c92 <twi_rxBufferIndex>
    6db2:	80 32       	cpi	r24, 0x20	; 32
    6db4:	30 f4       	brcc	.+12     	; 0x6dc2 <__vector_26+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    6db6:	e0 91 92 0c 	lds	r30, 0x0C92	; 0x800c92 <twi_rxBufferIndex>
    6dba:	f0 e0       	ldi	r31, 0x00	; 0
    6dbc:	ed 56       	subi	r30, 0x6D	; 109
    6dbe:	f3 4f       	sbci	r31, 0xF3	; 243
    6dc0:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    6dc2:	60 91 92 0c 	lds	r22, 0x0C92	; 0x800c92 <twi_rxBufferIndex>
    6dc6:	70 e0       	ldi	r23, 0x00	; 0
    6dc8:	e0 91 f7 0c 	lds	r30, 0x0CF7	; 0x800cf7 <twi_onSlaveReceive>
    6dcc:	f0 91 f8 0c 	lds	r31, 0x0CF8	; 0x800cf8 <twi_onSlaveReceive+0x1>
    6dd0:	83 e9       	ldi	r24, 0x93	; 147
    6dd2:	9c e0       	ldi	r25, 0x0C	; 12
    6dd4:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    6dd6:	10 92 92 0c 	sts	0x0C92, r1	; 0x800c92 <twi_rxBufferIndex>
      break;
    6dda:	35 c0       	rjmp	.+106    	; 0x6e46 <__vector_26+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    6ddc:	84 e0       	ldi	r24, 0x04	; 4
    6dde:	80 93 fe 0c 	sts	0x0CFE, r24	; 0x800cfe <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    6de2:	10 92 b4 0c 	sts	0x0CB4, r1	; 0x800cb4 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    6de6:	10 92 b3 0c 	sts	0x0CB3, r1	; 0x800cb3 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    6dea:	e0 91 f9 0c 	lds	r30, 0x0CF9	; 0x800cf9 <twi_onSlaveTransmit>
    6dee:	f0 91 fa 0c 	lds	r31, 0x0CFA	; 0x800cfa <twi_onSlaveTransmit+0x1>
    6df2:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    6df4:	80 91 b3 0c 	lds	r24, 0x0CB3	; 0x800cb3 <twi_txBufferLength>
    6df8:	81 11       	cpse	r24, r1
    6dfa:	05 c0       	rjmp	.+10     	; 0x6e06 <__vector_26+0x1f6>
        twi_txBufferLength = 1;
    6dfc:	81 e0       	ldi	r24, 0x01	; 1
    6dfe:	80 93 b3 0c 	sts	0x0CB3, r24	; 0x800cb3 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    6e02:	10 92 b5 0c 	sts	0x0CB5, r1	; 0x800cb5 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    6e06:	e0 91 b4 0c 	lds	r30, 0x0CB4	; 0x800cb4 <twi_txBufferIndex>
    6e0a:	81 e0       	ldi	r24, 0x01	; 1
    6e0c:	8e 0f       	add	r24, r30
    6e0e:	80 93 b4 0c 	sts	0x0CB4, r24	; 0x800cb4 <twi_txBufferIndex>
    6e12:	f0 e0       	ldi	r31, 0x00	; 0
    6e14:	eb 54       	subi	r30, 0x4B	; 75
    6e16:	f3 4f       	sbci	r31, 0xF3	; 243
    6e18:	80 81       	ld	r24, Z
    6e1a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    6e1e:	90 91 b4 0c 	lds	r25, 0x0CB4	; 0x800cb4 <twi_txBufferIndex>
    6e22:	80 91 b3 0c 	lds	r24, 0x0CB3	; 0x800cb3 <twi_txBufferLength>
    6e26:	98 17       	cp	r25, r24
    6e28:	08 f4       	brcc	.+2      	; 0x6e2c <__vector_26+0x21c>
    6e2a:	7d cf       	rjmp	.-262    	; 0x6d26 <__vector_26+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    6e2c:	85 e8       	ldi	r24, 0x85	; 133
    6e2e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    6e32:	09 c0       	rjmp	.+18     	; 0x6e46 <__vector_26+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    6e34:	85 ec       	ldi	r24, 0xC5	; 197
    6e36:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    6e3a:	10 92 fe 0c 	sts	0x0CFE, r1	; 0x800cfe <twi_state>
      break;
    6e3e:	03 c0       	rjmp	.+6      	; 0x6e46 <__vector_26+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    6e40:	10 92 91 0c 	sts	0x0C91, r1	; 0x800c91 <twi_error>
      twi_stop();
    6e44:	d5 de       	rcall	.-598    	; 0x6bf0 <twi_stop>
      break;
  }
}
    6e46:	ff 91       	pop	r31
    6e48:	ef 91       	pop	r30
    6e4a:	bf 91       	pop	r27
    6e4c:	af 91       	pop	r26
    6e4e:	9f 91       	pop	r25
    6e50:	8f 91       	pop	r24
    6e52:	7f 91       	pop	r23
    6e54:	6f 91       	pop	r22
    6e56:	5f 91       	pop	r21
    6e58:	4f 91       	pop	r20
    6e5a:	3f 91       	pop	r19
    6e5c:	2f 91       	pop	r18
    6e5e:	0f 90       	pop	r0
    6e60:	0b be       	out	0x3b, r0	; 59
    6e62:	0f 90       	pop	r0
    6e64:	0f be       	out	0x3f, r0	; 63
    6e66:	0f 90       	pop	r0
    6e68:	1f 90       	pop	r1
    6e6a:	18 95       	reti

00006e6c <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    6e6c:	80 91 33 0d 	lds	r24, 0x0D33	; 0x800d33 <_ZN7TwoWire14rxBufferLengthE>
    6e70:	90 e0       	ldi	r25, 0x00	; 0
    6e72:	20 91 34 0d 	lds	r18, 0x0D34	; 0x800d34 <_ZN7TwoWire13rxBufferIndexE>
    6e76:	82 1b       	sub	r24, r18
    6e78:	91 09       	sbc	r25, r1
    6e7a:	08 95       	ret

00006e7c <_ZN7TwoWire4readEv>:
    6e7c:	90 91 34 0d 	lds	r25, 0x0D34	; 0x800d34 <_ZN7TwoWire13rxBufferIndexE>
    6e80:	80 91 33 0d 	lds	r24, 0x0D33	; 0x800d33 <_ZN7TwoWire14rxBufferLengthE>
    6e84:	98 17       	cp	r25, r24
    6e86:	50 f4       	brcc	.+20     	; 0x6e9c <_ZN7TwoWire4readEv+0x20>
    6e88:	e9 2f       	mov	r30, r25
    6e8a:	f0 e0       	ldi	r31, 0x00	; 0
    6e8c:	eb 5c       	subi	r30, 0xCB	; 203
    6e8e:	f2 4f       	sbci	r31, 0xF2	; 242
    6e90:	20 81       	ld	r18, Z
    6e92:	30 e0       	ldi	r19, 0x00	; 0
    6e94:	9f 5f       	subi	r25, 0xFF	; 255
    6e96:	90 93 34 0d 	sts	0x0D34, r25	; 0x800d34 <_ZN7TwoWire13rxBufferIndexE>
    6e9a:	02 c0       	rjmp	.+4      	; 0x6ea0 <_ZN7TwoWire4readEv+0x24>
    6e9c:	2f ef       	ldi	r18, 0xFF	; 255
    6e9e:	3f ef       	ldi	r19, 0xFF	; 255
    6ea0:	c9 01       	movw	r24, r18
    6ea2:	08 95       	ret

00006ea4 <_ZN7TwoWire4peekEv>:
    6ea4:	e0 91 34 0d 	lds	r30, 0x0D34	; 0x800d34 <_ZN7TwoWire13rxBufferIndexE>
    6ea8:	80 91 33 0d 	lds	r24, 0x0D33	; 0x800d33 <_ZN7TwoWire14rxBufferLengthE>
    6eac:	e8 17       	cp	r30, r24
    6eae:	30 f4       	brcc	.+12     	; 0x6ebc <_ZN7TwoWire4peekEv+0x18>
    6eb0:	f0 e0       	ldi	r31, 0x00	; 0
    6eb2:	eb 5c       	subi	r30, 0xCB	; 203
    6eb4:	f2 4f       	sbci	r31, 0xF2	; 242
    6eb6:	80 81       	ld	r24, Z
    6eb8:	90 e0       	ldi	r25, 0x00	; 0
    6eba:	08 95       	ret
    6ebc:	8f ef       	ldi	r24, 0xFF	; 255
    6ebe:	9f ef       	ldi	r25, 0xFF	; 255
    6ec0:	08 95       	ret

00006ec2 <_ZN7TwoWire5flushEv>:
    6ec2:	08 95       	ret

00006ec4 <_ZN7TwoWire16onReceiveServiceEPhi>:
    6ec4:	cf 93       	push	r28
    6ec6:	df 93       	push	r29
    6ec8:	ec 01       	movw	r28, r24
    6eca:	e0 91 0b 0d 	lds	r30, 0x0D0B	; 0x800d0b <_ZN7TwoWire14user_onReceiveE>
    6ece:	f0 91 0c 0d 	lds	r31, 0x0D0C	; 0x800d0c <_ZN7TwoWire14user_onReceiveE+0x1>
    6ed2:	30 97       	sbiw	r30, 0x00	; 0
    6ed4:	f1 f0       	breq	.+60     	; 0x6f12 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    6ed6:	90 91 34 0d 	lds	r25, 0x0D34	; 0x800d34 <_ZN7TwoWire13rxBufferIndexE>
    6eda:	80 91 33 0d 	lds	r24, 0x0D33	; 0x800d33 <_ZN7TwoWire14rxBufferLengthE>
    6ede:	98 17       	cp	r25, r24
    6ee0:	c0 f0       	brcs	.+48     	; 0x6f12 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    6ee2:	90 e0       	ldi	r25, 0x00	; 0
    6ee4:	29 2f       	mov	r18, r25
    6ee6:	30 e0       	ldi	r19, 0x00	; 0
    6ee8:	26 17       	cp	r18, r22
    6eea:	37 07       	cpc	r19, r23
    6eec:	54 f4       	brge	.+20     	; 0x6f02 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    6eee:	de 01       	movw	r26, r28
    6ef0:	a2 0f       	add	r26, r18
    6ef2:	b3 1f       	adc	r27, r19
    6ef4:	4c 91       	ld	r20, X
    6ef6:	d9 01       	movw	r26, r18
    6ef8:	ab 5c       	subi	r26, 0xCB	; 203
    6efa:	b2 4f       	sbci	r27, 0xF2	; 242
    6efc:	4c 93       	st	X, r20
    6efe:	9f 5f       	subi	r25, 0xFF	; 255
    6f00:	f1 cf       	rjmp	.-30     	; 0x6ee4 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    6f02:	10 92 34 0d 	sts	0x0D34, r1	; 0x800d34 <_ZN7TwoWire13rxBufferIndexE>
    6f06:	60 93 33 0d 	sts	0x0D33, r22	; 0x800d33 <_ZN7TwoWire14rxBufferLengthE>
    6f0a:	cb 01       	movw	r24, r22
    6f0c:	df 91       	pop	r29
    6f0e:	cf 91       	pop	r28
    6f10:	09 94       	ijmp
    6f12:	df 91       	pop	r29
    6f14:	cf 91       	pop	r28
    6f16:	08 95       	ret

00006f18 <_ZN7TwoWire16onRequestServiceEv>:
    6f18:	e0 91 0d 0d 	lds	r30, 0x0D0D	; 0x800d0d <_ZN7TwoWire14user_onRequestE>
    6f1c:	f0 91 0e 0d 	lds	r31, 0x0D0E	; 0x800d0e <_ZN7TwoWire14user_onRequestE+0x1>
    6f20:	30 97       	sbiw	r30, 0x00	; 0
    6f22:	29 f0       	breq	.+10     	; 0x6f2e <_ZN7TwoWire16onRequestServiceEv+0x16>
    6f24:	10 92 11 0d 	sts	0x0D11, r1	; 0x800d11 <_ZN7TwoWire13txBufferIndexE>
    6f28:	10 92 10 0d 	sts	0x0D10, r1	; 0x800d10 <_ZN7TwoWire14txBufferLengthE>
    6f2c:	09 94       	ijmp
    6f2e:	08 95       	ret

00006f30 <_ZN7TwoWire5writeEPKhj>:
    6f30:	cf 92       	push	r12
    6f32:	df 92       	push	r13
    6f34:	ef 92       	push	r14
    6f36:	ff 92       	push	r15
    6f38:	0f 93       	push	r16
    6f3a:	1f 93       	push	r17
    6f3c:	cf 93       	push	r28
    6f3e:	df 93       	push	r29
    6f40:	7c 01       	movw	r14, r24
    6f42:	cb 01       	movw	r24, r22
    6f44:	8a 01       	movw	r16, r20
    6f46:	20 91 0f 0d 	lds	r18, 0x0D0F	; 0x800d0f <_ZN7TwoWire12transmittingE>
    6f4a:	22 23       	and	r18, r18
    6f4c:	89 f0       	breq	.+34     	; 0x6f70 <_ZN7TwoWire5writeEPKhj+0x40>
    6f4e:	eb 01       	movw	r28, r22
    6f50:	6b 01       	movw	r12, r22
    6f52:	c4 0e       	add	r12, r20
    6f54:	d5 1e       	adc	r13, r21
    6f56:	cc 15       	cp	r28, r12
    6f58:	dd 05       	cpc	r29, r13
    6f5a:	61 f0       	breq	.+24     	; 0x6f74 <_ZN7TwoWire5writeEPKhj+0x44>
    6f5c:	69 91       	ld	r22, Y+
    6f5e:	d7 01       	movw	r26, r14
    6f60:	ed 91       	ld	r30, X+
    6f62:	fc 91       	ld	r31, X
    6f64:	01 90       	ld	r0, Z+
    6f66:	f0 81       	ld	r31, Z
    6f68:	e0 2d       	mov	r30, r0
    6f6a:	c7 01       	movw	r24, r14
    6f6c:	09 95       	icall
    6f6e:	f3 cf       	rjmp	.-26     	; 0x6f56 <_ZN7TwoWire5writeEPKhj+0x26>
    6f70:	64 2f       	mov	r22, r20
    6f72:	0c de       	rcall	.-1000   	; 0x6b8c <twi_transmit>
    6f74:	c8 01       	movw	r24, r16
    6f76:	df 91       	pop	r29
    6f78:	cf 91       	pop	r28
    6f7a:	1f 91       	pop	r17
    6f7c:	0f 91       	pop	r16
    6f7e:	ff 90       	pop	r15
    6f80:	ef 90       	pop	r14
    6f82:	df 90       	pop	r13
    6f84:	cf 90       	pop	r12
    6f86:	08 95       	ret

00006f88 <_ZN7TwoWire5writeEh>:
    6f88:	cf 93       	push	r28
    6f8a:	df 93       	push	r29
    6f8c:	1f 92       	push	r1
    6f8e:	cd b7       	in	r28, 0x3d	; 61
    6f90:	de b7       	in	r29, 0x3e	; 62
    6f92:	69 83       	std	Y+1, r22	; 0x01
    6f94:	20 91 0f 0d 	lds	r18, 0x0D0F	; 0x800d0f <_ZN7TwoWire12transmittingE>
    6f98:	22 23       	and	r18, r18
    6f9a:	d1 f0       	breq	.+52     	; 0x6fd0 <_ZN7TwoWire5writeEh+0x48>
    6f9c:	20 91 10 0d 	lds	r18, 0x0D10	; 0x800d10 <_ZN7TwoWire14txBufferLengthE>
    6fa0:	20 32       	cpi	r18, 0x20	; 32
    6fa2:	40 f0       	brcs	.+16     	; 0x6fb4 <_ZN7TwoWire5writeEh+0x2c>
    6fa4:	21 e0       	ldi	r18, 0x01	; 1
    6fa6:	30 e0       	ldi	r19, 0x00	; 0
    6fa8:	fc 01       	movw	r30, r24
    6faa:	33 83       	std	Z+3, r19	; 0x03
    6fac:	22 83       	std	Z+2, r18	; 0x02
    6fae:	80 e0       	ldi	r24, 0x00	; 0
    6fb0:	90 e0       	ldi	r25, 0x00	; 0
    6fb2:	14 c0       	rjmp	.+40     	; 0x6fdc <_ZN7TwoWire5writeEh+0x54>
    6fb4:	80 91 11 0d 	lds	r24, 0x0D11	; 0x800d11 <_ZN7TwoWire13txBufferIndexE>
    6fb8:	e8 2f       	mov	r30, r24
    6fba:	f0 e0       	ldi	r31, 0x00	; 0
    6fbc:	ee 5e       	subi	r30, 0xEE	; 238
    6fbe:	f2 4f       	sbci	r31, 0xF2	; 242
    6fc0:	99 81       	ldd	r25, Y+1	; 0x01
    6fc2:	90 83       	st	Z, r25
    6fc4:	8f 5f       	subi	r24, 0xFF	; 255
    6fc6:	80 93 11 0d 	sts	0x0D11, r24	; 0x800d11 <_ZN7TwoWire13txBufferIndexE>
    6fca:	80 93 10 0d 	sts	0x0D10, r24	; 0x800d10 <_ZN7TwoWire14txBufferLengthE>
    6fce:	04 c0       	rjmp	.+8      	; 0x6fd8 <_ZN7TwoWire5writeEh+0x50>
    6fd0:	61 e0       	ldi	r22, 0x01	; 1
    6fd2:	ce 01       	movw	r24, r28
    6fd4:	01 96       	adiw	r24, 0x01	; 1
    6fd6:	da dd       	rcall	.-1100   	; 0x6b8c <twi_transmit>
    6fd8:	81 e0       	ldi	r24, 0x01	; 1
    6fda:	90 e0       	ldi	r25, 0x00	; 0
    6fdc:	0f 90       	pop	r0
    6fde:	df 91       	pop	r29
    6fe0:	cf 91       	pop	r28
    6fe2:	08 95       	ret

00006fe4 <_ZN7TwoWireC1Ev>:
    6fe4:	fc 01       	movw	r30, r24
    6fe6:	13 82       	std	Z+3, r1	; 0x03
    6fe8:	12 82       	std	Z+2, r1	; 0x02
    6fea:	88 ee       	ldi	r24, 0xE8	; 232
    6fec:	93 e0       	ldi	r25, 0x03	; 3
    6fee:	a0 e0       	ldi	r26, 0x00	; 0
    6ff0:	b0 e0       	ldi	r27, 0x00	; 0
    6ff2:	84 83       	std	Z+4, r24	; 0x04
    6ff4:	95 83       	std	Z+5, r25	; 0x05
    6ff6:	a6 83       	std	Z+6, r26	; 0x06
    6ff8:	b7 83       	std	Z+7, r27	; 0x07
    6ffa:	8f e4       	ldi	r24, 0x4F	; 79
    6ffc:	99 e0       	ldi	r25, 0x09	; 9
    6ffe:	91 83       	std	Z+1, r25	; 0x01
    7000:	80 83       	st	Z, r24
    7002:	08 95       	ret

00007004 <_ZN7TwoWire5beginEv>:
    7004:	10 92 34 0d 	sts	0x0D34, r1	; 0x800d34 <_ZN7TwoWire13rxBufferIndexE>
    7008:	10 92 33 0d 	sts	0x0D33, r1	; 0x800d33 <_ZN7TwoWire14rxBufferLengthE>
    700c:	10 92 11 0d 	sts	0x0D11, r1	; 0x800d11 <_ZN7TwoWire13txBufferIndexE>
    7010:	10 92 10 0d 	sts	0x0D10, r1	; 0x800d10 <_ZN7TwoWire14txBufferLengthE>
    7014:	de dc       	rcall	.-1604   	; 0x69d2 <twi_init>
    7016:	8c e8       	ldi	r24, 0x8C	; 140
    7018:	97 e3       	ldi	r25, 0x37	; 55
    701a:	e5 dd       	rcall	.-1078   	; 0x6be6 <twi_attachSlaveTxEvent>
    701c:	82 e6       	ldi	r24, 0x62	; 98
    701e:	97 e3       	ldi	r25, 0x37	; 55
    7020:	dd cd       	rjmp	.-1094   	; 0x6bdc <twi_attachSlaveRxEvent>

00007022 <_ZN7TwoWire3endEv>:
    7022:	f5 cc       	rjmp	.-1558   	; 0x6a0e <twi_disable>

00007024 <_ZN7TwoWire8setClockEm>:
    7024:	cb 01       	movw	r24, r22
    7026:	ba 01       	movw	r22, r20
    7028:	ff cc       	rjmp	.-1538   	; 0x6a28 <twi_setFrequency>

0000702a <_ZN7TwoWire17beginTransmissionEh>:
    702a:	81 e0       	ldi	r24, 0x01	; 1
    702c:	80 93 0f 0d 	sts	0x0D0F, r24	; 0x800d0f <_ZN7TwoWire12transmittingE>
    7030:	60 93 32 0d 	sts	0x0D32, r22	; 0x800d32 <_ZN7TwoWire9txAddressE>
    7034:	10 92 11 0d 	sts	0x0D11, r1	; 0x800d11 <_ZN7TwoWire13txBufferIndexE>
    7038:	10 92 10 0d 	sts	0x0D10, r1	; 0x800d10 <_ZN7TwoWire14txBufferLengthE>
    703c:	08 95       	ret

0000703e <_ZN7TwoWire17beginTransmissionEi>:
    703e:	f5 cf       	rjmp	.-22     	; 0x702a <_ZN7TwoWire17beginTransmissionEh>

00007040 <_ZN7TwoWire15endTransmissionEh>:
    7040:	0f 93       	push	r16
    7042:	06 2f       	mov	r16, r22
    7044:	21 e0       	ldi	r18, 0x01	; 1
    7046:	40 91 10 0d 	lds	r20, 0x0D10	; 0x800d10 <_ZN7TwoWire14txBufferLengthE>
    704a:	62 e1       	ldi	r22, 0x12	; 18
    704c:	7d e0       	ldi	r23, 0x0D	; 13
    704e:	80 91 32 0d 	lds	r24, 0x0D32	; 0x800d32 <_ZN7TwoWire9txAddressE>
    7052:	46 dd       	rcall	.-1396   	; 0x6ae0 <twi_writeTo>
    7054:	10 92 11 0d 	sts	0x0D11, r1	; 0x800d11 <_ZN7TwoWire13txBufferIndexE>
    7058:	10 92 10 0d 	sts	0x0D10, r1	; 0x800d10 <_ZN7TwoWire14txBufferLengthE>
    705c:	10 92 0f 0d 	sts	0x0D0F, r1	; 0x800d0f <_ZN7TwoWire12transmittingE>
    7060:	0f 91       	pop	r16
    7062:	08 95       	ret

00007064 <_ZN7TwoWire11requestFromEhhmhh>:
    7064:	4f 92       	push	r4
    7066:	5f 92       	push	r5
    7068:	6f 92       	push	r6
    706a:	7f 92       	push	r7
    706c:	af 92       	push	r10
    706e:	bf 92       	push	r11
    7070:	cf 92       	push	r12
    7072:	ef 92       	push	r14
    7074:	ff 92       	push	r15
    7076:	0f 93       	push	r16
    7078:	1f 93       	push	r17
    707a:	cf 93       	push	r28
    707c:	df 93       	push	r29
    707e:	5c 01       	movw	r10, r24
    7080:	f6 2e       	mov	r15, r22
    7082:	d4 2f       	mov	r29, r20
    7084:	28 01       	movw	r4, r16
    7086:	39 01       	movw	r6, r18
    7088:	ee 20       	and	r14, r14
    708a:	11 f1       	breq	.+68     	; 0x70d0 <_ZN7TwoWire11requestFromEhhmhh+0x6c>
    708c:	ce df       	rcall	.-100    	; 0x702a <_ZN7TwoWire17beginTransmissionEh>
    708e:	ce 2d       	mov	r28, r14
    7090:	c4 30       	cpi	r28, 0x04	; 4
    7092:	08 f0       	brcs	.+2      	; 0x7096 <_ZN7TwoWire11requestFromEhhmhh+0x32>
    7094:	c3 e0       	ldi	r28, 0x03	; 3
    7096:	c1 50       	subi	r28, 0x01	; 1
    7098:	c0 f0       	brcs	.+48     	; 0x70ca <_ZN7TwoWire11requestFromEhhmhh+0x66>
    709a:	28 e0       	ldi	r18, 0x08	; 8
    709c:	c2 9f       	mul	r28, r18
    709e:	c0 01       	movw	r24, r0
    70a0:	11 24       	eor	r1, r1
    70a2:	a3 01       	movw	r20, r6
    70a4:	92 01       	movw	r18, r4
    70a6:	04 c0       	rjmp	.+8      	; 0x70b0 <_ZN7TwoWire11requestFromEhhmhh+0x4c>
    70a8:	56 95       	lsr	r21
    70aa:	47 95       	ror	r20
    70ac:	37 95       	ror	r19
    70ae:	27 95       	ror	r18
    70b0:	8a 95       	dec	r24
    70b2:	d2 f7       	brpl	.-12     	; 0x70a8 <_ZN7TwoWire11requestFromEhhmhh+0x44>
    70b4:	ca 01       	movw	r24, r20
    70b6:	b9 01       	movw	r22, r18
    70b8:	d5 01       	movw	r26, r10
    70ba:	ed 91       	ld	r30, X+
    70bc:	fc 91       	ld	r31, X
    70be:	01 90       	ld	r0, Z+
    70c0:	f0 81       	ld	r31, Z
    70c2:	e0 2d       	mov	r30, r0
    70c4:	c5 01       	movw	r24, r10
    70c6:	09 95       	icall
    70c8:	e6 cf       	rjmp	.-52     	; 0x7096 <_ZN7TwoWire11requestFromEhhmhh+0x32>
    70ca:	60 e0       	ldi	r22, 0x00	; 0
    70cc:	c5 01       	movw	r24, r10
    70ce:	b8 df       	rcall	.-144    	; 0x7040 <_ZN7TwoWire15endTransmissionEh>
    70d0:	4d 2f       	mov	r20, r29
    70d2:	d1 32       	cpi	r29, 0x21	; 33
    70d4:	08 f0       	brcs	.+2      	; 0x70d8 <_ZN7TwoWire11requestFromEhhmhh+0x74>
    70d6:	40 e2       	ldi	r20, 0x20	; 32
    70d8:	2c 2d       	mov	r18, r12
    70da:	65 e3       	ldi	r22, 0x35	; 53
    70dc:	7d e0       	ldi	r23, 0x0D	; 13
    70de:	8f 2d       	mov	r24, r15
    70e0:	b7 dc       	rcall	.-1682   	; 0x6a50 <twi_readFrom>
    70e2:	10 92 34 0d 	sts	0x0D34, r1	; 0x800d34 <_ZN7TwoWire13rxBufferIndexE>
    70e6:	80 93 33 0d 	sts	0x0D33, r24	; 0x800d33 <_ZN7TwoWire14rxBufferLengthE>
    70ea:	df 91       	pop	r29
    70ec:	cf 91       	pop	r28
    70ee:	1f 91       	pop	r17
    70f0:	0f 91       	pop	r16
    70f2:	ff 90       	pop	r15
    70f4:	ef 90       	pop	r14
    70f6:	cf 90       	pop	r12
    70f8:	bf 90       	pop	r11
    70fa:	af 90       	pop	r10
    70fc:	7f 90       	pop	r7
    70fe:	6f 90       	pop	r6
    7100:	5f 90       	pop	r5
    7102:	4f 90       	pop	r4
    7104:	08 95       	ret

00007106 <_ZN7TwoWire11requestFromEhhh>:
    7106:	cf 92       	push	r12
    7108:	ef 92       	push	r14
    710a:	0f 93       	push	r16
    710c:	1f 93       	push	r17
    710e:	c2 2e       	mov	r12, r18
    7110:	e1 2c       	mov	r14, r1
    7112:	00 e0       	ldi	r16, 0x00	; 0
    7114:	10 e0       	ldi	r17, 0x00	; 0
    7116:	98 01       	movw	r18, r16
    7118:	a5 df       	rcall	.-182    	; 0x7064 <_ZN7TwoWire11requestFromEhhmhh>
    711a:	1f 91       	pop	r17
    711c:	0f 91       	pop	r16
    711e:	ef 90       	pop	r14
    7120:	cf 90       	pop	r12
    7122:	08 95       	ret

00007124 <_ZN7TwoWire11requestFromEhh>:
    7124:	21 e0       	ldi	r18, 0x01	; 1
    7126:	ef cf       	rjmp	.-34     	; 0x7106 <_ZN7TwoWire11requestFromEhhh>

00007128 <_ZN7TwoWire11requestFromEii>:
    7128:	21 e0       	ldi	r18, 0x01	; 1
    712a:	ed cf       	rjmp	.-38     	; 0x7106 <_ZN7TwoWire11requestFromEhhh>

0000712c <_ZN7TwoWire15endTransmissionEv>:
    712c:	61 e0       	ldi	r22, 0x01	; 1
    712e:	88 cf       	rjmp	.-240    	; 0x7040 <_ZN7TwoWire15endTransmissionEh>

00007130 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    7130:	8f ef       	ldi	r24, 0xFF	; 255
    7132:	9c e0       	ldi	r25, 0x0C	; 12
    7134:	57 cf       	rjmp	.-338    	; 0x6fe4 <_ZN7TwoWireC1Ev>

00007136 <__cmpsf2>:
    7136:	a8 d0       	rcall	.+336    	; 0x7288 <__fp_cmp>
    7138:	08 f4       	brcc	.+2      	; 0x713c <__cmpsf2+0x6>
    713a:	81 e0       	ldi	r24, 0x01	; 1
    713c:	08 95       	ret

0000713e <__divsf3>:
    713e:	0c d0       	rcall	.+24     	; 0x7158 <__divsf3x>
    7140:	de c0       	rjmp	.+444    	; 0x72fe <__fp_round>
    7142:	d6 d0       	rcall	.+428    	; 0x72f0 <__fp_pscB>
    7144:	40 f0       	brcs	.+16     	; 0x7156 <__divsf3+0x18>
    7146:	cd d0       	rcall	.+410    	; 0x72e2 <__fp_pscA>
    7148:	30 f0       	brcs	.+12     	; 0x7156 <__divsf3+0x18>
    714a:	21 f4       	brne	.+8      	; 0x7154 <__divsf3+0x16>
    714c:	5f 3f       	cpi	r21, 0xFF	; 255
    714e:	19 f0       	breq	.+6      	; 0x7156 <__divsf3+0x18>
    7150:	bf c0       	rjmp	.+382    	; 0x72d0 <__fp_inf>
    7152:	51 11       	cpse	r21, r1
    7154:	08 c1       	rjmp	.+528    	; 0x7366 <__fp_szero>
    7156:	c2 c0       	rjmp	.+388    	; 0x72dc <__fp_nan>

00007158 <__divsf3x>:
    7158:	e3 d0       	rcall	.+454    	; 0x7320 <__fp_split3>
    715a:	98 f3       	brcs	.-26     	; 0x7142 <__divsf3+0x4>

0000715c <__divsf3_pse>:
    715c:	99 23       	and	r25, r25
    715e:	c9 f3       	breq	.-14     	; 0x7152 <__divsf3+0x14>
    7160:	55 23       	and	r21, r21
    7162:	b1 f3       	breq	.-20     	; 0x7150 <__divsf3+0x12>
    7164:	95 1b       	sub	r25, r21
    7166:	55 0b       	sbc	r21, r21
    7168:	bb 27       	eor	r27, r27
    716a:	aa 27       	eor	r26, r26
    716c:	62 17       	cp	r22, r18
    716e:	73 07       	cpc	r23, r19
    7170:	84 07       	cpc	r24, r20
    7172:	38 f0       	brcs	.+14     	; 0x7182 <__divsf3_pse+0x26>
    7174:	9f 5f       	subi	r25, 0xFF	; 255
    7176:	5f 4f       	sbci	r21, 0xFF	; 255
    7178:	22 0f       	add	r18, r18
    717a:	33 1f       	adc	r19, r19
    717c:	44 1f       	adc	r20, r20
    717e:	aa 1f       	adc	r26, r26
    7180:	a9 f3       	breq	.-22     	; 0x716c <__divsf3_pse+0x10>
    7182:	33 d0       	rcall	.+102    	; 0x71ea <__divsf3_pse+0x8e>
    7184:	0e 2e       	mov	r0, r30
    7186:	3a f0       	brmi	.+14     	; 0x7196 <__divsf3_pse+0x3a>
    7188:	e0 e8       	ldi	r30, 0x80	; 128
    718a:	30 d0       	rcall	.+96     	; 0x71ec <__divsf3_pse+0x90>
    718c:	91 50       	subi	r25, 0x01	; 1
    718e:	50 40       	sbci	r21, 0x00	; 0
    7190:	e6 95       	lsr	r30
    7192:	00 1c       	adc	r0, r0
    7194:	ca f7       	brpl	.-14     	; 0x7188 <__divsf3_pse+0x2c>
    7196:	29 d0       	rcall	.+82     	; 0x71ea <__divsf3_pse+0x8e>
    7198:	fe 2f       	mov	r31, r30
    719a:	27 d0       	rcall	.+78     	; 0x71ea <__divsf3_pse+0x8e>
    719c:	66 0f       	add	r22, r22
    719e:	77 1f       	adc	r23, r23
    71a0:	88 1f       	adc	r24, r24
    71a2:	bb 1f       	adc	r27, r27
    71a4:	26 17       	cp	r18, r22
    71a6:	37 07       	cpc	r19, r23
    71a8:	48 07       	cpc	r20, r24
    71aa:	ab 07       	cpc	r26, r27
    71ac:	b0 e8       	ldi	r27, 0x80	; 128
    71ae:	09 f0       	breq	.+2      	; 0x71b2 <__divsf3_pse+0x56>
    71b0:	bb 0b       	sbc	r27, r27
    71b2:	80 2d       	mov	r24, r0
    71b4:	bf 01       	movw	r22, r30
    71b6:	ff 27       	eor	r31, r31
    71b8:	93 58       	subi	r25, 0x83	; 131
    71ba:	5f 4f       	sbci	r21, 0xFF	; 255
    71bc:	2a f0       	brmi	.+10     	; 0x71c8 <__divsf3_pse+0x6c>
    71be:	9e 3f       	cpi	r25, 0xFE	; 254
    71c0:	51 05       	cpc	r21, r1
    71c2:	68 f0       	brcs	.+26     	; 0x71de <__divsf3_pse+0x82>
    71c4:	85 c0       	rjmp	.+266    	; 0x72d0 <__fp_inf>
    71c6:	cf c0       	rjmp	.+414    	; 0x7366 <__fp_szero>
    71c8:	5f 3f       	cpi	r21, 0xFF	; 255
    71ca:	ec f3       	brlt	.-6      	; 0x71c6 <__divsf3_pse+0x6a>
    71cc:	98 3e       	cpi	r25, 0xE8	; 232
    71ce:	dc f3       	brlt	.-10     	; 0x71c6 <__divsf3_pse+0x6a>
    71d0:	86 95       	lsr	r24
    71d2:	77 95       	ror	r23
    71d4:	67 95       	ror	r22
    71d6:	b7 95       	ror	r27
    71d8:	f7 95       	ror	r31
    71da:	9f 5f       	subi	r25, 0xFF	; 255
    71dc:	c9 f7       	brne	.-14     	; 0x71d0 <__divsf3_pse+0x74>
    71de:	88 0f       	add	r24, r24
    71e0:	91 1d       	adc	r25, r1
    71e2:	96 95       	lsr	r25
    71e4:	87 95       	ror	r24
    71e6:	97 f9       	bld	r25, 7
    71e8:	08 95       	ret
    71ea:	e1 e0       	ldi	r30, 0x01	; 1
    71ec:	66 0f       	add	r22, r22
    71ee:	77 1f       	adc	r23, r23
    71f0:	88 1f       	adc	r24, r24
    71f2:	bb 1f       	adc	r27, r27
    71f4:	62 17       	cp	r22, r18
    71f6:	73 07       	cpc	r23, r19
    71f8:	84 07       	cpc	r24, r20
    71fa:	ba 07       	cpc	r27, r26
    71fc:	20 f0       	brcs	.+8      	; 0x7206 <__divsf3_pse+0xaa>
    71fe:	62 1b       	sub	r22, r18
    7200:	73 0b       	sbc	r23, r19
    7202:	84 0b       	sbc	r24, r20
    7204:	ba 0b       	sbc	r27, r26
    7206:	ee 1f       	adc	r30, r30
    7208:	88 f7       	brcc	.-30     	; 0x71ec <__divsf3_pse+0x90>
    720a:	e0 95       	com	r30
    720c:	08 95       	ret

0000720e <__floatunsisf>:
    720e:	e8 94       	clt
    7210:	09 c0       	rjmp	.+18     	; 0x7224 <__floatsisf+0x12>

00007212 <__floatsisf>:
    7212:	97 fb       	bst	r25, 7
    7214:	3e f4       	brtc	.+14     	; 0x7224 <__floatsisf+0x12>
    7216:	90 95       	com	r25
    7218:	80 95       	com	r24
    721a:	70 95       	com	r23
    721c:	61 95       	neg	r22
    721e:	7f 4f       	sbci	r23, 0xFF	; 255
    7220:	8f 4f       	sbci	r24, 0xFF	; 255
    7222:	9f 4f       	sbci	r25, 0xFF	; 255
    7224:	99 23       	and	r25, r25
    7226:	a9 f0       	breq	.+42     	; 0x7252 <__floatsisf+0x40>
    7228:	f9 2f       	mov	r31, r25
    722a:	96 e9       	ldi	r25, 0x96	; 150
    722c:	bb 27       	eor	r27, r27
    722e:	93 95       	inc	r25
    7230:	f6 95       	lsr	r31
    7232:	87 95       	ror	r24
    7234:	77 95       	ror	r23
    7236:	67 95       	ror	r22
    7238:	b7 95       	ror	r27
    723a:	f1 11       	cpse	r31, r1
    723c:	f8 cf       	rjmp	.-16     	; 0x722e <__floatsisf+0x1c>
    723e:	fa f4       	brpl	.+62     	; 0x727e <__floatsisf+0x6c>
    7240:	bb 0f       	add	r27, r27
    7242:	11 f4       	brne	.+4      	; 0x7248 <__floatsisf+0x36>
    7244:	60 ff       	sbrs	r22, 0
    7246:	1b c0       	rjmp	.+54     	; 0x727e <__floatsisf+0x6c>
    7248:	6f 5f       	subi	r22, 0xFF	; 255
    724a:	7f 4f       	sbci	r23, 0xFF	; 255
    724c:	8f 4f       	sbci	r24, 0xFF	; 255
    724e:	9f 4f       	sbci	r25, 0xFF	; 255
    7250:	16 c0       	rjmp	.+44     	; 0x727e <__floatsisf+0x6c>
    7252:	88 23       	and	r24, r24
    7254:	11 f0       	breq	.+4      	; 0x725a <__floatsisf+0x48>
    7256:	96 e9       	ldi	r25, 0x96	; 150
    7258:	11 c0       	rjmp	.+34     	; 0x727c <__floatsisf+0x6a>
    725a:	77 23       	and	r23, r23
    725c:	21 f0       	breq	.+8      	; 0x7266 <__floatsisf+0x54>
    725e:	9e e8       	ldi	r25, 0x8E	; 142
    7260:	87 2f       	mov	r24, r23
    7262:	76 2f       	mov	r23, r22
    7264:	05 c0       	rjmp	.+10     	; 0x7270 <__floatsisf+0x5e>
    7266:	66 23       	and	r22, r22
    7268:	71 f0       	breq	.+28     	; 0x7286 <__floatsisf+0x74>
    726a:	96 e8       	ldi	r25, 0x86	; 134
    726c:	86 2f       	mov	r24, r22
    726e:	70 e0       	ldi	r23, 0x00	; 0
    7270:	60 e0       	ldi	r22, 0x00	; 0
    7272:	2a f0       	brmi	.+10     	; 0x727e <__floatsisf+0x6c>
    7274:	9a 95       	dec	r25
    7276:	66 0f       	add	r22, r22
    7278:	77 1f       	adc	r23, r23
    727a:	88 1f       	adc	r24, r24
    727c:	da f7       	brpl	.-10     	; 0x7274 <__floatsisf+0x62>
    727e:	88 0f       	add	r24, r24
    7280:	96 95       	lsr	r25
    7282:	87 95       	ror	r24
    7284:	97 f9       	bld	r25, 7
    7286:	08 95       	ret

00007288 <__fp_cmp>:
    7288:	99 0f       	add	r25, r25
    728a:	00 08       	sbc	r0, r0
    728c:	55 0f       	add	r21, r21
    728e:	aa 0b       	sbc	r26, r26
    7290:	e0 e8       	ldi	r30, 0x80	; 128
    7292:	fe ef       	ldi	r31, 0xFE	; 254
    7294:	16 16       	cp	r1, r22
    7296:	17 06       	cpc	r1, r23
    7298:	e8 07       	cpc	r30, r24
    729a:	f9 07       	cpc	r31, r25
    729c:	c0 f0       	brcs	.+48     	; 0x72ce <__fp_cmp+0x46>
    729e:	12 16       	cp	r1, r18
    72a0:	13 06       	cpc	r1, r19
    72a2:	e4 07       	cpc	r30, r20
    72a4:	f5 07       	cpc	r31, r21
    72a6:	98 f0       	brcs	.+38     	; 0x72ce <__fp_cmp+0x46>
    72a8:	62 1b       	sub	r22, r18
    72aa:	73 0b       	sbc	r23, r19
    72ac:	84 0b       	sbc	r24, r20
    72ae:	95 0b       	sbc	r25, r21
    72b0:	39 f4       	brne	.+14     	; 0x72c0 <__fp_cmp+0x38>
    72b2:	0a 26       	eor	r0, r26
    72b4:	61 f0       	breq	.+24     	; 0x72ce <__fp_cmp+0x46>
    72b6:	23 2b       	or	r18, r19
    72b8:	24 2b       	or	r18, r20
    72ba:	25 2b       	or	r18, r21
    72bc:	21 f4       	brne	.+8      	; 0x72c6 <__fp_cmp+0x3e>
    72be:	08 95       	ret
    72c0:	0a 26       	eor	r0, r26
    72c2:	09 f4       	brne	.+2      	; 0x72c6 <__fp_cmp+0x3e>
    72c4:	a1 40       	sbci	r26, 0x01	; 1
    72c6:	a6 95       	lsr	r26
    72c8:	8f ef       	ldi	r24, 0xFF	; 255
    72ca:	81 1d       	adc	r24, r1
    72cc:	81 1d       	adc	r24, r1
    72ce:	08 95       	ret

000072d0 <__fp_inf>:
    72d0:	97 f9       	bld	r25, 7
    72d2:	9f 67       	ori	r25, 0x7F	; 127
    72d4:	80 e8       	ldi	r24, 0x80	; 128
    72d6:	70 e0       	ldi	r23, 0x00	; 0
    72d8:	60 e0       	ldi	r22, 0x00	; 0
    72da:	08 95       	ret

000072dc <__fp_nan>:
    72dc:	9f ef       	ldi	r25, 0xFF	; 255
    72de:	80 ec       	ldi	r24, 0xC0	; 192
    72e0:	08 95       	ret

000072e2 <__fp_pscA>:
    72e2:	00 24       	eor	r0, r0
    72e4:	0a 94       	dec	r0
    72e6:	16 16       	cp	r1, r22
    72e8:	17 06       	cpc	r1, r23
    72ea:	18 06       	cpc	r1, r24
    72ec:	09 06       	cpc	r0, r25
    72ee:	08 95       	ret

000072f0 <__fp_pscB>:
    72f0:	00 24       	eor	r0, r0
    72f2:	0a 94       	dec	r0
    72f4:	12 16       	cp	r1, r18
    72f6:	13 06       	cpc	r1, r19
    72f8:	14 06       	cpc	r1, r20
    72fa:	05 06       	cpc	r0, r21
    72fc:	08 95       	ret

000072fe <__fp_round>:
    72fe:	09 2e       	mov	r0, r25
    7300:	03 94       	inc	r0
    7302:	00 0c       	add	r0, r0
    7304:	11 f4       	brne	.+4      	; 0x730a <__fp_round+0xc>
    7306:	88 23       	and	r24, r24
    7308:	52 f0       	brmi	.+20     	; 0x731e <__fp_round+0x20>
    730a:	bb 0f       	add	r27, r27
    730c:	40 f4       	brcc	.+16     	; 0x731e <__fp_round+0x20>
    730e:	bf 2b       	or	r27, r31
    7310:	11 f4       	brne	.+4      	; 0x7316 <__fp_round+0x18>
    7312:	60 ff       	sbrs	r22, 0
    7314:	04 c0       	rjmp	.+8      	; 0x731e <__fp_round+0x20>
    7316:	6f 5f       	subi	r22, 0xFF	; 255
    7318:	7f 4f       	sbci	r23, 0xFF	; 255
    731a:	8f 4f       	sbci	r24, 0xFF	; 255
    731c:	9f 4f       	sbci	r25, 0xFF	; 255
    731e:	08 95       	ret

00007320 <__fp_split3>:
    7320:	57 fd       	sbrc	r21, 7
    7322:	90 58       	subi	r25, 0x80	; 128
    7324:	44 0f       	add	r20, r20
    7326:	55 1f       	adc	r21, r21
    7328:	59 f0       	breq	.+22     	; 0x7340 <__fp_splitA+0x10>
    732a:	5f 3f       	cpi	r21, 0xFF	; 255
    732c:	71 f0       	breq	.+28     	; 0x734a <__fp_splitA+0x1a>
    732e:	47 95       	ror	r20

00007330 <__fp_splitA>:
    7330:	88 0f       	add	r24, r24
    7332:	97 fb       	bst	r25, 7
    7334:	99 1f       	adc	r25, r25
    7336:	61 f0       	breq	.+24     	; 0x7350 <__fp_splitA+0x20>
    7338:	9f 3f       	cpi	r25, 0xFF	; 255
    733a:	79 f0       	breq	.+30     	; 0x735a <__fp_splitA+0x2a>
    733c:	87 95       	ror	r24
    733e:	08 95       	ret
    7340:	12 16       	cp	r1, r18
    7342:	13 06       	cpc	r1, r19
    7344:	14 06       	cpc	r1, r20
    7346:	55 1f       	adc	r21, r21
    7348:	f2 cf       	rjmp	.-28     	; 0x732e <__fp_split3+0xe>
    734a:	46 95       	lsr	r20
    734c:	f1 df       	rcall	.-30     	; 0x7330 <__fp_splitA>
    734e:	08 c0       	rjmp	.+16     	; 0x7360 <__fp_splitA+0x30>
    7350:	16 16       	cp	r1, r22
    7352:	17 06       	cpc	r1, r23
    7354:	18 06       	cpc	r1, r24
    7356:	99 1f       	adc	r25, r25
    7358:	f1 cf       	rjmp	.-30     	; 0x733c <__fp_splitA+0xc>
    735a:	86 95       	lsr	r24
    735c:	71 05       	cpc	r23, r1
    735e:	61 05       	cpc	r22, r1
    7360:	08 94       	sec
    7362:	08 95       	ret

00007364 <__fp_zero>:
    7364:	e8 94       	clt

00007366 <__fp_szero>:
    7366:	bb 27       	eor	r27, r27
    7368:	66 27       	eor	r22, r22
    736a:	77 27       	eor	r23, r23
    736c:	cb 01       	movw	r24, r22
    736e:	97 f9       	bld	r25, 7
    7370:	08 95       	ret

00007372 <__cxa_pure_virtual>:
    7372:	0e 94 e3 44 	call	0x89c6	; 0x89c6 <abort>

00007376 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    7376:	1f 92       	push	r1
    7378:	0f 92       	push	r0
    737a:	0f b6       	in	r0, 0x3f	; 63
    737c:	0f 92       	push	r0
    737e:	11 24       	eor	r1, r1
    7380:	2f 93       	push	r18
    7382:	8f 93       	push	r24
    7384:	9f 93       	push	r25
    7386:	ef 93       	push	r30
    7388:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    738a:	e0 91 65 0d 	lds	r30, 0x0D65	; 0x800d65 <Serial+0x10>
    738e:	f0 91 66 0d 	lds	r31, 0x0D66	; 0x800d66 <Serial+0x11>
    7392:	80 81       	ld	r24, Z
    7394:	e0 91 6b 0d 	lds	r30, 0x0D6B	; 0x800d6b <Serial+0x16>
    7398:	f0 91 6c 0d 	lds	r31, 0x0D6C	; 0x800d6c <Serial+0x17>
    739c:	82 fd       	sbrc	r24, 2
    739e:	12 c0       	rjmp	.+36     	; 0x73c4 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    73a0:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    73a2:	80 91 6e 0d 	lds	r24, 0x0D6E	; 0x800d6e <Serial+0x19>
    73a6:	8f 5f       	subi	r24, 0xFF	; 255
    73a8:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    73aa:	20 91 6f 0d 	lds	r18, 0x0D6F	; 0x800d6f <Serial+0x1a>
    73ae:	82 17       	cp	r24, r18
    73b0:	51 f0       	breq	.+20     	; 0x73c6 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    73b2:	e0 91 6e 0d 	lds	r30, 0x0D6E	; 0x800d6e <Serial+0x19>
    73b6:	f0 e0       	ldi	r31, 0x00	; 0
    73b8:	eb 5a       	subi	r30, 0xAB	; 171
    73ba:	f2 4f       	sbci	r31, 0xF2	; 242
    73bc:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    73be:	80 93 6e 0d 	sts	0x0D6E, r24	; 0x800d6e <Serial+0x19>
    73c2:	01 c0       	rjmp	.+2      	; 0x73c6 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    73c4:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    73c6:	ff 91       	pop	r31
    73c8:	ef 91       	pop	r30
    73ca:	9f 91       	pop	r25
    73cc:	8f 91       	pop	r24
    73ce:	2f 91       	pop	r18
    73d0:	0f 90       	pop	r0
    73d2:	0f be       	out	0x3f, r0	; 63
    73d4:	0f 90       	pop	r0
    73d6:	1f 90       	pop	r1
    73d8:	18 95       	reti

000073da <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    73da:	1f 92       	push	r1
    73dc:	0f 92       	push	r0
    73de:	0f b6       	in	r0, 0x3f	; 63
    73e0:	0f 92       	push	r0
    73e2:	11 24       	eor	r1, r1
    73e4:	2f 93       	push	r18
    73e6:	3f 93       	push	r19
    73e8:	4f 93       	push	r20
    73ea:	5f 93       	push	r21
    73ec:	6f 93       	push	r22
    73ee:	7f 93       	push	r23
    73f0:	8f 93       	push	r24
    73f2:	9f 93       	push	r25
    73f4:	af 93       	push	r26
    73f6:	bf 93       	push	r27
    73f8:	ef 93       	push	r30
    73fa:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    73fc:	85 e5       	ldi	r24, 0x55	; 85
    73fe:	9d e0       	ldi	r25, 0x0D	; 13
    7400:	b2 d6       	rcall	.+3428   	; 0x8166 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    7402:	ff 91       	pop	r31
    7404:	ef 91       	pop	r30
    7406:	bf 91       	pop	r27
    7408:	af 91       	pop	r26
    740a:	9f 91       	pop	r25
    740c:	8f 91       	pop	r24
    740e:	7f 91       	pop	r23
    7410:	6f 91       	pop	r22
    7412:	5f 91       	pop	r21
    7414:	4f 91       	pop	r20
    7416:	3f 91       	pop	r19
    7418:	2f 91       	pop	r18
    741a:	0f 90       	pop	r0
    741c:	0f be       	out	0x3f, r0	; 63
    741e:	0f 90       	pop	r0
    7420:	1f 90       	pop	r1
    7422:	18 95       	reti

00007424 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    7424:	85 e5       	ldi	r24, 0x55	; 85
    7426:	9d e0       	ldi	r25, 0x0D	; 13
    7428:	54 d6       	rcall	.+3240   	; 0x80d2 <_ZN14HardwareSerial9availableEv>
    742a:	21 e0       	ldi	r18, 0x01	; 1
    742c:	89 2b       	or	r24, r25
    742e:	09 f4       	brne	.+2      	; 0x7432 <_Z17Serial0_availablev+0xe>
    7430:	20 e0       	ldi	r18, 0x00	; 0
}
    7432:	82 2f       	mov	r24, r18
    7434:	08 95       	ret

00007436 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    7436:	e5 e5       	ldi	r30, 0x55	; 85
    7438:	fd e0       	ldi	r31, 0x0D	; 13
    743a:	13 82       	std	Z+3, r1	; 0x03
    743c:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    743e:	88 ee       	ldi	r24, 0xE8	; 232
    7440:	93 e0       	ldi	r25, 0x03	; 3
    7442:	a0 e0       	ldi	r26, 0x00	; 0
    7444:	b0 e0       	ldi	r27, 0x00	; 0
    7446:	84 83       	std	Z+4, r24	; 0x04
    7448:	95 83       	std	Z+5, r25	; 0x05
    744a:	a6 83       	std	Z+6, r26	; 0x06
    744c:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    744e:	83 e7       	ldi	r24, 0x73	; 115
    7450:	99 e0       	ldi	r25, 0x09	; 9
    7452:	91 83       	std	Z+1, r25	; 0x01
    7454:	80 83       	st	Z, r24
    7456:	85 ec       	ldi	r24, 0xC5	; 197
    7458:	90 e0       	ldi	r25, 0x00	; 0
    745a:	95 87       	std	Z+13, r25	; 0x0d
    745c:	84 87       	std	Z+12, r24	; 0x0c
    745e:	84 ec       	ldi	r24, 0xC4	; 196
    7460:	90 e0       	ldi	r25, 0x00	; 0
    7462:	97 87       	std	Z+15, r25	; 0x0f
    7464:	86 87       	std	Z+14, r24	; 0x0e
    7466:	80 ec       	ldi	r24, 0xC0	; 192
    7468:	90 e0       	ldi	r25, 0x00	; 0
    746a:	91 8b       	std	Z+17, r25	; 0x11
    746c:	80 8b       	std	Z+16, r24	; 0x10
    746e:	81 ec       	ldi	r24, 0xC1	; 193
    7470:	90 e0       	ldi	r25, 0x00	; 0
    7472:	93 8b       	std	Z+19, r25	; 0x13
    7474:	82 8b       	std	Z+18, r24	; 0x12
    7476:	82 ec       	ldi	r24, 0xC2	; 194
    7478:	90 e0       	ldi	r25, 0x00	; 0
    747a:	95 8b       	std	Z+21, r25	; 0x15
    747c:	84 8b       	std	Z+20, r24	; 0x14
    747e:	86 ec       	ldi	r24, 0xC6	; 198
    7480:	90 e0       	ldi	r25, 0x00	; 0
    7482:	97 8b       	std	Z+23, r25	; 0x17
    7484:	86 8b       	std	Z+22, r24	; 0x16
    7486:	11 8e       	std	Z+25, r1	; 0x19
    7488:	12 8e       	std	Z+26, r1	; 0x1a
    748a:	13 8e       	std	Z+27, r1	; 0x1b
    748c:	14 8e       	std	Z+28, r1	; 0x1c
    748e:	08 95       	ret

00007490 <_ZNK9IPAddress7printToER5Print>:
        // Too few dots (there must be 3 dots)
        return false;
    }
    _address.bytes[3] = acc;
    return true;
}
    7490:	8f 92       	push	r8
    7492:	9f 92       	push	r9
    7494:	af 92       	push	r10
    7496:	bf 92       	push	r11
    7498:	cf 92       	push	r12
    749a:	df 92       	push	r13
    749c:	ef 92       	push	r14
    749e:	ff 92       	push	r15
    74a0:	0f 93       	push	r16
    74a2:	1f 93       	push	r17
    74a4:	cf 93       	push	r28
    74a6:	df 93       	push	r29
    74a8:	7c 01       	movw	r14, r24
    74aa:	8b 01       	movw	r16, r22
    74ac:	4c 01       	movw	r8, r24
    74ae:	82 e0       	ldi	r24, 0x02	; 2
    74b0:	88 0e       	add	r8, r24
    74b2:	91 1c       	adc	r9, r1
    74b4:	57 01       	movw	r10, r14
    74b6:	e5 e0       	ldi	r30, 0x05	; 5
    74b8:	ae 0e       	add	r10, r30
    74ba:	b1 1c       	adc	r11, r1
    74bc:	c0 e0       	ldi	r28, 0x00	; 0
    74be:	d0 e0       	ldi	r29, 0x00	; 0
    74c0:	f4 01       	movw	r30, r8
    74c2:	61 91       	ld	r22, Z+
    74c4:	4f 01       	movw	r8, r30
    74c6:	4a e0       	ldi	r20, 0x0A	; 10
    74c8:	50 e0       	ldi	r21, 0x00	; 0
    74ca:	c8 01       	movw	r24, r16
    74cc:	57 d1       	rcall	.+686    	; 0x777c <_ZN5Print5printEhi>
    74ce:	6c 01       	movw	r12, r24
    74d0:	6e e2       	ldi	r22, 0x2E	; 46
    74d2:	c8 01       	movw	r24, r16
    74d4:	c6 d0       	rcall	.+396    	; 0x7662 <_ZN5Print5printEc>
    74d6:	8c 0d       	add	r24, r12
    74d8:	9d 1d       	adc	r25, r13
    74da:	c8 0f       	add	r28, r24
    74dc:	d9 1f       	adc	r29, r25
    74de:	8a 14       	cp	r8, r10
    74e0:	9b 04       	cpc	r9, r11
    74e2:	71 f7       	brne	.-36     	; 0x74c0 <_ZNK9IPAddress7printToER5Print+0x30>
    74e4:	4a e0       	ldi	r20, 0x0A	; 10
    74e6:	50 e0       	ldi	r21, 0x00	; 0
    74e8:	f7 01       	movw	r30, r14
    74ea:	65 81       	ldd	r22, Z+5	; 0x05
    74ec:	c8 01       	movw	r24, r16
    74ee:	46 d1       	rcall	.+652    	; 0x777c <_ZN5Print5printEhi>
    74f0:	8c 0f       	add	r24, r28
    74f2:	9d 1f       	adc	r25, r29
    74f4:	df 91       	pop	r29
    74f6:	cf 91       	pop	r28
    74f8:	1f 91       	pop	r17
    74fa:	0f 91       	pop	r16
    74fc:	ff 90       	pop	r15
    74fe:	ef 90       	pop	r14
    7500:	df 90       	pop	r13
    7502:	cf 90       	pop	r12
    7504:	bf 90       	pop	r11
    7506:	af 90       	pop	r10
    7508:	9f 90       	pop	r9
    750a:	8f 90       	pop	r8
    750c:	08 95       	ret

0000750e <_ZN9IPAddressC1Ev>:
    750e:	21 e6       	ldi	r18, 0x61	; 97
    7510:	39 e0       	ldi	r19, 0x09	; 9
    7512:	fc 01       	movw	r30, r24
    7514:	31 83       	std	Z+1, r19	; 0x01
    7516:	20 83       	st	Z, r18
    7518:	12 82       	std	Z+2, r1	; 0x02
    751a:	13 82       	std	Z+3, r1	; 0x03
    751c:	14 82       	std	Z+4, r1	; 0x04
    751e:	15 82       	std	Z+5, r1	; 0x05
    7520:	08 95       	ret

00007522 <_ZN9IPAddressC1Ehhhh>:
    7522:	0f 93       	push	r16
    7524:	fc 01       	movw	r30, r24
    7526:	81 e6       	ldi	r24, 0x61	; 97
    7528:	99 e0       	ldi	r25, 0x09	; 9
    752a:	91 83       	std	Z+1, r25	; 0x01
    752c:	80 83       	st	Z, r24
    752e:	62 83       	std	Z+2, r22	; 0x02
    7530:	43 83       	std	Z+3, r20	; 0x03
    7532:	24 83       	std	Z+4, r18	; 0x04
    7534:	05 83       	std	Z+5, r16	; 0x05
    7536:	0f 91       	pop	r16
    7538:	08 95       	ret

0000753a <_ZN9IPAddressC1EPKh>:
    753a:	dc 01       	movw	r26, r24
    753c:	81 e6       	ldi	r24, 0x61	; 97
    753e:	99 e0       	ldi	r25, 0x09	; 9
    7540:	8d 93       	st	X+, r24
    7542:	9d 93       	st	X+, r25
    7544:	84 e0       	ldi	r24, 0x04	; 4
    7546:	fb 01       	movw	r30, r22
    7548:	01 90       	ld	r0, Z+
    754a:	0d 92       	st	X+, r0
    754c:	8a 95       	dec	r24
    754e:	e1 f7       	brne	.-8      	; 0x7548 <_ZN9IPAddressC1EPKh+0xe>
    7550:	08 95       	ret

00007552 <_ZN9IPAddressaSEPKh>:

IPAddress& IPAddress::operator=(const uint8_t *address)
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
    7552:	dc 01       	movw	r26, r24
    7554:	12 96       	adiw	r26, 0x02	; 2
    7556:	24 e0       	ldi	r18, 0x04	; 4
    7558:	fb 01       	movw	r30, r22
    755a:	01 90       	ld	r0, Z+
    755c:	0d 92       	st	X+, r0
    755e:	2a 95       	dec	r18
    7560:	e1 f7       	brne	.-8      	; 0x755a <_ZN9IPAddressaSEPKh+0x8>
    return *this;
}
    7562:	08 95       	ret

00007564 <initVariant>:
    7564:	08 95       	ret

00007566 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    7566:	ef d1       	rcall	.+990    	; 0x7946 <init>

	initVariant();
    7568:	fd df       	rcall	.-6      	; 0x7564 <initVariant>
    756a:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <setup>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    756e:	c6 ea       	ldi	r28, 0xA6	; 166
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    7570:	d0 e4       	ldi	r29, 0x40	; 64
    7572:	0e 94 53 10 	call	0x20a6	; 0x20a6 <loop>
#endif
	
	setup();
    
	for (;;) {
		loop();
    7576:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
    7578:	e1 f3       	breq	.-8      	; 0x7572 <main+0xc>
    757a:	e8 d5       	rcall	.+3024   	; 0x814c <_Z14serialEventRunv>
    757c:	fa cf       	rjmp	.-12     	; 0x7572 <main+0xc>

0000757e <_ZN5Print5writeEPKhj>:
    757e:	cf 92       	push	r12
size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    7580:	df 92       	push	r13
    7582:	ef 92       	push	r14
    7584:	ff 92       	push	r15
    7586:	0f 93       	push	r16
    7588:	1f 93       	push	r17
    758a:	cf 93       	push	r28
    758c:	df 93       	push	r29
    758e:	6c 01       	movw	r12, r24
    7590:	7a 01       	movw	r14, r20
    7592:	8b 01       	movw	r16, r22
    7594:	c0 e0       	ldi	r28, 0x00	; 0
    7596:	d0 e0       	ldi	r29, 0x00	; 0
    7598:	ce 15       	cp	r28, r14
    759a:	df 05       	cpc	r29, r15
    759c:	81 f0       	breq	.+32     	; 0x75be <_ZN5Print5writeEPKhj+0x40>
    759e:	d8 01       	movw	r26, r16
    75a0:	6d 91       	ld	r22, X+
    75a2:	8d 01       	movw	r16, r26
    75a4:	d6 01       	movw	r26, r12
    75a6:	ed 91       	ld	r30, X+
    75a8:	fc 91       	ld	r31, X
    75aa:	01 90       	ld	r0, Z+
    75ac:	f0 81       	ld	r31, Z
    75ae:	e0 2d       	mov	r30, r0
    75b0:	c6 01       	movw	r24, r12
    75b2:	09 95       	icall
    75b4:	89 2b       	or	r24, r25
    75b6:	11 f0       	breq	.+4      	; 0x75bc <_ZN5Print5writeEPKhj+0x3e>
    75b8:	21 96       	adiw	r28, 0x01	; 1
    75ba:	ee cf       	rjmp	.-36     	; 0x7598 <_ZN5Print5writeEPKhj+0x1a>
    75bc:	7e 01       	movw	r14, r28
    75be:	c7 01       	movw	r24, r14
    75c0:	df 91       	pop	r29
    75c2:	cf 91       	pop	r28
    75c4:	1f 91       	pop	r17
    75c6:	0f 91       	pop	r16
    75c8:	ff 90       	pop	r15
    75ca:	ef 90       	pop	r14
    75cc:	df 90       	pop	r13
    75ce:	cf 90       	pop	r12
    75d0:	08 95       	ret

000075d2 <_ZN5Print5writeEPKc>:
    75d2:	61 15       	cp	r22, r1
    75d4:	71 05       	cpc	r23, r1
    75d6:	79 f0       	breq	.+30     	; 0x75f6 <_ZN5Print5writeEPKc+0x24>
    75d8:	fb 01       	movw	r30, r22
    75da:	01 90       	ld	r0, Z+
    75dc:	00 20       	and	r0, r0
    75de:	e9 f7       	brne	.-6      	; 0x75da <_ZN5Print5writeEPKc+0x8>
    75e0:	31 97       	sbiw	r30, 0x01	; 1
    75e2:	af 01       	movw	r20, r30
    75e4:	46 1b       	sub	r20, r22
    75e6:	57 0b       	sbc	r21, r23
    75e8:	dc 01       	movw	r26, r24
    75ea:	ed 91       	ld	r30, X+
    75ec:	fc 91       	ld	r31, X
    75ee:	02 80       	ldd	r0, Z+2	; 0x02
    75f0:	f3 81       	ldd	r31, Z+3	; 0x03
    75f2:	e0 2d       	mov	r30, r0
    75f4:	09 94       	ijmp
    75f6:	80 e0       	ldi	r24, 0x00	; 0
    75f8:	90 e0       	ldi	r25, 0x00	; 0
    75fa:	08 95       	ret

000075fc <_ZN5Print5printEPK19__FlashStringHelper>:
    75fc:	ef 92       	push	r14
    75fe:	ff 92       	push	r15
    7600:	0f 93       	push	r16
    7602:	1f 93       	push	r17
    7604:	cf 93       	push	r28
    7606:	df 93       	push	r29
    7608:	8c 01       	movw	r16, r24
    760a:	7b 01       	movw	r14, r22
    760c:	c0 e0       	ldi	r28, 0x00	; 0
    760e:	d0 e0       	ldi	r29, 0x00	; 0
    7610:	f7 01       	movw	r30, r14
    7612:	ec 0f       	add	r30, r28
    7614:	fd 1f       	adc	r31, r29
    7616:	64 91       	lpm	r22, Z
    7618:	66 23       	and	r22, r22
    761a:	61 f0       	breq	.+24     	; 0x7634 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    761c:	d8 01       	movw	r26, r16
    761e:	ed 91       	ld	r30, X+
    7620:	fc 91       	ld	r31, X
    7622:	01 90       	ld	r0, Z+
    7624:	f0 81       	ld	r31, Z
    7626:	e0 2d       	mov	r30, r0
    7628:	c8 01       	movw	r24, r16
    762a:	09 95       	icall
    762c:	89 2b       	or	r24, r25
    762e:	11 f0       	breq	.+4      	; 0x7634 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    7630:	21 96       	adiw	r28, 0x01	; 1
    7632:	ee cf       	rjmp	.-36     	; 0x7610 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    7634:	ce 01       	movw	r24, r28
    7636:	df 91       	pop	r29
    7638:	cf 91       	pop	r28
    763a:	1f 91       	pop	r17
    763c:	0f 91       	pop	r16
    763e:	ff 90       	pop	r15
    7640:	ef 90       	pop	r14
    7642:	08 95       	ret

00007644 <_ZN5Print5printERK6String>:
    7644:	db 01       	movw	r26, r22
    7646:	14 96       	adiw	r26, 0x04	; 4
    7648:	4d 91       	ld	r20, X+
    764a:	5c 91       	ld	r21, X
    764c:	15 97       	sbiw	r26, 0x05	; 5
    764e:	6d 91       	ld	r22, X+
    7650:	7c 91       	ld	r23, X
    7652:	dc 01       	movw	r26, r24
    7654:	ed 91       	ld	r30, X+
    7656:	fc 91       	ld	r31, X
    7658:	02 80       	ldd	r0, Z+2	; 0x02
    765a:	f3 81       	ldd	r31, Z+3	; 0x03
    765c:	e0 2d       	mov	r30, r0
    765e:	09 94       	ijmp

00007660 <_ZN5Print5printEPKc>:
    7660:	b8 cf       	rjmp	.-144    	; 0x75d2 <_ZN5Print5writeEPKc>

00007662 <_ZN5Print5printEc>:
    7662:	dc 01       	movw	r26, r24
    7664:	ed 91       	ld	r30, X+
    7666:	fc 91       	ld	r31, X
    7668:	01 90       	ld	r0, Z+
    766a:	f0 81       	ld	r31, Z
    766c:	e0 2d       	mov	r30, r0
    766e:	09 94       	ijmp

00007670 <_ZN5Print7printlnEv>:
    7670:	66 e8       	ldi	r22, 0x86	; 134
    7672:	76 e0       	ldi	r23, 0x06	; 6
    7674:	ae cf       	rjmp	.-164    	; 0x75d2 <_ZN5Print5writeEPKc>

00007676 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    7676:	0f 93       	push	r16
    7678:	1f 93       	push	r17
    767a:	cf 93       	push	r28
    767c:	df 93       	push	r29
    767e:	ec 01       	movw	r28, r24
    7680:	bd df       	rcall	.-134    	; 0x75fc <_ZN5Print5printEPK19__FlashStringHelper>
    7682:	8c 01       	movw	r16, r24
    7684:	ce 01       	movw	r24, r28
    7686:	f4 df       	rcall	.-24     	; 0x7670 <_ZN5Print7printlnEv>
    7688:	80 0f       	add	r24, r16
    768a:	91 1f       	adc	r25, r17
    768c:	df 91       	pop	r29
    768e:	cf 91       	pop	r28
    7690:	1f 91       	pop	r17
    7692:	0f 91       	pop	r16
    7694:	08 95       	ret

00007696 <_ZN5Print7printlnERK6String>:
    7696:	0f 93       	push	r16
    7698:	1f 93       	push	r17
    769a:	cf 93       	push	r28
    769c:	df 93       	push	r29
    769e:	ec 01       	movw	r28, r24
    76a0:	d1 df       	rcall	.-94     	; 0x7644 <_ZN5Print5printERK6String>
    76a2:	8c 01       	movw	r16, r24
    76a4:	ce 01       	movw	r24, r28
    76a6:	e4 df       	rcall	.-56     	; 0x7670 <_ZN5Print7printlnEv>
    76a8:	80 0f       	add	r24, r16
    76aa:	91 1f       	adc	r25, r17
    76ac:	df 91       	pop	r29
    76ae:	cf 91       	pop	r28
    76b0:	1f 91       	pop	r17
    76b2:	0f 91       	pop	r16
    76b4:	08 95       	ret

000076b6 <_ZN5Print7printlnEPKc>:
    76b6:	0f 93       	push	r16
    76b8:	1f 93       	push	r17
    76ba:	cf 93       	push	r28
    76bc:	df 93       	push	r29
    76be:	ec 01       	movw	r28, r24
    76c0:	88 df       	rcall	.-240    	; 0x75d2 <_ZN5Print5writeEPKc>
    76c2:	8c 01       	movw	r16, r24
    76c4:	ce 01       	movw	r24, r28
    76c6:	d4 df       	rcall	.-88     	; 0x7670 <_ZN5Print7printlnEv>
    76c8:	80 0f       	add	r24, r16
    76ca:	91 1f       	adc	r25, r17
    76cc:	df 91       	pop	r29
    76ce:	cf 91       	pop	r28
    76d0:	1f 91       	pop	r17
    76d2:	0f 91       	pop	r16
    76d4:	08 95       	ret

000076d6 <_ZN5Print11printNumberEmh>:
    76d6:	8f 92       	push	r8
    76d8:	9f 92       	push	r9
    76da:	af 92       	push	r10
    76dc:	bf 92       	push	r11
    76de:	ef 92       	push	r14
    76e0:	ff 92       	push	r15
    76e2:	0f 93       	push	r16
    76e4:	1f 93       	push	r17
    76e6:	cf 93       	push	r28
    76e8:	df 93       	push	r29
    76ea:	cd b7       	in	r28, 0x3d	; 61
    76ec:	de b7       	in	r29, 0x3e	; 62
    76ee:	a1 97       	sbiw	r28, 0x21	; 33
    76f0:	0f b6       	in	r0, 0x3f	; 63
    76f2:	f8 94       	cli
    76f4:	de bf       	out	0x3e, r29	; 62
    76f6:	0f be       	out	0x3f, r0	; 63
    76f8:	cd bf       	out	0x3d, r28	; 61
    76fa:	7c 01       	movw	r14, r24
    76fc:	fa 01       	movw	r30, r20
    76fe:	cb 01       	movw	r24, r22
    7700:	19 a2       	std	Y+33, r1	; 0x21
    7702:	22 30       	cpi	r18, 0x02	; 2
    7704:	08 f4       	brcc	.+2      	; 0x7708 <_ZN5Print11printNumberEmh+0x32>
    7706:	2a e0       	ldi	r18, 0x0A	; 10
    7708:	8e 01       	movw	r16, r28
    770a:	0f 5d       	subi	r16, 0xDF	; 223
    770c:	1f 4f       	sbci	r17, 0xFF	; 255
    770e:	82 2e       	mov	r8, r18
    7710:	91 2c       	mov	r9, r1
    7712:	a1 2c       	mov	r10, r1
    7714:	b1 2c       	mov	r11, r1
    7716:	bf 01       	movw	r22, r30
    7718:	a5 01       	movw	r20, r10
    771a:	94 01       	movw	r18, r8
    771c:	d4 d5       	rcall	.+2984   	; 0x82c6 <__udivmodsi4>
    771e:	f9 01       	movw	r30, r18
    7720:	ca 01       	movw	r24, r20
    7722:	01 50       	subi	r16, 0x01	; 1
    7724:	11 09       	sbc	r17, r1
    7726:	6a 30       	cpi	r22, 0x0A	; 10
    7728:	10 f4       	brcc	.+4      	; 0x772e <_ZN5Print11printNumberEmh+0x58>
    772a:	60 5d       	subi	r22, 0xD0	; 208
    772c:	01 c0       	rjmp	.+2      	; 0x7730 <_ZN5Print11printNumberEmh+0x5a>
    772e:	69 5c       	subi	r22, 0xC9	; 201
    7730:	d8 01       	movw	r26, r16
    7732:	6c 93       	st	X, r22
    7734:	23 2b       	or	r18, r19
    7736:	24 2b       	or	r18, r20
    7738:	25 2b       	or	r18, r21
    773a:	69 f7       	brne	.-38     	; 0x7716 <_ZN5Print11printNumberEmh+0x40>
    773c:	b8 01       	movw	r22, r16
    773e:	c7 01       	movw	r24, r14
    7740:	48 df       	rcall	.-368    	; 0x75d2 <_ZN5Print5writeEPKc>
    7742:	a1 96       	adiw	r28, 0x21	; 33
    7744:	0f b6       	in	r0, 0x3f	; 63
    7746:	f8 94       	cli
    7748:	de bf       	out	0x3e, r29	; 62
    774a:	0f be       	out	0x3f, r0	; 63
    774c:	cd bf       	out	0x3d, r28	; 61
    774e:	df 91       	pop	r29
    7750:	cf 91       	pop	r28
    7752:	1f 91       	pop	r17
    7754:	0f 91       	pop	r16
    7756:	ff 90       	pop	r15
    7758:	ef 90       	pop	r14
    775a:	bf 90       	pop	r11
    775c:	af 90       	pop	r10
    775e:	9f 90       	pop	r9
    7760:	8f 90       	pop	r8
    7762:	08 95       	ret

00007764 <_ZN5Print5printEmi>:
    7764:	21 15       	cp	r18, r1
    7766:	31 05       	cpc	r19, r1
    7768:	41 f4       	brne	.+16     	; 0x777a <_ZN5Print5printEmi+0x16>
    776a:	dc 01       	movw	r26, r24
    776c:	ed 91       	ld	r30, X+
    776e:	fc 91       	ld	r31, X
    7770:	01 90       	ld	r0, Z+
    7772:	f0 81       	ld	r31, Z
    7774:	e0 2d       	mov	r30, r0
    7776:	64 2f       	mov	r22, r20
    7778:	09 94       	ijmp
    777a:	ad cf       	rjmp	.-166    	; 0x76d6 <_ZN5Print11printNumberEmh>

0000777c <_ZN5Print5printEhi>:
    777c:	9a 01       	movw	r18, r20
    777e:	46 2f       	mov	r20, r22
    7780:	50 e0       	ldi	r21, 0x00	; 0
    7782:	60 e0       	ldi	r22, 0x00	; 0
    7784:	70 e0       	ldi	r23, 0x00	; 0
    7786:	ee cf       	rjmp	.-36     	; 0x7764 <_ZN5Print5printEmi>

00007788 <_ZN5Print7printlnEhi>:
    7788:	0f 93       	push	r16
    778a:	1f 93       	push	r17
    778c:	cf 93       	push	r28
    778e:	df 93       	push	r29
    7790:	ec 01       	movw	r28, r24
    7792:	f4 df       	rcall	.-24     	; 0x777c <_ZN5Print5printEhi>
    7794:	8c 01       	movw	r16, r24
    7796:	ce 01       	movw	r24, r28
    7798:	6b df       	rcall	.-298    	; 0x7670 <_ZN5Print7printlnEv>
    779a:	80 0f       	add	r24, r16
    779c:	91 1f       	adc	r25, r17
    779e:	df 91       	pop	r29
    77a0:	cf 91       	pop	r28
    77a2:	1f 91       	pop	r17
    77a4:	0f 91       	pop	r16
    77a6:	08 95       	ret

000077a8 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    77a8:	0f 93       	push	r16
    77aa:	1f 93       	push	r17
    77ac:	cf 93       	push	r28
    77ae:	df 93       	push	r29
    77b0:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    77b2:	d8 df       	rcall	.-80     	; 0x7764 <_ZN5Print5printEmi>
    77b4:	8c 01       	movw	r16, r24
  n += println();
    77b6:	ce 01       	movw	r24, r28
    77b8:	5b df       	rcall	.-330    	; 0x7670 <_ZN5Print7printlnEv>
  return n;
}
    77ba:	80 0f       	add	r24, r16
    77bc:	91 1f       	adc	r25, r17
    77be:	df 91       	pop	r29
    77c0:	cf 91       	pop	r28
    77c2:	1f 91       	pop	r17
    77c4:	0f 91       	pop	r16
    77c6:	08 95       	ret

000077c8 <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    77c8:	1f 92       	push	r1
    77ca:	0f 92       	push	r0
    77cc:	0f b6       	in	r0, 0x3f	; 63
    77ce:	0f 92       	push	r0
    77d0:	11 24       	eor	r1, r1
    77d2:	2f 93       	push	r18
    77d4:	3f 93       	push	r19
    77d6:	8f 93       	push	r24
    77d8:	9f 93       	push	r25
    77da:	af 93       	push	r26
    77dc:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    77de:	80 91 f3 0d 	lds	r24, 0x0DF3	; 0x800df3 <timer0_millis>
    77e2:	90 91 f4 0d 	lds	r25, 0x0DF4	; 0x800df4 <timer0_millis+0x1>
    77e6:	a0 91 f5 0d 	lds	r26, 0x0DF5	; 0x800df5 <timer0_millis+0x2>
    77ea:	b0 91 f6 0d 	lds	r27, 0x0DF6	; 0x800df6 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    77ee:	30 91 f2 0d 	lds	r19, 0x0DF2	; 0x800df2 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    77f2:	23 e0       	ldi	r18, 0x03	; 3
    77f4:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    77f6:	2d 37       	cpi	r18, 0x7D	; 125
    77f8:	20 f4       	brcc	.+8      	; 0x7802 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    77fa:	01 96       	adiw	r24, 0x01	; 1
    77fc:	a1 1d       	adc	r26, r1
    77fe:	b1 1d       	adc	r27, r1
    7800:	05 c0       	rjmp	.+10     	; 0x780c <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    7802:	26 e8       	ldi	r18, 0x86	; 134
    7804:	23 0f       	add	r18, r19
		m += 1;
    7806:	02 96       	adiw	r24, 0x02	; 2
    7808:	a1 1d       	adc	r26, r1
    780a:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    780c:	20 93 f2 0d 	sts	0x0DF2, r18	; 0x800df2 <timer0_fract>
	timer0_millis = m;
    7810:	80 93 f3 0d 	sts	0x0DF3, r24	; 0x800df3 <timer0_millis>
    7814:	90 93 f4 0d 	sts	0x0DF4, r25	; 0x800df4 <timer0_millis+0x1>
    7818:	a0 93 f5 0d 	sts	0x0DF5, r26	; 0x800df5 <timer0_millis+0x2>
    781c:	b0 93 f6 0d 	sts	0x0DF6, r27	; 0x800df6 <timer0_millis+0x3>
	timer0_overflow_count++;
    7820:	80 91 f7 0d 	lds	r24, 0x0DF7	; 0x800df7 <timer0_overflow_count>
    7824:	90 91 f8 0d 	lds	r25, 0x0DF8	; 0x800df8 <timer0_overflow_count+0x1>
    7828:	a0 91 f9 0d 	lds	r26, 0x0DF9	; 0x800df9 <timer0_overflow_count+0x2>
    782c:	b0 91 fa 0d 	lds	r27, 0x0DFA	; 0x800dfa <timer0_overflow_count+0x3>
    7830:	01 96       	adiw	r24, 0x01	; 1
    7832:	a1 1d       	adc	r26, r1
    7834:	b1 1d       	adc	r27, r1
    7836:	80 93 f7 0d 	sts	0x0DF7, r24	; 0x800df7 <timer0_overflow_count>
    783a:	90 93 f8 0d 	sts	0x0DF8, r25	; 0x800df8 <timer0_overflow_count+0x1>
    783e:	a0 93 f9 0d 	sts	0x0DF9, r26	; 0x800df9 <timer0_overflow_count+0x2>
    7842:	b0 93 fa 0d 	sts	0x0DFA, r27	; 0x800dfa <timer0_overflow_count+0x3>
}
    7846:	bf 91       	pop	r27
    7848:	af 91       	pop	r26
    784a:	9f 91       	pop	r25
    784c:	8f 91       	pop	r24
    784e:	3f 91       	pop	r19
    7850:	2f 91       	pop	r18
    7852:	0f 90       	pop	r0
    7854:	0f be       	out	0x3f, r0	; 63
    7856:	0f 90       	pop	r0
    7858:	1f 90       	pop	r1
    785a:	18 95       	reti

0000785c <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    785c:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    785e:	f8 94       	cli
	m = timer0_millis;
    7860:	60 91 f3 0d 	lds	r22, 0x0DF3	; 0x800df3 <timer0_millis>
    7864:	70 91 f4 0d 	lds	r23, 0x0DF4	; 0x800df4 <timer0_millis+0x1>
    7868:	80 91 f5 0d 	lds	r24, 0x0DF5	; 0x800df5 <timer0_millis+0x2>
    786c:	90 91 f6 0d 	lds	r25, 0x0DF6	; 0x800df6 <timer0_millis+0x3>
	SREG = oldSREG;
    7870:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    7872:	08 95       	ret

00007874 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    7874:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    7876:	f8 94       	cli
	m = timer0_overflow_count;
    7878:	80 91 f7 0d 	lds	r24, 0x0DF7	; 0x800df7 <timer0_overflow_count>
    787c:	90 91 f8 0d 	lds	r25, 0x0DF8	; 0x800df8 <timer0_overflow_count+0x1>
    7880:	a0 91 f9 0d 	lds	r26, 0x0DF9	; 0x800df9 <timer0_overflow_count+0x2>
    7884:	b0 91 fa 0d 	lds	r27, 0x0DFA	; 0x800dfa <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    7888:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    788a:	a8 9b       	sbis	0x15, 0	; 21
    788c:	05 c0       	rjmp	.+10     	; 0x7898 <micros+0x24>
    788e:	2f 3f       	cpi	r18, 0xFF	; 255
    7890:	19 f0       	breq	.+6      	; 0x7898 <micros+0x24>
		m++;
    7892:	01 96       	adiw	r24, 0x01	; 1
    7894:	a1 1d       	adc	r26, r1
    7896:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    7898:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    789a:	ba 2f       	mov	r27, r26
    789c:	a9 2f       	mov	r26, r25
    789e:	98 2f       	mov	r25, r24
    78a0:	88 27       	eor	r24, r24
    78a2:	82 0f       	add	r24, r18
    78a4:	91 1d       	adc	r25, r1
    78a6:	a1 1d       	adc	r26, r1
    78a8:	b1 1d       	adc	r27, r1
    78aa:	bc 01       	movw	r22, r24
    78ac:	cd 01       	movw	r24, r26
    78ae:	42 e0       	ldi	r20, 0x02	; 2
    78b0:	66 0f       	add	r22, r22
    78b2:	77 1f       	adc	r23, r23
    78b4:	88 1f       	adc	r24, r24
    78b6:	99 1f       	adc	r25, r25
    78b8:	4a 95       	dec	r20
    78ba:	d1 f7       	brne	.-12     	; 0x78b0 <micros+0x3c>
}
    78bc:	08 95       	ret

000078be <delay>:

void delay(unsigned long ms)
{
    78be:	8f 92       	push	r8
    78c0:	9f 92       	push	r9
    78c2:	af 92       	push	r10
    78c4:	bf 92       	push	r11
    78c6:	cf 92       	push	r12
    78c8:	df 92       	push	r13
    78ca:	ef 92       	push	r14
    78cc:	ff 92       	push	r15
    78ce:	6b 01       	movw	r12, r22
    78d0:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    78d2:	d0 df       	rcall	.-96     	; 0x7874 <micros>
    78d4:	4b 01       	movw	r8, r22
    78d6:	5c 01       	movw	r10, r24

	while (ms > 0) {
    78d8:	c1 14       	cp	r12, r1
    78da:	d1 04       	cpc	r13, r1
    78dc:	e1 04       	cpc	r14, r1
    78de:	f1 04       	cpc	r15, r1
		yield();
    78e0:	f1 f0       	breq	.+60     	; 0x791e <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    78e2:	d0 d4       	rcall	.+2464   	; 0x8284 <yield>
    78e4:	c7 df       	rcall	.-114    	; 0x7874 <micros>
    78e6:	dc 01       	movw	r26, r24
    78e8:	cb 01       	movw	r24, r22
    78ea:	88 19       	sub	r24, r8
    78ec:	99 09       	sbc	r25, r9
    78ee:	aa 09       	sbc	r26, r10
    78f0:	bb 09       	sbc	r27, r11
    78f2:	88 3e       	cpi	r24, 0xE8	; 232
    78f4:	93 40       	sbci	r25, 0x03	; 3
    78f6:	a1 05       	cpc	r26, r1
    78f8:	b1 05       	cpc	r27, r1
    78fa:	70 f3       	brcs	.-36     	; 0x78d8 <delay+0x1a>
			ms--;
    78fc:	21 e0       	ldi	r18, 0x01	; 1
    78fe:	c2 1a       	sub	r12, r18
    7900:	d1 08       	sbc	r13, r1
    7902:	e1 08       	sbc	r14, r1
    7904:	f1 08       	sbc	r15, r1
			start += 1000;
    7906:	88 ee       	ldi	r24, 0xE8	; 232
    7908:	88 0e       	add	r8, r24
    790a:	83 e0       	ldi	r24, 0x03	; 3
    790c:	98 1e       	adc	r9, r24
    790e:	a1 1c       	adc	r10, r1
    7910:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    7912:	c1 14       	cp	r12, r1
    7914:	d1 04       	cpc	r13, r1
    7916:	e1 04       	cpc	r14, r1
    7918:	f1 04       	cpc	r15, r1
    791a:	21 f7       	brne	.-56     	; 0x78e4 <delay+0x26>
    791c:	dd cf       	rjmp	.-70     	; 0x78d8 <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    791e:	ff 90       	pop	r15
    7920:	ef 90       	pop	r14
    7922:	df 90       	pop	r13
    7924:	cf 90       	pop	r12
    7926:	bf 90       	pop	r11
    7928:	af 90       	pop	r10
    792a:	9f 90       	pop	r9
    792c:	8f 90       	pop	r8
    792e:	08 95       	ret

00007930 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    7930:	82 30       	cpi	r24, 0x02	; 2
    7932:	91 05       	cpc	r25, r1
    7934:	38 f0       	brcs	.+14     	; 0x7944 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    7936:	88 0f       	add	r24, r24
    7938:	99 1f       	adc	r25, r25
    793a:	88 0f       	add	r24, r24
    793c:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    793e:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    7940:	01 97       	sbiw	r24, 0x01	; 1
    7942:	f1 f7       	brne	.-4      	; 0x7940 <delayMicroseconds+0x10>
    7944:	08 95       	ret

00007946 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    7946:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    7948:	84 b5       	in	r24, 0x24	; 36
    794a:	82 60       	ori	r24, 0x02	; 2
    794c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    794e:	84 b5       	in	r24, 0x24	; 36
    7950:	81 60       	ori	r24, 0x01	; 1
    7952:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    7954:	85 b5       	in	r24, 0x25	; 37
    7956:	82 60       	ori	r24, 0x02	; 2
    7958:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    795a:	85 b5       	in	r24, 0x25	; 37
    795c:	81 60       	ori	r24, 0x01	; 1
    795e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    7960:	ee e6       	ldi	r30, 0x6E	; 110
    7962:	f0 e0       	ldi	r31, 0x00	; 0
    7964:	80 81       	ld	r24, Z
    7966:	81 60       	ori	r24, 0x01	; 1
    7968:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    796a:	e1 e8       	ldi	r30, 0x81	; 129
    796c:	f0 e0       	ldi	r31, 0x00	; 0
    796e:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    7970:	80 81       	ld	r24, Z
    7972:	82 60       	ori	r24, 0x02	; 2
    7974:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    7976:	80 81       	ld	r24, Z
    7978:	81 60       	ori	r24, 0x01	; 1
    797a:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    797c:	e0 e8       	ldi	r30, 0x80	; 128
    797e:	f0 e0       	ldi	r31, 0x00	; 0
    7980:	80 81       	ld	r24, Z
    7982:	81 60       	ori	r24, 0x01	; 1
    7984:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    7986:	e1 eb       	ldi	r30, 0xB1	; 177
    7988:	f0 e0       	ldi	r31, 0x00	; 0
    798a:	80 81       	ld	r24, Z
    798c:	84 60       	ori	r24, 0x04	; 4
    798e:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    7990:	e0 eb       	ldi	r30, 0xB0	; 176
    7992:	f0 e0       	ldi	r31, 0x00	; 0
    7994:	80 81       	ld	r24, Z
    7996:	81 60       	ori	r24, 0x01	; 1
    7998:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    799a:	ea e7       	ldi	r30, 0x7A	; 122
    799c:	f0 e0       	ldi	r31, 0x00	; 0
    799e:	80 81       	ld	r24, Z
    79a0:	84 60       	ori	r24, 0x04	; 4
    79a2:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    79a4:	80 81       	ld	r24, Z
    79a6:	82 60       	ori	r24, 0x02	; 2
    79a8:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    79aa:	80 81       	ld	r24, Z
    79ac:	81 60       	ori	r24, 0x01	; 1
    79ae:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    79b0:	80 81       	ld	r24, Z
    79b2:	80 68       	ori	r24, 0x80	; 128
    79b4:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    79b6:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    79ba:	08 95       	ret

000079bc <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    79bc:	83 30       	cpi	r24, 0x03	; 3
    79be:	81 f0       	breq	.+32     	; 0x79e0 <turnOffPWM+0x24>
    79c0:	28 f4       	brcc	.+10     	; 0x79cc <turnOffPWM+0x10>
    79c2:	81 30       	cpi	r24, 0x01	; 1
    79c4:	99 f0       	breq	.+38     	; 0x79ec <turnOffPWM+0x30>
    79c6:	82 30       	cpi	r24, 0x02	; 2
    79c8:	a1 f0       	breq	.+40     	; 0x79f2 <turnOffPWM+0x36>
    79ca:	08 95       	ret
    79cc:	87 30       	cpi	r24, 0x07	; 7
    79ce:	a9 f0       	breq	.+42     	; 0x79fa <turnOffPWM+0x3e>
    79d0:	88 30       	cpi	r24, 0x08	; 8
    79d2:	b9 f0       	breq	.+46     	; 0x7a02 <turnOffPWM+0x46>
    79d4:	84 30       	cpi	r24, 0x04	; 4
    79d6:	d1 f4       	brne	.+52     	; 0x7a0c <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    79d8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    79dc:	8f 7d       	andi	r24, 0xDF	; 223
    79de:	03 c0       	rjmp	.+6      	; 0x79e6 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    79e0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    79e4:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    79e6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    79ea:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    79ec:	84 b5       	in	r24, 0x24	; 36
    79ee:	8f 77       	andi	r24, 0x7F	; 127
    79f0:	02 c0       	rjmp	.+4      	; 0x79f6 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    79f2:	84 b5       	in	r24, 0x24	; 36
    79f4:	8f 7d       	andi	r24, 0xDF	; 223
    79f6:	84 bd       	out	0x24, r24	; 36
    79f8:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    79fa:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    79fe:	8f 77       	andi	r24, 0x7F	; 127
    7a00:	03 c0       	rjmp	.+6      	; 0x7a08 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    7a02:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    7a06:	8f 7d       	andi	r24, 0xDF	; 223
    7a08:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    7a0c:	08 95       	ret

00007a0e <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    7a0e:	cf 93       	push	r28
    7a10:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    7a12:	90 e0       	ldi	r25, 0x00	; 0
    7a14:	fc 01       	movw	r30, r24
    7a16:	e8 5a       	subi	r30, 0xA8	; 168
    7a18:	fd 4f       	sbci	r31, 0xFD	; 253
    7a1a:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    7a1c:	fc 01       	movw	r30, r24
    7a1e:	e8 58       	subi	r30, 0x88	; 136
    7a20:	fd 4f       	sbci	r31, 0xFD	; 253
    7a22:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    7a24:	88 23       	and	r24, r24
    7a26:	61 f1       	breq	.+88     	; 0x7a80 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    7a28:	90 e0       	ldi	r25, 0x00	; 0
    7a2a:	88 0f       	add	r24, r24
    7a2c:	99 1f       	adc	r25, r25
    7a2e:	fc 01       	movw	r30, r24
    7a30:	e4 55       	subi	r30, 0x54	; 84
    7a32:	fd 4f       	sbci	r31, 0xFD	; 253
    7a34:	c5 91       	lpm	r28, Z+
    7a36:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    7a38:	fc 01       	movw	r30, r24
    7a3a:	ee 55       	subi	r30, 0x5E	; 94
    7a3c:	fd 4f       	sbci	r31, 0xFD	; 253
    7a3e:	a5 91       	lpm	r26, Z+
    7a40:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    7a42:	61 11       	cpse	r22, r1
    7a44:	09 c0       	rjmp	.+18     	; 0x7a58 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    7a46:	9f b7       	in	r25, 0x3f	; 63
                cli();
    7a48:	f8 94       	cli
		*reg &= ~bit;
    7a4a:	88 81       	ld	r24, Y
    7a4c:	20 95       	com	r18
    7a4e:	82 23       	and	r24, r18
    7a50:	88 83       	st	Y, r24
		*out &= ~bit;
    7a52:	ec 91       	ld	r30, X
    7a54:	2e 23       	and	r18, r30
    7a56:	0b c0       	rjmp	.+22     	; 0x7a6e <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    7a58:	62 30       	cpi	r22, 0x02	; 2
    7a5a:	61 f4       	brne	.+24     	; 0x7a74 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    7a5c:	9f b7       	in	r25, 0x3f	; 63
                cli();
    7a5e:	f8 94       	cli
		*reg &= ~bit;
    7a60:	88 81       	ld	r24, Y
    7a62:	32 2f       	mov	r19, r18
    7a64:	30 95       	com	r19
    7a66:	83 23       	and	r24, r19
    7a68:	88 83       	st	Y, r24
		*out |= bit;
    7a6a:	ec 91       	ld	r30, X
    7a6c:	2e 2b       	or	r18, r30
    7a6e:	2c 93       	st	X, r18
		SREG = oldSREG;
    7a70:	9f bf       	out	0x3f, r25	; 63
    7a72:	06 c0       	rjmp	.+12     	; 0x7a80 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    7a74:	8f b7       	in	r24, 0x3f	; 63
                cli();
    7a76:	f8 94       	cli
		*reg |= bit;
    7a78:	e8 81       	ld	r30, Y
    7a7a:	2e 2b       	or	r18, r30
    7a7c:	28 83       	st	Y, r18
		SREG = oldSREG;
    7a7e:	8f bf       	out	0x3f, r24	; 63
	}
}
    7a80:	df 91       	pop	r29
    7a82:	cf 91       	pop	r28
    7a84:	08 95       	ret

00007a86 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    7a86:	1f 93       	push	r17
    7a88:	cf 93       	push	r28
    7a8a:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    7a8c:	28 2f       	mov	r18, r24
    7a8e:	30 e0       	ldi	r19, 0x00	; 0
    7a90:	f9 01       	movw	r30, r18
    7a92:	e8 5c       	subi	r30, 0xC8	; 200
    7a94:	fd 4f       	sbci	r31, 0xFD	; 253
    7a96:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    7a98:	f9 01       	movw	r30, r18
    7a9a:	e8 5a       	subi	r30, 0xA8	; 168
    7a9c:	fd 4f       	sbci	r31, 0xFD	; 253
    7a9e:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    7aa0:	f9 01       	movw	r30, r18
    7aa2:	e8 58       	subi	r30, 0x88	; 136
    7aa4:	fd 4f       	sbci	r31, 0xFD	; 253
    7aa6:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    7aa8:	cc 23       	and	r28, r28
    7aaa:	b9 f0       	breq	.+46     	; 0x7ada <digitalWrite+0x54>
    7aac:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    7aae:	81 11       	cpse	r24, r1
    7ab0:	85 df       	rcall	.-246    	; 0x79bc <turnOffPWM>

	out = portOutputRegister(port);
    7ab2:	ec 2f       	mov	r30, r28
    7ab4:	f0 e0       	ldi	r31, 0x00	; 0
    7ab6:	ee 0f       	add	r30, r30
    7ab8:	ff 1f       	adc	r31, r31
    7aba:	ee 55       	subi	r30, 0x5E	; 94
    7abc:	fd 4f       	sbci	r31, 0xFD	; 253
    7abe:	a5 91       	lpm	r26, Z+
    7ac0:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    7ac2:	9f b7       	in	r25, 0x3f	; 63
	cli();
    7ac4:	f8 94       	cli

	if (val == LOW) {
    7ac6:	11 11       	cpse	r17, r1
    7ac8:	04 c0       	rjmp	.+8      	; 0x7ad2 <digitalWrite+0x4c>
		*out &= ~bit;
    7aca:	8c 91       	ld	r24, X
    7acc:	d0 95       	com	r29
    7ace:	d8 23       	and	r29, r24
    7ad0:	02 c0       	rjmp	.+4      	; 0x7ad6 <digitalWrite+0x50>
	} else {
		*out |= bit;
    7ad2:	ec 91       	ld	r30, X
    7ad4:	de 2b       	or	r29, r30
    7ad6:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    7ad8:	9f bf       	out	0x3f, r25	; 63
}
    7ada:	df 91       	pop	r29
    7adc:	cf 91       	pop	r28
    7ade:	1f 91       	pop	r17
    7ae0:	08 95       	ret

00007ae2 <digitalRead>:

int digitalRead(uint8_t pin)
{
    7ae2:	cf 93       	push	r28
    7ae4:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    7ae6:	28 2f       	mov	r18, r24
    7ae8:	30 e0       	ldi	r19, 0x00	; 0
    7aea:	f9 01       	movw	r30, r18
    7aec:	e8 5c       	subi	r30, 0xC8	; 200
    7aee:	fd 4f       	sbci	r31, 0xFD	; 253
    7af0:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    7af2:	f9 01       	movw	r30, r18
    7af4:	e8 5a       	subi	r30, 0xA8	; 168
    7af6:	fd 4f       	sbci	r31, 0xFD	; 253
    7af8:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    7afa:	f9 01       	movw	r30, r18
    7afc:	e8 58       	subi	r30, 0x88	; 136
    7afe:	fd 4f       	sbci	r31, 0xFD	; 253
    7b00:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    7b02:	cc 23       	and	r28, r28
    7b04:	89 f0       	breq	.+34     	; 0x7b28 <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    7b06:	81 11       	cpse	r24, r1
    7b08:	59 df       	rcall	.-334    	; 0x79bc <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    7b0a:	ec 2f       	mov	r30, r28
    7b0c:	f0 e0       	ldi	r31, 0x00	; 0
    7b0e:	ee 0f       	add	r30, r30
    7b10:	ff 1f       	adc	r31, r31
    7b12:	e8 56       	subi	r30, 0x68	; 104
    7b14:	fd 4f       	sbci	r31, 0xFD	; 253
    7b16:	a5 91       	lpm	r26, Z+
    7b18:	b4 91       	lpm	r27, Z
    7b1a:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    7b1c:	ed 23       	and	r30, r29
    7b1e:	81 e0       	ldi	r24, 0x01	; 1
    7b20:	90 e0       	ldi	r25, 0x00	; 0
    7b22:	21 f4       	brne	.+8      	; 0x7b2c <digitalRead+0x4a>
    7b24:	80 e0       	ldi	r24, 0x00	; 0
    7b26:	02 c0       	rjmp	.+4      	; 0x7b2c <digitalRead+0x4a>
    7b28:	80 e0       	ldi	r24, 0x00	; 0
    7b2a:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    7b2c:	df 91       	pop	r29
    7b2e:	cf 91       	pop	r28
    7b30:	08 95       	ret

00007b32 <_ZNK6String14StringIfHelperEv>:
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
		*p = toupper(*p);
	}
}
    7b32:	08 95       	ret

00007b34 <_ZN6StringD1Ev>:
    7b34:	fc 01       	movw	r30, r24
    7b36:	80 81       	ld	r24, Z
    7b38:	91 81       	ldd	r25, Z+1	; 0x01
    7b3a:	dc c5       	rjmp	.+3000   	; 0x86f4 <free>

00007b3c <_ZN6String10invalidateEv>:
    7b3c:	cf 93       	push	r28
    7b3e:	df 93       	push	r29
    7b40:	ec 01       	movw	r28, r24
    7b42:	88 81       	ld	r24, Y
    7b44:	99 81       	ldd	r25, Y+1	; 0x01
    7b46:	00 97       	sbiw	r24, 0x00	; 0
    7b48:	09 f0       	breq	.+2      	; 0x7b4c <_ZN6String10invalidateEv+0x10>
    7b4a:	d4 d5       	rcall	.+2984   	; 0x86f4 <free>
    7b4c:	19 82       	std	Y+1, r1	; 0x01
    7b4e:	18 82       	st	Y, r1
    7b50:	1d 82       	std	Y+5, r1	; 0x05
    7b52:	1c 82       	std	Y+4, r1	; 0x04
    7b54:	1b 82       	std	Y+3, r1	; 0x03
    7b56:	1a 82       	std	Y+2, r1	; 0x02
    7b58:	df 91       	pop	r29
    7b5a:	cf 91       	pop	r28
    7b5c:	08 95       	ret

00007b5e <_ZN6String12changeBufferEj>:
    7b5e:	0f 93       	push	r16
    7b60:	1f 93       	push	r17
    7b62:	cf 93       	push	r28
    7b64:	df 93       	push	r29
    7b66:	ec 01       	movw	r28, r24
    7b68:	8b 01       	movw	r16, r22
    7b6a:	6f 5f       	subi	r22, 0xFF	; 255
    7b6c:	7f 4f       	sbci	r23, 0xFF	; 255
    7b6e:	88 81       	ld	r24, Y
    7b70:	99 81       	ldd	r25, Y+1	; 0x01
    7b72:	49 d6       	rcall	.+3218   	; 0x8806 <realloc>
    7b74:	00 97       	sbiw	r24, 0x00	; 0
    7b76:	31 f0       	breq	.+12     	; 0x7b84 <_ZN6String12changeBufferEj+0x26>
    7b78:	99 83       	std	Y+1, r25	; 0x01
    7b7a:	88 83       	st	Y, r24
    7b7c:	1b 83       	std	Y+3, r17	; 0x03
    7b7e:	0a 83       	std	Y+2, r16	; 0x02
    7b80:	81 e0       	ldi	r24, 0x01	; 1
    7b82:	01 c0       	rjmp	.+2      	; 0x7b86 <_ZN6String12changeBufferEj+0x28>
    7b84:	80 e0       	ldi	r24, 0x00	; 0
    7b86:	df 91       	pop	r29
    7b88:	cf 91       	pop	r28
    7b8a:	1f 91       	pop	r17
    7b8c:	0f 91       	pop	r16
    7b8e:	08 95       	ret

00007b90 <_ZN6String7reserveEj>:
    7b90:	cf 93       	push	r28
    7b92:	df 93       	push	r29
    7b94:	ec 01       	movw	r28, r24
    7b96:	88 81       	ld	r24, Y
    7b98:	99 81       	ldd	r25, Y+1	; 0x01
    7b9a:	89 2b       	or	r24, r25
    7b9c:	29 f0       	breq	.+10     	; 0x7ba8 <_ZN6String7reserveEj+0x18>
    7b9e:	8a 81       	ldd	r24, Y+2	; 0x02
    7ba0:	9b 81       	ldd	r25, Y+3	; 0x03
    7ba2:	86 17       	cp	r24, r22
    7ba4:	97 07       	cpc	r25, r23
    7ba6:	58 f4       	brcc	.+22     	; 0x7bbe <_ZN6String7reserveEj+0x2e>
    7ba8:	ce 01       	movw	r24, r28
    7baa:	d9 df       	rcall	.-78     	; 0x7b5e <_ZN6String12changeBufferEj>
    7bac:	88 23       	and	r24, r24
    7bae:	41 f0       	breq	.+16     	; 0x7bc0 <_ZN6String7reserveEj+0x30>
    7bb0:	8c 81       	ldd	r24, Y+4	; 0x04
    7bb2:	9d 81       	ldd	r25, Y+5	; 0x05
    7bb4:	89 2b       	or	r24, r25
    7bb6:	19 f4       	brne	.+6      	; 0x7bbe <_ZN6String7reserveEj+0x2e>
    7bb8:	e8 81       	ld	r30, Y
    7bba:	f9 81       	ldd	r31, Y+1	; 0x01
    7bbc:	10 82       	st	Z, r1
    7bbe:	81 e0       	ldi	r24, 0x01	; 1
    7bc0:	df 91       	pop	r29
    7bc2:	cf 91       	pop	r28
    7bc4:	08 95       	ret

00007bc6 <_ZN6String4copyEPKcj>:
    7bc6:	ef 92       	push	r14
    7bc8:	ff 92       	push	r15
    7bca:	0f 93       	push	r16
    7bcc:	1f 93       	push	r17
    7bce:	cf 93       	push	r28
    7bd0:	df 93       	push	r29
    7bd2:	ec 01       	movw	r28, r24
    7bd4:	7b 01       	movw	r14, r22
    7bd6:	8a 01       	movw	r16, r20
    7bd8:	ba 01       	movw	r22, r20
    7bda:	da df       	rcall	.-76     	; 0x7b90 <_ZN6String7reserveEj>
    7bdc:	81 11       	cpse	r24, r1
    7bde:	03 c0       	rjmp	.+6      	; 0x7be6 <_ZN6String4copyEPKcj+0x20>
    7be0:	ce 01       	movw	r24, r28
    7be2:	ac df       	rcall	.-168    	; 0x7b3c <_ZN6String10invalidateEv>
    7be4:	06 c0       	rjmp	.+12     	; 0x7bf2 <_ZN6String4copyEPKcj+0x2c>
    7be6:	1d 83       	std	Y+5, r17	; 0x05
    7be8:	0c 83       	std	Y+4, r16	; 0x04
    7bea:	b7 01       	movw	r22, r14
    7bec:	88 81       	ld	r24, Y
    7bee:	99 81       	ldd	r25, Y+1	; 0x01
    7bf0:	11 d7       	rcall	.+3618   	; 0x8a14 <strcpy>
    7bf2:	ce 01       	movw	r24, r28
    7bf4:	df 91       	pop	r29
    7bf6:	cf 91       	pop	r28
    7bf8:	1f 91       	pop	r17
    7bfa:	0f 91       	pop	r16
    7bfc:	ff 90       	pop	r15
    7bfe:	ef 90       	pop	r14
    7c00:	08 95       	ret

00007c02 <_ZN6StringC1EPKc>:
    7c02:	fc 01       	movw	r30, r24
    7c04:	11 82       	std	Z+1, r1	; 0x01
    7c06:	10 82       	st	Z, r1
    7c08:	13 82       	std	Z+3, r1	; 0x03
    7c0a:	12 82       	std	Z+2, r1	; 0x02
    7c0c:	15 82       	std	Z+5, r1	; 0x05
    7c0e:	14 82       	std	Z+4, r1	; 0x04
    7c10:	61 15       	cp	r22, r1
    7c12:	71 05       	cpc	r23, r1
    7c14:	49 f0       	breq	.+18     	; 0x7c28 <_ZN6StringC1EPKc+0x26>
    7c16:	fb 01       	movw	r30, r22
    7c18:	01 90       	ld	r0, Z+
    7c1a:	00 20       	and	r0, r0
    7c1c:	e9 f7       	brne	.-6      	; 0x7c18 <_ZN6StringC1EPKc+0x16>
    7c1e:	31 97       	sbiw	r30, 0x01	; 1
    7c20:	af 01       	movw	r20, r30
    7c22:	46 1b       	sub	r20, r22
    7c24:	57 0b       	sbc	r21, r23
    7c26:	cf cf       	rjmp	.-98     	; 0x7bc6 <_ZN6String4copyEPKcj>
    7c28:	08 95       	ret

00007c2a <_ZN6String4moveERS_>:
    7c2a:	0f 93       	push	r16
    7c2c:	1f 93       	push	r17
    7c2e:	cf 93       	push	r28
    7c30:	df 93       	push	r29
    7c32:	8c 01       	movw	r16, r24
    7c34:	eb 01       	movw	r28, r22
    7c36:	fc 01       	movw	r30, r24
    7c38:	80 81       	ld	r24, Z
    7c3a:	91 81       	ldd	r25, Z+1	; 0x01
    7c3c:	00 97       	sbiw	r24, 0x00	; 0
    7c3e:	c1 f0       	breq	.+48     	; 0x7c70 <_ZN6String4moveERS_+0x46>
    7c40:	68 81       	ld	r22, Y
    7c42:	79 81       	ldd	r23, Y+1	; 0x01
    7c44:	61 15       	cp	r22, r1
    7c46:	71 05       	cpc	r23, r1
    7c48:	91 f0       	breq	.+36     	; 0x7c6e <_ZN6String4moveERS_+0x44>
    7c4a:	29 e9       	ldi	r18, 0x99	; 153
    7c4c:	3d e3       	ldi	r19, 0x3D	; 61
    7c4e:	23 2b       	or	r18, r19
    7c50:	71 f0       	breq	.+28     	; 0x7c6e <_ZN6String4moveERS_+0x44>
    7c52:	42 81       	ldd	r20, Z+2	; 0x02
    7c54:	53 81       	ldd	r21, Z+3	; 0x03
    7c56:	2c 81       	ldd	r18, Y+4	; 0x04
    7c58:	3d 81       	ldd	r19, Y+5	; 0x05
    7c5a:	42 17       	cp	r20, r18
    7c5c:	53 07       	cpc	r21, r19
    7c5e:	38 f0       	brcs	.+14     	; 0x7c6e <_ZN6String4moveERS_+0x44>
    7c60:	d9 d6       	rcall	.+3506   	; 0x8a14 <strcpy>
    7c62:	8c 81       	ldd	r24, Y+4	; 0x04
    7c64:	9d 81       	ldd	r25, Y+5	; 0x05
    7c66:	f8 01       	movw	r30, r16
    7c68:	95 83       	std	Z+5, r25	; 0x05
    7c6a:	84 83       	std	Z+4, r24	; 0x04
    7c6c:	12 c0       	rjmp	.+36     	; 0x7c92 <_ZN6String4moveERS_+0x68>
    7c6e:	42 d5       	rcall	.+2692   	; 0x86f4 <free>
    7c70:	88 81       	ld	r24, Y
    7c72:	99 81       	ldd	r25, Y+1	; 0x01
    7c74:	f8 01       	movw	r30, r16
    7c76:	91 83       	std	Z+1, r25	; 0x01
    7c78:	80 83       	st	Z, r24
    7c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    7c7c:	9b 81       	ldd	r25, Y+3	; 0x03
    7c7e:	93 83       	std	Z+3, r25	; 0x03
    7c80:	82 83       	std	Z+2, r24	; 0x02
    7c82:	8c 81       	ldd	r24, Y+4	; 0x04
    7c84:	9d 81       	ldd	r25, Y+5	; 0x05
    7c86:	95 83       	std	Z+5, r25	; 0x05
    7c88:	84 83       	std	Z+4, r24	; 0x04
    7c8a:	19 82       	std	Y+1, r1	; 0x01
    7c8c:	18 82       	st	Y, r1
    7c8e:	1b 82       	std	Y+3, r1	; 0x03
    7c90:	1a 82       	std	Y+2, r1	; 0x02
    7c92:	1d 82       	std	Y+5, r1	; 0x05
    7c94:	1c 82       	std	Y+4, r1	; 0x04
    7c96:	df 91       	pop	r29
    7c98:	cf 91       	pop	r28
    7c9a:	1f 91       	pop	r17
    7c9c:	0f 91       	pop	r16
    7c9e:	08 95       	ret

00007ca0 <_ZN6StringC1EOS_>:
    7ca0:	fc 01       	movw	r30, r24
    7ca2:	11 82       	std	Z+1, r1	; 0x01
    7ca4:	10 82       	st	Z, r1
    7ca6:	13 82       	std	Z+3, r1	; 0x03
    7ca8:	12 82       	std	Z+2, r1	; 0x02
    7caa:	15 82       	std	Z+5, r1	; 0x05
    7cac:	14 82       	std	Z+4, r1	; 0x04
    7cae:	bd cf       	rjmp	.-134    	; 0x7c2a <_ZN6String4moveERS_>

00007cb0 <_ZN6StringaSERKS_>:
    7cb0:	cf 93       	push	r28
    7cb2:	df 93       	push	r29
    7cb4:	ec 01       	movw	r28, r24
    7cb6:	fb 01       	movw	r30, r22
    7cb8:	86 17       	cp	r24, r22
    7cba:	97 07       	cpc	r25, r23
    7cbc:	51 f0       	breq	.+20     	; 0x7cd2 <_ZN6StringaSERKS_+0x22>
    7cbe:	60 81       	ld	r22, Z
    7cc0:	71 81       	ldd	r23, Z+1	; 0x01
    7cc2:	61 15       	cp	r22, r1
    7cc4:	71 05       	cpc	r23, r1
    7cc6:	21 f0       	breq	.+8      	; 0x7cd0 <_ZN6StringaSERKS_+0x20>
    7cc8:	44 81       	ldd	r20, Z+4	; 0x04
    7cca:	55 81       	ldd	r21, Z+5	; 0x05
    7ccc:	7c df       	rcall	.-264    	; 0x7bc6 <_ZN6String4copyEPKcj>
    7cce:	01 c0       	rjmp	.+2      	; 0x7cd2 <_ZN6StringaSERKS_+0x22>
    7cd0:	35 df       	rcall	.-406    	; 0x7b3c <_ZN6String10invalidateEv>
    7cd2:	ce 01       	movw	r24, r28
    7cd4:	df 91       	pop	r29
    7cd6:	cf 91       	pop	r28
    7cd8:	08 95       	ret

00007cda <_ZN6StringC1ERKS_>:
    7cda:	fc 01       	movw	r30, r24
    7cdc:	11 82       	std	Z+1, r1	; 0x01
    7cde:	10 82       	st	Z, r1
    7ce0:	13 82       	std	Z+3, r1	; 0x03
    7ce2:	12 82       	std	Z+2, r1	; 0x02
    7ce4:	15 82       	std	Z+5, r1	; 0x05
    7ce6:	14 82       	std	Z+4, r1	; 0x04
    7ce8:	e3 cf       	rjmp	.-58     	; 0x7cb0 <_ZN6StringaSERKS_>

00007cea <_ZN6StringaSEOS_>:
    7cea:	cf 93       	push	r28
    7cec:	df 93       	push	r29
    7cee:	ec 01       	movw	r28, r24
    7cf0:	86 17       	cp	r24, r22
    7cf2:	97 07       	cpc	r25, r23
    7cf4:	09 f0       	breq	.+2      	; 0x7cf8 <_ZN6StringaSEOS_+0xe>
    7cf6:	99 df       	rcall	.-206    	; 0x7c2a <_ZN6String4moveERS_>
    7cf8:	ce 01       	movw	r24, r28
    7cfa:	df 91       	pop	r29
    7cfc:	cf 91       	pop	r28
    7cfe:	08 95       	ret

00007d00 <_ZN6StringaSEPKc>:
    7d00:	cf 93       	push	r28
    7d02:	df 93       	push	r29
    7d04:	ec 01       	movw	r28, r24
    7d06:	61 15       	cp	r22, r1
    7d08:	71 05       	cpc	r23, r1
    7d0a:	51 f0       	breq	.+20     	; 0x7d20 <_ZN6StringaSEPKc+0x20>
    7d0c:	fb 01       	movw	r30, r22
    7d0e:	01 90       	ld	r0, Z+
    7d10:	00 20       	and	r0, r0
    7d12:	e9 f7       	brne	.-6      	; 0x7d0e <_ZN6StringaSEPKc+0xe>
    7d14:	31 97       	sbiw	r30, 0x01	; 1
    7d16:	af 01       	movw	r20, r30
    7d18:	46 1b       	sub	r20, r22
    7d1a:	57 0b       	sbc	r21, r23
    7d1c:	54 df       	rcall	.-344    	; 0x7bc6 <_ZN6String4copyEPKcj>
    7d1e:	01 c0       	rjmp	.+2      	; 0x7d22 <_ZN6StringaSEPKc+0x22>
    7d20:	0d df       	rcall	.-486    	; 0x7b3c <_ZN6String10invalidateEv>
    7d22:	ce 01       	movw	r24, r28
    7d24:	df 91       	pop	r29
    7d26:	cf 91       	pop	r28
    7d28:	08 95       	ret

00007d2a <_ZN6StringC1Ehh>:
    7d2a:	0f 93       	push	r16
    7d2c:	1f 93       	push	r17
    7d2e:	cf 93       	push	r28
    7d30:	df 93       	push	r29
    7d32:	cd b7       	in	r28, 0x3d	; 61
    7d34:	de b7       	in	r29, 0x3e	; 62
    7d36:	29 97       	sbiw	r28, 0x09	; 9
    7d38:	0f b6       	in	r0, 0x3f	; 63
    7d3a:	f8 94       	cli
    7d3c:	de bf       	out	0x3e, r29	; 62
    7d3e:	0f be       	out	0x3f, r0	; 63
    7d40:	cd bf       	out	0x3d, r28	; 61
    7d42:	8c 01       	movw	r16, r24
    7d44:	86 2f       	mov	r24, r22
    7d46:	f8 01       	movw	r30, r16
    7d48:	11 82       	std	Z+1, r1	; 0x01
    7d4a:	10 82       	st	Z, r1
    7d4c:	13 82       	std	Z+3, r1	; 0x03
    7d4e:	12 82       	std	Z+2, r1	; 0x02
    7d50:	15 82       	std	Z+5, r1	; 0x05
    7d52:	14 82       	std	Z+4, r1	; 0x04
    7d54:	50 e0       	ldi	r21, 0x00	; 0
    7d56:	be 01       	movw	r22, r28
    7d58:	6f 5f       	subi	r22, 0xFF	; 255
    7d5a:	7f 4f       	sbci	r23, 0xFF	; 255
    7d5c:	90 e0       	ldi	r25, 0x00	; 0
    7d5e:	a9 d6       	rcall	.+3410   	; 0x8ab2 <utoa>
    7d60:	be 01       	movw	r22, r28
    7d62:	6f 5f       	subi	r22, 0xFF	; 255
    7d64:	7f 4f       	sbci	r23, 0xFF	; 255
    7d66:	c8 01       	movw	r24, r16
    7d68:	cb df       	rcall	.-106    	; 0x7d00 <_ZN6StringaSEPKc>
    7d6a:	29 96       	adiw	r28, 0x09	; 9
    7d6c:	0f b6       	in	r0, 0x3f	; 63
    7d6e:	f8 94       	cli
    7d70:	de bf       	out	0x3e, r29	; 62
    7d72:	0f be       	out	0x3f, r0	; 63
    7d74:	cd bf       	out	0x3d, r28	; 61
    7d76:	df 91       	pop	r29
    7d78:	cf 91       	pop	r28
    7d7a:	1f 91       	pop	r17
    7d7c:	0f 91       	pop	r16
    7d7e:	08 95       	ret

00007d80 <_ZN6StringC1Emh>:
    7d80:	0f 93       	push	r16
    7d82:	1f 93       	push	r17
    7d84:	cf 93       	push	r28
    7d86:	df 93       	push	r29
    7d88:	cd b7       	in	r28, 0x3d	; 61
    7d8a:	de b7       	in	r29, 0x3e	; 62
    7d8c:	a1 97       	sbiw	r28, 0x21	; 33
    7d8e:	0f b6       	in	r0, 0x3f	; 63
    7d90:	f8 94       	cli
    7d92:	de bf       	out	0x3e, r29	; 62
    7d94:	0f be       	out	0x3f, r0	; 63
    7d96:	cd bf       	out	0x3d, r28	; 61
    7d98:	8c 01       	movw	r16, r24
    7d9a:	cb 01       	movw	r24, r22
    7d9c:	ba 01       	movw	r22, r20
    7d9e:	f8 01       	movw	r30, r16
    7da0:	11 82       	std	Z+1, r1	; 0x01
    7da2:	10 82       	st	Z, r1
    7da4:	13 82       	std	Z+3, r1	; 0x03
    7da6:	12 82       	std	Z+2, r1	; 0x02
    7da8:	15 82       	std	Z+5, r1	; 0x05
    7daa:	14 82       	std	Z+4, r1	; 0x04
    7dac:	30 e0       	ldi	r19, 0x00	; 0
    7dae:	ae 01       	movw	r20, r28
    7db0:	4f 5f       	subi	r20, 0xFF	; 255
    7db2:	5f 4f       	sbci	r21, 0xFF	; 255
    7db4:	53 d6       	rcall	.+3238   	; 0x8a5c <ultoa>
    7db6:	be 01       	movw	r22, r28
    7db8:	6f 5f       	subi	r22, 0xFF	; 255
    7dba:	7f 4f       	sbci	r23, 0xFF	; 255
    7dbc:	c8 01       	movw	r24, r16
    7dbe:	a0 df       	rcall	.-192    	; 0x7d00 <_ZN6StringaSEPKc>
    7dc0:	a1 96       	adiw	r28, 0x21	; 33
    7dc2:	0f b6       	in	r0, 0x3f	; 63
    7dc4:	f8 94       	cli
    7dc6:	de bf       	out	0x3e, r29	; 62
    7dc8:	0f be       	out	0x3f, r0	; 63
    7dca:	cd bf       	out	0x3d, r28	; 61
    7dcc:	df 91       	pop	r29
    7dce:	cf 91       	pop	r28
    7dd0:	1f 91       	pop	r17
    7dd2:	0f 91       	pop	r16
    7dd4:	08 95       	ret

00007dd6 <_ZN6StringC1Edh>:
    7dd6:	ef 92       	push	r14
    7dd8:	ff 92       	push	r15
    7dda:	0f 93       	push	r16
    7ddc:	1f 93       	push	r17
    7dde:	cf 93       	push	r28
    7de0:	df 93       	push	r29
    7de2:	cd b7       	in	r28, 0x3d	; 61
    7de4:	de b7       	in	r29, 0x3e	; 62
    7de6:	a1 97       	sbiw	r28, 0x21	; 33
    7de8:	0f b6       	in	r0, 0x3f	; 63
    7dea:	f8 94       	cli
    7dec:	de bf       	out	0x3e, r29	; 62
    7dee:	0f be       	out	0x3f, r0	; 63
    7df0:	cd bf       	out	0x3d, r28	; 61
    7df2:	7c 01       	movw	r14, r24
    7df4:	cb 01       	movw	r24, r22
    7df6:	ba 01       	movw	r22, r20
    7df8:	f7 01       	movw	r30, r14
    7dfa:	11 82       	std	Z+1, r1	; 0x01
    7dfc:	10 82       	st	Z, r1
    7dfe:	13 82       	std	Z+3, r1	; 0x03
    7e00:	12 82       	std	Z+2, r1	; 0x02
    7e02:	15 82       	std	Z+5, r1	; 0x05
    7e04:	14 82       	std	Z+4, r1	; 0x04
    7e06:	42 e0       	ldi	r20, 0x02	; 2
    7e08:	42 0f       	add	r20, r18
    7e0a:	8e 01       	movw	r16, r28
    7e0c:	0f 5f       	subi	r16, 0xFF	; 255
    7e0e:	1f 4f       	sbci	r17, 0xFF	; 255
    7e10:	ba d3       	rcall	.+1908   	; 0x8586 <dtostrf>
    7e12:	bc 01       	movw	r22, r24
    7e14:	c7 01       	movw	r24, r14
    7e16:	74 df       	rcall	.-280    	; 0x7d00 <_ZN6StringaSEPKc>
    7e18:	a1 96       	adiw	r28, 0x21	; 33
    7e1a:	0f b6       	in	r0, 0x3f	; 63
    7e1c:	f8 94       	cli
    7e1e:	de bf       	out	0x3e, r29	; 62
    7e20:	0f be       	out	0x3f, r0	; 63
    7e22:	cd bf       	out	0x3d, r28	; 61
    7e24:	df 91       	pop	r29
    7e26:	cf 91       	pop	r28
    7e28:	1f 91       	pop	r17
    7e2a:	0f 91       	pop	r16
    7e2c:	ff 90       	pop	r15
    7e2e:	ef 90       	pop	r14
    7e30:	08 95       	ret

00007e32 <_ZN6String6concatEPKcj>:
    7e32:	ef 92       	push	r14
    7e34:	ff 92       	push	r15
    7e36:	0f 93       	push	r16
    7e38:	1f 93       	push	r17
    7e3a:	cf 93       	push	r28
    7e3c:	df 93       	push	r29
    7e3e:	61 15       	cp	r22, r1
    7e40:	71 05       	cpc	r23, r1
    7e42:	11 f4       	brne	.+4      	; 0x7e48 <_ZN6String6concatEPKcj+0x16>
    7e44:	80 e0       	ldi	r24, 0x00	; 0
    7e46:	1a c0       	rjmp	.+52     	; 0x7e7c <_ZN6String6concatEPKcj+0x4a>
    7e48:	41 15       	cp	r20, r1
    7e4a:	51 05       	cpc	r21, r1
    7e4c:	b1 f0       	breq	.+44     	; 0x7e7a <_ZN6String6concatEPKcj+0x48>
    7e4e:	7b 01       	movw	r14, r22
    7e50:	ec 01       	movw	r28, r24
    7e52:	8c 81       	ldd	r24, Y+4	; 0x04
    7e54:	9d 81       	ldd	r25, Y+5	; 0x05
    7e56:	8a 01       	movw	r16, r20
    7e58:	08 0f       	add	r16, r24
    7e5a:	19 1f       	adc	r17, r25
    7e5c:	b8 01       	movw	r22, r16
    7e5e:	ce 01       	movw	r24, r28
    7e60:	97 de       	rcall	.-722    	; 0x7b90 <_ZN6String7reserveEj>
    7e62:	88 23       	and	r24, r24
    7e64:	79 f3       	breq	.-34     	; 0x7e44 <_ZN6String6concatEPKcj+0x12>
    7e66:	28 81       	ld	r18, Y
    7e68:	39 81       	ldd	r19, Y+1	; 0x01
    7e6a:	8c 81       	ldd	r24, Y+4	; 0x04
    7e6c:	9d 81       	ldd	r25, Y+5	; 0x05
    7e6e:	b7 01       	movw	r22, r14
    7e70:	82 0f       	add	r24, r18
    7e72:	93 1f       	adc	r25, r19
    7e74:	cf d5       	rcall	.+2974   	; 0x8a14 <strcpy>
    7e76:	1d 83       	std	Y+5, r17	; 0x05
    7e78:	0c 83       	std	Y+4, r16	; 0x04
    7e7a:	81 e0       	ldi	r24, 0x01	; 1
    7e7c:	df 91       	pop	r29
    7e7e:	cf 91       	pop	r28
    7e80:	1f 91       	pop	r17
    7e82:	0f 91       	pop	r16
    7e84:	ff 90       	pop	r15
    7e86:	ef 90       	pop	r14
    7e88:	08 95       	ret

00007e8a <_ZN6String6concatERKS_>:
    7e8a:	fb 01       	movw	r30, r22
    7e8c:	44 81       	ldd	r20, Z+4	; 0x04
    7e8e:	55 81       	ldd	r21, Z+5	; 0x05
    7e90:	60 81       	ld	r22, Z
    7e92:	71 81       	ldd	r23, Z+1	; 0x01
    7e94:	ce cf       	rjmp	.-100    	; 0x7e32 <_ZN6String6concatEPKcj>

00007e96 <_ZN6String6concatEPKc>:
    7e96:	61 15       	cp	r22, r1
    7e98:	71 05       	cpc	r23, r1
    7e9a:	49 f0       	breq	.+18     	; 0x7eae <_ZN6String6concatEPKc+0x18>
    7e9c:	fb 01       	movw	r30, r22
    7e9e:	01 90       	ld	r0, Z+
    7ea0:	00 20       	and	r0, r0
    7ea2:	e9 f7       	brne	.-6      	; 0x7e9e <_ZN6String6concatEPKc+0x8>
    7ea4:	31 97       	sbiw	r30, 0x01	; 1
    7ea6:	af 01       	movw	r20, r30
    7ea8:	46 1b       	sub	r20, r22
    7eaa:	57 0b       	sbc	r21, r23
    7eac:	c2 cf       	rjmp	.-124    	; 0x7e32 <_ZN6String6concatEPKcj>
    7eae:	80 e0       	ldi	r24, 0x00	; 0
    7eb0:	08 95       	ret

00007eb2 <_ZplRK15StringSumHelperRK6String>:
    7eb2:	cf 93       	push	r28
    7eb4:	df 93       	push	r29
    7eb6:	ec 01       	movw	r28, r24
    7eb8:	fb 01       	movw	r30, r22
    7eba:	44 81       	ldd	r20, Z+4	; 0x04
    7ebc:	55 81       	ldd	r21, Z+5	; 0x05
    7ebe:	60 81       	ld	r22, Z
    7ec0:	71 81       	ldd	r23, Z+1	; 0x01
    7ec2:	b7 df       	rcall	.-146    	; 0x7e32 <_ZN6String6concatEPKcj>
    7ec4:	81 11       	cpse	r24, r1
    7ec6:	02 c0       	rjmp	.+4      	; 0x7ecc <_ZplRK15StringSumHelperRK6String+0x1a>
    7ec8:	ce 01       	movw	r24, r28
    7eca:	38 de       	rcall	.-912    	; 0x7b3c <_ZN6String10invalidateEv>
    7ecc:	ce 01       	movw	r24, r28
    7ece:	df 91       	pop	r29
    7ed0:	cf 91       	pop	r28
    7ed2:	08 95       	ret

00007ed4 <_ZplRK15StringSumHelperPKc>:
    7ed4:	cf 93       	push	r28
    7ed6:	df 93       	push	r29
    7ed8:	ec 01       	movw	r28, r24
    7eda:	61 15       	cp	r22, r1
    7edc:	71 05       	cpc	r23, r1
    7ede:	59 f0       	breq	.+22     	; 0x7ef6 <_ZplRK15StringSumHelperPKc+0x22>
    7ee0:	fb 01       	movw	r30, r22
    7ee2:	01 90       	ld	r0, Z+
    7ee4:	00 20       	and	r0, r0
    7ee6:	e9 f7       	brne	.-6      	; 0x7ee2 <_ZplRK15StringSumHelperPKc+0xe>
    7ee8:	31 97       	sbiw	r30, 0x01	; 1
    7eea:	af 01       	movw	r20, r30
    7eec:	46 1b       	sub	r20, r22
    7eee:	57 0b       	sbc	r21, r23
    7ef0:	a0 df       	rcall	.-192    	; 0x7e32 <_ZN6String6concatEPKcj>
    7ef2:	81 11       	cpse	r24, r1
    7ef4:	02 c0       	rjmp	.+4      	; 0x7efa <_ZplRK15StringSumHelperPKc+0x26>
    7ef6:	ce 01       	movw	r24, r28
    7ef8:	21 de       	rcall	.-958    	; 0x7b3c <_ZN6String10invalidateEv>
    7efa:	ce 01       	movw	r24, r28
    7efc:	df 91       	pop	r29
    7efe:	cf 91       	pop	r28
    7f00:	08 95       	ret

00007f02 <_ZNK6String6equalsEPKc>:
    7f02:	fc 01       	movw	r30, r24
    7f04:	24 81       	ldd	r18, Z+4	; 0x04
    7f06:	35 81       	ldd	r19, Z+5	; 0x05
    7f08:	23 2b       	or	r18, r19
    7f0a:	31 f4       	brne	.+12     	; 0x7f18 <_ZNK6String6equalsEPKc+0x16>
    7f0c:	21 e0       	ldi	r18, 0x01	; 1
    7f0e:	61 15       	cp	r22, r1
    7f10:	71 05       	cpc	r23, r1
    7f12:	99 f0       	breq	.+38     	; 0x7f3a <_ZNK6String6equalsEPKc+0x38>
    7f14:	fb 01       	movw	r30, r22
    7f16:	08 c0       	rjmp	.+16     	; 0x7f28 <_ZNK6String6equalsEPKc+0x26>
    7f18:	fc 01       	movw	r30, r24
    7f1a:	80 81       	ld	r24, Z
    7f1c:	91 81       	ldd	r25, Z+1	; 0x01
    7f1e:	61 15       	cp	r22, r1
    7f20:	71 05       	cpc	r23, r1
    7f22:	31 f4       	brne	.+12     	; 0x7f30 <_ZNK6String6equalsEPKc+0x2e>
    7f24:	21 e0       	ldi	r18, 0x01	; 1
    7f26:	fc 01       	movw	r30, r24
    7f28:	80 81       	ld	r24, Z
    7f2a:	88 23       	and	r24, r24
    7f2c:	31 f0       	breq	.+12     	; 0x7f3a <_ZNK6String6equalsEPKc+0x38>
    7f2e:	04 c0       	rjmp	.+8      	; 0x7f38 <_ZNK6String6equalsEPKc+0x36>
    7f30:	68 d5       	rcall	.+2768   	; 0x8a02 <strcmp>
    7f32:	21 e0       	ldi	r18, 0x01	; 1
    7f34:	89 2b       	or	r24, r25
    7f36:	09 f0       	breq	.+2      	; 0x7f3a <_ZNK6String6equalsEPKc+0x38>
    7f38:	20 e0       	ldi	r18, 0x00	; 0
    7f3a:	82 2f       	mov	r24, r18
    7f3c:	08 95       	ret

00007f3e <_ZNK6String8getBytesEPhjj>:
    7f3e:	0f 93       	push	r16
    7f40:	1f 93       	push	r17
    7f42:	cf 93       	push	r28
    7f44:	df 93       	push	r29
    7f46:	41 15       	cp	r20, r1
    7f48:	51 05       	cpc	r21, r1
    7f4a:	11 f1       	breq	.+68     	; 0x7f90 <_ZNK6String8getBytesEPhjj+0x52>
    7f4c:	61 15       	cp	r22, r1
    7f4e:	71 05       	cpc	r23, r1
    7f50:	f9 f0       	breq	.+62     	; 0x7f90 <_ZNK6String8getBytesEPhjj+0x52>
    7f52:	dc 01       	movw	r26, r24
    7f54:	14 96       	adiw	r26, 0x04	; 4
    7f56:	ed 91       	ld	r30, X+
    7f58:	fc 91       	ld	r31, X
    7f5a:	15 97       	sbiw	r26, 0x05	; 5
    7f5c:	2e 17       	cp	r18, r30
    7f5e:	3f 07       	cpc	r19, r31
    7f60:	18 f0       	brcs	.+6      	; 0x7f68 <_ZNK6String8getBytesEPhjj+0x2a>
    7f62:	fb 01       	movw	r30, r22
    7f64:	10 82       	st	Z, r1
    7f66:	14 c0       	rjmp	.+40     	; 0x7f90 <_ZNK6String8getBytesEPhjj+0x52>
    7f68:	e2 1b       	sub	r30, r18
    7f6a:	f3 0b       	sbc	r31, r19
    7f6c:	ea 01       	movw	r28, r20
    7f6e:	21 97       	sbiw	r28, 0x01	; 1
    7f70:	ec 17       	cp	r30, r28
    7f72:	fd 07       	cpc	r31, r29
    7f74:	08 f4       	brcc	.+2      	; 0x7f78 <_ZNK6String8getBytesEPhjj+0x3a>
    7f76:	ef 01       	movw	r28, r30
    7f78:	8b 01       	movw	r16, r22
    7f7a:	fc 01       	movw	r30, r24
    7f7c:	60 81       	ld	r22, Z
    7f7e:	71 81       	ldd	r23, Z+1	; 0x01
    7f80:	62 0f       	add	r22, r18
    7f82:	73 1f       	adc	r23, r19
    7f84:	ae 01       	movw	r20, r28
    7f86:	c8 01       	movw	r24, r16
    7f88:	5a d5       	rcall	.+2740   	; 0x8a3e <strncpy>
    7f8a:	c0 0f       	add	r28, r16
    7f8c:	d1 1f       	adc	r29, r17
    7f8e:	18 82       	st	Y, r1
    7f90:	df 91       	pop	r29
    7f92:	cf 91       	pop	r28
    7f94:	1f 91       	pop	r17
    7f96:	0f 91       	pop	r16
    7f98:	08 95       	ret

00007f9a <_ZNK6String9substringEjj>:
    7f9a:	bf 92       	push	r11
    7f9c:	cf 92       	push	r12
    7f9e:	df 92       	push	r13
    7fa0:	ef 92       	push	r14
    7fa2:	ff 92       	push	r15
    7fa4:	0f 93       	push	r16
    7fa6:	1f 93       	push	r17
    7fa8:	cf 93       	push	r28
    7faa:	df 93       	push	r29
    7fac:	7c 01       	movw	r14, r24
    7fae:	6b 01       	movw	r12, r22
    7fb0:	8a 01       	movw	r16, r20
    7fb2:	e9 01       	movw	r28, r18
    7fb4:	24 17       	cp	r18, r20
    7fb6:	35 07       	cpc	r19, r21
    7fb8:	20 f4       	brcc	.+8      	; 0x7fc2 <_ZNK6String9substringEjj+0x28>
    7fba:	81 2f       	mov	r24, r17
    7fbc:	89 01       	movw	r16, r18
    7fbe:	c4 2f       	mov	r28, r20
    7fc0:	d8 2f       	mov	r29, r24
    7fc2:	63 ec       	ldi	r22, 0xC3	; 195
    7fc4:	71 e0       	ldi	r23, 0x01	; 1
    7fc6:	c7 01       	movw	r24, r14
    7fc8:	1c de       	rcall	.-968    	; 0x7c02 <_ZN6StringC1EPKc>
    7fca:	d6 01       	movw	r26, r12
    7fcc:	14 96       	adiw	r26, 0x04	; 4
    7fce:	8d 91       	ld	r24, X+
    7fd0:	9c 91       	ld	r25, X
    7fd2:	15 97       	sbiw	r26, 0x05	; 5
    7fd4:	08 17       	cp	r16, r24
    7fd6:	19 07       	cpc	r17, r25
    7fd8:	c0 f4       	brcc	.+48     	; 0x800a <_ZNK6String9substringEjj+0x70>
    7fda:	8c 17       	cp	r24, r28
    7fdc:	9d 07       	cpc	r25, r29
    7fde:	08 f4       	brcc	.+2      	; 0x7fe2 <_ZNK6String9substringEjj+0x48>
    7fe0:	ec 01       	movw	r28, r24
    7fe2:	d6 01       	movw	r26, r12
    7fe4:	ed 91       	ld	r30, X+
    7fe6:	fc 91       	ld	r31, X
    7fe8:	11 97       	sbiw	r26, 0x01	; 1
    7fea:	ec 0f       	add	r30, r28
    7fec:	fd 1f       	adc	r31, r29
    7fee:	b0 80       	ld	r11, Z
    7ff0:	10 82       	st	Z, r1
    7ff2:	6d 91       	ld	r22, X+
    7ff4:	7c 91       	ld	r23, X
    7ff6:	60 0f       	add	r22, r16
    7ff8:	71 1f       	adc	r23, r17
    7ffa:	c7 01       	movw	r24, r14
    7ffc:	81 de       	rcall	.-766    	; 0x7d00 <_ZN6StringaSEPKc>
    7ffe:	d6 01       	movw	r26, r12
    8000:	ed 91       	ld	r30, X+
    8002:	fc 91       	ld	r31, X
    8004:	ec 0f       	add	r30, r28
    8006:	fd 1f       	adc	r31, r29
    8008:	b0 82       	st	Z, r11
    800a:	c7 01       	movw	r24, r14
    800c:	df 91       	pop	r29
    800e:	cf 91       	pop	r28
    8010:	1f 91       	pop	r17
    8012:	0f 91       	pop	r16
    8014:	ff 90       	pop	r15
    8016:	ef 90       	pop	r14
    8018:	df 90       	pop	r13
    801a:	cf 90       	pop	r12
    801c:	bf 90       	pop	r11
    801e:	08 95       	ret

00008020 <_ZN6String4trimEv>:

void String::trim(void)
{
    8020:	af 92       	push	r10
    8022:	bf 92       	push	r11
    8024:	cf 92       	push	r12
    8026:	df 92       	push	r13
    8028:	ef 92       	push	r14
    802a:	ff 92       	push	r15
    802c:	0f 93       	push	r16
    802e:	1f 93       	push	r17
    8030:	cf 93       	push	r28
    8032:	df 93       	push	r29
	if (!buffer || len == 0) return;
    8034:	dc 01       	movw	r26, r24
    8036:	cd 90       	ld	r12, X+
    8038:	dc 90       	ld	r13, X
    803a:	11 97       	sbiw	r26, 0x01	; 1
    803c:	c1 14       	cp	r12, r1
    803e:	d1 04       	cpc	r13, r1
    8040:	09 f4       	brne	.+2      	; 0x8044 <_ZN6String4trimEv+0x24>
    8042:	3c c0       	rjmp	.+120    	; 0x80bc <_ZN6String4trimEv+0x9c>
    8044:	14 96       	adiw	r26, 0x04	; 4
    8046:	cd 91       	ld	r28, X+
    8048:	dc 91       	ld	r29, X
    804a:	15 97       	sbiw	r26, 0x05	; 5
    804c:	20 97       	sbiw	r28, 0x00	; 0
    804e:	b1 f1       	breq	.+108    	; 0x80bc <_ZN6String4trimEv+0x9c>
    8050:	8c 01       	movw	r16, r24
    8052:	76 01       	movw	r14, r12
    8054:	57 01       	movw	r10, r14
    8056:	bf ef       	ldi	r27, 0xFF	; 255
    8058:	ab 1a       	sub	r10, r27
    805a:	bb 0a       	sbc	r11, r27
	char *begin = buffer;
	while (isspace(*begin)) begin++;
    805c:	f7 01       	movw	r30, r14
    805e:	80 81       	ld	r24, Z
    8060:	90 e0       	ldi	r25, 0x00	; 0
    8062:	b5 d4       	rcall	.+2410   	; 0x89ce <isspace>
    8064:	89 2b       	or	r24, r25
    8066:	11 f0       	breq	.+4      	; 0x806c <_ZN6String4trimEv+0x4c>
    8068:	75 01       	movw	r14, r10
    806a:	f4 cf       	rjmp	.-24     	; 0x8054 <_ZN6String4trimEv+0x34>
	char *end = buffer + len - 1;
    806c:	21 97       	sbiw	r28, 0x01	; 1
    806e:	cc 0d       	add	r28, r12
    8070:	dd 1d       	adc	r29, r13
	while (isspace(*end) && end >= begin) end--;
    8072:	88 81       	ld	r24, Y
    8074:	90 e0       	ldi	r25, 0x00	; 0
    8076:	ab d4       	rcall	.+2390   	; 0x89ce <isspace>
    8078:	89 2b       	or	r24, r25
    807a:	29 f0       	breq	.+10     	; 0x8086 <_ZN6String4trimEv+0x66>
    807c:	ce 15       	cp	r28, r14
    807e:	df 05       	cpc	r29, r15
    8080:	10 f0       	brcs	.+4      	; 0x8086 <_ZN6String4trimEv+0x66>
    8082:	21 97       	sbiw	r28, 0x01	; 1
    8084:	f6 cf       	rjmp	.-20     	; 0x8072 <_ZN6String4trimEv+0x52>
	len = end + 1 - begin;
    8086:	ae 01       	movw	r20, r28
    8088:	4f 5f       	subi	r20, 0xFF	; 255
    808a:	5f 4f       	sbci	r21, 0xFF	; 255
    808c:	4e 19       	sub	r20, r14
    808e:	5f 09       	sbc	r21, r15
    8090:	d8 01       	movw	r26, r16
    8092:	15 96       	adiw	r26, 0x05	; 5
    8094:	5c 93       	st	X, r21
    8096:	4e 93       	st	-X, r20
    8098:	14 97       	sbiw	r26, 0x04	; 4
	if (begin > buffer) memcpy(buffer, begin, len);
    809a:	ce 14       	cp	r12, r14
    809c:	df 04       	cpc	r13, r15
    809e:	18 f4       	brcc	.+6      	; 0x80a6 <_ZN6String4trimEv+0x86>
    80a0:	b7 01       	movw	r22, r14
    80a2:	c6 01       	movw	r24, r12
    80a4:	a5 d4       	rcall	.+2378   	; 0x89f0 <memcpy>
	buffer[len] = 0;
    80a6:	d8 01       	movw	r26, r16
    80a8:	ed 91       	ld	r30, X+
    80aa:	fc 91       	ld	r31, X
    80ac:	11 97       	sbiw	r26, 0x01	; 1
    80ae:	14 96       	adiw	r26, 0x04	; 4
    80b0:	8d 91       	ld	r24, X+
    80b2:	9c 91       	ld	r25, X
    80b4:	15 97       	sbiw	r26, 0x05	; 5
    80b6:	e8 0f       	add	r30, r24
    80b8:	f9 1f       	adc	r31, r25
    80ba:	10 82       	st	Z, r1
}
    80bc:	df 91       	pop	r29
    80be:	cf 91       	pop	r28
    80c0:	1f 91       	pop	r17
    80c2:	0f 91       	pop	r16
    80c4:	ff 90       	pop	r15
    80c6:	ef 90       	pop	r14
    80c8:	df 90       	pop	r13
    80ca:	cf 90       	pop	r12
    80cc:	bf 90       	pop	r11
    80ce:	af 90       	pop	r10
    80d0:	08 95       	ret

000080d2 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    80d2:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    80d4:	91 8d       	ldd	r25, Z+25	; 0x19
    80d6:	22 8d       	ldd	r18, Z+26	; 0x1a
    80d8:	89 2f       	mov	r24, r25
    80da:	90 e0       	ldi	r25, 0x00	; 0
    80dc:	80 5c       	subi	r24, 0xC0	; 192
    80de:	9f 4f       	sbci	r25, 0xFF	; 255
    80e0:	82 1b       	sub	r24, r18
    80e2:	91 09       	sbc	r25, r1
}
    80e4:	8f 73       	andi	r24, 0x3F	; 63
    80e6:	99 27       	eor	r25, r25
    80e8:	08 95       	ret

000080ea <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    80ea:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    80ec:	91 8d       	ldd	r25, Z+25	; 0x19
    80ee:	82 8d       	ldd	r24, Z+26	; 0x1a
    80f0:	98 17       	cp	r25, r24
    80f2:	31 f0       	breq	.+12     	; 0x8100 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    80f4:	82 8d       	ldd	r24, Z+26	; 0x1a
    80f6:	e8 0f       	add	r30, r24
    80f8:	f1 1d       	adc	r31, r1
    80fa:	85 8d       	ldd	r24, Z+29	; 0x1d
    80fc:	90 e0       	ldi	r25, 0x00	; 0
    80fe:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    8100:	8f ef       	ldi	r24, 0xFF	; 255
    8102:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    8104:	08 95       	ret

00008106 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    8106:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    8108:	91 8d       	ldd	r25, Z+25	; 0x19
    810a:	82 8d       	ldd	r24, Z+26	; 0x1a
    810c:	98 17       	cp	r25, r24
    810e:	61 f0       	breq	.+24     	; 0x8128 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    8110:	82 8d       	ldd	r24, Z+26	; 0x1a
    8112:	df 01       	movw	r26, r30
    8114:	a8 0f       	add	r26, r24
    8116:	b1 1d       	adc	r27, r1
    8118:	5d 96       	adiw	r26, 0x1d	; 29
    811a:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    811c:	92 8d       	ldd	r25, Z+26	; 0x1a
    811e:	9f 5f       	subi	r25, 0xFF	; 255
    8120:	9f 73       	andi	r25, 0x3F	; 63
    8122:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    8124:	90 e0       	ldi	r25, 0x00	; 0
    8126:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    8128:	8f ef       	ldi	r24, 0xFF	; 255
    812a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    812c:	08 95       	ret

0000812e <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    812e:	fc 01       	movw	r30, r24
    8130:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    8132:	44 8d       	ldd	r20, Z+28	; 0x1c
    8134:	25 2f       	mov	r18, r21
    8136:	30 e0       	ldi	r19, 0x00	; 0
    8138:	84 2f       	mov	r24, r20
    813a:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    813c:	82 1b       	sub	r24, r18
    813e:	93 0b       	sbc	r25, r19
    8140:	54 17       	cp	r21, r20
    8142:	10 f0       	brcs	.+4      	; 0x8148 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    8144:	cf 96       	adiw	r24, 0x3f	; 63
    8146:	08 95       	ret
  return tail - head - 1;
    8148:	01 97       	sbiw	r24, 0x01	; 1
}
    814a:	08 95       	ret

0000814c <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    814c:	82 e1       	ldi	r24, 0x12	; 18
    814e:	9a e3       	ldi	r25, 0x3A	; 58
    8150:	89 2b       	or	r24, r25
    8152:	41 f0       	breq	.+16     	; 0x8164 <_Z14serialEventRunv+0x18>
    8154:	80 e0       	ldi	r24, 0x00	; 0
    8156:	90 e0       	ldi	r25, 0x00	; 0
    8158:	89 2b       	or	r24, r25
    815a:	21 f0       	breq	.+8      	; 0x8164 <_Z14serialEventRunv+0x18>
    815c:	63 d9       	rcall	.-3386   	; 0x7424 <_Z17Serial0_availablev>
    815e:	81 11       	cpse	r24, r1
    8160:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    8164:	08 95       	ret

00008166 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    8166:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    8168:	84 8d       	ldd	r24, Z+28	; 0x1c
    816a:	df 01       	movw	r26, r30
    816c:	a8 0f       	add	r26, r24
    816e:	b1 1d       	adc	r27, r1
    8170:	a3 5a       	subi	r26, 0xA3	; 163
    8172:	bf 4f       	sbci	r27, 0xFF	; 255
    8174:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    8176:	84 8d       	ldd	r24, Z+28	; 0x1c
    8178:	90 e0       	ldi	r25, 0x00	; 0
    817a:	01 96       	adiw	r24, 0x01	; 1
    817c:	8f 73       	andi	r24, 0x3F	; 63
    817e:	99 27       	eor	r25, r25
    8180:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    8182:	a6 89       	ldd	r26, Z+22	; 0x16
    8184:	b7 89       	ldd	r27, Z+23	; 0x17
    8186:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    8188:	a0 89       	ldd	r26, Z+16	; 0x10
    818a:	b1 89       	ldd	r27, Z+17	; 0x11
    818c:	8c 91       	ld	r24, X
    818e:	83 70       	andi	r24, 0x03	; 3
    8190:	80 64       	ori	r24, 0x40	; 64
    8192:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    8194:	93 8d       	ldd	r25, Z+27	; 0x1b
    8196:	84 8d       	ldd	r24, Z+28	; 0x1c
    8198:	98 13       	cpse	r25, r24
    819a:	06 c0       	rjmp	.+12     	; 0x81a8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    819c:	02 88       	ldd	r0, Z+18	; 0x12
    819e:	f3 89       	ldd	r31, Z+19	; 0x13
    81a0:	e0 2d       	mov	r30, r0
    81a2:	80 81       	ld	r24, Z
    81a4:	8f 7d       	andi	r24, 0xDF	; 223
    81a6:	80 83       	st	Z, r24
    81a8:	08 95       	ret

000081aa <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    81aa:	ef 92       	push	r14
    81ac:	ff 92       	push	r15
    81ae:	0f 93       	push	r16
    81b0:	1f 93       	push	r17
    81b2:	cf 93       	push	r28
    81b4:	df 93       	push	r29
    81b6:	ec 01       	movw	r28, r24
  _written = true;
    81b8:	81 e0       	ldi	r24, 0x01	; 1
    81ba:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    81bc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    81be:	8c 8d       	ldd	r24, Y+28	; 0x1c
    81c0:	98 13       	cpse	r25, r24
    81c2:	05 c0       	rjmp	.+10     	; 0x81ce <_ZN14HardwareSerial5writeEh+0x24>
    81c4:	e8 89       	ldd	r30, Y+16	; 0x10
    81c6:	f9 89       	ldd	r31, Y+17	; 0x11
    81c8:	80 81       	ld	r24, Z
    81ca:	85 fd       	sbrc	r24, 5
    81cc:	25 c0       	rjmp	.+74     	; 0x8218 <_ZN14HardwareSerial5writeEh+0x6e>
    81ce:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    81d0:	0b 8d       	ldd	r16, Y+27	; 0x1b
    81d2:	10 e0       	ldi	r17, 0x00	; 0
    81d4:	0f 5f       	subi	r16, 0xFF	; 255
    81d6:	1f 4f       	sbci	r17, 0xFF	; 255
    81d8:	0f 73       	andi	r16, 0x3F	; 63
    81da:	11 27       	eor	r17, r17
    81dc:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    81de:	8c 8d       	ldd	r24, Y+28	; 0x1c
    81e0:	e8 12       	cpse	r14, r24
    81e2:	0b c0       	rjmp	.+22     	; 0x81fa <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    81e4:	0f b6       	in	r0, 0x3f	; 63
    81e6:	07 fc       	sbrc	r0, 7
    81e8:	fa cf       	rjmp	.-12     	; 0x81de <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    81ea:	e8 89       	ldd	r30, Y+16	; 0x10
    81ec:	f9 89       	ldd	r31, Y+17	; 0x11
    81ee:	80 81       	ld	r24, Z
    81f0:	85 ff       	sbrs	r24, 5
    81f2:	f5 cf       	rjmp	.-22     	; 0x81de <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    81f4:	ce 01       	movw	r24, r28
    81f6:	b7 df       	rcall	.-146    	; 0x8166 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    81f8:	f2 cf       	rjmp	.-28     	; 0x81de <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    81fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    81fc:	fe 01       	movw	r30, r28
    81fe:	e8 0f       	add	r30, r24
    8200:	f1 1d       	adc	r31, r1
    8202:	e3 5a       	subi	r30, 0xA3	; 163
    8204:	ff 4f       	sbci	r31, 0xFF	; 255
    8206:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    8208:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    820a:	f8 94       	cli
    _tx_buffer_head = i;
    820c:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    820e:	ea 89       	ldd	r30, Y+18	; 0x12
    8210:	fb 89       	ldd	r31, Y+19	; 0x13
    8212:	80 81       	ld	r24, Z
    8214:	80 62       	ori	r24, 0x20	; 32
    8216:	0a c0       	rjmp	.+20     	; 0x822c <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    8218:	9f b7       	in	r25, 0x3f	; 63
    821a:	f8 94       	cli
      *_udr = c;
    821c:	ee 89       	ldd	r30, Y+22	; 0x16
    821e:	ff 89       	ldd	r31, Y+23	; 0x17
    8220:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    8222:	e8 89       	ldd	r30, Y+16	; 0x10
    8224:	f9 89       	ldd	r31, Y+17	; 0x11
    8226:	80 81       	ld	r24, Z
    8228:	83 70       	andi	r24, 0x03	; 3
    822a:	80 64       	ori	r24, 0x40	; 64
    822c:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    822e:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    8230:	81 e0       	ldi	r24, 0x01	; 1
    8232:	90 e0       	ldi	r25, 0x00	; 0
    8234:	df 91       	pop	r29
    8236:	cf 91       	pop	r28
    8238:	1f 91       	pop	r17
    823a:	0f 91       	pop	r16
    823c:	ff 90       	pop	r15
    823e:	ef 90       	pop	r14
    8240:	08 95       	ret

00008242 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    8242:	cf 93       	push	r28
    8244:	df 93       	push	r29
    8246:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    8248:	88 8d       	ldd	r24, Y+24	; 0x18
    824a:	88 23       	and	r24, r24
    824c:	c1 f0       	breq	.+48     	; 0x827e <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    824e:	ea 89       	ldd	r30, Y+18	; 0x12
    8250:	fb 89       	ldd	r31, Y+19	; 0x13
    8252:	80 81       	ld	r24, Z
    8254:	85 fd       	sbrc	r24, 5
    8256:	05 c0       	rjmp	.+10     	; 0x8262 <_ZN14HardwareSerial5flushEv+0x20>
    8258:	a8 89       	ldd	r26, Y+16	; 0x10
    825a:	b9 89       	ldd	r27, Y+17	; 0x11
    825c:	8c 91       	ld	r24, X
    825e:	86 fd       	sbrc	r24, 6
    8260:	0e c0       	rjmp	.+28     	; 0x827e <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    8262:	0f b6       	in	r0, 0x3f	; 63
    8264:	07 fc       	sbrc	r0, 7
    8266:	f5 cf       	rjmp	.-22     	; 0x8252 <_ZN14HardwareSerial5flushEv+0x10>
    8268:	80 81       	ld	r24, Z
    826a:	85 ff       	sbrs	r24, 5
    826c:	f2 cf       	rjmp	.-28     	; 0x8252 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    826e:	a8 89       	ldd	r26, Y+16	; 0x10
    8270:	b9 89       	ldd	r27, Y+17	; 0x11
    8272:	8c 91       	ld	r24, X
    8274:	85 ff       	sbrs	r24, 5
    8276:	ed cf       	rjmp	.-38     	; 0x8252 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    8278:	ce 01       	movw	r24, r28
    827a:	75 df       	rcall	.-278    	; 0x8166 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    827c:	e8 cf       	rjmp	.-48     	; 0x824e <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    827e:	df 91       	pop	r29
    8280:	cf 91       	pop	r28
    8282:	08 95       	ret

00008284 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    8284:	08 95       	ret

00008286 <__udivmodqi4>:
    8286:	99 1b       	sub	r25, r25
    8288:	79 e0       	ldi	r23, 0x09	; 9
    828a:	04 c0       	rjmp	.+8      	; 0x8294 <__udivmodqi4_ep>

0000828c <__udivmodqi4_loop>:
    828c:	99 1f       	adc	r25, r25
    828e:	96 17       	cp	r25, r22
    8290:	08 f0       	brcs	.+2      	; 0x8294 <__udivmodqi4_ep>
    8292:	96 1b       	sub	r25, r22

00008294 <__udivmodqi4_ep>:
    8294:	88 1f       	adc	r24, r24
    8296:	7a 95       	dec	r23
    8298:	c9 f7       	brne	.-14     	; 0x828c <__udivmodqi4_loop>
    829a:	80 95       	com	r24
    829c:	08 95       	ret

0000829e <__udivmodhi4>:
    829e:	aa 1b       	sub	r26, r26
    82a0:	bb 1b       	sub	r27, r27
    82a2:	51 e1       	ldi	r21, 0x11	; 17
    82a4:	07 c0       	rjmp	.+14     	; 0x82b4 <__udivmodhi4_ep>

000082a6 <__udivmodhi4_loop>:
    82a6:	aa 1f       	adc	r26, r26
    82a8:	bb 1f       	adc	r27, r27
    82aa:	a6 17       	cp	r26, r22
    82ac:	b7 07       	cpc	r27, r23
    82ae:	10 f0       	brcs	.+4      	; 0x82b4 <__udivmodhi4_ep>
    82b0:	a6 1b       	sub	r26, r22
    82b2:	b7 0b       	sbc	r27, r23

000082b4 <__udivmodhi4_ep>:
    82b4:	88 1f       	adc	r24, r24
    82b6:	99 1f       	adc	r25, r25
    82b8:	5a 95       	dec	r21
    82ba:	a9 f7       	brne	.-22     	; 0x82a6 <__udivmodhi4_loop>
    82bc:	80 95       	com	r24
    82be:	90 95       	com	r25
    82c0:	bc 01       	movw	r22, r24
    82c2:	cd 01       	movw	r24, r26
    82c4:	08 95       	ret

000082c6 <__udivmodsi4>:
    82c6:	a1 e2       	ldi	r26, 0x21	; 33
    82c8:	1a 2e       	mov	r1, r26
    82ca:	aa 1b       	sub	r26, r26
    82cc:	bb 1b       	sub	r27, r27
    82ce:	fd 01       	movw	r30, r26
    82d0:	0d c0       	rjmp	.+26     	; 0x82ec <__udivmodsi4_ep>

000082d2 <__udivmodsi4_loop>:
    82d2:	aa 1f       	adc	r26, r26
    82d4:	bb 1f       	adc	r27, r27
    82d6:	ee 1f       	adc	r30, r30
    82d8:	ff 1f       	adc	r31, r31
    82da:	a2 17       	cp	r26, r18
    82dc:	b3 07       	cpc	r27, r19
    82de:	e4 07       	cpc	r30, r20
    82e0:	f5 07       	cpc	r31, r21
    82e2:	20 f0       	brcs	.+8      	; 0x82ec <__udivmodsi4_ep>
    82e4:	a2 1b       	sub	r26, r18
    82e6:	b3 0b       	sbc	r27, r19
    82e8:	e4 0b       	sbc	r30, r20
    82ea:	f5 0b       	sbc	r31, r21

000082ec <__udivmodsi4_ep>:
    82ec:	66 1f       	adc	r22, r22
    82ee:	77 1f       	adc	r23, r23
    82f0:	88 1f       	adc	r24, r24
    82f2:	99 1f       	adc	r25, r25
    82f4:	1a 94       	dec	r1
    82f6:	69 f7       	brne	.-38     	; 0x82d2 <__udivmodsi4_loop>
    82f8:	60 95       	com	r22
    82fa:	70 95       	com	r23
    82fc:	80 95       	com	r24
    82fe:	90 95       	com	r25
    8300:	9b 01       	movw	r18, r22
    8302:	ac 01       	movw	r20, r24
    8304:	bd 01       	movw	r22, r26
    8306:	cf 01       	movw	r24, r30
    8308:	08 95       	ret

0000830a <__tablejump2__>:
    830a:	ee 0f       	add	r30, r30
    830c:	ff 1f       	adc	r31, r31
    830e:	00 24       	eor	r0, r0
    8310:	00 1c       	adc	r0, r0
    8312:	0b be       	out	0x3b, r0	; 59
    8314:	07 90       	elpm	r0, Z+
    8316:	f6 91       	elpm	r31, Z
    8318:	e0 2d       	mov	r30, r0
    831a:	09 94       	ijmp

0000831c <__umulhisi3>:
    831c:	a2 9f       	mul	r26, r18
    831e:	b0 01       	movw	r22, r0
    8320:	b3 9f       	mul	r27, r19
    8322:	c0 01       	movw	r24, r0
    8324:	a3 9f       	mul	r26, r19
    8326:	70 0d       	add	r23, r0
    8328:	81 1d       	adc	r24, r1
    832a:	11 24       	eor	r1, r1
    832c:	91 1d       	adc	r25, r1
    832e:	b2 9f       	mul	r27, r18
    8330:	70 0d       	add	r23, r0
    8332:	81 1d       	adc	r24, r1
    8334:	11 24       	eor	r1, r1
    8336:	91 1d       	adc	r25, r1
    8338:	08 95       	ret

0000833a <__muluhisi3>:
    833a:	f0 df       	rcall	.-32     	; 0x831c <__umulhisi3>
    833c:	a5 9f       	mul	r26, r21
    833e:	90 0d       	add	r25, r0
    8340:	b4 9f       	mul	r27, r20
    8342:	90 0d       	add	r25, r0
    8344:	a4 9f       	mul	r26, r20
    8346:	80 0d       	add	r24, r0
    8348:	91 1d       	adc	r25, r1
    834a:	11 24       	eor	r1, r1
    834c:	08 95       	ret

0000834e <__moddi3>:
    834e:	68 94       	set
    8350:	01 c0       	rjmp	.+2      	; 0x8354 <__divdi3_moddi3>

00008352 <__divdi3>:
    8352:	e8 94       	clt

00008354 <__divdi3_moddi3>:
    8354:	f9 2f       	mov	r31, r25
    8356:	f1 2b       	or	r31, r17
    8358:	0a f0       	brmi	.+2      	; 0x835c <__divdi3_moddi3+0x8>
    835a:	27 c0       	rjmp	.+78     	; 0x83aa <__udivdi3_umoddi3>
    835c:	a0 e0       	ldi	r26, 0x00	; 0
    835e:	b0 e0       	ldi	r27, 0x00	; 0
    8360:	e3 eb       	ldi	r30, 0xB3	; 179
    8362:	f1 e4       	ldi	r31, 0x41	; 65
    8364:	93 c0       	rjmp	.+294    	; 0x848c <__prologue_saves__+0xc>
    8366:	09 2e       	mov	r0, r25
    8368:	05 94       	asr	r0
    836a:	1a f4       	brpl	.+6      	; 0x8372 <__divdi3_moddi3+0x1e>
    836c:	79 d0       	rcall	.+242    	; 0x8460 <__negdi2>
    836e:	11 23       	and	r17, r17
    8370:	92 f4       	brpl	.+36     	; 0x8396 <__divdi3_moddi3+0x42>
    8372:	f0 e8       	ldi	r31, 0x80	; 128
    8374:	0f 26       	eor	r0, r31
    8376:	ff ef       	ldi	r31, 0xFF	; 255
    8378:	e0 94       	com	r14
    837a:	f0 94       	com	r15
    837c:	00 95       	com	r16
    837e:	10 95       	com	r17
    8380:	b0 94       	com	r11
    8382:	c0 94       	com	r12
    8384:	d0 94       	com	r13
    8386:	a1 94       	neg	r10
    8388:	bf 0a       	sbc	r11, r31
    838a:	cf 0a       	sbc	r12, r31
    838c:	df 0a       	sbc	r13, r31
    838e:	ef 0a       	sbc	r14, r31
    8390:	ff 0a       	sbc	r15, r31
    8392:	0f 0b       	sbc	r16, r31
    8394:	1f 0b       	sbc	r17, r31
    8396:	13 d0       	rcall	.+38     	; 0x83be <__udivmod64>
    8398:	07 fc       	sbrc	r0, 7
    839a:	62 d0       	rcall	.+196    	; 0x8460 <__negdi2>
    839c:	cd b7       	in	r28, 0x3d	; 61
    839e:	de b7       	in	r29, 0x3e	; 62
    83a0:	ec e0       	ldi	r30, 0x0C	; 12
    83a2:	90 c0       	rjmp	.+288    	; 0x84c4 <__epilogue_restores__+0xc>

000083a4 <__umoddi3>:
    83a4:	68 94       	set
    83a6:	01 c0       	rjmp	.+2      	; 0x83aa <__udivdi3_umoddi3>

000083a8 <__udivdi3>:
    83a8:	e8 94       	clt

000083aa <__udivdi3_umoddi3>:
    83aa:	8f 92       	push	r8
    83ac:	9f 92       	push	r9
    83ae:	cf 93       	push	r28
    83b0:	df 93       	push	r29
    83b2:	05 d0       	rcall	.+10     	; 0x83be <__udivmod64>
    83b4:	df 91       	pop	r29
    83b6:	cf 91       	pop	r28
    83b8:	9f 90       	pop	r9
    83ba:	8f 90       	pop	r8
    83bc:	08 95       	ret

000083be <__udivmod64>:
    83be:	88 24       	eor	r8, r8
    83c0:	99 24       	eor	r9, r9
    83c2:	f4 01       	movw	r30, r8
    83c4:	e4 01       	movw	r28, r8
    83c6:	b0 e4       	ldi	r27, 0x40	; 64
    83c8:	9f 93       	push	r25
    83ca:	aa 27       	eor	r26, r26
    83cc:	9a 15       	cp	r25, r10
    83ce:	8b 04       	cpc	r8, r11
    83d0:	9c 04       	cpc	r9, r12
    83d2:	ed 05       	cpc	r30, r13
    83d4:	fe 05       	cpc	r31, r14
    83d6:	cf 05       	cpc	r28, r15
    83d8:	d0 07       	cpc	r29, r16
    83da:	a1 07       	cpc	r26, r17
    83dc:	98 f4       	brcc	.+38     	; 0x8404 <__udivmod64+0x46>
    83de:	ad 2f       	mov	r26, r29
    83e0:	dc 2f       	mov	r29, r28
    83e2:	cf 2f       	mov	r28, r31
    83e4:	fe 2f       	mov	r31, r30
    83e6:	e9 2d       	mov	r30, r9
    83e8:	98 2c       	mov	r9, r8
    83ea:	89 2e       	mov	r8, r25
    83ec:	98 2f       	mov	r25, r24
    83ee:	87 2f       	mov	r24, r23
    83f0:	76 2f       	mov	r23, r22
    83f2:	65 2f       	mov	r22, r21
    83f4:	54 2f       	mov	r21, r20
    83f6:	43 2f       	mov	r20, r19
    83f8:	32 2f       	mov	r19, r18
    83fa:	22 27       	eor	r18, r18
    83fc:	b8 50       	subi	r27, 0x08	; 8
    83fe:	31 f7       	brne	.-52     	; 0x83cc <__udivmod64+0xe>
    8400:	bf 91       	pop	r27
    8402:	27 c0       	rjmp	.+78     	; 0x8452 <__udivmod64+0x94>
    8404:	1b 2e       	mov	r1, r27
    8406:	bf 91       	pop	r27
    8408:	bb 27       	eor	r27, r27
    840a:	22 0f       	add	r18, r18
    840c:	33 1f       	adc	r19, r19
    840e:	44 1f       	adc	r20, r20
    8410:	55 1f       	adc	r21, r21
    8412:	66 1f       	adc	r22, r22
    8414:	77 1f       	adc	r23, r23
    8416:	88 1f       	adc	r24, r24
    8418:	99 1f       	adc	r25, r25
    841a:	88 1c       	adc	r8, r8
    841c:	99 1c       	adc	r9, r9
    841e:	ee 1f       	adc	r30, r30
    8420:	ff 1f       	adc	r31, r31
    8422:	cc 1f       	adc	r28, r28
    8424:	dd 1f       	adc	r29, r29
    8426:	aa 1f       	adc	r26, r26
    8428:	bb 1f       	adc	r27, r27
    842a:	8a 14       	cp	r8, r10
    842c:	9b 04       	cpc	r9, r11
    842e:	ec 05       	cpc	r30, r12
    8430:	fd 05       	cpc	r31, r13
    8432:	ce 05       	cpc	r28, r14
    8434:	df 05       	cpc	r29, r15
    8436:	a0 07       	cpc	r26, r16
    8438:	b1 07       	cpc	r27, r17
    843a:	48 f0       	brcs	.+18     	; 0x844e <__udivmod64+0x90>
    843c:	8a 18       	sub	r8, r10
    843e:	9b 08       	sbc	r9, r11
    8440:	ec 09       	sbc	r30, r12
    8442:	fd 09       	sbc	r31, r13
    8444:	ce 09       	sbc	r28, r14
    8446:	df 09       	sbc	r29, r15
    8448:	a0 0b       	sbc	r26, r16
    844a:	b1 0b       	sbc	r27, r17
    844c:	21 60       	ori	r18, 0x01	; 1
    844e:	1a 94       	dec	r1
    8450:	e1 f6       	brne	.-72     	; 0x840a <__udivmod64+0x4c>
    8452:	2e f4       	brtc	.+10     	; 0x845e <__udivmod64+0xa0>
    8454:	94 01       	movw	r18, r8
    8456:	af 01       	movw	r20, r30
    8458:	be 01       	movw	r22, r28
    845a:	cd 01       	movw	r24, r26
    845c:	00 0c       	add	r0, r0
    845e:	08 95       	ret

00008460 <__negdi2>:
    8460:	60 95       	com	r22
    8462:	70 95       	com	r23
    8464:	80 95       	com	r24
    8466:	90 95       	com	r25
    8468:	30 95       	com	r19
    846a:	40 95       	com	r20
    846c:	50 95       	com	r21
    846e:	21 95       	neg	r18
    8470:	3f 4f       	sbci	r19, 0xFF	; 255
    8472:	4f 4f       	sbci	r20, 0xFF	; 255
    8474:	5f 4f       	sbci	r21, 0xFF	; 255
    8476:	6f 4f       	sbci	r22, 0xFF	; 255
    8478:	7f 4f       	sbci	r23, 0xFF	; 255
    847a:	8f 4f       	sbci	r24, 0xFF	; 255
    847c:	9f 4f       	sbci	r25, 0xFF	; 255
    847e:	08 95       	ret

00008480 <__prologue_saves__>:
    8480:	2f 92       	push	r2
    8482:	3f 92       	push	r3
    8484:	4f 92       	push	r4
    8486:	5f 92       	push	r5
    8488:	6f 92       	push	r6
    848a:	7f 92       	push	r7
    848c:	8f 92       	push	r8
    848e:	9f 92       	push	r9
    8490:	af 92       	push	r10
    8492:	bf 92       	push	r11
    8494:	cf 92       	push	r12
    8496:	df 92       	push	r13
    8498:	ef 92       	push	r14
    849a:	ff 92       	push	r15
    849c:	0f 93       	push	r16
    849e:	1f 93       	push	r17
    84a0:	cf 93       	push	r28
    84a2:	df 93       	push	r29
    84a4:	cd b7       	in	r28, 0x3d	; 61
    84a6:	de b7       	in	r29, 0x3e	; 62
    84a8:	ca 1b       	sub	r28, r26
    84aa:	db 0b       	sbc	r29, r27
    84ac:	0f b6       	in	r0, 0x3f	; 63
    84ae:	f8 94       	cli
    84b0:	de bf       	out	0x3e, r29	; 62
    84b2:	0f be       	out	0x3f, r0	; 63
    84b4:	cd bf       	out	0x3d, r28	; 61
    84b6:	09 94       	ijmp

000084b8 <__epilogue_restores__>:
    84b8:	2a 88       	ldd	r2, Y+18	; 0x12
    84ba:	39 88       	ldd	r3, Y+17	; 0x11
    84bc:	48 88       	ldd	r4, Y+16	; 0x10
    84be:	5f 84       	ldd	r5, Y+15	; 0x0f
    84c0:	6e 84       	ldd	r6, Y+14	; 0x0e
    84c2:	7d 84       	ldd	r7, Y+13	; 0x0d
    84c4:	8c 84       	ldd	r8, Y+12	; 0x0c
    84c6:	9b 84       	ldd	r9, Y+11	; 0x0b
    84c8:	aa 84       	ldd	r10, Y+10	; 0x0a
    84ca:	b9 84       	ldd	r11, Y+9	; 0x09
    84cc:	c8 84       	ldd	r12, Y+8	; 0x08
    84ce:	df 80       	ldd	r13, Y+7	; 0x07
    84d0:	ee 80       	ldd	r14, Y+6	; 0x06
    84d2:	fd 80       	ldd	r15, Y+5	; 0x05
    84d4:	0c 81       	ldd	r16, Y+4	; 0x04
    84d6:	1b 81       	ldd	r17, Y+3	; 0x03
    84d8:	aa 81       	ldd	r26, Y+2	; 0x02
    84da:	b9 81       	ldd	r27, Y+1	; 0x01
    84dc:	ce 0f       	add	r28, r30
    84de:	d1 1d       	adc	r29, r1
    84e0:	0f b6       	in	r0, 0x3f	; 63
    84e2:	f8 94       	cli
    84e4:	de bf       	out	0x3e, r29	; 62
    84e6:	0f be       	out	0x3f, r0	; 63
    84e8:	cd bf       	out	0x3d, r28	; 61
    84ea:	ed 01       	movw	r28, r26
    84ec:	08 95       	ret

000084ee <__ashldi3>:
    84ee:	0f 93       	push	r16
    84f0:	08 30       	cpi	r16, 0x08	; 8
    84f2:	90 f0       	brcs	.+36     	; 0x8518 <__ashldi3+0x2a>
    84f4:	98 2f       	mov	r25, r24
    84f6:	87 2f       	mov	r24, r23
    84f8:	76 2f       	mov	r23, r22
    84fa:	65 2f       	mov	r22, r21
    84fc:	54 2f       	mov	r21, r20
    84fe:	43 2f       	mov	r20, r19
    8500:	32 2f       	mov	r19, r18
    8502:	22 27       	eor	r18, r18
    8504:	08 50       	subi	r16, 0x08	; 8
    8506:	f4 cf       	rjmp	.-24     	; 0x84f0 <__ashldi3+0x2>
    8508:	22 0f       	add	r18, r18
    850a:	33 1f       	adc	r19, r19
    850c:	44 1f       	adc	r20, r20
    850e:	55 1f       	adc	r21, r21
    8510:	66 1f       	adc	r22, r22
    8512:	77 1f       	adc	r23, r23
    8514:	88 1f       	adc	r24, r24
    8516:	99 1f       	adc	r25, r25
    8518:	0a 95       	dec	r16
    851a:	b2 f7       	brpl	.-20     	; 0x8508 <__ashldi3+0x1a>
    851c:	0f 91       	pop	r16
    851e:	08 95       	ret

00008520 <__ashrdi3>:
    8520:	97 fb       	bst	r25, 7
    8522:	10 f8       	bld	r1, 0

00008524 <__lshrdi3>:
    8524:	16 94       	lsr	r1
    8526:	00 08       	sbc	r0, r0
    8528:	0f 93       	push	r16
    852a:	08 30       	cpi	r16, 0x08	; 8
    852c:	98 f0       	brcs	.+38     	; 0x8554 <__lshrdi3+0x30>
    852e:	08 50       	subi	r16, 0x08	; 8
    8530:	23 2f       	mov	r18, r19
    8532:	34 2f       	mov	r19, r20
    8534:	45 2f       	mov	r20, r21
    8536:	56 2f       	mov	r21, r22
    8538:	67 2f       	mov	r22, r23
    853a:	78 2f       	mov	r23, r24
    853c:	89 2f       	mov	r24, r25
    853e:	90 2d       	mov	r25, r0
    8540:	f4 cf       	rjmp	.-24     	; 0x852a <__lshrdi3+0x6>
    8542:	05 94       	asr	r0
    8544:	97 95       	ror	r25
    8546:	87 95       	ror	r24
    8548:	77 95       	ror	r23
    854a:	67 95       	ror	r22
    854c:	57 95       	ror	r21
    854e:	47 95       	ror	r20
    8550:	37 95       	ror	r19
    8552:	27 95       	ror	r18
    8554:	0a 95       	dec	r16
    8556:	aa f7       	brpl	.-22     	; 0x8542 <__lshrdi3+0x1e>
    8558:	0f 91       	pop	r16
    855a:	08 95       	ret

0000855c <__adddi3>:
    855c:	2a 0d       	add	r18, r10
    855e:	3b 1d       	adc	r19, r11
    8560:	4c 1d       	adc	r20, r12
    8562:	5d 1d       	adc	r21, r13
    8564:	6e 1d       	adc	r22, r14
    8566:	7f 1d       	adc	r23, r15
    8568:	80 1f       	adc	r24, r16
    856a:	91 1f       	adc	r25, r17
    856c:	08 95       	ret

0000856e <__cmpdi2_s8>:
    856e:	00 24       	eor	r0, r0
    8570:	a7 fd       	sbrc	r26, 7
    8572:	00 94       	com	r0
    8574:	2a 17       	cp	r18, r26
    8576:	30 05       	cpc	r19, r0
    8578:	40 05       	cpc	r20, r0
    857a:	50 05       	cpc	r21, r0
    857c:	60 05       	cpc	r22, r0
    857e:	70 05       	cpc	r23, r0
    8580:	80 05       	cpc	r24, r0
    8582:	90 05       	cpc	r25, r0
    8584:	08 95       	ret

00008586 <dtostrf>:
    8586:	ef 92       	push	r14
    8588:	0f 93       	push	r16
    858a:	1f 93       	push	r17
    858c:	cf 93       	push	r28
    858e:	df 93       	push	r29
    8590:	e8 01       	movw	r28, r16
    8592:	47 fd       	sbrc	r20, 7
    8594:	02 c0       	rjmp	.+4      	; 0x859a <dtostrf+0x14>
    8596:	34 e0       	ldi	r19, 0x04	; 4
    8598:	01 c0       	rjmp	.+2      	; 0x859c <dtostrf+0x16>
    859a:	34 e1       	ldi	r19, 0x14	; 20
    859c:	04 2e       	mov	r0, r20
    859e:	00 0c       	add	r0, r0
    85a0:	55 0b       	sbc	r21, r21
    85a2:	57 ff       	sbrs	r21, 7
    85a4:	03 c0       	rjmp	.+6      	; 0x85ac <dtostrf+0x26>
    85a6:	51 95       	neg	r21
    85a8:	41 95       	neg	r20
    85aa:	51 09       	sbc	r21, r1
    85ac:	e3 2e       	mov	r14, r19
    85ae:	02 2f       	mov	r16, r18
    85b0:	24 2f       	mov	r18, r20
    85b2:	ae 01       	movw	r20, r28
    85b4:	a1 d2       	rcall	.+1346   	; 0x8af8 <dtoa_prf>
    85b6:	ce 01       	movw	r24, r28
    85b8:	df 91       	pop	r29
    85ba:	cf 91       	pop	r28
    85bc:	1f 91       	pop	r17
    85be:	0f 91       	pop	r16
    85c0:	ef 90       	pop	r14
    85c2:	08 95       	ret

000085c4 <malloc>:
    85c4:	0f 93       	push	r16
    85c6:	1f 93       	push	r17
    85c8:	cf 93       	push	r28
    85ca:	df 93       	push	r29
    85cc:	82 30       	cpi	r24, 0x02	; 2
    85ce:	91 05       	cpc	r25, r1
    85d0:	10 f4       	brcc	.+4      	; 0x85d6 <malloc+0x12>
    85d2:	82 e0       	ldi	r24, 0x02	; 2
    85d4:	90 e0       	ldi	r25, 0x00	; 0
    85d6:	e0 91 fd 0d 	lds	r30, 0x0DFD	; 0x800dfd <__flp>
    85da:	f0 91 fe 0d 	lds	r31, 0x0DFE	; 0x800dfe <__flp+0x1>
    85de:	20 e0       	ldi	r18, 0x00	; 0
    85e0:	30 e0       	ldi	r19, 0x00	; 0
    85e2:	a0 e0       	ldi	r26, 0x00	; 0
    85e4:	b0 e0       	ldi	r27, 0x00	; 0
    85e6:	30 97       	sbiw	r30, 0x00	; 0
    85e8:	19 f1       	breq	.+70     	; 0x8630 <malloc+0x6c>
    85ea:	40 81       	ld	r20, Z
    85ec:	51 81       	ldd	r21, Z+1	; 0x01
    85ee:	02 81       	ldd	r16, Z+2	; 0x02
    85f0:	13 81       	ldd	r17, Z+3	; 0x03
    85f2:	48 17       	cp	r20, r24
    85f4:	59 07       	cpc	r21, r25
    85f6:	c8 f0       	brcs	.+50     	; 0x862a <malloc+0x66>
    85f8:	84 17       	cp	r24, r20
    85fa:	95 07       	cpc	r25, r21
    85fc:	69 f4       	brne	.+26     	; 0x8618 <malloc+0x54>
    85fe:	10 97       	sbiw	r26, 0x00	; 0
    8600:	31 f0       	breq	.+12     	; 0x860e <malloc+0x4a>
    8602:	12 96       	adiw	r26, 0x02	; 2
    8604:	0c 93       	st	X, r16
    8606:	12 97       	sbiw	r26, 0x02	; 2
    8608:	13 96       	adiw	r26, 0x03	; 3
    860a:	1c 93       	st	X, r17
    860c:	27 c0       	rjmp	.+78     	; 0x865c <malloc+0x98>
    860e:	00 93 fd 0d 	sts	0x0DFD, r16	; 0x800dfd <__flp>
    8612:	10 93 fe 0d 	sts	0x0DFE, r17	; 0x800dfe <__flp+0x1>
    8616:	22 c0       	rjmp	.+68     	; 0x865c <malloc+0x98>
    8618:	21 15       	cp	r18, r1
    861a:	31 05       	cpc	r19, r1
    861c:	19 f0       	breq	.+6      	; 0x8624 <malloc+0x60>
    861e:	42 17       	cp	r20, r18
    8620:	53 07       	cpc	r21, r19
    8622:	18 f4       	brcc	.+6      	; 0x862a <malloc+0x66>
    8624:	9a 01       	movw	r18, r20
    8626:	bd 01       	movw	r22, r26
    8628:	ef 01       	movw	r28, r30
    862a:	df 01       	movw	r26, r30
    862c:	f8 01       	movw	r30, r16
    862e:	db cf       	rjmp	.-74     	; 0x85e6 <malloc+0x22>
    8630:	21 15       	cp	r18, r1
    8632:	31 05       	cpc	r19, r1
    8634:	f9 f0       	breq	.+62     	; 0x8674 <malloc+0xb0>
    8636:	28 1b       	sub	r18, r24
    8638:	39 0b       	sbc	r19, r25
    863a:	24 30       	cpi	r18, 0x04	; 4
    863c:	31 05       	cpc	r19, r1
    863e:	80 f4       	brcc	.+32     	; 0x8660 <malloc+0x9c>
    8640:	8a 81       	ldd	r24, Y+2	; 0x02
    8642:	9b 81       	ldd	r25, Y+3	; 0x03
    8644:	61 15       	cp	r22, r1
    8646:	71 05       	cpc	r23, r1
    8648:	21 f0       	breq	.+8      	; 0x8652 <malloc+0x8e>
    864a:	fb 01       	movw	r30, r22
    864c:	93 83       	std	Z+3, r25	; 0x03
    864e:	82 83       	std	Z+2, r24	; 0x02
    8650:	04 c0       	rjmp	.+8      	; 0x865a <malloc+0x96>
    8652:	90 93 fe 0d 	sts	0x0DFE, r25	; 0x800dfe <__flp+0x1>
    8656:	80 93 fd 0d 	sts	0x0DFD, r24	; 0x800dfd <__flp>
    865a:	fe 01       	movw	r30, r28
    865c:	32 96       	adiw	r30, 0x02	; 2
    865e:	44 c0       	rjmp	.+136    	; 0x86e8 <malloc+0x124>
    8660:	fe 01       	movw	r30, r28
    8662:	e2 0f       	add	r30, r18
    8664:	f3 1f       	adc	r31, r19
    8666:	81 93       	st	Z+, r24
    8668:	91 93       	st	Z+, r25
    866a:	22 50       	subi	r18, 0x02	; 2
    866c:	31 09       	sbc	r19, r1
    866e:	39 83       	std	Y+1, r19	; 0x01
    8670:	28 83       	st	Y, r18
    8672:	3a c0       	rjmp	.+116    	; 0x86e8 <malloc+0x124>
    8674:	20 91 fb 0d 	lds	r18, 0x0DFB	; 0x800dfb <__brkval>
    8678:	30 91 fc 0d 	lds	r19, 0x0DFC	; 0x800dfc <__brkval+0x1>
    867c:	23 2b       	or	r18, r19
    867e:	41 f4       	brne	.+16     	; 0x8690 <malloc+0xcc>
    8680:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    8684:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    8688:	30 93 fc 0d 	sts	0x0DFC, r19	; 0x800dfc <__brkval+0x1>
    868c:	20 93 fb 0d 	sts	0x0DFB, r18	; 0x800dfb <__brkval>
    8690:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    8694:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    8698:	21 15       	cp	r18, r1
    869a:	31 05       	cpc	r19, r1
    869c:	41 f4       	brne	.+16     	; 0x86ae <malloc+0xea>
    869e:	2d b7       	in	r18, 0x3d	; 61
    86a0:	3e b7       	in	r19, 0x3e	; 62
    86a2:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    86a6:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    86aa:	24 1b       	sub	r18, r20
    86ac:	35 0b       	sbc	r19, r21
    86ae:	e0 91 fb 0d 	lds	r30, 0x0DFB	; 0x800dfb <__brkval>
    86b2:	f0 91 fc 0d 	lds	r31, 0x0DFC	; 0x800dfc <__brkval+0x1>
    86b6:	e2 17       	cp	r30, r18
    86b8:	f3 07       	cpc	r31, r19
    86ba:	a0 f4       	brcc	.+40     	; 0x86e4 <malloc+0x120>
    86bc:	2e 1b       	sub	r18, r30
    86be:	3f 0b       	sbc	r19, r31
    86c0:	28 17       	cp	r18, r24
    86c2:	39 07       	cpc	r19, r25
    86c4:	78 f0       	brcs	.+30     	; 0x86e4 <malloc+0x120>
    86c6:	ac 01       	movw	r20, r24
    86c8:	4e 5f       	subi	r20, 0xFE	; 254
    86ca:	5f 4f       	sbci	r21, 0xFF	; 255
    86cc:	24 17       	cp	r18, r20
    86ce:	35 07       	cpc	r19, r21
    86d0:	48 f0       	brcs	.+18     	; 0x86e4 <malloc+0x120>
    86d2:	4e 0f       	add	r20, r30
    86d4:	5f 1f       	adc	r21, r31
    86d6:	50 93 fc 0d 	sts	0x0DFC, r21	; 0x800dfc <__brkval+0x1>
    86da:	40 93 fb 0d 	sts	0x0DFB, r20	; 0x800dfb <__brkval>
    86de:	81 93       	st	Z+, r24
    86e0:	91 93       	st	Z+, r25
    86e2:	02 c0       	rjmp	.+4      	; 0x86e8 <malloc+0x124>
    86e4:	e0 e0       	ldi	r30, 0x00	; 0
    86e6:	f0 e0       	ldi	r31, 0x00	; 0
    86e8:	cf 01       	movw	r24, r30
    86ea:	df 91       	pop	r29
    86ec:	cf 91       	pop	r28
    86ee:	1f 91       	pop	r17
    86f0:	0f 91       	pop	r16
    86f2:	08 95       	ret

000086f4 <free>:
    86f4:	cf 93       	push	r28
    86f6:	df 93       	push	r29
    86f8:	00 97       	sbiw	r24, 0x00	; 0
    86fa:	09 f4       	brne	.+2      	; 0x86fe <free+0xa>
    86fc:	81 c0       	rjmp	.+258    	; 0x8800 <free+0x10c>
    86fe:	fc 01       	movw	r30, r24
    8700:	32 97       	sbiw	r30, 0x02	; 2
    8702:	13 82       	std	Z+3, r1	; 0x03
    8704:	12 82       	std	Z+2, r1	; 0x02
    8706:	a0 91 fd 0d 	lds	r26, 0x0DFD	; 0x800dfd <__flp>
    870a:	b0 91 fe 0d 	lds	r27, 0x0DFE	; 0x800dfe <__flp+0x1>
    870e:	10 97       	sbiw	r26, 0x00	; 0
    8710:	81 f4       	brne	.+32     	; 0x8732 <free+0x3e>
    8712:	20 81       	ld	r18, Z
    8714:	31 81       	ldd	r19, Z+1	; 0x01
    8716:	82 0f       	add	r24, r18
    8718:	93 1f       	adc	r25, r19
    871a:	20 91 fb 0d 	lds	r18, 0x0DFB	; 0x800dfb <__brkval>
    871e:	30 91 fc 0d 	lds	r19, 0x0DFC	; 0x800dfc <__brkval+0x1>
    8722:	28 17       	cp	r18, r24
    8724:	39 07       	cpc	r19, r25
    8726:	51 f5       	brne	.+84     	; 0x877c <free+0x88>
    8728:	f0 93 fc 0d 	sts	0x0DFC, r31	; 0x800dfc <__brkval+0x1>
    872c:	e0 93 fb 0d 	sts	0x0DFB, r30	; 0x800dfb <__brkval>
    8730:	67 c0       	rjmp	.+206    	; 0x8800 <free+0x10c>
    8732:	ed 01       	movw	r28, r26
    8734:	20 e0       	ldi	r18, 0x00	; 0
    8736:	30 e0       	ldi	r19, 0x00	; 0
    8738:	ce 17       	cp	r28, r30
    873a:	df 07       	cpc	r29, r31
    873c:	40 f4       	brcc	.+16     	; 0x874e <free+0x5a>
    873e:	4a 81       	ldd	r20, Y+2	; 0x02
    8740:	5b 81       	ldd	r21, Y+3	; 0x03
    8742:	9e 01       	movw	r18, r28
    8744:	41 15       	cp	r20, r1
    8746:	51 05       	cpc	r21, r1
    8748:	f1 f0       	breq	.+60     	; 0x8786 <free+0x92>
    874a:	ea 01       	movw	r28, r20
    874c:	f5 cf       	rjmp	.-22     	; 0x8738 <free+0x44>
    874e:	d3 83       	std	Z+3, r29	; 0x03
    8750:	c2 83       	std	Z+2, r28	; 0x02
    8752:	40 81       	ld	r20, Z
    8754:	51 81       	ldd	r21, Z+1	; 0x01
    8756:	84 0f       	add	r24, r20
    8758:	95 1f       	adc	r25, r21
    875a:	c8 17       	cp	r28, r24
    875c:	d9 07       	cpc	r29, r25
    875e:	59 f4       	brne	.+22     	; 0x8776 <free+0x82>
    8760:	88 81       	ld	r24, Y
    8762:	99 81       	ldd	r25, Y+1	; 0x01
    8764:	84 0f       	add	r24, r20
    8766:	95 1f       	adc	r25, r21
    8768:	02 96       	adiw	r24, 0x02	; 2
    876a:	91 83       	std	Z+1, r25	; 0x01
    876c:	80 83       	st	Z, r24
    876e:	8a 81       	ldd	r24, Y+2	; 0x02
    8770:	9b 81       	ldd	r25, Y+3	; 0x03
    8772:	93 83       	std	Z+3, r25	; 0x03
    8774:	82 83       	std	Z+2, r24	; 0x02
    8776:	21 15       	cp	r18, r1
    8778:	31 05       	cpc	r19, r1
    877a:	29 f4       	brne	.+10     	; 0x8786 <free+0x92>
    877c:	f0 93 fe 0d 	sts	0x0DFE, r31	; 0x800dfe <__flp+0x1>
    8780:	e0 93 fd 0d 	sts	0x0DFD, r30	; 0x800dfd <__flp>
    8784:	3d c0       	rjmp	.+122    	; 0x8800 <free+0x10c>
    8786:	e9 01       	movw	r28, r18
    8788:	fb 83       	std	Y+3, r31	; 0x03
    878a:	ea 83       	std	Y+2, r30	; 0x02
    878c:	49 91       	ld	r20, Y+
    878e:	59 91       	ld	r21, Y+
    8790:	c4 0f       	add	r28, r20
    8792:	d5 1f       	adc	r29, r21
    8794:	ec 17       	cp	r30, r28
    8796:	fd 07       	cpc	r31, r29
    8798:	61 f4       	brne	.+24     	; 0x87b2 <free+0xbe>
    879a:	80 81       	ld	r24, Z
    879c:	91 81       	ldd	r25, Z+1	; 0x01
    879e:	84 0f       	add	r24, r20
    87a0:	95 1f       	adc	r25, r21
    87a2:	02 96       	adiw	r24, 0x02	; 2
    87a4:	e9 01       	movw	r28, r18
    87a6:	99 83       	std	Y+1, r25	; 0x01
    87a8:	88 83       	st	Y, r24
    87aa:	82 81       	ldd	r24, Z+2	; 0x02
    87ac:	93 81       	ldd	r25, Z+3	; 0x03
    87ae:	9b 83       	std	Y+3, r25	; 0x03
    87b0:	8a 83       	std	Y+2, r24	; 0x02
    87b2:	e0 e0       	ldi	r30, 0x00	; 0
    87b4:	f0 e0       	ldi	r31, 0x00	; 0
    87b6:	12 96       	adiw	r26, 0x02	; 2
    87b8:	8d 91       	ld	r24, X+
    87ba:	9c 91       	ld	r25, X
    87bc:	13 97       	sbiw	r26, 0x03	; 3
    87be:	00 97       	sbiw	r24, 0x00	; 0
    87c0:	19 f0       	breq	.+6      	; 0x87c8 <free+0xd4>
    87c2:	fd 01       	movw	r30, r26
    87c4:	dc 01       	movw	r26, r24
    87c6:	f7 cf       	rjmp	.-18     	; 0x87b6 <free+0xc2>
    87c8:	8d 91       	ld	r24, X+
    87ca:	9c 91       	ld	r25, X
    87cc:	11 97       	sbiw	r26, 0x01	; 1
    87ce:	9d 01       	movw	r18, r26
    87d0:	2e 5f       	subi	r18, 0xFE	; 254
    87d2:	3f 4f       	sbci	r19, 0xFF	; 255
    87d4:	82 0f       	add	r24, r18
    87d6:	93 1f       	adc	r25, r19
    87d8:	20 91 fb 0d 	lds	r18, 0x0DFB	; 0x800dfb <__brkval>
    87dc:	30 91 fc 0d 	lds	r19, 0x0DFC	; 0x800dfc <__brkval+0x1>
    87e0:	28 17       	cp	r18, r24
    87e2:	39 07       	cpc	r19, r25
    87e4:	69 f4       	brne	.+26     	; 0x8800 <free+0x10c>
    87e6:	30 97       	sbiw	r30, 0x00	; 0
    87e8:	29 f4       	brne	.+10     	; 0x87f4 <free+0x100>
    87ea:	10 92 fe 0d 	sts	0x0DFE, r1	; 0x800dfe <__flp+0x1>
    87ee:	10 92 fd 0d 	sts	0x0DFD, r1	; 0x800dfd <__flp>
    87f2:	02 c0       	rjmp	.+4      	; 0x87f8 <free+0x104>
    87f4:	13 82       	std	Z+3, r1	; 0x03
    87f6:	12 82       	std	Z+2, r1	; 0x02
    87f8:	b0 93 fc 0d 	sts	0x0DFC, r27	; 0x800dfc <__brkval+0x1>
    87fc:	a0 93 fb 0d 	sts	0x0DFB, r26	; 0x800dfb <__brkval>
    8800:	df 91       	pop	r29
    8802:	cf 91       	pop	r28
    8804:	08 95       	ret

00008806 <realloc>:
    8806:	6f 92       	push	r6
    8808:	7f 92       	push	r7
    880a:	8f 92       	push	r8
    880c:	9f 92       	push	r9
    880e:	af 92       	push	r10
    8810:	bf 92       	push	r11
    8812:	cf 92       	push	r12
    8814:	df 92       	push	r13
    8816:	ef 92       	push	r14
    8818:	ff 92       	push	r15
    881a:	0f 93       	push	r16
    881c:	1f 93       	push	r17
    881e:	cf 93       	push	r28
    8820:	df 93       	push	r29
    8822:	00 97       	sbiw	r24, 0x00	; 0
    8824:	81 f4       	brne	.+32     	; 0x8846 <realloc+0x40>
    8826:	cb 01       	movw	r24, r22
    8828:	df 91       	pop	r29
    882a:	cf 91       	pop	r28
    882c:	1f 91       	pop	r17
    882e:	0f 91       	pop	r16
    8830:	ff 90       	pop	r15
    8832:	ef 90       	pop	r14
    8834:	df 90       	pop	r13
    8836:	cf 90       	pop	r12
    8838:	bf 90       	pop	r11
    883a:	af 90       	pop	r10
    883c:	9f 90       	pop	r9
    883e:	8f 90       	pop	r8
    8840:	7f 90       	pop	r7
    8842:	6f 90       	pop	r6
    8844:	bf ce       	rjmp	.-642    	; 0x85c4 <malloc>
    8846:	fc 01       	movw	r30, r24
    8848:	e6 0f       	add	r30, r22
    884a:	f7 1f       	adc	r31, r23
    884c:	9c 01       	movw	r18, r24
    884e:	22 50       	subi	r18, 0x02	; 2
    8850:	31 09       	sbc	r19, r1
    8852:	e2 17       	cp	r30, r18
    8854:	f3 07       	cpc	r31, r19
    8856:	08 f4       	brcc	.+2      	; 0x885a <realloc+0x54>
    8858:	a5 c0       	rjmp	.+330    	; 0x89a4 <realloc+0x19e>
    885a:	ec 01       	movw	r28, r24
    885c:	d9 01       	movw	r26, r18
    885e:	0d 91       	ld	r16, X+
    8860:	1c 91       	ld	r17, X
    8862:	11 97       	sbiw	r26, 0x01	; 1
    8864:	06 17       	cp	r16, r22
    8866:	17 07       	cpc	r17, r23
    8868:	a8 f0       	brcs	.+42     	; 0x8894 <realloc+0x8e>
    886a:	05 30       	cpi	r16, 0x05	; 5
    886c:	11 05       	cpc	r17, r1
    886e:	08 f4       	brcc	.+2      	; 0x8872 <realloc+0x6c>
    8870:	97 c0       	rjmp	.+302    	; 0x89a0 <realloc+0x19a>
    8872:	c8 01       	movw	r24, r16
    8874:	04 97       	sbiw	r24, 0x04	; 4
    8876:	86 17       	cp	r24, r22
    8878:	97 07       	cpc	r25, r23
    887a:	08 f4       	brcc	.+2      	; 0x887e <realloc+0x78>
    887c:	91 c0       	rjmp	.+290    	; 0x89a0 <realloc+0x19a>
    887e:	02 50       	subi	r16, 0x02	; 2
    8880:	11 09       	sbc	r17, r1
    8882:	06 1b       	sub	r16, r22
    8884:	17 0b       	sbc	r17, r23
    8886:	01 93       	st	Z+, r16
    8888:	11 93       	st	Z+, r17
    888a:	6d 93       	st	X+, r22
    888c:	7c 93       	st	X, r23
    888e:	cf 01       	movw	r24, r30
    8890:	31 df       	rcall	.-414    	; 0x86f4 <free>
    8892:	86 c0       	rjmp	.+268    	; 0x89a0 <realloc+0x19a>
    8894:	5b 01       	movw	r10, r22
    8896:	a0 1a       	sub	r10, r16
    8898:	b1 0a       	sbc	r11, r17
    889a:	4c 01       	movw	r8, r24
    889c:	80 0e       	add	r8, r16
    889e:	91 1e       	adc	r9, r17
    88a0:	a0 91 fd 0d 	lds	r26, 0x0DFD	; 0x800dfd <__flp>
    88a4:	b0 91 fe 0d 	lds	r27, 0x0DFE	; 0x800dfe <__flp+0x1>
    88a8:	61 2c       	mov	r6, r1
    88aa:	71 2c       	mov	r7, r1
    88ac:	e1 2c       	mov	r14, r1
    88ae:	f1 2c       	mov	r15, r1
    88b0:	10 97       	sbiw	r26, 0x00	; 0
    88b2:	09 f4       	brne	.+2      	; 0x88b6 <realloc+0xb0>
    88b4:	46 c0       	rjmp	.+140    	; 0x8942 <realloc+0x13c>
    88b6:	8d 91       	ld	r24, X+
    88b8:	9c 91       	ld	r25, X
    88ba:	11 97       	sbiw	r26, 0x01	; 1
    88bc:	a8 15       	cp	r26, r8
    88be:	b9 05       	cpc	r27, r9
    88c0:	b1 f5       	brne	.+108    	; 0x892e <realloc+0x128>
    88c2:	6c 01       	movw	r12, r24
    88c4:	42 e0       	ldi	r20, 0x02	; 2
    88c6:	c4 0e       	add	r12, r20
    88c8:	d1 1c       	adc	r13, r1
    88ca:	ca 14       	cp	r12, r10
    88cc:	db 04       	cpc	r13, r11
    88ce:	78 f1       	brcs	.+94     	; 0x892e <realloc+0x128>
    88d0:	4c 01       	movw	r8, r24
    88d2:	8a 18       	sub	r8, r10
    88d4:	9b 08       	sbc	r9, r11
    88d6:	64 01       	movw	r12, r8
    88d8:	42 e0       	ldi	r20, 0x02	; 2
    88da:	c4 0e       	add	r12, r20
    88dc:	d1 1c       	adc	r13, r1
    88de:	12 96       	adiw	r26, 0x02	; 2
    88e0:	bc 90       	ld	r11, X
    88e2:	12 97       	sbiw	r26, 0x02	; 2
    88e4:	13 96       	adiw	r26, 0x03	; 3
    88e6:	ac 91       	ld	r26, X
    88e8:	b5 e0       	ldi	r27, 0x05	; 5
    88ea:	cb 16       	cp	r12, r27
    88ec:	d1 04       	cpc	r13, r1
    88ee:	40 f0       	brcs	.+16     	; 0x8900 <realloc+0xfa>
    88f0:	b2 82       	std	Z+2, r11	; 0x02
    88f2:	a3 83       	std	Z+3, r26	; 0x03
    88f4:	91 82       	std	Z+1, r9	; 0x01
    88f6:	80 82       	st	Z, r8
    88f8:	d9 01       	movw	r26, r18
    88fa:	6d 93       	st	X+, r22
    88fc:	7c 93       	st	X, r23
    88fe:	09 c0       	rjmp	.+18     	; 0x8912 <realloc+0x10c>
    8900:	0e 5f       	subi	r16, 0xFE	; 254
    8902:	1f 4f       	sbci	r17, 0xFF	; 255
    8904:	80 0f       	add	r24, r16
    8906:	91 1f       	adc	r25, r17
    8908:	f9 01       	movw	r30, r18
    890a:	91 83       	std	Z+1, r25	; 0x01
    890c:	80 83       	st	Z, r24
    890e:	eb 2d       	mov	r30, r11
    8910:	fa 2f       	mov	r31, r26
    8912:	e1 14       	cp	r14, r1
    8914:	f1 04       	cpc	r15, r1
    8916:	31 f0       	breq	.+12     	; 0x8924 <realloc+0x11e>
    8918:	d7 01       	movw	r26, r14
    891a:	13 96       	adiw	r26, 0x03	; 3
    891c:	fc 93       	st	X, r31
    891e:	ee 93       	st	-X, r30
    8920:	12 97       	sbiw	r26, 0x02	; 2
    8922:	3e c0       	rjmp	.+124    	; 0x89a0 <realloc+0x19a>
    8924:	f0 93 fe 0d 	sts	0x0DFE, r31	; 0x800dfe <__flp+0x1>
    8928:	e0 93 fd 0d 	sts	0x0DFD, r30	; 0x800dfd <__flp>
    892c:	39 c0       	rjmp	.+114    	; 0x89a0 <realloc+0x19a>
    892e:	68 16       	cp	r6, r24
    8930:	79 06       	cpc	r7, r25
    8932:	08 f4       	brcc	.+2      	; 0x8936 <realloc+0x130>
    8934:	3c 01       	movw	r6, r24
    8936:	7d 01       	movw	r14, r26
    8938:	12 96       	adiw	r26, 0x02	; 2
    893a:	0d 90       	ld	r0, X+
    893c:	bc 91       	ld	r27, X
    893e:	a0 2d       	mov	r26, r0
    8940:	b7 cf       	rjmp	.-146    	; 0x88b0 <realloc+0xaa>
    8942:	80 91 fb 0d 	lds	r24, 0x0DFB	; 0x800dfb <__brkval>
    8946:	90 91 fc 0d 	lds	r25, 0x0DFC	; 0x800dfc <__brkval+0x1>
    894a:	88 16       	cp	r8, r24
    894c:	99 06       	cpc	r9, r25
    894e:	e1 f4       	brne	.+56     	; 0x8988 <realloc+0x182>
    8950:	66 16       	cp	r6, r22
    8952:	77 06       	cpc	r7, r23
    8954:	c8 f4       	brcc	.+50     	; 0x8988 <realloc+0x182>
    8956:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    895a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    895e:	00 97       	sbiw	r24, 0x00	; 0
    8960:	41 f4       	brne	.+16     	; 0x8972 <realloc+0x16c>
    8962:	8d b7       	in	r24, 0x3d	; 61
    8964:	9e b7       	in	r25, 0x3e	; 62
    8966:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    896a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    896e:	84 1b       	sub	r24, r20
    8970:	95 0b       	sbc	r25, r21
    8972:	e8 17       	cp	r30, r24
    8974:	f9 07       	cpc	r31, r25
    8976:	b0 f4       	brcc	.+44     	; 0x89a4 <realloc+0x19e>
    8978:	f0 93 fc 0d 	sts	0x0DFC, r31	; 0x800dfc <__brkval+0x1>
    897c:	e0 93 fb 0d 	sts	0x0DFB, r30	; 0x800dfb <__brkval>
    8980:	f9 01       	movw	r30, r18
    8982:	71 83       	std	Z+1, r23	; 0x01
    8984:	60 83       	st	Z, r22
    8986:	0c c0       	rjmp	.+24     	; 0x89a0 <realloc+0x19a>
    8988:	cb 01       	movw	r24, r22
    898a:	1c de       	rcall	.-968    	; 0x85c4 <malloc>
    898c:	7c 01       	movw	r14, r24
    898e:	00 97       	sbiw	r24, 0x00	; 0
    8990:	49 f0       	breq	.+18     	; 0x89a4 <realloc+0x19e>
    8992:	a8 01       	movw	r20, r16
    8994:	be 01       	movw	r22, r28
    8996:	2c d0       	rcall	.+88     	; 0x89f0 <memcpy>
    8998:	ce 01       	movw	r24, r28
    899a:	ac de       	rcall	.-680    	; 0x86f4 <free>
    899c:	c7 01       	movw	r24, r14
    899e:	04 c0       	rjmp	.+8      	; 0x89a8 <realloc+0x1a2>
    89a0:	ce 01       	movw	r24, r28
    89a2:	02 c0       	rjmp	.+4      	; 0x89a8 <realloc+0x1a2>
    89a4:	80 e0       	ldi	r24, 0x00	; 0
    89a6:	90 e0       	ldi	r25, 0x00	; 0
    89a8:	df 91       	pop	r29
    89aa:	cf 91       	pop	r28
    89ac:	1f 91       	pop	r17
    89ae:	0f 91       	pop	r16
    89b0:	ff 90       	pop	r15
    89b2:	ef 90       	pop	r14
    89b4:	df 90       	pop	r13
    89b6:	cf 90       	pop	r12
    89b8:	bf 90       	pop	r11
    89ba:	af 90       	pop	r10
    89bc:	9f 90       	pop	r9
    89be:	8f 90       	pop	r8
    89c0:	7f 90       	pop	r7
    89c2:	6f 90       	pop	r6
    89c4:	08 95       	ret

000089c6 <abort>:
    89c6:	81 e0       	ldi	r24, 0x01	; 1
    89c8:	90 e0       	ldi	r25, 0x00	; 0
    89ca:	f8 94       	cli
    89cc:	f6 c2       	rjmp	.+1516   	; 0x8fba <__do_global_dtors>

000089ce <isspace>:
    89ce:	91 11       	cpse	r25, r1
    89d0:	e1 c2       	rjmp	.+1474   	; 0x8f94 <__ctype_isfalse>
    89d2:	80 32       	cpi	r24, 0x20	; 32
    89d4:	19 f0       	breq	.+6      	; 0x89dc <isspace+0xe>
    89d6:	89 50       	subi	r24, 0x09	; 9
    89d8:	85 50       	subi	r24, 0x05	; 5
    89da:	d0 f7       	brcc	.-12     	; 0x89d0 <isspace+0x2>
    89dc:	08 95       	ret

000089de <memcpy_P>:
    89de:	fb 01       	movw	r30, r22
    89e0:	dc 01       	movw	r26, r24
    89e2:	02 c0       	rjmp	.+4      	; 0x89e8 <memcpy_P+0xa>
    89e4:	05 90       	lpm	r0, Z+
    89e6:	0d 92       	st	X+, r0
    89e8:	41 50       	subi	r20, 0x01	; 1
    89ea:	50 40       	sbci	r21, 0x00	; 0
    89ec:	d8 f7       	brcc	.-10     	; 0x89e4 <memcpy_P+0x6>
    89ee:	08 95       	ret

000089f0 <memcpy>:
    89f0:	fb 01       	movw	r30, r22
    89f2:	dc 01       	movw	r26, r24
    89f4:	02 c0       	rjmp	.+4      	; 0x89fa <memcpy+0xa>
    89f6:	01 90       	ld	r0, Z+
    89f8:	0d 92       	st	X+, r0
    89fa:	41 50       	subi	r20, 0x01	; 1
    89fc:	50 40       	sbci	r21, 0x00	; 0
    89fe:	d8 f7       	brcc	.-10     	; 0x89f6 <memcpy+0x6>
    8a00:	08 95       	ret

00008a02 <strcmp>:
    8a02:	fb 01       	movw	r30, r22
    8a04:	dc 01       	movw	r26, r24
    8a06:	8d 91       	ld	r24, X+
    8a08:	01 90       	ld	r0, Z+
    8a0a:	80 19       	sub	r24, r0
    8a0c:	01 10       	cpse	r0, r1
    8a0e:	d9 f3       	breq	.-10     	; 0x8a06 <strcmp+0x4>
    8a10:	99 0b       	sbc	r25, r25
    8a12:	08 95       	ret

00008a14 <strcpy>:
    8a14:	fb 01       	movw	r30, r22
    8a16:	dc 01       	movw	r26, r24
    8a18:	01 90       	ld	r0, Z+
    8a1a:	0d 92       	st	X+, r0
    8a1c:	00 20       	and	r0, r0
    8a1e:	e1 f7       	brne	.-8      	; 0x8a18 <strcpy+0x4>
    8a20:	08 95       	ret

00008a22 <strncmp>:
    8a22:	fb 01       	movw	r30, r22
    8a24:	dc 01       	movw	r26, r24
    8a26:	41 50       	subi	r20, 0x01	; 1
    8a28:	50 40       	sbci	r21, 0x00	; 0
    8a2a:	30 f0       	brcs	.+12     	; 0x8a38 <strncmp+0x16>
    8a2c:	8d 91       	ld	r24, X+
    8a2e:	01 90       	ld	r0, Z+
    8a30:	80 19       	sub	r24, r0
    8a32:	19 f4       	brne	.+6      	; 0x8a3a <strncmp+0x18>
    8a34:	00 20       	and	r0, r0
    8a36:	b9 f7       	brne	.-18     	; 0x8a26 <strncmp+0x4>
    8a38:	88 1b       	sub	r24, r24
    8a3a:	99 0b       	sbc	r25, r25
    8a3c:	08 95       	ret

00008a3e <strncpy>:
    8a3e:	fb 01       	movw	r30, r22
    8a40:	dc 01       	movw	r26, r24
    8a42:	41 50       	subi	r20, 0x01	; 1
    8a44:	50 40       	sbci	r21, 0x00	; 0
    8a46:	48 f0       	brcs	.+18     	; 0x8a5a <strncpy+0x1c>
    8a48:	01 90       	ld	r0, Z+
    8a4a:	0d 92       	st	X+, r0
    8a4c:	00 20       	and	r0, r0
    8a4e:	c9 f7       	brne	.-14     	; 0x8a42 <strncpy+0x4>
    8a50:	01 c0       	rjmp	.+2      	; 0x8a54 <strncpy+0x16>
    8a52:	1d 92       	st	X+, r1
    8a54:	41 50       	subi	r20, 0x01	; 1
    8a56:	50 40       	sbci	r21, 0x00	; 0
    8a58:	e0 f7       	brcc	.-8      	; 0x8a52 <strncpy+0x14>
    8a5a:	08 95       	ret

00008a5c <ultoa>:
    8a5c:	25 32       	cpi	r18, 0x25	; 37
    8a5e:	31 05       	cpc	r19, r1
    8a60:	18 f4       	brcc	.+6      	; 0x8a68 <ultoa+0xc>
    8a62:	22 30       	cpi	r18, 0x02	; 2
    8a64:	08 f0       	brcs	.+2      	; 0x8a68 <ultoa+0xc>
    8a66:	04 c0       	rjmp	.+8      	; 0x8a70 <__ultoa_ncheck>
    8a68:	fa 01       	movw	r30, r20
    8a6a:	10 82       	st	Z, r1
    8a6c:	ca 01       	movw	r24, r20
    8a6e:	08 95       	ret

00008a70 <__ultoa_ncheck>:
    8a70:	bb 27       	eor	r27, r27

00008a72 <__ultoa_common>:
    8a72:	fa 01       	movw	r30, r20
    8a74:	a6 2f       	mov	r26, r22
    8a76:	62 17       	cp	r22, r18
    8a78:	71 05       	cpc	r23, r1
    8a7a:	81 05       	cpc	r24, r1
    8a7c:	91 05       	cpc	r25, r1
    8a7e:	33 0b       	sbc	r19, r19
    8a80:	30 fb       	bst	r19, 0
    8a82:	66 f0       	brts	.+24     	; 0x8a9c <__ultoa_common+0x2a>
    8a84:	aa 27       	eor	r26, r26
    8a86:	66 0f       	add	r22, r22
    8a88:	77 1f       	adc	r23, r23
    8a8a:	88 1f       	adc	r24, r24
    8a8c:	99 1f       	adc	r25, r25
    8a8e:	aa 1f       	adc	r26, r26
    8a90:	a2 17       	cp	r26, r18
    8a92:	10 f0       	brcs	.+4      	; 0x8a98 <__ultoa_common+0x26>
    8a94:	a2 1b       	sub	r26, r18
    8a96:	63 95       	inc	r22
    8a98:	38 50       	subi	r19, 0x08	; 8
    8a9a:	a9 f7       	brne	.-22     	; 0x8a86 <__ultoa_common+0x14>
    8a9c:	a0 5d       	subi	r26, 0xD0	; 208
    8a9e:	aa 33       	cpi	r26, 0x3A	; 58
    8aa0:	08 f0       	brcs	.+2      	; 0x8aa4 <__ultoa_common+0x32>
    8aa2:	a9 5d       	subi	r26, 0xD9	; 217
    8aa4:	a1 93       	st	Z+, r26
    8aa6:	36 f7       	brtc	.-52     	; 0x8a74 <__ultoa_common+0x2>
    8aa8:	b1 11       	cpse	r27, r1
    8aaa:	b1 93       	st	Z+, r27
    8aac:	10 82       	st	Z, r1
    8aae:	ca 01       	movw	r24, r20
    8ab0:	74 c2       	rjmp	.+1256   	; 0x8f9a <strrev>

00008ab2 <utoa>:
    8ab2:	45 32       	cpi	r20, 0x25	; 37
    8ab4:	51 05       	cpc	r21, r1
    8ab6:	18 f4       	brcc	.+6      	; 0x8abe <utoa+0xc>
    8ab8:	42 30       	cpi	r20, 0x02	; 2
    8aba:	08 f0       	brcs	.+2      	; 0x8abe <utoa+0xc>
    8abc:	04 c0       	rjmp	.+8      	; 0x8ac6 <__utoa_ncheck>
    8abe:	fb 01       	movw	r30, r22
    8ac0:	10 82       	st	Z, r1
    8ac2:	cb 01       	movw	r24, r22
    8ac4:	08 95       	ret

00008ac6 <__utoa_ncheck>:
    8ac6:	bb 27       	eor	r27, r27

00008ac8 <__utoa_common>:
    8ac8:	fb 01       	movw	r30, r22
    8aca:	55 27       	eor	r21, r21
    8acc:	aa 27       	eor	r26, r26
    8ace:	88 0f       	add	r24, r24
    8ad0:	99 1f       	adc	r25, r25
    8ad2:	aa 1f       	adc	r26, r26
    8ad4:	a4 17       	cp	r26, r20
    8ad6:	10 f0       	brcs	.+4      	; 0x8adc <__utoa_common+0x14>
    8ad8:	a4 1b       	sub	r26, r20
    8ada:	83 95       	inc	r24
    8adc:	50 51       	subi	r21, 0x10	; 16
    8ade:	b9 f7       	brne	.-18     	; 0x8ace <__utoa_common+0x6>
    8ae0:	a0 5d       	subi	r26, 0xD0	; 208
    8ae2:	aa 33       	cpi	r26, 0x3A	; 58
    8ae4:	08 f0       	brcs	.+2      	; 0x8ae8 <__utoa_common+0x20>
    8ae6:	a9 5d       	subi	r26, 0xD9	; 217
    8ae8:	a1 93       	st	Z+, r26
    8aea:	00 97       	sbiw	r24, 0x00	; 0
    8aec:	79 f7       	brne	.-34     	; 0x8acc <__utoa_common+0x4>
    8aee:	b1 11       	cpse	r27, r1
    8af0:	b1 93       	st	Z+, r27
    8af2:	11 92       	st	Z+, r1
    8af4:	cb 01       	movw	r24, r22
    8af6:	51 c2       	rjmp	.+1186   	; 0x8f9a <strrev>

00008af8 <dtoa_prf>:
    8af8:	8f 92       	push	r8
    8afa:	9f 92       	push	r9
    8afc:	af 92       	push	r10
    8afe:	bf 92       	push	r11
    8b00:	cf 92       	push	r12
    8b02:	df 92       	push	r13
    8b04:	ef 92       	push	r14
    8b06:	ff 92       	push	r15
    8b08:	0f 93       	push	r16
    8b0a:	1f 93       	push	r17
    8b0c:	cf 93       	push	r28
    8b0e:	df 93       	push	r29
    8b10:	cd b7       	in	r28, 0x3d	; 61
    8b12:	de b7       	in	r29, 0x3e	; 62
    8b14:	29 97       	sbiw	r28, 0x09	; 9
    8b16:	0f b6       	in	r0, 0x3f	; 63
    8b18:	f8 94       	cli
    8b1a:	de bf       	out	0x3e, r29	; 62
    8b1c:	0f be       	out	0x3f, r0	; 63
    8b1e:	cd bf       	out	0x3d, r28	; 61
    8b20:	6a 01       	movw	r12, r20
    8b22:	12 2f       	mov	r17, r18
    8b24:	b0 2e       	mov	r11, r16
    8b26:	2b e3       	ldi	r18, 0x3B	; 59
    8b28:	20 17       	cp	r18, r16
    8b2a:	20 f0       	brcs	.+8      	; 0x8b34 <dtoa_prf+0x3c>
    8b2c:	ff 24       	eor	r15, r15
    8b2e:	f3 94       	inc	r15
    8b30:	f0 0e       	add	r15, r16
    8b32:	02 c0       	rjmp	.+4      	; 0x8b38 <dtoa_prf+0x40>
    8b34:	2c e3       	ldi	r18, 0x3C	; 60
    8b36:	f2 2e       	mov	r15, r18
    8b38:	0f 2d       	mov	r16, r15
    8b3a:	27 e0       	ldi	r18, 0x07	; 7
    8b3c:	ae 01       	movw	r20, r28
    8b3e:	4f 5f       	subi	r20, 0xFF	; 255
    8b40:	5f 4f       	sbci	r21, 0xFF	; 255
    8b42:	50 d1       	rcall	.+672    	; 0x8de4 <__ftoa_engine>
    8b44:	bc 01       	movw	r22, r24
    8b46:	49 81       	ldd	r20, Y+1	; 0x01
    8b48:	84 2f       	mov	r24, r20
    8b4a:	89 70       	andi	r24, 0x09	; 9
    8b4c:	81 30       	cpi	r24, 0x01	; 1
    8b4e:	31 f0       	breq	.+12     	; 0x8b5c <dtoa_prf+0x64>
    8b50:	e1 fc       	sbrc	r14, 1
    8b52:	06 c0       	rjmp	.+12     	; 0x8b60 <dtoa_prf+0x68>
    8b54:	e0 fe       	sbrs	r14, 0
    8b56:	06 c0       	rjmp	.+12     	; 0x8b64 <dtoa_prf+0x6c>
    8b58:	90 e2       	ldi	r25, 0x20	; 32
    8b5a:	05 c0       	rjmp	.+10     	; 0x8b66 <dtoa_prf+0x6e>
    8b5c:	9d e2       	ldi	r25, 0x2D	; 45
    8b5e:	03 c0       	rjmp	.+6      	; 0x8b66 <dtoa_prf+0x6e>
    8b60:	9b e2       	ldi	r25, 0x2B	; 43
    8b62:	01 c0       	rjmp	.+2      	; 0x8b66 <dtoa_prf+0x6e>
    8b64:	90 e0       	ldi	r25, 0x00	; 0
    8b66:	5e 2d       	mov	r21, r14
    8b68:	50 71       	andi	r21, 0x10	; 16
    8b6a:	43 ff       	sbrs	r20, 3
    8b6c:	3c c0       	rjmp	.+120    	; 0x8be6 <dtoa_prf+0xee>
    8b6e:	91 11       	cpse	r25, r1
    8b70:	02 c0       	rjmp	.+4      	; 0x8b76 <dtoa_prf+0x7e>
    8b72:	83 e0       	ldi	r24, 0x03	; 3
    8b74:	01 c0       	rjmp	.+2      	; 0x8b78 <dtoa_prf+0x80>
    8b76:	84 e0       	ldi	r24, 0x04	; 4
    8b78:	81 17       	cp	r24, r17
    8b7a:	18 f4       	brcc	.+6      	; 0x8b82 <dtoa_prf+0x8a>
    8b7c:	21 2f       	mov	r18, r17
    8b7e:	28 1b       	sub	r18, r24
    8b80:	01 c0       	rjmp	.+2      	; 0x8b84 <dtoa_prf+0x8c>
    8b82:	20 e0       	ldi	r18, 0x00	; 0
    8b84:	51 11       	cpse	r21, r1
    8b86:	0b c0       	rjmp	.+22     	; 0x8b9e <dtoa_prf+0xa6>
    8b88:	f6 01       	movw	r30, r12
    8b8a:	82 2f       	mov	r24, r18
    8b8c:	30 e2       	ldi	r19, 0x20	; 32
    8b8e:	88 23       	and	r24, r24
    8b90:	19 f0       	breq	.+6      	; 0x8b98 <dtoa_prf+0xa0>
    8b92:	31 93       	st	Z+, r19
    8b94:	81 50       	subi	r24, 0x01	; 1
    8b96:	fb cf       	rjmp	.-10     	; 0x8b8e <dtoa_prf+0x96>
    8b98:	c2 0e       	add	r12, r18
    8b9a:	d1 1c       	adc	r13, r1
    8b9c:	20 e0       	ldi	r18, 0x00	; 0
    8b9e:	99 23       	and	r25, r25
    8ba0:	29 f0       	breq	.+10     	; 0x8bac <dtoa_prf+0xb4>
    8ba2:	d6 01       	movw	r26, r12
    8ba4:	9c 93       	st	X, r25
    8ba6:	f6 01       	movw	r30, r12
    8ba8:	31 96       	adiw	r30, 0x01	; 1
    8baa:	6f 01       	movw	r12, r30
    8bac:	c6 01       	movw	r24, r12
    8bae:	03 96       	adiw	r24, 0x03	; 3
    8bb0:	e2 fe       	sbrs	r14, 2
    8bb2:	0a c0       	rjmp	.+20     	; 0x8bc8 <dtoa_prf+0xd0>
    8bb4:	3e e4       	ldi	r19, 0x4E	; 78
    8bb6:	d6 01       	movw	r26, r12
    8bb8:	3c 93       	st	X, r19
    8bba:	41 e4       	ldi	r20, 0x41	; 65
    8bbc:	11 96       	adiw	r26, 0x01	; 1
    8bbe:	4c 93       	st	X, r20
    8bc0:	11 97       	sbiw	r26, 0x01	; 1
    8bc2:	12 96       	adiw	r26, 0x02	; 2
    8bc4:	3c 93       	st	X, r19
    8bc6:	06 c0       	rjmp	.+12     	; 0x8bd4 <dtoa_prf+0xdc>
    8bc8:	3e e6       	ldi	r19, 0x6E	; 110
    8bca:	f6 01       	movw	r30, r12
    8bcc:	30 83       	st	Z, r19
    8bce:	41 e6       	ldi	r20, 0x61	; 97
    8bd0:	41 83       	std	Z+1, r20	; 0x01
    8bd2:	32 83       	std	Z+2, r19	; 0x02
    8bd4:	fc 01       	movw	r30, r24
    8bd6:	32 2f       	mov	r19, r18
    8bd8:	40 e2       	ldi	r20, 0x20	; 32
    8bda:	33 23       	and	r19, r19
    8bdc:	09 f4       	brne	.+2      	; 0x8be0 <dtoa_prf+0xe8>
    8bde:	42 c0       	rjmp	.+132    	; 0x8c64 <dtoa_prf+0x16c>
    8be0:	41 93       	st	Z+, r20
    8be2:	31 50       	subi	r19, 0x01	; 1
    8be4:	fa cf       	rjmp	.-12     	; 0x8bda <dtoa_prf+0xe2>
    8be6:	42 ff       	sbrs	r20, 2
    8be8:	44 c0       	rjmp	.+136    	; 0x8c72 <dtoa_prf+0x17a>
    8bea:	91 11       	cpse	r25, r1
    8bec:	02 c0       	rjmp	.+4      	; 0x8bf2 <dtoa_prf+0xfa>
    8bee:	83 e0       	ldi	r24, 0x03	; 3
    8bf0:	01 c0       	rjmp	.+2      	; 0x8bf4 <dtoa_prf+0xfc>
    8bf2:	84 e0       	ldi	r24, 0x04	; 4
    8bf4:	81 17       	cp	r24, r17
    8bf6:	18 f4       	brcc	.+6      	; 0x8bfe <dtoa_prf+0x106>
    8bf8:	21 2f       	mov	r18, r17
    8bfa:	28 1b       	sub	r18, r24
    8bfc:	01 c0       	rjmp	.+2      	; 0x8c00 <dtoa_prf+0x108>
    8bfe:	20 e0       	ldi	r18, 0x00	; 0
    8c00:	51 11       	cpse	r21, r1
    8c02:	0b c0       	rjmp	.+22     	; 0x8c1a <dtoa_prf+0x122>
    8c04:	f6 01       	movw	r30, r12
    8c06:	82 2f       	mov	r24, r18
    8c08:	30 e2       	ldi	r19, 0x20	; 32
    8c0a:	88 23       	and	r24, r24
    8c0c:	19 f0       	breq	.+6      	; 0x8c14 <dtoa_prf+0x11c>
    8c0e:	31 93       	st	Z+, r19
    8c10:	81 50       	subi	r24, 0x01	; 1
    8c12:	fb cf       	rjmp	.-10     	; 0x8c0a <dtoa_prf+0x112>
    8c14:	c2 0e       	add	r12, r18
    8c16:	d1 1c       	adc	r13, r1
    8c18:	20 e0       	ldi	r18, 0x00	; 0
    8c1a:	99 23       	and	r25, r25
    8c1c:	29 f0       	breq	.+10     	; 0x8c28 <dtoa_prf+0x130>
    8c1e:	d6 01       	movw	r26, r12
    8c20:	9c 93       	st	X, r25
    8c22:	f6 01       	movw	r30, r12
    8c24:	31 96       	adiw	r30, 0x01	; 1
    8c26:	6f 01       	movw	r12, r30
    8c28:	c6 01       	movw	r24, r12
    8c2a:	03 96       	adiw	r24, 0x03	; 3
    8c2c:	e2 fe       	sbrs	r14, 2
    8c2e:	0b c0       	rjmp	.+22     	; 0x8c46 <dtoa_prf+0x14e>
    8c30:	39 e4       	ldi	r19, 0x49	; 73
    8c32:	d6 01       	movw	r26, r12
    8c34:	3c 93       	st	X, r19
    8c36:	3e e4       	ldi	r19, 0x4E	; 78
    8c38:	11 96       	adiw	r26, 0x01	; 1
    8c3a:	3c 93       	st	X, r19
    8c3c:	11 97       	sbiw	r26, 0x01	; 1
    8c3e:	36 e4       	ldi	r19, 0x46	; 70
    8c40:	12 96       	adiw	r26, 0x02	; 2
    8c42:	3c 93       	st	X, r19
    8c44:	07 c0       	rjmp	.+14     	; 0x8c54 <dtoa_prf+0x15c>
    8c46:	39 e6       	ldi	r19, 0x69	; 105
    8c48:	f6 01       	movw	r30, r12
    8c4a:	30 83       	st	Z, r19
    8c4c:	3e e6       	ldi	r19, 0x6E	; 110
    8c4e:	31 83       	std	Z+1, r19	; 0x01
    8c50:	36 e6       	ldi	r19, 0x66	; 102
    8c52:	32 83       	std	Z+2, r19	; 0x02
    8c54:	fc 01       	movw	r30, r24
    8c56:	32 2f       	mov	r19, r18
    8c58:	40 e2       	ldi	r20, 0x20	; 32
    8c5a:	33 23       	and	r19, r19
    8c5c:	19 f0       	breq	.+6      	; 0x8c64 <dtoa_prf+0x16c>
    8c5e:	41 93       	st	Z+, r20
    8c60:	31 50       	subi	r19, 0x01	; 1
    8c62:	fb cf       	rjmp	.-10     	; 0x8c5a <dtoa_prf+0x162>
    8c64:	fc 01       	movw	r30, r24
    8c66:	e2 0f       	add	r30, r18
    8c68:	f1 1d       	adc	r31, r1
    8c6a:	10 82       	st	Z, r1
    8c6c:	8e ef       	ldi	r24, 0xFE	; 254
    8c6e:	9f ef       	ldi	r25, 0xFF	; 255
    8c70:	a6 c0       	rjmp	.+332    	; 0x8dbe <dtoa_prf+0x2c6>
    8c72:	21 e0       	ldi	r18, 0x01	; 1
    8c74:	30 e0       	ldi	r19, 0x00	; 0
    8c76:	91 11       	cpse	r25, r1
    8c78:	02 c0       	rjmp	.+4      	; 0x8c7e <dtoa_prf+0x186>
    8c7a:	20 e0       	ldi	r18, 0x00	; 0
    8c7c:	30 e0       	ldi	r19, 0x00	; 0
    8c7e:	16 16       	cp	r1, r22
    8c80:	17 06       	cpc	r1, r23
    8c82:	1c f4       	brge	.+6      	; 0x8c8a <dtoa_prf+0x192>
    8c84:	fb 01       	movw	r30, r22
    8c86:	31 96       	adiw	r30, 0x01	; 1
    8c88:	02 c0       	rjmp	.+4      	; 0x8c8e <dtoa_prf+0x196>
    8c8a:	e1 e0       	ldi	r30, 0x01	; 1
    8c8c:	f0 e0       	ldi	r31, 0x00	; 0
    8c8e:	2e 0f       	add	r18, r30
    8c90:	3f 1f       	adc	r19, r31
    8c92:	bb 20       	and	r11, r11
    8c94:	21 f0       	breq	.+8      	; 0x8c9e <dtoa_prf+0x1a6>
    8c96:	eb 2d       	mov	r30, r11
    8c98:	f0 e0       	ldi	r31, 0x00	; 0
    8c9a:	31 96       	adiw	r30, 0x01	; 1
    8c9c:	02 c0       	rjmp	.+4      	; 0x8ca2 <dtoa_prf+0x1aa>
    8c9e:	e0 e0       	ldi	r30, 0x00	; 0
    8ca0:	f0 e0       	ldi	r31, 0x00	; 0
    8ca2:	2e 0f       	add	r18, r30
    8ca4:	3f 1f       	adc	r19, r31
    8ca6:	e1 2f       	mov	r30, r17
    8ca8:	f0 e0       	ldi	r31, 0x00	; 0
    8caa:	2e 17       	cp	r18, r30
    8cac:	3f 07       	cpc	r19, r31
    8cae:	1c f4       	brge	.+6      	; 0x8cb6 <dtoa_prf+0x1be>
    8cb0:	12 1b       	sub	r17, r18
    8cb2:	21 2f       	mov	r18, r17
    8cb4:	01 c0       	rjmp	.+2      	; 0x8cb8 <dtoa_prf+0x1c0>
    8cb6:	20 e0       	ldi	r18, 0x00	; 0
    8cb8:	8e 2d       	mov	r24, r14
    8cba:	88 71       	andi	r24, 0x18	; 24
    8cbc:	59 f4       	brne	.+22     	; 0x8cd4 <dtoa_prf+0x1dc>
    8cbe:	f6 01       	movw	r30, r12
    8cc0:	82 2f       	mov	r24, r18
    8cc2:	30 e2       	ldi	r19, 0x20	; 32
    8cc4:	88 23       	and	r24, r24
    8cc6:	19 f0       	breq	.+6      	; 0x8cce <dtoa_prf+0x1d6>
    8cc8:	31 93       	st	Z+, r19
    8cca:	81 50       	subi	r24, 0x01	; 1
    8ccc:	fb cf       	rjmp	.-10     	; 0x8cc4 <dtoa_prf+0x1cc>
    8cce:	c2 0e       	add	r12, r18
    8cd0:	d1 1c       	adc	r13, r1
    8cd2:	20 e0       	ldi	r18, 0x00	; 0
    8cd4:	99 23       	and	r25, r25
    8cd6:	29 f0       	breq	.+10     	; 0x8ce2 <dtoa_prf+0x1ea>
    8cd8:	d6 01       	movw	r26, r12
    8cda:	9c 93       	st	X, r25
    8cdc:	f6 01       	movw	r30, r12
    8cde:	31 96       	adiw	r30, 0x01	; 1
    8ce0:	6f 01       	movw	r12, r30
    8ce2:	51 11       	cpse	r21, r1
    8ce4:	0b c0       	rjmp	.+22     	; 0x8cfc <dtoa_prf+0x204>
    8ce6:	f6 01       	movw	r30, r12
    8ce8:	82 2f       	mov	r24, r18
    8cea:	90 e3       	ldi	r25, 0x30	; 48
    8cec:	88 23       	and	r24, r24
    8cee:	19 f0       	breq	.+6      	; 0x8cf6 <dtoa_prf+0x1fe>
    8cf0:	91 93       	st	Z+, r25
    8cf2:	81 50       	subi	r24, 0x01	; 1
    8cf4:	fb cf       	rjmp	.-10     	; 0x8cec <dtoa_prf+0x1f4>
    8cf6:	c2 0e       	add	r12, r18
    8cf8:	d1 1c       	adc	r13, r1
    8cfa:	20 e0       	ldi	r18, 0x00	; 0
    8cfc:	0f 2d       	mov	r16, r15
    8cfe:	06 0f       	add	r16, r22
    8d00:	9a 81       	ldd	r25, Y+2	; 0x02
    8d02:	34 2f       	mov	r19, r20
    8d04:	30 71       	andi	r19, 0x10	; 16
    8d06:	44 ff       	sbrs	r20, 4
    8d08:	03 c0       	rjmp	.+6      	; 0x8d10 <dtoa_prf+0x218>
    8d0a:	91 33       	cpi	r25, 0x31	; 49
    8d0c:	09 f4       	brne	.+2      	; 0x8d10 <dtoa_prf+0x218>
    8d0e:	01 50       	subi	r16, 0x01	; 1
    8d10:	10 16       	cp	r1, r16
    8d12:	24 f4       	brge	.+8      	; 0x8d1c <dtoa_prf+0x224>
    8d14:	09 30       	cpi	r16, 0x09	; 9
    8d16:	18 f0       	brcs	.+6      	; 0x8d1e <dtoa_prf+0x226>
    8d18:	08 e0       	ldi	r16, 0x08	; 8
    8d1a:	01 c0       	rjmp	.+2      	; 0x8d1e <dtoa_prf+0x226>
    8d1c:	01 e0       	ldi	r16, 0x01	; 1
    8d1e:	ab 01       	movw	r20, r22
    8d20:	77 ff       	sbrs	r23, 7
    8d22:	02 c0       	rjmp	.+4      	; 0x8d28 <dtoa_prf+0x230>
    8d24:	40 e0       	ldi	r20, 0x00	; 0
    8d26:	50 e0       	ldi	r21, 0x00	; 0
    8d28:	fb 01       	movw	r30, r22
    8d2a:	e4 1b       	sub	r30, r20
    8d2c:	f5 0b       	sbc	r31, r21
    8d2e:	a1 e0       	ldi	r26, 0x01	; 1
    8d30:	b0 e0       	ldi	r27, 0x00	; 0
    8d32:	ac 0f       	add	r26, r28
    8d34:	bd 1f       	adc	r27, r29
    8d36:	ea 0f       	add	r30, r26
    8d38:	fb 1f       	adc	r31, r27
    8d3a:	8e e2       	ldi	r24, 0x2E	; 46
    8d3c:	a8 2e       	mov	r10, r24
    8d3e:	4b 01       	movw	r8, r22
    8d40:	80 1a       	sub	r8, r16
    8d42:	91 08       	sbc	r9, r1
    8d44:	0b 2d       	mov	r16, r11
    8d46:	10 e0       	ldi	r17, 0x00	; 0
    8d48:	11 95       	neg	r17
    8d4a:	01 95       	neg	r16
    8d4c:	11 09       	sbc	r17, r1
    8d4e:	4f 3f       	cpi	r20, 0xFF	; 255
    8d50:	bf ef       	ldi	r27, 0xFF	; 255
    8d52:	5b 07       	cpc	r21, r27
    8d54:	21 f4       	brne	.+8      	; 0x8d5e <dtoa_prf+0x266>
    8d56:	d6 01       	movw	r26, r12
    8d58:	ac 92       	st	X, r10
    8d5a:	11 96       	adiw	r26, 0x01	; 1
    8d5c:	6d 01       	movw	r12, r26
    8d5e:	64 17       	cp	r22, r20
    8d60:	75 07       	cpc	r23, r21
    8d62:	2c f0       	brlt	.+10     	; 0x8d6e <dtoa_prf+0x276>
    8d64:	84 16       	cp	r8, r20
    8d66:	95 06       	cpc	r9, r21
    8d68:	14 f4       	brge	.+4      	; 0x8d6e <dtoa_prf+0x276>
    8d6a:	81 81       	ldd	r24, Z+1	; 0x01
    8d6c:	01 c0       	rjmp	.+2      	; 0x8d70 <dtoa_prf+0x278>
    8d6e:	80 e3       	ldi	r24, 0x30	; 48
    8d70:	41 50       	subi	r20, 0x01	; 1
    8d72:	51 09       	sbc	r21, r1
    8d74:	31 96       	adiw	r30, 0x01	; 1
    8d76:	d6 01       	movw	r26, r12
    8d78:	11 96       	adiw	r26, 0x01	; 1
    8d7a:	7d 01       	movw	r14, r26
    8d7c:	40 17       	cp	r20, r16
    8d7e:	51 07       	cpc	r21, r17
    8d80:	24 f0       	brlt	.+8      	; 0x8d8a <dtoa_prf+0x292>
    8d82:	d6 01       	movw	r26, r12
    8d84:	8c 93       	st	X, r24
    8d86:	67 01       	movw	r12, r14
    8d88:	e2 cf       	rjmp	.-60     	; 0x8d4e <dtoa_prf+0x256>
    8d8a:	64 17       	cp	r22, r20
    8d8c:	75 07       	cpc	r23, r21
    8d8e:	39 f4       	brne	.+14     	; 0x8d9e <dtoa_prf+0x2a6>
    8d90:	96 33       	cpi	r25, 0x36	; 54
    8d92:	20 f4       	brcc	.+8      	; 0x8d9c <dtoa_prf+0x2a4>
    8d94:	95 33       	cpi	r25, 0x35	; 53
    8d96:	19 f4       	brne	.+6      	; 0x8d9e <dtoa_prf+0x2a6>
    8d98:	31 11       	cpse	r19, r1
    8d9a:	01 c0       	rjmp	.+2      	; 0x8d9e <dtoa_prf+0x2a6>
    8d9c:	81 e3       	ldi	r24, 0x31	; 49
    8d9e:	f6 01       	movw	r30, r12
    8da0:	80 83       	st	Z, r24
    8da2:	f7 01       	movw	r30, r14
    8da4:	82 2f       	mov	r24, r18
    8da6:	90 e2       	ldi	r25, 0x20	; 32
    8da8:	88 23       	and	r24, r24
    8daa:	19 f0       	breq	.+6      	; 0x8db2 <dtoa_prf+0x2ba>
    8dac:	91 93       	st	Z+, r25
    8dae:	81 50       	subi	r24, 0x01	; 1
    8db0:	fb cf       	rjmp	.-10     	; 0x8da8 <dtoa_prf+0x2b0>
    8db2:	f7 01       	movw	r30, r14
    8db4:	e2 0f       	add	r30, r18
    8db6:	f1 1d       	adc	r31, r1
    8db8:	10 82       	st	Z, r1
    8dba:	80 e0       	ldi	r24, 0x00	; 0
    8dbc:	90 e0       	ldi	r25, 0x00	; 0
    8dbe:	29 96       	adiw	r28, 0x09	; 9
    8dc0:	0f b6       	in	r0, 0x3f	; 63
    8dc2:	f8 94       	cli
    8dc4:	de bf       	out	0x3e, r29	; 62
    8dc6:	0f be       	out	0x3f, r0	; 63
    8dc8:	cd bf       	out	0x3d, r28	; 61
    8dca:	df 91       	pop	r29
    8dcc:	cf 91       	pop	r28
    8dce:	1f 91       	pop	r17
    8dd0:	0f 91       	pop	r16
    8dd2:	ff 90       	pop	r15
    8dd4:	ef 90       	pop	r14
    8dd6:	df 90       	pop	r13
    8dd8:	cf 90       	pop	r12
    8dda:	bf 90       	pop	r11
    8ddc:	af 90       	pop	r10
    8dde:	9f 90       	pop	r9
    8de0:	8f 90       	pop	r8
    8de2:	08 95       	ret

00008de4 <__ftoa_engine>:
    8de4:	28 30       	cpi	r18, 0x08	; 8
    8de6:	08 f0       	brcs	.+2      	; 0x8dea <__ftoa_engine+0x6>
    8de8:	27 e0       	ldi	r18, 0x07	; 7
    8dea:	33 27       	eor	r19, r19
    8dec:	da 01       	movw	r26, r20
    8dee:	99 0f       	add	r25, r25
    8df0:	31 1d       	adc	r19, r1
    8df2:	87 fd       	sbrc	r24, 7
    8df4:	91 60       	ori	r25, 0x01	; 1
    8df6:	00 96       	adiw	r24, 0x00	; 0
    8df8:	61 05       	cpc	r22, r1
    8dfa:	71 05       	cpc	r23, r1
    8dfc:	39 f4       	brne	.+14     	; 0x8e0c <__ftoa_engine+0x28>
    8dfe:	32 60       	ori	r19, 0x02	; 2
    8e00:	2e 5f       	subi	r18, 0xFE	; 254
    8e02:	3d 93       	st	X+, r19
    8e04:	30 e3       	ldi	r19, 0x30	; 48
    8e06:	2a 95       	dec	r18
    8e08:	e1 f7       	brne	.-8      	; 0x8e02 <__ftoa_engine+0x1e>
    8e0a:	08 95       	ret
    8e0c:	9f 3f       	cpi	r25, 0xFF	; 255
    8e0e:	30 f0       	brcs	.+12     	; 0x8e1c <__ftoa_engine+0x38>
    8e10:	80 38       	cpi	r24, 0x80	; 128
    8e12:	71 05       	cpc	r23, r1
    8e14:	61 05       	cpc	r22, r1
    8e16:	09 f0       	breq	.+2      	; 0x8e1a <__ftoa_engine+0x36>
    8e18:	3c 5f       	subi	r19, 0xFC	; 252
    8e1a:	3c 5f       	subi	r19, 0xFC	; 252
    8e1c:	3d 93       	st	X+, r19
    8e1e:	91 30       	cpi	r25, 0x01	; 1
    8e20:	08 f0       	brcs	.+2      	; 0x8e24 <__ftoa_engine+0x40>
    8e22:	80 68       	ori	r24, 0x80	; 128
    8e24:	91 1d       	adc	r25, r1
    8e26:	df 93       	push	r29
    8e28:	cf 93       	push	r28
    8e2a:	1f 93       	push	r17
    8e2c:	0f 93       	push	r16
    8e2e:	ff 92       	push	r15
    8e30:	ef 92       	push	r14
    8e32:	19 2f       	mov	r17, r25
    8e34:	98 7f       	andi	r25, 0xF8	; 248
    8e36:	96 95       	lsr	r25
    8e38:	e9 2f       	mov	r30, r25
    8e3a:	96 95       	lsr	r25
    8e3c:	96 95       	lsr	r25
    8e3e:	e9 0f       	add	r30, r25
    8e40:	ff 27       	eor	r31, r31
    8e42:	ee 5d       	subi	r30, 0xDE	; 222
    8e44:	fe 4f       	sbci	r31, 0xFE	; 254
    8e46:	99 27       	eor	r25, r25
    8e48:	33 27       	eor	r19, r19
    8e4a:	ee 24       	eor	r14, r14
    8e4c:	ff 24       	eor	r15, r15
    8e4e:	a7 01       	movw	r20, r14
    8e50:	e7 01       	movw	r28, r14
    8e52:	05 90       	lpm	r0, Z+
    8e54:	08 94       	sec
    8e56:	07 94       	ror	r0
    8e58:	28 f4       	brcc	.+10     	; 0x8e64 <__ftoa_engine+0x80>
    8e5a:	36 0f       	add	r19, r22
    8e5c:	e7 1e       	adc	r14, r23
    8e5e:	f8 1e       	adc	r15, r24
    8e60:	49 1f       	adc	r20, r25
    8e62:	51 1d       	adc	r21, r1
    8e64:	66 0f       	add	r22, r22
    8e66:	77 1f       	adc	r23, r23
    8e68:	88 1f       	adc	r24, r24
    8e6a:	99 1f       	adc	r25, r25
    8e6c:	06 94       	lsr	r0
    8e6e:	a1 f7       	brne	.-24     	; 0x8e58 <__ftoa_engine+0x74>
    8e70:	05 90       	lpm	r0, Z+
    8e72:	07 94       	ror	r0
    8e74:	28 f4       	brcc	.+10     	; 0x8e80 <__ftoa_engine+0x9c>
    8e76:	e7 0e       	add	r14, r23
    8e78:	f8 1e       	adc	r15, r24
    8e7a:	49 1f       	adc	r20, r25
    8e7c:	56 1f       	adc	r21, r22
    8e7e:	c1 1d       	adc	r28, r1
    8e80:	77 0f       	add	r23, r23
    8e82:	88 1f       	adc	r24, r24
    8e84:	99 1f       	adc	r25, r25
    8e86:	66 1f       	adc	r22, r22
    8e88:	06 94       	lsr	r0
    8e8a:	a1 f7       	brne	.-24     	; 0x8e74 <__ftoa_engine+0x90>
    8e8c:	05 90       	lpm	r0, Z+
    8e8e:	07 94       	ror	r0
    8e90:	28 f4       	brcc	.+10     	; 0x8e9c <__ftoa_engine+0xb8>
    8e92:	f8 0e       	add	r15, r24
    8e94:	49 1f       	adc	r20, r25
    8e96:	56 1f       	adc	r21, r22
    8e98:	c7 1f       	adc	r28, r23
    8e9a:	d1 1d       	adc	r29, r1
    8e9c:	88 0f       	add	r24, r24
    8e9e:	99 1f       	adc	r25, r25
    8ea0:	66 1f       	adc	r22, r22
    8ea2:	77 1f       	adc	r23, r23
    8ea4:	06 94       	lsr	r0
    8ea6:	a1 f7       	brne	.-24     	; 0x8e90 <__ftoa_engine+0xac>
    8ea8:	05 90       	lpm	r0, Z+
    8eaa:	07 94       	ror	r0
    8eac:	20 f4       	brcc	.+8      	; 0x8eb6 <__ftoa_engine+0xd2>
    8eae:	49 0f       	add	r20, r25
    8eb0:	56 1f       	adc	r21, r22
    8eb2:	c7 1f       	adc	r28, r23
    8eb4:	d8 1f       	adc	r29, r24
    8eb6:	99 0f       	add	r25, r25
    8eb8:	66 1f       	adc	r22, r22
    8eba:	77 1f       	adc	r23, r23
    8ebc:	88 1f       	adc	r24, r24
    8ebe:	06 94       	lsr	r0
    8ec0:	a9 f7       	brne	.-22     	; 0x8eac <__ftoa_engine+0xc8>
    8ec2:	84 91       	lpm	r24, Z
    8ec4:	10 95       	com	r17
    8ec6:	17 70       	andi	r17, 0x07	; 7
    8ec8:	41 f0       	breq	.+16     	; 0x8eda <__ftoa_engine+0xf6>
    8eca:	d6 95       	lsr	r29
    8ecc:	c7 95       	ror	r28
    8ece:	57 95       	ror	r21
    8ed0:	47 95       	ror	r20
    8ed2:	f7 94       	ror	r15
    8ed4:	e7 94       	ror	r14
    8ed6:	1a 95       	dec	r17
    8ed8:	c1 f7       	brne	.-16     	; 0x8eca <__ftoa_engine+0xe6>
    8eda:	e8 ec       	ldi	r30, 0xC8	; 200
    8edc:	f0 e0       	ldi	r31, 0x00	; 0
    8ede:	68 94       	set
    8ee0:	15 90       	lpm	r1, Z+
    8ee2:	15 91       	lpm	r17, Z+
    8ee4:	35 91       	lpm	r19, Z+
    8ee6:	65 91       	lpm	r22, Z+
    8ee8:	95 91       	lpm	r25, Z+
    8eea:	05 90       	lpm	r0, Z+
    8eec:	7f e2       	ldi	r23, 0x2F	; 47
    8eee:	73 95       	inc	r23
    8ef0:	e1 18       	sub	r14, r1
    8ef2:	f1 0a       	sbc	r15, r17
    8ef4:	43 0b       	sbc	r20, r19
    8ef6:	56 0b       	sbc	r21, r22
    8ef8:	c9 0b       	sbc	r28, r25
    8efa:	d0 09       	sbc	r29, r0
    8efc:	c0 f7       	brcc	.-16     	; 0x8eee <__ftoa_engine+0x10a>
    8efe:	e1 0c       	add	r14, r1
    8f00:	f1 1e       	adc	r15, r17
    8f02:	43 1f       	adc	r20, r19
    8f04:	56 1f       	adc	r21, r22
    8f06:	c9 1f       	adc	r28, r25
    8f08:	d0 1d       	adc	r29, r0
    8f0a:	7e f4       	brtc	.+30     	; 0x8f2a <__ftoa_engine+0x146>
    8f0c:	70 33       	cpi	r23, 0x30	; 48
    8f0e:	11 f4       	brne	.+4      	; 0x8f14 <__ftoa_engine+0x130>
    8f10:	8a 95       	dec	r24
    8f12:	e6 cf       	rjmp	.-52     	; 0x8ee0 <__ftoa_engine+0xfc>
    8f14:	e8 94       	clt
    8f16:	01 50       	subi	r16, 0x01	; 1
    8f18:	30 f0       	brcs	.+12     	; 0x8f26 <__ftoa_engine+0x142>
    8f1a:	08 0f       	add	r16, r24
    8f1c:	0a f4       	brpl	.+2      	; 0x8f20 <__ftoa_engine+0x13c>
    8f1e:	00 27       	eor	r16, r16
    8f20:	02 17       	cp	r16, r18
    8f22:	08 f4       	brcc	.+2      	; 0x8f26 <__ftoa_engine+0x142>
    8f24:	20 2f       	mov	r18, r16
    8f26:	23 95       	inc	r18
    8f28:	02 2f       	mov	r16, r18
    8f2a:	7a 33       	cpi	r23, 0x3A	; 58
    8f2c:	28 f0       	brcs	.+10     	; 0x8f38 <__ftoa_engine+0x154>
    8f2e:	79 e3       	ldi	r23, 0x39	; 57
    8f30:	7d 93       	st	X+, r23
    8f32:	2a 95       	dec	r18
    8f34:	e9 f7       	brne	.-6      	; 0x8f30 <__ftoa_engine+0x14c>
    8f36:	10 c0       	rjmp	.+32     	; 0x8f58 <__ftoa_engine+0x174>
    8f38:	7d 93       	st	X+, r23
    8f3a:	2a 95       	dec	r18
    8f3c:	89 f6       	brne	.-94     	; 0x8ee0 <__ftoa_engine+0xfc>
    8f3e:	06 94       	lsr	r0
    8f40:	97 95       	ror	r25
    8f42:	67 95       	ror	r22
    8f44:	37 95       	ror	r19
    8f46:	17 95       	ror	r17
    8f48:	17 94       	ror	r1
    8f4a:	e1 18       	sub	r14, r1
    8f4c:	f1 0a       	sbc	r15, r17
    8f4e:	43 0b       	sbc	r20, r19
    8f50:	56 0b       	sbc	r21, r22
    8f52:	c9 0b       	sbc	r28, r25
    8f54:	d0 09       	sbc	r29, r0
    8f56:	98 f0       	brcs	.+38     	; 0x8f7e <__ftoa_engine+0x19a>
    8f58:	23 95       	inc	r18
    8f5a:	7e 91       	ld	r23, -X
    8f5c:	73 95       	inc	r23
    8f5e:	7a 33       	cpi	r23, 0x3A	; 58
    8f60:	08 f0       	brcs	.+2      	; 0x8f64 <__ftoa_engine+0x180>
    8f62:	70 e3       	ldi	r23, 0x30	; 48
    8f64:	7c 93       	st	X, r23
    8f66:	20 13       	cpse	r18, r16
    8f68:	b8 f7       	brcc	.-18     	; 0x8f58 <__ftoa_engine+0x174>
    8f6a:	7e 91       	ld	r23, -X
    8f6c:	70 61       	ori	r23, 0x10	; 16
    8f6e:	7d 93       	st	X+, r23
    8f70:	30 f0       	brcs	.+12     	; 0x8f7e <__ftoa_engine+0x19a>
    8f72:	83 95       	inc	r24
    8f74:	71 e3       	ldi	r23, 0x31	; 49
    8f76:	7d 93       	st	X+, r23
    8f78:	70 e3       	ldi	r23, 0x30	; 48
    8f7a:	2a 95       	dec	r18
    8f7c:	e1 f7       	brne	.-8      	; 0x8f76 <__ftoa_engine+0x192>
    8f7e:	11 24       	eor	r1, r1
    8f80:	ef 90       	pop	r14
    8f82:	ff 90       	pop	r15
    8f84:	0f 91       	pop	r16
    8f86:	1f 91       	pop	r17
    8f88:	cf 91       	pop	r28
    8f8a:	df 91       	pop	r29
    8f8c:	99 27       	eor	r25, r25
    8f8e:	87 fd       	sbrc	r24, 7
    8f90:	90 95       	com	r25
    8f92:	08 95       	ret

00008f94 <__ctype_isfalse>:
    8f94:	99 27       	eor	r25, r25
    8f96:	88 27       	eor	r24, r24

00008f98 <__ctype_istrue>:
    8f98:	08 95       	ret

00008f9a <strrev>:
    8f9a:	dc 01       	movw	r26, r24
    8f9c:	fc 01       	movw	r30, r24
    8f9e:	67 2f       	mov	r22, r23
    8fa0:	71 91       	ld	r23, Z+
    8fa2:	77 23       	and	r23, r23
    8fa4:	e1 f7       	brne	.-8      	; 0x8f9e <strrev+0x4>
    8fa6:	32 97       	sbiw	r30, 0x02	; 2
    8fa8:	04 c0       	rjmp	.+8      	; 0x8fb2 <strrev+0x18>
    8faa:	7c 91       	ld	r23, X
    8fac:	6d 93       	st	X+, r22
    8fae:	70 83       	st	Z, r23
    8fb0:	62 91       	ld	r22, -Z
    8fb2:	ae 17       	cp	r26, r30
    8fb4:	bf 07       	cpc	r27, r31
    8fb6:	c8 f3       	brcs	.-14     	; 0x8faa <strrev+0x10>
    8fb8:	08 95       	ret

00008fba <__do_global_dtors>:
    8fba:	11 e0       	ldi	r17, 0x01	; 1
    8fbc:	c6 e6       	ldi	r28, 0x66	; 102
    8fbe:	d1 e0       	ldi	r29, 0x01	; 1
    8fc0:	03 c0       	rjmp	.+6      	; 0x8fc8 <__do_global_dtors+0xe>
    8fc2:	fe 01       	movw	r30, r28
    8fc4:	a2 d9       	rcall	.-3260   	; 0x830a <__tablejump2__>
    8fc6:	21 96       	adiw	r28, 0x01	; 1
    8fc8:	c7 36       	cpi	r28, 0x67	; 103
    8fca:	d1 07       	cpc	r29, r17
    8fcc:	d1 f7       	brne	.-12     	; 0x8fc2 <__do_global_dtors+0x8>
    8fce:	f8 94       	cli

00008fd0 <__stop_program>:
    8fd0:	ff cf       	rjmp	.-2      	; 0x8fd0 <__stop_program>
