
templateVuoto.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000990  00800100  00008c5c  00008cf0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00008c5c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000352  00800a90  00800a90  00009680  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00009680  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000096b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00001290  00000000  00000000  000096f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0003c4df  00000000  00000000  0000a980  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000766e  00000000  00000000  00046e5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000c172  00000000  00000000  0004e4cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000411c  00000000  00000000  0005a640  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000848c  00000000  00000000  0005e75c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00018f1e  00000000  00000000  00066be8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001338  00000000  00000000  0007fb06  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	63 c1       	rjmp	.+710    	; 0x2c8 <__dtors_end>
       2:	00 00       	nop
       4:	8b c1       	rjmp	.+790    	; 0x31c <__bad_interrupt>
       6:	00 00       	nop
       8:	89 c1       	rjmp	.+786    	; 0x31c <__bad_interrupt>
       a:	00 00       	nop
       c:	87 c1       	rjmp	.+782    	; 0x31c <__bad_interrupt>
       e:	00 00       	nop
      10:	0c 94 88 18 	jmp	0x3110	; 0x3110 <__vector_4>
      14:	83 c1       	rjmp	.+774    	; 0x31c <__bad_interrupt>
      16:	00 00       	nop
      18:	81 c1       	rjmp	.+770    	; 0x31c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	0c 94 e7 18 	jmp	0x31ce	; 0x31ce <__vector_7>
      20:	0c 94 66 19 	jmp	0x32cc	; 0x32cc <__vector_8>
      24:	7b c1       	rjmp	.+758    	; 0x31c <__bad_interrupt>
      26:	00 00       	nop
      28:	79 c1       	rjmp	.+754    	; 0x31c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	77 c1       	rjmp	.+750    	; 0x31c <__bad_interrupt>
      2e:	00 00       	nop
      30:	75 c1       	rjmp	.+746    	; 0x31c <__bad_interrupt>
      32:	00 00       	nop
      34:	73 c1       	rjmp	.+742    	; 0x31c <__bad_interrupt>
      36:	00 00       	nop
      38:	71 c1       	rjmp	.+738    	; 0x31c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6f c1       	rjmp	.+734    	; 0x31c <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 4d 3a 	jmp	0x749a	; 0x749a <__vector_16>
      44:	6b c1       	rjmp	.+726    	; 0x31c <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 3b 38 	jmp	0x7076	; 0x7076 <__vector_18>
      4c:	0c 94 6d 38 	jmp	0x70da	; 0x70da <__vector_19>
      50:	65 c1       	rjmp	.+714    	; 0x31c <__bad_interrupt>
      52:	00 00       	nop
      54:	63 c1       	rjmp	.+710    	; 0x31c <__bad_interrupt>
      56:	00 00       	nop
      58:	61 c1       	rjmp	.+706    	; 0x31c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5f c1       	rjmp	.+702    	; 0x31c <__bad_interrupt>
      5e:	00 00       	nop
      60:	5d c1       	rjmp	.+698    	; 0x31c <__bad_interrupt>
      62:	00 00       	nop
      64:	5b c1       	rjmp	.+694    	; 0x31c <__bad_interrupt>
      66:	00 00       	nop
      68:	0c 94 88 34 	jmp	0x6910	; 0x6910 <__vector_26>
      6c:	57 c1       	rjmp	.+686    	; 0x31c <__bad_interrupt>
      6e:	00 00       	nop
      70:	55 c1       	rjmp	.+682    	; 0x31c <__bad_interrupt>
      72:	00 00       	nop
      74:	53 c1       	rjmp	.+678    	; 0x31c <__bad_interrupt>
      76:	00 00       	nop
      78:	51 c1       	rjmp	.+674    	; 0x31c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4f c1       	rjmp	.+670    	; 0x31c <__bad_interrupt>
      7e:	00 00       	nop
      80:	4d c1       	rjmp	.+666    	; 0x31c <__bad_interrupt>
      82:	00 00       	nop
      84:	4b c1       	rjmp	.+662    	; 0x31c <__bad_interrupt>
      86:	00 00       	nop
      88:	49 c1       	rjmp	.+658    	; 0x31c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	27 10       	cpse	r2, r7
      8e:	d5 10       	cpse	r13, r5
      90:	fc 10       	cpse	r15, r12
      92:	39 11       	cpse	r19, r9
      94:	38 12       	cpse	r3, r24
      96:	73 12       	cpse	r7, r19
      98:	18 13       	cpse	r17, r24
      9a:	27 13       	cpse	r18, r23
      9c:	66 13       	cpse	r22, r22
      9e:	7c 13       	cpse	r23, r28
      a0:	09 14       	cp	r0, r9
      a2:	81 14       	cp	r8, r1
      a4:	a9 15       	cp	r26, r9
      a6:	f4 22       	and	r15, r20
      a8:	0b 23       	and	r16, r27
      aa:	0b 23       	and	r16, r27
      ac:	08 23       	and	r16, r24
      ae:	0b 23       	and	r16, r27
      b0:	f2 22       	and	r15, r18
      b2:	0b 23       	and	r16, r27
      b4:	0b 23       	and	r16, r27
      b6:	0b 23       	and	r16, r27
      b8:	e6 22       	and	r14, r22
      ba:	0b 23       	and	r16, r27
      bc:	0b 23       	and	r16, r27
      be:	fb 22       	and	r15, r27
      c0:	06 23       	and	r16, r22
      c2:	04 23       	and	r16, r20
      c4:	0b 23       	and	r16, r27
      c6:	0b 23       	and	r16, r27
      c8:	0b 23       	and	r16, r27
      ca:	02 23       	and	r16, r18

000000cc <__trampolines_end>:
      cc:	00 40       	sbci	r16, 0x00	; 0
      ce:	7a 10       	cpse	r7, r10
      d0:	f3 5a       	subi	r31, 0xA3	; 163
      d2:	00 a0       	ldd	r0, Z+32	; 0x20
      d4:	72 4e       	sbci	r23, 0xE2	; 226
      d6:	18 09       	sbc	r17, r8
      d8:	00 10       	cpse	r0, r0
      da:	a5 d4       	rcall	.+2378   	; 0xa26 <_Z16scrivi_TAG_MezzoPc+0x9e>
      dc:	e8 00       	.word	0x00e8	; ????
      de:	00 e8       	ldi	r16, 0x80	; 128
      e0:	76 48       	sbci	r23, 0x86	; 134
      e2:	17 00       	.word	0x0017	; ????
      e4:	00 e4       	ldi	r16, 0x40	; 64
      e6:	0b 54       	subi	r16, 0x4B	; 75
      e8:	02 00       	.word	0x0002	; ????
      ea:	00 ca       	rjmp	.-3072   	; 0xfffff4ec <__eeprom_end+0xff7ef4ec>
      ec:	9a 3b       	cpi	r25, 0xBA	; 186
      ee:	00 00       	nop
      f0:	00 e1       	ldi	r16, 0x10	; 16
      f2:	f5 05       	cpc	r31, r5
      f4:	00 00       	nop
      f6:	80 96       	adiw	r24, 0x20	; 32
      f8:	98 00       	.word	0x0098	; ????
      fa:	00 00       	nop
      fc:	40 42       	sbci	r20, 0x20	; 32
      fe:	0f 00       	.word	0x000f	; ????
     100:	00 00       	nop
     102:	a0 86       	std	Z+8, r10	; 0x08
     104:	01 00       	.word	0x0001	; ????
     106:	00 00       	nop
     108:	10 27       	eor	r17, r16
     10a:	00 00       	nop
     10c:	00 00       	nop
     10e:	e8 03       	fmulsu	r22, r16
     110:	00 00       	nop
     112:	00 00       	nop
     114:	64 00       	.word	0x0064	; ????
     116:	00 00       	nop
     118:	00 00       	nop
     11a:	0a 00       	.word	0x000a	; ????
     11c:	00 00       	nop
     11e:	00 00       	nop
     120:	01 00       	.word	0x0001	; ????
     122:	00 00       	nop
     124:	00 00       	nop
     126:	2c 76       	andi	r18, 0x6C	; 108
     128:	d8 88       	ldd	r13, Y+16	; 0x10
     12a:	dc 67       	ori	r29, 0x7C	; 124
     12c:	4f 08       	sbc	r4, r15
     12e:	23 df       	rcall	.-442    	; 0xffffff76 <__eeprom_end+0xff7eff76>
     130:	c1 df       	rcall	.-126    	; 0xb4 <__SREG__+0x75>
     132:	ae 59       	subi	r26, 0x9E	; 158
     134:	e1 b1       	in	r30, 0x01	; 1
     136:	b7 96       	adiw	r30, 0x27	; 39
     138:	e5 e3       	ldi	r30, 0x35	; 53
     13a:	e4 53       	subi	r30, 0x34	; 52
     13c:	c6 3a       	cpi	r28, 0xA6	; 166
     13e:	e6 51       	subi	r30, 0x16	; 22
     140:	99 76       	andi	r25, 0x69	; 105
     142:	96 e8       	ldi	r25, 0x86	; 134
     144:	e6 c2       	rjmp	.+1484   	; 0x712 <_Z13getCharKeypadi+0x42>
     146:	84 26       	eor	r8, r20
     148:	eb 89       	ldd	r30, Y+19	; 0x13
     14a:	8c 9b       	sbis	0x11, 4	; 17
     14c:	62 ed       	ldi	r22, 0xD2	; 210
     14e:	40 7c       	andi	r20, 0xC0	; 192
     150:	6f fc       	.word	0xfc6f	; ????
     152:	ef bc       	out	0x2f, r14	; 47
     154:	9c 9f       	mul	r25, r28
     156:	40 f2       	brcs	.-112    	; 0xe8 <__trampolines_end+0x1c>
     158:	ba a5       	ldd	r27, Y+42	; 0x2a
     15a:	6f a5       	ldd	r22, Y+47	; 0x2f
     15c:	f4 90       	lpm	r15, Z
     15e:	05 5a       	subi	r16, 0xA5	; 165
     160:	2a f7       	brpl	.-54     	; 0x12c <__trampolines_end+0x60>
     162:	5c 93       	st	X, r21
     164:	6b 6c       	ori	r22, 0xCB	; 203
     166:	f9 67       	ori	r31, 0x79	; 121
     168:	6d c1       	rjmp	.+730    	; 0x444 <_Z8printTabh+0xa>
     16a:	1b fc       	.word	0xfc1b	; ????
     16c:	e0 e4       	ldi	r30, 0x40	; 64
     16e:	0d 47       	sbci	r16, 0x7D	; 125
     170:	fe f5       	brtc	.+126    	; 0x1f0 <_ZZ5setupE3__c+0xc>
     172:	20 e6       	ldi	r18, 0x60	; 96
     174:	b5 00       	.word	0x00b5	; ????
     176:	d0 ed       	ldi	r29, 0xD0	; 208
     178:	90 2e       	mov	r9, r16
     17a:	03 00       	.word	0x0003	; ????
     17c:	94 35       	cpi	r25, 0x54	; 84
     17e:	77 05       	cpc	r23, r7
     180:	00 80       	ld	r0, Z
     182:	84 1e       	adc	r8, r20
     184:	08 00       	.word	0x0008	; ????
     186:	00 20       	and	r0, r0
     188:	4e 0a       	sbc	r4, r30
     18a:	00 00       	nop
     18c:	00 c8       	rjmp	.-4096   	; 0xfffff18e <__eeprom_end+0xff7ef18e>
     18e:	0c 33       	cpi	r16, 0x3C	; 60
     190:	33 33       	cpi	r19, 0x33	; 51
     192:	33 0f       	add	r19, r19
     194:	98 6e       	ori	r25, 0xE8	; 232
     196:	12 83       	std	Z+2, r17	; 0x02
     198:	11 41       	sbci	r17, 0x11	; 17
     19a:	ef 8d       	ldd	r30, Y+31	; 0x1f
     19c:	21 14       	cp	r2, r1
     19e:	89 3b       	cpi	r24, 0xB9	; 185
     1a0:	e6 55       	subi	r30, 0x56	; 86
     1a2:	16 cf       	rjmp	.-468    	; 0xffffffd0 <__eeprom_end+0xff7effd0>
     1a4:	fe e6       	ldi	r31, 0x6E	; 110
     1a6:	db 18       	sub	r13, r11
     1a8:	d1 84       	ldd	r13, Z+9	; 0x09
     1aa:	4b 38       	cpi	r20, 0x8B	; 139
     1ac:	1b f7       	brvc	.-58     	; 0x174 <__trampolines_end+0xa8>
     1ae:	7c 1d       	adc	r23, r12
     1b0:	90 1d       	adc	r25, r0
     1b2:	a4 bb       	out	0x14, r26	; 20
     1b4:	e4 24       	eor	r14, r4
     1b6:	20 32       	cpi	r18, 0x20	; 32
     1b8:	84 72       	andi	r24, 0x24	; 36
     1ba:	5e 22       	and	r5, r30
     1bc:	81 00       	.word	0x0081	; ????
     1be:	c9 f1       	breq	.+114    	; 0x232 <_ZL11daysInMonth+0xa>
     1c0:	24 ec       	ldi	r18, 0xC4	; 196
     1c2:	a1 e5       	ldi	r26, 0x51	; 81
     1c4:	3d 27       	eor	r19, r29

000001c6 <_ZZ5setupE3__c_0>:
     1c6:	52 54 43 20 63 68 69 70 20 44 53 33 32 33 31 4d     RTC chip DS3231M
     1d6:	20 69 6e 69 74 69 61 6c 69 7a 65 64 2e 00            initialized..

000001e4 <_ZZ5setupE3__c>:
     1e4:	6e 6f 6e 20 74 72 6f 76 6f 20 6d 6f 64 75 6c 6f     non trovo modulo
     1f4:	20 52 54 43 20 44 53 33 32 33 31 4d 4d 2e 20 52      RTC DS3231MM. R
     204:	69 70 72 6f 76 6f 20 74 72 61 20 33 73 2e 00        iprovo tra 3s..

00000213 <_ZZN13DS3231M_Class6adjustEvE3__c>:
     213:	4a 75 6c 20 20 35 20 32 30 32 31 00                 Jul  5 2021.

0000021f <_ZZN13DS3231M_Class6adjustEvE3__c_0>:
     21f:	30 38 3a 30 36 3a 32 35 00                          08:06:25.

00000228 <_ZL11daysInMonth>:
     228:	1f 1c 1f 1e 1f 1e 1f 1f 1e 1f 1e 1f                 ............

00000234 <digital_pin_to_timer_PGM>:
     234:	00 00 00 00 04 03 08 07 00 00 02 00 09 0a 00 00     ................
	...
     250:	00 00 00 01                                         ....

00000254 <digital_pin_to_bit_mask_PGM>:
     254:	01 02 04 08 10 20 40 80 01 02 10 20 40 80 10 20     ..... @.... @.. 
     264:	40 80 10 08 20 04 40 80 01 02 04 08 01 02 04 08     @... .@.........

00000274 <digital_pin_to_port_PGM>:
     274:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 01 01     ................
     284:	01 01 03 03 03 03 03 03 01 01 01 01 03 03 02 02     ................

00000294 <port_to_input_PGM>:
     294:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

0000029e <port_to_output_PGM>:
     29e:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000002a8 <port_to_mode_PGM>:
     2a8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000002b2 <__ctors_start>:
     2b2:	ee 19       	sub	r30, r14
     2b4:	a5 25       	eor	r26, r5
     2b6:	fd 25       	eor	r31, r13
     2b8:	f5 28       	or	r15, r5
     2ba:	dc 2a       	or	r13, r28
     2bc:	e7 2a       	or	r14, r23
     2be:	b9 2c       	mov	r11, r9
     2c0:	89 30       	cpi	r24, 0x09	; 9
     2c2:	18 37       	cpi	r17, 0x78	; 120
     2c4:	9b 38       	cpi	r25, 0x8B	; 139

000002c6 <__ctors_end>:
     2c6:	1e 1b       	sub	r17, r30

000002c8 <__dtors_end>:
     2c8:	11 24       	eor	r1, r1
     2ca:	1f be       	out	0x3f, r1	; 63
     2cc:	cf ef       	ldi	r28, 0xFF	; 255
     2ce:	d0 e4       	ldi	r29, 0x40	; 64
     2d0:	de bf       	out	0x3e, r29	; 62
     2d2:	cd bf       	out	0x3d, r28	; 61

000002d4 <__do_copy_data>:
     2d4:	1a e0       	ldi	r17, 0x0A	; 10
     2d6:	a0 e0       	ldi	r26, 0x00	; 0
     2d8:	b1 e0       	ldi	r27, 0x01	; 1
     2da:	ec e5       	ldi	r30, 0x5C	; 92
     2dc:	fc e8       	ldi	r31, 0x8C	; 140
     2de:	00 e0       	ldi	r16, 0x00	; 0
     2e0:	0b bf       	out	0x3b, r16	; 59
     2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <__do_copy_data+0x14>
     2e4:	07 90       	elpm	r0, Z+
     2e6:	0d 92       	st	X+, r0
     2e8:	a0 39       	cpi	r26, 0x90	; 144
     2ea:	b1 07       	cpc	r27, r17
     2ec:	d9 f7       	brne	.-10     	; 0x2e4 <__do_copy_data+0x10>

000002ee <__do_clear_bss>:
     2ee:	2d e0       	ldi	r18, 0x0D	; 13
     2f0:	a0 e9       	ldi	r26, 0x90	; 144
     2f2:	ba e0       	ldi	r27, 0x0A	; 10
     2f4:	01 c0       	rjmp	.+2      	; 0x2f8 <.do_clear_bss_start>

000002f6 <.do_clear_bss_loop>:
     2f6:	1d 92       	st	X+, r1

000002f8 <.do_clear_bss_start>:
     2f8:	a2 3e       	cpi	r26, 0xE2	; 226
     2fa:	b2 07       	cpc	r27, r18
     2fc:	e1 f7       	brne	.-8      	; 0x2f6 <.do_clear_bss_loop>

000002fe <__do_global_ctors>:
     2fe:	11 e0       	ldi	r17, 0x01	; 1
     300:	c3 e6       	ldi	r28, 0x63	; 99
     302:	d1 e0       	ldi	r29, 0x01	; 1
     304:	04 c0       	rjmp	.+8      	; 0x30e <__do_global_ctors+0x10>
     306:	21 97       	sbiw	r28, 0x01	; 1
     308:	fe 01       	movw	r30, r28
     30a:	0e 94 81 40 	call	0x8102	; 0x8102 <__tablejump2__>
     30e:	c9 35       	cpi	r28, 0x59	; 89
     310:	d1 07       	cpc	r29, r17
     312:	c9 f7       	brne	.-14     	; 0x306 <__do_global_ctors+0x8>
     314:	0e 94 27 39 	call	0x724e	; 0x724e <main>
     318:	0c 94 22 46 	jmp	0x8c44	; 0x8c44 <__do_global_dtors>

0000031c <__bad_interrupt>:
     31c:	71 ce       	rjmp	.-798    	; 0x0 <__vectors>

0000031e <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     31e:	80 e0       	ldi	r24, 0x00	; 0
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	08 95       	ret

00000324 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     324:	08 95       	ret

00000326 <_ZL10enable_ETHv>:
 Serial.println(" ");
 Serial.println(" ");
 Serial.print("Salvata nella EEPROM: ");
 Serial.println(Salvata);
 return Salvata;
}
     326:	44 98       	cbi	0x08, 4	; 8
     328:	08 95       	ret

0000032a <_ZL11disable_ETHv>:
     32a:	44 9a       	sbi	0x08, 4	; 8
     32c:	08 95       	ret

0000032e <_Z19InizializzaEthernetv>:
     32e:	ef 92       	push	r14
     330:	ff 92       	push	r15
     332:	0f 93       	push	r16
     334:	1f 93       	push	r17
     336:	cf 93       	push	r28
     338:	df 93       	push	r29
     33a:	cd b7       	in	r28, 0x3d	; 61
     33c:	de b7       	in	r29, 0x3e	; 62
     33e:	68 97       	sbiw	r28, 0x18	; 24
     340:	0f b6       	in	r0, 0x3f	; 63
     342:	f8 94       	cli
     344:	de bf       	out	0x3e, r29	; 62
     346:	0f be       	out	0x3f, r0	; 63
     348:	cd bf       	out	0x3d, r28	; 61
     34a:	80 e7       	ldi	r24, 0x70	; 112
     34c:	9a e0       	ldi	r25, 0x0A	; 10
     34e:	9a 83       	std	Y+2, r25	; 0x02
     350:	89 83       	std	Y+1, r24	; 0x01
     352:	40 91 dd 0a 	lds	r20, 0x0ADD	; 0x800add <subnet+0x2>
     356:	50 91 de 0a 	lds	r21, 0x0ADE	; 0x800ade <subnet+0x3>
     35a:	60 91 df 0a 	lds	r22, 0x0ADF	; 0x800adf <subnet+0x4>
     35e:	70 91 e0 0a 	lds	r23, 0x0AE0	; 0x800ae0 <subnet+0x5>
     362:	4b 83       	std	Y+3, r20	; 0x03
     364:	5c 83       	std	Y+4, r21	; 0x04
     366:	6d 83       	std	Y+5, r22	; 0x05
     368:	7e 83       	std	Y+6, r23	; 0x06
     36a:	98 87       	std	Y+8, r25	; 0x08
     36c:	8f 83       	std	Y+7, r24	; 0x07
     36e:	40 91 e3 0a 	lds	r20, 0x0AE3	; 0x800ae3 <gateway+0x2>
     372:	50 91 e4 0a 	lds	r21, 0x0AE4	; 0x800ae4 <gateway+0x3>
     376:	60 91 e5 0a 	lds	r22, 0x0AE5	; 0x800ae5 <gateway+0x4>
     37a:	70 91 e6 0a 	lds	r23, 0x0AE6	; 0x800ae6 <gateway+0x5>
     37e:	49 87       	std	Y+9, r20	; 0x09
     380:	5a 87       	std	Y+10, r21	; 0x0a
     382:	6b 87       	std	Y+11, r22	; 0x0b
     384:	7c 87       	std	Y+12, r23	; 0x0c
     386:	9e 87       	std	Y+14, r25	; 0x0e
     388:	8d 87       	std	Y+13, r24	; 0x0d
     38a:	40 91 e9 0a 	lds	r20, 0x0AE9	; 0x800ae9 <myDns+0x2>
     38e:	50 91 ea 0a 	lds	r21, 0x0AEA	; 0x800aea <myDns+0x3>
     392:	60 91 eb 0a 	lds	r22, 0x0AEB	; 0x800aeb <myDns+0x4>
     396:	70 91 ec 0a 	lds	r23, 0x0AEC	; 0x800aec <myDns+0x5>
     39a:	4f 87       	std	Y+15, r20	; 0x0f
     39c:	58 8b       	std	Y+16, r21	; 0x10
     39e:	69 8b       	std	Y+17, r22	; 0x11
     3a0:	7a 8b       	std	Y+18, r23	; 0x12
     3a2:	9c 8b       	std	Y+20, r25	; 0x14
     3a4:	8b 8b       	std	Y+19, r24	; 0x13
     3a6:	80 91 ef 0a 	lds	r24, 0x0AEF	; 0x800aef <ipCCEC+0x2>
     3aa:	90 91 f0 0a 	lds	r25, 0x0AF0	; 0x800af0 <ipCCEC+0x3>
     3ae:	a0 91 f1 0a 	lds	r26, 0x0AF1	; 0x800af1 <ipCCEC+0x4>
     3b2:	b0 91 f2 0a 	lds	r27, 0x0AF2	; 0x800af2 <ipCCEC+0x5>
     3b6:	8d 8b       	std	Y+21, r24	; 0x15
     3b8:	9e 8b       	std	Y+22, r25	; 0x16
     3ba:	af 8b       	std	Y+23, r26	; 0x17
     3bc:	b8 8f       	std	Y+24, r27	; 0x18
     3be:	ce 01       	movw	r24, r28
     3c0:	01 96       	adiw	r24, 0x01	; 1
     3c2:	7c 01       	movw	r14, r24
     3c4:	8e 01       	movw	r16, r28
     3c6:	09 5f       	subi	r16, 0xF9	; 249
     3c8:	1f 4f       	sbci	r17, 0xFF	; 255
     3ca:	9e 01       	movw	r18, r28
     3cc:	23 5f       	subi	r18, 0xF3	; 243
     3ce:	3f 4f       	sbci	r19, 0xFF	; 255
     3d0:	ae 01       	movw	r20, r28
     3d2:	4d 5e       	subi	r20, 0xED	; 237
     3d4:	5f 4f       	sbci	r21, 0xFF	; 255
     3d6:	62 e3       	ldi	r22, 0x32	; 50
     3d8:	71 e0       	ldi	r23, 0x01	; 1
     3da:	85 e3       	ldi	r24, 0x35	; 53
     3dc:	9c e0       	ldi	r25, 0x0C	; 12
     3de:	0e 94 af 28 	call	0x515e	; 0x515e <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_>
     3e2:	68 96       	adiw	r28, 0x18	; 24
     3e4:	0f b6       	in	r0, 0x3f	; 63
     3e6:	f8 94       	cli
     3e8:	de bf       	out	0x3e, r29	; 62
     3ea:	0f be       	out	0x3f, r0	; 63
     3ec:	cd bf       	out	0x3d, r28	; 61
     3ee:	df 91       	pop	r29
     3f0:	cf 91       	pop	r28
     3f2:	1f 91       	pop	r17
     3f4:	0f 91       	pop	r16
     3f6:	ff 90       	pop	r15
     3f8:	ef 90       	pop	r14
     3fa:	08 95       	ret

000003fc <_Z11my_delay_msi>:
     3fc:	18 16       	cp	r1, r24
     3fe:	19 06       	cpc	r1, r25
     400:	44 f4       	brge	.+16     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     402:	ef e9       	ldi	r30, 0x9F	; 159
     404:	ff e0       	ldi	r31, 0x0F	; 15
     406:	31 97       	sbiw	r30, 0x01	; 1
     408:	f1 f7       	brne	.-4      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     40a:	00 c0       	rjmp	.+0      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     40c:	00 00       	nop
     40e:	01 97       	sbiw	r24, 0x01	; 1
     410:	f5 cf       	rjmp	.-22     	; 0x3fc <_Z11my_delay_msi>
     412:	08 95       	ret

00000414 <_Z9printLinev>:
     414:	cf 93       	push	r28
     416:	88 e3       	ldi	r24, 0x38	; 56
     418:	9d e0       	ldi	r25, 0x0D	; 13
     41a:	0e 94 ac 39 	call	0x7358	; 0x7358 <_ZN5Print7printlnEv>
     41e:	cd e7       	ldi	r28, 0x7D	; 125
     420:	6c ef       	ldi	r22, 0xFC	; 252
     422:	71 e0       	ldi	r23, 0x01	; 1
     424:	88 e3       	ldi	r24, 0x38	; 56
     426:	9d e0       	ldi	r25, 0x0D	; 13
     428:	0e 94 a4 39 	call	0x7348	; 0x7348 <_ZN5Print5printEPKc>
     42c:	c1 50       	subi	r28, 0x01	; 1
     42e:	c1 f7       	brne	.-16     	; 0x420 <_Z9printLinev+0xc>
     430:	88 e3       	ldi	r24, 0x38	; 56
     432:	9d e0       	ldi	r25, 0x0D	; 13
     434:	cf 91       	pop	r28
     436:	0c 94 ac 39 	jmp	0x7358	; 0x7358 <_ZN5Print7printlnEv>

0000043a <_Z8printTabh>:
     43a:	cf 93       	push	r28
     43c:	df 93       	push	r29
     43e:	d8 2f       	mov	r29, r24
     440:	c0 e0       	ldi	r28, 0x00	; 0
     442:	cd 17       	cp	r28, r29
     444:	41 f0       	breq	.+16     	; 0x456 <_Z8printTabh+0x1c>
     446:	6e ef       	ldi	r22, 0xFE	; 254
     448:	71 e0       	ldi	r23, 0x01	; 1
     44a:	88 e3       	ldi	r24, 0x38	; 56
     44c:	9d e0       	ldi	r25, 0x0D	; 13
     44e:	0e 94 a4 39 	call	0x7348	; 0x7348 <_ZN5Print5printEPKc>
     452:	cf 5f       	subi	r28, 0xFF	; 255
     454:	f6 cf       	rjmp	.-20     	; 0x442 <_Z8printTabh+0x8>
     456:	df 91       	pop	r29
     458:	cf 91       	pop	r28
     45a:	08 95       	ret

0000045c <_Z4passb>:
     45c:	cf 93       	push	r28
     45e:	c8 2f       	mov	r28, r24
     460:	81 e0       	ldi	r24, 0x01	; 1
     462:	eb df       	rcall	.-42     	; 0x43a <_Z8printTabh>
     464:	60 e0       	ldi	r22, 0x00	; 0
     466:	72 e0       	ldi	r23, 0x02	; 2
     468:	88 e3       	ldi	r24, 0x38	; 56
     46a:	9d e0       	ldi	r25, 0x0D	; 13
     46c:	0e 94 a4 39 	call	0x7348	; 0x7348 <_ZN5Print5printEPKc>
     470:	cc 23       	and	r28, r28
     472:	19 f0       	breq	.+6      	; 0x47a <_Z4passb+0x1e>
     474:	64 e0       	ldi	r22, 0x04	; 4
     476:	72 e0       	ldi	r23, 0x02	; 2
     478:	02 c0       	rjmp	.+4      	; 0x47e <_Z4passb+0x22>
     47a:	69 e0       	ldi	r22, 0x09	; 9
     47c:	72 e0       	ldi	r23, 0x02	; 2
     47e:	88 e3       	ldi	r24, 0x38	; 56
     480:	9d e0       	ldi	r25, 0x0D	; 13
     482:	0e 94 a4 39 	call	0x7348	; 0x7348 <_ZN5Print5printEPKc>
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	cf 91       	pop	r28
     48a:	d7 cf       	rjmp	.-82     	; 0x43a <_Z8printTabh>

0000048c <_Z26write_eeprom_string_struct20ParametriCCEC_struct>:
     48c:	8f 92       	push	r8
     48e:	9f 92       	push	r9
     490:	af 92       	push	r10
     492:	bf 92       	push	r11
     494:	cf 92       	push	r12
     496:	df 92       	push	r13
     498:	ef 92       	push	r14
     49a:	ff 92       	push	r15
     49c:	0f 93       	push	r16
     49e:	1f 93       	push	r17
     4a0:	cf 93       	push	r28
     4a2:	df 93       	push	r29
     4a4:	cd b7       	in	r28, 0x3d	; 61
     4a6:	de b7       	in	r29, 0x3e	; 62
     4a8:	2c 97       	sbiw	r28, 0x0c	; 12
     4aa:	0f b6       	in	r0, 0x3f	; 63
     4ac:	f8 94       	cli
     4ae:	de bf       	out	0x3e, r29	; 62
     4b0:	0f be       	out	0x3f, r0	; 63
     4b2:	cd bf       	out	0x3d, r28	; 61
     4b4:	5c 01       	movw	r10, r24
     4b6:	8d b6       	in	r8, 0x3d	; 61
     4b8:	9e b6       	in	r9, 0x3e	; 62
     4ba:	fc 01       	movw	r30, r24
     4bc:	c2 84       	ldd	r12, Z+10	; 0x0a
     4be:	d3 84       	ldd	r13, Z+11	; 0x0b
     4c0:	8d b7       	in	r24, 0x3d	; 61
     4c2:	9e b7       	in	r25, 0x3e	; 62
     4c4:	8c 19       	sub	r24, r12
     4c6:	9d 09       	sbc	r25, r13
     4c8:	0f b6       	in	r0, 0x3f	; 63
     4ca:	f8 94       	cli
     4cc:	9e bf       	out	0x3e, r25	; 62
     4ce:	0f be       	out	0x3f, r0	; 63
     4d0:	8d bf       	out	0x3d, r24	; 61
     4d2:	0d b7       	in	r16, 0x3d	; 61
     4d4:	1e b7       	in	r17, 0x3e	; 62
     4d6:	0f 5f       	subi	r16, 0xFF	; 255
     4d8:	1f 4f       	sbci	r17, 0xFF	; 255
     4da:	a6 01       	movw	r20, r12
     4dc:	4f 5f       	subi	r20, 0xFF	; 255
     4de:	5f 4f       	sbci	r21, 0xFF	; 255
     4e0:	20 e0       	ldi	r18, 0x00	; 0
     4e2:	30 e0       	ldi	r19, 0x00	; 0
     4e4:	b8 01       	movw	r22, r16
     4e6:	c5 01       	movw	r24, r10
     4e8:	06 96       	adiw	r24, 0x06	; 6
     4ea:	0e 94 91 3e 	call	0x7d22	; 0x7d22 <_ZNK6String8getBytesEPhjj>
     4ee:	4a e0       	ldi	r20, 0x0A	; 10
     4f0:	b6 01       	movw	r22, r12
     4f2:	ce 01       	movw	r24, r28
     4f4:	07 96       	adiw	r24, 0x07	; 7
     4f6:	0e 94 40 3d 	call	0x7a80	; 0x7a80 <_ZN6StringC1Eih>
     4fa:	6e e0       	ldi	r22, 0x0E	; 14
     4fc:	72 e0       	ldi	r23, 0x02	; 2
     4fe:	ce 01       	movw	r24, r28
     500:	01 96       	adiw	r24, 0x01	; 1
     502:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
     506:	be 01       	movw	r22, r28
     508:	69 5f       	subi	r22, 0xF9	; 249
     50a:	7f 4f       	sbci	r23, 0xFF	; 255
     50c:	ce 01       	movw	r24, r28
     50e:	01 96       	adiw	r24, 0x01	; 1
     510:	0e 94 3f 3e 	call	0x7c7e	; 0x7c7e <_ZplRK15StringSumHelperRK6String>
     514:	bc 01       	movw	r22, r24
     516:	88 e3       	ldi	r24, 0x38	; 56
     518:	9d e0       	ldi	r25, 0x0D	; 13
     51a:	0e 94 bf 39 	call	0x737e	; 0x737e <_ZN5Print7printlnERK6String>
     51e:	ce 01       	movw	r24, r28
     520:	01 96       	adiw	r24, 0x01	; 1
     522:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
     526:	ce 01       	movw	r24, r28
     528:	07 96       	adiw	r24, 0x07	; 7
     52a:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
     52e:	65 e1       	ldi	r22, 0x15	; 21
     530:	72 e0       	ldi	r23, 0x02	; 2
     532:	88 e3       	ldi	r24, 0x38	; 56
     534:	9d e0       	ldi	r25, 0x0D	; 13
     536:	0e 94 cf 39 	call	0x739e	; 0x739e <_ZN5Print7printlnEPKc>
     53a:	62 e0       	ldi	r22, 0x02	; 2
     53c:	72 e0       	ldi	r23, 0x02	; 2
     53e:	88 e3       	ldi	r24, 0x38	; 56
     540:	9d e0       	ldi	r25, 0x0D	; 13
     542:	0e 94 cf 39 	call	0x739e	; 0x739e <_ZN5Print7printlnEPKc>
     546:	f5 01       	movw	r30, r10
     548:	e4 84       	ldd	r14, Z+12	; 0x0c
     54a:	f5 84       	ldd	r15, Z+13	; 0x0d
     54c:	f5 01       	movw	r30, r10
     54e:	84 85       	ldd	r24, Z+12	; 0x0c
     550:	95 85       	ldd	r25, Z+13	; 0x0d
     552:	8c 0d       	add	r24, r12
     554:	9d 1d       	adc	r25, r13
     556:	e8 16       	cp	r14, r24
     558:	f9 06       	cpc	r15, r25
     55a:	64 f4       	brge	.+24     	; 0x574 <_Z26write_eeprom_string_struct20ParametriCCEC_struct+0xe8>
     55c:	f8 01       	movw	r30, r16
     55e:	61 91       	ld	r22, Z+
     560:	8f 01       	movw	r16, r30
     562:	66 23       	and	r22, r22
     564:	19 f0       	breq	.+6      	; 0x56c <_Z26write_eeprom_string_struct20ParametriCCEC_struct+0xe0>
     566:	c7 01       	movw	r24, r14
     568:	0e 94 14 46 	call	0x8c28	; 0x8c28 <eeprom_write_byte>
     56c:	ff ef       	ldi	r31, 0xFF	; 255
     56e:	ef 1a       	sub	r14, r31
     570:	ff 0a       	sbc	r15, r31
     572:	ec cf       	rjmp	.-40     	; 0x54c <_Z26write_eeprom_string_struct20ParametriCCEC_struct+0xc0>
     574:	62 e0       	ldi	r22, 0x02	; 2
     576:	72 e0       	ldi	r23, 0x02	; 2
     578:	88 e3       	ldi	r24, 0x38	; 56
     57a:	9d e0       	ldi	r25, 0x0D	; 13
     57c:	0e 94 cf 39 	call	0x739e	; 0x739e <_ZN5Print7printlnEPKc>
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	0f b6       	in	r0, 0x3f	; 63
     584:	f8 94       	cli
     586:	9e be       	out	0x3e, r9	; 62
     588:	0f be       	out	0x3f, r0	; 63
     58a:	8d be       	out	0x3d, r8	; 61
     58c:	2c 96       	adiw	r28, 0x0c	; 12
     58e:	0f b6       	in	r0, 0x3f	; 63
     590:	f8 94       	cli
     592:	de bf       	out	0x3e, r29	; 62
     594:	0f be       	out	0x3f, r0	; 63
     596:	cd bf       	out	0x3d, r28	; 61
     598:	df 91       	pop	r29
     59a:	cf 91       	pop	r28
     59c:	1f 91       	pop	r17
     59e:	0f 91       	pop	r16
     5a0:	ff 90       	pop	r15
     5a2:	ef 90       	pop	r14
     5a4:	df 90       	pop	r13
     5a6:	cf 90       	pop	r12
     5a8:	bf 90       	pop	r11
     5aa:	af 90       	pop	r10
     5ac:	9f 90       	pop	r9
     5ae:	8f 90       	pop	r8
     5b0:	08 95       	ret

000005b2 <_Z11clearEEPROMii>:
     5b2:	0f 93       	push	r16
     5b4:	1f 93       	push	r17
     5b6:	cf 93       	push	r28
     5b8:	df 93       	push	r29
     5ba:	ec 01       	movw	r28, r24
     5bc:	8b 01       	movw	r16, r22
     5be:	62 e0       	ldi	r22, 0x02	; 2
     5c0:	72 e0       	ldi	r23, 0x02	; 2
     5c2:	88 e3       	ldi	r24, 0x38	; 56
     5c4:	9d e0       	ldi	r25, 0x0D	; 13
     5c6:	0e 94 cf 39 	call	0x739e	; 0x739e <_ZN5Print7printlnEPKc>
     5ca:	62 e0       	ldi	r22, 0x02	; 2
     5cc:	72 e0       	ldi	r23, 0x02	; 2
     5ce:	88 e3       	ldi	r24, 0x38	; 56
     5d0:	9d e0       	ldi	r25, 0x0D	; 13
     5d2:	0e 94 cf 39 	call	0x739e	; 0x739e <_ZN5Print7printlnEPKc>
     5d6:	63 e3       	ldi	r22, 0x33	; 51
     5d8:	72 e0       	ldi	r23, 0x02	; 2
     5da:	88 e3       	ldi	r24, 0x38	; 56
     5dc:	9d e0       	ldi	r25, 0x0D	; 13
     5de:	0e 94 cf 39 	call	0x739e	; 0x739e <_ZN5Print7printlnEPKc>
     5e2:	c0 17       	cp	r28, r16
     5e4:	d1 07       	cpc	r29, r17
     5e6:	34 f4       	brge	.+12     	; 0x5f4 <_Z11clearEEPROMii+0x42>
     5e8:	60 e0       	ldi	r22, 0x00	; 0
     5ea:	ce 01       	movw	r24, r28
     5ec:	0e 94 14 46 	call	0x8c28	; 0x8c28 <eeprom_write_byte>
     5f0:	21 96       	adiw	r28, 0x01	; 1
     5f2:	f7 cf       	rjmp	.-18     	; 0x5e2 <_Z11clearEEPROMii+0x30>
     5f4:	60 e5       	ldi	r22, 0x50	; 80
     5f6:	72 e0       	ldi	r23, 0x02	; 2
     5f8:	88 e3       	ldi	r24, 0x38	; 56
     5fa:	9d e0       	ldi	r25, 0x0D	; 13
     5fc:	0e 94 cf 39 	call	0x739e	; 0x739e <_ZN5Print7printlnEPKc>
     600:	62 e0       	ldi	r22, 0x02	; 2
     602:	72 e0       	ldi	r23, 0x02	; 2
     604:	88 e3       	ldi	r24, 0x38	; 56
     606:	9d e0       	ldi	r25, 0x0D	; 13
     608:	0e 94 cf 39 	call	0x739e	; 0x739e <_ZN5Print7printlnEPKc>
     60c:	62 e0       	ldi	r22, 0x02	; 2
     60e:	72 e0       	ldi	r23, 0x02	; 2
     610:	88 e3       	ldi	r24, 0x38	; 56
     612:	9d e0       	ldi	r25, 0x0D	; 13
     614:	df 91       	pop	r29
     616:	cf 91       	pop	r28
     618:	1f 91       	pop	r17
     61a:	0f 91       	pop	r16
     61c:	0c 94 cf 39 	jmp	0x739e	; 0x739e <_ZN5Print7printlnEPKc>

00000620 <_Z7WDT_offv>:
     620:	f8 94       	cli
     622:	84 b7       	in	r24, 0x34	; 52
     624:	87 7f       	andi	r24, 0xF7	; 247
     626:	84 bf       	out	0x34, r24	; 52
     628:	e0 e6       	ldi	r30, 0x60	; 96
     62a:	f0 e0       	ldi	r31, 0x00	; 0
     62c:	80 81       	ld	r24, Z
     62e:	88 61       	ori	r24, 0x18	; 24
     630:	80 83       	st	Z, r24
     632:	10 82       	st	Z, r1
     634:	78 94       	sei
     636:	08 95       	ret

00000638 <_Z18WDT_Prescaler_8Secv>:
     638:	f8 94       	cli
     63a:	e0 e6       	ldi	r30, 0x60	; 96
     63c:	f0 e0       	ldi	r31, 0x00	; 0
     63e:	80 81       	ld	r24, Z
     640:	88 65       	ori	r24, 0x58	; 88
     642:	80 83       	st	Z, r24
     644:	89 e6       	ldi	r24, 0x69	; 105
     646:	80 83       	st	Z, r24
     648:	78 94       	sei
     64a:	08 95       	ret

0000064c <_ZN20ParametriCCEC_structC1ERKS_>:
     64c:	0f 93       	push	r16
     64e:	1f 93       	push	r17
     650:	cf 93       	push	r28
     652:	df 93       	push	r29
     654:	ec 01       	movw	r28, r24
     656:	8b 01       	movw	r16, r22
     658:	0e 94 d6 3c 	call	0x79ac	; 0x79ac <_ZN6StringC1ERKS_>
     65c:	b8 01       	movw	r22, r16
     65e:	6a 5f       	subi	r22, 0xFA	; 250
     660:	7f 4f       	sbci	r23, 0xFF	; 255
     662:	ce 01       	movw	r24, r28
     664:	06 96       	adiw	r24, 0x06	; 6
     666:	0e 94 d6 3c 	call	0x79ac	; 0x79ac <_ZN6StringC1ERKS_>
     66a:	f8 01       	movw	r30, r16
     66c:	84 85       	ldd	r24, Z+12	; 0x0c
     66e:	95 85       	ldd	r25, Z+13	; 0x0d
     670:	9d 87       	std	Y+13, r25	; 0x0d
     672:	8c 87       	std	Y+12, r24	; 0x0c
     674:	df 91       	pop	r29
     676:	cf 91       	pop	r28
     678:	1f 91       	pop	r17
     67a:	0f 91       	pop	r16
     67c:	08 95       	ret

0000067e <_ZN20ParametriCCEC_structD1Ev>:
     67e:	cf 93       	push	r28
     680:	df 93       	push	r29
     682:	ec 01       	movw	r28, r24
     684:	06 96       	adiw	r24, 0x06	; 6
     686:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
     68a:	ce 01       	movw	r24, r28
     68c:	df 91       	pop	r29
     68e:	cf 91       	pop	r28
     690:	0c 94 03 3c 	jmp	0x7806	; 0x7806 <_ZN6StringD1Ev>

00000694 <_Z6Buzzerhm>:
     694:	cf 92       	push	r12
     696:	df 92       	push	r13
     698:	ef 92       	push	r14
     69a:	ff 92       	push	r15
     69c:	0f 93       	push	r16
     69e:	1f 93       	push	r17
     6a0:	cf 93       	push	r28
     6a2:	df 93       	push	r29
     6a4:	6a 01       	movw	r12, r20
     6a6:	7b 01       	movw	r14, r22
     6a8:	c0 e0       	ldi	r28, 0x00	; 0
     6aa:	d0 e0       	ldi	r29, 0x00	; 0
     6ac:	08 2f       	mov	r16, r24
     6ae:	10 e0       	ldi	r17, 0x00	; 0
     6b0:	c0 17       	cp	r28, r16
     6b2:	d1 07       	cpc	r29, r17
     6b4:	24 f4       	brge	.+8      	; 0x6be <_Z6Buzzerhm+0x2a>
     6b6:	c6 01       	movw	r24, r12
     6b8:	a1 de       	rcall	.-702    	; 0x3fc <_Z11my_delay_msi>
     6ba:	21 96       	adiw	r28, 0x01	; 1
     6bc:	f9 cf       	rjmp	.-14     	; 0x6b0 <_Z6Buzzerhm+0x1c>
     6be:	df 91       	pop	r29
     6c0:	cf 91       	pop	r28
     6c2:	1f 91       	pop	r17
     6c4:	0f 91       	pop	r16
     6c6:	ff 90       	pop	r15
     6c8:	ef 90       	pop	r14
     6ca:	df 90       	pop	r13
     6cc:	cf 90       	pop	r12
     6ce:	08 95       	ret

000006d0 <_Z13getCharKeypadi>:
     6d0:	82 32       	cpi	r24, 0x22	; 34
     6d2:	91 05       	cpc	r25, r1
     6d4:	09 f4       	brne	.+2      	; 0x6d8 <_Z13getCharKeypadi+0x8>
     6d6:	9a c0       	rjmp	.+308    	; 0x80c <_Z13getCharKeypadi+0x13c>
     6d8:	6c f5       	brge	.+90     	; 0x734 <_Z13getCharKeypadi+0x64>
     6da:	8a 30       	cpi	r24, 0x0A	; 10
     6dc:	91 05       	cpc	r25, r1
     6de:	09 f4       	brne	.+2      	; 0x6e2 <_Z13getCharKeypadi+0x12>
     6e0:	83 c0       	rjmp	.+262    	; 0x7e8 <_Z13getCharKeypadi+0x118>
     6e2:	a4 f4       	brge	.+40     	; 0x70c <_Z13getCharKeypadi+0x3c>
     6e4:	86 30       	cpi	r24, 0x06	; 6
     6e6:	91 05       	cpc	r25, r1
     6e8:	09 f4       	brne	.+2      	; 0x6ec <_Z13getCharKeypadi+0x1c>
     6ea:	75 c0       	rjmp	.+234    	; 0x7d6 <_Z13getCharKeypadi+0x106>
     6ec:	89 30       	cpi	r24, 0x09	; 9
     6ee:	91 05       	cpc	r25, r1
     6f0:	09 f4       	brne	.+2      	; 0x6f4 <_Z13getCharKeypadi+0x24>
     6f2:	5d c0       	rjmp	.+186    	; 0x7ae <_Z13getCharKeypadi+0xde>
     6f4:	05 97       	sbiw	r24, 0x05	; 5
     6f6:	09 f0       	breq	.+2      	; 0x6fa <_Z13getCharKeypadi+0x2a>
     6f8:	cf c0       	rjmp	.+414    	; 0x898 <_Z13getCharKeypadi+0x1c8>
     6fa:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <MappaKeys>
     6fe:	88 e3       	ldi	r24, 0x38	; 56
     700:	9d e0       	ldi	r25, 0x0D	; 13
     702:	0e 94 a5 39 	call	0x734a	; 0x734a <_ZN5Print5printEc>
     706:	20 e0       	ldi	r18, 0x00	; 0
     708:	30 e0       	ldi	r19, 0x00	; 0
     70a:	59 c0       	rjmp	.+178    	; 0x7be <_Z13getCharKeypadi+0xee>
     70c:	82 31       	cpi	r24, 0x12	; 18
     70e:	91 05       	cpc	r25, r1
     710:	09 f4       	brne	.+2      	; 0x714 <_Z13getCharKeypadi+0x44>
     712:	73 c0       	rjmp	.+230    	; 0x7fa <_Z13getCharKeypadi+0x12a>
     714:	81 32       	cpi	r24, 0x21	; 33
     716:	91 05       	cpc	r25, r1
     718:	09 f4       	brne	.+2      	; 0x71c <_Z13getCharKeypadi+0x4c>
     71a:	54 c0       	rjmp	.+168    	; 0x7c4 <_Z13getCharKeypadi+0xf4>
     71c:	41 97       	sbiw	r24, 0x11	; 17
     71e:	09 f0       	breq	.+2      	; 0x722 <_Z13getCharKeypadi+0x52>
     720:	bb c0       	rjmp	.+374    	; 0x898 <_Z13getCharKeypadi+0x1c8>
     722:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <MappaKeys+0x2>
     726:	88 e3       	ldi	r24, 0x38	; 56
     728:	9d e0       	ldi	r25, 0x0D	; 13
     72a:	0e 94 a5 39 	call	0x734a	; 0x734a <_ZN5Print5printEc>
     72e:	22 e0       	ldi	r18, 0x02	; 2
     730:	30 e0       	ldi	r19, 0x00	; 0
     732:	45 c0       	rjmp	.+138    	; 0x7be <_Z13getCharKeypadi+0xee>
     734:	80 36       	cpi	r24, 0x60	; 96
     736:	91 05       	cpc	r25, r1
     738:	09 f4       	brne	.+2      	; 0x73c <_Z13getCharKeypadi+0x6c>
     73a:	99 c0       	rjmp	.+306    	; 0x86e <_Z13getCharKeypadi+0x19e>
     73c:	ac f4       	brge	.+42     	; 0x768 <_Z13getCharKeypadi+0x98>
     73e:	88 34       	cpi	r24, 0x48	; 72
     740:	91 05       	cpc	r25, r1
     742:	09 f4       	brne	.+2      	; 0x746 <_Z13getCharKeypadi+0x76>
     744:	82 c0       	rjmp	.+260    	; 0x84a <_Z13getCharKeypadi+0x17a>
     746:	80 35       	cpi	r24, 0x50	; 80
     748:	91 05       	cpc	r25, r1
     74a:	09 f4       	brne	.+2      	; 0x74e <_Z13getCharKeypadi+0x7e>
     74c:	87 c0       	rjmp	.+270    	; 0x85c <_Z13getCharKeypadi+0x18c>
     74e:	84 34       	cpi	r24, 0x44	; 68
     750:	91 05       	cpc	r25, r1
     752:	09 f0       	breq	.+2      	; 0x756 <_Z13getCharKeypadi+0x86>
     754:	a1 c0       	rjmp	.+322    	; 0x898 <_Z13getCharKeypadi+0x1c8>
     756:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <MappaKeys+0xc>
     75a:	88 e3       	ldi	r24, 0x38	; 56
     75c:	9d e0       	ldi	r25, 0x0D	; 13
     75e:	0e 94 a5 39 	call	0x734a	; 0x734a <_ZN5Print5printEc>
     762:	20 e0       	ldi	r18, 0x00	; 0
     764:	30 e0       	ldi	r19, 0x00	; 0
     766:	8b c0       	rjmp	.+278    	; 0x87e <_Z13getCharKeypadi+0x1ae>
     768:	88 38       	cpi	r24, 0x88	; 136
     76a:	91 05       	cpc	r25, r1
     76c:	09 f4       	brne	.+2      	; 0x770 <_Z13getCharKeypadi+0xa0>
     76e:	59 c0       	rjmp	.+178    	; 0x822 <_Z13getCharKeypadi+0x152>
     770:	6c f4       	brge	.+26     	; 0x78c <_Z13getCharKeypadi+0xbc>
     772:	84 38       	cpi	r24, 0x84	; 132
     774:	91 05       	cpc	r25, r1
     776:	09 f0       	breq	.+2      	; 0x77a <_Z13getCharKeypadi+0xaa>
     778:	8f c0       	rjmp	.+286    	; 0x898 <_Z13getCharKeypadi+0x1c8>
     77a:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <MappaKeys+0x8>
     77e:	88 e3       	ldi	r24, 0x38	; 56
     780:	9d e0       	ldi	r25, 0x0D	; 13
     782:	0e 94 a5 39 	call	0x734a	; 0x734a <_ZN5Print5printEc>
     786:	20 e0       	ldi	r18, 0x00	; 0
     788:	30 e0       	ldi	r19, 0x00	; 0
     78a:	5c c0       	rjmp	.+184    	; 0x844 <_Z13getCharKeypadi+0x174>
     78c:	80 39       	cpi	r24, 0x90	; 144
     78e:	91 05       	cpc	r25, r1
     790:	09 f4       	brne	.+2      	; 0x794 <_Z13getCharKeypadi+0xc4>
     792:	50 c0       	rjmp	.+160    	; 0x834 <_Z13getCharKeypadi+0x164>
     794:	80 3a       	cpi	r24, 0xA0	; 160
     796:	91 05       	cpc	r25, r1
     798:	09 f0       	breq	.+2      	; 0x79c <_Z13getCharKeypadi+0xcc>
     79a:	7e c0       	rjmp	.+252    	; 0x898 <_Z13getCharKeypadi+0x1c8>
     79c:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <MappaKeys+0xb>
     7a0:	88 e3       	ldi	r24, 0x38	; 56
     7a2:	9d e0       	ldi	r25, 0x0D	; 13
     7a4:	0e 94 a5 39 	call	0x734a	; 0x734a <_ZN5Print5printEc>
     7a8:	23 e0       	ldi	r18, 0x03	; 3
     7aa:	30 e0       	ldi	r19, 0x00	; 0
     7ac:	4b c0       	rjmp	.+150    	; 0x844 <_Z13getCharKeypadi+0x174>
     7ae:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <MappaKeys+0x1>
     7b2:	88 e3       	ldi	r24, 0x38	; 56
     7b4:	9d e0       	ldi	r25, 0x0D	; 13
     7b6:	0e 94 a5 39 	call	0x734a	; 0x734a <_ZN5Print5printEc>
     7ba:	21 e0       	ldi	r18, 0x01	; 1
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	80 e0       	ldi	r24, 0x00	; 0
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	5f c0       	rjmp	.+190    	; 0x882 <_Z13getCharKeypadi+0x1b2>
     7c4:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <MappaKeys+0x3>
     7c8:	88 e3       	ldi	r24, 0x38	; 56
     7ca:	9d e0       	ldi	r25, 0x0D	; 13
     7cc:	0e 94 a5 39 	call	0x734a	; 0x734a <_ZN5Print5printEc>
     7d0:	23 e0       	ldi	r18, 0x03	; 3
     7d2:	30 e0       	ldi	r19, 0x00	; 0
     7d4:	f4 cf       	rjmp	.-24     	; 0x7be <_Z13getCharKeypadi+0xee>
     7d6:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <MappaKeys+0x4>
     7da:	88 e3       	ldi	r24, 0x38	; 56
     7dc:	9d e0       	ldi	r25, 0x0D	; 13
     7de:	0e 94 a5 39 	call	0x734a	; 0x734a <_ZN5Print5printEc>
     7e2:	20 e0       	ldi	r18, 0x00	; 0
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	1a c0       	rjmp	.+52     	; 0x81c <_Z13getCharKeypadi+0x14c>
     7e8:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <MappaKeys+0x5>
     7ec:	88 e3       	ldi	r24, 0x38	; 56
     7ee:	9d e0       	ldi	r25, 0x0D	; 13
     7f0:	0e 94 a5 39 	call	0x734a	; 0x734a <_ZN5Print5printEc>
     7f4:	21 e0       	ldi	r18, 0x01	; 1
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	11 c0       	rjmp	.+34     	; 0x81c <_Z13getCharKeypadi+0x14c>
     7fa:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <MappaKeys+0x6>
     7fe:	88 e3       	ldi	r24, 0x38	; 56
     800:	9d e0       	ldi	r25, 0x0D	; 13
     802:	0e 94 a5 39 	call	0x734a	; 0x734a <_ZN5Print5printEc>
     806:	22 e0       	ldi	r18, 0x02	; 2
     808:	30 e0       	ldi	r19, 0x00	; 0
     80a:	08 c0       	rjmp	.+16     	; 0x81c <_Z13getCharKeypadi+0x14c>
     80c:	60 91 0d 01 	lds	r22, 0x010D	; 0x80010d <MappaKeys+0x7>
     810:	88 e3       	ldi	r24, 0x38	; 56
     812:	9d e0       	ldi	r25, 0x0D	; 13
     814:	0e 94 a5 39 	call	0x734a	; 0x734a <_ZN5Print5printEc>
     818:	23 e0       	ldi	r18, 0x03	; 3
     81a:	30 e0       	ldi	r19, 0x00	; 0
     81c:	81 e0       	ldi	r24, 0x01	; 1
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	30 c0       	rjmp	.+96     	; 0x882 <_Z13getCharKeypadi+0x1b2>
     822:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <MappaKeys+0x9>
     826:	88 e3       	ldi	r24, 0x38	; 56
     828:	9d e0       	ldi	r25, 0x0D	; 13
     82a:	0e 94 a5 39 	call	0x734a	; 0x734a <_ZN5Print5printEc>
     82e:	21 e0       	ldi	r18, 0x01	; 1
     830:	30 e0       	ldi	r19, 0x00	; 0
     832:	08 c0       	rjmp	.+16     	; 0x844 <_Z13getCharKeypadi+0x174>
     834:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <MappaKeys+0xa>
     838:	88 e3       	ldi	r24, 0x38	; 56
     83a:	9d e0       	ldi	r25, 0x0D	; 13
     83c:	0e 94 a5 39 	call	0x734a	; 0x734a <_ZN5Print5printEc>
     840:	22 e0       	ldi	r18, 0x02	; 2
     842:	30 e0       	ldi	r19, 0x00	; 0
     844:	82 e0       	ldi	r24, 0x02	; 2
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	1c c0       	rjmp	.+56     	; 0x882 <_Z13getCharKeypadi+0x1b2>
     84a:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <MappaKeys+0xd>
     84e:	88 e3       	ldi	r24, 0x38	; 56
     850:	9d e0       	ldi	r25, 0x0D	; 13
     852:	0e 94 a5 39 	call	0x734a	; 0x734a <_ZN5Print5printEc>
     856:	21 e0       	ldi	r18, 0x01	; 1
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	11 c0       	rjmp	.+34     	; 0x87e <_Z13getCharKeypadi+0x1ae>
     85c:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <MappaKeys+0xe>
     860:	88 e3       	ldi	r24, 0x38	; 56
     862:	9d e0       	ldi	r25, 0x0D	; 13
     864:	0e 94 a5 39 	call	0x734a	; 0x734a <_ZN5Print5printEc>
     868:	22 e0       	ldi	r18, 0x02	; 2
     86a:	30 e0       	ldi	r19, 0x00	; 0
     86c:	08 c0       	rjmp	.+16     	; 0x87e <_Z13getCharKeypadi+0x1ae>
     86e:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <MappaKeys+0xf>
     872:	88 e3       	ldi	r24, 0x38	; 56
     874:	9d e0       	ldi	r25, 0x0D	; 13
     876:	0e 94 a5 39 	call	0x734a	; 0x734a <_ZN5Print5printEc>
     87a:	23 e0       	ldi	r18, 0x03	; 3
     87c:	30 e0       	ldi	r19, 0x00	; 0
     87e:	83 e0       	ldi	r24, 0x03	; 3
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	88 0f       	add	r24, r24
     884:	99 1f       	adc	r25, r25
     886:	88 0f       	add	r24, r24
     888:	99 1f       	adc	r25, r25
     88a:	8a 5f       	subi	r24, 0xFA	; 250
     88c:	9e 4f       	sbci	r25, 0xFE	; 254
     88e:	fc 01       	movw	r30, r24
     890:	e2 0f       	add	r30, r18
     892:	f3 1f       	adc	r31, r19
     894:	80 81       	ld	r24, Z
     896:	08 95       	ret
     898:	8e e4       	ldi	r24, 0x4E	; 78
     89a:	08 95       	ret

0000089c <_Z10displayLCDP6Stringii>:
     89c:	cf 93       	push	r28
     89e:	df 93       	push	r29
     8a0:	ec 01       	movw	r28, r24
     8a2:	83 e6       	ldi	r24, 0x63	; 99
     8a4:	9b e0       	ldi	r25, 0x0B	; 11
     8a6:	0e 94 14 31 	call	0x6228	; 0x6228 <_ZN3LCD5clearEv>
     8aa:	61 e0       	ldi	r22, 0x01	; 1
     8ac:	83 e6       	ldi	r24, 0x63	; 99
     8ae:	9b e0       	ldi	r25, 0x0B	; 11
     8b0:	0e 94 a5 39 	call	0x734a	; 0x734a <_ZN5Print5printEc>
     8b4:	41 e0       	ldi	r20, 0x01	; 1
     8b6:	60 e0       	ldi	r22, 0x00	; 0
     8b8:	83 e6       	ldi	r24, 0x63	; 99
     8ba:	9b e0       	ldi	r25, 0x0B	; 11
     8bc:	0e 94 1a 31 	call	0x6234	; 0x6234 <_ZN3LCD9setCursorEhh>
     8c0:	be 01       	movw	r22, r28
     8c2:	6a 5f       	subi	r22, 0xFA	; 250
     8c4:	7f 4f       	sbci	r23, 0xFF	; 255
     8c6:	83 e6       	ldi	r24, 0x63	; 99
     8c8:	9b e0       	ldi	r25, 0x0B	; 11
     8ca:	0e 94 96 39 	call	0x732c	; 0x732c <_ZN5Print5printERK6String>
     8ce:	42 e0       	ldi	r20, 0x02	; 2
     8d0:	60 e0       	ldi	r22, 0x00	; 0
     8d2:	83 e6       	ldi	r24, 0x63	; 99
     8d4:	9b e0       	ldi	r25, 0x0B	; 11
     8d6:	0e 94 1a 31 	call	0x6234	; 0x6234 <_ZN3LCD9setCursorEhh>
     8da:	be 01       	movw	r22, r28
     8dc:	64 5f       	subi	r22, 0xF4	; 244
     8de:	7f 4f       	sbci	r23, 0xFF	; 255
     8e0:	83 e6       	ldi	r24, 0x63	; 99
     8e2:	9b e0       	ldi	r25, 0x0B	; 11
     8e4:	0e 94 96 39 	call	0x732c	; 0x732c <_ZN5Print5printERK6String>
     8e8:	43 e0       	ldi	r20, 0x03	; 3
     8ea:	60 e0       	ldi	r22, 0x00	; 0
     8ec:	83 e6       	ldi	r24, 0x63	; 99
     8ee:	9b e0       	ldi	r25, 0x0B	; 11
     8f0:	0e 94 1a 31 	call	0x6234	; 0x6234 <_ZN3LCD9setCursorEhh>
     8f4:	be 01       	movw	r22, r28
     8f6:	6e 5e       	subi	r22, 0xEE	; 238
     8f8:	7f 4f       	sbci	r23, 0xFF	; 255
     8fa:	83 e6       	ldi	r24, 0x63	; 99
     8fc:	9b e0       	ldi	r25, 0x0B	; 11
     8fe:	df 91       	pop	r29
     900:	cf 91       	pop	r28
     902:	0c 94 96 39 	jmp	0x732c	; 0x732c <_ZN5Print5printERK6String>

00000906 <_Z11avanzaStatom>:
     906:	cf 92       	push	r12
     908:	df 92       	push	r13
     90a:	ef 92       	push	r14
     90c:	ff 92       	push	r15
     90e:	6b 01       	movw	r12, r22
     910:	7c 01       	movw	r14, r24
     912:	83 e6       	ldi	r24, 0x63	; 99
     914:	9b e0       	ldi	r25, 0x0B	; 11
     916:	0e 94 14 31 	call	0x6228	; 0x6228 <_ZN3LCD5clearEv>
     91a:	60 91 44 0b 	lds	r22, 0x0B44	; 0x800b44 <stato_procedura>
     91e:	70 91 45 0b 	lds	r23, 0x0B45	; 0x800b45 <stato_procedura+0x1>
     922:	4a e0       	ldi	r20, 0x0A	; 10
     924:	50 e0       	ldi	r21, 0x00	; 0
     926:	83 ef       	ldi	r24, 0xF3	; 243
     928:	9a e0       	ldi	r25, 0x0A	; 10
     92a:	b8 df       	rcall	.-144    	; 0x89c <_Z10displayLCDP6Stringii>
     92c:	c0 92 a9 0a 	sts	0x0AA9, r12	; 0x800aa9 <Timer>
     930:	d0 92 aa 0a 	sts	0x0AAA, r13	; 0x800aaa <Timer+0x1>
     934:	e0 92 ab 0a 	sts	0x0AAB, r14	; 0x800aab <Timer+0x2>
     938:	f0 92 ac 0a 	sts	0x0AAC, r15	; 0x800aac <Timer+0x3>
     93c:	8f e1       	ldi	r24, 0x1F	; 31
     93e:	9e e4       	ldi	r25, 0x4E	; 78
     940:	01 97       	sbiw	r24, 0x01	; 1
     942:	f1 f7       	brne	.-4      	; 0x940 <_Z11avanzaStatom+0x3a>
     944:	00 c0       	rjmp	.+0      	; 0x946 <_Z11avanzaStatom+0x40>
     946:	00 00       	nop
     948:	83 ea       	ldi	r24, 0xA3	; 163
     94a:	9a e0       	ldi	r25, 0x0A	; 10
     94c:	0e 94 7c 23 	call	0x46f8	; 0x46f8 <_ZNK8DateTime11secondstimeEv>
     950:	60 93 ad 0a 	sts	0x0AAD, r22	; 0x800aad <UltimoPassaggioStato>
     954:	70 93 ae 0a 	sts	0x0AAE, r23	; 0x800aae <UltimoPassaggioStato+0x1>
     958:	80 93 af 0a 	sts	0x0AAF, r24	; 0x800aaf <UltimoPassaggioStato+0x2>
     95c:	90 93 b0 0a 	sts	0x0AB0, r25	; 0x800ab0 <UltimoPassaggioStato+0x3>
     960:	8f e1       	ldi	r24, 0x1F	; 31
     962:	9e e4       	ldi	r25, 0x4E	; 78
     964:	01 97       	sbiw	r24, 0x01	; 1
     966:	f1 f7       	brne	.-4      	; 0x964 <_Z11avanzaStatom+0x5e>
     968:	00 c0       	rjmp	.+0      	; 0x96a <_Z11avanzaStatom+0x64>
     96a:	00 00       	nop
     96c:	80 91 44 0b 	lds	r24, 0x0B44	; 0x800b44 <stato_procedura>
     970:	90 91 45 0b 	lds	r25, 0x0B45	; 0x800b45 <stato_procedura+0x1>
     974:	01 96       	adiw	r24, 0x01	; 1
     976:	90 93 45 0b 	sts	0x0B45, r25	; 0x800b45 <stato_procedura+0x1>
     97a:	80 93 44 0b 	sts	0x0B44, r24	; 0x800b44 <stato_procedura>
     97e:	ff 90       	pop	r15
     980:	ef 90       	pop	r14
     982:	df 90       	pop	r13
     984:	cf 90       	pop	r12
     986:	08 95       	ret

00000988 <_Z16scrivi_TAG_MezzoPc>:
     988:	8f 92       	push	r8
     98a:	9f 92       	push	r9
     98c:	af 92       	push	r10
     98e:	bf 92       	push	r11
     990:	cf 92       	push	r12
     992:	df 92       	push	r13
     994:	ef 92       	push	r14
     996:	0f 93       	push	r16
     998:	1f 93       	push	r17
     99a:	cf 93       	push	r28
     99c:	df 93       	push	r29
     99e:	cd b7       	in	r28, 0x3d	; 61
     9a0:	de b7       	in	r29, 0x3e	; 62
     9a2:	a2 97       	sbiw	r28, 0x22	; 34
     9a4:	0f b6       	in	r0, 0x3f	; 63
     9a6:	f8 94       	cli
     9a8:	de bf       	out	0x3e, r29	; 62
     9aa:	0f be       	out	0x3f, r0	; 63
     9ac:	cd bf       	out	0x3d, r28	; 61
     9ae:	5c 01       	movw	r10, r24
     9b0:	4b 01       	movw	r8, r22
     9b2:	6f ef       	ldi	r22, 0xFF	; 255
     9b4:	71 e0       	ldi	r23, 0x01	; 1
     9b6:	ce 01       	movw	r24, r28
     9b8:	4d 96       	adiw	r24, 0x1d	; 29
     9ba:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
     9be:	08 ec       	ldi	r16, 0xC8	; 200
     9c0:	10 e0       	ldi	r17, 0x00	; 0
     9c2:	23 e8       	ldi	r18, 0x83	; 131
     9c4:	3b e0       	ldi	r19, 0x0B	; 11
     9c6:	4c e7       	ldi	r20, 0x7C	; 124
     9c8:	5b e0       	ldi	r21, 0x0B	; 11
     9ca:	60 e0       	ldi	r22, 0x00	; 0
     9cc:	82 e5       	ldi	r24, 0x52	; 82
     9ce:	9b e0       	ldi	r25, 0x0B	; 11
     9d0:	0e 94 f7 20 	call	0x41ee	; 0x41ee <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j>
     9d4:	80 93 84 0b 	sts	0x0B84, r24	; 0x800b84 <success>
     9d8:	88 23       	and	r24, r24
     9da:	09 f4       	brne	.+2      	; 0x9de <_Z16scrivi_TAG_MezzoPc+0x56>
     9dc:	86 c0       	rjmp	.+268    	; 0xaea <_Z16scrivi_TAG_MezzoPc+0x162>
     9de:	80 91 83 0b 	lds	r24, 0x0B83	; 0x800b83 <uidLength>
     9e2:	84 30       	cpi	r24, 0x04	; 4
     9e4:	09 f0       	breq	.+2      	; 0x9e8 <_Z16scrivi_TAG_MezzoPc+0x60>
     9e6:	7b c0       	rjmp	.+246    	; 0xade <_Z16scrivi_TAG_MezzoPc+0x156>
     9e8:	86 e0       	ldi	r24, 0x06	; 6
     9ea:	ed e6       	ldi	r30, 0x6D	; 109
     9ec:	f1 e0       	ldi	r31, 0x01	; 1
     9ee:	de 01       	movw	r26, r28
     9f0:	57 96       	adiw	r26, 0x17	; 23
     9f2:	01 90       	ld	r0, Z+
     9f4:	0d 92       	st	X+, r0
     9f6:	8a 95       	dec	r24
     9f8:	e1 f7       	brne	.-8      	; 0x9f2 <_Z16scrivi_TAG_MezzoPc+0x6a>
     9fa:	ce 01       	movw	r24, r28
     9fc:	47 96       	adiw	r24, 0x17	; 23
     9fe:	6c 01       	movw	r12, r24
     a00:	e1 2c       	mov	r14, r1
     a02:	04 e0       	ldi	r16, 0x04	; 4
     a04:	10 e0       	ldi	r17, 0x00	; 0
     a06:	20 e0       	ldi	r18, 0x00	; 0
     a08:	30 e0       	ldi	r19, 0x00	; 0
     a0a:	44 e0       	ldi	r20, 0x04	; 4
     a0c:	6c e7       	ldi	r22, 0x7C	; 124
     a0e:	7b e0       	ldi	r23, 0x0B	; 11
     a10:	82 e5       	ldi	r24, 0x52	; 82
     a12:	9b e0       	ldi	r25, 0x0B	; 11
     a14:	0e 94 43 21 	call	0x4286	; 0x4286 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_>
     a18:	80 93 84 0b 	sts	0x0B84, r24	; 0x800b84 <success>
     a1c:	88 23       	and	r24, r24
     a1e:	09 f4       	brne	.+2      	; 0xa22 <_Z16scrivi_TAG_MezzoPc+0x9a>
     a20:	54 c0       	rjmp	.+168    	; 0xaca <_Z16scrivi_TAG_MezzoPc+0x142>
     a22:	80 e1       	ldi	r24, 0x10	; 16
     a24:	f4 01       	movw	r30, r8
     a26:	de 01       	movw	r26, r28
     a28:	11 96       	adiw	r26, 0x01	; 1
     a2a:	01 90       	ld	r0, Z+
     a2c:	0d 92       	st	X+, r0
     a2e:	8a 95       	dec	r24
     a30:	e1 f7       	brne	.-8      	; 0xa2a <_Z16scrivi_TAG_MezzoPc+0xa2>
     a32:	ae 01       	movw	r20, r28
     a34:	4f 5f       	subi	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	64 e0       	ldi	r22, 0x04	; 4
     a3a:	82 e5       	ldi	r24, 0x52	; 82
     a3c:	9b e0       	ldi	r25, 0x0B	; 11
     a3e:	0e 94 d6 21 	call	0x43ac	; 0x43ac <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh>
     a42:	80 93 84 0b 	sts	0x0B84, r24	; 0x800b84 <success>
     a46:	9f ef       	ldi	r25, 0xFF	; 255
     a48:	21 ee       	ldi	r18, 0xE1	; 225
     a4a:	84 e0       	ldi	r24, 0x04	; 4
     a4c:	91 50       	subi	r25, 0x01	; 1
     a4e:	20 40       	sbci	r18, 0x00	; 0
     a50:	80 40       	sbci	r24, 0x00	; 0
     a52:	e1 f7       	brne	.-8      	; 0xa4c <_Z16scrivi_TAG_MezzoPc+0xc4>
     a54:	00 c0       	rjmp	.+0      	; 0xa56 <_Z16scrivi_TAG_MezzoPc+0xce>
     a56:	00 00       	nop
     a58:	61 e6       	ldi	r22, 0x61	; 97
     a5a:	72 e0       	ldi	r23, 0x02	; 2
     a5c:	88 e3       	ldi	r24, 0x38	; 56
     a5e:	9d e0       	ldi	r25, 0x0D	; 13
     a60:	0e 94 cf 39 	call	0x739e	; 0x739e <_ZN5Print7printlnEPKc>
     a64:	be 01       	movw	r22, r28
     a66:	6f 5f       	subi	r22, 0xFF	; 255
     a68:	7f 4f       	sbci	r23, 0xFF	; 255
     a6a:	ce 01       	movw	r24, r28
     a6c:	41 96       	adiw	r24, 0x11	; 17
     a6e:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
     a72:	80 91 84 0b 	lds	r24, 0x0B84	; 0x800b84 <success>
     a76:	88 23       	and	r24, r24
     a78:	c9 f0       	breq	.+50     	; 0xaac <_Z16scrivi_TAG_MezzoPc+0x124>
     a7a:	8d 89       	ldd	r24, Y+21	; 0x15
     a7c:	9e 89       	ldd	r25, Y+22	; 0x16
     a7e:	06 97       	sbiw	r24, 0x06	; 6
     a80:	59 f4       	brne	.+22     	; 0xa98 <_Z16scrivi_TAG_MezzoPc+0x110>
     a82:	be 01       	movw	r22, r28
     a84:	6f 5e       	subi	r22, 0xEF	; 239
     a86:	7f 4f       	sbci	r23, 0xFF	; 255
     a88:	c5 01       	movw	r24, r10
     a8a:	0e 94 b9 3c 	call	0x7972	; 0x7972 <_ZN6StringC1EOS_>
     a8e:	ce 01       	movw	r24, r28
     a90:	41 96       	adiw	r24, 0x11	; 17
     a92:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
     a96:	2f c0       	rjmp	.+94     	; 0xaf6 <_Z16scrivi_TAG_MezzoPc+0x16e>
     a98:	9f ef       	ldi	r25, 0xFF	; 255
     a9a:	21 ee       	ldi	r18, 0xE1	; 225
     a9c:	84 e0       	ldi	r24, 0x04	; 4
     a9e:	91 50       	subi	r25, 0x01	; 1
     aa0:	20 40       	sbci	r18, 0x00	; 0
     aa2:	80 40       	sbci	r24, 0x00	; 0
     aa4:	e1 f7       	brne	.-8      	; 0xa9e <_Z16scrivi_TAG_MezzoPc+0x116>
     aa6:	00 c0       	rjmp	.+0      	; 0xaa8 <_Z16scrivi_TAG_MezzoPc+0x120>
     aa8:	00 00       	nop
     aaa:	0a c0       	rjmp	.+20     	; 0xac0 <_Z16scrivi_TAG_MezzoPc+0x138>
     aac:	83 e6       	ldi	r24, 0x63	; 99
     aae:	9b e0       	ldi	r25, 0x0B	; 11
     ab0:	0e 94 14 31 	call	0x6228	; 0x6228 <_ZN3LCD5clearEv>
     ab4:	6f e6       	ldi	r22, 0x6F	; 111
     ab6:	72 e0       	ldi	r23, 0x02	; 2
     ab8:	83 e6       	ldi	r24, 0x63	; 99
     aba:	9b e0       	ldi	r25, 0x0B	; 11
     abc:	0e 94 a4 39 	call	0x7348	; 0x7348 <_ZN5Print5printEPKc>
     ac0:	ce 01       	movw	r24, r28
     ac2:	41 96       	adiw	r24, 0x11	; 17
     ac4:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
     ac8:	0a c0       	rjmp	.+20     	; 0xade <_Z16scrivi_TAG_MezzoPc+0x156>
     aca:	83 e6       	ldi	r24, 0x63	; 99
     acc:	9b e0       	ldi	r25, 0x0B	; 11
     ace:	0e 94 14 31 	call	0x6228	; 0x6228 <_ZN3LCD5clearEv>
     ad2:	6a e7       	ldi	r22, 0x7A	; 122
     ad4:	72 e0       	ldi	r23, 0x02	; 2
     ad6:	83 e6       	ldi	r24, 0x63	; 99
     ad8:	9b e0       	ldi	r25, 0x0B	; 11
     ada:	0e 94 a4 39 	call	0x7348	; 0x7348 <_ZN5Print5printEPKc>
     ade:	6f ef       	ldi	r22, 0xFF	; 255
     ae0:	71 e0       	ldi	r23, 0x01	; 1
     ae2:	88 e3       	ldi	r24, 0x38	; 56
     ae4:	9d e0       	ldi	r25, 0x0D	; 13
     ae6:	0e 94 cf 39 	call	0x739e	; 0x739e <_ZN5Print7printlnEPKc>
     aea:	be 01       	movw	r22, r28
     aec:	63 5e       	subi	r22, 0xE3	; 227
     aee:	7f 4f       	sbci	r23, 0xFF	; 255
     af0:	c5 01       	movw	r24, r10
     af2:	0e 94 b9 3c 	call	0x7972	; 0x7972 <_ZN6StringC1EOS_>
     af6:	ce 01       	movw	r24, r28
     af8:	4d 96       	adiw	r24, 0x1d	; 29
     afa:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
     afe:	c5 01       	movw	r24, r10
     b00:	a2 96       	adiw	r28, 0x22	; 34
     b02:	0f b6       	in	r0, 0x3f	; 63
     b04:	f8 94       	cli
     b06:	de bf       	out	0x3e, r29	; 62
     b08:	0f be       	out	0x3f, r0	; 63
     b0a:	cd bf       	out	0x3d, r28	; 61
     b0c:	df 91       	pop	r29
     b0e:	cf 91       	pop	r28
     b10:	1f 91       	pop	r17
     b12:	0f 91       	pop	r16
     b14:	ef 90       	pop	r14
     b16:	df 90       	pop	r13
     b18:	cf 90       	pop	r12
     b1a:	bf 90       	pop	r11
     b1c:	af 90       	pop	r10
     b1e:	9f 90       	pop	r9
     b20:	8f 90       	pop	r8
     b22:	08 95       	ret

00000b24 <_Z14leggiTAG_Mezzob>:
     b24:	af 92       	push	r10
     b26:	bf 92       	push	r11
     b28:	cf 92       	push	r12
     b2a:	df 92       	push	r13
     b2c:	ef 92       	push	r14
     b2e:	0f 93       	push	r16
     b30:	1f 93       	push	r17
     b32:	cf 93       	push	r28
     b34:	df 93       	push	r29
     b36:	cd b7       	in	r28, 0x3d	; 61
     b38:	de b7       	in	r29, 0x3e	; 62
     b3a:	a2 97       	sbiw	r28, 0x22	; 34
     b3c:	0f b6       	in	r0, 0x3f	; 63
     b3e:	f8 94       	cli
     b40:	de bf       	out	0x3e, r29	; 62
     b42:	0f be       	out	0x3f, r0	; 63
     b44:	cd bf       	out	0x3d, r28	; 61
     b46:	5c 01       	movw	r10, r24
     b48:	6f ef       	ldi	r22, 0xFF	; 255
     b4a:	71 e0       	ldi	r23, 0x01	; 1
     b4c:	ce 01       	movw	r24, r28
     b4e:	4d 96       	adiw	r24, 0x1d	; 29
     b50:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
     b54:	08 ec       	ldi	r16, 0xC8	; 200
     b56:	10 e0       	ldi	r17, 0x00	; 0
     b58:	23 e8       	ldi	r18, 0x83	; 131
     b5a:	3b e0       	ldi	r19, 0x0B	; 11
     b5c:	4c e7       	ldi	r20, 0x7C	; 124
     b5e:	5b e0       	ldi	r21, 0x0B	; 11
     b60:	60 e0       	ldi	r22, 0x00	; 0
     b62:	82 e5       	ldi	r24, 0x52	; 82
     b64:	9b e0       	ldi	r25, 0x0B	; 11
     b66:	0e 94 f7 20 	call	0x41ee	; 0x41ee <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j>
     b6a:	80 93 84 0b 	sts	0x0B84, r24	; 0x800b84 <success>
     b6e:	88 23       	and	r24, r24
     b70:	09 f4       	brne	.+2      	; 0xb74 <_Z14leggiTAG_Mezzob+0x50>
     b72:	88 c0       	rjmp	.+272    	; 0xc84 <_Z14leggiTAG_Mezzob+0x160>
     b74:	4e e1       	ldi	r20, 0x1E	; 30
     b76:	50 e0       	ldi	r21, 0x00	; 0
     b78:	60 e0       	ldi	r22, 0x00	; 0
     b7a:	70 e0       	ldi	r23, 0x00	; 0
     b7c:	82 e0       	ldi	r24, 0x02	; 2
     b7e:	8a dd       	rcall	.-1260   	; 0x694 <_Z6Buzzerhm>
     b80:	80 91 83 0b 	lds	r24, 0x0B83	; 0x800b83 <uidLength>
     b84:	84 30       	cpi	r24, 0x04	; 4
     b86:	09 f0       	breq	.+2      	; 0xb8a <_Z14leggiTAG_Mezzob+0x66>
     b88:	77 c0       	rjmp	.+238    	; 0xc78 <_Z14leggiTAG_Mezzob+0x154>
     b8a:	86 e0       	ldi	r24, 0x06	; 6
     b8c:	ed e6       	ldi	r30, 0x6D	; 109
     b8e:	f1 e0       	ldi	r31, 0x01	; 1
     b90:	de 01       	movw	r26, r28
     b92:	57 96       	adiw	r26, 0x17	; 23
     b94:	01 90       	ld	r0, Z+
     b96:	0d 92       	st	X+, r0
     b98:	8a 95       	dec	r24
     b9a:	e1 f7       	brne	.-8      	; 0xb94 <_Z14leggiTAG_Mezzob+0x70>
     b9c:	ce 01       	movw	r24, r28
     b9e:	47 96       	adiw	r24, 0x17	; 23
     ba0:	6c 01       	movw	r12, r24
     ba2:	e1 2c       	mov	r14, r1
     ba4:	04 e0       	ldi	r16, 0x04	; 4
     ba6:	10 e0       	ldi	r17, 0x00	; 0
     ba8:	20 e0       	ldi	r18, 0x00	; 0
     baa:	30 e0       	ldi	r19, 0x00	; 0
     bac:	44 e0       	ldi	r20, 0x04	; 4
     bae:	6c e7       	ldi	r22, 0x7C	; 124
     bb0:	7b e0       	ldi	r23, 0x0B	; 11
     bb2:	82 e5       	ldi	r24, 0x52	; 82
     bb4:	9b e0       	ldi	r25, 0x0B	; 11
     bb6:	0e 94 43 21 	call	0x4286	; 0x4286 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_>
     bba:	80 93 84 0b 	sts	0x0B84, r24	; 0x800b84 <success>
     bbe:	88 23       	and	r24, r24
     bc0:	09 f4       	brne	.+2      	; 0xbc4 <_Z14leggiTAG_Mezzob+0xa0>
     bc2:	4a c0       	rjmp	.+148    	; 0xc58 <_Z14leggiTAG_Mezzob+0x134>
     bc4:	ae 01       	movw	r20, r28
     bc6:	4f 5f       	subi	r20, 0xFF	; 255
     bc8:	5f 4f       	sbci	r21, 0xFF	; 255
     bca:	64 e0       	ldi	r22, 0x04	; 4
     bcc:	82 e5       	ldi	r24, 0x52	; 82
     bce:	9b e0       	ldi	r25, 0x0B	; 11
     bd0:	0e 94 a3 21 	call	0x4346	; 0x4346 <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh>
     bd4:	80 93 84 0b 	sts	0x0B84, r24	; 0x800b84 <success>
     bd8:	88 23       	and	r24, r24
     bda:	89 f1       	breq	.+98     	; 0xc3e <_Z14leggiTAG_Mezzob+0x11a>
     bdc:	61 e6       	ldi	r22, 0x61	; 97
     bde:	72 e0       	ldi	r23, 0x02	; 2
     be0:	88 e3       	ldi	r24, 0x38	; 56
     be2:	9d e0       	ldi	r25, 0x0D	; 13
     be4:	0e 94 cf 39 	call	0x739e	; 0x739e <_ZN5Print7printlnEPKc>
     be8:	be 01       	movw	r22, r28
     bea:	6f 5f       	subi	r22, 0xFF	; 255
     bec:	7f 4f       	sbci	r23, 0xFF	; 255
     bee:	ce 01       	movw	r24, r28
     bf0:	41 96       	adiw	r24, 0x11	; 17
     bf2:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
     bf6:	be 01       	movw	r22, r28
     bf8:	6f 5e       	subi	r22, 0xEF	; 239
     bfa:	7f 4f       	sbci	r23, 0xFF	; 255
     bfc:	88 e3       	ldi	r24, 0x38	; 56
     bfe:	9d e0       	ldi	r25, 0x0D	; 13
     c00:	0e 94 bf 39 	call	0x737e	; 0x737e <_ZN5Print7printlnERK6String>
     c04:	8d 89       	ldd	r24, Y+21	; 0x15
     c06:	9e 89       	ldd	r25, Y+22	; 0x16
     c08:	06 97       	sbiw	r24, 0x06	; 6
     c0a:	59 f4       	brne	.+22     	; 0xc22 <_Z14leggiTAG_Mezzob+0xfe>
     c0c:	be 01       	movw	r22, r28
     c0e:	6f 5e       	subi	r22, 0xEF	; 239
     c10:	7f 4f       	sbci	r23, 0xFF	; 255
     c12:	c5 01       	movw	r24, r10
     c14:	0e 94 b9 3c 	call	0x7972	; 0x7972 <_ZN6StringC1EOS_>
     c18:	ce 01       	movw	r24, r28
     c1a:	41 96       	adiw	r24, 0x11	; 17
     c1c:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
     c20:	37 c0       	rjmp	.+110    	; 0xc90 <_Z14leggiTAG_Mezzob+0x16c>
     c22:	9f ef       	ldi	r25, 0xFF	; 255
     c24:	21 ee       	ldi	r18, 0xE1	; 225
     c26:	84 e0       	ldi	r24, 0x04	; 4
     c28:	91 50       	subi	r25, 0x01	; 1
     c2a:	20 40       	sbci	r18, 0x00	; 0
     c2c:	80 40       	sbci	r24, 0x00	; 0
     c2e:	e1 f7       	brne	.-8      	; 0xc28 <_Z14leggiTAG_Mezzob+0x104>
     c30:	00 c0       	rjmp	.+0      	; 0xc32 <_Z14leggiTAG_Mezzob+0x10e>
     c32:	00 00       	nop
     c34:	ce 01       	movw	r24, r28
     c36:	41 96       	adiw	r24, 0x11	; 17
     c38:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
     c3c:	1d c0       	rjmp	.+58     	; 0xc78 <_Z14leggiTAG_Mezzob+0x154>
     c3e:	83 e6       	ldi	r24, 0x63	; 99
     c40:	9b e0       	ldi	r25, 0x0B	; 11
     c42:	0e 94 14 31 	call	0x6228	; 0x6228 <_ZN3LCD5clearEv>
     c46:	41 e0       	ldi	r20, 0x01	; 1
     c48:	60 e0       	ldi	r22, 0x00	; 0
     c4a:	83 e6       	ldi	r24, 0x63	; 99
     c4c:	9b e0       	ldi	r25, 0x0B	; 11
     c4e:	0e 94 1a 31 	call	0x6234	; 0x6234 <_ZN3LCD9setCursorEhh>
     c52:	66 e8       	ldi	r22, 0x86	; 134
     c54:	72 e0       	ldi	r23, 0x02	; 2
     c56:	0c c0       	rjmp	.+24     	; 0xc70 <_Z14leggiTAG_Mezzob+0x14c>
     c58:	83 e6       	ldi	r24, 0x63	; 99
     c5a:	9b e0       	ldi	r25, 0x0B	; 11
     c5c:	0e 94 14 31 	call	0x6228	; 0x6228 <_ZN3LCD5clearEv>
     c60:	41 e0       	ldi	r20, 0x01	; 1
     c62:	60 e0       	ldi	r22, 0x00	; 0
     c64:	83 e6       	ldi	r24, 0x63	; 99
     c66:	9b e0       	ldi	r25, 0x0B	; 11
     c68:	0e 94 1a 31 	call	0x6234	; 0x6234 <_ZN3LCD9setCursorEhh>
     c6c:	6f e6       	ldi	r22, 0x6F	; 111
     c6e:	72 e0       	ldi	r23, 0x02	; 2
     c70:	83 e6       	ldi	r24, 0x63	; 99
     c72:	9b e0       	ldi	r25, 0x0B	; 11
     c74:	0e 94 a4 39 	call	0x7348	; 0x7348 <_ZN5Print5printEPKc>
     c78:	6f ef       	ldi	r22, 0xFF	; 255
     c7a:	71 e0       	ldi	r23, 0x01	; 1
     c7c:	88 e3       	ldi	r24, 0x38	; 56
     c7e:	9d e0       	ldi	r25, 0x0D	; 13
     c80:	0e 94 cf 39 	call	0x739e	; 0x739e <_ZN5Print7printlnEPKc>
     c84:	be 01       	movw	r22, r28
     c86:	63 5e       	subi	r22, 0xE3	; 227
     c88:	7f 4f       	sbci	r23, 0xFF	; 255
     c8a:	c5 01       	movw	r24, r10
     c8c:	0e 94 b9 3c 	call	0x7972	; 0x7972 <_ZN6StringC1EOS_>
     c90:	ce 01       	movw	r24, r28
     c92:	4d 96       	adiw	r24, 0x1d	; 29
     c94:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
     c98:	c5 01       	movw	r24, r10
     c9a:	a2 96       	adiw	r28, 0x22	; 34
     c9c:	0f b6       	in	r0, 0x3f	; 63
     c9e:	f8 94       	cli
     ca0:	de bf       	out	0x3e, r29	; 62
     ca2:	0f be       	out	0x3f, r0	; 63
     ca4:	cd bf       	out	0x3d, r28	; 61
     ca6:	df 91       	pop	r29
     ca8:	cf 91       	pop	r28
     caa:	1f 91       	pop	r17
     cac:	0f 91       	pop	r16
     cae:	ef 90       	pop	r14
     cb0:	df 90       	pop	r13
     cb2:	cf 90       	pop	r12
     cb4:	bf 90       	pop	r11
     cb6:	af 90       	pop	r10
     cb8:	08 95       	ret

00000cba <_Z14GetCodeRfidATev>:
     cba:	cf 92       	push	r12
     cbc:	df 92       	push	r13
     cbe:	ef 92       	push	r14
     cc0:	ff 92       	push	r15
     cc2:	0f 93       	push	r16
     cc4:	1f 93       	push	r17
     cc6:	cf 93       	push	r28
     cc8:	df 93       	push	r29
     cca:	cd b7       	in	r28, 0x3d	; 61
     ccc:	de b7       	in	r29, 0x3e	; 62
     cce:	64 97       	sbiw	r28, 0x14	; 20
     cd0:	0f b6       	in	r0, 0x3f	; 63
     cd2:	f8 94       	cli
     cd4:	de bf       	out	0x3e, r29	; 62
     cd6:	0f be       	out	0x3f, r0	; 63
     cd8:	cd bf       	out	0x3d, r28	; 61
     cda:	7c 01       	movw	r14, r24
     cdc:	ce 01       	movw	r24, r28
     cde:	01 96       	adiw	r24, 0x01	; 1
     ce0:	6c 01       	movw	r12, r24
     ce2:	87 e0       	ldi	r24, 0x07	; 7
     ce4:	f6 01       	movw	r30, r12
     ce6:	11 92       	st	Z+, r1
     ce8:	8a 95       	dec	r24
     cea:	e9 f7       	brne	.-6      	; 0xce6 <_Z14GetCodeRfidATev+0x2c>
     cec:	63 e9       	ldi	r22, 0x93	; 147
     cee:	72 e0       	ldi	r23, 0x02	; 2
     cf0:	c7 01       	movw	r24, r14
     cf2:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
     cf6:	08 ee       	ldi	r16, 0xE8	; 232
     cf8:	13 e0       	ldi	r17, 0x03	; 3
     cfa:	9e 01       	movw	r18, r28
     cfc:	2c 5e       	subi	r18, 0xEC	; 236
     cfe:	3f 4f       	sbci	r19, 0xFF	; 255
     d00:	a6 01       	movw	r20, r12
     d02:	60 e0       	ldi	r22, 0x00	; 0
     d04:	82 e5       	ldi	r24, 0x52	; 82
     d06:	9b e0       	ldi	r25, 0x0B	; 11
     d08:	0e 94 f7 20 	call	0x41ee	; 0x41ee <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j>
     d0c:	88 23       	and	r24, r24
     d0e:	59 f1       	breq	.+86     	; 0xd66 <_Z14GetCodeRfidATev+0xac>
     d10:	0c 89       	ldd	r16, Y+20	; 0x14
     d12:	10 e0       	ldi	r17, 0x00	; 0
     d14:	20 e0       	ldi	r18, 0x00	; 0
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	a6 01       	movw	r20, r12
     d1a:	62 e5       	ldi	r22, 0x52	; 82
     d1c:	7b e0       	ldi	r23, 0x0B	; 11
     d1e:	ce 01       	movw	r24, r28
     d20:	0e 96       	adiw	r24, 0x0e	; 14
     d22:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <_ZN9NFC_PN53210GetHexCodeEPKhm>
     d26:	ce 01       	movw	r24, r28
     d28:	0e 96       	adiw	r24, 0x0e	; 14
     d2a:	0e 94 02 3f 	call	0x7e04	; 0x7e04 <_ZN6String4trimEv>
     d2e:	28 e0       	ldi	r18, 0x08	; 8
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	40 e0       	ldi	r20, 0x00	; 0
     d34:	50 e0       	ldi	r21, 0x00	; 0
     d36:	be 01       	movw	r22, r28
     d38:	62 5f       	subi	r22, 0xF2	; 242
     d3a:	7f 4f       	sbci	r23, 0xFF	; 255
     d3c:	ce 01       	movw	r24, r28
     d3e:	08 96       	adiw	r24, 0x08	; 8
     d40:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <_ZNK6String9substringEjj>
     d44:	be 01       	movw	r22, r28
     d46:	68 5f       	subi	r22, 0xF8	; 248
     d48:	7f 4f       	sbci	r23, 0xFF	; 255
     d4a:	c7 01       	movw	r24, r14
     d4c:	0e 94 de 3c 	call	0x79bc	; 0x79bc <_ZN6StringaSEOS_>
     d50:	ce 01       	movw	r24, r28
     d52:	08 96       	adiw	r24, 0x08	; 8
     d54:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	80 93 7b 0b 	sts	0x0B7B, r24	; 0x800b7b <alreadyTimbrata>
     d5e:	ce 01       	movw	r24, r28
     d60:	0e 96       	adiw	r24, 0x0e	; 14
     d62:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
     d66:	c7 01       	movw	r24, r14
     d68:	64 96       	adiw	r28, 0x14	; 20
     d6a:	0f b6       	in	r0, 0x3f	; 63
     d6c:	f8 94       	cli
     d6e:	de bf       	out	0x3e, r29	; 62
     d70:	0f be       	out	0x3f, r0	; 63
     d72:	cd bf       	out	0x3d, r28	; 61
     d74:	df 91       	pop	r29
     d76:	cf 91       	pop	r28
     d78:	1f 91       	pop	r17
     d7a:	0f 91       	pop	r16
     d7c:	ff 90       	pop	r15
     d7e:	ef 90       	pop	r14
     d80:	df 90       	pop	r13
     d82:	cf 90       	pop	r12
     d84:	08 95       	ret

00000d86 <_Z19GetHTTPResponseCode6String>:
     d86:	ef 92       	push	r14
     d88:	ff 92       	push	r15
     d8a:	0f 93       	push	r16
     d8c:	1f 93       	push	r17
     d8e:	cf 93       	push	r28
     d90:	df 93       	push	r29
     d92:	cd b7       	in	r28, 0x3d	; 61
     d94:	de b7       	in	r29, 0x3e	; 62
     d96:	62 97       	sbiw	r28, 0x12	; 18
     d98:	0f b6       	in	r0, 0x3f	; 63
     d9a:	f8 94       	cli
     d9c:	de bf       	out	0x3e, r29	; 62
     d9e:	0f be       	out	0x3f, r0	; 63
     da0:	cd bf       	out	0x3d, r28	; 61
     da2:	8c 01       	movw	r16, r24
     da4:	7b 01       	movw	r14, r22
     da6:	6a e9       	ldi	r22, 0x9A	; 154
     da8:	72 e0       	ldi	r23, 0x02	; 2
     daa:	ce 01       	movw	r24, r28
     dac:	0d 96       	adiw	r24, 0x0d	; 13
     dae:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
     db2:	30 db       	rcall	.-2464   	; 0x414 <_Z9printLinev>
     db4:	62 ea       	ldi	r22, 0xA2	; 162
     db6:	72 e0       	ldi	r23, 0x02	; 2
     db8:	88 e3       	ldi	r24, 0x38	; 56
     dba:	9d e0       	ldi	r25, 0x0D	; 13
     dbc:	0e 94 cf 39 	call	0x739e	; 0x739e <_ZN5Print7printlnEPKc>
     dc0:	20 91 55 01 	lds	r18, 0x0155	; 0x800155 <HTTP_len_response>
     dc4:	30 91 56 01 	lds	r19, 0x0156	; 0x800156 <HTTP_len_response+0x1>
     dc8:	f7 01       	movw	r30, r14
     dca:	84 81       	ldd	r24, Z+4	; 0x04
     dcc:	95 81       	ldd	r25, Z+5	; 0x05
     dce:	28 17       	cp	r18, r24
     dd0:	39 07       	cpc	r19, r25
     dd2:	49 f5       	brne	.+82     	; 0xe26 <_Z19GetHTTPResponseCode6String+0xa0>
     dd4:	a9 01       	movw	r20, r18
     dd6:	43 50       	subi	r20, 0x03	; 3
     dd8:	51 09       	sbc	r21, r1
     dda:	b7 01       	movw	r22, r14
     ddc:	ce 01       	movw	r24, r28
     dde:	07 96       	adiw	r24, 0x07	; 7
     de0:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <_ZNK6String9substringEjj>
     de4:	6a eb       	ldi	r22, 0xBA	; 186
     de6:	72 e0       	ldi	r23, 0x02	; 2
     de8:	ce 01       	movw	r24, r28
     dea:	01 96       	adiw	r24, 0x01	; 1
     dec:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
     df0:	be 01       	movw	r22, r28
     df2:	69 5f       	subi	r22, 0xF9	; 249
     df4:	7f 4f       	sbci	r23, 0xFF	; 255
     df6:	ce 01       	movw	r24, r28
     df8:	01 96       	adiw	r24, 0x01	; 1
     dfa:	0e 94 3f 3e 	call	0x7c7e	; 0x7c7e <_ZplRK15StringSumHelperRK6String>
     dfe:	bc 01       	movw	r22, r24
     e00:	88 e3       	ldi	r24, 0x38	; 56
     e02:	9d e0       	ldi	r25, 0x0D	; 13
     e04:	0e 94 bf 39 	call	0x737e	; 0x737e <_ZN5Print7printlnERK6String>
     e08:	ce 01       	movw	r24, r28
     e0a:	01 96       	adiw	r24, 0x01	; 1
     e0c:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
     e10:	be 01       	movw	r22, r28
     e12:	69 5f       	subi	r22, 0xF9	; 249
     e14:	7f 4f       	sbci	r23, 0xFF	; 255
     e16:	c8 01       	movw	r24, r16
     e18:	0e 94 b9 3c 	call	0x7972	; 0x7972 <_ZN6StringC1EOS_>
     e1c:	ce 01       	movw	r24, r28
     e1e:	07 96       	adiw	r24, 0x07	; 7
     e20:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
     e24:	09 c0       	rjmp	.+18     	; 0xe38 <_Z19GetHTTPResponseCode6String+0xb2>
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	19 db       	rcall	.-2510   	; 0x45c <_Z4passb>
     e2a:	f4 da       	rcall	.-2584   	; 0x414 <_Z9printLinev>
     e2c:	be 01       	movw	r22, r28
     e2e:	63 5f       	subi	r22, 0xF3	; 243
     e30:	7f 4f       	sbci	r23, 0xFF	; 255
     e32:	c8 01       	movw	r24, r16
     e34:	0e 94 b9 3c 	call	0x7972	; 0x7972 <_ZN6StringC1EOS_>
     e38:	ce 01       	movw	r24, r28
     e3a:	0d 96       	adiw	r24, 0x0d	; 13
     e3c:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
     e40:	c8 01       	movw	r24, r16
     e42:	62 96       	adiw	r28, 0x12	; 18
     e44:	0f b6       	in	r0, 0x3f	; 63
     e46:	f8 94       	cli
     e48:	de bf       	out	0x3e, r29	; 62
     e4a:	0f be       	out	0x3f, r0	; 63
     e4c:	cd bf       	out	0x3d, r28	; 61
     e4e:	df 91       	pop	r29
     e50:	cf 91       	pop	r28
     e52:	1f 91       	pop	r17
     e54:	0f 91       	pop	r16
     e56:	ff 90       	pop	r15
     e58:	ef 90       	pop	r14
     e5a:	08 95       	ret

00000e5c <_Z11GetAteCheckiPc14EthernetClient6String>:
     e5c:	af 92       	push	r10
     e5e:	bf 92       	push	r11
     e60:	cf 92       	push	r12
     e62:	df 92       	push	r13
     e64:	ef 92       	push	r14
     e66:	ff 92       	push	r15
     e68:	0f 93       	push	r16
     e6a:	1f 93       	push	r17
     e6c:	cf 93       	push	r28
     e6e:	df 93       	push	r29
     e70:	cd b7       	in	r28, 0x3d	; 61
     e72:	de b7       	in	r29, 0x3e	; 62
     e74:	62 97       	sbiw	r28, 0x12	; 18
     e76:	0f b6       	in	r0, 0x3f	; 63
     e78:	f8 94       	cli
     e7a:	de bf       	out	0x3e, r29	; 62
     e7c:	0f be       	out	0x3f, r0	; 63
     e7e:	cd bf       	out	0x3d, r28	; 61
     e80:	5c 01       	movw	r10, r24
     e82:	7b 01       	movw	r14, r22
     e84:	8a 01       	movw	r16, r20
     e86:	69 01       	movw	r12, r18
     e88:	c5 da       	rcall	.-2678   	; 0x414 <_Z9printLinev>
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	d6 da       	rcall	.-2644   	; 0x43a <_Z8printTabh>
     e8e:	64 ea       	ldi	r22, 0xA4	; 164
     e90:	74 e0       	ldi	r23, 0x04	; 4
     e92:	88 e3       	ldi	r24, 0x38	; 56
     e94:	9d e0       	ldi	r25, 0x0D	; 13
     e96:	0e 94 a4 39 	call	0x7348	; 0x7348 <_ZN5Print5printEPKc>
     e9a:	a5 01       	movw	r20, r10
     e9c:	b7 01       	movw	r22, r14
     e9e:	c8 01       	movw	r24, r16
     ea0:	0e 94 3d 29 	call	0x527a	; 0x527a <_ZN14EthernetClient7connectEPKcj>
     ea4:	89 2b       	or	r24, r25
     ea6:	09 f4       	brne	.+2      	; 0xeaa <_Z11GetAteCheckiPc14EthernetClient6String+0x4e>
     ea8:	c3 c0       	rjmp	.+390    	; 0x1030 <_Z11GetAteCheckiPc14EthernetClient6String+0x1d4>
     eaa:	2f ef       	ldi	r18, 0xFF	; 255
     eac:	81 ee       	ldi	r24, 0xE1	; 225
     eae:	94 e0       	ldi	r25, 0x04	; 4
     eb0:	21 50       	subi	r18, 0x01	; 1
     eb2:	80 40       	sbci	r24, 0x00	; 0
     eb4:	90 40       	sbci	r25, 0x00	; 0
     eb6:	e1 f7       	brne	.-8      	; 0xeb0 <_Z11GetAteCheckiPc14EthernetClient6String+0x54>
     eb8:	00 c0       	rjmp	.+0      	; 0xeba <_Z11GetAteCheckiPc14EthernetClient6String+0x5e>
     eba:	00 00       	nop
     ebc:	61 ee       	ldi	r22, 0xE1	; 225
     ebe:	74 e0       	ldi	r23, 0x04	; 4
     ec0:	ce 01       	movw	r24, r28
     ec2:	01 96       	adiw	r24, 0x01	; 1
     ec4:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
     ec8:	b6 01       	movw	r22, r12
     eca:	ce 01       	movw	r24, r28
     ecc:	01 96       	adiw	r24, 0x01	; 1
     ece:	0e 94 3f 3e 	call	0x7c7e	; 0x7c7e <_ZplRK15StringSumHelperRK6String>
     ed2:	6b e1       	ldi	r22, 0x1B	; 27
     ed4:	73 e0       	ldi	r23, 0x03	; 3
     ed6:	0e 94 50 3e 	call	0x7ca0	; 0x7ca0 <_ZplRK15StringSumHelperPKc>
     eda:	bc 01       	movw	r22, r24
     edc:	86 e4       	ldi	r24, 0x46	; 70
     ede:	9b e0       	ldi	r25, 0x0B	; 11
     ee0:	0e 94 c1 3c 	call	0x7982	; 0x7982 <_ZN6StringaSERKS_>
     ee4:	ce 01       	movw	r24, r28
     ee6:	01 96       	adiw	r24, 0x01	; 1
     ee8:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
     eec:	b7 01       	movw	r22, r14
     eee:	ce 01       	movw	r24, r28
     ef0:	01 96       	adiw	r24, 0x01	; 1
     ef2:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
     ef6:	6e e0       	ldi	r22, 0x0E	; 14
     ef8:	75 e0       	ldi	r23, 0x05	; 5
     efa:	ce 01       	movw	r24, r28
     efc:	07 96       	adiw	r24, 0x07	; 7
     efe:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
     f02:	be 01       	movw	r22, r28
     f04:	6f 5f       	subi	r22, 0xFF	; 255
     f06:	7f 4f       	sbci	r23, 0xFF	; 255
     f08:	ce 01       	movw	r24, r28
     f0a:	07 96       	adiw	r24, 0x07	; 7
     f0c:	0e 94 3f 3e 	call	0x7c7e	; 0x7c7e <_ZplRK15StringSumHelperRK6String>
     f10:	bc 01       	movw	r22, r24
     f12:	86 e4       	ldi	r24, 0x46	; 70
     f14:	9b e0       	ldi	r25, 0x0B	; 11
     f16:	0e 94 19 3e 	call	0x7c32	; 0x7c32 <_ZN6String6concatERKS_>
     f1a:	ce 01       	movw	r24, r28
     f1c:	07 96       	adiw	r24, 0x07	; 7
     f1e:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
     f22:	ce 01       	movw	r24, r28
     f24:	01 96       	adiw	r24, 0x01	; 1
     f26:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
     f2a:	64 e2       	ldi	r22, 0x24	; 36
     f2c:	73 e0       	ldi	r23, 0x03	; 3
     f2e:	86 e4       	ldi	r24, 0x46	; 70
     f30:	9b e0       	ldi	r25, 0x0B	; 11
     f32:	0e 94 1f 3e 	call	0x7c3e	; 0x7c3e <_ZN6String6concatEPKc>
     f36:	6b e9       	ldi	r22, 0x9B	; 155
     f38:	73 e0       	ldi	r23, 0x03	; 3
     f3a:	86 e4       	ldi	r24, 0x46	; 70
     f3c:	9b e0       	ldi	r25, 0x0B	; 11
     f3e:	0e 94 1f 3e 	call	0x7c3e	; 0x7c3e <_ZN6String6concatEPKc>
     f42:	64 e2       	ldi	r22, 0x24	; 36
     f44:	73 e0       	ldi	r23, 0x03	; 3
     f46:	86 e4       	ldi	r24, 0x46	; 70
     f48:	9b e0       	ldi	r25, 0x0B	; 11
     f4a:	0e 94 1f 3e 	call	0x7c3e	; 0x7c3e <_ZN6String6concatEPKc>
     f4e:	65 e4       	ldi	r22, 0x45	; 69
     f50:	74 e0       	ldi	r23, 0x04	; 4
     f52:	86 e4       	ldi	r24, 0x46	; 70
     f54:	9b e0       	ldi	r25, 0x0B	; 11
     f56:	0e 94 1f 3e 	call	0x7c3e	; 0x7c3e <_ZN6String6concatEPKc>
     f5a:	64 e2       	ldi	r22, 0x24	; 36
     f5c:	73 e0       	ldi	r23, 0x03	; 3
     f5e:	86 e4       	ldi	r24, 0x46	; 70
     f60:	9b e0       	ldi	r25, 0x0B	; 11
     f62:	0e 94 1f 3e 	call	0x7c3e	; 0x7c3e <_ZN6String6concatEPKc>
     f66:	65 e1       	ldi	r22, 0x15	; 21
     f68:	75 e0       	ldi	r23, 0x05	; 5
     f6a:	86 e4       	ldi	r24, 0x46	; 70
     f6c:	9b e0       	ldi	r25, 0x0B	; 11
     f6e:	0e 94 1f 3e 	call	0x7c3e	; 0x7c3e <_ZN6String6concatEPKc>
     f72:	64 e2       	ldi	r22, 0x24	; 36
     f74:	73 e0       	ldi	r23, 0x03	; 3
     f76:	86 e4       	ldi	r24, 0x46	; 70
     f78:	9b e0       	ldi	r25, 0x0B	; 11
     f7a:	0e 94 1f 3e 	call	0x7c3e	; 0x7c3e <_ZN6String6concatEPKc>
     f7e:	64 e2       	ldi	r22, 0x24	; 36
     f80:	73 e0       	ldi	r23, 0x03	; 3
     f82:	86 e4       	ldi	r24, 0x46	; 70
     f84:	9b e0       	ldi	r25, 0x0B	; 11
     f86:	0e 94 1f 3e 	call	0x7c3e	; 0x7c3e <_ZN6String6concatEPKc>
     f8a:	66 e4       	ldi	r22, 0x46	; 70
     f8c:	7b e0       	ldi	r23, 0x0B	; 11
     f8e:	88 e3       	ldi	r24, 0x38	; 56
     f90:	9d e0       	ldi	r25, 0x0D	; 13
     f92:	0e 94 bf 39 	call	0x737e	; 0x737e <_ZN5Print7printlnERK6String>
     f96:	66 e4       	ldi	r22, 0x46	; 70
     f98:	7b e0       	ldi	r23, 0x0B	; 11
     f9a:	c8 01       	movw	r24, r16
     f9c:	0e 94 96 39 	call	0x732c	; 0x732c <_ZN5Print5printERK6String>
     fa0:	2f ef       	ldi	r18, 0xFF	; 255
     fa2:	81 ee       	ldi	r24, 0xE1	; 225
     fa4:	94 e0       	ldi	r25, 0x04	; 4
     fa6:	21 50       	subi	r18, 0x01	; 1
     fa8:	80 40       	sbci	r24, 0x00	; 0
     faa:	90 40       	sbci	r25, 0x00	; 0
     fac:	e1 f7       	brne	.-8      	; 0xfa6 <_Z11GetAteCheckiPc14EthernetClient6String+0x14a>
     fae:	00 c0       	rjmp	.+0      	; 0xfb0 <_Z11GetAteCheckiPc14EthernetClient6String+0x154>
     fb0:	00 00       	nop
     fb2:	64 e6       	ldi	r22, 0x64	; 100
     fb4:	74 e0       	ldi	r23, 0x04	; 4
     fb6:	c8 01       	movw	r24, r16
     fb8:	0e 94 cf 39 	call	0x739e	; 0x739e <_ZN5Print7printlnEPKc>
     fbc:	c8 01       	movw	r24, r16
     fbe:	0e 94 ac 39 	call	0x7358	; 0x7358 <_ZN5Print7printlnEv>
     fc2:	8f e3       	ldi	r24, 0x3F	; 63
     fc4:	9c e9       	ldi	r25, 0x9C	; 156
     fc6:	01 97       	sbiw	r24, 0x01	; 1
     fc8:	f1 f7       	brne	.-4      	; 0xfc6 <_Z11GetAteCheckiPc14EthernetClient6String+0x16a>
     fca:	00 c0       	rjmp	.+0      	; 0xfcc <_Z11GetAteCheckiPc14EthernetClient6String+0x170>
     fcc:	00 00       	nop
     fce:	61 e2       	ldi	r22, 0x21	; 33
     fd0:	75 e0       	ldi	r23, 0x05	; 5
     fd2:	ce 01       	movw	r24, r28
     fd4:	0d 96       	adiw	r24, 0x0d	; 13
     fd6:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
     fda:	c8 01       	movw	r24, r16
     fdc:	0e 94 b4 29 	call	0x5368	; 0x5368 <_ZN14EthernetClient9availableEv>
     fe0:	89 2b       	or	r24, r25
     fe2:	09 f4       	brne	.+2      	; 0xfe6 <_Z11GetAteCheckiPc14EthernetClient6String+0x18a>
     fe4:	4c c0       	rjmp	.+152    	; 0x107e <_Z11GetAteCheckiPc14EthernetClient6String+0x222>
     fe6:	20 91 3f 0b 	lds	r18, 0x0B3F	; 0x800b3f <RispostaHTTP+0x4>
     fea:	30 91 40 0b 	lds	r19, 0x0B40	; 0x800b40 <RispostaHTTP+0x5>
     fee:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <HTTP_len_response>
     ff2:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <HTTP_len_response+0x1>
     ff6:	28 17       	cp	r18, r24
     ff8:	39 07       	cpc	r19, r25
     ffa:	08 f0       	brcs	.+2      	; 0xffe <_Z11GetAteCheckiPc14EthernetClient6String+0x1a2>
     ffc:	40 c0       	rjmp	.+128    	; 0x107e <_Z11GetAteCheckiPc14EthernetClient6String+0x222>
     ffe:	c8 01       	movw	r24, r16
    1000:	0e 94 be 29 	call	0x537c	; 0x537c <_ZN14EthernetClient4readEv>
    1004:	f8 2e       	mov	r15, r24
    1006:	6b e3       	ldi	r22, 0x3B	; 59
    1008:	7b e0       	ldi	r23, 0x0B	; 11
    100a:	ce 01       	movw	r24, r28
    100c:	01 96       	adiw	r24, 0x01	; 1
    100e:	0e 94 d6 3c 	call	0x79ac	; 0x79ac <_ZN6StringC1ERKS_>
    1012:	6f 2d       	mov	r22, r15
    1014:	ce 01       	movw	r24, r28
    1016:	01 96       	adiw	r24, 0x01	; 1
    1018:	0e 94 67 3e 	call	0x7cce	; 0x7cce <_ZplRK15StringSumHelperc>
    101c:	bc 01       	movw	r22, r24
    101e:	8b e3       	ldi	r24, 0x3B	; 59
    1020:	9b e0       	ldi	r25, 0x0B	; 11
    1022:	0e 94 c1 3c 	call	0x7982	; 0x7982 <_ZN6StringaSERKS_>
    1026:	ce 01       	movw	r24, r28
    1028:	01 96       	adiw	r24, 0x01	; 1
    102a:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
    102e:	d5 cf       	rjmp	.-86     	; 0xfda <_Z11GetAteCheckiPc14EthernetClient6String+0x17e>
    1030:	83 e6       	ldi	r24, 0x63	; 99
    1032:	9b e0       	ldi	r25, 0x0B	; 11
    1034:	0e 94 14 31 	call	0x6228	; 0x6228 <_ZN3LCD5clearEv>
    1038:	41 e0       	ldi	r20, 0x01	; 1
    103a:	60 e0       	ldi	r22, 0x00	; 0
    103c:	83 e6       	ldi	r24, 0x63	; 99
    103e:	9b e0       	ldi	r25, 0x0B	; 11
    1040:	0e 94 1a 31 	call	0x6234	; 0x6234 <_ZN3LCD9setCursorEhh>
    1044:	63 e2       	ldi	r22, 0x23	; 35
    1046:	75 e0       	ldi	r23, 0x05	; 5
    1048:	83 e6       	ldi	r24, 0x63	; 99
    104a:	9b e0       	ldi	r25, 0x0B	; 11
    104c:	0e 94 a4 39 	call	0x7348	; 0x7348 <_ZN5Print5printEPKc>
    1050:	43 e0       	ldi	r20, 0x03	; 3
    1052:	60 e0       	ldi	r22, 0x00	; 0
    1054:	83 e6       	ldi	r24, 0x63	; 99
    1056:	9b e0       	ldi	r25, 0x0B	; 11
    1058:	0e 94 1a 31 	call	0x6234	; 0x6234 <_ZN3LCD9setCursorEhh>
    105c:	62 e3       	ldi	r22, 0x32	; 50
    105e:	75 e0       	ldi	r23, 0x05	; 5
    1060:	83 e6       	ldi	r24, 0x63	; 99
    1062:	9b e0       	ldi	r25, 0x0B	; 11
    1064:	0e 94 a4 39 	call	0x7348	; 0x7348 <_ZN5Print5printEPKc>
    1068:	9f ef       	ldi	r25, 0xFF	; 255
    106a:	23 ed       	ldi	r18, 0xD3	; 211
    106c:	80 e3       	ldi	r24, 0x30	; 48
    106e:	91 50       	subi	r25, 0x01	; 1
    1070:	20 40       	sbci	r18, 0x00	; 0
    1072:	80 40       	sbci	r24, 0x00	; 0
    1074:	e1 f7       	brne	.-8      	; 0x106e <_Z11GetAteCheckiPc14EthernetClient6String+0x212>
    1076:	00 c0       	rjmp	.+0      	; 0x1078 <_Z11GetAteCheckiPc14EthernetClient6String+0x21c>
    1078:	00 00       	nop
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	38 c0       	rjmp	.+112    	; 0x10ee <_Z11GetAteCheckiPc14EthernetClient6String+0x292>
    107e:	6b e3       	ldi	r22, 0x3B	; 59
    1080:	7b e0       	ldi	r23, 0x0B	; 11
    1082:	ce 01       	movw	r24, r28
    1084:	07 96       	adiw	r24, 0x07	; 7
    1086:	0e 94 d6 3c 	call	0x79ac	; 0x79ac <_ZN6StringC1ERKS_>
    108a:	be 01       	movw	r22, r28
    108c:	69 5f       	subi	r22, 0xF9	; 249
    108e:	7f 4f       	sbci	r23, 0xFF	; 255
    1090:	ce 01       	movw	r24, r28
    1092:	01 96       	adiw	r24, 0x01	; 1
    1094:	78 de       	rcall	.-784    	; 0xd86 <_Z19GetHTTPResponseCode6String>
    1096:	be 01       	movw	r22, r28
    1098:	6f 5f       	subi	r22, 0xFF	; 255
    109a:	7f 4f       	sbci	r23, 0xFF	; 255
    109c:	ce 01       	movw	r24, r28
    109e:	0d 96       	adiw	r24, 0x0d	; 13
    10a0:	0e 94 de 3c 	call	0x79bc	; 0x79bc <_ZN6StringaSEOS_>
    10a4:	ce 01       	movw	r24, r28
    10a6:	01 96       	adiw	r24, 0x01	; 1
    10a8:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
    10ac:	ce 01       	movw	r24, r28
    10ae:	07 96       	adiw	r24, 0x07	; 7
    10b0:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
    10b4:	9f ef       	ldi	r25, 0xFF	; 255
    10b6:	27 ee       	ldi	r18, 0xE7	; 231
    10b8:	83 e0       	ldi	r24, 0x03	; 3
    10ba:	91 50       	subi	r25, 0x01	; 1
    10bc:	20 40       	sbci	r18, 0x00	; 0
    10be:	80 40       	sbci	r24, 0x00	; 0
    10c0:	e1 f7       	brne	.-8      	; 0x10ba <_Z11GetAteCheckiPc14EthernetClient6String+0x25e>
    10c2:	00 c0       	rjmp	.+0      	; 0x10c4 <_Z11GetAteCheckiPc14EthernetClient6String+0x268>
    10c4:	00 00       	nop
    10c6:	60 ea       	ldi	r22, 0xA0	; 160
    10c8:	74 e0       	ldi	r23, 0x04	; 4
    10ca:	ce 01       	movw	r24, r28
    10cc:	0d 96       	adiw	r24, 0x0d	; 13
    10ce:	0e 94 73 3e 	call	0x7ce6	; 0x7ce6 <_ZNK6String6equalsEPKc>
    10d2:	88 23       	and	r24, r24
    10d4:	51 f0       	breq	.+20     	; 0x10ea <_Z11GetAteCheckiPc14EthernetClient6String+0x28e>
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	c1 d9       	rcall	.-3198   	; 0x45c <_Z4passb>
    10da:	9c d9       	rcall	.-3272   	; 0x414 <_Z9printLinev>
    10dc:	11 e0       	ldi	r17, 0x01	; 1
    10de:	ce 01       	movw	r24, r28
    10e0:	0d 96       	adiw	r24, 0x0d	; 13
    10e2:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
    10e6:	81 2f       	mov	r24, r17
    10e8:	02 c0       	rjmp	.+4      	; 0x10ee <_Z11GetAteCheckiPc14EthernetClient6String+0x292>
    10ea:	10 e0       	ldi	r17, 0x00	; 0
    10ec:	f8 cf       	rjmp	.-16     	; 0x10de <_Z11GetAteCheckiPc14EthernetClient6String+0x282>
    10ee:	62 96       	adiw	r28, 0x12	; 18
    10f0:	0f b6       	in	r0, 0x3f	; 63
    10f2:	f8 94       	cli
    10f4:	de bf       	out	0x3e, r29	; 62
    10f6:	0f be       	out	0x3f, r0	; 63
    10f8:	cd bf       	out	0x3d, r28	; 61
    10fa:	df 91       	pop	r29
    10fc:	cf 91       	pop	r28
    10fe:	1f 91       	pop	r17
    1100:	0f 91       	pop	r16
    1102:	ff 90       	pop	r15
    1104:	ef 90       	pop	r14
    1106:	df 90       	pop	r13
    1108:	cf 90       	pop	r12
    110a:	bf 90       	pop	r11
    110c:	af 90       	pop	r10
    110e:	08 95       	ret

00001110 <_Z17PostErogazioneGACiPc14EthernetClient6String>:
    1110:	af 92       	push	r10
    1112:	bf 92       	push	r11
    1114:	cf 92       	push	r12
    1116:	df 92       	push	r13
    1118:	ef 92       	push	r14
    111a:	ff 92       	push	r15
    111c:	0f 93       	push	r16
    111e:	1f 93       	push	r17
    1120:	cf 93       	push	r28
    1122:	df 93       	push	r29
    1124:	cd b7       	in	r28, 0x3d	; 61
    1126:	de b7       	in	r29, 0x3e	; 62
    1128:	62 97       	sbiw	r28, 0x12	; 18
    112a:	0f b6       	in	r0, 0x3f	; 63
    112c:	f8 94       	cli
    112e:	de bf       	out	0x3e, r29	; 62
    1130:	0f be       	out	0x3f, r0	; 63
    1132:	cd bf       	out	0x3d, r28	; 61
    1134:	5c 01       	movw	r10, r24
    1136:	6b 01       	movw	r12, r22
    1138:	8a 01       	movw	r16, r20
    113a:	79 01       	movw	r14, r18
    113c:	6b d9       	rcall	.-3370   	; 0x414 <_Z9printLinev>
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	7c d9       	rcall	.-3336   	; 0x43a <_Z8printTabh>
    1142:	65 e4       	ldi	r22, 0x45	; 69
    1144:	75 e0       	ldi	r23, 0x05	; 5
    1146:	88 e3       	ldi	r24, 0x38	; 56
    1148:	9d e0       	ldi	r25, 0x0D	; 13
    114a:	0e 94 a4 39 	call	0x7348	; 0x7348 <_ZN5Print5printEPKc>
    114e:	a5 01       	movw	r20, r10
    1150:	b6 01       	movw	r22, r12
    1152:	c8 01       	movw	r24, r16
    1154:	0e 94 3d 29 	call	0x527a	; 0x527a <_ZN14EthernetClient7connectEPKcj>
    1158:	89 2b       	or	r24, r25
    115a:	09 f4       	brne	.+2      	; 0x115e <_Z17PostErogazioneGACiPc14EthernetClient6String+0x4e>
    115c:	e6 c0       	rjmp	.+460    	; 0x132a <_Z17PostErogazioneGACiPc14EthernetClient6String+0x21a>
    115e:	2f ef       	ldi	r18, 0xFF	; 255
    1160:	81 ee       	ldi	r24, 0xE1	; 225
    1162:	94 e0       	ldi	r25, 0x04	; 4
    1164:	21 50       	subi	r18, 0x01	; 1
    1166:	80 40       	sbci	r24, 0x00	; 0
    1168:	90 40       	sbci	r25, 0x00	; 0
    116a:	e1 f7       	brne	.-8      	; 0x1164 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x54>
    116c:	00 c0       	rjmp	.+0      	; 0x116e <_Z17PostErogazioneGACiPc14EthernetClient6String+0x5e>
    116e:	00 00       	nop
    1170:	65 e8       	ldi	r22, 0x85	; 133
    1172:	75 e0       	ldi	r23, 0x05	; 5
    1174:	86 e4       	ldi	r24, 0x46	; 70
    1176:	9b e0       	ldi	r25, 0x0B	; 11
    1178:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
    117c:	b6 01       	movw	r22, r12
    117e:	ce 01       	movw	r24, r28
    1180:	01 96       	adiw	r24, 0x01	; 1
    1182:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
    1186:	6e e0       	ldi	r22, 0x0E	; 14
    1188:	75 e0       	ldi	r23, 0x05	; 5
    118a:	ce 01       	movw	r24, r28
    118c:	07 96       	adiw	r24, 0x07	; 7
    118e:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
    1192:	be 01       	movw	r22, r28
    1194:	6f 5f       	subi	r22, 0xFF	; 255
    1196:	7f 4f       	sbci	r23, 0xFF	; 255
    1198:	ce 01       	movw	r24, r28
    119a:	07 96       	adiw	r24, 0x07	; 7
    119c:	0e 94 3f 3e 	call	0x7c7e	; 0x7c7e <_ZplRK15StringSumHelperRK6String>
    11a0:	bc 01       	movw	r22, r24
    11a2:	86 e4       	ldi	r24, 0x46	; 70
    11a4:	9b e0       	ldi	r25, 0x0B	; 11
    11a6:	0e 94 19 3e 	call	0x7c32	; 0x7c32 <_ZN6String6concatERKS_>
    11aa:	ce 01       	movw	r24, r28
    11ac:	07 96       	adiw	r24, 0x07	; 7
    11ae:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
    11b2:	ce 01       	movw	r24, r28
    11b4:	01 96       	adiw	r24, 0x01	; 1
    11b6:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
    11ba:	64 e2       	ldi	r22, 0x24	; 36
    11bc:	73 e0       	ldi	r23, 0x03	; 3
    11be:	86 e4       	ldi	r24, 0x46	; 70
    11c0:	9b e0       	ldi	r25, 0x0B	; 11
    11c2:	0e 94 1f 3e 	call	0x7c3e	; 0x7c3e <_ZN6String6concatEPKc>
    11c6:	6b e9       	ldi	r22, 0x9B	; 155
    11c8:	73 e0       	ldi	r23, 0x03	; 3
    11ca:	86 e4       	ldi	r24, 0x46	; 70
    11cc:	9b e0       	ldi	r25, 0x0B	; 11
    11ce:	0e 94 1f 3e 	call	0x7c3e	; 0x7c3e <_ZN6String6concatEPKc>
    11d2:	64 e2       	ldi	r22, 0x24	; 36
    11d4:	73 e0       	ldi	r23, 0x03	; 3
    11d6:	86 e4       	ldi	r24, 0x46	; 70
    11d8:	9b e0       	ldi	r25, 0x0B	; 11
    11da:	0e 94 1f 3e 	call	0x7c3e	; 0x7c3e <_ZN6String6concatEPKc>
    11de:	65 e4       	ldi	r22, 0x45	; 69
    11e0:	74 e0       	ldi	r23, 0x04	; 4
    11e2:	86 e4       	ldi	r24, 0x46	; 70
    11e4:	9b e0       	ldi	r25, 0x0B	; 11
    11e6:	0e 94 1f 3e 	call	0x7c3e	; 0x7c3e <_ZN6String6concatEPKc>
    11ea:	64 e2       	ldi	r22, 0x24	; 36
    11ec:	73 e0       	ldi	r23, 0x03	; 3
    11ee:	86 e4       	ldi	r24, 0x46	; 70
    11f0:	9b e0       	ldi	r25, 0x0B	; 11
    11f2:	0e 94 1f 3e 	call	0x7c3e	; 0x7c3e <_ZN6String6concatEPKc>
    11f6:	65 e1       	ldi	r22, 0x15	; 21
    11f8:	75 e0       	ldi	r23, 0x05	; 5
    11fa:	86 e4       	ldi	r24, 0x46	; 70
    11fc:	9b e0       	ldi	r25, 0x0B	; 11
    11fe:	0e 94 1f 3e 	call	0x7c3e	; 0x7c3e <_ZN6String6concatEPKc>
    1202:	64 e2       	ldi	r22, 0x24	; 36
    1204:	73 e0       	ldi	r23, 0x03	; 3
    1206:	86 e4       	ldi	r24, 0x46	; 70
    1208:	9b e0       	ldi	r25, 0x0B	; 11
    120a:	0e 94 1f 3e 	call	0x7c3e	; 0x7c3e <_ZN6String6concatEPKc>
    120e:	f7 01       	movw	r30, r14
    1210:	64 81       	ldd	r22, Z+4	; 0x04
    1212:	75 81       	ldd	r23, Z+5	; 0x05
    1214:	6b 5e       	subi	r22, 0xEB	; 235
    1216:	7f 4f       	sbci	r23, 0xFF	; 255
    1218:	4a e0       	ldi	r20, 0x0A	; 10
    121a:	ce 01       	movw	r24, r28
    121c:	01 96       	adiw	r24, 0x01	; 1
    121e:	0e 94 6a 3d 	call	0x7ad4	; 0x7ad4 <_ZN6StringC1Ejh>
    1222:	67 ea       	ldi	r22, 0xA7	; 167
    1224:	75 e0       	ldi	r23, 0x05	; 5
    1226:	ce 01       	movw	r24, r28
    1228:	07 96       	adiw	r24, 0x07	; 7
    122a:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
    122e:	be 01       	movw	r22, r28
    1230:	6f 5f       	subi	r22, 0xFF	; 255
    1232:	7f 4f       	sbci	r23, 0xFF	; 255
    1234:	ce 01       	movw	r24, r28
    1236:	07 96       	adiw	r24, 0x07	; 7
    1238:	0e 94 3f 3e 	call	0x7c7e	; 0x7c7e <_ZplRK15StringSumHelperRK6String>
    123c:	bc 01       	movw	r22, r24
    123e:	86 e4       	ldi	r24, 0x46	; 70
    1240:	9b e0       	ldi	r25, 0x0B	; 11
    1242:	0e 94 19 3e 	call	0x7c32	; 0x7c32 <_ZN6String6concatERKS_>
    1246:	ce 01       	movw	r24, r28
    1248:	07 96       	adiw	r24, 0x07	; 7
    124a:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
    124e:	ce 01       	movw	r24, r28
    1250:	01 96       	adiw	r24, 0x01	; 1
    1252:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
    1256:	64 e2       	ldi	r22, 0x24	; 36
    1258:	73 e0       	ldi	r23, 0x03	; 3
    125a:	86 e4       	ldi	r24, 0x46	; 70
    125c:	9b e0       	ldi	r25, 0x0B	; 11
    125e:	0e 94 1f 3e 	call	0x7c3e	; 0x7c3e <_ZN6String6concatEPKc>
    1262:	64 e2       	ldi	r22, 0x24	; 36
    1264:	73 e0       	ldi	r23, 0x03	; 3
    1266:	86 e4       	ldi	r24, 0x46	; 70
    1268:	9b e0       	ldi	r25, 0x0B	; 11
    126a:	0e 94 1f 3e 	call	0x7c3e	; 0x7c3e <_ZN6String6concatEPKc>
    126e:	b7 01       	movw	r22, r14
    1270:	86 e4       	ldi	r24, 0x46	; 70
    1272:	9b e0       	ldi	r25, 0x0B	; 11
    1274:	0e 94 19 3e 	call	0x7c32	; 0x7c32 <_ZN6String6concatERKS_>
    1278:	64 e2       	ldi	r22, 0x24	; 36
    127a:	73 e0       	ldi	r23, 0x03	; 3
    127c:	86 e4       	ldi	r24, 0x46	; 70
    127e:	9b e0       	ldi	r25, 0x0B	; 11
    1280:	0e 94 1f 3e 	call	0x7c3e	; 0x7c3e <_ZN6String6concatEPKc>
    1284:	66 e4       	ldi	r22, 0x46	; 70
    1286:	7b e0       	ldi	r23, 0x0B	; 11
    1288:	88 e3       	ldi	r24, 0x38	; 56
    128a:	9d e0       	ldi	r25, 0x0D	; 13
    128c:	0e 94 bf 39 	call	0x737e	; 0x737e <_ZN5Print7printlnERK6String>
    1290:	66 e4       	ldi	r22, 0x46	; 70
    1292:	7b e0       	ldi	r23, 0x0B	; 11
    1294:	c8 01       	movw	r24, r16
    1296:	0e 94 96 39 	call	0x732c	; 0x732c <_ZN5Print5printERK6String>
    129a:	ff ef       	ldi	r31, 0xFF	; 255
    129c:	21 ee       	ldi	r18, 0xE1	; 225
    129e:	84 e0       	ldi	r24, 0x04	; 4
    12a0:	f1 50       	subi	r31, 0x01	; 1
    12a2:	20 40       	sbci	r18, 0x00	; 0
    12a4:	80 40       	sbci	r24, 0x00	; 0
    12a6:	e1 f7       	brne	.-8      	; 0x12a0 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x190>
    12a8:	00 c0       	rjmp	.+0      	; 0x12aa <_Z17PostErogazioneGACiPc14EthernetClient6String+0x19a>
    12aa:	00 00       	nop
    12ac:	64 e6       	ldi	r22, 0x64	; 100
    12ae:	74 e0       	ldi	r23, 0x04	; 4
    12b0:	c8 01       	movw	r24, r16
    12b2:	0e 94 cf 39 	call	0x739e	; 0x739e <_ZN5Print7printlnEPKc>
    12b6:	c8 01       	movw	r24, r16
    12b8:	0e 94 ac 39 	call	0x7358	; 0x7358 <_ZN5Print7printlnEv>
    12bc:	ef e3       	ldi	r30, 0x3F	; 63
    12be:	fc e9       	ldi	r31, 0x9C	; 156
    12c0:	31 97       	sbiw	r30, 0x01	; 1
    12c2:	f1 f7       	brne	.-4      	; 0x12c0 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x1b0>
    12c4:	00 c0       	rjmp	.+0      	; 0x12c6 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x1b6>
    12c6:	00 00       	nop
    12c8:	61 e2       	ldi	r22, 0x21	; 33
    12ca:	75 e0       	ldi	r23, 0x05	; 5
    12cc:	ce 01       	movw	r24, r28
    12ce:	0d 96       	adiw	r24, 0x0d	; 13
    12d0:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
    12d4:	c8 01       	movw	r24, r16
    12d6:	0e 94 b4 29 	call	0x5368	; 0x5368 <_ZN14EthernetClient9availableEv>
    12da:	89 2b       	or	r24, r25
    12dc:	09 f4       	brne	.+2      	; 0x12e0 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x1d0>
    12de:	4c c0       	rjmp	.+152    	; 0x1378 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x268>
    12e0:	20 91 3f 0b 	lds	r18, 0x0B3F	; 0x800b3f <RispostaHTTP+0x4>
    12e4:	30 91 40 0b 	lds	r19, 0x0B40	; 0x800b40 <RispostaHTTP+0x5>
    12e8:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <HTTP_len_response>
    12ec:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <HTTP_len_response+0x1>
    12f0:	28 17       	cp	r18, r24
    12f2:	39 07       	cpc	r19, r25
    12f4:	08 f0       	brcs	.+2      	; 0x12f8 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x1e8>
    12f6:	40 c0       	rjmp	.+128    	; 0x1378 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x268>
    12f8:	c8 01       	movw	r24, r16
    12fa:	0e 94 be 29 	call	0x537c	; 0x537c <_ZN14EthernetClient4readEv>
    12fe:	f8 2e       	mov	r15, r24
    1300:	6b e3       	ldi	r22, 0x3B	; 59
    1302:	7b e0       	ldi	r23, 0x0B	; 11
    1304:	ce 01       	movw	r24, r28
    1306:	01 96       	adiw	r24, 0x01	; 1
    1308:	0e 94 d6 3c 	call	0x79ac	; 0x79ac <_ZN6StringC1ERKS_>
    130c:	6f 2d       	mov	r22, r15
    130e:	ce 01       	movw	r24, r28
    1310:	01 96       	adiw	r24, 0x01	; 1
    1312:	0e 94 67 3e 	call	0x7cce	; 0x7cce <_ZplRK15StringSumHelperc>
    1316:	bc 01       	movw	r22, r24
    1318:	8b e3       	ldi	r24, 0x3B	; 59
    131a:	9b e0       	ldi	r25, 0x0B	; 11
    131c:	0e 94 c1 3c 	call	0x7982	; 0x7982 <_ZN6StringaSERKS_>
    1320:	ce 01       	movw	r24, r28
    1322:	01 96       	adiw	r24, 0x01	; 1
    1324:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
    1328:	d5 cf       	rjmp	.-86     	; 0x12d4 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x1c4>
    132a:	83 e6       	ldi	r24, 0x63	; 99
    132c:	9b e0       	ldi	r25, 0x0B	; 11
    132e:	0e 94 14 31 	call	0x6228	; 0x6228 <_ZN3LCD5clearEv>
    1332:	41 e0       	ldi	r20, 0x01	; 1
    1334:	60 e0       	ldi	r22, 0x00	; 0
    1336:	83 e6       	ldi	r24, 0x63	; 99
    1338:	9b e0       	ldi	r25, 0x0B	; 11
    133a:	0e 94 1a 31 	call	0x6234	; 0x6234 <_ZN3LCD9setCursorEhh>
    133e:	66 e7       	ldi	r22, 0x76	; 118
    1340:	74 e0       	ldi	r23, 0x04	; 4
    1342:	83 e6       	ldi	r24, 0x63	; 99
    1344:	9b e0       	ldi	r25, 0x0B	; 11
    1346:	0e 94 a4 39 	call	0x7348	; 0x7348 <_ZN5Print5printEPKc>
    134a:	43 e0       	ldi	r20, 0x03	; 3
    134c:	60 e0       	ldi	r22, 0x00	; 0
    134e:	83 e6       	ldi	r24, 0x63	; 99
    1350:	9b e0       	ldi	r25, 0x0B	; 11
    1352:	0e 94 1a 31 	call	0x6234	; 0x6234 <_ZN3LCD9setCursorEhh>
    1356:	6b e8       	ldi	r22, 0x8B	; 139
    1358:	74 e0       	ldi	r23, 0x04	; 4
    135a:	83 e6       	ldi	r24, 0x63	; 99
    135c:	9b e0       	ldi	r25, 0x0B	; 11
    135e:	0e 94 a4 39 	call	0x7348	; 0x7348 <_ZN5Print5printEPKc>
    1362:	ff ef       	ldi	r31, 0xFF	; 255
    1364:	23 ed       	ldi	r18, 0xD3	; 211
    1366:	80 e3       	ldi	r24, 0x30	; 48
    1368:	f1 50       	subi	r31, 0x01	; 1
    136a:	20 40       	sbci	r18, 0x00	; 0
    136c:	80 40       	sbci	r24, 0x00	; 0
    136e:	e1 f7       	brne	.-8      	; 0x1368 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x258>
    1370:	00 c0       	rjmp	.+0      	; 0x1372 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x262>
    1372:	00 00       	nop
    1374:	80 e0       	ldi	r24, 0x00	; 0
    1376:	38 c0       	rjmp	.+112    	; 0x13e8 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x2d8>
    1378:	6b e3       	ldi	r22, 0x3B	; 59
    137a:	7b e0       	ldi	r23, 0x0B	; 11
    137c:	ce 01       	movw	r24, r28
    137e:	07 96       	adiw	r24, 0x07	; 7
    1380:	0e 94 d6 3c 	call	0x79ac	; 0x79ac <_ZN6StringC1ERKS_>
    1384:	be 01       	movw	r22, r28
    1386:	69 5f       	subi	r22, 0xF9	; 249
    1388:	7f 4f       	sbci	r23, 0xFF	; 255
    138a:	ce 01       	movw	r24, r28
    138c:	01 96       	adiw	r24, 0x01	; 1
    138e:	fb dc       	rcall	.-1546   	; 0xd86 <_Z19GetHTTPResponseCode6String>
    1390:	be 01       	movw	r22, r28
    1392:	6f 5f       	subi	r22, 0xFF	; 255
    1394:	7f 4f       	sbci	r23, 0xFF	; 255
    1396:	ce 01       	movw	r24, r28
    1398:	0d 96       	adiw	r24, 0x0d	; 13
    139a:	0e 94 de 3c 	call	0x79bc	; 0x79bc <_ZN6StringaSEOS_>
    139e:	ce 01       	movw	r24, r28
    13a0:	01 96       	adiw	r24, 0x01	; 1
    13a2:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
    13a6:	ce 01       	movw	r24, r28
    13a8:	07 96       	adiw	r24, 0x07	; 7
    13aa:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
    13ae:	9f ef       	ldi	r25, 0xFF	; 255
    13b0:	e7 ee       	ldi	r30, 0xE7	; 231
    13b2:	f3 e0       	ldi	r31, 0x03	; 3
    13b4:	91 50       	subi	r25, 0x01	; 1
    13b6:	e0 40       	sbci	r30, 0x00	; 0
    13b8:	f0 40       	sbci	r31, 0x00	; 0
    13ba:	e1 f7       	brne	.-8      	; 0x13b4 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x2a4>
    13bc:	00 c0       	rjmp	.+0      	; 0x13be <_Z17PostErogazioneGACiPc14EthernetClient6String+0x2ae>
    13be:	00 00       	nop
    13c0:	60 ea       	ldi	r22, 0xA0	; 160
    13c2:	74 e0       	ldi	r23, 0x04	; 4
    13c4:	ce 01       	movw	r24, r28
    13c6:	0d 96       	adiw	r24, 0x0d	; 13
    13c8:	0e 94 73 3e 	call	0x7ce6	; 0x7ce6 <_ZNK6String6equalsEPKc>
    13cc:	88 23       	and	r24, r24
    13ce:	51 f0       	breq	.+20     	; 0x13e4 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x2d4>
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	44 d8       	rcall	.-3960   	; 0x45c <_Z4passb>
    13d4:	1f d8       	rcall	.-4034   	; 0x414 <_Z9printLinev>
    13d6:	11 e0       	ldi	r17, 0x01	; 1
    13d8:	ce 01       	movw	r24, r28
    13da:	0d 96       	adiw	r24, 0x0d	; 13
    13dc:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
    13e0:	81 2f       	mov	r24, r17
    13e2:	02 c0       	rjmp	.+4      	; 0x13e8 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x2d8>
    13e4:	10 e0       	ldi	r17, 0x00	; 0
    13e6:	f8 cf       	rjmp	.-16     	; 0x13d8 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x2c8>
    13e8:	62 96       	adiw	r28, 0x12	; 18
    13ea:	0f b6       	in	r0, 0x3f	; 63
    13ec:	f8 94       	cli
    13ee:	de bf       	out	0x3e, r29	; 62
    13f0:	0f be       	out	0x3f, r0	; 63
    13f2:	cd bf       	out	0x3d, r28	; 61
    13f4:	df 91       	pop	r29
    13f6:	cf 91       	pop	r28
    13f8:	1f 91       	pop	r17
    13fa:	0f 91       	pop	r16
    13fc:	ff 90       	pop	r15
    13fe:	ef 90       	pop	r14
    1400:	df 90       	pop	r13
    1402:	cf 90       	pop	r12
    1404:	bf 90       	pop	r11
    1406:	af 90       	pop	r10
    1408:	08 95       	ret

0000140a <_Z15abilitaPulsantiv>:
    140a:	57 98       	cbi	0x0a, 7	; 10
    140c:	56 98       	cbi	0x0a, 6	; 10
    140e:	88 e0       	ldi	r24, 0x08	; 8
    1410:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    1414:	80 ec       	ldi	r24, 0xC0	; 192
    1416:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    141a:	78 94       	sei
    141c:	08 95       	ret

0000141e <_Z22abilitaContattiPistolav>:
    141e:	09 98       	cbi	0x01, 1	; 1
    1420:	0a 98       	cbi	0x01, 2	; 1
    1422:	08 95       	ret

00001424 <_Z13abilitaPulserc>:
    1424:	2f ef       	ldi	r18, 0xFF	; 255
    1426:	3f e0       	ldi	r19, 0x0F	; 15
    1428:	97 e2       	ldi	r25, 0x27	; 39
    142a:	21 50       	subi	r18, 0x01	; 1
    142c:	30 40       	sbci	r19, 0x00	; 0
    142e:	90 40       	sbci	r25, 0x00	; 0
    1430:	e1 f7       	brne	.-8      	; 0x142a <_Z13abilitaPulserc+0x6>
    1432:	00 c0       	rjmp	.+0      	; 0x1434 <_Z13abilitaPulserc+0x10>
    1434:	00 00       	nop
    1436:	91 e0       	ldi	r25, 0x01	; 1
    1438:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    143c:	84 34       	cpi	r24, 0x44	; 68
    143e:	19 f4       	brne	.+6      	; 0x1446 <_Z13abilitaPulserc+0x22>
    1440:	0d 98       	cbi	0x01, 5	; 1
    1442:	80 e2       	ldi	r24, 0x20	; 32
    1444:	02 c0       	rjmp	.+4      	; 0x144a <_Z13abilitaPulserc+0x26>
    1446:	0e 98       	cbi	0x01, 6	; 1
    1448:	80 e4       	ldi	r24, 0x40	; 64
    144a:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
    144e:	78 94       	sei
    1450:	08 95       	ret

00001452 <_Z16disabilitaPulserc>:
    1452:	2f ef       	ldi	r18, 0xFF	; 255
    1454:	31 ee       	ldi	r19, 0xE1	; 225
    1456:	94 e0       	ldi	r25, 0x04	; 4
    1458:	21 50       	subi	r18, 0x01	; 1
    145a:	30 40       	sbci	r19, 0x00	; 0
    145c:	90 40       	sbci	r25, 0x00	; 0
    145e:	e1 f7       	brne	.-8      	; 0x1458 <_Z16disabilitaPulserc+0x6>
    1460:	00 c0       	rjmp	.+0      	; 0x1462 <_Z16disabilitaPulserc+0x10>
    1462:	00 00       	nop
    1464:	91 e0       	ldi	r25, 0x01	; 1
    1466:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    146a:	84 34       	cpi	r24, 0x44	; 68
    146c:	11 f4       	brne	.+4      	; 0x1472 <_Z16disabilitaPulserc+0x20>
    146e:	0d 98       	cbi	0x01, 5	; 1
    1470:	01 c0       	rjmp	.+2      	; 0x1474 <_Z16disabilitaPulserc+0x22>
    1472:	0e 98       	cbi	0x01, 6	; 1
    1474:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
    1478:	f8 94       	cli
    147a:	08 95       	ret

0000147c <_Z14impulsiToLitrii>:
    147c:	cf 92       	push	r12
    147e:	df 92       	push	r13
    1480:	ef 92       	push	r14
    1482:	ff 92       	push	r15
    1484:	bc 01       	movw	r22, r24
    1486:	99 0f       	add	r25, r25
    1488:	88 0b       	sbc	r24, r24
    148a:	99 0b       	sbc	r25, r25
    148c:	0e 94 89 37 	call	0x6f12	; 0x6f12 <__floatsisf>
    1490:	6b 01       	movw	r12, r22
    1492:	7c 01       	movw	r14, r24
    1494:	20 e0       	ldi	r18, 0x00	; 0
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	a9 01       	movw	r20, r18
    149a:	0e 94 1b 37 	call	0x6e36	; 0x6e36 <__cmpsf2>
    149e:	87 ff       	sbrs	r24, 7
    14a0:	03 c0       	rjmp	.+6      	; 0x14a8 <_Z14impulsiToLitrii+0x2c>
    14a2:	c1 2c       	mov	r12, r1
    14a4:	d1 2c       	mov	r13, r1
    14a6:	76 01       	movw	r14, r12
    14a8:	60 91 53 01 	lds	r22, 0x0153	; 0x800153 <ImpulsiLitro>
    14ac:	70 91 54 01 	lds	r23, 0x0154	; 0x800154 <ImpulsiLitro+0x1>
    14b0:	07 2e       	mov	r0, r23
    14b2:	00 0c       	add	r0, r0
    14b4:	88 0b       	sbc	r24, r24
    14b6:	99 0b       	sbc	r25, r25
    14b8:	0e 94 89 37 	call	0x6f12	; 0x6f12 <__floatsisf>
    14bc:	9b 01       	movw	r18, r22
    14be:	ac 01       	movw	r20, r24
    14c0:	c7 01       	movw	r24, r14
    14c2:	b6 01       	movw	r22, r12
    14c4:	0e 94 1f 37 	call	0x6e3e	; 0x6e3e <__divsf3>
    14c8:	ff 90       	pop	r15
    14ca:	ef 90       	pop	r14
    14cc:	df 90       	pop	r13
    14ce:	cf 90       	pop	r12
    14d0:	08 95       	ret

000014d2 <_Z18Rele_Abilitazione1ii>:
    14d2:	3f 9a       	sbi	0x07, 7	; 7
    14d4:	81 30       	cpi	r24, 0x01	; 1
    14d6:	91 05       	cpc	r25, r1
    14d8:	39 f0       	breq	.+14     	; 0x14e8 <_Z18Rele_Abilitazione1ii+0x16>
    14da:	82 30       	cpi	r24, 0x02	; 2
    14dc:	91 05       	cpc	r25, r1
    14de:	59 f0       	breq	.+22     	; 0x14f6 <_Z18Rele_Abilitazione1ii+0x24>
    14e0:	89 2b       	or	r24, r25
    14e2:	01 f5       	brne	.+64     	; 0x1524 <_Z18Rele_Abilitazione1ii+0x52>
    14e4:	47 98       	cbi	0x08, 7	; 8
    14e6:	08 95       	ret
    14e8:	28 b1       	in	r18, 0x08	; 8
    14ea:	01 c0       	rjmp	.+2      	; 0x14ee <_Z18Rele_Abilitazione1ii+0x1c>
    14ec:	88 0f       	add	r24, r24
    14ee:	6a 95       	dec	r22
    14f0:	ea f7       	brpl	.-6      	; 0x14ec <_Z18Rele_Abilitazione1ii+0x1a>
    14f2:	82 2b       	or	r24, r18
    14f4:	16 c0       	rjmp	.+44     	; 0x1522 <_Z18Rele_Abilitazione1ii+0x50>
    14f6:	28 b1       	in	r18, 0x08	; 8
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	01 c0       	rjmp	.+2      	; 0x1500 <_Z18Rele_Abilitazione1ii+0x2e>
    14fe:	88 0f       	add	r24, r24
    1500:	6a 95       	dec	r22
    1502:	ea f7       	brpl	.-6      	; 0x14fe <_Z18Rele_Abilitazione1ii+0x2c>
    1504:	98 2f       	mov	r25, r24
    1506:	90 95       	com	r25
    1508:	92 23       	and	r25, r18
    150a:	98 b9       	out	0x08, r25	; 8
    150c:	2f ef       	ldi	r18, 0xFF	; 255
    150e:	35 ea       	ldi	r19, 0xA5	; 165
    1510:	4e e0       	ldi	r20, 0x0E	; 14
    1512:	21 50       	subi	r18, 0x01	; 1
    1514:	30 40       	sbci	r19, 0x00	; 0
    1516:	40 40       	sbci	r20, 0x00	; 0
    1518:	e1 f7       	brne	.-8      	; 0x1512 <_Z18Rele_Abilitazione1ii+0x40>
    151a:	00 c0       	rjmp	.+0      	; 0x151c <_Z18Rele_Abilitazione1ii+0x4a>
    151c:	00 00       	nop
    151e:	98 b1       	in	r25, 0x08	; 8
    1520:	89 2b       	or	r24, r25
    1522:	88 b9       	out	0x08, r24	; 8
    1524:	08 95       	ret

00001526 <_Z18Rele_Abilitazione2ii>:
    1526:	0f 9a       	sbi	0x01, 7	; 1
    1528:	81 30       	cpi	r24, 0x01	; 1
    152a:	91 05       	cpc	r25, r1
    152c:	79 f0       	breq	.+30     	; 0x154c <_Z18Rele_Abilitazione2ii+0x26>
    152e:	82 30       	cpi	r24, 0x02	; 2
    1530:	91 05       	cpc	r25, r1
    1532:	99 f0       	breq	.+38     	; 0x155a <_Z18Rele_Abilitazione2ii+0x34>
    1534:	89 2b       	or	r24, r25
    1536:	41 f5       	brne	.+80     	; 0x1588 <_Z18Rele_Abilitazione2ii+0x62>
    1538:	22 b1       	in	r18, 0x02	; 2
    153a:	81 e0       	ldi	r24, 0x01	; 1
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	01 c0       	rjmp	.+2      	; 0x1542 <_Z18Rele_Abilitazione2ii+0x1c>
    1540:	88 0f       	add	r24, r24
    1542:	6a 95       	dec	r22
    1544:	ea f7       	brpl	.-6      	; 0x1540 <_Z18Rele_Abilitazione2ii+0x1a>
    1546:	80 95       	com	r24
    1548:	82 23       	and	r24, r18
    154a:	1d c0       	rjmp	.+58     	; 0x1586 <_Z18Rele_Abilitazione2ii+0x60>
    154c:	22 b1       	in	r18, 0x02	; 2
    154e:	01 c0       	rjmp	.+2      	; 0x1552 <_Z18Rele_Abilitazione2ii+0x2c>
    1550:	88 0f       	add	r24, r24
    1552:	6a 95       	dec	r22
    1554:	ea f7       	brpl	.-6      	; 0x1550 <_Z18Rele_Abilitazione2ii+0x2a>
    1556:	82 2b       	or	r24, r18
    1558:	16 c0       	rjmp	.+44     	; 0x1586 <_Z18Rele_Abilitazione2ii+0x60>
    155a:	22 b1       	in	r18, 0x02	; 2
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	01 c0       	rjmp	.+2      	; 0x1564 <_Z18Rele_Abilitazione2ii+0x3e>
    1562:	88 0f       	add	r24, r24
    1564:	6a 95       	dec	r22
    1566:	ea f7       	brpl	.-6      	; 0x1562 <_Z18Rele_Abilitazione2ii+0x3c>
    1568:	98 2f       	mov	r25, r24
    156a:	90 95       	com	r25
    156c:	92 23       	and	r25, r18
    156e:	92 b9       	out	0x02, r25	; 2
    1570:	2f ef       	ldi	r18, 0xFF	; 255
    1572:	35 ea       	ldi	r19, 0xA5	; 165
    1574:	4e e0       	ldi	r20, 0x0E	; 14
    1576:	21 50       	subi	r18, 0x01	; 1
    1578:	30 40       	sbci	r19, 0x00	; 0
    157a:	40 40       	sbci	r20, 0x00	; 0
    157c:	e1 f7       	brne	.-8      	; 0x1576 <_Z18Rele_Abilitazione2ii+0x50>
    157e:	00 c0       	rjmp	.+0      	; 0x1580 <_Z18Rele_Abilitazione2ii+0x5a>
    1580:	00 00       	nop
    1582:	92 b1       	in	r25, 0x02	; 2
    1584:	89 2b       	or	r24, r25
    1586:	82 b9       	out	0x02, r24	; 2
    1588:	08 95       	ret

0000158a <_Z6Azzerav>:
    158a:	6f ef       	ldi	r22, 0xFF	; 255
    158c:	71 e0       	ldi	r23, 0x01	; 1
    158e:	8b e3       	ldi	r24, 0x3B	; 59
    1590:	9b e0       	ldi	r25, 0x0B	; 11
    1592:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
    1596:	10 92 43 0b 	sts	0x0B43, r1	; 0x800b43 <impulsi+0x1>
    159a:	10 92 42 0b 	sts	0x0B42, r1	; 0x800b42 <impulsi>
    159e:	10 92 7b 0b 	sts	0x0B7B, r1	; 0x800b7b <alreadyTimbrata>
    15a2:	61 e2       	ldi	r22, 0x21	; 33
    15a4:	75 e0       	ldi	r23, 0x05	; 5
    15a6:	85 e8       	ldi	r24, 0x85	; 133
    15a8:	9b e0       	ldi	r25, 0x0B	; 11
    15aa:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
    15ae:	61 e2       	ldi	r22, 0x21	; 33
    15b0:	75 e0       	ldi	r23, 0x05	; 5
    15b2:	8b e8       	ldi	r24, 0x8B	; 139
    15b4:	9b e0       	ldi	r25, 0x0B	; 11
    15b6:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
    15ba:	6f ea       	ldi	r22, 0xAF	; 175
    15bc:	78 e0       	ldi	r23, 0x08	; 8
    15be:	81 e9       	ldi	r24, 0x91	; 145
    15c0:	9b e0       	ldi	r25, 0x0B	; 11
    15c2:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
    15c6:	10 92 41 0b 	sts	0x0B41, r1	; 0x800b41 <distr_selezionato>
    15ca:	67 e0       	ldi	r22, 0x07	; 7
    15cc:	70 e0       	ldi	r23, 0x00	; 0
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	7f df       	rcall	.-258    	; 0x14d2 <_Z18Rele_Abilitazione1ii>
    15d4:	67 e0       	ldi	r22, 0x07	; 7
    15d6:	70 e0       	ldi	r23, 0x00	; 0
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	a4 df       	rcall	.-184    	; 0x1526 <_Z18Rele_Abilitazione2ii>
    15de:	8f e1       	ldi	r24, 0x1F	; 31
    15e0:	9e e4       	ldi	r25, 0x4E	; 78
    15e2:	01 97       	sbiw	r24, 0x01	; 1
    15e4:	f1 f7       	brne	.-4      	; 0x15e2 <_Z6Azzerav+0x58>
    15e6:	00 c0       	rjmp	.+0      	; 0x15e8 <_Z6Azzerav+0x5e>
    15e8:	00 00       	nop
    15ea:	81 ec       	ldi	r24, 0xC1	; 193
    15ec:	9a e0       	ldi	r25, 0x0A	; 10
    15ee:	0e 94 fc 29 	call	0x53f8	; 0x53f8 <_ZN14EthernetClient5flushEv>
    15f2:	81 ec       	ldi	r24, 0xC1	; 193
    15f4:	9a e0       	ldi	r25, 0x0A	; 10
    15f6:	0e 94 41 2a 	call	0x5482	; 0x5482 <_ZN14EthernetClient4stopEv>
    15fa:	8f e1       	ldi	r24, 0x1F	; 31
    15fc:	9e e4       	ldi	r25, 0x4E	; 78
    15fe:	01 97       	sbiw	r24, 0x01	; 1
    1600:	f1 f7       	brne	.-4      	; 0x15fe <_Z6Azzerav+0x74>
    1602:	00 c0       	rjmp	.+0      	; 0x1604 <_Z6Azzerav+0x7a>
    1604:	00 00       	nop
    1606:	8e ec       	ldi	r24, 0xCE	; 206
    1608:	9a e0       	ldi	r25, 0x0A	; 10
    160a:	0e 94 fc 29 	call	0x53f8	; 0x53f8 <_ZN14EthernetClient5flushEv>
    160e:	8e ec       	ldi	r24, 0xCE	; 206
    1610:	9a e0       	ldi	r25, 0x0A	; 10
    1612:	0e 94 41 2a 	call	0x5482	; 0x5482 <_ZN14EthernetClient4stopEv>
    1616:	8f e1       	ldi	r24, 0x1F	; 31
    1618:	9e e4       	ldi	r25, 0x4E	; 78
    161a:	01 97       	sbiw	r24, 0x01	; 1
    161c:	f1 f7       	brne	.-4      	; 0x161a <_Z6Azzerav+0x90>
    161e:	00 c0       	rjmp	.+0      	; 0x1620 <_Z6Azzerav+0x96>
    1620:	00 00       	nop
    1622:	2c 98       	cbi	0x05, 4	; 5
    1624:	8f e1       	ldi	r24, 0x1F	; 31
    1626:	9e e4       	ldi	r25, 0x4E	; 78
    1628:	01 97       	sbiw	r24, 0x01	; 1
    162a:	f1 f7       	brne	.-4      	; 0x1628 <_Z6Azzerav+0x9e>
    162c:	00 c0       	rjmp	.+0      	; 0x162e <_Z6Azzerav+0xa4>
    162e:	00 00       	nop
    1630:	2c 9a       	sbi	0x05, 4	; 5
    1632:	8f e1       	ldi	r24, 0x1F	; 31
    1634:	9e e4       	ldi	r25, 0x4E	; 78
    1636:	01 97       	sbiw	r24, 0x01	; 1
    1638:	f1 f7       	brne	.-4      	; 0x1636 <_Z6Azzerav+0xac>
    163a:	00 c0       	rjmp	.+0      	; 0x163c <_Z6Azzerav+0xb2>
    163c:	00 00       	nop
    163e:	0e 94 95 01 	call	0x32a	; 0x32a <_ZL11disable_ETHv>
    1642:	8f e1       	ldi	r24, 0x1F	; 31
    1644:	9e e4       	ldi	r25, 0x4E	; 78
    1646:	01 97       	sbiw	r24, 0x01	; 1
    1648:	f1 f7       	brne	.-4      	; 0x1646 <_Z6Azzerav+0xbc>
    164a:	00 c0       	rjmp	.+0      	; 0x164c <_Z6Azzerav+0xc2>
    164c:	00 00       	nop
    164e:	0e 94 93 01 	call	0x326	; 0x326 <_ZL10enable_ETHv>
    1652:	82 b1       	in	r24, 0x02	; 2
    1654:	82 b9       	out	0x02, r24	; 2
    1656:	82 b1       	in	r24, 0x02	; 2
    1658:	82 b9       	out	0x02, r24	; 2
    165a:	6f ef       	ldi	r22, 0xFF	; 255
    165c:	71 e0       	ldi	r23, 0x01	; 1
    165e:	89 ef       	ldi	r24, 0xF9	; 249
    1660:	9a e0       	ldi	r25, 0x0A	; 10
    1662:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
    1666:	6f ef       	ldi	r22, 0xFF	; 255
    1668:	71 e0       	ldi	r23, 0x01	; 1
    166a:	8f ef       	ldi	r24, 0xFF	; 255
    166c:	9a e0       	ldi	r25, 0x0A	; 10
    166e:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
    1672:	6f ef       	ldi	r22, 0xFF	; 255
    1674:	71 e0       	ldi	r23, 0x01	; 1
    1676:	8f ef       	ldi	r24, 0xFF	; 255
    1678:	9a e0       	ldi	r25, 0x0A	; 10
    167a:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
    167e:	83 e6       	ldi	r24, 0x63	; 99
    1680:	9b e0       	ldi	r25, 0x0B	; 11
    1682:	0e 94 04 31 	call	0x6208	; 0x6208 <_ZN3LCD11noBacklightEv>
    1686:	83 e6       	ldi	r24, 0x63	; 99
    1688:	9b e0       	ldi	r25, 0x0B	; 11
    168a:	0e 94 5c 31 	call	0x62b8	; 0x62b8 <_ZN3LCD9noDisplayEv>
    168e:	10 92 b1 0a 	sts	0x0AB1, r1	; 0x800ab1 <secs>
    1692:	10 92 b2 0a 	sts	0x0AB2, r1	; 0x800ab2 <secs+0x1>
    1696:	10 92 b3 0a 	sts	0x0AB3, r1	; 0x800ab3 <secs+0x2>
    169a:	10 92 b4 0a 	sts	0x0AB4, r1	; 0x800ab4 <secs+0x3>
    169e:	10 92 ad 0a 	sts	0x0AAD, r1	; 0x800aad <UltimoPassaggioStato>
    16a2:	10 92 ae 0a 	sts	0x0AAE, r1	; 0x800aae <UltimoPassaggioStato+0x1>
    16a6:	10 92 af 0a 	sts	0x0AAF, r1	; 0x800aaf <UltimoPassaggioStato+0x2>
    16aa:	10 92 b0 0a 	sts	0x0AB0, r1	; 0x800ab0 <UltimoPassaggioStato+0x3>
    16ae:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
    16b2:	68 eb       	ldi	r22, 0xB8	; 184
    16b4:	75 e0       	ldi	r23, 0x05	; 5
    16b6:	88 e3       	ldi	r24, 0x38	; 56
    16b8:	9d e0       	ldi	r25, 0x0D	; 13
    16ba:	0e 94 cf 39 	call	0x739e	; 0x739e <_ZN5Print7printlnEPKc>
    16be:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
    16c2:	6f ef       	ldi	r22, 0xFF	; 255
    16c4:	71 e0       	ldi	r23, 0x01	; 1
    16c6:	89 e9       	ldi	r24, 0x99	; 153
    16c8:	9a e0       	ldi	r25, 0x0A	; 10
    16ca:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
    16ce:	0e 94 1c 03 	call	0x638	; 0x638 <_Z18WDT_Prescaler_8Secv>
    16d2:	8f ef       	ldi	r24, 0xFF	; 255
    16d4:	9f ef       	ldi	r25, 0xFF	; 255
    16d6:	90 93 45 0b 	sts	0x0B45, r25	; 0x800b45 <stato_procedura+0x1>
    16da:	80 93 44 0b 	sts	0x0B44, r24	; 0x800b44 <stato_procedura>
    16de:	08 95       	ret

000016e0 <_Z10inputTargac>:
    16e0:	cf 93       	push	r28
    16e2:	df 93       	push	r29
    16e4:	cd b7       	in	r28, 0x3d	; 61
    16e6:	de b7       	in	r29, 0x3e	; 62
    16e8:	62 97       	sbiw	r28, 0x12	; 18
    16ea:	0f b6       	in	r0, 0x3f	; 63
    16ec:	f8 94       	cli
    16ee:	de bf       	out	0x3e, r29	; 62
    16f0:	0f be       	out	0x3f, r0	; 63
    16f2:	cd bf       	out	0x3d, r28	; 61
    16f4:	81 34       	cpi	r24, 0x41	; 65
    16f6:	19 f1       	breq	.+70     	; 0x173e <_Z10inputTargac+0x5e>
    16f8:	d8 f4       	brcc	.+54     	; 0x1730 <_Z10inputTargac+0x50>
    16fa:	83 32       	cpi	r24, 0x23	; 35
    16fc:	09 f4       	brne	.+2      	; 0x1700 <_Z10inputTargac+0x20>
    16fe:	5d c0       	rjmp	.+186    	; 0x17ba <_Z10inputTargac+0xda>
    1700:	8a 32       	cpi	r24, 0x2A	; 42
    1702:	09 f0       	breq	.+2      	; 0x1706 <_Z10inputTargac+0x26>
    1704:	89 c0       	rjmp	.+274    	; 0x1818 <_Z10inputTargac+0x138>
    1706:	6f ef       	ldi	r22, 0xFF	; 255
    1708:	71 e0       	ldi	r23, 0x01	; 1
    170a:	89 e9       	ldi	r24, 0x99	; 153
    170c:	9a e0       	ldi	r25, 0x0A	; 10
    170e:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
    1712:	6b ec       	ldi	r22, 0xCB	; 203
    1714:	75 e0       	ldi	r23, 0x05	; 5
    1716:	89 ef       	ldi	r24, 0xF9	; 249
    1718:	9a e0       	ldi	r25, 0x0A	; 10
    171a:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
    171e:	6f ef       	ldi	r22, 0xFF	; 255
    1720:	71 e0       	ldi	r23, 0x01	; 1
    1722:	8f ef       	ldi	r24, 0xFF	; 255
    1724:	9a e0       	ldi	r25, 0x0A	; 10
    1726:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
    172a:	6f ef       	ldi	r22, 0xFF	; 255
    172c:	71 e0       	ldi	r23, 0x01	; 1
    172e:	66 c0       	rjmp	.+204    	; 0x17fc <_Z10inputTargac+0x11c>
    1730:	83 34       	cpi	r24, 0x43	; 67
    1732:	29 f1       	breq	.+74     	; 0x177e <_Z10inputTargac+0x9e>
    1734:	a0 f0       	brcs	.+40     	; 0x175e <_Z10inputTargac+0x7e>
    1736:	8e 34       	cpi	r24, 0x4E	; 78
    1738:	09 f4       	brne	.+2      	; 0x173c <_Z10inputTargac+0x5c>
    173a:	05 c1       	rjmp	.+522    	; 0x1946 <_Z10inputTargac+0x266>
    173c:	6d c0       	rjmp	.+218    	; 0x1818 <_Z10inputTargac+0x138>
    173e:	80 91 9d 0a 	lds	r24, 0x0A9D	; 0x800a9d <TARGA+0x4>
    1742:	90 91 9e 0a 	lds	r25, 0x0A9E	; 0x800a9e <TARGA+0x5>
    1746:	05 97       	sbiw	r24, 0x05	; 5
    1748:	09 f0       	breq	.+2      	; 0x174c <_Z10inputTargac+0x6c>
    174a:	fd c0       	rjmp	.+506    	; 0x1946 <_Z10inputTargac+0x266>
    174c:	69 e9       	ldi	r22, 0x99	; 153
    174e:	7a e0       	ldi	r23, 0x0A	; 10
    1750:	ce 01       	movw	r24, r28
    1752:	01 96       	adiw	r24, 0x01	; 1
    1754:	0e 94 d6 3c 	call	0x79ac	; 0x79ac <_ZN6StringC1ERKS_>
    1758:	69 ec       	ldi	r22, 0xC9	; 201
    175a:	75 e0       	ldi	r23, 0x05	; 5
    175c:	ae c0       	rjmp	.+348    	; 0x18ba <_Z10inputTargac+0x1da>
    175e:	80 91 9d 0a 	lds	r24, 0x0A9D	; 0x800a9d <TARGA+0x4>
    1762:	90 91 9e 0a 	lds	r25, 0x0A9E	; 0x800a9e <TARGA+0x5>
    1766:	05 97       	sbiw	r24, 0x05	; 5
    1768:	09 f0       	breq	.+2      	; 0x176c <_Z10inputTargac+0x8c>
    176a:	ed c0       	rjmp	.+474    	; 0x1946 <_Z10inputTargac+0x266>
    176c:	69 e9       	ldi	r22, 0x99	; 153
    176e:	7a e0       	ldi	r23, 0x0A	; 10
    1770:	ce 01       	movw	r24, r28
    1772:	01 96       	adiw	r24, 0x01	; 1
    1774:	0e 94 d6 3c 	call	0x79ac	; 0x79ac <_ZN6StringC1ERKS_>
    1778:	6e e3       	ldi	r22, 0x3E	; 62
    177a:	76 e0       	ldi	r23, 0x06	; 6
    177c:	9e c0       	rjmp	.+316    	; 0x18ba <_Z10inputTargac+0x1da>
    177e:	20 91 9d 0a 	lds	r18, 0x0A9D	; 0x800a9d <TARGA+0x4>
    1782:	30 91 9e 0a 	lds	r19, 0x0A9E	; 0x800a9e <TARGA+0x5>
    1786:	21 15       	cp	r18, r1
    1788:	31 05       	cpc	r19, r1
    178a:	09 f4       	brne	.+2      	; 0x178e <_Z10inputTargac+0xae>
    178c:	dc c0       	rjmp	.+440    	; 0x1946 <_Z10inputTargac+0x266>
    178e:	21 50       	subi	r18, 0x01	; 1
    1790:	31 09       	sbc	r19, r1
    1792:	40 e0       	ldi	r20, 0x00	; 0
    1794:	50 e0       	ldi	r21, 0x00	; 0
    1796:	69 e9       	ldi	r22, 0x99	; 153
    1798:	7a e0       	ldi	r23, 0x0A	; 10
    179a:	ce 01       	movw	r24, r28
    179c:	01 96       	adiw	r24, 0x01	; 1
    179e:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <_ZNK6String9substringEjj>
    17a2:	be 01       	movw	r22, r28
    17a4:	6f 5f       	subi	r22, 0xFF	; 255
    17a6:	7f 4f       	sbci	r23, 0xFF	; 255
    17a8:	89 e9       	ldi	r24, 0x99	; 153
    17aa:	9a e0       	ldi	r25, 0x0A	; 10
    17ac:	0e 94 de 3c 	call	0x79bc	; 0x79bc <_ZN6StringaSEOS_>
    17b0:	ce 01       	movw	r24, r28
    17b2:	01 96       	adiw	r24, 0x01	; 1
    17b4:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
    17b8:	54 c0       	rjmp	.+168    	; 0x1862 <_Z10inputTargac+0x182>
    17ba:	80 91 9d 0a 	lds	r24, 0x0A9D	; 0x800a9d <TARGA+0x4>
    17be:	90 91 9e 0a 	lds	r25, 0x0A9E	; 0x800a9e <TARGA+0x5>
    17c2:	05 97       	sbiw	r24, 0x05	; 5
    17c4:	09 f0       	breq	.+2      	; 0x17c8 <_Z10inputTargac+0xe8>
    17c6:	bf c0       	rjmp	.+382    	; 0x1946 <_Z10inputTargac+0x266>
    17c8:	69 e9       	ldi	r22, 0x99	; 153
    17ca:	7a e0       	ldi	r23, 0x0A	; 10
    17cc:	8b e8       	ldi	r24, 0x8B	; 139
    17ce:	9b e0       	ldi	r25, 0x0B	; 11
    17d0:	0e 94 c1 3c 	call	0x7982	; 0x7982 <_ZN6StringaSERKS_>
    17d4:	6b e8       	ldi	r22, 0x8B	; 139
    17d6:	7b e0       	ldi	r23, 0x0B	; 11
    17d8:	8d e1       	ldi	r24, 0x1D	; 29
    17da:	9b e0       	ldi	r25, 0x0B	; 11
    17dc:	0e 94 c1 3c 	call	0x7982	; 0x7982 <_ZN6StringaSERKS_>
    17e0:	6c e0       	ldi	r22, 0x0C	; 12
    17e2:	76 e0       	ldi	r23, 0x06	; 6
    17e4:	89 ef       	ldi	r24, 0xF9	; 249
    17e6:	9a e0       	ldi	r25, 0x0A	; 10
    17e8:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
    17ec:	60 e2       	ldi	r22, 0x20	; 32
    17ee:	76 e0       	ldi	r23, 0x06	; 6
    17f0:	8f ef       	ldi	r24, 0xFF	; 255
    17f2:	9a e0       	ldi	r25, 0x0A	; 10
    17f4:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
    17f8:	6f e2       	ldi	r22, 0x2F	; 47
    17fa:	76 e0       	ldi	r23, 0x06	; 6
    17fc:	85 e0       	ldi	r24, 0x05	; 5
    17fe:	9b e0       	ldi	r25, 0x0B	; 11
    1800:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
    1804:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <TselDistributore>
    1808:	70 91 23 01 	lds	r23, 0x0123	; 0x800123 <TselDistributore+0x1>
    180c:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <TselDistributore+0x2>
    1810:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <TselDistributore+0x3>
    1814:	78 d8       	rcall	.-3856   	; 0x906 <_Z11avanzaStatom>
    1816:	97 c0       	rjmp	.+302    	; 0x1946 <_Z10inputTargac+0x266>
    1818:	20 91 9d 0a 	lds	r18, 0x0A9D	; 0x800a9d <TARGA+0x4>
    181c:	30 91 9e 0a 	lds	r19, 0x0A9E	; 0x800a9e <TARGA+0x5>
    1820:	25 30       	cpi	r18, 0x05	; 5
    1822:	31 05       	cpc	r19, r1
    1824:	08 f0       	brcs	.+2      	; 0x1828 <_Z10inputTargac+0x148>
    1826:	8f c0       	rjmp	.+286    	; 0x1946 <_Z10inputTargac+0x266>
    1828:	68 2f       	mov	r22, r24
    182a:	ce 01       	movw	r24, r28
    182c:	01 96       	adiw	r24, 0x01	; 1
    182e:	0e 94 fe 3c 	call	0x79fc	; 0x79fc <_ZN6StringC1Ec>
    1832:	be 01       	movw	r22, r28
    1834:	6f 5f       	subi	r22, 0xFF	; 255
    1836:	7f 4f       	sbci	r23, 0xFF	; 255
    1838:	89 e9       	ldi	r24, 0x99	; 153
    183a:	9a e0       	ldi	r25, 0x0A	; 10
    183c:	0e 94 19 3e 	call	0x7c32	; 0x7c32 <_ZN6String6concatERKS_>
    1840:	ce 01       	movw	r24, r28
    1842:	01 96       	adiw	r24, 0x01	; 1
    1844:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
    1848:	4a e0       	ldi	r20, 0x0A	; 10
    184a:	50 e0       	ldi	r21, 0x00	; 0
    184c:	60 e0       	ldi	r22, 0x00	; 0
    184e:	70 e0       	ldi	r23, 0x00	; 0
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	0e 94 4a 03 	call	0x694	; 0x694 <_Z6Buzzerhm>
    1856:	8f e3       	ldi	r24, 0x3F	; 63
    1858:	9c e9       	ldi	r25, 0x9C	; 156
    185a:	01 97       	sbiw	r24, 0x01	; 1
    185c:	f1 f7       	brne	.-4      	; 0x185a <_Z10inputTargac+0x17a>
    185e:	00 c0       	rjmp	.+0      	; 0x1860 <_Z10inputTargac+0x180>
    1860:	00 00       	nop
    1862:	6e ed       	ldi	r22, 0xDE	; 222
    1864:	75 e0       	ldi	r23, 0x05	; 5
    1866:	89 ef       	ldi	r24, 0xF9	; 249
    1868:	9a e0       	ldi	r25, 0x0A	; 10
    186a:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
    186e:	60 ef       	ldi	r22, 0xF0	; 240
    1870:	75 e0       	ldi	r23, 0x05	; 5
    1872:	ce 01       	movw	r24, r28
    1874:	01 96       	adiw	r24, 0x01	; 1
    1876:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
    187a:	69 e9       	ldi	r22, 0x99	; 153
    187c:	7a e0       	ldi	r23, 0x0A	; 10
    187e:	ce 01       	movw	r24, r28
    1880:	01 96       	adiw	r24, 0x01	; 1
    1882:	0e 94 3f 3e 	call	0x7c7e	; 0x7c7e <_ZplRK15StringSumHelperRK6String>
    1886:	bc 01       	movw	r22, r24
    1888:	8f ef       	ldi	r24, 0xFF	; 255
    188a:	9a e0       	ldi	r25, 0x0A	; 10
    188c:	0e 94 c1 3c 	call	0x7982	; 0x7982 <_ZN6StringaSERKS_>
    1890:	ce 01       	movw	r24, r28
    1892:	01 96       	adiw	r24, 0x01	; 1
    1894:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
    1898:	67 ef       	ldi	r22, 0xF7	; 247
    189a:	75 e0       	ldi	r23, 0x05	; 5
    189c:	85 e0       	ldi	r24, 0x05	; 5
    189e:	9b e0       	ldi	r25, 0x0B	; 11
    18a0:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
    18a4:	60 91 44 0b 	lds	r22, 0x0B44	; 0x800b44 <stato_procedura>
    18a8:	70 91 45 0b 	lds	r23, 0x0B45	; 0x800b45 <stato_procedura+0x1>
    18ac:	4a e0       	ldi	r20, 0x0A	; 10
    18ae:	50 e0       	ldi	r21, 0x00	; 0
    18b0:	83 ef       	ldi	r24, 0xF3	; 243
    18b2:	9a e0       	ldi	r25, 0x0A	; 10
    18b4:	0e 94 4e 04 	call	0x89c	; 0x89c <_Z10displayLCDP6Stringii>
    18b8:	46 c0       	rjmp	.+140    	; 0x1946 <_Z10inputTargac+0x266>
    18ba:	ce 01       	movw	r24, r28
    18bc:	01 96       	adiw	r24, 0x01	; 1
    18be:	0e 94 50 3e 	call	0x7ca0	; 0x7ca0 <_ZplRK15StringSumHelperPKc>
    18c2:	bc 01       	movw	r22, r24
    18c4:	ce 01       	movw	r24, r28
    18c6:	07 96       	adiw	r24, 0x07	; 7
    18c8:	0e 94 d6 3c 	call	0x79ac	; 0x79ac <_ZN6StringC1ERKS_>
    18cc:	ce 01       	movw	r24, r28
    18ce:	01 96       	adiw	r24, 0x01	; 1
    18d0:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
    18d4:	20 e0       	ldi	r18, 0x00	; 0
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	47 e0       	ldi	r20, 0x07	; 7
    18da:	50 e0       	ldi	r21, 0x00	; 0
    18dc:	be 01       	movw	r22, r28
    18de:	63 5f       	subi	r22, 0xF3	; 243
    18e0:	7f 4f       	sbci	r23, 0xFF	; 255
    18e2:	ce 01       	movw	r24, r28
    18e4:	07 96       	adiw	r24, 0x07	; 7
    18e6:	0e 94 91 3e 	call	0x7d22	; 0x7d22 <_ZNK6String8getBytesEPhjj>
    18ea:	be 01       	movw	r22, r28
    18ec:	63 5f       	subi	r22, 0xF3	; 243
    18ee:	7f 4f       	sbci	r23, 0xFF	; 255
    18f0:	ce 01       	movw	r24, r28
    18f2:	01 96       	adiw	r24, 0x01	; 1
    18f4:	49 d8       	rcall	.-3950   	; 0x988 <_Z16scrivi_TAG_MezzoPc>
    18f6:	8f e3       	ldi	r24, 0x3F	; 63
    18f8:	9c e9       	ldi	r25, 0x9C	; 156
    18fa:	01 97       	sbiw	r24, 0x01	; 1
    18fc:	f1 f7       	brne	.-4      	; 0x18fa <_Z10inputTargac+0x21a>
    18fe:	00 c0       	rjmp	.+0      	; 0x1900 <_Z10inputTargac+0x220>
    1900:	00 00       	nop
    1902:	4a e0       	ldi	r20, 0x0A	; 10
    1904:	50 e0       	ldi	r21, 0x00	; 0
    1906:	60 e0       	ldi	r22, 0x00	; 0
    1908:	70 e0       	ldi	r23, 0x00	; 0
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	0e 94 4a 03 	call	0x694	; 0x694 <_Z6Buzzerhm>
    1910:	8f e3       	ldi	r24, 0x3F	; 63
    1912:	9c e9       	ldi	r25, 0x9C	; 156
    1914:	01 97       	sbiw	r24, 0x01	; 1
    1916:	f1 f7       	brne	.-4      	; 0x1914 <_Z10inputTargac+0x234>
    1918:	00 c0       	rjmp	.+0      	; 0x191a <_Z10inputTargac+0x23a>
    191a:	00 00       	nop
    191c:	4a e0       	ldi	r20, 0x0A	; 10
    191e:	50 e0       	ldi	r21, 0x00	; 0
    1920:	60 e0       	ldi	r22, 0x00	; 0
    1922:	70 e0       	ldi	r23, 0x00	; 0
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	0e 94 4a 03 	call	0x694	; 0x694 <_Z6Buzzerhm>
    192a:	8f e3       	ldi	r24, 0x3F	; 63
    192c:	9c e9       	ldi	r25, 0x9C	; 156
    192e:	01 97       	sbiw	r24, 0x01	; 1
    1930:	f1 f7       	brne	.-4      	; 0x192e <_Z10inputTargac+0x24e>
    1932:	00 c0       	rjmp	.+0      	; 0x1934 <_Z10inputTargac+0x254>
    1934:	00 00       	nop
    1936:	ce 01       	movw	r24, r28
    1938:	01 96       	adiw	r24, 0x01	; 1
    193a:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
    193e:	ce 01       	movw	r24, r28
    1940:	07 96       	adiw	r24, 0x07	; 7
    1942:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
    1946:	62 96       	adiw	r28, 0x12	; 18
    1948:	0f b6       	in	r0, 0x3f	; 63
    194a:	f8 94       	cli
    194c:	de bf       	out	0x3e, r29	; 62
    194e:	0f be       	out	0x3f, r0	; 63
    1950:	cd bf       	out	0x3d, r28	; 61
    1952:	df 91       	pop	r29
    1954:	cf 91       	pop	r28
    1956:	08 95       	ret

00001958 <_Z7inputKMc>:
    1958:	cf 93       	push	r28
    195a:	df 93       	push	r29
    195c:	00 d0       	rcall	.+0      	; 0x195e <_Z7inputKMc+0x6>
    195e:	00 d0       	rcall	.+0      	; 0x1960 <_Z7inputKMc+0x8>
    1960:	00 d0       	rcall	.+0      	; 0x1962 <_Z7inputKMc+0xa>
    1962:	cd b7       	in	r28, 0x3d	; 61
    1964:	de b7       	in	r29, 0x3e	; 62
    1966:	83 34       	cpi	r24, 0x43	; 67
    1968:	60 f4       	brcc	.+24     	; 0x1982 <_Z7inputKMc+0x2a>
    196a:	81 34       	cpi	r24, 0x41	; 65
    196c:	08 f0       	brcs	.+2      	; 0x1970 <_Z7inputKMc+0x18>
    196e:	ce c0       	rjmp	.+412    	; 0x1b0c <_Z7inputKMc+0x1b4>
    1970:	8a 32       	cpi	r24, 0x2A	; 42
    1972:	09 f4       	brne	.+2      	; 0x1976 <_Z7inputKMc+0x1e>
    1974:	cb c0       	rjmp	.+406    	; 0x1b0c <_Z7inputKMc+0x1b4>
    1976:	8e 32       	cpi	r24, 0x2E	; 46
    1978:	09 f4       	brne	.+2      	; 0x197c <_Z7inputKMc+0x24>
    197a:	c8 c0       	rjmp	.+400    	; 0x1b0c <_Z7inputKMc+0x1b4>
    197c:	83 32       	cpi	r24, 0x23	; 35
    197e:	29 f1       	breq	.+74     	; 0x19ca <_Z7inputKMc+0x72>
    1980:	7b c0       	rjmp	.+246    	; 0x1a78 <_Z7inputKMc+0x120>
    1982:	83 34       	cpi	r24, 0x43	; 67
    1984:	21 f0       	breq	.+8      	; 0x198e <_Z7inputKMc+0x36>
    1986:	8e 34       	cpi	r24, 0x4E	; 78
    1988:	09 f0       	breq	.+2      	; 0x198c <_Z7inputKMc+0x34>
    198a:	76 c0       	rjmp	.+236    	; 0x1a78 <_Z7inputKMc+0x120>
    198c:	bf c0       	rjmp	.+382    	; 0x1b0c <_Z7inputKMc+0x1b4>
    198e:	20 91 97 0a 	lds	r18, 0x0A97	; 0x800a97 <KM+0x4>
    1992:	30 91 98 0a 	lds	r19, 0x0A98	; 0x800a98 <KM+0x5>
    1996:	21 15       	cp	r18, r1
    1998:	31 05       	cpc	r19, r1
    199a:	09 f4       	brne	.+2      	; 0x199e <_Z7inputKMc+0x46>
    199c:	8c c0       	rjmp	.+280    	; 0x1ab6 <_Z7inputKMc+0x15e>
    199e:	21 50       	subi	r18, 0x01	; 1
    19a0:	31 09       	sbc	r19, r1
    19a2:	40 e0       	ldi	r20, 0x00	; 0
    19a4:	50 e0       	ldi	r21, 0x00	; 0
    19a6:	63 e9       	ldi	r22, 0x93	; 147
    19a8:	7a e0       	ldi	r23, 0x0A	; 10
    19aa:	ce 01       	movw	r24, r28
    19ac:	01 96       	adiw	r24, 0x01	; 1
    19ae:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <_ZNK6String9substringEjj>
    19b2:	be 01       	movw	r22, r28
    19b4:	6f 5f       	subi	r22, 0xFF	; 255
    19b6:	7f 4f       	sbci	r23, 0xFF	; 255
    19b8:	83 e9       	ldi	r24, 0x93	; 147
    19ba:	9a e0       	ldi	r25, 0x0A	; 10
    19bc:	0e 94 de 3c 	call	0x79bc	; 0x79bc <_ZN6StringaSEOS_>
    19c0:	ce 01       	movw	r24, r28
    19c2:	01 96       	adiw	r24, 0x01	; 1
    19c4:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
    19c8:	76 c0       	rjmp	.+236    	; 0x1ab6 <_Z7inputKMc+0x15e>
    19ca:	80 91 97 0a 	lds	r24, 0x0A97	; 0x800a97 <KM+0x4>
    19ce:	90 91 98 0a 	lds	r25, 0x0A98	; 0x800a98 <KM+0x5>
    19d2:	04 97       	sbiw	r24, 0x04	; 4
    19d4:	09 f0       	breq	.+2      	; 0x19d8 <_Z7inputKMc+0x80>
    19d6:	9a c0       	rjmp	.+308    	; 0x1b0c <_Z7inputKMc+0x1b4>
    19d8:	69 ec       	ldi	r22, 0xC9	; 201
    19da:	75 e0       	ldi	r23, 0x05	; 5
    19dc:	85 e8       	ldi	r24, 0x85	; 133
    19de:	9b e0       	ldi	r25, 0x0B	; 11
    19e0:	0e 94 73 3e 	call	0x7ce6	; 0x7ce6 <_ZNK6String6equalsEPKc>
    19e4:	88 23       	and	r24, r24
    19e6:	41 f0       	breq	.+16     	; 0x19f8 <_Z7inputKMc+0xa0>
    19e8:	67 e0       	ldi	r22, 0x07	; 7
    19ea:	70 e0       	ldi	r23, 0x00	; 0
    19ec:	80 e0       	ldi	r24, 0x00	; 0
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	70 dd       	rcall	.-1312   	; 0x14d2 <_Z18Rele_Abilitazione1ii>
    19f2:	67 e2       	ldi	r22, 0x27	; 39
    19f4:	76 e0       	ldi	r23, 0x06	; 6
    19f6:	0f c0       	rjmp	.+30     	; 0x1a16 <_Z7inputKMc+0xbe>
    19f8:	6e e3       	ldi	r22, 0x3E	; 62
    19fa:	76 e0       	ldi	r23, 0x06	; 6
    19fc:	85 e8       	ldi	r24, 0x85	; 133
    19fe:	9b e0       	ldi	r25, 0x0B	; 11
    1a00:	0e 94 73 3e 	call	0x7ce6	; 0x7ce6 <_ZNK6String6equalsEPKc>
    1a04:	88 23       	and	r24, r24
    1a06:	59 f0       	breq	.+22     	; 0x1a1e <_Z7inputKMc+0xc6>
    1a08:	67 e0       	ldi	r22, 0x07	; 7
    1a0a:	70 e0       	ldi	r23, 0x00	; 0
    1a0c:	80 e0       	ldi	r24, 0x00	; 0
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	8a dd       	rcall	.-1260   	; 0x1526 <_Z18Rele_Abilitazione2ii>
    1a12:	66 e3       	ldi	r22, 0x36	; 54
    1a14:	76 e0       	ldi	r23, 0x06	; 6
    1a16:	85 e0       	ldi	r24, 0x05	; 5
    1a18:	9b e0       	ldi	r25, 0x0B	; 11
    1a1a:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
    1a1e:	63 e9       	ldi	r22, 0x93	; 147
    1a20:	7a e0       	ldi	r23, 0x0A	; 10
    1a22:	81 e9       	ldi	r24, 0x91	; 145
    1a24:	9b e0       	ldi	r25, 0x0B	; 11
    1a26:	0e 94 c1 3c 	call	0x7982	; 0x7982 <_ZN6StringaSERKS_>
    1a2a:	61 e9       	ldi	r22, 0x91	; 145
    1a2c:	7b e0       	ldi	r23, 0x0B	; 11
    1a2e:	8f e2       	ldi	r24, 0x2F	; 47
    1a30:	9b e0       	ldi	r25, 0x0B	; 11
    1a32:	0e 94 c1 3c 	call	0x7982	; 0x7982 <_ZN6StringaSERKS_>
    1a36:	60 e6       	ldi	r22, 0x60	; 96
    1a38:	76 e0       	ldi	r23, 0x06	; 6
    1a3a:	89 ef       	ldi	r24, 0xF9	; 249
    1a3c:	9a e0       	ldi	r25, 0x0A	; 10
    1a3e:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
    1a42:	6f ef       	ldi	r22, 0xFF	; 255
    1a44:	71 e0       	ldi	r23, 0x01	; 1
    1a46:	8f ef       	ldi	r24, 0xFF	; 255
    1a48:	9a e0       	ldi	r25, 0x0A	; 10
    1a4a:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
    1a4e:	0e 94 95 01 	call	0x32a	; 0x32a <_ZL11disable_ETHv>
    1a52:	8f e3       	ldi	r24, 0x3F	; 63
    1a54:	9f e1       	ldi	r25, 0x1F	; 31
    1a56:	01 97       	sbiw	r24, 0x01	; 1
    1a58:	f1 f7       	brne	.-4      	; 0x1a56 <_Z7inputKMc+0xfe>
    1a5a:	00 c0       	rjmp	.+0      	; 0x1a5c <_Z7inputKMc+0x104>
    1a5c:	00 00       	nop
    1a5e:	0e 94 93 01 	call	0x326	; 0x326 <_ZL10enable_ETHv>
    1a62:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <TsgancioPistola>
    1a66:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <TsgancioPistola+0x1>
    1a6a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <TsgancioPistola+0x2>
    1a6e:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <TsgancioPistola+0x3>
    1a72:	0e 94 83 04 	call	0x906	; 0x906 <_Z11avanzaStatom>
    1a76:	4a c0       	rjmp	.+148    	; 0x1b0c <_Z7inputKMc+0x1b4>
    1a78:	20 91 97 0a 	lds	r18, 0x0A97	; 0x800a97 <KM+0x4>
    1a7c:	30 91 98 0a 	lds	r19, 0x0A98	; 0x800a98 <KM+0x5>
    1a80:	24 30       	cpi	r18, 0x04	; 4
    1a82:	31 05       	cpc	r19, r1
    1a84:	08 f0       	brcs	.+2      	; 0x1a88 <_Z7inputKMc+0x130>
    1a86:	42 c0       	rjmp	.+132    	; 0x1b0c <_Z7inputKMc+0x1b4>
    1a88:	68 2f       	mov	r22, r24
    1a8a:	ce 01       	movw	r24, r28
    1a8c:	01 96       	adiw	r24, 0x01	; 1
    1a8e:	0e 94 fe 3c 	call	0x79fc	; 0x79fc <_ZN6StringC1Ec>
    1a92:	be 01       	movw	r22, r28
    1a94:	6f 5f       	subi	r22, 0xFF	; 255
    1a96:	7f 4f       	sbci	r23, 0xFF	; 255
    1a98:	83 e9       	ldi	r24, 0x93	; 147
    1a9a:	9a e0       	ldi	r25, 0x0A	; 10
    1a9c:	0e 94 19 3e 	call	0x7c32	; 0x7c32 <_ZN6String6concatERKS_>
    1aa0:	ce 01       	movw	r24, r28
    1aa2:	01 96       	adiw	r24, 0x01	; 1
    1aa4:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
    1aa8:	4a e0       	ldi	r20, 0x0A	; 10
    1aaa:	50 e0       	ldi	r21, 0x00	; 0
    1aac:	60 e0       	ldi	r22, 0x00	; 0
    1aae:	70 e0       	ldi	r23, 0x00	; 0
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	0e 94 4a 03 	call	0x694	; 0x694 <_Z6Buzzerhm>
    1ab6:	60 e4       	ldi	r22, 0x40	; 64
    1ab8:	76 e0       	ldi	r23, 0x06	; 6
    1aba:	89 ef       	ldi	r24, 0xF9	; 249
    1abc:	9a e0       	ldi	r25, 0x0A	; 10
    1abe:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
    1ac2:	61 e5       	ldi	r22, 0x51	; 81
    1ac4:	76 e0       	ldi	r23, 0x06	; 6
    1ac6:	ce 01       	movw	r24, r28
    1ac8:	01 96       	adiw	r24, 0x01	; 1
    1aca:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
    1ace:	63 e9       	ldi	r22, 0x93	; 147
    1ad0:	7a e0       	ldi	r23, 0x0A	; 10
    1ad2:	ce 01       	movw	r24, r28
    1ad4:	01 96       	adiw	r24, 0x01	; 1
    1ad6:	0e 94 3f 3e 	call	0x7c7e	; 0x7c7e <_ZplRK15StringSumHelperRK6String>
    1ada:	bc 01       	movw	r22, r24
    1adc:	8f ef       	ldi	r24, 0xFF	; 255
    1ade:	9a e0       	ldi	r25, 0x0A	; 10
    1ae0:	0e 94 c1 3c 	call	0x7982	; 0x7982 <_ZN6StringaSERKS_>
    1ae4:	ce 01       	movw	r24, r28
    1ae6:	01 96       	adiw	r24, 0x01	; 1
    1ae8:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
    1aec:	65 e5       	ldi	r22, 0x55	; 85
    1aee:	76 e0       	ldi	r23, 0x06	; 6
    1af0:	85 e0       	ldi	r24, 0x05	; 5
    1af2:	9b e0       	ldi	r25, 0x0B	; 11
    1af4:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
    1af8:	60 91 44 0b 	lds	r22, 0x0B44	; 0x800b44 <stato_procedura>
    1afc:	70 91 45 0b 	lds	r23, 0x0B45	; 0x800b45 <stato_procedura+0x1>
    1b00:	4a e0       	ldi	r20, 0x0A	; 10
    1b02:	50 e0       	ldi	r21, 0x00	; 0
    1b04:	83 ef       	ldi	r24, 0xF3	; 243
    1b06:	9a e0       	ldi	r25, 0x0A	; 10
    1b08:	0e 94 4e 04 	call	0x89c	; 0x89c <_Z10displayLCDP6Stringii>
    1b0c:	26 96       	adiw	r28, 0x06	; 6
    1b0e:	0f b6       	in	r0, 0x3f	; 63
    1b10:	f8 94       	cli
    1b12:	de bf       	out	0x3e, r29	; 62
    1b14:	0f be       	out	0x3f, r0	; 63
    1b16:	cd bf       	out	0x3d, r28	; 61
    1b18:	df 91       	pop	r29
    1b1a:	cf 91       	pop	r28
    1b1c:	08 95       	ret

00001b1e <_Z25read_eeprom_string_struct20ParametriCCEC_struct>:
    1b1e:	4f 92       	push	r4
    1b20:	5f 92       	push	r5
    1b22:	6f 92       	push	r6
    1b24:	7f 92       	push	r7
    1b26:	8f 92       	push	r8
    1b28:	9f 92       	push	r9
    1b2a:	af 92       	push	r10
    1b2c:	bf 92       	push	r11
    1b2e:	cf 92       	push	r12
    1b30:	df 92       	push	r13
    1b32:	ef 92       	push	r14
    1b34:	ff 92       	push	r15
    1b36:	0f 93       	push	r16
    1b38:	1f 93       	push	r17
    1b3a:	cf 93       	push	r28
    1b3c:	df 93       	push	r29
    1b3e:	00 d0       	rcall	.+0      	; 0x1b40 <_Z25read_eeprom_string_struct20ParametriCCEC_struct+0x22>
    1b40:	00 d0       	rcall	.+0      	; 0x1b42 <_Z25read_eeprom_string_struct20ParametriCCEC_struct+0x24>
    1b42:	00 d0       	rcall	.+0      	; 0x1b44 <_Z25read_eeprom_string_struct20ParametriCCEC_struct+0x26>
    1b44:	cd b7       	in	r28, 0x3d	; 61
    1b46:	de b7       	in	r29, 0x3e	; 62
    1b48:	7c 01       	movw	r14, r24
    1b4a:	5b 01       	movw	r10, r22
    1b4c:	4d b6       	in	r4, 0x3d	; 61
    1b4e:	5e b6       	in	r5, 0x3e	; 62
    1b50:	61 e8       	ldi	r22, 0x81	; 129
    1b52:	77 e0       	ldi	r23, 0x07	; 7
    1b54:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
    1b58:	f5 01       	movw	r30, r10
    1b5a:	c2 84       	ldd	r12, Z+10	; 0x0a
    1b5c:	d3 84       	ldd	r13, Z+11	; 0x0b
    1b5e:	8d b7       	in	r24, 0x3d	; 61
    1b60:	9e b7       	in	r25, 0x3e	; 62
    1b62:	8c 19       	sub	r24, r12
    1b64:	9d 09       	sbc	r25, r13
    1b66:	0f b6       	in	r0, 0x3f	; 63
    1b68:	f8 94       	cli
    1b6a:	9e bf       	out	0x3e, r25	; 62
    1b6c:	0f be       	out	0x3f, r0	; 63
    1b6e:	8d bf       	out	0x3d, r24	; 61
    1b70:	ed b7       	in	r30, 0x3d	; 61
    1b72:	fe b7       	in	r31, 0x3e	; 62
    1b74:	31 96       	adiw	r30, 0x01	; 1
    1b76:	4f 01       	movw	r8, r30
    1b78:	3f 01       	movw	r6, r30
    1b7a:	f5 01       	movw	r30, r10
    1b7c:	04 85       	ldd	r16, Z+12	; 0x0c
    1b7e:	15 85       	ldd	r17, Z+13	; 0x0d
    1b80:	c0 0e       	add	r12, r16
    1b82:	d1 1e       	adc	r13, r17
    1b84:	0c 15       	cp	r16, r12
    1b86:	1d 05       	cpc	r17, r13
    1b88:	4c f4       	brge	.+18     	; 0x1b9c <_Z25read_eeprom_string_struct20ParametriCCEC_struct+0x7e>
    1b8a:	c8 01       	movw	r24, r16
    1b8c:	0e 94 0c 46 	call	0x8c18	; 0x8c18 <eeprom_read_byte>
    1b90:	f3 01       	movw	r30, r6
    1b92:	81 93       	st	Z+, r24
    1b94:	3f 01       	movw	r6, r30
    1b96:	0f 5f       	subi	r16, 0xFF	; 255
    1b98:	1f 4f       	sbci	r17, 0xFF	; 255
    1b9a:	f4 cf       	rjmp	.-24     	; 0x1b84 <_Z25read_eeprom_string_struct20ParametriCCEC_struct+0x66>
    1b9c:	62 e0       	ldi	r22, 0x02	; 2
    1b9e:	72 e0       	ldi	r23, 0x02	; 2
    1ba0:	88 e3       	ldi	r24, 0x38	; 56
    1ba2:	9d e0       	ldi	r25, 0x0D	; 13
    1ba4:	0e 94 cf 39 	call	0x739e	; 0x739e <_ZN5Print7printlnEPKc>
    1ba8:	62 e0       	ldi	r22, 0x02	; 2
    1baa:	72 e0       	ldi	r23, 0x02	; 2
    1bac:	88 e3       	ldi	r24, 0x38	; 56
    1bae:	9d e0       	ldi	r25, 0x0D	; 13
    1bb0:	0e 94 cf 39 	call	0x739e	; 0x739e <_ZN5Print7printlnEPKc>
    1bb4:	b4 01       	movw	r22, r8
    1bb6:	ce 01       	movw	r24, r28
    1bb8:	01 96       	adiw	r24, 0x01	; 1
    1bba:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
    1bbe:	be 01       	movw	r22, r28
    1bc0:	6f 5f       	subi	r22, 0xFF	; 255
    1bc2:	7f 4f       	sbci	r23, 0xFF	; 255
    1bc4:	c7 01       	movw	r24, r14
    1bc6:	0e 94 de 3c 	call	0x79bc	; 0x79bc <_ZN6StringaSEOS_>
    1bca:	ce 01       	movw	r24, r28
    1bcc:	01 96       	adiw	r24, 0x01	; 1
    1bce:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
    1bd2:	b5 01       	movw	r22, r10
    1bd4:	ce 01       	movw	r24, r28
    1bd6:	01 96       	adiw	r24, 0x01	; 1
    1bd8:	0e 94 d6 3c 	call	0x79ac	; 0x79ac <_ZN6StringC1ERKS_>
    1bdc:	6d e4       	ldi	r22, 0x4D	; 77
    1bde:	78 e0       	ldi	r23, 0x08	; 8
    1be0:	ce 01       	movw	r24, r28
    1be2:	01 96       	adiw	r24, 0x01	; 1
    1be4:	0e 94 50 3e 	call	0x7ca0	; 0x7ca0 <_ZplRK15StringSumHelperPKc>
    1be8:	bc 01       	movw	r22, r24
    1bea:	88 e3       	ldi	r24, 0x38	; 56
    1bec:	9d e0       	ldi	r25, 0x0D	; 13
    1bee:	0e 94 96 39 	call	0x732c	; 0x732c <_ZN5Print5printERK6String>
    1bf2:	ce 01       	movw	r24, r28
    1bf4:	01 96       	adiw	r24, 0x01	; 1
    1bf6:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
    1bfa:	b7 01       	movw	r22, r14
    1bfc:	88 e3       	ldi	r24, 0x38	; 56
    1bfe:	9d e0       	ldi	r25, 0x0D	; 13
    1c00:	0e 94 bf 39 	call	0x737e	; 0x737e <_ZN5Print7printlnERK6String>
    1c04:	c7 01       	movw	r24, r14
    1c06:	0f b6       	in	r0, 0x3f	; 63
    1c08:	f8 94       	cli
    1c0a:	5e be       	out	0x3e, r5	; 62
    1c0c:	0f be       	out	0x3f, r0	; 63
    1c0e:	4d be       	out	0x3d, r4	; 61
    1c10:	26 96       	adiw	r28, 0x06	; 6
    1c12:	0f b6       	in	r0, 0x3f	; 63
    1c14:	f8 94       	cli
    1c16:	de bf       	out	0x3e, r29	; 62
    1c18:	0f be       	out	0x3f, r0	; 63
    1c1a:	cd bf       	out	0x3d, r28	; 61
    1c1c:	df 91       	pop	r29
    1c1e:	cf 91       	pop	r28
    1c20:	1f 91       	pop	r17
    1c22:	0f 91       	pop	r16
    1c24:	ff 90       	pop	r15
    1c26:	ef 90       	pop	r14
    1c28:	df 90       	pop	r13
    1c2a:	cf 90       	pop	r12
    1c2c:	bf 90       	pop	r11
    1c2e:	af 90       	pop	r10
    1c30:	9f 90       	pop	r9
    1c32:	8f 90       	pop	r8
    1c34:	7f 90       	pop	r7
    1c36:	6f 90       	pop	r6
    1c38:	5f 90       	pop	r5
    1c3a:	4f 90       	pop	r4
    1c3c:	08 95       	ret

00001c3e <_Z18read_eeprom_stringii>:
    1c3e:	4f 92       	push	r4
    1c40:	5f 92       	push	r5
    1c42:	6f 92       	push	r6
    1c44:	7f 92       	push	r7
    1c46:	8f 92       	push	r8
    1c48:	9f 92       	push	r9
    1c4a:	af 92       	push	r10
    1c4c:	bf 92       	push	r11
    1c4e:	cf 92       	push	r12
    1c50:	df 92       	push	r13
    1c52:	ef 92       	push	r14
    1c54:	ff 92       	push	r15
    1c56:	0f 93       	push	r16
    1c58:	1f 93       	push	r17
    1c5a:	cf 93       	push	r28
    1c5c:	df 93       	push	r29
    1c5e:	cd b7       	in	r28, 0x3d	; 61
    1c60:	de b7       	in	r29, 0x3e	; 62
    1c62:	2c 97       	sbiw	r28, 0x0c	; 12
    1c64:	0f b6       	in	r0, 0x3f	; 63
    1c66:	f8 94       	cli
    1c68:	de bf       	out	0x3e, r29	; 62
    1c6a:	0f be       	out	0x3f, r0	; 63
    1c6c:	cd bf       	out	0x3d, r28	; 61
    1c6e:	7c 01       	movw	r14, r24
    1c70:	6b 01       	movw	r12, r22
    1c72:	2a 01       	movw	r4, r20
    1c74:	6d b6       	in	r6, 0x3d	; 61
    1c76:	7e b6       	in	r7, 0x3e	; 62
    1c78:	61 e8       	ldi	r22, 0x81	; 129
    1c7a:	77 e0       	ldi	r23, 0x07	; 7
    1c7c:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
    1c80:	8d b7       	in	r24, 0x3d	; 61
    1c82:	9e b7       	in	r25, 0x3e	; 62
    1c84:	8c 19       	sub	r24, r12
    1c86:	9d 09       	sbc	r25, r13
    1c88:	0f b6       	in	r0, 0x3f	; 63
    1c8a:	f8 94       	cli
    1c8c:	9e bf       	out	0x3e, r25	; 62
    1c8e:	0f be       	out	0x3f, r0	; 63
    1c90:	8d bf       	out	0x3d, r24	; 61
    1c92:	ed b7       	in	r30, 0x3d	; 61
    1c94:	fe b7       	in	r31, 0x3e	; 62
    1c96:	31 96       	adiw	r30, 0x01	; 1
    1c98:	5f 01       	movw	r10, r30
    1c9a:	62 e0       	ldi	r22, 0x02	; 2
    1c9c:	72 e0       	ldi	r23, 0x02	; 2
    1c9e:	88 e3       	ldi	r24, 0x38	; 56
    1ca0:	9d e0       	ldi	r25, 0x0D	; 13
    1ca2:	0e 94 cf 39 	call	0x739e	; 0x739e <_ZN5Print7printlnEPKc>
    1ca6:	60 e7       	ldi	r22, 0x70	; 112
    1ca8:	76 e0       	ldi	r23, 0x06	; 6
    1caa:	88 e3       	ldi	r24, 0x38	; 56
    1cac:	9d e0       	ldi	r25, 0x0D	; 13
    1cae:	0e 94 cf 39 	call	0x739e	; 0x739e <_ZN5Print7printlnEPKc>
    1cb2:	62 e0       	ldi	r22, 0x02	; 2
    1cb4:	72 e0       	ldi	r23, 0x02	; 2
    1cb6:	88 e3       	ldi	r24, 0x38	; 56
    1cb8:	9d e0       	ldi	r25, 0x0D	; 13
    1cba:	0e 94 cf 39 	call	0x739e	; 0x739e <_ZN5Print7printlnEPKc>
    1cbe:	45 01       	movw	r8, r10
    1cc0:	82 01       	movw	r16, r4
    1cc2:	c4 0c       	add	r12, r4
    1cc4:	d5 1c       	adc	r13, r5
    1cc6:	0c 15       	cp	r16, r12
    1cc8:	1d 05       	cpc	r17, r13
    1cca:	5c f5       	brge	.+86     	; 0x1d22 <_Z18read_eeprom_stringii+0xe4>
    1ccc:	c8 01       	movw	r24, r16
    1cce:	0e 94 0c 46 	call	0x8c18	; 0x8c18 <eeprom_read_byte>
    1cd2:	f4 01       	movw	r30, r8
    1cd4:	81 93       	st	Z+, r24
    1cd6:	4f 01       	movw	r8, r30
    1cd8:	88 23       	and	r24, r24
    1cda:	01 f1       	breq	.+64     	; 0x1d1c <_Z18read_eeprom_stringii+0xde>
    1cdc:	4a e0       	ldi	r20, 0x0A	; 10
    1cde:	68 2f       	mov	r22, r24
    1ce0:	ce 01       	movw	r24, r28
    1ce2:	07 96       	adiw	r24, 0x07	; 7
    1ce4:	0e 94 15 3d 	call	0x7a2a	; 0x7a2a <_ZN6StringC1Ehh>
    1ce8:	62 e0       	ldi	r22, 0x02	; 2
    1cea:	72 e0       	ldi	r23, 0x02	; 2
    1cec:	ce 01       	movw	r24, r28
    1cee:	01 96       	adiw	r24, 0x01	; 1
    1cf0:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
    1cf4:	be 01       	movw	r22, r28
    1cf6:	69 5f       	subi	r22, 0xF9	; 249
    1cf8:	7f 4f       	sbci	r23, 0xFF	; 255
    1cfa:	ce 01       	movw	r24, r28
    1cfc:	01 96       	adiw	r24, 0x01	; 1
    1cfe:	0e 94 3f 3e 	call	0x7c7e	; 0x7c7e <_ZplRK15StringSumHelperRK6String>
    1d02:	bc 01       	movw	r22, r24
    1d04:	88 e3       	ldi	r24, 0x38	; 56
    1d06:	9d e0       	ldi	r25, 0x0D	; 13
    1d08:	0e 94 96 39 	call	0x732c	; 0x732c <_ZN5Print5printERK6String>
    1d0c:	ce 01       	movw	r24, r28
    1d0e:	01 96       	adiw	r24, 0x01	; 1
    1d10:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
    1d14:	ce 01       	movw	r24, r28
    1d16:	07 96       	adiw	r24, 0x07	; 7
    1d18:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
    1d1c:	0f 5f       	subi	r16, 0xFF	; 255
    1d1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d20:	d2 cf       	rjmp	.-92     	; 0x1cc6 <_Z18read_eeprom_stringii+0x88>
    1d22:	62 e0       	ldi	r22, 0x02	; 2
    1d24:	72 e0       	ldi	r23, 0x02	; 2
    1d26:	88 e3       	ldi	r24, 0x38	; 56
    1d28:	9d e0       	ldi	r25, 0x0D	; 13
    1d2a:	0e 94 cf 39 	call	0x739e	; 0x739e <_ZN5Print7printlnEPKc>
    1d2e:	62 e0       	ldi	r22, 0x02	; 2
    1d30:	72 e0       	ldi	r23, 0x02	; 2
    1d32:	88 e3       	ldi	r24, 0x38	; 56
    1d34:	9d e0       	ldi	r25, 0x0D	; 13
    1d36:	0e 94 cf 39 	call	0x739e	; 0x739e <_ZN5Print7printlnEPKc>
    1d3a:	b5 01       	movw	r22, r10
    1d3c:	ce 01       	movw	r24, r28
    1d3e:	01 96       	adiw	r24, 0x01	; 1
    1d40:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
    1d44:	be 01       	movw	r22, r28
    1d46:	6f 5f       	subi	r22, 0xFF	; 255
    1d48:	7f 4f       	sbci	r23, 0xFF	; 255
    1d4a:	c7 01       	movw	r24, r14
    1d4c:	0e 94 de 3c 	call	0x79bc	; 0x79bc <_ZN6StringaSEOS_>
    1d50:	ce 01       	movw	r24, r28
    1d52:	01 96       	adiw	r24, 0x01	; 1
    1d54:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
    1d58:	63 e8       	ldi	r22, 0x83	; 131
    1d5a:	76 e0       	ldi	r23, 0x06	; 6
    1d5c:	88 e3       	ldi	r24, 0x38	; 56
    1d5e:	9d e0       	ldi	r25, 0x0D	; 13
    1d60:	0e 94 a4 39 	call	0x7348	; 0x7348 <_ZN5Print5printEPKc>
    1d64:	b7 01       	movw	r22, r14
    1d66:	88 e3       	ldi	r24, 0x38	; 56
    1d68:	9d e0       	ldi	r25, 0x0D	; 13
    1d6a:	0e 94 bf 39 	call	0x737e	; 0x737e <_ZN5Print7printlnERK6String>
    1d6e:	c7 01       	movw	r24, r14
    1d70:	0f b6       	in	r0, 0x3f	; 63
    1d72:	f8 94       	cli
    1d74:	7e be       	out	0x3e, r7	; 62
    1d76:	0f be       	out	0x3f, r0	; 63
    1d78:	6d be       	out	0x3d, r6	; 61
    1d7a:	2c 96       	adiw	r28, 0x0c	; 12
    1d7c:	0f b6       	in	r0, 0x3f	; 63
    1d7e:	f8 94       	cli
    1d80:	de bf       	out	0x3e, r29	; 62
    1d82:	0f be       	out	0x3f, r0	; 63
    1d84:	cd bf       	out	0x3d, r28	; 61
    1d86:	df 91       	pop	r29
    1d88:	cf 91       	pop	r28
    1d8a:	1f 91       	pop	r17
    1d8c:	0f 91       	pop	r16
    1d8e:	ff 90       	pop	r15
    1d90:	ef 90       	pop	r14
    1d92:	df 90       	pop	r13
    1d94:	cf 90       	pop	r12
    1d96:	bf 90       	pop	r11
    1d98:	af 90       	pop	r10
    1d9a:	9f 90       	pop	r9
    1d9c:	8f 90       	pop	r8
    1d9e:	7f 90       	pop	r7
    1da0:	6f 90       	pop	r6
    1da2:	5f 90       	pop	r5
    1da4:	4f 90       	pop	r4
    1da6:	08 95       	ret

00001da8 <_Z19write_eeprom_string6Stringii>:

bool write_eeprom_string(String erog,int lunBuffer,int start_ind) {
    1da8:	8f 92       	push	r8
    1daa:	9f 92       	push	r9
    1dac:	af 92       	push	r10
    1dae:	bf 92       	push	r11
    1db0:	cf 92       	push	r12
    1db2:	df 92       	push	r13
    1db4:	ef 92       	push	r14
    1db6:	ff 92       	push	r15
    1db8:	0f 93       	push	r16
    1dba:	1f 93       	push	r17
    1dbc:	cf 93       	push	r28
    1dbe:	df 93       	push	r29
    1dc0:	cd b7       	in	r28, 0x3d	; 61
    1dc2:	de b7       	in	r29, 0x3e	; 62
    1dc4:	2c 97       	sbiw	r28, 0x0c	; 12
    1dc6:	0f b6       	in	r0, 0x3f	; 63
    1dc8:	f8 94       	cli
    1dca:	de bf       	out	0x3e, r29	; 62
    1dcc:	0f be       	out	0x3f, r0	; 63
    1dce:	cd bf       	out	0x3d, r28	; 61
    1dd0:	6b 01       	movw	r12, r22
    1dd2:	4a 01       	movw	r8, r20
       i++;
  }
 Serial.println(" ");
 
 return true;
}
    1dd4:	ad b6       	in	r10, 0x3d	; 61
    1dd6:	be b6       	in	r11, 0x3e	; 62
 return Salvata;
}

bool write_eeprom_string(String erog,int lunBuffer,int start_ind) {
 
 char buf[lunBuffer];
    1dd8:	2d b7       	in	r18, 0x3d	; 61
    1dda:	3e b7       	in	r19, 0x3e	; 62
    1ddc:	26 1b       	sub	r18, r22
    1dde:	37 0b       	sbc	r19, r23
    1de0:	0f b6       	in	r0, 0x3f	; 63
    1de2:	f8 94       	cli
    1de4:	3e bf       	out	0x3e, r19	; 62
    1de6:	0f be       	out	0x3f, r0	; 63
    1de8:	2d bf       	out	0x3d, r18	; 61
    1dea:	ed b7       	in	r30, 0x3d	; 61
    1dec:	fe b7       	in	r31, 0x3e	; 62
    1dee:	31 96       	adiw	r30, 0x01	; 1
    1df0:	7f 01       	movw	r14, r30
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{ getBytes((unsigned char *)buf, bufsize, index); }
    1df2:	fc 01       	movw	r30, r24
    1df4:	44 81       	ldd	r20, Z+4	; 0x04
    1df6:	55 81       	ldd	r21, Z+5	; 0x05
    1df8:	4f 5f       	subi	r20, 0xFF	; 255
    1dfa:	5f 4f       	sbci	r21, 0xFF	; 255
    1dfc:	20 e0       	ldi	r18, 0x00	; 0
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	b7 01       	movw	r22, r14
    1e02:	0e 94 91 3e 	call	0x7d22	; 0x7d22 <_ZNK6String8getBytesEPhjj>
 erog.toCharArray(buf, erog.length()+1);
 bool out = false;
 int i = 0;
 
 Serial.println(" len: " + String(lunBuffer));
    1e06:	4a e0       	ldi	r20, 0x0A	; 10
    1e08:	b6 01       	movw	r22, r12
    1e0a:	ce 01       	movw	r24, r28
    1e0c:	07 96       	adiw	r24, 0x07	; 7
    1e0e:	0e 94 40 3d 	call	0x7a80	; 0x7a80 <_ZN6StringC1Eih>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1e12:	6e e0       	ldi	r22, 0x0E	; 14
    1e14:	72 e0       	ldi	r23, 0x02	; 2
    1e16:	ce 01       	movw	r24, r28
    1e18:	01 96       	adiw	r24, 0x01	; 1
    1e1a:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
    1e1e:	be 01       	movw	r22, r28
    1e20:	69 5f       	subi	r22, 0xF9	; 249
    1e22:	7f 4f       	sbci	r23, 0xFF	; 255
    1e24:	ce 01       	movw	r24, r28
    1e26:	01 96       	adiw	r24, 0x01	; 1
    1e28:	0e 94 3f 3e 	call	0x7c7e	; 0x7c7e <_ZplRK15StringSumHelperRK6String>
    1e2c:	bc 01       	movw	r22, r24
    1e2e:	88 e3       	ldi	r24, 0x38	; 56
    1e30:	9d e0       	ldi	r25, 0x0D	; 13
    1e32:	0e 94 bf 39 	call	0x737e	; 0x737e <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1e36:	ce 01       	movw	r24, r28
    1e38:	01 96       	adiw	r24, 0x01	; 1
    1e3a:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
    1e3e:	ce 01       	movw	r24, r28
    1e40:	07 96       	adiw	r24, 0x07	; 7
    1e42:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
 Serial.println("Eseguo scrittura nella EEPROM");
    1e46:	65 e1       	ldi	r22, 0x15	; 21
    1e48:	72 e0       	ldi	r23, 0x02	; 2
    1e4a:	88 e3       	ldi	r24, 0x38	; 56
    1e4c:	9d e0       	ldi	r25, 0x0D	; 13
    1e4e:	0e 94 cf 39 	call	0x739e	; 0x739e <_ZN5Print7printlnEPKc>
 Serial.println(" ");
    1e52:	62 e0       	ldi	r22, 0x02	; 2
    1e54:	72 e0       	ldi	r23, 0x02	; 2
    1e56:	88 e3       	ldi	r24, 0x38	; 56
    1e58:	9d e0       	ldi	r25, 0x0D	; 13
    1e5a:	0e 94 cf 39 	call	0x739e	; 0x739e <_ZN5Print7printlnEPKc>

  for (int ind = start_ind ; ind < (start_ind + lunBuffer) ; ind++) {
    1e5e:	84 01       	movw	r16, r8
    1e60:	c8 0c       	add	r12, r8
    1e62:	d9 1c       	adc	r13, r9
    1e64:	0c 15       	cp	r16, r12
    1e66:	1d 05       	cpc	r17, r13
    1e68:	6c f5       	brge	.+90     	; 0x1ec4 <_Z19write_eeprom_string6Stringii+0x11c>
     if (buf[i] != 0) {
    1e6a:	f7 01       	movw	r30, r14
    1e6c:	60 81       	ld	r22, Z
    1e6e:	66 23       	and	r22, r22
    1e70:	19 f1       	breq	.+70     	; 0x1eb8 <_Z19write_eeprom_string6Stringii+0x110>
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator uint8_t() const             { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    1e72:	c8 01       	movw	r24, r16
    1e74:	0e 94 14 46 	call	0x8c28	; 0x8c28 <eeprom_write_byte>
      EEPROM.write(ind, buf[i]);
      Serial.print(" " + String(buf[i]));
    1e78:	f7 01       	movw	r30, r14
    1e7a:	60 81       	ld	r22, Z
    1e7c:	ce 01       	movw	r24, r28
    1e7e:	07 96       	adiw	r24, 0x07	; 7
    1e80:	0e 94 fe 3c 	call	0x79fc	; 0x79fc <_ZN6StringC1Ec>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1e84:	62 e0       	ldi	r22, 0x02	; 2
    1e86:	72 e0       	ldi	r23, 0x02	; 2
    1e88:	ce 01       	movw	r24, r28
    1e8a:	01 96       	adiw	r24, 0x01	; 1
    1e8c:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
    1e90:	be 01       	movw	r22, r28
    1e92:	69 5f       	subi	r22, 0xF9	; 249
    1e94:	7f 4f       	sbci	r23, 0xFF	; 255
    1e96:	ce 01       	movw	r24, r28
    1e98:	01 96       	adiw	r24, 0x01	; 1
    1e9a:	0e 94 3f 3e 	call	0x7c7e	; 0x7c7e <_ZplRK15StringSumHelperRK6String>
    1e9e:	bc 01       	movw	r22, r24
    1ea0:	88 e3       	ldi	r24, 0x38	; 56
    1ea2:	9d e0       	ldi	r25, 0x0D	; 13
    1ea4:	0e 94 96 39 	call	0x732c	; 0x732c <_ZN5Print5printERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1ea8:	ce 01       	movw	r24, r28
    1eaa:	01 96       	adiw	r24, 0x01	; 1
    1eac:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
    1eb0:	ce 01       	movw	r24, r28
    1eb2:	07 96       	adiw	r24, 0x07	; 7
    1eb4:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
 
 Serial.println(" len: " + String(lunBuffer));
 Serial.println("Eseguo scrittura nella EEPROM");
 Serial.println(" ");

  for (int ind = start_ind ; ind < (start_ind + lunBuffer) ; ind++) {
    1eb8:	0f 5f       	subi	r16, 0xFF	; 255
    1eba:	1f 4f       	sbci	r17, 0xFF	; 255
    1ebc:	ff ef       	ldi	r31, 0xFF	; 255
    1ebe:	ef 1a       	sub	r14, r31
    1ec0:	ff 0a       	sbc	r15, r31
    1ec2:	d0 cf       	rjmp	.-96     	; 0x1e64 <_Z19write_eeprom_string6Stringii+0xbc>
      EEPROM.write(ind, buf[i]);
      Serial.print(" " + String(buf[i]));
     }
       i++;
  }
 Serial.println(" ");
    1ec4:	62 e0       	ldi	r22, 0x02	; 2
    1ec6:	72 e0       	ldi	r23, 0x02	; 2
    1ec8:	88 e3       	ldi	r24, 0x38	; 56
    1eca:	9d e0       	ldi	r25, 0x0D	; 13
    1ecc:	0e 94 cf 39 	call	0x739e	; 0x739e <_ZN5Print7printlnEPKc>
 
 return true;
}
    1ed0:	81 e0       	ldi	r24, 0x01	; 1
    1ed2:	0f b6       	in	r0, 0x3f	; 63
    1ed4:	f8 94       	cli
    1ed6:	be be       	out	0x3e, r11	; 62
    1ed8:	0f be       	out	0x3f, r0	; 63
    1eda:	ad be       	out	0x3d, r10	; 61
    1edc:	2c 96       	adiw	r28, 0x0c	; 12
    1ede:	0f b6       	in	r0, 0x3f	; 63
    1ee0:	f8 94       	cli
    1ee2:	de bf       	out	0x3e, r29	; 62
    1ee4:	0f be       	out	0x3f, r0	; 63
    1ee6:	cd bf       	out	0x3d, r28	; 61
    1ee8:	df 91       	pop	r29
    1eea:	cf 91       	pop	r28
    1eec:	1f 91       	pop	r17
    1eee:	0f 91       	pop	r16
    1ef0:	ff 90       	pop	r15
    1ef2:	ef 90       	pop	r14
    1ef4:	df 90       	pop	r13
    1ef6:	cf 90       	pop	r12
    1ef8:	bf 90       	pop	r11
    1efa:	af 90       	pop	r10
    1efc:	9f 90       	pop	r9
    1efe:	8f 90       	pop	r8
    1f00:	08 95       	ret

00001f02 <_Z11timer_statov>:

void timer_stato(){
    1f02:	cf 93       	push	r28
    1f04:	df 93       	push	r29
    1f06:	cd b7       	in	r28, 0x3d	; 61
    1f08:	de b7       	in	r29, 0x3e	; 62
    1f0a:	2c 97       	sbiw	r28, 0x0c	; 12
    1f0c:	0f b6       	in	r0, 0x3f	; 63
    1f0e:	f8 94       	cli
    1f10:	de bf       	out	0x3e, r29	; 62
    1f12:	0f be       	out	0x3f, r0	; 63
    1f14:	cd bf       	out	0x3d, r28	; 61
  lcd.setCursor(0, 0);
    1f16:	40 e0       	ldi	r20, 0x00	; 0
    1f18:	60 e0       	ldi	r22, 0x00	; 0
    1f1a:	83 e6       	ldi	r24, 0x63	; 99
    1f1c:	9b e0       	ldi	r25, 0x0B	; 11
    1f1e:	0e 94 1a 31 	call	0x6234	; 0x6234 <_ZN3LCD9setCursorEhh>
  lcd.print((char)1);  // STAMPA LA CLESSIDRA
    1f22:	61 e0       	ldi	r22, 0x01	; 1
    1f24:	83 e6       	ldi	r24, 0x63	; 99
    1f26:	9b e0       	ldi	r25, 0x0B	; 11
    1f28:	0e 94 a5 39 	call	0x734a	; 0x734a <_ZN5Print5printEc>
  lcd.print("Time: " + String((UltimoPassaggioStato + Timer - secs - 1)) + " sec ");// + String(temperatura/100.0) + "°C");  
    1f2c:	40 91 ad 0a 	lds	r20, 0x0AAD	; 0x800aad <UltimoPassaggioStato>
    1f30:	50 91 ae 0a 	lds	r21, 0x0AAE	; 0x800aae <UltimoPassaggioStato+0x1>
    1f34:	60 91 af 0a 	lds	r22, 0x0AAF	; 0x800aaf <UltimoPassaggioStato+0x2>
    1f38:	70 91 b0 0a 	lds	r23, 0x0AB0	; 0x800ab0 <UltimoPassaggioStato+0x3>
    1f3c:	80 91 a9 0a 	lds	r24, 0x0AA9	; 0x800aa9 <Timer>
    1f40:	90 91 aa 0a 	lds	r25, 0x0AAA	; 0x800aaa <Timer+0x1>
    1f44:	a0 91 ab 0a 	lds	r26, 0x0AAB	; 0x800aab <Timer+0x2>
    1f48:	b0 91 ac 0a 	lds	r27, 0x0AAC	; 0x800aac <Timer+0x3>
    1f4c:	48 0f       	add	r20, r24
    1f4e:	59 1f       	adc	r21, r25
    1f50:	6a 1f       	adc	r22, r26
    1f52:	7b 1f       	adc	r23, r27
    1f54:	41 50       	subi	r20, 0x01	; 1
    1f56:	51 09       	sbc	r21, r1
    1f58:	61 09       	sbc	r22, r1
    1f5a:	71 09       	sbc	r23, r1
    1f5c:	80 91 b1 0a 	lds	r24, 0x0AB1	; 0x800ab1 <secs>
    1f60:	90 91 b2 0a 	lds	r25, 0x0AB2	; 0x800ab2 <secs+0x1>
    1f64:	a0 91 b3 0a 	lds	r26, 0x0AB3	; 0x800ab3 <secs+0x2>
    1f68:	b0 91 b4 0a 	lds	r27, 0x0AB4	; 0x800ab4 <secs+0x3>
    1f6c:	48 1b       	sub	r20, r24
    1f6e:	59 0b       	sbc	r21, r25
    1f70:	6a 0b       	sbc	r22, r26
    1f72:	7b 0b       	sbc	r23, r27
    1f74:	2a e0       	ldi	r18, 0x0A	; 10
    1f76:	ce 01       	movw	r24, r28
    1f78:	07 96       	adiw	r24, 0x07	; 7
    1f7a:	0e 94 94 3d 	call	0x7b28	; 0x7b28 <_ZN6StringC1Emh>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1f7e:	6a e9       	ldi	r22, 0x9A	; 154
    1f80:	76 e0       	ldi	r23, 0x06	; 6
    1f82:	ce 01       	movw	r24, r28
    1f84:	01 96       	adiw	r24, 0x01	; 1
    1f86:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
    1f8a:	be 01       	movw	r22, r28
    1f8c:	69 5f       	subi	r22, 0xF9	; 249
    1f8e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f90:	ce 01       	movw	r24, r28
    1f92:	01 96       	adiw	r24, 0x01	; 1
    1f94:	0e 94 3f 3e 	call	0x7c7e	; 0x7c7e <_ZplRK15StringSumHelperRK6String>
    1f98:	61 ea       	ldi	r22, 0xA1	; 161
    1f9a:	76 e0       	ldi	r23, 0x06	; 6
    1f9c:	0e 94 50 3e 	call	0x7ca0	; 0x7ca0 <_ZplRK15StringSumHelperPKc>
    1fa0:	bc 01       	movw	r22, r24
    1fa2:	83 e6       	ldi	r24, 0x63	; 99
    1fa4:	9b e0       	ldi	r25, 0x0B	; 11
    1fa6:	0e 94 96 39 	call	0x732c	; 0x732c <_ZN5Print5printERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1faa:	ce 01       	movw	r24, r28
    1fac:	01 96       	adiw	r24, 0x01	; 1
    1fae:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
    1fb2:	ce 01       	movw	r24, r28
    1fb4:	07 96       	adiw	r24, 0x07	; 7
    1fb6:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
}
    1fba:	2c 96       	adiw	r28, 0x0c	; 12
    1fbc:	0f b6       	in	r0, 0x3f	; 63
    1fbe:	f8 94       	cli
    1fc0:	de bf       	out	0x3e, r29	; 62
    1fc2:	0f be       	out	0x3f, r0	; 63
    1fc4:	cd bf       	out	0x3d, r28	; 61
    1fc6:	df 91       	pop	r29
    1fc8:	cf 91       	pop	r28
    1fca:	08 95       	ret

00001fcc <_ZN14EthernetClientC1ERKS_>:
#include "Arduino.h"	
#include "Print.h"
#include "Client.h"
#include "IPAddress.h"

class EthernetClient : public Client {
    1fcc:	fc 01       	movw	r30, r24
    1fce:	db 01       	movw	r26, r22
#ifdef BIN // Prevent warnings if BIN is previously defined in "iotnx4.h" or similar
#undef BIN
#endif
#define BIN 2

class Print
    1fd0:	12 96       	adiw	r26, 0x02	; 2
    1fd2:	8d 91       	ld	r24, X+
    1fd4:	9c 91       	ld	r25, X
    1fd6:	13 97       	sbiw	r26, 0x03	; 3
    1fd8:	93 83       	std	Z+3, r25	; 0x03
    1fda:	82 83       	std	Z+2, r24	; 0x02
    SKIP_WHITESPACE // Only tabs, spaces, line feeds & carriage returns are skipped.
};

#define NO_IGNORE_CHAR  '\x01' // a char not found in a valid ASCII numeric field

class Stream : public Print
    1fdc:	14 96       	adiw	r26, 0x04	; 4
    1fde:	4d 91       	ld	r20, X+
    1fe0:	5d 91       	ld	r21, X+
    1fe2:	6d 91       	ld	r22, X+
    1fe4:	7c 91       	ld	r23, X
    1fe6:	17 97       	sbiw	r26, 0x07	; 7
    1fe8:	44 83       	std	Z+4, r20	; 0x04
    1fea:	55 83       	std	Z+5, r21	; 0x05
    1fec:	66 83       	std	Z+6, r22	; 0x06
    1fee:	77 83       	std	Z+7, r23	; 0x07
    1ff0:	18 96       	adiw	r26, 0x08	; 8
    1ff2:	4d 91       	ld	r20, X+
    1ff4:	5d 91       	ld	r21, X+
    1ff6:	6d 91       	ld	r22, X+
    1ff8:	7c 91       	ld	r23, X
    1ffa:	1b 97       	sbiw	r26, 0x0b	; 11
    1ffc:	40 87       	std	Z+8, r20	; 0x08
    1ffe:	51 87       	std	Z+9, r21	; 0x09
    2000:	62 87       	std	Z+10, r22	; 0x0a
    2002:	73 87       	std	Z+11, r23	; 0x0b
    2004:	8c ee       	ldi	r24, 0xEC	; 236
    2006:	99 e0       	ldi	r25, 0x09	; 9
    2008:	91 83       	std	Z+1, r25	; 0x01
    200a:	80 83       	st	Z, r24
    200c:	1c 96       	adiw	r26, 0x0c	; 12
    200e:	8c 91       	ld	r24, X
    2010:	84 87       	std	Z+12, r24	; 0x0c
    2012:	08 95       	ret

00002014 <loop>:


/**************************LOOP PROCEDURA************************************/
void loop() {
    2014:	cf 92       	push	r12
    2016:	df 92       	push	r13
    2018:	ef 92       	push	r14
    201a:	ff 92       	push	r15
    201c:	0f 93       	push	r16
    201e:	1f 93       	push	r17
    2020:	cf 93       	push	r28
    2022:	df 93       	push	r29
    2024:	cd b7       	in	r28, 0x3d	; 61
    2026:	de b7       	in	r29, 0x3e	; 62
    2028:	e0 97       	sbiw	r28, 0x30	; 48
    202a:	0f b6       	in	r0, 0x3f	; 63
    202c:	f8 94       	cli
    202e:	de bf       	out	0x3e, r29	; 62
    2030:	0f be       	out	0x3f, r0	; 63
    2032:	cd bf       	out	0x3d, r28	; 61

  // while(1); // Verifico WDT 
		
  switch (stato_procedura) {
    2034:	e0 91 44 0b 	lds	r30, 0x0B44	; 0x800b44 <stato_procedura>
    2038:	f0 91 45 0b 	lds	r31, 0x0B45	; 0x800b45 <stato_procedura+0x1>
    203c:	32 96       	adiw	r30, 0x02	; 2
    203e:	ed 30       	cpi	r30, 0x0D	; 13
    2040:	f1 05       	cpc	r31, r1
    2042:	08 f0       	brcs	.+2      	; 0x2046 <loop+0x32>
    2044:	40 c6       	rjmp	.+3200   	; 0x2cc6 <loop+0xcb2>
    2046:	ea 5b       	subi	r30, 0xBA	; 186
    2048:	ff 4f       	sbci	r31, 0xFF	; 255
    204a:	0c 94 81 40 	jmp	0x8102	; 0x8102 <__tablejump2__>
    case -2:
      { //cli(); // disable interrupt        
        printLine();
    204e:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
        Serial.print("Parametri CCEC da EEPROM");
    2052:	67 ea       	ldi	r22, 0xA7	; 167
    2054:	76 e0       	ldi	r23, 0x06	; 6
    2056:	88 e3       	ldi	r24, 0x38	; 56
    2058:	9d e0       	ldi	r25, 0x0D	; 13
    205a:	0e 94 a4 39 	call	0x7348	; 0x7348 <_ZN5Print5printEPKc>
        String ServerCCEC = read_eeprom_string_struct(ParametriCCEC[0]);
    205e:	60 91 e1 0b 	lds	r22, 0x0BE1	; 0x800be1 <ParametriCCEC>
    2062:	70 91 e2 0b 	lds	r23, 0x0BE2	; 0x800be2 <ParametriCCEC+0x1>
    2066:	ce 01       	movw	r24, r28
    2068:	01 96       	adiw	r24, 0x01	; 1
    206a:	0e 94 26 03 	call	0x64c	; 0x64c <_ZN20ParametriCCEC_structC1ERKS_>
    206e:	be 01       	movw	r22, r28
    2070:	6f 5f       	subi	r22, 0xFF	; 255
    2072:	7f 4f       	sbci	r23, 0xFF	; 255
    2074:	ce 01       	movw	r24, r28
    2076:	8b 96       	adiw	r24, 0x2b	; 43
    2078:	52 dd       	rcall	.-1372   	; 0x1b1e <_Z25read_eeprom_string_struct20ParametriCCEC_struct>
    207a:	ce 01       	movw	r24, r28
    207c:	01 96       	adiw	r24, 0x01	; 1
    207e:	0e 94 3f 03 	call	0x67e	; 0x67e <_ZN20ParametriCCEC_structD1Ev>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{ getBytes((unsigned char *)buf, bufsize, index); }
    2082:	4f a5       	ldd	r20, Y+47	; 0x2f
    2084:	58 a9       	ldd	r21, Y+48	; 0x30
    2086:	4f 5f       	subi	r20, 0xFF	; 255
    2088:	5f 4f       	sbci	r21, 0xFF	; 255
    208a:	20 e0       	ldi	r18, 0x00	; 0
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	68 e3       	ldi	r22, 0x38	; 56
    2090:	71 e0       	ldi	r23, 0x01	; 1
    2092:	ce 01       	movw	r24, r28
    2094:	8b 96       	adiw	r24, 0x2b	; 43
    2096:	0e 94 91 3e 	call	0x7d22	; 0x7d22 <_ZNK6String8getBytesEPhjj>
        ServerCCEC.toCharArray(serverREST,ServerCCEC.length()+1);
        printLine();
    209a:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
		String IPCCEC = read_eeprom_string_struct(ParametriCCEC[1]); 				
    209e:	60 91 e1 0b 	lds	r22, 0x0BE1	; 0x800be1 <ParametriCCEC>
    20a2:	70 91 e2 0b 	lds	r23, 0x0BE2	; 0x800be2 <ParametriCCEC+0x1>
    20a6:	62 5f       	subi	r22, 0xF2	; 242
    20a8:	7f 4f       	sbci	r23, 0xFF	; 255
    20aa:	ce 01       	movw	r24, r28
    20ac:	01 96       	adiw	r24, 0x01	; 1
    20ae:	0e 94 26 03 	call	0x64c	; 0x64c <_ZN20ParametriCCEC_structC1ERKS_>
    20b2:	be 01       	movw	r22, r28
    20b4:	6f 5f       	subi	r22, 0xFF	; 255
    20b6:	7f 4f       	sbci	r23, 0xFF	; 255
    20b8:	ce 01       	movw	r24, r28
    20ba:	85 96       	adiw	r24, 0x25	; 37
    20bc:	30 dd       	rcall	.-1440   	; 0x1b1e <_Z25read_eeprom_string_struct20ParametriCCEC_struct>
    20be:	ce 01       	movw	r24, r28
    20c0:	01 96       	adiw	r24, 0x01	; 1
    20c2:	0e 94 3f 03 	call	0x67e	; 0x67e <_ZN20ParametriCCEC_structD1Ev>
        printLine();
    20c6:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
        String Start_save = read_eeprom_string_struct(ParametriCCEC[2]);
    20ca:	60 91 e1 0b 	lds	r22, 0x0BE1	; 0x800be1 <ParametriCCEC>
    20ce:	70 91 e2 0b 	lds	r23, 0x0BE2	; 0x800be2 <ParametriCCEC+0x1>
    20d2:	64 5e       	subi	r22, 0xE4	; 228
    20d4:	7f 4f       	sbci	r23, 0xFF	; 255
    20d6:	ce 01       	movw	r24, r28
    20d8:	01 96       	adiw	r24, 0x01	; 1
    20da:	0e 94 26 03 	call	0x64c	; 0x64c <_ZN20ParametriCCEC_structC1ERKS_>
    20de:	be 01       	movw	r22, r28
    20e0:	6f 5f       	subi	r22, 0xFF	; 255
    20e2:	7f 4f       	sbci	r23, 0xFF	; 255
    20e4:	ce 01       	movw	r24, r28
    20e6:	4f 96       	adiw	r24, 0x1f	; 31
    20e8:	1a dd       	rcall	.-1484   	; 0x1b1e <_Z25read_eeprom_string_struct20ParametriCCEC_struct>
    20ea:	ce 01       	movw	r24, r28
    20ec:	01 96       	adiw	r24, 0x01	; 1
    20ee:	0e 94 3f 03 	call	0x67e	; 0x67e <_ZN20ParametriCCEC_structD1Ev>
        printLine();
    20f2:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
        String CSEDE = read_eeprom_string_struct(ParametriCCEC[3]);
    20f6:	60 91 e1 0b 	lds	r22, 0x0BE1	; 0x800be1 <ParametriCCEC>
    20fa:	70 91 e2 0b 	lds	r23, 0x0BE2	; 0x800be2 <ParametriCCEC+0x1>
    20fe:	66 5d       	subi	r22, 0xD6	; 214
    2100:	7f 4f       	sbci	r23, 0xFF	; 255
    2102:	ce 01       	movw	r24, r28
    2104:	01 96       	adiw	r24, 0x01	; 1
    2106:	0e 94 26 03 	call	0x64c	; 0x64c <_ZN20ParametriCCEC_structC1ERKS_>
    210a:	be 01       	movw	r22, r28
    210c:	6f 5f       	subi	r22, 0xFF	; 255
    210e:	7f 4f       	sbci	r23, 0xFF	; 255
    2110:	ce 01       	movw	r24, r28
    2112:	47 96       	adiw	r24, 0x17	; 23
    2114:	04 dd       	rcall	.-1528   	; 0x1b1e <_Z25read_eeprom_string_struct20ParametriCCEC_struct>
    2116:	ce 01       	movw	r24, r28
    2118:	01 96       	adiw	r24, 0x01	; 1
    211a:	0e 94 3f 03 	call	0x67e	; 0x67e <_ZN20ParametriCCEC_structD1Ev>
    211e:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2120:	5c 8d       	ldd	r21, Y+28	; 0x1c
    2122:	4f 5f       	subi	r20, 0xFF	; 255
    2124:	5f 4f       	sbci	r21, 0xFF	; 255
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	6a e4       	ldi	r22, 0x4A	; 74
    212c:	71 e0       	ldi	r23, 0x01	; 1
    212e:	ce 01       	movw	r24, r28
    2130:	47 96       	adiw	r24, 0x17	; 23
    2132:	0e 94 91 3e 	call	0x7d22	; 0x7d22 <_ZNK6String8getBytesEPhjj>
        CSEDE.toCharArray(CodSede,CSEDE.length()+1);        
        printLine();
    2136:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
		ImpulsiLitro = read_eeprom_string_struct(ParametriCCEC[4]).toInt();
    213a:	60 91 e1 0b 	lds	r22, 0x0BE1	; 0x800be1 <ParametriCCEC>
    213e:	70 91 e2 0b 	lds	r23, 0x0BE2	; 0x800be2 <ParametriCCEC+0x1>
    2142:	68 5c       	subi	r22, 0xC8	; 200
    2144:	7f 4f       	sbci	r23, 0xFF	; 255
    2146:	ce 01       	movw	r24, r28
    2148:	01 96       	adiw	r24, 0x01	; 1
    214a:	0e 94 26 03 	call	0x64c	; 0x64c <_ZN20ParametriCCEC_structC1ERKS_>
    214e:	be 01       	movw	r22, r28
    2150:	6f 5f       	subi	r22, 0xFF	; 255
    2152:	7f 4f       	sbci	r23, 0xFF	; 255
    2154:	ce 01       	movw	r24, r28
    2156:	0f 96       	adiw	r24, 0x0f	; 15
    2158:	e2 dc       	rcall	.-1596   	; 0x1b1e <_Z25read_eeprom_string_struct20ParametriCCEC_struct>
    215a:	ce 01       	movw	r24, r28
    215c:	0f 96       	adiw	r24, 0x0f	; 15
    215e:	0e 94 5b 3f 	call	0x7eb6	; 0x7eb6 <_ZNK6String5toIntEv>
    2162:	70 93 54 01 	sts	0x0154, r23	; 0x800154 <ImpulsiLitro+0x1>
    2166:	60 93 53 01 	sts	0x0153, r22	; 0x800153 <ImpulsiLitro>
    216a:	ce 01       	movw	r24, r28
    216c:	0f 96       	adiw	r24, 0x0f	; 15
    216e:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
    2172:	ce 01       	movw	r24, r28
    2174:	01 96       	adiw	r24, 0x01	; 1
    2176:	0e 94 3f 03 	call	0x67e	; 0x67e <_ZN20ParametriCCEC_structD1Ev>
        stato_procedura++;
    217a:	80 91 44 0b 	lds	r24, 0x0B44	; 0x800b44 <stato_procedura>
    217e:	90 91 45 0b 	lds	r25, 0x0B45	; 0x800b45 <stato_procedura+0x1>
    2182:	01 96       	adiw	r24, 0x01	; 1
    2184:	90 93 45 0b 	sts	0x0B45, r25	; 0x800b45 <stato_procedura+0x1>
    2188:	80 93 44 0b 	sts	0x0B44, r24	; 0x800b44 <stato_procedura>
        printLine();
		String IPCCEC = read_eeprom_string_struct(ParametriCCEC[1]); 				
        printLine();
        String Start_save = read_eeprom_string_struct(ParametriCCEC[2]);
        printLine();
        String CSEDE = read_eeprom_string_struct(ParametriCCEC[3]);
    218c:	ce 01       	movw	r24, r28
    218e:	47 96       	adiw	r24, 0x17	; 23
    2190:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
        String ServerCCEC = read_eeprom_string_struct(ParametriCCEC[0]);
        ServerCCEC.toCharArray(serverREST,ServerCCEC.length()+1);
        printLine();
		String IPCCEC = read_eeprom_string_struct(ParametriCCEC[1]); 				
        printLine();
        String Start_save = read_eeprom_string_struct(ParametriCCEC[2]);
    2194:	ce 01       	movw	r24, r28
    2196:	4f 96       	adiw	r24, 0x1f	; 31
    2198:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
        printLine();
        Serial.print("Parametri CCEC da EEPROM");
        String ServerCCEC = read_eeprom_string_struct(ParametriCCEC[0]);
        ServerCCEC.toCharArray(serverREST,ServerCCEC.length()+1);
        printLine();
		String IPCCEC = read_eeprom_string_struct(ParametriCCEC[1]); 				
    219c:	ce 01       	movw	r24, r28
    219e:	85 96       	adiw	r24, 0x25	; 37
    21a0:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
  switch (stato_procedura) {
    case -2:
      { //cli(); // disable interrupt        
        printLine();
        Serial.print("Parametri CCEC da EEPROM");
        String ServerCCEC = read_eeprom_string_struct(ParametriCCEC[0]);
    21a4:	ce 01       	movw	r24, r28
    21a6:	8b 96       	adiw	r24, 0x2b	; 43
    21a8:	8c c5       	rjmp	.+2840   	; 0x2cc2 <loop+0xcae>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    21aa:	2f ef       	ldi	r18, 0xFF	; 255
    21ac:	39 ef       	ldi	r19, 0xF9	; 249
    21ae:	80 e0       	ldi	r24, 0x00	; 0
    21b0:	21 50       	subi	r18, 0x01	; 1
    21b2:	30 40       	sbci	r19, 0x00	; 0
    21b4:	80 40       	sbci	r24, 0x00	; 0
    21b6:	e1 f7       	brne	.-8      	; 0x21b0 <loop+0x19c>
    21b8:	00 c0       	rjmp	.+0      	; 0x21ba <loop+0x1a6>
      }
      break;
    case -1:
      {       
        _delay_ms(20);
        abilitaPulsanti();
    21ba:	00 00       	nop
    21bc:	26 d9       	rcall	.-3508   	; 0x140a <_Z15abilitaPulsantiv>
    21be:	9f ef       	ldi	r25, 0xFF	; 255
    21c0:	29 ef       	ldi	r18, 0xF9	; 249
    21c2:	30 e0       	ldi	r19, 0x00	; 0
    21c4:	91 50       	subi	r25, 0x01	; 1
    21c6:	20 40       	sbci	r18, 0x00	; 0
    21c8:	30 40       	sbci	r19, 0x00	; 0
    21ca:	e1 f7       	brne	.-8      	; 0x21c4 <loop+0x1b0>
    21cc:	00 c0       	rjmp	.+0      	; 0x21ce <loop+0x1ba>
        _delay_ms(20);
        abilitaContattiPistola();
    21ce:	00 00       	nop
    21d0:	26 d9       	rcall	.-3508   	; 0x141e <_Z22abilitaContattiPistolav>
    21d2:	8f ef       	ldi	r24, 0xFF	; 255
    21d4:	99 ef       	ldi	r25, 0xF9	; 249
    21d6:	20 e0       	ldi	r18, 0x00	; 0
    21d8:	81 50       	subi	r24, 0x01	; 1
    21da:	90 40       	sbci	r25, 0x00	; 0
    21dc:	20 40       	sbci	r18, 0x00	; 0
    21de:	e1 f7       	brne	.-8      	; 0x21d8 <loop+0x1c4>
    21e0:	00 c0       	rjmp	.+0      	; 0x21e2 <loop+0x1ce>
    21e2:	00 00       	nop
        _delay_ms(20);
        stato_procedura++;
    21e4:	80 91 44 0b 	lds	r24, 0x0B44	; 0x800b44 <stato_procedura>
    21e8:	90 91 45 0b 	lds	r25, 0x0B45	; 0x800b45 <stato_procedura+0x1>
    21ec:	01 96       	adiw	r24, 0x01	; 1
    21ee:	90 93 45 0b 	sts	0x0B45, r25	; 0x800b45 <stato_procedura+0x1>
    21f2:	80 93 44 0b 	sts	0x0B44, r24	; 0x800b44 <stato_procedura>
      }
      break;
    21f6:	67 c5       	rjmp	.+2766   	; 0x2cc6 <loop+0xcb2>
    case 0:
      {
		lcd.noBacklight();
    21f8:	83 e6       	ldi	r24, 0x63	; 99
    21fa:	9b e0       	ldi	r25, 0x0B	; 11
    21fc:	0e 94 04 31 	call	0x6208	; 0x6208 <_ZN3LCD11noBacklightEv>
        alreadyTimbrata = false;
    2200:	10 92 7b 0b 	sts	0x0B7B, r1	; 0x800b7b <alreadyTimbrata>
        enable_ETH();
    2204:	0e 94 93 01 	call	0x326	; 0x326 <_ZL10enable_ETHv>
    2208:	8f e3       	ldi	r24, 0x3F	; 63
    220a:	9c e9       	ldi	r25, 0x9C	; 156
    220c:	01 97       	sbiw	r24, 0x01	; 1
    220e:	f1 f7       	brne	.-4      	; 0x220c <loop+0x1f8>
    2210:	00 c0       	rjmp	.+0      	; 0x2212 <loop+0x1fe>
    2212:	00 00       	nop
		_delay_ms(10);
        /************************************************/
        righeDisplay[1] = " * AUTENTICAZIONE *";
    2214:	60 ec       	ldi	r22, 0xC0	; 192
    2216:	76 e0       	ldi	r23, 0x06	; 6
    2218:	89 ef       	ldi	r24, 0xF9	; 249
    221a:	9a e0       	ldi	r25, 0x0A	; 10
    221c:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
        righeDisplay[2] = "";
    2220:	6f ef       	ldi	r22, 0xFF	; 255
    2222:	71 e0       	ldi	r23, 0x01	; 1
    2224:	8f ef       	ldi	r24, 0xFF	; 255
    2226:	9a e0       	ldi	r25, 0x0A	; 10
    2228:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
        righeDisplay[3] = "    Avvicina ATE  ";
    222c:	64 ed       	ldi	r22, 0xD4	; 212
    222e:	76 e0       	ldi	r23, 0x06	; 6
    2230:	85 e0       	ldi	r24, 0x05	; 5
    2232:	9b e0       	ldi	r25, 0x0B	; 11
    2234:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
        displayLCD(righeDisplay, stato_procedura, 50);
    2238:	60 91 44 0b 	lds	r22, 0x0B44	; 0x800b44 <stato_procedura>
    223c:	70 91 45 0b 	lds	r23, 0x0B45	; 0x800b45 <stato_procedura+0x1>
    2240:	42 e3       	ldi	r20, 0x32	; 50
    2242:	50 e0       	ldi	r21, 0x00	; 0
    2244:	83 ef       	ldi	r24, 0xF3	; 243
    2246:	9a e0       	ldi	r25, 0x0A	; 10
    2248:	0e 94 4e 04 	call	0x89c	; 0x89c <_Z10displayLCDP6Stringii>
        /************************************************/
		sei();
    224c:	78 94       	sei
    224e:	9f ef       	ldi	r25, 0xFF	; 255
    2250:	23 ed       	ldi	r18, 0xD3	; 211
    2252:	30 e3       	ldi	r19, 0x30	; 48
    2254:	91 50       	subi	r25, 0x01	; 1
    2256:	20 40       	sbci	r18, 0x00	; 0
    2258:	30 40       	sbci	r19, 0x00	; 0
    225a:	e1 f7       	brne	.-8      	; 0x2254 <loop+0x240>
    225c:	00 c0       	rjmp	.+0      	; 0x225e <loop+0x24a>
    225e:	00 00       	nop
		_delay_ms(1000);
        //stato_procedura++;
		avanzaStato(TverificaBadge);
    2260:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <TverificaBadge>
    2264:	70 91 2f 01 	lds	r23, 0x012F	; 0x80012f <TverificaBadge+0x1>
    2268:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <TverificaBadge+0x2>
    226c:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <TverificaBadge+0x3>
    2270:	4c c7       	rjmp	.+3736   	; 0x310a <loop+0x10f6>
        //while (1);
      }
      break;
    case 1:
      {
        TARGA = "";
    2272:	6f ef       	ldi	r22, 0xFF	; 255
    2274:	71 e0       	ldi	r23, 0x01	; 1
    2276:	89 e9       	ldi	r24, 0x99	; 153
    2278:	9a e0       	ldi	r25, 0x0A	; 10
    227a:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
        KM = "";
    227e:	6f ef       	ldi	r22, 0xFF	; 255
    2280:	71 e0       	ldi	r23, 0x01	; 1
    2282:	83 e9       	ldi	r24, 0x93	; 147
    2284:	9a e0       	ldi	r25, 0x0A	; 10
    2286:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>

        /*****************************************************/
        String ATe = "ERRORE";
    228a:	63 e9       	ldi	r22, 0x93	; 147
    228c:	72 e0       	ldi	r23, 0x02	; 2
    228e:	ce 01       	movw	r24, r28
    2290:	47 96       	adiw	r24, 0x17	; 23
    2292:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
        
        if (!alreadyTimbrata) {
    2296:	80 91 7b 0b 	lds	r24, 0x0B7B	; 0x800b7b <alreadyTimbrata>
    229a:	81 11       	cpse	r24, r1
    229c:	0f c0       	rjmp	.+30     	; 0x22bc <loop+0x2a8>
          ATe = GetCodeRfidATe();          
    229e:	ce 01       	movw	r24, r28
    22a0:	01 96       	adiw	r24, 0x01	; 1
    22a2:	0e 94 5d 06 	call	0xcba	; 0xcba <_Z14GetCodeRfidATev>
    22a6:	be 01       	movw	r22, r28
    22a8:	6f 5f       	subi	r22, 0xFF	; 255
    22aa:	7f 4f       	sbci	r23, 0xFF	; 255
    22ac:	ce 01       	movw	r24, r28
    22ae:	47 96       	adiw	r24, 0x17	; 23
    22b0:	0e 94 de 3c 	call	0x79bc	; 0x79bc <_ZN6StringaSEOS_>
    22b4:	ce 01       	movw	r24, r28
    22b6:	01 96       	adiw	r24, 0x01	; 1
    22b8:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
    22bc:	63 e9       	ldi	r22, 0x93	; 147
    22be:	72 e0       	ldi	r23, 0x02	; 2
    22c0:	ce 01       	movw	r24, r28
    22c2:	47 96       	adiw	r24, 0x17	; 23
    22c4:	0e 94 73 3e 	call	0x7ce6	; 0x7ce6 <_ZNK6String6equalsEPKc>
        }

        if ((ATe != "ERRORE") && (bitislow(PORTC, CS_W5500))) //&& (BIT_IS_CLEAR(PORTC, 4)))
    22c8:	81 11       	cpse	r24, r1
    22ca:	cf c0       	rjmp	.+414    	; 0x246a <loop+0x456>
    22cc:	44 99       	sbic	0x08, 4	; 8
    22ce:	cd c0       	rjmp	.+410    	; 0x246a <loop+0x456>
        {
          Serial.println("");
    22d0:	6f ef       	ldi	r22, 0xFF	; 255
    22d2:	71 e0       	ldi	r23, 0x01	; 1
    22d4:	88 e3       	ldi	r24, 0x38	; 56
    22d6:	9d e0       	ldi	r25, 0x0D	; 13
    22d8:	0e 94 cf 39 	call	0x739e	; 0x739e <_ZN5Print7printlnEPKc>
          Serial.print("***************************************************************");
    22dc:	61 e0       	ldi	r22, 0x01	; 1
    22de:	78 e0       	ldi	r23, 0x08	; 8
    22e0:	88 e3       	ldi	r24, 0x38	; 56
    22e2:	9d e0       	ldi	r25, 0x0D	; 13
    22e4:	0e 94 a4 39 	call	0x7348	; 0x7348 <_ZN5Print5printEPKc>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    22e8:	61 e4       	ldi	r22, 0x41	; 65
    22ea:	78 e0       	ldi	r23, 0x08	; 8
    22ec:	ce 01       	movw	r24, r28
    22ee:	01 96       	adiw	r24, 0x01	; 1
    22f0:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
          Serial.println(" Tessera ID : " + ATe);
    22f4:	be 01       	movw	r22, r28
    22f6:	69 5e       	subi	r22, 0xE9	; 233
    22f8:	7f 4f       	sbci	r23, 0xFF	; 255
    22fa:	ce 01       	movw	r24, r28
    22fc:	01 96       	adiw	r24, 0x01	; 1
    22fe:	0e 94 3f 3e 	call	0x7c7e	; 0x7c7e <_ZplRK15StringSumHelperRK6String>
    2302:	bc 01       	movw	r22, r24
    2304:	88 e3       	ldi	r24, 0x38	; 56
    2306:	9d e0       	ldi	r25, 0x0D	; 13
    2308:	0e 94 bf 39 	call	0x737e	; 0x737e <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    230c:	ce 01       	movw	r24, r28
    230e:	01 96       	adiw	r24, 0x01	; 1
    2310:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
          Serial.print("***************************************************************");
    2314:	61 e0       	ldi	r22, 0x01	; 1
    2316:	78 e0       	ldi	r23, 0x08	; 8
    2318:	88 e3       	ldi	r24, 0x38	; 56
    231a:	9d e0       	ldi	r25, 0x0D	; 13
    231c:	0e 94 a4 39 	call	0x7348	; 0x7348 <_ZN5Print5printEPKc>
          Serial.println("Riconoscimento Tessera .............");
    2320:	60 e5       	ldi	r22, 0x50	; 80
    2322:	78 e0       	ldi	r23, 0x08	; 8
    2324:	88 e3       	ldi	r24, 0x38	; 56
    2326:	9d e0       	ldi	r25, 0x0D	; 13
    2328:	0e 94 cf 39 	call	0x739e	; 0x739e <_ZN5Print7printlnEPKc>

          RaccoltaDati[0] = ATe;
    232c:	be 01       	movw	r22, r28
    232e:	69 5e       	subi	r22, 0xE9	; 233
    2330:	7f 4f       	sbci	r23, 0xFF	; 255
    2332:	87 e1       	ldi	r24, 0x17	; 23
    2334:	9b e0       	ldi	r25, 0x0B	; 11
    2336:	0e 94 c1 3c 	call	0x7982	; 0x7982 <_ZN6StringaSERKS_>
          // RaccoltaDati[0] = "DD92743A";
          // RaccoltaDati[5] = "000";

          lcd.backlight();
    233a:	83 e6       	ldi	r24, 0x63	; 99
    233c:	9b e0       	ldi	r25, 0x0B	; 11
    233e:	0e 94 fc 30 	call	0x61f8	; 0x61f8 <_ZN3LCD9backlightEv>
          lcd.display();
    2342:	83 e6       	ldi	r24, 0x63	; 99
    2344:	9b e0       	ldi	r25, 0x0B	; 11
    2346:	0e 94 62 31 	call	0x62c4	; 0x62c4 <_ZN3LCD7displayEv>
    234a:	8f e3       	ldi	r24, 0x3F	; 63
    234c:	9c e9       	ldi	r25, 0x9C	; 156
    234e:	01 97       	sbiw	r24, 0x01	; 1
    2350:	f1 f7       	brne	.-4      	; 0x234e <loop+0x33a>
    2352:	00 c0       	rjmp	.+0      	; 0x2354 <loop+0x340>
    2354:	00 00       	nop
          _delay_ms(10);

          righeDisplay[1] = "  RICONOSCIMENTO ";
    2356:	65 e7       	ldi	r22, 0x75	; 117
    2358:	78 e0       	ldi	r23, 0x08	; 8
    235a:	89 ef       	ldi	r24, 0xF9	; 249
    235c:	9a e0       	ldi	r25, 0x0A	; 10
    235e:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
          righeDisplay[2] = ".....In Corso.....";
    2362:	67 e8       	ldi	r22, 0x87	; 135
    2364:	78 e0       	ldi	r23, 0x08	; 8
    2366:	8f ef       	ldi	r24, 0xFF	; 255
    2368:	9a e0       	ldi	r25, 0x0A	; 10
    236a:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    236e:	6a e9       	ldi	r22, 0x9A	; 154
    2370:	78 e0       	ldi	r23, 0x08	; 8
    2372:	ce 01       	movw	r24, r28
    2374:	01 96       	adiw	r24, 0x01	; 1
    2376:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
          righeDisplay[3] = "   Rfid: " + ATe; // COMMENTA in produzione
    237a:	be 01       	movw	r22, r28
    237c:	69 5e       	subi	r22, 0xE9	; 233
    237e:	7f 4f       	sbci	r23, 0xFF	; 255
    2380:	ce 01       	movw	r24, r28
    2382:	01 96       	adiw	r24, 0x01	; 1
    2384:	0e 94 3f 3e 	call	0x7c7e	; 0x7c7e <_ZplRK15StringSumHelperRK6String>
    2388:	bc 01       	movw	r22, r24
    238a:	85 e0       	ldi	r24, 0x05	; 5
    238c:	9b e0       	ldi	r25, 0x0B	; 11
    238e:	0e 94 c1 3c 	call	0x7982	; 0x7982 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2392:	ce 01       	movw	r24, r28
    2394:	01 96       	adiw	r24, 0x01	; 1
    2396:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
          //righeDisplay[3] = "Attendere.........";
          displayLCD(righeDisplay, stato_procedura, 100);
    239a:	60 91 44 0b 	lds	r22, 0x0B44	; 0x800b44 <stato_procedura>
    239e:	70 91 45 0b 	lds	r23, 0x0B45	; 0x800b45 <stato_procedura+0x1>
    23a2:	44 e6       	ldi	r20, 0x64	; 100
    23a4:	50 e0       	ldi	r21, 0x00	; 0
    23a6:	83 ef       	ldi	r24, 0xF3	; 243
    23a8:	9a e0       	ldi	r25, 0x0A	; 10
    23aa:	0e 94 4e 04 	call	0x89c	; 0x89c <_Z10displayLCDP6Stringii>
          InizializzaEthernet();
    23ae:	0e 94 97 01 	call	0x32e	; 0x32e <_Z19InizializzaEthernetv>
    23b2:	9f ef       	ldi	r25, 0xFF	; 255
    23b4:	23 ed       	ldi	r18, 0xD3	; 211
    23b6:	30 e3       	ldi	r19, 0x30	; 48
    23b8:	91 50       	subi	r25, 0x01	; 1
    23ba:	20 40       	sbci	r18, 0x00	; 0
    23bc:	30 40       	sbci	r19, 0x00	; 0
    23be:	e1 f7       	brne	.-8      	; 0x23b8 <loop+0x3a4>
    23c0:	00 c0       	rjmp	.+0      	; 0x23c2 <loop+0x3ae>
    23c2:	00 00       	nop
          _delay_ms(1000); // tempo per inizializzare la ethernet
       //}

        // Effettua chiamata REST per validare CARD NFC
        
        righeDisplay[1] =  "** TARGA MEZZO **";
    23c4:	6e ed       	ldi	r22, 0xDE	; 222
    23c6:	75 e0       	ldi	r23, 0x05	; 5
    23c8:	89 ef       	ldi	r24, 0xF9	; 249
    23ca:	9a e0       	ldi	r25, 0x0A	; 10
    23cc:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
        righeDisplay[2] = "TARGA:";
    23d0:	60 ef       	ldi	r22, 0xF0	; 240
    23d2:	75 e0       	ldi	r23, 0x05	; 5
    23d4:	8f ef       	ldi	r24, 0xFF	; 255
    23d6:	9a e0       	ldi	r25, 0x0A	; 10
    23d8:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
        righeDisplay[3] = "#:Conferma *:Usa TAG";
    23dc:	67 ef       	ldi	r22, 0xF7	; 247
    23de:	75 e0       	ldi	r23, 0x05	; 5
    23e0:	85 e0       	ldi	r24, 0x05	; 5
    23e2:	9b e0       	ldi	r25, 0x0B	; 11
    23e4:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>

		//if (GetAteValidation(80,serverATE,clientATE,ATe)) // Server Centrale
		
        // bool GetAteCheck(int Port, char serverREST[], EthernetClient ClientHTTP, String _idAte)
        if (GetAteCheck(80,serverREST,clientATE,ATe)) 
    23e8:	be 01       	movw	r22, r28
    23ea:	69 5e       	subi	r22, 0xE9	; 233
    23ec:	7f 4f       	sbci	r23, 0xFF	; 255
    23ee:	ce 01       	movw	r24, r28
    23f0:	0f 96       	adiw	r24, 0x0f	; 15
    23f2:	0e 94 d6 3c 	call	0x79ac	; 0x79ac <_ZN6StringC1ERKS_>
    23f6:	61 ec       	ldi	r22, 0xC1	; 193
    23f8:	7a e0       	ldi	r23, 0x0A	; 10
    23fa:	ce 01       	movw	r24, r28
    23fc:	01 96       	adiw	r24, 0x01	; 1
    23fe:	e6 dd       	rcall	.-1076   	; 0x1fcc <_ZN14EthernetClientC1ERKS_>
    2400:	9e 01       	movw	r18, r28
    2402:	21 5f       	subi	r18, 0xF1	; 241
    2404:	3f 4f       	sbci	r19, 0xFF	; 255
    2406:	ae 01       	movw	r20, r28
    2408:	4f 5f       	subi	r20, 0xFF	; 255
    240a:	5f 4f       	sbci	r21, 0xFF	; 255
    240c:	68 e3       	ldi	r22, 0x38	; 56
    240e:	71 e0       	ldi	r23, 0x01	; 1
    2410:	80 e5       	ldi	r24, 0x50	; 80
    2412:	90 e0       	ldi	r25, 0x00	; 0
    2414:	0e 94 2e 07 	call	0xe5c	; 0xe5c <_Z11GetAteCheckiPc14EthernetClient6String>
    2418:	18 2f       	mov	r17, r24
    241a:	ce 01       	movw	r24, r28
    241c:	0f 96       	adiw	r24, 0x0f	; 15
    241e:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
    2422:	11 23       	and	r17, r17
    2424:	09 f4       	brne	.+2      	; 0x2428 <loop+0x414>
    2426:	b9 c4       	rjmp	.+2418   	; 0x2d9a <loop+0xd86>
        {
                //SET_BIT(PORTC,PC4);
				SET_BIT(PORTC,CS_W5500);
    2428:	44 9a       	sbi	0x08, 4	; 8
                RaccoltaDati[5] = "000";               
    242a:	6d ef       	ldi	r22, 0xFD	; 253
    242c:	77 e0       	ldi	r23, 0x07	; 7
    242e:	85 e3       	ldi	r24, 0x35	; 53
    2430:	9b e0       	ldi	r25, 0x0B	; 11
    2432:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
                Buzzer(1,200);
    2436:	48 ec       	ldi	r20, 0xC8	; 200
    2438:	50 e0       	ldi	r21, 0x00	; 0
    243a:	60 e0       	ldi	r22, 0x00	; 0
    243c:	70 e0       	ldi	r23, 0x00	; 0
    243e:	81 e0       	ldi	r24, 0x01	; 1
    2440:	0e 94 4a 03 	call	0x694	; 0x694 <_Z6Buzzerhm>
    2444:	8f ef       	ldi	r24, 0xFF	; 255
    2446:	93 ec       	ldi	r25, 0xC3	; 195
    2448:	29 e0       	ldi	r18, 0x09	; 9
    244a:	81 50       	subi	r24, 0x01	; 1
    244c:	90 40       	sbci	r25, 0x00	; 0
    244e:	20 40       	sbci	r18, 0x00	; 0
    2450:	e1 f7       	brne	.-8      	; 0x244a <loop+0x436>
    2452:	00 c0       	rjmp	.+0      	; 0x2454 <loop+0x440>
    2454:	00 00       	nop
				_delay_ms(200);
                avanzaStato(TinputTarga);
    2456:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <TinputTarga>
    245a:	70 91 2b 01 	lds	r23, 0x012B	; 0x80012b <TinputTarga+0x1>
    245e:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <TinputTarga+0x2>
    2462:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <TinputTarga+0x3>
    2466:	0e 94 83 04 	call	0x906	; 0x906 <_Z11avanzaStatom>
      {
        TARGA = "";
        KM = "";

        /*****************************************************/
        String ATe = "ERRORE";
    246a:	ce 01       	movw	r24, r28
    246c:	47 96       	adiw	r24, 0x17	; 23
		}    
      }
      break;
    case 2:
      {
        timer_stato();
    246e:	29 c4       	rjmp	.+2130   	; 0x2cc2 <loop+0xcae>
    2470:	48 dd       	rcall	.-1392   	; 0x1f02 <_Z11timer_statov>
        // da commentare
        // Carburante = "D"; // Simulo Abilitazione Diesel
        // da commentare
        // Carburante = "B"; // Simulo Abilitazione Benzina
        /*****************************************************************/
        gpio.setCONFREG(0x3C);
    2472:	6c e3       	ldi	r22, 0x3C	; 60
    2474:	80 e9       	ldi	r24, 0x90	; 144
    2476:	9a e0       	ldi	r25, 0x0A	; 10
    2478:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <_ZN7PCA953410setCONFREGEh>
        uint8_t c = gpio.Read_IP_REGISTER();
    247c:	80 e9       	ldi	r24, 0x90	; 144
    247e:	9a e0       	ldi	r25, 0x0A	; 10
    2480:	0e 94 d0 1e 	call	0x3da0	; 0x3da0 <_ZN7PCA953416Read_IP_REGISTEREv>
    2484:	e8 2e       	mov	r14, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    2486:	42 e0       	ldi	r20, 0x02	; 2
    2488:	be 01       	movw	r22, r28
    248a:	69 5e       	subi	r22, 0xE9	; 233
    248c:	7f 4f       	sbci	r23, 0xFF	; 255
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	0e 94 3e 43 	call	0x867c	; 0x867c <__itoa_ncheck>
        char buf[8];
        itoa(c, buf, 2);
        gpio.setCONFREG(0xC3);
    2494:	63 ec       	ldi	r22, 0xC3	; 195
    2496:	80 e9       	ldi	r24, 0x90	; 144
    2498:	9a e0       	ldi	r25, 0x0A	; 10
    249a:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <_ZN7PCA953410setCONFREGEh>
        uint8_t r = gpio.Read_IP_REGISTER();
    249e:	80 e9       	ldi	r24, 0x90	; 144
    24a0:	9a e0       	ldi	r25, 0x0A	; 10
    24a2:	0e 94 d0 1e 	call	0x3da0	; 0x3da0 <_ZN7PCA953416Read_IP_REGISTEREv>
    24a6:	f8 2e       	mov	r15, r24
    24a8:	42 e0       	ldi	r20, 0x02	; 2
    24aa:	be 01       	movw	r22, r28
    24ac:	61 5f       	subi	r22, 0xF1	; 241
    24ae:	7f 4f       	sbci	r23, 0xFF	; 255
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	0e 94 3e 43 	call	0x867c	; 0x867c <__itoa_ncheck>
        char bufr[8];
        itoa(r, bufr, 2);
        char ris[8];
        uint8_t z = (r ^ c);
        itoa(z, ris, 2);
    24b6:	fe 24       	eor	r15, r14
    24b8:	ef 2c       	mov	r14, r15
    24ba:	f1 2c       	mov	r15, r1
    24bc:	42 e0       	ldi	r20, 0x02	; 2
    24be:	be 01       	movw	r22, r28
    24c0:	6f 5f       	subi	r22, 0xFF	; 255
    24c2:	7f 4f       	sbci	r23, 0xFF	; 255
    24c4:	c7 01       	movw	r24, r14
    24c6:	0e 94 3e 43 	call	0x867c	; 0x867c <__itoa_ncheck>
        char T = getCharKeypad(int(z));
    24ca:	c7 01       	movw	r24, r14
    24cc:	0e 94 68 03 	call	0x6d0	; 0x6d0 <_Z13getCharKeypadi>
    24d0:	2f ef       	ldi	r18, 0xFF	; 255
    24d2:	39 ef       	ldi	r19, 0xF9	; 249
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	21 50       	subi	r18, 0x01	; 1
    24d8:	30 40       	sbci	r19, 0x00	; 0
    24da:	90 40       	sbci	r25, 0x00	; 0
    24dc:	e1 f7       	brne	.-8      	; 0x24d6 <loop+0x4c2>
        _delay_ms(20);
        /*****************************************************************/
        inputTarga(T);
    24de:	00 c0       	rjmp	.+0      	; 0x24e0 <loop+0x4cc>
    24e0:	00 00       	nop
      }
      break;
    24e2:	fe d8       	rcall	.-3588   	; 0x16e0 <_Z10inputTargac>
    case 3:
      {
        timer_stato();
    24e4:	f0 c3       	rjmp	.+2016   	; 0x2cc6 <loop+0xcb2>
    24e6:	0d dd       	rcall	.-1510   	; 0x1f02 <_Z11timer_statov>

        if (TARGA.length() == 5)
    24e8:	80 91 9d 0a 	lds	r24, 0x0A9D	; 0x800a9d <TARGA+0x4>
    24ec:	90 91 9e 0a 	lds	r25, 0x0A9E	; 0x800a9e <TARGA+0x5>
    24f0:	05 97       	sbiw	r24, 0x05	; 5
    24f2:	e9 f4       	brne	.+58     	; 0x252e <loop+0x51a>
        {
          mezzo.Carb = "X";
    24f4:	61 e2       	ldi	r22, 0x21	; 33
    24f6:	75 e0       	ldi	r23, 0x05	; 5
    24f8:	85 e8       	ldi	r24, 0x85	; 133
    24fa:	9b e0       	ldi	r25, 0x0B	; 11
    24fc:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
          mezzo.TARGA = TARGA;
    2500:	69 e9       	ldi	r22, 0x99	; 153
    2502:	7a e0       	ldi	r23, 0x0A	; 10
    2504:	8b e8       	ldi	r24, 0x8B	; 139
    2506:	9b e0       	ldi	r25, 0x0B	; 11
    2508:	0e 94 c1 3c 	call	0x7982	; 0x7982 <_ZN6StringaSERKS_>
          mezzo.KM = "0";
    250c:	6f ea       	ldi	r22, 0xAF	; 175
    250e:	78 e0       	ldi	r23, 0x08	; 8
    2510:	81 e9       	ldi	r24, 0x91	; 145
    2512:	9b e0       	ldi	r25, 0x0B	; 11
    2514:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
          distr_selezionato = 0;
    2518:	10 92 41 0b 	sts	0x0B41, r1	; 0x800b41 <distr_selezionato>
          avanzaStato(TselDistributore);
    251c:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <TselDistributore>
    2520:	70 91 23 01 	lds	r23, 0x0123	; 0x800123 <TselDistributore+0x1>
    2524:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <TselDistributore+0x2>
    2528:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <TselDistributore+0x3>
    252c:	ee c5       	rjmp	.+3036   	; 0x310a <loop+0x10f6>
        }
        else {
          String mezzoString = leggiTAG_Mezzo(false); // con TRUE scrive sul blocco 4 della card NFC DEL MEZZO
    252e:	60 e0       	ldi	r22, 0x00	; 0
    2530:	ce 01       	movw	r24, r28
    2532:	0f 96       	adiw	r24, 0x0f	; 15
    2534:	0e 94 92 05 	call	0xb24	; 0xb24 <_Z14leggiTAG_Mezzob>
    2538:	8f e3       	ldi	r24, 0x3F	; 63
    253a:	9c e9       	ldi	r25, 0x9C	; 156
    253c:	01 97       	sbiw	r24, 0x01	; 1
    253e:	f1 f7       	brne	.-4      	; 0x253c <loop+0x528>
    2540:	00 c0       	rjmp	.+0      	; 0x2542 <loop+0x52e>
    2542:	00 00       	nop
          _delay_ms(10);

          Serial.println(mezzoString);
    2544:	be 01       	movw	r22, r28
    2546:	61 5f       	subi	r22, 0xF1	; 241
    2548:	7f 4f       	sbci	r23, 0xFF	; 255
    254a:	88 e3       	ldi	r24, 0x38	; 56
    254c:	9d e0       	ldi	r25, 0x0D	; 13
    254e:	0e 94 bf 39 	call	0x737e	; 0x737e <_ZN5Print7printlnERK6String>
	int indexOf( const String &str, unsigned int fromIndex ) const;
	int lastIndexOf( char ch ) const;
	int lastIndexOf( char ch, unsigned int fromIndex ) const;
	int lastIndexOf( const String &str ) const;
	int lastIndexOf( const String &str, unsigned int fromIndex ) const;
	String substring( unsigned int beginIndex ) const { return substring(beginIndex, len); };
    2552:	2b 89       	ldd	r18, Y+19	; 0x13
    2554:	3c 89       	ldd	r19, Y+20	; 0x14
    2556:	45 e0       	ldi	r20, 0x05	; 5
    2558:	50 e0       	ldi	r21, 0x00	; 0
    255a:	be 01       	movw	r22, r28
    255c:	61 5f       	subi	r22, 0xF1	; 241
    255e:	7f 4f       	sbci	r23, 0xFF	; 255
    2560:	ce 01       	movw	r24, r28
    2562:	01 96       	adiw	r24, 0x01	; 1
    2564:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <_ZNK6String9substringEjj>

          mezzo.Carb = mezzoString.substring(5);
    2568:	be 01       	movw	r22, r28
    256a:	6f 5f       	subi	r22, 0xFF	; 255
    256c:	7f 4f       	sbci	r23, 0xFF	; 255
    256e:	85 e8       	ldi	r24, 0x85	; 133
    2570:	9b e0       	ldi	r25, 0x0B	; 11
    2572:	0e 94 de 3c 	call	0x79bc	; 0x79bc <_ZN6StringaSEOS_>
    2576:	ce 01       	movw	r24, r28
    2578:	01 96       	adiw	r24, 0x01	; 1
    257a:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
          mezzo.TARGA = mezzoString.substring(0, 5);
    257e:	25 e0       	ldi	r18, 0x05	; 5
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	40 e0       	ldi	r20, 0x00	; 0
    2584:	50 e0       	ldi	r21, 0x00	; 0
    2586:	be 01       	movw	r22, r28
    2588:	61 5f       	subi	r22, 0xF1	; 241
    258a:	7f 4f       	sbci	r23, 0xFF	; 255
    258c:	ce 01       	movw	r24, r28
    258e:	01 96       	adiw	r24, 0x01	; 1
    2590:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <_ZNK6String9substringEjj>
    2594:	be 01       	movw	r22, r28
    2596:	6f 5f       	subi	r22, 0xFF	; 255
    2598:	7f 4f       	sbci	r23, 0xFF	; 255
    259a:	8b e8       	ldi	r24, 0x8B	; 139
    259c:	9b e0       	ldi	r25, 0x0B	; 11
    259e:	0e 94 de 3c 	call	0x79bc	; 0x79bc <_ZN6StringaSEOS_>
    25a2:	ce 01       	movw	r24, r28
    25a4:	01 96       	adiw	r24, 0x01	; 1
    25a6:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
          mezzo.KM = "0";
    25aa:	6f ea       	ldi	r22, 0xAF	; 175
    25ac:	78 e0       	ldi	r23, 0x08	; 8
    25ae:	81 e9       	ldi	r24, 0x91	; 145
    25b0:	9b e0       	ldi	r25, 0x0B	; 11
    25b2:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    25b6:	63 e2       	ldi	r22, 0x23	; 35
    25b8:	77 e0       	ldi	r23, 0x07	; 7
    25ba:	ce 01       	movw	r24, r28
    25bc:	01 96       	adiw	r24, 0x01	; 1
    25be:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>

          Serial.println("TIPO CARBURANTE: " + mezzo.Carb);
    25c2:	65 e8       	ldi	r22, 0x85	; 133
    25c4:	7b e0       	ldi	r23, 0x0B	; 11
    25c6:	ce 01       	movw	r24, r28
    25c8:	01 96       	adiw	r24, 0x01	; 1
    25ca:	0e 94 3f 3e 	call	0x7c7e	; 0x7c7e <_ZplRK15StringSumHelperRK6String>
    25ce:	bc 01       	movw	r22, r24
    25d0:	88 e3       	ldi	r24, 0x38	; 56
    25d2:	9d e0       	ldi	r25, 0x0D	; 13
    25d4:	0e 94 bf 39 	call	0x737e	; 0x737e <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    25d8:	ce 01       	movw	r24, r28
    25da:	01 96       	adiw	r24, 0x01	; 1
    25dc:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    25e0:	65 e3       	ldi	r22, 0x35	; 53
    25e2:	77 e0       	ldi	r23, 0x07	; 7
    25e4:	ce 01       	movw	r24, r28
    25e6:	01 96       	adiw	r24, 0x01	; 1
    25e8:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
          Serial.println("TARGA: " + mezzo.TARGA);
    25ec:	6b e8       	ldi	r22, 0x8B	; 139
    25ee:	7b e0       	ldi	r23, 0x0B	; 11
    25f0:	ce 01       	movw	r24, r28
    25f2:	01 96       	adiw	r24, 0x01	; 1
    25f4:	0e 94 3f 3e 	call	0x7c7e	; 0x7c7e <_ZplRK15StringSumHelperRK6String>
    25f8:	bc 01       	movw	r22, r24
    25fa:	88 e3       	ldi	r24, 0x38	; 56
    25fc:	9d e0       	ldi	r25, 0x0D	; 13
    25fe:	0e 94 bf 39 	call	0x737e	; 0x737e <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2602:	ce 01       	movw	r24, r28
    2604:	01 96       	adiw	r24, 0x01	; 1
    2606:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    260a:	6e e3       	ldi	r22, 0x3E	; 62
    260c:	76 e0       	ldi	r23, 0x06	; 6
    260e:	85 e8       	ldi	r24, 0x85	; 133
    2610:	9b e0       	ldi	r25, 0x0B	; 11
    2612:	0e 94 73 3e 	call	0x7ce6	; 0x7ce6 <_ZNK6String6equalsEPKc>

          if ((mezzo.Carb == "B") || (mezzo.Carb == "D")) {
    2616:	81 11       	cpse	r24, r1
    2618:	f3 c3       	rjmp	.+2022   	; 0x2e00 <loop+0xdec>
    261a:	69 ec       	ldi	r22, 0xC9	; 201
    261c:	75 e0       	ldi	r23, 0x05	; 5
    261e:	85 e8       	ldi	r24, 0x85	; 133
    2620:	9b e0       	ldi	r25, 0x0B	; 11
    2622:	0e 94 73 3e 	call	0x7ce6	; 0x7ce6 <_ZNK6String6equalsEPKc>
    2626:	81 11       	cpse	r24, r1
          mezzo.KM = "0";
          distr_selezionato = 0;
          avanzaStato(TselDistributore);
        }
        else {
          String mezzoString = leggiTAG_Mezzo(false); // con TRUE scrive sul blocco 4 della card NFC DEL MEZZO
    2628:	eb c3       	rjmp	.+2006   	; 0x2e00 <loop+0xdec>
    262a:	ce 01       	movw	r24, r28
    262c:	0f 96       	adiw	r24, 0x0f	; 15
        }
      }
      break;
    case 4:
      {
        timer_stato();
    262e:	49 c3       	rjmp	.+1682   	; 0x2cc2 <loop+0xcae>
    2630:	68 dc       	rcall	.-1840   	; 0x1f02 <_Z11timer_statov>
    2632:	6e e3       	ldi	r22, 0x3E	; 62
    2634:	76 e0       	ldi	r23, 0x06	; 6
    2636:	85 e8       	ldi	r24, 0x85	; 133
    2638:	9b e0       	ldi	r25, 0x0B	; 11
    263a:	0e 94 73 3e 	call	0x7ce6	; 0x7ce6 <_ZNK6String6equalsEPKc>

        // Verifica scelta distributore

        if ((mezzo.Carb == "B") || (distr_selezionato == 2))
    263e:	81 11       	cpse	r24, r1
    2640:	16 c4       	rjmp	.+2092   	; 0x2e6e <loop+0xe5a>
    2642:	80 91 41 0b 	lds	r24, 0x0B41	; 0x800b41 <distr_selezionato>
    2646:	82 30       	cpi	r24, 0x02	; 2
    2648:	09 f0       	breq	.+2      	; 0x264c <loop+0x638>
    264a:	3d c4       	rjmp	.+2170   	; 0x2ec6 <loop+0xeb2>
        }
      }
      break;
    case 5:
      {
		timer_stato();
    264c:	10 c4       	rjmp	.+2080   	; 0x2e6e <loop+0xe5a>
    264e:	59 dc       	rcall	.-1870   	; 0x1f02 <_Z11timer_statov>
        
		// RaccoltaDati[4] = "1234";        
        /*****************************************************************/
        gpio.setCONFREG(0x3C);
    2650:	6c e3       	ldi	r22, 0x3C	; 60
    2652:	80 e9       	ldi	r24, 0x90	; 144
    2654:	9a e0       	ldi	r25, 0x0A	; 10
    2656:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <_ZN7PCA953410setCONFREGEh>
        uint8_t c = gpio.Read_IP_REGISTER();
    265a:	80 e9       	ldi	r24, 0x90	; 144
    265c:	9a e0       	ldi	r25, 0x0A	; 10
    265e:	0e 94 d0 1e 	call	0x3da0	; 0x3da0 <_ZN7PCA953416Read_IP_REGISTEREv>
    2662:	e8 2e       	mov	r14, r24
    2664:	42 e0       	ldi	r20, 0x02	; 2
    2666:	be 01       	movw	r22, r28
    2668:	69 5e       	subi	r22, 0xE9	; 233
    266a:	7f 4f       	sbci	r23, 0xFF	; 255
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	0e 94 3e 43 	call	0x867c	; 0x867c <__itoa_ncheck>
        char buf[8];
        itoa(c, buf, 2);
        gpio.setCONFREG(0xC3);
    2672:	63 ec       	ldi	r22, 0xC3	; 195
    2674:	80 e9       	ldi	r24, 0x90	; 144
    2676:	9a e0       	ldi	r25, 0x0A	; 10
    2678:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <_ZN7PCA953410setCONFREGEh>
        uint8_t r = gpio.Read_IP_REGISTER();
    267c:	80 e9       	ldi	r24, 0x90	; 144
    267e:	9a e0       	ldi	r25, 0x0A	; 10
    2680:	0e 94 d0 1e 	call	0x3da0	; 0x3da0 <_ZN7PCA953416Read_IP_REGISTEREv>
    2684:	f8 2e       	mov	r15, r24
    2686:	42 e0       	ldi	r20, 0x02	; 2
    2688:	be 01       	movw	r22, r28
    268a:	61 5f       	subi	r22, 0xF1	; 241
    268c:	7f 4f       	sbci	r23, 0xFF	; 255
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	0e 94 3e 43 	call	0x867c	; 0x867c <__itoa_ncheck>
        char bufr[8];
        itoa(r, bufr, 2);
        char ris[8];
        uint8_t z = (r ^ c);
        itoa(z, ris, 2);
    2694:	fe 24       	eor	r15, r14
    2696:	ef 2c       	mov	r14, r15
    2698:	f1 2c       	mov	r15, r1
    269a:	42 e0       	ldi	r20, 0x02	; 2
    269c:	be 01       	movw	r22, r28
    269e:	6f 5f       	subi	r22, 0xFF	; 255
    26a0:	7f 4f       	sbci	r23, 0xFF	; 255
    26a2:	c7 01       	movw	r24, r14
    26a4:	0e 94 3e 43 	call	0x867c	; 0x867c <__itoa_ncheck>
        char K = getCharKeypad(int(z));
    26a8:	c7 01       	movw	r24, r14
    26aa:	0e 94 68 03 	call	0x6d0	; 0x6d0 <_Z13getCharKeypadi>
    26ae:	9f ef       	ldi	r25, 0xFF	; 255
    26b0:	29 ef       	ldi	r18, 0xF9	; 249
    26b2:	30 e0       	ldi	r19, 0x00	; 0
    26b4:	91 50       	subi	r25, 0x01	; 1
    26b6:	20 40       	sbci	r18, 0x00	; 0
    26b8:	30 40       	sbci	r19, 0x00	; 0
    26ba:	e1 f7       	brne	.-8      	; 0x26b4 <loop+0x6a0>
        _delay_ms(20);
        /*****************************************************************/

        inputKM(K);
    26bc:	00 c0       	rjmp	.+0      	; 0x26be <loop+0x6aa>
    26be:	00 00       	nop
        impulsi = 0;
    26c0:	4b d9       	rcall	.-3434   	; 0x1958 <_Z7inputKMc>
    26c2:	10 92 43 0b 	sts	0x0B43, r1	; 0x800b43 <impulsi+0x1>
    26c6:	10 92 42 0b 	sts	0x0B42, r1	; 0x800b42 <impulsi>
      }
      break;
	case 6: 
	{ 
	    timer_stato();
    26ca:	fd c2       	rjmp	.+1530   	; 0x2cc6 <loop+0xcb2>
    26cc:	1a dc       	rcall	.-1996   	; 0x1f02 <_Z11timer_statov>
		 
		if (testbit(PINA,1) && (mezzo.Carb == "D"))
    26ce:	01 9b       	sbis	0x00, 1	; 0
    26d0:	08 c0       	rjmp	.+16     	; 0x26e2 <loop+0x6ce>
    26d2:	69 ec       	ldi	r22, 0xC9	; 201
    26d4:	75 e0       	ldi	r23, 0x05	; 5
    26d6:	85 e8       	ldi	r24, 0x85	; 133
    26d8:	9b e0       	ldi	r25, 0x0B	; 11
    26da:	0e 94 73 3e 	call	0x7ce6	; 0x7ce6 <_ZNK6String6equalsEPKc>
    26de:	81 11       	cpse	r24, r1
			avanzaStato(TmaxErogazione); 
		}
		
		// CONTATTO PISTOLA BENZINA

		if  (testbit(PINB,1) && (mezzo.Carb == "B"))
    26e0:	35 c4       	rjmp	.+2154   	; 0x2f4c <loop+0xf38>
    26e2:	19 9b       	sbis	0x03, 1	; 3
    26e4:	f0 c2       	rjmp	.+1504   	; 0x2cc6 <loop+0xcb2>
    26e6:	6e e3       	ldi	r22, 0x3E	; 62
    26e8:	76 e0       	ldi	r23, 0x06	; 6
    26ea:	85 e8       	ldi	r24, 0x85	; 133
    26ec:	9b e0       	ldi	r25, 0x0B	; 11
    26ee:	0e 94 73 3e 	call	0x7ce6	; 0x7ce6 <_ZNK6String6equalsEPKc>
    26f2:	81 11       	cpse	r24, r1
    26f4:	6e c4       	rjmp	.+2268   	; 0x2fd2 <loop+0xfbe>
		 
	}
	break;
    case 7:
      {
        timer_stato();
    26f6:	e7 c2       	rjmp	.+1486   	; 0x2cc6 <loop+0xcb2>
    26f8:	04 dc       	rcall	.-2040   	; 0x1f02 <_Z11timer_statov>

        double lt = impulsiToLitri(impulsi);
    26fa:	80 91 42 0b 	lds	r24, 0x0B42	; 0x800b42 <impulsi>
    26fe:	90 91 43 0b 	lds	r25, 0x0B43	; 0x800b43 <impulsi+0x1>
    2702:	0e 94 3e 0a 	call	0x147c	; 0x147c <_Z14impulsiToLitrii>
    2706:	6b 01       	movw	r12, r22
    2708:	7c 01       	movw	r14, r24

        righeDisplay[1] = "LITRI :" + String(lt);
    270a:	22 e0       	ldi	r18, 0x02	; 2
    270c:	ab 01       	movw	r20, r22
    270e:	bc 01       	movw	r22, r24
    2710:	ce 01       	movw	r24, r28
    2712:	0f 96       	adiw	r24, 0x0f	; 15
    2714:	0e 94 bf 3d 	call	0x7b7e	; 0x7b7e <_ZN6StringC1Edh>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2718:	6d e3       	ldi	r22, 0x3D	; 61
    271a:	77 e0       	ldi	r23, 0x07	; 7
    271c:	ce 01       	movw	r24, r28
    271e:	01 96       	adiw	r24, 0x01	; 1
    2720:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
    2724:	be 01       	movw	r22, r28
    2726:	61 5f       	subi	r22, 0xF1	; 241
    2728:	7f 4f       	sbci	r23, 0xFF	; 255
    272a:	ce 01       	movw	r24, r28
    272c:	01 96       	adiw	r24, 0x01	; 1
    272e:	0e 94 3f 3e 	call	0x7c7e	; 0x7c7e <_ZplRK15StringSumHelperRK6String>
    2732:	bc 01       	movw	r22, r24
    2734:	89 ef       	ldi	r24, 0xF9	; 249
    2736:	9a e0       	ldi	r25, 0x0A	; 10
    2738:	0e 94 c1 3c 	call	0x7982	; 0x7982 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    273c:	ce 01       	movw	r24, r28
    273e:	01 96       	adiw	r24, 0x01	; 1
    2740:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
    2744:	ce 01       	movw	r24, r28
    2746:	0f 96       	adiw	r24, 0x0f	; 15
    2748:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    274c:	60 ef       	ldi	r22, 0xF0	; 240
    274e:	75 e0       	ldi	r23, 0x05	; 5
    2750:	ce 01       	movw	r24, r28
    2752:	01 96       	adiw	r24, 0x01	; 1
    2754:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
		righeDisplay[2] = "TARGA:" + mezzo.TARGA;
    2758:	6b e8       	ldi	r22, 0x8B	; 139
    275a:	7b e0       	ldi	r23, 0x0B	; 11
    275c:	ce 01       	movw	r24, r28
    275e:	01 96       	adiw	r24, 0x01	; 1
    2760:	0e 94 3f 3e 	call	0x7c7e	; 0x7c7e <_ZplRK15StringSumHelperRK6String>
    2764:	bc 01       	movw	r22, r24
    2766:	8f ef       	ldi	r24, 0xFF	; 255
    2768:	9a e0       	ldi	r25, 0x0A	; 10
    276a:	0e 94 c1 3c 	call	0x7982	; 0x7982 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    276e:	ce 01       	movw	r24, r28
    2770:	01 96       	adiw	r24, 0x01	; 1
    2772:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2776:	65 e4       	ldi	r22, 0x45	; 69
    2778:	77 e0       	ldi	r23, 0x07	; 7
    277a:	ce 01       	movw	r24, r28
    277c:	01 96       	adiw	r24, 0x01	; 1
    277e:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
        //righeDisplay[2] = "imp :" + String(impulsi);
        righeDisplay[3] = "Erogazione: " + StatoAttuale;
    2782:	6c e4       	ldi	r22, 0x4C	; 76
    2784:	7b e0       	ldi	r23, 0x0B	; 11
    2786:	ce 01       	movw	r24, r28
    2788:	01 96       	adiw	r24, 0x01	; 1
    278a:	0e 94 3f 3e 	call	0x7c7e	; 0x7c7e <_ZplRK15StringSumHelperRK6String>
    278e:	bc 01       	movw	r22, r24
    2790:	85 e0       	ldi	r24, 0x05	; 5
    2792:	9b e0       	ldi	r25, 0x0B	; 11
    2794:	0e 94 c1 3c 	call	0x7982	; 0x7982 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2798:	ce 01       	movw	r24, r28
    279a:	01 96       	adiw	r24, 0x01	; 1
    279c:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>

        lcd.setCursor(0, 1);
    27a0:	41 e0       	ldi	r20, 0x01	; 1
    27a2:	60 e0       	ldi	r22, 0x00	; 0
    27a4:	83 e6       	ldi	r24, 0x63	; 99
    27a6:	9b e0       	ldi	r25, 0x0B	; 11
    27a8:	0e 94 1a 31 	call	0x6234	; 0x6234 <_ZN3LCD9setCursorEhh>
        lcd.print(righeDisplay[1]);
    27ac:	69 ef       	ldi	r22, 0xF9	; 249
    27ae:	7a e0       	ldi	r23, 0x0A	; 10
    27b0:	83 e6       	ldi	r24, 0x63	; 99
    27b2:	9b e0       	ldi	r25, 0x0B	; 11
    27b4:	0e 94 96 39 	call	0x732c	; 0x732c <_ZN5Print5printERK6String>
        lcd.setCursor(0, 2);
    27b8:	42 e0       	ldi	r20, 0x02	; 2
    27ba:	60 e0       	ldi	r22, 0x00	; 0
    27bc:	83 e6       	ldi	r24, 0x63	; 99
    27be:	9b e0       	ldi	r25, 0x0B	; 11
    27c0:	0e 94 1a 31 	call	0x6234	; 0x6234 <_ZN3LCD9setCursorEhh>
        lcd.print(righeDisplay[2]);
    27c4:	6f ef       	ldi	r22, 0xFF	; 255
    27c6:	7a e0       	ldi	r23, 0x0A	; 10
    27c8:	83 e6       	ldi	r24, 0x63	; 99
    27ca:	9b e0       	ldi	r25, 0x0B	; 11
    27cc:	0e 94 96 39 	call	0x732c	; 0x732c <_ZN5Print5printERK6String>
        lcd.setCursor(0, 3);
    27d0:	43 e0       	ldi	r20, 0x03	; 3
    27d2:	60 e0       	ldi	r22, 0x00	; 0
    27d4:	83 e6       	ldi	r24, 0x63	; 99
    27d6:	9b e0       	ldi	r25, 0x0B	; 11
    27d8:	0e 94 1a 31 	call	0x6234	; 0x6234 <_ZN3LCD9setCursorEhh>
        lcd.print(righeDisplay[3]);
    27dc:	65 e0       	ldi	r22, 0x05	; 5
    27de:	7b e0       	ldi	r23, 0x0B	; 11
    27e0:	83 e6       	ldi	r24, 0x63	; 99
    27e2:	9b e0       	ldi	r25, 0x0B	; 11
    27e4:	0e 94 96 39 	call	0x732c	; 0x732c <_ZN5Print5printERK6String>

        // CONTATTO PISTOLA DIESEL

 		if (!testbit(PINA,1) && (mezzo.Carb == "D"))
    27e8:	01 99       	sbic	0x00, 1	; 0
    27ea:	08 c0       	rjmp	.+16     	; 0x27fc <loop+0x7e8>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    27ec:	69 ec       	ldi	r22, 0xC9	; 201
    27ee:	75 e0       	ldi	r23, 0x05	; 5
    27f0:	85 e8       	ldi	r24, 0x85	; 133
    27f2:	9b e0       	ldi	r25, 0x0B	; 11
    27f4:	0e 94 73 3e 	call	0x7ce6	; 0x7ce6 <_ZNK6String6equalsEPKc>
    27f8:	81 11       	cpse	r24, r1
    27fa:	2c c4       	rjmp	.+2136   	; 0x3054 <loop+0x1040>
          avanzaStato(TmaxInviodati);
        }

        // CONTATTO PISTOLA BENZINA

		if (!testbit(PINB,1) && (mezzo.Carb == "B"))
    27fc:	19 99       	sbic	0x03, 1	; 3
    27fe:	63 c2       	rjmp	.+1222   	; 0x2cc6 <loop+0xcb2>
    2800:	6e e3       	ldi	r22, 0x3E	; 62
    2802:	76 e0       	ldi	r23, 0x06	; 6
    2804:	85 e8       	ldi	r24, 0x85	; 133
    2806:	9b e0       	ldi	r25, 0x0B	; 11
    2808:	0e 94 73 3e 	call	0x7ce6	; 0x7ce6 <_ZNK6String6equalsEPKc>
    280c:	81 11       	cpse	r24, r1
    280e:	51 c4       	rjmp	.+2210   	; 0x30b2 <loop+0x109e>
    2810:	5a c2       	rjmp	.+1204   	; 0x2cc6 <loop+0xcb2>
        }        
      }
      break;
    case 8 :
      {
        righeDisplay[1] =  StatoAttuale;
    2812:	6c e4       	ldi	r22, 0x4C	; 76
    2814:	7b e0       	ldi	r23, 0x0B	; 11
    2816:	89 ef       	ldi	r24, 0xF9	; 249
    2818:	9a e0       	ldi	r25, 0x0A	; 10
    281a:	0e 94 c1 3c 	call	0x7982	; 0x7982 <_ZN6StringaSERKS_>
        righeDisplay[2] = "Invio........";
    281e:	62 e5       	ldi	r22, 0x52	; 82
    2820:	77 e0       	ldi	r23, 0x07	; 7
    2822:	8f ef       	ldi	r24, 0xFF	; 255
    2824:	9a e0       	ldi	r25, 0x0A	; 10
    2826:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
        righeDisplay[3] =  "";      
    282a:	6f ef       	ldi	r22, 0xFF	; 255
    282c:	71 e0       	ldi	r23, 0x01	; 1
    282e:	85 e0       	ldi	r24, 0x05	; 5
    2830:	9b e0       	ldi	r25, 0x0B	; 11
    2832:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
        displayLCD(righeDisplay, stato_procedura, 100);
    2836:	60 91 44 0b 	lds	r22, 0x0B44	; 0x800b44 <stato_procedura>
    283a:	70 91 45 0b 	lds	r23, 0x0B45	; 0x800b45 <stato_procedura+0x1>
    283e:	44 e6       	ldi	r20, 0x64	; 100
    2840:	50 e0       	ldi	r21, 0x00	; 0
    2842:	83 ef       	ldi	r24, 0xF3	; 243
    2844:	9a e0       	ldi	r25, 0x0A	; 10
    2846:	0e 94 4e 04 	call	0x89c	; 0x89c <_Z10displayLCDP6Stringii>
        Messaggio = "";
    284a:	6f ef       	ldi	r22, 0xFF	; 255
    284c:	71 e0       	ldi	r23, 0x01	; 1
    284e:	8b e0       	ldi	r24, 0x0B	; 11
    2850:	9b e0       	ldi	r25, 0x0B	; 11
    2852:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
    2856:	07 e1       	ldi	r16, 0x17	; 23
    2858:	1b e0       	ldi	r17, 0x0B	; 11
    285a:	2b e3       	ldi	r18, 0x3B	; 59
    285c:	e2 2e       	mov	r14, r18
    285e:	2b e0       	ldi	r18, 0x0B	; 11
    2860:	f2 2e       	mov	r15, r18
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
    2862:	b8 01       	movw	r22, r16
    2864:	ce 01       	movw	r24, r28
    2866:	01 96       	adiw	r24, 0x01	; 1
    2868:	0e 94 d6 3c 	call	0x79ac	; 0x79ac <_ZN6StringC1ERKS_>

        for (int k = 0; k < 6; k++)
          Messaggio.concat(RaccoltaDati[k] + ";");
    286c:	60 e6       	ldi	r22, 0x60	; 96
    286e:	77 e0       	ldi	r23, 0x07	; 7
    2870:	ce 01       	movw	r24, r28
    2872:	01 96       	adiw	r24, 0x01	; 1
    2874:	0e 94 50 3e 	call	0x7ca0	; 0x7ca0 <_ZplRK15StringSumHelperPKc>
    2878:	bc 01       	movw	r22, r24
    287a:	8b e0       	ldi	r24, 0x0B	; 11
    287c:	9b e0       	ldi	r25, 0x0B	; 11
    287e:	0e 94 19 3e 	call	0x7c32	; 0x7c32 <_ZN6String6concatERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2882:	ce 01       	movw	r24, r28
    2884:	01 96       	adiw	r24, 0x01	; 1
    2886:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
    288a:	0a 5f       	subi	r16, 0xFA	; 250
    288c:	1f 4f       	sbci	r17, 0xFF	; 255
        righeDisplay[2] = "Invio........";
        righeDisplay[3] =  "";      
        displayLCD(righeDisplay, stato_procedura, 100);
        Messaggio = "";

        for (int k = 0; k < 6; k++)
    288e:	e0 16       	cp	r14, r16
    2890:	f1 06       	cpc	r15, r17
    2892:	39 f7       	brne	.-50     	; 0x2862 <loop+0x84e>
          Messaggio.concat(RaccoltaDati[k] + ";");

        Messaggio.concat(CodSede);
    2894:	6a e4       	ldi	r22, 0x4A	; 74
    2896:	71 e0       	ldi	r23, 0x01	; 1
    2898:	8b e0       	ldi	r24, 0x0B	; 11
    289a:	9b e0       	ldi	r25, 0x0B	; 11
    289c:	0e 94 1f 3e 	call	0x7c3e	; 0x7c3e <_ZN6String6concatEPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    28a0:	62 e6       	ldi	r22, 0x62	; 98
    28a2:	77 e0       	ldi	r23, 0x07	; 7
    28a4:	ce 01       	movw	r24, r28
    28a6:	01 96       	adiw	r24, 0x01	; 1
    28a8:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
        Serial.println("Messaggio:" + Messaggio);
    28ac:	6b e0       	ldi	r22, 0x0B	; 11
    28ae:	7b e0       	ldi	r23, 0x0B	; 11
    28b0:	ce 01       	movw	r24, r28
    28b2:	01 96       	adiw	r24, 0x01	; 1
    28b4:	0e 94 3f 3e 	call	0x7c7e	; 0x7c7e <_ZplRK15StringSumHelperRK6String>
    28b8:	bc 01       	movw	r22, r24
    28ba:	88 e3       	ldi	r24, 0x38	; 56
    28bc:	9d e0       	ldi	r25, 0x0D	; 13
    28be:	0e 94 bf 39 	call	0x737e	; 0x737e <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    28c2:	ce 01       	movw	r24, r28
    28c4:	01 96       	adiw	r24, 0x01	; 1
    28c6:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
        // Messaggio = "DD92743A;28530;D;15.03;1234;000;SA10012";
        /*****************************************************************/
        disable_ETH();
    28ca:	0e 94 95 01 	call	0x32a	; 0x32a <_ZL11disable_ETHv>
    28ce:	8f e3       	ldi	r24, 0x3F	; 63
    28d0:	9f e1       	ldi	r25, 0x1F	; 31
    28d2:	01 97       	sbiw	r24, 0x01	; 1
    28d4:	f1 f7       	brne	.-4      	; 0x28d2 <loop+0x8be>
    28d6:	00 c0       	rjmp	.+0      	; 0x28d8 <loop+0x8c4>
    28d8:	00 00       	nop
        _delay_ms(2);
        enable_ETH();
    28da:	0e 94 93 01 	call	0x326	; 0x326 <_ZL10enable_ETHv>
    28de:	9f ef       	ldi	r25, 0xFF	; 255
    28e0:	29 e6       	ldi	r18, 0x69	; 105
    28e2:	38 e1       	ldi	r19, 0x18	; 24
    28e4:	91 50       	subi	r25, 0x01	; 1
    28e6:	20 40       	sbci	r18, 0x00	; 0
    28e8:	30 40       	sbci	r19, 0x00	; 0
    28ea:	e1 f7       	brne	.-8      	; 0x28e4 <loop+0x8d0>
    28ec:	00 c0       	rjmp	.+0      	; 0x28ee <loop+0x8da>
    28ee:	00 00       	nop
        /*****************************************************************/
        _delay_ms(500); // prima era _delay_ms(1000);
		lcd.noBacklight();
    28f0:	83 e6       	ldi	r24, 0x63	; 99
    28f2:	9b e0       	ldi	r25, 0x0B	; 11
    28f4:	0e 94 04 31 	call	0x6208	; 0x6208 <_ZN3LCD11noBacklightEv>
        avanzaStato(30); 
    28f8:	6e e1       	ldi	r22, 0x1E	; 30
    28fa:	70 e0       	ldi	r23, 0x00	; 0
    28fc:	80 e0       	ldi	r24, 0x00	; 0
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	04 c4       	rjmp	.+2056   	; 0x310a <loop+0x10f6>
      }
      break;
    case 9:
      {        
        //if (BIT_IS_CLEAR(PORTC, 4))
		if (bitislow(PORTC,CS_W5500))
    2902:	44 99       	sbic	0x08, 4	; 8
    2904:	e0 c1       	rjmp	.+960    	; 0x2cc6 <loop+0xcb2>
        {
          displayLCD(righeDisplay, stato_procedura, 10);
    2906:	4a e0       	ldi	r20, 0x0A	; 10
    2908:	50 e0       	ldi	r21, 0x00	; 0
    290a:	69 e0       	ldi	r22, 0x09	; 9
    290c:	70 e0       	ldi	r23, 0x00	; 0
    290e:	83 ef       	ldi	r24, 0xF3	; 243
    2910:	9a e0       	ldi	r25, 0x0A	; 10
    2912:	0e 94 4e 04 	call	0x89c	; 0x89c <_Z10displayLCDP6Stringii>
          Messaggio = "";
    2916:	6f ef       	ldi	r22, 0xFF	; 255
    2918:	71 e0       	ldi	r23, 0x01	; 1
    291a:	8b e0       	ldi	r24, 0x0B	; 11
    291c:	9b e0       	ldi	r25, 0x0B	; 11
    291e:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
    2922:	07 e1       	ldi	r16, 0x17	; 23
    2924:	1b e0       	ldi	r17, 0x0B	; 11
    2926:	9b e3       	ldi	r25, 0x3B	; 59
    2928:	e9 2e       	mov	r14, r25
    292a:	9b e0       	ldi	r25, 0x0B	; 11
    292c:	f9 2e       	mov	r15, r25
{
public:
	StringSumHelper(const String &s) : String(s) {}
    292e:	b8 01       	movw	r22, r16
    2930:	ce 01       	movw	r24, r28
    2932:	01 96       	adiw	r24, 0x01	; 1
    2934:	0e 94 d6 3c 	call	0x79ac	; 0x79ac <_ZN6StringC1ERKS_>

          for (int k = 0; k < 6; k++)
            Messaggio.concat(RaccoltaDati[k] + ";");
    2938:	60 e6       	ldi	r22, 0x60	; 96
    293a:	77 e0       	ldi	r23, 0x07	; 7
    293c:	ce 01       	movw	r24, r28
    293e:	01 96       	adiw	r24, 0x01	; 1
    2940:	0e 94 50 3e 	call	0x7ca0	; 0x7ca0 <_ZplRK15StringSumHelperPKc>
    2944:	bc 01       	movw	r22, r24
    2946:	8b e0       	ldi	r24, 0x0B	; 11
    2948:	9b e0       	ldi	r25, 0x0B	; 11
    294a:	0e 94 19 3e 	call	0x7c32	; 0x7c32 <_ZN6String6concatERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    294e:	ce 01       	movw	r24, r28
    2950:	01 96       	adiw	r24, 0x01	; 1
    2952:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
    2956:	0a 5f       	subi	r16, 0xFA	; 250
    2958:	1f 4f       	sbci	r17, 0xFF	; 255
		if (bitislow(PORTC,CS_W5500))
        {
          displayLCD(righeDisplay, stato_procedura, 10);
          Messaggio = "";

          for (int k = 0; k < 6; k++)
    295a:	e0 16       	cp	r14, r16
    295c:	f1 06       	cpc	r15, r17
    295e:	39 f7       	brne	.-50     	; 0x292e <loop+0x91a>
            Messaggio.concat(RaccoltaDati[k] + ";");

          Messaggio.concat(CodSede);
    2960:	6a e4       	ldi	r22, 0x4A	; 74
    2962:	71 e0       	ldi	r23, 0x01	; 1
    2964:	8b e0       	ldi	r24, 0x0B	; 11
    2966:	9b e0       	ldi	r25, 0x0B	; 11
    2968:	0e 94 1f 3e 	call	0x7c3e	; 0x7c3e <_ZN6String6concatEPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    296c:	62 e6       	ldi	r22, 0x62	; 98
    296e:	77 e0       	ldi	r23, 0x07	; 7
    2970:	ce 01       	movw	r24, r28
    2972:	01 96       	adiw	r24, 0x01	; 1
    2974:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
          Serial.println("Messaggio:" + Messaggio);
    2978:	6b e0       	ldi	r22, 0x0B	; 11
    297a:	7b e0       	ldi	r23, 0x0B	; 11
    297c:	ce 01       	movw	r24, r28
    297e:	01 96       	adiw	r24, 0x01	; 1
    2980:	0e 94 3f 3e 	call	0x7c7e	; 0x7c7e <_ZplRK15StringSumHelperRK6String>
    2984:	bc 01       	movw	r22, r24
    2986:	88 e3       	ldi	r24, 0x38	; 56
    2988:	9d e0       	ldi	r25, 0x0D	; 13
    298a:	0e 94 bf 39 	call	0x737e	; 0x737e <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    298e:	ce 01       	movw	r24, r28
    2990:	01 96       	adiw	r24, 0x01	; 1
    2992:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
    2996:	8f ef       	ldi	r24, 0xFF	; 255
    2998:	93 ec       	ldi	r25, 0xC3	; 195
    299a:	29 e0       	ldi	r18, 0x09	; 9
    299c:	81 50       	subi	r24, 0x01	; 1
    299e:	90 40       	sbci	r25, 0x00	; 0
    29a0:	20 40       	sbci	r18, 0x00	; 0
    29a2:	e1 f7       	brne	.-8      	; 0x299c <loop+0x988>
    29a4:	00 c0       	rjmp	.+0      	; 0x29a6 <loop+0x992>

          // Messaggio = "DD92743A;28530;D;15.03;1234;000;SA10012";

          _delay_ms(200); // prima era _delay_ms(1000);

          if (PostErogazioneGAC(80, serverREST, clientLOCAL, Messaggio))
    29a6:	00 00       	nop
    29a8:	6b e0       	ldi	r22, 0x0B	; 11
    29aa:	7b e0       	ldi	r23, 0x0B	; 11
    29ac:	ce 01       	movw	r24, r28
    29ae:	0f 96       	adiw	r24, 0x0f	; 15
    29b0:	0e 94 d6 3c 	call	0x79ac	; 0x79ac <_ZN6StringC1ERKS_>
    29b4:	6e ec       	ldi	r22, 0xCE	; 206
    29b6:	7a e0       	ldi	r23, 0x0A	; 10
    29b8:	ce 01       	movw	r24, r28
    29ba:	01 96       	adiw	r24, 0x01	; 1
    29bc:	07 db       	rcall	.-2546   	; 0x1fcc <_ZN14EthernetClientC1ERKS_>
    29be:	9e 01       	movw	r18, r28
    29c0:	21 5f       	subi	r18, 0xF1	; 241
    29c2:	3f 4f       	sbci	r19, 0xFF	; 255
    29c4:	ae 01       	movw	r20, r28
    29c6:	4f 5f       	subi	r20, 0xFF	; 255
    29c8:	5f 4f       	sbci	r21, 0xFF	; 255
    29ca:	68 e3       	ldi	r22, 0x38	; 56
    29cc:	71 e0       	ldi	r23, 0x01	; 1
    29ce:	80 e5       	ldi	r24, 0x50	; 80
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	0e 94 88 08 	call	0x1110	; 0x1110 <_Z17PostErogazioneGACiPc14EthernetClient6String>
    29d6:	18 2f       	mov	r17, r24
    29d8:	ce 01       	movw	r24, r28
    29da:	0f 96       	adiw	r24, 0x0f	; 15
    29dc:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
    29e0:	11 23       	and	r17, r17
    29e2:	21 f1       	breq	.+72     	; 0x2a2c <loop+0xa18>
          {
            disable_ETH();
    29e4:	0e 94 95 01 	call	0x32a	; 0x32a <_ZL11disable_ETHv>
    29e8:	3f ef       	ldi	r19, 0xFF	; 255
    29ea:	83 ec       	ldi	r24, 0xC3	; 195
    29ec:	99 e0       	ldi	r25, 0x09	; 9
    29ee:	31 50       	subi	r19, 0x01	; 1
    29f0:	80 40       	sbci	r24, 0x00	; 0
    29f2:	90 40       	sbci	r25, 0x00	; 0
    29f4:	e1 f7       	brne	.-8      	; 0x29ee <loop+0x9da>
    29f6:	00 c0       	rjmp	.+0      	; 0x29f8 <loop+0x9e4>
    29f8:	00 00       	nop
            _delay_ms(200);
            Serial.println("PostErogazioneGAC - OK" );   
    29fa:	6d e6       	ldi	r22, 0x6D	; 109
    29fc:	77 e0       	ldi	r23, 0x07	; 7
    29fe:	88 e3       	ldi	r24, 0x38	; 56
    2a00:	9d e0       	ldi	r25, 0x0D	; 13
    2a02:	0e 94 cf 39 	call	0x739e	; 0x739e <_ZN5Print7printlnEPKc>
    2a06:	8f e3       	ldi	r24, 0x3F	; 63
    2a08:	9f e1       	ldi	r25, 0x1F	; 31
    2a0a:	01 97       	sbiw	r24, 0x01	; 1
    2a0c:	f1 f7       	brne	.-4      	; 0x2a0a <loop+0x9f6>
    2a0e:	00 c0       	rjmp	.+0      	; 0x2a10 <loop+0x9fc>
    2a10:	00 00       	nop
            _delay_ms(2);
            enable_ETH();
    2a12:	0e 94 93 01 	call	0x326	; 0x326 <_ZL10enable_ETHv>
    2a16:	8f e3       	ldi	r24, 0x3F	; 63
    2a18:	9f e1       	ldi	r25, 0x1F	; 31
    2a1a:	01 97       	sbiw	r24, 0x01	; 1
    2a1c:	f1 f7       	brne	.-4      	; 0x2a1a <loop+0xa06>
    2a1e:	00 c0       	rjmp	.+0      	; 0x2a20 <loop+0xa0c>
            _delay_ms(2);
            avanzaStato(20);                                
    2a20:	00 00       	nop
    2a22:	64 e1       	ldi	r22, 0x14	; 20
    2a24:	70 e0       	ldi	r23, 0x00	; 0
    2a26:	80 e0       	ldi	r24, 0x00	; 0
    2a28:	90 e0       	ldi	r25, 0x00	; 0
          }
          else
          {			 
             disable_ETH();   
    2a2a:	6f c3       	rjmp	.+1758   	; 0x310a <loop+0x10f6>
    2a2c:	0e 94 95 01 	call	0x32a	; 0x32a <_ZL11disable_ETHv>
             String ultima_indirizzo  = read_eeprom_string(4,1035);
    2a30:	4b e0       	ldi	r20, 0x0B	; 11
    2a32:	54 e0       	ldi	r21, 0x04	; 4
    2a34:	64 e0       	ldi	r22, 0x04	; 4
    2a36:	70 e0       	ldi	r23, 0x00	; 0
    2a38:	ce 01       	movw	r24, r28
    2a3a:	4f 96       	adiw	r24, 0x1f	; 31
    2a3c:	00 d9       	rcall	.-3584   	; 0x1c3e <_Z18read_eeprom_stringii>
             int indirizzo = ultima_indirizzo.toInt();
    2a3e:	ce 01       	movw	r24, r28
    2a40:	4f 96       	adiw	r24, 0x1f	; 31
    2a42:	0e 94 5b 3f 	call	0x7eb6	; 0x7eb6 <_ZNK6String5toIntEv>
    2a46:	6b 01       	movw	r12, r22
            // bool write_eeprom_string(String erog,int lunBuffer,int start_ind)
            if (write_eeprom_string(Messaggio,Messaggio.length(),indirizzo))
    2a48:	7c 01       	movw	r14, r24
    2a4a:	00 91 0f 0b 	lds	r16, 0x0B0F	; 0x800b0f <Messaggio+0x4>
    2a4e:	10 91 10 0b 	lds	r17, 0x0B10	; 0x800b10 <Messaggio+0x5>
    2a52:	6b e0       	ldi	r22, 0x0B	; 11
    2a54:	7b e0       	ldi	r23, 0x0B	; 11
    2a56:	ce 01       	movw	r24, r28
    2a58:	01 96       	adiw	r24, 0x01	; 1
    2a5a:	0e 94 d6 3c 	call	0x79ac	; 0x79ac <_ZN6StringC1ERKS_>
    2a5e:	a6 01       	movw	r20, r12
    2a60:	b8 01       	movw	r22, r16
    2a62:	ce 01       	movw	r24, r28
    2a64:	01 96       	adiw	r24, 0x01	; 1
    2a66:	a0 d9       	rcall	.-3264   	; 0x1da8 <_Z19write_eeprom_string6Stringii>
    2a68:	18 2f       	mov	r17, r24
    2a6a:	ce 01       	movw	r24, r28
    2a6c:	01 96       	adiw	r24, 0x01	; 1
    2a6e:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
    2a72:	11 23       	and	r17, r17
    2a74:	09 f4       	brne	.+2      	; 0x2a78 <loop+0xa64>
    2a76:	21 c1       	rjmp	.+578    	; 0x2cba <loop+0xca6>
              {
                Serial.println("WRITE OK AT address :" + String(indirizzo));
    2a78:	4a e0       	ldi	r20, 0x0A	; 10
    2a7a:	b6 01       	movw	r22, r12
    2a7c:	ce 01       	movw	r24, r28
    2a7e:	0f 96       	adiw	r24, 0x0f	; 15
    2a80:	0e 94 40 3d 	call	0x7a80	; 0x7a80 <_ZN6StringC1Eih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2a84:	64 e8       	ldi	r22, 0x84	; 132
    2a86:	77 e0       	ldi	r23, 0x07	; 7
    2a88:	ce 01       	movw	r24, r28
    2a8a:	01 96       	adiw	r24, 0x01	; 1
    2a8c:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
    2a90:	be 01       	movw	r22, r28
    2a92:	61 5f       	subi	r22, 0xF1	; 241
    2a94:	7f 4f       	sbci	r23, 0xFF	; 255
    2a96:	ce 01       	movw	r24, r28
    2a98:	01 96       	adiw	r24, 0x01	; 1
    2a9a:	0e 94 3f 3e 	call	0x7c7e	; 0x7c7e <_ZplRK15StringSumHelperRK6String>
    2a9e:	bc 01       	movw	r22, r24
    2aa0:	88 e3       	ldi	r24, 0x38	; 56
    2aa2:	9d e0       	ldi	r25, 0x0D	; 13
    2aa4:	0e 94 bf 39 	call	0x737e	; 0x737e <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2aa8:	ce 01       	movw	r24, r28
    2aaa:	01 96       	adiw	r24, 0x01	; 1
    2aac:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
    2ab0:	ce 01       	movw	r24, r28
    2ab2:	0f 96       	adiw	r24, 0x0f	; 15
    2ab4:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
                indirizzo = indirizzo + 50;  
    2ab8:	92 e3       	ldi	r25, 0x32	; 50
    2aba:	c9 0e       	add	r12, r25
    2abc:	d1 1c       	adc	r13, r1
                if (indirizzo > 3000) {indirizzo = 2000; }   
    2abe:	29 eb       	ldi	r18, 0xB9	; 185
    2ac0:	c2 16       	cp	r12, r18
    2ac2:	2b e0       	ldi	r18, 0x0B	; 11
    2ac4:	d2 06       	cpc	r13, r18
    2ac6:	24 f0       	brlt	.+8      	; 0x2ad0 <loop+0xabc>
    2ac8:	80 ed       	ldi	r24, 0xD0	; 208
    2aca:	c8 2e       	mov	r12, r24
    2acc:	87 e0       	ldi	r24, 0x07	; 7
    2ace:	d8 2e       	mov	r13, r24
                String update_ultima_indirizzo = String(indirizzo);
    2ad0:	4a e0       	ldi	r20, 0x0A	; 10
    2ad2:	b6 01       	movw	r22, r12
    2ad4:	ce 01       	movw	r24, r28
    2ad6:	47 96       	adiw	r24, 0x17	; 23
    2ad8:	0e 94 40 3d 	call	0x7a80	; 0x7a80 <_ZN6StringC1Eih>
                if (write_eeprom_string(update_ultima_indirizzo,update_ultima_indirizzo.length(),1035))
    2adc:	0b 8d       	ldd	r16, Y+27	; 0x1b
    2ade:	1c 8d       	ldd	r17, Y+28	; 0x1c
    2ae0:	be 01       	movw	r22, r28
    2ae2:	69 5e       	subi	r22, 0xE9	; 233
    2ae4:	7f 4f       	sbci	r23, 0xFF	; 255
    2ae6:	ce 01       	movw	r24, r28
    2ae8:	01 96       	adiw	r24, 0x01	; 1
    2aea:	0e 94 d6 3c 	call	0x79ac	; 0x79ac <_ZN6StringC1ERKS_>
    2aee:	4b e0       	ldi	r20, 0x0B	; 11
    2af0:	54 e0       	ldi	r21, 0x04	; 4
    2af2:	b8 01       	movw	r22, r16
    2af4:	ce 01       	movw	r24, r28
    2af6:	01 96       	adiw	r24, 0x01	; 1
    2af8:	57 d9       	rcall	.-3410   	; 0x1da8 <_Z19write_eeprom_string6Stringii>
    2afa:	18 2f       	mov	r17, r24
    2afc:	ce 01       	movw	r24, r28
    2afe:	01 96       	adiw	r24, 0x01	; 1
    2b00:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
    2b04:	11 23       	and	r17, r17
    2b06:	01 f1       	breq	.+64     	; 0x2b48 <loop+0xb34>
                  Serial.println("UPDATE OK address :" + String(indirizzo));  
    2b08:	4a e0       	ldi	r20, 0x0A	; 10
    2b0a:	b6 01       	movw	r22, r12
    2b0c:	ce 01       	movw	r24, r28
    2b0e:	0f 96       	adiw	r24, 0x0f	; 15
    2b10:	0e 94 40 3d 	call	0x7a80	; 0x7a80 <_ZN6StringC1Eih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2b14:	6a e9       	ldi	r22, 0x9A	; 154
    2b16:	77 e0       	ldi	r23, 0x07	; 7
    2b18:	ce 01       	movw	r24, r28
    2b1a:	01 96       	adiw	r24, 0x01	; 1
    2b1c:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
    2b20:	be 01       	movw	r22, r28
    2b22:	61 5f       	subi	r22, 0xF1	; 241
    2b24:	7f 4f       	sbci	r23, 0xFF	; 255
    2b26:	ce 01       	movw	r24, r28
    2b28:	01 96       	adiw	r24, 0x01	; 1
    2b2a:	0e 94 3f 3e 	call	0x7c7e	; 0x7c7e <_ZplRK15StringSumHelperRK6String>
    2b2e:	bc 01       	movw	r22, r24
    2b30:	88 e3       	ldi	r24, 0x38	; 56
    2b32:	9d e0       	ldi	r25, 0x0D	; 13
    2b34:	0e 94 bf 39 	call	0x737e	; 0x737e <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2b38:	ce 01       	movw	r24, r28
    2b3a:	01 96       	adiw	r24, 0x01	; 1
    2b3c:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
    2b40:	ce 01       	movw	r24, r28
    2b42:	0f 96       	adiw	r24, 0x0f	; 15
    2b44:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
            if (write_eeprom_string(Messaggio,Messaggio.length(),indirizzo))
              {
                Serial.println("WRITE OK AT address :" + String(indirizzo));
                indirizzo = indirizzo + 50;  
                if (indirizzo > 3000) {indirizzo = 2000; }   
                String update_ultima_indirizzo = String(indirizzo);
    2b48:	ce 01       	movw	r24, r28
    2b4a:	47 96       	adiw	r24, 0x17	; 23
    2b4c:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
    2b50:	b4 c0       	rjmp	.+360    	; 0x2cba <loop+0xca6>
      }
      break;
    case 10:
      {
		 
			 Serial.println("Tento la ritrasmisssione di erogazioni salvate non trasmesse" );             
    2b52:	6e ea       	ldi	r22, 0xAE	; 174
    2b54:	77 e0       	ldi	r23, 0x07	; 7
    2b56:	88 e3       	ldi	r24, 0x38	; 56
    2b58:	9d e0       	ldi	r25, 0x0D	; 13
    2b5a:	0e 94 cf 39 	call	0x739e	; 0x739e <_ZN5Print7printlnEPKc>
			 Buzzer(1,100);
    2b5e:	44 e6       	ldi	r20, 0x64	; 100
    2b60:	50 e0       	ldi	r21, 0x00	; 0
    2b62:	60 e0       	ldi	r22, 0x00	; 0
    2b64:	70 e0       	ldi	r23, 0x00	; 0
    2b66:	81 e0       	ldi	r24, 0x01	; 1
    2b68:	0e 94 4a 03 	call	0x694	; 0x694 <_Z6Buzzerhm>
    2b6c:	3f ef       	ldi	r19, 0xFF	; 255
    2b6e:	81 ee       	ldi	r24, 0xE1	; 225
    2b70:	94 e0       	ldi	r25, 0x04	; 4
    2b72:	31 50       	subi	r19, 0x01	; 1
    2b74:	80 40       	sbci	r24, 0x00	; 0
    2b76:	90 40       	sbci	r25, 0x00	; 0
    2b78:	e1 f7       	brne	.-8      	; 0x2b72 <loop+0xb5e>
    2b7a:	00 c0       	rjmp	.+0      	; 0x2b7c <loop+0xb68>
    2b7c:	00 00       	nop
			 _delay_ms(100);
			 Buzzer(1,100);
    2b7e:	44 e6       	ldi	r20, 0x64	; 100
    2b80:	50 e0       	ldi	r21, 0x00	; 0
    2b82:	60 e0       	ldi	r22, 0x00	; 0
    2b84:	70 e0       	ldi	r23, 0x00	; 0
    2b86:	81 e0       	ldi	r24, 0x01	; 1
    2b88:	0e 94 4a 03 	call	0x694	; 0x694 <_Z6Buzzerhm>
    2b8c:	2f ef       	ldi	r18, 0xFF	; 255
    2b8e:	31 ee       	ldi	r19, 0xE1	; 225
    2b90:	84 e0       	ldi	r24, 0x04	; 4
    2b92:	21 50       	subi	r18, 0x01	; 1
    2b94:	30 40       	sbci	r19, 0x00	; 0
    2b96:	80 40       	sbci	r24, 0x00	; 0
    2b98:	e1 f7       	brne	.-8      	; 0x2b92 <loop+0xb7e>
    2b9a:	00 c0       	rjmp	.+0      	; 0x2b9c <loop+0xb88>
    2b9c:	00 00       	nop
			 _delay_ms(100);
			 Buzzer(1,100);
    2b9e:	44 e6       	ldi	r20, 0x64	; 100
    2ba0:	50 e0       	ldi	r21, 0x00	; 0
    2ba2:	60 e0       	ldi	r22, 0x00	; 0
    2ba4:	70 e0       	ldi	r23, 0x00	; 0
    2ba6:	81 e0       	ldi	r24, 0x01	; 1
    2ba8:	0e 94 4a 03 	call	0x694	; 0x694 <_Z6Buzzerhm>
    2bac:	9f ef       	ldi	r25, 0xFF	; 255
    2bae:	21 ee       	ldi	r18, 0xE1	; 225
    2bb0:	34 e0       	ldi	r19, 0x04	; 4
    2bb2:	91 50       	subi	r25, 0x01	; 1
    2bb4:	20 40       	sbci	r18, 0x00	; 0
    2bb6:	30 40       	sbci	r19, 0x00	; 0
    2bb8:	e1 f7       	brne	.-8      	; 0x2bb2 <loop+0xb9e>
    2bba:	00 c0       	rjmp	.+0      	; 0x2bbc <loop+0xba8>
			 _delay_ms(100);
			 
 			 disabilitaPulser('D');
    2bbc:	00 00       	nop
    2bbe:	84 e4       	ldi	r24, 0x44	; 68
    2bc0:	0e 94 29 0a 	call	0x1452	; 0x1452 <_Z16disabilitaPulserc>
 			 disabilitaPulser('B');
    2bc4:	82 e4       	ldi	r24, 0x42	; 66
    2bc6:	0e 94 29 0a 	call	0x1452	; 0x1452 <_Z16disabilitaPulserc>

			 WDT_off();
    2bca:	0e 94 10 03 	call	0x620	; 0x620 <_Z7WDT_offv>
			 
             String str_indirizzo  = read_eeprom_string(4,1035);
    2bce:	4b e0       	ldi	r20, 0x0B	; 11
    2bd0:	54 e0       	ldi	r21, 0x04	; 4
    2bd2:	64 e0       	ldi	r22, 0x04	; 4
    2bd4:	70 e0       	ldi	r23, 0x00	; 0
    2bd6:	ce 01       	movw	r24, r28
    2bd8:	4f 96       	adiw	r24, 0x1f	; 31
             int ultimo_indirizzo = (str_indirizzo.toInt());
    2bda:	31 d8       	rcall	.-3998   	; 0x1c3e <_Z18read_eeprom_stringii>
    2bdc:	ce 01       	movw	r24, r28
    2bde:	4f 96       	adiw	r24, 0x1f	; 31
    2be0:	0e 94 5b 3f 	call	0x7eb6	; 0x7eb6 <_ZNK6String5toIntEv>
             int start = 2000;
    2be4:	7b 01       	movw	r14, r22
    2be6:	00 ed       	ldi	r16, 0xD0	; 208
             bool tx = false;
             
             while ((start < ultimo_indirizzo))
    2be8:	17 e0       	ldi	r17, 0x07	; 7
    2bea:	0e 15       	cp	r16, r14
    2bec:	1f 05       	cpc	r17, r15
    2bee:	0c f0       	brlt	.+2      	; 0x2bf2 <loop+0xbde>
             {
               String e  = read_eeprom_string(50,start);
    2bf0:	4a c0       	rjmp	.+148    	; 0x2c86 <loop+0xc72>
    2bf2:	a8 01       	movw	r20, r16
    2bf4:	62 e3       	ldi	r22, 0x32	; 50
    2bf6:	70 e0       	ldi	r23, 0x00	; 0
    2bf8:	ce 01       	movw	r24, r28
    2bfa:	47 96       	adiw	r24, 0x17	; 23
    2bfc:	20 d8       	rcall	.-4032   	; 0x1c3e <_Z18read_eeprom_stringii>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2bfe:	6b ee       	ldi	r22, 0xEB	; 235
    2c00:	77 e0       	ldi	r23, 0x07	; 7
    2c02:	ce 01       	movw	r24, r28
    2c04:	01 96       	adiw	r24, 0x01	; 1
    2c06:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
               Serial.println("DA TRASMETTERE: " + e);
    2c0a:	be 01       	movw	r22, r28
    2c0c:	69 5e       	subi	r22, 0xE9	; 233
    2c0e:	7f 4f       	sbci	r23, 0xFF	; 255
    2c10:	ce 01       	movw	r24, r28
    2c12:	01 96       	adiw	r24, 0x01	; 1
    2c14:	0e 94 3f 3e 	call	0x7c7e	; 0x7c7e <_ZplRK15StringSumHelperRK6String>
    2c18:	bc 01       	movw	r22, r24
    2c1a:	88 e3       	ldi	r24, 0x38	; 56
    2c1c:	9d e0       	ldi	r25, 0x0D	; 13
    2c1e:	0e 94 bf 39 	call	0x737e	; 0x737e <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2c22:	ce 01       	movw	r24, r28
    2c24:	01 96       	adiw	r24, 0x01	; 1
    2c26:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
               tx = PostErogazioneGAC(80, serverREST, clientLOCAL, e);
    2c2a:	be 01       	movw	r22, r28
    2c2c:	69 5e       	subi	r22, 0xE9	; 233
    2c2e:	7f 4f       	sbci	r23, 0xFF	; 255
    2c30:	ce 01       	movw	r24, r28
    2c32:	0f 96       	adiw	r24, 0x0f	; 15
    2c34:	0e 94 d6 3c 	call	0x79ac	; 0x79ac <_ZN6StringC1ERKS_>
    2c38:	6e ec       	ldi	r22, 0xCE	; 206
    2c3a:	7a e0       	ldi	r23, 0x0A	; 10
    2c3c:	ce 01       	movw	r24, r28
    2c3e:	01 96       	adiw	r24, 0x01	; 1
    2c40:	c5 d9       	rcall	.-3190   	; 0x1fcc <_ZN14EthernetClientC1ERKS_>
    2c42:	9e 01       	movw	r18, r28
    2c44:	21 5f       	subi	r18, 0xF1	; 241
    2c46:	3f 4f       	sbci	r19, 0xFF	; 255
    2c48:	ae 01       	movw	r20, r28
    2c4a:	4f 5f       	subi	r20, 0xFF	; 255
    2c4c:	5f 4f       	sbci	r21, 0xFF	; 255
    2c4e:	68 e3       	ldi	r22, 0x38	; 56
    2c50:	71 e0       	ldi	r23, 0x01	; 1
    2c52:	80 e5       	ldi	r24, 0x50	; 80
    2c54:	90 e0       	ldi	r25, 0x00	; 0
    2c56:	0e 94 88 08 	call	0x1110	; 0x1110 <_Z17PostErogazioneGACiPc14EthernetClient6String>
    2c5a:	ce 01       	movw	r24, r28
    2c5c:	0f 96       	adiw	r24, 0x0f	; 15
    2c5e:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
               start = start + 50;    
    2c62:	0e 5c       	subi	r16, 0xCE	; 206
    2c64:	1f 4f       	sbci	r17, 0xFF	; 255
    2c66:	8f ef       	ldi	r24, 0xFF	; 255
    2c68:	93 ec       	ldi	r25, 0xC3	; 195
    2c6a:	29 e0       	ldi	r18, 0x09	; 9
    2c6c:	81 50       	subi	r24, 0x01	; 1
    2c6e:	90 40       	sbci	r25, 0x00	; 0
    2c70:	20 40       	sbci	r18, 0x00	; 0
    2c72:	e1 f7       	brne	.-8      	; 0x2c6c <loop+0xc58>
    2c74:	00 c0       	rjmp	.+0      	; 0x2c76 <loop+0xc62>
    2c76:	00 00       	nop
                _delay_ms(200); // Attendo un pochino tra un atrasmissione e l'altra           
               printLine();                
    2c78:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
             int start = 2000;
             bool tx = false;
             
             while ((start < ultimo_indirizzo))
             {
               String e  = read_eeprom_string(50,start);
    2c7c:	ce 01       	movw	r24, r28
    2c7e:	47 96       	adiw	r24, 0x17	; 23
    2c80:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
               start = start + 50;    
                _delay_ms(200); // Attendo un pochino tra un atrasmissione e l'altra           
               printLine();                
             }
             
             if (start >  2000){
    2c84:	b2 cf       	rjmp	.-156    	; 0x2bea <loop+0xbd6>
    2c86:	01 3d       	cpi	r16, 0xD1	; 209
    2c88:	37 e0       	ldi	r19, 0x07	; 7
    2c8a:	13 07       	cpc	r17, r19
                write_eeprom_string("2000",4,1035);
    2c8c:	b4 f0       	brlt	.+44     	; 0x2cba <loop+0xca6>
    2c8e:	6c ef       	ldi	r22, 0xFC	; 252
    2c90:	77 e0       	ldi	r23, 0x07	; 7
    2c92:	ce 01       	movw	r24, r28
    2c94:	01 96       	adiw	r24, 0x01	; 1
    2c96:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
    2c9a:	4b e0       	ldi	r20, 0x0B	; 11
    2c9c:	54 e0       	ldi	r21, 0x04	; 4
    2c9e:	64 e0       	ldi	r22, 0x04	; 4
    2ca0:	70 e0       	ldi	r23, 0x00	; 0
    2ca2:	ce 01       	movw	r24, r28
    2ca4:	01 96       	adiw	r24, 0x01	; 1
    2ca6:	80 d8       	rcall	.-3840   	; 0x1da8 <_Z19write_eeprom_string6Stringii>
    2ca8:	ce 01       	movw	r24, r28
    2caa:	01 96       	adiw	r24, 0x01	; 1
    2cac:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
                clearEEPROM(2000,start);
    2cb0:	b8 01       	movw	r22, r16
    2cb2:	80 ed       	ldi	r24, 0xD0	; 208
    2cb4:	97 e0       	ldi	r25, 0x07	; 7
    2cb6:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <_Z11clearEEPROMii>
              }              
        Azzera();
    2cba:	0e 94 c5 0a 	call	0x158a	; 0x158a <_Z6Azzerav>
 			 disabilitaPulser('D');
 			 disabilitaPulser('B');

			 WDT_off();
			 
             String str_indirizzo  = read_eeprom_string(4,1035);
    2cbe:	ce 01       	movw	r24, r28
    2cc0:	4f 96       	adiw	r24, 0x1f	; 31
    2cc2:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
      {
      }
      break;
  }
  
  temperatura = DS3231M.temperature();
    2cc6:	85 eb       	ldi	r24, 0xB5	; 181
    2cc8:	9a e0       	ldi	r25, 0x0A	; 10
    2cca:	0e 94 2b 24 	call	0x4856	; 0x4856 <_ZN13DS3231M_Class11temperatureEv>
    2cce:	60 93 9f 0a 	sts	0x0A9F, r22	; 0x800a9f <temperatura>
    2cd2:	70 93 a0 0a 	sts	0x0AA0, r23	; 0x800aa0 <temperatura+0x1>
    2cd6:	80 93 a1 0a 	sts	0x0AA1, r24	; 0x800aa1 <temperatura+0x2>
    2cda:	90 93 a2 0a 	sts	0x0AA2, r25	; 0x800aa2 <temperatura+0x3>
  nowTimer = DS3231M.now();
    2cde:	65 eb       	ldi	r22, 0xB5	; 181
    2ce0:	7a e0       	ldi	r23, 0x0A	; 10
    2ce2:	ce 01       	movw	r24, r28
    2ce4:	01 96       	adiw	r24, 0x01	; 1
    2ce6:	0e 94 56 24 	call	0x48ac	; 0x48ac <_ZN13DS3231M_Class3nowEv>
    2cea:	86 e0       	ldi	r24, 0x06	; 6
    2cec:	fe 01       	movw	r30, r28
    2cee:	31 96       	adiw	r30, 0x01	; 1
    2cf0:	a3 ea       	ldi	r26, 0xA3	; 163
    2cf2:	ba e0       	ldi	r27, 0x0A	; 10
    2cf4:	01 90       	ld	r0, Z+
    2cf6:	0d 92       	st	X+, r0
    2cf8:	8a 95       	dec	r24
    2cfa:	e1 f7       	brne	.-8      	; 0x2cf4 <loop+0xce0>
  secs = nowTimer.secondstime();  
    2cfc:	83 ea       	ldi	r24, 0xA3	; 163
    2cfe:	9a e0       	ldi	r25, 0x0A	; 10
    2d00:	0e 94 7c 23 	call	0x46f8	; 0x46f8 <_ZNK8DateTime11secondstimeEv>
    2d04:	60 93 b1 0a 	sts	0x0AB1, r22	; 0x800ab1 <secs>
    2d08:	70 93 b2 0a 	sts	0x0AB2, r23	; 0x800ab2 <secs+0x1>
    2d0c:	80 93 b3 0a 	sts	0x0AB3, r24	; 0x800ab3 <secs+0x2>
    2d10:	90 93 b4 0a 	sts	0x0AB4, r25	; 0x800ab4 <secs+0x3>
  if (((UltimoPassaggioStato + Timer - secs) <= 1) && (stato_procedura != stato_erogazione)) Azzera();
    2d14:	00 91 ad 0a 	lds	r16, 0x0AAD	; 0x800aad <UltimoPassaggioStato>
    2d18:	10 91 ae 0a 	lds	r17, 0x0AAE	; 0x800aae <UltimoPassaggioStato+0x1>
    2d1c:	20 91 af 0a 	lds	r18, 0x0AAF	; 0x800aaf <UltimoPassaggioStato+0x2>
    2d20:	30 91 b0 0a 	lds	r19, 0x0AB0	; 0x800ab0 <UltimoPassaggioStato+0x3>
    2d24:	c0 90 a9 0a 	lds	r12, 0x0AA9	; 0x800aa9 <Timer>
    2d28:	d0 90 aa 0a 	lds	r13, 0x0AAA	; 0x800aaa <Timer+0x1>
    2d2c:	e0 90 ab 0a 	lds	r14, 0x0AAB	; 0x800aab <Timer+0x2>
    2d30:	f0 90 ac 0a 	lds	r15, 0x0AAC	; 0x800aac <Timer+0x3>
    2d34:	0c 0d       	add	r16, r12
    2d36:	1d 1d       	adc	r17, r13
    2d38:	2e 1d       	adc	r18, r14
    2d3a:	3f 1d       	adc	r19, r15
    2d3c:	68 01       	movw	r12, r16
    2d3e:	79 01       	movw	r14, r18
    2d40:	c6 1a       	sub	r12, r22
    2d42:	d7 0a       	sbc	r13, r23
    2d44:	e8 0a       	sbc	r14, r24
    2d46:	f9 0a       	sbc	r15, r25
    2d48:	d7 01       	movw	r26, r14
    2d4a:	c6 01       	movw	r24, r12
    2d4c:	02 97       	sbiw	r24, 0x02	; 2
    2d4e:	a1 05       	cpc	r26, r1
    2d50:	b1 05       	cpc	r27, r1
    2d52:	98 f4       	brcc	.+38     	; 0x2d7a <loop+0xd66>
    2d54:	80 91 44 0b 	lds	r24, 0x0B44	; 0x800b44 <stato_procedura>
    2d58:	90 91 45 0b 	lds	r25, 0x0B45	; 0x800b45 <stato_procedura+0x1>
    2d5c:	07 97       	sbiw	r24, 0x07	; 7
    2d5e:	19 f0       	breq	.+6      	; 0x2d66 <loop+0xd52>
    2d60:	0e 94 c5 0a 	call	0x158a	; 0x158a <_Z6Azzerav>
    2d64:	0a c0       	rjmp	.+20     	; 0x2d7a <loop+0xd66>
  else if (((UltimoPassaggioStato + Timer - secs) <= 1) && (stato_procedura == stato_erogazione)) avanzaStato(TmaxInviodati);
    2d66:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <TmaxInviodati>
    2d6a:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <TmaxInviodati+0x1>
    2d6e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <TmaxInviodati+0x2>
    2d72:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <TmaxInviodati+0x3>
    2d76:	0e 94 83 04 	call	0x906	; 0x906 <_Z11avanzaStatom>
  
  wdt_reset(); // Reset watchdog Timer
    2d7a:	a8 95       	wdr
}
    2d7c:	e0 96       	adiw	r28, 0x30	; 48
    2d7e:	0f b6       	in	r0, 0x3f	; 63
    2d80:	f8 94       	cli
    2d82:	de bf       	out	0x3e, r29	; 62
    2d84:	0f be       	out	0x3f, r0	; 63
    2d86:	cd bf       	out	0x3d, r28	; 61
    2d88:	df 91       	pop	r29
    2d8a:	cf 91       	pop	r28
    2d8c:	1f 91       	pop	r17
    2d8e:	0f 91       	pop	r16
    2d90:	ff 90       	pop	r15
    2d92:	ef 90       	pop	r14
    2d94:	df 90       	pop	r13
    2d96:	cf 90       	pop	r12
    2d98:	08 95       	ret
                avanzaStato(TinputTarga);
         } 
         else 
         {
                //SET_BIT(PORTC,PC4);
				SET_BIT(PORTC,CS_W5500);
    2d9a:	44 9a       	sbi	0x08, 4	; 8
                RaccoltaDati[5] = "111";                
    2d9c:	67 ee       	ldi	r22, 0xE7	; 231
    2d9e:	76 e0       	ldi	r23, 0x06	; 6
    2da0:	85 e3       	ldi	r24, 0x35	; 53
    2da2:	9b e0       	ldi	r25, 0x0B	; 11
    2da4:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
                lcd.clear();
    2da8:	83 e6       	ldi	r24, 0x63	; 99
    2daa:	9b e0       	ldi	r25, 0x0B	; 11
    2dac:	0e 94 14 31 	call	0x6228	; 0x6228 <_ZN3LCD5clearEv>
                righeDisplay[1] = "***** ERRORE ******";
    2db0:	6b ee       	ldi	r22, 0xEB	; 235
    2db2:	76 e0       	ldi	r23, 0x06	; 6
    2db4:	89 ef       	ldi	r24, 0xF9	; 249
    2db6:	9a e0       	ldi	r25, 0x0A	; 10
    2db8:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
                righeDisplay[2] = "  Ate NON VALIDA ";
    2dbc:	6f ef       	ldi	r22, 0xFF	; 255
    2dbe:	76 e0       	ldi	r23, 0x06	; 6
    2dc0:	8f ef       	ldi	r24, 0xFF	; 255
    2dc2:	9a e0       	ldi	r25, 0x0A	; 10
    2dc4:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
                righeDisplay[3] = " Problema di Rete";
    2dc8:	61 e1       	ldi	r22, 0x11	; 17
    2dca:	77 e0       	ldi	r23, 0x07	; 7
    2dcc:	85 e0       	ldi	r24, 0x05	; 5
    2dce:	9b e0       	ldi	r25, 0x0B	; 11
    2dd0:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
                displayLCD(righeDisplay,stato_procedura,10);
    2dd4:	60 91 44 0b 	lds	r22, 0x0B44	; 0x800b44 <stato_procedura>
    2dd8:	70 91 45 0b 	lds	r23, 0x0B45	; 0x800b45 <stato_procedura+0x1>
    2ddc:	4a e0       	ldi	r20, 0x0A	; 10
    2dde:	50 e0       	ldi	r21, 0x00	; 0
    2de0:	83 ef       	ldi	r24, 0xF3	; 243
    2de2:	9a e0       	ldi	r25, 0x0A	; 10
    2de4:	0e 94 4e 04 	call	0x89c	; 0x89c <_Z10displayLCDP6Stringii>
    2de8:	3f ef       	ldi	r19, 0xFF	; 255
    2dea:	83 ed       	ldi	r24, 0xD3	; 211
    2dec:	90 e3       	ldi	r25, 0x30	; 48
    2dee:	31 50       	subi	r19, 0x01	; 1
    2df0:	80 40       	sbci	r24, 0x00	; 0
    2df2:	90 40       	sbci	r25, 0x00	; 0
    2df4:	e1 f7       	brne	.-8      	; 0x2dee <loop+0xdda>
    2df6:	00 c0       	rjmp	.+0      	; 0x2df8 <loop+0xde4>
    2df8:	00 00       	nop
                _delay_ms(1000);
                Azzera();
    2dfa:	0e 94 c5 0a 	call	0x158a	; 0x158a <_Z6Azzerav>
    2dfe:	35 cb       	rjmp	.-2454   	; 0x246a <loop+0x456>

          Serial.println("TIPO CARBURANTE: " + mezzo.Carb);
          Serial.println("TARGA: " + mezzo.TARGA);

          if ((mezzo.Carb == "B") || (mezzo.Carb == "D")) {
            RaccoltaDati[1] = mezzo.TARGA;
    2e00:	6b e8       	ldi	r22, 0x8B	; 139
    2e02:	7b e0       	ldi	r23, 0x0B	; 11
    2e04:	8d e1       	ldi	r24, 0x1D	; 29
    2e06:	9b e0       	ldi	r25, 0x0B	; 11
    2e08:	0e 94 c1 3c 	call	0x7982	; 0x7982 <_ZN6StringaSERKS_>
            RaccoltaDati[2] = mezzo.Carb;
    2e0c:	65 e8       	ldi	r22, 0x85	; 133
    2e0e:	7b e0       	ldi	r23, 0x0B	; 11
    2e10:	83 e2       	ldi	r24, 0x23	; 35
    2e12:	9b e0       	ldi	r25, 0x0B	; 11
    2e14:	0e 94 c1 3c 	call	0x7982	; 0x7982 <_ZN6StringaSERKS_>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2e18:	65 e3       	ldi	r22, 0x35	; 53
    2e1a:	77 e0       	ldi	r23, 0x07	; 7
    2e1c:	ce 01       	movw	r24, r28
    2e1e:	01 96       	adiw	r24, 0x01	; 1
    2e20:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
            righeDisplay[3] = "TARGA: " +  mezzo.TARGA;
    2e24:	6b e8       	ldi	r22, 0x8B	; 139
    2e26:	7b e0       	ldi	r23, 0x0B	; 11
    2e28:	ce 01       	movw	r24, r28
    2e2a:	01 96       	adiw	r24, 0x01	; 1
    2e2c:	0e 94 3f 3e 	call	0x7c7e	; 0x7c7e <_ZplRK15StringSumHelperRK6String>
    2e30:	bc 01       	movw	r22, r24
    2e32:	85 e0       	ldi	r24, 0x05	; 5
    2e34:	9b e0       	ldi	r25, 0x0B	; 11
    2e36:	0e 94 c1 3c 	call	0x7982	; 0x7982 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2e3a:	ce 01       	movw	r24, r28
    2e3c:	01 96       	adiw	r24, 0x01	; 1
    2e3e:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
    2e42:	8f ef       	ldi	r24, 0xFF	; 255
    2e44:	99 e6       	ldi	r25, 0x69	; 105
    2e46:	28 e1       	ldi	r18, 0x18	; 24
    2e48:	81 50       	subi	r24, 0x01	; 1
    2e4a:	90 40       	sbci	r25, 0x00	; 0
    2e4c:	20 40       	sbci	r18, 0x00	; 0
    2e4e:	e1 f7       	brne	.-8      	; 0x2e48 <loop+0xe34>
    2e50:	00 c0       	rjmp	.+0      	; 0x2e52 <loop+0xe3e>
    2e52:	00 00       	nop
            _delay_ms(500);
            distr_selezionato = 0;
    2e54:	10 92 41 0b 	sts	0x0B41, r1	; 0x800b41 <distr_selezionato>
            avanzaStato(TselDistributore);
    2e58:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <TselDistributore>
    2e5c:	70 91 23 01 	lds	r23, 0x0123	; 0x800123 <TselDistributore+0x1>
    2e60:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <TselDistributore+0x2>
    2e64:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <TselDistributore+0x3>
    2e68:	0e 94 83 04 	call	0x906	; 0x906 <_Z11avanzaStatom>
    2e6c:	de cb       	rjmp	.-2116   	; 0x262a <loop+0x616>

        // Verifica scelta distributore

        if ((mezzo.Carb == "B") || (distr_selezionato == 2))
        {
          mezzo.Carb = "B";
    2e6e:	6e e3       	ldi	r22, 0x3E	; 62
    2e70:	76 e0       	ldi	r23, 0x06	; 6
    2e72:	85 e8       	ldi	r24, 0x85	; 133
    2e74:	9b e0       	ldi	r25, 0x0B	; 11
    2e76:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
          StatoAttuale = "POMPA 2";
    2e7a:	66 e3       	ldi	r22, 0x36	; 54
    2e7c:	76 e0       	ldi	r23, 0x06	; 6
    2e7e:	8c e4       	ldi	r24, 0x4C	; 76
    2e80:	9b e0       	ldi	r25, 0x0B	; 11
    2e82:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
          RaccoltaDati[2] = mezzo.Carb;
    2e86:	65 e8       	ldi	r22, 0x85	; 133
    2e88:	7b e0       	ldi	r23, 0x0B	; 11
    2e8a:	83 e2       	ldi	r24, 0x23	; 35
    2e8c:	9b e0       	ldi	r25, 0x0B	; 11
    2e8e:	0e 94 c1 3c 	call	0x7982	; 0x7982 <_ZN6StringaSERKS_>
          righeDisplay[1] =  "****** KM ******";
    2e92:	60 e4       	ldi	r22, 0x40	; 64
    2e94:	76 e0       	ldi	r23, 0x06	; 6
    2e96:	89 ef       	ldi	r24, 0xF9	; 249
    2e98:	9a e0       	ldi	r25, 0x0A	; 10
    2e9a:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
          righeDisplay[2] = "KM:";
    2e9e:	61 e5       	ldi	r22, 0x51	; 81
    2ea0:	76 e0       	ldi	r23, 0x06	; 6
    2ea2:	8f ef       	ldi	r24, 0xFF	; 255
    2ea4:	9a e0       	ldi	r25, 0x0A	; 10
    2ea6:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
          righeDisplay[3] = "#:Conferma";       
    2eaa:	65 e5       	ldi	r22, 0x55	; 85
    2eac:	76 e0       	ldi	r23, 0x06	; 6
    2eae:	85 e0       	ldi	r24, 0x05	; 5
    2eb0:	9b e0       	ldi	r25, 0x0B	; 11
    2eb2:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
    2eb6:	3f ef       	ldi	r19, 0xFF	; 255
    2eb8:	81 ee       	ldi	r24, 0xE1	; 225
    2eba:	94 e0       	ldi	r25, 0x04	; 4
    2ebc:	31 50       	subi	r19, 0x01	; 1
    2ebe:	80 40       	sbci	r24, 0x00	; 0
    2ec0:	90 40       	sbci	r25, 0x00	; 0
    2ec2:	e1 f7       	brne	.-8      	; 0x2ebc <loop+0xea8>
    2ec4:	38 c0       	rjmp	.+112    	; 0x2f36 <loop+0xf22>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    2ec6:	69 ec       	ldi	r22, 0xC9	; 201
    2ec8:	75 e0       	ldi	r23, 0x05	; 5
    2eca:	85 e8       	ldi	r24, 0x85	; 133
    2ecc:	9b e0       	ldi	r25, 0x0B	; 11
    2ece:	0e 94 73 3e 	call	0x7ce6	; 0x7ce6 <_ZNK6String6equalsEPKc>
          _delay_ms(100);    
          avanzaStato(TinputKM);
        }
        else if ((mezzo.Carb == "D") || (distr_selezionato == 1))
    2ed2:	81 11       	cpse	r24, r1
    2ed4:	05 c0       	rjmp	.+10     	; 0x2ee0 <loop+0xecc>
    2ed6:	80 91 41 0b 	lds	r24, 0x0B41	; 0x800b41 <distr_selezionato>
    2eda:	81 30       	cpi	r24, 0x01	; 1
    2edc:	09 f0       	breq	.+2      	; 0x2ee0 <loop+0xecc>
    2ede:	f3 ce       	rjmp	.-538    	; 0x2cc6 <loop+0xcb2>
        {
          mezzo.Carb = "D";
    2ee0:	69 ec       	ldi	r22, 0xC9	; 201
    2ee2:	75 e0       	ldi	r23, 0x05	; 5
    2ee4:	85 e8       	ldi	r24, 0x85	; 133
    2ee6:	9b e0       	ldi	r25, 0x0B	; 11
    2ee8:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
          StatoAttuale = "POMPA 1";
    2eec:	67 e2       	ldi	r22, 0x27	; 39
    2eee:	76 e0       	ldi	r23, 0x06	; 6
    2ef0:	8c e4       	ldi	r24, 0x4C	; 76
    2ef2:	9b e0       	ldi	r25, 0x0B	; 11
    2ef4:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
          RaccoltaDati[2] = mezzo.Carb;
    2ef8:	65 e8       	ldi	r22, 0x85	; 133
    2efa:	7b e0       	ldi	r23, 0x0B	; 11
    2efc:	83 e2       	ldi	r24, 0x23	; 35
    2efe:	9b e0       	ldi	r25, 0x0B	; 11
    2f00:	0e 94 c1 3c 	call	0x7982	; 0x7982 <_ZN6StringaSERKS_>
          righeDisplay[1] =  "****** KM ******";
    2f04:	60 e4       	ldi	r22, 0x40	; 64
    2f06:	76 e0       	ldi	r23, 0x06	; 6
    2f08:	89 ef       	ldi	r24, 0xF9	; 249
    2f0a:	9a e0       	ldi	r25, 0x0A	; 10
    2f0c:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
          righeDisplay[2] = "KM:";
    2f10:	61 e5       	ldi	r22, 0x51	; 81
    2f12:	76 e0       	ldi	r23, 0x06	; 6
    2f14:	8f ef       	ldi	r24, 0xFF	; 255
    2f16:	9a e0       	ldi	r25, 0x0A	; 10
    2f18:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
          righeDisplay[3] = "#:Conferma";      
    2f1c:	65 e5       	ldi	r22, 0x55	; 85
    2f1e:	76 e0       	ldi	r23, 0x06	; 6
    2f20:	85 e0       	ldi	r24, 0x05	; 5
    2f22:	9b e0       	ldi	r25, 0x0B	; 11
    2f24:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
    2f28:	2f ef       	ldi	r18, 0xFF	; 255
    2f2a:	31 ee       	ldi	r19, 0xE1	; 225
    2f2c:	84 e0       	ldi	r24, 0x04	; 4
    2f2e:	21 50       	subi	r18, 0x01	; 1
    2f30:	30 40       	sbci	r19, 0x00	; 0
    2f32:	80 40       	sbci	r24, 0x00	; 0
    2f34:	e1 f7       	brne	.-8      	; 0x2f2e <loop+0xf1a>
    2f36:	00 c0       	rjmp	.+0      	; 0x2f38 <loop+0xf24>
    2f38:	00 00       	nop
          _delay_ms(100);     
         avanzaStato(TinputKM);
    2f3a:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <TinputKM>
    2f3e:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <TinputKM+0x1>
    2f42:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <TinputKM+0x2>
    2f46:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <TinputKM+0x3>
    2f4a:	df c0       	rjmp	.+446    	; 0x310a <loop+0x10f6>
	{ 
	    timer_stato();
		 
		if (testbit(PINA,1) && (mezzo.Carb == "D"))
		{
			cli(); // GLOBAL INTERRUPT DISABLE
    2f4c:	f8 94       	cli
            righeDisplay[1] = "LITRI : 0.00";
    2f4e:	64 ea       	ldi	r22, 0xA4	; 164
    2f50:	78 e0       	ldi	r23, 0x08	; 8
    2f52:	89 ef       	ldi	r24, 0xF9	; 249
    2f54:	9a e0       	ldi	r25, 0x0A	; 10
    2f56:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2f5a:	60 ef       	ldi	r22, 0xF0	; 240
    2f5c:	75 e0       	ldi	r23, 0x05	; 5
    2f5e:	ce 01       	movw	r24, r28
    2f60:	01 96       	adiw	r24, 0x01	; 1
    2f62:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
			righeDisplay[2] = "TARGA:" + mezzo.TARGA;
    2f66:	6b e8       	ldi	r22, 0x8B	; 139
    2f68:	7b e0       	ldi	r23, 0x0B	; 11
    2f6a:	ce 01       	movw	r24, r28
    2f6c:	01 96       	adiw	r24, 0x01	; 1
    2f6e:	0e 94 3f 3e 	call	0x7c7e	; 0x7c7e <_ZplRK15StringSumHelperRK6String>
    2f72:	bc 01       	movw	r22, r24
    2f74:	8f ef       	ldi	r24, 0xFF	; 255
    2f76:	9a e0       	ldi	r25, 0x0A	; 10
    2f78:	0e 94 c1 3c 	call	0x7982	; 0x7982 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2f7c:	ce 01       	movw	r24, r28
    2f7e:	01 96       	adiw	r24, 0x01	; 1
    2f80:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2f84:	65 e4       	ldi	r22, 0x45	; 69
    2f86:	77 e0       	ldi	r23, 0x07	; 7
    2f88:	ce 01       	movw	r24, r28
    2f8a:	01 96       	adiw	r24, 0x01	; 1
    2f8c:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
 		    // righeDisplay[2] = "imp :" + String(impulsi);
 			righeDisplay[3] = "Erogazione: " + StatoAttuale;
    2f90:	6c e4       	ldi	r22, 0x4C	; 76
    2f92:	7b e0       	ldi	r23, 0x0B	; 11
    2f94:	ce 01       	movw	r24, r28
    2f96:	01 96       	adiw	r24, 0x01	; 1
    2f98:	0e 94 3f 3e 	call	0x7c7e	; 0x7c7e <_ZplRK15StringSumHelperRK6String>
    2f9c:	bc 01       	movw	r22, r24
    2f9e:	85 e0       	ldi	r24, 0x05	; 5
    2fa0:	9b e0       	ldi	r25, 0x0B	; 11
    2fa2:	0e 94 c1 3c 	call	0x7982	; 0x7982 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2fa6:	ce 01       	movw	r24, r28
    2fa8:	01 96       	adiw	r24, 0x01	; 1
    2faa:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
			abilitaPulser('D');
    2fae:	84 e4       	ldi	r24, 0x44	; 68
    2fb0:	0e 94 12 0a 	call	0x1424	; 0x1424 <_Z13abilitaPulserc>
			impulsi = 0;
    2fb4:	10 92 43 0b 	sts	0x0B43, r1	; 0x800b43 <impulsi+0x1>
    2fb8:	10 92 42 0b 	sts	0x0B42, r1	; 0x800b42 <impulsi>
			avanzaStato(TmaxErogazione); 
    2fbc:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <TmaxErogazione>
    2fc0:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <TmaxErogazione+0x1>
    2fc4:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <TmaxErogazione+0x2>
    2fc8:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <TmaxErogazione+0x3>
    2fcc:	0e 94 83 04 	call	0x906	; 0x906 <_Z11avanzaStatom>
    2fd0:	88 cb       	rjmp	.-2288   	; 0x26e2 <loop+0x6ce>
		
		// CONTATTO PISTOLA BENZINA

		if  (testbit(PINB,1) && (mezzo.Carb == "B"))
		{
			 cli(); // GLOBAL INTERRUPT DISABLE
    2fd2:	f8 94       	cli
             righeDisplay[1] = "LITRI : 0.00";
    2fd4:	64 ea       	ldi	r22, 0xA4	; 164
    2fd6:	78 e0       	ldi	r23, 0x08	; 8
    2fd8:	89 ef       	ldi	r24, 0xF9	; 249
    2fda:	9a e0       	ldi	r25, 0x0A	; 10
    2fdc:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2fe0:	60 ef       	ldi	r22, 0xF0	; 240
    2fe2:	75 e0       	ldi	r23, 0x05	; 5
    2fe4:	ce 01       	movw	r24, r28
    2fe6:	01 96       	adiw	r24, 0x01	; 1
    2fe8:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
			 righeDisplay[2] = "TARGA:" + mezzo.TARGA;
    2fec:	6b e8       	ldi	r22, 0x8B	; 139
    2fee:	7b e0       	ldi	r23, 0x0B	; 11
    2ff0:	ce 01       	movw	r24, r28
    2ff2:	01 96       	adiw	r24, 0x01	; 1
    2ff4:	0e 94 3f 3e 	call	0x7c7e	; 0x7c7e <_ZplRK15StringSumHelperRK6String>
    2ff8:	bc 01       	movw	r22, r24
    2ffa:	8f ef       	ldi	r24, 0xFF	; 255
    2ffc:	9a e0       	ldi	r25, 0x0A	; 10
    2ffe:	0e 94 c1 3c 	call	0x7982	; 0x7982 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    3002:	ce 01       	movw	r24, r28
    3004:	01 96       	adiw	r24, 0x01	; 1
    3006:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    300a:	65 e4       	ldi	r22, 0x45	; 69
    300c:	77 e0       	ldi	r23, 0x07	; 7
    300e:	ce 01       	movw	r24, r28
    3010:	01 96       	adiw	r24, 0x01	; 1
    3012:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
             // righeDisplay[2] = "imp :" + String(impulsi);
             righeDisplay[3] = "Erogazione: " + StatoAttuale;
    3016:	6c e4       	ldi	r22, 0x4C	; 76
    3018:	7b e0       	ldi	r23, 0x0B	; 11
    301a:	ce 01       	movw	r24, r28
    301c:	01 96       	adiw	r24, 0x01	; 1
    301e:	0e 94 3f 3e 	call	0x7c7e	; 0x7c7e <_ZplRK15StringSumHelperRK6String>
    3022:	bc 01       	movw	r22, r24
    3024:	85 e0       	ldi	r24, 0x05	; 5
    3026:	9b e0       	ldi	r25, 0x0B	; 11
    3028:	0e 94 c1 3c 	call	0x7982	; 0x7982 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    302c:	ce 01       	movw	r24, r28
    302e:	01 96       	adiw	r24, 0x01	; 1
    3030:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
			 abilitaPulser('B');
    3034:	82 e4       	ldi	r24, 0x42	; 66
    3036:	0e 94 12 0a 	call	0x1424	; 0x1424 <_Z13abilitaPulserc>
			 impulsi = 0;
    303a:	10 92 43 0b 	sts	0x0B43, r1	; 0x800b43 <impulsi+0x1>
    303e:	10 92 42 0b 	sts	0x0B42, r1	; 0x800b42 <impulsi>
             avanzaStato(TmaxErogazione);
    3042:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <TmaxErogazione>
    3046:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <TmaxErogazione+0x1>
    304a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <TmaxErogazione+0x2>
    304e:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <TmaxErogazione+0x3>
    3052:	5b c0       	rjmp	.+182    	; 0x310a <loop+0x10f6>

        // CONTATTO PISTOLA DIESEL

 		if (!testbit(PINA,1) && (mezzo.Carb == "D"))
        {
          RaccoltaDati[3] = String(lt);
    3054:	22 e0       	ldi	r18, 0x02	; 2
    3056:	b7 01       	movw	r22, r14
    3058:	a6 01       	movw	r20, r12
    305a:	ce 01       	movw	r24, r28
    305c:	01 96       	adiw	r24, 0x01	; 1
    305e:	0e 94 bf 3d 	call	0x7b7e	; 0x7b7e <_ZN6StringC1Edh>
    3062:	be 01       	movw	r22, r28
    3064:	6f 5f       	subi	r22, 0xFF	; 255
    3066:	7f 4f       	sbci	r23, 0xFF	; 255
    3068:	89 e2       	ldi	r24, 0x29	; 41
    306a:	9b e0       	ldi	r25, 0x0B	; 11
    306c:	0e 94 de 3c 	call	0x79bc	; 0x79bc <_ZN6StringaSEOS_>
    3070:	ce 01       	movw	r24, r28
    3072:	01 96       	adiw	r24, 0x01	; 1
    3074:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
          StatoAttuale = "STOP EROGAZIONE";
    3078:	61 eb       	ldi	r22, 0xB1	; 177
    307a:	78 e0       	ldi	r23, 0x08	; 8
    307c:	8c e4       	ldi	r24, 0x4C	; 76
    307e:	9b e0       	ldi	r25, 0x0B	; 11
    3080:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
          Rele_Abilitazione2(1, 7); //  apri relè
    3084:	67 e0       	ldi	r22, 0x07	; 7
    3086:	70 e0       	ldi	r23, 0x00	; 0
    3088:	81 e0       	ldi	r24, 0x01	; 1
    308a:	90 e0       	ldi	r25, 0x00	; 0
    308c:	0e 94 93 0a 	call	0x1526	; 0x1526 <_Z18Rele_Abilitazione2ii>
          Rele_Abilitazione1(1, 7); //  apri relè
    3090:	67 e0       	ldi	r22, 0x07	; 7
    3092:	70 e0       	ldi	r23, 0x00	; 0
    3094:	81 e0       	ldi	r24, 0x01	; 1
    3096:	90 e0       	ldi	r25, 0x00	; 0
    3098:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <_Z18Rele_Abilitazione1ii>
          //TOGGLE_BIT(PORTA, 1);
          avanzaStato(TmaxInviodati);
    309c:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <TmaxInviodati>
    30a0:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <TmaxInviodati+0x1>
    30a4:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <TmaxInviodati+0x2>
    30a8:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <TmaxInviodati+0x3>
    30ac:	0e 94 83 04 	call	0x906	; 0x906 <_Z11avanzaStatom>
    30b0:	a5 cb       	rjmp	.-2230   	; 0x27fc <loop+0x7e8>

        // CONTATTO PISTOLA BENZINA

		if (!testbit(PINB,1) && (mezzo.Carb == "B"))
        {
          RaccoltaDati[3] = String(lt);
    30b2:	22 e0       	ldi	r18, 0x02	; 2
    30b4:	b7 01       	movw	r22, r14
    30b6:	a6 01       	movw	r20, r12
    30b8:	ce 01       	movw	r24, r28
    30ba:	01 96       	adiw	r24, 0x01	; 1
    30bc:	0e 94 bf 3d 	call	0x7b7e	; 0x7b7e <_ZN6StringC1Edh>
    30c0:	be 01       	movw	r22, r28
    30c2:	6f 5f       	subi	r22, 0xFF	; 255
    30c4:	7f 4f       	sbci	r23, 0xFF	; 255
    30c6:	89 e2       	ldi	r24, 0x29	; 41
    30c8:	9b e0       	ldi	r25, 0x0B	; 11
    30ca:	0e 94 de 3c 	call	0x79bc	; 0x79bc <_ZN6StringaSEOS_>
    30ce:	ce 01       	movw	r24, r28
    30d0:	01 96       	adiw	r24, 0x01	; 1
    30d2:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
          StatoAttuale = "STOP EROGAZIONE";
    30d6:	61 eb       	ldi	r22, 0xB1	; 177
    30d8:	78 e0       	ldi	r23, 0x08	; 8
    30da:	8c e4       	ldi	r24, 0x4C	; 76
    30dc:	9b e0       	ldi	r25, 0x0B	; 11
    30de:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
          Rele_Abilitazione2(1, 7); //  apri relè
    30e2:	67 e0       	ldi	r22, 0x07	; 7
    30e4:	70 e0       	ldi	r23, 0x00	; 0
    30e6:	81 e0       	ldi	r24, 0x01	; 1
    30e8:	90 e0       	ldi	r25, 0x00	; 0
    30ea:	0e 94 93 0a 	call	0x1526	; 0x1526 <_Z18Rele_Abilitazione2ii>
          Rele_Abilitazione1(1, 7); //  apri relè
    30ee:	67 e0       	ldi	r22, 0x07	; 7
    30f0:	70 e0       	ldi	r23, 0x00	; 0
    30f2:	81 e0       	ldi	r24, 0x01	; 1
    30f4:	90 e0       	ldi	r25, 0x00	; 0
    30f6:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <_Z18Rele_Abilitazione1ii>
          avanzaStato(TmaxInviodati);
    30fa:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <TmaxInviodati>
    30fe:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <TmaxInviodati+0x1>
    3102:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <TmaxInviodati+0x2>
    3106:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <TmaxInviodati+0x3>
    310a:	0e 94 83 04 	call	0x906	; 0x906 <_Z11avanzaStatom>
    310e:	db cd       	rjmp	.-1098   	; 0x2cc6 <loop+0xcb2>

00003110 <__vector_4>:
  73 litri al minuto
  73/60 = 1,22 lt/sec
  1,22*100 = 122 Hz
***********************************************************************/

ISR(PCINT0_vect) {
    3110:	1f 92       	push	r1
    3112:	0f 92       	push	r0
    3114:	0f b6       	in	r0, 0x3f	; 63
    3116:	0f 92       	push	r0
    3118:	11 24       	eor	r1, r1
    311a:	0b b6       	in	r0, 0x3b	; 59
    311c:	0f 92       	push	r0
    311e:	2f 93       	push	r18
    3120:	3f 93       	push	r19
    3122:	4f 93       	push	r20
    3124:	5f 93       	push	r21
    3126:	6f 93       	push	r22
    3128:	7f 93       	push	r23
    312a:	8f 93       	push	r24
    312c:	9f 93       	push	r25
    312e:	af 93       	push	r26
    3130:	bf 93       	push	r27
    3132:	ef 93       	push	r30
    3134:	ff 93       	push	r31
  if ((stato_procedura == stato_erogazione) && (impulsi < MaxErogabile))
    3136:	80 91 44 0b 	lds	r24, 0x0B44	; 0x800b44 <stato_procedura>
    313a:	90 91 45 0b 	lds	r25, 0x0B45	; 0x800b45 <stato_procedura+0x1>
    313e:	07 97       	sbiw	r24, 0x07	; 7
    3140:	99 f5       	brne	.+102    	; 0x31a8 <__vector_4+0x98>
    3142:	20 91 42 0b 	lds	r18, 0x0B42	; 0x800b42 <impulsi>
    3146:	30 91 43 0b 	lds	r19, 0x0B43	; 0x800b43 <impulsi+0x1>
    314a:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <MaxErogabile>
    314e:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <MaxErogabile+0x1>
    3152:	28 17       	cp	r18, r24
    3154:	39 07       	cpc	r19, r25
    3156:	40 f5       	brcc	.+80     	; 0x31a8 <__vector_4+0x98>
  {
	  
	  if ((PINA & _BV(PA5)) && (mezzo.Carb == "D")) {
    3158:	05 9b       	sbis	0x00, 5	; 0
    315a:	08 c0       	rjmp	.+16     	; 0x316c <__vector_4+0x5c>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    315c:	69 ec       	ldi	r22, 0xC9	; 201
    315e:	75 e0       	ldi	r23, 0x05	; 5
    3160:	85 e8       	ldi	r24, 0x85	; 133
    3162:	9b e0       	ldi	r25, 0x0B	; 11
    3164:	0e 94 73 3e 	call	0x7ce6	; 0x7ce6 <_ZNK6String6equalsEPKc>
    3168:	81 11       	cpse	r24, r1
    316a:	14 c0       	rjmp	.+40     	; 0x3194 <__vector_4+0x84>
		impulsi++;
	  }
	  
      if ((PINA & _BV(PA6)) && (mezzo.Carb == "B")) {
    316c:	06 9b       	sbis	0x00, 6	; 0
    316e:	1c c0       	rjmp	.+56     	; 0x31a8 <__vector_4+0x98>
    3170:	6e e3       	ldi	r22, 0x3E	; 62
    3172:	76 e0       	ldi	r23, 0x06	; 6
    3174:	85 e8       	ldi	r24, 0x85	; 133
    3176:	9b e0       	ldi	r25, 0x0B	; 11
    3178:	0e 94 73 3e 	call	0x7ce6	; 0x7ce6 <_ZNK6String6equalsEPKc>
    317c:	88 23       	and	r24, r24
    317e:	a1 f0       	breq	.+40     	; 0x31a8 <__vector_4+0x98>
		impulsi++;
    3180:	80 91 42 0b 	lds	r24, 0x0B42	; 0x800b42 <impulsi>
    3184:	90 91 43 0b 	lds	r25, 0x0B43	; 0x800b43 <impulsi+0x1>
    3188:	01 96       	adiw	r24, 0x01	; 1
    318a:	90 93 43 0b 	sts	0x0B43, r25	; 0x800b43 <impulsi+0x1>
    318e:	80 93 42 0b 	sts	0x0B42, r24	; 0x800b42 <impulsi>
    3192:	0a c0       	rjmp	.+20     	; 0x31a8 <__vector_4+0x98>
ISR(PCINT0_vect) {
  if ((stato_procedura == stato_erogazione) && (impulsi < MaxErogabile))
  {
	  
	  if ((PINA & _BV(PA5)) && (mezzo.Carb == "D")) {
		impulsi++;
    3194:	80 91 42 0b 	lds	r24, 0x0B42	; 0x800b42 <impulsi>
    3198:	90 91 43 0b 	lds	r25, 0x0B43	; 0x800b43 <impulsi+0x1>
    319c:	01 96       	adiw	r24, 0x01	; 1
    319e:	90 93 43 0b 	sts	0x0B43, r25	; 0x800b43 <impulsi+0x1>
    31a2:	80 93 42 0b 	sts	0x0B42, r24	; 0x800b42 <impulsi>
    31a6:	e2 cf       	rjmp	.-60     	; 0x316c <__vector_4+0x5c>
	  
      if ((PINA & _BV(PA6)) && (mezzo.Carb == "B")) {
		impulsi++;
	  }
 }
}
    31a8:	ff 91       	pop	r31
    31aa:	ef 91       	pop	r30
    31ac:	bf 91       	pop	r27
    31ae:	af 91       	pop	r26
    31b0:	9f 91       	pop	r25
    31b2:	8f 91       	pop	r24
    31b4:	7f 91       	pop	r23
    31b6:	6f 91       	pop	r22
    31b8:	5f 91       	pop	r21
    31ba:	4f 91       	pop	r20
    31bc:	3f 91       	pop	r19
    31be:	2f 91       	pop	r18
    31c0:	0f 90       	pop	r0
    31c2:	0b be       	out	0x3b, r0	; 59
    31c4:	0f 90       	pop	r0
    31c6:	0f be       	out	0x3f, r0	; 63
    31c8:	0f 90       	pop	r0
    31ca:	1f 90       	pop	r1
    31cc:	18 95       	reti

000031ce <__vector_7>:
/***********************************************************************/

// interrupt per pulsanti abilitazione diesele benzina

ISR(PCINT3_vect) {
    31ce:	1f 92       	push	r1
    31d0:	0f 92       	push	r0
    31d2:	0f b6       	in	r0, 0x3f	; 63
    31d4:	0f 92       	push	r0
    31d6:	11 24       	eor	r1, r1
    31d8:	8f 93       	push	r24
    31da:	9f 93       	push	r25

  if (stato_procedura == stato_distributore)
    31dc:	80 91 44 0b 	lds	r24, 0x0B44	; 0x800b44 <stato_procedura>
    31e0:	90 91 45 0b 	lds	r25, 0x0B45	; 0x800b45 <stato_procedura+0x1>
    31e4:	04 97       	sbiw	r24, 0x04	; 4
    31e6:	09 f0       	breq	.+2      	; 0x31ea <__vector_7+0x1c>
    31e8:	6a c0       	rjmp	.+212    	; 0x32be <__vector_7+0xf0>
  {
    if (PIND & _BV(PD6))
    31ea:	4e 9b       	sbis	0x09, 6	; 9
    31ec:	1c c0       	rjmp	.+56     	; 0x3226 <__vector_7+0x58>
    {
      intConsecutivePresses++;  // increment counter for number of presses           
    31ee:	80 91 99 0b 	lds	r24, 0x0B99	; 0x800b99 <intConsecutivePresses>
    31f2:	90 91 9a 0b 	lds	r25, 0x0B9A	; 0x800b9a <intConsecutivePresses+0x1>
    31f6:	01 96       	adiw	r24, 0x01	; 1
    31f8:	90 93 9a 0b 	sts	0x0B9A, r25	; 0x800b9a <intConsecutivePresses+0x1>
    31fc:	80 93 99 0b 	sts	0x0B99, r24	; 0x800b99 <intConsecutivePresses>
      if (intConsecutivePresses >= NUM_OF_CONSECUTIVE_PRESSES)
    3200:	80 91 99 0b 	lds	r24, 0x0B99	; 0x800b99 <intConsecutivePresses>
    3204:	90 91 9a 0b 	lds	r25, 0x0B9A	; 0x800b9a <intConsecutivePresses+0x1>
    3208:	18 16       	cp	r1, r24
    320a:	19 06       	cpc	r1, r25
    320c:	1c f5       	brge	.+70     	; 0x3254 <__vector_7+0x86>
      { // if enough presses to constitute a press
        intConsecutivePresses = 0;                    // and reset press counts
    320e:	10 92 9a 0b 	sts	0x0B9A, r1	; 0x800b9a <intConsecutivePresses+0x1>
    3212:	10 92 99 0b 	sts	0x0B99, r1	; 0x800b99 <intConsecutivePresses>
        intConsecutiveNonPresses = 0;        
    3216:	10 92 98 0b 	sts	0x0B98, r1	; 0x800b98 <intConsecutiveNonPresses+0x1>
    321a:	10 92 97 0b 	sts	0x0B97, r1	; 0x800b97 <intConsecutiveNonPresses>
        distr_selezionato = 2;
    321e:	82 e0       	ldi	r24, 0x02	; 2
    3220:	80 93 41 0b 	sts	0x0B41, r24	; 0x800b41 <distr_selezionato>
    3224:	17 c0       	rjmp	.+46     	; 0x3254 <__vector_7+0x86>
      }
    }
    else  {           // else if button is not pressed (logic low)
      intConsecutiveNonPresses++;
    3226:	80 91 97 0b 	lds	r24, 0x0B97	; 0x800b97 <intConsecutiveNonPresses>
    322a:	90 91 98 0b 	lds	r25, 0x0B98	; 0x800b98 <intConsecutiveNonPresses+0x1>
    322e:	01 96       	adiw	r24, 0x01	; 1
    3230:	90 93 98 0b 	sts	0x0B98, r25	; 0x800b98 <intConsecutiveNonPresses+0x1>
    3234:	80 93 97 0b 	sts	0x0B97, r24	; 0x800b97 <intConsecutiveNonPresses>
      if (intConsecutiveNonPresses >= NUM_OF_CONSECUTIVE_NON_PRESSES) {
    3238:	80 91 97 0b 	lds	r24, 0x0B97	; 0x800b97 <intConsecutiveNonPresses>
    323c:	90 91 98 0b 	lds	r25, 0x0B98	; 0x800b98 <intConsecutiveNonPresses+0x1>
    3240:	02 97       	sbiw	r24, 0x02	; 2
    3242:	44 f0       	brlt	.+16     	; 0x3254 <__vector_7+0x86>
        intConsecutivePresses = 0;                      // reset press counts
    3244:	10 92 9a 0b 	sts	0x0B9A, r1	; 0x800b9a <intConsecutivePresses+0x1>
    3248:	10 92 99 0b 	sts	0x0B99, r1	; 0x800b99 <intConsecutivePresses>
        intConsecutiveNonPresses = 0;
    324c:	10 92 98 0b 	sts	0x0B98, r1	; 0x800b98 <intConsecutiveNonPresses+0x1>
    3250:	10 92 97 0b 	sts	0x0B97, r1	; 0x800b97 <intConsecutiveNonPresses>
      }
    }

    if (PIND & _BV(PD7))
    3254:	4f 9b       	sbis	0x09, 7	; 9
    3256:	1c c0       	rjmp	.+56     	; 0x3290 <__vector_7+0xc2>
    {      
      intConsecutivePresses++;  // increment counter for number of presses
    3258:	80 91 99 0b 	lds	r24, 0x0B99	; 0x800b99 <intConsecutivePresses>
    325c:	90 91 9a 0b 	lds	r25, 0x0B9A	; 0x800b9a <intConsecutivePresses+0x1>
    3260:	01 96       	adiw	r24, 0x01	; 1
    3262:	90 93 9a 0b 	sts	0x0B9A, r25	; 0x800b9a <intConsecutivePresses+0x1>
    3266:	80 93 99 0b 	sts	0x0B99, r24	; 0x800b99 <intConsecutivePresses>
      if (intConsecutivePresses >= NUM_OF_CONSECUTIVE_PRESSES)
    326a:	80 91 99 0b 	lds	r24, 0x0B99	; 0x800b99 <intConsecutivePresses>
    326e:	90 91 9a 0b 	lds	r25, 0x0B9A	; 0x800b9a <intConsecutivePresses+0x1>
    3272:	18 16       	cp	r1, r24
    3274:	19 06       	cpc	r1, r25
    3276:	1c f5       	brge	.+70     	; 0x32be <__vector_7+0xf0>
      { // if enough presses to constitute a press
        intConsecutivePresses = 0;                    // and reset press counts
    3278:	10 92 9a 0b 	sts	0x0B9A, r1	; 0x800b9a <intConsecutivePresses+0x1>
    327c:	10 92 99 0b 	sts	0x0B99, r1	; 0x800b99 <intConsecutivePresses>
        intConsecutiveNonPresses = 0;        
    3280:	10 92 98 0b 	sts	0x0B98, r1	; 0x800b98 <intConsecutiveNonPresses+0x1>
    3284:	10 92 97 0b 	sts	0x0B97, r1	; 0x800b97 <intConsecutiveNonPresses>
        distr_selezionato = 1;
    3288:	81 e0       	ldi	r24, 0x01	; 1
    328a:	80 93 41 0b 	sts	0x0B41, r24	; 0x800b41 <distr_selezionato>
    328e:	17 c0       	rjmp	.+46     	; 0x32be <__vector_7+0xf0>
      }
    }
    else  {            // else if button is not pressed (logic low)
      intConsecutiveNonPresses++;
    3290:	80 91 97 0b 	lds	r24, 0x0B97	; 0x800b97 <intConsecutiveNonPresses>
    3294:	90 91 98 0b 	lds	r25, 0x0B98	; 0x800b98 <intConsecutiveNonPresses+0x1>
    3298:	01 96       	adiw	r24, 0x01	; 1
    329a:	90 93 98 0b 	sts	0x0B98, r25	; 0x800b98 <intConsecutiveNonPresses+0x1>
    329e:	80 93 97 0b 	sts	0x0B97, r24	; 0x800b97 <intConsecutiveNonPresses>
      if (intConsecutiveNonPresses >= NUM_OF_CONSECUTIVE_NON_PRESSES) {
    32a2:	80 91 97 0b 	lds	r24, 0x0B97	; 0x800b97 <intConsecutiveNonPresses>
    32a6:	90 91 98 0b 	lds	r25, 0x0B98	; 0x800b98 <intConsecutiveNonPresses+0x1>
    32aa:	02 97       	sbiw	r24, 0x02	; 2
    32ac:	44 f0       	brlt	.+16     	; 0x32be <__vector_7+0xf0>
        intConsecutivePresses = 0;                     // reset press counts
    32ae:	10 92 9a 0b 	sts	0x0B9A, r1	; 0x800b9a <intConsecutivePresses+0x1>
    32b2:	10 92 99 0b 	sts	0x0B99, r1	; 0x800b99 <intConsecutivePresses>
        intConsecutiveNonPresses = 0;
    32b6:	10 92 98 0b 	sts	0x0B98, r1	; 0x800b98 <intConsecutiveNonPresses+0x1>
    32ba:	10 92 97 0b 	sts	0x0B97, r1	; 0x800b97 <intConsecutiveNonPresses>
      }
    }
  }
}
    32be:	9f 91       	pop	r25
    32c0:	8f 91       	pop	r24
    32c2:	0f 90       	pop	r0
    32c4:	0f be       	out	0x3f, r0	; 63
    32c6:	0f 90       	pop	r0
    32c8:	1f 90       	pop	r1
    32ca:	18 95       	reti

000032cc <__vector_8>:

ISR(WDT_vect)
{
    32cc:	1f 92       	push	r1
    32ce:	0f 92       	push	r0
    32d0:	0f b6       	in	r0, 0x3f	; 63
    32d2:	0f 92       	push	r0
    32d4:	11 24       	eor	r1, r1
    32d6:	0b b6       	in	r0, 0x3b	; 59
    32d8:	0f 92       	push	r0
    32da:	2f 93       	push	r18
    32dc:	3f 93       	push	r19
    32de:	4f 93       	push	r20
    32e0:	5f 93       	push	r21
    32e2:	6f 93       	push	r22
    32e4:	7f 93       	push	r23
    32e6:	8f 93       	push	r24
    32e8:	9f 93       	push	r25
    32ea:	af 93       	push	r26
    32ec:	bf 93       	push	r27
    32ee:	ef 93       	push	r30
    32f0:	ff 93       	push	r31
  RispostaHTTP = "";
    32f2:	6f ef       	ldi	r22, 0xFF	; 255
    32f4:	71 e0       	ldi	r23, 0x01	; 1
    32f6:	8b e3       	ldi	r24, 0x3B	; 59
    32f8:	9b e0       	ldi	r25, 0x0B	; 11
    32fa:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
  impulsi = 0;
    32fe:	10 92 43 0b 	sts	0x0B43, r1	; 0x800b43 <impulsi+0x1>
    3302:	10 92 42 0b 	sts	0x0B42, r1	; 0x800b42 <impulsi>
  alreadyTimbrata = false;
    3306:	10 92 7b 0b 	sts	0x0B7B, r1	; 0x800b7b <alreadyTimbrata>
  //Carburante = "X";
  mezzo.Carb = "X";
    330a:	61 e2       	ldi	r22, 0x21	; 33
    330c:	75 e0       	ldi	r23, 0x05	; 5
    330e:	85 e8       	ldi	r24, 0x85	; 133
    3310:	9b e0       	ldi	r25, 0x0B	; 11
    3312:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
  mezzo.TARGA = "X";
    3316:	61 e2       	ldi	r22, 0x21	; 33
    3318:	75 e0       	ldi	r23, 0x05	; 5
    331a:	8b e8       	ldi	r24, 0x8B	; 139
    331c:	9b e0       	ldi	r25, 0x0B	; 11
    331e:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
  mezzo.KM = "0";
    3322:	6f ea       	ldi	r22, 0xAF	; 175
    3324:	78 e0       	ldi	r23, 0x08	; 8
    3326:	81 e9       	ldi	r24, 0x91	; 145
    3328:	9b e0       	ldi	r25, 0x0B	; 11
    332a:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
  distr_selezionato = 0;
    332e:	10 92 41 0b 	sts	0x0B41, r1	; 0x800b41 <distr_selezionato>

  Rele_Abilitazione1(1, 7);
    3332:	67 e0       	ldi	r22, 0x07	; 7
    3334:	70 e0       	ldi	r23, 0x00	; 0
    3336:	81 e0       	ldi	r24, 0x01	; 1
    3338:	90 e0       	ldi	r25, 0x00	; 0
    333a:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <_Z18Rele_Abilitazione1ii>
  Rele_Abilitazione2(1, 7);
    333e:	67 e0       	ldi	r22, 0x07	; 7
    3340:	70 e0       	ldi	r23, 0x00	; 0
    3342:	81 e0       	ldi	r24, 0x01	; 1
    3344:	90 e0       	ldi	r25, 0x00	; 0
    3346:	0e 94 93 0a 	call	0x1526	; 0x1526 <_Z18Rele_Abilitazione2ii>
  
  disable_ETH();
    334a:	0e 94 95 01 	call	0x32a	; 0x32a <_ZL11disable_ETHv>
  enable_ETH();
    334e:	0e 94 93 01 	call	0x326	; 0x326 <_ZL10enable_ETHv>

  SET_BIT(PORTA, A1);
    3352:	82 b1       	in	r24, 0x02	; 2
    3354:	82 b9       	out	0x02, r24	; 2
  SET_BIT(PORTA, A2);
    3356:	82 b1       	in	r24, 0x02	; 2
    3358:	82 b9       	out	0x02, r24	; 2

  righeDisplay[1] =  "";
    335a:	6f ef       	ldi	r22, 0xFF	; 255
    335c:	71 e0       	ldi	r23, 0x01	; 1
    335e:	89 ef       	ldi	r24, 0xF9	; 249
    3360:	9a e0       	ldi	r25, 0x0A	; 10
    3362:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
  righeDisplay[2] =  "";
    3366:	6f ef       	ldi	r22, 0xFF	; 255
    3368:	71 e0       	ldi	r23, 0x01	; 1
    336a:	8f ef       	ldi	r24, 0xFF	; 255
    336c:	9a e0       	ldi	r25, 0x0A	; 10
    336e:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
  righeDisplay[2] =  "";
    3372:	6f ef       	ldi	r22, 0xFF	; 255
    3374:	71 e0       	ldi	r23, 0x01	; 1
    3376:	8f ef       	ldi	r24, 0xFF	; 255
    3378:	9a e0       	ldi	r25, 0x0A	; 10
    337a:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
 
  secs = 0;
    337e:	10 92 b1 0a 	sts	0x0AB1, r1	; 0x800ab1 <secs>
    3382:	10 92 b2 0a 	sts	0x0AB2, r1	; 0x800ab2 <secs+0x1>
    3386:	10 92 b3 0a 	sts	0x0AB3, r1	; 0x800ab3 <secs+0x2>
    338a:	10 92 b4 0a 	sts	0x0AB4, r1	; 0x800ab4 <secs+0x3>
  UltimoPassaggioStato = 0;
    338e:	10 92 ad 0a 	sts	0x0AAD, r1	; 0x800aad <UltimoPassaggioStato>
    3392:	10 92 ae 0a 	sts	0x0AAE, r1	; 0x800aae <UltimoPassaggioStato+0x1>
    3396:	10 92 af 0a 	sts	0x0AAF, r1	; 0x800aaf <UltimoPassaggioStato+0x2>
    339a:	10 92 b0 0a 	sts	0x0AB0, r1	; 0x800ab0 <UltimoPassaggioStato+0x3>

  TARGA = "";
    339e:	6f ef       	ldi	r22, 0xFF	; 255
    33a0:	71 e0       	ldi	r23, 0x01	; 1
    33a2:	89 e9       	ldi	r24, 0x99	; 153
    33a4:	9a e0       	ldi	r25, 0x0A	; 10
    33a6:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
  
  // WDT_Prescaler_8Sec(); // 
  //while(1); // Verifico WDT
  stato_procedura = -1;
    33aa:	8f ef       	ldi	r24, 0xFF	; 255
    33ac:	9f ef       	ldi	r25, 0xFF	; 255
    33ae:	90 93 45 0b 	sts	0x0B45, r25	; 0x800b45 <stato_procedura+0x1>
    33b2:	80 93 44 0b 	sts	0x0B44, r24	; 0x800b44 <stato_procedura>
    33b6:	ff 91       	pop	r31
    33b8:	ef 91       	pop	r30
    33ba:	bf 91       	pop	r27
    33bc:	af 91       	pop	r26
    33be:	9f 91       	pop	r25
    33c0:	8f 91       	pop	r24
    33c2:	7f 91       	pop	r23
    33c4:	6f 91       	pop	r22
    33c6:	5f 91       	pop	r21
    33c8:	4f 91       	pop	r20
    33ca:	3f 91       	pop	r19
    33cc:	2f 91       	pop	r18
    33ce:	0f 90       	pop	r0
    33d0:	0b be       	out	0x3b, r0	; 59
    33d2:	0f 90       	pop	r0
    33d4:	0f be       	out	0x3f, r0	; 63
    33d6:	0f 90       	pop	r0
    33d8:	1f 90       	pop	r1
    33da:	18 95       	reti

000033dc <_GLOBAL__sub_I_ParametriCCEC>:
    33dc:	8f 92       	push	r8
    33de:	af 92       	push	r10
    33e0:	cf 92       	push	r12
    33e2:	ef 92       	push	r14
    33e4:	0f 93       	push	r16
    33e6:	cf 93       	push	r28
    33e8:	df 93       	push	r29
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    33ea:	00 e0       	ldi	r16, 0x00	; 0
    33ec:	20 e0       	ldi	r18, 0x00	; 0
    33ee:	40 e0       	ldi	r20, 0x00	; 0
    33f0:	60 e0       	ldi	r22, 0x00	; 0
    33f2:	83 ee       	ldi	r24, 0xE3	; 227
    33f4:	9b e0       	ldi	r25, 0x0B	; 11
    33f6:	0e 94 11 39 	call	0x7222	; 0x7222 <_ZN9IPAddressC1Ehhhh>
{ {"DNS NAME SERVER\0", "ccec.no.dipvvf.it\0", 1000},
  {"IP CCEC\0", "192.168.3.100\0", 1020},
  {"Ultima Erogazione Salvata\0", "2000\0", 1035},
  {"Codice Sede\0", "NO1001\0", 1040},
  {"ImpLitro\0", "100\0", 1050}
    33fa:	63 e7       	ldi	r22, 0x73	; 115
    33fc:	71 e0       	ldi	r23, 0x01	; 1
    33fe:	8b e9       	ldi	r24, 0x9B	; 155
    3400:	9b e0       	ldi	r25, 0x0B	; 11
    3402:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
    3406:	64 e8       	ldi	r22, 0x84	; 132
    3408:	71 e0       	ldi	r23, 0x01	; 1
    340a:	81 ea       	ldi	r24, 0xA1	; 161
    340c:	9b e0       	ldi	r25, 0x0B	; 11
    340e:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
    3412:	cb e9       	ldi	r28, 0x9B	; 155
    3414:	db e0       	ldi	r29, 0x0B	; 11
    3416:	88 ee       	ldi	r24, 0xE8	; 232
    3418:	93 e0       	ldi	r25, 0x03	; 3
    341a:	9d 87       	std	Y+13, r25	; 0x0d
    341c:	8c 87       	std	Y+12, r24	; 0x0c
    341e:	67 e9       	ldi	r22, 0x97	; 151
    3420:	71 e0       	ldi	r23, 0x01	; 1
    3422:	89 ea       	ldi	r24, 0xA9	; 169
    3424:	9b e0       	ldi	r25, 0x0B	; 11
    3426:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
    342a:	60 ea       	ldi	r22, 0xA0	; 160
    342c:	71 e0       	ldi	r23, 0x01	; 1
    342e:	8f ea       	ldi	r24, 0xAF	; 175
    3430:	9b e0       	ldi	r25, 0x0B	; 11
    3432:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
    3436:	8c ef       	ldi	r24, 0xFC	; 252
    3438:	93 e0       	ldi	r25, 0x03	; 3
    343a:	9b 8f       	std	Y+27, r25	; 0x1b
    343c:	8a 8f       	std	Y+26, r24	; 0x1a
    343e:	6f ea       	ldi	r22, 0xAF	; 175
    3440:	71 e0       	ldi	r23, 0x01	; 1
    3442:	87 eb       	ldi	r24, 0xB7	; 183
    3444:	9b e0       	ldi	r25, 0x0B	; 11
    3446:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
    344a:	6a ec       	ldi	r22, 0xCA	; 202
    344c:	71 e0       	ldi	r23, 0x01	; 1
    344e:	8d eb       	ldi	r24, 0xBD	; 189
    3450:	9b e0       	ldi	r25, 0x0B	; 11
    3452:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
    3456:	8b e0       	ldi	r24, 0x0B	; 11
    3458:	94 e0       	ldi	r25, 0x04	; 4
    345a:	99 a7       	std	Y+41, r25	; 0x29
    345c:	88 a7       	std	Y+40, r24	; 0x28
    345e:	60 ed       	ldi	r22, 0xD0	; 208
    3460:	71 e0       	ldi	r23, 0x01	; 1
    3462:	85 ec       	ldi	r24, 0xC5	; 197
    3464:	9b e0       	ldi	r25, 0x0B	; 11
    3466:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
    346a:	6d ed       	ldi	r22, 0xDD	; 221
    346c:	71 e0       	ldi	r23, 0x01	; 1
    346e:	8b ec       	ldi	r24, 0xCB	; 203
    3470:	9b e0       	ldi	r25, 0x0B	; 11
    3472:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
    3476:	80 e1       	ldi	r24, 0x10	; 16
    3478:	94 e0       	ldi	r25, 0x04	; 4
    347a:	9f ab       	std	Y+55, r25	; 0x37
    347c:	8e ab       	std	Y+54, r24	; 0x36
    347e:	65 ee       	ldi	r22, 0xE5	; 229
    3480:	71 e0       	ldi	r23, 0x01	; 1
    3482:	83 ed       	ldi	r24, 0xD3	; 211
    3484:	9b e0       	ldi	r25, 0x0B	; 11
    3486:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
    348a:	6f ee       	ldi	r22, 0xEF	; 239
    348c:	71 e0       	ldi	r23, 0x01	; 1
    348e:	89 ed       	ldi	r24, 0xD9	; 217
    3490:	9b e0       	ldi	r25, 0x0B	; 11
    3492:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
    3496:	8a e1       	ldi	r24, 0x1A	; 26
    3498:	94 e0       	ldi	r25, 0x04	; 4
    349a:	90 93 e0 0b 	sts	0x0BE0, r25	; 0x800be0 <Parametri+0x45>
    349e:	80 93 df 0b 	sts	0x0BDF, r24	; 0x800bdf <Parametri+0x44>

volatile int intConsecutivePresses = 0;
volatile int intConsecutiveNonPresses = 0;
const uint8_t I2C_PCA9534_ADDR = 0x20;

struct mezzoType {
    34a2:	6f ef       	ldi	r22, 0xFF	; 255
    34a4:	71 e0       	ldi	r23, 0x01	; 1
    34a6:	85 e8       	ldi	r24, 0x85	; 133
    34a8:	9b e0       	ldi	r25, 0x0B	; 11
    34aa:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
    34ae:	6f ef       	ldi	r22, 0xFF	; 255
    34b0:	71 e0       	ldi	r23, 0x01	; 1
    34b2:	8b e8       	ldi	r24, 0x8B	; 139
    34b4:	9b e0       	ldi	r25, 0x0B	; 11
    34b6:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
    34ba:	6f ef       	ldi	r22, 0xFF	; 255
    34bc:	71 e0       	ldi	r23, 0x01	; 1
    34be:	81 e9       	ldi	r24, 0x91	; 145
    34c0:	9b e0       	ldi	r25, 0x0B	; 11
    34c2:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
uint8_t uid[] = { 0, 0, 0, 0, 0, 0, 0 };       // Buffer dove memorizzo la UID del Badge
uint8_t uidLength;                             // Length of the UID (4 or 7 bytes depending on ISO14443A card type)
uint8_t uidMezzo[] = { 0, 0, 0, 0, 0, 0, 0 };  // Buffer dove memorizzo la UID del Badge Mezzo
boolean alreadyTimbrata = false;

LiquidCrystal_I2C lcd(0x27, 2, 1, 0, 4, 5, 6, 7, 3, POSITIVE);  // Set the LCD I2C address
    34c6:	1f 92       	push	r1
    34c8:	83 e0       	ldi	r24, 0x03	; 3
    34ca:	8f 93       	push	r24
    34cc:	87 e0       	ldi	r24, 0x07	; 7
    34ce:	88 2e       	mov	r8, r24
    34d0:	96 e0       	ldi	r25, 0x06	; 6
    34d2:	a9 2e       	mov	r10, r25
    34d4:	25 e0       	ldi	r18, 0x05	; 5
    34d6:	c2 2e       	mov	r12, r18
    34d8:	34 e0       	ldi	r19, 0x04	; 4
    34da:	e3 2e       	mov	r14, r19
    34dc:	21 e0       	ldi	r18, 0x01	; 1
    34de:	42 e0       	ldi	r20, 0x02	; 2
    34e0:	67 e2       	ldi	r22, 0x27	; 39
    34e2:	83 e6       	ldi	r24, 0x63	; 99
    34e4:	9b e0       	ldi	r25, 0x0B	; 11
    34e6:	0e 94 99 32 	call	0x6532	; 0x6532 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhhh13t_backlighPol>
uint8_t Clessidra[8] = {0x1F, 0x11, 0x0A, 0x04, 0x04, 0x0E, 0x1F, 0x1F,};
NFC_PN532 nfc(PN532_IRQ, PN532_RESET);
    34ea:	43 e0       	ldi	r20, 0x03	; 3
    34ec:	64 e0       	ldi	r22, 0x04	; 4
    34ee:	82 e5       	ldi	r24, 0x52	; 82
    34f0:	9b e0       	ldi	r25, 0x0B	; 11
    34f2:	80 d4       	rcall	.+2304   	; 0x3df4 <_ZN9NFC_PN532C1Ehh>

String StatoAttuale = "START...";
    34f4:	61 ec       	ldi	r22, 0xC1	; 193
    34f6:	78 e0       	ldi	r23, 0x08	; 8
    34f8:	8c e4       	ldi	r24, 0x4C	; 76
    34fa:	9b e0       	ldi	r25, 0x0B	; 11
    34fc:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
String strURLAPI = "";
    3500:	6f ef       	ldi	r22, 0xFF	; 255
    3502:	71 e0       	ldi	r23, 0x01	; 1
    3504:	86 e4       	ldi	r24, 0x46	; 70
    3506:	9b e0       	ldi	r25, 0x0B	; 11
    3508:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>

uint8_t distr_selezionato = 0;
/*** GESTIONE HTTP REQUEST ***/

int HTTP_len_response = 12;
String RispostaHTTP = "";
    350c:	6f ef       	ldi	r22, 0xFF	; 255
    350e:	71 e0       	ldi	r23, 0x01	; 1
    3510:	8b e3       	ldi	r24, 0x3B	; 59
    3512:	9b e0       	ldi	r25, 0x0B	; 11
    3514:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
// Ate;TARGA;CARB;LT;KM;
String RaccoltaDati[] = {"", "", "", "", "", ""};
    3518:	6f ef       	ldi	r22, 0xFF	; 255
    351a:	71 e0       	ldi	r23, 0x01	; 1
    351c:	87 e1       	ldi	r24, 0x17	; 23
    351e:	9b e0       	ldi	r25, 0x0B	; 11
    3520:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
    3524:	6f ef       	ldi	r22, 0xFF	; 255
    3526:	71 e0       	ldi	r23, 0x01	; 1
    3528:	8d e1       	ldi	r24, 0x1D	; 29
    352a:	9b e0       	ldi	r25, 0x0B	; 11
    352c:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
    3530:	6f ef       	ldi	r22, 0xFF	; 255
    3532:	71 e0       	ldi	r23, 0x01	; 1
    3534:	83 e2       	ldi	r24, 0x23	; 35
    3536:	9b e0       	ldi	r25, 0x0B	; 11
    3538:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
    353c:	6f ef       	ldi	r22, 0xFF	; 255
    353e:	71 e0       	ldi	r23, 0x01	; 1
    3540:	89 e2       	ldi	r24, 0x29	; 41
    3542:	9b e0       	ldi	r25, 0x0B	; 11
    3544:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
    3548:	6f ef       	ldi	r22, 0xFF	; 255
    354a:	71 e0       	ldi	r23, 0x01	; 1
    354c:	8f e2       	ldi	r24, 0x2F	; 47
    354e:	9b e0       	ldi	r25, 0x0B	; 11
    3550:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
    3554:	6f ef       	ldi	r22, 0xFF	; 255
    3556:	71 e0       	ldi	r23, 0x01	; 1
    3558:	85 e3       	ldi	r24, 0x35	; 53
    355a:	9b e0       	ldi	r25, 0x0B	; 11
    355c:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
// String Carburante = "X";
String Risposta = "";
    3560:	6f ef       	ldi	r22, 0xFF	; 255
    3562:	71 e0       	ldi	r23, 0x01	; 1
    3564:	81 e1       	ldi	r24, 0x11	; 17
    3566:	9b e0       	ldi	r25, 0x0B	; 11
    3568:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
String Messaggio = "";
    356c:	6f ef       	ldi	r22, 0xFF	; 255
    356e:	71 e0       	ldi	r23, 0x01	; 1
    3570:	8b e0       	ldi	r24, 0x0B	; 11
    3572:	9b e0       	ldi	r25, 0x0B	; 11
    3574:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
String righeDisplay[] = {"X", "X", "X", "X"};
    3578:	61 e2       	ldi	r22, 0x21	; 33
    357a:	75 e0       	ldi	r23, 0x05	; 5
    357c:	83 ef       	ldi	r24, 0xF3	; 243
    357e:	9a e0       	ldi	r25, 0x0A	; 10
    3580:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
    3584:	61 e2       	ldi	r22, 0x21	; 33
    3586:	75 e0       	ldi	r23, 0x05	; 5
    3588:	89 ef       	ldi	r24, 0xF9	; 249
    358a:	9a e0       	ldi	r25, 0x0A	; 10
    358c:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
    3590:	61 e2       	ldi	r22, 0x21	; 33
    3592:	75 e0       	ldi	r23, 0x05	; 5
    3594:	8f ef       	ldi	r24, 0xFF	; 255
    3596:	9a e0       	ldi	r25, 0x0A	; 10
    3598:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
    359c:	61 e2       	ldi	r22, 0x21	; 33
    359e:	75 e0       	ldi	r23, 0x05	; 5
    35a0:	85 e0       	ldi	r24, 0x05	; 5
    35a2:	9b e0       	ldi	r25, 0x0B	; 11
    35a4:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
char CodSede[] = "SA1001";
/********************************************************************************************/
/*                    Configurazione Rete                       */
/********************************************************************************************/

IPAddress ipCCEC(192, 168, 3, 100);
    35a8:	04 e6       	ldi	r16, 0x64	; 100
    35aa:	23 e0       	ldi	r18, 0x03	; 3
    35ac:	48 ea       	ldi	r20, 0xA8	; 168
    35ae:	60 ec       	ldi	r22, 0xC0	; 192
    35b0:	8d ee       	ldi	r24, 0xED	; 237
    35b2:	9a e0       	ldi	r25, 0x0A	; 10
    35b4:	0e 94 11 39 	call	0x7222	; 0x7222 <_ZN9IPAddressC1Ehhhh>
//IPAddress ipCCEC(192, 168, 0, 50);
IPAddress myDns(192, 168, 1, 21); // DNS
    35b8:	05 e1       	ldi	r16, 0x15	; 21
    35ba:	21 e0       	ldi	r18, 0x01	; 1
    35bc:	48 ea       	ldi	r20, 0xA8	; 168
    35be:	60 ec       	ldi	r22, 0xC0	; 192
    35c0:	87 ee       	ldi	r24, 0xE7	; 231
    35c2:	9a e0       	ldi	r25, 0x0A	; 10
    35c4:	0e 94 11 39 	call	0x7222	; 0x7222 <_ZN9IPAddressC1Ehhhh>
IPAddress gateway(192, 168, 0, 1); // GATEWAY
    35c8:	01 e0       	ldi	r16, 0x01	; 1
    35ca:	20 e0       	ldi	r18, 0x00	; 0
    35cc:	48 ea       	ldi	r20, 0xA8	; 168
    35ce:	60 ec       	ldi	r22, 0xC0	; 192
    35d0:	81 ee       	ldi	r24, 0xE1	; 225
    35d2:	9a e0       	ldi	r25, 0x0A	; 10
    35d4:	0e 94 11 39 	call	0x7222	; 0x7222 <_ZN9IPAddressC1Ehhhh>
IPAddress subnet(255, 255, 0, 0); // SUBNET
    35d8:	00 e0       	ldi	r16, 0x00	; 0
    35da:	20 e0       	ldi	r18, 0x00	; 0
    35dc:	4f ef       	ldi	r20, 0xFF	; 255
    35de:	6f ef       	ldi	r22, 0xFF	; 255
    35e0:	8b ed       	ldi	r24, 0xDB	; 219
    35e2:	9a e0       	ldi	r25, 0x0A	; 10
    35e4:	0e 94 11 39 	call	0x7222	; 0x7222 <_ZN9IPAddressC1Ehhhh>
char serverATE[]  = "wbpate-test.dipvvf.it";
char serverGAC[]  = "gacweb-test.dipvvf.it";
char serverREST[] = "ccec.no.dipvvf.it";
//char serverREST[] = "ccec.sa.dipvvf.it";

EthernetClient clientLOCAL;
    35e8:	8e ec       	ldi	r24, 0xCE	; 206
    35ea:	9a e0       	ldi	r25, 0x0A	; 10
    35ec:	0e 94 ff 29 	call	0x53fe	; 0x53fe <_ZN14EthernetClientC1Ev>
EthernetClient clientATE;
    35f0:	81 ec       	ldi	r24, 0xC1	; 193
    35f2:	9a e0       	ldi	r25, 0x0A	; 10
    35f4:	0e 94 ff 29 	call	0x53fe	; 0x53fe <_ZN14EthernetClientC1Ev>

byte mac[] = {0x00, 0x0E, 0x0C, 0xB0, 0x25, 0x6F};
/********************************************************************************************/
/*                    Real Time Clock                       */
/********************************************************************************************/
DS3231M_Class DS3231M;
    35f8:	85 eb       	ldi	r24, 0xB5	; 181
    35fa:	9a e0       	ldi	r25, 0x0A	; 10
    35fc:	0e 94 b1 23 	call	0x4762	; 0x4762 <_ZN13DS3231M_ClassC1Ev>
const uint8_t SPRINTF_BUFFER_SIZE =     32;
char          inputBuffer[SPRINTF_BUFFER_SIZE];
unsigned long secs;                            // store the seconds value
unsigned long UltimoPassaggioStato = 0;        // Timer Stati Procedura
unsigned long Timer = 0;                       // Timer
DateTime nowTimer;
    3600:	40 e0       	ldi	r20, 0x00	; 0
    3602:	50 e0       	ldi	r21, 0x00	; 0
    3604:	ba 01       	movw	r22, r20
    3606:	83 ea       	ldi	r24, 0xA3	; 163
    3608:	9a e0       	ldi	r25, 0x0A	; 10
    360a:	3f d7       	rcall	.+3710   	; 0x448a <_ZN8DateTimeC1Em>
/********************************************************************************************/

const byte ROWS = 4; //four rows
const byte COLS = 4; //four columns

String TARGA = "";
    360c:	6f ef       	ldi	r22, 0xFF	; 255
    360e:	71 e0       	ldi	r23, 0x01	; 1
    3610:	89 e9       	ldi	r24, 0x99	; 153
    3612:	9a e0       	ldi	r25, 0x0A	; 10
    3614:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
String KM = "";
    3618:	6f ef       	ldi	r22, 0xFF	; 255
    361a:	71 e0       	ldi	r23, 0x01	; 1
    361c:	83 e9       	ldi	r24, 0x93	; 147
    361e:	9a e0       	ldi	r25, 0x0A	; 10
    3620:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', '.'}
};

PCA9534 gpio;
    3624:	0f 90       	pop	r0
    3626:	0f 90       	pop	r0
    3628:	80 e9       	ldi	r24, 0x90	; 144
    362a:	9a e0       	ldi	r25, 0x0A	; 10
  TARGA = "";
  
  // WDT_Prescaler_8Sec(); // 
  //while(1); // Verifico WDT
  stato_procedura = -1;
    362c:	df 91       	pop	r29
    362e:	cf 91       	pop	r28
    3630:	0f 91       	pop	r16
    3632:	ef 90       	pop	r14
    3634:	cf 90       	pop	r12
    3636:	af 90       	pop	r10
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', '.'}
};

PCA9534 gpio;
    3638:	8f 90       	pop	r8
    363a:	3c c3       	rjmp	.+1656   	; 0x3cb4 <_ZN7PCA9534C1Ev>

0000363c <_GLOBAL__sub_D_ParametriCCEC>:
  TARGA = "";
  
  // WDT_Prescaler_8Sec(); // 
  //while(1); // Verifico WDT
  stato_procedura = -1;
    363c:	cf 93       	push	r28
    363e:	df 93       	push	r29

const byte ROWS = 4; //four rows
const byte COLS = 4; //four columns

String TARGA = "";
String KM = "";
    3640:	83 e9       	ldi	r24, 0x93	; 147
    3642:	9a e0       	ldi	r25, 0x0A	; 10
    3644:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
/********************************************************************************************/

const byte ROWS = 4; //four rows
const byte COLS = 4; //four columns

String TARGA = "";
    3648:	89 e9       	ldi	r24, 0x99	; 153
    364a:	9a e0       	ldi	r25, 0x0A	; 10
    364c:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>

byte mac[] = {0x00, 0x0E, 0x0C, 0xB0, 0x25, 0x6F};
/********************************************************************************************/
/*                    Real Time Clock                       */
/********************************************************************************************/
DS3231M_Class DS3231M;
    3650:	85 eb       	ldi	r24, 0xB5	; 181
    3652:	9a e0       	ldi	r25, 0x0A	; 10
    3654:	0e 94 b8 23 	call	0x4770	; 0x4770 <_ZN13DS3231M_ClassD1Ev>
// Ate;TARGA;CARB;LT;KM;
String RaccoltaDati[] = {"", "", "", "", "", ""};
// String Carburante = "X";
String Risposta = "";
String Messaggio = "";
String righeDisplay[] = {"X", "X", "X", "X"};
    3658:	85 e0       	ldi	r24, 0x05	; 5
    365a:	9b e0       	ldi	r25, 0x0B	; 11
    365c:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
    3660:	8f ef       	ldi	r24, 0xFF	; 255
    3662:	9a e0       	ldi	r25, 0x0A	; 10
    3664:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
    3668:	89 ef       	ldi	r24, 0xF9	; 249
    366a:	9a e0       	ldi	r25, 0x0A	; 10
    366c:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
    3670:	83 ef       	ldi	r24, 0xF3	; 243
    3672:	9a e0       	ldi	r25, 0x0A	; 10
    3674:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
String RispostaHTTP = "";
// Ate;TARGA;CARB;LT;KM;
String RaccoltaDati[] = {"", "", "", "", "", ""};
// String Carburante = "X";
String Risposta = "";
String Messaggio = "";
    3678:	8b e0       	ldi	r24, 0x0B	; 11
    367a:	9b e0       	ldi	r25, 0x0B	; 11
    367c:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
int HTTP_len_response = 12;
String RispostaHTTP = "";
// Ate;TARGA;CARB;LT;KM;
String RaccoltaDati[] = {"", "", "", "", "", ""};
// String Carburante = "X";
String Risposta = "";
    3680:	81 e1       	ldi	r24, 0x11	; 17
    3682:	9b e0       	ldi	r25, 0x0B	; 11
    3684:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
/*** GESTIONE HTTP REQUEST ***/

int HTTP_len_response = 12;
String RispostaHTTP = "";
// Ate;TARGA;CARB;LT;KM;
String RaccoltaDati[] = {"", "", "", "", "", ""};
    3688:	cb e3       	ldi	r28, 0x3B	; 59
    368a:	db e0       	ldi	r29, 0x0B	; 11
    368c:	26 97       	sbiw	r28, 0x06	; 6
    368e:	ce 01       	movw	r24, r28
    3690:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
    3694:	8b e0       	ldi	r24, 0x0B	; 11
    3696:	c7 31       	cpi	r28, 0x17	; 23
    3698:	d8 07       	cpc	r29, r24
    369a:	c1 f7       	brne	.-16     	; 0x368c <_GLOBAL__sub_D_ParametriCCEC+0x50>

uint8_t distr_selezionato = 0;
/*** GESTIONE HTTP REQUEST ***/

int HTTP_len_response = 12;
String RispostaHTTP = "";
    369c:	8b e3       	ldi	r24, 0x3B	; 59
    369e:	9b e0       	ldi	r25, 0x0B	; 11
    36a0:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
LiquidCrystal_I2C lcd(0x27, 2, 1, 0, 4, 5, 6, 7, 3, POSITIVE);  // Set the LCD I2C address
uint8_t Clessidra[8] = {0x1F, 0x11, 0x0A, 0x04, 0x04, 0x0E, 0x1F, 0x1F,};
NFC_PN532 nfc(PN532_IRQ, PN532_RESET);

String StatoAttuale = "START...";
String strURLAPI = "";
    36a4:	86 e4       	ldi	r24, 0x46	; 70
    36a6:	9b e0       	ldi	r25, 0x0B	; 11
    36a8:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>

LiquidCrystal_I2C lcd(0x27, 2, 1, 0, 4, 5, 6, 7, 3, POSITIVE);  // Set the LCD I2C address
uint8_t Clessidra[8] = {0x1F, 0x11, 0x0A, 0x04, 0x04, 0x0E, 0x1F, 0x1F,};
NFC_PN532 nfc(PN532_IRQ, PN532_RESET);

String StatoAttuale = "START...";
    36ac:	8c e4       	ldi	r24, 0x4C	; 76
    36ae:	9b e0       	ldi	r25, 0x0B	; 11
    36b0:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>

volatile int intConsecutivePresses = 0;
volatile int intConsecutiveNonPresses = 0;
const uint8_t I2C_PCA9534_ADDR = 0x20;

struct mezzoType {
    36b4:	81 e9       	ldi	r24, 0x91	; 145
    36b6:	9b e0       	ldi	r25, 0x0B	; 11
    36b8:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
    36bc:	8b e8       	ldi	r24, 0x8B	; 139
    36be:	9b e0       	ldi	r25, 0x0B	; 11
    36c0:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
    36c4:	85 e8       	ldi	r24, 0x85	; 133
    36c6:	9b e0       	ldi	r25, 0x0B	; 11
    36c8:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>

ParametriCCEC_TypeDef *ParametriCCEC; //puntatore  a Map memoria

#define numero_parametri 5

ParametriCCEC_TypeDef Parametri[numero_parametri] =
    36cc:	c1 ee       	ldi	r28, 0xE1	; 225
    36ce:	db e0       	ldi	r29, 0x0B	; 11
    36d0:	2e 97       	sbiw	r28, 0x0e	; 14
    36d2:	ce 01       	movw	r24, r28
    36d4:	0e 94 3f 03 	call	0x67e	; 0x67e <_ZN20ParametriCCEC_structD1Ev>
    36d8:	8b e0       	ldi	r24, 0x0B	; 11
    36da:	cb 39       	cpi	r28, 0x9B	; 155
    36dc:	d8 07       	cpc	r29, r24
    36de:	c1 f7       	brne	.-16     	; 0x36d0 <_GLOBAL__sub_D_ParametriCCEC+0x94>
  TARGA = "";
  
  // WDT_Prescaler_8Sec(); // 
  //while(1); // Verifico WDT
  stato_procedura = -1;
    36e0:	df 91       	pop	r29
    36e2:	cf 91       	pop	r28
    36e4:	08 95       	ret

000036e6 <setup>:
	WDTCSR  = (1<<WDE) | (1<<WDIE) | (1<<WDP3) | (1<<WDP0);
	sei();
	}
/************************************************************/

void setup() {
    36e6:	cf 92       	push	r12
    36e8:	df 92       	push	r13
    36ea:	ef 92       	push	r14
    36ec:	ff 92       	push	r15
    36ee:	0f 93       	push	r16
    36f0:	1f 93       	push	r17
    36f2:	cf 93       	push	r28
    36f4:	df 93       	push	r29
    36f6:	cd b7       	in	r28, 0x3d	; 61
    36f8:	de b7       	in	r29, 0x3e	; 62
    36fa:	64 97       	sbiw	r28, 0x14	; 20
    36fc:	0f b6       	in	r0, 0x3f	; 63
    36fe:	f8 94       	cli
    3700:	de bf       	out	0x3e, r29	; 62
    3702:	0f be       	out	0x3f, r0	; 63
    3704:	cd bf       	out	0x3d, r28	; 61
	
	WDT_off();
    3706:	0e 94 10 03 	call	0x620	; 0x620 <_Z7WDT_offv>
static const uint8_t RELE1 = PORTC7;
static const uint8_t RELE2 = PORTA7;
/*********************************************************************************************/
static inline void initSS_FLASH()  { DDRB |= (1 << SS_FLASH); } // set DDRB bit 4, sets PB4 for output
static inline void initSS_ETH()    { DDRC |= (1 << CS_W5500); } // set DDRC bit 4, sets PC4 for output
static inline void initSS_LORA()   { DDRA |= (1 << SS_LORA); }
    370a:	0c 9a       	sbi	0x01, 4	; 1
    370c:	8f e3       	ldi	r24, 0x3F	; 63
    370e:	9c e9       	ldi	r25, 0x9C	; 156
    3710:	01 97       	sbiw	r24, 0x01	; 1
    3712:	f1 f7       	brne	.-4      	; 0x3710 <setup+0x2a>
    3714:	00 c0       	rjmp	.+0      	; 0x3716 <setup+0x30>
    3716:	00 00       	nop
static inline void initSS_MOSGSM() { DDRD |= (1 << MOS_GSM); }
    3718:	55 9a       	sbi	0x0a, 5	; 10
    371a:	8f e3       	ldi	r24, 0x3F	; 63
    371c:	9c e9       	ldi	r25, 0x9C	; 156
    371e:	01 97       	sbiw	r24, 0x01	; 1
    3720:	f1 f7       	brne	.-4      	; 0x371e <setup+0x38>
    3722:	00 c0       	rjmp	.+0      	; 0x3724 <setup+0x3e>
    3724:	00 00       	nop
    3726:	8f e3       	ldi	r24, 0x3F	; 63
    3728:	9c e9       	ldi	r25, 0x9C	; 156
    372a:	01 97       	sbiw	r24, 0x01	; 1
    372c:	f1 f7       	brne	.-4      	; 0x372a <setup+0x44>
    372e:	00 c0       	rjmp	.+0      	; 0x3730 <setup+0x4a>
    3730:	00 00       	nop
static inline void initSS_DTRGSM() { DDRB |= (1 << DTR_GSM); }
static inline void initSS_WIFI()   { DDRB |= (1 << EN_WIFI); }
    3732:	23 9a       	sbi	0x04, 3	; 4
    3734:	8f e3       	ldi	r24, 0x3F	; 63
    3736:	9c e9       	ldi	r25, 0x9C	; 156
    3738:	01 97       	sbiw	r24, 0x01	; 1
    373a:	f1 f7       	brne	.-4      	; 0x3738 <setup+0x52>
    373c:	00 c0       	rjmp	.+0      	; 0x373e <setup+0x58>
    373e:	00 00       	nop
/*********************************************************************************************/
static const uint8_t RELE1 = PORTC7;
static const uint8_t RELE2 = PORTA7;
/*********************************************************************************************/
static inline void initSS_FLASH()  { DDRB |= (1 << SS_FLASH); } // set DDRB bit 4, sets PB4 for output
static inline void initSS_ETH()    { DDRC |= (1 << CS_W5500); } // set DDRC bit 4, sets PC4 for output
    3740:	3c 9a       	sbi	0x07, 4	; 7
    3742:	8f e3       	ldi	r24, 0x3F	; 63
    3744:	9c e9       	ldi	r25, 0x9C	; 156
    3746:	01 97       	sbiw	r24, 0x01	; 1
    3748:	f1 f7       	brne	.-4      	; 0x3746 <setup+0x60>
    374a:	00 c0       	rjmp	.+0      	; 0x374c <setup+0x66>
    374c:	00 00       	nop
static inline void initSS_LORA()   { DDRA |= (1 << SS_LORA); }
static inline void initSS_MOSGSM() { DDRD |= (1 << MOS_GSM); }
    374e:	55 9a       	sbi	0x0a, 5	; 10
    3750:	8f e3       	ldi	r24, 0x3F	; 63
    3752:	9c e9       	ldi	r25, 0x9C	; 156
    3754:	01 97       	sbiw	r24, 0x01	; 1
    3756:	f1 f7       	brne	.-4      	; 0x3754 <setup+0x6e>
    3758:	00 c0       	rjmp	.+0      	; 0x375a <setup+0x74>
    375a:	00 00       	nop
static inline void initSS_DTRGSM() { DDRB |= (1 << DTR_GSM); }
    375c:	20 9a       	sbi	0x04, 0	; 4
    375e:	9f ef       	ldi	r25, 0xFF	; 255
    3760:	21 ee       	ldi	r18, 0xE1	; 225
    3762:	84 e0       	ldi	r24, 0x04	; 4
    3764:	91 50       	subi	r25, 0x01	; 1
    3766:	20 40       	sbci	r18, 0x00	; 0
    3768:	80 40       	sbci	r24, 0x00	; 0
    376a:	e1 f7       	brne	.-8      	; 0x3764 <setup+0x7e>
    376c:	00 c0       	rjmp	.+0      	; 0x376e <setup+0x88>
    376e:	00 00       	nop

   /************************************************************/
   /*  DISABILITO PERIFERICHE								   */
   /************************************************************/
   _delay_ms(100);
   disable_ETH();
    3770:	0e 94 95 01 	call	0x32a	; 0x32a <_ZL11disable_ETHv>
    3774:	9f ef       	ldi	r25, 0xFF	; 255
    3776:	21 ee       	ldi	r18, 0xE1	; 225
    3778:	84 e0       	ldi	r24, 0x04	; 4
    377a:	91 50       	subi	r25, 0x01	; 1
    377c:	20 40       	sbci	r18, 0x00	; 0
    377e:	80 40       	sbci	r24, 0x00	; 0
    3780:	e1 f7       	brne	.-8      	; 0x377a <setup+0x94>
    3782:	00 c0       	rjmp	.+0      	; 0x3784 <setup+0x9e>
    3784:	00 00       	nop
	
static inline void enable_ETH()    { PORTC &= ~(1 << CS_W5500); } // Set 0 Bit 4 PORTC Register
static inline void enable_FLASH()  { PORTB &= ~(1 << SS_FLASH); } // Set 0 Bit 4 PORTB Register

static inline void disable_ETH()   { PORTC |= (1 << CS_W5500);	} // Set 1 Bit 4 PORTC Register
static inline void disable_FLASH() { PORTB |= (1 << SS_FLASH);  }
    3786:	2c 9a       	sbi	0x05, 4	; 5
    3788:	9f ef       	ldi	r25, 0xFF	; 255
    378a:	21 ee       	ldi	r18, 0xE1	; 225
    378c:	84 e0       	ldi	r24, 0x04	; 4
    378e:	91 50       	subi	r25, 0x01	; 1
    3790:	20 40       	sbci	r18, 0x00	; 0
    3792:	80 40       	sbci	r24, 0x00	; 0
    3794:	e1 f7       	brne	.-8      	; 0x378e <setup+0xa8>
    3796:	00 c0       	rjmp	.+0      	; 0x3798 <setup+0xb2>
    3798:	00 00       	nop
static inline void disable_LORA()  { PORTA |= (1 << SS_LORA);	}
static inline void disable_MOSGSM(){ PORTD &= ~(1 << MOS_GSM);	}
static inline void disable_DTRGSM(){ PORTB |= (1 << DTR_GSM);	}
    379a:	28 9a       	sbi	0x05, 0	; 5
    379c:	9f ef       	ldi	r25, 0xFF	; 255
    379e:	21 ee       	ldi	r18, 0xE1	; 225
    37a0:	84 e0       	ldi	r24, 0x04	; 4
    37a2:	91 50       	subi	r25, 0x01	; 1
    37a4:	20 40       	sbci	r18, 0x00	; 0
    37a6:	80 40       	sbci	r24, 0x00	; 0
    37a8:	e1 f7       	brne	.-8      	; 0x37a2 <setup+0xbc>
    37aa:	00 c0       	rjmp	.+0      	; 0x37ac <setup+0xc6>
    37ac:	00 00       	nop
	
static inline void enable_ETH()    { PORTC &= ~(1 << CS_W5500); } // Set 0 Bit 4 PORTC Register
static inline void enable_FLASH()  { PORTB &= ~(1 << SS_FLASH); } // Set 0 Bit 4 PORTB Register

static inline void disable_ETH()   { PORTC |= (1 << CS_W5500);	} // Set 1 Bit 4 PORTC Register
static inline void disable_FLASH() { PORTB |= (1 << SS_FLASH);  }
    37ae:	2c 9a       	sbi	0x05, 4	; 5
    37b0:	9f ef       	ldi	r25, 0xFF	; 255
    37b2:	21 ee       	ldi	r18, 0xE1	; 225
    37b4:	84 e0       	ldi	r24, 0x04	; 4
    37b6:	91 50       	subi	r25, 0x01	; 1
    37b8:	20 40       	sbci	r18, 0x00	; 0
    37ba:	80 40       	sbci	r24, 0x00	; 0
    37bc:	e1 f7       	brne	.-8      	; 0x37b6 <setup+0xd0>
    37be:	00 c0       	rjmp	.+0      	; 0x37c0 <setup+0xda>
    37c0:	00 00       	nop
static inline void disable_LORA()  { PORTA |= (1 << SS_LORA);	}
    37c2:	14 9a       	sbi	0x02, 4	; 2
    37c4:	9f ef       	ldi	r25, 0xFF	; 255
    37c6:	21 ee       	ldi	r18, 0xE1	; 225
    37c8:	84 e0       	ldi	r24, 0x04	; 4
    37ca:	91 50       	subi	r25, 0x01	; 1
    37cc:	20 40       	sbci	r18, 0x00	; 0
    37ce:	80 40       	sbci	r24, 0x00	; 0
    37d0:	e1 f7       	brne	.-8      	; 0x37ca <setup+0xe4>
    37d2:	00 c0       	rjmp	.+0      	; 0x37d4 <setup+0xee>
    37d4:	00 00       	nop
static inline void disable_MOSGSM(){ PORTD &= ~(1 << MOS_GSM);	}
static inline void disable_DTRGSM(){ PORTB |= (1 << DTR_GSM);	}
static inline void disable_WIFI()  { PORTB &= ~(1 << EN_WIFI);  }	
    37d6:	2b 98       	cbi	0x05, 3	; 5
    37d8:	9f ef       	ldi	r25, 0xFF	; 255
    37da:	21 ee       	ldi	r18, 0xE1	; 225
    37dc:	84 e0       	ldi	r24, 0x04	; 4
    37de:	91 50       	subi	r25, 0x01	; 1
    37e0:	20 40       	sbci	r18, 0x00	; 0
    37e2:	80 40       	sbci	r24, 0x00	; 0
    37e4:	e1 f7       	brne	.-8      	; 0x37de <setup+0xf8>
    37e6:	00 c0       	rjmp	.+0      	; 0x37e8 <setup+0x102>
    37e8:	00 00       	nop
    37ea:	9f ef       	ldi	r25, 0xFF	; 255
    37ec:	21 ee       	ldi	r18, 0xE1	; 225
    37ee:	84 e0       	ldi	r24, 0x04	; 4
    37f0:	91 50       	subi	r25, 0x01	; 1
    37f2:	20 40       	sbci	r18, 0x00	; 0
    37f4:	80 40       	sbci	r24, 0x00	; 0
    37f6:	e1 f7       	brne	.-8      	; 0x37f0 <setup+0x10a>
    37f8:	00 c0       	rjmp	.+0      	; 0x37fa <setup+0x114>
    37fa:	00 00       	nop
   disable_WIFI();
   _delay_ms(100);
   /*******************************************************************************************/
  // Serial.begin(115200);
  _delay_ms(100);
  Serial.println(" inizio Setup ......");
    37fc:	6a ec       	ldi	r22, 0xCA	; 202
    37fe:	78 e0       	ldi	r23, 0x08	; 8
    3800:	88 e3       	ldi	r24, 0x38	; 56
    3802:	9d e0       	ldi	r25, 0x0D	; 13
    3804:	0e 94 cf 39 	call	0x739e	; 0x739e <_ZN5Print7printlnEPKc>
  printLine();
    3808:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>

  /*******************************************************************************************/
  ParametriCCEC = Parametri;  
    380c:	8b e9       	ldi	r24, 0x9B	; 155
    380e:	9b e0       	ldi	r25, 0x0B	; 11
    3810:	90 93 e2 0b 	sts	0x0BE2, r25	; 0x800be2 <ParametriCCEC+0x1>
    3814:	80 93 e1 0b 	sts	0x0BE1, r24	; 0x800be1 <ParametriCCEC>
  printLine();
    3818:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
  Serial.print("EEPROM utilizzata (byte): ");
    381c:	6f ed       	ldi	r22, 0xDF	; 223
    381e:	78 e0       	ldi	r23, 0x08	; 8
    3820:	88 e3       	ldi	r24, 0x38	; 56
    3822:	9d e0       	ldi	r25, 0x0D	; 13
    3824:	0e 94 a4 39 	call	0x7348	; 0x7348 <_ZN5Print5printEPKc>
  Serial.print(EEPROM.length());
    3828:	4a e0       	ldi	r20, 0x0A	; 10
    382a:	50 e0       	ldi	r21, 0x00	; 0
    382c:	60 e0       	ldi	r22, 0x00	; 0
    382e:	70 e1       	ldi	r23, 0x10	; 16
    3830:	88 e3       	ldi	r24, 0x38	; 56
    3832:	9d e0       	ldi	r25, 0x0D	; 13
    3834:	0e 94 38 3a 	call	0x7470	; 0x7470 <_ZN5Print5printEji>
  Serial.println(" ");
    3838:	62 e0       	ldi	r22, 0x02	; 2
    383a:	72 e0       	ldi	r23, 0x02	; 2
    383c:	88 e3       	ldi	r24, 0x38	; 56
    383e:	9d e0       	ldi	r25, 0x0D	; 13
    3840:	0e 94 cf 39 	call	0x739e	; 0x739e <_ZN5Print7printlnEPKc>
  Serial.print("Scrittura Parametri CCEC");
    3844:	6a ef       	ldi	r22, 0xFA	; 250
    3846:	78 e0       	ldi	r23, 0x08	; 8
    3848:	88 e3       	ldi	r24, 0x38	; 56
    384a:	9d e0       	ldi	r25, 0x0D	; 13
    384c:	0e 94 a4 39 	call	0x7348	; 0x7348 <_ZN5Print5printEPKc>

  String app = "";
    3850:	6f ef       	ldi	r22, 0xFF	; 255
    3852:	71 e0       	ldi	r23, 0x01	; 1
    3854:	ce 01       	movw	r24, r28
    3856:	0f 96       	adiw	r24, 0x0f	; 15
    3858:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>

 clearEEPROM(0,EEPROM.length());
    385c:	60 e0       	ldi	r22, 0x00	; 0
    385e:	70 e1       	ldi	r23, 0x10	; 16
    3860:	80 e0       	ldi	r24, 0x00	; 0
    3862:	90 e0       	ldi	r25, 0x00	; 0
    3864:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <_Z11clearEEPROMii>
 if (write_eeprom_string_struct(ParametriCCEC[0])) { Serial.println("WRITE OK");}
    3868:	60 91 e1 0b 	lds	r22, 0x0BE1	; 0x800be1 <ParametriCCEC>
    386c:	70 91 e2 0b 	lds	r23, 0x0BE2	; 0x800be2 <ParametriCCEC+0x1>
    3870:	ce 01       	movw	r24, r28
    3872:	01 96       	adiw	r24, 0x01	; 1
    3874:	0e 94 26 03 	call	0x64c	; 0x64c <_ZN20ParametriCCEC_structC1ERKS_>
    3878:	ce 01       	movw	r24, r28
    387a:	01 96       	adiw	r24, 0x01	; 1
    387c:	0e 94 46 02 	call	0x48c	; 0x48c <_Z26write_eeprom_string_struct20ParametriCCEC_struct>
    3880:	18 2f       	mov	r17, r24
    3882:	ce 01       	movw	r24, r28
    3884:	01 96       	adiw	r24, 0x01	; 1
    3886:	0e 94 3f 03 	call	0x67e	; 0x67e <_ZN20ParametriCCEC_structD1Ev>
    388a:	11 23       	and	r17, r17
    388c:	31 f0       	breq	.+12     	; 0x389a <setup+0x1b4>
    388e:	63 e1       	ldi	r22, 0x13	; 19
    3890:	79 e0       	ldi	r23, 0x09	; 9
    3892:	88 e3       	ldi	r24, 0x38	; 56
    3894:	9d e0       	ldi	r25, 0x0D	; 13
    3896:	0e 94 cf 39 	call	0x739e	; 0x739e <_ZN5Print7printlnEPKc>
 if (write_eeprom_string_struct(ParametriCCEC[1])) { Serial.println("WRITE OK");}
    389a:	60 91 e1 0b 	lds	r22, 0x0BE1	; 0x800be1 <ParametriCCEC>
    389e:	70 91 e2 0b 	lds	r23, 0x0BE2	; 0x800be2 <ParametriCCEC+0x1>
    38a2:	62 5f       	subi	r22, 0xF2	; 242
    38a4:	7f 4f       	sbci	r23, 0xFF	; 255
    38a6:	ce 01       	movw	r24, r28
    38a8:	01 96       	adiw	r24, 0x01	; 1
    38aa:	0e 94 26 03 	call	0x64c	; 0x64c <_ZN20ParametriCCEC_structC1ERKS_>
    38ae:	ce 01       	movw	r24, r28
    38b0:	01 96       	adiw	r24, 0x01	; 1
    38b2:	0e 94 46 02 	call	0x48c	; 0x48c <_Z26write_eeprom_string_struct20ParametriCCEC_struct>
    38b6:	18 2f       	mov	r17, r24
    38b8:	ce 01       	movw	r24, r28
    38ba:	01 96       	adiw	r24, 0x01	; 1
    38bc:	0e 94 3f 03 	call	0x67e	; 0x67e <_ZN20ParametriCCEC_structD1Ev>
    38c0:	11 23       	and	r17, r17
    38c2:	31 f0       	breq	.+12     	; 0x38d0 <setup+0x1ea>
    38c4:	63 e1       	ldi	r22, 0x13	; 19
    38c6:	79 e0       	ldi	r23, 0x09	; 9
    38c8:	88 e3       	ldi	r24, 0x38	; 56
    38ca:	9d e0       	ldi	r25, 0x0D	; 13
    38cc:	0e 94 cf 39 	call	0x739e	; 0x739e <_ZN5Print7printlnEPKc>
 if (write_eeprom_string_struct(ParametriCCEC[2])) { Serial.println("WRITE OK");}
    38d0:	60 91 e1 0b 	lds	r22, 0x0BE1	; 0x800be1 <ParametriCCEC>
    38d4:	70 91 e2 0b 	lds	r23, 0x0BE2	; 0x800be2 <ParametriCCEC+0x1>
    38d8:	64 5e       	subi	r22, 0xE4	; 228
    38da:	7f 4f       	sbci	r23, 0xFF	; 255
    38dc:	ce 01       	movw	r24, r28
    38de:	01 96       	adiw	r24, 0x01	; 1
    38e0:	0e 94 26 03 	call	0x64c	; 0x64c <_ZN20ParametriCCEC_structC1ERKS_>
    38e4:	ce 01       	movw	r24, r28
    38e6:	01 96       	adiw	r24, 0x01	; 1
    38e8:	0e 94 46 02 	call	0x48c	; 0x48c <_Z26write_eeprom_string_struct20ParametriCCEC_struct>
    38ec:	18 2f       	mov	r17, r24
    38ee:	ce 01       	movw	r24, r28
    38f0:	01 96       	adiw	r24, 0x01	; 1
    38f2:	0e 94 3f 03 	call	0x67e	; 0x67e <_ZN20ParametriCCEC_structD1Ev>
    38f6:	11 23       	and	r17, r17
    38f8:	31 f0       	breq	.+12     	; 0x3906 <setup+0x220>
    38fa:	63 e1       	ldi	r22, 0x13	; 19
    38fc:	79 e0       	ldi	r23, 0x09	; 9
    38fe:	88 e3       	ldi	r24, 0x38	; 56
    3900:	9d e0       	ldi	r25, 0x0D	; 13
    3902:	0e 94 cf 39 	call	0x739e	; 0x739e <_ZN5Print7printlnEPKc>
 if (write_eeprom_string_struct(ParametriCCEC[3])) { Serial.println("WRITE OK");}
    3906:	60 91 e1 0b 	lds	r22, 0x0BE1	; 0x800be1 <ParametriCCEC>
    390a:	70 91 e2 0b 	lds	r23, 0x0BE2	; 0x800be2 <ParametriCCEC+0x1>
    390e:	66 5d       	subi	r22, 0xD6	; 214
    3910:	7f 4f       	sbci	r23, 0xFF	; 255
    3912:	ce 01       	movw	r24, r28
    3914:	01 96       	adiw	r24, 0x01	; 1
    3916:	0e 94 26 03 	call	0x64c	; 0x64c <_ZN20ParametriCCEC_structC1ERKS_>
    391a:	ce 01       	movw	r24, r28
    391c:	01 96       	adiw	r24, 0x01	; 1
    391e:	0e 94 46 02 	call	0x48c	; 0x48c <_Z26write_eeprom_string_struct20ParametriCCEC_struct>
    3922:	18 2f       	mov	r17, r24
    3924:	ce 01       	movw	r24, r28
    3926:	01 96       	adiw	r24, 0x01	; 1
    3928:	0e 94 3f 03 	call	0x67e	; 0x67e <_ZN20ParametriCCEC_structD1Ev>
    392c:	11 23       	and	r17, r17
    392e:	31 f0       	breq	.+12     	; 0x393c <setup+0x256>
    3930:	63 e1       	ldi	r22, 0x13	; 19
    3932:	79 e0       	ldi	r23, 0x09	; 9
    3934:	88 e3       	ldi	r24, 0x38	; 56
    3936:	9d e0       	ldi	r25, 0x0D	; 13
    3938:	0e 94 cf 39 	call	0x739e	; 0x739e <_ZN5Print7printlnEPKc>
 if (write_eeprom_string_struct(ParametriCCEC[4])) { Serial.println("WRITE OK");}
    393c:	60 91 e1 0b 	lds	r22, 0x0BE1	; 0x800be1 <ParametriCCEC>
    3940:	70 91 e2 0b 	lds	r23, 0x0BE2	; 0x800be2 <ParametriCCEC+0x1>
    3944:	68 5c       	subi	r22, 0xC8	; 200
    3946:	7f 4f       	sbci	r23, 0xFF	; 255
    3948:	ce 01       	movw	r24, r28
    394a:	01 96       	adiw	r24, 0x01	; 1
    394c:	0e 94 26 03 	call	0x64c	; 0x64c <_ZN20ParametriCCEC_structC1ERKS_>
    3950:	ce 01       	movw	r24, r28
    3952:	01 96       	adiw	r24, 0x01	; 1
    3954:	0e 94 46 02 	call	0x48c	; 0x48c <_Z26write_eeprom_string_struct20ParametriCCEC_struct>
    3958:	18 2f       	mov	r17, r24
    395a:	ce 01       	movw	r24, r28
    395c:	01 96       	adiw	r24, 0x01	; 1
    395e:	0e 94 3f 03 	call	0x67e	; 0x67e <_ZN20ParametriCCEC_structD1Ev>
    3962:	11 23       	and	r17, r17
    3964:	31 f0       	breq	.+12     	; 0x3972 <setup+0x28c>
    3966:	63 e1       	ldi	r22, 0x13	; 19
    3968:	79 e0       	ldi	r23, 0x09	; 9
    396a:	88 e3       	ldi	r24, 0x38	; 56
    396c:	9d e0       	ldi	r25, 0x0D	; 13
    396e:	0e 94 cf 39 	call	0x739e	; 0x739e <_ZN5Print7printlnEPKc>
 printLine();  
    3972:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
  
/*******************************************************************************************/
  DDRC |= (1 << BUZZER); // set pin BUZZER (PC6) for output
    3976:	3e 9a       	sbi	0x07, 6	; 7
  DDRC |= (1 << RELE1);  // Rele1
    3978:	3f 9a       	sbi	0x07, 7	; 7
  DDRA |= (1 << RELE2);  // Rele2   // set PA7 e PC7 come output
    397a:	0f 9a       	sbi	0x01, 7	; 1
    397c:	8f e3       	ldi	r24, 0x3F	; 63
    397e:	9c e9       	ldi	r25, 0x9C	; 156
    3980:	01 97       	sbiw	r24, 0x01	; 1
    3982:	f1 f7       	brne	.-4      	; 0x3980 <setup+0x29a>
    3984:	00 c0       	rjmp	.+0      	; 0x3986 <setup+0x2a0>
    3986:	00 00       	nop
  _delay_ms(10);
  SET_BIT(PORTC, RELE1); // Apri RELE1
    3988:	47 9a       	sbi	0x08, 7	; 8
    398a:	8f e3       	ldi	r24, 0x3F	; 63
    398c:	9c e9       	ldi	r25, 0x9C	; 156
    398e:	01 97       	sbiw	r24, 0x01	; 1
    3990:	f1 f7       	brne	.-4      	; 0x398e <setup+0x2a8>
    3992:	00 c0       	rjmp	.+0      	; 0x3994 <setup+0x2ae>
    3994:	00 00       	nop
  _delay_ms(10);
  SET_BIT(PORTA, RELE2); // Apri RELE2
    3996:	17 9a       	sbi	0x02, 7	; 2
  printLine();
    3998:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
  /***************************LCD******************************/
  lcd.begin(20, 4);	 // Inizializza display LCD 20x4 e accendi e spegni 2 volte
    399c:	20 e0       	ldi	r18, 0x00	; 0
    399e:	44 e0       	ldi	r20, 0x04	; 4
    39a0:	64 e1       	ldi	r22, 0x14	; 20
    39a2:	83 e6       	ldi	r24, 0x63	; 99
    39a4:	9b e0       	ldi	r25, 0x0B	; 11
    39a6:	0e 94 1f 33 	call	0x663e	; 0x663e <_ZN17LiquidCrystal_I2C5beginEhhh>

  // ------- 2 blinks -------------
  for (int i = 0; i < 2; i++)
  {
    lcd.backlight();
    39aa:	83 e6       	ldi	r24, 0x63	; 99
    39ac:	9b e0       	ldi	r25, 0x0B	; 11
    39ae:	0e 94 fc 30 	call	0x61f8	; 0x61f8 <_ZN3LCD9backlightEv>
    39b2:	9f ef       	ldi	r25, 0xFF	; 255
    39b4:	24 e3       	ldi	r18, 0x34	; 52
    39b6:	8c e0       	ldi	r24, 0x0C	; 12
    39b8:	91 50       	subi	r25, 0x01	; 1
    39ba:	20 40       	sbci	r18, 0x00	; 0
    39bc:	80 40       	sbci	r24, 0x00	; 0
    39be:	e1 f7       	brne	.-8      	; 0x39b8 <setup+0x2d2>
    39c0:	00 c0       	rjmp	.+0      	; 0x39c2 <setup+0x2dc>
    39c2:	00 00       	nop
    _delay_ms(250);
    lcd.noBacklight();
    39c4:	83 e6       	ldi	r24, 0x63	; 99
    39c6:	9b e0       	ldi	r25, 0x0B	; 11
    39c8:	0e 94 04 31 	call	0x6208	; 0x6208 <_ZN3LCD11noBacklightEv>
    39cc:	9f ef       	ldi	r25, 0xFF	; 255
    39ce:	24 e3       	ldi	r18, 0x34	; 52
    39d0:	8c e0       	ldi	r24, 0x0C	; 12
    39d2:	91 50       	subi	r25, 0x01	; 1
    39d4:	20 40       	sbci	r18, 0x00	; 0
    39d6:	80 40       	sbci	r24, 0x00	; 0
    39d8:	e1 f7       	brne	.-8      	; 0x39d2 <setup+0x2ec>
    39da:	00 c0       	rjmp	.+0      	; 0x39dc <setup+0x2f6>
    39dc:	00 00       	nop
  lcd.begin(20, 4);	 // Inizializza display LCD 20x4 e accendi e spegni 2 volte

  // ------- 2 blinks -------------
  for (int i = 0; i < 2; i++)
  {
    lcd.backlight();
    39de:	83 e6       	ldi	r24, 0x63	; 99
    39e0:	9b e0       	ldi	r25, 0x0B	; 11
    39e2:	0e 94 fc 30 	call	0x61f8	; 0x61f8 <_ZN3LCD9backlightEv>
    39e6:	9f ef       	ldi	r25, 0xFF	; 255
    39e8:	24 e3       	ldi	r18, 0x34	; 52
    39ea:	8c e0       	ldi	r24, 0x0C	; 12
    39ec:	91 50       	subi	r25, 0x01	; 1
    39ee:	20 40       	sbci	r18, 0x00	; 0
    39f0:	80 40       	sbci	r24, 0x00	; 0
    39f2:	e1 f7       	brne	.-8      	; 0x39ec <setup+0x306>
    39f4:	00 c0       	rjmp	.+0      	; 0x39f6 <setup+0x310>
    39f6:	00 00       	nop
    _delay_ms(250);
    lcd.noBacklight();
    39f8:	83 e6       	ldi	r24, 0x63	; 99
    39fa:	9b e0       	ldi	r25, 0x0B	; 11
    39fc:	0e 94 04 31 	call	0x6208	; 0x6208 <_ZN3LCD11noBacklightEv>
    3a00:	9f ef       	ldi	r25, 0xFF	; 255
    3a02:	24 e3       	ldi	r18, 0x34	; 52
    3a04:	8c e0       	ldi	r24, 0x0C	; 12
    3a06:	91 50       	subi	r25, 0x01	; 1
    3a08:	20 40       	sbci	r18, 0x00	; 0
    3a0a:	80 40       	sbci	r24, 0x00	; 0
    3a0c:	e1 f7       	brne	.-8      	; 0x3a06 <setup+0x320>
    3a0e:	00 c0       	rjmp	.+0      	; 0x3a10 <setup+0x32a>
    3a10:	00 00       	nop
    _delay_ms(250);
  }

  lcd.createChar(1, Clessidra); // Creo CHAR Clessidra
    3a12:	47 e5       	ldi	r20, 0x57	; 87
    3a14:	51 e0       	ldi	r21, 0x01	; 1
    3a16:	61 e0       	ldi	r22, 0x01	; 1
    3a18:	83 e6       	ldi	r24, 0x63	; 99
    3a1a:	9b e0       	ldi	r25, 0x0B	; 11
    3a1c:	0e 94 e2 31 	call	0x63c4	; 0x63c4 <_ZN3LCD10createCharEhPh>
    3a20:	9f ef       	ldi	r25, 0xFF	; 255
    3a22:	29 ef       	ldi	r18, 0xF9	; 249
    3a24:	80 e0       	ldi	r24, 0x00	; 0
    3a26:	91 50       	subi	r25, 0x01	; 1
    3a28:	20 40       	sbci	r18, 0x00	; 0
    3a2a:	80 40       	sbci	r24, 0x00	; 0
    3a2c:	e1 f7       	brne	.-8      	; 0x3a26 <setup+0x340>
    3a2e:	00 c0       	rjmp	.+0      	; 0x3a30 <setup+0x34a>
    3a30:	00 00       	nop
  _delay_ms(20);
  lcd.backlight();
    3a32:	83 e6       	ldi	r24, 0x63	; 99
    3a34:	9b e0       	ldi	r25, 0x0B	; 11
    3a36:	0e 94 fc 30 	call	0x61f8	; 0x61f8 <_ZN3LCD9backlightEv>
    3a3a:	03 ef       	ldi	r16, 0xF3	; 243
    3a3c:	1a e0       	ldi	r17, 0x0A	; 10
    3a3e:	9b e0       	ldi	r25, 0x0B	; 11
    3a40:	e9 2e       	mov	r14, r25
    3a42:	9b e0       	ldi	r25, 0x0B	; 11
    3a44:	f9 2e       	mov	r15, r25

  for (int r = 0; r < 4; r++)
    righeDisplay[r] = "";
    3a46:	6f ef       	ldi	r22, 0xFF	; 255
    3a48:	71 e0       	ldi	r23, 0x01	; 1
    3a4a:	c8 01       	movw	r24, r16
    3a4c:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
    3a50:	0a 5f       	subi	r16, 0xFA	; 250
    3a52:	1f 4f       	sbci	r17, 0xFF	; 255

  lcd.createChar(1, Clessidra); // Creo CHAR Clessidra
  _delay_ms(20);
  lcd.backlight();

  for (int r = 0; r < 4; r++)
    3a54:	e0 16       	cp	r14, r16
    3a56:	f1 06       	cpc	r15, r17
    3a58:	b1 f7       	brne	.-20     	; 0x3a46 <setup+0x360>
    righeDisplay[r] = "";

  printLine();
    3a5a:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>

  /***************************NFC*************************/

  nfc.begin();
    3a5e:	82 e5       	ldi	r24, 0x52	; 82
    3a60:	9b e0       	ldi	r25, 0x0B	; 11
    3a62:	d7 d1       	rcall	.+942    	; 0x3e12 <_ZN9NFC_PN5325beginEv>
    3a64:	9f ef       	ldi	r25, 0xFF	; 255
    3a66:	20 e7       	ldi	r18, 0x70	; 112
    3a68:	82 e0       	ldi	r24, 0x02	; 2
    3a6a:	91 50       	subi	r25, 0x01	; 1
    3a6c:	20 40       	sbci	r18, 0x00	; 0
    3a6e:	80 40       	sbci	r24, 0x00	; 0
    3a70:	e1 f7       	brne	.-8      	; 0x3a6a <setup+0x384>
    3a72:	00 c0       	rjmp	.+0      	; 0x3a74 <setup+0x38e>
    3a74:	00 00       	nop

  _delay_ms(50);

  uint32_t versiondata = nfc.getFirmwareVersion();
    3a76:	82 e5       	ldi	r24, 0x52	; 82
    3a78:	9b e0       	ldi	r25, 0x0B	; 11
    3a7a:	46 d3       	rcall	.+1676   	; 0x4108 <_ZN9NFC_PN53218getFirmwareVersionEv>
    3a7c:	6b 01       	movw	r12, r22
    3a7e:	7c 01       	movw	r14, r24
  if (! versiondata) {
    3a80:	67 2b       	or	r22, r23
    3a82:	68 2b       	or	r22, r24
    3a84:	69 2b       	or	r22, r25
    3a86:	69 f5       	brne	.+90     	; 0x3ae2 <setup+0x3fc>
    Serial.print("Modulo PN532 non trovato");
    3a88:	6c e1       	ldi	r22, 0x1C	; 28
    3a8a:	79 e0       	ldi	r23, 0x09	; 9
    3a8c:	88 e3       	ldi	r24, 0x38	; 56
    3a8e:	9d e0       	ldi	r25, 0x0D	; 13
    3a90:	0e 94 a4 39 	call	0x7348	; 0x7348 <_ZN5Print5printEPKc>
    lcd.backlight();
    3a94:	83 e6       	ldi	r24, 0x63	; 99
    3a96:	9b e0       	ldi	r25, 0x0B	; 11
    3a98:	0e 94 fc 30 	call	0x61f8	; 0x61f8 <_ZN3LCD9backlightEv>
    3a9c:	9f ef       	ldi	r25, 0xFF	; 255
    3a9e:	24 e3       	ldi	r18, 0x34	; 52
    3aa0:	8c e0       	ldi	r24, 0x0C	; 12
    3aa2:	91 50       	subi	r25, 0x01	; 1
    3aa4:	20 40       	sbci	r18, 0x00	; 0
    3aa6:	80 40       	sbci	r24, 0x00	; 0
    3aa8:	e1 f7       	brne	.-8      	; 0x3aa2 <setup+0x3bc>
    3aaa:	00 c0       	rjmp	.+0      	; 0x3aac <setup+0x3c6>
    3aac:	00 00       	nop
    _delay_ms(250);
    lcd.clear();
    3aae:	83 e6       	ldi	r24, 0x63	; 99
    3ab0:	9b e0       	ldi	r25, 0x0B	; 11
    3ab2:	0e 94 14 31 	call	0x6228	; 0x6228 <_ZN3LCD5clearEv>
    lcd.print("Modulo PN532 non trovato ");
    3ab6:	65 e3       	ldi	r22, 0x35	; 53
    3ab8:	79 e0       	ldi	r23, 0x09	; 9
    3aba:	83 e6       	ldi	r24, 0x63	; 99
    3abc:	9b e0       	ldi	r25, 0x0B	; 11
    3abe:	0e 94 a4 39 	call	0x7348	; 0x7348 <_ZN5Print5printEPKc>
    3ac2:	9f ef       	ldi	r25, 0xFF	; 255
    3ac4:	27 ea       	ldi	r18, 0xA7	; 167
    3ac6:	81 e6       	ldi	r24, 0x61	; 97
    3ac8:	91 50       	subi	r25, 0x01	; 1
    3aca:	20 40       	sbci	r18, 0x00	; 0
    3acc:	80 40       	sbci	r24, 0x00	; 0
    3ace:	e1 f7       	brne	.-8      	; 0x3ac8 <setup+0x3e2>
    3ad0:	00 c0       	rjmp	.+0      	; 0x3ad2 <setup+0x3ec>
    3ad2:	00 00       	nop
    _delay_ms(2000);
    StatoAttuale  = " CHIAMA ASSISTENZA";
    3ad4:	6f e4       	ldi	r22, 0x4F	; 79
    3ad6:	79 e0       	ldi	r23, 0x09	; 9
    3ad8:	8c e4       	ldi	r24, 0x4C	; 76
    3ada:	9b e0       	ldi	r25, 0x0B	; 11
    3adc:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
    3ae0:	06 c0       	rjmp	.+12     	; 0x3aee <setup+0x408>
    //while (1); // halt  // Aspetta per sempre
  } else {
    Serial.println("Modulo NFC OK ......");
    3ae2:	62 e6       	ldi	r22, 0x62	; 98
    3ae4:	79 e0       	ldi	r23, 0x09	; 9
    3ae6:	88 e3       	ldi	r24, 0x38	; 56
    3ae8:	9d e0       	ldi	r25, 0x0D	; 13
    3aea:	0e 94 cf 39 	call	0x739e	; 0x739e <_ZN5Print7printlnEPKc>
  }

  Serial.print("Found chip PN5"); Serial.println((versiondata >> 24) & 0xFF, HEX);
    3aee:	67 e7       	ldi	r22, 0x77	; 119
    3af0:	79 e0       	ldi	r23, 0x09	; 9
    3af2:	88 e3       	ldi	r24, 0x38	; 56
    3af4:	9d e0       	ldi	r25, 0x0D	; 13
    3af6:	0e 94 a4 39 	call	0x7348	; 0x7348 <_ZN5Print5printEPKc>
    3afa:	4f 2d       	mov	r20, r15
    3afc:	55 27       	eor	r21, r21
    3afe:	66 27       	eor	r22, r22
    3b00:	77 27       	eor	r23, r23
    3b02:	20 e1       	ldi	r18, 0x10	; 16
    3b04:	30 e0       	ldi	r19, 0x00	; 0
    3b06:	88 e3       	ldi	r24, 0x38	; 56
    3b08:	9d e0       	ldi	r25, 0x0D	; 13
    3b0a:	0e 94 3d 3a 	call	0x747a	; 0x747a <_ZN5Print7printlnEmi>
  Serial.print("Firmware ver. "); Serial.print((versiondata >> 16) & 0xFF, DEC);
    3b0e:	66 e8       	ldi	r22, 0x86	; 134
    3b10:	79 e0       	ldi	r23, 0x09	; 9
    3b12:	88 e3       	ldi	r24, 0x38	; 56
    3b14:	9d e0       	ldi	r25, 0x0D	; 13
    3b16:	0e 94 a4 39 	call	0x7348	; 0x7348 <_ZN5Print5printEPKc>
    3b1a:	4e 2d       	mov	r20, r14
    3b1c:	50 e0       	ldi	r21, 0x00	; 0
    3b1e:	60 e0       	ldi	r22, 0x00	; 0
    3b20:	70 e0       	ldi	r23, 0x00	; 0
    3b22:	2a e0       	ldi	r18, 0x0A	; 10
    3b24:	30 e0       	ldi	r19, 0x00	; 0
    3b26:	88 e3       	ldi	r24, 0x38	; 56
    3b28:	9d e0       	ldi	r25, 0x0D	; 13
    3b2a:	0e 94 26 3a 	call	0x744c	; 0x744c <_ZN5Print5printEmi>
  Serial.print('.'); Serial.println((versiondata >> 8) & 0xFF, DEC);
    3b2e:	6e e2       	ldi	r22, 0x2E	; 46
    3b30:	88 e3       	ldi	r24, 0x38	; 56
    3b32:	9d e0       	ldi	r25, 0x0D	; 13
    3b34:	0e 94 a5 39 	call	0x734a	; 0x734a <_ZN5Print5printEc>
    3b38:	4d 2d       	mov	r20, r13
    3b3a:	50 e0       	ldi	r21, 0x00	; 0
    3b3c:	60 e0       	ldi	r22, 0x00	; 0
    3b3e:	70 e0       	ldi	r23, 0x00	; 0
    3b40:	2a e0       	ldi	r18, 0x0A	; 10
    3b42:	30 e0       	ldi	r19, 0x00	; 0
    3b44:	88 e3       	ldi	r24, 0x38	; 56
    3b46:	9d e0       	ldi	r25, 0x0D	; 13
    3b48:	0e 94 3d 3a 	call	0x747a	; 0x747a <_ZN5Print7printlnEmi>

  nfc.setPassiveActivationRetries(0xFF);
    3b4c:	6f ef       	ldi	r22, 0xFF	; 255
    3b4e:	82 e5       	ldi	r24, 0x52	; 82
    3b50:	9b e0       	ldi	r25, 0x0B	; 11
    3b52:	3d d3       	rcall	.+1658   	; 0x41ce <_ZN9NFC_PN53227setPassiveActivationRetriesEh>
  nfc.SAMConfig();
    3b54:	82 e5       	ldi	r24, 0x52	; 82
    3b56:	9b e0       	ldi	r25, 0x0B	; 11
    3b58:	16 d3       	rcall	.+1580   	; 0x4186 <_ZN9NFC_PN5329SAMConfigEv>
    3b5a:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
  printLine();
    3b5e:	40 ea       	ldi	r20, 0xA0	; 160
  
  /*************************** RTC **********************************/
  while (!DS3231M.begin()) {
    3b60:	56 e8       	ldi	r21, 0x86	; 134
    3b62:	61 e0       	ldi	r22, 0x01	; 1
    3b64:	70 e0       	ldi	r23, 0x00	; 0
    3b66:	85 eb       	ldi	r24, 0xB5	; 181
    3b68:	9a e0       	ldi	r25, 0x0A	; 10
    3b6a:	45 d6       	rcall	.+3210   	; 0x47f6 <_ZN13DS3231M_Class5beginEm>
    3b6c:	81 11       	cpse	r24, r1
    3b6e:	10 c0       	rjmp	.+32     	; 0x3b90 <setup+0x4aa>
    3b70:	64 ee       	ldi	r22, 0xE4	; 228
    Serial.println(F("non trovo modulo RTC DS3231MM. Riprovo tra 3s."));
    3b72:	71 e0       	ldi	r23, 0x01	; 1
    3b74:	88 e3       	ldi	r24, 0x38	; 56
    3b76:	9d e0       	ldi	r25, 0x0D	; 13
    3b78:	0e 94 af 39 	call	0x735e	; 0x735e <_ZN5Print7printlnEPK19__FlashStringHelper>
    3b7c:	9f ef       	ldi	r25, 0xFF	; 255
    3b7e:	23 ed       	ldi	r18, 0xD3	; 211
    3b80:	80 e3       	ldi	r24, 0x30	; 48
    3b82:	91 50       	subi	r25, 0x01	; 1
    3b84:	20 40       	sbci	r18, 0x00	; 0
    3b86:	80 40       	sbci	r24, 0x00	; 0
    3b88:	e1 f7       	brne	.-8      	; 0x3b82 <setup+0x49c>
    3b8a:	00 c0       	rjmp	.+0      	; 0x3b8c <setup+0x4a6>
    3b8c:	00 00       	nop
    3b8e:	e7 cf       	rjmp	.-50     	; 0x3b5e <setup+0x478>
    3b90:	9f ef       	ldi	r25, 0xFF	; 255
    3b92:	20 e7       	ldi	r18, 0x70	; 112
    3b94:	82 e0       	ldi	r24, 0x02	; 2
    3b96:	91 50       	subi	r25, 0x01	; 1
    3b98:	20 40       	sbci	r18, 0x00	; 0
    3b9a:	80 40       	sbci	r24, 0x00	; 0
    3b9c:	e1 f7       	brne	.-8      	; 0x3b96 <setup+0x4b0>
    3b9e:	00 c0       	rjmp	.+0      	; 0x3ba0 <setup+0x4ba>
    3ba0:	00 00       	nop
    3ba2:	66 ec       	ldi	r22, 0xC6	; 198
    _delay_ms(1000);
  }
  _delay_ms(50);

  Serial.println(F("RTC chip DS3231M initialized."));
    3ba4:	71 e0       	ldi	r23, 0x01	; 1
    3ba6:	88 e3       	ldi	r24, 0x38	; 56
    3ba8:	9d e0       	ldi	r25, 0x0D	; 13
    3baa:	0e 94 af 39 	call	0x735e	; 0x735e <_ZN5Print7printlnEPK19__FlashStringHelper>
  DS3231M.adjust();
    3bae:	85 eb       	ldi	r24, 0xB5	; 181
    3bb0:	9a e0       	ldi	r25, 0x0A	; 10
    3bb2:	aa d7       	rcall	.+3924   	; 0x4b08 <_ZN13DS3231M_Class6adjustEv>
    3bb4:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
  printLine();
    3bb8:	65 e9       	ldi	r22, 0x95	; 149
  /*************************** POTENZIOMETRI ************************/
  Serial.println("Inizializzo POTENZIOMETRI per livello pulser.......");
    3bba:	79 e0       	ldi	r23, 0x09	; 9
    3bbc:	88 e3       	ldi	r24, 0x38	; 56
    3bbe:	9d e0       	ldi	r25, 0x0D	; 13
    3bc0:	0e 94 cf 39 	call	0x739e	; 0x739e <_ZN5Print7printlnEPKc>
    3bc4:	82 ee       	ldi	r24, 0xE2	; 226

  Wire.begin(); // join i2c bus (address optional for master)
    3bc6:	9c e0       	ldi	r25, 0x0C	; 12
    3bc8:	0e 94 82 36 	call	0x6d04	; 0x6d04 <_ZN7TwoWire5beginEv>
    3bcc:	68 e2       	ldi	r22, 0x28	; 40
  Wire.beginTransmission(0x28);  // (0x50) POTENZIOMETRO U11
    3bce:	70 e0       	ldi	r23, 0x00	; 0
    3bd0:	82 ee       	ldi	r24, 0xE2	; 226
    3bd2:	9c e0       	ldi	r25, 0x0C	; 12
    3bd4:	0e 94 9f 36 	call	0x6d3e	; 0x6d3e <_ZN7TwoWire17beginTransmissionEi>
    3bd8:	60 e0       	ldi	r22, 0x00	; 0
  Wire.write(byte(0x00));        // Wiper Register
    3bda:	82 ee       	ldi	r24, 0xE2	; 226
    3bdc:	9c e0       	ldi	r25, 0x0C	; 12
    3bde:	0e 94 44 36 	call	0x6c88	; 0x6c88 <_ZN7TwoWire5writeEh>
    3be2:	60 e5       	ldi	r22, 0x50	; 80
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    3be4:	82 ee       	ldi	r24, 0xE2	; 226
    3be6:	9c e0       	ldi	r25, 0x0C	; 12
    3be8:	0e 94 44 36 	call	0x6c88	; 0x6c88 <_ZN7TwoWire5writeEh>
    3bec:	82 ee       	ldi	r24, 0xE2	; 226
  Wire.write(80);              // Valore del potenziomentro
  Wire.endTransmission();
    3bee:	9c e0       	ldi	r25, 0x0C	; 12
    3bf0:	0e 94 16 37 	call	0x6e2c	; 0x6e2c <_ZN7TwoWire15endTransmissionEv>
    3bf4:	9f ef       	ldi	r25, 0xFF	; 255
    3bf6:	20 e7       	ldi	r18, 0x70	; 112
    3bf8:	82 e0       	ldi	r24, 0x02	; 2
    3bfa:	91 50       	subi	r25, 0x01	; 1
    3bfc:	20 40       	sbci	r18, 0x00	; 0
    3bfe:	80 40       	sbci	r24, 0x00	; 0
    3c00:	e1 f7       	brne	.-8      	; 0x3bfa <setup+0x514>
    3c02:	00 c0       	rjmp	.+0      	; 0x3c04 <setup+0x51e>
    3c04:	00 00       	nop
    3c06:	62 e5       	ldi	r22, 0x52	; 82

  _delay_ms(50);

  Wire.beginTransmission(0x52);  // (0x52) POTENZIOMETRO U12
    3c08:	70 e0       	ldi	r23, 0x00	; 0
    3c0a:	82 ee       	ldi	r24, 0xE2	; 226
    3c0c:	9c e0       	ldi	r25, 0x0C	; 12
    3c0e:	0e 94 9f 36 	call	0x6d3e	; 0x6d3e <_ZN7TwoWire17beginTransmissionEi>
    3c12:	60 e0       	ldi	r22, 0x00	; 0
  Wire.write(byte(0x00));        // Wiper Register
    3c14:	82 ee       	ldi	r24, 0xE2	; 226
    3c16:	9c e0       	ldi	r25, 0x0C	; 12
    3c18:	0e 94 44 36 	call	0x6c88	; 0x6c88 <_ZN7TwoWire5writeEh>
    3c1c:	60 e5       	ldi	r22, 0x50	; 80
    3c1e:	82 ee       	ldi	r24, 0xE2	; 226
    3c20:	9c e0       	ldi	r25, 0x0C	; 12
    3c22:	0e 94 44 36 	call	0x6c88	; 0x6c88 <_ZN7TwoWire5writeEh>
    3c26:	82 ee       	ldi	r24, 0xE2	; 226
  Wire.write(80);                // Valore del potenziomentro circa 6 volt
  Wire.endTransmission();
    3c28:	9c e0       	ldi	r25, 0x0C	; 12
    3c2a:	0e 94 16 37 	call	0x6e2c	; 0x6e2c <_ZN7TwoWire15endTransmissionEv>
    3c2e:	82 ee       	ldi	r24, 0xE2	; 226
  Wire.end();
    3c30:	9c e0       	ldi	r25, 0x0C	; 12
    3c32:	0e 94 91 36 	call	0x6d22	; 0x6d22 <_ZN7TwoWire3endEv>
    3c36:	69 ec       	ldi	r22, 0xC9	; 201
  Serial.println("POTENZIOMETRI OK");
    3c38:	79 e0       	ldi	r23, 0x09	; 9
    3c3a:	88 e3       	ldi	r24, 0x38	; 56
    3c3c:	9d e0       	ldi	r25, 0x0D	; 13
    3c3e:	0e 94 cf 39 	call	0x739e	; 0x739e <_ZN5Print7printlnEPKc>
  printLine();
    3c42:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
  /*************************KEYPAD*********************/
  gpio.begin(I2C_PCA9534_ADDR);
    3c46:	60 e2       	ldi	r22, 0x20	; 32
    3c48:	80 e9       	ldi	r24, 0x90	; 144
    3c4a:	9a e0       	ldi	r25, 0x0A	; 10
    3c4c:	38 d0       	rcall	.+112    	; 0x3cbe <_ZN7PCA95345beginEh>
  // set REG IOexpander OPREG 11000011,INVREG 00000000,CONFREG 00111100
  gpio.setporteIoExp(0xC3, 0x00, 0x3C);
    3c4e:	2c e3       	ldi	r18, 0x3C	; 60
    3c50:	40 e0       	ldi	r20, 0x00	; 0
    3c52:	63 ec       	ldi	r22, 0xC3	; 195
    3c54:	80 e9       	ldi	r24, 0x90	; 144
    3c56:	9a e0       	ldi	r25, 0x0A	; 10
    3c58:	38 d0       	rcall	.+112    	; 0x3cca <_ZN7PCA953413setporteIoExpEhhh>
    3c5a:	8e ef       	ldi	r24, 0xFE	; 254
  /**************** SETTING INIZIALI ******************/

  stato_procedura = - 2; // set stato di partenza
    3c5c:	9f ef       	ldi	r25, 0xFF	; 255
    3c5e:	90 93 45 0b 	sts	0x0B45, r25	; 0x800b45 <stato_procedura+0x1>
    3c62:	80 93 44 0b 	sts	0x0B44, r24	; 0x800b44 <stato_procedura>
    3c66:	6a ed       	ldi	r22, 0xDA	; 218
  StatoAttuale = "Starting ....";
    3c68:	79 e0       	ldi	r23, 0x09	; 9
    3c6a:	8c e4       	ldi	r24, 0x4C	; 76
    3c6c:	9b e0       	ldi	r25, 0x0B	; 11
    3c6e:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <_ZN6StringaSEPKc>
    3c72:	6c e4       	ldi	r22, 0x4C	; 76
  Serial.println(StatoAttuale);
    3c74:	7b e0       	ldi	r23, 0x0B	; 11
    3c76:	88 e3       	ldi	r24, 0x38	; 56
    3c78:	9d e0       	ldi	r25, 0x0D	; 13
    3c7a:	0e 94 bf 39 	call	0x737e	; 0x737e <_ZN5Print7printlnERK6String>
    3c7e:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
  printLine();
    3c82:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
  printLine();
    3c86:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
  printLine();  
    3c8a:	0e 94 1c 03 	call	0x638	; 0x638 <_Z18WDT_Prescaler_8Secv>
  
  // wdt_enable(WDTO_8S); /*Watchdog Reset after 8Sec*/
  WDT_Prescaler_8Sec();
    3c8e:	ce 01       	movw	r24, r28
  Serial.print("EEPROM utilizzata (byte): ");
  Serial.print(EEPROM.length());
  Serial.println(" ");
  Serial.print("Scrittura Parametri CCEC");

  String app = "";
    3c90:	0f 96       	adiw	r24, 0x0f	; 15
    3c92:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
    3c96:	64 96       	adiw	r28, 0x14	; 20
  printLine();
  printLine();  
  
  // wdt_enable(WDTO_8S); /*Watchdog Reset after 8Sec*/
  WDT_Prescaler_8Sec();
}
    3c98:	0f b6       	in	r0, 0x3f	; 63
    3c9a:	f8 94       	cli
    3c9c:	de bf       	out	0x3e, r29	; 62
    3c9e:	0f be       	out	0x3f, r0	; 63
    3ca0:	cd bf       	out	0x3d, r28	; 61
    3ca2:	df 91       	pop	r29
    3ca4:	cf 91       	pop	r28
    3ca6:	1f 91       	pop	r17
    3ca8:	0f 91       	pop	r16
    3caa:	ff 90       	pop	r15
    3cac:	ef 90       	pop	r14
    3cae:	df 90       	pop	r13
    3cb0:	cf 90       	pop	r12
    3cb2:	08 95       	ret

00003cb4 <_ZN7PCA9534C1Ev>:
    3cb4:	fc 01       	movw	r30, r24
	Wire.requestFrom(_i2caddr, 1);
	while (Wire.available()) {
		buff = Wire.read();
	}
	return (buff & (1 << pin)) ? HIGH : LOW;
}
    3cb6:	10 82       	st	Z, r1
    3cb8:	11 82       	std	Z+1, r1	; 0x01
    3cba:	12 82       	std	Z+2, r1	; 0x02
    3cbc:	08 95       	ret

00003cbe <_ZN7PCA95345beginEh>:
    3cbe:	fc 01       	movw	r30, r24
    3cc0:	60 83       	st	Z, r22
    3cc2:	82 ee       	ldi	r24, 0xE2	; 226
    3cc4:	9c e0       	ldi	r25, 0x0C	; 12
    3cc6:	0c 94 82 36 	jmp	0x6d04	; 0x6d04 <_ZN7TwoWire5beginEv>

00003cca <_ZN7PCA953413setporteIoExpEhhh>:
    3cca:	ff 92       	push	r15
    3ccc:	0f 93       	push	r16
    3cce:	1f 93       	push	r17
    3cd0:	cf 93       	push	r28
    3cd2:	df 93       	push	r29
    3cd4:	ec 01       	movw	r28, r24
    3cd6:	f6 2e       	mov	r15, r22
    3cd8:	04 2f       	mov	r16, r20
    3cda:	12 2f       	mov	r17, r18
    3cdc:	68 81       	ld	r22, Y
    3cde:	82 ee       	ldi	r24, 0xE2	; 226
    3ce0:	9c e0       	ldi	r25, 0x0C	; 12
    3ce2:	0e 94 95 36 	call	0x6d2a	; 0x6d2a <_ZN7TwoWire17beginTransmissionEh>
    3ce6:	61 e0       	ldi	r22, 0x01	; 1
    3ce8:	82 ee       	ldi	r24, 0xE2	; 226
    3cea:	9c e0       	ldi	r25, 0x0C	; 12
    3cec:	0e 94 44 36 	call	0x6c88	; 0x6c88 <_ZN7TwoWire5writeEh>
    3cf0:	6f 2d       	mov	r22, r15
    3cf2:	82 ee       	ldi	r24, 0xE2	; 226
    3cf4:	9c e0       	ldi	r25, 0x0C	; 12
    3cf6:	0e 94 44 36 	call	0x6c88	; 0x6c88 <_ZN7TwoWire5writeEh>
    3cfa:	82 ee       	ldi	r24, 0xE2	; 226
    3cfc:	9c e0       	ldi	r25, 0x0C	; 12
    3cfe:	0e 94 16 37 	call	0x6e2c	; 0x6e2c <_ZN7TwoWire15endTransmissionEv>
    3d02:	68 81       	ld	r22, Y
    3d04:	82 ee       	ldi	r24, 0xE2	; 226
    3d06:	9c e0       	ldi	r25, 0x0C	; 12
    3d08:	0e 94 95 36 	call	0x6d2a	; 0x6d2a <_ZN7TwoWire17beginTransmissionEh>
    3d0c:	62 e0       	ldi	r22, 0x02	; 2
    3d0e:	82 ee       	ldi	r24, 0xE2	; 226
    3d10:	9c e0       	ldi	r25, 0x0C	; 12
    3d12:	0e 94 44 36 	call	0x6c88	; 0x6c88 <_ZN7TwoWire5writeEh>
    3d16:	60 2f       	mov	r22, r16
    3d18:	82 ee       	ldi	r24, 0xE2	; 226
    3d1a:	9c e0       	ldi	r25, 0x0C	; 12
    3d1c:	0e 94 44 36 	call	0x6c88	; 0x6c88 <_ZN7TwoWire5writeEh>
    3d20:	82 ee       	ldi	r24, 0xE2	; 226
    3d22:	9c e0       	ldi	r25, 0x0C	; 12
    3d24:	0e 94 16 37 	call	0x6e2c	; 0x6e2c <_ZN7TwoWire15endTransmissionEv>
    3d28:	8f e3       	ldi	r24, 0x3F	; 63
    3d2a:	9c e9       	ldi	r25, 0x9C	; 156
    3d2c:	01 97       	sbiw	r24, 0x01	; 1
    3d2e:	f1 f7       	brne	.-4      	; 0x3d2c <_ZN7PCA953413setporteIoExpEhhh+0x62>
    3d30:	00 c0       	rjmp	.+0      	; 0x3d32 <_ZN7PCA953413setporteIoExpEhhh+0x68>
    3d32:	00 00       	nop
    3d34:	68 81       	ld	r22, Y
    3d36:	82 ee       	ldi	r24, 0xE2	; 226
    3d38:	9c e0       	ldi	r25, 0x0C	; 12
    3d3a:	0e 94 95 36 	call	0x6d2a	; 0x6d2a <_ZN7TwoWire17beginTransmissionEh>
    3d3e:	63 e0       	ldi	r22, 0x03	; 3
    3d40:	82 ee       	ldi	r24, 0xE2	; 226
    3d42:	9c e0       	ldi	r25, 0x0C	; 12
    3d44:	0e 94 44 36 	call	0x6c88	; 0x6c88 <_ZN7TwoWire5writeEh>
    3d48:	61 2f       	mov	r22, r17
    3d4a:	82 ee       	ldi	r24, 0xE2	; 226
    3d4c:	9c e0       	ldi	r25, 0x0C	; 12
    3d4e:	0e 94 44 36 	call	0x6c88	; 0x6c88 <_ZN7TwoWire5writeEh>
    3d52:	82 ee       	ldi	r24, 0xE2	; 226
    3d54:	9c e0       	ldi	r25, 0x0C	; 12
    3d56:	0e 94 16 37 	call	0x6e2c	; 0x6e2c <_ZN7TwoWire15endTransmissionEv>
    3d5a:	8f e3       	ldi	r24, 0x3F	; 63
    3d5c:	9c e9       	ldi	r25, 0x9C	; 156
    3d5e:	01 97       	sbiw	r24, 0x01	; 1
    3d60:	f1 f7       	brne	.-4      	; 0x3d5e <_ZN7PCA953413setporteIoExpEhhh+0x94>
    3d62:	00 c0       	rjmp	.+0      	; 0x3d64 <_ZN7PCA953413setporteIoExpEhhh+0x9a>
    3d64:	00 00       	nop
    3d66:	df 91       	pop	r29
    3d68:	cf 91       	pop	r28
    3d6a:	1f 91       	pop	r17
    3d6c:	0f 91       	pop	r16
    3d6e:	ff 90       	pop	r15
    3d70:	08 95       	ret

00003d72 <_ZN7PCA953410setCONFREGEh>:
    3d72:	cf 93       	push	r28
    3d74:	c6 2f       	mov	r28, r22
    3d76:	fc 01       	movw	r30, r24
    3d78:	60 81       	ld	r22, Z
    3d7a:	82 ee       	ldi	r24, 0xE2	; 226
    3d7c:	9c e0       	ldi	r25, 0x0C	; 12
    3d7e:	0e 94 95 36 	call	0x6d2a	; 0x6d2a <_ZN7TwoWire17beginTransmissionEh>
    3d82:	63 e0       	ldi	r22, 0x03	; 3
    3d84:	82 ee       	ldi	r24, 0xE2	; 226
    3d86:	9c e0       	ldi	r25, 0x0C	; 12
    3d88:	0e 94 44 36 	call	0x6c88	; 0x6c88 <_ZN7TwoWire5writeEh>
    3d8c:	6c 2f       	mov	r22, r28
    3d8e:	82 ee       	ldi	r24, 0xE2	; 226
    3d90:	9c e0       	ldi	r25, 0x0C	; 12
    3d92:	0e 94 44 36 	call	0x6c88	; 0x6c88 <_ZN7TwoWire5writeEh>
    3d96:	82 ee       	ldi	r24, 0xE2	; 226
    3d98:	9c e0       	ldi	r25, 0x0C	; 12
    3d9a:	cf 91       	pop	r28
    3d9c:	0c 94 16 37 	jmp	0x6e2c	; 0x6e2c <_ZN7TwoWire15endTransmissionEv>

00003da0 <_ZN7PCA953416Read_IP_REGISTEREv>:

uint8_t PCA9534::Read_IP_REGISTER() {
    3da0:	cf 93       	push	r28
    3da2:	df 93       	push	r29
    3da4:	ec 01       	movw	r28, r24
	uint8_t buff = 0;

	//_i2caddr = i2caddr;

	Wire.beginTransmission(_i2caddr);
    3da6:	68 81       	ld	r22, Y
    3da8:	82 ee       	ldi	r24, 0xE2	; 226
    3daa:	9c e0       	ldi	r25, 0x0C	; 12
    3dac:	0e 94 95 36 	call	0x6d2a	; 0x6d2a <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(PCA9534_IP_REGISTER);
    3db0:	60 e0       	ldi	r22, 0x00	; 0
    3db2:	82 ee       	ldi	r24, 0xE2	; 226
    3db4:	9c e0       	ldi	r25, 0x0C	; 12
    3db6:	0e 94 44 36 	call	0x6c88	; 0x6c88 <_ZN7TwoWire5writeEh>
	// Wire.write(_port);
	Wire.endTransmission();
    3dba:	82 ee       	ldi	r24, 0xE2	; 226
    3dbc:	9c e0       	ldi	r25, 0x0C	; 12
    3dbe:	0e 94 16 37 	call	0x6e2c	; 0x6e2c <_ZN7TwoWire15endTransmissionEv>

	// We only need to read 1 byte of data to get the pins
	Wire.requestFrom(_i2caddr, 1);
    3dc2:	68 81       	ld	r22, Y
    3dc4:	70 e0       	ldi	r23, 0x00	; 0
    3dc6:	41 e0       	ldi	r20, 0x01	; 1
    3dc8:	50 e0       	ldi	r21, 0x00	; 0
    3dca:	82 ee       	ldi	r24, 0xE2	; 226
    3dcc:	9c e0       	ldi	r25, 0x0C	; 12
    3dce:	0e 94 14 37 	call	0x6e28	; 0x6e28 <_ZN7TwoWire11requestFromEii>
	}
	return (buff & (1 << pin)) ? HIGH : LOW;
}

uint8_t PCA9534::Read_IP_REGISTER() {
	uint8_t buff = 0;
    3dd2:	c0 e0       	ldi	r28, 0x00	; 0
	// Wire.write(_port);
	Wire.endTransmission();

	// We only need to read 1 byte of data to get the pins
	Wire.requestFrom(_i2caddr, 1);
	while (Wire.available()) {
    3dd4:	82 ee       	ldi	r24, 0xE2	; 226
    3dd6:	9c e0       	ldi	r25, 0x0C	; 12
    3dd8:	0e 94 b6 35 	call	0x6b6c	; 0x6b6c <_ZN7TwoWire9availableEv>
    3ddc:	89 2b       	or	r24, r25
    3dde:	31 f0       	breq	.+12     	; 0x3dec <_ZN7PCA953416Read_IP_REGISTEREv+0x4c>
		buff = Wire.read();
    3de0:	82 ee       	ldi	r24, 0xE2	; 226
    3de2:	9c e0       	ldi	r25, 0x0C	; 12
    3de4:	0e 94 be 35 	call	0x6b7c	; 0x6b7c <_ZN7TwoWire4readEv>
    3de8:	c8 2f       	mov	r28, r24
	// Wire.write(_port);
	Wire.endTransmission();

	// We only need to read 1 byte of data to get the pins
	Wire.requestFrom(_i2caddr, 1);
	while (Wire.available()) {
    3dea:	f4 cf       	rjmp	.-24     	; 0x3dd4 <_ZN7PCA953416Read_IP_REGISTEREv+0x34>
		buff = Wire.read();
	}
	return buff;
    3dec:	8c 2f       	mov	r24, r28
    3dee:	df 91       	pop	r29
    3df0:	cf 91       	pop	r28
    3df2:	08 95       	ret

00003df4 <_ZN9NFC_PN532C1Ehh>:
    #endif
    return false;
  }

  return true;
}
    3df4:	cf 93       	push	r28
    3df6:	df 93       	push	r29
    3df8:	ec 01       	movw	r28, r24
    3dfa:	86 2f       	mov	r24, r22
    3dfc:	68 83       	st	Y, r22
    3dfe:	49 83       	std	Y+1, r20	; 0x01
    3e00:	60 e0       	ldi	r22, 0x00	; 0
    3e02:	0e 94 70 3b 	call	0x76e0	; 0x76e0 <pinMode>
    3e06:	61 e0       	ldi	r22, 0x01	; 1
    3e08:	89 81       	ldd	r24, Y+1	; 0x01
    3e0a:	df 91       	pop	r29
    3e0c:	cf 91       	pop	r28
    3e0e:	0c 94 70 3b 	jmp	0x76e0	; 0x76e0 <pinMode>

00003e12 <_ZN9NFC_PN5325beginEv>:
    3e12:	82 ee       	ldi	r24, 0xE2	; 226
    3e14:	9c e0       	ldi	r25, 0x0C	; 12
    3e16:	0e 94 82 36 	call	0x6d04	; 0x6d04 <_ZN7TwoWire5beginEv>
    3e1a:	8f e3       	ldi	r24, 0x3F	; 63
    3e1c:	9c e9       	ldi	r25, 0x9C	; 156
    3e1e:	01 97       	sbiw	r24, 0x01	; 1
    3e20:	f1 f7       	brne	.-4      	; 0x3e1e <_ZN9NFC_PN5325beginEv+0xc>
    3e22:	00 c0       	rjmp	.+0      	; 0x3e24 <_ZN9NFC_PN5325beginEv+0x12>
    3e24:	00 00       	nop
    3e26:	08 95       	ret

00003e28 <_ZN9NFC_PN53210GetHexCodeEPKhm>:
    3e28:	4f 92       	push	r4
    3e2a:	5f 92       	push	r5
    3e2c:	6f 92       	push	r6
    3e2e:	7f 92       	push	r7
    3e30:	8f 92       	push	r8
    3e32:	9f 92       	push	r9
    3e34:	af 92       	push	r10
    3e36:	bf 92       	push	r11
    3e38:	ef 92       	push	r14
    3e3a:	ff 92       	push	r15
    3e3c:	0f 93       	push	r16
    3e3e:	1f 93       	push	r17
    3e40:	cf 93       	push	r28
    3e42:	df 93       	push	r29
    3e44:	cd b7       	in	r28, 0x3d	; 61
    3e46:	de b7       	in	r29, 0x3e	; 62
    3e48:	2c 97       	sbiw	r28, 0x0c	; 12
    3e4a:	0f b6       	in	r0, 0x3f	; 63
    3e4c:	f8 94       	cli
    3e4e:	de bf       	out	0x3e, r29	; 62
    3e50:	0f be       	out	0x3f, r0	; 63
    3e52:	cd bf       	out	0x3d, r28	; 61
    3e54:	7c 01       	movw	r14, r24
    3e56:	5a 01       	movw	r10, r20
    3e58:	28 01       	movw	r4, r16
    3e5a:	39 01       	movw	r6, r18
    3e5c:	6f ef       	ldi	r22, 0xFF	; 255
    3e5e:	71 e0       	ldi	r23, 0x01	; 1
    3e60:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <_ZN6StringC1EPKc>
    3e64:	85 01       	movw	r16, r10
    3e66:	81 2c       	mov	r8, r1
    3e68:	91 2c       	mov	r9, r1
    3e6a:	54 01       	movw	r10, r8
    3e6c:	84 14       	cp	r8, r4
    3e6e:	95 04       	cpc	r9, r5
    3e70:	a6 04       	cpc	r10, r6
    3e72:	b7 04       	cpc	r11, r7
    3e74:	09 f4       	brne	.+2      	; 0x3e78 <_ZN9NFC_PN53210GetHexCodeEPKhm+0x50>
    3e76:	46 c0       	rjmp	.+140    	; 0x3f04 <_ZN9NFC_PN53210GetHexCodeEPKhm+0xdc>
    3e78:	f8 01       	movw	r30, r16
    3e7a:	61 91       	ld	r22, Z+
    3e7c:	8f 01       	movw	r16, r30
    3e7e:	40 e1       	ldi	r20, 0x10	; 16
    3e80:	ce 01       	movw	r24, r28
    3e82:	60 31       	cpi	r22, 0x10	; 16
    3e84:	f0 f4       	brcc	.+60     	; 0x3ec2 <_ZN9NFC_PN53210GetHexCodeEPKhm+0x9a>
    3e86:	01 96       	adiw	r24, 0x01	; 1
    3e88:	0e 94 15 3d 	call	0x7a2a	; 0x7a2a <_ZN6StringC1Ehh>
    3e8c:	b7 01       	movw	r22, r14
    3e8e:	ce 01       	movw	r24, r28
    3e90:	07 96       	adiw	r24, 0x07	; 7
    3e92:	0e 94 d6 3c 	call	0x79ac	; 0x79ac <_ZN6StringC1ERKS_>
    3e96:	6f ea       	ldi	r22, 0xAF	; 175
    3e98:	78 e0       	ldi	r23, 0x08	; 8
    3e9a:	ce 01       	movw	r24, r28
    3e9c:	07 96       	adiw	r24, 0x07	; 7
    3e9e:	0e 94 50 3e 	call	0x7ca0	; 0x7ca0 <_ZplRK15StringSumHelperPKc>
    3ea2:	be 01       	movw	r22, r28
    3ea4:	6f 5f       	subi	r22, 0xFF	; 255
    3ea6:	7f 4f       	sbci	r23, 0xFF	; 255
    3ea8:	0e 94 3f 3e 	call	0x7c7e	; 0x7c7e <_ZplRK15StringSumHelperRK6String>
    3eac:	bc 01       	movw	r22, r24
    3eae:	c7 01       	movw	r24, r14
    3eb0:	0e 94 c1 3c 	call	0x7982	; 0x7982 <_ZN6StringaSERKS_>
    3eb4:	ce 01       	movw	r24, r28
    3eb6:	07 96       	adiw	r24, 0x07	; 7
    3eb8:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
    3ebc:	ce 01       	movw	r24, r28
    3ebe:	01 96       	adiw	r24, 0x01	; 1
    3ec0:	19 c0       	rjmp	.+50     	; 0x3ef4 <_ZN9NFC_PN53210GetHexCodeEPKhm+0xcc>
    3ec2:	07 96       	adiw	r24, 0x07	; 7
    3ec4:	0e 94 15 3d 	call	0x7a2a	; 0x7a2a <_ZN6StringC1Ehh>
    3ec8:	b7 01       	movw	r22, r14
    3eca:	ce 01       	movw	r24, r28
    3ecc:	01 96       	adiw	r24, 0x01	; 1
    3ece:	0e 94 d6 3c 	call	0x79ac	; 0x79ac <_ZN6StringC1ERKS_>
    3ed2:	be 01       	movw	r22, r28
    3ed4:	69 5f       	subi	r22, 0xF9	; 249
    3ed6:	7f 4f       	sbci	r23, 0xFF	; 255
    3ed8:	ce 01       	movw	r24, r28
    3eda:	01 96       	adiw	r24, 0x01	; 1
    3edc:	0e 94 3f 3e 	call	0x7c7e	; 0x7c7e <_ZplRK15StringSumHelperRK6String>
    3ee0:	bc 01       	movw	r22, r24
    3ee2:	c7 01       	movw	r24, r14
    3ee4:	0e 94 c1 3c 	call	0x7982	; 0x7982 <_ZN6StringaSERKS_>
    3ee8:	ce 01       	movw	r24, r28
    3eea:	01 96       	adiw	r24, 0x01	; 1
    3eec:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
    3ef0:	ce 01       	movw	r24, r28
    3ef2:	07 96       	adiw	r24, 0x07	; 7
    3ef4:	0e 94 03 3c 	call	0x7806	; 0x7806 <_ZN6StringD1Ev>
    3ef8:	ff ef       	ldi	r31, 0xFF	; 255
    3efa:	8f 1a       	sub	r8, r31
    3efc:	9f 0a       	sbc	r9, r31
    3efe:	af 0a       	sbc	r10, r31
    3f00:	bf 0a       	sbc	r11, r31
    3f02:	b4 cf       	rjmp	.-152    	; 0x3e6c <_ZN9NFC_PN53210GetHexCodeEPKhm+0x44>
    3f04:	88 e3       	ldi	r24, 0x38	; 56
    3f06:	9d e0       	ldi	r25, 0x0D	; 13
    3f08:	0e 94 ac 39 	call	0x7358	; 0x7358 <_ZN5Print7printlnEv>
    3f0c:	c7 01       	movw	r24, r14
    3f0e:	2c 96       	adiw	r28, 0x0c	; 12
    3f10:	0f b6       	in	r0, 0x3f	; 63
    3f12:	f8 94       	cli
    3f14:	de bf       	out	0x3e, r29	; 62
    3f16:	0f be       	out	0x3f, r0	; 63
    3f18:	cd bf       	out	0x3d, r28	; 61
    3f1a:	df 91       	pop	r29
    3f1c:	cf 91       	pop	r28
    3f1e:	1f 91       	pop	r17
    3f20:	0f 91       	pop	r16
    3f22:	ff 90       	pop	r15
    3f24:	ef 90       	pop	r14
    3f26:	bf 90       	pop	r11
    3f28:	af 90       	pop	r10
    3f2a:	9f 90       	pop	r9
    3f2c:	8f 90       	pop	r8
    3f2e:	7f 90       	pop	r7
    3f30:	6f 90       	pop	r6
    3f32:	5f 90       	pop	r5
    3f34:	4f 90       	pop	r4
    3f36:	08 95       	ret

00003f38 <_ZN9NFC_PN5327isreadyEv>:
    3f38:	fc 01       	movw	r30, r24
    3f3a:	80 81       	ld	r24, Z
    3f3c:	0e 94 da 3b 	call	0x77b4	; 0x77b4 <digitalRead>
    3f40:	91 e0       	ldi	r25, 0x01	; 1
    3f42:	81 11       	cpse	r24, r1
    3f44:	90 e0       	ldi	r25, 0x00	; 0
    3f46:	89 2f       	mov	r24, r25
    3f48:	08 95       	ret

00003f4a <_ZN9NFC_PN5329waitreadyEj>:
    3f4a:	ef 92       	push	r14
    3f4c:	ff 92       	push	r15
    3f4e:	0f 93       	push	r16
    3f50:	1f 93       	push	r17
    3f52:	cf 93       	push	r28
    3f54:	df 93       	push	r29
    3f56:	7c 01       	movw	r14, r24
    3f58:	8b 01       	movw	r16, r22
    3f5a:	c0 e0       	ldi	r28, 0x00	; 0
    3f5c:	d0 e0       	ldi	r29, 0x00	; 0
    3f5e:	c7 01       	movw	r24, r14
    3f60:	eb df       	rcall	.-42     	; 0x3f38 <_ZN9NFC_PN5327isreadyEv>
    3f62:	81 11       	cpse	r24, r1
    3f64:	0e c0       	rjmp	.+28     	; 0x3f82 <_ZN9NFC_PN5329waitreadyEj+0x38>
    3f66:	01 15       	cp	r16, r1
    3f68:	11 05       	cpc	r17, r1
    3f6a:	21 f0       	breq	.+8      	; 0x3f74 <_ZN9NFC_PN5329waitreadyEj+0x2a>
    3f6c:	2a 96       	adiw	r28, 0x0a	; 10
    3f6e:	0c 17       	cp	r16, r28
    3f70:	1d 07       	cpc	r17, r29
    3f72:	38 f0       	brcs	.+14     	; 0x3f82 <_ZN9NFC_PN5329waitreadyEj+0x38>
    3f74:	8f e3       	ldi	r24, 0x3F	; 63
    3f76:	9c e9       	ldi	r25, 0x9C	; 156
    3f78:	01 97       	sbiw	r24, 0x01	; 1
    3f7a:	f1 f7       	brne	.-4      	; 0x3f78 <_ZN9NFC_PN5329waitreadyEj+0x2e>
    3f7c:	00 c0       	rjmp	.+0      	; 0x3f7e <_ZN9NFC_PN5329waitreadyEj+0x34>
    3f7e:	00 00       	nop
    3f80:	ee cf       	rjmp	.-36     	; 0x3f5e <_ZN9NFC_PN5329waitreadyEj+0x14>
    3f82:	df 91       	pop	r29
    3f84:	cf 91       	pop	r28
    3f86:	1f 91       	pop	r17
    3f88:	0f 91       	pop	r16
    3f8a:	ff 90       	pop	r15
    3f8c:	ef 90       	pop	r14
    3f8e:	08 95       	ret

00003f90 <_ZN9NFC_PN5328readdataEPhh>:
    3f90:	ff 92       	push	r15
    3f92:	0f 93       	push	r16
    3f94:	1f 93       	push	r17
    3f96:	cf 93       	push	r28
    3f98:	df 93       	push	r29
    3f9a:	f6 2e       	mov	r15, r22
    3f9c:	07 2f       	mov	r16, r23
    3f9e:	14 2f       	mov	r17, r20
    3fa0:	8f e3       	ldi	r24, 0x3F	; 63
    3fa2:	9f e1       	ldi	r25, 0x1F	; 31
    3fa4:	01 97       	sbiw	r24, 0x01	; 1
    3fa6:	f1 f7       	brne	.-4      	; 0x3fa4 <_ZN9NFC_PN5328readdataEPhh+0x14>
    3fa8:	00 c0       	rjmp	.+0      	; 0x3faa <_ZN9NFC_PN5328readdataEPhh+0x1a>
    3faa:	00 00       	nop
    3fac:	42 e0       	ldi	r20, 0x02	; 2
    3fae:	41 0f       	add	r20, r17
    3fb0:	64 e2       	ldi	r22, 0x24	; 36
    3fb2:	82 ee       	ldi	r24, 0xE2	; 226
    3fb4:	9c e0       	ldi	r25, 0x0C	; 12
    3fb6:	0e 94 12 37 	call	0x6e24	; 0x6e24 <_ZN7TwoWire11requestFromEhh>
    3fba:	82 ee       	ldi	r24, 0xE2	; 226
    3fbc:	9c e0       	ldi	r25, 0x0C	; 12
    3fbe:	0e 94 be 35 	call	0x6b7c	; 0x6b7c <_ZN7TwoWire4readEv>
    3fc2:	cf 2d       	mov	r28, r15
    3fc4:	d0 2f       	mov	r29, r16
    3fc6:	ce 01       	movw	r24, r28
    3fc8:	81 0f       	add	r24, r17
    3fca:	91 1d       	adc	r25, r1
    3fcc:	8c 01       	movw	r16, r24
    3fce:	c0 17       	cp	r28, r16
    3fd0:	d1 07       	cpc	r29, r17
    3fd2:	61 f0       	breq	.+24     	; 0x3fec <_ZN9NFC_PN5328readdataEPhh+0x5c>
    3fd4:	8f e9       	ldi	r24, 0x9F	; 159
    3fd6:	9f e0       	ldi	r25, 0x0F	; 15
    3fd8:	01 97       	sbiw	r24, 0x01	; 1
    3fda:	f1 f7       	brne	.-4      	; 0x3fd8 <_ZN9NFC_PN5328readdataEPhh+0x48>
    3fdc:	00 c0       	rjmp	.+0      	; 0x3fde <_ZN9NFC_PN5328readdataEPhh+0x4e>
    3fde:	00 00       	nop
    3fe0:	82 ee       	ldi	r24, 0xE2	; 226
    3fe2:	9c e0       	ldi	r25, 0x0C	; 12
    3fe4:	0e 94 be 35 	call	0x6b7c	; 0x6b7c <_ZN7TwoWire4readEv>
    3fe8:	89 93       	st	Y+, r24
    3fea:	f1 cf       	rjmp	.-30     	; 0x3fce <_ZN9NFC_PN5328readdataEPhh+0x3e>
    3fec:	df 91       	pop	r29
    3fee:	cf 91       	pop	r28
    3ff0:	1f 91       	pop	r17
    3ff2:	0f 91       	pop	r16
    3ff4:	ff 90       	pop	r15
    3ff6:	08 95       	ret

00003ff8 <_ZN9NFC_PN5327readackEv>:
    3ff8:	cf 93       	push	r28
    3ffa:	df 93       	push	r29
    3ffc:	00 d0       	rcall	.+0      	; 0x3ffe <_ZN9NFC_PN5327readackEv+0x6>
    3ffe:	00 d0       	rcall	.+0      	; 0x4000 <_ZN9NFC_PN5327readackEv+0x8>
    4000:	00 d0       	rcall	.+0      	; 0x4002 <_ZN9NFC_PN5327readackEv+0xa>
    4002:	cd b7       	in	r28, 0x3d	; 61
    4004:	de b7       	in	r29, 0x3e	; 62
    4006:	46 e0       	ldi	r20, 0x06	; 6
    4008:	be 01       	movw	r22, r28
    400a:	6f 5f       	subi	r22, 0xFF	; 255
    400c:	7f 4f       	sbci	r23, 0xFF	; 255
    400e:	c0 df       	rcall	.-128    	; 0x3f90 <_ZN9NFC_PN5328readdataEPhh>
    4010:	46 e0       	ldi	r20, 0x06	; 6
    4012:	50 e0       	ldi	r21, 0x00	; 0
    4014:	65 e6       	ldi	r22, 0x65	; 101
    4016:	71 e0       	ldi	r23, 0x01	; 1
    4018:	ce 01       	movw	r24, r28
    401a:	01 96       	adiw	r24, 0x01	; 1
    401c:	0e 94 17 43 	call	0x862e	; 0x862e <strncmp>
    4020:	21 e0       	ldi	r18, 0x01	; 1
    4022:	89 2b       	or	r24, r25
    4024:	09 f0       	breq	.+2      	; 0x4028 <_ZN9NFC_PN5327readackEv+0x30>
    4026:	20 e0       	ldi	r18, 0x00	; 0
    4028:	82 2f       	mov	r24, r18
    402a:	26 96       	adiw	r28, 0x06	; 6
    402c:	0f b6       	in	r0, 0x3f	; 63
    402e:	f8 94       	cli
    4030:	de bf       	out	0x3e, r29	; 62
    4032:	0f be       	out	0x3f, r0	; 63
    4034:	cd bf       	out	0x3d, r28	; 61
    4036:	df 91       	pop	r29
    4038:	cf 91       	pop	r28
    403a:	08 95       	ret

0000403c <_ZL8i2c_sendh>:
    403c:	68 2f       	mov	r22, r24
    403e:	82 ee       	ldi	r24, 0xE2	; 226
    4040:	9c e0       	ldi	r25, 0x0C	; 12
    4042:	0c 94 44 36 	jmp	0x6c88	; 0x6c88 <_ZN7TwoWire5writeEh>

00004046 <_ZN9NFC_PN53212writecommandEPhh>:
    4046:	cf 92       	push	r12
    4048:	df 92       	push	r13
    404a:	ef 92       	push	r14
    404c:	ff 92       	push	r15
    404e:	0f 93       	push	r16
    4050:	1f 93       	push	r17
    4052:	cf 93       	push	r28
    4054:	df 93       	push	r29
    4056:	7b 01       	movw	r14, r22
    4058:	c1 e0       	ldi	r28, 0x01	; 1
    405a:	c4 0f       	add	r28, r20
    405c:	8f e3       	ldi	r24, 0x3F	; 63
    405e:	9f e1       	ldi	r25, 0x1F	; 31
    4060:	01 97       	sbiw	r24, 0x01	; 1
    4062:	f1 f7       	brne	.-4      	; 0x4060 <_ZN9NFC_PN53212writecommandEPhh+0x1a>
    4064:	00 c0       	rjmp	.+0      	; 0x4066 <_ZN9NFC_PN53212writecommandEPhh+0x20>
    4066:	00 00       	nop
    4068:	64 e2       	ldi	r22, 0x24	; 36
    406a:	70 e0       	ldi	r23, 0x00	; 0
    406c:	82 ee       	ldi	r24, 0xE2	; 226
    406e:	9c e0       	ldi	r25, 0x0C	; 12
    4070:	0e 94 9f 36 	call	0x6d3e	; 0x6d3e <_ZN7TwoWire17beginTransmissionEi>
    4074:	80 e0       	ldi	r24, 0x00	; 0
    4076:	e2 df       	rcall	.-60     	; 0x403c <_ZL8i2c_sendh>
    4078:	80 e0       	ldi	r24, 0x00	; 0
    407a:	e0 df       	rcall	.-64     	; 0x403c <_ZL8i2c_sendh>
    407c:	8f ef       	ldi	r24, 0xFF	; 255
    407e:	de df       	rcall	.-68     	; 0x403c <_ZL8i2c_sendh>
    4080:	8c 2f       	mov	r24, r28
    4082:	dc df       	rcall	.-72     	; 0x403c <_ZL8i2c_sendh>
    4084:	8c 2f       	mov	r24, r28
    4086:	81 95       	neg	r24
    4088:	d9 df       	rcall	.-78     	; 0x403c <_ZL8i2c_sendh>
    408a:	84 ed       	ldi	r24, 0xD4	; 212
    408c:	d7 df       	rcall	.-82     	; 0x403c <_ZL8i2c_sendh>
    408e:	c1 2c       	mov	r12, r1
    4090:	83 ed       	ldi	r24, 0xD3	; 211
    4092:	d8 2e       	mov	r13, r24
    4094:	d0 e0       	ldi	r29, 0x00	; 0
    4096:	21 97       	sbiw	r28, 0x01	; 1
    4098:	0c 2d       	mov	r16, r12
    409a:	10 e0       	ldi	r17, 0x00	; 0
    409c:	0c 17       	cp	r16, r28
    409e:	1d 07       	cpc	r17, r29
    40a0:	54 f4       	brge	.+20     	; 0x40b6 <_ZN9NFC_PN53212writecommandEPhh+0x70>
    40a2:	0e 0d       	add	r16, r14
    40a4:	1f 1d       	adc	r17, r15
    40a6:	f8 01       	movw	r30, r16
    40a8:	80 81       	ld	r24, Z
    40aa:	c8 df       	rcall	.-112    	; 0x403c <_ZL8i2c_sendh>
    40ac:	f8 01       	movw	r30, r16
    40ae:	80 81       	ld	r24, Z
    40b0:	d8 0e       	add	r13, r24
    40b2:	c3 94       	inc	r12
    40b4:	f1 cf       	rjmp	.-30     	; 0x4098 <_ZN9NFC_PN53212writecommandEPhh+0x52>
    40b6:	8d 2d       	mov	r24, r13
    40b8:	80 95       	com	r24
    40ba:	c0 df       	rcall	.-128    	; 0x403c <_ZL8i2c_sendh>
    40bc:	80 e0       	ldi	r24, 0x00	; 0
    40be:	be df       	rcall	.-132    	; 0x403c <_ZL8i2c_sendh>
    40c0:	82 ee       	ldi	r24, 0xE2	; 226
    40c2:	9c e0       	ldi	r25, 0x0C	; 12
    40c4:	df 91       	pop	r29
    40c6:	cf 91       	pop	r28
    40c8:	1f 91       	pop	r17
    40ca:	0f 91       	pop	r16
    40cc:	ff 90       	pop	r15
    40ce:	ef 90       	pop	r14
    40d0:	df 90       	pop	r13
    40d2:	cf 90       	pop	r12
    40d4:	0c 94 16 37 	jmp	0x6e2c	; 0x6e2c <_ZN7TwoWire15endTransmissionEv>

000040d8 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>:
    40d8:	0f 93       	push	r16
    40da:	1f 93       	push	r17
    40dc:	cf 93       	push	r28
    40de:	df 93       	push	r29
    40e0:	ec 01       	movw	r28, r24
    40e2:	89 01       	movw	r16, r18
    40e4:	b0 df       	rcall	.-160    	; 0x4046 <_ZN9NFC_PN53212writecommandEPhh>
    40e6:	b8 01       	movw	r22, r16
    40e8:	ce 01       	movw	r24, r28
    40ea:	2f df       	rcall	.-418    	; 0x3f4a <_ZN9NFC_PN5329waitreadyEj>
    40ec:	88 23       	and	r24, r24
    40ee:	31 f0       	breq	.+12     	; 0x40fc <_ZN9NFC_PN53219sendCommandCheckAckEPhhj+0x24>
    40f0:	ce 01       	movw	r24, r28
    40f2:	df 91       	pop	r29
    40f4:	cf 91       	pop	r28
    40f6:	1f 91       	pop	r17
    40f8:	0f 91       	pop	r16
    40fa:	7e cf       	rjmp	.-260    	; 0x3ff8 <_ZN9NFC_PN5327readackEv>
    40fc:	80 e0       	ldi	r24, 0x00	; 0
    40fe:	df 91       	pop	r29
    4100:	cf 91       	pop	r28
    4102:	1f 91       	pop	r17
    4104:	0f 91       	pop	r16
    4106:	08 95       	ret

00004108 <_ZN9NFC_PN53218getFirmwareVersionEv>:
    4108:	cf 93       	push	r28
    410a:	df 93       	push	r29
    410c:	ec 01       	movw	r28, r24
    410e:	82 e0       	ldi	r24, 0x02	; 2
    4110:	80 93 e9 0b 	sts	0x0BE9, r24	; 0x800be9 <pn532_packetbuffer>
    4114:	28 ee       	ldi	r18, 0xE8	; 232
    4116:	33 e0       	ldi	r19, 0x03	; 3
    4118:	41 e0       	ldi	r20, 0x01	; 1
    411a:	69 ee       	ldi	r22, 0xE9	; 233
    411c:	7b e0       	ldi	r23, 0x0B	; 11
    411e:	ce 01       	movw	r24, r28
    4120:	db df       	rcall	.-74     	; 0x40d8 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    4122:	81 11       	cpse	r24, r1
    4124:	04 c0       	rjmp	.+8      	; 0x412e <_ZN9NFC_PN53218getFirmwareVersionEv+0x26>
    4126:	60 e0       	ldi	r22, 0x00	; 0
    4128:	70 e0       	ldi	r23, 0x00	; 0
    412a:	cb 01       	movw	r24, r22
    412c:	29 c0       	rjmp	.+82     	; 0x4180 <_ZN9NFC_PN53218getFirmwareVersionEv+0x78>
    412e:	4c e0       	ldi	r20, 0x0C	; 12
    4130:	69 ee       	ldi	r22, 0xE9	; 233
    4132:	7b e0       	ldi	r23, 0x0B	; 11
    4134:	ce 01       	movw	r24, r28
    4136:	2c df       	rcall	.-424    	; 0x3f90 <_ZN9NFC_PN5328readdataEPhh>
    4138:	46 e0       	ldi	r20, 0x06	; 6
    413a:	50 e0       	ldi	r21, 0x00	; 0
    413c:	6f e5       	ldi	r22, 0x5F	; 95
    413e:	71 e0       	ldi	r23, 0x01	; 1
    4140:	89 ee       	ldi	r24, 0xE9	; 233
    4142:	9b e0       	ldi	r25, 0x0B	; 11
    4144:	0e 94 17 43 	call	0x862e	; 0x862e <strncmp>
    4148:	89 2b       	or	r24, r25
    414a:	69 f7       	brne	.-38     	; 0x4126 <_ZN9NFC_PN53218getFirmwareVersionEv+0x1e>
    414c:	60 91 ef 0b 	lds	r22, 0x0BEF	; 0x800bef <pn532_packetbuffer+0x6>
    4150:	70 91 f0 0b 	lds	r23, 0x0BF0	; 0x800bf0 <pn532_packetbuffer+0x7>
    4154:	76 27       	eor	r23, r22
    4156:	67 27       	eor	r22, r23
    4158:	76 27       	eor	r23, r22
    415a:	cb 01       	movw	r24, r22
    415c:	a0 e0       	ldi	r26, 0x00	; 0
    415e:	b0 e0       	ldi	r27, 0x00	; 0
    4160:	ba 2f       	mov	r27, r26
    4162:	a9 2f       	mov	r26, r25
    4164:	98 2f       	mov	r25, r24
    4166:	88 27       	eor	r24, r24
    4168:	20 91 f1 0b 	lds	r18, 0x0BF1	; 0x800bf1 <pn532_packetbuffer+0x8>
    416c:	82 2b       	or	r24, r18
    416e:	ba 2f       	mov	r27, r26
    4170:	a9 2f       	mov	r26, r25
    4172:	98 2f       	mov	r25, r24
    4174:	88 27       	eor	r24, r24
    4176:	20 91 f2 0b 	lds	r18, 0x0BF2	; 0x800bf2 <pn532_packetbuffer+0x9>
    417a:	bc 01       	movw	r22, r24
    417c:	cd 01       	movw	r24, r26
    417e:	62 2b       	or	r22, r18
    4180:	df 91       	pop	r29
    4182:	cf 91       	pop	r28
    4184:	08 95       	ret

00004186 <_ZN9NFC_PN5329SAMConfigEv>:
    4186:	cf 93       	push	r28
    4188:	df 93       	push	r29
    418a:	ec 01       	movw	r28, r24
    418c:	94 e1       	ldi	r25, 0x14	; 20
    418e:	90 93 e9 0b 	sts	0x0BE9, r25	; 0x800be9 <pn532_packetbuffer>
    4192:	81 e0       	ldi	r24, 0x01	; 1
    4194:	80 93 ea 0b 	sts	0x0BEA, r24	; 0x800bea <pn532_packetbuffer+0x1>
    4198:	90 93 eb 0b 	sts	0x0BEB, r25	; 0x800beb <pn532_packetbuffer+0x2>
    419c:	80 93 ec 0b 	sts	0x0BEC, r24	; 0x800bec <pn532_packetbuffer+0x3>
    41a0:	28 ee       	ldi	r18, 0xE8	; 232
    41a2:	33 e0       	ldi	r19, 0x03	; 3
    41a4:	44 e0       	ldi	r20, 0x04	; 4
    41a6:	69 ee       	ldi	r22, 0xE9	; 233
    41a8:	7b e0       	ldi	r23, 0x0B	; 11
    41aa:	ce 01       	movw	r24, r28
    41ac:	95 df       	rcall	.-214    	; 0x40d8 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    41ae:	88 23       	and	r24, r24
    41b0:	59 f0       	breq	.+22     	; 0x41c8 <_ZN9NFC_PN5329SAMConfigEv+0x42>
    41b2:	48 e0       	ldi	r20, 0x08	; 8
    41b4:	69 ee       	ldi	r22, 0xE9	; 233
    41b6:	7b e0       	ldi	r23, 0x0B	; 11
    41b8:	ce 01       	movw	r24, r28
    41ba:	ea de       	rcall	.-556    	; 0x3f90 <_ZN9NFC_PN5328readdataEPhh>
    41bc:	81 e0       	ldi	r24, 0x01	; 1
    41be:	90 91 ee 0b 	lds	r25, 0x0BEE	; 0x800bee <pn532_packetbuffer+0x5>
    41c2:	95 31       	cpi	r25, 0x15	; 21
    41c4:	09 f0       	breq	.+2      	; 0x41c8 <_ZN9NFC_PN5329SAMConfigEv+0x42>
    41c6:	80 e0       	ldi	r24, 0x00	; 0
    41c8:	df 91       	pop	r29
    41ca:	cf 91       	pop	r28
    41cc:	08 95       	ret

000041ce <_ZN9NFC_PN53227setPassiveActivationRetriesEh>:
    41ce:	e9 ee       	ldi	r30, 0xE9	; 233
    41d0:	fb e0       	ldi	r31, 0x0B	; 11
    41d2:	22 e3       	ldi	r18, 0x32	; 50
    41d4:	20 83       	st	Z, r18
    41d6:	25 e0       	ldi	r18, 0x05	; 5
    41d8:	21 83       	std	Z+1, r18	; 0x01
    41da:	2f ef       	ldi	r18, 0xFF	; 255
    41dc:	22 83       	std	Z+2, r18	; 0x02
    41de:	21 e0       	ldi	r18, 0x01	; 1
    41e0:	23 83       	std	Z+3, r18	; 0x03
    41e2:	64 83       	std	Z+4, r22	; 0x04
    41e4:	28 ee       	ldi	r18, 0xE8	; 232
    41e6:	33 e0       	ldi	r19, 0x03	; 3
    41e8:	45 e0       	ldi	r20, 0x05	; 5
    41ea:	bf 01       	movw	r22, r30
    41ec:	75 cf       	rjmp	.-278    	; 0x40d8 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>

000041ee <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j>:
    41ee:	af 92       	push	r10
    41f0:	bf 92       	push	r11
    41f2:	cf 92       	push	r12
    41f4:	df 92       	push	r13
    41f6:	ef 92       	push	r14
    41f8:	ff 92       	push	r15
    41fa:	0f 93       	push	r16
    41fc:	1f 93       	push	r17
    41fe:	cf 93       	push	r28
    4200:	7c 01       	movw	r14, r24
    4202:	6a 01       	movw	r12, r20
    4204:	59 01       	movw	r10, r18
    4206:	8a e4       	ldi	r24, 0x4A	; 74
    4208:	80 93 e9 0b 	sts	0x0BE9, r24	; 0x800be9 <pn532_packetbuffer>
    420c:	81 e0       	ldi	r24, 0x01	; 1
    420e:	80 93 ea 0b 	sts	0x0BEA, r24	; 0x800bea <pn532_packetbuffer+0x1>
    4212:	60 93 eb 0b 	sts	0x0BEB, r22	; 0x800beb <pn532_packetbuffer+0x2>
    4216:	98 01       	movw	r18, r16
    4218:	43 e0       	ldi	r20, 0x03	; 3
    421a:	69 ee       	ldi	r22, 0xE9	; 233
    421c:	7b e0       	ldi	r23, 0x0B	; 11
    421e:	c7 01       	movw	r24, r14
    4220:	5b df       	rcall	.-330    	; 0x40d8 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    4222:	88 23       	and	r24, r24
    4224:	21 f1       	breq	.+72     	; 0x426e <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x80>
    4226:	b8 01       	movw	r22, r16
    4228:	c7 01       	movw	r24, r14
    422a:	8f de       	rcall	.-738    	; 0x3f4a <_ZN9NFC_PN5329waitreadyEj>
    422c:	c8 2f       	mov	r28, r24
    422e:	88 23       	and	r24, r24
    4230:	f1 f0       	breq	.+60     	; 0x426e <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x80>
    4232:	44 e1       	ldi	r20, 0x14	; 20
    4234:	69 ee       	ldi	r22, 0xE9	; 233
    4236:	7b e0       	ldi	r23, 0x0B	; 11
    4238:	c7 01       	movw	r24, r14
    423a:	aa de       	rcall	.-684    	; 0x3f90 <_ZN9NFC_PN5328readdataEPhh>
    423c:	80 91 f0 0b 	lds	r24, 0x0BF0	; 0x800bf0 <pn532_packetbuffer+0x7>
    4240:	81 30       	cpi	r24, 0x01	; 1
    4242:	a9 f4       	brne	.+42     	; 0x426e <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x80>
    4244:	80 91 f5 0b 	lds	r24, 0x0BF5	; 0x800bf5 <pn532_packetbuffer+0xc>
    4248:	f5 01       	movw	r30, r10
    424a:	80 83       	st	Z, r24
    424c:	80 e0       	ldi	r24, 0x00	; 0
    424e:	90 91 f5 0b 	lds	r25, 0x0BF5	; 0x800bf5 <pn532_packetbuffer+0xc>
    4252:	89 17       	cp	r24, r25
    4254:	68 f4       	brcc	.+26     	; 0x4270 <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x82>
    4256:	28 2f       	mov	r18, r24
    4258:	30 e0       	ldi	r19, 0x00	; 0
    425a:	f9 01       	movw	r30, r18
    425c:	e7 51       	subi	r30, 0x17	; 23
    425e:	f4 4f       	sbci	r31, 0xF4	; 244
    4260:	95 85       	ldd	r25, Z+13	; 0x0d
    4262:	f6 01       	movw	r30, r12
    4264:	e2 0f       	add	r30, r18
    4266:	f3 1f       	adc	r31, r19
    4268:	90 83       	st	Z, r25
    426a:	8f 5f       	subi	r24, 0xFF	; 255
    426c:	f0 cf       	rjmp	.-32     	; 0x424e <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x60>
    426e:	c0 e0       	ldi	r28, 0x00	; 0
    4270:	8c 2f       	mov	r24, r28
    4272:	cf 91       	pop	r28
    4274:	1f 91       	pop	r17
    4276:	0f 91       	pop	r16
    4278:	ff 90       	pop	r15
    427a:	ef 90       	pop	r14
    427c:	df 90       	pop	r13
    427e:	cf 90       	pop	r12
    4280:	bf 90       	pop	r11
    4282:	af 90       	pop	r10
    4284:	08 95       	ret

00004286 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_>:

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
uint8_t NFC_PN532::mifareclassic_AuthenticateBlock (uint8_t * uid, uint8_t uidLen, uint32_t blockNumber, uint8_t keyNumber, uint8_t * keyData)
{
    4286:	af 92       	push	r10
    4288:	bf 92       	push	r11
    428a:	cf 92       	push	r12
    428c:	df 92       	push	r13
    428e:	ef 92       	push	r14
    4290:	0f 93       	push	r16
    4292:	1f 93       	push	r17
    4294:	cf 93       	push	r28
    4296:	df 93       	push	r29
    4298:	ec 01       	movw	r28, r24
    429a:	14 2f       	mov	r17, r20
  uint8_t len;
  uint8_t i;

  // Hang on to the key and uid data
  memcpy (_key, keyData, 6);
    429c:	5c 01       	movw	r10, r24
    429e:	8a e0       	ldi	r24, 0x0A	; 10
    42a0:	a8 0e       	add	r10, r24
    42a2:	b1 1c       	adc	r11, r1
    42a4:	86 e0       	ldi	r24, 0x06	; 6
    42a6:	f6 01       	movw	r30, r12
    42a8:	d5 01       	movw	r26, r10
    42aa:	01 90       	ld	r0, Z+
    42ac:	0d 92       	st	X+, r0
    42ae:	8a 95       	dec	r24
    42b0:	e1 f7       	brne	.-8      	; 0x42aa <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x24>
  memcpy (_uid, uid, uidLen);
    42b2:	50 e0       	ldi	r21, 0x00	; 0
    42b4:	ce 01       	movw	r24, r28
    42b6:	02 96       	adiw	r24, 0x02	; 2
    42b8:	0e 94 fe 42 	call	0x85fc	; 0x85fc <memcpy>
  _uidLen = uidLen;
    42bc:	19 87       	std	Y+9, r17	; 0x09
    PN532DEBUGPRINT.print(F("Using authentication KEY "));PN532DEBUGPRINT.print(keyNumber ? 'B' : 'A');PN532DEBUGPRINT.print(F(": "));
    NFC_PN532::PrintHex(_key, 6);
  #endif

  // Prepare the authentication command //
  pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;   /* Data Exchange Header */
    42be:	80 e4       	ldi	r24, 0x40	; 64
    42c0:	80 93 e9 0b 	sts	0x0BE9, r24	; 0x800be9 <pn532_packetbuffer>
  pn532_packetbuffer[1] = 1;                              /* Max card numbers */
    42c4:	81 e0       	ldi	r24, 0x01	; 1
    42c6:	80 93 ea 0b 	sts	0x0BEA, r24	; 0x800bea <pn532_packetbuffer+0x1>
  pn532_packetbuffer[2] = (keyNumber) ? MIFARE_CMD_AUTH_B : MIFARE_CMD_AUTH_A;
    42ca:	e1 10       	cpse	r14, r1
    42cc:	02 c0       	rjmp	.+4      	; 0x42d2 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x4c>
    42ce:	80 e6       	ldi	r24, 0x60	; 96
    42d0:	01 c0       	rjmp	.+2      	; 0x42d4 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x4e>
    42d2:	81 e6       	ldi	r24, 0x61	; 97
    42d4:	80 93 eb 0b 	sts	0x0BEB, r24	; 0x800beb <pn532_packetbuffer+0x2>
  pn532_packetbuffer[3] = blockNumber;                    /* Block Number (1K = 0..63, 4K = 0..255 */
    42d8:	00 93 ec 0b 	sts	0x0BEC, r16	; 0x800bec <pn532_packetbuffer+0x3>
  memcpy (pn532_packetbuffer+4, _key, 6);
    42dc:	86 e0       	ldi	r24, 0x06	; 6
    42de:	f5 01       	movw	r30, r10
    42e0:	ad ee       	ldi	r26, 0xED	; 237
    42e2:	bb e0       	ldi	r27, 0x0B	; 11
    42e4:	01 90       	ld	r0, Z+
    42e6:	0d 92       	st	X+, r0
    42e8:	8a 95       	dec	r24
    42ea:	e1 f7       	brne	.-8      	; 0x42e4 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x5e>
  for (i = 0; i < _uidLen; i++)
    42ec:	80 e0       	ldi	r24, 0x00	; 0
    42ee:	49 85       	ldd	r20, Y+9	; 0x09
    42f0:	84 17       	cp	r24, r20
    42f2:	60 f4       	brcc	.+24     	; 0x430c <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x86>
  {
    pn532_packetbuffer[10+i] = _uid[i];                /* 4 byte card ID */
    42f4:	28 2f       	mov	r18, r24
    42f6:	30 e0       	ldi	r19, 0x00	; 0
    42f8:	fe 01       	movw	r30, r28
    42fa:	e2 0f       	add	r30, r18
    42fc:	f3 1f       	adc	r31, r19
    42fe:	92 81       	ldd	r25, Z+2	; 0x02
    4300:	f9 01       	movw	r30, r18
    4302:	e7 51       	subi	r30, 0x17	; 23
    4304:	f4 4f       	sbci	r31, 0xF4	; 244
    4306:	92 87       	std	Z+10, r25	; 0x0a
  pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;   /* Data Exchange Header */
  pn532_packetbuffer[1] = 1;                              /* Max card numbers */
  pn532_packetbuffer[2] = (keyNumber) ? MIFARE_CMD_AUTH_B : MIFARE_CMD_AUTH_A;
  pn532_packetbuffer[3] = blockNumber;                    /* Block Number (1K = 0..63, 4K = 0..255 */
  memcpy (pn532_packetbuffer+4, _key, 6);
  for (i = 0; i < _uidLen; i++)
    4308:	8f 5f       	subi	r24, 0xFF	; 255
    430a:	f1 cf       	rjmp	.-30     	; 0x42ee <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x68>
  {
    pn532_packetbuffer[10+i] = _uid[i];                /* 4 byte card ID */
  }

  if (! sendCommandCheckAck(pn532_packetbuffer, 10+_uidLen))
    430c:	46 5f       	subi	r20, 0xF6	; 246
    430e:	28 ee       	ldi	r18, 0xE8	; 232
    4310:	33 e0       	ldi	r19, 0x03	; 3
    4312:	69 ee       	ldi	r22, 0xE9	; 233
    4314:	7b e0       	ldi	r23, 0x0B	; 11
    4316:	ce 01       	movw	r24, r28
    4318:	df de       	rcall	.-578    	; 0x40d8 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    431a:	88 23       	and	r24, r24
    431c:	49 f0       	breq	.+18     	; 0x4330 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0xaa>
    return 0;

  // Read the response packet
  readdata(pn532_packetbuffer, 12);
    431e:	4c e0       	ldi	r20, 0x0C	; 12
    4320:	69 ee       	ldi	r22, 0xE9	; 233
    4322:	7b e0       	ldi	r23, 0x0B	; 11
    4324:	ce 01       	movw	r24, r28
    4326:	34 de       	rcall	.-920    	; 0x3f90 <_ZN9NFC_PN5328readdataEPhh>
  {
    pn532_packetbuffer[10+i] = _uid[i];                /* 4 byte card ID */
  }

  if (! sendCommandCheckAck(pn532_packetbuffer, 10+_uidLen))
    return 0;
    4328:	81 e0       	ldi	r24, 0x01	; 1
    432a:	90 91 f0 0b 	lds	r25, 0x0BF0	; 0x800bf0 <pn532_packetbuffer+0x7>
    432e:	91 11       	cpse	r25, r1
    4330:	80 e0       	ldi	r24, 0x00	; 0
    #endif
    return 0;
  }

  return 1;
}
    4332:	df 91       	pop	r29
    4334:	cf 91       	pop	r28
    4336:	1f 91       	pop	r17
    4338:	0f 91       	pop	r16
    433a:	ef 90       	pop	r14
    433c:	df 90       	pop	r13
    433e:	cf 90       	pop	r12
    4340:	bf 90       	pop	r11
    4342:	af 90       	pop	r10
    4344:	08 95       	ret

00004346 <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh>:

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
uint8_t NFC_PN532::mifareclassic_ReadDataBlock (uint8_t blockNumber, uint8_t * data)
{
    4346:	0f 93       	push	r16
    4348:	1f 93       	push	r17
    434a:	cf 93       	push	r28
    434c:	df 93       	push	r29
    434e:	ec 01       	movw	r28, r24
    4350:	8a 01       	movw	r16, r20
  #ifdef MIFAREDEBUG
    PN532DEBUGPRINT.print(F("Trying to read 16 bytes from block "));PN532DEBUGPRINT.println(blockNumber);
  #endif

  /* Prepare the command */
  pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;
    4352:	80 e4       	ldi	r24, 0x40	; 64
    4354:	80 93 e9 0b 	sts	0x0BE9, r24	; 0x800be9 <pn532_packetbuffer>
  pn532_packetbuffer[1] = 1;                      /* Card number */
    4358:	81 e0       	ldi	r24, 0x01	; 1
    435a:	80 93 ea 0b 	sts	0x0BEA, r24	; 0x800bea <pn532_packetbuffer+0x1>
  pn532_packetbuffer[2] = MIFARE_CMD_READ;        /* Mifare Read command = 0x30 */
    435e:	80 e3       	ldi	r24, 0x30	; 48
    4360:	80 93 eb 0b 	sts	0x0BEB, r24	; 0x800beb <pn532_packetbuffer+0x2>
  pn532_packetbuffer[3] = blockNumber;            /* Block Number (0..63 for 1K, 0..255 for 4K) */
    4364:	60 93 ec 0b 	sts	0x0BEC, r22	; 0x800bec <pn532_packetbuffer+0x3>

  /* Send the command */
  if (! sendCommandCheckAck(pn532_packetbuffer, 4))
    4368:	28 ee       	ldi	r18, 0xE8	; 232
    436a:	33 e0       	ldi	r19, 0x03	; 3
    436c:	44 e0       	ldi	r20, 0x04	; 4
    436e:	69 ee       	ldi	r22, 0xE9	; 233
    4370:	7b e0       	ldi	r23, 0x0B	; 11
    4372:	ce 01       	movw	r24, r28
    4374:	b1 de       	rcall	.-670    	; 0x40d8 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    4376:	81 11       	cpse	r24, r1
    4378:	02 c0       	rjmp	.+4      	; 0x437e <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh+0x38>
  {
    #ifdef MIFAREDEBUG
      PN532DEBUGPRINT.println(F("Failed to receive ACK for read command"));
    #endif
    return 0;
    437a:	80 e0       	ldi	r24, 0x00	; 0
    437c:	12 c0       	rjmp	.+36     	; 0x43a2 <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh+0x5c>
  }

  /* Read the response packet */
  readdata(pn532_packetbuffer, 26);
    437e:	4a e1       	ldi	r20, 0x1A	; 26
    4380:	69 ee       	ldi	r22, 0xE9	; 233
    4382:	7b e0       	ldi	r23, 0x0B	; 11
    4384:	ce 01       	movw	r24, r28
    4386:	04 de       	rcall	.-1016   	; 0x3f90 <_ZN9NFC_PN5328readdataEPhh>

  /* If byte 8 isn't 0x00 we probably have an error */
  if (pn532_packetbuffer[7] != 0x00)
    4388:	80 91 f0 0b 	lds	r24, 0x0BF0	; 0x800bf0 <pn532_packetbuffer+0x7>
    438c:	81 11       	cpse	r24, r1
    438e:	f5 cf       	rjmp	.-22     	; 0x437a <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh+0x34>
    return 0;
  }

  /* Copy the 16 data bytes to the output buffer        */
  /* Block content starts at byte 9 of a valid response */
  memcpy (data, pn532_packetbuffer+8, 16);
    4390:	80 e1       	ldi	r24, 0x10	; 16
    4392:	e1 ef       	ldi	r30, 0xF1	; 241
    4394:	fb e0       	ldi	r31, 0x0B	; 11
    4396:	d8 01       	movw	r26, r16
    4398:	01 90       	ld	r0, Z+
    439a:	0d 92       	st	X+, r0
    439c:	8a 95       	dec	r24
    439e:	e1 f7       	brne	.-8      	; 0x4398 <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh+0x52>
    PN532DEBUGPRINT.print(F("Block "));
    PN532DEBUGPRINT.println(blockNumber);
    NFC_PN532::PrintHexChar(data, 16);
  #endif

  return 1;
    43a0:	81 e0       	ldi	r24, 0x01	; 1
}
    43a2:	df 91       	pop	r29
    43a4:	cf 91       	pop	r28
    43a6:	1f 91       	pop	r17
    43a8:	0f 91       	pop	r16
    43aa:	08 95       	ret

000043ac <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh>:

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
uint8_t NFC_PN532::mifareclassic_WriteDataBlock (uint8_t blockNumber, uint8_t * data)
{
    43ac:	cf 93       	push	r28
    43ae:	df 93       	push	r29
    43b0:	ec 01       	movw	r28, r24
//   #ifdef MIFAREDEBUG
//     PN532DEBUGPRINT.print(F("Trying to write 16 bytes to block "));PN532DEBUGPRINT.println(blockNumber);
//   #endif

  /* Prepare the first command */
  pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;
    43b2:	80 e4       	ldi	r24, 0x40	; 64
    43b4:	80 93 e9 0b 	sts	0x0BE9, r24	; 0x800be9 <pn532_packetbuffer>
  pn532_packetbuffer[1] = 1;                      /* Card number */
    43b8:	81 e0       	ldi	r24, 0x01	; 1
    43ba:	80 93 ea 0b 	sts	0x0BEA, r24	; 0x800bea <pn532_packetbuffer+0x1>
  pn532_packetbuffer[2] = MIFARE_CMD_WRITE;       /* Mifare Write command = 0xA0 */
    43be:	80 ea       	ldi	r24, 0xA0	; 160
    43c0:	80 93 eb 0b 	sts	0x0BEB, r24	; 0x800beb <pn532_packetbuffer+0x2>
  pn532_packetbuffer[3] = blockNumber;            /* Block Number (0..63 for 1K, 0..255 for 4K) */
    43c4:	60 93 ec 0b 	sts	0x0BEC, r22	; 0x800bec <pn532_packetbuffer+0x3>
  memcpy (pn532_packetbuffer+4, data, 16);        /* Data Payload */
    43c8:	80 e1       	ldi	r24, 0x10	; 16
    43ca:	fa 01       	movw	r30, r20
    43cc:	ad ee       	ldi	r26, 0xED	; 237
    43ce:	bb e0       	ldi	r27, 0x0B	; 11
    43d0:	01 90       	ld	r0, Z+
    43d2:	0d 92       	st	X+, r0
    43d4:	8a 95       	dec	r24
    43d6:	e1 f7       	brne	.-8      	; 0x43d0 <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh+0x24>

  /* Send the command */
  if (! sendCommandCheckAck(pn532_packetbuffer, 20))
    43d8:	28 ee       	ldi	r18, 0xE8	; 232
    43da:	33 e0       	ldi	r19, 0x03	; 3
    43dc:	44 e1       	ldi	r20, 0x14	; 20
    43de:	69 ee       	ldi	r22, 0xE9	; 233
    43e0:	7b e0       	ldi	r23, 0x0B	; 11
    43e2:	ce 01       	movw	r24, r28
    43e4:	79 de       	rcall	.-782    	; 0x40d8 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    43e6:	88 23       	and	r24, r24
    43e8:	69 f0       	breq	.+26     	; 0x4404 <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh+0x58>
    43ea:	8f e3       	ldi	r24, 0x3F	; 63
    43ec:	9c e9       	ldi	r25, 0x9C	; 156
    43ee:	01 97       	sbiw	r24, 0x01	; 1
    43f0:	f1 f7       	brne	.-4      	; 0x43ee <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh+0x42>
    43f2:	00 c0       	rjmp	.+0      	; 0x43f4 <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh+0x48>
    43f4:	00 00       	nop
    return 0;
  }
  _delay_ms(10);

  /* Read the response packet */
  readdata(pn532_packetbuffer, 26);
    43f6:	4a e1       	ldi	r20, 0x1A	; 26
    43f8:	69 ee       	ldi	r22, 0xE9	; 233
    43fa:	7b e0       	ldi	r23, 0x0B	; 11
    43fc:	ce 01       	movw	r24, r28
    43fe:	c8 dd       	rcall	.-1136   	; 0x3f90 <_ZN9NFC_PN5328readdataEPhh>

  return 1;
    4400:	81 e0       	ldi	r24, 0x01	; 1
    4402:	01 c0       	rjmp	.+2      	; 0x4406 <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh+0x5a>
  if (! sendCommandCheckAck(pn532_packetbuffer, 20))
  {
//     #ifdef MIFAREDEBUG
//       PN532DEBUGPRINT.println(F("Failed to receive ACK for write command"));
//     #endif
    return 0;
    4404:	80 e0       	ldi	r24, 0x00	; 0

  /* Read the response packet */
  readdata(pn532_packetbuffer, 26);

  return 1;
}
    4406:	df 91       	pop	r29
    4408:	cf 91       	pop	r28
    440a:	08 95       	ret

0000440c <_ZL9date2daysjhh>:
/*******************************************************************************************************************
** Method dec2bcd converts an integer to BCD encoding                                                             **
*******************************************************************************************************************/
uint8_t DS3231M_Class::int2bcd(const uint8_t dec){                            // convert BCD digits to integer    //
  return ((dec/10 * 16) + (dec % 10));                                        //                                  //
} // of method int2bcd                                                        //                                  //
    440c:	80 3d       	cpi	r24, 0xD0	; 208
    440e:	27 e0       	ldi	r18, 0x07	; 7
    4410:	92 07       	cpc	r25, r18
    4412:	10 f0       	brcs	.+4      	; 0x4418 <_ZL9date2daysjhh+0xc>
    4414:	80 5d       	subi	r24, 0xD0	; 208
    4416:	97 40       	sbci	r25, 0x07	; 7
    4418:	50 e0       	ldi	r21, 0x00	; 0
    441a:	e8 e2       	ldi	r30, 0x28	; 40
    441c:	f2 e0       	ldi	r31, 0x02	; 2
    441e:	21 e0       	ldi	r18, 0x01	; 1
    4420:	26 17       	cp	r18, r22
    4422:	30 f4       	brcc	.+12     	; 0x4430 <_ZL9date2daysjhh+0x24>
    4424:	34 91       	lpm	r19, Z
    4426:	43 0f       	add	r20, r19
    4428:	51 1d       	adc	r21, r1
    442a:	2f 5f       	subi	r18, 0xFF	; 255
    442c:	31 96       	adiw	r30, 0x01	; 1
    442e:	f8 cf       	rjmp	.-16     	; 0x4420 <_ZL9date2daysjhh+0x14>
    4430:	63 30       	cpi	r22, 0x03	; 3
    4432:	38 f0       	brcs	.+14     	; 0x4442 <_ZL9date2daysjhh+0x36>
    4434:	9c 01       	movw	r18, r24
    4436:	23 70       	andi	r18, 0x03	; 3
    4438:	33 27       	eor	r19, r19
    443a:	23 2b       	or	r18, r19
    443c:	11 f4       	brne	.+4      	; 0x4442 <_ZL9date2daysjhh+0x36>
    443e:	4f 5f       	subi	r20, 0xFF	; 255
    4440:	5f 4f       	sbci	r21, 0xFF	; 255
    4442:	bc 01       	movw	r22, r24
    4444:	6d 5f       	subi	r22, 0xFD	; 253
    4446:	7f 4f       	sbci	r23, 0xFF	; 255
    4448:	76 95       	lsr	r23
    444a:	67 95       	ror	r22
    444c:	76 95       	lsr	r23
    444e:	67 95       	ror	r22
    4450:	ed e6       	ldi	r30, 0x6D	; 109
    4452:	f1 e0       	ldi	r31, 0x01	; 1
    4454:	8e 9f       	mul	r24, r30
    4456:	90 01       	movw	r18, r0
    4458:	8f 9f       	mul	r24, r31
    445a:	30 0d       	add	r19, r0
    445c:	9e 9f       	mul	r25, r30
    445e:	30 0d       	add	r19, r0
    4460:	11 24       	eor	r1, r1
    4462:	c9 01       	movw	r24, r18
    4464:	01 97       	sbiw	r24, 0x01	; 1
    4466:	86 0f       	add	r24, r22
    4468:	97 1f       	adc	r25, r23
    446a:	84 0f       	add	r24, r20
    446c:	95 1f       	adc	r25, r21
    446e:	08 95       	ret

00004470 <_ZL6conv2dPKc>:
    4470:	fc 01       	movw	r30, r24
    4472:	90 81       	ld	r25, Z
    4474:	90 53       	subi	r25, 0x30	; 48
    4476:	9a 30       	cpi	r25, 0x0A	; 10
    4478:	08 f0       	brcs	.+2      	; 0x447c <_ZL6conv2dPKc+0xc>
    447a:	90 e0       	ldi	r25, 0x00	; 0
    447c:	81 81       	ldd	r24, Z+1	; 0x01
    447e:	80 53       	subi	r24, 0x30	; 48
    4480:	2a e0       	ldi	r18, 0x0A	; 10
    4482:	92 9f       	mul	r25, r18
    4484:	80 0d       	add	r24, r0
    4486:	11 24       	eor	r1, r1
    4488:	08 95       	ret

0000448a <_ZN8DateTimeC1Em>:
    448a:	8f 92       	push	r8
    448c:	9f 92       	push	r9
    448e:	af 92       	push	r10
    4490:	bf 92       	push	r11
    4492:	cf 92       	push	r12
    4494:	df 92       	push	r13
    4496:	ef 92       	push	r14
    4498:	ff 92       	push	r15
    449a:	cf 93       	push	r28
    449c:	df 93       	push	r29
    449e:	ec 01       	movw	r28, r24
    44a0:	6a 01       	movw	r12, r20
    44a2:	7b 01       	movw	r14, r22
    44a4:	80 e8       	ldi	r24, 0x80	; 128
    44a6:	c8 1a       	sub	r12, r24
    44a8:	83 e4       	ldi	r24, 0x43	; 67
    44aa:	d8 0a       	sbc	r13, r24
    44ac:	8d e6       	ldi	r24, 0x6D	; 109
    44ae:	e8 0a       	sbc	r14, r24
    44b0:	88 e3       	ldi	r24, 0x38	; 56
    44b2:	f8 0a       	sbc	r15, r24
    44b4:	8c e3       	ldi	r24, 0x3C	; 60
    44b6:	88 2e       	mov	r8, r24
    44b8:	91 2c       	mov	r9, r1
    44ba:	a1 2c       	mov	r10, r1
    44bc:	b1 2c       	mov	r11, r1
    44be:	c7 01       	movw	r24, r14
    44c0:	b6 01       	movw	r22, r12
    44c2:	a5 01       	movw	r20, r10
    44c4:	94 01       	movw	r18, r8
    44c6:	0e 94 5f 40 	call	0x80be	; 0x80be <__udivmodsi4>
    44ca:	6d 83       	std	Y+5, r22	; 0x05
    44cc:	ca 01       	movw	r24, r20
    44ce:	b9 01       	movw	r22, r18
    44d0:	a5 01       	movw	r20, r10
    44d2:	94 01       	movw	r18, r8
    44d4:	0e 94 5f 40 	call	0x80be	; 0x80be <__udivmodsi4>
    44d8:	6c 83       	std	Y+4, r22	; 0x04
    44da:	c7 01       	movw	r24, r14
    44dc:	b6 01       	movw	r22, r12
    44de:	20 e1       	ldi	r18, 0x10	; 16
    44e0:	3e e0       	ldi	r19, 0x0E	; 14
    44e2:	40 e0       	ldi	r20, 0x00	; 0
    44e4:	50 e0       	ldi	r21, 0x00	; 0
    44e6:	0e 94 5f 40 	call	0x80be	; 0x80be <__udivmodsi4>
    44ea:	ca 01       	movw	r24, r20
    44ec:	b9 01       	movw	r22, r18
    44ee:	28 e1       	ldi	r18, 0x18	; 24
    44f0:	30 e0       	ldi	r19, 0x00	; 0
    44f2:	40 e0       	ldi	r20, 0x00	; 0
    44f4:	50 e0       	ldi	r21, 0x00	; 0
    44f6:	0e 94 5f 40 	call	0x80be	; 0x80be <__udivmodsi4>
    44fa:	6b 83       	std	Y+3, r22	; 0x03
    44fc:	c7 01       	movw	r24, r14
    44fe:	b6 01       	movw	r22, r12
    4500:	20 e8       	ldi	r18, 0x80	; 128
    4502:	31 e5       	ldi	r19, 0x51	; 81
    4504:	41 e0       	ldi	r20, 0x01	; 1
    4506:	50 e0       	ldi	r21, 0x00	; 0
    4508:	0e 94 5f 40 	call	0x80be	; 0x80be <__udivmodsi4>
    450c:	18 82       	st	Y, r1
    450e:	88 81       	ld	r24, Y
    4510:	98 2f       	mov	r25, r24
    4512:	93 70       	andi	r25, 0x03	; 3
    4514:	41 e0       	ldi	r20, 0x01	; 1
    4516:	50 e0       	ldi	r21, 0x00	; 0
    4518:	11 f0       	breq	.+4      	; 0x451e <_ZN8DateTimeC1Em+0x94>
    451a:	40 e0       	ldi	r20, 0x00	; 0
    451c:	50 e0       	ldi	r21, 0x00	; 0
    451e:	ba 01       	movw	r22, r20
    4520:	63 59       	subi	r22, 0x93	; 147
    4522:	7e 4f       	sbci	r23, 0xFE	; 254
    4524:	26 17       	cp	r18, r22
    4526:	37 07       	cpc	r19, r23
    4528:	38 f0       	brcs	.+14     	; 0x4538 <_ZN8DateTimeC1Em+0xae>
    452a:	24 1b       	sub	r18, r20
    452c:	35 0b       	sbc	r19, r21
    452e:	2d 56       	subi	r18, 0x6D	; 109
    4530:	31 40       	sbci	r19, 0x01	; 1
    4532:	8f 5f       	subi	r24, 0xFF	; 255
    4534:	88 83       	st	Y, r24
    4536:	eb cf       	rjmp	.-42     	; 0x450e <_ZN8DateTimeC1Em+0x84>
    4538:	81 e0       	ldi	r24, 0x01	; 1
    453a:	89 83       	std	Y+1, r24	; 0x01
    453c:	89 81       	ldd	r24, Y+1	; 0x01
    453e:	e8 2f       	mov	r30, r24
    4540:	f0 e0       	ldi	r31, 0x00	; 0
    4542:	e9 5d       	subi	r30, 0xD9	; 217
    4544:	fd 4f       	sbci	r31, 0xFD	; 253
    4546:	e4 91       	lpm	r30, Z
    4548:	91 11       	cpse	r25, r1
    454a:	03 c0       	rjmp	.+6      	; 0x4552 <_ZN8DateTimeC1Em+0xc8>
    454c:	82 30       	cpi	r24, 0x02	; 2
    454e:	09 f4       	brne	.+2      	; 0x4552 <_ZN8DateTimeC1Em+0xc8>
    4550:	ef 5f       	subi	r30, 0xFF	; 255
    4552:	f0 e0       	ldi	r31, 0x00	; 0
    4554:	2e 17       	cp	r18, r30
    4556:	3f 07       	cpc	r19, r31
    4558:	20 f0       	brcs	.+8      	; 0x4562 <_ZN8DateTimeC1Em+0xd8>
    455a:	2e 1b       	sub	r18, r30
    455c:	3f 0b       	sbc	r19, r31
    455e:	8f 5f       	subi	r24, 0xFF	; 255
    4560:	ec cf       	rjmp	.-40     	; 0x453a <_ZN8DateTimeC1Em+0xb0>
    4562:	2f 5f       	subi	r18, 0xFF	; 255
    4564:	2a 83       	std	Y+2, r18	; 0x02
    4566:	df 91       	pop	r29
    4568:	cf 91       	pop	r28
    456a:	ff 90       	pop	r15
    456c:	ef 90       	pop	r14
    456e:	df 90       	pop	r13
    4570:	cf 90       	pop	r12
    4572:	bf 90       	pop	r11
    4574:	af 90       	pop	r10
    4576:	9f 90       	pop	r9
    4578:	8f 90       	pop	r8
    457a:	08 95       	ret

0000457c <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>:
    457c:	ef 92       	push	r14
    457e:	ff 92       	push	r15
    4580:	0f 93       	push	r16
    4582:	1f 93       	push	r17
    4584:	cf 93       	push	r28
    4586:	df 93       	push	r29
    4588:	cd b7       	in	r28, 0x3d	; 61
    458a:	de b7       	in	r29, 0x3e	; 62
    458c:	2b 97       	sbiw	r28, 0x0b	; 11
    458e:	0f b6       	in	r0, 0x3f	; 63
    4590:	f8 94       	cli
    4592:	de bf       	out	0x3e, r29	; 62
    4594:	0f be       	out	0x3f, r0	; 63
    4596:	cd bf       	out	0x3d, r28	; 61
    4598:	8c 01       	movw	r16, r24
    459a:	7a 01       	movw	r14, r20
    459c:	4b e0       	ldi	r20, 0x0B	; 11
    459e:	50 e0       	ldi	r21, 0x00	; 0
    45a0:	ce 01       	movw	r24, r28
    45a2:	01 96       	adiw	r24, 0x01	; 1
    45a4:	0e 94 f5 42 	call	0x85ea	; 0x85ea <memcpy_P>
    45a8:	ce 01       	movw	r24, r28
    45aa:	0a 96       	adiw	r24, 0x0a	; 10
    45ac:	61 df       	rcall	.-318    	; 0x4470 <_ZL6conv2dPKc>
    45ae:	f8 01       	movw	r30, r16
    45b0:	80 83       	st	Z, r24
    45b2:	e9 81       	ldd	r30, Y+1	; 0x01
    45b4:	8e 2f       	mov	r24, r30
    45b6:	90 e0       	ldi	r25, 0x00	; 0
    45b8:	fc 01       	movw	r30, r24
    45ba:	e1 54       	subi	r30, 0x41	; 65
    45bc:	f1 09       	sbc	r31, r1
    45be:	e3 31       	cpi	r30, 0x13	; 19
    45c0:	f1 05       	cpc	r31, r1
    45c2:	48 f5       	brcc	.+82     	; 0x4616 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
    45c4:	ed 5a       	subi	r30, 0xAD	; 173
    45c6:	ff 4f       	sbci	r31, 0xFF	; 255
    45c8:	0c 94 81 40 	jmp	0x8102	; 0x8102 <__tablejump2__>
    45cc:	8a 81       	ldd	r24, Y+2	; 0x02
    45ce:	81 36       	cpi	r24, 0x61	; 97
    45d0:	29 f0       	breq	.+10     	; 0x45dc <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x60>
    45d2:	8b 81       	ldd	r24, Y+3	; 0x03
    45d4:	8e 36       	cpi	r24, 0x6E	; 110
    45d6:	21 f0       	breq	.+8      	; 0x45e0 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x64>
    45d8:	87 e0       	ldi	r24, 0x07	; 7
    45da:	1b c0       	rjmp	.+54     	; 0x4612 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    45dc:	81 e0       	ldi	r24, 0x01	; 1
    45de:	19 c0       	rjmp	.+50     	; 0x4612 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    45e0:	86 e0       	ldi	r24, 0x06	; 6
    45e2:	17 c0       	rjmp	.+46     	; 0x4612 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    45e4:	82 e0       	ldi	r24, 0x02	; 2
    45e6:	15 c0       	rjmp	.+42     	; 0x4612 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    45e8:	8b 81       	ldd	r24, Y+3	; 0x03
    45ea:	82 37       	cpi	r24, 0x72	; 114
    45ec:	11 f0       	breq	.+4      	; 0x45f2 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x76>
    45ee:	88 e0       	ldi	r24, 0x08	; 8
    45f0:	10 c0       	rjmp	.+32     	; 0x4612 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    45f2:	84 e0       	ldi	r24, 0x04	; 4
    45f4:	0e c0       	rjmp	.+28     	; 0x4612 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    45f6:	8b 81       	ldd	r24, Y+3	; 0x03
    45f8:	82 37       	cpi	r24, 0x72	; 114
    45fa:	11 f0       	breq	.+4      	; 0x4600 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x84>
    45fc:	85 e0       	ldi	r24, 0x05	; 5
    45fe:	09 c0       	rjmp	.+18     	; 0x4612 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    4600:	83 e0       	ldi	r24, 0x03	; 3
    4602:	07 c0       	rjmp	.+14     	; 0x4612 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    4604:	89 e0       	ldi	r24, 0x09	; 9
    4606:	05 c0       	rjmp	.+10     	; 0x4612 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    4608:	8a e0       	ldi	r24, 0x0A	; 10
    460a:	03 c0       	rjmp	.+6      	; 0x4612 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    460c:	8b e0       	ldi	r24, 0x0B	; 11
    460e:	01 c0       	rjmp	.+2      	; 0x4612 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    4610:	8c e0       	ldi	r24, 0x0C	; 12
    4612:	f8 01       	movw	r30, r16
    4614:	81 83       	std	Z+1, r24	; 0x01
    4616:	ce 01       	movw	r24, r28
    4618:	05 96       	adiw	r24, 0x05	; 5
    461a:	2a df       	rcall	.-428    	; 0x4470 <_ZL6conv2dPKc>
    461c:	f8 01       	movw	r30, r16
    461e:	82 83       	std	Z+2, r24	; 0x02
    4620:	48 e0       	ldi	r20, 0x08	; 8
    4622:	50 e0       	ldi	r21, 0x00	; 0
    4624:	b7 01       	movw	r22, r14
    4626:	ce 01       	movw	r24, r28
    4628:	01 96       	adiw	r24, 0x01	; 1
    462a:	0e 94 f5 42 	call	0x85ea	; 0x85ea <memcpy_P>
    462e:	ce 01       	movw	r24, r28
    4630:	01 96       	adiw	r24, 0x01	; 1
    4632:	1e df       	rcall	.-452    	; 0x4470 <_ZL6conv2dPKc>
    4634:	f8 01       	movw	r30, r16
    4636:	83 83       	std	Z+3, r24	; 0x03
    4638:	ce 01       	movw	r24, r28
    463a:	04 96       	adiw	r24, 0x04	; 4
    463c:	19 df       	rcall	.-462    	; 0x4470 <_ZL6conv2dPKc>
    463e:	f8 01       	movw	r30, r16
    4640:	84 83       	std	Z+4, r24	; 0x04
    4642:	ce 01       	movw	r24, r28
    4644:	07 96       	adiw	r24, 0x07	; 7
    4646:	14 df       	rcall	.-472    	; 0x4470 <_ZL6conv2dPKc>
    4648:	f8 01       	movw	r30, r16
    464a:	85 83       	std	Z+5, r24	; 0x05
    464c:	2b 96       	adiw	r28, 0x0b	; 11
    464e:	0f b6       	in	r0, 0x3f	; 63
    4650:	f8 94       	cli
    4652:	de bf       	out	0x3e, r29	; 62
    4654:	0f be       	out	0x3f, r0	; 63
    4656:	cd bf       	out	0x3d, r28	; 61
    4658:	df 91       	pop	r29
    465a:	cf 91       	pop	r28
    465c:	1f 91       	pop	r17
    465e:	0f 91       	pop	r16
    4660:	ff 90       	pop	r15
    4662:	ef 90       	pop	r14
    4664:	08 95       	ret

00004666 <_ZNK8DateTime12dayOfTheWeekEv>:
    4666:	fc 01       	movw	r30, r24
    4668:	80 81       	ld	r24, Z
    466a:	42 81       	ldd	r20, Z+2	; 0x02
    466c:	61 81       	ldd	r22, Z+1	; 0x01
    466e:	90 e0       	ldi	r25, 0x00	; 0
    4670:	cd de       	rcall	.-614    	; 0x440c <_ZL9date2daysjhh>
    4672:	06 96       	adiw	r24, 0x06	; 6
    4674:	67 e0       	ldi	r22, 0x07	; 7
    4676:	70 e0       	ldi	r23, 0x00	; 0
    4678:	0c 94 4b 40 	jmp	0x8096	; 0x8096 <__udivmodhi4>
    467c:	08 95       	ret

0000467e <_ZNK8DateTime8unixtimeEv>:
    467e:	ef 92       	push	r14
    4680:	ff 92       	push	r15
    4682:	0f 93       	push	r16
    4684:	1f 93       	push	r17
    4686:	cf 93       	push	r28
    4688:	df 93       	push	r29
    468a:	ec 01       	movw	r28, r24
    468c:	88 81       	ld	r24, Y
    468e:	4a 81       	ldd	r20, Y+2	; 0x02
    4690:	69 81       	ldd	r22, Y+1	; 0x01
    4692:	90 e0       	ldi	r25, 0x00	; 0
    4694:	bb de       	rcall	.-650    	; 0x440c <_ZL9date2daysjhh>
    4696:	9c 01       	movw	r18, r24
    4698:	a8 e1       	ldi	r26, 0x18	; 24
    469a:	b0 e0       	ldi	r27, 0x00	; 0
    469c:	0e 94 8a 40 	call	0x8114	; 0x8114 <__umulhisi3>
    46a0:	2b 81       	ldd	r18, Y+3	; 0x03
    46a2:	7b 01       	movw	r14, r22
    46a4:	8c 01       	movw	r16, r24
    46a6:	e2 0e       	add	r14, r18
    46a8:	f1 1c       	adc	r15, r1
    46aa:	01 1d       	adc	r16, r1
    46ac:	11 1d       	adc	r17, r1
    46ae:	a8 01       	movw	r20, r16
    46b0:	97 01       	movw	r18, r14
    46b2:	ac e3       	ldi	r26, 0x3C	; 60
    46b4:	b0 e0       	ldi	r27, 0x00	; 0
    46b6:	0e 94 99 40 	call	0x8132	; 0x8132 <__muluhisi3>
    46ba:	2c 81       	ldd	r18, Y+4	; 0x04
    46bc:	7b 01       	movw	r14, r22
    46be:	8c 01       	movw	r16, r24
    46c0:	e2 0e       	add	r14, r18
    46c2:	f1 1c       	adc	r15, r1
    46c4:	01 1d       	adc	r16, r1
    46c6:	11 1d       	adc	r17, r1
    46c8:	a8 01       	movw	r20, r16
    46ca:	97 01       	movw	r18, r14
    46cc:	0e 94 99 40 	call	0x8132	; 0x8132 <__muluhisi3>
    46d0:	2d 81       	ldd	r18, Y+5	; 0x05
    46d2:	dc 01       	movw	r26, r24
    46d4:	cb 01       	movw	r24, r22
    46d6:	82 0f       	add	r24, r18
    46d8:	91 1d       	adc	r25, r1
    46da:	a1 1d       	adc	r26, r1
    46dc:	b1 1d       	adc	r27, r1
    46de:	bc 01       	movw	r22, r24
    46e0:	cd 01       	movw	r24, r26
    46e2:	60 58       	subi	r22, 0x80	; 128
    46e4:	7c 4b       	sbci	r23, 0xBC	; 188
    46e6:	82 49       	sbci	r24, 0x92	; 146
    46e8:	97 4c       	sbci	r25, 0xC7	; 199
    46ea:	df 91       	pop	r29
    46ec:	cf 91       	pop	r28
    46ee:	1f 91       	pop	r17
    46f0:	0f 91       	pop	r16
    46f2:	ff 90       	pop	r15
    46f4:	ef 90       	pop	r14
    46f6:	08 95       	ret

000046f8 <_ZNK8DateTime11secondstimeEv>:
    46f8:	ef 92       	push	r14
    46fa:	ff 92       	push	r15
    46fc:	0f 93       	push	r16
    46fe:	1f 93       	push	r17
    4700:	cf 93       	push	r28
    4702:	df 93       	push	r29
    4704:	ec 01       	movw	r28, r24
    4706:	88 81       	ld	r24, Y
    4708:	4a 81       	ldd	r20, Y+2	; 0x02
    470a:	69 81       	ldd	r22, Y+1	; 0x01
    470c:	90 e0       	ldi	r25, 0x00	; 0
    470e:	7e de       	rcall	.-772    	; 0x440c <_ZL9date2daysjhh>
    4710:	9c 01       	movw	r18, r24
    4712:	a8 e1       	ldi	r26, 0x18	; 24
    4714:	b0 e0       	ldi	r27, 0x00	; 0
    4716:	0e 94 8a 40 	call	0x8114	; 0x8114 <__umulhisi3>
    471a:	2b 81       	ldd	r18, Y+3	; 0x03
    471c:	7b 01       	movw	r14, r22
    471e:	8c 01       	movw	r16, r24
    4720:	e2 0e       	add	r14, r18
    4722:	f1 1c       	adc	r15, r1
    4724:	01 1d       	adc	r16, r1
    4726:	11 1d       	adc	r17, r1
    4728:	a8 01       	movw	r20, r16
    472a:	97 01       	movw	r18, r14
    472c:	ac e3       	ldi	r26, 0x3C	; 60
    472e:	b0 e0       	ldi	r27, 0x00	; 0
    4730:	0e 94 99 40 	call	0x8132	; 0x8132 <__muluhisi3>
    4734:	2c 81       	ldd	r18, Y+4	; 0x04
    4736:	7b 01       	movw	r14, r22
    4738:	8c 01       	movw	r16, r24
    473a:	e2 0e       	add	r14, r18
    473c:	f1 1c       	adc	r15, r1
    473e:	01 1d       	adc	r16, r1
    4740:	11 1d       	adc	r17, r1
    4742:	a8 01       	movw	r20, r16
    4744:	97 01       	movw	r18, r14
    4746:	0e 94 99 40 	call	0x8132	; 0x8132 <__muluhisi3>
    474a:	2d 81       	ldd	r18, Y+5	; 0x05
    474c:	62 0f       	add	r22, r18
    474e:	71 1d       	adc	r23, r1
    4750:	81 1d       	adc	r24, r1
    4752:	91 1d       	adc	r25, r1
    4754:	df 91       	pop	r29
    4756:	cf 91       	pop	r28
    4758:	1f 91       	pop	r17
    475a:	0f 91       	pop	r16
    475c:	ff 90       	pop	r15
    475e:	ef 90       	pop	r14
    4760:	08 95       	ret

00004762 <_ZN13DS3231M_ClassC1Ev>:
    4762:	fc 01       	movw	r30, r24
    4764:	10 82       	st	Z, r1
    4766:	11 82       	std	Z+1, r1	; 0x01
    4768:	12 82       	std	Z+2, r1	; 0x02
    476a:	13 82       	std	Z+3, r1	; 0x03
    476c:	14 82       	std	Z+4, r1	; 0x04
    476e:	08 95       	ret

00004770 <_ZN13DS3231M_ClassD1Ev>:
    4770:	08 95       	ret

00004772 <_ZN13DS3231M_Class9writeByteEhh>:
  return Wire.read();                                                         // read it and return it            //
} // of method readByte()                                                     //                                  //
/*******************************************************************************************************************
** Method writeByte write 1 byte to the specified address                                                         **
*******************************************************************************************************************/
void DS3231M_Class::writeByte(const uint8_t addr, const uint8_t data) {       //                                  //
    4772:	0f 93       	push	r16
    4774:	1f 93       	push	r17
    4776:	cf 93       	push	r28
    4778:	df 93       	push	r29
    477a:	ec 01       	movw	r28, r24
    477c:	06 2f       	mov	r16, r22
    477e:	14 2f       	mov	r17, r20
  Wire.beginTransmission(DS3231M_ADDRESS);                                    // Address the I2C device           //
    4780:	68 e6       	ldi	r22, 0x68	; 104
    4782:	82 ee       	ldi	r24, 0xE2	; 226
    4784:	9c e0       	ldi	r25, 0x0C	; 12
    4786:	0e 94 95 36 	call	0x6d2a	; 0x6d2a <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(addr);                                                           // Send the register address to read//
    478a:	60 2f       	mov	r22, r16
    478c:	82 ee       	ldi	r24, 0xE2	; 226
    478e:	9c e0       	ldi	r25, 0x0C	; 12
    4790:	0e 94 44 36 	call	0x6c88	; 0x6c88 <_ZN7TwoWire5writeEh>
  Wire.write(data);                                                           // Send the register address to read//
    4794:	61 2f       	mov	r22, r17
    4796:	82 ee       	ldi	r24, 0xE2	; 226
    4798:	9c e0       	ldi	r25, 0x0C	; 12
    479a:	0e 94 44 36 	call	0x6c88	; 0x6c88 <_ZN7TwoWire5writeEh>
  _TransmissionStatus = Wire.endTransmission();                               // Close transmission               //
    479e:	82 ee       	ldi	r24, 0xE2	; 226
    47a0:	9c e0       	ldi	r25, 0x0C	; 12
    47a2:	0e 94 16 37 	call	0x6e2c	; 0x6e2c <_ZN7TwoWire15endTransmissionEv>
    47a6:	88 83       	st	Y, r24
} // of method writeByte()                                                    //                                  //
    47a8:	df 91       	pop	r29
    47aa:	cf 91       	pop	r28
    47ac:	1f 91       	pop	r17
    47ae:	0f 91       	pop	r16
    47b0:	08 95       	ret

000047b2 <_ZN13DS3231M_Class8readByteEh>:
  return true;                                                                // return success                   //
} // of method begin()                                                        //                                  //
/*******************************************************************************************************************
** Method readByte reads 1 byte from the specified address                                                        **
*******************************************************************************************************************/
uint8_t DS3231M_Class::readByte(const uint8_t addr) {                         //                                  //
    47b2:	1f 93       	push	r17
    47b4:	cf 93       	push	r28
    47b6:	df 93       	push	r29
    47b8:	ec 01       	movw	r28, r24
    47ba:	16 2f       	mov	r17, r22
  Wire.beginTransmission(DS3231M_ADDRESS);                                    // Address the I2C device           //
    47bc:	68 e6       	ldi	r22, 0x68	; 104
    47be:	82 ee       	ldi	r24, 0xE2	; 226
    47c0:	9c e0       	ldi	r25, 0x0C	; 12
    47c2:	0e 94 95 36 	call	0x6d2a	; 0x6d2a <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(addr);                                                           // Send the register address to read//
    47c6:	61 2f       	mov	r22, r17
    47c8:	82 ee       	ldi	r24, 0xE2	; 226
    47ca:	9c e0       	ldi	r25, 0x0C	; 12
    47cc:	0e 94 44 36 	call	0x6c88	; 0x6c88 <_ZN7TwoWire5writeEh>
  _TransmissionStatus = Wire.endTransmission();                               // Close transmission               //
    47d0:	82 ee       	ldi	r24, 0xE2	; 226
    47d2:	9c e0       	ldi	r25, 0x0C	; 12
    47d4:	0e 94 16 37 	call	0x6e2c	; 0x6e2c <_ZN7TwoWire15endTransmissionEv>
    47d8:	88 83       	st	Y, r24
  Wire.requestFrom(DS3231M_ADDRESS, (uint8_t)1);                              // Request 1 byte of data           //
    47da:	41 e0       	ldi	r20, 0x01	; 1
    47dc:	68 e6       	ldi	r22, 0x68	; 104
    47de:	82 ee       	ldi	r24, 0xE2	; 226
    47e0:	9c e0       	ldi	r25, 0x0C	; 12
    47e2:	0e 94 12 37 	call	0x6e24	; 0x6e24 <_ZN7TwoWire11requestFromEhh>
  return Wire.read();                                                         // read it and return it            //
    47e6:	82 ee       	ldi	r24, 0xE2	; 226
    47e8:	9c e0       	ldi	r25, 0x0C	; 12
    47ea:	0e 94 be 35 	call	0x6b7c	; 0x6b7c <_ZN7TwoWire4readEv>
} // of method readByte()                                                     //                                  //
    47ee:	df 91       	pop	r29
    47f0:	cf 91       	pop	r28
    47f2:	1f 91       	pop	r17
    47f4:	08 95       	ret

000047f6 <_ZN13DS3231M_Class5beginEm>:
DS3231M_Class::~DS3231M_Class() {}                                            // Unused class destructor          //
/*******************************************************************************************************************
** Method begin starts I2C communications with the device, using a default address if one is not specified and    **
** return true if the device has been detected and false if it was not                                            **
*******************************************************************************************************************/
bool DS3231M_Class::begin(const uint32_t i2cSpeed) {                          // Start I2C communications         //
    47f6:	cf 92       	push	r12
    47f8:	df 92       	push	r13
    47fa:	ef 92       	push	r14
    47fc:	ff 92       	push	r15
    47fe:	cf 93       	push	r28
    4800:	df 93       	push	r29
    4802:	ec 01       	movw	r28, r24
    4804:	6a 01       	movw	r12, r20
    4806:	7b 01       	movw	r14, r22
  Wire.begin();                                                               // Start I2C as master device       //
    4808:	82 ee       	ldi	r24, 0xE2	; 226
    480a:	9c e0       	ldi	r25, 0x0C	; 12
    480c:	0e 94 82 36 	call	0x6d04	; 0x6d04 <_ZN7TwoWire5beginEv>
  Wire.setClock(i2cSpeed);                                                    // Set I2C clock speed              //
    4810:	b7 01       	movw	r22, r14
    4812:	a6 01       	movw	r20, r12
    4814:	82 ee       	ldi	r24, 0xE2	; 226
    4816:	9c e0       	ldi	r25, 0x0C	; 12
    4818:	0e 94 92 36 	call	0x6d24	; 0x6d24 <_ZN7TwoWire8setClockEm>
  Wire.beginTransmission(DS3231M_ADDRESS);                                    // Address the DS3231M              //
    481c:	68 e6       	ldi	r22, 0x68	; 104
    481e:	82 ee       	ldi	r24, 0xE2	; 226
    4820:	9c e0       	ldi	r25, 0x0C	; 12
    4822:	0e 94 95 36 	call	0x6d2a	; 0x6d2a <_ZN7TwoWire17beginTransmissionEh>
  uint8_t errorCode = Wire.endTransmission();                                 // See if there's a device present  //
    4826:	82 ee       	ldi	r24, 0xE2	; 226
    4828:	9c e0       	ldi	r25, 0x0C	; 12
    482a:	0e 94 16 37 	call	0x6e2c	; 0x6e2c <_ZN7TwoWire15endTransmissionEv>
  if (errorCode == 0) {                                                       // If we have a DS3231M             //
    482e:	81 11       	cpse	r24, r1
    4830:	0a c0       	rjmp	.+20     	; 0x4846 <_ZN13DS3231M_Class5beginEm+0x50>
    writeByte(DS3231M_RTCHOUR,readByte(DS3231M_RTCHOUR)&B10111111);           // Force use of 24 hour clock       //
    4832:	62 e0       	ldi	r22, 0x02	; 2
    4834:	ce 01       	movw	r24, r28
    4836:	bd df       	rcall	.-134    	; 0x47b2 <_ZN13DS3231M_Class8readByteEh>
    4838:	48 2f       	mov	r20, r24
    483a:	4f 7b       	andi	r20, 0xBF	; 191
    483c:	62 e0       	ldi	r22, 0x02	; 2
    483e:	ce 01       	movw	r24, r28
    4840:	98 df       	rcall	.-208    	; 0x4772 <_ZN13DS3231M_Class9writeByteEhh>
  } // of if-then device detected                                             //                                  //
  else return false;                                                          // return error if no device found  //
  return true;                                                                // return success                   //
    4842:	81 e0       	ldi	r24, 0x01	; 1
    4844:	01 c0       	rjmp	.+2      	; 0x4848 <_ZN13DS3231M_Class5beginEm+0x52>
  Wire.beginTransmission(DS3231M_ADDRESS);                                    // Address the DS3231M              //
  uint8_t errorCode = Wire.endTransmission();                                 // See if there's a device present  //
  if (errorCode == 0) {                                                       // If we have a DS3231M             //
    writeByte(DS3231M_RTCHOUR,readByte(DS3231M_RTCHOUR)&B10111111);           // Force use of 24 hour clock       //
  } // of if-then device detected                                             //                                  //
  else return false;                                                          // return error if no device found  //
    4846:	80 e0       	ldi	r24, 0x00	; 0
  return true;                                                                // return success                   //
} // of method begin()                                                        //                                  //
    4848:	df 91       	pop	r29
    484a:	cf 91       	pop	r28
    484c:	ff 90       	pop	r15
    484e:	ef 90       	pop	r14
    4850:	df 90       	pop	r13
    4852:	cf 90       	pop	r12
    4854:	08 95       	ret

00004856 <_ZN13DS3231M_Class11temperatureEv>:
} // of method now                                                            //                                  //
/*******************************************************************************************************************
** Method temperature() returns the internal temperature in tenths of degrees Celsius (this avoids having to use  **
** floating point                                                                                                 **
*******************************************************************************************************************/
int32_t DS3231M_Class::temperature() {                                        // See if the crystal is running    //
    4856:	cf 92       	push	r12
    4858:	df 92       	push	r13
    485a:	ef 92       	push	r14
    485c:	ff 92       	push	r15
    485e:	cf 93       	push	r28
    4860:	df 93       	push	r29
    4862:	ec 01       	movw	r28, r24
  int32_t temp = readByte(DS3231M_TEMPERATURE)<<8;                            // read MSB                         //
    4864:	61 e1       	ldi	r22, 0x11	; 17
    4866:	a5 df       	rcall	.-182    	; 0x47b2 <_ZN13DS3231M_Class8readByteEh>
    4868:	c8 2e       	mov	r12, r24
    486a:	d1 2c       	mov	r13, r1
    486c:	dc 2c       	mov	r13, r12
    486e:	cc 24       	eor	r12, r12
    4870:	0d 2c       	mov	r0, r13
    4872:	00 0c       	add	r0, r0
    4874:	ee 08       	sbc	r14, r14
    4876:	ff 08       	sbc	r15, r15
  temp |= readByte(DS3231M_TEMPERATURE+1);                                    // get LSB                          //
    4878:	62 e1       	ldi	r22, 0x12	; 18
    487a:	ce 01       	movw	r24, r28
    487c:	9a df       	rcall	.-204    	; 0x47b2 <_ZN13DS3231M_Class8readByteEh>
    487e:	a7 01       	movw	r20, r14
    4880:	96 01       	movw	r18, r12
    4882:	28 2b       	or	r18, r24
  temp = temp>>6;                                                             // Shift over 6 bits                //
    4884:	96 e0       	ldi	r25, 0x06	; 6
    4886:	55 95       	asr	r21
    4888:	47 95       	ror	r20
    488a:	37 95       	ror	r19
    488c:	27 95       	ror	r18
    488e:	9a 95       	dec	r25
    4890:	d1 f7       	brne	.-12     	; 0x4886 <_ZN13DS3231M_Class11temperatureEv+0x30>
  if(temp&0x200) temp|=0xFC00;                                                // keep negative by setting bits    //
    4892:	31 fd       	sbrc	r19, 1
    4894:	3c 6f       	ori	r19, 0xFC	; 252
  temp = temp*100/4;                                                          // value is in .25C increments      //
  return temp;                                                                // Return computed temperature      //
    4896:	a9 e1       	ldi	r26, 0x19	; 25
    4898:	b0 e0       	ldi	r27, 0x00	; 0
    489a:	0e 94 99 40 	call	0x8132	; 0x8132 <__muluhisi3>
} // of method temperature()                                                  //                                  //
    489e:	df 91       	pop	r29
    48a0:	cf 91       	pop	r28
    48a2:	ff 90       	pop	r15
    48a4:	ef 90       	pop	r14
    48a6:	df 90       	pop	r13
    48a8:	cf 90       	pop	r12
    48aa:	08 95       	ret

000048ac <_ZN13DS3231M_Class3nowEv>:
/*******************************************************************************************************************
** Method now() returns the current date/time                                                                     **
** then the power down time is returned, if the timeType = 2 then the power up time is returned. These options are**
** not documented as the official calls are "getPowerOffDate" and "getPowerOnDate"                                **
*******************************************************************************************************************/
DateTime DS3231M_Class::now(){                                                // Return current date/time         //
    48ac:	0f 93       	push	r16
    48ae:	1f 93       	push	r17
    48b0:	cf 93       	push	r28
    48b2:	df 93       	push	r29
    48b4:	8c 01       	movw	r16, r24
    48b6:	eb 01       	movw	r28, r22
  Wire.beginTransmission(DS3231M_ADDRESS);                                    // Address the I2C device           //
    48b8:	68 e6       	ldi	r22, 0x68	; 104
    48ba:	82 ee       	ldi	r24, 0xE2	; 226
    48bc:	9c e0       	ldi	r25, 0x0C	; 12
    48be:	0e 94 95 36 	call	0x6d2a	; 0x6d2a <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(DS3231M_RTCSEC);                                                 // Start at specified register      //
    48c2:	60 e0       	ldi	r22, 0x00	; 0
    48c4:	82 ee       	ldi	r24, 0xE2	; 226
    48c6:	9c e0       	ldi	r25, 0x0C	; 12
    48c8:	0e 94 44 36 	call	0x6c88	; 0x6c88 <_ZN7TwoWire5writeEh>
  _TransmissionStatus = Wire.endTransmission();                               // Close transmission               //
    48cc:	82 ee       	ldi	r24, 0xE2	; 226
    48ce:	9c e0       	ldi	r25, 0x0C	; 12
    48d0:	0e 94 16 37 	call	0x6e2c	; 0x6e2c <_ZN7TwoWire15endTransmissionEv>
    48d4:	88 83       	st	Y, r24
  Wire.requestFrom(DS3231M_ADDRESS, (uint8_t)7);                              // Request 7 bytes of data          //
    48d6:	47 e0       	ldi	r20, 0x07	; 7
    48d8:	68 e6       	ldi	r22, 0x68	; 104
    48da:	82 ee       	ldi	r24, 0xE2	; 226
    48dc:	9c e0       	ldi	r25, 0x0C	; 12
    48de:	0e 94 12 37 	call	0x6e24	; 0x6e24 <_ZN7TwoWire11requestFromEhh>
  if(Wire.available()==7) {                                                   // Wait until the data is ready     //
    48e2:	82 ee       	ldi	r24, 0xE2	; 226
    48e4:	9c e0       	ldi	r25, 0x0C	; 12
    48e6:	0e 94 b6 35 	call	0x6b6c	; 0x6b6c <_ZN7TwoWire9availableEv>
    48ea:	07 97       	sbiw	r24, 0x07	; 7
    48ec:	09 f0       	breq	.+2      	; 0x48f0 <_ZN13DS3231M_Class3nowEv+0x44>
    48ee:	64 c0       	rjmp	.+200    	; 0x49b8 <_ZN13DS3231M_Class3nowEv+0x10c>
    _ss = bcd2int(Wire.read() & 0x7F);                                        // Mask high bit in seconds         //
    48f0:	82 ee       	ldi	r24, 0xE2	; 226
    48f2:	9c e0       	ldi	r25, 0x0C	; 12
    48f4:	0e 94 be 35 	call	0x6b7c	; 0x6b7c <_ZN7TwoWire4readEv>
    48f8:	98 2f       	mov	r25, r24
    48fa:	96 95       	lsr	r25
    48fc:	96 95       	lsr	r25
    48fe:	96 95       	lsr	r25
    4900:	9e 70       	andi	r25, 0x0E	; 14
    4902:	29 2f       	mov	r18, r25
    4904:	22 0f       	add	r18, r18
    4906:	22 0f       	add	r18, r18
    4908:	92 0f       	add	r25, r18
    490a:	8f 70       	andi	r24, 0x0F	; 15
    490c:	89 0f       	add	r24, r25
    490e:	8d 83       	std	Y+5, r24	; 0x05
    _mm = bcd2int(Wire.read() & 0x7F);                                        // Mask high bit in minutes         //
    4910:	82 ee       	ldi	r24, 0xE2	; 226
    4912:	9c e0       	ldi	r25, 0x0C	; 12
    4914:	0e 94 be 35 	call	0x6b7c	; 0x6b7c <_ZN7TwoWire4readEv>
    4918:	98 2f       	mov	r25, r24
    491a:	96 95       	lsr	r25
    491c:	96 95       	lsr	r25
    491e:	96 95       	lsr	r25
    4920:	9e 70       	andi	r25, 0x0E	; 14
    4922:	29 2f       	mov	r18, r25
    4924:	22 0f       	add	r18, r18
    4926:	22 0f       	add	r18, r18
    4928:	92 0f       	add	r25, r18
    492a:	8f 70       	andi	r24, 0x0F	; 15
    492c:	89 0f       	add	r24, r25
    492e:	8e 83       	std	Y+6, r24	; 0x06
    _hh = bcd2int(Wire.read() & 0x7F);                                        // Mask high bit in hours           //
    4930:	82 ee       	ldi	r24, 0xE2	; 226
    4932:	9c e0       	ldi	r25, 0x0C	; 12
    4934:	0e 94 be 35 	call	0x6b7c	; 0x6b7c <_ZN7TwoWire4readEv>
    4938:	98 2f       	mov	r25, r24
    493a:	96 95       	lsr	r25
    493c:	96 95       	lsr	r25
    493e:	96 95       	lsr	r25
    4940:	9e 70       	andi	r25, 0x0E	; 14
    4942:	29 2f       	mov	r18, r25
    4944:	22 0f       	add	r18, r18
    4946:	22 0f       	add	r18, r18
    4948:	92 0f       	add	r25, r18
    494a:	8f 70       	andi	r24, 0x0F	; 15
    494c:	89 0f       	add	r24, r25
    494e:	8f 83       	std	Y+7, r24	; 0x07
    Wire.read();                                                              // Ignore Day-Of-Week register      //
    4950:	82 ee       	ldi	r24, 0xE2	; 226
    4952:	9c e0       	ldi	r25, 0x0C	; 12
    4954:	0e 94 be 35 	call	0x6b7c	; 0x6b7c <_ZN7TwoWire4readEv>
    _d = bcd2int(Wire.read()  & 0x3F);                                        // Mask 2 high bits for day of month//
    4958:	82 ee       	ldi	r24, 0xE2	; 226
    495a:	9c e0       	ldi	r25, 0x0C	; 12
    495c:	0e 94 be 35 	call	0x6b7c	; 0x6b7c <_ZN7TwoWire4readEv>
    4960:	98 2f       	mov	r25, r24
    4962:	96 95       	lsr	r25
    4964:	96 95       	lsr	r25
    4966:	96 95       	lsr	r25
    4968:	96 70       	andi	r25, 0x06	; 6
    496a:	29 2f       	mov	r18, r25
    496c:	22 0f       	add	r18, r18
    496e:	22 0f       	add	r18, r18
    4970:	92 0f       	add	r25, r18
    4972:	8f 70       	andi	r24, 0x0F	; 15
    4974:	89 0f       	add	r24, r25
    4976:	88 87       	std	Y+8, r24	; 0x08
    _m = bcd2int(Wire.read()  & 0x1F);                                        // Mask 3 high bits for Month       //
    4978:	82 ee       	ldi	r24, 0xE2	; 226
    497a:	9c e0       	ldi	r25, 0x0C	; 12
    497c:	0e 94 be 35 	call	0x6b7c	; 0x6b7c <_ZN7TwoWire4readEv>
    4980:	84 fb       	bst	r24, 4
    4982:	99 27       	eor	r25, r25
    4984:	90 f9       	bld	r25, 0
    4986:	99 0f       	add	r25, r25
    4988:	29 2f       	mov	r18, r25
    498a:	22 0f       	add	r18, r18
    498c:	22 0f       	add	r18, r18
    498e:	92 0f       	add	r25, r18
    4990:	8f 70       	andi	r24, 0x0F	; 15
    4992:	89 0f       	add	r24, r25
    4994:	89 87       	std	Y+9, r24	; 0x09
    _y = bcd2int(Wire.read()) + 2000;                                         // Add 2000 to internal year        //
    4996:	82 ee       	ldi	r24, 0xE2	; 226
    4998:	9c e0       	ldi	r25, 0x0C	; 12
    499a:	0e 94 be 35 	call	0x6b7c	; 0x6b7c <_ZN7TwoWire4readEv>
    499e:	98 2f       	mov	r25, r24
    49a0:	92 95       	swap	r25
    49a2:	9f 70       	andi	r25, 0x0F	; 15
    49a4:	8f 70       	andi	r24, 0x0F	; 15
    49a6:	2a e0       	ldi	r18, 0x0A	; 10
    49a8:	92 9f       	mul	r25, r18
    49aa:	80 0d       	add	r24, r0
    49ac:	11 24       	eor	r1, r1
    49ae:	90 e0       	ldi	r25, 0x00	; 0
    49b0:	80 53       	subi	r24, 0x30	; 48
    49b2:	98 4f       	sbci	r25, 0xF8	; 248
    49b4:	9b 87       	std	Y+11, r25	; 0x0b
    49b6:	8a 87       	std	Y+10, r24	; 0x0a
  } // of if-then there is data to be read                                    //                                  //
  return DateTime (_y, _m, _d, _hh, _mm, _ss);                                // Return class value               //
    49b8:	2d 81       	ldd	r18, Y+5	; 0x05
    49ba:	3e 81       	ldd	r19, Y+6	; 0x06
    49bc:	4f 81       	ldd	r20, Y+7	; 0x07
    49be:	58 85       	ldd	r21, Y+8	; 0x08
    49c0:	69 85       	ldd	r22, Y+9	; 0x09
    49c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    49c4:	9b 85       	ldd	r25, Y+11	; 0x0b
  } // of for-next each month                                                 //                                  //
  d = days + 1;                                                               //                                  //
} // of method DateTime()                                                     //----------------------------------//
DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour,  //                                  //
                    uint8_t min, uint8_t sec) {                               //                                  //
  if (year >= 2000)                                                           //                                  //
    49c6:	80 3d       	cpi	r24, 0xD0	; 208
    49c8:	77 e0       	ldi	r23, 0x07	; 7
    49ca:	97 07       	cpc	r25, r23
    49cc:	10 f0       	brcs	.+4      	; 0x49d2 <_ZN13DS3231M_Class3nowEv+0x126>
  year -= 2000;                                                               //                                  //
    49ce:	80 5d       	subi	r24, 0xD0	; 208
    49d0:	97 40       	sbci	r25, 0x07	; 7
  yOff = year;                                                                //                                  //
    49d2:	f8 01       	movw	r30, r16
    49d4:	80 83       	st	Z, r24
  m = month;                                                                  //                                  //
    49d6:	61 83       	std	Z+1, r22	; 0x01
  d = day;                                                                    //                                  //
    49d8:	52 83       	std	Z+2, r21	; 0x02
  hh = hour;                                                                  //                                  //
    49da:	43 83       	std	Z+3, r20	; 0x03
  mm = min;                                                                   //                                  //
    49dc:	34 83       	std	Z+4, r19	; 0x04
  ss = sec;                                                                   //                                  //
    49de:	25 83       	std	Z+5, r18	; 0x05
    _d = bcd2int(Wire.read()  & 0x3F);                                        // Mask 2 high bits for day of month//
    _m = bcd2int(Wire.read()  & 0x1F);                                        // Mask 3 high bits for Month       //
    _y = bcd2int(Wire.read()) + 2000;                                         // Add 2000 to internal year        //
  } // of if-then there is data to be read                                    //                                  //
  return DateTime (_y, _m, _d, _hh, _mm, _ss);                                // Return class value               //
} // of method now                                                            //                                  //
    49e0:	c8 01       	movw	r24, r16
    49e2:	df 91       	pop	r29
    49e4:	cf 91       	pop	r28
    49e6:	1f 91       	pop	r17
    49e8:	0f 91       	pop	r16
    49ea:	08 95       	ret

000049ec <_ZN13DS3231M_Class6adjustERK8DateTime>:
** oscillator is stopped during the process and needs to be restarted upon completion.                            **
*******************************************************************************************************************/
void DS3231M_Class::adjust() {                                                // Set the RTC date and Time        //
  adjust(DateTime(F(__DATE__), F(__TIME__)));                                 // Set to compile time              //
} // of method adjust                                                         /-----------------------------------//
void DS3231M_Class::adjust(const DateTime& dt) {                              // Set the RTC date and Time        //
    49ec:	df 92       	push	r13
    49ee:	ef 92       	push	r14
    49f0:	ff 92       	push	r15
    49f2:	0f 93       	push	r16
    49f4:	1f 93       	push	r17
    49f6:	cf 93       	push	r28
    49f8:	df 93       	push	r29
    49fa:	00 d0       	rcall	.+0      	; 0x49fc <_ZN13DS3231M_Class6adjustERK8DateTime+0x10>
    49fc:	00 d0       	rcall	.+0      	; 0x49fe <_ZN13DS3231M_Class6adjustERK8DateTime+0x12>
    49fe:	00 d0       	rcall	.+0      	; 0x4a00 <_ZN13DS3231M_Class6adjustERK8DateTime+0x14>
    4a00:	cd b7       	in	r28, 0x3d	; 61
    4a02:	de b7       	in	r29, 0x3e	; 62
    4a04:	8c 01       	movw	r16, r24
    4a06:	7b 01       	movw	r14, r22
    4a08:	fb 01       	movw	r30, r22
    4a0a:	85 81       	ldd	r24, Z+5	; 0x05
  writeByte(DS3231M_RTCSEC,int2bcd(dt.second()));                             // Write seconds, keep device off   //
    4a0c:	9a e0       	ldi	r25, 0x0A	; 10
    4a0e:	d9 2e       	mov	r13, r25
    4a10:	6d 2d       	mov	r22, r13
    4a12:	0e 94 3f 40 	call	0x807e	; 0x807e <__udivmodqi4>
    4a16:	49 2f       	mov	r20, r25
    4a18:	f0 e1       	ldi	r31, 0x10	; 16
    4a1a:	8f 9f       	mul	r24, r31
    4a1c:	40 0d       	add	r20, r0
    4a1e:	11 24       	eor	r1, r1
    4a20:	60 e0       	ldi	r22, 0x00	; 0
    4a22:	c8 01       	movw	r24, r16
    4a24:	a6 de       	rcall	.-692    	; 0x4772 <_ZN13DS3231M_Class9writeByteEhh>
    4a26:	f7 01       	movw	r30, r14
    4a28:	84 81       	ldd	r24, Z+4	; 0x04
  writeByte(DS3231M_RTCMIN,int2bcd(dt.minute()));                             // Write the minutes value          //
    4a2a:	6d 2d       	mov	r22, r13
    4a2c:	0e 94 3f 40 	call	0x807e	; 0x807e <__udivmodqi4>
    4a30:	49 2f       	mov	r20, r25
    4a32:	f0 e1       	ldi	r31, 0x10	; 16
    4a34:	8f 9f       	mul	r24, r31
    4a36:	40 0d       	add	r20, r0
    4a38:	11 24       	eor	r1, r1
    4a3a:	61 e0       	ldi	r22, 0x01	; 1
    4a3c:	c8 01       	movw	r24, r16
    4a3e:	99 de       	rcall	.-718    	; 0x4772 <_ZN13DS3231M_Class9writeByteEhh>
    4a40:	f7 01       	movw	r30, r14
    4a42:	83 81       	ldd	r24, Z+3	; 0x03
  writeByte(DS3231M_RTCHOUR,int2bcd(dt.hour()));                              // Also re-sets the 24Hour clock on //
    4a44:	6d 2d       	mov	r22, r13
    4a46:	0e 94 3f 40 	call	0x807e	; 0x807e <__udivmodqi4>
    4a4a:	49 2f       	mov	r20, r25
    4a4c:	f0 e1       	ldi	r31, 0x10	; 16
    4a4e:	8f 9f       	mul	r24, r31
    4a50:	40 0d       	add	r20, r0
    4a52:	11 24       	eor	r1, r1
    4a54:	62 e0       	ldi	r22, 0x02	; 2
    4a56:	c8 01       	movw	r24, r16
  writeByte(DS3231M_RTCWKDAY,dt.dayOfTheWeek());                              // Update the weekday               //
    4a58:	8c de       	rcall	.-744    	; 0x4772 <_ZN13DS3231M_Class9writeByteEhh>
    4a5a:	c7 01       	movw	r24, r14
    4a5c:	04 de       	rcall	.-1016   	; 0x4666 <_ZNK8DateTime12dayOfTheWeekEv>
    4a5e:	48 2f       	mov	r20, r24
    4a60:	63 e0       	ldi	r22, 0x03	; 3
    4a62:	c8 01       	movw	r24, r16
    4a64:	86 de       	rcall	.-756    	; 0x4772 <_ZN13DS3231M_Class9writeByteEhh>
    4a66:	f7 01       	movw	r30, r14
    4a68:	82 81       	ldd	r24, Z+2	; 0x02
  writeByte(DS3231M_RTCDATE,int2bcd(dt.day()));                               // Write the day of month           //
    4a6a:	6d 2d       	mov	r22, r13
    4a6c:	0e 94 3f 40 	call	0x807e	; 0x807e <__udivmodqi4>
    4a70:	49 2f       	mov	r20, r25
    4a72:	f0 e1       	ldi	r31, 0x10	; 16
    4a74:	8f 9f       	mul	r24, r31
    4a76:	40 0d       	add	r20, r0
    4a78:	11 24       	eor	r1, r1
    4a7a:	64 e0       	ldi	r22, 0x04	; 4
    4a7c:	c8 01       	movw	r24, r16
    4a7e:	79 de       	rcall	.-782    	; 0x4772 <_ZN13DS3231M_Class9writeByteEhh>
    4a80:	f7 01       	movw	r30, r14
    4a82:	81 81       	ldd	r24, Z+1	; 0x01
  writeByte(DS3231M_RTCMTH,int2bcd(dt.month()));                              // Month, ignore century bit        //
    4a84:	6d 2d       	mov	r22, r13
    4a86:	0e 94 3f 40 	call	0x807e	; 0x807e <__udivmodqi4>
    4a8a:	49 2f       	mov	r20, r25
    4a8c:	f0 e1       	ldi	r31, 0x10	; 16
    4a8e:	8f 9f       	mul	r24, r31
    4a90:	40 0d       	add	r20, r0
    4a92:	11 24       	eor	r1, r1
    4a94:	65 e0       	ldi	r22, 0x05	; 5
    4a96:	c8 01       	movw	r24, r16
    4a98:	6c de       	rcall	.-808    	; 0x4772 <_ZN13DS3231M_Class9writeByteEhh>
  writeByte(DS3231M_RTCYEAR,int2bcd(dt.year()-2000));                         // Write the year                   //
    4a9a:	f7 01       	movw	r30, r14
    4a9c:	80 81       	ld	r24, Z
    4a9e:	6d 2d       	mov	r22, r13
    4aa0:	0e 94 3f 40 	call	0x807e	; 0x807e <__udivmodqi4>
    4aa4:	49 2f       	mov	r20, r25
    4aa6:	f0 e1       	ldi	r31, 0x10	; 16
    4aa8:	8f 9f       	mul	r24, r31
    4aaa:	40 0d       	add	r20, r0
    4aac:	11 24       	eor	r1, r1
    4aae:	66 e0       	ldi	r22, 0x06	; 6
    4ab0:	c8 01       	movw	r24, r16
  writeByte(DS3231M_STATUS,readByte(DS3231M_STATUS)&B01111111);               // Unset OSC flag bit if set        //
    4ab2:	5f de       	rcall	.-834    	; 0x4772 <_ZN13DS3231M_Class9writeByteEhh>
    4ab4:	6f e0       	ldi	r22, 0x0F	; 15
    4ab6:	c8 01       	movw	r24, r16
    4ab8:	7c de       	rcall	.-776    	; 0x47b2 <_ZN13DS3231M_Class8readByteEh>
    4aba:	48 2f       	mov	r20, r24
    4abc:	4f 77       	andi	r20, 0x7F	; 127
    4abe:	6f e0       	ldi	r22, 0x0F	; 15
    4ac0:	c8 01       	movw	r24, r16
  writeByte(DS3231M_CONTROL,readByte(DS3231M_CONTROL)&B01111111);             // Unset EOSC flag bit if set       //
    4ac2:	57 de       	rcall	.-850    	; 0x4772 <_ZN13DS3231M_Class9writeByteEhh>
    4ac4:	6e e0       	ldi	r22, 0x0E	; 14
    4ac6:	c8 01       	movw	r24, r16
    4ac8:	74 de       	rcall	.-792    	; 0x47b2 <_ZN13DS3231M_Class8readByteEh>
    4aca:	48 2f       	mov	r20, r24
    4acc:	4f 77       	andi	r20, 0x7F	; 127
    4ace:	6e e0       	ldi	r22, 0x0E	; 14
    4ad0:	c8 01       	movw	r24, r16
  _SetUnixTime = now().unixtime();                                            // Store time of last change        //
    4ad2:	4f de       	rcall	.-866    	; 0x4772 <_ZN13DS3231M_Class9writeByteEhh>
    4ad4:	b8 01       	movw	r22, r16
    4ad6:	ce 01       	movw	r24, r28
    4ad8:	01 96       	adiw	r24, 0x01	; 1
    4ada:	e8 de       	rcall	.-560    	; 0x48ac <_ZN13DS3231M_Class3nowEv>
    4adc:	ce 01       	movw	r24, r28
    4ade:	01 96       	adiw	r24, 0x01	; 1
    4ae0:	ce dd       	rcall	.-1124   	; 0x467e <_ZNK8DateTime8unixtimeEv>
    4ae2:	f8 01       	movw	r30, r16
    4ae4:	61 83       	std	Z+1, r22	; 0x01
    4ae6:	72 83       	std	Z+2, r23	; 0x02
    4ae8:	83 83       	std	Z+3, r24	; 0x03
    4aea:	94 83       	std	Z+4, r25	; 0x04
    4aec:	26 96       	adiw	r28, 0x06	; 6
} // of method adjust                                                         //                                  //
    4aee:	0f b6       	in	r0, 0x3f	; 63
    4af0:	f8 94       	cli
    4af2:	de bf       	out	0x3e, r29	; 62
    4af4:	0f be       	out	0x3f, r0	; 63
    4af6:	cd bf       	out	0x3d, r28	; 61
    4af8:	df 91       	pop	r29
    4afa:	cf 91       	pop	r28
    4afc:	1f 91       	pop	r17
    4afe:	0f 91       	pop	r16
    4b00:	ff 90       	pop	r15
    4b02:	ef 90       	pop	r14
    4b04:	df 90       	pop	r13
    4b06:	08 95       	ret

00004b08 <_ZN13DS3231M_Class6adjustEv>:
    4b08:	0f 93       	push	r16
/*******************************************************************************************************************
** Method adjust set the current date/time. This is an overloaded function, if called with no parameters then the **
** RTC is set to the date/time when the program was compiled and uploaded. Otherwise the values are set, but the  **
** oscillator is stopped during the process and needs to be restarted upon completion.                            **
*******************************************************************************************************************/
void DS3231M_Class::adjust() {                                                // Set the RTC date and Time        //
    4b0a:	1f 93       	push	r17
    4b0c:	cf 93       	push	r28
    4b0e:	df 93       	push	r29
    4b10:	00 d0       	rcall	.+0      	; 0x4b12 <_ZN13DS3231M_Class6adjustEv+0xa>
    4b12:	00 d0       	rcall	.+0      	; 0x4b14 <_ZN13DS3231M_Class6adjustEv+0xc>
    4b14:	00 d0       	rcall	.+0      	; 0x4b16 <_ZN13DS3231M_Class6adjustEv+0xe>
    4b16:	cd b7       	in	r28, 0x3d	; 61
    4b18:	de b7       	in	r29, 0x3e	; 62
    4b1a:	8c 01       	movw	r16, r24
  adjust(DateTime(F(__DATE__), F(__TIME__)));                                 // Set to compile time              //
    4b1c:	4f e1       	ldi	r20, 0x1F	; 31
    4b1e:	52 e0       	ldi	r21, 0x02	; 2
    4b20:	63 e1       	ldi	r22, 0x13	; 19
    4b22:	72 e0       	ldi	r23, 0x02	; 2
    4b24:	ce 01       	movw	r24, r28
    4b26:	01 96       	adiw	r24, 0x01	; 1
    4b28:	29 dd       	rcall	.-1454   	; 0x457c <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>
    4b2a:	be 01       	movw	r22, r28
    4b2c:	6f 5f       	subi	r22, 0xFF	; 255
    4b2e:	7f 4f       	sbci	r23, 0xFF	; 255
    4b30:	c8 01       	movw	r24, r16
    4b32:	5c df       	rcall	.-328    	; 0x49ec <_ZN13DS3231M_Class6adjustERK8DateTime>
} // of method adjust                                                         /-----------------------------------//
    4b34:	26 96       	adiw	r28, 0x06	; 6
    4b36:	0f b6       	in	r0, 0x3f	; 63
    4b38:	f8 94       	cli
    4b3a:	de bf       	out	0x3e, r29	; 62
    4b3c:	0f be       	out	0x3f, r0	; 63
    4b3e:	cd bf       	out	0x3d, r28	; 61
    4b40:	df 91       	pop	r29
    4b42:	cf 91       	pop	r28
    4b44:	1f 91       	pop	r17
    4b46:	0f 91       	pop	r16
    4b48:	08 95       	ret

00004b4a <_GLOBAL__sub_I__ZN9DhcpClass13beginWithDHCPEPhmm>:
    unsigned long m = n;
    n /= 16;
    char c = m - 16 * n;
    *str-- = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);
}
    4b4a:	0f 93       	push	r16
    4b4c:	00 e0       	ldi	r16, 0x00	; 0
    4b4e:	20 e0       	ldi	r18, 0x00	; 0
    4b50:	40 e0       	ldi	r20, 0x00	; 0
    4b52:	60 e0       	ldi	r22, 0x00	; 0
    4b54:	89 e2       	ldi	r24, 0x29	; 41
    4b56:	9c e0       	ldi	r25, 0x0C	; 12
    4b58:	0e 94 11 39 	call	0x7222	; 0x7222 <_ZN9IPAddressC1Ehhhh>
    4b5c:	0f 91       	pop	r16
    4b5e:	08 95       	ret

00004b60 <_ZN9DNSClient5beginERK9IPAddress>:
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    4b60:	fb 01       	movw	r30, r22
    4b62:	42 81       	ldd	r20, Z+2	; 0x02
    4b64:	53 81       	ldd	r21, Z+3	; 0x03
    4b66:	64 81       	ldd	r22, Z+4	; 0x04
    4b68:	75 81       	ldd	r23, Z+5	; 0x05
    4b6a:	fc 01       	movw	r30, r24
    4b6c:	42 83       	std	Z+2, r20	; 0x02
    4b6e:	53 83       	std	Z+3, r21	; 0x03
    4b70:	64 83       	std	Z+4, r22	; 0x04
    4b72:	75 83       	std	Z+5, r23	; 0x05
#define INVALID_RESPONSE -4

void DNSClient::begin(const IPAddress& aDNSServer)
{
    iDNSServer = aDNSServer;
    iRequestId = 0;
    4b74:	17 82       	std	Z+7, r1	; 0x07
    4b76:	16 82       	std	Z+6, r1	; 0x06
    4b78:	08 95       	ret

00004b7a <_ZN9DNSClient9inet_atonEPKcR9IPAddress>:
}


int DNSClient::inet_aton(const char* aIPAddrString, IPAddress& aResult)
{
    4b7a:	cf 93       	push	r28
    4b7c:	df 93       	push	r29
    4b7e:	da 01       	movw	r26, r20
    4b80:	fb 01       	movw	r30, r22
    4b82:	eb 01       	movw	r28, r22
    // See if we've been given a valid IP address
    const char* p =aIPAddrString;
    while (*p &&
    4b84:	89 91       	ld	r24, Y+
    4b86:	81 11       	cpse	r24, r1
    4b88:	fd cf       	rjmp	.-6      	; 0x4b84 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0xa>
    4b8a:	80 e0       	ldi	r24, 0x00	; 0
    4b8c:	90 e0       	ldi	r25, 0x00	; 0
    4b8e:	20 e0       	ldi	r18, 0x00	; 0
    4b90:	30 e0       	ldi	r19, 0x00	; 0
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
    4b92:	4a e0       	ldi	r20, 0x0A	; 10
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
        int segmentValue =0;
        while (*p && (segment < 4))
    4b94:	51 91       	ld	r21, Z+
    4b96:	55 23       	and	r21, r21
    4b98:	e9 f0       	breq	.+58     	; 0x4bd4 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x5a>
    4b9a:	24 30       	cpi	r18, 0x04	; 4
    4b9c:	31 05       	cpc	r19, r1
    4b9e:	44 f5       	brge	.+80     	; 0x4bf0 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
        {
            if (*p == '.')
    4ba0:	5e 32       	cpi	r21, 0x2E	; 46
    4ba2:	69 f4       	brne	.+26     	; 0x4bbe <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x44>
            {
                // We've reached the end of a segment
                if (segmentValue > 255)
    4ba4:	8f 3f       	cpi	r24, 0xFF	; 255
    4ba6:	91 05       	cpc	r25, r1
    4ba8:	09 f0       	breq	.+2      	; 0x4bac <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x32>
    4baa:	14 f5       	brge	.+68     	; 0x4bf0 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
                    // You can't have IP address segments that don't fit in a byte
                    return 0;
                }
                else
                {
                    aResult[segment] = (byte)segmentValue;
    4bac:	ed 01       	movw	r28, r26
    4bae:	c2 0f       	add	r28, r18
    4bb0:	d3 1f       	adc	r29, r19
    4bb2:	8a 83       	std	Y+2, r24	; 0x02
                    segment++;
    4bb4:	2f 5f       	subi	r18, 0xFF	; 255
    4bb6:	3f 4f       	sbci	r19, 0xFF	; 255
                    segmentValue = 0;
    4bb8:	80 e0       	ldi	r24, 0x00	; 0
    4bba:	90 e0       	ldi	r25, 0x00	; 0
    4bbc:	eb cf       	rjmp	.-42     	; 0x4b94 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x1a>
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
    4bbe:	48 9f       	mul	r20, r24
    4bc0:	b0 01       	movw	r22, r0
    4bc2:	49 9f       	mul	r20, r25
    4bc4:	70 0d       	add	r23, r0
    4bc6:	11 24       	eor	r1, r1
    4bc8:	85 2f       	mov	r24, r21
    4bca:	90 e0       	ldi	r25, 0x00	; 0
    4bcc:	c0 97       	sbiw	r24, 0x30	; 48
    4bce:	86 0f       	add	r24, r22
    4bd0:	97 1f       	adc	r25, r23
    4bd2:	e0 cf       	rjmp	.-64     	; 0x4b94 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x1a>
            }
            p++;
        }
        // We've reached the end of address, but there'll still be the last
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
    4bd4:	8f 3f       	cpi	r24, 0xFF	; 255
    4bd6:	91 05       	cpc	r25, r1
    4bd8:	09 f0       	breq	.+2      	; 0x4bdc <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x62>
    4bda:	54 f4       	brge	.+20     	; 0x4bf0 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
    4bdc:	24 30       	cpi	r18, 0x04	; 4
    4bde:	31 05       	cpc	r19, r1
    4be0:	3c f4       	brge	.+14     	; 0x4bf0 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
            // or more than four segments
            return 0;
        }
        else
        {
            aResult[segment] = (byte)segmentValue;
    4be2:	fd 01       	movw	r30, r26
    4be4:	e2 0f       	add	r30, r18
    4be6:	f3 1f       	adc	r31, r19
    4be8:	82 83       	std	Z+2, r24	; 0x02
            return 1;
    4bea:	81 e0       	ldi	r24, 0x01	; 1
    4bec:	90 e0       	ldi	r25, 0x00	; 0
    4bee:	02 c0       	rjmp	.+4      	; 0x4bf4 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x7a>
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
        {
            // You can't have IP address segments that don't fit in a byte,
            // or more than four segments
            return 0;
    4bf0:	80 e0       	ldi	r24, 0x00	; 0
    4bf2:	90 e0       	ldi	r25, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    4bf4:	df 91       	pop	r29
    4bf6:	cf 91       	pop	r28
    4bf8:	08 95       	ret

00004bfa <_GLOBAL__sub_I__ZN9DNSClient5beginERK9IPAddress>:
    // Mark the entire packet as read
    iUdp.flush();

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
}
    4bfa:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    4bfc:	00 e0       	ldi	r16, 0x00	; 0
    4bfe:	20 e0       	ldi	r18, 0x00	; 0
    4c00:	40 e0       	ldi	r20, 0x00	; 0
    4c02:	60 e0       	ldi	r22, 0x00	; 0
    4c04:	8f e2       	ldi	r24, 0x2F	; 47
    4c06:	9c e0       	ldi	r25, 0x0C	; 12
    4c08:	0e 94 11 39 	call	0x7222	; 0x7222 <_ZN9IPAddressC1Ehhhh>
    4c0c:	0f 91       	pop	r16
    4c0e:	08 95       	ret

00004c10 <_ZN9DNSClient12BuildRequestEPKc>:

    return ret;
}

uint16_t DNSClient::BuildRequest(const char* aName)
{
    4c10:	8f 92       	push	r8
    4c12:	9f 92       	push	r9
    4c14:	af 92       	push	r10
    4c16:	bf 92       	push	r11
    4c18:	cf 92       	push	r12
    4c1a:	df 92       	push	r13
    4c1c:	ef 92       	push	r14
    4c1e:	ff 92       	push	r15
    4c20:	0f 93       	push	r16
    4c22:	1f 93       	push	r17
    4c24:	cf 93       	push	r28
    4c26:	df 93       	push	r29
    4c28:	00 d0       	rcall	.+0      	; 0x4c2a <_ZN9DNSClient12BuildRequestEPKc+0x1a>
    4c2a:	1f 92       	push	r1
    4c2c:	cd b7       	in	r28, 0x3d	; 61
    4c2e:	de b7       	in	r29, 0x3e	; 62
    4c30:	6c 01       	movw	r12, r24
    4c32:	7b 01       	movw	r14, r22
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    //    |                    ARCOUNT                    |
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    // As we only support one request at a time at present, we can simplify
    // some of this header
    iRequestId = millis(); // generate a random ID
    4c34:	0e 94 97 3a 	call	0x752e	; 0x752e <millis>
    4c38:	f6 01       	movw	r30, r12
    4c3a:	77 83       	std	Z+7, r23	; 0x07
    4c3c:	66 83       	std	Z+6, r22	; 0x06
    uint16_t twoByteBuffer;

    // FIXME We should also check that there's enough space available to write to, rather
    // FIXME than assume there's enough space (as the code does at present)
    iUdp.write((uint8_t*)&iRequestId, sizeof(iRequestId));
    4c3e:	86 01       	movw	r16, r12
    4c40:	08 5f       	subi	r16, 0xF8	; 248
    4c42:	1f 4f       	sbci	r17, 0xFF	; 255
    4c44:	b6 01       	movw	r22, r12
    4c46:	6a 5f       	subi	r22, 0xFA	; 250
    4c48:	7f 4f       	sbci	r23, 0xFF	; 255
    4c4a:	42 e0       	ldi	r20, 0x02	; 2
    4c4c:	50 e0       	ldi	r21, 0x00	; 0
    4c4e:	c8 01       	movw	r24, r16
    4c50:	30 d5       	rcall	.+2656   	; 0x56b2 <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = htons(QUERY_FLAG | OPCODE_STANDARD_QUERY | RECURSION_DESIRED_FLAG);
    4c52:	81 e0       	ldi	r24, 0x01	; 1
    4c54:	90 e0       	ldi	r25, 0x00	; 0
    4c56:	9a 83       	std	Y+2, r25	; 0x02
    4c58:	89 83       	std	Y+1, r24	; 0x01
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    4c5a:	42 e0       	ldi	r20, 0x02	; 2
    4c5c:	50 e0       	ldi	r21, 0x00	; 0
    4c5e:	be 01       	movw	r22, r28
    4c60:	6f 5f       	subi	r22, 0xFF	; 255
    4c62:	7f 4f       	sbci	r23, 0xFF	; 255
    4c64:	c8 01       	movw	r24, r16
    4c66:	25 d5       	rcall	.+2634   	; 0x56b2 <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = htons(1);  // One question record
    4c68:	80 e0       	ldi	r24, 0x00	; 0
    4c6a:	91 e0       	ldi	r25, 0x01	; 1
    4c6c:	9a 83       	std	Y+2, r25	; 0x02
    4c6e:	89 83       	std	Y+1, r24	; 0x01
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    4c70:	42 e0       	ldi	r20, 0x02	; 2
    4c72:	50 e0       	ldi	r21, 0x00	; 0
    4c74:	be 01       	movw	r22, r28
    4c76:	6f 5f       	subi	r22, 0xFF	; 255
    4c78:	7f 4f       	sbci	r23, 0xFF	; 255
    4c7a:	c8 01       	movw	r24, r16
    4c7c:	1a d5       	rcall	.+2612   	; 0x56b2 <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = 0;  // Zero answer records
    4c7e:	1a 82       	std	Y+2, r1	; 0x02
    4c80:	19 82       	std	Y+1, r1	; 0x01
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    4c82:	42 e0       	ldi	r20, 0x02	; 2
    4c84:	50 e0       	ldi	r21, 0x00	; 0
    4c86:	be 01       	movw	r22, r28
    4c88:	6f 5f       	subi	r22, 0xFF	; 255
    4c8a:	7f 4f       	sbci	r23, 0xFF	; 255
    4c8c:	c8 01       	movw	r24, r16
    4c8e:	11 d5       	rcall	.+2594   	; 0x56b2 <_ZN11EthernetUDP5writeEPKhj>

    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    4c90:	42 e0       	ldi	r20, 0x02	; 2
    4c92:	50 e0       	ldi	r21, 0x00	; 0
    4c94:	be 01       	movw	r22, r28
    4c96:	6f 5f       	subi	r22, 0xFF	; 255
    4c98:	7f 4f       	sbci	r23, 0xFF	; 255
    4c9a:	c8 01       	movw	r24, r16
    4c9c:	0a d5       	rcall	.+2580   	; 0x56b2 <_ZN11EthernetUDP5writeEPKhj>
    // and zero additional records
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    4c9e:	42 e0       	ldi	r20, 0x02	; 2
    4ca0:	50 e0       	ldi	r21, 0x00	; 0
    4ca2:	be 01       	movw	r22, r28
    4ca4:	6f 5f       	subi	r22, 0xFF	; 255
    4ca6:	7f 4f       	sbci	r23, 0xFF	; 255
    4ca8:	c8 01       	movw	r24, r16
    4caa:	03 d5       	rcall	.+2566   	; 0x56b2 <_ZN11EthernetUDP5writeEPKhj>

    // Build question
    const char* start =aName;
    const char* end =start;
    4cac:	57 01       	movw	r10, r14
    uint8_t len;
    // Run through the name being requested
    while (*end)
    4cae:	f5 01       	movw	r30, r10
    4cb0:	80 81       	ld	r24, Z
    4cb2:	88 23       	and	r24, r24
    4cb4:	f9 f0       	breq	.+62     	; 0x4cf4 <_ZN9DNSClient12BuildRequestEPKc+0xe4>
    4cb6:	a7 01       	movw	r20, r14
    4cb8:	5a 01       	movw	r10, r20
    {
        // Find out how long this section of the name is
        end = start;
        while (*end && (*end != '.') )
    4cba:	f5 01       	movw	r30, r10
    4cbc:	81 91       	ld	r24, Z+
    4cbe:	6f 01       	movw	r12, r30
    4cc0:	88 23       	and	r24, r24
    4cc2:	21 f0       	breq	.+8      	; 0x4ccc <_ZN9DNSClient12BuildRequestEPKc+0xbc>
    4cc4:	8e 32       	cpi	r24, 0x2E	; 46
    4cc6:	11 f0       	breq	.+4      	; 0x4ccc <_ZN9DNSClient12BuildRequestEPKc+0xbc>
    4cc8:	a6 01       	movw	r20, r12
    4cca:	f6 cf       	rjmp	.-20     	; 0x4cb8 <_ZN9DNSClient12BuildRequestEPKc+0xa8>
        {
            end++;
        }

        if (end-start > 0)
    4ccc:	4a 01       	movw	r8, r20
    4cce:	8e 18       	sub	r8, r14
    4cd0:	9f 08       	sbc	r9, r15
    4cd2:	18 14       	cp	r1, r8
    4cd4:	19 04       	cpc	r1, r9
    4cd6:	64 f4       	brge	.+24     	; 0x4cf0 <_ZN9DNSClient12BuildRequestEPKc+0xe0>
        {
            // Write out the size of this section
            len = end-start;
    4cd8:	8b 82       	std	Y+3, r8	; 0x03
            iUdp.write(&len, sizeof(len));
    4cda:	41 e0       	ldi	r20, 0x01	; 1
    4cdc:	50 e0       	ldi	r21, 0x00	; 0
    4cde:	be 01       	movw	r22, r28
    4ce0:	6d 5f       	subi	r22, 0xFD	; 253
    4ce2:	7f 4f       	sbci	r23, 0xFF	; 255
    4ce4:	c8 01       	movw	r24, r16
            // And then write out the section
            iUdp.write((uint8_t*)start, end-start);
    4ce6:	e5 d4       	rcall	.+2506   	; 0x56b2 <_ZN11EthernetUDP5writeEPKhj>
    4ce8:	a4 01       	movw	r20, r8
    4cea:	b7 01       	movw	r22, r14
    4cec:	c8 01       	movw	r24, r16
    4cee:	e1 d4       	rcall	.+2498   	; 0x56b2 <_ZN11EthernetUDP5writeEPKhj>
        }
        start = end+1;
    4cf0:	76 01       	movw	r14, r12
    }

    // We've got to the end of the question name, so
    // terminate it with a zero-length section
    len = 0;
    4cf2:	dd cf       	rjmp	.-70     	; 0x4cae <_ZN9DNSClient12BuildRequestEPKc+0x9e>
    iUdp.write(&len, sizeof(len));
    4cf4:	1b 82       	std	Y+3, r1	; 0x03
    4cf6:	41 e0       	ldi	r20, 0x01	; 1
    4cf8:	50 e0       	ldi	r21, 0x00	; 0
    4cfa:	be 01       	movw	r22, r28
    4cfc:	6d 5f       	subi	r22, 0xFD	; 253
    4cfe:	7f 4f       	sbci	r23, 0xFF	; 255
    4d00:	c8 01       	movw	r24, r16
    4d02:	d7 d4       	rcall	.+2478   	; 0x56b2 <_ZN11EthernetUDP5writeEPKhj>
    // Finally the type and class of question
    twoByteBuffer = htons(TYPE_A);
    4d04:	e1 2c       	mov	r14, r1
    4d06:	ff 24       	eor	r15, r15
    4d08:	f3 94       	inc	r15
    4d0a:	fa 82       	std	Y+2, r15	; 0x02
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    4d0c:	e9 82       	std	Y+1, r14	; 0x01
    4d0e:	42 e0       	ldi	r20, 0x02	; 2
    4d10:	50 e0       	ldi	r21, 0x00	; 0
    4d12:	be 01       	movw	r22, r28
    4d14:	6f 5f       	subi	r22, 0xFF	; 255
    4d16:	7f 4f       	sbci	r23, 0xFF	; 255
    4d18:	c8 01       	movw	r24, r16

    twoByteBuffer = htons(CLASS_IN);  // Internet class of question
    4d1a:	cb d4       	rcall	.+2454   	; 0x56b2 <_ZN11EthernetUDP5writeEPKhj>
    4d1c:	fa 82       	std	Y+2, r15	; 0x02
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    4d1e:	e9 82       	std	Y+1, r14	; 0x01
    4d20:	42 e0       	ldi	r20, 0x02	; 2
    4d22:	50 e0       	ldi	r21, 0x00	; 0
    4d24:	be 01       	movw	r22, r28
    4d26:	6f 5f       	subi	r22, 0xFF	; 255
    4d28:	7f 4f       	sbci	r23, 0xFF	; 255
    4d2a:	c8 01       	movw	r24, r16
    4d2c:	c2 d4       	rcall	.+2436   	; 0x56b2 <_ZN11EthernetUDP5writeEPKhj>
    // Success!  Everything buffered okay
    return 1;
}
    4d2e:	81 e0       	ldi	r24, 0x01	; 1
    4d30:	90 e0       	ldi	r25, 0x00	; 0
    4d32:	0f 90       	pop	r0
    4d34:	0f 90       	pop	r0
    4d36:	0f 90       	pop	r0
    4d38:	df 91       	pop	r29
    4d3a:	cf 91       	pop	r28
    4d3c:	1f 91       	pop	r17
    4d3e:	0f 91       	pop	r16
    4d40:	ff 90       	pop	r15
    4d42:	ef 90       	pop	r14
    4d44:	df 90       	pop	r13
    4d46:	cf 90       	pop	r12
    4d48:	bf 90       	pop	r11
    4d4a:	af 90       	pop	r10
    4d4c:	9f 90       	pop	r9
    4d4e:	8f 90       	pop	r8
    4d50:	08 95       	ret

00004d52 <_ZN9DNSClient15ProcessResponseEjR9IPAddress>:


uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    4d52:	2f 92       	push	r2
    4d54:	3f 92       	push	r3
    4d56:	4f 92       	push	r4
    4d58:	5f 92       	push	r5
    4d5a:	6f 92       	push	r6
    4d5c:	7f 92       	push	r7
    4d5e:	8f 92       	push	r8
    4d60:	9f 92       	push	r9
    4d62:	af 92       	push	r10
    4d64:	bf 92       	push	r11
    4d66:	cf 92       	push	r12
    4d68:	df 92       	push	r13
    4d6a:	ef 92       	push	r14
    4d6c:	ff 92       	push	r15
    4d6e:	0f 93       	push	r16
    4d70:	1f 93       	push	r17
    4d72:	cf 93       	push	r28
    4d74:	df 93       	push	r29
    4d76:	cd b7       	in	r28, 0x3d	; 61
    4d78:	de b7       	in	r29, 0x3e	; 62
    4d7a:	63 97       	sbiw	r28, 0x13	; 19
    4d7c:	0f b6       	in	r0, 0x3f	; 63
    4d7e:	f8 94       	cli
    4d80:	de bf       	out	0x3e, r29	; 62
    4d82:	0f be       	out	0x3f, r0	; 63
    4d84:	cd bf       	out	0x3d, r28	; 61
    4d86:	7c 01       	movw	r14, r24
    4d88:	6b 01       	movw	r12, r22
    4d8a:	1a 01       	movw	r2, r20
    uint32_t startTime = millis();
    4d8c:	0e 94 97 3a 	call	0x752e	; 0x752e <millis>
    4d90:	4b 01       	movw	r8, r22
    4d92:	5c 01       	movw	r10, r24

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    4d94:	87 01       	movw	r16, r14
    4d96:	08 5f       	subi	r16, 0xF8	; 248
    4d98:	1f 4f       	sbci	r17, 0xFF	; 255
    {
        if((millis() - startTime) > aTimeout)
    4d9a:	26 01       	movw	r4, r12
    4d9c:	61 2c       	mov	r6, r1
    4d9e:	71 2c       	mov	r7, r1
uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    4da0:	c8 01       	movw	r24, r16
    4da2:	29 d5       	rcall	.+2642   	; 0x57f6 <_ZN11EthernetUDP11parsePacketEv>
    4da4:	18 16       	cp	r1, r24
    4da6:	19 06       	cpc	r1, r25
    4da8:	a4 f0       	brlt	.+40     	; 0x4dd2 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x80>
    {
        if((millis() - startTime) > aTimeout)
    4daa:	0e 94 97 3a 	call	0x752e	; 0x752e <millis>
    4dae:	dc 01       	movw	r26, r24
    4db0:	cb 01       	movw	r24, r22
    4db2:	88 19       	sub	r24, r8
    4db4:	99 09       	sbc	r25, r9
    4db6:	aa 09       	sbc	r26, r10
    4db8:	bb 09       	sbc	r27, r11
    4dba:	48 16       	cp	r4, r24
    4dbc:	59 06       	cpc	r5, r25
    4dbe:	6a 06       	cpc	r6, r26
    4dc0:	7b 06       	cpc	r7, r27
    4dc2:	d0 f0       	brcs	.+52     	; 0x4df8 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xa6>
            return TIMED_OUT;
        delay(50);
    4dc4:	62 e3       	ldi	r22, 0x32	; 50
    4dc6:	70 e0       	ldi	r23, 0x00	; 0
    4dc8:	80 e0       	ldi	r24, 0x00	; 0
    4dca:	90 e0       	ldi	r25, 0x00	; 0
    4dcc:	0e 94 c8 3a 	call	0x7590	; 0x7590 <delay>
uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    4dd0:	e7 cf       	rjmp	.-50     	; 0x4da0 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x4e>

    // We've had a reply!
    // Read the UDP header
    uint8_t header[DNS_HEADER_SIZE]; // Enough space to reuse for the DNS header
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
    4dd2:	f7 01       	movw	r30, r14
    4dd4:	42 81       	ldd	r20, Z+2	; 0x02
    4dd6:	53 81       	ldd	r21, Z+3	; 0x03
    4dd8:	64 81       	ldd	r22, Z+4	; 0x04
    4dda:	75 81       	ldd	r23, Z+5	; 0x05
    4ddc:	81 8d       	ldd	r24, Z+25	; 0x19
    4dde:	92 8d       	ldd	r25, Z+26	; 0x1a
    4de0:	a3 8d       	ldd	r26, Z+27	; 0x1b
    4de2:	b4 8d       	ldd	r27, Z+28	; 0x1c
    4de4:	48 17       	cp	r20, r24
    4de6:	59 07       	cpc	r21, r25
    4de8:	6a 07       	cpc	r22, r26
    4dea:	7b 07       	cpc	r23, r27
    4dec:	49 f4       	brne	.+18     	; 0x4e00 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xae>
    4dee:	85 8d       	ldd	r24, Z+29	; 0x1d
    4df0:	96 8d       	ldd	r25, Z+30	; 0x1e
    4df2:	c5 97       	sbiw	r24, 0x35	; 53
    4df4:	29 f4       	brne	.+10     	; 0x4e00 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xae>
    4df6:	09 c0       	rjmp	.+18     	; 0x4e0a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xb8>

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    {
        if((millis() - startTime) > aTimeout)
            return TIMED_OUT;
    4df8:	ee 24       	eor	r14, r14
    4dfa:	ea 94       	dec	r14
    4dfc:	fe 2c       	mov	r15, r14
    4dfe:	f0 c0       	rjmp	.+480    	; 0x4fe0 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
        (iUdp.remotePort() != DNS_PORT) )
    {
        // It's not from who we expected
        return INVALID_SERVER;
    4e00:	9e ef       	ldi	r25, 0xFE	; 254
    4e02:	e9 2e       	mov	r14, r25
    4e04:	ff 24       	eor	r15, r15
    4e06:	fa 94       	dec	r15
    4e08:	eb c0       	rjmp	.+470    	; 0x4fe0 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    4e0a:	c8 01       	movw	r24, r16
    4e0c:	08 d4       	rcall	.+2064   	; 0x561e <_ZN11EthernetUDP9availableEv>
    4e0e:	0c 97       	sbiw	r24, 0x0c	; 12
    4e10:	0c f4       	brge	.+2      	; 0x4e14 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xc2>
    4e12:	e2 c0       	rjmp	.+452    	; 0x4fd8 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x286>
    {
        return TRUNCATED;
    }
    iUdp.read(header, DNS_HEADER_SIZE);
    4e14:	4c e0       	ldi	r20, 0x0C	; 12
    4e16:	50 e0       	ldi	r21, 0x00	; 0
    4e18:	be 01       	movw	r22, r28
    4e1a:	6f 5f       	subi	r22, 0xFF	; 255
    4e1c:	7f 4f       	sbci	r23, 0xFF	; 255
    4e1e:	c8 01       	movw	r24, r16
    4e20:	83 d4       	rcall	.+2310   	; 0x5728 <_ZN11EthernetUDP4readEPhj>

    uint16_t header_flags = htons(*((uint16_t*)&header[2]));
    4e22:	8b 81       	ldd	r24, Y+3	; 0x03
    4e24:	9c 81       	ldd	r25, Y+4	; 0x04
    4e26:	98 27       	eor	r25, r24
    4e28:	89 27       	eor	r24, r25
    4e2a:	98 27       	eor	r25, r24
    4e2c:	9a 8b       	std	Y+18, r25	; 0x12
    4e2e:	89 8b       	std	Y+17, r24	; 0x11
    // Check that it's a response to this request
    if ( ( iRequestId != (*((uint16_t*)&header[0])) ) ||
    4e30:	f7 01       	movw	r30, r14
    4e32:	46 81       	ldd	r20, Z+6	; 0x06
    4e34:	57 81       	ldd	r21, Z+7	; 0x07
    4e36:	29 81       	ldd	r18, Y+1	; 0x01
    4e38:	3a 81       	ldd	r19, Y+2	; 0x02
    4e3a:	42 17       	cp	r20, r18
    4e3c:	53 07       	cpc	r21, r19
    4e3e:	11 f4       	brne	.+4      	; 0x4e44 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xf2>
    4e40:	97 fd       	sbrc	r25, 7
        ((header_flags & QUERY_RESPONSE_MASK) != (uint16_t)RESPONSE_FLAG) )
    {
        // Mark the entire packet as read
        iUdp.flush();
    4e42:	07 c0       	rjmp	.+14     	; 0x4e52 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x100>
    4e44:	c8 01       	movw	r24, r16
    4e46:	05 d4       	rcall	.+2058   	; 0x5652 <_ZN11EthernetUDP5flushEv>
        return INVALID_RESPONSE;
    4e48:	7c ef       	ldi	r23, 0xFC	; 252
    4e4a:	e7 2e       	mov	r14, r23
    4e4c:	ff 24       	eor	r15, r15
    4e4e:	fa 94       	dec	r15
    4e50:	c7 c0       	rjmp	.+398    	; 0x4fe0 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    }
    // Check for any errors in the response (or in our request)
    // although we don't do anything to get round these
    if ( (header_flags & TRUNCATION_FLAG) || (header_flags & RESP_MASK) )
    4e52:	8f 70       	andi	r24, 0x0F	; 15
    4e54:	92 70       	andi	r25, 0x02	; 2
    4e56:	89 2b       	or	r24, r25
    {
        // Mark the entire packet as read
        iUdp.flush();
    4e58:	39 f0       	breq	.+14     	; 0x4e68 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x116>
    4e5a:	c8 01       	movw	r24, r16
    4e5c:	fa d3       	rcall	.+2036   	; 0x5652 <_ZN11EthernetUDP5flushEv>
        return -5; //INVALID_RESPONSE;
    4e5e:	6b ef       	ldi	r22, 0xFB	; 251
    4e60:	e6 2e       	mov	r14, r22
    4e62:	ff 24       	eor	r15, r15
    4e64:	fa 94       	dec	r15
    4e66:	bc c0       	rjmp	.+376    	; 0x4fe0 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    }

    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
    4e68:	cf 80       	ldd	r12, Y+7	; 0x07
    4e6a:	d8 84       	ldd	r13, Y+8	; 0x08
    4e6c:	dc 24       	eor	r13, r12
    4e6e:	cd 24       	eor	r12, r13
    4e70:	dc 24       	eor	r13, r12
    if (answerCount == 0 )
    4e72:	c1 14       	cp	r12, r1
    4e74:	d1 04       	cpc	r13, r1
    4e76:	19 f0       	breq	.+6      	; 0x4e7e <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x12c>
    4e78:	e1 2c       	mov	r14, r1
    4e7a:	f1 2c       	mov	r15, r1
    {
        // Mark the entire packet as read
        iUdp.flush();
    4e7c:	1f c0       	rjmp	.+62     	; 0x4ebc <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x16a>
    4e7e:	c8 01       	movw	r24, r16
    4e80:	e8 d3       	rcall	.+2000   	; 0x5652 <_ZN11EthernetUDP5flushEv>
        return -6; //INVALID_RESPONSE;
    4e82:	5a ef       	ldi	r21, 0xFA	; 250
    4e84:	e5 2e       	mov	r14, r21
    4e86:	ff 24       	eor	r15, r15
    4e88:	fa 94       	dec	r15
    4e8a:	aa c0       	rjmp	.+340    	; 0x4fe0 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    {
        // Skip over the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    4e8c:	41 e0       	ldi	r20, 0x01	; 1
    4e8e:	50 e0       	ldi	r21, 0x00	; 0
    4e90:	be 01       	movw	r22, r28
    4e92:	63 5f       	subi	r22, 0xF3	; 243
    4e94:	7f 4f       	sbci	r23, 0xFF	; 255
    4e96:	c8 01       	movw	r24, r16
    4e98:	47 d4       	rcall	.+2190   	; 0x5728 <_ZN11EthernetUDP4readEPhj>
            if (len > 0)
    4e9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e9c:	81 11       	cpse	r24, r1
                while(len--)
                {
                    iUdp.read(); // we don't care about the returned byte
                }
            }
        } while (len != 0);
    4e9e:	17 c0       	rjmp	.+46     	; 0x4ece <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x17c>
    4ea0:	8d 85       	ldd	r24, Y+13	; 0x0d

        // Now jump over the type and class
        for (int i =0; i < 4; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    4ea2:	81 11       	cpse	r24, r1
    4ea4:	f3 cf       	rjmp	.-26     	; 0x4e8c <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x13a>
    4ea6:	c8 01       	movw	r24, r16
    4ea8:	17 d4       	rcall	.+2094   	; 0x56d8 <_ZN11EthernetUDP4readEv>
    4eaa:	c8 01       	movw	r24, r16
    4eac:	15 d4       	rcall	.+2090   	; 0x56d8 <_ZN11EthernetUDP4readEv>
    4eae:	c8 01       	movw	r24, r16
    4eb0:	13 d4       	rcall	.+2086   	; 0x56d8 <_ZN11EthernetUDP4readEv>
    4eb2:	c8 01       	movw	r24, r16
    4eb4:	11 d4       	rcall	.+2082   	; 0x56d8 <_ZN11EthernetUDP4readEv>
    4eb6:	ff ef       	ldi	r31, 0xFF	; 255
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    4eb8:	ef 1a       	sub	r14, r31
    4eba:	ff 0a       	sbc	r15, r31
    4ebc:	8d 81       	ldd	r24, Y+5	; 0x05
    4ebe:	9e 81       	ldd	r25, Y+6	; 0x06
    4ec0:	98 27       	eor	r25, r24
    4ec2:	89 27       	eor	r24, r25
    4ec4:	98 27       	eor	r25, r24
    4ec6:	e8 16       	cp	r14, r24
    4ec8:	f9 06       	cpc	r15, r25
    4eca:	00 f3       	brcs	.-64     	; 0x4e8c <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x13a>
    4ecc:	09 c0       	rjmp	.+18     	; 0x4ee0 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x18e>
            iUdp.read(&len, sizeof(len));
            if (len > 0)
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
    4ece:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ed0:	9f ef       	ldi	r25, 0xFF	; 255
    4ed2:	98 0f       	add	r25, r24
    4ed4:	9d 87       	std	Y+13, r25	; 0x0d
    4ed6:	88 23       	and	r24, r24
    4ed8:	19 f3       	breq	.-58     	; 0x4ea0 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x14e>
                {
                    iUdp.read(); // we don't care about the returned byte
    4eda:	c8 01       	movw	r24, r16
    4edc:	fd d3       	rcall	.+2042   	; 0x56d8 <_ZN11EthernetUDP4readEv>
            iUdp.read(&len, sizeof(len));
            if (len > 0)
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
    4ede:	f7 cf       	rjmp	.-18     	; 0x4ece <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x17c>
    4ee0:	a1 2c       	mov	r10, r1
    4ee2:	b1 2c       	mov	r11, r1
    {
        // Skip the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    4ee4:	41 e0       	ldi	r20, 0x01	; 1
    4ee6:	50 e0       	ldi	r21, 0x00	; 0
    4ee8:	be 01       	movw	r22, r28
    4eea:	6d 5e       	subi	r22, 0xED	; 237
    4eec:	7f 4f       	sbci	r23, 0xFF	; 255
    4eee:	c8 01       	movw	r24, r16
    4ef0:	1b d4       	rcall	.+2102   	; 0x5728 <_ZN11EthernetUDP4readEPhj>
    4ef2:	8b 89       	ldd	r24, Y+19	; 0x13
            if ((len & LABEL_COMPRESSION_MASK) == 0)
    4ef4:	98 2f       	mov	r25, r24
    4ef6:	90 7c       	andi	r25, 0xC0	; 192
    4ef8:	59 f4       	brne	.+22     	; 0x4f10 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1be>
            {
                // It's just a normal label
                if (len > 0)
    4efa:	88 23       	and	r24, r24
    4efc:	79 f0       	breq	.+30     	; 0x4f1c <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1ca>
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
    4efe:	8b 89       	ldd	r24, Y+19	; 0x13
    4f00:	9f ef       	ldi	r25, 0xFF	; 255
    4f02:	98 0f       	add	r25, r24
    4f04:	9b 8b       	std	Y+19, r25	; 0x13
    4f06:	88 23       	and	r24, r24
    4f08:	31 f0       	breq	.+12     	; 0x4f16 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1c4>
                    {
                        iUdp.read(); // we don't care about the returned byte
    4f0a:	c8 01       	movw	r24, r16
    4f0c:	e5 d3       	rcall	.+1994   	; 0x56d8 <_ZN11EthernetUDP4readEv>
                if (len > 0)
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
    4f0e:	f7 cf       	rjmp	.-18     	; 0x4efe <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1ac>
                // says that a name is either a sequence of labels ended with a
                // 0 length octet or a pointer or a sequence of labels ending in
                // a pointer.  Either way, when we get here we're at the end of
                // the name
                // Skip over the pointer
                iUdp.read(); // we don't care about the returned byte
    4f10:	c8 01       	movw	r24, r16
    4f12:	e2 d3       	rcall	.+1988   	; 0x56d8 <_ZN11EthernetUDP4readEv>
    4f14:	1b 8a       	std	Y+19, r1	; 0x13
                // And set len so that we drop out of the name loop
                len = 0;
    4f16:	8b 89       	ldd	r24, Y+19	; 0x13
            }
        } while (len != 0);
    4f18:	81 11       	cpse	r24, r1
    4f1a:	e4 cf       	rjmp	.-56     	; 0x4ee4 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x192>

        // Check the type and class
        uint16_t answerType;
        uint16_t answerClass;
        iUdp.read((uint8_t*)&answerType, sizeof(answerType));
    4f1c:	42 e0       	ldi	r20, 0x02	; 2
    4f1e:	50 e0       	ldi	r21, 0x00	; 0
    4f20:	be 01       	movw	r22, r28
    4f22:	61 5f       	subi	r22, 0xF1	; 241
    4f24:	7f 4f       	sbci	r23, 0xFF	; 255
        iUdp.read((uint8_t*)&answerClass, sizeof(answerClass));
    4f26:	c8 01       	movw	r24, r16
    4f28:	ff d3       	rcall	.+2046   	; 0x5728 <_ZN11EthernetUDP4readEPhj>
    4f2a:	42 e0       	ldi	r20, 0x02	; 2
    4f2c:	50 e0       	ldi	r21, 0x00	; 0
    4f2e:	be 01       	movw	r22, r28
    4f30:	63 5f       	subi	r22, 0xF3	; 243
    4f32:	7f 4f       	sbci	r23, 0xFF	; 255

        // Ignore the Time-To-Live as we don't do any caching
        for (int i =0; i < TTL_SIZE; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    4f34:	c8 01       	movw	r24, r16
    4f36:	f8 d3       	rcall	.+2032   	; 0x5728 <_ZN11EthernetUDP4readEPhj>
    4f38:	c8 01       	movw	r24, r16
    4f3a:	ce d3       	rcall	.+1948   	; 0x56d8 <_ZN11EthernetUDP4readEv>
    4f3c:	c8 01       	movw	r24, r16
    4f3e:	cc d3       	rcall	.+1944   	; 0x56d8 <_ZN11EthernetUDP4readEv>
    4f40:	c8 01       	movw	r24, r16
    4f42:	ca d3       	rcall	.+1940   	; 0x56d8 <_ZN11EthernetUDP4readEv>
    4f44:	c8 01       	movw	r24, r16
    4f46:	c8 d3       	rcall	.+1936   	; 0x56d8 <_ZN11EthernetUDP4readEv>
    4f48:	42 e0       	ldi	r20, 0x02	; 2
    4f4a:	50 e0       	ldi	r21, 0x00	; 0
        }

        // And read out the length of this answer
        // Don't need header_flags anymore, so we can reuse it here
        iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));
    4f4c:	be 01       	movw	r22, r28
    4f4e:	6f 5e       	subi	r22, 0xEF	; 239
    4f50:	7f 4f       	sbci	r23, 0xFF	; 255
    4f52:	c8 01       	movw	r24, r16
    4f54:	e9 d3       	rcall	.+2002   	; 0x5728 <_ZN11EthernetUDP4readEPhj>
    4f56:	8f 85       	ldd	r24, Y+15	; 0x0f
    4f58:	98 89       	ldd	r25, Y+16	; 0x10
    4f5a:	81 15       	cp	r24, r1

        if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) )
    4f5c:	91 40       	sbci	r25, 0x01	; 1
    4f5e:	49 f4       	brne	.+18     	; 0x4f72 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x220>
    4f60:	ed 84       	ldd	r14, Y+13	; 0x0d
    4f62:	fe 84       	ldd	r15, Y+14	; 0x0e
    4f64:	fe 24       	eor	r15, r14
    4f66:	ef 24       	eor	r14, r15
    4f68:	fe 24       	eor	r15, r14
    4f6a:	81 e0       	ldi	r24, 0x01	; 1
    4f6c:	e8 16       	cp	r14, r24
    4f6e:	f1 04       	cpc	r15, r1
    4f70:	19 f0       	breq	.+6      	; 0x4f78 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x226>
    4f72:	e1 2c       	mov	r14, r1
    4f74:	f1 2c       	mov	r15, r1
    4f76:	14 c0       	rjmp	.+40     	; 0x4fa0 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x24e>
    4f78:	89 89       	ldd	r24, Y+17	; 0x11
        {
            if (htons(header_flags) != 4)
    4f7a:	9a 89       	ldd	r25, Y+18	; 0x12
    4f7c:	81 15       	cp	r24, r1
    4f7e:	94 40       	sbci	r25, 0x04	; 4
    4f80:	39 f0       	breq	.+14     	; 0x4f90 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x23e>
    4f82:	c8 01       	movw	r24, r16
            {
                // It's a weird size
                // Mark the entire packet as read
                iUdp.flush();
    4f84:	66 d3       	rcall	.+1740   	; 0x5652 <_ZN11EthernetUDP5flushEv>
    4f86:	47 ef       	ldi	r20, 0xF7	; 247
                return -9;//INVALID_RESPONSE;
    4f88:	e4 2e       	mov	r14, r20
    4f8a:	ff 24       	eor	r15, r15
    4f8c:	fa 94       	dec	r15
    4f8e:	28 c0       	rjmp	.+80     	; 0x4fe0 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    4f90:	b1 01       	movw	r22, r2

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    4f92:	6e 5f       	subi	r22, 0xFE	; 254
    4f94:	7f 4f       	sbci	r23, 0xFF	; 255
    4f96:	44 e0       	ldi	r20, 0x04	; 4
            }
            iUdp.read(aAddress.raw_address(), 4);
    4f98:	50 e0       	ldi	r21, 0x00	; 0
    4f9a:	c8 01       	movw	r24, r16
    4f9c:	c5 d3       	rcall	.+1930   	; 0x5728 <_ZN11EthernetUDP4readEPhj>
    4f9e:	20 c0       	rjmp	.+64     	; 0x4fe0 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
            return SUCCESS;
    4fa0:	89 89       	ldd	r24, Y+17	; 0x11
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    4fa2:	9a 89       	ldd	r25, Y+18	; 0x12
    4fa4:	98 27       	eor	r25, r24
    4fa6:	89 27       	eor	r24, r25
    4fa8:	98 27       	eor	r25, r24
    4faa:	e8 16       	cp	r14, r24
    4fac:	f9 06       	cpc	r15, r25
    4fae:	30 f4       	brcc	.+12     	; 0x4fbc <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x26a>
    4fb0:	c8 01       	movw	r24, r16
            {
                iUdp.read(); // we don't care about the returned byte
    4fb2:	92 d3       	rcall	.+1828   	; 0x56d8 <_ZN11EthernetUDP4readEv>
    4fb4:	ff ef       	ldi	r31, 0xFF	; 255
    4fb6:	ef 1a       	sub	r14, r31
            return SUCCESS;
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    4fb8:	ff 0a       	sbc	r15, r31
    4fba:	f2 cf       	rjmp	.-28     	; 0x4fa0 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x24e>
    4fbc:	2f ef       	ldi	r18, 0xFF	; 255
    4fbe:	a2 1a       	sub	r10, r18
    // Now we're up to the bit we're interested in, the answer
    // There might be more than one answer (although we'll just use the first
    // type A answer) and some authority and additional resource records but
    // we're going to ignore all of them.

    for (uint16_t i =0; i < answerCount; i++)
    4fc0:	b2 0a       	sbc	r11, r18
    4fc2:	ca 14       	cp	r12, r10
    4fc4:	db 04       	cpc	r13, r11
    4fc6:	09 f0       	breq	.+2      	; 0x4fca <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x278>
    4fc8:	8d cf       	rjmp	.-230    	; 0x4ee4 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x192>
    4fca:	c8 01       	movw	r24, r16
    4fcc:	42 d3       	rcall	.+1668   	; 0x5652 <_ZN11EthernetUDP5flushEv>
            }
        }
    }

    // Mark the entire packet as read
    iUdp.flush();
    4fce:	36 ef       	ldi	r19, 0xF6	; 246
    4fd0:	e3 2e       	mov	r14, r19
    4fd2:	ff 24       	eor	r15, r15

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
    4fd4:	fa 94       	dec	r15
    4fd6:	04 c0       	rjmp	.+8      	; 0x4fe0 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    4fd8:	8d ef       	ldi	r24, 0xFD	; 253
    4fda:	e8 2e       	mov	r14, r24
    4fdc:	ff 24       	eor	r15, r15
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    {
        return TRUNCATED;
    4fde:	fa 94       	dec	r15
    4fe0:	c7 01       	movw	r24, r14
    4fe2:	63 96       	adiw	r28, 0x13	; 19
    4fe4:	0f b6       	in	r0, 0x3f	; 63
    // Mark the entire packet as read
    iUdp.flush();

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
}
    4fe6:	f8 94       	cli
    4fe8:	de bf       	out	0x3e, r29	; 62
    4fea:	0f be       	out	0x3f, r0	; 63
    4fec:	cd bf       	out	0x3d, r28	; 61
    4fee:	df 91       	pop	r29
    4ff0:	cf 91       	pop	r28
    4ff2:	1f 91       	pop	r17
    4ff4:	0f 91       	pop	r16
    4ff6:	ff 90       	pop	r15
    4ff8:	ef 90       	pop	r14
    4ffa:	df 90       	pop	r13
    4ffc:	cf 90       	pop	r12
    4ffe:	bf 90       	pop	r11
    5000:	af 90       	pop	r10
    5002:	9f 90       	pop	r9
    5004:	8f 90       	pop	r8
    5006:	7f 90       	pop	r7
    5008:	6f 90       	pop	r6
    500a:	5f 90       	pop	r5
    500c:	4f 90       	pop	r4
    500e:	3f 90       	pop	r3
    5010:	2f 90       	pop	r2
    5012:	08 95       	ret

00005014 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>:
    5014:	8f 92       	push	r8
    5016:	9f 92       	push	r9
    5018:	af 92       	push	r10
        return 0;
    }
}

int DNSClient::getHostByName(const char* aHostname, IPAddress& aResult)
{
    501a:	bf 92       	push	r11
    501c:	cf 92       	push	r12
    501e:	df 92       	push	r13
    5020:	ef 92       	push	r14
    5022:	ff 92       	push	r15
    5024:	0f 93       	push	r16
    5026:	1f 93       	push	r17
    5028:	cf 93       	push	r28
    502a:	df 93       	push	r29
    502c:	00 d0       	rcall	.+0      	; 0x502e <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x1a>
    502e:	00 d0       	rcall	.+0      	; 0x5030 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x1c>
    5030:	00 d0       	rcall	.+0      	; 0x5032 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x1e>
    5032:	cd b7       	in	r28, 0x3d	; 61
    5034:	de b7       	in	r29, 0x3e	; 62
    5036:	7c 01       	movw	r14, r24
    5038:	4b 01       	movw	r8, r22
    503a:	5a 01       	movw	r10, r20
    int ret =0;

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
    503c:	9e dd       	rcall	.-1220   	; 0x4b7a <_ZN9DNSClient9inet_atonEPKcR9IPAddress>
    503e:	8c 01       	movw	r16, r24
    5040:	89 2b       	or	r24, r25
    5042:	09 f0       	breq	.+2      	; 0x5046 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x32>
    5044:	57 c0       	rjmp	.+174    	; 0x50f4 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xe0>
        // It is, our work here is done
        return 1;
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    5046:	f7 01       	movw	r30, r14
    5048:	42 81       	ldd	r20, Z+2	; 0x02
    504a:	53 81       	ldd	r21, Z+3	; 0x03
    504c:	64 81       	ldd	r22, Z+4	; 0x04
    504e:	75 81       	ldd	r23, Z+5	; 0x05
    5050:	80 91 31 0c 	lds	r24, 0x0C31	; 0x800c31 <_ZL11INADDR_NONE+0x2>
    5054:	90 91 32 0c 	lds	r25, 0x0C32	; 0x800c32 <_ZL11INADDR_NONE+0x3>
    5058:	a0 91 33 0c 	lds	r26, 0x0C33	; 0x800c33 <_ZL11INADDR_NONE+0x4>
    505c:	b0 91 34 0c 	lds	r27, 0x0C34	; 0x800c34 <_ZL11INADDR_NONE+0x5>
    5060:	48 17       	cp	r20, r24
    5062:	59 07       	cpc	r21, r25
    5064:	6a 07       	cpc	r22, r26
    5066:	7b 07       	cpc	r23, r27
    5068:	09 f4       	brne	.+2      	; 0x506c <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x58>
    506a:	47 c0       	rjmp	.+142    	; 0x50fa <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xe6>
    {
        return INVALID_SERVER;
    }
	
    // Find a socket to use
    if (iUdp.begin(1024+(millis() & 0xF)) == 1)
    506c:	0e 94 97 3a 	call	0x752e	; 0x752e <millis>
    5070:	67 01       	movw	r12, r14
    5072:	f8 e0       	ldi	r31, 0x08	; 8
    5074:	cf 0e       	add	r12, r31
    5076:	d1 1c       	adc	r13, r1
    5078:	6f 70       	andi	r22, 0x0F	; 15
    507a:	77 27       	eor	r23, r23
    507c:	7c 5f       	subi	r23, 0xFC	; 252
    507e:	c6 01       	movw	r24, r12
    5080:	89 d3       	rcall	.+1810   	; 0x5794 <_ZN11EthernetUDP5beginEj>
    5082:	81 30       	cpi	r24, 0x01	; 1
    5084:	09 f0       	breq	.+2      	; 0x5088 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x74>
    5086:	3b c0       	rjmp	.+118    	; 0x50fe <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xea>
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    5088:	80 e7       	ldi	r24, 0x70	; 112
    508a:	9a e0       	ldi	r25, 0x0A	; 10
    508c:	9a 83       	std	Y+2, r25	; 0x02
    508e:	89 83       	std	Y+1, r24	; 0x01
    5090:	f7 01       	movw	r30, r14
    5092:	82 81       	ldd	r24, Z+2	; 0x02
    5094:	93 81       	ldd	r25, Z+3	; 0x03
    5096:	a4 81       	ldd	r26, Z+4	; 0x04
    5098:	b5 81       	ldd	r27, Z+5	; 0x05
    509a:	8b 83       	std	Y+3, r24	; 0x03
    509c:	9c 83       	std	Y+4, r25	; 0x04
    509e:	ad 83       	std	Y+5, r26	; 0x05
    50a0:	be 83       	std	Y+6, r27	; 0x06
        // Try up to three times
        int retries = 0;
//        while ((retries < 3) && (ret <= 0))
        {
            // Send DNS request
            ret = iUdp.beginPacket(iDNSServer, DNS_PORT);
    50a2:	45 e3       	ldi	r20, 0x35	; 53
    50a4:	50 e0       	ldi	r21, 0x00	; 0
    50a6:	be 01       	movw	r22, r28
    50a8:	6f 5f       	subi	r22, 0xFF	; 255
    50aa:	7f 4f       	sbci	r23, 0xFF	; 255
    50ac:	c6 01       	movw	r24, r12
    50ae:	f7 d2       	rcall	.+1518   	; 0x569e <_ZN11EthernetUDP11beginPacketE9IPAddressj>
            if (ret != 0)
    50b0:	89 2b       	or	r24, r25
    50b2:	19 f4       	brne	.+6      	; 0x50ba <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xa6>
    50b4:	00 e0       	ldi	r16, 0x00	; 0
    50b6:	10 e0       	ldi	r17, 0x00	; 0
            {
                // Now output the request data
                ret = BuildRequest(aHostname);
    50b8:	1a c0       	rjmp	.+52     	; 0x50ee <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xda>
    50ba:	b4 01       	movw	r22, r8
    50bc:	c7 01       	movw	r24, r14
                if (ret != 0)
    50be:	a8 dd       	rcall	.-1200   	; 0x4c10 <_ZN9DNSClient12BuildRequestEPKc>
    50c0:	89 2b       	or	r24, r25
                {
                    // And finally send the request
                    ret = iUdp.endPacket();
    50c2:	c1 f3       	breq	.-16     	; 0x50b4 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xa0>
    50c4:	c6 01       	movw	r24, r12
    50c6:	f2 d2       	rcall	.+1508   	; 0x56ac <_ZN11EthernetUDP9endPacketEv>
                    if (ret != 0)
    50c8:	89 2b       	or	r24, r25
    50ca:	a1 f3       	breq	.-24     	; 0x50b4 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xa0>
    50cc:	83 e0       	ldi	r24, 0x03	; 3
    50ce:	88 2e       	mov	r8, r24
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
                        {
                            ret = ProcessResponse(5000, aResult);
    50d0:	91 2c       	mov	r9, r1
    50d2:	a5 01       	movw	r20, r10
    50d4:	68 e8       	ldi	r22, 0x88	; 136
    50d6:	73 e1       	ldi	r23, 0x13	; 19
    50d8:	c7 01       	movw	r24, r14
    50da:	3b de       	rcall	.-906    	; 0x4d52 <_ZN9DNSClient15ProcessResponseEjR9IPAddress>
    50dc:	8c 01       	movw	r16, r24
    50de:	21 e0       	ldi	r18, 0x01	; 1
    50e0:	82 1a       	sub	r8, r18
    50e2:	91 08       	sbc	r9, r1
                    if (ret != 0)
                    {
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
    50e4:	21 f0       	breq	.+8      	; 0x50ee <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xda>
    50e6:	0f 3f       	cpi	r16, 0xFF	; 255
    50e8:	ff ef       	ldi	r31, 0xFF	; 255
    50ea:	1f 07       	cpc	r17, r31
            }
            retries++;
        }

        // We're done with the socket now
        iUdp.stop();
    50ec:	91 f3       	breq	.-28     	; 0x50d2 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xbe>
    50ee:	c6 01       	movw	r24, r12
    50f0:	c2 d2       	rcall	.+1412   	; 0x5676 <_ZN11EthernetUDP4stopEv>
    50f2:	05 c0       	rjmp	.+10     	; 0x50fe <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xea>

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
    {
        // It is, our work here is done
        return 1;
    50f4:	01 e0       	ldi	r16, 0x01	; 1
    50f6:	10 e0       	ldi	r17, 0x00	; 0
    50f8:	02 c0       	rjmp	.+4      	; 0x50fe <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xea>
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    {
        return INVALID_SERVER;
    50fa:	0e ef       	ldi	r16, 0xFE	; 254
    50fc:	1f ef       	ldi	r17, 0xFF	; 255
        // We're done with the socket now
        iUdp.stop();
    }

    return ret;
}
    50fe:	c8 01       	movw	r24, r16
    5100:	26 96       	adiw	r28, 0x06	; 6
    5102:	0f b6       	in	r0, 0x3f	; 63
    5104:	f8 94       	cli
    5106:	de bf       	out	0x3e, r29	; 62
    5108:	0f be       	out	0x3f, r0	; 63
    510a:	cd bf       	out	0x3d, r28	; 61
    510c:	df 91       	pop	r29
    510e:	cf 91       	pop	r28
    5110:	1f 91       	pop	r17
    5112:	0f 91       	pop	r16
    5114:	ff 90       	pop	r15
    5116:	ef 90       	pop	r14
    5118:	df 90       	pop	r13
    511a:	cf 90       	pop	r12
    511c:	bf 90       	pop	r11
    511e:	af 90       	pop	r10
    5120:	9f 90       	pop	r9
    5122:	8f 90       	pop	r8
    5124:	08 95       	ret

00005126 <_ZN10W5500Class8writeGAREPh>:
    return _dnsDomainName;
}

char* EthernetClass::hostName(){
    return _hostName;
}
    5126:	24 e0       	ldi	r18, 0x04	; 4
    5128:	30 e0       	ldi	r19, 0x00	; 0
    512a:	ac 01       	movw	r20, r24
    512c:	64 e0       	ldi	r22, 0x04	; 4
    512e:	81 e0       	ldi	r24, 0x01	; 1
    5130:	90 e0       	ldi	r25, 0x00	; 0
    5132:	35 c6       	rjmp	.+3178   	; 0x5d9e <_ZN10W5500Class5writeEjhPKhj>

00005134 <_ZN10W5500Class9writeSUBREPh>:
    5134:	24 e0       	ldi	r18, 0x04	; 4
    5136:	30 e0       	ldi	r19, 0x00	; 0
    5138:	ac 01       	movw	r20, r24
    513a:	64 e0       	ldi	r22, 0x04	; 4
    513c:	85 e0       	ldi	r24, 0x05	; 5
    513e:	90 e0       	ldi	r25, 0x00	; 0
    5140:	2e c6       	rjmp	.+3164   	; 0x5d9e <_ZN10W5500Class5writeEjhPKhj>

00005142 <_ZN10W5500Class9writeSHAREPh>:
    5142:	26 e0       	ldi	r18, 0x06	; 6
    5144:	30 e0       	ldi	r19, 0x00	; 0
    5146:	ac 01       	movw	r20, r24
    5148:	64 e0       	ldi	r22, 0x04	; 4
    514a:	89 e0       	ldi	r24, 0x09	; 9
    514c:	90 e0       	ldi	r25, 0x00	; 0
    514e:	27 c6       	rjmp	.+3150   	; 0x5d9e <_ZN10W5500Class5writeEjhPKhj>

00005150 <_ZN10W5500Class9writeSIPREPh>:
    5150:	24 e0       	ldi	r18, 0x04	; 4
    5152:	30 e0       	ldi	r19, 0x00	; 0
    5154:	ac 01       	movw	r20, r24
    5156:	64 e0       	ldi	r22, 0x04	; 4
    5158:	8f e0       	ldi	r24, 0x0F	; 15
    515a:	90 e0       	ldi	r25, 0x00	; 0
    515c:	20 c6       	rjmp	.+3136   	; 0x5d9e <_ZN10W5500Class5writeEjhPKhj>

0000515e <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_>:
    515e:	8f 92       	push	r8
    5160:	9f 92       	push	r9
    5162:	af 92       	push	r10
    5164:	bf 92       	push	r11
    5166:	cf 92       	push	r12
    5168:	df 92       	push	r13
    516a:	ef 92       	push	r14
    516c:	ff 92       	push	r15
    516e:	0f 93       	push	r16
    5170:	1f 93       	push	r17
    5172:	cf 93       	push	r28
    5174:	df 93       	push	r29
    5176:	4c 01       	movw	r8, r24
    5178:	5b 01       	movw	r10, r22
    517a:	6a 01       	movw	r12, r20
    517c:	e9 01       	movw	r28, r18
    517e:	fc 01       	movw	r30, r24
    5180:	64 85       	ldd	r22, Z+12	; 0x0c
    5182:	8f e6       	ldi	r24, 0x6F	; 111
    5184:	9c e0       	ldi	r25, 0x0C	; 12
    5186:	53 d6       	rcall	.+3238   	; 0x5e2e <_ZN10W5500Class4initEh>
    5188:	c5 01       	movw	r24, r10
    518a:	db df       	rcall	.-74     	; 0x5142 <_ZN10W5500Class9writeSHAREPh>
    518c:	c6 01       	movw	r24, r12
    518e:	02 96       	adiw	r24, 0x02	; 2
    5190:	df df       	rcall	.-66     	; 0x5150 <_ZN10W5500Class9writeSIPREPh>
    5192:	c8 01       	movw	r24, r16
    5194:	02 96       	adiw	r24, 0x02	; 2
    5196:	c7 df       	rcall	.-114    	; 0x5126 <_ZN10W5500Class8writeGAREPh>
    5198:	c7 01       	movw	r24, r14
    519a:	02 96       	adiw	r24, 0x02	; 2
    519c:	cb df       	rcall	.-106    	; 0x5134 <_ZN10W5500Class9writeSUBREPh>
    519e:	8a 81       	ldd	r24, Y+2	; 0x02
    51a0:	9b 81       	ldd	r25, Y+3	; 0x03
    51a2:	ac 81       	ldd	r26, Y+4	; 0x04
    51a4:	bd 81       	ldd	r27, Y+5	; 0x05
    51a6:	f4 01       	movw	r30, r8
    51a8:	82 83       	std	Z+2, r24	; 0x02
    51aa:	93 83       	std	Z+3, r25	; 0x03
    51ac:	a4 83       	std	Z+4, r26	; 0x04
    51ae:	b5 83       	std	Z+5, r27	; 0x05
    51b0:	df 91       	pop	r29
    51b2:	cf 91       	pop	r28
    51b4:	1f 91       	pop	r17
    51b6:	0f 91       	pop	r16
    51b8:	ff 90       	pop	r15
    51ba:	ef 90       	pop	r14
    51bc:	df 90       	pop	r13
    51be:	cf 90       	pop	r12
    51c0:	bf 90       	pop	r11
    51c2:	af 90       	pop	r10
    51c4:	9f 90       	pop	r9
    51c6:	8f 90       	pop	r8
    51c8:	08 95       	ret

000051ca <_ZN13EthernetClass11dnsServerIPEv>:
    51ca:	20 e7       	ldi	r18, 0x70	; 112
    51cc:	3a e0       	ldi	r19, 0x0A	; 10
    51ce:	fc 01       	movw	r30, r24
    51d0:	31 83       	std	Z+1, r19	; 0x01
    51d2:	20 83       	st	Z, r18
    51d4:	fb 01       	movw	r30, r22
    51d6:	42 81       	ldd	r20, Z+2	; 0x02
    51d8:	53 81       	ldd	r21, Z+3	; 0x03
    51da:	64 81       	ldd	r22, Z+4	; 0x04
    51dc:	75 81       	ldd	r23, Z+5	; 0x05
    51de:	fc 01       	movw	r30, r24
    51e0:	42 83       	std	Z+2, r20	; 0x02
    51e2:	53 83       	std	Z+3, r21	; 0x03
    51e4:	64 83       	std	Z+4, r22	; 0x04
    51e6:	75 83       	std	Z+5, r23	; 0x05
    51e8:	08 95       	ret

000051ea <_GLOBAL__sub_I__ZN13EthernetClass6_stateE>:

EthernetClass Ethernet;
    51ea:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    51ec:	00 e0       	ldi	r16, 0x00	; 0
    51ee:	20 e0       	ldi	r18, 0x00	; 0
    51f0:	40 e0       	ldi	r20, 0x00	; 0
    51f2:	60 e0       	ldi	r22, 0x00	; 0
    51f4:	82 e5       	ldi	r24, 0x52	; 82
    51f6:	9c e0       	ldi	r25, 0x0C	; 12
    51f8:	0e 94 11 39 	call	0x7222	; 0x7222 <_ZN9IPAddressC1Ehhhh>
  uint8_t w5500_cspin;

  static uint8_t _state[MAX_SOCK_NUM];
  static uint16_t _server_port[MAX_SOCK_NUM];

  EthernetClass() { _dhcp = NULL; w5500_cspin = 10; }
    51fc:	85 e3       	ldi	r24, 0x35	; 53
    51fe:	9c e0       	ldi	r25, 0x0C	; 12
    5200:	0e 94 07 39 	call	0x720e	; 0x720e <_ZN9IPAddressC1Ev>
    5204:	e5 e3       	ldi	r30, 0x35	; 53
    5206:	fc e0       	ldi	r31, 0x0C	; 12
    5208:	13 86       	std	Z+11, r1	; 0x0b
    520a:	12 86       	std	Z+10, r1	; 0x0a
    520c:	8a e0       	ldi	r24, 0x0A	; 10
    520e:	84 87       	std	Z+12, r24	; 0x0c
    5210:	0f 91       	pop	r16
    5212:	08 95       	ret

00005214 <_ZN14EthernetClientneERKS_>:
uint16_t EthernetClient::_srcport = 1024;

EthernetClient::EthernetClient() : _sock(MAX_SOCK_NUM) {
}

EthernetClient::EthernetClient(uint8_t sock) : _sock(sock) {
    5214:	dc 01       	movw	r26, r24
    5216:	ed 91       	ld	r30, X+
    5218:	fc 91       	ld	r31, X
    521a:	02 8c       	ldd	r0, Z+26	; 0x1a
    521c:	f3 8d       	ldd	r31, Z+27	; 0x1b
    521e:	e0 2d       	mov	r30, r0
    5220:	09 95       	icall
    5222:	91 e0       	ldi	r25, 0x01	; 1
    5224:	89 27       	eor	r24, r25
    5226:	08 95       	ret

00005228 <_ZN14EthernetClient5writeEh>:
    5228:	cf 93       	push	r28
    522a:	df 93       	push	r29
    522c:	1f 92       	push	r1
    522e:	cd b7       	in	r28, 0x3d	; 61
    5230:	de b7       	in	r29, 0x3e	; 62
    5232:	69 83       	std	Y+1, r22	; 0x01
    5234:	dc 01       	movw	r26, r24
    5236:	ed 91       	ld	r30, X+
    5238:	fc 91       	ld	r31, X
    523a:	02 80       	ldd	r0, Z+2	; 0x02
    523c:	f3 81       	ldd	r31, Z+3	; 0x03
    523e:	e0 2d       	mov	r30, r0
    5240:	41 e0       	ldi	r20, 0x01	; 1
    5242:	50 e0       	ldi	r21, 0x00	; 0
    5244:	be 01       	movw	r22, r28
    5246:	6f 5f       	subi	r22, 0xFF	; 255
    5248:	7f 4f       	sbci	r23, 0xFF	; 255
    524a:	09 95       	icall
    524c:	0f 90       	pop	r0
    524e:	df 91       	pop	r29
    5250:	cf 91       	pop	r28
    5252:	08 95       	ret

00005254 <_ZN14EthernetClientcvbEv>:
    5254:	21 e0       	ldi	r18, 0x01	; 1
    5256:	fc 01       	movw	r30, r24
    5258:	84 85       	ldd	r24, Z+12	; 0x0c
    525a:	88 30       	cpi	r24, 0x08	; 8
    525c:	09 f4       	brne	.+2      	; 0x5260 <_ZN14EthernetClientcvbEv+0xc>
    525e:	20 e0       	ldi	r18, 0x00	; 0
    5260:	82 2f       	mov	r24, r18
    5262:	08 95       	ret

00005264 <_ZN14EthernetClienteqERKS_>:
    5264:	fc 01       	movw	r30, r24
    5266:	94 85       	ldd	r25, Z+12	; 0x0c
    5268:	fb 01       	movw	r30, r22
    526a:	84 85       	ldd	r24, Z+12	; 0x0c
    526c:	98 13       	cpse	r25, r24
    526e:	03 c0       	rjmp	.+6      	; 0x5276 <_ZN14EthernetClienteqERKS_+0x12>
    5270:	81 e0       	ldi	r24, 0x01	; 1
    5272:	98 30       	cpi	r25, 0x08	; 8
    5274:	09 f4       	brne	.+2      	; 0x5278 <_ZN14EthernetClienteqERKS_+0x14>
    5276:	80 e0       	ldi	r24, 0x00	; 0
    5278:	08 95       	ret

0000527a <_ZN14EthernetClient7connectEPKcj>:
    527a:	cf 92       	push	r12
    527c:	df 92       	push	r13
    527e:	ef 92       	push	r14
    5280:	ff 92       	push	r15
    5282:	0f 93       	push	r16
    5284:	1f 93       	push	r17
    5286:	cf 93       	push	r28
    5288:	df 93       	push	r29
    528a:	cd b7       	in	r28, 0x3d	; 61
    528c:	de b7       	in	r29, 0x3e	; 62
    528e:	af 97       	sbiw	r28, 0x2f	; 47
    5290:	0f b6       	in	r0, 0x3f	; 63
    5292:	f8 94       	cli
    5294:	de bf       	out	0x3e, r29	; 62
    5296:	0f be       	out	0x3f, r0	; 63
    5298:	cd bf       	out	0x3d, r28	; 61
    529a:	8c 01       	movw	r16, r24
    529c:	6b 01       	movw	r12, r22
    529e:	7a 01       	movw	r14, r20
    52a0:	ce 01       	movw	r24, r28
    52a2:	01 96       	adiw	r24, 0x01	; 1
    52a4:	0e 94 07 39 	call	0x720e	; 0x720e <_ZN9IPAddressC1Ev>
    52a8:	ce 01       	movw	r24, r28
    52aa:	09 96       	adiw	r24, 0x09	; 9
    52ac:	f3 d2       	rcall	.+1510   	; 0x5894 <_ZN11EthernetUDPC1Ev>
    52ae:	ce 01       	movw	r24, r28
    52b0:	8a 96       	adiw	r24, 0x2a	; 42
    52b2:	0e 94 07 39 	call	0x720e	; 0x720e <_ZN9IPAddressC1Ev>
    52b6:	65 e3       	ldi	r22, 0x35	; 53
    52b8:	7c e0       	ldi	r23, 0x0C	; 12
    52ba:	ce 01       	movw	r24, r28
    52bc:	84 96       	adiw	r24, 0x24	; 36
    52be:	85 df       	rcall	.-246    	; 0x51ca <_ZN13EthernetClass11dnsServerIPEv>
    52c0:	be 01       	movw	r22, r28
    52c2:	6c 5d       	subi	r22, 0xDC	; 220
    52c4:	7f 4f       	sbci	r23, 0xFF	; 255
    52c6:	ce 01       	movw	r24, r28
    52c8:	01 96       	adiw	r24, 0x01	; 1
    52ca:	4a dc       	rcall	.-1900   	; 0x4b60 <_ZN9DNSClient5beginERK9IPAddress>
    52cc:	ae 01       	movw	r20, r28
    52ce:	46 5d       	subi	r20, 0xD6	; 214
    52d0:	5f 4f       	sbci	r21, 0xFF	; 255
    52d2:	b6 01       	movw	r22, r12
    52d4:	ce 01       	movw	r24, r28
    52d6:	01 96       	adiw	r24, 0x01	; 1
    52d8:	9d de       	rcall	.-710    	; 0x5014 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>
    52da:	81 30       	cpi	r24, 0x01	; 1
    52dc:	91 05       	cpc	r25, r1
    52de:	c1 f4       	brne	.+48     	; 0x5310 <_ZN14EthernetClient7connectEPKcj+0x96>
    52e0:	d8 01       	movw	r26, r16
    52e2:	ed 91       	ld	r30, X+
    52e4:	fc 91       	ld	r31, X
    52e6:	06 84       	ldd	r0, Z+14	; 0x0e
    52e8:	f7 85       	ldd	r31, Z+15	; 0x0f
    52ea:	e0 2d       	mov	r30, r0
    52ec:	80 e7       	ldi	r24, 0x70	; 112
    52ee:	9a e0       	ldi	r25, 0x0A	; 10
    52f0:	9d a3       	std	Y+37, r25	; 0x25
    52f2:	8c a3       	std	Y+36, r24	; 0x24
    52f4:	8c a5       	ldd	r24, Y+44	; 0x2c
    52f6:	9d a5       	ldd	r25, Y+45	; 0x2d
    52f8:	ae a5       	ldd	r26, Y+46	; 0x2e
    52fa:	bf a5       	ldd	r27, Y+47	; 0x2f
    52fc:	8e a3       	std	Y+38, r24	; 0x26
    52fe:	9f a3       	std	Y+39, r25	; 0x27
    5300:	a8 a7       	std	Y+40, r26	; 0x28
    5302:	b9 a7       	std	Y+41, r27	; 0x29
    5304:	a7 01       	movw	r20, r14
    5306:	be 01       	movw	r22, r28
    5308:	6c 5d       	subi	r22, 0xDC	; 220
    530a:	7f 4f       	sbci	r23, 0xFF	; 255
    530c:	c8 01       	movw	r24, r16
    530e:	09 95       	icall
    5310:	af 96       	adiw	r28, 0x2f	; 47
    5312:	0f b6       	in	r0, 0x3f	; 63
    5314:	f8 94       	cli
    5316:	de bf       	out	0x3e, r29	; 62
    5318:	0f be       	out	0x3f, r0	; 63
    531a:	cd bf       	out	0x3d, r28	; 61
    531c:	df 91       	pop	r29
    531e:	cf 91       	pop	r28
    5320:	1f 91       	pop	r17
    5322:	0f 91       	pop	r16
    5324:	ff 90       	pop	r15
    5326:	ef 90       	pop	r14
    5328:	df 90       	pop	r13
    532a:	cf 90       	pop	r12
    532c:	08 95       	ret

0000532e <_ZN14EthernetClient5writeEPKhj>:
    532e:	0f 93       	push	r16
    5330:	1f 93       	push	r17
    5332:	cf 93       	push	r28
    5334:	df 93       	push	r29
    5336:	8c 01       	movw	r16, r24
    5338:	d4 2f       	mov	r29, r20
    533a:	c5 2f       	mov	r28, r21
    533c:	fc 01       	movw	r30, r24
    533e:	84 85       	ldd	r24, Z+12	; 0x0c
    5340:	88 30       	cpi	r24, 0x08	; 8
    5342:	41 f4       	brne	.+16     	; 0x5354 <_ZN14EthernetClient5writeEPKhj+0x26>
    5344:	81 e0       	ldi	r24, 0x01	; 1
    5346:	90 e0       	ldi	r25, 0x00	; 0
    5348:	f8 01       	movw	r30, r16
    534a:	93 83       	std	Z+3, r25	; 0x03
    534c:	82 83       	std	Z+2, r24	; 0x02
    534e:	80 e0       	ldi	r24, 0x00	; 0
    5350:	90 e0       	ldi	r25, 0x00	; 0
    5352:	05 c0       	rjmp	.+10     	; 0x535e <_ZN14EthernetClient5writeEPKhj+0x30>
    5354:	cf d3       	rcall	.+1950   	; 0x5af4 <_Z4sendhPKhj>
    5356:	89 2b       	or	r24, r25
    5358:	a9 f3       	breq	.-22     	; 0x5344 <_ZN14EthernetClient5writeEPKhj+0x16>
    535a:	8d 2f       	mov	r24, r29
    535c:	9c 2f       	mov	r25, r28
    535e:	df 91       	pop	r29
    5360:	cf 91       	pop	r28
    5362:	1f 91       	pop	r17
    5364:	0f 91       	pop	r16
    5366:	08 95       	ret

00005368 <_ZN14EthernetClient9availableEv>:
    5368:	fc 01       	movw	r30, r24
    536a:	64 85       	ldd	r22, Z+12	; 0x0c
    536c:	68 30       	cpi	r22, 0x08	; 8
    536e:	19 f0       	breq	.+6      	; 0x5376 <_ZN14EthernetClient9availableEv+0xe>
    5370:	8f e6       	ldi	r24, 0x6F	; 111
    5372:	9c e0       	ldi	r25, 0x0C	; 12
    5374:	d0 c5       	rjmp	.+2976   	; 0x5f16 <_ZN10W5500Class17getRXReceivedSizeEh>
    5376:	80 e0       	ldi	r24, 0x00	; 0
    5378:	90 e0       	ldi	r25, 0x00	; 0
    537a:	08 95       	ret

0000537c <_ZN14EthernetClient4readEv>:
    537c:	cf 93       	push	r28
    537e:	df 93       	push	r29
    5380:	1f 92       	push	r1
    5382:	cd b7       	in	r28, 0x3d	; 61
    5384:	de b7       	in	r29, 0x3e	; 62
    5386:	41 e0       	ldi	r20, 0x01	; 1
    5388:	50 e0       	ldi	r21, 0x00	; 0
    538a:	be 01       	movw	r22, r28
    538c:	6f 5f       	subi	r22, 0xFF	; 255
    538e:	7f 4f       	sbci	r23, 0xFF	; 255
    5390:	fc 01       	movw	r30, r24
    5392:	84 85       	ldd	r24, Z+12	; 0x0c
    5394:	f7 d3       	rcall	.+2030   	; 0x5b84 <_Z4recvhPhi>
    5396:	18 16       	cp	r1, r24
    5398:	19 06       	cpc	r1, r25
    539a:	1c f4       	brge	.+6      	; 0x53a2 <_ZN14EthernetClient4readEv+0x26>
    539c:	89 81       	ldd	r24, Y+1	; 0x01
    539e:	90 e0       	ldi	r25, 0x00	; 0
    53a0:	02 c0       	rjmp	.+4      	; 0x53a6 <_ZN14EthernetClient4readEv+0x2a>
    53a2:	8f ef       	ldi	r24, 0xFF	; 255
    53a4:	9f ef       	ldi	r25, 0xFF	; 255
    53a6:	0f 90       	pop	r0
    53a8:	df 91       	pop	r29
    53aa:	cf 91       	pop	r28
    53ac:	08 95       	ret

000053ae <_ZN14EthernetClient4readEPhj>:
    53ae:	fc 01       	movw	r30, r24
    53b0:	84 85       	ldd	r24, Z+12	; 0x0c
    53b2:	e8 c3       	rjmp	.+2000   	; 0x5b84 <_Z4recvhPhi>

000053b4 <_ZN14EthernetClient4peekEv>:
    53b4:	0f 93       	push	r16
    53b6:	1f 93       	push	r17
    53b8:	cf 93       	push	r28
    53ba:	df 93       	push	r29
    53bc:	1f 92       	push	r1
    53be:	cd b7       	in	r28, 0x3d	; 61
    53c0:	de b7       	in	r29, 0x3e	; 62
    53c2:	8c 01       	movw	r16, r24
    53c4:	dc 01       	movw	r26, r24
    53c6:	ed 91       	ld	r30, X+
    53c8:	fc 91       	ld	r31, X
    53ca:	00 84       	ldd	r0, Z+8	; 0x08
    53cc:	f1 85       	ldd	r31, Z+9	; 0x09
    53ce:	e0 2d       	mov	r30, r0
    53d0:	09 95       	icall
    53d2:	89 2b       	or	r24, r25
    53d4:	49 f0       	breq	.+18     	; 0x53e8 <_ZN14EthernetClient4peekEv+0x34>
    53d6:	be 01       	movw	r22, r28
    53d8:	6f 5f       	subi	r22, 0xFF	; 255
    53da:	7f 4f       	sbci	r23, 0xFF	; 255
    53dc:	f8 01       	movw	r30, r16
    53de:	84 85       	ldd	r24, Z+12	; 0x0c
    53e0:	12 d4       	rcall	.+2084   	; 0x5c06 <_Z4peekhPh>
    53e2:	89 81       	ldd	r24, Y+1	; 0x01
    53e4:	90 e0       	ldi	r25, 0x00	; 0
    53e6:	02 c0       	rjmp	.+4      	; 0x53ec <_ZN14EthernetClient4peekEv+0x38>
    53e8:	8f ef       	ldi	r24, 0xFF	; 255
    53ea:	9f ef       	ldi	r25, 0xFF	; 255
    53ec:	0f 90       	pop	r0
    53ee:	df 91       	pop	r29
    53f0:	cf 91       	pop	r28
    53f2:	1f 91       	pop	r17
    53f4:	0f 91       	pop	r16
    53f6:	08 95       	ret

000053f8 <_ZN14EthernetClient5flushEv>:
    53f8:	fc 01       	movw	r30, r24
    53fa:	84 85       	ldd	r24, Z+12	; 0x0c
    53fc:	11 c4       	rjmp	.+2082   	; 0x5c20 <_Z5flushh>

000053fe <_ZN14EthernetClientC1Ev>:
    53fe:	fc 01       	movw	r30, r24
    5400:	13 82       	std	Z+3, r1	; 0x03
    5402:	12 82       	std	Z+2, r1	; 0x02
    5404:	88 ee       	ldi	r24, 0xE8	; 232
    5406:	93 e0       	ldi	r25, 0x03	; 3
    5408:	a0 e0       	ldi	r26, 0x00	; 0
    540a:	b0 e0       	ldi	r27, 0x00	; 0
    540c:	84 83       	std	Z+4, r24	; 0x04
    540e:	95 83       	std	Z+5, r25	; 0x05
    5410:	a6 83       	std	Z+6, r26	; 0x06
    5412:	b7 83       	std	Z+7, r27	; 0x07
    5414:	8c ee       	ldi	r24, 0xEC	; 236
    5416:	99 e0       	ldi	r25, 0x09	; 9
    5418:	91 83       	std	Z+1, r25	; 0x01
    541a:	80 83       	st	Z, r24
    541c:	88 e0       	ldi	r24, 0x08	; 8
    541e:	84 87       	std	Z+12, r24	; 0x0c
    5420:	08 95       	ret

00005422 <_ZN14EthernetClient6statusEv>:
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
}

uint8_t EthernetClient::status() {
  if (_sock == MAX_SOCK_NUM) return SnSR::CLOSED;
    5422:	fc 01       	movw	r30, r24
    5424:	64 85       	ldd	r22, Z+12	; 0x0c
    5426:	68 30       	cpi	r22, 0x08	; 8
    5428:	39 f0       	breq	.+14     	; 0x5438 <_ZN14EthernetClient6statusEv+0x16>

extern W5500Class w5500;

uint8_t W5500Class::readSn(SOCKET _s, uint16_t _addr) {
    uint8_t cntl_byte = (_s<<5)+0x08;
    return read(_addr, cntl_byte);
    542a:	62 95       	swap	r22
    542c:	66 0f       	add	r22, r22
    542e:	60 7e       	andi	r22, 0xE0	; 224
    5430:	68 5f       	subi	r22, 0xF8	; 248
    5432:	83 e0       	ldi	r24, 0x03	; 3
    5434:	90 e0       	ldi	r25, 0x00	; 0
    5436:	df c4       	rjmp	.+2494   	; 0x5df6 <_ZN10W5500Class4readEjh>
  return w5500.readSnSR(_sock);
}
    5438:	80 e0       	ldi	r24, 0x00	; 0
    543a:	08 95       	ret

0000543c <_ZN14EthernetClient9connectedEv>:

  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
    543c:	cf 93       	push	r28
    543e:	df 93       	push	r29
  if (_sock == MAX_SOCK_NUM) return 0;
    5440:	fc 01       	movw	r30, r24
    5442:	24 85       	ldd	r18, Z+12	; 0x0c
    5444:	28 30       	cpi	r18, 0x08	; 8
    5446:	c9 f0       	breq	.+50     	; 0x547a <_ZN14EthernetClient9connectedEv+0x3e>
    5448:	ec 01       	movw	r28, r24
  
  uint8_t s = status();
    544a:	eb df       	rcall	.-42     	; 0x5422 <_ZN14EthernetClient6statusEv>
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
    544c:	84 31       	cpi	r24, 0x14	; 20
    544e:	81 f0       	breq	.+32     	; 0x5470 <_ZN14EthernetClient9connectedEv+0x34>

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
  
  uint8_t s = status();
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    5450:	88 23       	and	r24, r24
    5452:	71 f0       	breq	.+28     	; 0x5470 <_ZN14EthernetClient9connectedEv+0x34>
    5454:	88 31       	cpi	r24, 0x18	; 24
    5456:	61 f0       	breq	.+24     	; 0x5470 <_ZN14EthernetClient9connectedEv+0x34>
    (s == SnSR::CLOSE_WAIT && !available()));
    5458:	8c 31       	cpi	r24, 0x1C	; 28
    545a:	61 f4       	brne	.+24     	; 0x5474 <_ZN14EthernetClient9connectedEv+0x38>
    545c:	e8 81       	ld	r30, Y
    545e:	f9 81       	ldd	r31, Y+1	; 0x01
    5460:	00 84       	ldd	r0, Z+8	; 0x08
    5462:	f1 85       	ldd	r31, Z+9	; 0x09
    5464:	e0 2d       	mov	r30, r0
    5466:	ce 01       	movw	r24, r28
    5468:	09 95       	icall
    546a:	21 e0       	ldi	r18, 0x01	; 1
    546c:	89 2b       	or	r24, r25
    546e:	19 f4       	brne	.+6      	; 0x5476 <_ZN14EthernetClient9connectedEv+0x3a>
    5470:	20 e0       	ldi	r18, 0x00	; 0
    5472:	01 c0       	rjmp	.+2      	; 0x5476 <_ZN14EthernetClient9connectedEv+0x3a>
    5474:	21 e0       	ldi	r18, 0x01	; 1
    5476:	82 2f       	mov	r24, r18
    5478:	01 c0       	rjmp	.+2      	; 0x547c <_ZN14EthernetClient9connectedEv+0x40>
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
    547a:	80 e0       	ldi	r24, 0x00	; 0
  
  uint8_t s = status();
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
}
    547c:	df 91       	pop	r29
    547e:	cf 91       	pop	r28
    5480:	08 95       	ret

00005482 <_ZN14EthernetClient4stopEv>:

void EthernetClient::flush() {
  ::flush(_sock);
}

void EthernetClient::stop() {
    5482:	cf 92       	push	r12
    5484:	df 92       	push	r13
    5486:	ef 92       	push	r14
    5488:	ff 92       	push	r15
    548a:	cf 93       	push	r28
    548c:	df 93       	push	r29
    548e:	ec 01       	movw	r28, r24
  if (_sock == MAX_SOCK_NUM)
    5490:	8c 85       	ldd	r24, Y+12	; 0x0c
    5492:	88 30       	cpi	r24, 0x08	; 8
    5494:	69 f1       	breq	.+90     	; 0x54f0 <_ZN14EthernetClient4stopEv+0x6e>
    return;

  // attempt to close the connection gracefully (send a FIN to other side)
  disconnect(_sock);
    5496:	29 d3       	rcall	.+1618   	; 0x5aea <_Z10disconnecth>
  unsigned long start = millis();
    5498:	0e 94 97 3a 	call	0x752e	; 0x752e <millis>
    549c:	6b 01       	movw	r12, r22
    549e:	7c 01       	movw	r14, r24

  // wait a second for the connection to close
  while (status() != SnSR::CLOSED && millis() - start < 1000)
    54a0:	ce 01       	movw	r24, r28
    54a2:	bf df       	rcall	.-130    	; 0x5422 <_ZN14EthernetClient6statusEv>
    54a4:	88 23       	and	r24, r24
    54a6:	a1 f0       	breq	.+40     	; 0x54d0 <_ZN14EthernetClient4stopEv+0x4e>
    54a8:	0e 94 97 3a 	call	0x752e	; 0x752e <millis>
    54ac:	dc 01       	movw	r26, r24
    54ae:	cb 01       	movw	r24, r22
    54b0:	8c 19       	sub	r24, r12
    54b2:	9d 09       	sbc	r25, r13
    54b4:	ae 09       	sbc	r26, r14
    54b6:	bf 09       	sbc	r27, r15
    54b8:	88 3e       	cpi	r24, 0xE8	; 232
    54ba:	93 40       	sbci	r25, 0x03	; 3
    54bc:	a1 05       	cpc	r26, r1
    54be:	b1 05       	cpc	r27, r1
    54c0:	38 f4       	brcc	.+14     	; 0x54d0 <_ZN14EthernetClient4stopEv+0x4e>
    delay(1);
    54c2:	61 e0       	ldi	r22, 0x01	; 1
    54c4:	70 e0       	ldi	r23, 0x00	; 0
    54c6:	80 e0       	ldi	r24, 0x00	; 0
    54c8:	90 e0       	ldi	r25, 0x00	; 0
    54ca:	0e 94 c8 3a 	call	0x7590	; 0x7590 <delay>

  // if it hasn't closed, close it forcefully
  if (status() != SnSR::CLOSED)
    54ce:	e8 cf       	rjmp	.-48     	; 0x54a0 <_ZN14EthernetClient4stopEv+0x1e>
    54d0:	ce 01       	movw	r24, r28
    54d2:	a7 df       	rcall	.-178    	; 0x5422 <_ZN14EthernetClient6statusEv>
    54d4:	88 23       	and	r24, r24
    close(_sock);
    54d6:	11 f0       	breq	.+4      	; 0x54dc <_ZN14EthernetClient4stopEv+0x5a>
    54d8:	8c 85       	ldd	r24, Y+12	; 0x0c
    54da:	96 d2       	rcall	.+1324   	; 0x5a08 <_Z5closeh>

  EthernetClass::_server_port[_sock] = 0;
    54dc:	ec 85       	ldd	r30, Y+12	; 0x0c
    54de:	f0 e0       	ldi	r31, 0x00	; 0
    54e0:	ee 0f       	add	r30, r30
    54e2:	ff 1f       	adc	r31, r31
    54e4:	ee 5b       	subi	r30, 0xBE	; 190
    54e6:	f3 4f       	sbci	r31, 0xF3	; 243
    54e8:	11 82       	std	Z+1, r1	; 0x01
    54ea:	10 82       	st	Z, r1
  _sock = MAX_SOCK_NUM;
    54ec:	88 e0       	ldi	r24, 0x08	; 8
    54ee:	8c 87       	std	Y+12, r24	; 0x0c
}
    54f0:	df 91       	pop	r29
    54f2:	cf 91       	pop	r28
    54f4:	ff 90       	pop	r15
    54f6:	ef 90       	pop	r14
    54f8:	df 90       	pop	r13
    54fa:	cf 90       	pop	r12
    54fc:	08 95       	ret

000054fe <_ZN14EthernetClient7connectE9IPAddressj>:
  } else {
    return ret;
  }
}

int EthernetClient::connect(IPAddress ip, uint16_t port) {
    54fe:	cf 92       	push	r12
    5500:	df 92       	push	r13
    5502:	ff 92       	push	r15
    5504:	0f 93       	push	r16
    5506:	1f 93       	push	r17
    5508:	cf 93       	push	r28
    550a:	df 93       	push	r29
  if (_sock != MAX_SOCK_NUM)
    550c:	fc 01       	movw	r30, r24
    550e:	24 85       	ldd	r18, Z+12	; 0x0c
    5510:	28 30       	cpi	r18, 0x08	; 8
    5512:	c1 f5       	brne	.+112    	; 0x5584 <_ZN14EthernetClient7connectE9IPAddressj+0x86>
    5514:	6a 01       	movw	r12, r20
    5516:	8b 01       	movw	r16, r22
    5518:	ec 01       	movw	r28, r24
    551a:	f1 2c       	mov	r15, r1
    551c:	6f 2d       	mov	r22, r15
    551e:	62 95       	swap	r22
    5520:	66 0f       	add	r22, r22
    5522:	60 7e       	andi	r22, 0xE0	; 224
    5524:	68 5f       	subi	r22, 0xF8	; 248
    5526:	83 e0       	ldi	r24, 0x03	; 3
    5528:	90 e0       	ldi	r25, 0x00	; 0
    552a:	65 d4       	rcall	.+2250   	; 0x5df6 <_ZN10W5500Class4readEjh>
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
    552c:	81 11       	cpse	r24, r1
    552e:	02 c0       	rjmp	.+4      	; 0x5534 <_ZN14EthernetClient7connectE9IPAddressj+0x36>
      _sock = i;
    5530:	fc 86       	std	Y+12, r15	; 0x0c
    5532:	07 c0       	rjmp	.+14     	; 0x5542 <_ZN14EthernetClient7connectE9IPAddressj+0x44>
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
    5534:	8b 7f       	andi	r24, 0xFB	; 251
    5536:	88 31       	cpi	r24, 0x18	; 24
    5538:	d9 f3       	breq	.-10     	; 0x5530 <_ZN14EthernetClient7connectE9IPAddressj+0x32>
    553a:	f3 94       	inc	r15

int EthernetClient::connect(IPAddress ip, uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    553c:	f8 e0       	ldi	r31, 0x08	; 8
    553e:	ff 12       	cpse	r15, r31
    5540:	ed cf       	rjmp	.-38     	; 0x551c <_ZN14EthernetClient7connectE9IPAddressj+0x1e>
      _sock = i;
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
    5542:	8c 85       	ldd	r24, Y+12	; 0x0c
    5544:	88 30       	cpi	r24, 0x08	; 8
    5546:	f1 f0       	breq	.+60     	; 0x5584 <_ZN14EthernetClient7connectE9IPAddressj+0x86>
    return 0;

  _srcport++;
    5548:	20 91 6b 01 	lds	r18, 0x016B	; 0x80016b <_ZN14EthernetClient8_srcportE>
    554c:	30 91 6c 01 	lds	r19, 0x016C	; 0x80016c <_ZN14EthernetClient8_srcportE+0x1>
    5550:	2f 5f       	subi	r18, 0xFF	; 255
    5552:	3f 4f       	sbci	r19, 0xFF	; 255
  if (_srcport == 0) _srcport = 1024;
    5554:	11 f4       	brne	.+4      	; 0x555a <_ZN14EthernetClient7connectE9IPAddressj+0x5c>
    5556:	20 e0       	ldi	r18, 0x00	; 0
    5558:	34 e0       	ldi	r19, 0x04	; 4
    555a:	30 93 6c 01 	sts	0x016C, r19	; 0x80016c <_ZN14EthernetClient8_srcportE+0x1>
    555e:	20 93 6b 01 	sts	0x016B, r18	; 0x80016b <_ZN14EthernetClient8_srcportE>
  socket(_sock, SnMR::TCP, _srcport, 0);
    5562:	40 91 6b 01 	lds	r20, 0x016B	; 0x80016b <_ZN14EthernetClient8_srcportE>
    5566:	50 91 6c 01 	lds	r21, 0x016C	; 0x80016c <_ZN14EthernetClient8_srcportE+0x1>
    556a:	20 e0       	ldi	r18, 0x00	; 0
    556c:	61 e0       	ldi	r22, 0x01	; 1
    556e:	57 d2       	rcall	.+1198   	; 0x5a1e <_Z6sockethhjh>

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    5570:	b8 01       	movw	r22, r16
    5572:	6e 5f       	subi	r22, 0xFE	; 254
    5574:	7f 4f       	sbci	r23, 0xFF	; 255

  if (!::connect(_sock, rawIPAddress(ip), port)) {
    5576:	a6 01       	movw	r20, r12
    5578:	8c 85       	ldd	r24, Y+12	; 0x0c
    557a:	84 d2       	rcall	.+1288   	; 0x5a84 <_Z7connecthPhj>
    557c:	81 11       	cpse	r24, r1
    557e:	05 c0       	rjmp	.+10     	; 0x558a <_ZN14EthernetClient7connectE9IPAddressj+0x8c>
    _sock = MAX_SOCK_NUM;
    5580:	88 e0       	ldi	r24, 0x08	; 8
    5582:	8c 87       	std	Y+12, r24	; 0x0c
    return 0;
    5584:	80 e0       	ldi	r24, 0x00	; 0
    5586:	90 e0       	ldi	r25, 0x00	; 0
  }

  while (status() != SnSR::ESTABLISHED) {
    5588:	0f c0       	rjmp	.+30     	; 0x55a8 <_ZN14EthernetClient7connectE9IPAddressj+0xaa>
    558a:	ce 01       	movw	r24, r28
    558c:	4a df       	rcall	.-364    	; 0x5422 <_ZN14EthernetClient6statusEv>
    558e:	87 31       	cpi	r24, 0x17	; 23
    5590:	49 f0       	breq	.+18     	; 0x55a4 <_ZN14EthernetClient7connectE9IPAddressj+0xa6>
    delay(1);
    5592:	61 e0       	ldi	r22, 0x01	; 1
    5594:	70 e0       	ldi	r23, 0x00	; 0
    5596:	80 e0       	ldi	r24, 0x00	; 0
    5598:	90 e0       	ldi	r25, 0x00	; 0
    559a:	0e 94 c8 3a 	call	0x7590	; 0x7590 <delay>
    if (status() == SnSR::CLOSED) {
    559e:	ce 01       	movw	r24, r28
    55a0:	40 df       	rcall	.-384    	; 0x5422 <_ZN14EthernetClient6statusEv>
    55a2:	ec cf       	rjmp	.-40     	; 0x557c <_ZN14EthernetClient7connectE9IPAddressj+0x7e>
      _sock = MAX_SOCK_NUM;
      return 0;
    }
  }

  return 1;
    55a4:	81 e0       	ldi	r24, 0x01	; 1
    55a6:	90 e0       	ldi	r25, 0x00	; 0
}
    55a8:	df 91       	pop	r29
    55aa:	cf 91       	pop	r28
    55ac:	1f 91       	pop	r17
    55ae:	0f 91       	pop	r16
    55b0:	ff 90       	pop	r15
    55b2:	df 90       	pop	r13
    55b4:	cf 90       	pop	r12
    55b6:	08 95       	ret

000055b8 <_GLOBAL__sub_I__ZN14EthernetClient8_srcportE>:
  return _sock != MAX_SOCK_NUM;
}

bool EthernetClient::operator==(const EthernetClient& rhs) {
  return _sock == rhs._sock && _sock != MAX_SOCK_NUM && rhs._sock != MAX_SOCK_NUM;
}
    55b8:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    55ba:	00 e0       	ldi	r16, 0x00	; 0
    55bc:	20 e0       	ldi	r18, 0x00	; 0
    55be:	40 e0       	ldi	r20, 0x00	; 0
    55c0:	60 e0       	ldi	r22, 0x00	; 0
    55c2:	88 e5       	ldi	r24, 0x58	; 88
    55c4:	9c e0       	ldi	r25, 0x0C	; 12
    55c6:	0e 94 11 39 	call	0x7222	; 0x7222 <_ZN9IPAddressC1Ehhhh>
    55ca:	0f 91       	pop	r16
    55cc:	08 95       	ret

000055ce <_GLOBAL__sub_I__ZN14EthernetServerC2Ej>:
      n += client.write(buffer, size);
    }
  }
  
  return n;
}
    55ce:	0f 93       	push	r16
    55d0:	00 e0       	ldi	r16, 0x00	; 0
    55d2:	20 e0       	ldi	r18, 0x00	; 0
    55d4:	40 e0       	ldi	r20, 0x00	; 0
    55d6:	60 e0       	ldi	r22, 0x00	; 0
    55d8:	8e e5       	ldi	r24, 0x5E	; 94
    55da:	9c e0       	ldi	r25, 0x0C	; 12
    55dc:	0e 94 11 39 	call	0x7222	; 0x7222 <_ZN9IPAddressC1Ehhhh>
    55e0:	0f 91       	pop	r16
    55e2:	08 95       	ret

000055e4 <_ZN3UDP14beginMulticastE9IPAddressj>:

class UDP : public Stream {

public:
  virtual uint8_t begin(uint16_t) =0;  // initialize, start listening on specified port. Returns 1 if successful, 0 if there are no sockets available to use
  virtual uint8_t beginMulticast(IPAddress, uint16_t) { return 0; }  // initialize, start listening on specified multicast IP address and port. Returns 1 if successful, 0 on failure
    55e4:	80 e0       	ldi	r24, 0x00	; 0
    55e6:	08 95       	ret

000055e8 <_ZN11EthernetUDP4readEPcj>:
  // Read up to len bytes from the current packet and place them into buffer
  // Returns the number of bytes read, or 0 if none are available
  virtual int read(unsigned char* buffer, size_t len);
  // Read up to len characters from the current packet and place them into buffer
  // Returns the number of characters read, or 0 if none are available
  virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
    55e8:	dc 01       	movw	r26, r24
    55ea:	ed 91       	ld	r30, X+
    55ec:	fc 91       	ld	r31, X
    55ee:	04 8c       	ldd	r0, Z+28	; 0x1c
    55f0:	f5 8d       	ldd	r31, Z+29	; 0x1d
    55f2:	e0 2d       	mov	r30, r0
    55f4:	09 94       	ijmp

000055f6 <_ZN11EthernetUDP8remoteIPEv>:
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    55f6:	20 e7       	ldi	r18, 0x70	; 112
    55f8:	3a e0       	ldi	r19, 0x0A	; 10
    55fa:	fc 01       	movw	r30, r24
    55fc:	31 83       	std	Z+1, r19	; 0x01
    55fe:	20 83       	st	Z, r18
    5600:	fb 01       	movw	r30, r22
    5602:	41 89       	ldd	r20, Z+17	; 0x11
    5604:	52 89       	ldd	r21, Z+18	; 0x12
    5606:	63 89       	ldd	r22, Z+19	; 0x13
    5608:	74 89       	ldd	r23, Z+20	; 0x14
    560a:	fc 01       	movw	r30, r24
    560c:	42 83       	std	Z+2, r20	; 0x02
    560e:	53 83       	std	Z+3, r21	; 0x03
    5610:	64 83       	std	Z+4, r22	; 0x04
    5612:	75 83       	std	Z+5, r23	; 0x05
  // Return the next byte from the current packet without moving on to the next byte
  virtual int peek();
  virtual void flush();	// Finish reading the current packet

  // Return the IP address of the host who sent the current incoming packet
  virtual IPAddress remoteIP() { return _remoteIP; };
    5614:	08 95       	ret

00005616 <_ZN11EthernetUDP10remotePortEv>:
  // Return the port of the host who sent the current incoming packet
  virtual uint16_t remotePort() { return _remotePort; };
    5616:	fc 01       	movw	r30, r24
    5618:	85 89       	ldd	r24, Z+21	; 0x15
    561a:	96 89       	ldd	r25, Z+22	; 0x16
    561c:	08 95       	ret

0000561e <_ZN11EthernetUDP9availableEv>:

/* return number of bytes available in the current packet,
   will return zero if parsePacket hasn't been called yet */
int EthernetUDP::available() {
  return _remaining;
}
    561e:	fc 01       	movw	r30, r24
    5620:	81 8d       	ldd	r24, Z+25	; 0x19
    5622:	92 8d       	ldd	r25, Z+26	; 0x1a
    5624:	08 95       	ret

00005626 <_ZN11EthernetUDP5writeEh>:
{
  return sendUDP(_sock);
}

size_t EthernetUDP::write(uint8_t byte)
{
    5626:	cf 93       	push	r28
    5628:	df 93       	push	r29
    562a:	1f 92       	push	r1
    562c:	cd b7       	in	r28, 0x3d	; 61
    562e:	de b7       	in	r29, 0x3e	; 62
    5630:	69 83       	std	Y+1, r22	; 0x01
  return write(&byte, 1);
    5632:	dc 01       	movw	r26, r24
    5634:	ed 91       	ld	r30, X+
    5636:	fc 91       	ld	r31, X
    5638:	02 80       	ldd	r0, Z+2	; 0x02
    563a:	f3 81       	ldd	r31, Z+3	; 0x03
    563c:	e0 2d       	mov	r30, r0
    563e:	41 e0       	ldi	r20, 0x01	; 1
    5640:	50 e0       	ldi	r21, 0x00	; 0
    5642:	be 01       	movw	r22, r28
    5644:	6f 5f       	subi	r22, 0xFF	; 255
    5646:	7f 4f       	sbci	r23, 0xFF	; 255
    5648:	09 95       	icall
}
    564a:	0f 90       	pop	r0
    564c:	df 91       	pop	r29
    564e:	cf 91       	pop	r28
    5650:	08 95       	ret

00005652 <_ZN11EthernetUDP5flushEv>:
  ::peek(_sock, &b);
  return b;
}

void EthernetUDP::flush()
{
    5652:	cf 93       	push	r28
    5654:	df 93       	push	r29
    5656:	ec 01       	movw	r28, r24
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5500 always behaves :)

  while (_remaining)
    5658:	89 8d       	ldd	r24, Y+25	; 0x19
    565a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    565c:	89 2b       	or	r24, r25
    565e:	41 f0       	breq	.+16     	; 0x5670 <_ZN11EthernetUDP5flushEv+0x1e>
  {
    read();
    5660:	e8 81       	ld	r30, Y
    5662:	f9 81       	ldd	r31, Y+1	; 0x01
    5664:	02 84       	ldd	r0, Z+10	; 0x0a
    5666:	f3 85       	ldd	r31, Z+11	; 0x0b
    5668:	e0 2d       	mov	r30, r0
    566a:	ce 01       	movw	r24, r28
    566c:	09 95       	icall
{
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5500 always behaves :)

  while (_remaining)
    566e:	f4 cf       	rjmp	.-24     	; 0x5658 <_ZN11EthernetUDP5flushEv+0x6>
  {
    read();
  }
}
    5670:	df 91       	pop	r29
    5672:	cf 91       	pop	r28
    5674:	08 95       	ret

00005676 <_ZN11EthernetUDP4stopEv>:
  return _remaining;
}

/* Release any resources being used by this EthernetUDP instance */
void EthernetUDP::stop()
{
    5676:	cf 93       	push	r28
    5678:	df 93       	push	r29
    567a:	ec 01       	movw	r28, r24
  if (_sock == MAX_SOCK_NUM)
    567c:	8c 85       	ldd	r24, Y+12	; 0x0c
    567e:	88 30       	cpi	r24, 0x08	; 8
    5680:	59 f0       	breq	.+22     	; 0x5698 <_ZN11EthernetUDP4stopEv+0x22>
    return;

  close(_sock);
    5682:	c2 d1       	rcall	.+900    	; 0x5a08 <_Z5closeh>

  EthernetClass::_server_port[_sock] = 0;
    5684:	ec 85       	ldd	r30, Y+12	; 0x0c
    5686:	f0 e0       	ldi	r31, 0x00	; 0
    5688:	ee 0f       	add	r30, r30
    568a:	ff 1f       	adc	r31, r31
    568c:	ee 5b       	subi	r30, 0xBE	; 190
    568e:	f3 4f       	sbci	r31, 0xF3	; 243
    5690:	11 82       	std	Z+1, r1	; 0x01
    5692:	10 82       	st	Z, r1
  _sock = MAX_SOCK_NUM;
    5694:	88 e0       	ldi	r24, 0x08	; 8
    5696:	8c 87       	std	Y+12, r24	; 0x0c
}
    5698:	df 91       	pop	r29
    569a:	cf 91       	pop	r28
    569c:	08 95       	ret

0000569e <_ZN11EthernetUDP11beginPacketE9IPAddressj>:
  }
}

int EthernetUDP::beginPacket(IPAddress ip, uint16_t port)
{
  _offset = 0;
    569e:	fc 01       	movw	r30, r24
    56a0:	10 8e       	std	Z+24, r1	; 0x18
    56a2:	17 8a       	std	Z+23, r1	; 0x17

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    56a4:	6e 5f       	subi	r22, 0xFE	; 254
    56a6:	7f 4f       	sbci	r23, 0xFF	; 255
  return startUDP(_sock, rawIPAddress(ip), port);
    56a8:	84 85       	ldd	r24, Z+12	; 0x0c
    56aa:	e6 c2       	rjmp	.+1484   	; 0x5c78 <_Z8startUDPhPhj>

000056ac <_ZN11EthernetUDP9endPacketEv>:
}

int EthernetUDP::endPacket()
{
  return sendUDP(_sock);
    56ac:	fc 01       	movw	r30, r24
    56ae:	84 85       	ldd	r24, Z+12	; 0x0c
    56b0:	06 c3       	rjmp	.+1548   	; 0x5cbe <_Z7sendUDPh>

000056b2 <_ZN11EthernetUDP5writeEPKhj>:
{
  return write(&byte, 1);
}

size_t EthernetUDP::write(const uint8_t *buffer, size_t size)
{
    56b2:	cf 93       	push	r28
    56b4:	df 93       	push	r29
    56b6:	ec 01       	movw	r28, r24
    56b8:	9a 01       	movw	r18, r20
  uint16_t bytes_written = bufferData(_sock, _offset, buffer, size);
    56ba:	8f 89       	ldd	r24, Y+23	; 0x17
    56bc:	98 8d       	ldd	r25, Y+24	; 0x18
    56be:	ab 01       	movw	r20, r22
    56c0:	bc 01       	movw	r22, r24
    56c2:	8c 85       	ldd	r24, Y+12	; 0x0c
    56c4:	ae d2       	rcall	.+1372   	; 0x5c22 <_Z10bufferDatahjPKhj>
  _offset += bytes_written;
    56c6:	2f 89       	ldd	r18, Y+23	; 0x17
    56c8:	38 8d       	ldd	r19, Y+24	; 0x18
    56ca:	28 0f       	add	r18, r24
    56cc:	39 1f       	adc	r19, r25
    56ce:	38 8f       	std	Y+24, r19	; 0x18
    56d0:	2f 8b       	std	Y+23, r18	; 0x17
  return bytes_written;
}
    56d2:	df 91       	pop	r29
    56d4:	cf 91       	pop	r28
    56d6:	08 95       	ret

000056d8 <_ZN11EthernetUDP4readEv>:
  // There aren't any packets available
  return 0;
}

int EthernetUDP::read()
{
    56d8:	0f 93       	push	r16
    56da:	1f 93       	push	r17
    56dc:	cf 93       	push	r28
    56de:	df 93       	push	r29
    56e0:	1f 92       	push	r1
    56e2:	cd b7       	in	r28, 0x3d	; 61
    56e4:	de b7       	in	r29, 0x3e	; 62
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
    56e6:	fc 01       	movw	r30, r24
    56e8:	21 8d       	ldd	r18, Z+25	; 0x19
    56ea:	32 8d       	ldd	r19, Z+26	; 0x1a
    56ec:	23 2b       	or	r18, r19
    56ee:	59 f0       	breq	.+22     	; 0x5706 <_ZN11EthernetUDP4readEv+0x2e>
    56f0:	8c 01       	movw	r16, r24
    56f2:	41 e0       	ldi	r20, 0x01	; 1
    56f4:	50 e0       	ldi	r21, 0x00	; 0
    56f6:	be 01       	movw	r22, r28
    56f8:	6f 5f       	subi	r22, 0xFF	; 255
    56fa:	7f 4f       	sbci	r23, 0xFF	; 255
    56fc:	84 85       	ldd	r24, Z+12	; 0x0c
    56fe:	42 d2       	rcall	.+1156   	; 0x5b84 <_Z4recvhPhi>
    5700:	18 16       	cp	r1, r24
    5702:	19 06       	cpc	r1, r25
    5704:	1c f0       	brlt	.+6      	; 0x570c <_ZN11EthernetUDP4readEv+0x34>
    _remaining--;
    return byte;
  }

  // If we get here, there's no data available
  return -1;
    5706:	8f ef       	ldi	r24, 0xFF	; 255
    5708:	9f ef       	ldi	r25, 0xFF	; 255
    570a:	08 c0       	rjmp	.+16     	; 0x571c <_ZN11EthernetUDP4readEv+0x44>
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
  {
    // We read things without any problems
    _remaining--;
    570c:	f8 01       	movw	r30, r16
    570e:	81 8d       	ldd	r24, Z+25	; 0x19
    5710:	92 8d       	ldd	r25, Z+26	; 0x1a
    5712:	01 97       	sbiw	r24, 0x01	; 1
    5714:	92 8f       	std	Z+26, r25	; 0x1a
    5716:	81 8f       	std	Z+25, r24	; 0x19
    return byte;
    5718:	89 81       	ldd	r24, Y+1	; 0x01
    571a:	90 e0       	ldi	r25, 0x00	; 0
  }

  // If we get here, there's no data available
  return -1;
}
    571c:	0f 90       	pop	r0
    571e:	df 91       	pop	r29
    5720:	cf 91       	pop	r28
    5722:	1f 91       	pop	r17
    5724:	0f 91       	pop	r16
    5726:	08 95       	ret

00005728 <_ZN11EthernetUDP4readEPhj>:

int EthernetUDP::read(unsigned char* buffer, size_t len)
{
    5728:	cf 93       	push	r28
    572a:	df 93       	push	r29

  if (_remaining > 0)
    572c:	fc 01       	movw	r30, r24
    572e:	21 8d       	ldd	r18, Z+25	; 0x19
    5730:	32 8d       	ldd	r19, Z+26	; 0x1a
    5732:	21 15       	cp	r18, r1
    5734:	31 05       	cpc	r19, r1
    5736:	19 f4       	brne	.+6      	; 0x573e <_ZN11EthernetUDP4readEPhj+0x16>
    }

  }

  // If we get here, there's no data available or recv failed
  return -1;
    5738:	8f ef       	ldi	r24, 0xFF	; 255
    573a:	9f ef       	ldi	r25, 0xFF	; 255
    573c:	10 c0       	rjmp	.+32     	; 0x575e <_ZN11EthernetUDP4readEPhj+0x36>
    573e:	ec 01       	movw	r28, r24
  if (_remaining > 0)
  {

    int got;

    if (_remaining <= len)
    5740:	42 17       	cp	r20, r18
    5742:	53 07       	cpc	r21, r19
    5744:	08 f0       	brcs	.+2      	; 0x5748 <_ZN11EthernetUDP4readEPhj+0x20>
    {
      // data should fit in the buffer
      got = recv(_sock, buffer, _remaining);
    5746:	a9 01       	movw	r20, r18
    }
    else
    {
      // too much data for the buffer, 
      // grab as much as will fit
      got = recv(_sock, buffer, len);
    5748:	8c 85       	ldd	r24, Y+12	; 0x0c
    574a:	1c d2       	rcall	.+1080   	; 0x5b84 <_Z4recvhPhi>
    }

    if (got > 0)
    574c:	18 16       	cp	r1, r24
    574e:	19 06       	cpc	r1, r25
    5750:	9c f7       	brge	.-26     	; 0x5738 <_ZN11EthernetUDP4readEPhj+0x10>
    {
      _remaining -= got;
    5752:	29 8d       	ldd	r18, Y+25	; 0x19
    5754:	3a 8d       	ldd	r19, Y+26	; 0x1a
    5756:	28 1b       	sub	r18, r24
    5758:	39 0b       	sbc	r19, r25
    575a:	3a 8f       	std	Y+26, r19	; 0x1a
    575c:	29 8f       	std	Y+25, r18	; 0x19
  }

  // If we get here, there's no data available or recv failed
  return -1;

}
    575e:	df 91       	pop	r29
    5760:	cf 91       	pop	r28
    5762:	08 95       	ret

00005764 <_ZN11EthernetUDP4peekEv>:

int EthernetUDP::peek()
{
    5764:	cf 93       	push	r28
    5766:	df 93       	push	r29
    5768:	1f 92       	push	r1
    576a:	cd b7       	in	r28, 0x3d	; 61
    576c:	de b7       	in	r29, 0x3e	; 62
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
    576e:	fc 01       	movw	r30, r24
    5770:	21 8d       	ldd	r18, Z+25	; 0x19
    5772:	32 8d       	ldd	r19, Z+26	; 0x1a
    5774:	23 2b       	or	r18, r19
    5776:	41 f0       	breq	.+16     	; 0x5788 <_ZN11EthernetUDP4peekEv+0x24>
    return -1;
  ::peek(_sock, &b);
    5778:	be 01       	movw	r22, r28
    577a:	6f 5f       	subi	r22, 0xFF	; 255
    577c:	7f 4f       	sbci	r23, 0xFF	; 255
    577e:	84 85       	ldd	r24, Z+12	; 0x0c
    5780:	42 d2       	rcall	.+1156   	; 0x5c06 <_Z4peekhPh>
  return b;
    5782:	89 81       	ldd	r24, Y+1	; 0x01
    5784:	90 e0       	ldi	r25, 0x00	; 0
    5786:	02 c0       	rjmp	.+4      	; 0x578c <_ZN11EthernetUDP4peekEv+0x28>
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
    return -1;
    5788:	8f ef       	ldi	r24, 0xFF	; 255
    578a:	9f ef       	ldi	r25, 0xFF	; 255
  ::peek(_sock, &b);
  return b;
}
    578c:	0f 90       	pop	r0
    578e:	df 91       	pop	r29
    5790:	cf 91       	pop	r28
    5792:	08 95       	ret

00005794 <_ZN11EthernetUDP5beginEj>:

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
    5794:	ef 92       	push	r14
    5796:	ff 92       	push	r15
    5798:	1f 93       	push	r17
    579a:	cf 93       	push	r28
    579c:	df 93       	push	r29
  if (_sock != MAX_SOCK_NUM)
    579e:	fc 01       	movw	r30, r24
    57a0:	24 85       	ldd	r18, Z+12	; 0x0c
    57a2:	28 30       	cpi	r18, 0x08	; 8
    57a4:	11 f0       	breq	.+4      	; 0x57aa <_ZN11EthernetUDP5beginEj+0x16>
    return 0;
    57a6:	80 e0       	ldi	r24, 0x00	; 0
    57a8:	20 c0       	rjmp	.+64     	; 0x57ea <_ZN11EthernetUDP5beginEj+0x56>
    57aa:	7b 01       	movw	r14, r22
    57ac:	ec 01       	movw	r28, r24
    57ae:	10 e0       	ldi	r17, 0x00	; 0
    57b0:	61 2f       	mov	r22, r17
    57b2:	62 95       	swap	r22
    57b4:	66 0f       	add	r22, r22
    57b6:	60 7e       	andi	r22, 0xE0	; 224
    57b8:	68 5f       	subi	r22, 0xF8	; 248
    57ba:	83 e0       	ldi	r24, 0x03	; 3
    57bc:	90 e0       	ldi	r25, 0x00	; 0
    57be:	1b d3       	rcall	.+1590   	; 0x5df6 <_ZN10W5500Class4readEjh>

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
    57c0:	81 11       	cpse	r24, r1
    57c2:	02 c0       	rjmp	.+4      	; 0x57c8 <_ZN11EthernetUDP5beginEj+0x34>
      _sock = i;
    57c4:	1c 87       	std	Y+12, r17	; 0x0c
    57c6:	05 c0       	rjmp	.+10     	; 0x57d2 <_ZN11EthernetUDP5beginEj+0x3e>
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
    57c8:	88 31       	cpi	r24, 0x18	; 24
    57ca:	e1 f3       	breq	.-8      	; 0x57c4 <_ZN11EthernetUDP5beginEj+0x30>
    57cc:	1f 5f       	subi	r17, 0xFF	; 255
/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    57ce:	18 30       	cpi	r17, 0x08	; 8
    57d0:	79 f7       	brne	.-34     	; 0x57b0 <_ZN11EthernetUDP5beginEj+0x1c>
      _sock = i;
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
    57d2:	8c 85       	ldd	r24, Y+12	; 0x0c
    57d4:	88 30       	cpi	r24, 0x08	; 8
    57d6:	39 f3       	breq	.-50     	; 0x57a6 <_ZN11EthernetUDP5beginEj+0x12>
    return 0;

  _port = port;
    57d8:	fe 86       	std	Y+14, r15	; 0x0e
    57da:	ed 86       	std	Y+13, r14	; 0x0d
  _remaining = 0;
    57dc:	1a 8e       	std	Y+26, r1	; 0x1a
    57de:	19 8e       	std	Y+25, r1	; 0x19
  socket(_sock, SnMR::UDP, _port, 0);
    57e0:	20 e0       	ldi	r18, 0x00	; 0
    57e2:	a7 01       	movw	r20, r14
    57e4:	62 e0       	ldi	r22, 0x02	; 2
    57e6:	1b d1       	rcall	.+566    	; 0x5a1e <_Z6sockethhjh>

  return 1;
    57e8:	81 e0       	ldi	r24, 0x01	; 1
}
    57ea:	df 91       	pop	r29
    57ec:	cf 91       	pop	r28
    57ee:	1f 91       	pop	r17
    57f0:	ff 90       	pop	r15
    57f2:	ef 90       	pop	r14
    57f4:	08 95       	ret

000057f6 <_ZN11EthernetUDP11parsePacketEv>:
  _offset += bytes_written;
  return bytes_written;
}

int EthernetUDP::parsePacket()
{
    57f6:	0f 93       	push	r16
    57f8:	1f 93       	push	r17
    57fa:	cf 93       	push	r28
    57fc:	df 93       	push	r29
    57fe:	cd b7       	in	r28, 0x3d	; 61
    5800:	de b7       	in	r29, 0x3e	; 62
    5802:	28 97       	sbiw	r28, 0x08	; 8
    5804:	0f b6       	in	r0, 0x3f	; 63
    5806:	f8 94       	cli
    5808:	de bf       	out	0x3e, r29	; 62
    580a:	0f be       	out	0x3f, r0	; 63
    580c:	cd bf       	out	0x3d, r28	; 61
    580e:	8c 01       	movw	r16, r24
  // discard any remaining bytes in the last packet
  flush();
    5810:	dc 01       	movw	r26, r24
    5812:	ed 91       	ld	r30, X+
    5814:	fc 91       	ld	r31, X
    5816:	06 80       	ldd	r0, Z+6	; 0x06
    5818:	f7 81       	ldd	r31, Z+7	; 0x07
    581a:	e0 2d       	mov	r30, r0
    581c:	09 95       	icall

  if (w5500.getRXReceivedSize(_sock) > 0)
    581e:	f8 01       	movw	r30, r16
    5820:	64 85       	ldd	r22, Z+12	; 0x0c
    5822:	8f e6       	ldi	r24, 0x6F	; 111
    5824:	9c e0       	ldi	r25, 0x0C	; 12
    5826:	77 d3       	rcall	.+1774   	; 0x5f16 <_ZN10W5500Class17getRXReceivedSizeEh>
    5828:	89 2b       	or	r24, r25
    582a:	39 f1       	breq	.+78     	; 0x587a <_ZN11EthernetUDP11parsePacketEv+0x84>
  {
    //HACK - hand-parse the UDP packet using TCP recv method
    uint8_t tmpBuf[8];
    int ret =0; 
    //read 8 header bytes and get IP and port from it
    ret = recv(_sock,tmpBuf,8);
    582c:	48 e0       	ldi	r20, 0x08	; 8
    582e:	50 e0       	ldi	r21, 0x00	; 0
    5830:	be 01       	movw	r22, r28
    5832:	6f 5f       	subi	r22, 0xFF	; 255
    5834:	7f 4f       	sbci	r23, 0xFF	; 255
    5836:	d8 01       	movw	r26, r16
    5838:	1c 96       	adiw	r26, 0x0c	; 12
    583a:	8c 91       	ld	r24, X
    583c:	a3 d1       	rcall	.+838    	; 0x5b84 <_Z4recvhPhi>
    if (ret > 0)
    583e:	18 16       	cp	r1, r24
    5840:	19 06       	cpc	r1, r25
    5842:	ec f4       	brge	.+58     	; 0x587e <_ZN11EthernetUDP11parsePacketEv+0x88>
    {
      _remoteIP = tmpBuf;
    5844:	be 01       	movw	r22, r28
    5846:	6f 5f       	subi	r22, 0xFF	; 255
    5848:	7f 4f       	sbci	r23, 0xFF	; 255
    584a:	c8 01       	movw	r24, r16
    584c:	0f 96       	adiw	r24, 0x0f	; 15
    584e:	0e 94 1d 39 	call	0x723a	; 0x723a <_ZN9IPAddressaSEPKh>
      _remotePort = tmpBuf[4];
      _remotePort = (_remotePort << 8) + tmpBuf[5];
    5852:	8d 81       	ldd	r24, Y+5	; 0x05
    5854:	90 e0       	ldi	r25, 0x00	; 0
    5856:	98 2f       	mov	r25, r24
    5858:	88 27       	eor	r24, r24
    585a:	2e 81       	ldd	r18, Y+6	; 0x06
    585c:	82 0f       	add	r24, r18
    585e:	91 1d       	adc	r25, r1
    5860:	f8 01       	movw	r30, r16
    5862:	96 8b       	std	Z+22, r25	; 0x16
    5864:	85 8b       	std	Z+21, r24	; 0x15
      _remaining = tmpBuf[6];
      _remaining = (_remaining << 8) + tmpBuf[7];
    5866:	8f 81       	ldd	r24, Y+7	; 0x07
    5868:	90 e0       	ldi	r25, 0x00	; 0
    586a:	98 2f       	mov	r25, r24
    586c:	88 27       	eor	r24, r24
    586e:	28 85       	ldd	r18, Y+8	; 0x08
    5870:	82 0f       	add	r24, r18
    5872:	91 1d       	adc	r25, r1
    5874:	92 8f       	std	Z+26, r25	; 0x1a
    5876:	81 8f       	std	Z+25, r24	; 0x19
    5878:	02 c0       	rjmp	.+4      	; 0x587e <_ZN11EthernetUDP11parsePacketEv+0x88>
      ret = _remaining;
    }
    return ret;
  }
  // There aren't any packets available
  return 0;
    587a:	80 e0       	ldi	r24, 0x00	; 0
    587c:	90 e0       	ldi	r25, 0x00	; 0
}
    587e:	28 96       	adiw	r28, 0x08	; 8
    5880:	0f b6       	in	r0, 0x3f	; 63
    5882:	f8 94       	cli
    5884:	de bf       	out	0x3e, r29	; 62
    5886:	0f be       	out	0x3f, r0	; 63
    5888:	cd bf       	out	0x3d, r28	; 61
    588a:	df 91       	pop	r29
    588c:	cf 91       	pop	r28
    588e:	1f 91       	pop	r17
    5890:	0f 91       	pop	r16
    5892:	08 95       	ret

00005894 <_ZN11EthernetUDPC1Ev>:
#include "Ethernet2.h"
#include "Udp.h"
#include "Dns.h"

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}
    5894:	fc 01       	movw	r30, r24
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    5896:	13 82       	std	Z+3, r1	; 0x03
    5898:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    589a:	88 ee       	ldi	r24, 0xE8	; 232
    589c:	93 e0       	ldi	r25, 0x03	; 3
    589e:	a0 e0       	ldi	r26, 0x00	; 0
    58a0:	b0 e0       	ldi	r27, 0x00	; 0
    58a2:	84 83       	std	Z+4, r24	; 0x04
    58a4:	95 83       	std	Z+5, r25	; 0x05
    58a6:	a6 83       	std	Z+6, r26	; 0x06
    58a8:	b7 83       	std	Z+7, r27	; 0x07
    58aa:	8e e0       	ldi	r24, 0x0E	; 14
    58ac:	9a e0       	ldi	r25, 0x0A	; 10
    58ae:	91 83       	std	Z+1, r25	; 0x01
    58b0:	80 83       	st	Z, r24
    58b2:	88 e0       	ldi	r24, 0x08	; 8
    58b4:	84 87       	std	Z+12, r24	; 0x0c
    58b6:	cf 01       	movw	r24, r30
    58b8:	0f 96       	adiw	r24, 0x0f	; 15
    58ba:	0c 94 07 39 	jmp	0x720e	; 0x720e <_ZN9IPAddressC1Ev>

000058be <_ZN11EthernetUDP11beginPacketEPKcj>:
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

int EthernetUDP::beginPacket(const char *host, uint16_t port)
{
    58be:	cf 92       	push	r12
    58c0:	df 92       	push	r13
    58c2:	ef 92       	push	r14
    58c4:	ff 92       	push	r15
    58c6:	0f 93       	push	r16
    58c8:	1f 93       	push	r17
    58ca:	cf 93       	push	r28
    58cc:	df 93       	push	r29
    58ce:	cd b7       	in	r28, 0x3d	; 61
    58d0:	de b7       	in	r29, 0x3e	; 62
    58d2:	af 97       	sbiw	r28, 0x2f	; 47
    58d4:	0f b6       	in	r0, 0x3f	; 63
    58d6:	f8 94       	cli
    58d8:	de bf       	out	0x3e, r29	; 62
    58da:	0f be       	out	0x3f, r0	; 63
    58dc:	cd bf       	out	0x3d, r28	; 61
    58de:	8c 01       	movw	r16, r24
    58e0:	6b 01       	movw	r12, r22
    58e2:	7a 01       	movw	r14, r20
#ifndef DNSClient_h
#define DNSClient_h

#include <EthernetUdp2.h>

class DNSClient
    58e4:	ce 01       	movw	r24, r28
    58e6:	01 96       	adiw	r24, 0x01	; 1
    58e8:	0e 94 07 39 	call	0x720e	; 0x720e <_ZN9IPAddressC1Ev>
    58ec:	ce 01       	movw	r24, r28
    58ee:	09 96       	adiw	r24, 0x09	; 9
    58f0:	d1 df       	rcall	.-94     	; 0x5894 <_ZN11EthernetUDPC1Ev>
  // Look up the host first
  int ret = 0;
  DNSClient dns;
  IPAddress remote_addr;
    58f2:	ce 01       	movw	r24, r28
    58f4:	8a 96       	adiw	r24, 0x2a	; 42
    58f6:	0e 94 07 39 	call	0x720e	; 0x720e <_ZN9IPAddressC1Ev>

  dns.begin(Ethernet.dnsServerIP());
    58fa:	65 e3       	ldi	r22, 0x35	; 53
    58fc:	7c e0       	ldi	r23, 0x0C	; 12
    58fe:	ce 01       	movw	r24, r28
    5900:	84 96       	adiw	r24, 0x24	; 36
    5902:	63 dc       	rcall	.-1850   	; 0x51ca <_ZN13EthernetClass11dnsServerIPEv>
    5904:	be 01       	movw	r22, r28
    5906:	6c 5d       	subi	r22, 0xDC	; 220
    5908:	7f 4f       	sbci	r23, 0xFF	; 255
    590a:	ce 01       	movw	r24, r28
    590c:	01 96       	adiw	r24, 0x01	; 1
    590e:	28 d9       	rcall	.-3504   	; 0x4b60 <_ZN9DNSClient5beginERK9IPAddress>
  ret = dns.getHostByName(host, remote_addr);
    5910:	ae 01       	movw	r20, r28
    5912:	46 5d       	subi	r20, 0xD6	; 214
    5914:	5f 4f       	sbci	r21, 0xFF	; 255
    5916:	b6 01       	movw	r22, r12
    5918:	ce 01       	movw	r24, r28
    591a:	01 96       	adiw	r24, 0x01	; 1
    591c:	7b db       	rcall	.-2314   	; 0x5014 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>
  if (ret == 1) {
    591e:	81 30       	cpi	r24, 0x01	; 1
    5920:	91 05       	cpc	r25, r1
    5922:	c1 f4       	brne	.+48     	; 0x5954 <_ZN11EthernetUDP11beginPacketEPKcj+0x96>
    return beginPacket(remote_addr, port);
    5924:	d8 01       	movw	r26, r16
    5926:	ed 91       	ld	r30, X+
    5928:	fc 91       	ld	r31, X
    592a:	04 88       	ldd	r0, Z+20	; 0x14
    592c:	f5 89       	ldd	r31, Z+21	; 0x15
    592e:	e0 2d       	mov	r30, r0
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    5930:	80 e7       	ldi	r24, 0x70	; 112
    5932:	9a e0       	ldi	r25, 0x0A	; 10
    5934:	9d a3       	std	Y+37, r25	; 0x25
    5936:	8c a3       	std	Y+36, r24	; 0x24
    5938:	8c a5       	ldd	r24, Y+44	; 0x2c
    593a:	9d a5       	ldd	r25, Y+45	; 0x2d
    593c:	ae a5       	ldd	r26, Y+46	; 0x2e
    593e:	bf a5       	ldd	r27, Y+47	; 0x2f
    5940:	8e a3       	std	Y+38, r24	; 0x26
    5942:	9f a3       	std	Y+39, r25	; 0x27
    5944:	a8 a7       	std	Y+40, r26	; 0x28
    5946:	b9 a7       	std	Y+41, r27	; 0x29
    5948:	a7 01       	movw	r20, r14
    594a:	be 01       	movw	r22, r28
    594c:	6c 5d       	subi	r22, 0xDC	; 220
    594e:	7f 4f       	sbci	r23, 0xFF	; 255
    5950:	c8 01       	movw	r24, r16
    5952:	09 95       	icall
  } else {
    return ret;
  }
}
    5954:	af 96       	adiw	r28, 0x2f	; 47
    5956:	0f b6       	in	r0, 0x3f	; 63
    5958:	f8 94       	cli
    595a:	de bf       	out	0x3e, r29	; 62
    595c:	0f be       	out	0x3f, r0	; 63
    595e:	cd bf       	out	0x3d, r28	; 61
    5960:	df 91       	pop	r29
    5962:	cf 91       	pop	r28
    5964:	1f 91       	pop	r17
    5966:	0f 91       	pop	r16
    5968:	ff 90       	pop	r15
    596a:	ef 90       	pop	r14
    596c:	df 90       	pop	r13
    596e:	cf 90       	pop	r12
    5970:	08 95       	ret

00005972 <_GLOBAL__sub_I__ZN11EthernetUDPC2Ev>:

  while (_remaining)
  {
    read();
  }
}
    5972:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    5974:	00 e0       	ldi	r16, 0x00	; 0
    5976:	20 e0       	ldi	r18, 0x00	; 0
    5978:	40 e0       	ldi	r20, 0x00	; 0
    597a:	60 e0       	ldi	r22, 0x00	; 0
    597c:	84 e6       	ldi	r24, 0x64	; 100
    597e:	9c e0       	ldi	r25, 0x0C	; 12
    5980:	0e 94 11 39 	call	0x7222	; 0x7222 <_ZN9IPAddressC1Ehhhh>
    5984:	0f 91       	pop	r16
    5986:	08 95       	ret

00005988 <_ZN10W5500Class11writeSnDIPREhPh>:
    }
  }

  w5500.writeSnIR(s, SnIR::SEND_OK);
  return ret;
}
    5988:	ab 01       	movw	r20, r22
    598a:	82 95       	swap	r24
    598c:	88 0f       	add	r24, r24
    598e:	80 7e       	andi	r24, 0xE0	; 224
    5990:	6c e0       	ldi	r22, 0x0C	; 12
    5992:	68 0f       	add	r22, r24
    5994:	24 e0       	ldi	r18, 0x04	; 4
    5996:	30 e0       	ldi	r19, 0x00	; 0
    5998:	8c e0       	ldi	r24, 0x0C	; 12
    599a:	90 e0       	ldi	r25, 0x00	; 0
    599c:	00 c2       	rjmp	.+1024   	; 0x5d9e <_ZN10W5500Class5writeEjhPKhj>

0000599e <_ZN10W5500Class6readSnEhj>:
    599e:	9b 01       	movw	r18, r22
    59a0:	82 95       	swap	r24
    59a2:	88 0f       	add	r24, r24
    59a4:	80 7e       	andi	r24, 0xE0	; 224
    59a6:	68 e0       	ldi	r22, 0x08	; 8
    59a8:	68 0f       	add	r22, r24
    59aa:	c9 01       	movw	r24, r18
    59ac:	24 c2       	rjmp	.+1096   	; 0x5df6 <_ZN10W5500Class4readEjh>

000059ae <_ZN10W5500Class8readSnIREh>:
    59ae:	62 e0       	ldi	r22, 0x02	; 2
    59b0:	70 e0       	ldi	r23, 0x00	; 0
    59b2:	f5 cf       	rjmp	.-22     	; 0x599e <_ZN10W5500Class6readSnEhj>

000059b4 <_ZN10W5500Class7writeSnEhjh>:
    59b4:	9b 01       	movw	r18, r22
    59b6:	82 95       	swap	r24
    59b8:	88 0f       	add	r24, r24
    59ba:	80 7e       	andi	r24, 0xE0	; 224
    59bc:	6c e0       	ldi	r22, 0x0C	; 12
    59be:	68 0f       	add	r22, r24
    59c0:	c9 01       	movw	r24, r18
    59c2:	cf c1       	rjmp	.+926    	; 0x5d62 <_ZN10W5500Class5writeEjhh>

000059c4 <_ZN10W5500Class11writeSnPORTEhj>:
    59c4:	cf 93       	push	r28
    59c6:	df 93       	push	r29
    59c8:	c8 2f       	mov	r28, r24
    59ca:	d6 2f       	mov	r29, r22
    59cc:	47 2f       	mov	r20, r23
    59ce:	64 e0       	ldi	r22, 0x04	; 4
    59d0:	70 e0       	ldi	r23, 0x00	; 0
    59d2:	f0 df       	rcall	.-32     	; 0x59b4 <_ZN10W5500Class7writeSnEhjh>
    59d4:	4d 2f       	mov	r20, r29
    59d6:	65 e0       	ldi	r22, 0x05	; 5
    59d8:	70 e0       	ldi	r23, 0x00	; 0
    59da:	8c 2f       	mov	r24, r28
    59dc:	df 91       	pop	r29
    59de:	cf 91       	pop	r28
    59e0:	e9 cf       	rjmp	.-46     	; 0x59b4 <_ZN10W5500Class7writeSnEhjh>

000059e2 <_ZN10W5500Class9writeSnIREhh>:
    59e2:	46 2f       	mov	r20, r22
    59e4:	62 e0       	ldi	r22, 0x02	; 2
    59e6:	70 e0       	ldi	r23, 0x00	; 0
    59e8:	e5 cf       	rjmp	.-54     	; 0x59b4 <_ZN10W5500Class7writeSnEhjh>

000059ea <_ZN10W5500Class12writeSnDPORTEhj>:
    59ea:	cf 93       	push	r28
    59ec:	df 93       	push	r29
    59ee:	c8 2f       	mov	r28, r24
    59f0:	d6 2f       	mov	r29, r22
    59f2:	47 2f       	mov	r20, r23
    59f4:	60 e1       	ldi	r22, 0x10	; 16
    59f6:	70 e0       	ldi	r23, 0x00	; 0
    59f8:	dd df       	rcall	.-70     	; 0x59b4 <_ZN10W5500Class7writeSnEhjh>
    59fa:	4d 2f       	mov	r20, r29
    59fc:	61 e1       	ldi	r22, 0x11	; 17
    59fe:	70 e0       	ldi	r23, 0x00	; 0
    5a00:	8c 2f       	mov	r24, r28
    5a02:	df 91       	pop	r29
    5a04:	cf 91       	pop	r28
    5a06:	d6 cf       	rjmp	.-84     	; 0x59b4 <_ZN10W5500Class7writeSnEhjh>

00005a08 <_Z5closeh>:
    5a08:	cf 93       	push	r28
    5a0a:	c8 2f       	mov	r28, r24
    5a0c:	40 e1       	ldi	r20, 0x10	; 16
    5a0e:	68 2f       	mov	r22, r24
    5a10:	8f e6       	ldi	r24, 0x6F	; 111
    5a12:	9c e0       	ldi	r25, 0x0C	; 12
    5a14:	70 d3       	rcall	.+1760   	; 0x60f6 <_ZN10W5500Class9execCmdSnEh7SockCMD>
    5a16:	6f ef       	ldi	r22, 0xFF	; 255
    5a18:	8c 2f       	mov	r24, r28
    5a1a:	cf 91       	pop	r28
    5a1c:	e2 cf       	rjmp	.-60     	; 0x59e2 <_ZN10W5500Class9writeSnIREhh>

00005a1e <_Z6sockethhjh>:
    5a1e:	ff 92       	push	r15
    5a20:	0f 93       	push	r16
    5a22:	1f 93       	push	r17
    5a24:	cf 93       	push	r28
    5a26:	df 93       	push	r29
    5a28:	9f ef       	ldi	r25, 0xFF	; 255
    5a2a:	96 0f       	add	r25, r22
    5a2c:	95 30       	cpi	r25, 0x05	; 5
    5a2e:	18 f5       	brcc	.+70     	; 0x5a76 <_Z6sockethhjh+0x58>
    5a30:	d2 2f       	mov	r29, r18
    5a32:	8a 01       	movw	r16, r20
    5a34:	f6 2e       	mov	r15, r22
    5a36:	c8 2f       	mov	r28, r24
    5a38:	e7 df       	rcall	.-50     	; 0x5a08 <_Z5closeh>
    5a3a:	4f 2d       	mov	r20, r15
    5a3c:	4d 2b       	or	r20, r29
    5a3e:	60 e0       	ldi	r22, 0x00	; 0
    5a40:	70 e0       	ldi	r23, 0x00	; 0
    5a42:	8c 2f       	mov	r24, r28
    5a44:	b7 df       	rcall	.-146    	; 0x59b4 <_ZN10W5500Class7writeSnEhjh>
    5a46:	01 15       	cp	r16, r1
    5a48:	11 05       	cpc	r17, r1
    5a4a:	11 f0       	breq	.+4      	; 0x5a50 <_Z6sockethhjh+0x32>
    5a4c:	b8 01       	movw	r22, r16
    5a4e:	0a c0       	rjmp	.+20     	; 0x5a64 <_Z6sockethhjh+0x46>
    5a50:	60 91 6a 0c 	lds	r22, 0x0C6A	; 0x800c6a <_ZL10local_port>
    5a54:	70 91 6b 0c 	lds	r23, 0x0C6B	; 0x800c6b <_ZL10local_port+0x1>
    5a58:	6f 5f       	subi	r22, 0xFF	; 255
    5a5a:	7f 4f       	sbci	r23, 0xFF	; 255
    5a5c:	70 93 6b 0c 	sts	0x0C6B, r23	; 0x800c6b <_ZL10local_port+0x1>
    5a60:	60 93 6a 0c 	sts	0x0C6A, r22	; 0x800c6a <_ZL10local_port>
    5a64:	8c 2f       	mov	r24, r28
    5a66:	ae df       	rcall	.-164    	; 0x59c4 <_ZN10W5500Class11writeSnPORTEhj>
    5a68:	41 e0       	ldi	r20, 0x01	; 1
    5a6a:	6c 2f       	mov	r22, r28
    5a6c:	8f e6       	ldi	r24, 0x6F	; 111
    5a6e:	9c e0       	ldi	r25, 0x0C	; 12
    5a70:	42 d3       	rcall	.+1668   	; 0x60f6 <_ZN10W5500Class9execCmdSnEh7SockCMD>
    5a72:	81 e0       	ldi	r24, 0x01	; 1
    5a74:	01 c0       	rjmp	.+2      	; 0x5a78 <_Z6sockethhjh+0x5a>
    5a76:	80 e0       	ldi	r24, 0x00	; 0
    5a78:	df 91       	pop	r29
    5a7a:	cf 91       	pop	r28
    5a7c:	1f 91       	pop	r17
    5a7e:	0f 91       	pop	r16
    5a80:	ff 90       	pop	r15
    5a82:	08 95       	ret

00005a84 <_Z7connecthPhj>:
    5a84:	0f 93       	push	r16
    5a86:	1f 93       	push	r17
    5a88:	cf 93       	push	r28
    5a8a:	fb 01       	movw	r30, r22
    5a8c:	90 81       	ld	r25, Z
    5a8e:	9f 3f       	cpi	r25, 0xFF	; 255
    5a90:	51 f4       	brne	.+20     	; 0x5aa6 <_Z7connecthPhj+0x22>
    5a92:	91 81       	ldd	r25, Z+1	; 0x01
    5a94:	9f 3f       	cpi	r25, 0xFF	; 255
    5a96:	91 f4       	brne	.+36     	; 0x5abc <_Z7connecthPhj+0x38>
    5a98:	92 81       	ldd	r25, Z+2	; 0x02
    5a9a:	9f 3f       	cpi	r25, 0xFF	; 255
    5a9c:	79 f4       	brne	.+30     	; 0x5abc <_Z7connecthPhj+0x38>
    5a9e:	93 81       	ldd	r25, Z+3	; 0x03
    5aa0:	9f 3f       	cpi	r25, 0xFF	; 255
    5aa2:	61 f4       	brne	.+24     	; 0x5abc <_Z7connecthPhj+0x38>
    5aa4:	1c c0       	rjmp	.+56     	; 0x5ade <_Z7connecthPhj+0x5a>
    5aa6:	91 11       	cpse	r25, r1
    5aa8:	09 c0       	rjmp	.+18     	; 0x5abc <_Z7connecthPhj+0x38>
    5aaa:	91 81       	ldd	r25, Z+1	; 0x01
    5aac:	91 11       	cpse	r25, r1
    5aae:	06 c0       	rjmp	.+12     	; 0x5abc <_Z7connecthPhj+0x38>
    5ab0:	92 81       	ldd	r25, Z+2	; 0x02
    5ab2:	91 11       	cpse	r25, r1
    5ab4:	03 c0       	rjmp	.+6      	; 0x5abc <_Z7connecthPhj+0x38>
    5ab6:	93 81       	ldd	r25, Z+3	; 0x03
    5ab8:	99 23       	and	r25, r25
    5aba:	91 f0       	breq	.+36     	; 0x5ae0 <_Z7connecthPhj+0x5c>
    5abc:	41 15       	cp	r20, r1
    5abe:	51 05       	cpc	r21, r1
    5ac0:	71 f0       	breq	.+28     	; 0x5ade <_Z7connecthPhj+0x5a>
    5ac2:	8a 01       	movw	r16, r20
    5ac4:	bf 01       	movw	r22, r30
    5ac6:	c8 2f       	mov	r28, r24
    5ac8:	5f df       	rcall	.-322    	; 0x5988 <_ZN10W5500Class11writeSnDIPREhPh>
    5aca:	b8 01       	movw	r22, r16
    5acc:	8c 2f       	mov	r24, r28
    5ace:	8d df       	rcall	.-230    	; 0x59ea <_ZN10W5500Class12writeSnDPORTEhj>
    5ad0:	44 e0       	ldi	r20, 0x04	; 4
    5ad2:	6c 2f       	mov	r22, r28
    5ad4:	8f e6       	ldi	r24, 0x6F	; 111
    5ad6:	9c e0       	ldi	r25, 0x0C	; 12
    5ad8:	0e d3       	rcall	.+1564   	; 0x60f6 <_ZN10W5500Class9execCmdSnEh7SockCMD>
    5ada:	91 e0       	ldi	r25, 0x01	; 1
    5adc:	01 c0       	rjmp	.+2      	; 0x5ae0 <_Z7connecthPhj+0x5c>
    5ade:	90 e0       	ldi	r25, 0x00	; 0
    5ae0:	89 2f       	mov	r24, r25
    5ae2:	cf 91       	pop	r28
    5ae4:	1f 91       	pop	r17
    5ae6:	0f 91       	pop	r16
    5ae8:	08 95       	ret

00005aea <_Z10disconnecth>:
    5aea:	48 e0       	ldi	r20, 0x08	; 8
    5aec:	68 2f       	mov	r22, r24
    5aee:	8f e6       	ldi	r24, 0x6F	; 111
    5af0:	9c e0       	ldi	r25, 0x0C	; 12
    5af2:	01 c3       	rjmp	.+1538   	; 0x60f6 <_ZN10W5500Class9execCmdSnEh7SockCMD>

00005af4 <_Z4sendhPKhj>:
    5af4:	cf 92       	push	r12
    5af6:	df 92       	push	r13
    5af8:	ef 92       	push	r14
    5afa:	ff 92       	push	r15
    5afc:	0f 93       	push	r16
    5afe:	1f 93       	push	r17
    5b00:	cf 93       	push	r28
    5b02:	c8 2f       	mov	r28, r24
    5b04:	7b 01       	movw	r14, r22
    5b06:	8a 01       	movw	r16, r20
    5b08:	41 30       	cpi	r20, 0x01	; 1
    5b0a:	58 40       	sbci	r21, 0x08	; 8
    5b0c:	10 f0       	brcs	.+4      	; 0x5b12 <_Z4sendhPKhj+0x1e>
    5b0e:	00 e0       	ldi	r16, 0x00	; 0
    5b10:	18 e0       	ldi	r17, 0x08	; 8
    5b12:	6c 2f       	mov	r22, r28
    5b14:	8f e6       	ldi	r24, 0x6F	; 111
    5b16:	9c e0       	ldi	r25, 0x0C	; 12
    5b18:	cd d1       	rcall	.+922    	; 0x5eb4 <_ZN10W5500Class13getTXFreeSizeEh>
    5b1a:	6c 01       	movw	r12, r24
    5b1c:	63 e0       	ldi	r22, 0x03	; 3
    5b1e:	70 e0       	ldi	r23, 0x00	; 0
    5b20:	8c 2f       	mov	r24, r28
    5b22:	3d df       	rcall	.-390    	; 0x599e <_ZN10W5500Class6readSnEhj>
    5b24:	87 31       	cpi	r24, 0x17	; 23
    5b26:	11 f0       	breq	.+4      	; 0x5b2c <_Z4sendhPKhj+0x38>
    5b28:	8c 31       	cpi	r24, 0x1C	; 28
    5b2a:	21 f4       	brne	.+8      	; 0x5b34 <_Z4sendhPKhj+0x40>
    5b2c:	c0 16       	cp	r12, r16
    5b2e:	d1 06       	cpc	r13, r17
    5b30:	80 f3       	brcs	.-32     	; 0x5b12 <_Z4sendhPKhj+0x1e>
    5b32:	02 c0       	rjmp	.+4      	; 0x5b38 <_Z4sendhPKhj+0x44>
    5b34:	00 e0       	ldi	r16, 0x00	; 0
    5b36:	10 e0       	ldi	r17, 0x00	; 0
    5b38:	98 01       	movw	r18, r16
    5b3a:	a7 01       	movw	r20, r14
    5b3c:	6c 2f       	mov	r22, r28
    5b3e:	8f e6       	ldi	r24, 0x6F	; 111
    5b40:	9c e0       	ldi	r25, 0x0C	; 12
    5b42:	3d d2       	rcall	.+1146   	; 0x5fbe <_ZN10W5500Class20send_data_processingEhPKhj>
    5b44:	40 e2       	ldi	r20, 0x20	; 32
    5b46:	6c 2f       	mov	r22, r28
    5b48:	8f e6       	ldi	r24, 0x6F	; 111
    5b4a:	9c e0       	ldi	r25, 0x0C	; 12
    5b4c:	d4 d2       	rcall	.+1448   	; 0x60f6 <_ZN10W5500Class9execCmdSnEh7SockCMD>
    5b4e:	8c 2f       	mov	r24, r28
    5b50:	2e df       	rcall	.-420    	; 0x59ae <_ZN10W5500Class8readSnIREh>
    5b52:	84 fd       	sbrc	r24, 4
    5b54:	0b c0       	rjmp	.+22     	; 0x5b6c <_Z4sendhPKhj+0x78>
    5b56:	63 e0       	ldi	r22, 0x03	; 3
    5b58:	70 e0       	ldi	r23, 0x00	; 0
    5b5a:	8c 2f       	mov	r24, r28
    5b5c:	20 df       	rcall	.-448    	; 0x599e <_ZN10W5500Class6readSnEhj>
    5b5e:	81 11       	cpse	r24, r1
    5b60:	f6 cf       	rjmp	.-20     	; 0x5b4e <_Z4sendhPKhj+0x5a>
    5b62:	8c 2f       	mov	r24, r28
    5b64:	51 df       	rcall	.-350    	; 0x5a08 <_Z5closeh>
    5b66:	80 e0       	ldi	r24, 0x00	; 0
    5b68:	90 e0       	ldi	r25, 0x00	; 0
    5b6a:	04 c0       	rjmp	.+8      	; 0x5b74 <_Z4sendhPKhj+0x80>
    5b6c:	60 e1       	ldi	r22, 0x10	; 16
    5b6e:	8c 2f       	mov	r24, r28
    5b70:	38 df       	rcall	.-400    	; 0x59e2 <_ZN10W5500Class9writeSnIREhh>
    5b72:	c8 01       	movw	r24, r16
    5b74:	cf 91       	pop	r28
    5b76:	1f 91       	pop	r17
    5b78:	0f 91       	pop	r16
    5b7a:	ff 90       	pop	r15
    5b7c:	ef 90       	pop	r14
    5b7e:	df 90       	pop	r13
    5b80:	cf 90       	pop	r12
    5b82:	08 95       	ret

00005b84 <_Z4recvhPhi>:
    5b84:	cf 92       	push	r12
    5b86:	df 92       	push	r13
    5b88:	ef 92       	push	r14
    5b8a:	ff 92       	push	r15
    5b8c:	0f 93       	push	r16
    5b8e:	1f 93       	push	r17
    5b90:	cf 93       	push	r28
    5b92:	df 93       	push	r29
    5b94:	18 2f       	mov	r17, r24
    5b96:	6b 01       	movw	r12, r22
    5b98:	7a 01       	movw	r14, r20
    5b9a:	68 2f       	mov	r22, r24
    5b9c:	8f e6       	ldi	r24, 0x6F	; 111
    5b9e:	9c e0       	ldi	r25, 0x0C	; 12
    5ba0:	ba d1       	rcall	.+884    	; 0x5f16 <_ZN10W5500Class17getRXReceivedSizeEh>
    5ba2:	ec 01       	movw	r28, r24
    5ba4:	00 97       	sbiw	r24, 0x00	; 0
    5ba6:	91 f4       	brne	.+36     	; 0x5bcc <_Z4recvhPhi+0x48>
    5ba8:	63 e0       	ldi	r22, 0x03	; 3
    5baa:	70 e0       	ldi	r23, 0x00	; 0
    5bac:	81 2f       	mov	r24, r17
    5bae:	f7 de       	rcall	.-530    	; 0x599e <_ZN10W5500Class6readSnEhj>
    5bb0:	84 31       	cpi	r24, 0x14	; 20
    5bb2:	f9 f0       	breq	.+62     	; 0x5bf2 <_Z4recvhPhi+0x6e>
    5bb4:	88 23       	and	r24, r24
    5bb6:	e9 f0       	breq	.+58     	; 0x5bf2 <_Z4recvhPhi+0x6e>
    5bb8:	c1 e0       	ldi	r28, 0x01	; 1
    5bba:	d0 e0       	ldi	r29, 0x00	; 0
    5bbc:	8c 31       	cpi	r24, 0x1C	; 28
    5bbe:	11 f4       	brne	.+4      	; 0x5bc4 <_Z4recvhPhi+0x40>
    5bc0:	c0 e0       	ldi	r28, 0x00	; 0
    5bc2:	d0 e0       	ldi	r29, 0x00	; 0
    5bc4:	d1 95       	neg	r29
    5bc6:	c1 95       	neg	r28
    5bc8:	d1 09       	sbc	r29, r1
    5bca:	13 c0       	rjmp	.+38     	; 0x5bf2 <_Z4recvhPhi+0x6e>
    5bcc:	e8 16       	cp	r14, r24
    5bce:	f9 06       	cpc	r15, r25
    5bd0:	0c f4       	brge	.+2      	; 0x5bd4 <_Z4recvhPhi+0x50>
    5bd2:	e7 01       	movw	r28, r14
    5bd4:	1c 16       	cp	r1, r28
    5bd6:	1d 06       	cpc	r1, r29
    5bd8:	64 f4       	brge	.+24     	; 0x5bf2 <_Z4recvhPhi+0x6e>
    5bda:	00 e0       	ldi	r16, 0x00	; 0
    5bdc:	9e 01       	movw	r18, r28
    5bde:	a6 01       	movw	r20, r12
    5be0:	61 2f       	mov	r22, r17
    5be2:	8f e6       	ldi	r24, 0x6F	; 111
    5be4:	9c e0       	ldi	r25, 0x0C	; 12
    5be6:	3a d2       	rcall	.+1140   	; 0x605c <_ZN10W5500Class20recv_data_processingEhPhjh>
    5be8:	40 e4       	ldi	r20, 0x40	; 64
    5bea:	61 2f       	mov	r22, r17
    5bec:	8f e6       	ldi	r24, 0x6F	; 111
    5bee:	9c e0       	ldi	r25, 0x0C	; 12
    5bf0:	82 d2       	rcall	.+1284   	; 0x60f6 <_ZN10W5500Class9execCmdSnEh7SockCMD>
    5bf2:	ce 01       	movw	r24, r28
    5bf4:	df 91       	pop	r29
    5bf6:	cf 91       	pop	r28
    5bf8:	1f 91       	pop	r17
    5bfa:	0f 91       	pop	r16
    5bfc:	ff 90       	pop	r15
    5bfe:	ef 90       	pop	r14
    5c00:	df 90       	pop	r13
    5c02:	cf 90       	pop	r12
    5c04:	08 95       	ret

00005c06 <_Z4peekhPh>:
    5c06:	0f 93       	push	r16
    5c08:	ab 01       	movw	r20, r22
    5c0a:	01 e0       	ldi	r16, 0x01	; 1
    5c0c:	21 e0       	ldi	r18, 0x01	; 1
    5c0e:	30 e0       	ldi	r19, 0x00	; 0
    5c10:	68 2f       	mov	r22, r24
    5c12:	8f e6       	ldi	r24, 0x6F	; 111
    5c14:	9c e0       	ldi	r25, 0x0C	; 12
    5c16:	22 d2       	rcall	.+1092   	; 0x605c <_ZN10W5500Class20recv_data_processingEhPhjh>
    5c18:	81 e0       	ldi	r24, 0x01	; 1
    5c1a:	90 e0       	ldi	r25, 0x00	; 0
    5c1c:	0f 91       	pop	r16
    5c1e:	08 95       	ret

00005c20 <_Z5flushh>:
    5c20:	08 95       	ret

00005c22 <_Z10bufferDatahjPKhj>:

uint16_t bufferData(SOCKET s, uint16_t offset, const uint8_t* buf, uint16_t len)
{
    5c22:	af 92       	push	r10
    5c24:	bf 92       	push	r11
    5c26:	cf 92       	push	r12
    5c28:	df 92       	push	r13
    5c2a:	ff 92       	push	r15
    5c2c:	0f 93       	push	r16
    5c2e:	1f 93       	push	r17
    5c30:	cf 93       	push	r28
    5c32:	df 93       	push	r29
    5c34:	f8 2e       	mov	r15, r24
    5c36:	6b 01       	movw	r12, r22
    5c38:	5a 01       	movw	r10, r20
    5c3a:	e9 01       	movw	r28, r18
  uint16_t ret =0;
  if (len > w5500.getTXFreeSize(s))
    5c3c:	68 2f       	mov	r22, r24
    5c3e:	8f e6       	ldi	r24, 0x6F	; 111
    5c40:	9c e0       	ldi	r25, 0x0C	; 12
    5c42:	38 d1       	rcall	.+624    	; 0x5eb4 <_ZN10W5500Class13getTXFreeSizeEh>
    5c44:	8c 17       	cp	r24, r28
    5c46:	9d 07       	cpc	r25, r29
    5c48:	28 f4       	brcc	.+10     	; 0x5c54 <_Z10bufferDatahjPKhj+0x32>
  {
    ret = w5500.getTXFreeSize(s); // check size not to exceed MAX size.
    5c4a:	6f 2d       	mov	r22, r15
    5c4c:	8f e6       	ldi	r24, 0x6F	; 111
    5c4e:	9c e0       	ldi	r25, 0x0C	; 12
    5c50:	31 d1       	rcall	.+610    	; 0x5eb4 <_ZN10W5500Class13getTXFreeSizeEh>
    5c52:	ec 01       	movw	r28, r24
  }
  else
  {
    ret = len;
  }
  w5500.send_data_processing_offset(s, offset, buf, ret);
    5c54:	8e 01       	movw	r16, r28
    5c56:	95 01       	movw	r18, r10
    5c58:	a6 01       	movw	r20, r12
    5c5a:	6f 2d       	mov	r22, r15
    5c5c:	8f e6       	ldi	r24, 0x6F	; 111
    5c5e:	9c e0       	ldi	r25, 0x0C	; 12
    5c60:	74 d1       	rcall	.+744    	; 0x5f4a <_ZN10W5500Class27send_data_processing_offsetEhjPKhj>
  return ret;
}
    5c62:	ce 01       	movw	r24, r28
    5c64:	df 91       	pop	r29
    5c66:	cf 91       	pop	r28
    5c68:	1f 91       	pop	r17
    5c6a:	0f 91       	pop	r16
    5c6c:	ff 90       	pop	r15
    5c6e:	df 90       	pop	r13
    5c70:	cf 90       	pop	r12
    5c72:	bf 90       	pop	r11
    5c74:	af 90       	pop	r10
    5c76:	08 95       	ret

00005c78 <_Z8startUDPhPhj>:

int startUDP(SOCKET s, uint8_t* addr, uint16_t port)
{
    5c78:	0f 93       	push	r16
    5c7a:	1f 93       	push	r17
    5c7c:	cf 93       	push	r28
    5c7e:	fb 01       	movw	r30, r22
  if
    5c80:	90 81       	ld	r25, Z
    5c82:	91 11       	cpse	r25, r1
    5c84:	09 c0       	rjmp	.+18     	; 0x5c98 <_Z8startUDPhPhj+0x20>
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
    5c86:	91 81       	ldd	r25, Z+1	; 0x01
    5c88:	91 11       	cpse	r25, r1
    5c8a:	06 c0       	rjmp	.+12     	; 0x5c98 <_Z8startUDPhPhj+0x20>
    5c8c:	92 81       	ldd	r25, Z+2	; 0x02
    5c8e:	91 11       	cpse	r25, r1
    5c90:	03 c0       	rjmp	.+6      	; 0x5c98 <_Z8startUDPhPhj+0x20>
    5c92:	93 81       	ldd	r25, Z+3	; 0x03
    5c94:	99 23       	and	r25, r25
    5c96:	69 f0       	breq	.+26     	; 0x5cb2 <_Z8startUDPhPhj+0x3a>
    5c98:	41 15       	cp	r20, r1
    5c9a:	51 05       	cpc	r21, r1
    5c9c:	51 f0       	breq	.+20     	; 0x5cb2 <_Z8startUDPhPhj+0x3a>
    5c9e:	8a 01       	movw	r16, r20
    5ca0:	bf 01       	movw	r22, r30
    5ca2:	c8 2f       	mov	r28, r24
  {
    return 0;
  }
  else
  {
    w5500.writeSnDIPR(s, addr);
    5ca4:	71 de       	rcall	.-798    	; 0x5988 <_ZN10W5500Class11writeSnDIPREhPh>
    w5500.writeSnDPORT(s, port);
    5ca6:	b8 01       	movw	r22, r16
    5ca8:	8c 2f       	mov	r24, r28
    5caa:	9f de       	rcall	.-706    	; 0x59ea <_ZN10W5500Class12writeSnDPORTEhj>
    return 1;
    5cac:	81 e0       	ldi	r24, 0x01	; 1
    5cae:	90 e0       	ldi	r25, 0x00	; 0
    5cb0:	02 c0       	rjmp	.+4      	; 0x5cb6 <_Z8startUDPhPhj+0x3e>
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
     ((port == 0x00))
    ) 
  {
    return 0;
    5cb2:	80 e0       	ldi	r24, 0x00	; 0
    5cb4:	90 e0       	ldi	r25, 0x00	; 0
  {
    w5500.writeSnDIPR(s, addr);
    w5500.writeSnDPORT(s, port);
    return 1;
  }
}
    5cb6:	cf 91       	pop	r28
    5cb8:	1f 91       	pop	r17
    5cba:	0f 91       	pop	r16
    5cbc:	08 95       	ret

00005cbe <_Z7sendUDPh>:

int sendUDP(SOCKET s)
{
    5cbe:	cf 93       	push	r28
    5cc0:	c8 2f       	mov	r28, r24
  w5500.execCmdSn(s, Sock_SEND);
    5cc2:	40 e2       	ldi	r20, 0x20	; 32
    5cc4:	68 2f       	mov	r22, r24
    5cc6:	8f e6       	ldi	r24, 0x6F	; 111
    5cc8:	9c e0       	ldi	r25, 0x0C	; 12
    5cca:	15 d2       	rcall	.+1066   	; 0x60f6 <_ZN10W5500Class9execCmdSnEh7SockCMD>
		
  /* +2008.01 bj */
  while ( (w5500.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
    5ccc:	8c 2f       	mov	r24, r28
    5cce:	6f de       	rcall	.-802    	; 0x59ae <_ZN10W5500Class8readSnIREh>
    5cd0:	84 fd       	sbrc	r24, 4
    5cd2:	0a c0       	rjmp	.+20     	; 0x5ce8 <_Z7sendUDPh+0x2a>
  {
    if (w5500.readSnIR(s) & SnIR::TIMEOUT)
    5cd4:	8c 2f       	mov	r24, r28
    5cd6:	6b de       	rcall	.-810    	; 0x59ae <_ZN10W5500Class8readSnIREh>
    5cd8:	83 ff       	sbrs	r24, 3
    5cda:	f8 cf       	rjmp	.-16     	; 0x5ccc <_Z7sendUDPh+0xe>
    {
      /* +2008.01 [bj]: clear interrupt */
      w5500.writeSnIR(s, (SnIR::SEND_OK|SnIR::TIMEOUT));
    5cdc:	68 e1       	ldi	r22, 0x18	; 24
    5cde:	8c 2f       	mov	r24, r28
    5ce0:	80 de       	rcall	.-768    	; 0x59e2 <_ZN10W5500Class9writeSnIREhh>
    5ce2:	80 e0       	ldi	r24, 0x00	; 0
      return 0;
    5ce4:	90 e0       	ldi	r25, 0x00	; 0
    5ce6:	05 c0       	rjmp	.+10     	; 0x5cf2 <_Z7sendUDPh+0x34>
    }
  }

  /* +2008.01 bj */	
  w5500.writeSnIR(s, SnIR::SEND_OK);
    5ce8:	60 e1       	ldi	r22, 0x10	; 16
    5cea:	8c 2f       	mov	r24, r28
    5cec:	7a de       	rcall	.-780    	; 0x59e2 <_ZN10W5500Class9writeSnIREhh>
    5cee:	81 e0       	ldi	r24, 0x01	; 1

  /* Sent ok */
  return 1;
    5cf0:	90 e0       	ldi	r25, 0x00	; 0
    5cf2:	cf 91       	pop	r28
}
    5cf4:	08 95       	ret

00005cf6 <_ZN8SPIClass16beginTransactionE11SPISettings>:
    5cf6:	20 91 72 0c 	lds	r18, 0x0C72	; 0x800c72 <_ZN8SPIClass13interruptModeE>
    uint8_t _data = SPI.transfer(0);
    resetSS();
    SPI.endTransaction();

    return _data;
}
    5cfa:	22 23       	and	r18, r18
    5cfc:	99 f0       	breq	.+38     	; 0x5d24 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    5cfe:	4f b7       	in	r20, 0x3f	; 63
    5d00:	f8 94       	cli
    5d02:	20 91 72 0c 	lds	r18, 0x0C72	; 0x800c72 <_ZN8SPIClass13interruptModeE>
    5d06:	21 30       	cpi	r18, 0x01	; 1
    5d08:	59 f4       	brne	.+22     	; 0x5d20 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
    5d0a:	2d b3       	in	r18, 0x1d	; 29
    5d0c:	20 93 70 0c 	sts	0x0C70, r18	; 0x800c70 <_ZN8SPIClass13interruptSaveE>
    5d10:	3d b3       	in	r19, 0x1d	; 29
    5d12:	20 91 71 0c 	lds	r18, 0x0C71	; 0x800c71 <_ZN8SPIClass13interruptMaskE>
    5d16:	20 95       	com	r18
    5d18:	23 23       	and	r18, r19
    5d1a:	2d bb       	out	0x1d, r18	; 29
    5d1c:	4f bf       	out	0x3f, r20	; 63
    5d1e:	02 c0       	rjmp	.+4      	; 0x5d24 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    5d20:	40 93 70 0c 	sts	0x0C70, r20	; 0x800c70 <_ZN8SPIClass13interruptSaveE>
    5d24:	8c bd       	out	0x2c, r24	; 44
    5d26:	9d bd       	out	0x2d, r25	; 45
    5d28:	08 95       	ret

00005d2a <_ZN8SPIClass8transferEh>:
    5d2a:	8e bd       	out	0x2e, r24	; 46
    5d2c:	00 00       	nop
    5d2e:	0d b4       	in	r0, 0x2d	; 45
    5d30:	07 fe       	sbrs	r0, 7
    5d32:	fd cf       	rjmp	.-6      	; 0x5d2e <_ZN8SPIClass8transferEh+0x4>
    5d34:	8e b5       	in	r24, 0x2e	; 46
    5d36:	08 95       	ret

00005d38 <_ZN8SPIClass14endTransactionEv>:
    5d38:	80 91 72 0c 	lds	r24, 0x0C72	; 0x800c72 <_ZN8SPIClass13interruptModeE>
    5d3c:	88 23       	and	r24, r24
    5d3e:	61 f0       	breq	.+24     	; 0x5d58 <_ZN8SPIClass14endTransactionEv+0x20>
    5d40:	9f b7       	in	r25, 0x3f	; 63
    5d42:	f8 94       	cli
    5d44:	20 91 72 0c 	lds	r18, 0x0C72	; 0x800c72 <_ZN8SPIClass13interruptModeE>
    5d48:	80 91 70 0c 	lds	r24, 0x0C70	; 0x800c70 <_ZN8SPIClass13interruptSaveE>
    5d4c:	21 30       	cpi	r18, 0x01	; 1
    5d4e:	19 f4       	brne	.+6      	; 0x5d56 <_ZN8SPIClass14endTransactionEv+0x1e>
    5d50:	8d bb       	out	0x1d, r24	; 29
    5d52:	9f bf       	out	0x3f, r25	; 63
    5d54:	08 95       	ret
    5d56:	8f bf       	out	0x3f, r24	; 63
    5d58:	08 95       	ret

00005d5a <_ZN10W5500Class5setSSEv>:
    5d5a:	44 98       	cbi	0x08, 4	; 8
    5d5c:	08 95       	ret

00005d5e <_ZN10W5500Class7resetSSEv>:
    5d5e:	44 9a       	sbi	0x08, 4	; 8
    5d60:	08 95       	ret

00005d62 <_ZN10W5500Class5writeEjhh>:
    5d62:	0f 93       	push	r16
    5d64:	1f 93       	push	r17
    5d66:	cf 93       	push	r28
    5d68:	df 93       	push	r29
    5d6a:	18 2f       	mov	r17, r24
    5d6c:	09 2f       	mov	r16, r25
    5d6e:	d6 2f       	mov	r29, r22
    5d70:	c4 2f       	mov	r28, r20
    5d72:	80 91 6d 0c 	lds	r24, 0x0C6D	; 0x800c6d <wiznet_SPI_settings>
    5d76:	90 91 6e 0c 	lds	r25, 0x0C6E	; 0x800c6e <wiznet_SPI_settings+0x1>
    5d7a:	bd df       	rcall	.-134    	; 0x5cf6 <_ZN8SPIClass16beginTransactionE11SPISettings>
    5d7c:	ee df       	rcall	.-36     	; 0x5d5a <_ZN10W5500Class5setSSEv>
    5d7e:	80 2f       	mov	r24, r16
    5d80:	d4 df       	rcall	.-88     	; 0x5d2a <_ZN8SPIClass8transferEh>
    5d82:	81 2f       	mov	r24, r17
    5d84:	d2 df       	rcall	.-92     	; 0x5d2a <_ZN8SPIClass8transferEh>
    5d86:	8d 2f       	mov	r24, r29
    5d88:	d0 df       	rcall	.-96     	; 0x5d2a <_ZN8SPIClass8transferEh>
    5d8a:	8c 2f       	mov	r24, r28
    5d8c:	ce df       	rcall	.-100    	; 0x5d2a <_ZN8SPIClass8transferEh>
    5d8e:	e7 df       	rcall	.-50     	; 0x5d5e <_ZN10W5500Class7resetSSEv>
    5d90:	d3 df       	rcall	.-90     	; 0x5d38 <_ZN8SPIClass14endTransactionEv>
    5d92:	81 e0       	ldi	r24, 0x01	; 1
    5d94:	df 91       	pop	r29
    5d96:	cf 91       	pop	r28
    5d98:	1f 91       	pop	r17
    5d9a:	0f 91       	pop	r16
    5d9c:	08 95       	ret

00005d9e <_ZN10W5500Class5writeEjhPKhj>:
    5d9e:	df 92       	push	r13
    5da0:	ef 92       	push	r14
    5da2:	ff 92       	push	r15
    5da4:	0f 93       	push	r16
    5da6:	1f 93       	push	r17
    5da8:	cf 93       	push	r28
    5daa:	df 93       	push	r29
    5dac:	d8 2f       	mov	r29, r24
    5dae:	d9 2e       	mov	r13, r25
    5db0:	c6 2f       	mov	r28, r22
    5db2:	7a 01       	movw	r14, r20
    5db4:	89 01       	movw	r16, r18
    5db6:	80 91 6d 0c 	lds	r24, 0x0C6D	; 0x800c6d <wiznet_SPI_settings>
    5dba:	90 91 6e 0c 	lds	r25, 0x0C6E	; 0x800c6e <wiznet_SPI_settings+0x1>
    5dbe:	9b df       	rcall	.-202    	; 0x5cf6 <_ZN8SPIClass16beginTransactionE11SPISettings>
    5dc0:	cc df       	rcall	.-104    	; 0x5d5a <_ZN10W5500Class5setSSEv>
    5dc2:	8d 2d       	mov	r24, r13
    5dc4:	b2 df       	rcall	.-156    	; 0x5d2a <_ZN8SPIClass8transferEh>
    5dc6:	8d 2f       	mov	r24, r29
    5dc8:	b0 df       	rcall	.-160    	; 0x5d2a <_ZN8SPIClass8transferEh>
    5dca:	8c 2f       	mov	r24, r28
    5dcc:	ae df       	rcall	.-164    	; 0x5d2a <_ZN8SPIClass8transferEh>
    5dce:	e7 01       	movw	r28, r14
    5dd0:	e0 0e       	add	r14, r16
    5dd2:	f1 1e       	adc	r15, r17
    5dd4:	ce 15       	cp	r28, r14
    5dd6:	df 05       	cpc	r29, r15
    5dd8:	19 f0       	breq	.+6      	; 0x5de0 <_ZN10W5500Class5writeEjhPKhj+0x42>
    5dda:	89 91       	ld	r24, Y+
    5ddc:	a6 df       	rcall	.-180    	; 0x5d2a <_ZN8SPIClass8transferEh>
    5dde:	fa cf       	rjmp	.-12     	; 0x5dd4 <_ZN10W5500Class5writeEjhPKhj+0x36>
    5de0:	be df       	rcall	.-132    	; 0x5d5e <_ZN10W5500Class7resetSSEv>
    5de2:	aa df       	rcall	.-172    	; 0x5d38 <_ZN8SPIClass14endTransactionEv>
    5de4:	c8 01       	movw	r24, r16
    5de6:	df 91       	pop	r29
    5de8:	cf 91       	pop	r28
    5dea:	1f 91       	pop	r17
    5dec:	0f 91       	pop	r16
    5dee:	ff 90       	pop	r15
    5df0:	ef 90       	pop	r14
    5df2:	df 90       	pop	r13
    5df4:	08 95       	ret

00005df6 <_ZN10W5500Class4readEjh>:
    5df6:	1f 93       	push	r17
    5df8:	cf 93       	push	r28
    5dfa:	df 93       	push	r29
    5dfc:	d8 2f       	mov	r29, r24
    5dfe:	19 2f       	mov	r17, r25
    5e00:	c6 2f       	mov	r28, r22
    5e02:	80 91 6d 0c 	lds	r24, 0x0C6D	; 0x800c6d <wiznet_SPI_settings>
    5e06:	90 91 6e 0c 	lds	r25, 0x0C6E	; 0x800c6e <wiznet_SPI_settings+0x1>
    5e0a:	75 df       	rcall	.-278    	; 0x5cf6 <_ZN8SPIClass16beginTransactionE11SPISettings>
    5e0c:	a6 df       	rcall	.-180    	; 0x5d5a <_ZN10W5500Class5setSSEv>
    5e0e:	81 2f       	mov	r24, r17
    5e10:	8c df       	rcall	.-232    	; 0x5d2a <_ZN8SPIClass8transferEh>
    5e12:	8d 2f       	mov	r24, r29
    5e14:	8a df       	rcall	.-236    	; 0x5d2a <_ZN8SPIClass8transferEh>
    5e16:	8c 2f       	mov	r24, r28
    5e18:	88 df       	rcall	.-240    	; 0x5d2a <_ZN8SPIClass8transferEh>
    5e1a:	80 e0       	ldi	r24, 0x00	; 0
    5e1c:	86 df       	rcall	.-244    	; 0x5d2a <_ZN8SPIClass8transferEh>
    5e1e:	c8 2f       	mov	r28, r24
    5e20:	9e df       	rcall	.-196    	; 0x5d5e <_ZN10W5500Class7resetSSEv>
    5e22:	8a df       	rcall	.-236    	; 0x5d38 <_ZN8SPIClass14endTransactionEv>
    5e24:	8c 2f       	mov	r24, r28
    5e26:	df 91       	pop	r29
    5e28:	cf 91       	pop	r28
    5e2a:	1f 91       	pop	r17
    5e2c:	08 95       	ret

00005e2e <_ZN10W5500Class4initEh>:
    5e2e:	cf 93       	push	r28
    5e30:	df 93       	push	r29
    5e32:	60 93 6c 0c 	sts	0x0C6C, r22	; 0x800c6c <SPI_CS>
    5e36:	68 ee       	ldi	r22, 0xE8	; 232
    5e38:	73 e0       	ldi	r23, 0x03	; 3
    5e3a:	80 e0       	ldi	r24, 0x00	; 0
    5e3c:	90 e0       	ldi	r25, 0x00	; 0
    5e3e:	0e 94 c8 3a 	call	0x7590	; 0x7590 <delay>
    5e42:	3c 9a       	sbi	0x07, 4	; 7
    5e44:	10 d4       	rcall	.+2080   	; 0x6666 <_ZN8SPIClass5beginEv>
    5e46:	60 e0       	ldi	r22, 0x00	; 0
    5e48:	80 e0       	ldi	r24, 0x00	; 0
    5e4a:	90 e0       	ldi	r25, 0x00	; 0
    5e4c:	d4 df       	rcall	.-88     	; 0x5df6 <_ZN10W5500Class4readEjh>
    5e4e:	48 2f       	mov	r20, r24
    5e50:	40 68       	ori	r20, 0x80	; 128
    5e52:	64 e0       	ldi	r22, 0x04	; 4
    5e54:	80 e0       	ldi	r24, 0x00	; 0
    5e56:	90 e0       	ldi	r25, 0x00	; 0
    5e58:	84 df       	rcall	.-248    	; 0x5d62 <_ZN10W5500Class5writeEjhh>
    5e5a:	c0 e0       	ldi	r28, 0x00	; 0
    5e5c:	dc 2f       	mov	r29, r28
    5e5e:	d2 95       	swap	r29
    5e60:	dd 0f       	add	r29, r29
    5e62:	d0 7e       	andi	r29, 0xE0	; 224
    5e64:	d4 5f       	subi	r29, 0xF4	; 244
    5e66:	42 e0       	ldi	r20, 0x02	; 2
    5e68:	6d 2f       	mov	r22, r29
    5e6a:	8e e1       	ldi	r24, 0x1E	; 30
    5e6c:	90 e0       	ldi	r25, 0x00	; 0
    5e6e:	79 df       	rcall	.-270    	; 0x5d62 <_ZN10W5500Class5writeEjhh>
    5e70:	42 e0       	ldi	r20, 0x02	; 2
    5e72:	6d 2f       	mov	r22, r29
    5e74:	8f e1       	ldi	r24, 0x1F	; 31
    5e76:	90 e0       	ldi	r25, 0x00	; 0
    5e78:	74 df       	rcall	.-280    	; 0x5d62 <_ZN10W5500Class5writeEjhh>
    5e7a:	cf 5f       	subi	r28, 0xFF	; 255
    5e7c:	c8 30       	cpi	r28, 0x08	; 8
    5e7e:	71 f7       	brne	.-36     	; 0x5e5c <_ZN10W5500Class4initEh+0x2e>
    5e80:	df 91       	pop	r29
    5e82:	cf 91       	pop	r28
    5e84:	08 95       	ret

00005e86 <_ZN10W5500Class12readSnTX_FSREh>:
    5e86:	1f 93       	push	r17
    5e88:	cf 93       	push	r28
    5e8a:	df 93       	push	r29
    5e8c:	18 2f       	mov	r17, r24
    5e8e:	60 e2       	ldi	r22, 0x20	; 32
    5e90:	70 e0       	ldi	r23, 0x00	; 0
    5e92:	85 dd       	rcall	.-1270   	; 0x599e <_ZN10W5500Class6readSnEhj>
    5e94:	c8 2f       	mov	r28, r24
    5e96:	d0 e0       	ldi	r29, 0x00	; 0
    5e98:	dc 2f       	mov	r29, r28
    5e9a:	cc 27       	eor	r28, r28
    5e9c:	61 e2       	ldi	r22, 0x21	; 33
    5e9e:	70 e0       	ldi	r23, 0x00	; 0
    5ea0:	81 2f       	mov	r24, r17
    5ea2:	7d dd       	rcall	.-1286   	; 0x599e <_ZN10W5500Class6readSnEhj>
    5ea4:	9e 01       	movw	r18, r28
    5ea6:	28 0f       	add	r18, r24
    5ea8:	31 1d       	adc	r19, r1
    5eaa:	c9 01       	movw	r24, r18
    5eac:	df 91       	pop	r29
    5eae:	cf 91       	pop	r28
    5eb0:	1f 91       	pop	r17
    5eb2:	08 95       	ret

00005eb4 <_ZN10W5500Class13getTXFreeSizeEh>:
    5eb4:	ff 92       	push	r15
    5eb6:	0f 93       	push	r16
    5eb8:	1f 93       	push	r17
    5eba:	cf 93       	push	r28
    5ebc:	df 93       	push	r29
    5ebe:	f6 2e       	mov	r15, r22
    5ec0:	c0 e0       	ldi	r28, 0x00	; 0
    5ec2:	d0 e0       	ldi	r29, 0x00	; 0
    5ec4:	8f 2d       	mov	r24, r15
    5ec6:	df df       	rcall	.-66     	; 0x5e86 <_ZN10W5500Class12readSnTX_FSREh>
    5ec8:	8c 01       	movw	r16, r24
    5eca:	89 2b       	or	r24, r25
    5ecc:	19 f0       	breq	.+6      	; 0x5ed4 <_ZN10W5500Class13getTXFreeSizeEh+0x20>
    5ece:	8f 2d       	mov	r24, r15
    5ed0:	da df       	rcall	.-76     	; 0x5e86 <_ZN10W5500Class12readSnTX_FSREh>
    5ed2:	ec 01       	movw	r28, r24
    5ed4:	c0 17       	cp	r28, r16
    5ed6:	d1 07       	cpc	r29, r17
    5ed8:	a9 f7       	brne	.-22     	; 0x5ec4 <_ZN10W5500Class13getTXFreeSizeEh+0x10>
    5eda:	ce 01       	movw	r24, r28
    5edc:	df 91       	pop	r29
    5ede:	cf 91       	pop	r28
    5ee0:	1f 91       	pop	r17
    5ee2:	0f 91       	pop	r16
    5ee4:	ff 90       	pop	r15
    5ee6:	08 95       	ret

00005ee8 <_ZN10W5500Class12readSnRX_RSREh>:
    5ee8:	1f 93       	push	r17
    5eea:	cf 93       	push	r28
    5eec:	df 93       	push	r29
    5eee:	18 2f       	mov	r17, r24
    5ef0:	66 e2       	ldi	r22, 0x26	; 38
    5ef2:	70 e0       	ldi	r23, 0x00	; 0
    5ef4:	54 dd       	rcall	.-1368   	; 0x599e <_ZN10W5500Class6readSnEhj>
    5ef6:	c8 2f       	mov	r28, r24
    5ef8:	d0 e0       	ldi	r29, 0x00	; 0
    5efa:	dc 2f       	mov	r29, r28
    5efc:	cc 27       	eor	r28, r28
    5efe:	67 e2       	ldi	r22, 0x27	; 39
    5f00:	70 e0       	ldi	r23, 0x00	; 0
    5f02:	81 2f       	mov	r24, r17
    5f04:	4c dd       	rcall	.-1384   	; 0x599e <_ZN10W5500Class6readSnEhj>
    5f06:	9e 01       	movw	r18, r28
    5f08:	28 0f       	add	r18, r24
    5f0a:	31 1d       	adc	r19, r1
    5f0c:	c9 01       	movw	r24, r18
    5f0e:	df 91       	pop	r29
    5f10:	cf 91       	pop	r28
    5f12:	1f 91       	pop	r17
    5f14:	08 95       	ret

00005f16 <_ZN10W5500Class17getRXReceivedSizeEh>:
    5f16:	ff 92       	push	r15
    5f18:	0f 93       	push	r16
    5f1a:	1f 93       	push	r17
    5f1c:	cf 93       	push	r28
    5f1e:	df 93       	push	r29
    5f20:	f6 2e       	mov	r15, r22
    5f22:	c0 e0       	ldi	r28, 0x00	; 0
    5f24:	d0 e0       	ldi	r29, 0x00	; 0
    5f26:	8f 2d       	mov	r24, r15
    5f28:	df df       	rcall	.-66     	; 0x5ee8 <_ZN10W5500Class12readSnRX_RSREh>
    5f2a:	8c 01       	movw	r16, r24
    5f2c:	89 2b       	or	r24, r25
    5f2e:	19 f0       	breq	.+6      	; 0x5f36 <_ZN10W5500Class17getRXReceivedSizeEh+0x20>
    5f30:	8f 2d       	mov	r24, r15
    5f32:	da df       	rcall	.-76     	; 0x5ee8 <_ZN10W5500Class12readSnRX_RSREh>
    5f34:	ec 01       	movw	r28, r24
    5f36:	c0 17       	cp	r28, r16
    5f38:	d1 07       	cpc	r29, r17
    5f3a:	a9 f7       	brne	.-22     	; 0x5f26 <_ZN10W5500Class17getRXReceivedSizeEh+0x10>
    5f3c:	ce 01       	movw	r24, r28
    5f3e:	df 91       	pop	r29
    5f40:	cf 91       	pop	r28
    5f42:	1f 91       	pop	r17
    5f44:	0f 91       	pop	r16
    5f46:	ff 90       	pop	r15
    5f48:	08 95       	ret

00005f4a <_ZN10W5500Class27send_data_processing_offsetEhjPKhj>:
    5f4a:	af 92       	push	r10
    5f4c:	bf 92       	push	r11
    5f4e:	df 92       	push	r13
    5f50:	ef 92       	push	r14
    5f52:	ff 92       	push	r15
    5f54:	0f 93       	push	r16
    5f56:	1f 93       	push	r17
    5f58:	cf 93       	push	r28
    5f5a:	df 93       	push	r29
    5f5c:	d6 2e       	mov	r13, r22
    5f5e:	7a 01       	movw	r14, r20
    5f60:	59 01       	movw	r10, r18
    5f62:	64 e2       	ldi	r22, 0x24	; 36
    5f64:	70 e0       	ldi	r23, 0x00	; 0
    5f66:	8d 2d       	mov	r24, r13
    5f68:	1a dd       	rcall	.-1484   	; 0x599e <_ZN10W5500Class6readSnEhj>
    5f6a:	c8 2f       	mov	r28, r24
    5f6c:	65 e2       	ldi	r22, 0x25	; 37
    5f6e:	70 e0       	ldi	r23, 0x00	; 0
    5f70:	8d 2d       	mov	r24, r13
    5f72:	15 dd       	rcall	.-1494   	; 0x599e <_ZN10W5500Class6readSnEhj>
    5f74:	d0 e0       	ldi	r29, 0x00	; 0
    5f76:	dc 2f       	mov	r29, r28
    5f78:	cc 27       	eor	r28, r28
    5f7a:	e8 0e       	add	r14, r24
    5f7c:	f1 1c       	adc	r15, r1
    5f7e:	ce 0d       	add	r28, r14
    5f80:	df 1d       	adc	r29, r15
    5f82:	6d 2d       	mov	r22, r13
    5f84:	62 95       	swap	r22
    5f86:	66 0f       	add	r22, r22
    5f88:	60 7e       	andi	r22, 0xE0	; 224
    5f8a:	6c 5e       	subi	r22, 0xEC	; 236
    5f8c:	98 01       	movw	r18, r16
    5f8e:	a5 01       	movw	r20, r10
    5f90:	ce 01       	movw	r24, r28
    5f92:	05 df       	rcall	.-502    	; 0x5d9e <_ZN10W5500Class5writeEjhPKhj>
    5f94:	c0 0f       	add	r28, r16
    5f96:	d1 1f       	adc	r29, r17
    5f98:	4d 2f       	mov	r20, r29
    5f9a:	64 e2       	ldi	r22, 0x24	; 36
    5f9c:	70 e0       	ldi	r23, 0x00	; 0
    5f9e:	8d 2d       	mov	r24, r13
    5fa0:	09 dd       	rcall	.-1518   	; 0x59b4 <_ZN10W5500Class7writeSnEhjh>
    5fa2:	4c 2f       	mov	r20, r28
    5fa4:	65 e2       	ldi	r22, 0x25	; 37
    5fa6:	70 e0       	ldi	r23, 0x00	; 0
    5fa8:	8d 2d       	mov	r24, r13
    5faa:	df 91       	pop	r29
    5fac:	cf 91       	pop	r28
    5fae:	1f 91       	pop	r17
    5fb0:	0f 91       	pop	r16
    5fb2:	ff 90       	pop	r15
    5fb4:	ef 90       	pop	r14
    5fb6:	df 90       	pop	r13
    5fb8:	bf 90       	pop	r11
    5fba:	af 90       	pop	r10
    5fbc:	fb cc       	rjmp	.-1546   	; 0x59b4 <_ZN10W5500Class7writeSnEhjh>

00005fbe <_ZN10W5500Class20send_data_processingEhPKhj>:
    5fbe:	0f 93       	push	r16
    5fc0:	1f 93       	push	r17
    5fc2:	89 01       	movw	r16, r18
    5fc4:	9a 01       	movw	r18, r20
    5fc6:	40 e0       	ldi	r20, 0x00	; 0
    5fc8:	50 e0       	ldi	r21, 0x00	; 0
    5fca:	bf df       	rcall	.-130    	; 0x5f4a <_ZN10W5500Class27send_data_processing_offsetEhjPKhj>
    5fcc:	1f 91       	pop	r17
    5fce:	0f 91       	pop	r16
    5fd0:	08 95       	ret

00005fd2 <_ZN10W5500Class4readEjhPhj>:
    5fd2:	df 92       	push	r13
    5fd4:	ef 92       	push	r14
    5fd6:	ff 92       	push	r15
    5fd8:	0f 93       	push	r16
    5fda:	1f 93       	push	r17
    5fdc:	cf 93       	push	r28
    5fde:	df 93       	push	r29
    5fe0:	d8 2f       	mov	r29, r24
    5fe2:	d9 2e       	mov	r13, r25
    5fe4:	c6 2f       	mov	r28, r22
    5fe6:	7a 01       	movw	r14, r20
    5fe8:	89 01       	movw	r16, r18
    5fea:	80 91 6d 0c 	lds	r24, 0x0C6D	; 0x800c6d <wiznet_SPI_settings>
    5fee:	90 91 6e 0c 	lds	r25, 0x0C6E	; 0x800c6e <wiznet_SPI_settings+0x1>
    5ff2:	81 de       	rcall	.-766    	; 0x5cf6 <_ZN8SPIClass16beginTransactionE11SPISettings>
    5ff4:	b2 de       	rcall	.-668    	; 0x5d5a <_ZN10W5500Class5setSSEv>
    5ff6:	8d 2d       	mov	r24, r13
    5ff8:	98 de       	rcall	.-720    	; 0x5d2a <_ZN8SPIClass8transferEh>
    5ffa:	8d 2f       	mov	r24, r29
    5ffc:	96 de       	rcall	.-724    	; 0x5d2a <_ZN8SPIClass8transferEh>
    5ffe:	8c 2f       	mov	r24, r28
    6000:	94 de       	rcall	.-728    	; 0x5d2a <_ZN8SPIClass8transferEh>
    6002:	e7 01       	movw	r28, r14
    6004:	e0 0e       	add	r14, r16
    6006:	f1 1e       	adc	r15, r17
    6008:	ce 15       	cp	r28, r14
    600a:	df 05       	cpc	r29, r15
    600c:	21 f0       	breq	.+8      	; 0x6016 <_ZN10W5500Class4readEjhPhj+0x44>
    600e:	80 e0       	ldi	r24, 0x00	; 0
    6010:	8c de       	rcall	.-744    	; 0x5d2a <_ZN8SPIClass8transferEh>
    6012:	89 93       	st	Y+, r24
    6014:	f9 cf       	rjmp	.-14     	; 0x6008 <_ZN10W5500Class4readEjhPhj+0x36>
    6016:	a3 de       	rcall	.-698    	; 0x5d5e <_ZN10W5500Class7resetSSEv>
    6018:	8f de       	rcall	.-738    	; 0x5d38 <_ZN8SPIClass14endTransactionEv>
    601a:	c8 01       	movw	r24, r16
    601c:	df 91       	pop	r29
    601e:	cf 91       	pop	r28
    6020:	1f 91       	pop	r17
    6022:	0f 91       	pop	r16
    6024:	ff 90       	pop	r15
    6026:	ef 90       	pop	r14
    6028:	df 90       	pop	r13
    602a:	08 95       	ret

0000602c <_ZN10W5500Class9read_dataEhjPVhj>:
    602c:	0f 93       	push	r16
    602e:	1f 93       	push	r17
    6030:	cf 93       	push	r28
    6032:	df 93       	push	r29
    6034:	00 d0       	rcall	.+0      	; 0x6036 <_ZN10W5500Class9read_dataEhjPVhj+0xa>
    6036:	cd b7       	in	r28, 0x3d	; 61
    6038:	de b7       	in	r29, 0x3e	; 62
    603a:	5a 83       	std	Y+2, r21	; 0x02
    603c:	49 83       	std	Y+1, r20	; 0x01
    603e:	a9 01       	movw	r20, r18
    6040:	98 01       	movw	r18, r16
    6042:	89 81       	ldd	r24, Y+1	; 0x01
    6044:	9a 81       	ldd	r25, Y+2	; 0x02
    6046:	62 95       	swap	r22
    6048:	66 0f       	add	r22, r22
    604a:	60 7e       	andi	r22, 0xE0	; 224
    604c:	68 5e       	subi	r22, 0xE8	; 232
    604e:	0f 90       	pop	r0
    6050:	0f 90       	pop	r0
    6052:	df 91       	pop	r29
    6054:	cf 91       	pop	r28
    6056:	1f 91       	pop	r17
    6058:	0f 91       	pop	r16
    605a:	bb cf       	rjmp	.-138    	; 0x5fd2 <_ZN10W5500Class4readEjhPhj>

0000605c <_ZN10W5500Class20recv_data_processingEhPhjh>:
    605c:	8f 92       	push	r8
    605e:	9f 92       	push	r9
    6060:	af 92       	push	r10
    6062:	bf 92       	push	r11
    6064:	cf 92       	push	r12
    6066:	df 92       	push	r13
    6068:	ef 92       	push	r14
    606a:	ff 92       	push	r15
    606c:	0f 93       	push	r16
    606e:	1f 93       	push	r17
    6070:	cf 93       	push	r28
    6072:	df 93       	push	r29
    6074:	6c 01       	movw	r12, r24
    6076:	96 2e       	mov	r9, r22
    6078:	5a 01       	movw	r10, r20
    607a:	79 01       	movw	r14, r18
    607c:	80 2e       	mov	r8, r16
    607e:	68 e2       	ldi	r22, 0x28	; 40
    6080:	70 e0       	ldi	r23, 0x00	; 0
    6082:	89 2d       	mov	r24, r9
    6084:	8c dc       	rcall	.-1768   	; 0x599e <_ZN10W5500Class6readSnEhj>
    6086:	08 2f       	mov	r16, r24
    6088:	69 e2       	ldi	r22, 0x29	; 41
    608a:	70 e0       	ldi	r23, 0x00	; 0
    608c:	89 2d       	mov	r24, r9
    608e:	87 dc       	rcall	.-1778   	; 0x599e <_ZN10W5500Class6readSnEhj>
    6090:	10 e0       	ldi	r17, 0x00	; 0
    6092:	10 2f       	mov	r17, r16
    6094:	00 27       	eor	r16, r16
    6096:	e8 01       	movw	r28, r16
    6098:	c8 0f       	add	r28, r24
    609a:	d1 1d       	adc	r29, r1
    609c:	87 01       	movw	r16, r14
    609e:	95 01       	movw	r18, r10
    60a0:	ae 01       	movw	r20, r28
    60a2:	69 2d       	mov	r22, r9
    60a4:	c6 01       	movw	r24, r12
    60a6:	c2 df       	rcall	.-124    	; 0x602c <_ZN10W5500Class9read_dataEhjPVhj>
    60a8:	81 10       	cpse	r8, r1
    60aa:	18 c0       	rjmp	.+48     	; 0x60dc <_ZN10W5500Class20recv_data_processingEhPhjh+0x80>
    60ac:	0c 0f       	add	r16, r28
    60ae:	1d 1f       	adc	r17, r29
    60b0:	41 2f       	mov	r20, r17
    60b2:	68 e2       	ldi	r22, 0x28	; 40
    60b4:	70 e0       	ldi	r23, 0x00	; 0
    60b6:	89 2d       	mov	r24, r9
    60b8:	7d dc       	rcall	.-1798   	; 0x59b4 <_ZN10W5500Class7writeSnEhjh>
    60ba:	40 2f       	mov	r20, r16
    60bc:	69 e2       	ldi	r22, 0x29	; 41
    60be:	70 e0       	ldi	r23, 0x00	; 0
    60c0:	89 2d       	mov	r24, r9
    60c2:	df 91       	pop	r29
    60c4:	cf 91       	pop	r28
    60c6:	1f 91       	pop	r17
    60c8:	0f 91       	pop	r16
    60ca:	ff 90       	pop	r15
    60cc:	ef 90       	pop	r14
    60ce:	df 90       	pop	r13
    60d0:	cf 90       	pop	r12
    60d2:	bf 90       	pop	r11
    60d4:	af 90       	pop	r10
    60d6:	9f 90       	pop	r9
    60d8:	8f 90       	pop	r8
    60da:	6c cc       	rjmp	.-1832   	; 0x59b4 <_ZN10W5500Class7writeSnEhjh>
    60dc:	df 91       	pop	r29
    60de:	cf 91       	pop	r28
    60e0:	1f 91       	pop	r17
    60e2:	0f 91       	pop	r16
    60e4:	ff 90       	pop	r15
    60e6:	ef 90       	pop	r14
    60e8:	df 90       	pop	r13
    60ea:	cf 90       	pop	r12
    60ec:	bf 90       	pop	r11
    60ee:	af 90       	pop	r10
    60f0:	9f 90       	pop	r9
    60f2:	8f 90       	pop	r8
    60f4:	08 95       	ret

000060f6 <_ZN10W5500Class9execCmdSnEh7SockCMD>:
    60f6:	cf 93       	push	r28
    60f8:	c6 2f       	mov	r28, r22
    60fa:	61 e0       	ldi	r22, 0x01	; 1
    60fc:	70 e0       	ldi	r23, 0x00	; 0
    60fe:	8c 2f       	mov	r24, r28
    6100:	59 dc       	rcall	.-1870   	; 0x59b4 <_ZN10W5500Class7writeSnEhjh>
    6102:	61 e0       	ldi	r22, 0x01	; 1
    6104:	70 e0       	ldi	r23, 0x00	; 0
    6106:	8c 2f       	mov	r24, r28
    6108:	4a dc       	rcall	.-1900   	; 0x599e <_ZN10W5500Class6readSnEhj>
    610a:	81 11       	cpse	r24, r1
    610c:	fa cf       	rjmp	.-12     	; 0x6102 <_ZN10W5500Class9execCmdSnEh7SockCMD+0xc>
    610e:	cf 91       	pop	r28
    6110:	08 95       	ret

00006112 <_GLOBAL__sub_I_w5500>:
    // Invert the SPI2X bit
    clockDiv ^= 0x1;

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    6112:	ed e6       	ldi	r30, 0x6D	; 109
    6114:	fc e0       	ldi	r31, 0x0C	; 12
    6116:	80 e5       	ldi	r24, 0x50	; 80
    6118:	80 83       	st	Z, r24
    spsr = clockDiv & SPI_2XCLOCK_MASK;
    611a:	81 e0       	ldi	r24, 0x01	; 1
    611c:	81 83       	std	Z+1, r24	; 0x01
    611e:	08 95       	ret

00006120 <_ZN5I2CIOC1Ev>:
      // Remove the values which are not inputs and get the value of the pin
      pinVal = this->read() & _dirMask;
      pinVal = ( pinVal >> pin ) & 0x01; // Get the pin value
   }
   return (pinVal);
}
    6120:	fc 01       	movw	r30, r24
    6122:	12 82       	std	Z+2, r1	; 0x02
    6124:	8f ef       	ldi	r24, 0xFF	; 255
    6126:	81 83       	std	Z+1, r24	; 0x01
    6128:	10 82       	st	Z, r1
    612a:	13 82       	std	Z+3, r1	; 0x03
    612c:	08 95       	ret

0000612e <_ZN5I2CIO8portModeEh>:
    612e:	fc 01       	movw	r30, r24
    6130:	83 81       	ldd	r24, Z+3	; 0x03
    6132:	88 23       	and	r24, r24
    6134:	31 f0       	breq	.+12     	; 0x6142 <_ZN5I2CIO8portModeEh+0x14>
    6136:	61 11       	cpse	r22, r1
    6138:	03 c0       	rjmp	.+6      	; 0x6140 <_ZN5I2CIO8portModeEh+0x12>
    613a:	8f ef       	ldi	r24, 0xFF	; 255
    613c:	81 83       	std	Z+1, r24	; 0x01
    613e:	08 95       	ret
    6140:	11 82       	std	Z+1, r1	; 0x01
    6142:	08 95       	ret

00006144 <_ZN5I2CIO11isAvailableEh>:
    6144:	82 ee       	ldi	r24, 0xE2	; 226
    6146:	9c e0       	ldi	r25, 0x0C	; 12
    6148:	f0 d5       	rcall	.+3040   	; 0x6d2a <_ZN7TwoWire17beginTransmissionEh>
    614a:	82 ee       	ldi	r24, 0xE2	; 226
    614c:	9c e0       	ldi	r25, 0x0C	; 12
    614e:	6e d6       	rcall	.+3292   	; 0x6e2c <_ZN7TwoWire15endTransmissionEv>
    6150:	91 e0       	ldi	r25, 0x01	; 1
    6152:	81 11       	cpse	r24, r1
    6154:	90 e0       	ldi	r25, 0x00	; 0
    6156:	89 2f       	mov	r24, r25
    6158:	08 95       	ret

0000615a <_ZN5I2CIO5beginEh>:
    615a:	cf 93       	push	r28
    615c:	df 93       	push	r29
    615e:	ec 01       	movw	r28, r24
    6160:	6a 83       	std	Y+2, r22	; 0x02
    6162:	82 ee       	ldi	r24, 0xE2	; 226
    6164:	9c e0       	ldi	r25, 0x0C	; 12
    6166:	ce d5       	rcall	.+2972   	; 0x6d04 <_ZN7TwoWire5beginEv>
    6168:	6a 81       	ldd	r22, Y+2	; 0x02
    616a:	ce 01       	movw	r24, r28
    616c:	eb df       	rcall	.-42     	; 0x6144 <_ZN5I2CIO11isAvailableEh>
    616e:	8b 83       	std	Y+3, r24	; 0x03
    6170:	88 23       	and	r24, r24
    6172:	21 f0       	breq	.+8      	; 0x617c <_ZN5I2CIO5beginEh+0x22>
    6174:	82 ee       	ldi	r24, 0xE2	; 226
    6176:	9c e0       	ldi	r25, 0x0C	; 12
    6178:	01 d5       	rcall	.+2562   	; 0x6b7c <_ZN7TwoWire4readEv>
    617a:	88 83       	st	Y, r24
    617c:	8b 81       	ldd	r24, Y+3	; 0x03
    617e:	90 e0       	ldi	r25, 0x00	; 0
    6180:	df 91       	pop	r29
    6182:	cf 91       	pop	r28
    6184:	08 95       	ret

00006186 <_ZN5I2CIO5writeEh>:
}

//
// write
int I2CIO::write ( uint8_t value )
{
    6186:	cf 93       	push	r28
    6188:	df 93       	push	r29
   int status = 0;
   
   if ( _initialised )
    618a:	fc 01       	movw	r30, r24
    618c:	23 81       	ldd	r18, Z+3	; 0x03
    618e:	22 23       	and	r18, r18
    6190:	99 f0       	breq	.+38     	; 0x61b8 <_ZN5I2CIO5writeEh+0x32>
    6192:	ec 01       	movw	r28, r24
   {
      // Only write HIGH the values of the ports that have been initialised as
      // outputs updating the output shadow of the device
      _shadow = ( value & ~(_dirMask) );
    6194:	81 81       	ldd	r24, Z+1	; 0x01
    6196:	80 95       	com	r24
    6198:	68 23       	and	r22, r24
    619a:	60 83       	st	Z, r22
   
      Wire.beginTransmission ( _i2cAddr );
    619c:	62 81       	ldd	r22, Z+2	; 0x02
    619e:	82 ee       	ldi	r24, 0xE2	; 226
    61a0:	9c e0       	ldi	r25, 0x0C	; 12
    61a2:	c3 d5       	rcall	.+2950   	; 0x6d2a <_ZN7TwoWire17beginTransmissionEh>
#if (ARDUINO <  100)
      Wire.send ( _shadow );
#else
      Wire.write ( _shadow );
    61a4:	68 81       	ld	r22, Y
    61a6:	82 ee       	ldi	r24, 0xE2	; 226
    61a8:	9c e0       	ldi	r25, 0x0C	; 12
    61aa:	6e d5       	rcall	.+2780   	; 0x6c88 <_ZN7TwoWire5writeEh>
#endif  
      status = Wire.endTransmission ();
    61ac:	82 ee       	ldi	r24, 0xE2	; 226
    61ae:	9c e0       	ldi	r25, 0x0C	; 12
    61b0:	3d d6       	rcall	.+3194   	; 0x6e2c <_ZN7TwoWire15endTransmissionEv>
    61b2:	28 2f       	mov	r18, r24
    61b4:	30 e0       	ldi	r19, 0x00	; 0
    61b6:	02 c0       	rjmp	.+4      	; 0x61bc <_ZN5I2CIO5writeEh+0x36>

//
// write
int I2CIO::write ( uint8_t value )
{
   int status = 0;
    61b8:	20 e0       	ldi	r18, 0x00	; 0
    61ba:	30 e0       	ldi	r19, 0x00	; 0
#else
      Wire.write ( _shadow );
#endif  
      status = Wire.endTransmission ();
   }
   return ( (status == 0) );
    61bc:	81 e0       	ldi	r24, 0x01	; 1
    61be:	90 e0       	ldi	r25, 0x00	; 0
    61c0:	23 2b       	or	r18, r19
    61c2:	11 f0       	breq	.+4      	; 0x61c8 <_ZN5I2CIO5writeEh+0x42>
    61c4:	80 e0       	ldi	r24, 0x00	; 0
    61c6:	90 e0       	ldi	r25, 0x00	; 0
}
    61c8:	df 91       	pop	r29
    61ca:	cf 91       	pop	r28
    61cc:	08 95       	ret

000061ce <_ZN3LCD15setBacklightPinEh13t_backlighPol>:

// This will 'left justify' text from the cursor
void LCD::noAutoscroll(void) 
{
   _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
   command(LCD_ENTRYMODESET | _displaymode);
    61ce:	08 95       	ret

000061d0 <_ZN3LCD12setBacklightEh>:
    61d0:	08 95       	ret

000061d2 <_ZN3LCD5writeEh>:
    61d2:	dc 01       	movw	r26, r24
    61d4:	ed 91       	ld	r30, X+
    61d6:	fc 91       	ld	r31, X
    61d8:	06 84       	ldd	r0, Z+14	; 0x0e
    61da:	f7 85       	ldd	r31, Z+15	; 0x0f
    61dc:	e0 2d       	mov	r30, r0
    61de:	41 e0       	ldi	r20, 0x01	; 1
    61e0:	09 95       	icall
    61e2:	81 e0       	ldi	r24, 0x01	; 1
    61e4:	90 e0       	ldi	r25, 0x00	; 0
    61e6:	08 95       	ret

000061e8 <_ZN3LCDC1Ev>:
    61e8:	fc 01       	movw	r30, r24
    61ea:	13 82       	std	Z+3, r1	; 0x03
    61ec:	12 82       	std	Z+2, r1	; 0x02
    61ee:	26 e3       	ldi	r18, 0x36	; 54
    61f0:	3a e0       	ldi	r19, 0x0A	; 10
    61f2:	31 83       	std	Z+1, r19	; 0x01
    61f4:	20 83       	st	Z, r18
    61f6:	08 95       	ret

000061f8 <_ZN3LCD9backlightEv>:
    61f8:	dc 01       	movw	r26, r24
    61fa:	ed 91       	ld	r30, X+
    61fc:	fc 91       	ld	r31, X
    61fe:	04 84       	ldd	r0, Z+12	; 0x0c
    6200:	f5 85       	ldd	r31, Z+13	; 0x0d
    6202:	e0 2d       	mov	r30, r0
    6204:	6f ef       	ldi	r22, 0xFF	; 255
    6206:	09 94       	ijmp

00006208 <_ZN3LCD11noBacklightEv>:
    6208:	dc 01       	movw	r26, r24
    620a:	ed 91       	ld	r30, X+
    620c:	fc 91       	ld	r31, X
    620e:	04 84       	ldd	r0, Z+12	; 0x0c
    6210:	f5 85       	ldd	r31, Z+13	; 0x0d
    6212:	e0 2d       	mov	r30, r0
    6214:	60 e0       	ldi	r22, 0x00	; 0
    6216:	09 94       	ijmp

00006218 <_ZN3LCD7commandEh>:
    6218:	dc 01       	movw	r26, r24
    621a:	ed 91       	ld	r30, X+
    621c:	fc 91       	ld	r31, X
    621e:	06 84       	ldd	r0, Z+14	; 0x0e
    6220:	f7 85       	ldd	r31, Z+15	; 0x0f
    6222:	e0 2d       	mov	r30, r0
    6224:	40 e0       	ldi	r20, 0x00	; 0
    6226:	09 94       	ijmp

00006228 <_ZN3LCD5clearEv>:
    6228:	61 e0       	ldi	r22, 0x01	; 1
    622a:	f6 df       	rcall	.-20     	; 0x6218 <_ZN3LCD7commandEh>
    622c:	80 ed       	ldi	r24, 0xD0	; 208
    622e:	97 e0       	ldi	r25, 0x07	; 7
    6230:	0c 94 01 3b 	jmp	0x7602	; 0x7602 <delayMicroseconds>

00006234 <_ZN3LCD9setCursorEhh>:
    6234:	cf 93       	push	r28
    6236:	df 93       	push	r29
    6238:	cd b7       	in	r28, 0x3d	; 61
    623a:	de b7       	in	r29, 0x3e	; 62
    623c:	28 97       	sbiw	r28, 0x08	; 8
    623e:	0f b6       	in	r0, 0x3f	; 63
    6240:	f8 94       	cli
    6242:	de bf       	out	0x3e, r29	; 62
    6244:	0f be       	out	0x3f, r0	; 63
    6246:	cd bf       	out	0x3d, r28	; 61
    6248:	fc 01       	movw	r30, r24
    624a:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <_ZN14EthernetClient8_srcportE+0x89>
    624e:	90 91 f5 01 	lds	r25, 0x01F5	; 0x8001f5 <_ZN14EthernetClient8_srcportE+0x8a>
    6252:	a0 91 f6 01 	lds	r26, 0x01F6	; 0x8001f6 <_ZN14EthernetClient8_srcportE+0x8b>
    6256:	b0 91 f7 01 	lds	r27, 0x01F7	; 0x8001f7 <_ZN14EthernetClient8_srcportE+0x8c>
    625a:	8d 83       	std	Y+5, r24	; 0x05
    625c:	9e 83       	std	Y+6, r25	; 0x06
    625e:	af 83       	std	Y+7, r26	; 0x07
    6260:	b8 87       	std	Y+8, r27	; 0x08
    6262:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <_ZN14EthernetClient8_srcportE+0x8d>
    6266:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <_ZN14EthernetClient8_srcportE+0x8e>
    626a:	a0 91 fa 01 	lds	r26, 0x01FA	; 0x8001fa <_ZN14EthernetClient8_srcportE+0x8f>
    626e:	b0 91 fb 01 	lds	r27, 0x01FB	; 0x8001fb <_ZN14EthernetClient8_srcportE+0x90>
    6272:	89 83       	std	Y+1, r24	; 0x01
    6274:	9a 83       	std	Y+2, r25	; 0x02
    6276:	ab 83       	std	Y+3, r26	; 0x03
    6278:	bc 83       	std	Y+4, r27	; 0x04
    627a:	87 81       	ldd	r24, Z+7	; 0x07
    627c:	48 17       	cp	r20, r24
    627e:	10 f0       	brcs	.+4      	; 0x6284 <_ZN3LCD9setCursorEhh+0x50>
    6280:	4f ef       	ldi	r20, 0xFF	; 255
    6282:	48 0f       	add	r20, r24
    6284:	90 85       	ldd	r25, Z+8	; 0x08
    6286:	50 e0       	ldi	r21, 0x00	; 0
    6288:	de 01       	movw	r26, r28
    628a:	a4 0f       	add	r26, r20
    628c:	b5 1f       	adc	r27, r21
    628e:	90 31       	cpi	r25, 0x10	; 16
    6290:	29 f4       	brne	.+10     	; 0x629c <_ZN3LCD9setCursorEhh+0x68>
    6292:	84 30       	cpi	r24, 0x04	; 4
    6294:	19 f4       	brne	.+6      	; 0x629c <_ZN3LCD9setCursorEhh+0x68>
    6296:	11 96       	adiw	r26, 0x01	; 1
    6298:	9c 91       	ld	r25, X
    629a:	02 c0       	rjmp	.+4      	; 0x62a0 <_ZN3LCD9setCursorEhh+0x6c>
    629c:	15 96       	adiw	r26, 0x05	; 5
    629e:	9c 91       	ld	r25, X
    62a0:	69 0f       	add	r22, r25
    62a2:	60 68       	ori	r22, 0x80	; 128
    62a4:	cf 01       	movw	r24, r30
    62a6:	28 96       	adiw	r28, 0x08	; 8
    62a8:	0f b6       	in	r0, 0x3f	; 63
    62aa:	f8 94       	cli
    62ac:	de bf       	out	0x3e, r29	; 62
    62ae:	0f be       	out	0x3f, r0	; 63
    62b0:	cd bf       	out	0x3d, r28	; 61
    62b2:	df 91       	pop	r29
    62b4:	cf 91       	pop	r28
    62b6:	b0 cf       	rjmp	.-160    	; 0x6218 <_ZN3LCD7commandEh>

000062b8 <_ZN3LCD9noDisplayEv>:
    62b8:	fc 01       	movw	r30, r24
    62ba:	65 81       	ldd	r22, Z+5	; 0x05
    62bc:	6b 7f       	andi	r22, 0xFB	; 251
    62be:	65 83       	std	Z+5, r22	; 0x05
    62c0:	68 60       	ori	r22, 0x08	; 8
    62c2:	aa cf       	rjmp	.-172    	; 0x6218 <_ZN3LCD7commandEh>

000062c4 <_ZN3LCD7displayEv>:
    62c4:	fc 01       	movw	r30, r24
    62c6:	65 81       	ldd	r22, Z+5	; 0x05
    62c8:	26 2f       	mov	r18, r22
    62ca:	24 60       	ori	r18, 0x04	; 4
    62cc:	25 83       	std	Z+5, r18	; 0x05
    62ce:	6c 60       	ori	r22, 0x0C	; 12
    62d0:	a3 cf       	rjmp	.-186    	; 0x6218 <_ZN3LCD7commandEh>

000062d2 <_ZN3LCD5beginEhhh>:
    62d2:	cf 93       	push	r28
    62d4:	df 93       	push	r29
    62d6:	ec 01       	movw	r28, r24
    62d8:	42 30       	cpi	r20, 0x02	; 2
    62da:	18 f0       	brcs	.+6      	; 0x62e2 <_ZN3LCD5beginEhhh+0x10>
    62dc:	8c 81       	ldd	r24, Y+4	; 0x04
    62de:	88 60       	ori	r24, 0x08	; 8
    62e0:	8c 83       	std	Y+4, r24	; 0x04
    62e2:	4f 83       	std	Y+7, r20	; 0x07
    62e4:	68 87       	std	Y+8, r22	; 0x08
    62e6:	22 23       	and	r18, r18
    62e8:	29 f0       	breq	.+10     	; 0x62f4 <_ZN3LCD5beginEhhh+0x22>
    62ea:	41 30       	cpi	r20, 0x01	; 1
    62ec:	19 f4       	brne	.+6      	; 0x62f4 <_ZN3LCD5beginEhhh+0x22>
    62ee:	8c 81       	ldd	r24, Y+4	; 0x04
    62f0:	84 60       	ori	r24, 0x04	; 4
    62f2:	8c 83       	std	Y+4, r24	; 0x04
    62f4:	64 e6       	ldi	r22, 0x64	; 100
    62f6:	70 e0       	ldi	r23, 0x00	; 0
    62f8:	80 e0       	ldi	r24, 0x00	; 0
    62fa:	90 e0       	ldi	r25, 0x00	; 0
    62fc:	0e 94 c8 3a 	call	0x7590	; 0x7590 <delay>
    6300:	6c 81       	ldd	r22, Y+4	; 0x04
    6302:	64 fd       	sbrc	r22, 4
    6304:	31 c0       	rjmp	.+98     	; 0x6368 <_ZN3LCD5beginEhhh+0x96>
    6306:	e8 81       	ld	r30, Y
    6308:	f9 81       	ldd	r31, Y+1	; 0x01
    630a:	06 84       	ldd	r0, Z+14	; 0x0e
    630c:	f7 85       	ldd	r31, Z+15	; 0x0f
    630e:	e0 2d       	mov	r30, r0
    6310:	42 e0       	ldi	r20, 0x02	; 2
    6312:	63 e0       	ldi	r22, 0x03	; 3
    6314:	ce 01       	movw	r24, r28
    6316:	09 95       	icall
    6318:	84 e9       	ldi	r24, 0x94	; 148
    631a:	91 e1       	ldi	r25, 0x11	; 17
    631c:	0e 94 01 3b 	call	0x7602	; 0x7602 <delayMicroseconds>
    6320:	e8 81       	ld	r30, Y
    6322:	f9 81       	ldd	r31, Y+1	; 0x01
    6324:	06 84       	ldd	r0, Z+14	; 0x0e
    6326:	f7 85       	ldd	r31, Z+15	; 0x0f
    6328:	e0 2d       	mov	r30, r0
    632a:	42 e0       	ldi	r20, 0x02	; 2
    632c:	63 e0       	ldi	r22, 0x03	; 3
    632e:	ce 01       	movw	r24, r28
    6330:	09 95       	icall
    6332:	86 e9       	ldi	r24, 0x96	; 150
    6334:	90 e0       	ldi	r25, 0x00	; 0
    6336:	0e 94 01 3b 	call	0x7602	; 0x7602 <delayMicroseconds>
    633a:	e8 81       	ld	r30, Y
    633c:	f9 81       	ldd	r31, Y+1	; 0x01
    633e:	06 84       	ldd	r0, Z+14	; 0x0e
    6340:	f7 85       	ldd	r31, Z+15	; 0x0f
    6342:	e0 2d       	mov	r30, r0
    6344:	42 e0       	ldi	r20, 0x02	; 2
    6346:	63 e0       	ldi	r22, 0x03	; 3
    6348:	ce 01       	movw	r24, r28
    634a:	09 95       	icall
    634c:	86 e9       	ldi	r24, 0x96	; 150
    634e:	90 e0       	ldi	r25, 0x00	; 0
    6350:	0e 94 01 3b 	call	0x7602	; 0x7602 <delayMicroseconds>
    6354:	e8 81       	ld	r30, Y
    6356:	f9 81       	ldd	r31, Y+1	; 0x01
    6358:	06 84       	ldd	r0, Z+14	; 0x0e
    635a:	f7 85       	ldd	r31, Z+15	; 0x0f
    635c:	e0 2d       	mov	r30, r0
    635e:	42 e0       	ldi	r20, 0x02	; 2
    6360:	62 e0       	ldi	r22, 0x02	; 2
    6362:	ce 01       	movw	r24, r28
    6364:	09 95       	icall
    6366:	13 c0       	rjmp	.+38     	; 0x638e <_ZN3LCD5beginEhhh+0xbc>
    6368:	60 62       	ori	r22, 0x20	; 32
    636a:	ce 01       	movw	r24, r28
    636c:	55 df       	rcall	.-342    	; 0x6218 <_ZN3LCD7commandEh>
    636e:	84 e9       	ldi	r24, 0x94	; 148
    6370:	91 e1       	ldi	r25, 0x11	; 17
    6372:	0e 94 01 3b 	call	0x7602	; 0x7602 <delayMicroseconds>
    6376:	6c 81       	ldd	r22, Y+4	; 0x04
    6378:	60 62       	ori	r22, 0x20	; 32
    637a:	ce 01       	movw	r24, r28
    637c:	4d df       	rcall	.-358    	; 0x6218 <_ZN3LCD7commandEh>
    637e:	86 e9       	ldi	r24, 0x96	; 150
    6380:	90 e0       	ldi	r25, 0x00	; 0
    6382:	0e 94 01 3b 	call	0x7602	; 0x7602 <delayMicroseconds>
    6386:	6c 81       	ldd	r22, Y+4	; 0x04
    6388:	60 62       	ori	r22, 0x20	; 32
    638a:	ce 01       	movw	r24, r28
    638c:	45 df       	rcall	.-374    	; 0x6218 <_ZN3LCD7commandEh>
    638e:	86 e9       	ldi	r24, 0x96	; 150
    6390:	90 e0       	ldi	r25, 0x00	; 0
    6392:	0e 94 01 3b 	call	0x7602	; 0x7602 <delayMicroseconds>
    6396:	6c 81       	ldd	r22, Y+4	; 0x04
    6398:	60 62       	ori	r22, 0x20	; 32
    639a:	ce 01       	movw	r24, r28
    639c:	3d df       	rcall	.-390    	; 0x6218 <_ZN3LCD7commandEh>
    639e:	8c e3       	ldi	r24, 0x3C	; 60
    63a0:	90 e0       	ldi	r25, 0x00	; 0
    63a2:	0e 94 01 3b 	call	0x7602	; 0x7602 <delayMicroseconds>
    63a6:	84 e0       	ldi	r24, 0x04	; 4
    63a8:	8d 83       	std	Y+5, r24	; 0x05
    63aa:	ce 01       	movw	r24, r28
    63ac:	8b df       	rcall	.-234    	; 0x62c4 <_ZN3LCD7displayEv>
    63ae:	ce 01       	movw	r24, r28
    63b0:	3b df       	rcall	.-394    	; 0x6228 <_ZN3LCD5clearEv>
    63b2:	82 e0       	ldi	r24, 0x02	; 2
    63b4:	8e 83       	std	Y+6, r24	; 0x06
    63b6:	66 e0       	ldi	r22, 0x06	; 6
    63b8:	ce 01       	movw	r24, r28
    63ba:	2e df       	rcall	.-420    	; 0x6218 <_ZN3LCD7commandEh>
    63bc:	ce 01       	movw	r24, r28
    63be:	df 91       	pop	r29
    63c0:	cf 91       	pop	r28
    63c2:	1a cf       	rjmp	.-460    	; 0x61f8 <_ZN3LCD9backlightEv>

000063c4 <_ZN3LCD10createCharEhPh>:
}

// Write to CGRAM of new characters
void LCD::createChar(uint8_t location, uint8_t charmap[]) 
{
    63c4:	ef 92       	push	r14
    63c6:	ff 92       	push	r15
    63c8:	0f 93       	push	r16
    63ca:	1f 93       	push	r17
    63cc:	cf 93       	push	r28
    63ce:	df 93       	push	r29
    63d0:	8c 01       	movw	r16, r24
    63d2:	7a 01       	movw	r14, r20
   location &= 0x7;            // we only have 8 locations 0-7
   
   command(LCD_SETCGRAMADDR | (location << 3));
    63d4:	67 70       	andi	r22, 0x07	; 7
    63d6:	88 e0       	ldi	r24, 0x08	; 8
    63d8:	68 9f       	mul	r22, r24
    63da:	b0 01       	movw	r22, r0
    63dc:	11 24       	eor	r1, r1
    63de:	60 64       	ori	r22, 0x40	; 64
    63e0:	c8 01       	movw	r24, r16
    63e2:	1a df       	rcall	.-460    	; 0x6218 <_ZN3LCD7commandEh>
   delayMicroseconds(30);
    63e4:	8e e1       	ldi	r24, 0x1E	; 30
    63e6:	90 e0       	ldi	r25, 0x00	; 0
    63e8:	0e 94 01 3b 	call	0x7602	; 0x7602 <delayMicroseconds>
    63ec:	e7 01       	movw	r28, r14
    63ee:	a8 e0       	ldi	r26, 0x08	; 8
    63f0:	ea 0e       	add	r14, r26
    63f2:	f1 1c       	adc	r15, r1
   
   for (uint8_t i = 0; i < 8; i++)
   {
      write(charmap[i]);      // call the virtual write method
    63f4:	69 91       	ld	r22, Y+
    63f6:	d8 01       	movw	r26, r16
    63f8:	ed 91       	ld	r30, X+
    63fa:	fc 91       	ld	r31, X
    63fc:	01 90       	ld	r0, Z+
    63fe:	f0 81       	ld	r31, Z
    6400:	e0 2d       	mov	r30, r0
    6402:	c8 01       	movw	r24, r16
    6404:	09 95       	icall
      delayMicroseconds(40);
    6406:	88 e2       	ldi	r24, 0x28	; 40
    6408:	90 e0       	ldi	r25, 0x00	; 0
    640a:	0e 94 01 3b 	call	0x7602	; 0x7602 <delayMicroseconds>
   location &= 0x7;            // we only have 8 locations 0-7
   
   command(LCD_SETCGRAMADDR | (location << 3));
   delayMicroseconds(30);
   
   for (uint8_t i = 0; i < 8; i++)
    640e:	ce 15       	cp	r28, r14
    6410:	df 05       	cpc	r29, r15
    6412:	81 f7       	brne	.-32     	; 0x63f4 <_ZN3LCD10createCharEhPh+0x30>
   {
      write(charmap[i]);      // call the virtual write method
      delayMicroseconds(40);
   }
}
    6414:	df 91       	pop	r29
    6416:	cf 91       	pop	r28
    6418:	1f 91       	pop	r17
    641a:	0f 91       	pop	r16
    641c:	ff 90       	pop	r15
    641e:	ef 90       	pop	r14
    6420:	08 95       	ret

00006422 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol>:
LiquidCrystal_I2C::LiquidCrystal_I2C(uint8_t lcd_Addr, uint8_t En, uint8_t Rw,
                                     uint8_t Rs, uint8_t d4, uint8_t d5,
                                     uint8_t d6, uint8_t d7 )
{
   config(lcd_Addr, En, Rw, Rs, d4, d5, d6, d7);
}
    6422:	21 e0       	ldi	r18, 0x01	; 1
    6424:	01 c0       	rjmp	.+2      	; 0x6428 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol+0x6>
    6426:	22 0f       	add	r18, r18
    6428:	6a 95       	dec	r22
    642a:	ea f7       	brpl	.-6      	; 0x6426 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol+0x4>
    642c:	dc 01       	movw	r26, r24
    642e:	1b 96       	adiw	r26, 0x0b	; 11
    6430:	2c 93       	st	X, r18
    6432:	1b 97       	sbiw	r26, 0x0b	; 11
    6434:	19 96       	adiw	r26, 0x09	; 9
    6436:	4c 93       	st	X, r20
    6438:	19 97       	sbiw	r26, 0x09	; 9
    643a:	ed 91       	ld	r30, X+
    643c:	fc 91       	ld	r31, X
    643e:	04 84       	ldd	r0, Z+12	; 0x0c
    6440:	f5 85       	ldd	r31, Z+13	; 0x0d
    6442:	e0 2d       	mov	r30, r0
    6444:	60 e0       	ldi	r22, 0x00	; 0
    6446:	09 94       	ijmp

00006448 <_ZN17LiquidCrystal_I2C12setBacklightEh>:
    6448:	fc 01       	movw	r30, r24
    644a:	83 85       	ldd	r24, Z+11	; 0x0b
    644c:	88 23       	and	r24, r24
    644e:	89 f0       	breq	.+34     	; 0x6472 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x2a>
    6450:	91 85       	ldd	r25, Z+9	; 0x09
    6452:	91 11       	cpse	r25, r1
    6454:	03 c0       	rjmp	.+6      	; 0x645c <_ZN17LiquidCrystal_I2C12setBacklightEh+0x14>
    6456:	61 11       	cpse	r22, r1
    6458:	05 c0       	rjmp	.+10     	; 0x6464 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x1c>
    645a:	06 c0       	rjmp	.+12     	; 0x6468 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    645c:	91 30       	cpi	r25, 0x01	; 1
    645e:	21 f4       	brne	.+8      	; 0x6468 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    6460:	61 11       	cpse	r22, r1
    6462:	02 c0       	rjmp	.+4      	; 0x6468 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    6464:	84 87       	std	Z+12, r24	; 0x0c
    6466:	01 c0       	rjmp	.+2      	; 0x646a <_ZN17LiquidCrystal_I2C12setBacklightEh+0x22>
    6468:	14 86       	std	Z+12, r1	; 0x0c
    646a:	64 85       	ldd	r22, Z+12	; 0x0c
    646c:	cf 01       	movw	r24, r30
    646e:	0d 96       	adiw	r24, 0x0d	; 13
    6470:	8a ce       	rjmp	.-748    	; 0x6186 <_ZN5I2CIO5writeEh>
    6472:	08 95       	ret

00006474 <_ZN17LiquidCrystal_I2C4initEv>:
    6474:	0f 93       	push	r16
    6476:	1f 93       	push	r17
    6478:	cf 93       	push	r28
    647a:	df 93       	push	r29
    647c:	8c 01       	movw	r16, r24
    647e:	ec 01       	movw	r28, r24
    6480:	2d 96       	adiw	r28, 0x0d	; 13
    6482:	fc 01       	movw	r30, r24
    6484:	62 85       	ldd	r22, Z+10	; 0x0a
    6486:	ce 01       	movw	r24, r28
    6488:	68 de       	rcall	.-816    	; 0x615a <_ZN5I2CIO5beginEh>
    648a:	01 97       	sbiw	r24, 0x01	; 1
    648c:	59 f4       	brne	.+22     	; 0x64a4 <_ZN17LiquidCrystal_I2C4initEv+0x30>
    648e:	61 e0       	ldi	r22, 0x01	; 1
    6490:	ce 01       	movw	r24, r28
    6492:	4d de       	rcall	.-870    	; 0x612e <_ZN5I2CIO8portModeEh>
    6494:	f8 01       	movw	r30, r16
    6496:	14 82       	std	Z+4, r1	; 0x04
    6498:	60 e0       	ldi	r22, 0x00	; 0
    649a:	ce 01       	movw	r24, r28
    649c:	74 de       	rcall	.-792    	; 0x6186 <_ZN5I2CIO5writeEh>
    649e:	81 e0       	ldi	r24, 0x01	; 1
    64a0:	90 e0       	ldi	r25, 0x00	; 0
    64a2:	02 c0       	rjmp	.+4      	; 0x64a8 <_ZN17LiquidCrystal_I2C4initEv+0x34>
    64a4:	80 e0       	ldi	r24, 0x00	; 0
    64a6:	90 e0       	ldi	r25, 0x00	; 0
    64a8:	df 91       	pop	r29
    64aa:	cf 91       	pop	r28
    64ac:	1f 91       	pop	r17
    64ae:	0f 91       	pop	r16
    64b0:	08 95       	ret

000064b2 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh>:
    64b2:	8f 92       	push	r8
    64b4:	af 92       	push	r10
    64b6:	cf 92       	push	r12
    64b8:	ef 92       	push	r14
    64ba:	0f 93       	push	r16
    64bc:	cf 93       	push	r28
    64be:	df 93       	push	r29
    64c0:	cd b7       	in	r28, 0x3d	; 61
    64c2:	de b7       	in	r29, 0x3e	; 62
    64c4:	fc 01       	movw	r30, r24
    64c6:	62 87       	std	Z+10, r22	; 0x0a
    64c8:	13 86       	std	Z+11, r1	; 0x0b
    64ca:	14 86       	std	Z+12, r1	; 0x0c
    64cc:	11 86       	std	Z+9, r1	; 0x09
    64ce:	81 e0       	ldi	r24, 0x01	; 1
    64d0:	98 2f       	mov	r25, r24
    64d2:	01 c0       	rjmp	.+2      	; 0x64d6 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x24>
    64d4:	99 0f       	add	r25, r25
    64d6:	4a 95       	dec	r20
    64d8:	ea f7       	brpl	.-6      	; 0x64d4 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x22>
    64da:	91 8b       	std	Z+17, r25	; 0x11
    64dc:	98 2f       	mov	r25, r24
    64de:	01 c0       	rjmp	.+2      	; 0x64e2 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x30>
    64e0:	99 0f       	add	r25, r25
    64e2:	2a 95       	dec	r18
    64e4:	ea f7       	brpl	.-6      	; 0x64e0 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x2e>
    64e6:	92 8b       	std	Z+18, r25	; 0x12
    64e8:	98 2f       	mov	r25, r24
    64ea:	01 c0       	rjmp	.+2      	; 0x64ee <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x3c>
    64ec:	99 0f       	add	r25, r25
    64ee:	0a 95       	dec	r16
    64f0:	ea f7       	brpl	.-6      	; 0x64ec <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x3a>
    64f2:	93 8b       	std	Z+19, r25	; 0x13
    64f4:	98 2f       	mov	r25, r24
    64f6:	01 c0       	rjmp	.+2      	; 0x64fa <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x48>
    64f8:	99 0f       	add	r25, r25
    64fa:	ea 94       	dec	r14
    64fc:	ea f7       	brpl	.-6      	; 0x64f8 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x46>
    64fe:	94 8b       	std	Z+20, r25	; 0x14
    6500:	98 2f       	mov	r25, r24
    6502:	01 c0       	rjmp	.+2      	; 0x6506 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x54>
    6504:	99 0f       	add	r25, r25
    6506:	ca 94       	dec	r12
    6508:	ea f7       	brpl	.-6      	; 0x6504 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x52>
    650a:	95 8b       	std	Z+21, r25	; 0x15
    650c:	98 2f       	mov	r25, r24
    650e:	01 c0       	rjmp	.+2      	; 0x6512 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x60>
    6510:	99 0f       	add	r25, r25
    6512:	aa 94       	dec	r10
    6514:	ea f7       	brpl	.-6      	; 0x6510 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x5e>
    6516:	96 8b       	std	Z+22, r25	; 0x16
    6518:	01 c0       	rjmp	.+2      	; 0x651c <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x6a>
    651a:	88 0f       	add	r24, r24
    651c:	8a 94       	dec	r8
    651e:	ea f7       	brpl	.-6      	; 0x651a <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x68>
    6520:	87 8b       	std	Z+23, r24	; 0x17
    6522:	df 91       	pop	r29
    6524:	cf 91       	pop	r28
    6526:	0f 91       	pop	r16
    6528:	ef 90       	pop	r14
    652a:	cf 90       	pop	r12
    652c:	af 90       	pop	r10
    652e:	8f 90       	pop	r8
    6530:	08 95       	ret

00006532 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhhh13t_backlighPol>:

LiquidCrystal_I2C::LiquidCrystal_I2C(uint8_t lcd_Addr, uint8_t En, uint8_t Rw,
    6532:	6f 92       	push	r6
    6534:	7f 92       	push	r7
    6536:	8f 92       	push	r8
    6538:	9f 92       	push	r9
    653a:	af 92       	push	r10
    653c:	bf 92       	push	r11
    653e:	cf 92       	push	r12
    6540:	df 92       	push	r13
    6542:	ef 92       	push	r14
    6544:	ff 92       	push	r15
    6546:	0f 93       	push	r16
    6548:	1f 93       	push	r17
    654a:	cf 93       	push	r28
    654c:	df 93       	push	r29
    654e:	cd b7       	in	r28, 0x3d	; 61
    6550:	de b7       	in	r29, 0x3e	; 62
    6552:	3c 01       	movw	r6, r24
    6554:	d6 2e       	mov	r13, r22
    6556:	b4 2e       	mov	r11, r20
    6558:	92 2e       	mov	r9, r18
    655a:	19 89       	ldd	r17, Y+17	; 0x11
    655c:	fa 88       	ldd	r15, Y+18	; 0x12
                                     uint8_t Rs, uint8_t d4, uint8_t d5,
                                     uint8_t d6, uint8_t d7, uint8_t backlighPin, 
                                     t_backlighPol pol = POSITIVE )
    655e:	44 de       	rcall	.-888    	; 0x61e8 <_ZN3LCDC1Ev>
    6560:	8a e4       	ldi	r24, 0x4A	; 74
    6562:	9a e0       	ldi	r25, 0x0A	; 10
    6564:	f3 01       	movw	r30, r6
    6566:	91 83       	std	Z+1, r25	; 0x01
    6568:	80 83       	st	Z, r24
    656a:	c3 01       	movw	r24, r6
    656c:	0d 96       	adiw	r24, 0x0d	; 13
    656e:	d8 dd       	rcall	.-1104   	; 0x6120 <_ZN5I2CIOC1Ev>
{
   config(lcd_Addr, En, Rw, Rs, d4, d5, d6, d7);
    6570:	29 2d       	mov	r18, r9
    6572:	4b 2d       	mov	r20, r11
    6574:	6d 2d       	mov	r22, r13
    6576:	c3 01       	movw	r24, r6
    6578:	9c df       	rcall	.-200    	; 0x64b2 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh>
   setBacklightPin(backlighPin, pol);
    657a:	4f 2d       	mov	r20, r15
    657c:	61 2f       	mov	r22, r17
    657e:	c3 01       	movw	r24, r6
}
    6580:	df 91       	pop	r29
    6582:	cf 91       	pop	r28
    6584:	1f 91       	pop	r17
    6586:	0f 91       	pop	r16
    6588:	ff 90       	pop	r15
    658a:	ef 90       	pop	r14
    658c:	df 90       	pop	r13
    658e:	cf 90       	pop	r12
    6590:	bf 90       	pop	r11
    6592:	af 90       	pop	r10
    6594:	9f 90       	pop	r9
    6596:	8f 90       	pop	r8
    6598:	7f 90       	pop	r7
                                     uint8_t Rs, uint8_t d4, uint8_t d5,
                                     uint8_t d6, uint8_t d7, uint8_t backlighPin, 
                                     t_backlighPol pol = POSITIVE )
{
   config(lcd_Addr, En, Rw, Rs, d4, d5, d6, d7);
   setBacklightPin(backlighPin, pol);
    659a:	6f 90       	pop	r6
    659c:	42 cf       	rjmp	.-380    	; 0x6422 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol>

0000659e <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
}

//
// pulseEnable
void LiquidCrystal_I2C::pulseEnable (uint8_t data)
{
    659e:	ef 92       	push	r14
    65a0:	ff 92       	push	r15
    65a2:	0f 93       	push	r16
    65a4:	1f 93       	push	r17
    65a6:	cf 93       	push	r28
    65a8:	8c 01       	movw	r16, r24
    65aa:	c6 2f       	mov	r28, r22
   _i2cio.write (data | _En);   // En HIGH
    65ac:	7c 01       	movw	r14, r24
    65ae:	8d e0       	ldi	r24, 0x0D	; 13
    65b0:	e8 0e       	add	r14, r24
    65b2:	f1 1c       	adc	r15, r1
    65b4:	f8 01       	movw	r30, r16
    65b6:	61 89       	ldd	r22, Z+17	; 0x11
    65b8:	6c 2b       	or	r22, r28
    65ba:	c7 01       	movw	r24, r14
    65bc:	e4 dd       	rcall	.-1080   	; 0x6186 <_ZN5I2CIO5writeEh>
   _i2cio.write (data & ~_En);  // En LOW
    65be:	f8 01       	movw	r30, r16
    65c0:	61 89       	ldd	r22, Z+17	; 0x11
    65c2:	60 95       	com	r22
    65c4:	6c 23       	and	r22, r28
    65c6:	c7 01       	movw	r24, r14
    65c8:	cf 91       	pop	r28
    65ca:	1f 91       	pop	r17
    65cc:	0f 91       	pop	r16
    65ce:	ff 90       	pop	r15
//
// pulseEnable
void LiquidCrystal_I2C::pulseEnable (uint8_t data)
{
   _i2cio.write (data | _En);   // En HIGH
   _i2cio.write (data & ~_En);  // En LOW
    65d0:	ef 90       	pop	r14
    65d2:	d9 cd       	rjmp	.-1102   	; 0x6186 <_ZN5I2CIO5writeEh>

000065d4 <_ZN17LiquidCrystal_I2C10write4bitsEhh>:
}

//
// write4bits
void LiquidCrystal_I2C::write4bits ( uint8_t value, uint8_t mode ) 
{
    65d4:	fc 01       	movw	r30, r24
    65d6:	96 2f       	mov	r25, r22
    65d8:	df 01       	movw	r26, r30
    65da:	84 e0       	ldi	r24, 0x04	; 4
   uint8_t pinMapValue = 0;
    65dc:	60 e0       	ldi	r22, 0x00	; 0
   
   // Map the value to LCD pin mapping
   // --------------------------------
   for ( uint8_t i = 0; i < 4; i++ )
   {
      if ( ( value & 0x1 ) == 1 )
    65de:	90 ff       	sbrs	r25, 0
    65e0:	04 c0       	rjmp	.+8      	; 0x65ea <_ZN17LiquidCrystal_I2C10write4bitsEhh+0x16>
      {
         pinMapValue |= _data_pins[i];
    65e2:	54 96       	adiw	r26, 0x14	; 20
    65e4:	2c 91       	ld	r18, X
    65e6:	54 97       	sbiw	r26, 0x14	; 20
    65e8:	62 2b       	or	r22, r18
      }
      value = ( value >> 1 );
    65ea:	96 95       	lsr	r25
    65ec:	81 50       	subi	r24, 0x01	; 1
    65ee:	11 96       	adiw	r26, 0x01	; 1
{
   uint8_t pinMapValue = 0;
   
   // Map the value to LCD pin mapping
   // --------------------------------
   for ( uint8_t i = 0; i < 4; i++ )
    65f0:	81 11       	cpse	r24, r1
    65f2:	f5 cf       	rjmp	.-22     	; 0x65de <_ZN17LiquidCrystal_I2C10write4bitsEhh+0xa>
      value = ( value >> 1 );
   }
   
   // Is it a command or data
   // -----------------------
   if ( mode == DATA )
    65f4:	41 30       	cpi	r20, 0x01	; 1
    65f6:	09 f4       	brne	.+2      	; 0x65fa <_ZN17LiquidCrystal_I2C10write4bitsEhh+0x26>
   {
      mode = _Rs;
    65f8:	43 89       	ldd	r20, Z+19	; 0x13
    65fa:	94 85       	ldd	r25, Z+12	; 0x0c
    65fc:	69 2b       	or	r22, r25
   }
   
   pinMapValue |= mode | _backlightStsMask;
   pulseEnable ( pinMapValue );
    65fe:	64 2b       	or	r22, r20
    6600:	cf 01       	movw	r24, r30
    6602:	cd cf       	rjmp	.-102    	; 0x659e <_ZN17LiquidCrystal_I2C11pulseEnableEh>

00006604 <_ZN17LiquidCrystal_I2C4sendEhh>:
//----------------------------------------------------------------------------

//
// send - write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) 
{
    6604:	0f 93       	push	r16
    6606:	1f 93       	push	r17
    6608:	cf 93       	push	r28
    660a:	df 93       	push	r29
    660c:	06 2f       	mov	r16, r22
    660e:	0f 70       	andi	r16, 0x0F	; 15
   // No need to use the delay routines since the time taken to write takes
   // longer that what is needed both for toggling and enable pin an to execute
   // the command.
   
   if ( mode == FOUR_BITS )
    6610:	42 30       	cpi	r20, 0x02	; 2
    6612:	19 f4       	brne	.+6      	; 0x661a <_ZN17LiquidCrystal_I2C4sendEhh+0x16>
   {
      write4bits( (value & 0x0F), COMMAND );
    6614:	40 e0       	ldi	r20, 0x00	; 0
    6616:	60 2f       	mov	r22, r16
    6618:	0d c0       	rjmp	.+26     	; 0x6634 <_ZN17LiquidCrystal_I2C4sendEhh+0x30>
    661a:	14 2f       	mov	r17, r20
    661c:	ec 01       	movw	r28, r24
   }
   else 
   {
      write4bits( (value >> 4), mode );
    661e:	70 e0       	ldi	r23, 0x00	; 0
    6620:	84 e0       	ldi	r24, 0x04	; 4
    6622:	75 95       	asr	r23
    6624:	67 95       	ror	r22
    6626:	8a 95       	dec	r24
    6628:	e1 f7       	brne	.-8      	; 0x6622 <_ZN17LiquidCrystal_I2C4sendEhh+0x1e>
    662a:	ce 01       	movw	r24, r28
    662c:	d3 df       	rcall	.-90     	; 0x65d4 <_ZN17LiquidCrystal_I2C10write4bitsEhh>
      write4bits( (value & 0x0F), mode);
    662e:	41 2f       	mov	r20, r17
    6630:	60 2f       	mov	r22, r16
    6632:	ce 01       	movw	r24, r28
   }
}
    6634:	df 91       	pop	r29
    6636:	cf 91       	pop	r28
    6638:	1f 91       	pop	r17
      write4bits( (value & 0x0F), COMMAND );
   }
   else 
   {
      write4bits( (value >> 4), mode );
      write4bits( (value & 0x0F), mode);
    663a:	0f 91       	pop	r16
    663c:	cb cf       	rjmp	.-106    	; 0x65d4 <_ZN17LiquidCrystal_I2C10write4bitsEhh>

0000663e <_ZN17LiquidCrystal_I2C5beginEhhh>:
// ---------------------------------------------------------------------------

//
// begin
void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) 
{
    663e:	ff 92       	push	r15
    6640:	0f 93       	push	r16
    6642:	1f 93       	push	r17
    6644:	cf 93       	push	r28
    6646:	df 93       	push	r29
    6648:	ec 01       	movw	r28, r24
    664a:	16 2f       	mov	r17, r22
    664c:	04 2f       	mov	r16, r20
    664e:	f2 2e       	mov	r15, r18
   
   init();     // Initialise the I2C expander interface
    6650:	11 df       	rcall	.-478    	; 0x6474 <_ZN17LiquidCrystal_I2C4initEv>
   LCD::begin ( cols, lines, dotsize );   
    6652:	2f 2d       	mov	r18, r15
    6654:	40 2f       	mov	r20, r16
    6656:	61 2f       	mov	r22, r17
    6658:	ce 01       	movw	r24, r28
}
    665a:	df 91       	pop	r29
    665c:	cf 91       	pop	r28
    665e:	1f 91       	pop	r17
    6660:	0f 91       	pop	r16
// begin
void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) 
{
   
   init();     // Initialise the I2C expander interface
   LCD::begin ( cols, lines, dotsize );   
    6662:	ff 90       	pop	r15
    6664:	36 ce       	rjmp	.-916    	; 0x62d2 <_ZN3LCD5beginEhhh>

00006666 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    6666:	cf 93       	push	r28
  uint8_t sreg = SREG;
    6668:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    666a:	f8 94       	cli
  if (!initialized) {
    666c:	80 91 73 0c 	lds	r24, 0x0C73	; 0x800c73 <_ZN8SPIClass11initializedE>
    6670:	81 11       	cpse	r24, r1
    6672:	27 c0       	rjmp	.+78     	; 0x66c2 <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    6674:	ee e7       	ldi	r30, 0x7E	; 126
    6676:	f2 e0       	ldi	r31, 0x02	; 2
    6678:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    667a:	ee e5       	ldi	r30, 0x5E	; 94
    667c:	f2 e0       	ldi	r31, 0x02	; 2
    667e:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    6680:	e8 2f       	mov	r30, r24
    6682:	f0 e0       	ldi	r31, 0x00	; 0
    6684:	ee 0f       	add	r30, r30
    6686:	ff 1f       	adc	r31, r31
    6688:	e8 55       	subi	r30, 0x58	; 88
    668a:	fd 4f       	sbci	r31, 0xFD	; 253
    668c:	a5 91       	lpm	r26, Z+
    668e:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    6690:	ec 91       	ld	r30, X
    6692:	e9 23       	and	r30, r25
    6694:	21 f4       	brne	.+8      	; 0x669e <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    6696:	61 e0       	ldi	r22, 0x01	; 1
    6698:	8a e0       	ldi	r24, 0x0A	; 10
    669a:	0e 94 ac 3b 	call	0x7758	; 0x7758 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    669e:	61 e0       	ldi	r22, 0x01	; 1
    66a0:	8a e0       	ldi	r24, 0x0A	; 10
    66a2:	0e 94 70 3b 	call	0x76e0	; 0x76e0 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    66a6:	8c b5       	in	r24, 0x2c	; 44
    66a8:	80 61       	ori	r24, 0x10	; 16
    66aa:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    66ac:	8c b5       	in	r24, 0x2c	; 44
    66ae:	80 64       	ori	r24, 0x40	; 64
    66b0:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    66b2:	61 e0       	ldi	r22, 0x01	; 1
    66b4:	8d e0       	ldi	r24, 0x0D	; 13
    66b6:	0e 94 70 3b 	call	0x76e0	; 0x76e0 <pinMode>
    pinMode(MOSI, OUTPUT);
    66ba:	61 e0       	ldi	r22, 0x01	; 1
    66bc:	8b e0       	ldi	r24, 0x0B	; 11
    66be:	0e 94 70 3b 	call	0x76e0	; 0x76e0 <pinMode>
  }
  initialized++; // reference count
    66c2:	80 91 73 0c 	lds	r24, 0x0C73	; 0x800c73 <_ZN8SPIClass11initializedE>
    66c6:	8f 5f       	subi	r24, 0xFF	; 255
    66c8:	80 93 73 0c 	sts	0x0C73, r24	; 0x800c73 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    66cc:	cf bf       	out	0x3f, r28	; 63
}
    66ce:	cf 91       	pop	r28
    66d0:	08 95       	ret

000066d2 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    66d2:	10 92 e1 0c 	sts	0x0CE1, r1	; 0x800ce1 <twi_state>
    66d6:	81 e0       	ldi	r24, 0x01	; 1
    66d8:	80 93 df 0c 	sts	0x0CDF, r24	; 0x800cdf <twi_sendStop>
    66dc:	10 92 de 0c 	sts	0x0CDE, r1	; 0x800cde <twi_inRepStart>
    66e0:	61 e0       	ldi	r22, 0x01	; 1
    66e2:	8d e1       	ldi	r24, 0x1D	; 29
    66e4:	0e 94 ac 3b 	call	0x7758	; 0x7758 <digitalWrite>
    66e8:	61 e0       	ldi	r22, 0x01	; 1
    66ea:	8c e1       	ldi	r24, 0x1C	; 28
    66ec:	0e 94 ac 3b 	call	0x7758	; 0x7758 <digitalWrite>
    66f0:	e9 eb       	ldi	r30, 0xB9	; 185
    66f2:	f0 e0       	ldi	r31, 0x00	; 0
    66f4:	80 81       	ld	r24, Z
    66f6:	8e 7f       	andi	r24, 0xFE	; 254
    66f8:	80 83       	st	Z, r24
    66fa:	80 81       	ld	r24, Z
    66fc:	8d 7f       	andi	r24, 0xFD	; 253
    66fe:	80 83       	st	Z, r24
    6700:	88 e4       	ldi	r24, 0x48	; 72
    6702:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    6706:	85 e4       	ldi	r24, 0x45	; 69
    6708:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    670c:	08 95       	ret

0000670e <twi_disable>:
    670e:	ec eb       	ldi	r30, 0xBC	; 188
    6710:	f0 e0       	ldi	r31, 0x00	; 0
    6712:	80 81       	ld	r24, Z
    6714:	8a 7b       	andi	r24, 0xBA	; 186
    6716:	80 83       	st	Z, r24
    6718:	60 e0       	ldi	r22, 0x00	; 0
    671a:	8d e1       	ldi	r24, 0x1D	; 29
    671c:	0e 94 ac 3b 	call	0x7758	; 0x7758 <digitalWrite>
    6720:	60 e0       	ldi	r22, 0x00	; 0
    6722:	8c e1       	ldi	r24, 0x1C	; 28
    6724:	0c 94 ac 3b 	jmp	0x7758	; 0x7758 <digitalWrite>

00006728 <twi_setFrequency>:
    6728:	9b 01       	movw	r18, r22
    672a:	ac 01       	movw	r20, r24
    672c:	60 e0       	ldi	r22, 0x00	; 0
    672e:	74 e2       	ldi	r23, 0x24	; 36
    6730:	84 ef       	ldi	r24, 0xF4	; 244
    6732:	90 e0       	ldi	r25, 0x00	; 0
    6734:	0e 94 5f 40 	call	0x80be	; 0x80be <__udivmodsi4>
    6738:	da 01       	movw	r26, r20
    673a:	c9 01       	movw	r24, r18
    673c:	40 97       	sbiw	r24, 0x10	; 16
    673e:	a1 09       	sbc	r26, r1
    6740:	b1 09       	sbc	r27, r1
    6742:	b6 95       	lsr	r27
    6744:	a7 95       	ror	r26
    6746:	97 95       	ror	r25
    6748:	87 95       	ror	r24
    674a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    674e:	08 95       	ret

00006750 <twi_readFrom>:
    6750:	41 32       	cpi	r20, 0x21	; 33
    6752:	08 f0       	brcs	.+2      	; 0x6756 <twi_readFrom+0x6>
    6754:	43 c0       	rjmp	.+134    	; 0x67dc <twi_readFrom+0x8c>
    6756:	90 91 e1 0c 	lds	r25, 0x0CE1	; 0x800ce1 <twi_state>
    675a:	91 11       	cpse	r25, r1
    675c:	fc cf       	rjmp	.-8      	; 0x6756 <twi_readFrom+0x6>
    675e:	91 e0       	ldi	r25, 0x01	; 1
    6760:	90 93 e1 0c 	sts	0x0CE1, r25	; 0x800ce1 <twi_state>
    6764:	20 93 df 0c 	sts	0x0CDF, r18	; 0x800cdf <twi_sendStop>
    6768:	2f ef       	ldi	r18, 0xFF	; 255
    676a:	20 93 74 0c 	sts	0x0C74, r18	; 0x800c74 <twi_error>
    676e:	10 92 b9 0c 	sts	0x0CB9, r1	; 0x800cb9 <twi_masterBufferIndex>
    6772:	24 0f       	add	r18, r20
    6774:	20 93 b8 0c 	sts	0x0CB8, r18	; 0x800cb8 <twi_masterBufferLength>
    6778:	90 93 e0 0c 	sts	0x0CE0, r25	; 0x800ce0 <twi_slarw>
    677c:	90 91 e0 0c 	lds	r25, 0x0CE0	; 0x800ce0 <twi_slarw>
    6780:	88 0f       	add	r24, r24
    6782:	89 2b       	or	r24, r25
    6784:	80 93 e0 0c 	sts	0x0CE0, r24	; 0x800ce0 <twi_slarw>
    6788:	80 91 de 0c 	lds	r24, 0x0CDE	; 0x800cde <twi_inRepStart>
    678c:	81 30       	cpi	r24, 0x01	; 1
    678e:	61 f4       	brne	.+24     	; 0x67a8 <twi_readFrom+0x58>
    6790:	10 92 de 0c 	sts	0x0CDE, r1	; 0x800cde <twi_inRepStart>
    6794:	80 91 e0 0c 	lds	r24, 0x0CE0	; 0x800ce0 <twi_slarw>
    6798:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    679c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    67a0:	83 fd       	sbrc	r24, 3
    67a2:	f8 cf       	rjmp	.-16     	; 0x6794 <twi_readFrom+0x44>
    67a4:	85 ec       	ldi	r24, 0xC5	; 197
    67a6:	01 c0       	rjmp	.+2      	; 0x67aa <twi_readFrom+0x5a>
    67a8:	85 ee       	ldi	r24, 0xE5	; 229
    67aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    67ae:	80 91 e1 0c 	lds	r24, 0x0CE1	; 0x800ce1 <twi_state>
    67b2:	81 30       	cpi	r24, 0x01	; 1
    67b4:	e1 f3       	breq	.-8      	; 0x67ae <twi_readFrom+0x5e>
    67b6:	80 91 b9 0c 	lds	r24, 0x0CB9	; 0x800cb9 <twi_masterBufferIndex>
    67ba:	84 17       	cp	r24, r20
    67bc:	10 f4       	brcc	.+4      	; 0x67c2 <twi_readFrom+0x72>
    67be:	40 91 b9 0c 	lds	r20, 0x0CB9	; 0x800cb9 <twi_masterBufferIndex>
    67c2:	aa eb       	ldi	r26, 0xBA	; 186
    67c4:	bc e0       	ldi	r27, 0x0C	; 12
    67c6:	96 2f       	mov	r25, r22
    67c8:	fb 01       	movw	r30, r22
    67ca:	8e 2f       	mov	r24, r30
    67cc:	89 1b       	sub	r24, r25
    67ce:	84 17       	cp	r24, r20
    67d0:	18 f4       	brcc	.+6      	; 0x67d8 <twi_readFrom+0x88>
    67d2:	8d 91       	ld	r24, X+
    67d4:	81 93       	st	Z+, r24
    67d6:	f9 cf       	rjmp	.-14     	; 0x67ca <twi_readFrom+0x7a>
    67d8:	84 2f       	mov	r24, r20
    67da:	08 95       	ret
    67dc:	80 e0       	ldi	r24, 0x00	; 0
    67de:	08 95       	ret

000067e0 <twi_writeTo>:
    67e0:	0f 93       	push	r16
    67e2:	41 32       	cpi	r20, 0x21	; 33
    67e4:	08 f0       	brcs	.+2      	; 0x67e8 <twi_writeTo+0x8>
    67e6:	4a c0       	rjmp	.+148    	; 0x687c <twi_writeTo+0x9c>
    67e8:	90 91 e1 0c 	lds	r25, 0x0CE1	; 0x800ce1 <twi_state>
    67ec:	91 11       	cpse	r25, r1
    67ee:	fc cf       	rjmp	.-8      	; 0x67e8 <twi_writeTo+0x8>
    67f0:	32 e0       	ldi	r19, 0x02	; 2
    67f2:	30 93 e1 0c 	sts	0x0CE1, r19	; 0x800ce1 <twi_state>
    67f6:	00 93 df 0c 	sts	0x0CDF, r16	; 0x800cdf <twi_sendStop>
    67fa:	3f ef       	ldi	r19, 0xFF	; 255
    67fc:	30 93 74 0c 	sts	0x0C74, r19	; 0x800c74 <twi_error>
    6800:	10 92 b9 0c 	sts	0x0CB9, r1	; 0x800cb9 <twi_masterBufferIndex>
    6804:	40 93 b8 0c 	sts	0x0CB8, r20	; 0x800cb8 <twi_masterBufferLength>
    6808:	56 2f       	mov	r21, r22
    680a:	aa eb       	ldi	r26, 0xBA	; 186
    680c:	bc e0       	ldi	r27, 0x0C	; 12
    680e:	fb 01       	movw	r30, r22
    6810:	3e 2f       	mov	r19, r30
    6812:	35 1b       	sub	r19, r21
    6814:	34 17       	cp	r19, r20
    6816:	18 f4       	brcc	.+6      	; 0x681e <twi_writeTo+0x3e>
    6818:	31 91       	ld	r19, Z+
    681a:	3d 93       	st	X+, r19
    681c:	f9 cf       	rjmp	.-14     	; 0x6810 <twi_writeTo+0x30>
    681e:	10 92 e0 0c 	sts	0x0CE0, r1	; 0x800ce0 <twi_slarw>
    6822:	30 91 e0 0c 	lds	r19, 0x0CE0	; 0x800ce0 <twi_slarw>
    6826:	88 0f       	add	r24, r24
    6828:	83 2b       	or	r24, r19
    682a:	80 93 e0 0c 	sts	0x0CE0, r24	; 0x800ce0 <twi_slarw>
    682e:	80 91 de 0c 	lds	r24, 0x0CDE	; 0x800cde <twi_inRepStart>
    6832:	81 30       	cpi	r24, 0x01	; 1
    6834:	61 f4       	brne	.+24     	; 0x684e <twi_writeTo+0x6e>
    6836:	10 92 de 0c 	sts	0x0CDE, r1	; 0x800cde <twi_inRepStart>
    683a:	80 91 e0 0c 	lds	r24, 0x0CE0	; 0x800ce0 <twi_slarw>
    683e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    6842:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    6846:	83 fd       	sbrc	r24, 3
    6848:	f8 cf       	rjmp	.-16     	; 0x683a <twi_writeTo+0x5a>
    684a:	85 ec       	ldi	r24, 0xC5	; 197
    684c:	01 c0       	rjmp	.+2      	; 0x6850 <twi_writeTo+0x70>
    684e:	85 ee       	ldi	r24, 0xE5	; 229
    6850:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    6854:	22 23       	and	r18, r18
    6856:	21 f0       	breq	.+8      	; 0x6860 <twi_writeTo+0x80>
    6858:	80 91 e1 0c 	lds	r24, 0x0CE1	; 0x800ce1 <twi_state>
    685c:	82 30       	cpi	r24, 0x02	; 2
    685e:	d1 f3       	breq	.-12     	; 0x6854 <twi_writeTo+0x74>
    6860:	80 91 74 0c 	lds	r24, 0x0C74	; 0x800c74 <twi_error>
    6864:	8f 3f       	cpi	r24, 0xFF	; 255
    6866:	79 f0       	breq	.+30     	; 0x6886 <twi_writeTo+0xa6>
    6868:	80 91 74 0c 	lds	r24, 0x0C74	; 0x800c74 <twi_error>
    686c:	80 32       	cpi	r24, 0x20	; 32
    686e:	41 f0       	breq	.+16     	; 0x6880 <twi_writeTo+0xa0>
    6870:	80 91 74 0c 	lds	r24, 0x0C74	; 0x800c74 <twi_error>
    6874:	80 33       	cpi	r24, 0x30	; 48
    6876:	31 f0       	breq	.+12     	; 0x6884 <twi_writeTo+0xa4>
    6878:	94 e0       	ldi	r25, 0x04	; 4
    687a:	05 c0       	rjmp	.+10     	; 0x6886 <twi_writeTo+0xa6>
    687c:	91 e0       	ldi	r25, 0x01	; 1
    687e:	03 c0       	rjmp	.+6      	; 0x6886 <twi_writeTo+0xa6>
    6880:	92 e0       	ldi	r25, 0x02	; 2
    6882:	01 c0       	rjmp	.+2      	; 0x6886 <twi_writeTo+0xa6>
    6884:	93 e0       	ldi	r25, 0x03	; 3
    6886:	89 2f       	mov	r24, r25
    6888:	0f 91       	pop	r16
    688a:	08 95       	ret

0000688c <twi_transmit>:
    688c:	40 91 96 0c 	lds	r20, 0x0C96	; 0x800c96 <twi_txBufferLength>
    6890:	26 2f       	mov	r18, r22
    6892:	30 e0       	ldi	r19, 0x00	; 0
    6894:	24 0f       	add	r18, r20
    6896:	31 1d       	adc	r19, r1
    6898:	21 32       	cpi	r18, 0x21	; 33
    689a:	31 05       	cpc	r19, r1
    689c:	dc f4       	brge	.+54     	; 0x68d4 <twi_transmit+0x48>
    689e:	20 91 e1 0c 	lds	r18, 0x0CE1	; 0x800ce1 <twi_state>
    68a2:	24 30       	cpi	r18, 0x04	; 4
    68a4:	c9 f4       	brne	.+50     	; 0x68d8 <twi_transmit+0x4c>
    68a6:	fc 01       	movw	r30, r24
    68a8:	80 e0       	ldi	r24, 0x00	; 0
    68aa:	90 e0       	ldi	r25, 0x00	; 0
    68ac:	86 17       	cp	r24, r22
    68ae:	58 f4       	brcc	.+22     	; 0x68c6 <twi_transmit+0x3a>
    68b0:	30 91 96 0c 	lds	r19, 0x0C96	; 0x800c96 <twi_txBufferLength>
    68b4:	21 91       	ld	r18, Z+
    68b6:	dc 01       	movw	r26, r24
    68b8:	a8 56       	subi	r26, 0x68	; 104
    68ba:	b3 4f       	sbci	r27, 0xF3	; 243
    68bc:	a3 0f       	add	r26, r19
    68be:	b1 1d       	adc	r27, r1
    68c0:	2c 93       	st	X, r18
    68c2:	01 96       	adiw	r24, 0x01	; 1
    68c4:	f3 cf       	rjmp	.-26     	; 0x68ac <twi_transmit+0x20>
    68c6:	80 91 96 0c 	lds	r24, 0x0C96	; 0x800c96 <twi_txBufferLength>
    68ca:	68 0f       	add	r22, r24
    68cc:	60 93 96 0c 	sts	0x0C96, r22	; 0x800c96 <twi_txBufferLength>
    68d0:	80 e0       	ldi	r24, 0x00	; 0
    68d2:	08 95       	ret
    68d4:	81 e0       	ldi	r24, 0x01	; 1
    68d6:	08 95       	ret
    68d8:	82 e0       	ldi	r24, 0x02	; 2
    68da:	08 95       	ret

000068dc <twi_attachSlaveRxEvent>:
    68dc:	90 93 db 0c 	sts	0x0CDB, r25	; 0x800cdb <twi_onSlaveReceive+0x1>
    68e0:	80 93 da 0c 	sts	0x0CDA, r24	; 0x800cda <twi_onSlaveReceive>
    68e4:	08 95       	ret

000068e6 <twi_attachSlaveTxEvent>:
    68e6:	90 93 dd 0c 	sts	0x0CDD, r25	; 0x800cdd <twi_onSlaveTransmit+0x1>
    68ea:	80 93 dc 0c 	sts	0x0CDC, r24	; 0x800cdc <twi_onSlaveTransmit>
    68ee:	08 95       	ret

000068f0 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    68f0:	85 ed       	ldi	r24, 0xD5	; 213
    68f2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    68f6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    68fa:	84 fd       	sbrc	r24, 4
    68fc:	fc cf       	rjmp	.-8      	; 0x68f6 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    68fe:	10 92 e1 0c 	sts	0x0CE1, r1	; 0x800ce1 <twi_state>
    6902:	08 95       	ret

00006904 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    6904:	85 ec       	ldi	r24, 0xC5	; 197
    6906:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    690a:	10 92 e1 0c 	sts	0x0CE1, r1	; 0x800ce1 <twi_state>
    690e:	08 95       	ret

00006910 <__vector_26>:
}

ISR(TWI_vect)
{
    6910:	1f 92       	push	r1
    6912:	0f 92       	push	r0
    6914:	0f b6       	in	r0, 0x3f	; 63
    6916:	0f 92       	push	r0
    6918:	11 24       	eor	r1, r1
    691a:	0b b6       	in	r0, 0x3b	; 59
    691c:	0f 92       	push	r0
    691e:	2f 93       	push	r18
    6920:	3f 93       	push	r19
    6922:	4f 93       	push	r20
    6924:	5f 93       	push	r21
    6926:	6f 93       	push	r22
    6928:	7f 93       	push	r23
    692a:	8f 93       	push	r24
    692c:	9f 93       	push	r25
    692e:	af 93       	push	r26
    6930:	bf 93       	push	r27
    6932:	ef 93       	push	r30
    6934:	ff 93       	push	r31
  switch(TW_STATUS){
    6936:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    693a:	88 7f       	andi	r24, 0xF8	; 248
    693c:	80 36       	cpi	r24, 0x60	; 96
    693e:	09 f4       	brne	.+2      	; 0x6942 <__vector_26+0x32>
    6940:	9d c0       	rjmp	.+314    	; 0x6a7c <__vector_26+0x16c>
    6942:	70 f5       	brcc	.+92     	; 0x69a0 <__vector_26+0x90>
    6944:	88 32       	cpi	r24, 0x28	; 40
    6946:	09 f4       	brne	.+2      	; 0x694a <__vector_26+0x3a>
    6948:	5c c0       	rjmp	.+184    	; 0x6a02 <__vector_26+0xf2>
    694a:	90 f4       	brcc	.+36     	; 0x6970 <__vector_26+0x60>
    694c:	80 31       	cpi	r24, 0x10	; 16
    694e:	09 f4       	brne	.+2      	; 0x6952 <__vector_26+0x42>
    6950:	55 c0       	rjmp	.+170    	; 0x69fc <__vector_26+0xec>
    6952:	38 f4       	brcc	.+14     	; 0x6962 <__vector_26+0x52>
    6954:	88 23       	and	r24, r24
    6956:	09 f4       	brne	.+2      	; 0x695a <__vector_26+0x4a>
    6958:	f3 c0       	rjmp	.+486    	; 0x6b40 <__vector_26+0x230>
    695a:	88 30       	cpi	r24, 0x08	; 8
    695c:	09 f4       	brne	.+2      	; 0x6960 <__vector_26+0x50>
    695e:	4e c0       	rjmp	.+156    	; 0x69fc <__vector_26+0xec>
    6960:	f2 c0       	rjmp	.+484    	; 0x6b46 <__vector_26+0x236>
    6962:	88 31       	cpi	r24, 0x18	; 24
    6964:	09 f4       	brne	.+2      	; 0x6968 <__vector_26+0x58>
    6966:	4d c0       	rjmp	.+154    	; 0x6a02 <__vector_26+0xf2>
    6968:	80 32       	cpi	r24, 0x20	; 32
    696a:	09 f4       	brne	.+2      	; 0x696e <__vector_26+0x5e>
    696c:	5e c0       	rjmp	.+188    	; 0x6a2a <__vector_26+0x11a>
    696e:	eb c0       	rjmp	.+470    	; 0x6b46 <__vector_26+0x236>
    6970:	80 34       	cpi	r24, 0x40	; 64
    6972:	09 f4       	brne	.+2      	; 0x6976 <__vector_26+0x66>
    6974:	69 c0       	rjmp	.+210    	; 0x6a48 <__vector_26+0x138>
    6976:	50 f4       	brcc	.+20     	; 0x698c <__vector_26+0x7c>
    6978:	80 33       	cpi	r24, 0x30	; 48
    697a:	09 f4       	brne	.+2      	; 0x697e <__vector_26+0x6e>
    697c:	56 c0       	rjmp	.+172    	; 0x6a2a <__vector_26+0x11a>
    697e:	88 33       	cpi	r24, 0x38	; 56
    6980:	09 f0       	breq	.+2      	; 0x6984 <__vector_26+0x74>
    6982:	e1 c0       	rjmp	.+450    	; 0x6b46 <__vector_26+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    6984:	80 93 74 0c 	sts	0x0C74, r24	; 0x800c74 <twi_error>
      twi_releaseBus();
    6988:	bd df       	rcall	.-134    	; 0x6904 <twi_releaseBus>
      break;
    698a:	dd c0       	rjmp	.+442    	; 0x6b46 <__vector_26+0x236>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    698c:	80 35       	cpi	r24, 0x50	; 80
    698e:	09 f4       	brne	.+2      	; 0x6992 <__vector_26+0x82>
    6990:	4f c0       	rjmp	.+158    	; 0x6a30 <__vector_26+0x120>
    6992:	88 35       	cpi	r24, 0x58	; 88
    6994:	09 f4       	brne	.+2      	; 0x6998 <__vector_26+0x88>
    6996:	5d c0       	rjmp	.+186    	; 0x6a52 <__vector_26+0x142>
    6998:	88 34       	cpi	r24, 0x48	; 72
    699a:	09 f0       	breq	.+2      	; 0x699e <__vector_26+0x8e>
    699c:	d4 c0       	rjmp	.+424    	; 0x6b46 <__vector_26+0x236>
    699e:	d2 c0       	rjmp	.+420    	; 0x6b44 <__vector_26+0x234>
    69a0:	88 39       	cpi	r24, 0x98	; 152
    69a2:	09 f4       	brne	.+2      	; 0x69a6 <__vector_26+0x96>
    69a4:	c3 c0       	rjmp	.+390    	; 0x6b2c <__vector_26+0x21c>
    69a6:	a8 f4       	brcc	.+42     	; 0x69d2 <__vector_26+0xc2>
    69a8:	88 37       	cpi	r24, 0x78	; 120
    69aa:	09 f4       	brne	.+2      	; 0x69ae <__vector_26+0x9e>
    69ac:	67 c0       	rjmp	.+206    	; 0x6a7c <__vector_26+0x16c>
    69ae:	38 f4       	brcc	.+14     	; 0x69be <__vector_26+0xae>
    69b0:	88 36       	cpi	r24, 0x68	; 104
    69b2:	09 f4       	brne	.+2      	; 0x69b6 <__vector_26+0xa6>
    69b4:	63 c0       	rjmp	.+198    	; 0x6a7c <__vector_26+0x16c>
    69b6:	80 37       	cpi	r24, 0x70	; 112
    69b8:	09 f4       	brne	.+2      	; 0x69bc <__vector_26+0xac>
    69ba:	60 c0       	rjmp	.+192    	; 0x6a7c <__vector_26+0x16c>
    69bc:	c4 c0       	rjmp	.+392    	; 0x6b46 <__vector_26+0x236>
    69be:	88 38       	cpi	r24, 0x88	; 136
    69c0:	09 f4       	brne	.+2      	; 0x69c4 <__vector_26+0xb4>
    69c2:	b4 c0       	rjmp	.+360    	; 0x6b2c <__vector_26+0x21c>
    69c4:	80 39       	cpi	r24, 0x90	; 144
    69c6:	09 f4       	brne	.+2      	; 0x69ca <__vector_26+0xba>
    69c8:	5f c0       	rjmp	.+190    	; 0x6a88 <__vector_26+0x178>
    69ca:	80 38       	cpi	r24, 0x80	; 128
    69cc:	09 f0       	breq	.+2      	; 0x69d0 <__vector_26+0xc0>
    69ce:	bb c0       	rjmp	.+374    	; 0x6b46 <__vector_26+0x236>
    69d0:	5b c0       	rjmp	.+182    	; 0x6a88 <__vector_26+0x178>
    69d2:	80 3b       	cpi	r24, 0xB0	; 176
    69d4:	09 f4       	brne	.+2      	; 0x69d8 <__vector_26+0xc8>
    69d6:	82 c0       	rjmp	.+260    	; 0x6adc <__vector_26+0x1cc>
    69d8:	38 f4       	brcc	.+14     	; 0x69e8 <__vector_26+0xd8>
    69da:	80 3a       	cpi	r24, 0xA0	; 160
    69dc:	09 f4       	brne	.+2      	; 0x69e0 <__vector_26+0xd0>
    69de:	66 c0       	rjmp	.+204    	; 0x6aac <__vector_26+0x19c>
    69e0:	88 3a       	cpi	r24, 0xA8	; 168
    69e2:	09 f4       	brne	.+2      	; 0x69e6 <__vector_26+0xd6>
    69e4:	7b c0       	rjmp	.+246    	; 0x6adc <__vector_26+0x1cc>
    69e6:	af c0       	rjmp	.+350    	; 0x6b46 <__vector_26+0x236>
    69e8:	80 3c       	cpi	r24, 0xC0	; 192
    69ea:	09 f4       	brne	.+2      	; 0x69ee <__vector_26+0xde>
    69ec:	a3 c0       	rjmp	.+326    	; 0x6b34 <__vector_26+0x224>
    69ee:	88 3c       	cpi	r24, 0xC8	; 200
    69f0:	09 f4       	brne	.+2      	; 0x69f4 <__vector_26+0xe4>
    69f2:	a0 c0       	rjmp	.+320    	; 0x6b34 <__vector_26+0x224>
    69f4:	88 3b       	cpi	r24, 0xB8	; 184
    69f6:	09 f4       	brne	.+2      	; 0x69fa <__vector_26+0xea>
    69f8:	86 c0       	rjmp	.+268    	; 0x6b06 <__vector_26+0x1f6>
    69fa:	a5 c0       	rjmp	.+330    	; 0x6b46 <__vector_26+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    69fc:	80 91 e0 0c 	lds	r24, 0x0CE0	; 0x800ce0 <twi_slarw>
    6a00:	10 c0       	rjmp	.+32     	; 0x6a22 <__vector_26+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    6a02:	90 91 b9 0c 	lds	r25, 0x0CB9	; 0x800cb9 <twi_masterBufferIndex>
    6a06:	80 91 b8 0c 	lds	r24, 0x0CB8	; 0x800cb8 <twi_masterBufferLength>
    6a0a:	98 17       	cp	r25, r24
    6a0c:	70 f5       	brcc	.+92     	; 0x6a6a <__vector_26+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    6a0e:	e0 91 b9 0c 	lds	r30, 0x0CB9	; 0x800cb9 <twi_masterBufferIndex>
    6a12:	81 e0       	ldi	r24, 0x01	; 1
    6a14:	8e 0f       	add	r24, r30
    6a16:	80 93 b9 0c 	sts	0x0CB9, r24	; 0x800cb9 <twi_masterBufferIndex>
    6a1a:	f0 e0       	ldi	r31, 0x00	; 0
    6a1c:	e6 54       	subi	r30, 0x46	; 70
    6a1e:	f3 4f       	sbci	r31, 0xF3	; 243
    6a20:	80 81       	ld	r24, Z
    6a22:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    6a26:	85 ec       	ldi	r24, 0xC5	; 197
    6a28:	82 c0       	rjmp	.+260    	; 0x6b2e <__vector_26+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    6a2a:	80 93 74 0c 	sts	0x0C74, r24	; 0x800c74 <twi_error>
    6a2e:	8a c0       	rjmp	.+276    	; 0x6b44 <__vector_26+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    6a30:	e0 91 b9 0c 	lds	r30, 0x0CB9	; 0x800cb9 <twi_masterBufferIndex>
    6a34:	81 e0       	ldi	r24, 0x01	; 1
    6a36:	8e 0f       	add	r24, r30
    6a38:	80 93 b9 0c 	sts	0x0CB9, r24	; 0x800cb9 <twi_masterBufferIndex>
    6a3c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    6a40:	f0 e0       	ldi	r31, 0x00	; 0
    6a42:	e6 54       	subi	r30, 0x46	; 70
    6a44:	f3 4f       	sbci	r31, 0xF3	; 243
    6a46:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    6a48:	90 91 b9 0c 	lds	r25, 0x0CB9	; 0x800cb9 <twi_masterBufferIndex>
    6a4c:	80 91 b8 0c 	lds	r24, 0x0CB8	; 0x800cb8 <twi_masterBufferLength>
    6a50:	6a c0       	rjmp	.+212    	; 0x6b26 <__vector_26+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    6a52:	e0 91 b9 0c 	lds	r30, 0x0CB9	; 0x800cb9 <twi_masterBufferIndex>
    6a56:	81 e0       	ldi	r24, 0x01	; 1
    6a58:	8e 0f       	add	r24, r30
    6a5a:	80 93 b9 0c 	sts	0x0CB9, r24	; 0x800cb9 <twi_masterBufferIndex>
    6a5e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    6a62:	f0 e0       	ldi	r31, 0x00	; 0
    6a64:	e6 54       	subi	r30, 0x46	; 70
    6a66:	f3 4f       	sbci	r31, 0xF3	; 243
    6a68:	80 83       	st	Z, r24
	if (twi_sendStop)
    6a6a:	80 91 df 0c 	lds	r24, 0x0CDF	; 0x800cdf <twi_sendStop>
    6a6e:	81 11       	cpse	r24, r1
    6a70:	69 c0       	rjmp	.+210    	; 0x6b44 <__vector_26+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    6a72:	81 e0       	ldi	r24, 0x01	; 1
    6a74:	80 93 de 0c 	sts	0x0CDE, r24	; 0x800cde <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    6a78:	84 ea       	ldi	r24, 0xA4	; 164
    6a7a:	5d c0       	rjmp	.+186    	; 0x6b36 <__vector_26+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    6a7c:	83 e0       	ldi	r24, 0x03	; 3
    6a7e:	80 93 e1 0c 	sts	0x0CE1, r24	; 0x800ce1 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    6a82:	10 92 75 0c 	sts	0x0C75, r1	; 0x800c75 <twi_rxBufferIndex>
    6a86:	cf cf       	rjmp	.-98     	; 0x6a26 <__vector_26+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    6a88:	80 91 75 0c 	lds	r24, 0x0C75	; 0x800c75 <twi_rxBufferIndex>
    6a8c:	80 32       	cpi	r24, 0x20	; 32
    6a8e:	08 f0       	brcs	.+2      	; 0x6a92 <__vector_26+0x182>
    6a90:	4d c0       	rjmp	.+154    	; 0x6b2c <__vector_26+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    6a92:	e0 91 75 0c 	lds	r30, 0x0C75	; 0x800c75 <twi_rxBufferIndex>
    6a96:	81 e0       	ldi	r24, 0x01	; 1
    6a98:	8e 0f       	add	r24, r30
    6a9a:	80 93 75 0c 	sts	0x0C75, r24	; 0x800c75 <twi_rxBufferIndex>
    6a9e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    6aa2:	f0 e0       	ldi	r31, 0x00	; 0
    6aa4:	ea 58       	subi	r30, 0x8A	; 138
    6aa6:	f3 4f       	sbci	r31, 0xF3	; 243
    6aa8:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    6aaa:	bd cf       	rjmp	.-134    	; 0x6a26 <__vector_26+0x116>
    6aac:	2b df       	rcall	.-426    	; 0x6904 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    6aae:	80 91 75 0c 	lds	r24, 0x0C75	; 0x800c75 <twi_rxBufferIndex>
    6ab2:	80 32       	cpi	r24, 0x20	; 32
    6ab4:	30 f4       	brcc	.+12     	; 0x6ac2 <__vector_26+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    6ab6:	e0 91 75 0c 	lds	r30, 0x0C75	; 0x800c75 <twi_rxBufferIndex>
    6aba:	f0 e0       	ldi	r31, 0x00	; 0
    6abc:	ea 58       	subi	r30, 0x8A	; 138
    6abe:	f3 4f       	sbci	r31, 0xF3	; 243
    6ac0:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    6ac2:	60 91 75 0c 	lds	r22, 0x0C75	; 0x800c75 <twi_rxBufferIndex>
    6ac6:	70 e0       	ldi	r23, 0x00	; 0
    6ac8:	e0 91 da 0c 	lds	r30, 0x0CDA	; 0x800cda <twi_onSlaveReceive>
    6acc:	f0 91 db 0c 	lds	r31, 0x0CDB	; 0x800cdb <twi_onSlaveReceive+0x1>
    6ad0:	86 e7       	ldi	r24, 0x76	; 118
    6ad2:	9c e0       	ldi	r25, 0x0C	; 12
    6ad4:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    6ad6:	10 92 75 0c 	sts	0x0C75, r1	; 0x800c75 <twi_rxBufferIndex>
      break;
    6ada:	35 c0       	rjmp	.+106    	; 0x6b46 <__vector_26+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    6adc:	84 e0       	ldi	r24, 0x04	; 4
    6ade:	80 93 e1 0c 	sts	0x0CE1, r24	; 0x800ce1 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    6ae2:	10 92 97 0c 	sts	0x0C97, r1	; 0x800c97 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    6ae6:	10 92 96 0c 	sts	0x0C96, r1	; 0x800c96 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    6aea:	e0 91 dc 0c 	lds	r30, 0x0CDC	; 0x800cdc <twi_onSlaveTransmit>
    6aee:	f0 91 dd 0c 	lds	r31, 0x0CDD	; 0x800cdd <twi_onSlaveTransmit+0x1>
    6af2:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    6af4:	80 91 96 0c 	lds	r24, 0x0C96	; 0x800c96 <twi_txBufferLength>
    6af8:	81 11       	cpse	r24, r1
    6afa:	05 c0       	rjmp	.+10     	; 0x6b06 <__vector_26+0x1f6>
        twi_txBufferLength = 1;
    6afc:	81 e0       	ldi	r24, 0x01	; 1
    6afe:	80 93 96 0c 	sts	0x0C96, r24	; 0x800c96 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    6b02:	10 92 98 0c 	sts	0x0C98, r1	; 0x800c98 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    6b06:	e0 91 97 0c 	lds	r30, 0x0C97	; 0x800c97 <twi_txBufferIndex>
    6b0a:	81 e0       	ldi	r24, 0x01	; 1
    6b0c:	8e 0f       	add	r24, r30
    6b0e:	80 93 97 0c 	sts	0x0C97, r24	; 0x800c97 <twi_txBufferIndex>
    6b12:	f0 e0       	ldi	r31, 0x00	; 0
    6b14:	e8 56       	subi	r30, 0x68	; 104
    6b16:	f3 4f       	sbci	r31, 0xF3	; 243
    6b18:	80 81       	ld	r24, Z
    6b1a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    6b1e:	90 91 97 0c 	lds	r25, 0x0C97	; 0x800c97 <twi_txBufferIndex>
    6b22:	80 91 96 0c 	lds	r24, 0x0C96	; 0x800c96 <twi_txBufferLength>
    6b26:	98 17       	cp	r25, r24
    6b28:	08 f4       	brcc	.+2      	; 0x6b2c <__vector_26+0x21c>
    6b2a:	7d cf       	rjmp	.-262    	; 0x6a26 <__vector_26+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    6b2c:	85 e8       	ldi	r24, 0x85	; 133
    6b2e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    6b32:	09 c0       	rjmp	.+18     	; 0x6b46 <__vector_26+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    6b34:	85 ec       	ldi	r24, 0xC5	; 197
    6b36:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    6b3a:	10 92 e1 0c 	sts	0x0CE1, r1	; 0x800ce1 <twi_state>
      break;
    6b3e:	03 c0       	rjmp	.+6      	; 0x6b46 <__vector_26+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    6b40:	10 92 74 0c 	sts	0x0C74, r1	; 0x800c74 <twi_error>
      twi_stop();
    6b44:	d5 de       	rcall	.-598    	; 0x68f0 <twi_stop>
      break;
  }
}
    6b46:	ff 91       	pop	r31
    6b48:	ef 91       	pop	r30
    6b4a:	bf 91       	pop	r27
    6b4c:	af 91       	pop	r26
    6b4e:	9f 91       	pop	r25
    6b50:	8f 91       	pop	r24
    6b52:	7f 91       	pop	r23
    6b54:	6f 91       	pop	r22
    6b56:	5f 91       	pop	r21
    6b58:	4f 91       	pop	r20
    6b5a:	3f 91       	pop	r19
    6b5c:	2f 91       	pop	r18
    6b5e:	0f 90       	pop	r0
    6b60:	0b be       	out	0x3b, r0	; 59
    6b62:	0f 90       	pop	r0
    6b64:	0f be       	out	0x3f, r0	; 63
    6b66:	0f 90       	pop	r0
    6b68:	1f 90       	pop	r1
    6b6a:	18 95       	reti

00006b6c <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    6b6c:	80 91 16 0d 	lds	r24, 0x0D16	; 0x800d16 <_ZN7TwoWire14rxBufferLengthE>
    6b70:	90 e0       	ldi	r25, 0x00	; 0
    6b72:	20 91 17 0d 	lds	r18, 0x0D17	; 0x800d17 <_ZN7TwoWire13rxBufferIndexE>
    6b76:	82 1b       	sub	r24, r18
    6b78:	91 09       	sbc	r25, r1
    6b7a:	08 95       	ret

00006b7c <_ZN7TwoWire4readEv>:
    6b7c:	90 91 17 0d 	lds	r25, 0x0D17	; 0x800d17 <_ZN7TwoWire13rxBufferIndexE>
    6b80:	80 91 16 0d 	lds	r24, 0x0D16	; 0x800d16 <_ZN7TwoWire14rxBufferLengthE>
    6b84:	98 17       	cp	r25, r24
    6b86:	50 f4       	brcc	.+20     	; 0x6b9c <_ZN7TwoWire4readEv+0x20>
    6b88:	e9 2f       	mov	r30, r25
    6b8a:	f0 e0       	ldi	r31, 0x00	; 0
    6b8c:	e8 5e       	subi	r30, 0xE8	; 232
    6b8e:	f2 4f       	sbci	r31, 0xF2	; 242
    6b90:	20 81       	ld	r18, Z
    6b92:	30 e0       	ldi	r19, 0x00	; 0
    6b94:	9f 5f       	subi	r25, 0xFF	; 255
    6b96:	90 93 17 0d 	sts	0x0D17, r25	; 0x800d17 <_ZN7TwoWire13rxBufferIndexE>
    6b9a:	02 c0       	rjmp	.+4      	; 0x6ba0 <_ZN7TwoWire4readEv+0x24>
    6b9c:	2f ef       	ldi	r18, 0xFF	; 255
    6b9e:	3f ef       	ldi	r19, 0xFF	; 255
    6ba0:	c9 01       	movw	r24, r18
    6ba2:	08 95       	ret

00006ba4 <_ZN7TwoWire4peekEv>:
    6ba4:	e0 91 17 0d 	lds	r30, 0x0D17	; 0x800d17 <_ZN7TwoWire13rxBufferIndexE>
    6ba8:	80 91 16 0d 	lds	r24, 0x0D16	; 0x800d16 <_ZN7TwoWire14rxBufferLengthE>
    6bac:	e8 17       	cp	r30, r24
    6bae:	30 f4       	brcc	.+12     	; 0x6bbc <_ZN7TwoWire4peekEv+0x18>
    6bb0:	f0 e0       	ldi	r31, 0x00	; 0
    6bb2:	e8 5e       	subi	r30, 0xE8	; 232
    6bb4:	f2 4f       	sbci	r31, 0xF2	; 242
    6bb6:	80 81       	ld	r24, Z
    6bb8:	90 e0       	ldi	r25, 0x00	; 0
    6bba:	08 95       	ret
    6bbc:	8f ef       	ldi	r24, 0xFF	; 255
    6bbe:	9f ef       	ldi	r25, 0xFF	; 255
    6bc0:	08 95       	ret

00006bc2 <_ZN7TwoWire5flushEv>:
    6bc2:	08 95       	ret

00006bc4 <_ZN7TwoWire16onReceiveServiceEPhi>:
    6bc4:	cf 93       	push	r28
    6bc6:	df 93       	push	r29
    6bc8:	ec 01       	movw	r28, r24
    6bca:	e0 91 ee 0c 	lds	r30, 0x0CEE	; 0x800cee <_ZN7TwoWire14user_onReceiveE>
    6bce:	f0 91 ef 0c 	lds	r31, 0x0CEF	; 0x800cef <_ZN7TwoWire14user_onReceiveE+0x1>
    6bd2:	30 97       	sbiw	r30, 0x00	; 0
    6bd4:	f1 f0       	breq	.+60     	; 0x6c12 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    6bd6:	90 91 17 0d 	lds	r25, 0x0D17	; 0x800d17 <_ZN7TwoWire13rxBufferIndexE>
    6bda:	80 91 16 0d 	lds	r24, 0x0D16	; 0x800d16 <_ZN7TwoWire14rxBufferLengthE>
    6bde:	98 17       	cp	r25, r24
    6be0:	c0 f0       	brcs	.+48     	; 0x6c12 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    6be2:	90 e0       	ldi	r25, 0x00	; 0
    6be4:	29 2f       	mov	r18, r25
    6be6:	30 e0       	ldi	r19, 0x00	; 0
    6be8:	26 17       	cp	r18, r22
    6bea:	37 07       	cpc	r19, r23
    6bec:	54 f4       	brge	.+20     	; 0x6c02 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    6bee:	de 01       	movw	r26, r28
    6bf0:	a2 0f       	add	r26, r18
    6bf2:	b3 1f       	adc	r27, r19
    6bf4:	4c 91       	ld	r20, X
    6bf6:	d9 01       	movw	r26, r18
    6bf8:	a8 5e       	subi	r26, 0xE8	; 232
    6bfa:	b2 4f       	sbci	r27, 0xF2	; 242
    6bfc:	4c 93       	st	X, r20
    6bfe:	9f 5f       	subi	r25, 0xFF	; 255
    6c00:	f1 cf       	rjmp	.-30     	; 0x6be4 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    6c02:	10 92 17 0d 	sts	0x0D17, r1	; 0x800d17 <_ZN7TwoWire13rxBufferIndexE>
    6c06:	60 93 16 0d 	sts	0x0D16, r22	; 0x800d16 <_ZN7TwoWire14rxBufferLengthE>
    6c0a:	cb 01       	movw	r24, r22
    6c0c:	df 91       	pop	r29
    6c0e:	cf 91       	pop	r28
    6c10:	09 94       	ijmp
    6c12:	df 91       	pop	r29
    6c14:	cf 91       	pop	r28
    6c16:	08 95       	ret

00006c18 <_ZN7TwoWire16onRequestServiceEv>:
    6c18:	e0 91 f0 0c 	lds	r30, 0x0CF0	; 0x800cf0 <_ZN7TwoWire14user_onRequestE>
    6c1c:	f0 91 f1 0c 	lds	r31, 0x0CF1	; 0x800cf1 <_ZN7TwoWire14user_onRequestE+0x1>
    6c20:	30 97       	sbiw	r30, 0x00	; 0
    6c22:	29 f0       	breq	.+10     	; 0x6c2e <_ZN7TwoWire16onRequestServiceEv+0x16>
    6c24:	10 92 f4 0c 	sts	0x0CF4, r1	; 0x800cf4 <_ZN7TwoWire13txBufferIndexE>
    6c28:	10 92 f3 0c 	sts	0x0CF3, r1	; 0x800cf3 <_ZN7TwoWire14txBufferLengthE>
    6c2c:	09 94       	ijmp
    6c2e:	08 95       	ret

00006c30 <_ZN7TwoWire5writeEPKhj>:
    6c30:	cf 92       	push	r12
    6c32:	df 92       	push	r13
    6c34:	ef 92       	push	r14
    6c36:	ff 92       	push	r15
    6c38:	0f 93       	push	r16
    6c3a:	1f 93       	push	r17
    6c3c:	cf 93       	push	r28
    6c3e:	df 93       	push	r29
    6c40:	7c 01       	movw	r14, r24
    6c42:	cb 01       	movw	r24, r22
    6c44:	8a 01       	movw	r16, r20
    6c46:	20 91 f2 0c 	lds	r18, 0x0CF2	; 0x800cf2 <_ZN7TwoWire12transmittingE>
    6c4a:	22 23       	and	r18, r18
    6c4c:	89 f0       	breq	.+34     	; 0x6c70 <_ZN7TwoWire5writeEPKhj+0x40>
    6c4e:	eb 01       	movw	r28, r22
    6c50:	6b 01       	movw	r12, r22
    6c52:	c4 0e       	add	r12, r20
    6c54:	d5 1e       	adc	r13, r21
    6c56:	cc 15       	cp	r28, r12
    6c58:	dd 05       	cpc	r29, r13
    6c5a:	61 f0       	breq	.+24     	; 0x6c74 <_ZN7TwoWire5writeEPKhj+0x44>
    6c5c:	69 91       	ld	r22, Y+
    6c5e:	d7 01       	movw	r26, r14
    6c60:	ed 91       	ld	r30, X+
    6c62:	fc 91       	ld	r31, X
    6c64:	01 90       	ld	r0, Z+
    6c66:	f0 81       	ld	r31, Z
    6c68:	e0 2d       	mov	r30, r0
    6c6a:	c7 01       	movw	r24, r14
    6c6c:	09 95       	icall
    6c6e:	f3 cf       	rjmp	.-26     	; 0x6c56 <_ZN7TwoWire5writeEPKhj+0x26>
    6c70:	64 2f       	mov	r22, r20
    6c72:	0c de       	rcall	.-1000   	; 0x688c <twi_transmit>
    6c74:	c8 01       	movw	r24, r16
    6c76:	df 91       	pop	r29
    6c78:	cf 91       	pop	r28
    6c7a:	1f 91       	pop	r17
    6c7c:	0f 91       	pop	r16
    6c7e:	ff 90       	pop	r15
    6c80:	ef 90       	pop	r14
    6c82:	df 90       	pop	r13
    6c84:	cf 90       	pop	r12
    6c86:	08 95       	ret

00006c88 <_ZN7TwoWire5writeEh>:
    6c88:	cf 93       	push	r28
    6c8a:	df 93       	push	r29
    6c8c:	1f 92       	push	r1
    6c8e:	cd b7       	in	r28, 0x3d	; 61
    6c90:	de b7       	in	r29, 0x3e	; 62
    6c92:	69 83       	std	Y+1, r22	; 0x01
    6c94:	20 91 f2 0c 	lds	r18, 0x0CF2	; 0x800cf2 <_ZN7TwoWire12transmittingE>
    6c98:	22 23       	and	r18, r18
    6c9a:	d1 f0       	breq	.+52     	; 0x6cd0 <_ZN7TwoWire5writeEh+0x48>
    6c9c:	20 91 f3 0c 	lds	r18, 0x0CF3	; 0x800cf3 <_ZN7TwoWire14txBufferLengthE>
    6ca0:	20 32       	cpi	r18, 0x20	; 32
    6ca2:	40 f0       	brcs	.+16     	; 0x6cb4 <_ZN7TwoWire5writeEh+0x2c>
    6ca4:	21 e0       	ldi	r18, 0x01	; 1
    6ca6:	30 e0       	ldi	r19, 0x00	; 0
    6ca8:	fc 01       	movw	r30, r24
    6caa:	33 83       	std	Z+3, r19	; 0x03
    6cac:	22 83       	std	Z+2, r18	; 0x02
    6cae:	80 e0       	ldi	r24, 0x00	; 0
    6cb0:	90 e0       	ldi	r25, 0x00	; 0
    6cb2:	14 c0       	rjmp	.+40     	; 0x6cdc <_ZN7TwoWire5writeEh+0x54>
    6cb4:	80 91 f4 0c 	lds	r24, 0x0CF4	; 0x800cf4 <_ZN7TwoWire13txBufferIndexE>
    6cb8:	e8 2f       	mov	r30, r24
    6cba:	f0 e0       	ldi	r31, 0x00	; 0
    6cbc:	eb 50       	subi	r30, 0x0B	; 11
    6cbe:	f3 4f       	sbci	r31, 0xF3	; 243
    6cc0:	99 81       	ldd	r25, Y+1	; 0x01
    6cc2:	90 83       	st	Z, r25
    6cc4:	8f 5f       	subi	r24, 0xFF	; 255
    6cc6:	80 93 f4 0c 	sts	0x0CF4, r24	; 0x800cf4 <_ZN7TwoWire13txBufferIndexE>
    6cca:	80 93 f3 0c 	sts	0x0CF3, r24	; 0x800cf3 <_ZN7TwoWire14txBufferLengthE>
    6cce:	04 c0       	rjmp	.+8      	; 0x6cd8 <_ZN7TwoWire5writeEh+0x50>
    6cd0:	61 e0       	ldi	r22, 0x01	; 1
    6cd2:	ce 01       	movw	r24, r28
    6cd4:	01 96       	adiw	r24, 0x01	; 1
    6cd6:	da dd       	rcall	.-1100   	; 0x688c <twi_transmit>
    6cd8:	81 e0       	ldi	r24, 0x01	; 1
    6cda:	90 e0       	ldi	r25, 0x00	; 0
    6cdc:	0f 90       	pop	r0
    6cde:	df 91       	pop	r29
    6ce0:	cf 91       	pop	r28
    6ce2:	08 95       	ret

00006ce4 <_ZN7TwoWireC1Ev>:
    6ce4:	fc 01       	movw	r30, r24
    6ce6:	13 82       	std	Z+3, r1	; 0x03
    6ce8:	12 82       	std	Z+2, r1	; 0x02
    6cea:	88 ee       	ldi	r24, 0xE8	; 232
    6cec:	93 e0       	ldi	r25, 0x03	; 3
    6cee:	a0 e0       	ldi	r26, 0x00	; 0
    6cf0:	b0 e0       	ldi	r27, 0x00	; 0
    6cf2:	84 83       	std	Z+4, r24	; 0x04
    6cf4:	95 83       	std	Z+5, r25	; 0x05
    6cf6:	a6 83       	std	Z+6, r26	; 0x06
    6cf8:	b7 83       	std	Z+7, r27	; 0x07
    6cfa:	8e e5       	ldi	r24, 0x5E	; 94
    6cfc:	9a e0       	ldi	r25, 0x0A	; 10
    6cfe:	91 83       	std	Z+1, r25	; 0x01
    6d00:	80 83       	st	Z, r24
    6d02:	08 95       	ret

00006d04 <_ZN7TwoWire5beginEv>:
    6d04:	10 92 17 0d 	sts	0x0D17, r1	; 0x800d17 <_ZN7TwoWire13rxBufferIndexE>
    6d08:	10 92 16 0d 	sts	0x0D16, r1	; 0x800d16 <_ZN7TwoWire14rxBufferLengthE>
    6d0c:	10 92 f4 0c 	sts	0x0CF4, r1	; 0x800cf4 <_ZN7TwoWire13txBufferIndexE>
    6d10:	10 92 f3 0c 	sts	0x0CF3, r1	; 0x800cf3 <_ZN7TwoWire14txBufferLengthE>
    6d14:	de dc       	rcall	.-1604   	; 0x66d2 <twi_init>
    6d16:	8c e0       	ldi	r24, 0x0C	; 12
    6d18:	96 e3       	ldi	r25, 0x36	; 54
    6d1a:	e5 dd       	rcall	.-1078   	; 0x68e6 <twi_attachSlaveTxEvent>
    6d1c:	82 ee       	ldi	r24, 0xE2	; 226
    6d1e:	95 e3       	ldi	r25, 0x35	; 53
    6d20:	dd cd       	rjmp	.-1094   	; 0x68dc <twi_attachSlaveRxEvent>

00006d22 <_ZN7TwoWire3endEv>:
    6d22:	f5 cc       	rjmp	.-1558   	; 0x670e <twi_disable>

00006d24 <_ZN7TwoWire8setClockEm>:
    6d24:	cb 01       	movw	r24, r22
    6d26:	ba 01       	movw	r22, r20
    6d28:	ff cc       	rjmp	.-1538   	; 0x6728 <twi_setFrequency>

00006d2a <_ZN7TwoWire17beginTransmissionEh>:
    6d2a:	81 e0       	ldi	r24, 0x01	; 1
    6d2c:	80 93 f2 0c 	sts	0x0CF2, r24	; 0x800cf2 <_ZN7TwoWire12transmittingE>
    6d30:	60 93 15 0d 	sts	0x0D15, r22	; 0x800d15 <_ZN7TwoWire9txAddressE>
    6d34:	10 92 f4 0c 	sts	0x0CF4, r1	; 0x800cf4 <_ZN7TwoWire13txBufferIndexE>
    6d38:	10 92 f3 0c 	sts	0x0CF3, r1	; 0x800cf3 <_ZN7TwoWire14txBufferLengthE>
    6d3c:	08 95       	ret

00006d3e <_ZN7TwoWire17beginTransmissionEi>:
    6d3e:	f5 cf       	rjmp	.-22     	; 0x6d2a <_ZN7TwoWire17beginTransmissionEh>

00006d40 <_ZN7TwoWire15endTransmissionEh>:
    6d40:	0f 93       	push	r16
    6d42:	06 2f       	mov	r16, r22
    6d44:	21 e0       	ldi	r18, 0x01	; 1
    6d46:	40 91 f3 0c 	lds	r20, 0x0CF3	; 0x800cf3 <_ZN7TwoWire14txBufferLengthE>
    6d4a:	65 ef       	ldi	r22, 0xF5	; 245
    6d4c:	7c e0       	ldi	r23, 0x0C	; 12
    6d4e:	80 91 15 0d 	lds	r24, 0x0D15	; 0x800d15 <_ZN7TwoWire9txAddressE>
    6d52:	46 dd       	rcall	.-1396   	; 0x67e0 <twi_writeTo>
    6d54:	10 92 f4 0c 	sts	0x0CF4, r1	; 0x800cf4 <_ZN7TwoWire13txBufferIndexE>
    6d58:	10 92 f3 0c 	sts	0x0CF3, r1	; 0x800cf3 <_ZN7TwoWire14txBufferLengthE>
    6d5c:	10 92 f2 0c 	sts	0x0CF2, r1	; 0x800cf2 <_ZN7TwoWire12transmittingE>
    6d60:	0f 91       	pop	r16
    6d62:	08 95       	ret

00006d64 <_ZN7TwoWire11requestFromEhhmhh>:
    6d64:	4f 92       	push	r4
    6d66:	5f 92       	push	r5
    6d68:	6f 92       	push	r6
    6d6a:	7f 92       	push	r7
    6d6c:	af 92       	push	r10
    6d6e:	bf 92       	push	r11
    6d70:	cf 92       	push	r12
    6d72:	ef 92       	push	r14
    6d74:	ff 92       	push	r15
    6d76:	0f 93       	push	r16
    6d78:	1f 93       	push	r17
    6d7a:	cf 93       	push	r28
    6d7c:	df 93       	push	r29
    6d7e:	5c 01       	movw	r10, r24
    6d80:	f6 2e       	mov	r15, r22
    6d82:	d4 2f       	mov	r29, r20
    6d84:	28 01       	movw	r4, r16
    6d86:	39 01       	movw	r6, r18
    6d88:	ee 20       	and	r14, r14
    6d8a:	11 f1       	breq	.+68     	; 0x6dd0 <_ZN7TwoWire11requestFromEhhmhh+0x6c>
    6d8c:	ce df       	rcall	.-100    	; 0x6d2a <_ZN7TwoWire17beginTransmissionEh>
    6d8e:	ce 2d       	mov	r28, r14
    6d90:	c4 30       	cpi	r28, 0x04	; 4
    6d92:	08 f0       	brcs	.+2      	; 0x6d96 <_ZN7TwoWire11requestFromEhhmhh+0x32>
    6d94:	c3 e0       	ldi	r28, 0x03	; 3
    6d96:	c1 50       	subi	r28, 0x01	; 1
    6d98:	c0 f0       	brcs	.+48     	; 0x6dca <_ZN7TwoWire11requestFromEhhmhh+0x66>
    6d9a:	28 e0       	ldi	r18, 0x08	; 8
    6d9c:	c2 9f       	mul	r28, r18
    6d9e:	c0 01       	movw	r24, r0
    6da0:	11 24       	eor	r1, r1
    6da2:	a3 01       	movw	r20, r6
    6da4:	92 01       	movw	r18, r4
    6da6:	04 c0       	rjmp	.+8      	; 0x6db0 <_ZN7TwoWire11requestFromEhhmhh+0x4c>
    6da8:	56 95       	lsr	r21
    6daa:	47 95       	ror	r20
    6dac:	37 95       	ror	r19
    6dae:	27 95       	ror	r18
    6db0:	8a 95       	dec	r24
    6db2:	d2 f7       	brpl	.-12     	; 0x6da8 <_ZN7TwoWire11requestFromEhhmhh+0x44>
    6db4:	ca 01       	movw	r24, r20
    6db6:	b9 01       	movw	r22, r18
    6db8:	d5 01       	movw	r26, r10
    6dba:	ed 91       	ld	r30, X+
    6dbc:	fc 91       	ld	r31, X
    6dbe:	01 90       	ld	r0, Z+
    6dc0:	f0 81       	ld	r31, Z
    6dc2:	e0 2d       	mov	r30, r0
    6dc4:	c5 01       	movw	r24, r10
    6dc6:	09 95       	icall
    6dc8:	e6 cf       	rjmp	.-52     	; 0x6d96 <_ZN7TwoWire11requestFromEhhmhh+0x32>
    6dca:	60 e0       	ldi	r22, 0x00	; 0
    6dcc:	c5 01       	movw	r24, r10
    6dce:	b8 df       	rcall	.-144    	; 0x6d40 <_ZN7TwoWire15endTransmissionEh>
    6dd0:	4d 2f       	mov	r20, r29
    6dd2:	d1 32       	cpi	r29, 0x21	; 33
    6dd4:	08 f0       	brcs	.+2      	; 0x6dd8 <_ZN7TwoWire11requestFromEhhmhh+0x74>
    6dd6:	40 e2       	ldi	r20, 0x20	; 32
    6dd8:	2c 2d       	mov	r18, r12
    6dda:	68 e1       	ldi	r22, 0x18	; 24
    6ddc:	7d e0       	ldi	r23, 0x0D	; 13
    6dde:	8f 2d       	mov	r24, r15
    6de0:	b7 dc       	rcall	.-1682   	; 0x6750 <twi_readFrom>
    6de2:	10 92 17 0d 	sts	0x0D17, r1	; 0x800d17 <_ZN7TwoWire13rxBufferIndexE>
    6de6:	80 93 16 0d 	sts	0x0D16, r24	; 0x800d16 <_ZN7TwoWire14rxBufferLengthE>
    6dea:	df 91       	pop	r29
    6dec:	cf 91       	pop	r28
    6dee:	1f 91       	pop	r17
    6df0:	0f 91       	pop	r16
    6df2:	ff 90       	pop	r15
    6df4:	ef 90       	pop	r14
    6df6:	cf 90       	pop	r12
    6df8:	bf 90       	pop	r11
    6dfa:	af 90       	pop	r10
    6dfc:	7f 90       	pop	r7
    6dfe:	6f 90       	pop	r6
    6e00:	5f 90       	pop	r5
    6e02:	4f 90       	pop	r4
    6e04:	08 95       	ret

00006e06 <_ZN7TwoWire11requestFromEhhh>:
    6e06:	cf 92       	push	r12
    6e08:	ef 92       	push	r14
    6e0a:	0f 93       	push	r16
    6e0c:	1f 93       	push	r17
    6e0e:	c2 2e       	mov	r12, r18
    6e10:	e1 2c       	mov	r14, r1
    6e12:	00 e0       	ldi	r16, 0x00	; 0
    6e14:	10 e0       	ldi	r17, 0x00	; 0
    6e16:	98 01       	movw	r18, r16
    6e18:	a5 df       	rcall	.-182    	; 0x6d64 <_ZN7TwoWire11requestFromEhhmhh>
    6e1a:	1f 91       	pop	r17
    6e1c:	0f 91       	pop	r16
    6e1e:	ef 90       	pop	r14
    6e20:	cf 90       	pop	r12
    6e22:	08 95       	ret

00006e24 <_ZN7TwoWire11requestFromEhh>:
    6e24:	21 e0       	ldi	r18, 0x01	; 1
    6e26:	ef cf       	rjmp	.-34     	; 0x6e06 <_ZN7TwoWire11requestFromEhhh>

00006e28 <_ZN7TwoWire11requestFromEii>:
    6e28:	21 e0       	ldi	r18, 0x01	; 1
    6e2a:	ed cf       	rjmp	.-38     	; 0x6e06 <_ZN7TwoWire11requestFromEhhh>

00006e2c <_ZN7TwoWire15endTransmissionEv>:
    6e2c:	61 e0       	ldi	r22, 0x01	; 1
    6e2e:	88 cf       	rjmp	.-240    	; 0x6d40 <_ZN7TwoWire15endTransmissionEh>

00006e30 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    6e30:	82 ee       	ldi	r24, 0xE2	; 226
    6e32:	9c e0       	ldi	r25, 0x0C	; 12
    6e34:	57 cf       	rjmp	.-338    	; 0x6ce4 <_ZN7TwoWireC1Ev>

00006e36 <__cmpsf2>:
    6e36:	a8 d0       	rcall	.+336    	; 0x6f88 <__fp_cmp>
    6e38:	08 f4       	brcc	.+2      	; 0x6e3c <__cmpsf2+0x6>
    6e3a:	81 e0       	ldi	r24, 0x01	; 1
    6e3c:	08 95       	ret

00006e3e <__divsf3>:
    6e3e:	0c d0       	rcall	.+24     	; 0x6e58 <__divsf3x>
    6e40:	de c0       	rjmp	.+444    	; 0x6ffe <__fp_round>
    6e42:	d6 d0       	rcall	.+428    	; 0x6ff0 <__fp_pscB>
    6e44:	40 f0       	brcs	.+16     	; 0x6e56 <__divsf3+0x18>
    6e46:	cd d0       	rcall	.+410    	; 0x6fe2 <__fp_pscA>
    6e48:	30 f0       	brcs	.+12     	; 0x6e56 <__divsf3+0x18>
    6e4a:	21 f4       	brne	.+8      	; 0x6e54 <__divsf3+0x16>
    6e4c:	5f 3f       	cpi	r21, 0xFF	; 255
    6e4e:	19 f0       	breq	.+6      	; 0x6e56 <__divsf3+0x18>
    6e50:	bf c0       	rjmp	.+382    	; 0x6fd0 <__fp_inf>
    6e52:	51 11       	cpse	r21, r1
    6e54:	08 c1       	rjmp	.+528    	; 0x7066 <__fp_szero>
    6e56:	c2 c0       	rjmp	.+388    	; 0x6fdc <__fp_nan>

00006e58 <__divsf3x>:
    6e58:	e3 d0       	rcall	.+454    	; 0x7020 <__fp_split3>
    6e5a:	98 f3       	brcs	.-26     	; 0x6e42 <__divsf3+0x4>

00006e5c <__divsf3_pse>:
    6e5c:	99 23       	and	r25, r25
    6e5e:	c9 f3       	breq	.-14     	; 0x6e52 <__divsf3+0x14>
    6e60:	55 23       	and	r21, r21
    6e62:	b1 f3       	breq	.-20     	; 0x6e50 <__divsf3+0x12>
    6e64:	95 1b       	sub	r25, r21
    6e66:	55 0b       	sbc	r21, r21
    6e68:	bb 27       	eor	r27, r27
    6e6a:	aa 27       	eor	r26, r26
    6e6c:	62 17       	cp	r22, r18
    6e6e:	73 07       	cpc	r23, r19
    6e70:	84 07       	cpc	r24, r20
    6e72:	38 f0       	brcs	.+14     	; 0x6e82 <__divsf3_pse+0x26>
    6e74:	9f 5f       	subi	r25, 0xFF	; 255
    6e76:	5f 4f       	sbci	r21, 0xFF	; 255
    6e78:	22 0f       	add	r18, r18
    6e7a:	33 1f       	adc	r19, r19
    6e7c:	44 1f       	adc	r20, r20
    6e7e:	aa 1f       	adc	r26, r26
    6e80:	a9 f3       	breq	.-22     	; 0x6e6c <__divsf3_pse+0x10>
    6e82:	33 d0       	rcall	.+102    	; 0x6eea <__divsf3_pse+0x8e>
    6e84:	0e 2e       	mov	r0, r30
    6e86:	3a f0       	brmi	.+14     	; 0x6e96 <__divsf3_pse+0x3a>
    6e88:	e0 e8       	ldi	r30, 0x80	; 128
    6e8a:	30 d0       	rcall	.+96     	; 0x6eec <__divsf3_pse+0x90>
    6e8c:	91 50       	subi	r25, 0x01	; 1
    6e8e:	50 40       	sbci	r21, 0x00	; 0
    6e90:	e6 95       	lsr	r30
    6e92:	00 1c       	adc	r0, r0
    6e94:	ca f7       	brpl	.-14     	; 0x6e88 <__divsf3_pse+0x2c>
    6e96:	29 d0       	rcall	.+82     	; 0x6eea <__divsf3_pse+0x8e>
    6e98:	fe 2f       	mov	r31, r30
    6e9a:	27 d0       	rcall	.+78     	; 0x6eea <__divsf3_pse+0x8e>
    6e9c:	66 0f       	add	r22, r22
    6e9e:	77 1f       	adc	r23, r23
    6ea0:	88 1f       	adc	r24, r24
    6ea2:	bb 1f       	adc	r27, r27
    6ea4:	26 17       	cp	r18, r22
    6ea6:	37 07       	cpc	r19, r23
    6ea8:	48 07       	cpc	r20, r24
    6eaa:	ab 07       	cpc	r26, r27
    6eac:	b0 e8       	ldi	r27, 0x80	; 128
    6eae:	09 f0       	breq	.+2      	; 0x6eb2 <__divsf3_pse+0x56>
    6eb0:	bb 0b       	sbc	r27, r27
    6eb2:	80 2d       	mov	r24, r0
    6eb4:	bf 01       	movw	r22, r30
    6eb6:	ff 27       	eor	r31, r31
    6eb8:	93 58       	subi	r25, 0x83	; 131
    6eba:	5f 4f       	sbci	r21, 0xFF	; 255
    6ebc:	2a f0       	brmi	.+10     	; 0x6ec8 <__divsf3_pse+0x6c>
    6ebe:	9e 3f       	cpi	r25, 0xFE	; 254
    6ec0:	51 05       	cpc	r21, r1
    6ec2:	68 f0       	brcs	.+26     	; 0x6ede <__divsf3_pse+0x82>
    6ec4:	85 c0       	rjmp	.+266    	; 0x6fd0 <__fp_inf>
    6ec6:	cf c0       	rjmp	.+414    	; 0x7066 <__fp_szero>
    6ec8:	5f 3f       	cpi	r21, 0xFF	; 255
    6eca:	ec f3       	brlt	.-6      	; 0x6ec6 <__divsf3_pse+0x6a>
    6ecc:	98 3e       	cpi	r25, 0xE8	; 232
    6ece:	dc f3       	brlt	.-10     	; 0x6ec6 <__divsf3_pse+0x6a>
    6ed0:	86 95       	lsr	r24
    6ed2:	77 95       	ror	r23
    6ed4:	67 95       	ror	r22
    6ed6:	b7 95       	ror	r27
    6ed8:	f7 95       	ror	r31
    6eda:	9f 5f       	subi	r25, 0xFF	; 255
    6edc:	c9 f7       	brne	.-14     	; 0x6ed0 <__divsf3_pse+0x74>
    6ede:	88 0f       	add	r24, r24
    6ee0:	91 1d       	adc	r25, r1
    6ee2:	96 95       	lsr	r25
    6ee4:	87 95       	ror	r24
    6ee6:	97 f9       	bld	r25, 7
    6ee8:	08 95       	ret
    6eea:	e1 e0       	ldi	r30, 0x01	; 1
    6eec:	66 0f       	add	r22, r22
    6eee:	77 1f       	adc	r23, r23
    6ef0:	88 1f       	adc	r24, r24
    6ef2:	bb 1f       	adc	r27, r27
    6ef4:	62 17       	cp	r22, r18
    6ef6:	73 07       	cpc	r23, r19
    6ef8:	84 07       	cpc	r24, r20
    6efa:	ba 07       	cpc	r27, r26
    6efc:	20 f0       	brcs	.+8      	; 0x6f06 <__divsf3_pse+0xaa>
    6efe:	62 1b       	sub	r22, r18
    6f00:	73 0b       	sbc	r23, r19
    6f02:	84 0b       	sbc	r24, r20
    6f04:	ba 0b       	sbc	r27, r26
    6f06:	ee 1f       	adc	r30, r30
    6f08:	88 f7       	brcc	.-30     	; 0x6eec <__divsf3_pse+0x90>
    6f0a:	e0 95       	com	r30
    6f0c:	08 95       	ret

00006f0e <__floatunsisf>:
    6f0e:	e8 94       	clt
    6f10:	09 c0       	rjmp	.+18     	; 0x6f24 <__floatsisf+0x12>

00006f12 <__floatsisf>:
    6f12:	97 fb       	bst	r25, 7
    6f14:	3e f4       	brtc	.+14     	; 0x6f24 <__floatsisf+0x12>
    6f16:	90 95       	com	r25
    6f18:	80 95       	com	r24
    6f1a:	70 95       	com	r23
    6f1c:	61 95       	neg	r22
    6f1e:	7f 4f       	sbci	r23, 0xFF	; 255
    6f20:	8f 4f       	sbci	r24, 0xFF	; 255
    6f22:	9f 4f       	sbci	r25, 0xFF	; 255
    6f24:	99 23       	and	r25, r25
    6f26:	a9 f0       	breq	.+42     	; 0x6f52 <__floatsisf+0x40>
    6f28:	f9 2f       	mov	r31, r25
    6f2a:	96 e9       	ldi	r25, 0x96	; 150
    6f2c:	bb 27       	eor	r27, r27
    6f2e:	93 95       	inc	r25
    6f30:	f6 95       	lsr	r31
    6f32:	87 95       	ror	r24
    6f34:	77 95       	ror	r23
    6f36:	67 95       	ror	r22
    6f38:	b7 95       	ror	r27
    6f3a:	f1 11       	cpse	r31, r1
    6f3c:	f8 cf       	rjmp	.-16     	; 0x6f2e <__floatsisf+0x1c>
    6f3e:	fa f4       	brpl	.+62     	; 0x6f7e <__floatsisf+0x6c>
    6f40:	bb 0f       	add	r27, r27
    6f42:	11 f4       	brne	.+4      	; 0x6f48 <__floatsisf+0x36>
    6f44:	60 ff       	sbrs	r22, 0
    6f46:	1b c0       	rjmp	.+54     	; 0x6f7e <__floatsisf+0x6c>
    6f48:	6f 5f       	subi	r22, 0xFF	; 255
    6f4a:	7f 4f       	sbci	r23, 0xFF	; 255
    6f4c:	8f 4f       	sbci	r24, 0xFF	; 255
    6f4e:	9f 4f       	sbci	r25, 0xFF	; 255
    6f50:	16 c0       	rjmp	.+44     	; 0x6f7e <__floatsisf+0x6c>
    6f52:	88 23       	and	r24, r24
    6f54:	11 f0       	breq	.+4      	; 0x6f5a <__floatsisf+0x48>
    6f56:	96 e9       	ldi	r25, 0x96	; 150
    6f58:	11 c0       	rjmp	.+34     	; 0x6f7c <__floatsisf+0x6a>
    6f5a:	77 23       	and	r23, r23
    6f5c:	21 f0       	breq	.+8      	; 0x6f66 <__floatsisf+0x54>
    6f5e:	9e e8       	ldi	r25, 0x8E	; 142
    6f60:	87 2f       	mov	r24, r23
    6f62:	76 2f       	mov	r23, r22
    6f64:	05 c0       	rjmp	.+10     	; 0x6f70 <__floatsisf+0x5e>
    6f66:	66 23       	and	r22, r22
    6f68:	71 f0       	breq	.+28     	; 0x6f86 <__floatsisf+0x74>
    6f6a:	96 e8       	ldi	r25, 0x86	; 134
    6f6c:	86 2f       	mov	r24, r22
    6f6e:	70 e0       	ldi	r23, 0x00	; 0
    6f70:	60 e0       	ldi	r22, 0x00	; 0
    6f72:	2a f0       	brmi	.+10     	; 0x6f7e <__floatsisf+0x6c>
    6f74:	9a 95       	dec	r25
    6f76:	66 0f       	add	r22, r22
    6f78:	77 1f       	adc	r23, r23
    6f7a:	88 1f       	adc	r24, r24
    6f7c:	da f7       	brpl	.-10     	; 0x6f74 <__floatsisf+0x62>
    6f7e:	88 0f       	add	r24, r24
    6f80:	96 95       	lsr	r25
    6f82:	87 95       	ror	r24
    6f84:	97 f9       	bld	r25, 7
    6f86:	08 95       	ret

00006f88 <__fp_cmp>:
    6f88:	99 0f       	add	r25, r25
    6f8a:	00 08       	sbc	r0, r0
    6f8c:	55 0f       	add	r21, r21
    6f8e:	aa 0b       	sbc	r26, r26
    6f90:	e0 e8       	ldi	r30, 0x80	; 128
    6f92:	fe ef       	ldi	r31, 0xFE	; 254
    6f94:	16 16       	cp	r1, r22
    6f96:	17 06       	cpc	r1, r23
    6f98:	e8 07       	cpc	r30, r24
    6f9a:	f9 07       	cpc	r31, r25
    6f9c:	c0 f0       	brcs	.+48     	; 0x6fce <__fp_cmp+0x46>
    6f9e:	12 16       	cp	r1, r18
    6fa0:	13 06       	cpc	r1, r19
    6fa2:	e4 07       	cpc	r30, r20
    6fa4:	f5 07       	cpc	r31, r21
    6fa6:	98 f0       	brcs	.+38     	; 0x6fce <__fp_cmp+0x46>
    6fa8:	62 1b       	sub	r22, r18
    6faa:	73 0b       	sbc	r23, r19
    6fac:	84 0b       	sbc	r24, r20
    6fae:	95 0b       	sbc	r25, r21
    6fb0:	39 f4       	brne	.+14     	; 0x6fc0 <__fp_cmp+0x38>
    6fb2:	0a 26       	eor	r0, r26
    6fb4:	61 f0       	breq	.+24     	; 0x6fce <__fp_cmp+0x46>
    6fb6:	23 2b       	or	r18, r19
    6fb8:	24 2b       	or	r18, r20
    6fba:	25 2b       	or	r18, r21
    6fbc:	21 f4       	brne	.+8      	; 0x6fc6 <__fp_cmp+0x3e>
    6fbe:	08 95       	ret
    6fc0:	0a 26       	eor	r0, r26
    6fc2:	09 f4       	brne	.+2      	; 0x6fc6 <__fp_cmp+0x3e>
    6fc4:	a1 40       	sbci	r26, 0x01	; 1
    6fc6:	a6 95       	lsr	r26
    6fc8:	8f ef       	ldi	r24, 0xFF	; 255
    6fca:	81 1d       	adc	r24, r1
    6fcc:	81 1d       	adc	r24, r1
    6fce:	08 95       	ret

00006fd0 <__fp_inf>:
    6fd0:	97 f9       	bld	r25, 7
    6fd2:	9f 67       	ori	r25, 0x7F	; 127
    6fd4:	80 e8       	ldi	r24, 0x80	; 128
    6fd6:	70 e0       	ldi	r23, 0x00	; 0
    6fd8:	60 e0       	ldi	r22, 0x00	; 0
    6fda:	08 95       	ret

00006fdc <__fp_nan>:
    6fdc:	9f ef       	ldi	r25, 0xFF	; 255
    6fde:	80 ec       	ldi	r24, 0xC0	; 192
    6fe0:	08 95       	ret

00006fe2 <__fp_pscA>:
    6fe2:	00 24       	eor	r0, r0
    6fe4:	0a 94       	dec	r0
    6fe6:	16 16       	cp	r1, r22
    6fe8:	17 06       	cpc	r1, r23
    6fea:	18 06       	cpc	r1, r24
    6fec:	09 06       	cpc	r0, r25
    6fee:	08 95       	ret

00006ff0 <__fp_pscB>:
    6ff0:	00 24       	eor	r0, r0
    6ff2:	0a 94       	dec	r0
    6ff4:	12 16       	cp	r1, r18
    6ff6:	13 06       	cpc	r1, r19
    6ff8:	14 06       	cpc	r1, r20
    6ffa:	05 06       	cpc	r0, r21
    6ffc:	08 95       	ret

00006ffe <__fp_round>:
    6ffe:	09 2e       	mov	r0, r25
    7000:	03 94       	inc	r0
    7002:	00 0c       	add	r0, r0
    7004:	11 f4       	brne	.+4      	; 0x700a <__fp_round+0xc>
    7006:	88 23       	and	r24, r24
    7008:	52 f0       	brmi	.+20     	; 0x701e <__fp_round+0x20>
    700a:	bb 0f       	add	r27, r27
    700c:	40 f4       	brcc	.+16     	; 0x701e <__fp_round+0x20>
    700e:	bf 2b       	or	r27, r31
    7010:	11 f4       	brne	.+4      	; 0x7016 <__fp_round+0x18>
    7012:	60 ff       	sbrs	r22, 0
    7014:	04 c0       	rjmp	.+8      	; 0x701e <__fp_round+0x20>
    7016:	6f 5f       	subi	r22, 0xFF	; 255
    7018:	7f 4f       	sbci	r23, 0xFF	; 255
    701a:	8f 4f       	sbci	r24, 0xFF	; 255
    701c:	9f 4f       	sbci	r25, 0xFF	; 255
    701e:	08 95       	ret

00007020 <__fp_split3>:
    7020:	57 fd       	sbrc	r21, 7
    7022:	90 58       	subi	r25, 0x80	; 128
    7024:	44 0f       	add	r20, r20
    7026:	55 1f       	adc	r21, r21
    7028:	59 f0       	breq	.+22     	; 0x7040 <__fp_splitA+0x10>
    702a:	5f 3f       	cpi	r21, 0xFF	; 255
    702c:	71 f0       	breq	.+28     	; 0x704a <__fp_splitA+0x1a>
    702e:	47 95       	ror	r20

00007030 <__fp_splitA>:
    7030:	88 0f       	add	r24, r24
    7032:	97 fb       	bst	r25, 7
    7034:	99 1f       	adc	r25, r25
    7036:	61 f0       	breq	.+24     	; 0x7050 <__fp_splitA+0x20>
    7038:	9f 3f       	cpi	r25, 0xFF	; 255
    703a:	79 f0       	breq	.+30     	; 0x705a <__fp_splitA+0x2a>
    703c:	87 95       	ror	r24
    703e:	08 95       	ret
    7040:	12 16       	cp	r1, r18
    7042:	13 06       	cpc	r1, r19
    7044:	14 06       	cpc	r1, r20
    7046:	55 1f       	adc	r21, r21
    7048:	f2 cf       	rjmp	.-28     	; 0x702e <__fp_split3+0xe>
    704a:	46 95       	lsr	r20
    704c:	f1 df       	rcall	.-30     	; 0x7030 <__fp_splitA>
    704e:	08 c0       	rjmp	.+16     	; 0x7060 <__fp_splitA+0x30>
    7050:	16 16       	cp	r1, r22
    7052:	17 06       	cpc	r1, r23
    7054:	18 06       	cpc	r1, r24
    7056:	99 1f       	adc	r25, r25
    7058:	f1 cf       	rjmp	.-30     	; 0x703c <__fp_splitA+0xc>
    705a:	86 95       	lsr	r24
    705c:	71 05       	cpc	r23, r1
    705e:	61 05       	cpc	r22, r1
    7060:	08 94       	sec
    7062:	08 95       	ret

00007064 <__fp_zero>:
    7064:	e8 94       	clt

00007066 <__fp_szero>:
    7066:	bb 27       	eor	r27, r27
    7068:	66 27       	eor	r22, r22
    706a:	77 27       	eor	r23, r23
    706c:	cb 01       	movw	r24, r22
    706e:	97 f9       	bld	r25, 7
    7070:	08 95       	ret

00007072 <__cxa_pure_virtual>:
    7072:	0e 94 c3 42 	call	0x8586	; 0x8586 <abort>

00007076 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    7076:	1f 92       	push	r1
    7078:	0f 92       	push	r0
    707a:	0f b6       	in	r0, 0x3f	; 63
    707c:	0f 92       	push	r0
    707e:	11 24       	eor	r1, r1
    7080:	2f 93       	push	r18
    7082:	8f 93       	push	r24
    7084:	9f 93       	push	r25
    7086:	ef 93       	push	r30
    7088:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    708a:	e0 91 48 0d 	lds	r30, 0x0D48	; 0x800d48 <Serial+0x10>
    708e:	f0 91 49 0d 	lds	r31, 0x0D49	; 0x800d49 <Serial+0x11>
    7092:	80 81       	ld	r24, Z
    7094:	e0 91 4e 0d 	lds	r30, 0x0D4E	; 0x800d4e <Serial+0x16>
    7098:	f0 91 4f 0d 	lds	r31, 0x0D4F	; 0x800d4f <Serial+0x17>
    709c:	82 fd       	sbrc	r24, 2
    709e:	12 c0       	rjmp	.+36     	; 0x70c4 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    70a0:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    70a2:	80 91 51 0d 	lds	r24, 0x0D51	; 0x800d51 <Serial+0x19>
    70a6:	8f 5f       	subi	r24, 0xFF	; 255
    70a8:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    70aa:	20 91 52 0d 	lds	r18, 0x0D52	; 0x800d52 <Serial+0x1a>
    70ae:	82 17       	cp	r24, r18
    70b0:	51 f0       	breq	.+20     	; 0x70c6 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    70b2:	e0 91 51 0d 	lds	r30, 0x0D51	; 0x800d51 <Serial+0x19>
    70b6:	f0 e0       	ldi	r31, 0x00	; 0
    70b8:	e8 5c       	subi	r30, 0xC8	; 200
    70ba:	f2 4f       	sbci	r31, 0xF2	; 242
    70bc:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    70be:	80 93 51 0d 	sts	0x0D51, r24	; 0x800d51 <Serial+0x19>
    70c2:	01 c0       	rjmp	.+2      	; 0x70c6 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    70c4:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    70c6:	ff 91       	pop	r31
    70c8:	ef 91       	pop	r30
    70ca:	9f 91       	pop	r25
    70cc:	8f 91       	pop	r24
    70ce:	2f 91       	pop	r18
    70d0:	0f 90       	pop	r0
    70d2:	0f be       	out	0x3f, r0	; 63
    70d4:	0f 90       	pop	r0
    70d6:	1f 90       	pop	r1
    70d8:	18 95       	reti

000070da <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    70da:	1f 92       	push	r1
    70dc:	0f 92       	push	r0
    70de:	0f b6       	in	r0, 0x3f	; 63
    70e0:	0f 92       	push	r0
    70e2:	11 24       	eor	r1, r1
    70e4:	2f 93       	push	r18
    70e6:	3f 93       	push	r19
    70e8:	4f 93       	push	r20
    70ea:	5f 93       	push	r21
    70ec:	6f 93       	push	r22
    70ee:	7f 93       	push	r23
    70f0:	8f 93       	push	r24
    70f2:	9f 93       	push	r25
    70f4:	af 93       	push	r26
    70f6:	bf 93       	push	r27
    70f8:	ef 93       	push	r30
    70fa:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    70fc:	88 e3       	ldi	r24, 0x38	; 56
    70fe:	9d e0       	ldi	r25, 0x0D	; 13
    7100:	2e d7       	rcall	.+3676   	; 0x7f5e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    7102:	ff 91       	pop	r31
    7104:	ef 91       	pop	r30
    7106:	bf 91       	pop	r27
    7108:	af 91       	pop	r26
    710a:	9f 91       	pop	r25
    710c:	8f 91       	pop	r24
    710e:	7f 91       	pop	r23
    7110:	6f 91       	pop	r22
    7112:	5f 91       	pop	r21
    7114:	4f 91       	pop	r20
    7116:	3f 91       	pop	r19
    7118:	2f 91       	pop	r18
    711a:	0f 90       	pop	r0
    711c:	0f be       	out	0x3f, r0	; 63
    711e:	0f 90       	pop	r0
    7120:	1f 90       	pop	r1
    7122:	18 95       	reti

00007124 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    7124:	88 e3       	ldi	r24, 0x38	; 56
    7126:	9d e0       	ldi	r25, 0x0D	; 13
    7128:	d0 d6       	rcall	.+3488   	; 0x7eca <_ZN14HardwareSerial9availableEv>
    712a:	21 e0       	ldi	r18, 0x01	; 1
    712c:	89 2b       	or	r24, r25
    712e:	09 f4       	brne	.+2      	; 0x7132 <_Z17Serial0_availablev+0xe>
    7130:	20 e0       	ldi	r18, 0x00	; 0
}
    7132:	82 2f       	mov	r24, r18
    7134:	08 95       	ret

00007136 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    7136:	e8 e3       	ldi	r30, 0x38	; 56
    7138:	fd e0       	ldi	r31, 0x0D	; 13
    713a:	13 82       	std	Z+3, r1	; 0x03
    713c:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    713e:	88 ee       	ldi	r24, 0xE8	; 232
    7140:	93 e0       	ldi	r25, 0x03	; 3
    7142:	a0 e0       	ldi	r26, 0x00	; 0
    7144:	b0 e0       	ldi	r27, 0x00	; 0
    7146:	84 83       	std	Z+4, r24	; 0x04
    7148:	95 83       	std	Z+5, r25	; 0x05
    714a:	a6 83       	std	Z+6, r26	; 0x06
    714c:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    714e:	82 e8       	ldi	r24, 0x82	; 130
    7150:	9a e0       	ldi	r25, 0x0A	; 10
    7152:	91 83       	std	Z+1, r25	; 0x01
    7154:	80 83       	st	Z, r24
    7156:	85 ec       	ldi	r24, 0xC5	; 197
    7158:	90 e0       	ldi	r25, 0x00	; 0
    715a:	95 87       	std	Z+13, r25	; 0x0d
    715c:	84 87       	std	Z+12, r24	; 0x0c
    715e:	84 ec       	ldi	r24, 0xC4	; 196
    7160:	90 e0       	ldi	r25, 0x00	; 0
    7162:	97 87       	std	Z+15, r25	; 0x0f
    7164:	86 87       	std	Z+14, r24	; 0x0e
    7166:	80 ec       	ldi	r24, 0xC0	; 192
    7168:	90 e0       	ldi	r25, 0x00	; 0
    716a:	91 8b       	std	Z+17, r25	; 0x11
    716c:	80 8b       	std	Z+16, r24	; 0x10
    716e:	81 ec       	ldi	r24, 0xC1	; 193
    7170:	90 e0       	ldi	r25, 0x00	; 0
    7172:	93 8b       	std	Z+19, r25	; 0x13
    7174:	82 8b       	std	Z+18, r24	; 0x12
    7176:	82 ec       	ldi	r24, 0xC2	; 194
    7178:	90 e0       	ldi	r25, 0x00	; 0
    717a:	95 8b       	std	Z+21, r25	; 0x15
    717c:	84 8b       	std	Z+20, r24	; 0x14
    717e:	86 ec       	ldi	r24, 0xC6	; 198
    7180:	90 e0       	ldi	r25, 0x00	; 0
    7182:	97 8b       	std	Z+23, r25	; 0x17
    7184:	86 8b       	std	Z+22, r24	; 0x16
    7186:	11 8e       	std	Z+25, r1	; 0x19
    7188:	12 8e       	std	Z+26, r1	; 0x1a
    718a:	13 8e       	std	Z+27, r1	; 0x1b
    718c:	14 8e       	std	Z+28, r1	; 0x1c
    718e:	08 95       	ret

00007190 <_ZNK9IPAddress7printToER5Print>:
        // Too few dots (there must be 3 dots)
        return false;
    }
    _address.bytes[3] = acc;
    return true;
}
    7190:	8f 92       	push	r8
    7192:	9f 92       	push	r9
    7194:	af 92       	push	r10
    7196:	bf 92       	push	r11
    7198:	cf 92       	push	r12
    719a:	df 92       	push	r13
    719c:	ef 92       	push	r14
    719e:	ff 92       	push	r15
    71a0:	0f 93       	push	r16
    71a2:	1f 93       	push	r17
    71a4:	cf 93       	push	r28
    71a6:	df 93       	push	r29
    71a8:	7c 01       	movw	r14, r24
    71aa:	8b 01       	movw	r16, r22
    71ac:	4c 01       	movw	r8, r24
    71ae:	82 e0       	ldi	r24, 0x02	; 2
    71b0:	88 0e       	add	r8, r24
    71b2:	91 1c       	adc	r9, r1
    71b4:	57 01       	movw	r10, r14
    71b6:	e5 e0       	ldi	r30, 0x05	; 5
    71b8:	ae 0e       	add	r10, r30
    71ba:	b1 1c       	adc	r11, r1
    71bc:	c0 e0       	ldi	r28, 0x00	; 0
    71be:	d0 e0       	ldi	r29, 0x00	; 0
    71c0:	f4 01       	movw	r30, r8
    71c2:	61 91       	ld	r22, Z+
    71c4:	4f 01       	movw	r8, r30
    71c6:	4a e0       	ldi	r20, 0x0A	; 10
    71c8:	50 e0       	ldi	r21, 0x00	; 0
    71ca:	c8 01       	movw	r24, r16
    71cc:	4b d1       	rcall	.+662    	; 0x7464 <_ZN5Print5printEhi>
    71ce:	6c 01       	movw	r12, r24
    71d0:	6e e2       	ldi	r22, 0x2E	; 46
    71d2:	c8 01       	movw	r24, r16
    71d4:	ba d0       	rcall	.+372    	; 0x734a <_ZN5Print5printEc>
    71d6:	8c 0d       	add	r24, r12
    71d8:	9d 1d       	adc	r25, r13
    71da:	c8 0f       	add	r28, r24
    71dc:	d9 1f       	adc	r29, r25
    71de:	8a 14       	cp	r8, r10
    71e0:	9b 04       	cpc	r9, r11
    71e2:	71 f7       	brne	.-36     	; 0x71c0 <_ZNK9IPAddress7printToER5Print+0x30>
    71e4:	4a e0       	ldi	r20, 0x0A	; 10
    71e6:	50 e0       	ldi	r21, 0x00	; 0
    71e8:	f7 01       	movw	r30, r14
    71ea:	65 81       	ldd	r22, Z+5	; 0x05
    71ec:	c8 01       	movw	r24, r16
    71ee:	3a d1       	rcall	.+628    	; 0x7464 <_ZN5Print5printEhi>
    71f0:	8c 0f       	add	r24, r28
    71f2:	9d 1f       	adc	r25, r29
    71f4:	df 91       	pop	r29
    71f6:	cf 91       	pop	r28
    71f8:	1f 91       	pop	r17
    71fa:	0f 91       	pop	r16
    71fc:	ff 90       	pop	r15
    71fe:	ef 90       	pop	r14
    7200:	df 90       	pop	r13
    7202:	cf 90       	pop	r12
    7204:	bf 90       	pop	r11
    7206:	af 90       	pop	r10
    7208:	9f 90       	pop	r9
    720a:	8f 90       	pop	r8
    720c:	08 95       	ret

0000720e <_ZN9IPAddressC1Ev>:
    720e:	20 e7       	ldi	r18, 0x70	; 112
    7210:	3a e0       	ldi	r19, 0x0A	; 10
    7212:	fc 01       	movw	r30, r24
    7214:	31 83       	std	Z+1, r19	; 0x01
    7216:	20 83       	st	Z, r18
    7218:	12 82       	std	Z+2, r1	; 0x02
    721a:	13 82       	std	Z+3, r1	; 0x03
    721c:	14 82       	std	Z+4, r1	; 0x04
    721e:	15 82       	std	Z+5, r1	; 0x05
    7220:	08 95       	ret

00007222 <_ZN9IPAddressC1Ehhhh>:
    7222:	0f 93       	push	r16
    7224:	fc 01       	movw	r30, r24
    7226:	80 e7       	ldi	r24, 0x70	; 112
    7228:	9a e0       	ldi	r25, 0x0A	; 10
    722a:	91 83       	std	Z+1, r25	; 0x01
    722c:	80 83       	st	Z, r24
    722e:	62 83       	std	Z+2, r22	; 0x02
    7230:	43 83       	std	Z+3, r20	; 0x03
    7232:	24 83       	std	Z+4, r18	; 0x04
    7234:	05 83       	std	Z+5, r16	; 0x05
    7236:	0f 91       	pop	r16
    7238:	08 95       	ret

0000723a <_ZN9IPAddressaSEPKh>:

IPAddress& IPAddress::operator=(const uint8_t *address)
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
    723a:	dc 01       	movw	r26, r24
    723c:	12 96       	adiw	r26, 0x02	; 2
    723e:	24 e0       	ldi	r18, 0x04	; 4
    7240:	fb 01       	movw	r30, r22
    7242:	01 90       	ld	r0, Z+
    7244:	0d 92       	st	X+, r0
    7246:	2a 95       	dec	r18
    7248:	e1 f7       	brne	.-8      	; 0x7242 <_ZN9IPAddressaSEPKh+0x8>
    return *this;
}
    724a:	08 95       	ret

0000724c <initVariant>:
    724c:	08 95       	ret

0000724e <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    724e:	e4 d1       	rcall	.+968    	; 0x7618 <init>

	initVariant();
    7250:	fd df       	rcall	.-6      	; 0x724c <initVariant>
    7252:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <setup>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    7256:	c2 ea       	ldi	r28, 0xA2	; 162
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    7258:	df e3       	ldi	r29, 0x3F	; 63
    725a:	0e 94 0a 10 	call	0x2014	; 0x2014 <loop>
#endif
	
	setup();
    
	for (;;) {
		loop();
    725e:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
    7260:	e1 f3       	breq	.-8      	; 0x725a <main+0xc>
    7262:	70 d6       	rcall	.+3296   	; 0x7f44 <_Z14serialEventRunv>
    7264:	fa cf       	rjmp	.-12     	; 0x725a <main+0xc>

00007266 <_ZN5Print5writeEPKhj>:
    7266:	cf 92       	push	r12
size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    7268:	df 92       	push	r13
    726a:	ef 92       	push	r14
    726c:	ff 92       	push	r15
    726e:	0f 93       	push	r16
    7270:	1f 93       	push	r17
    7272:	cf 93       	push	r28
    7274:	df 93       	push	r29
    7276:	6c 01       	movw	r12, r24
    7278:	7a 01       	movw	r14, r20
    727a:	8b 01       	movw	r16, r22
    727c:	c0 e0       	ldi	r28, 0x00	; 0
    727e:	d0 e0       	ldi	r29, 0x00	; 0
    7280:	ce 15       	cp	r28, r14
    7282:	df 05       	cpc	r29, r15
    7284:	81 f0       	breq	.+32     	; 0x72a6 <_ZN5Print5writeEPKhj+0x40>
    7286:	d8 01       	movw	r26, r16
    7288:	6d 91       	ld	r22, X+
    728a:	8d 01       	movw	r16, r26
    728c:	d6 01       	movw	r26, r12
    728e:	ed 91       	ld	r30, X+
    7290:	fc 91       	ld	r31, X
    7292:	01 90       	ld	r0, Z+
    7294:	f0 81       	ld	r31, Z
    7296:	e0 2d       	mov	r30, r0
    7298:	c6 01       	movw	r24, r12
    729a:	09 95       	icall
    729c:	89 2b       	or	r24, r25
    729e:	11 f0       	breq	.+4      	; 0x72a4 <_ZN5Print5writeEPKhj+0x3e>
    72a0:	21 96       	adiw	r28, 0x01	; 1
    72a2:	ee cf       	rjmp	.-36     	; 0x7280 <_ZN5Print5writeEPKhj+0x1a>
    72a4:	7e 01       	movw	r14, r28
    72a6:	c7 01       	movw	r24, r14
    72a8:	df 91       	pop	r29
    72aa:	cf 91       	pop	r28
    72ac:	1f 91       	pop	r17
    72ae:	0f 91       	pop	r16
    72b0:	ff 90       	pop	r15
    72b2:	ef 90       	pop	r14
    72b4:	df 90       	pop	r13
    72b6:	cf 90       	pop	r12
    72b8:	08 95       	ret

000072ba <_ZN5Print5writeEPKc>:
    72ba:	61 15       	cp	r22, r1
    72bc:	71 05       	cpc	r23, r1
    72be:	79 f0       	breq	.+30     	; 0x72de <_ZN5Print5writeEPKc+0x24>
    72c0:	fb 01       	movw	r30, r22
    72c2:	01 90       	ld	r0, Z+
    72c4:	00 20       	and	r0, r0
    72c6:	e9 f7       	brne	.-6      	; 0x72c2 <_ZN5Print5writeEPKc+0x8>
    72c8:	31 97       	sbiw	r30, 0x01	; 1
    72ca:	af 01       	movw	r20, r30
    72cc:	46 1b       	sub	r20, r22
    72ce:	57 0b       	sbc	r21, r23
    72d0:	dc 01       	movw	r26, r24
    72d2:	ed 91       	ld	r30, X+
    72d4:	fc 91       	ld	r31, X
    72d6:	02 80       	ldd	r0, Z+2	; 0x02
    72d8:	f3 81       	ldd	r31, Z+3	; 0x03
    72da:	e0 2d       	mov	r30, r0
    72dc:	09 94       	ijmp
    72de:	80 e0       	ldi	r24, 0x00	; 0
    72e0:	90 e0       	ldi	r25, 0x00	; 0
    72e2:	08 95       	ret

000072e4 <_ZN5Print5printEPK19__FlashStringHelper>:
    72e4:	ef 92       	push	r14
    72e6:	ff 92       	push	r15
    72e8:	0f 93       	push	r16
    72ea:	1f 93       	push	r17
    72ec:	cf 93       	push	r28
    72ee:	df 93       	push	r29
    72f0:	8c 01       	movw	r16, r24
    72f2:	7b 01       	movw	r14, r22
    72f4:	c0 e0       	ldi	r28, 0x00	; 0
    72f6:	d0 e0       	ldi	r29, 0x00	; 0
    72f8:	f7 01       	movw	r30, r14
    72fa:	ec 0f       	add	r30, r28
    72fc:	fd 1f       	adc	r31, r29
    72fe:	64 91       	lpm	r22, Z
    7300:	66 23       	and	r22, r22
    7302:	61 f0       	breq	.+24     	; 0x731c <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    7304:	d8 01       	movw	r26, r16
    7306:	ed 91       	ld	r30, X+
    7308:	fc 91       	ld	r31, X
    730a:	01 90       	ld	r0, Z+
    730c:	f0 81       	ld	r31, Z
    730e:	e0 2d       	mov	r30, r0
    7310:	c8 01       	movw	r24, r16
    7312:	09 95       	icall
    7314:	89 2b       	or	r24, r25
    7316:	11 f0       	breq	.+4      	; 0x731c <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    7318:	21 96       	adiw	r28, 0x01	; 1
    731a:	ee cf       	rjmp	.-36     	; 0x72f8 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    731c:	ce 01       	movw	r24, r28
    731e:	df 91       	pop	r29
    7320:	cf 91       	pop	r28
    7322:	1f 91       	pop	r17
    7324:	0f 91       	pop	r16
    7326:	ff 90       	pop	r15
    7328:	ef 90       	pop	r14
    732a:	08 95       	ret

0000732c <_ZN5Print5printERK6String>:
    732c:	db 01       	movw	r26, r22
    732e:	14 96       	adiw	r26, 0x04	; 4
    7330:	4d 91       	ld	r20, X+
    7332:	5c 91       	ld	r21, X
    7334:	15 97       	sbiw	r26, 0x05	; 5
    7336:	6d 91       	ld	r22, X+
    7338:	7c 91       	ld	r23, X
    733a:	dc 01       	movw	r26, r24
    733c:	ed 91       	ld	r30, X+
    733e:	fc 91       	ld	r31, X
    7340:	02 80       	ldd	r0, Z+2	; 0x02
    7342:	f3 81       	ldd	r31, Z+3	; 0x03
    7344:	e0 2d       	mov	r30, r0
    7346:	09 94       	ijmp

00007348 <_ZN5Print5printEPKc>:
    7348:	b8 cf       	rjmp	.-144    	; 0x72ba <_ZN5Print5writeEPKc>

0000734a <_ZN5Print5printEc>:
    734a:	dc 01       	movw	r26, r24
    734c:	ed 91       	ld	r30, X+
    734e:	fc 91       	ld	r31, X
    7350:	01 90       	ld	r0, Z+
    7352:	f0 81       	ld	r31, Z
    7354:	e0 2d       	mov	r30, r0
    7356:	09 94       	ijmp

00007358 <_ZN5Print7printlnEv>:
    7358:	64 e2       	ldi	r22, 0x24	; 36
    735a:	73 e0       	ldi	r23, 0x03	; 3
    735c:	ae cf       	rjmp	.-164    	; 0x72ba <_ZN5Print5writeEPKc>

0000735e <_ZN5Print7printlnEPK19__FlashStringHelper>:
    735e:	0f 93       	push	r16
    7360:	1f 93       	push	r17
    7362:	cf 93       	push	r28
    7364:	df 93       	push	r29
    7366:	ec 01       	movw	r28, r24
    7368:	bd df       	rcall	.-134    	; 0x72e4 <_ZN5Print5printEPK19__FlashStringHelper>
    736a:	8c 01       	movw	r16, r24
    736c:	ce 01       	movw	r24, r28
    736e:	f4 df       	rcall	.-24     	; 0x7358 <_ZN5Print7printlnEv>
    7370:	80 0f       	add	r24, r16
    7372:	91 1f       	adc	r25, r17
    7374:	df 91       	pop	r29
    7376:	cf 91       	pop	r28
    7378:	1f 91       	pop	r17
    737a:	0f 91       	pop	r16
    737c:	08 95       	ret

0000737e <_ZN5Print7printlnERK6String>:
    737e:	0f 93       	push	r16
    7380:	1f 93       	push	r17
    7382:	cf 93       	push	r28
    7384:	df 93       	push	r29
    7386:	ec 01       	movw	r28, r24
    7388:	d1 df       	rcall	.-94     	; 0x732c <_ZN5Print5printERK6String>
    738a:	8c 01       	movw	r16, r24
    738c:	ce 01       	movw	r24, r28
    738e:	e4 df       	rcall	.-56     	; 0x7358 <_ZN5Print7printlnEv>
    7390:	80 0f       	add	r24, r16
    7392:	91 1f       	adc	r25, r17
    7394:	df 91       	pop	r29
    7396:	cf 91       	pop	r28
    7398:	1f 91       	pop	r17
    739a:	0f 91       	pop	r16
    739c:	08 95       	ret

0000739e <_ZN5Print7printlnEPKc>:
    739e:	0f 93       	push	r16
    73a0:	1f 93       	push	r17
    73a2:	cf 93       	push	r28
    73a4:	df 93       	push	r29
    73a6:	ec 01       	movw	r28, r24
    73a8:	88 df       	rcall	.-240    	; 0x72ba <_ZN5Print5writeEPKc>
    73aa:	8c 01       	movw	r16, r24
    73ac:	ce 01       	movw	r24, r28
    73ae:	d4 df       	rcall	.-88     	; 0x7358 <_ZN5Print7printlnEv>
    73b0:	80 0f       	add	r24, r16
    73b2:	91 1f       	adc	r25, r17
    73b4:	df 91       	pop	r29
    73b6:	cf 91       	pop	r28
    73b8:	1f 91       	pop	r17
    73ba:	0f 91       	pop	r16
    73bc:	08 95       	ret

000073be <_ZN5Print11printNumberEmh>:
    73be:	8f 92       	push	r8
    73c0:	9f 92       	push	r9
    73c2:	af 92       	push	r10
    73c4:	bf 92       	push	r11
    73c6:	ef 92       	push	r14
    73c8:	ff 92       	push	r15
    73ca:	0f 93       	push	r16
    73cc:	1f 93       	push	r17
    73ce:	cf 93       	push	r28
    73d0:	df 93       	push	r29
    73d2:	cd b7       	in	r28, 0x3d	; 61
    73d4:	de b7       	in	r29, 0x3e	; 62
    73d6:	a1 97       	sbiw	r28, 0x21	; 33
    73d8:	0f b6       	in	r0, 0x3f	; 63
    73da:	f8 94       	cli
    73dc:	de bf       	out	0x3e, r29	; 62
    73de:	0f be       	out	0x3f, r0	; 63
    73e0:	cd bf       	out	0x3d, r28	; 61
    73e2:	7c 01       	movw	r14, r24
    73e4:	fa 01       	movw	r30, r20
    73e6:	cb 01       	movw	r24, r22
    73e8:	19 a2       	std	Y+33, r1	; 0x21
    73ea:	22 30       	cpi	r18, 0x02	; 2
    73ec:	08 f4       	brcc	.+2      	; 0x73f0 <_ZN5Print11printNumberEmh+0x32>
    73ee:	2a e0       	ldi	r18, 0x0A	; 10
    73f0:	8e 01       	movw	r16, r28
    73f2:	0f 5d       	subi	r16, 0xDF	; 223
    73f4:	1f 4f       	sbci	r17, 0xFF	; 255
    73f6:	82 2e       	mov	r8, r18
    73f8:	91 2c       	mov	r9, r1
    73fa:	a1 2c       	mov	r10, r1
    73fc:	b1 2c       	mov	r11, r1
    73fe:	bf 01       	movw	r22, r30
    7400:	a5 01       	movw	r20, r10
    7402:	94 01       	movw	r18, r8
    7404:	5c d6       	rcall	.+3256   	; 0x80be <__udivmodsi4>
    7406:	f9 01       	movw	r30, r18
    7408:	ca 01       	movw	r24, r20
    740a:	01 50       	subi	r16, 0x01	; 1
    740c:	11 09       	sbc	r17, r1
    740e:	6a 30       	cpi	r22, 0x0A	; 10
    7410:	10 f4       	brcc	.+4      	; 0x7416 <_ZN5Print11printNumberEmh+0x58>
    7412:	60 5d       	subi	r22, 0xD0	; 208
    7414:	01 c0       	rjmp	.+2      	; 0x7418 <_ZN5Print11printNumberEmh+0x5a>
    7416:	69 5c       	subi	r22, 0xC9	; 201
    7418:	d8 01       	movw	r26, r16
    741a:	6c 93       	st	X, r22
    741c:	23 2b       	or	r18, r19
    741e:	24 2b       	or	r18, r20
    7420:	25 2b       	or	r18, r21
    7422:	69 f7       	brne	.-38     	; 0x73fe <_ZN5Print11printNumberEmh+0x40>
    7424:	b8 01       	movw	r22, r16
    7426:	c7 01       	movw	r24, r14
    7428:	48 df       	rcall	.-368    	; 0x72ba <_ZN5Print5writeEPKc>
    742a:	a1 96       	adiw	r28, 0x21	; 33
    742c:	0f b6       	in	r0, 0x3f	; 63
    742e:	f8 94       	cli
    7430:	de bf       	out	0x3e, r29	; 62
    7432:	0f be       	out	0x3f, r0	; 63
    7434:	cd bf       	out	0x3d, r28	; 61
    7436:	df 91       	pop	r29
    7438:	cf 91       	pop	r28
    743a:	1f 91       	pop	r17
    743c:	0f 91       	pop	r16
    743e:	ff 90       	pop	r15
    7440:	ef 90       	pop	r14
    7442:	bf 90       	pop	r11
    7444:	af 90       	pop	r10
    7446:	9f 90       	pop	r9
    7448:	8f 90       	pop	r8
    744a:	08 95       	ret

0000744c <_ZN5Print5printEmi>:
    744c:	21 15       	cp	r18, r1
    744e:	31 05       	cpc	r19, r1
    7450:	41 f4       	brne	.+16     	; 0x7462 <_ZN5Print5printEmi+0x16>
    7452:	dc 01       	movw	r26, r24
    7454:	ed 91       	ld	r30, X+
    7456:	fc 91       	ld	r31, X
    7458:	01 90       	ld	r0, Z+
    745a:	f0 81       	ld	r31, Z
    745c:	e0 2d       	mov	r30, r0
    745e:	64 2f       	mov	r22, r20
    7460:	09 94       	ijmp
    7462:	ad cf       	rjmp	.-166    	; 0x73be <_ZN5Print11printNumberEmh>

00007464 <_ZN5Print5printEhi>:
    7464:	9a 01       	movw	r18, r20
    7466:	46 2f       	mov	r20, r22
    7468:	50 e0       	ldi	r21, 0x00	; 0
    746a:	60 e0       	ldi	r22, 0x00	; 0
    746c:	70 e0       	ldi	r23, 0x00	; 0
    746e:	ee cf       	rjmp	.-36     	; 0x744c <_ZN5Print5printEmi>

00007470 <_ZN5Print5printEji>:
    7470:	9a 01       	movw	r18, r20
    7472:	ab 01       	movw	r20, r22
    7474:	60 e0       	ldi	r22, 0x00	; 0
    7476:	70 e0       	ldi	r23, 0x00	; 0
    7478:	e9 cf       	rjmp	.-46     	; 0x744c <_ZN5Print5printEmi>

0000747a <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    747a:	0f 93       	push	r16
    747c:	1f 93       	push	r17
    747e:	cf 93       	push	r28
    7480:	df 93       	push	r29
    7482:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    7484:	e3 df       	rcall	.-58     	; 0x744c <_ZN5Print5printEmi>
    7486:	8c 01       	movw	r16, r24
  n += println();
    7488:	ce 01       	movw	r24, r28
    748a:	66 df       	rcall	.-308    	; 0x7358 <_ZN5Print7printlnEv>
  return n;
}
    748c:	80 0f       	add	r24, r16
    748e:	91 1f       	adc	r25, r17
    7490:	df 91       	pop	r29
    7492:	cf 91       	pop	r28
    7494:	1f 91       	pop	r17
    7496:	0f 91       	pop	r16
    7498:	08 95       	ret

0000749a <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    749a:	1f 92       	push	r1
    749c:	0f 92       	push	r0
    749e:	0f b6       	in	r0, 0x3f	; 63
    74a0:	0f 92       	push	r0
    74a2:	11 24       	eor	r1, r1
    74a4:	2f 93       	push	r18
    74a6:	3f 93       	push	r19
    74a8:	8f 93       	push	r24
    74aa:	9f 93       	push	r25
    74ac:	af 93       	push	r26
    74ae:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    74b0:	80 91 d6 0d 	lds	r24, 0x0DD6	; 0x800dd6 <timer0_millis>
    74b4:	90 91 d7 0d 	lds	r25, 0x0DD7	; 0x800dd7 <timer0_millis+0x1>
    74b8:	a0 91 d8 0d 	lds	r26, 0x0DD8	; 0x800dd8 <timer0_millis+0x2>
    74bc:	b0 91 d9 0d 	lds	r27, 0x0DD9	; 0x800dd9 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    74c0:	30 91 d5 0d 	lds	r19, 0x0DD5	; 0x800dd5 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    74c4:	23 e0       	ldi	r18, 0x03	; 3
    74c6:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    74c8:	2d 37       	cpi	r18, 0x7D	; 125
    74ca:	20 f4       	brcc	.+8      	; 0x74d4 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    74cc:	01 96       	adiw	r24, 0x01	; 1
    74ce:	a1 1d       	adc	r26, r1
    74d0:	b1 1d       	adc	r27, r1
    74d2:	05 c0       	rjmp	.+10     	; 0x74de <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    74d4:	26 e8       	ldi	r18, 0x86	; 134
    74d6:	23 0f       	add	r18, r19
		m += 1;
    74d8:	02 96       	adiw	r24, 0x02	; 2
    74da:	a1 1d       	adc	r26, r1
    74dc:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    74de:	20 93 d5 0d 	sts	0x0DD5, r18	; 0x800dd5 <timer0_fract>
	timer0_millis = m;
    74e2:	80 93 d6 0d 	sts	0x0DD6, r24	; 0x800dd6 <timer0_millis>
    74e6:	90 93 d7 0d 	sts	0x0DD7, r25	; 0x800dd7 <timer0_millis+0x1>
    74ea:	a0 93 d8 0d 	sts	0x0DD8, r26	; 0x800dd8 <timer0_millis+0x2>
    74ee:	b0 93 d9 0d 	sts	0x0DD9, r27	; 0x800dd9 <timer0_millis+0x3>
	timer0_overflow_count++;
    74f2:	80 91 da 0d 	lds	r24, 0x0DDA	; 0x800dda <timer0_overflow_count>
    74f6:	90 91 db 0d 	lds	r25, 0x0DDB	; 0x800ddb <timer0_overflow_count+0x1>
    74fa:	a0 91 dc 0d 	lds	r26, 0x0DDC	; 0x800ddc <timer0_overflow_count+0x2>
    74fe:	b0 91 dd 0d 	lds	r27, 0x0DDD	; 0x800ddd <timer0_overflow_count+0x3>
    7502:	01 96       	adiw	r24, 0x01	; 1
    7504:	a1 1d       	adc	r26, r1
    7506:	b1 1d       	adc	r27, r1
    7508:	80 93 da 0d 	sts	0x0DDA, r24	; 0x800dda <timer0_overflow_count>
    750c:	90 93 db 0d 	sts	0x0DDB, r25	; 0x800ddb <timer0_overflow_count+0x1>
    7510:	a0 93 dc 0d 	sts	0x0DDC, r26	; 0x800ddc <timer0_overflow_count+0x2>
    7514:	b0 93 dd 0d 	sts	0x0DDD, r27	; 0x800ddd <timer0_overflow_count+0x3>
}
    7518:	bf 91       	pop	r27
    751a:	af 91       	pop	r26
    751c:	9f 91       	pop	r25
    751e:	8f 91       	pop	r24
    7520:	3f 91       	pop	r19
    7522:	2f 91       	pop	r18
    7524:	0f 90       	pop	r0
    7526:	0f be       	out	0x3f, r0	; 63
    7528:	0f 90       	pop	r0
    752a:	1f 90       	pop	r1
    752c:	18 95       	reti

0000752e <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    752e:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    7530:	f8 94       	cli
	m = timer0_millis;
    7532:	60 91 d6 0d 	lds	r22, 0x0DD6	; 0x800dd6 <timer0_millis>
    7536:	70 91 d7 0d 	lds	r23, 0x0DD7	; 0x800dd7 <timer0_millis+0x1>
    753a:	80 91 d8 0d 	lds	r24, 0x0DD8	; 0x800dd8 <timer0_millis+0x2>
    753e:	90 91 d9 0d 	lds	r25, 0x0DD9	; 0x800dd9 <timer0_millis+0x3>
	SREG = oldSREG;
    7542:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    7544:	08 95       	ret

00007546 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    7546:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    7548:	f8 94       	cli
	m = timer0_overflow_count;
    754a:	80 91 da 0d 	lds	r24, 0x0DDA	; 0x800dda <timer0_overflow_count>
    754e:	90 91 db 0d 	lds	r25, 0x0DDB	; 0x800ddb <timer0_overflow_count+0x1>
    7552:	a0 91 dc 0d 	lds	r26, 0x0DDC	; 0x800ddc <timer0_overflow_count+0x2>
    7556:	b0 91 dd 0d 	lds	r27, 0x0DDD	; 0x800ddd <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    755a:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    755c:	a8 9b       	sbis	0x15, 0	; 21
    755e:	05 c0       	rjmp	.+10     	; 0x756a <micros+0x24>
    7560:	2f 3f       	cpi	r18, 0xFF	; 255
    7562:	19 f0       	breq	.+6      	; 0x756a <micros+0x24>
		m++;
    7564:	01 96       	adiw	r24, 0x01	; 1
    7566:	a1 1d       	adc	r26, r1
    7568:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    756a:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    756c:	ba 2f       	mov	r27, r26
    756e:	a9 2f       	mov	r26, r25
    7570:	98 2f       	mov	r25, r24
    7572:	88 27       	eor	r24, r24
    7574:	82 0f       	add	r24, r18
    7576:	91 1d       	adc	r25, r1
    7578:	a1 1d       	adc	r26, r1
    757a:	b1 1d       	adc	r27, r1
    757c:	bc 01       	movw	r22, r24
    757e:	cd 01       	movw	r24, r26
    7580:	42 e0       	ldi	r20, 0x02	; 2
    7582:	66 0f       	add	r22, r22
    7584:	77 1f       	adc	r23, r23
    7586:	88 1f       	adc	r24, r24
    7588:	99 1f       	adc	r25, r25
    758a:	4a 95       	dec	r20
    758c:	d1 f7       	brne	.-12     	; 0x7582 <micros+0x3c>
}
    758e:	08 95       	ret

00007590 <delay>:

void delay(unsigned long ms)
{
    7590:	8f 92       	push	r8
    7592:	9f 92       	push	r9
    7594:	af 92       	push	r10
    7596:	bf 92       	push	r11
    7598:	cf 92       	push	r12
    759a:	df 92       	push	r13
    759c:	ef 92       	push	r14
    759e:	ff 92       	push	r15
    75a0:	6b 01       	movw	r12, r22
    75a2:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    75a4:	d0 df       	rcall	.-96     	; 0x7546 <micros>
    75a6:	4b 01       	movw	r8, r22
    75a8:	5c 01       	movw	r10, r24

	while (ms > 0) {
    75aa:	c1 14       	cp	r12, r1
    75ac:	d1 04       	cpc	r13, r1
    75ae:	e1 04       	cpc	r14, r1
    75b0:	f1 04       	cpc	r15, r1
		yield();
    75b2:	f1 f0       	breq	.+60     	; 0x75f0 <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    75b4:	63 d5       	rcall	.+2758   	; 0x807c <yield>
    75b6:	c7 df       	rcall	.-114    	; 0x7546 <micros>
    75b8:	dc 01       	movw	r26, r24
    75ba:	cb 01       	movw	r24, r22
    75bc:	88 19       	sub	r24, r8
    75be:	99 09       	sbc	r25, r9
    75c0:	aa 09       	sbc	r26, r10
    75c2:	bb 09       	sbc	r27, r11
    75c4:	88 3e       	cpi	r24, 0xE8	; 232
    75c6:	93 40       	sbci	r25, 0x03	; 3
    75c8:	a1 05       	cpc	r26, r1
    75ca:	b1 05       	cpc	r27, r1
    75cc:	70 f3       	brcs	.-36     	; 0x75aa <delay+0x1a>
			ms--;
    75ce:	21 e0       	ldi	r18, 0x01	; 1
    75d0:	c2 1a       	sub	r12, r18
    75d2:	d1 08       	sbc	r13, r1
    75d4:	e1 08       	sbc	r14, r1
    75d6:	f1 08       	sbc	r15, r1
			start += 1000;
    75d8:	88 ee       	ldi	r24, 0xE8	; 232
    75da:	88 0e       	add	r8, r24
    75dc:	83 e0       	ldi	r24, 0x03	; 3
    75de:	98 1e       	adc	r9, r24
    75e0:	a1 1c       	adc	r10, r1
    75e2:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    75e4:	c1 14       	cp	r12, r1
    75e6:	d1 04       	cpc	r13, r1
    75e8:	e1 04       	cpc	r14, r1
    75ea:	f1 04       	cpc	r15, r1
    75ec:	21 f7       	brne	.-56     	; 0x75b6 <delay+0x26>
    75ee:	dd cf       	rjmp	.-70     	; 0x75aa <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    75f0:	ff 90       	pop	r15
    75f2:	ef 90       	pop	r14
    75f4:	df 90       	pop	r13
    75f6:	cf 90       	pop	r12
    75f8:	bf 90       	pop	r11
    75fa:	af 90       	pop	r10
    75fc:	9f 90       	pop	r9
    75fe:	8f 90       	pop	r8
    7600:	08 95       	ret

00007602 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    7602:	82 30       	cpi	r24, 0x02	; 2
    7604:	91 05       	cpc	r25, r1
    7606:	38 f0       	brcs	.+14     	; 0x7616 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    7608:	88 0f       	add	r24, r24
    760a:	99 1f       	adc	r25, r25
    760c:	88 0f       	add	r24, r24
    760e:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    7610:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    7612:	01 97       	sbiw	r24, 0x01	; 1
    7614:	f1 f7       	brne	.-4      	; 0x7612 <delayMicroseconds+0x10>
    7616:	08 95       	ret

00007618 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    7618:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    761a:	84 b5       	in	r24, 0x24	; 36
    761c:	82 60       	ori	r24, 0x02	; 2
    761e:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    7620:	84 b5       	in	r24, 0x24	; 36
    7622:	81 60       	ori	r24, 0x01	; 1
    7624:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    7626:	85 b5       	in	r24, 0x25	; 37
    7628:	82 60       	ori	r24, 0x02	; 2
    762a:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    762c:	85 b5       	in	r24, 0x25	; 37
    762e:	81 60       	ori	r24, 0x01	; 1
    7630:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    7632:	ee e6       	ldi	r30, 0x6E	; 110
    7634:	f0 e0       	ldi	r31, 0x00	; 0
    7636:	80 81       	ld	r24, Z
    7638:	81 60       	ori	r24, 0x01	; 1
    763a:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    763c:	e1 e8       	ldi	r30, 0x81	; 129
    763e:	f0 e0       	ldi	r31, 0x00	; 0
    7640:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    7642:	80 81       	ld	r24, Z
    7644:	82 60       	ori	r24, 0x02	; 2
    7646:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    7648:	80 81       	ld	r24, Z
    764a:	81 60       	ori	r24, 0x01	; 1
    764c:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    764e:	e0 e8       	ldi	r30, 0x80	; 128
    7650:	f0 e0       	ldi	r31, 0x00	; 0
    7652:	80 81       	ld	r24, Z
    7654:	81 60       	ori	r24, 0x01	; 1
    7656:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    7658:	e1 eb       	ldi	r30, 0xB1	; 177
    765a:	f0 e0       	ldi	r31, 0x00	; 0
    765c:	80 81       	ld	r24, Z
    765e:	84 60       	ori	r24, 0x04	; 4
    7660:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    7662:	e0 eb       	ldi	r30, 0xB0	; 176
    7664:	f0 e0       	ldi	r31, 0x00	; 0
    7666:	80 81       	ld	r24, Z
    7668:	81 60       	ori	r24, 0x01	; 1
    766a:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    766c:	ea e7       	ldi	r30, 0x7A	; 122
    766e:	f0 e0       	ldi	r31, 0x00	; 0
    7670:	80 81       	ld	r24, Z
    7672:	84 60       	ori	r24, 0x04	; 4
    7674:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    7676:	80 81       	ld	r24, Z
    7678:	82 60       	ori	r24, 0x02	; 2
    767a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    767c:	80 81       	ld	r24, Z
    767e:	81 60       	ori	r24, 0x01	; 1
    7680:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    7682:	80 81       	ld	r24, Z
    7684:	80 68       	ori	r24, 0x80	; 128
    7686:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    7688:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    768c:	08 95       	ret

0000768e <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    768e:	83 30       	cpi	r24, 0x03	; 3
    7690:	81 f0       	breq	.+32     	; 0x76b2 <turnOffPWM+0x24>
    7692:	28 f4       	brcc	.+10     	; 0x769e <turnOffPWM+0x10>
    7694:	81 30       	cpi	r24, 0x01	; 1
    7696:	99 f0       	breq	.+38     	; 0x76be <turnOffPWM+0x30>
    7698:	82 30       	cpi	r24, 0x02	; 2
    769a:	a1 f0       	breq	.+40     	; 0x76c4 <turnOffPWM+0x36>
    769c:	08 95       	ret
    769e:	87 30       	cpi	r24, 0x07	; 7
    76a0:	a9 f0       	breq	.+42     	; 0x76cc <turnOffPWM+0x3e>
    76a2:	88 30       	cpi	r24, 0x08	; 8
    76a4:	b9 f0       	breq	.+46     	; 0x76d4 <turnOffPWM+0x46>
    76a6:	84 30       	cpi	r24, 0x04	; 4
    76a8:	d1 f4       	brne	.+52     	; 0x76de <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    76aa:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    76ae:	8f 7d       	andi	r24, 0xDF	; 223
    76b0:	03 c0       	rjmp	.+6      	; 0x76b8 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    76b2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    76b6:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    76b8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    76bc:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    76be:	84 b5       	in	r24, 0x24	; 36
    76c0:	8f 77       	andi	r24, 0x7F	; 127
    76c2:	02 c0       	rjmp	.+4      	; 0x76c8 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    76c4:	84 b5       	in	r24, 0x24	; 36
    76c6:	8f 7d       	andi	r24, 0xDF	; 223
    76c8:	84 bd       	out	0x24, r24	; 36
    76ca:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    76cc:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    76d0:	8f 77       	andi	r24, 0x7F	; 127
    76d2:	03 c0       	rjmp	.+6      	; 0x76da <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    76d4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    76d8:	8f 7d       	andi	r24, 0xDF	; 223
    76da:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    76de:	08 95       	ret

000076e0 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    76e0:	cf 93       	push	r28
    76e2:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    76e4:	90 e0       	ldi	r25, 0x00	; 0
    76e6:	fc 01       	movw	r30, r24
    76e8:	ec 5a       	subi	r30, 0xAC	; 172
    76ea:	fd 4f       	sbci	r31, 0xFD	; 253
    76ec:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    76ee:	fc 01       	movw	r30, r24
    76f0:	ec 58       	subi	r30, 0x8C	; 140
    76f2:	fd 4f       	sbci	r31, 0xFD	; 253
    76f4:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    76f6:	88 23       	and	r24, r24
    76f8:	61 f1       	breq	.+88     	; 0x7752 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    76fa:	90 e0       	ldi	r25, 0x00	; 0
    76fc:	88 0f       	add	r24, r24
    76fe:	99 1f       	adc	r25, r25
    7700:	fc 01       	movw	r30, r24
    7702:	e8 55       	subi	r30, 0x58	; 88
    7704:	fd 4f       	sbci	r31, 0xFD	; 253
    7706:	c5 91       	lpm	r28, Z+
    7708:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    770a:	fc 01       	movw	r30, r24
    770c:	e2 56       	subi	r30, 0x62	; 98
    770e:	fd 4f       	sbci	r31, 0xFD	; 253
    7710:	a5 91       	lpm	r26, Z+
    7712:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    7714:	61 11       	cpse	r22, r1
    7716:	09 c0       	rjmp	.+18     	; 0x772a <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    7718:	9f b7       	in	r25, 0x3f	; 63
                cli();
    771a:	f8 94       	cli
		*reg &= ~bit;
    771c:	88 81       	ld	r24, Y
    771e:	20 95       	com	r18
    7720:	82 23       	and	r24, r18
    7722:	88 83       	st	Y, r24
		*out &= ~bit;
    7724:	ec 91       	ld	r30, X
    7726:	2e 23       	and	r18, r30
    7728:	0b c0       	rjmp	.+22     	; 0x7740 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    772a:	62 30       	cpi	r22, 0x02	; 2
    772c:	61 f4       	brne	.+24     	; 0x7746 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    772e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    7730:	f8 94       	cli
		*reg &= ~bit;
    7732:	88 81       	ld	r24, Y
    7734:	32 2f       	mov	r19, r18
    7736:	30 95       	com	r19
    7738:	83 23       	and	r24, r19
    773a:	88 83       	st	Y, r24
		*out |= bit;
    773c:	ec 91       	ld	r30, X
    773e:	2e 2b       	or	r18, r30
    7740:	2c 93       	st	X, r18
		SREG = oldSREG;
    7742:	9f bf       	out	0x3f, r25	; 63
    7744:	06 c0       	rjmp	.+12     	; 0x7752 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    7746:	8f b7       	in	r24, 0x3f	; 63
                cli();
    7748:	f8 94       	cli
		*reg |= bit;
    774a:	e8 81       	ld	r30, Y
    774c:	2e 2b       	or	r18, r30
    774e:	28 83       	st	Y, r18
		SREG = oldSREG;
    7750:	8f bf       	out	0x3f, r24	; 63
	}
}
    7752:	df 91       	pop	r29
    7754:	cf 91       	pop	r28
    7756:	08 95       	ret

00007758 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    7758:	1f 93       	push	r17
    775a:	cf 93       	push	r28
    775c:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    775e:	28 2f       	mov	r18, r24
    7760:	30 e0       	ldi	r19, 0x00	; 0
    7762:	f9 01       	movw	r30, r18
    7764:	ec 5c       	subi	r30, 0xCC	; 204
    7766:	fd 4f       	sbci	r31, 0xFD	; 253
    7768:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    776a:	f9 01       	movw	r30, r18
    776c:	ec 5a       	subi	r30, 0xAC	; 172
    776e:	fd 4f       	sbci	r31, 0xFD	; 253
    7770:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    7772:	f9 01       	movw	r30, r18
    7774:	ec 58       	subi	r30, 0x8C	; 140
    7776:	fd 4f       	sbci	r31, 0xFD	; 253
    7778:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    777a:	cc 23       	and	r28, r28
    777c:	b9 f0       	breq	.+46     	; 0x77ac <digitalWrite+0x54>
    777e:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    7780:	81 11       	cpse	r24, r1
    7782:	85 df       	rcall	.-246    	; 0x768e <turnOffPWM>

	out = portOutputRegister(port);
    7784:	ec 2f       	mov	r30, r28
    7786:	f0 e0       	ldi	r31, 0x00	; 0
    7788:	ee 0f       	add	r30, r30
    778a:	ff 1f       	adc	r31, r31
    778c:	e2 56       	subi	r30, 0x62	; 98
    778e:	fd 4f       	sbci	r31, 0xFD	; 253
    7790:	a5 91       	lpm	r26, Z+
    7792:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    7794:	9f b7       	in	r25, 0x3f	; 63
	cli();
    7796:	f8 94       	cli

	if (val == LOW) {
    7798:	11 11       	cpse	r17, r1
    779a:	04 c0       	rjmp	.+8      	; 0x77a4 <digitalWrite+0x4c>
		*out &= ~bit;
    779c:	8c 91       	ld	r24, X
    779e:	d0 95       	com	r29
    77a0:	d8 23       	and	r29, r24
    77a2:	02 c0       	rjmp	.+4      	; 0x77a8 <digitalWrite+0x50>
	} else {
		*out |= bit;
    77a4:	ec 91       	ld	r30, X
    77a6:	de 2b       	or	r29, r30
    77a8:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    77aa:	9f bf       	out	0x3f, r25	; 63
}
    77ac:	df 91       	pop	r29
    77ae:	cf 91       	pop	r28
    77b0:	1f 91       	pop	r17
    77b2:	08 95       	ret

000077b4 <digitalRead>:

int digitalRead(uint8_t pin)
{
    77b4:	cf 93       	push	r28
    77b6:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    77b8:	28 2f       	mov	r18, r24
    77ba:	30 e0       	ldi	r19, 0x00	; 0
    77bc:	f9 01       	movw	r30, r18
    77be:	ec 5c       	subi	r30, 0xCC	; 204
    77c0:	fd 4f       	sbci	r31, 0xFD	; 253
    77c2:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    77c4:	f9 01       	movw	r30, r18
    77c6:	ec 5a       	subi	r30, 0xAC	; 172
    77c8:	fd 4f       	sbci	r31, 0xFD	; 253
    77ca:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    77cc:	f9 01       	movw	r30, r18
    77ce:	ec 58       	subi	r30, 0x8C	; 140
    77d0:	fd 4f       	sbci	r31, 0xFD	; 253
    77d2:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    77d4:	cc 23       	and	r28, r28
    77d6:	89 f0       	breq	.+34     	; 0x77fa <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    77d8:	81 11       	cpse	r24, r1
    77da:	59 df       	rcall	.-334    	; 0x768e <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    77dc:	ec 2f       	mov	r30, r28
    77de:	f0 e0       	ldi	r31, 0x00	; 0
    77e0:	ee 0f       	add	r30, r30
    77e2:	ff 1f       	adc	r31, r31
    77e4:	ec 56       	subi	r30, 0x6C	; 108
    77e6:	fd 4f       	sbci	r31, 0xFD	; 253
    77e8:	a5 91       	lpm	r26, Z+
    77ea:	b4 91       	lpm	r27, Z
    77ec:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    77ee:	ed 23       	and	r30, r29
    77f0:	81 e0       	ldi	r24, 0x01	; 1
    77f2:	90 e0       	ldi	r25, 0x00	; 0
    77f4:	21 f4       	brne	.+8      	; 0x77fe <digitalRead+0x4a>
    77f6:	80 e0       	ldi	r24, 0x00	; 0
    77f8:	02 c0       	rjmp	.+4      	; 0x77fe <digitalRead+0x4a>
    77fa:	80 e0       	ldi	r24, 0x00	; 0
    77fc:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    77fe:	df 91       	pop	r29
    7800:	cf 91       	pop	r28
    7802:	08 95       	ret

00007804 <_ZNK6String14StringIfHelperEv>:
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
		*p = toupper(*p);
	}
}
    7804:	08 95       	ret

00007806 <_ZN6StringD1Ev>:
    7806:	fc 01       	movw	r30, r24
    7808:	80 81       	ld	r24, Z
    780a:	91 81       	ldd	r25, Z+1	; 0x01
    780c:	53 c5       	rjmp	.+2726   	; 0x82b4 <free>

0000780e <_ZN6String10invalidateEv>:
    780e:	cf 93       	push	r28
    7810:	df 93       	push	r29
    7812:	ec 01       	movw	r28, r24
    7814:	88 81       	ld	r24, Y
    7816:	99 81       	ldd	r25, Y+1	; 0x01
    7818:	00 97       	sbiw	r24, 0x00	; 0
    781a:	09 f0       	breq	.+2      	; 0x781e <_ZN6String10invalidateEv+0x10>
    781c:	4b d5       	rcall	.+2710   	; 0x82b4 <free>
    781e:	19 82       	std	Y+1, r1	; 0x01
    7820:	18 82       	st	Y, r1
    7822:	1d 82       	std	Y+5, r1	; 0x05
    7824:	1c 82       	std	Y+4, r1	; 0x04
    7826:	1b 82       	std	Y+3, r1	; 0x03
    7828:	1a 82       	std	Y+2, r1	; 0x02
    782a:	df 91       	pop	r29
    782c:	cf 91       	pop	r28
    782e:	08 95       	ret

00007830 <_ZN6String12changeBufferEj>:
    7830:	0f 93       	push	r16
    7832:	1f 93       	push	r17
    7834:	cf 93       	push	r28
    7836:	df 93       	push	r29
    7838:	ec 01       	movw	r28, r24
    783a:	8b 01       	movw	r16, r22
    783c:	6f 5f       	subi	r22, 0xFF	; 255
    783e:	7f 4f       	sbci	r23, 0xFF	; 255
    7840:	88 81       	ld	r24, Y
    7842:	99 81       	ldd	r25, Y+1	; 0x01
    7844:	c0 d5       	rcall	.+2944   	; 0x83c6 <realloc>
    7846:	00 97       	sbiw	r24, 0x00	; 0
    7848:	31 f0       	breq	.+12     	; 0x7856 <_ZN6String12changeBufferEj+0x26>
    784a:	99 83       	std	Y+1, r25	; 0x01
    784c:	88 83       	st	Y, r24
    784e:	1b 83       	std	Y+3, r17	; 0x03
    7850:	0a 83       	std	Y+2, r16	; 0x02
    7852:	81 e0       	ldi	r24, 0x01	; 1
    7854:	01 c0       	rjmp	.+2      	; 0x7858 <_ZN6String12changeBufferEj+0x28>
    7856:	80 e0       	ldi	r24, 0x00	; 0
    7858:	df 91       	pop	r29
    785a:	cf 91       	pop	r28
    785c:	1f 91       	pop	r17
    785e:	0f 91       	pop	r16
    7860:	08 95       	ret

00007862 <_ZN6String7reserveEj>:
    7862:	cf 93       	push	r28
    7864:	df 93       	push	r29
    7866:	ec 01       	movw	r28, r24
    7868:	88 81       	ld	r24, Y
    786a:	99 81       	ldd	r25, Y+1	; 0x01
    786c:	89 2b       	or	r24, r25
    786e:	29 f0       	breq	.+10     	; 0x787a <_ZN6String7reserveEj+0x18>
    7870:	8a 81       	ldd	r24, Y+2	; 0x02
    7872:	9b 81       	ldd	r25, Y+3	; 0x03
    7874:	86 17       	cp	r24, r22
    7876:	97 07       	cpc	r25, r23
    7878:	58 f4       	brcc	.+22     	; 0x7890 <_ZN6String7reserveEj+0x2e>
    787a:	ce 01       	movw	r24, r28
    787c:	d9 df       	rcall	.-78     	; 0x7830 <_ZN6String12changeBufferEj>
    787e:	88 23       	and	r24, r24
    7880:	41 f0       	breq	.+16     	; 0x7892 <_ZN6String7reserveEj+0x30>
    7882:	8c 81       	ldd	r24, Y+4	; 0x04
    7884:	9d 81       	ldd	r25, Y+5	; 0x05
    7886:	89 2b       	or	r24, r25
    7888:	19 f4       	brne	.+6      	; 0x7890 <_ZN6String7reserveEj+0x2e>
    788a:	e8 81       	ld	r30, Y
    788c:	f9 81       	ldd	r31, Y+1	; 0x01
    788e:	10 82       	st	Z, r1
    7890:	81 e0       	ldi	r24, 0x01	; 1
    7892:	df 91       	pop	r29
    7894:	cf 91       	pop	r28
    7896:	08 95       	ret

00007898 <_ZN6String4copyEPKcj>:
    7898:	ef 92       	push	r14
    789a:	ff 92       	push	r15
    789c:	0f 93       	push	r16
    789e:	1f 93       	push	r17
    78a0:	cf 93       	push	r28
    78a2:	df 93       	push	r29
    78a4:	ec 01       	movw	r28, r24
    78a6:	7b 01       	movw	r14, r22
    78a8:	8a 01       	movw	r16, r20
    78aa:	ba 01       	movw	r22, r20
    78ac:	da df       	rcall	.-76     	; 0x7862 <_ZN6String7reserveEj>
    78ae:	81 11       	cpse	r24, r1
    78b0:	03 c0       	rjmp	.+6      	; 0x78b8 <_ZN6String4copyEPKcj+0x20>
    78b2:	ce 01       	movw	r24, r28
    78b4:	ac df       	rcall	.-168    	; 0x780e <_ZN6String10invalidateEv>
    78b6:	06 c0       	rjmp	.+12     	; 0x78c4 <_ZN6String4copyEPKcj+0x2c>
    78b8:	1d 83       	std	Y+5, r17	; 0x05
    78ba:	0c 83       	std	Y+4, r16	; 0x04
    78bc:	b7 01       	movw	r22, r14
    78be:	88 81       	ld	r24, Y
    78c0:	99 81       	ldd	r25, Y+1	; 0x01
    78c2:	ae d6       	rcall	.+3420   	; 0x8620 <strcpy>
    78c4:	ce 01       	movw	r24, r28
    78c6:	df 91       	pop	r29
    78c8:	cf 91       	pop	r28
    78ca:	1f 91       	pop	r17
    78cc:	0f 91       	pop	r16
    78ce:	ff 90       	pop	r15
    78d0:	ef 90       	pop	r14
    78d2:	08 95       	ret

000078d4 <_ZN6StringC1EPKc>:
    78d4:	fc 01       	movw	r30, r24
    78d6:	11 82       	std	Z+1, r1	; 0x01
    78d8:	10 82       	st	Z, r1
    78da:	13 82       	std	Z+3, r1	; 0x03
    78dc:	12 82       	std	Z+2, r1	; 0x02
    78de:	15 82       	std	Z+5, r1	; 0x05
    78e0:	14 82       	std	Z+4, r1	; 0x04
    78e2:	61 15       	cp	r22, r1
    78e4:	71 05       	cpc	r23, r1
    78e6:	49 f0       	breq	.+18     	; 0x78fa <_ZN6StringC1EPKc+0x26>
    78e8:	fb 01       	movw	r30, r22
    78ea:	01 90       	ld	r0, Z+
    78ec:	00 20       	and	r0, r0
    78ee:	e9 f7       	brne	.-6      	; 0x78ea <_ZN6StringC1EPKc+0x16>
    78f0:	31 97       	sbiw	r30, 0x01	; 1
    78f2:	af 01       	movw	r20, r30
    78f4:	46 1b       	sub	r20, r22
    78f6:	57 0b       	sbc	r21, r23
    78f8:	cf cf       	rjmp	.-98     	; 0x7898 <_ZN6String4copyEPKcj>
    78fa:	08 95       	ret

000078fc <_ZN6String4moveERS_>:
    78fc:	0f 93       	push	r16
    78fe:	1f 93       	push	r17
    7900:	cf 93       	push	r28
    7902:	df 93       	push	r29
    7904:	8c 01       	movw	r16, r24
    7906:	eb 01       	movw	r28, r22
    7908:	fc 01       	movw	r30, r24
    790a:	80 81       	ld	r24, Z
    790c:	91 81       	ldd	r25, Z+1	; 0x01
    790e:	00 97       	sbiw	r24, 0x00	; 0
    7910:	c1 f0       	breq	.+48     	; 0x7942 <_ZN6String4moveERS_+0x46>
    7912:	68 81       	ld	r22, Y
    7914:	79 81       	ldd	r23, Y+1	; 0x01
    7916:	61 15       	cp	r22, r1
    7918:	71 05       	cpc	r23, r1
    791a:	91 f0       	breq	.+36     	; 0x7940 <_ZN6String4moveERS_+0x44>
    791c:	22 e0       	ldi	r18, 0x02	; 2
    791e:	3c e3       	ldi	r19, 0x3C	; 60
    7920:	23 2b       	or	r18, r19
    7922:	71 f0       	breq	.+28     	; 0x7940 <_ZN6String4moveERS_+0x44>
    7924:	42 81       	ldd	r20, Z+2	; 0x02
    7926:	53 81       	ldd	r21, Z+3	; 0x03
    7928:	2c 81       	ldd	r18, Y+4	; 0x04
    792a:	3d 81       	ldd	r19, Y+5	; 0x05
    792c:	42 17       	cp	r20, r18
    792e:	53 07       	cpc	r21, r19
    7930:	38 f0       	brcs	.+14     	; 0x7940 <_ZN6String4moveERS_+0x44>
    7932:	76 d6       	rcall	.+3308   	; 0x8620 <strcpy>
    7934:	8c 81       	ldd	r24, Y+4	; 0x04
    7936:	9d 81       	ldd	r25, Y+5	; 0x05
    7938:	f8 01       	movw	r30, r16
    793a:	95 83       	std	Z+5, r25	; 0x05
    793c:	84 83       	std	Z+4, r24	; 0x04
    793e:	12 c0       	rjmp	.+36     	; 0x7964 <_ZN6String4moveERS_+0x68>
    7940:	b9 d4       	rcall	.+2418   	; 0x82b4 <free>
    7942:	88 81       	ld	r24, Y
    7944:	99 81       	ldd	r25, Y+1	; 0x01
    7946:	f8 01       	movw	r30, r16
    7948:	91 83       	std	Z+1, r25	; 0x01
    794a:	80 83       	st	Z, r24
    794c:	8a 81       	ldd	r24, Y+2	; 0x02
    794e:	9b 81       	ldd	r25, Y+3	; 0x03
    7950:	93 83       	std	Z+3, r25	; 0x03
    7952:	82 83       	std	Z+2, r24	; 0x02
    7954:	8c 81       	ldd	r24, Y+4	; 0x04
    7956:	9d 81       	ldd	r25, Y+5	; 0x05
    7958:	95 83       	std	Z+5, r25	; 0x05
    795a:	84 83       	std	Z+4, r24	; 0x04
    795c:	19 82       	std	Y+1, r1	; 0x01
    795e:	18 82       	st	Y, r1
    7960:	1b 82       	std	Y+3, r1	; 0x03
    7962:	1a 82       	std	Y+2, r1	; 0x02
    7964:	1d 82       	std	Y+5, r1	; 0x05
    7966:	1c 82       	std	Y+4, r1	; 0x04
    7968:	df 91       	pop	r29
    796a:	cf 91       	pop	r28
    796c:	1f 91       	pop	r17
    796e:	0f 91       	pop	r16
    7970:	08 95       	ret

00007972 <_ZN6StringC1EOS_>:
    7972:	fc 01       	movw	r30, r24
    7974:	11 82       	std	Z+1, r1	; 0x01
    7976:	10 82       	st	Z, r1
    7978:	13 82       	std	Z+3, r1	; 0x03
    797a:	12 82       	std	Z+2, r1	; 0x02
    797c:	15 82       	std	Z+5, r1	; 0x05
    797e:	14 82       	std	Z+4, r1	; 0x04
    7980:	bd cf       	rjmp	.-134    	; 0x78fc <_ZN6String4moveERS_>

00007982 <_ZN6StringaSERKS_>:
    7982:	cf 93       	push	r28
    7984:	df 93       	push	r29
    7986:	ec 01       	movw	r28, r24
    7988:	fb 01       	movw	r30, r22
    798a:	86 17       	cp	r24, r22
    798c:	97 07       	cpc	r25, r23
    798e:	51 f0       	breq	.+20     	; 0x79a4 <_ZN6StringaSERKS_+0x22>
    7990:	60 81       	ld	r22, Z
    7992:	71 81       	ldd	r23, Z+1	; 0x01
    7994:	61 15       	cp	r22, r1
    7996:	71 05       	cpc	r23, r1
    7998:	21 f0       	breq	.+8      	; 0x79a2 <_ZN6StringaSERKS_+0x20>
    799a:	44 81       	ldd	r20, Z+4	; 0x04
    799c:	55 81       	ldd	r21, Z+5	; 0x05
    799e:	7c df       	rcall	.-264    	; 0x7898 <_ZN6String4copyEPKcj>
    79a0:	01 c0       	rjmp	.+2      	; 0x79a4 <_ZN6StringaSERKS_+0x22>
    79a2:	35 df       	rcall	.-406    	; 0x780e <_ZN6String10invalidateEv>
    79a4:	ce 01       	movw	r24, r28
    79a6:	df 91       	pop	r29
    79a8:	cf 91       	pop	r28
    79aa:	08 95       	ret

000079ac <_ZN6StringC1ERKS_>:
    79ac:	fc 01       	movw	r30, r24
    79ae:	11 82       	std	Z+1, r1	; 0x01
    79b0:	10 82       	st	Z, r1
    79b2:	13 82       	std	Z+3, r1	; 0x03
    79b4:	12 82       	std	Z+2, r1	; 0x02
    79b6:	15 82       	std	Z+5, r1	; 0x05
    79b8:	14 82       	std	Z+4, r1	; 0x04
    79ba:	e3 cf       	rjmp	.-58     	; 0x7982 <_ZN6StringaSERKS_>

000079bc <_ZN6StringaSEOS_>:
    79bc:	cf 93       	push	r28
    79be:	df 93       	push	r29
    79c0:	ec 01       	movw	r28, r24
    79c2:	86 17       	cp	r24, r22
    79c4:	97 07       	cpc	r25, r23
    79c6:	09 f0       	breq	.+2      	; 0x79ca <_ZN6StringaSEOS_+0xe>
    79c8:	99 df       	rcall	.-206    	; 0x78fc <_ZN6String4moveERS_>
    79ca:	ce 01       	movw	r24, r28
    79cc:	df 91       	pop	r29
    79ce:	cf 91       	pop	r28
    79d0:	08 95       	ret

000079d2 <_ZN6StringaSEPKc>:
    79d2:	cf 93       	push	r28
    79d4:	df 93       	push	r29
    79d6:	ec 01       	movw	r28, r24
    79d8:	61 15       	cp	r22, r1
    79da:	71 05       	cpc	r23, r1
    79dc:	51 f0       	breq	.+20     	; 0x79f2 <_ZN6StringaSEPKc+0x20>
    79de:	fb 01       	movw	r30, r22
    79e0:	01 90       	ld	r0, Z+
    79e2:	00 20       	and	r0, r0
    79e4:	e9 f7       	brne	.-6      	; 0x79e0 <_ZN6StringaSEPKc+0xe>
    79e6:	31 97       	sbiw	r30, 0x01	; 1
    79e8:	af 01       	movw	r20, r30
    79ea:	46 1b       	sub	r20, r22
    79ec:	57 0b       	sbc	r21, r23
    79ee:	54 df       	rcall	.-344    	; 0x7898 <_ZN6String4copyEPKcj>
    79f0:	01 c0       	rjmp	.+2      	; 0x79f4 <_ZN6StringaSEPKc+0x22>
    79f2:	0d df       	rcall	.-486    	; 0x780e <_ZN6String10invalidateEv>
    79f4:	ce 01       	movw	r24, r28
    79f6:	df 91       	pop	r29
    79f8:	cf 91       	pop	r28
    79fa:	08 95       	ret

000079fc <_ZN6StringC1Ec>:
    79fc:	cf 93       	push	r28
    79fe:	df 93       	push	r29
    7a00:	00 d0       	rcall	.+0      	; 0x7a02 <_ZN6StringC1Ec+0x6>
    7a02:	cd b7       	in	r28, 0x3d	; 61
    7a04:	de b7       	in	r29, 0x3e	; 62
    7a06:	fc 01       	movw	r30, r24
    7a08:	11 82       	std	Z+1, r1	; 0x01
    7a0a:	10 82       	st	Z, r1
    7a0c:	13 82       	std	Z+3, r1	; 0x03
    7a0e:	12 82       	std	Z+2, r1	; 0x02
    7a10:	15 82       	std	Z+5, r1	; 0x05
    7a12:	14 82       	std	Z+4, r1	; 0x04
    7a14:	69 83       	std	Y+1, r22	; 0x01
    7a16:	1a 82       	std	Y+2, r1	; 0x02
    7a18:	be 01       	movw	r22, r28
    7a1a:	6f 5f       	subi	r22, 0xFF	; 255
    7a1c:	7f 4f       	sbci	r23, 0xFF	; 255
    7a1e:	d9 df       	rcall	.-78     	; 0x79d2 <_ZN6StringaSEPKc>
    7a20:	0f 90       	pop	r0
    7a22:	0f 90       	pop	r0
    7a24:	df 91       	pop	r29
    7a26:	cf 91       	pop	r28
    7a28:	08 95       	ret

00007a2a <_ZN6StringC1Ehh>:
    7a2a:	0f 93       	push	r16
    7a2c:	1f 93       	push	r17
    7a2e:	cf 93       	push	r28
    7a30:	df 93       	push	r29
    7a32:	cd b7       	in	r28, 0x3d	; 61
    7a34:	de b7       	in	r29, 0x3e	; 62
    7a36:	29 97       	sbiw	r28, 0x09	; 9
    7a38:	0f b6       	in	r0, 0x3f	; 63
    7a3a:	f8 94       	cli
    7a3c:	de bf       	out	0x3e, r29	; 62
    7a3e:	0f be       	out	0x3f, r0	; 63
    7a40:	cd bf       	out	0x3d, r28	; 61
    7a42:	8c 01       	movw	r16, r24
    7a44:	86 2f       	mov	r24, r22
    7a46:	f8 01       	movw	r30, r16
    7a48:	11 82       	std	Z+1, r1	; 0x01
    7a4a:	10 82       	st	Z, r1
    7a4c:	13 82       	std	Z+3, r1	; 0x03
    7a4e:	12 82       	std	Z+2, r1	; 0x02
    7a50:	15 82       	std	Z+5, r1	; 0x05
    7a52:	14 82       	std	Z+4, r1	; 0x04
    7a54:	50 e0       	ldi	r21, 0x00	; 0
    7a56:	be 01       	movw	r22, r28
    7a58:	6f 5f       	subi	r22, 0xFF	; 255
    7a5a:	7f 4f       	sbci	r23, 0xFF	; 255
    7a5c:	90 e0       	ldi	r25, 0x00	; 0
    7a5e:	58 d6       	rcall	.+3248   	; 0x8710 <utoa>
    7a60:	be 01       	movw	r22, r28
    7a62:	6f 5f       	subi	r22, 0xFF	; 255
    7a64:	7f 4f       	sbci	r23, 0xFF	; 255
    7a66:	c8 01       	movw	r24, r16
    7a68:	b4 df       	rcall	.-152    	; 0x79d2 <_ZN6StringaSEPKc>
    7a6a:	29 96       	adiw	r28, 0x09	; 9
    7a6c:	0f b6       	in	r0, 0x3f	; 63
    7a6e:	f8 94       	cli
    7a70:	de bf       	out	0x3e, r29	; 62
    7a72:	0f be       	out	0x3f, r0	; 63
    7a74:	cd bf       	out	0x3d, r28	; 61
    7a76:	df 91       	pop	r29
    7a78:	cf 91       	pop	r28
    7a7a:	1f 91       	pop	r17
    7a7c:	0f 91       	pop	r16
    7a7e:	08 95       	ret

00007a80 <_ZN6StringC1Eih>:
    7a80:	0f 93       	push	r16
    7a82:	1f 93       	push	r17
    7a84:	cf 93       	push	r28
    7a86:	df 93       	push	r29
    7a88:	cd b7       	in	r28, 0x3d	; 61
    7a8a:	de b7       	in	r29, 0x3e	; 62
    7a8c:	62 97       	sbiw	r28, 0x12	; 18
    7a8e:	0f b6       	in	r0, 0x3f	; 63
    7a90:	f8 94       	cli
    7a92:	de bf       	out	0x3e, r29	; 62
    7a94:	0f be       	out	0x3f, r0	; 63
    7a96:	cd bf       	out	0x3d, r28	; 61
    7a98:	8c 01       	movw	r16, r24
    7a9a:	cb 01       	movw	r24, r22
    7a9c:	f8 01       	movw	r30, r16
    7a9e:	11 82       	std	Z+1, r1	; 0x01
    7aa0:	10 82       	st	Z, r1
    7aa2:	13 82       	std	Z+3, r1	; 0x03
    7aa4:	12 82       	std	Z+2, r1	; 0x02
    7aa6:	15 82       	std	Z+5, r1	; 0x05
    7aa8:	14 82       	std	Z+4, r1	; 0x04
    7aaa:	50 e0       	ldi	r21, 0x00	; 0
    7aac:	be 01       	movw	r22, r28
    7aae:	6f 5f       	subi	r22, 0xFF	; 255
    7ab0:	7f 4f       	sbci	r23, 0xFF	; 255
    7ab2:	da d5       	rcall	.+2996   	; 0x8668 <itoa>
    7ab4:	be 01       	movw	r22, r28
    7ab6:	6f 5f       	subi	r22, 0xFF	; 255
    7ab8:	7f 4f       	sbci	r23, 0xFF	; 255
    7aba:	c8 01       	movw	r24, r16
    7abc:	8a df       	rcall	.-236    	; 0x79d2 <_ZN6StringaSEPKc>
    7abe:	62 96       	adiw	r28, 0x12	; 18
    7ac0:	0f b6       	in	r0, 0x3f	; 63
    7ac2:	f8 94       	cli
    7ac4:	de bf       	out	0x3e, r29	; 62
    7ac6:	0f be       	out	0x3f, r0	; 63
    7ac8:	cd bf       	out	0x3d, r28	; 61
    7aca:	df 91       	pop	r29
    7acc:	cf 91       	pop	r28
    7ace:	1f 91       	pop	r17
    7ad0:	0f 91       	pop	r16
    7ad2:	08 95       	ret

00007ad4 <_ZN6StringC1Ejh>:
    7ad4:	0f 93       	push	r16
    7ad6:	1f 93       	push	r17
    7ad8:	cf 93       	push	r28
    7ada:	df 93       	push	r29
    7adc:	cd b7       	in	r28, 0x3d	; 61
    7ade:	de b7       	in	r29, 0x3e	; 62
    7ae0:	61 97       	sbiw	r28, 0x11	; 17
    7ae2:	0f b6       	in	r0, 0x3f	; 63
    7ae4:	f8 94       	cli
    7ae6:	de bf       	out	0x3e, r29	; 62
    7ae8:	0f be       	out	0x3f, r0	; 63
    7aea:	cd bf       	out	0x3d, r28	; 61
    7aec:	8c 01       	movw	r16, r24
    7aee:	cb 01       	movw	r24, r22
    7af0:	f8 01       	movw	r30, r16
    7af2:	11 82       	std	Z+1, r1	; 0x01
    7af4:	10 82       	st	Z, r1
    7af6:	13 82       	std	Z+3, r1	; 0x03
    7af8:	12 82       	std	Z+2, r1	; 0x02
    7afa:	15 82       	std	Z+5, r1	; 0x05
    7afc:	14 82       	std	Z+4, r1	; 0x04
    7afe:	50 e0       	ldi	r21, 0x00	; 0
    7b00:	be 01       	movw	r22, r28
    7b02:	6f 5f       	subi	r22, 0xFF	; 255
    7b04:	7f 4f       	sbci	r23, 0xFF	; 255
    7b06:	04 d6       	rcall	.+3080   	; 0x8710 <utoa>
    7b08:	be 01       	movw	r22, r28
    7b0a:	6f 5f       	subi	r22, 0xFF	; 255
    7b0c:	7f 4f       	sbci	r23, 0xFF	; 255
    7b0e:	c8 01       	movw	r24, r16
    7b10:	60 df       	rcall	.-320    	; 0x79d2 <_ZN6StringaSEPKc>
    7b12:	61 96       	adiw	r28, 0x11	; 17
    7b14:	0f b6       	in	r0, 0x3f	; 63
    7b16:	f8 94       	cli
    7b18:	de bf       	out	0x3e, r29	; 62
    7b1a:	0f be       	out	0x3f, r0	; 63
    7b1c:	cd bf       	out	0x3d, r28	; 61
    7b1e:	df 91       	pop	r29
    7b20:	cf 91       	pop	r28
    7b22:	1f 91       	pop	r17
    7b24:	0f 91       	pop	r16
    7b26:	08 95       	ret

00007b28 <_ZN6StringC1Emh>:
    7b28:	0f 93       	push	r16
    7b2a:	1f 93       	push	r17
    7b2c:	cf 93       	push	r28
    7b2e:	df 93       	push	r29
    7b30:	cd b7       	in	r28, 0x3d	; 61
    7b32:	de b7       	in	r29, 0x3e	; 62
    7b34:	a1 97       	sbiw	r28, 0x21	; 33
    7b36:	0f b6       	in	r0, 0x3f	; 63
    7b38:	f8 94       	cli
    7b3a:	de bf       	out	0x3e, r29	; 62
    7b3c:	0f be       	out	0x3f, r0	; 63
    7b3e:	cd bf       	out	0x3d, r28	; 61
    7b40:	8c 01       	movw	r16, r24
    7b42:	cb 01       	movw	r24, r22
    7b44:	ba 01       	movw	r22, r20
    7b46:	f8 01       	movw	r30, r16
    7b48:	11 82       	std	Z+1, r1	; 0x01
    7b4a:	10 82       	st	Z, r1
    7b4c:	13 82       	std	Z+3, r1	; 0x03
    7b4e:	12 82       	std	Z+2, r1	; 0x02
    7b50:	15 82       	std	Z+5, r1	; 0x05
    7b52:	14 82       	std	Z+4, r1	; 0x04
    7b54:	30 e0       	ldi	r19, 0x00	; 0
    7b56:	ae 01       	movw	r20, r28
    7b58:	4f 5f       	subi	r20, 0xFF	; 255
    7b5a:	5f 4f       	sbci	r21, 0xFF	; 255
    7b5c:	ae d5       	rcall	.+2908   	; 0x86ba <ultoa>
    7b5e:	be 01       	movw	r22, r28
    7b60:	6f 5f       	subi	r22, 0xFF	; 255
    7b62:	7f 4f       	sbci	r23, 0xFF	; 255
    7b64:	c8 01       	movw	r24, r16
    7b66:	35 df       	rcall	.-406    	; 0x79d2 <_ZN6StringaSEPKc>
    7b68:	a1 96       	adiw	r28, 0x21	; 33
    7b6a:	0f b6       	in	r0, 0x3f	; 63
    7b6c:	f8 94       	cli
    7b6e:	de bf       	out	0x3e, r29	; 62
    7b70:	0f be       	out	0x3f, r0	; 63
    7b72:	cd bf       	out	0x3d, r28	; 61
    7b74:	df 91       	pop	r29
    7b76:	cf 91       	pop	r28
    7b78:	1f 91       	pop	r17
    7b7a:	0f 91       	pop	r16
    7b7c:	08 95       	ret

00007b7e <_ZN6StringC1Edh>:
    7b7e:	ef 92       	push	r14
    7b80:	ff 92       	push	r15
    7b82:	0f 93       	push	r16
    7b84:	1f 93       	push	r17
    7b86:	cf 93       	push	r28
    7b88:	df 93       	push	r29
    7b8a:	cd b7       	in	r28, 0x3d	; 61
    7b8c:	de b7       	in	r29, 0x3e	; 62
    7b8e:	a1 97       	sbiw	r28, 0x21	; 33
    7b90:	0f b6       	in	r0, 0x3f	; 63
    7b92:	f8 94       	cli
    7b94:	de bf       	out	0x3e, r29	; 62
    7b96:	0f be       	out	0x3f, r0	; 63
    7b98:	cd bf       	out	0x3d, r28	; 61
    7b9a:	7c 01       	movw	r14, r24
    7b9c:	cb 01       	movw	r24, r22
    7b9e:	ba 01       	movw	r22, r20
    7ba0:	f7 01       	movw	r30, r14
    7ba2:	11 82       	std	Z+1, r1	; 0x01
    7ba4:	10 82       	st	Z, r1
    7ba6:	13 82       	std	Z+3, r1	; 0x03
    7ba8:	12 82       	std	Z+2, r1	; 0x02
    7baa:	15 82       	std	Z+5, r1	; 0x05
    7bac:	14 82       	std	Z+4, r1	; 0x04
    7bae:	42 e0       	ldi	r20, 0x02	; 2
    7bb0:	42 0f       	add	r20, r18
    7bb2:	8e 01       	movw	r16, r28
    7bb4:	0f 5f       	subi	r16, 0xFF	; 255
    7bb6:	1f 4f       	sbci	r17, 0xFF	; 255
    7bb8:	c6 d2       	rcall	.+1420   	; 0x8146 <dtostrf>
    7bba:	bc 01       	movw	r22, r24
    7bbc:	c7 01       	movw	r24, r14
    7bbe:	09 df       	rcall	.-494    	; 0x79d2 <_ZN6StringaSEPKc>
    7bc0:	a1 96       	adiw	r28, 0x21	; 33
    7bc2:	0f b6       	in	r0, 0x3f	; 63
    7bc4:	f8 94       	cli
    7bc6:	de bf       	out	0x3e, r29	; 62
    7bc8:	0f be       	out	0x3f, r0	; 63
    7bca:	cd bf       	out	0x3d, r28	; 61
    7bcc:	df 91       	pop	r29
    7bce:	cf 91       	pop	r28
    7bd0:	1f 91       	pop	r17
    7bd2:	0f 91       	pop	r16
    7bd4:	ff 90       	pop	r15
    7bd6:	ef 90       	pop	r14
    7bd8:	08 95       	ret

00007bda <_ZN6String6concatEPKcj>:
    7bda:	ef 92       	push	r14
    7bdc:	ff 92       	push	r15
    7bde:	0f 93       	push	r16
    7be0:	1f 93       	push	r17
    7be2:	cf 93       	push	r28
    7be4:	df 93       	push	r29
    7be6:	61 15       	cp	r22, r1
    7be8:	71 05       	cpc	r23, r1
    7bea:	11 f4       	brne	.+4      	; 0x7bf0 <_ZN6String6concatEPKcj+0x16>
    7bec:	80 e0       	ldi	r24, 0x00	; 0
    7bee:	1a c0       	rjmp	.+52     	; 0x7c24 <_ZN6String6concatEPKcj+0x4a>
    7bf0:	41 15       	cp	r20, r1
    7bf2:	51 05       	cpc	r21, r1
    7bf4:	b1 f0       	breq	.+44     	; 0x7c22 <_ZN6String6concatEPKcj+0x48>
    7bf6:	7b 01       	movw	r14, r22
    7bf8:	ec 01       	movw	r28, r24
    7bfa:	8c 81       	ldd	r24, Y+4	; 0x04
    7bfc:	9d 81       	ldd	r25, Y+5	; 0x05
    7bfe:	8a 01       	movw	r16, r20
    7c00:	08 0f       	add	r16, r24
    7c02:	19 1f       	adc	r17, r25
    7c04:	b8 01       	movw	r22, r16
    7c06:	ce 01       	movw	r24, r28
    7c08:	2c de       	rcall	.-936    	; 0x7862 <_ZN6String7reserveEj>
    7c0a:	88 23       	and	r24, r24
    7c0c:	79 f3       	breq	.-34     	; 0x7bec <_ZN6String6concatEPKcj+0x12>
    7c0e:	28 81       	ld	r18, Y
    7c10:	39 81       	ldd	r19, Y+1	; 0x01
    7c12:	8c 81       	ldd	r24, Y+4	; 0x04
    7c14:	9d 81       	ldd	r25, Y+5	; 0x05
    7c16:	b7 01       	movw	r22, r14
    7c18:	82 0f       	add	r24, r18
    7c1a:	93 1f       	adc	r25, r19
    7c1c:	01 d5       	rcall	.+2562   	; 0x8620 <strcpy>
    7c1e:	1d 83       	std	Y+5, r17	; 0x05
    7c20:	0c 83       	std	Y+4, r16	; 0x04
    7c22:	81 e0       	ldi	r24, 0x01	; 1
    7c24:	df 91       	pop	r29
    7c26:	cf 91       	pop	r28
    7c28:	1f 91       	pop	r17
    7c2a:	0f 91       	pop	r16
    7c2c:	ff 90       	pop	r15
    7c2e:	ef 90       	pop	r14
    7c30:	08 95       	ret

00007c32 <_ZN6String6concatERKS_>:
    7c32:	fb 01       	movw	r30, r22
    7c34:	44 81       	ldd	r20, Z+4	; 0x04
    7c36:	55 81       	ldd	r21, Z+5	; 0x05
    7c38:	60 81       	ld	r22, Z
    7c3a:	71 81       	ldd	r23, Z+1	; 0x01
    7c3c:	ce cf       	rjmp	.-100    	; 0x7bda <_ZN6String6concatEPKcj>

00007c3e <_ZN6String6concatEPKc>:
    7c3e:	61 15       	cp	r22, r1
    7c40:	71 05       	cpc	r23, r1
    7c42:	49 f0       	breq	.+18     	; 0x7c56 <_ZN6String6concatEPKc+0x18>
    7c44:	fb 01       	movw	r30, r22
    7c46:	01 90       	ld	r0, Z+
    7c48:	00 20       	and	r0, r0
    7c4a:	e9 f7       	brne	.-6      	; 0x7c46 <_ZN6String6concatEPKc+0x8>
    7c4c:	31 97       	sbiw	r30, 0x01	; 1
    7c4e:	af 01       	movw	r20, r30
    7c50:	46 1b       	sub	r20, r22
    7c52:	57 0b       	sbc	r21, r23
    7c54:	c2 cf       	rjmp	.-124    	; 0x7bda <_ZN6String6concatEPKcj>
    7c56:	80 e0       	ldi	r24, 0x00	; 0
    7c58:	08 95       	ret

00007c5a <_ZN6String6concatEc>:
    7c5a:	cf 93       	push	r28
    7c5c:	df 93       	push	r29
    7c5e:	00 d0       	rcall	.+0      	; 0x7c60 <_ZN6String6concatEc+0x6>
    7c60:	cd b7       	in	r28, 0x3d	; 61
    7c62:	de b7       	in	r29, 0x3e	; 62
    7c64:	69 83       	std	Y+1, r22	; 0x01
    7c66:	1a 82       	std	Y+2, r1	; 0x02
    7c68:	41 e0       	ldi	r20, 0x01	; 1
    7c6a:	50 e0       	ldi	r21, 0x00	; 0
    7c6c:	be 01       	movw	r22, r28
    7c6e:	6f 5f       	subi	r22, 0xFF	; 255
    7c70:	7f 4f       	sbci	r23, 0xFF	; 255
    7c72:	b3 df       	rcall	.-154    	; 0x7bda <_ZN6String6concatEPKcj>
    7c74:	0f 90       	pop	r0
    7c76:	0f 90       	pop	r0
    7c78:	df 91       	pop	r29
    7c7a:	cf 91       	pop	r28
    7c7c:	08 95       	ret

00007c7e <_ZplRK15StringSumHelperRK6String>:
    7c7e:	cf 93       	push	r28
    7c80:	df 93       	push	r29
    7c82:	ec 01       	movw	r28, r24
    7c84:	fb 01       	movw	r30, r22
    7c86:	44 81       	ldd	r20, Z+4	; 0x04
    7c88:	55 81       	ldd	r21, Z+5	; 0x05
    7c8a:	60 81       	ld	r22, Z
    7c8c:	71 81       	ldd	r23, Z+1	; 0x01
    7c8e:	a5 df       	rcall	.-182    	; 0x7bda <_ZN6String6concatEPKcj>
    7c90:	81 11       	cpse	r24, r1
    7c92:	02 c0       	rjmp	.+4      	; 0x7c98 <_ZplRK15StringSumHelperRK6String+0x1a>
    7c94:	ce 01       	movw	r24, r28
    7c96:	bb dd       	rcall	.-1162   	; 0x780e <_ZN6String10invalidateEv>
    7c98:	ce 01       	movw	r24, r28
    7c9a:	df 91       	pop	r29
    7c9c:	cf 91       	pop	r28
    7c9e:	08 95       	ret

00007ca0 <_ZplRK15StringSumHelperPKc>:
    7ca0:	cf 93       	push	r28
    7ca2:	df 93       	push	r29
    7ca4:	ec 01       	movw	r28, r24
    7ca6:	61 15       	cp	r22, r1
    7ca8:	71 05       	cpc	r23, r1
    7caa:	59 f0       	breq	.+22     	; 0x7cc2 <_ZplRK15StringSumHelperPKc+0x22>
    7cac:	fb 01       	movw	r30, r22
    7cae:	01 90       	ld	r0, Z+
    7cb0:	00 20       	and	r0, r0
    7cb2:	e9 f7       	brne	.-6      	; 0x7cae <_ZplRK15StringSumHelperPKc+0xe>
    7cb4:	31 97       	sbiw	r30, 0x01	; 1
    7cb6:	af 01       	movw	r20, r30
    7cb8:	46 1b       	sub	r20, r22
    7cba:	57 0b       	sbc	r21, r23
    7cbc:	8e df       	rcall	.-228    	; 0x7bda <_ZN6String6concatEPKcj>
    7cbe:	81 11       	cpse	r24, r1
    7cc0:	02 c0       	rjmp	.+4      	; 0x7cc6 <_ZplRK15StringSumHelperPKc+0x26>
    7cc2:	ce 01       	movw	r24, r28
    7cc4:	a4 dd       	rcall	.-1208   	; 0x780e <_ZN6String10invalidateEv>
    7cc6:	ce 01       	movw	r24, r28
    7cc8:	df 91       	pop	r29
    7cca:	cf 91       	pop	r28
    7ccc:	08 95       	ret

00007cce <_ZplRK15StringSumHelperc>:
    7cce:	cf 93       	push	r28
    7cd0:	df 93       	push	r29
    7cd2:	ec 01       	movw	r28, r24
    7cd4:	c2 df       	rcall	.-124    	; 0x7c5a <_ZN6String6concatEc>
    7cd6:	81 11       	cpse	r24, r1
    7cd8:	02 c0       	rjmp	.+4      	; 0x7cde <_ZplRK15StringSumHelperc+0x10>
    7cda:	ce 01       	movw	r24, r28
    7cdc:	98 dd       	rcall	.-1232   	; 0x780e <_ZN6String10invalidateEv>
    7cde:	ce 01       	movw	r24, r28
    7ce0:	df 91       	pop	r29
    7ce2:	cf 91       	pop	r28
    7ce4:	08 95       	ret

00007ce6 <_ZNK6String6equalsEPKc>:
    7ce6:	fc 01       	movw	r30, r24
    7ce8:	24 81       	ldd	r18, Z+4	; 0x04
    7cea:	35 81       	ldd	r19, Z+5	; 0x05
    7cec:	23 2b       	or	r18, r19
    7cee:	31 f4       	brne	.+12     	; 0x7cfc <_ZNK6String6equalsEPKc+0x16>
    7cf0:	21 e0       	ldi	r18, 0x01	; 1
    7cf2:	61 15       	cp	r22, r1
    7cf4:	71 05       	cpc	r23, r1
    7cf6:	99 f0       	breq	.+38     	; 0x7d1e <_ZNK6String6equalsEPKc+0x38>
    7cf8:	fb 01       	movw	r30, r22
    7cfa:	08 c0       	rjmp	.+16     	; 0x7d0c <_ZNK6String6equalsEPKc+0x26>
    7cfc:	fc 01       	movw	r30, r24
    7cfe:	80 81       	ld	r24, Z
    7d00:	91 81       	ldd	r25, Z+1	; 0x01
    7d02:	61 15       	cp	r22, r1
    7d04:	71 05       	cpc	r23, r1
    7d06:	31 f4       	brne	.+12     	; 0x7d14 <_ZNK6String6equalsEPKc+0x2e>
    7d08:	21 e0       	ldi	r18, 0x01	; 1
    7d0a:	fc 01       	movw	r30, r24
    7d0c:	80 81       	ld	r24, Z
    7d0e:	88 23       	and	r24, r24
    7d10:	31 f0       	breq	.+12     	; 0x7d1e <_ZNK6String6equalsEPKc+0x38>
    7d12:	04 c0       	rjmp	.+8      	; 0x7d1c <_ZNK6String6equalsEPKc+0x36>
    7d14:	7c d4       	rcall	.+2296   	; 0x860e <strcmp>
    7d16:	21 e0       	ldi	r18, 0x01	; 1
    7d18:	89 2b       	or	r24, r25
    7d1a:	09 f0       	breq	.+2      	; 0x7d1e <_ZNK6String6equalsEPKc+0x38>
    7d1c:	20 e0       	ldi	r18, 0x00	; 0
    7d1e:	82 2f       	mov	r24, r18
    7d20:	08 95       	ret

00007d22 <_ZNK6String8getBytesEPhjj>:
    7d22:	0f 93       	push	r16
    7d24:	1f 93       	push	r17
    7d26:	cf 93       	push	r28
    7d28:	df 93       	push	r29
    7d2a:	41 15       	cp	r20, r1
    7d2c:	51 05       	cpc	r21, r1
    7d2e:	11 f1       	breq	.+68     	; 0x7d74 <_ZNK6String8getBytesEPhjj+0x52>
    7d30:	61 15       	cp	r22, r1
    7d32:	71 05       	cpc	r23, r1
    7d34:	f9 f0       	breq	.+62     	; 0x7d74 <_ZNK6String8getBytesEPhjj+0x52>
    7d36:	dc 01       	movw	r26, r24
    7d38:	14 96       	adiw	r26, 0x04	; 4
    7d3a:	ed 91       	ld	r30, X+
    7d3c:	fc 91       	ld	r31, X
    7d3e:	15 97       	sbiw	r26, 0x05	; 5
    7d40:	2e 17       	cp	r18, r30
    7d42:	3f 07       	cpc	r19, r31
    7d44:	18 f0       	brcs	.+6      	; 0x7d4c <_ZNK6String8getBytesEPhjj+0x2a>
    7d46:	fb 01       	movw	r30, r22
    7d48:	10 82       	st	Z, r1
    7d4a:	14 c0       	rjmp	.+40     	; 0x7d74 <_ZNK6String8getBytesEPhjj+0x52>
    7d4c:	e2 1b       	sub	r30, r18
    7d4e:	f3 0b       	sbc	r31, r19
    7d50:	ea 01       	movw	r28, r20
    7d52:	21 97       	sbiw	r28, 0x01	; 1
    7d54:	ec 17       	cp	r30, r28
    7d56:	fd 07       	cpc	r31, r29
    7d58:	08 f4       	brcc	.+2      	; 0x7d5c <_ZNK6String8getBytesEPhjj+0x3a>
    7d5a:	ef 01       	movw	r28, r30
    7d5c:	8b 01       	movw	r16, r22
    7d5e:	fc 01       	movw	r30, r24
    7d60:	60 81       	ld	r22, Z
    7d62:	71 81       	ldd	r23, Z+1	; 0x01
    7d64:	62 0f       	add	r22, r18
    7d66:	73 1f       	adc	r23, r19
    7d68:	ae 01       	movw	r20, r28
    7d6a:	c8 01       	movw	r24, r16
    7d6c:	6e d4       	rcall	.+2268   	; 0x864a <strncpy>
    7d6e:	c0 0f       	add	r28, r16
    7d70:	d1 1f       	adc	r29, r17
    7d72:	18 82       	st	Y, r1
    7d74:	df 91       	pop	r29
    7d76:	cf 91       	pop	r28
    7d78:	1f 91       	pop	r17
    7d7a:	0f 91       	pop	r16
    7d7c:	08 95       	ret

00007d7e <_ZNK6String9substringEjj>:
    7d7e:	bf 92       	push	r11
    7d80:	cf 92       	push	r12
    7d82:	df 92       	push	r13
    7d84:	ef 92       	push	r14
    7d86:	ff 92       	push	r15
    7d88:	0f 93       	push	r16
    7d8a:	1f 93       	push	r17
    7d8c:	cf 93       	push	r28
    7d8e:	df 93       	push	r29
    7d90:	7c 01       	movw	r14, r24
    7d92:	6b 01       	movw	r12, r22
    7d94:	8a 01       	movw	r16, r20
    7d96:	e9 01       	movw	r28, r18
    7d98:	24 17       	cp	r18, r20
    7d9a:	35 07       	cpc	r19, r21
    7d9c:	20 f4       	brcc	.+8      	; 0x7da6 <_ZNK6String9substringEjj+0x28>
    7d9e:	81 2f       	mov	r24, r17
    7da0:	89 01       	movw	r16, r18
    7da2:	c4 2f       	mov	r28, r20
    7da4:	d8 2f       	mov	r29, r24
    7da6:	6f ef       	ldi	r22, 0xFF	; 255
    7da8:	71 e0       	ldi	r23, 0x01	; 1
    7daa:	c7 01       	movw	r24, r14
    7dac:	93 dd       	rcall	.-1242   	; 0x78d4 <_ZN6StringC1EPKc>
    7dae:	d6 01       	movw	r26, r12
    7db0:	14 96       	adiw	r26, 0x04	; 4
    7db2:	8d 91       	ld	r24, X+
    7db4:	9c 91       	ld	r25, X
    7db6:	15 97       	sbiw	r26, 0x05	; 5
    7db8:	08 17       	cp	r16, r24
    7dba:	19 07       	cpc	r17, r25
    7dbc:	c0 f4       	brcc	.+48     	; 0x7dee <_ZNK6String9substringEjj+0x70>
    7dbe:	8c 17       	cp	r24, r28
    7dc0:	9d 07       	cpc	r25, r29
    7dc2:	08 f4       	brcc	.+2      	; 0x7dc6 <_ZNK6String9substringEjj+0x48>
    7dc4:	ec 01       	movw	r28, r24
    7dc6:	d6 01       	movw	r26, r12
    7dc8:	ed 91       	ld	r30, X+
    7dca:	fc 91       	ld	r31, X
    7dcc:	11 97       	sbiw	r26, 0x01	; 1
    7dce:	ec 0f       	add	r30, r28
    7dd0:	fd 1f       	adc	r31, r29
    7dd2:	b0 80       	ld	r11, Z
    7dd4:	10 82       	st	Z, r1
    7dd6:	6d 91       	ld	r22, X+
    7dd8:	7c 91       	ld	r23, X
    7dda:	60 0f       	add	r22, r16
    7ddc:	71 1f       	adc	r23, r17
    7dde:	c7 01       	movw	r24, r14
    7de0:	f8 dd       	rcall	.-1040   	; 0x79d2 <_ZN6StringaSEPKc>
    7de2:	d6 01       	movw	r26, r12
    7de4:	ed 91       	ld	r30, X+
    7de6:	fc 91       	ld	r31, X
    7de8:	ec 0f       	add	r30, r28
    7dea:	fd 1f       	adc	r31, r29
    7dec:	b0 82       	st	Z, r11
    7dee:	c7 01       	movw	r24, r14
    7df0:	df 91       	pop	r29
    7df2:	cf 91       	pop	r28
    7df4:	1f 91       	pop	r17
    7df6:	0f 91       	pop	r16
    7df8:	ff 90       	pop	r15
    7dfa:	ef 90       	pop	r14
    7dfc:	df 90       	pop	r13
    7dfe:	cf 90       	pop	r12
    7e00:	bf 90       	pop	r11
    7e02:	08 95       	ret

00007e04 <_ZN6String4trimEv>:

void String::trim(void)
{
    7e04:	af 92       	push	r10
    7e06:	bf 92       	push	r11
    7e08:	cf 92       	push	r12
    7e0a:	df 92       	push	r13
    7e0c:	ef 92       	push	r14
    7e0e:	ff 92       	push	r15
    7e10:	0f 93       	push	r16
    7e12:	1f 93       	push	r17
    7e14:	cf 93       	push	r28
    7e16:	df 93       	push	r29
	if (!buffer || len == 0) return;
    7e18:	dc 01       	movw	r26, r24
    7e1a:	cd 90       	ld	r12, X+
    7e1c:	dc 90       	ld	r13, X
    7e1e:	11 97       	sbiw	r26, 0x01	; 1
    7e20:	c1 14       	cp	r12, r1
    7e22:	d1 04       	cpc	r13, r1
    7e24:	09 f4       	brne	.+2      	; 0x7e28 <_ZN6String4trimEv+0x24>
    7e26:	3c c0       	rjmp	.+120    	; 0x7ea0 <_ZN6String4trimEv+0x9c>
    7e28:	14 96       	adiw	r26, 0x04	; 4
    7e2a:	cd 91       	ld	r28, X+
    7e2c:	dc 91       	ld	r29, X
    7e2e:	15 97       	sbiw	r26, 0x05	; 5
    7e30:	20 97       	sbiw	r28, 0x00	; 0
    7e32:	b1 f1       	breq	.+108    	; 0x7ea0 <_ZN6String4trimEv+0x9c>
    7e34:	8c 01       	movw	r16, r24
    7e36:	76 01       	movw	r14, r12
    7e38:	57 01       	movw	r10, r14
    7e3a:	bf ef       	ldi	r27, 0xFF	; 255
    7e3c:	ab 1a       	sub	r10, r27
    7e3e:	bb 0a       	sbc	r11, r27
	char *begin = buffer;
	while (isspace(*begin)) begin++;
    7e40:	f7 01       	movw	r30, r14
    7e42:	80 81       	ld	r24, Z
    7e44:	90 e0       	ldi	r25, 0x00	; 0
    7e46:	c9 d3       	rcall	.+1938   	; 0x85da <isspace>
    7e48:	89 2b       	or	r24, r25
    7e4a:	11 f0       	breq	.+4      	; 0x7e50 <_ZN6String4trimEv+0x4c>
    7e4c:	75 01       	movw	r14, r10
    7e4e:	f4 cf       	rjmp	.-24     	; 0x7e38 <_ZN6String4trimEv+0x34>
	char *end = buffer + len - 1;
    7e50:	21 97       	sbiw	r28, 0x01	; 1
    7e52:	cc 0d       	add	r28, r12
    7e54:	dd 1d       	adc	r29, r13
	while (isspace(*end) && end >= begin) end--;
    7e56:	88 81       	ld	r24, Y
    7e58:	90 e0       	ldi	r25, 0x00	; 0
    7e5a:	bf d3       	rcall	.+1918   	; 0x85da <isspace>
    7e5c:	89 2b       	or	r24, r25
    7e5e:	29 f0       	breq	.+10     	; 0x7e6a <_ZN6String4trimEv+0x66>
    7e60:	ce 15       	cp	r28, r14
    7e62:	df 05       	cpc	r29, r15
    7e64:	10 f0       	brcs	.+4      	; 0x7e6a <_ZN6String4trimEv+0x66>
    7e66:	21 97       	sbiw	r28, 0x01	; 1
    7e68:	f6 cf       	rjmp	.-20     	; 0x7e56 <_ZN6String4trimEv+0x52>
	len = end + 1 - begin;
    7e6a:	ae 01       	movw	r20, r28
    7e6c:	4f 5f       	subi	r20, 0xFF	; 255
    7e6e:	5f 4f       	sbci	r21, 0xFF	; 255
    7e70:	4e 19       	sub	r20, r14
    7e72:	5f 09       	sbc	r21, r15
    7e74:	d8 01       	movw	r26, r16
    7e76:	15 96       	adiw	r26, 0x05	; 5
    7e78:	5c 93       	st	X, r21
    7e7a:	4e 93       	st	-X, r20
    7e7c:	14 97       	sbiw	r26, 0x04	; 4
	if (begin > buffer) memcpy(buffer, begin, len);
    7e7e:	ce 14       	cp	r12, r14
    7e80:	df 04       	cpc	r13, r15
    7e82:	18 f4       	brcc	.+6      	; 0x7e8a <_ZN6String4trimEv+0x86>
    7e84:	b7 01       	movw	r22, r14
    7e86:	c6 01       	movw	r24, r12
    7e88:	b9 d3       	rcall	.+1906   	; 0x85fc <memcpy>
	buffer[len] = 0;
    7e8a:	d8 01       	movw	r26, r16
    7e8c:	ed 91       	ld	r30, X+
    7e8e:	fc 91       	ld	r31, X
    7e90:	11 97       	sbiw	r26, 0x01	; 1
    7e92:	14 96       	adiw	r26, 0x04	; 4
    7e94:	8d 91       	ld	r24, X+
    7e96:	9c 91       	ld	r25, X
    7e98:	15 97       	sbiw	r26, 0x05	; 5
    7e9a:	e8 0f       	add	r30, r24
    7e9c:	f9 1f       	adc	r31, r25
    7e9e:	10 82       	st	Z, r1
}
    7ea0:	df 91       	pop	r29
    7ea2:	cf 91       	pop	r28
    7ea4:	1f 91       	pop	r17
    7ea6:	0f 91       	pop	r16
    7ea8:	ff 90       	pop	r15
    7eaa:	ef 90       	pop	r14
    7eac:	df 90       	pop	r13
    7eae:	cf 90       	pop	r12
    7eb0:	bf 90       	pop	r11
    7eb2:	af 90       	pop	r10
    7eb4:	08 95       	ret

00007eb6 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
    7eb6:	fc 01       	movw	r30, r24
    7eb8:	80 81       	ld	r24, Z
    7eba:	91 81       	ldd	r25, Z+1	; 0x01
    7ebc:	00 97       	sbiw	r24, 0x00	; 0
    7ebe:	09 f0       	breq	.+2      	; 0x7ec2 <_ZNK6String5toIntEv+0xc>
    7ec0:	66 c3       	rjmp	.+1740   	; 0x858e <atol>
	return 0;
}
    7ec2:	60 e0       	ldi	r22, 0x00	; 0
    7ec4:	70 e0       	ldi	r23, 0x00	; 0
    7ec6:	cb 01       	movw	r24, r22
    7ec8:	08 95       	ret

00007eca <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    7eca:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    7ecc:	91 8d       	ldd	r25, Z+25	; 0x19
    7ece:	22 8d       	ldd	r18, Z+26	; 0x1a
    7ed0:	89 2f       	mov	r24, r25
    7ed2:	90 e0       	ldi	r25, 0x00	; 0
    7ed4:	80 5c       	subi	r24, 0xC0	; 192
    7ed6:	9f 4f       	sbci	r25, 0xFF	; 255
    7ed8:	82 1b       	sub	r24, r18
    7eda:	91 09       	sbc	r25, r1
}
    7edc:	8f 73       	andi	r24, 0x3F	; 63
    7ede:	99 27       	eor	r25, r25
    7ee0:	08 95       	ret

00007ee2 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    7ee2:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    7ee4:	91 8d       	ldd	r25, Z+25	; 0x19
    7ee6:	82 8d       	ldd	r24, Z+26	; 0x1a
    7ee8:	98 17       	cp	r25, r24
    7eea:	31 f0       	breq	.+12     	; 0x7ef8 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    7eec:	82 8d       	ldd	r24, Z+26	; 0x1a
    7eee:	e8 0f       	add	r30, r24
    7ef0:	f1 1d       	adc	r31, r1
    7ef2:	85 8d       	ldd	r24, Z+29	; 0x1d
    7ef4:	90 e0       	ldi	r25, 0x00	; 0
    7ef6:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    7ef8:	8f ef       	ldi	r24, 0xFF	; 255
    7efa:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    7efc:	08 95       	ret

00007efe <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    7efe:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    7f00:	91 8d       	ldd	r25, Z+25	; 0x19
    7f02:	82 8d       	ldd	r24, Z+26	; 0x1a
    7f04:	98 17       	cp	r25, r24
    7f06:	61 f0       	breq	.+24     	; 0x7f20 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    7f08:	82 8d       	ldd	r24, Z+26	; 0x1a
    7f0a:	df 01       	movw	r26, r30
    7f0c:	a8 0f       	add	r26, r24
    7f0e:	b1 1d       	adc	r27, r1
    7f10:	5d 96       	adiw	r26, 0x1d	; 29
    7f12:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    7f14:	92 8d       	ldd	r25, Z+26	; 0x1a
    7f16:	9f 5f       	subi	r25, 0xFF	; 255
    7f18:	9f 73       	andi	r25, 0x3F	; 63
    7f1a:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    7f1c:	90 e0       	ldi	r25, 0x00	; 0
    7f1e:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    7f20:	8f ef       	ldi	r24, 0xFF	; 255
    7f22:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    7f24:	08 95       	ret

00007f26 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    7f26:	fc 01       	movw	r30, r24
    7f28:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    7f2a:	44 8d       	ldd	r20, Z+28	; 0x1c
    7f2c:	25 2f       	mov	r18, r21
    7f2e:	30 e0       	ldi	r19, 0x00	; 0
    7f30:	84 2f       	mov	r24, r20
    7f32:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    7f34:	82 1b       	sub	r24, r18
    7f36:	93 0b       	sbc	r25, r19
    7f38:	54 17       	cp	r21, r20
    7f3a:	10 f0       	brcs	.+4      	; 0x7f40 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    7f3c:	cf 96       	adiw	r24, 0x3f	; 63
    7f3e:	08 95       	ret
  return tail - head - 1;
    7f40:	01 97       	sbiw	r24, 0x01	; 1
}
    7f42:	08 95       	ret

00007f44 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    7f44:	82 e9       	ldi	r24, 0x92	; 146
    7f46:	98 e3       	ldi	r25, 0x38	; 56
    7f48:	89 2b       	or	r24, r25
    7f4a:	41 f0       	breq	.+16     	; 0x7f5c <_Z14serialEventRunv+0x18>
    7f4c:	80 e0       	ldi	r24, 0x00	; 0
    7f4e:	90 e0       	ldi	r25, 0x00	; 0
    7f50:	89 2b       	or	r24, r25
    7f52:	21 f0       	breq	.+8      	; 0x7f5c <_Z14serialEventRunv+0x18>
    7f54:	e7 d8       	rcall	.-3634   	; 0x7124 <_Z17Serial0_availablev>
    7f56:	81 11       	cpse	r24, r1
    7f58:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    7f5c:	08 95       	ret

00007f5e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    7f5e:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    7f60:	84 8d       	ldd	r24, Z+28	; 0x1c
    7f62:	df 01       	movw	r26, r30
    7f64:	a8 0f       	add	r26, r24
    7f66:	b1 1d       	adc	r27, r1
    7f68:	a3 5a       	subi	r26, 0xA3	; 163
    7f6a:	bf 4f       	sbci	r27, 0xFF	; 255
    7f6c:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    7f6e:	84 8d       	ldd	r24, Z+28	; 0x1c
    7f70:	90 e0       	ldi	r25, 0x00	; 0
    7f72:	01 96       	adiw	r24, 0x01	; 1
    7f74:	8f 73       	andi	r24, 0x3F	; 63
    7f76:	99 27       	eor	r25, r25
    7f78:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    7f7a:	a6 89       	ldd	r26, Z+22	; 0x16
    7f7c:	b7 89       	ldd	r27, Z+23	; 0x17
    7f7e:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    7f80:	a0 89       	ldd	r26, Z+16	; 0x10
    7f82:	b1 89       	ldd	r27, Z+17	; 0x11
    7f84:	8c 91       	ld	r24, X
    7f86:	83 70       	andi	r24, 0x03	; 3
    7f88:	80 64       	ori	r24, 0x40	; 64
    7f8a:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    7f8c:	93 8d       	ldd	r25, Z+27	; 0x1b
    7f8e:	84 8d       	ldd	r24, Z+28	; 0x1c
    7f90:	98 13       	cpse	r25, r24
    7f92:	06 c0       	rjmp	.+12     	; 0x7fa0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    7f94:	02 88       	ldd	r0, Z+18	; 0x12
    7f96:	f3 89       	ldd	r31, Z+19	; 0x13
    7f98:	e0 2d       	mov	r30, r0
    7f9a:	80 81       	ld	r24, Z
    7f9c:	8f 7d       	andi	r24, 0xDF	; 223
    7f9e:	80 83       	st	Z, r24
    7fa0:	08 95       	ret

00007fa2 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    7fa2:	ef 92       	push	r14
    7fa4:	ff 92       	push	r15
    7fa6:	0f 93       	push	r16
    7fa8:	1f 93       	push	r17
    7faa:	cf 93       	push	r28
    7fac:	df 93       	push	r29
    7fae:	ec 01       	movw	r28, r24
  _written = true;
    7fb0:	81 e0       	ldi	r24, 0x01	; 1
    7fb2:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    7fb4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    7fb6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    7fb8:	98 13       	cpse	r25, r24
    7fba:	05 c0       	rjmp	.+10     	; 0x7fc6 <_ZN14HardwareSerial5writeEh+0x24>
    7fbc:	e8 89       	ldd	r30, Y+16	; 0x10
    7fbe:	f9 89       	ldd	r31, Y+17	; 0x11
    7fc0:	80 81       	ld	r24, Z
    7fc2:	85 fd       	sbrc	r24, 5
    7fc4:	25 c0       	rjmp	.+74     	; 0x8010 <_ZN14HardwareSerial5writeEh+0x6e>
    7fc6:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    7fc8:	0b 8d       	ldd	r16, Y+27	; 0x1b
    7fca:	10 e0       	ldi	r17, 0x00	; 0
    7fcc:	0f 5f       	subi	r16, 0xFF	; 255
    7fce:	1f 4f       	sbci	r17, 0xFF	; 255
    7fd0:	0f 73       	andi	r16, 0x3F	; 63
    7fd2:	11 27       	eor	r17, r17
    7fd4:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    7fd6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    7fd8:	e8 12       	cpse	r14, r24
    7fda:	0b c0       	rjmp	.+22     	; 0x7ff2 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    7fdc:	0f b6       	in	r0, 0x3f	; 63
    7fde:	07 fc       	sbrc	r0, 7
    7fe0:	fa cf       	rjmp	.-12     	; 0x7fd6 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    7fe2:	e8 89       	ldd	r30, Y+16	; 0x10
    7fe4:	f9 89       	ldd	r31, Y+17	; 0x11
    7fe6:	80 81       	ld	r24, Z
    7fe8:	85 ff       	sbrs	r24, 5
    7fea:	f5 cf       	rjmp	.-22     	; 0x7fd6 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    7fec:	ce 01       	movw	r24, r28
    7fee:	b7 df       	rcall	.-146    	; 0x7f5e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    7ff0:	f2 cf       	rjmp	.-28     	; 0x7fd6 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    7ff2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7ff4:	fe 01       	movw	r30, r28
    7ff6:	e8 0f       	add	r30, r24
    7ff8:	f1 1d       	adc	r31, r1
    7ffa:	e3 5a       	subi	r30, 0xA3	; 163
    7ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    7ffe:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    8000:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    8002:	f8 94       	cli
    _tx_buffer_head = i;
    8004:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    8006:	ea 89       	ldd	r30, Y+18	; 0x12
    8008:	fb 89       	ldd	r31, Y+19	; 0x13
    800a:	80 81       	ld	r24, Z
    800c:	80 62       	ori	r24, 0x20	; 32
    800e:	0a c0       	rjmp	.+20     	; 0x8024 <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    8010:	9f b7       	in	r25, 0x3f	; 63
    8012:	f8 94       	cli
      *_udr = c;
    8014:	ee 89       	ldd	r30, Y+22	; 0x16
    8016:	ff 89       	ldd	r31, Y+23	; 0x17
    8018:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    801a:	e8 89       	ldd	r30, Y+16	; 0x10
    801c:	f9 89       	ldd	r31, Y+17	; 0x11
    801e:	80 81       	ld	r24, Z
    8020:	83 70       	andi	r24, 0x03	; 3
    8022:	80 64       	ori	r24, 0x40	; 64
    8024:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    8026:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    8028:	81 e0       	ldi	r24, 0x01	; 1
    802a:	90 e0       	ldi	r25, 0x00	; 0
    802c:	df 91       	pop	r29
    802e:	cf 91       	pop	r28
    8030:	1f 91       	pop	r17
    8032:	0f 91       	pop	r16
    8034:	ff 90       	pop	r15
    8036:	ef 90       	pop	r14
    8038:	08 95       	ret

0000803a <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    803a:	cf 93       	push	r28
    803c:	df 93       	push	r29
    803e:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    8040:	88 8d       	ldd	r24, Y+24	; 0x18
    8042:	88 23       	and	r24, r24
    8044:	c1 f0       	breq	.+48     	; 0x8076 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    8046:	ea 89       	ldd	r30, Y+18	; 0x12
    8048:	fb 89       	ldd	r31, Y+19	; 0x13
    804a:	80 81       	ld	r24, Z
    804c:	85 fd       	sbrc	r24, 5
    804e:	05 c0       	rjmp	.+10     	; 0x805a <_ZN14HardwareSerial5flushEv+0x20>
    8050:	a8 89       	ldd	r26, Y+16	; 0x10
    8052:	b9 89       	ldd	r27, Y+17	; 0x11
    8054:	8c 91       	ld	r24, X
    8056:	86 fd       	sbrc	r24, 6
    8058:	0e c0       	rjmp	.+28     	; 0x8076 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    805a:	0f b6       	in	r0, 0x3f	; 63
    805c:	07 fc       	sbrc	r0, 7
    805e:	f5 cf       	rjmp	.-22     	; 0x804a <_ZN14HardwareSerial5flushEv+0x10>
    8060:	80 81       	ld	r24, Z
    8062:	85 ff       	sbrs	r24, 5
    8064:	f2 cf       	rjmp	.-28     	; 0x804a <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    8066:	a8 89       	ldd	r26, Y+16	; 0x10
    8068:	b9 89       	ldd	r27, Y+17	; 0x11
    806a:	8c 91       	ld	r24, X
    806c:	85 ff       	sbrs	r24, 5
    806e:	ed cf       	rjmp	.-38     	; 0x804a <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    8070:	ce 01       	movw	r24, r28
    8072:	75 df       	rcall	.-278    	; 0x7f5e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    8074:	e8 cf       	rjmp	.-48     	; 0x8046 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    8076:	df 91       	pop	r29
    8078:	cf 91       	pop	r28
    807a:	08 95       	ret

0000807c <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    807c:	08 95       	ret

0000807e <__udivmodqi4>:
    807e:	99 1b       	sub	r25, r25
    8080:	79 e0       	ldi	r23, 0x09	; 9
    8082:	04 c0       	rjmp	.+8      	; 0x808c <__udivmodqi4_ep>

00008084 <__udivmodqi4_loop>:
    8084:	99 1f       	adc	r25, r25
    8086:	96 17       	cp	r25, r22
    8088:	08 f0       	brcs	.+2      	; 0x808c <__udivmodqi4_ep>
    808a:	96 1b       	sub	r25, r22

0000808c <__udivmodqi4_ep>:
    808c:	88 1f       	adc	r24, r24
    808e:	7a 95       	dec	r23
    8090:	c9 f7       	brne	.-14     	; 0x8084 <__udivmodqi4_loop>
    8092:	80 95       	com	r24
    8094:	08 95       	ret

00008096 <__udivmodhi4>:
    8096:	aa 1b       	sub	r26, r26
    8098:	bb 1b       	sub	r27, r27
    809a:	51 e1       	ldi	r21, 0x11	; 17
    809c:	07 c0       	rjmp	.+14     	; 0x80ac <__udivmodhi4_ep>

0000809e <__udivmodhi4_loop>:
    809e:	aa 1f       	adc	r26, r26
    80a0:	bb 1f       	adc	r27, r27
    80a2:	a6 17       	cp	r26, r22
    80a4:	b7 07       	cpc	r27, r23
    80a6:	10 f0       	brcs	.+4      	; 0x80ac <__udivmodhi4_ep>
    80a8:	a6 1b       	sub	r26, r22
    80aa:	b7 0b       	sbc	r27, r23

000080ac <__udivmodhi4_ep>:
    80ac:	88 1f       	adc	r24, r24
    80ae:	99 1f       	adc	r25, r25
    80b0:	5a 95       	dec	r21
    80b2:	a9 f7       	brne	.-22     	; 0x809e <__udivmodhi4_loop>
    80b4:	80 95       	com	r24
    80b6:	90 95       	com	r25
    80b8:	bc 01       	movw	r22, r24
    80ba:	cd 01       	movw	r24, r26
    80bc:	08 95       	ret

000080be <__udivmodsi4>:
    80be:	a1 e2       	ldi	r26, 0x21	; 33
    80c0:	1a 2e       	mov	r1, r26
    80c2:	aa 1b       	sub	r26, r26
    80c4:	bb 1b       	sub	r27, r27
    80c6:	fd 01       	movw	r30, r26
    80c8:	0d c0       	rjmp	.+26     	; 0x80e4 <__udivmodsi4_ep>

000080ca <__udivmodsi4_loop>:
    80ca:	aa 1f       	adc	r26, r26
    80cc:	bb 1f       	adc	r27, r27
    80ce:	ee 1f       	adc	r30, r30
    80d0:	ff 1f       	adc	r31, r31
    80d2:	a2 17       	cp	r26, r18
    80d4:	b3 07       	cpc	r27, r19
    80d6:	e4 07       	cpc	r30, r20
    80d8:	f5 07       	cpc	r31, r21
    80da:	20 f0       	brcs	.+8      	; 0x80e4 <__udivmodsi4_ep>
    80dc:	a2 1b       	sub	r26, r18
    80de:	b3 0b       	sbc	r27, r19
    80e0:	e4 0b       	sbc	r30, r20
    80e2:	f5 0b       	sbc	r31, r21

000080e4 <__udivmodsi4_ep>:
    80e4:	66 1f       	adc	r22, r22
    80e6:	77 1f       	adc	r23, r23
    80e8:	88 1f       	adc	r24, r24
    80ea:	99 1f       	adc	r25, r25
    80ec:	1a 94       	dec	r1
    80ee:	69 f7       	brne	.-38     	; 0x80ca <__udivmodsi4_loop>
    80f0:	60 95       	com	r22
    80f2:	70 95       	com	r23
    80f4:	80 95       	com	r24
    80f6:	90 95       	com	r25
    80f8:	9b 01       	movw	r18, r22
    80fa:	ac 01       	movw	r20, r24
    80fc:	bd 01       	movw	r22, r26
    80fe:	cf 01       	movw	r24, r30
    8100:	08 95       	ret

00008102 <__tablejump2__>:
    8102:	ee 0f       	add	r30, r30
    8104:	ff 1f       	adc	r31, r31
    8106:	00 24       	eor	r0, r0
    8108:	00 1c       	adc	r0, r0
    810a:	0b be       	out	0x3b, r0	; 59
    810c:	07 90       	elpm	r0, Z+
    810e:	f6 91       	elpm	r31, Z
    8110:	e0 2d       	mov	r30, r0
    8112:	09 94       	ijmp

00008114 <__umulhisi3>:
    8114:	a2 9f       	mul	r26, r18
    8116:	b0 01       	movw	r22, r0
    8118:	b3 9f       	mul	r27, r19
    811a:	c0 01       	movw	r24, r0
    811c:	a3 9f       	mul	r26, r19
    811e:	70 0d       	add	r23, r0
    8120:	81 1d       	adc	r24, r1
    8122:	11 24       	eor	r1, r1
    8124:	91 1d       	adc	r25, r1
    8126:	b2 9f       	mul	r27, r18
    8128:	70 0d       	add	r23, r0
    812a:	81 1d       	adc	r24, r1
    812c:	11 24       	eor	r1, r1
    812e:	91 1d       	adc	r25, r1
    8130:	08 95       	ret

00008132 <__muluhisi3>:
    8132:	f0 df       	rcall	.-32     	; 0x8114 <__umulhisi3>
    8134:	a5 9f       	mul	r26, r21
    8136:	90 0d       	add	r25, r0
    8138:	b4 9f       	mul	r27, r20
    813a:	90 0d       	add	r25, r0
    813c:	a4 9f       	mul	r26, r20
    813e:	80 0d       	add	r24, r0
    8140:	91 1d       	adc	r25, r1
    8142:	11 24       	eor	r1, r1
    8144:	08 95       	ret

00008146 <dtostrf>:
    8146:	ef 92       	push	r14
    8148:	0f 93       	push	r16
    814a:	1f 93       	push	r17
    814c:	cf 93       	push	r28
    814e:	df 93       	push	r29
    8150:	e8 01       	movw	r28, r16
    8152:	47 fd       	sbrc	r20, 7
    8154:	02 c0       	rjmp	.+4      	; 0x815a <dtostrf+0x14>
    8156:	34 e0       	ldi	r19, 0x04	; 4
    8158:	01 c0       	rjmp	.+2      	; 0x815c <dtostrf+0x16>
    815a:	34 e1       	ldi	r19, 0x14	; 20
    815c:	04 2e       	mov	r0, r20
    815e:	00 0c       	add	r0, r0
    8160:	55 0b       	sbc	r21, r21
    8162:	57 ff       	sbrs	r21, 7
    8164:	03 c0       	rjmp	.+6      	; 0x816c <dtostrf+0x26>
    8166:	51 95       	neg	r21
    8168:	41 95       	neg	r20
    816a:	51 09       	sbc	r21, r1
    816c:	e3 2e       	mov	r14, r19
    816e:	02 2f       	mov	r16, r18
    8170:	24 2f       	mov	r18, r20
    8172:	ae 01       	movw	r20, r28
    8174:	f0 d2       	rcall	.+1504   	; 0x8756 <dtoa_prf>
    8176:	ce 01       	movw	r24, r28
    8178:	df 91       	pop	r29
    817a:	cf 91       	pop	r28
    817c:	1f 91       	pop	r17
    817e:	0f 91       	pop	r16
    8180:	ef 90       	pop	r14
    8182:	08 95       	ret

00008184 <malloc>:
    8184:	0f 93       	push	r16
    8186:	1f 93       	push	r17
    8188:	cf 93       	push	r28
    818a:	df 93       	push	r29
    818c:	82 30       	cpi	r24, 0x02	; 2
    818e:	91 05       	cpc	r25, r1
    8190:	10 f4       	brcc	.+4      	; 0x8196 <malloc+0x12>
    8192:	82 e0       	ldi	r24, 0x02	; 2
    8194:	90 e0       	ldi	r25, 0x00	; 0
    8196:	e0 91 e0 0d 	lds	r30, 0x0DE0	; 0x800de0 <__flp>
    819a:	f0 91 e1 0d 	lds	r31, 0x0DE1	; 0x800de1 <__flp+0x1>
    819e:	20 e0       	ldi	r18, 0x00	; 0
    81a0:	30 e0       	ldi	r19, 0x00	; 0
    81a2:	a0 e0       	ldi	r26, 0x00	; 0
    81a4:	b0 e0       	ldi	r27, 0x00	; 0
    81a6:	30 97       	sbiw	r30, 0x00	; 0
    81a8:	19 f1       	breq	.+70     	; 0x81f0 <malloc+0x6c>
    81aa:	40 81       	ld	r20, Z
    81ac:	51 81       	ldd	r21, Z+1	; 0x01
    81ae:	02 81       	ldd	r16, Z+2	; 0x02
    81b0:	13 81       	ldd	r17, Z+3	; 0x03
    81b2:	48 17       	cp	r20, r24
    81b4:	59 07       	cpc	r21, r25
    81b6:	c8 f0       	brcs	.+50     	; 0x81ea <malloc+0x66>
    81b8:	84 17       	cp	r24, r20
    81ba:	95 07       	cpc	r25, r21
    81bc:	69 f4       	brne	.+26     	; 0x81d8 <malloc+0x54>
    81be:	10 97       	sbiw	r26, 0x00	; 0
    81c0:	31 f0       	breq	.+12     	; 0x81ce <malloc+0x4a>
    81c2:	12 96       	adiw	r26, 0x02	; 2
    81c4:	0c 93       	st	X, r16
    81c6:	12 97       	sbiw	r26, 0x02	; 2
    81c8:	13 96       	adiw	r26, 0x03	; 3
    81ca:	1c 93       	st	X, r17
    81cc:	27 c0       	rjmp	.+78     	; 0x821c <malloc+0x98>
    81ce:	00 93 e0 0d 	sts	0x0DE0, r16	; 0x800de0 <__flp>
    81d2:	10 93 e1 0d 	sts	0x0DE1, r17	; 0x800de1 <__flp+0x1>
    81d6:	22 c0       	rjmp	.+68     	; 0x821c <malloc+0x98>
    81d8:	21 15       	cp	r18, r1
    81da:	31 05       	cpc	r19, r1
    81dc:	19 f0       	breq	.+6      	; 0x81e4 <malloc+0x60>
    81de:	42 17       	cp	r20, r18
    81e0:	53 07       	cpc	r21, r19
    81e2:	18 f4       	brcc	.+6      	; 0x81ea <malloc+0x66>
    81e4:	9a 01       	movw	r18, r20
    81e6:	bd 01       	movw	r22, r26
    81e8:	ef 01       	movw	r28, r30
    81ea:	df 01       	movw	r26, r30
    81ec:	f8 01       	movw	r30, r16
    81ee:	db cf       	rjmp	.-74     	; 0x81a6 <malloc+0x22>
    81f0:	21 15       	cp	r18, r1
    81f2:	31 05       	cpc	r19, r1
    81f4:	f9 f0       	breq	.+62     	; 0x8234 <malloc+0xb0>
    81f6:	28 1b       	sub	r18, r24
    81f8:	39 0b       	sbc	r19, r25
    81fa:	24 30       	cpi	r18, 0x04	; 4
    81fc:	31 05       	cpc	r19, r1
    81fe:	80 f4       	brcc	.+32     	; 0x8220 <malloc+0x9c>
    8200:	8a 81       	ldd	r24, Y+2	; 0x02
    8202:	9b 81       	ldd	r25, Y+3	; 0x03
    8204:	61 15       	cp	r22, r1
    8206:	71 05       	cpc	r23, r1
    8208:	21 f0       	breq	.+8      	; 0x8212 <malloc+0x8e>
    820a:	fb 01       	movw	r30, r22
    820c:	93 83       	std	Z+3, r25	; 0x03
    820e:	82 83       	std	Z+2, r24	; 0x02
    8210:	04 c0       	rjmp	.+8      	; 0x821a <malloc+0x96>
    8212:	90 93 e1 0d 	sts	0x0DE1, r25	; 0x800de1 <__flp+0x1>
    8216:	80 93 e0 0d 	sts	0x0DE0, r24	; 0x800de0 <__flp>
    821a:	fe 01       	movw	r30, r28
    821c:	32 96       	adiw	r30, 0x02	; 2
    821e:	44 c0       	rjmp	.+136    	; 0x82a8 <malloc+0x124>
    8220:	fe 01       	movw	r30, r28
    8222:	e2 0f       	add	r30, r18
    8224:	f3 1f       	adc	r31, r19
    8226:	81 93       	st	Z+, r24
    8228:	91 93       	st	Z+, r25
    822a:	22 50       	subi	r18, 0x02	; 2
    822c:	31 09       	sbc	r19, r1
    822e:	39 83       	std	Y+1, r19	; 0x01
    8230:	28 83       	st	Y, r18
    8232:	3a c0       	rjmp	.+116    	; 0x82a8 <malloc+0x124>
    8234:	20 91 de 0d 	lds	r18, 0x0DDE	; 0x800dde <__brkval>
    8238:	30 91 df 0d 	lds	r19, 0x0DDF	; 0x800ddf <__brkval+0x1>
    823c:	23 2b       	or	r18, r19
    823e:	41 f4       	brne	.+16     	; 0x8250 <malloc+0xcc>
    8240:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    8244:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    8248:	30 93 df 0d 	sts	0x0DDF, r19	; 0x800ddf <__brkval+0x1>
    824c:	20 93 de 0d 	sts	0x0DDE, r18	; 0x800dde <__brkval>
    8250:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    8254:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    8258:	21 15       	cp	r18, r1
    825a:	31 05       	cpc	r19, r1
    825c:	41 f4       	brne	.+16     	; 0x826e <malloc+0xea>
    825e:	2d b7       	in	r18, 0x3d	; 61
    8260:	3e b7       	in	r19, 0x3e	; 62
    8262:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    8266:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    826a:	24 1b       	sub	r18, r20
    826c:	35 0b       	sbc	r19, r21
    826e:	e0 91 de 0d 	lds	r30, 0x0DDE	; 0x800dde <__brkval>
    8272:	f0 91 df 0d 	lds	r31, 0x0DDF	; 0x800ddf <__brkval+0x1>
    8276:	e2 17       	cp	r30, r18
    8278:	f3 07       	cpc	r31, r19
    827a:	a0 f4       	brcc	.+40     	; 0x82a4 <malloc+0x120>
    827c:	2e 1b       	sub	r18, r30
    827e:	3f 0b       	sbc	r19, r31
    8280:	28 17       	cp	r18, r24
    8282:	39 07       	cpc	r19, r25
    8284:	78 f0       	brcs	.+30     	; 0x82a4 <malloc+0x120>
    8286:	ac 01       	movw	r20, r24
    8288:	4e 5f       	subi	r20, 0xFE	; 254
    828a:	5f 4f       	sbci	r21, 0xFF	; 255
    828c:	24 17       	cp	r18, r20
    828e:	35 07       	cpc	r19, r21
    8290:	48 f0       	brcs	.+18     	; 0x82a4 <malloc+0x120>
    8292:	4e 0f       	add	r20, r30
    8294:	5f 1f       	adc	r21, r31
    8296:	50 93 df 0d 	sts	0x0DDF, r21	; 0x800ddf <__brkval+0x1>
    829a:	40 93 de 0d 	sts	0x0DDE, r20	; 0x800dde <__brkval>
    829e:	81 93       	st	Z+, r24
    82a0:	91 93       	st	Z+, r25
    82a2:	02 c0       	rjmp	.+4      	; 0x82a8 <malloc+0x124>
    82a4:	e0 e0       	ldi	r30, 0x00	; 0
    82a6:	f0 e0       	ldi	r31, 0x00	; 0
    82a8:	cf 01       	movw	r24, r30
    82aa:	df 91       	pop	r29
    82ac:	cf 91       	pop	r28
    82ae:	1f 91       	pop	r17
    82b0:	0f 91       	pop	r16
    82b2:	08 95       	ret

000082b4 <free>:
    82b4:	cf 93       	push	r28
    82b6:	df 93       	push	r29
    82b8:	00 97       	sbiw	r24, 0x00	; 0
    82ba:	09 f4       	brne	.+2      	; 0x82be <free+0xa>
    82bc:	81 c0       	rjmp	.+258    	; 0x83c0 <free+0x10c>
    82be:	fc 01       	movw	r30, r24
    82c0:	32 97       	sbiw	r30, 0x02	; 2
    82c2:	13 82       	std	Z+3, r1	; 0x03
    82c4:	12 82       	std	Z+2, r1	; 0x02
    82c6:	a0 91 e0 0d 	lds	r26, 0x0DE0	; 0x800de0 <__flp>
    82ca:	b0 91 e1 0d 	lds	r27, 0x0DE1	; 0x800de1 <__flp+0x1>
    82ce:	10 97       	sbiw	r26, 0x00	; 0
    82d0:	81 f4       	brne	.+32     	; 0x82f2 <free+0x3e>
    82d2:	20 81       	ld	r18, Z
    82d4:	31 81       	ldd	r19, Z+1	; 0x01
    82d6:	82 0f       	add	r24, r18
    82d8:	93 1f       	adc	r25, r19
    82da:	20 91 de 0d 	lds	r18, 0x0DDE	; 0x800dde <__brkval>
    82de:	30 91 df 0d 	lds	r19, 0x0DDF	; 0x800ddf <__brkval+0x1>
    82e2:	28 17       	cp	r18, r24
    82e4:	39 07       	cpc	r19, r25
    82e6:	51 f5       	brne	.+84     	; 0x833c <free+0x88>
    82e8:	f0 93 df 0d 	sts	0x0DDF, r31	; 0x800ddf <__brkval+0x1>
    82ec:	e0 93 de 0d 	sts	0x0DDE, r30	; 0x800dde <__brkval>
    82f0:	67 c0       	rjmp	.+206    	; 0x83c0 <free+0x10c>
    82f2:	ed 01       	movw	r28, r26
    82f4:	20 e0       	ldi	r18, 0x00	; 0
    82f6:	30 e0       	ldi	r19, 0x00	; 0
    82f8:	ce 17       	cp	r28, r30
    82fa:	df 07       	cpc	r29, r31
    82fc:	40 f4       	brcc	.+16     	; 0x830e <free+0x5a>
    82fe:	4a 81       	ldd	r20, Y+2	; 0x02
    8300:	5b 81       	ldd	r21, Y+3	; 0x03
    8302:	9e 01       	movw	r18, r28
    8304:	41 15       	cp	r20, r1
    8306:	51 05       	cpc	r21, r1
    8308:	f1 f0       	breq	.+60     	; 0x8346 <free+0x92>
    830a:	ea 01       	movw	r28, r20
    830c:	f5 cf       	rjmp	.-22     	; 0x82f8 <free+0x44>
    830e:	d3 83       	std	Z+3, r29	; 0x03
    8310:	c2 83       	std	Z+2, r28	; 0x02
    8312:	40 81       	ld	r20, Z
    8314:	51 81       	ldd	r21, Z+1	; 0x01
    8316:	84 0f       	add	r24, r20
    8318:	95 1f       	adc	r25, r21
    831a:	c8 17       	cp	r28, r24
    831c:	d9 07       	cpc	r29, r25
    831e:	59 f4       	brne	.+22     	; 0x8336 <free+0x82>
    8320:	88 81       	ld	r24, Y
    8322:	99 81       	ldd	r25, Y+1	; 0x01
    8324:	84 0f       	add	r24, r20
    8326:	95 1f       	adc	r25, r21
    8328:	02 96       	adiw	r24, 0x02	; 2
    832a:	91 83       	std	Z+1, r25	; 0x01
    832c:	80 83       	st	Z, r24
    832e:	8a 81       	ldd	r24, Y+2	; 0x02
    8330:	9b 81       	ldd	r25, Y+3	; 0x03
    8332:	93 83       	std	Z+3, r25	; 0x03
    8334:	82 83       	std	Z+2, r24	; 0x02
    8336:	21 15       	cp	r18, r1
    8338:	31 05       	cpc	r19, r1
    833a:	29 f4       	brne	.+10     	; 0x8346 <free+0x92>
    833c:	f0 93 e1 0d 	sts	0x0DE1, r31	; 0x800de1 <__flp+0x1>
    8340:	e0 93 e0 0d 	sts	0x0DE0, r30	; 0x800de0 <__flp>
    8344:	3d c0       	rjmp	.+122    	; 0x83c0 <free+0x10c>
    8346:	e9 01       	movw	r28, r18
    8348:	fb 83       	std	Y+3, r31	; 0x03
    834a:	ea 83       	std	Y+2, r30	; 0x02
    834c:	49 91       	ld	r20, Y+
    834e:	59 91       	ld	r21, Y+
    8350:	c4 0f       	add	r28, r20
    8352:	d5 1f       	adc	r29, r21
    8354:	ec 17       	cp	r30, r28
    8356:	fd 07       	cpc	r31, r29
    8358:	61 f4       	brne	.+24     	; 0x8372 <free+0xbe>
    835a:	80 81       	ld	r24, Z
    835c:	91 81       	ldd	r25, Z+1	; 0x01
    835e:	84 0f       	add	r24, r20
    8360:	95 1f       	adc	r25, r21
    8362:	02 96       	adiw	r24, 0x02	; 2
    8364:	e9 01       	movw	r28, r18
    8366:	99 83       	std	Y+1, r25	; 0x01
    8368:	88 83       	st	Y, r24
    836a:	82 81       	ldd	r24, Z+2	; 0x02
    836c:	93 81       	ldd	r25, Z+3	; 0x03
    836e:	9b 83       	std	Y+3, r25	; 0x03
    8370:	8a 83       	std	Y+2, r24	; 0x02
    8372:	e0 e0       	ldi	r30, 0x00	; 0
    8374:	f0 e0       	ldi	r31, 0x00	; 0
    8376:	12 96       	adiw	r26, 0x02	; 2
    8378:	8d 91       	ld	r24, X+
    837a:	9c 91       	ld	r25, X
    837c:	13 97       	sbiw	r26, 0x03	; 3
    837e:	00 97       	sbiw	r24, 0x00	; 0
    8380:	19 f0       	breq	.+6      	; 0x8388 <free+0xd4>
    8382:	fd 01       	movw	r30, r26
    8384:	dc 01       	movw	r26, r24
    8386:	f7 cf       	rjmp	.-18     	; 0x8376 <free+0xc2>
    8388:	8d 91       	ld	r24, X+
    838a:	9c 91       	ld	r25, X
    838c:	11 97       	sbiw	r26, 0x01	; 1
    838e:	9d 01       	movw	r18, r26
    8390:	2e 5f       	subi	r18, 0xFE	; 254
    8392:	3f 4f       	sbci	r19, 0xFF	; 255
    8394:	82 0f       	add	r24, r18
    8396:	93 1f       	adc	r25, r19
    8398:	20 91 de 0d 	lds	r18, 0x0DDE	; 0x800dde <__brkval>
    839c:	30 91 df 0d 	lds	r19, 0x0DDF	; 0x800ddf <__brkval+0x1>
    83a0:	28 17       	cp	r18, r24
    83a2:	39 07       	cpc	r19, r25
    83a4:	69 f4       	brne	.+26     	; 0x83c0 <free+0x10c>
    83a6:	30 97       	sbiw	r30, 0x00	; 0
    83a8:	29 f4       	brne	.+10     	; 0x83b4 <free+0x100>
    83aa:	10 92 e1 0d 	sts	0x0DE1, r1	; 0x800de1 <__flp+0x1>
    83ae:	10 92 e0 0d 	sts	0x0DE0, r1	; 0x800de0 <__flp>
    83b2:	02 c0       	rjmp	.+4      	; 0x83b8 <free+0x104>
    83b4:	13 82       	std	Z+3, r1	; 0x03
    83b6:	12 82       	std	Z+2, r1	; 0x02
    83b8:	b0 93 df 0d 	sts	0x0DDF, r27	; 0x800ddf <__brkval+0x1>
    83bc:	a0 93 de 0d 	sts	0x0DDE, r26	; 0x800dde <__brkval>
    83c0:	df 91       	pop	r29
    83c2:	cf 91       	pop	r28
    83c4:	08 95       	ret

000083c6 <realloc>:
    83c6:	6f 92       	push	r6
    83c8:	7f 92       	push	r7
    83ca:	8f 92       	push	r8
    83cc:	9f 92       	push	r9
    83ce:	af 92       	push	r10
    83d0:	bf 92       	push	r11
    83d2:	cf 92       	push	r12
    83d4:	df 92       	push	r13
    83d6:	ef 92       	push	r14
    83d8:	ff 92       	push	r15
    83da:	0f 93       	push	r16
    83dc:	1f 93       	push	r17
    83de:	cf 93       	push	r28
    83e0:	df 93       	push	r29
    83e2:	00 97       	sbiw	r24, 0x00	; 0
    83e4:	81 f4       	brne	.+32     	; 0x8406 <realloc+0x40>
    83e6:	cb 01       	movw	r24, r22
    83e8:	df 91       	pop	r29
    83ea:	cf 91       	pop	r28
    83ec:	1f 91       	pop	r17
    83ee:	0f 91       	pop	r16
    83f0:	ff 90       	pop	r15
    83f2:	ef 90       	pop	r14
    83f4:	df 90       	pop	r13
    83f6:	cf 90       	pop	r12
    83f8:	bf 90       	pop	r11
    83fa:	af 90       	pop	r10
    83fc:	9f 90       	pop	r9
    83fe:	8f 90       	pop	r8
    8400:	7f 90       	pop	r7
    8402:	6f 90       	pop	r6
    8404:	bf ce       	rjmp	.-642    	; 0x8184 <malloc>
    8406:	fc 01       	movw	r30, r24
    8408:	e6 0f       	add	r30, r22
    840a:	f7 1f       	adc	r31, r23
    840c:	9c 01       	movw	r18, r24
    840e:	22 50       	subi	r18, 0x02	; 2
    8410:	31 09       	sbc	r19, r1
    8412:	e2 17       	cp	r30, r18
    8414:	f3 07       	cpc	r31, r19
    8416:	08 f4       	brcc	.+2      	; 0x841a <realloc+0x54>
    8418:	a5 c0       	rjmp	.+330    	; 0x8564 <realloc+0x19e>
    841a:	ec 01       	movw	r28, r24
    841c:	d9 01       	movw	r26, r18
    841e:	0d 91       	ld	r16, X+
    8420:	1c 91       	ld	r17, X
    8422:	11 97       	sbiw	r26, 0x01	; 1
    8424:	06 17       	cp	r16, r22
    8426:	17 07       	cpc	r17, r23
    8428:	a8 f0       	brcs	.+42     	; 0x8454 <realloc+0x8e>
    842a:	05 30       	cpi	r16, 0x05	; 5
    842c:	11 05       	cpc	r17, r1
    842e:	08 f4       	brcc	.+2      	; 0x8432 <realloc+0x6c>
    8430:	97 c0       	rjmp	.+302    	; 0x8560 <realloc+0x19a>
    8432:	c8 01       	movw	r24, r16
    8434:	04 97       	sbiw	r24, 0x04	; 4
    8436:	86 17       	cp	r24, r22
    8438:	97 07       	cpc	r25, r23
    843a:	08 f4       	brcc	.+2      	; 0x843e <realloc+0x78>
    843c:	91 c0       	rjmp	.+290    	; 0x8560 <realloc+0x19a>
    843e:	02 50       	subi	r16, 0x02	; 2
    8440:	11 09       	sbc	r17, r1
    8442:	06 1b       	sub	r16, r22
    8444:	17 0b       	sbc	r17, r23
    8446:	01 93       	st	Z+, r16
    8448:	11 93       	st	Z+, r17
    844a:	6d 93       	st	X+, r22
    844c:	7c 93       	st	X, r23
    844e:	cf 01       	movw	r24, r30
    8450:	31 df       	rcall	.-414    	; 0x82b4 <free>
    8452:	86 c0       	rjmp	.+268    	; 0x8560 <realloc+0x19a>
    8454:	5b 01       	movw	r10, r22
    8456:	a0 1a       	sub	r10, r16
    8458:	b1 0a       	sbc	r11, r17
    845a:	4c 01       	movw	r8, r24
    845c:	80 0e       	add	r8, r16
    845e:	91 1e       	adc	r9, r17
    8460:	a0 91 e0 0d 	lds	r26, 0x0DE0	; 0x800de0 <__flp>
    8464:	b0 91 e1 0d 	lds	r27, 0x0DE1	; 0x800de1 <__flp+0x1>
    8468:	61 2c       	mov	r6, r1
    846a:	71 2c       	mov	r7, r1
    846c:	e1 2c       	mov	r14, r1
    846e:	f1 2c       	mov	r15, r1
    8470:	10 97       	sbiw	r26, 0x00	; 0
    8472:	09 f4       	brne	.+2      	; 0x8476 <realloc+0xb0>
    8474:	46 c0       	rjmp	.+140    	; 0x8502 <realloc+0x13c>
    8476:	8d 91       	ld	r24, X+
    8478:	9c 91       	ld	r25, X
    847a:	11 97       	sbiw	r26, 0x01	; 1
    847c:	a8 15       	cp	r26, r8
    847e:	b9 05       	cpc	r27, r9
    8480:	b1 f5       	brne	.+108    	; 0x84ee <realloc+0x128>
    8482:	6c 01       	movw	r12, r24
    8484:	42 e0       	ldi	r20, 0x02	; 2
    8486:	c4 0e       	add	r12, r20
    8488:	d1 1c       	adc	r13, r1
    848a:	ca 14       	cp	r12, r10
    848c:	db 04       	cpc	r13, r11
    848e:	78 f1       	brcs	.+94     	; 0x84ee <realloc+0x128>
    8490:	4c 01       	movw	r8, r24
    8492:	8a 18       	sub	r8, r10
    8494:	9b 08       	sbc	r9, r11
    8496:	64 01       	movw	r12, r8
    8498:	42 e0       	ldi	r20, 0x02	; 2
    849a:	c4 0e       	add	r12, r20
    849c:	d1 1c       	adc	r13, r1
    849e:	12 96       	adiw	r26, 0x02	; 2
    84a0:	bc 90       	ld	r11, X
    84a2:	12 97       	sbiw	r26, 0x02	; 2
    84a4:	13 96       	adiw	r26, 0x03	; 3
    84a6:	ac 91       	ld	r26, X
    84a8:	b5 e0       	ldi	r27, 0x05	; 5
    84aa:	cb 16       	cp	r12, r27
    84ac:	d1 04       	cpc	r13, r1
    84ae:	40 f0       	brcs	.+16     	; 0x84c0 <realloc+0xfa>
    84b0:	b2 82       	std	Z+2, r11	; 0x02
    84b2:	a3 83       	std	Z+3, r26	; 0x03
    84b4:	91 82       	std	Z+1, r9	; 0x01
    84b6:	80 82       	st	Z, r8
    84b8:	d9 01       	movw	r26, r18
    84ba:	6d 93       	st	X+, r22
    84bc:	7c 93       	st	X, r23
    84be:	09 c0       	rjmp	.+18     	; 0x84d2 <realloc+0x10c>
    84c0:	0e 5f       	subi	r16, 0xFE	; 254
    84c2:	1f 4f       	sbci	r17, 0xFF	; 255
    84c4:	80 0f       	add	r24, r16
    84c6:	91 1f       	adc	r25, r17
    84c8:	f9 01       	movw	r30, r18
    84ca:	91 83       	std	Z+1, r25	; 0x01
    84cc:	80 83       	st	Z, r24
    84ce:	eb 2d       	mov	r30, r11
    84d0:	fa 2f       	mov	r31, r26
    84d2:	e1 14       	cp	r14, r1
    84d4:	f1 04       	cpc	r15, r1
    84d6:	31 f0       	breq	.+12     	; 0x84e4 <realloc+0x11e>
    84d8:	d7 01       	movw	r26, r14
    84da:	13 96       	adiw	r26, 0x03	; 3
    84dc:	fc 93       	st	X, r31
    84de:	ee 93       	st	-X, r30
    84e0:	12 97       	sbiw	r26, 0x02	; 2
    84e2:	3e c0       	rjmp	.+124    	; 0x8560 <realloc+0x19a>
    84e4:	f0 93 e1 0d 	sts	0x0DE1, r31	; 0x800de1 <__flp+0x1>
    84e8:	e0 93 e0 0d 	sts	0x0DE0, r30	; 0x800de0 <__flp>
    84ec:	39 c0       	rjmp	.+114    	; 0x8560 <realloc+0x19a>
    84ee:	68 16       	cp	r6, r24
    84f0:	79 06       	cpc	r7, r25
    84f2:	08 f4       	brcc	.+2      	; 0x84f6 <realloc+0x130>
    84f4:	3c 01       	movw	r6, r24
    84f6:	7d 01       	movw	r14, r26
    84f8:	12 96       	adiw	r26, 0x02	; 2
    84fa:	0d 90       	ld	r0, X+
    84fc:	bc 91       	ld	r27, X
    84fe:	a0 2d       	mov	r26, r0
    8500:	b7 cf       	rjmp	.-146    	; 0x8470 <realloc+0xaa>
    8502:	80 91 de 0d 	lds	r24, 0x0DDE	; 0x800dde <__brkval>
    8506:	90 91 df 0d 	lds	r25, 0x0DDF	; 0x800ddf <__brkval+0x1>
    850a:	88 16       	cp	r8, r24
    850c:	99 06       	cpc	r9, r25
    850e:	e1 f4       	brne	.+56     	; 0x8548 <realloc+0x182>
    8510:	66 16       	cp	r6, r22
    8512:	77 06       	cpc	r7, r23
    8514:	c8 f4       	brcc	.+50     	; 0x8548 <realloc+0x182>
    8516:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    851a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    851e:	00 97       	sbiw	r24, 0x00	; 0
    8520:	41 f4       	brne	.+16     	; 0x8532 <realloc+0x16c>
    8522:	8d b7       	in	r24, 0x3d	; 61
    8524:	9e b7       	in	r25, 0x3e	; 62
    8526:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    852a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    852e:	84 1b       	sub	r24, r20
    8530:	95 0b       	sbc	r25, r21
    8532:	e8 17       	cp	r30, r24
    8534:	f9 07       	cpc	r31, r25
    8536:	b0 f4       	brcc	.+44     	; 0x8564 <realloc+0x19e>
    8538:	f0 93 df 0d 	sts	0x0DDF, r31	; 0x800ddf <__brkval+0x1>
    853c:	e0 93 de 0d 	sts	0x0DDE, r30	; 0x800dde <__brkval>
    8540:	f9 01       	movw	r30, r18
    8542:	71 83       	std	Z+1, r23	; 0x01
    8544:	60 83       	st	Z, r22
    8546:	0c c0       	rjmp	.+24     	; 0x8560 <realloc+0x19a>
    8548:	cb 01       	movw	r24, r22
    854a:	1c de       	rcall	.-968    	; 0x8184 <malloc>
    854c:	7c 01       	movw	r14, r24
    854e:	00 97       	sbiw	r24, 0x00	; 0
    8550:	49 f0       	breq	.+18     	; 0x8564 <realloc+0x19e>
    8552:	a8 01       	movw	r20, r16
    8554:	be 01       	movw	r22, r28
    8556:	52 d0       	rcall	.+164    	; 0x85fc <memcpy>
    8558:	ce 01       	movw	r24, r28
    855a:	ac de       	rcall	.-680    	; 0x82b4 <free>
    855c:	c7 01       	movw	r24, r14
    855e:	04 c0       	rjmp	.+8      	; 0x8568 <realloc+0x1a2>
    8560:	ce 01       	movw	r24, r28
    8562:	02 c0       	rjmp	.+4      	; 0x8568 <realloc+0x1a2>
    8564:	80 e0       	ldi	r24, 0x00	; 0
    8566:	90 e0       	ldi	r25, 0x00	; 0
    8568:	df 91       	pop	r29
    856a:	cf 91       	pop	r28
    856c:	1f 91       	pop	r17
    856e:	0f 91       	pop	r16
    8570:	ff 90       	pop	r15
    8572:	ef 90       	pop	r14
    8574:	df 90       	pop	r13
    8576:	cf 90       	pop	r12
    8578:	bf 90       	pop	r11
    857a:	af 90       	pop	r10
    857c:	9f 90       	pop	r9
    857e:	8f 90       	pop	r8
    8580:	7f 90       	pop	r7
    8582:	6f 90       	pop	r6
    8584:	08 95       	ret

00008586 <abort>:
    8586:	81 e0       	ldi	r24, 0x01	; 1
    8588:	90 e0       	ldi	r25, 0x00	; 0
    858a:	f8 94       	cli
    858c:	5b c3       	rjmp	.+1718   	; 0x8c44 <__do_global_dtors>

0000858e <atol>:
    858e:	1f 93       	push	r17
    8590:	fc 01       	movw	r30, r24
    8592:	99 27       	eor	r25, r25
    8594:	88 27       	eor	r24, r24
    8596:	bc 01       	movw	r22, r24
    8598:	e8 94       	clt
    859a:	11 91       	ld	r17, Z+
    859c:	10 32       	cpi	r17, 0x20	; 32
    859e:	e9 f3       	breq	.-6      	; 0x859a <atol+0xc>
    85a0:	19 30       	cpi	r17, 0x09	; 9
    85a2:	10 f0       	brcs	.+4      	; 0x85a8 <atol+0x1a>
    85a4:	1e 30       	cpi	r17, 0x0E	; 14
    85a6:	c8 f3       	brcs	.-14     	; 0x859a <atol+0xc>
    85a8:	1b 32       	cpi	r17, 0x2B	; 43
    85aa:	49 f0       	breq	.+18     	; 0x85be <atol+0x30>
    85ac:	1d 32       	cpi	r17, 0x2D	; 45
    85ae:	41 f4       	brne	.+16     	; 0x85c0 <atol+0x32>
    85b0:	68 94       	set
    85b2:	05 c0       	rjmp	.+10     	; 0x85be <atol+0x30>
    85b4:	6d d0       	rcall	.+218    	; 0x8690 <__mulsi_const_10>
    85b6:	61 0f       	add	r22, r17
    85b8:	71 1d       	adc	r23, r1
    85ba:	81 1d       	adc	r24, r1
    85bc:	91 1d       	adc	r25, r1
    85be:	11 91       	ld	r17, Z+
    85c0:	10 53       	subi	r17, 0x30	; 48
    85c2:	1a 30       	cpi	r17, 0x0A	; 10
    85c4:	b8 f3       	brcs	.-18     	; 0x85b4 <atol+0x26>
    85c6:	3e f4       	brtc	.+14     	; 0x85d6 <atol+0x48>
    85c8:	90 95       	com	r25
    85ca:	80 95       	com	r24
    85cc:	70 95       	com	r23
    85ce:	61 95       	neg	r22
    85d0:	7f 4f       	sbci	r23, 0xFF	; 255
    85d2:	8f 4f       	sbci	r24, 0xFF	; 255
    85d4:	9f 4f       	sbci	r25, 0xFF	; 255
    85d6:	1f 91       	pop	r17
    85d8:	08 95       	ret

000085da <isspace>:
    85da:	91 11       	cpse	r25, r1
    85dc:	0a c3       	rjmp	.+1556   	; 0x8bf2 <__ctype_isfalse>
    85de:	80 32       	cpi	r24, 0x20	; 32
    85e0:	19 f0       	breq	.+6      	; 0x85e8 <isspace+0xe>
    85e2:	89 50       	subi	r24, 0x09	; 9
    85e4:	85 50       	subi	r24, 0x05	; 5
    85e6:	d0 f7       	brcc	.-12     	; 0x85dc <isspace+0x2>
    85e8:	08 95       	ret

000085ea <memcpy_P>:
    85ea:	fb 01       	movw	r30, r22
    85ec:	dc 01       	movw	r26, r24
    85ee:	02 c0       	rjmp	.+4      	; 0x85f4 <memcpy_P+0xa>
    85f0:	05 90       	lpm	r0, Z+
    85f2:	0d 92       	st	X+, r0
    85f4:	41 50       	subi	r20, 0x01	; 1
    85f6:	50 40       	sbci	r21, 0x00	; 0
    85f8:	d8 f7       	brcc	.-10     	; 0x85f0 <memcpy_P+0x6>
    85fa:	08 95       	ret

000085fc <memcpy>:
    85fc:	fb 01       	movw	r30, r22
    85fe:	dc 01       	movw	r26, r24
    8600:	02 c0       	rjmp	.+4      	; 0x8606 <memcpy+0xa>
    8602:	01 90       	ld	r0, Z+
    8604:	0d 92       	st	X+, r0
    8606:	41 50       	subi	r20, 0x01	; 1
    8608:	50 40       	sbci	r21, 0x00	; 0
    860a:	d8 f7       	brcc	.-10     	; 0x8602 <memcpy+0x6>
    860c:	08 95       	ret

0000860e <strcmp>:
    860e:	fb 01       	movw	r30, r22
    8610:	dc 01       	movw	r26, r24
    8612:	8d 91       	ld	r24, X+
    8614:	01 90       	ld	r0, Z+
    8616:	80 19       	sub	r24, r0
    8618:	01 10       	cpse	r0, r1
    861a:	d9 f3       	breq	.-10     	; 0x8612 <strcmp+0x4>
    861c:	99 0b       	sbc	r25, r25
    861e:	08 95       	ret

00008620 <strcpy>:
    8620:	fb 01       	movw	r30, r22
    8622:	dc 01       	movw	r26, r24
    8624:	01 90       	ld	r0, Z+
    8626:	0d 92       	st	X+, r0
    8628:	00 20       	and	r0, r0
    862a:	e1 f7       	brne	.-8      	; 0x8624 <strcpy+0x4>
    862c:	08 95       	ret

0000862e <strncmp>:
    862e:	fb 01       	movw	r30, r22
    8630:	dc 01       	movw	r26, r24
    8632:	41 50       	subi	r20, 0x01	; 1
    8634:	50 40       	sbci	r21, 0x00	; 0
    8636:	30 f0       	brcs	.+12     	; 0x8644 <strncmp+0x16>
    8638:	8d 91       	ld	r24, X+
    863a:	01 90       	ld	r0, Z+
    863c:	80 19       	sub	r24, r0
    863e:	19 f4       	brne	.+6      	; 0x8646 <strncmp+0x18>
    8640:	00 20       	and	r0, r0
    8642:	b9 f7       	brne	.-18     	; 0x8632 <strncmp+0x4>
    8644:	88 1b       	sub	r24, r24
    8646:	99 0b       	sbc	r25, r25
    8648:	08 95       	ret

0000864a <strncpy>:
    864a:	fb 01       	movw	r30, r22
    864c:	dc 01       	movw	r26, r24
    864e:	41 50       	subi	r20, 0x01	; 1
    8650:	50 40       	sbci	r21, 0x00	; 0
    8652:	48 f0       	brcs	.+18     	; 0x8666 <strncpy+0x1c>
    8654:	01 90       	ld	r0, Z+
    8656:	0d 92       	st	X+, r0
    8658:	00 20       	and	r0, r0
    865a:	c9 f7       	brne	.-14     	; 0x864e <strncpy+0x4>
    865c:	01 c0       	rjmp	.+2      	; 0x8660 <strncpy+0x16>
    865e:	1d 92       	st	X+, r1
    8660:	41 50       	subi	r20, 0x01	; 1
    8662:	50 40       	sbci	r21, 0x00	; 0
    8664:	e0 f7       	brcc	.-8      	; 0x865e <strncpy+0x14>
    8666:	08 95       	ret

00008668 <itoa>:
    8668:	45 32       	cpi	r20, 0x25	; 37
    866a:	51 05       	cpc	r21, r1
    866c:	18 f4       	brcc	.+6      	; 0x8674 <itoa+0xc>
    866e:	42 30       	cpi	r20, 0x02	; 2
    8670:	08 f0       	brcs	.+2      	; 0x8674 <itoa+0xc>
    8672:	04 c0       	rjmp	.+8      	; 0x867c <__itoa_ncheck>
    8674:	fb 01       	movw	r30, r22
    8676:	10 82       	st	Z, r1
    8678:	cb 01       	movw	r24, r22
    867a:	08 95       	ret

0000867c <__itoa_ncheck>:
    867c:	bb 27       	eor	r27, r27
    867e:	4a 30       	cpi	r20, 0x0A	; 10
    8680:	31 f4       	brne	.+12     	; 0x868e <__itoa_ncheck+0x12>
    8682:	99 23       	and	r25, r25
    8684:	22 f4       	brpl	.+8      	; 0x868e <__itoa_ncheck+0x12>
    8686:	bd e2       	ldi	r27, 0x2D	; 45
    8688:	90 95       	com	r25
    868a:	81 95       	neg	r24
    868c:	9f 4f       	sbci	r25, 0xFF	; 255
    868e:	4b c0       	rjmp	.+150    	; 0x8726 <__utoa_common>

00008690 <__mulsi_const_10>:
    8690:	59 2f       	mov	r21, r25
    8692:	48 2f       	mov	r20, r24
    8694:	37 2f       	mov	r19, r23
    8696:	26 2f       	mov	r18, r22
    8698:	66 0f       	add	r22, r22
    869a:	77 1f       	adc	r23, r23
    869c:	88 1f       	adc	r24, r24
    869e:	99 1f       	adc	r25, r25
    86a0:	66 0f       	add	r22, r22
    86a2:	77 1f       	adc	r23, r23
    86a4:	88 1f       	adc	r24, r24
    86a6:	99 1f       	adc	r25, r25
    86a8:	62 0f       	add	r22, r18
    86aa:	73 1f       	adc	r23, r19
    86ac:	84 1f       	adc	r24, r20
    86ae:	95 1f       	adc	r25, r21
    86b0:	66 0f       	add	r22, r22
    86b2:	77 1f       	adc	r23, r23
    86b4:	88 1f       	adc	r24, r24
    86b6:	99 1f       	adc	r25, r25
    86b8:	08 95       	ret

000086ba <ultoa>:
    86ba:	25 32       	cpi	r18, 0x25	; 37
    86bc:	31 05       	cpc	r19, r1
    86be:	18 f4       	brcc	.+6      	; 0x86c6 <ultoa+0xc>
    86c0:	22 30       	cpi	r18, 0x02	; 2
    86c2:	08 f0       	brcs	.+2      	; 0x86c6 <ultoa+0xc>
    86c4:	04 c0       	rjmp	.+8      	; 0x86ce <__ultoa_ncheck>
    86c6:	fa 01       	movw	r30, r20
    86c8:	10 82       	st	Z, r1
    86ca:	ca 01       	movw	r24, r20
    86cc:	08 95       	ret

000086ce <__ultoa_ncheck>:
    86ce:	bb 27       	eor	r27, r27

000086d0 <__ultoa_common>:
    86d0:	fa 01       	movw	r30, r20
    86d2:	a6 2f       	mov	r26, r22
    86d4:	62 17       	cp	r22, r18
    86d6:	71 05       	cpc	r23, r1
    86d8:	81 05       	cpc	r24, r1
    86da:	91 05       	cpc	r25, r1
    86dc:	33 0b       	sbc	r19, r19
    86de:	30 fb       	bst	r19, 0
    86e0:	66 f0       	brts	.+24     	; 0x86fa <__ultoa_common+0x2a>
    86e2:	aa 27       	eor	r26, r26
    86e4:	66 0f       	add	r22, r22
    86e6:	77 1f       	adc	r23, r23
    86e8:	88 1f       	adc	r24, r24
    86ea:	99 1f       	adc	r25, r25
    86ec:	aa 1f       	adc	r26, r26
    86ee:	a2 17       	cp	r26, r18
    86f0:	10 f0       	brcs	.+4      	; 0x86f6 <__ultoa_common+0x26>
    86f2:	a2 1b       	sub	r26, r18
    86f4:	63 95       	inc	r22
    86f6:	38 50       	subi	r19, 0x08	; 8
    86f8:	a9 f7       	brne	.-22     	; 0x86e4 <__ultoa_common+0x14>
    86fa:	a0 5d       	subi	r26, 0xD0	; 208
    86fc:	aa 33       	cpi	r26, 0x3A	; 58
    86fe:	08 f0       	brcs	.+2      	; 0x8702 <__ultoa_common+0x32>
    8700:	a9 5d       	subi	r26, 0xD9	; 217
    8702:	a1 93       	st	Z+, r26
    8704:	36 f7       	brtc	.-52     	; 0x86d2 <__ultoa_common+0x2>
    8706:	b1 11       	cpse	r27, r1
    8708:	b1 93       	st	Z+, r27
    870a:	10 82       	st	Z, r1
    870c:	ca 01       	movw	r24, r20
    870e:	74 c2       	rjmp	.+1256   	; 0x8bf8 <strrev>

00008710 <utoa>:
    8710:	45 32       	cpi	r20, 0x25	; 37
    8712:	51 05       	cpc	r21, r1
    8714:	18 f4       	brcc	.+6      	; 0x871c <utoa+0xc>
    8716:	42 30       	cpi	r20, 0x02	; 2
    8718:	08 f0       	brcs	.+2      	; 0x871c <utoa+0xc>
    871a:	04 c0       	rjmp	.+8      	; 0x8724 <__utoa_ncheck>
    871c:	fb 01       	movw	r30, r22
    871e:	10 82       	st	Z, r1
    8720:	cb 01       	movw	r24, r22
    8722:	08 95       	ret

00008724 <__utoa_ncheck>:
    8724:	bb 27       	eor	r27, r27

00008726 <__utoa_common>:
    8726:	fb 01       	movw	r30, r22
    8728:	55 27       	eor	r21, r21
    872a:	aa 27       	eor	r26, r26
    872c:	88 0f       	add	r24, r24
    872e:	99 1f       	adc	r25, r25
    8730:	aa 1f       	adc	r26, r26
    8732:	a4 17       	cp	r26, r20
    8734:	10 f0       	brcs	.+4      	; 0x873a <__utoa_common+0x14>
    8736:	a4 1b       	sub	r26, r20
    8738:	83 95       	inc	r24
    873a:	50 51       	subi	r21, 0x10	; 16
    873c:	b9 f7       	brne	.-18     	; 0x872c <__utoa_common+0x6>
    873e:	a0 5d       	subi	r26, 0xD0	; 208
    8740:	aa 33       	cpi	r26, 0x3A	; 58
    8742:	08 f0       	brcs	.+2      	; 0x8746 <__utoa_common+0x20>
    8744:	a9 5d       	subi	r26, 0xD9	; 217
    8746:	a1 93       	st	Z+, r26
    8748:	00 97       	sbiw	r24, 0x00	; 0
    874a:	79 f7       	brne	.-34     	; 0x872a <__utoa_common+0x4>
    874c:	b1 11       	cpse	r27, r1
    874e:	b1 93       	st	Z+, r27
    8750:	11 92       	st	Z+, r1
    8752:	cb 01       	movw	r24, r22
    8754:	51 c2       	rjmp	.+1186   	; 0x8bf8 <strrev>

00008756 <dtoa_prf>:
    8756:	8f 92       	push	r8
    8758:	9f 92       	push	r9
    875a:	af 92       	push	r10
    875c:	bf 92       	push	r11
    875e:	cf 92       	push	r12
    8760:	df 92       	push	r13
    8762:	ef 92       	push	r14
    8764:	ff 92       	push	r15
    8766:	0f 93       	push	r16
    8768:	1f 93       	push	r17
    876a:	cf 93       	push	r28
    876c:	df 93       	push	r29
    876e:	cd b7       	in	r28, 0x3d	; 61
    8770:	de b7       	in	r29, 0x3e	; 62
    8772:	29 97       	sbiw	r28, 0x09	; 9
    8774:	0f b6       	in	r0, 0x3f	; 63
    8776:	f8 94       	cli
    8778:	de bf       	out	0x3e, r29	; 62
    877a:	0f be       	out	0x3f, r0	; 63
    877c:	cd bf       	out	0x3d, r28	; 61
    877e:	6a 01       	movw	r12, r20
    8780:	12 2f       	mov	r17, r18
    8782:	b0 2e       	mov	r11, r16
    8784:	2b e3       	ldi	r18, 0x3B	; 59
    8786:	20 17       	cp	r18, r16
    8788:	20 f0       	brcs	.+8      	; 0x8792 <dtoa_prf+0x3c>
    878a:	ff 24       	eor	r15, r15
    878c:	f3 94       	inc	r15
    878e:	f0 0e       	add	r15, r16
    8790:	02 c0       	rjmp	.+4      	; 0x8796 <dtoa_prf+0x40>
    8792:	2c e3       	ldi	r18, 0x3C	; 60
    8794:	f2 2e       	mov	r15, r18
    8796:	0f 2d       	mov	r16, r15
    8798:	27 e0       	ldi	r18, 0x07	; 7
    879a:	ae 01       	movw	r20, r28
    879c:	4f 5f       	subi	r20, 0xFF	; 255
    879e:	5f 4f       	sbci	r21, 0xFF	; 255
    87a0:	50 d1       	rcall	.+672    	; 0x8a42 <__ftoa_engine>
    87a2:	bc 01       	movw	r22, r24
    87a4:	49 81       	ldd	r20, Y+1	; 0x01
    87a6:	84 2f       	mov	r24, r20
    87a8:	89 70       	andi	r24, 0x09	; 9
    87aa:	81 30       	cpi	r24, 0x01	; 1
    87ac:	31 f0       	breq	.+12     	; 0x87ba <dtoa_prf+0x64>
    87ae:	e1 fc       	sbrc	r14, 1
    87b0:	06 c0       	rjmp	.+12     	; 0x87be <dtoa_prf+0x68>
    87b2:	e0 fe       	sbrs	r14, 0
    87b4:	06 c0       	rjmp	.+12     	; 0x87c2 <dtoa_prf+0x6c>
    87b6:	90 e2       	ldi	r25, 0x20	; 32
    87b8:	05 c0       	rjmp	.+10     	; 0x87c4 <dtoa_prf+0x6e>
    87ba:	9d e2       	ldi	r25, 0x2D	; 45
    87bc:	03 c0       	rjmp	.+6      	; 0x87c4 <dtoa_prf+0x6e>
    87be:	9b e2       	ldi	r25, 0x2B	; 43
    87c0:	01 c0       	rjmp	.+2      	; 0x87c4 <dtoa_prf+0x6e>
    87c2:	90 e0       	ldi	r25, 0x00	; 0
    87c4:	5e 2d       	mov	r21, r14
    87c6:	50 71       	andi	r21, 0x10	; 16
    87c8:	43 ff       	sbrs	r20, 3
    87ca:	3c c0       	rjmp	.+120    	; 0x8844 <dtoa_prf+0xee>
    87cc:	91 11       	cpse	r25, r1
    87ce:	02 c0       	rjmp	.+4      	; 0x87d4 <dtoa_prf+0x7e>
    87d0:	83 e0       	ldi	r24, 0x03	; 3
    87d2:	01 c0       	rjmp	.+2      	; 0x87d6 <dtoa_prf+0x80>
    87d4:	84 e0       	ldi	r24, 0x04	; 4
    87d6:	81 17       	cp	r24, r17
    87d8:	18 f4       	brcc	.+6      	; 0x87e0 <dtoa_prf+0x8a>
    87da:	21 2f       	mov	r18, r17
    87dc:	28 1b       	sub	r18, r24
    87de:	01 c0       	rjmp	.+2      	; 0x87e2 <dtoa_prf+0x8c>
    87e0:	20 e0       	ldi	r18, 0x00	; 0
    87e2:	51 11       	cpse	r21, r1
    87e4:	0b c0       	rjmp	.+22     	; 0x87fc <dtoa_prf+0xa6>
    87e6:	f6 01       	movw	r30, r12
    87e8:	82 2f       	mov	r24, r18
    87ea:	30 e2       	ldi	r19, 0x20	; 32
    87ec:	88 23       	and	r24, r24
    87ee:	19 f0       	breq	.+6      	; 0x87f6 <dtoa_prf+0xa0>
    87f0:	31 93       	st	Z+, r19
    87f2:	81 50       	subi	r24, 0x01	; 1
    87f4:	fb cf       	rjmp	.-10     	; 0x87ec <dtoa_prf+0x96>
    87f6:	c2 0e       	add	r12, r18
    87f8:	d1 1c       	adc	r13, r1
    87fa:	20 e0       	ldi	r18, 0x00	; 0
    87fc:	99 23       	and	r25, r25
    87fe:	29 f0       	breq	.+10     	; 0x880a <dtoa_prf+0xb4>
    8800:	d6 01       	movw	r26, r12
    8802:	9c 93       	st	X, r25
    8804:	f6 01       	movw	r30, r12
    8806:	31 96       	adiw	r30, 0x01	; 1
    8808:	6f 01       	movw	r12, r30
    880a:	c6 01       	movw	r24, r12
    880c:	03 96       	adiw	r24, 0x03	; 3
    880e:	e2 fe       	sbrs	r14, 2
    8810:	0a c0       	rjmp	.+20     	; 0x8826 <dtoa_prf+0xd0>
    8812:	3e e4       	ldi	r19, 0x4E	; 78
    8814:	d6 01       	movw	r26, r12
    8816:	3c 93       	st	X, r19
    8818:	41 e4       	ldi	r20, 0x41	; 65
    881a:	11 96       	adiw	r26, 0x01	; 1
    881c:	4c 93       	st	X, r20
    881e:	11 97       	sbiw	r26, 0x01	; 1
    8820:	12 96       	adiw	r26, 0x02	; 2
    8822:	3c 93       	st	X, r19
    8824:	06 c0       	rjmp	.+12     	; 0x8832 <dtoa_prf+0xdc>
    8826:	3e e6       	ldi	r19, 0x6E	; 110
    8828:	f6 01       	movw	r30, r12
    882a:	30 83       	st	Z, r19
    882c:	41 e6       	ldi	r20, 0x61	; 97
    882e:	41 83       	std	Z+1, r20	; 0x01
    8830:	32 83       	std	Z+2, r19	; 0x02
    8832:	fc 01       	movw	r30, r24
    8834:	32 2f       	mov	r19, r18
    8836:	40 e2       	ldi	r20, 0x20	; 32
    8838:	33 23       	and	r19, r19
    883a:	09 f4       	brne	.+2      	; 0x883e <dtoa_prf+0xe8>
    883c:	42 c0       	rjmp	.+132    	; 0x88c2 <dtoa_prf+0x16c>
    883e:	41 93       	st	Z+, r20
    8840:	31 50       	subi	r19, 0x01	; 1
    8842:	fa cf       	rjmp	.-12     	; 0x8838 <dtoa_prf+0xe2>
    8844:	42 ff       	sbrs	r20, 2
    8846:	44 c0       	rjmp	.+136    	; 0x88d0 <dtoa_prf+0x17a>
    8848:	91 11       	cpse	r25, r1
    884a:	02 c0       	rjmp	.+4      	; 0x8850 <dtoa_prf+0xfa>
    884c:	83 e0       	ldi	r24, 0x03	; 3
    884e:	01 c0       	rjmp	.+2      	; 0x8852 <dtoa_prf+0xfc>
    8850:	84 e0       	ldi	r24, 0x04	; 4
    8852:	81 17       	cp	r24, r17
    8854:	18 f4       	brcc	.+6      	; 0x885c <dtoa_prf+0x106>
    8856:	21 2f       	mov	r18, r17
    8858:	28 1b       	sub	r18, r24
    885a:	01 c0       	rjmp	.+2      	; 0x885e <dtoa_prf+0x108>
    885c:	20 e0       	ldi	r18, 0x00	; 0
    885e:	51 11       	cpse	r21, r1
    8860:	0b c0       	rjmp	.+22     	; 0x8878 <dtoa_prf+0x122>
    8862:	f6 01       	movw	r30, r12
    8864:	82 2f       	mov	r24, r18
    8866:	30 e2       	ldi	r19, 0x20	; 32
    8868:	88 23       	and	r24, r24
    886a:	19 f0       	breq	.+6      	; 0x8872 <dtoa_prf+0x11c>
    886c:	31 93       	st	Z+, r19
    886e:	81 50       	subi	r24, 0x01	; 1
    8870:	fb cf       	rjmp	.-10     	; 0x8868 <dtoa_prf+0x112>
    8872:	c2 0e       	add	r12, r18
    8874:	d1 1c       	adc	r13, r1
    8876:	20 e0       	ldi	r18, 0x00	; 0
    8878:	99 23       	and	r25, r25
    887a:	29 f0       	breq	.+10     	; 0x8886 <dtoa_prf+0x130>
    887c:	d6 01       	movw	r26, r12
    887e:	9c 93       	st	X, r25
    8880:	f6 01       	movw	r30, r12
    8882:	31 96       	adiw	r30, 0x01	; 1
    8884:	6f 01       	movw	r12, r30
    8886:	c6 01       	movw	r24, r12
    8888:	03 96       	adiw	r24, 0x03	; 3
    888a:	e2 fe       	sbrs	r14, 2
    888c:	0b c0       	rjmp	.+22     	; 0x88a4 <dtoa_prf+0x14e>
    888e:	39 e4       	ldi	r19, 0x49	; 73
    8890:	d6 01       	movw	r26, r12
    8892:	3c 93       	st	X, r19
    8894:	3e e4       	ldi	r19, 0x4E	; 78
    8896:	11 96       	adiw	r26, 0x01	; 1
    8898:	3c 93       	st	X, r19
    889a:	11 97       	sbiw	r26, 0x01	; 1
    889c:	36 e4       	ldi	r19, 0x46	; 70
    889e:	12 96       	adiw	r26, 0x02	; 2
    88a0:	3c 93       	st	X, r19
    88a2:	07 c0       	rjmp	.+14     	; 0x88b2 <dtoa_prf+0x15c>
    88a4:	39 e6       	ldi	r19, 0x69	; 105
    88a6:	f6 01       	movw	r30, r12
    88a8:	30 83       	st	Z, r19
    88aa:	3e e6       	ldi	r19, 0x6E	; 110
    88ac:	31 83       	std	Z+1, r19	; 0x01
    88ae:	36 e6       	ldi	r19, 0x66	; 102
    88b0:	32 83       	std	Z+2, r19	; 0x02
    88b2:	fc 01       	movw	r30, r24
    88b4:	32 2f       	mov	r19, r18
    88b6:	40 e2       	ldi	r20, 0x20	; 32
    88b8:	33 23       	and	r19, r19
    88ba:	19 f0       	breq	.+6      	; 0x88c2 <dtoa_prf+0x16c>
    88bc:	41 93       	st	Z+, r20
    88be:	31 50       	subi	r19, 0x01	; 1
    88c0:	fb cf       	rjmp	.-10     	; 0x88b8 <dtoa_prf+0x162>
    88c2:	fc 01       	movw	r30, r24
    88c4:	e2 0f       	add	r30, r18
    88c6:	f1 1d       	adc	r31, r1
    88c8:	10 82       	st	Z, r1
    88ca:	8e ef       	ldi	r24, 0xFE	; 254
    88cc:	9f ef       	ldi	r25, 0xFF	; 255
    88ce:	a6 c0       	rjmp	.+332    	; 0x8a1c <dtoa_prf+0x2c6>
    88d0:	21 e0       	ldi	r18, 0x01	; 1
    88d2:	30 e0       	ldi	r19, 0x00	; 0
    88d4:	91 11       	cpse	r25, r1
    88d6:	02 c0       	rjmp	.+4      	; 0x88dc <dtoa_prf+0x186>
    88d8:	20 e0       	ldi	r18, 0x00	; 0
    88da:	30 e0       	ldi	r19, 0x00	; 0
    88dc:	16 16       	cp	r1, r22
    88de:	17 06       	cpc	r1, r23
    88e0:	1c f4       	brge	.+6      	; 0x88e8 <dtoa_prf+0x192>
    88e2:	fb 01       	movw	r30, r22
    88e4:	31 96       	adiw	r30, 0x01	; 1
    88e6:	02 c0       	rjmp	.+4      	; 0x88ec <dtoa_prf+0x196>
    88e8:	e1 e0       	ldi	r30, 0x01	; 1
    88ea:	f0 e0       	ldi	r31, 0x00	; 0
    88ec:	2e 0f       	add	r18, r30
    88ee:	3f 1f       	adc	r19, r31
    88f0:	bb 20       	and	r11, r11
    88f2:	21 f0       	breq	.+8      	; 0x88fc <dtoa_prf+0x1a6>
    88f4:	eb 2d       	mov	r30, r11
    88f6:	f0 e0       	ldi	r31, 0x00	; 0
    88f8:	31 96       	adiw	r30, 0x01	; 1
    88fa:	02 c0       	rjmp	.+4      	; 0x8900 <dtoa_prf+0x1aa>
    88fc:	e0 e0       	ldi	r30, 0x00	; 0
    88fe:	f0 e0       	ldi	r31, 0x00	; 0
    8900:	2e 0f       	add	r18, r30
    8902:	3f 1f       	adc	r19, r31
    8904:	e1 2f       	mov	r30, r17
    8906:	f0 e0       	ldi	r31, 0x00	; 0
    8908:	2e 17       	cp	r18, r30
    890a:	3f 07       	cpc	r19, r31
    890c:	1c f4       	brge	.+6      	; 0x8914 <dtoa_prf+0x1be>
    890e:	12 1b       	sub	r17, r18
    8910:	21 2f       	mov	r18, r17
    8912:	01 c0       	rjmp	.+2      	; 0x8916 <dtoa_prf+0x1c0>
    8914:	20 e0       	ldi	r18, 0x00	; 0
    8916:	8e 2d       	mov	r24, r14
    8918:	88 71       	andi	r24, 0x18	; 24
    891a:	59 f4       	brne	.+22     	; 0x8932 <dtoa_prf+0x1dc>
    891c:	f6 01       	movw	r30, r12
    891e:	82 2f       	mov	r24, r18
    8920:	30 e2       	ldi	r19, 0x20	; 32
    8922:	88 23       	and	r24, r24
    8924:	19 f0       	breq	.+6      	; 0x892c <dtoa_prf+0x1d6>
    8926:	31 93       	st	Z+, r19
    8928:	81 50       	subi	r24, 0x01	; 1
    892a:	fb cf       	rjmp	.-10     	; 0x8922 <dtoa_prf+0x1cc>
    892c:	c2 0e       	add	r12, r18
    892e:	d1 1c       	adc	r13, r1
    8930:	20 e0       	ldi	r18, 0x00	; 0
    8932:	99 23       	and	r25, r25
    8934:	29 f0       	breq	.+10     	; 0x8940 <dtoa_prf+0x1ea>
    8936:	d6 01       	movw	r26, r12
    8938:	9c 93       	st	X, r25
    893a:	f6 01       	movw	r30, r12
    893c:	31 96       	adiw	r30, 0x01	; 1
    893e:	6f 01       	movw	r12, r30
    8940:	51 11       	cpse	r21, r1
    8942:	0b c0       	rjmp	.+22     	; 0x895a <dtoa_prf+0x204>
    8944:	f6 01       	movw	r30, r12
    8946:	82 2f       	mov	r24, r18
    8948:	90 e3       	ldi	r25, 0x30	; 48
    894a:	88 23       	and	r24, r24
    894c:	19 f0       	breq	.+6      	; 0x8954 <dtoa_prf+0x1fe>
    894e:	91 93       	st	Z+, r25
    8950:	81 50       	subi	r24, 0x01	; 1
    8952:	fb cf       	rjmp	.-10     	; 0x894a <dtoa_prf+0x1f4>
    8954:	c2 0e       	add	r12, r18
    8956:	d1 1c       	adc	r13, r1
    8958:	20 e0       	ldi	r18, 0x00	; 0
    895a:	0f 2d       	mov	r16, r15
    895c:	06 0f       	add	r16, r22
    895e:	9a 81       	ldd	r25, Y+2	; 0x02
    8960:	34 2f       	mov	r19, r20
    8962:	30 71       	andi	r19, 0x10	; 16
    8964:	44 ff       	sbrs	r20, 4
    8966:	03 c0       	rjmp	.+6      	; 0x896e <dtoa_prf+0x218>
    8968:	91 33       	cpi	r25, 0x31	; 49
    896a:	09 f4       	brne	.+2      	; 0x896e <dtoa_prf+0x218>
    896c:	01 50       	subi	r16, 0x01	; 1
    896e:	10 16       	cp	r1, r16
    8970:	24 f4       	brge	.+8      	; 0x897a <dtoa_prf+0x224>
    8972:	09 30       	cpi	r16, 0x09	; 9
    8974:	18 f0       	brcs	.+6      	; 0x897c <dtoa_prf+0x226>
    8976:	08 e0       	ldi	r16, 0x08	; 8
    8978:	01 c0       	rjmp	.+2      	; 0x897c <dtoa_prf+0x226>
    897a:	01 e0       	ldi	r16, 0x01	; 1
    897c:	ab 01       	movw	r20, r22
    897e:	77 ff       	sbrs	r23, 7
    8980:	02 c0       	rjmp	.+4      	; 0x8986 <dtoa_prf+0x230>
    8982:	40 e0       	ldi	r20, 0x00	; 0
    8984:	50 e0       	ldi	r21, 0x00	; 0
    8986:	fb 01       	movw	r30, r22
    8988:	e4 1b       	sub	r30, r20
    898a:	f5 0b       	sbc	r31, r21
    898c:	a1 e0       	ldi	r26, 0x01	; 1
    898e:	b0 e0       	ldi	r27, 0x00	; 0
    8990:	ac 0f       	add	r26, r28
    8992:	bd 1f       	adc	r27, r29
    8994:	ea 0f       	add	r30, r26
    8996:	fb 1f       	adc	r31, r27
    8998:	8e e2       	ldi	r24, 0x2E	; 46
    899a:	a8 2e       	mov	r10, r24
    899c:	4b 01       	movw	r8, r22
    899e:	80 1a       	sub	r8, r16
    89a0:	91 08       	sbc	r9, r1
    89a2:	0b 2d       	mov	r16, r11
    89a4:	10 e0       	ldi	r17, 0x00	; 0
    89a6:	11 95       	neg	r17
    89a8:	01 95       	neg	r16
    89aa:	11 09       	sbc	r17, r1
    89ac:	4f 3f       	cpi	r20, 0xFF	; 255
    89ae:	bf ef       	ldi	r27, 0xFF	; 255
    89b0:	5b 07       	cpc	r21, r27
    89b2:	21 f4       	brne	.+8      	; 0x89bc <dtoa_prf+0x266>
    89b4:	d6 01       	movw	r26, r12
    89b6:	ac 92       	st	X, r10
    89b8:	11 96       	adiw	r26, 0x01	; 1
    89ba:	6d 01       	movw	r12, r26
    89bc:	64 17       	cp	r22, r20
    89be:	75 07       	cpc	r23, r21
    89c0:	2c f0       	brlt	.+10     	; 0x89cc <dtoa_prf+0x276>
    89c2:	84 16       	cp	r8, r20
    89c4:	95 06       	cpc	r9, r21
    89c6:	14 f4       	brge	.+4      	; 0x89cc <dtoa_prf+0x276>
    89c8:	81 81       	ldd	r24, Z+1	; 0x01
    89ca:	01 c0       	rjmp	.+2      	; 0x89ce <dtoa_prf+0x278>
    89cc:	80 e3       	ldi	r24, 0x30	; 48
    89ce:	41 50       	subi	r20, 0x01	; 1
    89d0:	51 09       	sbc	r21, r1
    89d2:	31 96       	adiw	r30, 0x01	; 1
    89d4:	d6 01       	movw	r26, r12
    89d6:	11 96       	adiw	r26, 0x01	; 1
    89d8:	7d 01       	movw	r14, r26
    89da:	40 17       	cp	r20, r16
    89dc:	51 07       	cpc	r21, r17
    89de:	24 f0       	brlt	.+8      	; 0x89e8 <dtoa_prf+0x292>
    89e0:	d6 01       	movw	r26, r12
    89e2:	8c 93       	st	X, r24
    89e4:	67 01       	movw	r12, r14
    89e6:	e2 cf       	rjmp	.-60     	; 0x89ac <dtoa_prf+0x256>
    89e8:	64 17       	cp	r22, r20
    89ea:	75 07       	cpc	r23, r21
    89ec:	39 f4       	brne	.+14     	; 0x89fc <dtoa_prf+0x2a6>
    89ee:	96 33       	cpi	r25, 0x36	; 54
    89f0:	20 f4       	brcc	.+8      	; 0x89fa <dtoa_prf+0x2a4>
    89f2:	95 33       	cpi	r25, 0x35	; 53
    89f4:	19 f4       	brne	.+6      	; 0x89fc <dtoa_prf+0x2a6>
    89f6:	31 11       	cpse	r19, r1
    89f8:	01 c0       	rjmp	.+2      	; 0x89fc <dtoa_prf+0x2a6>
    89fa:	81 e3       	ldi	r24, 0x31	; 49
    89fc:	f6 01       	movw	r30, r12
    89fe:	80 83       	st	Z, r24
    8a00:	f7 01       	movw	r30, r14
    8a02:	82 2f       	mov	r24, r18
    8a04:	90 e2       	ldi	r25, 0x20	; 32
    8a06:	88 23       	and	r24, r24
    8a08:	19 f0       	breq	.+6      	; 0x8a10 <dtoa_prf+0x2ba>
    8a0a:	91 93       	st	Z+, r25
    8a0c:	81 50       	subi	r24, 0x01	; 1
    8a0e:	fb cf       	rjmp	.-10     	; 0x8a06 <dtoa_prf+0x2b0>
    8a10:	f7 01       	movw	r30, r14
    8a12:	e2 0f       	add	r30, r18
    8a14:	f1 1d       	adc	r31, r1
    8a16:	10 82       	st	Z, r1
    8a18:	80 e0       	ldi	r24, 0x00	; 0
    8a1a:	90 e0       	ldi	r25, 0x00	; 0
    8a1c:	29 96       	adiw	r28, 0x09	; 9
    8a1e:	0f b6       	in	r0, 0x3f	; 63
    8a20:	f8 94       	cli
    8a22:	de bf       	out	0x3e, r29	; 62
    8a24:	0f be       	out	0x3f, r0	; 63
    8a26:	cd bf       	out	0x3d, r28	; 61
    8a28:	df 91       	pop	r29
    8a2a:	cf 91       	pop	r28
    8a2c:	1f 91       	pop	r17
    8a2e:	0f 91       	pop	r16
    8a30:	ff 90       	pop	r15
    8a32:	ef 90       	pop	r14
    8a34:	df 90       	pop	r13
    8a36:	cf 90       	pop	r12
    8a38:	bf 90       	pop	r11
    8a3a:	af 90       	pop	r10
    8a3c:	9f 90       	pop	r9
    8a3e:	8f 90       	pop	r8
    8a40:	08 95       	ret

00008a42 <__ftoa_engine>:
    8a42:	28 30       	cpi	r18, 0x08	; 8
    8a44:	08 f0       	brcs	.+2      	; 0x8a48 <__ftoa_engine+0x6>
    8a46:	27 e0       	ldi	r18, 0x07	; 7
    8a48:	33 27       	eor	r19, r19
    8a4a:	da 01       	movw	r26, r20
    8a4c:	99 0f       	add	r25, r25
    8a4e:	31 1d       	adc	r19, r1
    8a50:	87 fd       	sbrc	r24, 7
    8a52:	91 60       	ori	r25, 0x01	; 1
    8a54:	00 96       	adiw	r24, 0x00	; 0
    8a56:	61 05       	cpc	r22, r1
    8a58:	71 05       	cpc	r23, r1
    8a5a:	39 f4       	brne	.+14     	; 0x8a6a <__ftoa_engine+0x28>
    8a5c:	32 60       	ori	r19, 0x02	; 2
    8a5e:	2e 5f       	subi	r18, 0xFE	; 254
    8a60:	3d 93       	st	X+, r19
    8a62:	30 e3       	ldi	r19, 0x30	; 48
    8a64:	2a 95       	dec	r18
    8a66:	e1 f7       	brne	.-8      	; 0x8a60 <__ftoa_engine+0x1e>
    8a68:	08 95       	ret
    8a6a:	9f 3f       	cpi	r25, 0xFF	; 255
    8a6c:	30 f0       	brcs	.+12     	; 0x8a7a <__ftoa_engine+0x38>
    8a6e:	80 38       	cpi	r24, 0x80	; 128
    8a70:	71 05       	cpc	r23, r1
    8a72:	61 05       	cpc	r22, r1
    8a74:	09 f0       	breq	.+2      	; 0x8a78 <__ftoa_engine+0x36>
    8a76:	3c 5f       	subi	r19, 0xFC	; 252
    8a78:	3c 5f       	subi	r19, 0xFC	; 252
    8a7a:	3d 93       	st	X+, r19
    8a7c:	91 30       	cpi	r25, 0x01	; 1
    8a7e:	08 f0       	brcs	.+2      	; 0x8a82 <__ftoa_engine+0x40>
    8a80:	80 68       	ori	r24, 0x80	; 128
    8a82:	91 1d       	adc	r25, r1
    8a84:	df 93       	push	r29
    8a86:	cf 93       	push	r28
    8a88:	1f 93       	push	r17
    8a8a:	0f 93       	push	r16
    8a8c:	ff 92       	push	r15
    8a8e:	ef 92       	push	r14
    8a90:	19 2f       	mov	r17, r25
    8a92:	98 7f       	andi	r25, 0xF8	; 248
    8a94:	96 95       	lsr	r25
    8a96:	e9 2f       	mov	r30, r25
    8a98:	96 95       	lsr	r25
    8a9a:	96 95       	lsr	r25
    8a9c:	e9 0f       	add	r30, r25
    8a9e:	ff 27       	eor	r31, r31
    8aa0:	ea 5d       	subi	r30, 0xDA	; 218
    8aa2:	fe 4f       	sbci	r31, 0xFE	; 254
    8aa4:	99 27       	eor	r25, r25
    8aa6:	33 27       	eor	r19, r19
    8aa8:	ee 24       	eor	r14, r14
    8aaa:	ff 24       	eor	r15, r15
    8aac:	a7 01       	movw	r20, r14
    8aae:	e7 01       	movw	r28, r14
    8ab0:	05 90       	lpm	r0, Z+
    8ab2:	08 94       	sec
    8ab4:	07 94       	ror	r0
    8ab6:	28 f4       	brcc	.+10     	; 0x8ac2 <__ftoa_engine+0x80>
    8ab8:	36 0f       	add	r19, r22
    8aba:	e7 1e       	adc	r14, r23
    8abc:	f8 1e       	adc	r15, r24
    8abe:	49 1f       	adc	r20, r25
    8ac0:	51 1d       	adc	r21, r1
    8ac2:	66 0f       	add	r22, r22
    8ac4:	77 1f       	adc	r23, r23
    8ac6:	88 1f       	adc	r24, r24
    8ac8:	99 1f       	adc	r25, r25
    8aca:	06 94       	lsr	r0
    8acc:	a1 f7       	brne	.-24     	; 0x8ab6 <__ftoa_engine+0x74>
    8ace:	05 90       	lpm	r0, Z+
    8ad0:	07 94       	ror	r0
    8ad2:	28 f4       	brcc	.+10     	; 0x8ade <__ftoa_engine+0x9c>
    8ad4:	e7 0e       	add	r14, r23
    8ad6:	f8 1e       	adc	r15, r24
    8ad8:	49 1f       	adc	r20, r25
    8ada:	56 1f       	adc	r21, r22
    8adc:	c1 1d       	adc	r28, r1
    8ade:	77 0f       	add	r23, r23
    8ae0:	88 1f       	adc	r24, r24
    8ae2:	99 1f       	adc	r25, r25
    8ae4:	66 1f       	adc	r22, r22
    8ae6:	06 94       	lsr	r0
    8ae8:	a1 f7       	brne	.-24     	; 0x8ad2 <__ftoa_engine+0x90>
    8aea:	05 90       	lpm	r0, Z+
    8aec:	07 94       	ror	r0
    8aee:	28 f4       	brcc	.+10     	; 0x8afa <__ftoa_engine+0xb8>
    8af0:	f8 0e       	add	r15, r24
    8af2:	49 1f       	adc	r20, r25
    8af4:	56 1f       	adc	r21, r22
    8af6:	c7 1f       	adc	r28, r23
    8af8:	d1 1d       	adc	r29, r1
    8afa:	88 0f       	add	r24, r24
    8afc:	99 1f       	adc	r25, r25
    8afe:	66 1f       	adc	r22, r22
    8b00:	77 1f       	adc	r23, r23
    8b02:	06 94       	lsr	r0
    8b04:	a1 f7       	brne	.-24     	; 0x8aee <__ftoa_engine+0xac>
    8b06:	05 90       	lpm	r0, Z+
    8b08:	07 94       	ror	r0
    8b0a:	20 f4       	brcc	.+8      	; 0x8b14 <__ftoa_engine+0xd2>
    8b0c:	49 0f       	add	r20, r25
    8b0e:	56 1f       	adc	r21, r22
    8b10:	c7 1f       	adc	r28, r23
    8b12:	d8 1f       	adc	r29, r24
    8b14:	99 0f       	add	r25, r25
    8b16:	66 1f       	adc	r22, r22
    8b18:	77 1f       	adc	r23, r23
    8b1a:	88 1f       	adc	r24, r24
    8b1c:	06 94       	lsr	r0
    8b1e:	a9 f7       	brne	.-22     	; 0x8b0a <__ftoa_engine+0xc8>
    8b20:	84 91       	lpm	r24, Z
    8b22:	10 95       	com	r17
    8b24:	17 70       	andi	r17, 0x07	; 7
    8b26:	41 f0       	breq	.+16     	; 0x8b38 <__ftoa_engine+0xf6>
    8b28:	d6 95       	lsr	r29
    8b2a:	c7 95       	ror	r28
    8b2c:	57 95       	ror	r21
    8b2e:	47 95       	ror	r20
    8b30:	f7 94       	ror	r15
    8b32:	e7 94       	ror	r14
    8b34:	1a 95       	dec	r17
    8b36:	c1 f7       	brne	.-16     	; 0x8b28 <__ftoa_engine+0xe6>
    8b38:	ec ec       	ldi	r30, 0xCC	; 204
    8b3a:	f0 e0       	ldi	r31, 0x00	; 0
    8b3c:	68 94       	set
    8b3e:	15 90       	lpm	r1, Z+
    8b40:	15 91       	lpm	r17, Z+
    8b42:	35 91       	lpm	r19, Z+
    8b44:	65 91       	lpm	r22, Z+
    8b46:	95 91       	lpm	r25, Z+
    8b48:	05 90       	lpm	r0, Z+
    8b4a:	7f e2       	ldi	r23, 0x2F	; 47
    8b4c:	73 95       	inc	r23
    8b4e:	e1 18       	sub	r14, r1
    8b50:	f1 0a       	sbc	r15, r17
    8b52:	43 0b       	sbc	r20, r19
    8b54:	56 0b       	sbc	r21, r22
    8b56:	c9 0b       	sbc	r28, r25
    8b58:	d0 09       	sbc	r29, r0
    8b5a:	c0 f7       	brcc	.-16     	; 0x8b4c <__ftoa_engine+0x10a>
    8b5c:	e1 0c       	add	r14, r1
    8b5e:	f1 1e       	adc	r15, r17
    8b60:	43 1f       	adc	r20, r19
    8b62:	56 1f       	adc	r21, r22
    8b64:	c9 1f       	adc	r28, r25
    8b66:	d0 1d       	adc	r29, r0
    8b68:	7e f4       	brtc	.+30     	; 0x8b88 <__ftoa_engine+0x146>
    8b6a:	70 33       	cpi	r23, 0x30	; 48
    8b6c:	11 f4       	brne	.+4      	; 0x8b72 <__ftoa_engine+0x130>
    8b6e:	8a 95       	dec	r24
    8b70:	e6 cf       	rjmp	.-52     	; 0x8b3e <__ftoa_engine+0xfc>
    8b72:	e8 94       	clt
    8b74:	01 50       	subi	r16, 0x01	; 1
    8b76:	30 f0       	brcs	.+12     	; 0x8b84 <__ftoa_engine+0x142>
    8b78:	08 0f       	add	r16, r24
    8b7a:	0a f4       	brpl	.+2      	; 0x8b7e <__ftoa_engine+0x13c>
    8b7c:	00 27       	eor	r16, r16
    8b7e:	02 17       	cp	r16, r18
    8b80:	08 f4       	brcc	.+2      	; 0x8b84 <__ftoa_engine+0x142>
    8b82:	20 2f       	mov	r18, r16
    8b84:	23 95       	inc	r18
    8b86:	02 2f       	mov	r16, r18
    8b88:	7a 33       	cpi	r23, 0x3A	; 58
    8b8a:	28 f0       	brcs	.+10     	; 0x8b96 <__ftoa_engine+0x154>
    8b8c:	79 e3       	ldi	r23, 0x39	; 57
    8b8e:	7d 93       	st	X+, r23
    8b90:	2a 95       	dec	r18
    8b92:	e9 f7       	brne	.-6      	; 0x8b8e <__ftoa_engine+0x14c>
    8b94:	10 c0       	rjmp	.+32     	; 0x8bb6 <__ftoa_engine+0x174>
    8b96:	7d 93       	st	X+, r23
    8b98:	2a 95       	dec	r18
    8b9a:	89 f6       	brne	.-94     	; 0x8b3e <__ftoa_engine+0xfc>
    8b9c:	06 94       	lsr	r0
    8b9e:	97 95       	ror	r25
    8ba0:	67 95       	ror	r22
    8ba2:	37 95       	ror	r19
    8ba4:	17 95       	ror	r17
    8ba6:	17 94       	ror	r1
    8ba8:	e1 18       	sub	r14, r1
    8baa:	f1 0a       	sbc	r15, r17
    8bac:	43 0b       	sbc	r20, r19
    8bae:	56 0b       	sbc	r21, r22
    8bb0:	c9 0b       	sbc	r28, r25
    8bb2:	d0 09       	sbc	r29, r0
    8bb4:	98 f0       	brcs	.+38     	; 0x8bdc <__ftoa_engine+0x19a>
    8bb6:	23 95       	inc	r18
    8bb8:	7e 91       	ld	r23, -X
    8bba:	73 95       	inc	r23
    8bbc:	7a 33       	cpi	r23, 0x3A	; 58
    8bbe:	08 f0       	brcs	.+2      	; 0x8bc2 <__ftoa_engine+0x180>
    8bc0:	70 e3       	ldi	r23, 0x30	; 48
    8bc2:	7c 93       	st	X, r23
    8bc4:	20 13       	cpse	r18, r16
    8bc6:	b8 f7       	brcc	.-18     	; 0x8bb6 <__ftoa_engine+0x174>
    8bc8:	7e 91       	ld	r23, -X
    8bca:	70 61       	ori	r23, 0x10	; 16
    8bcc:	7d 93       	st	X+, r23
    8bce:	30 f0       	brcs	.+12     	; 0x8bdc <__ftoa_engine+0x19a>
    8bd0:	83 95       	inc	r24
    8bd2:	71 e3       	ldi	r23, 0x31	; 49
    8bd4:	7d 93       	st	X+, r23
    8bd6:	70 e3       	ldi	r23, 0x30	; 48
    8bd8:	2a 95       	dec	r18
    8bda:	e1 f7       	brne	.-8      	; 0x8bd4 <__ftoa_engine+0x192>
    8bdc:	11 24       	eor	r1, r1
    8bde:	ef 90       	pop	r14
    8be0:	ff 90       	pop	r15
    8be2:	0f 91       	pop	r16
    8be4:	1f 91       	pop	r17
    8be6:	cf 91       	pop	r28
    8be8:	df 91       	pop	r29
    8bea:	99 27       	eor	r25, r25
    8bec:	87 fd       	sbrc	r24, 7
    8bee:	90 95       	com	r25
    8bf0:	08 95       	ret

00008bf2 <__ctype_isfalse>:
    8bf2:	99 27       	eor	r25, r25
    8bf4:	88 27       	eor	r24, r24

00008bf6 <__ctype_istrue>:
    8bf6:	08 95       	ret

00008bf8 <strrev>:
    8bf8:	dc 01       	movw	r26, r24
    8bfa:	fc 01       	movw	r30, r24
    8bfc:	67 2f       	mov	r22, r23
    8bfe:	71 91       	ld	r23, Z+
    8c00:	77 23       	and	r23, r23
    8c02:	e1 f7       	brne	.-8      	; 0x8bfc <strrev+0x4>
    8c04:	32 97       	sbiw	r30, 0x02	; 2
    8c06:	04 c0       	rjmp	.+8      	; 0x8c10 <strrev+0x18>
    8c08:	7c 91       	ld	r23, X
    8c0a:	6d 93       	st	X+, r22
    8c0c:	70 83       	st	Z, r23
    8c0e:	62 91       	ld	r22, -Z
    8c10:	ae 17       	cp	r26, r30
    8c12:	bf 07       	cpc	r27, r31
    8c14:	c8 f3       	brcs	.-14     	; 0x8c08 <strrev+0x10>
    8c16:	08 95       	ret

00008c18 <eeprom_read_byte>:
    8c18:	f9 99       	sbic	0x1f, 1	; 31
    8c1a:	fe cf       	rjmp	.-4      	; 0x8c18 <eeprom_read_byte>
    8c1c:	92 bd       	out	0x22, r25	; 34
    8c1e:	81 bd       	out	0x21, r24	; 33
    8c20:	f8 9a       	sbi	0x1f, 0	; 31
    8c22:	99 27       	eor	r25, r25
    8c24:	80 b5       	in	r24, 0x20	; 32
    8c26:	08 95       	ret

00008c28 <eeprom_write_byte>:
    8c28:	26 2f       	mov	r18, r22

00008c2a <eeprom_write_r18>:
    8c2a:	f9 99       	sbic	0x1f, 1	; 31
    8c2c:	fe cf       	rjmp	.-4      	; 0x8c2a <eeprom_write_r18>
    8c2e:	1f ba       	out	0x1f, r1	; 31
    8c30:	92 bd       	out	0x22, r25	; 34
    8c32:	81 bd       	out	0x21, r24	; 33
    8c34:	20 bd       	out	0x20, r18	; 32
    8c36:	0f b6       	in	r0, 0x3f	; 63
    8c38:	f8 94       	cli
    8c3a:	fa 9a       	sbi	0x1f, 2	; 31
    8c3c:	f9 9a       	sbi	0x1f, 1	; 31
    8c3e:	0f be       	out	0x3f, r0	; 63
    8c40:	01 96       	adiw	r24, 0x01	; 1
    8c42:	08 95       	ret

00008c44 <__do_global_dtors>:
    8c44:	11 e0       	ldi	r17, 0x01	; 1
    8c46:	c3 e6       	ldi	r28, 0x63	; 99
    8c48:	d1 e0       	ldi	r29, 0x01	; 1
    8c4a:	03 c0       	rjmp	.+6      	; 0x8c52 <__do_global_dtors+0xe>
    8c4c:	fe 01       	movw	r30, r28
    8c4e:	59 da       	rcall	.-2894   	; 0x8102 <__tablejump2__>
    8c50:	21 96       	adiw	r28, 0x01	; 1
    8c52:	c4 36       	cpi	r28, 0x64	; 100
    8c54:	d1 07       	cpc	r29, r17
    8c56:	d1 f7       	brne	.-12     	; 0x8c4c <__do_global_dtors+0x8>
    8c58:	f8 94       	cli

00008c5a <__stop_program>:
    8c5a:	ff cf       	rjmp	.-2      	; 0x8c5a <__stop_program>
