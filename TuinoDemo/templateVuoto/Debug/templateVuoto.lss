
templateVuoto.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000980  00800100  00008b76  00008c0a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00008b76  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000348  00800a80  00800a80  0000958a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000958a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000095bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000012f8  00000000  00000000  00009600  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0003da0c  00000000  00000000  0000a8f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00007690  00000000  00000000  00048304  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000c600  00000000  00000000  0004f994  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000431c  00000000  00000000  0005bf94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00008958  00000000  00000000  000602b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00019dca  00000000  00000000  00068c08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000013b8  00000000  00000000  000829d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	63 c1       	rjmp	.+710    	; 0x2c8 <__dtors_end>
       2:	00 00       	nop
       4:	8b c1       	rjmp	.+790    	; 0x31c <__bad_interrupt>
       6:	00 00       	nop
       8:	89 c1       	rjmp	.+786    	; 0x31c <__bad_interrupt>
       a:	00 00       	nop
       c:	87 c1       	rjmp	.+782    	; 0x31c <__bad_interrupt>
       e:	00 00       	nop
      10:	0c 94 4d 19 	jmp	0x329a	; 0x329a <__vector_4>
      14:	83 c1       	rjmp	.+774    	; 0x31c <__bad_interrupt>
      16:	00 00       	nop
      18:	81 c1       	rjmp	.+770    	; 0x31c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	0c 94 ac 19 	jmp	0x3358	; 0x3358 <__vector_7>
      20:	7d c1       	rjmp	.+762    	; 0x31c <__bad_interrupt>
      22:	00 00       	nop
      24:	7b c1       	rjmp	.+758    	; 0x31c <__bad_interrupt>
      26:	00 00       	nop
      28:	79 c1       	rjmp	.+754    	; 0x31c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	77 c1       	rjmp	.+750    	; 0x31c <__bad_interrupt>
      2e:	00 00       	nop
      30:	75 c1       	rjmp	.+746    	; 0x31c <__bad_interrupt>
      32:	00 00       	nop
      34:	73 c1       	rjmp	.+742    	; 0x31c <__bad_interrupt>
      36:	00 00       	nop
      38:	71 c1       	rjmp	.+738    	; 0x31c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6f c1       	rjmp	.+734    	; 0x31c <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 da 39 	jmp	0x73b4	; 0x73b4 <__vector_16>
      44:	6b c1       	rjmp	.+726    	; 0x31c <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 c8 37 	jmp	0x6f90	; 0x6f90 <__vector_18>
      4c:	0c 94 fa 37 	jmp	0x6ff4	; 0x6ff4 <__vector_19>
      50:	65 c1       	rjmp	.+714    	; 0x31c <__bad_interrupt>
      52:	00 00       	nop
      54:	63 c1       	rjmp	.+710    	; 0x31c <__bad_interrupt>
      56:	00 00       	nop
      58:	61 c1       	rjmp	.+706    	; 0x31c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5f c1       	rjmp	.+702    	; 0x31c <__bad_interrupt>
      5e:	00 00       	nop
      60:	5d c1       	rjmp	.+698    	; 0x31c <__bad_interrupt>
      62:	00 00       	nop
      64:	5b c1       	rjmp	.+694    	; 0x31c <__bad_interrupt>
      66:	00 00       	nop
      68:	0c 94 15 34 	jmp	0x682a	; 0x682a <__vector_26>
      6c:	57 c1       	rjmp	.+686    	; 0x31c <__bad_interrupt>
      6e:	00 00       	nop
      70:	55 c1       	rjmp	.+682    	; 0x31c <__bad_interrupt>
      72:	00 00       	nop
      74:	53 c1       	rjmp	.+678    	; 0x31c <__bad_interrupt>
      76:	00 00       	nop
      78:	51 c1       	rjmp	.+674    	; 0x31c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4f c1       	rjmp	.+670    	; 0x31c <__bad_interrupt>
      7e:	00 00       	nop
      80:	4d c1       	rjmp	.+666    	; 0x31c <__bad_interrupt>
      82:	00 00       	nop
      84:	4b c1       	rjmp	.+662    	; 0x31c <__bad_interrupt>
      86:	00 00       	nop
      88:	49 c1       	rjmp	.+658    	; 0x31c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4f 0f       	add	r20, r31
      8e:	d5 0f       	add	r29, r21
      90:	fc 0f       	add	r31, r28
      92:	38 10       	cpse	r3, r8
      94:	f2 10       	cpse	r15, r2
      96:	7e 11       	cpse	r23, r14
      98:	74 12       	cpse	r7, r20
      9a:	d4 12       	cpse	r13, r20
      9c:	64 13       	cpse	r22, r20
      9e:	cb 13       	cpse	r28, r27
      a0:	a9 14       	cp	r10, r9
      a2:	1d 15       	cp	r17, r13
      a4:	4c 16       	cp	r4, r28
      a6:	ac 22       	and	r10, r28
      a8:	c3 22       	and	r12, r19
      aa:	c3 22       	and	r12, r19
      ac:	c0 22       	and	r12, r16
      ae:	c3 22       	and	r12, r19
      b0:	aa 22       	and	r10, r26
      b2:	c3 22       	and	r12, r19
      b4:	c3 22       	and	r12, r19
      b6:	c3 22       	and	r12, r19
      b8:	9e 22       	and	r9, r30
      ba:	c3 22       	and	r12, r19
      bc:	c3 22       	and	r12, r19
      be:	b3 22       	and	r11, r19
      c0:	be 22       	and	r11, r30
      c2:	bc 22       	and	r11, r28
      c4:	c3 22       	and	r12, r19
      c6:	c3 22       	and	r12, r19
      c8:	c3 22       	and	r12, r19
      ca:	ba 22       	and	r11, r26

000000cc <__trampolines_end>:
      cc:	00 40       	sbci	r16, 0x00	; 0
      ce:	7a 10       	cpse	r7, r10
      d0:	f3 5a       	subi	r31, 0xA3	; 163
      d2:	00 a0       	ldd	r0, Z+32	; 0x20
      d4:	72 4e       	sbci	r23, 0xE2	; 226
      d6:	18 09       	sbc	r17, r8
      d8:	00 10       	cpse	r0, r0
      da:	a5 d4       	rcall	.+2378   	; 0xa26 <_Z14leggiTAG_Mezzob+0x4e>
      dc:	e8 00       	.word	0x00e8	; ????
      de:	00 e8       	ldi	r16, 0x80	; 128
      e0:	76 48       	sbci	r23, 0x86	; 134
      e2:	17 00       	.word	0x0017	; ????
      e4:	00 e4       	ldi	r16, 0x40	; 64
      e6:	0b 54       	subi	r16, 0x4B	; 75
      e8:	02 00       	.word	0x0002	; ????
      ea:	00 ca       	rjmp	.-3072   	; 0xfffff4ec <__eeprom_end+0xff7ef4ec>
      ec:	9a 3b       	cpi	r25, 0xBA	; 186
      ee:	00 00       	nop
      f0:	00 e1       	ldi	r16, 0x10	; 16
      f2:	f5 05       	cpc	r31, r5
      f4:	00 00       	nop
      f6:	80 96       	adiw	r24, 0x20	; 32
      f8:	98 00       	.word	0x0098	; ????
      fa:	00 00       	nop
      fc:	40 42       	sbci	r20, 0x20	; 32
      fe:	0f 00       	.word	0x000f	; ????
     100:	00 00       	nop
     102:	a0 86       	std	Z+8, r10	; 0x08
     104:	01 00       	.word	0x0001	; ????
     106:	00 00       	nop
     108:	10 27       	eor	r17, r16
     10a:	00 00       	nop
     10c:	00 00       	nop
     10e:	e8 03       	fmulsu	r22, r16
     110:	00 00       	nop
     112:	00 00       	nop
     114:	64 00       	.word	0x0064	; ????
     116:	00 00       	nop
     118:	00 00       	nop
     11a:	0a 00       	.word	0x000a	; ????
     11c:	00 00       	nop
     11e:	00 00       	nop
     120:	01 00       	.word	0x0001	; ????
     122:	00 00       	nop
     124:	00 00       	nop
     126:	2c 76       	andi	r18, 0x6C	; 108
     128:	d8 88       	ldd	r13, Y+16	; 0x10
     12a:	dc 67       	ori	r29, 0x7C	; 124
     12c:	4f 08       	sbc	r4, r15
     12e:	23 df       	rcall	.-442    	; 0xffffff76 <__eeprom_end+0xff7eff76>
     130:	c1 df       	rcall	.-126    	; 0xb4 <__SREG__+0x75>
     132:	ae 59       	subi	r26, 0x9E	; 158
     134:	e1 b1       	in	r30, 0x01	; 1
     136:	b7 96       	adiw	r30, 0x27	; 39
     138:	e5 e3       	ldi	r30, 0x35	; 53
     13a:	e4 53       	subi	r30, 0x34	; 52
     13c:	c6 3a       	cpi	r28, 0xA6	; 166
     13e:	e6 51       	subi	r30, 0x16	; 22
     140:	99 76       	andi	r25, 0x69	; 105
     142:	96 e8       	ldi	r25, 0x86	; 134
     144:	e6 c2       	rjmp	.+1484   	; 0x712 <_Z13getCharKeypadi+0x1c8>
     146:	84 26       	eor	r8, r20
     148:	eb 89       	ldd	r30, Y+19	; 0x13
     14a:	8c 9b       	sbis	0x11, 4	; 17
     14c:	62 ed       	ldi	r22, 0xD2	; 210
     14e:	40 7c       	andi	r20, 0xC0	; 192
     150:	6f fc       	.word	0xfc6f	; ????
     152:	ef bc       	out	0x2f, r14	; 47
     154:	9c 9f       	mul	r25, r28
     156:	40 f2       	brcs	.-112    	; 0xe8 <__trampolines_end+0x1c>
     158:	ba a5       	ldd	r27, Y+42	; 0x2a
     15a:	6f a5       	ldd	r22, Y+47	; 0x2f
     15c:	f4 90       	lpm	r15, Z
     15e:	05 5a       	subi	r16, 0xA5	; 165
     160:	2a f7       	brpl	.-54     	; 0x12c <__trampolines_end+0x60>
     162:	5c 93       	st	X, r21
     164:	6b 6c       	ori	r22, 0xCB	; 203
     166:	f9 67       	ori	r31, 0x79	; 121
     168:	6d c1       	rjmp	.+730    	; 0x444 <_Z8printTabh+0xa>
     16a:	1b fc       	.word	0xfc1b	; ????
     16c:	e0 e4       	ldi	r30, 0x40	; 64
     16e:	0d 47       	sbci	r16, 0x7D	; 125
     170:	fe f5       	brtc	.+126    	; 0x1f0 <_ZZ5setupE3__c+0xc>
     172:	20 e6       	ldi	r18, 0x60	; 96
     174:	b5 00       	.word	0x00b5	; ????
     176:	d0 ed       	ldi	r29, 0xD0	; 208
     178:	90 2e       	mov	r9, r16
     17a:	03 00       	.word	0x0003	; ????
     17c:	94 35       	cpi	r25, 0x54	; 84
     17e:	77 05       	cpc	r23, r7
     180:	00 80       	ld	r0, Z
     182:	84 1e       	adc	r8, r20
     184:	08 00       	.word	0x0008	; ????
     186:	00 20       	and	r0, r0
     188:	4e 0a       	sbc	r4, r30
     18a:	00 00       	nop
     18c:	00 c8       	rjmp	.-4096   	; 0xfffff18e <__eeprom_end+0xff7ef18e>
     18e:	0c 33       	cpi	r16, 0x3C	; 60
     190:	33 33       	cpi	r19, 0x33	; 51
     192:	33 0f       	add	r19, r19
     194:	98 6e       	ori	r25, 0xE8	; 232
     196:	12 83       	std	Z+2, r17	; 0x02
     198:	11 41       	sbci	r17, 0x11	; 17
     19a:	ef 8d       	ldd	r30, Y+31	; 0x1f
     19c:	21 14       	cp	r2, r1
     19e:	89 3b       	cpi	r24, 0xB9	; 185
     1a0:	e6 55       	subi	r30, 0x56	; 86
     1a2:	16 cf       	rjmp	.-468    	; 0xffffffd0 <__eeprom_end+0xff7effd0>
     1a4:	fe e6       	ldi	r31, 0x6E	; 110
     1a6:	db 18       	sub	r13, r11
     1a8:	d1 84       	ldd	r13, Z+9	; 0x09
     1aa:	4b 38       	cpi	r20, 0x8B	; 139
     1ac:	1b f7       	brvc	.-58     	; 0x174 <__trampolines_end+0xa8>
     1ae:	7c 1d       	adc	r23, r12
     1b0:	90 1d       	adc	r25, r0
     1b2:	a4 bb       	out	0x14, r26	; 20
     1b4:	e4 24       	eor	r14, r4
     1b6:	20 32       	cpi	r18, 0x20	; 32
     1b8:	84 72       	andi	r24, 0x24	; 36
     1ba:	5e 22       	and	r5, r30
     1bc:	81 00       	.word	0x0081	; ????
     1be:	c9 f1       	breq	.+114    	; 0x232 <_ZL11daysInMonth+0xa>
     1c0:	24 ec       	ldi	r18, 0xC4	; 196
     1c2:	a1 e5       	ldi	r26, 0x51	; 81
     1c4:	3d 27       	eor	r19, r29

000001c6 <_ZZ5setupE3__c_0>:
     1c6:	52 54 43 20 63 68 69 70 20 44 53 33 32 33 31 4d     RTC chip DS3231M
     1d6:	20 69 6e 69 74 69 61 6c 69 7a 65 64 2e 00            initialized..

000001e4 <_ZZ5setupE3__c>:
     1e4:	6e 6f 6e 20 74 72 6f 76 6f 20 6d 6f 64 75 6c 6f     non trovo modulo
     1f4:	20 52 54 43 20 44 53 33 32 33 31 4d 4d 2e 20 52      RTC DS3231MM. R
     204:	69 70 72 6f 76 6f 20 74 72 61 20 33 73 2e 00        iprovo tra 3s..

00000213 <_ZZN13DS3231M_Class6adjustEvE3__c>:
     213:	4a 75 6e 20 20 39 20 32 30 32 31 00                 Jun  9 2021.

0000021f <_ZZN13DS3231M_Class6adjustEvE3__c_0>:
     21f:	31 37 3a 34 36 3a 35 39 00                          17:46:59.

00000228 <_ZL11daysInMonth>:
     228:	1f 1c 1f 1e 1f 1e 1f 1f 1e 1f 1e 1f                 ............

00000234 <digital_pin_to_timer_PGM>:
     234:	00 00 00 00 04 03 08 07 00 00 02 00 09 0a 00 00     ................
	...
     250:	00 00 00 01                                         ....

00000254 <digital_pin_to_bit_mask_PGM>:
     254:	01 02 04 08 10 20 40 80 01 02 10 20 40 80 10 20     ..... @.... @.. 
     264:	40 80 10 08 20 04 40 80 01 02 04 08 01 02 04 08     @... .@.........

00000274 <digital_pin_to_port_PGM>:
     274:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 01 01     ................
     284:	01 01 03 03 03 03 03 03 01 01 01 01 03 03 02 02     ................

00000294 <port_to_input_PGM>:
     294:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

0000029e <port_to_output_PGM>:
     29e:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000002a8 <port_to_mode_PGM>:
     2a8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000002b2 <__ctors_start>:
     2b2:	2b 1a       	sub	r2, r27
     2b4:	32 25       	eor	r19, r2
     2b6:	8a 25       	eor	r24, r10
     2b8:	82 28       	or	r8, r2
     2ba:	69 2a       	or	r6, r25
     2bc:	74 2a       	or	r7, r20
     2be:	46 2c       	mov	r4, r6
     2c0:	16 30       	cpi	r17, 0x06	; 6
     2c2:	a5 36       	cpi	r26, 0x65	; 101
     2c4:	28 38       	cpi	r18, 0x88	; 136

000002c6 <__ctors_end>:
     2c6:	49 1b       	sub	r20, r25

000002c8 <__dtors_end>:
     2c8:	11 24       	eor	r1, r1
     2ca:	1f be       	out	0x3f, r1	; 63
     2cc:	cf ef       	ldi	r28, 0xFF	; 255
     2ce:	d0 e4       	ldi	r29, 0x40	; 64
     2d0:	de bf       	out	0x3e, r29	; 62
     2d2:	cd bf       	out	0x3d, r28	; 61

000002d4 <__do_copy_data>:
     2d4:	1a e0       	ldi	r17, 0x0A	; 10
     2d6:	a0 e0       	ldi	r26, 0x00	; 0
     2d8:	b1 e0       	ldi	r27, 0x01	; 1
     2da:	e6 e7       	ldi	r30, 0x76	; 118
     2dc:	fb e8       	ldi	r31, 0x8B	; 139
     2de:	00 e0       	ldi	r16, 0x00	; 0
     2e0:	0b bf       	out	0x3b, r16	; 59
     2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <__do_copy_data+0x14>
     2e4:	07 90       	elpm	r0, Z+
     2e6:	0d 92       	st	X+, r0
     2e8:	a0 38       	cpi	r26, 0x80	; 128
     2ea:	b1 07       	cpc	r27, r17
     2ec:	d9 f7       	brne	.-10     	; 0x2e4 <__do_copy_data+0x10>

000002ee <__do_clear_bss>:
     2ee:	2d e0       	ldi	r18, 0x0D	; 13
     2f0:	a0 e8       	ldi	r26, 0x80	; 128
     2f2:	ba e0       	ldi	r27, 0x0A	; 10
     2f4:	01 c0       	rjmp	.+2      	; 0x2f8 <.do_clear_bss_start>

000002f6 <.do_clear_bss_loop>:
     2f6:	1d 92       	st	X+, r1

000002f8 <.do_clear_bss_start>:
     2f8:	a8 3c       	cpi	r26, 0xC8	; 200
     2fa:	b2 07       	cpc	r27, r18
     2fc:	e1 f7       	brne	.-8      	; 0x2f6 <.do_clear_bss_loop>

000002fe <__do_global_ctors>:
     2fe:	11 e0       	ldi	r17, 0x01	; 1
     300:	c3 e6       	ldi	r28, 0x63	; 99
     302:	d1 e0       	ldi	r29, 0x01	; 1
     304:	04 c0       	rjmp	.+8      	; 0x30e <__do_global_ctors+0x10>
     306:	21 97       	sbiw	r28, 0x01	; 1
     308:	fe 01       	movw	r30, r28
     30a:	0e 94 0e 40 	call	0x801c	; 0x801c <__tablejump2__>
     30e:	c9 35       	cpi	r28, 0x59	; 89
     310:	d1 07       	cpc	r29, r17
     312:	c9 f7       	brne	.-14     	; 0x306 <__do_global_ctors+0x8>
     314:	0e 94 b4 38 	call	0x7168	; 0x7168 <main>
     318:	0c 94 af 45 	jmp	0x8b5e	; 0x8b5e <__do_global_dtors>

0000031c <__bad_interrupt>:
     31c:	71 ce       	rjmp	.-798    	; 0x0 <__vectors>

0000031e <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     31e:	80 e0       	ldi	r24, 0x00	; 0
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	08 95       	ret

00000324 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     324:	08 95       	ret

00000326 <_ZL10enable_ETHv>:
 Serial.println(" ");
 Serial.println(" ");
 Serial.print("Salvata nella EEPROM: ");
 Serial.println(Salvata);
 return Salvata;
}
     326:	44 98       	cbi	0x08, 4	; 8
     328:	08 95       	ret

0000032a <_ZL11disable_ETHv>:
     32a:	44 9a       	sbi	0x08, 4	; 8
     32c:	08 95       	ret

0000032e <_Z19InizializzaEthernetv>:
     32e:	ef 92       	push	r14
     330:	ff 92       	push	r15
     332:	0f 93       	push	r16
     334:	1f 93       	push	r17
     336:	cf 93       	push	r28
     338:	df 93       	push	r29
     33a:	cd b7       	in	r28, 0x3d	; 61
     33c:	de b7       	in	r29, 0x3e	; 62
     33e:	68 97       	sbiw	r28, 0x18	; 24
     340:	0f b6       	in	r0, 0x3f	; 63
     342:	f8 94       	cli
     344:	de bf       	out	0x3e, r29	; 62
     346:	0f be       	out	0x3f, r0	; 63
     348:	cd bf       	out	0x3d, r28	; 61
     34a:	80 e6       	ldi	r24, 0x60	; 96
     34c:	9a e0       	ldi	r25, 0x0A	; 10
     34e:	9a 83       	std	Y+2, r25	; 0x02
     350:	89 83       	std	Y+1, r24	; 0x01
     352:	40 91 c9 0a 	lds	r20, 0x0AC9	; 0x800ac9 <subnet+0x2>
     356:	50 91 ca 0a 	lds	r21, 0x0ACA	; 0x800aca <subnet+0x3>
     35a:	60 91 cb 0a 	lds	r22, 0x0ACB	; 0x800acb <subnet+0x4>
     35e:	70 91 cc 0a 	lds	r23, 0x0ACC	; 0x800acc <subnet+0x5>
     362:	4b 83       	std	Y+3, r20	; 0x03
     364:	5c 83       	std	Y+4, r21	; 0x04
     366:	6d 83       	std	Y+5, r22	; 0x05
     368:	7e 83       	std	Y+6, r23	; 0x06
     36a:	98 87       	std	Y+8, r25	; 0x08
     36c:	8f 83       	std	Y+7, r24	; 0x07
     36e:	40 91 cf 0a 	lds	r20, 0x0ACF	; 0x800acf <gateway+0x2>
     372:	50 91 d0 0a 	lds	r21, 0x0AD0	; 0x800ad0 <gateway+0x3>
     376:	60 91 d1 0a 	lds	r22, 0x0AD1	; 0x800ad1 <gateway+0x4>
     37a:	70 91 d2 0a 	lds	r23, 0x0AD2	; 0x800ad2 <gateway+0x5>
     37e:	49 87       	std	Y+9, r20	; 0x09
     380:	5a 87       	std	Y+10, r21	; 0x0a
     382:	6b 87       	std	Y+11, r22	; 0x0b
     384:	7c 87       	std	Y+12, r23	; 0x0c
     386:	9e 87       	std	Y+14, r25	; 0x0e
     388:	8d 87       	std	Y+13, r24	; 0x0d
     38a:	40 91 d5 0a 	lds	r20, 0x0AD5	; 0x800ad5 <myDns+0x2>
     38e:	50 91 d6 0a 	lds	r21, 0x0AD6	; 0x800ad6 <myDns+0x3>
     392:	60 91 d7 0a 	lds	r22, 0x0AD7	; 0x800ad7 <myDns+0x4>
     396:	70 91 d8 0a 	lds	r23, 0x0AD8	; 0x800ad8 <myDns+0x5>
     39a:	4f 87       	std	Y+15, r20	; 0x0f
     39c:	58 8b       	std	Y+16, r21	; 0x10
     39e:	69 8b       	std	Y+17, r22	; 0x11
     3a0:	7a 8b       	std	Y+18, r23	; 0x12
     3a2:	9c 8b       	std	Y+20, r25	; 0x14
     3a4:	8b 8b       	std	Y+19, r24	; 0x13
     3a6:	80 91 db 0a 	lds	r24, 0x0ADB	; 0x800adb <ipCCEC+0x2>
     3aa:	90 91 dc 0a 	lds	r25, 0x0ADC	; 0x800adc <ipCCEC+0x3>
     3ae:	a0 91 dd 0a 	lds	r26, 0x0ADD	; 0x800add <ipCCEC+0x4>
     3b2:	b0 91 de 0a 	lds	r27, 0x0ADE	; 0x800ade <ipCCEC+0x5>
     3b6:	8d 8b       	std	Y+21, r24	; 0x15
     3b8:	9e 8b       	std	Y+22, r25	; 0x16
     3ba:	af 8b       	std	Y+23, r26	; 0x17
     3bc:	b8 8f       	std	Y+24, r27	; 0x18
     3be:	ce 01       	movw	r24, r28
     3c0:	01 96       	adiw	r24, 0x01	; 1
     3c2:	7c 01       	movw	r14, r24
     3c4:	8e 01       	movw	r16, r28
     3c6:	09 5f       	subi	r16, 0xF9	; 249
     3c8:	1f 4f       	sbci	r17, 0xFF	; 255
     3ca:	9e 01       	movw	r18, r28
     3cc:	23 5f       	subi	r18, 0xF3	; 243
     3ce:	3f 4f       	sbci	r19, 0xFF	; 255
     3d0:	ae 01       	movw	r20, r28
     3d2:	4d 5e       	subi	r20, 0xED	; 237
     3d4:	5f 4f       	sbci	r21, 0xFF	; 255
     3d6:	6e e2       	ldi	r22, 0x2E	; 46
     3d8:	71 e0       	ldi	r23, 0x01	; 1
     3da:	8b e1       	ldi	r24, 0x1B	; 27
     3dc:	9c e0       	ldi	r25, 0x0C	; 12
     3de:	0e 94 3c 28 	call	0x5078	; 0x5078 <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_>
     3e2:	68 96       	adiw	r28, 0x18	; 24
     3e4:	0f b6       	in	r0, 0x3f	; 63
     3e6:	f8 94       	cli
     3e8:	de bf       	out	0x3e, r29	; 62
     3ea:	0f be       	out	0x3f, r0	; 63
     3ec:	cd bf       	out	0x3d, r28	; 61
     3ee:	df 91       	pop	r29
     3f0:	cf 91       	pop	r28
     3f2:	1f 91       	pop	r17
     3f4:	0f 91       	pop	r16
     3f6:	ff 90       	pop	r15
     3f8:	ef 90       	pop	r14
     3fa:	08 95       	ret

000003fc <_Z11my_delay_msi>:
     3fc:	18 16       	cp	r1, r24
     3fe:	19 06       	cpc	r1, r25
     400:	44 f4       	brge	.+16     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     402:	ef e9       	ldi	r30, 0x9F	; 159
     404:	ff e0       	ldi	r31, 0x0F	; 15
     406:	31 97       	sbiw	r30, 0x01	; 1
     408:	f1 f7       	brne	.-4      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     40a:	00 c0       	rjmp	.+0      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     40c:	00 00       	nop
     40e:	01 97       	sbiw	r24, 0x01	; 1
     410:	f5 cf       	rjmp	.-22     	; 0x3fc <_Z11my_delay_msi>
     412:	08 95       	ret

00000414 <_Z9printLinev>:
     414:	cf 93       	push	r28
     416:	8e e1       	ldi	r24, 0x1E	; 30
     418:	9d e0       	ldi	r25, 0x0D	; 13
     41a:	0e 94 39 39 	call	0x7272	; 0x7272 <_ZN5Print7printlnEv>
     41e:	cd e7       	ldi	r28, 0x7D	; 125
     420:	69 ee       	ldi	r22, 0xE9	; 233
     422:	71 e0       	ldi	r23, 0x01	; 1
     424:	8e e1       	ldi	r24, 0x1E	; 30
     426:	9d e0       	ldi	r25, 0x0D	; 13
     428:	0e 94 31 39 	call	0x7262	; 0x7262 <_ZN5Print5printEPKc>
     42c:	c1 50       	subi	r28, 0x01	; 1
     42e:	c1 f7       	brne	.-16     	; 0x420 <_Z9printLinev+0xc>
     430:	8e e1       	ldi	r24, 0x1E	; 30
     432:	9d e0       	ldi	r25, 0x0D	; 13
     434:	cf 91       	pop	r28
     436:	0c 94 39 39 	jmp	0x7272	; 0x7272 <_ZN5Print7printlnEv>

0000043a <_Z8printTabh>:
     43a:	cf 93       	push	r28
     43c:	df 93       	push	r29
     43e:	d8 2f       	mov	r29, r24
     440:	c0 e0       	ldi	r28, 0x00	; 0
     442:	cd 17       	cp	r28, r29
     444:	41 f0       	breq	.+16     	; 0x456 <_Z8printTabh+0x1c>
     446:	6b ee       	ldi	r22, 0xEB	; 235
     448:	71 e0       	ldi	r23, 0x01	; 1
     44a:	8e e1       	ldi	r24, 0x1E	; 30
     44c:	9d e0       	ldi	r25, 0x0D	; 13
     44e:	0e 94 31 39 	call	0x7262	; 0x7262 <_ZN5Print5printEPKc>
     452:	cf 5f       	subi	r28, 0xFF	; 255
     454:	f6 cf       	rjmp	.-20     	; 0x442 <_Z8printTabh+0x8>
     456:	df 91       	pop	r29
     458:	cf 91       	pop	r28
     45a:	08 95       	ret

0000045c <_Z4passb>:
     45c:	cf 93       	push	r28
     45e:	c8 2f       	mov	r28, r24
     460:	81 e0       	ldi	r24, 0x01	; 1
     462:	eb df       	rcall	.-42     	; 0x43a <_Z8printTabh>
     464:	6d ee       	ldi	r22, 0xED	; 237
     466:	71 e0       	ldi	r23, 0x01	; 1
     468:	8e e1       	ldi	r24, 0x1E	; 30
     46a:	9d e0       	ldi	r25, 0x0D	; 13
     46c:	0e 94 31 39 	call	0x7262	; 0x7262 <_ZN5Print5printEPKc>
     470:	cc 23       	and	r28, r28
     472:	19 f0       	breq	.+6      	; 0x47a <_Z4passb+0x1e>
     474:	61 ef       	ldi	r22, 0xF1	; 241
     476:	71 e0       	ldi	r23, 0x01	; 1
     478:	02 c0       	rjmp	.+4      	; 0x47e <_Z4passb+0x22>
     47a:	66 ef       	ldi	r22, 0xF6	; 246
     47c:	71 e0       	ldi	r23, 0x01	; 1
     47e:	8e e1       	ldi	r24, 0x1E	; 30
     480:	9d e0       	ldi	r25, 0x0D	; 13
     482:	0e 94 31 39 	call	0x7262	; 0x7262 <_ZN5Print5printEPKc>
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	cf 91       	pop	r28
     48a:	d7 cf       	rjmp	.-82     	; 0x43a <_Z8printTabh>

0000048c <_Z11clearEEPROMii>:
     48c:	0f 93       	push	r16
     48e:	1f 93       	push	r17
     490:	cf 93       	push	r28
     492:	df 93       	push	r29
     494:	ec 01       	movw	r28, r24
     496:	8b 01       	movw	r16, r22
     498:	6f ee       	ldi	r22, 0xEF	; 239
     49a:	71 e0       	ldi	r23, 0x01	; 1
     49c:	8e e1       	ldi	r24, 0x1E	; 30
     49e:	9d e0       	ldi	r25, 0x0D	; 13
     4a0:	0e 94 5c 39 	call	0x72b8	; 0x72b8 <_ZN5Print7printlnEPKc>
     4a4:	6f ee       	ldi	r22, 0xEF	; 239
     4a6:	71 e0       	ldi	r23, 0x01	; 1
     4a8:	8e e1       	ldi	r24, 0x1E	; 30
     4aa:	9d e0       	ldi	r25, 0x0D	; 13
     4ac:	0e 94 5c 39 	call	0x72b8	; 0x72b8 <_ZN5Print7printlnEPKc>
     4b0:	60 e2       	ldi	r22, 0x20	; 32
     4b2:	72 e0       	ldi	r23, 0x02	; 2
     4b4:	8e e1       	ldi	r24, 0x1E	; 30
     4b6:	9d e0       	ldi	r25, 0x0D	; 13
     4b8:	0e 94 5c 39 	call	0x72b8	; 0x72b8 <_ZN5Print7printlnEPKc>
     4bc:	c0 17       	cp	r28, r16
     4be:	d1 07       	cpc	r29, r17
     4c0:	34 f4       	brge	.+12     	; 0x4ce <_Z11clearEEPROMii+0x42>
     4c2:	60 e0       	ldi	r22, 0x00	; 0
     4c4:	ce 01       	movw	r24, r28
     4c6:	0e 94 a1 45 	call	0x8b42	; 0x8b42 <eeprom_write_byte>
     4ca:	21 96       	adiw	r28, 0x01	; 1
     4cc:	f7 cf       	rjmp	.-18     	; 0x4bc <_Z11clearEEPROMii+0x30>
     4ce:	6d e3       	ldi	r22, 0x3D	; 61
     4d0:	72 e0       	ldi	r23, 0x02	; 2
     4d2:	8e e1       	ldi	r24, 0x1E	; 30
     4d4:	9d e0       	ldi	r25, 0x0D	; 13
     4d6:	0e 94 5c 39 	call	0x72b8	; 0x72b8 <_ZN5Print7printlnEPKc>
     4da:	6f ee       	ldi	r22, 0xEF	; 239
     4dc:	71 e0       	ldi	r23, 0x01	; 1
     4de:	8e e1       	ldi	r24, 0x1E	; 30
     4e0:	9d e0       	ldi	r25, 0x0D	; 13
     4e2:	0e 94 5c 39 	call	0x72b8	; 0x72b8 <_ZN5Print7printlnEPKc>
     4e6:	6f ee       	ldi	r22, 0xEF	; 239
     4e8:	71 e0       	ldi	r23, 0x01	; 1
     4ea:	8e e1       	ldi	r24, 0x1E	; 30
     4ec:	9d e0       	ldi	r25, 0x0D	; 13
     4ee:	df 91       	pop	r29
     4f0:	cf 91       	pop	r28
     4f2:	1f 91       	pop	r17
     4f4:	0f 91       	pop	r16
     4f6:	0c 94 5c 39 	jmp	0x72b8	; 0x72b8 <_ZN5Print7printlnEPKc>

000004fa <_Z6Buzzerhm>:
     4fa:	8f 92       	push	r8
     4fc:	9f 92       	push	r9
     4fe:	af 92       	push	r10
     500:	bf 92       	push	r11
     502:	ff 92       	push	r15
     504:	0f 93       	push	r16
     506:	1f 93       	push	r17
     508:	cf 93       	push	r28
     50a:	df 93       	push	r29
     50c:	4a 01       	movw	r8, r20
     50e:	5b 01       	movw	r10, r22
     510:	c0 e0       	ldi	r28, 0x00	; 0
     512:	d0 e0       	ldi	r29, 0x00	; 0
     514:	08 2f       	mov	r16, r24
     516:	10 e0       	ldi	r17, 0x00	; 0
     518:	80 e4       	ldi	r24, 0x40	; 64
     51a:	f8 2e       	mov	r15, r24
     51c:	c0 17       	cp	r28, r16
     51e:	d1 07       	cpc	r29, r17
     520:	54 f4       	brge	.+20     	; 0x536 <_Z6Buzzerhm+0x3c>
     522:	98 b1       	in	r25, 0x08	; 8
     524:	9f 25       	eor	r25, r15
     526:	98 b9       	out	0x08, r25	; 8
     528:	c4 01       	movw	r24, r8
     52a:	68 df       	rcall	.-304    	; 0x3fc <_Z11my_delay_msi>
     52c:	98 b1       	in	r25, 0x08	; 8
     52e:	9f 25       	eor	r25, r15
     530:	98 b9       	out	0x08, r25	; 8
     532:	21 96       	adiw	r28, 0x01	; 1
     534:	f3 cf       	rjmp	.-26     	; 0x51c <_Z6Buzzerhm+0x22>
     536:	df 91       	pop	r29
     538:	cf 91       	pop	r28
     53a:	1f 91       	pop	r17
     53c:	0f 91       	pop	r16
     53e:	ff 90       	pop	r15
     540:	bf 90       	pop	r11
     542:	af 90       	pop	r10
     544:	9f 90       	pop	r9
     546:	8f 90       	pop	r8
     548:	08 95       	ret

0000054a <_Z13getCharKeypadi>:
     54a:	82 32       	cpi	r24, 0x22	; 34
     54c:	91 05       	cpc	r25, r1
     54e:	09 f4       	brne	.+2      	; 0x552 <_Z13getCharKeypadi+0x8>
     550:	9a c0       	rjmp	.+308    	; 0x686 <_Z13getCharKeypadi+0x13c>
     552:	6c f5       	brge	.+90     	; 0x5ae <_Z13getCharKeypadi+0x64>
     554:	8a 30       	cpi	r24, 0x0A	; 10
     556:	91 05       	cpc	r25, r1
     558:	09 f4       	brne	.+2      	; 0x55c <_Z13getCharKeypadi+0x12>
     55a:	83 c0       	rjmp	.+262    	; 0x662 <_Z13getCharKeypadi+0x118>
     55c:	a4 f4       	brge	.+40     	; 0x586 <_Z13getCharKeypadi+0x3c>
     55e:	86 30       	cpi	r24, 0x06	; 6
     560:	91 05       	cpc	r25, r1
     562:	09 f4       	brne	.+2      	; 0x566 <_Z13getCharKeypadi+0x1c>
     564:	75 c0       	rjmp	.+234    	; 0x650 <_Z13getCharKeypadi+0x106>
     566:	89 30       	cpi	r24, 0x09	; 9
     568:	91 05       	cpc	r25, r1
     56a:	09 f4       	brne	.+2      	; 0x56e <_Z13getCharKeypadi+0x24>
     56c:	5d c0       	rjmp	.+186    	; 0x628 <_Z13getCharKeypadi+0xde>
     56e:	05 97       	sbiw	r24, 0x05	; 5
     570:	09 f0       	breq	.+2      	; 0x574 <_Z13getCharKeypadi+0x2a>
     572:	cf c0       	rjmp	.+414    	; 0x712 <_Z13getCharKeypadi+0x1c8>
     574:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <MappaKeys>
     578:	8e e1       	ldi	r24, 0x1E	; 30
     57a:	9d e0       	ldi	r25, 0x0D	; 13
     57c:	0e 94 32 39 	call	0x7264	; 0x7264 <_ZN5Print5printEc>
     580:	20 e0       	ldi	r18, 0x00	; 0
     582:	30 e0       	ldi	r19, 0x00	; 0
     584:	59 c0       	rjmp	.+178    	; 0x638 <_Z13getCharKeypadi+0xee>
     586:	82 31       	cpi	r24, 0x12	; 18
     588:	91 05       	cpc	r25, r1
     58a:	09 f4       	brne	.+2      	; 0x58e <_Z13getCharKeypadi+0x44>
     58c:	73 c0       	rjmp	.+230    	; 0x674 <_Z13getCharKeypadi+0x12a>
     58e:	81 32       	cpi	r24, 0x21	; 33
     590:	91 05       	cpc	r25, r1
     592:	09 f4       	brne	.+2      	; 0x596 <_Z13getCharKeypadi+0x4c>
     594:	54 c0       	rjmp	.+168    	; 0x63e <_Z13getCharKeypadi+0xf4>
     596:	41 97       	sbiw	r24, 0x11	; 17
     598:	09 f0       	breq	.+2      	; 0x59c <_Z13getCharKeypadi+0x52>
     59a:	bb c0       	rjmp	.+374    	; 0x712 <_Z13getCharKeypadi+0x1c8>
     59c:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <MappaKeys+0x2>
     5a0:	8e e1       	ldi	r24, 0x1E	; 30
     5a2:	9d e0       	ldi	r25, 0x0D	; 13
     5a4:	0e 94 32 39 	call	0x7264	; 0x7264 <_ZN5Print5printEc>
     5a8:	22 e0       	ldi	r18, 0x02	; 2
     5aa:	30 e0       	ldi	r19, 0x00	; 0
     5ac:	45 c0       	rjmp	.+138    	; 0x638 <_Z13getCharKeypadi+0xee>
     5ae:	80 36       	cpi	r24, 0x60	; 96
     5b0:	91 05       	cpc	r25, r1
     5b2:	09 f4       	brne	.+2      	; 0x5b6 <_Z13getCharKeypadi+0x6c>
     5b4:	99 c0       	rjmp	.+306    	; 0x6e8 <_Z13getCharKeypadi+0x19e>
     5b6:	ac f4       	brge	.+42     	; 0x5e2 <_Z13getCharKeypadi+0x98>
     5b8:	88 34       	cpi	r24, 0x48	; 72
     5ba:	91 05       	cpc	r25, r1
     5bc:	09 f4       	brne	.+2      	; 0x5c0 <_Z13getCharKeypadi+0x76>
     5be:	82 c0       	rjmp	.+260    	; 0x6c4 <_Z13getCharKeypadi+0x17a>
     5c0:	80 35       	cpi	r24, 0x50	; 80
     5c2:	91 05       	cpc	r25, r1
     5c4:	09 f4       	brne	.+2      	; 0x5c8 <_Z13getCharKeypadi+0x7e>
     5c6:	87 c0       	rjmp	.+270    	; 0x6d6 <_Z13getCharKeypadi+0x18c>
     5c8:	84 34       	cpi	r24, 0x44	; 68
     5ca:	91 05       	cpc	r25, r1
     5cc:	09 f0       	breq	.+2      	; 0x5d0 <_Z13getCharKeypadi+0x86>
     5ce:	a1 c0       	rjmp	.+322    	; 0x712 <_Z13getCharKeypadi+0x1c8>
     5d0:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <MappaKeys+0xc>
     5d4:	8e e1       	ldi	r24, 0x1E	; 30
     5d6:	9d e0       	ldi	r25, 0x0D	; 13
     5d8:	0e 94 32 39 	call	0x7264	; 0x7264 <_ZN5Print5printEc>
     5dc:	20 e0       	ldi	r18, 0x00	; 0
     5de:	30 e0       	ldi	r19, 0x00	; 0
     5e0:	8b c0       	rjmp	.+278    	; 0x6f8 <_Z13getCharKeypadi+0x1ae>
     5e2:	88 38       	cpi	r24, 0x88	; 136
     5e4:	91 05       	cpc	r25, r1
     5e6:	09 f4       	brne	.+2      	; 0x5ea <_Z13getCharKeypadi+0xa0>
     5e8:	59 c0       	rjmp	.+178    	; 0x69c <_Z13getCharKeypadi+0x152>
     5ea:	6c f4       	brge	.+26     	; 0x606 <_Z13getCharKeypadi+0xbc>
     5ec:	84 38       	cpi	r24, 0x84	; 132
     5ee:	91 05       	cpc	r25, r1
     5f0:	09 f0       	breq	.+2      	; 0x5f4 <_Z13getCharKeypadi+0xaa>
     5f2:	8f c0       	rjmp	.+286    	; 0x712 <_Z13getCharKeypadi+0x1c8>
     5f4:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <MappaKeys+0x8>
     5f8:	8e e1       	ldi	r24, 0x1E	; 30
     5fa:	9d e0       	ldi	r25, 0x0D	; 13
     5fc:	0e 94 32 39 	call	0x7264	; 0x7264 <_ZN5Print5printEc>
     600:	20 e0       	ldi	r18, 0x00	; 0
     602:	30 e0       	ldi	r19, 0x00	; 0
     604:	5c c0       	rjmp	.+184    	; 0x6be <_Z13getCharKeypadi+0x174>
     606:	80 39       	cpi	r24, 0x90	; 144
     608:	91 05       	cpc	r25, r1
     60a:	09 f4       	brne	.+2      	; 0x60e <_Z13getCharKeypadi+0xc4>
     60c:	50 c0       	rjmp	.+160    	; 0x6ae <_Z13getCharKeypadi+0x164>
     60e:	80 3a       	cpi	r24, 0xA0	; 160
     610:	91 05       	cpc	r25, r1
     612:	09 f0       	breq	.+2      	; 0x616 <_Z13getCharKeypadi+0xcc>
     614:	7e c0       	rjmp	.+252    	; 0x712 <_Z13getCharKeypadi+0x1c8>
     616:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <MappaKeys+0xb>
     61a:	8e e1       	ldi	r24, 0x1E	; 30
     61c:	9d e0       	ldi	r25, 0x0D	; 13
     61e:	0e 94 32 39 	call	0x7264	; 0x7264 <_ZN5Print5printEc>
     622:	23 e0       	ldi	r18, 0x03	; 3
     624:	30 e0       	ldi	r19, 0x00	; 0
     626:	4b c0       	rjmp	.+150    	; 0x6be <_Z13getCharKeypadi+0x174>
     628:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <MappaKeys+0x1>
     62c:	8e e1       	ldi	r24, 0x1E	; 30
     62e:	9d e0       	ldi	r25, 0x0D	; 13
     630:	0e 94 32 39 	call	0x7264	; 0x7264 <_ZN5Print5printEc>
     634:	21 e0       	ldi	r18, 0x01	; 1
     636:	30 e0       	ldi	r19, 0x00	; 0
     638:	80 e0       	ldi	r24, 0x00	; 0
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	5f c0       	rjmp	.+190    	; 0x6fc <_Z13getCharKeypadi+0x1b2>
     63e:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <MappaKeys+0x3>
     642:	8e e1       	ldi	r24, 0x1E	; 30
     644:	9d e0       	ldi	r25, 0x0D	; 13
     646:	0e 94 32 39 	call	0x7264	; 0x7264 <_ZN5Print5printEc>
     64a:	23 e0       	ldi	r18, 0x03	; 3
     64c:	30 e0       	ldi	r19, 0x00	; 0
     64e:	f4 cf       	rjmp	.-24     	; 0x638 <_Z13getCharKeypadi+0xee>
     650:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <MappaKeys+0x4>
     654:	8e e1       	ldi	r24, 0x1E	; 30
     656:	9d e0       	ldi	r25, 0x0D	; 13
     658:	0e 94 32 39 	call	0x7264	; 0x7264 <_ZN5Print5printEc>
     65c:	20 e0       	ldi	r18, 0x00	; 0
     65e:	30 e0       	ldi	r19, 0x00	; 0
     660:	1a c0       	rjmp	.+52     	; 0x696 <_Z13getCharKeypadi+0x14c>
     662:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <MappaKeys+0x5>
     666:	8e e1       	ldi	r24, 0x1E	; 30
     668:	9d e0       	ldi	r25, 0x0D	; 13
     66a:	0e 94 32 39 	call	0x7264	; 0x7264 <_ZN5Print5printEc>
     66e:	21 e0       	ldi	r18, 0x01	; 1
     670:	30 e0       	ldi	r19, 0x00	; 0
     672:	11 c0       	rjmp	.+34     	; 0x696 <_Z13getCharKeypadi+0x14c>
     674:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <MappaKeys+0x6>
     678:	8e e1       	ldi	r24, 0x1E	; 30
     67a:	9d e0       	ldi	r25, 0x0D	; 13
     67c:	0e 94 32 39 	call	0x7264	; 0x7264 <_ZN5Print5printEc>
     680:	22 e0       	ldi	r18, 0x02	; 2
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	08 c0       	rjmp	.+16     	; 0x696 <_Z13getCharKeypadi+0x14c>
     686:	60 91 0d 01 	lds	r22, 0x010D	; 0x80010d <MappaKeys+0x7>
     68a:	8e e1       	ldi	r24, 0x1E	; 30
     68c:	9d e0       	ldi	r25, 0x0D	; 13
     68e:	0e 94 32 39 	call	0x7264	; 0x7264 <_ZN5Print5printEc>
     692:	23 e0       	ldi	r18, 0x03	; 3
     694:	30 e0       	ldi	r19, 0x00	; 0
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	30 c0       	rjmp	.+96     	; 0x6fc <_Z13getCharKeypadi+0x1b2>
     69c:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <MappaKeys+0x9>
     6a0:	8e e1       	ldi	r24, 0x1E	; 30
     6a2:	9d e0       	ldi	r25, 0x0D	; 13
     6a4:	0e 94 32 39 	call	0x7264	; 0x7264 <_ZN5Print5printEc>
     6a8:	21 e0       	ldi	r18, 0x01	; 1
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	08 c0       	rjmp	.+16     	; 0x6be <_Z13getCharKeypadi+0x174>
     6ae:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <MappaKeys+0xa>
     6b2:	8e e1       	ldi	r24, 0x1E	; 30
     6b4:	9d e0       	ldi	r25, 0x0D	; 13
     6b6:	0e 94 32 39 	call	0x7264	; 0x7264 <_ZN5Print5printEc>
     6ba:	22 e0       	ldi	r18, 0x02	; 2
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	82 e0       	ldi	r24, 0x02	; 2
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	1c c0       	rjmp	.+56     	; 0x6fc <_Z13getCharKeypadi+0x1b2>
     6c4:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <MappaKeys+0xd>
     6c8:	8e e1       	ldi	r24, 0x1E	; 30
     6ca:	9d e0       	ldi	r25, 0x0D	; 13
     6cc:	0e 94 32 39 	call	0x7264	; 0x7264 <_ZN5Print5printEc>
     6d0:	21 e0       	ldi	r18, 0x01	; 1
     6d2:	30 e0       	ldi	r19, 0x00	; 0
     6d4:	11 c0       	rjmp	.+34     	; 0x6f8 <_Z13getCharKeypadi+0x1ae>
     6d6:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <MappaKeys+0xe>
     6da:	8e e1       	ldi	r24, 0x1E	; 30
     6dc:	9d e0       	ldi	r25, 0x0D	; 13
     6de:	0e 94 32 39 	call	0x7264	; 0x7264 <_ZN5Print5printEc>
     6e2:	22 e0       	ldi	r18, 0x02	; 2
     6e4:	30 e0       	ldi	r19, 0x00	; 0
     6e6:	08 c0       	rjmp	.+16     	; 0x6f8 <_Z13getCharKeypadi+0x1ae>
     6e8:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <MappaKeys+0xf>
     6ec:	8e e1       	ldi	r24, 0x1E	; 30
     6ee:	9d e0       	ldi	r25, 0x0D	; 13
     6f0:	0e 94 32 39 	call	0x7264	; 0x7264 <_ZN5Print5printEc>
     6f4:	23 e0       	ldi	r18, 0x03	; 3
     6f6:	30 e0       	ldi	r19, 0x00	; 0
     6f8:	83 e0       	ldi	r24, 0x03	; 3
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	88 0f       	add	r24, r24
     6fe:	99 1f       	adc	r25, r25
     700:	88 0f       	add	r24, r24
     702:	99 1f       	adc	r25, r25
     704:	8a 5f       	subi	r24, 0xFA	; 250
     706:	9e 4f       	sbci	r25, 0xFE	; 254
     708:	fc 01       	movw	r30, r24
     70a:	e2 0f       	add	r30, r18
     70c:	f3 1f       	adc	r31, r19
     70e:	80 81       	ld	r24, Z
     710:	08 95       	ret
     712:	8e e4       	ldi	r24, 0x4E	; 78
     714:	08 95       	ret

00000716 <_Z10displayLCDP6Stringii>:
     716:	cf 93       	push	r28
     718:	df 93       	push	r29
     71a:	ec 01       	movw	r28, r24
     71c:	87 e5       	ldi	r24, 0x57	; 87
     71e:	9b e0       	ldi	r25, 0x0B	; 11
     720:	0e 94 a1 30 	call	0x6142	; 0x6142 <_ZN3LCD5clearEv>
     724:	61 e0       	ldi	r22, 0x01	; 1
     726:	87 e5       	ldi	r24, 0x57	; 87
     728:	9b e0       	ldi	r25, 0x0B	; 11
     72a:	0e 94 32 39 	call	0x7264	; 0x7264 <_ZN5Print5printEc>
     72e:	41 e0       	ldi	r20, 0x01	; 1
     730:	60 e0       	ldi	r22, 0x00	; 0
     732:	87 e5       	ldi	r24, 0x57	; 87
     734:	9b e0       	ldi	r25, 0x0B	; 11
     736:	0e 94 a7 30 	call	0x614e	; 0x614e <_ZN3LCD9setCursorEhh>
     73a:	be 01       	movw	r22, r28
     73c:	6a 5f       	subi	r22, 0xFA	; 250
     73e:	7f 4f       	sbci	r23, 0xFF	; 255
     740:	87 e5       	ldi	r24, 0x57	; 87
     742:	9b e0       	ldi	r25, 0x0B	; 11
     744:	0e 94 23 39 	call	0x7246	; 0x7246 <_ZN5Print5printERK6String>
     748:	42 e0       	ldi	r20, 0x02	; 2
     74a:	60 e0       	ldi	r22, 0x00	; 0
     74c:	87 e5       	ldi	r24, 0x57	; 87
     74e:	9b e0       	ldi	r25, 0x0B	; 11
     750:	0e 94 a7 30 	call	0x614e	; 0x614e <_ZN3LCD9setCursorEhh>
     754:	be 01       	movw	r22, r28
     756:	64 5f       	subi	r22, 0xF4	; 244
     758:	7f 4f       	sbci	r23, 0xFF	; 255
     75a:	87 e5       	ldi	r24, 0x57	; 87
     75c:	9b e0       	ldi	r25, 0x0B	; 11
     75e:	0e 94 23 39 	call	0x7246	; 0x7246 <_ZN5Print5printERK6String>
     762:	43 e0       	ldi	r20, 0x03	; 3
     764:	60 e0       	ldi	r22, 0x00	; 0
     766:	87 e5       	ldi	r24, 0x57	; 87
     768:	9b e0       	ldi	r25, 0x0B	; 11
     76a:	0e 94 a7 30 	call	0x614e	; 0x614e <_ZN3LCD9setCursorEhh>
     76e:	be 01       	movw	r22, r28
     770:	6e 5e       	subi	r22, 0xEE	; 238
     772:	7f 4f       	sbci	r23, 0xFF	; 255
     774:	87 e5       	ldi	r24, 0x57	; 87
     776:	9b e0       	ldi	r25, 0x0B	; 11
     778:	df 91       	pop	r29
     77a:	cf 91       	pop	r28
     77c:	0c 94 23 39 	jmp	0x7246	; 0x7246 <_ZN5Print5printERK6String>

00000780 <_Z11avanzaStatom>:
     780:	cf 92       	push	r12
     782:	df 92       	push	r13
     784:	ef 92       	push	r14
     786:	ff 92       	push	r15
     788:	6b 01       	movw	r12, r22
     78a:	7c 01       	movw	r14, r24
     78c:	87 e5       	ldi	r24, 0x57	; 87
     78e:	9b e0       	ldi	r25, 0x0B	; 11
     790:	0e 94 a1 30 	call	0x6142	; 0x6142 <_ZN3LCD5clearEv>
     794:	60 91 30 0b 	lds	r22, 0x0B30	; 0x800b30 <stato_procedura>
     798:	70 91 31 0b 	lds	r23, 0x0B31	; 0x800b31 <stato_procedura+0x1>
     79c:	4a e0       	ldi	r20, 0x0A	; 10
     79e:	50 e0       	ldi	r21, 0x00	; 0
     7a0:	8f ed       	ldi	r24, 0xDF	; 223
     7a2:	9a e0       	ldi	r25, 0x0A	; 10
     7a4:	b8 df       	rcall	.-144    	; 0x716 <_Z10displayLCDP6Stringii>
     7a6:	c0 92 95 0a 	sts	0x0A95, r12	; 0x800a95 <Timer>
     7aa:	d0 92 96 0a 	sts	0x0A96, r13	; 0x800a96 <Timer+0x1>
     7ae:	e0 92 97 0a 	sts	0x0A97, r14	; 0x800a97 <Timer+0x2>
     7b2:	f0 92 98 0a 	sts	0x0A98, r15	; 0x800a98 <Timer+0x3>
     7b6:	8f e1       	ldi	r24, 0x1F	; 31
     7b8:	9e e4       	ldi	r25, 0x4E	; 78
     7ba:	01 97       	sbiw	r24, 0x01	; 1
     7bc:	f1 f7       	brne	.-4      	; 0x7ba <_Z11avanzaStatom+0x3a>
     7be:	00 c0       	rjmp	.+0      	; 0x7c0 <_Z11avanzaStatom+0x40>
     7c0:	00 00       	nop
     7c2:	8f e8       	ldi	r24, 0x8F	; 143
     7c4:	9a e0       	ldi	r25, 0x0A	; 10
     7c6:	0e 94 34 23 	call	0x4668	; 0x4668 <_ZNK8DateTime11secondstimeEv>
     7ca:	60 93 99 0a 	sts	0x0A99, r22	; 0x800a99 <UltimoPassaggioStato>
     7ce:	70 93 9a 0a 	sts	0x0A9A, r23	; 0x800a9a <UltimoPassaggioStato+0x1>
     7d2:	80 93 9b 0a 	sts	0x0A9B, r24	; 0x800a9b <UltimoPassaggioStato+0x2>
     7d6:	90 93 9c 0a 	sts	0x0A9C, r25	; 0x800a9c <UltimoPassaggioStato+0x3>
     7da:	8f e1       	ldi	r24, 0x1F	; 31
     7dc:	9e e4       	ldi	r25, 0x4E	; 78
     7de:	01 97       	sbiw	r24, 0x01	; 1
     7e0:	f1 f7       	brne	.-4      	; 0x7de <_Z11avanzaStatom+0x5e>
     7e2:	00 c0       	rjmp	.+0      	; 0x7e4 <_Z11avanzaStatom+0x64>
     7e4:	00 00       	nop
     7e6:	80 91 30 0b 	lds	r24, 0x0B30	; 0x800b30 <stato_procedura>
     7ea:	90 91 31 0b 	lds	r25, 0x0B31	; 0x800b31 <stato_procedura+0x1>
     7ee:	01 96       	adiw	r24, 0x01	; 1
     7f0:	90 93 31 0b 	sts	0x0B31, r25	; 0x800b31 <stato_procedura+0x1>
     7f4:	80 93 30 0b 	sts	0x0B30, r24	; 0x800b30 <stato_procedura>
     7f8:	ff 90       	pop	r15
     7fa:	ef 90       	pop	r14
     7fc:	df 90       	pop	r13
     7fe:	cf 90       	pop	r12
     800:	08 95       	ret

00000802 <_Z16scrivi_TAG_MezzoPc>:
     802:	8f 92       	push	r8
     804:	9f 92       	push	r9
     806:	af 92       	push	r10
     808:	bf 92       	push	r11
     80a:	cf 92       	push	r12
     80c:	df 92       	push	r13
     80e:	ef 92       	push	r14
     810:	0f 93       	push	r16
     812:	1f 93       	push	r17
     814:	cf 93       	push	r28
     816:	df 93       	push	r29
     818:	cd b7       	in	r28, 0x3d	; 61
     81a:	de b7       	in	r29, 0x3e	; 62
     81c:	a2 97       	sbiw	r28, 0x22	; 34
     81e:	0f b6       	in	r0, 0x3f	; 63
     820:	f8 94       	cli
     822:	de bf       	out	0x3e, r29	; 62
     824:	0f be       	out	0x3f, r0	; 63
     826:	cd bf       	out	0x3d, r28	; 61
     828:	5c 01       	movw	r10, r24
     82a:	4b 01       	movw	r8, r22
     82c:	6c ee       	ldi	r22, 0xEC	; 236
     82e:	71 e0       	ldi	r23, 0x01	; 1
     830:	ce 01       	movw	r24, r28
     832:	4d 96       	adiw	r24, 0x1d	; 29
     834:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
     838:	08 ec       	ldi	r16, 0xC8	; 200
     83a:	10 e0       	ldi	r17, 0x00	; 0
     83c:	27 e7       	ldi	r18, 0x77	; 119
     83e:	3b e0       	ldi	r19, 0x0B	; 11
     840:	40 e7       	ldi	r20, 0x70	; 112
     842:	5b e0       	ldi	r21, 0x0B	; 11
     844:	60 e0       	ldi	r22, 0x00	; 0
     846:	80 e4       	ldi	r24, 0x40	; 64
     848:	9b e0       	ldi	r25, 0x0B	; 11
     84a:	0e 94 a7 20 	call	0x414e	; 0x414e <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j>
     84e:	80 93 78 0b 	sts	0x0B78, r24	; 0x800b78 <success>
     852:	88 23       	and	r24, r24
     854:	09 f4       	brne	.+2      	; 0x858 <_Z16scrivi_TAG_MezzoPc+0x56>
     856:	a3 c0       	rjmp	.+326    	; 0x99e <_Z16scrivi_TAG_MezzoPc+0x19c>
     858:	80 91 77 0b 	lds	r24, 0x0B77	; 0x800b77 <uidLength>
     85c:	84 30       	cpi	r24, 0x04	; 4
     85e:	09 f0       	breq	.+2      	; 0x862 <_Z16scrivi_TAG_MezzoPc+0x60>
     860:	98 c0       	rjmp	.+304    	; 0x992 <_Z16scrivi_TAG_MezzoPc+0x190>
     862:	86 e0       	ldi	r24, 0x06	; 6
     864:	e9 e6       	ldi	r30, 0x69	; 105
     866:	f1 e0       	ldi	r31, 0x01	; 1
     868:	de 01       	movw	r26, r28
     86a:	57 96       	adiw	r26, 0x17	; 23
     86c:	01 90       	ld	r0, Z+
     86e:	0d 92       	st	X+, r0
     870:	8a 95       	dec	r24
     872:	e1 f7       	brne	.-8      	; 0x86c <_Z16scrivi_TAG_MezzoPc+0x6a>
     874:	ce 01       	movw	r24, r28
     876:	47 96       	adiw	r24, 0x17	; 23
     878:	6c 01       	movw	r12, r24
     87a:	e1 2c       	mov	r14, r1
     87c:	04 e0       	ldi	r16, 0x04	; 4
     87e:	10 e0       	ldi	r17, 0x00	; 0
     880:	20 e0       	ldi	r18, 0x00	; 0
     882:	30 e0       	ldi	r19, 0x00	; 0
     884:	44 e0       	ldi	r20, 0x04	; 4
     886:	60 e7       	ldi	r22, 0x70	; 112
     888:	7b e0       	ldi	r23, 0x0B	; 11
     88a:	80 e4       	ldi	r24, 0x40	; 64
     88c:	9b e0       	ldi	r25, 0x0B	; 11
     88e:	0e 94 fb 20 	call	0x41f6	; 0x41f6 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_>
     892:	80 93 78 0b 	sts	0x0B78, r24	; 0x800b78 <success>
     896:	88 23       	and	r24, r24
     898:	09 f4       	brne	.+2      	; 0x89c <_Z16scrivi_TAG_MezzoPc+0x9a>
     89a:	6b c0       	rjmp	.+214    	; 0x972 <_Z16scrivi_TAG_MezzoPc+0x170>
     89c:	80 e1       	ldi	r24, 0x10	; 16
     89e:	f4 01       	movw	r30, r8
     8a0:	de 01       	movw	r26, r28
     8a2:	11 96       	adiw	r26, 0x01	; 1
     8a4:	01 90       	ld	r0, Z+
     8a6:	0d 92       	st	X+, r0
     8a8:	8a 95       	dec	r24
     8aa:	e1 f7       	brne	.-8      	; 0x8a4 <_Z16scrivi_TAG_MezzoPc+0xa2>
     8ac:	ae 01       	movw	r20, r28
     8ae:	4f 5f       	subi	r20, 0xFF	; 255
     8b0:	5f 4f       	sbci	r21, 0xFF	; 255
     8b2:	64 e0       	ldi	r22, 0x04	; 4
     8b4:	80 e4       	ldi	r24, 0x40	; 64
     8b6:	9b e0       	ldi	r25, 0x0B	; 11
     8b8:	0e 94 8e 21 	call	0x431c	; 0x431c <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh>
     8bc:	80 93 78 0b 	sts	0x0B78, r24	; 0x800b78 <success>
     8c0:	9f ef       	ldi	r25, 0xFF	; 255
     8c2:	21 ee       	ldi	r18, 0xE1	; 225
     8c4:	84 e0       	ldi	r24, 0x04	; 4
     8c6:	91 50       	subi	r25, 0x01	; 1
     8c8:	20 40       	sbci	r18, 0x00	; 0
     8ca:	80 40       	sbci	r24, 0x00	; 0
     8cc:	e1 f7       	brne	.-8      	; 0x8c6 <_Z16scrivi_TAG_MezzoPc+0xc4>
     8ce:	00 c0       	rjmp	.+0      	; 0x8d0 <_Z16scrivi_TAG_MezzoPc+0xce>
     8d0:	00 00       	nop
     8d2:	ae 01       	movw	r20, r28
     8d4:	4f 5f       	subi	r20, 0xFF	; 255
     8d6:	5f 4f       	sbci	r21, 0xFF	; 255
     8d8:	64 e0       	ldi	r22, 0x04	; 4
     8da:	80 e4       	ldi	r24, 0x40	; 64
     8dc:	9b e0       	ldi	r25, 0x0B	; 11
     8de:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh>
     8e2:	80 93 78 0b 	sts	0x0B78, r24	; 0x800b78 <success>
     8e6:	6e e4       	ldi	r22, 0x4E	; 78
     8e8:	72 e0       	ldi	r23, 0x02	; 2
     8ea:	8e e1       	ldi	r24, 0x1E	; 30
     8ec:	9d e0       	ldi	r25, 0x0D	; 13
     8ee:	0e 94 5c 39 	call	0x72b8	; 0x72b8 <_ZN5Print7printlnEPKc>
     8f2:	be 01       	movw	r22, r28
     8f4:	6f 5f       	subi	r22, 0xFF	; 255
     8f6:	7f 4f       	sbci	r23, 0xFF	; 255
     8f8:	ce 01       	movw	r24, r28
     8fa:	41 96       	adiw	r24, 0x11	; 17
     8fc:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
     900:	80 91 78 0b 	lds	r24, 0x0B78	; 0x800b78 <success>
     904:	88 23       	and	r24, r24
     906:	01 f1       	breq	.+64     	; 0x948 <_Z16scrivi_TAG_MezzoPc+0x146>
     908:	be 01       	movw	r22, r28
     90a:	6f 5e       	subi	r22, 0xEF	; 239
     90c:	7f 4f       	sbci	r23, 0xFF	; 255
     90e:	8e e1       	ldi	r24, 0x1E	; 30
     910:	9d e0       	ldi	r25, 0x0D	; 13
     912:	0e 94 4c 39 	call	0x7298	; 0x7298 <_ZN5Print7printlnERK6String>
     916:	8d 89       	ldd	r24, Y+21	; 0x15
     918:	9e 89       	ldd	r25, Y+22	; 0x16
     91a:	06 97       	sbiw	r24, 0x06	; 6
     91c:	59 f4       	brne	.+22     	; 0x934 <_Z16scrivi_TAG_MezzoPc+0x132>
     91e:	be 01       	movw	r22, r28
     920:	6f 5e       	subi	r22, 0xEF	; 239
     922:	7f 4f       	sbci	r23, 0xFF	; 255
     924:	c5 01       	movw	r24, r10
     926:	0e 94 46 3c 	call	0x788c	; 0x788c <_ZN6StringC1EOS_>
     92a:	ce 01       	movw	r24, r28
     92c:	41 96       	adiw	r24, 0x11	; 17
     92e:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
     932:	3b c0       	rjmp	.+118    	; 0x9aa <_Z16scrivi_TAG_MezzoPc+0x1a8>
     934:	9f ef       	ldi	r25, 0xFF	; 255
     936:	21 ee       	ldi	r18, 0xE1	; 225
     938:	84 e0       	ldi	r24, 0x04	; 4
     93a:	91 50       	subi	r25, 0x01	; 1
     93c:	20 40       	sbci	r18, 0x00	; 0
     93e:	80 40       	sbci	r24, 0x00	; 0
     940:	e1 f7       	brne	.-8      	; 0x93a <_Z16scrivi_TAG_MezzoPc+0x138>
     942:	00 c0       	rjmp	.+0      	; 0x944 <_Z16scrivi_TAG_MezzoPc+0x142>
     944:	00 00       	nop
     946:	10 c0       	rjmp	.+32     	; 0x968 <_Z16scrivi_TAG_MezzoPc+0x166>
     948:	87 e5       	ldi	r24, 0x57	; 87
     94a:	9b e0       	ldi	r25, 0x0B	; 11
     94c:	0e 94 a1 30 	call	0x6142	; 0x6142 <_ZN3LCD5clearEv>
     950:	41 e0       	ldi	r20, 0x01	; 1
     952:	60 e0       	ldi	r22, 0x00	; 0
     954:	87 e5       	ldi	r24, 0x57	; 87
     956:	9b e0       	ldi	r25, 0x0B	; 11
     958:	0e 94 a7 30 	call	0x614e	; 0x614e <_ZN3LCD9setCursorEhh>
     95c:	6c e5       	ldi	r22, 0x5C	; 92
     95e:	72 e0       	ldi	r23, 0x02	; 2
     960:	87 e5       	ldi	r24, 0x57	; 87
     962:	9b e0       	ldi	r25, 0x0B	; 11
     964:	0e 94 31 39 	call	0x7262	; 0x7262 <_ZN5Print5printEPKc>
     968:	ce 01       	movw	r24, r28
     96a:	41 96       	adiw	r24, 0x11	; 17
     96c:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
     970:	10 c0       	rjmp	.+32     	; 0x992 <_Z16scrivi_TAG_MezzoPc+0x190>
     972:	87 e5       	ldi	r24, 0x57	; 87
     974:	9b e0       	ldi	r25, 0x0B	; 11
     976:	0e 94 a1 30 	call	0x6142	; 0x6142 <_ZN3LCD5clearEv>
     97a:	41 e0       	ldi	r20, 0x01	; 1
     97c:	60 e0       	ldi	r22, 0x00	; 0
     97e:	87 e5       	ldi	r24, 0x57	; 87
     980:	9b e0       	ldi	r25, 0x0B	; 11
     982:	0e 94 a7 30 	call	0x614e	; 0x614e <_ZN3LCD9setCursorEhh>
     986:	66 e6       	ldi	r22, 0x66	; 102
     988:	72 e0       	ldi	r23, 0x02	; 2
     98a:	87 e5       	ldi	r24, 0x57	; 87
     98c:	9b e0       	ldi	r25, 0x0B	; 11
     98e:	0e 94 31 39 	call	0x7262	; 0x7262 <_ZN5Print5printEPKc>
     992:	6c ee       	ldi	r22, 0xEC	; 236
     994:	71 e0       	ldi	r23, 0x01	; 1
     996:	8e e1       	ldi	r24, 0x1E	; 30
     998:	9d e0       	ldi	r25, 0x0D	; 13
     99a:	0e 94 5c 39 	call	0x72b8	; 0x72b8 <_ZN5Print7printlnEPKc>
     99e:	be 01       	movw	r22, r28
     9a0:	63 5e       	subi	r22, 0xE3	; 227
     9a2:	7f 4f       	sbci	r23, 0xFF	; 255
     9a4:	c5 01       	movw	r24, r10
     9a6:	0e 94 46 3c 	call	0x788c	; 0x788c <_ZN6StringC1EOS_>
     9aa:	ce 01       	movw	r24, r28
     9ac:	4d 96       	adiw	r24, 0x1d	; 29
     9ae:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
     9b2:	c5 01       	movw	r24, r10
     9b4:	a2 96       	adiw	r28, 0x22	; 34
     9b6:	0f b6       	in	r0, 0x3f	; 63
     9b8:	f8 94       	cli
     9ba:	de bf       	out	0x3e, r29	; 62
     9bc:	0f be       	out	0x3f, r0	; 63
     9be:	cd bf       	out	0x3d, r28	; 61
     9c0:	df 91       	pop	r29
     9c2:	cf 91       	pop	r28
     9c4:	1f 91       	pop	r17
     9c6:	0f 91       	pop	r16
     9c8:	ef 90       	pop	r14
     9ca:	df 90       	pop	r13
     9cc:	cf 90       	pop	r12
     9ce:	bf 90       	pop	r11
     9d0:	af 90       	pop	r10
     9d2:	9f 90       	pop	r9
     9d4:	8f 90       	pop	r8
     9d6:	08 95       	ret

000009d8 <_Z14leggiTAG_Mezzob>:
     9d8:	af 92       	push	r10
     9da:	bf 92       	push	r11
     9dc:	cf 92       	push	r12
     9de:	df 92       	push	r13
     9e0:	ef 92       	push	r14
     9e2:	ff 92       	push	r15
     9e4:	0f 93       	push	r16
     9e6:	1f 93       	push	r17
     9e8:	cf 93       	push	r28
     9ea:	df 93       	push	r29
     9ec:	cd b7       	in	r28, 0x3d	; 61
     9ee:	de b7       	in	r29, 0x3e	; 62
     9f0:	a2 97       	sbiw	r28, 0x22	; 34
     9f2:	0f b6       	in	r0, 0x3f	; 63
     9f4:	f8 94       	cli
     9f6:	de bf       	out	0x3e, r29	; 62
     9f8:	0f be       	out	0x3f, r0	; 63
     9fa:	cd bf       	out	0x3d, r28	; 61
     9fc:	5c 01       	movw	r10, r24
     9fe:	f6 2e       	mov	r15, r22
     a00:	6c ee       	ldi	r22, 0xEC	; 236
     a02:	71 e0       	ldi	r23, 0x01	; 1
     a04:	ce 01       	movw	r24, r28
     a06:	4d 96       	adiw	r24, 0x1d	; 29
     a08:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
     a0c:	08 ec       	ldi	r16, 0xC8	; 200
     a0e:	10 e0       	ldi	r17, 0x00	; 0
     a10:	27 e7       	ldi	r18, 0x77	; 119
     a12:	3b e0       	ldi	r19, 0x0B	; 11
     a14:	40 e7       	ldi	r20, 0x70	; 112
     a16:	5b e0       	ldi	r21, 0x0B	; 11
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	80 e4       	ldi	r24, 0x40	; 64
     a1c:	9b e0       	ldi	r25, 0x0B	; 11
     a1e:	0e 94 a7 20 	call	0x414e	; 0x414e <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j>
     a22:	80 93 78 0b 	sts	0x0B78, r24	; 0x800b78 <success>
     a26:	88 23       	and	r24, r24
     a28:	09 f4       	brne	.+2      	; 0xa2c <_Z14leggiTAG_Mezzob+0x54>
     a2a:	9d c0       	rjmp	.+314    	; 0xb66 <_Z14leggiTAG_Mezzob+0x18e>
     a2c:	4e e1       	ldi	r20, 0x1E	; 30
     a2e:	50 e0       	ldi	r21, 0x00	; 0
     a30:	60 e0       	ldi	r22, 0x00	; 0
     a32:	70 e0       	ldi	r23, 0x00	; 0
     a34:	82 e0       	ldi	r24, 0x02	; 2
     a36:	61 dd       	rcall	.-1342   	; 0x4fa <_Z6Buzzerhm>
     a38:	80 91 77 0b 	lds	r24, 0x0B77	; 0x800b77 <uidLength>
     a3c:	84 30       	cpi	r24, 0x04	; 4
     a3e:	09 f0       	breq	.+2      	; 0xa42 <_Z14leggiTAG_Mezzob+0x6a>
     a40:	8c c0       	rjmp	.+280    	; 0xb5a <_Z14leggiTAG_Mezzob+0x182>
     a42:	86 e0       	ldi	r24, 0x06	; 6
     a44:	e9 e6       	ldi	r30, 0x69	; 105
     a46:	f1 e0       	ldi	r31, 0x01	; 1
     a48:	de 01       	movw	r26, r28
     a4a:	57 96       	adiw	r26, 0x17	; 23
     a4c:	01 90       	ld	r0, Z+
     a4e:	0d 92       	st	X+, r0
     a50:	8a 95       	dec	r24
     a52:	e1 f7       	brne	.-8      	; 0xa4c <_Z14leggiTAG_Mezzob+0x74>
     a54:	ce 01       	movw	r24, r28
     a56:	47 96       	adiw	r24, 0x17	; 23
     a58:	6c 01       	movw	r12, r24
     a5a:	e1 2c       	mov	r14, r1
     a5c:	04 e0       	ldi	r16, 0x04	; 4
     a5e:	10 e0       	ldi	r17, 0x00	; 0
     a60:	20 e0       	ldi	r18, 0x00	; 0
     a62:	30 e0       	ldi	r19, 0x00	; 0
     a64:	44 e0       	ldi	r20, 0x04	; 4
     a66:	60 e7       	ldi	r22, 0x70	; 112
     a68:	7b e0       	ldi	r23, 0x0B	; 11
     a6a:	80 e4       	ldi	r24, 0x40	; 64
     a6c:	9b e0       	ldi	r25, 0x0B	; 11
     a6e:	0e 94 fb 20 	call	0x41f6	; 0x41f6 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_>
     a72:	80 93 78 0b 	sts	0x0B78, r24	; 0x800b78 <success>
     a76:	88 23       	and	r24, r24
     a78:	09 f4       	brne	.+2      	; 0xa7c <_Z14leggiTAG_Mezzob+0xa4>
     a7a:	5f c0       	rjmp	.+190    	; 0xb3a <_Z14leggiTAG_Mezzob+0x162>
     a7c:	ff 20       	and	r15, r15
     a7e:	99 f0       	breq	.+38     	; 0xaa6 <_Z14leggiTAG_Mezzob+0xce>
     a80:	80 e1       	ldi	r24, 0x10	; 16
     a82:	ef eb       	ldi	r30, 0xBF	; 191
     a84:	f9 e0       	ldi	r31, 0x09	; 9
     a86:	de 01       	movw	r26, r28
     a88:	11 96       	adiw	r26, 0x01	; 1
     a8a:	01 90       	ld	r0, Z+
     a8c:	0d 92       	st	X+, r0
     a8e:	8a 95       	dec	r24
     a90:	e1 f7       	brne	.-8      	; 0xa8a <_Z14leggiTAG_Mezzob+0xb2>
     a92:	ae 01       	movw	r20, r28
     a94:	4f 5f       	subi	r20, 0xFF	; 255
     a96:	5f 4f       	sbci	r21, 0xFF	; 255
     a98:	64 e0       	ldi	r22, 0x04	; 4
     a9a:	80 e4       	ldi	r24, 0x40	; 64
     a9c:	9b e0       	ldi	r25, 0x0B	; 11
     a9e:	0e 94 8e 21 	call	0x431c	; 0x431c <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh>
     aa2:	80 93 78 0b 	sts	0x0B78, r24	; 0x800b78 <success>
     aa6:	ae 01       	movw	r20, r28
     aa8:	4f 5f       	subi	r20, 0xFF	; 255
     aaa:	5f 4f       	sbci	r21, 0xFF	; 255
     aac:	64 e0       	ldi	r22, 0x04	; 4
     aae:	80 e4       	ldi	r24, 0x40	; 64
     ab0:	9b e0       	ldi	r25, 0x0B	; 11
     ab2:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh>
     ab6:	80 93 78 0b 	sts	0x0B78, r24	; 0x800b78 <success>
     aba:	88 23       	and	r24, r24
     abc:	89 f1       	breq	.+98     	; 0xb20 <_Z14leggiTAG_Mezzob+0x148>
     abe:	6e e4       	ldi	r22, 0x4E	; 78
     ac0:	72 e0       	ldi	r23, 0x02	; 2
     ac2:	8e e1       	ldi	r24, 0x1E	; 30
     ac4:	9d e0       	ldi	r25, 0x0D	; 13
     ac6:	0e 94 5c 39 	call	0x72b8	; 0x72b8 <_ZN5Print7printlnEPKc>
     aca:	be 01       	movw	r22, r28
     acc:	6f 5f       	subi	r22, 0xFF	; 255
     ace:	7f 4f       	sbci	r23, 0xFF	; 255
     ad0:	ce 01       	movw	r24, r28
     ad2:	41 96       	adiw	r24, 0x11	; 17
     ad4:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
     ad8:	be 01       	movw	r22, r28
     ada:	6f 5e       	subi	r22, 0xEF	; 239
     adc:	7f 4f       	sbci	r23, 0xFF	; 255
     ade:	8e e1       	ldi	r24, 0x1E	; 30
     ae0:	9d e0       	ldi	r25, 0x0D	; 13
     ae2:	0e 94 4c 39 	call	0x7298	; 0x7298 <_ZN5Print7printlnERK6String>
     ae6:	8d 89       	ldd	r24, Y+21	; 0x15
     ae8:	9e 89       	ldd	r25, Y+22	; 0x16
     aea:	06 97       	sbiw	r24, 0x06	; 6
     aec:	59 f4       	brne	.+22     	; 0xb04 <_Z14leggiTAG_Mezzob+0x12c>
     aee:	be 01       	movw	r22, r28
     af0:	6f 5e       	subi	r22, 0xEF	; 239
     af2:	7f 4f       	sbci	r23, 0xFF	; 255
     af4:	c5 01       	movw	r24, r10
     af6:	0e 94 46 3c 	call	0x788c	; 0x788c <_ZN6StringC1EOS_>
     afa:	ce 01       	movw	r24, r28
     afc:	41 96       	adiw	r24, 0x11	; 17
     afe:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
     b02:	37 c0       	rjmp	.+110    	; 0xb72 <_Z14leggiTAG_Mezzob+0x19a>
     b04:	9f ef       	ldi	r25, 0xFF	; 255
     b06:	21 ee       	ldi	r18, 0xE1	; 225
     b08:	84 e0       	ldi	r24, 0x04	; 4
     b0a:	91 50       	subi	r25, 0x01	; 1
     b0c:	20 40       	sbci	r18, 0x00	; 0
     b0e:	80 40       	sbci	r24, 0x00	; 0
     b10:	e1 f7       	brne	.-8      	; 0xb0a <_Z14leggiTAG_Mezzob+0x132>
     b12:	00 c0       	rjmp	.+0      	; 0xb14 <_Z14leggiTAG_Mezzob+0x13c>
     b14:	00 00       	nop
     b16:	ce 01       	movw	r24, r28
     b18:	41 96       	adiw	r24, 0x11	; 17
     b1a:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
     b1e:	1d c0       	rjmp	.+58     	; 0xb5a <_Z14leggiTAG_Mezzob+0x182>
     b20:	87 e5       	ldi	r24, 0x57	; 87
     b22:	9b e0       	ldi	r25, 0x0B	; 11
     b24:	0e 94 a1 30 	call	0x6142	; 0x6142 <_ZN3LCD5clearEv>
     b28:	41 e0       	ldi	r20, 0x01	; 1
     b2a:	60 e0       	ldi	r22, 0x00	; 0
     b2c:	87 e5       	ldi	r24, 0x57	; 87
     b2e:	9b e0       	ldi	r25, 0x0B	; 11
     b30:	0e 94 a7 30 	call	0x614e	; 0x614e <_ZN3LCD9setCursorEhh>
     b34:	6e e6       	ldi	r22, 0x6E	; 110
     b36:	72 e0       	ldi	r23, 0x02	; 2
     b38:	0c c0       	rjmp	.+24     	; 0xb52 <_Z14leggiTAG_Mezzob+0x17a>
     b3a:	87 e5       	ldi	r24, 0x57	; 87
     b3c:	9b e0       	ldi	r25, 0x0B	; 11
     b3e:	0e 94 a1 30 	call	0x6142	; 0x6142 <_ZN3LCD5clearEv>
     b42:	41 e0       	ldi	r20, 0x01	; 1
     b44:	60 e0       	ldi	r22, 0x00	; 0
     b46:	87 e5       	ldi	r24, 0x57	; 87
     b48:	9b e0       	ldi	r25, 0x0B	; 11
     b4a:	0e 94 a7 30 	call	0x614e	; 0x614e <_ZN3LCD9setCursorEhh>
     b4e:	6b e7       	ldi	r22, 0x7B	; 123
     b50:	72 e0       	ldi	r23, 0x02	; 2
     b52:	87 e5       	ldi	r24, 0x57	; 87
     b54:	9b e0       	ldi	r25, 0x0B	; 11
     b56:	0e 94 31 39 	call	0x7262	; 0x7262 <_ZN5Print5printEPKc>
     b5a:	6c ee       	ldi	r22, 0xEC	; 236
     b5c:	71 e0       	ldi	r23, 0x01	; 1
     b5e:	8e e1       	ldi	r24, 0x1E	; 30
     b60:	9d e0       	ldi	r25, 0x0D	; 13
     b62:	0e 94 5c 39 	call	0x72b8	; 0x72b8 <_ZN5Print7printlnEPKc>
     b66:	be 01       	movw	r22, r28
     b68:	63 5e       	subi	r22, 0xE3	; 227
     b6a:	7f 4f       	sbci	r23, 0xFF	; 255
     b6c:	c5 01       	movw	r24, r10
     b6e:	0e 94 46 3c 	call	0x788c	; 0x788c <_ZN6StringC1EOS_>
     b72:	ce 01       	movw	r24, r28
     b74:	4d 96       	adiw	r24, 0x1d	; 29
     b76:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
     b7a:	c5 01       	movw	r24, r10
     b7c:	a2 96       	adiw	r28, 0x22	; 34
     b7e:	0f b6       	in	r0, 0x3f	; 63
     b80:	f8 94       	cli
     b82:	de bf       	out	0x3e, r29	; 62
     b84:	0f be       	out	0x3f, r0	; 63
     b86:	cd bf       	out	0x3d, r28	; 61
     b88:	df 91       	pop	r29
     b8a:	cf 91       	pop	r28
     b8c:	1f 91       	pop	r17
     b8e:	0f 91       	pop	r16
     b90:	ff 90       	pop	r15
     b92:	ef 90       	pop	r14
     b94:	df 90       	pop	r13
     b96:	cf 90       	pop	r12
     b98:	bf 90       	pop	r11
     b9a:	af 90       	pop	r10
     b9c:	08 95       	ret

00000b9e <_Z14GetCodeRfidATev>:
     b9e:	cf 92       	push	r12
     ba0:	df 92       	push	r13
     ba2:	ef 92       	push	r14
     ba4:	ff 92       	push	r15
     ba6:	0f 93       	push	r16
     ba8:	1f 93       	push	r17
     baa:	cf 93       	push	r28
     bac:	df 93       	push	r29
     bae:	cd b7       	in	r28, 0x3d	; 61
     bb0:	de b7       	in	r29, 0x3e	; 62
     bb2:	64 97       	sbiw	r28, 0x14	; 20
     bb4:	0f b6       	in	r0, 0x3f	; 63
     bb6:	f8 94       	cli
     bb8:	de bf       	out	0x3e, r29	; 62
     bba:	0f be       	out	0x3f, r0	; 63
     bbc:	cd bf       	out	0x3d, r28	; 61
     bbe:	7c 01       	movw	r14, r24
     bc0:	ce 01       	movw	r24, r28
     bc2:	01 96       	adiw	r24, 0x01	; 1
     bc4:	6c 01       	movw	r12, r24
     bc6:	87 e0       	ldi	r24, 0x07	; 7
     bc8:	f6 01       	movw	r30, r12
     bca:	11 92       	st	Z+, r1
     bcc:	8a 95       	dec	r24
     bce:	e9 f7       	brne	.-6      	; 0xbca <_Z14GetCodeRfidATev+0x2c>
     bd0:	69 e8       	ldi	r22, 0x89	; 137
     bd2:	72 e0       	ldi	r23, 0x02	; 2
     bd4:	c7 01       	movw	r24, r14
     bd6:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
     bda:	00 e0       	ldi	r16, 0x00	; 0
     bdc:	10 e0       	ldi	r17, 0x00	; 0
     bde:	9e 01       	movw	r18, r28
     be0:	2c 5e       	subi	r18, 0xEC	; 236
     be2:	3f 4f       	sbci	r19, 0xFF	; 255
     be4:	a6 01       	movw	r20, r12
     be6:	60 e0       	ldi	r22, 0x00	; 0
     be8:	80 e4       	ldi	r24, 0x40	; 64
     bea:	9b e0       	ldi	r25, 0x0B	; 11
     bec:	0e 94 a7 20 	call	0x414e	; 0x414e <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j>
     bf0:	88 23       	and	r24, r24
     bf2:	59 f1       	breq	.+86     	; 0xc4a <_Z14GetCodeRfidATev+0xac>
     bf4:	0c 89       	ldd	r16, Y+20	; 0x14
     bf6:	10 e0       	ldi	r17, 0x00	; 0
     bf8:	20 e0       	ldi	r18, 0x00	; 0
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	a6 01       	movw	r20, r12
     bfe:	60 e4       	ldi	r22, 0x40	; 64
     c00:	7b e0       	ldi	r23, 0x0B	; 11
     c02:	ce 01       	movw	r24, r28
     c04:	0e 96       	adiw	r24, 0x0e	; 14
     c06:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <_ZN9NFC_PN53210GetHexCodeEPKhm>
     c0a:	ce 01       	movw	r24, r28
     c0c:	0e 96       	adiw	r24, 0x0e	; 14
     c0e:	0e 94 8f 3e 	call	0x7d1e	; 0x7d1e <_ZN6String4trimEv>
     c12:	28 e0       	ldi	r18, 0x08	; 8
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	40 e0       	ldi	r20, 0x00	; 0
     c18:	50 e0       	ldi	r21, 0x00	; 0
     c1a:	be 01       	movw	r22, r28
     c1c:	62 5f       	subi	r22, 0xF2	; 242
     c1e:	7f 4f       	sbci	r23, 0xFF	; 255
     c20:	ce 01       	movw	r24, r28
     c22:	08 96       	adiw	r24, 0x08	; 8
     c24:	0e 94 4c 3e 	call	0x7c98	; 0x7c98 <_ZNK6String9substringEjj>
     c28:	be 01       	movw	r22, r28
     c2a:	68 5f       	subi	r22, 0xF8	; 248
     c2c:	7f 4f       	sbci	r23, 0xFF	; 255
     c2e:	c7 01       	movw	r24, r14
     c30:	0e 94 6b 3c 	call	0x78d6	; 0x78d6 <_ZN6StringaSEOS_>
     c34:	ce 01       	movw	r24, r28
     c36:	08 96       	adiw	r24, 0x08	; 8
     c38:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	80 93 6f 0b 	sts	0x0B6F, r24	; 0x800b6f <alreadyTimbrata>
     c42:	ce 01       	movw	r24, r28
     c44:	0e 96       	adiw	r24, 0x0e	; 14
     c46:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
     c4a:	c7 01       	movw	r24, r14
     c4c:	64 96       	adiw	r28, 0x14	; 20
     c4e:	0f b6       	in	r0, 0x3f	; 63
     c50:	f8 94       	cli
     c52:	de bf       	out	0x3e, r29	; 62
     c54:	0f be       	out	0x3f, r0	; 63
     c56:	cd bf       	out	0x3d, r28	; 61
     c58:	df 91       	pop	r29
     c5a:	cf 91       	pop	r28
     c5c:	1f 91       	pop	r17
     c5e:	0f 91       	pop	r16
     c60:	ff 90       	pop	r15
     c62:	ef 90       	pop	r14
     c64:	df 90       	pop	r13
     c66:	cf 90       	pop	r12
     c68:	08 95       	ret

00000c6a <_Z19GetHTTPResponseCode6String>:
     c6a:	ef 92       	push	r14
     c6c:	ff 92       	push	r15
     c6e:	0f 93       	push	r16
     c70:	1f 93       	push	r17
     c72:	cf 93       	push	r28
     c74:	df 93       	push	r29
     c76:	cd b7       	in	r28, 0x3d	; 61
     c78:	de b7       	in	r29, 0x3e	; 62
     c7a:	62 97       	sbiw	r28, 0x12	; 18
     c7c:	0f b6       	in	r0, 0x3f	; 63
     c7e:	f8 94       	cli
     c80:	de bf       	out	0x3e, r29	; 62
     c82:	0f be       	out	0x3f, r0	; 63
     c84:	cd bf       	out	0x3d, r28	; 61
     c86:	8c 01       	movw	r16, r24
     c88:	7b 01       	movw	r14, r22
     c8a:	60 e9       	ldi	r22, 0x90	; 144
     c8c:	72 e0       	ldi	r23, 0x02	; 2
     c8e:	ce 01       	movw	r24, r28
     c90:	0d 96       	adiw	r24, 0x0d	; 13
     c92:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
     c96:	be db       	rcall	.-2180   	; 0x414 <_Z9printLinev>
     c98:	68 e9       	ldi	r22, 0x98	; 152
     c9a:	72 e0       	ldi	r23, 0x02	; 2
     c9c:	8e e1       	ldi	r24, 0x1E	; 30
     c9e:	9d e0       	ldi	r25, 0x0D	; 13
     ca0:	0e 94 5c 39 	call	0x72b8	; 0x72b8 <_ZN5Print7printlnEPKc>
     ca4:	20 91 51 01 	lds	r18, 0x0151	; 0x800151 <HTTP_len_response>
     ca8:	30 91 52 01 	lds	r19, 0x0152	; 0x800152 <HTTP_len_response+0x1>
     cac:	f7 01       	movw	r30, r14
     cae:	84 81       	ldd	r24, Z+4	; 0x04
     cb0:	95 81       	ldd	r25, Z+5	; 0x05
     cb2:	28 17       	cp	r18, r24
     cb4:	39 07       	cpc	r19, r25
     cb6:	49 f5       	brne	.+82     	; 0xd0a <_Z19GetHTTPResponseCode6String+0xa0>
     cb8:	a9 01       	movw	r20, r18
     cba:	43 50       	subi	r20, 0x03	; 3
     cbc:	51 09       	sbc	r21, r1
     cbe:	b7 01       	movw	r22, r14
     cc0:	ce 01       	movw	r24, r28
     cc2:	07 96       	adiw	r24, 0x07	; 7
     cc4:	0e 94 4c 3e 	call	0x7c98	; 0x7c98 <_ZNK6String9substringEjj>
     cc8:	60 eb       	ldi	r22, 0xB0	; 176
     cca:	72 e0       	ldi	r23, 0x02	; 2
     ccc:	ce 01       	movw	r24, r28
     cce:	01 96       	adiw	r24, 0x01	; 1
     cd0:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
     cd4:	be 01       	movw	r22, r28
     cd6:	69 5f       	subi	r22, 0xF9	; 249
     cd8:	7f 4f       	sbci	r23, 0xFF	; 255
     cda:	ce 01       	movw	r24, r28
     cdc:	01 96       	adiw	r24, 0x01	; 1
     cde:	0e 94 cc 3d 	call	0x7b98	; 0x7b98 <_ZplRK15StringSumHelperRK6String>
     ce2:	bc 01       	movw	r22, r24
     ce4:	8e e1       	ldi	r24, 0x1E	; 30
     ce6:	9d e0       	ldi	r25, 0x0D	; 13
     ce8:	0e 94 4c 39 	call	0x7298	; 0x7298 <_ZN5Print7printlnERK6String>
     cec:	ce 01       	movw	r24, r28
     cee:	01 96       	adiw	r24, 0x01	; 1
     cf0:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
     cf4:	be 01       	movw	r22, r28
     cf6:	69 5f       	subi	r22, 0xF9	; 249
     cf8:	7f 4f       	sbci	r23, 0xFF	; 255
     cfa:	c8 01       	movw	r24, r16
     cfc:	0e 94 46 3c 	call	0x788c	; 0x788c <_ZN6StringC1EOS_>
     d00:	ce 01       	movw	r24, r28
     d02:	07 96       	adiw	r24, 0x07	; 7
     d04:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
     d08:	09 c0       	rjmp	.+18     	; 0xd1c <_Z19GetHTTPResponseCode6String+0xb2>
     d0a:	80 e0       	ldi	r24, 0x00	; 0
     d0c:	a7 db       	rcall	.-2226   	; 0x45c <_Z4passb>
     d0e:	82 db       	rcall	.-2300   	; 0x414 <_Z9printLinev>
     d10:	be 01       	movw	r22, r28
     d12:	63 5f       	subi	r22, 0xF3	; 243
     d14:	7f 4f       	sbci	r23, 0xFF	; 255
     d16:	c8 01       	movw	r24, r16
     d18:	0e 94 46 3c 	call	0x788c	; 0x788c <_ZN6StringC1EOS_>
     d1c:	ce 01       	movw	r24, r28
     d1e:	0d 96       	adiw	r24, 0x0d	; 13
     d20:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
     d24:	c8 01       	movw	r24, r16
     d26:	62 96       	adiw	r28, 0x12	; 18
     d28:	0f b6       	in	r0, 0x3f	; 63
     d2a:	f8 94       	cli
     d2c:	de bf       	out	0x3e, r29	; 62
     d2e:	0f be       	out	0x3f, r0	; 63
     d30:	cd bf       	out	0x3d, r28	; 61
     d32:	df 91       	pop	r29
     d34:	cf 91       	pop	r28
     d36:	1f 91       	pop	r17
     d38:	0f 91       	pop	r16
     d3a:	ff 90       	pop	r15
     d3c:	ef 90       	pop	r14
     d3e:	08 95       	ret

00000d40 <_Z11GetAteCheckiPc14EthernetClient6String>:
     d40:	af 92       	push	r10
     d42:	bf 92       	push	r11
     d44:	cf 92       	push	r12
     d46:	df 92       	push	r13
     d48:	ef 92       	push	r14
     d4a:	ff 92       	push	r15
     d4c:	0f 93       	push	r16
     d4e:	1f 93       	push	r17
     d50:	cf 93       	push	r28
     d52:	df 93       	push	r29
     d54:	cd b7       	in	r28, 0x3d	; 61
     d56:	de b7       	in	r29, 0x3e	; 62
     d58:	62 97       	sbiw	r28, 0x12	; 18
     d5a:	0f b6       	in	r0, 0x3f	; 63
     d5c:	f8 94       	cli
     d5e:	de bf       	out	0x3e, r29	; 62
     d60:	0f be       	out	0x3f, r0	; 63
     d62:	cd bf       	out	0x3d, r28	; 61
     d64:	5c 01       	movw	r10, r24
     d66:	7b 01       	movw	r14, r22
     d68:	8a 01       	movw	r16, r20
     d6a:	69 01       	movw	r12, r18
     d6c:	53 db       	rcall	.-2394   	; 0x414 <_Z9printLinev>
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	64 db       	rcall	.-2360   	; 0x43a <_Z8printTabh>
     d72:	6a e9       	ldi	r22, 0x9A	; 154
     d74:	74 e0       	ldi	r23, 0x04	; 4
     d76:	8e e1       	ldi	r24, 0x1E	; 30
     d78:	9d e0       	ldi	r25, 0x0D	; 13
     d7a:	0e 94 31 39 	call	0x7262	; 0x7262 <_ZN5Print5printEPKc>
     d7e:	a5 01       	movw	r20, r10
     d80:	b7 01       	movw	r22, r14
     d82:	c8 01       	movw	r24, r16
     d84:	0e 94 ca 28 	call	0x5194	; 0x5194 <_ZN14EthernetClient7connectEPKcj>
     d88:	89 2b       	or	r24, r25
     d8a:	09 f4       	brne	.+2      	; 0xd8e <_Z11GetAteCheckiPc14EthernetClient6String+0x4e>
     d8c:	c3 c0       	rjmp	.+390    	; 0xf14 <_Z11GetAteCheckiPc14EthernetClient6String+0x1d4>
     d8e:	2f ef       	ldi	r18, 0xFF	; 255
     d90:	81 ee       	ldi	r24, 0xE1	; 225
     d92:	94 e0       	ldi	r25, 0x04	; 4
     d94:	21 50       	subi	r18, 0x01	; 1
     d96:	80 40       	sbci	r24, 0x00	; 0
     d98:	90 40       	sbci	r25, 0x00	; 0
     d9a:	e1 f7       	brne	.-8      	; 0xd94 <_Z11GetAteCheckiPc14EthernetClient6String+0x54>
     d9c:	00 c0       	rjmp	.+0      	; 0xd9e <_Z11GetAteCheckiPc14EthernetClient6String+0x5e>
     d9e:	00 00       	nop
     da0:	67 ed       	ldi	r22, 0xD7	; 215
     da2:	74 e0       	ldi	r23, 0x04	; 4
     da4:	ce 01       	movw	r24, r28
     da6:	01 96       	adiw	r24, 0x01	; 1
     da8:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
     dac:	b6 01       	movw	r22, r12
     dae:	ce 01       	movw	r24, r28
     db0:	01 96       	adiw	r24, 0x01	; 1
     db2:	0e 94 cc 3d 	call	0x7b98	; 0x7b98 <_ZplRK15StringSumHelperRK6String>
     db6:	61 e1       	ldi	r22, 0x11	; 17
     db8:	73 e0       	ldi	r23, 0x03	; 3
     dba:	0e 94 dd 3d 	call	0x7bba	; 0x7bba <_ZplRK15StringSumHelperPKc>
     dbe:	bc 01       	movw	r22, r24
     dc0:	84 e3       	ldi	r24, 0x34	; 52
     dc2:	9b e0       	ldi	r25, 0x0B	; 11
     dc4:	0e 94 4e 3c 	call	0x789c	; 0x789c <_ZN6StringaSERKS_>
     dc8:	ce 01       	movw	r24, r28
     dca:	01 96       	adiw	r24, 0x01	; 1
     dcc:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
     dd0:	b7 01       	movw	r22, r14
     dd2:	ce 01       	movw	r24, r28
     dd4:	01 96       	adiw	r24, 0x01	; 1
     dd6:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
     dda:	64 e0       	ldi	r22, 0x04	; 4
     ddc:	75 e0       	ldi	r23, 0x05	; 5
     dde:	ce 01       	movw	r24, r28
     de0:	07 96       	adiw	r24, 0x07	; 7
     de2:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
     de6:	be 01       	movw	r22, r28
     de8:	6f 5f       	subi	r22, 0xFF	; 255
     dea:	7f 4f       	sbci	r23, 0xFF	; 255
     dec:	ce 01       	movw	r24, r28
     dee:	07 96       	adiw	r24, 0x07	; 7
     df0:	0e 94 cc 3d 	call	0x7b98	; 0x7b98 <_ZplRK15StringSumHelperRK6String>
     df4:	bc 01       	movw	r22, r24
     df6:	84 e3       	ldi	r24, 0x34	; 52
     df8:	9b e0       	ldi	r25, 0x0B	; 11
     dfa:	0e 94 a6 3d 	call	0x7b4c	; 0x7b4c <_ZN6String6concatERKS_>
     dfe:	ce 01       	movw	r24, r28
     e00:	07 96       	adiw	r24, 0x07	; 7
     e02:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
     e06:	ce 01       	movw	r24, r28
     e08:	01 96       	adiw	r24, 0x01	; 1
     e0a:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
     e0e:	6a e1       	ldi	r22, 0x1A	; 26
     e10:	73 e0       	ldi	r23, 0x03	; 3
     e12:	84 e3       	ldi	r24, 0x34	; 52
     e14:	9b e0       	ldi	r25, 0x0B	; 11
     e16:	0e 94 ac 3d 	call	0x7b58	; 0x7b58 <_ZN6String6concatEPKc>
     e1a:	61 e9       	ldi	r22, 0x91	; 145
     e1c:	73 e0       	ldi	r23, 0x03	; 3
     e1e:	84 e3       	ldi	r24, 0x34	; 52
     e20:	9b e0       	ldi	r25, 0x0B	; 11
     e22:	0e 94 ac 3d 	call	0x7b58	; 0x7b58 <_ZN6String6concatEPKc>
     e26:	6a e1       	ldi	r22, 0x1A	; 26
     e28:	73 e0       	ldi	r23, 0x03	; 3
     e2a:	84 e3       	ldi	r24, 0x34	; 52
     e2c:	9b e0       	ldi	r25, 0x0B	; 11
     e2e:	0e 94 ac 3d 	call	0x7b58	; 0x7b58 <_ZN6String6concatEPKc>
     e32:	6b e3       	ldi	r22, 0x3B	; 59
     e34:	74 e0       	ldi	r23, 0x04	; 4
     e36:	84 e3       	ldi	r24, 0x34	; 52
     e38:	9b e0       	ldi	r25, 0x0B	; 11
     e3a:	0e 94 ac 3d 	call	0x7b58	; 0x7b58 <_ZN6String6concatEPKc>
     e3e:	6a e1       	ldi	r22, 0x1A	; 26
     e40:	73 e0       	ldi	r23, 0x03	; 3
     e42:	84 e3       	ldi	r24, 0x34	; 52
     e44:	9b e0       	ldi	r25, 0x0B	; 11
     e46:	0e 94 ac 3d 	call	0x7b58	; 0x7b58 <_ZN6String6concatEPKc>
     e4a:	6b e0       	ldi	r22, 0x0B	; 11
     e4c:	75 e0       	ldi	r23, 0x05	; 5
     e4e:	84 e3       	ldi	r24, 0x34	; 52
     e50:	9b e0       	ldi	r25, 0x0B	; 11
     e52:	0e 94 ac 3d 	call	0x7b58	; 0x7b58 <_ZN6String6concatEPKc>
     e56:	6a e1       	ldi	r22, 0x1A	; 26
     e58:	73 e0       	ldi	r23, 0x03	; 3
     e5a:	84 e3       	ldi	r24, 0x34	; 52
     e5c:	9b e0       	ldi	r25, 0x0B	; 11
     e5e:	0e 94 ac 3d 	call	0x7b58	; 0x7b58 <_ZN6String6concatEPKc>
     e62:	6a e1       	ldi	r22, 0x1A	; 26
     e64:	73 e0       	ldi	r23, 0x03	; 3
     e66:	84 e3       	ldi	r24, 0x34	; 52
     e68:	9b e0       	ldi	r25, 0x0B	; 11
     e6a:	0e 94 ac 3d 	call	0x7b58	; 0x7b58 <_ZN6String6concatEPKc>
     e6e:	64 e3       	ldi	r22, 0x34	; 52
     e70:	7b e0       	ldi	r23, 0x0B	; 11
     e72:	8e e1       	ldi	r24, 0x1E	; 30
     e74:	9d e0       	ldi	r25, 0x0D	; 13
     e76:	0e 94 4c 39 	call	0x7298	; 0x7298 <_ZN5Print7printlnERK6String>
     e7a:	64 e3       	ldi	r22, 0x34	; 52
     e7c:	7b e0       	ldi	r23, 0x0B	; 11
     e7e:	c8 01       	movw	r24, r16
     e80:	0e 94 23 39 	call	0x7246	; 0x7246 <_ZN5Print5printERK6String>
     e84:	2f ef       	ldi	r18, 0xFF	; 255
     e86:	83 ec       	ldi	r24, 0xC3	; 195
     e88:	99 e0       	ldi	r25, 0x09	; 9
     e8a:	21 50       	subi	r18, 0x01	; 1
     e8c:	80 40       	sbci	r24, 0x00	; 0
     e8e:	90 40       	sbci	r25, 0x00	; 0
     e90:	e1 f7       	brne	.-8      	; 0xe8a <_Z11GetAteCheckiPc14EthernetClient6String+0x14a>
     e92:	00 c0       	rjmp	.+0      	; 0xe94 <_Z11GetAteCheckiPc14EthernetClient6String+0x154>
     e94:	00 00       	nop
     e96:	6a e5       	ldi	r22, 0x5A	; 90
     e98:	74 e0       	ldi	r23, 0x04	; 4
     e9a:	c8 01       	movw	r24, r16
     e9c:	0e 94 5c 39 	call	0x72b8	; 0x72b8 <_ZN5Print7printlnEPKc>
     ea0:	c8 01       	movw	r24, r16
     ea2:	0e 94 39 39 	call	0x7272	; 0x7272 <_ZN5Print7printlnEv>
     ea6:	8f e3       	ldi	r24, 0x3F	; 63
     ea8:	9c e9       	ldi	r25, 0x9C	; 156
     eaa:	01 97       	sbiw	r24, 0x01	; 1
     eac:	f1 f7       	brne	.-4      	; 0xeaa <_Z11GetAteCheckiPc14EthernetClient6String+0x16a>
     eae:	00 c0       	rjmp	.+0      	; 0xeb0 <_Z11GetAteCheckiPc14EthernetClient6String+0x170>
     eb0:	00 00       	nop
     eb2:	67 e1       	ldi	r22, 0x17	; 23
     eb4:	75 e0       	ldi	r23, 0x05	; 5
     eb6:	ce 01       	movw	r24, r28
     eb8:	0d 96       	adiw	r24, 0x0d	; 13
     eba:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
     ebe:	c8 01       	movw	r24, r16
     ec0:	0e 94 41 29 	call	0x5282	; 0x5282 <_ZN14EthernetClient9availableEv>
     ec4:	89 2b       	or	r24, r25
     ec6:	09 f4       	brne	.+2      	; 0xeca <_Z11GetAteCheckiPc14EthernetClient6String+0x18a>
     ec8:	4c c0       	rjmp	.+152    	; 0xf62 <_Z11GetAteCheckiPc14EthernetClient6String+0x222>
     eca:	20 91 2b 0b 	lds	r18, 0x0B2B	; 0x800b2b <RispostaHTTP+0x4>
     ece:	30 91 2c 0b 	lds	r19, 0x0B2C	; 0x800b2c <RispostaHTTP+0x5>
     ed2:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <HTTP_len_response>
     ed6:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <HTTP_len_response+0x1>
     eda:	28 17       	cp	r18, r24
     edc:	39 07       	cpc	r19, r25
     ede:	08 f0       	brcs	.+2      	; 0xee2 <_Z11GetAteCheckiPc14EthernetClient6String+0x1a2>
     ee0:	40 c0       	rjmp	.+128    	; 0xf62 <_Z11GetAteCheckiPc14EthernetClient6String+0x222>
     ee2:	c8 01       	movw	r24, r16
     ee4:	0e 94 4b 29 	call	0x5296	; 0x5296 <_ZN14EthernetClient4readEv>
     ee8:	f8 2e       	mov	r15, r24
     eea:	67 e2       	ldi	r22, 0x27	; 39
     eec:	7b e0       	ldi	r23, 0x0B	; 11
     eee:	ce 01       	movw	r24, r28
     ef0:	01 96       	adiw	r24, 0x01	; 1
     ef2:	0e 94 63 3c 	call	0x78c6	; 0x78c6 <_ZN6StringC1ERKS_>
     ef6:	6f 2d       	mov	r22, r15
     ef8:	ce 01       	movw	r24, r28
     efa:	01 96       	adiw	r24, 0x01	; 1
     efc:	0e 94 f4 3d 	call	0x7be8	; 0x7be8 <_ZplRK15StringSumHelperc>
     f00:	bc 01       	movw	r22, r24
     f02:	87 e2       	ldi	r24, 0x27	; 39
     f04:	9b e0       	ldi	r25, 0x0B	; 11
     f06:	0e 94 4e 3c 	call	0x789c	; 0x789c <_ZN6StringaSERKS_>
     f0a:	ce 01       	movw	r24, r28
     f0c:	01 96       	adiw	r24, 0x01	; 1
     f0e:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
     f12:	d5 cf       	rjmp	.-86     	; 0xebe <_Z11GetAteCheckiPc14EthernetClient6String+0x17e>
     f14:	87 e5       	ldi	r24, 0x57	; 87
     f16:	9b e0       	ldi	r25, 0x0B	; 11
     f18:	0e 94 a1 30 	call	0x6142	; 0x6142 <_ZN3LCD5clearEv>
     f1c:	41 e0       	ldi	r20, 0x01	; 1
     f1e:	60 e0       	ldi	r22, 0x00	; 0
     f20:	87 e5       	ldi	r24, 0x57	; 87
     f22:	9b e0       	ldi	r25, 0x0B	; 11
     f24:	0e 94 a7 30 	call	0x614e	; 0x614e <_ZN3LCD9setCursorEhh>
     f28:	6c e6       	ldi	r22, 0x6C	; 108
     f2a:	74 e0       	ldi	r23, 0x04	; 4
     f2c:	87 e5       	ldi	r24, 0x57	; 87
     f2e:	9b e0       	ldi	r25, 0x0B	; 11
     f30:	0e 94 31 39 	call	0x7262	; 0x7262 <_ZN5Print5printEPKc>
     f34:	43 e0       	ldi	r20, 0x03	; 3
     f36:	60 e0       	ldi	r22, 0x00	; 0
     f38:	87 e5       	ldi	r24, 0x57	; 87
     f3a:	9b e0       	ldi	r25, 0x0B	; 11
     f3c:	0e 94 a7 30 	call	0x614e	; 0x614e <_ZN3LCD9setCursorEhh>
     f40:	61 e8       	ldi	r22, 0x81	; 129
     f42:	74 e0       	ldi	r23, 0x04	; 4
     f44:	87 e5       	ldi	r24, 0x57	; 87
     f46:	9b e0       	ldi	r25, 0x0B	; 11
     f48:	0e 94 31 39 	call	0x7262	; 0x7262 <_ZN5Print5printEPKc>
     f4c:	9f ef       	ldi	r25, 0xFF	; 255
     f4e:	23 ed       	ldi	r18, 0xD3	; 211
     f50:	80 e3       	ldi	r24, 0x30	; 48
     f52:	91 50       	subi	r25, 0x01	; 1
     f54:	20 40       	sbci	r18, 0x00	; 0
     f56:	80 40       	sbci	r24, 0x00	; 0
     f58:	e1 f7       	brne	.-8      	; 0xf52 <_Z11GetAteCheckiPc14EthernetClient6String+0x212>
     f5a:	00 c0       	rjmp	.+0      	; 0xf5c <_Z11GetAteCheckiPc14EthernetClient6String+0x21c>
     f5c:	00 00       	nop
     f5e:	80 e0       	ldi	r24, 0x00	; 0
     f60:	38 c0       	rjmp	.+112    	; 0xfd2 <_Z11GetAteCheckiPc14EthernetClient6String+0x292>
     f62:	67 e2       	ldi	r22, 0x27	; 39
     f64:	7b e0       	ldi	r23, 0x0B	; 11
     f66:	ce 01       	movw	r24, r28
     f68:	07 96       	adiw	r24, 0x07	; 7
     f6a:	0e 94 63 3c 	call	0x78c6	; 0x78c6 <_ZN6StringC1ERKS_>
     f6e:	be 01       	movw	r22, r28
     f70:	69 5f       	subi	r22, 0xF9	; 249
     f72:	7f 4f       	sbci	r23, 0xFF	; 255
     f74:	ce 01       	movw	r24, r28
     f76:	01 96       	adiw	r24, 0x01	; 1
     f78:	78 de       	rcall	.-784    	; 0xc6a <_Z19GetHTTPResponseCode6String>
     f7a:	be 01       	movw	r22, r28
     f7c:	6f 5f       	subi	r22, 0xFF	; 255
     f7e:	7f 4f       	sbci	r23, 0xFF	; 255
     f80:	ce 01       	movw	r24, r28
     f82:	0d 96       	adiw	r24, 0x0d	; 13
     f84:	0e 94 6b 3c 	call	0x78d6	; 0x78d6 <_ZN6StringaSEOS_>
     f88:	ce 01       	movw	r24, r28
     f8a:	01 96       	adiw	r24, 0x01	; 1
     f8c:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
     f90:	ce 01       	movw	r24, r28
     f92:	07 96       	adiw	r24, 0x07	; 7
     f94:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
     f98:	9f ef       	ldi	r25, 0xFF	; 255
     f9a:	27 ee       	ldi	r18, 0xE7	; 231
     f9c:	83 e0       	ldi	r24, 0x03	; 3
     f9e:	91 50       	subi	r25, 0x01	; 1
     fa0:	20 40       	sbci	r18, 0x00	; 0
     fa2:	80 40       	sbci	r24, 0x00	; 0
     fa4:	e1 f7       	brne	.-8      	; 0xf9e <_Z11GetAteCheckiPc14EthernetClient6String+0x25e>
     fa6:	00 c0       	rjmp	.+0      	; 0xfa8 <_Z11GetAteCheckiPc14EthernetClient6String+0x268>
     fa8:	00 00       	nop
     faa:	66 e9       	ldi	r22, 0x96	; 150
     fac:	74 e0       	ldi	r23, 0x04	; 4
     fae:	ce 01       	movw	r24, r28
     fb0:	0d 96       	adiw	r24, 0x0d	; 13
     fb2:	0e 94 00 3e 	call	0x7c00	; 0x7c00 <_ZNK6String6equalsEPKc>
     fb6:	88 23       	and	r24, r24
     fb8:	51 f0       	breq	.+20     	; 0xfce <_Z11GetAteCheckiPc14EthernetClient6String+0x28e>
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	4f da       	rcall	.-2914   	; 0x45c <_Z4passb>
     fbe:	2a da       	rcall	.-2988   	; 0x414 <_Z9printLinev>
     fc0:	11 e0       	ldi	r17, 0x01	; 1
     fc2:	ce 01       	movw	r24, r28
     fc4:	0d 96       	adiw	r24, 0x0d	; 13
     fc6:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
     fca:	81 2f       	mov	r24, r17
     fcc:	02 c0       	rjmp	.+4      	; 0xfd2 <_Z11GetAteCheckiPc14EthernetClient6String+0x292>
     fce:	10 e0       	ldi	r17, 0x00	; 0
     fd0:	f8 cf       	rjmp	.-16     	; 0xfc2 <_Z11GetAteCheckiPc14EthernetClient6String+0x282>
     fd2:	62 96       	adiw	r28, 0x12	; 18
     fd4:	0f b6       	in	r0, 0x3f	; 63
     fd6:	f8 94       	cli
     fd8:	de bf       	out	0x3e, r29	; 62
     fda:	0f be       	out	0x3f, r0	; 63
     fdc:	cd bf       	out	0x3d, r28	; 61
     fde:	df 91       	pop	r29
     fe0:	cf 91       	pop	r28
     fe2:	1f 91       	pop	r17
     fe4:	0f 91       	pop	r16
     fe6:	ff 90       	pop	r15
     fe8:	ef 90       	pop	r14
     fea:	df 90       	pop	r13
     fec:	cf 90       	pop	r12
     fee:	bf 90       	pop	r11
     ff0:	af 90       	pop	r10
     ff2:	08 95       	ret

00000ff4 <_Z17PostErogazioneGACiPc14EthernetClient6String>:
     ff4:	af 92       	push	r10
     ff6:	bf 92       	push	r11
     ff8:	cf 92       	push	r12
     ffa:	df 92       	push	r13
     ffc:	ef 92       	push	r14
     ffe:	ff 92       	push	r15
    1000:	0f 93       	push	r16
    1002:	1f 93       	push	r17
    1004:	cf 93       	push	r28
    1006:	df 93       	push	r29
    1008:	cd b7       	in	r28, 0x3d	; 61
    100a:	de b7       	in	r29, 0x3e	; 62
    100c:	62 97       	sbiw	r28, 0x12	; 18
    100e:	0f b6       	in	r0, 0x3f	; 63
    1010:	f8 94       	cli
    1012:	de bf       	out	0x3e, r29	; 62
    1014:	0f be       	out	0x3f, r0	; 63
    1016:	cd bf       	out	0x3d, r28	; 61
    1018:	5c 01       	movw	r10, r24
    101a:	6b 01       	movw	r12, r22
    101c:	8a 01       	movw	r16, r20
    101e:	79 01       	movw	r14, r18
    1020:	f9 d9       	rcall	.-3086   	; 0x414 <_Z9printLinev>
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	0a da       	rcall	.-3052   	; 0x43a <_Z8printTabh>
    1026:	69 e1       	ldi	r22, 0x19	; 25
    1028:	75 e0       	ldi	r23, 0x05	; 5
    102a:	8e e1       	ldi	r24, 0x1E	; 30
    102c:	9d e0       	ldi	r25, 0x0D	; 13
    102e:	0e 94 31 39 	call	0x7262	; 0x7262 <_ZN5Print5printEPKc>
    1032:	a5 01       	movw	r20, r10
    1034:	b6 01       	movw	r22, r12
    1036:	c8 01       	movw	r24, r16
    1038:	0e 94 ca 28 	call	0x5194	; 0x5194 <_ZN14EthernetClient7connectEPKcj>
    103c:	89 2b       	or	r24, r25
    103e:	09 f4       	brne	.+2      	; 0x1042 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x4e>
    1040:	e6 c0       	rjmp	.+460    	; 0x120e <_Z17PostErogazioneGACiPc14EthernetClient6String+0x21a>
    1042:	2f ef       	ldi	r18, 0xFF	; 255
    1044:	81 ee       	ldi	r24, 0xE1	; 225
    1046:	94 e0       	ldi	r25, 0x04	; 4
    1048:	21 50       	subi	r18, 0x01	; 1
    104a:	80 40       	sbci	r24, 0x00	; 0
    104c:	90 40       	sbci	r25, 0x00	; 0
    104e:	e1 f7       	brne	.-8      	; 0x1048 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x54>
    1050:	00 c0       	rjmp	.+0      	; 0x1052 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x5e>
    1052:	00 00       	nop
    1054:	69 e5       	ldi	r22, 0x59	; 89
    1056:	75 e0       	ldi	r23, 0x05	; 5
    1058:	84 e3       	ldi	r24, 0x34	; 52
    105a:	9b e0       	ldi	r25, 0x0B	; 11
    105c:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringaSEPKc>
    1060:	b6 01       	movw	r22, r12
    1062:	ce 01       	movw	r24, r28
    1064:	01 96       	adiw	r24, 0x01	; 1
    1066:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
    106a:	64 e0       	ldi	r22, 0x04	; 4
    106c:	75 e0       	ldi	r23, 0x05	; 5
    106e:	ce 01       	movw	r24, r28
    1070:	07 96       	adiw	r24, 0x07	; 7
    1072:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
    1076:	be 01       	movw	r22, r28
    1078:	6f 5f       	subi	r22, 0xFF	; 255
    107a:	7f 4f       	sbci	r23, 0xFF	; 255
    107c:	ce 01       	movw	r24, r28
    107e:	07 96       	adiw	r24, 0x07	; 7
    1080:	0e 94 cc 3d 	call	0x7b98	; 0x7b98 <_ZplRK15StringSumHelperRK6String>
    1084:	bc 01       	movw	r22, r24
    1086:	84 e3       	ldi	r24, 0x34	; 52
    1088:	9b e0       	ldi	r25, 0x0B	; 11
    108a:	0e 94 a6 3d 	call	0x7b4c	; 0x7b4c <_ZN6String6concatERKS_>
    108e:	ce 01       	movw	r24, r28
    1090:	07 96       	adiw	r24, 0x07	; 7
    1092:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
    1096:	ce 01       	movw	r24, r28
    1098:	01 96       	adiw	r24, 0x01	; 1
    109a:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
    109e:	6a e1       	ldi	r22, 0x1A	; 26
    10a0:	73 e0       	ldi	r23, 0x03	; 3
    10a2:	84 e3       	ldi	r24, 0x34	; 52
    10a4:	9b e0       	ldi	r25, 0x0B	; 11
    10a6:	0e 94 ac 3d 	call	0x7b58	; 0x7b58 <_ZN6String6concatEPKc>
    10aa:	61 e9       	ldi	r22, 0x91	; 145
    10ac:	73 e0       	ldi	r23, 0x03	; 3
    10ae:	84 e3       	ldi	r24, 0x34	; 52
    10b0:	9b e0       	ldi	r25, 0x0B	; 11
    10b2:	0e 94 ac 3d 	call	0x7b58	; 0x7b58 <_ZN6String6concatEPKc>
    10b6:	6a e1       	ldi	r22, 0x1A	; 26
    10b8:	73 e0       	ldi	r23, 0x03	; 3
    10ba:	84 e3       	ldi	r24, 0x34	; 52
    10bc:	9b e0       	ldi	r25, 0x0B	; 11
    10be:	0e 94 ac 3d 	call	0x7b58	; 0x7b58 <_ZN6String6concatEPKc>
    10c2:	6b e3       	ldi	r22, 0x3B	; 59
    10c4:	74 e0       	ldi	r23, 0x04	; 4
    10c6:	84 e3       	ldi	r24, 0x34	; 52
    10c8:	9b e0       	ldi	r25, 0x0B	; 11
    10ca:	0e 94 ac 3d 	call	0x7b58	; 0x7b58 <_ZN6String6concatEPKc>
    10ce:	6a e1       	ldi	r22, 0x1A	; 26
    10d0:	73 e0       	ldi	r23, 0x03	; 3
    10d2:	84 e3       	ldi	r24, 0x34	; 52
    10d4:	9b e0       	ldi	r25, 0x0B	; 11
    10d6:	0e 94 ac 3d 	call	0x7b58	; 0x7b58 <_ZN6String6concatEPKc>
    10da:	6b e0       	ldi	r22, 0x0B	; 11
    10dc:	75 e0       	ldi	r23, 0x05	; 5
    10de:	84 e3       	ldi	r24, 0x34	; 52
    10e0:	9b e0       	ldi	r25, 0x0B	; 11
    10e2:	0e 94 ac 3d 	call	0x7b58	; 0x7b58 <_ZN6String6concatEPKc>
    10e6:	6a e1       	ldi	r22, 0x1A	; 26
    10e8:	73 e0       	ldi	r23, 0x03	; 3
    10ea:	84 e3       	ldi	r24, 0x34	; 52
    10ec:	9b e0       	ldi	r25, 0x0B	; 11
    10ee:	0e 94 ac 3d 	call	0x7b58	; 0x7b58 <_ZN6String6concatEPKc>
    10f2:	f7 01       	movw	r30, r14
    10f4:	64 81       	ldd	r22, Z+4	; 0x04
    10f6:	75 81       	ldd	r23, Z+5	; 0x05
    10f8:	6b 5e       	subi	r22, 0xEB	; 235
    10fa:	7f 4f       	sbci	r23, 0xFF	; 255
    10fc:	4a e0       	ldi	r20, 0x0A	; 10
    10fe:	ce 01       	movw	r24, r28
    1100:	01 96       	adiw	r24, 0x01	; 1
    1102:	0e 94 f7 3c 	call	0x79ee	; 0x79ee <_ZN6StringC1Ejh>
    1106:	6b e7       	ldi	r22, 0x7B	; 123
    1108:	75 e0       	ldi	r23, 0x05	; 5
    110a:	ce 01       	movw	r24, r28
    110c:	07 96       	adiw	r24, 0x07	; 7
    110e:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
    1112:	be 01       	movw	r22, r28
    1114:	6f 5f       	subi	r22, 0xFF	; 255
    1116:	7f 4f       	sbci	r23, 0xFF	; 255
    1118:	ce 01       	movw	r24, r28
    111a:	07 96       	adiw	r24, 0x07	; 7
    111c:	0e 94 cc 3d 	call	0x7b98	; 0x7b98 <_ZplRK15StringSumHelperRK6String>
    1120:	bc 01       	movw	r22, r24
    1122:	84 e3       	ldi	r24, 0x34	; 52
    1124:	9b e0       	ldi	r25, 0x0B	; 11
    1126:	0e 94 a6 3d 	call	0x7b4c	; 0x7b4c <_ZN6String6concatERKS_>
    112a:	ce 01       	movw	r24, r28
    112c:	07 96       	adiw	r24, 0x07	; 7
    112e:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
    1132:	ce 01       	movw	r24, r28
    1134:	01 96       	adiw	r24, 0x01	; 1
    1136:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
    113a:	6a e1       	ldi	r22, 0x1A	; 26
    113c:	73 e0       	ldi	r23, 0x03	; 3
    113e:	84 e3       	ldi	r24, 0x34	; 52
    1140:	9b e0       	ldi	r25, 0x0B	; 11
    1142:	0e 94 ac 3d 	call	0x7b58	; 0x7b58 <_ZN6String6concatEPKc>
    1146:	6a e1       	ldi	r22, 0x1A	; 26
    1148:	73 e0       	ldi	r23, 0x03	; 3
    114a:	84 e3       	ldi	r24, 0x34	; 52
    114c:	9b e0       	ldi	r25, 0x0B	; 11
    114e:	0e 94 ac 3d 	call	0x7b58	; 0x7b58 <_ZN6String6concatEPKc>
    1152:	b7 01       	movw	r22, r14
    1154:	84 e3       	ldi	r24, 0x34	; 52
    1156:	9b e0       	ldi	r25, 0x0B	; 11
    1158:	0e 94 a6 3d 	call	0x7b4c	; 0x7b4c <_ZN6String6concatERKS_>
    115c:	6a e1       	ldi	r22, 0x1A	; 26
    115e:	73 e0       	ldi	r23, 0x03	; 3
    1160:	84 e3       	ldi	r24, 0x34	; 52
    1162:	9b e0       	ldi	r25, 0x0B	; 11
    1164:	0e 94 ac 3d 	call	0x7b58	; 0x7b58 <_ZN6String6concatEPKc>
    1168:	64 e3       	ldi	r22, 0x34	; 52
    116a:	7b e0       	ldi	r23, 0x0B	; 11
    116c:	8e e1       	ldi	r24, 0x1E	; 30
    116e:	9d e0       	ldi	r25, 0x0D	; 13
    1170:	0e 94 4c 39 	call	0x7298	; 0x7298 <_ZN5Print7printlnERK6String>
    1174:	64 e3       	ldi	r22, 0x34	; 52
    1176:	7b e0       	ldi	r23, 0x0B	; 11
    1178:	c8 01       	movw	r24, r16
    117a:	0e 94 23 39 	call	0x7246	; 0x7246 <_ZN5Print5printERK6String>
    117e:	ff ef       	ldi	r31, 0xFF	; 255
    1180:	23 ec       	ldi	r18, 0xC3	; 195
    1182:	89 e0       	ldi	r24, 0x09	; 9
    1184:	f1 50       	subi	r31, 0x01	; 1
    1186:	20 40       	sbci	r18, 0x00	; 0
    1188:	80 40       	sbci	r24, 0x00	; 0
    118a:	e1 f7       	brne	.-8      	; 0x1184 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x190>
    118c:	00 c0       	rjmp	.+0      	; 0x118e <_Z17PostErogazioneGACiPc14EthernetClient6String+0x19a>
    118e:	00 00       	nop
    1190:	6a e5       	ldi	r22, 0x5A	; 90
    1192:	74 e0       	ldi	r23, 0x04	; 4
    1194:	c8 01       	movw	r24, r16
    1196:	0e 94 5c 39 	call	0x72b8	; 0x72b8 <_ZN5Print7printlnEPKc>
    119a:	c8 01       	movw	r24, r16
    119c:	0e 94 39 39 	call	0x7272	; 0x7272 <_ZN5Print7printlnEv>
    11a0:	ef e3       	ldi	r30, 0x3F	; 63
    11a2:	fc e9       	ldi	r31, 0x9C	; 156
    11a4:	31 97       	sbiw	r30, 0x01	; 1
    11a6:	f1 f7       	brne	.-4      	; 0x11a4 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x1b0>
    11a8:	00 c0       	rjmp	.+0      	; 0x11aa <_Z17PostErogazioneGACiPc14EthernetClient6String+0x1b6>
    11aa:	00 00       	nop
    11ac:	67 e1       	ldi	r22, 0x17	; 23
    11ae:	75 e0       	ldi	r23, 0x05	; 5
    11b0:	ce 01       	movw	r24, r28
    11b2:	0d 96       	adiw	r24, 0x0d	; 13
    11b4:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
    11b8:	c8 01       	movw	r24, r16
    11ba:	0e 94 41 29 	call	0x5282	; 0x5282 <_ZN14EthernetClient9availableEv>
    11be:	89 2b       	or	r24, r25
    11c0:	09 f4       	brne	.+2      	; 0x11c4 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x1d0>
    11c2:	4c c0       	rjmp	.+152    	; 0x125c <_Z17PostErogazioneGACiPc14EthernetClient6String+0x268>
    11c4:	20 91 2b 0b 	lds	r18, 0x0B2B	; 0x800b2b <RispostaHTTP+0x4>
    11c8:	30 91 2c 0b 	lds	r19, 0x0B2C	; 0x800b2c <RispostaHTTP+0x5>
    11cc:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <HTTP_len_response>
    11d0:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <HTTP_len_response+0x1>
    11d4:	28 17       	cp	r18, r24
    11d6:	39 07       	cpc	r19, r25
    11d8:	08 f0       	brcs	.+2      	; 0x11dc <_Z17PostErogazioneGACiPc14EthernetClient6String+0x1e8>
    11da:	40 c0       	rjmp	.+128    	; 0x125c <_Z17PostErogazioneGACiPc14EthernetClient6String+0x268>
    11dc:	c8 01       	movw	r24, r16
    11de:	0e 94 4b 29 	call	0x5296	; 0x5296 <_ZN14EthernetClient4readEv>
    11e2:	f8 2e       	mov	r15, r24
    11e4:	67 e2       	ldi	r22, 0x27	; 39
    11e6:	7b e0       	ldi	r23, 0x0B	; 11
    11e8:	ce 01       	movw	r24, r28
    11ea:	01 96       	adiw	r24, 0x01	; 1
    11ec:	0e 94 63 3c 	call	0x78c6	; 0x78c6 <_ZN6StringC1ERKS_>
    11f0:	6f 2d       	mov	r22, r15
    11f2:	ce 01       	movw	r24, r28
    11f4:	01 96       	adiw	r24, 0x01	; 1
    11f6:	0e 94 f4 3d 	call	0x7be8	; 0x7be8 <_ZplRK15StringSumHelperc>
    11fa:	bc 01       	movw	r22, r24
    11fc:	87 e2       	ldi	r24, 0x27	; 39
    11fe:	9b e0       	ldi	r25, 0x0B	; 11
    1200:	0e 94 4e 3c 	call	0x789c	; 0x789c <_ZN6StringaSERKS_>
    1204:	ce 01       	movw	r24, r28
    1206:	01 96       	adiw	r24, 0x01	; 1
    1208:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
    120c:	d5 cf       	rjmp	.-86     	; 0x11b8 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x1c4>
    120e:	87 e5       	ldi	r24, 0x57	; 87
    1210:	9b e0       	ldi	r25, 0x0B	; 11
    1212:	0e 94 a1 30 	call	0x6142	; 0x6142 <_ZN3LCD5clearEv>
    1216:	41 e0       	ldi	r20, 0x01	; 1
    1218:	60 e0       	ldi	r22, 0x00	; 0
    121a:	87 e5       	ldi	r24, 0x57	; 87
    121c:	9b e0       	ldi	r25, 0x0B	; 11
    121e:	0e 94 a7 30 	call	0x614e	; 0x614e <_ZN3LCD9setCursorEhh>
    1222:	6c e6       	ldi	r22, 0x6C	; 108
    1224:	74 e0       	ldi	r23, 0x04	; 4
    1226:	87 e5       	ldi	r24, 0x57	; 87
    1228:	9b e0       	ldi	r25, 0x0B	; 11
    122a:	0e 94 31 39 	call	0x7262	; 0x7262 <_ZN5Print5printEPKc>
    122e:	43 e0       	ldi	r20, 0x03	; 3
    1230:	60 e0       	ldi	r22, 0x00	; 0
    1232:	87 e5       	ldi	r24, 0x57	; 87
    1234:	9b e0       	ldi	r25, 0x0B	; 11
    1236:	0e 94 a7 30 	call	0x614e	; 0x614e <_ZN3LCD9setCursorEhh>
    123a:	61 e8       	ldi	r22, 0x81	; 129
    123c:	74 e0       	ldi	r23, 0x04	; 4
    123e:	87 e5       	ldi	r24, 0x57	; 87
    1240:	9b e0       	ldi	r25, 0x0B	; 11
    1242:	0e 94 31 39 	call	0x7262	; 0x7262 <_ZN5Print5printEPKc>
    1246:	ff ef       	ldi	r31, 0xFF	; 255
    1248:	23 ed       	ldi	r18, 0xD3	; 211
    124a:	80 e3       	ldi	r24, 0x30	; 48
    124c:	f1 50       	subi	r31, 0x01	; 1
    124e:	20 40       	sbci	r18, 0x00	; 0
    1250:	80 40       	sbci	r24, 0x00	; 0
    1252:	e1 f7       	brne	.-8      	; 0x124c <_Z17PostErogazioneGACiPc14EthernetClient6String+0x258>
    1254:	00 c0       	rjmp	.+0      	; 0x1256 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x262>
    1256:	00 00       	nop
    1258:	80 e0       	ldi	r24, 0x00	; 0
    125a:	38 c0       	rjmp	.+112    	; 0x12cc <_Z17PostErogazioneGACiPc14EthernetClient6String+0x2d8>
    125c:	67 e2       	ldi	r22, 0x27	; 39
    125e:	7b e0       	ldi	r23, 0x0B	; 11
    1260:	ce 01       	movw	r24, r28
    1262:	07 96       	adiw	r24, 0x07	; 7
    1264:	0e 94 63 3c 	call	0x78c6	; 0x78c6 <_ZN6StringC1ERKS_>
    1268:	be 01       	movw	r22, r28
    126a:	69 5f       	subi	r22, 0xF9	; 249
    126c:	7f 4f       	sbci	r23, 0xFF	; 255
    126e:	ce 01       	movw	r24, r28
    1270:	01 96       	adiw	r24, 0x01	; 1
    1272:	fb dc       	rcall	.-1546   	; 0xc6a <_Z19GetHTTPResponseCode6String>
    1274:	be 01       	movw	r22, r28
    1276:	6f 5f       	subi	r22, 0xFF	; 255
    1278:	7f 4f       	sbci	r23, 0xFF	; 255
    127a:	ce 01       	movw	r24, r28
    127c:	0d 96       	adiw	r24, 0x0d	; 13
    127e:	0e 94 6b 3c 	call	0x78d6	; 0x78d6 <_ZN6StringaSEOS_>
    1282:	ce 01       	movw	r24, r28
    1284:	01 96       	adiw	r24, 0x01	; 1
    1286:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
    128a:	ce 01       	movw	r24, r28
    128c:	07 96       	adiw	r24, 0x07	; 7
    128e:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
    1292:	9f ef       	ldi	r25, 0xFF	; 255
    1294:	e7 ee       	ldi	r30, 0xE7	; 231
    1296:	f3 e0       	ldi	r31, 0x03	; 3
    1298:	91 50       	subi	r25, 0x01	; 1
    129a:	e0 40       	sbci	r30, 0x00	; 0
    129c:	f0 40       	sbci	r31, 0x00	; 0
    129e:	e1 f7       	brne	.-8      	; 0x1298 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x2a4>
    12a0:	00 c0       	rjmp	.+0      	; 0x12a2 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x2ae>
    12a2:	00 00       	nop
    12a4:	66 e9       	ldi	r22, 0x96	; 150
    12a6:	74 e0       	ldi	r23, 0x04	; 4
    12a8:	ce 01       	movw	r24, r28
    12aa:	0d 96       	adiw	r24, 0x0d	; 13
    12ac:	0e 94 00 3e 	call	0x7c00	; 0x7c00 <_ZNK6String6equalsEPKc>
    12b0:	88 23       	and	r24, r24
    12b2:	51 f0       	breq	.+20     	; 0x12c8 <_Z17PostErogazioneGACiPc14EthernetClient6String+0x2d4>
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	d2 d8       	rcall	.-3676   	; 0x45c <_Z4passb>
    12b8:	ad d8       	rcall	.-3750   	; 0x414 <_Z9printLinev>
    12ba:	11 e0       	ldi	r17, 0x01	; 1
    12bc:	ce 01       	movw	r24, r28
    12be:	0d 96       	adiw	r24, 0x0d	; 13
    12c0:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
    12c4:	81 2f       	mov	r24, r17
    12c6:	02 c0       	rjmp	.+4      	; 0x12cc <_Z17PostErogazioneGACiPc14EthernetClient6String+0x2d8>
    12c8:	10 e0       	ldi	r17, 0x00	; 0
    12ca:	f8 cf       	rjmp	.-16     	; 0x12bc <_Z17PostErogazioneGACiPc14EthernetClient6String+0x2c8>
    12cc:	62 96       	adiw	r28, 0x12	; 18
    12ce:	0f b6       	in	r0, 0x3f	; 63
    12d0:	f8 94       	cli
    12d2:	de bf       	out	0x3e, r29	; 62
    12d4:	0f be       	out	0x3f, r0	; 63
    12d6:	cd bf       	out	0x3d, r28	; 61
    12d8:	df 91       	pop	r29
    12da:	cf 91       	pop	r28
    12dc:	1f 91       	pop	r17
    12de:	0f 91       	pop	r16
    12e0:	ff 90       	pop	r15
    12e2:	ef 90       	pop	r14
    12e4:	df 90       	pop	r13
    12e6:	cf 90       	pop	r12
    12e8:	bf 90       	pop	r11
    12ea:	af 90       	pop	r10
    12ec:	08 95       	ret

000012ee <_Z15abilitaPulsantiv>:
    12ee:	57 98       	cbi	0x0a, 7	; 10
    12f0:	56 98       	cbi	0x0a, 6	; 10
    12f2:	88 e0       	ldi	r24, 0x08	; 8
    12f4:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    12f8:	80 ec       	ldi	r24, 0xC0	; 192
    12fa:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    12fe:	78 94       	sei
    1300:	08 95       	ret

00001302 <_Z22abilitaContattiPistolav>:
    1302:	09 98       	cbi	0x01, 1	; 1
    1304:	0a 98       	cbi	0x01, 2	; 1
    1306:	08 95       	ret

00001308 <_Z13abilitaPulserc>:
    1308:	2f ef       	ldi	r18, 0xFF	; 255
    130a:	33 ed       	ldi	r19, 0xD3	; 211
    130c:	90 e3       	ldi	r25, 0x30	; 48
    130e:	21 50       	subi	r18, 0x01	; 1
    1310:	30 40       	sbci	r19, 0x00	; 0
    1312:	90 40       	sbci	r25, 0x00	; 0
    1314:	e1 f7       	brne	.-8      	; 0x130e <_Z13abilitaPulserc+0x6>
    1316:	00 c0       	rjmp	.+0      	; 0x1318 <_Z13abilitaPulserc+0x10>
    1318:	00 00       	nop
    131a:	91 e0       	ldi	r25, 0x01	; 1
    131c:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    1320:	84 34       	cpi	r24, 0x44	; 68
    1322:	19 f4       	brne	.+6      	; 0x132a <_Z13abilitaPulserc+0x22>
    1324:	0d 98       	cbi	0x01, 5	; 1
    1326:	80 e2       	ldi	r24, 0x20	; 32
    1328:	02 c0       	rjmp	.+4      	; 0x132e <_Z13abilitaPulserc+0x26>
    132a:	0e 98       	cbi	0x01, 6	; 1
    132c:	80 e4       	ldi	r24, 0x40	; 64
    132e:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
    1332:	78 94       	sei
    1334:	08 95       	ret

00001336 <_Z14impulsiToLitrii>:
    1336:	cf 92       	push	r12
    1338:	df 92       	push	r13
    133a:	ef 92       	push	r14
    133c:	ff 92       	push	r15
    133e:	bc 01       	movw	r22, r24
    1340:	99 0f       	add	r25, r25
    1342:	88 0b       	sbc	r24, r24
    1344:	99 0b       	sbc	r25, r25
    1346:	0e 94 16 37 	call	0x6e2c	; 0x6e2c <__floatsisf>
    134a:	6b 01       	movw	r12, r22
    134c:	7c 01       	movw	r14, r24
    134e:	20 e0       	ldi	r18, 0x00	; 0
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	a9 01       	movw	r20, r18
    1354:	0e 94 a8 36 	call	0x6d50	; 0x6d50 <__cmpsf2>
    1358:	87 ff       	sbrs	r24, 7
    135a:	03 c0       	rjmp	.+6      	; 0x1362 <_Z14impulsiToLitrii+0x2c>
    135c:	c1 2c       	mov	r12, r1
    135e:	d1 2c       	mov	r13, r1
    1360:	76 01       	movw	r14, r12
    1362:	60 91 4f 01 	lds	r22, 0x014F	; 0x80014f <ImpulsiLitro>
    1366:	70 91 50 01 	lds	r23, 0x0150	; 0x800150 <ImpulsiLitro+0x1>
    136a:	07 2e       	mov	r0, r23
    136c:	00 0c       	add	r0, r0
    136e:	88 0b       	sbc	r24, r24
    1370:	99 0b       	sbc	r25, r25
    1372:	0e 94 16 37 	call	0x6e2c	; 0x6e2c <__floatsisf>
    1376:	9b 01       	movw	r18, r22
    1378:	ac 01       	movw	r20, r24
    137a:	c7 01       	movw	r24, r14
    137c:	b6 01       	movw	r22, r12
    137e:	0e 94 ac 36 	call	0x6d58	; 0x6d58 <__divsf3>
    1382:	ff 90       	pop	r15
    1384:	ef 90       	pop	r14
    1386:	df 90       	pop	r13
    1388:	cf 90       	pop	r12
    138a:	08 95       	ret

0000138c <_Z18Rele_Abilitazione1ii>:
    138c:	3f 9a       	sbi	0x07, 7	; 7
    138e:	81 30       	cpi	r24, 0x01	; 1
    1390:	91 05       	cpc	r25, r1
    1392:	71 f0       	breq	.+28     	; 0x13b0 <_Z18Rele_Abilitazione1ii+0x24>
    1394:	82 30       	cpi	r24, 0x02	; 2
    1396:	91 05       	cpc	r25, r1
    1398:	e1 f0       	breq	.+56     	; 0x13d2 <_Z18Rele_Abilitazione1ii+0x46>
    139a:	89 2b       	or	r24, r25
    139c:	89 f5       	brne	.+98     	; 0x1400 <_Z18Rele_Abilitazione1ii+0x74>
    139e:	47 98       	cbi	0x08, 7	; 8
    13a0:	2f ef       	ldi	r18, 0xFF	; 255
    13a2:	30 e7       	ldi	r19, 0x70	; 112
    13a4:	42 e0       	ldi	r20, 0x02	; 2
    13a6:	21 50       	subi	r18, 0x01	; 1
    13a8:	30 40       	sbci	r19, 0x00	; 0
    13aa:	40 40       	sbci	r20, 0x00	; 0
    13ac:	e1 f7       	brne	.-8      	; 0x13a6 <_Z18Rele_Abilitazione1ii+0x1a>
    13ae:	0e c0       	rjmp	.+28     	; 0x13cc <_Z18Rele_Abilitazione1ii+0x40>
    13b0:	28 b1       	in	r18, 0x08	; 8
    13b2:	01 c0       	rjmp	.+2      	; 0x13b6 <_Z18Rele_Abilitazione1ii+0x2a>
    13b4:	88 0f       	add	r24, r24
    13b6:	6a 95       	dec	r22
    13b8:	ea f7       	brpl	.-6      	; 0x13b4 <_Z18Rele_Abilitazione1ii+0x28>
    13ba:	82 2b       	or	r24, r18
    13bc:	88 b9       	out	0x08, r24	; 8
    13be:	8f ef       	ldi	r24, 0xFF	; 255
    13c0:	90 e7       	ldi	r25, 0x70	; 112
    13c2:	22 e0       	ldi	r18, 0x02	; 2
    13c4:	81 50       	subi	r24, 0x01	; 1
    13c6:	90 40       	sbci	r25, 0x00	; 0
    13c8:	20 40       	sbci	r18, 0x00	; 0
    13ca:	e1 f7       	brne	.-8      	; 0x13c4 <_Z18Rele_Abilitazione1ii+0x38>
    13cc:	00 c0       	rjmp	.+0      	; 0x13ce <_Z18Rele_Abilitazione1ii+0x42>
    13ce:	00 00       	nop
    13d0:	08 95       	ret
    13d2:	28 b1       	in	r18, 0x08	; 8
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	01 c0       	rjmp	.+2      	; 0x13dc <_Z18Rele_Abilitazione1ii+0x50>
    13da:	88 0f       	add	r24, r24
    13dc:	6a 95       	dec	r22
    13de:	ea f7       	brpl	.-6      	; 0x13da <_Z18Rele_Abilitazione1ii+0x4e>
    13e0:	98 2f       	mov	r25, r24
    13e2:	90 95       	com	r25
    13e4:	92 23       	and	r25, r18
    13e6:	98 b9       	out	0x08, r25	; 8
    13e8:	3f ef       	ldi	r19, 0xFF	; 255
    13ea:	45 ea       	ldi	r20, 0xA5	; 165
    13ec:	2e e0       	ldi	r18, 0x0E	; 14
    13ee:	31 50       	subi	r19, 0x01	; 1
    13f0:	40 40       	sbci	r20, 0x00	; 0
    13f2:	20 40       	sbci	r18, 0x00	; 0
    13f4:	e1 f7       	brne	.-8      	; 0x13ee <_Z18Rele_Abilitazione1ii+0x62>
    13f6:	00 c0       	rjmp	.+0      	; 0x13f8 <_Z18Rele_Abilitazione1ii+0x6c>
    13f8:	00 00       	nop
    13fa:	98 b1       	in	r25, 0x08	; 8
    13fc:	89 2b       	or	r24, r25
    13fe:	88 b9       	out	0x08, r24	; 8
    1400:	08 95       	ret

00001402 <_Z18Rele_Abilitazione2ii>:
    1402:	0f 9a       	sbi	0x01, 7	; 1
    1404:	81 30       	cpi	r24, 0x01	; 1
    1406:	91 05       	cpc	r25, r1
    1408:	b9 f0       	breq	.+46     	; 0x1438 <_Z18Rele_Abilitazione2ii+0x36>
    140a:	82 30       	cpi	r24, 0x02	; 2
    140c:	91 05       	cpc	r25, r1
    140e:	29 f1       	breq	.+74     	; 0x145a <_Z18Rele_Abilitazione2ii+0x58>
    1410:	89 2b       	or	r24, r25
    1412:	d1 f5       	brne	.+116    	; 0x1488 <_Z18Rele_Abilitazione2ii+0x86>
    1414:	22 b1       	in	r18, 0x02	; 2
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	01 c0       	rjmp	.+2      	; 0x141e <_Z18Rele_Abilitazione2ii+0x1c>
    141c:	88 0f       	add	r24, r24
    141e:	6a 95       	dec	r22
    1420:	ea f7       	brpl	.-6      	; 0x141c <_Z18Rele_Abilitazione2ii+0x1a>
    1422:	80 95       	com	r24
    1424:	82 23       	and	r24, r18
    1426:	82 b9       	out	0x02, r24	; 2
    1428:	2f ef       	ldi	r18, 0xFF	; 255
    142a:	30 e7       	ldi	r19, 0x70	; 112
    142c:	42 e0       	ldi	r20, 0x02	; 2
    142e:	21 50       	subi	r18, 0x01	; 1
    1430:	30 40       	sbci	r19, 0x00	; 0
    1432:	40 40       	sbci	r20, 0x00	; 0
    1434:	e1 f7       	brne	.-8      	; 0x142e <_Z18Rele_Abilitazione2ii+0x2c>
    1436:	0e c0       	rjmp	.+28     	; 0x1454 <_Z18Rele_Abilitazione2ii+0x52>
    1438:	22 b1       	in	r18, 0x02	; 2
    143a:	01 c0       	rjmp	.+2      	; 0x143e <_Z18Rele_Abilitazione2ii+0x3c>
    143c:	88 0f       	add	r24, r24
    143e:	6a 95       	dec	r22
    1440:	ea f7       	brpl	.-6      	; 0x143c <_Z18Rele_Abilitazione2ii+0x3a>
    1442:	82 2b       	or	r24, r18
    1444:	82 b9       	out	0x02, r24	; 2
    1446:	8f ef       	ldi	r24, 0xFF	; 255
    1448:	90 e7       	ldi	r25, 0x70	; 112
    144a:	22 e0       	ldi	r18, 0x02	; 2
    144c:	81 50       	subi	r24, 0x01	; 1
    144e:	90 40       	sbci	r25, 0x00	; 0
    1450:	20 40       	sbci	r18, 0x00	; 0
    1452:	e1 f7       	brne	.-8      	; 0x144c <_Z18Rele_Abilitazione2ii+0x4a>
    1454:	00 c0       	rjmp	.+0      	; 0x1456 <_Z18Rele_Abilitazione2ii+0x54>
    1456:	00 00       	nop
    1458:	08 95       	ret
    145a:	22 b1       	in	r18, 0x02	; 2
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	01 c0       	rjmp	.+2      	; 0x1464 <_Z18Rele_Abilitazione2ii+0x62>
    1462:	88 0f       	add	r24, r24
    1464:	6a 95       	dec	r22
    1466:	ea f7       	brpl	.-6      	; 0x1462 <_Z18Rele_Abilitazione2ii+0x60>
    1468:	98 2f       	mov	r25, r24
    146a:	90 95       	com	r25
    146c:	92 23       	and	r25, r18
    146e:	92 b9       	out	0x02, r25	; 2
    1470:	3f ef       	ldi	r19, 0xFF	; 255
    1472:	45 ea       	ldi	r20, 0xA5	; 165
    1474:	2e e0       	ldi	r18, 0x0E	; 14
    1476:	31 50       	subi	r19, 0x01	; 1
    1478:	40 40       	sbci	r20, 0x00	; 0
    147a:	20 40       	sbci	r18, 0x00	; 0
    147c:	e1 f7       	brne	.-8      	; 0x1476 <_Z18Rele_Abilitazione2ii+0x74>
    147e:	00 c0       	rjmp	.+0      	; 0x1480 <_Z18Rele_Abilitazione2ii+0x7e>
    1480:	00 00       	nop
    1482:	92 b1       	in	r25, 0x02	; 2
    1484:	89 2b       	or	r24, r25
    1486:	82 b9       	out	0x02, r24	; 2
    1488:	08 95       	ret

0000148a <_Z12Control_WIFIi>:
    148a:	23 9a       	sbi	0x04, 3	; 4
    148c:	2f ef       	ldi	r18, 0xFF	; 255
    148e:	36 e7       	ldi	r19, 0x76	; 118
    1490:	41 e0       	ldi	r20, 0x01	; 1
    1492:	21 50       	subi	r18, 0x01	; 1
    1494:	30 40       	sbci	r19, 0x00	; 0
    1496:	40 40       	sbci	r20, 0x00	; 0
    1498:	e1 f7       	brne	.-8      	; 0x1492 <_Z12Control_WIFIi+0x8>
    149a:	00 c0       	rjmp	.+0      	; 0x149c <_Z12Control_WIFIi+0x12>
    149c:	00 00       	nop
    149e:	81 30       	cpi	r24, 0x01	; 1
    14a0:	91 05       	cpc	r25, r1
    14a2:	11 f4       	brne	.+4      	; 0x14a8 <_Z12Control_WIFIi+0x1e>
    14a4:	2b 9a       	sbi	0x05, 3	; 5
    14a6:	08 95       	ret
    14a8:	89 2b       	or	r24, r25
    14aa:	09 f4       	brne	.+2      	; 0x14ae <_Z12Control_WIFIi+0x24>
    14ac:	2b 98       	cbi	0x05, 3	; 5
    14ae:	08 95       	ret

000014b0 <_Z6Azzerav>:
    14b0:	6c ee       	ldi	r22, 0xEC	; 236
    14b2:	71 e0       	ldi	r23, 0x01	; 1
    14b4:	87 e2       	ldi	r24, 0x27	; 39
    14b6:	9b e0       	ldi	r25, 0x0B	; 11
    14b8:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringaSEPKc>
    14bc:	10 92 2f 0b 	sts	0x0B2F, r1	; 0x800b2f <impulsi+0x1>
    14c0:	10 92 2e 0b 	sts	0x0B2E, r1	; 0x800b2e <impulsi>
    14c4:	10 92 6f 0b 	sts	0x0B6F, r1	; 0x800b6f <alreadyTimbrata>
    14c8:	67 e1       	ldi	r22, 0x17	; 23
    14ca:	75 e0       	ldi	r23, 0x05	; 5
    14cc:	89 e7       	ldi	r24, 0x79	; 121
    14ce:	9b e0       	ldi	r25, 0x0B	; 11
    14d0:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringaSEPKc>
    14d4:	67 e1       	ldi	r22, 0x17	; 23
    14d6:	75 e0       	ldi	r23, 0x05	; 5
    14d8:	8f e7       	ldi	r24, 0x7F	; 127
    14da:	9b e0       	ldi	r25, 0x0B	; 11
    14dc:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringaSEPKc>
    14e0:	6f e8       	ldi	r22, 0x8F	; 143
    14e2:	78 e0       	ldi	r23, 0x08	; 8
    14e4:	85 e8       	ldi	r24, 0x85	; 133
    14e6:	9b e0       	ldi	r25, 0x0B	; 11
    14e8:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringaSEPKc>
    14ec:	10 92 2d 0b 	sts	0x0B2D, r1	; 0x800b2d <distr_selezionato>
    14f0:	67 e0       	ldi	r22, 0x07	; 7
    14f2:	70 e0       	ldi	r23, 0x00	; 0
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	49 df       	rcall	.-366    	; 0x138c <_Z18Rele_Abilitazione1ii>
    14fa:	67 e0       	ldi	r22, 0x07	; 7
    14fc:	70 e0       	ldi	r23, 0x00	; 0
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	7f df       	rcall	.-258    	; 0x1402 <_Z18Rele_Abilitazione2ii>
    1504:	80 e0       	ldi	r24, 0x00	; 0
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	c0 df       	rcall	.-128    	; 0x148a <_Z12Control_WIFIi>
    150a:	8f e1       	ldi	r24, 0x1F	; 31
    150c:	9e e4       	ldi	r25, 0x4E	; 78
    150e:	01 97       	sbiw	r24, 0x01	; 1
    1510:	f1 f7       	brne	.-4      	; 0x150e <_Z6Azzerav+0x5e>
    1512:	00 c0       	rjmp	.+0      	; 0x1514 <_Z6Azzerav+0x64>
    1514:	00 00       	nop
    1516:	8d ea       	ldi	r24, 0xAD	; 173
    1518:	9a e0       	ldi	r25, 0x0A	; 10
    151a:	0e 94 89 29 	call	0x5312	; 0x5312 <_ZN14EthernetClient5flushEv>
    151e:	8d ea       	ldi	r24, 0xAD	; 173
    1520:	9a e0       	ldi	r25, 0x0A	; 10
    1522:	0e 94 ce 29 	call	0x539c	; 0x539c <_ZN14EthernetClient4stopEv>
    1526:	8f e1       	ldi	r24, 0x1F	; 31
    1528:	9e e4       	ldi	r25, 0x4E	; 78
    152a:	01 97       	sbiw	r24, 0x01	; 1
    152c:	f1 f7       	brne	.-4      	; 0x152a <_Z6Azzerav+0x7a>
    152e:	00 c0       	rjmp	.+0      	; 0x1530 <_Z6Azzerav+0x80>
    1530:	00 00       	nop
    1532:	8a eb       	ldi	r24, 0xBA	; 186
    1534:	9a e0       	ldi	r25, 0x0A	; 10
    1536:	0e 94 89 29 	call	0x5312	; 0x5312 <_ZN14EthernetClient5flushEv>
    153a:	8a eb       	ldi	r24, 0xBA	; 186
    153c:	9a e0       	ldi	r25, 0x0A	; 10
    153e:	0e 94 ce 29 	call	0x539c	; 0x539c <_ZN14EthernetClient4stopEv>
    1542:	10 92 33 0b 	sts	0x0B33, r1	; 0x800b33 <Connected+0x1>
    1546:	10 92 32 0b 	sts	0x0B32, r1	; 0x800b32 <Connected>
    154a:	8f e1       	ldi	r24, 0x1F	; 31
    154c:	9e e4       	ldi	r25, 0x4E	; 78
    154e:	01 97       	sbiw	r24, 0x01	; 1
    1550:	f1 f7       	brne	.-4      	; 0x154e <_Z6Azzerav+0x9e>
    1552:	00 c0       	rjmp	.+0      	; 0x1554 <_Z6Azzerav+0xa4>
    1554:	00 00       	nop
    1556:	2c 98       	cbi	0x05, 4	; 5
    1558:	8f e1       	ldi	r24, 0x1F	; 31
    155a:	9e e4       	ldi	r25, 0x4E	; 78
    155c:	01 97       	sbiw	r24, 0x01	; 1
    155e:	f1 f7       	brne	.-4      	; 0x155c <_Z6Azzerav+0xac>
    1560:	00 c0       	rjmp	.+0      	; 0x1562 <_Z6Azzerav+0xb2>
    1562:	00 00       	nop
    1564:	2c 9a       	sbi	0x05, 4	; 5
    1566:	8f e1       	ldi	r24, 0x1F	; 31
    1568:	9e e4       	ldi	r25, 0x4E	; 78
    156a:	01 97       	sbiw	r24, 0x01	; 1
    156c:	f1 f7       	brne	.-4      	; 0x156a <_Z6Azzerav+0xba>
    156e:	00 c0       	rjmp	.+0      	; 0x1570 <_Z6Azzerav+0xc0>
    1570:	00 00       	nop
    1572:	0e 94 95 01 	call	0x32a	; 0x32a <_ZL11disable_ETHv>
    1576:	8f e1       	ldi	r24, 0x1F	; 31
    1578:	9e e4       	ldi	r25, 0x4E	; 78
    157a:	01 97       	sbiw	r24, 0x01	; 1
    157c:	f1 f7       	brne	.-4      	; 0x157a <_Z6Azzerav+0xca>
    157e:	00 c0       	rjmp	.+0      	; 0x1580 <_Z6Azzerav+0xd0>
    1580:	00 00       	nop
    1582:	0e 94 93 01 	call	0x326	; 0x326 <_ZL10enable_ETHv>
    1586:	82 b1       	in	r24, 0x02	; 2
    1588:	82 b9       	out	0x02, r24	; 2
    158a:	82 b1       	in	r24, 0x02	; 2
    158c:	82 b9       	out	0x02, r24	; 2
    158e:	6c ee       	ldi	r22, 0xEC	; 236
    1590:	71 e0       	ldi	r23, 0x01	; 1
    1592:	85 ee       	ldi	r24, 0xE5	; 229
    1594:	9a e0       	ldi	r25, 0x0A	; 10
    1596:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringaSEPKc>
    159a:	6c ee       	ldi	r22, 0xEC	; 236
    159c:	71 e0       	ldi	r23, 0x01	; 1
    159e:	8b ee       	ldi	r24, 0xEB	; 235
    15a0:	9a e0       	ldi	r25, 0x0A	; 10
    15a2:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringaSEPKc>
    15a6:	6c ee       	ldi	r22, 0xEC	; 236
    15a8:	71 e0       	ldi	r23, 0x01	; 1
    15aa:	8b ee       	ldi	r24, 0xEB	; 235
    15ac:	9a e0       	ldi	r25, 0x0A	; 10
    15ae:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringaSEPKc>
    15b2:	87 e5       	ldi	r24, 0x57	; 87
    15b4:	9b e0       	ldi	r25, 0x0B	; 11
    15b6:	0e 94 91 30 	call	0x6122	; 0x6122 <_ZN3LCD11noBacklightEv>
    15ba:	87 e5       	ldi	r24, 0x57	; 87
    15bc:	9b e0       	ldi	r25, 0x0B	; 11
    15be:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <_ZN3LCD9noDisplayEv>
    15c2:	10 92 9d 0a 	sts	0x0A9D, r1	; 0x800a9d <secs>
    15c6:	10 92 9e 0a 	sts	0x0A9E, r1	; 0x800a9e <secs+0x1>
    15ca:	10 92 9f 0a 	sts	0x0A9F, r1	; 0x800a9f <secs+0x2>
    15ce:	10 92 a0 0a 	sts	0x0AA0, r1	; 0x800aa0 <secs+0x3>
    15d2:	10 92 99 0a 	sts	0x0A99, r1	; 0x800a99 <UltimoPassaggioStato>
    15d6:	10 92 9a 0a 	sts	0x0A9A, r1	; 0x800a9a <UltimoPassaggioStato+0x1>
    15da:	10 92 9b 0a 	sts	0x0A9B, r1	; 0x800a9b <UltimoPassaggioStato+0x2>
    15de:	10 92 9c 0a 	sts	0x0A9C, r1	; 0x800a9c <UltimoPassaggioStato+0x3>
    15e2:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
    15e6:	6c e8       	ldi	r22, 0x8C	; 140
    15e8:	75 e0       	ldi	r23, 0x05	; 5
    15ea:	8e e1       	ldi	r24, 0x1E	; 30
    15ec:	9d e0       	ldi	r25, 0x0D	; 13
    15ee:	0e 94 5c 39 	call	0x72b8	; 0x72b8 <_ZN5Print7printlnEPKc>
    15f2:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
    15f6:	6c ee       	ldi	r22, 0xEC	; 236
    15f8:	71 e0       	ldi	r23, 0x01	; 1
    15fa:	89 e8       	ldi	r24, 0x89	; 137
    15fc:	9a e0       	ldi	r25, 0x0A	; 10
    15fe:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringaSEPKc>
    1602:	8f ef       	ldi	r24, 0xFF	; 255
    1604:	9f ef       	ldi	r25, 0xFF	; 255
    1606:	90 93 31 0b 	sts	0x0B31, r25	; 0x800b31 <stato_procedura+0x1>
    160a:	80 93 30 0b 	sts	0x0B30, r24	; 0x800b30 <stato_procedura>
    160e:	08 95       	ret

00001610 <_Z10inputTargac>:
    1610:	cf 93       	push	r28
    1612:	df 93       	push	r29
    1614:	cd b7       	in	r28, 0x3d	; 61
    1616:	de b7       	in	r29, 0x3e	; 62
    1618:	62 97       	sbiw	r28, 0x12	; 18
    161a:	0f b6       	in	r0, 0x3f	; 63
    161c:	f8 94       	cli
    161e:	de bf       	out	0x3e, r29	; 62
    1620:	0f be       	out	0x3f, r0	; 63
    1622:	cd bf       	out	0x3d, r28	; 61
    1624:	81 34       	cpi	r24, 0x41	; 65
    1626:	21 f1       	breq	.+72     	; 0x1670 <_Z10inputTargac+0x60>
    1628:	d8 f4       	brcc	.+54     	; 0x1660 <_Z10inputTargac+0x50>
    162a:	83 32       	cpi	r24, 0x23	; 35
    162c:	09 f4       	brne	.+2      	; 0x1630 <_Z10inputTargac+0x20>
    162e:	8a c0       	rjmp	.+276    	; 0x1744 <_Z10inputTargac+0x134>
    1630:	8a 32       	cpi	r24, 0x2A	; 42
    1632:	09 f0       	breq	.+2      	; 0x1636 <_Z10inputTargac+0x26>
    1634:	b7 c0       	rjmp	.+366    	; 0x17a4 <_Z10inputTargac+0x194>
    1636:	6c ee       	ldi	r22, 0xEC	; 236
    1638:	71 e0       	ldi	r23, 0x01	; 1
    163a:	89 e8       	ldi	r24, 0x89	; 137
    163c:	9a e0       	ldi	r25, 0x0A	; 10
    163e:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringaSEPKc>
    1642:	61 ea       	ldi	r22, 0xA1	; 161
    1644:	75 e0       	ldi	r23, 0x05	; 5
    1646:	85 ee       	ldi	r24, 0xE5	; 229
    1648:	9a e0       	ldi	r25, 0x0A	; 10
    164a:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringaSEPKc>
    164e:	6c ee       	ldi	r22, 0xEC	; 236
    1650:	71 e0       	ldi	r23, 0x01	; 1
    1652:	8b ee       	ldi	r24, 0xEB	; 235
    1654:	9a e0       	ldi	r25, 0x0A	; 10
    1656:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringaSEPKc>
    165a:	6c ee       	ldi	r22, 0xEC	; 236
    165c:	71 e0       	ldi	r23, 0x01	; 1
    165e:	93 c0       	rjmp	.+294    	; 0x1786 <_Z10inputTargac+0x176>
    1660:	83 34       	cpi	r24, 0x43	; 67
    1662:	09 f4       	brne	.+2      	; 0x1666 <_Z10inputTargac+0x56>
    1664:	51 c0       	rjmp	.+162    	; 0x1708 <_Z10inputTargac+0xf8>
    1666:	a0 f0       	brcs	.+40     	; 0x1690 <_Z10inputTargac+0x80>
    1668:	8e 34       	cpi	r24, 0x4E	; 78
    166a:	09 f4       	brne	.+2      	; 0x166e <_Z10inputTargac+0x5e>
    166c:	dd c0       	rjmp	.+442    	; 0x1828 <_Z10inputTargac+0x218>
    166e:	9a c0       	rjmp	.+308    	; 0x17a4 <_Z10inputTargac+0x194>
    1670:	80 91 8d 0a 	lds	r24, 0x0A8D	; 0x800a8d <TARGA+0x4>
    1674:	90 91 8e 0a 	lds	r25, 0x0A8E	; 0x800a8e <TARGA+0x5>
    1678:	05 97       	sbiw	r24, 0x05	; 5
    167a:	09 f0       	breq	.+2      	; 0x167e <_Z10inputTargac+0x6e>
    167c:	d5 c0       	rjmp	.+426    	; 0x1828 <_Z10inputTargac+0x218>
    167e:	69 e8       	ldi	r22, 0x89	; 137
    1680:	7a e0       	ldi	r23, 0x0A	; 10
    1682:	ce 01       	movw	r24, r28
    1684:	01 96       	adiw	r24, 0x01	; 1
    1686:	0e 94 63 3c 	call	0x78c6	; 0x78c6 <_ZN6StringC1ERKS_>
    168a:	6d e9       	ldi	r22, 0x9D	; 157
    168c:	75 e0       	ldi	r23, 0x05	; 5
    168e:	0f c0       	rjmp	.+30     	; 0x16ae <_Z10inputTargac+0x9e>
    1690:	80 91 8d 0a 	lds	r24, 0x0A8D	; 0x800a8d <TARGA+0x4>
    1694:	90 91 8e 0a 	lds	r25, 0x0A8E	; 0x800a8e <TARGA+0x5>
    1698:	05 97       	sbiw	r24, 0x05	; 5
    169a:	09 f0       	breq	.+2      	; 0x169e <_Z10inputTargac+0x8e>
    169c:	c5 c0       	rjmp	.+394    	; 0x1828 <_Z10inputTargac+0x218>
    169e:	69 e8       	ldi	r22, 0x89	; 137
    16a0:	7a e0       	ldi	r23, 0x0A	; 10
    16a2:	ce 01       	movw	r24, r28
    16a4:	01 96       	adiw	r24, 0x01	; 1
    16a6:	0e 94 63 3c 	call	0x78c6	; 0x78c6 <_ZN6StringC1ERKS_>
    16aa:	6f e9       	ldi	r22, 0x9F	; 159
    16ac:	75 e0       	ldi	r23, 0x05	; 5
    16ae:	ce 01       	movw	r24, r28
    16b0:	01 96       	adiw	r24, 0x01	; 1
    16b2:	0e 94 dd 3d 	call	0x7bba	; 0x7bba <_ZplRK15StringSumHelperPKc>
    16b6:	bc 01       	movw	r22, r24
    16b8:	ce 01       	movw	r24, r28
    16ba:	07 96       	adiw	r24, 0x07	; 7
    16bc:	0e 94 63 3c 	call	0x78c6	; 0x78c6 <_ZN6StringC1ERKS_>
    16c0:	ce 01       	movw	r24, r28
    16c2:	01 96       	adiw	r24, 0x01	; 1
    16c4:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
    16c8:	20 e0       	ldi	r18, 0x00	; 0
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	47 e0       	ldi	r20, 0x07	; 7
    16ce:	50 e0       	ldi	r21, 0x00	; 0
    16d0:	be 01       	movw	r22, r28
    16d2:	63 5f       	subi	r22, 0xF3	; 243
    16d4:	7f 4f       	sbci	r23, 0xFF	; 255
    16d6:	ce 01       	movw	r24, r28
    16d8:	07 96       	adiw	r24, 0x07	; 7
    16da:	0e 94 1e 3e 	call	0x7c3c	; 0x7c3c <_ZNK6String8getBytesEPhjj>
    16de:	be 01       	movw	r22, r28
    16e0:	63 5f       	subi	r22, 0xF3	; 243
    16e2:	7f 4f       	sbci	r23, 0xFF	; 255
    16e4:	ce 01       	movw	r24, r28
    16e6:	01 96       	adiw	r24, 0x01	; 1
    16e8:	8c d8       	rcall	.-3816   	; 0x802 <_Z16scrivi_TAG_MezzoPc>
    16ea:	8f e3       	ldi	r24, 0x3F	; 63
    16ec:	9c e9       	ldi	r25, 0x9C	; 156
    16ee:	01 97       	sbiw	r24, 0x01	; 1
    16f0:	f1 f7       	brne	.-4      	; 0x16ee <_Z10inputTargac+0xde>
    16f2:	00 c0       	rjmp	.+0      	; 0x16f4 <_Z10inputTargac+0xe4>
    16f4:	00 00       	nop
    16f6:	ce 01       	movw	r24, r28
    16f8:	01 96       	adiw	r24, 0x01	; 1
    16fa:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
    16fe:	ce 01       	movw	r24, r28
    1700:	07 96       	adiw	r24, 0x07	; 7
    1702:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
    1706:	90 c0       	rjmp	.+288    	; 0x1828 <_Z10inputTargac+0x218>
    1708:	20 91 8d 0a 	lds	r18, 0x0A8D	; 0x800a8d <TARGA+0x4>
    170c:	30 91 8e 0a 	lds	r19, 0x0A8E	; 0x800a8e <TARGA+0x5>
    1710:	21 15       	cp	r18, r1
    1712:	31 05       	cpc	r19, r1
    1714:	09 f4       	brne	.+2      	; 0x1718 <_Z10inputTargac+0x108>
    1716:	88 c0       	rjmp	.+272    	; 0x1828 <_Z10inputTargac+0x218>
    1718:	21 50       	subi	r18, 0x01	; 1
    171a:	31 09       	sbc	r19, r1
    171c:	40 e0       	ldi	r20, 0x00	; 0
    171e:	50 e0       	ldi	r21, 0x00	; 0
    1720:	69 e8       	ldi	r22, 0x89	; 137
    1722:	7a e0       	ldi	r23, 0x0A	; 10
    1724:	ce 01       	movw	r24, r28
    1726:	01 96       	adiw	r24, 0x01	; 1
    1728:	0e 94 4c 3e 	call	0x7c98	; 0x7c98 <_ZNK6String9substringEjj>
    172c:	be 01       	movw	r22, r28
    172e:	6f 5f       	subi	r22, 0xFF	; 255
    1730:	7f 4f       	sbci	r23, 0xFF	; 255
    1732:	89 e8       	ldi	r24, 0x89	; 137
    1734:	9a e0       	ldi	r25, 0x0A	; 10
    1736:	0e 94 6b 3c 	call	0x78d6	; 0x78d6 <_ZN6StringaSEOS_>
    173a:	ce 01       	movw	r24, r28
    173c:	01 96       	adiw	r24, 0x01	; 1
    173e:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
    1742:	47 c0       	rjmp	.+142    	; 0x17d2 <_Z10inputTargac+0x1c2>
    1744:	80 91 8d 0a 	lds	r24, 0x0A8D	; 0x800a8d <TARGA+0x4>
    1748:	90 91 8e 0a 	lds	r25, 0x0A8E	; 0x800a8e <TARGA+0x5>
    174c:	05 97       	sbiw	r24, 0x05	; 5
    174e:	09 f0       	breq	.+2      	; 0x1752 <_Z10inputTargac+0x142>
    1750:	6b c0       	rjmp	.+214    	; 0x1828 <_Z10inputTargac+0x218>
    1752:	69 e8       	ldi	r22, 0x89	; 137
    1754:	7a e0       	ldi	r23, 0x0A	; 10
    1756:	8f e7       	ldi	r24, 0x7F	; 127
    1758:	9b e0       	ldi	r25, 0x0B	; 11
    175a:	0e 94 4e 3c 	call	0x789c	; 0x789c <_ZN6StringaSERKS_>
    175e:	6f e7       	ldi	r22, 0x7F	; 127
    1760:	7b e0       	ldi	r23, 0x0B	; 11
    1762:	89 e0       	ldi	r24, 0x09	; 9
    1764:	9b e0       	ldi	r25, 0x0B	; 11
    1766:	0e 94 4e 3c 	call	0x789c	; 0x789c <_ZN6StringaSERKS_>
    176a:	62 ee       	ldi	r22, 0xE2	; 226
    176c:	75 e0       	ldi	r23, 0x05	; 5
    176e:	85 ee       	ldi	r24, 0xE5	; 229
    1770:	9a e0       	ldi	r25, 0x0A	; 10
    1772:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringaSEPKc>
    1776:	66 ef       	ldi	r22, 0xF6	; 246
    1778:	75 e0       	ldi	r23, 0x05	; 5
    177a:	8b ee       	ldi	r24, 0xEB	; 235
    177c:	9a e0       	ldi	r25, 0x0A	; 10
    177e:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringaSEPKc>
    1782:	65 e0       	ldi	r22, 0x05	; 5
    1784:	76 e0       	ldi	r23, 0x06	; 6
    1786:	81 ef       	ldi	r24, 0xF1	; 241
    1788:	9a e0       	ldi	r25, 0x0A	; 10
    178a:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringaSEPKc>
    178e:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <TselDistributore>
    1792:	70 91 23 01 	lds	r23, 0x0123	; 0x800123 <TselDistributore+0x1>
    1796:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <TselDistributore+0x2>
    179a:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <TselDistributore+0x3>
    179e:	0e 94 c0 03 	call	0x780	; 0x780 <_Z11avanzaStatom>
    17a2:	42 c0       	rjmp	.+132    	; 0x1828 <_Z10inputTargac+0x218>
    17a4:	68 2f       	mov	r22, r24
    17a6:	ce 01       	movw	r24, r28
    17a8:	01 96       	adiw	r24, 0x01	; 1
    17aa:	0e 94 8b 3c 	call	0x7916	; 0x7916 <_ZN6StringC1Ec>
    17ae:	be 01       	movw	r22, r28
    17b0:	6f 5f       	subi	r22, 0xFF	; 255
    17b2:	7f 4f       	sbci	r23, 0xFF	; 255
    17b4:	89 e8       	ldi	r24, 0x89	; 137
    17b6:	9a e0       	ldi	r25, 0x0A	; 10
    17b8:	0e 94 a6 3d 	call	0x7b4c	; 0x7b4c <_ZN6String6concatERKS_>
    17bc:	ce 01       	movw	r24, r28
    17be:	01 96       	adiw	r24, 0x01	; 1
    17c0:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
    17c4:	4a e0       	ldi	r20, 0x0A	; 10
    17c6:	50 e0       	ldi	r21, 0x00	; 0
    17c8:	60 e0       	ldi	r22, 0x00	; 0
    17ca:	70 e0       	ldi	r23, 0x00	; 0
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z6Buzzerhm>
    17d2:	64 eb       	ldi	r22, 0xB4	; 180
    17d4:	75 e0       	ldi	r23, 0x05	; 5
    17d6:	85 ee       	ldi	r24, 0xE5	; 229
    17d8:	9a e0       	ldi	r25, 0x0A	; 10
    17da:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringaSEPKc>
    17de:	66 ec       	ldi	r22, 0xC6	; 198
    17e0:	75 e0       	ldi	r23, 0x05	; 5
    17e2:	ce 01       	movw	r24, r28
    17e4:	01 96       	adiw	r24, 0x01	; 1
    17e6:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
    17ea:	69 e8       	ldi	r22, 0x89	; 137
    17ec:	7a e0       	ldi	r23, 0x0A	; 10
    17ee:	ce 01       	movw	r24, r28
    17f0:	01 96       	adiw	r24, 0x01	; 1
    17f2:	0e 94 cc 3d 	call	0x7b98	; 0x7b98 <_ZplRK15StringSumHelperRK6String>
    17f6:	bc 01       	movw	r22, r24
    17f8:	8b ee       	ldi	r24, 0xEB	; 235
    17fa:	9a e0       	ldi	r25, 0x0A	; 10
    17fc:	0e 94 4e 3c 	call	0x789c	; 0x789c <_ZN6StringaSERKS_>
    1800:	ce 01       	movw	r24, r28
    1802:	01 96       	adiw	r24, 0x01	; 1
    1804:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
    1808:	6d ec       	ldi	r22, 0xCD	; 205
    180a:	75 e0       	ldi	r23, 0x05	; 5
    180c:	81 ef       	ldi	r24, 0xF1	; 241
    180e:	9a e0       	ldi	r25, 0x0A	; 10
    1810:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringaSEPKc>
    1814:	60 91 30 0b 	lds	r22, 0x0B30	; 0x800b30 <stato_procedura>
    1818:	70 91 31 0b 	lds	r23, 0x0B31	; 0x800b31 <stato_procedura+0x1>
    181c:	4a e0       	ldi	r20, 0x0A	; 10
    181e:	50 e0       	ldi	r21, 0x00	; 0
    1820:	8f ed       	ldi	r24, 0xDF	; 223
    1822:	9a e0       	ldi	r25, 0x0A	; 10
    1824:	0e 94 8b 03 	call	0x716	; 0x716 <_Z10displayLCDP6Stringii>
    1828:	62 96       	adiw	r28, 0x12	; 18
    182a:	0f b6       	in	r0, 0x3f	; 63
    182c:	f8 94       	cli
    182e:	de bf       	out	0x3e, r29	; 62
    1830:	0f be       	out	0x3f, r0	; 63
    1832:	cd bf       	out	0x3d, r28	; 61
    1834:	df 91       	pop	r29
    1836:	cf 91       	pop	r28
    1838:	08 95       	ret

0000183a <_Z7inputKMc>:
    183a:	cf 93       	push	r28
    183c:	df 93       	push	r29
    183e:	00 d0       	rcall	.+0      	; 0x1840 <_Z7inputKMc+0x6>
    1840:	00 d0       	rcall	.+0      	; 0x1842 <_Z7inputKMc+0x8>
    1842:	00 d0       	rcall	.+0      	; 0x1844 <_Z7inputKMc+0xa>
    1844:	cd b7       	in	r28, 0x3d	; 61
    1846:	de b7       	in	r29, 0x3e	; 62
    1848:	83 34       	cpi	r24, 0x43	; 67
    184a:	60 f4       	brcc	.+24     	; 0x1864 <_Z7inputKMc+0x2a>
    184c:	81 34       	cpi	r24, 0x41	; 65
    184e:	08 f0       	brcs	.+2      	; 0x1852 <_Z7inputKMc+0x18>
    1850:	c6 c0       	rjmp	.+396    	; 0x19de <_Z7inputKMc+0x1a4>
    1852:	8a 32       	cpi	r24, 0x2A	; 42
    1854:	09 f4       	brne	.+2      	; 0x1858 <_Z7inputKMc+0x1e>
    1856:	c3 c0       	rjmp	.+390    	; 0x19de <_Z7inputKMc+0x1a4>
    1858:	8e 32       	cpi	r24, 0x2E	; 46
    185a:	09 f4       	brne	.+2      	; 0x185e <_Z7inputKMc+0x24>
    185c:	c0 c0       	rjmp	.+384    	; 0x19de <_Z7inputKMc+0x1a4>
    185e:	83 32       	cpi	r24, 0x23	; 35
    1860:	29 f1       	breq	.+74     	; 0x18ac <_Z7inputKMc+0x72>
    1862:	7b c0       	rjmp	.+246    	; 0x195a <_Z7inputKMc+0x120>
    1864:	83 34       	cpi	r24, 0x43	; 67
    1866:	21 f0       	breq	.+8      	; 0x1870 <_Z7inputKMc+0x36>
    1868:	8e 34       	cpi	r24, 0x4E	; 78
    186a:	09 f0       	breq	.+2      	; 0x186e <_Z7inputKMc+0x34>
    186c:	76 c0       	rjmp	.+236    	; 0x195a <_Z7inputKMc+0x120>
    186e:	b7 c0       	rjmp	.+366    	; 0x19de <_Z7inputKMc+0x1a4>
    1870:	20 91 87 0a 	lds	r18, 0x0A87	; 0x800a87 <KM+0x4>
    1874:	30 91 88 0a 	lds	r19, 0x0A88	; 0x800a88 <KM+0x5>
    1878:	21 15       	cp	r18, r1
    187a:	31 05       	cpc	r19, r1
    187c:	09 f4       	brne	.+2      	; 0x1880 <_Z7inputKMc+0x46>
    187e:	84 c0       	rjmp	.+264    	; 0x1988 <_Z7inputKMc+0x14e>
    1880:	21 50       	subi	r18, 0x01	; 1
    1882:	31 09       	sbc	r19, r1
    1884:	40 e0       	ldi	r20, 0x00	; 0
    1886:	50 e0       	ldi	r21, 0x00	; 0
    1888:	63 e8       	ldi	r22, 0x83	; 131
    188a:	7a e0       	ldi	r23, 0x0A	; 10
    188c:	ce 01       	movw	r24, r28
    188e:	01 96       	adiw	r24, 0x01	; 1
    1890:	0e 94 4c 3e 	call	0x7c98	; 0x7c98 <_ZNK6String9substringEjj>
    1894:	be 01       	movw	r22, r28
    1896:	6f 5f       	subi	r22, 0xFF	; 255
    1898:	7f 4f       	sbci	r23, 0xFF	; 255
    189a:	83 e8       	ldi	r24, 0x83	; 131
    189c:	9a e0       	ldi	r25, 0x0A	; 10
    189e:	0e 94 6b 3c 	call	0x78d6	; 0x78d6 <_ZN6StringaSEOS_>
    18a2:	ce 01       	movw	r24, r28
    18a4:	01 96       	adiw	r24, 0x01	; 1
    18a6:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
    18aa:	6e c0       	rjmp	.+220    	; 0x1988 <_Z7inputKMc+0x14e>
    18ac:	80 91 87 0a 	lds	r24, 0x0A87	; 0x800a87 <KM+0x4>
    18b0:	90 91 88 0a 	lds	r25, 0x0A88	; 0x800a88 <KM+0x5>
    18b4:	04 97       	sbiw	r24, 0x04	; 4
    18b6:	09 f0       	breq	.+2      	; 0x18ba <_Z7inputKMc+0x80>
    18b8:	92 c0       	rjmp	.+292    	; 0x19de <_Z7inputKMc+0x1a4>
    18ba:	6d e9       	ldi	r22, 0x9D	; 157
    18bc:	75 e0       	ldi	r23, 0x05	; 5
    18be:	89 e7       	ldi	r24, 0x79	; 121
    18c0:	9b e0       	ldi	r25, 0x0B	; 11
    18c2:	0e 94 00 3e 	call	0x7c00	; 0x7c00 <_ZNK6String6equalsEPKc>
    18c6:	88 23       	and	r24, r24
    18c8:	41 f0       	breq	.+16     	; 0x18da <_Z7inputKMc+0xa0>
    18ca:	67 e0       	ldi	r22, 0x07	; 7
    18cc:	70 e0       	ldi	r23, 0x00	; 0
    18ce:	80 e0       	ldi	r24, 0x00	; 0
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	5c dd       	rcall	.-1352   	; 0x138c <_Z18Rele_Abilitazione1ii>
    18d4:	6d ef       	ldi	r22, 0xFD	; 253
    18d6:	75 e0       	ldi	r23, 0x05	; 5
    18d8:	0f c0       	rjmp	.+30     	; 0x18f8 <_Z7inputKMc+0xbe>
    18da:	6f e9       	ldi	r22, 0x9F	; 159
    18dc:	75 e0       	ldi	r23, 0x05	; 5
    18de:	89 e7       	ldi	r24, 0x79	; 121
    18e0:	9b e0       	ldi	r25, 0x0B	; 11
    18e2:	0e 94 00 3e 	call	0x7c00	; 0x7c00 <_ZNK6String6equalsEPKc>
    18e6:	88 23       	and	r24, r24
    18e8:	59 f0       	breq	.+22     	; 0x1900 <_Z7inputKMc+0xc6>
    18ea:	67 e0       	ldi	r22, 0x07	; 7
    18ec:	70 e0       	ldi	r23, 0x00	; 0
    18ee:	80 e0       	ldi	r24, 0x00	; 0
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	87 dd       	rcall	.-1266   	; 0x1402 <_Z18Rele_Abilitazione2ii>
    18f4:	6c e0       	ldi	r22, 0x0C	; 12
    18f6:	76 e0       	ldi	r23, 0x06	; 6
    18f8:	81 ef       	ldi	r24, 0xF1	; 241
    18fa:	9a e0       	ldi	r25, 0x0A	; 10
    18fc:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringaSEPKc>
    1900:	63 e8       	ldi	r22, 0x83	; 131
    1902:	7a e0       	ldi	r23, 0x0A	; 10
    1904:	85 e8       	ldi	r24, 0x85	; 133
    1906:	9b e0       	ldi	r25, 0x0B	; 11
    1908:	0e 94 4e 3c 	call	0x789c	; 0x789c <_ZN6StringaSERKS_>
    190c:	65 e8       	ldi	r22, 0x85	; 133
    190e:	7b e0       	ldi	r23, 0x0B	; 11
    1910:	8b e1       	ldi	r24, 0x1B	; 27
    1912:	9b e0       	ldi	r25, 0x0B	; 11
    1914:	0e 94 4e 3c 	call	0x789c	; 0x789c <_ZN6StringaSERKS_>
    1918:	64 e3       	ldi	r22, 0x34	; 52
    191a:	76 e0       	ldi	r23, 0x06	; 6
    191c:	85 ee       	ldi	r24, 0xE5	; 229
    191e:	9a e0       	ldi	r25, 0x0A	; 10
    1920:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringaSEPKc>
    1924:	6c ee       	ldi	r22, 0xEC	; 236
    1926:	71 e0       	ldi	r23, 0x01	; 1
    1928:	8b ee       	ldi	r24, 0xEB	; 235
    192a:	9a e0       	ldi	r25, 0x0A	; 10
    192c:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringaSEPKc>
    1930:	0e 94 95 01 	call	0x32a	; 0x32a <_ZL11disable_ETHv>
    1934:	8f e3       	ldi	r24, 0x3F	; 63
    1936:	9f e1       	ldi	r25, 0x1F	; 31
    1938:	01 97       	sbiw	r24, 0x01	; 1
    193a:	f1 f7       	brne	.-4      	; 0x1938 <_Z7inputKMc+0xfe>
    193c:	00 c0       	rjmp	.+0      	; 0x193e <_Z7inputKMc+0x104>
    193e:	00 00       	nop
    1940:	0e 94 93 01 	call	0x326	; 0x326 <_ZL10enable_ETHv>
    1944:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <TsgancioPistola>
    1948:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <TsgancioPistola+0x1>
    194c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <TsgancioPistola+0x2>
    1950:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <TsgancioPistola+0x3>
    1954:	0e 94 c0 03 	call	0x780	; 0x780 <_Z11avanzaStatom>
    1958:	42 c0       	rjmp	.+132    	; 0x19de <_Z7inputKMc+0x1a4>
    195a:	68 2f       	mov	r22, r24
    195c:	ce 01       	movw	r24, r28
    195e:	01 96       	adiw	r24, 0x01	; 1
    1960:	0e 94 8b 3c 	call	0x7916	; 0x7916 <_ZN6StringC1Ec>
    1964:	be 01       	movw	r22, r28
    1966:	6f 5f       	subi	r22, 0xFF	; 255
    1968:	7f 4f       	sbci	r23, 0xFF	; 255
    196a:	83 e8       	ldi	r24, 0x83	; 131
    196c:	9a e0       	ldi	r25, 0x0A	; 10
    196e:	0e 94 a6 3d 	call	0x7b4c	; 0x7b4c <_ZN6String6concatERKS_>
    1972:	ce 01       	movw	r24, r28
    1974:	01 96       	adiw	r24, 0x01	; 1
    1976:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
    197a:	4a e0       	ldi	r20, 0x0A	; 10
    197c:	50 e0       	ldi	r21, 0x00	; 0
    197e:	60 e0       	ldi	r22, 0x00	; 0
    1980:	70 e0       	ldi	r23, 0x00	; 0
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z6Buzzerhm>
    1988:	64 e1       	ldi	r22, 0x14	; 20
    198a:	76 e0       	ldi	r23, 0x06	; 6
    198c:	85 ee       	ldi	r24, 0xE5	; 229
    198e:	9a e0       	ldi	r25, 0x0A	; 10
    1990:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringaSEPKc>
    1994:	65 e2       	ldi	r22, 0x25	; 37
    1996:	76 e0       	ldi	r23, 0x06	; 6
    1998:	ce 01       	movw	r24, r28
    199a:	01 96       	adiw	r24, 0x01	; 1
    199c:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
    19a0:	63 e8       	ldi	r22, 0x83	; 131
    19a2:	7a e0       	ldi	r23, 0x0A	; 10
    19a4:	ce 01       	movw	r24, r28
    19a6:	01 96       	adiw	r24, 0x01	; 1
    19a8:	0e 94 cc 3d 	call	0x7b98	; 0x7b98 <_ZplRK15StringSumHelperRK6String>
    19ac:	bc 01       	movw	r22, r24
    19ae:	8b ee       	ldi	r24, 0xEB	; 235
    19b0:	9a e0       	ldi	r25, 0x0A	; 10
    19b2:	0e 94 4e 3c 	call	0x789c	; 0x789c <_ZN6StringaSERKS_>
    19b6:	ce 01       	movw	r24, r28
    19b8:	01 96       	adiw	r24, 0x01	; 1
    19ba:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
    19be:	69 e2       	ldi	r22, 0x29	; 41
    19c0:	76 e0       	ldi	r23, 0x06	; 6
    19c2:	81 ef       	ldi	r24, 0xF1	; 241
    19c4:	9a e0       	ldi	r25, 0x0A	; 10
    19c6:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringaSEPKc>
    19ca:	60 91 30 0b 	lds	r22, 0x0B30	; 0x800b30 <stato_procedura>
    19ce:	70 91 31 0b 	lds	r23, 0x0B31	; 0x800b31 <stato_procedura+0x1>
    19d2:	4a e0       	ldi	r20, 0x0A	; 10
    19d4:	50 e0       	ldi	r21, 0x00	; 0
    19d6:	8f ed       	ldi	r24, 0xDF	; 223
    19d8:	9a e0       	ldi	r25, 0x0A	; 10
    19da:	0e 94 8b 03 	call	0x716	; 0x716 <_Z10displayLCDP6Stringii>
    19de:	26 96       	adiw	r28, 0x06	; 6
    19e0:	0f b6       	in	r0, 0x3f	; 63
    19e2:	f8 94       	cli
    19e4:	de bf       	out	0x3e, r29	; 62
    19e6:	0f be       	out	0x3f, r0	; 63
    19e8:	cd bf       	out	0x3d, r28	; 61
    19ea:	df 91       	pop	r29
    19ec:	cf 91       	pop	r28
    19ee:	08 95       	ret

000019f0 <_Z25read_eeprom_string_struct20ParametriCCEC_struct>:
    19f0:	4f 92       	push	r4
    19f2:	5f 92       	push	r5
    19f4:	6f 92       	push	r6
    19f6:	7f 92       	push	r7
    19f8:	8f 92       	push	r8
    19fa:	9f 92       	push	r9
    19fc:	af 92       	push	r10
    19fe:	bf 92       	push	r11
    1a00:	cf 92       	push	r12
    1a02:	df 92       	push	r13
    1a04:	ef 92       	push	r14
    1a06:	ff 92       	push	r15
    1a08:	0f 93       	push	r16
    1a0a:	1f 93       	push	r17
    1a0c:	cf 93       	push	r28
    1a0e:	df 93       	push	r29
    1a10:	00 d0       	rcall	.+0      	; 0x1a12 <_Z25read_eeprom_string_struct20ParametriCCEC_struct+0x22>
    1a12:	00 d0       	rcall	.+0      	; 0x1a14 <_Z25read_eeprom_string_struct20ParametriCCEC_struct+0x24>
    1a14:	00 d0       	rcall	.+0      	; 0x1a16 <_Z25read_eeprom_string_struct20ParametriCCEC_struct+0x26>
    1a16:	cd b7       	in	r28, 0x3d	; 61
    1a18:	de b7       	in	r29, 0x3e	; 62
    1a1a:	7c 01       	movw	r14, r24
    1a1c:	5b 01       	movw	r10, r22
    1a1e:	4d b6       	in	r4, 0x3d	; 61
    1a20:	5e b6       	in	r5, 0x3e	; 62
    1a22:	68 e5       	ldi	r22, 0x58	; 88
    1a24:	77 e0       	ldi	r23, 0x07	; 7
    1a26:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
    1a2a:	f5 01       	movw	r30, r10
    1a2c:	c2 84       	ldd	r12, Z+10	; 0x0a
    1a2e:	d3 84       	ldd	r13, Z+11	; 0x0b
    1a30:	8d b7       	in	r24, 0x3d	; 61
    1a32:	9e b7       	in	r25, 0x3e	; 62
    1a34:	8c 19       	sub	r24, r12
    1a36:	9d 09       	sbc	r25, r13
    1a38:	0f b6       	in	r0, 0x3f	; 63
    1a3a:	f8 94       	cli
    1a3c:	9e bf       	out	0x3e, r25	; 62
    1a3e:	0f be       	out	0x3f, r0	; 63
    1a40:	8d bf       	out	0x3d, r24	; 61
    1a42:	ed b7       	in	r30, 0x3d	; 61
    1a44:	fe b7       	in	r31, 0x3e	; 62
    1a46:	31 96       	adiw	r30, 0x01	; 1
    1a48:	4f 01       	movw	r8, r30
    1a4a:	3f 01       	movw	r6, r30
    1a4c:	f5 01       	movw	r30, r10
    1a4e:	04 85       	ldd	r16, Z+12	; 0x0c
    1a50:	15 85       	ldd	r17, Z+13	; 0x0d
    1a52:	c0 0e       	add	r12, r16
    1a54:	d1 1e       	adc	r13, r17
    1a56:	0c 15       	cp	r16, r12
    1a58:	1d 05       	cpc	r17, r13
    1a5a:	4c f4       	brge	.+18     	; 0x1a6e <_Z25read_eeprom_string_struct20ParametriCCEC_struct+0x7e>
    1a5c:	c8 01       	movw	r24, r16
    1a5e:	0e 94 99 45 	call	0x8b32	; 0x8b32 <eeprom_read_byte>
    1a62:	f3 01       	movw	r30, r6
    1a64:	81 93       	st	Z+, r24
    1a66:	3f 01       	movw	r6, r30
    1a68:	0f 5f       	subi	r16, 0xFF	; 255
    1a6a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a6c:	f4 cf       	rjmp	.-24     	; 0x1a56 <_Z25read_eeprom_string_struct20ParametriCCEC_struct+0x66>
    1a6e:	6f ee       	ldi	r22, 0xEF	; 239
    1a70:	71 e0       	ldi	r23, 0x01	; 1
    1a72:	8e e1       	ldi	r24, 0x1E	; 30
    1a74:	9d e0       	ldi	r25, 0x0D	; 13
    1a76:	0e 94 5c 39 	call	0x72b8	; 0x72b8 <_ZN5Print7printlnEPKc>
    1a7a:	6f ee       	ldi	r22, 0xEF	; 239
    1a7c:	71 e0       	ldi	r23, 0x01	; 1
    1a7e:	8e e1       	ldi	r24, 0x1E	; 30
    1a80:	9d e0       	ldi	r25, 0x0D	; 13
    1a82:	0e 94 5c 39 	call	0x72b8	; 0x72b8 <_ZN5Print7printlnEPKc>
    1a86:	b4 01       	movw	r22, r8
    1a88:	ce 01       	movw	r24, r28
    1a8a:	01 96       	adiw	r24, 0x01	; 1
    1a8c:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
    1a90:	be 01       	movw	r22, r28
    1a92:	6f 5f       	subi	r22, 0xFF	; 255
    1a94:	7f 4f       	sbci	r23, 0xFF	; 255
    1a96:	c7 01       	movw	r24, r14
    1a98:	0e 94 6b 3c 	call	0x78d6	; 0x78d6 <_ZN6StringaSEOS_>
    1a9c:	ce 01       	movw	r24, r28
    1a9e:	01 96       	adiw	r24, 0x01	; 1
    1aa0:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
    1aa4:	b5 01       	movw	r22, r10
    1aa6:	ce 01       	movw	r24, r28
    1aa8:	01 96       	adiw	r24, 0x01	; 1
    1aaa:	0e 94 63 3c 	call	0x78c6	; 0x78c6 <_ZN6StringC1ERKS_>
    1aae:	64 e2       	ldi	r22, 0x24	; 36
    1ab0:	78 e0       	ldi	r23, 0x08	; 8
    1ab2:	ce 01       	movw	r24, r28
    1ab4:	01 96       	adiw	r24, 0x01	; 1
    1ab6:	0e 94 dd 3d 	call	0x7bba	; 0x7bba <_ZplRK15StringSumHelperPKc>
    1aba:	bc 01       	movw	r22, r24
    1abc:	8e e1       	ldi	r24, 0x1E	; 30
    1abe:	9d e0       	ldi	r25, 0x0D	; 13
    1ac0:	0e 94 23 39 	call	0x7246	; 0x7246 <_ZN5Print5printERK6String>
    1ac4:	ce 01       	movw	r24, r28
    1ac6:	01 96       	adiw	r24, 0x01	; 1
    1ac8:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
    1acc:	b7 01       	movw	r22, r14
    1ace:	8e e1       	ldi	r24, 0x1E	; 30
    1ad0:	9d e0       	ldi	r25, 0x0D	; 13
    1ad2:	0e 94 4c 39 	call	0x7298	; 0x7298 <_ZN5Print7printlnERK6String>
    1ad6:	c7 01       	movw	r24, r14
    1ad8:	0f b6       	in	r0, 0x3f	; 63
    1ada:	f8 94       	cli
    1adc:	5e be       	out	0x3e, r5	; 62
    1ade:	0f be       	out	0x3f, r0	; 63
    1ae0:	4d be       	out	0x3d, r4	; 61
    1ae2:	26 96       	adiw	r28, 0x06	; 6
    1ae4:	0f b6       	in	r0, 0x3f	; 63
    1ae6:	f8 94       	cli
    1ae8:	de bf       	out	0x3e, r29	; 62
    1aea:	0f be       	out	0x3f, r0	; 63
    1aec:	cd bf       	out	0x3d, r28	; 61
    1aee:	df 91       	pop	r29
    1af0:	cf 91       	pop	r28
    1af2:	1f 91       	pop	r17
    1af4:	0f 91       	pop	r16
    1af6:	ff 90       	pop	r15
    1af8:	ef 90       	pop	r14
    1afa:	df 90       	pop	r13
    1afc:	cf 90       	pop	r12
    1afe:	bf 90       	pop	r11
    1b00:	af 90       	pop	r10
    1b02:	9f 90       	pop	r9
    1b04:	8f 90       	pop	r8
    1b06:	7f 90       	pop	r7
    1b08:	6f 90       	pop	r6
    1b0a:	5f 90       	pop	r5
    1b0c:	4f 90       	pop	r4
    1b0e:	08 95       	ret

00001b10 <_Z18read_eeprom_stringii>:
    1b10:	4f 92       	push	r4
    1b12:	5f 92       	push	r5
    1b14:	6f 92       	push	r6
    1b16:	7f 92       	push	r7
    1b18:	8f 92       	push	r8
    1b1a:	9f 92       	push	r9
    1b1c:	af 92       	push	r10
    1b1e:	bf 92       	push	r11
    1b20:	cf 92       	push	r12
    1b22:	df 92       	push	r13
    1b24:	ef 92       	push	r14
    1b26:	ff 92       	push	r15
    1b28:	0f 93       	push	r16
    1b2a:	1f 93       	push	r17
    1b2c:	cf 93       	push	r28
    1b2e:	df 93       	push	r29
    1b30:	cd b7       	in	r28, 0x3d	; 61
    1b32:	de b7       	in	r29, 0x3e	; 62
    1b34:	2c 97       	sbiw	r28, 0x0c	; 12
    1b36:	0f b6       	in	r0, 0x3f	; 63
    1b38:	f8 94       	cli
    1b3a:	de bf       	out	0x3e, r29	; 62
    1b3c:	0f be       	out	0x3f, r0	; 63
    1b3e:	cd bf       	out	0x3d, r28	; 61
    1b40:	7c 01       	movw	r14, r24
    1b42:	6b 01       	movw	r12, r22
    1b44:	2a 01       	movw	r4, r20
    1b46:	6d b6       	in	r6, 0x3d	; 61
    1b48:	7e b6       	in	r7, 0x3e	; 62
    1b4a:	68 e5       	ldi	r22, 0x58	; 88
    1b4c:	77 e0       	ldi	r23, 0x07	; 7
    1b4e:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
    1b52:	8d b7       	in	r24, 0x3d	; 61
    1b54:	9e b7       	in	r25, 0x3e	; 62
    1b56:	8c 19       	sub	r24, r12
    1b58:	9d 09       	sbc	r25, r13
    1b5a:	0f b6       	in	r0, 0x3f	; 63
    1b5c:	f8 94       	cli
    1b5e:	9e bf       	out	0x3e, r25	; 62
    1b60:	0f be       	out	0x3f, r0	; 63
    1b62:	8d bf       	out	0x3d, r24	; 61
    1b64:	ed b7       	in	r30, 0x3d	; 61
    1b66:	fe b7       	in	r31, 0x3e	; 62
    1b68:	31 96       	adiw	r30, 0x01	; 1
    1b6a:	5f 01       	movw	r10, r30
    1b6c:	6f ee       	ldi	r22, 0xEF	; 239
    1b6e:	71 e0       	ldi	r23, 0x01	; 1
    1b70:	8e e1       	ldi	r24, 0x1E	; 30
    1b72:	9d e0       	ldi	r25, 0x0D	; 13
    1b74:	0e 94 5c 39 	call	0x72b8	; 0x72b8 <_ZN5Print7printlnEPKc>
    1b78:	64 e4       	ldi	r22, 0x44	; 68
    1b7a:	76 e0       	ldi	r23, 0x06	; 6
    1b7c:	8e e1       	ldi	r24, 0x1E	; 30
    1b7e:	9d e0       	ldi	r25, 0x0D	; 13
    1b80:	0e 94 5c 39 	call	0x72b8	; 0x72b8 <_ZN5Print7printlnEPKc>
    1b84:	6f ee       	ldi	r22, 0xEF	; 239
    1b86:	71 e0       	ldi	r23, 0x01	; 1
    1b88:	8e e1       	ldi	r24, 0x1E	; 30
    1b8a:	9d e0       	ldi	r25, 0x0D	; 13
    1b8c:	0e 94 5c 39 	call	0x72b8	; 0x72b8 <_ZN5Print7printlnEPKc>
    1b90:	45 01       	movw	r8, r10
    1b92:	82 01       	movw	r16, r4
    1b94:	c4 0c       	add	r12, r4
    1b96:	d5 1c       	adc	r13, r5
    1b98:	0c 15       	cp	r16, r12
    1b9a:	1d 05       	cpc	r17, r13
    1b9c:	5c f5       	brge	.+86     	; 0x1bf4 <_Z18read_eeprom_stringii+0xe4>
    1b9e:	c8 01       	movw	r24, r16
    1ba0:	0e 94 99 45 	call	0x8b32	; 0x8b32 <eeprom_read_byte>
    1ba4:	f4 01       	movw	r30, r8
    1ba6:	81 93       	st	Z+, r24
    1ba8:	4f 01       	movw	r8, r30
    1baa:	88 23       	and	r24, r24
    1bac:	01 f1       	breq	.+64     	; 0x1bee <_Z18read_eeprom_stringii+0xde>
    1bae:	4a e0       	ldi	r20, 0x0A	; 10
    1bb0:	68 2f       	mov	r22, r24
    1bb2:	ce 01       	movw	r24, r28
    1bb4:	07 96       	adiw	r24, 0x07	; 7
    1bb6:	0e 94 a2 3c 	call	0x7944	; 0x7944 <_ZN6StringC1Ehh>
    1bba:	6f ee       	ldi	r22, 0xEF	; 239
    1bbc:	71 e0       	ldi	r23, 0x01	; 1
    1bbe:	ce 01       	movw	r24, r28
    1bc0:	01 96       	adiw	r24, 0x01	; 1
    1bc2:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
    1bc6:	be 01       	movw	r22, r28
    1bc8:	69 5f       	subi	r22, 0xF9	; 249
    1bca:	7f 4f       	sbci	r23, 0xFF	; 255
    1bcc:	ce 01       	movw	r24, r28
    1bce:	01 96       	adiw	r24, 0x01	; 1
    1bd0:	0e 94 cc 3d 	call	0x7b98	; 0x7b98 <_ZplRK15StringSumHelperRK6String>
    1bd4:	bc 01       	movw	r22, r24
    1bd6:	8e e1       	ldi	r24, 0x1E	; 30
    1bd8:	9d e0       	ldi	r25, 0x0D	; 13
    1bda:	0e 94 23 39 	call	0x7246	; 0x7246 <_ZN5Print5printERK6String>
    1bde:	ce 01       	movw	r24, r28
    1be0:	01 96       	adiw	r24, 0x01	; 1
    1be2:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
    1be6:	ce 01       	movw	r24, r28
    1be8:	07 96       	adiw	r24, 0x07	; 7
    1bea:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
    1bee:	0f 5f       	subi	r16, 0xFF	; 255
    1bf0:	1f 4f       	sbci	r17, 0xFF	; 255
    1bf2:	d2 cf       	rjmp	.-92     	; 0x1b98 <_Z18read_eeprom_stringii+0x88>
    1bf4:	6f ee       	ldi	r22, 0xEF	; 239
    1bf6:	71 e0       	ldi	r23, 0x01	; 1
    1bf8:	8e e1       	ldi	r24, 0x1E	; 30
    1bfa:	9d e0       	ldi	r25, 0x0D	; 13
    1bfc:	0e 94 5c 39 	call	0x72b8	; 0x72b8 <_ZN5Print7printlnEPKc>
    1c00:	6f ee       	ldi	r22, 0xEF	; 239
    1c02:	71 e0       	ldi	r23, 0x01	; 1
    1c04:	8e e1       	ldi	r24, 0x1E	; 30
    1c06:	9d e0       	ldi	r25, 0x0D	; 13
    1c08:	0e 94 5c 39 	call	0x72b8	; 0x72b8 <_ZN5Print7printlnEPKc>
    1c0c:	b5 01       	movw	r22, r10
    1c0e:	ce 01       	movw	r24, r28
    1c10:	01 96       	adiw	r24, 0x01	; 1
    1c12:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
    1c16:	be 01       	movw	r22, r28
    1c18:	6f 5f       	subi	r22, 0xFF	; 255
    1c1a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c1c:	c7 01       	movw	r24, r14
    1c1e:	0e 94 6b 3c 	call	0x78d6	; 0x78d6 <_ZN6StringaSEOS_>
    1c22:	ce 01       	movw	r24, r28
    1c24:	01 96       	adiw	r24, 0x01	; 1
    1c26:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
    1c2a:	67 e5       	ldi	r22, 0x57	; 87
    1c2c:	76 e0       	ldi	r23, 0x06	; 6
    1c2e:	8e e1       	ldi	r24, 0x1E	; 30
    1c30:	9d e0       	ldi	r25, 0x0D	; 13
    1c32:	0e 94 31 39 	call	0x7262	; 0x7262 <_ZN5Print5printEPKc>
    1c36:	b7 01       	movw	r22, r14
    1c38:	8e e1       	ldi	r24, 0x1E	; 30
    1c3a:	9d e0       	ldi	r25, 0x0D	; 13
    1c3c:	0e 94 4c 39 	call	0x7298	; 0x7298 <_ZN5Print7printlnERK6String>
    1c40:	c7 01       	movw	r24, r14
    1c42:	0f b6       	in	r0, 0x3f	; 63
    1c44:	f8 94       	cli
    1c46:	7e be       	out	0x3e, r7	; 62
    1c48:	0f be       	out	0x3f, r0	; 63
    1c4a:	6d be       	out	0x3d, r6	; 61
    1c4c:	2c 96       	adiw	r28, 0x0c	; 12
    1c4e:	0f b6       	in	r0, 0x3f	; 63
    1c50:	f8 94       	cli
    1c52:	de bf       	out	0x3e, r29	; 62
    1c54:	0f be       	out	0x3f, r0	; 63
    1c56:	cd bf       	out	0x3d, r28	; 61
    1c58:	df 91       	pop	r29
    1c5a:	cf 91       	pop	r28
    1c5c:	1f 91       	pop	r17
    1c5e:	0f 91       	pop	r16
    1c60:	ff 90       	pop	r15
    1c62:	ef 90       	pop	r14
    1c64:	df 90       	pop	r13
    1c66:	cf 90       	pop	r12
    1c68:	bf 90       	pop	r11
    1c6a:	af 90       	pop	r10
    1c6c:	9f 90       	pop	r9
    1c6e:	8f 90       	pop	r8
    1c70:	7f 90       	pop	r7
    1c72:	6f 90       	pop	r6
    1c74:	5f 90       	pop	r5
    1c76:	4f 90       	pop	r4
    1c78:	08 95       	ret

00001c7a <_Z19write_eeprom_string6Stringii>:

bool write_eeprom_string(String erog,int lunBuffer,int start_ind) {
    1c7a:	8f 92       	push	r8
    1c7c:	9f 92       	push	r9
    1c7e:	af 92       	push	r10
    1c80:	bf 92       	push	r11
    1c82:	cf 92       	push	r12
    1c84:	df 92       	push	r13
    1c86:	ef 92       	push	r14
    1c88:	ff 92       	push	r15
    1c8a:	0f 93       	push	r16
    1c8c:	1f 93       	push	r17
    1c8e:	cf 93       	push	r28
    1c90:	df 93       	push	r29
    1c92:	cd b7       	in	r28, 0x3d	; 61
    1c94:	de b7       	in	r29, 0x3e	; 62
    1c96:	2c 97       	sbiw	r28, 0x0c	; 12
    1c98:	0f b6       	in	r0, 0x3f	; 63
    1c9a:	f8 94       	cli
    1c9c:	de bf       	out	0x3e, r29	; 62
    1c9e:	0f be       	out	0x3f, r0	; 63
    1ca0:	cd bf       	out	0x3d, r28	; 61
    1ca2:	6b 01       	movw	r12, r22
    1ca4:	4a 01       	movw	r8, r20
       i++;
  }
 Serial.println(" ");
 
 return true;
}
    1ca6:	ad b6       	in	r10, 0x3d	; 61
    1ca8:	be b6       	in	r11, 0x3e	; 62
 return Salvata;
}

bool write_eeprom_string(String erog,int lunBuffer,int start_ind) {
 
 char buf[lunBuffer];
    1caa:	2d b7       	in	r18, 0x3d	; 61
    1cac:	3e b7       	in	r19, 0x3e	; 62
    1cae:	26 1b       	sub	r18, r22
    1cb0:	37 0b       	sbc	r19, r23
    1cb2:	0f b6       	in	r0, 0x3f	; 63
    1cb4:	f8 94       	cli
    1cb6:	3e bf       	out	0x3e, r19	; 62
    1cb8:	0f be       	out	0x3f, r0	; 63
    1cba:	2d bf       	out	0x3d, r18	; 61
    1cbc:	ed b7       	in	r30, 0x3d	; 61
    1cbe:	fe b7       	in	r31, 0x3e	; 62
    1cc0:	31 96       	adiw	r30, 0x01	; 1
    1cc2:	7f 01       	movw	r14, r30
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{ getBytes((unsigned char *)buf, bufsize, index); }
    1cc4:	fc 01       	movw	r30, r24
    1cc6:	44 81       	ldd	r20, Z+4	; 0x04
    1cc8:	55 81       	ldd	r21, Z+5	; 0x05
    1cca:	4f 5f       	subi	r20, 0xFF	; 255
    1ccc:	5f 4f       	sbci	r21, 0xFF	; 255
    1cce:	20 e0       	ldi	r18, 0x00	; 0
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	b7 01       	movw	r22, r14
    1cd4:	0e 94 1e 3e 	call	0x7c3c	; 0x7c3c <_ZNK6String8getBytesEPhjj>
 erog.toCharArray(buf, erog.length()+1);
 bool out = false;
 int i = 0;
 
 Serial.println(" len: " + String(lunBuffer));
    1cd8:	4a e0       	ldi	r20, 0x0A	; 10
    1cda:	b6 01       	movw	r22, r12
    1cdc:	ce 01       	movw	r24, r28
    1cde:	07 96       	adiw	r24, 0x07	; 7
    1ce0:	0e 94 cd 3c 	call	0x799a	; 0x799a <_ZN6StringC1Eih>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1ce4:	6b ef       	ldi	r22, 0xFB	; 251
    1ce6:	71 e0       	ldi	r23, 0x01	; 1
    1ce8:	ce 01       	movw	r24, r28
    1cea:	01 96       	adiw	r24, 0x01	; 1
    1cec:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
    1cf0:	be 01       	movw	r22, r28
    1cf2:	69 5f       	subi	r22, 0xF9	; 249
    1cf4:	7f 4f       	sbci	r23, 0xFF	; 255
    1cf6:	ce 01       	movw	r24, r28
    1cf8:	01 96       	adiw	r24, 0x01	; 1
    1cfa:	0e 94 cc 3d 	call	0x7b98	; 0x7b98 <_ZplRK15StringSumHelperRK6String>
    1cfe:	bc 01       	movw	r22, r24
    1d00:	8e e1       	ldi	r24, 0x1E	; 30
    1d02:	9d e0       	ldi	r25, 0x0D	; 13
    1d04:	0e 94 4c 39 	call	0x7298	; 0x7298 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1d08:	ce 01       	movw	r24, r28
    1d0a:	01 96       	adiw	r24, 0x01	; 1
    1d0c:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
    1d10:	ce 01       	movw	r24, r28
    1d12:	07 96       	adiw	r24, 0x07	; 7
    1d14:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
 Serial.println("Eseguo scrittura nella EEPROM");
    1d18:	62 e0       	ldi	r22, 0x02	; 2
    1d1a:	72 e0       	ldi	r23, 0x02	; 2
    1d1c:	8e e1       	ldi	r24, 0x1E	; 30
    1d1e:	9d e0       	ldi	r25, 0x0D	; 13
    1d20:	0e 94 5c 39 	call	0x72b8	; 0x72b8 <_ZN5Print7printlnEPKc>
 Serial.println(" ");
    1d24:	6f ee       	ldi	r22, 0xEF	; 239
    1d26:	71 e0       	ldi	r23, 0x01	; 1
    1d28:	8e e1       	ldi	r24, 0x1E	; 30
    1d2a:	9d e0       	ldi	r25, 0x0D	; 13
    1d2c:	0e 94 5c 39 	call	0x72b8	; 0x72b8 <_ZN5Print7printlnEPKc>

  for (int ind = start_ind ; ind < (start_ind + lunBuffer) ; ind++) {
    1d30:	84 01       	movw	r16, r8
    1d32:	c8 0c       	add	r12, r8
    1d34:	d9 1c       	adc	r13, r9
    1d36:	0c 15       	cp	r16, r12
    1d38:	1d 05       	cpc	r17, r13
    1d3a:	6c f5       	brge	.+90     	; 0x1d96 <_Z19write_eeprom_string6Stringii+0x11c>
     if (buf[i] != 0) {
    1d3c:	f7 01       	movw	r30, r14
    1d3e:	60 81       	ld	r22, Z
    1d40:	66 23       	and	r22, r22
    1d42:	19 f1       	breq	.+70     	; 0x1d8a <_Z19write_eeprom_string6Stringii+0x110>
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator uint8_t() const             { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    1d44:	c8 01       	movw	r24, r16
    1d46:	0e 94 a1 45 	call	0x8b42	; 0x8b42 <eeprom_write_byte>
      EEPROM.write(ind, buf[i]);
      Serial.print(" " + String(buf[i]));
    1d4a:	f7 01       	movw	r30, r14
    1d4c:	60 81       	ld	r22, Z
    1d4e:	ce 01       	movw	r24, r28
    1d50:	07 96       	adiw	r24, 0x07	; 7
    1d52:	0e 94 8b 3c 	call	0x7916	; 0x7916 <_ZN6StringC1Ec>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1d56:	6f ee       	ldi	r22, 0xEF	; 239
    1d58:	71 e0       	ldi	r23, 0x01	; 1
    1d5a:	ce 01       	movw	r24, r28
    1d5c:	01 96       	adiw	r24, 0x01	; 1
    1d5e:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
    1d62:	be 01       	movw	r22, r28
    1d64:	69 5f       	subi	r22, 0xF9	; 249
    1d66:	7f 4f       	sbci	r23, 0xFF	; 255
    1d68:	ce 01       	movw	r24, r28
    1d6a:	01 96       	adiw	r24, 0x01	; 1
    1d6c:	0e 94 cc 3d 	call	0x7b98	; 0x7b98 <_ZplRK15StringSumHelperRK6String>
    1d70:	bc 01       	movw	r22, r24
    1d72:	8e e1       	ldi	r24, 0x1E	; 30
    1d74:	9d e0       	ldi	r25, 0x0D	; 13
    1d76:	0e 94 23 39 	call	0x7246	; 0x7246 <_ZN5Print5printERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1d7a:	ce 01       	movw	r24, r28
    1d7c:	01 96       	adiw	r24, 0x01	; 1
    1d7e:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
    1d82:	ce 01       	movw	r24, r28
    1d84:	07 96       	adiw	r24, 0x07	; 7
    1d86:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
 
 Serial.println(" len: " + String(lunBuffer));
 Serial.println("Eseguo scrittura nella EEPROM");
 Serial.println(" ");

  for (int ind = start_ind ; ind < (start_ind + lunBuffer) ; ind++) {
    1d8a:	0f 5f       	subi	r16, 0xFF	; 255
    1d8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d8e:	ff ef       	ldi	r31, 0xFF	; 255
    1d90:	ef 1a       	sub	r14, r31
    1d92:	ff 0a       	sbc	r15, r31
    1d94:	d0 cf       	rjmp	.-96     	; 0x1d36 <_Z19write_eeprom_string6Stringii+0xbc>
      EEPROM.write(ind, buf[i]);
      Serial.print(" " + String(buf[i]));
     }
       i++;
  }
 Serial.println(" ");
    1d96:	6f ee       	ldi	r22, 0xEF	; 239
    1d98:	71 e0       	ldi	r23, 0x01	; 1
    1d9a:	8e e1       	ldi	r24, 0x1E	; 30
    1d9c:	9d e0       	ldi	r25, 0x0D	; 13
    1d9e:	0e 94 5c 39 	call	0x72b8	; 0x72b8 <_ZN5Print7printlnEPKc>
 
 return true;
}
    1da2:	81 e0       	ldi	r24, 0x01	; 1
    1da4:	0f b6       	in	r0, 0x3f	; 63
    1da6:	f8 94       	cli
    1da8:	be be       	out	0x3e, r11	; 62
    1daa:	0f be       	out	0x3f, r0	; 63
    1dac:	ad be       	out	0x3d, r10	; 61
    1dae:	2c 96       	adiw	r28, 0x0c	; 12
    1db0:	0f b6       	in	r0, 0x3f	; 63
    1db2:	f8 94       	cli
    1db4:	de bf       	out	0x3e, r29	; 62
    1db6:	0f be       	out	0x3f, r0	; 63
    1db8:	cd bf       	out	0x3d, r28	; 61
    1dba:	df 91       	pop	r29
    1dbc:	cf 91       	pop	r28
    1dbe:	1f 91       	pop	r17
    1dc0:	0f 91       	pop	r16
    1dc2:	ff 90       	pop	r15
    1dc4:	ef 90       	pop	r14
    1dc6:	df 90       	pop	r13
    1dc8:	cf 90       	pop	r12
    1dca:	bf 90       	pop	r11
    1dcc:	af 90       	pop	r10
    1dce:	9f 90       	pop	r9
    1dd0:	8f 90       	pop	r8
    1dd2:	08 95       	ret

00001dd4 <_ZN20ParametriCCEC_structC1ERKS_>:
{
	String da_memorizzare;
	int startIND;
} Erogazioni_TypeDef;

typedef struct ParametriCCEC_struct
    1dd4:	0f 93       	push	r16
    1dd6:	1f 93       	push	r17
    1dd8:	cf 93       	push	r28
    1dda:	df 93       	push	r29
    1ddc:	ec 01       	movw	r28, r24
    1dde:	8b 01       	movw	r16, r22
    1de0:	0e 94 63 3c 	call	0x78c6	; 0x78c6 <_ZN6StringC1ERKS_>
    1de4:	b8 01       	movw	r22, r16
    1de6:	6a 5f       	subi	r22, 0xFA	; 250
    1de8:	7f 4f       	sbci	r23, 0xFF	; 255
    1dea:	ce 01       	movw	r24, r28
    1dec:	06 96       	adiw	r24, 0x06	; 6
    1dee:	0e 94 63 3c 	call	0x78c6	; 0x78c6 <_ZN6StringC1ERKS_>
    1df2:	f8 01       	movw	r30, r16
    1df4:	84 85       	ldd	r24, Z+12	; 0x0c
    1df6:	95 85       	ldd	r25, Z+13	; 0x0d
    1df8:	9d 87       	std	Y+13, r25	; 0x0d
    1dfa:	8c 87       	std	Y+12, r24	; 0x0c
    1dfc:	df 91       	pop	r29
    1dfe:	cf 91       	pop	r28
    1e00:	1f 91       	pop	r17
    1e02:	0f 91       	pop	r16
    1e04:	08 95       	ret

00001e06 <_ZN20ParametriCCEC_structD1Ev>:
    1e06:	cf 93       	push	r28
    1e08:	df 93       	push	r29
    1e0a:	ec 01       	movw	r28, r24
    1e0c:	06 96       	adiw	r24, 0x06	; 6
    1e0e:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
    1e12:	ce 01       	movw	r24, r28
    1e14:	df 91       	pop	r29
    1e16:	cf 91       	pop	r28
    1e18:	0c 94 90 3b 	jmp	0x7720	; 0x7720 <_ZN6StringD1Ev>

00001e1c <_ZN14EthernetClientC1ERKS_>:
#include "Arduino.h"	
#include "Print.h"
#include "Client.h"
#include "IPAddress.h"

class EthernetClient : public Client {
    1e1c:	fc 01       	movw	r30, r24
    1e1e:	db 01       	movw	r26, r22
#ifdef BIN // Prevent warnings if BIN is previously defined in "iotnx4.h" or similar
#undef BIN
#endif
#define BIN 2

class Print
    1e20:	12 96       	adiw	r26, 0x02	; 2
    1e22:	8d 91       	ld	r24, X+
    1e24:	9c 91       	ld	r25, X
    1e26:	13 97       	sbiw	r26, 0x03	; 3
    1e28:	93 83       	std	Z+3, r25	; 0x03
    1e2a:	82 83       	std	Z+2, r24	; 0x02
    SKIP_WHITESPACE // Only tabs, spaces, line feeds & carriage returns are skipped.
};

#define NO_IGNORE_CHAR  '\x01' // a char not found in a valid ASCII numeric field

class Stream : public Print
    1e2c:	14 96       	adiw	r26, 0x04	; 4
    1e2e:	4d 91       	ld	r20, X+
    1e30:	5d 91       	ld	r21, X+
    1e32:	6d 91       	ld	r22, X+
    1e34:	7c 91       	ld	r23, X
    1e36:	17 97       	sbiw	r26, 0x07	; 7
    1e38:	44 83       	std	Z+4, r20	; 0x04
    1e3a:	55 83       	std	Z+5, r21	; 0x05
    1e3c:	66 83       	std	Z+6, r22	; 0x06
    1e3e:	77 83       	std	Z+7, r23	; 0x07
    1e40:	18 96       	adiw	r26, 0x08	; 8
    1e42:	4d 91       	ld	r20, X+
    1e44:	5d 91       	ld	r21, X+
    1e46:	6d 91       	ld	r22, X+
    1e48:	7c 91       	ld	r23, X
    1e4a:	1b 97       	sbiw	r26, 0x0b	; 11
    1e4c:	40 87       	std	Z+8, r20	; 0x08
    1e4e:	51 87       	std	Z+9, r21	; 0x09
    1e50:	62 87       	std	Z+10, r22	; 0x0a
    1e52:	73 87       	std	Z+11, r23	; 0x0b
    1e54:	8c ed       	ldi	r24, 0xDC	; 220
    1e56:	99 e0       	ldi	r25, 0x09	; 9
    1e58:	91 83       	std	Z+1, r25	; 0x01
    1e5a:	80 83       	st	Z, r24
    1e5c:	1c 96       	adiw	r26, 0x0c	; 12
    1e5e:	8c 91       	ld	r24, X
    1e60:	84 87       	std	Z+12, r24	; 0x0c
    1e62:	08 95       	ret

00001e64 <loop>:
/**************************LOOP PROCEDURA************************************/
void loop() {
    1e64:	cf 92       	push	r12
    1e66:	df 92       	push	r13
    1e68:	ef 92       	push	r14
    1e6a:	ff 92       	push	r15
    1e6c:	0f 93       	push	r16
    1e6e:	1f 93       	push	r17
    1e70:	cf 93       	push	r28
    1e72:	df 93       	push	r29
    1e74:	cd b7       	in	r28, 0x3d	; 61
    1e76:	de b7       	in	r29, 0x3e	; 62
    1e78:	aa 97       	sbiw	r28, 0x2a	; 42
    1e7a:	0f b6       	in	r0, 0x3f	; 63
    1e7c:	f8 94       	cli
    1e7e:	de bf       	out	0x3e, r29	; 62
    1e80:	0f be       	out	0x3f, r0	; 63
    1e82:	cd bf       	out	0x3d, r28	; 61

  switch (stato_procedura) {
    1e84:	e0 91 30 0b 	lds	r30, 0x0B30	; 0x800b30 <stato_procedura>
    1e88:	f0 91 31 0b 	lds	r31, 0x0B31	; 0x800b31 <stato_procedura+0x1>
    1e8c:	32 96       	adiw	r30, 0x02	; 2
    1e8e:	ed 30       	cpi	r30, 0x0D	; 13
    1e90:	f1 05       	cpc	r31, r1
    1e92:	08 f0       	brcs	.+2      	; 0x1e96 <loop+0x32>
    1e94:	b0 c7       	rjmp	.+3936   	; 0x2df6 <loop+0xf92>
    1e96:	ea 5b       	subi	r30, 0xBA	; 186
    1e98:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9a:	0c 94 0e 40 	jmp	0x801c	; 0x801c <__tablejump2__>
    case -2:
      { // cli(); // disable interrupt        
        printLine();
    1e9e:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
        Serial.print("Parametri CCEC da EEPROM");
    1ea2:	6e e6       	ldi	r22, 0x6E	; 110
    1ea4:	76 e0       	ldi	r23, 0x06	; 6
    1ea6:	8e e1       	ldi	r24, 0x1E	; 30
    1ea8:	9d e0       	ldi	r25, 0x0D	; 13
    1eaa:	0e 94 31 39 	call	0x7262	; 0x7262 <_ZN5Print5printEPKc>
        String ServerCCEC = read_eeprom_string_struct(ParametriCCEC[0]);
    1eae:	60 91 c7 0b 	lds	r22, 0x0BC7	; 0x800bc7 <ParametriCCEC>
    1eb2:	70 91 c8 0b 	lds	r23, 0x0BC8	; 0x800bc8 <ParametriCCEC+0x1>
    1eb6:	ce 01       	movw	r24, r28
    1eb8:	01 96       	adiw	r24, 0x01	; 1
    1eba:	8c df       	rcall	.-232    	; 0x1dd4 <_ZN20ParametriCCEC_structC1ERKS_>
    1ebc:	be 01       	movw	r22, r28
    1ebe:	6f 5f       	subi	r22, 0xFF	; 255
    1ec0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ec2:	ce 01       	movw	r24, r28
    1ec4:	85 96       	adiw	r24, 0x25	; 37
    1ec6:	94 dd       	rcall	.-1240   	; 0x19f0 <_Z25read_eeprom_string_struct20ParametriCCEC_struct>
    1ec8:	ce 01       	movw	r24, r28
    1eca:	01 96       	adiw	r24, 0x01	; 1
    1ecc:	9c df       	rcall	.-200    	; 0x1e06 <_ZN20ParametriCCEC_structD1Ev>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{ getBytes((unsigned char *)buf, bufsize, index); }
    1ece:	49 a5       	ldd	r20, Y+41	; 0x29
    1ed0:	5a a5       	ldd	r21, Y+42	; 0x2a
    1ed2:	4f 5f       	subi	r20, 0xFF	; 255
    1ed4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	64 e3       	ldi	r22, 0x34	; 52
    1edc:	71 e0       	ldi	r23, 0x01	; 1
    1ede:	ce 01       	movw	r24, r28
    1ee0:	85 96       	adiw	r24, 0x25	; 37
    1ee2:	0e 94 1e 3e 	call	0x7c3c	; 0x7c3c <_ZNK6String8getBytesEPhjj>
        ServerCCEC.toCharArray(serverREST,ServerCCEC.length()+1);
        printLine();
    1ee6:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
        String IPCCEC = read_eeprom_string_struct(ParametriCCEC[1]);
    1eea:	60 91 c7 0b 	lds	r22, 0x0BC7	; 0x800bc7 <ParametriCCEC>
    1eee:	70 91 c8 0b 	lds	r23, 0x0BC8	; 0x800bc8 <ParametriCCEC+0x1>
    1ef2:	62 5f       	subi	r22, 0xF2	; 242
    1ef4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ef6:	ce 01       	movw	r24, r28
    1ef8:	01 96       	adiw	r24, 0x01	; 1
    1efa:	6c df       	rcall	.-296    	; 0x1dd4 <_ZN20ParametriCCEC_structC1ERKS_>
    1efc:	be 01       	movw	r22, r28
    1efe:	6f 5f       	subi	r22, 0xFF	; 255
    1f00:	7f 4f       	sbci	r23, 0xFF	; 255
    1f02:	ce 01       	movw	r24, r28
    1f04:	4f 96       	adiw	r24, 0x1f	; 31
    1f06:	74 dd       	rcall	.-1304   	; 0x19f0 <_Z25read_eeprom_string_struct20ParametriCCEC_struct>
    1f08:	ce 01       	movw	r24, r28
    1f0a:	01 96       	adiw	r24, 0x01	; 1
    1f0c:	7c df       	rcall	.-264    	; 0x1e06 <_ZN20ParametriCCEC_structD1Ev>
        printLine();
    1f0e:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
        String Start_save = read_eeprom_string_struct(ParametriCCEC[2]);
    1f12:	60 91 c7 0b 	lds	r22, 0x0BC7	; 0x800bc7 <ParametriCCEC>
    1f16:	70 91 c8 0b 	lds	r23, 0x0BC8	; 0x800bc8 <ParametriCCEC+0x1>
    1f1a:	64 5e       	subi	r22, 0xE4	; 228
    1f1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f1e:	ce 01       	movw	r24, r28
    1f20:	01 96       	adiw	r24, 0x01	; 1
    1f22:	58 df       	rcall	.-336    	; 0x1dd4 <_ZN20ParametriCCEC_structC1ERKS_>
    1f24:	be 01       	movw	r22, r28
    1f26:	6f 5f       	subi	r22, 0xFF	; 255
    1f28:	7f 4f       	sbci	r23, 0xFF	; 255
    1f2a:	ce 01       	movw	r24, r28
    1f2c:	47 96       	adiw	r24, 0x17	; 23
    1f2e:	60 dd       	rcall	.-1344   	; 0x19f0 <_Z25read_eeprom_string_struct20ParametriCCEC_struct>
    1f30:	ce 01       	movw	r24, r28
    1f32:	01 96       	adiw	r24, 0x01	; 1
    1f34:	68 df       	rcall	.-304    	; 0x1e06 <_ZN20ParametriCCEC_structD1Ev>
        printLine();
    1f36:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
        String CSEDE = read_eeprom_string_struct(ParametriCCEC[3]);
    1f3a:	60 91 c7 0b 	lds	r22, 0x0BC7	; 0x800bc7 <ParametriCCEC>
    1f3e:	70 91 c8 0b 	lds	r23, 0x0BC8	; 0x800bc8 <ParametriCCEC+0x1>
    1f42:	66 5d       	subi	r22, 0xD6	; 214
    1f44:	7f 4f       	sbci	r23, 0xFF	; 255
    1f46:	ce 01       	movw	r24, r28
    1f48:	01 96       	adiw	r24, 0x01	; 1
    1f4a:	44 df       	rcall	.-376    	; 0x1dd4 <_ZN20ParametriCCEC_structC1ERKS_>
    1f4c:	be 01       	movw	r22, r28
    1f4e:	6f 5f       	subi	r22, 0xFF	; 255
    1f50:	7f 4f       	sbci	r23, 0xFF	; 255
    1f52:	ce 01       	movw	r24, r28
    1f54:	0f 96       	adiw	r24, 0x0f	; 15
    1f56:	4c dd       	rcall	.-1384   	; 0x19f0 <_Z25read_eeprom_string_struct20ParametriCCEC_struct>
    1f58:	ce 01       	movw	r24, r28
    1f5a:	01 96       	adiw	r24, 0x01	; 1
    1f5c:	54 df       	rcall	.-344    	; 0x1e06 <_ZN20ParametriCCEC_structD1Ev>
    1f5e:	4b 89       	ldd	r20, Y+19	; 0x13
    1f60:	5c 89       	ldd	r21, Y+20	; 0x14
    1f62:	4f 5f       	subi	r20, 0xFF	; 255
    1f64:	5f 4f       	sbci	r21, 0xFF	; 255
    1f66:	20 e0       	ldi	r18, 0x00	; 0
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	66 e4       	ldi	r22, 0x46	; 70
    1f6c:	71 e0       	ldi	r23, 0x01	; 1
    1f6e:	ce 01       	movw	r24, r28
    1f70:	0f 96       	adiw	r24, 0x0f	; 15
    1f72:	0e 94 1e 3e 	call	0x7c3c	; 0x7c3c <_ZNK6String8getBytesEPhjj>
        CSEDE.toCharArray(CodSede,CSEDE.length()+1);        
        printLine();
    1f76:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
        stato_procedura++;
    1f7a:	80 91 30 0b 	lds	r24, 0x0B30	; 0x800b30 <stato_procedura>
    1f7e:	90 91 31 0b 	lds	r25, 0x0B31	; 0x800b31 <stato_procedura+0x1>
    1f82:	01 96       	adiw	r24, 0x01	; 1
    1f84:	90 93 31 0b 	sts	0x0B31, r25	; 0x800b31 <stato_procedura+0x1>
    1f88:	80 93 30 0b 	sts	0x0B30, r24	; 0x800b30 <stato_procedura>
        printLine();
        String IPCCEC = read_eeprom_string_struct(ParametriCCEC[1]);
        printLine();
        String Start_save = read_eeprom_string_struct(ParametriCCEC[2]);
        printLine();
        String CSEDE = read_eeprom_string_struct(ParametriCCEC[3]);
    1f8c:	ce 01       	movw	r24, r28
    1f8e:	0f 96       	adiw	r24, 0x0f	; 15
    1f90:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
        String ServerCCEC = read_eeprom_string_struct(ParametriCCEC[0]);
        ServerCCEC.toCharArray(serverREST,ServerCCEC.length()+1);
        printLine();
        String IPCCEC = read_eeprom_string_struct(ParametriCCEC[1]);
        printLine();
        String Start_save = read_eeprom_string_struct(ParametriCCEC[2]);
    1f94:	ce 01       	movw	r24, r28
    1f96:	47 96       	adiw	r24, 0x17	; 23
    1f98:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
        printLine();
        Serial.print("Parametri CCEC da EEPROM");
        String ServerCCEC = read_eeprom_string_struct(ParametriCCEC[0]);
        ServerCCEC.toCharArray(serverREST,ServerCCEC.length()+1);
        printLine();
        String IPCCEC = read_eeprom_string_struct(ParametriCCEC[1]);
    1f9c:	ce 01       	movw	r24, r28
    1f9e:	4f 96       	adiw	r24, 0x1f	; 31
    1fa0:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
  switch (stato_procedura) {
    case -2:
      { // cli(); // disable interrupt        
        printLine();
        Serial.print("Parametri CCEC da EEPROM");
        String ServerCCEC = read_eeprom_string_struct(ParametriCCEC[0]);
    1fa4:	ce 01       	movw	r24, r28
    1fa6:	85 96       	adiw	r24, 0x25	; 37
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1fa8:	24 c7       	rjmp	.+3656   	; 0x2df2 <loop+0xf8e>
    1faa:	2f ef       	ldi	r18, 0xFF	; 255
    1fac:	39 ef       	ldi	r19, 0xF9	; 249
    1fae:	80 e0       	ldi	r24, 0x00	; 0
    1fb0:	21 50       	subi	r18, 0x01	; 1
    1fb2:	30 40       	sbci	r19, 0x00	; 0
    1fb4:	80 40       	sbci	r24, 0x00	; 0
    1fb6:	e1 f7       	brne	.-8      	; 0x1fb0 <loop+0x14c>
      }
      break;
    case -1:
      {       
        _delay_ms(20);
        abilitaPulsanti();
    1fb8:	00 c0       	rjmp	.+0      	; 0x1fba <loop+0x156>
    1fba:	00 00       	nop
    1fbc:	98 d9       	rcall	.-3280   	; 0x12ee <_Z15abilitaPulsantiv>
    1fbe:	9f ef       	ldi	r25, 0xFF	; 255
    1fc0:	29 ef       	ldi	r18, 0xF9	; 249
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	91 50       	subi	r25, 0x01	; 1
    1fc6:	20 40       	sbci	r18, 0x00	; 0
    1fc8:	30 40       	sbci	r19, 0x00	; 0
    1fca:	e1 f7       	brne	.-8      	; 0x1fc4 <loop+0x160>
    1fcc:	00 c0       	rjmp	.+0      	; 0x1fce <loop+0x16a>
        _delay_ms(20);
        abilitaContattiPistola();
    1fce:	00 00       	nop
    1fd0:	98 d9       	rcall	.-3280   	; 0x1302 <_Z22abilitaContattiPistolav>
    1fd2:	8f ef       	ldi	r24, 0xFF	; 255
    1fd4:	99 ef       	ldi	r25, 0xF9	; 249
    1fd6:	20 e0       	ldi	r18, 0x00	; 0
    1fd8:	81 50       	subi	r24, 0x01	; 1
    1fda:	90 40       	sbci	r25, 0x00	; 0
    1fdc:	20 40       	sbci	r18, 0x00	; 0
    1fde:	e1 f7       	brne	.-8      	; 0x1fd8 <loop+0x174>
    1fe0:	00 c0       	rjmp	.+0      	; 0x1fe2 <loop+0x17e>
    1fe2:	00 00       	nop
        _delay_ms(20);
        stato_procedura++;
    1fe4:	80 91 30 0b 	lds	r24, 0x0B30	; 0x800b30 <stato_procedura>
    1fe8:	90 91 31 0b 	lds	r25, 0x0B31	; 0x800b31 <stato_procedura+0x1>
    1fec:	01 96       	adiw	r24, 0x01	; 1
    1fee:	90 93 31 0b 	sts	0x0B31, r25	; 0x800b31 <stato_procedura+0x1>
    1ff2:	80 93 30 0b 	sts	0x0B30, r24	; 0x800b30 <stato_procedura>
      }
      break;
    1ff6:	ff c6       	rjmp	.+3582   	; 0x2df6 <loop+0xf92>
    1ff8:	3f ef       	ldi	r19, 0xFF	; 255
    1ffa:	83 ed       	ldi	r24, 0xD3	; 211
    1ffc:	90 e3       	ldi	r25, 0x30	; 48
    1ffe:	31 50       	subi	r19, 0x01	; 1
    2000:	80 40       	sbci	r24, 0x00	; 0
    2002:	90 40       	sbci	r25, 0x00	; 0
    2004:	e1 f7       	brne	.-8      	; 0x1ffe <loop+0x19a>
    2006:	00 c0       	rjmp	.+0      	; 0x2008 <loop+0x1a4>
    2008:	00 00       	nop
    case 0:
      {
        _delay_ms(1000);
        alreadyTimbrata = false;
    200a:	10 92 6f 0b 	sts	0x0B6F, r1	; 0x800b6f <alreadyTimbrata>
        enable_ETH();
    200e:	0e 94 93 01 	call	0x326	; 0x326 <_ZL10enable_ETHv>
        /************************************************/
        righeDisplay[1] = " * AUTENTICAZIONE *";
    2012:	67 e8       	ldi	r22, 0x87	; 135
    2014:	76 e0       	ldi	r23, 0x06	; 6
    2016:	85 ee       	ldi	r24, 0xE5	; 229
    2018:	9a e0       	ldi	r25, 0x0A	; 10
    201a:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringaSEPKc>
        righeDisplay[2] = "";
    201e:	6c ee       	ldi	r22, 0xEC	; 236
    2020:	71 e0       	ldi	r23, 0x01	; 1
    2022:	8b ee       	ldi	r24, 0xEB	; 235
    2024:	9a e0       	ldi	r25, 0x0A	; 10
    2026:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringaSEPKc>
        righeDisplay[3] = "    Avvicina ATE  ";
    202a:	6b e9       	ldi	r22, 0x9B	; 155
    202c:	76 e0       	ldi	r23, 0x06	; 6
    202e:	81 ef       	ldi	r24, 0xF1	; 241
    2030:	9a e0       	ldi	r25, 0x0A	; 10
    2032:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringaSEPKc>
        displayLCD(righeDisplay, stato_procedura, 50);
    2036:	60 91 30 0b 	lds	r22, 0x0B30	; 0x800b30 <stato_procedura>
    203a:	70 91 31 0b 	lds	r23, 0x0B31	; 0x800b31 <stato_procedura+0x1>
    203e:	42 e3       	ldi	r20, 0x32	; 50
    2040:	50 e0       	ldi	r21, 0x00	; 0
    2042:	8f ed       	ldi	r24, 0xDF	; 223
    2044:	9a e0       	ldi	r25, 0x0A	; 10
    2046:	0e 94 8b 03 	call	0x716	; 0x716 <_Z10displayLCDP6Stringii>
        /************************************************/
        stato_procedura++;
    204a:	80 91 30 0b 	lds	r24, 0x0B30	; 0x800b30 <stato_procedura>
    204e:	90 91 31 0b 	lds	r25, 0x0B31	; 0x800b31 <stato_procedura+0x1>
    2052:	01 96       	adiw	r24, 0x01	; 1
    2054:	90 93 31 0b 	sts	0x0B31, r25	; 0x800b31 <stato_procedura+0x1>
    2058:	80 93 30 0b 	sts	0x0B30, r24	; 0x800b30 <stato_procedura>
    205c:	2f ef       	ldi	r18, 0xFF	; 255
    205e:	39 e6       	ldi	r19, 0x69	; 105
    2060:	88 e1       	ldi	r24, 0x18	; 24
    2062:	21 50       	subi	r18, 0x01	; 1
    2064:	30 40       	sbci	r19, 0x00	; 0
    2066:	80 40       	sbci	r24, 0x00	; 0
    2068:	e1 f7       	brne	.-8      	; 0x2062 <loop+0x1fe>
    206a:	00 c0       	rjmp	.+0      	; 0x206c <loop+0x208>
    206c:	00 00       	nop
    206e:	c3 c6       	rjmp	.+3462   	; 0x2df6 <loop+0xf92>
        _delay_ms(500);
      }
      break;
    case 1:
      {
        TARGA = "";
    2070:	6c ee       	ldi	r22, 0xEC	; 236
    2072:	71 e0       	ldi	r23, 0x01	; 1
    2074:	89 e8       	ldi	r24, 0x89	; 137
    2076:	9a e0       	ldi	r25, 0x0A	; 10
    2078:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringaSEPKc>
        KM = "";
    207c:	6c ee       	ldi	r22, 0xEC	; 236
    207e:	71 e0       	ldi	r23, 0x01	; 1
    2080:	83 e8       	ldi	r24, 0x83	; 131
    2082:	9a e0       	ldi	r25, 0x0A	; 10
    2084:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringaSEPKc>

        /*****************************************************/
        String ATe = "ERRORE";
    2088:	69 e8       	ldi	r22, 0x89	; 137
    208a:	72 e0       	ldi	r23, 0x02	; 2
    208c:	ce 01       	movw	r24, r28
    208e:	47 96       	adiw	r24, 0x17	; 23
    2090:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
        
        if (!alreadyTimbrata) {
    2094:	80 91 6f 0b 	lds	r24, 0x0B6F	; 0x800b6f <alreadyTimbrata>
    2098:	81 11       	cpse	r24, r1
    209a:	16 c0       	rjmp	.+44     	; 0x20c8 <loop+0x264>
          ATe = GetCodeRfidATe();
    209c:	ce 01       	movw	r24, r28
    209e:	01 96       	adiw	r24, 0x01	; 1
    20a0:	0e 94 cf 05 	call	0xb9e	; 0xb9e <_Z14GetCodeRfidATev>
    20a4:	be 01       	movw	r22, r28
    20a6:	6f 5f       	subi	r22, 0xFF	; 255
    20a8:	7f 4f       	sbci	r23, 0xFF	; 255
    20aa:	ce 01       	movw	r24, r28
    20ac:	47 96       	adiw	r24, 0x17	; 23
    20ae:	0e 94 6b 3c 	call	0x78d6	; 0x78d6 <_ZN6StringaSEOS_>
    20b2:	ce 01       	movw	r24, r28
    20b4:	01 96       	adiw	r24, 0x01	; 1
    20b6:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
          Buzzer(2, 100);
    20ba:	44 e6       	ldi	r20, 0x64	; 100
    20bc:	50 e0       	ldi	r21, 0x00	; 0
    20be:	60 e0       	ldi	r22, 0x00	; 0
    20c0:	70 e0       	ldi	r23, 0x00	; 0
    20c2:	82 e0       	ldi	r24, 0x02	; 2
    20c4:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z6Buzzerhm>
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
    20c8:	69 e8       	ldi	r22, 0x89	; 137
    20ca:	72 e0       	ldi	r23, 0x02	; 2
    20cc:	ce 01       	movw	r24, r28
    20ce:	47 96       	adiw	r24, 0x17	; 23
    20d0:	0e 94 00 3e 	call	0x7c00	; 0x7c00 <_ZNK6String6equalsEPKc>
        }

        if ((ATe != "ERRORE") && (BIT_IS_CLEAR(PORTC, 4)))
    20d4:	81 11       	cpse	r24, r1
    20d6:	02 c0       	rjmp	.+4      	; 0x20dc <loop+0x278>
    20d8:	44 9b       	sbis	0x08, 4	; 8
    20da:	dd c6       	rjmp	.+3514   	; 0x2e96 <loop+0x1032>
          _delay_ms(1000); // tempo per inizializzare la ethernet
        }

        // Effettua chiamata REST per validare CARD NFC
        
        righeDisplay[1] =  "** TARGA MEZZO **";
    20dc:	64 eb       	ldi	r22, 0xB4	; 180
    20de:	75 e0       	ldi	r23, 0x05	; 5
    20e0:	85 ee       	ldi	r24, 0xE5	; 229
    20e2:	9a e0       	ldi	r25, 0x0A	; 10
    20e4:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringaSEPKc>
        righeDisplay[2] = "TARGA:";
    20e8:	66 ec       	ldi	r22, 0xC6	; 198
    20ea:	75 e0       	ldi	r23, 0x05	; 5
    20ec:	8b ee       	ldi	r24, 0xEB	; 235
    20ee:	9a e0       	ldi	r25, 0x0A	; 10
    20f0:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringaSEPKc>
        righeDisplay[3] = "#:Conferma *:Usa TAG";
    20f4:	6d ec       	ldi	r22, 0xCD	; 205
    20f6:	75 e0       	ldi	r23, 0x05	; 5
    20f8:	81 ef       	ldi	r24, 0xF1	; 241
    20fa:	9a e0       	ldi	r25, 0x0A	; 10
    20fc:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringaSEPKc>

        // bool GetAteCheck(int Port, char serverREST[], EthernetClient ClientHTTP, String _idAte)

        if (GetAteCheck(80,serverREST,clientATE,ATe)) 
    2100:	be 01       	movw	r22, r28
    2102:	69 5e       	subi	r22, 0xE9	; 233
    2104:	7f 4f       	sbci	r23, 0xFF	; 255
    2106:	ce 01       	movw	r24, r28
    2108:	0f 96       	adiw	r24, 0x0f	; 15
    210a:	0e 94 63 3c 	call	0x78c6	; 0x78c6 <_ZN6StringC1ERKS_>
    210e:	6d ea       	ldi	r22, 0xAD	; 173
    2110:	7a e0       	ldi	r23, 0x0A	; 10
    2112:	ce 01       	movw	r24, r28
    2114:	01 96       	adiw	r24, 0x01	; 1
    2116:	82 de       	rcall	.-764    	; 0x1e1c <_ZN14EthernetClientC1ERKS_>
    2118:	9e 01       	movw	r18, r28
    211a:	21 5f       	subi	r18, 0xF1	; 241
    211c:	3f 4f       	sbci	r19, 0xFF	; 255
    211e:	ae 01       	movw	r20, r28
    2120:	4f 5f       	subi	r20, 0xFF	; 255
    2122:	5f 4f       	sbci	r21, 0xFF	; 255
    2124:	64 e3       	ldi	r22, 0x34	; 52
    2126:	71 e0       	ldi	r23, 0x01	; 1
    2128:	80 e5       	ldi	r24, 0x50	; 80
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	0e 94 a0 06 	call	0xd40	; 0xd40 <_Z11GetAteCheckiPc14EthernetClient6String>
    2130:	18 2f       	mov	r17, r24
    2132:	ce 01       	movw	r24, r28
    2134:	0f 96       	adiw	r24, 0x0f	; 15
    2136:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
        {
                SET_BIT(PORTC,PC4);
    213a:	44 9a       	sbi	0x08, 4	; 8
        righeDisplay[2] = "TARGA:";
        righeDisplay[3] = "#:Conferma *:Usa TAG";

        // bool GetAteCheck(int Port, char serverREST[], EthernetClient ClientHTTP, String _idAte)

        if (GetAteCheck(80,serverREST,clientATE,ATe)) 
    213c:	11 23       	and	r17, r17
    213e:	c1 f0       	breq	.+48     	; 0x2170 <loop+0x30c>
        {
                SET_BIT(PORTC,PC4);
                RaccoltaDati[5] = "000";               
    2140:	64 ed       	ldi	r22, 0xD4	; 212
    2142:	77 e0       	ldi	r23, 0x07	; 7
    2144:	81 e2       	ldi	r24, 0x21	; 33
    2146:	9b e0       	ldi	r25, 0x0B	; 11
    2148:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringaSEPKc>
                Buzzer(1,200);
    214c:	48 ec       	ldi	r20, 0xC8	; 200
    214e:	50 e0       	ldi	r21, 0x00	; 0
    2150:	60 e0       	ldi	r22, 0x00	; 0
    2152:	70 e0       	ldi	r23, 0x00	; 0
    2154:	81 e0       	ldi	r24, 0x01	; 1
    2156:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z6Buzzerhm>
//                _delay_ms(50);
                avanzaStato(TinputTarga);
    215a:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <TinputTarga>
    215e:	70 91 2b 01 	lds	r23, 0x012B	; 0x80012b <TinputTarga+0x1>
    2162:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <TinputTarga+0x2>
    2166:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <TinputTarga+0x3>
    216a:	0e 94 c0 03 	call	0x780	; 0x780 <_Z11avanzaStatom>
    216e:	37 c0       	rjmp	.+110    	; 0x21de <loop+0x37a>
         } 
         else 
         {
                SET_BIT(PORTC,PC4);
                RaccoltaDati[5] = "111";
    2170:	6e ea       	ldi	r22, 0xAE	; 174
    2172:	76 e0       	ldi	r23, 0x06	; 6
    2174:	81 e2       	ldi	r24, 0x21	; 33
    2176:	9b e0       	ldi	r25, 0x0B	; 11
    2178:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringaSEPKc>
                Buzzer(3,200);
    217c:	48 ec       	ldi	r20, 0xC8	; 200
    217e:	50 e0       	ldi	r21, 0x00	; 0
    2180:	60 e0       	ldi	r22, 0x00	; 0
    2182:	70 e0       	ldi	r23, 0x00	; 0
    2184:	83 e0       	ldi	r24, 0x03	; 3
    2186:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z6Buzzerhm>
                lcd.clear();
    218a:	87 e5       	ldi	r24, 0x57	; 87
    218c:	9b e0       	ldi	r25, 0x0B	; 11
    218e:	0e 94 a1 30 	call	0x6142	; 0x6142 <_ZN3LCD5clearEv>
                righeDisplay[1] = "***** ERRORE ******";
    2192:	62 eb       	ldi	r22, 0xB2	; 178
    2194:	76 e0       	ldi	r23, 0x06	; 6
    2196:	85 ee       	ldi	r24, 0xE5	; 229
    2198:	9a e0       	ldi	r25, 0x0A	; 10
    219a:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringaSEPKc>
                righeDisplay[2] = "  Ate NON VALIDA ";
    219e:	66 ec       	ldi	r22, 0xC6	; 198
    21a0:	76 e0       	ldi	r23, 0x06	; 6
    21a2:	8b ee       	ldi	r24, 0xEB	; 235
    21a4:	9a e0       	ldi	r25, 0x0A	; 10
    21a6:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringaSEPKc>
                righeDisplay[3] = " Problema di Rete";
    21aa:	68 ed       	ldi	r22, 0xD8	; 216
    21ac:	76 e0       	ldi	r23, 0x06	; 6
    21ae:	81 ef       	ldi	r24, 0xF1	; 241
    21b0:	9a e0       	ldi	r25, 0x0A	; 10
    21b2:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringaSEPKc>
                displayLCD(righeDisplay,stato_procedura,10);
    21b6:	60 91 30 0b 	lds	r22, 0x0B30	; 0x800b30 <stato_procedura>
    21ba:	70 91 31 0b 	lds	r23, 0x0B31	; 0x800b31 <stato_procedura+0x1>
    21be:	4a e0       	ldi	r20, 0x0A	; 10
    21c0:	50 e0       	ldi	r21, 0x00	; 0
    21c2:	8f ed       	ldi	r24, 0xDF	; 223
    21c4:	9a e0       	ldi	r25, 0x0A	; 10
    21c6:	0e 94 8b 03 	call	0x716	; 0x716 <_Z10displayLCDP6Stringii>
    21ca:	9f ef       	ldi	r25, 0xFF	; 255
    21cc:	23 ed       	ldi	r18, 0xD3	; 211
    21ce:	30 e3       	ldi	r19, 0x30	; 48
    21d0:	91 50       	subi	r25, 0x01	; 1
    21d2:	20 40       	sbci	r18, 0x00	; 0
    21d4:	30 40       	sbci	r19, 0x00	; 0
    21d6:	e1 f7       	brne	.-8      	; 0x21d0 <loop+0x36c>
    21d8:	00 c0       	rjmp	.+0      	; 0x21da <loop+0x376>
                _delay_ms(1000);
                Azzera();
    21da:	00 00       	nop
    21dc:	69 d9       	rcall	.-3374   	; 0x14b0 <_Z6Azzerav>
      {
        TARGA = "";
        KM = "";

        /*****************************************************/
        String ATe = "ERRORE";
    21de:	ce 01       	movw	r24, r28
    21e0:	47 96       	adiw	r24, 0x17	; 23
    21e2:	07 c6       	rjmp	.+3086   	; 0x2df2 <loop+0xf8e>
         }      
      }
      break;
    case 2:
      {
        lcd.setCursor(0, 0);
    21e4:	40 e0       	ldi	r20, 0x00	; 0
    21e6:	60 e0       	ldi	r22, 0x00	; 0
    21e8:	87 e5       	ldi	r24, 0x57	; 87
    21ea:	9b e0       	ldi	r25, 0x0B	; 11
    21ec:	0e 94 a7 30 	call	0x614e	; 0x614e <_ZN3LCD9setCursorEhh>
        lcd.print((char)1);  // STAMPA LA CLESSIDRA
    21f0:	61 e0       	ldi	r22, 0x01	; 1
    21f2:	87 e5       	ldi	r24, 0x57	; 87
    21f4:	9b e0       	ldi	r25, 0x0B	; 11
    21f6:	0e 94 32 39 	call	0x7264	; 0x7264 <_ZN5Print5printEc>
        lcd.print("Tempo: " + String((UltimoPassaggioStato + Timer - secs - 1)) + " sec ");
    21fa:	40 91 99 0a 	lds	r20, 0x0A99	; 0x800a99 <UltimoPassaggioStato>
    21fe:	50 91 9a 0a 	lds	r21, 0x0A9A	; 0x800a9a <UltimoPassaggioStato+0x1>
    2202:	60 91 9b 0a 	lds	r22, 0x0A9B	; 0x800a9b <UltimoPassaggioStato+0x2>
    2206:	70 91 9c 0a 	lds	r23, 0x0A9C	; 0x800a9c <UltimoPassaggioStato+0x3>
    220a:	80 91 95 0a 	lds	r24, 0x0A95	; 0x800a95 <Timer>
    220e:	90 91 96 0a 	lds	r25, 0x0A96	; 0x800a96 <Timer+0x1>
    2212:	a0 91 97 0a 	lds	r26, 0x0A97	; 0x800a97 <Timer+0x2>
    2216:	b0 91 98 0a 	lds	r27, 0x0A98	; 0x800a98 <Timer+0x3>
    221a:	48 0f       	add	r20, r24
    221c:	59 1f       	adc	r21, r25
    221e:	6a 1f       	adc	r22, r26
    2220:	7b 1f       	adc	r23, r27
    2222:	41 50       	subi	r20, 0x01	; 1
    2224:	51 09       	sbc	r21, r1
    2226:	61 09       	sbc	r22, r1
    2228:	71 09       	sbc	r23, r1
    222a:	80 91 9d 0a 	lds	r24, 0x0A9D	; 0x800a9d <secs>
    222e:	90 91 9e 0a 	lds	r25, 0x0A9E	; 0x800a9e <secs+0x1>
    2232:	a0 91 9f 0a 	lds	r26, 0x0A9F	; 0x800a9f <secs+0x2>
    2236:	b0 91 a0 0a 	lds	r27, 0x0AA0	; 0x800aa0 <secs+0x3>
    223a:	48 1b       	sub	r20, r24
    223c:	59 0b       	sbc	r21, r25
    223e:	6a 0b       	sbc	r22, r26
    2240:	7b 0b       	sbc	r23, r27
    2242:	2a e0       	ldi	r18, 0x0A	; 10
    2244:	ce 01       	movw	r24, r28
    2246:	0f 96       	adiw	r24, 0x0f	; 15
    2248:	0e 94 21 3d 	call	0x7a42	; 0x7a42 <_ZN6StringC1Emh>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    224c:	6c e0       	ldi	r22, 0x0C	; 12
    224e:	77 e0       	ldi	r23, 0x07	; 7
    2250:	ce 01       	movw	r24, r28
    2252:	01 96       	adiw	r24, 0x01	; 1
    2254:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
    2258:	be 01       	movw	r22, r28
    225a:	61 5f       	subi	r22, 0xF1	; 241
    225c:	7f 4f       	sbci	r23, 0xFF	; 255
    225e:	ce 01       	movw	r24, r28
    2260:	01 96       	adiw	r24, 0x01	; 1
    2262:	0e 94 cc 3d 	call	0x7b98	; 0x7b98 <_ZplRK15StringSumHelperRK6String>
    2266:	6a ee       	ldi	r22, 0xEA	; 234
    2268:	76 e0       	ldi	r23, 0x06	; 6
    226a:	0e 94 dd 3d 	call	0x7bba	; 0x7bba <_ZplRK15StringSumHelperPKc>
    226e:	bc 01       	movw	r22, r24
    2270:	87 e5       	ldi	r24, 0x57	; 87
    2272:	9b e0       	ldi	r25, 0x0B	; 11
    2274:	0e 94 23 39 	call	0x7246	; 0x7246 <_ZN5Print5printERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2278:	ce 01       	movw	r24, r28
    227a:	01 96       	adiw	r24, 0x01	; 1
    227c:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
    2280:	ce 01       	movw	r24, r28
    2282:	0f 96       	adiw	r24, 0x0f	; 15
    2284:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
        // da commentare
        // Carburante = "D"; // Simulo Abilitazione Diesel
        // da commentare
        // Carburante = "B"; // Simulo Abilitazione Benzina
        /*****************************************************************/
        gpio.setCONFREG(0x3C);
    2288:	6c e3       	ldi	r22, 0x3C	; 60
    228a:	80 e8       	ldi	r24, 0x80	; 128
    228c:	9a e0       	ldi	r25, 0x0A	; 10
    228e:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <_ZN7PCA953410setCONFREGEh>
        uint8_t c = gpio.Read_IP_REGISTER();
    2292:	80 e8       	ldi	r24, 0x80	; 128
    2294:	9a e0       	ldi	r25, 0x0A	; 10
    2296:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <_ZN7PCA953416Read_IP_REGISTEREv>
    229a:	e8 2e       	mov	r14, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    229c:	42 e0       	ldi	r20, 0x02	; 2
    229e:	be 01       	movw	r22, r28
    22a0:	69 5e       	subi	r22, 0xE9	; 233
    22a2:	7f 4f       	sbci	r23, 0xFF	; 255
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	0e 94 cb 42 	call	0x8596	; 0x8596 <__itoa_ncheck>
        char buf[8];
        itoa(c, buf, 2);
        gpio.setCONFREG(0xC3);
    22aa:	63 ec       	ldi	r22, 0xC3	; 195
    22ac:	80 e8       	ldi	r24, 0x80	; 128
    22ae:	9a e0       	ldi	r25, 0x0A	; 10
    22b0:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <_ZN7PCA953410setCONFREGEh>
        uint8_t r = gpio.Read_IP_REGISTER();
    22b4:	80 e8       	ldi	r24, 0x80	; 128
    22b6:	9a e0       	ldi	r25, 0x0A	; 10
    22b8:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <_ZN7PCA953416Read_IP_REGISTEREv>
    22bc:	f8 2e       	mov	r15, r24
    22be:	42 e0       	ldi	r20, 0x02	; 2
    22c0:	be 01       	movw	r22, r28
    22c2:	61 5f       	subi	r22, 0xF1	; 241
    22c4:	7f 4f       	sbci	r23, 0xFF	; 255
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	0e 94 cb 42 	call	0x8596	; 0x8596 <__itoa_ncheck>
        char bufr[8];
        itoa(r, bufr, 2);
        char ris[8];
        uint8_t z = (r ^ c);
        itoa(z, ris, 2);
    22cc:	fe 24       	eor	r15, r14
    22ce:	ef 2c       	mov	r14, r15
    22d0:	f1 2c       	mov	r15, r1
    22d2:	42 e0       	ldi	r20, 0x02	; 2
    22d4:	be 01       	movw	r22, r28
    22d6:	6f 5f       	subi	r22, 0xFF	; 255
    22d8:	7f 4f       	sbci	r23, 0xFF	; 255
    22da:	c7 01       	movw	r24, r14
    22dc:	0e 94 cb 42 	call	0x8596	; 0x8596 <__itoa_ncheck>
        char T = getCharKeypad(int(z));
    22e0:	c7 01       	movw	r24, r14
    22e2:	0e 94 a5 02 	call	0x54a	; 0x54a <_Z13getCharKeypadi>
    22e6:	9f ef       	ldi	r25, 0xFF	; 255
    22e8:	29 ef       	ldi	r18, 0xF9	; 249
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	91 50       	subi	r25, 0x01	; 1
    22ee:	20 40       	sbci	r18, 0x00	; 0
    22f0:	30 40       	sbci	r19, 0x00	; 0
    22f2:	e1 f7       	brne	.-8      	; 0x22ec <loop+0x488>
    22f4:	00 c0       	rjmp	.+0      	; 0x22f6 <loop+0x492>
        _delay_ms(20);
        /*****************************************************************/
        inputTarga(T);
    22f6:	00 00       	nop
    22f8:	8b d9       	rcall	.-3306   	; 0x1610 <_Z10inputTargac>
      }
      break;
    22fa:	7d c5       	rjmp	.+2810   	; 0x2df6 <loop+0xf92>
    case 3:
      {
        lcd.setCursor(0, 0);
    22fc:	40 e0       	ldi	r20, 0x00	; 0
    22fe:	60 e0       	ldi	r22, 0x00	; 0
    2300:	87 e5       	ldi	r24, 0x57	; 87
    2302:	9b e0       	ldi	r25, 0x0B	; 11
    2304:	0e 94 a7 30 	call	0x614e	; 0x614e <_ZN3LCD9setCursorEhh>
        lcd.print((char)1);  // STAMPA LA CLESSIDRA
    2308:	61 e0       	ldi	r22, 0x01	; 1
    230a:	87 e5       	ldi	r24, 0x57	; 87
    230c:	9b e0       	ldi	r25, 0x0B	; 11
    230e:	0e 94 32 39 	call	0x7264	; 0x7264 <_ZN5Print5printEc>
        lcd.print("Tempo: " + String((UltimoPassaggioStato + Timer - secs - 1)) + " sec ");
    2312:	40 91 99 0a 	lds	r20, 0x0A99	; 0x800a99 <UltimoPassaggioStato>
    2316:	50 91 9a 0a 	lds	r21, 0x0A9A	; 0x800a9a <UltimoPassaggioStato+0x1>
    231a:	60 91 9b 0a 	lds	r22, 0x0A9B	; 0x800a9b <UltimoPassaggioStato+0x2>
    231e:	70 91 9c 0a 	lds	r23, 0x0A9C	; 0x800a9c <UltimoPassaggioStato+0x3>
    2322:	80 91 95 0a 	lds	r24, 0x0A95	; 0x800a95 <Timer>
    2326:	90 91 96 0a 	lds	r25, 0x0A96	; 0x800a96 <Timer+0x1>
    232a:	a0 91 97 0a 	lds	r26, 0x0A97	; 0x800a97 <Timer+0x2>
    232e:	b0 91 98 0a 	lds	r27, 0x0A98	; 0x800a98 <Timer+0x3>
    2332:	48 0f       	add	r20, r24
    2334:	59 1f       	adc	r21, r25
    2336:	6a 1f       	adc	r22, r26
    2338:	7b 1f       	adc	r23, r27
    233a:	41 50       	subi	r20, 0x01	; 1
    233c:	51 09       	sbc	r21, r1
    233e:	61 09       	sbc	r22, r1
    2340:	71 09       	sbc	r23, r1
    2342:	80 91 9d 0a 	lds	r24, 0x0A9D	; 0x800a9d <secs>
    2346:	90 91 9e 0a 	lds	r25, 0x0A9E	; 0x800a9e <secs+0x1>
    234a:	a0 91 9f 0a 	lds	r26, 0x0A9F	; 0x800a9f <secs+0x2>
    234e:	b0 91 a0 0a 	lds	r27, 0x0AA0	; 0x800aa0 <secs+0x3>
    2352:	48 1b       	sub	r20, r24
    2354:	59 0b       	sbc	r21, r25
    2356:	6a 0b       	sbc	r22, r26
    2358:	7b 0b       	sbc	r23, r27
    235a:	2a e0       	ldi	r18, 0x0A	; 10
    235c:	ce 01       	movw	r24, r28
    235e:	0f 96       	adiw	r24, 0x0f	; 15
    2360:	0e 94 21 3d 	call	0x7a42	; 0x7a42 <_ZN6StringC1Emh>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2364:	6c e0       	ldi	r22, 0x0C	; 12
    2366:	77 e0       	ldi	r23, 0x07	; 7
    2368:	ce 01       	movw	r24, r28
    236a:	01 96       	adiw	r24, 0x01	; 1
    236c:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
    2370:	be 01       	movw	r22, r28
    2372:	61 5f       	subi	r22, 0xF1	; 241
    2374:	7f 4f       	sbci	r23, 0xFF	; 255
    2376:	ce 01       	movw	r24, r28
    2378:	01 96       	adiw	r24, 0x01	; 1
    237a:	0e 94 cc 3d 	call	0x7b98	; 0x7b98 <_ZplRK15StringSumHelperRK6String>
    237e:	6a ee       	ldi	r22, 0xEA	; 234
    2380:	76 e0       	ldi	r23, 0x06	; 6
    2382:	0e 94 dd 3d 	call	0x7bba	; 0x7bba <_ZplRK15StringSumHelperPKc>
    2386:	bc 01       	movw	r22, r24
    2388:	87 e5       	ldi	r24, 0x57	; 87
    238a:	9b e0       	ldi	r25, 0x0B	; 11
    238c:	0e 94 23 39 	call	0x7246	; 0x7246 <_ZN5Print5printERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2390:	ce 01       	movw	r24, r28
    2392:	01 96       	adiw	r24, 0x01	; 1
    2394:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
    2398:	ce 01       	movw	r24, r28
    239a:	0f 96       	adiw	r24, 0x0f	; 15
    239c:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>

        if (TARGA.length() == 5)
    23a0:	80 91 8d 0a 	lds	r24, 0x0A8D	; 0x800a8d <TARGA+0x4>
    23a4:	90 91 8e 0a 	lds	r25, 0x0A8E	; 0x800a8e <TARGA+0x5>
    23a8:	05 97       	sbiw	r24, 0x05	; 5
    23aa:	e9 f4       	brne	.+58     	; 0x23e6 <loop+0x582>
        {
          mezzo.Carb = "X";
    23ac:	67 e1       	ldi	r22, 0x17	; 23
    23ae:	75 e0       	ldi	r23, 0x05	; 5
    23b0:	89 e7       	ldi	r24, 0x79	; 121
    23b2:	9b e0       	ldi	r25, 0x0B	; 11
    23b4:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringaSEPKc>
          mezzo.TARGA = TARGA;
    23b8:	69 e8       	ldi	r22, 0x89	; 137
    23ba:	7a e0       	ldi	r23, 0x0A	; 10
    23bc:	8f e7       	ldi	r24, 0x7F	; 127
    23be:	9b e0       	ldi	r25, 0x0B	; 11
    23c0:	0e 94 4e 3c 	call	0x789c	; 0x789c <_ZN6StringaSERKS_>
          mezzo.KM = "0";
    23c4:	6f e8       	ldi	r22, 0x8F	; 143
    23c6:	78 e0       	ldi	r23, 0x08	; 8
    23c8:	85 e8       	ldi	r24, 0x85	; 133
    23ca:	9b e0       	ldi	r25, 0x0B	; 11
    23cc:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringaSEPKc>
          distr_selezionato = 0;
    23d0:	10 92 2d 0b 	sts	0x0B2D, r1	; 0x800b2d <distr_selezionato>
          avanzaStato(TselDistributore);
    23d4:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <TselDistributore>
    23d8:	70 91 23 01 	lds	r23, 0x0123	; 0x800123 <TselDistributore+0x1>
    23dc:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <TselDistributore+0x2>
    23e0:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <TselDistributore+0x3>
    23e4:	48 c7       	rjmp	.+3728   	; 0x3276 <loop+0x1412>
        }
        else {
          String mezzoString = leggiTAG_Mezzo(false); // con TRUE scrive sul blocco 4 della card NFC DEL MEZZO
    23e6:	60 e0       	ldi	r22, 0x00	; 0
    23e8:	ce 01       	movw	r24, r28
    23ea:	0f 96       	adiw	r24, 0x0f	; 15
    23ec:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <_Z14leggiTAG_Mezzob>
    23f0:	8f e3       	ldi	r24, 0x3F	; 63
    23f2:	9c e9       	ldi	r25, 0x9C	; 156
    23f4:	01 97       	sbiw	r24, 0x01	; 1
    23f6:	f1 f7       	brne	.-4      	; 0x23f4 <loop+0x590>
    23f8:	00 c0       	rjmp	.+0      	; 0x23fa <loop+0x596>
    23fa:	00 00       	nop
          _delay_ms(10);

          Serial.println(mezzoString);
    23fc:	be 01       	movw	r22, r28
    23fe:	61 5f       	subi	r22, 0xF1	; 241
    2400:	7f 4f       	sbci	r23, 0xFF	; 255
    2402:	8e e1       	ldi	r24, 0x1E	; 30
    2404:	9d e0       	ldi	r25, 0x0D	; 13
    2406:	0e 94 4c 39 	call	0x7298	; 0x7298 <_ZN5Print7printlnERK6String>
	int indexOf( const String &str, unsigned int fromIndex ) const;
	int lastIndexOf( char ch ) const;
	int lastIndexOf( char ch, unsigned int fromIndex ) const;
	int lastIndexOf( const String &str ) const;
	int lastIndexOf( const String &str, unsigned int fromIndex ) const;
	String substring( unsigned int beginIndex ) const { return substring(beginIndex, len); };
    240a:	2b 89       	ldd	r18, Y+19	; 0x13
    240c:	3c 89       	ldd	r19, Y+20	; 0x14
    240e:	45 e0       	ldi	r20, 0x05	; 5
    2410:	50 e0       	ldi	r21, 0x00	; 0
    2412:	be 01       	movw	r22, r28
    2414:	61 5f       	subi	r22, 0xF1	; 241
    2416:	7f 4f       	sbci	r23, 0xFF	; 255
    2418:	ce 01       	movw	r24, r28
    241a:	01 96       	adiw	r24, 0x01	; 1
    241c:	0e 94 4c 3e 	call	0x7c98	; 0x7c98 <_ZNK6String9substringEjj>

          mezzo.Carb = mezzoString.substring(5);
    2420:	be 01       	movw	r22, r28
    2422:	6f 5f       	subi	r22, 0xFF	; 255
    2424:	7f 4f       	sbci	r23, 0xFF	; 255
    2426:	89 e7       	ldi	r24, 0x79	; 121
    2428:	9b e0       	ldi	r25, 0x0B	; 11
    242a:	0e 94 6b 3c 	call	0x78d6	; 0x78d6 <_ZN6StringaSEOS_>
    242e:	ce 01       	movw	r24, r28
    2430:	01 96       	adiw	r24, 0x01	; 1
    2432:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
          mezzo.TARGA = mezzoString.substring(0, 5);
    2436:	25 e0       	ldi	r18, 0x05	; 5
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	40 e0       	ldi	r20, 0x00	; 0
    243c:	50 e0       	ldi	r21, 0x00	; 0
    243e:	be 01       	movw	r22, r28
    2440:	61 5f       	subi	r22, 0xF1	; 241
    2442:	7f 4f       	sbci	r23, 0xFF	; 255
    2444:	ce 01       	movw	r24, r28
    2446:	01 96       	adiw	r24, 0x01	; 1
    2448:	0e 94 4c 3e 	call	0x7c98	; 0x7c98 <_ZNK6String9substringEjj>
    244c:	be 01       	movw	r22, r28
    244e:	6f 5f       	subi	r22, 0xFF	; 255
    2450:	7f 4f       	sbci	r23, 0xFF	; 255
    2452:	8f e7       	ldi	r24, 0x7F	; 127
    2454:	9b e0       	ldi	r25, 0x0B	; 11
    2456:	0e 94 6b 3c 	call	0x78d6	; 0x78d6 <_ZN6StringaSEOS_>
    245a:	ce 01       	movw	r24, r28
    245c:	01 96       	adiw	r24, 0x01	; 1
    245e:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
          mezzo.KM = "0";
    2462:	6f e8       	ldi	r22, 0x8F	; 143
    2464:	78 e0       	ldi	r23, 0x08	; 8
    2466:	85 e8       	ldi	r24, 0x85	; 133
    2468:	9b e0       	ldi	r25, 0x0B	; 11
    246a:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringaSEPKc>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    246e:	60 ef       	ldi	r22, 0xF0	; 240
    2470:	76 e0       	ldi	r23, 0x06	; 6
    2472:	ce 01       	movw	r24, r28
    2474:	01 96       	adiw	r24, 0x01	; 1
    2476:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>

          Serial.println("TIPO CARBURANTE: " + mezzo.Carb);
    247a:	69 e7       	ldi	r22, 0x79	; 121
    247c:	7b e0       	ldi	r23, 0x0B	; 11
    247e:	ce 01       	movw	r24, r28
    2480:	01 96       	adiw	r24, 0x01	; 1
    2482:	0e 94 cc 3d 	call	0x7b98	; 0x7b98 <_ZplRK15StringSumHelperRK6String>
    2486:	bc 01       	movw	r22, r24
    2488:	8e e1       	ldi	r24, 0x1E	; 30
    248a:	9d e0       	ldi	r25, 0x0D	; 13
    248c:	0e 94 4c 39 	call	0x7298	; 0x7298 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2490:	ce 01       	movw	r24, r28
    2492:	01 96       	adiw	r24, 0x01	; 1
    2494:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2498:	62 e0       	ldi	r22, 0x02	; 2
    249a:	77 e0       	ldi	r23, 0x07	; 7
    249c:	ce 01       	movw	r24, r28
    249e:	01 96       	adiw	r24, 0x01	; 1
    24a0:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
          Serial.println("TARGA: " + mezzo.TARGA);
    24a4:	6f e7       	ldi	r22, 0x7F	; 127
    24a6:	7b e0       	ldi	r23, 0x0B	; 11
    24a8:	ce 01       	movw	r24, r28
    24aa:	01 96       	adiw	r24, 0x01	; 1
    24ac:	0e 94 cc 3d 	call	0x7b98	; 0x7b98 <_ZplRK15StringSumHelperRK6String>
    24b0:	bc 01       	movw	r22, r24
    24b2:	8e e1       	ldi	r24, 0x1E	; 30
    24b4:	9d e0       	ldi	r25, 0x0D	; 13
    24b6:	0e 94 4c 39 	call	0x7298	; 0x7298 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    24ba:	ce 01       	movw	r24, r28
    24bc:	01 96       	adiw	r24, 0x01	; 1
    24be:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    24c2:	6f e9       	ldi	r22, 0x9F	; 159
    24c4:	75 e0       	ldi	r23, 0x05	; 5
    24c6:	89 e7       	ldi	r24, 0x79	; 121
    24c8:	9b e0       	ldi	r25, 0x0B	; 11
    24ca:	0e 94 00 3e 	call	0x7c00	; 0x7c00 <_ZNK6String6equalsEPKc>

          if ((mezzo.Carb == "B") || (mezzo.Carb == "D")) {
    24ce:	81 11       	cpse	r24, r1
    24d0:	4d c5       	rjmp	.+2714   	; 0x2f6c <loop+0x1108>
    24d2:	6d e9       	ldi	r22, 0x9D	; 157
    24d4:	75 e0       	ldi	r23, 0x05	; 5
    24d6:	89 e7       	ldi	r24, 0x79	; 121
    24d8:	9b e0       	ldi	r25, 0x0B	; 11
    24da:	0e 94 00 3e 	call	0x7c00	; 0x7c00 <_ZNK6String6equalsEPKc>
    24de:	81 11       	cpse	r24, r1
    24e0:	45 c5       	rjmp	.+2698   	; 0x2f6c <loop+0x1108>
          mezzo.KM = "0";
          distr_selezionato = 0;
          avanzaStato(TselDistributore);
        }
        else {
          String mezzoString = leggiTAG_Mezzo(false); // con TRUE scrive sul blocco 4 della card NFC DEL MEZZO
    24e2:	ce 01       	movw	r24, r28
    24e4:	0f 96       	adiw	r24, 0x0f	; 15
    24e6:	85 c4       	rjmp	.+2314   	; 0x2df2 <loop+0xf8e>
        }
      }
      break;
    case 4:
      {
        lcd.setCursor(0, 0);
    24e8:	40 e0       	ldi	r20, 0x00	; 0
    24ea:	60 e0       	ldi	r22, 0x00	; 0
    24ec:	87 e5       	ldi	r24, 0x57	; 87
    24ee:	9b e0       	ldi	r25, 0x0B	; 11
    24f0:	0e 94 a7 30 	call	0x614e	; 0x614e <_ZN3LCD9setCursorEhh>
        lcd.print((char)1);  // STAMPA LA CLESSIDRA
    24f4:	61 e0       	ldi	r22, 0x01	; 1
    24f6:	87 e5       	ldi	r24, 0x57	; 87
    24f8:	9b e0       	ldi	r25, 0x0B	; 11
    24fa:	0e 94 32 39 	call	0x7264	; 0x7264 <_ZN5Print5printEc>
        lcd.print("Tempo: " + String((UltimoPassaggioStato + Timer - secs - 1)) + " sec ");
    24fe:	40 91 99 0a 	lds	r20, 0x0A99	; 0x800a99 <UltimoPassaggioStato>
    2502:	50 91 9a 0a 	lds	r21, 0x0A9A	; 0x800a9a <UltimoPassaggioStato+0x1>
    2506:	60 91 9b 0a 	lds	r22, 0x0A9B	; 0x800a9b <UltimoPassaggioStato+0x2>
    250a:	70 91 9c 0a 	lds	r23, 0x0A9C	; 0x800a9c <UltimoPassaggioStato+0x3>
    250e:	80 91 95 0a 	lds	r24, 0x0A95	; 0x800a95 <Timer>
    2512:	90 91 96 0a 	lds	r25, 0x0A96	; 0x800a96 <Timer+0x1>
    2516:	a0 91 97 0a 	lds	r26, 0x0A97	; 0x800a97 <Timer+0x2>
    251a:	b0 91 98 0a 	lds	r27, 0x0A98	; 0x800a98 <Timer+0x3>
    251e:	48 0f       	add	r20, r24
    2520:	59 1f       	adc	r21, r25
    2522:	6a 1f       	adc	r22, r26
    2524:	7b 1f       	adc	r23, r27
    2526:	41 50       	subi	r20, 0x01	; 1
    2528:	51 09       	sbc	r21, r1
    252a:	61 09       	sbc	r22, r1
    252c:	71 09       	sbc	r23, r1
    252e:	80 91 9d 0a 	lds	r24, 0x0A9D	; 0x800a9d <secs>
    2532:	90 91 9e 0a 	lds	r25, 0x0A9E	; 0x800a9e <secs+0x1>
    2536:	a0 91 9f 0a 	lds	r26, 0x0A9F	; 0x800a9f <secs+0x2>
    253a:	b0 91 a0 0a 	lds	r27, 0x0AA0	; 0x800aa0 <secs+0x3>
    253e:	48 1b       	sub	r20, r24
    2540:	59 0b       	sbc	r21, r25
    2542:	6a 0b       	sbc	r22, r26
    2544:	7b 0b       	sbc	r23, r27
    2546:	2a e0       	ldi	r18, 0x0A	; 10
    2548:	ce 01       	movw	r24, r28
    254a:	0f 96       	adiw	r24, 0x0f	; 15
    254c:	0e 94 21 3d 	call	0x7a42	; 0x7a42 <_ZN6StringC1Emh>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2550:	6c e0       	ldi	r22, 0x0C	; 12
    2552:	77 e0       	ldi	r23, 0x07	; 7
    2554:	ce 01       	movw	r24, r28
    2556:	01 96       	adiw	r24, 0x01	; 1
    2558:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
    255c:	be 01       	movw	r22, r28
    255e:	61 5f       	subi	r22, 0xF1	; 241
    2560:	7f 4f       	sbci	r23, 0xFF	; 255
    2562:	ce 01       	movw	r24, r28
    2564:	01 96       	adiw	r24, 0x01	; 1
    2566:	0e 94 cc 3d 	call	0x7b98	; 0x7b98 <_ZplRK15StringSumHelperRK6String>
    256a:	6a ee       	ldi	r22, 0xEA	; 234
    256c:	76 e0       	ldi	r23, 0x06	; 6
    256e:	0e 94 dd 3d 	call	0x7bba	; 0x7bba <_ZplRK15StringSumHelperPKc>
    2572:	bc 01       	movw	r22, r24
    2574:	87 e5       	ldi	r24, 0x57	; 87
    2576:	9b e0       	ldi	r25, 0x0B	; 11
    2578:	0e 94 23 39 	call	0x7246	; 0x7246 <_ZN5Print5printERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    257c:	ce 01       	movw	r24, r28
    257e:	01 96       	adiw	r24, 0x01	; 1
    2580:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
    2584:	ce 01       	movw	r24, r28
    2586:	0f 96       	adiw	r24, 0x0f	; 15
    2588:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    258c:	6f e9       	ldi	r22, 0x9F	; 159
    258e:	75 e0       	ldi	r23, 0x05	; 5
    2590:	89 e7       	ldi	r24, 0x79	; 121
    2592:	9b e0       	ldi	r25, 0x0B	; 11
    2594:	0e 94 00 3e 	call	0x7c00	; 0x7c00 <_ZNK6String6equalsEPKc>

        // Verifica scelta distributore

        if ((mezzo.Carb == "B") || (distr_selezionato == 2))
    2598:	81 11       	cpse	r24, r1
    259a:	1f c5       	rjmp	.+2622   	; 0x2fda <loop+0x1176>
    259c:	80 91 2d 0b 	lds	r24, 0x0B2D	; 0x800b2d <distr_selezionato>
    25a0:	82 30       	cpi	r24, 0x02	; 2
    25a2:	09 f0       	breq	.+2      	; 0x25a6 <loop+0x742>
    25a4:	46 c5       	rjmp	.+2700   	; 0x3032 <loop+0x11ce>
    25a6:	19 c5       	rjmp	.+2610   	; 0x2fda <loop+0x1176>
        }
      }
      break;
    case 5:
      {
        lcd.setCursor(0, 0);
    25a8:	40 e0       	ldi	r20, 0x00	; 0
    25aa:	60 e0       	ldi	r22, 0x00	; 0
    25ac:	87 e5       	ldi	r24, 0x57	; 87
    25ae:	9b e0       	ldi	r25, 0x0B	; 11
    25b0:	0e 94 a7 30 	call	0x614e	; 0x614e <_ZN3LCD9setCursorEhh>
        lcd.print((char)1);  // STAMPA LA CLESSIDRA
    25b4:	61 e0       	ldi	r22, 0x01	; 1
    25b6:	87 e5       	ldi	r24, 0x57	; 87
    25b8:	9b e0       	ldi	r25, 0x0B	; 11
    25ba:	0e 94 32 39 	call	0x7264	; 0x7264 <_ZN5Print5printEc>
        lcd.print("Tempo: " + String((UltimoPassaggioStato + Timer - secs - 1)) + " sec ");
    25be:	40 91 99 0a 	lds	r20, 0x0A99	; 0x800a99 <UltimoPassaggioStato>
    25c2:	50 91 9a 0a 	lds	r21, 0x0A9A	; 0x800a9a <UltimoPassaggioStato+0x1>
    25c6:	60 91 9b 0a 	lds	r22, 0x0A9B	; 0x800a9b <UltimoPassaggioStato+0x2>
    25ca:	70 91 9c 0a 	lds	r23, 0x0A9C	; 0x800a9c <UltimoPassaggioStato+0x3>
    25ce:	80 91 95 0a 	lds	r24, 0x0A95	; 0x800a95 <Timer>
    25d2:	90 91 96 0a 	lds	r25, 0x0A96	; 0x800a96 <Timer+0x1>
    25d6:	a0 91 97 0a 	lds	r26, 0x0A97	; 0x800a97 <Timer+0x2>
    25da:	b0 91 98 0a 	lds	r27, 0x0A98	; 0x800a98 <Timer+0x3>
    25de:	48 0f       	add	r20, r24
    25e0:	59 1f       	adc	r21, r25
    25e2:	6a 1f       	adc	r22, r26
    25e4:	7b 1f       	adc	r23, r27
    25e6:	41 50       	subi	r20, 0x01	; 1
    25e8:	51 09       	sbc	r21, r1
    25ea:	61 09       	sbc	r22, r1
    25ec:	71 09       	sbc	r23, r1
    25ee:	80 91 9d 0a 	lds	r24, 0x0A9D	; 0x800a9d <secs>
    25f2:	90 91 9e 0a 	lds	r25, 0x0A9E	; 0x800a9e <secs+0x1>
    25f6:	a0 91 9f 0a 	lds	r26, 0x0A9F	; 0x800a9f <secs+0x2>
    25fa:	b0 91 a0 0a 	lds	r27, 0x0AA0	; 0x800aa0 <secs+0x3>
    25fe:	48 1b       	sub	r20, r24
    2600:	59 0b       	sbc	r21, r25
    2602:	6a 0b       	sbc	r22, r26
    2604:	7b 0b       	sbc	r23, r27
    2606:	2a e0       	ldi	r18, 0x0A	; 10
    2608:	ce 01       	movw	r24, r28
    260a:	0f 96       	adiw	r24, 0x0f	; 15
    260c:	0e 94 21 3d 	call	0x7a42	; 0x7a42 <_ZN6StringC1Emh>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2610:	6c e0       	ldi	r22, 0x0C	; 12
    2612:	77 e0       	ldi	r23, 0x07	; 7
    2614:	ce 01       	movw	r24, r28
    2616:	01 96       	adiw	r24, 0x01	; 1
    2618:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
    261c:	be 01       	movw	r22, r28
    261e:	61 5f       	subi	r22, 0xF1	; 241
    2620:	7f 4f       	sbci	r23, 0xFF	; 255
    2622:	ce 01       	movw	r24, r28
    2624:	01 96       	adiw	r24, 0x01	; 1
    2626:	0e 94 cc 3d 	call	0x7b98	; 0x7b98 <_ZplRK15StringSumHelperRK6String>
    262a:	6a ee       	ldi	r22, 0xEA	; 234
    262c:	76 e0       	ldi	r23, 0x06	; 6
    262e:	0e 94 dd 3d 	call	0x7bba	; 0x7bba <_ZplRK15StringSumHelperPKc>
    2632:	bc 01       	movw	r22, r24
    2634:	87 e5       	ldi	r24, 0x57	; 87
    2636:	9b e0       	ldi	r25, 0x0B	; 11
    2638:	0e 94 23 39 	call	0x7246	; 0x7246 <_ZN5Print5printERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    263c:	ce 01       	movw	r24, r28
    263e:	01 96       	adiw	r24, 0x01	; 1
    2640:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
    2644:	ce 01       	movw	r24, r28
    2646:	0f 96       	adiw	r24, 0x0f	; 15
    2648:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
        // RaccoltaDati[4] = "1234";        
        /*****************************************************************/
        gpio.setCONFREG(0x3C);
    264c:	6c e3       	ldi	r22, 0x3C	; 60
    264e:	80 e8       	ldi	r24, 0x80	; 128
    2650:	9a e0       	ldi	r25, 0x0A	; 10
    2652:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <_ZN7PCA953410setCONFREGEh>
        uint8_t c = gpio.Read_IP_REGISTER();
    2656:	80 e8       	ldi	r24, 0x80	; 128
    2658:	9a e0       	ldi	r25, 0x0A	; 10
    265a:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <_ZN7PCA953416Read_IP_REGISTEREv>
    265e:	e8 2e       	mov	r14, r24
    2660:	42 e0       	ldi	r20, 0x02	; 2
    2662:	be 01       	movw	r22, r28
    2664:	69 5e       	subi	r22, 0xE9	; 233
    2666:	7f 4f       	sbci	r23, 0xFF	; 255
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	0e 94 cb 42 	call	0x8596	; 0x8596 <__itoa_ncheck>
        char buf[8];
        itoa(c, buf, 2);
        gpio.setCONFREG(0xC3);
    266e:	63 ec       	ldi	r22, 0xC3	; 195
    2670:	80 e8       	ldi	r24, 0x80	; 128
    2672:	9a e0       	ldi	r25, 0x0A	; 10
    2674:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <_ZN7PCA953410setCONFREGEh>
        uint8_t r = gpio.Read_IP_REGISTER();
    2678:	80 e8       	ldi	r24, 0x80	; 128
    267a:	9a e0       	ldi	r25, 0x0A	; 10
    267c:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <_ZN7PCA953416Read_IP_REGISTEREv>
    2680:	f8 2e       	mov	r15, r24
    2682:	42 e0       	ldi	r20, 0x02	; 2
    2684:	be 01       	movw	r22, r28
    2686:	61 5f       	subi	r22, 0xF1	; 241
    2688:	7f 4f       	sbci	r23, 0xFF	; 255
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	0e 94 cb 42 	call	0x8596	; 0x8596 <__itoa_ncheck>
        char bufr[8];
        itoa(r, bufr, 2);
        char ris[8];
        uint8_t z = (r ^ c);
        itoa(z, ris, 2);
    2690:	fe 24       	eor	r15, r14
    2692:	ef 2c       	mov	r14, r15
    2694:	f1 2c       	mov	r15, r1
    2696:	42 e0       	ldi	r20, 0x02	; 2
    2698:	be 01       	movw	r22, r28
    269a:	6f 5f       	subi	r22, 0xFF	; 255
    269c:	7f 4f       	sbci	r23, 0xFF	; 255
    269e:	c7 01       	movw	r24, r14
    26a0:	0e 94 cb 42 	call	0x8596	; 0x8596 <__itoa_ncheck>
        char K = getCharKeypad(int(z));
    26a4:	c7 01       	movw	r24, r14
    26a6:	0e 94 a5 02 	call	0x54a	; 0x54a <_Z13getCharKeypadi>
    26aa:	9f ef       	ldi	r25, 0xFF	; 255
    26ac:	29 ef       	ldi	r18, 0xF9	; 249
    26ae:	30 e0       	ldi	r19, 0x00	; 0
    26b0:	91 50       	subi	r25, 0x01	; 1
    26b2:	20 40       	sbci	r18, 0x00	; 0
    26b4:	30 40       	sbci	r19, 0x00	; 0
    26b6:	e1 f7       	brne	.-8      	; 0x26b0 <loop+0x84c>
    26b8:	00 c0       	rjmp	.+0      	; 0x26ba <loop+0x856>
        _delay_ms(20);
        /*****************************************************************/

        inputKM(K);
    26ba:	00 00       	nop
    26bc:	be d8       	rcall	.-3716   	; 0x183a <_Z7inputKMc>
        impulsi = 0;
    26be:	10 92 2f 0b 	sts	0x0B2F, r1	; 0x800b2f <impulsi+0x1>
    26c2:	10 92 2e 0b 	sts	0x0B2E, r1	; 0x800b2e <impulsi>
      }
      break;
    26c6:	97 c3       	rjmp	.+1838   	; 0x2df6 <loop+0xf92>
	case 6: 
	{ 
		lcd.setCursor(0, 0);
    26c8:	40 e0       	ldi	r20, 0x00	; 0
    26ca:	60 e0       	ldi	r22, 0x00	; 0
    26cc:	87 e5       	ldi	r24, 0x57	; 87
    26ce:	9b e0       	ldi	r25, 0x0B	; 11
    26d0:	0e 94 a7 30 	call	0x614e	; 0x614e <_ZN3LCD9setCursorEhh>
		lcd.print((char)1);  // STAMPA LA CLESSIDRA
    26d4:	61 e0       	ldi	r22, 0x01	; 1
    26d6:	87 e5       	ldi	r24, 0x57	; 87
    26d8:	9b e0       	ldi	r25, 0x0B	; 11
    26da:	0e 94 32 39 	call	0x7264	; 0x7264 <_ZN5Print5printEc>
		lcd.print("Tempo: " + String((UltimoPassaggioStato + Timer - secs - 1)) + " sec ");
    26de:	40 91 99 0a 	lds	r20, 0x0A99	; 0x800a99 <UltimoPassaggioStato>
    26e2:	50 91 9a 0a 	lds	r21, 0x0A9A	; 0x800a9a <UltimoPassaggioStato+0x1>
    26e6:	60 91 9b 0a 	lds	r22, 0x0A9B	; 0x800a9b <UltimoPassaggioStato+0x2>
    26ea:	70 91 9c 0a 	lds	r23, 0x0A9C	; 0x800a9c <UltimoPassaggioStato+0x3>
    26ee:	80 91 95 0a 	lds	r24, 0x0A95	; 0x800a95 <Timer>
    26f2:	90 91 96 0a 	lds	r25, 0x0A96	; 0x800a96 <Timer+0x1>
    26f6:	a0 91 97 0a 	lds	r26, 0x0A97	; 0x800a97 <Timer+0x2>
    26fa:	b0 91 98 0a 	lds	r27, 0x0A98	; 0x800a98 <Timer+0x3>
    26fe:	48 0f       	add	r20, r24
    2700:	59 1f       	adc	r21, r25
    2702:	6a 1f       	adc	r22, r26
    2704:	7b 1f       	adc	r23, r27
    2706:	41 50       	subi	r20, 0x01	; 1
    2708:	51 09       	sbc	r21, r1
    270a:	61 09       	sbc	r22, r1
    270c:	71 09       	sbc	r23, r1
    270e:	80 91 9d 0a 	lds	r24, 0x0A9D	; 0x800a9d <secs>
    2712:	90 91 9e 0a 	lds	r25, 0x0A9E	; 0x800a9e <secs+0x1>
    2716:	a0 91 9f 0a 	lds	r26, 0x0A9F	; 0x800a9f <secs+0x2>
    271a:	b0 91 a0 0a 	lds	r27, 0x0AA0	; 0x800aa0 <secs+0x3>
    271e:	48 1b       	sub	r20, r24
    2720:	59 0b       	sbc	r21, r25
    2722:	6a 0b       	sbc	r22, r26
    2724:	7b 0b       	sbc	r23, r27
    2726:	2a e0       	ldi	r18, 0x0A	; 10
    2728:	ce 01       	movw	r24, r28
    272a:	0f 96       	adiw	r24, 0x0f	; 15
    272c:	0e 94 21 3d 	call	0x7a42	; 0x7a42 <_ZN6StringC1Emh>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2730:	6c e0       	ldi	r22, 0x0C	; 12
    2732:	77 e0       	ldi	r23, 0x07	; 7
    2734:	ce 01       	movw	r24, r28
    2736:	01 96       	adiw	r24, 0x01	; 1
    2738:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
    273c:	be 01       	movw	r22, r28
    273e:	61 5f       	subi	r22, 0xF1	; 241
    2740:	7f 4f       	sbci	r23, 0xFF	; 255
    2742:	ce 01       	movw	r24, r28
    2744:	01 96       	adiw	r24, 0x01	; 1
    2746:	0e 94 cc 3d 	call	0x7b98	; 0x7b98 <_ZplRK15StringSumHelperRK6String>
    274a:	6a ee       	ldi	r22, 0xEA	; 234
    274c:	76 e0       	ldi	r23, 0x06	; 6
    274e:	0e 94 dd 3d 	call	0x7bba	; 0x7bba <_ZplRK15StringSumHelperPKc>
    2752:	bc 01       	movw	r22, r24
    2754:	87 e5       	ldi	r24, 0x57	; 87
    2756:	9b e0       	ldi	r25, 0x0B	; 11
    2758:	0e 94 23 39 	call	0x7246	; 0x7246 <_ZN5Print5printERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    275c:	ce 01       	movw	r24, r28
    275e:	01 96       	adiw	r24, 0x01	; 1
    2760:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
    2764:	ce 01       	movw	r24, r28
    2766:	0f 96       	adiw	r24, 0x0f	; 15
    2768:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
		 
		if (testbit(PINA,1) && (mezzo.Carb == "D"))
    276c:	01 9b       	sbis	0x00, 1	; 0
    276e:	08 c0       	rjmp	.+16     	; 0x2780 <loop+0x91c>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    2770:	6d e9       	ldi	r22, 0x9D	; 157
    2772:	75 e0       	ldi	r23, 0x05	; 5
    2774:	89 e7       	ldi	r24, 0x79	; 121
    2776:	9b e0       	ldi	r25, 0x0B	; 11
    2778:	0e 94 00 3e 	call	0x7c00	; 0x7c00 <_ZNK6String6equalsEPKc>
    277c:	81 11       	cpse	r24, r1
    277e:	9c c4       	rjmp	.+2360   	; 0x30b8 <loop+0x1254>
			avanzaStato(TmaxErogazione); 
		}
		
		// CONTATTO PISTOLA BENZINA

		if  (testbit(PINB,1) && (mezzo.Carb == "B"))
    2780:	19 9b       	sbis	0x03, 1	; 3
    2782:	39 c3       	rjmp	.+1650   	; 0x2df6 <loop+0xf92>
    2784:	6f e9       	ldi	r22, 0x9F	; 159
    2786:	75 e0       	ldi	r23, 0x05	; 5
    2788:	89 e7       	ldi	r24, 0x79	; 121
    278a:	9b e0       	ldi	r25, 0x0B	; 11
    278c:	0e 94 00 3e 	call	0x7c00	; 0x7c00 <_ZNK6String6equalsEPKc>
    2790:	81 11       	cpse	r24, r1
    2792:	d5 c4       	rjmp	.+2474   	; 0x313e <loop+0x12da>
    2794:	30 c3       	rjmp	.+1632   	; 0x2df6 <loop+0xf92>
		 
	}
	break;
    case 7:
      {
        lcd.setCursor(0, 0);
    2796:	40 e0       	ldi	r20, 0x00	; 0
    2798:	60 e0       	ldi	r22, 0x00	; 0
    279a:	87 e5       	ldi	r24, 0x57	; 87
    279c:	9b e0       	ldi	r25, 0x0B	; 11
    279e:	0e 94 a7 30 	call	0x614e	; 0x614e <_ZN3LCD9setCursorEhh>
        lcd.print((char)1);  // STAMPA LA CLESSIDRA
    27a2:	61 e0       	ldi	r22, 0x01	; 1
    27a4:	87 e5       	ldi	r24, 0x57	; 87
    27a6:	9b e0       	ldi	r25, 0x0B	; 11
    27a8:	0e 94 32 39 	call	0x7264	; 0x7264 <_ZN5Print5printEc>
        lcd.print("  Tempo: " + String((UltimoPassaggioStato + Timer - secs - 1)) + " sec ");
    27ac:	40 91 99 0a 	lds	r20, 0x0A99	; 0x800a99 <UltimoPassaggioStato>
    27b0:	50 91 9a 0a 	lds	r21, 0x0A9A	; 0x800a9a <UltimoPassaggioStato+0x1>
    27b4:	60 91 9b 0a 	lds	r22, 0x0A9B	; 0x800a9b <UltimoPassaggioStato+0x2>
    27b8:	70 91 9c 0a 	lds	r23, 0x0A9C	; 0x800a9c <UltimoPassaggioStato+0x3>
    27bc:	80 91 95 0a 	lds	r24, 0x0A95	; 0x800a95 <Timer>
    27c0:	90 91 96 0a 	lds	r25, 0x0A96	; 0x800a96 <Timer+0x1>
    27c4:	a0 91 97 0a 	lds	r26, 0x0A97	; 0x800a97 <Timer+0x2>
    27c8:	b0 91 98 0a 	lds	r27, 0x0A98	; 0x800a98 <Timer+0x3>
    27cc:	48 0f       	add	r20, r24
    27ce:	59 1f       	adc	r21, r25
    27d0:	6a 1f       	adc	r22, r26
    27d2:	7b 1f       	adc	r23, r27
    27d4:	41 50       	subi	r20, 0x01	; 1
    27d6:	51 09       	sbc	r21, r1
    27d8:	61 09       	sbc	r22, r1
    27da:	71 09       	sbc	r23, r1
    27dc:	80 91 9d 0a 	lds	r24, 0x0A9D	; 0x800a9d <secs>
    27e0:	90 91 9e 0a 	lds	r25, 0x0A9E	; 0x800a9e <secs+0x1>
    27e4:	a0 91 9f 0a 	lds	r26, 0x0A9F	; 0x800a9f <secs+0x2>
    27e8:	b0 91 a0 0a 	lds	r27, 0x0AA0	; 0x800aa0 <secs+0x3>
    27ec:	48 1b       	sub	r20, r24
    27ee:	59 0b       	sbc	r21, r25
    27f0:	6a 0b       	sbc	r22, r26
    27f2:	7b 0b       	sbc	r23, r27
    27f4:	2a e0       	ldi	r18, 0x0A	; 10
    27f6:	ce 01       	movw	r24, r28
    27f8:	0f 96       	adiw	r24, 0x0f	; 15
    27fa:	0e 94 21 3d 	call	0x7a42	; 0x7a42 <_ZN6StringC1Emh>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    27fe:	6a e0       	ldi	r22, 0x0A	; 10
    2800:	77 e0       	ldi	r23, 0x07	; 7
    2802:	ce 01       	movw	r24, r28
    2804:	01 96       	adiw	r24, 0x01	; 1
    2806:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
    280a:	be 01       	movw	r22, r28
    280c:	61 5f       	subi	r22, 0xF1	; 241
    280e:	7f 4f       	sbci	r23, 0xFF	; 255
    2810:	ce 01       	movw	r24, r28
    2812:	01 96       	adiw	r24, 0x01	; 1
    2814:	0e 94 cc 3d 	call	0x7b98	; 0x7b98 <_ZplRK15StringSumHelperRK6String>
    2818:	6a ee       	ldi	r22, 0xEA	; 234
    281a:	76 e0       	ldi	r23, 0x06	; 6
    281c:	0e 94 dd 3d 	call	0x7bba	; 0x7bba <_ZplRK15StringSumHelperPKc>
    2820:	bc 01       	movw	r22, r24
    2822:	87 e5       	ldi	r24, 0x57	; 87
    2824:	9b e0       	ldi	r25, 0x0B	; 11
    2826:	0e 94 23 39 	call	0x7246	; 0x7246 <_ZN5Print5printERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    282a:	ce 01       	movw	r24, r28
    282c:	01 96       	adiw	r24, 0x01	; 1
    282e:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
    2832:	ce 01       	movw	r24, r28
    2834:	0f 96       	adiw	r24, 0x0f	; 15
    2836:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
          disable_ETH();
          _delay_ms(2);
          enable_ETH();
          /*****************************************************************/

        double lt = impulsiToLitri(impulsi);
    283a:	80 91 2e 0b 	lds	r24, 0x0B2E	; 0x800b2e <impulsi>
    283e:	90 91 2f 0b 	lds	r25, 0x0B2F	; 0x800b2f <impulsi+0x1>
    2842:	0e 94 9b 09 	call	0x1336	; 0x1336 <_Z14impulsiToLitrii>
    2846:	6b 01       	movw	r12, r22
    2848:	7c 01       	movw	r14, r24

        righeDisplay[1] = "LITRI :" + String(lt);
    284a:	22 e0       	ldi	r18, 0x02	; 2
    284c:	ab 01       	movw	r20, r22
    284e:	bc 01       	movw	r22, r24
    2850:	ce 01       	movw	r24, r28
    2852:	0f 96       	adiw	r24, 0x0f	; 15
    2854:	0e 94 4c 3d 	call	0x7a98	; 0x7a98 <_ZN6StringC1Edh>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2858:	64 e1       	ldi	r22, 0x14	; 20
    285a:	77 e0       	ldi	r23, 0x07	; 7
    285c:	ce 01       	movw	r24, r28
    285e:	01 96       	adiw	r24, 0x01	; 1
    2860:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
    2864:	be 01       	movw	r22, r28
    2866:	61 5f       	subi	r22, 0xF1	; 241
    2868:	7f 4f       	sbci	r23, 0xFF	; 255
    286a:	ce 01       	movw	r24, r28
    286c:	01 96       	adiw	r24, 0x01	; 1
    286e:	0e 94 cc 3d 	call	0x7b98	; 0x7b98 <_ZplRK15StringSumHelperRK6String>
    2872:	bc 01       	movw	r22, r24
    2874:	85 ee       	ldi	r24, 0xE5	; 229
    2876:	9a e0       	ldi	r25, 0x0A	; 10
    2878:	0e 94 4e 3c 	call	0x789c	; 0x789c <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    287c:	ce 01       	movw	r24, r28
    287e:	01 96       	adiw	r24, 0x01	; 1
    2880:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
    2884:	ce 01       	movw	r24, r28
    2886:	0f 96       	adiw	r24, 0x0f	; 15
    2888:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    288c:	66 ec       	ldi	r22, 0xC6	; 198
    288e:	75 e0       	ldi	r23, 0x05	; 5
    2890:	ce 01       	movw	r24, r28
    2892:	01 96       	adiw	r24, 0x01	; 1
    2894:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
		righeDisplay[2] = "TARGA:" + mezzo.TARGA;
    2898:	6f e7       	ldi	r22, 0x7F	; 127
    289a:	7b e0       	ldi	r23, 0x0B	; 11
    289c:	ce 01       	movw	r24, r28
    289e:	01 96       	adiw	r24, 0x01	; 1
    28a0:	0e 94 cc 3d 	call	0x7b98	; 0x7b98 <_ZplRK15StringSumHelperRK6String>
    28a4:	bc 01       	movw	r22, r24
    28a6:	8b ee       	ldi	r24, 0xEB	; 235
    28a8:	9a e0       	ldi	r25, 0x0A	; 10
    28aa:	0e 94 4e 3c 	call	0x789c	; 0x789c <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    28ae:	ce 01       	movw	r24, r28
    28b0:	01 96       	adiw	r24, 0x01	; 1
    28b2:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    28b6:	6c e1       	ldi	r22, 0x1C	; 28
    28b8:	77 e0       	ldi	r23, 0x07	; 7
    28ba:	ce 01       	movw	r24, r28
    28bc:	01 96       	adiw	r24, 0x01	; 1
    28be:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
        //righeDisplay[2] = "imp :" + String(impulsi);
        righeDisplay[3] = "Erogazione: " + StatoAttuale;
    28c2:	6a e3       	ldi	r22, 0x3A	; 58
    28c4:	7b e0       	ldi	r23, 0x0B	; 11
    28c6:	ce 01       	movw	r24, r28
    28c8:	01 96       	adiw	r24, 0x01	; 1
    28ca:	0e 94 cc 3d 	call	0x7b98	; 0x7b98 <_ZplRK15StringSumHelperRK6String>
    28ce:	bc 01       	movw	r22, r24
    28d0:	81 ef       	ldi	r24, 0xF1	; 241
    28d2:	9a e0       	ldi	r25, 0x0A	; 10
    28d4:	0e 94 4e 3c 	call	0x789c	; 0x789c <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    28d8:	ce 01       	movw	r24, r28
    28da:	01 96       	adiw	r24, 0x01	; 1
    28dc:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>

        lcd.setCursor(0, 1);
    28e0:	41 e0       	ldi	r20, 0x01	; 1
    28e2:	60 e0       	ldi	r22, 0x00	; 0
    28e4:	87 e5       	ldi	r24, 0x57	; 87
    28e6:	9b e0       	ldi	r25, 0x0B	; 11
    28e8:	0e 94 a7 30 	call	0x614e	; 0x614e <_ZN3LCD9setCursorEhh>
        lcd.print(righeDisplay[1]);
    28ec:	65 ee       	ldi	r22, 0xE5	; 229
    28ee:	7a e0       	ldi	r23, 0x0A	; 10
    28f0:	87 e5       	ldi	r24, 0x57	; 87
    28f2:	9b e0       	ldi	r25, 0x0B	; 11
    28f4:	0e 94 23 39 	call	0x7246	; 0x7246 <_ZN5Print5printERK6String>
        lcd.setCursor(0, 2);
    28f8:	42 e0       	ldi	r20, 0x02	; 2
    28fa:	60 e0       	ldi	r22, 0x00	; 0
    28fc:	87 e5       	ldi	r24, 0x57	; 87
    28fe:	9b e0       	ldi	r25, 0x0B	; 11
    2900:	0e 94 a7 30 	call	0x614e	; 0x614e <_ZN3LCD9setCursorEhh>
        lcd.print(righeDisplay[2]);
    2904:	6b ee       	ldi	r22, 0xEB	; 235
    2906:	7a e0       	ldi	r23, 0x0A	; 10
    2908:	87 e5       	ldi	r24, 0x57	; 87
    290a:	9b e0       	ldi	r25, 0x0B	; 11
    290c:	0e 94 23 39 	call	0x7246	; 0x7246 <_ZN5Print5printERK6String>
        lcd.setCursor(0, 3);
    2910:	43 e0       	ldi	r20, 0x03	; 3
    2912:	60 e0       	ldi	r22, 0x00	; 0
    2914:	87 e5       	ldi	r24, 0x57	; 87
    2916:	9b e0       	ldi	r25, 0x0B	; 11
    2918:	0e 94 a7 30 	call	0x614e	; 0x614e <_ZN3LCD9setCursorEhh>
        lcd.print(righeDisplay[3]);
    291c:	61 ef       	ldi	r22, 0xF1	; 241
    291e:	7a e0       	ldi	r23, 0x0A	; 10
    2920:	87 e5       	ldi	r24, 0x57	; 87
    2922:	9b e0       	ldi	r25, 0x0B	; 11
    2924:	0e 94 23 39 	call	0x7246	; 0x7246 <_ZN5Print5printERK6String>

        // CONTATTO PISTOLA DIESEL

 		if (!testbit(PINA,1) && (mezzo.Carb == "D"))
    2928:	01 99       	sbic	0x00, 1	; 0
    292a:	08 c0       	rjmp	.+16     	; 0x293c <loop+0xad8>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    292c:	6d e9       	ldi	r22, 0x9D	; 157
    292e:	75 e0       	ldi	r23, 0x05	; 5
    2930:	89 e7       	ldi	r24, 0x79	; 121
    2932:	9b e0       	ldi	r25, 0x0B	; 11
    2934:	0e 94 00 3e 	call	0x7c00	; 0x7c00 <_ZNK6String6equalsEPKc>
    2938:	81 11       	cpse	r24, r1
    293a:	42 c4       	rjmp	.+2180   	; 0x31c0 <loop+0x135c>
          avanzaStato(TmaxInviodati);
        }

        // CONTATTO PISTOLA BENZINA

		if (!testbit(PINB,1) && (mezzo.Carb == "B"))
    293c:	19 99       	sbic	0x03, 1	; 3
    293e:	5b c2       	rjmp	.+1206   	; 0x2df6 <loop+0xf92>
    2940:	6f e9       	ldi	r22, 0x9F	; 159
    2942:	75 e0       	ldi	r23, 0x05	; 5
    2944:	89 e7       	ldi	r24, 0x79	; 121
    2946:	9b e0       	ldi	r25, 0x0B	; 11
    2948:	0e 94 00 3e 	call	0x7c00	; 0x7c00 <_ZNK6String6equalsEPKc>
    294c:	81 11       	cpse	r24, r1
    294e:	67 c4       	rjmp	.+2254   	; 0x321e <loop+0x13ba>
    2950:	52 c2       	rjmp	.+1188   	; 0x2df6 <loop+0xf92>
        }        
      }
      break;
    case 8 :
      {
        righeDisplay[1] =  StatoAttuale;
    2952:	6a e3       	ldi	r22, 0x3A	; 58
    2954:	7b e0       	ldi	r23, 0x0B	; 11
    2956:	85 ee       	ldi	r24, 0xE5	; 229
    2958:	9a e0       	ldi	r25, 0x0A	; 10
    295a:	0e 94 4e 3c 	call	0x789c	; 0x789c <_ZN6StringaSERKS_>
        righeDisplay[2] = "Invio........";
    295e:	69 e2       	ldi	r22, 0x29	; 41
    2960:	77 e0       	ldi	r23, 0x07	; 7
    2962:	8b ee       	ldi	r24, 0xEB	; 235
    2964:	9a e0       	ldi	r25, 0x0A	; 10
    2966:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringaSEPKc>
        righeDisplay[3] =  "";      
    296a:	6c ee       	ldi	r22, 0xEC	; 236
    296c:	71 e0       	ldi	r23, 0x01	; 1
    296e:	81 ef       	ldi	r24, 0xF1	; 241
    2970:	9a e0       	ldi	r25, 0x0A	; 10
    2972:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringaSEPKc>
        displayLCD(righeDisplay, stato_procedura, 100);
    2976:	60 91 30 0b 	lds	r22, 0x0B30	; 0x800b30 <stato_procedura>
    297a:	70 91 31 0b 	lds	r23, 0x0B31	; 0x800b31 <stato_procedura+0x1>
    297e:	44 e6       	ldi	r20, 0x64	; 100
    2980:	50 e0       	ldi	r21, 0x00	; 0
    2982:	8f ed       	ldi	r24, 0xDF	; 223
    2984:	9a e0       	ldi	r25, 0x0A	; 10
    2986:	0e 94 8b 03 	call	0x716	; 0x716 <_Z10displayLCDP6Stringii>
        Messaggio = "";
    298a:	6c ee       	ldi	r22, 0xEC	; 236
    298c:	71 e0       	ldi	r23, 0x01	; 1
    298e:	87 ef       	ldi	r24, 0xF7	; 247
    2990:	9a e0       	ldi	r25, 0x0A	; 10
    2992:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringaSEPKc>
    2996:	03 e0       	ldi	r16, 0x03	; 3
    2998:	1b e0       	ldi	r17, 0x0B	; 11
    299a:	27 e2       	ldi	r18, 0x27	; 39
    299c:	e2 2e       	mov	r14, r18
    299e:	2b e0       	ldi	r18, 0x0B	; 11
    29a0:	f2 2e       	mov	r15, r18
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
    29a2:	b8 01       	movw	r22, r16
    29a4:	ce 01       	movw	r24, r28
    29a6:	01 96       	adiw	r24, 0x01	; 1
    29a8:	0e 94 63 3c 	call	0x78c6	; 0x78c6 <_ZN6StringC1ERKS_>

        for (int k = 0; k < 6; k++)
          Messaggio.concat(RaccoltaDati[k] + ";");
    29ac:	67 e3       	ldi	r22, 0x37	; 55
    29ae:	77 e0       	ldi	r23, 0x07	; 7
    29b0:	ce 01       	movw	r24, r28
    29b2:	01 96       	adiw	r24, 0x01	; 1
    29b4:	0e 94 dd 3d 	call	0x7bba	; 0x7bba <_ZplRK15StringSumHelperPKc>
    29b8:	bc 01       	movw	r22, r24
    29ba:	87 ef       	ldi	r24, 0xF7	; 247
    29bc:	9a e0       	ldi	r25, 0x0A	; 10
    29be:	0e 94 a6 3d 	call	0x7b4c	; 0x7b4c <_ZN6String6concatERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    29c2:	ce 01       	movw	r24, r28
    29c4:	01 96       	adiw	r24, 0x01	; 1
    29c6:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
    29ca:	0a 5f       	subi	r16, 0xFA	; 250
    29cc:	1f 4f       	sbci	r17, 0xFF	; 255
        righeDisplay[2] = "Invio........";
        righeDisplay[3] =  "";      
        displayLCD(righeDisplay, stato_procedura, 100);
        Messaggio = "";

        for (int k = 0; k < 6; k++)
    29ce:	e0 16       	cp	r14, r16
    29d0:	f1 06       	cpc	r15, r17
    29d2:	39 f7       	brne	.-50     	; 0x29a2 <loop+0xb3e>
          Messaggio.concat(RaccoltaDati[k] + ";");

        Messaggio.concat(CodSede);
    29d4:	66 e4       	ldi	r22, 0x46	; 70
    29d6:	71 e0       	ldi	r23, 0x01	; 1
    29d8:	87 ef       	ldi	r24, 0xF7	; 247
    29da:	9a e0       	ldi	r25, 0x0A	; 10
    29dc:	0e 94 ac 3d 	call	0x7b58	; 0x7b58 <_ZN6String6concatEPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    29e0:	69 e3       	ldi	r22, 0x39	; 57
    29e2:	77 e0       	ldi	r23, 0x07	; 7
    29e4:	ce 01       	movw	r24, r28
    29e6:	01 96       	adiw	r24, 0x01	; 1
    29e8:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
        Serial.println("Messaggio:" + Messaggio);
    29ec:	67 ef       	ldi	r22, 0xF7	; 247
    29ee:	7a e0       	ldi	r23, 0x0A	; 10
    29f0:	ce 01       	movw	r24, r28
    29f2:	01 96       	adiw	r24, 0x01	; 1
    29f4:	0e 94 cc 3d 	call	0x7b98	; 0x7b98 <_ZplRK15StringSumHelperRK6String>
    29f8:	bc 01       	movw	r22, r24
    29fa:	8e e1       	ldi	r24, 0x1E	; 30
    29fc:	9d e0       	ldi	r25, 0x0D	; 13
    29fe:	0e 94 4c 39 	call	0x7298	; 0x7298 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2a02:	ce 01       	movw	r24, r28
    2a04:	01 96       	adiw	r24, 0x01	; 1
    2a06:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
         // Messaggio = "DD92743A;28530;D;15.03;1234;000;SA10012";
          /*****************************************************************/
          disable_ETH();
    2a0a:	0e 94 95 01 	call	0x32a	; 0x32a <_ZL11disable_ETHv>
    2a0e:	8f e3       	ldi	r24, 0x3F	; 63
    2a10:	9f e1       	ldi	r25, 0x1F	; 31
    2a12:	01 97       	sbiw	r24, 0x01	; 1
    2a14:	f1 f7       	brne	.-4      	; 0x2a12 <loop+0xbae>
    2a16:	00 c0       	rjmp	.+0      	; 0x2a18 <loop+0xbb4>
    2a18:	00 00       	nop
          _delay_ms(2);
          enable_ETH();
    2a1a:	0e 94 93 01 	call	0x326	; 0x326 <_ZL10enable_ETHv>
    2a1e:	9f ef       	ldi	r25, 0xFF	; 255
    2a20:	23 ed       	ldi	r18, 0xD3	; 211
    2a22:	30 e3       	ldi	r19, 0x30	; 48
    2a24:	91 50       	subi	r25, 0x01	; 1
    2a26:	20 40       	sbci	r18, 0x00	; 0
    2a28:	30 40       	sbci	r19, 0x00	; 0
    2a2a:	e1 f7       	brne	.-8      	; 0x2a24 <loop+0xbc0>
    2a2c:	00 c0       	rjmp	.+0      	; 0x2a2e <loop+0xbca>
    2a2e:	00 00       	nop
          /*****************************************************************/
          _delay_ms(1000);
          avanzaStato(30); 
    2a30:	6e e1       	ldi	r22, 0x1E	; 30
    2a32:	70 e0       	ldi	r23, 0x00	; 0
    2a34:	80 e0       	ldi	r24, 0x00	; 0
    2a36:	90 e0       	ldi	r25, 0x00	; 0
    2a38:	1e c4       	rjmp	.+2108   	; 0x3276 <loop+0x1412>
      }
      break;
    case 9:
      {        
        if (BIT_IS_CLEAR(PORTC, 4))
    2a3a:	44 99       	sbic	0x08, 4	; 8
    2a3c:	dc c1       	rjmp	.+952    	; 0x2df6 <loop+0xf92>
        {
          displayLCD(righeDisplay, stato_procedura, 10);
    2a3e:	4a e0       	ldi	r20, 0x0A	; 10
    2a40:	50 e0       	ldi	r21, 0x00	; 0
    2a42:	69 e0       	ldi	r22, 0x09	; 9
    2a44:	70 e0       	ldi	r23, 0x00	; 0
    2a46:	8f ed       	ldi	r24, 0xDF	; 223
    2a48:	9a e0       	ldi	r25, 0x0A	; 10
    2a4a:	0e 94 8b 03 	call	0x716	; 0x716 <_Z10displayLCDP6Stringii>
          Messaggio = "";
    2a4e:	6c ee       	ldi	r22, 0xEC	; 236
    2a50:	71 e0       	ldi	r23, 0x01	; 1
    2a52:	87 ef       	ldi	r24, 0xF7	; 247
    2a54:	9a e0       	ldi	r25, 0x0A	; 10
    2a56:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringaSEPKc>
    2a5a:	03 e0       	ldi	r16, 0x03	; 3
    2a5c:	1b e0       	ldi	r17, 0x0B	; 11
    2a5e:	97 e2       	ldi	r25, 0x27	; 39
    2a60:	e9 2e       	mov	r14, r25
    2a62:	9b e0       	ldi	r25, 0x0B	; 11
    2a64:	f9 2e       	mov	r15, r25
{
public:
	StringSumHelper(const String &s) : String(s) {}
    2a66:	b8 01       	movw	r22, r16
    2a68:	ce 01       	movw	r24, r28
    2a6a:	01 96       	adiw	r24, 0x01	; 1
    2a6c:	0e 94 63 3c 	call	0x78c6	; 0x78c6 <_ZN6StringC1ERKS_>

          for (int k = 0; k < 6; k++)
            Messaggio.concat(RaccoltaDati[k] + ";");
    2a70:	67 e3       	ldi	r22, 0x37	; 55
    2a72:	77 e0       	ldi	r23, 0x07	; 7
    2a74:	ce 01       	movw	r24, r28
    2a76:	01 96       	adiw	r24, 0x01	; 1
    2a78:	0e 94 dd 3d 	call	0x7bba	; 0x7bba <_ZplRK15StringSumHelperPKc>
    2a7c:	bc 01       	movw	r22, r24
    2a7e:	87 ef       	ldi	r24, 0xF7	; 247
    2a80:	9a e0       	ldi	r25, 0x0A	; 10
    2a82:	0e 94 a6 3d 	call	0x7b4c	; 0x7b4c <_ZN6String6concatERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2a86:	ce 01       	movw	r24, r28
    2a88:	01 96       	adiw	r24, 0x01	; 1
    2a8a:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
    2a8e:	0a 5f       	subi	r16, 0xFA	; 250
    2a90:	1f 4f       	sbci	r17, 0xFF	; 255
        if (BIT_IS_CLEAR(PORTC, 4))
        {
          displayLCD(righeDisplay, stato_procedura, 10);
          Messaggio = "";

          for (int k = 0; k < 6; k++)
    2a92:	e0 16       	cp	r14, r16
    2a94:	f1 06       	cpc	r15, r17
    2a96:	39 f7       	brne	.-50     	; 0x2a66 <loop+0xc02>
            Messaggio.concat(RaccoltaDati[k] + ";");

          Messaggio.concat(CodSede);
    2a98:	66 e4       	ldi	r22, 0x46	; 70
    2a9a:	71 e0       	ldi	r23, 0x01	; 1
    2a9c:	87 ef       	ldi	r24, 0xF7	; 247
    2a9e:	9a e0       	ldi	r25, 0x0A	; 10
    2aa0:	0e 94 ac 3d 	call	0x7b58	; 0x7b58 <_ZN6String6concatEPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2aa4:	69 e3       	ldi	r22, 0x39	; 57
    2aa6:	77 e0       	ldi	r23, 0x07	; 7
    2aa8:	ce 01       	movw	r24, r28
    2aaa:	01 96       	adiw	r24, 0x01	; 1
    2aac:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
          Serial.println("Messaggio:" + Messaggio);
    2ab0:	67 ef       	ldi	r22, 0xF7	; 247
    2ab2:	7a e0       	ldi	r23, 0x0A	; 10
    2ab4:	ce 01       	movw	r24, r28
    2ab6:	01 96       	adiw	r24, 0x01	; 1
    2ab8:	0e 94 cc 3d 	call	0x7b98	; 0x7b98 <_ZplRK15StringSumHelperRK6String>
    2abc:	bc 01       	movw	r22, r24
    2abe:	8e e1       	ldi	r24, 0x1E	; 30
    2ac0:	9d e0       	ldi	r25, 0x0D	; 13
    2ac2:	0e 94 4c 39 	call	0x7298	; 0x7298 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2ac6:	ce 01       	movw	r24, r28
    2ac8:	01 96       	adiw	r24, 0x01	; 1
    2aca:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
    2ace:	8f ef       	ldi	r24, 0xFF	; 255
    2ad0:	93 ed       	ldi	r25, 0xD3	; 211
    2ad2:	20 e3       	ldi	r18, 0x30	; 48
    2ad4:	81 50       	subi	r24, 0x01	; 1
    2ad6:	90 40       	sbci	r25, 0x00	; 0
    2ad8:	20 40       	sbci	r18, 0x00	; 0
    2ada:	e1 f7       	brne	.-8      	; 0x2ad4 <loop+0xc70>
    2adc:	00 c0       	rjmp	.+0      	; 0x2ade <loop+0xc7a>

          // Messaggio = "DD92743A;28530;D;15.03;1234;000;SA10012";

          _delay_ms(1000);

          if (PostErogazioneGAC(80, serverREST, clientLOCAL, Messaggio))
    2ade:	00 00       	nop
    2ae0:	67 ef       	ldi	r22, 0xF7	; 247
    2ae2:	7a e0       	ldi	r23, 0x0A	; 10
    2ae4:	ce 01       	movw	r24, r28
    2ae6:	0f 96       	adiw	r24, 0x0f	; 15
    2ae8:	0e 94 63 3c 	call	0x78c6	; 0x78c6 <_ZN6StringC1ERKS_>
    2aec:	6a eb       	ldi	r22, 0xBA	; 186
    2aee:	7a e0       	ldi	r23, 0x0A	; 10
    2af0:	ce 01       	movw	r24, r28
    2af2:	01 96       	adiw	r24, 0x01	; 1
    2af4:	93 d9       	rcall	.-3290   	; 0x1e1c <_ZN14EthernetClientC1ERKS_>
    2af6:	9e 01       	movw	r18, r28
    2af8:	21 5f       	subi	r18, 0xF1	; 241
    2afa:	3f 4f       	sbci	r19, 0xFF	; 255
    2afc:	ae 01       	movw	r20, r28
    2afe:	4f 5f       	subi	r20, 0xFF	; 255
    2b00:	5f 4f       	sbci	r21, 0xFF	; 255
    2b02:	64 e3       	ldi	r22, 0x34	; 52
    2b04:	71 e0       	ldi	r23, 0x01	; 1
    2b06:	80 e5       	ldi	r24, 0x50	; 80
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	0e 94 fa 07 	call	0xff4	; 0xff4 <_Z17PostErogazioneGACiPc14EthernetClient6String>
    2b0e:	18 2f       	mov	r17, r24
    2b10:	ce 01       	movw	r24, r28
    2b12:	0f 96       	adiw	r24, 0x0f	; 15
    2b14:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
    2b18:	11 23       	and	r17, r17
    2b1a:	51 f1       	breq	.+84     	; 0x2b70 <loop+0xd0c>
          {
            disable_ETH();
    2b1c:	0e 94 95 01 	call	0x32a	; 0x32a <_ZL11disable_ETHv>
    2b20:	3f ef       	ldi	r19, 0xFF	; 255
    2b22:	83 ec       	ldi	r24, 0xC3	; 195
    2b24:	99 e0       	ldi	r25, 0x09	; 9
    2b26:	31 50       	subi	r19, 0x01	; 1
    2b28:	80 40       	sbci	r24, 0x00	; 0
    2b2a:	90 40       	sbci	r25, 0x00	; 0
    2b2c:	e1 f7       	brne	.-8      	; 0x2b26 <loop+0xcc2>
    2b2e:	00 c0       	rjmp	.+0      	; 0x2b30 <loop+0xccc>
    2b30:	00 00       	nop
            _delay_ms(200);
            Serial.println("PostErogazioneGAC - OK" );   
    2b32:	64 e4       	ldi	r22, 0x44	; 68
    2b34:	77 e0       	ldi	r23, 0x07	; 7
    2b36:	8e e1       	ldi	r24, 0x1E	; 30
    2b38:	9d e0       	ldi	r25, 0x0D	; 13
    2b3a:	0e 94 5c 39 	call	0x72b8	; 0x72b8 <_ZN5Print7printlnEPKc>
            Serial.println("Tento la ritrasmisssione di erogazioni salvate non trasmesse" );             
    2b3e:	6b e5       	ldi	r22, 0x5B	; 91
    2b40:	77 e0       	ldi	r23, 0x07	; 7
    2b42:	8e e1       	ldi	r24, 0x1E	; 30
    2b44:	9d e0       	ldi	r25, 0x0D	; 13
    2b46:	0e 94 5c 39 	call	0x72b8	; 0x72b8 <_ZN5Print7printlnEPKc>
    2b4a:	8f e3       	ldi	r24, 0x3F	; 63
    2b4c:	9f e1       	ldi	r25, 0x1F	; 31
    2b4e:	01 97       	sbiw	r24, 0x01	; 1
    2b50:	f1 f7       	brne	.-4      	; 0x2b4e <loop+0xcea>
    2b52:	00 c0       	rjmp	.+0      	; 0x2b54 <loop+0xcf0>
    2b54:	00 00       	nop
            _delay_ms(2);
            enable_ETH();
    2b56:	0e 94 93 01 	call	0x326	; 0x326 <_ZL10enable_ETHv>
    2b5a:	8f e3       	ldi	r24, 0x3F	; 63
    2b5c:	9f e1       	ldi	r25, 0x1F	; 31
    2b5e:	01 97       	sbiw	r24, 0x01	; 1
    2b60:	f1 f7       	brne	.-4      	; 0x2b5e <loop+0xcfa>
    2b62:	00 c0       	rjmp	.+0      	; 0x2b64 <loop+0xd00>
    2b64:	00 00       	nop
            _delay_ms(2);
            avanzaStato(60);                                
    2b66:	6c e3       	ldi	r22, 0x3C	; 60
    2b68:	70 e0       	ldi	r23, 0x00	; 0
    2b6a:	80 e0       	ldi	r24, 0x00	; 0
    2b6c:	90 e0       	ldi	r25, 0x00	; 0
    2b6e:	83 c3       	rjmp	.+1798   	; 0x3276 <loop+0x1412>
          }
          else
          {
             disable_ETH();   
    2b70:	0e 94 95 01 	call	0x32a	; 0x32a <_ZL11disable_ETHv>
             String ultima_indirizzo  = read_eeprom_string(4,1035);
    2b74:	4b e0       	ldi	r20, 0x0B	; 11
    2b76:	54 e0       	ldi	r21, 0x04	; 4
    2b78:	64 e0       	ldi	r22, 0x04	; 4
    2b7a:	70 e0       	ldi	r23, 0x00	; 0
    2b7c:	ce 01       	movw	r24, r28
    2b7e:	4f 96       	adiw	r24, 0x1f	; 31
    2b80:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <_Z18read_eeprom_stringii>
             int indirizzo = ultima_indirizzo.toInt();
    2b84:	ce 01       	movw	r24, r28
    2b86:	4f 96       	adiw	r24, 0x1f	; 31
    2b88:	0e 94 e8 3e 	call	0x7dd0	; 0x7dd0 <_ZNK6String5toIntEv>
    2b8c:	6b 01       	movw	r12, r22
            // bool write_eeprom_string(String erog,int lunBuffer,int start_ind)
            if (write_eeprom_string(Messaggio,Messaggio.length(),indirizzo))
    2b8e:	7c 01       	movw	r14, r24
    2b90:	00 91 fb 0a 	lds	r16, 0x0AFB	; 0x800afb <Messaggio+0x4>
    2b94:	10 91 fc 0a 	lds	r17, 0x0AFC	; 0x800afc <Messaggio+0x5>
    2b98:	67 ef       	ldi	r22, 0xF7	; 247
    2b9a:	7a e0       	ldi	r23, 0x0A	; 10
    2b9c:	ce 01       	movw	r24, r28
    2b9e:	01 96       	adiw	r24, 0x01	; 1
    2ba0:	0e 94 63 3c 	call	0x78c6	; 0x78c6 <_ZN6StringC1ERKS_>
    2ba4:	a6 01       	movw	r20, r12
    2ba6:	b8 01       	movw	r22, r16
    2ba8:	ce 01       	movw	r24, r28
    2baa:	01 96       	adiw	r24, 0x01	; 1
    2bac:	66 d8       	rcall	.-3892   	; 0x1c7a <_Z19write_eeprom_string6Stringii>
    2bae:	18 2f       	mov	r17, r24
    2bb0:	ce 01       	movw	r24, r28
    2bb2:	01 96       	adiw	r24, 0x01	; 1
    2bb4:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
    2bb8:	11 23       	and	r17, r17
    2bba:	09 f4       	brne	.+2      	; 0x2bbe <loop+0xd5a>
    2bbc:	16 c1       	rjmp	.+556    	; 0x2dea <loop+0xf86>
              {
                Serial.println("WRITE OK AT address :" + String(indirizzo));
    2bbe:	4a e0       	ldi	r20, 0x0A	; 10
    2bc0:	b6 01       	movw	r22, r12
    2bc2:	ce 01       	movw	r24, r28
    2bc4:	0f 96       	adiw	r24, 0x0f	; 15
    2bc6:	0e 94 cd 3c 	call	0x799a	; 0x799a <_ZN6StringC1Eih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2bca:	68 e9       	ldi	r22, 0x98	; 152
    2bcc:	77 e0       	ldi	r23, 0x07	; 7
    2bce:	ce 01       	movw	r24, r28
    2bd0:	01 96       	adiw	r24, 0x01	; 1
    2bd2:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
    2bd6:	be 01       	movw	r22, r28
    2bd8:	61 5f       	subi	r22, 0xF1	; 241
    2bda:	7f 4f       	sbci	r23, 0xFF	; 255
    2bdc:	ce 01       	movw	r24, r28
    2bde:	01 96       	adiw	r24, 0x01	; 1
    2be0:	0e 94 cc 3d 	call	0x7b98	; 0x7b98 <_ZplRK15StringSumHelperRK6String>
    2be4:	bc 01       	movw	r22, r24
    2be6:	8e e1       	ldi	r24, 0x1E	; 30
    2be8:	9d e0       	ldi	r25, 0x0D	; 13
    2bea:	0e 94 4c 39 	call	0x7298	; 0x7298 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2bee:	ce 01       	movw	r24, r28
    2bf0:	01 96       	adiw	r24, 0x01	; 1
    2bf2:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
    2bf6:	ce 01       	movw	r24, r28
    2bf8:	0f 96       	adiw	r24, 0x0f	; 15
    2bfa:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
                indirizzo = indirizzo + 50;  
    2bfe:	92 e3       	ldi	r25, 0x32	; 50
    2c00:	c9 0e       	add	r12, r25
    2c02:	d1 1c       	adc	r13, r1
                if (indirizzo > 3000) {indirizzo = 2000; }   
    2c04:	29 eb       	ldi	r18, 0xB9	; 185
    2c06:	c2 16       	cp	r12, r18
    2c08:	2b e0       	ldi	r18, 0x0B	; 11
    2c0a:	d2 06       	cpc	r13, r18
    2c0c:	24 f0       	brlt	.+8      	; 0x2c16 <loop+0xdb2>
    2c0e:	80 ed       	ldi	r24, 0xD0	; 208
    2c10:	c8 2e       	mov	r12, r24
    2c12:	87 e0       	ldi	r24, 0x07	; 7
    2c14:	d8 2e       	mov	r13, r24
                String update_ultima_indirizzo = String(indirizzo);
    2c16:	4a e0       	ldi	r20, 0x0A	; 10
    2c18:	b6 01       	movw	r22, r12
    2c1a:	ce 01       	movw	r24, r28
    2c1c:	47 96       	adiw	r24, 0x17	; 23
    2c1e:	0e 94 cd 3c 	call	0x799a	; 0x799a <_ZN6StringC1Eih>
                if (write_eeprom_string(update_ultima_indirizzo,update_ultima_indirizzo.length(),1035))
    2c22:	0b 8d       	ldd	r16, Y+27	; 0x1b
    2c24:	1c 8d       	ldd	r17, Y+28	; 0x1c
    2c26:	be 01       	movw	r22, r28
    2c28:	69 5e       	subi	r22, 0xE9	; 233
    2c2a:	7f 4f       	sbci	r23, 0xFF	; 255
    2c2c:	ce 01       	movw	r24, r28
    2c2e:	01 96       	adiw	r24, 0x01	; 1
    2c30:	0e 94 63 3c 	call	0x78c6	; 0x78c6 <_ZN6StringC1ERKS_>
    2c34:	4b e0       	ldi	r20, 0x0B	; 11
    2c36:	54 e0       	ldi	r21, 0x04	; 4
    2c38:	b8 01       	movw	r22, r16
    2c3a:	ce 01       	movw	r24, r28
    2c3c:	01 96       	adiw	r24, 0x01	; 1
    2c3e:	1d d8       	rcall	.-4038   	; 0x1c7a <_Z19write_eeprom_string6Stringii>
    2c40:	18 2f       	mov	r17, r24
    2c42:	ce 01       	movw	r24, r28
    2c44:	01 96       	adiw	r24, 0x01	; 1
    2c46:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
    2c4a:	11 23       	and	r17, r17
    2c4c:	01 f1       	breq	.+64     	; 0x2c8e <loop+0xe2a>
                  Serial.println("UPDATE OK address :" + String(indirizzo));  
    2c4e:	4a e0       	ldi	r20, 0x0A	; 10
    2c50:	b6 01       	movw	r22, r12
    2c52:	ce 01       	movw	r24, r28
    2c54:	0f 96       	adiw	r24, 0x0f	; 15
    2c56:	0e 94 cd 3c 	call	0x799a	; 0x799a <_ZN6StringC1Eih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2c5a:	6e ea       	ldi	r22, 0xAE	; 174
    2c5c:	77 e0       	ldi	r23, 0x07	; 7
    2c5e:	ce 01       	movw	r24, r28
    2c60:	01 96       	adiw	r24, 0x01	; 1
    2c62:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
    2c66:	be 01       	movw	r22, r28
    2c68:	61 5f       	subi	r22, 0xF1	; 241
    2c6a:	7f 4f       	sbci	r23, 0xFF	; 255
    2c6c:	ce 01       	movw	r24, r28
    2c6e:	01 96       	adiw	r24, 0x01	; 1
    2c70:	0e 94 cc 3d 	call	0x7b98	; 0x7b98 <_ZplRK15StringSumHelperRK6String>
    2c74:	bc 01       	movw	r22, r24
    2c76:	8e e1       	ldi	r24, 0x1E	; 30
    2c78:	9d e0       	ldi	r25, 0x0D	; 13
    2c7a:	0e 94 4c 39 	call	0x7298	; 0x7298 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2c7e:	ce 01       	movw	r24, r28
    2c80:	01 96       	adiw	r24, 0x01	; 1
    2c82:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
    2c86:	ce 01       	movw	r24, r28
    2c88:	0f 96       	adiw	r24, 0x0f	; 15
    2c8a:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
            if (write_eeprom_string(Messaggio,Messaggio.length(),indirizzo))
              {
                Serial.println("WRITE OK AT address :" + String(indirizzo));
                indirizzo = indirizzo + 50;  
                if (indirizzo > 3000) {indirizzo = 2000; }   
                String update_ultima_indirizzo = String(indirizzo);
    2c8e:	ce 01       	movw	r24, r28
    2c90:	47 96       	adiw	r24, 0x17	; 23
    2c92:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
    2c96:	a9 c0       	rjmp	.+338    	; 0x2dea <loop+0xf86>
        }
      }
      break;
    case 10:
      {
			 Buzzer(1,100);
    2c98:	44 e6       	ldi	r20, 0x64	; 100
    2c9a:	50 e0       	ldi	r21, 0x00	; 0
    2c9c:	60 e0       	ldi	r22, 0x00	; 0
    2c9e:	70 e0       	ldi	r23, 0x00	; 0
    2ca0:	81 e0       	ldi	r24, 0x01	; 1
    2ca2:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z6Buzzerhm>
    2ca6:	3f ef       	ldi	r19, 0xFF	; 255
    2ca8:	81 ee       	ldi	r24, 0xE1	; 225
    2caa:	94 e0       	ldi	r25, 0x04	; 4
    2cac:	31 50       	subi	r19, 0x01	; 1
    2cae:	80 40       	sbci	r24, 0x00	; 0
    2cb0:	90 40       	sbci	r25, 0x00	; 0
    2cb2:	e1 f7       	brne	.-8      	; 0x2cac <loop+0xe48>
    2cb4:	00 c0       	rjmp	.+0      	; 0x2cb6 <loop+0xe52>
    2cb6:	00 00       	nop
			 _delay_ms(100);
			 Buzzer(1,100);
    2cb8:	44 e6       	ldi	r20, 0x64	; 100
    2cba:	50 e0       	ldi	r21, 0x00	; 0
    2cbc:	60 e0       	ldi	r22, 0x00	; 0
    2cbe:	70 e0       	ldi	r23, 0x00	; 0
    2cc0:	81 e0       	ldi	r24, 0x01	; 1
    2cc2:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z6Buzzerhm>
    2cc6:	2f ef       	ldi	r18, 0xFF	; 255
    2cc8:	31 ee       	ldi	r19, 0xE1	; 225
    2cca:	84 e0       	ldi	r24, 0x04	; 4
    2ccc:	21 50       	subi	r18, 0x01	; 1
    2cce:	30 40       	sbci	r19, 0x00	; 0
    2cd0:	80 40       	sbci	r24, 0x00	; 0
    2cd2:	e1 f7       	brne	.-8      	; 0x2ccc <loop+0xe68>
    2cd4:	00 c0       	rjmp	.+0      	; 0x2cd6 <loop+0xe72>
    2cd6:	00 00       	nop
			 _delay_ms(100);
			 Buzzer(1,100);
    2cd8:	44 e6       	ldi	r20, 0x64	; 100
    2cda:	50 e0       	ldi	r21, 0x00	; 0
    2cdc:	60 e0       	ldi	r22, 0x00	; 0
    2cde:	70 e0       	ldi	r23, 0x00	; 0
    2ce0:	81 e0       	ldi	r24, 0x01	; 1
    2ce2:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z6Buzzerhm>
    2ce6:	9f ef       	ldi	r25, 0xFF	; 255
    2ce8:	21 ee       	ldi	r18, 0xE1	; 225
    2cea:	34 e0       	ldi	r19, 0x04	; 4
    2cec:	91 50       	subi	r25, 0x01	; 1
    2cee:	20 40       	sbci	r18, 0x00	; 0
    2cf0:	30 40       	sbci	r19, 0x00	; 0
    2cf2:	e1 f7       	brne	.-8      	; 0x2cec <loop+0xe88>
    2cf4:	00 c0       	rjmp	.+0      	; 0x2cf6 <loop+0xe92>
    2cf6:	00 00       	nop
			 _delay_ms(100);
			 
             String str_indirizzo  = read_eeprom_string(4,1035);
    2cf8:	4b e0       	ldi	r20, 0x0B	; 11
    2cfa:	54 e0       	ldi	r21, 0x04	; 4
    2cfc:	64 e0       	ldi	r22, 0x04	; 4
    2cfe:	70 e0       	ldi	r23, 0x00	; 0
    2d00:	ce 01       	movw	r24, r28
    2d02:	4f 96       	adiw	r24, 0x1f	; 31
    2d04:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <_Z18read_eeprom_stringii>
             int ultimo_indirizzo = (str_indirizzo.toInt());
    2d08:	ce 01       	movw	r24, r28
    2d0a:	4f 96       	adiw	r24, 0x1f	; 31
    2d0c:	0e 94 e8 3e 	call	0x7dd0	; 0x7dd0 <_ZNK6String5toIntEv>
    2d10:	7b 01       	movw	r14, r22
             int start = 2000;
    2d12:	00 ed       	ldi	r16, 0xD0	; 208
    2d14:	17 e0       	ldi	r17, 0x07	; 7
             bool tx = false;
             
             while ((start < ultimo_indirizzo))
    2d16:	0e 15       	cp	r16, r14
    2d18:	1f 05       	cpc	r17, r15
    2d1a:	0c f0       	brlt	.+2      	; 0x2d1e <loop+0xeba>
    2d1c:	4b c0       	rjmp	.+150    	; 0x2db4 <loop+0xf50>
             {
               String e  = read_eeprom_string(50,start);
    2d1e:	a8 01       	movw	r20, r16
    2d20:	62 e3       	ldi	r22, 0x32	; 50
    2d22:	70 e0       	ldi	r23, 0x00	; 0
    2d24:	ce 01       	movw	r24, r28
    2d26:	47 96       	adiw	r24, 0x17	; 23
    2d28:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <_Z18read_eeprom_stringii>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2d2c:	62 ec       	ldi	r22, 0xC2	; 194
    2d2e:	77 e0       	ldi	r23, 0x07	; 7
    2d30:	ce 01       	movw	r24, r28
    2d32:	01 96       	adiw	r24, 0x01	; 1
    2d34:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
               Serial.println("DA TRASMETTERE: " + e);
    2d38:	be 01       	movw	r22, r28
    2d3a:	69 5e       	subi	r22, 0xE9	; 233
    2d3c:	7f 4f       	sbci	r23, 0xFF	; 255
    2d3e:	ce 01       	movw	r24, r28
    2d40:	01 96       	adiw	r24, 0x01	; 1
    2d42:	0e 94 cc 3d 	call	0x7b98	; 0x7b98 <_ZplRK15StringSumHelperRK6String>
    2d46:	bc 01       	movw	r22, r24
    2d48:	8e e1       	ldi	r24, 0x1E	; 30
    2d4a:	9d e0       	ldi	r25, 0x0D	; 13
    2d4c:	0e 94 4c 39 	call	0x7298	; 0x7298 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2d50:	ce 01       	movw	r24, r28
    2d52:	01 96       	adiw	r24, 0x01	; 1
    2d54:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
               tx = PostErogazioneGAC(80, serverREST, clientLOCAL, e);
    2d58:	be 01       	movw	r22, r28
    2d5a:	69 5e       	subi	r22, 0xE9	; 233
    2d5c:	7f 4f       	sbci	r23, 0xFF	; 255
    2d5e:	ce 01       	movw	r24, r28
    2d60:	0f 96       	adiw	r24, 0x0f	; 15
    2d62:	0e 94 63 3c 	call	0x78c6	; 0x78c6 <_ZN6StringC1ERKS_>
    2d66:	6a eb       	ldi	r22, 0xBA	; 186
    2d68:	7a e0       	ldi	r23, 0x0A	; 10
    2d6a:	ce 01       	movw	r24, r28
    2d6c:	01 96       	adiw	r24, 0x01	; 1
    2d6e:	56 d8       	rcall	.-3924   	; 0x1e1c <_ZN14EthernetClientC1ERKS_>
    2d70:	9e 01       	movw	r18, r28
    2d72:	21 5f       	subi	r18, 0xF1	; 241
    2d74:	3f 4f       	sbci	r19, 0xFF	; 255
    2d76:	ae 01       	movw	r20, r28
    2d78:	4f 5f       	subi	r20, 0xFF	; 255
    2d7a:	5f 4f       	sbci	r21, 0xFF	; 255
    2d7c:	64 e3       	ldi	r22, 0x34	; 52
    2d7e:	71 e0       	ldi	r23, 0x01	; 1
    2d80:	80 e5       	ldi	r24, 0x50	; 80
    2d82:	90 e0       	ldi	r25, 0x00	; 0
    2d84:	0e 94 fa 07 	call	0xff4	; 0xff4 <_Z17PostErogazioneGACiPc14EthernetClient6String>
    2d88:	ce 01       	movw	r24, r28
    2d8a:	0f 96       	adiw	r24, 0x0f	; 15
    2d8c:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
               start = start + 50;    
    2d90:	0e 5c       	subi	r16, 0xCE	; 206
    2d92:	1f 4f       	sbci	r17, 0xFF	; 255
    2d94:	8f ef       	ldi	r24, 0xFF	; 255
    2d96:	93 ec       	ldi	r25, 0xC3	; 195
    2d98:	29 e0       	ldi	r18, 0x09	; 9
    2d9a:	81 50       	subi	r24, 0x01	; 1
    2d9c:	90 40       	sbci	r25, 0x00	; 0
    2d9e:	20 40       	sbci	r18, 0x00	; 0
    2da0:	e1 f7       	brne	.-8      	; 0x2d9a <loop+0xf36>
    2da2:	00 c0       	rjmp	.+0      	; 0x2da4 <loop+0xf40>
    2da4:	00 00       	nop
                _delay_ms(200); // Attendo un pochino tra un atrasmissione e l'altra           
               printLine();                
    2da6:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
             int start = 2000;
             bool tx = false;
             
             while ((start < ultimo_indirizzo))
             {
               String e  = read_eeprom_string(50,start);
    2daa:	ce 01       	movw	r24, r28
    2dac:	47 96       	adiw	r24, 0x17	; 23
    2dae:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
             String str_indirizzo  = read_eeprom_string(4,1035);
             int ultimo_indirizzo = (str_indirizzo.toInt());
             int start = 2000;
             bool tx = false;
             
             while ((start < ultimo_indirizzo))
    2db2:	b1 cf       	rjmp	.-158    	; 0x2d16 <loop+0xeb2>
               start = start + 50;    
                _delay_ms(200); // Attendo un pochino tra un atrasmissione e l'altra           
               printLine();                
             }
             
             if (start >  2000){
    2db4:	01 3d       	cpi	r16, 0xD1	; 209
    2db6:	37 e0       	ldi	r19, 0x07	; 7
    2db8:	13 07       	cpc	r17, r19
    2dba:	bc f0       	brlt	.+46     	; 0x2dea <loop+0xf86>
                write_eeprom_string("2000",4,1035);
    2dbc:	63 ed       	ldi	r22, 0xD3	; 211
    2dbe:	77 e0       	ldi	r23, 0x07	; 7
    2dc0:	ce 01       	movw	r24, r28
    2dc2:	01 96       	adiw	r24, 0x01	; 1
    2dc4:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
    2dc8:	4b e0       	ldi	r20, 0x0B	; 11
    2dca:	54 e0       	ldi	r21, 0x04	; 4
    2dcc:	64 e0       	ldi	r22, 0x04	; 4
    2dce:	70 e0       	ldi	r23, 0x00	; 0
    2dd0:	ce 01       	movw	r24, r28
    2dd2:	01 96       	adiw	r24, 0x01	; 1
    2dd4:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <_Z19write_eeprom_string6Stringii>
    2dd8:	ce 01       	movw	r24, r28
    2dda:	01 96       	adiw	r24, 0x01	; 1
    2ddc:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
                clearEEPROM(2000,start);
    2de0:	b8 01       	movw	r22, r16
    2de2:	80 ed       	ldi	r24, 0xD0	; 208
    2de4:	97 e0       	ldi	r25, 0x07	; 7
    2de6:	0e 94 46 02 	call	0x48c	; 0x48c <_Z11clearEEPROMii>
              }              
        Azzera();
    2dea:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <_Z6Azzerav>
			 Buzzer(1,100);
			 _delay_ms(100);
			 Buzzer(1,100);
			 _delay_ms(100);
			 
             String str_indirizzo  = read_eeprom_string(4,1035);
    2dee:	ce 01       	movw	r24, r28
    2df0:	4f 96       	adiw	r24, 0x1f	; 31
    2df2:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
      {
      }
      break;
  }

  nowTimer = DS3231M.now();
    2df6:	61 ea       	ldi	r22, 0xA1	; 161
    2df8:	7a e0       	ldi	r23, 0x0A	; 10
    2dfa:	ce 01       	movw	r24, r28
    2dfc:	01 96       	adiw	r24, 0x01	; 1
    2dfe:	0e 94 e3 23 	call	0x47c6	; 0x47c6 <_ZN13DS3231M_Class3nowEv>
    2e02:	86 e0       	ldi	r24, 0x06	; 6
    2e04:	fe 01       	movw	r30, r28
    2e06:	31 96       	adiw	r30, 0x01	; 1
    2e08:	af e8       	ldi	r26, 0x8F	; 143
    2e0a:	ba e0       	ldi	r27, 0x0A	; 10
    2e0c:	01 90       	ld	r0, Z+
    2e0e:	0d 92       	st	X+, r0
    2e10:	8a 95       	dec	r24
    2e12:	e1 f7       	brne	.-8      	; 0x2e0c <loop+0xfa8>
  secs = nowTimer.secondstime();  
    2e14:	8f e8       	ldi	r24, 0x8F	; 143
    2e16:	9a e0       	ldi	r25, 0x0A	; 10
    2e18:	0e 94 34 23 	call	0x4668	; 0x4668 <_ZNK8DateTime11secondstimeEv>
    2e1c:	60 93 9d 0a 	sts	0x0A9D, r22	; 0x800a9d <secs>
    2e20:	70 93 9e 0a 	sts	0x0A9E, r23	; 0x800a9e <secs+0x1>
    2e24:	80 93 9f 0a 	sts	0x0A9F, r24	; 0x800a9f <secs+0x2>
    2e28:	90 93 a0 0a 	sts	0x0AA0, r25	; 0x800aa0 <secs+0x3>
  if (((UltimoPassaggioStato + Timer - secs) <= 1) && (stato_procedura != stato_erogazione)) Azzera();
    2e2c:	00 91 99 0a 	lds	r16, 0x0A99	; 0x800a99 <UltimoPassaggioStato>
    2e30:	10 91 9a 0a 	lds	r17, 0x0A9A	; 0x800a9a <UltimoPassaggioStato+0x1>
    2e34:	20 91 9b 0a 	lds	r18, 0x0A9B	; 0x800a9b <UltimoPassaggioStato+0x2>
    2e38:	30 91 9c 0a 	lds	r19, 0x0A9C	; 0x800a9c <UltimoPassaggioStato+0x3>
    2e3c:	c0 90 95 0a 	lds	r12, 0x0A95	; 0x800a95 <Timer>
    2e40:	d0 90 96 0a 	lds	r13, 0x0A96	; 0x800a96 <Timer+0x1>
    2e44:	e0 90 97 0a 	lds	r14, 0x0A97	; 0x800a97 <Timer+0x2>
    2e48:	f0 90 98 0a 	lds	r15, 0x0A98	; 0x800a98 <Timer+0x3>
    2e4c:	0c 0d       	add	r16, r12
    2e4e:	1d 1d       	adc	r17, r13
    2e50:	2e 1d       	adc	r18, r14
    2e52:	3f 1d       	adc	r19, r15
    2e54:	68 01       	movw	r12, r16
    2e56:	79 01       	movw	r14, r18
    2e58:	c6 1a       	sub	r12, r22
    2e5a:	d7 0a       	sbc	r13, r23
    2e5c:	e8 0a       	sbc	r14, r24
    2e5e:	f9 0a       	sbc	r15, r25
    2e60:	d7 01       	movw	r26, r14
    2e62:	c6 01       	movw	r24, r12
    2e64:	02 97       	sbiw	r24, 0x02	; 2
    2e66:	a1 05       	cpc	r26, r1
    2e68:	b1 05       	cpc	r27, r1
    2e6a:	08 f0       	brcs	.+2      	; 0x2e6e <loop+0x100a>
    2e6c:	07 c2       	rjmp	.+1038   	; 0x327c <loop+0x1418>
    2e6e:	80 91 30 0b 	lds	r24, 0x0B30	; 0x800b30 <stato_procedura>
    2e72:	90 91 31 0b 	lds	r25, 0x0B31	; 0x800b31 <stato_procedura+0x1>
    2e76:	07 97       	sbiw	r24, 0x07	; 7
    2e78:	19 f0       	breq	.+6      	; 0x2e80 <loop+0x101c>
    2e7a:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <_Z6Azzerav>
    2e7e:	fe c1       	rjmp	.+1020   	; 0x327c <loop+0x1418>
  else if (((UltimoPassaggioStato + Timer - secs) <= 1) && (stato_procedura == stato_erogazione)) avanzaStato(TmaxInviodati);
    2e80:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <TmaxInviodati>
    2e84:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <TmaxInviodati+0x1>
    2e88:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <TmaxInviodati+0x2>
    2e8c:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <TmaxInviodati+0x3>
    2e90:	0e 94 c0 03 	call	0x780	; 0x780 <_Z11avanzaStatom>
}
    2e94:	f3 c1       	rjmp	.+998    	; 0x327c <loop+0x1418>
          Buzzer(2, 100);
        }

        if ((ATe != "ERRORE") && (BIT_IS_CLEAR(PORTC, 4)))
        {
          Serial.println("");
    2e96:	6c ee       	ldi	r22, 0xEC	; 236
    2e98:	71 e0       	ldi	r23, 0x01	; 1
    2e9a:	8e e1       	ldi	r24, 0x1E	; 30
    2e9c:	9d e0       	ldi	r25, 0x0D	; 13
    2e9e:	0e 94 5c 39 	call	0x72b8	; 0x72b8 <_ZN5Print7printlnEPKc>
          Serial.print("***************************************************************");
    2ea2:	68 ed       	ldi	r22, 0xD8	; 216
    2ea4:	77 e0       	ldi	r23, 0x07	; 7
    2ea6:	8e e1       	ldi	r24, 0x1E	; 30
    2ea8:	9d e0       	ldi	r25, 0x0D	; 13
    2eaa:	0e 94 31 39 	call	0x7262	; 0x7262 <_ZN5Print5printEPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2eae:	68 e1       	ldi	r22, 0x18	; 24
    2eb0:	78 e0       	ldi	r23, 0x08	; 8
    2eb2:	ce 01       	movw	r24, r28
    2eb4:	01 96       	adiw	r24, 0x01	; 1
    2eb6:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
          Serial.println(" Tessera ID : " + ATe);
    2eba:	be 01       	movw	r22, r28
    2ebc:	69 5e       	subi	r22, 0xE9	; 233
    2ebe:	7f 4f       	sbci	r23, 0xFF	; 255
    2ec0:	ce 01       	movw	r24, r28
    2ec2:	01 96       	adiw	r24, 0x01	; 1
    2ec4:	0e 94 cc 3d 	call	0x7b98	; 0x7b98 <_ZplRK15StringSumHelperRK6String>
    2ec8:	bc 01       	movw	r22, r24
    2eca:	8e e1       	ldi	r24, 0x1E	; 30
    2ecc:	9d e0       	ldi	r25, 0x0D	; 13
    2ece:	0e 94 4c 39 	call	0x7298	; 0x7298 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2ed2:	ce 01       	movw	r24, r28
    2ed4:	01 96       	adiw	r24, 0x01	; 1
    2ed6:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
          Serial.print("***************************************************************");
    2eda:	68 ed       	ldi	r22, 0xD8	; 216
    2edc:	77 e0       	ldi	r23, 0x07	; 7
    2ede:	8e e1       	ldi	r24, 0x1E	; 30
    2ee0:	9d e0       	ldi	r25, 0x0D	; 13
    2ee2:	0e 94 31 39 	call	0x7262	; 0x7262 <_ZN5Print5printEPKc>
          Serial.println("Riconoscimento Tessera .............");
    2ee6:	67 e2       	ldi	r22, 0x27	; 39
    2ee8:	78 e0       	ldi	r23, 0x08	; 8
    2eea:	8e e1       	ldi	r24, 0x1E	; 30
    2eec:	9d e0       	ldi	r25, 0x0D	; 13
    2eee:	0e 94 5c 39 	call	0x72b8	; 0x72b8 <_ZN5Print7printlnEPKc>

           RaccoltaDati[0] = ATe;
    2ef2:	be 01       	movw	r22, r28
    2ef4:	69 5e       	subi	r22, 0xE9	; 233
    2ef6:	7f 4f       	sbci	r23, 0xFF	; 255
    2ef8:	83 e0       	ldi	r24, 0x03	; 3
    2efa:	9b e0       	ldi	r25, 0x0B	; 11
    2efc:	0e 94 4e 3c 	call	0x789c	; 0x789c <_ZN6StringaSERKS_>
          // RaccoltaDati[0] = "DD92743A";
          // RaccoltaDati[5] = "000";

          lcd.backlight();
    2f00:	87 e5       	ldi	r24, 0x57	; 87
    2f02:	9b e0       	ldi	r25, 0x0B	; 11
    2f04:	0e 94 89 30 	call	0x6112	; 0x6112 <_ZN3LCD9backlightEv>
          lcd.display();
    2f08:	87 e5       	ldi	r24, 0x57	; 87
    2f0a:	9b e0       	ldi	r25, 0x0B	; 11
    2f0c:	0e 94 ef 30 	call	0x61de	; 0x61de <_ZN3LCD7displayEv>
    2f10:	8f e3       	ldi	r24, 0x3F	; 63
    2f12:	9c e9       	ldi	r25, 0x9C	; 156
    2f14:	01 97       	sbiw	r24, 0x01	; 1
    2f16:	f1 f7       	brne	.-4      	; 0x2f14 <loop+0x10b0>
    2f18:	00 c0       	rjmp	.+0      	; 0x2f1a <loop+0x10b6>
    2f1a:	00 00       	nop
          _delay_ms(10);

          righeDisplay[1] = "  RICONOSCIMENTO ";
    2f1c:	6c e4       	ldi	r22, 0x4C	; 76
    2f1e:	78 e0       	ldi	r23, 0x08	; 8
    2f20:	85 ee       	ldi	r24, 0xE5	; 229
    2f22:	9a e0       	ldi	r25, 0x0A	; 10
    2f24:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringaSEPKc>
          righeDisplay[2] = ".....In Corso.....";
    2f28:	6e e5       	ldi	r22, 0x5E	; 94
    2f2a:	78 e0       	ldi	r23, 0x08	; 8
    2f2c:	8b ee       	ldi	r24, 0xEB	; 235
    2f2e:	9a e0       	ldi	r25, 0x0A	; 10
    2f30:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringaSEPKc>
          //righeDisplay[3] = "   Rfid: " + ATe;
          righeDisplay[3] = "Attendere.........";
    2f34:	61 e7       	ldi	r22, 0x71	; 113
    2f36:	78 e0       	ldi	r23, 0x08	; 8
    2f38:	81 ef       	ldi	r24, 0xF1	; 241
    2f3a:	9a e0       	ldi	r25, 0x0A	; 10
    2f3c:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringaSEPKc>
          displayLCD(righeDisplay, stato_procedura, 100);
    2f40:	60 91 30 0b 	lds	r22, 0x0B30	; 0x800b30 <stato_procedura>
    2f44:	70 91 31 0b 	lds	r23, 0x0B31	; 0x800b31 <stato_procedura+0x1>
    2f48:	44 e6       	ldi	r20, 0x64	; 100
    2f4a:	50 e0       	ldi	r21, 0x00	; 0
    2f4c:	8f ed       	ldi	r24, 0xDF	; 223
    2f4e:	9a e0       	ldi	r25, 0x0A	; 10
    2f50:	0e 94 8b 03 	call	0x716	; 0x716 <_Z10displayLCDP6Stringii>
          InizializzaEthernet();
    2f54:	0e 94 97 01 	call	0x32e	; 0x32e <_Z19InizializzaEthernetv>
    2f58:	9f ef       	ldi	r25, 0xFF	; 255
    2f5a:	23 ed       	ldi	r18, 0xD3	; 211
    2f5c:	30 e3       	ldi	r19, 0x30	; 48
    2f5e:	91 50       	subi	r25, 0x01	; 1
    2f60:	20 40       	sbci	r18, 0x00	; 0
    2f62:	30 40       	sbci	r19, 0x00	; 0
    2f64:	e1 f7       	brne	.-8      	; 0x2f5e <loop+0x10fa>
    2f66:	00 c0       	rjmp	.+0      	; 0x2f68 <loop+0x1104>
    2f68:	00 00       	nop
    2f6a:	b8 c8       	rjmp	.-3728   	; 0x20dc <loop+0x278>

          Serial.println("TIPO CARBURANTE: " + mezzo.Carb);
          Serial.println("TARGA: " + mezzo.TARGA);

          if ((mezzo.Carb == "B") || (mezzo.Carb == "D")) {
            RaccoltaDati[1] = mezzo.TARGA;
    2f6c:	6f e7       	ldi	r22, 0x7F	; 127
    2f6e:	7b e0       	ldi	r23, 0x0B	; 11
    2f70:	89 e0       	ldi	r24, 0x09	; 9
    2f72:	9b e0       	ldi	r25, 0x0B	; 11
    2f74:	0e 94 4e 3c 	call	0x789c	; 0x789c <_ZN6StringaSERKS_>
            RaccoltaDati[2] = mezzo.Carb;
    2f78:	69 e7       	ldi	r22, 0x79	; 121
    2f7a:	7b e0       	ldi	r23, 0x0B	; 11
    2f7c:	8f e0       	ldi	r24, 0x0F	; 15
    2f7e:	9b e0       	ldi	r25, 0x0B	; 11
    2f80:	0e 94 4e 3c 	call	0x789c	; 0x789c <_ZN6StringaSERKS_>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2f84:	62 e0       	ldi	r22, 0x02	; 2
    2f86:	77 e0       	ldi	r23, 0x07	; 7
    2f88:	ce 01       	movw	r24, r28
    2f8a:	01 96       	adiw	r24, 0x01	; 1
    2f8c:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
            righeDisplay[3] = "TARGA: " +  mezzo.TARGA;
    2f90:	6f e7       	ldi	r22, 0x7F	; 127
    2f92:	7b e0       	ldi	r23, 0x0B	; 11
    2f94:	ce 01       	movw	r24, r28
    2f96:	01 96       	adiw	r24, 0x01	; 1
    2f98:	0e 94 cc 3d 	call	0x7b98	; 0x7b98 <_ZplRK15StringSumHelperRK6String>
    2f9c:	bc 01       	movw	r22, r24
    2f9e:	81 ef       	ldi	r24, 0xF1	; 241
    2fa0:	9a e0       	ldi	r25, 0x0A	; 10
    2fa2:	0e 94 4e 3c 	call	0x789c	; 0x789c <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2fa6:	ce 01       	movw	r24, r28
    2fa8:	01 96       	adiw	r24, 0x01	; 1
    2faa:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
    2fae:	8f ef       	ldi	r24, 0xFF	; 255
    2fb0:	99 e6       	ldi	r25, 0x69	; 105
    2fb2:	28 e1       	ldi	r18, 0x18	; 24
    2fb4:	81 50       	subi	r24, 0x01	; 1
    2fb6:	90 40       	sbci	r25, 0x00	; 0
    2fb8:	20 40       	sbci	r18, 0x00	; 0
    2fba:	e1 f7       	brne	.-8      	; 0x2fb4 <loop+0x1150>
    2fbc:	00 c0       	rjmp	.+0      	; 0x2fbe <loop+0x115a>
    2fbe:	00 00       	nop
            _delay_ms(500);
            distr_selezionato = 0;
    2fc0:	10 92 2d 0b 	sts	0x0B2D, r1	; 0x800b2d <distr_selezionato>
            avanzaStato(TselDistributore);
    2fc4:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <TselDistributore>
    2fc8:	70 91 23 01 	lds	r23, 0x0123	; 0x800123 <TselDistributore+0x1>
    2fcc:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <TselDistributore+0x2>
    2fd0:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <TselDistributore+0x3>
    2fd4:	0e 94 c0 03 	call	0x780	; 0x780 <_Z11avanzaStatom>
    2fd8:	84 ca       	rjmp	.-2808   	; 0x24e2 <loop+0x67e>

        // Verifica scelta distributore

        if ((mezzo.Carb == "B") || (distr_selezionato == 2))
        {
          mezzo.Carb = "B";
    2fda:	6f e9       	ldi	r22, 0x9F	; 159
    2fdc:	75 e0       	ldi	r23, 0x05	; 5
    2fde:	89 e7       	ldi	r24, 0x79	; 121
    2fe0:	9b e0       	ldi	r25, 0x0B	; 11
    2fe2:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringaSEPKc>
          // abilitaPulser('B');          
          //Rele_Abilitazione2(0, 7); // chiudi relè
          StatoAttuale = "POMPA 2";
    2fe6:	6c e0       	ldi	r22, 0x0C	; 12
    2fe8:	76 e0       	ldi	r23, 0x06	; 6
    2fea:	8a e3       	ldi	r24, 0x3A	; 58
    2fec:	9b e0       	ldi	r25, 0x0B	; 11
    2fee:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringaSEPKc>
          RaccoltaDati[2] = mezzo.Carb;
    2ff2:	69 e7       	ldi	r22, 0x79	; 121
    2ff4:	7b e0       	ldi	r23, 0x0B	; 11
    2ff6:	8f e0       	ldi	r24, 0x0F	; 15
    2ff8:	9b e0       	ldi	r25, 0x0B	; 11
    2ffa:	0e 94 4e 3c 	call	0x789c	; 0x789c <_ZN6StringaSERKS_>
          righeDisplay[1] =  "****** KM ******";
    2ffe:	64 e1       	ldi	r22, 0x14	; 20
    3000:	76 e0       	ldi	r23, 0x06	; 6
    3002:	85 ee       	ldi	r24, 0xE5	; 229
    3004:	9a e0       	ldi	r25, 0x0A	; 10
    3006:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringaSEPKc>
          righeDisplay[2] = "KM:";
    300a:	65 e2       	ldi	r22, 0x25	; 37
    300c:	76 e0       	ldi	r23, 0x06	; 6
    300e:	8b ee       	ldi	r24, 0xEB	; 235
    3010:	9a e0       	ldi	r25, 0x0A	; 10
    3012:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringaSEPKc>
          righeDisplay[3] = "#:Conferma";       
    3016:	69 e2       	ldi	r22, 0x29	; 41
    3018:	76 e0       	ldi	r23, 0x06	; 6
    301a:	81 ef       	ldi	r24, 0xF1	; 241
    301c:	9a e0       	ldi	r25, 0x0A	; 10
    301e:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringaSEPKc>
    3022:	3f ef       	ldi	r19, 0xFF	; 255
    3024:	81 ee       	ldi	r24, 0xE1	; 225
    3026:	94 e0       	ldi	r25, 0x04	; 4
    3028:	31 50       	subi	r19, 0x01	; 1
    302a:	80 40       	sbci	r24, 0x00	; 0
    302c:	90 40       	sbci	r25, 0x00	; 0
    302e:	e1 f7       	brne	.-8      	; 0x3028 <loop+0x11c4>
    3030:	38 c0       	rjmp	.+112    	; 0x30a2 <loop+0x123e>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    3032:	6d e9       	ldi	r22, 0x9D	; 157
    3034:	75 e0       	ldi	r23, 0x05	; 5
    3036:	89 e7       	ldi	r24, 0x79	; 121
    3038:	9b e0       	ldi	r25, 0x0B	; 11
    303a:	0e 94 00 3e 	call	0x7c00	; 0x7c00 <_ZNK6String6equalsEPKc>
          _delay_ms(100);    
          avanzaStato(TinputKM);
        }
        else if ((mezzo.Carb == "D") || (distr_selezionato == 1))
    303e:	81 11       	cpse	r24, r1
    3040:	05 c0       	rjmp	.+10     	; 0x304c <loop+0x11e8>
    3042:	80 91 2d 0b 	lds	r24, 0x0B2D	; 0x800b2d <distr_selezionato>
    3046:	81 30       	cpi	r24, 0x01	; 1
    3048:	09 f0       	breq	.+2      	; 0x304c <loop+0x11e8>
    304a:	d5 ce       	rjmp	.-598    	; 0x2df6 <loop+0xf92>
        {
          mezzo.Carb = "D";
    304c:	6d e9       	ldi	r22, 0x9D	; 157
    304e:	75 e0       	ldi	r23, 0x05	; 5
    3050:	89 e7       	ldi	r24, 0x79	; 121
    3052:	9b e0       	ldi	r25, 0x0B	; 11
    3054:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringaSEPKc>
          //abilitaPulser('D');          
          //Rele_Abilitazione1(0, 7); // chiudi relè
          StatoAttuale = "POMPA 1";
    3058:	6d ef       	ldi	r22, 0xFD	; 253
    305a:	75 e0       	ldi	r23, 0x05	; 5
    305c:	8a e3       	ldi	r24, 0x3A	; 58
    305e:	9b e0       	ldi	r25, 0x0B	; 11
    3060:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringaSEPKc>
          RaccoltaDati[2] = mezzo.Carb;
    3064:	69 e7       	ldi	r22, 0x79	; 121
    3066:	7b e0       	ldi	r23, 0x0B	; 11
    3068:	8f e0       	ldi	r24, 0x0F	; 15
    306a:	9b e0       	ldi	r25, 0x0B	; 11
    306c:	0e 94 4e 3c 	call	0x789c	; 0x789c <_ZN6StringaSERKS_>
          righeDisplay[1] =  "****** KM ******";
    3070:	64 e1       	ldi	r22, 0x14	; 20
    3072:	76 e0       	ldi	r23, 0x06	; 6
    3074:	85 ee       	ldi	r24, 0xE5	; 229
    3076:	9a e0       	ldi	r25, 0x0A	; 10
    3078:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringaSEPKc>
          righeDisplay[2] = "KM:";
    307c:	65 e2       	ldi	r22, 0x25	; 37
    307e:	76 e0       	ldi	r23, 0x06	; 6
    3080:	8b ee       	ldi	r24, 0xEB	; 235
    3082:	9a e0       	ldi	r25, 0x0A	; 10
    3084:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringaSEPKc>
          righeDisplay[3] = "#:Conferma";      
    3088:	69 e2       	ldi	r22, 0x29	; 41
    308a:	76 e0       	ldi	r23, 0x06	; 6
    308c:	81 ef       	ldi	r24, 0xF1	; 241
    308e:	9a e0       	ldi	r25, 0x0A	; 10
    3090:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringaSEPKc>
    3094:	2f ef       	ldi	r18, 0xFF	; 255
    3096:	31 ee       	ldi	r19, 0xE1	; 225
    3098:	84 e0       	ldi	r24, 0x04	; 4
    309a:	21 50       	subi	r18, 0x01	; 1
    309c:	30 40       	sbci	r19, 0x00	; 0
    309e:	80 40       	sbci	r24, 0x00	; 0
    30a0:	e1 f7       	brne	.-8      	; 0x309a <loop+0x1236>
    30a2:	00 c0       	rjmp	.+0      	; 0x30a4 <loop+0x1240>
    30a4:	00 00       	nop
          _delay_ms(100);     
         avanzaStato(TinputKM);
    30a6:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <TinputKM>
    30aa:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <TinputKM+0x1>
    30ae:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <TinputKM+0x2>
    30b2:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <TinputKM+0x3>
    30b6:	df c0       	rjmp	.+446    	; 0x3276 <loop+0x1412>
		lcd.print((char)1);  // STAMPA LA CLESSIDRA
		lcd.print("Tempo: " + String((UltimoPassaggioStato + Timer - secs - 1)) + " sec ");
		 
		if (testbit(PINA,1) && (mezzo.Carb == "D"))
		{
			cli(); // GLOBAL INTERRUPT DISABLE
    30b8:	f8 94       	cli
            righeDisplay[1] = "LITRI : 0.00";
    30ba:	64 e8       	ldi	r22, 0x84	; 132
    30bc:	78 e0       	ldi	r23, 0x08	; 8
    30be:	85 ee       	ldi	r24, 0xE5	; 229
    30c0:	9a e0       	ldi	r25, 0x0A	; 10
    30c2:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringaSEPKc>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    30c6:	66 ec       	ldi	r22, 0xC6	; 198
    30c8:	75 e0       	ldi	r23, 0x05	; 5
    30ca:	ce 01       	movw	r24, r28
    30cc:	01 96       	adiw	r24, 0x01	; 1
    30ce:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
			righeDisplay[2] = "TARGA:" + mezzo.TARGA;
    30d2:	6f e7       	ldi	r22, 0x7F	; 127
    30d4:	7b e0       	ldi	r23, 0x0B	; 11
    30d6:	ce 01       	movw	r24, r28
    30d8:	01 96       	adiw	r24, 0x01	; 1
    30da:	0e 94 cc 3d 	call	0x7b98	; 0x7b98 <_ZplRK15StringSumHelperRK6String>
    30de:	bc 01       	movw	r22, r24
    30e0:	8b ee       	ldi	r24, 0xEB	; 235
    30e2:	9a e0       	ldi	r25, 0x0A	; 10
    30e4:	0e 94 4e 3c 	call	0x789c	; 0x789c <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    30e8:	ce 01       	movw	r24, r28
    30ea:	01 96       	adiw	r24, 0x01	; 1
    30ec:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    30f0:	6c e1       	ldi	r22, 0x1C	; 28
    30f2:	77 e0       	ldi	r23, 0x07	; 7
    30f4:	ce 01       	movw	r24, r28
    30f6:	01 96       	adiw	r24, 0x01	; 1
    30f8:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
 		    // righeDisplay[2] = "imp :" + String(impulsi);
 			righeDisplay[3] = "Erogazione: " + StatoAttuale;
    30fc:	6a e3       	ldi	r22, 0x3A	; 58
    30fe:	7b e0       	ldi	r23, 0x0B	; 11
    3100:	ce 01       	movw	r24, r28
    3102:	01 96       	adiw	r24, 0x01	; 1
    3104:	0e 94 cc 3d 	call	0x7b98	; 0x7b98 <_ZplRK15StringSumHelperRK6String>
    3108:	bc 01       	movw	r22, r24
    310a:	81 ef       	ldi	r24, 0xF1	; 241
    310c:	9a e0       	ldi	r25, 0x0A	; 10
    310e:	0e 94 4e 3c 	call	0x789c	; 0x789c <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    3112:	ce 01       	movw	r24, r28
    3114:	01 96       	adiw	r24, 0x01	; 1
    3116:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
			abilitaPulser('D');
    311a:	84 e4       	ldi	r24, 0x44	; 68
    311c:	0e 94 84 09 	call	0x1308	; 0x1308 <_Z13abilitaPulserc>
			impulsi = 0;
    3120:	10 92 2f 0b 	sts	0x0B2F, r1	; 0x800b2f <impulsi+0x1>
    3124:	10 92 2e 0b 	sts	0x0B2E, r1	; 0x800b2e <impulsi>
			avanzaStato(TmaxErogazione); 
    3128:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <TmaxErogazione>
    312c:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <TmaxErogazione+0x1>
    3130:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <TmaxErogazione+0x2>
    3134:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <TmaxErogazione+0x3>
    3138:	0e 94 c0 03 	call	0x780	; 0x780 <_Z11avanzaStatom>
    313c:	21 cb       	rjmp	.-2494   	; 0x2780 <loop+0x91c>
		
		// CONTATTO PISTOLA BENZINA

		if  (testbit(PINB,1) && (mezzo.Carb == "B"))
		{
			 cli(); // GLOBAL INTERRUPT DISABLE
    313e:	f8 94       	cli
             righeDisplay[1] = "LITRI : 0.00";
    3140:	64 e8       	ldi	r22, 0x84	; 132
    3142:	78 e0       	ldi	r23, 0x08	; 8
    3144:	85 ee       	ldi	r24, 0xE5	; 229
    3146:	9a e0       	ldi	r25, 0x0A	; 10
    3148:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringaSEPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    314c:	66 ec       	ldi	r22, 0xC6	; 198
    314e:	75 e0       	ldi	r23, 0x05	; 5
    3150:	ce 01       	movw	r24, r28
    3152:	01 96       	adiw	r24, 0x01	; 1
    3154:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
			 righeDisplay[2] = "TARGA:" + mezzo.TARGA;
    3158:	6f e7       	ldi	r22, 0x7F	; 127
    315a:	7b e0       	ldi	r23, 0x0B	; 11
    315c:	ce 01       	movw	r24, r28
    315e:	01 96       	adiw	r24, 0x01	; 1
    3160:	0e 94 cc 3d 	call	0x7b98	; 0x7b98 <_ZplRK15StringSumHelperRK6String>
    3164:	bc 01       	movw	r22, r24
    3166:	8b ee       	ldi	r24, 0xEB	; 235
    3168:	9a e0       	ldi	r25, 0x0A	; 10
    316a:	0e 94 4e 3c 	call	0x789c	; 0x789c <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    316e:	ce 01       	movw	r24, r28
    3170:	01 96       	adiw	r24, 0x01	; 1
    3172:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    3176:	6c e1       	ldi	r22, 0x1C	; 28
    3178:	77 e0       	ldi	r23, 0x07	; 7
    317a:	ce 01       	movw	r24, r28
    317c:	01 96       	adiw	r24, 0x01	; 1
    317e:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
             // righeDisplay[2] = "imp :" + String(impulsi);
             righeDisplay[3] = "Erogazione: " + StatoAttuale;
    3182:	6a e3       	ldi	r22, 0x3A	; 58
    3184:	7b e0       	ldi	r23, 0x0B	; 11
    3186:	ce 01       	movw	r24, r28
    3188:	01 96       	adiw	r24, 0x01	; 1
    318a:	0e 94 cc 3d 	call	0x7b98	; 0x7b98 <_ZplRK15StringSumHelperRK6String>
    318e:	bc 01       	movw	r22, r24
    3190:	81 ef       	ldi	r24, 0xF1	; 241
    3192:	9a e0       	ldi	r25, 0x0A	; 10
    3194:	0e 94 4e 3c 	call	0x789c	; 0x789c <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    3198:	ce 01       	movw	r24, r28
    319a:	01 96       	adiw	r24, 0x01	; 1
    319c:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
			 abilitaPulser('B');
    31a0:	82 e4       	ldi	r24, 0x42	; 66
    31a2:	0e 94 84 09 	call	0x1308	; 0x1308 <_Z13abilitaPulserc>
			 impulsi = 0;
    31a6:	10 92 2f 0b 	sts	0x0B2F, r1	; 0x800b2f <impulsi+0x1>
    31aa:	10 92 2e 0b 	sts	0x0B2E, r1	; 0x800b2e <impulsi>
             avanzaStato(TmaxErogazione);
    31ae:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <TmaxErogazione>
    31b2:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <TmaxErogazione+0x1>
    31b6:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <TmaxErogazione+0x2>
    31ba:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <TmaxErogazione+0x3>
    31be:	5b c0       	rjmp	.+182    	; 0x3276 <loop+0x1412>

        // CONTATTO PISTOLA DIESEL

 		if (!testbit(PINA,1) && (mezzo.Carb == "D"))
        {
          RaccoltaDati[3] = String(lt);
    31c0:	22 e0       	ldi	r18, 0x02	; 2
    31c2:	b7 01       	movw	r22, r14
    31c4:	a6 01       	movw	r20, r12
    31c6:	ce 01       	movw	r24, r28
    31c8:	01 96       	adiw	r24, 0x01	; 1
    31ca:	0e 94 4c 3d 	call	0x7a98	; 0x7a98 <_ZN6StringC1Edh>
    31ce:	be 01       	movw	r22, r28
    31d0:	6f 5f       	subi	r22, 0xFF	; 255
    31d2:	7f 4f       	sbci	r23, 0xFF	; 255
    31d4:	85 e1       	ldi	r24, 0x15	; 21
    31d6:	9b e0       	ldi	r25, 0x0B	; 11
    31d8:	0e 94 6b 3c 	call	0x78d6	; 0x78d6 <_ZN6StringaSEOS_>
    31dc:	ce 01       	movw	r24, r28
    31de:	01 96       	adiw	r24, 0x01	; 1
    31e0:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
          StatoAttuale = "STOP EROGAZIONE";
    31e4:	61 e9       	ldi	r22, 0x91	; 145
    31e6:	78 e0       	ldi	r23, 0x08	; 8
    31e8:	8a e3       	ldi	r24, 0x3A	; 58
    31ea:	9b e0       	ldi	r25, 0x0B	; 11
    31ec:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringaSEPKc>
          Rele_Abilitazione2(1, 7); //  apri relè
    31f0:	67 e0       	ldi	r22, 0x07	; 7
    31f2:	70 e0       	ldi	r23, 0x00	; 0
    31f4:	81 e0       	ldi	r24, 0x01	; 1
    31f6:	90 e0       	ldi	r25, 0x00	; 0
    31f8:	0e 94 01 0a 	call	0x1402	; 0x1402 <_Z18Rele_Abilitazione2ii>
          Rele_Abilitazione1(1, 7); //  apri relè
    31fc:	67 e0       	ldi	r22, 0x07	; 7
    31fe:	70 e0       	ldi	r23, 0x00	; 0
    3200:	81 e0       	ldi	r24, 0x01	; 1
    3202:	90 e0       	ldi	r25, 0x00	; 0
    3204:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z18Rele_Abilitazione1ii>
          //TOGGLE_BIT(PORTA, 1);
          avanzaStato(TmaxInviodati);
    3208:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <TmaxInviodati>
    320c:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <TmaxInviodati+0x1>
    3210:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <TmaxInviodati+0x2>
    3214:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <TmaxInviodati+0x3>
    3218:	0e 94 c0 03 	call	0x780	; 0x780 <_Z11avanzaStatom>
    321c:	8f cb       	rjmp	.-2274   	; 0x293c <loop+0xad8>

        // CONTATTO PISTOLA BENZINA

		if (!testbit(PINB,1) && (mezzo.Carb == "B"))
        {
          RaccoltaDati[3] = String(lt);
    321e:	22 e0       	ldi	r18, 0x02	; 2
    3220:	b7 01       	movw	r22, r14
    3222:	a6 01       	movw	r20, r12
    3224:	ce 01       	movw	r24, r28
    3226:	01 96       	adiw	r24, 0x01	; 1
    3228:	0e 94 4c 3d 	call	0x7a98	; 0x7a98 <_ZN6StringC1Edh>
    322c:	be 01       	movw	r22, r28
    322e:	6f 5f       	subi	r22, 0xFF	; 255
    3230:	7f 4f       	sbci	r23, 0xFF	; 255
    3232:	85 e1       	ldi	r24, 0x15	; 21
    3234:	9b e0       	ldi	r25, 0x0B	; 11
    3236:	0e 94 6b 3c 	call	0x78d6	; 0x78d6 <_ZN6StringaSEOS_>
    323a:	ce 01       	movw	r24, r28
    323c:	01 96       	adiw	r24, 0x01	; 1
    323e:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
          StatoAttuale = "STOP EROGAZIONE";
    3242:	61 e9       	ldi	r22, 0x91	; 145
    3244:	78 e0       	ldi	r23, 0x08	; 8
    3246:	8a e3       	ldi	r24, 0x3A	; 58
    3248:	9b e0       	ldi	r25, 0x0B	; 11
    324a:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringaSEPKc>
          Rele_Abilitazione2(1, 7); //  apri relè
    324e:	67 e0       	ldi	r22, 0x07	; 7
    3250:	70 e0       	ldi	r23, 0x00	; 0
    3252:	81 e0       	ldi	r24, 0x01	; 1
    3254:	90 e0       	ldi	r25, 0x00	; 0
    3256:	0e 94 01 0a 	call	0x1402	; 0x1402 <_Z18Rele_Abilitazione2ii>
          Rele_Abilitazione1(1, 7); //  apri relè
    325a:	67 e0       	ldi	r22, 0x07	; 7
    325c:	70 e0       	ldi	r23, 0x00	; 0
    325e:	81 e0       	ldi	r24, 0x01	; 1
    3260:	90 e0       	ldi	r25, 0x00	; 0
    3262:	0e 94 c6 09 	call	0x138c	; 0x138c <_Z18Rele_Abilitazione1ii>
          avanzaStato(TmaxInviodati);
    3266:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <TmaxInviodati>
    326a:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <TmaxInviodati+0x1>
    326e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <TmaxInviodati+0x2>
    3272:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <TmaxInviodati+0x3>
    3276:	0e 94 c0 03 	call	0x780	; 0x780 <_Z11avanzaStatom>
    327a:	bd cd       	rjmp	.-1158   	; 0x2df6 <loop+0xf92>

  nowTimer = DS3231M.now();
  secs = nowTimer.secondstime();  
  if (((UltimoPassaggioStato + Timer - secs) <= 1) && (stato_procedura != stato_erogazione)) Azzera();
  else if (((UltimoPassaggioStato + Timer - secs) <= 1) && (stato_procedura == stato_erogazione)) avanzaStato(TmaxInviodati);
}
    327c:	aa 96       	adiw	r28, 0x2a	; 42
    327e:	0f b6       	in	r0, 0x3f	; 63
    3280:	f8 94       	cli
    3282:	de bf       	out	0x3e, r29	; 62
    3284:	0f be       	out	0x3f, r0	; 63
    3286:	cd bf       	out	0x3d, r28	; 61
    3288:	df 91       	pop	r29
    328a:	cf 91       	pop	r28
    328c:	1f 91       	pop	r17
    328e:	0f 91       	pop	r16
    3290:	ff 90       	pop	r15
    3292:	ef 90       	pop	r14
    3294:	df 90       	pop	r13
    3296:	cf 90       	pop	r12
    3298:	08 95       	ret

0000329a <__vector_4>:
  73 litri al minuto
  73/60 = 1,22 lt/sec
  1,22*100 = 122 Hz
***********************************************************************/

ISR(PCINT0_vect) {
    329a:	1f 92       	push	r1
    329c:	0f 92       	push	r0
    329e:	0f b6       	in	r0, 0x3f	; 63
    32a0:	0f 92       	push	r0
    32a2:	11 24       	eor	r1, r1
    32a4:	0b b6       	in	r0, 0x3b	; 59
    32a6:	0f 92       	push	r0
    32a8:	2f 93       	push	r18
    32aa:	3f 93       	push	r19
    32ac:	4f 93       	push	r20
    32ae:	5f 93       	push	r21
    32b0:	6f 93       	push	r22
    32b2:	7f 93       	push	r23
    32b4:	8f 93       	push	r24
    32b6:	9f 93       	push	r25
    32b8:	af 93       	push	r26
    32ba:	bf 93       	push	r27
    32bc:	ef 93       	push	r30
    32be:	ff 93       	push	r31
  if ((stato_procedura == stato_erogazione) && (impulsi < MaxErogabile))
    32c0:	80 91 30 0b 	lds	r24, 0x0B30	; 0x800b30 <stato_procedura>
    32c4:	90 91 31 0b 	lds	r25, 0x0B31	; 0x800b31 <stato_procedura+0x1>
    32c8:	07 97       	sbiw	r24, 0x07	; 7
    32ca:	99 f5       	brne	.+102    	; 0x3332 <__vector_4+0x98>
    32cc:	20 91 2e 0b 	lds	r18, 0x0B2E	; 0x800b2e <impulsi>
    32d0:	30 91 2f 0b 	lds	r19, 0x0B2F	; 0x800b2f <impulsi+0x1>
    32d4:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <MaxErogabile>
    32d8:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <MaxErogabile+0x1>
    32dc:	28 17       	cp	r18, r24
    32de:	39 07       	cpc	r19, r25
    32e0:	40 f5       	brcc	.+80     	; 0x3332 <__vector_4+0x98>
  {
	  
	  if ((PINA & _BV(PA5)) && (mezzo.Carb == "D")) {
    32e2:	05 9b       	sbis	0x00, 5	; 0
    32e4:	08 c0       	rjmp	.+16     	; 0x32f6 <__vector_4+0x5c>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    32e6:	6d e9       	ldi	r22, 0x9D	; 157
    32e8:	75 e0       	ldi	r23, 0x05	; 5
    32ea:	89 e7       	ldi	r24, 0x79	; 121
    32ec:	9b e0       	ldi	r25, 0x0B	; 11
    32ee:	0e 94 00 3e 	call	0x7c00	; 0x7c00 <_ZNK6String6equalsEPKc>
    32f2:	81 11       	cpse	r24, r1
    32f4:	14 c0       	rjmp	.+40     	; 0x331e <__vector_4+0x84>
		impulsi++;
	  }
	  
      if ((PINA & _BV(PA6)) && (mezzo.Carb == "B")) {
    32f6:	06 9b       	sbis	0x00, 6	; 0
    32f8:	1c c0       	rjmp	.+56     	; 0x3332 <__vector_4+0x98>
    32fa:	6f e9       	ldi	r22, 0x9F	; 159
    32fc:	75 e0       	ldi	r23, 0x05	; 5
    32fe:	89 e7       	ldi	r24, 0x79	; 121
    3300:	9b e0       	ldi	r25, 0x0B	; 11
    3302:	0e 94 00 3e 	call	0x7c00	; 0x7c00 <_ZNK6String6equalsEPKc>
    3306:	88 23       	and	r24, r24
    3308:	a1 f0       	breq	.+40     	; 0x3332 <__vector_4+0x98>
		impulsi++;
    330a:	80 91 2e 0b 	lds	r24, 0x0B2E	; 0x800b2e <impulsi>
    330e:	90 91 2f 0b 	lds	r25, 0x0B2F	; 0x800b2f <impulsi+0x1>
    3312:	01 96       	adiw	r24, 0x01	; 1
    3314:	90 93 2f 0b 	sts	0x0B2F, r25	; 0x800b2f <impulsi+0x1>
    3318:	80 93 2e 0b 	sts	0x0B2E, r24	; 0x800b2e <impulsi>
    331c:	0a c0       	rjmp	.+20     	; 0x3332 <__vector_4+0x98>
ISR(PCINT0_vect) {
  if ((stato_procedura == stato_erogazione) && (impulsi < MaxErogabile))
  {
	  
	  if ((PINA & _BV(PA5)) && (mezzo.Carb == "D")) {
		impulsi++;
    331e:	80 91 2e 0b 	lds	r24, 0x0B2E	; 0x800b2e <impulsi>
    3322:	90 91 2f 0b 	lds	r25, 0x0B2F	; 0x800b2f <impulsi+0x1>
    3326:	01 96       	adiw	r24, 0x01	; 1
    3328:	90 93 2f 0b 	sts	0x0B2F, r25	; 0x800b2f <impulsi+0x1>
    332c:	80 93 2e 0b 	sts	0x0B2E, r24	; 0x800b2e <impulsi>
    3330:	e2 cf       	rjmp	.-60     	; 0x32f6 <__vector_4+0x5c>
	  
      if ((PINA & _BV(PA6)) && (mezzo.Carb == "B")) {
		impulsi++;
	  }
 }
}
    3332:	ff 91       	pop	r31
    3334:	ef 91       	pop	r30
    3336:	bf 91       	pop	r27
    3338:	af 91       	pop	r26
    333a:	9f 91       	pop	r25
    333c:	8f 91       	pop	r24
    333e:	7f 91       	pop	r23
    3340:	6f 91       	pop	r22
    3342:	5f 91       	pop	r21
    3344:	4f 91       	pop	r20
    3346:	3f 91       	pop	r19
    3348:	2f 91       	pop	r18
    334a:	0f 90       	pop	r0
    334c:	0b be       	out	0x3b, r0	; 59
    334e:	0f 90       	pop	r0
    3350:	0f be       	out	0x3f, r0	; 63
    3352:	0f 90       	pop	r0
    3354:	1f 90       	pop	r1
    3356:	18 95       	reti

00003358 <__vector_7>:
/***********************************************************************/

// interrupt per pulsanti abilitazione diesele benzina

ISR(PCINT3_vect) {
    3358:	1f 92       	push	r1
    335a:	0f 92       	push	r0
    335c:	0f b6       	in	r0, 0x3f	; 63
    335e:	0f 92       	push	r0
    3360:	11 24       	eor	r1, r1
    3362:	8f 93       	push	r24
    3364:	9f 93       	push	r25

  if (stato_procedura == stato_distributore)
    3366:	80 91 30 0b 	lds	r24, 0x0B30	; 0x800b30 <stato_procedura>
    336a:	90 91 31 0b 	lds	r25, 0x0B31	; 0x800b31 <stato_procedura+0x1>
    336e:	04 97       	sbiw	r24, 0x04	; 4
    3370:	09 f0       	breq	.+2      	; 0x3374 <__vector_7+0x1c>
    3372:	6a c0       	rjmp	.+212    	; 0x3448 <__vector_7+0xf0>
  {
    if (PIND & _BV(PD6))
    3374:	4e 9b       	sbis	0x09, 6	; 9
    3376:	1c c0       	rjmp	.+56     	; 0x33b0 <__vector_7+0x58>
    {
      intConsecutivePresses++;  // increment counter for number of presses           
    3378:	80 91 8d 0b 	lds	r24, 0x0B8D	; 0x800b8d <intConsecutivePresses>
    337c:	90 91 8e 0b 	lds	r25, 0x0B8E	; 0x800b8e <intConsecutivePresses+0x1>
    3380:	01 96       	adiw	r24, 0x01	; 1
    3382:	90 93 8e 0b 	sts	0x0B8E, r25	; 0x800b8e <intConsecutivePresses+0x1>
    3386:	80 93 8d 0b 	sts	0x0B8D, r24	; 0x800b8d <intConsecutivePresses>
      if (intConsecutivePresses >= NUM_OF_CONSECUTIVE_PRESSES)
    338a:	80 91 8d 0b 	lds	r24, 0x0B8D	; 0x800b8d <intConsecutivePresses>
    338e:	90 91 8e 0b 	lds	r25, 0x0B8E	; 0x800b8e <intConsecutivePresses+0x1>
    3392:	18 16       	cp	r1, r24
    3394:	19 06       	cpc	r1, r25
    3396:	1c f5       	brge	.+70     	; 0x33de <__vector_7+0x86>
      { // if enough presses to constitute a press
        intConsecutivePresses = 0;                    // and reset press counts
    3398:	10 92 8e 0b 	sts	0x0B8E, r1	; 0x800b8e <intConsecutivePresses+0x1>
    339c:	10 92 8d 0b 	sts	0x0B8D, r1	; 0x800b8d <intConsecutivePresses>
        intConsecutiveNonPresses = 0;        
    33a0:	10 92 8c 0b 	sts	0x0B8C, r1	; 0x800b8c <intConsecutiveNonPresses+0x1>
    33a4:	10 92 8b 0b 	sts	0x0B8B, r1	; 0x800b8b <intConsecutiveNonPresses>
        distr_selezionato = 2;
    33a8:	82 e0       	ldi	r24, 0x02	; 2
    33aa:	80 93 2d 0b 	sts	0x0B2D, r24	; 0x800b2d <distr_selezionato>
    33ae:	17 c0       	rjmp	.+46     	; 0x33de <__vector_7+0x86>
      }
    }
    else  {           // else if button is not pressed (logic low)
      intConsecutiveNonPresses++;
    33b0:	80 91 8b 0b 	lds	r24, 0x0B8B	; 0x800b8b <intConsecutiveNonPresses>
    33b4:	90 91 8c 0b 	lds	r25, 0x0B8C	; 0x800b8c <intConsecutiveNonPresses+0x1>
    33b8:	01 96       	adiw	r24, 0x01	; 1
    33ba:	90 93 8c 0b 	sts	0x0B8C, r25	; 0x800b8c <intConsecutiveNonPresses+0x1>
    33be:	80 93 8b 0b 	sts	0x0B8B, r24	; 0x800b8b <intConsecutiveNonPresses>
      if (intConsecutiveNonPresses >= NUM_OF_CONSECUTIVE_NON_PRESSES) {
    33c2:	80 91 8b 0b 	lds	r24, 0x0B8B	; 0x800b8b <intConsecutiveNonPresses>
    33c6:	90 91 8c 0b 	lds	r25, 0x0B8C	; 0x800b8c <intConsecutiveNonPresses+0x1>
    33ca:	02 97       	sbiw	r24, 0x02	; 2
    33cc:	44 f0       	brlt	.+16     	; 0x33de <__vector_7+0x86>
        intConsecutivePresses = 0;                      // reset press counts
    33ce:	10 92 8e 0b 	sts	0x0B8E, r1	; 0x800b8e <intConsecutivePresses+0x1>
    33d2:	10 92 8d 0b 	sts	0x0B8D, r1	; 0x800b8d <intConsecutivePresses>
        intConsecutiveNonPresses = 0;
    33d6:	10 92 8c 0b 	sts	0x0B8C, r1	; 0x800b8c <intConsecutiveNonPresses+0x1>
    33da:	10 92 8b 0b 	sts	0x0B8B, r1	; 0x800b8b <intConsecutiveNonPresses>
      }
    }

    if (PIND & _BV(PD7))
    33de:	4f 9b       	sbis	0x09, 7	; 9
    33e0:	1c c0       	rjmp	.+56     	; 0x341a <__vector_7+0xc2>
    {      
      intConsecutivePresses++;  // increment counter for number of presses
    33e2:	80 91 8d 0b 	lds	r24, 0x0B8D	; 0x800b8d <intConsecutivePresses>
    33e6:	90 91 8e 0b 	lds	r25, 0x0B8E	; 0x800b8e <intConsecutivePresses+0x1>
    33ea:	01 96       	adiw	r24, 0x01	; 1
    33ec:	90 93 8e 0b 	sts	0x0B8E, r25	; 0x800b8e <intConsecutivePresses+0x1>
    33f0:	80 93 8d 0b 	sts	0x0B8D, r24	; 0x800b8d <intConsecutivePresses>
      if (intConsecutivePresses >= NUM_OF_CONSECUTIVE_PRESSES)
    33f4:	80 91 8d 0b 	lds	r24, 0x0B8D	; 0x800b8d <intConsecutivePresses>
    33f8:	90 91 8e 0b 	lds	r25, 0x0B8E	; 0x800b8e <intConsecutivePresses+0x1>
    33fc:	18 16       	cp	r1, r24
    33fe:	19 06       	cpc	r1, r25
    3400:	1c f5       	brge	.+70     	; 0x3448 <__vector_7+0xf0>
      { // if enough presses to constitute a press
        intConsecutivePresses = 0;                    // and reset press counts
    3402:	10 92 8e 0b 	sts	0x0B8E, r1	; 0x800b8e <intConsecutivePresses+0x1>
    3406:	10 92 8d 0b 	sts	0x0B8D, r1	; 0x800b8d <intConsecutivePresses>
        intConsecutiveNonPresses = 0;        
    340a:	10 92 8c 0b 	sts	0x0B8C, r1	; 0x800b8c <intConsecutiveNonPresses+0x1>
    340e:	10 92 8b 0b 	sts	0x0B8B, r1	; 0x800b8b <intConsecutiveNonPresses>
        distr_selezionato = 1;
    3412:	81 e0       	ldi	r24, 0x01	; 1
    3414:	80 93 2d 0b 	sts	0x0B2D, r24	; 0x800b2d <distr_selezionato>
    3418:	17 c0       	rjmp	.+46     	; 0x3448 <__vector_7+0xf0>
      }
    }
    else  {            // else if button is not pressed (logic low)
      intConsecutiveNonPresses++;
    341a:	80 91 8b 0b 	lds	r24, 0x0B8B	; 0x800b8b <intConsecutiveNonPresses>
    341e:	90 91 8c 0b 	lds	r25, 0x0B8C	; 0x800b8c <intConsecutiveNonPresses+0x1>
    3422:	01 96       	adiw	r24, 0x01	; 1
    3424:	90 93 8c 0b 	sts	0x0B8C, r25	; 0x800b8c <intConsecutiveNonPresses+0x1>
    3428:	80 93 8b 0b 	sts	0x0B8B, r24	; 0x800b8b <intConsecutiveNonPresses>
      if (intConsecutiveNonPresses >= NUM_OF_CONSECUTIVE_NON_PRESSES) {
    342c:	80 91 8b 0b 	lds	r24, 0x0B8B	; 0x800b8b <intConsecutiveNonPresses>
    3430:	90 91 8c 0b 	lds	r25, 0x0B8C	; 0x800b8c <intConsecutiveNonPresses+0x1>
    3434:	02 97       	sbiw	r24, 0x02	; 2
    3436:	44 f0       	brlt	.+16     	; 0x3448 <__vector_7+0xf0>
        intConsecutivePresses = 0;                     // reset press counts
    3438:	10 92 8e 0b 	sts	0x0B8E, r1	; 0x800b8e <intConsecutivePresses+0x1>
    343c:	10 92 8d 0b 	sts	0x0B8D, r1	; 0x800b8d <intConsecutivePresses>
        intConsecutiveNonPresses = 0;
    3440:	10 92 8c 0b 	sts	0x0B8C, r1	; 0x800b8c <intConsecutiveNonPresses+0x1>
    3444:	10 92 8b 0b 	sts	0x0B8B, r1	; 0x800b8b <intConsecutiveNonPresses>
      }
    }
  }
    3448:	9f 91       	pop	r25
    344a:	8f 91       	pop	r24
    344c:	0f 90       	pop	r0
    344e:	0f be       	out	0x3f, r0	; 63
    3450:	0f 90       	pop	r0
    3452:	1f 90       	pop	r1
    3454:	18 95       	reti

00003456 <_GLOBAL__sub_I_ParametriCCEC>:
    3456:	8f 92       	push	r8
    3458:	af 92       	push	r10
    345a:	cf 92       	push	r12
    345c:	ef 92       	push	r14
    345e:	0f 93       	push	r16
    3460:	cf 93       	push	r28
    3462:	df 93       	push	r29
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    3464:	00 e0       	ldi	r16, 0x00	; 0
    3466:	20 e0       	ldi	r18, 0x00	; 0
    3468:	40 e0       	ldi	r20, 0x00	; 0
    346a:	60 e0       	ldi	r22, 0x00	; 0
    346c:	89 ec       	ldi	r24, 0xC9	; 201
    346e:	9b e0       	ldi	r25, 0x0B	; 11
    3470:	0e 94 9e 38 	call	0x713c	; 0x713c <_ZN9IPAddressC1Ehhhh>
ParametriCCEC_TypeDef Parametri[numero_parametri] =
{ {"DNS NAME SERVER\0", "ccec.no.dipvvf.it\0", 1000},
  {"IP CCEC\0", "192.168.3.100\0", 1020},
  {"Ultima Erogazione Salvata\0", "2000\0", 1035},
  {"Codice Sede\0", "NO1001\0", 1040}
    3474:	6f e6       	ldi	r22, 0x6F	; 111
    3476:	71 e0       	ldi	r23, 0x01	; 1
    3478:	8f e8       	ldi	r24, 0x8F	; 143
    347a:	9b e0       	ldi	r25, 0x0B	; 11
    347c:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
    3480:	60 e8       	ldi	r22, 0x80	; 128
    3482:	71 e0       	ldi	r23, 0x01	; 1
    3484:	85 e9       	ldi	r24, 0x95	; 149
    3486:	9b e0       	ldi	r25, 0x0B	; 11
    3488:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
    348c:	cf e8       	ldi	r28, 0x8F	; 143
    348e:	db e0       	ldi	r29, 0x0B	; 11
    3490:	88 ee       	ldi	r24, 0xE8	; 232
    3492:	93 e0       	ldi	r25, 0x03	; 3
    3494:	9d 87       	std	Y+13, r25	; 0x0d
    3496:	8c 87       	std	Y+12, r24	; 0x0c
    3498:	63 e9       	ldi	r22, 0x93	; 147
    349a:	71 e0       	ldi	r23, 0x01	; 1
    349c:	8d e9       	ldi	r24, 0x9D	; 157
    349e:	9b e0       	ldi	r25, 0x0B	; 11
    34a0:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
    34a4:	6c e9       	ldi	r22, 0x9C	; 156
    34a6:	71 e0       	ldi	r23, 0x01	; 1
    34a8:	83 ea       	ldi	r24, 0xA3	; 163
    34aa:	9b e0       	ldi	r25, 0x0B	; 11
    34ac:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
    34b0:	8c ef       	ldi	r24, 0xFC	; 252
    34b2:	93 e0       	ldi	r25, 0x03	; 3
    34b4:	9b 8f       	std	Y+27, r25	; 0x1b
    34b6:	8a 8f       	std	Y+26, r24	; 0x1a
    34b8:	6b ea       	ldi	r22, 0xAB	; 171
    34ba:	71 e0       	ldi	r23, 0x01	; 1
    34bc:	8b ea       	ldi	r24, 0xAB	; 171
    34be:	9b e0       	ldi	r25, 0x0B	; 11
    34c0:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
    34c4:	66 ec       	ldi	r22, 0xC6	; 198
    34c6:	71 e0       	ldi	r23, 0x01	; 1
    34c8:	81 eb       	ldi	r24, 0xB1	; 177
    34ca:	9b e0       	ldi	r25, 0x0B	; 11
    34cc:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
    34d0:	8b e0       	ldi	r24, 0x0B	; 11
    34d2:	94 e0       	ldi	r25, 0x04	; 4
    34d4:	99 a7       	std	Y+41, r25	; 0x29
    34d6:	88 a7       	std	Y+40, r24	; 0x28
    34d8:	6c ec       	ldi	r22, 0xCC	; 204
    34da:	71 e0       	ldi	r23, 0x01	; 1
    34dc:	89 eb       	ldi	r24, 0xB9	; 185
    34de:	9b e0       	ldi	r25, 0x0B	; 11
    34e0:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
    34e4:	69 ed       	ldi	r22, 0xD9	; 217
    34e6:	71 e0       	ldi	r23, 0x01	; 1
    34e8:	8f eb       	ldi	r24, 0xBF	; 191
    34ea:	9b e0       	ldi	r25, 0x0B	; 11
    34ec:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
    34f0:	80 e1       	ldi	r24, 0x10	; 16
    34f2:	94 e0       	ldi	r25, 0x04	; 4
    34f4:	9f ab       	std	Y+55, r25	; 0x37
    34f6:	8e ab       	std	Y+54, r24	; 0x36

volatile int intConsecutivePresses = 0;
volatile int intConsecutiveNonPresses = 0;
const uint8_t I2C_PCA9534_ADDR = 0x20;

struct mezzoType {
    34f8:	6c ee       	ldi	r22, 0xEC	; 236
    34fa:	71 e0       	ldi	r23, 0x01	; 1
    34fc:	89 e7       	ldi	r24, 0x79	; 121
    34fe:	9b e0       	ldi	r25, 0x0B	; 11
    3500:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
    3504:	6c ee       	ldi	r22, 0xEC	; 236
    3506:	71 e0       	ldi	r23, 0x01	; 1
    3508:	8f e7       	ldi	r24, 0x7F	; 127
    350a:	9b e0       	ldi	r25, 0x0B	; 11
    350c:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
    3510:	6c ee       	ldi	r22, 0xEC	; 236
    3512:	71 e0       	ldi	r23, 0x01	; 1
    3514:	85 e8       	ldi	r24, 0x85	; 133
    3516:	9b e0       	ldi	r25, 0x0B	; 11
    3518:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
uint8_t uid[] = { 0, 0, 0, 0, 0, 0, 0 };       // Buffer dove memorizzo la UID del Badge
uint8_t uidLength;                             // Length of the UID (4 or 7 bytes depending on ISO14443A card type)
uint8_t uidMezzo[] = { 0, 0, 0, 0, 0, 0, 0 };  // Buffer dove memorizzo la UID del Badge Mezzo
boolean alreadyTimbrata = false;

LiquidCrystal_I2C lcd(0x27, 2, 1, 0, 4, 5, 6, 7, 3, POSITIVE);  // Set the LCD I2C address
    351c:	1f 92       	push	r1
    351e:	83 e0       	ldi	r24, 0x03	; 3
    3520:	8f 93       	push	r24
    3522:	87 e0       	ldi	r24, 0x07	; 7
    3524:	88 2e       	mov	r8, r24
    3526:	96 e0       	ldi	r25, 0x06	; 6
    3528:	a9 2e       	mov	r10, r25
    352a:	25 e0       	ldi	r18, 0x05	; 5
    352c:	c2 2e       	mov	r12, r18
    352e:	34 e0       	ldi	r19, 0x04	; 4
    3530:	e3 2e       	mov	r14, r19
    3532:	21 e0       	ldi	r18, 0x01	; 1
    3534:	42 e0       	ldi	r20, 0x02	; 2
    3536:	67 e2       	ldi	r22, 0x27	; 39
    3538:	87 e5       	ldi	r24, 0x57	; 87
    353a:	9b e0       	ldi	r25, 0x0B	; 11
    353c:	0e 94 26 32 	call	0x644c	; 0x644c <_ZN17LiquidCrystal_I2CC1Ehhhhhhhhh13t_backlighPol>
uint8_t Clessidra[8] = {0x1F, 0x11, 0x0A, 0x04, 0x04, 0x0E, 0x1F, 0x1F,};
NFC_PN532 nfc(PN532_IRQ, PN532_RESET);
    3540:	43 e0       	ldi	r20, 0x03	; 3
    3542:	64 e0       	ldi	r22, 0x04	; 4
    3544:	80 e4       	ldi	r24, 0x40	; 64
    3546:	9b e0       	ldi	r25, 0x0B	; 11
    3548:	c6 d3       	rcall	.+1932   	; 0x3cd6 <_ZN9NFC_PN532C1Ehh>

String StatoAttuale = "START...";
    354a:	61 ea       	ldi	r22, 0xA1	; 161
    354c:	78 e0       	ldi	r23, 0x08	; 8
    354e:	8a e3       	ldi	r24, 0x3A	; 58
    3550:	9b e0       	ldi	r25, 0x0B	; 11
    3552:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
String strURLAPI = "";
    3556:	6c ee       	ldi	r22, 0xEC	; 236
    3558:	71 e0       	ldi	r23, 0x01	; 1
    355a:	84 e3       	ldi	r24, 0x34	; 52
    355c:	9b e0       	ldi	r25, 0x0B	; 11
    355e:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>

uint8_t distr_selezionato = 0;
/*** GESTIONE HTTP REQUEST ***/

int HTTP_len_response = 12;
String RispostaHTTP = "";
    3562:	6c ee       	ldi	r22, 0xEC	; 236
    3564:	71 e0       	ldi	r23, 0x01	; 1
    3566:	87 e2       	ldi	r24, 0x27	; 39
    3568:	9b e0       	ldi	r25, 0x0B	; 11
    356a:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
// Ate;TARGA;CARB;LT;KM;
String RaccoltaDati[] = {"", "", "", "", "", ""};
    356e:	6c ee       	ldi	r22, 0xEC	; 236
    3570:	71 e0       	ldi	r23, 0x01	; 1
    3572:	83 e0       	ldi	r24, 0x03	; 3
    3574:	9b e0       	ldi	r25, 0x0B	; 11
    3576:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
    357a:	6c ee       	ldi	r22, 0xEC	; 236
    357c:	71 e0       	ldi	r23, 0x01	; 1
    357e:	89 e0       	ldi	r24, 0x09	; 9
    3580:	9b e0       	ldi	r25, 0x0B	; 11
    3582:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
    3586:	6c ee       	ldi	r22, 0xEC	; 236
    3588:	71 e0       	ldi	r23, 0x01	; 1
    358a:	8f e0       	ldi	r24, 0x0F	; 15
    358c:	9b e0       	ldi	r25, 0x0B	; 11
    358e:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
    3592:	6c ee       	ldi	r22, 0xEC	; 236
    3594:	71 e0       	ldi	r23, 0x01	; 1
    3596:	85 e1       	ldi	r24, 0x15	; 21
    3598:	9b e0       	ldi	r25, 0x0B	; 11
    359a:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
    359e:	6c ee       	ldi	r22, 0xEC	; 236
    35a0:	71 e0       	ldi	r23, 0x01	; 1
    35a2:	8b e1       	ldi	r24, 0x1B	; 27
    35a4:	9b e0       	ldi	r25, 0x0B	; 11
    35a6:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
    35aa:	6c ee       	ldi	r22, 0xEC	; 236
    35ac:	71 e0       	ldi	r23, 0x01	; 1
    35ae:	81 e2       	ldi	r24, 0x21	; 33
    35b0:	9b e0       	ldi	r25, 0x0B	; 11
    35b2:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
// String Carburante = "X";
String Risposta = "";
    35b6:	6c ee       	ldi	r22, 0xEC	; 236
    35b8:	71 e0       	ldi	r23, 0x01	; 1
    35ba:	8d ef       	ldi	r24, 0xFD	; 253
    35bc:	9a e0       	ldi	r25, 0x0A	; 10
    35be:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
String Messaggio = "";
    35c2:	6c ee       	ldi	r22, 0xEC	; 236
    35c4:	71 e0       	ldi	r23, 0x01	; 1
    35c6:	87 ef       	ldi	r24, 0xF7	; 247
    35c8:	9a e0       	ldi	r25, 0x0A	; 10
    35ca:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
String righeDisplay[] = {"X", "X", "X", "X"};
    35ce:	67 e1       	ldi	r22, 0x17	; 23
    35d0:	75 e0       	ldi	r23, 0x05	; 5
    35d2:	8f ed       	ldi	r24, 0xDF	; 223
    35d4:	9a e0       	ldi	r25, 0x0A	; 10
    35d6:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
    35da:	67 e1       	ldi	r22, 0x17	; 23
    35dc:	75 e0       	ldi	r23, 0x05	; 5
    35de:	85 ee       	ldi	r24, 0xE5	; 229
    35e0:	9a e0       	ldi	r25, 0x0A	; 10
    35e2:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
    35e6:	67 e1       	ldi	r22, 0x17	; 23
    35e8:	75 e0       	ldi	r23, 0x05	; 5
    35ea:	8b ee       	ldi	r24, 0xEB	; 235
    35ec:	9a e0       	ldi	r25, 0x0A	; 10
    35ee:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
    35f2:	67 e1       	ldi	r22, 0x17	; 23
    35f4:	75 e0       	ldi	r23, 0x05	; 5
    35f6:	81 ef       	ldi	r24, 0xF1	; 241
    35f8:	9a e0       	ldi	r25, 0x0A	; 10
    35fa:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
char CodSede[] = "NO1001";
/********************************************************************************************/
/*                    Configurazione Rete                       */
/********************************************************************************************/

IPAddress ipCCEC(192, 168, 3, 100);
    35fe:	04 e6       	ldi	r16, 0x64	; 100
    3600:	23 e0       	ldi	r18, 0x03	; 3
    3602:	48 ea       	ldi	r20, 0xA8	; 168
    3604:	60 ec       	ldi	r22, 0xC0	; 192
    3606:	89 ed       	ldi	r24, 0xD9	; 217
    3608:	9a e0       	ldi	r25, 0x0A	; 10
    360a:	0e 94 9e 38 	call	0x713c	; 0x713c <_ZN9IPAddressC1Ehhhh>
IPAddress myDns(192, 168, 1, 21); // DNS
    360e:	05 e1       	ldi	r16, 0x15	; 21
    3610:	21 e0       	ldi	r18, 0x01	; 1
    3612:	48 ea       	ldi	r20, 0xA8	; 168
    3614:	60 ec       	ldi	r22, 0xC0	; 192
    3616:	83 ed       	ldi	r24, 0xD3	; 211
    3618:	9a e0       	ldi	r25, 0x0A	; 10
    361a:	0e 94 9e 38 	call	0x713c	; 0x713c <_ZN9IPAddressC1Ehhhh>
IPAddress gateway(192, 168, 0, 1); // GATEWAY
    361e:	01 e0       	ldi	r16, 0x01	; 1
    3620:	20 e0       	ldi	r18, 0x00	; 0
    3622:	48 ea       	ldi	r20, 0xA8	; 168
    3624:	60 ec       	ldi	r22, 0xC0	; 192
    3626:	8d ec       	ldi	r24, 0xCD	; 205
    3628:	9a e0       	ldi	r25, 0x0A	; 10
    362a:	0e 94 9e 38 	call	0x713c	; 0x713c <_ZN9IPAddressC1Ehhhh>
IPAddress subnet(255, 255, 0, 0); // SUBNET
    362e:	00 e0       	ldi	r16, 0x00	; 0
    3630:	20 e0       	ldi	r18, 0x00	; 0
    3632:	4f ef       	ldi	r20, 0xFF	; 255
    3634:	6f ef       	ldi	r22, 0xFF	; 255
    3636:	87 ec       	ldi	r24, 0xC7	; 199
    3638:	9a e0       	ldi	r25, 0x0A	; 10
    363a:	0e 94 9e 38 	call	0x713c	; 0x713c <_ZN9IPAddressC1Ehhhh>

char serverATE[]  = "wbpate-test.dipvvf.it";
char serverGAC[]  = "gacweb-test.dipvvf.it";
char serverREST[] = "ccec.no.dipvvf.it";

EthernetClient clientLOCAL;
    363e:	8a eb       	ldi	r24, 0xBA	; 186
    3640:	9a e0       	ldi	r25, 0x0A	; 10
    3642:	0e 94 8c 29 	call	0x5318	; 0x5318 <_ZN14EthernetClientC1Ev>
EthernetClient clientATE;
    3646:	8d ea       	ldi	r24, 0xAD	; 173
    3648:	9a e0       	ldi	r25, 0x0A	; 10
    364a:	0e 94 8c 29 	call	0x5318	; 0x5318 <_ZN14EthernetClientC1Ev>

byte mac[] = {0x00, 0x0E, 0x0C, 0xB0, 0x25, 0x6F};
/********************************************************************************************/
/*                    Real Time Clock                       */
/********************************************************************************************/
DS3231M_Class DS3231M;
    364e:	81 ea       	ldi	r24, 0xA1	; 161
    3650:	9a e0       	ldi	r25, 0x0A	; 10
    3652:	0e 94 69 23 	call	0x46d2	; 0x46d2 <_ZN13DS3231M_ClassC1Ev>
const uint8_t SPRINTF_BUFFER_SIZE =     32;
char          inputBuffer[SPRINTF_BUFFER_SIZE];
unsigned long secs;                            // store the seconds value
unsigned long UltimoPassaggioStato = 0;        // Timer Stati Procedura
unsigned long Timer = 0;                       // Timer
DateTime nowTimer;
    3656:	40 e0       	ldi	r20, 0x00	; 0
    3658:	50 e0       	ldi	r21, 0x00	; 0
    365a:	ba 01       	movw	r22, r20
    365c:	8f e8       	ldi	r24, 0x8F	; 143
    365e:	9a e0       	ldi	r25, 0x0A	; 10
    3660:	cc d6       	rcall	.+3480   	; 0x43fa <_ZN8DateTimeC1Em>
/********************************************************************************************/

const byte ROWS = 4; //four rows
const byte COLS = 4; //four columns

String TARGA = "";
    3662:	6c ee       	ldi	r22, 0xEC	; 236
    3664:	71 e0       	ldi	r23, 0x01	; 1
    3666:	89 e8       	ldi	r24, 0x89	; 137
    3668:	9a e0       	ldi	r25, 0x0A	; 10
    366a:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
String KM = "";
    366e:	6c ee       	ldi	r22, 0xEC	; 236
    3670:	71 e0       	ldi	r23, 0x01	; 1
    3672:	83 e8       	ldi	r24, 0x83	; 131
    3674:	9a e0       	ldi	r25, 0x0A	; 10
    3676:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', '.'}
};

PCA9534 gpio;
    367a:	0f 90       	pop	r0
    367c:	0f 90       	pop	r0
    367e:	80 e8       	ldi	r24, 0x80	; 128
    3680:	9a e0       	ldi	r25, 0x0A	; 10
        intConsecutivePresses = 0;                     // reset press counts
        intConsecutiveNonPresses = 0;
      }
    }
  }
    3682:	df 91       	pop	r29
    3684:	cf 91       	pop	r28
    3686:	0f 91       	pop	r16
    3688:	ef 90       	pop	r14
    368a:	cf 90       	pop	r12
    368c:	af 90       	pop	r10
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', '.'}
};

PCA9534 gpio;
    368e:	8f 90       	pop	r8
    3690:	82 c2       	rjmp	.+1284   	; 0x3b96 <_ZN7PCA9534C1Ev>

00003692 <_GLOBAL__sub_D_ParametriCCEC>:
        intConsecutivePresses = 0;                     // reset press counts
        intConsecutiveNonPresses = 0;
      }
    }
  }
    3692:	cf 93       	push	r28
    3694:	df 93       	push	r29

const byte ROWS = 4; //four rows
const byte COLS = 4; //four columns

String TARGA = "";
String KM = "";
    3696:	83 e8       	ldi	r24, 0x83	; 131
    3698:	9a e0       	ldi	r25, 0x0A	; 10
    369a:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
/********************************************************************************************/

const byte ROWS = 4; //four rows
const byte COLS = 4; //four columns

String TARGA = "";
    369e:	89 e8       	ldi	r24, 0x89	; 137
    36a0:	9a e0       	ldi	r25, 0x0A	; 10
    36a2:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>

byte mac[] = {0x00, 0x0E, 0x0C, 0xB0, 0x25, 0x6F};
/********************************************************************************************/
/*                    Real Time Clock                       */
/********************************************************************************************/
DS3231M_Class DS3231M;
    36a6:	81 ea       	ldi	r24, 0xA1	; 161
    36a8:	9a e0       	ldi	r25, 0x0A	; 10
    36aa:	0e 94 70 23 	call	0x46e0	; 0x46e0 <_ZN13DS3231M_ClassD1Ev>
// Ate;TARGA;CARB;LT;KM;
String RaccoltaDati[] = {"", "", "", "", "", ""};
// String Carburante = "X";
String Risposta = "";
String Messaggio = "";
String righeDisplay[] = {"X", "X", "X", "X"};
    36ae:	81 ef       	ldi	r24, 0xF1	; 241
    36b0:	9a e0       	ldi	r25, 0x0A	; 10
    36b2:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
    36b6:	8b ee       	ldi	r24, 0xEB	; 235
    36b8:	9a e0       	ldi	r25, 0x0A	; 10
    36ba:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
    36be:	85 ee       	ldi	r24, 0xE5	; 229
    36c0:	9a e0       	ldi	r25, 0x0A	; 10
    36c2:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
    36c6:	8f ed       	ldi	r24, 0xDF	; 223
    36c8:	9a e0       	ldi	r25, 0x0A	; 10
    36ca:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
String RispostaHTTP = "";
// Ate;TARGA;CARB;LT;KM;
String RaccoltaDati[] = {"", "", "", "", "", ""};
// String Carburante = "X";
String Risposta = "";
String Messaggio = "";
    36ce:	87 ef       	ldi	r24, 0xF7	; 247
    36d0:	9a e0       	ldi	r25, 0x0A	; 10
    36d2:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
int HTTP_len_response = 12;
String RispostaHTTP = "";
// Ate;TARGA;CARB;LT;KM;
String RaccoltaDati[] = {"", "", "", "", "", ""};
// String Carburante = "X";
String Risposta = "";
    36d6:	8d ef       	ldi	r24, 0xFD	; 253
    36d8:	9a e0       	ldi	r25, 0x0A	; 10
    36da:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
/*** GESTIONE HTTP REQUEST ***/

int HTTP_len_response = 12;
String RispostaHTTP = "";
// Ate;TARGA;CARB;LT;KM;
String RaccoltaDati[] = {"", "", "", "", "", ""};
    36de:	c7 e2       	ldi	r28, 0x27	; 39
    36e0:	db e0       	ldi	r29, 0x0B	; 11
    36e2:	26 97       	sbiw	r28, 0x06	; 6
    36e4:	ce 01       	movw	r24, r28
    36e6:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
    36ea:	8b e0       	ldi	r24, 0x0B	; 11
    36ec:	c3 30       	cpi	r28, 0x03	; 3
    36ee:	d8 07       	cpc	r29, r24
    36f0:	c1 f7       	brne	.-16     	; 0x36e2 <_GLOBAL__sub_D_ParametriCCEC+0x50>

uint8_t distr_selezionato = 0;
/*** GESTIONE HTTP REQUEST ***/

int HTTP_len_response = 12;
String RispostaHTTP = "";
    36f2:	87 e2       	ldi	r24, 0x27	; 39
    36f4:	9b e0       	ldi	r25, 0x0B	; 11
    36f6:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
LiquidCrystal_I2C lcd(0x27, 2, 1, 0, 4, 5, 6, 7, 3, POSITIVE);  // Set the LCD I2C address
uint8_t Clessidra[8] = {0x1F, 0x11, 0x0A, 0x04, 0x04, 0x0E, 0x1F, 0x1F,};
NFC_PN532 nfc(PN532_IRQ, PN532_RESET);

String StatoAttuale = "START...";
String strURLAPI = "";
    36fa:	84 e3       	ldi	r24, 0x34	; 52
    36fc:	9b e0       	ldi	r25, 0x0B	; 11
    36fe:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>

LiquidCrystal_I2C lcd(0x27, 2, 1, 0, 4, 5, 6, 7, 3, POSITIVE);  // Set the LCD I2C address
uint8_t Clessidra[8] = {0x1F, 0x11, 0x0A, 0x04, 0x04, 0x0E, 0x1F, 0x1F,};
NFC_PN532 nfc(PN532_IRQ, PN532_RESET);

String StatoAttuale = "START...";
    3702:	8a e3       	ldi	r24, 0x3A	; 58
    3704:	9b e0       	ldi	r25, 0x0B	; 11
    3706:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>

volatile int intConsecutivePresses = 0;
volatile int intConsecutiveNonPresses = 0;
const uint8_t I2C_PCA9534_ADDR = 0x20;

struct mezzoType {
    370a:	85 e8       	ldi	r24, 0x85	; 133
    370c:	9b e0       	ldi	r25, 0x0B	; 11
    370e:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
    3712:	8f e7       	ldi	r24, 0x7F	; 127
    3714:	9b e0       	ldi	r25, 0x0B	; 11
    3716:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
    371a:	89 e7       	ldi	r24, 0x79	; 121
    371c:	9b e0       	ldi	r25, 0x0B	; 11
    371e:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>

ParametriCCEC_TypeDef *ParametriCCEC; //puntatore  a Map memoria

#define numero_parametri 4

ParametriCCEC_TypeDef Parametri[numero_parametri] =
    3722:	89 eb       	ldi	r24, 0xB9	; 185
    3724:	9b e0       	ldi	r25, 0x0B	; 11
    3726:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <_ZN20ParametriCCEC_structD1Ev>
    372a:	8b ea       	ldi	r24, 0xAB	; 171
    372c:	9b e0       	ldi	r25, 0x0B	; 11
    372e:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <_ZN20ParametriCCEC_structD1Ev>
    3732:	8d e9       	ldi	r24, 0x9D	; 157
    3734:	9b e0       	ldi	r25, 0x0B	; 11
    3736:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <_ZN20ParametriCCEC_structD1Ev>
    373a:	8f e8       	ldi	r24, 0x8F	; 143
    373c:	9b e0       	ldi	r25, 0x0B	; 11
        intConsecutivePresses = 0;                     // reset press counts
        intConsecutiveNonPresses = 0;
      }
    }
  }
    373e:	df 91       	pop	r29
    3740:	cf 91       	pop	r28
    3742:	0c 94 03 0f 	jmp	0x1e06	; 0x1e06 <_ZN20ParametriCCEC_structD1Ev>

00003746 <setup>:
	Serial.println(" ");
	Serial.println(" ");
}
/************************************************************/

void setup() {
    3746:	cf 92       	push	r12
    3748:	df 92       	push	r13
    374a:	ef 92       	push	r14
    374c:	ff 92       	push	r15
    374e:	0f 93       	push	r16
    3750:	1f 93       	push	r17
    3752:	cf 93       	push	r28
    3754:	df 93       	push	r29
    3756:	00 d0       	rcall	.+0      	; 0x3758 <setup+0x12>
    3758:	00 d0       	rcall	.+0      	; 0x375a <setup+0x14>
    375a:	00 d0       	rcall	.+0      	; 0x375c <setup+0x16>
    375c:	cd b7       	in	r28, 0x3d	; 61
    375e:	de b7       	in	r29, 0x3e	; 62
    3760:	2f ef       	ldi	r18, 0xFF	; 255
    3762:	81 ee       	ldi	r24, 0xE1	; 225
    3764:	94 e0       	ldi	r25, 0x04	; 4
    3766:	21 50       	subi	r18, 0x01	; 1
    3768:	80 40       	sbci	r24, 0x00	; 0
    376a:	90 40       	sbci	r25, 0x00	; 0
    376c:	e1 f7       	brne	.-8      	; 0x3766 <setup+0x20>
    376e:	00 c0       	rjmp	.+0      	; 0x3770 <setup+0x2a>
    3770:	00 00       	nop

   /************************************************************/
   /*  DISABILITO PERIFERICHE								   */
   /************************************************************/
   _delay_ms(100);
   disable_ETH();
    3772:	0e 94 95 01 	call	0x32a	; 0x32a <_ZL11disable_ETHv>
    3776:	2f ef       	ldi	r18, 0xFF	; 255
    3778:	81 ee       	ldi	r24, 0xE1	; 225
    377a:	94 e0       	ldi	r25, 0x04	; 4
    377c:	21 50       	subi	r18, 0x01	; 1
    377e:	80 40       	sbci	r24, 0x00	; 0
    3780:	90 40       	sbci	r25, 0x00	; 0
    3782:	e1 f7       	brne	.-8      	; 0x377c <setup+0x36>
    3784:	00 c0       	rjmp	.+0      	; 0x3786 <setup+0x40>
    3786:	00 00       	nop
static inline void initSS_FLASH()  { DDRB |= (1 << PB4); } // set DDRB bit 4, sets PB4 for output
static inline void initSS_ETH()    { DDRC |= (1 << PC4); } // set DDRC bit 4, sets PC4 for output
static inline void enable_ETH()    { PORTC &= ~(1 << PC4); } // Set 0 Bit 4 PORTC Register
static inline void enable_FLASH()  { PORTB &= ~(1 << PB4); } // Set 0 Bit 4 PORTB Register
static inline void disable_ETH()   { PORTC |= (1 << PC4);  } // Set 1 Bit 4 PORTC Register
static inline void disable_FLASH() { PORTB |= (1 << PB4);  } // Set 1 Bit 4 PORTB Register
    3788:	2c 9a       	sbi	0x05, 4	; 5
    378a:	2f ef       	ldi	r18, 0xFF	; 255
    378c:	81 ee       	ldi	r24, 0xE1	; 225
    378e:	94 e0       	ldi	r25, 0x04	; 4
    3790:	21 50       	subi	r18, 0x01	; 1
    3792:	80 40       	sbci	r24, 0x00	; 0
    3794:	90 40       	sbci	r25, 0x00	; 0
    3796:	e1 f7       	brne	.-8      	; 0x3790 <setup+0x4a>
    3798:	00 c0       	rjmp	.+0      	; 0x379a <setup+0x54>
    379a:	00 00       	nop
static inline void disable_LORA()  { PORTA |= (1 << PA4);  } // Set 1 Bit 4 PORTA Register
static inline void disable_GSM()   { PORTD &= ~(1 << PD5); } // Set 0 Bit 5 PORTD Register
static inline void disable_DTRGSM(){ PORTB |= (1 << PB0); } // Set 1 Bit 5 PORTD Register
    379c:	28 9a       	sbi	0x05, 0	; 5
    379e:	2f ef       	ldi	r18, 0xFF	; 255
    37a0:	81 ee       	ldi	r24, 0xE1	; 225
    37a2:	94 e0       	ldi	r25, 0x04	; 4
    37a4:	21 50       	subi	r18, 0x01	; 1
    37a6:	80 40       	sbci	r24, 0x00	; 0
    37a8:	90 40       	sbci	r25, 0x00	; 0
    37aa:	e1 f7       	brne	.-8      	; 0x37a4 <setup+0x5e>
    37ac:	00 c0       	rjmp	.+0      	; 0x37ae <setup+0x68>
    37ae:	00 00       	nop
static inline void initSS_FLASH()  { DDRB |= (1 << PB4); } // set DDRB bit 4, sets PB4 for output
static inline void initSS_ETH()    { DDRC |= (1 << PC4); } // set DDRC bit 4, sets PC4 for output
static inline void enable_ETH()    { PORTC &= ~(1 << PC4); } // Set 0 Bit 4 PORTC Register
static inline void enable_FLASH()  { PORTB &= ~(1 << PB4); } // Set 0 Bit 4 PORTB Register
static inline void disable_ETH()   { PORTC |= (1 << PC4);  } // Set 1 Bit 4 PORTC Register
static inline void disable_FLASH() { PORTB |= (1 << PB4);  } // Set 1 Bit 4 PORTB Register
    37b0:	2c 9a       	sbi	0x05, 4	; 5
    37b2:	2f ef       	ldi	r18, 0xFF	; 255
    37b4:	81 ee       	ldi	r24, 0xE1	; 225
    37b6:	94 e0       	ldi	r25, 0x04	; 4
    37b8:	21 50       	subi	r18, 0x01	; 1
    37ba:	80 40       	sbci	r24, 0x00	; 0
    37bc:	90 40       	sbci	r25, 0x00	; 0
    37be:	e1 f7       	brne	.-8      	; 0x37b8 <setup+0x72>
    37c0:	00 c0       	rjmp	.+0      	; 0x37c2 <setup+0x7c>
    37c2:	00 00       	nop
static inline void disable_LORA()  { PORTA |= (1 << PA4);  } // Set 1 Bit 4 PORTA Register
    37c4:	14 9a       	sbi	0x02, 4	; 2
    37c6:	2f ef       	ldi	r18, 0xFF	; 255
    37c8:	81 ee       	ldi	r24, 0xE1	; 225
    37ca:	94 e0       	ldi	r25, 0x04	; 4
    37cc:	21 50       	subi	r18, 0x01	; 1
    37ce:	80 40       	sbci	r24, 0x00	; 0
    37d0:	90 40       	sbci	r25, 0x00	; 0
    37d2:	e1 f7       	brne	.-8      	; 0x37cc <setup+0x86>
    37d4:	00 c0       	rjmp	.+0      	; 0x37d6 <setup+0x90>
    37d6:	00 00       	nop
static inline void disable_GSM()   { PORTD &= ~(1 << PD5); } // Set 0 Bit 5 PORTD Register
static inline void disable_DTRGSM(){ PORTB |= (1 << PB0); } // Set 1 Bit 5 PORTD Register
static inline void disable_WIFI()  { PORTB &= ~(1 << PB3);  } // Set 0 Bit 3 PORTB Register
    37d8:	2b 98       	cbi	0x05, 3	; 5
    37da:	2f ef       	ldi	r18, 0xFF	; 255
    37dc:	81 ee       	ldi	r24, 0xE1	; 225
    37de:	94 e0       	ldi	r25, 0x04	; 4
    37e0:	21 50       	subi	r18, 0x01	; 1
    37e2:	80 40       	sbci	r24, 0x00	; 0
    37e4:	90 40       	sbci	r25, 0x00	; 0
    37e6:	e1 f7       	brne	.-8      	; 0x37e0 <setup+0x9a>
    37e8:	00 c0       	rjmp	.+0      	; 0x37ea <setup+0xa4>
    37ea:	00 00       	nop
    37ec:	2f ef       	ldi	r18, 0xFF	; 255
    37ee:	81 ee       	ldi	r24, 0xE1	; 225
    37f0:	94 e0       	ldi	r25, 0x04	; 4
    37f2:	21 50       	subi	r18, 0x01	; 1
    37f4:	80 40       	sbci	r24, 0x00	; 0
    37f6:	90 40       	sbci	r25, 0x00	; 0
    37f8:	e1 f7       	brne	.-8      	; 0x37f2 <setup+0xac>
    37fa:	00 c0       	rjmp	.+0      	; 0x37fc <setup+0xb6>
    37fc:	00 00       	nop
   disable_WIFI();
   _delay_ms(100);
   /*******************************************************************************************/
  // Serial.begin(115200);
  _delay_ms(100);
  Serial.println(" inizio Setup ......");
    37fe:	6a ea       	ldi	r22, 0xAA	; 170
    3800:	78 e0       	ldi	r23, 0x08	; 8
    3802:	8e e1       	ldi	r24, 0x1E	; 30
    3804:	9d e0       	ldi	r25, 0x0D	; 13
    3806:	0e 94 5c 39 	call	0x72b8	; 0x72b8 <_ZN5Print7printlnEPKc>
  printLine();
    380a:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>

  /*******************************************************************************************/
  ParametriCCEC = Parametri;  
    380e:	8f e8       	ldi	r24, 0x8F	; 143
    3810:	9b e0       	ldi	r25, 0x0B	; 11
    3812:	90 93 c8 0b 	sts	0x0BC8, r25	; 0x800bc8 <ParametriCCEC+0x1>
    3816:	80 93 c7 0b 	sts	0x0BC7, r24	; 0x800bc7 <ParametriCCEC>
  printLine();
    381a:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
  Serial.print("EEPROM utilizzata (byte): ");
    381e:	6f eb       	ldi	r22, 0xBF	; 191
    3820:	78 e0       	ldi	r23, 0x08	; 8
    3822:	8e e1       	ldi	r24, 0x1E	; 30
    3824:	9d e0       	ldi	r25, 0x0D	; 13
    3826:	0e 94 31 39 	call	0x7262	; 0x7262 <_ZN5Print5printEPKc>
  Serial.print(EEPROM.length());
    382a:	4a e0       	ldi	r20, 0x0A	; 10
    382c:	50 e0       	ldi	r21, 0x00	; 0
    382e:	60 e0       	ldi	r22, 0x00	; 0
    3830:	70 e1       	ldi	r23, 0x10	; 16
    3832:	8e e1       	ldi	r24, 0x1E	; 30
    3834:	9d e0       	ldi	r25, 0x0D	; 13
    3836:	0e 94 c5 39 	call	0x738a	; 0x738a <_ZN5Print5printEji>
  Serial.println(" ");
    383a:	6f ee       	ldi	r22, 0xEF	; 239
    383c:	71 e0       	ldi	r23, 0x01	; 1
    383e:	8e e1       	ldi	r24, 0x1E	; 30
    3840:	9d e0       	ldi	r25, 0x0D	; 13
    3842:	0e 94 5c 39 	call	0x72b8	; 0x72b8 <_ZN5Print7printlnEPKc>
  Serial.print("Scrittura Parametri CCEC");
    3846:	6a ed       	ldi	r22, 0xDA	; 218
    3848:	78 e0       	ldi	r23, 0x08	; 8
    384a:	8e e1       	ldi	r24, 0x1E	; 30
    384c:	9d e0       	ldi	r25, 0x0D	; 13
    384e:	0e 94 31 39 	call	0x7262	; 0x7262 <_ZN5Print5printEPKc>

  String app = "";
    3852:	6c ee       	ldi	r22, 0xEC	; 236
    3854:	71 e0       	ldi	r23, 0x01	; 1
    3856:	ce 01       	movw	r24, r28
    3858:	01 96       	adiw	r24, 0x01	; 1
    385a:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
//   if (write_eeprom_string_struct(ParametriCCEC[0])) { Serial.println("WRITE OK");}
//   if (write_eeprom_string_struct(ParametriCCEC[1])) { Serial.println("WRITE OK");}
//   if (write_eeprom_string_struct(ParametriCCEC[2])) { Serial.println("WRITE OK");}
//   if (write_eeprom_string_struct(ParametriCCEC[3])) { Serial.println("WRITE OK");}

  printLine();  
    385e:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
/*******************************************************************************************/
  DDRC |= (1 << BUZZER); // set pin BUZZER (PC6) for output
    3862:	3e 9a       	sbi	0x07, 6	; 7
  DDRC |= (1 << RELE1);  // Rele1
    3864:	3f 9a       	sbi	0x07, 7	; 7
  DDRA |= (1 << RELE2);  // Rele2   // set PA7 e PC7 come output
    3866:	0f 9a       	sbi	0x01, 7	; 1
    3868:	8f e3       	ldi	r24, 0x3F	; 63
    386a:	9c e9       	ldi	r25, 0x9C	; 156
    386c:	01 97       	sbiw	r24, 0x01	; 1
    386e:	f1 f7       	brne	.-4      	; 0x386c <setup+0x126>
    3870:	00 c0       	rjmp	.+0      	; 0x3872 <setup+0x12c>
    3872:	00 00       	nop
  _delay_ms(10);
  SET_BIT(PORTC, RELE1); // Apri RELE1
    3874:	47 9a       	sbi	0x08, 7	; 8
    3876:	8f e3       	ldi	r24, 0x3F	; 63
    3878:	9c e9       	ldi	r25, 0x9C	; 156
    387a:	01 97       	sbiw	r24, 0x01	; 1
    387c:	f1 f7       	brne	.-4      	; 0x387a <setup+0x134>
    387e:	00 c0       	rjmp	.+0      	; 0x3880 <setup+0x13a>
    3880:	00 00       	nop
  _delay_ms(10);
  SET_BIT(PORTA, RELE2); // Apri RELE2
    3882:	17 9a       	sbi	0x02, 7	; 2
  printLine();
    3884:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>

  /***************************LCD******************************/

  lcd.begin(20, 4);        // Inizializza display LCD 20x4 e accendi e spegni 2 volte
    3888:	20 e0       	ldi	r18, 0x00	; 0
    388a:	44 e0       	ldi	r20, 0x04	; 4
    388c:	64 e1       	ldi	r22, 0x14	; 20
    388e:	87 e5       	ldi	r24, 0x57	; 87
    3890:	9b e0       	ldi	r25, 0x0B	; 11
    3892:	0e 94 ac 32 	call	0x6558	; 0x6558 <_ZN17LiquidCrystal_I2C5beginEhhh>

  // ------- 2 blinks -------------
  for (int i = 0; i < 2; i++)
  {
    lcd.backlight();
    3896:	87 e5       	ldi	r24, 0x57	; 87
    3898:	9b e0       	ldi	r25, 0x0B	; 11
    389a:	0e 94 89 30 	call	0x6112	; 0x6112 <_ZN3LCD9backlightEv>
    389e:	9f ef       	ldi	r25, 0xFF	; 255
    38a0:	24 e3       	ldi	r18, 0x34	; 52
    38a2:	8c e0       	ldi	r24, 0x0C	; 12
    38a4:	91 50       	subi	r25, 0x01	; 1
    38a6:	20 40       	sbci	r18, 0x00	; 0
    38a8:	80 40       	sbci	r24, 0x00	; 0
    38aa:	e1 f7       	brne	.-8      	; 0x38a4 <setup+0x15e>
    38ac:	00 c0       	rjmp	.+0      	; 0x38ae <setup+0x168>
    38ae:	00 00       	nop
    _delay_ms(250);
    lcd.noBacklight();
    38b0:	87 e5       	ldi	r24, 0x57	; 87
    38b2:	9b e0       	ldi	r25, 0x0B	; 11
    38b4:	0e 94 91 30 	call	0x6122	; 0x6122 <_ZN3LCD11noBacklightEv>
    38b8:	9f ef       	ldi	r25, 0xFF	; 255
    38ba:	24 e3       	ldi	r18, 0x34	; 52
    38bc:	8c e0       	ldi	r24, 0x0C	; 12
    38be:	91 50       	subi	r25, 0x01	; 1
    38c0:	20 40       	sbci	r18, 0x00	; 0
    38c2:	80 40       	sbci	r24, 0x00	; 0
    38c4:	e1 f7       	brne	.-8      	; 0x38be <setup+0x178>
    38c6:	00 c0       	rjmp	.+0      	; 0x38c8 <setup+0x182>
    38c8:	00 00       	nop
  lcd.begin(20, 4);        // Inizializza display LCD 20x4 e accendi e spegni 2 volte

  // ------- 2 blinks -------------
  for (int i = 0; i < 2; i++)
  {
    lcd.backlight();
    38ca:	87 e5       	ldi	r24, 0x57	; 87
    38cc:	9b e0       	ldi	r25, 0x0B	; 11
    38ce:	0e 94 89 30 	call	0x6112	; 0x6112 <_ZN3LCD9backlightEv>
    38d2:	9f ef       	ldi	r25, 0xFF	; 255
    38d4:	24 e3       	ldi	r18, 0x34	; 52
    38d6:	8c e0       	ldi	r24, 0x0C	; 12
    38d8:	91 50       	subi	r25, 0x01	; 1
    38da:	20 40       	sbci	r18, 0x00	; 0
    38dc:	80 40       	sbci	r24, 0x00	; 0
    38de:	e1 f7       	brne	.-8      	; 0x38d8 <setup+0x192>
    38e0:	00 c0       	rjmp	.+0      	; 0x38e2 <setup+0x19c>
    38e2:	00 00       	nop
    _delay_ms(250);
    lcd.noBacklight();
    38e4:	87 e5       	ldi	r24, 0x57	; 87
    38e6:	9b e0       	ldi	r25, 0x0B	; 11
    38e8:	0e 94 91 30 	call	0x6122	; 0x6122 <_ZN3LCD11noBacklightEv>
    38ec:	9f ef       	ldi	r25, 0xFF	; 255
    38ee:	24 e3       	ldi	r18, 0x34	; 52
    38f0:	8c e0       	ldi	r24, 0x0C	; 12
    38f2:	91 50       	subi	r25, 0x01	; 1
    38f4:	20 40       	sbci	r18, 0x00	; 0
    38f6:	80 40       	sbci	r24, 0x00	; 0
    38f8:	e1 f7       	brne	.-8      	; 0x38f2 <setup+0x1ac>
    38fa:	00 c0       	rjmp	.+0      	; 0x38fc <setup+0x1b6>
    38fc:	00 00       	nop
    _delay_ms(250);
  }

  lcd.createChar(1, Clessidra); // Creo CHAR Clessidra
    38fe:	43 e5       	ldi	r20, 0x53	; 83
    3900:	51 e0       	ldi	r21, 0x01	; 1
    3902:	61 e0       	ldi	r22, 0x01	; 1
    3904:	87 e5       	ldi	r24, 0x57	; 87
    3906:	9b e0       	ldi	r25, 0x0B	; 11
    3908:	0e 94 6f 31 	call	0x62de	; 0x62de <_ZN3LCD10createCharEhPh>
    390c:	9f ef       	ldi	r25, 0xFF	; 255
    390e:	29 ef       	ldi	r18, 0xF9	; 249
    3910:	80 e0       	ldi	r24, 0x00	; 0
    3912:	91 50       	subi	r25, 0x01	; 1
    3914:	20 40       	sbci	r18, 0x00	; 0
    3916:	80 40       	sbci	r24, 0x00	; 0
    3918:	e1 f7       	brne	.-8      	; 0x3912 <setup+0x1cc>
    391a:	00 c0       	rjmp	.+0      	; 0x391c <setup+0x1d6>
    391c:	00 00       	nop
  _delay_ms(20);
  lcd.backlight();
    391e:	87 e5       	ldi	r24, 0x57	; 87
    3920:	9b e0       	ldi	r25, 0x0B	; 11
    3922:	0e 94 89 30 	call	0x6112	; 0x6112 <_ZN3LCD9backlightEv>
    3926:	0f ed       	ldi	r16, 0xDF	; 223
    3928:	1a e0       	ldi	r17, 0x0A	; 10

  for (int r = 0; r < 4; r++)
    righeDisplay[r] = "";
    392a:	6c ee       	ldi	r22, 0xEC	; 236
    392c:	71 e0       	ldi	r23, 0x01	; 1
    392e:	c8 01       	movw	r24, r16
    3930:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringaSEPKc>
    3934:	0a 5f       	subi	r16, 0xFA	; 250
    3936:	1f 4f       	sbci	r17, 0xFF	; 255

  lcd.createChar(1, Clessidra); // Creo CHAR Clessidra
  _delay_ms(20);
  lcd.backlight();

  for (int r = 0; r < 4; r++)
    3938:	9a e0       	ldi	r25, 0x0A	; 10
    393a:	07 3f       	cpi	r16, 0xF7	; 247
    393c:	19 07       	cpc	r17, r25
    393e:	a9 f7       	brne	.-22     	; 0x392a <setup+0x1e4>
    righeDisplay[r] = "";

  printLine();
    3940:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>

  /***************************NFC*************************/

  nfc.begin();
    3944:	80 e4       	ldi	r24, 0x40	; 64
    3946:	9b e0       	ldi	r25, 0x0B	; 11
    3948:	d7 d1       	rcall	.+942    	; 0x3cf8 <_ZN9NFC_PN5325beginEv>
    394a:	2f ef       	ldi	r18, 0xFF	; 255
    394c:	80 e7       	ldi	r24, 0x70	; 112
    394e:	92 e0       	ldi	r25, 0x02	; 2
    3950:	21 50       	subi	r18, 0x01	; 1
    3952:	80 40       	sbci	r24, 0x00	; 0
    3954:	90 40       	sbci	r25, 0x00	; 0
    3956:	e1 f7       	brne	.-8      	; 0x3950 <setup+0x20a>
    3958:	00 c0       	rjmp	.+0      	; 0x395a <setup+0x214>
    395a:	00 00       	nop

  _delay_ms(50);

  uint32_t versiondata = nfc.getFirmwareVersion();
    395c:	80 e4       	ldi	r24, 0x40	; 64
    395e:	9b e0       	ldi	r25, 0x0B	; 11
    3960:	70 d3       	rcall	.+1760   	; 0x4042 <_ZN9NFC_PN53218getFirmwareVersionEv>
    3962:	6b 01       	movw	r12, r22
    3964:	7c 01       	movw	r14, r24
  if (! versiondata) {
    3966:	67 2b       	or	r22, r23
    3968:	68 2b       	or	r22, r24
    396a:	69 2b       	or	r22, r25
    396c:	69 f5       	brne	.+90     	; 0x39c8 <setup+0x282>
    Serial.print("Modulo PN532 non trovato");
    396e:	63 ef       	ldi	r22, 0xF3	; 243
    3970:	78 e0       	ldi	r23, 0x08	; 8
    3972:	8e e1       	ldi	r24, 0x1E	; 30
    3974:	9d e0       	ldi	r25, 0x0D	; 13
    3976:	0e 94 31 39 	call	0x7262	; 0x7262 <_ZN5Print5printEPKc>
    lcd.backlight();
    397a:	87 e5       	ldi	r24, 0x57	; 87
    397c:	9b e0       	ldi	r25, 0x0B	; 11
    397e:	0e 94 89 30 	call	0x6112	; 0x6112 <_ZN3LCD9backlightEv>
    3982:	2f ef       	ldi	r18, 0xFF	; 255
    3984:	84 e3       	ldi	r24, 0x34	; 52
    3986:	9c e0       	ldi	r25, 0x0C	; 12
    3988:	21 50       	subi	r18, 0x01	; 1
    398a:	80 40       	sbci	r24, 0x00	; 0
    398c:	90 40       	sbci	r25, 0x00	; 0
    398e:	e1 f7       	brne	.-8      	; 0x3988 <setup+0x242>
    3990:	00 c0       	rjmp	.+0      	; 0x3992 <setup+0x24c>
    3992:	00 00       	nop
    _delay_ms(250);
    lcd.clear();
    3994:	87 e5       	ldi	r24, 0x57	; 87
    3996:	9b e0       	ldi	r25, 0x0B	; 11
    3998:	0e 94 a1 30 	call	0x6142	; 0x6142 <_ZN3LCD5clearEv>
    lcd.print("Modulo PN532 non trovato ");
    399c:	6c e0       	ldi	r22, 0x0C	; 12
    399e:	79 e0       	ldi	r23, 0x09	; 9
    39a0:	87 e5       	ldi	r24, 0x57	; 87
    39a2:	9b e0       	ldi	r25, 0x0B	; 11
    39a4:	0e 94 31 39 	call	0x7262	; 0x7262 <_ZN5Print5printEPKc>
    39a8:	2f ef       	ldi	r18, 0xFF	; 255
    39aa:	87 ea       	ldi	r24, 0xA7	; 167
    39ac:	91 e6       	ldi	r25, 0x61	; 97
    39ae:	21 50       	subi	r18, 0x01	; 1
    39b0:	80 40       	sbci	r24, 0x00	; 0
    39b2:	90 40       	sbci	r25, 0x00	; 0
    39b4:	e1 f7       	brne	.-8      	; 0x39ae <setup+0x268>
    39b6:	00 c0       	rjmp	.+0      	; 0x39b8 <setup+0x272>
    39b8:	00 00       	nop
    _delay_ms(2000);
    StatoAttuale  = " CHIAMA ASSISTENZA";
    39ba:	66 e2       	ldi	r22, 0x26	; 38
    39bc:	79 e0       	ldi	r23, 0x09	; 9
    39be:	8a e3       	ldi	r24, 0x3A	; 58
    39c0:	9b e0       	ldi	r25, 0x0B	; 11
    39c2:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringaSEPKc>
    39c6:	06 c0       	rjmp	.+12     	; 0x39d4 <setup+0x28e>
    //while (1); // halt  // Aspetta per sempre
  } else {
    Serial.println("Modulo NFC OK ......");
    39c8:	69 e3       	ldi	r22, 0x39	; 57
    39ca:	79 e0       	ldi	r23, 0x09	; 9
    39cc:	8e e1       	ldi	r24, 0x1E	; 30
    39ce:	9d e0       	ldi	r25, 0x0D	; 13
    39d0:	0e 94 5c 39 	call	0x72b8	; 0x72b8 <_ZN5Print7printlnEPKc>
  }

  Serial.print("Found chip PN5"); Serial.println((versiondata >> 24) & 0xFF, HEX);
    39d4:	6e e4       	ldi	r22, 0x4E	; 78
    39d6:	79 e0       	ldi	r23, 0x09	; 9
    39d8:	8e e1       	ldi	r24, 0x1E	; 30
    39da:	9d e0       	ldi	r25, 0x0D	; 13
    39dc:	0e 94 31 39 	call	0x7262	; 0x7262 <_ZN5Print5printEPKc>
    39e0:	4f 2d       	mov	r20, r15
    39e2:	55 27       	eor	r21, r21
    39e4:	66 27       	eor	r22, r22
    39e6:	77 27       	eor	r23, r23
    39e8:	20 e1       	ldi	r18, 0x10	; 16
    39ea:	30 e0       	ldi	r19, 0x00	; 0
    39ec:	8e e1       	ldi	r24, 0x1E	; 30
    39ee:	9d e0       	ldi	r25, 0x0D	; 13
    39f0:	0e 94 ca 39 	call	0x7394	; 0x7394 <_ZN5Print7printlnEmi>
  Serial.print("Firmware ver. "); Serial.print((versiondata >> 16) & 0xFF, DEC);
    39f4:	6d e5       	ldi	r22, 0x5D	; 93
    39f6:	79 e0       	ldi	r23, 0x09	; 9
    39f8:	8e e1       	ldi	r24, 0x1E	; 30
    39fa:	9d e0       	ldi	r25, 0x0D	; 13
    39fc:	0e 94 31 39 	call	0x7262	; 0x7262 <_ZN5Print5printEPKc>
    3a00:	4e 2d       	mov	r20, r14
    3a02:	50 e0       	ldi	r21, 0x00	; 0
    3a04:	60 e0       	ldi	r22, 0x00	; 0
    3a06:	70 e0       	ldi	r23, 0x00	; 0
    3a08:	2a e0       	ldi	r18, 0x0A	; 10
    3a0a:	30 e0       	ldi	r19, 0x00	; 0
    3a0c:	8e e1       	ldi	r24, 0x1E	; 30
    3a0e:	9d e0       	ldi	r25, 0x0D	; 13
    3a10:	0e 94 b3 39 	call	0x7366	; 0x7366 <_ZN5Print5printEmi>
  Serial.print('.'); Serial.println((versiondata >> 8) & 0xFF, DEC);
    3a14:	6e e2       	ldi	r22, 0x2E	; 46
    3a16:	8e e1       	ldi	r24, 0x1E	; 30
    3a18:	9d e0       	ldi	r25, 0x0D	; 13
    3a1a:	0e 94 32 39 	call	0x7264	; 0x7264 <_ZN5Print5printEc>
    3a1e:	4d 2d       	mov	r20, r13
    3a20:	50 e0       	ldi	r21, 0x00	; 0
    3a22:	60 e0       	ldi	r22, 0x00	; 0
    3a24:	70 e0       	ldi	r23, 0x00	; 0
    3a26:	2a e0       	ldi	r18, 0x0A	; 10
    3a28:	30 e0       	ldi	r19, 0x00	; 0
    3a2a:	8e e1       	ldi	r24, 0x1E	; 30
    3a2c:	9d e0       	ldi	r25, 0x0D	; 13
    3a2e:	0e 94 ca 39 	call	0x7394	; 0x7394 <_ZN5Print7printlnEmi>

  nfc.setPassiveActivationRetries(0xFF);
    3a32:	6f ef       	ldi	r22, 0xFF	; 255
    3a34:	80 e4       	ldi	r24, 0x40	; 64
    3a36:	9b e0       	ldi	r25, 0x0B	; 11
    3a38:	7a d3       	rcall	.+1780   	; 0x412e <_ZN9NFC_PN53227setPassiveActivationRetriesEh>
  nfc.SAMConfig();
    3a3a:	80 e4       	ldi	r24, 0x40	; 64
    3a3c:	9b e0       	ldi	r25, 0x0B	; 11
    3a3e:	49 d3       	rcall	.+1682   	; 0x40d2 <_ZN9NFC_PN5329SAMConfigEv>
    3a40:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
  printLine();
    3a44:	40 ea       	ldi	r20, 0xA0	; 160
  
  /*************************** RTC **********************************/
  while (!DS3231M.begin()) {
    3a46:	56 e8       	ldi	r21, 0x86	; 134
    3a48:	61 e0       	ldi	r22, 0x01	; 1
    3a4a:	70 e0       	ldi	r23, 0x00	; 0
    3a4c:	81 ea       	ldi	r24, 0xA1	; 161
    3a4e:	9a e0       	ldi	r25, 0x0A	; 10
    3a50:	8a d6       	rcall	.+3348   	; 0x4766 <_ZN13DS3231M_Class5beginEm>
    3a52:	81 11       	cpse	r24, r1
    3a54:	10 c0       	rjmp	.+32     	; 0x3a76 <setup+0x330>
    3a56:	64 ee       	ldi	r22, 0xE4	; 228
    Serial.println(F("non trovo modulo RTC DS3231MM. Riprovo tra 3s."));
    3a58:	71 e0       	ldi	r23, 0x01	; 1
    3a5a:	8e e1       	ldi	r24, 0x1E	; 30
    3a5c:	9d e0       	ldi	r25, 0x0D	; 13
    3a5e:	0e 94 3c 39 	call	0x7278	; 0x7278 <_ZN5Print7printlnEPK19__FlashStringHelper>
    3a62:	2f ef       	ldi	r18, 0xFF	; 255
    3a64:	83 ed       	ldi	r24, 0xD3	; 211
    3a66:	90 e3       	ldi	r25, 0x30	; 48
    3a68:	21 50       	subi	r18, 0x01	; 1
    3a6a:	80 40       	sbci	r24, 0x00	; 0
    3a6c:	90 40       	sbci	r25, 0x00	; 0
    3a6e:	e1 f7       	brne	.-8      	; 0x3a68 <setup+0x322>
    3a70:	00 c0       	rjmp	.+0      	; 0x3a72 <setup+0x32c>
    3a72:	00 00       	nop
    3a74:	e7 cf       	rjmp	.-50     	; 0x3a44 <setup+0x2fe>
    3a76:	2f ef       	ldi	r18, 0xFF	; 255
    3a78:	80 e7       	ldi	r24, 0x70	; 112
    3a7a:	92 e0       	ldi	r25, 0x02	; 2
    3a7c:	21 50       	subi	r18, 0x01	; 1
    3a7e:	80 40       	sbci	r24, 0x00	; 0
    3a80:	90 40       	sbci	r25, 0x00	; 0
    3a82:	e1 f7       	brne	.-8      	; 0x3a7c <setup+0x336>
    3a84:	00 c0       	rjmp	.+0      	; 0x3a86 <setup+0x340>
    3a86:	00 00       	nop
    3a88:	66 ec       	ldi	r22, 0xC6	; 198
    _delay_ms(1000);
  }
  _delay_ms(50);

  Serial.println(F("RTC chip DS3231M initialized."));
    3a8a:	71 e0       	ldi	r23, 0x01	; 1
    3a8c:	8e e1       	ldi	r24, 0x1E	; 30
    3a8e:	9d e0       	ldi	r25, 0x0D	; 13
    3a90:	0e 94 3c 39 	call	0x7278	; 0x7278 <_ZN5Print7printlnEPK19__FlashStringHelper>
  DS3231M.adjust();
    3a94:	81 ea       	ldi	r24, 0xA1	; 161
    3a96:	9a e0       	ldi	r25, 0x0A	; 10
    3a98:	c4 d7       	rcall	.+3976   	; 0x4a22 <_ZN13DS3231M_Class6adjustEv>
    3a9a:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
  printLine();
    3a9e:	6c e6       	ldi	r22, 0x6C	; 108
  /*************************** POTENZIOMETRI ************************/
  Serial.println("Inizializzo POTENZIOMETRI per livello pulser.......");
    3aa0:	79 e0       	ldi	r23, 0x09	; 9
    3aa2:	8e e1       	ldi	r24, 0x1E	; 30
    3aa4:	9d e0       	ldi	r25, 0x0D	; 13
    3aa6:	0e 94 5c 39 	call	0x72b8	; 0x72b8 <_ZN5Print7printlnEPKc>
    3aaa:	88 ec       	ldi	r24, 0xC8	; 200

  Wire.begin(); // join i2c bus (address optional for master)
    3aac:	9c e0       	ldi	r25, 0x0C	; 12
    3aae:	0e 94 0f 36 	call	0x6c1e	; 0x6c1e <_ZN7TwoWire5beginEv>
    3ab2:	68 e2       	ldi	r22, 0x28	; 40
  Wire.beginTransmission(0x28);  // (0x50) POTENZIOMETRO U11
    3ab4:	70 e0       	ldi	r23, 0x00	; 0
    3ab6:	88 ec       	ldi	r24, 0xC8	; 200
    3ab8:	9c e0       	ldi	r25, 0x0C	; 12
    3aba:	0e 94 2c 36 	call	0x6c58	; 0x6c58 <_ZN7TwoWire17beginTransmissionEi>
    3abe:	60 e0       	ldi	r22, 0x00	; 0
  Wire.write(byte(0x00));        // Wiper Register
    3ac0:	88 ec       	ldi	r24, 0xC8	; 200
    3ac2:	9c e0       	ldi	r25, 0x0C	; 12
    3ac4:	0e 94 d1 35 	call	0x6ba2	; 0x6ba2 <_ZN7TwoWire5writeEh>
    3ac8:	60 e5       	ldi	r22, 0x50	; 80
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    3aca:	88 ec       	ldi	r24, 0xC8	; 200
    3acc:	9c e0       	ldi	r25, 0x0C	; 12
    3ace:	0e 94 d1 35 	call	0x6ba2	; 0x6ba2 <_ZN7TwoWire5writeEh>
    3ad2:	88 ec       	ldi	r24, 0xC8	; 200
  Wire.write(80);              // Valore del potenziomentro
  Wire.endTransmission();
    3ad4:	9c e0       	ldi	r25, 0x0C	; 12
    3ad6:	0e 94 a3 36 	call	0x6d46	; 0x6d46 <_ZN7TwoWire15endTransmissionEv>
    3ada:	2f ef       	ldi	r18, 0xFF	; 255
    3adc:	80 e7       	ldi	r24, 0x70	; 112
    3ade:	92 e0       	ldi	r25, 0x02	; 2
    3ae0:	21 50       	subi	r18, 0x01	; 1
    3ae2:	80 40       	sbci	r24, 0x00	; 0
    3ae4:	90 40       	sbci	r25, 0x00	; 0
    3ae6:	e1 f7       	brne	.-8      	; 0x3ae0 <setup+0x39a>
    3ae8:	00 c0       	rjmp	.+0      	; 0x3aea <setup+0x3a4>
    3aea:	00 00       	nop
    3aec:	62 e5       	ldi	r22, 0x52	; 82

  _delay_ms(50);

  Wire.beginTransmission(0x52);  // (0x52) POTENZIOMETRO U12
    3aee:	70 e0       	ldi	r23, 0x00	; 0
    3af0:	88 ec       	ldi	r24, 0xC8	; 200
    3af2:	9c e0       	ldi	r25, 0x0C	; 12
    3af4:	0e 94 2c 36 	call	0x6c58	; 0x6c58 <_ZN7TwoWire17beginTransmissionEi>
    3af8:	60 e0       	ldi	r22, 0x00	; 0
  Wire.write(byte(0x00));        // Wiper Register
    3afa:	88 ec       	ldi	r24, 0xC8	; 200
    3afc:	9c e0       	ldi	r25, 0x0C	; 12
    3afe:	0e 94 d1 35 	call	0x6ba2	; 0x6ba2 <_ZN7TwoWire5writeEh>
    3b02:	60 e5       	ldi	r22, 0x50	; 80
    3b04:	88 ec       	ldi	r24, 0xC8	; 200
    3b06:	9c e0       	ldi	r25, 0x0C	; 12
    3b08:	0e 94 d1 35 	call	0x6ba2	; 0x6ba2 <_ZN7TwoWire5writeEh>
    3b0c:	88 ec       	ldi	r24, 0xC8	; 200
  Wire.write(80);                // Valore del potenziomentro circa 6 volt
  Wire.endTransmission();
    3b0e:	9c e0       	ldi	r25, 0x0C	; 12
    3b10:	0e 94 a3 36 	call	0x6d46	; 0x6d46 <_ZN7TwoWire15endTransmissionEv>
    3b14:	88 ec       	ldi	r24, 0xC8	; 200
  Wire.end();
    3b16:	9c e0       	ldi	r25, 0x0C	; 12
    3b18:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <_ZN7TwoWire3endEv>
    3b1c:	60 ea       	ldi	r22, 0xA0	; 160
  Serial.println("POTENZIOMETRI OK");
    3b1e:	79 e0       	ldi	r23, 0x09	; 9
    3b20:	8e e1       	ldi	r24, 0x1E	; 30
    3b22:	9d e0       	ldi	r25, 0x0D	; 13
    3b24:	0e 94 5c 39 	call	0x72b8	; 0x72b8 <_ZN5Print7printlnEPKc>
    3b28:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
  printLine();
  /*************************KEYPAD*********************/
  gpio.begin(I2C_PCA9534_ADDR);
    3b2c:	60 e2       	ldi	r22, 0x20	; 32
    3b2e:	80 e8       	ldi	r24, 0x80	; 128
    3b30:	9a e0       	ldi	r25, 0x0A	; 10
    3b32:	36 d0       	rcall	.+108    	; 0x3ba0 <_ZN7PCA95345beginEh>
  // set REG IOexpander OPREG 11000011,INVREG 00000000,CONFREG 00111100
  gpio.setporteIoExp(0xC3, 0x00, 0x3C);
    3b34:	2c e3       	ldi	r18, 0x3C	; 60
    3b36:	40 e0       	ldi	r20, 0x00	; 0
    3b38:	63 ec       	ldi	r22, 0xC3	; 195
    3b3a:	80 e8       	ldi	r24, 0x80	; 128
    3b3c:	9a e0       	ldi	r25, 0x0A	; 10
    3b3e:	36 d0       	rcall	.+108    	; 0x3bac <_ZN7PCA953413setporteIoExpEhhh>
    3b40:	8e ef       	ldi	r24, 0xFE	; 254
  /**************** SETTING INIZIALI ******************/

  stato_procedura = - 2; // set stato di partenza
    3b42:	9f ef       	ldi	r25, 0xFF	; 255
    3b44:	90 93 31 0b 	sts	0x0B31, r25	; 0x800b31 <stato_procedura+0x1>
    3b48:	80 93 30 0b 	sts	0x0B30, r24	; 0x800b30 <stato_procedura>
    3b4c:	61 eb       	ldi	r22, 0xB1	; 177
  StatoAttuale = "Starting ....";
    3b4e:	79 e0       	ldi	r23, 0x09	; 9
    3b50:	8a e3       	ldi	r24, 0x3A	; 58
    3b52:	9b e0       	ldi	r25, 0x0B	; 11
    3b54:	0e 94 76 3c 	call	0x78ec	; 0x78ec <_ZN6StringaSEPKc>
    3b58:	6a e3       	ldi	r22, 0x3A	; 58
  Serial.println(StatoAttuale);
    3b5a:	7b e0       	ldi	r23, 0x0B	; 11
    3b5c:	8e e1       	ldi	r24, 0x1E	; 30
    3b5e:	9d e0       	ldi	r25, 0x0D	; 13
    3b60:	0e 94 4c 39 	call	0x7298	; 0x7298 <_ZN5Print7printlnERK6String>
    3b64:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
  printLine();
    3b68:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
  printLine();
    3b6c:	0e 94 0a 02 	call	0x414	; 0x414 <_Z9printLinev>
  printLine();
    3b70:	ce 01       	movw	r24, r28
  Serial.print("EEPROM utilizzata (byte): ");
  Serial.print(EEPROM.length());
  Serial.println(" ");
  Serial.print("Scrittura Parametri CCEC");

  String app = "";
    3b72:	01 96       	adiw	r24, 0x01	; 1
    3b74:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
    3b78:	26 96       	adiw	r28, 0x06	; 6
  StatoAttuale = "Starting ....";
  Serial.println(StatoAttuale);
  printLine();
  printLine();
  printLine();
}
    3b7a:	0f b6       	in	r0, 0x3f	; 63
    3b7c:	f8 94       	cli
    3b7e:	de bf       	out	0x3e, r29	; 62
    3b80:	0f be       	out	0x3f, r0	; 63
    3b82:	cd bf       	out	0x3d, r28	; 61
    3b84:	df 91       	pop	r29
    3b86:	cf 91       	pop	r28
    3b88:	1f 91       	pop	r17
    3b8a:	0f 91       	pop	r16
    3b8c:	ff 90       	pop	r15
    3b8e:	ef 90       	pop	r14
    3b90:	df 90       	pop	r13
    3b92:	cf 90       	pop	r12
    3b94:	08 95       	ret

00003b96 <_ZN7PCA9534C1Ev>:
    3b96:	fc 01       	movw	r30, r24
	Wire.requestFrom(_i2caddr, 1);
	while (Wire.available()) {
		buff = Wire.read();
	}
	return (buff & (1 << pin)) ? HIGH : LOW;
}
    3b98:	10 82       	st	Z, r1
    3b9a:	11 82       	std	Z+1, r1	; 0x01
    3b9c:	12 82       	std	Z+2, r1	; 0x02
    3b9e:	08 95       	ret

00003ba0 <_ZN7PCA95345beginEh>:
    3ba0:	fc 01       	movw	r30, r24
    3ba2:	60 83       	st	Z, r22
    3ba4:	88 ec       	ldi	r24, 0xC8	; 200
    3ba6:	9c e0       	ldi	r25, 0x0C	; 12
    3ba8:	0c 94 0f 36 	jmp	0x6c1e	; 0x6c1e <_ZN7TwoWire5beginEv>

00003bac <_ZN7PCA953413setporteIoExpEhhh>:
    3bac:	ff 92       	push	r15
    3bae:	0f 93       	push	r16
    3bb0:	1f 93       	push	r17
    3bb2:	cf 93       	push	r28
    3bb4:	df 93       	push	r29
    3bb6:	ec 01       	movw	r28, r24
    3bb8:	f6 2e       	mov	r15, r22
    3bba:	04 2f       	mov	r16, r20
    3bbc:	12 2f       	mov	r17, r18
    3bbe:	68 81       	ld	r22, Y
    3bc0:	88 ec       	ldi	r24, 0xC8	; 200
    3bc2:	9c e0       	ldi	r25, 0x0C	; 12
    3bc4:	0e 94 22 36 	call	0x6c44	; 0x6c44 <_ZN7TwoWire17beginTransmissionEh>
    3bc8:	61 e0       	ldi	r22, 0x01	; 1
    3bca:	88 ec       	ldi	r24, 0xC8	; 200
    3bcc:	9c e0       	ldi	r25, 0x0C	; 12
    3bce:	0e 94 d1 35 	call	0x6ba2	; 0x6ba2 <_ZN7TwoWire5writeEh>
    3bd2:	6f 2d       	mov	r22, r15
    3bd4:	88 ec       	ldi	r24, 0xC8	; 200
    3bd6:	9c e0       	ldi	r25, 0x0C	; 12
    3bd8:	0e 94 d1 35 	call	0x6ba2	; 0x6ba2 <_ZN7TwoWire5writeEh>
    3bdc:	88 ec       	ldi	r24, 0xC8	; 200
    3bde:	9c e0       	ldi	r25, 0x0C	; 12
    3be0:	0e 94 a3 36 	call	0x6d46	; 0x6d46 <_ZN7TwoWire15endTransmissionEv>
    3be4:	68 81       	ld	r22, Y
    3be6:	88 ec       	ldi	r24, 0xC8	; 200
    3be8:	9c e0       	ldi	r25, 0x0C	; 12
    3bea:	0e 94 22 36 	call	0x6c44	; 0x6c44 <_ZN7TwoWire17beginTransmissionEh>
    3bee:	62 e0       	ldi	r22, 0x02	; 2
    3bf0:	88 ec       	ldi	r24, 0xC8	; 200
    3bf2:	9c e0       	ldi	r25, 0x0C	; 12
    3bf4:	0e 94 d1 35 	call	0x6ba2	; 0x6ba2 <_ZN7TwoWire5writeEh>
    3bf8:	60 2f       	mov	r22, r16
    3bfa:	88 ec       	ldi	r24, 0xC8	; 200
    3bfc:	9c e0       	ldi	r25, 0x0C	; 12
    3bfe:	0e 94 d1 35 	call	0x6ba2	; 0x6ba2 <_ZN7TwoWire5writeEh>
    3c02:	88 ec       	ldi	r24, 0xC8	; 200
    3c04:	9c e0       	ldi	r25, 0x0C	; 12
    3c06:	0e 94 a3 36 	call	0x6d46	; 0x6d46 <_ZN7TwoWire15endTransmissionEv>
    3c0a:	8f e3       	ldi	r24, 0x3F	; 63
    3c0c:	9c e9       	ldi	r25, 0x9C	; 156
    3c0e:	01 97       	sbiw	r24, 0x01	; 1
    3c10:	f1 f7       	brne	.-4      	; 0x3c0e <_ZN7PCA953413setporteIoExpEhhh+0x62>
    3c12:	00 c0       	rjmp	.+0      	; 0x3c14 <_ZN7PCA953413setporteIoExpEhhh+0x68>
    3c14:	00 00       	nop
    3c16:	68 81       	ld	r22, Y
    3c18:	88 ec       	ldi	r24, 0xC8	; 200
    3c1a:	9c e0       	ldi	r25, 0x0C	; 12
    3c1c:	0e 94 22 36 	call	0x6c44	; 0x6c44 <_ZN7TwoWire17beginTransmissionEh>
    3c20:	63 e0       	ldi	r22, 0x03	; 3
    3c22:	88 ec       	ldi	r24, 0xC8	; 200
    3c24:	9c e0       	ldi	r25, 0x0C	; 12
    3c26:	0e 94 d1 35 	call	0x6ba2	; 0x6ba2 <_ZN7TwoWire5writeEh>
    3c2a:	61 2f       	mov	r22, r17
    3c2c:	88 ec       	ldi	r24, 0xC8	; 200
    3c2e:	9c e0       	ldi	r25, 0x0C	; 12
    3c30:	0e 94 d1 35 	call	0x6ba2	; 0x6ba2 <_ZN7TwoWire5writeEh>
    3c34:	88 ec       	ldi	r24, 0xC8	; 200
    3c36:	9c e0       	ldi	r25, 0x0C	; 12
    3c38:	0e 94 a3 36 	call	0x6d46	; 0x6d46 <_ZN7TwoWire15endTransmissionEv>
    3c3c:	8f e3       	ldi	r24, 0x3F	; 63
    3c3e:	9c e9       	ldi	r25, 0x9C	; 156
    3c40:	01 97       	sbiw	r24, 0x01	; 1
    3c42:	f1 f7       	brne	.-4      	; 0x3c40 <_ZN7PCA953413setporteIoExpEhhh+0x94>
    3c44:	00 c0       	rjmp	.+0      	; 0x3c46 <_ZN7PCA953413setporteIoExpEhhh+0x9a>
    3c46:	00 00       	nop
    3c48:	df 91       	pop	r29
    3c4a:	cf 91       	pop	r28
    3c4c:	1f 91       	pop	r17
    3c4e:	0f 91       	pop	r16
    3c50:	ff 90       	pop	r15
    3c52:	08 95       	ret

00003c54 <_ZN7PCA953410setCONFREGEh>:
    3c54:	cf 93       	push	r28
    3c56:	c6 2f       	mov	r28, r22
    3c58:	fc 01       	movw	r30, r24
    3c5a:	60 81       	ld	r22, Z
    3c5c:	88 ec       	ldi	r24, 0xC8	; 200
    3c5e:	9c e0       	ldi	r25, 0x0C	; 12
    3c60:	0e 94 22 36 	call	0x6c44	; 0x6c44 <_ZN7TwoWire17beginTransmissionEh>
    3c64:	63 e0       	ldi	r22, 0x03	; 3
    3c66:	88 ec       	ldi	r24, 0xC8	; 200
    3c68:	9c e0       	ldi	r25, 0x0C	; 12
    3c6a:	0e 94 d1 35 	call	0x6ba2	; 0x6ba2 <_ZN7TwoWire5writeEh>
    3c6e:	6c 2f       	mov	r22, r28
    3c70:	88 ec       	ldi	r24, 0xC8	; 200
    3c72:	9c e0       	ldi	r25, 0x0C	; 12
    3c74:	0e 94 d1 35 	call	0x6ba2	; 0x6ba2 <_ZN7TwoWire5writeEh>
    3c78:	88 ec       	ldi	r24, 0xC8	; 200
    3c7a:	9c e0       	ldi	r25, 0x0C	; 12
    3c7c:	cf 91       	pop	r28
    3c7e:	0c 94 a3 36 	jmp	0x6d46	; 0x6d46 <_ZN7TwoWire15endTransmissionEv>

00003c82 <_ZN7PCA953416Read_IP_REGISTEREv>:

uint8_t PCA9534::Read_IP_REGISTER() {
    3c82:	cf 93       	push	r28
    3c84:	df 93       	push	r29
    3c86:	ec 01       	movw	r28, r24
	uint8_t buff = 0;

	//_i2caddr = i2caddr;

	Wire.beginTransmission(_i2caddr);
    3c88:	68 81       	ld	r22, Y
    3c8a:	88 ec       	ldi	r24, 0xC8	; 200
    3c8c:	9c e0       	ldi	r25, 0x0C	; 12
    3c8e:	0e 94 22 36 	call	0x6c44	; 0x6c44 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(PCA9534_IP_REGISTER);
    3c92:	60 e0       	ldi	r22, 0x00	; 0
    3c94:	88 ec       	ldi	r24, 0xC8	; 200
    3c96:	9c e0       	ldi	r25, 0x0C	; 12
    3c98:	0e 94 d1 35 	call	0x6ba2	; 0x6ba2 <_ZN7TwoWire5writeEh>
	// Wire.write(_port);
	Wire.endTransmission();
    3c9c:	88 ec       	ldi	r24, 0xC8	; 200
    3c9e:	9c e0       	ldi	r25, 0x0C	; 12
    3ca0:	0e 94 a3 36 	call	0x6d46	; 0x6d46 <_ZN7TwoWire15endTransmissionEv>

	// We only need to read 1 byte of data to get the pins
	Wire.requestFrom(_i2caddr, 1);
    3ca4:	68 81       	ld	r22, Y
    3ca6:	70 e0       	ldi	r23, 0x00	; 0
    3ca8:	41 e0       	ldi	r20, 0x01	; 1
    3caa:	50 e0       	ldi	r21, 0x00	; 0
    3cac:	88 ec       	ldi	r24, 0xC8	; 200
    3cae:	9c e0       	ldi	r25, 0x0C	; 12
    3cb0:	0e 94 a1 36 	call	0x6d42	; 0x6d42 <_ZN7TwoWire11requestFromEii>
	}
	return (buff & (1 << pin)) ? HIGH : LOW;
}

uint8_t PCA9534::Read_IP_REGISTER() {
	uint8_t buff = 0;
    3cb4:	c0 e0       	ldi	r28, 0x00	; 0
	// Wire.write(_port);
	Wire.endTransmission();

	// We only need to read 1 byte of data to get the pins
	Wire.requestFrom(_i2caddr, 1);
	while (Wire.available()) {
    3cb6:	88 ec       	ldi	r24, 0xC8	; 200
    3cb8:	9c e0       	ldi	r25, 0x0C	; 12
    3cba:	0e 94 43 35 	call	0x6a86	; 0x6a86 <_ZN7TwoWire9availableEv>
    3cbe:	89 2b       	or	r24, r25
    3cc0:	31 f0       	breq	.+12     	; 0x3cce <_ZN7PCA953416Read_IP_REGISTEREv+0x4c>
		buff = Wire.read();
    3cc2:	88 ec       	ldi	r24, 0xC8	; 200
    3cc4:	9c e0       	ldi	r25, 0x0C	; 12
    3cc6:	0e 94 4b 35 	call	0x6a96	; 0x6a96 <_ZN7TwoWire4readEv>
    3cca:	c8 2f       	mov	r28, r24
	// Wire.write(_port);
	Wire.endTransmission();

	// We only need to read 1 byte of data to get the pins
	Wire.requestFrom(_i2caddr, 1);
	while (Wire.available()) {
    3ccc:	f4 cf       	rjmp	.-24     	; 0x3cb6 <_ZN7PCA953416Read_IP_REGISTEREv+0x34>
		buff = Wire.read();
	}
	return buff;
    3cce:	8c 2f       	mov	r24, r28
    3cd0:	df 91       	pop	r29
    3cd2:	cf 91       	pop	r28
    3cd4:	08 95       	ret

00003cd6 <_ZN9NFC_PN532C1Ehh>:
    #endif
    return false;
  }

  return true;
}
    3cd6:	cf 93       	push	r28
    3cd8:	df 93       	push	r29
    3cda:	ec 01       	movw	r28, r24
    3cdc:	86 2f       	mov	r24, r22
    3cde:	6c 83       	std	Y+4, r22	; 0x04
    3ce0:	4d 83       	std	Y+5, r20	; 0x05
    3ce2:	1d 8a       	std	Y+21, r1	; 0x15
    3ce4:	1e 8a       	std	Y+22, r1	; 0x16
    3ce6:	60 e0       	ldi	r22, 0x00	; 0
    3ce8:	0e 94 fd 3a 	call	0x75fa	; 0x75fa <pinMode>
    3cec:	61 e0       	ldi	r22, 0x01	; 1
    3cee:	8d 81       	ldd	r24, Y+5	; 0x05
    3cf0:	df 91       	pop	r29
    3cf2:	cf 91       	pop	r28
    3cf4:	0c 94 fd 3a 	jmp	0x75fa	; 0x75fa <pinMode>

00003cf8 <_ZN9NFC_PN5325beginEv>:
    3cf8:	cf 93       	push	r28
    3cfa:	df 93       	push	r29
    3cfc:	ec 01       	movw	r28, r24
    3cfe:	88 ec       	ldi	r24, 0xC8	; 200
    3d00:	9c e0       	ldi	r25, 0x0C	; 12
    3d02:	0e 94 0f 36 	call	0x6c1e	; 0x6c1e <_ZN7TwoWire5beginEv>
    3d06:	61 e0       	ldi	r22, 0x01	; 1
    3d08:	8d 81       	ldd	r24, Y+5	; 0x05
    3d0a:	0e 94 39 3b 	call	0x7672	; 0x7672 <digitalWrite>
    3d0e:	60 e0       	ldi	r22, 0x00	; 0
    3d10:	8d 81       	ldd	r24, Y+5	; 0x05
    3d12:	0e 94 39 3b 	call	0x7672	; 0x7672 <digitalWrite>
    3d16:	60 e9       	ldi	r22, 0x90	; 144
    3d18:	71 e0       	ldi	r23, 0x01	; 1
    3d1a:	80 e0       	ldi	r24, 0x00	; 0
    3d1c:	90 e0       	ldi	r25, 0x00	; 0
    3d1e:	0e 94 55 3a 	call	0x74aa	; 0x74aa <delay>
    3d22:	61 e0       	ldi	r22, 0x01	; 1
    3d24:	8d 81       	ldd	r24, Y+5	; 0x05
    3d26:	0e 94 39 3b 	call	0x7672	; 0x7672 <digitalWrite>
    3d2a:	6a e0       	ldi	r22, 0x0A	; 10
    3d2c:	70 e0       	ldi	r23, 0x00	; 0
    3d2e:	80 e0       	ldi	r24, 0x00	; 0
    3d30:	90 e0       	ldi	r25, 0x00	; 0
    3d32:	df 91       	pop	r29
    3d34:	cf 91       	pop	r28
    3d36:	0c 94 55 3a 	jmp	0x74aa	; 0x74aa <delay>

00003d3a <_ZN9NFC_PN53210GetHexCodeEPKhm>:
    3d3a:	4f 92       	push	r4
    3d3c:	5f 92       	push	r5
    3d3e:	6f 92       	push	r6
    3d40:	7f 92       	push	r7
    3d42:	8f 92       	push	r8
    3d44:	9f 92       	push	r9
    3d46:	af 92       	push	r10
    3d48:	bf 92       	push	r11
    3d4a:	ef 92       	push	r14
    3d4c:	ff 92       	push	r15
    3d4e:	0f 93       	push	r16
    3d50:	1f 93       	push	r17
    3d52:	cf 93       	push	r28
    3d54:	df 93       	push	r29
    3d56:	cd b7       	in	r28, 0x3d	; 61
    3d58:	de b7       	in	r29, 0x3e	; 62
    3d5a:	2c 97       	sbiw	r28, 0x0c	; 12
    3d5c:	0f b6       	in	r0, 0x3f	; 63
    3d5e:	f8 94       	cli
    3d60:	de bf       	out	0x3e, r29	; 62
    3d62:	0f be       	out	0x3f, r0	; 63
    3d64:	cd bf       	out	0x3d, r28	; 61
    3d66:	7c 01       	movw	r14, r24
    3d68:	5a 01       	movw	r10, r20
    3d6a:	28 01       	movw	r4, r16
    3d6c:	39 01       	movw	r6, r18
    3d6e:	6c ee       	ldi	r22, 0xEC	; 236
    3d70:	71 e0       	ldi	r23, 0x01	; 1
    3d72:	0e 94 f7 3b 	call	0x77ee	; 0x77ee <_ZN6StringC1EPKc>
    3d76:	85 01       	movw	r16, r10
    3d78:	81 2c       	mov	r8, r1
    3d7a:	91 2c       	mov	r9, r1
    3d7c:	54 01       	movw	r10, r8
    3d7e:	84 14       	cp	r8, r4
    3d80:	95 04       	cpc	r9, r5
    3d82:	a6 04       	cpc	r10, r6
    3d84:	b7 04       	cpc	r11, r7
    3d86:	09 f4       	brne	.+2      	; 0x3d8a <_ZN9NFC_PN53210GetHexCodeEPKhm+0x50>
    3d88:	46 c0       	rjmp	.+140    	; 0x3e16 <_ZN9NFC_PN53210GetHexCodeEPKhm+0xdc>
    3d8a:	f8 01       	movw	r30, r16
    3d8c:	61 91       	ld	r22, Z+
    3d8e:	8f 01       	movw	r16, r30
    3d90:	40 e1       	ldi	r20, 0x10	; 16
    3d92:	ce 01       	movw	r24, r28
    3d94:	60 31       	cpi	r22, 0x10	; 16
    3d96:	f0 f4       	brcc	.+60     	; 0x3dd4 <_ZN9NFC_PN53210GetHexCodeEPKhm+0x9a>
    3d98:	01 96       	adiw	r24, 0x01	; 1
    3d9a:	0e 94 a2 3c 	call	0x7944	; 0x7944 <_ZN6StringC1Ehh>
    3d9e:	b7 01       	movw	r22, r14
    3da0:	ce 01       	movw	r24, r28
    3da2:	07 96       	adiw	r24, 0x07	; 7
    3da4:	0e 94 63 3c 	call	0x78c6	; 0x78c6 <_ZN6StringC1ERKS_>
    3da8:	6f e8       	ldi	r22, 0x8F	; 143
    3daa:	78 e0       	ldi	r23, 0x08	; 8
    3dac:	ce 01       	movw	r24, r28
    3dae:	07 96       	adiw	r24, 0x07	; 7
    3db0:	0e 94 dd 3d 	call	0x7bba	; 0x7bba <_ZplRK15StringSumHelperPKc>
    3db4:	be 01       	movw	r22, r28
    3db6:	6f 5f       	subi	r22, 0xFF	; 255
    3db8:	7f 4f       	sbci	r23, 0xFF	; 255
    3dba:	0e 94 cc 3d 	call	0x7b98	; 0x7b98 <_ZplRK15StringSumHelperRK6String>
    3dbe:	bc 01       	movw	r22, r24
    3dc0:	c7 01       	movw	r24, r14
    3dc2:	0e 94 4e 3c 	call	0x789c	; 0x789c <_ZN6StringaSERKS_>
    3dc6:	ce 01       	movw	r24, r28
    3dc8:	07 96       	adiw	r24, 0x07	; 7
    3dca:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
    3dce:	ce 01       	movw	r24, r28
    3dd0:	01 96       	adiw	r24, 0x01	; 1
    3dd2:	19 c0       	rjmp	.+50     	; 0x3e06 <_ZN9NFC_PN53210GetHexCodeEPKhm+0xcc>
    3dd4:	07 96       	adiw	r24, 0x07	; 7
    3dd6:	0e 94 a2 3c 	call	0x7944	; 0x7944 <_ZN6StringC1Ehh>
    3dda:	b7 01       	movw	r22, r14
    3ddc:	ce 01       	movw	r24, r28
    3dde:	01 96       	adiw	r24, 0x01	; 1
    3de0:	0e 94 63 3c 	call	0x78c6	; 0x78c6 <_ZN6StringC1ERKS_>
    3de4:	be 01       	movw	r22, r28
    3de6:	69 5f       	subi	r22, 0xF9	; 249
    3de8:	7f 4f       	sbci	r23, 0xFF	; 255
    3dea:	ce 01       	movw	r24, r28
    3dec:	01 96       	adiw	r24, 0x01	; 1
    3dee:	0e 94 cc 3d 	call	0x7b98	; 0x7b98 <_ZplRK15StringSumHelperRK6String>
    3df2:	bc 01       	movw	r22, r24
    3df4:	c7 01       	movw	r24, r14
    3df6:	0e 94 4e 3c 	call	0x789c	; 0x789c <_ZN6StringaSERKS_>
    3dfa:	ce 01       	movw	r24, r28
    3dfc:	01 96       	adiw	r24, 0x01	; 1
    3dfe:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
    3e02:	ce 01       	movw	r24, r28
    3e04:	07 96       	adiw	r24, 0x07	; 7
    3e06:	0e 94 90 3b 	call	0x7720	; 0x7720 <_ZN6StringD1Ev>
    3e0a:	ff ef       	ldi	r31, 0xFF	; 255
    3e0c:	8f 1a       	sub	r8, r31
    3e0e:	9f 0a       	sbc	r9, r31
    3e10:	af 0a       	sbc	r10, r31
    3e12:	bf 0a       	sbc	r11, r31
    3e14:	b4 cf       	rjmp	.-152    	; 0x3d7e <_ZN9NFC_PN53210GetHexCodeEPKhm+0x44>
    3e16:	8e e1       	ldi	r24, 0x1E	; 30
    3e18:	9d e0       	ldi	r25, 0x0D	; 13
    3e1a:	0e 94 39 39 	call	0x7272	; 0x7272 <_ZN5Print7printlnEv>
    3e1e:	c7 01       	movw	r24, r14
    3e20:	2c 96       	adiw	r28, 0x0c	; 12
    3e22:	0f b6       	in	r0, 0x3f	; 63
    3e24:	f8 94       	cli
    3e26:	de bf       	out	0x3e, r29	; 62
    3e28:	0f be       	out	0x3f, r0	; 63
    3e2a:	cd bf       	out	0x3d, r28	; 61
    3e2c:	df 91       	pop	r29
    3e2e:	cf 91       	pop	r28
    3e30:	1f 91       	pop	r17
    3e32:	0f 91       	pop	r16
    3e34:	ff 90       	pop	r15
    3e36:	ef 90       	pop	r14
    3e38:	bf 90       	pop	r11
    3e3a:	af 90       	pop	r10
    3e3c:	9f 90       	pop	r9
    3e3e:	8f 90       	pop	r8
    3e40:	7f 90       	pop	r7
    3e42:	6f 90       	pop	r6
    3e44:	5f 90       	pop	r5
    3e46:	4f 90       	pop	r4
    3e48:	08 95       	ret

00003e4a <_ZN9NFC_PN5327isreadyEv>:
    3e4a:	fc 01       	movw	r30, r24
    3e4c:	84 81       	ldd	r24, Z+4	; 0x04
    3e4e:	0e 94 67 3b 	call	0x76ce	; 0x76ce <digitalRead>
    3e52:	91 e0       	ldi	r25, 0x01	; 1
    3e54:	81 11       	cpse	r24, r1
    3e56:	90 e0       	ldi	r25, 0x00	; 0
    3e58:	89 2f       	mov	r24, r25
    3e5a:	08 95       	ret

00003e5c <_ZN9NFC_PN5329waitreadyEj>:
    3e5c:	cf 92       	push	r12
    3e5e:	df 92       	push	r13
    3e60:	ef 92       	push	r14
    3e62:	ff 92       	push	r15
    3e64:	1f 93       	push	r17
    3e66:	cf 93       	push	r28
    3e68:	df 93       	push	r29
    3e6a:	6c 01       	movw	r12, r24
    3e6c:	7b 01       	movw	r14, r22
    3e6e:	c0 e0       	ldi	r28, 0x00	; 0
    3e70:	d0 e0       	ldi	r29, 0x00	; 0
    3e72:	c6 01       	movw	r24, r12
    3e74:	ea df       	rcall	.-44     	; 0x3e4a <_ZN9NFC_PN5327isreadyEv>
    3e76:	18 2f       	mov	r17, r24
    3e78:	81 11       	cpse	r24, r1
    3e7a:	15 c0       	rjmp	.+42     	; 0x3ea6 <_ZN9NFC_PN5329waitreadyEj+0x4a>
    3e7c:	e1 14       	cp	r14, r1
    3e7e:	f1 04       	cpc	r15, r1
    3e80:	59 f0       	breq	.+22     	; 0x3e98 <_ZN9NFC_PN5329waitreadyEj+0x3c>
    3e82:	2a 96       	adiw	r28, 0x0a	; 10
    3e84:	ec 16       	cp	r14, r28
    3e86:	fd 06       	cpc	r15, r29
    3e88:	38 f4       	brcc	.+14     	; 0x3e98 <_ZN9NFC_PN5329waitreadyEj+0x3c>
    3e8a:	6f ec       	ldi	r22, 0xCF	; 207
    3e8c:	79 e0       	ldi	r23, 0x09	; 9
    3e8e:	8e e1       	ldi	r24, 0x1E	; 30
    3e90:	9d e0       	ldi	r25, 0x0D	; 13
    3e92:	0e 94 5c 39 	call	0x72b8	; 0x72b8 <_ZN5Print7printlnEPKc>
    3e96:	07 c0       	rjmp	.+14     	; 0x3ea6 <_ZN9NFC_PN5329waitreadyEj+0x4a>
    3e98:	6a e0       	ldi	r22, 0x0A	; 10
    3e9a:	70 e0       	ldi	r23, 0x00	; 0
    3e9c:	80 e0       	ldi	r24, 0x00	; 0
    3e9e:	90 e0       	ldi	r25, 0x00	; 0
    3ea0:	0e 94 55 3a 	call	0x74aa	; 0x74aa <delay>
    3ea4:	e6 cf       	rjmp	.-52     	; 0x3e72 <_ZN9NFC_PN5329waitreadyEj+0x16>
    3ea6:	81 2f       	mov	r24, r17
    3ea8:	df 91       	pop	r29
    3eaa:	cf 91       	pop	r28
    3eac:	1f 91       	pop	r17
    3eae:	ff 90       	pop	r15
    3eb0:	ef 90       	pop	r14
    3eb2:	df 90       	pop	r13
    3eb4:	cf 90       	pop	r12
    3eb6:	08 95       	ret

00003eb8 <_ZN9NFC_PN5328readdataEPhh>:
    3eb8:	ff 92       	push	r15
    3eba:	0f 93       	push	r16
    3ebc:	1f 93       	push	r17
    3ebe:	cf 93       	push	r28
    3ec0:	df 93       	push	r29
    3ec2:	f6 2e       	mov	r15, r22
    3ec4:	07 2f       	mov	r16, r23
    3ec6:	14 2f       	mov	r17, r20
    3ec8:	62 e0       	ldi	r22, 0x02	; 2
    3eca:	70 e0       	ldi	r23, 0x00	; 0
    3ecc:	80 e0       	ldi	r24, 0x00	; 0
    3ece:	90 e0       	ldi	r25, 0x00	; 0
    3ed0:	0e 94 55 3a 	call	0x74aa	; 0x74aa <delay>
    3ed4:	42 e0       	ldi	r20, 0x02	; 2
    3ed6:	41 0f       	add	r20, r17
    3ed8:	64 e2       	ldi	r22, 0x24	; 36
    3eda:	88 ec       	ldi	r24, 0xC8	; 200
    3edc:	9c e0       	ldi	r25, 0x0C	; 12
    3ede:	0e 94 9f 36 	call	0x6d3e	; 0x6d3e <_ZN7TwoWire11requestFromEhh>
    3ee2:	88 ec       	ldi	r24, 0xC8	; 200
    3ee4:	9c e0       	ldi	r25, 0x0C	; 12
    3ee6:	0e 94 4b 35 	call	0x6a96	; 0x6a96 <_ZN7TwoWire4readEv>
    3eea:	cf 2d       	mov	r28, r15
    3eec:	d0 2f       	mov	r29, r16
    3eee:	ce 01       	movw	r24, r28
    3ef0:	81 0f       	add	r24, r17
    3ef2:	91 1d       	adc	r25, r1
    3ef4:	8c 01       	movw	r16, r24
    3ef6:	c0 17       	cp	r28, r16
    3ef8:	d1 07       	cpc	r29, r17
    3efa:	61 f0       	breq	.+24     	; 0x3f14 <_ZN9NFC_PN5328readdataEPhh+0x5c>
    3efc:	61 e0       	ldi	r22, 0x01	; 1
    3efe:	70 e0       	ldi	r23, 0x00	; 0
    3f00:	80 e0       	ldi	r24, 0x00	; 0
    3f02:	90 e0       	ldi	r25, 0x00	; 0
    3f04:	0e 94 55 3a 	call	0x74aa	; 0x74aa <delay>
    3f08:	88 ec       	ldi	r24, 0xC8	; 200
    3f0a:	9c e0       	ldi	r25, 0x0C	; 12
    3f0c:	0e 94 4b 35 	call	0x6a96	; 0x6a96 <_ZN7TwoWire4readEv>
    3f10:	89 93       	st	Y+, r24
    3f12:	f1 cf       	rjmp	.-30     	; 0x3ef6 <_ZN9NFC_PN5328readdataEPhh+0x3e>
    3f14:	df 91       	pop	r29
    3f16:	cf 91       	pop	r28
    3f18:	1f 91       	pop	r17
    3f1a:	0f 91       	pop	r16
    3f1c:	ff 90       	pop	r15
    3f1e:	08 95       	ret

00003f20 <_ZN9NFC_PN5327readackEv>:
    3f20:	cf 93       	push	r28
    3f22:	df 93       	push	r29
    3f24:	00 d0       	rcall	.+0      	; 0x3f26 <_ZN9NFC_PN5327readackEv+0x6>
    3f26:	00 d0       	rcall	.+0      	; 0x3f28 <_ZN9NFC_PN5327readackEv+0x8>
    3f28:	00 d0       	rcall	.+0      	; 0x3f2a <_ZN9NFC_PN5327readackEv+0xa>
    3f2a:	cd b7       	in	r28, 0x3d	; 61
    3f2c:	de b7       	in	r29, 0x3e	; 62
    3f2e:	46 e0       	ldi	r20, 0x06	; 6
    3f30:	be 01       	movw	r22, r28
    3f32:	6f 5f       	subi	r22, 0xFF	; 255
    3f34:	7f 4f       	sbci	r23, 0xFF	; 255
    3f36:	c0 df       	rcall	.-128    	; 0x3eb8 <_ZN9NFC_PN5328readdataEPhh>
    3f38:	46 e0       	ldi	r20, 0x06	; 6
    3f3a:	50 e0       	ldi	r21, 0x00	; 0
    3f3c:	61 e6       	ldi	r22, 0x61	; 97
    3f3e:	71 e0       	ldi	r23, 0x01	; 1
    3f40:	ce 01       	movw	r24, r28
    3f42:	01 96       	adiw	r24, 0x01	; 1
    3f44:	0e 94 a4 42 	call	0x8548	; 0x8548 <strncmp>
    3f48:	21 e0       	ldi	r18, 0x01	; 1
    3f4a:	89 2b       	or	r24, r25
    3f4c:	09 f0       	breq	.+2      	; 0x3f50 <_ZN9NFC_PN5327readackEv+0x30>
    3f4e:	20 e0       	ldi	r18, 0x00	; 0
    3f50:	82 2f       	mov	r24, r18
    3f52:	26 96       	adiw	r28, 0x06	; 6
    3f54:	0f b6       	in	r0, 0x3f	; 63
    3f56:	f8 94       	cli
    3f58:	de bf       	out	0x3e, r29	; 62
    3f5a:	0f be       	out	0x3f, r0	; 63
    3f5c:	cd bf       	out	0x3d, r28	; 61
    3f5e:	df 91       	pop	r29
    3f60:	cf 91       	pop	r28
    3f62:	08 95       	ret

00003f64 <_ZL8i2c_sendh>:
    3f64:	68 2f       	mov	r22, r24
    3f66:	88 ec       	ldi	r24, 0xC8	; 200
    3f68:	9c e0       	ldi	r25, 0x0C	; 12
    3f6a:	0c 94 d1 35 	jmp	0x6ba2	; 0x6ba2 <_ZN7TwoWire5writeEh>

00003f6e <_ZN9NFC_PN53212writecommandEPhh>:
    3f6e:	cf 92       	push	r12
    3f70:	df 92       	push	r13
    3f72:	ef 92       	push	r14
    3f74:	ff 92       	push	r15
    3f76:	0f 93       	push	r16
    3f78:	1f 93       	push	r17
    3f7a:	cf 93       	push	r28
    3f7c:	df 93       	push	r29
    3f7e:	7b 01       	movw	r14, r22
    3f80:	c1 e0       	ldi	r28, 0x01	; 1
    3f82:	c4 0f       	add	r28, r20
    3f84:	62 e0       	ldi	r22, 0x02	; 2
    3f86:	70 e0       	ldi	r23, 0x00	; 0
    3f88:	80 e0       	ldi	r24, 0x00	; 0
    3f8a:	90 e0       	ldi	r25, 0x00	; 0
    3f8c:	0e 94 55 3a 	call	0x74aa	; 0x74aa <delay>
    3f90:	64 e2       	ldi	r22, 0x24	; 36
    3f92:	70 e0       	ldi	r23, 0x00	; 0
    3f94:	88 ec       	ldi	r24, 0xC8	; 200
    3f96:	9c e0       	ldi	r25, 0x0C	; 12
    3f98:	0e 94 2c 36 	call	0x6c58	; 0x6c58 <_ZN7TwoWire17beginTransmissionEi>
    3f9c:	80 e0       	ldi	r24, 0x00	; 0
    3f9e:	e2 df       	rcall	.-60     	; 0x3f64 <_ZL8i2c_sendh>
    3fa0:	80 e0       	ldi	r24, 0x00	; 0
    3fa2:	e0 df       	rcall	.-64     	; 0x3f64 <_ZL8i2c_sendh>
    3fa4:	8f ef       	ldi	r24, 0xFF	; 255
    3fa6:	de df       	rcall	.-68     	; 0x3f64 <_ZL8i2c_sendh>
    3fa8:	8c 2f       	mov	r24, r28
    3faa:	dc df       	rcall	.-72     	; 0x3f64 <_ZL8i2c_sendh>
    3fac:	8c 2f       	mov	r24, r28
    3fae:	81 95       	neg	r24
    3fb0:	d9 df       	rcall	.-78     	; 0x3f64 <_ZL8i2c_sendh>
    3fb2:	84 ed       	ldi	r24, 0xD4	; 212
    3fb4:	d7 df       	rcall	.-82     	; 0x3f64 <_ZL8i2c_sendh>
    3fb6:	c1 2c       	mov	r12, r1
    3fb8:	83 ed       	ldi	r24, 0xD3	; 211
    3fba:	d8 2e       	mov	r13, r24
    3fbc:	d0 e0       	ldi	r29, 0x00	; 0
    3fbe:	21 97       	sbiw	r28, 0x01	; 1
    3fc0:	0c 2d       	mov	r16, r12
    3fc2:	10 e0       	ldi	r17, 0x00	; 0
    3fc4:	0c 17       	cp	r16, r28
    3fc6:	1d 07       	cpc	r17, r29
    3fc8:	54 f4       	brge	.+20     	; 0x3fde <_ZN9NFC_PN53212writecommandEPhh+0x70>
    3fca:	0e 0d       	add	r16, r14
    3fcc:	1f 1d       	adc	r17, r15
    3fce:	f8 01       	movw	r30, r16
    3fd0:	80 81       	ld	r24, Z
    3fd2:	c8 df       	rcall	.-112    	; 0x3f64 <_ZL8i2c_sendh>
    3fd4:	f8 01       	movw	r30, r16
    3fd6:	80 81       	ld	r24, Z
    3fd8:	d8 0e       	add	r13, r24
    3fda:	c3 94       	inc	r12
    3fdc:	f1 cf       	rjmp	.-30     	; 0x3fc0 <_ZN9NFC_PN53212writecommandEPhh+0x52>
    3fde:	8d 2d       	mov	r24, r13
    3fe0:	80 95       	com	r24
    3fe2:	c0 df       	rcall	.-128    	; 0x3f64 <_ZL8i2c_sendh>
    3fe4:	80 e0       	ldi	r24, 0x00	; 0
    3fe6:	be df       	rcall	.-132    	; 0x3f64 <_ZL8i2c_sendh>
    3fe8:	88 ec       	ldi	r24, 0xC8	; 200
    3fea:	9c e0       	ldi	r25, 0x0C	; 12
    3fec:	df 91       	pop	r29
    3fee:	cf 91       	pop	r28
    3ff0:	1f 91       	pop	r17
    3ff2:	0f 91       	pop	r16
    3ff4:	ff 90       	pop	r15
    3ff6:	ef 90       	pop	r14
    3ff8:	df 90       	pop	r13
    3ffa:	cf 90       	pop	r12
    3ffc:	0c 94 a3 36 	jmp	0x6d46	; 0x6d46 <_ZN7TwoWire15endTransmissionEv>

00004000 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>:
    4000:	0f 93       	push	r16
    4002:	1f 93       	push	r17
    4004:	cf 93       	push	r28
    4006:	df 93       	push	r29
    4008:	ec 01       	movw	r28, r24
    400a:	89 01       	movw	r16, r18
    400c:	b0 df       	rcall	.-160    	; 0x3f6e <_ZN9NFC_PN53212writecommandEPhh>
    400e:	b8 01       	movw	r22, r16
    4010:	ce 01       	movw	r24, r28
    4012:	24 df       	rcall	.-440    	; 0x3e5c <_ZN9NFC_PN5329waitreadyEj>
    4014:	81 11       	cpse	r24, r1
    4016:	02 c0       	rjmp	.+4      	; 0x401c <_ZN9NFC_PN53219sendCommandCheckAckEPhhj+0x1c>
    4018:	80 e0       	ldi	r24, 0x00	; 0
    401a:	0e c0       	rjmp	.+28     	; 0x4038 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj+0x38>
    401c:	ce 01       	movw	r24, r28
    401e:	80 df       	rcall	.-256    	; 0x3f20 <_ZN9NFC_PN5327readackEv>
    4020:	88 23       	and	r24, r24
    4022:	d1 f3       	breq	.-12     	; 0x4018 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj+0x18>
    4024:	9d 89       	ldd	r25, Y+21	; 0x15
    4026:	99 23       	and	r25, r25
    4028:	39 f0       	breq	.+14     	; 0x4038 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj+0x38>
    402a:	b8 01       	movw	r22, r16
    402c:	ce 01       	movw	r24, r28
    402e:	df 91       	pop	r29
    4030:	cf 91       	pop	r28
    4032:	1f 91       	pop	r17
    4034:	0f 91       	pop	r16
    4036:	12 cf       	rjmp	.-476    	; 0x3e5c <_ZN9NFC_PN5329waitreadyEj>
    4038:	df 91       	pop	r29
    403a:	cf 91       	pop	r28
    403c:	1f 91       	pop	r17
    403e:	0f 91       	pop	r16
    4040:	08 95       	ret

00004042 <_ZN9NFC_PN53218getFirmwareVersionEv>:
    4042:	cf 93       	push	r28
    4044:	df 93       	push	r29
    4046:	ec 01       	movw	r28, r24
    4048:	82 e0       	ldi	r24, 0x02	; 2
    404a:	80 93 cf 0b 	sts	0x0BCF, r24	; 0x800bcf <pn532_packetbuffer>
    404e:	28 ee       	ldi	r18, 0xE8	; 232
    4050:	33 e0       	ldi	r19, 0x03	; 3
    4052:	41 e0       	ldi	r20, 0x01	; 1
    4054:	6f ec       	ldi	r22, 0xCF	; 207
    4056:	7b e0       	ldi	r23, 0x0B	; 11
    4058:	ce 01       	movw	r24, r28
    405a:	d2 df       	rcall	.-92     	; 0x4000 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    405c:	81 11       	cpse	r24, r1
    405e:	04 c0       	rjmp	.+8      	; 0x4068 <_ZN9NFC_PN53218getFirmwareVersionEv+0x26>
    4060:	60 e0       	ldi	r22, 0x00	; 0
    4062:	70 e0       	ldi	r23, 0x00	; 0
    4064:	cb 01       	movw	r24, r22
    4066:	32 c0       	rjmp	.+100    	; 0x40cc <_ZN9NFC_PN53218getFirmwareVersionEv+0x8a>
    4068:	4c e0       	ldi	r20, 0x0C	; 12
    406a:	6f ec       	ldi	r22, 0xCF	; 207
    406c:	7b e0       	ldi	r23, 0x0B	; 11
    406e:	ce 01       	movw	r24, r28
    4070:	23 df       	rcall	.-442    	; 0x3eb8 <_ZN9NFC_PN5328readdataEPhh>
    4072:	46 e0       	ldi	r20, 0x06	; 6
    4074:	50 e0       	ldi	r21, 0x00	; 0
    4076:	6b e5       	ldi	r22, 0x5B	; 91
    4078:	71 e0       	ldi	r23, 0x01	; 1
    407a:	8f ec       	ldi	r24, 0xCF	; 207
    407c:	9b e0       	ldi	r25, 0x0B	; 11
    407e:	0e 94 a4 42 	call	0x8548	; 0x8548 <strncmp>
    4082:	89 2b       	or	r24, r25
    4084:	69 f7       	brne	.-38     	; 0x4060 <_ZN9NFC_PN53218getFirmwareVersionEv+0x1e>
    4086:	8d 89       	ldd	r24, Y+21	; 0x15
    4088:	81 11       	cpse	r24, r1
    408a:	03 c0       	rjmp	.+6      	; 0x4092 <_ZN9NFC_PN53218getFirmwareVersionEv+0x50>
    408c:	e7 e0       	ldi	r30, 0x07	; 7
    408e:	f0 e0       	ldi	r31, 0x00	; 0
    4090:	02 c0       	rjmp	.+4      	; 0x4096 <_ZN9NFC_PN53218getFirmwareVersionEv+0x54>
    4092:	e6 e0       	ldi	r30, 0x06	; 6
    4094:	f0 e0       	ldi	r31, 0x00	; 0
    4096:	e1 53       	subi	r30, 0x31	; 49
    4098:	f4 4f       	sbci	r31, 0xF4	; 244
    409a:	60 81       	ld	r22, Z
    409c:	86 2f       	mov	r24, r22
    409e:	90 e0       	ldi	r25, 0x00	; 0
    40a0:	a0 e0       	ldi	r26, 0x00	; 0
    40a2:	b0 e0       	ldi	r27, 0x00	; 0
    40a4:	ba 2f       	mov	r27, r26
    40a6:	a9 2f       	mov	r26, r25
    40a8:	98 2f       	mov	r25, r24
    40aa:	88 27       	eor	r24, r24
    40ac:	21 81       	ldd	r18, Z+1	; 0x01
    40ae:	82 2b       	or	r24, r18
    40b0:	ba 2f       	mov	r27, r26
    40b2:	a9 2f       	mov	r26, r25
    40b4:	98 2f       	mov	r25, r24
    40b6:	88 27       	eor	r24, r24
    40b8:	22 81       	ldd	r18, Z+2	; 0x02
    40ba:	82 2b       	or	r24, r18
    40bc:	ba 2f       	mov	r27, r26
    40be:	a9 2f       	mov	r26, r25
    40c0:	98 2f       	mov	r25, r24
    40c2:	88 27       	eor	r24, r24
    40c4:	23 81       	ldd	r18, Z+3	; 0x03
    40c6:	bc 01       	movw	r22, r24
    40c8:	cd 01       	movw	r24, r26
    40ca:	62 2b       	or	r22, r18
    40cc:	df 91       	pop	r29
    40ce:	cf 91       	pop	r28
    40d0:	08 95       	ret

000040d2 <_ZN9NFC_PN5329SAMConfigEv>:
    40d2:	cf 93       	push	r28
    40d4:	df 93       	push	r29
    40d6:	ec 01       	movw	r28, r24
    40d8:	94 e1       	ldi	r25, 0x14	; 20
    40da:	90 93 cf 0b 	sts	0x0BCF, r25	; 0x800bcf <pn532_packetbuffer>
    40de:	81 e0       	ldi	r24, 0x01	; 1
    40e0:	80 93 d0 0b 	sts	0x0BD0, r24	; 0x800bd0 <pn532_packetbuffer+0x1>
    40e4:	90 93 d1 0b 	sts	0x0BD1, r25	; 0x800bd1 <pn532_packetbuffer+0x2>
    40e8:	80 93 d2 0b 	sts	0x0BD2, r24	; 0x800bd2 <pn532_packetbuffer+0x3>
    40ec:	28 ee       	ldi	r18, 0xE8	; 232
    40ee:	33 e0       	ldi	r19, 0x03	; 3
    40f0:	44 e0       	ldi	r20, 0x04	; 4
    40f2:	6f ec       	ldi	r22, 0xCF	; 207
    40f4:	7b e0       	ldi	r23, 0x0B	; 11
    40f6:	ce 01       	movw	r24, r28
    40f8:	83 df       	rcall	.-250    	; 0x4000 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    40fa:	88 23       	and	r24, r24
    40fc:	a9 f0       	breq	.+42     	; 0x4128 <__stack+0x29>
    40fe:	48 e0       	ldi	r20, 0x08	; 8
    4100:	6f ec       	ldi	r22, 0xCF	; 207
    4102:	7b e0       	ldi	r23, 0x0B	; 11
    4104:	ce 01       	movw	r24, r28
    4106:	d8 de       	rcall	.-592    	; 0x3eb8 <_ZN9NFC_PN5328readdataEPhh>
    4108:	8d 89       	ldd	r24, Y+21	; 0x15
    410a:	81 11       	cpse	r24, r1
    410c:	03 c0       	rjmp	.+6      	; 0x4114 <__stack+0x15>
    410e:	86 e0       	ldi	r24, 0x06	; 6
    4110:	90 e0       	ldi	r25, 0x00	; 0
    4112:	02 c0       	rjmp	.+4      	; 0x4118 <__stack+0x19>
    4114:	85 e0       	ldi	r24, 0x05	; 5
    4116:	90 e0       	ldi	r25, 0x00	; 0
    4118:	fc 01       	movw	r30, r24
    411a:	e1 53       	subi	r30, 0x31	; 49
    411c:	f4 4f       	sbci	r31, 0xF4	; 244
    411e:	81 e0       	ldi	r24, 0x01	; 1
    4120:	90 81       	ld	r25, Z
    4122:	95 31       	cpi	r25, 0x15	; 21
    4124:	09 f0       	breq	.+2      	; 0x4128 <__stack+0x29>
    4126:	80 e0       	ldi	r24, 0x00	; 0
    4128:	df 91       	pop	r29
    412a:	cf 91       	pop	r28
    412c:	08 95       	ret

0000412e <_ZN9NFC_PN53227setPassiveActivationRetriesEh>:
    412e:	ef ec       	ldi	r30, 0xCF	; 207
    4130:	fb e0       	ldi	r31, 0x0B	; 11
    4132:	22 e3       	ldi	r18, 0x32	; 50
    4134:	20 83       	st	Z, r18
    4136:	25 e0       	ldi	r18, 0x05	; 5
    4138:	21 83       	std	Z+1, r18	; 0x01
    413a:	2f ef       	ldi	r18, 0xFF	; 255
    413c:	22 83       	std	Z+2, r18	; 0x02
    413e:	21 e0       	ldi	r18, 0x01	; 1
    4140:	23 83       	std	Z+3, r18	; 0x03
    4142:	64 83       	std	Z+4, r22	; 0x04
    4144:	28 ee       	ldi	r18, 0xE8	; 232
    4146:	33 e0       	ldi	r19, 0x03	; 3
    4148:	45 e0       	ldi	r20, 0x05	; 5
    414a:	bf 01       	movw	r22, r30
    414c:	59 cf       	rjmp	.-334    	; 0x4000 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>

0000414e <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j>:
    414e:	af 92       	push	r10
    4150:	bf 92       	push	r11
    4152:	cf 92       	push	r12
    4154:	df 92       	push	r13
    4156:	ef 92       	push	r14
    4158:	ff 92       	push	r15
    415a:	0f 93       	push	r16
    415c:	1f 93       	push	r17
    415e:	cf 93       	push	r28
    4160:	df 93       	push	r29
    4162:	ec 01       	movw	r28, r24
    4164:	7a 01       	movw	r14, r20
    4166:	59 01       	movw	r10, r18
    4168:	68 01       	movw	r12, r16
    416a:	8a e4       	ldi	r24, 0x4A	; 74
    416c:	80 93 cf 0b 	sts	0x0BCF, r24	; 0x800bcf <pn532_packetbuffer>
    4170:	81 e0       	ldi	r24, 0x01	; 1
    4172:	80 93 d0 0b 	sts	0x0BD0, r24	; 0x800bd0 <pn532_packetbuffer+0x1>
    4176:	60 93 d1 0b 	sts	0x0BD1, r22	; 0x800bd1 <pn532_packetbuffer+0x2>
    417a:	98 01       	movw	r18, r16
    417c:	43 e0       	ldi	r20, 0x03	; 3
    417e:	6f ec       	ldi	r22, 0xCF	; 207
    4180:	7b e0       	ldi	r23, 0x0B	; 11
    4182:	ce 01       	movw	r24, r28
    4184:	3d df       	rcall	.-390    	; 0x4000 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    4186:	18 2f       	mov	r17, r24
    4188:	88 23       	and	r24, r24
    418a:	41 f1       	breq	.+80     	; 0x41dc <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x8e>
    418c:	8d 89       	ldd	r24, Y+21	; 0x15
    418e:	88 23       	and	r24, r24
    4190:	79 f0       	breq	.+30     	; 0x41b0 <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x62>
    4192:	44 e1       	ldi	r20, 0x14	; 20
    4194:	6f ec       	ldi	r22, 0xCF	; 207
    4196:	7b e0       	ldi	r23, 0x0B	; 11
    4198:	ce 01       	movw	r24, r28
    419a:	8e de       	rcall	.-740    	; 0x3eb8 <_ZN9NFC_PN5328readdataEPhh>
    419c:	80 91 d6 0b 	lds	r24, 0x0BD6	; 0x800bd6 <pn532_packetbuffer+0x7>
    41a0:	81 30       	cpi	r24, 0x01	; 1
    41a2:	e1 f4       	brne	.+56     	; 0x41dc <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x8e>
    41a4:	80 91 db 0b 	lds	r24, 0x0BDB	; 0x800bdb <pn532_packetbuffer+0xc>
    41a8:	f5 01       	movw	r30, r10
    41aa:	80 83       	st	Z, r24
    41ac:	80 e0       	ldi	r24, 0x00	; 0
    41ae:	06 c0       	rjmp	.+12     	; 0x41bc <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x6e>
    41b0:	b6 01       	movw	r22, r12
    41b2:	ce 01       	movw	r24, r28
    41b4:	53 de       	rcall	.-858    	; 0x3e5c <_ZN9NFC_PN5329waitreadyEj>
    41b6:	81 11       	cpse	r24, r1
    41b8:	ec cf       	rjmp	.-40     	; 0x4192 <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x44>
    41ba:	10 c0       	rjmp	.+32     	; 0x41dc <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x8e>
    41bc:	90 91 db 0b 	lds	r25, 0x0BDB	; 0x800bdb <pn532_packetbuffer+0xc>
    41c0:	89 17       	cp	r24, r25
    41c2:	68 f4       	brcc	.+26     	; 0x41de <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x90>
    41c4:	28 2f       	mov	r18, r24
    41c6:	30 e0       	ldi	r19, 0x00	; 0
    41c8:	f9 01       	movw	r30, r18
    41ca:	e1 53       	subi	r30, 0x31	; 49
    41cc:	f4 4f       	sbci	r31, 0xF4	; 244
    41ce:	95 85       	ldd	r25, Z+13	; 0x0d
    41d0:	f7 01       	movw	r30, r14
    41d2:	e2 0f       	add	r30, r18
    41d4:	f3 1f       	adc	r31, r19
    41d6:	90 83       	st	Z, r25
    41d8:	8f 5f       	subi	r24, 0xFF	; 255
    41da:	f0 cf       	rjmp	.-32     	; 0x41bc <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x6e>
    41dc:	10 e0       	ldi	r17, 0x00	; 0
    41de:	81 2f       	mov	r24, r17
    41e0:	df 91       	pop	r29
    41e2:	cf 91       	pop	r28
    41e4:	1f 91       	pop	r17
    41e6:	0f 91       	pop	r16
    41e8:	ff 90       	pop	r15
    41ea:	ef 90       	pop	r14
    41ec:	df 90       	pop	r13
    41ee:	cf 90       	pop	r12
    41f0:	bf 90       	pop	r11
    41f2:	af 90       	pop	r10
    41f4:	08 95       	ret

000041f6 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_>:

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
uint8_t NFC_PN532::mifareclassic_AuthenticateBlock (uint8_t * uid, uint8_t uidLen, uint32_t blockNumber, uint8_t keyNumber, uint8_t * keyData)
{
    41f6:	af 92       	push	r10
    41f8:	bf 92       	push	r11
    41fa:	cf 92       	push	r12
    41fc:	df 92       	push	r13
    41fe:	ef 92       	push	r14
    4200:	0f 93       	push	r16
    4202:	1f 93       	push	r17
    4204:	cf 93       	push	r28
    4206:	df 93       	push	r29
    4208:	ec 01       	movw	r28, r24
    420a:	14 2f       	mov	r17, r20
  uint8_t len;
  uint8_t i;

  // Hang on to the key and uid data
  memcpy (_key, keyData, 6);
    420c:	5c 01       	movw	r10, r24
    420e:	8e e0       	ldi	r24, 0x0E	; 14
    4210:	a8 0e       	add	r10, r24
    4212:	b1 1c       	adc	r11, r1
    4214:	86 e0       	ldi	r24, 0x06	; 6
    4216:	f6 01       	movw	r30, r12
    4218:	d5 01       	movw	r26, r10
    421a:	01 90       	ld	r0, Z+
    421c:	0d 92       	st	X+, r0
    421e:	8a 95       	dec	r24
    4220:	e1 f7       	brne	.-8      	; 0x421a <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x24>
  memcpy (_uid, uid, uidLen);
    4222:	50 e0       	ldi	r21, 0x00	; 0
    4224:	ce 01       	movw	r24, r28
    4226:	06 96       	adiw	r24, 0x06	; 6
    4228:	0e 94 8b 42 	call	0x8516	; 0x8516 <memcpy>
  _uidLen = uidLen;
    422c:	1d 87       	std	Y+13, r17	; 0x0d
    PN532DEBUGPRINT.print(F("Using authentication KEY "));PN532DEBUGPRINT.print(keyNumber ? 'B' : 'A');PN532DEBUGPRINT.print(F(": "));
    NFC_PN532::PrintHex(_key, 6);
  #endif

  // Prepare the authentication command //
  pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;   /* Data Exchange Header */
    422e:	80 e4       	ldi	r24, 0x40	; 64
    4230:	80 93 cf 0b 	sts	0x0BCF, r24	; 0x800bcf <pn532_packetbuffer>
  pn532_packetbuffer[1] = 1;                              /* Max card numbers */
    4234:	81 e0       	ldi	r24, 0x01	; 1
    4236:	80 93 d0 0b 	sts	0x0BD0, r24	; 0x800bd0 <pn532_packetbuffer+0x1>
  pn532_packetbuffer[2] = (keyNumber) ? MIFARE_CMD_AUTH_B : MIFARE_CMD_AUTH_A;
    423a:	e1 10       	cpse	r14, r1
    423c:	02 c0       	rjmp	.+4      	; 0x4242 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x4c>
    423e:	80 e6       	ldi	r24, 0x60	; 96
    4240:	01 c0       	rjmp	.+2      	; 0x4244 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x4e>
    4242:	81 e6       	ldi	r24, 0x61	; 97
    4244:	80 93 d1 0b 	sts	0x0BD1, r24	; 0x800bd1 <pn532_packetbuffer+0x2>
  pn532_packetbuffer[3] = blockNumber;                    /* Block Number (1K = 0..63, 4K = 0..255 */
    4248:	00 93 d2 0b 	sts	0x0BD2, r16	; 0x800bd2 <pn532_packetbuffer+0x3>
  memcpy (pn532_packetbuffer+4, _key, 6);
    424c:	86 e0       	ldi	r24, 0x06	; 6
    424e:	f5 01       	movw	r30, r10
    4250:	a3 ed       	ldi	r26, 0xD3	; 211
    4252:	bb e0       	ldi	r27, 0x0B	; 11
    4254:	01 90       	ld	r0, Z+
    4256:	0d 92       	st	X+, r0
    4258:	8a 95       	dec	r24
    425a:	e1 f7       	brne	.-8      	; 0x4254 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x5e>
  for (i = 0; i < _uidLen; i++)
    425c:	80 e0       	ldi	r24, 0x00	; 0
    425e:	4d 85       	ldd	r20, Y+13	; 0x0d
    4260:	84 17       	cp	r24, r20
    4262:	60 f4       	brcc	.+24     	; 0x427c <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x86>
  {
    pn532_packetbuffer[10+i] = _uid[i];                /* 4 byte card ID */
    4264:	28 2f       	mov	r18, r24
    4266:	30 e0       	ldi	r19, 0x00	; 0
    4268:	fe 01       	movw	r30, r28
    426a:	e2 0f       	add	r30, r18
    426c:	f3 1f       	adc	r31, r19
    426e:	96 81       	ldd	r25, Z+6	; 0x06
    4270:	f9 01       	movw	r30, r18
    4272:	e1 53       	subi	r30, 0x31	; 49
    4274:	f4 4f       	sbci	r31, 0xF4	; 244
    4276:	92 87       	std	Z+10, r25	; 0x0a
  pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;   /* Data Exchange Header */
  pn532_packetbuffer[1] = 1;                              /* Max card numbers */
  pn532_packetbuffer[2] = (keyNumber) ? MIFARE_CMD_AUTH_B : MIFARE_CMD_AUTH_A;
  pn532_packetbuffer[3] = blockNumber;                    /* Block Number (1K = 0..63, 4K = 0..255 */
  memcpy (pn532_packetbuffer+4, _key, 6);
  for (i = 0; i < _uidLen; i++)
    4278:	8f 5f       	subi	r24, 0xFF	; 255
    427a:	f1 cf       	rjmp	.-30     	; 0x425e <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x68>
  {
    pn532_packetbuffer[10+i] = _uid[i];                /* 4 byte card ID */
  }

  if (! sendCommandCheckAck(pn532_packetbuffer, 10+_uidLen))
    427c:	46 5f       	subi	r20, 0xF6	; 246
    427e:	28 ee       	ldi	r18, 0xE8	; 232
    4280:	33 e0       	ldi	r19, 0x03	; 3
    4282:	6f ec       	ldi	r22, 0xCF	; 207
    4284:	7b e0       	ldi	r23, 0x0B	; 11
    4286:	ce 01       	movw	r24, r28
    4288:	bb de       	rcall	.-650    	; 0x4000 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    428a:	88 23       	and	r24, r24
    428c:	49 f0       	breq	.+18     	; 0x42a0 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0xaa>
    return 0;

  // Read the response packet
  readdata(pn532_packetbuffer, 12);
    428e:	4c e0       	ldi	r20, 0x0C	; 12
    4290:	6f ec       	ldi	r22, 0xCF	; 207
    4292:	7b e0       	ldi	r23, 0x0B	; 11
    4294:	ce 01       	movw	r24, r28
    4296:	10 de       	rcall	.-992    	; 0x3eb8 <_ZN9NFC_PN5328readdataEPhh>
  {
    pn532_packetbuffer[10+i] = _uid[i];                /* 4 byte card ID */
  }

  if (! sendCommandCheckAck(pn532_packetbuffer, 10+_uidLen))
    return 0;
    4298:	81 e0       	ldi	r24, 0x01	; 1
    429a:	90 91 d6 0b 	lds	r25, 0x0BD6	; 0x800bd6 <pn532_packetbuffer+0x7>
    429e:	91 11       	cpse	r25, r1
    42a0:	80 e0       	ldi	r24, 0x00	; 0
    #endif
    return 0;
  }

  return 1;
}
    42a2:	df 91       	pop	r29
    42a4:	cf 91       	pop	r28
    42a6:	1f 91       	pop	r17
    42a8:	0f 91       	pop	r16
    42aa:	ef 90       	pop	r14
    42ac:	df 90       	pop	r13
    42ae:	cf 90       	pop	r12
    42b0:	bf 90       	pop	r11
    42b2:	af 90       	pop	r10
    42b4:	08 95       	ret

000042b6 <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh>:

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
uint8_t NFC_PN532::mifareclassic_ReadDataBlock (uint8_t blockNumber, uint8_t * data)
{
    42b6:	0f 93       	push	r16
    42b8:	1f 93       	push	r17
    42ba:	cf 93       	push	r28
    42bc:	df 93       	push	r29
    42be:	ec 01       	movw	r28, r24
    42c0:	8a 01       	movw	r16, r20
  #ifdef MIFAREDEBUG
    PN532DEBUGPRINT.print(F("Trying to read 16 bytes from block "));PN532DEBUGPRINT.println(blockNumber);
  #endif

  /* Prepare the command */
  pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;
    42c2:	80 e4       	ldi	r24, 0x40	; 64
    42c4:	80 93 cf 0b 	sts	0x0BCF, r24	; 0x800bcf <pn532_packetbuffer>
  pn532_packetbuffer[1] = 1;                      /* Card number */
    42c8:	81 e0       	ldi	r24, 0x01	; 1
    42ca:	80 93 d0 0b 	sts	0x0BD0, r24	; 0x800bd0 <pn532_packetbuffer+0x1>
  pn532_packetbuffer[2] = MIFARE_CMD_READ;        /* Mifare Read command = 0x30 */
    42ce:	80 e3       	ldi	r24, 0x30	; 48
    42d0:	80 93 d1 0b 	sts	0x0BD1, r24	; 0x800bd1 <pn532_packetbuffer+0x2>
  pn532_packetbuffer[3] = blockNumber;            /* Block Number (0..63 for 1K, 0..255 for 4K) */
    42d4:	60 93 d2 0b 	sts	0x0BD2, r22	; 0x800bd2 <pn532_packetbuffer+0x3>

  /* Send the command */
  if (! sendCommandCheckAck(pn532_packetbuffer, 4))
    42d8:	28 ee       	ldi	r18, 0xE8	; 232
    42da:	33 e0       	ldi	r19, 0x03	; 3
    42dc:	44 e0       	ldi	r20, 0x04	; 4
    42de:	6f ec       	ldi	r22, 0xCF	; 207
    42e0:	7b e0       	ldi	r23, 0x0B	; 11
    42e2:	ce 01       	movw	r24, r28
    42e4:	8d de       	rcall	.-742    	; 0x4000 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    42e6:	81 11       	cpse	r24, r1
    42e8:	02 c0       	rjmp	.+4      	; 0x42ee <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh+0x38>
  {
    #ifdef MIFAREDEBUG
      PN532DEBUGPRINT.println(F("Failed to receive ACK for read command"));
    #endif
    return 0;
    42ea:	80 e0       	ldi	r24, 0x00	; 0
    42ec:	12 c0       	rjmp	.+36     	; 0x4312 <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh+0x5c>
  }

  /* Read the response packet */
  readdata(pn532_packetbuffer, 26);
    42ee:	4a e1       	ldi	r20, 0x1A	; 26
    42f0:	6f ec       	ldi	r22, 0xCF	; 207
    42f2:	7b e0       	ldi	r23, 0x0B	; 11
    42f4:	ce 01       	movw	r24, r28
    42f6:	e0 dd       	rcall	.-1088   	; 0x3eb8 <_ZN9NFC_PN5328readdataEPhh>

  /* If byte 8 isn't 0x00 we probably have an error */
  if (pn532_packetbuffer[7] != 0x00)
    42f8:	80 91 d6 0b 	lds	r24, 0x0BD6	; 0x800bd6 <pn532_packetbuffer+0x7>
    42fc:	81 11       	cpse	r24, r1
    42fe:	f5 cf       	rjmp	.-22     	; 0x42ea <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh+0x34>
    return 0;
  }

  /* Copy the 16 data bytes to the output buffer        */
  /* Block content starts at byte 9 of a valid response */
  memcpy (data, pn532_packetbuffer+8, 16);
    4300:	80 e1       	ldi	r24, 0x10	; 16
    4302:	e7 ed       	ldi	r30, 0xD7	; 215
    4304:	fb e0       	ldi	r31, 0x0B	; 11
    4306:	d8 01       	movw	r26, r16
    4308:	01 90       	ld	r0, Z+
    430a:	0d 92       	st	X+, r0
    430c:	8a 95       	dec	r24
    430e:	e1 f7       	brne	.-8      	; 0x4308 <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh+0x52>
    PN532DEBUGPRINT.print(F("Block "));
    PN532DEBUGPRINT.println(blockNumber);
    NFC_PN532::PrintHexChar(data, 16);
  #endif

  return 1;
    4310:	81 e0       	ldi	r24, 0x01	; 1
}
    4312:	df 91       	pop	r29
    4314:	cf 91       	pop	r28
    4316:	1f 91       	pop	r17
    4318:	0f 91       	pop	r16
    431a:	08 95       	ret

0000431c <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh>:

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
uint8_t NFC_PN532::mifareclassic_WriteDataBlock (uint8_t blockNumber, uint8_t * data)
{
    431c:	cf 93       	push	r28
    431e:	df 93       	push	r29
    4320:	ec 01       	movw	r28, r24
  #ifdef MIFAREDEBUG
    PN532DEBUGPRINT.print(F("Trying to write 16 bytes to block "));PN532DEBUGPRINT.println(blockNumber);
  #endif

  /* Prepare the first command */
  pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;
    4322:	80 e4       	ldi	r24, 0x40	; 64
    4324:	80 93 cf 0b 	sts	0x0BCF, r24	; 0x800bcf <pn532_packetbuffer>
  pn532_packetbuffer[1] = 1;                      /* Card number */
    4328:	81 e0       	ldi	r24, 0x01	; 1
    432a:	80 93 d0 0b 	sts	0x0BD0, r24	; 0x800bd0 <pn532_packetbuffer+0x1>
  pn532_packetbuffer[2] = MIFARE_CMD_WRITE;       /* Mifare Write command = 0xA0 */
    432e:	80 ea       	ldi	r24, 0xA0	; 160
    4330:	80 93 d1 0b 	sts	0x0BD1, r24	; 0x800bd1 <pn532_packetbuffer+0x2>
  pn532_packetbuffer[3] = blockNumber;            /* Block Number (0..63 for 1K, 0..255 for 4K) */
    4334:	60 93 d2 0b 	sts	0x0BD2, r22	; 0x800bd2 <pn532_packetbuffer+0x3>
  memcpy (pn532_packetbuffer+4, data, 16);          /* Data Payload */
    4338:	80 e1       	ldi	r24, 0x10	; 16
    433a:	fa 01       	movw	r30, r20
    433c:	a3 ed       	ldi	r26, 0xD3	; 211
    433e:	bb e0       	ldi	r27, 0x0B	; 11
    4340:	01 90       	ld	r0, Z+
    4342:	0d 92       	st	X+, r0
    4344:	8a 95       	dec	r24
    4346:	e1 f7       	brne	.-8      	; 0x4340 <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh+0x24>

  /* Send the command */
  if (! sendCommandCheckAck(pn532_packetbuffer, 20))
    4348:	28 ee       	ldi	r18, 0xE8	; 232
    434a:	33 e0       	ldi	r19, 0x03	; 3
    434c:	44 e1       	ldi	r20, 0x14	; 20
    434e:	6f ec       	ldi	r22, 0xCF	; 207
    4350:	7b e0       	ldi	r23, 0x0B	; 11
    4352:	ce 01       	movw	r24, r28
    4354:	55 de       	rcall	.-854    	; 0x4000 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    4356:	88 23       	and	r24, r24
    4358:	69 f0       	breq	.+26     	; 0x4374 <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh+0x58>
    #endif

    // Return Failed Signal
    return 0;
  }
  delay(10);
    435a:	6a e0       	ldi	r22, 0x0A	; 10
    435c:	70 e0       	ldi	r23, 0x00	; 0
    435e:	80 e0       	ldi	r24, 0x00	; 0
    4360:	90 e0       	ldi	r25, 0x00	; 0
    4362:	0e 94 55 3a 	call	0x74aa	; 0x74aa <delay>

  /* Read the response packet */
  readdata(pn532_packetbuffer, 26);
    4366:	4a e1       	ldi	r20, 0x1A	; 26
    4368:	6f ec       	ldi	r22, 0xCF	; 207
    436a:	7b e0       	ldi	r23, 0x0B	; 11
    436c:	ce 01       	movw	r24, r28
    436e:	a4 dd       	rcall	.-1208   	; 0x3eb8 <_ZN9NFC_PN5328readdataEPhh>
    4370:	81 e0       	ldi	r24, 0x01	; 1
    4372:	01 c0       	rjmp	.+2      	; 0x4376 <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh+0x5a>
  if (! sendCommandCheckAck(pn532_packetbuffer, 20))
  {
    #ifdef MIFAREDEBUG
      PN532DEBUGPRINT.println(F("Failed to receive ACK for write command"));
    #endif
    return 0;
    4374:	80 e0       	ldi	r24, 0x00	; 0

  /* Read the response packet */
  readdata(pn532_packetbuffer, 26);

  return 1;
}
    4376:	df 91       	pop	r29
    4378:	cf 91       	pop	r28
    437a:	08 95       	ret

0000437c <_ZL9date2daysjhh>:
} // of method pinAlarm()                                                     //                                  //
/*******************************************************************************************************************
** Method pinSquareWave() will set the control register flag to make the INT/SQW Pin produce a 1Hz signal         **
*******************************************************************************************************************/
void DS3231M_Class::pinSquareWave() {                                         //                                  //
  writeByte(DS3231M_CONTROL,readByte(DS3231M_CONTROL)|0x4);                   // Set bit 3 to off                 //
    437c:	80 3d       	cpi	r24, 0xD0	; 208
    437e:	27 e0       	ldi	r18, 0x07	; 7
    4380:	92 07       	cpc	r25, r18
    4382:	10 f0       	brcs	.+4      	; 0x4388 <_ZL9date2daysjhh+0xc>
    4384:	80 5d       	subi	r24, 0xD0	; 208
    4386:	97 40       	sbci	r25, 0x07	; 7
    4388:	50 e0       	ldi	r21, 0x00	; 0
    438a:	e8 e2       	ldi	r30, 0x28	; 40
    438c:	f2 e0       	ldi	r31, 0x02	; 2
    438e:	21 e0       	ldi	r18, 0x01	; 1
    4390:	26 17       	cp	r18, r22
    4392:	30 f4       	brcc	.+12     	; 0x43a0 <_ZL9date2daysjhh+0x24>
    4394:	34 91       	lpm	r19, Z
    4396:	43 0f       	add	r20, r19
    4398:	51 1d       	adc	r21, r1
    439a:	2f 5f       	subi	r18, 0xFF	; 255
    439c:	31 96       	adiw	r30, 0x01	; 1
    439e:	f8 cf       	rjmp	.-16     	; 0x4390 <_ZL9date2daysjhh+0x14>
    43a0:	63 30       	cpi	r22, 0x03	; 3
    43a2:	38 f0       	brcs	.+14     	; 0x43b2 <_ZL9date2daysjhh+0x36>
    43a4:	9c 01       	movw	r18, r24
    43a6:	23 70       	andi	r18, 0x03	; 3
    43a8:	33 27       	eor	r19, r19
    43aa:	23 2b       	or	r18, r19
    43ac:	11 f4       	brne	.+4      	; 0x43b2 <_ZL9date2daysjhh+0x36>
    43ae:	4f 5f       	subi	r20, 0xFF	; 255
    43b0:	5f 4f       	sbci	r21, 0xFF	; 255
    43b2:	bc 01       	movw	r22, r24
    43b4:	6d 5f       	subi	r22, 0xFD	; 253
    43b6:	7f 4f       	sbci	r23, 0xFF	; 255
    43b8:	76 95       	lsr	r23
    43ba:	67 95       	ror	r22
    43bc:	76 95       	lsr	r23
    43be:	67 95       	ror	r22
    43c0:	ed e6       	ldi	r30, 0x6D	; 109
    43c2:	f1 e0       	ldi	r31, 0x01	; 1
    43c4:	8e 9f       	mul	r24, r30
    43c6:	90 01       	movw	r18, r0
    43c8:	8f 9f       	mul	r24, r31
    43ca:	30 0d       	add	r19, r0
    43cc:	9e 9f       	mul	r25, r30
    43ce:	30 0d       	add	r19, r0
    43d0:	11 24       	eor	r1, r1
    43d2:	c9 01       	movw	r24, r18
    43d4:	01 97       	sbiw	r24, 0x01	; 1
    43d6:	86 0f       	add	r24, r22
    43d8:	97 1f       	adc	r25, r23
    43da:	84 0f       	add	r24, r20
    43dc:	95 1f       	adc	r25, r21
    43de:	08 95       	ret

000043e0 <_ZL6conv2dPKc>:
    43e0:	fc 01       	movw	r30, r24
    43e2:	90 81       	ld	r25, Z
    43e4:	90 53       	subi	r25, 0x30	; 48
    43e6:	9a 30       	cpi	r25, 0x0A	; 10
    43e8:	08 f0       	brcs	.+2      	; 0x43ec <_ZL6conv2dPKc+0xc>
    43ea:	90 e0       	ldi	r25, 0x00	; 0
    43ec:	81 81       	ldd	r24, Z+1	; 0x01
    43ee:	80 53       	subi	r24, 0x30	; 48
    43f0:	2a e0       	ldi	r18, 0x0A	; 10
    43f2:	92 9f       	mul	r25, r18
    43f4:	80 0d       	add	r24, r0
    43f6:	11 24       	eor	r1, r1
    43f8:	08 95       	ret

000043fa <_ZN8DateTimeC1Em>:
    43fa:	8f 92       	push	r8
    43fc:	9f 92       	push	r9
    43fe:	af 92       	push	r10
    4400:	bf 92       	push	r11
    4402:	cf 92       	push	r12
    4404:	df 92       	push	r13
    4406:	ef 92       	push	r14
    4408:	ff 92       	push	r15
    440a:	cf 93       	push	r28
    440c:	df 93       	push	r29
    440e:	ec 01       	movw	r28, r24
    4410:	6a 01       	movw	r12, r20
    4412:	7b 01       	movw	r14, r22
    4414:	80 e8       	ldi	r24, 0x80	; 128
    4416:	c8 1a       	sub	r12, r24
    4418:	83 e4       	ldi	r24, 0x43	; 67
    441a:	d8 0a       	sbc	r13, r24
    441c:	8d e6       	ldi	r24, 0x6D	; 109
    441e:	e8 0a       	sbc	r14, r24
    4420:	88 e3       	ldi	r24, 0x38	; 56
    4422:	f8 0a       	sbc	r15, r24
    4424:	8c e3       	ldi	r24, 0x3C	; 60
    4426:	88 2e       	mov	r8, r24
    4428:	91 2c       	mov	r9, r1
    442a:	a1 2c       	mov	r10, r1
    442c:	b1 2c       	mov	r11, r1
    442e:	c7 01       	movw	r24, r14
    4430:	b6 01       	movw	r22, r12
    4432:	a5 01       	movw	r20, r10
    4434:	94 01       	movw	r18, r8
    4436:	0e 94 ec 3f 	call	0x7fd8	; 0x7fd8 <__udivmodsi4>
    443a:	6d 83       	std	Y+5, r22	; 0x05
    443c:	ca 01       	movw	r24, r20
    443e:	b9 01       	movw	r22, r18
    4440:	a5 01       	movw	r20, r10
    4442:	94 01       	movw	r18, r8
    4444:	0e 94 ec 3f 	call	0x7fd8	; 0x7fd8 <__udivmodsi4>
    4448:	6c 83       	std	Y+4, r22	; 0x04
    444a:	c7 01       	movw	r24, r14
    444c:	b6 01       	movw	r22, r12
    444e:	20 e1       	ldi	r18, 0x10	; 16
    4450:	3e e0       	ldi	r19, 0x0E	; 14
    4452:	40 e0       	ldi	r20, 0x00	; 0
    4454:	50 e0       	ldi	r21, 0x00	; 0
    4456:	0e 94 ec 3f 	call	0x7fd8	; 0x7fd8 <__udivmodsi4>
    445a:	ca 01       	movw	r24, r20
    445c:	b9 01       	movw	r22, r18
    445e:	28 e1       	ldi	r18, 0x18	; 24
    4460:	30 e0       	ldi	r19, 0x00	; 0
    4462:	40 e0       	ldi	r20, 0x00	; 0
    4464:	50 e0       	ldi	r21, 0x00	; 0
    4466:	0e 94 ec 3f 	call	0x7fd8	; 0x7fd8 <__udivmodsi4>
    446a:	6b 83       	std	Y+3, r22	; 0x03
    446c:	c7 01       	movw	r24, r14
    446e:	b6 01       	movw	r22, r12
    4470:	20 e8       	ldi	r18, 0x80	; 128
    4472:	31 e5       	ldi	r19, 0x51	; 81
    4474:	41 e0       	ldi	r20, 0x01	; 1
    4476:	50 e0       	ldi	r21, 0x00	; 0
    4478:	0e 94 ec 3f 	call	0x7fd8	; 0x7fd8 <__udivmodsi4>
    447c:	18 82       	st	Y, r1
    447e:	88 81       	ld	r24, Y
    4480:	98 2f       	mov	r25, r24
    4482:	93 70       	andi	r25, 0x03	; 3
    4484:	41 e0       	ldi	r20, 0x01	; 1
    4486:	50 e0       	ldi	r21, 0x00	; 0
    4488:	11 f0       	breq	.+4      	; 0x448e <_ZN8DateTimeC1Em+0x94>
    448a:	40 e0       	ldi	r20, 0x00	; 0
    448c:	50 e0       	ldi	r21, 0x00	; 0
    448e:	ba 01       	movw	r22, r20
    4490:	63 59       	subi	r22, 0x93	; 147
    4492:	7e 4f       	sbci	r23, 0xFE	; 254
    4494:	26 17       	cp	r18, r22
    4496:	37 07       	cpc	r19, r23
    4498:	38 f0       	brcs	.+14     	; 0x44a8 <_ZN8DateTimeC1Em+0xae>
    449a:	24 1b       	sub	r18, r20
    449c:	35 0b       	sbc	r19, r21
    449e:	2d 56       	subi	r18, 0x6D	; 109
    44a0:	31 40       	sbci	r19, 0x01	; 1
    44a2:	8f 5f       	subi	r24, 0xFF	; 255
    44a4:	88 83       	st	Y, r24
    44a6:	eb cf       	rjmp	.-42     	; 0x447e <_ZN8DateTimeC1Em+0x84>
    44a8:	81 e0       	ldi	r24, 0x01	; 1
    44aa:	89 83       	std	Y+1, r24	; 0x01
    44ac:	89 81       	ldd	r24, Y+1	; 0x01
    44ae:	e8 2f       	mov	r30, r24
    44b0:	f0 e0       	ldi	r31, 0x00	; 0
    44b2:	e9 5d       	subi	r30, 0xD9	; 217
    44b4:	fd 4f       	sbci	r31, 0xFD	; 253
    44b6:	e4 91       	lpm	r30, Z
    44b8:	91 11       	cpse	r25, r1
    44ba:	03 c0       	rjmp	.+6      	; 0x44c2 <_ZN8DateTimeC1Em+0xc8>
    44bc:	82 30       	cpi	r24, 0x02	; 2
    44be:	09 f4       	brne	.+2      	; 0x44c2 <_ZN8DateTimeC1Em+0xc8>
    44c0:	ef 5f       	subi	r30, 0xFF	; 255
    44c2:	f0 e0       	ldi	r31, 0x00	; 0
    44c4:	2e 17       	cp	r18, r30
    44c6:	3f 07       	cpc	r19, r31
    44c8:	20 f0       	brcs	.+8      	; 0x44d2 <_ZN8DateTimeC1Em+0xd8>
    44ca:	2e 1b       	sub	r18, r30
    44cc:	3f 0b       	sbc	r19, r31
    44ce:	8f 5f       	subi	r24, 0xFF	; 255
    44d0:	ec cf       	rjmp	.-40     	; 0x44aa <_ZN8DateTimeC1Em+0xb0>
    44d2:	2f 5f       	subi	r18, 0xFF	; 255
    44d4:	2a 83       	std	Y+2, r18	; 0x02
    44d6:	df 91       	pop	r29
    44d8:	cf 91       	pop	r28
    44da:	ff 90       	pop	r15
    44dc:	ef 90       	pop	r14
    44de:	df 90       	pop	r13
    44e0:	cf 90       	pop	r12
    44e2:	bf 90       	pop	r11
    44e4:	af 90       	pop	r10
    44e6:	9f 90       	pop	r9
    44e8:	8f 90       	pop	r8
    44ea:	08 95       	ret

000044ec <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>:
    44ec:	ef 92       	push	r14
    44ee:	ff 92       	push	r15
    44f0:	0f 93       	push	r16
    44f2:	1f 93       	push	r17
    44f4:	cf 93       	push	r28
    44f6:	df 93       	push	r29
    44f8:	cd b7       	in	r28, 0x3d	; 61
    44fa:	de b7       	in	r29, 0x3e	; 62
    44fc:	2b 97       	sbiw	r28, 0x0b	; 11
    44fe:	0f b6       	in	r0, 0x3f	; 63
    4500:	f8 94       	cli
    4502:	de bf       	out	0x3e, r29	; 62
    4504:	0f be       	out	0x3f, r0	; 63
    4506:	cd bf       	out	0x3d, r28	; 61
    4508:	8c 01       	movw	r16, r24
    450a:	7a 01       	movw	r14, r20
    450c:	4b e0       	ldi	r20, 0x0B	; 11
    450e:	50 e0       	ldi	r21, 0x00	; 0
    4510:	ce 01       	movw	r24, r28
    4512:	01 96       	adiw	r24, 0x01	; 1
    4514:	0e 94 82 42 	call	0x8504	; 0x8504 <memcpy_P>
    4518:	ce 01       	movw	r24, r28
    451a:	0a 96       	adiw	r24, 0x0a	; 10
    451c:	61 df       	rcall	.-318    	; 0x43e0 <_ZL6conv2dPKc>
    451e:	f8 01       	movw	r30, r16
    4520:	80 83       	st	Z, r24
    4522:	e9 81       	ldd	r30, Y+1	; 0x01
    4524:	8e 2f       	mov	r24, r30
    4526:	90 e0       	ldi	r25, 0x00	; 0
    4528:	fc 01       	movw	r30, r24
    452a:	e1 54       	subi	r30, 0x41	; 65
    452c:	f1 09       	sbc	r31, r1
    452e:	e3 31       	cpi	r30, 0x13	; 19
    4530:	f1 05       	cpc	r31, r1
    4532:	48 f5       	brcc	.+82     	; 0x4586 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
    4534:	ed 5a       	subi	r30, 0xAD	; 173
    4536:	ff 4f       	sbci	r31, 0xFF	; 255
    4538:	0c 94 0e 40 	jmp	0x801c	; 0x801c <__tablejump2__>
    453c:	8a 81       	ldd	r24, Y+2	; 0x02
    453e:	81 36       	cpi	r24, 0x61	; 97
    4540:	29 f0       	breq	.+10     	; 0x454c <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x60>
    4542:	8b 81       	ldd	r24, Y+3	; 0x03
    4544:	8e 36       	cpi	r24, 0x6E	; 110
    4546:	21 f0       	breq	.+8      	; 0x4550 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x64>
    4548:	87 e0       	ldi	r24, 0x07	; 7
    454a:	1b c0       	rjmp	.+54     	; 0x4582 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    454c:	81 e0       	ldi	r24, 0x01	; 1
    454e:	19 c0       	rjmp	.+50     	; 0x4582 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    4550:	86 e0       	ldi	r24, 0x06	; 6
    4552:	17 c0       	rjmp	.+46     	; 0x4582 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    4554:	82 e0       	ldi	r24, 0x02	; 2
    4556:	15 c0       	rjmp	.+42     	; 0x4582 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    4558:	8b 81       	ldd	r24, Y+3	; 0x03
    455a:	82 37       	cpi	r24, 0x72	; 114
    455c:	11 f0       	breq	.+4      	; 0x4562 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x76>
    455e:	88 e0       	ldi	r24, 0x08	; 8
    4560:	10 c0       	rjmp	.+32     	; 0x4582 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    4562:	84 e0       	ldi	r24, 0x04	; 4
    4564:	0e c0       	rjmp	.+28     	; 0x4582 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    4566:	8b 81       	ldd	r24, Y+3	; 0x03
    4568:	82 37       	cpi	r24, 0x72	; 114
    456a:	11 f0       	breq	.+4      	; 0x4570 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x84>
    456c:	85 e0       	ldi	r24, 0x05	; 5
    456e:	09 c0       	rjmp	.+18     	; 0x4582 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    4570:	83 e0       	ldi	r24, 0x03	; 3
    4572:	07 c0       	rjmp	.+14     	; 0x4582 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    4574:	89 e0       	ldi	r24, 0x09	; 9
    4576:	05 c0       	rjmp	.+10     	; 0x4582 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    4578:	8a e0       	ldi	r24, 0x0A	; 10
    457a:	03 c0       	rjmp	.+6      	; 0x4582 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    457c:	8b e0       	ldi	r24, 0x0B	; 11
    457e:	01 c0       	rjmp	.+2      	; 0x4582 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    4580:	8c e0       	ldi	r24, 0x0C	; 12
    4582:	f8 01       	movw	r30, r16
    4584:	81 83       	std	Z+1, r24	; 0x01
    4586:	ce 01       	movw	r24, r28
    4588:	05 96       	adiw	r24, 0x05	; 5
    458a:	2a df       	rcall	.-428    	; 0x43e0 <_ZL6conv2dPKc>
    458c:	f8 01       	movw	r30, r16
    458e:	82 83       	std	Z+2, r24	; 0x02
    4590:	48 e0       	ldi	r20, 0x08	; 8
    4592:	50 e0       	ldi	r21, 0x00	; 0
    4594:	b7 01       	movw	r22, r14
    4596:	ce 01       	movw	r24, r28
    4598:	01 96       	adiw	r24, 0x01	; 1
    459a:	0e 94 82 42 	call	0x8504	; 0x8504 <memcpy_P>
    459e:	ce 01       	movw	r24, r28
    45a0:	01 96       	adiw	r24, 0x01	; 1
    45a2:	1e df       	rcall	.-452    	; 0x43e0 <_ZL6conv2dPKc>
    45a4:	f8 01       	movw	r30, r16
    45a6:	83 83       	std	Z+3, r24	; 0x03
    45a8:	ce 01       	movw	r24, r28
    45aa:	04 96       	adiw	r24, 0x04	; 4
    45ac:	19 df       	rcall	.-462    	; 0x43e0 <_ZL6conv2dPKc>
    45ae:	f8 01       	movw	r30, r16
    45b0:	84 83       	std	Z+4, r24	; 0x04
    45b2:	ce 01       	movw	r24, r28
    45b4:	07 96       	adiw	r24, 0x07	; 7
    45b6:	14 df       	rcall	.-472    	; 0x43e0 <_ZL6conv2dPKc>
    45b8:	f8 01       	movw	r30, r16
    45ba:	85 83       	std	Z+5, r24	; 0x05
    45bc:	2b 96       	adiw	r28, 0x0b	; 11
    45be:	0f b6       	in	r0, 0x3f	; 63
    45c0:	f8 94       	cli
    45c2:	de bf       	out	0x3e, r29	; 62
    45c4:	0f be       	out	0x3f, r0	; 63
    45c6:	cd bf       	out	0x3d, r28	; 61
    45c8:	df 91       	pop	r29
    45ca:	cf 91       	pop	r28
    45cc:	1f 91       	pop	r17
    45ce:	0f 91       	pop	r16
    45d0:	ff 90       	pop	r15
    45d2:	ef 90       	pop	r14
    45d4:	08 95       	ret

000045d6 <_ZNK8DateTime12dayOfTheWeekEv>:
    45d6:	fc 01       	movw	r30, r24
    45d8:	80 81       	ld	r24, Z
    45da:	42 81       	ldd	r20, Z+2	; 0x02
    45dc:	61 81       	ldd	r22, Z+1	; 0x01
    45de:	90 e0       	ldi	r25, 0x00	; 0
    45e0:	cd de       	rcall	.-614    	; 0x437c <_ZL9date2daysjhh>
    45e2:	06 96       	adiw	r24, 0x06	; 6
    45e4:	67 e0       	ldi	r22, 0x07	; 7
    45e6:	70 e0       	ldi	r23, 0x00	; 0
    45e8:	0c 94 d8 3f 	jmp	0x7fb0	; 0x7fb0 <__udivmodhi4>
    45ec:	08 95       	ret

000045ee <_ZNK8DateTime8unixtimeEv>:
    45ee:	ef 92       	push	r14
    45f0:	ff 92       	push	r15
    45f2:	0f 93       	push	r16
    45f4:	1f 93       	push	r17
    45f6:	cf 93       	push	r28
    45f8:	df 93       	push	r29
    45fa:	ec 01       	movw	r28, r24
    45fc:	88 81       	ld	r24, Y
    45fe:	4a 81       	ldd	r20, Y+2	; 0x02
    4600:	69 81       	ldd	r22, Y+1	; 0x01
    4602:	90 e0       	ldi	r25, 0x00	; 0
    4604:	bb de       	rcall	.-650    	; 0x437c <_ZL9date2daysjhh>
    4606:	9c 01       	movw	r18, r24
    4608:	a8 e1       	ldi	r26, 0x18	; 24
    460a:	b0 e0       	ldi	r27, 0x00	; 0
    460c:	0e 94 17 40 	call	0x802e	; 0x802e <__umulhisi3>
    4610:	2b 81       	ldd	r18, Y+3	; 0x03
    4612:	7b 01       	movw	r14, r22
    4614:	8c 01       	movw	r16, r24
    4616:	e2 0e       	add	r14, r18
    4618:	f1 1c       	adc	r15, r1
    461a:	01 1d       	adc	r16, r1
    461c:	11 1d       	adc	r17, r1
    461e:	a8 01       	movw	r20, r16
    4620:	97 01       	movw	r18, r14
    4622:	ac e3       	ldi	r26, 0x3C	; 60
    4624:	b0 e0       	ldi	r27, 0x00	; 0
    4626:	0e 94 26 40 	call	0x804c	; 0x804c <__muluhisi3>
    462a:	2c 81       	ldd	r18, Y+4	; 0x04
    462c:	7b 01       	movw	r14, r22
    462e:	8c 01       	movw	r16, r24
    4630:	e2 0e       	add	r14, r18
    4632:	f1 1c       	adc	r15, r1
    4634:	01 1d       	adc	r16, r1
    4636:	11 1d       	adc	r17, r1
    4638:	a8 01       	movw	r20, r16
    463a:	97 01       	movw	r18, r14
    463c:	0e 94 26 40 	call	0x804c	; 0x804c <__muluhisi3>
    4640:	2d 81       	ldd	r18, Y+5	; 0x05
    4642:	dc 01       	movw	r26, r24
    4644:	cb 01       	movw	r24, r22
    4646:	82 0f       	add	r24, r18
    4648:	91 1d       	adc	r25, r1
    464a:	a1 1d       	adc	r26, r1
    464c:	b1 1d       	adc	r27, r1
    464e:	bc 01       	movw	r22, r24
    4650:	cd 01       	movw	r24, r26
    4652:	60 58       	subi	r22, 0x80	; 128
    4654:	7c 4b       	sbci	r23, 0xBC	; 188
    4656:	82 49       	sbci	r24, 0x92	; 146
    4658:	97 4c       	sbci	r25, 0xC7	; 199
    465a:	df 91       	pop	r29
    465c:	cf 91       	pop	r28
    465e:	1f 91       	pop	r17
    4660:	0f 91       	pop	r16
    4662:	ff 90       	pop	r15
    4664:	ef 90       	pop	r14
    4666:	08 95       	ret

00004668 <_ZNK8DateTime11secondstimeEv>:
    4668:	ef 92       	push	r14
    466a:	ff 92       	push	r15
    466c:	0f 93       	push	r16
    466e:	1f 93       	push	r17
    4670:	cf 93       	push	r28
    4672:	df 93       	push	r29
    4674:	ec 01       	movw	r28, r24
    4676:	88 81       	ld	r24, Y
    4678:	4a 81       	ldd	r20, Y+2	; 0x02
    467a:	69 81       	ldd	r22, Y+1	; 0x01
    467c:	90 e0       	ldi	r25, 0x00	; 0
    467e:	7e de       	rcall	.-772    	; 0x437c <_ZL9date2daysjhh>
    4680:	9c 01       	movw	r18, r24
    4682:	a8 e1       	ldi	r26, 0x18	; 24
    4684:	b0 e0       	ldi	r27, 0x00	; 0
    4686:	0e 94 17 40 	call	0x802e	; 0x802e <__umulhisi3>
    468a:	2b 81       	ldd	r18, Y+3	; 0x03
    468c:	7b 01       	movw	r14, r22
    468e:	8c 01       	movw	r16, r24
    4690:	e2 0e       	add	r14, r18
    4692:	f1 1c       	adc	r15, r1
    4694:	01 1d       	adc	r16, r1
    4696:	11 1d       	adc	r17, r1
    4698:	a8 01       	movw	r20, r16
    469a:	97 01       	movw	r18, r14
    469c:	ac e3       	ldi	r26, 0x3C	; 60
    469e:	b0 e0       	ldi	r27, 0x00	; 0
    46a0:	0e 94 26 40 	call	0x804c	; 0x804c <__muluhisi3>
    46a4:	2c 81       	ldd	r18, Y+4	; 0x04
    46a6:	7b 01       	movw	r14, r22
    46a8:	8c 01       	movw	r16, r24
    46aa:	e2 0e       	add	r14, r18
    46ac:	f1 1c       	adc	r15, r1
    46ae:	01 1d       	adc	r16, r1
    46b0:	11 1d       	adc	r17, r1
    46b2:	a8 01       	movw	r20, r16
    46b4:	97 01       	movw	r18, r14
    46b6:	0e 94 26 40 	call	0x804c	; 0x804c <__muluhisi3>
    46ba:	2d 81       	ldd	r18, Y+5	; 0x05
    46bc:	62 0f       	add	r22, r18
    46be:	71 1d       	adc	r23, r1
    46c0:	81 1d       	adc	r24, r1
    46c2:	91 1d       	adc	r25, r1
    46c4:	df 91       	pop	r29
    46c6:	cf 91       	pop	r28
    46c8:	1f 91       	pop	r17
    46ca:	0f 91       	pop	r16
    46cc:	ff 90       	pop	r15
    46ce:	ef 90       	pop	r14
    46d0:	08 95       	ret

000046d2 <_ZN13DS3231M_ClassC1Ev>:
    46d2:	fc 01       	movw	r30, r24
    46d4:	10 82       	st	Z, r1
    46d6:	11 82       	std	Z+1, r1	; 0x01
    46d8:	12 82       	std	Z+2, r1	; 0x02
    46da:	13 82       	std	Z+3, r1	; 0x03
    46dc:	14 82       	std	Z+4, r1	; 0x04
    46de:	08 95       	ret

000046e0 <_ZN13DS3231M_ClassD1Ev>:
    46e0:	08 95       	ret

000046e2 <_ZN13DS3231M_Class9writeByteEhh>:
    46e2:	0f 93       	push	r16
    46e4:	1f 93       	push	r17
    46e6:	cf 93       	push	r28
    46e8:	df 93       	push	r29
    46ea:	ec 01       	movw	r28, r24
    46ec:	06 2f       	mov	r16, r22
    46ee:	14 2f       	mov	r17, r20
    46f0:	68 e6       	ldi	r22, 0x68	; 104
    46f2:	88 ec       	ldi	r24, 0xC8	; 200
    46f4:	9c e0       	ldi	r25, 0x0C	; 12
    46f6:	0e 94 22 36 	call	0x6c44	; 0x6c44 <_ZN7TwoWire17beginTransmissionEh>
    46fa:	60 2f       	mov	r22, r16
    46fc:	88 ec       	ldi	r24, 0xC8	; 200
    46fe:	9c e0       	ldi	r25, 0x0C	; 12
    4700:	0e 94 d1 35 	call	0x6ba2	; 0x6ba2 <_ZN7TwoWire5writeEh>
    4704:	61 2f       	mov	r22, r17
    4706:	88 ec       	ldi	r24, 0xC8	; 200
    4708:	9c e0       	ldi	r25, 0x0C	; 12
    470a:	0e 94 d1 35 	call	0x6ba2	; 0x6ba2 <_ZN7TwoWire5writeEh>
    470e:	88 ec       	ldi	r24, 0xC8	; 200
    4710:	9c e0       	ldi	r25, 0x0C	; 12
    4712:	0e 94 a3 36 	call	0x6d46	; 0x6d46 <_ZN7TwoWire15endTransmissionEv>
    4716:	88 83       	st	Y, r24
    4718:	df 91       	pop	r29
    471a:	cf 91       	pop	r28
    471c:	1f 91       	pop	r17
    471e:	0f 91       	pop	r16
    4720:	08 95       	ret

00004722 <_ZN13DS3231M_Class8readByteEh>:
    4722:	1f 93       	push	r17
    4724:	cf 93       	push	r28
    4726:	df 93       	push	r29
    4728:	ec 01       	movw	r28, r24
    472a:	16 2f       	mov	r17, r22
    472c:	68 e6       	ldi	r22, 0x68	; 104
    472e:	88 ec       	ldi	r24, 0xC8	; 200
    4730:	9c e0       	ldi	r25, 0x0C	; 12
    4732:	0e 94 22 36 	call	0x6c44	; 0x6c44 <_ZN7TwoWire17beginTransmissionEh>
    4736:	61 2f       	mov	r22, r17
    4738:	88 ec       	ldi	r24, 0xC8	; 200
    473a:	9c e0       	ldi	r25, 0x0C	; 12
    473c:	0e 94 d1 35 	call	0x6ba2	; 0x6ba2 <_ZN7TwoWire5writeEh>
    4740:	88 ec       	ldi	r24, 0xC8	; 200
    4742:	9c e0       	ldi	r25, 0x0C	; 12
    4744:	0e 94 a3 36 	call	0x6d46	; 0x6d46 <_ZN7TwoWire15endTransmissionEv>
    4748:	88 83       	st	Y, r24
    474a:	41 e0       	ldi	r20, 0x01	; 1
    474c:	68 e6       	ldi	r22, 0x68	; 104
    474e:	88 ec       	ldi	r24, 0xC8	; 200
    4750:	9c e0       	ldi	r25, 0x0C	; 12
    4752:	0e 94 9f 36 	call	0x6d3e	; 0x6d3e <_ZN7TwoWire11requestFromEhh>
    4756:	88 ec       	ldi	r24, 0xC8	; 200
    4758:	9c e0       	ldi	r25, 0x0C	; 12
    475a:	0e 94 4b 35 	call	0x6a96	; 0x6a96 <_ZN7TwoWire4readEv>
    475e:	df 91       	pop	r29
    4760:	cf 91       	pop	r28
    4762:	1f 91       	pop	r17
    4764:	08 95       	ret

00004766 <_ZN13DS3231M_Class5beginEm>:
    4766:	cf 92       	push	r12
    4768:	df 92       	push	r13
    476a:	ef 92       	push	r14
    476c:	ff 92       	push	r15
    476e:	cf 93       	push	r28
    4770:	df 93       	push	r29
    4772:	ec 01       	movw	r28, r24
    4774:	6a 01       	movw	r12, r20
    4776:	7b 01       	movw	r14, r22
    4778:	88 ec       	ldi	r24, 0xC8	; 200
    477a:	9c e0       	ldi	r25, 0x0C	; 12
    477c:	0e 94 0f 36 	call	0x6c1e	; 0x6c1e <_ZN7TwoWire5beginEv>
    4780:	b7 01       	movw	r22, r14
    4782:	a6 01       	movw	r20, r12
    4784:	88 ec       	ldi	r24, 0xC8	; 200
    4786:	9c e0       	ldi	r25, 0x0C	; 12
    4788:	0e 94 1f 36 	call	0x6c3e	; 0x6c3e <_ZN7TwoWire8setClockEm>
    478c:	68 e6       	ldi	r22, 0x68	; 104
    478e:	88 ec       	ldi	r24, 0xC8	; 200
    4790:	9c e0       	ldi	r25, 0x0C	; 12
    4792:	0e 94 22 36 	call	0x6c44	; 0x6c44 <_ZN7TwoWire17beginTransmissionEh>
    4796:	88 ec       	ldi	r24, 0xC8	; 200
    4798:	9c e0       	ldi	r25, 0x0C	; 12
    479a:	0e 94 a3 36 	call	0x6d46	; 0x6d46 <_ZN7TwoWire15endTransmissionEv>
    479e:	81 11       	cpse	r24, r1
    47a0:	0a c0       	rjmp	.+20     	; 0x47b6 <_ZN13DS3231M_Class5beginEm+0x50>
    47a2:	62 e0       	ldi	r22, 0x02	; 2
    47a4:	ce 01       	movw	r24, r28
    47a6:	bd df       	rcall	.-134    	; 0x4722 <_ZN13DS3231M_Class8readByteEh>
    47a8:	48 2f       	mov	r20, r24
    47aa:	4f 7b       	andi	r20, 0xBF	; 191
    47ac:	62 e0       	ldi	r22, 0x02	; 2
    47ae:	ce 01       	movw	r24, r28
    47b0:	98 df       	rcall	.-208    	; 0x46e2 <_ZN13DS3231M_Class9writeByteEhh>
    47b2:	81 e0       	ldi	r24, 0x01	; 1
    47b4:	01 c0       	rjmp	.+2      	; 0x47b8 <_ZN13DS3231M_Class5beginEm+0x52>
    47b6:	80 e0       	ldi	r24, 0x00	; 0
    47b8:	df 91       	pop	r29
    47ba:	cf 91       	pop	r28
    47bc:	ff 90       	pop	r15
    47be:	ef 90       	pop	r14
    47c0:	df 90       	pop	r13
    47c2:	cf 90       	pop	r12
    47c4:	08 95       	ret

000047c6 <_ZN13DS3231M_Class3nowEv>:
/*******************************************************************************************************************
** Method now() returns the current date/time                                                                     **
** then the power down time is returned, if the timeType = 2 then the power up time is returned. These options are**
** not documented as the official calls are "getPowerOffDate" and "getPowerOnDate"                                **
*******************************************************************************************************************/
DateTime DS3231M_Class::now(){                                                // Return current date/time         //
    47c6:	0f 93       	push	r16
    47c8:	1f 93       	push	r17
    47ca:	cf 93       	push	r28
    47cc:	df 93       	push	r29
    47ce:	8c 01       	movw	r16, r24
    47d0:	eb 01       	movw	r28, r22
  Wire.beginTransmission(DS3231M_ADDRESS);                                    // Address the I2C device           //
    47d2:	68 e6       	ldi	r22, 0x68	; 104
    47d4:	88 ec       	ldi	r24, 0xC8	; 200
    47d6:	9c e0       	ldi	r25, 0x0C	; 12
    47d8:	0e 94 22 36 	call	0x6c44	; 0x6c44 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(DS3231M_RTCSEC);                                                 // Start at specified register      //
    47dc:	60 e0       	ldi	r22, 0x00	; 0
    47de:	88 ec       	ldi	r24, 0xC8	; 200
    47e0:	9c e0       	ldi	r25, 0x0C	; 12
    47e2:	0e 94 d1 35 	call	0x6ba2	; 0x6ba2 <_ZN7TwoWire5writeEh>
  _TransmissionStatus = Wire.endTransmission();                               // Close transmission               //
    47e6:	88 ec       	ldi	r24, 0xC8	; 200
    47e8:	9c e0       	ldi	r25, 0x0C	; 12
    47ea:	0e 94 a3 36 	call	0x6d46	; 0x6d46 <_ZN7TwoWire15endTransmissionEv>
    47ee:	88 83       	st	Y, r24
  Wire.requestFrom(DS3231M_ADDRESS, (uint8_t)7);                              // Request 7 bytes of data          //
    47f0:	47 e0       	ldi	r20, 0x07	; 7
    47f2:	68 e6       	ldi	r22, 0x68	; 104
    47f4:	88 ec       	ldi	r24, 0xC8	; 200
    47f6:	9c e0       	ldi	r25, 0x0C	; 12
    47f8:	0e 94 9f 36 	call	0x6d3e	; 0x6d3e <_ZN7TwoWire11requestFromEhh>
  if(Wire.available()==7) {                                                   // Wait until the data is ready     //
    47fc:	88 ec       	ldi	r24, 0xC8	; 200
    47fe:	9c e0       	ldi	r25, 0x0C	; 12
    4800:	0e 94 43 35 	call	0x6a86	; 0x6a86 <_ZN7TwoWire9availableEv>
    4804:	07 97       	sbiw	r24, 0x07	; 7
    4806:	09 f0       	breq	.+2      	; 0x480a <_ZN13DS3231M_Class3nowEv+0x44>
    4808:	64 c0       	rjmp	.+200    	; 0x48d2 <_ZN13DS3231M_Class3nowEv+0x10c>
    _ss = bcd2int(Wire.read() & 0x7F);                                        // Mask high bit in seconds         //
    480a:	88 ec       	ldi	r24, 0xC8	; 200
    480c:	9c e0       	ldi	r25, 0x0C	; 12
    480e:	0e 94 4b 35 	call	0x6a96	; 0x6a96 <_ZN7TwoWire4readEv>
    4812:	98 2f       	mov	r25, r24
    4814:	96 95       	lsr	r25
    4816:	96 95       	lsr	r25
    4818:	96 95       	lsr	r25
    481a:	9e 70       	andi	r25, 0x0E	; 14
    481c:	29 2f       	mov	r18, r25
    481e:	22 0f       	add	r18, r18
    4820:	22 0f       	add	r18, r18
    4822:	92 0f       	add	r25, r18
    4824:	8f 70       	andi	r24, 0x0F	; 15
    4826:	89 0f       	add	r24, r25
    4828:	8d 83       	std	Y+5, r24	; 0x05
    _mm = bcd2int(Wire.read() & 0x7F);                                        // Mask high bit in minutes         //
    482a:	88 ec       	ldi	r24, 0xC8	; 200
    482c:	9c e0       	ldi	r25, 0x0C	; 12
    482e:	0e 94 4b 35 	call	0x6a96	; 0x6a96 <_ZN7TwoWire4readEv>
    4832:	98 2f       	mov	r25, r24
    4834:	96 95       	lsr	r25
    4836:	96 95       	lsr	r25
    4838:	96 95       	lsr	r25
    483a:	9e 70       	andi	r25, 0x0E	; 14
    483c:	29 2f       	mov	r18, r25
    483e:	22 0f       	add	r18, r18
    4840:	22 0f       	add	r18, r18
    4842:	92 0f       	add	r25, r18
    4844:	8f 70       	andi	r24, 0x0F	; 15
    4846:	89 0f       	add	r24, r25
    4848:	8e 83       	std	Y+6, r24	; 0x06
    _hh = bcd2int(Wire.read() & 0x7F);                                        // Mask high bit in hours           //
    484a:	88 ec       	ldi	r24, 0xC8	; 200
    484c:	9c e0       	ldi	r25, 0x0C	; 12
    484e:	0e 94 4b 35 	call	0x6a96	; 0x6a96 <_ZN7TwoWire4readEv>
    4852:	98 2f       	mov	r25, r24
    4854:	96 95       	lsr	r25
    4856:	96 95       	lsr	r25
    4858:	96 95       	lsr	r25
    485a:	9e 70       	andi	r25, 0x0E	; 14
    485c:	29 2f       	mov	r18, r25
    485e:	22 0f       	add	r18, r18
    4860:	22 0f       	add	r18, r18
    4862:	92 0f       	add	r25, r18
    4864:	8f 70       	andi	r24, 0x0F	; 15
    4866:	89 0f       	add	r24, r25
    4868:	8f 83       	std	Y+7, r24	; 0x07
    Wire.read();                                                              // Ignore Day-Of-Week register      //
    486a:	88 ec       	ldi	r24, 0xC8	; 200
    486c:	9c e0       	ldi	r25, 0x0C	; 12
    486e:	0e 94 4b 35 	call	0x6a96	; 0x6a96 <_ZN7TwoWire4readEv>
    _d = bcd2int(Wire.read()  & 0x3F);                                        // Mask 2 high bits for day of month//
    4872:	88 ec       	ldi	r24, 0xC8	; 200
    4874:	9c e0       	ldi	r25, 0x0C	; 12
    4876:	0e 94 4b 35 	call	0x6a96	; 0x6a96 <_ZN7TwoWire4readEv>
    487a:	98 2f       	mov	r25, r24
    487c:	96 95       	lsr	r25
    487e:	96 95       	lsr	r25
    4880:	96 95       	lsr	r25
    4882:	96 70       	andi	r25, 0x06	; 6
    4884:	29 2f       	mov	r18, r25
    4886:	22 0f       	add	r18, r18
    4888:	22 0f       	add	r18, r18
    488a:	92 0f       	add	r25, r18
    488c:	8f 70       	andi	r24, 0x0F	; 15
    488e:	89 0f       	add	r24, r25
    4890:	88 87       	std	Y+8, r24	; 0x08
    _m = bcd2int(Wire.read()  & 0x1F);                                        // Mask 3 high bits for Month       //
    4892:	88 ec       	ldi	r24, 0xC8	; 200
    4894:	9c e0       	ldi	r25, 0x0C	; 12
    4896:	0e 94 4b 35 	call	0x6a96	; 0x6a96 <_ZN7TwoWire4readEv>
    489a:	84 fb       	bst	r24, 4
    489c:	99 27       	eor	r25, r25
    489e:	90 f9       	bld	r25, 0
    48a0:	99 0f       	add	r25, r25
    48a2:	29 2f       	mov	r18, r25
    48a4:	22 0f       	add	r18, r18
    48a6:	22 0f       	add	r18, r18
    48a8:	92 0f       	add	r25, r18
    48aa:	8f 70       	andi	r24, 0x0F	; 15
    48ac:	89 0f       	add	r24, r25
    48ae:	89 87       	std	Y+9, r24	; 0x09
    _y = bcd2int(Wire.read()) + 2000;                                         // Add 2000 to internal year        //
    48b0:	88 ec       	ldi	r24, 0xC8	; 200
    48b2:	9c e0       	ldi	r25, 0x0C	; 12
    48b4:	0e 94 4b 35 	call	0x6a96	; 0x6a96 <_ZN7TwoWire4readEv>
    48b8:	98 2f       	mov	r25, r24
    48ba:	92 95       	swap	r25
    48bc:	9f 70       	andi	r25, 0x0F	; 15
    48be:	8f 70       	andi	r24, 0x0F	; 15
    48c0:	2a e0       	ldi	r18, 0x0A	; 10
    48c2:	92 9f       	mul	r25, r18
    48c4:	80 0d       	add	r24, r0
    48c6:	11 24       	eor	r1, r1
    48c8:	90 e0       	ldi	r25, 0x00	; 0
    48ca:	80 53       	subi	r24, 0x30	; 48
    48cc:	98 4f       	sbci	r25, 0xF8	; 248
    48ce:	9b 87       	std	Y+11, r25	; 0x0b
    48d0:	8a 87       	std	Y+10, r24	; 0x0a
  } // of if-then there is data to be read                                    //                                  //
  return DateTime (_y, _m, _d, _hh, _mm, _ss);                                // Return class value               //
    48d2:	2d 81       	ldd	r18, Y+5	; 0x05
    48d4:	3e 81       	ldd	r19, Y+6	; 0x06
    48d6:	4f 81       	ldd	r20, Y+7	; 0x07
    48d8:	58 85       	ldd	r21, Y+8	; 0x08
    48da:	69 85       	ldd	r22, Y+9	; 0x09
    48dc:	8a 85       	ldd	r24, Y+10	; 0x0a
    48de:	9b 85       	ldd	r25, Y+11	; 0x0b
  } // of for-next each month                                                 //                                  //
  d = days + 1;                                                               //                                  //
} // of method DateTime()                                                     //----------------------------------//
DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour,  //                                  //
                    uint8_t min, uint8_t sec) {                               //                                  //
  if (year >= 2000)                                                           //                                  //
    48e0:	80 3d       	cpi	r24, 0xD0	; 208
    48e2:	77 e0       	ldi	r23, 0x07	; 7
    48e4:	97 07       	cpc	r25, r23
    48e6:	10 f0       	brcs	.+4      	; 0x48ec <_ZN13DS3231M_Class3nowEv+0x126>
  year -= 2000;                                                               //                                  //
    48e8:	80 5d       	subi	r24, 0xD0	; 208
    48ea:	97 40       	sbci	r25, 0x07	; 7
  yOff = year;                                                                //                                  //
    48ec:	f8 01       	movw	r30, r16
    48ee:	80 83       	st	Z, r24
  m = month;                                                                  //                                  //
    48f0:	61 83       	std	Z+1, r22	; 0x01
  d = day;                                                                    //                                  //
    48f2:	52 83       	std	Z+2, r21	; 0x02
  hh = hour;                                                                  //                                  //
    48f4:	43 83       	std	Z+3, r20	; 0x03
  mm = min;                                                                   //                                  //
    48f6:	34 83       	std	Z+4, r19	; 0x04
  ss = sec;                                                                   //                                  //
    48f8:	25 83       	std	Z+5, r18	; 0x05
    _d = bcd2int(Wire.read()  & 0x3F);                                        // Mask 2 high bits for day of month//
    _m = bcd2int(Wire.read()  & 0x1F);                                        // Mask 3 high bits for Month       //
    _y = bcd2int(Wire.read()) + 2000;                                         // Add 2000 to internal year        //
  } // of if-then there is data to be read                                    //                                  //
  return DateTime (_y, _m, _d, _hh, _mm, _ss);                                // Return class value               //
} // of method now                                                            //                                  //
    48fa:	c8 01       	movw	r24, r16
    48fc:	df 91       	pop	r29
    48fe:	cf 91       	pop	r28
    4900:	1f 91       	pop	r17
    4902:	0f 91       	pop	r16
    4904:	08 95       	ret

00004906 <_ZN13DS3231M_Class6adjustERK8DateTime>:
** oscillator is stopped during the process and needs to be restarted upon completion.                            **
*******************************************************************************************************************/
void DS3231M_Class::adjust() {                                                // Set the RTC date and Time        //
  adjust(DateTime(F(__DATE__), F(__TIME__)));                                 // Set to compile time              //
} // of method adjust                                                         /-----------------------------------//
void DS3231M_Class::adjust(const DateTime& dt) {                              // Set the RTC date and Time        //
    4906:	df 92       	push	r13
    4908:	ef 92       	push	r14
    490a:	ff 92       	push	r15
    490c:	0f 93       	push	r16
    490e:	1f 93       	push	r17
    4910:	cf 93       	push	r28
    4912:	df 93       	push	r29
    4914:	00 d0       	rcall	.+0      	; 0x4916 <_ZN13DS3231M_Class6adjustERK8DateTime+0x10>
    4916:	00 d0       	rcall	.+0      	; 0x4918 <_ZN13DS3231M_Class6adjustERK8DateTime+0x12>
    4918:	00 d0       	rcall	.+0      	; 0x491a <_ZN13DS3231M_Class6adjustERK8DateTime+0x14>
    491a:	cd b7       	in	r28, 0x3d	; 61
    491c:	de b7       	in	r29, 0x3e	; 62
    491e:	8c 01       	movw	r16, r24
    4920:	7b 01       	movw	r14, r22
    4922:	fb 01       	movw	r30, r22
    4924:	85 81       	ldd	r24, Z+5	; 0x05
  writeByte(DS3231M_RTCSEC,int2bcd(dt.second()));                             // Write seconds, keep device off   //
    4926:	9a e0       	ldi	r25, 0x0A	; 10
    4928:	d9 2e       	mov	r13, r25
    492a:	6d 2d       	mov	r22, r13
    492c:	0e 94 cc 3f 	call	0x7f98	; 0x7f98 <__udivmodqi4>
    4930:	49 2f       	mov	r20, r25
    4932:	f0 e1       	ldi	r31, 0x10	; 16
    4934:	8f 9f       	mul	r24, r31
    4936:	40 0d       	add	r20, r0
    4938:	11 24       	eor	r1, r1
    493a:	60 e0       	ldi	r22, 0x00	; 0
    493c:	c8 01       	movw	r24, r16
    493e:	d1 de       	rcall	.-606    	; 0x46e2 <_ZN13DS3231M_Class9writeByteEhh>
    4940:	f7 01       	movw	r30, r14
    4942:	84 81       	ldd	r24, Z+4	; 0x04
  writeByte(DS3231M_RTCMIN,int2bcd(dt.minute()));                             // Write the minutes value          //
    4944:	6d 2d       	mov	r22, r13
    4946:	0e 94 cc 3f 	call	0x7f98	; 0x7f98 <__udivmodqi4>
    494a:	49 2f       	mov	r20, r25
    494c:	f0 e1       	ldi	r31, 0x10	; 16
    494e:	8f 9f       	mul	r24, r31
    4950:	40 0d       	add	r20, r0
    4952:	11 24       	eor	r1, r1
    4954:	61 e0       	ldi	r22, 0x01	; 1
    4956:	c8 01       	movw	r24, r16
    4958:	c4 de       	rcall	.-632    	; 0x46e2 <_ZN13DS3231M_Class9writeByteEhh>
    495a:	f7 01       	movw	r30, r14
    495c:	83 81       	ldd	r24, Z+3	; 0x03
  writeByte(DS3231M_RTCHOUR,int2bcd(dt.hour()));                              // Also re-sets the 24Hour clock on //
    495e:	6d 2d       	mov	r22, r13
    4960:	0e 94 cc 3f 	call	0x7f98	; 0x7f98 <__udivmodqi4>
    4964:	49 2f       	mov	r20, r25
    4966:	f0 e1       	ldi	r31, 0x10	; 16
    4968:	8f 9f       	mul	r24, r31
    496a:	40 0d       	add	r20, r0
    496c:	11 24       	eor	r1, r1
    496e:	62 e0       	ldi	r22, 0x02	; 2
    4970:	c8 01       	movw	r24, r16
  writeByte(DS3231M_RTCWKDAY,dt.dayOfTheWeek());                              // Update the weekday               //
    4972:	b7 de       	rcall	.-658    	; 0x46e2 <_ZN13DS3231M_Class9writeByteEhh>
    4974:	c7 01       	movw	r24, r14
    4976:	2f de       	rcall	.-930    	; 0x45d6 <_ZNK8DateTime12dayOfTheWeekEv>
    4978:	48 2f       	mov	r20, r24
    497a:	63 e0       	ldi	r22, 0x03	; 3
    497c:	c8 01       	movw	r24, r16
    497e:	b1 de       	rcall	.-670    	; 0x46e2 <_ZN13DS3231M_Class9writeByteEhh>
    4980:	f7 01       	movw	r30, r14
    4982:	82 81       	ldd	r24, Z+2	; 0x02
  writeByte(DS3231M_RTCDATE,int2bcd(dt.day()));                               // Write the day of month           //
    4984:	6d 2d       	mov	r22, r13
    4986:	0e 94 cc 3f 	call	0x7f98	; 0x7f98 <__udivmodqi4>
    498a:	49 2f       	mov	r20, r25
    498c:	f0 e1       	ldi	r31, 0x10	; 16
    498e:	8f 9f       	mul	r24, r31
    4990:	40 0d       	add	r20, r0
    4992:	11 24       	eor	r1, r1
    4994:	64 e0       	ldi	r22, 0x04	; 4
    4996:	c8 01       	movw	r24, r16
    4998:	a4 de       	rcall	.-696    	; 0x46e2 <_ZN13DS3231M_Class9writeByteEhh>
    499a:	f7 01       	movw	r30, r14
    499c:	81 81       	ldd	r24, Z+1	; 0x01
  writeByte(DS3231M_RTCMTH,int2bcd(dt.month()));                              // Month, ignore century bit        //
    499e:	6d 2d       	mov	r22, r13
    49a0:	0e 94 cc 3f 	call	0x7f98	; 0x7f98 <__udivmodqi4>
    49a4:	49 2f       	mov	r20, r25
    49a6:	f0 e1       	ldi	r31, 0x10	; 16
    49a8:	8f 9f       	mul	r24, r31
    49aa:	40 0d       	add	r20, r0
    49ac:	11 24       	eor	r1, r1
    49ae:	65 e0       	ldi	r22, 0x05	; 5
    49b0:	c8 01       	movw	r24, r16
    49b2:	97 de       	rcall	.-722    	; 0x46e2 <_ZN13DS3231M_Class9writeByteEhh>
  writeByte(DS3231M_RTCYEAR,int2bcd(dt.year()-2000));                         // Write the year                   //
    49b4:	f7 01       	movw	r30, r14
    49b6:	80 81       	ld	r24, Z
    49b8:	6d 2d       	mov	r22, r13
    49ba:	0e 94 cc 3f 	call	0x7f98	; 0x7f98 <__udivmodqi4>
    49be:	49 2f       	mov	r20, r25
    49c0:	f0 e1       	ldi	r31, 0x10	; 16
    49c2:	8f 9f       	mul	r24, r31
    49c4:	40 0d       	add	r20, r0
    49c6:	11 24       	eor	r1, r1
    49c8:	66 e0       	ldi	r22, 0x06	; 6
    49ca:	c8 01       	movw	r24, r16
  writeByte(DS3231M_STATUS,readByte(DS3231M_STATUS)&B01111111);               // Unset OSC flag bit if set        //
    49cc:	8a de       	rcall	.-748    	; 0x46e2 <_ZN13DS3231M_Class9writeByteEhh>
    49ce:	6f e0       	ldi	r22, 0x0F	; 15
    49d0:	c8 01       	movw	r24, r16
    49d2:	a7 de       	rcall	.-690    	; 0x4722 <_ZN13DS3231M_Class8readByteEh>
    49d4:	48 2f       	mov	r20, r24
    49d6:	4f 77       	andi	r20, 0x7F	; 127
    49d8:	6f e0       	ldi	r22, 0x0F	; 15
    49da:	c8 01       	movw	r24, r16
  writeByte(DS3231M_CONTROL,readByte(DS3231M_CONTROL)&B01111111);             // Unset EOSC flag bit if set       //
    49dc:	82 de       	rcall	.-764    	; 0x46e2 <_ZN13DS3231M_Class9writeByteEhh>
    49de:	6e e0       	ldi	r22, 0x0E	; 14
    49e0:	c8 01       	movw	r24, r16
    49e2:	9f de       	rcall	.-706    	; 0x4722 <_ZN13DS3231M_Class8readByteEh>
    49e4:	48 2f       	mov	r20, r24
    49e6:	4f 77       	andi	r20, 0x7F	; 127
    49e8:	6e e0       	ldi	r22, 0x0E	; 14
    49ea:	c8 01       	movw	r24, r16
  _SetUnixTime = now().unixtime();                                            // Store time of last change        //
    49ec:	7a de       	rcall	.-780    	; 0x46e2 <_ZN13DS3231M_Class9writeByteEhh>
    49ee:	b8 01       	movw	r22, r16
    49f0:	ce 01       	movw	r24, r28
    49f2:	01 96       	adiw	r24, 0x01	; 1
    49f4:	e8 de       	rcall	.-560    	; 0x47c6 <_ZN13DS3231M_Class3nowEv>
    49f6:	ce 01       	movw	r24, r28
    49f8:	01 96       	adiw	r24, 0x01	; 1
    49fa:	f9 dd       	rcall	.-1038   	; 0x45ee <_ZNK8DateTime8unixtimeEv>
    49fc:	f8 01       	movw	r30, r16
    49fe:	61 83       	std	Z+1, r22	; 0x01
    4a00:	72 83       	std	Z+2, r23	; 0x02
    4a02:	83 83       	std	Z+3, r24	; 0x03
    4a04:	94 83       	std	Z+4, r25	; 0x04
    4a06:	26 96       	adiw	r28, 0x06	; 6
} // of method adjust                                                         //                                  //
    4a08:	0f b6       	in	r0, 0x3f	; 63
    4a0a:	f8 94       	cli
    4a0c:	de bf       	out	0x3e, r29	; 62
    4a0e:	0f be       	out	0x3f, r0	; 63
    4a10:	cd bf       	out	0x3d, r28	; 61
    4a12:	df 91       	pop	r29
    4a14:	cf 91       	pop	r28
    4a16:	1f 91       	pop	r17
    4a18:	0f 91       	pop	r16
    4a1a:	ff 90       	pop	r15
    4a1c:	ef 90       	pop	r14
    4a1e:	df 90       	pop	r13
    4a20:	08 95       	ret

00004a22 <_ZN13DS3231M_Class6adjustEv>:
    4a22:	0f 93       	push	r16
/*******************************************************************************************************************
** Method adjust set the current date/time. This is an overloaded function, if called with no parameters then the **
** RTC is set to the date/time when the program was compiled and uploaded. Otherwise the values are set, but the  **
** oscillator is stopped during the process and needs to be restarted upon completion.                            **
*******************************************************************************************************************/
void DS3231M_Class::adjust() {                                                // Set the RTC date and Time        //
    4a24:	1f 93       	push	r17
    4a26:	cf 93       	push	r28
    4a28:	df 93       	push	r29
    4a2a:	00 d0       	rcall	.+0      	; 0x4a2c <_ZN13DS3231M_Class6adjustEv+0xa>
    4a2c:	00 d0       	rcall	.+0      	; 0x4a2e <_ZN13DS3231M_Class6adjustEv+0xc>
    4a2e:	00 d0       	rcall	.+0      	; 0x4a30 <_ZN13DS3231M_Class6adjustEv+0xe>
    4a30:	cd b7       	in	r28, 0x3d	; 61
    4a32:	de b7       	in	r29, 0x3e	; 62
    4a34:	8c 01       	movw	r16, r24
  adjust(DateTime(F(__DATE__), F(__TIME__)));                                 // Set to compile time              //
    4a36:	4f e1       	ldi	r20, 0x1F	; 31
    4a38:	52 e0       	ldi	r21, 0x02	; 2
    4a3a:	63 e1       	ldi	r22, 0x13	; 19
    4a3c:	72 e0       	ldi	r23, 0x02	; 2
    4a3e:	ce 01       	movw	r24, r28
    4a40:	01 96       	adiw	r24, 0x01	; 1
    4a42:	54 dd       	rcall	.-1368   	; 0x44ec <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>
    4a44:	be 01       	movw	r22, r28
    4a46:	6f 5f       	subi	r22, 0xFF	; 255
    4a48:	7f 4f       	sbci	r23, 0xFF	; 255
    4a4a:	c8 01       	movw	r24, r16
    4a4c:	5c df       	rcall	.-328    	; 0x4906 <_ZN13DS3231M_Class6adjustERK8DateTime>
} // of method adjust                                                         /-----------------------------------//
    4a4e:	26 96       	adiw	r28, 0x06	; 6
    4a50:	0f b6       	in	r0, 0x3f	; 63
    4a52:	f8 94       	cli
    4a54:	de bf       	out	0x3e, r29	; 62
    4a56:	0f be       	out	0x3f, r0	; 63
    4a58:	cd bf       	out	0x3d, r28	; 61
    4a5a:	df 91       	pop	r29
    4a5c:	cf 91       	pop	r28
    4a5e:	1f 91       	pop	r17
    4a60:	0f 91       	pop	r16
    4a62:	08 95       	ret

00004a64 <_GLOBAL__sub_I__ZN9DhcpClass13beginWithDHCPEPhmm>:
    unsigned long m = n;
    n /= 16;
    char c = m - 16 * n;
    *str-- = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);
}
    4a64:	0f 93       	push	r16
    4a66:	00 e0       	ldi	r16, 0x00	; 0
    4a68:	20 e0       	ldi	r18, 0x00	; 0
    4a6a:	40 e0       	ldi	r20, 0x00	; 0
    4a6c:	60 e0       	ldi	r22, 0x00	; 0
    4a6e:	8f e0       	ldi	r24, 0x0F	; 15
    4a70:	9c e0       	ldi	r25, 0x0C	; 12
    4a72:	0e 94 9e 38 	call	0x713c	; 0x713c <_ZN9IPAddressC1Ehhhh>
    4a76:	0f 91       	pop	r16
    4a78:	08 95       	ret

00004a7a <_ZN9DNSClient5beginERK9IPAddress>:
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    4a7a:	fb 01       	movw	r30, r22
    4a7c:	42 81       	ldd	r20, Z+2	; 0x02
    4a7e:	53 81       	ldd	r21, Z+3	; 0x03
    4a80:	64 81       	ldd	r22, Z+4	; 0x04
    4a82:	75 81       	ldd	r23, Z+5	; 0x05
    4a84:	fc 01       	movw	r30, r24
    4a86:	42 83       	std	Z+2, r20	; 0x02
    4a88:	53 83       	std	Z+3, r21	; 0x03
    4a8a:	64 83       	std	Z+4, r22	; 0x04
    4a8c:	75 83       	std	Z+5, r23	; 0x05
#define INVALID_RESPONSE -4

void DNSClient::begin(const IPAddress& aDNSServer)
{
    iDNSServer = aDNSServer;
    iRequestId = 0;
    4a8e:	17 82       	std	Z+7, r1	; 0x07
    4a90:	16 82       	std	Z+6, r1	; 0x06
    4a92:	08 95       	ret

00004a94 <_ZN9DNSClient9inet_atonEPKcR9IPAddress>:
}


int DNSClient::inet_aton(const char* aIPAddrString, IPAddress& aResult)
{
    4a94:	cf 93       	push	r28
    4a96:	df 93       	push	r29
    4a98:	da 01       	movw	r26, r20
    4a9a:	fb 01       	movw	r30, r22
    4a9c:	eb 01       	movw	r28, r22
    // See if we've been given a valid IP address
    const char* p =aIPAddrString;
    while (*p &&
    4a9e:	89 91       	ld	r24, Y+
    4aa0:	81 11       	cpse	r24, r1
    4aa2:	fd cf       	rjmp	.-6      	; 0x4a9e <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0xa>
    4aa4:	80 e0       	ldi	r24, 0x00	; 0
    4aa6:	90 e0       	ldi	r25, 0x00	; 0
    4aa8:	20 e0       	ldi	r18, 0x00	; 0
    4aaa:	30 e0       	ldi	r19, 0x00	; 0
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
    4aac:	4a e0       	ldi	r20, 0x0A	; 10
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
        int segmentValue =0;
        while (*p && (segment < 4))
    4aae:	51 91       	ld	r21, Z+
    4ab0:	55 23       	and	r21, r21
    4ab2:	e9 f0       	breq	.+58     	; 0x4aee <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x5a>
    4ab4:	24 30       	cpi	r18, 0x04	; 4
    4ab6:	31 05       	cpc	r19, r1
    4ab8:	44 f5       	brge	.+80     	; 0x4b0a <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
        {
            if (*p == '.')
    4aba:	5e 32       	cpi	r21, 0x2E	; 46
    4abc:	69 f4       	brne	.+26     	; 0x4ad8 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x44>
            {
                // We've reached the end of a segment
                if (segmentValue > 255)
    4abe:	8f 3f       	cpi	r24, 0xFF	; 255
    4ac0:	91 05       	cpc	r25, r1
    4ac2:	09 f0       	breq	.+2      	; 0x4ac6 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x32>
    4ac4:	14 f5       	brge	.+68     	; 0x4b0a <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
                    // You can't have IP address segments that don't fit in a byte
                    return 0;
                }
                else
                {
                    aResult[segment] = (byte)segmentValue;
    4ac6:	ed 01       	movw	r28, r26
    4ac8:	c2 0f       	add	r28, r18
    4aca:	d3 1f       	adc	r29, r19
    4acc:	8a 83       	std	Y+2, r24	; 0x02
                    segment++;
    4ace:	2f 5f       	subi	r18, 0xFF	; 255
    4ad0:	3f 4f       	sbci	r19, 0xFF	; 255
                    segmentValue = 0;
    4ad2:	80 e0       	ldi	r24, 0x00	; 0
    4ad4:	90 e0       	ldi	r25, 0x00	; 0
    4ad6:	eb cf       	rjmp	.-42     	; 0x4aae <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x1a>
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
    4ad8:	48 9f       	mul	r20, r24
    4ada:	b0 01       	movw	r22, r0
    4adc:	49 9f       	mul	r20, r25
    4ade:	70 0d       	add	r23, r0
    4ae0:	11 24       	eor	r1, r1
    4ae2:	85 2f       	mov	r24, r21
    4ae4:	90 e0       	ldi	r25, 0x00	; 0
    4ae6:	c0 97       	sbiw	r24, 0x30	; 48
    4ae8:	86 0f       	add	r24, r22
    4aea:	97 1f       	adc	r25, r23
    4aec:	e0 cf       	rjmp	.-64     	; 0x4aae <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x1a>
            }
            p++;
        }
        // We've reached the end of address, but there'll still be the last
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
    4aee:	8f 3f       	cpi	r24, 0xFF	; 255
    4af0:	91 05       	cpc	r25, r1
    4af2:	09 f0       	breq	.+2      	; 0x4af6 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x62>
    4af4:	54 f4       	brge	.+20     	; 0x4b0a <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
    4af6:	24 30       	cpi	r18, 0x04	; 4
    4af8:	31 05       	cpc	r19, r1
    4afa:	3c f4       	brge	.+14     	; 0x4b0a <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
            // or more than four segments
            return 0;
        }
        else
        {
            aResult[segment] = (byte)segmentValue;
    4afc:	fd 01       	movw	r30, r26
    4afe:	e2 0f       	add	r30, r18
    4b00:	f3 1f       	adc	r31, r19
    4b02:	82 83       	std	Z+2, r24	; 0x02
            return 1;
    4b04:	81 e0       	ldi	r24, 0x01	; 1
    4b06:	90 e0       	ldi	r25, 0x00	; 0
    4b08:	02 c0       	rjmp	.+4      	; 0x4b0e <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x7a>
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
        {
            // You can't have IP address segments that don't fit in a byte,
            // or more than four segments
            return 0;
    4b0a:	80 e0       	ldi	r24, 0x00	; 0
    4b0c:	90 e0       	ldi	r25, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    4b0e:	df 91       	pop	r29
    4b10:	cf 91       	pop	r28
    4b12:	08 95       	ret

00004b14 <_GLOBAL__sub_I__ZN9DNSClient5beginERK9IPAddress>:
    // Mark the entire packet as read
    iUdp.flush();

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
}
    4b14:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    4b16:	00 e0       	ldi	r16, 0x00	; 0
    4b18:	20 e0       	ldi	r18, 0x00	; 0
    4b1a:	40 e0       	ldi	r20, 0x00	; 0
    4b1c:	60 e0       	ldi	r22, 0x00	; 0
    4b1e:	85 e1       	ldi	r24, 0x15	; 21
    4b20:	9c e0       	ldi	r25, 0x0C	; 12
    4b22:	0e 94 9e 38 	call	0x713c	; 0x713c <_ZN9IPAddressC1Ehhhh>
    4b26:	0f 91       	pop	r16
    4b28:	08 95       	ret

00004b2a <_ZN9DNSClient12BuildRequestEPKc>:

    return ret;
}

uint16_t DNSClient::BuildRequest(const char* aName)
{
    4b2a:	8f 92       	push	r8
    4b2c:	9f 92       	push	r9
    4b2e:	af 92       	push	r10
    4b30:	bf 92       	push	r11
    4b32:	cf 92       	push	r12
    4b34:	df 92       	push	r13
    4b36:	ef 92       	push	r14
    4b38:	ff 92       	push	r15
    4b3a:	0f 93       	push	r16
    4b3c:	1f 93       	push	r17
    4b3e:	cf 93       	push	r28
    4b40:	df 93       	push	r29
    4b42:	00 d0       	rcall	.+0      	; 0x4b44 <_ZN9DNSClient12BuildRequestEPKc+0x1a>
    4b44:	1f 92       	push	r1
    4b46:	cd b7       	in	r28, 0x3d	; 61
    4b48:	de b7       	in	r29, 0x3e	; 62
    4b4a:	6c 01       	movw	r12, r24
    4b4c:	7b 01       	movw	r14, r22
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    //    |                    ARCOUNT                    |
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    // As we only support one request at a time at present, we can simplify
    // some of this header
    iRequestId = millis(); // generate a random ID
    4b4e:	0e 94 24 3a 	call	0x7448	; 0x7448 <millis>
    4b52:	f6 01       	movw	r30, r12
    4b54:	77 83       	std	Z+7, r23	; 0x07
    4b56:	66 83       	std	Z+6, r22	; 0x06
    uint16_t twoByteBuffer;

    // FIXME We should also check that there's enough space available to write to, rather
    // FIXME than assume there's enough space (as the code does at present)
    iUdp.write((uint8_t*)&iRequestId, sizeof(iRequestId));
    4b58:	86 01       	movw	r16, r12
    4b5a:	08 5f       	subi	r16, 0xF8	; 248
    4b5c:	1f 4f       	sbci	r17, 0xFF	; 255
    4b5e:	b6 01       	movw	r22, r12
    4b60:	6a 5f       	subi	r22, 0xFA	; 250
    4b62:	7f 4f       	sbci	r23, 0xFF	; 255
    4b64:	42 e0       	ldi	r20, 0x02	; 2
    4b66:	50 e0       	ldi	r21, 0x00	; 0
    4b68:	c8 01       	movw	r24, r16
    4b6a:	30 d5       	rcall	.+2656   	; 0x55cc <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = htons(QUERY_FLAG | OPCODE_STANDARD_QUERY | RECURSION_DESIRED_FLAG);
    4b6c:	81 e0       	ldi	r24, 0x01	; 1
    4b6e:	90 e0       	ldi	r25, 0x00	; 0
    4b70:	9a 83       	std	Y+2, r25	; 0x02
    4b72:	89 83       	std	Y+1, r24	; 0x01
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    4b74:	42 e0       	ldi	r20, 0x02	; 2
    4b76:	50 e0       	ldi	r21, 0x00	; 0
    4b78:	be 01       	movw	r22, r28
    4b7a:	6f 5f       	subi	r22, 0xFF	; 255
    4b7c:	7f 4f       	sbci	r23, 0xFF	; 255
    4b7e:	c8 01       	movw	r24, r16
    4b80:	25 d5       	rcall	.+2634   	; 0x55cc <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = htons(1);  // One question record
    4b82:	80 e0       	ldi	r24, 0x00	; 0
    4b84:	91 e0       	ldi	r25, 0x01	; 1
    4b86:	9a 83       	std	Y+2, r25	; 0x02
    4b88:	89 83       	std	Y+1, r24	; 0x01
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    4b8a:	42 e0       	ldi	r20, 0x02	; 2
    4b8c:	50 e0       	ldi	r21, 0x00	; 0
    4b8e:	be 01       	movw	r22, r28
    4b90:	6f 5f       	subi	r22, 0xFF	; 255
    4b92:	7f 4f       	sbci	r23, 0xFF	; 255
    4b94:	c8 01       	movw	r24, r16
    4b96:	1a d5       	rcall	.+2612   	; 0x55cc <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = 0;  // Zero answer records
    4b98:	1a 82       	std	Y+2, r1	; 0x02
    4b9a:	19 82       	std	Y+1, r1	; 0x01
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    4b9c:	42 e0       	ldi	r20, 0x02	; 2
    4b9e:	50 e0       	ldi	r21, 0x00	; 0
    4ba0:	be 01       	movw	r22, r28
    4ba2:	6f 5f       	subi	r22, 0xFF	; 255
    4ba4:	7f 4f       	sbci	r23, 0xFF	; 255
    4ba6:	c8 01       	movw	r24, r16
    4ba8:	11 d5       	rcall	.+2594   	; 0x55cc <_ZN11EthernetUDP5writeEPKhj>

    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    4baa:	42 e0       	ldi	r20, 0x02	; 2
    4bac:	50 e0       	ldi	r21, 0x00	; 0
    4bae:	be 01       	movw	r22, r28
    4bb0:	6f 5f       	subi	r22, 0xFF	; 255
    4bb2:	7f 4f       	sbci	r23, 0xFF	; 255
    4bb4:	c8 01       	movw	r24, r16
    4bb6:	0a d5       	rcall	.+2580   	; 0x55cc <_ZN11EthernetUDP5writeEPKhj>
    // and zero additional records
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    4bb8:	42 e0       	ldi	r20, 0x02	; 2
    4bba:	50 e0       	ldi	r21, 0x00	; 0
    4bbc:	be 01       	movw	r22, r28
    4bbe:	6f 5f       	subi	r22, 0xFF	; 255
    4bc0:	7f 4f       	sbci	r23, 0xFF	; 255
    4bc2:	c8 01       	movw	r24, r16
    4bc4:	03 d5       	rcall	.+2566   	; 0x55cc <_ZN11EthernetUDP5writeEPKhj>

    // Build question
    const char* start =aName;
    const char* end =start;
    4bc6:	57 01       	movw	r10, r14
    uint8_t len;
    // Run through the name being requested
    while (*end)
    4bc8:	f5 01       	movw	r30, r10
    4bca:	80 81       	ld	r24, Z
    4bcc:	88 23       	and	r24, r24
    4bce:	f9 f0       	breq	.+62     	; 0x4c0e <_ZN9DNSClient12BuildRequestEPKc+0xe4>
    4bd0:	a7 01       	movw	r20, r14
    4bd2:	5a 01       	movw	r10, r20
    {
        // Find out how long this section of the name is
        end = start;
        while (*end && (*end != '.') )
    4bd4:	f5 01       	movw	r30, r10
    4bd6:	81 91       	ld	r24, Z+
    4bd8:	6f 01       	movw	r12, r30
    4bda:	88 23       	and	r24, r24
    4bdc:	21 f0       	breq	.+8      	; 0x4be6 <_ZN9DNSClient12BuildRequestEPKc+0xbc>
    4bde:	8e 32       	cpi	r24, 0x2E	; 46
    4be0:	11 f0       	breq	.+4      	; 0x4be6 <_ZN9DNSClient12BuildRequestEPKc+0xbc>
    4be2:	a6 01       	movw	r20, r12
    4be4:	f6 cf       	rjmp	.-20     	; 0x4bd2 <_ZN9DNSClient12BuildRequestEPKc+0xa8>
        {
            end++;
        }

        if (end-start > 0)
    4be6:	4a 01       	movw	r8, r20
    4be8:	8e 18       	sub	r8, r14
    4bea:	9f 08       	sbc	r9, r15
    4bec:	18 14       	cp	r1, r8
    4bee:	19 04       	cpc	r1, r9
    4bf0:	64 f4       	brge	.+24     	; 0x4c0a <_ZN9DNSClient12BuildRequestEPKc+0xe0>
        {
            // Write out the size of this section
            len = end-start;
    4bf2:	8b 82       	std	Y+3, r8	; 0x03
            iUdp.write(&len, sizeof(len));
    4bf4:	41 e0       	ldi	r20, 0x01	; 1
    4bf6:	50 e0       	ldi	r21, 0x00	; 0
    4bf8:	be 01       	movw	r22, r28
    4bfa:	6d 5f       	subi	r22, 0xFD	; 253
    4bfc:	7f 4f       	sbci	r23, 0xFF	; 255
    4bfe:	c8 01       	movw	r24, r16
            // And then write out the section
            iUdp.write((uint8_t*)start, end-start);
    4c00:	e5 d4       	rcall	.+2506   	; 0x55cc <_ZN11EthernetUDP5writeEPKhj>
    4c02:	a4 01       	movw	r20, r8
    4c04:	b7 01       	movw	r22, r14
    4c06:	c8 01       	movw	r24, r16
    4c08:	e1 d4       	rcall	.+2498   	; 0x55cc <_ZN11EthernetUDP5writeEPKhj>
        }
        start = end+1;
    4c0a:	76 01       	movw	r14, r12
    }

    // We've got to the end of the question name, so
    // terminate it with a zero-length section
    len = 0;
    4c0c:	dd cf       	rjmp	.-70     	; 0x4bc8 <_ZN9DNSClient12BuildRequestEPKc+0x9e>
    iUdp.write(&len, sizeof(len));
    4c0e:	1b 82       	std	Y+3, r1	; 0x03
    4c10:	41 e0       	ldi	r20, 0x01	; 1
    4c12:	50 e0       	ldi	r21, 0x00	; 0
    4c14:	be 01       	movw	r22, r28
    4c16:	6d 5f       	subi	r22, 0xFD	; 253
    4c18:	7f 4f       	sbci	r23, 0xFF	; 255
    4c1a:	c8 01       	movw	r24, r16
    4c1c:	d7 d4       	rcall	.+2478   	; 0x55cc <_ZN11EthernetUDP5writeEPKhj>
    // Finally the type and class of question
    twoByteBuffer = htons(TYPE_A);
    4c1e:	e1 2c       	mov	r14, r1
    4c20:	ff 24       	eor	r15, r15
    4c22:	f3 94       	inc	r15
    4c24:	fa 82       	std	Y+2, r15	; 0x02
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    4c26:	e9 82       	std	Y+1, r14	; 0x01
    4c28:	42 e0       	ldi	r20, 0x02	; 2
    4c2a:	50 e0       	ldi	r21, 0x00	; 0
    4c2c:	be 01       	movw	r22, r28
    4c2e:	6f 5f       	subi	r22, 0xFF	; 255
    4c30:	7f 4f       	sbci	r23, 0xFF	; 255
    4c32:	c8 01       	movw	r24, r16

    twoByteBuffer = htons(CLASS_IN);  // Internet class of question
    4c34:	cb d4       	rcall	.+2454   	; 0x55cc <_ZN11EthernetUDP5writeEPKhj>
    4c36:	fa 82       	std	Y+2, r15	; 0x02
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    4c38:	e9 82       	std	Y+1, r14	; 0x01
    4c3a:	42 e0       	ldi	r20, 0x02	; 2
    4c3c:	50 e0       	ldi	r21, 0x00	; 0
    4c3e:	be 01       	movw	r22, r28
    4c40:	6f 5f       	subi	r22, 0xFF	; 255
    4c42:	7f 4f       	sbci	r23, 0xFF	; 255
    4c44:	c8 01       	movw	r24, r16
    4c46:	c2 d4       	rcall	.+2436   	; 0x55cc <_ZN11EthernetUDP5writeEPKhj>
    // Success!  Everything buffered okay
    return 1;
}
    4c48:	81 e0       	ldi	r24, 0x01	; 1
    4c4a:	90 e0       	ldi	r25, 0x00	; 0
    4c4c:	0f 90       	pop	r0
    4c4e:	0f 90       	pop	r0
    4c50:	0f 90       	pop	r0
    4c52:	df 91       	pop	r29
    4c54:	cf 91       	pop	r28
    4c56:	1f 91       	pop	r17
    4c58:	0f 91       	pop	r16
    4c5a:	ff 90       	pop	r15
    4c5c:	ef 90       	pop	r14
    4c5e:	df 90       	pop	r13
    4c60:	cf 90       	pop	r12
    4c62:	bf 90       	pop	r11
    4c64:	af 90       	pop	r10
    4c66:	9f 90       	pop	r9
    4c68:	8f 90       	pop	r8
    4c6a:	08 95       	ret

00004c6c <_ZN9DNSClient15ProcessResponseEjR9IPAddress>:


uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    4c6c:	2f 92       	push	r2
    4c6e:	3f 92       	push	r3
    4c70:	4f 92       	push	r4
    4c72:	5f 92       	push	r5
    4c74:	6f 92       	push	r6
    4c76:	7f 92       	push	r7
    4c78:	8f 92       	push	r8
    4c7a:	9f 92       	push	r9
    4c7c:	af 92       	push	r10
    4c7e:	bf 92       	push	r11
    4c80:	cf 92       	push	r12
    4c82:	df 92       	push	r13
    4c84:	ef 92       	push	r14
    4c86:	ff 92       	push	r15
    4c88:	0f 93       	push	r16
    4c8a:	1f 93       	push	r17
    4c8c:	cf 93       	push	r28
    4c8e:	df 93       	push	r29
    4c90:	cd b7       	in	r28, 0x3d	; 61
    4c92:	de b7       	in	r29, 0x3e	; 62
    4c94:	63 97       	sbiw	r28, 0x13	; 19
    4c96:	0f b6       	in	r0, 0x3f	; 63
    4c98:	f8 94       	cli
    4c9a:	de bf       	out	0x3e, r29	; 62
    4c9c:	0f be       	out	0x3f, r0	; 63
    4c9e:	cd bf       	out	0x3d, r28	; 61
    4ca0:	7c 01       	movw	r14, r24
    4ca2:	6b 01       	movw	r12, r22
    4ca4:	1a 01       	movw	r2, r20
    uint32_t startTime = millis();
    4ca6:	0e 94 24 3a 	call	0x7448	; 0x7448 <millis>
    4caa:	4b 01       	movw	r8, r22
    4cac:	5c 01       	movw	r10, r24

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    4cae:	87 01       	movw	r16, r14
    4cb0:	08 5f       	subi	r16, 0xF8	; 248
    4cb2:	1f 4f       	sbci	r17, 0xFF	; 255
    {
        if((millis() - startTime) > aTimeout)
    4cb4:	26 01       	movw	r4, r12
    4cb6:	61 2c       	mov	r6, r1
    4cb8:	71 2c       	mov	r7, r1
uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    4cba:	c8 01       	movw	r24, r16
    4cbc:	29 d5       	rcall	.+2642   	; 0x5710 <_ZN11EthernetUDP11parsePacketEv>
    4cbe:	18 16       	cp	r1, r24
    4cc0:	19 06       	cpc	r1, r25
    4cc2:	a4 f0       	brlt	.+40     	; 0x4cec <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x80>
    {
        if((millis() - startTime) > aTimeout)
    4cc4:	0e 94 24 3a 	call	0x7448	; 0x7448 <millis>
    4cc8:	dc 01       	movw	r26, r24
    4cca:	cb 01       	movw	r24, r22
    4ccc:	88 19       	sub	r24, r8
    4cce:	99 09       	sbc	r25, r9
    4cd0:	aa 09       	sbc	r26, r10
    4cd2:	bb 09       	sbc	r27, r11
    4cd4:	48 16       	cp	r4, r24
    4cd6:	59 06       	cpc	r5, r25
    4cd8:	6a 06       	cpc	r6, r26
    4cda:	7b 06       	cpc	r7, r27
    4cdc:	d0 f0       	brcs	.+52     	; 0x4d12 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xa6>
            return TIMED_OUT;
        delay(50);
    4cde:	62 e3       	ldi	r22, 0x32	; 50
    4ce0:	70 e0       	ldi	r23, 0x00	; 0
    4ce2:	80 e0       	ldi	r24, 0x00	; 0
    4ce4:	90 e0       	ldi	r25, 0x00	; 0
    4ce6:	0e 94 55 3a 	call	0x74aa	; 0x74aa <delay>
uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    4cea:	e7 cf       	rjmp	.-50     	; 0x4cba <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x4e>

    // We've had a reply!
    // Read the UDP header
    uint8_t header[DNS_HEADER_SIZE]; // Enough space to reuse for the DNS header
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
    4cec:	f7 01       	movw	r30, r14
    4cee:	42 81       	ldd	r20, Z+2	; 0x02
    4cf0:	53 81       	ldd	r21, Z+3	; 0x03
    4cf2:	64 81       	ldd	r22, Z+4	; 0x04
    4cf4:	75 81       	ldd	r23, Z+5	; 0x05
    4cf6:	81 8d       	ldd	r24, Z+25	; 0x19
    4cf8:	92 8d       	ldd	r25, Z+26	; 0x1a
    4cfa:	a3 8d       	ldd	r26, Z+27	; 0x1b
    4cfc:	b4 8d       	ldd	r27, Z+28	; 0x1c
    4cfe:	48 17       	cp	r20, r24
    4d00:	59 07       	cpc	r21, r25
    4d02:	6a 07       	cpc	r22, r26
    4d04:	7b 07       	cpc	r23, r27
    4d06:	49 f4       	brne	.+18     	; 0x4d1a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xae>
    4d08:	85 8d       	ldd	r24, Z+29	; 0x1d
    4d0a:	96 8d       	ldd	r25, Z+30	; 0x1e
    4d0c:	c5 97       	sbiw	r24, 0x35	; 53
    4d0e:	29 f4       	brne	.+10     	; 0x4d1a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xae>
    4d10:	09 c0       	rjmp	.+18     	; 0x4d24 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xb8>

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    {
        if((millis() - startTime) > aTimeout)
            return TIMED_OUT;
    4d12:	ee 24       	eor	r14, r14
    4d14:	ea 94       	dec	r14
    4d16:	fe 2c       	mov	r15, r14
    4d18:	f0 c0       	rjmp	.+480    	; 0x4efa <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
        (iUdp.remotePort() != DNS_PORT) )
    {
        // It's not from who we expected
        return INVALID_SERVER;
    4d1a:	9e ef       	ldi	r25, 0xFE	; 254
    4d1c:	e9 2e       	mov	r14, r25
    4d1e:	ff 24       	eor	r15, r15
    4d20:	fa 94       	dec	r15
    4d22:	eb c0       	rjmp	.+470    	; 0x4efa <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    4d24:	c8 01       	movw	r24, r16
    4d26:	08 d4       	rcall	.+2064   	; 0x5538 <_ZN11EthernetUDP9availableEv>
    4d28:	0c 97       	sbiw	r24, 0x0c	; 12
    4d2a:	0c f4       	brge	.+2      	; 0x4d2e <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xc2>
    4d2c:	e2 c0       	rjmp	.+452    	; 0x4ef2 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x286>
    {
        return TRUNCATED;
    }
    iUdp.read(header, DNS_HEADER_SIZE);
    4d2e:	4c e0       	ldi	r20, 0x0C	; 12
    4d30:	50 e0       	ldi	r21, 0x00	; 0
    4d32:	be 01       	movw	r22, r28
    4d34:	6f 5f       	subi	r22, 0xFF	; 255
    4d36:	7f 4f       	sbci	r23, 0xFF	; 255
    4d38:	c8 01       	movw	r24, r16
    4d3a:	83 d4       	rcall	.+2310   	; 0x5642 <_ZN11EthernetUDP4readEPhj>

    uint16_t header_flags = htons(*((uint16_t*)&header[2]));
    4d3c:	8b 81       	ldd	r24, Y+3	; 0x03
    4d3e:	9c 81       	ldd	r25, Y+4	; 0x04
    4d40:	98 27       	eor	r25, r24
    4d42:	89 27       	eor	r24, r25
    4d44:	98 27       	eor	r25, r24
    4d46:	9a 8b       	std	Y+18, r25	; 0x12
    4d48:	89 8b       	std	Y+17, r24	; 0x11
    // Check that it's a response to this request
    if ( ( iRequestId != (*((uint16_t*)&header[0])) ) ||
    4d4a:	f7 01       	movw	r30, r14
    4d4c:	46 81       	ldd	r20, Z+6	; 0x06
    4d4e:	57 81       	ldd	r21, Z+7	; 0x07
    4d50:	29 81       	ldd	r18, Y+1	; 0x01
    4d52:	3a 81       	ldd	r19, Y+2	; 0x02
    4d54:	42 17       	cp	r20, r18
    4d56:	53 07       	cpc	r21, r19
    4d58:	11 f4       	brne	.+4      	; 0x4d5e <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xf2>
    4d5a:	97 fd       	sbrc	r25, 7
        ((header_flags & QUERY_RESPONSE_MASK) != (uint16_t)RESPONSE_FLAG) )
    {
        // Mark the entire packet as read
        iUdp.flush();
    4d5c:	07 c0       	rjmp	.+14     	; 0x4d6c <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x100>
    4d5e:	c8 01       	movw	r24, r16
    4d60:	05 d4       	rcall	.+2058   	; 0x556c <_ZN11EthernetUDP5flushEv>
        return INVALID_RESPONSE;
    4d62:	7c ef       	ldi	r23, 0xFC	; 252
    4d64:	e7 2e       	mov	r14, r23
    4d66:	ff 24       	eor	r15, r15
    4d68:	fa 94       	dec	r15
    4d6a:	c7 c0       	rjmp	.+398    	; 0x4efa <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    }
    // Check for any errors in the response (or in our request)
    // although we don't do anything to get round these
    if ( (header_flags & TRUNCATION_FLAG) || (header_flags & RESP_MASK) )
    4d6c:	8f 70       	andi	r24, 0x0F	; 15
    4d6e:	92 70       	andi	r25, 0x02	; 2
    4d70:	89 2b       	or	r24, r25
    {
        // Mark the entire packet as read
        iUdp.flush();
    4d72:	39 f0       	breq	.+14     	; 0x4d82 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x116>
    4d74:	c8 01       	movw	r24, r16
    4d76:	fa d3       	rcall	.+2036   	; 0x556c <_ZN11EthernetUDP5flushEv>
        return -5; //INVALID_RESPONSE;
    4d78:	6b ef       	ldi	r22, 0xFB	; 251
    4d7a:	e6 2e       	mov	r14, r22
    4d7c:	ff 24       	eor	r15, r15
    4d7e:	fa 94       	dec	r15
    4d80:	bc c0       	rjmp	.+376    	; 0x4efa <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    }

    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
    4d82:	cf 80       	ldd	r12, Y+7	; 0x07
    4d84:	d8 84       	ldd	r13, Y+8	; 0x08
    4d86:	dc 24       	eor	r13, r12
    4d88:	cd 24       	eor	r12, r13
    4d8a:	dc 24       	eor	r13, r12
    if (answerCount == 0 )
    4d8c:	c1 14       	cp	r12, r1
    4d8e:	d1 04       	cpc	r13, r1
    4d90:	19 f0       	breq	.+6      	; 0x4d98 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x12c>
    4d92:	e1 2c       	mov	r14, r1
    4d94:	f1 2c       	mov	r15, r1
    {
        // Mark the entire packet as read
        iUdp.flush();
    4d96:	1f c0       	rjmp	.+62     	; 0x4dd6 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x16a>
    4d98:	c8 01       	movw	r24, r16
    4d9a:	e8 d3       	rcall	.+2000   	; 0x556c <_ZN11EthernetUDP5flushEv>
        return -6; //INVALID_RESPONSE;
    4d9c:	5a ef       	ldi	r21, 0xFA	; 250
    4d9e:	e5 2e       	mov	r14, r21
    4da0:	ff 24       	eor	r15, r15
    4da2:	fa 94       	dec	r15
    4da4:	aa c0       	rjmp	.+340    	; 0x4efa <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    {
        // Skip over the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    4da6:	41 e0       	ldi	r20, 0x01	; 1
    4da8:	50 e0       	ldi	r21, 0x00	; 0
    4daa:	be 01       	movw	r22, r28
    4dac:	63 5f       	subi	r22, 0xF3	; 243
    4dae:	7f 4f       	sbci	r23, 0xFF	; 255
    4db0:	c8 01       	movw	r24, r16
    4db2:	47 d4       	rcall	.+2190   	; 0x5642 <_ZN11EthernetUDP4readEPhj>
            if (len > 0)
    4db4:	8d 85       	ldd	r24, Y+13	; 0x0d
    4db6:	81 11       	cpse	r24, r1
                while(len--)
                {
                    iUdp.read(); // we don't care about the returned byte
                }
            }
        } while (len != 0);
    4db8:	17 c0       	rjmp	.+46     	; 0x4de8 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x17c>
    4dba:	8d 85       	ldd	r24, Y+13	; 0x0d

        // Now jump over the type and class
        for (int i =0; i < 4; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    4dbc:	81 11       	cpse	r24, r1
    4dbe:	f3 cf       	rjmp	.-26     	; 0x4da6 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x13a>
    4dc0:	c8 01       	movw	r24, r16
    4dc2:	17 d4       	rcall	.+2094   	; 0x55f2 <_ZN11EthernetUDP4readEv>
    4dc4:	c8 01       	movw	r24, r16
    4dc6:	15 d4       	rcall	.+2090   	; 0x55f2 <_ZN11EthernetUDP4readEv>
    4dc8:	c8 01       	movw	r24, r16
    4dca:	13 d4       	rcall	.+2086   	; 0x55f2 <_ZN11EthernetUDP4readEv>
    4dcc:	c8 01       	movw	r24, r16
    4dce:	11 d4       	rcall	.+2082   	; 0x55f2 <_ZN11EthernetUDP4readEv>
    4dd0:	ff ef       	ldi	r31, 0xFF	; 255
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    4dd2:	ef 1a       	sub	r14, r31
    4dd4:	ff 0a       	sbc	r15, r31
    4dd6:	8d 81       	ldd	r24, Y+5	; 0x05
    4dd8:	9e 81       	ldd	r25, Y+6	; 0x06
    4dda:	98 27       	eor	r25, r24
    4ddc:	89 27       	eor	r24, r25
    4dde:	98 27       	eor	r25, r24
    4de0:	e8 16       	cp	r14, r24
    4de2:	f9 06       	cpc	r15, r25
    4de4:	00 f3       	brcs	.-64     	; 0x4da6 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x13a>
    4de6:	09 c0       	rjmp	.+18     	; 0x4dfa <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x18e>
            iUdp.read(&len, sizeof(len));
            if (len > 0)
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
    4de8:	8d 85       	ldd	r24, Y+13	; 0x0d
    4dea:	9f ef       	ldi	r25, 0xFF	; 255
    4dec:	98 0f       	add	r25, r24
    4dee:	9d 87       	std	Y+13, r25	; 0x0d
    4df0:	88 23       	and	r24, r24
    4df2:	19 f3       	breq	.-58     	; 0x4dba <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x14e>
                {
                    iUdp.read(); // we don't care about the returned byte
    4df4:	c8 01       	movw	r24, r16
    4df6:	fd d3       	rcall	.+2042   	; 0x55f2 <_ZN11EthernetUDP4readEv>
            iUdp.read(&len, sizeof(len));
            if (len > 0)
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
    4df8:	f7 cf       	rjmp	.-18     	; 0x4de8 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x17c>
    4dfa:	a1 2c       	mov	r10, r1
    4dfc:	b1 2c       	mov	r11, r1
    {
        // Skip the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    4dfe:	41 e0       	ldi	r20, 0x01	; 1
    4e00:	50 e0       	ldi	r21, 0x00	; 0
    4e02:	be 01       	movw	r22, r28
    4e04:	6d 5e       	subi	r22, 0xED	; 237
    4e06:	7f 4f       	sbci	r23, 0xFF	; 255
    4e08:	c8 01       	movw	r24, r16
    4e0a:	1b d4       	rcall	.+2102   	; 0x5642 <_ZN11EthernetUDP4readEPhj>
    4e0c:	8b 89       	ldd	r24, Y+19	; 0x13
            if ((len & LABEL_COMPRESSION_MASK) == 0)
    4e0e:	98 2f       	mov	r25, r24
    4e10:	90 7c       	andi	r25, 0xC0	; 192
    4e12:	59 f4       	brne	.+22     	; 0x4e2a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1be>
            {
                // It's just a normal label
                if (len > 0)
    4e14:	88 23       	and	r24, r24
    4e16:	79 f0       	breq	.+30     	; 0x4e36 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1ca>
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
    4e18:	8b 89       	ldd	r24, Y+19	; 0x13
    4e1a:	9f ef       	ldi	r25, 0xFF	; 255
    4e1c:	98 0f       	add	r25, r24
    4e1e:	9b 8b       	std	Y+19, r25	; 0x13
    4e20:	88 23       	and	r24, r24
    4e22:	31 f0       	breq	.+12     	; 0x4e30 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1c4>
                    {
                        iUdp.read(); // we don't care about the returned byte
    4e24:	c8 01       	movw	r24, r16
    4e26:	e5 d3       	rcall	.+1994   	; 0x55f2 <_ZN11EthernetUDP4readEv>
                if (len > 0)
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
    4e28:	f7 cf       	rjmp	.-18     	; 0x4e18 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1ac>
                // says that a name is either a sequence of labels ended with a
                // 0 length octet or a pointer or a sequence of labels ending in
                // a pointer.  Either way, when we get here we're at the end of
                // the name
                // Skip over the pointer
                iUdp.read(); // we don't care about the returned byte
    4e2a:	c8 01       	movw	r24, r16
    4e2c:	e2 d3       	rcall	.+1988   	; 0x55f2 <_ZN11EthernetUDP4readEv>
    4e2e:	1b 8a       	std	Y+19, r1	; 0x13
                // And set len so that we drop out of the name loop
                len = 0;
    4e30:	8b 89       	ldd	r24, Y+19	; 0x13
            }
        } while (len != 0);
    4e32:	81 11       	cpse	r24, r1
    4e34:	e4 cf       	rjmp	.-56     	; 0x4dfe <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x192>

        // Check the type and class
        uint16_t answerType;
        uint16_t answerClass;
        iUdp.read((uint8_t*)&answerType, sizeof(answerType));
    4e36:	42 e0       	ldi	r20, 0x02	; 2
    4e38:	50 e0       	ldi	r21, 0x00	; 0
    4e3a:	be 01       	movw	r22, r28
    4e3c:	61 5f       	subi	r22, 0xF1	; 241
    4e3e:	7f 4f       	sbci	r23, 0xFF	; 255
        iUdp.read((uint8_t*)&answerClass, sizeof(answerClass));
    4e40:	c8 01       	movw	r24, r16
    4e42:	ff d3       	rcall	.+2046   	; 0x5642 <_ZN11EthernetUDP4readEPhj>
    4e44:	42 e0       	ldi	r20, 0x02	; 2
    4e46:	50 e0       	ldi	r21, 0x00	; 0
    4e48:	be 01       	movw	r22, r28
    4e4a:	63 5f       	subi	r22, 0xF3	; 243
    4e4c:	7f 4f       	sbci	r23, 0xFF	; 255

        // Ignore the Time-To-Live as we don't do any caching
        for (int i =0; i < TTL_SIZE; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    4e4e:	c8 01       	movw	r24, r16
    4e50:	f8 d3       	rcall	.+2032   	; 0x5642 <_ZN11EthernetUDP4readEPhj>
    4e52:	c8 01       	movw	r24, r16
    4e54:	ce d3       	rcall	.+1948   	; 0x55f2 <_ZN11EthernetUDP4readEv>
    4e56:	c8 01       	movw	r24, r16
    4e58:	cc d3       	rcall	.+1944   	; 0x55f2 <_ZN11EthernetUDP4readEv>
    4e5a:	c8 01       	movw	r24, r16
    4e5c:	ca d3       	rcall	.+1940   	; 0x55f2 <_ZN11EthernetUDP4readEv>
    4e5e:	c8 01       	movw	r24, r16
    4e60:	c8 d3       	rcall	.+1936   	; 0x55f2 <_ZN11EthernetUDP4readEv>
    4e62:	42 e0       	ldi	r20, 0x02	; 2
    4e64:	50 e0       	ldi	r21, 0x00	; 0
        }

        // And read out the length of this answer
        // Don't need header_flags anymore, so we can reuse it here
        iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));
    4e66:	be 01       	movw	r22, r28
    4e68:	6f 5e       	subi	r22, 0xEF	; 239
    4e6a:	7f 4f       	sbci	r23, 0xFF	; 255
    4e6c:	c8 01       	movw	r24, r16
    4e6e:	e9 d3       	rcall	.+2002   	; 0x5642 <_ZN11EthernetUDP4readEPhj>
    4e70:	8f 85       	ldd	r24, Y+15	; 0x0f
    4e72:	98 89       	ldd	r25, Y+16	; 0x10
    4e74:	81 15       	cp	r24, r1

        if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) )
    4e76:	91 40       	sbci	r25, 0x01	; 1
    4e78:	49 f4       	brne	.+18     	; 0x4e8c <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x220>
    4e7a:	ed 84       	ldd	r14, Y+13	; 0x0d
    4e7c:	fe 84       	ldd	r15, Y+14	; 0x0e
    4e7e:	fe 24       	eor	r15, r14
    4e80:	ef 24       	eor	r14, r15
    4e82:	fe 24       	eor	r15, r14
    4e84:	81 e0       	ldi	r24, 0x01	; 1
    4e86:	e8 16       	cp	r14, r24
    4e88:	f1 04       	cpc	r15, r1
    4e8a:	19 f0       	breq	.+6      	; 0x4e92 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x226>
    4e8c:	e1 2c       	mov	r14, r1
    4e8e:	f1 2c       	mov	r15, r1
    4e90:	14 c0       	rjmp	.+40     	; 0x4eba <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x24e>
    4e92:	89 89       	ldd	r24, Y+17	; 0x11
        {
            if (htons(header_flags) != 4)
    4e94:	9a 89       	ldd	r25, Y+18	; 0x12
    4e96:	81 15       	cp	r24, r1
    4e98:	94 40       	sbci	r25, 0x04	; 4
    4e9a:	39 f0       	breq	.+14     	; 0x4eaa <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x23e>
    4e9c:	c8 01       	movw	r24, r16
            {
                // It's a weird size
                // Mark the entire packet as read
                iUdp.flush();
    4e9e:	66 d3       	rcall	.+1740   	; 0x556c <_ZN11EthernetUDP5flushEv>
    4ea0:	47 ef       	ldi	r20, 0xF7	; 247
                return -9;//INVALID_RESPONSE;
    4ea2:	e4 2e       	mov	r14, r20
    4ea4:	ff 24       	eor	r15, r15
    4ea6:	fa 94       	dec	r15
    4ea8:	28 c0       	rjmp	.+80     	; 0x4efa <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    4eaa:	b1 01       	movw	r22, r2

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    4eac:	6e 5f       	subi	r22, 0xFE	; 254
    4eae:	7f 4f       	sbci	r23, 0xFF	; 255
    4eb0:	44 e0       	ldi	r20, 0x04	; 4
            }
            iUdp.read(aAddress.raw_address(), 4);
    4eb2:	50 e0       	ldi	r21, 0x00	; 0
    4eb4:	c8 01       	movw	r24, r16
    4eb6:	c5 d3       	rcall	.+1930   	; 0x5642 <_ZN11EthernetUDP4readEPhj>
    4eb8:	20 c0       	rjmp	.+64     	; 0x4efa <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
            return SUCCESS;
    4eba:	89 89       	ldd	r24, Y+17	; 0x11
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    4ebc:	9a 89       	ldd	r25, Y+18	; 0x12
    4ebe:	98 27       	eor	r25, r24
    4ec0:	89 27       	eor	r24, r25
    4ec2:	98 27       	eor	r25, r24
    4ec4:	e8 16       	cp	r14, r24
    4ec6:	f9 06       	cpc	r15, r25
    4ec8:	30 f4       	brcc	.+12     	; 0x4ed6 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x26a>
    4eca:	c8 01       	movw	r24, r16
            {
                iUdp.read(); // we don't care about the returned byte
    4ecc:	92 d3       	rcall	.+1828   	; 0x55f2 <_ZN11EthernetUDP4readEv>
    4ece:	ff ef       	ldi	r31, 0xFF	; 255
    4ed0:	ef 1a       	sub	r14, r31
            return SUCCESS;
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    4ed2:	ff 0a       	sbc	r15, r31
    4ed4:	f2 cf       	rjmp	.-28     	; 0x4eba <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x24e>
    4ed6:	2f ef       	ldi	r18, 0xFF	; 255
    4ed8:	a2 1a       	sub	r10, r18
    // Now we're up to the bit we're interested in, the answer
    // There might be more than one answer (although we'll just use the first
    // type A answer) and some authority and additional resource records but
    // we're going to ignore all of them.

    for (uint16_t i =0; i < answerCount; i++)
    4eda:	b2 0a       	sbc	r11, r18
    4edc:	ca 14       	cp	r12, r10
    4ede:	db 04       	cpc	r13, r11
    4ee0:	09 f0       	breq	.+2      	; 0x4ee4 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x278>
    4ee2:	8d cf       	rjmp	.-230    	; 0x4dfe <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x192>
    4ee4:	c8 01       	movw	r24, r16
    4ee6:	42 d3       	rcall	.+1668   	; 0x556c <_ZN11EthernetUDP5flushEv>
            }
        }
    }

    // Mark the entire packet as read
    iUdp.flush();
    4ee8:	36 ef       	ldi	r19, 0xF6	; 246
    4eea:	e3 2e       	mov	r14, r19
    4eec:	ff 24       	eor	r15, r15

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
    4eee:	fa 94       	dec	r15
    4ef0:	04 c0       	rjmp	.+8      	; 0x4efa <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    4ef2:	8d ef       	ldi	r24, 0xFD	; 253
    4ef4:	e8 2e       	mov	r14, r24
    4ef6:	ff 24       	eor	r15, r15
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    {
        return TRUNCATED;
    4ef8:	fa 94       	dec	r15
    4efa:	c7 01       	movw	r24, r14
    4efc:	63 96       	adiw	r28, 0x13	; 19
    4efe:	0f b6       	in	r0, 0x3f	; 63
    // Mark the entire packet as read
    iUdp.flush();

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
}
    4f00:	f8 94       	cli
    4f02:	de bf       	out	0x3e, r29	; 62
    4f04:	0f be       	out	0x3f, r0	; 63
    4f06:	cd bf       	out	0x3d, r28	; 61
    4f08:	df 91       	pop	r29
    4f0a:	cf 91       	pop	r28
    4f0c:	1f 91       	pop	r17
    4f0e:	0f 91       	pop	r16
    4f10:	ff 90       	pop	r15
    4f12:	ef 90       	pop	r14
    4f14:	df 90       	pop	r13
    4f16:	cf 90       	pop	r12
    4f18:	bf 90       	pop	r11
    4f1a:	af 90       	pop	r10
    4f1c:	9f 90       	pop	r9
    4f1e:	8f 90       	pop	r8
    4f20:	7f 90       	pop	r7
    4f22:	6f 90       	pop	r6
    4f24:	5f 90       	pop	r5
    4f26:	4f 90       	pop	r4
    4f28:	3f 90       	pop	r3
    4f2a:	2f 90       	pop	r2
    4f2c:	08 95       	ret

00004f2e <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>:
    4f2e:	8f 92       	push	r8
    4f30:	9f 92       	push	r9
    4f32:	af 92       	push	r10
        return 0;
    }
}

int DNSClient::getHostByName(const char* aHostname, IPAddress& aResult)
{
    4f34:	bf 92       	push	r11
    4f36:	cf 92       	push	r12
    4f38:	df 92       	push	r13
    4f3a:	ef 92       	push	r14
    4f3c:	ff 92       	push	r15
    4f3e:	0f 93       	push	r16
    4f40:	1f 93       	push	r17
    4f42:	cf 93       	push	r28
    4f44:	df 93       	push	r29
    4f46:	00 d0       	rcall	.+0      	; 0x4f48 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x1a>
    4f48:	00 d0       	rcall	.+0      	; 0x4f4a <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x1c>
    4f4a:	00 d0       	rcall	.+0      	; 0x4f4c <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x1e>
    4f4c:	cd b7       	in	r28, 0x3d	; 61
    4f4e:	de b7       	in	r29, 0x3e	; 62
    4f50:	7c 01       	movw	r14, r24
    4f52:	4b 01       	movw	r8, r22
    4f54:	5a 01       	movw	r10, r20
    int ret =0;

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
    4f56:	9e dd       	rcall	.-1220   	; 0x4a94 <_ZN9DNSClient9inet_atonEPKcR9IPAddress>
    4f58:	8c 01       	movw	r16, r24
    4f5a:	89 2b       	or	r24, r25
    4f5c:	09 f0       	breq	.+2      	; 0x4f60 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x32>
    4f5e:	57 c0       	rjmp	.+174    	; 0x500e <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xe0>
        // It is, our work here is done
        return 1;
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    4f60:	f7 01       	movw	r30, r14
    4f62:	42 81       	ldd	r20, Z+2	; 0x02
    4f64:	53 81       	ldd	r21, Z+3	; 0x03
    4f66:	64 81       	ldd	r22, Z+4	; 0x04
    4f68:	75 81       	ldd	r23, Z+5	; 0x05
    4f6a:	80 91 17 0c 	lds	r24, 0x0C17	; 0x800c17 <_ZL11INADDR_NONE+0x2>
    4f6e:	90 91 18 0c 	lds	r25, 0x0C18	; 0x800c18 <_ZL11INADDR_NONE+0x3>
    4f72:	a0 91 19 0c 	lds	r26, 0x0C19	; 0x800c19 <_ZL11INADDR_NONE+0x4>
    4f76:	b0 91 1a 0c 	lds	r27, 0x0C1A	; 0x800c1a <_ZL11INADDR_NONE+0x5>
    4f7a:	48 17       	cp	r20, r24
    4f7c:	59 07       	cpc	r21, r25
    4f7e:	6a 07       	cpc	r22, r26
    4f80:	7b 07       	cpc	r23, r27
    4f82:	09 f4       	brne	.+2      	; 0x4f86 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x58>
    4f84:	47 c0       	rjmp	.+142    	; 0x5014 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xe6>
    {
        return INVALID_SERVER;
    }
	
    // Find a socket to use
    if (iUdp.begin(1024+(millis() & 0xF)) == 1)
    4f86:	0e 94 24 3a 	call	0x7448	; 0x7448 <millis>
    4f8a:	67 01       	movw	r12, r14
    4f8c:	f8 e0       	ldi	r31, 0x08	; 8
    4f8e:	cf 0e       	add	r12, r31
    4f90:	d1 1c       	adc	r13, r1
    4f92:	6f 70       	andi	r22, 0x0F	; 15
    4f94:	77 27       	eor	r23, r23
    4f96:	7c 5f       	subi	r23, 0xFC	; 252
    4f98:	c6 01       	movw	r24, r12
    4f9a:	89 d3       	rcall	.+1810   	; 0x56ae <_ZN11EthernetUDP5beginEj>
    4f9c:	81 30       	cpi	r24, 0x01	; 1
    4f9e:	09 f0       	breq	.+2      	; 0x4fa2 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x74>
    4fa0:	3b c0       	rjmp	.+118    	; 0x5018 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xea>
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    4fa2:	80 e6       	ldi	r24, 0x60	; 96
    4fa4:	9a e0       	ldi	r25, 0x0A	; 10
    4fa6:	9a 83       	std	Y+2, r25	; 0x02
    4fa8:	89 83       	std	Y+1, r24	; 0x01
    4faa:	f7 01       	movw	r30, r14
    4fac:	82 81       	ldd	r24, Z+2	; 0x02
    4fae:	93 81       	ldd	r25, Z+3	; 0x03
    4fb0:	a4 81       	ldd	r26, Z+4	; 0x04
    4fb2:	b5 81       	ldd	r27, Z+5	; 0x05
    4fb4:	8b 83       	std	Y+3, r24	; 0x03
    4fb6:	9c 83       	std	Y+4, r25	; 0x04
    4fb8:	ad 83       	std	Y+5, r26	; 0x05
    4fba:	be 83       	std	Y+6, r27	; 0x06
        // Try up to three times
        int retries = 0;
//        while ((retries < 3) && (ret <= 0))
        {
            // Send DNS request
            ret = iUdp.beginPacket(iDNSServer, DNS_PORT);
    4fbc:	45 e3       	ldi	r20, 0x35	; 53
    4fbe:	50 e0       	ldi	r21, 0x00	; 0
    4fc0:	be 01       	movw	r22, r28
    4fc2:	6f 5f       	subi	r22, 0xFF	; 255
    4fc4:	7f 4f       	sbci	r23, 0xFF	; 255
    4fc6:	c6 01       	movw	r24, r12
    4fc8:	f7 d2       	rcall	.+1518   	; 0x55b8 <_ZN11EthernetUDP11beginPacketE9IPAddressj>
            if (ret != 0)
    4fca:	89 2b       	or	r24, r25
    4fcc:	19 f4       	brne	.+6      	; 0x4fd4 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xa6>
    4fce:	00 e0       	ldi	r16, 0x00	; 0
    4fd0:	10 e0       	ldi	r17, 0x00	; 0
            {
                // Now output the request data
                ret = BuildRequest(aHostname);
    4fd2:	1a c0       	rjmp	.+52     	; 0x5008 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xda>
    4fd4:	b4 01       	movw	r22, r8
    4fd6:	c7 01       	movw	r24, r14
                if (ret != 0)
    4fd8:	a8 dd       	rcall	.-1200   	; 0x4b2a <_ZN9DNSClient12BuildRequestEPKc>
    4fda:	89 2b       	or	r24, r25
                {
                    // And finally send the request
                    ret = iUdp.endPacket();
    4fdc:	c1 f3       	breq	.-16     	; 0x4fce <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xa0>
    4fde:	c6 01       	movw	r24, r12
    4fe0:	f2 d2       	rcall	.+1508   	; 0x55c6 <_ZN11EthernetUDP9endPacketEv>
                    if (ret != 0)
    4fe2:	89 2b       	or	r24, r25
    4fe4:	a1 f3       	breq	.-24     	; 0x4fce <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xa0>
    4fe6:	83 e0       	ldi	r24, 0x03	; 3
    4fe8:	88 2e       	mov	r8, r24
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
                        {
                            ret = ProcessResponse(5000, aResult);
    4fea:	91 2c       	mov	r9, r1
    4fec:	a5 01       	movw	r20, r10
    4fee:	68 e8       	ldi	r22, 0x88	; 136
    4ff0:	73 e1       	ldi	r23, 0x13	; 19
    4ff2:	c7 01       	movw	r24, r14
    4ff4:	3b de       	rcall	.-906    	; 0x4c6c <_ZN9DNSClient15ProcessResponseEjR9IPAddress>
    4ff6:	8c 01       	movw	r16, r24
    4ff8:	21 e0       	ldi	r18, 0x01	; 1
    4ffa:	82 1a       	sub	r8, r18
    4ffc:	91 08       	sbc	r9, r1
                    if (ret != 0)
                    {
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
    4ffe:	21 f0       	breq	.+8      	; 0x5008 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xda>
    5000:	0f 3f       	cpi	r16, 0xFF	; 255
    5002:	ff ef       	ldi	r31, 0xFF	; 255
    5004:	1f 07       	cpc	r17, r31
            }
            retries++;
        }

        // We're done with the socket now
        iUdp.stop();
    5006:	91 f3       	breq	.-28     	; 0x4fec <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xbe>
    5008:	c6 01       	movw	r24, r12
    500a:	c2 d2       	rcall	.+1412   	; 0x5590 <_ZN11EthernetUDP4stopEv>
    500c:	05 c0       	rjmp	.+10     	; 0x5018 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xea>

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
    {
        // It is, our work here is done
        return 1;
    500e:	01 e0       	ldi	r16, 0x01	; 1
    5010:	10 e0       	ldi	r17, 0x00	; 0
    5012:	02 c0       	rjmp	.+4      	; 0x5018 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xea>
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    {
        return INVALID_SERVER;
    5014:	0e ef       	ldi	r16, 0xFE	; 254
    5016:	1f ef       	ldi	r17, 0xFF	; 255
        // We're done with the socket now
        iUdp.stop();
    }

    return ret;
}
    5018:	c8 01       	movw	r24, r16
    501a:	26 96       	adiw	r28, 0x06	; 6
    501c:	0f b6       	in	r0, 0x3f	; 63
    501e:	f8 94       	cli
    5020:	de bf       	out	0x3e, r29	; 62
    5022:	0f be       	out	0x3f, r0	; 63
    5024:	cd bf       	out	0x3d, r28	; 61
    5026:	df 91       	pop	r29
    5028:	cf 91       	pop	r28
    502a:	1f 91       	pop	r17
    502c:	0f 91       	pop	r16
    502e:	ff 90       	pop	r15
    5030:	ef 90       	pop	r14
    5032:	df 90       	pop	r13
    5034:	cf 90       	pop	r12
    5036:	bf 90       	pop	r11
    5038:	af 90       	pop	r10
    503a:	9f 90       	pop	r9
    503c:	8f 90       	pop	r8
    503e:	08 95       	ret

00005040 <_ZN10W5500Class8writeGAREPh>:
    return _dnsDomainName;
}

char* EthernetClass::hostName(){
    return _hostName;
}
    5040:	24 e0       	ldi	r18, 0x04	; 4
    5042:	30 e0       	ldi	r19, 0x00	; 0
    5044:	ac 01       	movw	r20, r24
    5046:	64 e0       	ldi	r22, 0x04	; 4
    5048:	81 e0       	ldi	r24, 0x01	; 1
    504a:	90 e0       	ldi	r25, 0x00	; 0
    504c:	35 c6       	rjmp	.+3178   	; 0x5cb8 <_ZN10W5500Class5writeEjhPKhj>

0000504e <_ZN10W5500Class9writeSUBREPh>:
    504e:	24 e0       	ldi	r18, 0x04	; 4
    5050:	30 e0       	ldi	r19, 0x00	; 0
    5052:	ac 01       	movw	r20, r24
    5054:	64 e0       	ldi	r22, 0x04	; 4
    5056:	85 e0       	ldi	r24, 0x05	; 5
    5058:	90 e0       	ldi	r25, 0x00	; 0
    505a:	2e c6       	rjmp	.+3164   	; 0x5cb8 <_ZN10W5500Class5writeEjhPKhj>

0000505c <_ZN10W5500Class9writeSHAREPh>:
    505c:	26 e0       	ldi	r18, 0x06	; 6
    505e:	30 e0       	ldi	r19, 0x00	; 0
    5060:	ac 01       	movw	r20, r24
    5062:	64 e0       	ldi	r22, 0x04	; 4
    5064:	89 e0       	ldi	r24, 0x09	; 9
    5066:	90 e0       	ldi	r25, 0x00	; 0
    5068:	27 c6       	rjmp	.+3150   	; 0x5cb8 <_ZN10W5500Class5writeEjhPKhj>

0000506a <_ZN10W5500Class9writeSIPREPh>:
    506a:	24 e0       	ldi	r18, 0x04	; 4
    506c:	30 e0       	ldi	r19, 0x00	; 0
    506e:	ac 01       	movw	r20, r24
    5070:	64 e0       	ldi	r22, 0x04	; 4
    5072:	8f e0       	ldi	r24, 0x0F	; 15
    5074:	90 e0       	ldi	r25, 0x00	; 0
    5076:	20 c6       	rjmp	.+3136   	; 0x5cb8 <_ZN10W5500Class5writeEjhPKhj>

00005078 <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_>:
    5078:	8f 92       	push	r8
    507a:	9f 92       	push	r9
    507c:	af 92       	push	r10
    507e:	bf 92       	push	r11
    5080:	cf 92       	push	r12
    5082:	df 92       	push	r13
    5084:	ef 92       	push	r14
    5086:	ff 92       	push	r15
    5088:	0f 93       	push	r16
    508a:	1f 93       	push	r17
    508c:	cf 93       	push	r28
    508e:	df 93       	push	r29
    5090:	4c 01       	movw	r8, r24
    5092:	5b 01       	movw	r10, r22
    5094:	6a 01       	movw	r12, r20
    5096:	e9 01       	movw	r28, r18
    5098:	fc 01       	movw	r30, r24
    509a:	64 85       	ldd	r22, Z+12	; 0x0c
    509c:	85 e5       	ldi	r24, 0x55	; 85
    509e:	9c e0       	ldi	r25, 0x0C	; 12
    50a0:	53 d6       	rcall	.+3238   	; 0x5d48 <_ZN10W5500Class4initEh>
    50a2:	c5 01       	movw	r24, r10
    50a4:	db df       	rcall	.-74     	; 0x505c <_ZN10W5500Class9writeSHAREPh>
    50a6:	c6 01       	movw	r24, r12
    50a8:	02 96       	adiw	r24, 0x02	; 2
    50aa:	df df       	rcall	.-66     	; 0x506a <_ZN10W5500Class9writeSIPREPh>
    50ac:	c8 01       	movw	r24, r16
    50ae:	02 96       	adiw	r24, 0x02	; 2
    50b0:	c7 df       	rcall	.-114    	; 0x5040 <_ZN10W5500Class8writeGAREPh>
    50b2:	c7 01       	movw	r24, r14
    50b4:	02 96       	adiw	r24, 0x02	; 2
    50b6:	cb df       	rcall	.-106    	; 0x504e <_ZN10W5500Class9writeSUBREPh>
    50b8:	8a 81       	ldd	r24, Y+2	; 0x02
    50ba:	9b 81       	ldd	r25, Y+3	; 0x03
    50bc:	ac 81       	ldd	r26, Y+4	; 0x04
    50be:	bd 81       	ldd	r27, Y+5	; 0x05
    50c0:	f4 01       	movw	r30, r8
    50c2:	82 83       	std	Z+2, r24	; 0x02
    50c4:	93 83       	std	Z+3, r25	; 0x03
    50c6:	a4 83       	std	Z+4, r26	; 0x04
    50c8:	b5 83       	std	Z+5, r27	; 0x05
    50ca:	df 91       	pop	r29
    50cc:	cf 91       	pop	r28
    50ce:	1f 91       	pop	r17
    50d0:	0f 91       	pop	r16
    50d2:	ff 90       	pop	r15
    50d4:	ef 90       	pop	r14
    50d6:	df 90       	pop	r13
    50d8:	cf 90       	pop	r12
    50da:	bf 90       	pop	r11
    50dc:	af 90       	pop	r10
    50de:	9f 90       	pop	r9
    50e0:	8f 90       	pop	r8
    50e2:	08 95       	ret

000050e4 <_ZN13EthernetClass11dnsServerIPEv>:
    50e4:	20 e6       	ldi	r18, 0x60	; 96
    50e6:	3a e0       	ldi	r19, 0x0A	; 10
    50e8:	fc 01       	movw	r30, r24
    50ea:	31 83       	std	Z+1, r19	; 0x01
    50ec:	20 83       	st	Z, r18
    50ee:	fb 01       	movw	r30, r22
    50f0:	42 81       	ldd	r20, Z+2	; 0x02
    50f2:	53 81       	ldd	r21, Z+3	; 0x03
    50f4:	64 81       	ldd	r22, Z+4	; 0x04
    50f6:	75 81       	ldd	r23, Z+5	; 0x05
    50f8:	fc 01       	movw	r30, r24
    50fa:	42 83       	std	Z+2, r20	; 0x02
    50fc:	53 83       	std	Z+3, r21	; 0x03
    50fe:	64 83       	std	Z+4, r22	; 0x04
    5100:	75 83       	std	Z+5, r23	; 0x05
    5102:	08 95       	ret

00005104 <_GLOBAL__sub_I__ZN13EthernetClass6_stateE>:

EthernetClass Ethernet;
    5104:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    5106:	00 e0       	ldi	r16, 0x00	; 0
    5108:	20 e0       	ldi	r18, 0x00	; 0
    510a:	40 e0       	ldi	r20, 0x00	; 0
    510c:	60 e0       	ldi	r22, 0x00	; 0
    510e:	88 e3       	ldi	r24, 0x38	; 56
    5110:	9c e0       	ldi	r25, 0x0C	; 12
    5112:	0e 94 9e 38 	call	0x713c	; 0x713c <_ZN9IPAddressC1Ehhhh>
  uint8_t w5500_cspin;

  static uint8_t _state[MAX_SOCK_NUM];
  static uint16_t _server_port[MAX_SOCK_NUM];

  EthernetClass() { _dhcp = NULL; w5500_cspin = 10; }
    5116:	8b e1       	ldi	r24, 0x1B	; 27
    5118:	9c e0       	ldi	r25, 0x0C	; 12
    511a:	0e 94 94 38 	call	0x7128	; 0x7128 <_ZN9IPAddressC1Ev>
    511e:	eb e1       	ldi	r30, 0x1B	; 27
    5120:	fc e0       	ldi	r31, 0x0C	; 12
    5122:	13 86       	std	Z+11, r1	; 0x0b
    5124:	12 86       	std	Z+10, r1	; 0x0a
    5126:	8a e0       	ldi	r24, 0x0A	; 10
    5128:	84 87       	std	Z+12, r24	; 0x0c
    512a:	0f 91       	pop	r16
    512c:	08 95       	ret

0000512e <_ZN14EthernetClientneERKS_>:
uint16_t EthernetClient::_srcport = 1024;

EthernetClient::EthernetClient() : _sock(MAX_SOCK_NUM) {
}

EthernetClient::EthernetClient(uint8_t sock) : _sock(sock) {
    512e:	dc 01       	movw	r26, r24
    5130:	ed 91       	ld	r30, X+
    5132:	fc 91       	ld	r31, X
    5134:	02 8c       	ldd	r0, Z+26	; 0x1a
    5136:	f3 8d       	ldd	r31, Z+27	; 0x1b
    5138:	e0 2d       	mov	r30, r0
    513a:	09 95       	icall
    513c:	91 e0       	ldi	r25, 0x01	; 1
    513e:	89 27       	eor	r24, r25
    5140:	08 95       	ret

00005142 <_ZN14EthernetClient5writeEh>:
    5142:	cf 93       	push	r28
    5144:	df 93       	push	r29
    5146:	1f 92       	push	r1
    5148:	cd b7       	in	r28, 0x3d	; 61
    514a:	de b7       	in	r29, 0x3e	; 62
    514c:	69 83       	std	Y+1, r22	; 0x01
    514e:	dc 01       	movw	r26, r24
    5150:	ed 91       	ld	r30, X+
    5152:	fc 91       	ld	r31, X
    5154:	02 80       	ldd	r0, Z+2	; 0x02
    5156:	f3 81       	ldd	r31, Z+3	; 0x03
    5158:	e0 2d       	mov	r30, r0
    515a:	41 e0       	ldi	r20, 0x01	; 1
    515c:	50 e0       	ldi	r21, 0x00	; 0
    515e:	be 01       	movw	r22, r28
    5160:	6f 5f       	subi	r22, 0xFF	; 255
    5162:	7f 4f       	sbci	r23, 0xFF	; 255
    5164:	09 95       	icall
    5166:	0f 90       	pop	r0
    5168:	df 91       	pop	r29
    516a:	cf 91       	pop	r28
    516c:	08 95       	ret

0000516e <_ZN14EthernetClientcvbEv>:
    516e:	21 e0       	ldi	r18, 0x01	; 1
    5170:	fc 01       	movw	r30, r24
    5172:	84 85       	ldd	r24, Z+12	; 0x0c
    5174:	88 30       	cpi	r24, 0x08	; 8
    5176:	09 f4       	brne	.+2      	; 0x517a <_ZN14EthernetClientcvbEv+0xc>
    5178:	20 e0       	ldi	r18, 0x00	; 0
    517a:	82 2f       	mov	r24, r18
    517c:	08 95       	ret

0000517e <_ZN14EthernetClienteqERKS_>:
    517e:	fc 01       	movw	r30, r24
    5180:	94 85       	ldd	r25, Z+12	; 0x0c
    5182:	fb 01       	movw	r30, r22
    5184:	84 85       	ldd	r24, Z+12	; 0x0c
    5186:	98 13       	cpse	r25, r24
    5188:	03 c0       	rjmp	.+6      	; 0x5190 <_ZN14EthernetClienteqERKS_+0x12>
    518a:	81 e0       	ldi	r24, 0x01	; 1
    518c:	98 30       	cpi	r25, 0x08	; 8
    518e:	09 f4       	brne	.+2      	; 0x5192 <_ZN14EthernetClienteqERKS_+0x14>
    5190:	80 e0       	ldi	r24, 0x00	; 0
    5192:	08 95       	ret

00005194 <_ZN14EthernetClient7connectEPKcj>:
    5194:	cf 92       	push	r12
    5196:	df 92       	push	r13
    5198:	ef 92       	push	r14
    519a:	ff 92       	push	r15
    519c:	0f 93       	push	r16
    519e:	1f 93       	push	r17
    51a0:	cf 93       	push	r28
    51a2:	df 93       	push	r29
    51a4:	cd b7       	in	r28, 0x3d	; 61
    51a6:	de b7       	in	r29, 0x3e	; 62
    51a8:	af 97       	sbiw	r28, 0x2f	; 47
    51aa:	0f b6       	in	r0, 0x3f	; 63
    51ac:	f8 94       	cli
    51ae:	de bf       	out	0x3e, r29	; 62
    51b0:	0f be       	out	0x3f, r0	; 63
    51b2:	cd bf       	out	0x3d, r28	; 61
    51b4:	8c 01       	movw	r16, r24
    51b6:	6b 01       	movw	r12, r22
    51b8:	7a 01       	movw	r14, r20
    51ba:	ce 01       	movw	r24, r28
    51bc:	01 96       	adiw	r24, 0x01	; 1
    51be:	0e 94 94 38 	call	0x7128	; 0x7128 <_ZN9IPAddressC1Ev>
    51c2:	ce 01       	movw	r24, r28
    51c4:	09 96       	adiw	r24, 0x09	; 9
    51c6:	f3 d2       	rcall	.+1510   	; 0x57ae <_ZN11EthernetUDPC1Ev>
    51c8:	ce 01       	movw	r24, r28
    51ca:	8a 96       	adiw	r24, 0x2a	; 42
    51cc:	0e 94 94 38 	call	0x7128	; 0x7128 <_ZN9IPAddressC1Ev>
    51d0:	6b e1       	ldi	r22, 0x1B	; 27
    51d2:	7c e0       	ldi	r23, 0x0C	; 12
    51d4:	ce 01       	movw	r24, r28
    51d6:	84 96       	adiw	r24, 0x24	; 36
    51d8:	85 df       	rcall	.-246    	; 0x50e4 <_ZN13EthernetClass11dnsServerIPEv>
    51da:	be 01       	movw	r22, r28
    51dc:	6c 5d       	subi	r22, 0xDC	; 220
    51de:	7f 4f       	sbci	r23, 0xFF	; 255
    51e0:	ce 01       	movw	r24, r28
    51e2:	01 96       	adiw	r24, 0x01	; 1
    51e4:	4a dc       	rcall	.-1900   	; 0x4a7a <_ZN9DNSClient5beginERK9IPAddress>
    51e6:	ae 01       	movw	r20, r28
    51e8:	46 5d       	subi	r20, 0xD6	; 214
    51ea:	5f 4f       	sbci	r21, 0xFF	; 255
    51ec:	b6 01       	movw	r22, r12
    51ee:	ce 01       	movw	r24, r28
    51f0:	01 96       	adiw	r24, 0x01	; 1
    51f2:	9d de       	rcall	.-710    	; 0x4f2e <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>
    51f4:	81 30       	cpi	r24, 0x01	; 1
    51f6:	91 05       	cpc	r25, r1
    51f8:	c1 f4       	brne	.+48     	; 0x522a <_ZN14EthernetClient7connectEPKcj+0x96>
    51fa:	d8 01       	movw	r26, r16
    51fc:	ed 91       	ld	r30, X+
    51fe:	fc 91       	ld	r31, X
    5200:	06 84       	ldd	r0, Z+14	; 0x0e
    5202:	f7 85       	ldd	r31, Z+15	; 0x0f
    5204:	e0 2d       	mov	r30, r0
    5206:	80 e6       	ldi	r24, 0x60	; 96
    5208:	9a e0       	ldi	r25, 0x0A	; 10
    520a:	9d a3       	std	Y+37, r25	; 0x25
    520c:	8c a3       	std	Y+36, r24	; 0x24
    520e:	8c a5       	ldd	r24, Y+44	; 0x2c
    5210:	9d a5       	ldd	r25, Y+45	; 0x2d
    5212:	ae a5       	ldd	r26, Y+46	; 0x2e
    5214:	bf a5       	ldd	r27, Y+47	; 0x2f
    5216:	8e a3       	std	Y+38, r24	; 0x26
    5218:	9f a3       	std	Y+39, r25	; 0x27
    521a:	a8 a7       	std	Y+40, r26	; 0x28
    521c:	b9 a7       	std	Y+41, r27	; 0x29
    521e:	a7 01       	movw	r20, r14
    5220:	be 01       	movw	r22, r28
    5222:	6c 5d       	subi	r22, 0xDC	; 220
    5224:	7f 4f       	sbci	r23, 0xFF	; 255
    5226:	c8 01       	movw	r24, r16
    5228:	09 95       	icall
    522a:	af 96       	adiw	r28, 0x2f	; 47
    522c:	0f b6       	in	r0, 0x3f	; 63
    522e:	f8 94       	cli
    5230:	de bf       	out	0x3e, r29	; 62
    5232:	0f be       	out	0x3f, r0	; 63
    5234:	cd bf       	out	0x3d, r28	; 61
    5236:	df 91       	pop	r29
    5238:	cf 91       	pop	r28
    523a:	1f 91       	pop	r17
    523c:	0f 91       	pop	r16
    523e:	ff 90       	pop	r15
    5240:	ef 90       	pop	r14
    5242:	df 90       	pop	r13
    5244:	cf 90       	pop	r12
    5246:	08 95       	ret

00005248 <_ZN14EthernetClient5writeEPKhj>:
    5248:	0f 93       	push	r16
    524a:	1f 93       	push	r17
    524c:	cf 93       	push	r28
    524e:	df 93       	push	r29
    5250:	8c 01       	movw	r16, r24
    5252:	d4 2f       	mov	r29, r20
    5254:	c5 2f       	mov	r28, r21
    5256:	fc 01       	movw	r30, r24
    5258:	84 85       	ldd	r24, Z+12	; 0x0c
    525a:	88 30       	cpi	r24, 0x08	; 8
    525c:	41 f4       	brne	.+16     	; 0x526e <_ZN14EthernetClient5writeEPKhj+0x26>
    525e:	81 e0       	ldi	r24, 0x01	; 1
    5260:	90 e0       	ldi	r25, 0x00	; 0
    5262:	f8 01       	movw	r30, r16
    5264:	93 83       	std	Z+3, r25	; 0x03
    5266:	82 83       	std	Z+2, r24	; 0x02
    5268:	80 e0       	ldi	r24, 0x00	; 0
    526a:	90 e0       	ldi	r25, 0x00	; 0
    526c:	05 c0       	rjmp	.+10     	; 0x5278 <_ZN14EthernetClient5writeEPKhj+0x30>
    526e:	cf d3       	rcall	.+1950   	; 0x5a0e <_Z4sendhPKhj>
    5270:	89 2b       	or	r24, r25
    5272:	a9 f3       	breq	.-22     	; 0x525e <_ZN14EthernetClient5writeEPKhj+0x16>
    5274:	8d 2f       	mov	r24, r29
    5276:	9c 2f       	mov	r25, r28
    5278:	df 91       	pop	r29
    527a:	cf 91       	pop	r28
    527c:	1f 91       	pop	r17
    527e:	0f 91       	pop	r16
    5280:	08 95       	ret

00005282 <_ZN14EthernetClient9availableEv>:
    5282:	fc 01       	movw	r30, r24
    5284:	64 85       	ldd	r22, Z+12	; 0x0c
    5286:	68 30       	cpi	r22, 0x08	; 8
    5288:	19 f0       	breq	.+6      	; 0x5290 <_ZN14EthernetClient9availableEv+0xe>
    528a:	85 e5       	ldi	r24, 0x55	; 85
    528c:	9c e0       	ldi	r25, 0x0C	; 12
    528e:	d0 c5       	rjmp	.+2976   	; 0x5e30 <_ZN10W5500Class17getRXReceivedSizeEh>
    5290:	80 e0       	ldi	r24, 0x00	; 0
    5292:	90 e0       	ldi	r25, 0x00	; 0
    5294:	08 95       	ret

00005296 <_ZN14EthernetClient4readEv>:
    5296:	cf 93       	push	r28
    5298:	df 93       	push	r29
    529a:	1f 92       	push	r1
    529c:	cd b7       	in	r28, 0x3d	; 61
    529e:	de b7       	in	r29, 0x3e	; 62
    52a0:	41 e0       	ldi	r20, 0x01	; 1
    52a2:	50 e0       	ldi	r21, 0x00	; 0
    52a4:	be 01       	movw	r22, r28
    52a6:	6f 5f       	subi	r22, 0xFF	; 255
    52a8:	7f 4f       	sbci	r23, 0xFF	; 255
    52aa:	fc 01       	movw	r30, r24
    52ac:	84 85       	ldd	r24, Z+12	; 0x0c
    52ae:	f7 d3       	rcall	.+2030   	; 0x5a9e <_Z4recvhPhi>
    52b0:	18 16       	cp	r1, r24
    52b2:	19 06       	cpc	r1, r25
    52b4:	1c f4       	brge	.+6      	; 0x52bc <_ZN14EthernetClient4readEv+0x26>
    52b6:	89 81       	ldd	r24, Y+1	; 0x01
    52b8:	90 e0       	ldi	r25, 0x00	; 0
    52ba:	02 c0       	rjmp	.+4      	; 0x52c0 <_ZN14EthernetClient4readEv+0x2a>
    52bc:	8f ef       	ldi	r24, 0xFF	; 255
    52be:	9f ef       	ldi	r25, 0xFF	; 255
    52c0:	0f 90       	pop	r0
    52c2:	df 91       	pop	r29
    52c4:	cf 91       	pop	r28
    52c6:	08 95       	ret

000052c8 <_ZN14EthernetClient4readEPhj>:
    52c8:	fc 01       	movw	r30, r24
    52ca:	84 85       	ldd	r24, Z+12	; 0x0c
    52cc:	e8 c3       	rjmp	.+2000   	; 0x5a9e <_Z4recvhPhi>

000052ce <_ZN14EthernetClient4peekEv>:
    52ce:	0f 93       	push	r16
    52d0:	1f 93       	push	r17
    52d2:	cf 93       	push	r28
    52d4:	df 93       	push	r29
    52d6:	1f 92       	push	r1
    52d8:	cd b7       	in	r28, 0x3d	; 61
    52da:	de b7       	in	r29, 0x3e	; 62
    52dc:	8c 01       	movw	r16, r24
    52de:	dc 01       	movw	r26, r24
    52e0:	ed 91       	ld	r30, X+
    52e2:	fc 91       	ld	r31, X
    52e4:	00 84       	ldd	r0, Z+8	; 0x08
    52e6:	f1 85       	ldd	r31, Z+9	; 0x09
    52e8:	e0 2d       	mov	r30, r0
    52ea:	09 95       	icall
    52ec:	89 2b       	or	r24, r25
    52ee:	49 f0       	breq	.+18     	; 0x5302 <_ZN14EthernetClient4peekEv+0x34>
    52f0:	be 01       	movw	r22, r28
    52f2:	6f 5f       	subi	r22, 0xFF	; 255
    52f4:	7f 4f       	sbci	r23, 0xFF	; 255
    52f6:	f8 01       	movw	r30, r16
    52f8:	84 85       	ldd	r24, Z+12	; 0x0c
    52fa:	12 d4       	rcall	.+2084   	; 0x5b20 <_Z4peekhPh>
    52fc:	89 81       	ldd	r24, Y+1	; 0x01
    52fe:	90 e0       	ldi	r25, 0x00	; 0
    5300:	02 c0       	rjmp	.+4      	; 0x5306 <_ZN14EthernetClient4peekEv+0x38>
    5302:	8f ef       	ldi	r24, 0xFF	; 255
    5304:	9f ef       	ldi	r25, 0xFF	; 255
    5306:	0f 90       	pop	r0
    5308:	df 91       	pop	r29
    530a:	cf 91       	pop	r28
    530c:	1f 91       	pop	r17
    530e:	0f 91       	pop	r16
    5310:	08 95       	ret

00005312 <_ZN14EthernetClient5flushEv>:
    5312:	fc 01       	movw	r30, r24
    5314:	84 85       	ldd	r24, Z+12	; 0x0c
    5316:	11 c4       	rjmp	.+2082   	; 0x5b3a <_Z5flushh>

00005318 <_ZN14EthernetClientC1Ev>:
    5318:	fc 01       	movw	r30, r24
    531a:	13 82       	std	Z+3, r1	; 0x03
    531c:	12 82       	std	Z+2, r1	; 0x02
    531e:	88 ee       	ldi	r24, 0xE8	; 232
    5320:	93 e0       	ldi	r25, 0x03	; 3
    5322:	a0 e0       	ldi	r26, 0x00	; 0
    5324:	b0 e0       	ldi	r27, 0x00	; 0
    5326:	84 83       	std	Z+4, r24	; 0x04
    5328:	95 83       	std	Z+5, r25	; 0x05
    532a:	a6 83       	std	Z+6, r26	; 0x06
    532c:	b7 83       	std	Z+7, r27	; 0x07
    532e:	8c ed       	ldi	r24, 0xDC	; 220
    5330:	99 e0       	ldi	r25, 0x09	; 9
    5332:	91 83       	std	Z+1, r25	; 0x01
    5334:	80 83       	st	Z, r24
    5336:	88 e0       	ldi	r24, 0x08	; 8
    5338:	84 87       	std	Z+12, r24	; 0x0c
    533a:	08 95       	ret

0000533c <_ZN14EthernetClient6statusEv>:
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
}

uint8_t EthernetClient::status() {
  if (_sock == MAX_SOCK_NUM) return SnSR::CLOSED;
    533c:	fc 01       	movw	r30, r24
    533e:	64 85       	ldd	r22, Z+12	; 0x0c
    5340:	68 30       	cpi	r22, 0x08	; 8
    5342:	39 f0       	breq	.+14     	; 0x5352 <_ZN14EthernetClient6statusEv+0x16>

extern W5500Class w5500;

uint8_t W5500Class::readSn(SOCKET _s, uint16_t _addr) {
    uint8_t cntl_byte = (_s<<5)+0x08;
    return read(_addr, cntl_byte);
    5344:	62 95       	swap	r22
    5346:	66 0f       	add	r22, r22
    5348:	60 7e       	andi	r22, 0xE0	; 224
    534a:	68 5f       	subi	r22, 0xF8	; 248
    534c:	83 e0       	ldi	r24, 0x03	; 3
    534e:	90 e0       	ldi	r25, 0x00	; 0
    5350:	df c4       	rjmp	.+2494   	; 0x5d10 <_ZN10W5500Class4readEjh>
  return w5500.readSnSR(_sock);
}
    5352:	80 e0       	ldi	r24, 0x00	; 0
    5354:	08 95       	ret

00005356 <_ZN14EthernetClient9connectedEv>:

  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
    5356:	cf 93       	push	r28
    5358:	df 93       	push	r29
  if (_sock == MAX_SOCK_NUM) return 0;
    535a:	fc 01       	movw	r30, r24
    535c:	24 85       	ldd	r18, Z+12	; 0x0c
    535e:	28 30       	cpi	r18, 0x08	; 8
    5360:	c9 f0       	breq	.+50     	; 0x5394 <_ZN14EthernetClient9connectedEv+0x3e>
    5362:	ec 01       	movw	r28, r24
  
  uint8_t s = status();
    5364:	eb df       	rcall	.-42     	; 0x533c <_ZN14EthernetClient6statusEv>
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
    5366:	84 31       	cpi	r24, 0x14	; 20
    5368:	81 f0       	breq	.+32     	; 0x538a <_ZN14EthernetClient9connectedEv+0x34>

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
  
  uint8_t s = status();
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    536a:	88 23       	and	r24, r24
    536c:	71 f0       	breq	.+28     	; 0x538a <_ZN14EthernetClient9connectedEv+0x34>
    536e:	88 31       	cpi	r24, 0x18	; 24
    5370:	61 f0       	breq	.+24     	; 0x538a <_ZN14EthernetClient9connectedEv+0x34>
    (s == SnSR::CLOSE_WAIT && !available()));
    5372:	8c 31       	cpi	r24, 0x1C	; 28
    5374:	61 f4       	brne	.+24     	; 0x538e <_ZN14EthernetClient9connectedEv+0x38>
    5376:	e8 81       	ld	r30, Y
    5378:	f9 81       	ldd	r31, Y+1	; 0x01
    537a:	00 84       	ldd	r0, Z+8	; 0x08
    537c:	f1 85       	ldd	r31, Z+9	; 0x09
    537e:	e0 2d       	mov	r30, r0
    5380:	ce 01       	movw	r24, r28
    5382:	09 95       	icall
    5384:	21 e0       	ldi	r18, 0x01	; 1
    5386:	89 2b       	or	r24, r25
    5388:	19 f4       	brne	.+6      	; 0x5390 <_ZN14EthernetClient9connectedEv+0x3a>
    538a:	20 e0       	ldi	r18, 0x00	; 0
    538c:	01 c0       	rjmp	.+2      	; 0x5390 <_ZN14EthernetClient9connectedEv+0x3a>
    538e:	21 e0       	ldi	r18, 0x01	; 1
    5390:	82 2f       	mov	r24, r18
    5392:	01 c0       	rjmp	.+2      	; 0x5396 <_ZN14EthernetClient9connectedEv+0x40>
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
    5394:	80 e0       	ldi	r24, 0x00	; 0
  
  uint8_t s = status();
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
}
    5396:	df 91       	pop	r29
    5398:	cf 91       	pop	r28
    539a:	08 95       	ret

0000539c <_ZN14EthernetClient4stopEv>:

void EthernetClient::flush() {
  ::flush(_sock);
}

void EthernetClient::stop() {
    539c:	cf 92       	push	r12
    539e:	df 92       	push	r13
    53a0:	ef 92       	push	r14
    53a2:	ff 92       	push	r15
    53a4:	cf 93       	push	r28
    53a6:	df 93       	push	r29
    53a8:	ec 01       	movw	r28, r24
  if (_sock == MAX_SOCK_NUM)
    53aa:	8c 85       	ldd	r24, Y+12	; 0x0c
    53ac:	88 30       	cpi	r24, 0x08	; 8
    53ae:	69 f1       	breq	.+90     	; 0x540a <_ZN14EthernetClient4stopEv+0x6e>
    return;

  // attempt to close the connection gracefully (send a FIN to other side)
  disconnect(_sock);
    53b0:	29 d3       	rcall	.+1618   	; 0x5a04 <_Z10disconnecth>
  unsigned long start = millis();
    53b2:	0e 94 24 3a 	call	0x7448	; 0x7448 <millis>
    53b6:	6b 01       	movw	r12, r22
    53b8:	7c 01       	movw	r14, r24

  // wait a second for the connection to close
  while (status() != SnSR::CLOSED && millis() - start < 1000)
    53ba:	ce 01       	movw	r24, r28
    53bc:	bf df       	rcall	.-130    	; 0x533c <_ZN14EthernetClient6statusEv>
    53be:	88 23       	and	r24, r24
    53c0:	a1 f0       	breq	.+40     	; 0x53ea <_ZN14EthernetClient4stopEv+0x4e>
    53c2:	0e 94 24 3a 	call	0x7448	; 0x7448 <millis>
    53c6:	dc 01       	movw	r26, r24
    53c8:	cb 01       	movw	r24, r22
    53ca:	8c 19       	sub	r24, r12
    53cc:	9d 09       	sbc	r25, r13
    53ce:	ae 09       	sbc	r26, r14
    53d0:	bf 09       	sbc	r27, r15
    53d2:	88 3e       	cpi	r24, 0xE8	; 232
    53d4:	93 40       	sbci	r25, 0x03	; 3
    53d6:	a1 05       	cpc	r26, r1
    53d8:	b1 05       	cpc	r27, r1
    53da:	38 f4       	brcc	.+14     	; 0x53ea <_ZN14EthernetClient4stopEv+0x4e>
    delay(1);
    53dc:	61 e0       	ldi	r22, 0x01	; 1
    53de:	70 e0       	ldi	r23, 0x00	; 0
    53e0:	80 e0       	ldi	r24, 0x00	; 0
    53e2:	90 e0       	ldi	r25, 0x00	; 0
    53e4:	0e 94 55 3a 	call	0x74aa	; 0x74aa <delay>

  // if it hasn't closed, close it forcefully
  if (status() != SnSR::CLOSED)
    53e8:	e8 cf       	rjmp	.-48     	; 0x53ba <_ZN14EthernetClient4stopEv+0x1e>
    53ea:	ce 01       	movw	r24, r28
    53ec:	a7 df       	rcall	.-178    	; 0x533c <_ZN14EthernetClient6statusEv>
    53ee:	88 23       	and	r24, r24
    close(_sock);
    53f0:	11 f0       	breq	.+4      	; 0x53f6 <_ZN14EthernetClient4stopEv+0x5a>
    53f2:	8c 85       	ldd	r24, Y+12	; 0x0c
    53f4:	96 d2       	rcall	.+1324   	; 0x5922 <_Z5closeh>

  EthernetClass::_server_port[_sock] = 0;
    53f6:	ec 85       	ldd	r30, Y+12	; 0x0c
    53f8:	f0 e0       	ldi	r31, 0x00	; 0
    53fa:	ee 0f       	add	r30, r30
    53fc:	ff 1f       	adc	r31, r31
    53fe:	e8 5d       	subi	r30, 0xD8	; 216
    5400:	f3 4f       	sbci	r31, 0xF3	; 243
    5402:	11 82       	std	Z+1, r1	; 0x01
    5404:	10 82       	st	Z, r1
  _sock = MAX_SOCK_NUM;
    5406:	88 e0       	ldi	r24, 0x08	; 8
    5408:	8c 87       	std	Y+12, r24	; 0x0c
}
    540a:	df 91       	pop	r29
    540c:	cf 91       	pop	r28
    540e:	ff 90       	pop	r15
    5410:	ef 90       	pop	r14
    5412:	df 90       	pop	r13
    5414:	cf 90       	pop	r12
    5416:	08 95       	ret

00005418 <_ZN14EthernetClient7connectE9IPAddressj>:
  } else {
    return ret;
  }
}

int EthernetClient::connect(IPAddress ip, uint16_t port) {
    5418:	cf 92       	push	r12
    541a:	df 92       	push	r13
    541c:	ff 92       	push	r15
    541e:	0f 93       	push	r16
    5420:	1f 93       	push	r17
    5422:	cf 93       	push	r28
    5424:	df 93       	push	r29
  if (_sock != MAX_SOCK_NUM)
    5426:	fc 01       	movw	r30, r24
    5428:	24 85       	ldd	r18, Z+12	; 0x0c
    542a:	28 30       	cpi	r18, 0x08	; 8
    542c:	c1 f5       	brne	.+112    	; 0x549e <_ZN14EthernetClient7connectE9IPAddressj+0x86>
    542e:	6a 01       	movw	r12, r20
    5430:	8b 01       	movw	r16, r22
    5432:	ec 01       	movw	r28, r24
    5434:	f1 2c       	mov	r15, r1
    5436:	6f 2d       	mov	r22, r15
    5438:	62 95       	swap	r22
    543a:	66 0f       	add	r22, r22
    543c:	60 7e       	andi	r22, 0xE0	; 224
    543e:	68 5f       	subi	r22, 0xF8	; 248
    5440:	83 e0       	ldi	r24, 0x03	; 3
    5442:	90 e0       	ldi	r25, 0x00	; 0
    5444:	65 d4       	rcall	.+2250   	; 0x5d10 <_ZN10W5500Class4readEjh>
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
    5446:	81 11       	cpse	r24, r1
    5448:	02 c0       	rjmp	.+4      	; 0x544e <_ZN14EthernetClient7connectE9IPAddressj+0x36>
      _sock = i;
    544a:	fc 86       	std	Y+12, r15	; 0x0c
    544c:	07 c0       	rjmp	.+14     	; 0x545c <_ZN14EthernetClient7connectE9IPAddressj+0x44>
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
    544e:	8b 7f       	andi	r24, 0xFB	; 251
    5450:	88 31       	cpi	r24, 0x18	; 24
    5452:	d9 f3       	breq	.-10     	; 0x544a <_ZN14EthernetClient7connectE9IPAddressj+0x32>
    5454:	f3 94       	inc	r15

int EthernetClient::connect(IPAddress ip, uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    5456:	f8 e0       	ldi	r31, 0x08	; 8
    5458:	ff 12       	cpse	r15, r31
    545a:	ed cf       	rjmp	.-38     	; 0x5436 <_ZN14EthernetClient7connectE9IPAddressj+0x1e>
      _sock = i;
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
    545c:	8c 85       	ldd	r24, Y+12	; 0x0c
    545e:	88 30       	cpi	r24, 0x08	; 8
    5460:	f1 f0       	breq	.+60     	; 0x549e <_ZN14EthernetClient7connectE9IPAddressj+0x86>
    return 0;

  _srcport++;
    5462:	20 91 67 01 	lds	r18, 0x0167	; 0x800167 <_ZN14EthernetClient8_srcportE>
    5466:	30 91 68 01 	lds	r19, 0x0168	; 0x800168 <_ZN14EthernetClient8_srcportE+0x1>
    546a:	2f 5f       	subi	r18, 0xFF	; 255
    546c:	3f 4f       	sbci	r19, 0xFF	; 255
  if (_srcport == 0) _srcport = 1024;
    546e:	11 f4       	brne	.+4      	; 0x5474 <_ZN14EthernetClient7connectE9IPAddressj+0x5c>
    5470:	20 e0       	ldi	r18, 0x00	; 0
    5472:	34 e0       	ldi	r19, 0x04	; 4
    5474:	30 93 68 01 	sts	0x0168, r19	; 0x800168 <_ZN14EthernetClient8_srcportE+0x1>
    5478:	20 93 67 01 	sts	0x0167, r18	; 0x800167 <_ZN14EthernetClient8_srcportE>
  socket(_sock, SnMR::TCP, _srcport, 0);
    547c:	40 91 67 01 	lds	r20, 0x0167	; 0x800167 <_ZN14EthernetClient8_srcportE>
    5480:	50 91 68 01 	lds	r21, 0x0168	; 0x800168 <_ZN14EthernetClient8_srcportE+0x1>
    5484:	20 e0       	ldi	r18, 0x00	; 0
    5486:	61 e0       	ldi	r22, 0x01	; 1
    5488:	57 d2       	rcall	.+1198   	; 0x5938 <_Z6sockethhjh>

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    548a:	b8 01       	movw	r22, r16
    548c:	6e 5f       	subi	r22, 0xFE	; 254
    548e:	7f 4f       	sbci	r23, 0xFF	; 255

  if (!::connect(_sock, rawIPAddress(ip), port)) {
    5490:	a6 01       	movw	r20, r12
    5492:	8c 85       	ldd	r24, Y+12	; 0x0c
    5494:	84 d2       	rcall	.+1288   	; 0x599e <_Z7connecthPhj>
    5496:	81 11       	cpse	r24, r1
    5498:	05 c0       	rjmp	.+10     	; 0x54a4 <_ZN14EthernetClient7connectE9IPAddressj+0x8c>
    _sock = MAX_SOCK_NUM;
    549a:	88 e0       	ldi	r24, 0x08	; 8
    549c:	8c 87       	std	Y+12, r24	; 0x0c
    return 0;
    549e:	80 e0       	ldi	r24, 0x00	; 0
    54a0:	90 e0       	ldi	r25, 0x00	; 0
  }

  while (status() != SnSR::ESTABLISHED) {
    54a2:	0f c0       	rjmp	.+30     	; 0x54c2 <_ZN14EthernetClient7connectE9IPAddressj+0xaa>
    54a4:	ce 01       	movw	r24, r28
    54a6:	4a df       	rcall	.-364    	; 0x533c <_ZN14EthernetClient6statusEv>
    54a8:	87 31       	cpi	r24, 0x17	; 23
    54aa:	49 f0       	breq	.+18     	; 0x54be <_ZN14EthernetClient7connectE9IPAddressj+0xa6>
    delay(1);
    54ac:	61 e0       	ldi	r22, 0x01	; 1
    54ae:	70 e0       	ldi	r23, 0x00	; 0
    54b0:	80 e0       	ldi	r24, 0x00	; 0
    54b2:	90 e0       	ldi	r25, 0x00	; 0
    54b4:	0e 94 55 3a 	call	0x74aa	; 0x74aa <delay>
    if (status() == SnSR::CLOSED) {
    54b8:	ce 01       	movw	r24, r28
    54ba:	40 df       	rcall	.-384    	; 0x533c <_ZN14EthernetClient6statusEv>
    54bc:	ec cf       	rjmp	.-40     	; 0x5496 <_ZN14EthernetClient7connectE9IPAddressj+0x7e>
      _sock = MAX_SOCK_NUM;
      return 0;
    }
  }

  return 1;
    54be:	81 e0       	ldi	r24, 0x01	; 1
    54c0:	90 e0       	ldi	r25, 0x00	; 0
}
    54c2:	df 91       	pop	r29
    54c4:	cf 91       	pop	r28
    54c6:	1f 91       	pop	r17
    54c8:	0f 91       	pop	r16
    54ca:	ff 90       	pop	r15
    54cc:	df 90       	pop	r13
    54ce:	cf 90       	pop	r12
    54d0:	08 95       	ret

000054d2 <_GLOBAL__sub_I__ZN14EthernetClient8_srcportE>:
  return _sock != MAX_SOCK_NUM;
}

bool EthernetClient::operator==(const EthernetClient& rhs) {
  return _sock == rhs._sock && _sock != MAX_SOCK_NUM && rhs._sock != MAX_SOCK_NUM;
}
    54d2:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    54d4:	00 e0       	ldi	r16, 0x00	; 0
    54d6:	20 e0       	ldi	r18, 0x00	; 0
    54d8:	40 e0       	ldi	r20, 0x00	; 0
    54da:	60 e0       	ldi	r22, 0x00	; 0
    54dc:	8e e3       	ldi	r24, 0x3E	; 62
    54de:	9c e0       	ldi	r25, 0x0C	; 12
    54e0:	0e 94 9e 38 	call	0x713c	; 0x713c <_ZN9IPAddressC1Ehhhh>
    54e4:	0f 91       	pop	r16
    54e6:	08 95       	ret

000054e8 <_GLOBAL__sub_I__ZN14EthernetServerC2Ej>:
      n += client.write(buffer, size);
    }
  }
  
  return n;
}
    54e8:	0f 93       	push	r16
    54ea:	00 e0       	ldi	r16, 0x00	; 0
    54ec:	20 e0       	ldi	r18, 0x00	; 0
    54ee:	40 e0       	ldi	r20, 0x00	; 0
    54f0:	60 e0       	ldi	r22, 0x00	; 0
    54f2:	84 e4       	ldi	r24, 0x44	; 68
    54f4:	9c e0       	ldi	r25, 0x0C	; 12
    54f6:	0e 94 9e 38 	call	0x713c	; 0x713c <_ZN9IPAddressC1Ehhhh>
    54fa:	0f 91       	pop	r16
    54fc:	08 95       	ret

000054fe <_ZN3UDP14beginMulticastE9IPAddressj>:

class UDP : public Stream {

public:
  virtual uint8_t begin(uint16_t) =0;  // initialize, start listening on specified port. Returns 1 if successful, 0 if there are no sockets available to use
  virtual uint8_t beginMulticast(IPAddress, uint16_t) { return 0; }  // initialize, start listening on specified multicast IP address and port. Returns 1 if successful, 0 on failure
    54fe:	80 e0       	ldi	r24, 0x00	; 0
    5500:	08 95       	ret

00005502 <_ZN11EthernetUDP4readEPcj>:
  // Read up to len bytes from the current packet and place them into buffer
  // Returns the number of bytes read, or 0 if none are available
  virtual int read(unsigned char* buffer, size_t len);
  // Read up to len characters from the current packet and place them into buffer
  // Returns the number of characters read, or 0 if none are available
  virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
    5502:	dc 01       	movw	r26, r24
    5504:	ed 91       	ld	r30, X+
    5506:	fc 91       	ld	r31, X
    5508:	04 8c       	ldd	r0, Z+28	; 0x1c
    550a:	f5 8d       	ldd	r31, Z+29	; 0x1d
    550c:	e0 2d       	mov	r30, r0
    550e:	09 94       	ijmp

00005510 <_ZN11EthernetUDP8remoteIPEv>:
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    5510:	20 e6       	ldi	r18, 0x60	; 96
    5512:	3a e0       	ldi	r19, 0x0A	; 10
    5514:	fc 01       	movw	r30, r24
    5516:	31 83       	std	Z+1, r19	; 0x01
    5518:	20 83       	st	Z, r18
    551a:	fb 01       	movw	r30, r22
    551c:	41 89       	ldd	r20, Z+17	; 0x11
    551e:	52 89       	ldd	r21, Z+18	; 0x12
    5520:	63 89       	ldd	r22, Z+19	; 0x13
    5522:	74 89       	ldd	r23, Z+20	; 0x14
    5524:	fc 01       	movw	r30, r24
    5526:	42 83       	std	Z+2, r20	; 0x02
    5528:	53 83       	std	Z+3, r21	; 0x03
    552a:	64 83       	std	Z+4, r22	; 0x04
    552c:	75 83       	std	Z+5, r23	; 0x05
  // Return the next byte from the current packet without moving on to the next byte
  virtual int peek();
  virtual void flush();	// Finish reading the current packet

  // Return the IP address of the host who sent the current incoming packet
  virtual IPAddress remoteIP() { return _remoteIP; };
    552e:	08 95       	ret

00005530 <_ZN11EthernetUDP10remotePortEv>:
  // Return the port of the host who sent the current incoming packet
  virtual uint16_t remotePort() { return _remotePort; };
    5530:	fc 01       	movw	r30, r24
    5532:	85 89       	ldd	r24, Z+21	; 0x15
    5534:	96 89       	ldd	r25, Z+22	; 0x16
    5536:	08 95       	ret

00005538 <_ZN11EthernetUDP9availableEv>:

/* return number of bytes available in the current packet,
   will return zero if parsePacket hasn't been called yet */
int EthernetUDP::available() {
  return _remaining;
}
    5538:	fc 01       	movw	r30, r24
    553a:	81 8d       	ldd	r24, Z+25	; 0x19
    553c:	92 8d       	ldd	r25, Z+26	; 0x1a
    553e:	08 95       	ret

00005540 <_ZN11EthernetUDP5writeEh>:
{
  return sendUDP(_sock);
}

size_t EthernetUDP::write(uint8_t byte)
{
    5540:	cf 93       	push	r28
    5542:	df 93       	push	r29
    5544:	1f 92       	push	r1
    5546:	cd b7       	in	r28, 0x3d	; 61
    5548:	de b7       	in	r29, 0x3e	; 62
    554a:	69 83       	std	Y+1, r22	; 0x01
  return write(&byte, 1);
    554c:	dc 01       	movw	r26, r24
    554e:	ed 91       	ld	r30, X+
    5550:	fc 91       	ld	r31, X
    5552:	02 80       	ldd	r0, Z+2	; 0x02
    5554:	f3 81       	ldd	r31, Z+3	; 0x03
    5556:	e0 2d       	mov	r30, r0
    5558:	41 e0       	ldi	r20, 0x01	; 1
    555a:	50 e0       	ldi	r21, 0x00	; 0
    555c:	be 01       	movw	r22, r28
    555e:	6f 5f       	subi	r22, 0xFF	; 255
    5560:	7f 4f       	sbci	r23, 0xFF	; 255
    5562:	09 95       	icall
}
    5564:	0f 90       	pop	r0
    5566:	df 91       	pop	r29
    5568:	cf 91       	pop	r28
    556a:	08 95       	ret

0000556c <_ZN11EthernetUDP5flushEv>:
  ::peek(_sock, &b);
  return b;
}

void EthernetUDP::flush()
{
    556c:	cf 93       	push	r28
    556e:	df 93       	push	r29
    5570:	ec 01       	movw	r28, r24
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5500 always behaves :)

  while (_remaining)
    5572:	89 8d       	ldd	r24, Y+25	; 0x19
    5574:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5576:	89 2b       	or	r24, r25
    5578:	41 f0       	breq	.+16     	; 0x558a <_ZN11EthernetUDP5flushEv+0x1e>
  {
    read();
    557a:	e8 81       	ld	r30, Y
    557c:	f9 81       	ldd	r31, Y+1	; 0x01
    557e:	02 84       	ldd	r0, Z+10	; 0x0a
    5580:	f3 85       	ldd	r31, Z+11	; 0x0b
    5582:	e0 2d       	mov	r30, r0
    5584:	ce 01       	movw	r24, r28
    5586:	09 95       	icall
{
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5500 always behaves :)

  while (_remaining)
    5588:	f4 cf       	rjmp	.-24     	; 0x5572 <_ZN11EthernetUDP5flushEv+0x6>
  {
    read();
  }
}
    558a:	df 91       	pop	r29
    558c:	cf 91       	pop	r28
    558e:	08 95       	ret

00005590 <_ZN11EthernetUDP4stopEv>:
  return _remaining;
}

/* Release any resources being used by this EthernetUDP instance */
void EthernetUDP::stop()
{
    5590:	cf 93       	push	r28
    5592:	df 93       	push	r29
    5594:	ec 01       	movw	r28, r24
  if (_sock == MAX_SOCK_NUM)
    5596:	8c 85       	ldd	r24, Y+12	; 0x0c
    5598:	88 30       	cpi	r24, 0x08	; 8
    559a:	59 f0       	breq	.+22     	; 0x55b2 <_ZN11EthernetUDP4stopEv+0x22>
    return;

  close(_sock);
    559c:	c2 d1       	rcall	.+900    	; 0x5922 <_Z5closeh>

  EthernetClass::_server_port[_sock] = 0;
    559e:	ec 85       	ldd	r30, Y+12	; 0x0c
    55a0:	f0 e0       	ldi	r31, 0x00	; 0
    55a2:	ee 0f       	add	r30, r30
    55a4:	ff 1f       	adc	r31, r31
    55a6:	e8 5d       	subi	r30, 0xD8	; 216
    55a8:	f3 4f       	sbci	r31, 0xF3	; 243
    55aa:	11 82       	std	Z+1, r1	; 0x01
    55ac:	10 82       	st	Z, r1
  _sock = MAX_SOCK_NUM;
    55ae:	88 e0       	ldi	r24, 0x08	; 8
    55b0:	8c 87       	std	Y+12, r24	; 0x0c
}
    55b2:	df 91       	pop	r29
    55b4:	cf 91       	pop	r28
    55b6:	08 95       	ret

000055b8 <_ZN11EthernetUDP11beginPacketE9IPAddressj>:
  }
}

int EthernetUDP::beginPacket(IPAddress ip, uint16_t port)
{
  _offset = 0;
    55b8:	fc 01       	movw	r30, r24
    55ba:	10 8e       	std	Z+24, r1	; 0x18
    55bc:	17 8a       	std	Z+23, r1	; 0x17

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    55be:	6e 5f       	subi	r22, 0xFE	; 254
    55c0:	7f 4f       	sbci	r23, 0xFF	; 255
  return startUDP(_sock, rawIPAddress(ip), port);
    55c2:	84 85       	ldd	r24, Z+12	; 0x0c
    55c4:	e6 c2       	rjmp	.+1484   	; 0x5b92 <_Z8startUDPhPhj>

000055c6 <_ZN11EthernetUDP9endPacketEv>:
}

int EthernetUDP::endPacket()
{
  return sendUDP(_sock);
    55c6:	fc 01       	movw	r30, r24
    55c8:	84 85       	ldd	r24, Z+12	; 0x0c
    55ca:	06 c3       	rjmp	.+1548   	; 0x5bd8 <_Z7sendUDPh>

000055cc <_ZN11EthernetUDP5writeEPKhj>:
{
  return write(&byte, 1);
}

size_t EthernetUDP::write(const uint8_t *buffer, size_t size)
{
    55cc:	cf 93       	push	r28
    55ce:	df 93       	push	r29
    55d0:	ec 01       	movw	r28, r24
    55d2:	9a 01       	movw	r18, r20
  uint16_t bytes_written = bufferData(_sock, _offset, buffer, size);
    55d4:	8f 89       	ldd	r24, Y+23	; 0x17
    55d6:	98 8d       	ldd	r25, Y+24	; 0x18
    55d8:	ab 01       	movw	r20, r22
    55da:	bc 01       	movw	r22, r24
    55dc:	8c 85       	ldd	r24, Y+12	; 0x0c
    55de:	ae d2       	rcall	.+1372   	; 0x5b3c <_Z10bufferDatahjPKhj>
  _offset += bytes_written;
    55e0:	2f 89       	ldd	r18, Y+23	; 0x17
    55e2:	38 8d       	ldd	r19, Y+24	; 0x18
    55e4:	28 0f       	add	r18, r24
    55e6:	39 1f       	adc	r19, r25
    55e8:	38 8f       	std	Y+24, r19	; 0x18
    55ea:	2f 8b       	std	Y+23, r18	; 0x17
  return bytes_written;
}
    55ec:	df 91       	pop	r29
    55ee:	cf 91       	pop	r28
    55f0:	08 95       	ret

000055f2 <_ZN11EthernetUDP4readEv>:
  // There aren't any packets available
  return 0;
}

int EthernetUDP::read()
{
    55f2:	0f 93       	push	r16
    55f4:	1f 93       	push	r17
    55f6:	cf 93       	push	r28
    55f8:	df 93       	push	r29
    55fa:	1f 92       	push	r1
    55fc:	cd b7       	in	r28, 0x3d	; 61
    55fe:	de b7       	in	r29, 0x3e	; 62
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
    5600:	fc 01       	movw	r30, r24
    5602:	21 8d       	ldd	r18, Z+25	; 0x19
    5604:	32 8d       	ldd	r19, Z+26	; 0x1a
    5606:	23 2b       	or	r18, r19
    5608:	59 f0       	breq	.+22     	; 0x5620 <_ZN11EthernetUDP4readEv+0x2e>
    560a:	8c 01       	movw	r16, r24
    560c:	41 e0       	ldi	r20, 0x01	; 1
    560e:	50 e0       	ldi	r21, 0x00	; 0
    5610:	be 01       	movw	r22, r28
    5612:	6f 5f       	subi	r22, 0xFF	; 255
    5614:	7f 4f       	sbci	r23, 0xFF	; 255
    5616:	84 85       	ldd	r24, Z+12	; 0x0c
    5618:	42 d2       	rcall	.+1156   	; 0x5a9e <_Z4recvhPhi>
    561a:	18 16       	cp	r1, r24
    561c:	19 06       	cpc	r1, r25
    561e:	1c f0       	brlt	.+6      	; 0x5626 <_ZN11EthernetUDP4readEv+0x34>
    _remaining--;
    return byte;
  }

  // If we get here, there's no data available
  return -1;
    5620:	8f ef       	ldi	r24, 0xFF	; 255
    5622:	9f ef       	ldi	r25, 0xFF	; 255
    5624:	08 c0       	rjmp	.+16     	; 0x5636 <_ZN11EthernetUDP4readEv+0x44>
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
  {
    // We read things without any problems
    _remaining--;
    5626:	f8 01       	movw	r30, r16
    5628:	81 8d       	ldd	r24, Z+25	; 0x19
    562a:	92 8d       	ldd	r25, Z+26	; 0x1a
    562c:	01 97       	sbiw	r24, 0x01	; 1
    562e:	92 8f       	std	Z+26, r25	; 0x1a
    5630:	81 8f       	std	Z+25, r24	; 0x19
    return byte;
    5632:	89 81       	ldd	r24, Y+1	; 0x01
    5634:	90 e0       	ldi	r25, 0x00	; 0
  }

  // If we get here, there's no data available
  return -1;
}
    5636:	0f 90       	pop	r0
    5638:	df 91       	pop	r29
    563a:	cf 91       	pop	r28
    563c:	1f 91       	pop	r17
    563e:	0f 91       	pop	r16
    5640:	08 95       	ret

00005642 <_ZN11EthernetUDP4readEPhj>:

int EthernetUDP::read(unsigned char* buffer, size_t len)
{
    5642:	cf 93       	push	r28
    5644:	df 93       	push	r29

  if (_remaining > 0)
    5646:	fc 01       	movw	r30, r24
    5648:	21 8d       	ldd	r18, Z+25	; 0x19
    564a:	32 8d       	ldd	r19, Z+26	; 0x1a
    564c:	21 15       	cp	r18, r1
    564e:	31 05       	cpc	r19, r1
    5650:	19 f4       	brne	.+6      	; 0x5658 <_ZN11EthernetUDP4readEPhj+0x16>
    }

  }

  // If we get here, there's no data available or recv failed
  return -1;
    5652:	8f ef       	ldi	r24, 0xFF	; 255
    5654:	9f ef       	ldi	r25, 0xFF	; 255
    5656:	10 c0       	rjmp	.+32     	; 0x5678 <_ZN11EthernetUDP4readEPhj+0x36>
    5658:	ec 01       	movw	r28, r24
  if (_remaining > 0)
  {

    int got;

    if (_remaining <= len)
    565a:	42 17       	cp	r20, r18
    565c:	53 07       	cpc	r21, r19
    565e:	08 f0       	brcs	.+2      	; 0x5662 <_ZN11EthernetUDP4readEPhj+0x20>
    {
      // data should fit in the buffer
      got = recv(_sock, buffer, _remaining);
    5660:	a9 01       	movw	r20, r18
    }
    else
    {
      // too much data for the buffer, 
      // grab as much as will fit
      got = recv(_sock, buffer, len);
    5662:	8c 85       	ldd	r24, Y+12	; 0x0c
    5664:	1c d2       	rcall	.+1080   	; 0x5a9e <_Z4recvhPhi>
    }

    if (got > 0)
    5666:	18 16       	cp	r1, r24
    5668:	19 06       	cpc	r1, r25
    566a:	9c f7       	brge	.-26     	; 0x5652 <_ZN11EthernetUDP4readEPhj+0x10>
    {
      _remaining -= got;
    566c:	29 8d       	ldd	r18, Y+25	; 0x19
    566e:	3a 8d       	ldd	r19, Y+26	; 0x1a
    5670:	28 1b       	sub	r18, r24
    5672:	39 0b       	sbc	r19, r25
    5674:	3a 8f       	std	Y+26, r19	; 0x1a
    5676:	29 8f       	std	Y+25, r18	; 0x19
  }

  // If we get here, there's no data available or recv failed
  return -1;

}
    5678:	df 91       	pop	r29
    567a:	cf 91       	pop	r28
    567c:	08 95       	ret

0000567e <_ZN11EthernetUDP4peekEv>:

int EthernetUDP::peek()
{
    567e:	cf 93       	push	r28
    5680:	df 93       	push	r29
    5682:	1f 92       	push	r1
    5684:	cd b7       	in	r28, 0x3d	; 61
    5686:	de b7       	in	r29, 0x3e	; 62
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
    5688:	fc 01       	movw	r30, r24
    568a:	21 8d       	ldd	r18, Z+25	; 0x19
    568c:	32 8d       	ldd	r19, Z+26	; 0x1a
    568e:	23 2b       	or	r18, r19
    5690:	41 f0       	breq	.+16     	; 0x56a2 <_ZN11EthernetUDP4peekEv+0x24>
    return -1;
  ::peek(_sock, &b);
    5692:	be 01       	movw	r22, r28
    5694:	6f 5f       	subi	r22, 0xFF	; 255
    5696:	7f 4f       	sbci	r23, 0xFF	; 255
    5698:	84 85       	ldd	r24, Z+12	; 0x0c
    569a:	42 d2       	rcall	.+1156   	; 0x5b20 <_Z4peekhPh>
  return b;
    569c:	89 81       	ldd	r24, Y+1	; 0x01
    569e:	90 e0       	ldi	r25, 0x00	; 0
    56a0:	02 c0       	rjmp	.+4      	; 0x56a6 <_ZN11EthernetUDP4peekEv+0x28>
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
    return -1;
    56a2:	8f ef       	ldi	r24, 0xFF	; 255
    56a4:	9f ef       	ldi	r25, 0xFF	; 255
  ::peek(_sock, &b);
  return b;
}
    56a6:	0f 90       	pop	r0
    56a8:	df 91       	pop	r29
    56aa:	cf 91       	pop	r28
    56ac:	08 95       	ret

000056ae <_ZN11EthernetUDP5beginEj>:

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
    56ae:	ef 92       	push	r14
    56b0:	ff 92       	push	r15
    56b2:	1f 93       	push	r17
    56b4:	cf 93       	push	r28
    56b6:	df 93       	push	r29
  if (_sock != MAX_SOCK_NUM)
    56b8:	fc 01       	movw	r30, r24
    56ba:	24 85       	ldd	r18, Z+12	; 0x0c
    56bc:	28 30       	cpi	r18, 0x08	; 8
    56be:	11 f0       	breq	.+4      	; 0x56c4 <_ZN11EthernetUDP5beginEj+0x16>
    return 0;
    56c0:	80 e0       	ldi	r24, 0x00	; 0
    56c2:	20 c0       	rjmp	.+64     	; 0x5704 <_ZN11EthernetUDP5beginEj+0x56>
    56c4:	7b 01       	movw	r14, r22
    56c6:	ec 01       	movw	r28, r24
    56c8:	10 e0       	ldi	r17, 0x00	; 0
    56ca:	61 2f       	mov	r22, r17
    56cc:	62 95       	swap	r22
    56ce:	66 0f       	add	r22, r22
    56d0:	60 7e       	andi	r22, 0xE0	; 224
    56d2:	68 5f       	subi	r22, 0xF8	; 248
    56d4:	83 e0       	ldi	r24, 0x03	; 3
    56d6:	90 e0       	ldi	r25, 0x00	; 0
    56d8:	1b d3       	rcall	.+1590   	; 0x5d10 <_ZN10W5500Class4readEjh>

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
    56da:	81 11       	cpse	r24, r1
    56dc:	02 c0       	rjmp	.+4      	; 0x56e2 <_ZN11EthernetUDP5beginEj+0x34>
      _sock = i;
    56de:	1c 87       	std	Y+12, r17	; 0x0c
    56e0:	05 c0       	rjmp	.+10     	; 0x56ec <_ZN11EthernetUDP5beginEj+0x3e>
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
    56e2:	88 31       	cpi	r24, 0x18	; 24
    56e4:	e1 f3       	breq	.-8      	; 0x56de <_ZN11EthernetUDP5beginEj+0x30>
    56e6:	1f 5f       	subi	r17, 0xFF	; 255
/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    56e8:	18 30       	cpi	r17, 0x08	; 8
    56ea:	79 f7       	brne	.-34     	; 0x56ca <_ZN11EthernetUDP5beginEj+0x1c>
      _sock = i;
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
    56ec:	8c 85       	ldd	r24, Y+12	; 0x0c
    56ee:	88 30       	cpi	r24, 0x08	; 8
    56f0:	39 f3       	breq	.-50     	; 0x56c0 <_ZN11EthernetUDP5beginEj+0x12>
    return 0;

  _port = port;
    56f2:	fe 86       	std	Y+14, r15	; 0x0e
    56f4:	ed 86       	std	Y+13, r14	; 0x0d
  _remaining = 0;
    56f6:	1a 8e       	std	Y+26, r1	; 0x1a
    56f8:	19 8e       	std	Y+25, r1	; 0x19
  socket(_sock, SnMR::UDP, _port, 0);
    56fa:	20 e0       	ldi	r18, 0x00	; 0
    56fc:	a7 01       	movw	r20, r14
    56fe:	62 e0       	ldi	r22, 0x02	; 2
    5700:	1b d1       	rcall	.+566    	; 0x5938 <_Z6sockethhjh>

  return 1;
    5702:	81 e0       	ldi	r24, 0x01	; 1
}
    5704:	df 91       	pop	r29
    5706:	cf 91       	pop	r28
    5708:	1f 91       	pop	r17
    570a:	ff 90       	pop	r15
    570c:	ef 90       	pop	r14
    570e:	08 95       	ret

00005710 <_ZN11EthernetUDP11parsePacketEv>:
  _offset += bytes_written;
  return bytes_written;
}

int EthernetUDP::parsePacket()
{
    5710:	0f 93       	push	r16
    5712:	1f 93       	push	r17
    5714:	cf 93       	push	r28
    5716:	df 93       	push	r29
    5718:	cd b7       	in	r28, 0x3d	; 61
    571a:	de b7       	in	r29, 0x3e	; 62
    571c:	28 97       	sbiw	r28, 0x08	; 8
    571e:	0f b6       	in	r0, 0x3f	; 63
    5720:	f8 94       	cli
    5722:	de bf       	out	0x3e, r29	; 62
    5724:	0f be       	out	0x3f, r0	; 63
    5726:	cd bf       	out	0x3d, r28	; 61
    5728:	8c 01       	movw	r16, r24
  // discard any remaining bytes in the last packet
  flush();
    572a:	dc 01       	movw	r26, r24
    572c:	ed 91       	ld	r30, X+
    572e:	fc 91       	ld	r31, X
    5730:	06 80       	ldd	r0, Z+6	; 0x06
    5732:	f7 81       	ldd	r31, Z+7	; 0x07
    5734:	e0 2d       	mov	r30, r0
    5736:	09 95       	icall

  if (w5500.getRXReceivedSize(_sock) > 0)
    5738:	f8 01       	movw	r30, r16
    573a:	64 85       	ldd	r22, Z+12	; 0x0c
    573c:	85 e5       	ldi	r24, 0x55	; 85
    573e:	9c e0       	ldi	r25, 0x0C	; 12
    5740:	77 d3       	rcall	.+1774   	; 0x5e30 <_ZN10W5500Class17getRXReceivedSizeEh>
    5742:	89 2b       	or	r24, r25
    5744:	39 f1       	breq	.+78     	; 0x5794 <_ZN11EthernetUDP11parsePacketEv+0x84>
  {
    //HACK - hand-parse the UDP packet using TCP recv method
    uint8_t tmpBuf[8];
    int ret =0; 
    //read 8 header bytes and get IP and port from it
    ret = recv(_sock,tmpBuf,8);
    5746:	48 e0       	ldi	r20, 0x08	; 8
    5748:	50 e0       	ldi	r21, 0x00	; 0
    574a:	be 01       	movw	r22, r28
    574c:	6f 5f       	subi	r22, 0xFF	; 255
    574e:	7f 4f       	sbci	r23, 0xFF	; 255
    5750:	d8 01       	movw	r26, r16
    5752:	1c 96       	adiw	r26, 0x0c	; 12
    5754:	8c 91       	ld	r24, X
    5756:	a3 d1       	rcall	.+838    	; 0x5a9e <_Z4recvhPhi>
    if (ret > 0)
    5758:	18 16       	cp	r1, r24
    575a:	19 06       	cpc	r1, r25
    575c:	ec f4       	brge	.+58     	; 0x5798 <_ZN11EthernetUDP11parsePacketEv+0x88>
    {
      _remoteIP = tmpBuf;
    575e:	be 01       	movw	r22, r28
    5760:	6f 5f       	subi	r22, 0xFF	; 255
    5762:	7f 4f       	sbci	r23, 0xFF	; 255
    5764:	c8 01       	movw	r24, r16
    5766:	0f 96       	adiw	r24, 0x0f	; 15
    5768:	0e 94 aa 38 	call	0x7154	; 0x7154 <_ZN9IPAddressaSEPKh>
      _remotePort = tmpBuf[4];
      _remotePort = (_remotePort << 8) + tmpBuf[5];
    576c:	8d 81       	ldd	r24, Y+5	; 0x05
    576e:	90 e0       	ldi	r25, 0x00	; 0
    5770:	98 2f       	mov	r25, r24
    5772:	88 27       	eor	r24, r24
    5774:	2e 81       	ldd	r18, Y+6	; 0x06
    5776:	82 0f       	add	r24, r18
    5778:	91 1d       	adc	r25, r1
    577a:	f8 01       	movw	r30, r16
    577c:	96 8b       	std	Z+22, r25	; 0x16
    577e:	85 8b       	std	Z+21, r24	; 0x15
      _remaining = tmpBuf[6];
      _remaining = (_remaining << 8) + tmpBuf[7];
    5780:	8f 81       	ldd	r24, Y+7	; 0x07
    5782:	90 e0       	ldi	r25, 0x00	; 0
    5784:	98 2f       	mov	r25, r24
    5786:	88 27       	eor	r24, r24
    5788:	28 85       	ldd	r18, Y+8	; 0x08
    578a:	82 0f       	add	r24, r18
    578c:	91 1d       	adc	r25, r1
    578e:	92 8f       	std	Z+26, r25	; 0x1a
    5790:	81 8f       	std	Z+25, r24	; 0x19
    5792:	02 c0       	rjmp	.+4      	; 0x5798 <_ZN11EthernetUDP11parsePacketEv+0x88>
      ret = _remaining;
    }
    return ret;
  }
  // There aren't any packets available
  return 0;
    5794:	80 e0       	ldi	r24, 0x00	; 0
    5796:	90 e0       	ldi	r25, 0x00	; 0
}
    5798:	28 96       	adiw	r28, 0x08	; 8
    579a:	0f b6       	in	r0, 0x3f	; 63
    579c:	f8 94       	cli
    579e:	de bf       	out	0x3e, r29	; 62
    57a0:	0f be       	out	0x3f, r0	; 63
    57a2:	cd bf       	out	0x3d, r28	; 61
    57a4:	df 91       	pop	r29
    57a6:	cf 91       	pop	r28
    57a8:	1f 91       	pop	r17
    57aa:	0f 91       	pop	r16
    57ac:	08 95       	ret

000057ae <_ZN11EthernetUDPC1Ev>:
#include "Ethernet2.h"
#include "Udp.h"
#include "Dns.h"

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}
    57ae:	fc 01       	movw	r30, r24
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    57b0:	13 82       	std	Z+3, r1	; 0x03
    57b2:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    57b4:	88 ee       	ldi	r24, 0xE8	; 232
    57b6:	93 e0       	ldi	r25, 0x03	; 3
    57b8:	a0 e0       	ldi	r26, 0x00	; 0
    57ba:	b0 e0       	ldi	r27, 0x00	; 0
    57bc:	84 83       	std	Z+4, r24	; 0x04
    57be:	95 83       	std	Z+5, r25	; 0x05
    57c0:	a6 83       	std	Z+6, r26	; 0x06
    57c2:	b7 83       	std	Z+7, r27	; 0x07
    57c4:	8e ef       	ldi	r24, 0xFE	; 254
    57c6:	99 e0       	ldi	r25, 0x09	; 9
    57c8:	91 83       	std	Z+1, r25	; 0x01
    57ca:	80 83       	st	Z, r24
    57cc:	88 e0       	ldi	r24, 0x08	; 8
    57ce:	84 87       	std	Z+12, r24	; 0x0c
    57d0:	cf 01       	movw	r24, r30
    57d2:	0f 96       	adiw	r24, 0x0f	; 15
    57d4:	0c 94 94 38 	jmp	0x7128	; 0x7128 <_ZN9IPAddressC1Ev>

000057d8 <_ZN11EthernetUDP11beginPacketEPKcj>:
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

int EthernetUDP::beginPacket(const char *host, uint16_t port)
{
    57d8:	cf 92       	push	r12
    57da:	df 92       	push	r13
    57dc:	ef 92       	push	r14
    57de:	ff 92       	push	r15
    57e0:	0f 93       	push	r16
    57e2:	1f 93       	push	r17
    57e4:	cf 93       	push	r28
    57e6:	df 93       	push	r29
    57e8:	cd b7       	in	r28, 0x3d	; 61
    57ea:	de b7       	in	r29, 0x3e	; 62
    57ec:	af 97       	sbiw	r28, 0x2f	; 47
    57ee:	0f b6       	in	r0, 0x3f	; 63
    57f0:	f8 94       	cli
    57f2:	de bf       	out	0x3e, r29	; 62
    57f4:	0f be       	out	0x3f, r0	; 63
    57f6:	cd bf       	out	0x3d, r28	; 61
    57f8:	8c 01       	movw	r16, r24
    57fa:	6b 01       	movw	r12, r22
    57fc:	7a 01       	movw	r14, r20
#ifndef DNSClient_h
#define DNSClient_h

#include <EthernetUdp2.h>

class DNSClient
    57fe:	ce 01       	movw	r24, r28
    5800:	01 96       	adiw	r24, 0x01	; 1
    5802:	0e 94 94 38 	call	0x7128	; 0x7128 <_ZN9IPAddressC1Ev>
    5806:	ce 01       	movw	r24, r28
    5808:	09 96       	adiw	r24, 0x09	; 9
    580a:	d1 df       	rcall	.-94     	; 0x57ae <_ZN11EthernetUDPC1Ev>
  // Look up the host first
  int ret = 0;
  DNSClient dns;
  IPAddress remote_addr;
    580c:	ce 01       	movw	r24, r28
    580e:	8a 96       	adiw	r24, 0x2a	; 42
    5810:	0e 94 94 38 	call	0x7128	; 0x7128 <_ZN9IPAddressC1Ev>

  dns.begin(Ethernet.dnsServerIP());
    5814:	6b e1       	ldi	r22, 0x1B	; 27
    5816:	7c e0       	ldi	r23, 0x0C	; 12
    5818:	ce 01       	movw	r24, r28
    581a:	84 96       	adiw	r24, 0x24	; 36
    581c:	63 dc       	rcall	.-1850   	; 0x50e4 <_ZN13EthernetClass11dnsServerIPEv>
    581e:	be 01       	movw	r22, r28
    5820:	6c 5d       	subi	r22, 0xDC	; 220
    5822:	7f 4f       	sbci	r23, 0xFF	; 255
    5824:	ce 01       	movw	r24, r28
    5826:	01 96       	adiw	r24, 0x01	; 1
    5828:	28 d9       	rcall	.-3504   	; 0x4a7a <_ZN9DNSClient5beginERK9IPAddress>
  ret = dns.getHostByName(host, remote_addr);
    582a:	ae 01       	movw	r20, r28
    582c:	46 5d       	subi	r20, 0xD6	; 214
    582e:	5f 4f       	sbci	r21, 0xFF	; 255
    5830:	b6 01       	movw	r22, r12
    5832:	ce 01       	movw	r24, r28
    5834:	01 96       	adiw	r24, 0x01	; 1
    5836:	7b db       	rcall	.-2314   	; 0x4f2e <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>
  if (ret == 1) {
    5838:	81 30       	cpi	r24, 0x01	; 1
    583a:	91 05       	cpc	r25, r1
    583c:	c1 f4       	brne	.+48     	; 0x586e <_ZN11EthernetUDP11beginPacketEPKcj+0x96>
    return beginPacket(remote_addr, port);
    583e:	d8 01       	movw	r26, r16
    5840:	ed 91       	ld	r30, X+
    5842:	fc 91       	ld	r31, X
    5844:	04 88       	ldd	r0, Z+20	; 0x14
    5846:	f5 89       	ldd	r31, Z+21	; 0x15
    5848:	e0 2d       	mov	r30, r0
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    584a:	80 e6       	ldi	r24, 0x60	; 96
    584c:	9a e0       	ldi	r25, 0x0A	; 10
    584e:	9d a3       	std	Y+37, r25	; 0x25
    5850:	8c a3       	std	Y+36, r24	; 0x24
    5852:	8c a5       	ldd	r24, Y+44	; 0x2c
    5854:	9d a5       	ldd	r25, Y+45	; 0x2d
    5856:	ae a5       	ldd	r26, Y+46	; 0x2e
    5858:	bf a5       	ldd	r27, Y+47	; 0x2f
    585a:	8e a3       	std	Y+38, r24	; 0x26
    585c:	9f a3       	std	Y+39, r25	; 0x27
    585e:	a8 a7       	std	Y+40, r26	; 0x28
    5860:	b9 a7       	std	Y+41, r27	; 0x29
    5862:	a7 01       	movw	r20, r14
    5864:	be 01       	movw	r22, r28
    5866:	6c 5d       	subi	r22, 0xDC	; 220
    5868:	7f 4f       	sbci	r23, 0xFF	; 255
    586a:	c8 01       	movw	r24, r16
    586c:	09 95       	icall
  } else {
    return ret;
  }
}
    586e:	af 96       	adiw	r28, 0x2f	; 47
    5870:	0f b6       	in	r0, 0x3f	; 63
    5872:	f8 94       	cli
    5874:	de bf       	out	0x3e, r29	; 62
    5876:	0f be       	out	0x3f, r0	; 63
    5878:	cd bf       	out	0x3d, r28	; 61
    587a:	df 91       	pop	r29
    587c:	cf 91       	pop	r28
    587e:	1f 91       	pop	r17
    5880:	0f 91       	pop	r16
    5882:	ff 90       	pop	r15
    5884:	ef 90       	pop	r14
    5886:	df 90       	pop	r13
    5888:	cf 90       	pop	r12
    588a:	08 95       	ret

0000588c <_GLOBAL__sub_I__ZN11EthernetUDPC2Ev>:

  while (_remaining)
  {
    read();
  }
}
    588c:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    588e:	00 e0       	ldi	r16, 0x00	; 0
    5890:	20 e0       	ldi	r18, 0x00	; 0
    5892:	40 e0       	ldi	r20, 0x00	; 0
    5894:	60 e0       	ldi	r22, 0x00	; 0
    5896:	8a e4       	ldi	r24, 0x4A	; 74
    5898:	9c e0       	ldi	r25, 0x0C	; 12
    589a:	0e 94 9e 38 	call	0x713c	; 0x713c <_ZN9IPAddressC1Ehhhh>
    589e:	0f 91       	pop	r16
    58a0:	08 95       	ret

000058a2 <_ZN10W5500Class11writeSnDIPREhPh>:
    }
  }

  w5500.writeSnIR(s, SnIR::SEND_OK);
  return ret;
}
    58a2:	ab 01       	movw	r20, r22
    58a4:	82 95       	swap	r24
    58a6:	88 0f       	add	r24, r24
    58a8:	80 7e       	andi	r24, 0xE0	; 224
    58aa:	6c e0       	ldi	r22, 0x0C	; 12
    58ac:	68 0f       	add	r22, r24
    58ae:	24 e0       	ldi	r18, 0x04	; 4
    58b0:	30 e0       	ldi	r19, 0x00	; 0
    58b2:	8c e0       	ldi	r24, 0x0C	; 12
    58b4:	90 e0       	ldi	r25, 0x00	; 0
    58b6:	00 c2       	rjmp	.+1024   	; 0x5cb8 <_ZN10W5500Class5writeEjhPKhj>

000058b8 <_ZN10W5500Class6readSnEhj>:
    58b8:	9b 01       	movw	r18, r22
    58ba:	82 95       	swap	r24
    58bc:	88 0f       	add	r24, r24
    58be:	80 7e       	andi	r24, 0xE0	; 224
    58c0:	68 e0       	ldi	r22, 0x08	; 8
    58c2:	68 0f       	add	r22, r24
    58c4:	c9 01       	movw	r24, r18
    58c6:	24 c2       	rjmp	.+1096   	; 0x5d10 <_ZN10W5500Class4readEjh>

000058c8 <_ZN10W5500Class8readSnIREh>:
    58c8:	62 e0       	ldi	r22, 0x02	; 2
    58ca:	70 e0       	ldi	r23, 0x00	; 0
    58cc:	f5 cf       	rjmp	.-22     	; 0x58b8 <_ZN10W5500Class6readSnEhj>

000058ce <_ZN10W5500Class7writeSnEhjh>:
    58ce:	9b 01       	movw	r18, r22
    58d0:	82 95       	swap	r24
    58d2:	88 0f       	add	r24, r24
    58d4:	80 7e       	andi	r24, 0xE0	; 224
    58d6:	6c e0       	ldi	r22, 0x0C	; 12
    58d8:	68 0f       	add	r22, r24
    58da:	c9 01       	movw	r24, r18
    58dc:	cf c1       	rjmp	.+926    	; 0x5c7c <_ZN10W5500Class5writeEjhh>

000058de <_ZN10W5500Class11writeSnPORTEhj>:
    58de:	cf 93       	push	r28
    58e0:	df 93       	push	r29
    58e2:	c8 2f       	mov	r28, r24
    58e4:	d6 2f       	mov	r29, r22
    58e6:	47 2f       	mov	r20, r23
    58e8:	64 e0       	ldi	r22, 0x04	; 4
    58ea:	70 e0       	ldi	r23, 0x00	; 0
    58ec:	f0 df       	rcall	.-32     	; 0x58ce <_ZN10W5500Class7writeSnEhjh>
    58ee:	4d 2f       	mov	r20, r29
    58f0:	65 e0       	ldi	r22, 0x05	; 5
    58f2:	70 e0       	ldi	r23, 0x00	; 0
    58f4:	8c 2f       	mov	r24, r28
    58f6:	df 91       	pop	r29
    58f8:	cf 91       	pop	r28
    58fa:	e9 cf       	rjmp	.-46     	; 0x58ce <_ZN10W5500Class7writeSnEhjh>

000058fc <_ZN10W5500Class9writeSnIREhh>:
    58fc:	46 2f       	mov	r20, r22
    58fe:	62 e0       	ldi	r22, 0x02	; 2
    5900:	70 e0       	ldi	r23, 0x00	; 0
    5902:	e5 cf       	rjmp	.-54     	; 0x58ce <_ZN10W5500Class7writeSnEhjh>

00005904 <_ZN10W5500Class12writeSnDPORTEhj>:
    5904:	cf 93       	push	r28
    5906:	df 93       	push	r29
    5908:	c8 2f       	mov	r28, r24
    590a:	d6 2f       	mov	r29, r22
    590c:	47 2f       	mov	r20, r23
    590e:	60 e1       	ldi	r22, 0x10	; 16
    5910:	70 e0       	ldi	r23, 0x00	; 0
    5912:	dd df       	rcall	.-70     	; 0x58ce <_ZN10W5500Class7writeSnEhjh>
    5914:	4d 2f       	mov	r20, r29
    5916:	61 e1       	ldi	r22, 0x11	; 17
    5918:	70 e0       	ldi	r23, 0x00	; 0
    591a:	8c 2f       	mov	r24, r28
    591c:	df 91       	pop	r29
    591e:	cf 91       	pop	r28
    5920:	d6 cf       	rjmp	.-84     	; 0x58ce <_ZN10W5500Class7writeSnEhjh>

00005922 <_Z5closeh>:
    5922:	cf 93       	push	r28
    5924:	c8 2f       	mov	r28, r24
    5926:	40 e1       	ldi	r20, 0x10	; 16
    5928:	68 2f       	mov	r22, r24
    592a:	85 e5       	ldi	r24, 0x55	; 85
    592c:	9c e0       	ldi	r25, 0x0C	; 12
    592e:	70 d3       	rcall	.+1760   	; 0x6010 <_ZN10W5500Class9execCmdSnEh7SockCMD>
    5930:	6f ef       	ldi	r22, 0xFF	; 255
    5932:	8c 2f       	mov	r24, r28
    5934:	cf 91       	pop	r28
    5936:	e2 cf       	rjmp	.-60     	; 0x58fc <_ZN10W5500Class9writeSnIREhh>

00005938 <_Z6sockethhjh>:
    5938:	ff 92       	push	r15
    593a:	0f 93       	push	r16
    593c:	1f 93       	push	r17
    593e:	cf 93       	push	r28
    5940:	df 93       	push	r29
    5942:	9f ef       	ldi	r25, 0xFF	; 255
    5944:	96 0f       	add	r25, r22
    5946:	95 30       	cpi	r25, 0x05	; 5
    5948:	18 f5       	brcc	.+70     	; 0x5990 <_Z6sockethhjh+0x58>
    594a:	d2 2f       	mov	r29, r18
    594c:	8a 01       	movw	r16, r20
    594e:	f6 2e       	mov	r15, r22
    5950:	c8 2f       	mov	r28, r24
    5952:	e7 df       	rcall	.-50     	; 0x5922 <_Z5closeh>
    5954:	4f 2d       	mov	r20, r15
    5956:	4d 2b       	or	r20, r29
    5958:	60 e0       	ldi	r22, 0x00	; 0
    595a:	70 e0       	ldi	r23, 0x00	; 0
    595c:	8c 2f       	mov	r24, r28
    595e:	b7 df       	rcall	.-146    	; 0x58ce <_ZN10W5500Class7writeSnEhjh>
    5960:	01 15       	cp	r16, r1
    5962:	11 05       	cpc	r17, r1
    5964:	11 f0       	breq	.+4      	; 0x596a <_Z6sockethhjh+0x32>
    5966:	b8 01       	movw	r22, r16
    5968:	0a c0       	rjmp	.+20     	; 0x597e <_Z6sockethhjh+0x46>
    596a:	60 91 50 0c 	lds	r22, 0x0C50	; 0x800c50 <_ZL10local_port>
    596e:	70 91 51 0c 	lds	r23, 0x0C51	; 0x800c51 <_ZL10local_port+0x1>
    5972:	6f 5f       	subi	r22, 0xFF	; 255
    5974:	7f 4f       	sbci	r23, 0xFF	; 255
    5976:	70 93 51 0c 	sts	0x0C51, r23	; 0x800c51 <_ZL10local_port+0x1>
    597a:	60 93 50 0c 	sts	0x0C50, r22	; 0x800c50 <_ZL10local_port>
    597e:	8c 2f       	mov	r24, r28
    5980:	ae df       	rcall	.-164    	; 0x58de <_ZN10W5500Class11writeSnPORTEhj>
    5982:	41 e0       	ldi	r20, 0x01	; 1
    5984:	6c 2f       	mov	r22, r28
    5986:	85 e5       	ldi	r24, 0x55	; 85
    5988:	9c e0       	ldi	r25, 0x0C	; 12
    598a:	42 d3       	rcall	.+1668   	; 0x6010 <_ZN10W5500Class9execCmdSnEh7SockCMD>
    598c:	81 e0       	ldi	r24, 0x01	; 1
    598e:	01 c0       	rjmp	.+2      	; 0x5992 <_Z6sockethhjh+0x5a>
    5990:	80 e0       	ldi	r24, 0x00	; 0
    5992:	df 91       	pop	r29
    5994:	cf 91       	pop	r28
    5996:	1f 91       	pop	r17
    5998:	0f 91       	pop	r16
    599a:	ff 90       	pop	r15
    599c:	08 95       	ret

0000599e <_Z7connecthPhj>:
    599e:	0f 93       	push	r16
    59a0:	1f 93       	push	r17
    59a2:	cf 93       	push	r28
    59a4:	fb 01       	movw	r30, r22
    59a6:	90 81       	ld	r25, Z
    59a8:	9f 3f       	cpi	r25, 0xFF	; 255
    59aa:	51 f4       	brne	.+20     	; 0x59c0 <_Z7connecthPhj+0x22>
    59ac:	91 81       	ldd	r25, Z+1	; 0x01
    59ae:	9f 3f       	cpi	r25, 0xFF	; 255
    59b0:	91 f4       	brne	.+36     	; 0x59d6 <_Z7connecthPhj+0x38>
    59b2:	92 81       	ldd	r25, Z+2	; 0x02
    59b4:	9f 3f       	cpi	r25, 0xFF	; 255
    59b6:	79 f4       	brne	.+30     	; 0x59d6 <_Z7connecthPhj+0x38>
    59b8:	93 81       	ldd	r25, Z+3	; 0x03
    59ba:	9f 3f       	cpi	r25, 0xFF	; 255
    59bc:	61 f4       	brne	.+24     	; 0x59d6 <_Z7connecthPhj+0x38>
    59be:	1c c0       	rjmp	.+56     	; 0x59f8 <_Z7connecthPhj+0x5a>
    59c0:	91 11       	cpse	r25, r1
    59c2:	09 c0       	rjmp	.+18     	; 0x59d6 <_Z7connecthPhj+0x38>
    59c4:	91 81       	ldd	r25, Z+1	; 0x01
    59c6:	91 11       	cpse	r25, r1
    59c8:	06 c0       	rjmp	.+12     	; 0x59d6 <_Z7connecthPhj+0x38>
    59ca:	92 81       	ldd	r25, Z+2	; 0x02
    59cc:	91 11       	cpse	r25, r1
    59ce:	03 c0       	rjmp	.+6      	; 0x59d6 <_Z7connecthPhj+0x38>
    59d0:	93 81       	ldd	r25, Z+3	; 0x03
    59d2:	99 23       	and	r25, r25
    59d4:	91 f0       	breq	.+36     	; 0x59fa <_Z7connecthPhj+0x5c>
    59d6:	41 15       	cp	r20, r1
    59d8:	51 05       	cpc	r21, r1
    59da:	71 f0       	breq	.+28     	; 0x59f8 <_Z7connecthPhj+0x5a>
    59dc:	8a 01       	movw	r16, r20
    59de:	bf 01       	movw	r22, r30
    59e0:	c8 2f       	mov	r28, r24
    59e2:	5f df       	rcall	.-322    	; 0x58a2 <_ZN10W5500Class11writeSnDIPREhPh>
    59e4:	b8 01       	movw	r22, r16
    59e6:	8c 2f       	mov	r24, r28
    59e8:	8d df       	rcall	.-230    	; 0x5904 <_ZN10W5500Class12writeSnDPORTEhj>
    59ea:	44 e0       	ldi	r20, 0x04	; 4
    59ec:	6c 2f       	mov	r22, r28
    59ee:	85 e5       	ldi	r24, 0x55	; 85
    59f0:	9c e0       	ldi	r25, 0x0C	; 12
    59f2:	0e d3       	rcall	.+1564   	; 0x6010 <_ZN10W5500Class9execCmdSnEh7SockCMD>
    59f4:	91 e0       	ldi	r25, 0x01	; 1
    59f6:	01 c0       	rjmp	.+2      	; 0x59fa <_Z7connecthPhj+0x5c>
    59f8:	90 e0       	ldi	r25, 0x00	; 0
    59fa:	89 2f       	mov	r24, r25
    59fc:	cf 91       	pop	r28
    59fe:	1f 91       	pop	r17
    5a00:	0f 91       	pop	r16
    5a02:	08 95       	ret

00005a04 <_Z10disconnecth>:
    5a04:	48 e0       	ldi	r20, 0x08	; 8
    5a06:	68 2f       	mov	r22, r24
    5a08:	85 e5       	ldi	r24, 0x55	; 85
    5a0a:	9c e0       	ldi	r25, 0x0C	; 12
    5a0c:	01 c3       	rjmp	.+1538   	; 0x6010 <_ZN10W5500Class9execCmdSnEh7SockCMD>

00005a0e <_Z4sendhPKhj>:
    5a0e:	cf 92       	push	r12
    5a10:	df 92       	push	r13
    5a12:	ef 92       	push	r14
    5a14:	ff 92       	push	r15
    5a16:	0f 93       	push	r16
    5a18:	1f 93       	push	r17
    5a1a:	cf 93       	push	r28
    5a1c:	c8 2f       	mov	r28, r24
    5a1e:	7b 01       	movw	r14, r22
    5a20:	8a 01       	movw	r16, r20
    5a22:	41 30       	cpi	r20, 0x01	; 1
    5a24:	58 40       	sbci	r21, 0x08	; 8
    5a26:	10 f0       	brcs	.+4      	; 0x5a2c <_Z4sendhPKhj+0x1e>
    5a28:	00 e0       	ldi	r16, 0x00	; 0
    5a2a:	18 e0       	ldi	r17, 0x08	; 8
    5a2c:	6c 2f       	mov	r22, r28
    5a2e:	85 e5       	ldi	r24, 0x55	; 85
    5a30:	9c e0       	ldi	r25, 0x0C	; 12
    5a32:	cd d1       	rcall	.+922    	; 0x5dce <_ZN10W5500Class13getTXFreeSizeEh>
    5a34:	6c 01       	movw	r12, r24
    5a36:	63 e0       	ldi	r22, 0x03	; 3
    5a38:	70 e0       	ldi	r23, 0x00	; 0
    5a3a:	8c 2f       	mov	r24, r28
    5a3c:	3d df       	rcall	.-390    	; 0x58b8 <_ZN10W5500Class6readSnEhj>
    5a3e:	87 31       	cpi	r24, 0x17	; 23
    5a40:	11 f0       	breq	.+4      	; 0x5a46 <_Z4sendhPKhj+0x38>
    5a42:	8c 31       	cpi	r24, 0x1C	; 28
    5a44:	21 f4       	brne	.+8      	; 0x5a4e <_Z4sendhPKhj+0x40>
    5a46:	c0 16       	cp	r12, r16
    5a48:	d1 06       	cpc	r13, r17
    5a4a:	80 f3       	brcs	.-32     	; 0x5a2c <_Z4sendhPKhj+0x1e>
    5a4c:	02 c0       	rjmp	.+4      	; 0x5a52 <_Z4sendhPKhj+0x44>
    5a4e:	00 e0       	ldi	r16, 0x00	; 0
    5a50:	10 e0       	ldi	r17, 0x00	; 0
    5a52:	98 01       	movw	r18, r16
    5a54:	a7 01       	movw	r20, r14
    5a56:	6c 2f       	mov	r22, r28
    5a58:	85 e5       	ldi	r24, 0x55	; 85
    5a5a:	9c e0       	ldi	r25, 0x0C	; 12
    5a5c:	3d d2       	rcall	.+1146   	; 0x5ed8 <_ZN10W5500Class20send_data_processingEhPKhj>
    5a5e:	40 e2       	ldi	r20, 0x20	; 32
    5a60:	6c 2f       	mov	r22, r28
    5a62:	85 e5       	ldi	r24, 0x55	; 85
    5a64:	9c e0       	ldi	r25, 0x0C	; 12
    5a66:	d4 d2       	rcall	.+1448   	; 0x6010 <_ZN10W5500Class9execCmdSnEh7SockCMD>
    5a68:	8c 2f       	mov	r24, r28
    5a6a:	2e df       	rcall	.-420    	; 0x58c8 <_ZN10W5500Class8readSnIREh>
    5a6c:	84 fd       	sbrc	r24, 4
    5a6e:	0b c0       	rjmp	.+22     	; 0x5a86 <_Z4sendhPKhj+0x78>
    5a70:	63 e0       	ldi	r22, 0x03	; 3
    5a72:	70 e0       	ldi	r23, 0x00	; 0
    5a74:	8c 2f       	mov	r24, r28
    5a76:	20 df       	rcall	.-448    	; 0x58b8 <_ZN10W5500Class6readSnEhj>
    5a78:	81 11       	cpse	r24, r1
    5a7a:	f6 cf       	rjmp	.-20     	; 0x5a68 <_Z4sendhPKhj+0x5a>
    5a7c:	8c 2f       	mov	r24, r28
    5a7e:	51 df       	rcall	.-350    	; 0x5922 <_Z5closeh>
    5a80:	80 e0       	ldi	r24, 0x00	; 0
    5a82:	90 e0       	ldi	r25, 0x00	; 0
    5a84:	04 c0       	rjmp	.+8      	; 0x5a8e <_Z4sendhPKhj+0x80>
    5a86:	60 e1       	ldi	r22, 0x10	; 16
    5a88:	8c 2f       	mov	r24, r28
    5a8a:	38 df       	rcall	.-400    	; 0x58fc <_ZN10W5500Class9writeSnIREhh>
    5a8c:	c8 01       	movw	r24, r16
    5a8e:	cf 91       	pop	r28
    5a90:	1f 91       	pop	r17
    5a92:	0f 91       	pop	r16
    5a94:	ff 90       	pop	r15
    5a96:	ef 90       	pop	r14
    5a98:	df 90       	pop	r13
    5a9a:	cf 90       	pop	r12
    5a9c:	08 95       	ret

00005a9e <_Z4recvhPhi>:
    5a9e:	cf 92       	push	r12
    5aa0:	df 92       	push	r13
    5aa2:	ef 92       	push	r14
    5aa4:	ff 92       	push	r15
    5aa6:	0f 93       	push	r16
    5aa8:	1f 93       	push	r17
    5aaa:	cf 93       	push	r28
    5aac:	df 93       	push	r29
    5aae:	18 2f       	mov	r17, r24
    5ab0:	6b 01       	movw	r12, r22
    5ab2:	7a 01       	movw	r14, r20
    5ab4:	68 2f       	mov	r22, r24
    5ab6:	85 e5       	ldi	r24, 0x55	; 85
    5ab8:	9c e0       	ldi	r25, 0x0C	; 12
    5aba:	ba d1       	rcall	.+884    	; 0x5e30 <_ZN10W5500Class17getRXReceivedSizeEh>
    5abc:	ec 01       	movw	r28, r24
    5abe:	00 97       	sbiw	r24, 0x00	; 0
    5ac0:	91 f4       	brne	.+36     	; 0x5ae6 <_Z4recvhPhi+0x48>
    5ac2:	63 e0       	ldi	r22, 0x03	; 3
    5ac4:	70 e0       	ldi	r23, 0x00	; 0
    5ac6:	81 2f       	mov	r24, r17
    5ac8:	f7 de       	rcall	.-530    	; 0x58b8 <_ZN10W5500Class6readSnEhj>
    5aca:	84 31       	cpi	r24, 0x14	; 20
    5acc:	f9 f0       	breq	.+62     	; 0x5b0c <_Z4recvhPhi+0x6e>
    5ace:	88 23       	and	r24, r24
    5ad0:	e9 f0       	breq	.+58     	; 0x5b0c <_Z4recvhPhi+0x6e>
    5ad2:	c1 e0       	ldi	r28, 0x01	; 1
    5ad4:	d0 e0       	ldi	r29, 0x00	; 0
    5ad6:	8c 31       	cpi	r24, 0x1C	; 28
    5ad8:	11 f4       	brne	.+4      	; 0x5ade <_Z4recvhPhi+0x40>
    5ada:	c0 e0       	ldi	r28, 0x00	; 0
    5adc:	d0 e0       	ldi	r29, 0x00	; 0
    5ade:	d1 95       	neg	r29
    5ae0:	c1 95       	neg	r28
    5ae2:	d1 09       	sbc	r29, r1
    5ae4:	13 c0       	rjmp	.+38     	; 0x5b0c <_Z4recvhPhi+0x6e>
    5ae6:	e8 16       	cp	r14, r24
    5ae8:	f9 06       	cpc	r15, r25
    5aea:	0c f4       	brge	.+2      	; 0x5aee <_Z4recvhPhi+0x50>
    5aec:	e7 01       	movw	r28, r14
    5aee:	1c 16       	cp	r1, r28
    5af0:	1d 06       	cpc	r1, r29
    5af2:	64 f4       	brge	.+24     	; 0x5b0c <_Z4recvhPhi+0x6e>
    5af4:	00 e0       	ldi	r16, 0x00	; 0
    5af6:	9e 01       	movw	r18, r28
    5af8:	a6 01       	movw	r20, r12
    5afa:	61 2f       	mov	r22, r17
    5afc:	85 e5       	ldi	r24, 0x55	; 85
    5afe:	9c e0       	ldi	r25, 0x0C	; 12
    5b00:	3a d2       	rcall	.+1140   	; 0x5f76 <_ZN10W5500Class20recv_data_processingEhPhjh>
    5b02:	40 e4       	ldi	r20, 0x40	; 64
    5b04:	61 2f       	mov	r22, r17
    5b06:	85 e5       	ldi	r24, 0x55	; 85
    5b08:	9c e0       	ldi	r25, 0x0C	; 12
    5b0a:	82 d2       	rcall	.+1284   	; 0x6010 <_ZN10W5500Class9execCmdSnEh7SockCMD>
    5b0c:	ce 01       	movw	r24, r28
    5b0e:	df 91       	pop	r29
    5b10:	cf 91       	pop	r28
    5b12:	1f 91       	pop	r17
    5b14:	0f 91       	pop	r16
    5b16:	ff 90       	pop	r15
    5b18:	ef 90       	pop	r14
    5b1a:	df 90       	pop	r13
    5b1c:	cf 90       	pop	r12
    5b1e:	08 95       	ret

00005b20 <_Z4peekhPh>:
    5b20:	0f 93       	push	r16
    5b22:	ab 01       	movw	r20, r22
    5b24:	01 e0       	ldi	r16, 0x01	; 1
    5b26:	21 e0       	ldi	r18, 0x01	; 1
    5b28:	30 e0       	ldi	r19, 0x00	; 0
    5b2a:	68 2f       	mov	r22, r24
    5b2c:	85 e5       	ldi	r24, 0x55	; 85
    5b2e:	9c e0       	ldi	r25, 0x0C	; 12
    5b30:	22 d2       	rcall	.+1092   	; 0x5f76 <_ZN10W5500Class20recv_data_processingEhPhjh>
    5b32:	81 e0       	ldi	r24, 0x01	; 1
    5b34:	90 e0       	ldi	r25, 0x00	; 0
    5b36:	0f 91       	pop	r16
    5b38:	08 95       	ret

00005b3a <_Z5flushh>:
    5b3a:	08 95       	ret

00005b3c <_Z10bufferDatahjPKhj>:

uint16_t bufferData(SOCKET s, uint16_t offset, const uint8_t* buf, uint16_t len)
{
    5b3c:	af 92       	push	r10
    5b3e:	bf 92       	push	r11
    5b40:	cf 92       	push	r12
    5b42:	df 92       	push	r13
    5b44:	ff 92       	push	r15
    5b46:	0f 93       	push	r16
    5b48:	1f 93       	push	r17
    5b4a:	cf 93       	push	r28
    5b4c:	df 93       	push	r29
    5b4e:	f8 2e       	mov	r15, r24
    5b50:	6b 01       	movw	r12, r22
    5b52:	5a 01       	movw	r10, r20
    5b54:	e9 01       	movw	r28, r18
  uint16_t ret =0;
  if (len > w5500.getTXFreeSize(s))
    5b56:	68 2f       	mov	r22, r24
    5b58:	85 e5       	ldi	r24, 0x55	; 85
    5b5a:	9c e0       	ldi	r25, 0x0C	; 12
    5b5c:	38 d1       	rcall	.+624    	; 0x5dce <_ZN10W5500Class13getTXFreeSizeEh>
    5b5e:	8c 17       	cp	r24, r28
    5b60:	9d 07       	cpc	r25, r29
    5b62:	28 f4       	brcc	.+10     	; 0x5b6e <_Z10bufferDatahjPKhj+0x32>
  {
    ret = w5500.getTXFreeSize(s); // check size not to exceed MAX size.
    5b64:	6f 2d       	mov	r22, r15
    5b66:	85 e5       	ldi	r24, 0x55	; 85
    5b68:	9c e0       	ldi	r25, 0x0C	; 12
    5b6a:	31 d1       	rcall	.+610    	; 0x5dce <_ZN10W5500Class13getTXFreeSizeEh>
    5b6c:	ec 01       	movw	r28, r24
  }
  else
  {
    ret = len;
  }
  w5500.send_data_processing_offset(s, offset, buf, ret);
    5b6e:	8e 01       	movw	r16, r28
    5b70:	95 01       	movw	r18, r10
    5b72:	a6 01       	movw	r20, r12
    5b74:	6f 2d       	mov	r22, r15
    5b76:	85 e5       	ldi	r24, 0x55	; 85
    5b78:	9c e0       	ldi	r25, 0x0C	; 12
    5b7a:	74 d1       	rcall	.+744    	; 0x5e64 <_ZN10W5500Class27send_data_processing_offsetEhjPKhj>
  return ret;
}
    5b7c:	ce 01       	movw	r24, r28
    5b7e:	df 91       	pop	r29
    5b80:	cf 91       	pop	r28
    5b82:	1f 91       	pop	r17
    5b84:	0f 91       	pop	r16
    5b86:	ff 90       	pop	r15
    5b88:	df 90       	pop	r13
    5b8a:	cf 90       	pop	r12
    5b8c:	bf 90       	pop	r11
    5b8e:	af 90       	pop	r10
    5b90:	08 95       	ret

00005b92 <_Z8startUDPhPhj>:

int startUDP(SOCKET s, uint8_t* addr, uint16_t port)
{
    5b92:	0f 93       	push	r16
    5b94:	1f 93       	push	r17
    5b96:	cf 93       	push	r28
    5b98:	fb 01       	movw	r30, r22
  if
    5b9a:	90 81       	ld	r25, Z
    5b9c:	91 11       	cpse	r25, r1
    5b9e:	09 c0       	rjmp	.+18     	; 0x5bb2 <_Z8startUDPhPhj+0x20>
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
    5ba0:	91 81       	ldd	r25, Z+1	; 0x01
    5ba2:	91 11       	cpse	r25, r1
    5ba4:	06 c0       	rjmp	.+12     	; 0x5bb2 <_Z8startUDPhPhj+0x20>
    5ba6:	92 81       	ldd	r25, Z+2	; 0x02
    5ba8:	91 11       	cpse	r25, r1
    5baa:	03 c0       	rjmp	.+6      	; 0x5bb2 <_Z8startUDPhPhj+0x20>
    5bac:	93 81       	ldd	r25, Z+3	; 0x03
    5bae:	99 23       	and	r25, r25
    5bb0:	69 f0       	breq	.+26     	; 0x5bcc <_Z8startUDPhPhj+0x3a>
    5bb2:	41 15       	cp	r20, r1
    5bb4:	51 05       	cpc	r21, r1
    5bb6:	51 f0       	breq	.+20     	; 0x5bcc <_Z8startUDPhPhj+0x3a>
    5bb8:	8a 01       	movw	r16, r20
    5bba:	bf 01       	movw	r22, r30
    5bbc:	c8 2f       	mov	r28, r24
  {
    return 0;
  }
  else
  {
    w5500.writeSnDIPR(s, addr);
    5bbe:	71 de       	rcall	.-798    	; 0x58a2 <_ZN10W5500Class11writeSnDIPREhPh>
    w5500.writeSnDPORT(s, port);
    5bc0:	b8 01       	movw	r22, r16
    5bc2:	8c 2f       	mov	r24, r28
    5bc4:	9f de       	rcall	.-706    	; 0x5904 <_ZN10W5500Class12writeSnDPORTEhj>
    return 1;
    5bc6:	81 e0       	ldi	r24, 0x01	; 1
    5bc8:	90 e0       	ldi	r25, 0x00	; 0
    5bca:	02 c0       	rjmp	.+4      	; 0x5bd0 <_Z8startUDPhPhj+0x3e>
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
     ((port == 0x00))
    ) 
  {
    return 0;
    5bcc:	80 e0       	ldi	r24, 0x00	; 0
    5bce:	90 e0       	ldi	r25, 0x00	; 0
  {
    w5500.writeSnDIPR(s, addr);
    w5500.writeSnDPORT(s, port);
    return 1;
  }
}
    5bd0:	cf 91       	pop	r28
    5bd2:	1f 91       	pop	r17
    5bd4:	0f 91       	pop	r16
    5bd6:	08 95       	ret

00005bd8 <_Z7sendUDPh>:

int sendUDP(SOCKET s)
{
    5bd8:	cf 93       	push	r28
    5bda:	c8 2f       	mov	r28, r24
  w5500.execCmdSn(s, Sock_SEND);
    5bdc:	40 e2       	ldi	r20, 0x20	; 32
    5bde:	68 2f       	mov	r22, r24
    5be0:	85 e5       	ldi	r24, 0x55	; 85
    5be2:	9c e0       	ldi	r25, 0x0C	; 12
    5be4:	15 d2       	rcall	.+1066   	; 0x6010 <_ZN10W5500Class9execCmdSnEh7SockCMD>
		
  /* +2008.01 bj */
  while ( (w5500.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
    5be6:	8c 2f       	mov	r24, r28
    5be8:	6f de       	rcall	.-802    	; 0x58c8 <_ZN10W5500Class8readSnIREh>
    5bea:	84 fd       	sbrc	r24, 4
    5bec:	0a c0       	rjmp	.+20     	; 0x5c02 <_Z7sendUDPh+0x2a>
  {
    if (w5500.readSnIR(s) & SnIR::TIMEOUT)
    5bee:	8c 2f       	mov	r24, r28
    5bf0:	6b de       	rcall	.-810    	; 0x58c8 <_ZN10W5500Class8readSnIREh>
    5bf2:	83 ff       	sbrs	r24, 3
    5bf4:	f8 cf       	rjmp	.-16     	; 0x5be6 <_Z7sendUDPh+0xe>
    {
      /* +2008.01 [bj]: clear interrupt */
      w5500.writeSnIR(s, (SnIR::SEND_OK|SnIR::TIMEOUT));
    5bf6:	68 e1       	ldi	r22, 0x18	; 24
    5bf8:	8c 2f       	mov	r24, r28
    5bfa:	80 de       	rcall	.-768    	; 0x58fc <_ZN10W5500Class9writeSnIREhh>
    5bfc:	80 e0       	ldi	r24, 0x00	; 0
      return 0;
    5bfe:	90 e0       	ldi	r25, 0x00	; 0
    5c00:	05 c0       	rjmp	.+10     	; 0x5c0c <_Z7sendUDPh+0x34>
    }
  }

  /* +2008.01 bj */	
  w5500.writeSnIR(s, SnIR::SEND_OK);
    5c02:	60 e1       	ldi	r22, 0x10	; 16
    5c04:	8c 2f       	mov	r24, r28
    5c06:	7a de       	rcall	.-780    	; 0x58fc <_ZN10W5500Class9writeSnIREhh>
    5c08:	81 e0       	ldi	r24, 0x01	; 1

  /* Sent ok */
  return 1;
    5c0a:	90 e0       	ldi	r25, 0x00	; 0
    5c0c:	cf 91       	pop	r28
}
    5c0e:	08 95       	ret

00005c10 <_ZN8SPIClass16beginTransactionE11SPISettings>:
    5c10:	20 91 58 0c 	lds	r18, 0x0C58	; 0x800c58 <_ZN8SPIClass13interruptModeE>
    uint8_t _data = SPI.transfer(0);
    resetSS();
    SPI.endTransaction();

    return _data;
}
    5c14:	22 23       	and	r18, r18
    5c16:	99 f0       	breq	.+38     	; 0x5c3e <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    5c18:	4f b7       	in	r20, 0x3f	; 63
    5c1a:	f8 94       	cli
    5c1c:	20 91 58 0c 	lds	r18, 0x0C58	; 0x800c58 <_ZN8SPIClass13interruptModeE>
    5c20:	21 30       	cpi	r18, 0x01	; 1
    5c22:	59 f4       	brne	.+22     	; 0x5c3a <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
    5c24:	2d b3       	in	r18, 0x1d	; 29
    5c26:	20 93 56 0c 	sts	0x0C56, r18	; 0x800c56 <_ZN8SPIClass13interruptSaveE>
    5c2a:	3d b3       	in	r19, 0x1d	; 29
    5c2c:	20 91 57 0c 	lds	r18, 0x0C57	; 0x800c57 <_ZN8SPIClass13interruptMaskE>
    5c30:	20 95       	com	r18
    5c32:	23 23       	and	r18, r19
    5c34:	2d bb       	out	0x1d, r18	; 29
    5c36:	4f bf       	out	0x3f, r20	; 63
    5c38:	02 c0       	rjmp	.+4      	; 0x5c3e <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    5c3a:	40 93 56 0c 	sts	0x0C56, r20	; 0x800c56 <_ZN8SPIClass13interruptSaveE>
    5c3e:	8c bd       	out	0x2c, r24	; 44
    5c40:	9d bd       	out	0x2d, r25	; 45
    5c42:	08 95       	ret

00005c44 <_ZN8SPIClass8transferEh>:
    5c44:	8e bd       	out	0x2e, r24	; 46
    5c46:	00 00       	nop
    5c48:	0d b4       	in	r0, 0x2d	; 45
    5c4a:	07 fe       	sbrs	r0, 7
    5c4c:	fd cf       	rjmp	.-6      	; 0x5c48 <_ZN8SPIClass8transferEh+0x4>
    5c4e:	8e b5       	in	r24, 0x2e	; 46
    5c50:	08 95       	ret

00005c52 <_ZN8SPIClass14endTransactionEv>:
    5c52:	80 91 58 0c 	lds	r24, 0x0C58	; 0x800c58 <_ZN8SPIClass13interruptModeE>
    5c56:	88 23       	and	r24, r24
    5c58:	61 f0       	breq	.+24     	; 0x5c72 <_ZN8SPIClass14endTransactionEv+0x20>
    5c5a:	9f b7       	in	r25, 0x3f	; 63
    5c5c:	f8 94       	cli
    5c5e:	20 91 58 0c 	lds	r18, 0x0C58	; 0x800c58 <_ZN8SPIClass13interruptModeE>
    5c62:	80 91 56 0c 	lds	r24, 0x0C56	; 0x800c56 <_ZN8SPIClass13interruptSaveE>
    5c66:	21 30       	cpi	r18, 0x01	; 1
    5c68:	19 f4       	brne	.+6      	; 0x5c70 <_ZN8SPIClass14endTransactionEv+0x1e>
    5c6a:	8d bb       	out	0x1d, r24	; 29
    5c6c:	9f bf       	out	0x3f, r25	; 63
    5c6e:	08 95       	ret
    5c70:	8f bf       	out	0x3f, r24	; 63
    5c72:	08 95       	ret

00005c74 <_ZN10W5500Class5setSSEv>:
    5c74:	44 98       	cbi	0x08, 4	; 8
    5c76:	08 95       	ret

00005c78 <_ZN10W5500Class7resetSSEv>:
    5c78:	44 9a       	sbi	0x08, 4	; 8
    5c7a:	08 95       	ret

00005c7c <_ZN10W5500Class5writeEjhh>:
    5c7c:	0f 93       	push	r16
    5c7e:	1f 93       	push	r17
    5c80:	cf 93       	push	r28
    5c82:	df 93       	push	r29
    5c84:	18 2f       	mov	r17, r24
    5c86:	09 2f       	mov	r16, r25
    5c88:	d6 2f       	mov	r29, r22
    5c8a:	c4 2f       	mov	r28, r20
    5c8c:	80 91 53 0c 	lds	r24, 0x0C53	; 0x800c53 <wiznet_SPI_settings>
    5c90:	90 91 54 0c 	lds	r25, 0x0C54	; 0x800c54 <wiznet_SPI_settings+0x1>
    5c94:	bd df       	rcall	.-134    	; 0x5c10 <_ZN8SPIClass16beginTransactionE11SPISettings>
    5c96:	ee df       	rcall	.-36     	; 0x5c74 <_ZN10W5500Class5setSSEv>
    5c98:	80 2f       	mov	r24, r16
    5c9a:	d4 df       	rcall	.-88     	; 0x5c44 <_ZN8SPIClass8transferEh>
    5c9c:	81 2f       	mov	r24, r17
    5c9e:	d2 df       	rcall	.-92     	; 0x5c44 <_ZN8SPIClass8transferEh>
    5ca0:	8d 2f       	mov	r24, r29
    5ca2:	d0 df       	rcall	.-96     	; 0x5c44 <_ZN8SPIClass8transferEh>
    5ca4:	8c 2f       	mov	r24, r28
    5ca6:	ce df       	rcall	.-100    	; 0x5c44 <_ZN8SPIClass8transferEh>
    5ca8:	e7 df       	rcall	.-50     	; 0x5c78 <_ZN10W5500Class7resetSSEv>
    5caa:	d3 df       	rcall	.-90     	; 0x5c52 <_ZN8SPIClass14endTransactionEv>
    5cac:	81 e0       	ldi	r24, 0x01	; 1
    5cae:	df 91       	pop	r29
    5cb0:	cf 91       	pop	r28
    5cb2:	1f 91       	pop	r17
    5cb4:	0f 91       	pop	r16
    5cb6:	08 95       	ret

00005cb8 <_ZN10W5500Class5writeEjhPKhj>:
    5cb8:	df 92       	push	r13
    5cba:	ef 92       	push	r14
    5cbc:	ff 92       	push	r15
    5cbe:	0f 93       	push	r16
    5cc0:	1f 93       	push	r17
    5cc2:	cf 93       	push	r28
    5cc4:	df 93       	push	r29
    5cc6:	d8 2f       	mov	r29, r24
    5cc8:	d9 2e       	mov	r13, r25
    5cca:	c6 2f       	mov	r28, r22
    5ccc:	7a 01       	movw	r14, r20
    5cce:	89 01       	movw	r16, r18
    5cd0:	80 91 53 0c 	lds	r24, 0x0C53	; 0x800c53 <wiznet_SPI_settings>
    5cd4:	90 91 54 0c 	lds	r25, 0x0C54	; 0x800c54 <wiznet_SPI_settings+0x1>
    5cd8:	9b df       	rcall	.-202    	; 0x5c10 <_ZN8SPIClass16beginTransactionE11SPISettings>
    5cda:	cc df       	rcall	.-104    	; 0x5c74 <_ZN10W5500Class5setSSEv>
    5cdc:	8d 2d       	mov	r24, r13
    5cde:	b2 df       	rcall	.-156    	; 0x5c44 <_ZN8SPIClass8transferEh>
    5ce0:	8d 2f       	mov	r24, r29
    5ce2:	b0 df       	rcall	.-160    	; 0x5c44 <_ZN8SPIClass8transferEh>
    5ce4:	8c 2f       	mov	r24, r28
    5ce6:	ae df       	rcall	.-164    	; 0x5c44 <_ZN8SPIClass8transferEh>
    5ce8:	e7 01       	movw	r28, r14
    5cea:	e0 0e       	add	r14, r16
    5cec:	f1 1e       	adc	r15, r17
    5cee:	ce 15       	cp	r28, r14
    5cf0:	df 05       	cpc	r29, r15
    5cf2:	19 f0       	breq	.+6      	; 0x5cfa <_ZN10W5500Class5writeEjhPKhj+0x42>
    5cf4:	89 91       	ld	r24, Y+
    5cf6:	a6 df       	rcall	.-180    	; 0x5c44 <_ZN8SPIClass8transferEh>
    5cf8:	fa cf       	rjmp	.-12     	; 0x5cee <_ZN10W5500Class5writeEjhPKhj+0x36>
    5cfa:	be df       	rcall	.-132    	; 0x5c78 <_ZN10W5500Class7resetSSEv>
    5cfc:	aa df       	rcall	.-172    	; 0x5c52 <_ZN8SPIClass14endTransactionEv>
    5cfe:	c8 01       	movw	r24, r16
    5d00:	df 91       	pop	r29
    5d02:	cf 91       	pop	r28
    5d04:	1f 91       	pop	r17
    5d06:	0f 91       	pop	r16
    5d08:	ff 90       	pop	r15
    5d0a:	ef 90       	pop	r14
    5d0c:	df 90       	pop	r13
    5d0e:	08 95       	ret

00005d10 <_ZN10W5500Class4readEjh>:
    5d10:	1f 93       	push	r17
    5d12:	cf 93       	push	r28
    5d14:	df 93       	push	r29
    5d16:	d8 2f       	mov	r29, r24
    5d18:	19 2f       	mov	r17, r25
    5d1a:	c6 2f       	mov	r28, r22
    5d1c:	80 91 53 0c 	lds	r24, 0x0C53	; 0x800c53 <wiznet_SPI_settings>
    5d20:	90 91 54 0c 	lds	r25, 0x0C54	; 0x800c54 <wiznet_SPI_settings+0x1>
    5d24:	75 df       	rcall	.-278    	; 0x5c10 <_ZN8SPIClass16beginTransactionE11SPISettings>
    5d26:	a6 df       	rcall	.-180    	; 0x5c74 <_ZN10W5500Class5setSSEv>
    5d28:	81 2f       	mov	r24, r17
    5d2a:	8c df       	rcall	.-232    	; 0x5c44 <_ZN8SPIClass8transferEh>
    5d2c:	8d 2f       	mov	r24, r29
    5d2e:	8a df       	rcall	.-236    	; 0x5c44 <_ZN8SPIClass8transferEh>
    5d30:	8c 2f       	mov	r24, r28
    5d32:	88 df       	rcall	.-240    	; 0x5c44 <_ZN8SPIClass8transferEh>
    5d34:	80 e0       	ldi	r24, 0x00	; 0
    5d36:	86 df       	rcall	.-244    	; 0x5c44 <_ZN8SPIClass8transferEh>
    5d38:	c8 2f       	mov	r28, r24
    5d3a:	9e df       	rcall	.-196    	; 0x5c78 <_ZN10W5500Class7resetSSEv>
    5d3c:	8a df       	rcall	.-236    	; 0x5c52 <_ZN8SPIClass14endTransactionEv>
    5d3e:	8c 2f       	mov	r24, r28
    5d40:	df 91       	pop	r29
    5d42:	cf 91       	pop	r28
    5d44:	1f 91       	pop	r17
    5d46:	08 95       	ret

00005d48 <_ZN10W5500Class4initEh>:
    5d48:	cf 93       	push	r28
    5d4a:	df 93       	push	r29
    5d4c:	60 93 52 0c 	sts	0x0C52, r22	; 0x800c52 <SPI_CS>
    5d50:	68 ee       	ldi	r22, 0xE8	; 232
    5d52:	73 e0       	ldi	r23, 0x03	; 3
    5d54:	80 e0       	ldi	r24, 0x00	; 0
    5d56:	90 e0       	ldi	r25, 0x00	; 0
    5d58:	0e 94 55 3a 	call	0x74aa	; 0x74aa <delay>
    5d5c:	3c 9a       	sbi	0x07, 4	; 7
    5d5e:	10 d4       	rcall	.+2080   	; 0x6580 <_ZN8SPIClass5beginEv>
    5d60:	60 e0       	ldi	r22, 0x00	; 0
    5d62:	80 e0       	ldi	r24, 0x00	; 0
    5d64:	90 e0       	ldi	r25, 0x00	; 0
    5d66:	d4 df       	rcall	.-88     	; 0x5d10 <_ZN10W5500Class4readEjh>
    5d68:	48 2f       	mov	r20, r24
    5d6a:	40 68       	ori	r20, 0x80	; 128
    5d6c:	64 e0       	ldi	r22, 0x04	; 4
    5d6e:	80 e0       	ldi	r24, 0x00	; 0
    5d70:	90 e0       	ldi	r25, 0x00	; 0
    5d72:	84 df       	rcall	.-248    	; 0x5c7c <_ZN10W5500Class5writeEjhh>
    5d74:	c0 e0       	ldi	r28, 0x00	; 0
    5d76:	dc 2f       	mov	r29, r28
    5d78:	d2 95       	swap	r29
    5d7a:	dd 0f       	add	r29, r29
    5d7c:	d0 7e       	andi	r29, 0xE0	; 224
    5d7e:	d4 5f       	subi	r29, 0xF4	; 244
    5d80:	42 e0       	ldi	r20, 0x02	; 2
    5d82:	6d 2f       	mov	r22, r29
    5d84:	8e e1       	ldi	r24, 0x1E	; 30
    5d86:	90 e0       	ldi	r25, 0x00	; 0
    5d88:	79 df       	rcall	.-270    	; 0x5c7c <_ZN10W5500Class5writeEjhh>
    5d8a:	42 e0       	ldi	r20, 0x02	; 2
    5d8c:	6d 2f       	mov	r22, r29
    5d8e:	8f e1       	ldi	r24, 0x1F	; 31
    5d90:	90 e0       	ldi	r25, 0x00	; 0
    5d92:	74 df       	rcall	.-280    	; 0x5c7c <_ZN10W5500Class5writeEjhh>
    5d94:	cf 5f       	subi	r28, 0xFF	; 255
    5d96:	c8 30       	cpi	r28, 0x08	; 8
    5d98:	71 f7       	brne	.-36     	; 0x5d76 <_ZN10W5500Class4initEh+0x2e>
    5d9a:	df 91       	pop	r29
    5d9c:	cf 91       	pop	r28
    5d9e:	08 95       	ret

00005da0 <_ZN10W5500Class12readSnTX_FSREh>:
    5da0:	1f 93       	push	r17
    5da2:	cf 93       	push	r28
    5da4:	df 93       	push	r29
    5da6:	18 2f       	mov	r17, r24
    5da8:	60 e2       	ldi	r22, 0x20	; 32
    5daa:	70 e0       	ldi	r23, 0x00	; 0
    5dac:	85 dd       	rcall	.-1270   	; 0x58b8 <_ZN10W5500Class6readSnEhj>
    5dae:	c8 2f       	mov	r28, r24
    5db0:	d0 e0       	ldi	r29, 0x00	; 0
    5db2:	dc 2f       	mov	r29, r28
    5db4:	cc 27       	eor	r28, r28
    5db6:	61 e2       	ldi	r22, 0x21	; 33
    5db8:	70 e0       	ldi	r23, 0x00	; 0
    5dba:	81 2f       	mov	r24, r17
    5dbc:	7d dd       	rcall	.-1286   	; 0x58b8 <_ZN10W5500Class6readSnEhj>
    5dbe:	9e 01       	movw	r18, r28
    5dc0:	28 0f       	add	r18, r24
    5dc2:	31 1d       	adc	r19, r1
    5dc4:	c9 01       	movw	r24, r18
    5dc6:	df 91       	pop	r29
    5dc8:	cf 91       	pop	r28
    5dca:	1f 91       	pop	r17
    5dcc:	08 95       	ret

00005dce <_ZN10W5500Class13getTXFreeSizeEh>:
    5dce:	ff 92       	push	r15
    5dd0:	0f 93       	push	r16
    5dd2:	1f 93       	push	r17
    5dd4:	cf 93       	push	r28
    5dd6:	df 93       	push	r29
    5dd8:	f6 2e       	mov	r15, r22
    5dda:	c0 e0       	ldi	r28, 0x00	; 0
    5ddc:	d0 e0       	ldi	r29, 0x00	; 0
    5dde:	8f 2d       	mov	r24, r15
    5de0:	df df       	rcall	.-66     	; 0x5da0 <_ZN10W5500Class12readSnTX_FSREh>
    5de2:	8c 01       	movw	r16, r24
    5de4:	89 2b       	or	r24, r25
    5de6:	19 f0       	breq	.+6      	; 0x5dee <_ZN10W5500Class13getTXFreeSizeEh+0x20>
    5de8:	8f 2d       	mov	r24, r15
    5dea:	da df       	rcall	.-76     	; 0x5da0 <_ZN10W5500Class12readSnTX_FSREh>
    5dec:	ec 01       	movw	r28, r24
    5dee:	c0 17       	cp	r28, r16
    5df0:	d1 07       	cpc	r29, r17
    5df2:	a9 f7       	brne	.-22     	; 0x5dde <_ZN10W5500Class13getTXFreeSizeEh+0x10>
    5df4:	ce 01       	movw	r24, r28
    5df6:	df 91       	pop	r29
    5df8:	cf 91       	pop	r28
    5dfa:	1f 91       	pop	r17
    5dfc:	0f 91       	pop	r16
    5dfe:	ff 90       	pop	r15
    5e00:	08 95       	ret

00005e02 <_ZN10W5500Class12readSnRX_RSREh>:
    5e02:	1f 93       	push	r17
    5e04:	cf 93       	push	r28
    5e06:	df 93       	push	r29
    5e08:	18 2f       	mov	r17, r24
    5e0a:	66 e2       	ldi	r22, 0x26	; 38
    5e0c:	70 e0       	ldi	r23, 0x00	; 0
    5e0e:	54 dd       	rcall	.-1368   	; 0x58b8 <_ZN10W5500Class6readSnEhj>
    5e10:	c8 2f       	mov	r28, r24
    5e12:	d0 e0       	ldi	r29, 0x00	; 0
    5e14:	dc 2f       	mov	r29, r28
    5e16:	cc 27       	eor	r28, r28
    5e18:	67 e2       	ldi	r22, 0x27	; 39
    5e1a:	70 e0       	ldi	r23, 0x00	; 0
    5e1c:	81 2f       	mov	r24, r17
    5e1e:	4c dd       	rcall	.-1384   	; 0x58b8 <_ZN10W5500Class6readSnEhj>
    5e20:	9e 01       	movw	r18, r28
    5e22:	28 0f       	add	r18, r24
    5e24:	31 1d       	adc	r19, r1
    5e26:	c9 01       	movw	r24, r18
    5e28:	df 91       	pop	r29
    5e2a:	cf 91       	pop	r28
    5e2c:	1f 91       	pop	r17
    5e2e:	08 95       	ret

00005e30 <_ZN10W5500Class17getRXReceivedSizeEh>:
    5e30:	ff 92       	push	r15
    5e32:	0f 93       	push	r16
    5e34:	1f 93       	push	r17
    5e36:	cf 93       	push	r28
    5e38:	df 93       	push	r29
    5e3a:	f6 2e       	mov	r15, r22
    5e3c:	c0 e0       	ldi	r28, 0x00	; 0
    5e3e:	d0 e0       	ldi	r29, 0x00	; 0
    5e40:	8f 2d       	mov	r24, r15
    5e42:	df df       	rcall	.-66     	; 0x5e02 <_ZN10W5500Class12readSnRX_RSREh>
    5e44:	8c 01       	movw	r16, r24
    5e46:	89 2b       	or	r24, r25
    5e48:	19 f0       	breq	.+6      	; 0x5e50 <_ZN10W5500Class17getRXReceivedSizeEh+0x20>
    5e4a:	8f 2d       	mov	r24, r15
    5e4c:	da df       	rcall	.-76     	; 0x5e02 <_ZN10W5500Class12readSnRX_RSREh>
    5e4e:	ec 01       	movw	r28, r24
    5e50:	c0 17       	cp	r28, r16
    5e52:	d1 07       	cpc	r29, r17
    5e54:	a9 f7       	brne	.-22     	; 0x5e40 <_ZN10W5500Class17getRXReceivedSizeEh+0x10>
    5e56:	ce 01       	movw	r24, r28
    5e58:	df 91       	pop	r29
    5e5a:	cf 91       	pop	r28
    5e5c:	1f 91       	pop	r17
    5e5e:	0f 91       	pop	r16
    5e60:	ff 90       	pop	r15
    5e62:	08 95       	ret

00005e64 <_ZN10W5500Class27send_data_processing_offsetEhjPKhj>:
    5e64:	af 92       	push	r10
    5e66:	bf 92       	push	r11
    5e68:	df 92       	push	r13
    5e6a:	ef 92       	push	r14
    5e6c:	ff 92       	push	r15
    5e6e:	0f 93       	push	r16
    5e70:	1f 93       	push	r17
    5e72:	cf 93       	push	r28
    5e74:	df 93       	push	r29
    5e76:	d6 2e       	mov	r13, r22
    5e78:	7a 01       	movw	r14, r20
    5e7a:	59 01       	movw	r10, r18
    5e7c:	64 e2       	ldi	r22, 0x24	; 36
    5e7e:	70 e0       	ldi	r23, 0x00	; 0
    5e80:	8d 2d       	mov	r24, r13
    5e82:	1a dd       	rcall	.-1484   	; 0x58b8 <_ZN10W5500Class6readSnEhj>
    5e84:	c8 2f       	mov	r28, r24
    5e86:	65 e2       	ldi	r22, 0x25	; 37
    5e88:	70 e0       	ldi	r23, 0x00	; 0
    5e8a:	8d 2d       	mov	r24, r13
    5e8c:	15 dd       	rcall	.-1494   	; 0x58b8 <_ZN10W5500Class6readSnEhj>
    5e8e:	d0 e0       	ldi	r29, 0x00	; 0
    5e90:	dc 2f       	mov	r29, r28
    5e92:	cc 27       	eor	r28, r28
    5e94:	e8 0e       	add	r14, r24
    5e96:	f1 1c       	adc	r15, r1
    5e98:	ce 0d       	add	r28, r14
    5e9a:	df 1d       	adc	r29, r15
    5e9c:	6d 2d       	mov	r22, r13
    5e9e:	62 95       	swap	r22
    5ea0:	66 0f       	add	r22, r22
    5ea2:	60 7e       	andi	r22, 0xE0	; 224
    5ea4:	6c 5e       	subi	r22, 0xEC	; 236
    5ea6:	98 01       	movw	r18, r16
    5ea8:	a5 01       	movw	r20, r10
    5eaa:	ce 01       	movw	r24, r28
    5eac:	05 df       	rcall	.-502    	; 0x5cb8 <_ZN10W5500Class5writeEjhPKhj>
    5eae:	c0 0f       	add	r28, r16
    5eb0:	d1 1f       	adc	r29, r17
    5eb2:	4d 2f       	mov	r20, r29
    5eb4:	64 e2       	ldi	r22, 0x24	; 36
    5eb6:	70 e0       	ldi	r23, 0x00	; 0
    5eb8:	8d 2d       	mov	r24, r13
    5eba:	09 dd       	rcall	.-1518   	; 0x58ce <_ZN10W5500Class7writeSnEhjh>
    5ebc:	4c 2f       	mov	r20, r28
    5ebe:	65 e2       	ldi	r22, 0x25	; 37
    5ec0:	70 e0       	ldi	r23, 0x00	; 0
    5ec2:	8d 2d       	mov	r24, r13
    5ec4:	df 91       	pop	r29
    5ec6:	cf 91       	pop	r28
    5ec8:	1f 91       	pop	r17
    5eca:	0f 91       	pop	r16
    5ecc:	ff 90       	pop	r15
    5ece:	ef 90       	pop	r14
    5ed0:	df 90       	pop	r13
    5ed2:	bf 90       	pop	r11
    5ed4:	af 90       	pop	r10
    5ed6:	fb cc       	rjmp	.-1546   	; 0x58ce <_ZN10W5500Class7writeSnEhjh>

00005ed8 <_ZN10W5500Class20send_data_processingEhPKhj>:
    5ed8:	0f 93       	push	r16
    5eda:	1f 93       	push	r17
    5edc:	89 01       	movw	r16, r18
    5ede:	9a 01       	movw	r18, r20
    5ee0:	40 e0       	ldi	r20, 0x00	; 0
    5ee2:	50 e0       	ldi	r21, 0x00	; 0
    5ee4:	bf df       	rcall	.-130    	; 0x5e64 <_ZN10W5500Class27send_data_processing_offsetEhjPKhj>
    5ee6:	1f 91       	pop	r17
    5ee8:	0f 91       	pop	r16
    5eea:	08 95       	ret

00005eec <_ZN10W5500Class4readEjhPhj>:
    5eec:	df 92       	push	r13
    5eee:	ef 92       	push	r14
    5ef0:	ff 92       	push	r15
    5ef2:	0f 93       	push	r16
    5ef4:	1f 93       	push	r17
    5ef6:	cf 93       	push	r28
    5ef8:	df 93       	push	r29
    5efa:	d8 2f       	mov	r29, r24
    5efc:	d9 2e       	mov	r13, r25
    5efe:	c6 2f       	mov	r28, r22
    5f00:	7a 01       	movw	r14, r20
    5f02:	89 01       	movw	r16, r18
    5f04:	80 91 53 0c 	lds	r24, 0x0C53	; 0x800c53 <wiznet_SPI_settings>
    5f08:	90 91 54 0c 	lds	r25, 0x0C54	; 0x800c54 <wiznet_SPI_settings+0x1>
    5f0c:	81 de       	rcall	.-766    	; 0x5c10 <_ZN8SPIClass16beginTransactionE11SPISettings>
    5f0e:	b2 de       	rcall	.-668    	; 0x5c74 <_ZN10W5500Class5setSSEv>
    5f10:	8d 2d       	mov	r24, r13
    5f12:	98 de       	rcall	.-720    	; 0x5c44 <_ZN8SPIClass8transferEh>
    5f14:	8d 2f       	mov	r24, r29
    5f16:	96 de       	rcall	.-724    	; 0x5c44 <_ZN8SPIClass8transferEh>
    5f18:	8c 2f       	mov	r24, r28
    5f1a:	94 de       	rcall	.-728    	; 0x5c44 <_ZN8SPIClass8transferEh>
    5f1c:	e7 01       	movw	r28, r14
    5f1e:	e0 0e       	add	r14, r16
    5f20:	f1 1e       	adc	r15, r17
    5f22:	ce 15       	cp	r28, r14
    5f24:	df 05       	cpc	r29, r15
    5f26:	21 f0       	breq	.+8      	; 0x5f30 <_ZN10W5500Class4readEjhPhj+0x44>
    5f28:	80 e0       	ldi	r24, 0x00	; 0
    5f2a:	8c de       	rcall	.-744    	; 0x5c44 <_ZN8SPIClass8transferEh>
    5f2c:	89 93       	st	Y+, r24
    5f2e:	f9 cf       	rjmp	.-14     	; 0x5f22 <_ZN10W5500Class4readEjhPhj+0x36>
    5f30:	a3 de       	rcall	.-698    	; 0x5c78 <_ZN10W5500Class7resetSSEv>
    5f32:	8f de       	rcall	.-738    	; 0x5c52 <_ZN8SPIClass14endTransactionEv>
    5f34:	c8 01       	movw	r24, r16
    5f36:	df 91       	pop	r29
    5f38:	cf 91       	pop	r28
    5f3a:	1f 91       	pop	r17
    5f3c:	0f 91       	pop	r16
    5f3e:	ff 90       	pop	r15
    5f40:	ef 90       	pop	r14
    5f42:	df 90       	pop	r13
    5f44:	08 95       	ret

00005f46 <_ZN10W5500Class9read_dataEhjPVhj>:
    5f46:	0f 93       	push	r16
    5f48:	1f 93       	push	r17
    5f4a:	cf 93       	push	r28
    5f4c:	df 93       	push	r29
    5f4e:	00 d0       	rcall	.+0      	; 0x5f50 <_ZN10W5500Class9read_dataEhjPVhj+0xa>
    5f50:	cd b7       	in	r28, 0x3d	; 61
    5f52:	de b7       	in	r29, 0x3e	; 62
    5f54:	5a 83       	std	Y+2, r21	; 0x02
    5f56:	49 83       	std	Y+1, r20	; 0x01
    5f58:	a9 01       	movw	r20, r18
    5f5a:	98 01       	movw	r18, r16
    5f5c:	89 81       	ldd	r24, Y+1	; 0x01
    5f5e:	9a 81       	ldd	r25, Y+2	; 0x02
    5f60:	62 95       	swap	r22
    5f62:	66 0f       	add	r22, r22
    5f64:	60 7e       	andi	r22, 0xE0	; 224
    5f66:	68 5e       	subi	r22, 0xE8	; 232
    5f68:	0f 90       	pop	r0
    5f6a:	0f 90       	pop	r0
    5f6c:	df 91       	pop	r29
    5f6e:	cf 91       	pop	r28
    5f70:	1f 91       	pop	r17
    5f72:	0f 91       	pop	r16
    5f74:	bb cf       	rjmp	.-138    	; 0x5eec <_ZN10W5500Class4readEjhPhj>

00005f76 <_ZN10W5500Class20recv_data_processingEhPhjh>:
    5f76:	8f 92       	push	r8
    5f78:	9f 92       	push	r9
    5f7a:	af 92       	push	r10
    5f7c:	bf 92       	push	r11
    5f7e:	cf 92       	push	r12
    5f80:	df 92       	push	r13
    5f82:	ef 92       	push	r14
    5f84:	ff 92       	push	r15
    5f86:	0f 93       	push	r16
    5f88:	1f 93       	push	r17
    5f8a:	cf 93       	push	r28
    5f8c:	df 93       	push	r29
    5f8e:	6c 01       	movw	r12, r24
    5f90:	96 2e       	mov	r9, r22
    5f92:	5a 01       	movw	r10, r20
    5f94:	79 01       	movw	r14, r18
    5f96:	80 2e       	mov	r8, r16
    5f98:	68 e2       	ldi	r22, 0x28	; 40
    5f9a:	70 e0       	ldi	r23, 0x00	; 0
    5f9c:	89 2d       	mov	r24, r9
    5f9e:	8c dc       	rcall	.-1768   	; 0x58b8 <_ZN10W5500Class6readSnEhj>
    5fa0:	08 2f       	mov	r16, r24
    5fa2:	69 e2       	ldi	r22, 0x29	; 41
    5fa4:	70 e0       	ldi	r23, 0x00	; 0
    5fa6:	89 2d       	mov	r24, r9
    5fa8:	87 dc       	rcall	.-1778   	; 0x58b8 <_ZN10W5500Class6readSnEhj>
    5faa:	10 e0       	ldi	r17, 0x00	; 0
    5fac:	10 2f       	mov	r17, r16
    5fae:	00 27       	eor	r16, r16
    5fb0:	e8 01       	movw	r28, r16
    5fb2:	c8 0f       	add	r28, r24
    5fb4:	d1 1d       	adc	r29, r1
    5fb6:	87 01       	movw	r16, r14
    5fb8:	95 01       	movw	r18, r10
    5fba:	ae 01       	movw	r20, r28
    5fbc:	69 2d       	mov	r22, r9
    5fbe:	c6 01       	movw	r24, r12
    5fc0:	c2 df       	rcall	.-124    	; 0x5f46 <_ZN10W5500Class9read_dataEhjPVhj>
    5fc2:	81 10       	cpse	r8, r1
    5fc4:	18 c0       	rjmp	.+48     	; 0x5ff6 <_ZN10W5500Class20recv_data_processingEhPhjh+0x80>
    5fc6:	0c 0f       	add	r16, r28
    5fc8:	1d 1f       	adc	r17, r29
    5fca:	41 2f       	mov	r20, r17
    5fcc:	68 e2       	ldi	r22, 0x28	; 40
    5fce:	70 e0       	ldi	r23, 0x00	; 0
    5fd0:	89 2d       	mov	r24, r9
    5fd2:	7d dc       	rcall	.-1798   	; 0x58ce <_ZN10W5500Class7writeSnEhjh>
    5fd4:	40 2f       	mov	r20, r16
    5fd6:	69 e2       	ldi	r22, 0x29	; 41
    5fd8:	70 e0       	ldi	r23, 0x00	; 0
    5fda:	89 2d       	mov	r24, r9
    5fdc:	df 91       	pop	r29
    5fde:	cf 91       	pop	r28
    5fe0:	1f 91       	pop	r17
    5fe2:	0f 91       	pop	r16
    5fe4:	ff 90       	pop	r15
    5fe6:	ef 90       	pop	r14
    5fe8:	df 90       	pop	r13
    5fea:	cf 90       	pop	r12
    5fec:	bf 90       	pop	r11
    5fee:	af 90       	pop	r10
    5ff0:	9f 90       	pop	r9
    5ff2:	8f 90       	pop	r8
    5ff4:	6c cc       	rjmp	.-1832   	; 0x58ce <_ZN10W5500Class7writeSnEhjh>
    5ff6:	df 91       	pop	r29
    5ff8:	cf 91       	pop	r28
    5ffa:	1f 91       	pop	r17
    5ffc:	0f 91       	pop	r16
    5ffe:	ff 90       	pop	r15
    6000:	ef 90       	pop	r14
    6002:	df 90       	pop	r13
    6004:	cf 90       	pop	r12
    6006:	bf 90       	pop	r11
    6008:	af 90       	pop	r10
    600a:	9f 90       	pop	r9
    600c:	8f 90       	pop	r8
    600e:	08 95       	ret

00006010 <_ZN10W5500Class9execCmdSnEh7SockCMD>:
    6010:	cf 93       	push	r28
    6012:	c6 2f       	mov	r28, r22
    6014:	61 e0       	ldi	r22, 0x01	; 1
    6016:	70 e0       	ldi	r23, 0x00	; 0
    6018:	8c 2f       	mov	r24, r28
    601a:	59 dc       	rcall	.-1870   	; 0x58ce <_ZN10W5500Class7writeSnEhjh>
    601c:	61 e0       	ldi	r22, 0x01	; 1
    601e:	70 e0       	ldi	r23, 0x00	; 0
    6020:	8c 2f       	mov	r24, r28
    6022:	4a dc       	rcall	.-1900   	; 0x58b8 <_ZN10W5500Class6readSnEhj>
    6024:	81 11       	cpse	r24, r1
    6026:	fa cf       	rjmp	.-12     	; 0x601c <_ZN10W5500Class9execCmdSnEh7SockCMD+0xc>
    6028:	cf 91       	pop	r28
    602a:	08 95       	ret

0000602c <_GLOBAL__sub_I_w5500>:
    // Invert the SPI2X bit
    clockDiv ^= 0x1;

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    602c:	e3 e5       	ldi	r30, 0x53	; 83
    602e:	fc e0       	ldi	r31, 0x0C	; 12
    6030:	80 e5       	ldi	r24, 0x50	; 80
    6032:	80 83       	st	Z, r24
    spsr = clockDiv & SPI_2XCLOCK_MASK;
    6034:	81 e0       	ldi	r24, 0x01	; 1
    6036:	81 83       	std	Z+1, r24	; 0x01
    6038:	08 95       	ret

0000603a <_ZN5I2CIOC1Ev>:
      // Remove the values which are not inputs and get the value of the pin
      pinVal = this->read() & _dirMask;
      pinVal = ( pinVal >> pin ) & 0x01; // Get the pin value
   }
   return (pinVal);
}
    603a:	fc 01       	movw	r30, r24
    603c:	12 82       	std	Z+2, r1	; 0x02
    603e:	8f ef       	ldi	r24, 0xFF	; 255
    6040:	81 83       	std	Z+1, r24	; 0x01
    6042:	10 82       	st	Z, r1
    6044:	13 82       	std	Z+3, r1	; 0x03
    6046:	08 95       	ret

00006048 <_ZN5I2CIO8portModeEh>:
    6048:	fc 01       	movw	r30, r24
    604a:	83 81       	ldd	r24, Z+3	; 0x03
    604c:	88 23       	and	r24, r24
    604e:	31 f0       	breq	.+12     	; 0x605c <_ZN5I2CIO8portModeEh+0x14>
    6050:	61 11       	cpse	r22, r1
    6052:	03 c0       	rjmp	.+6      	; 0x605a <_ZN5I2CIO8portModeEh+0x12>
    6054:	8f ef       	ldi	r24, 0xFF	; 255
    6056:	81 83       	std	Z+1, r24	; 0x01
    6058:	08 95       	ret
    605a:	11 82       	std	Z+1, r1	; 0x01
    605c:	08 95       	ret

0000605e <_ZN5I2CIO11isAvailableEh>:
    605e:	88 ec       	ldi	r24, 0xC8	; 200
    6060:	9c e0       	ldi	r25, 0x0C	; 12
    6062:	f0 d5       	rcall	.+3040   	; 0x6c44 <_ZN7TwoWire17beginTransmissionEh>
    6064:	88 ec       	ldi	r24, 0xC8	; 200
    6066:	9c e0       	ldi	r25, 0x0C	; 12
    6068:	6e d6       	rcall	.+3292   	; 0x6d46 <_ZN7TwoWire15endTransmissionEv>
    606a:	91 e0       	ldi	r25, 0x01	; 1
    606c:	81 11       	cpse	r24, r1
    606e:	90 e0       	ldi	r25, 0x00	; 0
    6070:	89 2f       	mov	r24, r25
    6072:	08 95       	ret

00006074 <_ZN5I2CIO5beginEh>:
    6074:	cf 93       	push	r28
    6076:	df 93       	push	r29
    6078:	ec 01       	movw	r28, r24
    607a:	6a 83       	std	Y+2, r22	; 0x02
    607c:	88 ec       	ldi	r24, 0xC8	; 200
    607e:	9c e0       	ldi	r25, 0x0C	; 12
    6080:	ce d5       	rcall	.+2972   	; 0x6c1e <_ZN7TwoWire5beginEv>
    6082:	6a 81       	ldd	r22, Y+2	; 0x02
    6084:	ce 01       	movw	r24, r28
    6086:	eb df       	rcall	.-42     	; 0x605e <_ZN5I2CIO11isAvailableEh>
    6088:	8b 83       	std	Y+3, r24	; 0x03
    608a:	88 23       	and	r24, r24
    608c:	21 f0       	breq	.+8      	; 0x6096 <_ZN5I2CIO5beginEh+0x22>
    608e:	88 ec       	ldi	r24, 0xC8	; 200
    6090:	9c e0       	ldi	r25, 0x0C	; 12
    6092:	01 d5       	rcall	.+2562   	; 0x6a96 <_ZN7TwoWire4readEv>
    6094:	88 83       	st	Y, r24
    6096:	8b 81       	ldd	r24, Y+3	; 0x03
    6098:	90 e0       	ldi	r25, 0x00	; 0
    609a:	df 91       	pop	r29
    609c:	cf 91       	pop	r28
    609e:	08 95       	ret

000060a0 <_ZN5I2CIO5writeEh>:
}

//
// write
int I2CIO::write ( uint8_t value )
{
    60a0:	cf 93       	push	r28
    60a2:	df 93       	push	r29
   int status = 0;
   
   if ( _initialised )
    60a4:	fc 01       	movw	r30, r24
    60a6:	23 81       	ldd	r18, Z+3	; 0x03
    60a8:	22 23       	and	r18, r18
    60aa:	99 f0       	breq	.+38     	; 0x60d2 <_ZN5I2CIO5writeEh+0x32>
    60ac:	ec 01       	movw	r28, r24
   {
      // Only write HIGH the values of the ports that have been initialised as
      // outputs updating the output shadow of the device
      _shadow = ( value & ~(_dirMask) );
    60ae:	81 81       	ldd	r24, Z+1	; 0x01
    60b0:	80 95       	com	r24
    60b2:	68 23       	and	r22, r24
    60b4:	60 83       	st	Z, r22
   
      Wire.beginTransmission ( _i2cAddr );
    60b6:	62 81       	ldd	r22, Z+2	; 0x02
    60b8:	88 ec       	ldi	r24, 0xC8	; 200
    60ba:	9c e0       	ldi	r25, 0x0C	; 12
    60bc:	c3 d5       	rcall	.+2950   	; 0x6c44 <_ZN7TwoWire17beginTransmissionEh>
#if (ARDUINO <  100)
      Wire.send ( _shadow );
#else
      Wire.write ( _shadow );
    60be:	68 81       	ld	r22, Y
    60c0:	88 ec       	ldi	r24, 0xC8	; 200
    60c2:	9c e0       	ldi	r25, 0x0C	; 12
    60c4:	6e d5       	rcall	.+2780   	; 0x6ba2 <_ZN7TwoWire5writeEh>
#endif  
      status = Wire.endTransmission ();
    60c6:	88 ec       	ldi	r24, 0xC8	; 200
    60c8:	9c e0       	ldi	r25, 0x0C	; 12
    60ca:	3d d6       	rcall	.+3194   	; 0x6d46 <_ZN7TwoWire15endTransmissionEv>
    60cc:	28 2f       	mov	r18, r24
    60ce:	30 e0       	ldi	r19, 0x00	; 0
    60d0:	02 c0       	rjmp	.+4      	; 0x60d6 <_ZN5I2CIO5writeEh+0x36>

//
// write
int I2CIO::write ( uint8_t value )
{
   int status = 0;
    60d2:	20 e0       	ldi	r18, 0x00	; 0
    60d4:	30 e0       	ldi	r19, 0x00	; 0
#else
      Wire.write ( _shadow );
#endif  
      status = Wire.endTransmission ();
   }
   return ( (status == 0) );
    60d6:	81 e0       	ldi	r24, 0x01	; 1
    60d8:	90 e0       	ldi	r25, 0x00	; 0
    60da:	23 2b       	or	r18, r19
    60dc:	11 f0       	breq	.+4      	; 0x60e2 <_ZN5I2CIO5writeEh+0x42>
    60de:	80 e0       	ldi	r24, 0x00	; 0
    60e0:	90 e0       	ldi	r25, 0x00	; 0
}
    60e2:	df 91       	pop	r29
    60e4:	cf 91       	pop	r28
    60e6:	08 95       	ret

000060e8 <_ZN3LCD15setBacklightPinEh13t_backlighPol>:

// This will 'left justify' text from the cursor
void LCD::noAutoscroll(void) 
{
   _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
   command(LCD_ENTRYMODESET | _displaymode);
    60e8:	08 95       	ret

000060ea <_ZN3LCD12setBacklightEh>:
    60ea:	08 95       	ret

000060ec <_ZN3LCD5writeEh>:
    60ec:	dc 01       	movw	r26, r24
    60ee:	ed 91       	ld	r30, X+
    60f0:	fc 91       	ld	r31, X
    60f2:	06 84       	ldd	r0, Z+14	; 0x0e
    60f4:	f7 85       	ldd	r31, Z+15	; 0x0f
    60f6:	e0 2d       	mov	r30, r0
    60f8:	41 e0       	ldi	r20, 0x01	; 1
    60fa:	09 95       	icall
    60fc:	81 e0       	ldi	r24, 0x01	; 1
    60fe:	90 e0       	ldi	r25, 0x00	; 0
    6100:	08 95       	ret

00006102 <_ZN3LCDC1Ev>:
    6102:	fc 01       	movw	r30, r24
    6104:	13 82       	std	Z+3, r1	; 0x03
    6106:	12 82       	std	Z+2, r1	; 0x02
    6108:	26 e2       	ldi	r18, 0x26	; 38
    610a:	3a e0       	ldi	r19, 0x0A	; 10
    610c:	31 83       	std	Z+1, r19	; 0x01
    610e:	20 83       	st	Z, r18
    6110:	08 95       	ret

00006112 <_ZN3LCD9backlightEv>:
    6112:	dc 01       	movw	r26, r24
    6114:	ed 91       	ld	r30, X+
    6116:	fc 91       	ld	r31, X
    6118:	04 84       	ldd	r0, Z+12	; 0x0c
    611a:	f5 85       	ldd	r31, Z+13	; 0x0d
    611c:	e0 2d       	mov	r30, r0
    611e:	6f ef       	ldi	r22, 0xFF	; 255
    6120:	09 94       	ijmp

00006122 <_ZN3LCD11noBacklightEv>:
    6122:	dc 01       	movw	r26, r24
    6124:	ed 91       	ld	r30, X+
    6126:	fc 91       	ld	r31, X
    6128:	04 84       	ldd	r0, Z+12	; 0x0c
    612a:	f5 85       	ldd	r31, Z+13	; 0x0d
    612c:	e0 2d       	mov	r30, r0
    612e:	60 e0       	ldi	r22, 0x00	; 0
    6130:	09 94       	ijmp

00006132 <_ZN3LCD7commandEh>:
    6132:	dc 01       	movw	r26, r24
    6134:	ed 91       	ld	r30, X+
    6136:	fc 91       	ld	r31, X
    6138:	06 84       	ldd	r0, Z+14	; 0x0e
    613a:	f7 85       	ldd	r31, Z+15	; 0x0f
    613c:	e0 2d       	mov	r30, r0
    613e:	40 e0       	ldi	r20, 0x00	; 0
    6140:	09 94       	ijmp

00006142 <_ZN3LCD5clearEv>:
    6142:	61 e0       	ldi	r22, 0x01	; 1
    6144:	f6 df       	rcall	.-20     	; 0x6132 <_ZN3LCD7commandEh>
    6146:	80 ed       	ldi	r24, 0xD0	; 208
    6148:	97 e0       	ldi	r25, 0x07	; 7
    614a:	0c 94 8e 3a 	jmp	0x751c	; 0x751c <delayMicroseconds>

0000614e <_ZN3LCD9setCursorEhh>:
    614e:	cf 93       	push	r28
    6150:	df 93       	push	r29
    6152:	cd b7       	in	r28, 0x3d	; 61
    6154:	de b7       	in	r29, 0x3e	; 62
    6156:	28 97       	sbiw	r28, 0x08	; 8
    6158:	0f b6       	in	r0, 0x3f	; 63
    615a:	f8 94       	cli
    615c:	de bf       	out	0x3e, r29	; 62
    615e:	0f be       	out	0x3f, r0	; 63
    6160:	cd bf       	out	0x3d, r28	; 61
    6162:	fc 01       	movw	r30, r24
    6164:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <_ZN14EthernetClient8_srcportE+0x7a>
    6168:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <_ZN14EthernetClient8_srcportE+0x7b>
    616c:	a0 91 e3 01 	lds	r26, 0x01E3	; 0x8001e3 <_ZN14EthernetClient8_srcportE+0x7c>
    6170:	b0 91 e4 01 	lds	r27, 0x01E4	; 0x8001e4 <_ZN14EthernetClient8_srcportE+0x7d>
    6174:	8d 83       	std	Y+5, r24	; 0x05
    6176:	9e 83       	std	Y+6, r25	; 0x06
    6178:	af 83       	std	Y+7, r26	; 0x07
    617a:	b8 87       	std	Y+8, r27	; 0x08
    617c:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <_ZN14EthernetClient8_srcportE+0x7e>
    6180:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <_ZN14EthernetClient8_srcportE+0x7f>
    6184:	a0 91 e7 01 	lds	r26, 0x01E7	; 0x8001e7 <_ZN14EthernetClient8_srcportE+0x80>
    6188:	b0 91 e8 01 	lds	r27, 0x01E8	; 0x8001e8 <_ZN14EthernetClient8_srcportE+0x81>
    618c:	89 83       	std	Y+1, r24	; 0x01
    618e:	9a 83       	std	Y+2, r25	; 0x02
    6190:	ab 83       	std	Y+3, r26	; 0x03
    6192:	bc 83       	std	Y+4, r27	; 0x04
    6194:	87 81       	ldd	r24, Z+7	; 0x07
    6196:	48 17       	cp	r20, r24
    6198:	10 f0       	brcs	.+4      	; 0x619e <_ZN3LCD9setCursorEhh+0x50>
    619a:	4f ef       	ldi	r20, 0xFF	; 255
    619c:	48 0f       	add	r20, r24
    619e:	90 85       	ldd	r25, Z+8	; 0x08
    61a0:	50 e0       	ldi	r21, 0x00	; 0
    61a2:	de 01       	movw	r26, r28
    61a4:	a4 0f       	add	r26, r20
    61a6:	b5 1f       	adc	r27, r21
    61a8:	90 31       	cpi	r25, 0x10	; 16
    61aa:	29 f4       	brne	.+10     	; 0x61b6 <_ZN3LCD9setCursorEhh+0x68>
    61ac:	84 30       	cpi	r24, 0x04	; 4
    61ae:	19 f4       	brne	.+6      	; 0x61b6 <_ZN3LCD9setCursorEhh+0x68>
    61b0:	11 96       	adiw	r26, 0x01	; 1
    61b2:	9c 91       	ld	r25, X
    61b4:	02 c0       	rjmp	.+4      	; 0x61ba <_ZN3LCD9setCursorEhh+0x6c>
    61b6:	15 96       	adiw	r26, 0x05	; 5
    61b8:	9c 91       	ld	r25, X
    61ba:	69 0f       	add	r22, r25
    61bc:	60 68       	ori	r22, 0x80	; 128
    61be:	cf 01       	movw	r24, r30
    61c0:	28 96       	adiw	r28, 0x08	; 8
    61c2:	0f b6       	in	r0, 0x3f	; 63
    61c4:	f8 94       	cli
    61c6:	de bf       	out	0x3e, r29	; 62
    61c8:	0f be       	out	0x3f, r0	; 63
    61ca:	cd bf       	out	0x3d, r28	; 61
    61cc:	df 91       	pop	r29
    61ce:	cf 91       	pop	r28
    61d0:	b0 cf       	rjmp	.-160    	; 0x6132 <_ZN3LCD7commandEh>

000061d2 <_ZN3LCD9noDisplayEv>:
    61d2:	fc 01       	movw	r30, r24
    61d4:	65 81       	ldd	r22, Z+5	; 0x05
    61d6:	6b 7f       	andi	r22, 0xFB	; 251
    61d8:	65 83       	std	Z+5, r22	; 0x05
    61da:	68 60       	ori	r22, 0x08	; 8
    61dc:	aa cf       	rjmp	.-172    	; 0x6132 <_ZN3LCD7commandEh>

000061de <_ZN3LCD7displayEv>:
    61de:	fc 01       	movw	r30, r24
    61e0:	65 81       	ldd	r22, Z+5	; 0x05
    61e2:	26 2f       	mov	r18, r22
    61e4:	24 60       	ori	r18, 0x04	; 4
    61e6:	25 83       	std	Z+5, r18	; 0x05
    61e8:	6c 60       	ori	r22, 0x0C	; 12
    61ea:	a3 cf       	rjmp	.-186    	; 0x6132 <_ZN3LCD7commandEh>

000061ec <_ZN3LCD5beginEhhh>:
    61ec:	cf 93       	push	r28
    61ee:	df 93       	push	r29
    61f0:	ec 01       	movw	r28, r24
    61f2:	42 30       	cpi	r20, 0x02	; 2
    61f4:	18 f0       	brcs	.+6      	; 0x61fc <_ZN3LCD5beginEhhh+0x10>
    61f6:	8c 81       	ldd	r24, Y+4	; 0x04
    61f8:	88 60       	ori	r24, 0x08	; 8
    61fa:	8c 83       	std	Y+4, r24	; 0x04
    61fc:	4f 83       	std	Y+7, r20	; 0x07
    61fe:	68 87       	std	Y+8, r22	; 0x08
    6200:	22 23       	and	r18, r18
    6202:	29 f0       	breq	.+10     	; 0x620e <_ZN3LCD5beginEhhh+0x22>
    6204:	41 30       	cpi	r20, 0x01	; 1
    6206:	19 f4       	brne	.+6      	; 0x620e <_ZN3LCD5beginEhhh+0x22>
    6208:	8c 81       	ldd	r24, Y+4	; 0x04
    620a:	84 60       	ori	r24, 0x04	; 4
    620c:	8c 83       	std	Y+4, r24	; 0x04
    620e:	64 e6       	ldi	r22, 0x64	; 100
    6210:	70 e0       	ldi	r23, 0x00	; 0
    6212:	80 e0       	ldi	r24, 0x00	; 0
    6214:	90 e0       	ldi	r25, 0x00	; 0
    6216:	0e 94 55 3a 	call	0x74aa	; 0x74aa <delay>
    621a:	6c 81       	ldd	r22, Y+4	; 0x04
    621c:	64 fd       	sbrc	r22, 4
    621e:	31 c0       	rjmp	.+98     	; 0x6282 <_ZN3LCD5beginEhhh+0x96>
    6220:	e8 81       	ld	r30, Y
    6222:	f9 81       	ldd	r31, Y+1	; 0x01
    6224:	06 84       	ldd	r0, Z+14	; 0x0e
    6226:	f7 85       	ldd	r31, Z+15	; 0x0f
    6228:	e0 2d       	mov	r30, r0
    622a:	42 e0       	ldi	r20, 0x02	; 2
    622c:	63 e0       	ldi	r22, 0x03	; 3
    622e:	ce 01       	movw	r24, r28
    6230:	09 95       	icall
    6232:	84 e9       	ldi	r24, 0x94	; 148
    6234:	91 e1       	ldi	r25, 0x11	; 17
    6236:	0e 94 8e 3a 	call	0x751c	; 0x751c <delayMicroseconds>
    623a:	e8 81       	ld	r30, Y
    623c:	f9 81       	ldd	r31, Y+1	; 0x01
    623e:	06 84       	ldd	r0, Z+14	; 0x0e
    6240:	f7 85       	ldd	r31, Z+15	; 0x0f
    6242:	e0 2d       	mov	r30, r0
    6244:	42 e0       	ldi	r20, 0x02	; 2
    6246:	63 e0       	ldi	r22, 0x03	; 3
    6248:	ce 01       	movw	r24, r28
    624a:	09 95       	icall
    624c:	86 e9       	ldi	r24, 0x96	; 150
    624e:	90 e0       	ldi	r25, 0x00	; 0
    6250:	0e 94 8e 3a 	call	0x751c	; 0x751c <delayMicroseconds>
    6254:	e8 81       	ld	r30, Y
    6256:	f9 81       	ldd	r31, Y+1	; 0x01
    6258:	06 84       	ldd	r0, Z+14	; 0x0e
    625a:	f7 85       	ldd	r31, Z+15	; 0x0f
    625c:	e0 2d       	mov	r30, r0
    625e:	42 e0       	ldi	r20, 0x02	; 2
    6260:	63 e0       	ldi	r22, 0x03	; 3
    6262:	ce 01       	movw	r24, r28
    6264:	09 95       	icall
    6266:	86 e9       	ldi	r24, 0x96	; 150
    6268:	90 e0       	ldi	r25, 0x00	; 0
    626a:	0e 94 8e 3a 	call	0x751c	; 0x751c <delayMicroseconds>
    626e:	e8 81       	ld	r30, Y
    6270:	f9 81       	ldd	r31, Y+1	; 0x01
    6272:	06 84       	ldd	r0, Z+14	; 0x0e
    6274:	f7 85       	ldd	r31, Z+15	; 0x0f
    6276:	e0 2d       	mov	r30, r0
    6278:	42 e0       	ldi	r20, 0x02	; 2
    627a:	62 e0       	ldi	r22, 0x02	; 2
    627c:	ce 01       	movw	r24, r28
    627e:	09 95       	icall
    6280:	13 c0       	rjmp	.+38     	; 0x62a8 <_ZN3LCD5beginEhhh+0xbc>
    6282:	60 62       	ori	r22, 0x20	; 32
    6284:	ce 01       	movw	r24, r28
    6286:	55 df       	rcall	.-342    	; 0x6132 <_ZN3LCD7commandEh>
    6288:	84 e9       	ldi	r24, 0x94	; 148
    628a:	91 e1       	ldi	r25, 0x11	; 17
    628c:	0e 94 8e 3a 	call	0x751c	; 0x751c <delayMicroseconds>
    6290:	6c 81       	ldd	r22, Y+4	; 0x04
    6292:	60 62       	ori	r22, 0x20	; 32
    6294:	ce 01       	movw	r24, r28
    6296:	4d df       	rcall	.-358    	; 0x6132 <_ZN3LCD7commandEh>
    6298:	86 e9       	ldi	r24, 0x96	; 150
    629a:	90 e0       	ldi	r25, 0x00	; 0
    629c:	0e 94 8e 3a 	call	0x751c	; 0x751c <delayMicroseconds>
    62a0:	6c 81       	ldd	r22, Y+4	; 0x04
    62a2:	60 62       	ori	r22, 0x20	; 32
    62a4:	ce 01       	movw	r24, r28
    62a6:	45 df       	rcall	.-374    	; 0x6132 <_ZN3LCD7commandEh>
    62a8:	86 e9       	ldi	r24, 0x96	; 150
    62aa:	90 e0       	ldi	r25, 0x00	; 0
    62ac:	0e 94 8e 3a 	call	0x751c	; 0x751c <delayMicroseconds>
    62b0:	6c 81       	ldd	r22, Y+4	; 0x04
    62b2:	60 62       	ori	r22, 0x20	; 32
    62b4:	ce 01       	movw	r24, r28
    62b6:	3d df       	rcall	.-390    	; 0x6132 <_ZN3LCD7commandEh>
    62b8:	8c e3       	ldi	r24, 0x3C	; 60
    62ba:	90 e0       	ldi	r25, 0x00	; 0
    62bc:	0e 94 8e 3a 	call	0x751c	; 0x751c <delayMicroseconds>
    62c0:	84 e0       	ldi	r24, 0x04	; 4
    62c2:	8d 83       	std	Y+5, r24	; 0x05
    62c4:	ce 01       	movw	r24, r28
    62c6:	8b df       	rcall	.-234    	; 0x61de <_ZN3LCD7displayEv>
    62c8:	ce 01       	movw	r24, r28
    62ca:	3b df       	rcall	.-394    	; 0x6142 <_ZN3LCD5clearEv>
    62cc:	82 e0       	ldi	r24, 0x02	; 2
    62ce:	8e 83       	std	Y+6, r24	; 0x06
    62d0:	66 e0       	ldi	r22, 0x06	; 6
    62d2:	ce 01       	movw	r24, r28
    62d4:	2e df       	rcall	.-420    	; 0x6132 <_ZN3LCD7commandEh>
    62d6:	ce 01       	movw	r24, r28
    62d8:	df 91       	pop	r29
    62da:	cf 91       	pop	r28
    62dc:	1a cf       	rjmp	.-460    	; 0x6112 <_ZN3LCD9backlightEv>

000062de <_ZN3LCD10createCharEhPh>:
}

// Write to CGRAM of new characters
void LCD::createChar(uint8_t location, uint8_t charmap[]) 
{
    62de:	ef 92       	push	r14
    62e0:	ff 92       	push	r15
    62e2:	0f 93       	push	r16
    62e4:	1f 93       	push	r17
    62e6:	cf 93       	push	r28
    62e8:	df 93       	push	r29
    62ea:	8c 01       	movw	r16, r24
    62ec:	7a 01       	movw	r14, r20
   location &= 0x7;            // we only have 8 locations 0-7
   
   command(LCD_SETCGRAMADDR | (location << 3));
    62ee:	67 70       	andi	r22, 0x07	; 7
    62f0:	88 e0       	ldi	r24, 0x08	; 8
    62f2:	68 9f       	mul	r22, r24
    62f4:	b0 01       	movw	r22, r0
    62f6:	11 24       	eor	r1, r1
    62f8:	60 64       	ori	r22, 0x40	; 64
    62fa:	c8 01       	movw	r24, r16
    62fc:	1a df       	rcall	.-460    	; 0x6132 <_ZN3LCD7commandEh>
   delayMicroseconds(30);
    62fe:	8e e1       	ldi	r24, 0x1E	; 30
    6300:	90 e0       	ldi	r25, 0x00	; 0
    6302:	0e 94 8e 3a 	call	0x751c	; 0x751c <delayMicroseconds>
    6306:	e7 01       	movw	r28, r14
    6308:	a8 e0       	ldi	r26, 0x08	; 8
    630a:	ea 0e       	add	r14, r26
    630c:	f1 1c       	adc	r15, r1
   
   for (uint8_t i = 0; i < 8; i++)
   {
      write(charmap[i]);      // call the virtual write method
    630e:	69 91       	ld	r22, Y+
    6310:	d8 01       	movw	r26, r16
    6312:	ed 91       	ld	r30, X+
    6314:	fc 91       	ld	r31, X
    6316:	01 90       	ld	r0, Z+
    6318:	f0 81       	ld	r31, Z
    631a:	e0 2d       	mov	r30, r0
    631c:	c8 01       	movw	r24, r16
    631e:	09 95       	icall
      delayMicroseconds(40);
    6320:	88 e2       	ldi	r24, 0x28	; 40
    6322:	90 e0       	ldi	r25, 0x00	; 0
    6324:	0e 94 8e 3a 	call	0x751c	; 0x751c <delayMicroseconds>
   location &= 0x7;            // we only have 8 locations 0-7
   
   command(LCD_SETCGRAMADDR | (location << 3));
   delayMicroseconds(30);
   
   for (uint8_t i = 0; i < 8; i++)
    6328:	ce 15       	cp	r28, r14
    632a:	df 05       	cpc	r29, r15
    632c:	81 f7       	brne	.-32     	; 0x630e <_ZN3LCD10createCharEhPh+0x30>
   {
      write(charmap[i]);      // call the virtual write method
      delayMicroseconds(40);
   }
}
    632e:	df 91       	pop	r29
    6330:	cf 91       	pop	r28
    6332:	1f 91       	pop	r17
    6334:	0f 91       	pop	r16
    6336:	ff 90       	pop	r15
    6338:	ef 90       	pop	r14
    633a:	08 95       	ret

0000633c <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol>:
LiquidCrystal_I2C::LiquidCrystal_I2C(uint8_t lcd_Addr, uint8_t En, uint8_t Rw,
                                     uint8_t Rs, uint8_t d4, uint8_t d5,
                                     uint8_t d6, uint8_t d7 )
{
   config(lcd_Addr, En, Rw, Rs, d4, d5, d6, d7);
}
    633c:	21 e0       	ldi	r18, 0x01	; 1
    633e:	01 c0       	rjmp	.+2      	; 0x6342 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol+0x6>
    6340:	22 0f       	add	r18, r18
    6342:	6a 95       	dec	r22
    6344:	ea f7       	brpl	.-6      	; 0x6340 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol+0x4>
    6346:	dc 01       	movw	r26, r24
    6348:	1b 96       	adiw	r26, 0x0b	; 11
    634a:	2c 93       	st	X, r18
    634c:	1b 97       	sbiw	r26, 0x0b	; 11
    634e:	19 96       	adiw	r26, 0x09	; 9
    6350:	4c 93       	st	X, r20
    6352:	19 97       	sbiw	r26, 0x09	; 9
    6354:	ed 91       	ld	r30, X+
    6356:	fc 91       	ld	r31, X
    6358:	04 84       	ldd	r0, Z+12	; 0x0c
    635a:	f5 85       	ldd	r31, Z+13	; 0x0d
    635c:	e0 2d       	mov	r30, r0
    635e:	60 e0       	ldi	r22, 0x00	; 0
    6360:	09 94       	ijmp

00006362 <_ZN17LiquidCrystal_I2C12setBacklightEh>:
    6362:	fc 01       	movw	r30, r24
    6364:	83 85       	ldd	r24, Z+11	; 0x0b
    6366:	88 23       	and	r24, r24
    6368:	89 f0       	breq	.+34     	; 0x638c <_ZN17LiquidCrystal_I2C12setBacklightEh+0x2a>
    636a:	91 85       	ldd	r25, Z+9	; 0x09
    636c:	91 11       	cpse	r25, r1
    636e:	03 c0       	rjmp	.+6      	; 0x6376 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x14>
    6370:	61 11       	cpse	r22, r1
    6372:	05 c0       	rjmp	.+10     	; 0x637e <_ZN17LiquidCrystal_I2C12setBacklightEh+0x1c>
    6374:	06 c0       	rjmp	.+12     	; 0x6382 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    6376:	91 30       	cpi	r25, 0x01	; 1
    6378:	21 f4       	brne	.+8      	; 0x6382 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    637a:	61 11       	cpse	r22, r1
    637c:	02 c0       	rjmp	.+4      	; 0x6382 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    637e:	84 87       	std	Z+12, r24	; 0x0c
    6380:	01 c0       	rjmp	.+2      	; 0x6384 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x22>
    6382:	14 86       	std	Z+12, r1	; 0x0c
    6384:	64 85       	ldd	r22, Z+12	; 0x0c
    6386:	cf 01       	movw	r24, r30
    6388:	0d 96       	adiw	r24, 0x0d	; 13
    638a:	8a ce       	rjmp	.-748    	; 0x60a0 <_ZN5I2CIO5writeEh>
    638c:	08 95       	ret

0000638e <_ZN17LiquidCrystal_I2C4initEv>:
    638e:	0f 93       	push	r16
    6390:	1f 93       	push	r17
    6392:	cf 93       	push	r28
    6394:	df 93       	push	r29
    6396:	8c 01       	movw	r16, r24
    6398:	ec 01       	movw	r28, r24
    639a:	2d 96       	adiw	r28, 0x0d	; 13
    639c:	fc 01       	movw	r30, r24
    639e:	62 85       	ldd	r22, Z+10	; 0x0a
    63a0:	ce 01       	movw	r24, r28
    63a2:	68 de       	rcall	.-816    	; 0x6074 <_ZN5I2CIO5beginEh>
    63a4:	01 97       	sbiw	r24, 0x01	; 1
    63a6:	59 f4       	brne	.+22     	; 0x63be <_ZN17LiquidCrystal_I2C4initEv+0x30>
    63a8:	61 e0       	ldi	r22, 0x01	; 1
    63aa:	ce 01       	movw	r24, r28
    63ac:	4d de       	rcall	.-870    	; 0x6048 <_ZN5I2CIO8portModeEh>
    63ae:	f8 01       	movw	r30, r16
    63b0:	14 82       	std	Z+4, r1	; 0x04
    63b2:	60 e0       	ldi	r22, 0x00	; 0
    63b4:	ce 01       	movw	r24, r28
    63b6:	74 de       	rcall	.-792    	; 0x60a0 <_ZN5I2CIO5writeEh>
    63b8:	81 e0       	ldi	r24, 0x01	; 1
    63ba:	90 e0       	ldi	r25, 0x00	; 0
    63bc:	02 c0       	rjmp	.+4      	; 0x63c2 <_ZN17LiquidCrystal_I2C4initEv+0x34>
    63be:	80 e0       	ldi	r24, 0x00	; 0
    63c0:	90 e0       	ldi	r25, 0x00	; 0
    63c2:	df 91       	pop	r29
    63c4:	cf 91       	pop	r28
    63c6:	1f 91       	pop	r17
    63c8:	0f 91       	pop	r16
    63ca:	08 95       	ret

000063cc <_ZN17LiquidCrystal_I2C6configEhhhhhhhh>:
    63cc:	8f 92       	push	r8
    63ce:	af 92       	push	r10
    63d0:	cf 92       	push	r12
    63d2:	ef 92       	push	r14
    63d4:	0f 93       	push	r16
    63d6:	cf 93       	push	r28
    63d8:	df 93       	push	r29
    63da:	cd b7       	in	r28, 0x3d	; 61
    63dc:	de b7       	in	r29, 0x3e	; 62
    63de:	fc 01       	movw	r30, r24
    63e0:	62 87       	std	Z+10, r22	; 0x0a
    63e2:	13 86       	std	Z+11, r1	; 0x0b
    63e4:	14 86       	std	Z+12, r1	; 0x0c
    63e6:	11 86       	std	Z+9, r1	; 0x09
    63e8:	81 e0       	ldi	r24, 0x01	; 1
    63ea:	98 2f       	mov	r25, r24
    63ec:	01 c0       	rjmp	.+2      	; 0x63f0 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x24>
    63ee:	99 0f       	add	r25, r25
    63f0:	4a 95       	dec	r20
    63f2:	ea f7       	brpl	.-6      	; 0x63ee <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x22>
    63f4:	91 8b       	std	Z+17, r25	; 0x11
    63f6:	98 2f       	mov	r25, r24
    63f8:	01 c0       	rjmp	.+2      	; 0x63fc <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x30>
    63fa:	99 0f       	add	r25, r25
    63fc:	2a 95       	dec	r18
    63fe:	ea f7       	brpl	.-6      	; 0x63fa <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x2e>
    6400:	92 8b       	std	Z+18, r25	; 0x12
    6402:	98 2f       	mov	r25, r24
    6404:	01 c0       	rjmp	.+2      	; 0x6408 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x3c>
    6406:	99 0f       	add	r25, r25
    6408:	0a 95       	dec	r16
    640a:	ea f7       	brpl	.-6      	; 0x6406 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x3a>
    640c:	93 8b       	std	Z+19, r25	; 0x13
    640e:	98 2f       	mov	r25, r24
    6410:	01 c0       	rjmp	.+2      	; 0x6414 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x48>
    6412:	99 0f       	add	r25, r25
    6414:	ea 94       	dec	r14
    6416:	ea f7       	brpl	.-6      	; 0x6412 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x46>
    6418:	94 8b       	std	Z+20, r25	; 0x14
    641a:	98 2f       	mov	r25, r24
    641c:	01 c0       	rjmp	.+2      	; 0x6420 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x54>
    641e:	99 0f       	add	r25, r25
    6420:	ca 94       	dec	r12
    6422:	ea f7       	brpl	.-6      	; 0x641e <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x52>
    6424:	95 8b       	std	Z+21, r25	; 0x15
    6426:	98 2f       	mov	r25, r24
    6428:	01 c0       	rjmp	.+2      	; 0x642c <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x60>
    642a:	99 0f       	add	r25, r25
    642c:	aa 94       	dec	r10
    642e:	ea f7       	brpl	.-6      	; 0x642a <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x5e>
    6430:	96 8b       	std	Z+22, r25	; 0x16
    6432:	01 c0       	rjmp	.+2      	; 0x6436 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x6a>
    6434:	88 0f       	add	r24, r24
    6436:	8a 94       	dec	r8
    6438:	ea f7       	brpl	.-6      	; 0x6434 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x68>
    643a:	87 8b       	std	Z+23, r24	; 0x17
    643c:	df 91       	pop	r29
    643e:	cf 91       	pop	r28
    6440:	0f 91       	pop	r16
    6442:	ef 90       	pop	r14
    6444:	cf 90       	pop	r12
    6446:	af 90       	pop	r10
    6448:	8f 90       	pop	r8
    644a:	08 95       	ret

0000644c <_ZN17LiquidCrystal_I2CC1Ehhhhhhhhh13t_backlighPol>:

LiquidCrystal_I2C::LiquidCrystal_I2C(uint8_t lcd_Addr, uint8_t En, uint8_t Rw,
    644c:	6f 92       	push	r6
    644e:	7f 92       	push	r7
    6450:	8f 92       	push	r8
    6452:	9f 92       	push	r9
    6454:	af 92       	push	r10
    6456:	bf 92       	push	r11
    6458:	cf 92       	push	r12
    645a:	df 92       	push	r13
    645c:	ef 92       	push	r14
    645e:	ff 92       	push	r15
    6460:	0f 93       	push	r16
    6462:	1f 93       	push	r17
    6464:	cf 93       	push	r28
    6466:	df 93       	push	r29
    6468:	cd b7       	in	r28, 0x3d	; 61
    646a:	de b7       	in	r29, 0x3e	; 62
    646c:	3c 01       	movw	r6, r24
    646e:	d6 2e       	mov	r13, r22
    6470:	b4 2e       	mov	r11, r20
    6472:	92 2e       	mov	r9, r18
    6474:	19 89       	ldd	r17, Y+17	; 0x11
    6476:	fa 88       	ldd	r15, Y+18	; 0x12
                                     uint8_t Rs, uint8_t d4, uint8_t d5,
                                     uint8_t d6, uint8_t d7, uint8_t backlighPin, 
                                     t_backlighPol pol = POSITIVE )
    6478:	44 de       	rcall	.-888    	; 0x6102 <_ZN3LCDC1Ev>
    647a:	8a e3       	ldi	r24, 0x3A	; 58
    647c:	9a e0       	ldi	r25, 0x0A	; 10
    647e:	f3 01       	movw	r30, r6
    6480:	91 83       	std	Z+1, r25	; 0x01
    6482:	80 83       	st	Z, r24
    6484:	c3 01       	movw	r24, r6
    6486:	0d 96       	adiw	r24, 0x0d	; 13
    6488:	d8 dd       	rcall	.-1104   	; 0x603a <_ZN5I2CIOC1Ev>
{
   config(lcd_Addr, En, Rw, Rs, d4, d5, d6, d7);
    648a:	29 2d       	mov	r18, r9
    648c:	4b 2d       	mov	r20, r11
    648e:	6d 2d       	mov	r22, r13
    6490:	c3 01       	movw	r24, r6
    6492:	9c df       	rcall	.-200    	; 0x63cc <_ZN17LiquidCrystal_I2C6configEhhhhhhhh>
   setBacklightPin(backlighPin, pol);
    6494:	4f 2d       	mov	r20, r15
    6496:	61 2f       	mov	r22, r17
    6498:	c3 01       	movw	r24, r6
}
    649a:	df 91       	pop	r29
    649c:	cf 91       	pop	r28
    649e:	1f 91       	pop	r17
    64a0:	0f 91       	pop	r16
    64a2:	ff 90       	pop	r15
    64a4:	ef 90       	pop	r14
    64a6:	df 90       	pop	r13
    64a8:	cf 90       	pop	r12
    64aa:	bf 90       	pop	r11
    64ac:	af 90       	pop	r10
    64ae:	9f 90       	pop	r9
    64b0:	8f 90       	pop	r8
    64b2:	7f 90       	pop	r7
                                     uint8_t Rs, uint8_t d4, uint8_t d5,
                                     uint8_t d6, uint8_t d7, uint8_t backlighPin, 
                                     t_backlighPol pol = POSITIVE )
{
   config(lcd_Addr, En, Rw, Rs, d4, d5, d6, d7);
   setBacklightPin(backlighPin, pol);
    64b4:	6f 90       	pop	r6
    64b6:	42 cf       	rjmp	.-380    	; 0x633c <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol>

000064b8 <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
}

//
// pulseEnable
void LiquidCrystal_I2C::pulseEnable (uint8_t data)
{
    64b8:	ef 92       	push	r14
    64ba:	ff 92       	push	r15
    64bc:	0f 93       	push	r16
    64be:	1f 93       	push	r17
    64c0:	cf 93       	push	r28
    64c2:	8c 01       	movw	r16, r24
    64c4:	c6 2f       	mov	r28, r22
   _i2cio.write (data | _En);   // En HIGH
    64c6:	7c 01       	movw	r14, r24
    64c8:	8d e0       	ldi	r24, 0x0D	; 13
    64ca:	e8 0e       	add	r14, r24
    64cc:	f1 1c       	adc	r15, r1
    64ce:	f8 01       	movw	r30, r16
    64d0:	61 89       	ldd	r22, Z+17	; 0x11
    64d2:	6c 2b       	or	r22, r28
    64d4:	c7 01       	movw	r24, r14
    64d6:	e4 dd       	rcall	.-1080   	; 0x60a0 <_ZN5I2CIO5writeEh>
   _i2cio.write (data & ~_En);  // En LOW
    64d8:	f8 01       	movw	r30, r16
    64da:	61 89       	ldd	r22, Z+17	; 0x11
    64dc:	60 95       	com	r22
    64de:	6c 23       	and	r22, r28
    64e0:	c7 01       	movw	r24, r14
    64e2:	cf 91       	pop	r28
    64e4:	1f 91       	pop	r17
    64e6:	0f 91       	pop	r16
    64e8:	ff 90       	pop	r15
//
// pulseEnable
void LiquidCrystal_I2C::pulseEnable (uint8_t data)
{
   _i2cio.write (data | _En);   // En HIGH
   _i2cio.write (data & ~_En);  // En LOW
    64ea:	ef 90       	pop	r14
    64ec:	d9 cd       	rjmp	.-1102   	; 0x60a0 <_ZN5I2CIO5writeEh>

000064ee <_ZN17LiquidCrystal_I2C10write4bitsEhh>:
}

//
// write4bits
void LiquidCrystal_I2C::write4bits ( uint8_t value, uint8_t mode ) 
{
    64ee:	fc 01       	movw	r30, r24
    64f0:	96 2f       	mov	r25, r22
    64f2:	df 01       	movw	r26, r30
    64f4:	84 e0       	ldi	r24, 0x04	; 4
   uint8_t pinMapValue = 0;
    64f6:	60 e0       	ldi	r22, 0x00	; 0
   
   // Map the value to LCD pin mapping
   // --------------------------------
   for ( uint8_t i = 0; i < 4; i++ )
   {
      if ( ( value & 0x1 ) == 1 )
    64f8:	90 ff       	sbrs	r25, 0
    64fa:	04 c0       	rjmp	.+8      	; 0x6504 <_ZN17LiquidCrystal_I2C10write4bitsEhh+0x16>
      {
         pinMapValue |= _data_pins[i];
    64fc:	54 96       	adiw	r26, 0x14	; 20
    64fe:	2c 91       	ld	r18, X
    6500:	54 97       	sbiw	r26, 0x14	; 20
    6502:	62 2b       	or	r22, r18
      }
      value = ( value >> 1 );
    6504:	96 95       	lsr	r25
    6506:	81 50       	subi	r24, 0x01	; 1
    6508:	11 96       	adiw	r26, 0x01	; 1
{
   uint8_t pinMapValue = 0;
   
   // Map the value to LCD pin mapping
   // --------------------------------
   for ( uint8_t i = 0; i < 4; i++ )
    650a:	81 11       	cpse	r24, r1
    650c:	f5 cf       	rjmp	.-22     	; 0x64f8 <_ZN17LiquidCrystal_I2C10write4bitsEhh+0xa>
      value = ( value >> 1 );
   }
   
   // Is it a command or data
   // -----------------------
   if ( mode == DATA )
    650e:	41 30       	cpi	r20, 0x01	; 1
    6510:	09 f4       	brne	.+2      	; 0x6514 <_ZN17LiquidCrystal_I2C10write4bitsEhh+0x26>
   {
      mode = _Rs;
    6512:	43 89       	ldd	r20, Z+19	; 0x13
    6514:	94 85       	ldd	r25, Z+12	; 0x0c
    6516:	69 2b       	or	r22, r25
   }
   
   pinMapValue |= mode | _backlightStsMask;
   pulseEnable ( pinMapValue );
    6518:	64 2b       	or	r22, r20
    651a:	cf 01       	movw	r24, r30
    651c:	cd cf       	rjmp	.-102    	; 0x64b8 <_ZN17LiquidCrystal_I2C11pulseEnableEh>

0000651e <_ZN17LiquidCrystal_I2C4sendEhh>:
//----------------------------------------------------------------------------

//
// send - write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) 
{
    651e:	0f 93       	push	r16
    6520:	1f 93       	push	r17
    6522:	cf 93       	push	r28
    6524:	df 93       	push	r29
    6526:	06 2f       	mov	r16, r22
    6528:	0f 70       	andi	r16, 0x0F	; 15
   // No need to use the delay routines since the time taken to write takes
   // longer that what is needed both for toggling and enable pin an to execute
   // the command.
   
   if ( mode == FOUR_BITS )
    652a:	42 30       	cpi	r20, 0x02	; 2
    652c:	19 f4       	brne	.+6      	; 0x6534 <_ZN17LiquidCrystal_I2C4sendEhh+0x16>
   {
      write4bits( (value & 0x0F), COMMAND );
    652e:	40 e0       	ldi	r20, 0x00	; 0
    6530:	60 2f       	mov	r22, r16
    6532:	0d c0       	rjmp	.+26     	; 0x654e <_ZN17LiquidCrystal_I2C4sendEhh+0x30>
    6534:	14 2f       	mov	r17, r20
    6536:	ec 01       	movw	r28, r24
   }
   else 
   {
      write4bits( (value >> 4), mode );
    6538:	70 e0       	ldi	r23, 0x00	; 0
    653a:	84 e0       	ldi	r24, 0x04	; 4
    653c:	75 95       	asr	r23
    653e:	67 95       	ror	r22
    6540:	8a 95       	dec	r24
    6542:	e1 f7       	brne	.-8      	; 0x653c <_ZN17LiquidCrystal_I2C4sendEhh+0x1e>
    6544:	ce 01       	movw	r24, r28
    6546:	d3 df       	rcall	.-90     	; 0x64ee <_ZN17LiquidCrystal_I2C10write4bitsEhh>
      write4bits( (value & 0x0F), mode);
    6548:	41 2f       	mov	r20, r17
    654a:	60 2f       	mov	r22, r16
    654c:	ce 01       	movw	r24, r28
   }
}
    654e:	df 91       	pop	r29
    6550:	cf 91       	pop	r28
    6552:	1f 91       	pop	r17
      write4bits( (value & 0x0F), COMMAND );
   }
   else 
   {
      write4bits( (value >> 4), mode );
      write4bits( (value & 0x0F), mode);
    6554:	0f 91       	pop	r16
    6556:	cb cf       	rjmp	.-106    	; 0x64ee <_ZN17LiquidCrystal_I2C10write4bitsEhh>

00006558 <_ZN17LiquidCrystal_I2C5beginEhhh>:
// ---------------------------------------------------------------------------

//
// begin
void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) 
{
    6558:	ff 92       	push	r15
    655a:	0f 93       	push	r16
    655c:	1f 93       	push	r17
    655e:	cf 93       	push	r28
    6560:	df 93       	push	r29
    6562:	ec 01       	movw	r28, r24
    6564:	16 2f       	mov	r17, r22
    6566:	04 2f       	mov	r16, r20
    6568:	f2 2e       	mov	r15, r18
   
   init();     // Initialise the I2C expander interface
    656a:	11 df       	rcall	.-478    	; 0x638e <_ZN17LiquidCrystal_I2C4initEv>
   LCD::begin ( cols, lines, dotsize );   
    656c:	2f 2d       	mov	r18, r15
    656e:	40 2f       	mov	r20, r16
    6570:	61 2f       	mov	r22, r17
    6572:	ce 01       	movw	r24, r28
}
    6574:	df 91       	pop	r29
    6576:	cf 91       	pop	r28
    6578:	1f 91       	pop	r17
    657a:	0f 91       	pop	r16
// begin
void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) 
{
   
   init();     // Initialise the I2C expander interface
   LCD::begin ( cols, lines, dotsize );   
    657c:	ff 90       	pop	r15
    657e:	36 ce       	rjmp	.-916    	; 0x61ec <_ZN3LCD5beginEhhh>

00006580 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    6580:	cf 93       	push	r28
  uint8_t sreg = SREG;
    6582:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    6584:	f8 94       	cli
  if (!initialized) {
    6586:	80 91 59 0c 	lds	r24, 0x0C59	; 0x800c59 <_ZN8SPIClass11initializedE>
    658a:	81 11       	cpse	r24, r1
    658c:	27 c0       	rjmp	.+78     	; 0x65dc <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    658e:	ee e7       	ldi	r30, 0x7E	; 126
    6590:	f2 e0       	ldi	r31, 0x02	; 2
    6592:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    6594:	ee e5       	ldi	r30, 0x5E	; 94
    6596:	f2 e0       	ldi	r31, 0x02	; 2
    6598:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    659a:	e8 2f       	mov	r30, r24
    659c:	f0 e0       	ldi	r31, 0x00	; 0
    659e:	ee 0f       	add	r30, r30
    65a0:	ff 1f       	adc	r31, r31
    65a2:	e8 55       	subi	r30, 0x58	; 88
    65a4:	fd 4f       	sbci	r31, 0xFD	; 253
    65a6:	a5 91       	lpm	r26, Z+
    65a8:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    65aa:	ec 91       	ld	r30, X
    65ac:	e9 23       	and	r30, r25
    65ae:	21 f4       	brne	.+8      	; 0x65b8 <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    65b0:	61 e0       	ldi	r22, 0x01	; 1
    65b2:	8a e0       	ldi	r24, 0x0A	; 10
    65b4:	0e 94 39 3b 	call	0x7672	; 0x7672 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    65b8:	61 e0       	ldi	r22, 0x01	; 1
    65ba:	8a e0       	ldi	r24, 0x0A	; 10
    65bc:	0e 94 fd 3a 	call	0x75fa	; 0x75fa <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    65c0:	8c b5       	in	r24, 0x2c	; 44
    65c2:	80 61       	ori	r24, 0x10	; 16
    65c4:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    65c6:	8c b5       	in	r24, 0x2c	; 44
    65c8:	80 64       	ori	r24, 0x40	; 64
    65ca:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    65cc:	61 e0       	ldi	r22, 0x01	; 1
    65ce:	8d e0       	ldi	r24, 0x0D	; 13
    65d0:	0e 94 fd 3a 	call	0x75fa	; 0x75fa <pinMode>
    pinMode(MOSI, OUTPUT);
    65d4:	61 e0       	ldi	r22, 0x01	; 1
    65d6:	8b e0       	ldi	r24, 0x0B	; 11
    65d8:	0e 94 fd 3a 	call	0x75fa	; 0x75fa <pinMode>
  }
  initialized++; // reference count
    65dc:	80 91 59 0c 	lds	r24, 0x0C59	; 0x800c59 <_ZN8SPIClass11initializedE>
    65e0:	8f 5f       	subi	r24, 0xFF	; 255
    65e2:	80 93 59 0c 	sts	0x0C59, r24	; 0x800c59 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    65e6:	cf bf       	out	0x3f, r28	; 63
}
    65e8:	cf 91       	pop	r28
    65ea:	08 95       	ret

000065ec <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    65ec:	10 92 c7 0c 	sts	0x0CC7, r1	; 0x800cc7 <twi_state>
    65f0:	81 e0       	ldi	r24, 0x01	; 1
    65f2:	80 93 c5 0c 	sts	0x0CC5, r24	; 0x800cc5 <twi_sendStop>
    65f6:	10 92 c4 0c 	sts	0x0CC4, r1	; 0x800cc4 <twi_inRepStart>
    65fa:	61 e0       	ldi	r22, 0x01	; 1
    65fc:	8d e1       	ldi	r24, 0x1D	; 29
    65fe:	0e 94 39 3b 	call	0x7672	; 0x7672 <digitalWrite>
    6602:	61 e0       	ldi	r22, 0x01	; 1
    6604:	8c e1       	ldi	r24, 0x1C	; 28
    6606:	0e 94 39 3b 	call	0x7672	; 0x7672 <digitalWrite>
    660a:	e9 eb       	ldi	r30, 0xB9	; 185
    660c:	f0 e0       	ldi	r31, 0x00	; 0
    660e:	80 81       	ld	r24, Z
    6610:	8e 7f       	andi	r24, 0xFE	; 254
    6612:	80 83       	st	Z, r24
    6614:	80 81       	ld	r24, Z
    6616:	8d 7f       	andi	r24, 0xFD	; 253
    6618:	80 83       	st	Z, r24
    661a:	88 e4       	ldi	r24, 0x48	; 72
    661c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    6620:	85 e4       	ldi	r24, 0x45	; 69
    6622:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    6626:	08 95       	ret

00006628 <twi_disable>:
    6628:	ec eb       	ldi	r30, 0xBC	; 188
    662a:	f0 e0       	ldi	r31, 0x00	; 0
    662c:	80 81       	ld	r24, Z
    662e:	8a 7b       	andi	r24, 0xBA	; 186
    6630:	80 83       	st	Z, r24
    6632:	60 e0       	ldi	r22, 0x00	; 0
    6634:	8d e1       	ldi	r24, 0x1D	; 29
    6636:	0e 94 39 3b 	call	0x7672	; 0x7672 <digitalWrite>
    663a:	60 e0       	ldi	r22, 0x00	; 0
    663c:	8c e1       	ldi	r24, 0x1C	; 28
    663e:	0c 94 39 3b 	jmp	0x7672	; 0x7672 <digitalWrite>

00006642 <twi_setFrequency>:
    6642:	9b 01       	movw	r18, r22
    6644:	ac 01       	movw	r20, r24
    6646:	60 e0       	ldi	r22, 0x00	; 0
    6648:	74 e2       	ldi	r23, 0x24	; 36
    664a:	84 ef       	ldi	r24, 0xF4	; 244
    664c:	90 e0       	ldi	r25, 0x00	; 0
    664e:	0e 94 ec 3f 	call	0x7fd8	; 0x7fd8 <__udivmodsi4>
    6652:	da 01       	movw	r26, r20
    6654:	c9 01       	movw	r24, r18
    6656:	40 97       	sbiw	r24, 0x10	; 16
    6658:	a1 09       	sbc	r26, r1
    665a:	b1 09       	sbc	r27, r1
    665c:	b6 95       	lsr	r27
    665e:	a7 95       	ror	r26
    6660:	97 95       	ror	r25
    6662:	87 95       	ror	r24
    6664:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    6668:	08 95       	ret

0000666a <twi_readFrom>:
    666a:	41 32       	cpi	r20, 0x21	; 33
    666c:	08 f0       	brcs	.+2      	; 0x6670 <twi_readFrom+0x6>
    666e:	43 c0       	rjmp	.+134    	; 0x66f6 <twi_readFrom+0x8c>
    6670:	90 91 c7 0c 	lds	r25, 0x0CC7	; 0x800cc7 <twi_state>
    6674:	91 11       	cpse	r25, r1
    6676:	fc cf       	rjmp	.-8      	; 0x6670 <twi_readFrom+0x6>
    6678:	91 e0       	ldi	r25, 0x01	; 1
    667a:	90 93 c7 0c 	sts	0x0CC7, r25	; 0x800cc7 <twi_state>
    667e:	20 93 c5 0c 	sts	0x0CC5, r18	; 0x800cc5 <twi_sendStop>
    6682:	2f ef       	ldi	r18, 0xFF	; 255
    6684:	20 93 5a 0c 	sts	0x0C5A, r18	; 0x800c5a <twi_error>
    6688:	10 92 9f 0c 	sts	0x0C9F, r1	; 0x800c9f <twi_masterBufferIndex>
    668c:	24 0f       	add	r18, r20
    668e:	20 93 9e 0c 	sts	0x0C9E, r18	; 0x800c9e <twi_masterBufferLength>
    6692:	90 93 c6 0c 	sts	0x0CC6, r25	; 0x800cc6 <twi_slarw>
    6696:	90 91 c6 0c 	lds	r25, 0x0CC6	; 0x800cc6 <twi_slarw>
    669a:	88 0f       	add	r24, r24
    669c:	89 2b       	or	r24, r25
    669e:	80 93 c6 0c 	sts	0x0CC6, r24	; 0x800cc6 <twi_slarw>
    66a2:	80 91 c4 0c 	lds	r24, 0x0CC4	; 0x800cc4 <twi_inRepStart>
    66a6:	81 30       	cpi	r24, 0x01	; 1
    66a8:	61 f4       	brne	.+24     	; 0x66c2 <twi_readFrom+0x58>
    66aa:	10 92 c4 0c 	sts	0x0CC4, r1	; 0x800cc4 <twi_inRepStart>
    66ae:	80 91 c6 0c 	lds	r24, 0x0CC6	; 0x800cc6 <twi_slarw>
    66b2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    66b6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    66ba:	83 fd       	sbrc	r24, 3
    66bc:	f8 cf       	rjmp	.-16     	; 0x66ae <twi_readFrom+0x44>
    66be:	85 ec       	ldi	r24, 0xC5	; 197
    66c0:	01 c0       	rjmp	.+2      	; 0x66c4 <twi_readFrom+0x5a>
    66c2:	85 ee       	ldi	r24, 0xE5	; 229
    66c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    66c8:	80 91 c7 0c 	lds	r24, 0x0CC7	; 0x800cc7 <twi_state>
    66cc:	81 30       	cpi	r24, 0x01	; 1
    66ce:	e1 f3       	breq	.-8      	; 0x66c8 <twi_readFrom+0x5e>
    66d0:	80 91 9f 0c 	lds	r24, 0x0C9F	; 0x800c9f <twi_masterBufferIndex>
    66d4:	84 17       	cp	r24, r20
    66d6:	10 f4       	brcc	.+4      	; 0x66dc <twi_readFrom+0x72>
    66d8:	40 91 9f 0c 	lds	r20, 0x0C9F	; 0x800c9f <twi_masterBufferIndex>
    66dc:	a0 ea       	ldi	r26, 0xA0	; 160
    66de:	bc e0       	ldi	r27, 0x0C	; 12
    66e0:	96 2f       	mov	r25, r22
    66e2:	fb 01       	movw	r30, r22
    66e4:	8e 2f       	mov	r24, r30
    66e6:	89 1b       	sub	r24, r25
    66e8:	84 17       	cp	r24, r20
    66ea:	18 f4       	brcc	.+6      	; 0x66f2 <twi_readFrom+0x88>
    66ec:	8d 91       	ld	r24, X+
    66ee:	81 93       	st	Z+, r24
    66f0:	f9 cf       	rjmp	.-14     	; 0x66e4 <twi_readFrom+0x7a>
    66f2:	84 2f       	mov	r24, r20
    66f4:	08 95       	ret
    66f6:	80 e0       	ldi	r24, 0x00	; 0
    66f8:	08 95       	ret

000066fa <twi_writeTo>:
    66fa:	0f 93       	push	r16
    66fc:	41 32       	cpi	r20, 0x21	; 33
    66fe:	08 f0       	brcs	.+2      	; 0x6702 <twi_writeTo+0x8>
    6700:	4a c0       	rjmp	.+148    	; 0x6796 <twi_writeTo+0x9c>
    6702:	90 91 c7 0c 	lds	r25, 0x0CC7	; 0x800cc7 <twi_state>
    6706:	91 11       	cpse	r25, r1
    6708:	fc cf       	rjmp	.-8      	; 0x6702 <twi_writeTo+0x8>
    670a:	32 e0       	ldi	r19, 0x02	; 2
    670c:	30 93 c7 0c 	sts	0x0CC7, r19	; 0x800cc7 <twi_state>
    6710:	00 93 c5 0c 	sts	0x0CC5, r16	; 0x800cc5 <twi_sendStop>
    6714:	3f ef       	ldi	r19, 0xFF	; 255
    6716:	30 93 5a 0c 	sts	0x0C5A, r19	; 0x800c5a <twi_error>
    671a:	10 92 9f 0c 	sts	0x0C9F, r1	; 0x800c9f <twi_masterBufferIndex>
    671e:	40 93 9e 0c 	sts	0x0C9E, r20	; 0x800c9e <twi_masterBufferLength>
    6722:	56 2f       	mov	r21, r22
    6724:	a0 ea       	ldi	r26, 0xA0	; 160
    6726:	bc e0       	ldi	r27, 0x0C	; 12
    6728:	fb 01       	movw	r30, r22
    672a:	3e 2f       	mov	r19, r30
    672c:	35 1b       	sub	r19, r21
    672e:	34 17       	cp	r19, r20
    6730:	18 f4       	brcc	.+6      	; 0x6738 <twi_writeTo+0x3e>
    6732:	31 91       	ld	r19, Z+
    6734:	3d 93       	st	X+, r19
    6736:	f9 cf       	rjmp	.-14     	; 0x672a <twi_writeTo+0x30>
    6738:	10 92 c6 0c 	sts	0x0CC6, r1	; 0x800cc6 <twi_slarw>
    673c:	30 91 c6 0c 	lds	r19, 0x0CC6	; 0x800cc6 <twi_slarw>
    6740:	88 0f       	add	r24, r24
    6742:	83 2b       	or	r24, r19
    6744:	80 93 c6 0c 	sts	0x0CC6, r24	; 0x800cc6 <twi_slarw>
    6748:	80 91 c4 0c 	lds	r24, 0x0CC4	; 0x800cc4 <twi_inRepStart>
    674c:	81 30       	cpi	r24, 0x01	; 1
    674e:	61 f4       	brne	.+24     	; 0x6768 <twi_writeTo+0x6e>
    6750:	10 92 c4 0c 	sts	0x0CC4, r1	; 0x800cc4 <twi_inRepStart>
    6754:	80 91 c6 0c 	lds	r24, 0x0CC6	; 0x800cc6 <twi_slarw>
    6758:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    675c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    6760:	83 fd       	sbrc	r24, 3
    6762:	f8 cf       	rjmp	.-16     	; 0x6754 <twi_writeTo+0x5a>
    6764:	85 ec       	ldi	r24, 0xC5	; 197
    6766:	01 c0       	rjmp	.+2      	; 0x676a <twi_writeTo+0x70>
    6768:	85 ee       	ldi	r24, 0xE5	; 229
    676a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    676e:	22 23       	and	r18, r18
    6770:	21 f0       	breq	.+8      	; 0x677a <twi_writeTo+0x80>
    6772:	80 91 c7 0c 	lds	r24, 0x0CC7	; 0x800cc7 <twi_state>
    6776:	82 30       	cpi	r24, 0x02	; 2
    6778:	d1 f3       	breq	.-12     	; 0x676e <twi_writeTo+0x74>
    677a:	80 91 5a 0c 	lds	r24, 0x0C5A	; 0x800c5a <twi_error>
    677e:	8f 3f       	cpi	r24, 0xFF	; 255
    6780:	79 f0       	breq	.+30     	; 0x67a0 <twi_writeTo+0xa6>
    6782:	80 91 5a 0c 	lds	r24, 0x0C5A	; 0x800c5a <twi_error>
    6786:	80 32       	cpi	r24, 0x20	; 32
    6788:	41 f0       	breq	.+16     	; 0x679a <twi_writeTo+0xa0>
    678a:	80 91 5a 0c 	lds	r24, 0x0C5A	; 0x800c5a <twi_error>
    678e:	80 33       	cpi	r24, 0x30	; 48
    6790:	31 f0       	breq	.+12     	; 0x679e <twi_writeTo+0xa4>
    6792:	94 e0       	ldi	r25, 0x04	; 4
    6794:	05 c0       	rjmp	.+10     	; 0x67a0 <twi_writeTo+0xa6>
    6796:	91 e0       	ldi	r25, 0x01	; 1
    6798:	03 c0       	rjmp	.+6      	; 0x67a0 <twi_writeTo+0xa6>
    679a:	92 e0       	ldi	r25, 0x02	; 2
    679c:	01 c0       	rjmp	.+2      	; 0x67a0 <twi_writeTo+0xa6>
    679e:	93 e0       	ldi	r25, 0x03	; 3
    67a0:	89 2f       	mov	r24, r25
    67a2:	0f 91       	pop	r16
    67a4:	08 95       	ret

000067a6 <twi_transmit>:
    67a6:	40 91 7c 0c 	lds	r20, 0x0C7C	; 0x800c7c <twi_txBufferLength>
    67aa:	26 2f       	mov	r18, r22
    67ac:	30 e0       	ldi	r19, 0x00	; 0
    67ae:	24 0f       	add	r18, r20
    67b0:	31 1d       	adc	r19, r1
    67b2:	21 32       	cpi	r18, 0x21	; 33
    67b4:	31 05       	cpc	r19, r1
    67b6:	dc f4       	brge	.+54     	; 0x67ee <twi_transmit+0x48>
    67b8:	20 91 c7 0c 	lds	r18, 0x0CC7	; 0x800cc7 <twi_state>
    67bc:	24 30       	cpi	r18, 0x04	; 4
    67be:	c9 f4       	brne	.+50     	; 0x67f2 <twi_transmit+0x4c>
    67c0:	fc 01       	movw	r30, r24
    67c2:	80 e0       	ldi	r24, 0x00	; 0
    67c4:	90 e0       	ldi	r25, 0x00	; 0
    67c6:	86 17       	cp	r24, r22
    67c8:	58 f4       	brcc	.+22     	; 0x67e0 <twi_transmit+0x3a>
    67ca:	30 91 7c 0c 	lds	r19, 0x0C7C	; 0x800c7c <twi_txBufferLength>
    67ce:	21 91       	ld	r18, Z+
    67d0:	dc 01       	movw	r26, r24
    67d2:	a2 58       	subi	r26, 0x82	; 130
    67d4:	b3 4f       	sbci	r27, 0xF3	; 243
    67d6:	a3 0f       	add	r26, r19
    67d8:	b1 1d       	adc	r27, r1
    67da:	2c 93       	st	X, r18
    67dc:	01 96       	adiw	r24, 0x01	; 1
    67de:	f3 cf       	rjmp	.-26     	; 0x67c6 <twi_transmit+0x20>
    67e0:	80 91 7c 0c 	lds	r24, 0x0C7C	; 0x800c7c <twi_txBufferLength>
    67e4:	68 0f       	add	r22, r24
    67e6:	60 93 7c 0c 	sts	0x0C7C, r22	; 0x800c7c <twi_txBufferLength>
    67ea:	80 e0       	ldi	r24, 0x00	; 0
    67ec:	08 95       	ret
    67ee:	81 e0       	ldi	r24, 0x01	; 1
    67f0:	08 95       	ret
    67f2:	82 e0       	ldi	r24, 0x02	; 2
    67f4:	08 95       	ret

000067f6 <twi_attachSlaveRxEvent>:
    67f6:	90 93 c1 0c 	sts	0x0CC1, r25	; 0x800cc1 <twi_onSlaveReceive+0x1>
    67fa:	80 93 c0 0c 	sts	0x0CC0, r24	; 0x800cc0 <twi_onSlaveReceive>
    67fe:	08 95       	ret

00006800 <twi_attachSlaveTxEvent>:
    6800:	90 93 c3 0c 	sts	0x0CC3, r25	; 0x800cc3 <twi_onSlaveTransmit+0x1>
    6804:	80 93 c2 0c 	sts	0x0CC2, r24	; 0x800cc2 <twi_onSlaveTransmit>
    6808:	08 95       	ret

0000680a <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    680a:	85 ed       	ldi	r24, 0xD5	; 213
    680c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    6810:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    6814:	84 fd       	sbrc	r24, 4
    6816:	fc cf       	rjmp	.-8      	; 0x6810 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    6818:	10 92 c7 0c 	sts	0x0CC7, r1	; 0x800cc7 <twi_state>
    681c:	08 95       	ret

0000681e <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    681e:	85 ec       	ldi	r24, 0xC5	; 197
    6820:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    6824:	10 92 c7 0c 	sts	0x0CC7, r1	; 0x800cc7 <twi_state>
    6828:	08 95       	ret

0000682a <__vector_26>:
}

ISR(TWI_vect)
{
    682a:	1f 92       	push	r1
    682c:	0f 92       	push	r0
    682e:	0f b6       	in	r0, 0x3f	; 63
    6830:	0f 92       	push	r0
    6832:	11 24       	eor	r1, r1
    6834:	0b b6       	in	r0, 0x3b	; 59
    6836:	0f 92       	push	r0
    6838:	2f 93       	push	r18
    683a:	3f 93       	push	r19
    683c:	4f 93       	push	r20
    683e:	5f 93       	push	r21
    6840:	6f 93       	push	r22
    6842:	7f 93       	push	r23
    6844:	8f 93       	push	r24
    6846:	9f 93       	push	r25
    6848:	af 93       	push	r26
    684a:	bf 93       	push	r27
    684c:	ef 93       	push	r30
    684e:	ff 93       	push	r31
  switch(TW_STATUS){
    6850:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    6854:	88 7f       	andi	r24, 0xF8	; 248
    6856:	80 36       	cpi	r24, 0x60	; 96
    6858:	09 f4       	brne	.+2      	; 0x685c <__vector_26+0x32>
    685a:	9d c0       	rjmp	.+314    	; 0x6996 <__vector_26+0x16c>
    685c:	70 f5       	brcc	.+92     	; 0x68ba <__vector_26+0x90>
    685e:	88 32       	cpi	r24, 0x28	; 40
    6860:	09 f4       	brne	.+2      	; 0x6864 <__vector_26+0x3a>
    6862:	5c c0       	rjmp	.+184    	; 0x691c <__vector_26+0xf2>
    6864:	90 f4       	brcc	.+36     	; 0x688a <__vector_26+0x60>
    6866:	80 31       	cpi	r24, 0x10	; 16
    6868:	09 f4       	brne	.+2      	; 0x686c <__vector_26+0x42>
    686a:	55 c0       	rjmp	.+170    	; 0x6916 <__vector_26+0xec>
    686c:	38 f4       	brcc	.+14     	; 0x687c <__vector_26+0x52>
    686e:	88 23       	and	r24, r24
    6870:	09 f4       	brne	.+2      	; 0x6874 <__vector_26+0x4a>
    6872:	f3 c0       	rjmp	.+486    	; 0x6a5a <__vector_26+0x230>
    6874:	88 30       	cpi	r24, 0x08	; 8
    6876:	09 f4       	brne	.+2      	; 0x687a <__vector_26+0x50>
    6878:	4e c0       	rjmp	.+156    	; 0x6916 <__vector_26+0xec>
    687a:	f2 c0       	rjmp	.+484    	; 0x6a60 <__vector_26+0x236>
    687c:	88 31       	cpi	r24, 0x18	; 24
    687e:	09 f4       	brne	.+2      	; 0x6882 <__vector_26+0x58>
    6880:	4d c0       	rjmp	.+154    	; 0x691c <__vector_26+0xf2>
    6882:	80 32       	cpi	r24, 0x20	; 32
    6884:	09 f4       	brne	.+2      	; 0x6888 <__vector_26+0x5e>
    6886:	5e c0       	rjmp	.+188    	; 0x6944 <__vector_26+0x11a>
    6888:	eb c0       	rjmp	.+470    	; 0x6a60 <__vector_26+0x236>
    688a:	80 34       	cpi	r24, 0x40	; 64
    688c:	09 f4       	brne	.+2      	; 0x6890 <__vector_26+0x66>
    688e:	69 c0       	rjmp	.+210    	; 0x6962 <__vector_26+0x138>
    6890:	50 f4       	brcc	.+20     	; 0x68a6 <__vector_26+0x7c>
    6892:	80 33       	cpi	r24, 0x30	; 48
    6894:	09 f4       	brne	.+2      	; 0x6898 <__vector_26+0x6e>
    6896:	56 c0       	rjmp	.+172    	; 0x6944 <__vector_26+0x11a>
    6898:	88 33       	cpi	r24, 0x38	; 56
    689a:	09 f0       	breq	.+2      	; 0x689e <__vector_26+0x74>
    689c:	e1 c0       	rjmp	.+450    	; 0x6a60 <__vector_26+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    689e:	80 93 5a 0c 	sts	0x0C5A, r24	; 0x800c5a <twi_error>
      twi_releaseBus();
    68a2:	bd df       	rcall	.-134    	; 0x681e <twi_releaseBus>
      break;
    68a4:	dd c0       	rjmp	.+442    	; 0x6a60 <__vector_26+0x236>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    68a6:	80 35       	cpi	r24, 0x50	; 80
    68a8:	09 f4       	brne	.+2      	; 0x68ac <__vector_26+0x82>
    68aa:	4f c0       	rjmp	.+158    	; 0x694a <__vector_26+0x120>
    68ac:	88 35       	cpi	r24, 0x58	; 88
    68ae:	09 f4       	brne	.+2      	; 0x68b2 <__vector_26+0x88>
    68b0:	5d c0       	rjmp	.+186    	; 0x696c <__vector_26+0x142>
    68b2:	88 34       	cpi	r24, 0x48	; 72
    68b4:	09 f0       	breq	.+2      	; 0x68b8 <__vector_26+0x8e>
    68b6:	d4 c0       	rjmp	.+424    	; 0x6a60 <__vector_26+0x236>
    68b8:	d2 c0       	rjmp	.+420    	; 0x6a5e <__vector_26+0x234>
    68ba:	88 39       	cpi	r24, 0x98	; 152
    68bc:	09 f4       	brne	.+2      	; 0x68c0 <__vector_26+0x96>
    68be:	c3 c0       	rjmp	.+390    	; 0x6a46 <__vector_26+0x21c>
    68c0:	a8 f4       	brcc	.+42     	; 0x68ec <__vector_26+0xc2>
    68c2:	88 37       	cpi	r24, 0x78	; 120
    68c4:	09 f4       	brne	.+2      	; 0x68c8 <__vector_26+0x9e>
    68c6:	67 c0       	rjmp	.+206    	; 0x6996 <__vector_26+0x16c>
    68c8:	38 f4       	brcc	.+14     	; 0x68d8 <__vector_26+0xae>
    68ca:	88 36       	cpi	r24, 0x68	; 104
    68cc:	09 f4       	brne	.+2      	; 0x68d0 <__vector_26+0xa6>
    68ce:	63 c0       	rjmp	.+198    	; 0x6996 <__vector_26+0x16c>
    68d0:	80 37       	cpi	r24, 0x70	; 112
    68d2:	09 f4       	brne	.+2      	; 0x68d6 <__vector_26+0xac>
    68d4:	60 c0       	rjmp	.+192    	; 0x6996 <__vector_26+0x16c>
    68d6:	c4 c0       	rjmp	.+392    	; 0x6a60 <__vector_26+0x236>
    68d8:	88 38       	cpi	r24, 0x88	; 136
    68da:	09 f4       	brne	.+2      	; 0x68de <__vector_26+0xb4>
    68dc:	b4 c0       	rjmp	.+360    	; 0x6a46 <__vector_26+0x21c>
    68de:	80 39       	cpi	r24, 0x90	; 144
    68e0:	09 f4       	brne	.+2      	; 0x68e4 <__vector_26+0xba>
    68e2:	5f c0       	rjmp	.+190    	; 0x69a2 <__vector_26+0x178>
    68e4:	80 38       	cpi	r24, 0x80	; 128
    68e6:	09 f0       	breq	.+2      	; 0x68ea <__vector_26+0xc0>
    68e8:	bb c0       	rjmp	.+374    	; 0x6a60 <__vector_26+0x236>
    68ea:	5b c0       	rjmp	.+182    	; 0x69a2 <__vector_26+0x178>
    68ec:	80 3b       	cpi	r24, 0xB0	; 176
    68ee:	09 f4       	brne	.+2      	; 0x68f2 <__vector_26+0xc8>
    68f0:	82 c0       	rjmp	.+260    	; 0x69f6 <__vector_26+0x1cc>
    68f2:	38 f4       	brcc	.+14     	; 0x6902 <__vector_26+0xd8>
    68f4:	80 3a       	cpi	r24, 0xA0	; 160
    68f6:	09 f4       	brne	.+2      	; 0x68fa <__vector_26+0xd0>
    68f8:	66 c0       	rjmp	.+204    	; 0x69c6 <__vector_26+0x19c>
    68fa:	88 3a       	cpi	r24, 0xA8	; 168
    68fc:	09 f4       	brne	.+2      	; 0x6900 <__vector_26+0xd6>
    68fe:	7b c0       	rjmp	.+246    	; 0x69f6 <__vector_26+0x1cc>
    6900:	af c0       	rjmp	.+350    	; 0x6a60 <__vector_26+0x236>
    6902:	80 3c       	cpi	r24, 0xC0	; 192
    6904:	09 f4       	brne	.+2      	; 0x6908 <__vector_26+0xde>
    6906:	a3 c0       	rjmp	.+326    	; 0x6a4e <__vector_26+0x224>
    6908:	88 3c       	cpi	r24, 0xC8	; 200
    690a:	09 f4       	brne	.+2      	; 0x690e <__vector_26+0xe4>
    690c:	a0 c0       	rjmp	.+320    	; 0x6a4e <__vector_26+0x224>
    690e:	88 3b       	cpi	r24, 0xB8	; 184
    6910:	09 f4       	brne	.+2      	; 0x6914 <__vector_26+0xea>
    6912:	86 c0       	rjmp	.+268    	; 0x6a20 <__vector_26+0x1f6>
    6914:	a5 c0       	rjmp	.+330    	; 0x6a60 <__vector_26+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    6916:	80 91 c6 0c 	lds	r24, 0x0CC6	; 0x800cc6 <twi_slarw>
    691a:	10 c0       	rjmp	.+32     	; 0x693c <__vector_26+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    691c:	90 91 9f 0c 	lds	r25, 0x0C9F	; 0x800c9f <twi_masterBufferIndex>
    6920:	80 91 9e 0c 	lds	r24, 0x0C9E	; 0x800c9e <twi_masterBufferLength>
    6924:	98 17       	cp	r25, r24
    6926:	70 f5       	brcc	.+92     	; 0x6984 <__vector_26+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    6928:	e0 91 9f 0c 	lds	r30, 0x0C9F	; 0x800c9f <twi_masterBufferIndex>
    692c:	81 e0       	ldi	r24, 0x01	; 1
    692e:	8e 0f       	add	r24, r30
    6930:	80 93 9f 0c 	sts	0x0C9F, r24	; 0x800c9f <twi_masterBufferIndex>
    6934:	f0 e0       	ldi	r31, 0x00	; 0
    6936:	e0 56       	subi	r30, 0x60	; 96
    6938:	f3 4f       	sbci	r31, 0xF3	; 243
    693a:	80 81       	ld	r24, Z
    693c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    6940:	85 ec       	ldi	r24, 0xC5	; 197
    6942:	82 c0       	rjmp	.+260    	; 0x6a48 <__vector_26+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    6944:	80 93 5a 0c 	sts	0x0C5A, r24	; 0x800c5a <twi_error>
    6948:	8a c0       	rjmp	.+276    	; 0x6a5e <__vector_26+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    694a:	e0 91 9f 0c 	lds	r30, 0x0C9F	; 0x800c9f <twi_masterBufferIndex>
    694e:	81 e0       	ldi	r24, 0x01	; 1
    6950:	8e 0f       	add	r24, r30
    6952:	80 93 9f 0c 	sts	0x0C9F, r24	; 0x800c9f <twi_masterBufferIndex>
    6956:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    695a:	f0 e0       	ldi	r31, 0x00	; 0
    695c:	e0 56       	subi	r30, 0x60	; 96
    695e:	f3 4f       	sbci	r31, 0xF3	; 243
    6960:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    6962:	90 91 9f 0c 	lds	r25, 0x0C9F	; 0x800c9f <twi_masterBufferIndex>
    6966:	80 91 9e 0c 	lds	r24, 0x0C9E	; 0x800c9e <twi_masterBufferLength>
    696a:	6a c0       	rjmp	.+212    	; 0x6a40 <__vector_26+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    696c:	e0 91 9f 0c 	lds	r30, 0x0C9F	; 0x800c9f <twi_masterBufferIndex>
    6970:	81 e0       	ldi	r24, 0x01	; 1
    6972:	8e 0f       	add	r24, r30
    6974:	80 93 9f 0c 	sts	0x0C9F, r24	; 0x800c9f <twi_masterBufferIndex>
    6978:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    697c:	f0 e0       	ldi	r31, 0x00	; 0
    697e:	e0 56       	subi	r30, 0x60	; 96
    6980:	f3 4f       	sbci	r31, 0xF3	; 243
    6982:	80 83       	st	Z, r24
	if (twi_sendStop)
    6984:	80 91 c5 0c 	lds	r24, 0x0CC5	; 0x800cc5 <twi_sendStop>
    6988:	81 11       	cpse	r24, r1
    698a:	69 c0       	rjmp	.+210    	; 0x6a5e <__vector_26+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    698c:	81 e0       	ldi	r24, 0x01	; 1
    698e:	80 93 c4 0c 	sts	0x0CC4, r24	; 0x800cc4 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    6992:	84 ea       	ldi	r24, 0xA4	; 164
    6994:	5d c0       	rjmp	.+186    	; 0x6a50 <__vector_26+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    6996:	83 e0       	ldi	r24, 0x03	; 3
    6998:	80 93 c7 0c 	sts	0x0CC7, r24	; 0x800cc7 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    699c:	10 92 5b 0c 	sts	0x0C5B, r1	; 0x800c5b <twi_rxBufferIndex>
    69a0:	cf cf       	rjmp	.-98     	; 0x6940 <__vector_26+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    69a2:	80 91 5b 0c 	lds	r24, 0x0C5B	; 0x800c5b <twi_rxBufferIndex>
    69a6:	80 32       	cpi	r24, 0x20	; 32
    69a8:	08 f0       	brcs	.+2      	; 0x69ac <__vector_26+0x182>
    69aa:	4d c0       	rjmp	.+154    	; 0x6a46 <__vector_26+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    69ac:	e0 91 5b 0c 	lds	r30, 0x0C5B	; 0x800c5b <twi_rxBufferIndex>
    69b0:	81 e0       	ldi	r24, 0x01	; 1
    69b2:	8e 0f       	add	r24, r30
    69b4:	80 93 5b 0c 	sts	0x0C5B, r24	; 0x800c5b <twi_rxBufferIndex>
    69b8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    69bc:	f0 e0       	ldi	r31, 0x00	; 0
    69be:	e4 5a       	subi	r30, 0xA4	; 164
    69c0:	f3 4f       	sbci	r31, 0xF3	; 243
    69c2:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    69c4:	bd cf       	rjmp	.-134    	; 0x6940 <__vector_26+0x116>
    69c6:	2b df       	rcall	.-426    	; 0x681e <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    69c8:	80 91 5b 0c 	lds	r24, 0x0C5B	; 0x800c5b <twi_rxBufferIndex>
    69cc:	80 32       	cpi	r24, 0x20	; 32
    69ce:	30 f4       	brcc	.+12     	; 0x69dc <__vector_26+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    69d0:	e0 91 5b 0c 	lds	r30, 0x0C5B	; 0x800c5b <twi_rxBufferIndex>
    69d4:	f0 e0       	ldi	r31, 0x00	; 0
    69d6:	e4 5a       	subi	r30, 0xA4	; 164
    69d8:	f3 4f       	sbci	r31, 0xF3	; 243
    69da:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    69dc:	60 91 5b 0c 	lds	r22, 0x0C5B	; 0x800c5b <twi_rxBufferIndex>
    69e0:	70 e0       	ldi	r23, 0x00	; 0
    69e2:	e0 91 c0 0c 	lds	r30, 0x0CC0	; 0x800cc0 <twi_onSlaveReceive>
    69e6:	f0 91 c1 0c 	lds	r31, 0x0CC1	; 0x800cc1 <twi_onSlaveReceive+0x1>
    69ea:	8c e5       	ldi	r24, 0x5C	; 92
    69ec:	9c e0       	ldi	r25, 0x0C	; 12
    69ee:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    69f0:	10 92 5b 0c 	sts	0x0C5B, r1	; 0x800c5b <twi_rxBufferIndex>
      break;
    69f4:	35 c0       	rjmp	.+106    	; 0x6a60 <__vector_26+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    69f6:	84 e0       	ldi	r24, 0x04	; 4
    69f8:	80 93 c7 0c 	sts	0x0CC7, r24	; 0x800cc7 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    69fc:	10 92 7d 0c 	sts	0x0C7D, r1	; 0x800c7d <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    6a00:	10 92 7c 0c 	sts	0x0C7C, r1	; 0x800c7c <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    6a04:	e0 91 c2 0c 	lds	r30, 0x0CC2	; 0x800cc2 <twi_onSlaveTransmit>
    6a08:	f0 91 c3 0c 	lds	r31, 0x0CC3	; 0x800cc3 <twi_onSlaveTransmit+0x1>
    6a0c:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    6a0e:	80 91 7c 0c 	lds	r24, 0x0C7C	; 0x800c7c <twi_txBufferLength>
    6a12:	81 11       	cpse	r24, r1
    6a14:	05 c0       	rjmp	.+10     	; 0x6a20 <__vector_26+0x1f6>
        twi_txBufferLength = 1;
    6a16:	81 e0       	ldi	r24, 0x01	; 1
    6a18:	80 93 7c 0c 	sts	0x0C7C, r24	; 0x800c7c <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    6a1c:	10 92 7e 0c 	sts	0x0C7E, r1	; 0x800c7e <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    6a20:	e0 91 7d 0c 	lds	r30, 0x0C7D	; 0x800c7d <twi_txBufferIndex>
    6a24:	81 e0       	ldi	r24, 0x01	; 1
    6a26:	8e 0f       	add	r24, r30
    6a28:	80 93 7d 0c 	sts	0x0C7D, r24	; 0x800c7d <twi_txBufferIndex>
    6a2c:	f0 e0       	ldi	r31, 0x00	; 0
    6a2e:	e2 58       	subi	r30, 0x82	; 130
    6a30:	f3 4f       	sbci	r31, 0xF3	; 243
    6a32:	80 81       	ld	r24, Z
    6a34:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    6a38:	90 91 7d 0c 	lds	r25, 0x0C7D	; 0x800c7d <twi_txBufferIndex>
    6a3c:	80 91 7c 0c 	lds	r24, 0x0C7C	; 0x800c7c <twi_txBufferLength>
    6a40:	98 17       	cp	r25, r24
    6a42:	08 f4       	brcc	.+2      	; 0x6a46 <__vector_26+0x21c>
    6a44:	7d cf       	rjmp	.-262    	; 0x6940 <__vector_26+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    6a46:	85 e8       	ldi	r24, 0x85	; 133
    6a48:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    6a4c:	09 c0       	rjmp	.+18     	; 0x6a60 <__vector_26+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    6a4e:	85 ec       	ldi	r24, 0xC5	; 197
    6a50:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    6a54:	10 92 c7 0c 	sts	0x0CC7, r1	; 0x800cc7 <twi_state>
      break;
    6a58:	03 c0       	rjmp	.+6      	; 0x6a60 <__vector_26+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    6a5a:	10 92 5a 0c 	sts	0x0C5A, r1	; 0x800c5a <twi_error>
      twi_stop();
    6a5e:	d5 de       	rcall	.-598    	; 0x680a <twi_stop>
      break;
  }
}
    6a60:	ff 91       	pop	r31
    6a62:	ef 91       	pop	r30
    6a64:	bf 91       	pop	r27
    6a66:	af 91       	pop	r26
    6a68:	9f 91       	pop	r25
    6a6a:	8f 91       	pop	r24
    6a6c:	7f 91       	pop	r23
    6a6e:	6f 91       	pop	r22
    6a70:	5f 91       	pop	r21
    6a72:	4f 91       	pop	r20
    6a74:	3f 91       	pop	r19
    6a76:	2f 91       	pop	r18
    6a78:	0f 90       	pop	r0
    6a7a:	0b be       	out	0x3b, r0	; 59
    6a7c:	0f 90       	pop	r0
    6a7e:	0f be       	out	0x3f, r0	; 63
    6a80:	0f 90       	pop	r0
    6a82:	1f 90       	pop	r1
    6a84:	18 95       	reti

00006a86 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    6a86:	80 91 fc 0c 	lds	r24, 0x0CFC	; 0x800cfc <_ZN7TwoWire14rxBufferLengthE>
    6a8a:	90 e0       	ldi	r25, 0x00	; 0
    6a8c:	20 91 fd 0c 	lds	r18, 0x0CFD	; 0x800cfd <_ZN7TwoWire13rxBufferIndexE>
    6a90:	82 1b       	sub	r24, r18
    6a92:	91 09       	sbc	r25, r1
    6a94:	08 95       	ret

00006a96 <_ZN7TwoWire4readEv>:
    6a96:	90 91 fd 0c 	lds	r25, 0x0CFD	; 0x800cfd <_ZN7TwoWire13rxBufferIndexE>
    6a9a:	80 91 fc 0c 	lds	r24, 0x0CFC	; 0x800cfc <_ZN7TwoWire14rxBufferLengthE>
    6a9e:	98 17       	cp	r25, r24
    6aa0:	50 f4       	brcc	.+20     	; 0x6ab6 <_ZN7TwoWire4readEv+0x20>
    6aa2:	e9 2f       	mov	r30, r25
    6aa4:	f0 e0       	ldi	r31, 0x00	; 0
    6aa6:	e2 50       	subi	r30, 0x02	; 2
    6aa8:	f3 4f       	sbci	r31, 0xF3	; 243
    6aaa:	20 81       	ld	r18, Z
    6aac:	30 e0       	ldi	r19, 0x00	; 0
    6aae:	9f 5f       	subi	r25, 0xFF	; 255
    6ab0:	90 93 fd 0c 	sts	0x0CFD, r25	; 0x800cfd <_ZN7TwoWire13rxBufferIndexE>
    6ab4:	02 c0       	rjmp	.+4      	; 0x6aba <_ZN7TwoWire4readEv+0x24>
    6ab6:	2f ef       	ldi	r18, 0xFF	; 255
    6ab8:	3f ef       	ldi	r19, 0xFF	; 255
    6aba:	c9 01       	movw	r24, r18
    6abc:	08 95       	ret

00006abe <_ZN7TwoWire4peekEv>:
    6abe:	e0 91 fd 0c 	lds	r30, 0x0CFD	; 0x800cfd <_ZN7TwoWire13rxBufferIndexE>
    6ac2:	80 91 fc 0c 	lds	r24, 0x0CFC	; 0x800cfc <_ZN7TwoWire14rxBufferLengthE>
    6ac6:	e8 17       	cp	r30, r24
    6ac8:	30 f4       	brcc	.+12     	; 0x6ad6 <_ZN7TwoWire4peekEv+0x18>
    6aca:	f0 e0       	ldi	r31, 0x00	; 0
    6acc:	e2 50       	subi	r30, 0x02	; 2
    6ace:	f3 4f       	sbci	r31, 0xF3	; 243
    6ad0:	80 81       	ld	r24, Z
    6ad2:	90 e0       	ldi	r25, 0x00	; 0
    6ad4:	08 95       	ret
    6ad6:	8f ef       	ldi	r24, 0xFF	; 255
    6ad8:	9f ef       	ldi	r25, 0xFF	; 255
    6ada:	08 95       	ret

00006adc <_ZN7TwoWire5flushEv>:
    6adc:	08 95       	ret

00006ade <_ZN7TwoWire16onReceiveServiceEPhi>:
    6ade:	cf 93       	push	r28
    6ae0:	df 93       	push	r29
    6ae2:	ec 01       	movw	r28, r24
    6ae4:	e0 91 d4 0c 	lds	r30, 0x0CD4	; 0x800cd4 <_ZN7TwoWire14user_onReceiveE>
    6ae8:	f0 91 d5 0c 	lds	r31, 0x0CD5	; 0x800cd5 <_ZN7TwoWire14user_onReceiveE+0x1>
    6aec:	30 97       	sbiw	r30, 0x00	; 0
    6aee:	f1 f0       	breq	.+60     	; 0x6b2c <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    6af0:	90 91 fd 0c 	lds	r25, 0x0CFD	; 0x800cfd <_ZN7TwoWire13rxBufferIndexE>
    6af4:	80 91 fc 0c 	lds	r24, 0x0CFC	; 0x800cfc <_ZN7TwoWire14rxBufferLengthE>
    6af8:	98 17       	cp	r25, r24
    6afa:	c0 f0       	brcs	.+48     	; 0x6b2c <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    6afc:	90 e0       	ldi	r25, 0x00	; 0
    6afe:	29 2f       	mov	r18, r25
    6b00:	30 e0       	ldi	r19, 0x00	; 0
    6b02:	26 17       	cp	r18, r22
    6b04:	37 07       	cpc	r19, r23
    6b06:	54 f4       	brge	.+20     	; 0x6b1c <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    6b08:	de 01       	movw	r26, r28
    6b0a:	a2 0f       	add	r26, r18
    6b0c:	b3 1f       	adc	r27, r19
    6b0e:	4c 91       	ld	r20, X
    6b10:	d9 01       	movw	r26, r18
    6b12:	a2 50       	subi	r26, 0x02	; 2
    6b14:	b3 4f       	sbci	r27, 0xF3	; 243
    6b16:	4c 93       	st	X, r20
    6b18:	9f 5f       	subi	r25, 0xFF	; 255
    6b1a:	f1 cf       	rjmp	.-30     	; 0x6afe <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    6b1c:	10 92 fd 0c 	sts	0x0CFD, r1	; 0x800cfd <_ZN7TwoWire13rxBufferIndexE>
    6b20:	60 93 fc 0c 	sts	0x0CFC, r22	; 0x800cfc <_ZN7TwoWire14rxBufferLengthE>
    6b24:	cb 01       	movw	r24, r22
    6b26:	df 91       	pop	r29
    6b28:	cf 91       	pop	r28
    6b2a:	09 94       	ijmp
    6b2c:	df 91       	pop	r29
    6b2e:	cf 91       	pop	r28
    6b30:	08 95       	ret

00006b32 <_ZN7TwoWire16onRequestServiceEv>:
    6b32:	e0 91 d6 0c 	lds	r30, 0x0CD6	; 0x800cd6 <_ZN7TwoWire14user_onRequestE>
    6b36:	f0 91 d7 0c 	lds	r31, 0x0CD7	; 0x800cd7 <_ZN7TwoWire14user_onRequestE+0x1>
    6b3a:	30 97       	sbiw	r30, 0x00	; 0
    6b3c:	29 f0       	breq	.+10     	; 0x6b48 <_ZN7TwoWire16onRequestServiceEv+0x16>
    6b3e:	10 92 da 0c 	sts	0x0CDA, r1	; 0x800cda <_ZN7TwoWire13txBufferIndexE>
    6b42:	10 92 d9 0c 	sts	0x0CD9, r1	; 0x800cd9 <_ZN7TwoWire14txBufferLengthE>
    6b46:	09 94       	ijmp
    6b48:	08 95       	ret

00006b4a <_ZN7TwoWire5writeEPKhj>:
    6b4a:	cf 92       	push	r12
    6b4c:	df 92       	push	r13
    6b4e:	ef 92       	push	r14
    6b50:	ff 92       	push	r15
    6b52:	0f 93       	push	r16
    6b54:	1f 93       	push	r17
    6b56:	cf 93       	push	r28
    6b58:	df 93       	push	r29
    6b5a:	7c 01       	movw	r14, r24
    6b5c:	cb 01       	movw	r24, r22
    6b5e:	8a 01       	movw	r16, r20
    6b60:	20 91 d8 0c 	lds	r18, 0x0CD8	; 0x800cd8 <_ZN7TwoWire12transmittingE>
    6b64:	22 23       	and	r18, r18
    6b66:	89 f0       	breq	.+34     	; 0x6b8a <_ZN7TwoWire5writeEPKhj+0x40>
    6b68:	eb 01       	movw	r28, r22
    6b6a:	6b 01       	movw	r12, r22
    6b6c:	c4 0e       	add	r12, r20
    6b6e:	d5 1e       	adc	r13, r21
    6b70:	cc 15       	cp	r28, r12
    6b72:	dd 05       	cpc	r29, r13
    6b74:	61 f0       	breq	.+24     	; 0x6b8e <_ZN7TwoWire5writeEPKhj+0x44>
    6b76:	69 91       	ld	r22, Y+
    6b78:	d7 01       	movw	r26, r14
    6b7a:	ed 91       	ld	r30, X+
    6b7c:	fc 91       	ld	r31, X
    6b7e:	01 90       	ld	r0, Z+
    6b80:	f0 81       	ld	r31, Z
    6b82:	e0 2d       	mov	r30, r0
    6b84:	c7 01       	movw	r24, r14
    6b86:	09 95       	icall
    6b88:	f3 cf       	rjmp	.-26     	; 0x6b70 <_ZN7TwoWire5writeEPKhj+0x26>
    6b8a:	64 2f       	mov	r22, r20
    6b8c:	0c de       	rcall	.-1000   	; 0x67a6 <twi_transmit>
    6b8e:	c8 01       	movw	r24, r16
    6b90:	df 91       	pop	r29
    6b92:	cf 91       	pop	r28
    6b94:	1f 91       	pop	r17
    6b96:	0f 91       	pop	r16
    6b98:	ff 90       	pop	r15
    6b9a:	ef 90       	pop	r14
    6b9c:	df 90       	pop	r13
    6b9e:	cf 90       	pop	r12
    6ba0:	08 95       	ret

00006ba2 <_ZN7TwoWire5writeEh>:
    6ba2:	cf 93       	push	r28
    6ba4:	df 93       	push	r29
    6ba6:	1f 92       	push	r1
    6ba8:	cd b7       	in	r28, 0x3d	; 61
    6baa:	de b7       	in	r29, 0x3e	; 62
    6bac:	69 83       	std	Y+1, r22	; 0x01
    6bae:	20 91 d8 0c 	lds	r18, 0x0CD8	; 0x800cd8 <_ZN7TwoWire12transmittingE>
    6bb2:	22 23       	and	r18, r18
    6bb4:	d1 f0       	breq	.+52     	; 0x6bea <_ZN7TwoWire5writeEh+0x48>
    6bb6:	20 91 d9 0c 	lds	r18, 0x0CD9	; 0x800cd9 <_ZN7TwoWire14txBufferLengthE>
    6bba:	20 32       	cpi	r18, 0x20	; 32
    6bbc:	40 f0       	brcs	.+16     	; 0x6bce <_ZN7TwoWire5writeEh+0x2c>
    6bbe:	21 e0       	ldi	r18, 0x01	; 1
    6bc0:	30 e0       	ldi	r19, 0x00	; 0
    6bc2:	fc 01       	movw	r30, r24
    6bc4:	33 83       	std	Z+3, r19	; 0x03
    6bc6:	22 83       	std	Z+2, r18	; 0x02
    6bc8:	80 e0       	ldi	r24, 0x00	; 0
    6bca:	90 e0       	ldi	r25, 0x00	; 0
    6bcc:	14 c0       	rjmp	.+40     	; 0x6bf6 <_ZN7TwoWire5writeEh+0x54>
    6bce:	80 91 da 0c 	lds	r24, 0x0CDA	; 0x800cda <_ZN7TwoWire13txBufferIndexE>
    6bd2:	e8 2f       	mov	r30, r24
    6bd4:	f0 e0       	ldi	r31, 0x00	; 0
    6bd6:	e5 52       	subi	r30, 0x25	; 37
    6bd8:	f3 4f       	sbci	r31, 0xF3	; 243
    6bda:	99 81       	ldd	r25, Y+1	; 0x01
    6bdc:	90 83       	st	Z, r25
    6bde:	8f 5f       	subi	r24, 0xFF	; 255
    6be0:	80 93 da 0c 	sts	0x0CDA, r24	; 0x800cda <_ZN7TwoWire13txBufferIndexE>
    6be4:	80 93 d9 0c 	sts	0x0CD9, r24	; 0x800cd9 <_ZN7TwoWire14txBufferLengthE>
    6be8:	04 c0       	rjmp	.+8      	; 0x6bf2 <_ZN7TwoWire5writeEh+0x50>
    6bea:	61 e0       	ldi	r22, 0x01	; 1
    6bec:	ce 01       	movw	r24, r28
    6bee:	01 96       	adiw	r24, 0x01	; 1
    6bf0:	da dd       	rcall	.-1100   	; 0x67a6 <twi_transmit>
    6bf2:	81 e0       	ldi	r24, 0x01	; 1
    6bf4:	90 e0       	ldi	r25, 0x00	; 0
    6bf6:	0f 90       	pop	r0
    6bf8:	df 91       	pop	r29
    6bfa:	cf 91       	pop	r28
    6bfc:	08 95       	ret

00006bfe <_ZN7TwoWireC1Ev>:
    6bfe:	fc 01       	movw	r30, r24
    6c00:	13 82       	std	Z+3, r1	; 0x03
    6c02:	12 82       	std	Z+2, r1	; 0x02
    6c04:	88 ee       	ldi	r24, 0xE8	; 232
    6c06:	93 e0       	ldi	r25, 0x03	; 3
    6c08:	a0 e0       	ldi	r26, 0x00	; 0
    6c0a:	b0 e0       	ldi	r27, 0x00	; 0
    6c0c:	84 83       	std	Z+4, r24	; 0x04
    6c0e:	95 83       	std	Z+5, r25	; 0x05
    6c10:	a6 83       	std	Z+6, r26	; 0x06
    6c12:	b7 83       	std	Z+7, r27	; 0x07
    6c14:	8e e4       	ldi	r24, 0x4E	; 78
    6c16:	9a e0       	ldi	r25, 0x0A	; 10
    6c18:	91 83       	std	Z+1, r25	; 0x01
    6c1a:	80 83       	st	Z, r24
    6c1c:	08 95       	ret

00006c1e <_ZN7TwoWire5beginEv>:
    6c1e:	10 92 fd 0c 	sts	0x0CFD, r1	; 0x800cfd <_ZN7TwoWire13rxBufferIndexE>
    6c22:	10 92 fc 0c 	sts	0x0CFC, r1	; 0x800cfc <_ZN7TwoWire14rxBufferLengthE>
    6c26:	10 92 da 0c 	sts	0x0CDA, r1	; 0x800cda <_ZN7TwoWire13txBufferIndexE>
    6c2a:	10 92 d9 0c 	sts	0x0CD9, r1	; 0x800cd9 <_ZN7TwoWire14txBufferLengthE>
    6c2e:	de dc       	rcall	.-1604   	; 0x65ec <twi_init>
    6c30:	89 e9       	ldi	r24, 0x99	; 153
    6c32:	95 e3       	ldi	r25, 0x35	; 53
    6c34:	e5 dd       	rcall	.-1078   	; 0x6800 <twi_attachSlaveTxEvent>
    6c36:	8f e6       	ldi	r24, 0x6F	; 111
    6c38:	95 e3       	ldi	r25, 0x35	; 53
    6c3a:	dd cd       	rjmp	.-1094   	; 0x67f6 <twi_attachSlaveRxEvent>

00006c3c <_ZN7TwoWire3endEv>:
    6c3c:	f5 cc       	rjmp	.-1558   	; 0x6628 <twi_disable>

00006c3e <_ZN7TwoWire8setClockEm>:
    6c3e:	cb 01       	movw	r24, r22
    6c40:	ba 01       	movw	r22, r20
    6c42:	ff cc       	rjmp	.-1538   	; 0x6642 <twi_setFrequency>

00006c44 <_ZN7TwoWire17beginTransmissionEh>:
    6c44:	81 e0       	ldi	r24, 0x01	; 1
    6c46:	80 93 d8 0c 	sts	0x0CD8, r24	; 0x800cd8 <_ZN7TwoWire12transmittingE>
    6c4a:	60 93 fb 0c 	sts	0x0CFB, r22	; 0x800cfb <_ZN7TwoWire9txAddressE>
    6c4e:	10 92 da 0c 	sts	0x0CDA, r1	; 0x800cda <_ZN7TwoWire13txBufferIndexE>
    6c52:	10 92 d9 0c 	sts	0x0CD9, r1	; 0x800cd9 <_ZN7TwoWire14txBufferLengthE>
    6c56:	08 95       	ret

00006c58 <_ZN7TwoWire17beginTransmissionEi>:
    6c58:	f5 cf       	rjmp	.-22     	; 0x6c44 <_ZN7TwoWire17beginTransmissionEh>

00006c5a <_ZN7TwoWire15endTransmissionEh>:
    6c5a:	0f 93       	push	r16
    6c5c:	06 2f       	mov	r16, r22
    6c5e:	21 e0       	ldi	r18, 0x01	; 1
    6c60:	40 91 d9 0c 	lds	r20, 0x0CD9	; 0x800cd9 <_ZN7TwoWire14txBufferLengthE>
    6c64:	6b ed       	ldi	r22, 0xDB	; 219
    6c66:	7c e0       	ldi	r23, 0x0C	; 12
    6c68:	80 91 fb 0c 	lds	r24, 0x0CFB	; 0x800cfb <_ZN7TwoWire9txAddressE>
    6c6c:	46 dd       	rcall	.-1396   	; 0x66fa <twi_writeTo>
    6c6e:	10 92 da 0c 	sts	0x0CDA, r1	; 0x800cda <_ZN7TwoWire13txBufferIndexE>
    6c72:	10 92 d9 0c 	sts	0x0CD9, r1	; 0x800cd9 <_ZN7TwoWire14txBufferLengthE>
    6c76:	10 92 d8 0c 	sts	0x0CD8, r1	; 0x800cd8 <_ZN7TwoWire12transmittingE>
    6c7a:	0f 91       	pop	r16
    6c7c:	08 95       	ret

00006c7e <_ZN7TwoWire11requestFromEhhmhh>:
    6c7e:	4f 92       	push	r4
    6c80:	5f 92       	push	r5
    6c82:	6f 92       	push	r6
    6c84:	7f 92       	push	r7
    6c86:	af 92       	push	r10
    6c88:	bf 92       	push	r11
    6c8a:	cf 92       	push	r12
    6c8c:	ef 92       	push	r14
    6c8e:	ff 92       	push	r15
    6c90:	0f 93       	push	r16
    6c92:	1f 93       	push	r17
    6c94:	cf 93       	push	r28
    6c96:	df 93       	push	r29
    6c98:	5c 01       	movw	r10, r24
    6c9a:	f6 2e       	mov	r15, r22
    6c9c:	d4 2f       	mov	r29, r20
    6c9e:	28 01       	movw	r4, r16
    6ca0:	39 01       	movw	r6, r18
    6ca2:	ee 20       	and	r14, r14
    6ca4:	11 f1       	breq	.+68     	; 0x6cea <_ZN7TwoWire11requestFromEhhmhh+0x6c>
    6ca6:	ce df       	rcall	.-100    	; 0x6c44 <_ZN7TwoWire17beginTransmissionEh>
    6ca8:	ce 2d       	mov	r28, r14
    6caa:	c4 30       	cpi	r28, 0x04	; 4
    6cac:	08 f0       	brcs	.+2      	; 0x6cb0 <_ZN7TwoWire11requestFromEhhmhh+0x32>
    6cae:	c3 e0       	ldi	r28, 0x03	; 3
    6cb0:	c1 50       	subi	r28, 0x01	; 1
    6cb2:	c0 f0       	brcs	.+48     	; 0x6ce4 <_ZN7TwoWire11requestFromEhhmhh+0x66>
    6cb4:	28 e0       	ldi	r18, 0x08	; 8
    6cb6:	c2 9f       	mul	r28, r18
    6cb8:	c0 01       	movw	r24, r0
    6cba:	11 24       	eor	r1, r1
    6cbc:	a3 01       	movw	r20, r6
    6cbe:	92 01       	movw	r18, r4
    6cc0:	04 c0       	rjmp	.+8      	; 0x6cca <_ZN7TwoWire11requestFromEhhmhh+0x4c>
    6cc2:	56 95       	lsr	r21
    6cc4:	47 95       	ror	r20
    6cc6:	37 95       	ror	r19
    6cc8:	27 95       	ror	r18
    6cca:	8a 95       	dec	r24
    6ccc:	d2 f7       	brpl	.-12     	; 0x6cc2 <_ZN7TwoWire11requestFromEhhmhh+0x44>
    6cce:	ca 01       	movw	r24, r20
    6cd0:	b9 01       	movw	r22, r18
    6cd2:	d5 01       	movw	r26, r10
    6cd4:	ed 91       	ld	r30, X+
    6cd6:	fc 91       	ld	r31, X
    6cd8:	01 90       	ld	r0, Z+
    6cda:	f0 81       	ld	r31, Z
    6cdc:	e0 2d       	mov	r30, r0
    6cde:	c5 01       	movw	r24, r10
    6ce0:	09 95       	icall
    6ce2:	e6 cf       	rjmp	.-52     	; 0x6cb0 <_ZN7TwoWire11requestFromEhhmhh+0x32>
    6ce4:	60 e0       	ldi	r22, 0x00	; 0
    6ce6:	c5 01       	movw	r24, r10
    6ce8:	b8 df       	rcall	.-144    	; 0x6c5a <_ZN7TwoWire15endTransmissionEh>
    6cea:	4d 2f       	mov	r20, r29
    6cec:	d1 32       	cpi	r29, 0x21	; 33
    6cee:	08 f0       	brcs	.+2      	; 0x6cf2 <_ZN7TwoWire11requestFromEhhmhh+0x74>
    6cf0:	40 e2       	ldi	r20, 0x20	; 32
    6cf2:	2c 2d       	mov	r18, r12
    6cf4:	6e ef       	ldi	r22, 0xFE	; 254
    6cf6:	7c e0       	ldi	r23, 0x0C	; 12
    6cf8:	8f 2d       	mov	r24, r15
    6cfa:	b7 dc       	rcall	.-1682   	; 0x666a <twi_readFrom>
    6cfc:	10 92 fd 0c 	sts	0x0CFD, r1	; 0x800cfd <_ZN7TwoWire13rxBufferIndexE>
    6d00:	80 93 fc 0c 	sts	0x0CFC, r24	; 0x800cfc <_ZN7TwoWire14rxBufferLengthE>
    6d04:	df 91       	pop	r29
    6d06:	cf 91       	pop	r28
    6d08:	1f 91       	pop	r17
    6d0a:	0f 91       	pop	r16
    6d0c:	ff 90       	pop	r15
    6d0e:	ef 90       	pop	r14
    6d10:	cf 90       	pop	r12
    6d12:	bf 90       	pop	r11
    6d14:	af 90       	pop	r10
    6d16:	7f 90       	pop	r7
    6d18:	6f 90       	pop	r6
    6d1a:	5f 90       	pop	r5
    6d1c:	4f 90       	pop	r4
    6d1e:	08 95       	ret

00006d20 <_ZN7TwoWire11requestFromEhhh>:
    6d20:	cf 92       	push	r12
    6d22:	ef 92       	push	r14
    6d24:	0f 93       	push	r16
    6d26:	1f 93       	push	r17
    6d28:	c2 2e       	mov	r12, r18
    6d2a:	e1 2c       	mov	r14, r1
    6d2c:	00 e0       	ldi	r16, 0x00	; 0
    6d2e:	10 e0       	ldi	r17, 0x00	; 0
    6d30:	98 01       	movw	r18, r16
    6d32:	a5 df       	rcall	.-182    	; 0x6c7e <_ZN7TwoWire11requestFromEhhmhh>
    6d34:	1f 91       	pop	r17
    6d36:	0f 91       	pop	r16
    6d38:	ef 90       	pop	r14
    6d3a:	cf 90       	pop	r12
    6d3c:	08 95       	ret

00006d3e <_ZN7TwoWire11requestFromEhh>:
    6d3e:	21 e0       	ldi	r18, 0x01	; 1
    6d40:	ef cf       	rjmp	.-34     	; 0x6d20 <_ZN7TwoWire11requestFromEhhh>

00006d42 <_ZN7TwoWire11requestFromEii>:
    6d42:	21 e0       	ldi	r18, 0x01	; 1
    6d44:	ed cf       	rjmp	.-38     	; 0x6d20 <_ZN7TwoWire11requestFromEhhh>

00006d46 <_ZN7TwoWire15endTransmissionEv>:
    6d46:	61 e0       	ldi	r22, 0x01	; 1
    6d48:	88 cf       	rjmp	.-240    	; 0x6c5a <_ZN7TwoWire15endTransmissionEh>

00006d4a <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    6d4a:	88 ec       	ldi	r24, 0xC8	; 200
    6d4c:	9c e0       	ldi	r25, 0x0C	; 12
    6d4e:	57 cf       	rjmp	.-338    	; 0x6bfe <_ZN7TwoWireC1Ev>

00006d50 <__cmpsf2>:
    6d50:	a8 d0       	rcall	.+336    	; 0x6ea2 <__fp_cmp>
    6d52:	08 f4       	brcc	.+2      	; 0x6d56 <__cmpsf2+0x6>
    6d54:	81 e0       	ldi	r24, 0x01	; 1
    6d56:	08 95       	ret

00006d58 <__divsf3>:
    6d58:	0c d0       	rcall	.+24     	; 0x6d72 <__divsf3x>
    6d5a:	de c0       	rjmp	.+444    	; 0x6f18 <__fp_round>
    6d5c:	d6 d0       	rcall	.+428    	; 0x6f0a <__fp_pscB>
    6d5e:	40 f0       	brcs	.+16     	; 0x6d70 <__divsf3+0x18>
    6d60:	cd d0       	rcall	.+410    	; 0x6efc <__fp_pscA>
    6d62:	30 f0       	brcs	.+12     	; 0x6d70 <__divsf3+0x18>
    6d64:	21 f4       	brne	.+8      	; 0x6d6e <__divsf3+0x16>
    6d66:	5f 3f       	cpi	r21, 0xFF	; 255
    6d68:	19 f0       	breq	.+6      	; 0x6d70 <__divsf3+0x18>
    6d6a:	bf c0       	rjmp	.+382    	; 0x6eea <__fp_inf>
    6d6c:	51 11       	cpse	r21, r1
    6d6e:	08 c1       	rjmp	.+528    	; 0x6f80 <__fp_szero>
    6d70:	c2 c0       	rjmp	.+388    	; 0x6ef6 <__fp_nan>

00006d72 <__divsf3x>:
    6d72:	e3 d0       	rcall	.+454    	; 0x6f3a <__fp_split3>
    6d74:	98 f3       	brcs	.-26     	; 0x6d5c <__divsf3+0x4>

00006d76 <__divsf3_pse>:
    6d76:	99 23       	and	r25, r25
    6d78:	c9 f3       	breq	.-14     	; 0x6d6c <__divsf3+0x14>
    6d7a:	55 23       	and	r21, r21
    6d7c:	b1 f3       	breq	.-20     	; 0x6d6a <__divsf3+0x12>
    6d7e:	95 1b       	sub	r25, r21
    6d80:	55 0b       	sbc	r21, r21
    6d82:	bb 27       	eor	r27, r27
    6d84:	aa 27       	eor	r26, r26
    6d86:	62 17       	cp	r22, r18
    6d88:	73 07       	cpc	r23, r19
    6d8a:	84 07       	cpc	r24, r20
    6d8c:	38 f0       	brcs	.+14     	; 0x6d9c <__divsf3_pse+0x26>
    6d8e:	9f 5f       	subi	r25, 0xFF	; 255
    6d90:	5f 4f       	sbci	r21, 0xFF	; 255
    6d92:	22 0f       	add	r18, r18
    6d94:	33 1f       	adc	r19, r19
    6d96:	44 1f       	adc	r20, r20
    6d98:	aa 1f       	adc	r26, r26
    6d9a:	a9 f3       	breq	.-22     	; 0x6d86 <__divsf3_pse+0x10>
    6d9c:	33 d0       	rcall	.+102    	; 0x6e04 <__divsf3_pse+0x8e>
    6d9e:	0e 2e       	mov	r0, r30
    6da0:	3a f0       	brmi	.+14     	; 0x6db0 <__divsf3_pse+0x3a>
    6da2:	e0 e8       	ldi	r30, 0x80	; 128
    6da4:	30 d0       	rcall	.+96     	; 0x6e06 <__divsf3_pse+0x90>
    6da6:	91 50       	subi	r25, 0x01	; 1
    6da8:	50 40       	sbci	r21, 0x00	; 0
    6daa:	e6 95       	lsr	r30
    6dac:	00 1c       	adc	r0, r0
    6dae:	ca f7       	brpl	.-14     	; 0x6da2 <__divsf3_pse+0x2c>
    6db0:	29 d0       	rcall	.+82     	; 0x6e04 <__divsf3_pse+0x8e>
    6db2:	fe 2f       	mov	r31, r30
    6db4:	27 d0       	rcall	.+78     	; 0x6e04 <__divsf3_pse+0x8e>
    6db6:	66 0f       	add	r22, r22
    6db8:	77 1f       	adc	r23, r23
    6dba:	88 1f       	adc	r24, r24
    6dbc:	bb 1f       	adc	r27, r27
    6dbe:	26 17       	cp	r18, r22
    6dc0:	37 07       	cpc	r19, r23
    6dc2:	48 07       	cpc	r20, r24
    6dc4:	ab 07       	cpc	r26, r27
    6dc6:	b0 e8       	ldi	r27, 0x80	; 128
    6dc8:	09 f0       	breq	.+2      	; 0x6dcc <__divsf3_pse+0x56>
    6dca:	bb 0b       	sbc	r27, r27
    6dcc:	80 2d       	mov	r24, r0
    6dce:	bf 01       	movw	r22, r30
    6dd0:	ff 27       	eor	r31, r31
    6dd2:	93 58       	subi	r25, 0x83	; 131
    6dd4:	5f 4f       	sbci	r21, 0xFF	; 255
    6dd6:	2a f0       	brmi	.+10     	; 0x6de2 <__divsf3_pse+0x6c>
    6dd8:	9e 3f       	cpi	r25, 0xFE	; 254
    6dda:	51 05       	cpc	r21, r1
    6ddc:	68 f0       	brcs	.+26     	; 0x6df8 <__divsf3_pse+0x82>
    6dde:	85 c0       	rjmp	.+266    	; 0x6eea <__fp_inf>
    6de0:	cf c0       	rjmp	.+414    	; 0x6f80 <__fp_szero>
    6de2:	5f 3f       	cpi	r21, 0xFF	; 255
    6de4:	ec f3       	brlt	.-6      	; 0x6de0 <__divsf3_pse+0x6a>
    6de6:	98 3e       	cpi	r25, 0xE8	; 232
    6de8:	dc f3       	brlt	.-10     	; 0x6de0 <__divsf3_pse+0x6a>
    6dea:	86 95       	lsr	r24
    6dec:	77 95       	ror	r23
    6dee:	67 95       	ror	r22
    6df0:	b7 95       	ror	r27
    6df2:	f7 95       	ror	r31
    6df4:	9f 5f       	subi	r25, 0xFF	; 255
    6df6:	c9 f7       	brne	.-14     	; 0x6dea <__divsf3_pse+0x74>
    6df8:	88 0f       	add	r24, r24
    6dfa:	91 1d       	adc	r25, r1
    6dfc:	96 95       	lsr	r25
    6dfe:	87 95       	ror	r24
    6e00:	97 f9       	bld	r25, 7
    6e02:	08 95       	ret
    6e04:	e1 e0       	ldi	r30, 0x01	; 1
    6e06:	66 0f       	add	r22, r22
    6e08:	77 1f       	adc	r23, r23
    6e0a:	88 1f       	adc	r24, r24
    6e0c:	bb 1f       	adc	r27, r27
    6e0e:	62 17       	cp	r22, r18
    6e10:	73 07       	cpc	r23, r19
    6e12:	84 07       	cpc	r24, r20
    6e14:	ba 07       	cpc	r27, r26
    6e16:	20 f0       	brcs	.+8      	; 0x6e20 <__divsf3_pse+0xaa>
    6e18:	62 1b       	sub	r22, r18
    6e1a:	73 0b       	sbc	r23, r19
    6e1c:	84 0b       	sbc	r24, r20
    6e1e:	ba 0b       	sbc	r27, r26
    6e20:	ee 1f       	adc	r30, r30
    6e22:	88 f7       	brcc	.-30     	; 0x6e06 <__divsf3_pse+0x90>
    6e24:	e0 95       	com	r30
    6e26:	08 95       	ret

00006e28 <__floatunsisf>:
    6e28:	e8 94       	clt
    6e2a:	09 c0       	rjmp	.+18     	; 0x6e3e <__floatsisf+0x12>

00006e2c <__floatsisf>:
    6e2c:	97 fb       	bst	r25, 7
    6e2e:	3e f4       	brtc	.+14     	; 0x6e3e <__floatsisf+0x12>
    6e30:	90 95       	com	r25
    6e32:	80 95       	com	r24
    6e34:	70 95       	com	r23
    6e36:	61 95       	neg	r22
    6e38:	7f 4f       	sbci	r23, 0xFF	; 255
    6e3a:	8f 4f       	sbci	r24, 0xFF	; 255
    6e3c:	9f 4f       	sbci	r25, 0xFF	; 255
    6e3e:	99 23       	and	r25, r25
    6e40:	a9 f0       	breq	.+42     	; 0x6e6c <__floatsisf+0x40>
    6e42:	f9 2f       	mov	r31, r25
    6e44:	96 e9       	ldi	r25, 0x96	; 150
    6e46:	bb 27       	eor	r27, r27
    6e48:	93 95       	inc	r25
    6e4a:	f6 95       	lsr	r31
    6e4c:	87 95       	ror	r24
    6e4e:	77 95       	ror	r23
    6e50:	67 95       	ror	r22
    6e52:	b7 95       	ror	r27
    6e54:	f1 11       	cpse	r31, r1
    6e56:	f8 cf       	rjmp	.-16     	; 0x6e48 <__floatsisf+0x1c>
    6e58:	fa f4       	brpl	.+62     	; 0x6e98 <__floatsisf+0x6c>
    6e5a:	bb 0f       	add	r27, r27
    6e5c:	11 f4       	brne	.+4      	; 0x6e62 <__floatsisf+0x36>
    6e5e:	60 ff       	sbrs	r22, 0
    6e60:	1b c0       	rjmp	.+54     	; 0x6e98 <__floatsisf+0x6c>
    6e62:	6f 5f       	subi	r22, 0xFF	; 255
    6e64:	7f 4f       	sbci	r23, 0xFF	; 255
    6e66:	8f 4f       	sbci	r24, 0xFF	; 255
    6e68:	9f 4f       	sbci	r25, 0xFF	; 255
    6e6a:	16 c0       	rjmp	.+44     	; 0x6e98 <__floatsisf+0x6c>
    6e6c:	88 23       	and	r24, r24
    6e6e:	11 f0       	breq	.+4      	; 0x6e74 <__floatsisf+0x48>
    6e70:	96 e9       	ldi	r25, 0x96	; 150
    6e72:	11 c0       	rjmp	.+34     	; 0x6e96 <__floatsisf+0x6a>
    6e74:	77 23       	and	r23, r23
    6e76:	21 f0       	breq	.+8      	; 0x6e80 <__floatsisf+0x54>
    6e78:	9e e8       	ldi	r25, 0x8E	; 142
    6e7a:	87 2f       	mov	r24, r23
    6e7c:	76 2f       	mov	r23, r22
    6e7e:	05 c0       	rjmp	.+10     	; 0x6e8a <__floatsisf+0x5e>
    6e80:	66 23       	and	r22, r22
    6e82:	71 f0       	breq	.+28     	; 0x6ea0 <__floatsisf+0x74>
    6e84:	96 e8       	ldi	r25, 0x86	; 134
    6e86:	86 2f       	mov	r24, r22
    6e88:	70 e0       	ldi	r23, 0x00	; 0
    6e8a:	60 e0       	ldi	r22, 0x00	; 0
    6e8c:	2a f0       	brmi	.+10     	; 0x6e98 <__floatsisf+0x6c>
    6e8e:	9a 95       	dec	r25
    6e90:	66 0f       	add	r22, r22
    6e92:	77 1f       	adc	r23, r23
    6e94:	88 1f       	adc	r24, r24
    6e96:	da f7       	brpl	.-10     	; 0x6e8e <__floatsisf+0x62>
    6e98:	88 0f       	add	r24, r24
    6e9a:	96 95       	lsr	r25
    6e9c:	87 95       	ror	r24
    6e9e:	97 f9       	bld	r25, 7
    6ea0:	08 95       	ret

00006ea2 <__fp_cmp>:
    6ea2:	99 0f       	add	r25, r25
    6ea4:	00 08       	sbc	r0, r0
    6ea6:	55 0f       	add	r21, r21
    6ea8:	aa 0b       	sbc	r26, r26
    6eaa:	e0 e8       	ldi	r30, 0x80	; 128
    6eac:	fe ef       	ldi	r31, 0xFE	; 254
    6eae:	16 16       	cp	r1, r22
    6eb0:	17 06       	cpc	r1, r23
    6eb2:	e8 07       	cpc	r30, r24
    6eb4:	f9 07       	cpc	r31, r25
    6eb6:	c0 f0       	brcs	.+48     	; 0x6ee8 <__fp_cmp+0x46>
    6eb8:	12 16       	cp	r1, r18
    6eba:	13 06       	cpc	r1, r19
    6ebc:	e4 07       	cpc	r30, r20
    6ebe:	f5 07       	cpc	r31, r21
    6ec0:	98 f0       	brcs	.+38     	; 0x6ee8 <__fp_cmp+0x46>
    6ec2:	62 1b       	sub	r22, r18
    6ec4:	73 0b       	sbc	r23, r19
    6ec6:	84 0b       	sbc	r24, r20
    6ec8:	95 0b       	sbc	r25, r21
    6eca:	39 f4       	brne	.+14     	; 0x6eda <__fp_cmp+0x38>
    6ecc:	0a 26       	eor	r0, r26
    6ece:	61 f0       	breq	.+24     	; 0x6ee8 <__fp_cmp+0x46>
    6ed0:	23 2b       	or	r18, r19
    6ed2:	24 2b       	or	r18, r20
    6ed4:	25 2b       	or	r18, r21
    6ed6:	21 f4       	brne	.+8      	; 0x6ee0 <__fp_cmp+0x3e>
    6ed8:	08 95       	ret
    6eda:	0a 26       	eor	r0, r26
    6edc:	09 f4       	brne	.+2      	; 0x6ee0 <__fp_cmp+0x3e>
    6ede:	a1 40       	sbci	r26, 0x01	; 1
    6ee0:	a6 95       	lsr	r26
    6ee2:	8f ef       	ldi	r24, 0xFF	; 255
    6ee4:	81 1d       	adc	r24, r1
    6ee6:	81 1d       	adc	r24, r1
    6ee8:	08 95       	ret

00006eea <__fp_inf>:
    6eea:	97 f9       	bld	r25, 7
    6eec:	9f 67       	ori	r25, 0x7F	; 127
    6eee:	80 e8       	ldi	r24, 0x80	; 128
    6ef0:	70 e0       	ldi	r23, 0x00	; 0
    6ef2:	60 e0       	ldi	r22, 0x00	; 0
    6ef4:	08 95       	ret

00006ef6 <__fp_nan>:
    6ef6:	9f ef       	ldi	r25, 0xFF	; 255
    6ef8:	80 ec       	ldi	r24, 0xC0	; 192
    6efa:	08 95       	ret

00006efc <__fp_pscA>:
    6efc:	00 24       	eor	r0, r0
    6efe:	0a 94       	dec	r0
    6f00:	16 16       	cp	r1, r22
    6f02:	17 06       	cpc	r1, r23
    6f04:	18 06       	cpc	r1, r24
    6f06:	09 06       	cpc	r0, r25
    6f08:	08 95       	ret

00006f0a <__fp_pscB>:
    6f0a:	00 24       	eor	r0, r0
    6f0c:	0a 94       	dec	r0
    6f0e:	12 16       	cp	r1, r18
    6f10:	13 06       	cpc	r1, r19
    6f12:	14 06       	cpc	r1, r20
    6f14:	05 06       	cpc	r0, r21
    6f16:	08 95       	ret

00006f18 <__fp_round>:
    6f18:	09 2e       	mov	r0, r25
    6f1a:	03 94       	inc	r0
    6f1c:	00 0c       	add	r0, r0
    6f1e:	11 f4       	brne	.+4      	; 0x6f24 <__fp_round+0xc>
    6f20:	88 23       	and	r24, r24
    6f22:	52 f0       	brmi	.+20     	; 0x6f38 <__fp_round+0x20>
    6f24:	bb 0f       	add	r27, r27
    6f26:	40 f4       	brcc	.+16     	; 0x6f38 <__fp_round+0x20>
    6f28:	bf 2b       	or	r27, r31
    6f2a:	11 f4       	brne	.+4      	; 0x6f30 <__fp_round+0x18>
    6f2c:	60 ff       	sbrs	r22, 0
    6f2e:	04 c0       	rjmp	.+8      	; 0x6f38 <__fp_round+0x20>
    6f30:	6f 5f       	subi	r22, 0xFF	; 255
    6f32:	7f 4f       	sbci	r23, 0xFF	; 255
    6f34:	8f 4f       	sbci	r24, 0xFF	; 255
    6f36:	9f 4f       	sbci	r25, 0xFF	; 255
    6f38:	08 95       	ret

00006f3a <__fp_split3>:
    6f3a:	57 fd       	sbrc	r21, 7
    6f3c:	90 58       	subi	r25, 0x80	; 128
    6f3e:	44 0f       	add	r20, r20
    6f40:	55 1f       	adc	r21, r21
    6f42:	59 f0       	breq	.+22     	; 0x6f5a <__fp_splitA+0x10>
    6f44:	5f 3f       	cpi	r21, 0xFF	; 255
    6f46:	71 f0       	breq	.+28     	; 0x6f64 <__fp_splitA+0x1a>
    6f48:	47 95       	ror	r20

00006f4a <__fp_splitA>:
    6f4a:	88 0f       	add	r24, r24
    6f4c:	97 fb       	bst	r25, 7
    6f4e:	99 1f       	adc	r25, r25
    6f50:	61 f0       	breq	.+24     	; 0x6f6a <__fp_splitA+0x20>
    6f52:	9f 3f       	cpi	r25, 0xFF	; 255
    6f54:	79 f0       	breq	.+30     	; 0x6f74 <__fp_splitA+0x2a>
    6f56:	87 95       	ror	r24
    6f58:	08 95       	ret
    6f5a:	12 16       	cp	r1, r18
    6f5c:	13 06       	cpc	r1, r19
    6f5e:	14 06       	cpc	r1, r20
    6f60:	55 1f       	adc	r21, r21
    6f62:	f2 cf       	rjmp	.-28     	; 0x6f48 <__fp_split3+0xe>
    6f64:	46 95       	lsr	r20
    6f66:	f1 df       	rcall	.-30     	; 0x6f4a <__fp_splitA>
    6f68:	08 c0       	rjmp	.+16     	; 0x6f7a <__fp_splitA+0x30>
    6f6a:	16 16       	cp	r1, r22
    6f6c:	17 06       	cpc	r1, r23
    6f6e:	18 06       	cpc	r1, r24
    6f70:	99 1f       	adc	r25, r25
    6f72:	f1 cf       	rjmp	.-30     	; 0x6f56 <__fp_splitA+0xc>
    6f74:	86 95       	lsr	r24
    6f76:	71 05       	cpc	r23, r1
    6f78:	61 05       	cpc	r22, r1
    6f7a:	08 94       	sec
    6f7c:	08 95       	ret

00006f7e <__fp_zero>:
    6f7e:	e8 94       	clt

00006f80 <__fp_szero>:
    6f80:	bb 27       	eor	r27, r27
    6f82:	66 27       	eor	r22, r22
    6f84:	77 27       	eor	r23, r23
    6f86:	cb 01       	movw	r24, r22
    6f88:	97 f9       	bld	r25, 7
    6f8a:	08 95       	ret

00006f8c <__cxa_pure_virtual>:
    6f8c:	0e 94 50 42 	call	0x84a0	; 0x84a0 <abort>

00006f90 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    6f90:	1f 92       	push	r1
    6f92:	0f 92       	push	r0
    6f94:	0f b6       	in	r0, 0x3f	; 63
    6f96:	0f 92       	push	r0
    6f98:	11 24       	eor	r1, r1
    6f9a:	2f 93       	push	r18
    6f9c:	8f 93       	push	r24
    6f9e:	9f 93       	push	r25
    6fa0:	ef 93       	push	r30
    6fa2:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    6fa4:	e0 91 2e 0d 	lds	r30, 0x0D2E	; 0x800d2e <Serial+0x10>
    6fa8:	f0 91 2f 0d 	lds	r31, 0x0D2F	; 0x800d2f <Serial+0x11>
    6fac:	80 81       	ld	r24, Z
    6fae:	e0 91 34 0d 	lds	r30, 0x0D34	; 0x800d34 <Serial+0x16>
    6fb2:	f0 91 35 0d 	lds	r31, 0x0D35	; 0x800d35 <Serial+0x17>
    6fb6:	82 fd       	sbrc	r24, 2
    6fb8:	12 c0       	rjmp	.+36     	; 0x6fde <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    6fba:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    6fbc:	80 91 37 0d 	lds	r24, 0x0D37	; 0x800d37 <Serial+0x19>
    6fc0:	8f 5f       	subi	r24, 0xFF	; 255
    6fc2:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    6fc4:	20 91 38 0d 	lds	r18, 0x0D38	; 0x800d38 <Serial+0x1a>
    6fc8:	82 17       	cp	r24, r18
    6fca:	51 f0       	breq	.+20     	; 0x6fe0 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    6fcc:	e0 91 37 0d 	lds	r30, 0x0D37	; 0x800d37 <Serial+0x19>
    6fd0:	f0 e0       	ldi	r31, 0x00	; 0
    6fd2:	e2 5e       	subi	r30, 0xE2	; 226
    6fd4:	f2 4f       	sbci	r31, 0xF2	; 242
    6fd6:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    6fd8:	80 93 37 0d 	sts	0x0D37, r24	; 0x800d37 <Serial+0x19>
    6fdc:	01 c0       	rjmp	.+2      	; 0x6fe0 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    6fde:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    6fe0:	ff 91       	pop	r31
    6fe2:	ef 91       	pop	r30
    6fe4:	9f 91       	pop	r25
    6fe6:	8f 91       	pop	r24
    6fe8:	2f 91       	pop	r18
    6fea:	0f 90       	pop	r0
    6fec:	0f be       	out	0x3f, r0	; 63
    6fee:	0f 90       	pop	r0
    6ff0:	1f 90       	pop	r1
    6ff2:	18 95       	reti

00006ff4 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    6ff4:	1f 92       	push	r1
    6ff6:	0f 92       	push	r0
    6ff8:	0f b6       	in	r0, 0x3f	; 63
    6ffa:	0f 92       	push	r0
    6ffc:	11 24       	eor	r1, r1
    6ffe:	2f 93       	push	r18
    7000:	3f 93       	push	r19
    7002:	4f 93       	push	r20
    7004:	5f 93       	push	r21
    7006:	6f 93       	push	r22
    7008:	7f 93       	push	r23
    700a:	8f 93       	push	r24
    700c:	9f 93       	push	r25
    700e:	af 93       	push	r26
    7010:	bf 93       	push	r27
    7012:	ef 93       	push	r30
    7014:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    7016:	8e e1       	ldi	r24, 0x1E	; 30
    7018:	9d e0       	ldi	r25, 0x0D	; 13
    701a:	2e d7       	rcall	.+3676   	; 0x7e78 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    701c:	ff 91       	pop	r31
    701e:	ef 91       	pop	r30
    7020:	bf 91       	pop	r27
    7022:	af 91       	pop	r26
    7024:	9f 91       	pop	r25
    7026:	8f 91       	pop	r24
    7028:	7f 91       	pop	r23
    702a:	6f 91       	pop	r22
    702c:	5f 91       	pop	r21
    702e:	4f 91       	pop	r20
    7030:	3f 91       	pop	r19
    7032:	2f 91       	pop	r18
    7034:	0f 90       	pop	r0
    7036:	0f be       	out	0x3f, r0	; 63
    7038:	0f 90       	pop	r0
    703a:	1f 90       	pop	r1
    703c:	18 95       	reti

0000703e <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    703e:	8e e1       	ldi	r24, 0x1E	; 30
    7040:	9d e0       	ldi	r25, 0x0D	; 13
    7042:	d0 d6       	rcall	.+3488   	; 0x7de4 <_ZN14HardwareSerial9availableEv>
    7044:	21 e0       	ldi	r18, 0x01	; 1
    7046:	89 2b       	or	r24, r25
    7048:	09 f4       	brne	.+2      	; 0x704c <_Z17Serial0_availablev+0xe>
    704a:	20 e0       	ldi	r18, 0x00	; 0
}
    704c:	82 2f       	mov	r24, r18
    704e:	08 95       	ret

00007050 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    7050:	ee e1       	ldi	r30, 0x1E	; 30
    7052:	fd e0       	ldi	r31, 0x0D	; 13
    7054:	13 82       	std	Z+3, r1	; 0x03
    7056:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    7058:	88 ee       	ldi	r24, 0xE8	; 232
    705a:	93 e0       	ldi	r25, 0x03	; 3
    705c:	a0 e0       	ldi	r26, 0x00	; 0
    705e:	b0 e0       	ldi	r27, 0x00	; 0
    7060:	84 83       	std	Z+4, r24	; 0x04
    7062:	95 83       	std	Z+5, r25	; 0x05
    7064:	a6 83       	std	Z+6, r26	; 0x06
    7066:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    7068:	82 e7       	ldi	r24, 0x72	; 114
    706a:	9a e0       	ldi	r25, 0x0A	; 10
    706c:	91 83       	std	Z+1, r25	; 0x01
    706e:	80 83       	st	Z, r24
    7070:	85 ec       	ldi	r24, 0xC5	; 197
    7072:	90 e0       	ldi	r25, 0x00	; 0
    7074:	95 87       	std	Z+13, r25	; 0x0d
    7076:	84 87       	std	Z+12, r24	; 0x0c
    7078:	84 ec       	ldi	r24, 0xC4	; 196
    707a:	90 e0       	ldi	r25, 0x00	; 0
    707c:	97 87       	std	Z+15, r25	; 0x0f
    707e:	86 87       	std	Z+14, r24	; 0x0e
    7080:	80 ec       	ldi	r24, 0xC0	; 192
    7082:	90 e0       	ldi	r25, 0x00	; 0
    7084:	91 8b       	std	Z+17, r25	; 0x11
    7086:	80 8b       	std	Z+16, r24	; 0x10
    7088:	81 ec       	ldi	r24, 0xC1	; 193
    708a:	90 e0       	ldi	r25, 0x00	; 0
    708c:	93 8b       	std	Z+19, r25	; 0x13
    708e:	82 8b       	std	Z+18, r24	; 0x12
    7090:	82 ec       	ldi	r24, 0xC2	; 194
    7092:	90 e0       	ldi	r25, 0x00	; 0
    7094:	95 8b       	std	Z+21, r25	; 0x15
    7096:	84 8b       	std	Z+20, r24	; 0x14
    7098:	86 ec       	ldi	r24, 0xC6	; 198
    709a:	90 e0       	ldi	r25, 0x00	; 0
    709c:	97 8b       	std	Z+23, r25	; 0x17
    709e:	86 8b       	std	Z+22, r24	; 0x16
    70a0:	11 8e       	std	Z+25, r1	; 0x19
    70a2:	12 8e       	std	Z+26, r1	; 0x1a
    70a4:	13 8e       	std	Z+27, r1	; 0x1b
    70a6:	14 8e       	std	Z+28, r1	; 0x1c
    70a8:	08 95       	ret

000070aa <_ZNK9IPAddress7printToER5Print>:
        // Too few dots (there must be 3 dots)
        return false;
    }
    _address.bytes[3] = acc;
    return true;
}
    70aa:	8f 92       	push	r8
    70ac:	9f 92       	push	r9
    70ae:	af 92       	push	r10
    70b0:	bf 92       	push	r11
    70b2:	cf 92       	push	r12
    70b4:	df 92       	push	r13
    70b6:	ef 92       	push	r14
    70b8:	ff 92       	push	r15
    70ba:	0f 93       	push	r16
    70bc:	1f 93       	push	r17
    70be:	cf 93       	push	r28
    70c0:	df 93       	push	r29
    70c2:	7c 01       	movw	r14, r24
    70c4:	8b 01       	movw	r16, r22
    70c6:	4c 01       	movw	r8, r24
    70c8:	82 e0       	ldi	r24, 0x02	; 2
    70ca:	88 0e       	add	r8, r24
    70cc:	91 1c       	adc	r9, r1
    70ce:	57 01       	movw	r10, r14
    70d0:	e5 e0       	ldi	r30, 0x05	; 5
    70d2:	ae 0e       	add	r10, r30
    70d4:	b1 1c       	adc	r11, r1
    70d6:	c0 e0       	ldi	r28, 0x00	; 0
    70d8:	d0 e0       	ldi	r29, 0x00	; 0
    70da:	f4 01       	movw	r30, r8
    70dc:	61 91       	ld	r22, Z+
    70de:	4f 01       	movw	r8, r30
    70e0:	4a e0       	ldi	r20, 0x0A	; 10
    70e2:	50 e0       	ldi	r21, 0x00	; 0
    70e4:	c8 01       	movw	r24, r16
    70e6:	4b d1       	rcall	.+662    	; 0x737e <_ZN5Print5printEhi>
    70e8:	6c 01       	movw	r12, r24
    70ea:	6e e2       	ldi	r22, 0x2E	; 46
    70ec:	c8 01       	movw	r24, r16
    70ee:	ba d0       	rcall	.+372    	; 0x7264 <_ZN5Print5printEc>
    70f0:	8c 0d       	add	r24, r12
    70f2:	9d 1d       	adc	r25, r13
    70f4:	c8 0f       	add	r28, r24
    70f6:	d9 1f       	adc	r29, r25
    70f8:	8a 14       	cp	r8, r10
    70fa:	9b 04       	cpc	r9, r11
    70fc:	71 f7       	brne	.-36     	; 0x70da <_ZNK9IPAddress7printToER5Print+0x30>
    70fe:	4a e0       	ldi	r20, 0x0A	; 10
    7100:	50 e0       	ldi	r21, 0x00	; 0
    7102:	f7 01       	movw	r30, r14
    7104:	65 81       	ldd	r22, Z+5	; 0x05
    7106:	c8 01       	movw	r24, r16
    7108:	3a d1       	rcall	.+628    	; 0x737e <_ZN5Print5printEhi>
    710a:	8c 0f       	add	r24, r28
    710c:	9d 1f       	adc	r25, r29
    710e:	df 91       	pop	r29
    7110:	cf 91       	pop	r28
    7112:	1f 91       	pop	r17
    7114:	0f 91       	pop	r16
    7116:	ff 90       	pop	r15
    7118:	ef 90       	pop	r14
    711a:	df 90       	pop	r13
    711c:	cf 90       	pop	r12
    711e:	bf 90       	pop	r11
    7120:	af 90       	pop	r10
    7122:	9f 90       	pop	r9
    7124:	8f 90       	pop	r8
    7126:	08 95       	ret

00007128 <_ZN9IPAddressC1Ev>:
    7128:	20 e6       	ldi	r18, 0x60	; 96
    712a:	3a e0       	ldi	r19, 0x0A	; 10
    712c:	fc 01       	movw	r30, r24
    712e:	31 83       	std	Z+1, r19	; 0x01
    7130:	20 83       	st	Z, r18
    7132:	12 82       	std	Z+2, r1	; 0x02
    7134:	13 82       	std	Z+3, r1	; 0x03
    7136:	14 82       	std	Z+4, r1	; 0x04
    7138:	15 82       	std	Z+5, r1	; 0x05
    713a:	08 95       	ret

0000713c <_ZN9IPAddressC1Ehhhh>:
    713c:	0f 93       	push	r16
    713e:	fc 01       	movw	r30, r24
    7140:	80 e6       	ldi	r24, 0x60	; 96
    7142:	9a e0       	ldi	r25, 0x0A	; 10
    7144:	91 83       	std	Z+1, r25	; 0x01
    7146:	80 83       	st	Z, r24
    7148:	62 83       	std	Z+2, r22	; 0x02
    714a:	43 83       	std	Z+3, r20	; 0x03
    714c:	24 83       	std	Z+4, r18	; 0x04
    714e:	05 83       	std	Z+5, r16	; 0x05
    7150:	0f 91       	pop	r16
    7152:	08 95       	ret

00007154 <_ZN9IPAddressaSEPKh>:

IPAddress& IPAddress::operator=(const uint8_t *address)
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
    7154:	dc 01       	movw	r26, r24
    7156:	12 96       	adiw	r26, 0x02	; 2
    7158:	24 e0       	ldi	r18, 0x04	; 4
    715a:	fb 01       	movw	r30, r22
    715c:	01 90       	ld	r0, Z+
    715e:	0d 92       	st	X+, r0
    7160:	2a 95       	dec	r18
    7162:	e1 f7       	brne	.-8      	; 0x715c <_ZN9IPAddressaSEPKh+0x8>
    return *this;
}
    7164:	08 95       	ret

00007166 <initVariant>:
    7166:	08 95       	ret

00007168 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    7168:	e4 d1       	rcall	.+968    	; 0x7532 <init>

	initVariant();
    716a:	fd df       	rcall	.-6      	; 0x7166 <initVariant>
    716c:	0e 94 a3 1b 	call	0x3746	; 0x3746 <setup>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    7170:	cf e2       	ldi	r28, 0x2F	; 47
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    7172:	df e3       	ldi	r29, 0x3F	; 63
    7174:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <loop>
#endif
	
	setup();
    
	for (;;) {
		loop();
    7178:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
    717a:	e1 f3       	breq	.-8      	; 0x7174 <main+0xc>
    717c:	70 d6       	rcall	.+3296   	; 0x7e5e <_Z14serialEventRunv>
    717e:	fa cf       	rjmp	.-12     	; 0x7174 <main+0xc>

00007180 <_ZN5Print5writeEPKhj>:
    7180:	cf 92       	push	r12
size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    7182:	df 92       	push	r13
    7184:	ef 92       	push	r14
    7186:	ff 92       	push	r15
    7188:	0f 93       	push	r16
    718a:	1f 93       	push	r17
    718c:	cf 93       	push	r28
    718e:	df 93       	push	r29
    7190:	6c 01       	movw	r12, r24
    7192:	7a 01       	movw	r14, r20
    7194:	8b 01       	movw	r16, r22
    7196:	c0 e0       	ldi	r28, 0x00	; 0
    7198:	d0 e0       	ldi	r29, 0x00	; 0
    719a:	ce 15       	cp	r28, r14
    719c:	df 05       	cpc	r29, r15
    719e:	81 f0       	breq	.+32     	; 0x71c0 <_ZN5Print5writeEPKhj+0x40>
    71a0:	d8 01       	movw	r26, r16
    71a2:	6d 91       	ld	r22, X+
    71a4:	8d 01       	movw	r16, r26
    71a6:	d6 01       	movw	r26, r12
    71a8:	ed 91       	ld	r30, X+
    71aa:	fc 91       	ld	r31, X
    71ac:	01 90       	ld	r0, Z+
    71ae:	f0 81       	ld	r31, Z
    71b0:	e0 2d       	mov	r30, r0
    71b2:	c6 01       	movw	r24, r12
    71b4:	09 95       	icall
    71b6:	89 2b       	or	r24, r25
    71b8:	11 f0       	breq	.+4      	; 0x71be <_ZN5Print5writeEPKhj+0x3e>
    71ba:	21 96       	adiw	r28, 0x01	; 1
    71bc:	ee cf       	rjmp	.-36     	; 0x719a <_ZN5Print5writeEPKhj+0x1a>
    71be:	7e 01       	movw	r14, r28
    71c0:	c7 01       	movw	r24, r14
    71c2:	df 91       	pop	r29
    71c4:	cf 91       	pop	r28
    71c6:	1f 91       	pop	r17
    71c8:	0f 91       	pop	r16
    71ca:	ff 90       	pop	r15
    71cc:	ef 90       	pop	r14
    71ce:	df 90       	pop	r13
    71d0:	cf 90       	pop	r12
    71d2:	08 95       	ret

000071d4 <_ZN5Print5writeEPKc>:
    71d4:	61 15       	cp	r22, r1
    71d6:	71 05       	cpc	r23, r1
    71d8:	79 f0       	breq	.+30     	; 0x71f8 <_ZN5Print5writeEPKc+0x24>
    71da:	fb 01       	movw	r30, r22
    71dc:	01 90       	ld	r0, Z+
    71de:	00 20       	and	r0, r0
    71e0:	e9 f7       	brne	.-6      	; 0x71dc <_ZN5Print5writeEPKc+0x8>
    71e2:	31 97       	sbiw	r30, 0x01	; 1
    71e4:	af 01       	movw	r20, r30
    71e6:	46 1b       	sub	r20, r22
    71e8:	57 0b       	sbc	r21, r23
    71ea:	dc 01       	movw	r26, r24
    71ec:	ed 91       	ld	r30, X+
    71ee:	fc 91       	ld	r31, X
    71f0:	02 80       	ldd	r0, Z+2	; 0x02
    71f2:	f3 81       	ldd	r31, Z+3	; 0x03
    71f4:	e0 2d       	mov	r30, r0
    71f6:	09 94       	ijmp
    71f8:	80 e0       	ldi	r24, 0x00	; 0
    71fa:	90 e0       	ldi	r25, 0x00	; 0
    71fc:	08 95       	ret

000071fe <_ZN5Print5printEPK19__FlashStringHelper>:
    71fe:	ef 92       	push	r14
    7200:	ff 92       	push	r15
    7202:	0f 93       	push	r16
    7204:	1f 93       	push	r17
    7206:	cf 93       	push	r28
    7208:	df 93       	push	r29
    720a:	8c 01       	movw	r16, r24
    720c:	7b 01       	movw	r14, r22
    720e:	c0 e0       	ldi	r28, 0x00	; 0
    7210:	d0 e0       	ldi	r29, 0x00	; 0
    7212:	f7 01       	movw	r30, r14
    7214:	ec 0f       	add	r30, r28
    7216:	fd 1f       	adc	r31, r29
    7218:	64 91       	lpm	r22, Z
    721a:	66 23       	and	r22, r22
    721c:	61 f0       	breq	.+24     	; 0x7236 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    721e:	d8 01       	movw	r26, r16
    7220:	ed 91       	ld	r30, X+
    7222:	fc 91       	ld	r31, X
    7224:	01 90       	ld	r0, Z+
    7226:	f0 81       	ld	r31, Z
    7228:	e0 2d       	mov	r30, r0
    722a:	c8 01       	movw	r24, r16
    722c:	09 95       	icall
    722e:	89 2b       	or	r24, r25
    7230:	11 f0       	breq	.+4      	; 0x7236 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    7232:	21 96       	adiw	r28, 0x01	; 1
    7234:	ee cf       	rjmp	.-36     	; 0x7212 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    7236:	ce 01       	movw	r24, r28
    7238:	df 91       	pop	r29
    723a:	cf 91       	pop	r28
    723c:	1f 91       	pop	r17
    723e:	0f 91       	pop	r16
    7240:	ff 90       	pop	r15
    7242:	ef 90       	pop	r14
    7244:	08 95       	ret

00007246 <_ZN5Print5printERK6String>:
    7246:	db 01       	movw	r26, r22
    7248:	14 96       	adiw	r26, 0x04	; 4
    724a:	4d 91       	ld	r20, X+
    724c:	5c 91       	ld	r21, X
    724e:	15 97       	sbiw	r26, 0x05	; 5
    7250:	6d 91       	ld	r22, X+
    7252:	7c 91       	ld	r23, X
    7254:	dc 01       	movw	r26, r24
    7256:	ed 91       	ld	r30, X+
    7258:	fc 91       	ld	r31, X
    725a:	02 80       	ldd	r0, Z+2	; 0x02
    725c:	f3 81       	ldd	r31, Z+3	; 0x03
    725e:	e0 2d       	mov	r30, r0
    7260:	09 94       	ijmp

00007262 <_ZN5Print5printEPKc>:
    7262:	b8 cf       	rjmp	.-144    	; 0x71d4 <_ZN5Print5writeEPKc>

00007264 <_ZN5Print5printEc>:
    7264:	dc 01       	movw	r26, r24
    7266:	ed 91       	ld	r30, X+
    7268:	fc 91       	ld	r31, X
    726a:	01 90       	ld	r0, Z+
    726c:	f0 81       	ld	r31, Z
    726e:	e0 2d       	mov	r30, r0
    7270:	09 94       	ijmp

00007272 <_ZN5Print7printlnEv>:
    7272:	6a e1       	ldi	r22, 0x1A	; 26
    7274:	73 e0       	ldi	r23, 0x03	; 3
    7276:	ae cf       	rjmp	.-164    	; 0x71d4 <_ZN5Print5writeEPKc>

00007278 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    7278:	0f 93       	push	r16
    727a:	1f 93       	push	r17
    727c:	cf 93       	push	r28
    727e:	df 93       	push	r29
    7280:	ec 01       	movw	r28, r24
    7282:	bd df       	rcall	.-134    	; 0x71fe <_ZN5Print5printEPK19__FlashStringHelper>
    7284:	8c 01       	movw	r16, r24
    7286:	ce 01       	movw	r24, r28
    7288:	f4 df       	rcall	.-24     	; 0x7272 <_ZN5Print7printlnEv>
    728a:	80 0f       	add	r24, r16
    728c:	91 1f       	adc	r25, r17
    728e:	df 91       	pop	r29
    7290:	cf 91       	pop	r28
    7292:	1f 91       	pop	r17
    7294:	0f 91       	pop	r16
    7296:	08 95       	ret

00007298 <_ZN5Print7printlnERK6String>:
    7298:	0f 93       	push	r16
    729a:	1f 93       	push	r17
    729c:	cf 93       	push	r28
    729e:	df 93       	push	r29
    72a0:	ec 01       	movw	r28, r24
    72a2:	d1 df       	rcall	.-94     	; 0x7246 <_ZN5Print5printERK6String>
    72a4:	8c 01       	movw	r16, r24
    72a6:	ce 01       	movw	r24, r28
    72a8:	e4 df       	rcall	.-56     	; 0x7272 <_ZN5Print7printlnEv>
    72aa:	80 0f       	add	r24, r16
    72ac:	91 1f       	adc	r25, r17
    72ae:	df 91       	pop	r29
    72b0:	cf 91       	pop	r28
    72b2:	1f 91       	pop	r17
    72b4:	0f 91       	pop	r16
    72b6:	08 95       	ret

000072b8 <_ZN5Print7printlnEPKc>:
    72b8:	0f 93       	push	r16
    72ba:	1f 93       	push	r17
    72bc:	cf 93       	push	r28
    72be:	df 93       	push	r29
    72c0:	ec 01       	movw	r28, r24
    72c2:	88 df       	rcall	.-240    	; 0x71d4 <_ZN5Print5writeEPKc>
    72c4:	8c 01       	movw	r16, r24
    72c6:	ce 01       	movw	r24, r28
    72c8:	d4 df       	rcall	.-88     	; 0x7272 <_ZN5Print7printlnEv>
    72ca:	80 0f       	add	r24, r16
    72cc:	91 1f       	adc	r25, r17
    72ce:	df 91       	pop	r29
    72d0:	cf 91       	pop	r28
    72d2:	1f 91       	pop	r17
    72d4:	0f 91       	pop	r16
    72d6:	08 95       	ret

000072d8 <_ZN5Print11printNumberEmh>:
    72d8:	8f 92       	push	r8
    72da:	9f 92       	push	r9
    72dc:	af 92       	push	r10
    72de:	bf 92       	push	r11
    72e0:	ef 92       	push	r14
    72e2:	ff 92       	push	r15
    72e4:	0f 93       	push	r16
    72e6:	1f 93       	push	r17
    72e8:	cf 93       	push	r28
    72ea:	df 93       	push	r29
    72ec:	cd b7       	in	r28, 0x3d	; 61
    72ee:	de b7       	in	r29, 0x3e	; 62
    72f0:	a1 97       	sbiw	r28, 0x21	; 33
    72f2:	0f b6       	in	r0, 0x3f	; 63
    72f4:	f8 94       	cli
    72f6:	de bf       	out	0x3e, r29	; 62
    72f8:	0f be       	out	0x3f, r0	; 63
    72fa:	cd bf       	out	0x3d, r28	; 61
    72fc:	7c 01       	movw	r14, r24
    72fe:	fa 01       	movw	r30, r20
    7300:	cb 01       	movw	r24, r22
    7302:	19 a2       	std	Y+33, r1	; 0x21
    7304:	22 30       	cpi	r18, 0x02	; 2
    7306:	08 f4       	brcc	.+2      	; 0x730a <_ZN5Print11printNumberEmh+0x32>
    7308:	2a e0       	ldi	r18, 0x0A	; 10
    730a:	8e 01       	movw	r16, r28
    730c:	0f 5d       	subi	r16, 0xDF	; 223
    730e:	1f 4f       	sbci	r17, 0xFF	; 255
    7310:	82 2e       	mov	r8, r18
    7312:	91 2c       	mov	r9, r1
    7314:	a1 2c       	mov	r10, r1
    7316:	b1 2c       	mov	r11, r1
    7318:	bf 01       	movw	r22, r30
    731a:	a5 01       	movw	r20, r10
    731c:	94 01       	movw	r18, r8
    731e:	5c d6       	rcall	.+3256   	; 0x7fd8 <__udivmodsi4>
    7320:	f9 01       	movw	r30, r18
    7322:	ca 01       	movw	r24, r20
    7324:	01 50       	subi	r16, 0x01	; 1
    7326:	11 09       	sbc	r17, r1
    7328:	6a 30       	cpi	r22, 0x0A	; 10
    732a:	10 f4       	brcc	.+4      	; 0x7330 <_ZN5Print11printNumberEmh+0x58>
    732c:	60 5d       	subi	r22, 0xD0	; 208
    732e:	01 c0       	rjmp	.+2      	; 0x7332 <_ZN5Print11printNumberEmh+0x5a>
    7330:	69 5c       	subi	r22, 0xC9	; 201
    7332:	d8 01       	movw	r26, r16
    7334:	6c 93       	st	X, r22
    7336:	23 2b       	or	r18, r19
    7338:	24 2b       	or	r18, r20
    733a:	25 2b       	or	r18, r21
    733c:	69 f7       	brne	.-38     	; 0x7318 <_ZN5Print11printNumberEmh+0x40>
    733e:	b8 01       	movw	r22, r16
    7340:	c7 01       	movw	r24, r14
    7342:	48 df       	rcall	.-368    	; 0x71d4 <_ZN5Print5writeEPKc>
    7344:	a1 96       	adiw	r28, 0x21	; 33
    7346:	0f b6       	in	r0, 0x3f	; 63
    7348:	f8 94       	cli
    734a:	de bf       	out	0x3e, r29	; 62
    734c:	0f be       	out	0x3f, r0	; 63
    734e:	cd bf       	out	0x3d, r28	; 61
    7350:	df 91       	pop	r29
    7352:	cf 91       	pop	r28
    7354:	1f 91       	pop	r17
    7356:	0f 91       	pop	r16
    7358:	ff 90       	pop	r15
    735a:	ef 90       	pop	r14
    735c:	bf 90       	pop	r11
    735e:	af 90       	pop	r10
    7360:	9f 90       	pop	r9
    7362:	8f 90       	pop	r8
    7364:	08 95       	ret

00007366 <_ZN5Print5printEmi>:
    7366:	21 15       	cp	r18, r1
    7368:	31 05       	cpc	r19, r1
    736a:	41 f4       	brne	.+16     	; 0x737c <_ZN5Print5printEmi+0x16>
    736c:	dc 01       	movw	r26, r24
    736e:	ed 91       	ld	r30, X+
    7370:	fc 91       	ld	r31, X
    7372:	01 90       	ld	r0, Z+
    7374:	f0 81       	ld	r31, Z
    7376:	e0 2d       	mov	r30, r0
    7378:	64 2f       	mov	r22, r20
    737a:	09 94       	ijmp
    737c:	ad cf       	rjmp	.-166    	; 0x72d8 <_ZN5Print11printNumberEmh>

0000737e <_ZN5Print5printEhi>:
    737e:	9a 01       	movw	r18, r20
    7380:	46 2f       	mov	r20, r22
    7382:	50 e0       	ldi	r21, 0x00	; 0
    7384:	60 e0       	ldi	r22, 0x00	; 0
    7386:	70 e0       	ldi	r23, 0x00	; 0
    7388:	ee cf       	rjmp	.-36     	; 0x7366 <_ZN5Print5printEmi>

0000738a <_ZN5Print5printEji>:
    738a:	9a 01       	movw	r18, r20
    738c:	ab 01       	movw	r20, r22
    738e:	60 e0       	ldi	r22, 0x00	; 0
    7390:	70 e0       	ldi	r23, 0x00	; 0
    7392:	e9 cf       	rjmp	.-46     	; 0x7366 <_ZN5Print5printEmi>

00007394 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    7394:	0f 93       	push	r16
    7396:	1f 93       	push	r17
    7398:	cf 93       	push	r28
    739a:	df 93       	push	r29
    739c:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    739e:	e3 df       	rcall	.-58     	; 0x7366 <_ZN5Print5printEmi>
    73a0:	8c 01       	movw	r16, r24
  n += println();
    73a2:	ce 01       	movw	r24, r28
    73a4:	66 df       	rcall	.-308    	; 0x7272 <_ZN5Print7printlnEv>
  return n;
}
    73a6:	80 0f       	add	r24, r16
    73a8:	91 1f       	adc	r25, r17
    73aa:	df 91       	pop	r29
    73ac:	cf 91       	pop	r28
    73ae:	1f 91       	pop	r17
    73b0:	0f 91       	pop	r16
    73b2:	08 95       	ret

000073b4 <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    73b4:	1f 92       	push	r1
    73b6:	0f 92       	push	r0
    73b8:	0f b6       	in	r0, 0x3f	; 63
    73ba:	0f 92       	push	r0
    73bc:	11 24       	eor	r1, r1
    73be:	2f 93       	push	r18
    73c0:	3f 93       	push	r19
    73c2:	8f 93       	push	r24
    73c4:	9f 93       	push	r25
    73c6:	af 93       	push	r26
    73c8:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    73ca:	80 91 bc 0d 	lds	r24, 0x0DBC	; 0x800dbc <timer0_millis>
    73ce:	90 91 bd 0d 	lds	r25, 0x0DBD	; 0x800dbd <timer0_millis+0x1>
    73d2:	a0 91 be 0d 	lds	r26, 0x0DBE	; 0x800dbe <timer0_millis+0x2>
    73d6:	b0 91 bf 0d 	lds	r27, 0x0DBF	; 0x800dbf <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    73da:	30 91 bb 0d 	lds	r19, 0x0DBB	; 0x800dbb <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    73de:	23 e0       	ldi	r18, 0x03	; 3
    73e0:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    73e2:	2d 37       	cpi	r18, 0x7D	; 125
    73e4:	20 f4       	brcc	.+8      	; 0x73ee <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    73e6:	01 96       	adiw	r24, 0x01	; 1
    73e8:	a1 1d       	adc	r26, r1
    73ea:	b1 1d       	adc	r27, r1
    73ec:	05 c0       	rjmp	.+10     	; 0x73f8 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    73ee:	26 e8       	ldi	r18, 0x86	; 134
    73f0:	23 0f       	add	r18, r19
		m += 1;
    73f2:	02 96       	adiw	r24, 0x02	; 2
    73f4:	a1 1d       	adc	r26, r1
    73f6:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    73f8:	20 93 bb 0d 	sts	0x0DBB, r18	; 0x800dbb <timer0_fract>
	timer0_millis = m;
    73fc:	80 93 bc 0d 	sts	0x0DBC, r24	; 0x800dbc <timer0_millis>
    7400:	90 93 bd 0d 	sts	0x0DBD, r25	; 0x800dbd <timer0_millis+0x1>
    7404:	a0 93 be 0d 	sts	0x0DBE, r26	; 0x800dbe <timer0_millis+0x2>
    7408:	b0 93 bf 0d 	sts	0x0DBF, r27	; 0x800dbf <timer0_millis+0x3>
	timer0_overflow_count++;
    740c:	80 91 c0 0d 	lds	r24, 0x0DC0	; 0x800dc0 <timer0_overflow_count>
    7410:	90 91 c1 0d 	lds	r25, 0x0DC1	; 0x800dc1 <timer0_overflow_count+0x1>
    7414:	a0 91 c2 0d 	lds	r26, 0x0DC2	; 0x800dc2 <timer0_overflow_count+0x2>
    7418:	b0 91 c3 0d 	lds	r27, 0x0DC3	; 0x800dc3 <timer0_overflow_count+0x3>
    741c:	01 96       	adiw	r24, 0x01	; 1
    741e:	a1 1d       	adc	r26, r1
    7420:	b1 1d       	adc	r27, r1
    7422:	80 93 c0 0d 	sts	0x0DC0, r24	; 0x800dc0 <timer0_overflow_count>
    7426:	90 93 c1 0d 	sts	0x0DC1, r25	; 0x800dc1 <timer0_overflow_count+0x1>
    742a:	a0 93 c2 0d 	sts	0x0DC2, r26	; 0x800dc2 <timer0_overflow_count+0x2>
    742e:	b0 93 c3 0d 	sts	0x0DC3, r27	; 0x800dc3 <timer0_overflow_count+0x3>
}
    7432:	bf 91       	pop	r27
    7434:	af 91       	pop	r26
    7436:	9f 91       	pop	r25
    7438:	8f 91       	pop	r24
    743a:	3f 91       	pop	r19
    743c:	2f 91       	pop	r18
    743e:	0f 90       	pop	r0
    7440:	0f be       	out	0x3f, r0	; 63
    7442:	0f 90       	pop	r0
    7444:	1f 90       	pop	r1
    7446:	18 95       	reti

00007448 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    7448:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    744a:	f8 94       	cli
	m = timer0_millis;
    744c:	60 91 bc 0d 	lds	r22, 0x0DBC	; 0x800dbc <timer0_millis>
    7450:	70 91 bd 0d 	lds	r23, 0x0DBD	; 0x800dbd <timer0_millis+0x1>
    7454:	80 91 be 0d 	lds	r24, 0x0DBE	; 0x800dbe <timer0_millis+0x2>
    7458:	90 91 bf 0d 	lds	r25, 0x0DBF	; 0x800dbf <timer0_millis+0x3>
	SREG = oldSREG;
    745c:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    745e:	08 95       	ret

00007460 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    7460:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    7462:	f8 94       	cli
	m = timer0_overflow_count;
    7464:	80 91 c0 0d 	lds	r24, 0x0DC0	; 0x800dc0 <timer0_overflow_count>
    7468:	90 91 c1 0d 	lds	r25, 0x0DC1	; 0x800dc1 <timer0_overflow_count+0x1>
    746c:	a0 91 c2 0d 	lds	r26, 0x0DC2	; 0x800dc2 <timer0_overflow_count+0x2>
    7470:	b0 91 c3 0d 	lds	r27, 0x0DC3	; 0x800dc3 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    7474:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    7476:	a8 9b       	sbis	0x15, 0	; 21
    7478:	05 c0       	rjmp	.+10     	; 0x7484 <micros+0x24>
    747a:	2f 3f       	cpi	r18, 0xFF	; 255
    747c:	19 f0       	breq	.+6      	; 0x7484 <micros+0x24>
		m++;
    747e:	01 96       	adiw	r24, 0x01	; 1
    7480:	a1 1d       	adc	r26, r1
    7482:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    7484:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    7486:	ba 2f       	mov	r27, r26
    7488:	a9 2f       	mov	r26, r25
    748a:	98 2f       	mov	r25, r24
    748c:	88 27       	eor	r24, r24
    748e:	82 0f       	add	r24, r18
    7490:	91 1d       	adc	r25, r1
    7492:	a1 1d       	adc	r26, r1
    7494:	b1 1d       	adc	r27, r1
    7496:	bc 01       	movw	r22, r24
    7498:	cd 01       	movw	r24, r26
    749a:	42 e0       	ldi	r20, 0x02	; 2
    749c:	66 0f       	add	r22, r22
    749e:	77 1f       	adc	r23, r23
    74a0:	88 1f       	adc	r24, r24
    74a2:	99 1f       	adc	r25, r25
    74a4:	4a 95       	dec	r20
    74a6:	d1 f7       	brne	.-12     	; 0x749c <micros+0x3c>
}
    74a8:	08 95       	ret

000074aa <delay>:

void delay(unsigned long ms)
{
    74aa:	8f 92       	push	r8
    74ac:	9f 92       	push	r9
    74ae:	af 92       	push	r10
    74b0:	bf 92       	push	r11
    74b2:	cf 92       	push	r12
    74b4:	df 92       	push	r13
    74b6:	ef 92       	push	r14
    74b8:	ff 92       	push	r15
    74ba:	6b 01       	movw	r12, r22
    74bc:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    74be:	d0 df       	rcall	.-96     	; 0x7460 <micros>
    74c0:	4b 01       	movw	r8, r22
    74c2:	5c 01       	movw	r10, r24

	while (ms > 0) {
    74c4:	c1 14       	cp	r12, r1
    74c6:	d1 04       	cpc	r13, r1
    74c8:	e1 04       	cpc	r14, r1
    74ca:	f1 04       	cpc	r15, r1
		yield();
    74cc:	f1 f0       	breq	.+60     	; 0x750a <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    74ce:	63 d5       	rcall	.+2758   	; 0x7f96 <yield>
    74d0:	c7 df       	rcall	.-114    	; 0x7460 <micros>
    74d2:	dc 01       	movw	r26, r24
    74d4:	cb 01       	movw	r24, r22
    74d6:	88 19       	sub	r24, r8
    74d8:	99 09       	sbc	r25, r9
    74da:	aa 09       	sbc	r26, r10
    74dc:	bb 09       	sbc	r27, r11
    74de:	88 3e       	cpi	r24, 0xE8	; 232
    74e0:	93 40       	sbci	r25, 0x03	; 3
    74e2:	a1 05       	cpc	r26, r1
    74e4:	b1 05       	cpc	r27, r1
    74e6:	70 f3       	brcs	.-36     	; 0x74c4 <delay+0x1a>
			ms--;
    74e8:	21 e0       	ldi	r18, 0x01	; 1
    74ea:	c2 1a       	sub	r12, r18
    74ec:	d1 08       	sbc	r13, r1
    74ee:	e1 08       	sbc	r14, r1
    74f0:	f1 08       	sbc	r15, r1
			start += 1000;
    74f2:	88 ee       	ldi	r24, 0xE8	; 232
    74f4:	88 0e       	add	r8, r24
    74f6:	83 e0       	ldi	r24, 0x03	; 3
    74f8:	98 1e       	adc	r9, r24
    74fa:	a1 1c       	adc	r10, r1
    74fc:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    74fe:	c1 14       	cp	r12, r1
    7500:	d1 04       	cpc	r13, r1
    7502:	e1 04       	cpc	r14, r1
    7504:	f1 04       	cpc	r15, r1
    7506:	21 f7       	brne	.-56     	; 0x74d0 <delay+0x26>
    7508:	dd cf       	rjmp	.-70     	; 0x74c4 <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    750a:	ff 90       	pop	r15
    750c:	ef 90       	pop	r14
    750e:	df 90       	pop	r13
    7510:	cf 90       	pop	r12
    7512:	bf 90       	pop	r11
    7514:	af 90       	pop	r10
    7516:	9f 90       	pop	r9
    7518:	8f 90       	pop	r8
    751a:	08 95       	ret

0000751c <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    751c:	82 30       	cpi	r24, 0x02	; 2
    751e:	91 05       	cpc	r25, r1
    7520:	38 f0       	brcs	.+14     	; 0x7530 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    7522:	88 0f       	add	r24, r24
    7524:	99 1f       	adc	r25, r25
    7526:	88 0f       	add	r24, r24
    7528:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    752a:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    752c:	01 97       	sbiw	r24, 0x01	; 1
    752e:	f1 f7       	brne	.-4      	; 0x752c <delayMicroseconds+0x10>
    7530:	08 95       	ret

00007532 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    7532:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    7534:	84 b5       	in	r24, 0x24	; 36
    7536:	82 60       	ori	r24, 0x02	; 2
    7538:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    753a:	84 b5       	in	r24, 0x24	; 36
    753c:	81 60       	ori	r24, 0x01	; 1
    753e:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    7540:	85 b5       	in	r24, 0x25	; 37
    7542:	82 60       	ori	r24, 0x02	; 2
    7544:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    7546:	85 b5       	in	r24, 0x25	; 37
    7548:	81 60       	ori	r24, 0x01	; 1
    754a:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    754c:	ee e6       	ldi	r30, 0x6E	; 110
    754e:	f0 e0       	ldi	r31, 0x00	; 0
    7550:	80 81       	ld	r24, Z
    7552:	81 60       	ori	r24, 0x01	; 1
    7554:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    7556:	e1 e8       	ldi	r30, 0x81	; 129
    7558:	f0 e0       	ldi	r31, 0x00	; 0
    755a:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    755c:	80 81       	ld	r24, Z
    755e:	82 60       	ori	r24, 0x02	; 2
    7560:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    7562:	80 81       	ld	r24, Z
    7564:	81 60       	ori	r24, 0x01	; 1
    7566:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    7568:	e0 e8       	ldi	r30, 0x80	; 128
    756a:	f0 e0       	ldi	r31, 0x00	; 0
    756c:	80 81       	ld	r24, Z
    756e:	81 60       	ori	r24, 0x01	; 1
    7570:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    7572:	e1 eb       	ldi	r30, 0xB1	; 177
    7574:	f0 e0       	ldi	r31, 0x00	; 0
    7576:	80 81       	ld	r24, Z
    7578:	84 60       	ori	r24, 0x04	; 4
    757a:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    757c:	e0 eb       	ldi	r30, 0xB0	; 176
    757e:	f0 e0       	ldi	r31, 0x00	; 0
    7580:	80 81       	ld	r24, Z
    7582:	81 60       	ori	r24, 0x01	; 1
    7584:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    7586:	ea e7       	ldi	r30, 0x7A	; 122
    7588:	f0 e0       	ldi	r31, 0x00	; 0
    758a:	80 81       	ld	r24, Z
    758c:	84 60       	ori	r24, 0x04	; 4
    758e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    7590:	80 81       	ld	r24, Z
    7592:	82 60       	ori	r24, 0x02	; 2
    7594:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    7596:	80 81       	ld	r24, Z
    7598:	81 60       	ori	r24, 0x01	; 1
    759a:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    759c:	80 81       	ld	r24, Z
    759e:	80 68       	ori	r24, 0x80	; 128
    75a0:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    75a2:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    75a6:	08 95       	ret

000075a8 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    75a8:	83 30       	cpi	r24, 0x03	; 3
    75aa:	81 f0       	breq	.+32     	; 0x75cc <turnOffPWM+0x24>
    75ac:	28 f4       	brcc	.+10     	; 0x75b8 <turnOffPWM+0x10>
    75ae:	81 30       	cpi	r24, 0x01	; 1
    75b0:	99 f0       	breq	.+38     	; 0x75d8 <turnOffPWM+0x30>
    75b2:	82 30       	cpi	r24, 0x02	; 2
    75b4:	a1 f0       	breq	.+40     	; 0x75de <turnOffPWM+0x36>
    75b6:	08 95       	ret
    75b8:	87 30       	cpi	r24, 0x07	; 7
    75ba:	a9 f0       	breq	.+42     	; 0x75e6 <turnOffPWM+0x3e>
    75bc:	88 30       	cpi	r24, 0x08	; 8
    75be:	b9 f0       	breq	.+46     	; 0x75ee <turnOffPWM+0x46>
    75c0:	84 30       	cpi	r24, 0x04	; 4
    75c2:	d1 f4       	brne	.+52     	; 0x75f8 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    75c4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    75c8:	8f 7d       	andi	r24, 0xDF	; 223
    75ca:	03 c0       	rjmp	.+6      	; 0x75d2 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    75cc:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    75d0:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    75d2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    75d6:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    75d8:	84 b5       	in	r24, 0x24	; 36
    75da:	8f 77       	andi	r24, 0x7F	; 127
    75dc:	02 c0       	rjmp	.+4      	; 0x75e2 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    75de:	84 b5       	in	r24, 0x24	; 36
    75e0:	8f 7d       	andi	r24, 0xDF	; 223
    75e2:	84 bd       	out	0x24, r24	; 36
    75e4:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    75e6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    75ea:	8f 77       	andi	r24, 0x7F	; 127
    75ec:	03 c0       	rjmp	.+6      	; 0x75f4 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    75ee:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    75f2:	8f 7d       	andi	r24, 0xDF	; 223
    75f4:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    75f8:	08 95       	ret

000075fa <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    75fa:	cf 93       	push	r28
    75fc:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    75fe:	90 e0       	ldi	r25, 0x00	; 0
    7600:	fc 01       	movw	r30, r24
    7602:	ec 5a       	subi	r30, 0xAC	; 172
    7604:	fd 4f       	sbci	r31, 0xFD	; 253
    7606:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    7608:	fc 01       	movw	r30, r24
    760a:	ec 58       	subi	r30, 0x8C	; 140
    760c:	fd 4f       	sbci	r31, 0xFD	; 253
    760e:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    7610:	88 23       	and	r24, r24
    7612:	61 f1       	breq	.+88     	; 0x766c <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    7614:	90 e0       	ldi	r25, 0x00	; 0
    7616:	88 0f       	add	r24, r24
    7618:	99 1f       	adc	r25, r25
    761a:	fc 01       	movw	r30, r24
    761c:	e8 55       	subi	r30, 0x58	; 88
    761e:	fd 4f       	sbci	r31, 0xFD	; 253
    7620:	c5 91       	lpm	r28, Z+
    7622:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    7624:	fc 01       	movw	r30, r24
    7626:	e2 56       	subi	r30, 0x62	; 98
    7628:	fd 4f       	sbci	r31, 0xFD	; 253
    762a:	a5 91       	lpm	r26, Z+
    762c:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    762e:	61 11       	cpse	r22, r1
    7630:	09 c0       	rjmp	.+18     	; 0x7644 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    7632:	9f b7       	in	r25, 0x3f	; 63
                cli();
    7634:	f8 94       	cli
		*reg &= ~bit;
    7636:	88 81       	ld	r24, Y
    7638:	20 95       	com	r18
    763a:	82 23       	and	r24, r18
    763c:	88 83       	st	Y, r24
		*out &= ~bit;
    763e:	ec 91       	ld	r30, X
    7640:	2e 23       	and	r18, r30
    7642:	0b c0       	rjmp	.+22     	; 0x765a <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    7644:	62 30       	cpi	r22, 0x02	; 2
    7646:	61 f4       	brne	.+24     	; 0x7660 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    7648:	9f b7       	in	r25, 0x3f	; 63
                cli();
    764a:	f8 94       	cli
		*reg &= ~bit;
    764c:	88 81       	ld	r24, Y
    764e:	32 2f       	mov	r19, r18
    7650:	30 95       	com	r19
    7652:	83 23       	and	r24, r19
    7654:	88 83       	st	Y, r24
		*out |= bit;
    7656:	ec 91       	ld	r30, X
    7658:	2e 2b       	or	r18, r30
    765a:	2c 93       	st	X, r18
		SREG = oldSREG;
    765c:	9f bf       	out	0x3f, r25	; 63
    765e:	06 c0       	rjmp	.+12     	; 0x766c <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    7660:	8f b7       	in	r24, 0x3f	; 63
                cli();
    7662:	f8 94       	cli
		*reg |= bit;
    7664:	e8 81       	ld	r30, Y
    7666:	2e 2b       	or	r18, r30
    7668:	28 83       	st	Y, r18
		SREG = oldSREG;
    766a:	8f bf       	out	0x3f, r24	; 63
	}
}
    766c:	df 91       	pop	r29
    766e:	cf 91       	pop	r28
    7670:	08 95       	ret

00007672 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    7672:	1f 93       	push	r17
    7674:	cf 93       	push	r28
    7676:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    7678:	28 2f       	mov	r18, r24
    767a:	30 e0       	ldi	r19, 0x00	; 0
    767c:	f9 01       	movw	r30, r18
    767e:	ec 5c       	subi	r30, 0xCC	; 204
    7680:	fd 4f       	sbci	r31, 0xFD	; 253
    7682:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    7684:	f9 01       	movw	r30, r18
    7686:	ec 5a       	subi	r30, 0xAC	; 172
    7688:	fd 4f       	sbci	r31, 0xFD	; 253
    768a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    768c:	f9 01       	movw	r30, r18
    768e:	ec 58       	subi	r30, 0x8C	; 140
    7690:	fd 4f       	sbci	r31, 0xFD	; 253
    7692:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    7694:	cc 23       	and	r28, r28
    7696:	b9 f0       	breq	.+46     	; 0x76c6 <digitalWrite+0x54>
    7698:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    769a:	81 11       	cpse	r24, r1
    769c:	85 df       	rcall	.-246    	; 0x75a8 <turnOffPWM>

	out = portOutputRegister(port);
    769e:	ec 2f       	mov	r30, r28
    76a0:	f0 e0       	ldi	r31, 0x00	; 0
    76a2:	ee 0f       	add	r30, r30
    76a4:	ff 1f       	adc	r31, r31
    76a6:	e2 56       	subi	r30, 0x62	; 98
    76a8:	fd 4f       	sbci	r31, 0xFD	; 253
    76aa:	a5 91       	lpm	r26, Z+
    76ac:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    76ae:	9f b7       	in	r25, 0x3f	; 63
	cli();
    76b0:	f8 94       	cli

	if (val == LOW) {
    76b2:	11 11       	cpse	r17, r1
    76b4:	04 c0       	rjmp	.+8      	; 0x76be <digitalWrite+0x4c>
		*out &= ~bit;
    76b6:	8c 91       	ld	r24, X
    76b8:	d0 95       	com	r29
    76ba:	d8 23       	and	r29, r24
    76bc:	02 c0       	rjmp	.+4      	; 0x76c2 <digitalWrite+0x50>
	} else {
		*out |= bit;
    76be:	ec 91       	ld	r30, X
    76c0:	de 2b       	or	r29, r30
    76c2:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    76c4:	9f bf       	out	0x3f, r25	; 63
}
    76c6:	df 91       	pop	r29
    76c8:	cf 91       	pop	r28
    76ca:	1f 91       	pop	r17
    76cc:	08 95       	ret

000076ce <digitalRead>:

int digitalRead(uint8_t pin)
{
    76ce:	cf 93       	push	r28
    76d0:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    76d2:	28 2f       	mov	r18, r24
    76d4:	30 e0       	ldi	r19, 0x00	; 0
    76d6:	f9 01       	movw	r30, r18
    76d8:	ec 5c       	subi	r30, 0xCC	; 204
    76da:	fd 4f       	sbci	r31, 0xFD	; 253
    76dc:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    76de:	f9 01       	movw	r30, r18
    76e0:	ec 5a       	subi	r30, 0xAC	; 172
    76e2:	fd 4f       	sbci	r31, 0xFD	; 253
    76e4:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    76e6:	f9 01       	movw	r30, r18
    76e8:	ec 58       	subi	r30, 0x8C	; 140
    76ea:	fd 4f       	sbci	r31, 0xFD	; 253
    76ec:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    76ee:	cc 23       	and	r28, r28
    76f0:	89 f0       	breq	.+34     	; 0x7714 <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    76f2:	81 11       	cpse	r24, r1
    76f4:	59 df       	rcall	.-334    	; 0x75a8 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    76f6:	ec 2f       	mov	r30, r28
    76f8:	f0 e0       	ldi	r31, 0x00	; 0
    76fa:	ee 0f       	add	r30, r30
    76fc:	ff 1f       	adc	r31, r31
    76fe:	ec 56       	subi	r30, 0x6C	; 108
    7700:	fd 4f       	sbci	r31, 0xFD	; 253
    7702:	a5 91       	lpm	r26, Z+
    7704:	b4 91       	lpm	r27, Z
    7706:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    7708:	ed 23       	and	r30, r29
    770a:	81 e0       	ldi	r24, 0x01	; 1
    770c:	90 e0       	ldi	r25, 0x00	; 0
    770e:	21 f4       	brne	.+8      	; 0x7718 <digitalRead+0x4a>
    7710:	80 e0       	ldi	r24, 0x00	; 0
    7712:	02 c0       	rjmp	.+4      	; 0x7718 <digitalRead+0x4a>
    7714:	80 e0       	ldi	r24, 0x00	; 0
    7716:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    7718:	df 91       	pop	r29
    771a:	cf 91       	pop	r28
    771c:	08 95       	ret

0000771e <_ZNK6String14StringIfHelperEv>:
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
		*p = toupper(*p);
	}
}
    771e:	08 95       	ret

00007720 <_ZN6StringD1Ev>:
    7720:	fc 01       	movw	r30, r24
    7722:	80 81       	ld	r24, Z
    7724:	91 81       	ldd	r25, Z+1	; 0x01
    7726:	53 c5       	rjmp	.+2726   	; 0x81ce <free>

00007728 <_ZN6String10invalidateEv>:
    7728:	cf 93       	push	r28
    772a:	df 93       	push	r29
    772c:	ec 01       	movw	r28, r24
    772e:	88 81       	ld	r24, Y
    7730:	99 81       	ldd	r25, Y+1	; 0x01
    7732:	00 97       	sbiw	r24, 0x00	; 0
    7734:	09 f0       	breq	.+2      	; 0x7738 <_ZN6String10invalidateEv+0x10>
    7736:	4b d5       	rcall	.+2710   	; 0x81ce <free>
    7738:	19 82       	std	Y+1, r1	; 0x01
    773a:	18 82       	st	Y, r1
    773c:	1d 82       	std	Y+5, r1	; 0x05
    773e:	1c 82       	std	Y+4, r1	; 0x04
    7740:	1b 82       	std	Y+3, r1	; 0x03
    7742:	1a 82       	std	Y+2, r1	; 0x02
    7744:	df 91       	pop	r29
    7746:	cf 91       	pop	r28
    7748:	08 95       	ret

0000774a <_ZN6String12changeBufferEj>:
    774a:	0f 93       	push	r16
    774c:	1f 93       	push	r17
    774e:	cf 93       	push	r28
    7750:	df 93       	push	r29
    7752:	ec 01       	movw	r28, r24
    7754:	8b 01       	movw	r16, r22
    7756:	6f 5f       	subi	r22, 0xFF	; 255
    7758:	7f 4f       	sbci	r23, 0xFF	; 255
    775a:	88 81       	ld	r24, Y
    775c:	99 81       	ldd	r25, Y+1	; 0x01
    775e:	c0 d5       	rcall	.+2944   	; 0x82e0 <realloc>
    7760:	00 97       	sbiw	r24, 0x00	; 0
    7762:	31 f0       	breq	.+12     	; 0x7770 <_ZN6String12changeBufferEj+0x26>
    7764:	99 83       	std	Y+1, r25	; 0x01
    7766:	88 83       	st	Y, r24
    7768:	1b 83       	std	Y+3, r17	; 0x03
    776a:	0a 83       	std	Y+2, r16	; 0x02
    776c:	81 e0       	ldi	r24, 0x01	; 1
    776e:	01 c0       	rjmp	.+2      	; 0x7772 <_ZN6String12changeBufferEj+0x28>
    7770:	80 e0       	ldi	r24, 0x00	; 0
    7772:	df 91       	pop	r29
    7774:	cf 91       	pop	r28
    7776:	1f 91       	pop	r17
    7778:	0f 91       	pop	r16
    777a:	08 95       	ret

0000777c <_ZN6String7reserveEj>:
    777c:	cf 93       	push	r28
    777e:	df 93       	push	r29
    7780:	ec 01       	movw	r28, r24
    7782:	88 81       	ld	r24, Y
    7784:	99 81       	ldd	r25, Y+1	; 0x01
    7786:	89 2b       	or	r24, r25
    7788:	29 f0       	breq	.+10     	; 0x7794 <_ZN6String7reserveEj+0x18>
    778a:	8a 81       	ldd	r24, Y+2	; 0x02
    778c:	9b 81       	ldd	r25, Y+3	; 0x03
    778e:	86 17       	cp	r24, r22
    7790:	97 07       	cpc	r25, r23
    7792:	58 f4       	brcc	.+22     	; 0x77aa <_ZN6String7reserveEj+0x2e>
    7794:	ce 01       	movw	r24, r28
    7796:	d9 df       	rcall	.-78     	; 0x774a <_ZN6String12changeBufferEj>
    7798:	88 23       	and	r24, r24
    779a:	41 f0       	breq	.+16     	; 0x77ac <_ZN6String7reserveEj+0x30>
    779c:	8c 81       	ldd	r24, Y+4	; 0x04
    779e:	9d 81       	ldd	r25, Y+5	; 0x05
    77a0:	89 2b       	or	r24, r25
    77a2:	19 f4       	brne	.+6      	; 0x77aa <_ZN6String7reserveEj+0x2e>
    77a4:	e8 81       	ld	r30, Y
    77a6:	f9 81       	ldd	r31, Y+1	; 0x01
    77a8:	10 82       	st	Z, r1
    77aa:	81 e0       	ldi	r24, 0x01	; 1
    77ac:	df 91       	pop	r29
    77ae:	cf 91       	pop	r28
    77b0:	08 95       	ret

000077b2 <_ZN6String4copyEPKcj>:
    77b2:	ef 92       	push	r14
    77b4:	ff 92       	push	r15
    77b6:	0f 93       	push	r16
    77b8:	1f 93       	push	r17
    77ba:	cf 93       	push	r28
    77bc:	df 93       	push	r29
    77be:	ec 01       	movw	r28, r24
    77c0:	7b 01       	movw	r14, r22
    77c2:	8a 01       	movw	r16, r20
    77c4:	ba 01       	movw	r22, r20
    77c6:	da df       	rcall	.-76     	; 0x777c <_ZN6String7reserveEj>
    77c8:	81 11       	cpse	r24, r1
    77ca:	03 c0       	rjmp	.+6      	; 0x77d2 <_ZN6String4copyEPKcj+0x20>
    77cc:	ce 01       	movw	r24, r28
    77ce:	ac df       	rcall	.-168    	; 0x7728 <_ZN6String10invalidateEv>
    77d0:	06 c0       	rjmp	.+12     	; 0x77de <_ZN6String4copyEPKcj+0x2c>
    77d2:	1d 83       	std	Y+5, r17	; 0x05
    77d4:	0c 83       	std	Y+4, r16	; 0x04
    77d6:	b7 01       	movw	r22, r14
    77d8:	88 81       	ld	r24, Y
    77da:	99 81       	ldd	r25, Y+1	; 0x01
    77dc:	ae d6       	rcall	.+3420   	; 0x853a <strcpy>
    77de:	ce 01       	movw	r24, r28
    77e0:	df 91       	pop	r29
    77e2:	cf 91       	pop	r28
    77e4:	1f 91       	pop	r17
    77e6:	0f 91       	pop	r16
    77e8:	ff 90       	pop	r15
    77ea:	ef 90       	pop	r14
    77ec:	08 95       	ret

000077ee <_ZN6StringC1EPKc>:
    77ee:	fc 01       	movw	r30, r24
    77f0:	11 82       	std	Z+1, r1	; 0x01
    77f2:	10 82       	st	Z, r1
    77f4:	13 82       	std	Z+3, r1	; 0x03
    77f6:	12 82       	std	Z+2, r1	; 0x02
    77f8:	15 82       	std	Z+5, r1	; 0x05
    77fa:	14 82       	std	Z+4, r1	; 0x04
    77fc:	61 15       	cp	r22, r1
    77fe:	71 05       	cpc	r23, r1
    7800:	49 f0       	breq	.+18     	; 0x7814 <_ZN6StringC1EPKc+0x26>
    7802:	fb 01       	movw	r30, r22
    7804:	01 90       	ld	r0, Z+
    7806:	00 20       	and	r0, r0
    7808:	e9 f7       	brne	.-6      	; 0x7804 <_ZN6StringC1EPKc+0x16>
    780a:	31 97       	sbiw	r30, 0x01	; 1
    780c:	af 01       	movw	r20, r30
    780e:	46 1b       	sub	r20, r22
    7810:	57 0b       	sbc	r21, r23
    7812:	cf cf       	rjmp	.-98     	; 0x77b2 <_ZN6String4copyEPKcj>
    7814:	08 95       	ret

00007816 <_ZN6String4moveERS_>:
    7816:	0f 93       	push	r16
    7818:	1f 93       	push	r17
    781a:	cf 93       	push	r28
    781c:	df 93       	push	r29
    781e:	8c 01       	movw	r16, r24
    7820:	eb 01       	movw	r28, r22
    7822:	fc 01       	movw	r30, r24
    7824:	80 81       	ld	r24, Z
    7826:	91 81       	ldd	r25, Z+1	; 0x01
    7828:	00 97       	sbiw	r24, 0x00	; 0
    782a:	c1 f0       	breq	.+48     	; 0x785c <_ZN6String4moveERS_+0x46>
    782c:	68 81       	ld	r22, Y
    782e:	79 81       	ldd	r23, Y+1	; 0x01
    7830:	61 15       	cp	r22, r1
    7832:	71 05       	cpc	r23, r1
    7834:	91 f0       	breq	.+36     	; 0x785a <_ZN6String4moveERS_+0x44>
    7836:	2f e8       	ldi	r18, 0x8F	; 143
    7838:	3b e3       	ldi	r19, 0x3B	; 59
    783a:	23 2b       	or	r18, r19
    783c:	71 f0       	breq	.+28     	; 0x785a <_ZN6String4moveERS_+0x44>
    783e:	42 81       	ldd	r20, Z+2	; 0x02
    7840:	53 81       	ldd	r21, Z+3	; 0x03
    7842:	2c 81       	ldd	r18, Y+4	; 0x04
    7844:	3d 81       	ldd	r19, Y+5	; 0x05
    7846:	42 17       	cp	r20, r18
    7848:	53 07       	cpc	r21, r19
    784a:	38 f0       	brcs	.+14     	; 0x785a <_ZN6String4moveERS_+0x44>
    784c:	76 d6       	rcall	.+3308   	; 0x853a <strcpy>
    784e:	8c 81       	ldd	r24, Y+4	; 0x04
    7850:	9d 81       	ldd	r25, Y+5	; 0x05
    7852:	f8 01       	movw	r30, r16
    7854:	95 83       	std	Z+5, r25	; 0x05
    7856:	84 83       	std	Z+4, r24	; 0x04
    7858:	12 c0       	rjmp	.+36     	; 0x787e <_ZN6String4moveERS_+0x68>
    785a:	b9 d4       	rcall	.+2418   	; 0x81ce <free>
    785c:	88 81       	ld	r24, Y
    785e:	99 81       	ldd	r25, Y+1	; 0x01
    7860:	f8 01       	movw	r30, r16
    7862:	91 83       	std	Z+1, r25	; 0x01
    7864:	80 83       	st	Z, r24
    7866:	8a 81       	ldd	r24, Y+2	; 0x02
    7868:	9b 81       	ldd	r25, Y+3	; 0x03
    786a:	93 83       	std	Z+3, r25	; 0x03
    786c:	82 83       	std	Z+2, r24	; 0x02
    786e:	8c 81       	ldd	r24, Y+4	; 0x04
    7870:	9d 81       	ldd	r25, Y+5	; 0x05
    7872:	95 83       	std	Z+5, r25	; 0x05
    7874:	84 83       	std	Z+4, r24	; 0x04
    7876:	19 82       	std	Y+1, r1	; 0x01
    7878:	18 82       	st	Y, r1
    787a:	1b 82       	std	Y+3, r1	; 0x03
    787c:	1a 82       	std	Y+2, r1	; 0x02
    787e:	1d 82       	std	Y+5, r1	; 0x05
    7880:	1c 82       	std	Y+4, r1	; 0x04
    7882:	df 91       	pop	r29
    7884:	cf 91       	pop	r28
    7886:	1f 91       	pop	r17
    7888:	0f 91       	pop	r16
    788a:	08 95       	ret

0000788c <_ZN6StringC1EOS_>:
    788c:	fc 01       	movw	r30, r24
    788e:	11 82       	std	Z+1, r1	; 0x01
    7890:	10 82       	st	Z, r1
    7892:	13 82       	std	Z+3, r1	; 0x03
    7894:	12 82       	std	Z+2, r1	; 0x02
    7896:	15 82       	std	Z+5, r1	; 0x05
    7898:	14 82       	std	Z+4, r1	; 0x04
    789a:	bd cf       	rjmp	.-134    	; 0x7816 <_ZN6String4moveERS_>

0000789c <_ZN6StringaSERKS_>:
    789c:	cf 93       	push	r28
    789e:	df 93       	push	r29
    78a0:	ec 01       	movw	r28, r24
    78a2:	fb 01       	movw	r30, r22
    78a4:	86 17       	cp	r24, r22
    78a6:	97 07       	cpc	r25, r23
    78a8:	51 f0       	breq	.+20     	; 0x78be <_ZN6StringaSERKS_+0x22>
    78aa:	60 81       	ld	r22, Z
    78ac:	71 81       	ldd	r23, Z+1	; 0x01
    78ae:	61 15       	cp	r22, r1
    78b0:	71 05       	cpc	r23, r1
    78b2:	21 f0       	breq	.+8      	; 0x78bc <_ZN6StringaSERKS_+0x20>
    78b4:	44 81       	ldd	r20, Z+4	; 0x04
    78b6:	55 81       	ldd	r21, Z+5	; 0x05
    78b8:	7c df       	rcall	.-264    	; 0x77b2 <_ZN6String4copyEPKcj>
    78ba:	01 c0       	rjmp	.+2      	; 0x78be <_ZN6StringaSERKS_+0x22>
    78bc:	35 df       	rcall	.-406    	; 0x7728 <_ZN6String10invalidateEv>
    78be:	ce 01       	movw	r24, r28
    78c0:	df 91       	pop	r29
    78c2:	cf 91       	pop	r28
    78c4:	08 95       	ret

000078c6 <_ZN6StringC1ERKS_>:
    78c6:	fc 01       	movw	r30, r24
    78c8:	11 82       	std	Z+1, r1	; 0x01
    78ca:	10 82       	st	Z, r1
    78cc:	13 82       	std	Z+3, r1	; 0x03
    78ce:	12 82       	std	Z+2, r1	; 0x02
    78d0:	15 82       	std	Z+5, r1	; 0x05
    78d2:	14 82       	std	Z+4, r1	; 0x04
    78d4:	e3 cf       	rjmp	.-58     	; 0x789c <_ZN6StringaSERKS_>

000078d6 <_ZN6StringaSEOS_>:
    78d6:	cf 93       	push	r28
    78d8:	df 93       	push	r29
    78da:	ec 01       	movw	r28, r24
    78dc:	86 17       	cp	r24, r22
    78de:	97 07       	cpc	r25, r23
    78e0:	09 f0       	breq	.+2      	; 0x78e4 <_ZN6StringaSEOS_+0xe>
    78e2:	99 df       	rcall	.-206    	; 0x7816 <_ZN6String4moveERS_>
    78e4:	ce 01       	movw	r24, r28
    78e6:	df 91       	pop	r29
    78e8:	cf 91       	pop	r28
    78ea:	08 95       	ret

000078ec <_ZN6StringaSEPKc>:
    78ec:	cf 93       	push	r28
    78ee:	df 93       	push	r29
    78f0:	ec 01       	movw	r28, r24
    78f2:	61 15       	cp	r22, r1
    78f4:	71 05       	cpc	r23, r1
    78f6:	51 f0       	breq	.+20     	; 0x790c <_ZN6StringaSEPKc+0x20>
    78f8:	fb 01       	movw	r30, r22
    78fa:	01 90       	ld	r0, Z+
    78fc:	00 20       	and	r0, r0
    78fe:	e9 f7       	brne	.-6      	; 0x78fa <_ZN6StringaSEPKc+0xe>
    7900:	31 97       	sbiw	r30, 0x01	; 1
    7902:	af 01       	movw	r20, r30
    7904:	46 1b       	sub	r20, r22
    7906:	57 0b       	sbc	r21, r23
    7908:	54 df       	rcall	.-344    	; 0x77b2 <_ZN6String4copyEPKcj>
    790a:	01 c0       	rjmp	.+2      	; 0x790e <_ZN6StringaSEPKc+0x22>
    790c:	0d df       	rcall	.-486    	; 0x7728 <_ZN6String10invalidateEv>
    790e:	ce 01       	movw	r24, r28
    7910:	df 91       	pop	r29
    7912:	cf 91       	pop	r28
    7914:	08 95       	ret

00007916 <_ZN6StringC1Ec>:
    7916:	cf 93       	push	r28
    7918:	df 93       	push	r29
    791a:	00 d0       	rcall	.+0      	; 0x791c <_ZN6StringC1Ec+0x6>
    791c:	cd b7       	in	r28, 0x3d	; 61
    791e:	de b7       	in	r29, 0x3e	; 62
    7920:	fc 01       	movw	r30, r24
    7922:	11 82       	std	Z+1, r1	; 0x01
    7924:	10 82       	st	Z, r1
    7926:	13 82       	std	Z+3, r1	; 0x03
    7928:	12 82       	std	Z+2, r1	; 0x02
    792a:	15 82       	std	Z+5, r1	; 0x05
    792c:	14 82       	std	Z+4, r1	; 0x04
    792e:	69 83       	std	Y+1, r22	; 0x01
    7930:	1a 82       	std	Y+2, r1	; 0x02
    7932:	be 01       	movw	r22, r28
    7934:	6f 5f       	subi	r22, 0xFF	; 255
    7936:	7f 4f       	sbci	r23, 0xFF	; 255
    7938:	d9 df       	rcall	.-78     	; 0x78ec <_ZN6StringaSEPKc>
    793a:	0f 90       	pop	r0
    793c:	0f 90       	pop	r0
    793e:	df 91       	pop	r29
    7940:	cf 91       	pop	r28
    7942:	08 95       	ret

00007944 <_ZN6StringC1Ehh>:
    7944:	0f 93       	push	r16
    7946:	1f 93       	push	r17
    7948:	cf 93       	push	r28
    794a:	df 93       	push	r29
    794c:	cd b7       	in	r28, 0x3d	; 61
    794e:	de b7       	in	r29, 0x3e	; 62
    7950:	29 97       	sbiw	r28, 0x09	; 9
    7952:	0f b6       	in	r0, 0x3f	; 63
    7954:	f8 94       	cli
    7956:	de bf       	out	0x3e, r29	; 62
    7958:	0f be       	out	0x3f, r0	; 63
    795a:	cd bf       	out	0x3d, r28	; 61
    795c:	8c 01       	movw	r16, r24
    795e:	86 2f       	mov	r24, r22
    7960:	f8 01       	movw	r30, r16
    7962:	11 82       	std	Z+1, r1	; 0x01
    7964:	10 82       	st	Z, r1
    7966:	13 82       	std	Z+3, r1	; 0x03
    7968:	12 82       	std	Z+2, r1	; 0x02
    796a:	15 82       	std	Z+5, r1	; 0x05
    796c:	14 82       	std	Z+4, r1	; 0x04
    796e:	50 e0       	ldi	r21, 0x00	; 0
    7970:	be 01       	movw	r22, r28
    7972:	6f 5f       	subi	r22, 0xFF	; 255
    7974:	7f 4f       	sbci	r23, 0xFF	; 255
    7976:	90 e0       	ldi	r25, 0x00	; 0
    7978:	58 d6       	rcall	.+3248   	; 0x862a <utoa>
    797a:	be 01       	movw	r22, r28
    797c:	6f 5f       	subi	r22, 0xFF	; 255
    797e:	7f 4f       	sbci	r23, 0xFF	; 255
    7980:	c8 01       	movw	r24, r16
    7982:	b4 df       	rcall	.-152    	; 0x78ec <_ZN6StringaSEPKc>
    7984:	29 96       	adiw	r28, 0x09	; 9
    7986:	0f b6       	in	r0, 0x3f	; 63
    7988:	f8 94       	cli
    798a:	de bf       	out	0x3e, r29	; 62
    798c:	0f be       	out	0x3f, r0	; 63
    798e:	cd bf       	out	0x3d, r28	; 61
    7990:	df 91       	pop	r29
    7992:	cf 91       	pop	r28
    7994:	1f 91       	pop	r17
    7996:	0f 91       	pop	r16
    7998:	08 95       	ret

0000799a <_ZN6StringC1Eih>:
    799a:	0f 93       	push	r16
    799c:	1f 93       	push	r17
    799e:	cf 93       	push	r28
    79a0:	df 93       	push	r29
    79a2:	cd b7       	in	r28, 0x3d	; 61
    79a4:	de b7       	in	r29, 0x3e	; 62
    79a6:	62 97       	sbiw	r28, 0x12	; 18
    79a8:	0f b6       	in	r0, 0x3f	; 63
    79aa:	f8 94       	cli
    79ac:	de bf       	out	0x3e, r29	; 62
    79ae:	0f be       	out	0x3f, r0	; 63
    79b0:	cd bf       	out	0x3d, r28	; 61
    79b2:	8c 01       	movw	r16, r24
    79b4:	cb 01       	movw	r24, r22
    79b6:	f8 01       	movw	r30, r16
    79b8:	11 82       	std	Z+1, r1	; 0x01
    79ba:	10 82       	st	Z, r1
    79bc:	13 82       	std	Z+3, r1	; 0x03
    79be:	12 82       	std	Z+2, r1	; 0x02
    79c0:	15 82       	std	Z+5, r1	; 0x05
    79c2:	14 82       	std	Z+4, r1	; 0x04
    79c4:	50 e0       	ldi	r21, 0x00	; 0
    79c6:	be 01       	movw	r22, r28
    79c8:	6f 5f       	subi	r22, 0xFF	; 255
    79ca:	7f 4f       	sbci	r23, 0xFF	; 255
    79cc:	da d5       	rcall	.+2996   	; 0x8582 <itoa>
    79ce:	be 01       	movw	r22, r28
    79d0:	6f 5f       	subi	r22, 0xFF	; 255
    79d2:	7f 4f       	sbci	r23, 0xFF	; 255
    79d4:	c8 01       	movw	r24, r16
    79d6:	8a df       	rcall	.-236    	; 0x78ec <_ZN6StringaSEPKc>
    79d8:	62 96       	adiw	r28, 0x12	; 18
    79da:	0f b6       	in	r0, 0x3f	; 63
    79dc:	f8 94       	cli
    79de:	de bf       	out	0x3e, r29	; 62
    79e0:	0f be       	out	0x3f, r0	; 63
    79e2:	cd bf       	out	0x3d, r28	; 61
    79e4:	df 91       	pop	r29
    79e6:	cf 91       	pop	r28
    79e8:	1f 91       	pop	r17
    79ea:	0f 91       	pop	r16
    79ec:	08 95       	ret

000079ee <_ZN6StringC1Ejh>:
    79ee:	0f 93       	push	r16
    79f0:	1f 93       	push	r17
    79f2:	cf 93       	push	r28
    79f4:	df 93       	push	r29
    79f6:	cd b7       	in	r28, 0x3d	; 61
    79f8:	de b7       	in	r29, 0x3e	; 62
    79fa:	61 97       	sbiw	r28, 0x11	; 17
    79fc:	0f b6       	in	r0, 0x3f	; 63
    79fe:	f8 94       	cli
    7a00:	de bf       	out	0x3e, r29	; 62
    7a02:	0f be       	out	0x3f, r0	; 63
    7a04:	cd bf       	out	0x3d, r28	; 61
    7a06:	8c 01       	movw	r16, r24
    7a08:	cb 01       	movw	r24, r22
    7a0a:	f8 01       	movw	r30, r16
    7a0c:	11 82       	std	Z+1, r1	; 0x01
    7a0e:	10 82       	st	Z, r1
    7a10:	13 82       	std	Z+3, r1	; 0x03
    7a12:	12 82       	std	Z+2, r1	; 0x02
    7a14:	15 82       	std	Z+5, r1	; 0x05
    7a16:	14 82       	std	Z+4, r1	; 0x04
    7a18:	50 e0       	ldi	r21, 0x00	; 0
    7a1a:	be 01       	movw	r22, r28
    7a1c:	6f 5f       	subi	r22, 0xFF	; 255
    7a1e:	7f 4f       	sbci	r23, 0xFF	; 255
    7a20:	04 d6       	rcall	.+3080   	; 0x862a <utoa>
    7a22:	be 01       	movw	r22, r28
    7a24:	6f 5f       	subi	r22, 0xFF	; 255
    7a26:	7f 4f       	sbci	r23, 0xFF	; 255
    7a28:	c8 01       	movw	r24, r16
    7a2a:	60 df       	rcall	.-320    	; 0x78ec <_ZN6StringaSEPKc>
    7a2c:	61 96       	adiw	r28, 0x11	; 17
    7a2e:	0f b6       	in	r0, 0x3f	; 63
    7a30:	f8 94       	cli
    7a32:	de bf       	out	0x3e, r29	; 62
    7a34:	0f be       	out	0x3f, r0	; 63
    7a36:	cd bf       	out	0x3d, r28	; 61
    7a38:	df 91       	pop	r29
    7a3a:	cf 91       	pop	r28
    7a3c:	1f 91       	pop	r17
    7a3e:	0f 91       	pop	r16
    7a40:	08 95       	ret

00007a42 <_ZN6StringC1Emh>:
    7a42:	0f 93       	push	r16
    7a44:	1f 93       	push	r17
    7a46:	cf 93       	push	r28
    7a48:	df 93       	push	r29
    7a4a:	cd b7       	in	r28, 0x3d	; 61
    7a4c:	de b7       	in	r29, 0x3e	; 62
    7a4e:	a1 97       	sbiw	r28, 0x21	; 33
    7a50:	0f b6       	in	r0, 0x3f	; 63
    7a52:	f8 94       	cli
    7a54:	de bf       	out	0x3e, r29	; 62
    7a56:	0f be       	out	0x3f, r0	; 63
    7a58:	cd bf       	out	0x3d, r28	; 61
    7a5a:	8c 01       	movw	r16, r24
    7a5c:	cb 01       	movw	r24, r22
    7a5e:	ba 01       	movw	r22, r20
    7a60:	f8 01       	movw	r30, r16
    7a62:	11 82       	std	Z+1, r1	; 0x01
    7a64:	10 82       	st	Z, r1
    7a66:	13 82       	std	Z+3, r1	; 0x03
    7a68:	12 82       	std	Z+2, r1	; 0x02
    7a6a:	15 82       	std	Z+5, r1	; 0x05
    7a6c:	14 82       	std	Z+4, r1	; 0x04
    7a6e:	30 e0       	ldi	r19, 0x00	; 0
    7a70:	ae 01       	movw	r20, r28
    7a72:	4f 5f       	subi	r20, 0xFF	; 255
    7a74:	5f 4f       	sbci	r21, 0xFF	; 255
    7a76:	ae d5       	rcall	.+2908   	; 0x85d4 <ultoa>
    7a78:	be 01       	movw	r22, r28
    7a7a:	6f 5f       	subi	r22, 0xFF	; 255
    7a7c:	7f 4f       	sbci	r23, 0xFF	; 255
    7a7e:	c8 01       	movw	r24, r16
    7a80:	35 df       	rcall	.-406    	; 0x78ec <_ZN6StringaSEPKc>
    7a82:	a1 96       	adiw	r28, 0x21	; 33
    7a84:	0f b6       	in	r0, 0x3f	; 63
    7a86:	f8 94       	cli
    7a88:	de bf       	out	0x3e, r29	; 62
    7a8a:	0f be       	out	0x3f, r0	; 63
    7a8c:	cd bf       	out	0x3d, r28	; 61
    7a8e:	df 91       	pop	r29
    7a90:	cf 91       	pop	r28
    7a92:	1f 91       	pop	r17
    7a94:	0f 91       	pop	r16
    7a96:	08 95       	ret

00007a98 <_ZN6StringC1Edh>:
    7a98:	ef 92       	push	r14
    7a9a:	ff 92       	push	r15
    7a9c:	0f 93       	push	r16
    7a9e:	1f 93       	push	r17
    7aa0:	cf 93       	push	r28
    7aa2:	df 93       	push	r29
    7aa4:	cd b7       	in	r28, 0x3d	; 61
    7aa6:	de b7       	in	r29, 0x3e	; 62
    7aa8:	a1 97       	sbiw	r28, 0x21	; 33
    7aaa:	0f b6       	in	r0, 0x3f	; 63
    7aac:	f8 94       	cli
    7aae:	de bf       	out	0x3e, r29	; 62
    7ab0:	0f be       	out	0x3f, r0	; 63
    7ab2:	cd bf       	out	0x3d, r28	; 61
    7ab4:	7c 01       	movw	r14, r24
    7ab6:	cb 01       	movw	r24, r22
    7ab8:	ba 01       	movw	r22, r20
    7aba:	f7 01       	movw	r30, r14
    7abc:	11 82       	std	Z+1, r1	; 0x01
    7abe:	10 82       	st	Z, r1
    7ac0:	13 82       	std	Z+3, r1	; 0x03
    7ac2:	12 82       	std	Z+2, r1	; 0x02
    7ac4:	15 82       	std	Z+5, r1	; 0x05
    7ac6:	14 82       	std	Z+4, r1	; 0x04
    7ac8:	42 e0       	ldi	r20, 0x02	; 2
    7aca:	42 0f       	add	r20, r18
    7acc:	8e 01       	movw	r16, r28
    7ace:	0f 5f       	subi	r16, 0xFF	; 255
    7ad0:	1f 4f       	sbci	r17, 0xFF	; 255
    7ad2:	c6 d2       	rcall	.+1420   	; 0x8060 <dtostrf>
    7ad4:	bc 01       	movw	r22, r24
    7ad6:	c7 01       	movw	r24, r14
    7ad8:	09 df       	rcall	.-494    	; 0x78ec <_ZN6StringaSEPKc>
    7ada:	a1 96       	adiw	r28, 0x21	; 33
    7adc:	0f b6       	in	r0, 0x3f	; 63
    7ade:	f8 94       	cli
    7ae0:	de bf       	out	0x3e, r29	; 62
    7ae2:	0f be       	out	0x3f, r0	; 63
    7ae4:	cd bf       	out	0x3d, r28	; 61
    7ae6:	df 91       	pop	r29
    7ae8:	cf 91       	pop	r28
    7aea:	1f 91       	pop	r17
    7aec:	0f 91       	pop	r16
    7aee:	ff 90       	pop	r15
    7af0:	ef 90       	pop	r14
    7af2:	08 95       	ret

00007af4 <_ZN6String6concatEPKcj>:
    7af4:	ef 92       	push	r14
    7af6:	ff 92       	push	r15
    7af8:	0f 93       	push	r16
    7afa:	1f 93       	push	r17
    7afc:	cf 93       	push	r28
    7afe:	df 93       	push	r29
    7b00:	61 15       	cp	r22, r1
    7b02:	71 05       	cpc	r23, r1
    7b04:	11 f4       	brne	.+4      	; 0x7b0a <_ZN6String6concatEPKcj+0x16>
    7b06:	80 e0       	ldi	r24, 0x00	; 0
    7b08:	1a c0       	rjmp	.+52     	; 0x7b3e <_ZN6String6concatEPKcj+0x4a>
    7b0a:	41 15       	cp	r20, r1
    7b0c:	51 05       	cpc	r21, r1
    7b0e:	b1 f0       	breq	.+44     	; 0x7b3c <_ZN6String6concatEPKcj+0x48>
    7b10:	7b 01       	movw	r14, r22
    7b12:	ec 01       	movw	r28, r24
    7b14:	8c 81       	ldd	r24, Y+4	; 0x04
    7b16:	9d 81       	ldd	r25, Y+5	; 0x05
    7b18:	8a 01       	movw	r16, r20
    7b1a:	08 0f       	add	r16, r24
    7b1c:	19 1f       	adc	r17, r25
    7b1e:	b8 01       	movw	r22, r16
    7b20:	ce 01       	movw	r24, r28
    7b22:	2c de       	rcall	.-936    	; 0x777c <_ZN6String7reserveEj>
    7b24:	88 23       	and	r24, r24
    7b26:	79 f3       	breq	.-34     	; 0x7b06 <_ZN6String6concatEPKcj+0x12>
    7b28:	28 81       	ld	r18, Y
    7b2a:	39 81       	ldd	r19, Y+1	; 0x01
    7b2c:	8c 81       	ldd	r24, Y+4	; 0x04
    7b2e:	9d 81       	ldd	r25, Y+5	; 0x05
    7b30:	b7 01       	movw	r22, r14
    7b32:	82 0f       	add	r24, r18
    7b34:	93 1f       	adc	r25, r19
    7b36:	01 d5       	rcall	.+2562   	; 0x853a <strcpy>
    7b38:	1d 83       	std	Y+5, r17	; 0x05
    7b3a:	0c 83       	std	Y+4, r16	; 0x04
    7b3c:	81 e0       	ldi	r24, 0x01	; 1
    7b3e:	df 91       	pop	r29
    7b40:	cf 91       	pop	r28
    7b42:	1f 91       	pop	r17
    7b44:	0f 91       	pop	r16
    7b46:	ff 90       	pop	r15
    7b48:	ef 90       	pop	r14
    7b4a:	08 95       	ret

00007b4c <_ZN6String6concatERKS_>:
    7b4c:	fb 01       	movw	r30, r22
    7b4e:	44 81       	ldd	r20, Z+4	; 0x04
    7b50:	55 81       	ldd	r21, Z+5	; 0x05
    7b52:	60 81       	ld	r22, Z
    7b54:	71 81       	ldd	r23, Z+1	; 0x01
    7b56:	ce cf       	rjmp	.-100    	; 0x7af4 <_ZN6String6concatEPKcj>

00007b58 <_ZN6String6concatEPKc>:
    7b58:	61 15       	cp	r22, r1
    7b5a:	71 05       	cpc	r23, r1
    7b5c:	49 f0       	breq	.+18     	; 0x7b70 <_ZN6String6concatEPKc+0x18>
    7b5e:	fb 01       	movw	r30, r22
    7b60:	01 90       	ld	r0, Z+
    7b62:	00 20       	and	r0, r0
    7b64:	e9 f7       	brne	.-6      	; 0x7b60 <_ZN6String6concatEPKc+0x8>
    7b66:	31 97       	sbiw	r30, 0x01	; 1
    7b68:	af 01       	movw	r20, r30
    7b6a:	46 1b       	sub	r20, r22
    7b6c:	57 0b       	sbc	r21, r23
    7b6e:	c2 cf       	rjmp	.-124    	; 0x7af4 <_ZN6String6concatEPKcj>
    7b70:	80 e0       	ldi	r24, 0x00	; 0
    7b72:	08 95       	ret

00007b74 <_ZN6String6concatEc>:
    7b74:	cf 93       	push	r28
    7b76:	df 93       	push	r29
    7b78:	00 d0       	rcall	.+0      	; 0x7b7a <_ZN6String6concatEc+0x6>
    7b7a:	cd b7       	in	r28, 0x3d	; 61
    7b7c:	de b7       	in	r29, 0x3e	; 62
    7b7e:	69 83       	std	Y+1, r22	; 0x01
    7b80:	1a 82       	std	Y+2, r1	; 0x02
    7b82:	41 e0       	ldi	r20, 0x01	; 1
    7b84:	50 e0       	ldi	r21, 0x00	; 0
    7b86:	be 01       	movw	r22, r28
    7b88:	6f 5f       	subi	r22, 0xFF	; 255
    7b8a:	7f 4f       	sbci	r23, 0xFF	; 255
    7b8c:	b3 df       	rcall	.-154    	; 0x7af4 <_ZN6String6concatEPKcj>
    7b8e:	0f 90       	pop	r0
    7b90:	0f 90       	pop	r0
    7b92:	df 91       	pop	r29
    7b94:	cf 91       	pop	r28
    7b96:	08 95       	ret

00007b98 <_ZplRK15StringSumHelperRK6String>:
    7b98:	cf 93       	push	r28
    7b9a:	df 93       	push	r29
    7b9c:	ec 01       	movw	r28, r24
    7b9e:	fb 01       	movw	r30, r22
    7ba0:	44 81       	ldd	r20, Z+4	; 0x04
    7ba2:	55 81       	ldd	r21, Z+5	; 0x05
    7ba4:	60 81       	ld	r22, Z
    7ba6:	71 81       	ldd	r23, Z+1	; 0x01
    7ba8:	a5 df       	rcall	.-182    	; 0x7af4 <_ZN6String6concatEPKcj>
    7baa:	81 11       	cpse	r24, r1
    7bac:	02 c0       	rjmp	.+4      	; 0x7bb2 <_ZplRK15StringSumHelperRK6String+0x1a>
    7bae:	ce 01       	movw	r24, r28
    7bb0:	bb dd       	rcall	.-1162   	; 0x7728 <_ZN6String10invalidateEv>
    7bb2:	ce 01       	movw	r24, r28
    7bb4:	df 91       	pop	r29
    7bb6:	cf 91       	pop	r28
    7bb8:	08 95       	ret

00007bba <_ZplRK15StringSumHelperPKc>:
    7bba:	cf 93       	push	r28
    7bbc:	df 93       	push	r29
    7bbe:	ec 01       	movw	r28, r24
    7bc0:	61 15       	cp	r22, r1
    7bc2:	71 05       	cpc	r23, r1
    7bc4:	59 f0       	breq	.+22     	; 0x7bdc <_ZplRK15StringSumHelperPKc+0x22>
    7bc6:	fb 01       	movw	r30, r22
    7bc8:	01 90       	ld	r0, Z+
    7bca:	00 20       	and	r0, r0
    7bcc:	e9 f7       	brne	.-6      	; 0x7bc8 <_ZplRK15StringSumHelperPKc+0xe>
    7bce:	31 97       	sbiw	r30, 0x01	; 1
    7bd0:	af 01       	movw	r20, r30
    7bd2:	46 1b       	sub	r20, r22
    7bd4:	57 0b       	sbc	r21, r23
    7bd6:	8e df       	rcall	.-228    	; 0x7af4 <_ZN6String6concatEPKcj>
    7bd8:	81 11       	cpse	r24, r1
    7bda:	02 c0       	rjmp	.+4      	; 0x7be0 <_ZplRK15StringSumHelperPKc+0x26>
    7bdc:	ce 01       	movw	r24, r28
    7bde:	a4 dd       	rcall	.-1208   	; 0x7728 <_ZN6String10invalidateEv>
    7be0:	ce 01       	movw	r24, r28
    7be2:	df 91       	pop	r29
    7be4:	cf 91       	pop	r28
    7be6:	08 95       	ret

00007be8 <_ZplRK15StringSumHelperc>:
    7be8:	cf 93       	push	r28
    7bea:	df 93       	push	r29
    7bec:	ec 01       	movw	r28, r24
    7bee:	c2 df       	rcall	.-124    	; 0x7b74 <_ZN6String6concatEc>
    7bf0:	81 11       	cpse	r24, r1
    7bf2:	02 c0       	rjmp	.+4      	; 0x7bf8 <_ZplRK15StringSumHelperc+0x10>
    7bf4:	ce 01       	movw	r24, r28
    7bf6:	98 dd       	rcall	.-1232   	; 0x7728 <_ZN6String10invalidateEv>
    7bf8:	ce 01       	movw	r24, r28
    7bfa:	df 91       	pop	r29
    7bfc:	cf 91       	pop	r28
    7bfe:	08 95       	ret

00007c00 <_ZNK6String6equalsEPKc>:
    7c00:	fc 01       	movw	r30, r24
    7c02:	24 81       	ldd	r18, Z+4	; 0x04
    7c04:	35 81       	ldd	r19, Z+5	; 0x05
    7c06:	23 2b       	or	r18, r19
    7c08:	31 f4       	brne	.+12     	; 0x7c16 <_ZNK6String6equalsEPKc+0x16>
    7c0a:	21 e0       	ldi	r18, 0x01	; 1
    7c0c:	61 15       	cp	r22, r1
    7c0e:	71 05       	cpc	r23, r1
    7c10:	99 f0       	breq	.+38     	; 0x7c38 <_ZNK6String6equalsEPKc+0x38>
    7c12:	fb 01       	movw	r30, r22
    7c14:	08 c0       	rjmp	.+16     	; 0x7c26 <_ZNK6String6equalsEPKc+0x26>
    7c16:	fc 01       	movw	r30, r24
    7c18:	80 81       	ld	r24, Z
    7c1a:	91 81       	ldd	r25, Z+1	; 0x01
    7c1c:	61 15       	cp	r22, r1
    7c1e:	71 05       	cpc	r23, r1
    7c20:	31 f4       	brne	.+12     	; 0x7c2e <_ZNK6String6equalsEPKc+0x2e>
    7c22:	21 e0       	ldi	r18, 0x01	; 1
    7c24:	fc 01       	movw	r30, r24
    7c26:	80 81       	ld	r24, Z
    7c28:	88 23       	and	r24, r24
    7c2a:	31 f0       	breq	.+12     	; 0x7c38 <_ZNK6String6equalsEPKc+0x38>
    7c2c:	04 c0       	rjmp	.+8      	; 0x7c36 <_ZNK6String6equalsEPKc+0x36>
    7c2e:	7c d4       	rcall	.+2296   	; 0x8528 <strcmp>
    7c30:	21 e0       	ldi	r18, 0x01	; 1
    7c32:	89 2b       	or	r24, r25
    7c34:	09 f0       	breq	.+2      	; 0x7c38 <_ZNK6String6equalsEPKc+0x38>
    7c36:	20 e0       	ldi	r18, 0x00	; 0
    7c38:	82 2f       	mov	r24, r18
    7c3a:	08 95       	ret

00007c3c <_ZNK6String8getBytesEPhjj>:
    7c3c:	0f 93       	push	r16
    7c3e:	1f 93       	push	r17
    7c40:	cf 93       	push	r28
    7c42:	df 93       	push	r29
    7c44:	41 15       	cp	r20, r1
    7c46:	51 05       	cpc	r21, r1
    7c48:	11 f1       	breq	.+68     	; 0x7c8e <_ZNK6String8getBytesEPhjj+0x52>
    7c4a:	61 15       	cp	r22, r1
    7c4c:	71 05       	cpc	r23, r1
    7c4e:	f9 f0       	breq	.+62     	; 0x7c8e <_ZNK6String8getBytesEPhjj+0x52>
    7c50:	dc 01       	movw	r26, r24
    7c52:	14 96       	adiw	r26, 0x04	; 4
    7c54:	ed 91       	ld	r30, X+
    7c56:	fc 91       	ld	r31, X
    7c58:	15 97       	sbiw	r26, 0x05	; 5
    7c5a:	2e 17       	cp	r18, r30
    7c5c:	3f 07       	cpc	r19, r31
    7c5e:	18 f0       	brcs	.+6      	; 0x7c66 <_ZNK6String8getBytesEPhjj+0x2a>
    7c60:	fb 01       	movw	r30, r22
    7c62:	10 82       	st	Z, r1
    7c64:	14 c0       	rjmp	.+40     	; 0x7c8e <_ZNK6String8getBytesEPhjj+0x52>
    7c66:	e2 1b       	sub	r30, r18
    7c68:	f3 0b       	sbc	r31, r19
    7c6a:	ea 01       	movw	r28, r20
    7c6c:	21 97       	sbiw	r28, 0x01	; 1
    7c6e:	ec 17       	cp	r30, r28
    7c70:	fd 07       	cpc	r31, r29
    7c72:	08 f4       	brcc	.+2      	; 0x7c76 <_ZNK6String8getBytesEPhjj+0x3a>
    7c74:	ef 01       	movw	r28, r30
    7c76:	8b 01       	movw	r16, r22
    7c78:	fc 01       	movw	r30, r24
    7c7a:	60 81       	ld	r22, Z
    7c7c:	71 81       	ldd	r23, Z+1	; 0x01
    7c7e:	62 0f       	add	r22, r18
    7c80:	73 1f       	adc	r23, r19
    7c82:	ae 01       	movw	r20, r28
    7c84:	c8 01       	movw	r24, r16
    7c86:	6e d4       	rcall	.+2268   	; 0x8564 <strncpy>
    7c88:	c0 0f       	add	r28, r16
    7c8a:	d1 1f       	adc	r29, r17
    7c8c:	18 82       	st	Y, r1
    7c8e:	df 91       	pop	r29
    7c90:	cf 91       	pop	r28
    7c92:	1f 91       	pop	r17
    7c94:	0f 91       	pop	r16
    7c96:	08 95       	ret

00007c98 <_ZNK6String9substringEjj>:
    7c98:	bf 92       	push	r11
    7c9a:	cf 92       	push	r12
    7c9c:	df 92       	push	r13
    7c9e:	ef 92       	push	r14
    7ca0:	ff 92       	push	r15
    7ca2:	0f 93       	push	r16
    7ca4:	1f 93       	push	r17
    7ca6:	cf 93       	push	r28
    7ca8:	df 93       	push	r29
    7caa:	7c 01       	movw	r14, r24
    7cac:	6b 01       	movw	r12, r22
    7cae:	8a 01       	movw	r16, r20
    7cb0:	e9 01       	movw	r28, r18
    7cb2:	24 17       	cp	r18, r20
    7cb4:	35 07       	cpc	r19, r21
    7cb6:	20 f4       	brcc	.+8      	; 0x7cc0 <_ZNK6String9substringEjj+0x28>
    7cb8:	81 2f       	mov	r24, r17
    7cba:	89 01       	movw	r16, r18
    7cbc:	c4 2f       	mov	r28, r20
    7cbe:	d8 2f       	mov	r29, r24
    7cc0:	6c ee       	ldi	r22, 0xEC	; 236
    7cc2:	71 e0       	ldi	r23, 0x01	; 1
    7cc4:	c7 01       	movw	r24, r14
    7cc6:	93 dd       	rcall	.-1242   	; 0x77ee <_ZN6StringC1EPKc>
    7cc8:	d6 01       	movw	r26, r12
    7cca:	14 96       	adiw	r26, 0x04	; 4
    7ccc:	8d 91       	ld	r24, X+
    7cce:	9c 91       	ld	r25, X
    7cd0:	15 97       	sbiw	r26, 0x05	; 5
    7cd2:	08 17       	cp	r16, r24
    7cd4:	19 07       	cpc	r17, r25
    7cd6:	c0 f4       	brcc	.+48     	; 0x7d08 <_ZNK6String9substringEjj+0x70>
    7cd8:	8c 17       	cp	r24, r28
    7cda:	9d 07       	cpc	r25, r29
    7cdc:	08 f4       	brcc	.+2      	; 0x7ce0 <_ZNK6String9substringEjj+0x48>
    7cde:	ec 01       	movw	r28, r24
    7ce0:	d6 01       	movw	r26, r12
    7ce2:	ed 91       	ld	r30, X+
    7ce4:	fc 91       	ld	r31, X
    7ce6:	11 97       	sbiw	r26, 0x01	; 1
    7ce8:	ec 0f       	add	r30, r28
    7cea:	fd 1f       	adc	r31, r29
    7cec:	b0 80       	ld	r11, Z
    7cee:	10 82       	st	Z, r1
    7cf0:	6d 91       	ld	r22, X+
    7cf2:	7c 91       	ld	r23, X
    7cf4:	60 0f       	add	r22, r16
    7cf6:	71 1f       	adc	r23, r17
    7cf8:	c7 01       	movw	r24, r14
    7cfa:	f8 dd       	rcall	.-1040   	; 0x78ec <_ZN6StringaSEPKc>
    7cfc:	d6 01       	movw	r26, r12
    7cfe:	ed 91       	ld	r30, X+
    7d00:	fc 91       	ld	r31, X
    7d02:	ec 0f       	add	r30, r28
    7d04:	fd 1f       	adc	r31, r29
    7d06:	b0 82       	st	Z, r11
    7d08:	c7 01       	movw	r24, r14
    7d0a:	df 91       	pop	r29
    7d0c:	cf 91       	pop	r28
    7d0e:	1f 91       	pop	r17
    7d10:	0f 91       	pop	r16
    7d12:	ff 90       	pop	r15
    7d14:	ef 90       	pop	r14
    7d16:	df 90       	pop	r13
    7d18:	cf 90       	pop	r12
    7d1a:	bf 90       	pop	r11
    7d1c:	08 95       	ret

00007d1e <_ZN6String4trimEv>:

void String::trim(void)
{
    7d1e:	af 92       	push	r10
    7d20:	bf 92       	push	r11
    7d22:	cf 92       	push	r12
    7d24:	df 92       	push	r13
    7d26:	ef 92       	push	r14
    7d28:	ff 92       	push	r15
    7d2a:	0f 93       	push	r16
    7d2c:	1f 93       	push	r17
    7d2e:	cf 93       	push	r28
    7d30:	df 93       	push	r29
	if (!buffer || len == 0) return;
    7d32:	dc 01       	movw	r26, r24
    7d34:	cd 90       	ld	r12, X+
    7d36:	dc 90       	ld	r13, X
    7d38:	11 97       	sbiw	r26, 0x01	; 1
    7d3a:	c1 14       	cp	r12, r1
    7d3c:	d1 04       	cpc	r13, r1
    7d3e:	09 f4       	brne	.+2      	; 0x7d42 <_ZN6String4trimEv+0x24>
    7d40:	3c c0       	rjmp	.+120    	; 0x7dba <_ZN6String4trimEv+0x9c>
    7d42:	14 96       	adiw	r26, 0x04	; 4
    7d44:	cd 91       	ld	r28, X+
    7d46:	dc 91       	ld	r29, X
    7d48:	15 97       	sbiw	r26, 0x05	; 5
    7d4a:	20 97       	sbiw	r28, 0x00	; 0
    7d4c:	b1 f1       	breq	.+108    	; 0x7dba <_ZN6String4trimEv+0x9c>
    7d4e:	8c 01       	movw	r16, r24
    7d50:	76 01       	movw	r14, r12
    7d52:	57 01       	movw	r10, r14
    7d54:	bf ef       	ldi	r27, 0xFF	; 255
    7d56:	ab 1a       	sub	r10, r27
    7d58:	bb 0a       	sbc	r11, r27
	char *begin = buffer;
	while (isspace(*begin)) begin++;
    7d5a:	f7 01       	movw	r30, r14
    7d5c:	80 81       	ld	r24, Z
    7d5e:	90 e0       	ldi	r25, 0x00	; 0
    7d60:	c9 d3       	rcall	.+1938   	; 0x84f4 <isspace>
    7d62:	89 2b       	or	r24, r25
    7d64:	11 f0       	breq	.+4      	; 0x7d6a <_ZN6String4trimEv+0x4c>
    7d66:	75 01       	movw	r14, r10
    7d68:	f4 cf       	rjmp	.-24     	; 0x7d52 <_ZN6String4trimEv+0x34>
	char *end = buffer + len - 1;
    7d6a:	21 97       	sbiw	r28, 0x01	; 1
    7d6c:	cc 0d       	add	r28, r12
    7d6e:	dd 1d       	adc	r29, r13
	while (isspace(*end) && end >= begin) end--;
    7d70:	88 81       	ld	r24, Y
    7d72:	90 e0       	ldi	r25, 0x00	; 0
    7d74:	bf d3       	rcall	.+1918   	; 0x84f4 <isspace>
    7d76:	89 2b       	or	r24, r25
    7d78:	29 f0       	breq	.+10     	; 0x7d84 <_ZN6String4trimEv+0x66>
    7d7a:	ce 15       	cp	r28, r14
    7d7c:	df 05       	cpc	r29, r15
    7d7e:	10 f0       	brcs	.+4      	; 0x7d84 <_ZN6String4trimEv+0x66>
    7d80:	21 97       	sbiw	r28, 0x01	; 1
    7d82:	f6 cf       	rjmp	.-20     	; 0x7d70 <_ZN6String4trimEv+0x52>
	len = end + 1 - begin;
    7d84:	ae 01       	movw	r20, r28
    7d86:	4f 5f       	subi	r20, 0xFF	; 255
    7d88:	5f 4f       	sbci	r21, 0xFF	; 255
    7d8a:	4e 19       	sub	r20, r14
    7d8c:	5f 09       	sbc	r21, r15
    7d8e:	d8 01       	movw	r26, r16
    7d90:	15 96       	adiw	r26, 0x05	; 5
    7d92:	5c 93       	st	X, r21
    7d94:	4e 93       	st	-X, r20
    7d96:	14 97       	sbiw	r26, 0x04	; 4
	if (begin > buffer) memcpy(buffer, begin, len);
    7d98:	ce 14       	cp	r12, r14
    7d9a:	df 04       	cpc	r13, r15
    7d9c:	18 f4       	brcc	.+6      	; 0x7da4 <_ZN6String4trimEv+0x86>
    7d9e:	b7 01       	movw	r22, r14
    7da0:	c6 01       	movw	r24, r12
    7da2:	b9 d3       	rcall	.+1906   	; 0x8516 <memcpy>
	buffer[len] = 0;
    7da4:	d8 01       	movw	r26, r16
    7da6:	ed 91       	ld	r30, X+
    7da8:	fc 91       	ld	r31, X
    7daa:	11 97       	sbiw	r26, 0x01	; 1
    7dac:	14 96       	adiw	r26, 0x04	; 4
    7dae:	8d 91       	ld	r24, X+
    7db0:	9c 91       	ld	r25, X
    7db2:	15 97       	sbiw	r26, 0x05	; 5
    7db4:	e8 0f       	add	r30, r24
    7db6:	f9 1f       	adc	r31, r25
    7db8:	10 82       	st	Z, r1
}
    7dba:	df 91       	pop	r29
    7dbc:	cf 91       	pop	r28
    7dbe:	1f 91       	pop	r17
    7dc0:	0f 91       	pop	r16
    7dc2:	ff 90       	pop	r15
    7dc4:	ef 90       	pop	r14
    7dc6:	df 90       	pop	r13
    7dc8:	cf 90       	pop	r12
    7dca:	bf 90       	pop	r11
    7dcc:	af 90       	pop	r10
    7dce:	08 95       	ret

00007dd0 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
    7dd0:	fc 01       	movw	r30, r24
    7dd2:	80 81       	ld	r24, Z
    7dd4:	91 81       	ldd	r25, Z+1	; 0x01
    7dd6:	00 97       	sbiw	r24, 0x00	; 0
    7dd8:	09 f0       	breq	.+2      	; 0x7ddc <_ZNK6String5toIntEv+0xc>
    7dda:	66 c3       	rjmp	.+1740   	; 0x84a8 <atol>
	return 0;
}
    7ddc:	60 e0       	ldi	r22, 0x00	; 0
    7dde:	70 e0       	ldi	r23, 0x00	; 0
    7de0:	cb 01       	movw	r24, r22
    7de2:	08 95       	ret

00007de4 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    7de4:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    7de6:	91 8d       	ldd	r25, Z+25	; 0x19
    7de8:	22 8d       	ldd	r18, Z+26	; 0x1a
    7dea:	89 2f       	mov	r24, r25
    7dec:	90 e0       	ldi	r25, 0x00	; 0
    7dee:	80 5c       	subi	r24, 0xC0	; 192
    7df0:	9f 4f       	sbci	r25, 0xFF	; 255
    7df2:	82 1b       	sub	r24, r18
    7df4:	91 09       	sbc	r25, r1
}
    7df6:	8f 73       	andi	r24, 0x3F	; 63
    7df8:	99 27       	eor	r25, r25
    7dfa:	08 95       	ret

00007dfc <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    7dfc:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    7dfe:	91 8d       	ldd	r25, Z+25	; 0x19
    7e00:	82 8d       	ldd	r24, Z+26	; 0x1a
    7e02:	98 17       	cp	r25, r24
    7e04:	31 f0       	breq	.+12     	; 0x7e12 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    7e06:	82 8d       	ldd	r24, Z+26	; 0x1a
    7e08:	e8 0f       	add	r30, r24
    7e0a:	f1 1d       	adc	r31, r1
    7e0c:	85 8d       	ldd	r24, Z+29	; 0x1d
    7e0e:	90 e0       	ldi	r25, 0x00	; 0
    7e10:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    7e12:	8f ef       	ldi	r24, 0xFF	; 255
    7e14:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    7e16:	08 95       	ret

00007e18 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    7e18:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    7e1a:	91 8d       	ldd	r25, Z+25	; 0x19
    7e1c:	82 8d       	ldd	r24, Z+26	; 0x1a
    7e1e:	98 17       	cp	r25, r24
    7e20:	61 f0       	breq	.+24     	; 0x7e3a <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    7e22:	82 8d       	ldd	r24, Z+26	; 0x1a
    7e24:	df 01       	movw	r26, r30
    7e26:	a8 0f       	add	r26, r24
    7e28:	b1 1d       	adc	r27, r1
    7e2a:	5d 96       	adiw	r26, 0x1d	; 29
    7e2c:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    7e2e:	92 8d       	ldd	r25, Z+26	; 0x1a
    7e30:	9f 5f       	subi	r25, 0xFF	; 255
    7e32:	9f 73       	andi	r25, 0x3F	; 63
    7e34:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    7e36:	90 e0       	ldi	r25, 0x00	; 0
    7e38:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    7e3a:	8f ef       	ldi	r24, 0xFF	; 255
    7e3c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    7e3e:	08 95       	ret

00007e40 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    7e40:	fc 01       	movw	r30, r24
    7e42:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    7e44:	44 8d       	ldd	r20, Z+28	; 0x1c
    7e46:	25 2f       	mov	r18, r21
    7e48:	30 e0       	ldi	r19, 0x00	; 0
    7e4a:	84 2f       	mov	r24, r20
    7e4c:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    7e4e:	82 1b       	sub	r24, r18
    7e50:	93 0b       	sbc	r25, r19
    7e52:	54 17       	cp	r21, r20
    7e54:	10 f0       	brcs	.+4      	; 0x7e5a <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    7e56:	cf 96       	adiw	r24, 0x3f	; 63
    7e58:	08 95       	ret
  return tail - head - 1;
    7e5a:	01 97       	sbiw	r24, 0x01	; 1
}
    7e5c:	08 95       	ret

00007e5e <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    7e5e:	8f e1       	ldi	r24, 0x1F	; 31
    7e60:	98 e3       	ldi	r25, 0x38	; 56
    7e62:	89 2b       	or	r24, r25
    7e64:	41 f0       	breq	.+16     	; 0x7e76 <_Z14serialEventRunv+0x18>
    7e66:	80 e0       	ldi	r24, 0x00	; 0
    7e68:	90 e0       	ldi	r25, 0x00	; 0
    7e6a:	89 2b       	or	r24, r25
    7e6c:	21 f0       	breq	.+8      	; 0x7e76 <_Z14serialEventRunv+0x18>
    7e6e:	e7 d8       	rcall	.-3634   	; 0x703e <_Z17Serial0_availablev>
    7e70:	81 11       	cpse	r24, r1
    7e72:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    7e76:	08 95       	ret

00007e78 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    7e78:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    7e7a:	84 8d       	ldd	r24, Z+28	; 0x1c
    7e7c:	df 01       	movw	r26, r30
    7e7e:	a8 0f       	add	r26, r24
    7e80:	b1 1d       	adc	r27, r1
    7e82:	a3 5a       	subi	r26, 0xA3	; 163
    7e84:	bf 4f       	sbci	r27, 0xFF	; 255
    7e86:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    7e88:	84 8d       	ldd	r24, Z+28	; 0x1c
    7e8a:	90 e0       	ldi	r25, 0x00	; 0
    7e8c:	01 96       	adiw	r24, 0x01	; 1
    7e8e:	8f 73       	andi	r24, 0x3F	; 63
    7e90:	99 27       	eor	r25, r25
    7e92:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    7e94:	a6 89       	ldd	r26, Z+22	; 0x16
    7e96:	b7 89       	ldd	r27, Z+23	; 0x17
    7e98:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    7e9a:	a0 89       	ldd	r26, Z+16	; 0x10
    7e9c:	b1 89       	ldd	r27, Z+17	; 0x11
    7e9e:	8c 91       	ld	r24, X
    7ea0:	83 70       	andi	r24, 0x03	; 3
    7ea2:	80 64       	ori	r24, 0x40	; 64
    7ea4:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    7ea6:	93 8d       	ldd	r25, Z+27	; 0x1b
    7ea8:	84 8d       	ldd	r24, Z+28	; 0x1c
    7eaa:	98 13       	cpse	r25, r24
    7eac:	06 c0       	rjmp	.+12     	; 0x7eba <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    7eae:	02 88       	ldd	r0, Z+18	; 0x12
    7eb0:	f3 89       	ldd	r31, Z+19	; 0x13
    7eb2:	e0 2d       	mov	r30, r0
    7eb4:	80 81       	ld	r24, Z
    7eb6:	8f 7d       	andi	r24, 0xDF	; 223
    7eb8:	80 83       	st	Z, r24
    7eba:	08 95       	ret

00007ebc <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    7ebc:	ef 92       	push	r14
    7ebe:	ff 92       	push	r15
    7ec0:	0f 93       	push	r16
    7ec2:	1f 93       	push	r17
    7ec4:	cf 93       	push	r28
    7ec6:	df 93       	push	r29
    7ec8:	ec 01       	movw	r28, r24
  _written = true;
    7eca:	81 e0       	ldi	r24, 0x01	; 1
    7ecc:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    7ece:	9b 8d       	ldd	r25, Y+27	; 0x1b
    7ed0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    7ed2:	98 13       	cpse	r25, r24
    7ed4:	05 c0       	rjmp	.+10     	; 0x7ee0 <_ZN14HardwareSerial5writeEh+0x24>
    7ed6:	e8 89       	ldd	r30, Y+16	; 0x10
    7ed8:	f9 89       	ldd	r31, Y+17	; 0x11
    7eda:	80 81       	ld	r24, Z
    7edc:	85 fd       	sbrc	r24, 5
    7ede:	25 c0       	rjmp	.+74     	; 0x7f2a <_ZN14HardwareSerial5writeEh+0x6e>
    7ee0:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    7ee2:	0b 8d       	ldd	r16, Y+27	; 0x1b
    7ee4:	10 e0       	ldi	r17, 0x00	; 0
    7ee6:	0f 5f       	subi	r16, 0xFF	; 255
    7ee8:	1f 4f       	sbci	r17, 0xFF	; 255
    7eea:	0f 73       	andi	r16, 0x3F	; 63
    7eec:	11 27       	eor	r17, r17
    7eee:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    7ef0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    7ef2:	e8 12       	cpse	r14, r24
    7ef4:	0b c0       	rjmp	.+22     	; 0x7f0c <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    7ef6:	0f b6       	in	r0, 0x3f	; 63
    7ef8:	07 fc       	sbrc	r0, 7
    7efa:	fa cf       	rjmp	.-12     	; 0x7ef0 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    7efc:	e8 89       	ldd	r30, Y+16	; 0x10
    7efe:	f9 89       	ldd	r31, Y+17	; 0x11
    7f00:	80 81       	ld	r24, Z
    7f02:	85 ff       	sbrs	r24, 5
    7f04:	f5 cf       	rjmp	.-22     	; 0x7ef0 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    7f06:	ce 01       	movw	r24, r28
    7f08:	b7 df       	rcall	.-146    	; 0x7e78 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    7f0a:	f2 cf       	rjmp	.-28     	; 0x7ef0 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    7f0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7f0e:	fe 01       	movw	r30, r28
    7f10:	e8 0f       	add	r30, r24
    7f12:	f1 1d       	adc	r31, r1
    7f14:	e3 5a       	subi	r30, 0xA3	; 163
    7f16:	ff 4f       	sbci	r31, 0xFF	; 255
    7f18:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    7f1a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    7f1c:	f8 94       	cli
    _tx_buffer_head = i;
    7f1e:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    7f20:	ea 89       	ldd	r30, Y+18	; 0x12
    7f22:	fb 89       	ldd	r31, Y+19	; 0x13
    7f24:	80 81       	ld	r24, Z
    7f26:	80 62       	ori	r24, 0x20	; 32
    7f28:	0a c0       	rjmp	.+20     	; 0x7f3e <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    7f2a:	9f b7       	in	r25, 0x3f	; 63
    7f2c:	f8 94       	cli
      *_udr = c;
    7f2e:	ee 89       	ldd	r30, Y+22	; 0x16
    7f30:	ff 89       	ldd	r31, Y+23	; 0x17
    7f32:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    7f34:	e8 89       	ldd	r30, Y+16	; 0x10
    7f36:	f9 89       	ldd	r31, Y+17	; 0x11
    7f38:	80 81       	ld	r24, Z
    7f3a:	83 70       	andi	r24, 0x03	; 3
    7f3c:	80 64       	ori	r24, 0x40	; 64
    7f3e:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    7f40:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    7f42:	81 e0       	ldi	r24, 0x01	; 1
    7f44:	90 e0       	ldi	r25, 0x00	; 0
    7f46:	df 91       	pop	r29
    7f48:	cf 91       	pop	r28
    7f4a:	1f 91       	pop	r17
    7f4c:	0f 91       	pop	r16
    7f4e:	ff 90       	pop	r15
    7f50:	ef 90       	pop	r14
    7f52:	08 95       	ret

00007f54 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    7f54:	cf 93       	push	r28
    7f56:	df 93       	push	r29
    7f58:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    7f5a:	88 8d       	ldd	r24, Y+24	; 0x18
    7f5c:	88 23       	and	r24, r24
    7f5e:	c1 f0       	breq	.+48     	; 0x7f90 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    7f60:	ea 89       	ldd	r30, Y+18	; 0x12
    7f62:	fb 89       	ldd	r31, Y+19	; 0x13
    7f64:	80 81       	ld	r24, Z
    7f66:	85 fd       	sbrc	r24, 5
    7f68:	05 c0       	rjmp	.+10     	; 0x7f74 <_ZN14HardwareSerial5flushEv+0x20>
    7f6a:	a8 89       	ldd	r26, Y+16	; 0x10
    7f6c:	b9 89       	ldd	r27, Y+17	; 0x11
    7f6e:	8c 91       	ld	r24, X
    7f70:	86 fd       	sbrc	r24, 6
    7f72:	0e c0       	rjmp	.+28     	; 0x7f90 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    7f74:	0f b6       	in	r0, 0x3f	; 63
    7f76:	07 fc       	sbrc	r0, 7
    7f78:	f5 cf       	rjmp	.-22     	; 0x7f64 <_ZN14HardwareSerial5flushEv+0x10>
    7f7a:	80 81       	ld	r24, Z
    7f7c:	85 ff       	sbrs	r24, 5
    7f7e:	f2 cf       	rjmp	.-28     	; 0x7f64 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    7f80:	a8 89       	ldd	r26, Y+16	; 0x10
    7f82:	b9 89       	ldd	r27, Y+17	; 0x11
    7f84:	8c 91       	ld	r24, X
    7f86:	85 ff       	sbrs	r24, 5
    7f88:	ed cf       	rjmp	.-38     	; 0x7f64 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    7f8a:	ce 01       	movw	r24, r28
    7f8c:	75 df       	rcall	.-278    	; 0x7e78 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    7f8e:	e8 cf       	rjmp	.-48     	; 0x7f60 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    7f90:	df 91       	pop	r29
    7f92:	cf 91       	pop	r28
    7f94:	08 95       	ret

00007f96 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    7f96:	08 95       	ret

00007f98 <__udivmodqi4>:
    7f98:	99 1b       	sub	r25, r25
    7f9a:	79 e0       	ldi	r23, 0x09	; 9
    7f9c:	04 c0       	rjmp	.+8      	; 0x7fa6 <__udivmodqi4_ep>

00007f9e <__udivmodqi4_loop>:
    7f9e:	99 1f       	adc	r25, r25
    7fa0:	96 17       	cp	r25, r22
    7fa2:	08 f0       	brcs	.+2      	; 0x7fa6 <__udivmodqi4_ep>
    7fa4:	96 1b       	sub	r25, r22

00007fa6 <__udivmodqi4_ep>:
    7fa6:	88 1f       	adc	r24, r24
    7fa8:	7a 95       	dec	r23
    7faa:	c9 f7       	brne	.-14     	; 0x7f9e <__udivmodqi4_loop>
    7fac:	80 95       	com	r24
    7fae:	08 95       	ret

00007fb0 <__udivmodhi4>:
    7fb0:	aa 1b       	sub	r26, r26
    7fb2:	bb 1b       	sub	r27, r27
    7fb4:	51 e1       	ldi	r21, 0x11	; 17
    7fb6:	07 c0       	rjmp	.+14     	; 0x7fc6 <__udivmodhi4_ep>

00007fb8 <__udivmodhi4_loop>:
    7fb8:	aa 1f       	adc	r26, r26
    7fba:	bb 1f       	adc	r27, r27
    7fbc:	a6 17       	cp	r26, r22
    7fbe:	b7 07       	cpc	r27, r23
    7fc0:	10 f0       	brcs	.+4      	; 0x7fc6 <__udivmodhi4_ep>
    7fc2:	a6 1b       	sub	r26, r22
    7fc4:	b7 0b       	sbc	r27, r23

00007fc6 <__udivmodhi4_ep>:
    7fc6:	88 1f       	adc	r24, r24
    7fc8:	99 1f       	adc	r25, r25
    7fca:	5a 95       	dec	r21
    7fcc:	a9 f7       	brne	.-22     	; 0x7fb8 <__udivmodhi4_loop>
    7fce:	80 95       	com	r24
    7fd0:	90 95       	com	r25
    7fd2:	bc 01       	movw	r22, r24
    7fd4:	cd 01       	movw	r24, r26
    7fd6:	08 95       	ret

00007fd8 <__udivmodsi4>:
    7fd8:	a1 e2       	ldi	r26, 0x21	; 33
    7fda:	1a 2e       	mov	r1, r26
    7fdc:	aa 1b       	sub	r26, r26
    7fde:	bb 1b       	sub	r27, r27
    7fe0:	fd 01       	movw	r30, r26
    7fe2:	0d c0       	rjmp	.+26     	; 0x7ffe <__udivmodsi4_ep>

00007fe4 <__udivmodsi4_loop>:
    7fe4:	aa 1f       	adc	r26, r26
    7fe6:	bb 1f       	adc	r27, r27
    7fe8:	ee 1f       	adc	r30, r30
    7fea:	ff 1f       	adc	r31, r31
    7fec:	a2 17       	cp	r26, r18
    7fee:	b3 07       	cpc	r27, r19
    7ff0:	e4 07       	cpc	r30, r20
    7ff2:	f5 07       	cpc	r31, r21
    7ff4:	20 f0       	brcs	.+8      	; 0x7ffe <__udivmodsi4_ep>
    7ff6:	a2 1b       	sub	r26, r18
    7ff8:	b3 0b       	sbc	r27, r19
    7ffa:	e4 0b       	sbc	r30, r20
    7ffc:	f5 0b       	sbc	r31, r21

00007ffe <__udivmodsi4_ep>:
    7ffe:	66 1f       	adc	r22, r22
    8000:	77 1f       	adc	r23, r23
    8002:	88 1f       	adc	r24, r24
    8004:	99 1f       	adc	r25, r25
    8006:	1a 94       	dec	r1
    8008:	69 f7       	brne	.-38     	; 0x7fe4 <__udivmodsi4_loop>
    800a:	60 95       	com	r22
    800c:	70 95       	com	r23
    800e:	80 95       	com	r24
    8010:	90 95       	com	r25
    8012:	9b 01       	movw	r18, r22
    8014:	ac 01       	movw	r20, r24
    8016:	bd 01       	movw	r22, r26
    8018:	cf 01       	movw	r24, r30
    801a:	08 95       	ret

0000801c <__tablejump2__>:
    801c:	ee 0f       	add	r30, r30
    801e:	ff 1f       	adc	r31, r31
    8020:	00 24       	eor	r0, r0
    8022:	00 1c       	adc	r0, r0
    8024:	0b be       	out	0x3b, r0	; 59
    8026:	07 90       	elpm	r0, Z+
    8028:	f6 91       	elpm	r31, Z
    802a:	e0 2d       	mov	r30, r0
    802c:	09 94       	ijmp

0000802e <__umulhisi3>:
    802e:	a2 9f       	mul	r26, r18
    8030:	b0 01       	movw	r22, r0
    8032:	b3 9f       	mul	r27, r19
    8034:	c0 01       	movw	r24, r0
    8036:	a3 9f       	mul	r26, r19
    8038:	70 0d       	add	r23, r0
    803a:	81 1d       	adc	r24, r1
    803c:	11 24       	eor	r1, r1
    803e:	91 1d       	adc	r25, r1
    8040:	b2 9f       	mul	r27, r18
    8042:	70 0d       	add	r23, r0
    8044:	81 1d       	adc	r24, r1
    8046:	11 24       	eor	r1, r1
    8048:	91 1d       	adc	r25, r1
    804a:	08 95       	ret

0000804c <__muluhisi3>:
    804c:	f0 df       	rcall	.-32     	; 0x802e <__umulhisi3>
    804e:	a5 9f       	mul	r26, r21
    8050:	90 0d       	add	r25, r0
    8052:	b4 9f       	mul	r27, r20
    8054:	90 0d       	add	r25, r0
    8056:	a4 9f       	mul	r26, r20
    8058:	80 0d       	add	r24, r0
    805a:	91 1d       	adc	r25, r1
    805c:	11 24       	eor	r1, r1
    805e:	08 95       	ret

00008060 <dtostrf>:
    8060:	ef 92       	push	r14
    8062:	0f 93       	push	r16
    8064:	1f 93       	push	r17
    8066:	cf 93       	push	r28
    8068:	df 93       	push	r29
    806a:	e8 01       	movw	r28, r16
    806c:	47 fd       	sbrc	r20, 7
    806e:	02 c0       	rjmp	.+4      	; 0x8074 <dtostrf+0x14>
    8070:	34 e0       	ldi	r19, 0x04	; 4
    8072:	01 c0       	rjmp	.+2      	; 0x8076 <dtostrf+0x16>
    8074:	34 e1       	ldi	r19, 0x14	; 20
    8076:	04 2e       	mov	r0, r20
    8078:	00 0c       	add	r0, r0
    807a:	55 0b       	sbc	r21, r21
    807c:	57 ff       	sbrs	r21, 7
    807e:	03 c0       	rjmp	.+6      	; 0x8086 <dtostrf+0x26>
    8080:	51 95       	neg	r21
    8082:	41 95       	neg	r20
    8084:	51 09       	sbc	r21, r1
    8086:	e3 2e       	mov	r14, r19
    8088:	02 2f       	mov	r16, r18
    808a:	24 2f       	mov	r18, r20
    808c:	ae 01       	movw	r20, r28
    808e:	f0 d2       	rcall	.+1504   	; 0x8670 <dtoa_prf>
    8090:	ce 01       	movw	r24, r28
    8092:	df 91       	pop	r29
    8094:	cf 91       	pop	r28
    8096:	1f 91       	pop	r17
    8098:	0f 91       	pop	r16
    809a:	ef 90       	pop	r14
    809c:	08 95       	ret

0000809e <malloc>:
    809e:	0f 93       	push	r16
    80a0:	1f 93       	push	r17
    80a2:	cf 93       	push	r28
    80a4:	df 93       	push	r29
    80a6:	82 30       	cpi	r24, 0x02	; 2
    80a8:	91 05       	cpc	r25, r1
    80aa:	10 f4       	brcc	.+4      	; 0x80b0 <malloc+0x12>
    80ac:	82 e0       	ldi	r24, 0x02	; 2
    80ae:	90 e0       	ldi	r25, 0x00	; 0
    80b0:	e0 91 c6 0d 	lds	r30, 0x0DC6	; 0x800dc6 <__flp>
    80b4:	f0 91 c7 0d 	lds	r31, 0x0DC7	; 0x800dc7 <__flp+0x1>
    80b8:	20 e0       	ldi	r18, 0x00	; 0
    80ba:	30 e0       	ldi	r19, 0x00	; 0
    80bc:	a0 e0       	ldi	r26, 0x00	; 0
    80be:	b0 e0       	ldi	r27, 0x00	; 0
    80c0:	30 97       	sbiw	r30, 0x00	; 0
    80c2:	19 f1       	breq	.+70     	; 0x810a <malloc+0x6c>
    80c4:	40 81       	ld	r20, Z
    80c6:	51 81       	ldd	r21, Z+1	; 0x01
    80c8:	02 81       	ldd	r16, Z+2	; 0x02
    80ca:	13 81       	ldd	r17, Z+3	; 0x03
    80cc:	48 17       	cp	r20, r24
    80ce:	59 07       	cpc	r21, r25
    80d0:	c8 f0       	brcs	.+50     	; 0x8104 <malloc+0x66>
    80d2:	84 17       	cp	r24, r20
    80d4:	95 07       	cpc	r25, r21
    80d6:	69 f4       	brne	.+26     	; 0x80f2 <malloc+0x54>
    80d8:	10 97       	sbiw	r26, 0x00	; 0
    80da:	31 f0       	breq	.+12     	; 0x80e8 <malloc+0x4a>
    80dc:	12 96       	adiw	r26, 0x02	; 2
    80de:	0c 93       	st	X, r16
    80e0:	12 97       	sbiw	r26, 0x02	; 2
    80e2:	13 96       	adiw	r26, 0x03	; 3
    80e4:	1c 93       	st	X, r17
    80e6:	27 c0       	rjmp	.+78     	; 0x8136 <malloc+0x98>
    80e8:	00 93 c6 0d 	sts	0x0DC6, r16	; 0x800dc6 <__flp>
    80ec:	10 93 c7 0d 	sts	0x0DC7, r17	; 0x800dc7 <__flp+0x1>
    80f0:	22 c0       	rjmp	.+68     	; 0x8136 <malloc+0x98>
    80f2:	21 15       	cp	r18, r1
    80f4:	31 05       	cpc	r19, r1
    80f6:	19 f0       	breq	.+6      	; 0x80fe <malloc+0x60>
    80f8:	42 17       	cp	r20, r18
    80fa:	53 07       	cpc	r21, r19
    80fc:	18 f4       	brcc	.+6      	; 0x8104 <malloc+0x66>
    80fe:	9a 01       	movw	r18, r20
    8100:	bd 01       	movw	r22, r26
    8102:	ef 01       	movw	r28, r30
    8104:	df 01       	movw	r26, r30
    8106:	f8 01       	movw	r30, r16
    8108:	db cf       	rjmp	.-74     	; 0x80c0 <malloc+0x22>
    810a:	21 15       	cp	r18, r1
    810c:	31 05       	cpc	r19, r1
    810e:	f9 f0       	breq	.+62     	; 0x814e <malloc+0xb0>
    8110:	28 1b       	sub	r18, r24
    8112:	39 0b       	sbc	r19, r25
    8114:	24 30       	cpi	r18, 0x04	; 4
    8116:	31 05       	cpc	r19, r1
    8118:	80 f4       	brcc	.+32     	; 0x813a <malloc+0x9c>
    811a:	8a 81       	ldd	r24, Y+2	; 0x02
    811c:	9b 81       	ldd	r25, Y+3	; 0x03
    811e:	61 15       	cp	r22, r1
    8120:	71 05       	cpc	r23, r1
    8122:	21 f0       	breq	.+8      	; 0x812c <malloc+0x8e>
    8124:	fb 01       	movw	r30, r22
    8126:	93 83       	std	Z+3, r25	; 0x03
    8128:	82 83       	std	Z+2, r24	; 0x02
    812a:	04 c0       	rjmp	.+8      	; 0x8134 <malloc+0x96>
    812c:	90 93 c7 0d 	sts	0x0DC7, r25	; 0x800dc7 <__flp+0x1>
    8130:	80 93 c6 0d 	sts	0x0DC6, r24	; 0x800dc6 <__flp>
    8134:	fe 01       	movw	r30, r28
    8136:	32 96       	adiw	r30, 0x02	; 2
    8138:	44 c0       	rjmp	.+136    	; 0x81c2 <malloc+0x124>
    813a:	fe 01       	movw	r30, r28
    813c:	e2 0f       	add	r30, r18
    813e:	f3 1f       	adc	r31, r19
    8140:	81 93       	st	Z+, r24
    8142:	91 93       	st	Z+, r25
    8144:	22 50       	subi	r18, 0x02	; 2
    8146:	31 09       	sbc	r19, r1
    8148:	39 83       	std	Y+1, r19	; 0x01
    814a:	28 83       	st	Y, r18
    814c:	3a c0       	rjmp	.+116    	; 0x81c2 <malloc+0x124>
    814e:	20 91 c4 0d 	lds	r18, 0x0DC4	; 0x800dc4 <__brkval>
    8152:	30 91 c5 0d 	lds	r19, 0x0DC5	; 0x800dc5 <__brkval+0x1>
    8156:	23 2b       	or	r18, r19
    8158:	41 f4       	brne	.+16     	; 0x816a <malloc+0xcc>
    815a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    815e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    8162:	30 93 c5 0d 	sts	0x0DC5, r19	; 0x800dc5 <__brkval+0x1>
    8166:	20 93 c4 0d 	sts	0x0DC4, r18	; 0x800dc4 <__brkval>
    816a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    816e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    8172:	21 15       	cp	r18, r1
    8174:	31 05       	cpc	r19, r1
    8176:	41 f4       	brne	.+16     	; 0x8188 <malloc+0xea>
    8178:	2d b7       	in	r18, 0x3d	; 61
    817a:	3e b7       	in	r19, 0x3e	; 62
    817c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    8180:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    8184:	24 1b       	sub	r18, r20
    8186:	35 0b       	sbc	r19, r21
    8188:	e0 91 c4 0d 	lds	r30, 0x0DC4	; 0x800dc4 <__brkval>
    818c:	f0 91 c5 0d 	lds	r31, 0x0DC5	; 0x800dc5 <__brkval+0x1>
    8190:	e2 17       	cp	r30, r18
    8192:	f3 07       	cpc	r31, r19
    8194:	a0 f4       	brcc	.+40     	; 0x81be <malloc+0x120>
    8196:	2e 1b       	sub	r18, r30
    8198:	3f 0b       	sbc	r19, r31
    819a:	28 17       	cp	r18, r24
    819c:	39 07       	cpc	r19, r25
    819e:	78 f0       	brcs	.+30     	; 0x81be <malloc+0x120>
    81a0:	ac 01       	movw	r20, r24
    81a2:	4e 5f       	subi	r20, 0xFE	; 254
    81a4:	5f 4f       	sbci	r21, 0xFF	; 255
    81a6:	24 17       	cp	r18, r20
    81a8:	35 07       	cpc	r19, r21
    81aa:	48 f0       	brcs	.+18     	; 0x81be <malloc+0x120>
    81ac:	4e 0f       	add	r20, r30
    81ae:	5f 1f       	adc	r21, r31
    81b0:	50 93 c5 0d 	sts	0x0DC5, r21	; 0x800dc5 <__brkval+0x1>
    81b4:	40 93 c4 0d 	sts	0x0DC4, r20	; 0x800dc4 <__brkval>
    81b8:	81 93       	st	Z+, r24
    81ba:	91 93       	st	Z+, r25
    81bc:	02 c0       	rjmp	.+4      	; 0x81c2 <malloc+0x124>
    81be:	e0 e0       	ldi	r30, 0x00	; 0
    81c0:	f0 e0       	ldi	r31, 0x00	; 0
    81c2:	cf 01       	movw	r24, r30
    81c4:	df 91       	pop	r29
    81c6:	cf 91       	pop	r28
    81c8:	1f 91       	pop	r17
    81ca:	0f 91       	pop	r16
    81cc:	08 95       	ret

000081ce <free>:
    81ce:	cf 93       	push	r28
    81d0:	df 93       	push	r29
    81d2:	00 97       	sbiw	r24, 0x00	; 0
    81d4:	09 f4       	brne	.+2      	; 0x81d8 <free+0xa>
    81d6:	81 c0       	rjmp	.+258    	; 0x82da <free+0x10c>
    81d8:	fc 01       	movw	r30, r24
    81da:	32 97       	sbiw	r30, 0x02	; 2
    81dc:	13 82       	std	Z+3, r1	; 0x03
    81de:	12 82       	std	Z+2, r1	; 0x02
    81e0:	a0 91 c6 0d 	lds	r26, 0x0DC6	; 0x800dc6 <__flp>
    81e4:	b0 91 c7 0d 	lds	r27, 0x0DC7	; 0x800dc7 <__flp+0x1>
    81e8:	10 97       	sbiw	r26, 0x00	; 0
    81ea:	81 f4       	brne	.+32     	; 0x820c <free+0x3e>
    81ec:	20 81       	ld	r18, Z
    81ee:	31 81       	ldd	r19, Z+1	; 0x01
    81f0:	82 0f       	add	r24, r18
    81f2:	93 1f       	adc	r25, r19
    81f4:	20 91 c4 0d 	lds	r18, 0x0DC4	; 0x800dc4 <__brkval>
    81f8:	30 91 c5 0d 	lds	r19, 0x0DC5	; 0x800dc5 <__brkval+0x1>
    81fc:	28 17       	cp	r18, r24
    81fe:	39 07       	cpc	r19, r25
    8200:	51 f5       	brne	.+84     	; 0x8256 <free+0x88>
    8202:	f0 93 c5 0d 	sts	0x0DC5, r31	; 0x800dc5 <__brkval+0x1>
    8206:	e0 93 c4 0d 	sts	0x0DC4, r30	; 0x800dc4 <__brkval>
    820a:	67 c0       	rjmp	.+206    	; 0x82da <free+0x10c>
    820c:	ed 01       	movw	r28, r26
    820e:	20 e0       	ldi	r18, 0x00	; 0
    8210:	30 e0       	ldi	r19, 0x00	; 0
    8212:	ce 17       	cp	r28, r30
    8214:	df 07       	cpc	r29, r31
    8216:	40 f4       	brcc	.+16     	; 0x8228 <free+0x5a>
    8218:	4a 81       	ldd	r20, Y+2	; 0x02
    821a:	5b 81       	ldd	r21, Y+3	; 0x03
    821c:	9e 01       	movw	r18, r28
    821e:	41 15       	cp	r20, r1
    8220:	51 05       	cpc	r21, r1
    8222:	f1 f0       	breq	.+60     	; 0x8260 <free+0x92>
    8224:	ea 01       	movw	r28, r20
    8226:	f5 cf       	rjmp	.-22     	; 0x8212 <free+0x44>
    8228:	d3 83       	std	Z+3, r29	; 0x03
    822a:	c2 83       	std	Z+2, r28	; 0x02
    822c:	40 81       	ld	r20, Z
    822e:	51 81       	ldd	r21, Z+1	; 0x01
    8230:	84 0f       	add	r24, r20
    8232:	95 1f       	adc	r25, r21
    8234:	c8 17       	cp	r28, r24
    8236:	d9 07       	cpc	r29, r25
    8238:	59 f4       	brne	.+22     	; 0x8250 <free+0x82>
    823a:	88 81       	ld	r24, Y
    823c:	99 81       	ldd	r25, Y+1	; 0x01
    823e:	84 0f       	add	r24, r20
    8240:	95 1f       	adc	r25, r21
    8242:	02 96       	adiw	r24, 0x02	; 2
    8244:	91 83       	std	Z+1, r25	; 0x01
    8246:	80 83       	st	Z, r24
    8248:	8a 81       	ldd	r24, Y+2	; 0x02
    824a:	9b 81       	ldd	r25, Y+3	; 0x03
    824c:	93 83       	std	Z+3, r25	; 0x03
    824e:	82 83       	std	Z+2, r24	; 0x02
    8250:	21 15       	cp	r18, r1
    8252:	31 05       	cpc	r19, r1
    8254:	29 f4       	brne	.+10     	; 0x8260 <free+0x92>
    8256:	f0 93 c7 0d 	sts	0x0DC7, r31	; 0x800dc7 <__flp+0x1>
    825a:	e0 93 c6 0d 	sts	0x0DC6, r30	; 0x800dc6 <__flp>
    825e:	3d c0       	rjmp	.+122    	; 0x82da <free+0x10c>
    8260:	e9 01       	movw	r28, r18
    8262:	fb 83       	std	Y+3, r31	; 0x03
    8264:	ea 83       	std	Y+2, r30	; 0x02
    8266:	49 91       	ld	r20, Y+
    8268:	59 91       	ld	r21, Y+
    826a:	c4 0f       	add	r28, r20
    826c:	d5 1f       	adc	r29, r21
    826e:	ec 17       	cp	r30, r28
    8270:	fd 07       	cpc	r31, r29
    8272:	61 f4       	brne	.+24     	; 0x828c <free+0xbe>
    8274:	80 81       	ld	r24, Z
    8276:	91 81       	ldd	r25, Z+1	; 0x01
    8278:	84 0f       	add	r24, r20
    827a:	95 1f       	adc	r25, r21
    827c:	02 96       	adiw	r24, 0x02	; 2
    827e:	e9 01       	movw	r28, r18
    8280:	99 83       	std	Y+1, r25	; 0x01
    8282:	88 83       	st	Y, r24
    8284:	82 81       	ldd	r24, Z+2	; 0x02
    8286:	93 81       	ldd	r25, Z+3	; 0x03
    8288:	9b 83       	std	Y+3, r25	; 0x03
    828a:	8a 83       	std	Y+2, r24	; 0x02
    828c:	e0 e0       	ldi	r30, 0x00	; 0
    828e:	f0 e0       	ldi	r31, 0x00	; 0
    8290:	12 96       	adiw	r26, 0x02	; 2
    8292:	8d 91       	ld	r24, X+
    8294:	9c 91       	ld	r25, X
    8296:	13 97       	sbiw	r26, 0x03	; 3
    8298:	00 97       	sbiw	r24, 0x00	; 0
    829a:	19 f0       	breq	.+6      	; 0x82a2 <free+0xd4>
    829c:	fd 01       	movw	r30, r26
    829e:	dc 01       	movw	r26, r24
    82a0:	f7 cf       	rjmp	.-18     	; 0x8290 <free+0xc2>
    82a2:	8d 91       	ld	r24, X+
    82a4:	9c 91       	ld	r25, X
    82a6:	11 97       	sbiw	r26, 0x01	; 1
    82a8:	9d 01       	movw	r18, r26
    82aa:	2e 5f       	subi	r18, 0xFE	; 254
    82ac:	3f 4f       	sbci	r19, 0xFF	; 255
    82ae:	82 0f       	add	r24, r18
    82b0:	93 1f       	adc	r25, r19
    82b2:	20 91 c4 0d 	lds	r18, 0x0DC4	; 0x800dc4 <__brkval>
    82b6:	30 91 c5 0d 	lds	r19, 0x0DC5	; 0x800dc5 <__brkval+0x1>
    82ba:	28 17       	cp	r18, r24
    82bc:	39 07       	cpc	r19, r25
    82be:	69 f4       	brne	.+26     	; 0x82da <free+0x10c>
    82c0:	30 97       	sbiw	r30, 0x00	; 0
    82c2:	29 f4       	brne	.+10     	; 0x82ce <free+0x100>
    82c4:	10 92 c7 0d 	sts	0x0DC7, r1	; 0x800dc7 <__flp+0x1>
    82c8:	10 92 c6 0d 	sts	0x0DC6, r1	; 0x800dc6 <__flp>
    82cc:	02 c0       	rjmp	.+4      	; 0x82d2 <free+0x104>
    82ce:	13 82       	std	Z+3, r1	; 0x03
    82d0:	12 82       	std	Z+2, r1	; 0x02
    82d2:	b0 93 c5 0d 	sts	0x0DC5, r27	; 0x800dc5 <__brkval+0x1>
    82d6:	a0 93 c4 0d 	sts	0x0DC4, r26	; 0x800dc4 <__brkval>
    82da:	df 91       	pop	r29
    82dc:	cf 91       	pop	r28
    82de:	08 95       	ret

000082e0 <realloc>:
    82e0:	6f 92       	push	r6
    82e2:	7f 92       	push	r7
    82e4:	8f 92       	push	r8
    82e6:	9f 92       	push	r9
    82e8:	af 92       	push	r10
    82ea:	bf 92       	push	r11
    82ec:	cf 92       	push	r12
    82ee:	df 92       	push	r13
    82f0:	ef 92       	push	r14
    82f2:	ff 92       	push	r15
    82f4:	0f 93       	push	r16
    82f6:	1f 93       	push	r17
    82f8:	cf 93       	push	r28
    82fa:	df 93       	push	r29
    82fc:	00 97       	sbiw	r24, 0x00	; 0
    82fe:	81 f4       	brne	.+32     	; 0x8320 <realloc+0x40>
    8300:	cb 01       	movw	r24, r22
    8302:	df 91       	pop	r29
    8304:	cf 91       	pop	r28
    8306:	1f 91       	pop	r17
    8308:	0f 91       	pop	r16
    830a:	ff 90       	pop	r15
    830c:	ef 90       	pop	r14
    830e:	df 90       	pop	r13
    8310:	cf 90       	pop	r12
    8312:	bf 90       	pop	r11
    8314:	af 90       	pop	r10
    8316:	9f 90       	pop	r9
    8318:	8f 90       	pop	r8
    831a:	7f 90       	pop	r7
    831c:	6f 90       	pop	r6
    831e:	bf ce       	rjmp	.-642    	; 0x809e <malloc>
    8320:	fc 01       	movw	r30, r24
    8322:	e6 0f       	add	r30, r22
    8324:	f7 1f       	adc	r31, r23
    8326:	9c 01       	movw	r18, r24
    8328:	22 50       	subi	r18, 0x02	; 2
    832a:	31 09       	sbc	r19, r1
    832c:	e2 17       	cp	r30, r18
    832e:	f3 07       	cpc	r31, r19
    8330:	08 f4       	brcc	.+2      	; 0x8334 <realloc+0x54>
    8332:	a5 c0       	rjmp	.+330    	; 0x847e <realloc+0x19e>
    8334:	ec 01       	movw	r28, r24
    8336:	d9 01       	movw	r26, r18
    8338:	0d 91       	ld	r16, X+
    833a:	1c 91       	ld	r17, X
    833c:	11 97       	sbiw	r26, 0x01	; 1
    833e:	06 17       	cp	r16, r22
    8340:	17 07       	cpc	r17, r23
    8342:	a8 f0       	brcs	.+42     	; 0x836e <realloc+0x8e>
    8344:	05 30       	cpi	r16, 0x05	; 5
    8346:	11 05       	cpc	r17, r1
    8348:	08 f4       	brcc	.+2      	; 0x834c <realloc+0x6c>
    834a:	97 c0       	rjmp	.+302    	; 0x847a <realloc+0x19a>
    834c:	c8 01       	movw	r24, r16
    834e:	04 97       	sbiw	r24, 0x04	; 4
    8350:	86 17       	cp	r24, r22
    8352:	97 07       	cpc	r25, r23
    8354:	08 f4       	brcc	.+2      	; 0x8358 <realloc+0x78>
    8356:	91 c0       	rjmp	.+290    	; 0x847a <realloc+0x19a>
    8358:	02 50       	subi	r16, 0x02	; 2
    835a:	11 09       	sbc	r17, r1
    835c:	06 1b       	sub	r16, r22
    835e:	17 0b       	sbc	r17, r23
    8360:	01 93       	st	Z+, r16
    8362:	11 93       	st	Z+, r17
    8364:	6d 93       	st	X+, r22
    8366:	7c 93       	st	X, r23
    8368:	cf 01       	movw	r24, r30
    836a:	31 df       	rcall	.-414    	; 0x81ce <free>
    836c:	86 c0       	rjmp	.+268    	; 0x847a <realloc+0x19a>
    836e:	5b 01       	movw	r10, r22
    8370:	a0 1a       	sub	r10, r16
    8372:	b1 0a       	sbc	r11, r17
    8374:	4c 01       	movw	r8, r24
    8376:	80 0e       	add	r8, r16
    8378:	91 1e       	adc	r9, r17
    837a:	a0 91 c6 0d 	lds	r26, 0x0DC6	; 0x800dc6 <__flp>
    837e:	b0 91 c7 0d 	lds	r27, 0x0DC7	; 0x800dc7 <__flp+0x1>
    8382:	61 2c       	mov	r6, r1
    8384:	71 2c       	mov	r7, r1
    8386:	e1 2c       	mov	r14, r1
    8388:	f1 2c       	mov	r15, r1
    838a:	10 97       	sbiw	r26, 0x00	; 0
    838c:	09 f4       	brne	.+2      	; 0x8390 <realloc+0xb0>
    838e:	46 c0       	rjmp	.+140    	; 0x841c <realloc+0x13c>
    8390:	8d 91       	ld	r24, X+
    8392:	9c 91       	ld	r25, X
    8394:	11 97       	sbiw	r26, 0x01	; 1
    8396:	a8 15       	cp	r26, r8
    8398:	b9 05       	cpc	r27, r9
    839a:	b1 f5       	brne	.+108    	; 0x8408 <realloc+0x128>
    839c:	6c 01       	movw	r12, r24
    839e:	42 e0       	ldi	r20, 0x02	; 2
    83a0:	c4 0e       	add	r12, r20
    83a2:	d1 1c       	adc	r13, r1
    83a4:	ca 14       	cp	r12, r10
    83a6:	db 04       	cpc	r13, r11
    83a8:	78 f1       	brcs	.+94     	; 0x8408 <realloc+0x128>
    83aa:	4c 01       	movw	r8, r24
    83ac:	8a 18       	sub	r8, r10
    83ae:	9b 08       	sbc	r9, r11
    83b0:	64 01       	movw	r12, r8
    83b2:	42 e0       	ldi	r20, 0x02	; 2
    83b4:	c4 0e       	add	r12, r20
    83b6:	d1 1c       	adc	r13, r1
    83b8:	12 96       	adiw	r26, 0x02	; 2
    83ba:	bc 90       	ld	r11, X
    83bc:	12 97       	sbiw	r26, 0x02	; 2
    83be:	13 96       	adiw	r26, 0x03	; 3
    83c0:	ac 91       	ld	r26, X
    83c2:	b5 e0       	ldi	r27, 0x05	; 5
    83c4:	cb 16       	cp	r12, r27
    83c6:	d1 04       	cpc	r13, r1
    83c8:	40 f0       	brcs	.+16     	; 0x83da <realloc+0xfa>
    83ca:	b2 82       	std	Z+2, r11	; 0x02
    83cc:	a3 83       	std	Z+3, r26	; 0x03
    83ce:	91 82       	std	Z+1, r9	; 0x01
    83d0:	80 82       	st	Z, r8
    83d2:	d9 01       	movw	r26, r18
    83d4:	6d 93       	st	X+, r22
    83d6:	7c 93       	st	X, r23
    83d8:	09 c0       	rjmp	.+18     	; 0x83ec <realloc+0x10c>
    83da:	0e 5f       	subi	r16, 0xFE	; 254
    83dc:	1f 4f       	sbci	r17, 0xFF	; 255
    83de:	80 0f       	add	r24, r16
    83e0:	91 1f       	adc	r25, r17
    83e2:	f9 01       	movw	r30, r18
    83e4:	91 83       	std	Z+1, r25	; 0x01
    83e6:	80 83       	st	Z, r24
    83e8:	eb 2d       	mov	r30, r11
    83ea:	fa 2f       	mov	r31, r26
    83ec:	e1 14       	cp	r14, r1
    83ee:	f1 04       	cpc	r15, r1
    83f0:	31 f0       	breq	.+12     	; 0x83fe <realloc+0x11e>
    83f2:	d7 01       	movw	r26, r14
    83f4:	13 96       	adiw	r26, 0x03	; 3
    83f6:	fc 93       	st	X, r31
    83f8:	ee 93       	st	-X, r30
    83fa:	12 97       	sbiw	r26, 0x02	; 2
    83fc:	3e c0       	rjmp	.+124    	; 0x847a <realloc+0x19a>
    83fe:	f0 93 c7 0d 	sts	0x0DC7, r31	; 0x800dc7 <__flp+0x1>
    8402:	e0 93 c6 0d 	sts	0x0DC6, r30	; 0x800dc6 <__flp>
    8406:	39 c0       	rjmp	.+114    	; 0x847a <realloc+0x19a>
    8408:	68 16       	cp	r6, r24
    840a:	79 06       	cpc	r7, r25
    840c:	08 f4       	brcc	.+2      	; 0x8410 <realloc+0x130>
    840e:	3c 01       	movw	r6, r24
    8410:	7d 01       	movw	r14, r26
    8412:	12 96       	adiw	r26, 0x02	; 2
    8414:	0d 90       	ld	r0, X+
    8416:	bc 91       	ld	r27, X
    8418:	a0 2d       	mov	r26, r0
    841a:	b7 cf       	rjmp	.-146    	; 0x838a <realloc+0xaa>
    841c:	80 91 c4 0d 	lds	r24, 0x0DC4	; 0x800dc4 <__brkval>
    8420:	90 91 c5 0d 	lds	r25, 0x0DC5	; 0x800dc5 <__brkval+0x1>
    8424:	88 16       	cp	r8, r24
    8426:	99 06       	cpc	r9, r25
    8428:	e1 f4       	brne	.+56     	; 0x8462 <realloc+0x182>
    842a:	66 16       	cp	r6, r22
    842c:	77 06       	cpc	r7, r23
    842e:	c8 f4       	brcc	.+50     	; 0x8462 <realloc+0x182>
    8430:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    8434:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    8438:	00 97       	sbiw	r24, 0x00	; 0
    843a:	41 f4       	brne	.+16     	; 0x844c <realloc+0x16c>
    843c:	8d b7       	in	r24, 0x3d	; 61
    843e:	9e b7       	in	r25, 0x3e	; 62
    8440:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    8444:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    8448:	84 1b       	sub	r24, r20
    844a:	95 0b       	sbc	r25, r21
    844c:	e8 17       	cp	r30, r24
    844e:	f9 07       	cpc	r31, r25
    8450:	b0 f4       	brcc	.+44     	; 0x847e <realloc+0x19e>
    8452:	f0 93 c5 0d 	sts	0x0DC5, r31	; 0x800dc5 <__brkval+0x1>
    8456:	e0 93 c4 0d 	sts	0x0DC4, r30	; 0x800dc4 <__brkval>
    845a:	f9 01       	movw	r30, r18
    845c:	71 83       	std	Z+1, r23	; 0x01
    845e:	60 83       	st	Z, r22
    8460:	0c c0       	rjmp	.+24     	; 0x847a <realloc+0x19a>
    8462:	cb 01       	movw	r24, r22
    8464:	1c de       	rcall	.-968    	; 0x809e <malloc>
    8466:	7c 01       	movw	r14, r24
    8468:	00 97       	sbiw	r24, 0x00	; 0
    846a:	49 f0       	breq	.+18     	; 0x847e <realloc+0x19e>
    846c:	a8 01       	movw	r20, r16
    846e:	be 01       	movw	r22, r28
    8470:	52 d0       	rcall	.+164    	; 0x8516 <memcpy>
    8472:	ce 01       	movw	r24, r28
    8474:	ac de       	rcall	.-680    	; 0x81ce <free>
    8476:	c7 01       	movw	r24, r14
    8478:	04 c0       	rjmp	.+8      	; 0x8482 <realloc+0x1a2>
    847a:	ce 01       	movw	r24, r28
    847c:	02 c0       	rjmp	.+4      	; 0x8482 <realloc+0x1a2>
    847e:	80 e0       	ldi	r24, 0x00	; 0
    8480:	90 e0       	ldi	r25, 0x00	; 0
    8482:	df 91       	pop	r29
    8484:	cf 91       	pop	r28
    8486:	1f 91       	pop	r17
    8488:	0f 91       	pop	r16
    848a:	ff 90       	pop	r15
    848c:	ef 90       	pop	r14
    848e:	df 90       	pop	r13
    8490:	cf 90       	pop	r12
    8492:	bf 90       	pop	r11
    8494:	af 90       	pop	r10
    8496:	9f 90       	pop	r9
    8498:	8f 90       	pop	r8
    849a:	7f 90       	pop	r7
    849c:	6f 90       	pop	r6
    849e:	08 95       	ret

000084a0 <abort>:
    84a0:	81 e0       	ldi	r24, 0x01	; 1
    84a2:	90 e0       	ldi	r25, 0x00	; 0
    84a4:	f8 94       	cli
    84a6:	5b c3       	rjmp	.+1718   	; 0x8b5e <__do_global_dtors>

000084a8 <atol>:
    84a8:	1f 93       	push	r17
    84aa:	fc 01       	movw	r30, r24
    84ac:	99 27       	eor	r25, r25
    84ae:	88 27       	eor	r24, r24
    84b0:	bc 01       	movw	r22, r24
    84b2:	e8 94       	clt
    84b4:	11 91       	ld	r17, Z+
    84b6:	10 32       	cpi	r17, 0x20	; 32
    84b8:	e9 f3       	breq	.-6      	; 0x84b4 <atol+0xc>
    84ba:	19 30       	cpi	r17, 0x09	; 9
    84bc:	10 f0       	brcs	.+4      	; 0x84c2 <atol+0x1a>
    84be:	1e 30       	cpi	r17, 0x0E	; 14
    84c0:	c8 f3       	brcs	.-14     	; 0x84b4 <atol+0xc>
    84c2:	1b 32       	cpi	r17, 0x2B	; 43
    84c4:	49 f0       	breq	.+18     	; 0x84d8 <atol+0x30>
    84c6:	1d 32       	cpi	r17, 0x2D	; 45
    84c8:	41 f4       	brne	.+16     	; 0x84da <atol+0x32>
    84ca:	68 94       	set
    84cc:	05 c0       	rjmp	.+10     	; 0x84d8 <atol+0x30>
    84ce:	6d d0       	rcall	.+218    	; 0x85aa <__mulsi_const_10>
    84d0:	61 0f       	add	r22, r17
    84d2:	71 1d       	adc	r23, r1
    84d4:	81 1d       	adc	r24, r1
    84d6:	91 1d       	adc	r25, r1
    84d8:	11 91       	ld	r17, Z+
    84da:	10 53       	subi	r17, 0x30	; 48
    84dc:	1a 30       	cpi	r17, 0x0A	; 10
    84de:	b8 f3       	brcs	.-18     	; 0x84ce <atol+0x26>
    84e0:	3e f4       	brtc	.+14     	; 0x84f0 <atol+0x48>
    84e2:	90 95       	com	r25
    84e4:	80 95       	com	r24
    84e6:	70 95       	com	r23
    84e8:	61 95       	neg	r22
    84ea:	7f 4f       	sbci	r23, 0xFF	; 255
    84ec:	8f 4f       	sbci	r24, 0xFF	; 255
    84ee:	9f 4f       	sbci	r25, 0xFF	; 255
    84f0:	1f 91       	pop	r17
    84f2:	08 95       	ret

000084f4 <isspace>:
    84f4:	91 11       	cpse	r25, r1
    84f6:	0a c3       	rjmp	.+1556   	; 0x8b0c <__ctype_isfalse>
    84f8:	80 32       	cpi	r24, 0x20	; 32
    84fa:	19 f0       	breq	.+6      	; 0x8502 <isspace+0xe>
    84fc:	89 50       	subi	r24, 0x09	; 9
    84fe:	85 50       	subi	r24, 0x05	; 5
    8500:	d0 f7       	brcc	.-12     	; 0x84f6 <isspace+0x2>
    8502:	08 95       	ret

00008504 <memcpy_P>:
    8504:	fb 01       	movw	r30, r22
    8506:	dc 01       	movw	r26, r24
    8508:	02 c0       	rjmp	.+4      	; 0x850e <memcpy_P+0xa>
    850a:	05 90       	lpm	r0, Z+
    850c:	0d 92       	st	X+, r0
    850e:	41 50       	subi	r20, 0x01	; 1
    8510:	50 40       	sbci	r21, 0x00	; 0
    8512:	d8 f7       	brcc	.-10     	; 0x850a <memcpy_P+0x6>
    8514:	08 95       	ret

00008516 <memcpy>:
    8516:	fb 01       	movw	r30, r22
    8518:	dc 01       	movw	r26, r24
    851a:	02 c0       	rjmp	.+4      	; 0x8520 <memcpy+0xa>
    851c:	01 90       	ld	r0, Z+
    851e:	0d 92       	st	X+, r0
    8520:	41 50       	subi	r20, 0x01	; 1
    8522:	50 40       	sbci	r21, 0x00	; 0
    8524:	d8 f7       	brcc	.-10     	; 0x851c <memcpy+0x6>
    8526:	08 95       	ret

00008528 <strcmp>:
    8528:	fb 01       	movw	r30, r22
    852a:	dc 01       	movw	r26, r24
    852c:	8d 91       	ld	r24, X+
    852e:	01 90       	ld	r0, Z+
    8530:	80 19       	sub	r24, r0
    8532:	01 10       	cpse	r0, r1
    8534:	d9 f3       	breq	.-10     	; 0x852c <strcmp+0x4>
    8536:	99 0b       	sbc	r25, r25
    8538:	08 95       	ret

0000853a <strcpy>:
    853a:	fb 01       	movw	r30, r22
    853c:	dc 01       	movw	r26, r24
    853e:	01 90       	ld	r0, Z+
    8540:	0d 92       	st	X+, r0
    8542:	00 20       	and	r0, r0
    8544:	e1 f7       	brne	.-8      	; 0x853e <strcpy+0x4>
    8546:	08 95       	ret

00008548 <strncmp>:
    8548:	fb 01       	movw	r30, r22
    854a:	dc 01       	movw	r26, r24
    854c:	41 50       	subi	r20, 0x01	; 1
    854e:	50 40       	sbci	r21, 0x00	; 0
    8550:	30 f0       	brcs	.+12     	; 0x855e <strncmp+0x16>
    8552:	8d 91       	ld	r24, X+
    8554:	01 90       	ld	r0, Z+
    8556:	80 19       	sub	r24, r0
    8558:	19 f4       	brne	.+6      	; 0x8560 <strncmp+0x18>
    855a:	00 20       	and	r0, r0
    855c:	b9 f7       	brne	.-18     	; 0x854c <strncmp+0x4>
    855e:	88 1b       	sub	r24, r24
    8560:	99 0b       	sbc	r25, r25
    8562:	08 95       	ret

00008564 <strncpy>:
    8564:	fb 01       	movw	r30, r22
    8566:	dc 01       	movw	r26, r24
    8568:	41 50       	subi	r20, 0x01	; 1
    856a:	50 40       	sbci	r21, 0x00	; 0
    856c:	48 f0       	brcs	.+18     	; 0x8580 <strncpy+0x1c>
    856e:	01 90       	ld	r0, Z+
    8570:	0d 92       	st	X+, r0
    8572:	00 20       	and	r0, r0
    8574:	c9 f7       	brne	.-14     	; 0x8568 <strncpy+0x4>
    8576:	01 c0       	rjmp	.+2      	; 0x857a <strncpy+0x16>
    8578:	1d 92       	st	X+, r1
    857a:	41 50       	subi	r20, 0x01	; 1
    857c:	50 40       	sbci	r21, 0x00	; 0
    857e:	e0 f7       	brcc	.-8      	; 0x8578 <strncpy+0x14>
    8580:	08 95       	ret

00008582 <itoa>:
    8582:	45 32       	cpi	r20, 0x25	; 37
    8584:	51 05       	cpc	r21, r1
    8586:	18 f4       	brcc	.+6      	; 0x858e <itoa+0xc>
    8588:	42 30       	cpi	r20, 0x02	; 2
    858a:	08 f0       	brcs	.+2      	; 0x858e <itoa+0xc>
    858c:	04 c0       	rjmp	.+8      	; 0x8596 <__itoa_ncheck>
    858e:	fb 01       	movw	r30, r22
    8590:	10 82       	st	Z, r1
    8592:	cb 01       	movw	r24, r22
    8594:	08 95       	ret

00008596 <__itoa_ncheck>:
    8596:	bb 27       	eor	r27, r27
    8598:	4a 30       	cpi	r20, 0x0A	; 10
    859a:	31 f4       	brne	.+12     	; 0x85a8 <__itoa_ncheck+0x12>
    859c:	99 23       	and	r25, r25
    859e:	22 f4       	brpl	.+8      	; 0x85a8 <__itoa_ncheck+0x12>
    85a0:	bd e2       	ldi	r27, 0x2D	; 45
    85a2:	90 95       	com	r25
    85a4:	81 95       	neg	r24
    85a6:	9f 4f       	sbci	r25, 0xFF	; 255
    85a8:	4b c0       	rjmp	.+150    	; 0x8640 <__utoa_common>

000085aa <__mulsi_const_10>:
    85aa:	59 2f       	mov	r21, r25
    85ac:	48 2f       	mov	r20, r24
    85ae:	37 2f       	mov	r19, r23
    85b0:	26 2f       	mov	r18, r22
    85b2:	66 0f       	add	r22, r22
    85b4:	77 1f       	adc	r23, r23
    85b6:	88 1f       	adc	r24, r24
    85b8:	99 1f       	adc	r25, r25
    85ba:	66 0f       	add	r22, r22
    85bc:	77 1f       	adc	r23, r23
    85be:	88 1f       	adc	r24, r24
    85c0:	99 1f       	adc	r25, r25
    85c2:	62 0f       	add	r22, r18
    85c4:	73 1f       	adc	r23, r19
    85c6:	84 1f       	adc	r24, r20
    85c8:	95 1f       	adc	r25, r21
    85ca:	66 0f       	add	r22, r22
    85cc:	77 1f       	adc	r23, r23
    85ce:	88 1f       	adc	r24, r24
    85d0:	99 1f       	adc	r25, r25
    85d2:	08 95       	ret

000085d4 <ultoa>:
    85d4:	25 32       	cpi	r18, 0x25	; 37
    85d6:	31 05       	cpc	r19, r1
    85d8:	18 f4       	brcc	.+6      	; 0x85e0 <ultoa+0xc>
    85da:	22 30       	cpi	r18, 0x02	; 2
    85dc:	08 f0       	brcs	.+2      	; 0x85e0 <ultoa+0xc>
    85de:	04 c0       	rjmp	.+8      	; 0x85e8 <__ultoa_ncheck>
    85e0:	fa 01       	movw	r30, r20
    85e2:	10 82       	st	Z, r1
    85e4:	ca 01       	movw	r24, r20
    85e6:	08 95       	ret

000085e8 <__ultoa_ncheck>:
    85e8:	bb 27       	eor	r27, r27

000085ea <__ultoa_common>:
    85ea:	fa 01       	movw	r30, r20
    85ec:	a6 2f       	mov	r26, r22
    85ee:	62 17       	cp	r22, r18
    85f0:	71 05       	cpc	r23, r1
    85f2:	81 05       	cpc	r24, r1
    85f4:	91 05       	cpc	r25, r1
    85f6:	33 0b       	sbc	r19, r19
    85f8:	30 fb       	bst	r19, 0
    85fa:	66 f0       	brts	.+24     	; 0x8614 <__ultoa_common+0x2a>
    85fc:	aa 27       	eor	r26, r26
    85fe:	66 0f       	add	r22, r22
    8600:	77 1f       	adc	r23, r23
    8602:	88 1f       	adc	r24, r24
    8604:	99 1f       	adc	r25, r25
    8606:	aa 1f       	adc	r26, r26
    8608:	a2 17       	cp	r26, r18
    860a:	10 f0       	brcs	.+4      	; 0x8610 <__ultoa_common+0x26>
    860c:	a2 1b       	sub	r26, r18
    860e:	63 95       	inc	r22
    8610:	38 50       	subi	r19, 0x08	; 8
    8612:	a9 f7       	brne	.-22     	; 0x85fe <__ultoa_common+0x14>
    8614:	a0 5d       	subi	r26, 0xD0	; 208
    8616:	aa 33       	cpi	r26, 0x3A	; 58
    8618:	08 f0       	brcs	.+2      	; 0x861c <__ultoa_common+0x32>
    861a:	a9 5d       	subi	r26, 0xD9	; 217
    861c:	a1 93       	st	Z+, r26
    861e:	36 f7       	brtc	.-52     	; 0x85ec <__ultoa_common+0x2>
    8620:	b1 11       	cpse	r27, r1
    8622:	b1 93       	st	Z+, r27
    8624:	10 82       	st	Z, r1
    8626:	ca 01       	movw	r24, r20
    8628:	74 c2       	rjmp	.+1256   	; 0x8b12 <strrev>

0000862a <utoa>:
    862a:	45 32       	cpi	r20, 0x25	; 37
    862c:	51 05       	cpc	r21, r1
    862e:	18 f4       	brcc	.+6      	; 0x8636 <utoa+0xc>
    8630:	42 30       	cpi	r20, 0x02	; 2
    8632:	08 f0       	brcs	.+2      	; 0x8636 <utoa+0xc>
    8634:	04 c0       	rjmp	.+8      	; 0x863e <__utoa_ncheck>
    8636:	fb 01       	movw	r30, r22
    8638:	10 82       	st	Z, r1
    863a:	cb 01       	movw	r24, r22
    863c:	08 95       	ret

0000863e <__utoa_ncheck>:
    863e:	bb 27       	eor	r27, r27

00008640 <__utoa_common>:
    8640:	fb 01       	movw	r30, r22
    8642:	55 27       	eor	r21, r21
    8644:	aa 27       	eor	r26, r26
    8646:	88 0f       	add	r24, r24
    8648:	99 1f       	adc	r25, r25
    864a:	aa 1f       	adc	r26, r26
    864c:	a4 17       	cp	r26, r20
    864e:	10 f0       	brcs	.+4      	; 0x8654 <__utoa_common+0x14>
    8650:	a4 1b       	sub	r26, r20
    8652:	83 95       	inc	r24
    8654:	50 51       	subi	r21, 0x10	; 16
    8656:	b9 f7       	brne	.-18     	; 0x8646 <__utoa_common+0x6>
    8658:	a0 5d       	subi	r26, 0xD0	; 208
    865a:	aa 33       	cpi	r26, 0x3A	; 58
    865c:	08 f0       	brcs	.+2      	; 0x8660 <__utoa_common+0x20>
    865e:	a9 5d       	subi	r26, 0xD9	; 217
    8660:	a1 93       	st	Z+, r26
    8662:	00 97       	sbiw	r24, 0x00	; 0
    8664:	79 f7       	brne	.-34     	; 0x8644 <__utoa_common+0x4>
    8666:	b1 11       	cpse	r27, r1
    8668:	b1 93       	st	Z+, r27
    866a:	11 92       	st	Z+, r1
    866c:	cb 01       	movw	r24, r22
    866e:	51 c2       	rjmp	.+1186   	; 0x8b12 <strrev>

00008670 <dtoa_prf>:
    8670:	8f 92       	push	r8
    8672:	9f 92       	push	r9
    8674:	af 92       	push	r10
    8676:	bf 92       	push	r11
    8678:	cf 92       	push	r12
    867a:	df 92       	push	r13
    867c:	ef 92       	push	r14
    867e:	ff 92       	push	r15
    8680:	0f 93       	push	r16
    8682:	1f 93       	push	r17
    8684:	cf 93       	push	r28
    8686:	df 93       	push	r29
    8688:	cd b7       	in	r28, 0x3d	; 61
    868a:	de b7       	in	r29, 0x3e	; 62
    868c:	29 97       	sbiw	r28, 0x09	; 9
    868e:	0f b6       	in	r0, 0x3f	; 63
    8690:	f8 94       	cli
    8692:	de bf       	out	0x3e, r29	; 62
    8694:	0f be       	out	0x3f, r0	; 63
    8696:	cd bf       	out	0x3d, r28	; 61
    8698:	6a 01       	movw	r12, r20
    869a:	12 2f       	mov	r17, r18
    869c:	b0 2e       	mov	r11, r16
    869e:	2b e3       	ldi	r18, 0x3B	; 59
    86a0:	20 17       	cp	r18, r16
    86a2:	20 f0       	brcs	.+8      	; 0x86ac <dtoa_prf+0x3c>
    86a4:	ff 24       	eor	r15, r15
    86a6:	f3 94       	inc	r15
    86a8:	f0 0e       	add	r15, r16
    86aa:	02 c0       	rjmp	.+4      	; 0x86b0 <dtoa_prf+0x40>
    86ac:	2c e3       	ldi	r18, 0x3C	; 60
    86ae:	f2 2e       	mov	r15, r18
    86b0:	0f 2d       	mov	r16, r15
    86b2:	27 e0       	ldi	r18, 0x07	; 7
    86b4:	ae 01       	movw	r20, r28
    86b6:	4f 5f       	subi	r20, 0xFF	; 255
    86b8:	5f 4f       	sbci	r21, 0xFF	; 255
    86ba:	50 d1       	rcall	.+672    	; 0x895c <__ftoa_engine>
    86bc:	bc 01       	movw	r22, r24
    86be:	49 81       	ldd	r20, Y+1	; 0x01
    86c0:	84 2f       	mov	r24, r20
    86c2:	89 70       	andi	r24, 0x09	; 9
    86c4:	81 30       	cpi	r24, 0x01	; 1
    86c6:	31 f0       	breq	.+12     	; 0x86d4 <dtoa_prf+0x64>
    86c8:	e1 fc       	sbrc	r14, 1
    86ca:	06 c0       	rjmp	.+12     	; 0x86d8 <dtoa_prf+0x68>
    86cc:	e0 fe       	sbrs	r14, 0
    86ce:	06 c0       	rjmp	.+12     	; 0x86dc <dtoa_prf+0x6c>
    86d0:	90 e2       	ldi	r25, 0x20	; 32
    86d2:	05 c0       	rjmp	.+10     	; 0x86de <dtoa_prf+0x6e>
    86d4:	9d e2       	ldi	r25, 0x2D	; 45
    86d6:	03 c0       	rjmp	.+6      	; 0x86de <dtoa_prf+0x6e>
    86d8:	9b e2       	ldi	r25, 0x2B	; 43
    86da:	01 c0       	rjmp	.+2      	; 0x86de <dtoa_prf+0x6e>
    86dc:	90 e0       	ldi	r25, 0x00	; 0
    86de:	5e 2d       	mov	r21, r14
    86e0:	50 71       	andi	r21, 0x10	; 16
    86e2:	43 ff       	sbrs	r20, 3
    86e4:	3c c0       	rjmp	.+120    	; 0x875e <dtoa_prf+0xee>
    86e6:	91 11       	cpse	r25, r1
    86e8:	02 c0       	rjmp	.+4      	; 0x86ee <dtoa_prf+0x7e>
    86ea:	83 e0       	ldi	r24, 0x03	; 3
    86ec:	01 c0       	rjmp	.+2      	; 0x86f0 <dtoa_prf+0x80>
    86ee:	84 e0       	ldi	r24, 0x04	; 4
    86f0:	81 17       	cp	r24, r17
    86f2:	18 f4       	brcc	.+6      	; 0x86fa <dtoa_prf+0x8a>
    86f4:	21 2f       	mov	r18, r17
    86f6:	28 1b       	sub	r18, r24
    86f8:	01 c0       	rjmp	.+2      	; 0x86fc <dtoa_prf+0x8c>
    86fa:	20 e0       	ldi	r18, 0x00	; 0
    86fc:	51 11       	cpse	r21, r1
    86fe:	0b c0       	rjmp	.+22     	; 0x8716 <dtoa_prf+0xa6>
    8700:	f6 01       	movw	r30, r12
    8702:	82 2f       	mov	r24, r18
    8704:	30 e2       	ldi	r19, 0x20	; 32
    8706:	88 23       	and	r24, r24
    8708:	19 f0       	breq	.+6      	; 0x8710 <dtoa_prf+0xa0>
    870a:	31 93       	st	Z+, r19
    870c:	81 50       	subi	r24, 0x01	; 1
    870e:	fb cf       	rjmp	.-10     	; 0x8706 <dtoa_prf+0x96>
    8710:	c2 0e       	add	r12, r18
    8712:	d1 1c       	adc	r13, r1
    8714:	20 e0       	ldi	r18, 0x00	; 0
    8716:	99 23       	and	r25, r25
    8718:	29 f0       	breq	.+10     	; 0x8724 <dtoa_prf+0xb4>
    871a:	d6 01       	movw	r26, r12
    871c:	9c 93       	st	X, r25
    871e:	f6 01       	movw	r30, r12
    8720:	31 96       	adiw	r30, 0x01	; 1
    8722:	6f 01       	movw	r12, r30
    8724:	c6 01       	movw	r24, r12
    8726:	03 96       	adiw	r24, 0x03	; 3
    8728:	e2 fe       	sbrs	r14, 2
    872a:	0a c0       	rjmp	.+20     	; 0x8740 <dtoa_prf+0xd0>
    872c:	3e e4       	ldi	r19, 0x4E	; 78
    872e:	d6 01       	movw	r26, r12
    8730:	3c 93       	st	X, r19
    8732:	41 e4       	ldi	r20, 0x41	; 65
    8734:	11 96       	adiw	r26, 0x01	; 1
    8736:	4c 93       	st	X, r20
    8738:	11 97       	sbiw	r26, 0x01	; 1
    873a:	12 96       	adiw	r26, 0x02	; 2
    873c:	3c 93       	st	X, r19
    873e:	06 c0       	rjmp	.+12     	; 0x874c <dtoa_prf+0xdc>
    8740:	3e e6       	ldi	r19, 0x6E	; 110
    8742:	f6 01       	movw	r30, r12
    8744:	30 83       	st	Z, r19
    8746:	41 e6       	ldi	r20, 0x61	; 97
    8748:	41 83       	std	Z+1, r20	; 0x01
    874a:	32 83       	std	Z+2, r19	; 0x02
    874c:	fc 01       	movw	r30, r24
    874e:	32 2f       	mov	r19, r18
    8750:	40 e2       	ldi	r20, 0x20	; 32
    8752:	33 23       	and	r19, r19
    8754:	09 f4       	brne	.+2      	; 0x8758 <dtoa_prf+0xe8>
    8756:	42 c0       	rjmp	.+132    	; 0x87dc <dtoa_prf+0x16c>
    8758:	41 93       	st	Z+, r20
    875a:	31 50       	subi	r19, 0x01	; 1
    875c:	fa cf       	rjmp	.-12     	; 0x8752 <dtoa_prf+0xe2>
    875e:	42 ff       	sbrs	r20, 2
    8760:	44 c0       	rjmp	.+136    	; 0x87ea <dtoa_prf+0x17a>
    8762:	91 11       	cpse	r25, r1
    8764:	02 c0       	rjmp	.+4      	; 0x876a <dtoa_prf+0xfa>
    8766:	83 e0       	ldi	r24, 0x03	; 3
    8768:	01 c0       	rjmp	.+2      	; 0x876c <dtoa_prf+0xfc>
    876a:	84 e0       	ldi	r24, 0x04	; 4
    876c:	81 17       	cp	r24, r17
    876e:	18 f4       	brcc	.+6      	; 0x8776 <dtoa_prf+0x106>
    8770:	21 2f       	mov	r18, r17
    8772:	28 1b       	sub	r18, r24
    8774:	01 c0       	rjmp	.+2      	; 0x8778 <dtoa_prf+0x108>
    8776:	20 e0       	ldi	r18, 0x00	; 0
    8778:	51 11       	cpse	r21, r1
    877a:	0b c0       	rjmp	.+22     	; 0x8792 <dtoa_prf+0x122>
    877c:	f6 01       	movw	r30, r12
    877e:	82 2f       	mov	r24, r18
    8780:	30 e2       	ldi	r19, 0x20	; 32
    8782:	88 23       	and	r24, r24
    8784:	19 f0       	breq	.+6      	; 0x878c <dtoa_prf+0x11c>
    8786:	31 93       	st	Z+, r19
    8788:	81 50       	subi	r24, 0x01	; 1
    878a:	fb cf       	rjmp	.-10     	; 0x8782 <dtoa_prf+0x112>
    878c:	c2 0e       	add	r12, r18
    878e:	d1 1c       	adc	r13, r1
    8790:	20 e0       	ldi	r18, 0x00	; 0
    8792:	99 23       	and	r25, r25
    8794:	29 f0       	breq	.+10     	; 0x87a0 <dtoa_prf+0x130>
    8796:	d6 01       	movw	r26, r12
    8798:	9c 93       	st	X, r25
    879a:	f6 01       	movw	r30, r12
    879c:	31 96       	adiw	r30, 0x01	; 1
    879e:	6f 01       	movw	r12, r30
    87a0:	c6 01       	movw	r24, r12
    87a2:	03 96       	adiw	r24, 0x03	; 3
    87a4:	e2 fe       	sbrs	r14, 2
    87a6:	0b c0       	rjmp	.+22     	; 0x87be <dtoa_prf+0x14e>
    87a8:	39 e4       	ldi	r19, 0x49	; 73
    87aa:	d6 01       	movw	r26, r12
    87ac:	3c 93       	st	X, r19
    87ae:	3e e4       	ldi	r19, 0x4E	; 78
    87b0:	11 96       	adiw	r26, 0x01	; 1
    87b2:	3c 93       	st	X, r19
    87b4:	11 97       	sbiw	r26, 0x01	; 1
    87b6:	36 e4       	ldi	r19, 0x46	; 70
    87b8:	12 96       	adiw	r26, 0x02	; 2
    87ba:	3c 93       	st	X, r19
    87bc:	07 c0       	rjmp	.+14     	; 0x87cc <dtoa_prf+0x15c>
    87be:	39 e6       	ldi	r19, 0x69	; 105
    87c0:	f6 01       	movw	r30, r12
    87c2:	30 83       	st	Z, r19
    87c4:	3e e6       	ldi	r19, 0x6E	; 110
    87c6:	31 83       	std	Z+1, r19	; 0x01
    87c8:	36 e6       	ldi	r19, 0x66	; 102
    87ca:	32 83       	std	Z+2, r19	; 0x02
    87cc:	fc 01       	movw	r30, r24
    87ce:	32 2f       	mov	r19, r18
    87d0:	40 e2       	ldi	r20, 0x20	; 32
    87d2:	33 23       	and	r19, r19
    87d4:	19 f0       	breq	.+6      	; 0x87dc <dtoa_prf+0x16c>
    87d6:	41 93       	st	Z+, r20
    87d8:	31 50       	subi	r19, 0x01	; 1
    87da:	fb cf       	rjmp	.-10     	; 0x87d2 <dtoa_prf+0x162>
    87dc:	fc 01       	movw	r30, r24
    87de:	e2 0f       	add	r30, r18
    87e0:	f1 1d       	adc	r31, r1
    87e2:	10 82       	st	Z, r1
    87e4:	8e ef       	ldi	r24, 0xFE	; 254
    87e6:	9f ef       	ldi	r25, 0xFF	; 255
    87e8:	a6 c0       	rjmp	.+332    	; 0x8936 <dtoa_prf+0x2c6>
    87ea:	21 e0       	ldi	r18, 0x01	; 1
    87ec:	30 e0       	ldi	r19, 0x00	; 0
    87ee:	91 11       	cpse	r25, r1
    87f0:	02 c0       	rjmp	.+4      	; 0x87f6 <dtoa_prf+0x186>
    87f2:	20 e0       	ldi	r18, 0x00	; 0
    87f4:	30 e0       	ldi	r19, 0x00	; 0
    87f6:	16 16       	cp	r1, r22
    87f8:	17 06       	cpc	r1, r23
    87fa:	1c f4       	brge	.+6      	; 0x8802 <dtoa_prf+0x192>
    87fc:	fb 01       	movw	r30, r22
    87fe:	31 96       	adiw	r30, 0x01	; 1
    8800:	02 c0       	rjmp	.+4      	; 0x8806 <dtoa_prf+0x196>
    8802:	e1 e0       	ldi	r30, 0x01	; 1
    8804:	f0 e0       	ldi	r31, 0x00	; 0
    8806:	2e 0f       	add	r18, r30
    8808:	3f 1f       	adc	r19, r31
    880a:	bb 20       	and	r11, r11
    880c:	21 f0       	breq	.+8      	; 0x8816 <dtoa_prf+0x1a6>
    880e:	eb 2d       	mov	r30, r11
    8810:	f0 e0       	ldi	r31, 0x00	; 0
    8812:	31 96       	adiw	r30, 0x01	; 1
    8814:	02 c0       	rjmp	.+4      	; 0x881a <dtoa_prf+0x1aa>
    8816:	e0 e0       	ldi	r30, 0x00	; 0
    8818:	f0 e0       	ldi	r31, 0x00	; 0
    881a:	2e 0f       	add	r18, r30
    881c:	3f 1f       	adc	r19, r31
    881e:	e1 2f       	mov	r30, r17
    8820:	f0 e0       	ldi	r31, 0x00	; 0
    8822:	2e 17       	cp	r18, r30
    8824:	3f 07       	cpc	r19, r31
    8826:	1c f4       	brge	.+6      	; 0x882e <dtoa_prf+0x1be>
    8828:	12 1b       	sub	r17, r18
    882a:	21 2f       	mov	r18, r17
    882c:	01 c0       	rjmp	.+2      	; 0x8830 <dtoa_prf+0x1c0>
    882e:	20 e0       	ldi	r18, 0x00	; 0
    8830:	8e 2d       	mov	r24, r14
    8832:	88 71       	andi	r24, 0x18	; 24
    8834:	59 f4       	brne	.+22     	; 0x884c <dtoa_prf+0x1dc>
    8836:	f6 01       	movw	r30, r12
    8838:	82 2f       	mov	r24, r18
    883a:	30 e2       	ldi	r19, 0x20	; 32
    883c:	88 23       	and	r24, r24
    883e:	19 f0       	breq	.+6      	; 0x8846 <dtoa_prf+0x1d6>
    8840:	31 93       	st	Z+, r19
    8842:	81 50       	subi	r24, 0x01	; 1
    8844:	fb cf       	rjmp	.-10     	; 0x883c <dtoa_prf+0x1cc>
    8846:	c2 0e       	add	r12, r18
    8848:	d1 1c       	adc	r13, r1
    884a:	20 e0       	ldi	r18, 0x00	; 0
    884c:	99 23       	and	r25, r25
    884e:	29 f0       	breq	.+10     	; 0x885a <dtoa_prf+0x1ea>
    8850:	d6 01       	movw	r26, r12
    8852:	9c 93       	st	X, r25
    8854:	f6 01       	movw	r30, r12
    8856:	31 96       	adiw	r30, 0x01	; 1
    8858:	6f 01       	movw	r12, r30
    885a:	51 11       	cpse	r21, r1
    885c:	0b c0       	rjmp	.+22     	; 0x8874 <dtoa_prf+0x204>
    885e:	f6 01       	movw	r30, r12
    8860:	82 2f       	mov	r24, r18
    8862:	90 e3       	ldi	r25, 0x30	; 48
    8864:	88 23       	and	r24, r24
    8866:	19 f0       	breq	.+6      	; 0x886e <dtoa_prf+0x1fe>
    8868:	91 93       	st	Z+, r25
    886a:	81 50       	subi	r24, 0x01	; 1
    886c:	fb cf       	rjmp	.-10     	; 0x8864 <dtoa_prf+0x1f4>
    886e:	c2 0e       	add	r12, r18
    8870:	d1 1c       	adc	r13, r1
    8872:	20 e0       	ldi	r18, 0x00	; 0
    8874:	0f 2d       	mov	r16, r15
    8876:	06 0f       	add	r16, r22
    8878:	9a 81       	ldd	r25, Y+2	; 0x02
    887a:	34 2f       	mov	r19, r20
    887c:	30 71       	andi	r19, 0x10	; 16
    887e:	44 ff       	sbrs	r20, 4
    8880:	03 c0       	rjmp	.+6      	; 0x8888 <dtoa_prf+0x218>
    8882:	91 33       	cpi	r25, 0x31	; 49
    8884:	09 f4       	brne	.+2      	; 0x8888 <dtoa_prf+0x218>
    8886:	01 50       	subi	r16, 0x01	; 1
    8888:	10 16       	cp	r1, r16
    888a:	24 f4       	brge	.+8      	; 0x8894 <dtoa_prf+0x224>
    888c:	09 30       	cpi	r16, 0x09	; 9
    888e:	18 f0       	brcs	.+6      	; 0x8896 <dtoa_prf+0x226>
    8890:	08 e0       	ldi	r16, 0x08	; 8
    8892:	01 c0       	rjmp	.+2      	; 0x8896 <dtoa_prf+0x226>
    8894:	01 e0       	ldi	r16, 0x01	; 1
    8896:	ab 01       	movw	r20, r22
    8898:	77 ff       	sbrs	r23, 7
    889a:	02 c0       	rjmp	.+4      	; 0x88a0 <dtoa_prf+0x230>
    889c:	40 e0       	ldi	r20, 0x00	; 0
    889e:	50 e0       	ldi	r21, 0x00	; 0
    88a0:	fb 01       	movw	r30, r22
    88a2:	e4 1b       	sub	r30, r20
    88a4:	f5 0b       	sbc	r31, r21
    88a6:	a1 e0       	ldi	r26, 0x01	; 1
    88a8:	b0 e0       	ldi	r27, 0x00	; 0
    88aa:	ac 0f       	add	r26, r28
    88ac:	bd 1f       	adc	r27, r29
    88ae:	ea 0f       	add	r30, r26
    88b0:	fb 1f       	adc	r31, r27
    88b2:	8e e2       	ldi	r24, 0x2E	; 46
    88b4:	a8 2e       	mov	r10, r24
    88b6:	4b 01       	movw	r8, r22
    88b8:	80 1a       	sub	r8, r16
    88ba:	91 08       	sbc	r9, r1
    88bc:	0b 2d       	mov	r16, r11
    88be:	10 e0       	ldi	r17, 0x00	; 0
    88c0:	11 95       	neg	r17
    88c2:	01 95       	neg	r16
    88c4:	11 09       	sbc	r17, r1
    88c6:	4f 3f       	cpi	r20, 0xFF	; 255
    88c8:	bf ef       	ldi	r27, 0xFF	; 255
    88ca:	5b 07       	cpc	r21, r27
    88cc:	21 f4       	brne	.+8      	; 0x88d6 <dtoa_prf+0x266>
    88ce:	d6 01       	movw	r26, r12
    88d0:	ac 92       	st	X, r10
    88d2:	11 96       	adiw	r26, 0x01	; 1
    88d4:	6d 01       	movw	r12, r26
    88d6:	64 17       	cp	r22, r20
    88d8:	75 07       	cpc	r23, r21
    88da:	2c f0       	brlt	.+10     	; 0x88e6 <dtoa_prf+0x276>
    88dc:	84 16       	cp	r8, r20
    88de:	95 06       	cpc	r9, r21
    88e0:	14 f4       	brge	.+4      	; 0x88e6 <dtoa_prf+0x276>
    88e2:	81 81       	ldd	r24, Z+1	; 0x01
    88e4:	01 c0       	rjmp	.+2      	; 0x88e8 <dtoa_prf+0x278>
    88e6:	80 e3       	ldi	r24, 0x30	; 48
    88e8:	41 50       	subi	r20, 0x01	; 1
    88ea:	51 09       	sbc	r21, r1
    88ec:	31 96       	adiw	r30, 0x01	; 1
    88ee:	d6 01       	movw	r26, r12
    88f0:	11 96       	adiw	r26, 0x01	; 1
    88f2:	7d 01       	movw	r14, r26
    88f4:	40 17       	cp	r20, r16
    88f6:	51 07       	cpc	r21, r17
    88f8:	24 f0       	brlt	.+8      	; 0x8902 <dtoa_prf+0x292>
    88fa:	d6 01       	movw	r26, r12
    88fc:	8c 93       	st	X, r24
    88fe:	67 01       	movw	r12, r14
    8900:	e2 cf       	rjmp	.-60     	; 0x88c6 <dtoa_prf+0x256>
    8902:	64 17       	cp	r22, r20
    8904:	75 07       	cpc	r23, r21
    8906:	39 f4       	brne	.+14     	; 0x8916 <dtoa_prf+0x2a6>
    8908:	96 33       	cpi	r25, 0x36	; 54
    890a:	20 f4       	brcc	.+8      	; 0x8914 <dtoa_prf+0x2a4>
    890c:	95 33       	cpi	r25, 0x35	; 53
    890e:	19 f4       	brne	.+6      	; 0x8916 <dtoa_prf+0x2a6>
    8910:	31 11       	cpse	r19, r1
    8912:	01 c0       	rjmp	.+2      	; 0x8916 <dtoa_prf+0x2a6>
    8914:	81 e3       	ldi	r24, 0x31	; 49
    8916:	f6 01       	movw	r30, r12
    8918:	80 83       	st	Z, r24
    891a:	f7 01       	movw	r30, r14
    891c:	82 2f       	mov	r24, r18
    891e:	90 e2       	ldi	r25, 0x20	; 32
    8920:	88 23       	and	r24, r24
    8922:	19 f0       	breq	.+6      	; 0x892a <dtoa_prf+0x2ba>
    8924:	91 93       	st	Z+, r25
    8926:	81 50       	subi	r24, 0x01	; 1
    8928:	fb cf       	rjmp	.-10     	; 0x8920 <dtoa_prf+0x2b0>
    892a:	f7 01       	movw	r30, r14
    892c:	e2 0f       	add	r30, r18
    892e:	f1 1d       	adc	r31, r1
    8930:	10 82       	st	Z, r1
    8932:	80 e0       	ldi	r24, 0x00	; 0
    8934:	90 e0       	ldi	r25, 0x00	; 0
    8936:	29 96       	adiw	r28, 0x09	; 9
    8938:	0f b6       	in	r0, 0x3f	; 63
    893a:	f8 94       	cli
    893c:	de bf       	out	0x3e, r29	; 62
    893e:	0f be       	out	0x3f, r0	; 63
    8940:	cd bf       	out	0x3d, r28	; 61
    8942:	df 91       	pop	r29
    8944:	cf 91       	pop	r28
    8946:	1f 91       	pop	r17
    8948:	0f 91       	pop	r16
    894a:	ff 90       	pop	r15
    894c:	ef 90       	pop	r14
    894e:	df 90       	pop	r13
    8950:	cf 90       	pop	r12
    8952:	bf 90       	pop	r11
    8954:	af 90       	pop	r10
    8956:	9f 90       	pop	r9
    8958:	8f 90       	pop	r8
    895a:	08 95       	ret

0000895c <__ftoa_engine>:
    895c:	28 30       	cpi	r18, 0x08	; 8
    895e:	08 f0       	brcs	.+2      	; 0x8962 <__ftoa_engine+0x6>
    8960:	27 e0       	ldi	r18, 0x07	; 7
    8962:	33 27       	eor	r19, r19
    8964:	da 01       	movw	r26, r20
    8966:	99 0f       	add	r25, r25
    8968:	31 1d       	adc	r19, r1
    896a:	87 fd       	sbrc	r24, 7
    896c:	91 60       	ori	r25, 0x01	; 1
    896e:	00 96       	adiw	r24, 0x00	; 0
    8970:	61 05       	cpc	r22, r1
    8972:	71 05       	cpc	r23, r1
    8974:	39 f4       	brne	.+14     	; 0x8984 <__ftoa_engine+0x28>
    8976:	32 60       	ori	r19, 0x02	; 2
    8978:	2e 5f       	subi	r18, 0xFE	; 254
    897a:	3d 93       	st	X+, r19
    897c:	30 e3       	ldi	r19, 0x30	; 48
    897e:	2a 95       	dec	r18
    8980:	e1 f7       	brne	.-8      	; 0x897a <__ftoa_engine+0x1e>
    8982:	08 95       	ret
    8984:	9f 3f       	cpi	r25, 0xFF	; 255
    8986:	30 f0       	brcs	.+12     	; 0x8994 <__ftoa_engine+0x38>
    8988:	80 38       	cpi	r24, 0x80	; 128
    898a:	71 05       	cpc	r23, r1
    898c:	61 05       	cpc	r22, r1
    898e:	09 f0       	breq	.+2      	; 0x8992 <__ftoa_engine+0x36>
    8990:	3c 5f       	subi	r19, 0xFC	; 252
    8992:	3c 5f       	subi	r19, 0xFC	; 252
    8994:	3d 93       	st	X+, r19
    8996:	91 30       	cpi	r25, 0x01	; 1
    8998:	08 f0       	brcs	.+2      	; 0x899c <__ftoa_engine+0x40>
    899a:	80 68       	ori	r24, 0x80	; 128
    899c:	91 1d       	adc	r25, r1
    899e:	df 93       	push	r29
    89a0:	cf 93       	push	r28
    89a2:	1f 93       	push	r17
    89a4:	0f 93       	push	r16
    89a6:	ff 92       	push	r15
    89a8:	ef 92       	push	r14
    89aa:	19 2f       	mov	r17, r25
    89ac:	98 7f       	andi	r25, 0xF8	; 248
    89ae:	96 95       	lsr	r25
    89b0:	e9 2f       	mov	r30, r25
    89b2:	96 95       	lsr	r25
    89b4:	96 95       	lsr	r25
    89b6:	e9 0f       	add	r30, r25
    89b8:	ff 27       	eor	r31, r31
    89ba:	ea 5d       	subi	r30, 0xDA	; 218
    89bc:	fe 4f       	sbci	r31, 0xFE	; 254
    89be:	99 27       	eor	r25, r25
    89c0:	33 27       	eor	r19, r19
    89c2:	ee 24       	eor	r14, r14
    89c4:	ff 24       	eor	r15, r15
    89c6:	a7 01       	movw	r20, r14
    89c8:	e7 01       	movw	r28, r14
    89ca:	05 90       	lpm	r0, Z+
    89cc:	08 94       	sec
    89ce:	07 94       	ror	r0
    89d0:	28 f4       	brcc	.+10     	; 0x89dc <__ftoa_engine+0x80>
    89d2:	36 0f       	add	r19, r22
    89d4:	e7 1e       	adc	r14, r23
    89d6:	f8 1e       	adc	r15, r24
    89d8:	49 1f       	adc	r20, r25
    89da:	51 1d       	adc	r21, r1
    89dc:	66 0f       	add	r22, r22
    89de:	77 1f       	adc	r23, r23
    89e0:	88 1f       	adc	r24, r24
    89e2:	99 1f       	adc	r25, r25
    89e4:	06 94       	lsr	r0
    89e6:	a1 f7       	brne	.-24     	; 0x89d0 <__ftoa_engine+0x74>
    89e8:	05 90       	lpm	r0, Z+
    89ea:	07 94       	ror	r0
    89ec:	28 f4       	brcc	.+10     	; 0x89f8 <__ftoa_engine+0x9c>
    89ee:	e7 0e       	add	r14, r23
    89f0:	f8 1e       	adc	r15, r24
    89f2:	49 1f       	adc	r20, r25
    89f4:	56 1f       	adc	r21, r22
    89f6:	c1 1d       	adc	r28, r1
    89f8:	77 0f       	add	r23, r23
    89fa:	88 1f       	adc	r24, r24
    89fc:	99 1f       	adc	r25, r25
    89fe:	66 1f       	adc	r22, r22
    8a00:	06 94       	lsr	r0
    8a02:	a1 f7       	brne	.-24     	; 0x89ec <__ftoa_engine+0x90>
    8a04:	05 90       	lpm	r0, Z+
    8a06:	07 94       	ror	r0
    8a08:	28 f4       	brcc	.+10     	; 0x8a14 <__ftoa_engine+0xb8>
    8a0a:	f8 0e       	add	r15, r24
    8a0c:	49 1f       	adc	r20, r25
    8a0e:	56 1f       	adc	r21, r22
    8a10:	c7 1f       	adc	r28, r23
    8a12:	d1 1d       	adc	r29, r1
    8a14:	88 0f       	add	r24, r24
    8a16:	99 1f       	adc	r25, r25
    8a18:	66 1f       	adc	r22, r22
    8a1a:	77 1f       	adc	r23, r23
    8a1c:	06 94       	lsr	r0
    8a1e:	a1 f7       	brne	.-24     	; 0x8a08 <__ftoa_engine+0xac>
    8a20:	05 90       	lpm	r0, Z+
    8a22:	07 94       	ror	r0
    8a24:	20 f4       	brcc	.+8      	; 0x8a2e <__ftoa_engine+0xd2>
    8a26:	49 0f       	add	r20, r25
    8a28:	56 1f       	adc	r21, r22
    8a2a:	c7 1f       	adc	r28, r23
    8a2c:	d8 1f       	adc	r29, r24
    8a2e:	99 0f       	add	r25, r25
    8a30:	66 1f       	adc	r22, r22
    8a32:	77 1f       	adc	r23, r23
    8a34:	88 1f       	adc	r24, r24
    8a36:	06 94       	lsr	r0
    8a38:	a9 f7       	brne	.-22     	; 0x8a24 <__ftoa_engine+0xc8>
    8a3a:	84 91       	lpm	r24, Z
    8a3c:	10 95       	com	r17
    8a3e:	17 70       	andi	r17, 0x07	; 7
    8a40:	41 f0       	breq	.+16     	; 0x8a52 <__ftoa_engine+0xf6>
    8a42:	d6 95       	lsr	r29
    8a44:	c7 95       	ror	r28
    8a46:	57 95       	ror	r21
    8a48:	47 95       	ror	r20
    8a4a:	f7 94       	ror	r15
    8a4c:	e7 94       	ror	r14
    8a4e:	1a 95       	dec	r17
    8a50:	c1 f7       	brne	.-16     	; 0x8a42 <__ftoa_engine+0xe6>
    8a52:	ec ec       	ldi	r30, 0xCC	; 204
    8a54:	f0 e0       	ldi	r31, 0x00	; 0
    8a56:	68 94       	set
    8a58:	15 90       	lpm	r1, Z+
    8a5a:	15 91       	lpm	r17, Z+
    8a5c:	35 91       	lpm	r19, Z+
    8a5e:	65 91       	lpm	r22, Z+
    8a60:	95 91       	lpm	r25, Z+
    8a62:	05 90       	lpm	r0, Z+
    8a64:	7f e2       	ldi	r23, 0x2F	; 47
    8a66:	73 95       	inc	r23
    8a68:	e1 18       	sub	r14, r1
    8a6a:	f1 0a       	sbc	r15, r17
    8a6c:	43 0b       	sbc	r20, r19
    8a6e:	56 0b       	sbc	r21, r22
    8a70:	c9 0b       	sbc	r28, r25
    8a72:	d0 09       	sbc	r29, r0
    8a74:	c0 f7       	brcc	.-16     	; 0x8a66 <__ftoa_engine+0x10a>
    8a76:	e1 0c       	add	r14, r1
    8a78:	f1 1e       	adc	r15, r17
    8a7a:	43 1f       	adc	r20, r19
    8a7c:	56 1f       	adc	r21, r22
    8a7e:	c9 1f       	adc	r28, r25
    8a80:	d0 1d       	adc	r29, r0
    8a82:	7e f4       	brtc	.+30     	; 0x8aa2 <__ftoa_engine+0x146>
    8a84:	70 33       	cpi	r23, 0x30	; 48
    8a86:	11 f4       	brne	.+4      	; 0x8a8c <__ftoa_engine+0x130>
    8a88:	8a 95       	dec	r24
    8a8a:	e6 cf       	rjmp	.-52     	; 0x8a58 <__ftoa_engine+0xfc>
    8a8c:	e8 94       	clt
    8a8e:	01 50       	subi	r16, 0x01	; 1
    8a90:	30 f0       	brcs	.+12     	; 0x8a9e <__ftoa_engine+0x142>
    8a92:	08 0f       	add	r16, r24
    8a94:	0a f4       	brpl	.+2      	; 0x8a98 <__ftoa_engine+0x13c>
    8a96:	00 27       	eor	r16, r16
    8a98:	02 17       	cp	r16, r18
    8a9a:	08 f4       	brcc	.+2      	; 0x8a9e <__ftoa_engine+0x142>
    8a9c:	20 2f       	mov	r18, r16
    8a9e:	23 95       	inc	r18
    8aa0:	02 2f       	mov	r16, r18
    8aa2:	7a 33       	cpi	r23, 0x3A	; 58
    8aa4:	28 f0       	brcs	.+10     	; 0x8ab0 <__ftoa_engine+0x154>
    8aa6:	79 e3       	ldi	r23, 0x39	; 57
    8aa8:	7d 93       	st	X+, r23
    8aaa:	2a 95       	dec	r18
    8aac:	e9 f7       	brne	.-6      	; 0x8aa8 <__ftoa_engine+0x14c>
    8aae:	10 c0       	rjmp	.+32     	; 0x8ad0 <__ftoa_engine+0x174>
    8ab0:	7d 93       	st	X+, r23
    8ab2:	2a 95       	dec	r18
    8ab4:	89 f6       	brne	.-94     	; 0x8a58 <__ftoa_engine+0xfc>
    8ab6:	06 94       	lsr	r0
    8ab8:	97 95       	ror	r25
    8aba:	67 95       	ror	r22
    8abc:	37 95       	ror	r19
    8abe:	17 95       	ror	r17
    8ac0:	17 94       	ror	r1
    8ac2:	e1 18       	sub	r14, r1
    8ac4:	f1 0a       	sbc	r15, r17
    8ac6:	43 0b       	sbc	r20, r19
    8ac8:	56 0b       	sbc	r21, r22
    8aca:	c9 0b       	sbc	r28, r25
    8acc:	d0 09       	sbc	r29, r0
    8ace:	98 f0       	brcs	.+38     	; 0x8af6 <__ftoa_engine+0x19a>
    8ad0:	23 95       	inc	r18
    8ad2:	7e 91       	ld	r23, -X
    8ad4:	73 95       	inc	r23
    8ad6:	7a 33       	cpi	r23, 0x3A	; 58
    8ad8:	08 f0       	brcs	.+2      	; 0x8adc <__ftoa_engine+0x180>
    8ada:	70 e3       	ldi	r23, 0x30	; 48
    8adc:	7c 93       	st	X, r23
    8ade:	20 13       	cpse	r18, r16
    8ae0:	b8 f7       	brcc	.-18     	; 0x8ad0 <__ftoa_engine+0x174>
    8ae2:	7e 91       	ld	r23, -X
    8ae4:	70 61       	ori	r23, 0x10	; 16
    8ae6:	7d 93       	st	X+, r23
    8ae8:	30 f0       	brcs	.+12     	; 0x8af6 <__ftoa_engine+0x19a>
    8aea:	83 95       	inc	r24
    8aec:	71 e3       	ldi	r23, 0x31	; 49
    8aee:	7d 93       	st	X+, r23
    8af0:	70 e3       	ldi	r23, 0x30	; 48
    8af2:	2a 95       	dec	r18
    8af4:	e1 f7       	brne	.-8      	; 0x8aee <__ftoa_engine+0x192>
    8af6:	11 24       	eor	r1, r1
    8af8:	ef 90       	pop	r14
    8afa:	ff 90       	pop	r15
    8afc:	0f 91       	pop	r16
    8afe:	1f 91       	pop	r17
    8b00:	cf 91       	pop	r28
    8b02:	df 91       	pop	r29
    8b04:	99 27       	eor	r25, r25
    8b06:	87 fd       	sbrc	r24, 7
    8b08:	90 95       	com	r25
    8b0a:	08 95       	ret

00008b0c <__ctype_isfalse>:
    8b0c:	99 27       	eor	r25, r25
    8b0e:	88 27       	eor	r24, r24

00008b10 <__ctype_istrue>:
    8b10:	08 95       	ret

00008b12 <strrev>:
    8b12:	dc 01       	movw	r26, r24
    8b14:	fc 01       	movw	r30, r24
    8b16:	67 2f       	mov	r22, r23
    8b18:	71 91       	ld	r23, Z+
    8b1a:	77 23       	and	r23, r23
    8b1c:	e1 f7       	brne	.-8      	; 0x8b16 <strrev+0x4>
    8b1e:	32 97       	sbiw	r30, 0x02	; 2
    8b20:	04 c0       	rjmp	.+8      	; 0x8b2a <strrev+0x18>
    8b22:	7c 91       	ld	r23, X
    8b24:	6d 93       	st	X+, r22
    8b26:	70 83       	st	Z, r23
    8b28:	62 91       	ld	r22, -Z
    8b2a:	ae 17       	cp	r26, r30
    8b2c:	bf 07       	cpc	r27, r31
    8b2e:	c8 f3       	brcs	.-14     	; 0x8b22 <strrev+0x10>
    8b30:	08 95       	ret

00008b32 <eeprom_read_byte>:
    8b32:	f9 99       	sbic	0x1f, 1	; 31
    8b34:	fe cf       	rjmp	.-4      	; 0x8b32 <eeprom_read_byte>
    8b36:	92 bd       	out	0x22, r25	; 34
    8b38:	81 bd       	out	0x21, r24	; 33
    8b3a:	f8 9a       	sbi	0x1f, 0	; 31
    8b3c:	99 27       	eor	r25, r25
    8b3e:	80 b5       	in	r24, 0x20	; 32
    8b40:	08 95       	ret

00008b42 <eeprom_write_byte>:
    8b42:	26 2f       	mov	r18, r22

00008b44 <eeprom_write_r18>:
    8b44:	f9 99       	sbic	0x1f, 1	; 31
    8b46:	fe cf       	rjmp	.-4      	; 0x8b44 <eeprom_write_r18>
    8b48:	1f ba       	out	0x1f, r1	; 31
    8b4a:	92 bd       	out	0x22, r25	; 34
    8b4c:	81 bd       	out	0x21, r24	; 33
    8b4e:	20 bd       	out	0x20, r18	; 32
    8b50:	0f b6       	in	r0, 0x3f	; 63
    8b52:	f8 94       	cli
    8b54:	fa 9a       	sbi	0x1f, 2	; 31
    8b56:	f9 9a       	sbi	0x1f, 1	; 31
    8b58:	0f be       	out	0x3f, r0	; 63
    8b5a:	01 96       	adiw	r24, 0x01	; 1
    8b5c:	08 95       	ret

00008b5e <__do_global_dtors>:
    8b5e:	11 e0       	ldi	r17, 0x01	; 1
    8b60:	c3 e6       	ldi	r28, 0x63	; 99
    8b62:	d1 e0       	ldi	r29, 0x01	; 1
    8b64:	03 c0       	rjmp	.+6      	; 0x8b6c <__do_global_dtors+0xe>
    8b66:	fe 01       	movw	r30, r28
    8b68:	59 da       	rcall	.-2894   	; 0x801c <__tablejump2__>
    8b6a:	21 96       	adiw	r28, 0x01	; 1
    8b6c:	c4 36       	cpi	r28, 0x64	; 100
    8b6e:	d1 07       	cpc	r29, r17
    8b70:	d1 f7       	brne	.-12     	; 0x8b66 <__do_global_dtors+0x8>
    8b72:	f8 94       	cli

00008b74 <__stop_program>:
    8b74:	ff cf       	rjmp	.-2      	; 0x8b74 <__stop_program>
