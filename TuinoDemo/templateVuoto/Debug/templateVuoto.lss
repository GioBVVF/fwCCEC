
templateVuoto.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000079e  00800100  0000750c  000075a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000750c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000308  0080089e  0080089e  00007d3e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00007d3e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007d70  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00001258  00000000  00000000  00007db0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00039704  00000000  00000000  00009008  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000075dd  00000000  00000000  0004270c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000b801  00000000  00000000  00049ce9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000404c  00000000  00000000  000554ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00008311  00000000  00000000  00059538  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000184a3  00000000  00000000  00061849  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001340  00000000  00000000  00079cec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	62 c1       	rjmp	.+708    	; 0x2c6 <__dtors_end>
       2:	00 00       	nop
       4:	8a c1       	rjmp	.+788    	; 0x31a <__bad_interrupt>
       6:	00 00       	nop
       8:	88 c1       	rjmp	.+784    	; 0x31a <__bad_interrupt>
       a:	00 00       	nop
       c:	86 c1       	rjmp	.+780    	; 0x31a <__bad_interrupt>
       e:	00 00       	nop
      10:	0c 94 d6 0f 	jmp	0x1fac	; 0x1fac <__vector_4>
      14:	82 c1       	rjmp	.+772    	; 0x31a <__bad_interrupt>
      16:	00 00       	nop
      18:	80 c1       	rjmp	.+768    	; 0x31a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	0c 94 fa 0f 	jmp	0x1ff4	; 0x1ff4 <__vector_7>
      20:	7c c1       	rjmp	.+760    	; 0x31a <__bad_interrupt>
      22:	00 00       	nop
      24:	7a c1       	rjmp	.+756    	; 0x31a <__bad_interrupt>
      26:	00 00       	nop
      28:	78 c1       	rjmp	.+752    	; 0x31a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	76 c1       	rjmp	.+748    	; 0x31a <__bad_interrupt>
      2e:	00 00       	nop
      30:	74 c1       	rjmp	.+744    	; 0x31a <__bad_interrupt>
      32:	00 00       	nop
      34:	72 c1       	rjmp	.+740    	; 0x31a <__bad_interrupt>
      36:	00 00       	nop
      38:	70 c1       	rjmp	.+736    	; 0x31a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6e c1       	rjmp	.+732    	; 0x31a <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 9b 2f 	jmp	0x5f36	; 0x5f36 <__vector_16>
      44:	6a c1       	rjmp	.+724    	; 0x31a <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 8e 2d 	jmp	0x5b1c	; 0x5b1c <__vector_18>
      4c:	0c 94 c0 2d 	jmp	0x5b80	; 0x5b80 <__vector_19>
      50:	64 c1       	rjmp	.+712    	; 0x31a <__bad_interrupt>
      52:	00 00       	nop
      54:	62 c1       	rjmp	.+708    	; 0x31a <__bad_interrupt>
      56:	00 00       	nop
      58:	60 c1       	rjmp	.+704    	; 0x31a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5e c1       	rjmp	.+700    	; 0x31a <__bad_interrupt>
      5e:	00 00       	nop
      60:	5c c1       	rjmp	.+696    	; 0x31a <__bad_interrupt>
      62:	00 00       	nop
      64:	5a c1       	rjmp	.+692    	; 0x31a <__bad_interrupt>
      66:	00 00       	nop
      68:	0c 94 db 29 	jmp	0x53b6	; 0x53b6 <__vector_26>
      6c:	56 c1       	rjmp	.+684    	; 0x31a <__bad_interrupt>
      6e:	00 00       	nop
      70:	54 c1       	rjmp	.+680    	; 0x31a <__bad_interrupt>
      72:	00 00       	nop
      74:	52 c1       	rjmp	.+676    	; 0x31a <__bad_interrupt>
      76:	00 00       	nop
      78:	50 c1       	rjmp	.+672    	; 0x31a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4e c1       	rjmp	.+668    	; 0x31a <__bad_interrupt>
      7e:	00 00       	nop
      80:	4c c1       	rjmp	.+664    	; 0x31a <__bad_interrupt>
      82:	00 00       	nop
      84:	4a c1       	rjmp	.+660    	; 0x31a <__bad_interrupt>
      86:	00 00       	nop
      88:	48 c1       	rjmp	.+656    	; 0x31a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d4 09       	sbc	r29, r4
      8e:	f7 09       	sbc	r31, r7
      90:	0c 0a       	sbc	r0, r28
      92:	3d 0a       	sbc	r3, r29
      94:	27 0b       	sbc	r18, r23
      96:	32 0c       	add	r3, r2
      98:	ff 0c       	add	r15, r15
      9a:	50 0d       	add	r21, r0
      9c:	88 0d       	add	r24, r8
      9e:	f3 0d       	add	r31, r3
      a0:	ae 0e       	add	r10, r30
      a2:	ae 0e       	add	r10, r30
      a4:	72 18       	sub	r7, r2
      a6:	89 18       	sub	r8, r9
      a8:	89 18       	sub	r8, r9
      aa:	86 18       	sub	r8, r6
      ac:	89 18       	sub	r8, r9
      ae:	70 18       	sub	r7, r0
      b0:	89 18       	sub	r8, r9
      b2:	89 18       	sub	r8, r9
      b4:	89 18       	sub	r8, r9
      b6:	64 18       	sub	r6, r4
      b8:	89 18       	sub	r8, r9
      ba:	89 18       	sub	r8, r9
      bc:	79 18       	sub	r7, r9
      be:	84 18       	sub	r8, r4
      c0:	82 18       	sub	r8, r2
      c2:	89 18       	sub	r8, r9
      c4:	89 18       	sub	r8, r9
      c6:	89 18       	sub	r8, r9
      c8:	80 18       	sub	r8, r0

000000ca <__trampolines_end>:
      ca:	00 40       	sbci	r16, 0x00	; 0
      cc:	7a 10       	cpse	r7, r10
      ce:	f3 5a       	subi	r31, 0xA3	; 163
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	72 4e       	sbci	r23, 0xE2	; 226
      d4:	18 09       	sbc	r17, r8
      d6:	00 10       	cpse	r0, r0
      d8:	a5 d4       	rcall	.+2378   	; 0xa24 <_Z14GetCodeRfidATev+0x54>
      da:	e8 00       	.word	0x00e8	; ????
      dc:	00 e8       	ldi	r16, 0x80	; 128
      de:	76 48       	sbci	r23, 0x86	; 134
      e0:	17 00       	.word	0x0017	; ????
      e2:	00 e4       	ldi	r16, 0x40	; 64
      e4:	0b 54       	subi	r16, 0x4B	; 75
      e6:	02 00       	.word	0x0002	; ????
      e8:	00 ca       	rjmp	.-3072   	; 0xfffff4ea <__eeprom_end+0xff7ef4ea>
      ea:	9a 3b       	cpi	r25, 0xBA	; 186
      ec:	00 00       	nop
      ee:	00 e1       	ldi	r16, 0x10	; 16
      f0:	f5 05       	cpc	r31, r5
      f2:	00 00       	nop
      f4:	80 96       	adiw	r24, 0x20	; 32
      f6:	98 00       	.word	0x0098	; ????
      f8:	00 00       	nop
      fa:	40 42       	sbci	r20, 0x20	; 32
      fc:	0f 00       	.word	0x000f	; ????
      fe:	00 00       	nop
     100:	a0 86       	std	Z+8, r10	; 0x08
     102:	01 00       	.word	0x0001	; ????
     104:	00 00       	nop
     106:	10 27       	eor	r17, r16
     108:	00 00       	nop
     10a:	00 00       	nop
     10c:	e8 03       	fmulsu	r22, r16
     10e:	00 00       	nop
     110:	00 00       	nop
     112:	64 00       	.word	0x0064	; ????
     114:	00 00       	nop
     116:	00 00       	nop
     118:	0a 00       	.word	0x000a	; ????
     11a:	00 00       	nop
     11c:	00 00       	nop
     11e:	01 00       	.word	0x0001	; ????
     120:	00 00       	nop
     122:	00 00       	nop
     124:	2c 76       	andi	r18, 0x6C	; 108
     126:	d8 88       	ldd	r13, Y+16	; 0x10
     128:	dc 67       	ori	r29, 0x7C	; 124
     12a:	4f 08       	sbc	r4, r15
     12c:	23 df       	rcall	.-442    	; 0xffffff74 <__eeprom_end+0xff7eff74>
     12e:	c1 df       	rcall	.-126    	; 0xb2 <__SREG__+0x73>
     130:	ae 59       	subi	r26, 0x9E	; 158
     132:	e1 b1       	in	r30, 0x01	; 1
     134:	b7 96       	adiw	r30, 0x27	; 39
     136:	e5 e3       	ldi	r30, 0x35	; 53
     138:	e4 53       	subi	r30, 0x34	; 52
     13a:	c6 3a       	cpi	r28, 0xA6	; 166
     13c:	e6 51       	subi	r30, 0x16	; 22
     13e:	99 76       	andi	r25, 0x69	; 105
     140:	96 e8       	ldi	r25, 0x86	; 134
     142:	e6 c2       	rjmp	.+1484   	; 0x710 <_Z10displayLCDP6Stringii+0x82>
     144:	84 26       	eor	r8, r20
     146:	eb 89       	ldd	r30, Y+19	; 0x13
     148:	8c 9b       	sbis	0x11, 4	; 17
     14a:	62 ed       	ldi	r22, 0xD2	; 210
     14c:	40 7c       	andi	r20, 0xC0	; 192
     14e:	6f fc       	.word	0xfc6f	; ????
     150:	ef bc       	out	0x2f, r14	; 47
     152:	9c 9f       	mul	r25, r28
     154:	40 f2       	brcs	.-112    	; 0xe6 <__trampolines_end+0x1c>
     156:	ba a5       	ldd	r27, Y+42	; 0x2a
     158:	6f a5       	ldd	r22, Y+47	; 0x2f
     15a:	f4 90       	lpm	r15, Z
     15c:	05 5a       	subi	r16, 0xA5	; 165
     15e:	2a f7       	brpl	.-54     	; 0x12a <__trampolines_end+0x60>
     160:	5c 93       	st	X, r21
     162:	6b 6c       	ori	r22, 0xCB	; 203
     164:	f9 67       	ori	r31, 0x79	; 121
     166:	6d c1       	rjmp	.+730    	; 0x442 <_Z8printTabh+0xe>
     168:	1b fc       	.word	0xfc1b	; ????
     16a:	e0 e4       	ldi	r30, 0x40	; 64
     16c:	0d 47       	sbci	r16, 0x7D	; 125
     16e:	fe f5       	brtc	.+126    	; 0x1ee <_ZZ5setupE3__c+0xc>
     170:	20 e6       	ldi	r18, 0x60	; 96
     172:	b5 00       	.word	0x00b5	; ????
     174:	d0 ed       	ldi	r29, 0xD0	; 208
     176:	90 2e       	mov	r9, r16
     178:	03 00       	.word	0x0003	; ????
     17a:	94 35       	cpi	r25, 0x54	; 84
     17c:	77 05       	cpc	r23, r7
     17e:	00 80       	ld	r0, Z
     180:	84 1e       	adc	r8, r20
     182:	08 00       	.word	0x0008	; ????
     184:	00 20       	and	r0, r0
     186:	4e 0a       	sbc	r4, r30
     188:	00 00       	nop
     18a:	00 c8       	rjmp	.-4096   	; 0xfffff18c <__eeprom_end+0xff7ef18c>
     18c:	0c 33       	cpi	r16, 0x3C	; 60
     18e:	33 33       	cpi	r19, 0x33	; 51
     190:	33 0f       	add	r19, r19
     192:	98 6e       	ori	r25, 0xE8	; 232
     194:	12 83       	std	Z+2, r17	; 0x02
     196:	11 41       	sbci	r17, 0x11	; 17
     198:	ef 8d       	ldd	r30, Y+31	; 0x1f
     19a:	21 14       	cp	r2, r1
     19c:	89 3b       	cpi	r24, 0xB9	; 185
     19e:	e6 55       	subi	r30, 0x56	; 86
     1a0:	16 cf       	rjmp	.-468    	; 0xffffffce <__eeprom_end+0xff7effce>
     1a2:	fe e6       	ldi	r31, 0x6E	; 110
     1a4:	db 18       	sub	r13, r11
     1a6:	d1 84       	ldd	r13, Z+9	; 0x09
     1a8:	4b 38       	cpi	r20, 0x8B	; 139
     1aa:	1b f7       	brvc	.-58     	; 0x172 <__trampolines_end+0xa8>
     1ac:	7c 1d       	adc	r23, r12
     1ae:	90 1d       	adc	r25, r0
     1b0:	a4 bb       	out	0x14, r26	; 20
     1b2:	e4 24       	eor	r14, r4
     1b4:	20 32       	cpi	r18, 0x20	; 32
     1b6:	84 72       	andi	r24, 0x24	; 36
     1b8:	5e 22       	and	r5, r30
     1ba:	81 00       	.word	0x0081	; ????
     1bc:	c9 f1       	breq	.+114    	; 0x230 <_ZL11daysInMonth+0xa>
     1be:	24 ec       	ldi	r18, 0xC4	; 196
     1c0:	a1 e5       	ldi	r26, 0x51	; 81
     1c2:	3d 27       	eor	r19, r29

000001c4 <_ZZ5setupE3__c_0>:
     1c4:	52 54 43 20 63 68 69 70 20 44 53 33 32 33 31 4d     RTC chip DS3231M
     1d4:	20 69 6e 69 74 69 61 6c 69 7a 65 64 2e 00            initialized..

000001e2 <_ZZ5setupE3__c>:
     1e2:	55 6e 61 62 6c 65 20 74 6f 20 66 69 6e 64 20 44     Unable to find D
     1f2:	53 33 32 33 31 4d 4d 2e 20 43 68 65 63 6b 69 6e     S3231MM. Checkin
     202:	67 20 61 67 61 69 6e 20 69 6e 20 33 73 2e 00        g again in 3s..

00000211 <_ZZN13DS3231M_Class6adjustEvE3__c>:
     211:	53 65 70 20 31 34 20 32 30 32 30 00                 Sep 14 2020.

0000021d <_ZZN13DS3231M_Class6adjustEvE3__c_0>:
     21d:	31 33 3a 32 37 3a 30 32 00                          13:27:02.

00000226 <_ZL11daysInMonth>:
     226:	1f 1c 1f 1e 1f 1e 1f 1f 1e 1f 1e 1f                 ............

00000232 <digital_pin_to_timer_PGM>:
     232:	00 00 00 00 04 03 08 07 00 00 02 00 09 0a 00 00     ................
	...
     24e:	00 00 00 01                                         ....

00000252 <digital_pin_to_bit_mask_PGM>:
     252:	01 02 04 08 10 20 40 80 01 02 10 20 40 80 10 20     ..... @.... @.. 
     262:	40 80 10 08 20 04 40 80 01 02 04 08 01 02 04 08     @... .@.........

00000272 <digital_pin_to_port_PGM>:
     272:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 01 01     ................
     282:	01 01 03 03 03 03 03 03 01 01 01 01 03 03 02 02     ................

00000292 <port_to_input_PGM>:
     292:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

0000029c <port_to_output_PGM>:
     29c:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000002a6 <port_to_mode_PGM>:
     2a6:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000002b0 <__ctors_start>:
     2b0:	ba 10       	cpse	r11, r10
     2b2:	f8 1a       	sub	r15, r24
     2b4:	50 1b       	sub	r21, r16
     2b6:	48 1e       	adc	r4, r24
     2b8:	2f 20       	and	r2, r15
     2ba:	3a 20       	and	r3, r10
     2bc:	0c 22       	and	r0, r28
     2be:	dc 25       	eor	r29, r12
     2c0:	6b 2c       	mov	r6, r11
     2c2:	ee 2d       	mov	r30, r14

000002c4 <__ctors_end>:
     2c4:	8b 11       	cpse	r24, r11

000002c6 <__dtors_end>:
     2c6:	11 24       	eor	r1, r1
     2c8:	1f be       	out	0x3f, r1	; 63
     2ca:	cf ef       	ldi	r28, 0xFF	; 255
     2cc:	d0 e4       	ldi	r29, 0x40	; 64
     2ce:	de bf       	out	0x3e, r29	; 62
     2d0:	cd bf       	out	0x3d, r28	; 61

000002d2 <__do_copy_data>:
     2d2:	18 e0       	ldi	r17, 0x08	; 8
     2d4:	a0 e0       	ldi	r26, 0x00	; 0
     2d6:	b1 e0       	ldi	r27, 0x01	; 1
     2d8:	ec e0       	ldi	r30, 0x0C	; 12
     2da:	f5 e7       	ldi	r31, 0x75	; 117
     2dc:	00 e0       	ldi	r16, 0x00	; 0
     2de:	0b bf       	out	0x3b, r16	; 59
     2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <__do_copy_data+0x14>
     2e2:	07 90       	elpm	r0, Z+
     2e4:	0d 92       	st	X+, r0
     2e6:	ae 39       	cpi	r26, 0x9E	; 158
     2e8:	b1 07       	cpc	r27, r17
     2ea:	d9 f7       	brne	.-10     	; 0x2e2 <__do_copy_data+0x10>

000002ec <__do_clear_bss>:
     2ec:	2b e0       	ldi	r18, 0x0B	; 11
     2ee:	ae e9       	ldi	r26, 0x9E	; 158
     2f0:	b8 e0       	ldi	r27, 0x08	; 8
     2f2:	01 c0       	rjmp	.+2      	; 0x2f6 <.do_clear_bss_start>

000002f4 <.do_clear_bss_loop>:
     2f4:	1d 92       	st	X+, r1

000002f6 <.do_clear_bss_start>:
     2f6:	a6 3a       	cpi	r26, 0xA6	; 166
     2f8:	b2 07       	cpc	r27, r18
     2fa:	e1 f7       	brne	.-8      	; 0x2f4 <.do_clear_bss_loop>

000002fc <__do_global_ctors>:
     2fc:	11 e0       	ldi	r17, 0x01	; 1
     2fe:	c2 e6       	ldi	r28, 0x62	; 98
     300:	d1 e0       	ldi	r29, 0x01	; 1
     302:	04 c0       	rjmp	.+8      	; 0x30c <__do_global_ctors+0x10>
     304:	21 97       	sbiw	r28, 0x01	; 1
     306:	fe 01       	movw	r30, r28
     308:	0e 94 43 35 	call	0x6a86	; 0x6a86 <__tablejump2__>
     30c:	c8 35       	cpi	r28, 0x58	; 88
     30e:	d1 07       	cpc	r29, r17
     310:	c9 f7       	brne	.-14     	; 0x304 <__do_global_ctors+0x8>
     312:	0e 94 7a 2e 	call	0x5cf4	; 0x5cf4 <main>
     316:	0c 94 7a 3a 	jmp	0x74f4	; 0x74f4 <__do_global_dtors>

0000031a <__bad_interrupt>:
     31a:	72 ce       	rjmp	.-796    	; 0x0 <__vectors>

0000031c <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     31c:	80 e0       	ldi	r24, 0x00	; 0
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	08 95       	ret

00000322 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     322:	08 95       	ret

00000324 <_ZL11disable_ETHv>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     324:	44 9a       	sbi	0x08, 4	; 8
     326:	08 95       	ret

00000328 <_Z19InizializzaEthernetv>:
     328:	ef 92       	push	r14
     32a:	ff 92       	push	r15
     32c:	0f 93       	push	r16
     32e:	1f 93       	push	r17
     330:	cf 93       	push	r28
     332:	df 93       	push	r29
     334:	cd b7       	in	r28, 0x3d	; 61
     336:	de b7       	in	r29, 0x3e	; 62
     338:	68 97       	sbiw	r28, 0x18	; 24
     33a:	0f b6       	in	r0, 0x3f	; 63
     33c:	f8 94       	cli
     33e:	de bf       	out	0x3e, r29	; 62
     340:	0f be       	out	0x3f, r0	; 63
     342:	cd bf       	out	0x3d, r28	; 61
     344:	8e e7       	ldi	r24, 0x7E	; 126
     346:	98 e0       	ldi	r25, 0x08	; 8
     348:	9a 83       	std	Y+2, r25	; 0x02
     34a:	89 83       	std	Y+1, r24	; 0x01
     34c:	40 91 e1 08 	lds	r20, 0x08E1	; 0x8008e1 <subnet+0x2>
     350:	50 91 e2 08 	lds	r21, 0x08E2	; 0x8008e2 <subnet+0x3>
     354:	60 91 e3 08 	lds	r22, 0x08E3	; 0x8008e3 <subnet+0x4>
     358:	70 91 e4 08 	lds	r23, 0x08E4	; 0x8008e4 <subnet+0x5>
     35c:	4b 83       	std	Y+3, r20	; 0x03
     35e:	5c 83       	std	Y+4, r21	; 0x04
     360:	6d 83       	std	Y+5, r22	; 0x05
     362:	7e 83       	std	Y+6, r23	; 0x06
     364:	98 87       	std	Y+8, r25	; 0x08
     366:	8f 83       	std	Y+7, r24	; 0x07
     368:	40 91 e7 08 	lds	r20, 0x08E7	; 0x8008e7 <gateway+0x2>
     36c:	50 91 e8 08 	lds	r21, 0x08E8	; 0x8008e8 <gateway+0x3>
     370:	60 91 e9 08 	lds	r22, 0x08E9	; 0x8008e9 <gateway+0x4>
     374:	70 91 ea 08 	lds	r23, 0x08EA	; 0x8008ea <gateway+0x5>
     378:	49 87       	std	Y+9, r20	; 0x09
     37a:	5a 87       	std	Y+10, r21	; 0x0a
     37c:	6b 87       	std	Y+11, r22	; 0x0b
     37e:	7c 87       	std	Y+12, r23	; 0x0c
     380:	9e 87       	std	Y+14, r25	; 0x0e
     382:	8d 87       	std	Y+13, r24	; 0x0d
     384:	40 91 ed 08 	lds	r20, 0x08ED	; 0x8008ed <myDns+0x2>
     388:	50 91 ee 08 	lds	r21, 0x08EE	; 0x8008ee <myDns+0x3>
     38c:	60 91 ef 08 	lds	r22, 0x08EF	; 0x8008ef <myDns+0x4>
     390:	70 91 f0 08 	lds	r23, 0x08F0	; 0x8008f0 <myDns+0x5>
     394:	4f 87       	std	Y+15, r20	; 0x0f
     396:	58 8b       	std	Y+16, r21	; 0x10
     398:	69 8b       	std	Y+17, r22	; 0x11
     39a:	7a 8b       	std	Y+18, r23	; 0x12
     39c:	9c 8b       	std	Y+20, r25	; 0x14
     39e:	8b 8b       	std	Y+19, r24	; 0x13
     3a0:	80 91 f3 08 	lds	r24, 0x08F3	; 0x8008f3 <ipCCEC+0x2>
     3a4:	90 91 f4 08 	lds	r25, 0x08F4	; 0x8008f4 <ipCCEC+0x3>
     3a8:	a0 91 f5 08 	lds	r26, 0x08F5	; 0x8008f5 <ipCCEC+0x4>
     3ac:	b0 91 f6 08 	lds	r27, 0x08F6	; 0x8008f6 <ipCCEC+0x5>
     3b0:	8d 8b       	std	Y+21, r24	; 0x15
     3b2:	9e 8b       	std	Y+22, r25	; 0x16
     3b4:	af 8b       	std	Y+23, r26	; 0x17
     3b6:	b8 8f       	std	Y+24, r27	; 0x18
     3b8:	ce 01       	movw	r24, r28
     3ba:	01 96       	adiw	r24, 0x01	; 1
     3bc:	7c 01       	movw	r14, r24
     3be:	8e 01       	movw	r16, r28
     3c0:	09 5f       	subi	r16, 0xF9	; 249
     3c2:	1f 4f       	sbci	r17, 0xFF	; 255
     3c4:	9e 01       	movw	r18, r28
     3c6:	23 5f       	subi	r18, 0xF3	; 243
     3c8:	3f 4f       	sbci	r19, 0xFF	; 255
     3ca:	ae 01       	movw	r20, r28
     3cc:	4d 5e       	subi	r20, 0xED	; 237
     3ce:	5f 4f       	sbci	r21, 0xFF	; 255
     3d0:	66 e2       	ldi	r22, 0x26	; 38
     3d2:	71 e0       	ldi	r23, 0x01	; 1
     3d4:	89 ef       	ldi	r24, 0xF9	; 249
     3d6:	99 e0       	ldi	r25, 0x09	; 9
     3d8:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_>
     3dc:	68 96       	adiw	r28, 0x18	; 24
     3de:	0f b6       	in	r0, 0x3f	; 63
     3e0:	f8 94       	cli
     3e2:	de bf       	out	0x3e, r29	; 62
     3e4:	0f be       	out	0x3f, r0	; 63
     3e6:	cd bf       	out	0x3d, r28	; 61
     3e8:	df 91       	pop	r29
     3ea:	cf 91       	pop	r28
     3ec:	1f 91       	pop	r17
     3ee:	0f 91       	pop	r16
     3f0:	ff 90       	pop	r15
     3f2:	ef 90       	pop	r14
     3f4:	08 95       	ret

000003f6 <_Z11my_delay_msi>:
     3f6:	18 16       	cp	r1, r24
     3f8:	19 06       	cpc	r1, r25
     3fa:	44 f4       	brge	.+16     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     3fc:	ef e9       	ldi	r30, 0x9F	; 159
     3fe:	ff e0       	ldi	r31, 0x0F	; 15
     400:	31 97       	sbiw	r30, 0x01	; 1
     402:	f1 f7       	brne	.-4      	; 0x400 <__LOCK_REGION_LENGTH__>
     404:	00 c0       	rjmp	.+0      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     406:	00 00       	nop
     408:	01 97       	sbiw	r24, 0x01	; 1
     40a:	f5 cf       	rjmp	.-22     	; 0x3f6 <_Z11my_delay_msi>
     40c:	08 95       	ret

0000040e <_Z9printLinev>:
     40e:	cf 93       	push	r28
     410:	8c ef       	ldi	r24, 0xFC	; 252
     412:	9a e0       	ldi	r25, 0x0A	; 10
     414:	0e 94 ff 2e 	call	0x5dfe	; 0x5dfe <_ZN5Print7printlnEv>
     418:	cd e7       	ldi	r28, 0x7D	; 125
     41a:	61 e8       	ldi	r22, 0x81	; 129
     41c:	71 e0       	ldi	r23, 0x01	; 1
     41e:	8c ef       	ldi	r24, 0xFC	; 252
     420:	9a e0       	ldi	r25, 0x0A	; 10
     422:	0e 94 f7 2e 	call	0x5dee	; 0x5dee <_ZN5Print5printEPKc>
     426:	c1 50       	subi	r28, 0x01	; 1
     428:	c1 f7       	brne	.-16     	; 0x41a <_Z9printLinev+0xc>
     42a:	8c ef       	ldi	r24, 0xFC	; 252
     42c:	9a e0       	ldi	r25, 0x0A	; 10
     42e:	cf 91       	pop	r28
     430:	0c 94 ff 2e 	jmp	0x5dfe	; 0x5dfe <_ZN5Print7printlnEv>

00000434 <_Z8printTabh>:
     434:	cf 93       	push	r28
     436:	df 93       	push	r29
     438:	d8 2f       	mov	r29, r24
     43a:	c0 e0       	ldi	r28, 0x00	; 0
     43c:	cd 17       	cp	r28, r29
     43e:	41 f0       	breq	.+16     	; 0x450 <_Z8printTabh+0x1c>
     440:	63 e8       	ldi	r22, 0x83	; 131
     442:	71 e0       	ldi	r23, 0x01	; 1
     444:	8c ef       	ldi	r24, 0xFC	; 252
     446:	9a e0       	ldi	r25, 0x0A	; 10
     448:	0e 94 f7 2e 	call	0x5dee	; 0x5dee <_ZN5Print5printEPKc>
     44c:	cf 5f       	subi	r28, 0xFF	; 255
     44e:	f6 cf       	rjmp	.-20     	; 0x43c <_Z8printTabh+0x8>
     450:	df 91       	pop	r29
     452:	cf 91       	pop	r28
     454:	08 95       	ret

00000456 <_Z4passb>:
     456:	cf 93       	push	r28
     458:	c8 2f       	mov	r28, r24
     45a:	81 e0       	ldi	r24, 0x01	; 1
     45c:	eb df       	rcall	.-42     	; 0x434 <_Z8printTabh>
     45e:	65 e8       	ldi	r22, 0x85	; 133
     460:	71 e0       	ldi	r23, 0x01	; 1
     462:	8c ef       	ldi	r24, 0xFC	; 252
     464:	9a e0       	ldi	r25, 0x0A	; 10
     466:	0e 94 f7 2e 	call	0x5dee	; 0x5dee <_ZN5Print5printEPKc>
     46a:	cc 23       	and	r28, r28
     46c:	19 f0       	breq	.+6      	; 0x474 <_Z4passb+0x1e>
     46e:	69 e8       	ldi	r22, 0x89	; 137
     470:	71 e0       	ldi	r23, 0x01	; 1
     472:	02 c0       	rjmp	.+4      	; 0x478 <_Z4passb+0x22>
     474:	6e e8       	ldi	r22, 0x8E	; 142
     476:	71 e0       	ldi	r23, 0x01	; 1
     478:	8c ef       	ldi	r24, 0xFC	; 252
     47a:	9a e0       	ldi	r25, 0x0A	; 10
     47c:	0e 94 f7 2e 	call	0x5dee	; 0x5dee <_ZN5Print5printEPKc>
     480:	81 e0       	ldi	r24, 0x01	; 1
     482:	cf 91       	pop	r28
     484:	d7 cf       	rjmp	.-82     	; 0x434 <_Z8printTabh>

00000486 <_Z6Buzzerhm>:
     486:	cf 92       	push	r12
     488:	df 92       	push	r13
     48a:	ef 92       	push	r14
     48c:	ff 92       	push	r15
     48e:	0f 93       	push	r16
     490:	1f 93       	push	r17
     492:	cf 93       	push	r28
     494:	df 93       	push	r29
     496:	6a 01       	movw	r12, r20
     498:	7b 01       	movw	r14, r22
     49a:	c0 e0       	ldi	r28, 0x00	; 0
     49c:	d0 e0       	ldi	r29, 0x00	; 0
     49e:	08 2f       	mov	r16, r24
     4a0:	10 e0       	ldi	r17, 0x00	; 0
     4a2:	c0 17       	cp	r28, r16
     4a4:	d1 07       	cpc	r29, r17
     4a6:	24 f4       	brge	.+8      	; 0x4b0 <_Z6Buzzerhm+0x2a>
     4a8:	c6 01       	movw	r24, r12
     4aa:	a5 df       	rcall	.-182    	; 0x3f6 <_Z11my_delay_msi>
     4ac:	21 96       	adiw	r28, 0x01	; 1
     4ae:	f9 cf       	rjmp	.-14     	; 0x4a2 <_Z6Buzzerhm+0x1c>
     4b0:	df 91       	pop	r29
     4b2:	cf 91       	pop	r28
     4b4:	1f 91       	pop	r17
     4b6:	0f 91       	pop	r16
     4b8:	ff 90       	pop	r15
     4ba:	ef 90       	pop	r14
     4bc:	df 90       	pop	r13
     4be:	cf 90       	pop	r12
     4c0:	08 95       	ret

000004c2 <_Z13getCharKeypadi>:
     4c2:	82 32       	cpi	r24, 0x22	; 34
     4c4:	91 05       	cpc	r25, r1
     4c6:	09 f4       	brne	.+2      	; 0x4ca <_Z13getCharKeypadi+0x8>
     4c8:	9a c0       	rjmp	.+308    	; 0x5fe <_Z13getCharKeypadi+0x13c>
     4ca:	6c f5       	brge	.+90     	; 0x526 <_Z13getCharKeypadi+0x64>
     4cc:	8a 30       	cpi	r24, 0x0A	; 10
     4ce:	91 05       	cpc	r25, r1
     4d0:	09 f4       	brne	.+2      	; 0x4d4 <_Z13getCharKeypadi+0x12>
     4d2:	83 c0       	rjmp	.+262    	; 0x5da <_Z13getCharKeypadi+0x118>
     4d4:	a4 f4       	brge	.+40     	; 0x4fe <_Z13getCharKeypadi+0x3c>
     4d6:	86 30       	cpi	r24, 0x06	; 6
     4d8:	91 05       	cpc	r25, r1
     4da:	09 f4       	brne	.+2      	; 0x4de <_Z13getCharKeypadi+0x1c>
     4dc:	75 c0       	rjmp	.+234    	; 0x5c8 <_Z13getCharKeypadi+0x106>
     4de:	89 30       	cpi	r24, 0x09	; 9
     4e0:	91 05       	cpc	r25, r1
     4e2:	09 f4       	brne	.+2      	; 0x4e6 <_Z13getCharKeypadi+0x24>
     4e4:	5d c0       	rjmp	.+186    	; 0x5a0 <_Z13getCharKeypadi+0xde>
     4e6:	05 97       	sbiw	r24, 0x05	; 5
     4e8:	09 f0       	breq	.+2      	; 0x4ec <_Z13getCharKeypadi+0x2a>
     4ea:	cf c0       	rjmp	.+414    	; 0x68a <_Z13getCharKeypadi+0x1c8>
     4ec:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <MappaKeys>
     4f0:	8c ef       	ldi	r24, 0xFC	; 252
     4f2:	9a e0       	ldi	r25, 0x0A	; 10
     4f4:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <_ZN5Print5printEc>
     4f8:	20 e0       	ldi	r18, 0x00	; 0
     4fa:	30 e0       	ldi	r19, 0x00	; 0
     4fc:	59 c0       	rjmp	.+178    	; 0x5b0 <_Z13getCharKeypadi+0xee>
     4fe:	82 31       	cpi	r24, 0x12	; 18
     500:	91 05       	cpc	r25, r1
     502:	09 f4       	brne	.+2      	; 0x506 <_Z13getCharKeypadi+0x44>
     504:	73 c0       	rjmp	.+230    	; 0x5ec <_Z13getCharKeypadi+0x12a>
     506:	81 32       	cpi	r24, 0x21	; 33
     508:	91 05       	cpc	r25, r1
     50a:	09 f4       	brne	.+2      	; 0x50e <_Z13getCharKeypadi+0x4c>
     50c:	54 c0       	rjmp	.+168    	; 0x5b6 <_Z13getCharKeypadi+0xf4>
     50e:	41 97       	sbiw	r24, 0x11	; 17
     510:	09 f0       	breq	.+2      	; 0x514 <_Z13getCharKeypadi+0x52>
     512:	bb c0       	rjmp	.+374    	; 0x68a <_Z13getCharKeypadi+0x1c8>
     514:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <MappaKeys+0x2>
     518:	8c ef       	ldi	r24, 0xFC	; 252
     51a:	9a e0       	ldi	r25, 0x0A	; 10
     51c:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <_ZN5Print5printEc>
     520:	22 e0       	ldi	r18, 0x02	; 2
     522:	30 e0       	ldi	r19, 0x00	; 0
     524:	45 c0       	rjmp	.+138    	; 0x5b0 <_Z13getCharKeypadi+0xee>
     526:	80 36       	cpi	r24, 0x60	; 96
     528:	91 05       	cpc	r25, r1
     52a:	09 f4       	brne	.+2      	; 0x52e <_Z13getCharKeypadi+0x6c>
     52c:	99 c0       	rjmp	.+306    	; 0x660 <_Z13getCharKeypadi+0x19e>
     52e:	ac f4       	brge	.+42     	; 0x55a <_Z13getCharKeypadi+0x98>
     530:	88 34       	cpi	r24, 0x48	; 72
     532:	91 05       	cpc	r25, r1
     534:	09 f4       	brne	.+2      	; 0x538 <_Z13getCharKeypadi+0x76>
     536:	82 c0       	rjmp	.+260    	; 0x63c <_Z13getCharKeypadi+0x17a>
     538:	80 35       	cpi	r24, 0x50	; 80
     53a:	91 05       	cpc	r25, r1
     53c:	09 f4       	brne	.+2      	; 0x540 <_Z13getCharKeypadi+0x7e>
     53e:	87 c0       	rjmp	.+270    	; 0x64e <_Z13getCharKeypadi+0x18c>
     540:	84 34       	cpi	r24, 0x44	; 68
     542:	91 05       	cpc	r25, r1
     544:	09 f0       	breq	.+2      	; 0x548 <_Z13getCharKeypadi+0x86>
     546:	a1 c0       	rjmp	.+322    	; 0x68a <_Z13getCharKeypadi+0x1c8>
     548:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <MappaKeys+0xc>
     54c:	8c ef       	ldi	r24, 0xFC	; 252
     54e:	9a e0       	ldi	r25, 0x0A	; 10
     550:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <_ZN5Print5printEc>
     554:	20 e0       	ldi	r18, 0x00	; 0
     556:	30 e0       	ldi	r19, 0x00	; 0
     558:	8b c0       	rjmp	.+278    	; 0x670 <_Z13getCharKeypadi+0x1ae>
     55a:	88 38       	cpi	r24, 0x88	; 136
     55c:	91 05       	cpc	r25, r1
     55e:	09 f4       	brne	.+2      	; 0x562 <_Z13getCharKeypadi+0xa0>
     560:	59 c0       	rjmp	.+178    	; 0x614 <_Z13getCharKeypadi+0x152>
     562:	6c f4       	brge	.+26     	; 0x57e <_Z13getCharKeypadi+0xbc>
     564:	84 38       	cpi	r24, 0x84	; 132
     566:	91 05       	cpc	r25, r1
     568:	09 f0       	breq	.+2      	; 0x56c <_Z13getCharKeypadi+0xaa>
     56a:	8f c0       	rjmp	.+286    	; 0x68a <_Z13getCharKeypadi+0x1c8>
     56c:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <MappaKeys+0x8>
     570:	8c ef       	ldi	r24, 0xFC	; 252
     572:	9a e0       	ldi	r25, 0x0A	; 10
     574:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <_ZN5Print5printEc>
     578:	20 e0       	ldi	r18, 0x00	; 0
     57a:	30 e0       	ldi	r19, 0x00	; 0
     57c:	5c c0       	rjmp	.+184    	; 0x636 <_Z13getCharKeypadi+0x174>
     57e:	80 39       	cpi	r24, 0x90	; 144
     580:	91 05       	cpc	r25, r1
     582:	09 f4       	brne	.+2      	; 0x586 <_Z13getCharKeypadi+0xc4>
     584:	50 c0       	rjmp	.+160    	; 0x626 <_Z13getCharKeypadi+0x164>
     586:	80 3a       	cpi	r24, 0xA0	; 160
     588:	91 05       	cpc	r25, r1
     58a:	09 f0       	breq	.+2      	; 0x58e <_Z13getCharKeypadi+0xcc>
     58c:	7e c0       	rjmp	.+252    	; 0x68a <_Z13getCharKeypadi+0x1c8>
     58e:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <MappaKeys+0xb>
     592:	8c ef       	ldi	r24, 0xFC	; 252
     594:	9a e0       	ldi	r25, 0x0A	; 10
     596:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <_ZN5Print5printEc>
     59a:	23 e0       	ldi	r18, 0x03	; 3
     59c:	30 e0       	ldi	r19, 0x00	; 0
     59e:	4b c0       	rjmp	.+150    	; 0x636 <_Z13getCharKeypadi+0x174>
     5a0:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <MappaKeys+0x1>
     5a4:	8c ef       	ldi	r24, 0xFC	; 252
     5a6:	9a e0       	ldi	r25, 0x0A	; 10
     5a8:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <_ZN5Print5printEc>
     5ac:	21 e0       	ldi	r18, 0x01	; 1
     5ae:	30 e0       	ldi	r19, 0x00	; 0
     5b0:	80 e0       	ldi	r24, 0x00	; 0
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	5f c0       	rjmp	.+190    	; 0x674 <_Z13getCharKeypadi+0x1b2>
     5b6:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <MappaKeys+0x3>
     5ba:	8c ef       	ldi	r24, 0xFC	; 252
     5bc:	9a e0       	ldi	r25, 0x0A	; 10
     5be:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <_ZN5Print5printEc>
     5c2:	23 e0       	ldi	r18, 0x03	; 3
     5c4:	30 e0       	ldi	r19, 0x00	; 0
     5c6:	f4 cf       	rjmp	.-24     	; 0x5b0 <_Z13getCharKeypadi+0xee>
     5c8:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <MappaKeys+0x4>
     5cc:	8c ef       	ldi	r24, 0xFC	; 252
     5ce:	9a e0       	ldi	r25, 0x0A	; 10
     5d0:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <_ZN5Print5printEc>
     5d4:	20 e0       	ldi	r18, 0x00	; 0
     5d6:	30 e0       	ldi	r19, 0x00	; 0
     5d8:	1a c0       	rjmp	.+52     	; 0x60e <_Z13getCharKeypadi+0x14c>
     5da:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <MappaKeys+0x5>
     5de:	8c ef       	ldi	r24, 0xFC	; 252
     5e0:	9a e0       	ldi	r25, 0x0A	; 10
     5e2:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <_ZN5Print5printEc>
     5e6:	21 e0       	ldi	r18, 0x01	; 1
     5e8:	30 e0       	ldi	r19, 0x00	; 0
     5ea:	11 c0       	rjmp	.+34     	; 0x60e <_Z13getCharKeypadi+0x14c>
     5ec:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <MappaKeys+0x6>
     5f0:	8c ef       	ldi	r24, 0xFC	; 252
     5f2:	9a e0       	ldi	r25, 0x0A	; 10
     5f4:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <_ZN5Print5printEc>
     5f8:	22 e0       	ldi	r18, 0x02	; 2
     5fa:	30 e0       	ldi	r19, 0x00	; 0
     5fc:	08 c0       	rjmp	.+16     	; 0x60e <_Z13getCharKeypadi+0x14c>
     5fe:	60 91 0d 01 	lds	r22, 0x010D	; 0x80010d <MappaKeys+0x7>
     602:	8c ef       	ldi	r24, 0xFC	; 252
     604:	9a e0       	ldi	r25, 0x0A	; 10
     606:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <_ZN5Print5printEc>
     60a:	23 e0       	ldi	r18, 0x03	; 3
     60c:	30 e0       	ldi	r19, 0x00	; 0
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	30 c0       	rjmp	.+96     	; 0x674 <_Z13getCharKeypadi+0x1b2>
     614:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <MappaKeys+0x9>
     618:	8c ef       	ldi	r24, 0xFC	; 252
     61a:	9a e0       	ldi	r25, 0x0A	; 10
     61c:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <_ZN5Print5printEc>
     620:	21 e0       	ldi	r18, 0x01	; 1
     622:	30 e0       	ldi	r19, 0x00	; 0
     624:	08 c0       	rjmp	.+16     	; 0x636 <_Z13getCharKeypadi+0x174>
     626:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <MappaKeys+0xa>
     62a:	8c ef       	ldi	r24, 0xFC	; 252
     62c:	9a e0       	ldi	r25, 0x0A	; 10
     62e:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <_ZN5Print5printEc>
     632:	22 e0       	ldi	r18, 0x02	; 2
     634:	30 e0       	ldi	r19, 0x00	; 0
     636:	82 e0       	ldi	r24, 0x02	; 2
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	1c c0       	rjmp	.+56     	; 0x674 <_Z13getCharKeypadi+0x1b2>
     63c:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <MappaKeys+0xd>
     640:	8c ef       	ldi	r24, 0xFC	; 252
     642:	9a e0       	ldi	r25, 0x0A	; 10
     644:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <_ZN5Print5printEc>
     648:	21 e0       	ldi	r18, 0x01	; 1
     64a:	30 e0       	ldi	r19, 0x00	; 0
     64c:	11 c0       	rjmp	.+34     	; 0x670 <_Z13getCharKeypadi+0x1ae>
     64e:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <MappaKeys+0xe>
     652:	8c ef       	ldi	r24, 0xFC	; 252
     654:	9a e0       	ldi	r25, 0x0A	; 10
     656:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <_ZN5Print5printEc>
     65a:	22 e0       	ldi	r18, 0x02	; 2
     65c:	30 e0       	ldi	r19, 0x00	; 0
     65e:	08 c0       	rjmp	.+16     	; 0x670 <_Z13getCharKeypadi+0x1ae>
     660:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <MappaKeys+0xf>
     664:	8c ef       	ldi	r24, 0xFC	; 252
     666:	9a e0       	ldi	r25, 0x0A	; 10
     668:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <_ZN5Print5printEc>
     66c:	23 e0       	ldi	r18, 0x03	; 3
     66e:	30 e0       	ldi	r19, 0x00	; 0
     670:	83 e0       	ldi	r24, 0x03	; 3
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	88 0f       	add	r24, r24
     676:	99 1f       	adc	r25, r25
     678:	88 0f       	add	r24, r24
     67a:	99 1f       	adc	r25, r25
     67c:	8a 5f       	subi	r24, 0xFA	; 250
     67e:	9e 4f       	sbci	r25, 0xFE	; 254
     680:	fc 01       	movw	r30, r24
     682:	e2 0f       	add	r30, r18
     684:	f3 1f       	adc	r31, r19
     686:	80 81       	ld	r24, Z
     688:	08 95       	ret
     68a:	8e e4       	ldi	r24, 0x4E	; 78
     68c:	08 95       	ret

0000068e <_Z10displayLCDP6Stringii>:
     68e:	cf 92       	push	r12
     690:	df 92       	push	r13
     692:	ef 92       	push	r14
     694:	ff 92       	push	r15
     696:	0f 93       	push	r16
     698:	1f 93       	push	r17
     69a:	cf 93       	push	r28
     69c:	df 93       	push	r29
     69e:	cd b7       	in	r28, 0x3d	; 61
     6a0:	de b7       	in	r29, 0x3e	; 62
     6a2:	2c 97       	sbiw	r28, 0x0c	; 12
     6a4:	0f b6       	in	r0, 0x3f	; 63
     6a6:	f8 94       	cli
     6a8:	de bf       	out	0x3e, r29	; 62
     6aa:	0f be       	out	0x3f, r0	; 63
     6ac:	cd bf       	out	0x3d, r28	; 61
     6ae:	8c 01       	movw	r16, r24
     6b0:	6b 01       	movw	r12, r22
     6b2:	7a 01       	movw	r14, r20
     6b4:	84 e7       	ldi	r24, 0x74	; 116
     6b6:	99 e0       	ldi	r25, 0x09	; 9
     6b8:	0e 94 67 26 	call	0x4cce	; 0x4cce <_ZN3LCD5clearEv>
     6bc:	82 e0       	ldi	r24, 0x02	; 2
     6be:	c8 16       	cp	r12, r24
     6c0:	d1 04       	cpc	r13, r1
     6c2:	0c f4       	brge	.+2      	; 0x6c6 <_Z10displayLCDP6Stringii+0x38>
     6c4:	47 c0       	rjmp	.+142    	; 0x754 <_Z10displayLCDP6Stringii+0xc6>
     6c6:	40 91 b1 08 	lds	r20, 0x08B1	; 0x8008b1 <UltimoPassaggioStato>
     6ca:	50 91 b2 08 	lds	r21, 0x08B2	; 0x8008b2 <UltimoPassaggioStato+0x1>
     6ce:	60 91 b3 08 	lds	r22, 0x08B3	; 0x8008b3 <UltimoPassaggioStato+0x2>
     6d2:	70 91 b4 08 	lds	r23, 0x08B4	; 0x8008b4 <UltimoPassaggioStato+0x3>
     6d6:	80 91 ad 08 	lds	r24, 0x08AD	; 0x8008ad <Timer>
     6da:	90 91 ae 08 	lds	r25, 0x08AE	; 0x8008ae <Timer+0x1>
     6de:	a0 91 af 08 	lds	r26, 0x08AF	; 0x8008af <Timer+0x2>
     6e2:	b0 91 b0 08 	lds	r27, 0x08B0	; 0x8008b0 <Timer+0x3>
     6e6:	48 0f       	add	r20, r24
     6e8:	59 1f       	adc	r21, r25
     6ea:	6a 1f       	adc	r22, r26
     6ec:	7b 1f       	adc	r23, r27
     6ee:	41 50       	subi	r20, 0x01	; 1
     6f0:	51 09       	sbc	r21, r1
     6f2:	61 09       	sbc	r22, r1
     6f4:	71 09       	sbc	r23, r1
     6f6:	80 91 b5 08 	lds	r24, 0x08B5	; 0x8008b5 <secs>
     6fa:	90 91 b6 08 	lds	r25, 0x08B6	; 0x8008b6 <secs+0x1>
     6fe:	a0 91 b7 08 	lds	r26, 0x08B7	; 0x8008b7 <secs+0x2>
     702:	b0 91 b8 08 	lds	r27, 0x08B8	; 0x8008b8 <secs+0x3>
     706:	48 1b       	sub	r20, r24
     708:	59 0b       	sbc	r21, r25
     70a:	6a 0b       	sbc	r22, r26
     70c:	7b 0b       	sbc	r23, r27
     70e:	2a e0       	ldi	r18, 0x0A	; 10
     710:	ce 01       	movw	r24, r28
     712:	07 96       	adiw	r24, 0x07	; 7
     714:	0e 94 8e 32 	call	0x651c	; 0x651c <_ZN6StringC1Emh>
     718:	63 e9       	ldi	r22, 0x93	; 147
     71a:	71 e0       	ldi	r23, 0x01	; 1
     71c:	ce 01       	movw	r24, r28
     71e:	01 96       	adiw	r24, 0x01	; 1
     720:	0e 94 b8 31 	call	0x6370	; 0x6370 <_ZN6StringC1EPKc>
     724:	be 01       	movw	r22, r28
     726:	69 5f       	subi	r22, 0xF9	; 249
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	ce 01       	movw	r24, r28
     72c:	01 96       	adiw	r24, 0x01	; 1
     72e:	0e 94 39 33 	call	0x6672	; 0x6672 <_ZplRK15StringSumHelperRK6String>
     732:	6b e9       	ldi	r22, 0x9B	; 155
     734:	71 e0       	ldi	r23, 0x01	; 1
     736:	0e 94 4a 33 	call	0x6694	; 0x6694 <_ZplRK15StringSumHelperPKc>
     73a:	bc 01       	movw	r22, r24
     73c:	84 e7       	ldi	r24, 0x74	; 116
     73e:	99 e0       	ldi	r25, 0x09	; 9
     740:	0e 94 e9 2e 	call	0x5dd2	; 0x5dd2 <_ZN5Print5printERK6String>
     744:	ce 01       	movw	r24, r28
     746:	01 96       	adiw	r24, 0x01	; 1
     748:	0e 94 51 31 	call	0x62a2	; 0x62a2 <_ZN6StringD1Ev>
     74c:	ce 01       	movw	r24, r28
     74e:	07 96       	adiw	r24, 0x07	; 7
     750:	0e 94 51 31 	call	0x62a2	; 0x62a2 <_ZN6StringD1Ev>
     754:	61 e0       	ldi	r22, 0x01	; 1
     756:	84 e7       	ldi	r24, 0x74	; 116
     758:	99 e0       	ldi	r25, 0x09	; 9
     75a:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <_ZN5Print5printEc>
     75e:	41 e0       	ldi	r20, 0x01	; 1
     760:	60 e0       	ldi	r22, 0x00	; 0
     762:	84 e7       	ldi	r24, 0x74	; 116
     764:	99 e0       	ldi	r25, 0x09	; 9
     766:	0e 94 6d 26 	call	0x4cda	; 0x4cda <_ZN3LCD9setCursorEhh>
     76a:	b8 01       	movw	r22, r16
     76c:	6a 5f       	subi	r22, 0xFA	; 250
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	84 e7       	ldi	r24, 0x74	; 116
     772:	99 e0       	ldi	r25, 0x09	; 9
     774:	0e 94 e9 2e 	call	0x5dd2	; 0x5dd2 <_ZN5Print5printERK6String>
     778:	42 e0       	ldi	r20, 0x02	; 2
     77a:	60 e0       	ldi	r22, 0x00	; 0
     77c:	84 e7       	ldi	r24, 0x74	; 116
     77e:	99 e0       	ldi	r25, 0x09	; 9
     780:	0e 94 6d 26 	call	0x4cda	; 0x4cda <_ZN3LCD9setCursorEhh>
     784:	b8 01       	movw	r22, r16
     786:	64 5f       	subi	r22, 0xF4	; 244
     788:	7f 4f       	sbci	r23, 0xFF	; 255
     78a:	84 e7       	ldi	r24, 0x74	; 116
     78c:	99 e0       	ldi	r25, 0x09	; 9
     78e:	0e 94 e9 2e 	call	0x5dd2	; 0x5dd2 <_ZN5Print5printERK6String>
     792:	43 e0       	ldi	r20, 0x03	; 3
     794:	60 e0       	ldi	r22, 0x00	; 0
     796:	84 e7       	ldi	r24, 0x74	; 116
     798:	99 e0       	ldi	r25, 0x09	; 9
     79a:	0e 94 6d 26 	call	0x4cda	; 0x4cda <_ZN3LCD9setCursorEhh>
     79e:	b8 01       	movw	r22, r16
     7a0:	6e 5e       	subi	r22, 0xEE	; 238
     7a2:	7f 4f       	sbci	r23, 0xFF	; 255
     7a4:	84 e7       	ldi	r24, 0x74	; 116
     7a6:	99 e0       	ldi	r25, 0x09	; 9
     7a8:	0e 94 e9 2e 	call	0x5dd2	; 0x5dd2 <_ZN5Print5printERK6String>
     7ac:	c7 01       	movw	r24, r14
     7ae:	23 de       	rcall	.-954    	; 0x3f6 <_Z11my_delay_msi>
     7b0:	2c 96       	adiw	r28, 0x0c	; 12
     7b2:	0f b6       	in	r0, 0x3f	; 63
     7b4:	f8 94       	cli
     7b6:	de bf       	out	0x3e, r29	; 62
     7b8:	0f be       	out	0x3f, r0	; 63
     7ba:	cd bf       	out	0x3d, r28	; 61
     7bc:	df 91       	pop	r29
     7be:	cf 91       	pop	r28
     7c0:	1f 91       	pop	r17
     7c2:	0f 91       	pop	r16
     7c4:	ff 90       	pop	r15
     7c6:	ef 90       	pop	r14
     7c8:	df 90       	pop	r13
     7ca:	cf 90       	pop	r12
     7cc:	08 95       	ret

000007ce <_Z11avanzaStatom>:
     7ce:	60 93 ad 08 	sts	0x08AD, r22	; 0x8008ad <Timer>
     7d2:	70 93 ae 08 	sts	0x08AE, r23	; 0x8008ae <Timer+0x1>
     7d6:	80 93 af 08 	sts	0x08AF, r24	; 0x8008af <Timer+0x2>
     7da:	90 93 b0 08 	sts	0x08B0, r25	; 0x8008b0 <Timer+0x3>
     7de:	87 ea       	ldi	r24, 0xA7	; 167
     7e0:	98 e0       	ldi	r25, 0x08	; 8
     7e2:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <_ZNK8DateTime11secondstimeEv>
     7e6:	60 93 b1 08 	sts	0x08B1, r22	; 0x8008b1 <UltimoPassaggioStato>
     7ea:	70 93 b2 08 	sts	0x08B2, r23	; 0x8008b2 <UltimoPassaggioStato+0x1>
     7ee:	80 93 b3 08 	sts	0x08B3, r24	; 0x8008b3 <UltimoPassaggioStato+0x2>
     7f2:	90 93 b4 08 	sts	0x08B4, r25	; 0x8008b4 <UltimoPassaggioStato+0x3>
     7f6:	80 91 4d 09 	lds	r24, 0x094D	; 0x80094d <stato_procedura>
     7fa:	90 91 4e 09 	lds	r25, 0x094E	; 0x80094e <stato_procedura+0x1>
     7fe:	01 96       	adiw	r24, 0x01	; 1
     800:	90 93 4e 09 	sts	0x094E, r25	; 0x80094e <stato_procedura+0x1>
     804:	80 93 4d 09 	sts	0x094D, r24	; 0x80094d <stato_procedura>
     808:	08 95       	ret

0000080a <_Z14leggiTAG_Mezzob>:
     80a:	af 92       	push	r10
     80c:	bf 92       	push	r11
     80e:	cf 92       	push	r12
     810:	df 92       	push	r13
     812:	ef 92       	push	r14
     814:	ff 92       	push	r15
     816:	0f 93       	push	r16
     818:	1f 93       	push	r17
     81a:	cf 93       	push	r28
     81c:	df 93       	push	r29
     81e:	cd b7       	in	r28, 0x3d	; 61
     820:	de b7       	in	r29, 0x3e	; 62
     822:	a2 97       	sbiw	r28, 0x22	; 34
     824:	0f b6       	in	r0, 0x3f	; 63
     826:	f8 94       	cli
     828:	de bf       	out	0x3e, r29	; 62
     82a:	0f be       	out	0x3f, r0	; 63
     82c:	cd bf       	out	0x3d, r28	; 61
     82e:	5c 01       	movw	r10, r24
     830:	f6 2e       	mov	r15, r22
     832:	64 e8       	ldi	r22, 0x84	; 132
     834:	71 e0       	ldi	r23, 0x01	; 1
     836:	ce 01       	movw	r24, r28
     838:	4d 96       	adiw	r24, 0x1d	; 29
     83a:	0e 94 b8 31 	call	0x6370	; 0x6370 <_ZN6StringC1EPKc>
     83e:	08 ec       	ldi	r16, 0xC8	; 200
     840:	10 e0       	ldi	r17, 0x00	; 0
     842:	24 e9       	ldi	r18, 0x94	; 148
     844:	39 e0       	ldi	r19, 0x09	; 9
     846:	4d e8       	ldi	r20, 0x8D	; 141
     848:	59 e0       	ldi	r21, 0x09	; 9
     84a:	60 e0       	ldi	r22, 0x00	; 0
     84c:	8d e5       	ldi	r24, 0x5D	; 93
     84e:	99 e0       	ldi	r25, 0x09	; 9
     850:	0e 94 6d 16 	call	0x2cda	; 0x2cda <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j>
     854:	80 93 95 09 	sts	0x0995, r24	; 0x800995 <success>
     858:	88 23       	and	r24, r24
     85a:	09 f4       	brne	.+2      	; 0x85e <_Z14leggiTAG_Mezzob+0x54>
     85c:	9d c0       	rjmp	.+314    	; 0x998 <_Z14leggiTAG_Mezzob+0x18e>
     85e:	4e e1       	ldi	r20, 0x1E	; 30
     860:	50 e0       	ldi	r21, 0x00	; 0
     862:	60 e0       	ldi	r22, 0x00	; 0
     864:	70 e0       	ldi	r23, 0x00	; 0
     866:	82 e0       	ldi	r24, 0x02	; 2
     868:	0e de       	rcall	.-996    	; 0x486 <_Z6Buzzerhm>
     86a:	80 91 94 09 	lds	r24, 0x0994	; 0x800994 <uidLength>
     86e:	84 30       	cpi	r24, 0x04	; 4
     870:	09 f0       	breq	.+2      	; 0x874 <_Z14leggiTAG_Mezzob+0x6a>
     872:	8c c0       	rjmp	.+280    	; 0x98c <_Z14leggiTAG_Mezzob+0x182>
     874:	86 e0       	ldi	r24, 0x06	; 6
     876:	e3 e7       	ldi	r30, 0x73	; 115
     878:	f1 e0       	ldi	r31, 0x01	; 1
     87a:	de 01       	movw	r26, r28
     87c:	57 96       	adiw	r26, 0x17	; 23
     87e:	01 90       	ld	r0, Z+
     880:	0d 92       	st	X+, r0
     882:	8a 95       	dec	r24
     884:	e1 f7       	brne	.-8      	; 0x87e <_Z14leggiTAG_Mezzob+0x74>
     886:	ce 01       	movw	r24, r28
     888:	47 96       	adiw	r24, 0x17	; 23
     88a:	6c 01       	movw	r12, r24
     88c:	e1 2c       	mov	r14, r1
     88e:	04 e0       	ldi	r16, 0x04	; 4
     890:	10 e0       	ldi	r17, 0x00	; 0
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	44 e0       	ldi	r20, 0x04	; 4
     898:	6d e8       	ldi	r22, 0x8D	; 141
     89a:	79 e0       	ldi	r23, 0x09	; 9
     89c:	8d e5       	ldi	r24, 0x5D	; 93
     89e:	99 e0       	ldi	r25, 0x09	; 9
     8a0:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_>
     8a4:	80 93 95 09 	sts	0x0995, r24	; 0x800995 <success>
     8a8:	88 23       	and	r24, r24
     8aa:	09 f4       	brne	.+2      	; 0x8ae <_Z14leggiTAG_Mezzob+0xa4>
     8ac:	5f c0       	rjmp	.+190    	; 0x96c <_Z14leggiTAG_Mezzob+0x162>
     8ae:	ff 20       	and	r15, r15
     8b0:	99 f0       	breq	.+38     	; 0x8d8 <_Z14leggiTAG_Mezzob+0xce>
     8b2:	80 e1       	ldi	r24, 0x10	; 16
     8b4:	ed ed       	ldi	r30, 0xDD	; 221
     8b6:	f7 e0       	ldi	r31, 0x07	; 7
     8b8:	de 01       	movw	r26, r28
     8ba:	11 96       	adiw	r26, 0x01	; 1
     8bc:	01 90       	ld	r0, Z+
     8be:	0d 92       	st	X+, r0
     8c0:	8a 95       	dec	r24
     8c2:	e1 f7       	brne	.-8      	; 0x8bc <_Z14leggiTAG_Mezzob+0xb2>
     8c4:	ae 01       	movw	r20, r28
     8c6:	4f 5f       	subi	r20, 0xFF	; 255
     8c8:	5f 4f       	sbci	r21, 0xFF	; 255
     8ca:	64 e0       	ldi	r22, 0x04	; 4
     8cc:	8d e5       	ldi	r24, 0x5D	; 93
     8ce:	99 e0       	ldi	r25, 0x09	; 9
     8d0:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh>
     8d4:	80 93 95 09 	sts	0x0995, r24	; 0x800995 <success>
     8d8:	ae 01       	movw	r20, r28
     8da:	4f 5f       	subi	r20, 0xFF	; 255
     8dc:	5f 4f       	sbci	r21, 0xFF	; 255
     8de:	64 e0       	ldi	r22, 0x04	; 4
     8e0:	8d e5       	ldi	r24, 0x5D	; 93
     8e2:	99 e0       	ldi	r25, 0x09	; 9
     8e4:	0e 94 21 17 	call	0x2e42	; 0x2e42 <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh>
     8e8:	80 93 95 09 	sts	0x0995, r24	; 0x800995 <success>
     8ec:	88 23       	and	r24, r24
     8ee:	89 f1       	breq	.+98     	; 0x952 <_Z14leggiTAG_Mezzob+0x148>
     8f0:	61 ea       	ldi	r22, 0xA1	; 161
     8f2:	71 e0       	ldi	r23, 0x01	; 1
     8f4:	8c ef       	ldi	r24, 0xFC	; 252
     8f6:	9a e0       	ldi	r25, 0x0A	; 10
     8f8:	0e 94 22 2f 	call	0x5e44	; 0x5e44 <_ZN5Print7printlnEPKc>
     8fc:	be 01       	movw	r22, r28
     8fe:	6f 5f       	subi	r22, 0xFF	; 255
     900:	7f 4f       	sbci	r23, 0xFF	; 255
     902:	ce 01       	movw	r24, r28
     904:	41 96       	adiw	r24, 0x11	; 17
     906:	0e 94 b8 31 	call	0x6370	; 0x6370 <_ZN6StringC1EPKc>
     90a:	be 01       	movw	r22, r28
     90c:	6f 5e       	subi	r22, 0xEF	; 239
     90e:	7f 4f       	sbci	r23, 0xFF	; 255
     910:	8c ef       	ldi	r24, 0xFC	; 252
     912:	9a e0       	ldi	r25, 0x0A	; 10
     914:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <_ZN5Print7printlnERK6String>
     918:	8d 89       	ldd	r24, Y+21	; 0x15
     91a:	9e 89       	ldd	r25, Y+22	; 0x16
     91c:	06 97       	sbiw	r24, 0x06	; 6
     91e:	59 f4       	brne	.+22     	; 0x936 <_Z14leggiTAG_Mezzob+0x12c>
     920:	be 01       	movw	r22, r28
     922:	6f 5e       	subi	r22, 0xEF	; 239
     924:	7f 4f       	sbci	r23, 0xFF	; 255
     926:	c5 01       	movw	r24, r10
     928:	0e 94 07 32 	call	0x640e	; 0x640e <_ZN6StringC1EOS_>
     92c:	ce 01       	movw	r24, r28
     92e:	41 96       	adiw	r24, 0x11	; 17
     930:	0e 94 51 31 	call	0x62a2	; 0x62a2 <_ZN6StringD1Ev>
     934:	37 c0       	rjmp	.+110    	; 0x9a4 <_Z14leggiTAG_Mezzob+0x19a>
     936:	9f ef       	ldi	r25, 0xFF	; 255
     938:	21 ee       	ldi	r18, 0xE1	; 225
     93a:	84 e0       	ldi	r24, 0x04	; 4
     93c:	91 50       	subi	r25, 0x01	; 1
     93e:	20 40       	sbci	r18, 0x00	; 0
     940:	80 40       	sbci	r24, 0x00	; 0
     942:	e1 f7       	brne	.-8      	; 0x93c <_Z14leggiTAG_Mezzob+0x132>
     944:	00 c0       	rjmp	.+0      	; 0x946 <_Z14leggiTAG_Mezzob+0x13c>
     946:	00 00       	nop
     948:	ce 01       	movw	r24, r28
     94a:	41 96       	adiw	r24, 0x11	; 17
     94c:	0e 94 51 31 	call	0x62a2	; 0x62a2 <_ZN6StringD1Ev>
     950:	1d c0       	rjmp	.+58     	; 0x98c <_Z14leggiTAG_Mezzob+0x182>
     952:	84 e7       	ldi	r24, 0x74	; 116
     954:	99 e0       	ldi	r25, 0x09	; 9
     956:	0e 94 67 26 	call	0x4cce	; 0x4cce <_ZN3LCD5clearEv>
     95a:	41 e0       	ldi	r20, 0x01	; 1
     95c:	60 e0       	ldi	r22, 0x00	; 0
     95e:	84 e7       	ldi	r24, 0x74	; 116
     960:	99 e0       	ldi	r25, 0x09	; 9
     962:	0e 94 6d 26 	call	0x4cda	; 0x4cda <_ZN3LCD9setCursorEhh>
     966:	6f ea       	ldi	r22, 0xAF	; 175
     968:	71 e0       	ldi	r23, 0x01	; 1
     96a:	0c c0       	rjmp	.+24     	; 0x984 <_Z14leggiTAG_Mezzob+0x17a>
     96c:	84 e7       	ldi	r24, 0x74	; 116
     96e:	99 e0       	ldi	r25, 0x09	; 9
     970:	0e 94 67 26 	call	0x4cce	; 0x4cce <_ZN3LCD5clearEv>
     974:	41 e0       	ldi	r20, 0x01	; 1
     976:	60 e0       	ldi	r22, 0x00	; 0
     978:	84 e7       	ldi	r24, 0x74	; 116
     97a:	99 e0       	ldi	r25, 0x09	; 9
     97c:	0e 94 6d 26 	call	0x4cda	; 0x4cda <_ZN3LCD9setCursorEhh>
     980:	69 eb       	ldi	r22, 0xB9	; 185
     982:	71 e0       	ldi	r23, 0x01	; 1
     984:	84 e7       	ldi	r24, 0x74	; 116
     986:	99 e0       	ldi	r25, 0x09	; 9
     988:	0e 94 f7 2e 	call	0x5dee	; 0x5dee <_ZN5Print5printEPKc>
     98c:	64 e8       	ldi	r22, 0x84	; 132
     98e:	71 e0       	ldi	r23, 0x01	; 1
     990:	8c ef       	ldi	r24, 0xFC	; 252
     992:	9a e0       	ldi	r25, 0x0A	; 10
     994:	0e 94 22 2f 	call	0x5e44	; 0x5e44 <_ZN5Print7printlnEPKc>
     998:	be 01       	movw	r22, r28
     99a:	63 5e       	subi	r22, 0xE3	; 227
     99c:	7f 4f       	sbci	r23, 0xFF	; 255
     99e:	c5 01       	movw	r24, r10
     9a0:	0e 94 07 32 	call	0x640e	; 0x640e <_ZN6StringC1EOS_>
     9a4:	ce 01       	movw	r24, r28
     9a6:	4d 96       	adiw	r24, 0x1d	; 29
     9a8:	0e 94 51 31 	call	0x62a2	; 0x62a2 <_ZN6StringD1Ev>
     9ac:	c5 01       	movw	r24, r10
     9ae:	a2 96       	adiw	r28, 0x22	; 34
     9b0:	0f b6       	in	r0, 0x3f	; 63
     9b2:	f8 94       	cli
     9b4:	de bf       	out	0x3e, r29	; 62
     9b6:	0f be       	out	0x3f, r0	; 63
     9b8:	cd bf       	out	0x3d, r28	; 61
     9ba:	df 91       	pop	r29
     9bc:	cf 91       	pop	r28
     9be:	1f 91       	pop	r17
     9c0:	0f 91       	pop	r16
     9c2:	ff 90       	pop	r15
     9c4:	ef 90       	pop	r14
     9c6:	df 90       	pop	r13
     9c8:	cf 90       	pop	r12
     9ca:	bf 90       	pop	r11
     9cc:	af 90       	pop	r10
     9ce:	08 95       	ret

000009d0 <_Z14GetCodeRfidATev>:
     9d0:	cf 92       	push	r12
     9d2:	df 92       	push	r13
     9d4:	ef 92       	push	r14
     9d6:	ff 92       	push	r15
     9d8:	0f 93       	push	r16
     9da:	1f 93       	push	r17
     9dc:	cf 93       	push	r28
     9de:	df 93       	push	r29
     9e0:	cd b7       	in	r28, 0x3d	; 61
     9e2:	de b7       	in	r29, 0x3e	; 62
     9e4:	64 97       	sbiw	r28, 0x14	; 20
     9e6:	0f b6       	in	r0, 0x3f	; 63
     9e8:	f8 94       	cli
     9ea:	de bf       	out	0x3e, r29	; 62
     9ec:	0f be       	out	0x3f, r0	; 63
     9ee:	cd bf       	out	0x3d, r28	; 61
     9f0:	7c 01       	movw	r14, r24
     9f2:	ce 01       	movw	r24, r28
     9f4:	01 96       	adiw	r24, 0x01	; 1
     9f6:	6c 01       	movw	r12, r24
     9f8:	87 e0       	ldi	r24, 0x07	; 7
     9fa:	f6 01       	movw	r30, r12
     9fc:	11 92       	st	Z+, r1
     9fe:	8a 95       	dec	r24
     a00:	e9 f7       	brne	.-6      	; 0x9fc <_Z14GetCodeRfidATev+0x2c>
     a02:	61 ec       	ldi	r22, 0xC1	; 193
     a04:	71 e0       	ldi	r23, 0x01	; 1
     a06:	c7 01       	movw	r24, r14
     a08:	0e 94 b8 31 	call	0x6370	; 0x6370 <_ZN6StringC1EPKc>
     a0c:	00 e0       	ldi	r16, 0x00	; 0
     a0e:	10 e0       	ldi	r17, 0x00	; 0
     a10:	9e 01       	movw	r18, r28
     a12:	2c 5e       	subi	r18, 0xEC	; 236
     a14:	3f 4f       	sbci	r19, 0xFF	; 255
     a16:	a6 01       	movw	r20, r12
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	8d e5       	ldi	r24, 0x5D	; 93
     a1c:	99 e0       	ldi	r25, 0x09	; 9
     a1e:	0e 94 6d 16 	call	0x2cda	; 0x2cda <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j>
     a22:	88 23       	and	r24, r24
     a24:	59 f1       	breq	.+86     	; 0xa7c <_Z14GetCodeRfidATev+0xac>
     a26:	0c 89       	ldd	r16, Y+20	; 0x14
     a28:	10 e0       	ldi	r17, 0x00	; 0
     a2a:	20 e0       	ldi	r18, 0x00	; 0
     a2c:	30 e0       	ldi	r19, 0x00	; 0
     a2e:	a6 01       	movw	r20, r12
     a30:	6d e5       	ldi	r22, 0x5D	; 93
     a32:	79 e0       	ldi	r23, 0x09	; 9
     a34:	ce 01       	movw	r24, r28
     a36:	0e 96       	adiw	r24, 0x0e	; 14
     a38:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <_ZN9NFC_PN53210GetHexCodeEPKhm>
     a3c:	ce 01       	movw	r24, r28
     a3e:	0e 96       	adiw	r24, 0x0e	; 14
     a40:	0e 94 ce 33 	call	0x679c	; 0x679c <_ZN6String4trimEv>
     a44:	28 e0       	ldi	r18, 0x08	; 8
     a46:	30 e0       	ldi	r19, 0x00	; 0
     a48:	40 e0       	ldi	r20, 0x00	; 0
     a4a:	50 e0       	ldi	r21, 0x00	; 0
     a4c:	be 01       	movw	r22, r28
     a4e:	62 5f       	subi	r22, 0xF2	; 242
     a50:	7f 4f       	sbci	r23, 0xFF	; 255
     a52:	ce 01       	movw	r24, r28
     a54:	08 96       	adiw	r24, 0x08	; 8
     a56:	0e 94 8b 33 	call	0x6716	; 0x6716 <_ZNK6String9substringEjj>
     a5a:	be 01       	movw	r22, r28
     a5c:	68 5f       	subi	r22, 0xF8	; 248
     a5e:	7f 4f       	sbci	r23, 0xFF	; 255
     a60:	c7 01       	movw	r24, r14
     a62:	0e 94 2c 32 	call	0x6458	; 0x6458 <_ZN6StringaSEOS_>
     a66:	ce 01       	movw	r24, r28
     a68:	08 96       	adiw	r24, 0x08	; 8
     a6a:	0e 94 51 31 	call	0x62a2	; 0x62a2 <_ZN6StringD1Ev>
     a6e:	81 e0       	ldi	r24, 0x01	; 1
     a70:	80 93 8c 09 	sts	0x098C, r24	; 0x80098c <alreadyTimbrata>
     a74:	ce 01       	movw	r24, r28
     a76:	0e 96       	adiw	r24, 0x0e	; 14
     a78:	0e 94 51 31 	call	0x62a2	; 0x62a2 <_ZN6StringD1Ev>
     a7c:	c7 01       	movw	r24, r14
     a7e:	64 96       	adiw	r28, 0x14	; 20
     a80:	0f b6       	in	r0, 0x3f	; 63
     a82:	f8 94       	cli
     a84:	de bf       	out	0x3e, r29	; 62
     a86:	0f be       	out	0x3f, r0	; 63
     a88:	cd bf       	out	0x3d, r28	; 61
     a8a:	df 91       	pop	r29
     a8c:	cf 91       	pop	r28
     a8e:	1f 91       	pop	r17
     a90:	0f 91       	pop	r16
     a92:	ff 90       	pop	r15
     a94:	ef 90       	pop	r14
     a96:	df 90       	pop	r13
     a98:	cf 90       	pop	r12
     a9a:	08 95       	ret

00000a9c <_Z19GetHTTPResponseCode6String>:
     a9c:	ef 92       	push	r14
     a9e:	ff 92       	push	r15
     aa0:	0f 93       	push	r16
     aa2:	1f 93       	push	r17
     aa4:	cf 93       	push	r28
     aa6:	df 93       	push	r29
     aa8:	cd b7       	in	r28, 0x3d	; 61
     aaa:	de b7       	in	r29, 0x3e	; 62
     aac:	2c 97       	sbiw	r28, 0x0c	; 12
     aae:	0f b6       	in	r0, 0x3f	; 63
     ab0:	f8 94       	cli
     ab2:	de bf       	out	0x3e, r29	; 62
     ab4:	0f be       	out	0x3f, r0	; 63
     ab6:	cd bf       	out	0x3d, r28	; 61
     ab8:	8c 01       	movw	r16, r24
     aba:	7b 01       	movw	r14, r22
     abc:	68 ec       	ldi	r22, 0xC8	; 200
     abe:	71 e0       	ldi	r23, 0x01	; 1
     ac0:	ce 01       	movw	r24, r28
     ac2:	07 96       	adiw	r24, 0x07	; 7
     ac4:	0e 94 b8 31 	call	0x6370	; 0x6370 <_ZN6StringC1EPKc>
     ac8:	a2 dc       	rcall	.-1724   	; 0x40e <_Z9printLinev>
     aca:	60 ed       	ldi	r22, 0xD0	; 208
     acc:	71 e0       	ldi	r23, 0x01	; 1
     ace:	8c ef       	ldi	r24, 0xFC	; 252
     ad0:	9a e0       	ldi	r25, 0x0A	; 10
     ad2:	0e 94 22 2f 	call	0x5e44	; 0x5e44 <_ZN5Print7printlnEPKc>
     ad6:	20 91 5b 01 	lds	r18, 0x015B	; 0x80015b <HTTP_len_response>
     ada:	30 91 5c 01 	lds	r19, 0x015C	; 0x80015c <HTTP_len_response+0x1>
     ade:	f7 01       	movw	r30, r14
     ae0:	84 81       	ldd	r24, Z+4	; 0x04
     ae2:	95 81       	ldd	r25, Z+5	; 0x05
     ae4:	28 17       	cp	r18, r24
     ae6:	39 07       	cpc	r19, r25
     ae8:	a9 f4       	brne	.+42     	; 0xb14 <_Z19GetHTTPResponseCode6String+0x78>
     aea:	a9 01       	movw	r20, r18
     aec:	43 50       	subi	r20, 0x03	; 3
     aee:	51 09       	sbc	r21, r1
     af0:	b7 01       	movw	r22, r14
     af2:	ce 01       	movw	r24, r28
     af4:	01 96       	adiw	r24, 0x01	; 1
     af6:	0e 94 8b 33 	call	0x6716	; 0x6716 <_ZNK6String9substringEjj>
     afa:	81 e0       	ldi	r24, 0x01	; 1
     afc:	ac dc       	rcall	.-1704   	; 0x456 <_Z4passb>
     afe:	be 01       	movw	r22, r28
     b00:	6f 5f       	subi	r22, 0xFF	; 255
     b02:	7f 4f       	sbci	r23, 0xFF	; 255
     b04:	c8 01       	movw	r24, r16
     b06:	0e 94 07 32 	call	0x640e	; 0x640e <_ZN6StringC1EOS_>
     b0a:	ce 01       	movw	r24, r28
     b0c:	01 96       	adiw	r24, 0x01	; 1
     b0e:	0e 94 51 31 	call	0x62a2	; 0x62a2 <_ZN6StringD1Ev>
     b12:	09 c0       	rjmp	.+18     	; 0xb26 <_Z19GetHTTPResponseCode6String+0x8a>
     b14:	80 e0       	ldi	r24, 0x00	; 0
     b16:	9f dc       	rcall	.-1730   	; 0x456 <_Z4passb>
     b18:	7a dc       	rcall	.-1804   	; 0x40e <_Z9printLinev>
     b1a:	be 01       	movw	r22, r28
     b1c:	69 5f       	subi	r22, 0xF9	; 249
     b1e:	7f 4f       	sbci	r23, 0xFF	; 255
     b20:	c8 01       	movw	r24, r16
     b22:	0e 94 07 32 	call	0x640e	; 0x640e <_ZN6StringC1EOS_>
     b26:	ce 01       	movw	r24, r28
     b28:	07 96       	adiw	r24, 0x07	; 7
     b2a:	0e 94 51 31 	call	0x62a2	; 0x62a2 <_ZN6StringD1Ev>
     b2e:	c8 01       	movw	r24, r16
     b30:	2c 96       	adiw	r28, 0x0c	; 12
     b32:	0f b6       	in	r0, 0x3f	; 63
     b34:	f8 94       	cli
     b36:	de bf       	out	0x3e, r29	; 62
     b38:	0f be       	out	0x3f, r0	; 63
     b3a:	cd bf       	out	0x3d, r28	; 61
     b3c:	df 91       	pop	r29
     b3e:	cf 91       	pop	r28
     b40:	1f 91       	pop	r17
     b42:	0f 91       	pop	r16
     b44:	ff 90       	pop	r15
     b46:	ef 90       	pop	r14
     b48:	08 95       	ret

00000b4a <_Z16GetAteValidationiPc14EthernetClient6String>:
     b4a:	af 92       	push	r10
     b4c:	bf 92       	push	r11
     b4e:	cf 92       	push	r12
     b50:	df 92       	push	r13
     b52:	ef 92       	push	r14
     b54:	ff 92       	push	r15
     b56:	0f 93       	push	r16
     b58:	1f 93       	push	r17
     b5a:	cf 93       	push	r28
     b5c:	df 93       	push	r29
     b5e:	cd b7       	in	r28, 0x3d	; 61
     b60:	de b7       	in	r29, 0x3e	; 62
     b62:	2c 97       	sbiw	r28, 0x0c	; 12
     b64:	0f b6       	in	r0, 0x3f	; 63
     b66:	f8 94       	cli
     b68:	de bf       	out	0x3e, r29	; 62
     b6a:	0f be       	out	0x3f, r0	; 63
     b6c:	cd bf       	out	0x3d, r28	; 61
     b6e:	5c 01       	movw	r10, r24
     b70:	6b 01       	movw	r12, r22
     b72:	8a 01       	movw	r16, r20
     b74:	79 01       	movw	r14, r18
     b76:	4b dc       	rcall	.-1898   	; 0x40e <_Z9printLinev>
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	5c dc       	rcall	.-1864   	; 0x434 <_Z8printTabh>
     b7c:	68 ee       	ldi	r22, 0xE8	; 232
     b7e:	71 e0       	ldi	r23, 0x01	; 1
     b80:	8c ef       	ldi	r24, 0xFC	; 252
     b82:	9a e0       	ldi	r25, 0x0A	; 10
     b84:	0e 94 f7 2e 	call	0x5dee	; 0x5dee <_ZN5Print5printEPKc>
     b88:	a5 01       	movw	r20, r10
     b8a:	b6 01       	movw	r22, r12
     b8c:	c8 01       	movw	r24, r16
     b8e:	0e 94 90 1e 	call	0x3d20	; 0x3d20 <_ZN14EthernetClient7connectEPKcj>
     b92:	89 2b       	or	r24, r25
     b94:	09 f4       	brne	.+2      	; 0xb98 <_Z16GetAteValidationiPc14EthernetClient6String+0x4e>
     b96:	77 c0       	rjmp	.+238    	; 0xc86 <_Z16GetAteValidationiPc14EthernetClient6String+0x13c>
     b98:	6e e0       	ldi	r22, 0x0E	; 14
     b9a:	72 e0       	ldi	r23, 0x02	; 2
     b9c:	ce 01       	movw	r24, r28
     b9e:	01 96       	adiw	r24, 0x01	; 1
     ba0:	0e 94 b8 31 	call	0x6370	; 0x6370 <_ZN6StringC1EPKc>
     ba4:	b7 01       	movw	r22, r14
     ba6:	ce 01       	movw	r24, r28
     ba8:	01 96       	adiw	r24, 0x01	; 1
     baa:	0e 94 39 33 	call	0x6672	; 0x6672 <_ZplRK15StringSumHelperRK6String>
     bae:	6f e3       	ldi	r22, 0x3F	; 63
     bb0:	72 e0       	ldi	r23, 0x02	; 2
     bb2:	0e 94 4a 33 	call	0x6694	; 0x6694 <_ZplRK15StringSumHelperPKc>
     bb6:	bc 01       	movw	r22, r24
     bb8:	81 e5       	ldi	r24, 0x51	; 81
     bba:	99 e0       	ldi	r25, 0x09	; 9
     bbc:	0e 94 0f 32 	call	0x641e	; 0x641e <_ZN6StringaSERKS_>
     bc0:	ce 01       	movw	r24, r28
     bc2:	01 96       	adiw	r24, 0x01	; 1
     bc4:	0e 94 51 31 	call	0x62a2	; 0x62a2 <_ZN6StringD1Ev>
     bc8:	6c e4       	ldi	r22, 0x4C	; 76
     bca:	72 e0       	ldi	r23, 0x02	; 2
     bcc:	81 e5       	ldi	r24, 0x51	; 81
     bce:	99 e0       	ldi	r25, 0x09	; 9
     bd0:	0e 94 19 33 	call	0x6632	; 0x6632 <_ZN6String6concatEPKc>
     bd4:	68 e6       	ldi	r22, 0x68	; 104
     bd6:	74 e0       	ldi	r23, 0x04	; 4
     bd8:	81 e5       	ldi	r24, 0x51	; 81
     bda:	99 e0       	ldi	r25, 0x09	; 9
     bdc:	0e 94 19 33 	call	0x6632	; 0x6632 <_ZN6String6concatEPKc>
     be0:	68 e6       	ldi	r22, 0x68	; 104
     be2:	72 e0       	ldi	r23, 0x02	; 2
     be4:	81 e5       	ldi	r24, 0x51	; 81
     be6:	99 e0       	ldi	r25, 0x09	; 9
     be8:	0e 94 19 33 	call	0x6632	; 0x6632 <_ZN6String6concatEPKc>
     bec:	68 e6       	ldi	r22, 0x68	; 104
     bee:	74 e0       	ldi	r23, 0x04	; 4
     bf0:	81 e5       	ldi	r24, 0x51	; 81
     bf2:	99 e0       	ldi	r25, 0x09	; 9
     bf4:	0e 94 19 33 	call	0x6632	; 0x6632 <_ZN6String6concatEPKc>
     bf8:	61 e8       	ldi	r22, 0x81	; 129
     bfa:	72 e0       	ldi	r23, 0x02	; 2
     bfc:	81 e5       	ldi	r24, 0x51	; 81
     bfe:	99 e0       	ldi	r25, 0x09	; 9
     c00:	0e 94 19 33 	call	0x6632	; 0x6632 <_ZN6String6concatEPKc>
     c04:	68 e6       	ldi	r22, 0x68	; 104
     c06:	74 e0       	ldi	r23, 0x04	; 4
     c08:	81 e5       	ldi	r24, 0x51	; 81
     c0a:	99 e0       	ldi	r25, 0x09	; 9
     c0c:	0e 94 19 33 	call	0x6632	; 0x6632 <_ZN6String6concatEPKc>
     c10:	60 ea       	ldi	r22, 0xA0	; 160
     c12:	72 e0       	ldi	r23, 0x02	; 2
     c14:	81 e5       	ldi	r24, 0x51	; 81
     c16:	99 e0       	ldi	r25, 0x09	; 9
     c18:	0e 94 19 33 	call	0x6632	; 0x6632 <_ZN6String6concatEPKc>
     c1c:	68 e6       	ldi	r22, 0x68	; 104
     c1e:	74 e0       	ldi	r23, 0x04	; 4
     c20:	81 e5       	ldi	r24, 0x51	; 81
     c22:	99 e0       	ldi	r25, 0x09	; 9
     c24:	0e 94 19 33 	call	0x6632	; 0x6632 <_ZN6String6concatEPKc>
     c28:	60 ec       	ldi	r22, 0xC0	; 192
     c2a:	72 e0       	ldi	r23, 0x02	; 2
     c2c:	81 e5       	ldi	r24, 0x51	; 81
     c2e:	99 e0       	ldi	r25, 0x09	; 9
     c30:	0e 94 19 33 	call	0x6632	; 0x6632 <_ZN6String6concatEPKc>
     c34:	68 e6       	ldi	r22, 0x68	; 104
     c36:	74 e0       	ldi	r23, 0x04	; 4
     c38:	81 e5       	ldi	r24, 0x51	; 81
     c3a:	99 e0       	ldi	r25, 0x09	; 9
     c3c:	0e 94 19 33 	call	0x6632	; 0x6632 <_ZN6String6concatEPKc>
     c40:	6a e6       	ldi	r22, 0x6A	; 106
     c42:	73 e0       	ldi	r23, 0x03	; 3
     c44:	81 e5       	ldi	r24, 0x51	; 81
     c46:	99 e0       	ldi	r25, 0x09	; 9
     c48:	0e 94 19 33 	call	0x6632	; 0x6632 <_ZN6String6concatEPKc>
     c4c:	68 e6       	ldi	r22, 0x68	; 104
     c4e:	74 e0       	ldi	r23, 0x04	; 4
     c50:	81 e5       	ldi	r24, 0x51	; 81
     c52:	99 e0       	ldi	r25, 0x09	; 9
     c54:	0e 94 19 33 	call	0x6632	; 0x6632 <_ZN6String6concatEPKc>
     c58:	61 e5       	ldi	r22, 0x51	; 81
     c5a:	79 e0       	ldi	r23, 0x09	; 9
     c5c:	c8 01       	movw	r24, r16
     c5e:	0e 94 e9 2e 	call	0x5dd2	; 0x5dd2 <_ZN5Print5printERK6String>
     c62:	2f ef       	ldi	r18, 0xFF	; 255
     c64:	87 ee       	ldi	r24, 0xE7	; 231
     c66:	93 e0       	ldi	r25, 0x03	; 3
     c68:	21 50       	subi	r18, 0x01	; 1
     c6a:	80 40       	sbci	r24, 0x00	; 0
     c6c:	90 40       	sbci	r25, 0x00	; 0
     c6e:	e1 f7       	brne	.-8      	; 0xc68 <_Z16GetAteValidationiPc14EthernetClient6String+0x11e>
     c70:	00 c0       	rjmp	.+0      	; 0xc72 <_Z16GetAteValidationiPc14EthernetClient6String+0x128>
     c72:	00 00       	nop
     c74:	69 e8       	ldi	r22, 0x89	; 137
     c76:	73 e0       	ldi	r23, 0x03	; 3
     c78:	c8 01       	movw	r24, r16
     c7a:	0e 94 22 2f 	call	0x5e44	; 0x5e44 <_ZN5Print7printlnEPKc>
     c7e:	c8 01       	movw	r24, r16
     c80:	0e 94 ff 2e 	call	0x5dfe	; 0x5dfe <_ZN5Print7printlnEv>
     c84:	25 c0       	rjmp	.+74     	; 0xcd0 <_Z16GetAteValidationiPc14EthernetClient6String+0x186>
     c86:	84 e7       	ldi	r24, 0x74	; 116
     c88:	99 e0       	ldi	r25, 0x09	; 9
     c8a:	0e 94 67 26 	call	0x4cce	; 0x4cce <_ZN3LCD5clearEv>
     c8e:	41 e0       	ldi	r20, 0x01	; 1
     c90:	60 e0       	ldi	r22, 0x00	; 0
     c92:	84 e7       	ldi	r24, 0x74	; 116
     c94:	99 e0       	ldi	r25, 0x09	; 9
     c96:	0e 94 6d 26 	call	0x4cda	; 0x4cda <_ZN3LCD9setCursorEhh>
     c9a:	6b e9       	ldi	r22, 0x9B	; 155
     c9c:	73 e0       	ldi	r23, 0x03	; 3
     c9e:	84 e7       	ldi	r24, 0x74	; 116
     ca0:	99 e0       	ldi	r25, 0x09	; 9
     ca2:	0e 94 f7 2e 	call	0x5dee	; 0x5dee <_ZN5Print5printEPKc>
     ca6:	43 e0       	ldi	r20, 0x03	; 3
     ca8:	60 e0       	ldi	r22, 0x00	; 0
     caa:	84 e7       	ldi	r24, 0x74	; 116
     cac:	99 e0       	ldi	r25, 0x09	; 9
     cae:	0e 94 6d 26 	call	0x4cda	; 0x4cda <_ZN3LCD9setCursorEhh>
     cb2:	60 eb       	ldi	r22, 0xB0	; 176
     cb4:	73 e0       	ldi	r23, 0x03	; 3
     cb6:	84 e7       	ldi	r24, 0x74	; 116
     cb8:	99 e0       	ldi	r25, 0x09	; 9
     cba:	0e 94 f7 2e 	call	0x5dee	; 0x5dee <_ZN5Print5printEPKc>
     cbe:	2f ef       	ldi	r18, 0xFF	; 255
     cc0:	83 ed       	ldi	r24, 0xD3	; 211
     cc2:	90 e3       	ldi	r25, 0x30	; 48
     cc4:	21 50       	subi	r18, 0x01	; 1
     cc6:	80 40       	sbci	r24, 0x00	; 0
     cc8:	90 40       	sbci	r25, 0x00	; 0
     cca:	e1 f7       	brne	.-8      	; 0xcc4 <_Z16GetAteValidationiPc14EthernetClient6String+0x17a>
     ccc:	00 c0       	rjmp	.+0      	; 0xcce <_Z16GetAteValidationiPc14EthernetClient6String+0x184>
     cce:	00 00       	nop
     cd0:	2f ef       	ldi	r18, 0xFF	; 255
     cd2:	81 ee       	ldi	r24, 0xE1	; 225
     cd4:	94 e0       	ldi	r25, 0x04	; 4
     cd6:	21 50       	subi	r18, 0x01	; 1
     cd8:	80 40       	sbci	r24, 0x00	; 0
     cda:	90 40       	sbci	r25, 0x00	; 0
     cdc:	e1 f7       	brne	.-8      	; 0xcd6 <_Z16GetAteValidationiPc14EthernetClient6String+0x18c>
     cde:	00 c0       	rjmp	.+0      	; 0xce0 <_Z16GetAteValidationiPc14EthernetClient6String+0x196>
     ce0:	00 00       	nop
     ce2:	f1 2c       	mov	r15, r1
     ce4:	c8 01       	movw	r24, r16
     ce6:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <_ZN14EthernetClient9availableEv>
     cea:	89 2b       	or	r24, r25
     cec:	09 f4       	brne	.+2      	; 0xcf0 <_Z16GetAteValidationiPc14EthernetClient6String+0x1a6>
     cee:	56 c0       	rjmp	.+172    	; 0xd9c <_Z16GetAteValidationiPc14EthernetClient6String+0x252>
     cf0:	c8 01       	movw	r24, r16
     cf2:	0e 94 11 1f 	call	0x3e22	; 0x3e22 <_ZN14EthernetClient4readEv>
     cf6:	e8 2e       	mov	r14, r24
     cf8:	65 e4       	ldi	r22, 0x45	; 69
     cfa:	79 e0       	ldi	r23, 0x09	; 9
     cfc:	ce 01       	movw	r24, r28
     cfe:	01 96       	adiw	r24, 0x01	; 1
     d00:	0e 94 24 32 	call	0x6448	; 0x6448 <_ZN6StringC1ERKS_>
     d04:	6e 2d       	mov	r22, r14
     d06:	ce 01       	movw	r24, r28
     d08:	01 96       	adiw	r24, 0x01	; 1
     d0a:	0e 94 61 33 	call	0x66c2	; 0x66c2 <_ZplRK15StringSumHelperc>
     d0e:	bc 01       	movw	r22, r24
     d10:	85 e4       	ldi	r24, 0x45	; 69
     d12:	99 e0       	ldi	r25, 0x09	; 9
     d14:	0e 94 0f 32 	call	0x641e	; 0x641e <_ZN6StringaSERKS_>
     d18:	ce 01       	movw	r24, r28
     d1a:	01 96       	adiw	r24, 0x01	; 1
     d1c:	0e 94 51 31 	call	0x62a2	; 0x62a2 <_ZN6StringD1Ev>
     d20:	20 91 5b 01 	lds	r18, 0x015B	; 0x80015b <HTTP_len_response>
     d24:	30 91 5c 01 	lds	r19, 0x015C	; 0x80015c <HTTP_len_response+0x1>
     d28:	80 91 49 09 	lds	r24, 0x0949	; 0x800949 <RispostaHTTP+0x4>
     d2c:	90 91 4a 09 	lds	r25, 0x094A	; 0x80094a <RispostaHTTP+0x5>
     d30:	28 17       	cp	r18, r24
     d32:	39 07       	cpc	r19, r25
     d34:	b9 f6       	brne	.-82     	; 0xce4 <_Z16GetAteValidationiPc14EthernetClient6String+0x19a>
     d36:	65 e4       	ldi	r22, 0x45	; 69
     d38:	79 e0       	ldi	r23, 0x09	; 9
     d3a:	ce 01       	movw	r24, r28
     d3c:	01 96       	adiw	r24, 0x01	; 1
     d3e:	0e 94 24 32 	call	0x6448	; 0x6448 <_ZN6StringC1ERKS_>
     d42:	be 01       	movw	r22, r28
     d44:	6f 5f       	subi	r22, 0xFF	; 255
     d46:	7f 4f       	sbci	r23, 0xFF	; 255
     d48:	ce 01       	movw	r24, r28
     d4a:	07 96       	adiw	r24, 0x07	; 7
     d4c:	a7 de       	rcall	.-690    	; 0xa9c <_Z19GetHTTPResponseCode6String>
     d4e:	ce 01       	movw	r24, r28
     d50:	01 96       	adiw	r24, 0x01	; 1
     d52:	0e 94 51 31 	call	0x62a2	; 0x62a2 <_ZN6StringD1Ev>
     d56:	2f ef       	ldi	r18, 0xFF	; 255
     d58:	87 ee       	ldi	r24, 0xE7	; 231
     d5a:	93 e0       	ldi	r25, 0x03	; 3
     d5c:	21 50       	subi	r18, 0x01	; 1
     d5e:	80 40       	sbci	r24, 0x00	; 0
     d60:	90 40       	sbci	r25, 0x00	; 0
     d62:	e1 f7       	brne	.-8      	; 0xd5c <_Z16GetAteValidationiPc14EthernetClient6String+0x212>
     d64:	00 c0       	rjmp	.+0      	; 0xd66 <_Z16GetAteValidationiPc14EthernetClient6String+0x21c>
     d66:	00 00       	nop
     d68:	6f eb       	ldi	r22, 0xBF	; 191
     d6a:	73 e0       	ldi	r23, 0x03	; 3
     d6c:	ce 01       	movw	r24, r28
     d6e:	07 96       	adiw	r24, 0x07	; 7
     d70:	0e 94 6d 33 	call	0x66da	; 0x66da <_ZNK6String6equalsEPKc>
     d74:	88 23       	and	r24, r24
     d76:	21 f0       	breq	.+8      	; 0xd80 <_Z16GetAteValidationiPc14EthernetClient6String+0x236>
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	6d db       	rcall	.-2342   	; 0x456 <_Z4passb>
     d7c:	ff 24       	eor	r15, r15
     d7e:	f3 94       	inc	r15
     d80:	2f ef       	ldi	r18, 0xFF	; 255
     d82:	87 ee       	ldi	r24, 0xE7	; 231
     d84:	93 e0       	ldi	r25, 0x03	; 3
     d86:	21 50       	subi	r18, 0x01	; 1
     d88:	80 40       	sbci	r24, 0x00	; 0
     d8a:	90 40       	sbci	r25, 0x00	; 0
     d8c:	e1 f7       	brne	.-8      	; 0xd86 <_Z16GetAteValidationiPc14EthernetClient6String+0x23c>
     d8e:	00 c0       	rjmp	.+0      	; 0xd90 <_Z16GetAteValidationiPc14EthernetClient6String+0x246>
     d90:	00 00       	nop
     d92:	ce 01       	movw	r24, r28
     d94:	07 96       	adiw	r24, 0x07	; 7
     d96:	0e 94 51 31 	call	0x62a2	; 0x62a2 <_ZN6StringD1Ev>
     d9a:	a4 cf       	rjmp	.-184    	; 0xce4 <_Z16GetAteValidationiPc14EthernetClient6String+0x19a>
     d9c:	38 db       	rcall	.-2448   	; 0x40e <_Z9printLinev>
     d9e:	8f 2d       	mov	r24, r15
     da0:	2c 96       	adiw	r28, 0x0c	; 12
     da2:	0f b6       	in	r0, 0x3f	; 63
     da4:	f8 94       	cli
     da6:	de bf       	out	0x3e, r29	; 62
     da8:	0f be       	out	0x3f, r0	; 63
     daa:	cd bf       	out	0x3d, r28	; 61
     dac:	df 91       	pop	r29
     dae:	cf 91       	pop	r28
     db0:	1f 91       	pop	r17
     db2:	0f 91       	pop	r16
     db4:	ff 90       	pop	r15
     db6:	ef 90       	pop	r14
     db8:	df 90       	pop	r13
     dba:	cf 90       	pop	r12
     dbc:	bf 90       	pop	r11
     dbe:	af 90       	pop	r10
     dc0:	08 95       	ret

00000dc2 <_Z14PostErogazioneiPc14EthernetClient6String>:
     dc2:	af 92       	push	r10
     dc4:	bf 92       	push	r11
     dc6:	cf 92       	push	r12
     dc8:	df 92       	push	r13
     dca:	ef 92       	push	r14
     dcc:	ff 92       	push	r15
     dce:	0f 93       	push	r16
     dd0:	1f 93       	push	r17
     dd2:	cf 93       	push	r28
     dd4:	df 93       	push	r29
     dd6:	cd b7       	in	r28, 0x3d	; 61
     dd8:	de b7       	in	r29, 0x3e	; 62
     dda:	2c 97       	sbiw	r28, 0x0c	; 12
     ddc:	0f b6       	in	r0, 0x3f	; 63
     dde:	f8 94       	cli
     de0:	de bf       	out	0x3e, r29	; 62
     de2:	0f be       	out	0x3f, r0	; 63
     de4:	cd bf       	out	0x3d, r28	; 61
     de6:	5c 01       	movw	r10, r24
     de8:	6b 01       	movw	r12, r22
     dea:	8a 01       	movw	r16, r20
     dec:	79 01       	movw	r14, r18
     dee:	0f db       	rcall	.-2530   	; 0x40e <_Z9printLinev>
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	20 db       	rcall	.-2496   	; 0x434 <_Z8printTabh>
     df4:	63 ec       	ldi	r22, 0xC3	; 195
     df6:	73 e0       	ldi	r23, 0x03	; 3
     df8:	8c ef       	ldi	r24, 0xFC	; 252
     dfa:	9a e0       	ldi	r25, 0x0A	; 10
     dfc:	0e 94 f7 2e 	call	0x5dee	; 0x5dee <_ZN5Print5printEPKc>
     e00:	a5 01       	movw	r20, r10
     e02:	b6 01       	movw	r22, r12
     e04:	c8 01       	movw	r24, r16
     e06:	0e 94 90 1e 	call	0x3d20	; 0x3d20 <_ZN14EthernetClient7connectEPKcj>
     e0a:	89 2b       	or	r24, r25
     e0c:	09 f4       	brne	.+2      	; 0xe10 <_Z14PostErogazioneiPc14EthernetClient6String+0x4e>
     e0e:	92 c0       	rjmp	.+292    	; 0xf34 <_Z14PostErogazioneiPc14EthernetClient6String+0x172>
     e10:	2f ef       	ldi	r18, 0xFF	; 255
     e12:	81 ee       	ldi	r24, 0xE1	; 225
     e14:	94 e0       	ldi	r25, 0x04	; 4
     e16:	21 50       	subi	r18, 0x01	; 1
     e18:	80 40       	sbci	r24, 0x00	; 0
     e1a:	90 40       	sbci	r25, 0x00	; 0
     e1c:	e1 f7       	brne	.-8      	; 0xe16 <_Z14PostErogazioneiPc14EthernetClient6String+0x54>
     e1e:	00 c0       	rjmp	.+0      	; 0xe20 <_Z14PostErogazioneiPc14EthernetClient6String+0x5e>
     e20:	00 00       	nop
     e22:	62 ef       	ldi	r22, 0xF2	; 242
     e24:	73 e0       	ldi	r23, 0x03	; 3
     e26:	81 e5       	ldi	r24, 0x51	; 81
     e28:	99 e0       	ldi	r25, 0x09	; 9
     e2a:	0e 94 37 32 	call	0x646e	; 0x646e <_ZN6StringaSEPKc>
     e2e:	63 e1       	ldi	r22, 0x13	; 19
     e30:	74 e0       	ldi	r23, 0x04	; 4
     e32:	81 e5       	ldi	r24, 0x51	; 81
     e34:	99 e0       	ldi	r25, 0x09	; 9
     e36:	0e 94 19 33 	call	0x6632	; 0x6632 <_ZN6String6concatEPKc>
     e3a:	68 e6       	ldi	r22, 0x68	; 104
     e3c:	74 e0       	ldi	r23, 0x04	; 4
     e3e:	81 e5       	ldi	r24, 0x51	; 81
     e40:	99 e0       	ldi	r25, 0x09	; 9
     e42:	0e 94 19 33 	call	0x6632	; 0x6632 <_ZN6String6concatEPKc>
     e46:	60 ec       	ldi	r22, 0xC0	; 192
     e48:	72 e0       	ldi	r23, 0x02	; 2
     e4a:	81 e5       	ldi	r24, 0x51	; 81
     e4c:	99 e0       	ldi	r25, 0x09	; 9
     e4e:	0e 94 19 33 	call	0x6632	; 0x6632 <_ZN6String6concatEPKc>
     e52:	68 e6       	ldi	r22, 0x68	; 104
     e54:	74 e0       	ldi	r23, 0x04	; 4
     e56:	81 e5       	ldi	r24, 0x51	; 81
     e58:	99 e0       	ldi	r25, 0x09	; 9
     e5a:	0e 94 19 33 	call	0x6632	; 0x6632 <_ZN6String6concatEPKc>
     e5e:	6a e6       	ldi	r22, 0x6A	; 106
     e60:	73 e0       	ldi	r23, 0x03	; 3
     e62:	81 e5       	ldi	r24, 0x51	; 81
     e64:	99 e0       	ldi	r25, 0x09	; 9
     e66:	0e 94 19 33 	call	0x6632	; 0x6632 <_ZN6String6concatEPKc>
     e6a:	68 e6       	ldi	r22, 0x68	; 104
     e6c:	74 e0       	ldi	r23, 0x04	; 4
     e6e:	81 e5       	ldi	r24, 0x51	; 81
     e70:	99 e0       	ldi	r25, 0x09	; 9
     e72:	0e 94 19 33 	call	0x6632	; 0x6632 <_ZN6String6concatEPKc>
     e76:	65 e3       	ldi	r22, 0x35	; 53
     e78:	74 e0       	ldi	r23, 0x04	; 4
     e7a:	81 e5       	ldi	r24, 0x51	; 81
     e7c:	99 e0       	ldi	r25, 0x09	; 9
     e7e:	0e 94 19 33 	call	0x6632	; 0x6632 <_ZN6String6concatEPKc>
     e82:	68 e6       	ldi	r22, 0x68	; 104
     e84:	74 e0       	ldi	r23, 0x04	; 4
     e86:	81 e5       	ldi	r24, 0x51	; 81
     e88:	99 e0       	ldi	r25, 0x09	; 9
     e8a:	0e 94 19 33 	call	0x6632	; 0x6632 <_ZN6String6concatEPKc>
     e8e:	61 e4       	ldi	r22, 0x41	; 65
     e90:	74 e0       	ldi	r23, 0x04	; 4
     e92:	81 e5       	ldi	r24, 0x51	; 81
     e94:	99 e0       	ldi	r25, 0x09	; 9
     e96:	0e 94 19 33 	call	0x6632	; 0x6632 <_ZN6String6concatEPKc>
     e9a:	68 e6       	ldi	r22, 0x68	; 104
     e9c:	74 e0       	ldi	r23, 0x04	; 4
     e9e:	81 e5       	ldi	r24, 0x51	; 81
     ea0:	99 e0       	ldi	r25, 0x09	; 9
     ea2:	0e 94 19 33 	call	0x6632	; 0x6632 <_ZN6String6concatEPKc>
     ea6:	68 e6       	ldi	r22, 0x68	; 104
     ea8:	74 e0       	ldi	r23, 0x04	; 4
     eaa:	81 e5       	ldi	r24, 0x51	; 81
     eac:	99 e0       	ldi	r25, 0x09	; 9
     eae:	0e 94 19 33 	call	0x6632	; 0x6632 <_ZN6String6concatEPKc>
     eb2:	64 e5       	ldi	r22, 0x54	; 84
     eb4:	74 e0       	ldi	r23, 0x04	; 4
     eb6:	81 e5       	ldi	r24, 0x51	; 81
     eb8:	99 e0       	ldi	r25, 0x09	; 9
     eba:	0e 94 19 33 	call	0x6632	; 0x6632 <_ZN6String6concatEPKc>
     ebe:	68 e5       	ldi	r22, 0x58	; 88
     ec0:	74 e0       	ldi	r23, 0x04	; 4
     ec2:	ce 01       	movw	r24, r28
     ec4:	01 96       	adiw	r24, 0x01	; 1
     ec6:	0e 94 b8 31 	call	0x6370	; 0x6370 <_ZN6StringC1EPKc>
     eca:	b7 01       	movw	r22, r14
     ecc:	ce 01       	movw	r24, r28
     ece:	01 96       	adiw	r24, 0x01	; 1
     ed0:	0e 94 39 33 	call	0x6672	; 0x6672 <_ZplRK15StringSumHelperRK6String>
     ed4:	67 e6       	ldi	r22, 0x67	; 103
     ed6:	74 e0       	ldi	r23, 0x04	; 4
     ed8:	0e 94 4a 33 	call	0x6694	; 0x6694 <_ZplRK15StringSumHelperPKc>
     edc:	bc 01       	movw	r22, r24
     ede:	81 e5       	ldi	r24, 0x51	; 81
     ee0:	99 e0       	ldi	r25, 0x09	; 9
     ee2:	0e 94 13 33 	call	0x6626	; 0x6626 <_ZN6String6concatERKS_>
     ee6:	ce 01       	movw	r24, r28
     ee8:	01 96       	adiw	r24, 0x01	; 1
     eea:	0e 94 51 31 	call	0x62a2	; 0x62a2 <_ZN6StringD1Ev>
     eee:	6b e6       	ldi	r22, 0x6B	; 107
     ef0:	74 e0       	ldi	r23, 0x04	; 4
     ef2:	81 e5       	ldi	r24, 0x51	; 81
     ef4:	99 e0       	ldi	r25, 0x09	; 9
     ef6:	0e 94 19 33 	call	0x6632	; 0x6632 <_ZN6String6concatEPKc>
     efa:	61 e5       	ldi	r22, 0x51	; 81
     efc:	79 e0       	ldi	r23, 0x09	; 9
     efe:	8c ef       	ldi	r24, 0xFC	; 252
     f00:	9a e0       	ldi	r25, 0x0A	; 10
     f02:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <_ZN5Print7printlnERK6String>
     f06:	61 e5       	ldi	r22, 0x51	; 81
     f08:	79 e0       	ldi	r23, 0x09	; 9
     f0a:	c8 01       	movw	r24, r16
     f0c:	0e 94 e9 2e 	call	0x5dd2	; 0x5dd2 <_ZN5Print5printERK6String>
     f10:	2f ef       	ldi	r18, 0xFF	; 255
     f12:	87 ee       	ldi	r24, 0xE7	; 231
     f14:	93 e0       	ldi	r25, 0x03	; 3
     f16:	21 50       	subi	r18, 0x01	; 1
     f18:	80 40       	sbci	r24, 0x00	; 0
     f1a:	90 40       	sbci	r25, 0x00	; 0
     f1c:	e1 f7       	brne	.-8      	; 0xf16 <_Z14PostErogazioneiPc14EthernetClient6String+0x154>
     f1e:	00 c0       	rjmp	.+0      	; 0xf20 <_Z14PostErogazioneiPc14EthernetClient6String+0x15e>
     f20:	00 00       	nop
     f22:	69 e8       	ldi	r22, 0x89	; 137
     f24:	73 e0       	ldi	r23, 0x03	; 3
     f26:	c8 01       	movw	r24, r16
     f28:	0e 94 22 2f 	call	0x5e44	; 0x5e44 <_ZN5Print7printlnEPKc>
     f2c:	c8 01       	movw	r24, r16
     f2e:	0e 94 ff 2e 	call	0x5dfe	; 0x5dfe <_ZN5Print7printlnEv>
     f32:	25 c0       	rjmp	.+74     	; 0xf7e <_Z14PostErogazioneiPc14EthernetClient6String+0x1bc>
     f34:	84 e7       	ldi	r24, 0x74	; 116
     f36:	99 e0       	ldi	r25, 0x09	; 9
     f38:	0e 94 67 26 	call	0x4cce	; 0x4cce <_ZN3LCD5clearEv>
     f3c:	41 e0       	ldi	r20, 0x01	; 1
     f3e:	60 e0       	ldi	r22, 0x00	; 0
     f40:	84 e7       	ldi	r24, 0x74	; 116
     f42:	99 e0       	ldi	r25, 0x09	; 9
     f44:	0e 94 6d 26 	call	0x4cda	; 0x4cda <_ZN3LCD9setCursorEhh>
     f48:	6b e9       	ldi	r22, 0x9B	; 155
     f4a:	73 e0       	ldi	r23, 0x03	; 3
     f4c:	84 e7       	ldi	r24, 0x74	; 116
     f4e:	99 e0       	ldi	r25, 0x09	; 9
     f50:	0e 94 f7 2e 	call	0x5dee	; 0x5dee <_ZN5Print5printEPKc>
     f54:	43 e0       	ldi	r20, 0x03	; 3
     f56:	60 e0       	ldi	r22, 0x00	; 0
     f58:	84 e7       	ldi	r24, 0x74	; 116
     f5a:	99 e0       	ldi	r25, 0x09	; 9
     f5c:	0e 94 6d 26 	call	0x4cda	; 0x4cda <_ZN3LCD9setCursorEhh>
     f60:	60 eb       	ldi	r22, 0xB0	; 176
     f62:	73 e0       	ldi	r23, 0x03	; 3
     f64:	84 e7       	ldi	r24, 0x74	; 116
     f66:	99 e0       	ldi	r25, 0x09	; 9
     f68:	0e 94 f7 2e 	call	0x5dee	; 0x5dee <_ZN5Print5printEPKc>
     f6c:	2f ef       	ldi	r18, 0xFF	; 255
     f6e:	83 ed       	ldi	r24, 0xD3	; 211
     f70:	90 e3       	ldi	r25, 0x30	; 48
     f72:	21 50       	subi	r18, 0x01	; 1
     f74:	80 40       	sbci	r24, 0x00	; 0
     f76:	90 40       	sbci	r25, 0x00	; 0
     f78:	e1 f7       	brne	.-8      	; 0xf72 <_Z14PostErogazioneiPc14EthernetClient6String+0x1b0>
     f7a:	00 c0       	rjmp	.+0      	; 0xf7c <_Z14PostErogazioneiPc14EthernetClient6String+0x1ba>
     f7c:	00 00       	nop
     f7e:	2f ef       	ldi	r18, 0xFF	; 255
     f80:	81 ee       	ldi	r24, 0xE1	; 225
     f82:	94 e0       	ldi	r25, 0x04	; 4
     f84:	21 50       	subi	r18, 0x01	; 1
     f86:	80 40       	sbci	r24, 0x00	; 0
     f88:	90 40       	sbci	r25, 0x00	; 0
     f8a:	e1 f7       	brne	.-8      	; 0xf84 <_Z14PostErogazioneiPc14EthernetClient6String+0x1c2>
     f8c:	00 c0       	rjmp	.+0      	; 0xf8e <_Z14PostErogazioneiPc14EthernetClient6String+0x1cc>
     f8e:	00 00       	nop
     f90:	f1 2c       	mov	r15, r1
     f92:	c8 01       	movw	r24, r16
     f94:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <_ZN14EthernetClient9availableEv>
     f98:	89 2b       	or	r24, r25
     f9a:	09 f4       	brne	.+2      	; 0xf9e <_Z14PostErogazioneiPc14EthernetClient6String+0x1dc>
     f9c:	56 c0       	rjmp	.+172    	; 0x104a <_Z14PostErogazioneiPc14EthernetClient6String+0x288>
     f9e:	c8 01       	movw	r24, r16
     fa0:	0e 94 11 1f 	call	0x3e22	; 0x3e22 <_ZN14EthernetClient4readEv>
     fa4:	e8 2e       	mov	r14, r24
     fa6:	65 e4       	ldi	r22, 0x45	; 69
     fa8:	79 e0       	ldi	r23, 0x09	; 9
     faa:	ce 01       	movw	r24, r28
     fac:	01 96       	adiw	r24, 0x01	; 1
     fae:	0e 94 24 32 	call	0x6448	; 0x6448 <_ZN6StringC1ERKS_>
     fb2:	6e 2d       	mov	r22, r14
     fb4:	ce 01       	movw	r24, r28
     fb6:	01 96       	adiw	r24, 0x01	; 1
     fb8:	0e 94 61 33 	call	0x66c2	; 0x66c2 <_ZplRK15StringSumHelperc>
     fbc:	bc 01       	movw	r22, r24
     fbe:	85 e4       	ldi	r24, 0x45	; 69
     fc0:	99 e0       	ldi	r25, 0x09	; 9
     fc2:	0e 94 0f 32 	call	0x641e	; 0x641e <_ZN6StringaSERKS_>
     fc6:	ce 01       	movw	r24, r28
     fc8:	01 96       	adiw	r24, 0x01	; 1
     fca:	0e 94 51 31 	call	0x62a2	; 0x62a2 <_ZN6StringD1Ev>
     fce:	20 91 5b 01 	lds	r18, 0x015B	; 0x80015b <HTTP_len_response>
     fd2:	30 91 5c 01 	lds	r19, 0x015C	; 0x80015c <HTTP_len_response+0x1>
     fd6:	80 91 49 09 	lds	r24, 0x0949	; 0x800949 <RispostaHTTP+0x4>
     fda:	90 91 4a 09 	lds	r25, 0x094A	; 0x80094a <RispostaHTTP+0x5>
     fde:	28 17       	cp	r18, r24
     fe0:	39 07       	cpc	r19, r25
     fe2:	b9 f6       	brne	.-82     	; 0xf92 <_Z14PostErogazioneiPc14EthernetClient6String+0x1d0>
     fe4:	65 e4       	ldi	r22, 0x45	; 69
     fe6:	79 e0       	ldi	r23, 0x09	; 9
     fe8:	ce 01       	movw	r24, r28
     fea:	01 96       	adiw	r24, 0x01	; 1
     fec:	0e 94 24 32 	call	0x6448	; 0x6448 <_ZN6StringC1ERKS_>
     ff0:	be 01       	movw	r22, r28
     ff2:	6f 5f       	subi	r22, 0xFF	; 255
     ff4:	7f 4f       	sbci	r23, 0xFF	; 255
     ff6:	ce 01       	movw	r24, r28
     ff8:	07 96       	adiw	r24, 0x07	; 7
     ffa:	50 dd       	rcall	.-1376   	; 0xa9c <_Z19GetHTTPResponseCode6String>
     ffc:	ce 01       	movw	r24, r28
     ffe:	01 96       	adiw	r24, 0x01	; 1
    1000:	0e 94 51 31 	call	0x62a2	; 0x62a2 <_ZN6StringD1Ev>
    1004:	2f ef       	ldi	r18, 0xFF	; 255
    1006:	87 ee       	ldi	r24, 0xE7	; 231
    1008:	93 e0       	ldi	r25, 0x03	; 3
    100a:	21 50       	subi	r18, 0x01	; 1
    100c:	80 40       	sbci	r24, 0x00	; 0
    100e:	90 40       	sbci	r25, 0x00	; 0
    1010:	e1 f7       	brne	.-8      	; 0x100a <_Z14PostErogazioneiPc14EthernetClient6String+0x248>
    1012:	00 c0       	rjmp	.+0      	; 0x1014 <_Z14PostErogazioneiPc14EthernetClient6String+0x252>
    1014:	00 00       	nop
    1016:	6f eb       	ldi	r22, 0xBF	; 191
    1018:	73 e0       	ldi	r23, 0x03	; 3
    101a:	ce 01       	movw	r24, r28
    101c:	07 96       	adiw	r24, 0x07	; 7
    101e:	0e 94 6d 33 	call	0x66da	; 0x66da <_ZNK6String6equalsEPKc>
    1022:	88 23       	and	r24, r24
    1024:	21 f0       	breq	.+8      	; 0x102e <_Z14PostErogazioneiPc14EthernetClient6String+0x26c>
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	16 da       	rcall	.-3028   	; 0x456 <_Z4passb>
    102a:	ff 24       	eor	r15, r15
    102c:	f3 94       	inc	r15
    102e:	2f ef       	ldi	r18, 0xFF	; 255
    1030:	87 ee       	ldi	r24, 0xE7	; 231
    1032:	93 e0       	ldi	r25, 0x03	; 3
    1034:	21 50       	subi	r18, 0x01	; 1
    1036:	80 40       	sbci	r24, 0x00	; 0
    1038:	90 40       	sbci	r25, 0x00	; 0
    103a:	e1 f7       	brne	.-8      	; 0x1034 <_Z14PostErogazioneiPc14EthernetClient6String+0x272>
    103c:	00 c0       	rjmp	.+0      	; 0x103e <_Z14PostErogazioneiPc14EthernetClient6String+0x27c>
    103e:	00 00       	nop
    1040:	ce 01       	movw	r24, r28
    1042:	07 96       	adiw	r24, 0x07	; 7
    1044:	0e 94 51 31 	call	0x62a2	; 0x62a2 <_ZN6StringD1Ev>
    1048:	a4 cf       	rjmp	.-184    	; 0xf92 <_Z14PostErogazioneiPc14EthernetClient6String+0x1d0>
    104a:	e1 d9       	rcall	.-3134   	; 0x40e <_Z9printLinev>
    104c:	2f ef       	ldi	r18, 0xFF	; 255
    104e:	80 e7       	ldi	r24, 0x70	; 112
    1050:	92 e0       	ldi	r25, 0x02	; 2
    1052:	21 50       	subi	r18, 0x01	; 1
    1054:	80 40       	sbci	r24, 0x00	; 0
    1056:	90 40       	sbci	r25, 0x00	; 0
    1058:	e1 f7       	brne	.-8      	; 0x1052 <_Z14PostErogazioneiPc14EthernetClient6String+0x290>
    105a:	00 c0       	rjmp	.+0      	; 0x105c <_Z14PostErogazioneiPc14EthernetClient6String+0x29a>
    105c:	00 00       	nop
    105e:	8f 2d       	mov	r24, r15
    1060:	2c 96       	adiw	r28, 0x0c	; 12
    1062:	0f b6       	in	r0, 0x3f	; 63
    1064:	f8 94       	cli
    1066:	de bf       	out	0x3e, r29	; 62
    1068:	0f be       	out	0x3f, r0	; 63
    106a:	cd bf       	out	0x3d, r28	; 61
    106c:	df 91       	pop	r29
    106e:	cf 91       	pop	r28
    1070:	1f 91       	pop	r17
    1072:	0f 91       	pop	r16
    1074:	ff 90       	pop	r15
    1076:	ef 90       	pop	r14
    1078:	df 90       	pop	r13
    107a:	cf 90       	pop	r12
    107c:	bf 90       	pop	r11
    107e:	af 90       	pop	r10
    1080:	08 95       	ret

00001082 <_Z15abilitaPulsantiv>:
    1082:	57 98       	cbi	0x0a, 7	; 10
    1084:	56 98       	cbi	0x0a, 6	; 10
    1086:	88 e0       	ldi	r24, 0x08	; 8
    1088:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    108c:	80 ec       	ldi	r24, 0xC0	; 192
    108e:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    1092:	78 94       	sei
    1094:	08 95       	ret

00001096 <_Z22abilitaContattiPistolav>:
    1096:	09 98       	cbi	0x01, 1	; 1
    1098:	0a 98       	cbi	0x01, 2	; 1
    109a:	08 95       	ret

0000109c <_Z13abilitaPulserc>:
    109c:	91 e0       	ldi	r25, 0x01	; 1
    109e:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    10a2:	84 34       	cpi	r24, 0x44	; 68
    10a4:	19 f4       	brne	.+6      	; 0x10ac <_Z13abilitaPulserc+0x10>
    10a6:	0d 98       	cbi	0x01, 5	; 1
    10a8:	80 e2       	ldi	r24, 0x20	; 32
    10aa:	02 c0       	rjmp	.+4      	; 0x10b0 <_Z13abilitaPulserc+0x14>
    10ac:	0e 98       	cbi	0x01, 6	; 1
    10ae:	80 e4       	ldi	r24, 0x40	; 64
    10b0:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
    10b4:	78 94       	sei
    10b6:	08 95       	ret

000010b8 <_Z14impulsiToLitrii>:
    _delay_ms(4);
  }
}

double impulsiToLitri(int P_impulsi)
{
    10b8:	cf 92       	push	r12
    10ba:	df 92       	push	r13
    10bc:	ef 92       	push	r14
    10be:	ff 92       	push	r15
  //double imp = (double)(P_impulsi-1);
  double imp = (double)(P_impulsi);
    10c0:	bc 01       	movw	r22, r24
    10c2:	99 0f       	add	r25, r25
    10c4:	88 0b       	sbc	r24, r24
    10c6:	99 0b       	sbc	r25, r25
    10c8:	0e 94 dc 2c 	call	0x59b8	; 0x59b8 <__floatsisf>
    10cc:	6b 01       	movw	r12, r22
    10ce:	7c 01       	movw	r14, r24
  if (imp < 0) {imp = 0;}
    10d0:	20 e0       	ldi	r18, 0x00	; 0
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	a9 01       	movw	r20, r18
    10d6:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <__cmpsf2>
    10da:	87 ff       	sbrs	r24, 7
    10dc:	03 c0       	rjmp	.+6      	; 0x10e4 <_Z14impulsiToLitrii+0x2c>
    10de:	c1 2c       	mov	r12, r1
    10e0:	d1 2c       	mov	r13, r1
    10e2:	76 01       	movw	r14, r12
  double lt = (imp / ImpulsiLitro);
  double totale = lt;
  return totale;
    10e4:	60 91 59 01 	lds	r22, 0x0159	; 0x800159 <ImpulsiLitro>
    10e8:	70 91 5a 01 	lds	r23, 0x015A	; 0x80015a <ImpulsiLitro+0x1>
    10ec:	07 2e       	mov	r0, r23
    10ee:	00 0c       	add	r0, r0
    10f0:	88 0b       	sbc	r24, r24
    10f2:	99 0b       	sbc	r25, r25
    10f4:	0e 94 dc 2c 	call	0x59b8	; 0x59b8 <__floatsisf>
    10f8:	9b 01       	movw	r18, r22
    10fa:	ac 01       	movw	r20, r24
    10fc:	c7 01       	movw	r24, r14
    10fe:	b6 01       	movw	r22, r12
    1100:	0e 94 72 2c 	call	0x58e4	; 0x58e4 <__divsf3>
}
    1104:	ff 90       	pop	r15
    1106:	ef 90       	pop	r14
    1108:	df 90       	pop	r13
    110a:	cf 90       	pop	r12
    110c:	08 95       	ret

0000110e <_Z18Rele_Abilitazione1ii>:

void Rele_Abilitazione1(int p_azione,int p_bit) {
  
  DDRC |= (1 << PC7);  // Rele1 
    110e:	3f 9a       	sbi	0x07, 7	; 7
  
  switch (p_azione) {
    1110:	81 30       	cpi	r24, 0x01	; 1
    1112:	91 05       	cpc	r25, r1
    1114:	71 f0       	breq	.+28     	; 0x1132 <_Z18Rele_Abilitazione1ii+0x24>
    1116:	82 30       	cpi	r24, 0x02	; 2
    1118:	91 05       	cpc	r25, r1
    111a:	e1 f0       	breq	.+56     	; 0x1154 <_Z18Rele_Abilitazione1ii+0x46>
    111c:	89 2b       	or	r24, r25
    111e:	89 f5       	brne	.+98     	; 0x1182 <_Z18Rele_Abilitazione1ii+0x74>
    case 0: // chiudi relè
    {     
      CLEAR_BIT(PORTC,PC7); // Rele1*/
    1120:	47 98       	cbi	0x08, 7	; 8
    1122:	2f ef       	ldi	r18, 0xFF	; 255
    1124:	30 e7       	ldi	r19, 0x70	; 112
    1126:	42 e0       	ldi	r20, 0x02	; 2
    1128:	21 50       	subi	r18, 0x01	; 1
    112a:	30 40       	sbci	r19, 0x00	; 0
    112c:	40 40       	sbci	r20, 0x00	; 0
    112e:	e1 f7       	brne	.-8      	; 0x1128 <_Z18Rele_Abilitazione1ii+0x1a>
    1130:	0e c0       	rjmp	.+28     	; 0x114e <_Z18Rele_Abilitazione1ii+0x40>
      _delay_ms(50);
    }
    break;
    case 1: // apri relè
    {
      SET_BIT(PORTC,p_bit); // Rele1
    1132:	28 b1       	in	r18, 0x08	; 8
    1134:	01 c0       	rjmp	.+2      	; 0x1138 <_Z18Rele_Abilitazione1ii+0x2a>
    1136:	88 0f       	add	r24, r24
    1138:	6a 95       	dec	r22
    113a:	ea f7       	brpl	.-6      	; 0x1136 <_Z18Rele_Abilitazione1ii+0x28>
    113c:	82 2b       	or	r24, r18
    113e:	88 b9       	out	0x08, r24	; 8
    1140:	8f ef       	ldi	r24, 0xFF	; 255
    1142:	90 e7       	ldi	r25, 0x70	; 112
    1144:	22 e0       	ldi	r18, 0x02	; 2
    1146:	81 50       	subi	r24, 0x01	; 1
    1148:	90 40       	sbci	r25, 0x00	; 0
    114a:	20 40       	sbci	r18, 0x00	; 0
    114c:	e1 f7       	brne	.-8      	; 0x1146 <_Z18Rele_Abilitazione1ii+0x38>
    114e:	00 c0       	rjmp	.+0      	; 0x1150 <_Z18Rele_Abilitazione1ii+0x42>
    1150:	00 00       	nop
    1152:	08 95       	ret
      _delay_ms(50);      
    }
    break;
    case 2: // chiudi e apri relè
    {
      CLEAR_BIT(PORTC,p_bit); // Rele1
    1154:	28 b1       	in	r18, 0x08	; 8
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	01 c0       	rjmp	.+2      	; 0x115e <_Z18Rele_Abilitazione1ii+0x50>
    115c:	88 0f       	add	r24, r24
    115e:	6a 95       	dec	r22
    1160:	ea f7       	brpl	.-6      	; 0x115c <_Z18Rele_Abilitazione1ii+0x4e>
    1162:	98 2f       	mov	r25, r24
    1164:	90 95       	com	r25
    1166:	92 23       	and	r25, r18
    1168:	98 b9       	out	0x08, r25	; 8
    116a:	3f ef       	ldi	r19, 0xFF	; 255
    116c:	45 ea       	ldi	r20, 0xA5	; 165
    116e:	2e e0       	ldi	r18, 0x0E	; 14
    1170:	31 50       	subi	r19, 0x01	; 1
    1172:	40 40       	sbci	r20, 0x00	; 0
    1174:	20 40       	sbci	r18, 0x00	; 0
    1176:	e1 f7       	brne	.-8      	; 0x1170 <_Z18Rele_Abilitazione1ii+0x62>
    1178:	00 c0       	rjmp	.+0      	; 0x117a <_Z18Rele_Abilitazione1ii+0x6c>
    117a:	00 00       	nop
      _delay_ms(300);
      SET_BIT(PORTC,p_bit); // Rele1
    117c:	98 b1       	in	r25, 0x08	; 8
    117e:	89 2b       	or	r24, r25
    1180:	88 b9       	out	0x08, r24	; 8
    1182:	08 95       	ret

00001184 <_Z18Rele_Abilitazione2ii>:
  }
}

void Rele_Abilitazione2(int p_azione,int p_bit) {
  
  DDRA |= (1 << PA7);  // Rele2
    1184:	0f 9a       	sbi	0x01, 7	; 1
  
  switch (p_azione) {
    1186:	81 30       	cpi	r24, 0x01	; 1
    1188:	91 05       	cpc	r25, r1
    118a:	b9 f0       	breq	.+46     	; 0x11ba <_Z18Rele_Abilitazione2ii+0x36>
    118c:	82 30       	cpi	r24, 0x02	; 2
    118e:	91 05       	cpc	r25, r1
    1190:	29 f1       	breq	.+74     	; 0x11dc <_Z18Rele_Abilitazione2ii+0x58>
    1192:	89 2b       	or	r24, r25
    1194:	d1 f5       	brne	.+116    	; 0x120a <_Z18Rele_Abilitazione2ii+0x86>
    case 0:
    {
      CLEAR_BIT(PORTA,p_bit); // Rele2
    1196:	22 b1       	in	r18, 0x02	; 2
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	01 c0       	rjmp	.+2      	; 0x11a0 <_Z18Rele_Abilitazione2ii+0x1c>
    119e:	88 0f       	add	r24, r24
    11a0:	6a 95       	dec	r22
    11a2:	ea f7       	brpl	.-6      	; 0x119e <_Z18Rele_Abilitazione2ii+0x1a>
    11a4:	80 95       	com	r24
    11a6:	82 23       	and	r24, r18
    11a8:	82 b9       	out	0x02, r24	; 2
    11aa:	2f ef       	ldi	r18, 0xFF	; 255
    11ac:	30 e7       	ldi	r19, 0x70	; 112
    11ae:	42 e0       	ldi	r20, 0x02	; 2
    11b0:	21 50       	subi	r18, 0x01	; 1
    11b2:	30 40       	sbci	r19, 0x00	; 0
    11b4:	40 40       	sbci	r20, 0x00	; 0
    11b6:	e1 f7       	brne	.-8      	; 0x11b0 <_Z18Rele_Abilitazione2ii+0x2c>
    11b8:	0e c0       	rjmp	.+28     	; 0x11d6 <_Z18Rele_Abilitazione2ii+0x52>
      _delay_ms(50);
    }
    break;
    case 1:
    {
      SET_BIT(PORTA,p_bit); // Rele2
    11ba:	22 b1       	in	r18, 0x02	; 2
    11bc:	01 c0       	rjmp	.+2      	; 0x11c0 <_Z18Rele_Abilitazione2ii+0x3c>
    11be:	88 0f       	add	r24, r24
    11c0:	6a 95       	dec	r22
    11c2:	ea f7       	brpl	.-6      	; 0x11be <_Z18Rele_Abilitazione2ii+0x3a>
    11c4:	82 2b       	or	r24, r18
    11c6:	82 b9       	out	0x02, r24	; 2
    11c8:	8f ef       	ldi	r24, 0xFF	; 255
    11ca:	90 e7       	ldi	r25, 0x70	; 112
    11cc:	22 e0       	ldi	r18, 0x02	; 2
    11ce:	81 50       	subi	r24, 0x01	; 1
    11d0:	90 40       	sbci	r25, 0x00	; 0
    11d2:	20 40       	sbci	r18, 0x00	; 0
    11d4:	e1 f7       	brne	.-8      	; 0x11ce <_Z18Rele_Abilitazione2ii+0x4a>
    11d6:	00 c0       	rjmp	.+0      	; 0x11d8 <_Z18Rele_Abilitazione2ii+0x54>
    11d8:	00 00       	nop
    11da:	08 95       	ret
      _delay_ms(50);
    }
    break;
    case 2:
    {
      CLEAR_BIT(PORTA,p_bit); // Rele2
    11dc:	22 b1       	in	r18, 0x02	; 2
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	01 c0       	rjmp	.+2      	; 0x11e6 <_Z18Rele_Abilitazione2ii+0x62>
    11e4:	88 0f       	add	r24, r24
    11e6:	6a 95       	dec	r22
    11e8:	ea f7       	brpl	.-6      	; 0x11e4 <_Z18Rele_Abilitazione2ii+0x60>
    11ea:	98 2f       	mov	r25, r24
    11ec:	90 95       	com	r25
    11ee:	92 23       	and	r25, r18
    11f0:	92 b9       	out	0x02, r25	; 2
    11f2:	3f ef       	ldi	r19, 0xFF	; 255
    11f4:	45 ea       	ldi	r20, 0xA5	; 165
    11f6:	2e e0       	ldi	r18, 0x0E	; 14
    11f8:	31 50       	subi	r19, 0x01	; 1
    11fa:	40 40       	sbci	r20, 0x00	; 0
    11fc:	20 40       	sbci	r18, 0x00	; 0
    11fe:	e1 f7       	brne	.-8      	; 0x11f8 <_Z18Rele_Abilitazione2ii+0x74>
    1200:	00 c0       	rjmp	.+0      	; 0x1202 <_Z18Rele_Abilitazione2ii+0x7e>
    1202:	00 00       	nop
      _delay_ms(300);
      SET_BIT(PORTA,p_bit); // Rele2      
    1204:	92 b1       	in	r25, 0x02	; 2
    1206:	89 2b       	or	r24, r25
    1208:	82 b9       	out	0x02, r24	; 2
    120a:	08 95       	ret

0000120c <_Z12Control_WIFIi>:
    break;
  }
}

void Control_WIFI(int azione) {
   DDRB |= (1 << PB3);  // set DDRB bit 3,  sets PB3 for output
    120c:	23 9a       	sbi	0x04, 3	; 4
    120e:	2f ef       	ldi	r18, 0xFF	; 255
    1210:	36 e7       	ldi	r19, 0x76	; 118
    1212:	41 e0       	ldi	r20, 0x01	; 1
    1214:	21 50       	subi	r18, 0x01	; 1
    1216:	30 40       	sbci	r19, 0x00	; 0
    1218:	40 40       	sbci	r20, 0x00	; 0
    121a:	e1 f7       	brne	.-8      	; 0x1214 <_Z12Control_WIFIi+0x8>
    121c:	00 c0       	rjmp	.+0      	; 0x121e <_Z12Control_WIFIi+0x12>
    121e:	00 00       	nop
   _delay_ms(30);
   if (azione == 1) {SET_BIT(PORTB,3);} else if (azione == 0) { CLEAR_BIT(PORTB,3); }
    1220:	81 30       	cpi	r24, 0x01	; 1
    1222:	91 05       	cpc	r25, r1
    1224:	11 f4       	brne	.+4      	; 0x122a <_Z12Control_WIFIi+0x1e>
    1226:	2b 9a       	sbi	0x05, 3	; 5
    1228:	08 95       	ret
    122a:	89 2b       	or	r24, r25
    122c:	09 f4       	brne	.+2      	; 0x1230 <_Z12Control_WIFIi+0x24>
    122e:	2b 98       	cbi	0x05, 3	; 5
    1230:	08 95       	ret

00001232 <_Z6Azzerav>:
}

void Azzera()
{
   RispostaHTTP = "";
    1232:	64 e8       	ldi	r22, 0x84	; 132
    1234:	71 e0       	ldi	r23, 0x01	; 1
    1236:	85 e4       	ldi	r24, 0x45	; 69
    1238:	99 e0       	ldi	r25, 0x09	; 9
    123a:	0e 94 37 32 	call	0x646e	; 0x646e <_ZN6StringaSEPKc>
   impulsi = 0;
    123e:	10 92 4c 09 	sts	0x094C, r1	; 0x80094c <impulsi+0x1>
    1242:	10 92 4b 09 	sts	0x094B, r1	; 0x80094b <impulsi>
   alreadyTimbrata = false;
    1246:	10 92 8c 09 	sts	0x098C, r1	; 0x80098c <alreadyTimbrata>
   
   Carburante = "X";
    124a:	66 ee       	ldi	r22, 0xE6	; 230
    124c:	74 e0       	ldi	r23, 0x04	; 4
    124e:	8b e1       	ldi	r24, 0x1B	; 27
    1250:	99 e0       	ldi	r25, 0x09	; 9
    1252:	0e 94 37 32 	call	0x646e	; 0x646e <_ZN6StringaSEPKc>
   
   Rele_Abilitazione1(1,7);
    1256:	67 e0       	ldi	r22, 0x07	; 7
    1258:	70 e0       	ldi	r23, 0x00	; 0
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	57 df       	rcall	.-338    	; 0x110e <_Z18Rele_Abilitazione1ii>
   Rele_Abilitazione2(1,7);
    1260:	67 e0       	ldi	r22, 0x07	; 7
    1262:	70 e0       	ldi	r23, 0x00	; 0
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	8d df       	rcall	.-230    	; 0x1184 <_Z18Rele_Abilitazione2ii>
   Control_WIFI(0);
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	ce df       	rcall	.-100    	; 0x120c <_Z12Control_WIFIi>
    1270:	8f e1       	ldi	r24, 0x1F	; 31
    1272:	9e e4       	ldi	r25, 0x4E	; 78
    1274:	01 97       	sbiw	r24, 0x01	; 1
    1276:	f1 f7       	brne	.-4      	; 0x1274 <_Z6Azzerav+0x42>
    1278:	00 c0       	rjmp	.+0      	; 0x127a <_Z6Azzerav+0x48>
    127a:	00 00       	nop
   
   //clientToServizio.flush();
   //clientToServizio.stop();
   
   _delay_ms(5);
   clientATE.flush();
    127c:	85 ec       	ldi	r24, 0xC5	; 197
    127e:	98 e0       	ldi	r25, 0x08	; 8
    1280:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <_ZN14EthernetClient5flushEv>
   clientATE.stop();
    1284:	85 ec       	ldi	r24, 0xC5	; 197
    1286:	98 e0       	ldi	r25, 0x08	; 8
    1288:	0e 94 94 1f 	call	0x3f28	; 0x3f28 <_ZN14EthernetClient4stopEv>
    128c:	8f e1       	ldi	r24, 0x1F	; 31
    128e:	9e e4       	ldi	r25, 0x4E	; 78
    1290:	01 97       	sbiw	r24, 0x01	; 1
    1292:	f1 f7       	brne	.-4      	; 0x1290 <_Z6Azzerav+0x5e>
    1294:	00 c0       	rjmp	.+0      	; 0x1296 <_Z6Azzerav+0x64>
    1296:	00 00       	nop
   _delay_ms(5);
   clientLOCAL.flush();
    1298:	82 ed       	ldi	r24, 0xD2	; 210
    129a:	98 e0       	ldi	r25, 0x08	; 8
    129c:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <_ZN14EthernetClient5flushEv>
   clientLOCAL.stop();
    12a0:	82 ed       	ldi	r24, 0xD2	; 210
    12a2:	98 e0       	ldi	r25, 0x08	; 8
    12a4:	0e 94 94 1f 	call	0x3f28	; 0x3f28 <_ZN14EthernetClient4stopEv>
   Connected = false;
    12a8:	10 92 50 09 	sts	0x0950, r1	; 0x800950 <Connected+0x1>
    12ac:	10 92 4f 09 	sts	0x094F, r1	; 0x80094f <Connected>
    12b0:	8f e1       	ldi	r24, 0x1F	; 31
    12b2:	9e e4       	ldi	r25, 0x4E	; 78
    12b4:	01 97       	sbiw	r24, 0x01	; 1
    12b6:	f1 f7       	brne	.-4      	; 0x12b4 <_Z6Azzerav+0x82>
    12b8:	00 c0       	rjmp	.+0      	; 0x12ba <_Z6Azzerav+0x88>
    12ba:	00 00       	nop
static const uint8_t RELE2 = PORTA7;
/*********************************************************************************************/
static inline void initSS_FLASH()  { DDRB |= (1 << PB4); } // set DDRB bit 4, sets PB4 for output
static inline void initSS_ETH()    { DDRC |= (1 << PC4); } // set DDRC bit 4, sets PC4 for output
static inline void enable_ETH()    { PORTC &= ~(1 << PC4); } // Set 0 Bit 4 PORTC Register
static inline void enable_FLASH()  { PORTB &= ~(1 << PB4); } // Set 0 Bit 4 PORTB Register
    12bc:	2c 98       	cbi	0x05, 4	; 5
    12be:	8f e1       	ldi	r24, 0x1F	; 31
    12c0:	9e e4       	ldi	r25, 0x4E	; 78
    12c2:	01 97       	sbiw	r24, 0x01	; 1
    12c4:	f1 f7       	brne	.-4      	; 0x12c2 <_Z6Azzerav+0x90>
    12c6:	00 c0       	rjmp	.+0      	; 0x12c8 <_Z6Azzerav+0x96>
    12c8:	00 00       	nop
static inline void disable_ETH()   { PORTC |= (1 << PC4);  } // Set 1 Bit 4 PORTC Register
static inline void disable_FLASH() { PORTB |= (1 << PB4);  } // Set 1 Bit 4 PORTB Register
    12ca:	2c 9a       	sbi	0x05, 4	; 5
    12cc:	8f e1       	ldi	r24, 0x1F	; 31
    12ce:	9e e4       	ldi	r25, 0x4E	; 78
    12d0:	01 97       	sbiw	r24, 0x01	; 1
    12d2:	f1 f7       	brne	.-4      	; 0x12d0 <_Z6Azzerav+0x9e>
    12d4:	00 c0       	rjmp	.+0      	; 0x12d6 <_Z6Azzerav+0xa4>
   _delay_ms(5);
   enable_FLASH();
   _delay_ms(5);
   disable_FLASH();
   _delay_ms(5);
   disable_ETH();
    12d6:	00 00       	nop
    12d8:	25 d8       	rcall	.-4022   	; 0x324 <_ZL11disable_ETHv>
    12da:	8f e1       	ldi	r24, 0x1F	; 31
    12dc:	9e e4       	ldi	r25, 0x4E	; 78
    12de:	01 97       	sbiw	r24, 0x01	; 1
    12e0:	f1 f7       	brne	.-4      	; 0x12de <_Z6Azzerav+0xac>
    12e2:	00 c0       	rjmp	.+0      	; 0x12e4 <_Z6Azzerav+0xb2>
    12e4:	00 00       	nop
static const uint8_t RELE1 = PORTC7;
static const uint8_t RELE2 = PORTA7;
/*********************************************************************************************/
static inline void initSS_FLASH()  { DDRB |= (1 << PB4); } // set DDRB bit 4, sets PB4 for output
static inline void initSS_ETH()    { DDRC |= (1 << PC4); } // set DDRC bit 4, sets PC4 for output
static inline void enable_ETH()    { PORTC &= ~(1 << PC4); } // Set 0 Bit 4 PORTC Register
    12e6:	44 98       	cbi	0x08, 4	; 8
   _delay_ms(5);
   disable_ETH();
   _delay_ms(5); 
   enable_ETH(); 
     
   SET_BIT(PORTA,A1);
    12e8:	82 b1       	in	r24, 0x02	; 2
    12ea:	82 b9       	out	0x02, r24	; 2
   SET_BIT(PORTA,A2);
    12ec:	82 b1       	in	r24, 0x02	; 2
    12ee:	82 b9       	out	0x02, r24	; 2
   
   righeDisplay[1] =  "";
    12f0:	64 e8       	ldi	r22, 0x84	; 132
    12f2:	71 e0       	ldi	r23, 0x01	; 1
    12f4:	8d ef       	ldi	r24, 0xFD	; 253
    12f6:	98 e0       	ldi	r25, 0x08	; 8
    12f8:	0e 94 37 32 	call	0x646e	; 0x646e <_ZN6StringaSEPKc>
   righeDisplay[2] =  "";
    12fc:	64 e8       	ldi	r22, 0x84	; 132
    12fe:	71 e0       	ldi	r23, 0x01	; 1
    1300:	83 e0       	ldi	r24, 0x03	; 3
    1302:	99 e0       	ldi	r25, 0x09	; 9
    1304:	0e 94 37 32 	call	0x646e	; 0x646e <_ZN6StringaSEPKc>
   righeDisplay[2] =  "";
    1308:	64 e8       	ldi	r22, 0x84	; 132
    130a:	71 e0       	ldi	r23, 0x01	; 1
    130c:	83 e0       	ldi	r24, 0x03	; 3
    130e:	99 e0       	ldi	r25, 0x09	; 9
    1310:	0e 94 37 32 	call	0x646e	; 0x646e <_ZN6StringaSEPKc>
   
   lcd.noBacklight();
    1314:	84 e7       	ldi	r24, 0x74	; 116
    1316:	99 e0       	ldi	r25, 0x09	; 9
    1318:	0e 94 57 26 	call	0x4cae	; 0x4cae <_ZN3LCD11noBacklightEv>
   lcd.noDisplay();
    131c:	84 e7       	ldi	r24, 0x74	; 116
    131e:	99 e0       	ldi	r25, 0x09	; 9
    1320:	0e 94 af 26 	call	0x4d5e	; 0x4d5e <_ZN3LCD9noDisplayEv>
   secs = 0;
    1324:	10 92 b5 08 	sts	0x08B5, r1	; 0x8008b5 <secs>
    1328:	10 92 b6 08 	sts	0x08B6, r1	; 0x8008b6 <secs+0x1>
    132c:	10 92 b7 08 	sts	0x08B7, r1	; 0x8008b7 <secs+0x2>
    1330:	10 92 b8 08 	sts	0x08B8, r1	; 0x8008b8 <secs+0x3>
   UltimoPassaggioStato = 0;
    1334:	10 92 b1 08 	sts	0x08B1, r1	; 0x8008b1 <UltimoPassaggioStato>
    1338:	10 92 b2 08 	sts	0x08B2, r1	; 0x8008b2 <UltimoPassaggioStato+0x1>
    133c:	10 92 b3 08 	sts	0x08B3, r1	; 0x8008b3 <UltimoPassaggioStato+0x2>
    1340:	10 92 b4 08 	sts	0x08B4, r1	; 0x8008b4 <UltimoPassaggioStato+0x3>
   
   printLine();
    1344:	64 d8       	rcall	.-3896   	; 0x40e <_Z9printLinev>
   Serial.println("Azzera....... OK");
    1346:	68 ee       	ldi	r22, 0xE8	; 232
    1348:	74 e0       	ldi	r23, 0x04	; 4
    134a:	8c ef       	ldi	r24, 0xFC	; 252
    134c:	9a e0       	ldi	r25, 0x0A	; 10
    134e:	0e 94 22 2f 	call	0x5e44	; 0x5e44 <_ZN5Print7printlnEPKc>
   printLine();
    1352:	5d d8       	rcall	.-3910   	; 0x40e <_Z9printLinev>
   TARGA = "";
    1354:	64 e8       	ldi	r22, 0x84	; 132
    1356:	71 e0       	ldi	r23, 0x01	; 1
    1358:	81 ea       	ldi	r24, 0xA1	; 161
    135a:	98 e0       	ldi	r25, 0x08	; 8
    135c:	0e 94 37 32 	call	0x646e	; 0x646e <_ZN6StringaSEPKc>
   stato_procedura = -2;
    1360:	8e ef       	ldi	r24, 0xFE	; 254
    1362:	9f ef       	ldi	r25, 0xFF	; 255
    1364:	90 93 4e 09 	sts	0x094E, r25	; 0x80094e <stato_procedura+0x1>
    1368:	80 93 4d 09 	sts	0x094D, r24	; 0x80094d <stato_procedura>
    136c:	08 95       	ret

0000136e <loop>:
}

/**************************LOOP PROCEDURA************************************/
void loop() {
    136e:	cf 92       	push	r12
    1370:	df 92       	push	r13
    1372:	ef 92       	push	r14
    1374:	ff 92       	push	r15
    1376:	0f 93       	push	r16
    1378:	1f 93       	push	r17
    137a:	cf 93       	push	r28
    137c:	df 93       	push	r29
    137e:	cd b7       	in	r28, 0x3d	; 61
    1380:	de b7       	in	r29, 0x3e	; 62
    1382:	a3 97       	sbiw	r28, 0x23	; 35
    1384:	0f b6       	in	r0, 0x3f	; 63
    1386:	f8 94       	cli
    1388:	de bf       	out	0x3e, r29	; 62
    138a:	0f be       	out	0x3f, r0	; 63
    138c:	cd bf       	out	0x3d, r28	; 61
      
  switch (stato_procedura) {
    138e:	e0 91 4d 09 	lds	r30, 0x094D	; 0x80094d <stato_procedura>
    1392:	f0 91 4e 09 	lds	r31, 0x094E	; 0x80094e <stato_procedura+0x1>
    1396:	32 96       	adiw	r30, 0x02	; 2
    1398:	ec 30       	cpi	r30, 0x0C	; 12
    139a:	f1 05       	cpc	r31, r1
    139c:	08 f0       	brcs	.+2      	; 0x13a0 <loop+0x32>
    139e:	df c4       	rjmp	.+2494   	; 0x1d5e <loop+0x9f0>
    13a0:	ea 5b       	subi	r30, 0xBA	; 186
    13a2:	ff 4f       	sbci	r31, 0xFF	; 255
    13a4:	0c 94 43 35 	jmp	0x6a86	; 0x6a86 <__tablejump2__>
    case -2:
    { //cli(); // disable interrupt      
            
      righeDisplay[1] =  "";
    13a8:	64 e8       	ldi	r22, 0x84	; 132
    13aa:	71 e0       	ldi	r23, 0x01	; 1
    13ac:	8d ef       	ldi	r24, 0xFD	; 253
    13ae:	98 e0       	ldi	r25, 0x08	; 8
    13b0:	0e 94 37 32 	call	0x646e	; 0x646e <_ZN6StringaSEPKc>
      righeDisplay[2] = "Setting....";
    13b4:	69 ef       	ldi	r22, 0xF9	; 249
    13b6:	74 e0       	ldi	r23, 0x04	; 4
    13b8:	83 e0       	ldi	r24, 0x03	; 3
    13ba:	99 e0       	ldi	r25, 0x09	; 9
    13bc:	0e 94 37 32 	call	0x646e	; 0x646e <_ZN6StringaSEPKc>
      righeDisplay[3] =  "";
    13c0:	64 e8       	ldi	r22, 0x84	; 132
    13c2:	71 e0       	ldi	r23, 0x01	; 1
    13c4:	89 e0       	ldi	r24, 0x09	; 9
    13c6:	99 e0       	ldi	r25, 0x09	; 9
    13c8:	0e 94 37 32 	call	0x646e	; 0x646e <_ZN6StringaSEPKc>
      
      displayLCD(righeDisplay,stato_procedura,100);
    13cc:	60 91 4d 09 	lds	r22, 0x094D	; 0x80094d <stato_procedura>
    13d0:	70 91 4e 09 	lds	r23, 0x094E	; 0x80094e <stato_procedura+0x1>
    13d4:	44 e6       	ldi	r20, 0x64	; 100
    13d6:	50 e0       	ldi	r21, 0x00	; 0
    13d8:	87 ef       	ldi	r24, 0xF7	; 247
    13da:	98 e0       	ldi	r25, 0x08	; 8
    13dc:	58 d9       	rcall	.-3408   	; 0x68e <_Z10displayLCDP6Stringii>
    13de:	2f ef       	ldi	r18, 0xFF	; 255
    13e0:	33 ec       	ldi	r19, 0xC3	; 195
    13e2:	89 e0       	ldi	r24, 0x09	; 9
    13e4:	21 50       	subi	r18, 0x01	; 1
    13e6:	30 40       	sbci	r19, 0x00	; 0
    13e8:	80 40       	sbci	r24, 0x00	; 0
    13ea:	e1 f7       	brne	.-8      	; 0x13e4 <loop+0x76>
      stato_procedura++;
    }
    break;
    case -1:
    {             
    abilitaPulsanti();
    13ec:	43 c0       	rjmp	.+134    	; 0x1474 <loop+0x106>
    13ee:	49 de       	rcall	.-878    	; 0x1082 <_Z15abilitaPulsantiv>
    13f0:	9f ef       	ldi	r25, 0xFF	; 255
    13f2:	29 ef       	ldi	r18, 0xF9	; 249
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	91 50       	subi	r25, 0x01	; 1
    13f8:	20 40       	sbci	r18, 0x00	; 0
    13fa:	30 40       	sbci	r19, 0x00	; 0
    13fc:	e1 f7       	brne	.-8      	; 0x13f6 <loop+0x88>
    13fe:	00 c0       	rjmp	.+0      	; 0x1400 <loop+0x92>
    _delay_ms(20);
    abilitaContattiPistola();
    1400:	00 00       	nop
    1402:	49 de       	rcall	.-878    	; 0x1096 <_Z22abilitaContattiPistolav>
    
    stato_procedura++;
    1404:	80 91 4d 09 	lds	r24, 0x094D	; 0x80094d <stato_procedura>
    1408:	90 91 4e 09 	lds	r25, 0x094E	; 0x80094e <stato_procedura+0x1>
    140c:	01 96       	adiw	r24, 0x01	; 1
    140e:	90 93 4e 09 	sts	0x094E, r25	; 0x80094e <stato_procedura+0x1>
    1412:	80 93 4d 09 	sts	0x094D, r24	; 0x80094d <stato_procedura>
    }
    break;
    1416:	a3 c4       	rjmp	.+2374   	; 0x1d5e <loop+0x9f0>
    case 0:
    { 
      righeDisplay[1] =  "";
    1418:	64 e8       	ldi	r22, 0x84	; 132
    141a:	71 e0       	ldi	r23, 0x01	; 1
    141c:	8d ef       	ldi	r24, 0xFD	; 253
    141e:	98 e0       	ldi	r25, 0x08	; 8
    1420:	0e 94 37 32 	call	0x646e	; 0x646e <_ZN6StringaSEPKc>
      righeDisplay[2] =  "";
    1424:	64 e8       	ldi	r22, 0x84	; 132
    1426:	71 e0       	ldi	r23, 0x01	; 1
    1428:	83 e0       	ldi	r24, 0x03	; 3
    142a:	99 e0       	ldi	r25, 0x09	; 9
    142c:	0e 94 37 32 	call	0x646e	; 0x646e <_ZN6StringaSEPKc>
      righeDisplay[3] =  "";
    1430:	64 e8       	ldi	r22, 0x84	; 132
    1432:	71 e0       	ldi	r23, 0x01	; 1
    1434:	89 e0       	ldi	r24, 0x09	; 9
    1436:	99 e0       	ldi	r25, 0x09	; 9
    1438:	0e 94 37 32 	call	0x646e	; 0x646e <_ZN6StringaSEPKc>
          
      displayLCD(righeDisplay,stato_procedura,100);
    143c:	60 91 4d 09 	lds	r22, 0x094D	; 0x80094d <stato_procedura>
    1440:	70 91 4e 09 	lds	r23, 0x094E	; 0x80094e <stato_procedura+0x1>
    1444:	44 e6       	ldi	r20, 0x64	; 100
    1446:	50 e0       	ldi	r21, 0x00	; 0
    1448:	87 ef       	ldi	r24, 0xF7	; 247
    144a:	98 e0       	ldi	r25, 0x08	; 8
    144c:	20 d9       	rcall	.-3520   	; 0x68e <_Z10displayLCDP6Stringii>
    144e:	8f ef       	ldi	r24, 0xFF	; 255
    1450:	97 ea       	ldi	r25, 0xA7	; 167
    1452:	21 e6       	ldi	r18, 0x61	; 97
    1454:	81 50       	subi	r24, 0x01	; 1
    1456:	90 40       	sbci	r25, 0x00	; 0
    1458:	20 40       	sbci	r18, 0x00	; 0
    145a:	e1 f7       	brne	.-8      	; 0x1454 <loop+0xe6>
    145c:	00 c0       	rjmp	.+0      	; 0x145e <loop+0xf0>
    145e:	00 00       	nop
      _delay_ms(2000);
      alreadyTimbrata = false;  
    1460:	10 92 8c 09 	sts	0x098C, r1	; 0x80098c <alreadyTimbrata>
static const uint8_t RELE1 = PORTC7;
static const uint8_t RELE2 = PORTA7;
/*********************************************************************************************/
static inline void initSS_FLASH()  { DDRB |= (1 << PB4); } // set DDRB bit 4, sets PB4 for output
static inline void initSS_ETH()    { DDRC |= (1 << PC4); } // set DDRC bit 4, sets PC4 for output
static inline void enable_ETH()    { PORTC &= ~(1 << PC4); } // Set 0 Bit 4 PORTC Register
    1464:	44 98       	cbi	0x08, 4	; 8
    1466:	3f ef       	ldi	r19, 0xFF	; 255
    1468:	83 ed       	ldi	r24, 0xD3	; 211
    146a:	90 e3       	ldi	r25, 0x30	; 48
    146c:	31 50       	subi	r19, 0x01	; 1
    146e:	80 40       	sbci	r24, 0x00	; 0
    1470:	90 40       	sbci	r25, 0x00	; 0
    1472:	e1 f7       	brne	.-8      	; 0x146c <loop+0xfe>
    1474:	00 c0       	rjmp	.+0      	; 0x1476 <loop+0x108>
    1476:	00 00       	nop
    1478:	c5 cf       	rjmp	.-118    	; 0x1404 <loop+0x96>
      stato_procedura++;
    }
    break;
    case 1:
    { 
		TARGA = "";
    147a:	64 e8       	ldi	r22, 0x84	; 132
    147c:	71 e0       	ldi	r23, 0x01	; 1
    147e:	81 ea       	ldi	r24, 0xA1	; 161
    1480:	98 e0       	ldi	r25, 0x08	; 8
    1482:	0e 94 37 32 	call	0x646e	; 0x646e <_ZN6StringaSEPKc>
			
		righeDisplay[1] = " * AUTENTICAZIONE *";
    1486:	65 e0       	ldi	r22, 0x05	; 5
    1488:	75 e0       	ldi	r23, 0x05	; 5
    148a:	8d ef       	ldi	r24, 0xFD	; 253
    148c:	98 e0       	ldi	r25, 0x08	; 8
    148e:	0e 94 37 32 	call	0x646e	; 0x646e <_ZN6StringaSEPKc>
		righeDisplay[2] = "";
    1492:	64 e8       	ldi	r22, 0x84	; 132
    1494:	71 e0       	ldi	r23, 0x01	; 1
    1496:	83 e0       	ldi	r24, 0x03	; 3
    1498:	99 e0       	ldi	r25, 0x09	; 9
    149a:	0e 94 37 32 	call	0x646e	; 0x646e <_ZN6StringaSEPKc>
		righeDisplay[3] = "    Avvicina ATE  ";
    149e:	69 e1       	ldi	r22, 0x19	; 25
    14a0:	75 e0       	ldi	r23, 0x05	; 5
    14a2:	89 e0       	ldi	r24, 0x09	; 9
    14a4:	99 e0       	ldi	r25, 0x09	; 9
    14a6:	0e 94 37 32 	call	0x646e	; 0x646e <_ZN6StringaSEPKc>
    
		displayLCD(righeDisplay,stato_procedura,100);     
    14aa:	60 91 4d 09 	lds	r22, 0x094D	; 0x80094d <stato_procedura>
    14ae:	70 91 4e 09 	lds	r23, 0x094E	; 0x80094e <stato_procedura+0x1>
    14b2:	44 e6       	ldi	r20, 0x64	; 100
    14b4:	50 e0       	ldi	r21, 0x00	; 0
    14b6:	87 ef       	ldi	r24, 0xF7	; 247
    14b8:	98 e0       	ldi	r25, 0x08	; 8
    14ba:	e9 d8       	rcall	.-3630   	; 0x68e <_Z10displayLCDP6Stringii>
		_delay_ms(10);
		avanzaStato(TinputTarga);
		/*****************************************/

		/*****************************************************/
		String ATe = "ERRORE";
    14bc:	61 ec       	ldi	r22, 0xC1	; 193
    14be:	71 e0       	ldi	r23, 0x01	; 1
    14c0:	ce 01       	movw	r24, r28
    14c2:	46 96       	adiw	r24, 0x16	; 22
    14c4:	0e 94 b8 31 	call	0x6370	; 0x6370 <_ZN6StringC1EPKc>
		if (!alreadyTimbrata) {ATe = GetCodeRfidATe(); Buzzer(2,100);}
    14c8:	80 91 8c 09 	lds	r24, 0x098C	; 0x80098c <alreadyTimbrata>
    14cc:	81 11       	cpse	r24, r1
    14ce:	15 c0       	rjmp	.+42     	; 0x14fa <loop+0x18c>
    14d0:	ce 01       	movw	r24, r28
    14d2:	01 96       	adiw	r24, 0x01	; 1
    14d4:	7d da       	rcall	.-2822   	; 0x9d0 <_Z14GetCodeRfidATev>
    14d6:	be 01       	movw	r22, r28
    14d8:	6f 5f       	subi	r22, 0xFF	; 255
    14da:	7f 4f       	sbci	r23, 0xFF	; 255
    14dc:	ce 01       	movw	r24, r28
    14de:	46 96       	adiw	r24, 0x16	; 22
    14e0:	0e 94 2c 32 	call	0x6458	; 0x6458 <_ZN6StringaSEOS_>
    14e4:	ce 01       	movw	r24, r28
    14e6:	01 96       	adiw	r24, 0x01	; 1
    14e8:	0e 94 51 31 	call	0x62a2	; 0x62a2 <_ZN6StringD1Ev>
    14ec:	44 e6       	ldi	r20, 0x64	; 100
    14ee:	50 e0       	ldi	r21, 0x00	; 0
    14f0:	60 e0       	ldi	r22, 0x00	; 0
    14f2:	70 e0       	ldi	r23, 0x00	; 0
    14f4:	82 e0       	ldi	r24, 0x02	; 2
    14f6:	0e 94 43 02 	call	0x486	; 0x486 <_Z6Buzzerhm>
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
    14fa:	61 ec       	ldi	r22, 0xC1	; 193
    14fc:	71 e0       	ldi	r23, 0x01	; 1
    14fe:	ce 01       	movw	r24, r28
    1500:	46 96       	adiw	r24, 0x16	; 22
    1502:	0e 94 6d 33 	call	0x66da	; 0x66da <_ZNK6String6equalsEPKc>
            
        if ((ATe != "ERRORE") && (BIT_IS_CLEAR(PORTC,4)))
    1506:	81 11       	cpse	r24, r1
    1508:	02 c0       	rjmp	.+4      	; 0x150e <loop+0x1a0>
    150a:	44 9b       	sbis	0x08, 4	; 8
    150c:	66 c4       	rjmp	.+2252   	; 0x1dda <loop+0xa6c>
                                  
          // Effettua chiamata REST per validare CARD NFC
          // Se la CARD è valida memorizza in memoria l'operazione e prosegui
          // Altrimenti Memorizza in Memoria e Azzera la procedura. // DA IMPLEMENTARE
     
        if (GetAteValidation(80,serverATE,clientATE,ATe)) 
    150e:	be 01       	movw	r22, r28
    1510:	6a 5e       	subi	r22, 0xEA	; 234
    1512:	7f 4f       	sbci	r23, 0xFF	; 255
    1514:	ce 01       	movw	r24, r28
    1516:	0e 96       	adiw	r24, 0x0e	; 14
    1518:	0e 94 24 32 	call	0x6448	; 0x6448 <_ZN6StringC1ERKS_>
#ifdef BIN // Prevent warnings if BIN is previously defined in "iotnx4.h" or similar
#undef BIN
#endif
#define BIN 2

class Print
    151c:	80 91 c7 08 	lds	r24, 0x08C7	; 0x8008c7 <clientATE+0x2>
    1520:	90 91 c8 08 	lds	r25, 0x08C8	; 0x8008c8 <clientATE+0x3>
    1524:	9c 83       	std	Y+4, r25	; 0x04
    1526:	8b 83       	std	Y+3, r24	; 0x03
    SKIP_WHITESPACE // Only tabs, spaces, line feeds & carriage returns are skipped.
};

#define NO_IGNORE_CHAR  '\x01' // a char not found in a valid ASCII numeric field

class Stream : public Print
    1528:	80 91 c9 08 	lds	r24, 0x08C9	; 0x8008c9 <clientATE+0x4>
    152c:	90 91 ca 08 	lds	r25, 0x08CA	; 0x8008ca <clientATE+0x5>
    1530:	a0 91 cb 08 	lds	r26, 0x08CB	; 0x8008cb <clientATE+0x6>
    1534:	b0 91 cc 08 	lds	r27, 0x08CC	; 0x8008cc <clientATE+0x7>
    1538:	8d 83       	std	Y+5, r24	; 0x05
    153a:	9e 83       	std	Y+6, r25	; 0x06
    153c:	af 83       	std	Y+7, r26	; 0x07
    153e:	b8 87       	std	Y+8, r27	; 0x08
    1540:	80 91 cd 08 	lds	r24, 0x08CD	; 0x8008cd <clientATE+0x8>
    1544:	90 91 ce 08 	lds	r25, 0x08CE	; 0x8008ce <clientATE+0x9>
    1548:	a0 91 cf 08 	lds	r26, 0x08CF	; 0x8008cf <clientATE+0xa>
    154c:	b0 91 d0 08 	lds	r27, 0x08D0	; 0x8008d0 <clientATE+0xb>
    1550:	89 87       	std	Y+9, r24	; 0x09
    1552:	9a 87       	std	Y+10, r25	; 0x0a
    1554:	ab 87       	std	Y+11, r26	; 0x0b
    1556:	bc 87       	std	Y+12, r27	; 0x0c
#include "Arduino.h"	
#include "Print.h"
#include "Client.h"
#include "IPAddress.h"

class EthernetClient : public Client {
    1558:	8a ef       	ldi	r24, 0xFA	; 250
    155a:	97 e0       	ldi	r25, 0x07	; 7
    155c:	9a 83       	std	Y+2, r25	; 0x02
    155e:	89 83       	std	Y+1, r24	; 0x01
    1560:	80 91 d1 08 	lds	r24, 0x08D1	; 0x8008d1 <clientATE+0xc>
    1564:	8d 87       	std	Y+13, r24	; 0x0d
    1566:	9e 01       	movw	r18, r28
    1568:	22 5f       	subi	r18, 0xF2	; 242
    156a:	3f 4f       	sbci	r19, 0xFF	; 255
    156c:	ae 01       	movw	r20, r28
    156e:	4f 5f       	subi	r20, 0xFF	; 255
    1570:	5f 4f       	sbci	r21, 0xFF	; 255
    1572:	63 e4       	ldi	r22, 0x43	; 67
    1574:	71 e0       	ldi	r23, 0x01	; 1
    1576:	80 e5       	ldi	r24, 0x50	; 80
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	e7 da       	rcall	.-2610   	; 0xb4a <_Z16GetAteValidationiPc14EthernetClient6String>
    157c:	18 2f       	mov	r17, r24
    157e:	ce 01       	movw	r24, r28
    1580:	0e 96       	adiw	r24, 0x0e	; 14
    1582:	0e 94 51 31 	call	0x62a2	; 0x62a2 <_ZN6StringD1Ev>
    1586:	11 23       	and	r17, r17
    1588:	59 f1       	breq	.+86     	; 0x15e0 <loop+0x272>
        { 
            SET_BIT(PORTC,PC4);
    158a:	44 9a       	sbi	0x08, 4	; 8
            Buzzer(1,400); 		
    158c:	40 e9       	ldi	r20, 0x90	; 144
    158e:	51 e0       	ldi	r21, 0x01	; 1
    1590:	60 e0       	ldi	r22, 0x00	; 0
    1592:	70 e0       	ldi	r23, 0x00	; 0
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	0e 94 43 02 	call	0x486	; 0x486 <_Z6Buzzerhm>
			righeDisplay[1] =  "****** TARGA ******";
    159a:	6c e2       	ldi	r22, 0x2C	; 44
    159c:	75 e0       	ldi	r23, 0x05	; 5
    159e:	8d ef       	ldi	r24, 0xFD	; 253
    15a0:	98 e0       	ldi	r25, 0x08	; 8
    15a2:	0e 94 37 32 	call	0x646e	; 0x646e <_ZN6StringaSEPKc>
			righeDisplay[2] =  "";
    15a6:	64 e8       	ldi	r22, 0x84	; 132
    15a8:	71 e0       	ldi	r23, 0x01	; 1
    15aa:	83 e0       	ldi	r24, 0x03	; 3
    15ac:	99 e0       	ldi	r25, 0x09	; 9
    15ae:	0e 94 37 32 	call	0x646e	; 0x646e <_ZN6StringaSEPKc>
			righeDisplay[3] = "TARGA:";            
    15b2:	60 e4       	ldi	r22, 0x40	; 64
    15b4:	75 e0       	ldi	r23, 0x05	; 5
    15b6:	89 e0       	ldi	r24, 0x09	; 9
    15b8:	99 e0       	ldi	r25, 0x09	; 9
    15ba:	0e 94 37 32 	call	0x646e	; 0x646e <_ZN6StringaSEPKc>
            displayLCD(righeDisplay,stato_procedura,10);   			
    15be:	60 91 4d 09 	lds	r22, 0x094D	; 0x80094d <stato_procedura>
    15c2:	70 91 4e 09 	lds	r23, 0x094E	; 0x80094e <stato_procedura+0x1>
    15c6:	4a e0       	ldi	r20, 0x0A	; 10
    15c8:	50 e0       	ldi	r21, 0x00	; 0
    15ca:	87 ef       	ldi	r24, 0xF7	; 247
    15cc:	98 e0       	ldi	r25, 0x08	; 8
    15ce:	5f d8       	rcall	.-3906   	; 0x68e <_Z10displayLCDP6Stringii>
    15d0:	2f ef       	ldi	r18, 0xFF	; 255
    15d2:	30 e7       	ldi	r19, 0x70	; 112
    15d4:	82 e0       	ldi	r24, 0x02	; 2
    15d6:	21 50       	subi	r18, 0x01	; 1
    15d8:	30 40       	sbci	r19, 0x00	; 0
    15da:	80 40       	sbci	r24, 0x00	; 0
    15dc:	e1 f7       	brne	.-8      	; 0x15d6 <loop+0x268>
    15de:	29 c0       	rjmp	.+82     	; 0x1632 <loop+0x2c4>
			_delay_ms(50);			
		    avanzaStato(TinputTarga); 
          } 
         else 
          { 
            Buzzer(3,200);
    15e0:	48 ec       	ldi	r20, 0xC8	; 200
    15e2:	50 e0       	ldi	r21, 0x00	; 0
    15e4:	60 e0       	ldi	r22, 0x00	; 0
    15e6:	70 e0       	ldi	r23, 0x00	; 0
    15e8:	83 e0       	ldi	r24, 0x03	; 3
    15ea:	0e 94 43 02 	call	0x486	; 0x486 <_Z6Buzzerhm>
			righeDisplay[1] =  "****** TARGA ******";			
    15ee:	6c e2       	ldi	r22, 0x2C	; 44
    15f0:	75 e0       	ldi	r23, 0x05	; 5
    15f2:	8d ef       	ldi	r24, 0xFD	; 253
    15f4:	98 e0       	ldi	r25, 0x08	; 8
    15f6:	0e 94 37 32 	call	0x646e	; 0x646e <_ZN6StringaSEPKc>
			righeDisplay[2] = "TARGA:";
    15fa:	60 e4       	ldi	r22, 0x40	; 64
    15fc:	75 e0       	ldi	r23, 0x05	; 5
    15fe:	83 e0       	ldi	r24, 0x03	; 3
    1600:	99 e0       	ldi	r25, 0x09	; 9
    1602:	0e 94 37 32 	call	0x646e	; 0x646e <_ZN6StringaSEPKc>
			righeDisplay[3] = "#:Conferma A:Avanti";
    1606:	67 e4       	ldi	r22, 0x47	; 71
    1608:	75 e0       	ldi	r23, 0x05	; 5
    160a:	89 e0       	ldi	r24, 0x09	; 9
    160c:	99 e0       	ldi	r25, 0x09	; 9
    160e:	0e 94 37 32 	call	0x646e	; 0x646e <_ZN6StringaSEPKc>
            displayLCD(righeDisplay,stato_procedura,10);       
    1612:	60 91 4d 09 	lds	r22, 0x094D	; 0x80094d <stato_procedura>
    1616:	70 91 4e 09 	lds	r23, 0x094E	; 0x80094e <stato_procedura+0x1>
    161a:	4a e0       	ldi	r20, 0x0A	; 10
    161c:	50 e0       	ldi	r21, 0x00	; 0
    161e:	87 ef       	ldi	r24, 0xF7	; 247
    1620:	98 e0       	ldi	r25, 0x08	; 8
    1622:	35 d8       	rcall	.-3990   	; 0x68e <_Z10displayLCDP6Stringii>
    1624:	9f ef       	ldi	r25, 0xFF	; 255
    1626:	20 e7       	ldi	r18, 0x70	; 112
    1628:	32 e0       	ldi	r19, 0x02	; 2
    162a:	91 50       	subi	r25, 0x01	; 1
    162c:	20 40       	sbci	r18, 0x00	; 0
    162e:	30 40       	sbci	r19, 0x00	; 0
    1630:	e1 f7       	brne	.-8      	; 0x162a <loop+0x2bc>
    1632:	00 c0       	rjmp	.+0      	; 0x1634 <loop+0x2c6>
			_delay_ms(50);    
            avanzaStato(TinputTarga);
    1634:	00 00       	nop
    1636:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <TinputTarga>
    163a:	70 91 23 01 	lds	r23, 0x0123	; 0x800123 <TinputTarga+0x1>
    163e:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <TinputTarga+0x2>
    1642:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <TinputTarga+0x3>
    1646:	c3 d8       	rcall	.-3706   	; 0x7ce <_Z11avanzaStatom>
		_delay_ms(10);
		avanzaStato(TinputTarga);
		/*****************************************/

		/*****************************************************/
		String ATe = "ERRORE";
    1648:	ce 01       	movw	r24, r28
    164a:	46 96       	adiw	r24, 0x16	; 22
    164c:	d5 c1       	rjmp	.+938    	; 0x19f8 <loop+0x68a>
      // da commentare
      // Carburante = "D"; // Simulo Abilitazione Diesel
      // da commentare
      // Carburante = "B"; // Simulo Abilitazione Benzina
	  /*****************************************************************/
	  gpio.setCONFREG(0x3C);
    164e:	6c e3       	ldi	r22, 0x3C	; 60
    1650:	8e e9       	ldi	r24, 0x9E	; 158
    1652:	98 e0       	ldi	r25, 0x08	; 8
    1654:	0e 94 f5 13 	call	0x27ea	; 0x27ea <_ZN7PCA953410setCONFREGEh>
	  uint8_t c = gpio.Read_IP_REGISTER();
    1658:	8e e9       	ldi	r24, 0x9E	; 158
    165a:	98 e0       	ldi	r25, 0x08	; 8
    165c:	0e 94 0c 14 	call	0x2818	; 0x2818 <_ZN7PCA953416Read_IP_REGISTEREv>
    1660:	08 2f       	mov	r16, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    1662:	42 e0       	ldi	r20, 0x02	; 2
    1664:	be 01       	movw	r22, r28
    1666:	6a 5e       	subi	r22, 0xEA	; 234
    1668:	7f 4f       	sbci	r23, 0xFF	; 255
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	0e 94 c1 37 	call	0x6f82	; 0x6f82 <__itoa_ncheck>
	  char buf[8];
	  itoa(c,buf,2);
	  gpio.setCONFREG(0xC3);
    1670:	63 ec       	ldi	r22, 0xC3	; 195
    1672:	8e e9       	ldi	r24, 0x9E	; 158
    1674:	98 e0       	ldi	r25, 0x08	; 8
    1676:	0e 94 f5 13 	call	0x27ea	; 0x27ea <_ZN7PCA953410setCONFREGEh>
	  uint8_t r = gpio.Read_IP_REGISTER();
    167a:	8e e9       	ldi	r24, 0x9E	; 158
    167c:	98 e0       	ldi	r25, 0x08	; 8
    167e:	0e 94 0c 14 	call	0x2818	; 0x2818 <_ZN7PCA953416Read_IP_REGISTEREv>
    1682:	18 2f       	mov	r17, r24
    1684:	42 e0       	ldi	r20, 0x02	; 2
    1686:	be 01       	movw	r22, r28
    1688:	62 5f       	subi	r22, 0xF2	; 242
    168a:	7f 4f       	sbci	r23, 0xFF	; 255
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	0e 94 c1 37 	call	0x6f82	; 0x6f82 <__itoa_ncheck>
	  char bufr[8];
	  itoa(r,bufr,2);
	  char ris[8];
	  uint8_t z = (r ^ c);
	  itoa(z,ris,2);
    1692:	10 27       	eor	r17, r16
    1694:	01 2f       	mov	r16, r17
    1696:	10 e0       	ldi	r17, 0x00	; 0
    1698:	42 e0       	ldi	r20, 0x02	; 2
    169a:	be 01       	movw	r22, r28
    169c:	6f 5f       	subi	r22, 0xFF	; 255
    169e:	7f 4f       	sbci	r23, 0xFF	; 255
    16a0:	c8 01       	movw	r24, r16
    16a2:	0e 94 c1 37 	call	0x6f82	; 0x6f82 <__itoa_ncheck>
	  
	  char T = getCharKeypad(int(z));
    16a6:	c8 01       	movw	r24, r16
    16a8:	0e 94 61 02 	call	0x4c2	; 0x4c2 <_Z13getCharKeypadi>
    16ac:	9f ef       	ldi	r25, 0xFF	; 255
    16ae:	20 e7       	ldi	r18, 0x70	; 112
    16b0:	32 e0       	ldi	r19, 0x02	; 2
    16b2:	91 50       	subi	r25, 0x01	; 1
    16b4:	20 40       	sbci	r18, 0x00	; 0
    16b6:	30 40       	sbci	r19, 0x00	; 0
    16b8:	e1 f7       	brne	.-8      	; 0x16b2 <loop+0x344>
    16ba:	00 c0       	rjmp	.+0      	; 0x16bc <loop+0x34e>
    16bc:	00 00       	nop
	  _delay_ms(50);
	  
	  switch (T) {
    16be:	82 34       	cpi	r24, 0x42	; 66
    16c0:	19 f1       	breq	.+70     	; 0x1708 <loop+0x39a>
    16c2:	b0 f4       	brcc	.+44     	; 0x16f0 <loop+0x382>
    16c4:	83 32       	cpi	r24, 0x23	; 35
    16c6:	09 f4       	brne	.+2      	; 0x16ca <loop+0x35c>
    16c8:	6a c0       	rjmp	.+212    	; 0x179e <loop+0x430>
    16ca:	81 34       	cpi	r24, 0x41	; 65
    16cc:	09 f0       	breq	.+2      	; 0x16d0 <loop+0x362>
    16ce:	85 c0       	rjmp	.+266    	; 0x17da <loop+0x46c>
		  case ('N'): {
			  Serial.print("NIENTE");
		  }
		  break;
		  case ('A'): {			  
				  TARGA = "";
    16d0:	64 e8       	ldi	r22, 0x84	; 132
    16d2:	71 e0       	ldi	r23, 0x01	; 1
    16d4:	81 ea       	ldi	r24, 0xA1	; 161
    16d6:	98 e0       	ldi	r25, 0x08	; 8
    16d8:	0e 94 37 32 	call	0x646e	; 0x646e <_ZN6StringaSEPKc>
				  avanzaStato(TinputTarga);			  
    16dc:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <TinputTarga>
    16e0:	70 91 23 01 	lds	r23, 0x0123	; 0x800123 <TinputTarga+0x1>
    16e4:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <TinputTarga+0x2>
    16e8:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <TinputTarga+0x3>
    16ec:	70 d8       	rcall	.-3872   	; 0x7ce <_Z11avanzaStatom>
    16ee:	0c c0       	rjmp	.+24     	; 0x1708 <loop+0x39a>
	  itoa(z,ris,2);
	  
	  char T = getCharKeypad(int(z));
	  _delay_ms(50);
	  
	  switch (T) {
    16f0:	83 34       	cpi	r24, 0x43	; 67
    16f2:	c1 f0       	breq	.+48     	; 0x1724 <loop+0x3b6>
    16f4:	8e 34       	cpi	r24, 0x4E	; 78
    16f6:	09 f0       	breq	.+2      	; 0x16fa <loop+0x38c>
		  case ('N'): {
			  Serial.print("NIENTE");
    16f8:	70 c0       	rjmp	.+224    	; 0x17da <loop+0x46c>
    16fa:	6b e5       	ldi	r22, 0x5B	; 91
    16fc:	75 e0       	ldi	r23, 0x05	; 5
    16fe:	8c ef       	ldi	r24, 0xFC	; 252
    1700:	9a e0       	ldi	r25, 0x0A	; 10
    1702:	0e 94 f7 2e 	call	0x5dee	; 0x5dee <_ZN5Print5printEPKc>
		  case ('A'): {			  
				  TARGA = "";
				  avanzaStato(TinputTarga);			  
		  }
		   case ('B'): {
			   String mezzoString = leggiTAG_Mezzo(true); // con TRUE scrive sul blocco 4 della card NFC DEL MEZZO
    1706:	a3 c0       	rjmp	.+326    	; 0x184e <loop+0x4e0>
    1708:	61 e0       	ldi	r22, 0x01	; 1
    170a:	ce 01       	movw	r24, r28
    170c:	4e 96       	adiw	r24, 0x1e	; 30
    170e:	7d d8       	rcall	.-3846   	; 0x80a <_Z14leggiTAG_Mezzob>
    1710:	8f e3       	ldi	r24, 0x3F	; 63
    1712:	9c e9       	ldi	r25, 0x9C	; 156
    1714:	01 97       	sbiw	r24, 0x01	; 1
    1716:	f1 f7       	brne	.-4      	; 0x1714 <loop+0x3a6>
    1718:	00 c0       	rjmp	.+0      	; 0x171a <loop+0x3ac>
    171a:	00 00       	nop
    171c:	ce 01       	movw	r24, r28
    171e:	4e 96       	adiw	r24, 0x1e	; 30
    1720:	0e 94 51 31 	call	0x62a2	; 0x62a2 <_ZN6StringD1Ev>
    1724:	20 91 a5 08 	lds	r18, 0x08A5	; 0x8008a5 <TARGA+0x4>
    1728:	30 91 a6 08 	lds	r19, 0x08A6	; 0x8008a6 <TARGA+0x5>
			   _delay_ms(10);			   
		   }
		  case ('C'): {
			  if (TARGA.length() > 0)
    172c:	21 15       	cp	r18, r1
    172e:	31 05       	cpc	r19, r1
    1730:	a9 f0       	breq	.+42     	; 0x175c <loop+0x3ee>
				TARGA = TARGA.substring(0,TARGA.length()-1);
    1732:	21 50       	subi	r18, 0x01	; 1
    1734:	31 09       	sbc	r19, r1
    1736:	40 e0       	ldi	r20, 0x00	; 0
    1738:	50 e0       	ldi	r21, 0x00	; 0
    173a:	61 ea       	ldi	r22, 0xA1	; 161
    173c:	78 e0       	ldi	r23, 0x08	; 8
    173e:	ce 01       	movw	r24, r28
    1740:	4e 96       	adiw	r24, 0x1e	; 30
    1742:	0e 94 8b 33 	call	0x6716	; 0x6716 <_ZNK6String9substringEjj>
    1746:	be 01       	movw	r22, r28
    1748:	62 5e       	subi	r22, 0xE2	; 226
    174a:	7f 4f       	sbci	r23, 0xFF	; 255
    174c:	81 ea       	ldi	r24, 0xA1	; 161
    174e:	98 e0       	ldi	r25, 0x08	; 8
    1750:	0e 94 2c 32 	call	0x6458	; 0x6458 <_ZN6StringaSEOS_>
    1754:	ce 01       	movw	r24, r28
    1756:	4e 96       	adiw	r24, 0x1e	; 30
    1758:	0e 94 51 31 	call	0x62a2	; 0x62a2 <_ZN6StringD1Ev>
			  righeDisplay[1] =  "****** TARGA ******";
    175c:	6c e2       	ldi	r22, 0x2C	; 44
    175e:	75 e0       	ldi	r23, 0x05	; 5
    1760:	8d ef       	ldi	r24, 0xFD	; 253
    1762:	98 e0       	ldi	r25, 0x08	; 8
    1764:	0e 94 37 32 	call	0x646e	; 0x646e <_ZN6StringaSEPKc>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1768:	60 e4       	ldi	r22, 0x40	; 64
    176a:	75 e0       	ldi	r23, 0x05	; 5
    176c:	ce 01       	movw	r24, r28
    176e:	4e 96       	adiw	r24, 0x1e	; 30
    1770:	0e 94 b8 31 	call	0x6370	; 0x6370 <_ZN6StringC1EPKc>
			  righeDisplay[2] = "TARGA:" + TARGA;		
    1774:	61 ea       	ldi	r22, 0xA1	; 161
    1776:	78 e0       	ldi	r23, 0x08	; 8
    1778:	ce 01       	movw	r24, r28
    177a:	4e 96       	adiw	r24, 0x1e	; 30
    177c:	0e 94 39 33 	call	0x6672	; 0x6672 <_ZplRK15StringSumHelperRK6String>
    1780:	bc 01       	movw	r22, r24
    1782:	83 e0       	ldi	r24, 0x03	; 3
    1784:	99 e0       	ldi	r25, 0x09	; 9
    1786:	0e 94 0f 32 	call	0x641e	; 0x641e <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    178a:	ce 01       	movw	r24, r28
    178c:	4e 96       	adiw	r24, 0x1e	; 30
    178e:	0e 94 51 31 	call	0x62a2	; 0x62a2 <_ZN6StringD1Ev>
			  righeDisplay[3] = "#:Conferma A:Avanti";	  
    1792:	67 e4       	ldi	r22, 0x47	; 71
    1794:	75 e0       	ldi	r23, 0x05	; 5
    1796:	89 e0       	ldi	r24, 0x09	; 9
    1798:	99 e0       	ldi	r25, 0x09	; 9
    179a:	0e 94 37 32 	call	0x646e	; 0x646e <_ZN6StringaSEPKc>
			 // displayLCD(righeDisplay,stato_procedura,10);
		  }
		  case ('#'): {			  			  
			  if (TARGA.length() == 5) {	
    179e:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <TARGA+0x4>
    17a2:	90 91 a6 08 	lds	r25, 0x08A6	; 0x8008a6 <TARGA+0x5>
    17a6:	05 97       	sbiw	r24, 0x05	; 5
    17a8:	09 f0       	breq	.+2      	; 0x17ac <loop+0x43e>
    17aa:	51 c0       	rjmp	.+162    	; 0x184e <loop+0x4e0>
				mezzo.TARGA = TARGA;
    17ac:	61 ea       	ldi	r22, 0xA1	; 161
    17ae:	78 e0       	ldi	r23, 0x08	; 8
    17b0:	8c e9       	ldi	r24, 0x9C	; 156
    17b2:	99 e0       	ldi	r25, 0x09	; 9
    17b4:	0e 94 0f 32 	call	0x641e	; 0x641e <_ZN6StringaSERKS_>
				RaccoltaDati[1] = mezzo.TARGA;				
    17b8:	6c e9       	ldi	r22, 0x9C	; 156
    17ba:	79 e0       	ldi	r23, 0x09	; 9
    17bc:	87 e2       	ldi	r24, 0x27	; 39
    17be:	99 e0       	ldi	r25, 0x09	; 9
    17c0:	0e 94 0f 32 	call	0x641e	; 0x641e <_ZN6StringaSERKS_>
				avanzaStato(TinputTarga);
    17c4:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <TinputTarga>
    17c8:	70 91 23 01 	lds	r23, 0x0123	; 0x800123 <TinputTarga+0x1>
    17cc:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <TinputTarga+0x2>
    17d0:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <TinputTarga+0x3>
    17d4:	0e 94 e7 03 	call	0x7ce	; 0x7ce <_Z11avanzaStatom>
    17d8:	3a c0       	rjmp	.+116    	; 0x184e <loop+0x4e0>
			  }
		  }
		  break;
		  default:  {
			  TARGA += String(T);
    17da:	68 2f       	mov	r22, r24
    17dc:	ce 01       	movw	r24, r28
    17de:	4e 96       	adiw	r24, 0x1e	; 30
    17e0:	0e 94 4c 32 	call	0x6498	; 0x6498 <_ZN6StringC1Ec>
	unsigned char concat(double num);
	unsigned char concat(const __FlashStringHelper * str);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    17e4:	be 01       	movw	r22, r28
    17e6:	62 5e       	subi	r22, 0xE2	; 226
    17e8:	7f 4f       	sbci	r23, 0xFF	; 255
    17ea:	81 ea       	ldi	r24, 0xA1	; 161
    17ec:	98 e0       	ldi	r25, 0x08	; 8
    17ee:	0e 94 13 33 	call	0x6626	; 0x6626 <_ZN6String6concatERKS_>
    17f2:	ce 01       	movw	r24, r28
    17f4:	4e 96       	adiw	r24, 0x1e	; 30
    17f6:	0e 94 51 31 	call	0x62a2	; 0x62a2 <_ZN6StringD1Ev>
    17fa:	9f ef       	ldi	r25, 0xFF	; 255
    17fc:	29 ef       	ldi	r18, 0xF9	; 249
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	91 50       	subi	r25, 0x01	; 1
    1802:	20 40       	sbci	r18, 0x00	; 0
    1804:	30 40       	sbci	r19, 0x00	; 0
    1806:	e1 f7       	brne	.-8      	; 0x1800 <loop+0x492>
    1808:	00 c0       	rjmp	.+0      	; 0x180a <loop+0x49c>
    180a:	00 00       	nop
			  _delay_ms(20);			  
			  righeDisplay[1] =  "****** TARGA ******";
    180c:	6c e2       	ldi	r22, 0x2C	; 44
    180e:	75 e0       	ldi	r23, 0x05	; 5
    1810:	8d ef       	ldi	r24, 0xFD	; 253
    1812:	98 e0       	ldi	r25, 0x08	; 8
    1814:	0e 94 37 32 	call	0x646e	; 0x646e <_ZN6StringaSEPKc>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1818:	60 e4       	ldi	r22, 0x40	; 64
    181a:	75 e0       	ldi	r23, 0x05	; 5
    181c:	ce 01       	movw	r24, r28
    181e:	4e 96       	adiw	r24, 0x1e	; 30
    1820:	0e 94 b8 31 	call	0x6370	; 0x6370 <_ZN6StringC1EPKc>
			  righeDisplay[2] = "TARGA:" + TARGA;
    1824:	61 ea       	ldi	r22, 0xA1	; 161
    1826:	78 e0       	ldi	r23, 0x08	; 8
    1828:	ce 01       	movw	r24, r28
    182a:	4e 96       	adiw	r24, 0x1e	; 30
    182c:	0e 94 39 33 	call	0x6672	; 0x6672 <_ZplRK15StringSumHelperRK6String>
    1830:	bc 01       	movw	r22, r24
    1832:	83 e0       	ldi	r24, 0x03	; 3
    1834:	99 e0       	ldi	r25, 0x09	; 9
    1836:	0e 94 0f 32 	call	0x641e	; 0x641e <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    183a:	ce 01       	movw	r24, r28
    183c:	4e 96       	adiw	r24, 0x1e	; 30
    183e:	0e 94 51 31 	call	0x62a2	; 0x62a2 <_ZN6StringD1Ev>
			  righeDisplay[3] = "#:Conferma A:Avanti";
    1842:	67 e4       	ldi	r22, 0x47	; 71
    1844:	75 e0       	ldi	r23, 0x05	; 5
    1846:	89 e0       	ldi	r24, 0x09	; 9
    1848:	99 e0       	ldi	r25, 0x09	; 9
    184a:	0e 94 37 32 	call	0x646e	; 0x646e <_ZN6StringaSEPKc>
			 // displayLCD(righeDisplay,stato_procedura,10);
		  }
		  break;
      }
	  displayLCD(righeDisplay,stato_procedura,10); 
    184e:	60 91 4d 09 	lds	r22, 0x094D	; 0x80094d <stato_procedura>
    1852:	70 91 4e 09 	lds	r23, 0x094E	; 0x80094e <stato_procedura+0x1>
    1856:	4a e0       	ldi	r20, 0x0A	; 10
    1858:	50 e0       	ldi	r21, 0x00	; 0
    185a:	87 ef       	ldi	r24, 0xF7	; 247
    185c:	98 e0       	ldi	r25, 0x08	; 8
    185e:	0e 94 47 03 	call	0x68e	; 0x68e <_Z10displayLCDP6Stringii>
    }
    break;
    1862:	7d c2       	rjmp	.+1274   	; 0x1d5e <loop+0x9f0>
    case 3:
    {  
	  if (TARGA.length() == 5) {
    1864:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <TARGA+0x4>
    1868:	90 91 a6 08 	lds	r25, 0x08A6	; 0x8008a6 <TARGA+0x5>
    186c:	05 97       	sbiw	r24, 0x05	; 5
    186e:	b9 f4       	brne	.+46     	; 0x189e <loop+0x530>
		  mezzo.Carb = "X";
    1870:	66 ee       	ldi	r22, 0xE6	; 230
    1872:	74 e0       	ldi	r23, 0x04	; 4
    1874:	86 e9       	ldi	r24, 0x96	; 150
    1876:	99 e0       	ldi	r25, 0x09	; 9
    1878:	0e 94 37 32 	call	0x646e	; 0x646e <_ZN6StringaSEPKc>
		  mezzo.TARGA = TARGA;
    187c:	61 ea       	ldi	r22, 0xA1	; 161
    187e:	78 e0       	ldi	r23, 0x08	; 8
    1880:	8c e9       	ldi	r24, 0x9C	; 156
    1882:	99 e0       	ldi	r25, 0x09	; 9
    1884:	0e 94 0f 32 	call	0x641e	; 0x641e <_ZN6StringaSERKS_>
		  mezzo.KM = 0;
    1888:	10 92 a2 09 	sts	0x09A2, r1	; 0x8009a2 <mezzo+0xc>
		  avanzaStato(TselDistributore); 
    188c:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <TselDistributore>
    1890:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <TselDistributore+0x1>
    1894:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <TselDistributore+0x2>
    1898:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <TselDistributore+0x3>
    189c:	eb c0       	rjmp	.+470    	; 0x1a74 <loop+0x706>
	  }	  else
	  {
		  righeDisplay[1] =  "AVVICINA TAG MEZZO";
    189e:	62 e6       	ldi	r22, 0x62	; 98
    18a0:	75 e0       	ldi	r23, 0x05	; 5
    18a2:	8d ef       	ldi	r24, 0xFD	; 253
    18a4:	98 e0       	ldi	r25, 0x08	; 8
    18a6:	0e 94 37 32 	call	0x646e	; 0x646e <_ZN6StringaSEPKc>
		  righeDisplay[2] =  "";
    18aa:	64 e8       	ldi	r22, 0x84	; 132
    18ac:	71 e0       	ldi	r23, 0x01	; 1
    18ae:	83 e0       	ldi	r24, 0x03	; 3
    18b0:	99 e0       	ldi	r25, 0x09	; 9
    18b2:	0e 94 37 32 	call	0x646e	; 0x646e <_ZN6StringaSEPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    18b6:	65 e7       	ldi	r22, 0x75	; 117
    18b8:	75 e0       	ldi	r23, 0x05	; 5
    18ba:	ce 01       	movw	r24, r28
    18bc:	01 96       	adiw	r24, 0x01	; 1
    18be:	0e 94 b8 31 	call	0x6370	; 0x6370 <_ZN6StringC1EPKc>
		  righeDisplay[3] = "TARGA: "+  mezzo.TARGA;
    18c2:	6c e9       	ldi	r22, 0x9C	; 156
    18c4:	79 e0       	ldi	r23, 0x09	; 9
    18c6:	ce 01       	movw	r24, r28
    18c8:	01 96       	adiw	r24, 0x01	; 1
    18ca:	0e 94 39 33 	call	0x6672	; 0x6672 <_ZplRK15StringSumHelperRK6String>
    18ce:	bc 01       	movw	r22, r24
    18d0:	89 e0       	ldi	r24, 0x09	; 9
    18d2:	99 e0       	ldi	r25, 0x09	; 9
    18d4:	0e 94 0f 32 	call	0x641e	; 0x641e <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    18d8:	ce 01       	movw	r24, r28
    18da:	01 96       	adiw	r24, 0x01	; 1
    18dc:	0e 94 51 31 	call	0x62a2	; 0x62a2 <_ZN6StringD1Ev>
		  displayLCD(righeDisplay,stato_procedura,10);
    18e0:	60 91 4d 09 	lds	r22, 0x094D	; 0x80094d <stato_procedura>
    18e4:	70 91 4e 09 	lds	r23, 0x094E	; 0x80094e <stato_procedura+0x1>
    18e8:	4a e0       	ldi	r20, 0x0A	; 10
    18ea:	50 e0       	ldi	r21, 0x00	; 0
    18ec:	87 ef       	ldi	r24, 0xF7	; 247
    18ee:	98 e0       	ldi	r25, 0x08	; 8
    18f0:	0e 94 47 03 	call	0x68e	; 0x68e <_Z10displayLCDP6Stringii>
				
		  String mezzoString = leggiTAG_Mezzo(false); // con TRUE scrive sul blocco 4 della card NFC DEL MEZZO
    18f4:	60 e0       	ldi	r22, 0x00	; 0
    18f6:	ce 01       	movw	r24, r28
    18f8:	0e 96       	adiw	r24, 0x0e	; 14
    18fa:	0e 94 05 04 	call	0x80a	; 0x80a <_Z14leggiTAG_Mezzob>
    18fe:	8f e3       	ldi	r24, 0x3F	; 63
    1900:	9c e9       	ldi	r25, 0x9C	; 156
    1902:	01 97       	sbiw	r24, 0x01	; 1
    1904:	f1 f7       	brne	.-4      	; 0x1902 <loop+0x594>
    1906:	00 c0       	rjmp	.+0      	; 0x1908 <loop+0x59a>
    1908:	00 00       	nop
		  _delay_ms(10);

		  Serial.println(mezzoString);
    190a:	be 01       	movw	r22, r28
    190c:	62 5f       	subi	r22, 0xF2	; 242
    190e:	7f 4f       	sbci	r23, 0xFF	; 255
    1910:	8c ef       	ldi	r24, 0xFC	; 252
    1912:	9a e0       	ldi	r25, 0x0A	; 10
    1914:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <_ZN5Print7printlnERK6String>
	int indexOf( const String &str, unsigned int fromIndex ) const;
	int lastIndexOf( char ch ) const;
	int lastIndexOf( char ch, unsigned int fromIndex ) const;
	int lastIndexOf( const String &str ) const;
	int lastIndexOf( const String &str, unsigned int fromIndex ) const;
	String substring( unsigned int beginIndex ) const { return substring(beginIndex, len); };
    1918:	2a 89       	ldd	r18, Y+18	; 0x12
    191a:	3b 89       	ldd	r19, Y+19	; 0x13
    191c:	45 e0       	ldi	r20, 0x05	; 5
    191e:	50 e0       	ldi	r21, 0x00	; 0
    1920:	be 01       	movw	r22, r28
    1922:	62 5f       	subi	r22, 0xF2	; 242
    1924:	7f 4f       	sbci	r23, 0xFF	; 255
    1926:	ce 01       	movw	r24, r28
    1928:	01 96       	adiw	r24, 0x01	; 1
    192a:	0e 94 8b 33 	call	0x6716	; 0x6716 <_ZNK6String9substringEjj>
      
		  mezzo.Carb = mezzoString.substring(5);
    192e:	be 01       	movw	r22, r28
    1930:	6f 5f       	subi	r22, 0xFF	; 255
    1932:	7f 4f       	sbci	r23, 0xFF	; 255
    1934:	86 e9       	ldi	r24, 0x96	; 150
    1936:	99 e0       	ldi	r25, 0x09	; 9
    1938:	0e 94 2c 32 	call	0x6458	; 0x6458 <_ZN6StringaSEOS_>
    193c:	ce 01       	movw	r24, r28
    193e:	01 96       	adiw	r24, 0x01	; 1
    1940:	0e 94 51 31 	call	0x62a2	; 0x62a2 <_ZN6StringD1Ev>
		  mezzo.TARGA = mezzoString.substring(0,5);
    1944:	25 e0       	ldi	r18, 0x05	; 5
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	40 e0       	ldi	r20, 0x00	; 0
    194a:	50 e0       	ldi	r21, 0x00	; 0
    194c:	be 01       	movw	r22, r28
    194e:	62 5f       	subi	r22, 0xF2	; 242
    1950:	7f 4f       	sbci	r23, 0xFF	; 255
    1952:	ce 01       	movw	r24, r28
    1954:	01 96       	adiw	r24, 0x01	; 1
    1956:	0e 94 8b 33 	call	0x6716	; 0x6716 <_ZNK6String9substringEjj>
    195a:	be 01       	movw	r22, r28
    195c:	6f 5f       	subi	r22, 0xFF	; 255
    195e:	7f 4f       	sbci	r23, 0xFF	; 255
    1960:	8c e9       	ldi	r24, 0x9C	; 156
    1962:	99 e0       	ldi	r25, 0x09	; 9
    1964:	0e 94 2c 32 	call	0x6458	; 0x6458 <_ZN6StringaSEOS_>
    1968:	ce 01       	movw	r24, r28
    196a:	01 96       	adiw	r24, 0x01	; 1
    196c:	0e 94 51 31 	call	0x62a2	; 0x62a2 <_ZN6StringD1Ev>
		  mezzo.KM = 0;
    1970:	10 92 a2 09 	sts	0x09A2, r1	; 0x8009a2 <mezzo+0xc>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1974:	6d e7       	ldi	r22, 0x7D	; 125
    1976:	75 e0       	ldi	r23, 0x05	; 5
    1978:	ce 01       	movw	r24, r28
    197a:	01 96       	adiw	r24, 0x01	; 1
    197c:	0e 94 b8 31 	call	0x6370	; 0x6370 <_ZN6StringC1EPKc>

		  Serial.println("TIPO CARBURANTE: " + mezzo.Carb);    
    1980:	66 e9       	ldi	r22, 0x96	; 150
    1982:	79 e0       	ldi	r23, 0x09	; 9
    1984:	ce 01       	movw	r24, r28
    1986:	01 96       	adiw	r24, 0x01	; 1
    1988:	0e 94 39 33 	call	0x6672	; 0x6672 <_ZplRK15StringSumHelperRK6String>
    198c:	bc 01       	movw	r22, r24
    198e:	8c ef       	ldi	r24, 0xFC	; 252
    1990:	9a e0       	ldi	r25, 0x0A	; 10
    1992:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1996:	ce 01       	movw	r24, r28
    1998:	01 96       	adiw	r24, 0x01	; 1
    199a:	0e 94 51 31 	call	0x62a2	; 0x62a2 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    199e:	65 e7       	ldi	r22, 0x75	; 117
    19a0:	75 e0       	ldi	r23, 0x05	; 5
    19a2:	ce 01       	movw	r24, r28
    19a4:	01 96       	adiw	r24, 0x01	; 1
    19a6:	0e 94 b8 31 	call	0x6370	; 0x6370 <_ZN6StringC1EPKc>
		  Serial.println("TARGA: " + mezzo.TARGA);              
    19aa:	6c e9       	ldi	r22, 0x9C	; 156
    19ac:	79 e0       	ldi	r23, 0x09	; 9
    19ae:	ce 01       	movw	r24, r28
    19b0:	01 96       	adiw	r24, 0x01	; 1
    19b2:	0e 94 39 33 	call	0x6672	; 0x6672 <_ZplRK15StringSumHelperRK6String>
    19b6:	bc 01       	movw	r22, r24
    19b8:	8c ef       	ldi	r24, 0xFC	; 252
    19ba:	9a e0       	ldi	r25, 0x0A	; 10
    19bc:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    19c0:	ce 01       	movw	r24, r28
    19c2:	01 96       	adiw	r24, 0x01	; 1
    19c4:	0e 94 51 31 	call	0x62a2	; 0x62a2 <_ZN6StringD1Ev>

		  Carburante = mezzo.Carb;                 
    19c8:	66 e9       	ldi	r22, 0x96	; 150
    19ca:	79 e0       	ldi	r23, 0x09	; 9
    19cc:	8b e1       	ldi	r24, 0x1B	; 27
    19ce:	99 e0       	ldi	r25, 0x09	; 9
    19d0:	0e 94 0f 32 	call	0x641e	; 0x641e <_ZN6StringaSERKS_>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    19d4:	6f e8       	ldi	r22, 0x8F	; 143
    19d6:	75 e0       	ldi	r23, 0x05	; 5
    19d8:	86 e9       	ldi	r24, 0x96	; 150
    19da:	99 e0       	ldi	r25, 0x09	; 9
    19dc:	0e 94 6d 33 	call	0x66da	; 0x66da <_ZNK6String6equalsEPKc>
		  if ((mezzo.Carb == "B") || (mezzo.Carb == "D")) {
    19e0:	81 11       	cpse	r24, r1
    19e2:	66 c2       	rjmp	.+1228   	; 0x1eb0 <loop+0xb42>
    19e4:	61 e9       	ldi	r22, 0x91	; 145
    19e6:	75 e0       	ldi	r23, 0x05	; 5
    19e8:	86 e9       	ldi	r24, 0x96	; 150
    19ea:	99 e0       	ldi	r25, 0x09	; 9
    19ec:	0e 94 6d 33 	call	0x66da	; 0x66da <_ZNK6String6equalsEPKc>
    19f0:	81 11       	cpse	r24, r1
    19f2:	5e c2       	rjmp	.+1212   	; 0x1eb0 <loop+0xb42>
		  righeDisplay[1] =  "AVVICINA TAG MEZZO";
		  righeDisplay[2] =  "";
		  righeDisplay[3] = "TARGA: "+  mezzo.TARGA;
		  displayLCD(righeDisplay,stato_procedura,10);
				
		  String mezzoString = leggiTAG_Mezzo(false); // con TRUE scrive sul blocco 4 della card NFC DEL MEZZO
    19f4:	ce 01       	movw	r24, r28
    19f6:	0e 96       	adiw	r24, 0x0e	; 14
    19f8:	0e 94 51 31 	call	0x62a2	; 0x62a2 <_ZN6StringD1Ev>
    19fc:	b0 c1       	rjmp	.+864    	; 0x1d5e <loop+0x9f0>
	  }
    }
    break;
    case 4:
    { 
    righeDisplay[1] =  "****** DISTRIBUTORE ******";
    19fe:	63 e9       	ldi	r22, 0x93	; 147
    1a00:	75 e0       	ldi	r23, 0x05	; 5
    1a02:	8d ef       	ldi	r24, 0xFD	; 253
    1a04:	98 e0       	ldi	r25, 0x08	; 8
    1a06:	0e 94 37 32 	call	0x646e	; 0x646e <_ZN6StringaSEPKc>
    righeDisplay[2] =  "";
    1a0a:	64 e8       	ldi	r22, 0x84	; 132
    1a0c:	71 e0       	ldi	r23, 0x01	; 1
    1a0e:	83 e0       	ldi	r24, 0x03	; 3
    1a10:	99 e0       	ldi	r25, 0x09	; 9
    1a12:	0e 94 37 32 	call	0x646e	; 0x646e <_ZN6StringaSEPKc>
    righeDisplay[3] = "**** SCEGLI ****";
    1a16:	6e ea       	ldi	r22, 0xAE	; 174
    1a18:	75 e0       	ldi	r23, 0x05	; 5
    1a1a:	89 e0       	ldi	r24, 0x09	; 9
    1a1c:	99 e0       	ldi	r25, 0x09	; 9
    1a1e:	0e 94 37 32 	call	0x646e	; 0x646e <_ZN6StringaSEPKc>

    displayLCD(righeDisplay,stato_procedura,100);
    1a22:	60 91 4d 09 	lds	r22, 0x094D	; 0x80094d <stato_procedura>
    1a26:	70 91 4e 09 	lds	r23, 0x094E	; 0x80094e <stato_procedura+0x1>
    1a2a:	44 e6       	ldi	r20, 0x64	; 100
    1a2c:	50 e0       	ldi	r21, 0x00	; 0
    1a2e:	87 ef       	ldi	r24, 0xF7	; 247
    1a30:	98 e0       	ldi	r25, 0x08	; 8
    1a32:	0e 94 47 03 	call	0x68e	; 0x68e <_Z10displayLCDP6Stringii>
    1a36:	6f e8       	ldi	r22, 0x8F	; 143
    1a38:	75 e0       	ldi	r23, 0x05	; 5
    1a3a:	86 e9       	ldi	r24, 0x96	; 150
    1a3c:	99 e0       	ldi	r25, 0x09	; 9

    // Verifica scelta distributore
    
      if (mezzo.Carb == "B")
    1a3e:	0e 94 6d 33 	call	0x66da	; 0x66da <_ZNK6String6equalsEPKc>
      {
        abilitaPulser('B');
    1a42:	88 23       	and	r24, r24
    1a44:	d1 f0       	breq	.+52     	; 0x1a7a <loop+0x70c>
    1a46:	82 e4       	ldi	r24, 0x42	; 66
        Rele_Abilitazione2(0,7); // chiudi relè
    1a48:	29 db       	rcall	.-2478   	; 0x109c <_Z13abilitaPulserc>
    1a4a:	67 e0       	ldi	r22, 0x07	; 7
    1a4c:	70 e0       	ldi	r23, 0x00	; 0
    1a4e:	80 e0       	ldi	r24, 0x00	; 0
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	98 db       	rcall	.-2256   	; 0x1184 <_Z18Rele_Abilitazione2ii>
        StatoAttuale = "BENZINA";
    1a54:	6f eb       	ldi	r22, 0xBF	; 191
    1a56:	75 e0       	ldi	r23, 0x05	; 5
    1a58:	87 e5       	ldi	r24, 0x57	; 87
    1a5a:	99 e0       	ldi	r25, 0x09	; 9
    1a5c:	0e 94 37 32 	call	0x646e	; 0x646e <_ZN6StringaSEPKc>
		RaccoltaDati[2] = mezzo.Carb;
    1a60:	66 e9       	ldi	r22, 0x96	; 150
    1a62:	79 e0       	ldi	r23, 0x09	; 9
    1a64:	8d e2       	ldi	r24, 0x2D	; 45
    1a66:	99 e0       	ldi	r25, 0x09	; 9
    1a68:	0e 94 0f 32 	call	0x641e	; 0x641e <_ZN6StringaSERKS_>
        avanzaStato(10);
    1a6c:	6a e0       	ldi	r22, 0x0A	; 10
    1a6e:	70 e0       	ldi	r23, 0x00	; 0
    1a70:	80 e0       	ldi	r24, 0x00	; 0
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	0e 94 e7 03 	call	0x7ce	; 0x7ce <_Z11avanzaStatom>
    1a78:	72 c1       	rjmp	.+740    	; 0x1d5e <loop+0x9f0>
    1a7a:	61 e9       	ldi	r22, 0x91	; 145
    1a7c:	75 e0       	ldi	r23, 0x05	; 5
    1a7e:	86 e9       	ldi	r24, 0x96	; 150
    1a80:	99 e0       	ldi	r25, 0x09	; 9
      }
      else if (mezzo.Carb == "D")
    1a82:	0e 94 6d 33 	call	0x66da	; 0x66da <_ZNK6String6equalsEPKc>
    1a86:	88 23       	and	r24, r24
      {
        abilitaPulser('D');
    1a88:	09 f4       	brne	.+2      	; 0x1a8c <loop+0x71e>
    1a8a:	69 c1       	rjmp	.+722    	; 0x1d5e <loop+0x9f0>
    1a8c:	84 e4       	ldi	r24, 0x44	; 68
        Rele_Abilitazione1(0,7); // chiudi relè
    1a8e:	06 db       	rcall	.-2548   	; 0x109c <_Z13abilitaPulserc>
    1a90:	67 e0       	ldi	r22, 0x07	; 7
    1a92:	70 e0       	ldi	r23, 0x00	; 0
    1a94:	80 e0       	ldi	r24, 0x00	; 0
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	3a db       	rcall	.-2444   	; 0x110e <_Z18Rele_Abilitazione1ii>
        StatoAttuale = "GASOLIO";
    1a9a:	67 ec       	ldi	r22, 0xC7	; 199
    1a9c:	75 e0       	ldi	r23, 0x05	; 5
    1a9e:	dc cf       	rjmp	.-72     	; 0x1a58 <loop+0x6ea>
    break;
    case 5:
    {             
      // VALIDA MEZZO CON WBSERVICES
      
      impulsi = 0;
    1aa0:	10 92 4c 09 	sts	0x094C, r1	; 0x80094c <impulsi+0x1>
    1aa4:	10 92 4b 09 	sts	0x094B, r1	; 0x80094b <impulsi>
      
      righeDisplay[1] = "**** Distributore ****";
    1aa8:	6f ec       	ldi	r22, 0xCF	; 207
    1aaa:	75 e0       	ldi	r23, 0x05	; 5
    1aac:	8d ef       	ldi	r24, 0xFD	; 253
    1aae:	98 e0       	ldi	r25, 0x08	; 8
    1ab0:	0e 94 37 32 	call	0x646e	; 0x646e <_ZN6StringaSEPKc>
      righeDisplay[2] =  "";
    1ab4:	64 e8       	ldi	r22, 0x84	; 132
    1ab6:	71 e0       	ldi	r23, 0x01	; 1
    1ab8:	83 e0       	ldi	r24, 0x03	; 3
    1aba:	99 e0       	ldi	r25, 0x09	; 9
    1abc:	0e 94 37 32 	call	0x646e	; 0x646e <_ZN6StringaSEPKc>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1ac0:	66 ee       	ldi	r22, 0xE6	; 230
    1ac2:	75 e0       	ldi	r23, 0x05	; 5
    1ac4:	ce 01       	movw	r24, r28
    1ac6:	01 96       	adiw	r24, 0x01	; 1
    1ac8:	0e 94 b8 31 	call	0x6370	; 0x6370 <_ZN6StringC1EPKc>
      righeDisplay[3] = "***** " + StatoAttuale + " *****";
    1acc:	67 e5       	ldi	r22, 0x57	; 87
    1ace:	79 e0       	ldi	r23, 0x09	; 9
    1ad0:	ce 01       	movw	r24, r28
    1ad2:	01 96       	adiw	r24, 0x01	; 1
    1ad4:	0e 94 39 33 	call	0x6672	; 0x6672 <_ZplRK15StringSumHelperRK6String>
    1ad8:	6d ee       	ldi	r22, 0xED	; 237
    1ada:	75 e0       	ldi	r23, 0x05	; 5
    1adc:	0e 94 4a 33 	call	0x6694	; 0x6694 <_ZplRK15StringSumHelperPKc>
    1ae0:	bc 01       	movw	r22, r24
    1ae2:	89 e0       	ldi	r24, 0x09	; 9
    1ae4:	99 e0       	ldi	r25, 0x09	; 9
    1ae6:	0e 94 0f 32 	call	0x641e	; 0x641e <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1aea:	ce 01       	movw	r24, r28
    1aec:	01 96       	adiw	r24, 0x01	; 1
    1aee:	0e 94 51 31 	call	0x62a2	; 0x62a2 <_ZN6StringD1Ev>
      
      displayLCD(righeDisplay,stato_procedura,100);
    1af2:	60 91 4d 09 	lds	r22, 0x094D	; 0x80094d <stato_procedura>
    1af6:	70 91 4e 09 	lds	r23, 0x094E	; 0x80094e <stato_procedura+0x1>
    1afa:	44 e6       	ldi	r20, 0x64	; 100
    1afc:	50 e0       	ldi	r21, 0x00	; 0
    1afe:	87 ef       	ldi	r24, 0xF7	; 247
    1b00:	98 e0       	ldi	r25, 0x08	; 8
    1b02:	0e 94 47 03 	call	0x68e	; 0x68e <_Z10displayLCDP6Stringii>

      avanzaStato(20);
    1b06:	64 e1       	ldi	r22, 0x14	; 20
    1b08:	70 e0       	ldi	r23, 0x00	; 0
    1b0a:	80 e0       	ldi	r24, 0x00	; 0
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    }
    break;
    case 6:
    { 
    disable_ETH();
    1b0e:	b2 cf       	rjmp	.-156    	; 0x1a74 <loop+0x706>
    1b10:	0e 94 92 01 	call	0x324	; 0x324 <_ZL11disable_ETHv>
    1b14:	8f e3       	ldi	r24, 0x3F	; 63
    1b16:	9f e1       	ldi	r25, 0x1F	; 31
    1b18:	01 97       	sbiw	r24, 0x01	; 1
    1b1a:	f1 f7       	brne	.-4      	; 0x1b18 <loop+0x7aa>
    1b1c:	00 c0       	rjmp	.+0      	; 0x1b1e <loop+0x7b0>
static const uint8_t RELE1 = PORTC7;
static const uint8_t RELE2 = PORTA7;
/*********************************************************************************************/
static inline void initSS_FLASH()  { DDRB |= (1 << PB4); } // set DDRB bit 4, sets PB4 for output
static inline void initSS_ETH()    { DDRC |= (1 << PC4); } // set DDRC bit 4, sets PC4 for output
static inline void enable_ETH()    { PORTC &= ~(1 << PC4); } // Set 0 Bit 4 PORTC Register
    1b1e:	00 00       	nop
    { 
    disable_ETH();
    _delay_ms(2);
    enable_ETH();
    
      double lt = impulsiToLitri(impulsi);      
    1b20:	44 98       	cbi	0x08, 4	; 8
    1b22:	80 91 4b 09 	lds	r24, 0x094B	; 0x80094b <impulsi>
    1b26:	90 91 4c 09 	lds	r25, 0x094C	; 0x80094c <impulsi+0x1>
    1b2a:	c6 da       	rcall	.-2676   	; 0x10b8 <_Z14impulsiToLitrii>
    1b2c:	6b 01       	movw	r12, r22
    1b2e:	7c 01       	movw	r14, r24
      
      righeDisplay[1] = "LITRI :" + String(lt);
    1b30:	22 e0       	ldi	r18, 0x02	; 2
    1b32:	ab 01       	movw	r20, r22
    1b34:	bc 01       	movw	r22, r24
    1b36:	ce 01       	movw	r24, r28
    1b38:	0e 96       	adiw	r24, 0x0e	; 14
    1b3a:	0e 94 b9 32 	call	0x6572	; 0x6572 <_ZN6StringC1Edh>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1b3e:	64 ef       	ldi	r22, 0xF4	; 244
    1b40:	75 e0       	ldi	r23, 0x05	; 5
    1b42:	ce 01       	movw	r24, r28
    1b44:	01 96       	adiw	r24, 0x01	; 1
    1b46:	0e 94 b8 31 	call	0x6370	; 0x6370 <_ZN6StringC1EPKc>
    1b4a:	be 01       	movw	r22, r28
    1b4c:	62 5f       	subi	r22, 0xF2	; 242
    1b4e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b50:	ce 01       	movw	r24, r28
    1b52:	01 96       	adiw	r24, 0x01	; 1
    1b54:	0e 94 39 33 	call	0x6672	; 0x6672 <_ZplRK15StringSumHelperRK6String>
    1b58:	bc 01       	movw	r22, r24
    1b5a:	8d ef       	ldi	r24, 0xFD	; 253
    1b5c:	98 e0       	ldi	r25, 0x08	; 8
    1b5e:	0e 94 0f 32 	call	0x641e	; 0x641e <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1b62:	ce 01       	movw	r24, r28
    1b64:	01 96       	adiw	r24, 0x01	; 1
    1b66:	0e 94 51 31 	call	0x62a2	; 0x62a2 <_ZN6StringD1Ev>
    1b6a:	ce 01       	movw	r24, r28
    1b6c:	0e 96       	adiw	r24, 0x0e	; 14
    1b6e:	0e 94 51 31 	call	0x62a2	; 0x62a2 <_ZN6StringD1Ev>
      righeDisplay[2] = "";     
    1b72:	64 e8       	ldi	r22, 0x84	; 132
    1b74:	71 e0       	ldi	r23, 0x01	; 1
    1b76:	83 e0       	ldi	r24, 0x03	; 3
    1b78:	99 e0       	ldi	r25, 0x09	; 9
    1b7a:	0e 94 37 32 	call	0x646e	; 0x646e <_ZN6StringaSEPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1b7e:	6c ef       	ldi	r22, 0xFC	; 252
    1b80:	75 e0       	ldi	r23, 0x05	; 5
    1b82:	ce 01       	movw	r24, r28
    1b84:	01 96       	adiw	r24, 0x01	; 1
    1b86:	0e 94 b8 31 	call	0x6370	; 0x6370 <_ZN6StringC1EPKc>
      righeDisplay[3] = "Erogazione: " + StatoAttuale;
    1b8a:	67 e5       	ldi	r22, 0x57	; 87
    1b8c:	79 e0       	ldi	r23, 0x09	; 9
    1b8e:	ce 01       	movw	r24, r28
    1b90:	01 96       	adiw	r24, 0x01	; 1
    1b92:	0e 94 39 33 	call	0x6672	; 0x6672 <_ZplRK15StringSumHelperRK6String>
    1b96:	bc 01       	movw	r22, r24
    1b98:	89 e0       	ldi	r24, 0x09	; 9
    1b9a:	99 e0       	ldi	r25, 0x09	; 9
    1b9c:	0e 94 0f 32 	call	0x641e	; 0x641e <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1ba0:	ce 01       	movw	r24, r28
    1ba2:	01 96       	adiw	r24, 0x01	; 1
    1ba4:	0e 94 51 31 	call	0x62a2	; 0x62a2 <_ZN6StringD1Ev>
      
      displayLCD(righeDisplay,stato_procedura,100);   
    1ba8:	60 91 4d 09 	lds	r22, 0x094D	; 0x80094d <stato_procedura>
    1bac:	70 91 4e 09 	lds	r23, 0x094E	; 0x80094e <stato_procedura+0x1>
    1bb0:	44 e6       	ldi	r20, 0x64	; 100
    1bb2:	50 e0       	ldi	r21, 0x00	; 0
    1bb4:	87 ef       	ldi	r24, 0xF7	; 247
    1bb6:	98 e0       	ldi	r25, 0x08	; 8
    1bb8:	0e 94 47 03 	call	0x68e	; 0x68e <_Z10displayLCDP6Stringii>

      /* CONTATTO PISTOLA DIESEL*/
      
      if ((PINA & _BV(PA1)) && (Carburante == "D"))
    1bbc:	01 9b       	sbis	0x00, 1	; 0
    1bbe:	08 c0       	rjmp	.+16     	; 0x1bd0 <loop+0x862>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    1bc0:	61 e9       	ldi	r22, 0x91	; 145
    1bc2:	75 e0       	ldi	r23, 0x05	; 5
    1bc4:	8b e1       	ldi	r24, 0x1B	; 27
    1bc6:	99 e0       	ldi	r25, 0x09	; 9
    1bc8:	0e 94 6d 33 	call	0x66da	; 0x66da <_ZNK6String6equalsEPKc>
    1bcc:	81 11       	cpse	r24, r1
    1bce:	87 c1       	rjmp	.+782    	; 0x1ede <loop+0xb70>
        avanzaStato(10);
      }
      
      /* CONTATTO PISTOLA BENZINA*/
      
      if  ((PINB & _BV(PB1)) && (Carburante == "B"))
    1bd0:	19 9b       	sbis	0x03, 1	; 3
    1bd2:	c5 c0       	rjmp	.+394    	; 0x1d5e <loop+0x9f0>
    1bd4:	6f e8       	ldi	r22, 0x8F	; 143
    1bd6:	75 e0       	ldi	r23, 0x05	; 5
    1bd8:	8b e1       	ldi	r24, 0x1B	; 27
    1bda:	99 e0       	ldi	r25, 0x09	; 9
    1bdc:	0e 94 6d 33 	call	0x66da	; 0x66da <_ZNK6String6equalsEPKc>
    1be0:	81 11       	cpse	r24, r1
    1be2:	aa c1       	rjmp	.+852    	; 0x1f38 <loop+0xbca>
    1be4:	bc c0       	rjmp	.+376    	; 0x1d5e <loop+0x9f0>
      /**************************************
       Control_WIFI(1);
       _delay_ms(2000);
      /**************************************/
      
      righeDisplay[1] =  "";      
    1be6:	64 e8       	ldi	r22, 0x84	; 132
    1be8:	71 e0       	ldi	r23, 0x01	; 1
    1bea:	8d ef       	ldi	r24, 0xFD	; 253
    1bec:	98 e0       	ldi	r25, 0x08	; 8
    1bee:	0e 94 37 32 	call	0x646e	; 0x646e <_ZN6StringaSEPKc>
      righeDisplay[2] = "Invio........";
    1bf2:	69 e0       	ldi	r22, 0x09	; 9
    1bf4:	76 e0       	ldi	r23, 0x06	; 6
    1bf6:	83 e0       	ldi	r24, 0x03	; 3
    1bf8:	99 e0       	ldi	r25, 0x09	; 9
    1bfa:	0e 94 37 32 	call	0x646e	; 0x646e <_ZN6StringaSEPKc>
      righeDisplay[3] =  "";
    1bfe:	64 e8       	ldi	r22, 0x84	; 132
    1c00:	71 e0       	ldi	r23, 0x01	; 1
    1c02:	89 e0       	ldi	r24, 0x09	; 9
    1c04:	99 e0       	ldi	r25, 0x09	; 9
    1c06:	0e 94 37 32 	call	0x646e	; 0x646e <_ZN6StringaSEPKc>
          
      if (BIT_IS_CLEAR(PORTC,4)) 
    1c0a:	44 99       	sbic	0x08, 4	; 8
    1c0c:	a8 c0       	rjmp	.+336    	; 0x1d5e <loop+0x9f0>
      {
        displayLCD(righeDisplay,stato_procedura,10);  
    1c0e:	60 91 4d 09 	lds	r22, 0x094D	; 0x80094d <stato_procedura>
    1c12:	70 91 4e 09 	lds	r23, 0x094E	; 0x80094e <stato_procedura+0x1>
    1c16:	4a e0       	ldi	r20, 0x0A	; 10
    1c18:	50 e0       	ldi	r21, 0x00	; 0
    1c1a:	87 ef       	ldi	r24, 0xF7	; 247
    1c1c:	98 e0       	ldi	r25, 0x08	; 8
    1c1e:	0e 94 47 03 	call	0x68e	; 0x68e <_Z10displayLCDP6Stringii>

        Messaggio = ""; 
    1c22:	64 e8       	ldi	r22, 0x84	; 132
    1c24:	71 e0       	ldi	r23, 0x01	; 1
    1c26:	8f e0       	ldi	r24, 0x0F	; 15
    1c28:	99 e0       	ldi	r25, 0x09	; 9
    1c2a:	0e 94 37 32 	call	0x646e	; 0x646e <_ZN6StringaSEPKc>
    1c2e:	01 e2       	ldi	r16, 0x21	; 33
    1c30:	19 e0       	ldi	r17, 0x09	; 9
    1c32:	89 e3       	ldi	r24, 0x39	; 57
    1c34:	e8 2e       	mov	r14, r24
    1c36:	89 e0       	ldi	r24, 0x09	; 9
    1c38:	f8 2e       	mov	r15, r24
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
    1c3a:	b8 01       	movw	r22, r16
    1c3c:	ce 01       	movw	r24, r28
    1c3e:	01 96       	adiw	r24, 0x01	; 1
    1c40:	0e 94 24 32 	call	0x6448	; 0x6448 <_ZN6StringC1ERKS_>
        
        for (int k = 0;k<4;k++)
          Messaggio.concat(RaccoltaDati[k]+";");  
    1c44:	67 e1       	ldi	r22, 0x17	; 23
    1c46:	76 e0       	ldi	r23, 0x06	; 6
    1c48:	ce 01       	movw	r24, r28
    1c4a:	01 96       	adiw	r24, 0x01	; 1
    1c4c:	0e 94 4a 33 	call	0x6694	; 0x6694 <_ZplRK15StringSumHelperPKc>
    1c50:	bc 01       	movw	r22, r24
    1c52:	8f e0       	ldi	r24, 0x0F	; 15
    1c54:	99 e0       	ldi	r25, 0x09	; 9
    1c56:	0e 94 13 33 	call	0x6626	; 0x6626 <_ZN6String6concatERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1c5a:	ce 01       	movw	r24, r28
    1c5c:	01 96       	adiw	r24, 0x01	; 1
    1c5e:	0e 94 51 31 	call	0x62a2	; 0x62a2 <_ZN6StringD1Ev>
    1c62:	0a 5f       	subi	r16, 0xFA	; 250
    1c64:	1f 4f       	sbci	r17, 0xFF	; 255
      {
        displayLCD(righeDisplay,stato_procedura,10);  

        Messaggio = ""; 
        
        for (int k = 0;k<4;k++)
    1c66:	e0 16       	cp	r14, r16
    1c68:	f1 06       	cpc	r15, r17
    1c6a:	39 f7       	brne	.-50     	; 0x1c3a <loop+0x8cc>
    1c6c:	9f ef       	ldi	r25, 0xFF	; 255
    1c6e:	23 ed       	ldi	r18, 0xD3	; 211
    1c70:	30 e3       	ldi	r19, 0x30	; 48
    1c72:	91 50       	subi	r25, 0x01	; 1
    1c74:	20 40       	sbci	r18, 0x00	; 0
    1c76:	30 40       	sbci	r19, 0x00	; 0
    1c78:	e1 f7       	brne	.-8      	; 0x1c72 <loop+0x904>
    1c7a:	00 c0       	rjmp	.+0      	; 0x1c7c <loop+0x90e>
    1c7c:	00 00       	nop
          Messaggio.concat(RaccoltaDati[k]+";");  
      
    _delay_ms(1000);      
        
    if (PostErogazione(5001,serverREST,clientLOCAL,Messaggio))
    1c7e:	6f e0       	ldi	r22, 0x0F	; 15
    1c80:	79 e0       	ldi	r23, 0x09	; 9
    1c82:	ce 01       	movw	r24, r28
    1c84:	0e 96       	adiw	r24, 0x0e	; 14
    1c86:	0e 94 24 32 	call	0x6448	; 0x6448 <_ZN6StringC1ERKS_>
    1c8a:	80 91 d4 08 	lds	r24, 0x08D4	; 0x8008d4 <clientLOCAL+0x2>
    1c8e:	90 91 d5 08 	lds	r25, 0x08D5	; 0x8008d5 <clientLOCAL+0x3>
    1c92:	9c 83       	std	Y+4, r25	; 0x04
    1c94:	8b 83       	std	Y+3, r24	; 0x03
    1c96:	80 91 d6 08 	lds	r24, 0x08D6	; 0x8008d6 <clientLOCAL+0x4>
    1c9a:	90 91 d7 08 	lds	r25, 0x08D7	; 0x8008d7 <clientLOCAL+0x5>
    1c9e:	a0 91 d8 08 	lds	r26, 0x08D8	; 0x8008d8 <clientLOCAL+0x6>
    1ca2:	b0 91 d9 08 	lds	r27, 0x08D9	; 0x8008d9 <clientLOCAL+0x7>
    1ca6:	8d 83       	std	Y+5, r24	; 0x05
    1ca8:	9e 83       	std	Y+6, r25	; 0x06
    1caa:	af 83       	std	Y+7, r26	; 0x07
    1cac:	b8 87       	std	Y+8, r27	; 0x08
    1cae:	80 91 da 08 	lds	r24, 0x08DA	; 0x8008da <clientLOCAL+0x8>
    1cb2:	90 91 db 08 	lds	r25, 0x08DB	; 0x8008db <clientLOCAL+0x9>
    1cb6:	a0 91 dc 08 	lds	r26, 0x08DC	; 0x8008dc <clientLOCAL+0xa>
    1cba:	b0 91 dd 08 	lds	r27, 0x08DD	; 0x8008dd <clientLOCAL+0xb>
    1cbe:	89 87       	std	Y+9, r24	; 0x09
    1cc0:	9a 87       	std	Y+10, r25	; 0x0a
    1cc2:	ab 87       	std	Y+11, r26	; 0x0b
    1cc4:	bc 87       	std	Y+12, r27	; 0x0c
    1cc6:	8a ef       	ldi	r24, 0xFA	; 250
    1cc8:	97 e0       	ldi	r25, 0x07	; 7
    1cca:	9a 83       	std	Y+2, r25	; 0x02
    1ccc:	89 83       	std	Y+1, r24	; 0x01
    1cce:	80 91 de 08 	lds	r24, 0x08DE	; 0x8008de <clientLOCAL+0xc>
    1cd2:	8d 87       	std	Y+13, r24	; 0x0d
    1cd4:	9e 01       	movw	r18, r28
    1cd6:	22 5f       	subi	r18, 0xF2	; 242
    1cd8:	3f 4f       	sbci	r19, 0xFF	; 255
    1cda:	ae 01       	movw	r20, r28
    1cdc:	4f 5f       	subi	r20, 0xFF	; 255
    1cde:	5f 4f       	sbci	r21, 0xFF	; 255
    1ce0:	6c e2       	ldi	r22, 0x2C	; 44
    1ce2:	71 e0       	ldi	r23, 0x01	; 1
    1ce4:	89 e8       	ldi	r24, 0x89	; 137
    1ce6:	93 e1       	ldi	r25, 0x13	; 19
    1ce8:	6c d8       	rcall	.-3880   	; 0xdc2 <_Z14PostErogazioneiPc14EthernetClient6String>
    1cea:	18 2f       	mov	r17, r24
    1cec:	ce 01       	movw	r24, r28
    1cee:	0e 96       	adiw	r24, 0x0e	; 14
    1cf0:	0e 94 51 31 	call	0x62a2	; 0x62a2 <_ZN6StringD1Ev>
    1cf4:	11 23       	and	r17, r17
    1cf6:	39 f1       	breq	.+78     	; 0x1d46 <loop+0x9d8>
    {
      disable_ETH();
    1cf8:	0e 94 92 01 	call	0x324	; 0x324 <_ZL11disable_ETHv>
    
      righeDisplay[1] = "";
    1cfc:	64 e8       	ldi	r22, 0x84	; 132
    1cfe:	71 e0       	ldi	r23, 0x01	; 1
    1d00:	8d ef       	ldi	r24, 0xFD	; 253
    1d02:	98 e0       	ldi	r25, 0x08	; 8
    1d04:	0e 94 37 32 	call	0x646e	; 0x646e <_ZN6StringaSEPKc>
      righeDisplay[2] = " Dati Inviati ";
    1d08:	69 e1       	ldi	r22, 0x19	; 25
    1d0a:	76 e0       	ldi	r23, 0x06	; 6
    1d0c:	83 e0       	ldi	r24, 0x03	; 3
    1d0e:	99 e0       	ldi	r25, 0x09	; 9
    1d10:	0e 94 37 32 	call	0x646e	; 0x646e <_ZN6StringaSEPKc>
      righeDisplay[3] =  "";
    1d14:	64 e8       	ldi	r22, 0x84	; 132
    1d16:	71 e0       	ldi	r23, 0x01	; 1
    1d18:	89 e0       	ldi	r24, 0x09	; 9
    1d1a:	99 e0       	ldi	r25, 0x09	; 9
    1d1c:	0e 94 37 32 	call	0x646e	; 0x646e <_ZN6StringaSEPKc>
    
      displayLCD(righeDisplay,stato_procedura,100);
    1d20:	60 91 4d 09 	lds	r22, 0x094D	; 0x80094d <stato_procedura>
    1d24:	70 91 4e 09 	lds	r23, 0x094E	; 0x80094e <stato_procedura+0x1>
    1d28:	44 e6       	ldi	r20, 0x64	; 100
    1d2a:	50 e0       	ldi	r21, 0x00	; 0
    1d2c:	87 ef       	ldi	r24, 0xF7	; 247
    1d2e:	98 e0       	ldi	r25, 0x08	; 8
    1d30:	0e 94 47 03 	call	0x68e	; 0x68e <_Z10displayLCDP6Stringii>
    1d34:	8f ef       	ldi	r24, 0xFF	; 255
    1d36:	99 ef       	ldi	r25, 0xF9	; 249
    1d38:	20 e0       	ldi	r18, 0x00	; 0
    1d3a:	81 50       	subi	r24, 0x01	; 1
    1d3c:	90 40       	sbci	r25, 0x00	; 0
    1d3e:	20 40       	sbci	r18, 0x00	; 0
    1d40:	e1 f7       	brne	.-8      	; 0x1d3a <loop+0x9cc>
    1d42:	00 c0       	rjmp	.+0      	; 0x1d44 <loop+0x9d6>
    
      _delay_ms(20);
    }
    
  disable_ETH();
    1d44:	00 00       	nop
    1d46:	0e 94 92 01 	call	0x324	; 0x324 <_ZL11disable_ETHv>
  avanzaStato(TmaxSalvataggio);
    1d4a:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <TmaxSalvataggio>
    1d4e:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <TmaxSalvataggio+0x1>
    1d52:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <TmaxSalvataggio+0x2>
    1d56:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <TmaxSalvataggio+0x3>
   Azzera();    
    }
    break;
    case 9:
    {        
      Azzera();    
    1d5a:	8c ce       	rjmp	.-744    	; 0x1a74 <loop+0x706>
    1d5c:	6a da       	rcall	.-2860   	; 0x1232 <_Z6Azzerav>
    {      
    }
    break;
  }

  nowTimer = DS3231M.now();
    1d5e:	69 eb       	ldi	r22, 0xB9	; 185
    1d60:	78 e0       	ldi	r23, 0x08	; 8
    1d62:	ce 01       	movw	r24, r28
    1d64:	01 96       	adiw	r24, 0x01	; 1
    1d66:	0e 94 a9 19 	call	0x3352	; 0x3352 <_ZN13DS3231M_Class3nowEv>
    1d6a:	86 e0       	ldi	r24, 0x06	; 6
    1d6c:	fe 01       	movw	r30, r28
    1d6e:	31 96       	adiw	r30, 0x01	; 1
    1d70:	a7 ea       	ldi	r26, 0xA7	; 167
    1d72:	b8 e0       	ldi	r27, 0x08	; 8
    1d74:	01 90       	ld	r0, Z+
    1d76:	0d 92       	st	X+, r0
    1d78:	8a 95       	dec	r24
    1d7a:	e1 f7       	brne	.-8      	; 0x1d74 <loop+0xa06>
  secs = nowTimer.secondstime();
    1d7c:	87 ea       	ldi	r24, 0xA7	; 167
    1d7e:	98 e0       	ldi	r25, 0x08	; 8
    1d80:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <_ZNK8DateTime11secondstimeEv>
    1d84:	60 93 b5 08 	sts	0x08B5, r22	; 0x8008b5 <secs>
    1d88:	70 93 b6 08 	sts	0x08B6, r23	; 0x8008b6 <secs+0x1>
    1d8c:	80 93 b7 08 	sts	0x08B7, r24	; 0x8008b7 <secs+0x2>
    1d90:	90 93 b8 08 	sts	0x08B8, r25	; 0x8008b8 <secs+0x3>
  if ((UltimoPassaggioStato+Timer-secs) <= 1) Azzera();
    1d94:	00 91 b1 08 	lds	r16, 0x08B1	; 0x8008b1 <UltimoPassaggioStato>
    1d98:	10 91 b2 08 	lds	r17, 0x08B2	; 0x8008b2 <UltimoPassaggioStato+0x1>
    1d9c:	20 91 b3 08 	lds	r18, 0x08B3	; 0x8008b3 <UltimoPassaggioStato+0x2>
    1da0:	30 91 b4 08 	lds	r19, 0x08B4	; 0x8008b4 <UltimoPassaggioStato+0x3>
    1da4:	c0 90 ad 08 	lds	r12, 0x08AD	; 0x8008ad <Timer>
    1da8:	d0 90 ae 08 	lds	r13, 0x08AE	; 0x8008ae <Timer+0x1>
    1dac:	e0 90 af 08 	lds	r14, 0x08AF	; 0x8008af <Timer+0x2>
    1db0:	f0 90 b0 08 	lds	r15, 0x08B0	; 0x8008b0 <Timer+0x3>
    1db4:	0c 0d       	add	r16, r12
    1db6:	1d 1d       	adc	r17, r13
    1db8:	2e 1d       	adc	r18, r14
    1dba:	3f 1d       	adc	r19, r15
    1dbc:	68 01       	movw	r12, r16
    1dbe:	79 01       	movw	r14, r18
    1dc0:	c6 1a       	sub	r12, r22
    1dc2:	d7 0a       	sbc	r13, r23
    1dc4:	e8 0a       	sbc	r14, r24
    1dc6:	f9 0a       	sbc	r15, r25
    1dc8:	d7 01       	movw	r26, r14
    1dca:	c6 01       	movw	r24, r12
    1dcc:	02 97       	sbiw	r24, 0x02	; 2
    1dce:	a1 05       	cpc	r26, r1
    1dd0:	b1 05       	cpc	r27, r1
    1dd2:	08 f0       	brcs	.+2      	; 0x1dd6 <loop+0xa68>
    1dd4:	dc c0       	rjmp	.+440    	; 0x1f8e <loop+0xc20>
    1dd6:	2d da       	rcall	.-2982   	; 0x1232 <_Z6Azzerav>

}
    1dd8:	da c0       	rjmp	.+436    	; 0x1f8e <loop+0xc20>
		String ATe = "ERRORE";
		if (!alreadyTimbrata) {ATe = GetCodeRfidATe(); Buzzer(2,100);}
            
        if ((ATe != "ERRORE") && (BIT_IS_CLEAR(PORTC,4)))
        { 
           Serial.println("");
    1dda:	64 e8       	ldi	r22, 0x84	; 132
    1ddc:	71 e0       	ldi	r23, 0x01	; 1
    1dde:	8c ef       	ldi	r24, 0xFC	; 252
    1de0:	9a e0       	ldi	r25, 0x0A	; 10
    1de2:	0e 94 22 2f 	call	0x5e44	; 0x5e44 <_ZN5Print7printlnEPKc>
           Serial.print("***************************************************************");
    1de6:	68 e2       	ldi	r22, 0x28	; 40
    1de8:	76 e0       	ldi	r23, 0x06	; 6
    1dea:	8c ef       	ldi	r24, 0xFC	; 252
    1dec:	9a e0       	ldi	r25, 0x0A	; 10
    1dee:	0e 94 f7 2e 	call	0x5dee	; 0x5dee <_ZN5Print5printEPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1df2:	68 e6       	ldi	r22, 0x68	; 104
    1df4:	76 e0       	ldi	r23, 0x06	; 6
    1df6:	ce 01       	movw	r24, r28
    1df8:	01 96       	adiw	r24, 0x01	; 1
    1dfa:	0e 94 b8 31 	call	0x6370	; 0x6370 <_ZN6StringC1EPKc>
           Serial.println(" Tessera ID : " + ATe);
    1dfe:	be 01       	movw	r22, r28
    1e00:	6a 5e       	subi	r22, 0xEA	; 234
    1e02:	7f 4f       	sbci	r23, 0xFF	; 255
    1e04:	ce 01       	movw	r24, r28
    1e06:	01 96       	adiw	r24, 0x01	; 1
    1e08:	0e 94 39 33 	call	0x6672	; 0x6672 <_ZplRK15StringSumHelperRK6String>
    1e0c:	bc 01       	movw	r22, r24
    1e0e:	8c ef       	ldi	r24, 0xFC	; 252
    1e10:	9a e0       	ldi	r25, 0x0A	; 10
    1e12:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1e16:	ce 01       	movw	r24, r28
    1e18:	01 96       	adiw	r24, 0x01	; 1
    1e1a:	0e 94 51 31 	call	0x62a2	; 0x62a2 <_ZN6StringD1Ev>
           Serial.print("***************************************************************");
    1e1e:	68 e2       	ldi	r22, 0x28	; 40
    1e20:	76 e0       	ldi	r23, 0x06	; 6
    1e22:	8c ef       	ldi	r24, 0xFC	; 252
    1e24:	9a e0       	ldi	r25, 0x0A	; 10
    1e26:	0e 94 f7 2e 	call	0x5dee	; 0x5dee <_ZN5Print5printEPKc>
           Serial.println("Riconoscimento Tessera .............");
    1e2a:	67 e7       	ldi	r22, 0x77	; 119
    1e2c:	76 e0       	ldi	r23, 0x06	; 6
    1e2e:	8c ef       	ldi	r24, 0xFC	; 252
    1e30:	9a e0       	ldi	r25, 0x0A	; 10
    1e32:	0e 94 22 2f 	call	0x5e44	; 0x5e44 <_ZN5Print7printlnEPKc>
                     
           RaccoltaDati[0] = ATe;
    1e36:	be 01       	movw	r22, r28
    1e38:	6a 5e       	subi	r22, 0xEA	; 234
    1e3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e3c:	81 e2       	ldi	r24, 0x21	; 33
    1e3e:	99 e0       	ldi	r25, 0x09	; 9
    1e40:	0e 94 0f 32 	call	0x641e	; 0x641e <_ZN6StringaSERKS_>
           
           lcd.backlight();
    1e44:	84 e7       	ldi	r24, 0x74	; 116
    1e46:	99 e0       	ldi	r25, 0x09	; 9
    1e48:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <_ZN3LCD9backlightEv>
           lcd.display();          
    1e4c:	84 e7       	ldi	r24, 0x74	; 116
    1e4e:	99 e0       	ldi	r25, 0x09	; 9
    1e50:	0e 94 b5 26 	call	0x4d6a	; 0x4d6a <_ZN3LCD7displayEv>
    1e54:	8f e3       	ldi	r24, 0x3F	; 63
    1e56:	9c e9       	ldi	r25, 0x9C	; 156
    1e58:	01 97       	sbiw	r24, 0x01	; 1
    1e5a:	f1 f7       	brne	.-4      	; 0x1e58 <loop+0xaea>
    1e5c:	00 c0       	rjmp	.+0      	; 0x1e5e <loop+0xaf0>
    1e5e:	00 00       	nop
           _delay_ms(10);               
		   
		   righeDisplay[1] = "  RICONOSCIMENTO ";
    1e60:	6c e9       	ldi	r22, 0x9C	; 156
    1e62:	76 e0       	ldi	r23, 0x06	; 6
    1e64:	8d ef       	ldi	r24, 0xFD	; 253
    1e66:	98 e0       	ldi	r25, 0x08	; 8
    1e68:	0e 94 37 32 	call	0x646e	; 0x646e <_ZN6StringaSEPKc>
		   righeDisplay[2] = ".....In Corso.....";
    1e6c:	6e ea       	ldi	r22, 0xAE	; 174
    1e6e:	76 e0       	ldi	r23, 0x06	; 6
    1e70:	83 e0       	ldi	r24, 0x03	; 3
    1e72:	99 e0       	ldi	r25, 0x09	; 9
    1e74:	0e 94 37 32 	call	0x646e	; 0x646e <_ZN6StringaSEPKc>
		   //righeDisplay[3] = "   Rfid: " + ATe;
		   righeDisplay[3] = "Attendere.........";
    1e78:	61 ec       	ldi	r22, 0xC1	; 193
    1e7a:	76 e0       	ldi	r23, 0x06	; 6
    1e7c:	89 e0       	ldi	r24, 0x09	; 9
    1e7e:	99 e0       	ldi	r25, 0x09	; 9
    1e80:	0e 94 37 32 	call	0x646e	; 0x646e <_ZN6StringaSEPKc>
		       
		   displayLCD(righeDisplay,stato_procedura,100);   
    1e84:	60 91 4d 09 	lds	r22, 0x094D	; 0x80094d <stato_procedura>
    1e88:	70 91 4e 09 	lds	r23, 0x094E	; 0x80094e <stato_procedura+0x1>
    1e8c:	44 e6       	ldi	r20, 0x64	; 100
    1e8e:	50 e0       	ldi	r21, 0x00	; 0
    1e90:	87 ef       	ldi	r24, 0xF7	; 247
    1e92:	98 e0       	ldi	r25, 0x08	; 8
    1e94:	0e 94 47 03 	call	0x68e	; 0x68e <_Z10displayLCDP6Stringii>
      
           InizializzaEthernet();
    1e98:	0e 94 94 01 	call	0x328	; 0x328 <_Z19InizializzaEthernetv>
    1e9c:	9f ef       	ldi	r25, 0xFF	; 255
    1e9e:	23 ed       	ldi	r18, 0xD3	; 211
    1ea0:	30 e3       	ldi	r19, 0x30	; 48
    1ea2:	91 50       	subi	r25, 0x01	; 1
    1ea4:	20 40       	sbci	r18, 0x00	; 0
    1ea6:	30 40       	sbci	r19, 0x00	; 0
    1ea8:	e1 f7       	brne	.-8      	; 0x1ea2 <loop+0xb34>
    1eaa:	00 c0       	rjmp	.+0      	; 0x1eac <loop+0xb3e>
    1eac:	00 00       	nop
    1eae:	2f cb       	rjmp	.-2466   	; 0x150e <loop+0x1a0>
		  Serial.println("TIPO CARBURANTE: " + mezzo.Carb);    
		  Serial.println("TARGA: " + mezzo.TARGA);              

		  Carburante = mezzo.Carb;                 
		  if ((mezzo.Carb == "B") || (mezzo.Carb == "D")) {
			RaccoltaDati[1] = mezzo.TARGA;
    1eb0:	6c e9       	ldi	r22, 0x9C	; 156
    1eb2:	79 e0       	ldi	r23, 0x09	; 9
    1eb4:	87 e2       	ldi	r24, 0x27	; 39
    1eb6:	99 e0       	ldi	r25, 0x09	; 9
    1eb8:	0e 94 0f 32 	call	0x641e	; 0x641e <_ZN6StringaSERKS_>
			RaccoltaDati[2] = mezzo.Carb;
    1ebc:	66 e9       	ldi	r22, 0x96	; 150
    1ebe:	79 e0       	ldi	r23, 0x09	; 9
    1ec0:	8d e2       	ldi	r24, 0x2D	; 45
    1ec2:	99 e0       	ldi	r25, 0x09	; 9
    1ec4:	0e 94 0f 32 	call	0x641e	; 0x641e <_ZN6StringaSERKS_>
			avanzaStato(TselDistributore); 
    1ec8:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <TselDistributore>
    1ecc:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <TselDistributore+0x1>
    1ed0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <TselDistributore+0x2>
    1ed4:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <TselDistributore+0x3>
    1ed8:	0e 94 e7 03 	call	0x7ce	; 0x7ce <_Z11avanzaStatom>
    1edc:	8b cd       	rjmp	.-1258   	; 0x19f4 <loop+0x686>

      /* CONTATTO PISTOLA DIESEL*/
      
      if ((PINA & _BV(PA1)) && (Carburante == "D"))
      {       
        RaccoltaDati[3] = String(lt);
    1ede:	22 e0       	ldi	r18, 0x02	; 2
    1ee0:	b7 01       	movw	r22, r14
    1ee2:	a6 01       	movw	r20, r12
    1ee4:	ce 01       	movw	r24, r28
    1ee6:	01 96       	adiw	r24, 0x01	; 1
    1ee8:	0e 94 b9 32 	call	0x6572	; 0x6572 <_ZN6StringC1Edh>
    1eec:	be 01       	movw	r22, r28
    1eee:	6f 5f       	subi	r22, 0xFF	; 255
    1ef0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ef2:	83 e3       	ldi	r24, 0x33	; 51
    1ef4:	99 e0       	ldi	r25, 0x09	; 9
    1ef6:	0e 94 2c 32 	call	0x6458	; 0x6458 <_ZN6StringaSEOS_>
    1efa:	ce 01       	movw	r24, r28
    1efc:	01 96       	adiw	r24, 0x01	; 1
        
        StatoAttuale = "STOP EROGAZIONE";
    1efe:	0e 94 51 31 	call	0x62a2	; 0x62a2 <_ZN6StringD1Ev>
    1f02:	64 ed       	ldi	r22, 0xD4	; 212
    1f04:	76 e0       	ldi	r23, 0x06	; 6
    1f06:	87 e5       	ldi	r24, 0x57	; 87
    1f08:	99 e0       	ldi	r25, 0x09	; 9
        Rele_Abilitazione2(1,7); //  apri relè
    1f0a:	0e 94 37 32 	call	0x646e	; 0x646e <_ZN6StringaSEPKc>
    1f0e:	67 e0       	ldi	r22, 0x07	; 7
    1f10:	70 e0       	ldi	r23, 0x00	; 0
    1f12:	81 e0       	ldi	r24, 0x01	; 1
    1f14:	90 e0       	ldi	r25, 0x00	; 0
        Rele_Abilitazione1(1,7); //  apri relè  
    1f16:	36 d9       	rcall	.-3476   	; 0x1184 <_Z18Rele_Abilitazione2ii>
    1f18:	67 e0       	ldi	r22, 0x07	; 7
    1f1a:	70 e0       	ldi	r23, 0x00	; 0
    1f1c:	81 e0       	ldi	r24, 0x01	; 1
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	f6 d8       	rcall	.-3604   	; 0x110e <_Z18Rele_Abilitazione1ii>
        TOGGLE_BIT(PORTA,1);      
    1f22:	92 b1       	in	r25, 0x02	; 2
    1f24:	82 e0       	ldi	r24, 0x02	; 2
    1f26:	89 27       	eor	r24, r25
    1f28:	82 b9       	out	0x02, r24	; 2
        avanzaStato(10);
    1f2a:	6a e0       	ldi	r22, 0x0A	; 10
    1f2c:	70 e0       	ldi	r23, 0x00	; 0
    1f2e:	80 e0       	ldi	r24, 0x00	; 0
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	0e 94 e7 03 	call	0x7ce	; 0x7ce <_Z11avanzaStatom>
    1f36:	4c ce       	rjmp	.-872    	; 0x1bd0 <loop+0x862>
      
      /* CONTATTO PISTOLA BENZINA*/
      
      if  ((PINB & _BV(PB1)) && (Carburante == "B"))
      {
        RaccoltaDati[3] = String(lt);
    1f38:	22 e0       	ldi	r18, 0x02	; 2
    1f3a:	b7 01       	movw	r22, r14
    1f3c:	a6 01       	movw	r20, r12
    1f3e:	ce 01       	movw	r24, r28
    1f40:	01 96       	adiw	r24, 0x01	; 1
    1f42:	0e 94 b9 32 	call	0x6572	; 0x6572 <_ZN6StringC1Edh>
    1f46:	be 01       	movw	r22, r28
    1f48:	6f 5f       	subi	r22, 0xFF	; 255
    1f4a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f4c:	83 e3       	ldi	r24, 0x33	; 51
    1f4e:	99 e0       	ldi	r25, 0x09	; 9
    1f50:	0e 94 2c 32 	call	0x6458	; 0x6458 <_ZN6StringaSEOS_>
    1f54:	ce 01       	movw	r24, r28
    1f56:	01 96       	adiw	r24, 0x01	; 1
        
        StatoAttuale = "STOP EROGAZIONE";
    1f58:	0e 94 51 31 	call	0x62a2	; 0x62a2 <_ZN6StringD1Ev>
    1f5c:	64 ed       	ldi	r22, 0xD4	; 212
    1f5e:	76 e0       	ldi	r23, 0x06	; 6
    1f60:	87 e5       	ldi	r24, 0x57	; 87
    1f62:	99 e0       	ldi	r25, 0x09	; 9
        Rele_Abilitazione2(1,7); //  apri relè
    1f64:	0e 94 37 32 	call	0x646e	; 0x646e <_ZN6StringaSEPKc>
    1f68:	67 e0       	ldi	r22, 0x07	; 7
    1f6a:	70 e0       	ldi	r23, 0x00	; 0
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
        Rele_Abilitazione1(1,7); //  apri relè        
    1f70:	09 d9       	rcall	.-3566   	; 0x1184 <_Z18Rele_Abilitazione2ii>
    1f72:	67 e0       	ldi	r22, 0x07	; 7
    1f74:	70 e0       	ldi	r23, 0x00	; 0
    1f76:	81 e0       	ldi	r24, 0x01	; 1
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	c9 d8       	rcall	.-3694   	; 0x110e <_Z18Rele_Abilitazione1ii>
        avanzaStato(TmaxInviodati);
    1f7c:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <TmaxInviodati>
    1f80:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <TmaxInviodati+0x1>
    1f84:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <TmaxInviodati+0x2>
    1f88:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <TmaxInviodati+0x3>
    1f8c:	73 cd       	rjmp	.-1306   	; 0x1a74 <loop+0x706>

  nowTimer = DS3231M.now();
  secs = nowTimer.secondstime();
  if ((UltimoPassaggioStato+Timer-secs) <= 1) Azzera();

}
    1f8e:	a3 96       	adiw	r28, 0x23	; 35
    1f90:	0f b6       	in	r0, 0x3f	; 63
    1f92:	f8 94       	cli
    1f94:	de bf       	out	0x3e, r29	; 62
    1f96:	0f be       	out	0x3f, r0	; 63
    1f98:	cd bf       	out	0x3d, r28	; 61
    1f9a:	df 91       	pop	r29
    1f9c:	cf 91       	pop	r28
    1f9e:	1f 91       	pop	r17
    1fa0:	0f 91       	pop	r16
    1fa2:	ff 90       	pop	r15
    1fa4:	ef 90       	pop	r14
    1fa6:	df 90       	pop	r13
    1fa8:	cf 90       	pop	r12
    1faa:	08 95       	ret

00001fac <__vector_4>:

/********************FINE LOOP PROCEDURA************************************/

// interrupt per conteggio impulsi

ISR(PCINT0_vect) {
    1fac:	1f 92       	push	r1
    1fae:	0f 92       	push	r0
    1fb0:	0f b6       	in	r0, 0x3f	; 63
    1fb2:	0f 92       	push	r0
    1fb4:	11 24       	eor	r1, r1
    1fb6:	8f 93       	push	r24
    1fb8:	9f 93       	push	r25
       if (PINA & _BV(PA5)){
    1fba:	05 9b       	sbis	0x00, 5	; 0
    1fbc:	09 c0       	rjmp	.+18     	; 0x1fd0 <__vector_4+0x24>
              impulsi++;
    1fbe:	80 91 4b 09 	lds	r24, 0x094B	; 0x80094b <impulsi>
    1fc2:	90 91 4c 09 	lds	r25, 0x094C	; 0x80094c <impulsi+0x1>
    1fc6:	01 96       	adiw	r24, 0x01	; 1
    1fc8:	90 93 4c 09 	sts	0x094C, r25	; 0x80094c <impulsi+0x1>
    1fcc:	80 93 4b 09 	sts	0x094B, r24	; 0x80094b <impulsi>
       }
       if (PINA & _BV(PA6)){
    1fd0:	06 9b       	sbis	0x00, 6	; 0
    1fd2:	09 c0       	rjmp	.+18     	; 0x1fe6 <__vector_4+0x3a>
              impulsi++;
    1fd4:	80 91 4b 09 	lds	r24, 0x094B	; 0x80094b <impulsi>
    1fd8:	90 91 4c 09 	lds	r25, 0x094C	; 0x80094c <impulsi+0x1>
    1fdc:	01 96       	adiw	r24, 0x01	; 1
    1fde:	90 93 4c 09 	sts	0x094C, r25	; 0x80094c <impulsi+0x1>
    1fe2:	80 93 4b 09 	sts	0x094B, r24	; 0x80094b <impulsi>
       }
}
    1fe6:	9f 91       	pop	r25
    1fe8:	8f 91       	pop	r24
    1fea:	0f 90       	pop	r0
    1fec:	0f be       	out	0x3f, r0	; 63
    1fee:	0f 90       	pop	r0
    1ff0:	1f 90       	pop	r1
    1ff2:	18 95       	reti

00001ff4 <__vector_7>:

// interrupt per pulsanti abilitazione diesele benzina

ISR(PCINT3_vect) {    
    1ff4:	1f 92       	push	r1
    1ff6:	0f 92       	push	r0
    1ff8:	0f b6       	in	r0, 0x3f	; 63
    1ffa:	0f 92       	push	r0
    1ffc:	11 24       	eor	r1, r1
    1ffe:	0b b6       	in	r0, 0x3b	; 59
    2000:	0f 92       	push	r0
    2002:	2f 93       	push	r18
    2004:	3f 93       	push	r19
    2006:	4f 93       	push	r20
    2008:	5f 93       	push	r21
    200a:	6f 93       	push	r22
    200c:	7f 93       	push	r23
    200e:	8f 93       	push	r24
    2010:	9f 93       	push	r25
    2012:	af 93       	push	r26
    2014:	bf 93       	push	r27
    2016:	ef 93       	push	r30
    2018:	ff 93       	push	r31
  
  if (stato_procedura == 4)
    201a:	80 91 4d 09 	lds	r24, 0x094D	; 0x80094d <stato_procedura>
    201e:	90 91 4e 09 	lds	r25, 0x094E	; 0x80094e <stato_procedura+0x1>
    2022:	04 97       	sbiw	r24, 0x04	; 4
    2024:	09 f0       	breq	.+2      	; 0x2028 <__vector_7+0x34>
    2026:	93 c0       	rjmp	.+294    	; 0x214e <__vector_7+0x15a>
  {
    if (PIND & _BV(PD6))
    2028:	4e 9b       	sbis	0x09, 6	; 9
    202a:	30 c0       	rjmp	.+96     	; 0x208c <__vector_7+0x98>
    {   
      intConsecutivePresses++;                      // increment counter for number of presses
    202c:	80 91 a5 09 	lds	r24, 0x09A5	; 0x8009a5 <intConsecutivePresses>
    2030:	90 91 a6 09 	lds	r25, 0x09A6	; 0x8009a6 <intConsecutivePresses+0x1>
    2034:	01 96       	adiw	r24, 0x01	; 1
    2036:	90 93 a6 09 	sts	0x09A6, r25	; 0x8009a6 <intConsecutivePresses+0x1>
    203a:	80 93 a5 09 	sts	0x09A5, r24	; 0x8009a5 <intConsecutivePresses>
      if(intConsecutivePresses >= NUM_OF_CONSECUTIVE_PRESSES) 
    203e:	80 91 a5 09 	lds	r24, 0x09A5	; 0x8009a5 <intConsecutivePresses>
    2042:	90 91 a6 09 	lds	r25, 0x09A6	; 0x8009a6 <intConsecutivePresses+0x1>
    2046:	18 16       	cp	r1, r24
    2048:	19 06       	cpc	r1, r25
    204a:	bc f5       	brge	.+110    	; 0x20ba <__vector_7+0xc6>
      {     // if enough presses to constitute a press
        abilitaPulser('B');
    204c:	82 e4       	ldi	r24, 0x42	; 66
    204e:	26 d8       	rcall	.-4020   	; 0x109c <_Z13abilitaPulserc>
        Rele_Abilitazione2(0,7); // chiudi relè
    2050:	67 e0       	ldi	r22, 0x07	; 7
    2052:	70 e0       	ldi	r23, 0x00	; 0
    2054:	80 e0       	ldi	r24, 0x00	; 0
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	95 d8       	rcall	.-3798   	; 0x1184 <_Z18Rele_Abilitazione2ii>
        Carburante = "B";
    205a:	6f e8       	ldi	r22, 0x8F	; 143
    205c:	75 e0       	ldi	r23, 0x05	; 5
    205e:	8b e1       	ldi	r24, 0x1B	; 27
    2060:	99 e0       	ldi	r25, 0x09	; 9
    2062:	0e 94 37 32 	call	0x646e	; 0x646e <_ZN6StringaSEPKc>
		RaccoltaDati[2] = Carburante;
    2066:	6b e1       	ldi	r22, 0x1B	; 27
    2068:	79 e0       	ldi	r23, 0x09	; 9
    206a:	8d e2       	ldi	r24, 0x2D	; 45
    206c:	99 e0       	ldi	r25, 0x09	; 9
    206e:	0e 94 0f 32 	call	0x641e	; 0x641e <_ZN6StringaSERKS_>
        StatoAttuale = "BENZINA";       
    2072:	6f eb       	ldi	r22, 0xBF	; 191
    2074:	75 e0       	ldi	r23, 0x05	; 5
    2076:	87 e5       	ldi	r24, 0x57	; 87
    2078:	99 e0       	ldi	r25, 0x09	; 9
    207a:	0e 94 37 32 	call	0x646e	; 0x646e <_ZN6StringaSEPKc>
        avanzaStato(10);                            
    207e:	6a e0       	ldi	r22, 0x0A	; 10
    2080:	70 e0       	ldi	r23, 0x00	; 0
    2082:	80 e0       	ldi	r24, 0x00	; 0
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	0e 94 e7 03 	call	0x7ce	; 0x7ce <_Z11avanzaStatom>
    208a:	0f c0       	rjmp	.+30     	; 0x20aa <__vector_7+0xb6>
        intConsecutivePresses = 0;                    // and reset press counts
        intConsecutiveNonPresses = 0;
      }
    }
    else  {           // else if button is not pressed (logic low)
    intConsecutiveNonPresses++;
    208c:	80 91 a3 09 	lds	r24, 0x09A3	; 0x8009a3 <intConsecutiveNonPresses>
    2090:	90 91 a4 09 	lds	r25, 0x09A4	; 0x8009a4 <intConsecutiveNonPresses+0x1>
    2094:	01 96       	adiw	r24, 0x01	; 1
    2096:	90 93 a4 09 	sts	0x09A4, r25	; 0x8009a4 <intConsecutiveNonPresses+0x1>
    209a:	80 93 a3 09 	sts	0x09A3, r24	; 0x8009a3 <intConsecutiveNonPresses>
    if(intConsecutiveNonPresses >= NUM_OF_CONSECUTIVE_NON_PRESSES) {
    209e:	80 91 a3 09 	lds	r24, 0x09A3	; 0x8009a3 <intConsecutiveNonPresses>
    20a2:	90 91 a4 09 	lds	r25, 0x09A4	; 0x8009a4 <intConsecutiveNonPresses+0x1>
    20a6:	02 97       	sbiw	r24, 0x02	; 2
    20a8:	44 f0       	brlt	.+16     	; 0x20ba <__vector_7+0xc6>
      intConsecutivePresses = 0;                      // reset press counts
    20aa:	10 92 a6 09 	sts	0x09A6, r1	; 0x8009a6 <intConsecutivePresses+0x1>
    20ae:	10 92 a5 09 	sts	0x09A5, r1	; 0x8009a5 <intConsecutivePresses>
      intConsecutiveNonPresses = 0;
    20b2:	10 92 a4 09 	sts	0x09A4, r1	; 0x8009a4 <intConsecutiveNonPresses+0x1>
    20b6:	10 92 a3 09 	sts	0x09A3, r1	; 0x8009a3 <intConsecutiveNonPresses>
    }
    }     
      
    if (PIND & _BV(PD7))
    20ba:	4f 9b       	sbis	0x09, 7	; 9
    20bc:	31 c0       	rjmp	.+98     	; 0x2120 <__vector_7+0x12c>
    {     
      intConsecutivePresses++;                      // increment counter for number of presses
    20be:	80 91 a5 09 	lds	r24, 0x09A5	; 0x8009a5 <intConsecutivePresses>
    20c2:	90 91 a6 09 	lds	r25, 0x09A6	; 0x8009a6 <intConsecutivePresses+0x1>
    20c6:	01 96       	adiw	r24, 0x01	; 1
    20c8:	90 93 a6 09 	sts	0x09A6, r25	; 0x8009a6 <intConsecutivePresses+0x1>
    20cc:	80 93 a5 09 	sts	0x09A5, r24	; 0x8009a5 <intConsecutivePresses>
      if(intConsecutivePresses >= NUM_OF_CONSECUTIVE_PRESSES) 
    20d0:	80 91 a5 09 	lds	r24, 0x09A5	; 0x8009a5 <intConsecutivePresses>
    20d4:	90 91 a6 09 	lds	r25, 0x09A6	; 0x8009a6 <intConsecutivePresses+0x1>
    20d8:	18 16       	cp	r1, r24
    20da:	19 06       	cpc	r1, r25
    20dc:	c4 f5       	brge	.+112    	; 0x214e <__vector_7+0x15a>
      {     // if enough presses to constitute a press        
        abilitaPulser('D');
    20de:	84 e4       	ldi	r24, 0x44	; 68
    20e0:	0e 94 4e 08 	call	0x109c	; 0x109c <_Z13abilitaPulserc>
        Rele_Abilitazione1(0,7); // chiudi relè
    20e4:	67 e0       	ldi	r22, 0x07	; 7
    20e6:	70 e0       	ldi	r23, 0x00	; 0
    20e8:	80 e0       	ldi	r24, 0x00	; 0
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	10 d8       	rcall	.-4064   	; 0x110e <_Z18Rele_Abilitazione1ii>
        Carburante = "D";
    20ee:	61 e9       	ldi	r22, 0x91	; 145
    20f0:	75 e0       	ldi	r23, 0x05	; 5
    20f2:	8b e1       	ldi	r24, 0x1B	; 27
    20f4:	99 e0       	ldi	r25, 0x09	; 9
    20f6:	0e 94 37 32 	call	0x646e	; 0x646e <_ZN6StringaSEPKc>
		RaccoltaDati[2] = Carburante;
    20fa:	6b e1       	ldi	r22, 0x1B	; 27
    20fc:	79 e0       	ldi	r23, 0x09	; 9
    20fe:	8d e2       	ldi	r24, 0x2D	; 45
    2100:	99 e0       	ldi	r25, 0x09	; 9
    2102:	0e 94 0f 32 	call	0x641e	; 0x641e <_ZN6StringaSERKS_>
        StatoAttuale = "GASOLIO";
    2106:	67 ec       	ldi	r22, 0xC7	; 199
    2108:	75 e0       	ldi	r23, 0x05	; 5
    210a:	87 e5       	ldi	r24, 0x57	; 87
    210c:	99 e0       	ldi	r25, 0x09	; 9
    210e:	0e 94 37 32 	call	0x646e	; 0x646e <_ZN6StringaSEPKc>
        avanzaStato(10);
    2112:	6a e0       	ldi	r22, 0x0A	; 10
    2114:	70 e0       	ldi	r23, 0x00	; 0
    2116:	80 e0       	ldi	r24, 0x00	; 0
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	0e 94 e7 03 	call	0x7ce	; 0x7ce <_Z11avanzaStatom>
    211e:	0f c0       	rjmp	.+30     	; 0x213e <__vector_7+0x14a>
        intConsecutivePresses = 0;                    // and reset press counts
        intConsecutiveNonPresses = 0;
        }
     }
     else  {            // else if button is not pressed (logic low)
     intConsecutiveNonPresses++;
    2120:	80 91 a3 09 	lds	r24, 0x09A3	; 0x8009a3 <intConsecutiveNonPresses>
    2124:	90 91 a4 09 	lds	r25, 0x09A4	; 0x8009a4 <intConsecutiveNonPresses+0x1>
    2128:	01 96       	adiw	r24, 0x01	; 1
    212a:	90 93 a4 09 	sts	0x09A4, r25	; 0x8009a4 <intConsecutiveNonPresses+0x1>
    212e:	80 93 a3 09 	sts	0x09A3, r24	; 0x8009a3 <intConsecutiveNonPresses>
     if(intConsecutiveNonPresses >= NUM_OF_CONSECUTIVE_NON_PRESSES) {
    2132:	80 91 a3 09 	lds	r24, 0x09A3	; 0x8009a3 <intConsecutiveNonPresses>
    2136:	90 91 a4 09 	lds	r25, 0x09A4	; 0x8009a4 <intConsecutiveNonPresses+0x1>
    213a:	02 97       	sbiw	r24, 0x02	; 2
    213c:	44 f0       	brlt	.+16     	; 0x214e <__vector_7+0x15a>
       intConsecutivePresses = 0;                     // reset press counts
    213e:	10 92 a6 09 	sts	0x09A6, r1	; 0x8009a6 <intConsecutivePresses+0x1>
    2142:	10 92 a5 09 	sts	0x09A5, r1	; 0x8009a5 <intConsecutivePresses>
       intConsecutiveNonPresses = 0;
    2146:	10 92 a4 09 	sts	0x09A4, r1	; 0x8009a4 <intConsecutiveNonPresses+0x1>
    214a:	10 92 a3 09 	sts	0x09A3, r1	; 0x8009a3 <intConsecutiveNonPresses>
     }
    }
  }               
}
    214e:	ff 91       	pop	r31
    2150:	ef 91       	pop	r30
    2152:	bf 91       	pop	r27
    2154:	af 91       	pop	r26
    2156:	9f 91       	pop	r25
    2158:	8f 91       	pop	r24
    215a:	7f 91       	pop	r23
    215c:	6f 91       	pop	r22
    215e:	5f 91       	pop	r21
    2160:	4f 91       	pop	r20
    2162:	3f 91       	pop	r19
    2164:	2f 91       	pop	r18
    2166:	0f 90       	pop	r0
    2168:	0b be       	out	0x3b, r0	; 59
    216a:	0f 90       	pop	r0
    216c:	0f be       	out	0x3f, r0	; 63
    216e:	0f 90       	pop	r0
    2170:	1f 90       	pop	r1
    2172:	18 95       	reti

00002174 <_GLOBAL__sub_I_intConsecutivePresses>:
    2174:	8f 92       	push	r8
    2176:	af 92       	push	r10
    2178:	cf 92       	push	r12
    217a:	ef 92       	push	r14
    217c:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    217e:	00 e0       	ldi	r16, 0x00	; 0
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	40 e0       	ldi	r20, 0x00	; 0
    2184:	60 e0       	ldi	r22, 0x00	; 0
    2186:	87 ea       	ldi	r24, 0xA7	; 167
    2188:	99 e0       	ldi	r25, 0x09	; 9
    218a:	0e 94 64 2e 	call	0x5cc8	; 0x5cc8 <_ZN9IPAddressC1Ehhhh>
const uint8_t I2C_PCA9534_ADDR = 0x20;

volatile int intConsecutivePresses = 0;
volatile int intConsecutiveNonPresses = 0;

struct mezzoType {
    218e:	64 e8       	ldi	r22, 0x84	; 132
    2190:	71 e0       	ldi	r23, 0x01	; 1
    2192:	86 e9       	ldi	r24, 0x96	; 150
    2194:	99 e0       	ldi	r25, 0x09	; 9
    2196:	0e 94 b8 31 	call	0x6370	; 0x6370 <_ZN6StringC1EPKc>
    219a:	64 e8       	ldi	r22, 0x84	; 132
    219c:	71 e0       	ldi	r23, 0x01	; 1
    219e:	8c e9       	ldi	r24, 0x9C	; 156
    21a0:	99 e0       	ldi	r25, 0x09	; 9
    21a2:	0e 94 b8 31 	call	0x6370	; 0x6370 <_ZN6StringC1EPKc>
uint8_t uid[] = { 0, 0, 0, 0, 0, 0, 0 };       // Buffer dove memorizzo la UID del Badge
uint8_t uidLength;                             // Length of the UID (4 or 7 bytes depending on ISO14443A card type)
uint8_t uidMezzo[] = { 0, 0, 0, 0, 0, 0, 0 };  // Buffer dove memorizzo la UID del Badge Mezzo
boolean alreadyTimbrata = false;

LiquidCrystal_I2C lcd(0x27, 2, 1, 0, 4, 5, 6, 7, 3, POSITIVE);  // Set the LCD I2C address
    21a6:	1f 92       	push	r1
    21a8:	83 e0       	ldi	r24, 0x03	; 3
    21aa:	8f 93       	push	r24
    21ac:	87 e0       	ldi	r24, 0x07	; 7
    21ae:	88 2e       	mov	r8, r24
    21b0:	96 e0       	ldi	r25, 0x06	; 6
    21b2:	a9 2e       	mov	r10, r25
    21b4:	25 e0       	ldi	r18, 0x05	; 5
    21b6:	c2 2e       	mov	r12, r18
    21b8:	34 e0       	ldi	r19, 0x04	; 4
    21ba:	e3 2e       	mov	r14, r19
    21bc:	21 e0       	ldi	r18, 0x01	; 1
    21be:	42 e0       	ldi	r20, 0x02	; 2
    21c0:	67 e2       	ldi	r22, 0x27	; 39
    21c2:	84 e7       	ldi	r24, 0x74	; 116
    21c4:	99 e0       	ldi	r25, 0x09	; 9
    21c6:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhhh13t_backlighPol>
uint8_t Clessidra[8] = {0x1F, 0x11, 0x0A, 0x04, 0x04, 0x0E, 0x1F, 0x1F,}; 
NFC_PN532 nfc(PN532_IRQ, PN532_RESET);
    21ca:	43 e0       	ldi	r20, 0x03	; 3
    21cc:	64 e0       	ldi	r22, 0x04	; 4
    21ce:	8d e5       	ldi	r24, 0x5D	; 93
    21d0:	99 e0       	ldi	r25, 0x09	; 9
    21d2:	4c d3       	rcall	.+1688   	; 0x286c <_ZN9NFC_PN532C1Ehh>

String StatoAttuale ="START...";
    21d4:	64 ee       	ldi	r22, 0xE4	; 228
    21d6:	76 e0       	ldi	r23, 0x06	; 6
    21d8:	87 e5       	ldi	r24, 0x57	; 87
    21da:	99 e0       	ldi	r25, 0x09	; 9
    21dc:	0e 94 b8 31 	call	0x6370	; 0x6370 <_ZN6StringC1EPKc>
String strURLAPI = "";
    21e0:	64 e8       	ldi	r22, 0x84	; 132
    21e2:	71 e0       	ldi	r23, 0x01	; 1
    21e4:	81 e5       	ldi	r24, 0x51	; 81
    21e6:	99 e0       	ldi	r25, 0x09	; 9
    21e8:	0e 94 b8 31 	call	0x6370	; 0x6370 <_ZN6StringC1EPKc>
volatile int impulsi = 0;   // Variabile per il conteggio degli impulsi generati dal pulser

/*** GESTIONE HTTP REQUEST ***/

int HTTP_len_response = 12;
String RispostaHTTP = "";
    21ec:	64 e8       	ldi	r22, 0x84	; 132
    21ee:	71 e0       	ldi	r23, 0x01	; 1
    21f0:	85 e4       	ldi	r24, 0x45	; 69
    21f2:	99 e0       	ldi	r25, 0x09	; 9
    21f4:	0e 94 b8 31 	call	0x6370	; 0x6370 <_ZN6StringC1EPKc>

String RaccoltaDati[] = {"","","","","",""};
    21f8:	64 e8       	ldi	r22, 0x84	; 132
    21fa:	71 e0       	ldi	r23, 0x01	; 1
    21fc:	81 e2       	ldi	r24, 0x21	; 33
    21fe:	99 e0       	ldi	r25, 0x09	; 9
    2200:	0e 94 b8 31 	call	0x6370	; 0x6370 <_ZN6StringC1EPKc>
    2204:	64 e8       	ldi	r22, 0x84	; 132
    2206:	71 e0       	ldi	r23, 0x01	; 1
    2208:	87 e2       	ldi	r24, 0x27	; 39
    220a:	99 e0       	ldi	r25, 0x09	; 9
    220c:	0e 94 b8 31 	call	0x6370	; 0x6370 <_ZN6StringC1EPKc>
    2210:	64 e8       	ldi	r22, 0x84	; 132
    2212:	71 e0       	ldi	r23, 0x01	; 1
    2214:	8d e2       	ldi	r24, 0x2D	; 45
    2216:	99 e0       	ldi	r25, 0x09	; 9
    2218:	0e 94 b8 31 	call	0x6370	; 0x6370 <_ZN6StringC1EPKc>
    221c:	64 e8       	ldi	r22, 0x84	; 132
    221e:	71 e0       	ldi	r23, 0x01	; 1
    2220:	83 e3       	ldi	r24, 0x33	; 51
    2222:	99 e0       	ldi	r25, 0x09	; 9
    2224:	0e 94 b8 31 	call	0x6370	; 0x6370 <_ZN6StringC1EPKc>
    2228:	64 e8       	ldi	r22, 0x84	; 132
    222a:	71 e0       	ldi	r23, 0x01	; 1
    222c:	89 e3       	ldi	r24, 0x39	; 57
    222e:	99 e0       	ldi	r25, 0x09	; 9
    2230:	0e 94 b8 31 	call	0x6370	; 0x6370 <_ZN6StringC1EPKc>
    2234:	64 e8       	ldi	r22, 0x84	; 132
    2236:	71 e0       	ldi	r23, 0x01	; 1
    2238:	8f e3       	ldi	r24, 0x3F	; 63
    223a:	99 e0       	ldi	r25, 0x09	; 9
    223c:	0e 94 b8 31 	call	0x6370	; 0x6370 <_ZN6StringC1EPKc>
String Carburante = "X";
    2240:	66 ee       	ldi	r22, 0xE6	; 230
    2242:	74 e0       	ldi	r23, 0x04	; 4
    2244:	8b e1       	ldi	r24, 0x1B	; 27
    2246:	99 e0       	ldi	r25, 0x09	; 9
    2248:	0e 94 b8 31 	call	0x6370	; 0x6370 <_ZN6StringC1EPKc>
String Risposta = "";
    224c:	64 e8       	ldi	r22, 0x84	; 132
    224e:	71 e0       	ldi	r23, 0x01	; 1
    2250:	85 e1       	ldi	r24, 0x15	; 21
    2252:	99 e0       	ldi	r25, 0x09	; 9
    2254:	0e 94 b8 31 	call	0x6370	; 0x6370 <_ZN6StringC1EPKc>
String Messaggio = "";
    2258:	64 e8       	ldi	r22, 0x84	; 132
    225a:	71 e0       	ldi	r23, 0x01	; 1
    225c:	8f e0       	ldi	r24, 0x0F	; 15
    225e:	99 e0       	ldi	r25, 0x09	; 9
    2260:	0e 94 b8 31 	call	0x6370	; 0x6370 <_ZN6StringC1EPKc>
String righeDisplay[] = {"X","X","X","X"};
    2264:	66 ee       	ldi	r22, 0xE6	; 230
    2266:	74 e0       	ldi	r23, 0x04	; 4
    2268:	87 ef       	ldi	r24, 0xF7	; 247
    226a:	98 e0       	ldi	r25, 0x08	; 8
    226c:	0e 94 b8 31 	call	0x6370	; 0x6370 <_ZN6StringC1EPKc>
    2270:	66 ee       	ldi	r22, 0xE6	; 230
    2272:	74 e0       	ldi	r23, 0x04	; 4
    2274:	8d ef       	ldi	r24, 0xFD	; 253
    2276:	98 e0       	ldi	r25, 0x08	; 8
    2278:	0e 94 b8 31 	call	0x6370	; 0x6370 <_ZN6StringC1EPKc>
    227c:	66 ee       	ldi	r22, 0xE6	; 230
    227e:	74 e0       	ldi	r23, 0x04	; 4
    2280:	83 e0       	ldi	r24, 0x03	; 3
    2282:	99 e0       	ldi	r25, 0x09	; 9
    2284:	0e 94 b8 31 	call	0x6370	; 0x6370 <_ZN6StringC1EPKc>
    2288:	66 ee       	ldi	r22, 0xE6	; 230
    228a:	74 e0       	ldi	r23, 0x04	; 4
    228c:	89 e0       	ldi	r24, 0x09	; 9
    228e:	99 e0       	ldi	r25, 0x09	; 9
    2290:	0e 94 b8 31 	call	0x6370	; 0x6370 <_ZN6StringC1EPKc>

/********************************************************************************************/
/*                    Configurazione Rete                       */
/********************************************************************************************/
 
IPAddress ipCCEC(192, 168, 0, 50);
    2294:	02 e3       	ldi	r16, 0x32	; 50
    2296:	20 e0       	ldi	r18, 0x00	; 0
    2298:	48 ea       	ldi	r20, 0xA8	; 168
    229a:	60 ec       	ldi	r22, 0xC0	; 192
    229c:	81 ef       	ldi	r24, 0xF1	; 241
    229e:	98 e0       	ldi	r25, 0x08	; 8
    22a0:	0e 94 64 2e 	call	0x5cc8	; 0x5cc8 <_ZN9IPAddressC1Ehhhh>
IPAddress myDns(192,168,1, 21); // DNS
    22a4:	05 e1       	ldi	r16, 0x15	; 21
    22a6:	21 e0       	ldi	r18, 0x01	; 1
    22a8:	48 ea       	ldi	r20, 0xA8	; 168
    22aa:	60 ec       	ldi	r22, 0xC0	; 192
    22ac:	8b ee       	ldi	r24, 0xEB	; 235
    22ae:	98 e0       	ldi	r25, 0x08	; 8
    22b0:	0e 94 64 2e 	call	0x5cc8	; 0x5cc8 <_ZN9IPAddressC1Ehhhh>
IPAddress gateway(192, 168, 0, 1); // GATEWAY
    22b4:	01 e0       	ldi	r16, 0x01	; 1
    22b6:	20 e0       	ldi	r18, 0x00	; 0
    22b8:	48 ea       	ldi	r20, 0xA8	; 168
    22ba:	60 ec       	ldi	r22, 0xC0	; 192
    22bc:	85 ee       	ldi	r24, 0xE5	; 229
    22be:	98 e0       	ldi	r25, 0x08	; 8
    22c0:	0e 94 64 2e 	call	0x5cc8	; 0x5cc8 <_ZN9IPAddressC1Ehhhh>
IPAddress subnet(255, 255, 0, 0); // SUBNET
    22c4:	00 e0       	ldi	r16, 0x00	; 0
    22c6:	20 e0       	ldi	r18, 0x00	; 0
    22c8:	4f ef       	ldi	r20, 0xFF	; 255
    22ca:	6f ef       	ldi	r22, 0xFF	; 255
    22cc:	8f ed       	ldi	r24, 0xDF	; 223
    22ce:	98 e0       	ldi	r25, 0x08	; 8
    22d0:	0e 94 64 2e 	call	0x5cc8	; 0x5cc8 <_ZN9IPAddressC1Ehhhh>

char serverATE[]  = "wbpate-test.dipvvf.it";
char serverGAC[]  = "gacweb-test.dipvvf.it";
char serverREST[] = "geoserver.sa.dipvvf.it";

EthernetClient clientLOCAL;
    22d4:	82 ed       	ldi	r24, 0xD2	; 210
    22d6:	98 e0       	ldi	r25, 0x08	; 8
    22d8:	0e 94 52 1f 	call	0x3ea4	; 0x3ea4 <_ZN14EthernetClientC1Ev>
EthernetClient clientATE;
    22dc:	85 ec       	ldi	r24, 0xC5	; 197
    22de:	98 e0       	ldi	r25, 0x08	; 8
    22e0:	0e 94 52 1f 	call	0x3ea4	; 0x3ea4 <_ZN14EthernetClientC1Ev>

byte mac[] = {0x00, 0x0E, 0x0C, 0xB0, 0x25, 0x6F};
/********************************************************************************************/
/************ GESTIONE RTC **********/
DS3231M_Class DS3231M;  
    22e4:	89 eb       	ldi	r24, 0xB9	; 185
    22e6:	98 e0       	ldi	r25, 0x08	; 8
    22e8:	ba d7       	rcall	.+3956   	; 0x325e <_ZN13DS3231M_ClassC1Ev>
const uint8_t SPRINTF_BUFFER_SIZE =     32;  
char          inputBuffer[SPRINTF_BUFFER_SIZE];  
unsigned long secs;                            // store the seconds value
unsigned long UltimoPassaggioStato = 0;        // Timer Stati Procedura
unsigned long Timer = 0;                       // Timer
DateTime nowTimer;
    22ea:	40 e0       	ldi	r20, 0x00	; 0
    22ec:	50 e0       	ldi	r21, 0x00	; 0
    22ee:	ba 01       	movw	r22, r20
    22f0:	87 ea       	ldi	r24, 0xA7	; 167
    22f2:	98 e0       	ldi	r25, 0x08	; 8
    22f4:	48 d6       	rcall	.+3216   	; 0x2f86 <_ZN8DateTimeC1Em>
/********************************************************************************************/

const byte ROWS = 4; //four rows
const byte COLS = 4; //four columns

String TARGA = "";
    22f6:	64 e8       	ldi	r22, 0x84	; 132
    22f8:	71 e0       	ldi	r23, 0x01	; 1
    22fa:	81 ea       	ldi	r24, 0xA1	; 161
    22fc:	98 e0       	ldi	r25, 0x08	; 8
    22fe:	0e 94 b8 31 	call	0x6370	; 0x6370 <_ZN6StringC1EPKc>
  {'4','5','6','B'},
  {'7','8','9','C'},
  {'*','0','#','.'}
};

PCA9534 gpio;
    2302:	0f 90       	pop	r0
    2304:	0f 90       	pop	r0
    2306:	8e e9       	ldi	r24, 0x9E	; 158
    2308:	98 e0       	ldi	r25, 0x08	; 8
       intConsecutivePresses = 0;                     // reset press counts
       intConsecutiveNonPresses = 0;
     }
    }
  }               
}
    230a:	0f 91       	pop	r16
    230c:	ef 90       	pop	r14
    230e:	cf 90       	pop	r12
    2310:	af 90       	pop	r10
  {'4','5','6','B'},
  {'7','8','9','C'},
  {'*','0','#','.'}
};

PCA9534 gpio;
    2312:	8f 90       	pop	r8
    2314:	0b c2       	rjmp	.+1046   	; 0x272c <_ZN7PCA9534C1Ev>

00002316 <_GLOBAL__sub_D_intConsecutivePresses>:
       intConsecutivePresses = 0;                     // reset press counts
       intConsecutiveNonPresses = 0;
     }
    }
  }               
}
    2316:	cf 93       	push	r28
    2318:	df 93       	push	r29
/********************************************************************************************/

const byte ROWS = 4; //four rows
const byte COLS = 4; //four columns

String TARGA = "";
    231a:	81 ea       	ldi	r24, 0xA1	; 161
    231c:	98 e0       	ldi	r25, 0x08	; 8
    231e:	0e 94 51 31 	call	0x62a2	; 0x62a2 <_ZN6StringD1Ev>
EthernetClient clientATE;

byte mac[] = {0x00, 0x0E, 0x0C, 0xB0, 0x25, 0x6F};
/********************************************************************************************/
/************ GESTIONE RTC **********/
DS3231M_Class DS3231M;  
    2322:	89 eb       	ldi	r24, 0xB9	; 185
    2324:	98 e0       	ldi	r25, 0x08	; 8
    2326:	a2 d7       	rcall	.+3908   	; 0x326c <_ZN13DS3231M_ClassD1Ev>

String RaccoltaDati[] = {"","","","","",""};
String Carburante = "X";
String Risposta = "";
String Messaggio = "";
String righeDisplay[] = {"X","X","X","X"};
    2328:	89 e0       	ldi	r24, 0x09	; 9
    232a:	99 e0       	ldi	r25, 0x09	; 9
    232c:	0e 94 51 31 	call	0x62a2	; 0x62a2 <_ZN6StringD1Ev>
    2330:	83 e0       	ldi	r24, 0x03	; 3
    2332:	99 e0       	ldi	r25, 0x09	; 9
    2334:	0e 94 51 31 	call	0x62a2	; 0x62a2 <_ZN6StringD1Ev>
    2338:	8d ef       	ldi	r24, 0xFD	; 253
    233a:	98 e0       	ldi	r25, 0x08	; 8
    233c:	0e 94 51 31 	call	0x62a2	; 0x62a2 <_ZN6StringD1Ev>
    2340:	87 ef       	ldi	r24, 0xF7	; 247
    2342:	98 e0       	ldi	r25, 0x08	; 8
    2344:	0e 94 51 31 	call	0x62a2	; 0x62a2 <_ZN6StringD1Ev>
String RispostaHTTP = "";

String RaccoltaDati[] = {"","","","","",""};
String Carburante = "X";
String Risposta = "";
String Messaggio = "";
    2348:	8f e0       	ldi	r24, 0x0F	; 15
    234a:	99 e0       	ldi	r25, 0x09	; 9
    234c:	0e 94 51 31 	call	0x62a2	; 0x62a2 <_ZN6StringD1Ev>
int HTTP_len_response = 12;
String RispostaHTTP = "";

String RaccoltaDati[] = {"","","","","",""};
String Carburante = "X";
String Risposta = "";
    2350:	85 e1       	ldi	r24, 0x15	; 21
    2352:	99 e0       	ldi	r25, 0x09	; 9
    2354:	0e 94 51 31 	call	0x62a2	; 0x62a2 <_ZN6StringD1Ev>

int HTTP_len_response = 12;
String RispostaHTTP = "";

String RaccoltaDati[] = {"","","","","",""};
String Carburante = "X";
    2358:	8b e1       	ldi	r24, 0x1B	; 27
    235a:	99 e0       	ldi	r25, 0x09	; 9
    235c:	0e 94 51 31 	call	0x62a2	; 0x62a2 <_ZN6StringD1Ev>
/*** GESTIONE HTTP REQUEST ***/

int HTTP_len_response = 12;
String RispostaHTTP = "";

String RaccoltaDati[] = {"","","","","",""};
    2360:	c5 e4       	ldi	r28, 0x45	; 69
    2362:	d9 e0       	ldi	r29, 0x09	; 9
    2364:	26 97       	sbiw	r28, 0x06	; 6
    2366:	ce 01       	movw	r24, r28
    2368:	0e 94 51 31 	call	0x62a2	; 0x62a2 <_ZN6StringD1Ev>
    236c:	89 e0       	ldi	r24, 0x09	; 9
    236e:	c1 32       	cpi	r28, 0x21	; 33
    2370:	d8 07       	cpc	r29, r24
    2372:	c1 f7       	brne	.-16     	; 0x2364 <_GLOBAL__sub_D_intConsecutivePresses+0x4e>
volatile int impulsi = 0;   // Variabile per il conteggio degli impulsi generati dal pulser

/*** GESTIONE HTTP REQUEST ***/

int HTTP_len_response = 12;
String RispostaHTTP = "";
    2374:	85 e4       	ldi	r24, 0x45	; 69
    2376:	99 e0       	ldi	r25, 0x09	; 9
    2378:	0e 94 51 31 	call	0x62a2	; 0x62a2 <_ZN6StringD1Ev>
LiquidCrystal_I2C lcd(0x27, 2, 1, 0, 4, 5, 6, 7, 3, POSITIVE);  // Set the LCD I2C address
uint8_t Clessidra[8] = {0x1F, 0x11, 0x0A, 0x04, 0x04, 0x0E, 0x1F, 0x1F,}; 
NFC_PN532 nfc(PN532_IRQ, PN532_RESET);

String StatoAttuale ="START...";
String strURLAPI = "";
    237c:	81 e5       	ldi	r24, 0x51	; 81
    237e:	99 e0       	ldi	r25, 0x09	; 9
    2380:	0e 94 51 31 	call	0x62a2	; 0x62a2 <_ZN6StringD1Ev>

LiquidCrystal_I2C lcd(0x27, 2, 1, 0, 4, 5, 6, 7, 3, POSITIVE);  // Set the LCD I2C address
uint8_t Clessidra[8] = {0x1F, 0x11, 0x0A, 0x04, 0x04, 0x0E, 0x1F, 0x1F,}; 
NFC_PN532 nfc(PN532_IRQ, PN532_RESET);

String StatoAttuale ="START...";
    2384:	87 e5       	ldi	r24, 0x57	; 87
    2386:	99 e0       	ldi	r25, 0x09	; 9
    2388:	0e 94 51 31 	call	0x62a2	; 0x62a2 <_ZN6StringD1Ev>
const uint8_t I2C_PCA9534_ADDR = 0x20;

volatile int intConsecutivePresses = 0;
volatile int intConsecutiveNonPresses = 0;

struct mezzoType {
    238c:	8c e9       	ldi	r24, 0x9C	; 156
    238e:	99 e0       	ldi	r25, 0x09	; 9
    2390:	0e 94 51 31 	call	0x62a2	; 0x62a2 <_ZN6StringD1Ev>
    2394:	86 e9       	ldi	r24, 0x96	; 150
    2396:	99 e0       	ldi	r25, 0x09	; 9
       intConsecutivePresses = 0;                     // reset press counts
       intConsecutiveNonPresses = 0;
     }
    }
  }               
}
    2398:	df 91       	pop	r29
    239a:	cf 91       	pop	r28
const uint8_t I2C_PCA9534_ADDR = 0x20;

volatile int intConsecutivePresses = 0;
volatile int intConsecutiveNonPresses = 0;

struct mezzoType {
    239c:	0c 94 51 31 	jmp	0x62a2	; 0x62a2 <_ZN6StringD1Ev>

000023a0 <setup>:
  }
  printTab(1);
}
/************************************************************/

void setup() {
    23a0:	cf 92       	push	r12
    23a2:	df 92       	push	r13
    23a4:	ef 92       	push	r14
    23a6:	ff 92       	push	r15
    23a8:	0f 93       	push	r16
    23aa:	1f 93       	push	r17
    23ac:	cf 93       	push	r28
    23ae:	df 93       	push	r29
    23b0:	00 d0       	rcall	.+0      	; 0x23b2 <setup+0x12>
    23b2:	00 d0       	rcall	.+0      	; 0x23b4 <setup+0x14>
    23b4:	00 d0       	rcall	.+0      	; 0x23b6 <setup+0x16>
    23b6:	cd b7       	in	r28, 0x3d	; 61
    23b8:	de b7       	in	r29, 0x3e	; 62
    23ba:	2f ef       	ldi	r18, 0xFF	; 255
    23bc:	81 ee       	ldi	r24, 0xE1	; 225
    23be:	94 e0       	ldi	r25, 0x04	; 4
    23c0:	21 50       	subi	r18, 0x01	; 1
    23c2:	80 40       	sbci	r24, 0x00	; 0
    23c4:	90 40       	sbci	r25, 0x00	; 0
    23c6:	e1 f7       	brne	.-8      	; 0x23c0 <setup+0x20>
    23c8:	00 c0       	rjmp	.+0      	; 0x23ca <setup+0x2a>
    23ca:	00 00       	nop
/*********************************************************************************************/
static const uint8_t RELE1 = PORTC7;
static const uint8_t RELE2 = PORTA7;
/*********************************************************************************************/
static inline void initSS_FLASH()  { DDRB |= (1 << PB4); } // set DDRB bit 4, sets PB4 for output
static inline void initSS_ETH()    { DDRC |= (1 << PC4); } // set DDRC bit 4, sets PC4 for output
    23cc:	3c 9a       	sbi	0x07, 4	; 7
    23ce:	8f e1       	ldi	r24, 0x1F	; 31
    23d0:	9e e4       	ldi	r25, 0x4E	; 78
    23d2:	01 97       	sbiw	r24, 0x01	; 1
    23d4:	f1 f7       	brne	.-4      	; 0x23d2 <setup+0x32>
    23d6:	00 c0       	rjmp	.+0      	; 0x23d8 <setup+0x38>
    23d8:	00 00       	nop
	
	_delay_ms(100);

   initSS_ETH();
   _delay_ms(5);
   disable_ETH();
    23da:	0e 94 92 01 	call	0x324	; 0x324 <_ZL11disable_ETHv>
   
   // Serial.begin(9600);
   Serial.println(" inizio Setup ......");
    23de:	6d ee       	ldi	r22, 0xED	; 237
    23e0:	76 e0       	ldi	r23, 0x06	; 6
    23e2:	8c ef       	ldi	r24, 0xFC	; 252
    23e4:	9a e0       	ldi	r25, 0x0A	; 10
    23e6:	0e 94 22 2f 	call	0x5e44	; 0x5e44 <_ZN5Print7printlnEPKc>
 
  /*******************************************************************************************/
  DDRC |= (1 << BUZZER); // set BUZZER (PC6) for output
    23ea:	3e 9a       	sbi	0x07, 6	; 7
  DDRC |= (1 << RELE1);  // Rele1
    23ec:	3f 9a       	sbi	0x07, 7	; 7
  DDRA |= (1 << RELE2);  // Rele2   // set PA7 e PC7 come output 
    23ee:	0f 9a       	sbi	0x01, 7	; 1
    23f0:	8f e3       	ldi	r24, 0x3F	; 63
    23f2:	9c e9       	ldi	r25, 0x9C	; 156
    23f4:	01 97       	sbiw	r24, 0x01	; 1
    23f6:	f1 f7       	brne	.-4      	; 0x23f4 <setup+0x54>
    23f8:	00 c0       	rjmp	.+0      	; 0x23fa <setup+0x5a>
    23fa:	00 00       	nop
  _delay_ms(10);
  SET_BIT(PORTC,RELE1); // Apri RELE1
    23fc:	47 9a       	sbi	0x08, 7	; 8
    23fe:	8f e3       	ldi	r24, 0x3F	; 63
    2400:	9c e9       	ldi	r25, 0x9C	; 156
    2402:	01 97       	sbiw	r24, 0x01	; 1
    2404:	f1 f7       	brne	.-4      	; 0x2402 <setup+0x62>
    2406:	00 c0       	rjmp	.+0      	; 0x2408 <setup+0x68>
    2408:	00 00       	nop
  _delay_ms(10);
  SET_BIT(PORTA,RELE2); // Apri RELE2
    240a:	17 9a       	sbi	0x02, 7	; 2
  printLine(); 
    240c:	0e 94 07 02 	call	0x40e	; 0x40e <_Z9printLinev>
  
  /***************************LCD******************************/
  
  lcd.begin(20,4);         // Inizializza display LCD 20x4 e accendi e spegni 2 volte
    2410:	20 e0       	ldi	r18, 0x00	; 0
    2412:	44 e0       	ldi	r20, 0x04	; 4
    2414:	64 e1       	ldi	r22, 0x14	; 20
    2416:	84 e7       	ldi	r24, 0x74	; 116
    2418:	99 e0       	ldi	r25, 0x09	; 9
    241a:	0e 94 72 28 	call	0x50e4	; 0x50e4 <_ZN17LiquidCrystal_I2C5beginEhhh>

  // ------- 2 blinks -------------
  for(int i = 0; i< 2; i++)
  {
    lcd.backlight();
    241e:	84 e7       	ldi	r24, 0x74	; 116
    2420:	99 e0       	ldi	r25, 0x09	; 9
    2422:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <_ZN3LCD9backlightEv>
    2426:	9f ef       	ldi	r25, 0xFF	; 255
    2428:	24 e3       	ldi	r18, 0x34	; 52
    242a:	8c e0       	ldi	r24, 0x0C	; 12
    242c:	91 50       	subi	r25, 0x01	; 1
    242e:	20 40       	sbci	r18, 0x00	; 0
    2430:	80 40       	sbci	r24, 0x00	; 0
    2432:	e1 f7       	brne	.-8      	; 0x242c <setup+0x8c>
    2434:	00 c0       	rjmp	.+0      	; 0x2436 <setup+0x96>
    2436:	00 00       	nop
    _delay_ms(250);
    lcd.noBacklight();
    2438:	84 e7       	ldi	r24, 0x74	; 116
    243a:	99 e0       	ldi	r25, 0x09	; 9
    243c:	0e 94 57 26 	call	0x4cae	; 0x4cae <_ZN3LCD11noBacklightEv>
    2440:	9f ef       	ldi	r25, 0xFF	; 255
    2442:	24 e3       	ldi	r18, 0x34	; 52
    2444:	8c e0       	ldi	r24, 0x0C	; 12
    2446:	91 50       	subi	r25, 0x01	; 1
    2448:	20 40       	sbci	r18, 0x00	; 0
    244a:	80 40       	sbci	r24, 0x00	; 0
    244c:	e1 f7       	brne	.-8      	; 0x2446 <setup+0xa6>
    244e:	00 c0       	rjmp	.+0      	; 0x2450 <setup+0xb0>
    2450:	00 00       	nop
  lcd.begin(20,4);         // Inizializza display LCD 20x4 e accendi e spegni 2 volte

  // ------- 2 blinks -------------
  for(int i = 0; i< 2; i++)
  {
    lcd.backlight();
    2452:	84 e7       	ldi	r24, 0x74	; 116
    2454:	99 e0       	ldi	r25, 0x09	; 9
    2456:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <_ZN3LCD9backlightEv>
    245a:	9f ef       	ldi	r25, 0xFF	; 255
    245c:	24 e3       	ldi	r18, 0x34	; 52
    245e:	8c e0       	ldi	r24, 0x0C	; 12
    2460:	91 50       	subi	r25, 0x01	; 1
    2462:	20 40       	sbci	r18, 0x00	; 0
    2464:	80 40       	sbci	r24, 0x00	; 0
    2466:	e1 f7       	brne	.-8      	; 0x2460 <setup+0xc0>
    2468:	00 c0       	rjmp	.+0      	; 0x246a <setup+0xca>
    246a:	00 00       	nop
    _delay_ms(250);
    lcd.noBacklight();
    246c:	84 e7       	ldi	r24, 0x74	; 116
    246e:	99 e0       	ldi	r25, 0x09	; 9
    2470:	0e 94 57 26 	call	0x4cae	; 0x4cae <_ZN3LCD11noBacklightEv>
    2474:	9f ef       	ldi	r25, 0xFF	; 255
    2476:	24 e3       	ldi	r18, 0x34	; 52
    2478:	8c e0       	ldi	r24, 0x0C	; 12
    247a:	91 50       	subi	r25, 0x01	; 1
    247c:	20 40       	sbci	r18, 0x00	; 0
    247e:	80 40       	sbci	r24, 0x00	; 0
    2480:	e1 f7       	brne	.-8      	; 0x247a <setup+0xda>
    2482:	00 c0       	rjmp	.+0      	; 0x2484 <setup+0xe4>
    2484:	00 00       	nop
    _delay_ms(250);
  }

  lcd.createChar(1, Clessidra); // Creo CHAR Clessidra
    2486:	4d e5       	ldi	r20, 0x5D	; 93
    2488:	51 e0       	ldi	r21, 0x01	; 1
    248a:	61 e0       	ldi	r22, 0x01	; 1
    248c:	84 e7       	ldi	r24, 0x74	; 116
    248e:	99 e0       	ldi	r25, 0x09	; 9
    2490:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <_ZN3LCD10createCharEhPh>
    2494:	9f ef       	ldi	r25, 0xFF	; 255
    2496:	29 ef       	ldi	r18, 0xF9	; 249
    2498:	80 e0       	ldi	r24, 0x00	; 0
    249a:	91 50       	subi	r25, 0x01	; 1
    249c:	20 40       	sbci	r18, 0x00	; 0
    249e:	80 40       	sbci	r24, 0x00	; 0
    24a0:	e1 f7       	brne	.-8      	; 0x249a <setup+0xfa>
    24a2:	00 c0       	rjmp	.+0      	; 0x24a4 <setup+0x104>
    24a4:	00 00       	nop
  _delay_ms(20);
  lcd.backlight();
    24a6:	84 e7       	ldi	r24, 0x74	; 116
    24a8:	99 e0       	ldi	r25, 0x09	; 9
    24aa:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <_ZN3LCD9backlightEv>
    24ae:	07 ef       	ldi	r16, 0xF7	; 247
    24b0:	18 e0       	ldi	r17, 0x08	; 8

  for (int r=0;r<4;r++)
    righeDisplay[r]="";
    24b2:	64 e8       	ldi	r22, 0x84	; 132
    24b4:	71 e0       	ldi	r23, 0x01	; 1
    24b6:	c8 01       	movw	r24, r16
    24b8:	0e 94 37 32 	call	0x646e	; 0x646e <_ZN6StringaSEPKc>
    24bc:	0a 5f       	subi	r16, 0xFA	; 250
    24be:	1f 4f       	sbci	r17, 0xFF	; 255

  lcd.createChar(1, Clessidra); // Creo CHAR Clessidra
  _delay_ms(20);
  lcd.backlight();

  for (int r=0;r<4;r++)
    24c0:	99 e0       	ldi	r25, 0x09	; 9
    24c2:	0f 30       	cpi	r16, 0x0F	; 15
    24c4:	19 07       	cpc	r17, r25
    24c6:	a9 f7       	brne	.-22     	; 0x24b2 <setup+0x112>
    righeDisplay[r]="";
  
   printLine();
    24c8:	0e 94 07 02 	call	0x40e	; 0x40e <_Z9printLinev>
   
  /***************************NFC*************************/ 
  
  nfc.begin(); 
    24cc:	8d e5       	ldi	r24, 0x5D	; 93
    24ce:	99 e0       	ldi	r25, 0x09	; 9
    24d0:	de d1       	rcall	.+956    	; 0x288e <_ZN9NFC_PN5325beginEv>
    24d2:	2f ef       	ldi	r18, 0xFF	; 255
    24d4:	80 e7       	ldi	r24, 0x70	; 112
    24d6:	92 e0       	ldi	r25, 0x02	; 2
    24d8:	21 50       	subi	r18, 0x01	; 1
    24da:	80 40       	sbci	r24, 0x00	; 0
    24dc:	90 40       	sbci	r25, 0x00	; 0
    24de:	e1 f7       	brne	.-8      	; 0x24d8 <setup+0x138>
    24e0:	00 c0       	rjmp	.+0      	; 0x24e2 <setup+0x142>
    24e2:	00 00       	nop
  
  _delay_ms(50);

  uint32_t versiondata = nfc.getFirmwareVersion();
    24e4:	8d e5       	ldi	r24, 0x5D	; 93
    24e6:	99 e0       	ldi	r25, 0x09	; 9
    24e8:	72 d3       	rcall	.+1764   	; 0x2bce <_ZN9NFC_PN53218getFirmwareVersionEv>
    24ea:	6b 01       	movw	r12, r22
    24ec:	7c 01       	movw	r14, r24
  if (! versiondata) {
    24ee:	67 2b       	or	r22, r23
    24f0:	68 2b       	or	r22, r24
    24f2:	69 2b       	or	r22, r25
    24f4:	69 f5       	brne	.+90     	; 0x2550 <setup+0x1b0>
    Serial.print("Modulo PN532 non trovato");
    24f6:	62 e0       	ldi	r22, 0x02	; 2
    24f8:	77 e0       	ldi	r23, 0x07	; 7
    24fa:	8c ef       	ldi	r24, 0xFC	; 252
    24fc:	9a e0       	ldi	r25, 0x0A	; 10
    24fe:	0e 94 f7 2e 	call	0x5dee	; 0x5dee <_ZN5Print5printEPKc>
    lcd.backlight();
    2502:	84 e7       	ldi	r24, 0x74	; 116
    2504:	99 e0       	ldi	r25, 0x09	; 9
    2506:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <_ZN3LCD9backlightEv>
    250a:	2f ef       	ldi	r18, 0xFF	; 255
    250c:	84 e3       	ldi	r24, 0x34	; 52
    250e:	9c e0       	ldi	r25, 0x0C	; 12
    2510:	21 50       	subi	r18, 0x01	; 1
    2512:	80 40       	sbci	r24, 0x00	; 0
    2514:	90 40       	sbci	r25, 0x00	; 0
    2516:	e1 f7       	brne	.-8      	; 0x2510 <setup+0x170>
    2518:	00 c0       	rjmp	.+0      	; 0x251a <setup+0x17a>
    251a:	00 00       	nop
    _delay_ms(250);
    lcd.clear();
    251c:	84 e7       	ldi	r24, 0x74	; 116
    251e:	99 e0       	ldi	r25, 0x09	; 9
    2520:	0e 94 67 26 	call	0x4cce	; 0x4cce <_ZN3LCD5clearEv>
    lcd.print("Modulo PN532 non trovato ");    
    2524:	6b e1       	ldi	r22, 0x1B	; 27
    2526:	77 e0       	ldi	r23, 0x07	; 7
    2528:	84 e7       	ldi	r24, 0x74	; 116
    252a:	99 e0       	ldi	r25, 0x09	; 9
    252c:	0e 94 f7 2e 	call	0x5dee	; 0x5dee <_ZN5Print5printEPKc>
    2530:	2f ef       	ldi	r18, 0xFF	; 255
    2532:	87 ea       	ldi	r24, 0xA7	; 167
    2534:	91 e6       	ldi	r25, 0x61	; 97
    2536:	21 50       	subi	r18, 0x01	; 1
    2538:	80 40       	sbci	r24, 0x00	; 0
    253a:	90 40       	sbci	r25, 0x00	; 0
    253c:	e1 f7       	brne	.-8      	; 0x2536 <setup+0x196>
    253e:	00 c0       	rjmp	.+0      	; 0x2540 <setup+0x1a0>
    2540:	00 00       	nop
    _delay_ms(2000);                            
    StatoAttuale  = " CHIAMA ASSISTENZA";   
    2542:	65 e3       	ldi	r22, 0x35	; 53
    2544:	77 e0       	ldi	r23, 0x07	; 7
    2546:	87 e5       	ldi	r24, 0x57	; 87
    2548:	99 e0       	ldi	r25, 0x09	; 9
    254a:	0e 94 37 32 	call	0x646e	; 0x646e <_ZN6StringaSEPKc>
    254e:	06 c0       	rjmp	.+12     	; 0x255c <setup+0x1bc>
    //while (1); // halt  // Aspetta per sempre
  } else {Serial.println("Modulo NFC OK ......");}
    2550:	68 e4       	ldi	r22, 0x48	; 72
    2552:	77 e0       	ldi	r23, 0x07	; 7
    2554:	8c ef       	ldi	r24, 0xFC	; 252
    2556:	9a e0       	ldi	r25, 0x0A	; 10
    2558:	0e 94 22 2f 	call	0x5e44	; 0x5e44 <_ZN5Print7printlnEPKc>
  
  Serial.print("Found chip PN5"); Serial.println((versiondata>>24) & 0xFF, HEX);
    255c:	6d e5       	ldi	r22, 0x5D	; 93
    255e:	77 e0       	ldi	r23, 0x07	; 7
    2560:	8c ef       	ldi	r24, 0xFC	; 252
    2562:	9a e0       	ldi	r25, 0x0A	; 10
    2564:	0e 94 f7 2e 	call	0x5dee	; 0x5dee <_ZN5Print5printEPKc>
    2568:	4f 2d       	mov	r20, r15
    256a:	55 27       	eor	r21, r21
    256c:	66 27       	eor	r22, r22
    256e:	77 27       	eor	r23, r23
    2570:	20 e1       	ldi	r18, 0x10	; 16
    2572:	30 e0       	ldi	r19, 0x00	; 0
    2574:	8c ef       	ldi	r24, 0xFC	; 252
    2576:	9a e0       	ldi	r25, 0x0A	; 10
    2578:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <_ZN5Print7printlnEmi>
  Serial.print("Firmware ver. "); Serial.print((versiondata>>16) & 0xFF, DEC);
    257c:	6c e6       	ldi	r22, 0x6C	; 108
    257e:	77 e0       	ldi	r23, 0x07	; 7
    2580:	8c ef       	ldi	r24, 0xFC	; 252
    2582:	9a e0       	ldi	r25, 0x0A	; 10
    2584:	0e 94 f7 2e 	call	0x5dee	; 0x5dee <_ZN5Print5printEPKc>
    2588:	4e 2d       	mov	r20, r14
    258a:	50 e0       	ldi	r21, 0x00	; 0
    258c:	60 e0       	ldi	r22, 0x00	; 0
    258e:	70 e0       	ldi	r23, 0x00	; 0
    2590:	2a e0       	ldi	r18, 0x0A	; 10
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	8c ef       	ldi	r24, 0xFC	; 252
    2596:	9a e0       	ldi	r25, 0x0A	; 10
    2598:	0e 94 79 2f 	call	0x5ef2	; 0x5ef2 <_ZN5Print5printEmi>
  Serial.print('.'); Serial.println((versiondata>>8) & 0xFF, DEC);
    259c:	6e e2       	ldi	r22, 0x2E	; 46
    259e:	8c ef       	ldi	r24, 0xFC	; 252
    25a0:	9a e0       	ldi	r25, 0x0A	; 10
    25a2:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <_ZN5Print5printEc>
    25a6:	4d 2d       	mov	r20, r13
    25a8:	50 e0       	ldi	r21, 0x00	; 0
    25aa:	60 e0       	ldi	r22, 0x00	; 0
    25ac:	70 e0       	ldi	r23, 0x00	; 0
    25ae:	2a e0       	ldi	r18, 0x0A	; 10
    25b0:	30 e0       	ldi	r19, 0x00	; 0
    25b2:	8c ef       	ldi	r24, 0xFC	; 252
    25b4:	9a e0       	ldi	r25, 0x0A	; 10
    25b6:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <_ZN5Print7printlnEmi>

  nfc.setPassiveActivationRetries(0xFF);   
    25ba:	6f ef       	ldi	r22, 0xFF	; 255
    25bc:	8d e5       	ldi	r24, 0x5D	; 93
    25be:	99 e0       	ldi	r25, 0x09	; 9
    25c0:	7c d3       	rcall	.+1784   	; 0x2cba <_ZN9NFC_PN53227setPassiveActivationRetriesEh>
  nfc.SAMConfig();
    25c2:	8d e5       	ldi	r24, 0x5D	; 93
    25c4:	99 e0       	ldi	r25, 0x09	; 9
    25c6:	4b d3       	rcall	.+1686   	; 0x2c5e <_ZN9NFC_PN5329SAMConfigEv>
    25c8:	0e 94 07 02 	call	0x40e	; 0x40e <_Z9printLinev>
  printLine();
    25cc:	40 ea       	ldi	r20, 0xA0	; 160
  /***************************SPY FLASH*************************/  
  
  /*************************** RTC ************************/
  while (!DS3231M.begin()) {                                                 
    25ce:	56 e8       	ldi	r21, 0x86	; 134
    25d0:	61 e0       	ldi	r22, 0x01	; 1
    25d2:	70 e0       	ldi	r23, 0x00	; 0
    25d4:	89 eb       	ldi	r24, 0xB9	; 185
    25d6:	98 e0       	ldi	r25, 0x08	; 8
    25d8:	8c d6       	rcall	.+3352   	; 0x32f2 <_ZN13DS3231M_Class5beginEm>
    25da:	81 11       	cpse	r24, r1
    25dc:	10 c0       	rjmp	.+32     	; 0x25fe <setup+0x25e>
    25de:	62 ee       	ldi	r22, 0xE2	; 226
    Serial.println(F("Unable to find DS3231MM. Checking again in 3s."));     
    25e0:	71 e0       	ldi	r23, 0x01	; 1
    25e2:	8c ef       	ldi	r24, 0xFC	; 252
    25e4:	9a e0       	ldi	r25, 0x0A	; 10
    25e6:	0e 94 02 2f 	call	0x5e04	; 0x5e04 <_ZN5Print7printlnEPK19__FlashStringHelper>
    25ea:	2f ef       	ldi	r18, 0xFF	; 255
    25ec:	83 ed       	ldi	r24, 0xD3	; 211
    25ee:	90 e3       	ldi	r25, 0x30	; 48
    25f0:	21 50       	subi	r18, 0x01	; 1
    25f2:	80 40       	sbci	r24, 0x00	; 0
    25f4:	90 40       	sbci	r25, 0x00	; 0
    25f6:	e1 f7       	brne	.-8      	; 0x25f0 <setup+0x250>
    25f8:	00 c0       	rjmp	.+0      	; 0x25fa <setup+0x25a>
    25fa:	00 00       	nop
    25fc:	e7 cf       	rjmp	.-50     	; 0x25cc <setup+0x22c>
    25fe:	2f ef       	ldi	r18, 0xFF	; 255
    2600:	80 e7       	ldi	r24, 0x70	; 112
    2602:	92 e0       	ldi	r25, 0x02	; 2
    2604:	21 50       	subi	r18, 0x01	; 1
    2606:	80 40       	sbci	r24, 0x00	; 0
    2608:	90 40       	sbci	r25, 0x00	; 0
    260a:	e1 f7       	brne	.-8      	; 0x2604 <setup+0x264>
    260c:	00 c0       	rjmp	.+0      	; 0x260e <setup+0x26e>
    260e:	00 00       	nop
    2610:	64 ec       	ldi	r22, 0xC4	; 196
    _delay_ms(1000);                                                         
  } 
  _delay_ms(50);

  Serial.println(F("RTC chip DS3231M initialized."));                                 
    2612:	71 e0       	ldi	r23, 0x01	; 1
    2614:	8c ef       	ldi	r24, 0xFC	; 252
    2616:	9a e0       	ldi	r25, 0x0A	; 10
    2618:	0e 94 02 2f 	call	0x5e04	; 0x5e04 <_ZN5Print7printlnEPK19__FlashStringHelper>
  DS3231M.adjust();
    261c:	89 eb       	ldi	r24, 0xB9	; 185
    261e:	98 e0       	ldi	r25, 0x08	; 8
    2620:	c6 d7       	rcall	.+3980   	; 0x35ae <_ZN13DS3231M_Class6adjustEv>
    2622:	0e 94 07 02 	call	0x40e	; 0x40e <_Z9printLinev>
  printLine();
    2626:	6b e7       	ldi	r22, 0x7B	; 123
  /*************************** POTENZIOMETRI ************************/
  Serial.println("Inizializzo POTENZIOMETRI per livello pulser.......");
    2628:	77 e0       	ldi	r23, 0x07	; 7
    262a:	8c ef       	ldi	r24, 0xFC	; 252
    262c:	9a e0       	ldi	r25, 0x0A	; 10
    262e:	0e 94 22 2f 	call	0x5e44	; 0x5e44 <_ZN5Print7printlnEPKc>
    2632:	86 ea       	ldi	r24, 0xA6	; 166
  
  Wire.begin(); // join i2c bus (address optional for master) 
    2634:	9a e0       	ldi	r25, 0x0A	; 10
    2636:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <_ZN7TwoWire5beginEv>
    263a:	68 e2       	ldi	r22, 0x28	; 40
  
  Wire.beginTransmission(0x28);  // (0x50) POTENZIOMETRO U11
    263c:	70 e0       	ldi	r23, 0x00	; 0
    263e:	86 ea       	ldi	r24, 0xA6	; 166
    2640:	9a e0       	ldi	r25, 0x0A	; 10
    2642:	0e 94 f2 2b 	call	0x57e4	; 0x57e4 <_ZN7TwoWire17beginTransmissionEi>
    2646:	60 e0       	ldi	r22, 0x00	; 0
  Wire.write(byte(0x00));        // Wiper Register
    2648:	86 ea       	ldi	r24, 0xA6	; 166
    264a:	9a e0       	ldi	r25, 0x0A	; 10
    264c:	0e 94 97 2b 	call	0x572e	; 0x572e <_ZN7TwoWire5writeEh>
    2650:	62 e3       	ldi	r22, 0x32	; 50
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    2652:	86 ea       	ldi	r24, 0xA6	; 166
    2654:	9a e0       	ldi	r25, 0x0A	; 10
    2656:	0e 94 97 2b 	call	0x572e	; 0x572e <_ZN7TwoWire5writeEh>
    265a:	86 ea       	ldi	r24, 0xA6	; 166
  Wire.write(50);                // Valore del potenziomentro circa 6 volt
  Wire.endTransmission(); 
    265c:	9a e0       	ldi	r25, 0x0A	; 10
    265e:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <_ZN7TwoWire15endTransmissionEv>
    2662:	2f ef       	ldi	r18, 0xFF	; 255
    2664:	80 e7       	ldi	r24, 0x70	; 112
    2666:	92 e0       	ldi	r25, 0x02	; 2
    2668:	21 50       	subi	r18, 0x01	; 1
    266a:	80 40       	sbci	r24, 0x00	; 0
    266c:	90 40       	sbci	r25, 0x00	; 0
    266e:	e1 f7       	brne	.-8      	; 0x2668 <setup+0x2c8>
    2670:	00 c0       	rjmp	.+0      	; 0x2672 <setup+0x2d2>
    2672:	00 00       	nop
    2674:	62 e5       	ldi	r22, 0x52	; 82
   
   _delay_ms(50);     
   
   Wire.beginTransmission(0x52);  // (0x52) POTENZIOMETRO U12
    2676:	70 e0       	ldi	r23, 0x00	; 0
    2678:	86 ea       	ldi	r24, 0xA6	; 166
    267a:	9a e0       	ldi	r25, 0x0A	; 10
    267c:	0e 94 f2 2b 	call	0x57e4	; 0x57e4 <_ZN7TwoWire17beginTransmissionEi>
    2680:	60 e0       	ldi	r22, 0x00	; 0
   Wire.write(byte(0x00));        // Wiper Register
    2682:	86 ea       	ldi	r24, 0xA6	; 166
    2684:	9a e0       	ldi	r25, 0x0A	; 10
    2686:	0e 94 97 2b 	call	0x572e	; 0x572e <_ZN7TwoWire5writeEh>
    268a:	62 e3       	ldi	r22, 0x32	; 50
    268c:	86 ea       	ldi	r24, 0xA6	; 166
    268e:	9a e0       	ldi	r25, 0x0A	; 10
    2690:	0e 94 97 2b 	call	0x572e	; 0x572e <_ZN7TwoWire5writeEh>
    2694:	86 ea       	ldi	r24, 0xA6	; 166
   Wire.write(50);                // Valore del potenziomentro circa 6 volt
   Wire.endTransmission(); 
    2696:	9a e0       	ldi	r25, 0x0A	; 10
    2698:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <_ZN7TwoWire15endTransmissionEv>
    269c:	86 ea       	ldi	r24, 0xA6	; 166
  
   Wire.end();
    269e:	9a e0       	ldi	r25, 0x0A	; 10
    26a0:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <_ZN7TwoWire3endEv>
    26a4:	6f ea       	ldi	r22, 0xAF	; 175

   Serial.println("POTENZIOMETRI OK");
    26a6:	77 e0       	ldi	r23, 0x07	; 7
    26a8:	8c ef       	ldi	r24, 0xFC	; 252
    26aa:	9a e0       	ldi	r25, 0x0A	; 10
    26ac:	0e 94 22 2f 	call	0x5e44	; 0x5e44 <_ZN5Print7printlnEPKc>
    26b0:	0e 94 07 02 	call	0x40e	; 0x40e <_Z9printLinev>
   printLine();
  /*************************KEYPAD*********************/
   gpio.begin(I2C_PCA9534_ADDR);
    26b4:	60 e2       	ldi	r22, 0x20	; 32
    26b6:	8e e9       	ldi	r24, 0x9E	; 158
    26b8:	98 e0       	ldi	r25, 0x08	; 8
    26ba:	3d d0       	rcall	.+122    	; 0x2736 <_ZN7PCA95345beginEh>
   
  // set REG IOexpander OPREG 11000011,INVREG 00000000,CONFREG 00111100
   gpio.setporteIoExp(0xC3,0x00,0x3C); 
    26bc:	2c e3       	ldi	r18, 0x3C	; 60
    26be:	40 e0       	ldi	r20, 0x00	; 0
    26c0:	63 ec       	ldi	r22, 0xC3	; 195
    26c2:	8e e9       	ldi	r24, 0x9E	; 158
    26c4:	98 e0       	ldi	r25, 0x08	; 8
    26c6:	3d d0       	rcall	.+122    	; 0x2742 <_ZN7PCA953413setporteIoExpEhhh>
    26c8:	8e ef       	ldi	r24, 0xFE	; 254
  /**************** SETTING INIZIALI ******************/      
  
  stato_procedura = - 2; // set stato di partenza
    26ca:	9f ef       	ldi	r25, 0xFF	; 255
    26cc:	90 93 4e 09 	sts	0x094E, r25	; 0x80094e <stato_procedura+0x1>
    26d0:	80 93 4d 09 	sts	0x094D, r24	; 0x80094d <stato_procedura>
    26d4:	60 ec       	ldi	r22, 0xC0	; 192
  
  StatoAttuale = "Starting ...."; 
    26d6:	77 e0       	ldi	r23, 0x07	; 7
    26d8:	87 e5       	ldi	r24, 0x57	; 87
    26da:	99 e0       	ldi	r25, 0x09	; 9
    26dc:	0e 94 37 32 	call	0x646e	; 0x646e <_ZN6StringaSEPKc>
    26e0:	6e ec       	ldi	r22, 0xCE	; 206
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    26e2:	77 e0       	ldi	r23, 0x07	; 7
    26e4:	ce 01       	movw	r24, r28
    26e6:	01 96       	adiw	r24, 0x01	; 1
    26e8:	0e 94 b8 31 	call	0x6370	; 0x6370 <_ZN6StringC1EPKc>
    26ec:	67 e5       	ldi	r22, 0x57	; 87
  
  Serial.println("Stato Iniziale" + StatoAttuale);
    26ee:	79 e0       	ldi	r23, 0x09	; 9
    26f0:	ce 01       	movw	r24, r28
    26f2:	01 96       	adiw	r24, 0x01	; 1
    26f4:	0e 94 39 33 	call	0x6672	; 0x6672 <_ZplRK15StringSumHelperRK6String>
    26f8:	bc 01       	movw	r22, r24
    26fa:	8c ef       	ldi	r24, 0xFC	; 252
    26fc:	9a e0       	ldi	r25, 0x0A	; 10
    26fe:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <_ZN5Print7printlnERK6String>
    2702:	ce 01       	movw	r24, r28
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2704:	01 96       	adiw	r24, 0x01	; 1
    2706:	0e 94 51 31 	call	0x62a2	; 0x62a2 <_ZN6StringD1Ev>
    270a:	0e 94 07 02 	call	0x40e	; 0x40e <_Z9printLinev>
  
  printLine();
    270e:	26 96       	adiw	r28, 0x06	; 6
}
    2710:	0f b6       	in	r0, 0x3f	; 63
    2712:	f8 94       	cli
    2714:	de bf       	out	0x3e, r29	; 62
    2716:	0f be       	out	0x3f, r0	; 63
    2718:	cd bf       	out	0x3d, r28	; 61
    271a:	df 91       	pop	r29
    271c:	cf 91       	pop	r28
    271e:	1f 91       	pop	r17
    2720:	0f 91       	pop	r16
    2722:	ff 90       	pop	r15
    2724:	ef 90       	pop	r14
    2726:	df 90       	pop	r13
    2728:	cf 90       	pop	r12
    272a:	08 95       	ret

0000272c <_ZN7PCA9534C1Ev>:
    272c:	fc 01       	movw	r30, r24
	Wire.requestFrom(_i2caddr, 1);
	while (Wire.available()) {
		buff = Wire.read();
	}
	return (buff & (1 << pin)) ? HIGH : LOW;
}
    272e:	10 82       	st	Z, r1
    2730:	11 82       	std	Z+1, r1	; 0x01
    2732:	12 82       	std	Z+2, r1	; 0x02
    2734:	08 95       	ret

00002736 <_ZN7PCA95345beginEh>:
    2736:	fc 01       	movw	r30, r24
    2738:	60 83       	st	Z, r22
    273a:	86 ea       	ldi	r24, 0xA6	; 166
    273c:	9a e0       	ldi	r25, 0x0A	; 10
    273e:	0c 94 d5 2b 	jmp	0x57aa	; 0x57aa <_ZN7TwoWire5beginEv>

00002742 <_ZN7PCA953413setporteIoExpEhhh>:
    2742:	ff 92       	push	r15
    2744:	0f 93       	push	r16
    2746:	1f 93       	push	r17
    2748:	cf 93       	push	r28
    274a:	df 93       	push	r29
    274c:	ec 01       	movw	r28, r24
    274e:	f6 2e       	mov	r15, r22
    2750:	04 2f       	mov	r16, r20
    2752:	12 2f       	mov	r17, r18
    2754:	68 81       	ld	r22, Y
    2756:	86 ea       	ldi	r24, 0xA6	; 166
    2758:	9a e0       	ldi	r25, 0x0A	; 10
    275a:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <_ZN7TwoWire17beginTransmissionEh>
    275e:	61 e0       	ldi	r22, 0x01	; 1
    2760:	86 ea       	ldi	r24, 0xA6	; 166
    2762:	9a e0       	ldi	r25, 0x0A	; 10
    2764:	0e 94 97 2b 	call	0x572e	; 0x572e <_ZN7TwoWire5writeEh>
    2768:	6f 2d       	mov	r22, r15
    276a:	86 ea       	ldi	r24, 0xA6	; 166
    276c:	9a e0       	ldi	r25, 0x0A	; 10
    276e:	0e 94 97 2b 	call	0x572e	; 0x572e <_ZN7TwoWire5writeEh>
    2772:	86 ea       	ldi	r24, 0xA6	; 166
    2774:	9a e0       	ldi	r25, 0x0A	; 10
    2776:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <_ZN7TwoWire15endTransmissionEv>
    277a:	68 81       	ld	r22, Y
    277c:	86 ea       	ldi	r24, 0xA6	; 166
    277e:	9a e0       	ldi	r25, 0x0A	; 10
    2780:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <_ZN7TwoWire17beginTransmissionEh>
    2784:	62 e0       	ldi	r22, 0x02	; 2
    2786:	86 ea       	ldi	r24, 0xA6	; 166
    2788:	9a e0       	ldi	r25, 0x0A	; 10
    278a:	0e 94 97 2b 	call	0x572e	; 0x572e <_ZN7TwoWire5writeEh>
    278e:	60 2f       	mov	r22, r16
    2790:	86 ea       	ldi	r24, 0xA6	; 166
    2792:	9a e0       	ldi	r25, 0x0A	; 10
    2794:	0e 94 97 2b 	call	0x572e	; 0x572e <_ZN7TwoWire5writeEh>
    2798:	86 ea       	ldi	r24, 0xA6	; 166
    279a:	9a e0       	ldi	r25, 0x0A	; 10
    279c:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <_ZN7TwoWire15endTransmissionEv>
    27a0:	8f e3       	ldi	r24, 0x3F	; 63
    27a2:	9c e9       	ldi	r25, 0x9C	; 156
    27a4:	01 97       	sbiw	r24, 0x01	; 1
    27a6:	f1 f7       	brne	.-4      	; 0x27a4 <_ZN7PCA953413setporteIoExpEhhh+0x62>
    27a8:	00 c0       	rjmp	.+0      	; 0x27aa <_ZN7PCA953413setporteIoExpEhhh+0x68>
    27aa:	00 00       	nop
    27ac:	68 81       	ld	r22, Y
    27ae:	86 ea       	ldi	r24, 0xA6	; 166
    27b0:	9a e0       	ldi	r25, 0x0A	; 10
    27b2:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <_ZN7TwoWire17beginTransmissionEh>
    27b6:	63 e0       	ldi	r22, 0x03	; 3
    27b8:	86 ea       	ldi	r24, 0xA6	; 166
    27ba:	9a e0       	ldi	r25, 0x0A	; 10
    27bc:	0e 94 97 2b 	call	0x572e	; 0x572e <_ZN7TwoWire5writeEh>
    27c0:	61 2f       	mov	r22, r17
    27c2:	86 ea       	ldi	r24, 0xA6	; 166
    27c4:	9a e0       	ldi	r25, 0x0A	; 10
    27c6:	0e 94 97 2b 	call	0x572e	; 0x572e <_ZN7TwoWire5writeEh>
    27ca:	86 ea       	ldi	r24, 0xA6	; 166
    27cc:	9a e0       	ldi	r25, 0x0A	; 10
    27ce:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <_ZN7TwoWire15endTransmissionEv>
    27d2:	8f e3       	ldi	r24, 0x3F	; 63
    27d4:	9c e9       	ldi	r25, 0x9C	; 156
    27d6:	01 97       	sbiw	r24, 0x01	; 1
    27d8:	f1 f7       	brne	.-4      	; 0x27d6 <_ZN7PCA953413setporteIoExpEhhh+0x94>
    27da:	00 c0       	rjmp	.+0      	; 0x27dc <_ZN7PCA953413setporteIoExpEhhh+0x9a>
    27dc:	00 00       	nop
    27de:	df 91       	pop	r29
    27e0:	cf 91       	pop	r28
    27e2:	1f 91       	pop	r17
    27e4:	0f 91       	pop	r16
    27e6:	ff 90       	pop	r15
    27e8:	08 95       	ret

000027ea <_ZN7PCA953410setCONFREGEh>:
    27ea:	cf 93       	push	r28
    27ec:	c6 2f       	mov	r28, r22
    27ee:	fc 01       	movw	r30, r24
    27f0:	60 81       	ld	r22, Z
    27f2:	86 ea       	ldi	r24, 0xA6	; 166
    27f4:	9a e0       	ldi	r25, 0x0A	; 10
    27f6:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <_ZN7TwoWire17beginTransmissionEh>
    27fa:	63 e0       	ldi	r22, 0x03	; 3
    27fc:	86 ea       	ldi	r24, 0xA6	; 166
    27fe:	9a e0       	ldi	r25, 0x0A	; 10
    2800:	0e 94 97 2b 	call	0x572e	; 0x572e <_ZN7TwoWire5writeEh>
    2804:	6c 2f       	mov	r22, r28
    2806:	86 ea       	ldi	r24, 0xA6	; 166
    2808:	9a e0       	ldi	r25, 0x0A	; 10
    280a:	0e 94 97 2b 	call	0x572e	; 0x572e <_ZN7TwoWire5writeEh>
    280e:	86 ea       	ldi	r24, 0xA6	; 166
    2810:	9a e0       	ldi	r25, 0x0A	; 10
    2812:	cf 91       	pop	r28
    2814:	0c 94 69 2c 	jmp	0x58d2	; 0x58d2 <_ZN7TwoWire15endTransmissionEv>

00002818 <_ZN7PCA953416Read_IP_REGISTEREv>:

uint8_t PCA9534::Read_IP_REGISTER() {
    2818:	cf 93       	push	r28
    281a:	df 93       	push	r29
    281c:	ec 01       	movw	r28, r24
	uint8_t buff = 0;

	//_i2caddr = i2caddr;

	Wire.beginTransmission(_i2caddr);
    281e:	68 81       	ld	r22, Y
    2820:	86 ea       	ldi	r24, 0xA6	; 166
    2822:	9a e0       	ldi	r25, 0x0A	; 10
    2824:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(PCA9534_IP_REGISTER);
    2828:	60 e0       	ldi	r22, 0x00	; 0
    282a:	86 ea       	ldi	r24, 0xA6	; 166
    282c:	9a e0       	ldi	r25, 0x0A	; 10
    282e:	0e 94 97 2b 	call	0x572e	; 0x572e <_ZN7TwoWire5writeEh>
	// Wire.write(_port);
	Wire.endTransmission();
    2832:	86 ea       	ldi	r24, 0xA6	; 166
    2834:	9a e0       	ldi	r25, 0x0A	; 10
    2836:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <_ZN7TwoWire15endTransmissionEv>

	// We only need to read 1 byte of data to get the pins
	Wire.requestFrom(_i2caddr, 1);
    283a:	68 81       	ld	r22, Y
    283c:	70 e0       	ldi	r23, 0x00	; 0
    283e:	41 e0       	ldi	r20, 0x01	; 1
    2840:	50 e0       	ldi	r21, 0x00	; 0
    2842:	86 ea       	ldi	r24, 0xA6	; 166
    2844:	9a e0       	ldi	r25, 0x0A	; 10
    2846:	0e 94 67 2c 	call	0x58ce	; 0x58ce <_ZN7TwoWire11requestFromEii>
	}
	return (buff & (1 << pin)) ? HIGH : LOW;
}

uint8_t PCA9534::Read_IP_REGISTER() {
	uint8_t buff = 0;
    284a:	c0 e0       	ldi	r28, 0x00	; 0
	// Wire.write(_port);
	Wire.endTransmission();

	// We only need to read 1 byte of data to get the pins
	Wire.requestFrom(_i2caddr, 1);
	while (Wire.available()) {
    284c:	86 ea       	ldi	r24, 0xA6	; 166
    284e:	9a e0       	ldi	r25, 0x0A	; 10
    2850:	0e 94 09 2b 	call	0x5612	; 0x5612 <_ZN7TwoWire9availableEv>
    2854:	89 2b       	or	r24, r25
    2856:	31 f0       	breq	.+12     	; 0x2864 <_ZN7PCA953416Read_IP_REGISTEREv+0x4c>
		buff = Wire.read();
    2858:	86 ea       	ldi	r24, 0xA6	; 166
    285a:	9a e0       	ldi	r25, 0x0A	; 10
    285c:	0e 94 11 2b 	call	0x5622	; 0x5622 <_ZN7TwoWire4readEv>
    2860:	c8 2f       	mov	r28, r24
	// Wire.write(_port);
	Wire.endTransmission();

	// We only need to read 1 byte of data to get the pins
	Wire.requestFrom(_i2caddr, 1);
	while (Wire.available()) {
    2862:	f4 cf       	rjmp	.-24     	; 0x284c <_ZN7PCA953416Read_IP_REGISTEREv+0x34>
		buff = Wire.read();
	}
	return buff;
    2864:	8c 2f       	mov	r24, r28
    2866:	df 91       	pop	r29
    2868:	cf 91       	pop	r28
    286a:	08 95       	ret

0000286c <_ZN9NFC_PN532C1Ehh>:
    #endif
    return false;
  }

  return true;
}
    286c:	cf 93       	push	r28
    286e:	df 93       	push	r29
    2870:	ec 01       	movw	r28, r24
    2872:	86 2f       	mov	r24, r22
    2874:	6c 83       	std	Y+4, r22	; 0x04
    2876:	4d 83       	std	Y+5, r20	; 0x05
    2878:	1d 8a       	std	Y+21, r1	; 0x15
    287a:	1e 8a       	std	Y+22, r1	; 0x16
    287c:	60 e0       	ldi	r22, 0x00	; 0
    287e:	0e 94 be 30 	call	0x617c	; 0x617c <pinMode>
    2882:	61 e0       	ldi	r22, 0x01	; 1
    2884:	8d 81       	ldd	r24, Y+5	; 0x05
    2886:	df 91       	pop	r29
    2888:	cf 91       	pop	r28
    288a:	0c 94 be 30 	jmp	0x617c	; 0x617c <pinMode>

0000288e <_ZN9NFC_PN5325beginEv>:
    288e:	cf 93       	push	r28
    2890:	df 93       	push	r29
    2892:	ec 01       	movw	r28, r24
    2894:	86 ea       	ldi	r24, 0xA6	; 166
    2896:	9a e0       	ldi	r25, 0x0A	; 10
    2898:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <_ZN7TwoWire5beginEv>
    289c:	61 e0       	ldi	r22, 0x01	; 1
    289e:	8d 81       	ldd	r24, Y+5	; 0x05
    28a0:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <digitalWrite>
    28a4:	60 e0       	ldi	r22, 0x00	; 0
    28a6:	8d 81       	ldd	r24, Y+5	; 0x05
    28a8:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <digitalWrite>
    28ac:	2f ef       	ldi	r18, 0xFF	; 255
    28ae:	87 e8       	ldi	r24, 0x87	; 135
    28b0:	93 e1       	ldi	r25, 0x13	; 19
    28b2:	21 50       	subi	r18, 0x01	; 1
    28b4:	80 40       	sbci	r24, 0x00	; 0
    28b6:	90 40       	sbci	r25, 0x00	; 0
    28b8:	e1 f7       	brne	.-8      	; 0x28b2 <_ZN9NFC_PN5325beginEv+0x24>
    28ba:	00 c0       	rjmp	.+0      	; 0x28bc <_ZN9NFC_PN5325beginEv+0x2e>
    28bc:	00 00       	nop
    28be:	61 e0       	ldi	r22, 0x01	; 1
    28c0:	8d 81       	ldd	r24, Y+5	; 0x05
    28c2:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <digitalWrite>
    28c6:	8f e3       	ldi	r24, 0x3F	; 63
    28c8:	9c e9       	ldi	r25, 0x9C	; 156
    28ca:	01 97       	sbiw	r24, 0x01	; 1
    28cc:	f1 f7       	brne	.-4      	; 0x28ca <_ZN9NFC_PN5325beginEv+0x3c>
    28ce:	00 c0       	rjmp	.+0      	; 0x28d0 <_ZN9NFC_PN5325beginEv+0x42>
    28d0:	00 00       	nop
    28d2:	df 91       	pop	r29
    28d4:	cf 91       	pop	r28
    28d6:	08 95       	ret

000028d8 <_ZN9NFC_PN53210GetHexCodeEPKhm>:
    28d8:	4f 92       	push	r4
    28da:	5f 92       	push	r5
    28dc:	6f 92       	push	r6
    28de:	7f 92       	push	r7
    28e0:	8f 92       	push	r8
    28e2:	9f 92       	push	r9
    28e4:	af 92       	push	r10
    28e6:	bf 92       	push	r11
    28e8:	ef 92       	push	r14
    28ea:	ff 92       	push	r15
    28ec:	0f 93       	push	r16
    28ee:	1f 93       	push	r17
    28f0:	cf 93       	push	r28
    28f2:	df 93       	push	r29
    28f4:	cd b7       	in	r28, 0x3d	; 61
    28f6:	de b7       	in	r29, 0x3e	; 62
    28f8:	2c 97       	sbiw	r28, 0x0c	; 12
    28fa:	0f b6       	in	r0, 0x3f	; 63
    28fc:	f8 94       	cli
    28fe:	de bf       	out	0x3e, r29	; 62
    2900:	0f be       	out	0x3f, r0	; 63
    2902:	cd bf       	out	0x3d, r28	; 61
    2904:	7c 01       	movw	r14, r24
    2906:	5a 01       	movw	r10, r20
    2908:	28 01       	movw	r4, r16
    290a:	39 01       	movw	r6, r18
    290c:	64 e8       	ldi	r22, 0x84	; 132
    290e:	71 e0       	ldi	r23, 0x01	; 1
    2910:	0e 94 b8 31 	call	0x6370	; 0x6370 <_ZN6StringC1EPKc>
    2914:	85 01       	movw	r16, r10
    2916:	81 2c       	mov	r8, r1
    2918:	91 2c       	mov	r9, r1
    291a:	54 01       	movw	r10, r8
    291c:	84 14       	cp	r8, r4
    291e:	95 04       	cpc	r9, r5
    2920:	a6 04       	cpc	r10, r6
    2922:	b7 04       	cpc	r11, r7
    2924:	09 f4       	brne	.+2      	; 0x2928 <_ZN9NFC_PN53210GetHexCodeEPKhm+0x50>
    2926:	46 c0       	rjmp	.+140    	; 0x29b4 <_ZN9NFC_PN53210GetHexCodeEPKhm+0xdc>
    2928:	f8 01       	movw	r30, r16
    292a:	61 91       	ld	r22, Z+
    292c:	8f 01       	movw	r16, r30
    292e:	40 e1       	ldi	r20, 0x10	; 16
    2930:	ce 01       	movw	r24, r28
    2932:	60 31       	cpi	r22, 0x10	; 16
    2934:	f0 f4       	brcc	.+60     	; 0x2972 <_ZN9NFC_PN53210GetHexCodeEPKhm+0x9a>
    2936:	01 96       	adiw	r24, 0x01	; 1
    2938:	0e 94 63 32 	call	0x64c6	; 0x64c6 <_ZN6StringC1Ehh>
    293c:	b7 01       	movw	r22, r14
    293e:	ce 01       	movw	r24, r28
    2940:	07 96       	adiw	r24, 0x07	; 7
    2942:	0e 94 24 32 	call	0x6448	; 0x6448 <_ZN6StringC1ERKS_>
    2946:	63 e3       	ldi	r22, 0x33	; 51
    2948:	74 e0       	ldi	r23, 0x04	; 4
    294a:	ce 01       	movw	r24, r28
    294c:	07 96       	adiw	r24, 0x07	; 7
    294e:	0e 94 4a 33 	call	0x6694	; 0x6694 <_ZplRK15StringSumHelperPKc>
    2952:	be 01       	movw	r22, r28
    2954:	6f 5f       	subi	r22, 0xFF	; 255
    2956:	7f 4f       	sbci	r23, 0xFF	; 255
    2958:	0e 94 39 33 	call	0x6672	; 0x6672 <_ZplRK15StringSumHelperRK6String>
    295c:	bc 01       	movw	r22, r24
    295e:	c7 01       	movw	r24, r14
    2960:	0e 94 0f 32 	call	0x641e	; 0x641e <_ZN6StringaSERKS_>
    2964:	ce 01       	movw	r24, r28
    2966:	07 96       	adiw	r24, 0x07	; 7
    2968:	0e 94 51 31 	call	0x62a2	; 0x62a2 <_ZN6StringD1Ev>
    296c:	ce 01       	movw	r24, r28
    296e:	01 96       	adiw	r24, 0x01	; 1
    2970:	19 c0       	rjmp	.+50     	; 0x29a4 <_ZN9NFC_PN53210GetHexCodeEPKhm+0xcc>
    2972:	07 96       	adiw	r24, 0x07	; 7
    2974:	0e 94 63 32 	call	0x64c6	; 0x64c6 <_ZN6StringC1Ehh>
    2978:	b7 01       	movw	r22, r14
    297a:	ce 01       	movw	r24, r28
    297c:	01 96       	adiw	r24, 0x01	; 1
    297e:	0e 94 24 32 	call	0x6448	; 0x6448 <_ZN6StringC1ERKS_>
    2982:	be 01       	movw	r22, r28
    2984:	69 5f       	subi	r22, 0xF9	; 249
    2986:	7f 4f       	sbci	r23, 0xFF	; 255
    2988:	ce 01       	movw	r24, r28
    298a:	01 96       	adiw	r24, 0x01	; 1
    298c:	0e 94 39 33 	call	0x6672	; 0x6672 <_ZplRK15StringSumHelperRK6String>
    2990:	bc 01       	movw	r22, r24
    2992:	c7 01       	movw	r24, r14
    2994:	0e 94 0f 32 	call	0x641e	; 0x641e <_ZN6StringaSERKS_>
    2998:	ce 01       	movw	r24, r28
    299a:	01 96       	adiw	r24, 0x01	; 1
    299c:	0e 94 51 31 	call	0x62a2	; 0x62a2 <_ZN6StringD1Ev>
    29a0:	ce 01       	movw	r24, r28
    29a2:	07 96       	adiw	r24, 0x07	; 7
    29a4:	0e 94 51 31 	call	0x62a2	; 0x62a2 <_ZN6StringD1Ev>
    29a8:	ff ef       	ldi	r31, 0xFF	; 255
    29aa:	8f 1a       	sub	r8, r31
    29ac:	9f 0a       	sbc	r9, r31
    29ae:	af 0a       	sbc	r10, r31
    29b0:	bf 0a       	sbc	r11, r31
    29b2:	b4 cf       	rjmp	.-152    	; 0x291c <_ZN9NFC_PN53210GetHexCodeEPKhm+0x44>
    29b4:	8c ef       	ldi	r24, 0xFC	; 252
    29b6:	9a e0       	ldi	r25, 0x0A	; 10
    29b8:	0e 94 ff 2e 	call	0x5dfe	; 0x5dfe <_ZN5Print7printlnEv>
    29bc:	c7 01       	movw	r24, r14
    29be:	2c 96       	adiw	r28, 0x0c	; 12
    29c0:	0f b6       	in	r0, 0x3f	; 63
    29c2:	f8 94       	cli
    29c4:	de bf       	out	0x3e, r29	; 62
    29c6:	0f be       	out	0x3f, r0	; 63
    29c8:	cd bf       	out	0x3d, r28	; 61
    29ca:	df 91       	pop	r29
    29cc:	cf 91       	pop	r28
    29ce:	1f 91       	pop	r17
    29d0:	0f 91       	pop	r16
    29d2:	ff 90       	pop	r15
    29d4:	ef 90       	pop	r14
    29d6:	bf 90       	pop	r11
    29d8:	af 90       	pop	r10
    29da:	9f 90       	pop	r9
    29dc:	8f 90       	pop	r8
    29de:	7f 90       	pop	r7
    29e0:	6f 90       	pop	r6
    29e2:	5f 90       	pop	r5
    29e4:	4f 90       	pop	r4
    29e6:	08 95       	ret

000029e8 <_ZN9NFC_PN5327isreadyEv>:
    29e8:	fc 01       	movw	r30, r24
    29ea:	84 81       	ldd	r24, Z+4	; 0x04
    29ec:	0e 94 28 31 	call	0x6250	; 0x6250 <digitalRead>
    29f0:	91 e0       	ldi	r25, 0x01	; 1
    29f2:	81 11       	cpse	r24, r1
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	89 2f       	mov	r24, r25
    29f8:	08 95       	ret

000029fa <_ZN9NFC_PN5329waitreadyEj>:
    29fa:	cf 92       	push	r12
    29fc:	df 92       	push	r13
    29fe:	ef 92       	push	r14
    2a00:	ff 92       	push	r15
    2a02:	1f 93       	push	r17
    2a04:	cf 93       	push	r28
    2a06:	df 93       	push	r29
    2a08:	6c 01       	movw	r12, r24
    2a0a:	7b 01       	movw	r14, r22
    2a0c:	c0 e0       	ldi	r28, 0x00	; 0
    2a0e:	d0 e0       	ldi	r29, 0x00	; 0
    2a10:	c6 01       	movw	r24, r12
    2a12:	ea df       	rcall	.-44     	; 0x29e8 <_ZN9NFC_PN5327isreadyEv>
    2a14:	18 2f       	mov	r17, r24
    2a16:	81 11       	cpse	r24, r1
    2a18:	15 c0       	rjmp	.+42     	; 0x2a44 <_ZN9NFC_PN5329waitreadyEj+0x4a>
    2a1a:	e1 14       	cp	r14, r1
    2a1c:	f1 04       	cpc	r15, r1
    2a1e:	59 f0       	breq	.+22     	; 0x2a36 <_ZN9NFC_PN5329waitreadyEj+0x3c>
    2a20:	2a 96       	adiw	r28, 0x0a	; 10
    2a22:	ec 16       	cp	r14, r28
    2a24:	fd 06       	cpc	r15, r29
    2a26:	38 f4       	brcc	.+14     	; 0x2a36 <_ZN9NFC_PN5329waitreadyEj+0x3c>
    2a28:	6d ee       	ldi	r22, 0xED	; 237
    2a2a:	77 e0       	ldi	r23, 0x07	; 7
    2a2c:	8c ef       	ldi	r24, 0xFC	; 252
    2a2e:	9a e0       	ldi	r25, 0x0A	; 10
    2a30:	0e 94 22 2f 	call	0x5e44	; 0x5e44 <_ZN5Print7printlnEPKc>
    2a34:	07 c0       	rjmp	.+14     	; 0x2a44 <_ZN9NFC_PN5329waitreadyEj+0x4a>
    2a36:	8f e3       	ldi	r24, 0x3F	; 63
    2a38:	9c e9       	ldi	r25, 0x9C	; 156
    2a3a:	01 97       	sbiw	r24, 0x01	; 1
    2a3c:	f1 f7       	brne	.-4      	; 0x2a3a <_ZN9NFC_PN5329waitreadyEj+0x40>
    2a3e:	00 c0       	rjmp	.+0      	; 0x2a40 <_ZN9NFC_PN5329waitreadyEj+0x46>
    2a40:	00 00       	nop
    2a42:	e6 cf       	rjmp	.-52     	; 0x2a10 <_ZN9NFC_PN5329waitreadyEj+0x16>
    2a44:	81 2f       	mov	r24, r17
    2a46:	df 91       	pop	r29
    2a48:	cf 91       	pop	r28
    2a4a:	1f 91       	pop	r17
    2a4c:	ff 90       	pop	r15
    2a4e:	ef 90       	pop	r14
    2a50:	df 90       	pop	r13
    2a52:	cf 90       	pop	r12
    2a54:	08 95       	ret

00002a56 <_ZN9NFC_PN5328readdataEPhh>:
    2a56:	ff 92       	push	r15
    2a58:	0f 93       	push	r16
    2a5a:	1f 93       	push	r17
    2a5c:	cf 93       	push	r28
    2a5e:	df 93       	push	r29
    2a60:	f6 2e       	mov	r15, r22
    2a62:	07 2f       	mov	r16, r23
    2a64:	14 2f       	mov	r17, r20
    2a66:	8f e3       	ldi	r24, 0x3F	; 63
    2a68:	9f e1       	ldi	r25, 0x1F	; 31
    2a6a:	01 97       	sbiw	r24, 0x01	; 1
    2a6c:	f1 f7       	brne	.-4      	; 0x2a6a <_ZN9NFC_PN5328readdataEPhh+0x14>
    2a6e:	00 c0       	rjmp	.+0      	; 0x2a70 <_ZN9NFC_PN5328readdataEPhh+0x1a>
    2a70:	00 00       	nop
    2a72:	42 e0       	ldi	r20, 0x02	; 2
    2a74:	41 0f       	add	r20, r17
    2a76:	64 e2       	ldi	r22, 0x24	; 36
    2a78:	86 ea       	ldi	r24, 0xA6	; 166
    2a7a:	9a e0       	ldi	r25, 0x0A	; 10
    2a7c:	0e 94 65 2c 	call	0x58ca	; 0x58ca <_ZN7TwoWire11requestFromEhh>
    2a80:	86 ea       	ldi	r24, 0xA6	; 166
    2a82:	9a e0       	ldi	r25, 0x0A	; 10
    2a84:	0e 94 11 2b 	call	0x5622	; 0x5622 <_ZN7TwoWire4readEv>
    2a88:	cf 2d       	mov	r28, r15
    2a8a:	d0 2f       	mov	r29, r16
    2a8c:	ce 01       	movw	r24, r28
    2a8e:	81 0f       	add	r24, r17
    2a90:	91 1d       	adc	r25, r1
    2a92:	8c 01       	movw	r16, r24
    2a94:	c0 17       	cp	r28, r16
    2a96:	d1 07       	cpc	r29, r17
    2a98:	61 f0       	breq	.+24     	; 0x2ab2 <_ZN9NFC_PN5328readdataEPhh+0x5c>
    2a9a:	8f e9       	ldi	r24, 0x9F	; 159
    2a9c:	9f e0       	ldi	r25, 0x0F	; 15
    2a9e:	01 97       	sbiw	r24, 0x01	; 1
    2aa0:	f1 f7       	brne	.-4      	; 0x2a9e <_ZN9NFC_PN5328readdataEPhh+0x48>
    2aa2:	00 c0       	rjmp	.+0      	; 0x2aa4 <_ZN9NFC_PN5328readdataEPhh+0x4e>
    2aa4:	00 00       	nop
    2aa6:	86 ea       	ldi	r24, 0xA6	; 166
    2aa8:	9a e0       	ldi	r25, 0x0A	; 10
    2aaa:	0e 94 11 2b 	call	0x5622	; 0x5622 <_ZN7TwoWire4readEv>
    2aae:	89 93       	st	Y+, r24
    2ab0:	f1 cf       	rjmp	.-30     	; 0x2a94 <_ZN9NFC_PN5328readdataEPhh+0x3e>
    2ab2:	df 91       	pop	r29
    2ab4:	cf 91       	pop	r28
    2ab6:	1f 91       	pop	r17
    2ab8:	0f 91       	pop	r16
    2aba:	ff 90       	pop	r15
    2abc:	08 95       	ret

00002abe <_ZN9NFC_PN5327readackEv>:
    2abe:	cf 93       	push	r28
    2ac0:	df 93       	push	r29
    2ac2:	00 d0       	rcall	.+0      	; 0x2ac4 <_ZN9NFC_PN5327readackEv+0x6>
    2ac4:	00 d0       	rcall	.+0      	; 0x2ac6 <_ZN9NFC_PN5327readackEv+0x8>
    2ac6:	00 d0       	rcall	.+0      	; 0x2ac8 <_ZN9NFC_PN5327readackEv+0xa>
    2ac8:	cd b7       	in	r28, 0x3d	; 61
    2aca:	de b7       	in	r29, 0x3e	; 62
    2acc:	46 e0       	ldi	r20, 0x06	; 6
    2ace:	be 01       	movw	r22, r28
    2ad0:	6f 5f       	subi	r22, 0xFF	; 255
    2ad2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ad4:	c0 df       	rcall	.-128    	; 0x2a56 <_ZN9NFC_PN5328readdataEPhh>
    2ad6:	46 e0       	ldi	r20, 0x06	; 6
    2ad8:	50 e0       	ldi	r21, 0x00	; 0
    2ada:	6b e6       	ldi	r22, 0x6B	; 107
    2adc:	71 e0       	ldi	r23, 0x01	; 1
    2ade:	ce 01       	movw	r24, r28
    2ae0:	01 96       	adiw	r24, 0x01	; 1
    2ae2:	0e 94 b3 37 	call	0x6f66	; 0x6f66 <strncmp>
    2ae6:	21 e0       	ldi	r18, 0x01	; 1
    2ae8:	89 2b       	or	r24, r25
    2aea:	09 f0       	breq	.+2      	; 0x2aee <_ZN9NFC_PN5327readackEv+0x30>
    2aec:	20 e0       	ldi	r18, 0x00	; 0
    2aee:	82 2f       	mov	r24, r18
    2af0:	26 96       	adiw	r28, 0x06	; 6
    2af2:	0f b6       	in	r0, 0x3f	; 63
    2af4:	f8 94       	cli
    2af6:	de bf       	out	0x3e, r29	; 62
    2af8:	0f be       	out	0x3f, r0	; 63
    2afa:	cd bf       	out	0x3d, r28	; 61
    2afc:	df 91       	pop	r29
    2afe:	cf 91       	pop	r28
    2b00:	08 95       	ret

00002b02 <_ZL8i2c_sendh>:
    2b02:	68 2f       	mov	r22, r24
    2b04:	86 ea       	ldi	r24, 0xA6	; 166
    2b06:	9a e0       	ldi	r25, 0x0A	; 10
    2b08:	0c 94 97 2b 	jmp	0x572e	; 0x572e <_ZN7TwoWire5writeEh>

00002b0c <_ZN9NFC_PN53212writecommandEPhh>:
    2b0c:	cf 92       	push	r12
    2b0e:	df 92       	push	r13
    2b10:	ef 92       	push	r14
    2b12:	ff 92       	push	r15
    2b14:	0f 93       	push	r16
    2b16:	1f 93       	push	r17
    2b18:	cf 93       	push	r28
    2b1a:	df 93       	push	r29
    2b1c:	7b 01       	movw	r14, r22
    2b1e:	c1 e0       	ldi	r28, 0x01	; 1
    2b20:	c4 0f       	add	r28, r20
    2b22:	8f e3       	ldi	r24, 0x3F	; 63
    2b24:	9f e1       	ldi	r25, 0x1F	; 31
    2b26:	01 97       	sbiw	r24, 0x01	; 1
    2b28:	f1 f7       	brne	.-4      	; 0x2b26 <_ZN9NFC_PN53212writecommandEPhh+0x1a>
    2b2a:	00 c0       	rjmp	.+0      	; 0x2b2c <_ZN9NFC_PN53212writecommandEPhh+0x20>
    2b2c:	00 00       	nop
    2b2e:	64 e2       	ldi	r22, 0x24	; 36
    2b30:	70 e0       	ldi	r23, 0x00	; 0
    2b32:	86 ea       	ldi	r24, 0xA6	; 166
    2b34:	9a e0       	ldi	r25, 0x0A	; 10
    2b36:	0e 94 f2 2b 	call	0x57e4	; 0x57e4 <_ZN7TwoWire17beginTransmissionEi>
    2b3a:	80 e0       	ldi	r24, 0x00	; 0
    2b3c:	e2 df       	rcall	.-60     	; 0x2b02 <_ZL8i2c_sendh>
    2b3e:	80 e0       	ldi	r24, 0x00	; 0
    2b40:	e0 df       	rcall	.-64     	; 0x2b02 <_ZL8i2c_sendh>
    2b42:	8f ef       	ldi	r24, 0xFF	; 255
    2b44:	de df       	rcall	.-68     	; 0x2b02 <_ZL8i2c_sendh>
    2b46:	8c 2f       	mov	r24, r28
    2b48:	dc df       	rcall	.-72     	; 0x2b02 <_ZL8i2c_sendh>
    2b4a:	8c 2f       	mov	r24, r28
    2b4c:	81 95       	neg	r24
    2b4e:	d9 df       	rcall	.-78     	; 0x2b02 <_ZL8i2c_sendh>
    2b50:	84 ed       	ldi	r24, 0xD4	; 212
    2b52:	d7 df       	rcall	.-82     	; 0x2b02 <_ZL8i2c_sendh>
    2b54:	c1 2c       	mov	r12, r1
    2b56:	83 ed       	ldi	r24, 0xD3	; 211
    2b58:	d8 2e       	mov	r13, r24
    2b5a:	d0 e0       	ldi	r29, 0x00	; 0
    2b5c:	21 97       	sbiw	r28, 0x01	; 1
    2b5e:	0c 2d       	mov	r16, r12
    2b60:	10 e0       	ldi	r17, 0x00	; 0
    2b62:	0c 17       	cp	r16, r28
    2b64:	1d 07       	cpc	r17, r29
    2b66:	54 f4       	brge	.+20     	; 0x2b7c <_ZN9NFC_PN53212writecommandEPhh+0x70>
    2b68:	0e 0d       	add	r16, r14
    2b6a:	1f 1d       	adc	r17, r15
    2b6c:	f8 01       	movw	r30, r16
    2b6e:	80 81       	ld	r24, Z
    2b70:	c8 df       	rcall	.-112    	; 0x2b02 <_ZL8i2c_sendh>
    2b72:	f8 01       	movw	r30, r16
    2b74:	80 81       	ld	r24, Z
    2b76:	d8 0e       	add	r13, r24
    2b78:	c3 94       	inc	r12
    2b7a:	f1 cf       	rjmp	.-30     	; 0x2b5e <_ZN9NFC_PN53212writecommandEPhh+0x52>
    2b7c:	8d 2d       	mov	r24, r13
    2b7e:	80 95       	com	r24
    2b80:	c0 df       	rcall	.-128    	; 0x2b02 <_ZL8i2c_sendh>
    2b82:	80 e0       	ldi	r24, 0x00	; 0
    2b84:	be df       	rcall	.-132    	; 0x2b02 <_ZL8i2c_sendh>
    2b86:	86 ea       	ldi	r24, 0xA6	; 166
    2b88:	9a e0       	ldi	r25, 0x0A	; 10
    2b8a:	df 91       	pop	r29
    2b8c:	cf 91       	pop	r28
    2b8e:	1f 91       	pop	r17
    2b90:	0f 91       	pop	r16
    2b92:	ff 90       	pop	r15
    2b94:	ef 90       	pop	r14
    2b96:	df 90       	pop	r13
    2b98:	cf 90       	pop	r12
    2b9a:	0c 94 69 2c 	jmp	0x58d2	; 0x58d2 <_ZN7TwoWire15endTransmissionEv>

00002b9e <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>:
    2b9e:	0f 93       	push	r16
    2ba0:	1f 93       	push	r17
    2ba2:	cf 93       	push	r28
    2ba4:	df 93       	push	r29
    2ba6:	ec 01       	movw	r28, r24
    2ba8:	89 01       	movw	r16, r18
    2baa:	b0 df       	rcall	.-160    	; 0x2b0c <_ZN9NFC_PN53212writecommandEPhh>
    2bac:	b8 01       	movw	r22, r16
    2bae:	ce 01       	movw	r24, r28
    2bb0:	24 df       	rcall	.-440    	; 0x29fa <_ZN9NFC_PN5329waitreadyEj>
    2bb2:	88 23       	and	r24, r24
    2bb4:	31 f0       	breq	.+12     	; 0x2bc2 <_ZN9NFC_PN53219sendCommandCheckAckEPhhj+0x24>
    2bb6:	ce 01       	movw	r24, r28
    2bb8:	df 91       	pop	r29
    2bba:	cf 91       	pop	r28
    2bbc:	1f 91       	pop	r17
    2bbe:	0f 91       	pop	r16
    2bc0:	7e cf       	rjmp	.-260    	; 0x2abe <_ZN9NFC_PN5327readackEv>
    2bc2:	80 e0       	ldi	r24, 0x00	; 0
    2bc4:	df 91       	pop	r29
    2bc6:	cf 91       	pop	r28
    2bc8:	1f 91       	pop	r17
    2bca:	0f 91       	pop	r16
    2bcc:	08 95       	ret

00002bce <_ZN9NFC_PN53218getFirmwareVersionEv>:
    2bce:	cf 93       	push	r28
    2bd0:	df 93       	push	r29
    2bd2:	ec 01       	movw	r28, r24
    2bd4:	82 e0       	ldi	r24, 0x02	; 2
    2bd6:	80 93 ad 09 	sts	0x09AD, r24	; 0x8009ad <pn532_packetbuffer>
    2bda:	28 ee       	ldi	r18, 0xE8	; 232
    2bdc:	33 e0       	ldi	r19, 0x03	; 3
    2bde:	41 e0       	ldi	r20, 0x01	; 1
    2be0:	6d ea       	ldi	r22, 0xAD	; 173
    2be2:	79 e0       	ldi	r23, 0x09	; 9
    2be4:	ce 01       	movw	r24, r28
    2be6:	db df       	rcall	.-74     	; 0x2b9e <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    2be8:	81 11       	cpse	r24, r1
    2bea:	04 c0       	rjmp	.+8      	; 0x2bf4 <_ZN9NFC_PN53218getFirmwareVersionEv+0x26>
    2bec:	60 e0       	ldi	r22, 0x00	; 0
    2bee:	70 e0       	ldi	r23, 0x00	; 0
    2bf0:	cb 01       	movw	r24, r22
    2bf2:	32 c0       	rjmp	.+100    	; 0x2c58 <_ZN9NFC_PN53218getFirmwareVersionEv+0x8a>
    2bf4:	4c e0       	ldi	r20, 0x0C	; 12
    2bf6:	6d ea       	ldi	r22, 0xAD	; 173
    2bf8:	79 e0       	ldi	r23, 0x09	; 9
    2bfa:	ce 01       	movw	r24, r28
    2bfc:	2c df       	rcall	.-424    	; 0x2a56 <_ZN9NFC_PN5328readdataEPhh>
    2bfe:	46 e0       	ldi	r20, 0x06	; 6
    2c00:	50 e0       	ldi	r21, 0x00	; 0
    2c02:	65 e6       	ldi	r22, 0x65	; 101
    2c04:	71 e0       	ldi	r23, 0x01	; 1
    2c06:	8d ea       	ldi	r24, 0xAD	; 173
    2c08:	99 e0       	ldi	r25, 0x09	; 9
    2c0a:	0e 94 b3 37 	call	0x6f66	; 0x6f66 <strncmp>
    2c0e:	89 2b       	or	r24, r25
    2c10:	69 f7       	brne	.-38     	; 0x2bec <_ZN9NFC_PN53218getFirmwareVersionEv+0x1e>
    2c12:	8d 89       	ldd	r24, Y+21	; 0x15
    2c14:	81 11       	cpse	r24, r1
    2c16:	03 c0       	rjmp	.+6      	; 0x2c1e <_ZN9NFC_PN53218getFirmwareVersionEv+0x50>
    2c18:	e7 e0       	ldi	r30, 0x07	; 7
    2c1a:	f0 e0       	ldi	r31, 0x00	; 0
    2c1c:	02 c0       	rjmp	.+4      	; 0x2c22 <_ZN9NFC_PN53218getFirmwareVersionEv+0x54>
    2c1e:	e6 e0       	ldi	r30, 0x06	; 6
    2c20:	f0 e0       	ldi	r31, 0x00	; 0
    2c22:	e3 55       	subi	r30, 0x53	; 83
    2c24:	f6 4f       	sbci	r31, 0xF6	; 246
    2c26:	60 81       	ld	r22, Z
    2c28:	86 2f       	mov	r24, r22
    2c2a:	90 e0       	ldi	r25, 0x00	; 0
    2c2c:	a0 e0       	ldi	r26, 0x00	; 0
    2c2e:	b0 e0       	ldi	r27, 0x00	; 0
    2c30:	ba 2f       	mov	r27, r26
    2c32:	a9 2f       	mov	r26, r25
    2c34:	98 2f       	mov	r25, r24
    2c36:	88 27       	eor	r24, r24
    2c38:	21 81       	ldd	r18, Z+1	; 0x01
    2c3a:	82 2b       	or	r24, r18
    2c3c:	ba 2f       	mov	r27, r26
    2c3e:	a9 2f       	mov	r26, r25
    2c40:	98 2f       	mov	r25, r24
    2c42:	88 27       	eor	r24, r24
    2c44:	22 81       	ldd	r18, Z+2	; 0x02
    2c46:	82 2b       	or	r24, r18
    2c48:	ba 2f       	mov	r27, r26
    2c4a:	a9 2f       	mov	r26, r25
    2c4c:	98 2f       	mov	r25, r24
    2c4e:	88 27       	eor	r24, r24
    2c50:	23 81       	ldd	r18, Z+3	; 0x03
    2c52:	bc 01       	movw	r22, r24
    2c54:	cd 01       	movw	r24, r26
    2c56:	62 2b       	or	r22, r18
    2c58:	df 91       	pop	r29
    2c5a:	cf 91       	pop	r28
    2c5c:	08 95       	ret

00002c5e <_ZN9NFC_PN5329SAMConfigEv>:
    2c5e:	cf 93       	push	r28
    2c60:	df 93       	push	r29
    2c62:	ec 01       	movw	r28, r24
    2c64:	94 e1       	ldi	r25, 0x14	; 20
    2c66:	90 93 ad 09 	sts	0x09AD, r25	; 0x8009ad <pn532_packetbuffer>
    2c6a:	81 e0       	ldi	r24, 0x01	; 1
    2c6c:	80 93 ae 09 	sts	0x09AE, r24	; 0x8009ae <pn532_packetbuffer+0x1>
    2c70:	90 93 af 09 	sts	0x09AF, r25	; 0x8009af <pn532_packetbuffer+0x2>
    2c74:	80 93 b0 09 	sts	0x09B0, r24	; 0x8009b0 <pn532_packetbuffer+0x3>
    2c78:	28 ee       	ldi	r18, 0xE8	; 232
    2c7a:	33 e0       	ldi	r19, 0x03	; 3
    2c7c:	44 e0       	ldi	r20, 0x04	; 4
    2c7e:	6d ea       	ldi	r22, 0xAD	; 173
    2c80:	79 e0       	ldi	r23, 0x09	; 9
    2c82:	ce 01       	movw	r24, r28
    2c84:	8c df       	rcall	.-232    	; 0x2b9e <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    2c86:	88 23       	and	r24, r24
    2c88:	a9 f0       	breq	.+42     	; 0x2cb4 <_ZN9NFC_PN5329SAMConfigEv+0x56>
    2c8a:	48 e0       	ldi	r20, 0x08	; 8
    2c8c:	6d ea       	ldi	r22, 0xAD	; 173
    2c8e:	79 e0       	ldi	r23, 0x09	; 9
    2c90:	ce 01       	movw	r24, r28
    2c92:	e1 de       	rcall	.-574    	; 0x2a56 <_ZN9NFC_PN5328readdataEPhh>
    2c94:	8d 89       	ldd	r24, Y+21	; 0x15
    2c96:	81 11       	cpse	r24, r1
    2c98:	03 c0       	rjmp	.+6      	; 0x2ca0 <_ZN9NFC_PN5329SAMConfigEv+0x42>
    2c9a:	86 e0       	ldi	r24, 0x06	; 6
    2c9c:	90 e0       	ldi	r25, 0x00	; 0
    2c9e:	02 c0       	rjmp	.+4      	; 0x2ca4 <_ZN9NFC_PN5329SAMConfigEv+0x46>
    2ca0:	85 e0       	ldi	r24, 0x05	; 5
    2ca2:	90 e0       	ldi	r25, 0x00	; 0
    2ca4:	fc 01       	movw	r30, r24
    2ca6:	e3 55       	subi	r30, 0x53	; 83
    2ca8:	f6 4f       	sbci	r31, 0xF6	; 246
    2caa:	81 e0       	ldi	r24, 0x01	; 1
    2cac:	90 81       	ld	r25, Z
    2cae:	95 31       	cpi	r25, 0x15	; 21
    2cb0:	09 f0       	breq	.+2      	; 0x2cb4 <_ZN9NFC_PN5329SAMConfigEv+0x56>
    2cb2:	80 e0       	ldi	r24, 0x00	; 0
    2cb4:	df 91       	pop	r29
    2cb6:	cf 91       	pop	r28
    2cb8:	08 95       	ret

00002cba <_ZN9NFC_PN53227setPassiveActivationRetriesEh>:
    2cba:	ed ea       	ldi	r30, 0xAD	; 173
    2cbc:	f9 e0       	ldi	r31, 0x09	; 9
    2cbe:	22 e3       	ldi	r18, 0x32	; 50
    2cc0:	20 83       	st	Z, r18
    2cc2:	25 e0       	ldi	r18, 0x05	; 5
    2cc4:	21 83       	std	Z+1, r18	; 0x01
    2cc6:	2f ef       	ldi	r18, 0xFF	; 255
    2cc8:	22 83       	std	Z+2, r18	; 0x02
    2cca:	21 e0       	ldi	r18, 0x01	; 1
    2ccc:	23 83       	std	Z+3, r18	; 0x03
    2cce:	64 83       	std	Z+4, r22	; 0x04
    2cd0:	28 ee       	ldi	r18, 0xE8	; 232
    2cd2:	33 e0       	ldi	r19, 0x03	; 3
    2cd4:	45 e0       	ldi	r20, 0x05	; 5
    2cd6:	bf 01       	movw	r22, r30
    2cd8:	62 cf       	rjmp	.-316    	; 0x2b9e <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>

00002cda <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j>:
    2cda:	af 92       	push	r10
    2cdc:	bf 92       	push	r11
    2cde:	cf 92       	push	r12
    2ce0:	df 92       	push	r13
    2ce2:	ef 92       	push	r14
    2ce4:	ff 92       	push	r15
    2ce6:	0f 93       	push	r16
    2ce8:	1f 93       	push	r17
    2cea:	cf 93       	push	r28
    2cec:	df 93       	push	r29
    2cee:	ec 01       	movw	r28, r24
    2cf0:	7a 01       	movw	r14, r20
    2cf2:	59 01       	movw	r10, r18
    2cf4:	68 01       	movw	r12, r16
    2cf6:	8a e4       	ldi	r24, 0x4A	; 74
    2cf8:	80 93 ad 09 	sts	0x09AD, r24	; 0x8009ad <pn532_packetbuffer>
    2cfc:	81 e0       	ldi	r24, 0x01	; 1
    2cfe:	80 93 ae 09 	sts	0x09AE, r24	; 0x8009ae <pn532_packetbuffer+0x1>
    2d02:	60 93 af 09 	sts	0x09AF, r22	; 0x8009af <pn532_packetbuffer+0x2>
    2d06:	98 01       	movw	r18, r16
    2d08:	43 e0       	ldi	r20, 0x03	; 3
    2d0a:	6d ea       	ldi	r22, 0xAD	; 173
    2d0c:	79 e0       	ldi	r23, 0x09	; 9
    2d0e:	ce 01       	movw	r24, r28
    2d10:	46 df       	rcall	.-372    	; 0x2b9e <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    2d12:	18 2f       	mov	r17, r24
    2d14:	88 23       	and	r24, r24
    2d16:	41 f1       	breq	.+80     	; 0x2d68 <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x8e>
    2d18:	8d 89       	ldd	r24, Y+21	; 0x15
    2d1a:	88 23       	and	r24, r24
    2d1c:	79 f0       	breq	.+30     	; 0x2d3c <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x62>
    2d1e:	44 e1       	ldi	r20, 0x14	; 20
    2d20:	6d ea       	ldi	r22, 0xAD	; 173
    2d22:	79 e0       	ldi	r23, 0x09	; 9
    2d24:	ce 01       	movw	r24, r28
    2d26:	97 de       	rcall	.-722    	; 0x2a56 <_ZN9NFC_PN5328readdataEPhh>
    2d28:	80 91 b4 09 	lds	r24, 0x09B4	; 0x8009b4 <pn532_packetbuffer+0x7>
    2d2c:	81 30       	cpi	r24, 0x01	; 1
    2d2e:	e1 f4       	brne	.+56     	; 0x2d68 <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x8e>
    2d30:	80 91 b9 09 	lds	r24, 0x09B9	; 0x8009b9 <pn532_packetbuffer+0xc>
    2d34:	f5 01       	movw	r30, r10
    2d36:	80 83       	st	Z, r24
    2d38:	80 e0       	ldi	r24, 0x00	; 0
    2d3a:	06 c0       	rjmp	.+12     	; 0x2d48 <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x6e>
    2d3c:	b6 01       	movw	r22, r12
    2d3e:	ce 01       	movw	r24, r28
    2d40:	5c de       	rcall	.-840    	; 0x29fa <_ZN9NFC_PN5329waitreadyEj>
    2d42:	81 11       	cpse	r24, r1
    2d44:	ec cf       	rjmp	.-40     	; 0x2d1e <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x44>
    2d46:	10 c0       	rjmp	.+32     	; 0x2d68 <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x8e>
    2d48:	90 91 b9 09 	lds	r25, 0x09B9	; 0x8009b9 <pn532_packetbuffer+0xc>
    2d4c:	89 17       	cp	r24, r25
    2d4e:	68 f4       	brcc	.+26     	; 0x2d6a <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x90>
    2d50:	28 2f       	mov	r18, r24
    2d52:	30 e0       	ldi	r19, 0x00	; 0
    2d54:	f9 01       	movw	r30, r18
    2d56:	e3 55       	subi	r30, 0x53	; 83
    2d58:	f6 4f       	sbci	r31, 0xF6	; 246
    2d5a:	95 85       	ldd	r25, Z+13	; 0x0d
    2d5c:	f7 01       	movw	r30, r14
    2d5e:	e2 0f       	add	r30, r18
    2d60:	f3 1f       	adc	r31, r19
    2d62:	90 83       	st	Z, r25
    2d64:	8f 5f       	subi	r24, 0xFF	; 255
    2d66:	f0 cf       	rjmp	.-32     	; 0x2d48 <_ZN9NFC_PN53219readPassiveTargetIDEhPhS0_j+0x6e>
    2d68:	10 e0       	ldi	r17, 0x00	; 0
    2d6a:	81 2f       	mov	r24, r17
    2d6c:	df 91       	pop	r29
    2d6e:	cf 91       	pop	r28
    2d70:	1f 91       	pop	r17
    2d72:	0f 91       	pop	r16
    2d74:	ff 90       	pop	r15
    2d76:	ef 90       	pop	r14
    2d78:	df 90       	pop	r13
    2d7a:	cf 90       	pop	r12
    2d7c:	bf 90       	pop	r11
    2d7e:	af 90       	pop	r10
    2d80:	08 95       	ret

00002d82 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_>:

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
uint8_t NFC_PN532::mifareclassic_AuthenticateBlock (uint8_t * uid, uint8_t uidLen, uint32_t blockNumber, uint8_t keyNumber, uint8_t * keyData)
{
    2d82:	af 92       	push	r10
    2d84:	bf 92       	push	r11
    2d86:	cf 92       	push	r12
    2d88:	df 92       	push	r13
    2d8a:	ef 92       	push	r14
    2d8c:	0f 93       	push	r16
    2d8e:	1f 93       	push	r17
    2d90:	cf 93       	push	r28
    2d92:	df 93       	push	r29
    2d94:	ec 01       	movw	r28, r24
    2d96:	14 2f       	mov	r17, r20
  uint8_t len;
  uint8_t i;

  // Hang on to the key and uid data
  memcpy (_key, keyData, 6);
    2d98:	5c 01       	movw	r10, r24
    2d9a:	8e e0       	ldi	r24, 0x0E	; 14
    2d9c:	a8 0e       	add	r10, r24
    2d9e:	b1 1c       	adc	r11, r1
    2da0:	86 e0       	ldi	r24, 0x06	; 6
    2da2:	f6 01       	movw	r30, r12
    2da4:	d5 01       	movw	r26, r10
    2da6:	01 90       	ld	r0, Z+
    2da8:	0d 92       	st	X+, r0
    2daa:	8a 95       	dec	r24
    2dac:	e1 f7       	brne	.-8      	; 0x2da6 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x24>
  memcpy (_uid, uid, uidLen);
    2dae:	50 e0       	ldi	r21, 0x00	; 0
    2db0:	ce 01       	movw	r24, r28
    2db2:	06 96       	adiw	r24, 0x06	; 6
    2db4:	0e 94 9a 37 	call	0x6f34	; 0x6f34 <memcpy>
  _uidLen = uidLen;
    2db8:	1d 87       	std	Y+13, r17	; 0x0d
    PN532DEBUGPRINT.print(F("Using authentication KEY "));PN532DEBUGPRINT.print(keyNumber ? 'B' : 'A');PN532DEBUGPRINT.print(F(": "));
    NFC_PN532::PrintHex(_key, 6);
  #endif

  // Prepare the authentication command //
  pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;   /* Data Exchange Header */
    2dba:	80 e4       	ldi	r24, 0x40	; 64
    2dbc:	80 93 ad 09 	sts	0x09AD, r24	; 0x8009ad <pn532_packetbuffer>
  pn532_packetbuffer[1] = 1;                              /* Max card numbers */
    2dc0:	81 e0       	ldi	r24, 0x01	; 1
    2dc2:	80 93 ae 09 	sts	0x09AE, r24	; 0x8009ae <pn532_packetbuffer+0x1>
  pn532_packetbuffer[2] = (keyNumber) ? MIFARE_CMD_AUTH_B : MIFARE_CMD_AUTH_A;
    2dc6:	e1 10       	cpse	r14, r1
    2dc8:	02 c0       	rjmp	.+4      	; 0x2dce <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x4c>
    2dca:	80 e6       	ldi	r24, 0x60	; 96
    2dcc:	01 c0       	rjmp	.+2      	; 0x2dd0 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x4e>
    2dce:	81 e6       	ldi	r24, 0x61	; 97
    2dd0:	80 93 af 09 	sts	0x09AF, r24	; 0x8009af <pn532_packetbuffer+0x2>
  pn532_packetbuffer[3] = blockNumber;                    /* Block Number (1K = 0..63, 4K = 0..255 */
    2dd4:	00 93 b0 09 	sts	0x09B0, r16	; 0x8009b0 <pn532_packetbuffer+0x3>
  memcpy (pn532_packetbuffer+4, _key, 6);
    2dd8:	86 e0       	ldi	r24, 0x06	; 6
    2dda:	f5 01       	movw	r30, r10
    2ddc:	a1 eb       	ldi	r26, 0xB1	; 177
    2dde:	b9 e0       	ldi	r27, 0x09	; 9
    2de0:	01 90       	ld	r0, Z+
    2de2:	0d 92       	st	X+, r0
    2de4:	8a 95       	dec	r24
    2de6:	e1 f7       	brne	.-8      	; 0x2de0 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x5e>
  for (i = 0; i < _uidLen; i++)
    2de8:	80 e0       	ldi	r24, 0x00	; 0
    2dea:	4d 85       	ldd	r20, Y+13	; 0x0d
    2dec:	84 17       	cp	r24, r20
    2dee:	60 f4       	brcc	.+24     	; 0x2e08 <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x86>
  {
    pn532_packetbuffer[10+i] = _uid[i];                /* 4 byte card ID */
    2df0:	28 2f       	mov	r18, r24
    2df2:	30 e0       	ldi	r19, 0x00	; 0
    2df4:	fe 01       	movw	r30, r28
    2df6:	e2 0f       	add	r30, r18
    2df8:	f3 1f       	adc	r31, r19
    2dfa:	96 81       	ldd	r25, Z+6	; 0x06
    2dfc:	f9 01       	movw	r30, r18
    2dfe:	e3 55       	subi	r30, 0x53	; 83
    2e00:	f6 4f       	sbci	r31, 0xF6	; 246
    2e02:	92 87       	std	Z+10, r25	; 0x0a
  pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;   /* Data Exchange Header */
  pn532_packetbuffer[1] = 1;                              /* Max card numbers */
  pn532_packetbuffer[2] = (keyNumber) ? MIFARE_CMD_AUTH_B : MIFARE_CMD_AUTH_A;
  pn532_packetbuffer[3] = blockNumber;                    /* Block Number (1K = 0..63, 4K = 0..255 */
  memcpy (pn532_packetbuffer+4, _key, 6);
  for (i = 0; i < _uidLen; i++)
    2e04:	8f 5f       	subi	r24, 0xFF	; 255
    2e06:	f1 cf       	rjmp	.-30     	; 0x2dea <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0x68>
  {
    pn532_packetbuffer[10+i] = _uid[i];                /* 4 byte card ID */
  }

  if (! sendCommandCheckAck(pn532_packetbuffer, 10+_uidLen))
    2e08:	46 5f       	subi	r20, 0xF6	; 246
    2e0a:	28 ee       	ldi	r18, 0xE8	; 232
    2e0c:	33 e0       	ldi	r19, 0x03	; 3
    2e0e:	6d ea       	ldi	r22, 0xAD	; 173
    2e10:	79 e0       	ldi	r23, 0x09	; 9
    2e12:	ce 01       	movw	r24, r28
    2e14:	c4 de       	rcall	.-632    	; 0x2b9e <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    2e16:	88 23       	and	r24, r24
    2e18:	49 f0       	breq	.+18     	; 0x2e2c <_ZN9NFC_PN53231mifareclassic_AuthenticateBlockEPhhmhS0_+0xaa>
    return 0;

  // Read the response packet
  readdata(pn532_packetbuffer, 12);
    2e1a:	4c e0       	ldi	r20, 0x0C	; 12
    2e1c:	6d ea       	ldi	r22, 0xAD	; 173
    2e1e:	79 e0       	ldi	r23, 0x09	; 9
    2e20:	ce 01       	movw	r24, r28
    2e22:	19 de       	rcall	.-974    	; 0x2a56 <_ZN9NFC_PN5328readdataEPhh>
  {
    pn532_packetbuffer[10+i] = _uid[i];                /* 4 byte card ID */
  }

  if (! sendCommandCheckAck(pn532_packetbuffer, 10+_uidLen))
    return 0;
    2e24:	81 e0       	ldi	r24, 0x01	; 1
    2e26:	90 91 b4 09 	lds	r25, 0x09B4	; 0x8009b4 <pn532_packetbuffer+0x7>
    2e2a:	91 11       	cpse	r25, r1
    2e2c:	80 e0       	ldi	r24, 0x00	; 0
    #endif
    return 0;
  }

  return 1;
}
    2e2e:	df 91       	pop	r29
    2e30:	cf 91       	pop	r28
    2e32:	1f 91       	pop	r17
    2e34:	0f 91       	pop	r16
    2e36:	ef 90       	pop	r14
    2e38:	df 90       	pop	r13
    2e3a:	cf 90       	pop	r12
    2e3c:	bf 90       	pop	r11
    2e3e:	af 90       	pop	r10
    2e40:	08 95       	ret

00002e42 <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh>:

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
uint8_t NFC_PN532::mifareclassic_ReadDataBlock (uint8_t blockNumber, uint8_t * data)
{
    2e42:	0f 93       	push	r16
    2e44:	1f 93       	push	r17
    2e46:	cf 93       	push	r28
    2e48:	df 93       	push	r29
    2e4a:	ec 01       	movw	r28, r24
    2e4c:	8a 01       	movw	r16, r20
  #ifdef MIFAREDEBUG
    PN532DEBUGPRINT.print(F("Trying to read 16 bytes from block "));PN532DEBUGPRINT.println(blockNumber);
  #endif

  /* Prepare the command */
  pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;
    2e4e:	80 e4       	ldi	r24, 0x40	; 64
    2e50:	80 93 ad 09 	sts	0x09AD, r24	; 0x8009ad <pn532_packetbuffer>
  pn532_packetbuffer[1] = 1;                      /* Card number */
    2e54:	81 e0       	ldi	r24, 0x01	; 1
    2e56:	80 93 ae 09 	sts	0x09AE, r24	; 0x8009ae <pn532_packetbuffer+0x1>
  pn532_packetbuffer[2] = MIFARE_CMD_READ;        /* Mifare Read command = 0x30 */
    2e5a:	80 e3       	ldi	r24, 0x30	; 48
    2e5c:	80 93 af 09 	sts	0x09AF, r24	; 0x8009af <pn532_packetbuffer+0x2>
  pn532_packetbuffer[3] = blockNumber;            /* Block Number (0..63 for 1K, 0..255 for 4K) */
    2e60:	60 93 b0 09 	sts	0x09B0, r22	; 0x8009b0 <pn532_packetbuffer+0x3>

  /* Send the command */
  if (! sendCommandCheckAck(pn532_packetbuffer, 4))
    2e64:	28 ee       	ldi	r18, 0xE8	; 232
    2e66:	33 e0       	ldi	r19, 0x03	; 3
    2e68:	44 e0       	ldi	r20, 0x04	; 4
    2e6a:	6d ea       	ldi	r22, 0xAD	; 173
    2e6c:	79 e0       	ldi	r23, 0x09	; 9
    2e6e:	ce 01       	movw	r24, r28
    2e70:	96 de       	rcall	.-724    	; 0x2b9e <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    2e72:	81 11       	cpse	r24, r1
    2e74:	02 c0       	rjmp	.+4      	; 0x2e7a <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh+0x38>
  {
    #ifdef MIFAREDEBUG
      PN532DEBUGPRINT.println(F("Failed to receive ACK for read command"));
    #endif
    return 0;
    2e76:	80 e0       	ldi	r24, 0x00	; 0
    2e78:	12 c0       	rjmp	.+36     	; 0x2e9e <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh+0x5c>
  }

  /* Read the response packet */
  readdata(pn532_packetbuffer, 26);
    2e7a:	4a e1       	ldi	r20, 0x1A	; 26
    2e7c:	6d ea       	ldi	r22, 0xAD	; 173
    2e7e:	79 e0       	ldi	r23, 0x09	; 9
    2e80:	ce 01       	movw	r24, r28
    2e82:	e9 dd       	rcall	.-1070   	; 0x2a56 <_ZN9NFC_PN5328readdataEPhh>

  /* If byte 8 isn't 0x00 we probably have an error */
  if (pn532_packetbuffer[7] != 0x00)
    2e84:	80 91 b4 09 	lds	r24, 0x09B4	; 0x8009b4 <pn532_packetbuffer+0x7>
    2e88:	81 11       	cpse	r24, r1
    2e8a:	f5 cf       	rjmp	.-22     	; 0x2e76 <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh+0x34>
    return 0;
  }

  /* Copy the 16 data bytes to the output buffer        */
  /* Block content starts at byte 9 of a valid response */
  memcpy (data, pn532_packetbuffer+8, 16);
    2e8c:	80 e1       	ldi	r24, 0x10	; 16
    2e8e:	e5 eb       	ldi	r30, 0xB5	; 181
    2e90:	f9 e0       	ldi	r31, 0x09	; 9
    2e92:	d8 01       	movw	r26, r16
    2e94:	01 90       	ld	r0, Z+
    2e96:	0d 92       	st	X+, r0
    2e98:	8a 95       	dec	r24
    2e9a:	e1 f7       	brne	.-8      	; 0x2e94 <_ZN9NFC_PN53227mifareclassic_ReadDataBlockEhPh+0x52>
    PN532DEBUGPRINT.print(F("Block "));
    PN532DEBUGPRINT.println(blockNumber);
    NFC_PN532::PrintHexChar(data, 16);
  #endif

  return 1;
    2e9c:	81 e0       	ldi	r24, 0x01	; 1
}
    2e9e:	df 91       	pop	r29
    2ea0:	cf 91       	pop	r28
    2ea2:	1f 91       	pop	r17
    2ea4:	0f 91       	pop	r16
    2ea6:	08 95       	ret

00002ea8 <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh>:

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
uint8_t NFC_PN532::mifareclassic_WriteDataBlock (uint8_t blockNumber, uint8_t * data)
{
    2ea8:	cf 93       	push	r28
    2eaa:	df 93       	push	r29
    2eac:	ec 01       	movw	r28, r24
  #ifdef MIFAREDEBUG
    PN532DEBUGPRINT.print(F("Trying to write 16 bytes to block "));PN532DEBUGPRINT.println(blockNumber);
  #endif

  /* Prepare the first command */
  pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;
    2eae:	80 e4       	ldi	r24, 0x40	; 64
    2eb0:	80 93 ad 09 	sts	0x09AD, r24	; 0x8009ad <pn532_packetbuffer>
  pn532_packetbuffer[1] = 1;                      /* Card number */
    2eb4:	81 e0       	ldi	r24, 0x01	; 1
    2eb6:	80 93 ae 09 	sts	0x09AE, r24	; 0x8009ae <pn532_packetbuffer+0x1>
  pn532_packetbuffer[2] = MIFARE_CMD_WRITE;       /* Mifare Write command = 0xA0 */
    2eba:	80 ea       	ldi	r24, 0xA0	; 160
    2ebc:	80 93 af 09 	sts	0x09AF, r24	; 0x8009af <pn532_packetbuffer+0x2>
  pn532_packetbuffer[3] = blockNumber;            /* Block Number (0..63 for 1K, 0..255 for 4K) */
    2ec0:	60 93 b0 09 	sts	0x09B0, r22	; 0x8009b0 <pn532_packetbuffer+0x3>
  memcpy (pn532_packetbuffer+4, data, 16);          /* Data Payload */
    2ec4:	80 e1       	ldi	r24, 0x10	; 16
    2ec6:	fa 01       	movw	r30, r20
    2ec8:	a1 eb       	ldi	r26, 0xB1	; 177
    2eca:	b9 e0       	ldi	r27, 0x09	; 9
    2ecc:	01 90       	ld	r0, Z+
    2ece:	0d 92       	st	X+, r0
    2ed0:	8a 95       	dec	r24
    2ed2:	e1 f7       	brne	.-8      	; 0x2ecc <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh+0x24>

  /* Send the command */
  if (! sendCommandCheckAck(pn532_packetbuffer, 20))
    2ed4:	28 ee       	ldi	r18, 0xE8	; 232
    2ed6:	33 e0       	ldi	r19, 0x03	; 3
    2ed8:	44 e1       	ldi	r20, 0x14	; 20
    2eda:	6d ea       	ldi	r22, 0xAD	; 173
    2edc:	79 e0       	ldi	r23, 0x09	; 9
    2ede:	ce 01       	movw	r24, r28
    2ee0:	5e de       	rcall	.-836    	; 0x2b9e <_ZN9NFC_PN53219sendCommandCheckAckEPhhj>
    2ee2:	88 23       	and	r24, r24
    2ee4:	69 f0       	breq	.+26     	; 0x2f00 <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh+0x58>
    2ee6:	8f e3       	ldi	r24, 0x3F	; 63
    2ee8:	9c e9       	ldi	r25, 0x9C	; 156
    2eea:	01 97       	sbiw	r24, 0x01	; 1
    2eec:	f1 f7       	brne	.-4      	; 0x2eea <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh+0x42>
    2eee:	00 c0       	rjmp	.+0      	; 0x2ef0 <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh+0x48>
    2ef0:	00 00       	nop
    return 0;
  }
  _delay_ms(10);

  /* Read the response packet */
  readdata(pn532_packetbuffer, 26);
    2ef2:	4a e1       	ldi	r20, 0x1A	; 26
    2ef4:	6d ea       	ldi	r22, 0xAD	; 173
    2ef6:	79 e0       	ldi	r23, 0x09	; 9
    2ef8:	ce 01       	movw	r24, r28
    2efa:	ad dd       	rcall	.-1190   	; 0x2a56 <_ZN9NFC_PN5328readdataEPhh>
    2efc:	81 e0       	ldi	r24, 0x01	; 1
    2efe:	01 c0       	rjmp	.+2      	; 0x2f02 <_ZN9NFC_PN53228mifareclassic_WriteDataBlockEhPh+0x5a>
  if (! sendCommandCheckAck(pn532_packetbuffer, 20))
  {
    #ifdef MIFAREDEBUG
      PN532DEBUGPRINT.println(F("Failed to receive ACK for write command"));
    #endif
    return 0;
    2f00:	80 e0       	ldi	r24, 0x00	; 0

  /* Read the response packet */
  readdata(pn532_packetbuffer, 26);

  return 1;
}
    2f02:	df 91       	pop	r29
    2f04:	cf 91       	pop	r28
    2f06:	08 95       	ret

00002f08 <_ZL9date2daysjhh>:
} // of method pinAlarm()                                                     //                                  //
/*******************************************************************************************************************
** Method pinSquareWave() will set the control register flag to make the INT/SQW Pin produce a 1Hz signal         **
*******************************************************************************************************************/
void DS3231M_Class::pinSquareWave() {                                         //                                  //
  writeByte(DS3231M_CONTROL,readByte(DS3231M_CONTROL)|0x4);                   // Set bit 3 to off                 //
    2f08:	80 3d       	cpi	r24, 0xD0	; 208
    2f0a:	27 e0       	ldi	r18, 0x07	; 7
    2f0c:	92 07       	cpc	r25, r18
    2f0e:	10 f0       	brcs	.+4      	; 0x2f14 <_ZL9date2daysjhh+0xc>
    2f10:	80 5d       	subi	r24, 0xD0	; 208
    2f12:	97 40       	sbci	r25, 0x07	; 7
    2f14:	50 e0       	ldi	r21, 0x00	; 0
    2f16:	e6 e2       	ldi	r30, 0x26	; 38
    2f18:	f2 e0       	ldi	r31, 0x02	; 2
    2f1a:	21 e0       	ldi	r18, 0x01	; 1
    2f1c:	26 17       	cp	r18, r22
    2f1e:	30 f4       	brcc	.+12     	; 0x2f2c <_ZL9date2daysjhh+0x24>
    2f20:	34 91       	lpm	r19, Z
    2f22:	43 0f       	add	r20, r19
    2f24:	51 1d       	adc	r21, r1
    2f26:	2f 5f       	subi	r18, 0xFF	; 255
    2f28:	31 96       	adiw	r30, 0x01	; 1
    2f2a:	f8 cf       	rjmp	.-16     	; 0x2f1c <_ZL9date2daysjhh+0x14>
    2f2c:	63 30       	cpi	r22, 0x03	; 3
    2f2e:	38 f0       	brcs	.+14     	; 0x2f3e <_ZL9date2daysjhh+0x36>
    2f30:	9c 01       	movw	r18, r24
    2f32:	23 70       	andi	r18, 0x03	; 3
    2f34:	33 27       	eor	r19, r19
    2f36:	23 2b       	or	r18, r19
    2f38:	11 f4       	brne	.+4      	; 0x2f3e <_ZL9date2daysjhh+0x36>
    2f3a:	4f 5f       	subi	r20, 0xFF	; 255
    2f3c:	5f 4f       	sbci	r21, 0xFF	; 255
    2f3e:	bc 01       	movw	r22, r24
    2f40:	6d 5f       	subi	r22, 0xFD	; 253
    2f42:	7f 4f       	sbci	r23, 0xFF	; 255
    2f44:	76 95       	lsr	r23
    2f46:	67 95       	ror	r22
    2f48:	76 95       	lsr	r23
    2f4a:	67 95       	ror	r22
    2f4c:	ed e6       	ldi	r30, 0x6D	; 109
    2f4e:	f1 e0       	ldi	r31, 0x01	; 1
    2f50:	8e 9f       	mul	r24, r30
    2f52:	90 01       	movw	r18, r0
    2f54:	8f 9f       	mul	r24, r31
    2f56:	30 0d       	add	r19, r0
    2f58:	9e 9f       	mul	r25, r30
    2f5a:	30 0d       	add	r19, r0
    2f5c:	11 24       	eor	r1, r1
    2f5e:	c9 01       	movw	r24, r18
    2f60:	01 97       	sbiw	r24, 0x01	; 1
    2f62:	86 0f       	add	r24, r22
    2f64:	97 1f       	adc	r25, r23
    2f66:	84 0f       	add	r24, r20
    2f68:	95 1f       	adc	r25, r21
    2f6a:	08 95       	ret

00002f6c <_ZL6conv2dPKc>:
    2f6c:	fc 01       	movw	r30, r24
    2f6e:	90 81       	ld	r25, Z
    2f70:	90 53       	subi	r25, 0x30	; 48
    2f72:	9a 30       	cpi	r25, 0x0A	; 10
    2f74:	08 f0       	brcs	.+2      	; 0x2f78 <_ZL6conv2dPKc+0xc>
    2f76:	90 e0       	ldi	r25, 0x00	; 0
    2f78:	81 81       	ldd	r24, Z+1	; 0x01
    2f7a:	80 53       	subi	r24, 0x30	; 48
    2f7c:	2a e0       	ldi	r18, 0x0A	; 10
    2f7e:	92 9f       	mul	r25, r18
    2f80:	80 0d       	add	r24, r0
    2f82:	11 24       	eor	r1, r1
    2f84:	08 95       	ret

00002f86 <_ZN8DateTimeC1Em>:
    2f86:	8f 92       	push	r8
    2f88:	9f 92       	push	r9
    2f8a:	af 92       	push	r10
    2f8c:	bf 92       	push	r11
    2f8e:	cf 92       	push	r12
    2f90:	df 92       	push	r13
    2f92:	ef 92       	push	r14
    2f94:	ff 92       	push	r15
    2f96:	cf 93       	push	r28
    2f98:	df 93       	push	r29
    2f9a:	ec 01       	movw	r28, r24
    2f9c:	6a 01       	movw	r12, r20
    2f9e:	7b 01       	movw	r14, r22
    2fa0:	80 e8       	ldi	r24, 0x80	; 128
    2fa2:	c8 1a       	sub	r12, r24
    2fa4:	83 e4       	ldi	r24, 0x43	; 67
    2fa6:	d8 0a       	sbc	r13, r24
    2fa8:	8d e6       	ldi	r24, 0x6D	; 109
    2faa:	e8 0a       	sbc	r14, r24
    2fac:	88 e3       	ldi	r24, 0x38	; 56
    2fae:	f8 0a       	sbc	r15, r24
    2fb0:	8c e3       	ldi	r24, 0x3C	; 60
    2fb2:	88 2e       	mov	r8, r24
    2fb4:	91 2c       	mov	r9, r1
    2fb6:	a1 2c       	mov	r10, r1
    2fb8:	b1 2c       	mov	r11, r1
    2fba:	c7 01       	movw	r24, r14
    2fbc:	b6 01       	movw	r22, r12
    2fbe:	a5 01       	movw	r20, r10
    2fc0:	94 01       	movw	r18, r8
    2fc2:	0e 94 21 35 	call	0x6a42	; 0x6a42 <__udivmodsi4>
    2fc6:	6d 83       	std	Y+5, r22	; 0x05
    2fc8:	ca 01       	movw	r24, r20
    2fca:	b9 01       	movw	r22, r18
    2fcc:	a5 01       	movw	r20, r10
    2fce:	94 01       	movw	r18, r8
    2fd0:	0e 94 21 35 	call	0x6a42	; 0x6a42 <__udivmodsi4>
    2fd4:	6c 83       	std	Y+4, r22	; 0x04
    2fd6:	c7 01       	movw	r24, r14
    2fd8:	b6 01       	movw	r22, r12
    2fda:	20 e1       	ldi	r18, 0x10	; 16
    2fdc:	3e e0       	ldi	r19, 0x0E	; 14
    2fde:	40 e0       	ldi	r20, 0x00	; 0
    2fe0:	50 e0       	ldi	r21, 0x00	; 0
    2fe2:	0e 94 21 35 	call	0x6a42	; 0x6a42 <__udivmodsi4>
    2fe6:	ca 01       	movw	r24, r20
    2fe8:	b9 01       	movw	r22, r18
    2fea:	28 e1       	ldi	r18, 0x18	; 24
    2fec:	30 e0       	ldi	r19, 0x00	; 0
    2fee:	40 e0       	ldi	r20, 0x00	; 0
    2ff0:	50 e0       	ldi	r21, 0x00	; 0
    2ff2:	0e 94 21 35 	call	0x6a42	; 0x6a42 <__udivmodsi4>
    2ff6:	6b 83       	std	Y+3, r22	; 0x03
    2ff8:	c7 01       	movw	r24, r14
    2ffa:	b6 01       	movw	r22, r12
    2ffc:	20 e8       	ldi	r18, 0x80	; 128
    2ffe:	31 e5       	ldi	r19, 0x51	; 81
    3000:	41 e0       	ldi	r20, 0x01	; 1
    3002:	50 e0       	ldi	r21, 0x00	; 0
    3004:	0e 94 21 35 	call	0x6a42	; 0x6a42 <__udivmodsi4>
    3008:	18 82       	st	Y, r1
    300a:	88 81       	ld	r24, Y
    300c:	98 2f       	mov	r25, r24
    300e:	93 70       	andi	r25, 0x03	; 3
    3010:	41 e0       	ldi	r20, 0x01	; 1
    3012:	50 e0       	ldi	r21, 0x00	; 0
    3014:	11 f0       	breq	.+4      	; 0x301a <_ZN8DateTimeC1Em+0x94>
    3016:	40 e0       	ldi	r20, 0x00	; 0
    3018:	50 e0       	ldi	r21, 0x00	; 0
    301a:	ba 01       	movw	r22, r20
    301c:	63 59       	subi	r22, 0x93	; 147
    301e:	7e 4f       	sbci	r23, 0xFE	; 254
    3020:	26 17       	cp	r18, r22
    3022:	37 07       	cpc	r19, r23
    3024:	38 f0       	brcs	.+14     	; 0x3034 <_ZN8DateTimeC1Em+0xae>
    3026:	24 1b       	sub	r18, r20
    3028:	35 0b       	sbc	r19, r21
    302a:	2d 56       	subi	r18, 0x6D	; 109
    302c:	31 40       	sbci	r19, 0x01	; 1
    302e:	8f 5f       	subi	r24, 0xFF	; 255
    3030:	88 83       	st	Y, r24
    3032:	eb cf       	rjmp	.-42     	; 0x300a <_ZN8DateTimeC1Em+0x84>
    3034:	81 e0       	ldi	r24, 0x01	; 1
    3036:	89 83       	std	Y+1, r24	; 0x01
    3038:	89 81       	ldd	r24, Y+1	; 0x01
    303a:	e8 2f       	mov	r30, r24
    303c:	f0 e0       	ldi	r31, 0x00	; 0
    303e:	eb 5d       	subi	r30, 0xDB	; 219
    3040:	fd 4f       	sbci	r31, 0xFD	; 253
    3042:	e4 91       	lpm	r30, Z
    3044:	91 11       	cpse	r25, r1
    3046:	03 c0       	rjmp	.+6      	; 0x304e <_ZN8DateTimeC1Em+0xc8>
    3048:	82 30       	cpi	r24, 0x02	; 2
    304a:	09 f4       	brne	.+2      	; 0x304e <_ZN8DateTimeC1Em+0xc8>
    304c:	ef 5f       	subi	r30, 0xFF	; 255
    304e:	f0 e0       	ldi	r31, 0x00	; 0
    3050:	2e 17       	cp	r18, r30
    3052:	3f 07       	cpc	r19, r31
    3054:	20 f0       	brcs	.+8      	; 0x305e <_ZN8DateTimeC1Em+0xd8>
    3056:	2e 1b       	sub	r18, r30
    3058:	3f 0b       	sbc	r19, r31
    305a:	8f 5f       	subi	r24, 0xFF	; 255
    305c:	ec cf       	rjmp	.-40     	; 0x3036 <_ZN8DateTimeC1Em+0xb0>
    305e:	2f 5f       	subi	r18, 0xFF	; 255
    3060:	2a 83       	std	Y+2, r18	; 0x02
    3062:	df 91       	pop	r29
    3064:	cf 91       	pop	r28
    3066:	ff 90       	pop	r15
    3068:	ef 90       	pop	r14
    306a:	df 90       	pop	r13
    306c:	cf 90       	pop	r12
    306e:	bf 90       	pop	r11
    3070:	af 90       	pop	r10
    3072:	9f 90       	pop	r9
    3074:	8f 90       	pop	r8
    3076:	08 95       	ret

00003078 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>:
    3078:	ef 92       	push	r14
    307a:	ff 92       	push	r15
    307c:	0f 93       	push	r16
    307e:	1f 93       	push	r17
    3080:	cf 93       	push	r28
    3082:	df 93       	push	r29
    3084:	cd b7       	in	r28, 0x3d	; 61
    3086:	de b7       	in	r29, 0x3e	; 62
    3088:	2b 97       	sbiw	r28, 0x0b	; 11
    308a:	0f b6       	in	r0, 0x3f	; 63
    308c:	f8 94       	cli
    308e:	de bf       	out	0x3e, r29	; 62
    3090:	0f be       	out	0x3f, r0	; 63
    3092:	cd bf       	out	0x3d, r28	; 61
    3094:	8c 01       	movw	r16, r24
    3096:	7a 01       	movw	r14, r20
    3098:	4b e0       	ldi	r20, 0x0B	; 11
    309a:	50 e0       	ldi	r21, 0x00	; 0
    309c:	ce 01       	movw	r24, r28
    309e:	01 96       	adiw	r24, 0x01	; 1
    30a0:	0e 94 91 37 	call	0x6f22	; 0x6f22 <memcpy_P>
    30a4:	ce 01       	movw	r24, r28
    30a6:	0a 96       	adiw	r24, 0x0a	; 10
    30a8:	61 df       	rcall	.-318    	; 0x2f6c <_ZL6conv2dPKc>
    30aa:	f8 01       	movw	r30, r16
    30ac:	80 83       	st	Z, r24
    30ae:	e9 81       	ldd	r30, Y+1	; 0x01
    30b0:	8e 2f       	mov	r24, r30
    30b2:	90 e0       	ldi	r25, 0x00	; 0
    30b4:	fc 01       	movw	r30, r24
    30b6:	e1 54       	subi	r30, 0x41	; 65
    30b8:	f1 09       	sbc	r31, r1
    30ba:	e3 31       	cpi	r30, 0x13	; 19
    30bc:	f1 05       	cpc	r31, r1
    30be:	48 f5       	brcc	.+82     	; 0x3112 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x9a>
    30c0:	ee 5a       	subi	r30, 0xAE	; 174
    30c2:	ff 4f       	sbci	r31, 0xFF	; 255
    30c4:	0c 94 43 35 	jmp	0x6a86	; 0x6a86 <__tablejump2__>
    30c8:	8a 81       	ldd	r24, Y+2	; 0x02
    30ca:	81 36       	cpi	r24, 0x61	; 97
    30cc:	29 f0       	breq	.+10     	; 0x30d8 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x60>
    30ce:	8b 81       	ldd	r24, Y+3	; 0x03
    30d0:	8e 36       	cpi	r24, 0x6E	; 110
    30d2:	21 f0       	breq	.+8      	; 0x30dc <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x64>
    30d4:	87 e0       	ldi	r24, 0x07	; 7
    30d6:	1b c0       	rjmp	.+54     	; 0x310e <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    30d8:	81 e0       	ldi	r24, 0x01	; 1
    30da:	19 c0       	rjmp	.+50     	; 0x310e <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    30dc:	86 e0       	ldi	r24, 0x06	; 6
    30de:	17 c0       	rjmp	.+46     	; 0x310e <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    30e0:	82 e0       	ldi	r24, 0x02	; 2
    30e2:	15 c0       	rjmp	.+42     	; 0x310e <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    30e4:	8b 81       	ldd	r24, Y+3	; 0x03
    30e6:	82 37       	cpi	r24, 0x72	; 114
    30e8:	11 f0       	breq	.+4      	; 0x30ee <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x76>
    30ea:	88 e0       	ldi	r24, 0x08	; 8
    30ec:	10 c0       	rjmp	.+32     	; 0x310e <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    30ee:	84 e0       	ldi	r24, 0x04	; 4
    30f0:	0e c0       	rjmp	.+28     	; 0x310e <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    30f2:	8b 81       	ldd	r24, Y+3	; 0x03
    30f4:	82 37       	cpi	r24, 0x72	; 114
    30f6:	11 f0       	breq	.+4      	; 0x30fc <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x84>
    30f8:	85 e0       	ldi	r24, 0x05	; 5
    30fa:	09 c0       	rjmp	.+18     	; 0x310e <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    30fc:	83 e0       	ldi	r24, 0x03	; 3
    30fe:	07 c0       	rjmp	.+14     	; 0x310e <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    3100:	89 e0       	ldi	r24, 0x09	; 9
    3102:	05 c0       	rjmp	.+10     	; 0x310e <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    3104:	8a e0       	ldi	r24, 0x0A	; 10
    3106:	03 c0       	rjmp	.+6      	; 0x310e <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    3108:	8b e0       	ldi	r24, 0x0B	; 11
    310a:	01 c0       	rjmp	.+2      	; 0x310e <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x96>
    310c:	8c e0       	ldi	r24, 0x0C	; 12
    310e:	f8 01       	movw	r30, r16
    3110:	81 83       	std	Z+1, r24	; 0x01
    3112:	ce 01       	movw	r24, r28
    3114:	05 96       	adiw	r24, 0x05	; 5
    3116:	2a df       	rcall	.-428    	; 0x2f6c <_ZL6conv2dPKc>
    3118:	f8 01       	movw	r30, r16
    311a:	82 83       	std	Z+2, r24	; 0x02
    311c:	48 e0       	ldi	r20, 0x08	; 8
    311e:	50 e0       	ldi	r21, 0x00	; 0
    3120:	b7 01       	movw	r22, r14
    3122:	ce 01       	movw	r24, r28
    3124:	01 96       	adiw	r24, 0x01	; 1
    3126:	0e 94 91 37 	call	0x6f22	; 0x6f22 <memcpy_P>
    312a:	ce 01       	movw	r24, r28
    312c:	01 96       	adiw	r24, 0x01	; 1
    312e:	1e df       	rcall	.-452    	; 0x2f6c <_ZL6conv2dPKc>
    3130:	f8 01       	movw	r30, r16
    3132:	83 83       	std	Z+3, r24	; 0x03
    3134:	ce 01       	movw	r24, r28
    3136:	04 96       	adiw	r24, 0x04	; 4
    3138:	19 df       	rcall	.-462    	; 0x2f6c <_ZL6conv2dPKc>
    313a:	f8 01       	movw	r30, r16
    313c:	84 83       	std	Z+4, r24	; 0x04
    313e:	ce 01       	movw	r24, r28
    3140:	07 96       	adiw	r24, 0x07	; 7
    3142:	14 df       	rcall	.-472    	; 0x2f6c <_ZL6conv2dPKc>
    3144:	f8 01       	movw	r30, r16
    3146:	85 83       	std	Z+5, r24	; 0x05
    3148:	2b 96       	adiw	r28, 0x0b	; 11
    314a:	0f b6       	in	r0, 0x3f	; 63
    314c:	f8 94       	cli
    314e:	de bf       	out	0x3e, r29	; 62
    3150:	0f be       	out	0x3f, r0	; 63
    3152:	cd bf       	out	0x3d, r28	; 61
    3154:	df 91       	pop	r29
    3156:	cf 91       	pop	r28
    3158:	1f 91       	pop	r17
    315a:	0f 91       	pop	r16
    315c:	ff 90       	pop	r15
    315e:	ef 90       	pop	r14
    3160:	08 95       	ret

00003162 <_ZNK8DateTime12dayOfTheWeekEv>:
    3162:	fc 01       	movw	r30, r24
    3164:	80 81       	ld	r24, Z
    3166:	42 81       	ldd	r20, Z+2	; 0x02
    3168:	61 81       	ldd	r22, Z+1	; 0x01
    316a:	90 e0       	ldi	r25, 0x00	; 0
    316c:	cd de       	rcall	.-614    	; 0x2f08 <_ZL9date2daysjhh>
    316e:	06 96       	adiw	r24, 0x06	; 6
    3170:	67 e0       	ldi	r22, 0x07	; 7
    3172:	70 e0       	ldi	r23, 0x00	; 0
    3174:	0c 94 0d 35 	jmp	0x6a1a	; 0x6a1a <__udivmodhi4>
    3178:	08 95       	ret

0000317a <_ZNK8DateTime8unixtimeEv>:
    317a:	ef 92       	push	r14
    317c:	ff 92       	push	r15
    317e:	0f 93       	push	r16
    3180:	1f 93       	push	r17
    3182:	cf 93       	push	r28
    3184:	df 93       	push	r29
    3186:	ec 01       	movw	r28, r24
    3188:	88 81       	ld	r24, Y
    318a:	4a 81       	ldd	r20, Y+2	; 0x02
    318c:	69 81       	ldd	r22, Y+1	; 0x01
    318e:	90 e0       	ldi	r25, 0x00	; 0
    3190:	bb de       	rcall	.-650    	; 0x2f08 <_ZL9date2daysjhh>
    3192:	9c 01       	movw	r18, r24
    3194:	a8 e1       	ldi	r26, 0x18	; 24
    3196:	b0 e0       	ldi	r27, 0x00	; 0
    3198:	0e 94 4c 35 	call	0x6a98	; 0x6a98 <__umulhisi3>
    319c:	2b 81       	ldd	r18, Y+3	; 0x03
    319e:	7b 01       	movw	r14, r22
    31a0:	8c 01       	movw	r16, r24
    31a2:	e2 0e       	add	r14, r18
    31a4:	f1 1c       	adc	r15, r1
    31a6:	01 1d       	adc	r16, r1
    31a8:	11 1d       	adc	r17, r1
    31aa:	a8 01       	movw	r20, r16
    31ac:	97 01       	movw	r18, r14
    31ae:	ac e3       	ldi	r26, 0x3C	; 60
    31b0:	b0 e0       	ldi	r27, 0x00	; 0
    31b2:	0e 94 5b 35 	call	0x6ab6	; 0x6ab6 <__muluhisi3>
    31b6:	2c 81       	ldd	r18, Y+4	; 0x04
    31b8:	7b 01       	movw	r14, r22
    31ba:	8c 01       	movw	r16, r24
    31bc:	e2 0e       	add	r14, r18
    31be:	f1 1c       	adc	r15, r1
    31c0:	01 1d       	adc	r16, r1
    31c2:	11 1d       	adc	r17, r1
    31c4:	a8 01       	movw	r20, r16
    31c6:	97 01       	movw	r18, r14
    31c8:	0e 94 5b 35 	call	0x6ab6	; 0x6ab6 <__muluhisi3>
    31cc:	2d 81       	ldd	r18, Y+5	; 0x05
    31ce:	dc 01       	movw	r26, r24
    31d0:	cb 01       	movw	r24, r22
    31d2:	82 0f       	add	r24, r18
    31d4:	91 1d       	adc	r25, r1
    31d6:	a1 1d       	adc	r26, r1
    31d8:	b1 1d       	adc	r27, r1
    31da:	bc 01       	movw	r22, r24
    31dc:	cd 01       	movw	r24, r26
    31de:	60 58       	subi	r22, 0x80	; 128
    31e0:	7c 4b       	sbci	r23, 0xBC	; 188
    31e2:	82 49       	sbci	r24, 0x92	; 146
    31e4:	97 4c       	sbci	r25, 0xC7	; 199
    31e6:	df 91       	pop	r29
    31e8:	cf 91       	pop	r28
    31ea:	1f 91       	pop	r17
    31ec:	0f 91       	pop	r16
    31ee:	ff 90       	pop	r15
    31f0:	ef 90       	pop	r14
    31f2:	08 95       	ret

000031f4 <_ZNK8DateTime11secondstimeEv>:
    31f4:	ef 92       	push	r14
    31f6:	ff 92       	push	r15
    31f8:	0f 93       	push	r16
    31fa:	1f 93       	push	r17
    31fc:	cf 93       	push	r28
    31fe:	df 93       	push	r29
    3200:	ec 01       	movw	r28, r24
    3202:	88 81       	ld	r24, Y
    3204:	4a 81       	ldd	r20, Y+2	; 0x02
    3206:	69 81       	ldd	r22, Y+1	; 0x01
    3208:	90 e0       	ldi	r25, 0x00	; 0
    320a:	7e de       	rcall	.-772    	; 0x2f08 <_ZL9date2daysjhh>
    320c:	9c 01       	movw	r18, r24
    320e:	a8 e1       	ldi	r26, 0x18	; 24
    3210:	b0 e0       	ldi	r27, 0x00	; 0
    3212:	0e 94 4c 35 	call	0x6a98	; 0x6a98 <__umulhisi3>
    3216:	2b 81       	ldd	r18, Y+3	; 0x03
    3218:	7b 01       	movw	r14, r22
    321a:	8c 01       	movw	r16, r24
    321c:	e2 0e       	add	r14, r18
    321e:	f1 1c       	adc	r15, r1
    3220:	01 1d       	adc	r16, r1
    3222:	11 1d       	adc	r17, r1
    3224:	a8 01       	movw	r20, r16
    3226:	97 01       	movw	r18, r14
    3228:	ac e3       	ldi	r26, 0x3C	; 60
    322a:	b0 e0       	ldi	r27, 0x00	; 0
    322c:	0e 94 5b 35 	call	0x6ab6	; 0x6ab6 <__muluhisi3>
    3230:	2c 81       	ldd	r18, Y+4	; 0x04
    3232:	7b 01       	movw	r14, r22
    3234:	8c 01       	movw	r16, r24
    3236:	e2 0e       	add	r14, r18
    3238:	f1 1c       	adc	r15, r1
    323a:	01 1d       	adc	r16, r1
    323c:	11 1d       	adc	r17, r1
    323e:	a8 01       	movw	r20, r16
    3240:	97 01       	movw	r18, r14
    3242:	0e 94 5b 35 	call	0x6ab6	; 0x6ab6 <__muluhisi3>
    3246:	2d 81       	ldd	r18, Y+5	; 0x05
    3248:	62 0f       	add	r22, r18
    324a:	71 1d       	adc	r23, r1
    324c:	81 1d       	adc	r24, r1
    324e:	91 1d       	adc	r25, r1
    3250:	df 91       	pop	r29
    3252:	cf 91       	pop	r28
    3254:	1f 91       	pop	r17
    3256:	0f 91       	pop	r16
    3258:	ff 90       	pop	r15
    325a:	ef 90       	pop	r14
    325c:	08 95       	ret

0000325e <_ZN13DS3231M_ClassC1Ev>:
    325e:	fc 01       	movw	r30, r24
    3260:	10 82       	st	Z, r1
    3262:	11 82       	std	Z+1, r1	; 0x01
    3264:	12 82       	std	Z+2, r1	; 0x02
    3266:	13 82       	std	Z+3, r1	; 0x03
    3268:	14 82       	std	Z+4, r1	; 0x04
    326a:	08 95       	ret

0000326c <_ZN13DS3231M_ClassD1Ev>:
    326c:	08 95       	ret

0000326e <_ZN13DS3231M_Class9writeByteEhh>:
    326e:	0f 93       	push	r16
    3270:	1f 93       	push	r17
    3272:	cf 93       	push	r28
    3274:	df 93       	push	r29
    3276:	ec 01       	movw	r28, r24
    3278:	06 2f       	mov	r16, r22
    327a:	14 2f       	mov	r17, r20
    327c:	68 e6       	ldi	r22, 0x68	; 104
    327e:	86 ea       	ldi	r24, 0xA6	; 166
    3280:	9a e0       	ldi	r25, 0x0A	; 10
    3282:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <_ZN7TwoWire17beginTransmissionEh>
    3286:	60 2f       	mov	r22, r16
    3288:	86 ea       	ldi	r24, 0xA6	; 166
    328a:	9a e0       	ldi	r25, 0x0A	; 10
    328c:	0e 94 97 2b 	call	0x572e	; 0x572e <_ZN7TwoWire5writeEh>
    3290:	61 2f       	mov	r22, r17
    3292:	86 ea       	ldi	r24, 0xA6	; 166
    3294:	9a e0       	ldi	r25, 0x0A	; 10
    3296:	0e 94 97 2b 	call	0x572e	; 0x572e <_ZN7TwoWire5writeEh>
    329a:	86 ea       	ldi	r24, 0xA6	; 166
    329c:	9a e0       	ldi	r25, 0x0A	; 10
    329e:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <_ZN7TwoWire15endTransmissionEv>
    32a2:	88 83       	st	Y, r24
    32a4:	df 91       	pop	r29
    32a6:	cf 91       	pop	r28
    32a8:	1f 91       	pop	r17
    32aa:	0f 91       	pop	r16
    32ac:	08 95       	ret

000032ae <_ZN13DS3231M_Class8readByteEh>:
    32ae:	1f 93       	push	r17
    32b0:	cf 93       	push	r28
    32b2:	df 93       	push	r29
    32b4:	ec 01       	movw	r28, r24
    32b6:	16 2f       	mov	r17, r22
    32b8:	68 e6       	ldi	r22, 0x68	; 104
    32ba:	86 ea       	ldi	r24, 0xA6	; 166
    32bc:	9a e0       	ldi	r25, 0x0A	; 10
    32be:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <_ZN7TwoWire17beginTransmissionEh>
    32c2:	61 2f       	mov	r22, r17
    32c4:	86 ea       	ldi	r24, 0xA6	; 166
    32c6:	9a e0       	ldi	r25, 0x0A	; 10
    32c8:	0e 94 97 2b 	call	0x572e	; 0x572e <_ZN7TwoWire5writeEh>
    32cc:	86 ea       	ldi	r24, 0xA6	; 166
    32ce:	9a e0       	ldi	r25, 0x0A	; 10
    32d0:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <_ZN7TwoWire15endTransmissionEv>
    32d4:	88 83       	st	Y, r24
    32d6:	41 e0       	ldi	r20, 0x01	; 1
    32d8:	68 e6       	ldi	r22, 0x68	; 104
    32da:	86 ea       	ldi	r24, 0xA6	; 166
    32dc:	9a e0       	ldi	r25, 0x0A	; 10
    32de:	0e 94 65 2c 	call	0x58ca	; 0x58ca <_ZN7TwoWire11requestFromEhh>
    32e2:	86 ea       	ldi	r24, 0xA6	; 166
    32e4:	9a e0       	ldi	r25, 0x0A	; 10
    32e6:	0e 94 11 2b 	call	0x5622	; 0x5622 <_ZN7TwoWire4readEv>
    32ea:	df 91       	pop	r29
    32ec:	cf 91       	pop	r28
    32ee:	1f 91       	pop	r17
    32f0:	08 95       	ret

000032f2 <_ZN13DS3231M_Class5beginEm>:
    32f2:	cf 92       	push	r12
    32f4:	df 92       	push	r13
    32f6:	ef 92       	push	r14
    32f8:	ff 92       	push	r15
    32fa:	cf 93       	push	r28
    32fc:	df 93       	push	r29
    32fe:	ec 01       	movw	r28, r24
    3300:	6a 01       	movw	r12, r20
    3302:	7b 01       	movw	r14, r22
    3304:	86 ea       	ldi	r24, 0xA6	; 166
    3306:	9a e0       	ldi	r25, 0x0A	; 10
    3308:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <_ZN7TwoWire5beginEv>
    330c:	b7 01       	movw	r22, r14
    330e:	a6 01       	movw	r20, r12
    3310:	86 ea       	ldi	r24, 0xA6	; 166
    3312:	9a e0       	ldi	r25, 0x0A	; 10
    3314:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <_ZN7TwoWire8setClockEm>
    3318:	68 e6       	ldi	r22, 0x68	; 104
    331a:	86 ea       	ldi	r24, 0xA6	; 166
    331c:	9a e0       	ldi	r25, 0x0A	; 10
    331e:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <_ZN7TwoWire17beginTransmissionEh>
    3322:	86 ea       	ldi	r24, 0xA6	; 166
    3324:	9a e0       	ldi	r25, 0x0A	; 10
    3326:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <_ZN7TwoWire15endTransmissionEv>
    332a:	81 11       	cpse	r24, r1
    332c:	0a c0       	rjmp	.+20     	; 0x3342 <_ZN13DS3231M_Class5beginEm+0x50>
    332e:	62 e0       	ldi	r22, 0x02	; 2
    3330:	ce 01       	movw	r24, r28
    3332:	bd df       	rcall	.-134    	; 0x32ae <_ZN13DS3231M_Class8readByteEh>
    3334:	48 2f       	mov	r20, r24
    3336:	4f 7b       	andi	r20, 0xBF	; 191
    3338:	62 e0       	ldi	r22, 0x02	; 2
    333a:	ce 01       	movw	r24, r28
    333c:	98 df       	rcall	.-208    	; 0x326e <_ZN13DS3231M_Class9writeByteEhh>
    333e:	81 e0       	ldi	r24, 0x01	; 1
    3340:	01 c0       	rjmp	.+2      	; 0x3344 <_ZN13DS3231M_Class5beginEm+0x52>
    3342:	80 e0       	ldi	r24, 0x00	; 0
    3344:	df 91       	pop	r29
    3346:	cf 91       	pop	r28
    3348:	ff 90       	pop	r15
    334a:	ef 90       	pop	r14
    334c:	df 90       	pop	r13
    334e:	cf 90       	pop	r12
    3350:	08 95       	ret

00003352 <_ZN13DS3231M_Class3nowEv>:
/*******************************************************************************************************************
** Method now() returns the current date/time                                                                     **
** then the power down time is returned, if the timeType = 2 then the power up time is returned. These options are**
** not documented as the official calls are "getPowerOffDate" and "getPowerOnDate"                                **
*******************************************************************************************************************/
DateTime DS3231M_Class::now(){                                                // Return current date/time         //
    3352:	0f 93       	push	r16
    3354:	1f 93       	push	r17
    3356:	cf 93       	push	r28
    3358:	df 93       	push	r29
    335a:	8c 01       	movw	r16, r24
    335c:	eb 01       	movw	r28, r22
  Wire.beginTransmission(DS3231M_ADDRESS);                                    // Address the I2C device           //
    335e:	68 e6       	ldi	r22, 0x68	; 104
    3360:	86 ea       	ldi	r24, 0xA6	; 166
    3362:	9a e0       	ldi	r25, 0x0A	; 10
    3364:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(DS3231M_RTCSEC);                                                 // Start at specified register      //
    3368:	60 e0       	ldi	r22, 0x00	; 0
    336a:	86 ea       	ldi	r24, 0xA6	; 166
    336c:	9a e0       	ldi	r25, 0x0A	; 10
    336e:	0e 94 97 2b 	call	0x572e	; 0x572e <_ZN7TwoWire5writeEh>
  _TransmissionStatus = Wire.endTransmission();                               // Close transmission               //
    3372:	86 ea       	ldi	r24, 0xA6	; 166
    3374:	9a e0       	ldi	r25, 0x0A	; 10
    3376:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <_ZN7TwoWire15endTransmissionEv>
    337a:	88 83       	st	Y, r24
  Wire.requestFrom(DS3231M_ADDRESS, (uint8_t)7);                              // Request 7 bytes of data          //
    337c:	47 e0       	ldi	r20, 0x07	; 7
    337e:	68 e6       	ldi	r22, 0x68	; 104
    3380:	86 ea       	ldi	r24, 0xA6	; 166
    3382:	9a e0       	ldi	r25, 0x0A	; 10
    3384:	0e 94 65 2c 	call	0x58ca	; 0x58ca <_ZN7TwoWire11requestFromEhh>
  if(Wire.available()==7) {                                                   // Wait until the data is ready     //
    3388:	86 ea       	ldi	r24, 0xA6	; 166
    338a:	9a e0       	ldi	r25, 0x0A	; 10
    338c:	0e 94 09 2b 	call	0x5612	; 0x5612 <_ZN7TwoWire9availableEv>
    3390:	07 97       	sbiw	r24, 0x07	; 7
    3392:	09 f0       	breq	.+2      	; 0x3396 <_ZN13DS3231M_Class3nowEv+0x44>
    3394:	64 c0       	rjmp	.+200    	; 0x345e <_ZN13DS3231M_Class3nowEv+0x10c>
    _ss = bcd2int(Wire.read() & 0x7F);                                        // Mask high bit in seconds         //
    3396:	86 ea       	ldi	r24, 0xA6	; 166
    3398:	9a e0       	ldi	r25, 0x0A	; 10
    339a:	0e 94 11 2b 	call	0x5622	; 0x5622 <_ZN7TwoWire4readEv>
    339e:	98 2f       	mov	r25, r24
    33a0:	96 95       	lsr	r25
    33a2:	96 95       	lsr	r25
    33a4:	96 95       	lsr	r25
    33a6:	9e 70       	andi	r25, 0x0E	; 14
    33a8:	29 2f       	mov	r18, r25
    33aa:	22 0f       	add	r18, r18
    33ac:	22 0f       	add	r18, r18
    33ae:	92 0f       	add	r25, r18
    33b0:	8f 70       	andi	r24, 0x0F	; 15
    33b2:	89 0f       	add	r24, r25
    33b4:	8d 83       	std	Y+5, r24	; 0x05
    _mm = bcd2int(Wire.read() & 0x7F);                                        // Mask high bit in minutes         //
    33b6:	86 ea       	ldi	r24, 0xA6	; 166
    33b8:	9a e0       	ldi	r25, 0x0A	; 10
    33ba:	0e 94 11 2b 	call	0x5622	; 0x5622 <_ZN7TwoWire4readEv>
    33be:	98 2f       	mov	r25, r24
    33c0:	96 95       	lsr	r25
    33c2:	96 95       	lsr	r25
    33c4:	96 95       	lsr	r25
    33c6:	9e 70       	andi	r25, 0x0E	; 14
    33c8:	29 2f       	mov	r18, r25
    33ca:	22 0f       	add	r18, r18
    33cc:	22 0f       	add	r18, r18
    33ce:	92 0f       	add	r25, r18
    33d0:	8f 70       	andi	r24, 0x0F	; 15
    33d2:	89 0f       	add	r24, r25
    33d4:	8e 83       	std	Y+6, r24	; 0x06
    _hh = bcd2int(Wire.read() & 0x7F);                                        // Mask high bit in hours           //
    33d6:	86 ea       	ldi	r24, 0xA6	; 166
    33d8:	9a e0       	ldi	r25, 0x0A	; 10
    33da:	0e 94 11 2b 	call	0x5622	; 0x5622 <_ZN7TwoWire4readEv>
    33de:	98 2f       	mov	r25, r24
    33e0:	96 95       	lsr	r25
    33e2:	96 95       	lsr	r25
    33e4:	96 95       	lsr	r25
    33e6:	9e 70       	andi	r25, 0x0E	; 14
    33e8:	29 2f       	mov	r18, r25
    33ea:	22 0f       	add	r18, r18
    33ec:	22 0f       	add	r18, r18
    33ee:	92 0f       	add	r25, r18
    33f0:	8f 70       	andi	r24, 0x0F	; 15
    33f2:	89 0f       	add	r24, r25
    33f4:	8f 83       	std	Y+7, r24	; 0x07
    Wire.read();                                                              // Ignore Day-Of-Week register      //
    33f6:	86 ea       	ldi	r24, 0xA6	; 166
    33f8:	9a e0       	ldi	r25, 0x0A	; 10
    33fa:	0e 94 11 2b 	call	0x5622	; 0x5622 <_ZN7TwoWire4readEv>
    _d = bcd2int(Wire.read()  & 0x3F);                                        // Mask 2 high bits for day of month//
    33fe:	86 ea       	ldi	r24, 0xA6	; 166
    3400:	9a e0       	ldi	r25, 0x0A	; 10
    3402:	0e 94 11 2b 	call	0x5622	; 0x5622 <_ZN7TwoWire4readEv>
    3406:	98 2f       	mov	r25, r24
    3408:	96 95       	lsr	r25
    340a:	96 95       	lsr	r25
    340c:	96 95       	lsr	r25
    340e:	96 70       	andi	r25, 0x06	; 6
    3410:	29 2f       	mov	r18, r25
    3412:	22 0f       	add	r18, r18
    3414:	22 0f       	add	r18, r18
    3416:	92 0f       	add	r25, r18
    3418:	8f 70       	andi	r24, 0x0F	; 15
    341a:	89 0f       	add	r24, r25
    341c:	88 87       	std	Y+8, r24	; 0x08
    _m = bcd2int(Wire.read()  & 0x1F);                                        // Mask 3 high bits for Month       //
    341e:	86 ea       	ldi	r24, 0xA6	; 166
    3420:	9a e0       	ldi	r25, 0x0A	; 10
    3422:	0e 94 11 2b 	call	0x5622	; 0x5622 <_ZN7TwoWire4readEv>
    3426:	84 fb       	bst	r24, 4
    3428:	99 27       	eor	r25, r25
    342a:	90 f9       	bld	r25, 0
    342c:	99 0f       	add	r25, r25
    342e:	29 2f       	mov	r18, r25
    3430:	22 0f       	add	r18, r18
    3432:	22 0f       	add	r18, r18
    3434:	92 0f       	add	r25, r18
    3436:	8f 70       	andi	r24, 0x0F	; 15
    3438:	89 0f       	add	r24, r25
    343a:	89 87       	std	Y+9, r24	; 0x09
    _y = bcd2int(Wire.read()) + 2000;                                         // Add 2000 to internal year        //
    343c:	86 ea       	ldi	r24, 0xA6	; 166
    343e:	9a e0       	ldi	r25, 0x0A	; 10
    3440:	0e 94 11 2b 	call	0x5622	; 0x5622 <_ZN7TwoWire4readEv>
    3444:	98 2f       	mov	r25, r24
    3446:	92 95       	swap	r25
    3448:	9f 70       	andi	r25, 0x0F	; 15
    344a:	8f 70       	andi	r24, 0x0F	; 15
    344c:	2a e0       	ldi	r18, 0x0A	; 10
    344e:	92 9f       	mul	r25, r18
    3450:	80 0d       	add	r24, r0
    3452:	11 24       	eor	r1, r1
    3454:	90 e0       	ldi	r25, 0x00	; 0
    3456:	80 53       	subi	r24, 0x30	; 48
    3458:	98 4f       	sbci	r25, 0xF8	; 248
    345a:	9b 87       	std	Y+11, r25	; 0x0b
    345c:	8a 87       	std	Y+10, r24	; 0x0a
  } // of if-then there is data to be read                                    //                                  //
  return DateTime (_y, _m, _d, _hh, _mm, _ss);                                // Return class value               //
    345e:	2d 81       	ldd	r18, Y+5	; 0x05
    3460:	3e 81       	ldd	r19, Y+6	; 0x06
    3462:	4f 81       	ldd	r20, Y+7	; 0x07
    3464:	58 85       	ldd	r21, Y+8	; 0x08
    3466:	69 85       	ldd	r22, Y+9	; 0x09
    3468:	8a 85       	ldd	r24, Y+10	; 0x0a
    346a:	9b 85       	ldd	r25, Y+11	; 0x0b
  } // of for-next each month                                                 //                                  //
  d = days + 1;                                                               //                                  //
} // of method DateTime()                                                     //----------------------------------//
DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour,  //                                  //
                    uint8_t min, uint8_t sec) {                               //                                  //
  if (year >= 2000)                                                           //                                  //
    346c:	80 3d       	cpi	r24, 0xD0	; 208
    346e:	77 e0       	ldi	r23, 0x07	; 7
    3470:	97 07       	cpc	r25, r23
    3472:	10 f0       	brcs	.+4      	; 0x3478 <_ZN13DS3231M_Class3nowEv+0x126>
  year -= 2000;                                                               //                                  //
    3474:	80 5d       	subi	r24, 0xD0	; 208
    3476:	97 40       	sbci	r25, 0x07	; 7
  yOff = year;                                                                //                                  //
    3478:	f8 01       	movw	r30, r16
    347a:	80 83       	st	Z, r24
  m = month;                                                                  //                                  //
    347c:	61 83       	std	Z+1, r22	; 0x01
  d = day;                                                                    //                                  //
    347e:	52 83       	std	Z+2, r21	; 0x02
  hh = hour;                                                                  //                                  //
    3480:	43 83       	std	Z+3, r20	; 0x03
  mm = min;                                                                   //                                  //
    3482:	34 83       	std	Z+4, r19	; 0x04
  ss = sec;                                                                   //                                  //
    3484:	25 83       	std	Z+5, r18	; 0x05
    _d = bcd2int(Wire.read()  & 0x3F);                                        // Mask 2 high bits for day of month//
    _m = bcd2int(Wire.read()  & 0x1F);                                        // Mask 3 high bits for Month       //
    _y = bcd2int(Wire.read()) + 2000;                                         // Add 2000 to internal year        //
  } // of if-then there is data to be read                                    //                                  //
  return DateTime (_y, _m, _d, _hh, _mm, _ss);                                // Return class value               //
} // of method now                                                            //                                  //
    3486:	c8 01       	movw	r24, r16
    3488:	df 91       	pop	r29
    348a:	cf 91       	pop	r28
    348c:	1f 91       	pop	r17
    348e:	0f 91       	pop	r16
    3490:	08 95       	ret

00003492 <_ZN13DS3231M_Class6adjustERK8DateTime>:
** oscillator is stopped during the process and needs to be restarted upon completion.                            **
*******************************************************************************************************************/
void DS3231M_Class::adjust() {                                                // Set the RTC date and Time        //
  adjust(DateTime(F(__DATE__), F(__TIME__)));                                 // Set to compile time              //
} // of method adjust                                                         /-----------------------------------//
void DS3231M_Class::adjust(const DateTime& dt) {                              // Set the RTC date and Time        //
    3492:	df 92       	push	r13
    3494:	ef 92       	push	r14
    3496:	ff 92       	push	r15
    3498:	0f 93       	push	r16
    349a:	1f 93       	push	r17
    349c:	cf 93       	push	r28
    349e:	df 93       	push	r29
    34a0:	00 d0       	rcall	.+0      	; 0x34a2 <_ZN13DS3231M_Class6adjustERK8DateTime+0x10>
    34a2:	00 d0       	rcall	.+0      	; 0x34a4 <_ZN13DS3231M_Class6adjustERK8DateTime+0x12>
    34a4:	00 d0       	rcall	.+0      	; 0x34a6 <_ZN13DS3231M_Class6adjustERK8DateTime+0x14>
    34a6:	cd b7       	in	r28, 0x3d	; 61
    34a8:	de b7       	in	r29, 0x3e	; 62
    34aa:	8c 01       	movw	r16, r24
    34ac:	7b 01       	movw	r14, r22
    34ae:	fb 01       	movw	r30, r22
    34b0:	85 81       	ldd	r24, Z+5	; 0x05
  writeByte(DS3231M_RTCSEC,int2bcd(dt.second()));                             // Write seconds, keep device off   //
    34b2:	9a e0       	ldi	r25, 0x0A	; 10
    34b4:	d9 2e       	mov	r13, r25
    34b6:	6d 2d       	mov	r22, r13
    34b8:	0e 94 01 35 	call	0x6a02	; 0x6a02 <__udivmodqi4>
    34bc:	49 2f       	mov	r20, r25
    34be:	f0 e1       	ldi	r31, 0x10	; 16
    34c0:	8f 9f       	mul	r24, r31
    34c2:	40 0d       	add	r20, r0
    34c4:	11 24       	eor	r1, r1
    34c6:	60 e0       	ldi	r22, 0x00	; 0
    34c8:	c8 01       	movw	r24, r16
    34ca:	d1 de       	rcall	.-606    	; 0x326e <_ZN13DS3231M_Class9writeByteEhh>
    34cc:	f7 01       	movw	r30, r14
    34ce:	84 81       	ldd	r24, Z+4	; 0x04
  writeByte(DS3231M_RTCMIN,int2bcd(dt.minute()));                             // Write the minutes value          //
    34d0:	6d 2d       	mov	r22, r13
    34d2:	0e 94 01 35 	call	0x6a02	; 0x6a02 <__udivmodqi4>
    34d6:	49 2f       	mov	r20, r25
    34d8:	f0 e1       	ldi	r31, 0x10	; 16
    34da:	8f 9f       	mul	r24, r31
    34dc:	40 0d       	add	r20, r0
    34de:	11 24       	eor	r1, r1
    34e0:	61 e0       	ldi	r22, 0x01	; 1
    34e2:	c8 01       	movw	r24, r16
    34e4:	c4 de       	rcall	.-632    	; 0x326e <_ZN13DS3231M_Class9writeByteEhh>
    34e6:	f7 01       	movw	r30, r14
    34e8:	83 81       	ldd	r24, Z+3	; 0x03
  writeByte(DS3231M_RTCHOUR,int2bcd(dt.hour()));                              // Also re-sets the 24Hour clock on //
    34ea:	6d 2d       	mov	r22, r13
    34ec:	0e 94 01 35 	call	0x6a02	; 0x6a02 <__udivmodqi4>
    34f0:	49 2f       	mov	r20, r25
    34f2:	f0 e1       	ldi	r31, 0x10	; 16
    34f4:	8f 9f       	mul	r24, r31
    34f6:	40 0d       	add	r20, r0
    34f8:	11 24       	eor	r1, r1
    34fa:	62 e0       	ldi	r22, 0x02	; 2
    34fc:	c8 01       	movw	r24, r16
  writeByte(DS3231M_RTCWKDAY,dt.dayOfTheWeek());                              // Update the weekday               //
    34fe:	b7 de       	rcall	.-658    	; 0x326e <_ZN13DS3231M_Class9writeByteEhh>
    3500:	c7 01       	movw	r24, r14
    3502:	2f de       	rcall	.-930    	; 0x3162 <_ZNK8DateTime12dayOfTheWeekEv>
    3504:	48 2f       	mov	r20, r24
    3506:	63 e0       	ldi	r22, 0x03	; 3
    3508:	c8 01       	movw	r24, r16
    350a:	b1 de       	rcall	.-670    	; 0x326e <_ZN13DS3231M_Class9writeByteEhh>
    350c:	f7 01       	movw	r30, r14
    350e:	82 81       	ldd	r24, Z+2	; 0x02
  writeByte(DS3231M_RTCDATE,int2bcd(dt.day()));                               // Write the day of month           //
    3510:	6d 2d       	mov	r22, r13
    3512:	0e 94 01 35 	call	0x6a02	; 0x6a02 <__udivmodqi4>
    3516:	49 2f       	mov	r20, r25
    3518:	f0 e1       	ldi	r31, 0x10	; 16
    351a:	8f 9f       	mul	r24, r31
    351c:	40 0d       	add	r20, r0
    351e:	11 24       	eor	r1, r1
    3520:	64 e0       	ldi	r22, 0x04	; 4
    3522:	c8 01       	movw	r24, r16
    3524:	a4 de       	rcall	.-696    	; 0x326e <_ZN13DS3231M_Class9writeByteEhh>
    3526:	f7 01       	movw	r30, r14
    3528:	81 81       	ldd	r24, Z+1	; 0x01
  writeByte(DS3231M_RTCMTH,int2bcd(dt.month()));                              // Month, ignore century bit        //
    352a:	6d 2d       	mov	r22, r13
    352c:	0e 94 01 35 	call	0x6a02	; 0x6a02 <__udivmodqi4>
    3530:	49 2f       	mov	r20, r25
    3532:	f0 e1       	ldi	r31, 0x10	; 16
    3534:	8f 9f       	mul	r24, r31
    3536:	40 0d       	add	r20, r0
    3538:	11 24       	eor	r1, r1
    353a:	65 e0       	ldi	r22, 0x05	; 5
    353c:	c8 01       	movw	r24, r16
    353e:	97 de       	rcall	.-722    	; 0x326e <_ZN13DS3231M_Class9writeByteEhh>
  writeByte(DS3231M_RTCYEAR,int2bcd(dt.year()-2000));                         // Write the year                   //
    3540:	f7 01       	movw	r30, r14
    3542:	80 81       	ld	r24, Z
    3544:	6d 2d       	mov	r22, r13
    3546:	0e 94 01 35 	call	0x6a02	; 0x6a02 <__udivmodqi4>
    354a:	49 2f       	mov	r20, r25
    354c:	f0 e1       	ldi	r31, 0x10	; 16
    354e:	8f 9f       	mul	r24, r31
    3550:	40 0d       	add	r20, r0
    3552:	11 24       	eor	r1, r1
    3554:	66 e0       	ldi	r22, 0x06	; 6
    3556:	c8 01       	movw	r24, r16
  writeByte(DS3231M_STATUS,readByte(DS3231M_STATUS)&B01111111);               // Unset OSC flag bit if set        //
    3558:	8a de       	rcall	.-748    	; 0x326e <_ZN13DS3231M_Class9writeByteEhh>
    355a:	6f e0       	ldi	r22, 0x0F	; 15
    355c:	c8 01       	movw	r24, r16
    355e:	a7 de       	rcall	.-690    	; 0x32ae <_ZN13DS3231M_Class8readByteEh>
    3560:	48 2f       	mov	r20, r24
    3562:	4f 77       	andi	r20, 0x7F	; 127
    3564:	6f e0       	ldi	r22, 0x0F	; 15
    3566:	c8 01       	movw	r24, r16
  writeByte(DS3231M_CONTROL,readByte(DS3231M_CONTROL)&B01111111);             // Unset EOSC flag bit if set       //
    3568:	82 de       	rcall	.-764    	; 0x326e <_ZN13DS3231M_Class9writeByteEhh>
    356a:	6e e0       	ldi	r22, 0x0E	; 14
    356c:	c8 01       	movw	r24, r16
    356e:	9f de       	rcall	.-706    	; 0x32ae <_ZN13DS3231M_Class8readByteEh>
    3570:	48 2f       	mov	r20, r24
    3572:	4f 77       	andi	r20, 0x7F	; 127
    3574:	6e e0       	ldi	r22, 0x0E	; 14
    3576:	c8 01       	movw	r24, r16
  _SetUnixTime = now().unixtime();                                            // Store time of last change        //
    3578:	7a de       	rcall	.-780    	; 0x326e <_ZN13DS3231M_Class9writeByteEhh>
    357a:	b8 01       	movw	r22, r16
    357c:	ce 01       	movw	r24, r28
    357e:	01 96       	adiw	r24, 0x01	; 1
    3580:	e8 de       	rcall	.-560    	; 0x3352 <_ZN13DS3231M_Class3nowEv>
    3582:	ce 01       	movw	r24, r28
    3584:	01 96       	adiw	r24, 0x01	; 1
    3586:	f9 dd       	rcall	.-1038   	; 0x317a <_ZNK8DateTime8unixtimeEv>
    3588:	f8 01       	movw	r30, r16
    358a:	61 83       	std	Z+1, r22	; 0x01
    358c:	72 83       	std	Z+2, r23	; 0x02
    358e:	83 83       	std	Z+3, r24	; 0x03
    3590:	94 83       	std	Z+4, r25	; 0x04
    3592:	26 96       	adiw	r28, 0x06	; 6
} // of method adjust                                                         //                                  //
    3594:	0f b6       	in	r0, 0x3f	; 63
    3596:	f8 94       	cli
    3598:	de bf       	out	0x3e, r29	; 62
    359a:	0f be       	out	0x3f, r0	; 63
    359c:	cd bf       	out	0x3d, r28	; 61
    359e:	df 91       	pop	r29
    35a0:	cf 91       	pop	r28
    35a2:	1f 91       	pop	r17
    35a4:	0f 91       	pop	r16
    35a6:	ff 90       	pop	r15
    35a8:	ef 90       	pop	r14
    35aa:	df 90       	pop	r13
    35ac:	08 95       	ret

000035ae <_ZN13DS3231M_Class6adjustEv>:
    35ae:	0f 93       	push	r16
/*******************************************************************************************************************
** Method adjust set the current date/time. This is an overloaded function, if called with no parameters then the **
** RTC is set to the date/time when the program was compiled and uploaded. Otherwise the values are set, but the  **
** oscillator is stopped during the process and needs to be restarted upon completion.                            **
*******************************************************************************************************************/
void DS3231M_Class::adjust() {                                                // Set the RTC date and Time        //
    35b0:	1f 93       	push	r17
    35b2:	cf 93       	push	r28
    35b4:	df 93       	push	r29
    35b6:	00 d0       	rcall	.+0      	; 0x35b8 <_ZN13DS3231M_Class6adjustEv+0xa>
    35b8:	00 d0       	rcall	.+0      	; 0x35ba <_ZN13DS3231M_Class6adjustEv+0xc>
    35ba:	00 d0       	rcall	.+0      	; 0x35bc <_ZN13DS3231M_Class6adjustEv+0xe>
    35bc:	cd b7       	in	r28, 0x3d	; 61
    35be:	de b7       	in	r29, 0x3e	; 62
    35c0:	8c 01       	movw	r16, r24
  adjust(DateTime(F(__DATE__), F(__TIME__)));                                 // Set to compile time              //
    35c2:	4d e1       	ldi	r20, 0x1D	; 29
    35c4:	52 e0       	ldi	r21, 0x02	; 2
    35c6:	61 e1       	ldi	r22, 0x11	; 17
    35c8:	72 e0       	ldi	r23, 0x02	; 2
    35ca:	ce 01       	movw	r24, r28
    35cc:	01 96       	adiw	r24, 0x01	; 1
    35ce:	54 dd       	rcall	.-1368   	; 0x3078 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>
    35d0:	be 01       	movw	r22, r28
    35d2:	6f 5f       	subi	r22, 0xFF	; 255
    35d4:	7f 4f       	sbci	r23, 0xFF	; 255
    35d6:	c8 01       	movw	r24, r16
    35d8:	5c df       	rcall	.-328    	; 0x3492 <_ZN13DS3231M_Class6adjustERK8DateTime>
} // of method adjust                                                         /-----------------------------------//
    35da:	26 96       	adiw	r28, 0x06	; 6
    35dc:	0f b6       	in	r0, 0x3f	; 63
    35de:	f8 94       	cli
    35e0:	de bf       	out	0x3e, r29	; 62
    35e2:	0f be       	out	0x3f, r0	; 63
    35e4:	cd bf       	out	0x3d, r28	; 61
    35e6:	df 91       	pop	r29
    35e8:	cf 91       	pop	r28
    35ea:	1f 91       	pop	r17
    35ec:	0f 91       	pop	r16
    35ee:	08 95       	ret

000035f0 <_GLOBAL__sub_I__ZN9DhcpClass13beginWithDHCPEPhmm>:
    unsigned long m = n;
    n /= 16;
    char c = m - 16 * n;
    *str-- = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);
}
    35f0:	0f 93       	push	r16
    35f2:	00 e0       	ldi	r16, 0x00	; 0
    35f4:	20 e0       	ldi	r18, 0x00	; 0
    35f6:	40 e0       	ldi	r20, 0x00	; 0
    35f8:	60 e0       	ldi	r22, 0x00	; 0
    35fa:	8d ee       	ldi	r24, 0xED	; 237
    35fc:	99 e0       	ldi	r25, 0x09	; 9
    35fe:	0e 94 64 2e 	call	0x5cc8	; 0x5cc8 <_ZN9IPAddressC1Ehhhh>
    3602:	0f 91       	pop	r16
    3604:	08 95       	ret

00003606 <_ZN9DNSClient5beginERK9IPAddress>:
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    3606:	fb 01       	movw	r30, r22
    3608:	42 81       	ldd	r20, Z+2	; 0x02
    360a:	53 81       	ldd	r21, Z+3	; 0x03
    360c:	64 81       	ldd	r22, Z+4	; 0x04
    360e:	75 81       	ldd	r23, Z+5	; 0x05
    3610:	fc 01       	movw	r30, r24
    3612:	42 83       	std	Z+2, r20	; 0x02
    3614:	53 83       	std	Z+3, r21	; 0x03
    3616:	64 83       	std	Z+4, r22	; 0x04
    3618:	75 83       	std	Z+5, r23	; 0x05
#define INVALID_RESPONSE -4

void DNSClient::begin(const IPAddress& aDNSServer)
{
    iDNSServer = aDNSServer;
    iRequestId = 0;
    361a:	17 82       	std	Z+7, r1	; 0x07
    361c:	16 82       	std	Z+6, r1	; 0x06
    361e:	08 95       	ret

00003620 <_ZN9DNSClient9inet_atonEPKcR9IPAddress>:
}


int DNSClient::inet_aton(const char* aIPAddrString, IPAddress& aResult)
{
    3620:	cf 93       	push	r28
    3622:	df 93       	push	r29
    3624:	da 01       	movw	r26, r20
    3626:	fb 01       	movw	r30, r22
    3628:	eb 01       	movw	r28, r22
    // See if we've been given a valid IP address
    const char* p =aIPAddrString;
    while (*p &&
    362a:	89 91       	ld	r24, Y+
    362c:	81 11       	cpse	r24, r1
    362e:	fd cf       	rjmp	.-6      	; 0x362a <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0xa>
    3630:	80 e0       	ldi	r24, 0x00	; 0
    3632:	90 e0       	ldi	r25, 0x00	; 0
    3634:	20 e0       	ldi	r18, 0x00	; 0
    3636:	30 e0       	ldi	r19, 0x00	; 0
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
    3638:	4a e0       	ldi	r20, 0x0A	; 10
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
        int segmentValue =0;
        while (*p && (segment < 4))
    363a:	51 91       	ld	r21, Z+
    363c:	55 23       	and	r21, r21
    363e:	e9 f0       	breq	.+58     	; 0x367a <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x5a>
    3640:	24 30       	cpi	r18, 0x04	; 4
    3642:	31 05       	cpc	r19, r1
    3644:	44 f5       	brge	.+80     	; 0x3696 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
        {
            if (*p == '.')
    3646:	5e 32       	cpi	r21, 0x2E	; 46
    3648:	69 f4       	brne	.+26     	; 0x3664 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x44>
            {
                // We've reached the end of a segment
                if (segmentValue > 255)
    364a:	8f 3f       	cpi	r24, 0xFF	; 255
    364c:	91 05       	cpc	r25, r1
    364e:	09 f0       	breq	.+2      	; 0x3652 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x32>
    3650:	14 f5       	brge	.+68     	; 0x3696 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
                    // You can't have IP address segments that don't fit in a byte
                    return 0;
                }
                else
                {
                    aResult[segment] = (byte)segmentValue;
    3652:	ed 01       	movw	r28, r26
    3654:	c2 0f       	add	r28, r18
    3656:	d3 1f       	adc	r29, r19
    3658:	8a 83       	std	Y+2, r24	; 0x02
                    segment++;
    365a:	2f 5f       	subi	r18, 0xFF	; 255
    365c:	3f 4f       	sbci	r19, 0xFF	; 255
                    segmentValue = 0;
    365e:	80 e0       	ldi	r24, 0x00	; 0
    3660:	90 e0       	ldi	r25, 0x00	; 0
    3662:	eb cf       	rjmp	.-42     	; 0x363a <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x1a>
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
    3664:	48 9f       	mul	r20, r24
    3666:	b0 01       	movw	r22, r0
    3668:	49 9f       	mul	r20, r25
    366a:	70 0d       	add	r23, r0
    366c:	11 24       	eor	r1, r1
    366e:	85 2f       	mov	r24, r21
    3670:	90 e0       	ldi	r25, 0x00	; 0
    3672:	c0 97       	sbiw	r24, 0x30	; 48
    3674:	86 0f       	add	r24, r22
    3676:	97 1f       	adc	r25, r23
    3678:	e0 cf       	rjmp	.-64     	; 0x363a <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x1a>
            }
            p++;
        }
        // We've reached the end of address, but there'll still be the last
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
    367a:	8f 3f       	cpi	r24, 0xFF	; 255
    367c:	91 05       	cpc	r25, r1
    367e:	09 f0       	breq	.+2      	; 0x3682 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x62>
    3680:	54 f4       	brge	.+20     	; 0x3696 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
    3682:	24 30       	cpi	r18, 0x04	; 4
    3684:	31 05       	cpc	r19, r1
    3686:	3c f4       	brge	.+14     	; 0x3696 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x76>
            // or more than four segments
            return 0;
        }
        else
        {
            aResult[segment] = (byte)segmentValue;
    3688:	fd 01       	movw	r30, r26
    368a:	e2 0f       	add	r30, r18
    368c:	f3 1f       	adc	r31, r19
    368e:	82 83       	std	Z+2, r24	; 0x02
            return 1;
    3690:	81 e0       	ldi	r24, 0x01	; 1
    3692:	90 e0       	ldi	r25, 0x00	; 0
    3694:	02 c0       	rjmp	.+4      	; 0x369a <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x7a>
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
        {
            // You can't have IP address segments that don't fit in a byte,
            // or more than four segments
            return 0;
    3696:	80 e0       	ldi	r24, 0x00	; 0
    3698:	90 e0       	ldi	r25, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    369a:	df 91       	pop	r29
    369c:	cf 91       	pop	r28
    369e:	08 95       	ret

000036a0 <_GLOBAL__sub_I__ZN9DNSClient5beginERK9IPAddress>:
    // Mark the entire packet as read
    iUdp.flush();

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
}
    36a0:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    36a2:	00 e0       	ldi	r16, 0x00	; 0
    36a4:	20 e0       	ldi	r18, 0x00	; 0
    36a6:	40 e0       	ldi	r20, 0x00	; 0
    36a8:	60 e0       	ldi	r22, 0x00	; 0
    36aa:	83 ef       	ldi	r24, 0xF3	; 243
    36ac:	99 e0       	ldi	r25, 0x09	; 9
    36ae:	0e 94 64 2e 	call	0x5cc8	; 0x5cc8 <_ZN9IPAddressC1Ehhhh>
    36b2:	0f 91       	pop	r16
    36b4:	08 95       	ret

000036b6 <_ZN9DNSClient12BuildRequestEPKc>:

    return ret;
}

uint16_t DNSClient::BuildRequest(const char* aName)
{
    36b6:	8f 92       	push	r8
    36b8:	9f 92       	push	r9
    36ba:	af 92       	push	r10
    36bc:	bf 92       	push	r11
    36be:	cf 92       	push	r12
    36c0:	df 92       	push	r13
    36c2:	ef 92       	push	r14
    36c4:	ff 92       	push	r15
    36c6:	0f 93       	push	r16
    36c8:	1f 93       	push	r17
    36ca:	cf 93       	push	r28
    36cc:	df 93       	push	r29
    36ce:	00 d0       	rcall	.+0      	; 0x36d0 <_ZN9DNSClient12BuildRequestEPKc+0x1a>
    36d0:	1f 92       	push	r1
    36d2:	cd b7       	in	r28, 0x3d	; 61
    36d4:	de b7       	in	r29, 0x3e	; 62
    36d6:	6c 01       	movw	r12, r24
    36d8:	7b 01       	movw	r14, r22
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    //    |                    ARCOUNT                    |
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    // As we only support one request at a time at present, we can simplify
    // some of this header
    iRequestId = millis(); // generate a random ID
    36da:	0e 94 e5 2f 	call	0x5fca	; 0x5fca <millis>
    36de:	f6 01       	movw	r30, r12
    36e0:	77 83       	std	Z+7, r23	; 0x07
    36e2:	66 83       	std	Z+6, r22	; 0x06
    uint16_t twoByteBuffer;

    // FIXME We should also check that there's enough space available to write to, rather
    // FIXME than assume there's enough space (as the code does at present)
    iUdp.write((uint8_t*)&iRequestId, sizeof(iRequestId));
    36e4:	86 01       	movw	r16, r12
    36e6:	08 5f       	subi	r16, 0xF8	; 248
    36e8:	1f 4f       	sbci	r17, 0xFF	; 255
    36ea:	b6 01       	movw	r22, r12
    36ec:	6a 5f       	subi	r22, 0xFA	; 250
    36ee:	7f 4f       	sbci	r23, 0xFF	; 255
    36f0:	42 e0       	ldi	r20, 0x02	; 2
    36f2:	50 e0       	ldi	r21, 0x00	; 0
    36f4:	c8 01       	movw	r24, r16
    36f6:	30 d5       	rcall	.+2656   	; 0x4158 <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = htons(QUERY_FLAG | OPCODE_STANDARD_QUERY | RECURSION_DESIRED_FLAG);
    36f8:	81 e0       	ldi	r24, 0x01	; 1
    36fa:	90 e0       	ldi	r25, 0x00	; 0
    36fc:	9a 83       	std	Y+2, r25	; 0x02
    36fe:	89 83       	std	Y+1, r24	; 0x01
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    3700:	42 e0       	ldi	r20, 0x02	; 2
    3702:	50 e0       	ldi	r21, 0x00	; 0
    3704:	be 01       	movw	r22, r28
    3706:	6f 5f       	subi	r22, 0xFF	; 255
    3708:	7f 4f       	sbci	r23, 0xFF	; 255
    370a:	c8 01       	movw	r24, r16
    370c:	25 d5       	rcall	.+2634   	; 0x4158 <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = htons(1);  // One question record
    370e:	80 e0       	ldi	r24, 0x00	; 0
    3710:	91 e0       	ldi	r25, 0x01	; 1
    3712:	9a 83       	std	Y+2, r25	; 0x02
    3714:	89 83       	std	Y+1, r24	; 0x01
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    3716:	42 e0       	ldi	r20, 0x02	; 2
    3718:	50 e0       	ldi	r21, 0x00	; 0
    371a:	be 01       	movw	r22, r28
    371c:	6f 5f       	subi	r22, 0xFF	; 255
    371e:	7f 4f       	sbci	r23, 0xFF	; 255
    3720:	c8 01       	movw	r24, r16
    3722:	1a d5       	rcall	.+2612   	; 0x4158 <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = 0;  // Zero answer records
    3724:	1a 82       	std	Y+2, r1	; 0x02
    3726:	19 82       	std	Y+1, r1	; 0x01
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    3728:	42 e0       	ldi	r20, 0x02	; 2
    372a:	50 e0       	ldi	r21, 0x00	; 0
    372c:	be 01       	movw	r22, r28
    372e:	6f 5f       	subi	r22, 0xFF	; 255
    3730:	7f 4f       	sbci	r23, 0xFF	; 255
    3732:	c8 01       	movw	r24, r16
    3734:	11 d5       	rcall	.+2594   	; 0x4158 <_ZN11EthernetUDP5writeEPKhj>

    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    3736:	42 e0       	ldi	r20, 0x02	; 2
    3738:	50 e0       	ldi	r21, 0x00	; 0
    373a:	be 01       	movw	r22, r28
    373c:	6f 5f       	subi	r22, 0xFF	; 255
    373e:	7f 4f       	sbci	r23, 0xFF	; 255
    3740:	c8 01       	movw	r24, r16
    3742:	0a d5       	rcall	.+2580   	; 0x4158 <_ZN11EthernetUDP5writeEPKhj>
    // and zero additional records
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    3744:	42 e0       	ldi	r20, 0x02	; 2
    3746:	50 e0       	ldi	r21, 0x00	; 0
    3748:	be 01       	movw	r22, r28
    374a:	6f 5f       	subi	r22, 0xFF	; 255
    374c:	7f 4f       	sbci	r23, 0xFF	; 255
    374e:	c8 01       	movw	r24, r16
    3750:	03 d5       	rcall	.+2566   	; 0x4158 <_ZN11EthernetUDP5writeEPKhj>

    // Build question
    const char* start =aName;
    const char* end =start;
    3752:	57 01       	movw	r10, r14
    uint8_t len;
    // Run through the name being requested
    while (*end)
    3754:	f5 01       	movw	r30, r10
    3756:	80 81       	ld	r24, Z
    3758:	88 23       	and	r24, r24
    375a:	f9 f0       	breq	.+62     	; 0x379a <_ZN9DNSClient12BuildRequestEPKc+0xe4>
    375c:	a7 01       	movw	r20, r14
    375e:	5a 01       	movw	r10, r20
    {
        // Find out how long this section of the name is
        end = start;
        while (*end && (*end != '.') )
    3760:	f5 01       	movw	r30, r10
    3762:	81 91       	ld	r24, Z+
    3764:	6f 01       	movw	r12, r30
    3766:	88 23       	and	r24, r24
    3768:	21 f0       	breq	.+8      	; 0x3772 <_ZN9DNSClient12BuildRequestEPKc+0xbc>
    376a:	8e 32       	cpi	r24, 0x2E	; 46
    376c:	11 f0       	breq	.+4      	; 0x3772 <_ZN9DNSClient12BuildRequestEPKc+0xbc>
    376e:	a6 01       	movw	r20, r12
    3770:	f6 cf       	rjmp	.-20     	; 0x375e <_ZN9DNSClient12BuildRequestEPKc+0xa8>
        {
            end++;
        }

        if (end-start > 0)
    3772:	4a 01       	movw	r8, r20
    3774:	8e 18       	sub	r8, r14
    3776:	9f 08       	sbc	r9, r15
    3778:	18 14       	cp	r1, r8
    377a:	19 04       	cpc	r1, r9
    377c:	64 f4       	brge	.+24     	; 0x3796 <_ZN9DNSClient12BuildRequestEPKc+0xe0>
        {
            // Write out the size of this section
            len = end-start;
    377e:	8b 82       	std	Y+3, r8	; 0x03
            iUdp.write(&len, sizeof(len));
    3780:	41 e0       	ldi	r20, 0x01	; 1
    3782:	50 e0       	ldi	r21, 0x00	; 0
    3784:	be 01       	movw	r22, r28
    3786:	6d 5f       	subi	r22, 0xFD	; 253
    3788:	7f 4f       	sbci	r23, 0xFF	; 255
    378a:	c8 01       	movw	r24, r16
            // And then write out the section
            iUdp.write((uint8_t*)start, end-start);
    378c:	e5 d4       	rcall	.+2506   	; 0x4158 <_ZN11EthernetUDP5writeEPKhj>
    378e:	a4 01       	movw	r20, r8
    3790:	b7 01       	movw	r22, r14
    3792:	c8 01       	movw	r24, r16
    3794:	e1 d4       	rcall	.+2498   	; 0x4158 <_ZN11EthernetUDP5writeEPKhj>
        }
        start = end+1;
    3796:	76 01       	movw	r14, r12
    }

    // We've got to the end of the question name, so
    // terminate it with a zero-length section
    len = 0;
    3798:	dd cf       	rjmp	.-70     	; 0x3754 <_ZN9DNSClient12BuildRequestEPKc+0x9e>
    iUdp.write(&len, sizeof(len));
    379a:	1b 82       	std	Y+3, r1	; 0x03
    379c:	41 e0       	ldi	r20, 0x01	; 1
    379e:	50 e0       	ldi	r21, 0x00	; 0
    37a0:	be 01       	movw	r22, r28
    37a2:	6d 5f       	subi	r22, 0xFD	; 253
    37a4:	7f 4f       	sbci	r23, 0xFF	; 255
    37a6:	c8 01       	movw	r24, r16
    37a8:	d7 d4       	rcall	.+2478   	; 0x4158 <_ZN11EthernetUDP5writeEPKhj>
    // Finally the type and class of question
    twoByteBuffer = htons(TYPE_A);
    37aa:	e1 2c       	mov	r14, r1
    37ac:	ff 24       	eor	r15, r15
    37ae:	f3 94       	inc	r15
    37b0:	fa 82       	std	Y+2, r15	; 0x02
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    37b2:	e9 82       	std	Y+1, r14	; 0x01
    37b4:	42 e0       	ldi	r20, 0x02	; 2
    37b6:	50 e0       	ldi	r21, 0x00	; 0
    37b8:	be 01       	movw	r22, r28
    37ba:	6f 5f       	subi	r22, 0xFF	; 255
    37bc:	7f 4f       	sbci	r23, 0xFF	; 255
    37be:	c8 01       	movw	r24, r16

    twoByteBuffer = htons(CLASS_IN);  // Internet class of question
    37c0:	cb d4       	rcall	.+2454   	; 0x4158 <_ZN11EthernetUDP5writeEPKhj>
    37c2:	fa 82       	std	Y+2, r15	; 0x02
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    37c4:	e9 82       	std	Y+1, r14	; 0x01
    37c6:	42 e0       	ldi	r20, 0x02	; 2
    37c8:	50 e0       	ldi	r21, 0x00	; 0
    37ca:	be 01       	movw	r22, r28
    37cc:	6f 5f       	subi	r22, 0xFF	; 255
    37ce:	7f 4f       	sbci	r23, 0xFF	; 255
    37d0:	c8 01       	movw	r24, r16
    37d2:	c2 d4       	rcall	.+2436   	; 0x4158 <_ZN11EthernetUDP5writeEPKhj>
    // Success!  Everything buffered okay
    return 1;
}
    37d4:	81 e0       	ldi	r24, 0x01	; 1
    37d6:	90 e0       	ldi	r25, 0x00	; 0
    37d8:	0f 90       	pop	r0
    37da:	0f 90       	pop	r0
    37dc:	0f 90       	pop	r0
    37de:	df 91       	pop	r29
    37e0:	cf 91       	pop	r28
    37e2:	1f 91       	pop	r17
    37e4:	0f 91       	pop	r16
    37e6:	ff 90       	pop	r15
    37e8:	ef 90       	pop	r14
    37ea:	df 90       	pop	r13
    37ec:	cf 90       	pop	r12
    37ee:	bf 90       	pop	r11
    37f0:	af 90       	pop	r10
    37f2:	9f 90       	pop	r9
    37f4:	8f 90       	pop	r8
    37f6:	08 95       	ret

000037f8 <_ZN9DNSClient15ProcessResponseEjR9IPAddress>:


uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    37f8:	2f 92       	push	r2
    37fa:	3f 92       	push	r3
    37fc:	4f 92       	push	r4
    37fe:	5f 92       	push	r5
    3800:	6f 92       	push	r6
    3802:	7f 92       	push	r7
    3804:	8f 92       	push	r8
    3806:	9f 92       	push	r9
    3808:	af 92       	push	r10
    380a:	bf 92       	push	r11
    380c:	cf 92       	push	r12
    380e:	df 92       	push	r13
    3810:	ef 92       	push	r14
    3812:	ff 92       	push	r15
    3814:	0f 93       	push	r16
    3816:	1f 93       	push	r17
    3818:	cf 93       	push	r28
    381a:	df 93       	push	r29
    381c:	cd b7       	in	r28, 0x3d	; 61
    381e:	de b7       	in	r29, 0x3e	; 62
    3820:	63 97       	sbiw	r28, 0x13	; 19
    3822:	0f b6       	in	r0, 0x3f	; 63
    3824:	f8 94       	cli
    3826:	de bf       	out	0x3e, r29	; 62
    3828:	0f be       	out	0x3f, r0	; 63
    382a:	cd bf       	out	0x3d, r28	; 61
    382c:	7c 01       	movw	r14, r24
    382e:	6b 01       	movw	r12, r22
    3830:	1a 01       	movw	r2, r20
    uint32_t startTime = millis();
    3832:	0e 94 e5 2f 	call	0x5fca	; 0x5fca <millis>
    3836:	4b 01       	movw	r8, r22
    3838:	5c 01       	movw	r10, r24

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    383a:	87 01       	movw	r16, r14
    383c:	08 5f       	subi	r16, 0xF8	; 248
    383e:	1f 4f       	sbci	r17, 0xFF	; 255
    {
        if((millis() - startTime) > aTimeout)
    3840:	26 01       	movw	r4, r12
    3842:	61 2c       	mov	r6, r1
    3844:	71 2c       	mov	r7, r1
uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    3846:	c8 01       	movw	r24, r16
    3848:	29 d5       	rcall	.+2642   	; 0x429c <_ZN11EthernetUDP11parsePacketEv>
    384a:	18 16       	cp	r1, r24
    384c:	19 06       	cpc	r1, r25
    384e:	a4 f0       	brlt	.+40     	; 0x3878 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x80>
    {
        if((millis() - startTime) > aTimeout)
    3850:	0e 94 e5 2f 	call	0x5fca	; 0x5fca <millis>
    3854:	dc 01       	movw	r26, r24
    3856:	cb 01       	movw	r24, r22
    3858:	88 19       	sub	r24, r8
    385a:	99 09       	sbc	r25, r9
    385c:	aa 09       	sbc	r26, r10
    385e:	bb 09       	sbc	r27, r11
    3860:	48 16       	cp	r4, r24
    3862:	59 06       	cpc	r5, r25
    3864:	6a 06       	cpc	r6, r26
    3866:	7b 06       	cpc	r7, r27
    3868:	d0 f0       	brcs	.+52     	; 0x389e <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xa6>
            return TIMED_OUT;
        delay(50);
    386a:	62 e3       	ldi	r22, 0x32	; 50
    386c:	70 e0       	ldi	r23, 0x00	; 0
    386e:	80 e0       	ldi	r24, 0x00	; 0
    3870:	90 e0       	ldi	r25, 0x00	; 0
    3872:	0e 94 16 30 	call	0x602c	; 0x602c <delay>
uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    3876:	e7 cf       	rjmp	.-50     	; 0x3846 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x4e>

    // We've had a reply!
    // Read the UDP header
    uint8_t header[DNS_HEADER_SIZE]; // Enough space to reuse for the DNS header
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
    3878:	f7 01       	movw	r30, r14
    387a:	42 81       	ldd	r20, Z+2	; 0x02
    387c:	53 81       	ldd	r21, Z+3	; 0x03
    387e:	64 81       	ldd	r22, Z+4	; 0x04
    3880:	75 81       	ldd	r23, Z+5	; 0x05
    3882:	81 8d       	ldd	r24, Z+25	; 0x19
    3884:	92 8d       	ldd	r25, Z+26	; 0x1a
    3886:	a3 8d       	ldd	r26, Z+27	; 0x1b
    3888:	b4 8d       	ldd	r27, Z+28	; 0x1c
    388a:	48 17       	cp	r20, r24
    388c:	59 07       	cpc	r21, r25
    388e:	6a 07       	cpc	r22, r26
    3890:	7b 07       	cpc	r23, r27
    3892:	49 f4       	brne	.+18     	; 0x38a6 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xae>
    3894:	85 8d       	ldd	r24, Z+29	; 0x1d
    3896:	96 8d       	ldd	r25, Z+30	; 0x1e
    3898:	c5 97       	sbiw	r24, 0x35	; 53
    389a:	29 f4       	brne	.+10     	; 0x38a6 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xae>
    389c:	09 c0       	rjmp	.+18     	; 0x38b0 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xb8>

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    {
        if((millis() - startTime) > aTimeout)
            return TIMED_OUT;
    389e:	ee 24       	eor	r14, r14
    38a0:	ea 94       	dec	r14
    38a2:	fe 2c       	mov	r15, r14
    38a4:	f0 c0       	rjmp	.+480    	; 0x3a86 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
        (iUdp.remotePort() != DNS_PORT) )
    {
        // It's not from who we expected
        return INVALID_SERVER;
    38a6:	9e ef       	ldi	r25, 0xFE	; 254
    38a8:	e9 2e       	mov	r14, r25
    38aa:	ff 24       	eor	r15, r15
    38ac:	fa 94       	dec	r15
    38ae:	eb c0       	rjmp	.+470    	; 0x3a86 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    38b0:	c8 01       	movw	r24, r16
    38b2:	08 d4       	rcall	.+2064   	; 0x40c4 <_ZN11EthernetUDP9availableEv>
    38b4:	0c 97       	sbiw	r24, 0x0c	; 12
    38b6:	0c f4       	brge	.+2      	; 0x38ba <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xc2>
    38b8:	e2 c0       	rjmp	.+452    	; 0x3a7e <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x286>
    {
        return TRUNCATED;
    }
    iUdp.read(header, DNS_HEADER_SIZE);
    38ba:	4c e0       	ldi	r20, 0x0C	; 12
    38bc:	50 e0       	ldi	r21, 0x00	; 0
    38be:	be 01       	movw	r22, r28
    38c0:	6f 5f       	subi	r22, 0xFF	; 255
    38c2:	7f 4f       	sbci	r23, 0xFF	; 255
    38c4:	c8 01       	movw	r24, r16
    38c6:	83 d4       	rcall	.+2310   	; 0x41ce <_ZN11EthernetUDP4readEPhj>

    uint16_t header_flags = htons(*((uint16_t*)&header[2]));
    38c8:	8b 81       	ldd	r24, Y+3	; 0x03
    38ca:	9c 81       	ldd	r25, Y+4	; 0x04
    38cc:	98 27       	eor	r25, r24
    38ce:	89 27       	eor	r24, r25
    38d0:	98 27       	eor	r25, r24
    38d2:	9a 8b       	std	Y+18, r25	; 0x12
    38d4:	89 8b       	std	Y+17, r24	; 0x11
    // Check that it's a response to this request
    if ( ( iRequestId != (*((uint16_t*)&header[0])) ) ||
    38d6:	f7 01       	movw	r30, r14
    38d8:	46 81       	ldd	r20, Z+6	; 0x06
    38da:	57 81       	ldd	r21, Z+7	; 0x07
    38dc:	29 81       	ldd	r18, Y+1	; 0x01
    38de:	3a 81       	ldd	r19, Y+2	; 0x02
    38e0:	42 17       	cp	r20, r18
    38e2:	53 07       	cpc	r21, r19
    38e4:	11 f4       	brne	.+4      	; 0x38ea <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xf2>
    38e6:	97 fd       	sbrc	r25, 7
        ((header_flags & QUERY_RESPONSE_MASK) != (uint16_t)RESPONSE_FLAG) )
    {
        // Mark the entire packet as read
        iUdp.flush();
    38e8:	07 c0       	rjmp	.+14     	; 0x38f8 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x100>
    38ea:	c8 01       	movw	r24, r16
    38ec:	05 d4       	rcall	.+2058   	; 0x40f8 <_ZN11EthernetUDP5flushEv>
        return INVALID_RESPONSE;
    38ee:	7c ef       	ldi	r23, 0xFC	; 252
    38f0:	e7 2e       	mov	r14, r23
    38f2:	ff 24       	eor	r15, r15
    38f4:	fa 94       	dec	r15
    38f6:	c7 c0       	rjmp	.+398    	; 0x3a86 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    }
    // Check for any errors in the response (or in our request)
    // although we don't do anything to get round these
    if ( (header_flags & TRUNCATION_FLAG) || (header_flags & RESP_MASK) )
    38f8:	8f 70       	andi	r24, 0x0F	; 15
    38fa:	92 70       	andi	r25, 0x02	; 2
    38fc:	89 2b       	or	r24, r25
    {
        // Mark the entire packet as read
        iUdp.flush();
    38fe:	39 f0       	breq	.+14     	; 0x390e <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x116>
    3900:	c8 01       	movw	r24, r16
    3902:	fa d3       	rcall	.+2036   	; 0x40f8 <_ZN11EthernetUDP5flushEv>
        return -5; //INVALID_RESPONSE;
    3904:	6b ef       	ldi	r22, 0xFB	; 251
    3906:	e6 2e       	mov	r14, r22
    3908:	ff 24       	eor	r15, r15
    390a:	fa 94       	dec	r15
    390c:	bc c0       	rjmp	.+376    	; 0x3a86 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    }

    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
    390e:	cf 80       	ldd	r12, Y+7	; 0x07
    3910:	d8 84       	ldd	r13, Y+8	; 0x08
    3912:	dc 24       	eor	r13, r12
    3914:	cd 24       	eor	r12, r13
    3916:	dc 24       	eor	r13, r12
    if (answerCount == 0 )
    3918:	c1 14       	cp	r12, r1
    391a:	d1 04       	cpc	r13, r1
    391c:	19 f0       	breq	.+6      	; 0x3924 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x12c>
    391e:	e1 2c       	mov	r14, r1
    3920:	f1 2c       	mov	r15, r1
    {
        // Mark the entire packet as read
        iUdp.flush();
    3922:	1f c0       	rjmp	.+62     	; 0x3962 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x16a>
    3924:	c8 01       	movw	r24, r16
    3926:	e8 d3       	rcall	.+2000   	; 0x40f8 <_ZN11EthernetUDP5flushEv>
        return -6; //INVALID_RESPONSE;
    3928:	5a ef       	ldi	r21, 0xFA	; 250
    392a:	e5 2e       	mov	r14, r21
    392c:	ff 24       	eor	r15, r15
    392e:	fa 94       	dec	r15
    3930:	aa c0       	rjmp	.+340    	; 0x3a86 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    {
        // Skip over the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    3932:	41 e0       	ldi	r20, 0x01	; 1
    3934:	50 e0       	ldi	r21, 0x00	; 0
    3936:	be 01       	movw	r22, r28
    3938:	63 5f       	subi	r22, 0xF3	; 243
    393a:	7f 4f       	sbci	r23, 0xFF	; 255
    393c:	c8 01       	movw	r24, r16
    393e:	47 d4       	rcall	.+2190   	; 0x41ce <_ZN11EthernetUDP4readEPhj>
            if (len > 0)
    3940:	8d 85       	ldd	r24, Y+13	; 0x0d
    3942:	81 11       	cpse	r24, r1
                while(len--)
                {
                    iUdp.read(); // we don't care about the returned byte
                }
            }
        } while (len != 0);
    3944:	17 c0       	rjmp	.+46     	; 0x3974 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x17c>
    3946:	8d 85       	ldd	r24, Y+13	; 0x0d

        // Now jump over the type and class
        for (int i =0; i < 4; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    3948:	81 11       	cpse	r24, r1
    394a:	f3 cf       	rjmp	.-26     	; 0x3932 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x13a>
    394c:	c8 01       	movw	r24, r16
    394e:	17 d4       	rcall	.+2094   	; 0x417e <_ZN11EthernetUDP4readEv>
    3950:	c8 01       	movw	r24, r16
    3952:	15 d4       	rcall	.+2090   	; 0x417e <_ZN11EthernetUDP4readEv>
    3954:	c8 01       	movw	r24, r16
    3956:	13 d4       	rcall	.+2086   	; 0x417e <_ZN11EthernetUDP4readEv>
    3958:	c8 01       	movw	r24, r16
    395a:	11 d4       	rcall	.+2082   	; 0x417e <_ZN11EthernetUDP4readEv>
    395c:	ff ef       	ldi	r31, 0xFF	; 255
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    395e:	ef 1a       	sub	r14, r31
    3960:	ff 0a       	sbc	r15, r31
    3962:	8d 81       	ldd	r24, Y+5	; 0x05
    3964:	9e 81       	ldd	r25, Y+6	; 0x06
    3966:	98 27       	eor	r25, r24
    3968:	89 27       	eor	r24, r25
    396a:	98 27       	eor	r25, r24
    396c:	e8 16       	cp	r14, r24
    396e:	f9 06       	cpc	r15, r25
    3970:	00 f3       	brcs	.-64     	; 0x3932 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x13a>
    3972:	09 c0       	rjmp	.+18     	; 0x3986 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x18e>
            iUdp.read(&len, sizeof(len));
            if (len > 0)
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
    3974:	8d 85       	ldd	r24, Y+13	; 0x0d
    3976:	9f ef       	ldi	r25, 0xFF	; 255
    3978:	98 0f       	add	r25, r24
    397a:	9d 87       	std	Y+13, r25	; 0x0d
    397c:	88 23       	and	r24, r24
    397e:	19 f3       	breq	.-58     	; 0x3946 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x14e>
                {
                    iUdp.read(); // we don't care about the returned byte
    3980:	c8 01       	movw	r24, r16
    3982:	fd d3       	rcall	.+2042   	; 0x417e <_ZN11EthernetUDP4readEv>
            iUdp.read(&len, sizeof(len));
            if (len > 0)
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
    3984:	f7 cf       	rjmp	.-18     	; 0x3974 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x17c>
    3986:	a1 2c       	mov	r10, r1
    3988:	b1 2c       	mov	r11, r1
    {
        // Skip the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    398a:	41 e0       	ldi	r20, 0x01	; 1
    398c:	50 e0       	ldi	r21, 0x00	; 0
    398e:	be 01       	movw	r22, r28
    3990:	6d 5e       	subi	r22, 0xED	; 237
    3992:	7f 4f       	sbci	r23, 0xFF	; 255
    3994:	c8 01       	movw	r24, r16
    3996:	1b d4       	rcall	.+2102   	; 0x41ce <_ZN11EthernetUDP4readEPhj>
    3998:	8b 89       	ldd	r24, Y+19	; 0x13
            if ((len & LABEL_COMPRESSION_MASK) == 0)
    399a:	98 2f       	mov	r25, r24
    399c:	90 7c       	andi	r25, 0xC0	; 192
    399e:	59 f4       	brne	.+22     	; 0x39b6 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1be>
            {
                // It's just a normal label
                if (len > 0)
    39a0:	88 23       	and	r24, r24
    39a2:	79 f0       	breq	.+30     	; 0x39c2 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1ca>
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
    39a4:	8b 89       	ldd	r24, Y+19	; 0x13
    39a6:	9f ef       	ldi	r25, 0xFF	; 255
    39a8:	98 0f       	add	r25, r24
    39aa:	9b 8b       	std	Y+19, r25	; 0x13
    39ac:	88 23       	and	r24, r24
    39ae:	31 f0       	breq	.+12     	; 0x39bc <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1c4>
                    {
                        iUdp.read(); // we don't care about the returned byte
    39b0:	c8 01       	movw	r24, r16
    39b2:	e5 d3       	rcall	.+1994   	; 0x417e <_ZN11EthernetUDP4readEv>
                if (len > 0)
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
    39b4:	f7 cf       	rjmp	.-18     	; 0x39a4 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1ac>
                // says that a name is either a sequence of labels ended with a
                // 0 length octet or a pointer or a sequence of labels ending in
                // a pointer.  Either way, when we get here we're at the end of
                // the name
                // Skip over the pointer
                iUdp.read(); // we don't care about the returned byte
    39b6:	c8 01       	movw	r24, r16
    39b8:	e2 d3       	rcall	.+1988   	; 0x417e <_ZN11EthernetUDP4readEv>
    39ba:	1b 8a       	std	Y+19, r1	; 0x13
                // And set len so that we drop out of the name loop
                len = 0;
    39bc:	8b 89       	ldd	r24, Y+19	; 0x13
            }
        } while (len != 0);
    39be:	81 11       	cpse	r24, r1
    39c0:	e4 cf       	rjmp	.-56     	; 0x398a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x192>

        // Check the type and class
        uint16_t answerType;
        uint16_t answerClass;
        iUdp.read((uint8_t*)&answerType, sizeof(answerType));
    39c2:	42 e0       	ldi	r20, 0x02	; 2
    39c4:	50 e0       	ldi	r21, 0x00	; 0
    39c6:	be 01       	movw	r22, r28
    39c8:	61 5f       	subi	r22, 0xF1	; 241
    39ca:	7f 4f       	sbci	r23, 0xFF	; 255
        iUdp.read((uint8_t*)&answerClass, sizeof(answerClass));
    39cc:	c8 01       	movw	r24, r16
    39ce:	ff d3       	rcall	.+2046   	; 0x41ce <_ZN11EthernetUDP4readEPhj>
    39d0:	42 e0       	ldi	r20, 0x02	; 2
    39d2:	50 e0       	ldi	r21, 0x00	; 0
    39d4:	be 01       	movw	r22, r28
    39d6:	63 5f       	subi	r22, 0xF3	; 243
    39d8:	7f 4f       	sbci	r23, 0xFF	; 255

        // Ignore the Time-To-Live as we don't do any caching
        for (int i =0; i < TTL_SIZE; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    39da:	c8 01       	movw	r24, r16
    39dc:	f8 d3       	rcall	.+2032   	; 0x41ce <_ZN11EthernetUDP4readEPhj>
    39de:	c8 01       	movw	r24, r16
    39e0:	ce d3       	rcall	.+1948   	; 0x417e <_ZN11EthernetUDP4readEv>
    39e2:	c8 01       	movw	r24, r16
    39e4:	cc d3       	rcall	.+1944   	; 0x417e <_ZN11EthernetUDP4readEv>
    39e6:	c8 01       	movw	r24, r16
    39e8:	ca d3       	rcall	.+1940   	; 0x417e <_ZN11EthernetUDP4readEv>
    39ea:	c8 01       	movw	r24, r16
    39ec:	c8 d3       	rcall	.+1936   	; 0x417e <_ZN11EthernetUDP4readEv>
    39ee:	42 e0       	ldi	r20, 0x02	; 2
    39f0:	50 e0       	ldi	r21, 0x00	; 0
        }

        // And read out the length of this answer
        // Don't need header_flags anymore, so we can reuse it here
        iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));
    39f2:	be 01       	movw	r22, r28
    39f4:	6f 5e       	subi	r22, 0xEF	; 239
    39f6:	7f 4f       	sbci	r23, 0xFF	; 255
    39f8:	c8 01       	movw	r24, r16
    39fa:	e9 d3       	rcall	.+2002   	; 0x41ce <_ZN11EthernetUDP4readEPhj>
    39fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    39fe:	98 89       	ldd	r25, Y+16	; 0x10
    3a00:	81 15       	cp	r24, r1

        if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) )
    3a02:	91 40       	sbci	r25, 0x01	; 1
    3a04:	49 f4       	brne	.+18     	; 0x3a18 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x220>
    3a06:	ed 84       	ldd	r14, Y+13	; 0x0d
    3a08:	fe 84       	ldd	r15, Y+14	; 0x0e
    3a0a:	fe 24       	eor	r15, r14
    3a0c:	ef 24       	eor	r14, r15
    3a0e:	fe 24       	eor	r15, r14
    3a10:	81 e0       	ldi	r24, 0x01	; 1
    3a12:	e8 16       	cp	r14, r24
    3a14:	f1 04       	cpc	r15, r1
    3a16:	19 f0       	breq	.+6      	; 0x3a1e <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x226>
    3a18:	e1 2c       	mov	r14, r1
    3a1a:	f1 2c       	mov	r15, r1
    3a1c:	14 c0       	rjmp	.+40     	; 0x3a46 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x24e>
    3a1e:	89 89       	ldd	r24, Y+17	; 0x11
        {
            if (htons(header_flags) != 4)
    3a20:	9a 89       	ldd	r25, Y+18	; 0x12
    3a22:	81 15       	cp	r24, r1
    3a24:	94 40       	sbci	r25, 0x04	; 4
    3a26:	39 f0       	breq	.+14     	; 0x3a36 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x23e>
    3a28:	c8 01       	movw	r24, r16
            {
                // It's a weird size
                // Mark the entire packet as read
                iUdp.flush();
    3a2a:	66 d3       	rcall	.+1740   	; 0x40f8 <_ZN11EthernetUDP5flushEv>
    3a2c:	47 ef       	ldi	r20, 0xF7	; 247
                return -9;//INVALID_RESPONSE;
    3a2e:	e4 2e       	mov	r14, r20
    3a30:	ff 24       	eor	r15, r15
    3a32:	fa 94       	dec	r15
    3a34:	28 c0       	rjmp	.+80     	; 0x3a86 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    3a36:	b1 01       	movw	r22, r2

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    3a38:	6e 5f       	subi	r22, 0xFE	; 254
    3a3a:	7f 4f       	sbci	r23, 0xFF	; 255
    3a3c:	44 e0       	ldi	r20, 0x04	; 4
            }
            iUdp.read(aAddress.raw_address(), 4);
    3a3e:	50 e0       	ldi	r21, 0x00	; 0
    3a40:	c8 01       	movw	r24, r16
    3a42:	c5 d3       	rcall	.+1930   	; 0x41ce <_ZN11EthernetUDP4readEPhj>
    3a44:	20 c0       	rjmp	.+64     	; 0x3a86 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
            return SUCCESS;
    3a46:	89 89       	ldd	r24, Y+17	; 0x11
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    3a48:	9a 89       	ldd	r25, Y+18	; 0x12
    3a4a:	98 27       	eor	r25, r24
    3a4c:	89 27       	eor	r24, r25
    3a4e:	98 27       	eor	r25, r24
    3a50:	e8 16       	cp	r14, r24
    3a52:	f9 06       	cpc	r15, r25
    3a54:	30 f4       	brcc	.+12     	; 0x3a62 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x26a>
    3a56:	c8 01       	movw	r24, r16
            {
                iUdp.read(); // we don't care about the returned byte
    3a58:	92 d3       	rcall	.+1828   	; 0x417e <_ZN11EthernetUDP4readEv>
    3a5a:	ff ef       	ldi	r31, 0xFF	; 255
    3a5c:	ef 1a       	sub	r14, r31
            return SUCCESS;
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    3a5e:	ff 0a       	sbc	r15, r31
    3a60:	f2 cf       	rjmp	.-28     	; 0x3a46 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x24e>
    3a62:	2f ef       	ldi	r18, 0xFF	; 255
    3a64:	a2 1a       	sub	r10, r18
    // Now we're up to the bit we're interested in, the answer
    // There might be more than one answer (although we'll just use the first
    // type A answer) and some authority and additional resource records but
    // we're going to ignore all of them.

    for (uint16_t i =0; i < answerCount; i++)
    3a66:	b2 0a       	sbc	r11, r18
    3a68:	ca 14       	cp	r12, r10
    3a6a:	db 04       	cpc	r13, r11
    3a6c:	09 f0       	breq	.+2      	; 0x3a70 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x278>
    3a6e:	8d cf       	rjmp	.-230    	; 0x398a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x192>
    3a70:	c8 01       	movw	r24, r16
    3a72:	42 d3       	rcall	.+1668   	; 0x40f8 <_ZN11EthernetUDP5flushEv>
            }
        }
    }

    // Mark the entire packet as read
    iUdp.flush();
    3a74:	36 ef       	ldi	r19, 0xF6	; 246
    3a76:	e3 2e       	mov	r14, r19
    3a78:	ff 24       	eor	r15, r15

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
    3a7a:	fa 94       	dec	r15
    3a7c:	04 c0       	rjmp	.+8      	; 0x3a86 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x28e>
    3a7e:	8d ef       	ldi	r24, 0xFD	; 253
    3a80:	e8 2e       	mov	r14, r24
    3a82:	ff 24       	eor	r15, r15
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    {
        return TRUNCATED;
    3a84:	fa 94       	dec	r15
    3a86:	c7 01       	movw	r24, r14
    3a88:	63 96       	adiw	r28, 0x13	; 19
    3a8a:	0f b6       	in	r0, 0x3f	; 63
    // Mark the entire packet as read
    iUdp.flush();

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
}
    3a8c:	f8 94       	cli
    3a8e:	de bf       	out	0x3e, r29	; 62
    3a90:	0f be       	out	0x3f, r0	; 63
    3a92:	cd bf       	out	0x3d, r28	; 61
    3a94:	df 91       	pop	r29
    3a96:	cf 91       	pop	r28
    3a98:	1f 91       	pop	r17
    3a9a:	0f 91       	pop	r16
    3a9c:	ff 90       	pop	r15
    3a9e:	ef 90       	pop	r14
    3aa0:	df 90       	pop	r13
    3aa2:	cf 90       	pop	r12
    3aa4:	bf 90       	pop	r11
    3aa6:	af 90       	pop	r10
    3aa8:	9f 90       	pop	r9
    3aaa:	8f 90       	pop	r8
    3aac:	7f 90       	pop	r7
    3aae:	6f 90       	pop	r6
    3ab0:	5f 90       	pop	r5
    3ab2:	4f 90       	pop	r4
    3ab4:	3f 90       	pop	r3
    3ab6:	2f 90       	pop	r2
    3ab8:	08 95       	ret

00003aba <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>:
    3aba:	8f 92       	push	r8
    3abc:	9f 92       	push	r9
    3abe:	af 92       	push	r10
        return 0;
    }
}

int DNSClient::getHostByName(const char* aHostname, IPAddress& aResult)
{
    3ac0:	bf 92       	push	r11
    3ac2:	cf 92       	push	r12
    3ac4:	df 92       	push	r13
    3ac6:	ef 92       	push	r14
    3ac8:	ff 92       	push	r15
    3aca:	0f 93       	push	r16
    3acc:	1f 93       	push	r17
    3ace:	cf 93       	push	r28
    3ad0:	df 93       	push	r29
    3ad2:	00 d0       	rcall	.+0      	; 0x3ad4 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x1a>
    3ad4:	00 d0       	rcall	.+0      	; 0x3ad6 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x1c>
    3ad6:	00 d0       	rcall	.+0      	; 0x3ad8 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x1e>
    3ad8:	cd b7       	in	r28, 0x3d	; 61
    3ada:	de b7       	in	r29, 0x3e	; 62
    3adc:	7c 01       	movw	r14, r24
    3ade:	4b 01       	movw	r8, r22
    3ae0:	5a 01       	movw	r10, r20
    int ret =0;

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
    3ae2:	9e dd       	rcall	.-1220   	; 0x3620 <_ZN9DNSClient9inet_atonEPKcR9IPAddress>
    3ae4:	8c 01       	movw	r16, r24
    3ae6:	89 2b       	or	r24, r25
    3ae8:	09 f0       	breq	.+2      	; 0x3aec <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x32>
    3aea:	57 c0       	rjmp	.+174    	; 0x3b9a <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xe0>
        // It is, our work here is done
        return 1;
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    3aec:	f7 01       	movw	r30, r14
    3aee:	42 81       	ldd	r20, Z+2	; 0x02
    3af0:	53 81       	ldd	r21, Z+3	; 0x03
    3af2:	64 81       	ldd	r22, Z+4	; 0x04
    3af4:	75 81       	ldd	r23, Z+5	; 0x05
    3af6:	80 91 f5 09 	lds	r24, 0x09F5	; 0x8009f5 <_ZL11INADDR_NONE+0x2>
    3afa:	90 91 f6 09 	lds	r25, 0x09F6	; 0x8009f6 <_ZL11INADDR_NONE+0x3>
    3afe:	a0 91 f7 09 	lds	r26, 0x09F7	; 0x8009f7 <_ZL11INADDR_NONE+0x4>
    3b02:	b0 91 f8 09 	lds	r27, 0x09F8	; 0x8009f8 <_ZL11INADDR_NONE+0x5>
    3b06:	48 17       	cp	r20, r24
    3b08:	59 07       	cpc	r21, r25
    3b0a:	6a 07       	cpc	r22, r26
    3b0c:	7b 07       	cpc	r23, r27
    3b0e:	09 f4       	brne	.+2      	; 0x3b12 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x58>
    3b10:	47 c0       	rjmp	.+142    	; 0x3ba0 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xe6>
    {
        return INVALID_SERVER;
    }
	
    // Find a socket to use
    if (iUdp.begin(1024+(millis() & 0xF)) == 1)
    3b12:	0e 94 e5 2f 	call	0x5fca	; 0x5fca <millis>
    3b16:	67 01       	movw	r12, r14
    3b18:	f8 e0       	ldi	r31, 0x08	; 8
    3b1a:	cf 0e       	add	r12, r31
    3b1c:	d1 1c       	adc	r13, r1
    3b1e:	6f 70       	andi	r22, 0x0F	; 15
    3b20:	77 27       	eor	r23, r23
    3b22:	7c 5f       	subi	r23, 0xFC	; 252
    3b24:	c6 01       	movw	r24, r12
    3b26:	89 d3       	rcall	.+1810   	; 0x423a <_ZN11EthernetUDP5beginEj>
    3b28:	81 30       	cpi	r24, 0x01	; 1
    3b2a:	09 f0       	breq	.+2      	; 0x3b2e <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x74>
    3b2c:	3b c0       	rjmp	.+118    	; 0x3ba4 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xea>
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    3b2e:	8e e7       	ldi	r24, 0x7E	; 126
    3b30:	98 e0       	ldi	r25, 0x08	; 8
    3b32:	9a 83       	std	Y+2, r25	; 0x02
    3b34:	89 83       	std	Y+1, r24	; 0x01
    3b36:	f7 01       	movw	r30, r14
    3b38:	82 81       	ldd	r24, Z+2	; 0x02
    3b3a:	93 81       	ldd	r25, Z+3	; 0x03
    3b3c:	a4 81       	ldd	r26, Z+4	; 0x04
    3b3e:	b5 81       	ldd	r27, Z+5	; 0x05
    3b40:	8b 83       	std	Y+3, r24	; 0x03
    3b42:	9c 83       	std	Y+4, r25	; 0x04
    3b44:	ad 83       	std	Y+5, r26	; 0x05
    3b46:	be 83       	std	Y+6, r27	; 0x06
        // Try up to three times
        int retries = 0;
//        while ((retries < 3) && (ret <= 0))
        {
            // Send DNS request
            ret = iUdp.beginPacket(iDNSServer, DNS_PORT);
    3b48:	45 e3       	ldi	r20, 0x35	; 53
    3b4a:	50 e0       	ldi	r21, 0x00	; 0
    3b4c:	be 01       	movw	r22, r28
    3b4e:	6f 5f       	subi	r22, 0xFF	; 255
    3b50:	7f 4f       	sbci	r23, 0xFF	; 255
    3b52:	c6 01       	movw	r24, r12
    3b54:	f7 d2       	rcall	.+1518   	; 0x4144 <_ZN11EthernetUDP11beginPacketE9IPAddressj>
            if (ret != 0)
    3b56:	89 2b       	or	r24, r25
    3b58:	19 f4       	brne	.+6      	; 0x3b60 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xa6>
    3b5a:	00 e0       	ldi	r16, 0x00	; 0
    3b5c:	10 e0       	ldi	r17, 0x00	; 0
            {
                // Now output the request data
                ret = BuildRequest(aHostname);
    3b5e:	1a c0       	rjmp	.+52     	; 0x3b94 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xda>
    3b60:	b4 01       	movw	r22, r8
    3b62:	c7 01       	movw	r24, r14
                if (ret != 0)
    3b64:	a8 dd       	rcall	.-1200   	; 0x36b6 <_ZN9DNSClient12BuildRequestEPKc>
    3b66:	89 2b       	or	r24, r25
                {
                    // And finally send the request
                    ret = iUdp.endPacket();
    3b68:	c1 f3       	breq	.-16     	; 0x3b5a <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xa0>
    3b6a:	c6 01       	movw	r24, r12
    3b6c:	f2 d2       	rcall	.+1508   	; 0x4152 <_ZN11EthernetUDP9endPacketEv>
                    if (ret != 0)
    3b6e:	89 2b       	or	r24, r25
    3b70:	a1 f3       	breq	.-24     	; 0x3b5a <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xa0>
    3b72:	83 e0       	ldi	r24, 0x03	; 3
    3b74:	88 2e       	mov	r8, r24
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
                        {
                            ret = ProcessResponse(5000, aResult);
    3b76:	91 2c       	mov	r9, r1
    3b78:	a5 01       	movw	r20, r10
    3b7a:	68 e8       	ldi	r22, 0x88	; 136
    3b7c:	73 e1       	ldi	r23, 0x13	; 19
    3b7e:	c7 01       	movw	r24, r14
    3b80:	3b de       	rcall	.-906    	; 0x37f8 <_ZN9DNSClient15ProcessResponseEjR9IPAddress>
    3b82:	8c 01       	movw	r16, r24
    3b84:	21 e0       	ldi	r18, 0x01	; 1
    3b86:	82 1a       	sub	r8, r18
    3b88:	91 08       	sbc	r9, r1
                    if (ret != 0)
                    {
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
    3b8a:	21 f0       	breq	.+8      	; 0x3b94 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xda>
    3b8c:	0f 3f       	cpi	r16, 0xFF	; 255
    3b8e:	ff ef       	ldi	r31, 0xFF	; 255
    3b90:	1f 07       	cpc	r17, r31
            }
            retries++;
        }

        // We're done with the socket now
        iUdp.stop();
    3b92:	91 f3       	breq	.-28     	; 0x3b78 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xbe>
    3b94:	c6 01       	movw	r24, r12
    3b96:	c2 d2       	rcall	.+1412   	; 0x411c <_ZN11EthernetUDP4stopEv>
    3b98:	05 c0       	rjmp	.+10     	; 0x3ba4 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xea>

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
    {
        // It is, our work here is done
        return 1;
    3b9a:	01 e0       	ldi	r16, 0x01	; 1
    3b9c:	10 e0       	ldi	r17, 0x00	; 0
    3b9e:	02 c0       	rjmp	.+4      	; 0x3ba4 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xea>
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    {
        return INVALID_SERVER;
    3ba0:	0e ef       	ldi	r16, 0xFE	; 254
    3ba2:	1f ef       	ldi	r17, 0xFF	; 255
        // We're done with the socket now
        iUdp.stop();
    }

    return ret;
}
    3ba4:	c8 01       	movw	r24, r16
    3ba6:	26 96       	adiw	r28, 0x06	; 6
    3ba8:	0f b6       	in	r0, 0x3f	; 63
    3baa:	f8 94       	cli
    3bac:	de bf       	out	0x3e, r29	; 62
    3bae:	0f be       	out	0x3f, r0	; 63
    3bb0:	cd bf       	out	0x3d, r28	; 61
    3bb2:	df 91       	pop	r29
    3bb4:	cf 91       	pop	r28
    3bb6:	1f 91       	pop	r17
    3bb8:	0f 91       	pop	r16
    3bba:	ff 90       	pop	r15
    3bbc:	ef 90       	pop	r14
    3bbe:	df 90       	pop	r13
    3bc0:	cf 90       	pop	r12
    3bc2:	bf 90       	pop	r11
    3bc4:	af 90       	pop	r10
    3bc6:	9f 90       	pop	r9
    3bc8:	8f 90       	pop	r8
    3bca:	08 95       	ret

00003bcc <_ZN10W5500Class8writeGAREPh>:
    return _dnsDomainName;
}

char* EthernetClass::hostName(){
    return _hostName;
}
    3bcc:	24 e0       	ldi	r18, 0x04	; 4
    3bce:	30 e0       	ldi	r19, 0x00	; 0
    3bd0:	ac 01       	movw	r20, r24
    3bd2:	64 e0       	ldi	r22, 0x04	; 4
    3bd4:	81 e0       	ldi	r24, 0x01	; 1
    3bd6:	90 e0       	ldi	r25, 0x00	; 0
    3bd8:	35 c6       	rjmp	.+3178   	; 0x4844 <_ZN10W5500Class5writeEjhPKhj>

00003bda <_ZN10W5500Class9writeSUBREPh>:
    3bda:	24 e0       	ldi	r18, 0x04	; 4
    3bdc:	30 e0       	ldi	r19, 0x00	; 0
    3bde:	ac 01       	movw	r20, r24
    3be0:	64 e0       	ldi	r22, 0x04	; 4
    3be2:	85 e0       	ldi	r24, 0x05	; 5
    3be4:	90 e0       	ldi	r25, 0x00	; 0
    3be6:	2e c6       	rjmp	.+3164   	; 0x4844 <_ZN10W5500Class5writeEjhPKhj>

00003be8 <_ZN10W5500Class9writeSHAREPh>:
    3be8:	26 e0       	ldi	r18, 0x06	; 6
    3bea:	30 e0       	ldi	r19, 0x00	; 0
    3bec:	ac 01       	movw	r20, r24
    3bee:	64 e0       	ldi	r22, 0x04	; 4
    3bf0:	89 e0       	ldi	r24, 0x09	; 9
    3bf2:	90 e0       	ldi	r25, 0x00	; 0
    3bf4:	27 c6       	rjmp	.+3150   	; 0x4844 <_ZN10W5500Class5writeEjhPKhj>

00003bf6 <_ZN10W5500Class9writeSIPREPh>:
    3bf6:	24 e0       	ldi	r18, 0x04	; 4
    3bf8:	30 e0       	ldi	r19, 0x00	; 0
    3bfa:	ac 01       	movw	r20, r24
    3bfc:	64 e0       	ldi	r22, 0x04	; 4
    3bfe:	8f e0       	ldi	r24, 0x0F	; 15
    3c00:	90 e0       	ldi	r25, 0x00	; 0
    3c02:	20 c6       	rjmp	.+3136   	; 0x4844 <_ZN10W5500Class5writeEjhPKhj>

00003c04 <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_>:
    3c04:	8f 92       	push	r8
    3c06:	9f 92       	push	r9
    3c08:	af 92       	push	r10
    3c0a:	bf 92       	push	r11
    3c0c:	cf 92       	push	r12
    3c0e:	df 92       	push	r13
    3c10:	ef 92       	push	r14
    3c12:	ff 92       	push	r15
    3c14:	0f 93       	push	r16
    3c16:	1f 93       	push	r17
    3c18:	cf 93       	push	r28
    3c1a:	df 93       	push	r29
    3c1c:	4c 01       	movw	r8, r24
    3c1e:	5b 01       	movw	r10, r22
    3c20:	6a 01       	movw	r12, r20
    3c22:	e9 01       	movw	r28, r18
    3c24:	fc 01       	movw	r30, r24
    3c26:	64 85       	ldd	r22, Z+12	; 0x0c
    3c28:	83 e3       	ldi	r24, 0x33	; 51
    3c2a:	9a e0       	ldi	r25, 0x0A	; 10
    3c2c:	53 d6       	rcall	.+3238   	; 0x48d4 <_ZN10W5500Class4initEh>
    3c2e:	c5 01       	movw	r24, r10
    3c30:	db df       	rcall	.-74     	; 0x3be8 <_ZN10W5500Class9writeSHAREPh>
    3c32:	c6 01       	movw	r24, r12
    3c34:	02 96       	adiw	r24, 0x02	; 2
    3c36:	df df       	rcall	.-66     	; 0x3bf6 <_ZN10W5500Class9writeSIPREPh>
    3c38:	c8 01       	movw	r24, r16
    3c3a:	02 96       	adiw	r24, 0x02	; 2
    3c3c:	c7 df       	rcall	.-114    	; 0x3bcc <_ZN10W5500Class8writeGAREPh>
    3c3e:	c7 01       	movw	r24, r14
    3c40:	02 96       	adiw	r24, 0x02	; 2
    3c42:	cb df       	rcall	.-106    	; 0x3bda <_ZN10W5500Class9writeSUBREPh>
    3c44:	8a 81       	ldd	r24, Y+2	; 0x02
    3c46:	9b 81       	ldd	r25, Y+3	; 0x03
    3c48:	ac 81       	ldd	r26, Y+4	; 0x04
    3c4a:	bd 81       	ldd	r27, Y+5	; 0x05
    3c4c:	f4 01       	movw	r30, r8
    3c4e:	82 83       	std	Z+2, r24	; 0x02
    3c50:	93 83       	std	Z+3, r25	; 0x03
    3c52:	a4 83       	std	Z+4, r26	; 0x04
    3c54:	b5 83       	std	Z+5, r27	; 0x05
    3c56:	df 91       	pop	r29
    3c58:	cf 91       	pop	r28
    3c5a:	1f 91       	pop	r17
    3c5c:	0f 91       	pop	r16
    3c5e:	ff 90       	pop	r15
    3c60:	ef 90       	pop	r14
    3c62:	df 90       	pop	r13
    3c64:	cf 90       	pop	r12
    3c66:	bf 90       	pop	r11
    3c68:	af 90       	pop	r10
    3c6a:	9f 90       	pop	r9
    3c6c:	8f 90       	pop	r8
    3c6e:	08 95       	ret

00003c70 <_ZN13EthernetClass11dnsServerIPEv>:
    3c70:	2e e7       	ldi	r18, 0x7E	; 126
    3c72:	38 e0       	ldi	r19, 0x08	; 8
    3c74:	fc 01       	movw	r30, r24
    3c76:	31 83       	std	Z+1, r19	; 0x01
    3c78:	20 83       	st	Z, r18
    3c7a:	fb 01       	movw	r30, r22
    3c7c:	42 81       	ldd	r20, Z+2	; 0x02
    3c7e:	53 81       	ldd	r21, Z+3	; 0x03
    3c80:	64 81       	ldd	r22, Z+4	; 0x04
    3c82:	75 81       	ldd	r23, Z+5	; 0x05
    3c84:	fc 01       	movw	r30, r24
    3c86:	42 83       	std	Z+2, r20	; 0x02
    3c88:	53 83       	std	Z+3, r21	; 0x03
    3c8a:	64 83       	std	Z+4, r22	; 0x04
    3c8c:	75 83       	std	Z+5, r23	; 0x05
    3c8e:	08 95       	ret

00003c90 <_GLOBAL__sub_I__ZN13EthernetClass6_stateE>:

EthernetClass Ethernet;
    3c90:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    3c92:	00 e0       	ldi	r16, 0x00	; 0
    3c94:	20 e0       	ldi	r18, 0x00	; 0
    3c96:	40 e0       	ldi	r20, 0x00	; 0
    3c98:	60 e0       	ldi	r22, 0x00	; 0
    3c9a:	86 e1       	ldi	r24, 0x16	; 22
    3c9c:	9a e0       	ldi	r25, 0x0A	; 10
    3c9e:	0e 94 64 2e 	call	0x5cc8	; 0x5cc8 <_ZN9IPAddressC1Ehhhh>
  uint8_t w5500_cspin;

  static uint8_t _state[MAX_SOCK_NUM];
  static uint16_t _server_port[MAX_SOCK_NUM];

  EthernetClass() { _dhcp = NULL; w5500_cspin = 10; }
    3ca2:	89 ef       	ldi	r24, 0xF9	; 249
    3ca4:	99 e0       	ldi	r25, 0x09	; 9
    3ca6:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <_ZN9IPAddressC1Ev>
    3caa:	e9 ef       	ldi	r30, 0xF9	; 249
    3cac:	f9 e0       	ldi	r31, 0x09	; 9
    3cae:	13 86       	std	Z+11, r1	; 0x0b
    3cb0:	12 86       	std	Z+10, r1	; 0x0a
    3cb2:	8a e0       	ldi	r24, 0x0A	; 10
    3cb4:	84 87       	std	Z+12, r24	; 0x0c
    3cb6:	0f 91       	pop	r16
    3cb8:	08 95       	ret

00003cba <_ZN14EthernetClientneERKS_>:
uint16_t EthernetClient::_srcport = 1024;

EthernetClient::EthernetClient() : _sock(MAX_SOCK_NUM) {
}

EthernetClient::EthernetClient(uint8_t sock) : _sock(sock) {
    3cba:	dc 01       	movw	r26, r24
    3cbc:	ed 91       	ld	r30, X+
    3cbe:	fc 91       	ld	r31, X
    3cc0:	02 8c       	ldd	r0, Z+26	; 0x1a
    3cc2:	f3 8d       	ldd	r31, Z+27	; 0x1b
    3cc4:	e0 2d       	mov	r30, r0
    3cc6:	09 95       	icall
    3cc8:	91 e0       	ldi	r25, 0x01	; 1
    3cca:	89 27       	eor	r24, r25
    3ccc:	08 95       	ret

00003cce <_ZN14EthernetClient5writeEh>:
    3cce:	cf 93       	push	r28
    3cd0:	df 93       	push	r29
    3cd2:	1f 92       	push	r1
    3cd4:	cd b7       	in	r28, 0x3d	; 61
    3cd6:	de b7       	in	r29, 0x3e	; 62
    3cd8:	69 83       	std	Y+1, r22	; 0x01
    3cda:	dc 01       	movw	r26, r24
    3cdc:	ed 91       	ld	r30, X+
    3cde:	fc 91       	ld	r31, X
    3ce0:	02 80       	ldd	r0, Z+2	; 0x02
    3ce2:	f3 81       	ldd	r31, Z+3	; 0x03
    3ce4:	e0 2d       	mov	r30, r0
    3ce6:	41 e0       	ldi	r20, 0x01	; 1
    3ce8:	50 e0       	ldi	r21, 0x00	; 0
    3cea:	be 01       	movw	r22, r28
    3cec:	6f 5f       	subi	r22, 0xFF	; 255
    3cee:	7f 4f       	sbci	r23, 0xFF	; 255
    3cf0:	09 95       	icall
    3cf2:	0f 90       	pop	r0
    3cf4:	df 91       	pop	r29
    3cf6:	cf 91       	pop	r28
    3cf8:	08 95       	ret

00003cfa <_ZN14EthernetClientcvbEv>:
    3cfa:	21 e0       	ldi	r18, 0x01	; 1
    3cfc:	fc 01       	movw	r30, r24
    3cfe:	84 85       	ldd	r24, Z+12	; 0x0c
    3d00:	88 30       	cpi	r24, 0x08	; 8
    3d02:	09 f4       	brne	.+2      	; 0x3d06 <_ZN14EthernetClientcvbEv+0xc>
    3d04:	20 e0       	ldi	r18, 0x00	; 0
    3d06:	82 2f       	mov	r24, r18
    3d08:	08 95       	ret

00003d0a <_ZN14EthernetClienteqERKS_>:
    3d0a:	fc 01       	movw	r30, r24
    3d0c:	94 85       	ldd	r25, Z+12	; 0x0c
    3d0e:	fb 01       	movw	r30, r22
    3d10:	84 85       	ldd	r24, Z+12	; 0x0c
    3d12:	98 13       	cpse	r25, r24
    3d14:	03 c0       	rjmp	.+6      	; 0x3d1c <_ZN14EthernetClienteqERKS_+0x12>
    3d16:	81 e0       	ldi	r24, 0x01	; 1
    3d18:	98 30       	cpi	r25, 0x08	; 8
    3d1a:	09 f4       	brne	.+2      	; 0x3d1e <_ZN14EthernetClienteqERKS_+0x14>
    3d1c:	80 e0       	ldi	r24, 0x00	; 0
    3d1e:	08 95       	ret

00003d20 <_ZN14EthernetClient7connectEPKcj>:
    3d20:	cf 92       	push	r12
    3d22:	df 92       	push	r13
    3d24:	ef 92       	push	r14
    3d26:	ff 92       	push	r15
    3d28:	0f 93       	push	r16
    3d2a:	1f 93       	push	r17
    3d2c:	cf 93       	push	r28
    3d2e:	df 93       	push	r29
    3d30:	cd b7       	in	r28, 0x3d	; 61
    3d32:	de b7       	in	r29, 0x3e	; 62
    3d34:	af 97       	sbiw	r28, 0x2f	; 47
    3d36:	0f b6       	in	r0, 0x3f	; 63
    3d38:	f8 94       	cli
    3d3a:	de bf       	out	0x3e, r29	; 62
    3d3c:	0f be       	out	0x3f, r0	; 63
    3d3e:	cd bf       	out	0x3d, r28	; 61
    3d40:	8c 01       	movw	r16, r24
    3d42:	6b 01       	movw	r12, r22
    3d44:	7a 01       	movw	r14, r20
    3d46:	ce 01       	movw	r24, r28
    3d48:	01 96       	adiw	r24, 0x01	; 1
    3d4a:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <_ZN9IPAddressC1Ev>
    3d4e:	ce 01       	movw	r24, r28
    3d50:	09 96       	adiw	r24, 0x09	; 9
    3d52:	f3 d2       	rcall	.+1510   	; 0x433a <_ZN11EthernetUDPC1Ev>
    3d54:	ce 01       	movw	r24, r28
    3d56:	8a 96       	adiw	r24, 0x2a	; 42
    3d58:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <_ZN9IPAddressC1Ev>
    3d5c:	69 ef       	ldi	r22, 0xF9	; 249
    3d5e:	79 e0       	ldi	r23, 0x09	; 9
    3d60:	ce 01       	movw	r24, r28
    3d62:	84 96       	adiw	r24, 0x24	; 36
    3d64:	85 df       	rcall	.-246    	; 0x3c70 <_ZN13EthernetClass11dnsServerIPEv>
    3d66:	be 01       	movw	r22, r28
    3d68:	6c 5d       	subi	r22, 0xDC	; 220
    3d6a:	7f 4f       	sbci	r23, 0xFF	; 255
    3d6c:	ce 01       	movw	r24, r28
    3d6e:	01 96       	adiw	r24, 0x01	; 1
    3d70:	4a dc       	rcall	.-1900   	; 0x3606 <_ZN9DNSClient5beginERK9IPAddress>
    3d72:	ae 01       	movw	r20, r28
    3d74:	46 5d       	subi	r20, 0xD6	; 214
    3d76:	5f 4f       	sbci	r21, 0xFF	; 255
    3d78:	b6 01       	movw	r22, r12
    3d7a:	ce 01       	movw	r24, r28
    3d7c:	01 96       	adiw	r24, 0x01	; 1
    3d7e:	9d de       	rcall	.-710    	; 0x3aba <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>
    3d80:	81 30       	cpi	r24, 0x01	; 1
    3d82:	91 05       	cpc	r25, r1
    3d84:	c1 f4       	brne	.+48     	; 0x3db6 <_ZN14EthernetClient7connectEPKcj+0x96>
    3d86:	d8 01       	movw	r26, r16
    3d88:	ed 91       	ld	r30, X+
    3d8a:	fc 91       	ld	r31, X
    3d8c:	06 84       	ldd	r0, Z+14	; 0x0e
    3d8e:	f7 85       	ldd	r31, Z+15	; 0x0f
    3d90:	e0 2d       	mov	r30, r0
    3d92:	8e e7       	ldi	r24, 0x7E	; 126
    3d94:	98 e0       	ldi	r25, 0x08	; 8
    3d96:	9d a3       	std	Y+37, r25	; 0x25
    3d98:	8c a3       	std	Y+36, r24	; 0x24
    3d9a:	8c a5       	ldd	r24, Y+44	; 0x2c
    3d9c:	9d a5       	ldd	r25, Y+45	; 0x2d
    3d9e:	ae a5       	ldd	r26, Y+46	; 0x2e
    3da0:	bf a5       	ldd	r27, Y+47	; 0x2f
    3da2:	8e a3       	std	Y+38, r24	; 0x26
    3da4:	9f a3       	std	Y+39, r25	; 0x27
    3da6:	a8 a7       	std	Y+40, r26	; 0x28
    3da8:	b9 a7       	std	Y+41, r27	; 0x29
    3daa:	a7 01       	movw	r20, r14
    3dac:	be 01       	movw	r22, r28
    3dae:	6c 5d       	subi	r22, 0xDC	; 220
    3db0:	7f 4f       	sbci	r23, 0xFF	; 255
    3db2:	c8 01       	movw	r24, r16
    3db4:	09 95       	icall
    3db6:	af 96       	adiw	r28, 0x2f	; 47
    3db8:	0f b6       	in	r0, 0x3f	; 63
    3dba:	f8 94       	cli
    3dbc:	de bf       	out	0x3e, r29	; 62
    3dbe:	0f be       	out	0x3f, r0	; 63
    3dc0:	cd bf       	out	0x3d, r28	; 61
    3dc2:	df 91       	pop	r29
    3dc4:	cf 91       	pop	r28
    3dc6:	1f 91       	pop	r17
    3dc8:	0f 91       	pop	r16
    3dca:	ff 90       	pop	r15
    3dcc:	ef 90       	pop	r14
    3dce:	df 90       	pop	r13
    3dd0:	cf 90       	pop	r12
    3dd2:	08 95       	ret

00003dd4 <_ZN14EthernetClient5writeEPKhj>:
    3dd4:	0f 93       	push	r16
    3dd6:	1f 93       	push	r17
    3dd8:	cf 93       	push	r28
    3dda:	df 93       	push	r29
    3ddc:	8c 01       	movw	r16, r24
    3dde:	d4 2f       	mov	r29, r20
    3de0:	c5 2f       	mov	r28, r21
    3de2:	fc 01       	movw	r30, r24
    3de4:	84 85       	ldd	r24, Z+12	; 0x0c
    3de6:	88 30       	cpi	r24, 0x08	; 8
    3de8:	41 f4       	brne	.+16     	; 0x3dfa <_ZN14EthernetClient5writeEPKhj+0x26>
    3dea:	81 e0       	ldi	r24, 0x01	; 1
    3dec:	90 e0       	ldi	r25, 0x00	; 0
    3dee:	f8 01       	movw	r30, r16
    3df0:	93 83       	std	Z+3, r25	; 0x03
    3df2:	82 83       	std	Z+2, r24	; 0x02
    3df4:	80 e0       	ldi	r24, 0x00	; 0
    3df6:	90 e0       	ldi	r25, 0x00	; 0
    3df8:	05 c0       	rjmp	.+10     	; 0x3e04 <_ZN14EthernetClient5writeEPKhj+0x30>
    3dfa:	cf d3       	rcall	.+1950   	; 0x459a <_Z4sendhPKhj>
    3dfc:	89 2b       	or	r24, r25
    3dfe:	a9 f3       	breq	.-22     	; 0x3dea <_ZN14EthernetClient5writeEPKhj+0x16>
    3e00:	8d 2f       	mov	r24, r29
    3e02:	9c 2f       	mov	r25, r28
    3e04:	df 91       	pop	r29
    3e06:	cf 91       	pop	r28
    3e08:	1f 91       	pop	r17
    3e0a:	0f 91       	pop	r16
    3e0c:	08 95       	ret

00003e0e <_ZN14EthernetClient9availableEv>:
    3e0e:	fc 01       	movw	r30, r24
    3e10:	64 85       	ldd	r22, Z+12	; 0x0c
    3e12:	68 30       	cpi	r22, 0x08	; 8
    3e14:	19 f0       	breq	.+6      	; 0x3e1c <_ZN14EthernetClient9availableEv+0xe>
    3e16:	83 e3       	ldi	r24, 0x33	; 51
    3e18:	9a e0       	ldi	r25, 0x0A	; 10
    3e1a:	d0 c5       	rjmp	.+2976   	; 0x49bc <_ZN10W5500Class17getRXReceivedSizeEh>
    3e1c:	80 e0       	ldi	r24, 0x00	; 0
    3e1e:	90 e0       	ldi	r25, 0x00	; 0
    3e20:	08 95       	ret

00003e22 <_ZN14EthernetClient4readEv>:
    3e22:	cf 93       	push	r28
    3e24:	df 93       	push	r29
    3e26:	1f 92       	push	r1
    3e28:	cd b7       	in	r28, 0x3d	; 61
    3e2a:	de b7       	in	r29, 0x3e	; 62
    3e2c:	41 e0       	ldi	r20, 0x01	; 1
    3e2e:	50 e0       	ldi	r21, 0x00	; 0
    3e30:	be 01       	movw	r22, r28
    3e32:	6f 5f       	subi	r22, 0xFF	; 255
    3e34:	7f 4f       	sbci	r23, 0xFF	; 255
    3e36:	fc 01       	movw	r30, r24
    3e38:	84 85       	ldd	r24, Z+12	; 0x0c
    3e3a:	f7 d3       	rcall	.+2030   	; 0x462a <_Z4recvhPhi>
    3e3c:	18 16       	cp	r1, r24
    3e3e:	19 06       	cpc	r1, r25
    3e40:	1c f4       	brge	.+6      	; 0x3e48 <_ZN14EthernetClient4readEv+0x26>
    3e42:	89 81       	ldd	r24, Y+1	; 0x01
    3e44:	90 e0       	ldi	r25, 0x00	; 0
    3e46:	02 c0       	rjmp	.+4      	; 0x3e4c <_ZN14EthernetClient4readEv+0x2a>
    3e48:	8f ef       	ldi	r24, 0xFF	; 255
    3e4a:	9f ef       	ldi	r25, 0xFF	; 255
    3e4c:	0f 90       	pop	r0
    3e4e:	df 91       	pop	r29
    3e50:	cf 91       	pop	r28
    3e52:	08 95       	ret

00003e54 <_ZN14EthernetClient4readEPhj>:
    3e54:	fc 01       	movw	r30, r24
    3e56:	84 85       	ldd	r24, Z+12	; 0x0c
    3e58:	e8 c3       	rjmp	.+2000   	; 0x462a <_Z4recvhPhi>

00003e5a <_ZN14EthernetClient4peekEv>:
    3e5a:	0f 93       	push	r16
    3e5c:	1f 93       	push	r17
    3e5e:	cf 93       	push	r28
    3e60:	df 93       	push	r29
    3e62:	1f 92       	push	r1
    3e64:	cd b7       	in	r28, 0x3d	; 61
    3e66:	de b7       	in	r29, 0x3e	; 62
    3e68:	8c 01       	movw	r16, r24
    3e6a:	dc 01       	movw	r26, r24
    3e6c:	ed 91       	ld	r30, X+
    3e6e:	fc 91       	ld	r31, X
    3e70:	00 84       	ldd	r0, Z+8	; 0x08
    3e72:	f1 85       	ldd	r31, Z+9	; 0x09
    3e74:	e0 2d       	mov	r30, r0
    3e76:	09 95       	icall
    3e78:	89 2b       	or	r24, r25
    3e7a:	49 f0       	breq	.+18     	; 0x3e8e <_ZN14EthernetClient4peekEv+0x34>
    3e7c:	be 01       	movw	r22, r28
    3e7e:	6f 5f       	subi	r22, 0xFF	; 255
    3e80:	7f 4f       	sbci	r23, 0xFF	; 255
    3e82:	f8 01       	movw	r30, r16
    3e84:	84 85       	ldd	r24, Z+12	; 0x0c
    3e86:	12 d4       	rcall	.+2084   	; 0x46ac <_Z4peekhPh>
    3e88:	89 81       	ldd	r24, Y+1	; 0x01
    3e8a:	90 e0       	ldi	r25, 0x00	; 0
    3e8c:	02 c0       	rjmp	.+4      	; 0x3e92 <_ZN14EthernetClient4peekEv+0x38>
    3e8e:	8f ef       	ldi	r24, 0xFF	; 255
    3e90:	9f ef       	ldi	r25, 0xFF	; 255
    3e92:	0f 90       	pop	r0
    3e94:	df 91       	pop	r29
    3e96:	cf 91       	pop	r28
    3e98:	1f 91       	pop	r17
    3e9a:	0f 91       	pop	r16
    3e9c:	08 95       	ret

00003e9e <_ZN14EthernetClient5flushEv>:
    3e9e:	fc 01       	movw	r30, r24
    3ea0:	84 85       	ldd	r24, Z+12	; 0x0c
    3ea2:	11 c4       	rjmp	.+2082   	; 0x46c6 <_Z5flushh>

00003ea4 <_ZN14EthernetClientC1Ev>:
    3ea4:	fc 01       	movw	r30, r24
    3ea6:	13 82       	std	Z+3, r1	; 0x03
    3ea8:	12 82       	std	Z+2, r1	; 0x02
    3eaa:	88 ee       	ldi	r24, 0xE8	; 232
    3eac:	93 e0       	ldi	r25, 0x03	; 3
    3eae:	a0 e0       	ldi	r26, 0x00	; 0
    3eb0:	b0 e0       	ldi	r27, 0x00	; 0
    3eb2:	84 83       	std	Z+4, r24	; 0x04
    3eb4:	95 83       	std	Z+5, r25	; 0x05
    3eb6:	a6 83       	std	Z+6, r26	; 0x06
    3eb8:	b7 83       	std	Z+7, r27	; 0x07
    3eba:	8a ef       	ldi	r24, 0xFA	; 250
    3ebc:	97 e0       	ldi	r25, 0x07	; 7
    3ebe:	91 83       	std	Z+1, r25	; 0x01
    3ec0:	80 83       	st	Z, r24
    3ec2:	88 e0       	ldi	r24, 0x08	; 8
    3ec4:	84 87       	std	Z+12, r24	; 0x0c
    3ec6:	08 95       	ret

00003ec8 <_ZN14EthernetClient6statusEv>:
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
}

uint8_t EthernetClient::status() {
  if (_sock == MAX_SOCK_NUM) return SnSR::CLOSED;
    3ec8:	fc 01       	movw	r30, r24
    3eca:	64 85       	ldd	r22, Z+12	; 0x0c
    3ecc:	68 30       	cpi	r22, 0x08	; 8
    3ece:	39 f0       	breq	.+14     	; 0x3ede <_ZN14EthernetClient6statusEv+0x16>

extern W5500Class w5500;

uint8_t W5500Class::readSn(SOCKET _s, uint16_t _addr) {
    uint8_t cntl_byte = (_s<<5)+0x08;
    return read(_addr, cntl_byte);
    3ed0:	62 95       	swap	r22
    3ed2:	66 0f       	add	r22, r22
    3ed4:	60 7e       	andi	r22, 0xE0	; 224
    3ed6:	68 5f       	subi	r22, 0xF8	; 248
    3ed8:	83 e0       	ldi	r24, 0x03	; 3
    3eda:	90 e0       	ldi	r25, 0x00	; 0
    3edc:	df c4       	rjmp	.+2494   	; 0x489c <_ZN10W5500Class4readEjh>
  return w5500.readSnSR(_sock);
}
    3ede:	80 e0       	ldi	r24, 0x00	; 0
    3ee0:	08 95       	ret

00003ee2 <_ZN14EthernetClient9connectedEv>:

  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
    3ee2:	cf 93       	push	r28
    3ee4:	df 93       	push	r29
  if (_sock == MAX_SOCK_NUM) return 0;
    3ee6:	fc 01       	movw	r30, r24
    3ee8:	24 85       	ldd	r18, Z+12	; 0x0c
    3eea:	28 30       	cpi	r18, 0x08	; 8
    3eec:	c9 f0       	breq	.+50     	; 0x3f20 <_ZN14EthernetClient9connectedEv+0x3e>
    3eee:	ec 01       	movw	r28, r24
  
  uint8_t s = status();
    3ef0:	eb df       	rcall	.-42     	; 0x3ec8 <_ZN14EthernetClient6statusEv>
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
    3ef2:	84 31       	cpi	r24, 0x14	; 20
    3ef4:	81 f0       	breq	.+32     	; 0x3f16 <_ZN14EthernetClient9connectedEv+0x34>

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
  
  uint8_t s = status();
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    3ef6:	88 23       	and	r24, r24
    3ef8:	71 f0       	breq	.+28     	; 0x3f16 <_ZN14EthernetClient9connectedEv+0x34>
    3efa:	88 31       	cpi	r24, 0x18	; 24
    3efc:	61 f0       	breq	.+24     	; 0x3f16 <_ZN14EthernetClient9connectedEv+0x34>
    (s == SnSR::CLOSE_WAIT && !available()));
    3efe:	8c 31       	cpi	r24, 0x1C	; 28
    3f00:	61 f4       	brne	.+24     	; 0x3f1a <_ZN14EthernetClient9connectedEv+0x38>
    3f02:	e8 81       	ld	r30, Y
    3f04:	f9 81       	ldd	r31, Y+1	; 0x01
    3f06:	00 84       	ldd	r0, Z+8	; 0x08
    3f08:	f1 85       	ldd	r31, Z+9	; 0x09
    3f0a:	e0 2d       	mov	r30, r0
    3f0c:	ce 01       	movw	r24, r28
    3f0e:	09 95       	icall
    3f10:	21 e0       	ldi	r18, 0x01	; 1
    3f12:	89 2b       	or	r24, r25
    3f14:	19 f4       	brne	.+6      	; 0x3f1c <_ZN14EthernetClient9connectedEv+0x3a>
    3f16:	20 e0       	ldi	r18, 0x00	; 0
    3f18:	01 c0       	rjmp	.+2      	; 0x3f1c <_ZN14EthernetClient9connectedEv+0x3a>
    3f1a:	21 e0       	ldi	r18, 0x01	; 1
    3f1c:	82 2f       	mov	r24, r18
    3f1e:	01 c0       	rjmp	.+2      	; 0x3f22 <_ZN14EthernetClient9connectedEv+0x40>
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
    3f20:	80 e0       	ldi	r24, 0x00	; 0
  
  uint8_t s = status();
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
}
    3f22:	df 91       	pop	r29
    3f24:	cf 91       	pop	r28
    3f26:	08 95       	ret

00003f28 <_ZN14EthernetClient4stopEv>:

void EthernetClient::flush() {
  ::flush(_sock);
}

void EthernetClient::stop() {
    3f28:	cf 92       	push	r12
    3f2a:	df 92       	push	r13
    3f2c:	ef 92       	push	r14
    3f2e:	ff 92       	push	r15
    3f30:	cf 93       	push	r28
    3f32:	df 93       	push	r29
    3f34:	ec 01       	movw	r28, r24
  if (_sock == MAX_SOCK_NUM)
    3f36:	8c 85       	ldd	r24, Y+12	; 0x0c
    3f38:	88 30       	cpi	r24, 0x08	; 8
    3f3a:	69 f1       	breq	.+90     	; 0x3f96 <_ZN14EthernetClient4stopEv+0x6e>
    return;

  // attempt to close the connection gracefully (send a FIN to other side)
  disconnect(_sock);
    3f3c:	29 d3       	rcall	.+1618   	; 0x4590 <_Z10disconnecth>
  unsigned long start = millis();
    3f3e:	0e 94 e5 2f 	call	0x5fca	; 0x5fca <millis>
    3f42:	6b 01       	movw	r12, r22
    3f44:	7c 01       	movw	r14, r24

  // wait a second for the connection to close
  while (status() != SnSR::CLOSED && millis() - start < 1000)
    3f46:	ce 01       	movw	r24, r28
    3f48:	bf df       	rcall	.-130    	; 0x3ec8 <_ZN14EthernetClient6statusEv>
    3f4a:	88 23       	and	r24, r24
    3f4c:	a1 f0       	breq	.+40     	; 0x3f76 <_ZN14EthernetClient4stopEv+0x4e>
    3f4e:	0e 94 e5 2f 	call	0x5fca	; 0x5fca <millis>
    3f52:	dc 01       	movw	r26, r24
    3f54:	cb 01       	movw	r24, r22
    3f56:	8c 19       	sub	r24, r12
    3f58:	9d 09       	sbc	r25, r13
    3f5a:	ae 09       	sbc	r26, r14
    3f5c:	bf 09       	sbc	r27, r15
    3f5e:	88 3e       	cpi	r24, 0xE8	; 232
    3f60:	93 40       	sbci	r25, 0x03	; 3
    3f62:	a1 05       	cpc	r26, r1
    3f64:	b1 05       	cpc	r27, r1
    3f66:	38 f4       	brcc	.+14     	; 0x3f76 <_ZN14EthernetClient4stopEv+0x4e>
    delay(1);
    3f68:	61 e0       	ldi	r22, 0x01	; 1
    3f6a:	70 e0       	ldi	r23, 0x00	; 0
    3f6c:	80 e0       	ldi	r24, 0x00	; 0
    3f6e:	90 e0       	ldi	r25, 0x00	; 0
    3f70:	0e 94 16 30 	call	0x602c	; 0x602c <delay>

  // if it hasn't closed, close it forcefully
  if (status() != SnSR::CLOSED)
    3f74:	e8 cf       	rjmp	.-48     	; 0x3f46 <_ZN14EthernetClient4stopEv+0x1e>
    3f76:	ce 01       	movw	r24, r28
    3f78:	a7 df       	rcall	.-178    	; 0x3ec8 <_ZN14EthernetClient6statusEv>
    3f7a:	88 23       	and	r24, r24
    close(_sock);
    3f7c:	11 f0       	breq	.+4      	; 0x3f82 <_ZN14EthernetClient4stopEv+0x5a>
    3f7e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3f80:	96 d2       	rcall	.+1324   	; 0x44ae <_Z5closeh>

  EthernetClass::_server_port[_sock] = 0;
    3f82:	ec 85       	ldd	r30, Y+12	; 0x0c
    3f84:	f0 e0       	ldi	r31, 0x00	; 0
    3f86:	ee 0f       	add	r30, r30
    3f88:	ff 1f       	adc	r31, r31
    3f8a:	ea 5f       	subi	r30, 0xFA	; 250
    3f8c:	f5 4f       	sbci	r31, 0xF5	; 245
    3f8e:	11 82       	std	Z+1, r1	; 0x01
    3f90:	10 82       	st	Z, r1
  _sock = MAX_SOCK_NUM;
    3f92:	88 e0       	ldi	r24, 0x08	; 8
    3f94:	8c 87       	std	Y+12, r24	; 0x0c
}
    3f96:	df 91       	pop	r29
    3f98:	cf 91       	pop	r28
    3f9a:	ff 90       	pop	r15
    3f9c:	ef 90       	pop	r14
    3f9e:	df 90       	pop	r13
    3fa0:	cf 90       	pop	r12
    3fa2:	08 95       	ret

00003fa4 <_ZN14EthernetClient7connectE9IPAddressj>:
  } else {
    return ret;
  }
}

int EthernetClient::connect(IPAddress ip, uint16_t port) {
    3fa4:	cf 92       	push	r12
    3fa6:	df 92       	push	r13
    3fa8:	ff 92       	push	r15
    3faa:	0f 93       	push	r16
    3fac:	1f 93       	push	r17
    3fae:	cf 93       	push	r28
    3fb0:	df 93       	push	r29
  if (_sock != MAX_SOCK_NUM)
    3fb2:	fc 01       	movw	r30, r24
    3fb4:	24 85       	ldd	r18, Z+12	; 0x0c
    3fb6:	28 30       	cpi	r18, 0x08	; 8
    3fb8:	c1 f5       	brne	.+112    	; 0x402a <_ZN14EthernetClient7connectE9IPAddressj+0x86>
    3fba:	6a 01       	movw	r12, r20
    3fbc:	8b 01       	movw	r16, r22
    3fbe:	ec 01       	movw	r28, r24
    3fc0:	f1 2c       	mov	r15, r1
    3fc2:	6f 2d       	mov	r22, r15
    3fc4:	62 95       	swap	r22
    3fc6:	66 0f       	add	r22, r22
    3fc8:	60 7e       	andi	r22, 0xE0	; 224
    3fca:	68 5f       	subi	r22, 0xF8	; 248
    3fcc:	83 e0       	ldi	r24, 0x03	; 3
    3fce:	90 e0       	ldi	r25, 0x00	; 0
    3fd0:	65 d4       	rcall	.+2250   	; 0x489c <_ZN10W5500Class4readEjh>
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
    3fd2:	81 11       	cpse	r24, r1
    3fd4:	02 c0       	rjmp	.+4      	; 0x3fda <_ZN14EthernetClient7connectE9IPAddressj+0x36>
      _sock = i;
    3fd6:	fc 86       	std	Y+12, r15	; 0x0c
    3fd8:	07 c0       	rjmp	.+14     	; 0x3fe8 <_ZN14EthernetClient7connectE9IPAddressj+0x44>
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
    3fda:	8b 7f       	andi	r24, 0xFB	; 251
    3fdc:	88 31       	cpi	r24, 0x18	; 24
    3fde:	d9 f3       	breq	.-10     	; 0x3fd6 <_ZN14EthernetClient7connectE9IPAddressj+0x32>
    3fe0:	f3 94       	inc	r15

int EthernetClient::connect(IPAddress ip, uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    3fe2:	f8 e0       	ldi	r31, 0x08	; 8
    3fe4:	ff 12       	cpse	r15, r31
    3fe6:	ed cf       	rjmp	.-38     	; 0x3fc2 <_ZN14EthernetClient7connectE9IPAddressj+0x1e>
      _sock = i;
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
    3fe8:	8c 85       	ldd	r24, Y+12	; 0x0c
    3fea:	88 30       	cpi	r24, 0x08	; 8
    3fec:	f1 f0       	breq	.+60     	; 0x402a <_ZN14EthernetClient7connectE9IPAddressj+0x86>
    return 0;

  _srcport++;
    3fee:	20 91 71 01 	lds	r18, 0x0171	; 0x800171 <_ZN14EthernetClient8_srcportE>
    3ff2:	30 91 72 01 	lds	r19, 0x0172	; 0x800172 <_ZN14EthernetClient8_srcportE+0x1>
    3ff6:	2f 5f       	subi	r18, 0xFF	; 255
    3ff8:	3f 4f       	sbci	r19, 0xFF	; 255
  if (_srcport == 0) _srcport = 1024;
    3ffa:	11 f4       	brne	.+4      	; 0x4000 <_ZN14EthernetClient7connectE9IPAddressj+0x5c>
    3ffc:	20 e0       	ldi	r18, 0x00	; 0
    3ffe:	34 e0       	ldi	r19, 0x04	; 4
    4000:	30 93 72 01 	sts	0x0172, r19	; 0x800172 <_ZN14EthernetClient8_srcportE+0x1>
    4004:	20 93 71 01 	sts	0x0171, r18	; 0x800171 <_ZN14EthernetClient8_srcportE>
  socket(_sock, SnMR::TCP, _srcport, 0);
    4008:	40 91 71 01 	lds	r20, 0x0171	; 0x800171 <_ZN14EthernetClient8_srcportE>
    400c:	50 91 72 01 	lds	r21, 0x0172	; 0x800172 <_ZN14EthernetClient8_srcportE+0x1>
    4010:	20 e0       	ldi	r18, 0x00	; 0
    4012:	61 e0       	ldi	r22, 0x01	; 1
    4014:	57 d2       	rcall	.+1198   	; 0x44c4 <_Z6sockethhjh>

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    4016:	b8 01       	movw	r22, r16
    4018:	6e 5f       	subi	r22, 0xFE	; 254
    401a:	7f 4f       	sbci	r23, 0xFF	; 255

  if (!::connect(_sock, rawIPAddress(ip), port)) {
    401c:	a6 01       	movw	r20, r12
    401e:	8c 85       	ldd	r24, Y+12	; 0x0c
    4020:	84 d2       	rcall	.+1288   	; 0x452a <_Z7connecthPhj>
    4022:	81 11       	cpse	r24, r1
    4024:	05 c0       	rjmp	.+10     	; 0x4030 <_ZN14EthernetClient7connectE9IPAddressj+0x8c>
    _sock = MAX_SOCK_NUM;
    4026:	88 e0       	ldi	r24, 0x08	; 8
    4028:	8c 87       	std	Y+12, r24	; 0x0c
    return 0;
    402a:	80 e0       	ldi	r24, 0x00	; 0
    402c:	90 e0       	ldi	r25, 0x00	; 0
  }

  while (status() != SnSR::ESTABLISHED) {
    402e:	0f c0       	rjmp	.+30     	; 0x404e <_ZN14EthernetClient7connectE9IPAddressj+0xaa>
    4030:	ce 01       	movw	r24, r28
    4032:	4a df       	rcall	.-364    	; 0x3ec8 <_ZN14EthernetClient6statusEv>
    4034:	87 31       	cpi	r24, 0x17	; 23
    4036:	49 f0       	breq	.+18     	; 0x404a <_ZN14EthernetClient7connectE9IPAddressj+0xa6>
    delay(1);
    4038:	61 e0       	ldi	r22, 0x01	; 1
    403a:	70 e0       	ldi	r23, 0x00	; 0
    403c:	80 e0       	ldi	r24, 0x00	; 0
    403e:	90 e0       	ldi	r25, 0x00	; 0
    4040:	0e 94 16 30 	call	0x602c	; 0x602c <delay>
    if (status() == SnSR::CLOSED) {
    4044:	ce 01       	movw	r24, r28
    4046:	40 df       	rcall	.-384    	; 0x3ec8 <_ZN14EthernetClient6statusEv>
    4048:	ec cf       	rjmp	.-40     	; 0x4022 <_ZN14EthernetClient7connectE9IPAddressj+0x7e>
      _sock = MAX_SOCK_NUM;
      return 0;
    }
  }

  return 1;
    404a:	81 e0       	ldi	r24, 0x01	; 1
    404c:	90 e0       	ldi	r25, 0x00	; 0
}
    404e:	df 91       	pop	r29
    4050:	cf 91       	pop	r28
    4052:	1f 91       	pop	r17
    4054:	0f 91       	pop	r16
    4056:	ff 90       	pop	r15
    4058:	df 90       	pop	r13
    405a:	cf 90       	pop	r12
    405c:	08 95       	ret

0000405e <_GLOBAL__sub_I__ZN14EthernetClient8_srcportE>:
  return _sock != MAX_SOCK_NUM;
}

bool EthernetClient::operator==(const EthernetClient& rhs) {
  return _sock == rhs._sock && _sock != MAX_SOCK_NUM && rhs._sock != MAX_SOCK_NUM;
}
    405e:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    4060:	00 e0       	ldi	r16, 0x00	; 0
    4062:	20 e0       	ldi	r18, 0x00	; 0
    4064:	40 e0       	ldi	r20, 0x00	; 0
    4066:	60 e0       	ldi	r22, 0x00	; 0
    4068:	8c e1       	ldi	r24, 0x1C	; 28
    406a:	9a e0       	ldi	r25, 0x0A	; 10
    406c:	0e 94 64 2e 	call	0x5cc8	; 0x5cc8 <_ZN9IPAddressC1Ehhhh>
    4070:	0f 91       	pop	r16
    4072:	08 95       	ret

00004074 <_GLOBAL__sub_I__ZN14EthernetServerC2Ej>:
      n += client.write(buffer, size);
    }
  }
  
  return n;
}
    4074:	0f 93       	push	r16
    4076:	00 e0       	ldi	r16, 0x00	; 0
    4078:	20 e0       	ldi	r18, 0x00	; 0
    407a:	40 e0       	ldi	r20, 0x00	; 0
    407c:	60 e0       	ldi	r22, 0x00	; 0
    407e:	82 e2       	ldi	r24, 0x22	; 34
    4080:	9a e0       	ldi	r25, 0x0A	; 10
    4082:	0e 94 64 2e 	call	0x5cc8	; 0x5cc8 <_ZN9IPAddressC1Ehhhh>
    4086:	0f 91       	pop	r16
    4088:	08 95       	ret

0000408a <_ZN3UDP14beginMulticastE9IPAddressj>:

class UDP : public Stream {

public:
  virtual uint8_t begin(uint16_t) =0;  // initialize, start listening on specified port. Returns 1 if successful, 0 if there are no sockets available to use
  virtual uint8_t beginMulticast(IPAddress, uint16_t) { return 0; }  // initialize, start listening on specified multicast IP address and port. Returns 1 if successful, 0 on failure
    408a:	80 e0       	ldi	r24, 0x00	; 0
    408c:	08 95       	ret

0000408e <_ZN11EthernetUDP4readEPcj>:
  // Read up to len bytes from the current packet and place them into buffer
  // Returns the number of bytes read, or 0 if none are available
  virtual int read(unsigned char* buffer, size_t len);
  // Read up to len characters from the current packet and place them into buffer
  // Returns the number of characters read, or 0 if none are available
  virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
    408e:	dc 01       	movw	r26, r24
    4090:	ed 91       	ld	r30, X+
    4092:	fc 91       	ld	r31, X
    4094:	04 8c       	ldd	r0, Z+28	; 0x1c
    4096:	f5 8d       	ldd	r31, Z+29	; 0x1d
    4098:	e0 2d       	mov	r30, r0
    409a:	09 94       	ijmp

0000409c <_ZN11EthernetUDP8remoteIPEv>:
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    409c:	2e e7       	ldi	r18, 0x7E	; 126
    409e:	38 e0       	ldi	r19, 0x08	; 8
    40a0:	fc 01       	movw	r30, r24
    40a2:	31 83       	std	Z+1, r19	; 0x01
    40a4:	20 83       	st	Z, r18
    40a6:	fb 01       	movw	r30, r22
    40a8:	41 89       	ldd	r20, Z+17	; 0x11
    40aa:	52 89       	ldd	r21, Z+18	; 0x12
    40ac:	63 89       	ldd	r22, Z+19	; 0x13
    40ae:	74 89       	ldd	r23, Z+20	; 0x14
    40b0:	fc 01       	movw	r30, r24
    40b2:	42 83       	std	Z+2, r20	; 0x02
    40b4:	53 83       	std	Z+3, r21	; 0x03
    40b6:	64 83       	std	Z+4, r22	; 0x04
    40b8:	75 83       	std	Z+5, r23	; 0x05
  // Return the next byte from the current packet without moving on to the next byte
  virtual int peek();
  virtual void flush();	// Finish reading the current packet

  // Return the IP address of the host who sent the current incoming packet
  virtual IPAddress remoteIP() { return _remoteIP; };
    40ba:	08 95       	ret

000040bc <_ZN11EthernetUDP10remotePortEv>:
  // Return the port of the host who sent the current incoming packet
  virtual uint16_t remotePort() { return _remotePort; };
    40bc:	fc 01       	movw	r30, r24
    40be:	85 89       	ldd	r24, Z+21	; 0x15
    40c0:	96 89       	ldd	r25, Z+22	; 0x16
    40c2:	08 95       	ret

000040c4 <_ZN11EthernetUDP9availableEv>:

/* return number of bytes available in the current packet,
   will return zero if parsePacket hasn't been called yet */
int EthernetUDP::available() {
  return _remaining;
}
    40c4:	fc 01       	movw	r30, r24
    40c6:	81 8d       	ldd	r24, Z+25	; 0x19
    40c8:	92 8d       	ldd	r25, Z+26	; 0x1a
    40ca:	08 95       	ret

000040cc <_ZN11EthernetUDP5writeEh>:
{
  return sendUDP(_sock);
}

size_t EthernetUDP::write(uint8_t byte)
{
    40cc:	cf 93       	push	r28
    40ce:	df 93       	push	r29
    40d0:	1f 92       	push	r1
    40d2:	cd b7       	in	r28, 0x3d	; 61
    40d4:	de b7       	in	r29, 0x3e	; 62
    40d6:	69 83       	std	Y+1, r22	; 0x01
  return write(&byte, 1);
    40d8:	dc 01       	movw	r26, r24
    40da:	ed 91       	ld	r30, X+
    40dc:	fc 91       	ld	r31, X
    40de:	02 80       	ldd	r0, Z+2	; 0x02
    40e0:	f3 81       	ldd	r31, Z+3	; 0x03
    40e2:	e0 2d       	mov	r30, r0
    40e4:	41 e0       	ldi	r20, 0x01	; 1
    40e6:	50 e0       	ldi	r21, 0x00	; 0
    40e8:	be 01       	movw	r22, r28
    40ea:	6f 5f       	subi	r22, 0xFF	; 255
    40ec:	7f 4f       	sbci	r23, 0xFF	; 255
    40ee:	09 95       	icall
}
    40f0:	0f 90       	pop	r0
    40f2:	df 91       	pop	r29
    40f4:	cf 91       	pop	r28
    40f6:	08 95       	ret

000040f8 <_ZN11EthernetUDP5flushEv>:
  ::peek(_sock, &b);
  return b;
}

void EthernetUDP::flush()
{
    40f8:	cf 93       	push	r28
    40fa:	df 93       	push	r29
    40fc:	ec 01       	movw	r28, r24
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5500 always behaves :)

  while (_remaining)
    40fe:	89 8d       	ldd	r24, Y+25	; 0x19
    4100:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4102:	89 2b       	or	r24, r25
    4104:	41 f0       	breq	.+16     	; 0x4116 <__stack+0x17>
  {
    read();
    4106:	e8 81       	ld	r30, Y
    4108:	f9 81       	ldd	r31, Y+1	; 0x01
    410a:	02 84       	ldd	r0, Z+10	; 0x0a
    410c:	f3 85       	ldd	r31, Z+11	; 0x0b
    410e:	e0 2d       	mov	r30, r0
    4110:	ce 01       	movw	r24, r28
    4112:	09 95       	icall
{
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5500 always behaves :)

  while (_remaining)
    4114:	f4 cf       	rjmp	.-24     	; 0x40fe <_ZN11EthernetUDP5flushEv+0x6>
  {
    read();
  }
}
    4116:	df 91       	pop	r29
    4118:	cf 91       	pop	r28
    411a:	08 95       	ret

0000411c <_ZN11EthernetUDP4stopEv>:
  return _remaining;
}

/* Release any resources being used by this EthernetUDP instance */
void EthernetUDP::stop()
{
    411c:	cf 93       	push	r28
    411e:	df 93       	push	r29
    4120:	ec 01       	movw	r28, r24
  if (_sock == MAX_SOCK_NUM)
    4122:	8c 85       	ldd	r24, Y+12	; 0x0c
    4124:	88 30       	cpi	r24, 0x08	; 8
    4126:	59 f0       	breq	.+22     	; 0x413e <_ZN11EthernetUDP4stopEv+0x22>
    return;

  close(_sock);
    4128:	c2 d1       	rcall	.+900    	; 0x44ae <_Z5closeh>

  EthernetClass::_server_port[_sock] = 0;
    412a:	ec 85       	ldd	r30, Y+12	; 0x0c
    412c:	f0 e0       	ldi	r31, 0x00	; 0
    412e:	ee 0f       	add	r30, r30
    4130:	ff 1f       	adc	r31, r31
    4132:	ea 5f       	subi	r30, 0xFA	; 250
    4134:	f5 4f       	sbci	r31, 0xF5	; 245
    4136:	11 82       	std	Z+1, r1	; 0x01
    4138:	10 82       	st	Z, r1
  _sock = MAX_SOCK_NUM;
    413a:	88 e0       	ldi	r24, 0x08	; 8
    413c:	8c 87       	std	Y+12, r24	; 0x0c
}
    413e:	df 91       	pop	r29
    4140:	cf 91       	pop	r28
    4142:	08 95       	ret

00004144 <_ZN11EthernetUDP11beginPacketE9IPAddressj>:
  }
}

int EthernetUDP::beginPacket(IPAddress ip, uint16_t port)
{
  _offset = 0;
    4144:	fc 01       	movw	r30, r24
    4146:	10 8e       	std	Z+24, r1	; 0x18
    4148:	17 8a       	std	Z+23, r1	; 0x17

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    414a:	6e 5f       	subi	r22, 0xFE	; 254
    414c:	7f 4f       	sbci	r23, 0xFF	; 255
  return startUDP(_sock, rawIPAddress(ip), port);
    414e:	84 85       	ldd	r24, Z+12	; 0x0c
    4150:	e6 c2       	rjmp	.+1484   	; 0x471e <_Z8startUDPhPhj>

00004152 <_ZN11EthernetUDP9endPacketEv>:
}

int EthernetUDP::endPacket()
{
  return sendUDP(_sock);
    4152:	fc 01       	movw	r30, r24
    4154:	84 85       	ldd	r24, Z+12	; 0x0c
    4156:	06 c3       	rjmp	.+1548   	; 0x4764 <_Z7sendUDPh>

00004158 <_ZN11EthernetUDP5writeEPKhj>:
{
  return write(&byte, 1);
}

size_t EthernetUDP::write(const uint8_t *buffer, size_t size)
{
    4158:	cf 93       	push	r28
    415a:	df 93       	push	r29
    415c:	ec 01       	movw	r28, r24
    415e:	9a 01       	movw	r18, r20
  uint16_t bytes_written = bufferData(_sock, _offset, buffer, size);
    4160:	8f 89       	ldd	r24, Y+23	; 0x17
    4162:	98 8d       	ldd	r25, Y+24	; 0x18
    4164:	ab 01       	movw	r20, r22
    4166:	bc 01       	movw	r22, r24
    4168:	8c 85       	ldd	r24, Y+12	; 0x0c
    416a:	ae d2       	rcall	.+1372   	; 0x46c8 <_Z10bufferDatahjPKhj>
  _offset += bytes_written;
    416c:	2f 89       	ldd	r18, Y+23	; 0x17
    416e:	38 8d       	ldd	r19, Y+24	; 0x18
    4170:	28 0f       	add	r18, r24
    4172:	39 1f       	adc	r19, r25
    4174:	38 8f       	std	Y+24, r19	; 0x18
    4176:	2f 8b       	std	Y+23, r18	; 0x17
  return bytes_written;
}
    4178:	df 91       	pop	r29
    417a:	cf 91       	pop	r28
    417c:	08 95       	ret

0000417e <_ZN11EthernetUDP4readEv>:
  // There aren't any packets available
  return 0;
}

int EthernetUDP::read()
{
    417e:	0f 93       	push	r16
    4180:	1f 93       	push	r17
    4182:	cf 93       	push	r28
    4184:	df 93       	push	r29
    4186:	1f 92       	push	r1
    4188:	cd b7       	in	r28, 0x3d	; 61
    418a:	de b7       	in	r29, 0x3e	; 62
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
    418c:	fc 01       	movw	r30, r24
    418e:	21 8d       	ldd	r18, Z+25	; 0x19
    4190:	32 8d       	ldd	r19, Z+26	; 0x1a
    4192:	23 2b       	or	r18, r19
    4194:	59 f0       	breq	.+22     	; 0x41ac <_ZN11EthernetUDP4readEv+0x2e>
    4196:	8c 01       	movw	r16, r24
    4198:	41 e0       	ldi	r20, 0x01	; 1
    419a:	50 e0       	ldi	r21, 0x00	; 0
    419c:	be 01       	movw	r22, r28
    419e:	6f 5f       	subi	r22, 0xFF	; 255
    41a0:	7f 4f       	sbci	r23, 0xFF	; 255
    41a2:	84 85       	ldd	r24, Z+12	; 0x0c
    41a4:	42 d2       	rcall	.+1156   	; 0x462a <_Z4recvhPhi>
    41a6:	18 16       	cp	r1, r24
    41a8:	19 06       	cpc	r1, r25
    41aa:	1c f0       	brlt	.+6      	; 0x41b2 <_ZN11EthernetUDP4readEv+0x34>
    _remaining--;
    return byte;
  }

  // If we get here, there's no data available
  return -1;
    41ac:	8f ef       	ldi	r24, 0xFF	; 255
    41ae:	9f ef       	ldi	r25, 0xFF	; 255
    41b0:	08 c0       	rjmp	.+16     	; 0x41c2 <_ZN11EthernetUDP4readEv+0x44>
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
  {
    // We read things without any problems
    _remaining--;
    41b2:	f8 01       	movw	r30, r16
    41b4:	81 8d       	ldd	r24, Z+25	; 0x19
    41b6:	92 8d       	ldd	r25, Z+26	; 0x1a
    41b8:	01 97       	sbiw	r24, 0x01	; 1
    41ba:	92 8f       	std	Z+26, r25	; 0x1a
    41bc:	81 8f       	std	Z+25, r24	; 0x19
    return byte;
    41be:	89 81       	ldd	r24, Y+1	; 0x01
    41c0:	90 e0       	ldi	r25, 0x00	; 0
  }

  // If we get here, there's no data available
  return -1;
}
    41c2:	0f 90       	pop	r0
    41c4:	df 91       	pop	r29
    41c6:	cf 91       	pop	r28
    41c8:	1f 91       	pop	r17
    41ca:	0f 91       	pop	r16
    41cc:	08 95       	ret

000041ce <_ZN11EthernetUDP4readEPhj>:

int EthernetUDP::read(unsigned char* buffer, size_t len)
{
    41ce:	cf 93       	push	r28
    41d0:	df 93       	push	r29

  if (_remaining > 0)
    41d2:	fc 01       	movw	r30, r24
    41d4:	21 8d       	ldd	r18, Z+25	; 0x19
    41d6:	32 8d       	ldd	r19, Z+26	; 0x1a
    41d8:	21 15       	cp	r18, r1
    41da:	31 05       	cpc	r19, r1
    41dc:	19 f4       	brne	.+6      	; 0x41e4 <_ZN11EthernetUDP4readEPhj+0x16>
    }

  }

  // If we get here, there's no data available or recv failed
  return -1;
    41de:	8f ef       	ldi	r24, 0xFF	; 255
    41e0:	9f ef       	ldi	r25, 0xFF	; 255
    41e2:	10 c0       	rjmp	.+32     	; 0x4204 <_ZN11EthernetUDP4readEPhj+0x36>
    41e4:	ec 01       	movw	r28, r24
  if (_remaining > 0)
  {

    int got;

    if (_remaining <= len)
    41e6:	42 17       	cp	r20, r18
    41e8:	53 07       	cpc	r21, r19
    41ea:	08 f0       	brcs	.+2      	; 0x41ee <_ZN11EthernetUDP4readEPhj+0x20>
    {
      // data should fit in the buffer
      got = recv(_sock, buffer, _remaining);
    41ec:	a9 01       	movw	r20, r18
    }
    else
    {
      // too much data for the buffer, 
      // grab as much as will fit
      got = recv(_sock, buffer, len);
    41ee:	8c 85       	ldd	r24, Y+12	; 0x0c
    41f0:	1c d2       	rcall	.+1080   	; 0x462a <_Z4recvhPhi>
    }

    if (got > 0)
    41f2:	18 16       	cp	r1, r24
    41f4:	19 06       	cpc	r1, r25
    41f6:	9c f7       	brge	.-26     	; 0x41de <_ZN11EthernetUDP4readEPhj+0x10>
    {
      _remaining -= got;
    41f8:	29 8d       	ldd	r18, Y+25	; 0x19
    41fa:	3a 8d       	ldd	r19, Y+26	; 0x1a
    41fc:	28 1b       	sub	r18, r24
    41fe:	39 0b       	sbc	r19, r25
    4200:	3a 8f       	std	Y+26, r19	; 0x1a
    4202:	29 8f       	std	Y+25, r18	; 0x19
  }

  // If we get here, there's no data available or recv failed
  return -1;

}
    4204:	df 91       	pop	r29
    4206:	cf 91       	pop	r28
    4208:	08 95       	ret

0000420a <_ZN11EthernetUDP4peekEv>:

int EthernetUDP::peek()
{
    420a:	cf 93       	push	r28
    420c:	df 93       	push	r29
    420e:	1f 92       	push	r1
    4210:	cd b7       	in	r28, 0x3d	; 61
    4212:	de b7       	in	r29, 0x3e	; 62
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
    4214:	fc 01       	movw	r30, r24
    4216:	21 8d       	ldd	r18, Z+25	; 0x19
    4218:	32 8d       	ldd	r19, Z+26	; 0x1a
    421a:	23 2b       	or	r18, r19
    421c:	41 f0       	breq	.+16     	; 0x422e <_ZN11EthernetUDP4peekEv+0x24>
    return -1;
  ::peek(_sock, &b);
    421e:	be 01       	movw	r22, r28
    4220:	6f 5f       	subi	r22, 0xFF	; 255
    4222:	7f 4f       	sbci	r23, 0xFF	; 255
    4224:	84 85       	ldd	r24, Z+12	; 0x0c
    4226:	42 d2       	rcall	.+1156   	; 0x46ac <_Z4peekhPh>
  return b;
    4228:	89 81       	ldd	r24, Y+1	; 0x01
    422a:	90 e0       	ldi	r25, 0x00	; 0
    422c:	02 c0       	rjmp	.+4      	; 0x4232 <_ZN11EthernetUDP4peekEv+0x28>
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
    return -1;
    422e:	8f ef       	ldi	r24, 0xFF	; 255
    4230:	9f ef       	ldi	r25, 0xFF	; 255
  ::peek(_sock, &b);
  return b;
}
    4232:	0f 90       	pop	r0
    4234:	df 91       	pop	r29
    4236:	cf 91       	pop	r28
    4238:	08 95       	ret

0000423a <_ZN11EthernetUDP5beginEj>:

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
    423a:	ef 92       	push	r14
    423c:	ff 92       	push	r15
    423e:	1f 93       	push	r17
    4240:	cf 93       	push	r28
    4242:	df 93       	push	r29
  if (_sock != MAX_SOCK_NUM)
    4244:	fc 01       	movw	r30, r24
    4246:	24 85       	ldd	r18, Z+12	; 0x0c
    4248:	28 30       	cpi	r18, 0x08	; 8
    424a:	11 f0       	breq	.+4      	; 0x4250 <_ZN11EthernetUDP5beginEj+0x16>
    return 0;
    424c:	80 e0       	ldi	r24, 0x00	; 0
    424e:	20 c0       	rjmp	.+64     	; 0x4290 <_ZN11EthernetUDP5beginEj+0x56>
    4250:	7b 01       	movw	r14, r22
    4252:	ec 01       	movw	r28, r24
    4254:	10 e0       	ldi	r17, 0x00	; 0
    4256:	61 2f       	mov	r22, r17
    4258:	62 95       	swap	r22
    425a:	66 0f       	add	r22, r22
    425c:	60 7e       	andi	r22, 0xE0	; 224
    425e:	68 5f       	subi	r22, 0xF8	; 248
    4260:	83 e0       	ldi	r24, 0x03	; 3
    4262:	90 e0       	ldi	r25, 0x00	; 0
    4264:	1b d3       	rcall	.+1590   	; 0x489c <_ZN10W5500Class4readEjh>

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
    4266:	81 11       	cpse	r24, r1
    4268:	02 c0       	rjmp	.+4      	; 0x426e <_ZN11EthernetUDP5beginEj+0x34>
      _sock = i;
    426a:	1c 87       	std	Y+12, r17	; 0x0c
    426c:	05 c0       	rjmp	.+10     	; 0x4278 <_ZN11EthernetUDP5beginEj+0x3e>
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
    426e:	88 31       	cpi	r24, 0x18	; 24
    4270:	e1 f3       	breq	.-8      	; 0x426a <_ZN11EthernetUDP5beginEj+0x30>
    4272:	1f 5f       	subi	r17, 0xFF	; 255
/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    4274:	18 30       	cpi	r17, 0x08	; 8
    4276:	79 f7       	brne	.-34     	; 0x4256 <_ZN11EthernetUDP5beginEj+0x1c>
      _sock = i;
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
    4278:	8c 85       	ldd	r24, Y+12	; 0x0c
    427a:	88 30       	cpi	r24, 0x08	; 8
    427c:	39 f3       	breq	.-50     	; 0x424c <_ZN11EthernetUDP5beginEj+0x12>
    return 0;

  _port = port;
    427e:	fe 86       	std	Y+14, r15	; 0x0e
    4280:	ed 86       	std	Y+13, r14	; 0x0d
  _remaining = 0;
    4282:	1a 8e       	std	Y+26, r1	; 0x1a
    4284:	19 8e       	std	Y+25, r1	; 0x19
  socket(_sock, SnMR::UDP, _port, 0);
    4286:	20 e0       	ldi	r18, 0x00	; 0
    4288:	a7 01       	movw	r20, r14
    428a:	62 e0       	ldi	r22, 0x02	; 2
    428c:	1b d1       	rcall	.+566    	; 0x44c4 <_Z6sockethhjh>

  return 1;
    428e:	81 e0       	ldi	r24, 0x01	; 1
}
    4290:	df 91       	pop	r29
    4292:	cf 91       	pop	r28
    4294:	1f 91       	pop	r17
    4296:	ff 90       	pop	r15
    4298:	ef 90       	pop	r14
    429a:	08 95       	ret

0000429c <_ZN11EthernetUDP11parsePacketEv>:
  _offset += bytes_written;
  return bytes_written;
}

int EthernetUDP::parsePacket()
{
    429c:	0f 93       	push	r16
    429e:	1f 93       	push	r17
    42a0:	cf 93       	push	r28
    42a2:	df 93       	push	r29
    42a4:	cd b7       	in	r28, 0x3d	; 61
    42a6:	de b7       	in	r29, 0x3e	; 62
    42a8:	28 97       	sbiw	r28, 0x08	; 8
    42aa:	0f b6       	in	r0, 0x3f	; 63
    42ac:	f8 94       	cli
    42ae:	de bf       	out	0x3e, r29	; 62
    42b0:	0f be       	out	0x3f, r0	; 63
    42b2:	cd bf       	out	0x3d, r28	; 61
    42b4:	8c 01       	movw	r16, r24
  // discard any remaining bytes in the last packet
  flush();
    42b6:	dc 01       	movw	r26, r24
    42b8:	ed 91       	ld	r30, X+
    42ba:	fc 91       	ld	r31, X
    42bc:	06 80       	ldd	r0, Z+6	; 0x06
    42be:	f7 81       	ldd	r31, Z+7	; 0x07
    42c0:	e0 2d       	mov	r30, r0
    42c2:	09 95       	icall

  if (w5500.getRXReceivedSize(_sock) > 0)
    42c4:	f8 01       	movw	r30, r16
    42c6:	64 85       	ldd	r22, Z+12	; 0x0c
    42c8:	83 e3       	ldi	r24, 0x33	; 51
    42ca:	9a e0       	ldi	r25, 0x0A	; 10
    42cc:	77 d3       	rcall	.+1774   	; 0x49bc <_ZN10W5500Class17getRXReceivedSizeEh>
    42ce:	89 2b       	or	r24, r25
    42d0:	39 f1       	breq	.+78     	; 0x4320 <_ZN11EthernetUDP11parsePacketEv+0x84>
  {
    //HACK - hand-parse the UDP packet using TCP recv method
    uint8_t tmpBuf[8];
    int ret =0; 
    //read 8 header bytes and get IP and port from it
    ret = recv(_sock,tmpBuf,8);
    42d2:	48 e0       	ldi	r20, 0x08	; 8
    42d4:	50 e0       	ldi	r21, 0x00	; 0
    42d6:	be 01       	movw	r22, r28
    42d8:	6f 5f       	subi	r22, 0xFF	; 255
    42da:	7f 4f       	sbci	r23, 0xFF	; 255
    42dc:	d8 01       	movw	r26, r16
    42de:	1c 96       	adiw	r26, 0x0c	; 12
    42e0:	8c 91       	ld	r24, X
    42e2:	a3 d1       	rcall	.+838    	; 0x462a <_Z4recvhPhi>
    if (ret > 0)
    42e4:	18 16       	cp	r1, r24
    42e6:	19 06       	cpc	r1, r25
    42e8:	ec f4       	brge	.+58     	; 0x4324 <_ZN11EthernetUDP11parsePacketEv+0x88>
    {
      _remoteIP = tmpBuf;
    42ea:	be 01       	movw	r22, r28
    42ec:	6f 5f       	subi	r22, 0xFF	; 255
    42ee:	7f 4f       	sbci	r23, 0xFF	; 255
    42f0:	c8 01       	movw	r24, r16
    42f2:	0f 96       	adiw	r24, 0x0f	; 15
    42f4:	0e 94 70 2e 	call	0x5ce0	; 0x5ce0 <_ZN9IPAddressaSEPKh>
      _remotePort = tmpBuf[4];
      _remotePort = (_remotePort << 8) + tmpBuf[5];
    42f8:	8d 81       	ldd	r24, Y+5	; 0x05
    42fa:	90 e0       	ldi	r25, 0x00	; 0
    42fc:	98 2f       	mov	r25, r24
    42fe:	88 27       	eor	r24, r24
    4300:	2e 81       	ldd	r18, Y+6	; 0x06
    4302:	82 0f       	add	r24, r18
    4304:	91 1d       	adc	r25, r1
    4306:	f8 01       	movw	r30, r16
    4308:	96 8b       	std	Z+22, r25	; 0x16
    430a:	85 8b       	std	Z+21, r24	; 0x15
      _remaining = tmpBuf[6];
      _remaining = (_remaining << 8) + tmpBuf[7];
    430c:	8f 81       	ldd	r24, Y+7	; 0x07
    430e:	90 e0       	ldi	r25, 0x00	; 0
    4310:	98 2f       	mov	r25, r24
    4312:	88 27       	eor	r24, r24
    4314:	28 85       	ldd	r18, Y+8	; 0x08
    4316:	82 0f       	add	r24, r18
    4318:	91 1d       	adc	r25, r1
    431a:	92 8f       	std	Z+26, r25	; 0x1a
    431c:	81 8f       	std	Z+25, r24	; 0x19
    431e:	02 c0       	rjmp	.+4      	; 0x4324 <_ZN11EthernetUDP11parsePacketEv+0x88>
      ret = _remaining;
    }
    return ret;
  }
  // There aren't any packets available
  return 0;
    4320:	80 e0       	ldi	r24, 0x00	; 0
    4322:	90 e0       	ldi	r25, 0x00	; 0
}
    4324:	28 96       	adiw	r28, 0x08	; 8
    4326:	0f b6       	in	r0, 0x3f	; 63
    4328:	f8 94       	cli
    432a:	de bf       	out	0x3e, r29	; 62
    432c:	0f be       	out	0x3f, r0	; 63
    432e:	cd bf       	out	0x3d, r28	; 61
    4330:	df 91       	pop	r29
    4332:	cf 91       	pop	r28
    4334:	1f 91       	pop	r17
    4336:	0f 91       	pop	r16
    4338:	08 95       	ret

0000433a <_ZN11EthernetUDPC1Ev>:
#include "Ethernet2.h"
#include "Udp.h"
#include "Dns.h"

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}
    433a:	fc 01       	movw	r30, r24
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    433c:	13 82       	std	Z+3, r1	; 0x03
    433e:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    4340:	88 ee       	ldi	r24, 0xE8	; 232
    4342:	93 e0       	ldi	r25, 0x03	; 3
    4344:	a0 e0       	ldi	r26, 0x00	; 0
    4346:	b0 e0       	ldi	r27, 0x00	; 0
    4348:	84 83       	std	Z+4, r24	; 0x04
    434a:	95 83       	std	Z+5, r25	; 0x05
    434c:	a6 83       	std	Z+6, r26	; 0x06
    434e:	b7 83       	std	Z+7, r27	; 0x07
    4350:	8c e1       	ldi	r24, 0x1C	; 28
    4352:	98 e0       	ldi	r25, 0x08	; 8
    4354:	91 83       	std	Z+1, r25	; 0x01
    4356:	80 83       	st	Z, r24
    4358:	88 e0       	ldi	r24, 0x08	; 8
    435a:	84 87       	std	Z+12, r24	; 0x0c
    435c:	cf 01       	movw	r24, r30
    435e:	0f 96       	adiw	r24, 0x0f	; 15
    4360:	0c 94 5a 2e 	jmp	0x5cb4	; 0x5cb4 <_ZN9IPAddressC1Ev>

00004364 <_ZN11EthernetUDP11beginPacketEPKcj>:
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

int EthernetUDP::beginPacket(const char *host, uint16_t port)
{
    4364:	cf 92       	push	r12
    4366:	df 92       	push	r13
    4368:	ef 92       	push	r14
    436a:	ff 92       	push	r15
    436c:	0f 93       	push	r16
    436e:	1f 93       	push	r17
    4370:	cf 93       	push	r28
    4372:	df 93       	push	r29
    4374:	cd b7       	in	r28, 0x3d	; 61
    4376:	de b7       	in	r29, 0x3e	; 62
    4378:	af 97       	sbiw	r28, 0x2f	; 47
    437a:	0f b6       	in	r0, 0x3f	; 63
    437c:	f8 94       	cli
    437e:	de bf       	out	0x3e, r29	; 62
    4380:	0f be       	out	0x3f, r0	; 63
    4382:	cd bf       	out	0x3d, r28	; 61
    4384:	8c 01       	movw	r16, r24
    4386:	6b 01       	movw	r12, r22
    4388:	7a 01       	movw	r14, r20
#ifndef DNSClient_h
#define DNSClient_h

#include <EthernetUdp2.h>

class DNSClient
    438a:	ce 01       	movw	r24, r28
    438c:	01 96       	adiw	r24, 0x01	; 1
    438e:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <_ZN9IPAddressC1Ev>
    4392:	ce 01       	movw	r24, r28
    4394:	09 96       	adiw	r24, 0x09	; 9
    4396:	d1 df       	rcall	.-94     	; 0x433a <_ZN11EthernetUDPC1Ev>
  // Look up the host first
  int ret = 0;
  DNSClient dns;
  IPAddress remote_addr;
    4398:	ce 01       	movw	r24, r28
    439a:	8a 96       	adiw	r24, 0x2a	; 42
    439c:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <_ZN9IPAddressC1Ev>

  dns.begin(Ethernet.dnsServerIP());
    43a0:	69 ef       	ldi	r22, 0xF9	; 249
    43a2:	79 e0       	ldi	r23, 0x09	; 9
    43a4:	ce 01       	movw	r24, r28
    43a6:	84 96       	adiw	r24, 0x24	; 36
    43a8:	63 dc       	rcall	.-1850   	; 0x3c70 <_ZN13EthernetClass11dnsServerIPEv>
    43aa:	be 01       	movw	r22, r28
    43ac:	6c 5d       	subi	r22, 0xDC	; 220
    43ae:	7f 4f       	sbci	r23, 0xFF	; 255
    43b0:	ce 01       	movw	r24, r28
    43b2:	01 96       	adiw	r24, 0x01	; 1
    43b4:	28 d9       	rcall	.-3504   	; 0x3606 <_ZN9DNSClient5beginERK9IPAddress>
  ret = dns.getHostByName(host, remote_addr);
    43b6:	ae 01       	movw	r20, r28
    43b8:	46 5d       	subi	r20, 0xD6	; 214
    43ba:	5f 4f       	sbci	r21, 0xFF	; 255
    43bc:	b6 01       	movw	r22, r12
    43be:	ce 01       	movw	r24, r28
    43c0:	01 96       	adiw	r24, 0x01	; 1
    43c2:	7b db       	rcall	.-2314   	; 0x3aba <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>
  if (ret == 1) {
    43c4:	81 30       	cpi	r24, 0x01	; 1
    43c6:	91 05       	cpc	r25, r1
    43c8:	c1 f4       	brne	.+48     	; 0x43fa <_ZN11EthernetUDP11beginPacketEPKcj+0x96>
    return beginPacket(remote_addr, port);
    43ca:	d8 01       	movw	r26, r16
    43cc:	ed 91       	ld	r30, X+
    43ce:	fc 91       	ld	r31, X
    43d0:	04 88       	ldd	r0, Z+20	; 0x14
    43d2:	f5 89       	ldd	r31, Z+21	; 0x15
    43d4:	e0 2d       	mov	r30, r0
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    43d6:	8e e7       	ldi	r24, 0x7E	; 126
    43d8:	98 e0       	ldi	r25, 0x08	; 8
    43da:	9d a3       	std	Y+37, r25	; 0x25
    43dc:	8c a3       	std	Y+36, r24	; 0x24
    43de:	8c a5       	ldd	r24, Y+44	; 0x2c
    43e0:	9d a5       	ldd	r25, Y+45	; 0x2d
    43e2:	ae a5       	ldd	r26, Y+46	; 0x2e
    43e4:	bf a5       	ldd	r27, Y+47	; 0x2f
    43e6:	8e a3       	std	Y+38, r24	; 0x26
    43e8:	9f a3       	std	Y+39, r25	; 0x27
    43ea:	a8 a7       	std	Y+40, r26	; 0x28
    43ec:	b9 a7       	std	Y+41, r27	; 0x29
    43ee:	a7 01       	movw	r20, r14
    43f0:	be 01       	movw	r22, r28
    43f2:	6c 5d       	subi	r22, 0xDC	; 220
    43f4:	7f 4f       	sbci	r23, 0xFF	; 255
    43f6:	c8 01       	movw	r24, r16
    43f8:	09 95       	icall
  } else {
    return ret;
  }
}
    43fa:	af 96       	adiw	r28, 0x2f	; 47
    43fc:	0f b6       	in	r0, 0x3f	; 63
    43fe:	f8 94       	cli
    4400:	de bf       	out	0x3e, r29	; 62
    4402:	0f be       	out	0x3f, r0	; 63
    4404:	cd bf       	out	0x3d, r28	; 61
    4406:	df 91       	pop	r29
    4408:	cf 91       	pop	r28
    440a:	1f 91       	pop	r17
    440c:	0f 91       	pop	r16
    440e:	ff 90       	pop	r15
    4410:	ef 90       	pop	r14
    4412:	df 90       	pop	r13
    4414:	cf 90       	pop	r12
    4416:	08 95       	ret

00004418 <_GLOBAL__sub_I__ZN11EthernetUDPC2Ev>:

  while (_remaining)
  {
    read();
  }
}
    4418:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    441a:	00 e0       	ldi	r16, 0x00	; 0
    441c:	20 e0       	ldi	r18, 0x00	; 0
    441e:	40 e0       	ldi	r20, 0x00	; 0
    4420:	60 e0       	ldi	r22, 0x00	; 0
    4422:	88 e2       	ldi	r24, 0x28	; 40
    4424:	9a e0       	ldi	r25, 0x0A	; 10
    4426:	0e 94 64 2e 	call	0x5cc8	; 0x5cc8 <_ZN9IPAddressC1Ehhhh>
    442a:	0f 91       	pop	r16
    442c:	08 95       	ret

0000442e <_ZN10W5500Class11writeSnDIPREhPh>:
    }
  }

  w5500.writeSnIR(s, SnIR::SEND_OK);
  return ret;
}
    442e:	ab 01       	movw	r20, r22
    4430:	82 95       	swap	r24
    4432:	88 0f       	add	r24, r24
    4434:	80 7e       	andi	r24, 0xE0	; 224
    4436:	6c e0       	ldi	r22, 0x0C	; 12
    4438:	68 0f       	add	r22, r24
    443a:	24 e0       	ldi	r18, 0x04	; 4
    443c:	30 e0       	ldi	r19, 0x00	; 0
    443e:	8c e0       	ldi	r24, 0x0C	; 12
    4440:	90 e0       	ldi	r25, 0x00	; 0
    4442:	00 c2       	rjmp	.+1024   	; 0x4844 <_ZN10W5500Class5writeEjhPKhj>

00004444 <_ZN10W5500Class6readSnEhj>:
    4444:	9b 01       	movw	r18, r22
    4446:	82 95       	swap	r24
    4448:	88 0f       	add	r24, r24
    444a:	80 7e       	andi	r24, 0xE0	; 224
    444c:	68 e0       	ldi	r22, 0x08	; 8
    444e:	68 0f       	add	r22, r24
    4450:	c9 01       	movw	r24, r18
    4452:	24 c2       	rjmp	.+1096   	; 0x489c <_ZN10W5500Class4readEjh>

00004454 <_ZN10W5500Class8readSnIREh>:
    4454:	62 e0       	ldi	r22, 0x02	; 2
    4456:	70 e0       	ldi	r23, 0x00	; 0
    4458:	f5 cf       	rjmp	.-22     	; 0x4444 <_ZN10W5500Class6readSnEhj>

0000445a <_ZN10W5500Class7writeSnEhjh>:
    445a:	9b 01       	movw	r18, r22
    445c:	82 95       	swap	r24
    445e:	88 0f       	add	r24, r24
    4460:	80 7e       	andi	r24, 0xE0	; 224
    4462:	6c e0       	ldi	r22, 0x0C	; 12
    4464:	68 0f       	add	r22, r24
    4466:	c9 01       	movw	r24, r18
    4468:	cf c1       	rjmp	.+926    	; 0x4808 <_ZN10W5500Class5writeEjhh>

0000446a <_ZN10W5500Class11writeSnPORTEhj>:
    446a:	cf 93       	push	r28
    446c:	df 93       	push	r29
    446e:	c8 2f       	mov	r28, r24
    4470:	d6 2f       	mov	r29, r22
    4472:	47 2f       	mov	r20, r23
    4474:	64 e0       	ldi	r22, 0x04	; 4
    4476:	70 e0       	ldi	r23, 0x00	; 0
    4478:	f0 df       	rcall	.-32     	; 0x445a <_ZN10W5500Class7writeSnEhjh>
    447a:	4d 2f       	mov	r20, r29
    447c:	65 e0       	ldi	r22, 0x05	; 5
    447e:	70 e0       	ldi	r23, 0x00	; 0
    4480:	8c 2f       	mov	r24, r28
    4482:	df 91       	pop	r29
    4484:	cf 91       	pop	r28
    4486:	e9 cf       	rjmp	.-46     	; 0x445a <_ZN10W5500Class7writeSnEhjh>

00004488 <_ZN10W5500Class9writeSnIREhh>:
    4488:	46 2f       	mov	r20, r22
    448a:	62 e0       	ldi	r22, 0x02	; 2
    448c:	70 e0       	ldi	r23, 0x00	; 0
    448e:	e5 cf       	rjmp	.-54     	; 0x445a <_ZN10W5500Class7writeSnEhjh>

00004490 <_ZN10W5500Class12writeSnDPORTEhj>:
    4490:	cf 93       	push	r28
    4492:	df 93       	push	r29
    4494:	c8 2f       	mov	r28, r24
    4496:	d6 2f       	mov	r29, r22
    4498:	47 2f       	mov	r20, r23
    449a:	60 e1       	ldi	r22, 0x10	; 16
    449c:	70 e0       	ldi	r23, 0x00	; 0
    449e:	dd df       	rcall	.-70     	; 0x445a <_ZN10W5500Class7writeSnEhjh>
    44a0:	4d 2f       	mov	r20, r29
    44a2:	61 e1       	ldi	r22, 0x11	; 17
    44a4:	70 e0       	ldi	r23, 0x00	; 0
    44a6:	8c 2f       	mov	r24, r28
    44a8:	df 91       	pop	r29
    44aa:	cf 91       	pop	r28
    44ac:	d6 cf       	rjmp	.-84     	; 0x445a <_ZN10W5500Class7writeSnEhjh>

000044ae <_Z5closeh>:
    44ae:	cf 93       	push	r28
    44b0:	c8 2f       	mov	r28, r24
    44b2:	40 e1       	ldi	r20, 0x10	; 16
    44b4:	68 2f       	mov	r22, r24
    44b6:	83 e3       	ldi	r24, 0x33	; 51
    44b8:	9a e0       	ldi	r25, 0x0A	; 10
    44ba:	70 d3       	rcall	.+1760   	; 0x4b9c <_ZN10W5500Class9execCmdSnEh7SockCMD>
    44bc:	6f ef       	ldi	r22, 0xFF	; 255
    44be:	8c 2f       	mov	r24, r28
    44c0:	cf 91       	pop	r28
    44c2:	e2 cf       	rjmp	.-60     	; 0x4488 <_ZN10W5500Class9writeSnIREhh>

000044c4 <_Z6sockethhjh>:
    44c4:	ff 92       	push	r15
    44c6:	0f 93       	push	r16
    44c8:	1f 93       	push	r17
    44ca:	cf 93       	push	r28
    44cc:	df 93       	push	r29
    44ce:	9f ef       	ldi	r25, 0xFF	; 255
    44d0:	96 0f       	add	r25, r22
    44d2:	95 30       	cpi	r25, 0x05	; 5
    44d4:	18 f5       	brcc	.+70     	; 0x451c <_Z6sockethhjh+0x58>
    44d6:	d2 2f       	mov	r29, r18
    44d8:	8a 01       	movw	r16, r20
    44da:	f6 2e       	mov	r15, r22
    44dc:	c8 2f       	mov	r28, r24
    44de:	e7 df       	rcall	.-50     	; 0x44ae <_Z5closeh>
    44e0:	4f 2d       	mov	r20, r15
    44e2:	4d 2b       	or	r20, r29
    44e4:	60 e0       	ldi	r22, 0x00	; 0
    44e6:	70 e0       	ldi	r23, 0x00	; 0
    44e8:	8c 2f       	mov	r24, r28
    44ea:	b7 df       	rcall	.-146    	; 0x445a <_ZN10W5500Class7writeSnEhjh>
    44ec:	01 15       	cp	r16, r1
    44ee:	11 05       	cpc	r17, r1
    44f0:	11 f0       	breq	.+4      	; 0x44f6 <_Z6sockethhjh+0x32>
    44f2:	b8 01       	movw	r22, r16
    44f4:	0a c0       	rjmp	.+20     	; 0x450a <_Z6sockethhjh+0x46>
    44f6:	60 91 2e 0a 	lds	r22, 0x0A2E	; 0x800a2e <_ZL10local_port>
    44fa:	70 91 2f 0a 	lds	r23, 0x0A2F	; 0x800a2f <_ZL10local_port+0x1>
    44fe:	6f 5f       	subi	r22, 0xFF	; 255
    4500:	7f 4f       	sbci	r23, 0xFF	; 255
    4502:	70 93 2f 0a 	sts	0x0A2F, r23	; 0x800a2f <_ZL10local_port+0x1>
    4506:	60 93 2e 0a 	sts	0x0A2E, r22	; 0x800a2e <_ZL10local_port>
    450a:	8c 2f       	mov	r24, r28
    450c:	ae df       	rcall	.-164    	; 0x446a <_ZN10W5500Class11writeSnPORTEhj>
    450e:	41 e0       	ldi	r20, 0x01	; 1
    4510:	6c 2f       	mov	r22, r28
    4512:	83 e3       	ldi	r24, 0x33	; 51
    4514:	9a e0       	ldi	r25, 0x0A	; 10
    4516:	42 d3       	rcall	.+1668   	; 0x4b9c <_ZN10W5500Class9execCmdSnEh7SockCMD>
    4518:	81 e0       	ldi	r24, 0x01	; 1
    451a:	01 c0       	rjmp	.+2      	; 0x451e <_Z6sockethhjh+0x5a>
    451c:	80 e0       	ldi	r24, 0x00	; 0
    451e:	df 91       	pop	r29
    4520:	cf 91       	pop	r28
    4522:	1f 91       	pop	r17
    4524:	0f 91       	pop	r16
    4526:	ff 90       	pop	r15
    4528:	08 95       	ret

0000452a <_Z7connecthPhj>:
    452a:	0f 93       	push	r16
    452c:	1f 93       	push	r17
    452e:	cf 93       	push	r28
    4530:	fb 01       	movw	r30, r22
    4532:	90 81       	ld	r25, Z
    4534:	9f 3f       	cpi	r25, 0xFF	; 255
    4536:	51 f4       	brne	.+20     	; 0x454c <_Z7connecthPhj+0x22>
    4538:	91 81       	ldd	r25, Z+1	; 0x01
    453a:	9f 3f       	cpi	r25, 0xFF	; 255
    453c:	91 f4       	brne	.+36     	; 0x4562 <_Z7connecthPhj+0x38>
    453e:	92 81       	ldd	r25, Z+2	; 0x02
    4540:	9f 3f       	cpi	r25, 0xFF	; 255
    4542:	79 f4       	brne	.+30     	; 0x4562 <_Z7connecthPhj+0x38>
    4544:	93 81       	ldd	r25, Z+3	; 0x03
    4546:	9f 3f       	cpi	r25, 0xFF	; 255
    4548:	61 f4       	brne	.+24     	; 0x4562 <_Z7connecthPhj+0x38>
    454a:	1c c0       	rjmp	.+56     	; 0x4584 <_Z7connecthPhj+0x5a>
    454c:	91 11       	cpse	r25, r1
    454e:	09 c0       	rjmp	.+18     	; 0x4562 <_Z7connecthPhj+0x38>
    4550:	91 81       	ldd	r25, Z+1	; 0x01
    4552:	91 11       	cpse	r25, r1
    4554:	06 c0       	rjmp	.+12     	; 0x4562 <_Z7connecthPhj+0x38>
    4556:	92 81       	ldd	r25, Z+2	; 0x02
    4558:	91 11       	cpse	r25, r1
    455a:	03 c0       	rjmp	.+6      	; 0x4562 <_Z7connecthPhj+0x38>
    455c:	93 81       	ldd	r25, Z+3	; 0x03
    455e:	99 23       	and	r25, r25
    4560:	91 f0       	breq	.+36     	; 0x4586 <_Z7connecthPhj+0x5c>
    4562:	41 15       	cp	r20, r1
    4564:	51 05       	cpc	r21, r1
    4566:	71 f0       	breq	.+28     	; 0x4584 <_Z7connecthPhj+0x5a>
    4568:	8a 01       	movw	r16, r20
    456a:	bf 01       	movw	r22, r30
    456c:	c8 2f       	mov	r28, r24
    456e:	5f df       	rcall	.-322    	; 0x442e <_ZN10W5500Class11writeSnDIPREhPh>
    4570:	b8 01       	movw	r22, r16
    4572:	8c 2f       	mov	r24, r28
    4574:	8d df       	rcall	.-230    	; 0x4490 <_ZN10W5500Class12writeSnDPORTEhj>
    4576:	44 e0       	ldi	r20, 0x04	; 4
    4578:	6c 2f       	mov	r22, r28
    457a:	83 e3       	ldi	r24, 0x33	; 51
    457c:	9a e0       	ldi	r25, 0x0A	; 10
    457e:	0e d3       	rcall	.+1564   	; 0x4b9c <_ZN10W5500Class9execCmdSnEh7SockCMD>
    4580:	91 e0       	ldi	r25, 0x01	; 1
    4582:	01 c0       	rjmp	.+2      	; 0x4586 <_Z7connecthPhj+0x5c>
    4584:	90 e0       	ldi	r25, 0x00	; 0
    4586:	89 2f       	mov	r24, r25
    4588:	cf 91       	pop	r28
    458a:	1f 91       	pop	r17
    458c:	0f 91       	pop	r16
    458e:	08 95       	ret

00004590 <_Z10disconnecth>:
    4590:	48 e0       	ldi	r20, 0x08	; 8
    4592:	68 2f       	mov	r22, r24
    4594:	83 e3       	ldi	r24, 0x33	; 51
    4596:	9a e0       	ldi	r25, 0x0A	; 10
    4598:	01 c3       	rjmp	.+1538   	; 0x4b9c <_ZN10W5500Class9execCmdSnEh7SockCMD>

0000459a <_Z4sendhPKhj>:
    459a:	cf 92       	push	r12
    459c:	df 92       	push	r13
    459e:	ef 92       	push	r14
    45a0:	ff 92       	push	r15
    45a2:	0f 93       	push	r16
    45a4:	1f 93       	push	r17
    45a6:	cf 93       	push	r28
    45a8:	c8 2f       	mov	r28, r24
    45aa:	7b 01       	movw	r14, r22
    45ac:	8a 01       	movw	r16, r20
    45ae:	41 30       	cpi	r20, 0x01	; 1
    45b0:	58 40       	sbci	r21, 0x08	; 8
    45b2:	10 f0       	brcs	.+4      	; 0x45b8 <_Z4sendhPKhj+0x1e>
    45b4:	00 e0       	ldi	r16, 0x00	; 0
    45b6:	18 e0       	ldi	r17, 0x08	; 8
    45b8:	6c 2f       	mov	r22, r28
    45ba:	83 e3       	ldi	r24, 0x33	; 51
    45bc:	9a e0       	ldi	r25, 0x0A	; 10
    45be:	cd d1       	rcall	.+922    	; 0x495a <_ZN10W5500Class13getTXFreeSizeEh>
    45c0:	6c 01       	movw	r12, r24
    45c2:	63 e0       	ldi	r22, 0x03	; 3
    45c4:	70 e0       	ldi	r23, 0x00	; 0
    45c6:	8c 2f       	mov	r24, r28
    45c8:	3d df       	rcall	.-390    	; 0x4444 <_ZN10W5500Class6readSnEhj>
    45ca:	87 31       	cpi	r24, 0x17	; 23
    45cc:	11 f0       	breq	.+4      	; 0x45d2 <_Z4sendhPKhj+0x38>
    45ce:	8c 31       	cpi	r24, 0x1C	; 28
    45d0:	21 f4       	brne	.+8      	; 0x45da <_Z4sendhPKhj+0x40>
    45d2:	c0 16       	cp	r12, r16
    45d4:	d1 06       	cpc	r13, r17
    45d6:	80 f3       	brcs	.-32     	; 0x45b8 <_Z4sendhPKhj+0x1e>
    45d8:	02 c0       	rjmp	.+4      	; 0x45de <_Z4sendhPKhj+0x44>
    45da:	00 e0       	ldi	r16, 0x00	; 0
    45dc:	10 e0       	ldi	r17, 0x00	; 0
    45de:	98 01       	movw	r18, r16
    45e0:	a7 01       	movw	r20, r14
    45e2:	6c 2f       	mov	r22, r28
    45e4:	83 e3       	ldi	r24, 0x33	; 51
    45e6:	9a e0       	ldi	r25, 0x0A	; 10
    45e8:	3d d2       	rcall	.+1146   	; 0x4a64 <_ZN10W5500Class20send_data_processingEhPKhj>
    45ea:	40 e2       	ldi	r20, 0x20	; 32
    45ec:	6c 2f       	mov	r22, r28
    45ee:	83 e3       	ldi	r24, 0x33	; 51
    45f0:	9a e0       	ldi	r25, 0x0A	; 10
    45f2:	d4 d2       	rcall	.+1448   	; 0x4b9c <_ZN10W5500Class9execCmdSnEh7SockCMD>
    45f4:	8c 2f       	mov	r24, r28
    45f6:	2e df       	rcall	.-420    	; 0x4454 <_ZN10W5500Class8readSnIREh>
    45f8:	84 fd       	sbrc	r24, 4
    45fa:	0b c0       	rjmp	.+22     	; 0x4612 <_Z4sendhPKhj+0x78>
    45fc:	63 e0       	ldi	r22, 0x03	; 3
    45fe:	70 e0       	ldi	r23, 0x00	; 0
    4600:	8c 2f       	mov	r24, r28
    4602:	20 df       	rcall	.-448    	; 0x4444 <_ZN10W5500Class6readSnEhj>
    4604:	81 11       	cpse	r24, r1
    4606:	f6 cf       	rjmp	.-20     	; 0x45f4 <_Z4sendhPKhj+0x5a>
    4608:	8c 2f       	mov	r24, r28
    460a:	51 df       	rcall	.-350    	; 0x44ae <_Z5closeh>
    460c:	80 e0       	ldi	r24, 0x00	; 0
    460e:	90 e0       	ldi	r25, 0x00	; 0
    4610:	04 c0       	rjmp	.+8      	; 0x461a <_Z4sendhPKhj+0x80>
    4612:	60 e1       	ldi	r22, 0x10	; 16
    4614:	8c 2f       	mov	r24, r28
    4616:	38 df       	rcall	.-400    	; 0x4488 <_ZN10W5500Class9writeSnIREhh>
    4618:	c8 01       	movw	r24, r16
    461a:	cf 91       	pop	r28
    461c:	1f 91       	pop	r17
    461e:	0f 91       	pop	r16
    4620:	ff 90       	pop	r15
    4622:	ef 90       	pop	r14
    4624:	df 90       	pop	r13
    4626:	cf 90       	pop	r12
    4628:	08 95       	ret

0000462a <_Z4recvhPhi>:
    462a:	cf 92       	push	r12
    462c:	df 92       	push	r13
    462e:	ef 92       	push	r14
    4630:	ff 92       	push	r15
    4632:	0f 93       	push	r16
    4634:	1f 93       	push	r17
    4636:	cf 93       	push	r28
    4638:	df 93       	push	r29
    463a:	18 2f       	mov	r17, r24
    463c:	6b 01       	movw	r12, r22
    463e:	7a 01       	movw	r14, r20
    4640:	68 2f       	mov	r22, r24
    4642:	83 e3       	ldi	r24, 0x33	; 51
    4644:	9a e0       	ldi	r25, 0x0A	; 10
    4646:	ba d1       	rcall	.+884    	; 0x49bc <_ZN10W5500Class17getRXReceivedSizeEh>
    4648:	ec 01       	movw	r28, r24
    464a:	00 97       	sbiw	r24, 0x00	; 0
    464c:	91 f4       	brne	.+36     	; 0x4672 <_Z4recvhPhi+0x48>
    464e:	63 e0       	ldi	r22, 0x03	; 3
    4650:	70 e0       	ldi	r23, 0x00	; 0
    4652:	81 2f       	mov	r24, r17
    4654:	f7 de       	rcall	.-530    	; 0x4444 <_ZN10W5500Class6readSnEhj>
    4656:	84 31       	cpi	r24, 0x14	; 20
    4658:	f9 f0       	breq	.+62     	; 0x4698 <_Z4recvhPhi+0x6e>
    465a:	88 23       	and	r24, r24
    465c:	e9 f0       	breq	.+58     	; 0x4698 <_Z4recvhPhi+0x6e>
    465e:	c1 e0       	ldi	r28, 0x01	; 1
    4660:	d0 e0       	ldi	r29, 0x00	; 0
    4662:	8c 31       	cpi	r24, 0x1C	; 28
    4664:	11 f4       	brne	.+4      	; 0x466a <_Z4recvhPhi+0x40>
    4666:	c0 e0       	ldi	r28, 0x00	; 0
    4668:	d0 e0       	ldi	r29, 0x00	; 0
    466a:	d1 95       	neg	r29
    466c:	c1 95       	neg	r28
    466e:	d1 09       	sbc	r29, r1
    4670:	13 c0       	rjmp	.+38     	; 0x4698 <_Z4recvhPhi+0x6e>
    4672:	e8 16       	cp	r14, r24
    4674:	f9 06       	cpc	r15, r25
    4676:	0c f4       	brge	.+2      	; 0x467a <_Z4recvhPhi+0x50>
    4678:	e7 01       	movw	r28, r14
    467a:	1c 16       	cp	r1, r28
    467c:	1d 06       	cpc	r1, r29
    467e:	64 f4       	brge	.+24     	; 0x4698 <_Z4recvhPhi+0x6e>
    4680:	00 e0       	ldi	r16, 0x00	; 0
    4682:	9e 01       	movw	r18, r28
    4684:	a6 01       	movw	r20, r12
    4686:	61 2f       	mov	r22, r17
    4688:	83 e3       	ldi	r24, 0x33	; 51
    468a:	9a e0       	ldi	r25, 0x0A	; 10
    468c:	3a d2       	rcall	.+1140   	; 0x4b02 <_ZN10W5500Class20recv_data_processingEhPhjh>
    468e:	40 e4       	ldi	r20, 0x40	; 64
    4690:	61 2f       	mov	r22, r17
    4692:	83 e3       	ldi	r24, 0x33	; 51
    4694:	9a e0       	ldi	r25, 0x0A	; 10
    4696:	82 d2       	rcall	.+1284   	; 0x4b9c <_ZN10W5500Class9execCmdSnEh7SockCMD>
    4698:	ce 01       	movw	r24, r28
    469a:	df 91       	pop	r29
    469c:	cf 91       	pop	r28
    469e:	1f 91       	pop	r17
    46a0:	0f 91       	pop	r16
    46a2:	ff 90       	pop	r15
    46a4:	ef 90       	pop	r14
    46a6:	df 90       	pop	r13
    46a8:	cf 90       	pop	r12
    46aa:	08 95       	ret

000046ac <_Z4peekhPh>:
    46ac:	0f 93       	push	r16
    46ae:	ab 01       	movw	r20, r22
    46b0:	01 e0       	ldi	r16, 0x01	; 1
    46b2:	21 e0       	ldi	r18, 0x01	; 1
    46b4:	30 e0       	ldi	r19, 0x00	; 0
    46b6:	68 2f       	mov	r22, r24
    46b8:	83 e3       	ldi	r24, 0x33	; 51
    46ba:	9a e0       	ldi	r25, 0x0A	; 10
    46bc:	22 d2       	rcall	.+1092   	; 0x4b02 <_ZN10W5500Class20recv_data_processingEhPhjh>
    46be:	81 e0       	ldi	r24, 0x01	; 1
    46c0:	90 e0       	ldi	r25, 0x00	; 0
    46c2:	0f 91       	pop	r16
    46c4:	08 95       	ret

000046c6 <_Z5flushh>:
    46c6:	08 95       	ret

000046c8 <_Z10bufferDatahjPKhj>:

uint16_t bufferData(SOCKET s, uint16_t offset, const uint8_t* buf, uint16_t len)
{
    46c8:	af 92       	push	r10
    46ca:	bf 92       	push	r11
    46cc:	cf 92       	push	r12
    46ce:	df 92       	push	r13
    46d0:	ff 92       	push	r15
    46d2:	0f 93       	push	r16
    46d4:	1f 93       	push	r17
    46d6:	cf 93       	push	r28
    46d8:	df 93       	push	r29
    46da:	f8 2e       	mov	r15, r24
    46dc:	6b 01       	movw	r12, r22
    46de:	5a 01       	movw	r10, r20
    46e0:	e9 01       	movw	r28, r18
  uint16_t ret =0;
  if (len > w5500.getTXFreeSize(s))
    46e2:	68 2f       	mov	r22, r24
    46e4:	83 e3       	ldi	r24, 0x33	; 51
    46e6:	9a e0       	ldi	r25, 0x0A	; 10
    46e8:	38 d1       	rcall	.+624    	; 0x495a <_ZN10W5500Class13getTXFreeSizeEh>
    46ea:	8c 17       	cp	r24, r28
    46ec:	9d 07       	cpc	r25, r29
    46ee:	28 f4       	brcc	.+10     	; 0x46fa <_Z10bufferDatahjPKhj+0x32>
  {
    ret = w5500.getTXFreeSize(s); // check size not to exceed MAX size.
    46f0:	6f 2d       	mov	r22, r15
    46f2:	83 e3       	ldi	r24, 0x33	; 51
    46f4:	9a e0       	ldi	r25, 0x0A	; 10
    46f6:	31 d1       	rcall	.+610    	; 0x495a <_ZN10W5500Class13getTXFreeSizeEh>
    46f8:	ec 01       	movw	r28, r24
  }
  else
  {
    ret = len;
  }
  w5500.send_data_processing_offset(s, offset, buf, ret);
    46fa:	8e 01       	movw	r16, r28
    46fc:	95 01       	movw	r18, r10
    46fe:	a6 01       	movw	r20, r12
    4700:	6f 2d       	mov	r22, r15
    4702:	83 e3       	ldi	r24, 0x33	; 51
    4704:	9a e0       	ldi	r25, 0x0A	; 10
    4706:	74 d1       	rcall	.+744    	; 0x49f0 <_ZN10W5500Class27send_data_processing_offsetEhjPKhj>
  return ret;
}
    4708:	ce 01       	movw	r24, r28
    470a:	df 91       	pop	r29
    470c:	cf 91       	pop	r28
    470e:	1f 91       	pop	r17
    4710:	0f 91       	pop	r16
    4712:	ff 90       	pop	r15
    4714:	df 90       	pop	r13
    4716:	cf 90       	pop	r12
    4718:	bf 90       	pop	r11
    471a:	af 90       	pop	r10
    471c:	08 95       	ret

0000471e <_Z8startUDPhPhj>:

int startUDP(SOCKET s, uint8_t* addr, uint16_t port)
{
    471e:	0f 93       	push	r16
    4720:	1f 93       	push	r17
    4722:	cf 93       	push	r28
    4724:	fb 01       	movw	r30, r22
  if
    4726:	90 81       	ld	r25, Z
    4728:	91 11       	cpse	r25, r1
    472a:	09 c0       	rjmp	.+18     	; 0x473e <_Z8startUDPhPhj+0x20>
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
    472c:	91 81       	ldd	r25, Z+1	; 0x01
    472e:	91 11       	cpse	r25, r1
    4730:	06 c0       	rjmp	.+12     	; 0x473e <_Z8startUDPhPhj+0x20>
    4732:	92 81       	ldd	r25, Z+2	; 0x02
    4734:	91 11       	cpse	r25, r1
    4736:	03 c0       	rjmp	.+6      	; 0x473e <_Z8startUDPhPhj+0x20>
    4738:	93 81       	ldd	r25, Z+3	; 0x03
    473a:	99 23       	and	r25, r25
    473c:	69 f0       	breq	.+26     	; 0x4758 <_Z8startUDPhPhj+0x3a>
    473e:	41 15       	cp	r20, r1
    4740:	51 05       	cpc	r21, r1
    4742:	51 f0       	breq	.+20     	; 0x4758 <_Z8startUDPhPhj+0x3a>
    4744:	8a 01       	movw	r16, r20
    4746:	bf 01       	movw	r22, r30
    4748:	c8 2f       	mov	r28, r24
  {
    return 0;
  }
  else
  {
    w5500.writeSnDIPR(s, addr);
    474a:	71 de       	rcall	.-798    	; 0x442e <_ZN10W5500Class11writeSnDIPREhPh>
    w5500.writeSnDPORT(s, port);
    474c:	b8 01       	movw	r22, r16
    474e:	8c 2f       	mov	r24, r28
    4750:	9f de       	rcall	.-706    	; 0x4490 <_ZN10W5500Class12writeSnDPORTEhj>
    return 1;
    4752:	81 e0       	ldi	r24, 0x01	; 1
    4754:	90 e0       	ldi	r25, 0x00	; 0
    4756:	02 c0       	rjmp	.+4      	; 0x475c <_Z8startUDPhPhj+0x3e>
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
     ((port == 0x00))
    ) 
  {
    return 0;
    4758:	80 e0       	ldi	r24, 0x00	; 0
    475a:	90 e0       	ldi	r25, 0x00	; 0
  {
    w5500.writeSnDIPR(s, addr);
    w5500.writeSnDPORT(s, port);
    return 1;
  }
}
    475c:	cf 91       	pop	r28
    475e:	1f 91       	pop	r17
    4760:	0f 91       	pop	r16
    4762:	08 95       	ret

00004764 <_Z7sendUDPh>:

int sendUDP(SOCKET s)
{
    4764:	cf 93       	push	r28
    4766:	c8 2f       	mov	r28, r24
  w5500.execCmdSn(s, Sock_SEND);
    4768:	40 e2       	ldi	r20, 0x20	; 32
    476a:	68 2f       	mov	r22, r24
    476c:	83 e3       	ldi	r24, 0x33	; 51
    476e:	9a e0       	ldi	r25, 0x0A	; 10
    4770:	15 d2       	rcall	.+1066   	; 0x4b9c <_ZN10W5500Class9execCmdSnEh7SockCMD>
		
  /* +2008.01 bj */
  while ( (w5500.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
    4772:	8c 2f       	mov	r24, r28
    4774:	6f de       	rcall	.-802    	; 0x4454 <_ZN10W5500Class8readSnIREh>
    4776:	84 fd       	sbrc	r24, 4
    4778:	0a c0       	rjmp	.+20     	; 0x478e <_Z7sendUDPh+0x2a>
  {
    if (w5500.readSnIR(s) & SnIR::TIMEOUT)
    477a:	8c 2f       	mov	r24, r28
    477c:	6b de       	rcall	.-810    	; 0x4454 <_ZN10W5500Class8readSnIREh>
    477e:	83 ff       	sbrs	r24, 3
    4780:	f8 cf       	rjmp	.-16     	; 0x4772 <_Z7sendUDPh+0xe>
    {
      /* +2008.01 [bj]: clear interrupt */
      w5500.writeSnIR(s, (SnIR::SEND_OK|SnIR::TIMEOUT));
    4782:	68 e1       	ldi	r22, 0x18	; 24
    4784:	8c 2f       	mov	r24, r28
    4786:	80 de       	rcall	.-768    	; 0x4488 <_ZN10W5500Class9writeSnIREhh>
    4788:	80 e0       	ldi	r24, 0x00	; 0
      return 0;
    478a:	90 e0       	ldi	r25, 0x00	; 0
    478c:	05 c0       	rjmp	.+10     	; 0x4798 <_Z7sendUDPh+0x34>
    }
  }

  /* +2008.01 bj */	
  w5500.writeSnIR(s, SnIR::SEND_OK);
    478e:	60 e1       	ldi	r22, 0x10	; 16
    4790:	8c 2f       	mov	r24, r28
    4792:	7a de       	rcall	.-780    	; 0x4488 <_ZN10W5500Class9writeSnIREhh>
    4794:	81 e0       	ldi	r24, 0x01	; 1

  /* Sent ok */
  return 1;
    4796:	90 e0       	ldi	r25, 0x00	; 0
    4798:	cf 91       	pop	r28
}
    479a:	08 95       	ret

0000479c <_ZN8SPIClass16beginTransactionE11SPISettings>:
    479c:	20 91 36 0a 	lds	r18, 0x0A36	; 0x800a36 <_ZN8SPIClass13interruptModeE>
    uint8_t _data = SPI.transfer(0);
    resetSS();
    SPI.endTransaction();

    return _data;
}
    47a0:	22 23       	and	r18, r18
    47a2:	99 f0       	breq	.+38     	; 0x47ca <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    47a4:	4f b7       	in	r20, 0x3f	; 63
    47a6:	f8 94       	cli
    47a8:	20 91 36 0a 	lds	r18, 0x0A36	; 0x800a36 <_ZN8SPIClass13interruptModeE>
    47ac:	21 30       	cpi	r18, 0x01	; 1
    47ae:	59 f4       	brne	.+22     	; 0x47c6 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
    47b0:	2d b3       	in	r18, 0x1d	; 29
    47b2:	20 93 34 0a 	sts	0x0A34, r18	; 0x800a34 <_ZN8SPIClass13interruptSaveE>
    47b6:	3d b3       	in	r19, 0x1d	; 29
    47b8:	20 91 35 0a 	lds	r18, 0x0A35	; 0x800a35 <_ZN8SPIClass13interruptMaskE>
    47bc:	20 95       	com	r18
    47be:	23 23       	and	r18, r19
    47c0:	2d bb       	out	0x1d, r18	; 29
    47c2:	4f bf       	out	0x3f, r20	; 63
    47c4:	02 c0       	rjmp	.+4      	; 0x47ca <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    47c6:	40 93 34 0a 	sts	0x0A34, r20	; 0x800a34 <_ZN8SPIClass13interruptSaveE>
    47ca:	8c bd       	out	0x2c, r24	; 44
    47cc:	9d bd       	out	0x2d, r25	; 45
    47ce:	08 95       	ret

000047d0 <_ZN8SPIClass8transferEh>:
    47d0:	8e bd       	out	0x2e, r24	; 46
    47d2:	00 00       	nop
    47d4:	0d b4       	in	r0, 0x2d	; 45
    47d6:	07 fe       	sbrs	r0, 7
    47d8:	fd cf       	rjmp	.-6      	; 0x47d4 <_ZN8SPIClass8transferEh+0x4>
    47da:	8e b5       	in	r24, 0x2e	; 46
    47dc:	08 95       	ret

000047de <_ZN8SPIClass14endTransactionEv>:
    47de:	80 91 36 0a 	lds	r24, 0x0A36	; 0x800a36 <_ZN8SPIClass13interruptModeE>
    47e2:	88 23       	and	r24, r24
    47e4:	61 f0       	breq	.+24     	; 0x47fe <_ZN8SPIClass14endTransactionEv+0x20>
    47e6:	9f b7       	in	r25, 0x3f	; 63
    47e8:	f8 94       	cli
    47ea:	20 91 36 0a 	lds	r18, 0x0A36	; 0x800a36 <_ZN8SPIClass13interruptModeE>
    47ee:	80 91 34 0a 	lds	r24, 0x0A34	; 0x800a34 <_ZN8SPIClass13interruptSaveE>
    47f2:	21 30       	cpi	r18, 0x01	; 1
    47f4:	19 f4       	brne	.+6      	; 0x47fc <_ZN8SPIClass14endTransactionEv+0x1e>
    47f6:	8d bb       	out	0x1d, r24	; 29
    47f8:	9f bf       	out	0x3f, r25	; 63
    47fa:	08 95       	ret
    47fc:	8f bf       	out	0x3f, r24	; 63
    47fe:	08 95       	ret

00004800 <_ZN10W5500Class5setSSEv>:
    4800:	44 98       	cbi	0x08, 4	; 8
    4802:	08 95       	ret

00004804 <_ZN10W5500Class7resetSSEv>:
    4804:	44 9a       	sbi	0x08, 4	; 8
    4806:	08 95       	ret

00004808 <_ZN10W5500Class5writeEjhh>:
    4808:	0f 93       	push	r16
    480a:	1f 93       	push	r17
    480c:	cf 93       	push	r28
    480e:	df 93       	push	r29
    4810:	18 2f       	mov	r17, r24
    4812:	09 2f       	mov	r16, r25
    4814:	d6 2f       	mov	r29, r22
    4816:	c4 2f       	mov	r28, r20
    4818:	80 91 31 0a 	lds	r24, 0x0A31	; 0x800a31 <wiznet_SPI_settings>
    481c:	90 91 32 0a 	lds	r25, 0x0A32	; 0x800a32 <wiznet_SPI_settings+0x1>
    4820:	bd df       	rcall	.-134    	; 0x479c <_ZN8SPIClass16beginTransactionE11SPISettings>
    4822:	ee df       	rcall	.-36     	; 0x4800 <_ZN10W5500Class5setSSEv>
    4824:	80 2f       	mov	r24, r16
    4826:	d4 df       	rcall	.-88     	; 0x47d0 <_ZN8SPIClass8transferEh>
    4828:	81 2f       	mov	r24, r17
    482a:	d2 df       	rcall	.-92     	; 0x47d0 <_ZN8SPIClass8transferEh>
    482c:	8d 2f       	mov	r24, r29
    482e:	d0 df       	rcall	.-96     	; 0x47d0 <_ZN8SPIClass8transferEh>
    4830:	8c 2f       	mov	r24, r28
    4832:	ce df       	rcall	.-100    	; 0x47d0 <_ZN8SPIClass8transferEh>
    4834:	e7 df       	rcall	.-50     	; 0x4804 <_ZN10W5500Class7resetSSEv>
    4836:	d3 df       	rcall	.-90     	; 0x47de <_ZN8SPIClass14endTransactionEv>
    4838:	81 e0       	ldi	r24, 0x01	; 1
    483a:	df 91       	pop	r29
    483c:	cf 91       	pop	r28
    483e:	1f 91       	pop	r17
    4840:	0f 91       	pop	r16
    4842:	08 95       	ret

00004844 <_ZN10W5500Class5writeEjhPKhj>:
    4844:	df 92       	push	r13
    4846:	ef 92       	push	r14
    4848:	ff 92       	push	r15
    484a:	0f 93       	push	r16
    484c:	1f 93       	push	r17
    484e:	cf 93       	push	r28
    4850:	df 93       	push	r29
    4852:	d8 2f       	mov	r29, r24
    4854:	d9 2e       	mov	r13, r25
    4856:	c6 2f       	mov	r28, r22
    4858:	7a 01       	movw	r14, r20
    485a:	89 01       	movw	r16, r18
    485c:	80 91 31 0a 	lds	r24, 0x0A31	; 0x800a31 <wiznet_SPI_settings>
    4860:	90 91 32 0a 	lds	r25, 0x0A32	; 0x800a32 <wiznet_SPI_settings+0x1>
    4864:	9b df       	rcall	.-202    	; 0x479c <_ZN8SPIClass16beginTransactionE11SPISettings>
    4866:	cc df       	rcall	.-104    	; 0x4800 <_ZN10W5500Class5setSSEv>
    4868:	8d 2d       	mov	r24, r13
    486a:	b2 df       	rcall	.-156    	; 0x47d0 <_ZN8SPIClass8transferEh>
    486c:	8d 2f       	mov	r24, r29
    486e:	b0 df       	rcall	.-160    	; 0x47d0 <_ZN8SPIClass8transferEh>
    4870:	8c 2f       	mov	r24, r28
    4872:	ae df       	rcall	.-164    	; 0x47d0 <_ZN8SPIClass8transferEh>
    4874:	e7 01       	movw	r28, r14
    4876:	e0 0e       	add	r14, r16
    4878:	f1 1e       	adc	r15, r17
    487a:	ce 15       	cp	r28, r14
    487c:	df 05       	cpc	r29, r15
    487e:	19 f0       	breq	.+6      	; 0x4886 <_ZN10W5500Class5writeEjhPKhj+0x42>
    4880:	89 91       	ld	r24, Y+
    4882:	a6 df       	rcall	.-180    	; 0x47d0 <_ZN8SPIClass8transferEh>
    4884:	fa cf       	rjmp	.-12     	; 0x487a <_ZN10W5500Class5writeEjhPKhj+0x36>
    4886:	be df       	rcall	.-132    	; 0x4804 <_ZN10W5500Class7resetSSEv>
    4888:	aa df       	rcall	.-172    	; 0x47de <_ZN8SPIClass14endTransactionEv>
    488a:	c8 01       	movw	r24, r16
    488c:	df 91       	pop	r29
    488e:	cf 91       	pop	r28
    4890:	1f 91       	pop	r17
    4892:	0f 91       	pop	r16
    4894:	ff 90       	pop	r15
    4896:	ef 90       	pop	r14
    4898:	df 90       	pop	r13
    489a:	08 95       	ret

0000489c <_ZN10W5500Class4readEjh>:
    489c:	1f 93       	push	r17
    489e:	cf 93       	push	r28
    48a0:	df 93       	push	r29
    48a2:	d8 2f       	mov	r29, r24
    48a4:	19 2f       	mov	r17, r25
    48a6:	c6 2f       	mov	r28, r22
    48a8:	80 91 31 0a 	lds	r24, 0x0A31	; 0x800a31 <wiznet_SPI_settings>
    48ac:	90 91 32 0a 	lds	r25, 0x0A32	; 0x800a32 <wiznet_SPI_settings+0x1>
    48b0:	75 df       	rcall	.-278    	; 0x479c <_ZN8SPIClass16beginTransactionE11SPISettings>
    48b2:	a6 df       	rcall	.-180    	; 0x4800 <_ZN10W5500Class5setSSEv>
    48b4:	81 2f       	mov	r24, r17
    48b6:	8c df       	rcall	.-232    	; 0x47d0 <_ZN8SPIClass8transferEh>
    48b8:	8d 2f       	mov	r24, r29
    48ba:	8a df       	rcall	.-236    	; 0x47d0 <_ZN8SPIClass8transferEh>
    48bc:	8c 2f       	mov	r24, r28
    48be:	88 df       	rcall	.-240    	; 0x47d0 <_ZN8SPIClass8transferEh>
    48c0:	80 e0       	ldi	r24, 0x00	; 0
    48c2:	86 df       	rcall	.-244    	; 0x47d0 <_ZN8SPIClass8transferEh>
    48c4:	c8 2f       	mov	r28, r24
    48c6:	9e df       	rcall	.-196    	; 0x4804 <_ZN10W5500Class7resetSSEv>
    48c8:	8a df       	rcall	.-236    	; 0x47de <_ZN8SPIClass14endTransactionEv>
    48ca:	8c 2f       	mov	r24, r28
    48cc:	df 91       	pop	r29
    48ce:	cf 91       	pop	r28
    48d0:	1f 91       	pop	r17
    48d2:	08 95       	ret

000048d4 <_ZN10W5500Class4initEh>:
    48d4:	cf 93       	push	r28
    48d6:	df 93       	push	r29
    48d8:	60 93 30 0a 	sts	0x0A30, r22	; 0x800a30 <SPI_CS>
    48dc:	68 ee       	ldi	r22, 0xE8	; 232
    48de:	73 e0       	ldi	r23, 0x03	; 3
    48e0:	80 e0       	ldi	r24, 0x00	; 0
    48e2:	90 e0       	ldi	r25, 0x00	; 0
    48e4:	0e 94 16 30 	call	0x602c	; 0x602c <delay>
    48e8:	3c 9a       	sbi	0x07, 4	; 7
    48ea:	10 d4       	rcall	.+2080   	; 0x510c <_ZN8SPIClass5beginEv>
    48ec:	60 e0       	ldi	r22, 0x00	; 0
    48ee:	80 e0       	ldi	r24, 0x00	; 0
    48f0:	90 e0       	ldi	r25, 0x00	; 0
    48f2:	d4 df       	rcall	.-88     	; 0x489c <_ZN10W5500Class4readEjh>
    48f4:	48 2f       	mov	r20, r24
    48f6:	40 68       	ori	r20, 0x80	; 128
    48f8:	64 e0       	ldi	r22, 0x04	; 4
    48fa:	80 e0       	ldi	r24, 0x00	; 0
    48fc:	90 e0       	ldi	r25, 0x00	; 0
    48fe:	84 df       	rcall	.-248    	; 0x4808 <_ZN10W5500Class5writeEjhh>
    4900:	c0 e0       	ldi	r28, 0x00	; 0
    4902:	dc 2f       	mov	r29, r28
    4904:	d2 95       	swap	r29
    4906:	dd 0f       	add	r29, r29
    4908:	d0 7e       	andi	r29, 0xE0	; 224
    490a:	d4 5f       	subi	r29, 0xF4	; 244
    490c:	42 e0       	ldi	r20, 0x02	; 2
    490e:	6d 2f       	mov	r22, r29
    4910:	8e e1       	ldi	r24, 0x1E	; 30
    4912:	90 e0       	ldi	r25, 0x00	; 0
    4914:	79 df       	rcall	.-270    	; 0x4808 <_ZN10W5500Class5writeEjhh>
    4916:	42 e0       	ldi	r20, 0x02	; 2
    4918:	6d 2f       	mov	r22, r29
    491a:	8f e1       	ldi	r24, 0x1F	; 31
    491c:	90 e0       	ldi	r25, 0x00	; 0
    491e:	74 df       	rcall	.-280    	; 0x4808 <_ZN10W5500Class5writeEjhh>
    4920:	cf 5f       	subi	r28, 0xFF	; 255
    4922:	c8 30       	cpi	r28, 0x08	; 8
    4924:	71 f7       	brne	.-36     	; 0x4902 <_ZN10W5500Class4initEh+0x2e>
    4926:	df 91       	pop	r29
    4928:	cf 91       	pop	r28
    492a:	08 95       	ret

0000492c <_ZN10W5500Class12readSnTX_FSREh>:
    492c:	1f 93       	push	r17
    492e:	cf 93       	push	r28
    4930:	df 93       	push	r29
    4932:	18 2f       	mov	r17, r24
    4934:	60 e2       	ldi	r22, 0x20	; 32
    4936:	70 e0       	ldi	r23, 0x00	; 0
    4938:	85 dd       	rcall	.-1270   	; 0x4444 <_ZN10W5500Class6readSnEhj>
    493a:	c8 2f       	mov	r28, r24
    493c:	d0 e0       	ldi	r29, 0x00	; 0
    493e:	dc 2f       	mov	r29, r28
    4940:	cc 27       	eor	r28, r28
    4942:	61 e2       	ldi	r22, 0x21	; 33
    4944:	70 e0       	ldi	r23, 0x00	; 0
    4946:	81 2f       	mov	r24, r17
    4948:	7d dd       	rcall	.-1286   	; 0x4444 <_ZN10W5500Class6readSnEhj>
    494a:	9e 01       	movw	r18, r28
    494c:	28 0f       	add	r18, r24
    494e:	31 1d       	adc	r19, r1
    4950:	c9 01       	movw	r24, r18
    4952:	df 91       	pop	r29
    4954:	cf 91       	pop	r28
    4956:	1f 91       	pop	r17
    4958:	08 95       	ret

0000495a <_ZN10W5500Class13getTXFreeSizeEh>:
    495a:	ff 92       	push	r15
    495c:	0f 93       	push	r16
    495e:	1f 93       	push	r17
    4960:	cf 93       	push	r28
    4962:	df 93       	push	r29
    4964:	f6 2e       	mov	r15, r22
    4966:	c0 e0       	ldi	r28, 0x00	; 0
    4968:	d0 e0       	ldi	r29, 0x00	; 0
    496a:	8f 2d       	mov	r24, r15
    496c:	df df       	rcall	.-66     	; 0x492c <_ZN10W5500Class12readSnTX_FSREh>
    496e:	8c 01       	movw	r16, r24
    4970:	89 2b       	or	r24, r25
    4972:	19 f0       	breq	.+6      	; 0x497a <_ZN10W5500Class13getTXFreeSizeEh+0x20>
    4974:	8f 2d       	mov	r24, r15
    4976:	da df       	rcall	.-76     	; 0x492c <_ZN10W5500Class12readSnTX_FSREh>
    4978:	ec 01       	movw	r28, r24
    497a:	c0 17       	cp	r28, r16
    497c:	d1 07       	cpc	r29, r17
    497e:	a9 f7       	brne	.-22     	; 0x496a <_ZN10W5500Class13getTXFreeSizeEh+0x10>
    4980:	ce 01       	movw	r24, r28
    4982:	df 91       	pop	r29
    4984:	cf 91       	pop	r28
    4986:	1f 91       	pop	r17
    4988:	0f 91       	pop	r16
    498a:	ff 90       	pop	r15
    498c:	08 95       	ret

0000498e <_ZN10W5500Class12readSnRX_RSREh>:
    498e:	1f 93       	push	r17
    4990:	cf 93       	push	r28
    4992:	df 93       	push	r29
    4994:	18 2f       	mov	r17, r24
    4996:	66 e2       	ldi	r22, 0x26	; 38
    4998:	70 e0       	ldi	r23, 0x00	; 0
    499a:	54 dd       	rcall	.-1368   	; 0x4444 <_ZN10W5500Class6readSnEhj>
    499c:	c8 2f       	mov	r28, r24
    499e:	d0 e0       	ldi	r29, 0x00	; 0
    49a0:	dc 2f       	mov	r29, r28
    49a2:	cc 27       	eor	r28, r28
    49a4:	67 e2       	ldi	r22, 0x27	; 39
    49a6:	70 e0       	ldi	r23, 0x00	; 0
    49a8:	81 2f       	mov	r24, r17
    49aa:	4c dd       	rcall	.-1384   	; 0x4444 <_ZN10W5500Class6readSnEhj>
    49ac:	9e 01       	movw	r18, r28
    49ae:	28 0f       	add	r18, r24
    49b0:	31 1d       	adc	r19, r1
    49b2:	c9 01       	movw	r24, r18
    49b4:	df 91       	pop	r29
    49b6:	cf 91       	pop	r28
    49b8:	1f 91       	pop	r17
    49ba:	08 95       	ret

000049bc <_ZN10W5500Class17getRXReceivedSizeEh>:
    49bc:	ff 92       	push	r15
    49be:	0f 93       	push	r16
    49c0:	1f 93       	push	r17
    49c2:	cf 93       	push	r28
    49c4:	df 93       	push	r29
    49c6:	f6 2e       	mov	r15, r22
    49c8:	c0 e0       	ldi	r28, 0x00	; 0
    49ca:	d0 e0       	ldi	r29, 0x00	; 0
    49cc:	8f 2d       	mov	r24, r15
    49ce:	df df       	rcall	.-66     	; 0x498e <_ZN10W5500Class12readSnRX_RSREh>
    49d0:	8c 01       	movw	r16, r24
    49d2:	89 2b       	or	r24, r25
    49d4:	19 f0       	breq	.+6      	; 0x49dc <_ZN10W5500Class17getRXReceivedSizeEh+0x20>
    49d6:	8f 2d       	mov	r24, r15
    49d8:	da df       	rcall	.-76     	; 0x498e <_ZN10W5500Class12readSnRX_RSREh>
    49da:	ec 01       	movw	r28, r24
    49dc:	c0 17       	cp	r28, r16
    49de:	d1 07       	cpc	r29, r17
    49e0:	a9 f7       	brne	.-22     	; 0x49cc <_ZN10W5500Class17getRXReceivedSizeEh+0x10>
    49e2:	ce 01       	movw	r24, r28
    49e4:	df 91       	pop	r29
    49e6:	cf 91       	pop	r28
    49e8:	1f 91       	pop	r17
    49ea:	0f 91       	pop	r16
    49ec:	ff 90       	pop	r15
    49ee:	08 95       	ret

000049f0 <_ZN10W5500Class27send_data_processing_offsetEhjPKhj>:
    49f0:	af 92       	push	r10
    49f2:	bf 92       	push	r11
    49f4:	df 92       	push	r13
    49f6:	ef 92       	push	r14
    49f8:	ff 92       	push	r15
    49fa:	0f 93       	push	r16
    49fc:	1f 93       	push	r17
    49fe:	cf 93       	push	r28
    4a00:	df 93       	push	r29
    4a02:	d6 2e       	mov	r13, r22
    4a04:	7a 01       	movw	r14, r20
    4a06:	59 01       	movw	r10, r18
    4a08:	64 e2       	ldi	r22, 0x24	; 36
    4a0a:	70 e0       	ldi	r23, 0x00	; 0
    4a0c:	8d 2d       	mov	r24, r13
    4a0e:	1a dd       	rcall	.-1484   	; 0x4444 <_ZN10W5500Class6readSnEhj>
    4a10:	c8 2f       	mov	r28, r24
    4a12:	65 e2       	ldi	r22, 0x25	; 37
    4a14:	70 e0       	ldi	r23, 0x00	; 0
    4a16:	8d 2d       	mov	r24, r13
    4a18:	15 dd       	rcall	.-1494   	; 0x4444 <_ZN10W5500Class6readSnEhj>
    4a1a:	d0 e0       	ldi	r29, 0x00	; 0
    4a1c:	dc 2f       	mov	r29, r28
    4a1e:	cc 27       	eor	r28, r28
    4a20:	e8 0e       	add	r14, r24
    4a22:	f1 1c       	adc	r15, r1
    4a24:	ce 0d       	add	r28, r14
    4a26:	df 1d       	adc	r29, r15
    4a28:	6d 2d       	mov	r22, r13
    4a2a:	62 95       	swap	r22
    4a2c:	66 0f       	add	r22, r22
    4a2e:	60 7e       	andi	r22, 0xE0	; 224
    4a30:	6c 5e       	subi	r22, 0xEC	; 236
    4a32:	98 01       	movw	r18, r16
    4a34:	a5 01       	movw	r20, r10
    4a36:	ce 01       	movw	r24, r28
    4a38:	05 df       	rcall	.-502    	; 0x4844 <_ZN10W5500Class5writeEjhPKhj>
    4a3a:	c0 0f       	add	r28, r16
    4a3c:	d1 1f       	adc	r29, r17
    4a3e:	4d 2f       	mov	r20, r29
    4a40:	64 e2       	ldi	r22, 0x24	; 36
    4a42:	70 e0       	ldi	r23, 0x00	; 0
    4a44:	8d 2d       	mov	r24, r13
    4a46:	09 dd       	rcall	.-1518   	; 0x445a <_ZN10W5500Class7writeSnEhjh>
    4a48:	4c 2f       	mov	r20, r28
    4a4a:	65 e2       	ldi	r22, 0x25	; 37
    4a4c:	70 e0       	ldi	r23, 0x00	; 0
    4a4e:	8d 2d       	mov	r24, r13
    4a50:	df 91       	pop	r29
    4a52:	cf 91       	pop	r28
    4a54:	1f 91       	pop	r17
    4a56:	0f 91       	pop	r16
    4a58:	ff 90       	pop	r15
    4a5a:	ef 90       	pop	r14
    4a5c:	df 90       	pop	r13
    4a5e:	bf 90       	pop	r11
    4a60:	af 90       	pop	r10
    4a62:	fb cc       	rjmp	.-1546   	; 0x445a <_ZN10W5500Class7writeSnEhjh>

00004a64 <_ZN10W5500Class20send_data_processingEhPKhj>:
    4a64:	0f 93       	push	r16
    4a66:	1f 93       	push	r17
    4a68:	89 01       	movw	r16, r18
    4a6a:	9a 01       	movw	r18, r20
    4a6c:	40 e0       	ldi	r20, 0x00	; 0
    4a6e:	50 e0       	ldi	r21, 0x00	; 0
    4a70:	bf df       	rcall	.-130    	; 0x49f0 <_ZN10W5500Class27send_data_processing_offsetEhjPKhj>
    4a72:	1f 91       	pop	r17
    4a74:	0f 91       	pop	r16
    4a76:	08 95       	ret

00004a78 <_ZN10W5500Class4readEjhPhj>:
    4a78:	df 92       	push	r13
    4a7a:	ef 92       	push	r14
    4a7c:	ff 92       	push	r15
    4a7e:	0f 93       	push	r16
    4a80:	1f 93       	push	r17
    4a82:	cf 93       	push	r28
    4a84:	df 93       	push	r29
    4a86:	d8 2f       	mov	r29, r24
    4a88:	d9 2e       	mov	r13, r25
    4a8a:	c6 2f       	mov	r28, r22
    4a8c:	7a 01       	movw	r14, r20
    4a8e:	89 01       	movw	r16, r18
    4a90:	80 91 31 0a 	lds	r24, 0x0A31	; 0x800a31 <wiznet_SPI_settings>
    4a94:	90 91 32 0a 	lds	r25, 0x0A32	; 0x800a32 <wiznet_SPI_settings+0x1>
    4a98:	81 de       	rcall	.-766    	; 0x479c <_ZN8SPIClass16beginTransactionE11SPISettings>
    4a9a:	b2 de       	rcall	.-668    	; 0x4800 <_ZN10W5500Class5setSSEv>
    4a9c:	8d 2d       	mov	r24, r13
    4a9e:	98 de       	rcall	.-720    	; 0x47d0 <_ZN8SPIClass8transferEh>
    4aa0:	8d 2f       	mov	r24, r29
    4aa2:	96 de       	rcall	.-724    	; 0x47d0 <_ZN8SPIClass8transferEh>
    4aa4:	8c 2f       	mov	r24, r28
    4aa6:	94 de       	rcall	.-728    	; 0x47d0 <_ZN8SPIClass8transferEh>
    4aa8:	e7 01       	movw	r28, r14
    4aaa:	e0 0e       	add	r14, r16
    4aac:	f1 1e       	adc	r15, r17
    4aae:	ce 15       	cp	r28, r14
    4ab0:	df 05       	cpc	r29, r15
    4ab2:	21 f0       	breq	.+8      	; 0x4abc <_ZN10W5500Class4readEjhPhj+0x44>
    4ab4:	80 e0       	ldi	r24, 0x00	; 0
    4ab6:	8c de       	rcall	.-744    	; 0x47d0 <_ZN8SPIClass8transferEh>
    4ab8:	89 93       	st	Y+, r24
    4aba:	f9 cf       	rjmp	.-14     	; 0x4aae <_ZN10W5500Class4readEjhPhj+0x36>
    4abc:	a3 de       	rcall	.-698    	; 0x4804 <_ZN10W5500Class7resetSSEv>
    4abe:	8f de       	rcall	.-738    	; 0x47de <_ZN8SPIClass14endTransactionEv>
    4ac0:	c8 01       	movw	r24, r16
    4ac2:	df 91       	pop	r29
    4ac4:	cf 91       	pop	r28
    4ac6:	1f 91       	pop	r17
    4ac8:	0f 91       	pop	r16
    4aca:	ff 90       	pop	r15
    4acc:	ef 90       	pop	r14
    4ace:	df 90       	pop	r13
    4ad0:	08 95       	ret

00004ad2 <_ZN10W5500Class9read_dataEhjPVhj>:
    4ad2:	0f 93       	push	r16
    4ad4:	1f 93       	push	r17
    4ad6:	cf 93       	push	r28
    4ad8:	df 93       	push	r29
    4ada:	00 d0       	rcall	.+0      	; 0x4adc <_ZN10W5500Class9read_dataEhjPVhj+0xa>
    4adc:	cd b7       	in	r28, 0x3d	; 61
    4ade:	de b7       	in	r29, 0x3e	; 62
    4ae0:	5a 83       	std	Y+2, r21	; 0x02
    4ae2:	49 83       	std	Y+1, r20	; 0x01
    4ae4:	a9 01       	movw	r20, r18
    4ae6:	98 01       	movw	r18, r16
    4ae8:	89 81       	ldd	r24, Y+1	; 0x01
    4aea:	9a 81       	ldd	r25, Y+2	; 0x02
    4aec:	62 95       	swap	r22
    4aee:	66 0f       	add	r22, r22
    4af0:	60 7e       	andi	r22, 0xE0	; 224
    4af2:	68 5e       	subi	r22, 0xE8	; 232
    4af4:	0f 90       	pop	r0
    4af6:	0f 90       	pop	r0
    4af8:	df 91       	pop	r29
    4afa:	cf 91       	pop	r28
    4afc:	1f 91       	pop	r17
    4afe:	0f 91       	pop	r16
    4b00:	bb cf       	rjmp	.-138    	; 0x4a78 <_ZN10W5500Class4readEjhPhj>

00004b02 <_ZN10W5500Class20recv_data_processingEhPhjh>:
    4b02:	8f 92       	push	r8
    4b04:	9f 92       	push	r9
    4b06:	af 92       	push	r10
    4b08:	bf 92       	push	r11
    4b0a:	cf 92       	push	r12
    4b0c:	df 92       	push	r13
    4b0e:	ef 92       	push	r14
    4b10:	ff 92       	push	r15
    4b12:	0f 93       	push	r16
    4b14:	1f 93       	push	r17
    4b16:	cf 93       	push	r28
    4b18:	df 93       	push	r29
    4b1a:	6c 01       	movw	r12, r24
    4b1c:	96 2e       	mov	r9, r22
    4b1e:	5a 01       	movw	r10, r20
    4b20:	79 01       	movw	r14, r18
    4b22:	80 2e       	mov	r8, r16
    4b24:	68 e2       	ldi	r22, 0x28	; 40
    4b26:	70 e0       	ldi	r23, 0x00	; 0
    4b28:	89 2d       	mov	r24, r9
    4b2a:	8c dc       	rcall	.-1768   	; 0x4444 <_ZN10W5500Class6readSnEhj>
    4b2c:	08 2f       	mov	r16, r24
    4b2e:	69 e2       	ldi	r22, 0x29	; 41
    4b30:	70 e0       	ldi	r23, 0x00	; 0
    4b32:	89 2d       	mov	r24, r9
    4b34:	87 dc       	rcall	.-1778   	; 0x4444 <_ZN10W5500Class6readSnEhj>
    4b36:	10 e0       	ldi	r17, 0x00	; 0
    4b38:	10 2f       	mov	r17, r16
    4b3a:	00 27       	eor	r16, r16
    4b3c:	e8 01       	movw	r28, r16
    4b3e:	c8 0f       	add	r28, r24
    4b40:	d1 1d       	adc	r29, r1
    4b42:	87 01       	movw	r16, r14
    4b44:	95 01       	movw	r18, r10
    4b46:	ae 01       	movw	r20, r28
    4b48:	69 2d       	mov	r22, r9
    4b4a:	c6 01       	movw	r24, r12
    4b4c:	c2 df       	rcall	.-124    	; 0x4ad2 <_ZN10W5500Class9read_dataEhjPVhj>
    4b4e:	81 10       	cpse	r8, r1
    4b50:	18 c0       	rjmp	.+48     	; 0x4b82 <_ZN10W5500Class20recv_data_processingEhPhjh+0x80>
    4b52:	0c 0f       	add	r16, r28
    4b54:	1d 1f       	adc	r17, r29
    4b56:	41 2f       	mov	r20, r17
    4b58:	68 e2       	ldi	r22, 0x28	; 40
    4b5a:	70 e0       	ldi	r23, 0x00	; 0
    4b5c:	89 2d       	mov	r24, r9
    4b5e:	7d dc       	rcall	.-1798   	; 0x445a <_ZN10W5500Class7writeSnEhjh>
    4b60:	40 2f       	mov	r20, r16
    4b62:	69 e2       	ldi	r22, 0x29	; 41
    4b64:	70 e0       	ldi	r23, 0x00	; 0
    4b66:	89 2d       	mov	r24, r9
    4b68:	df 91       	pop	r29
    4b6a:	cf 91       	pop	r28
    4b6c:	1f 91       	pop	r17
    4b6e:	0f 91       	pop	r16
    4b70:	ff 90       	pop	r15
    4b72:	ef 90       	pop	r14
    4b74:	df 90       	pop	r13
    4b76:	cf 90       	pop	r12
    4b78:	bf 90       	pop	r11
    4b7a:	af 90       	pop	r10
    4b7c:	9f 90       	pop	r9
    4b7e:	8f 90       	pop	r8
    4b80:	6c cc       	rjmp	.-1832   	; 0x445a <_ZN10W5500Class7writeSnEhjh>
    4b82:	df 91       	pop	r29
    4b84:	cf 91       	pop	r28
    4b86:	1f 91       	pop	r17
    4b88:	0f 91       	pop	r16
    4b8a:	ff 90       	pop	r15
    4b8c:	ef 90       	pop	r14
    4b8e:	df 90       	pop	r13
    4b90:	cf 90       	pop	r12
    4b92:	bf 90       	pop	r11
    4b94:	af 90       	pop	r10
    4b96:	9f 90       	pop	r9
    4b98:	8f 90       	pop	r8
    4b9a:	08 95       	ret

00004b9c <_ZN10W5500Class9execCmdSnEh7SockCMD>:
    4b9c:	cf 93       	push	r28
    4b9e:	c6 2f       	mov	r28, r22
    4ba0:	61 e0       	ldi	r22, 0x01	; 1
    4ba2:	70 e0       	ldi	r23, 0x00	; 0
    4ba4:	8c 2f       	mov	r24, r28
    4ba6:	59 dc       	rcall	.-1870   	; 0x445a <_ZN10W5500Class7writeSnEhjh>
    4ba8:	61 e0       	ldi	r22, 0x01	; 1
    4baa:	70 e0       	ldi	r23, 0x00	; 0
    4bac:	8c 2f       	mov	r24, r28
    4bae:	4a dc       	rcall	.-1900   	; 0x4444 <_ZN10W5500Class6readSnEhj>
    4bb0:	81 11       	cpse	r24, r1
    4bb2:	fa cf       	rjmp	.-12     	; 0x4ba8 <_ZN10W5500Class9execCmdSnEh7SockCMD+0xc>
    4bb4:	cf 91       	pop	r28
    4bb6:	08 95       	ret

00004bb8 <_GLOBAL__sub_I_w5500>:
    // Invert the SPI2X bit
    clockDiv ^= 0x1;

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    4bb8:	e1 e3       	ldi	r30, 0x31	; 49
    4bba:	fa e0       	ldi	r31, 0x0A	; 10
    4bbc:	80 e5       	ldi	r24, 0x50	; 80
    4bbe:	80 83       	st	Z, r24
    spsr = clockDiv & SPI_2XCLOCK_MASK;
    4bc0:	81 e0       	ldi	r24, 0x01	; 1
    4bc2:	81 83       	std	Z+1, r24	; 0x01
    4bc4:	08 95       	ret

00004bc6 <_ZN5I2CIOC1Ev>:
      // Remove the values which are not inputs and get the value of the pin
      pinVal = this->read() & _dirMask;
      pinVal = ( pinVal >> pin ) & 0x01; // Get the pin value
   }
   return (pinVal);
}
    4bc6:	fc 01       	movw	r30, r24
    4bc8:	12 82       	std	Z+2, r1	; 0x02
    4bca:	8f ef       	ldi	r24, 0xFF	; 255
    4bcc:	81 83       	std	Z+1, r24	; 0x01
    4bce:	10 82       	st	Z, r1
    4bd0:	13 82       	std	Z+3, r1	; 0x03
    4bd2:	08 95       	ret

00004bd4 <_ZN5I2CIO8portModeEh>:
    4bd4:	fc 01       	movw	r30, r24
    4bd6:	83 81       	ldd	r24, Z+3	; 0x03
    4bd8:	88 23       	and	r24, r24
    4bda:	31 f0       	breq	.+12     	; 0x4be8 <_ZN5I2CIO8portModeEh+0x14>
    4bdc:	61 11       	cpse	r22, r1
    4bde:	03 c0       	rjmp	.+6      	; 0x4be6 <_ZN5I2CIO8portModeEh+0x12>
    4be0:	8f ef       	ldi	r24, 0xFF	; 255
    4be2:	81 83       	std	Z+1, r24	; 0x01
    4be4:	08 95       	ret
    4be6:	11 82       	std	Z+1, r1	; 0x01
    4be8:	08 95       	ret

00004bea <_ZN5I2CIO11isAvailableEh>:
    4bea:	86 ea       	ldi	r24, 0xA6	; 166
    4bec:	9a e0       	ldi	r25, 0x0A	; 10
    4bee:	f0 d5       	rcall	.+3040   	; 0x57d0 <_ZN7TwoWire17beginTransmissionEh>
    4bf0:	86 ea       	ldi	r24, 0xA6	; 166
    4bf2:	9a e0       	ldi	r25, 0x0A	; 10
    4bf4:	6e d6       	rcall	.+3292   	; 0x58d2 <_ZN7TwoWire15endTransmissionEv>
    4bf6:	91 e0       	ldi	r25, 0x01	; 1
    4bf8:	81 11       	cpse	r24, r1
    4bfa:	90 e0       	ldi	r25, 0x00	; 0
    4bfc:	89 2f       	mov	r24, r25
    4bfe:	08 95       	ret

00004c00 <_ZN5I2CIO5beginEh>:
    4c00:	cf 93       	push	r28
    4c02:	df 93       	push	r29
    4c04:	ec 01       	movw	r28, r24
    4c06:	6a 83       	std	Y+2, r22	; 0x02
    4c08:	86 ea       	ldi	r24, 0xA6	; 166
    4c0a:	9a e0       	ldi	r25, 0x0A	; 10
    4c0c:	ce d5       	rcall	.+2972   	; 0x57aa <_ZN7TwoWire5beginEv>
    4c0e:	6a 81       	ldd	r22, Y+2	; 0x02
    4c10:	ce 01       	movw	r24, r28
    4c12:	eb df       	rcall	.-42     	; 0x4bea <_ZN5I2CIO11isAvailableEh>
    4c14:	8b 83       	std	Y+3, r24	; 0x03
    4c16:	88 23       	and	r24, r24
    4c18:	21 f0       	breq	.+8      	; 0x4c22 <_ZN5I2CIO5beginEh+0x22>
    4c1a:	86 ea       	ldi	r24, 0xA6	; 166
    4c1c:	9a e0       	ldi	r25, 0x0A	; 10
    4c1e:	01 d5       	rcall	.+2562   	; 0x5622 <_ZN7TwoWire4readEv>
    4c20:	88 83       	st	Y, r24
    4c22:	8b 81       	ldd	r24, Y+3	; 0x03
    4c24:	90 e0       	ldi	r25, 0x00	; 0
    4c26:	df 91       	pop	r29
    4c28:	cf 91       	pop	r28
    4c2a:	08 95       	ret

00004c2c <_ZN5I2CIO5writeEh>:
}

//
// write
int I2CIO::write ( uint8_t value )
{
    4c2c:	cf 93       	push	r28
    4c2e:	df 93       	push	r29
   int status = 0;
   
   if ( _initialised )
    4c30:	fc 01       	movw	r30, r24
    4c32:	23 81       	ldd	r18, Z+3	; 0x03
    4c34:	22 23       	and	r18, r18
    4c36:	99 f0       	breq	.+38     	; 0x4c5e <_ZN5I2CIO5writeEh+0x32>
    4c38:	ec 01       	movw	r28, r24
   {
      // Only write HIGH the values of the ports that have been initialised as
      // outputs updating the output shadow of the device
      _shadow = ( value & ~(_dirMask) );
    4c3a:	81 81       	ldd	r24, Z+1	; 0x01
    4c3c:	80 95       	com	r24
    4c3e:	68 23       	and	r22, r24
    4c40:	60 83       	st	Z, r22
   
      Wire.beginTransmission ( _i2cAddr );
    4c42:	62 81       	ldd	r22, Z+2	; 0x02
    4c44:	86 ea       	ldi	r24, 0xA6	; 166
    4c46:	9a e0       	ldi	r25, 0x0A	; 10
    4c48:	c3 d5       	rcall	.+2950   	; 0x57d0 <_ZN7TwoWire17beginTransmissionEh>
#if (ARDUINO <  100)
      Wire.send ( _shadow );
#else
      Wire.write ( _shadow );
    4c4a:	68 81       	ld	r22, Y
    4c4c:	86 ea       	ldi	r24, 0xA6	; 166
    4c4e:	9a e0       	ldi	r25, 0x0A	; 10
    4c50:	6e d5       	rcall	.+2780   	; 0x572e <_ZN7TwoWire5writeEh>
#endif  
      status = Wire.endTransmission ();
    4c52:	86 ea       	ldi	r24, 0xA6	; 166
    4c54:	9a e0       	ldi	r25, 0x0A	; 10
    4c56:	3d d6       	rcall	.+3194   	; 0x58d2 <_ZN7TwoWire15endTransmissionEv>
    4c58:	28 2f       	mov	r18, r24
    4c5a:	30 e0       	ldi	r19, 0x00	; 0
    4c5c:	02 c0       	rjmp	.+4      	; 0x4c62 <_ZN5I2CIO5writeEh+0x36>

//
// write
int I2CIO::write ( uint8_t value )
{
   int status = 0;
    4c5e:	20 e0       	ldi	r18, 0x00	; 0
    4c60:	30 e0       	ldi	r19, 0x00	; 0
#else
      Wire.write ( _shadow );
#endif  
      status = Wire.endTransmission ();
   }
   return ( (status == 0) );
    4c62:	81 e0       	ldi	r24, 0x01	; 1
    4c64:	90 e0       	ldi	r25, 0x00	; 0
    4c66:	23 2b       	or	r18, r19
    4c68:	11 f0       	breq	.+4      	; 0x4c6e <_ZN5I2CIO5writeEh+0x42>
    4c6a:	80 e0       	ldi	r24, 0x00	; 0
    4c6c:	90 e0       	ldi	r25, 0x00	; 0
}
    4c6e:	df 91       	pop	r29
    4c70:	cf 91       	pop	r28
    4c72:	08 95       	ret

00004c74 <_ZN3LCD15setBacklightPinEh13t_backlighPol>:

// This will 'left justify' text from the cursor
void LCD::noAutoscroll(void) 
{
   _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
   command(LCD_ENTRYMODESET | _displaymode);
    4c74:	08 95       	ret

00004c76 <_ZN3LCD12setBacklightEh>:
    4c76:	08 95       	ret

00004c78 <_ZN3LCD5writeEh>:
    4c78:	dc 01       	movw	r26, r24
    4c7a:	ed 91       	ld	r30, X+
    4c7c:	fc 91       	ld	r31, X
    4c7e:	06 84       	ldd	r0, Z+14	; 0x0e
    4c80:	f7 85       	ldd	r31, Z+15	; 0x0f
    4c82:	e0 2d       	mov	r30, r0
    4c84:	41 e0       	ldi	r20, 0x01	; 1
    4c86:	09 95       	icall
    4c88:	81 e0       	ldi	r24, 0x01	; 1
    4c8a:	90 e0       	ldi	r25, 0x00	; 0
    4c8c:	08 95       	ret

00004c8e <_ZN3LCDC1Ev>:
    4c8e:	fc 01       	movw	r30, r24
    4c90:	13 82       	std	Z+3, r1	; 0x03
    4c92:	12 82       	std	Z+2, r1	; 0x02
    4c94:	24 e4       	ldi	r18, 0x44	; 68
    4c96:	38 e0       	ldi	r19, 0x08	; 8
    4c98:	31 83       	std	Z+1, r19	; 0x01
    4c9a:	20 83       	st	Z, r18
    4c9c:	08 95       	ret

00004c9e <_ZN3LCD9backlightEv>:
    4c9e:	dc 01       	movw	r26, r24
    4ca0:	ed 91       	ld	r30, X+
    4ca2:	fc 91       	ld	r31, X
    4ca4:	04 84       	ldd	r0, Z+12	; 0x0c
    4ca6:	f5 85       	ldd	r31, Z+13	; 0x0d
    4ca8:	e0 2d       	mov	r30, r0
    4caa:	6f ef       	ldi	r22, 0xFF	; 255
    4cac:	09 94       	ijmp

00004cae <_ZN3LCD11noBacklightEv>:
    4cae:	dc 01       	movw	r26, r24
    4cb0:	ed 91       	ld	r30, X+
    4cb2:	fc 91       	ld	r31, X
    4cb4:	04 84       	ldd	r0, Z+12	; 0x0c
    4cb6:	f5 85       	ldd	r31, Z+13	; 0x0d
    4cb8:	e0 2d       	mov	r30, r0
    4cba:	60 e0       	ldi	r22, 0x00	; 0
    4cbc:	09 94       	ijmp

00004cbe <_ZN3LCD7commandEh>:
    4cbe:	dc 01       	movw	r26, r24
    4cc0:	ed 91       	ld	r30, X+
    4cc2:	fc 91       	ld	r31, X
    4cc4:	06 84       	ldd	r0, Z+14	; 0x0e
    4cc6:	f7 85       	ldd	r31, Z+15	; 0x0f
    4cc8:	e0 2d       	mov	r30, r0
    4cca:	40 e0       	ldi	r20, 0x00	; 0
    4ccc:	09 94       	ijmp

00004cce <_ZN3LCD5clearEv>:
    4cce:	61 e0       	ldi	r22, 0x01	; 1
    4cd0:	f6 df       	rcall	.-20     	; 0x4cbe <_ZN3LCD7commandEh>
    4cd2:	80 ed       	ldi	r24, 0xD0	; 208
    4cd4:	97 e0       	ldi	r25, 0x07	; 7
    4cd6:	0c 94 4f 30 	jmp	0x609e	; 0x609e <delayMicroseconds>

00004cda <_ZN3LCD9setCursorEhh>:
    4cda:	cf 93       	push	r28
    4cdc:	df 93       	push	r29
    4cde:	cd b7       	in	r28, 0x3d	; 61
    4ce0:	de b7       	in	r29, 0x3e	; 62
    4ce2:	28 97       	sbiw	r28, 0x08	; 8
    4ce4:	0f b6       	in	r0, 0x3f	; 63
    4ce6:	f8 94       	cli
    4ce8:	de bf       	out	0x3e, r29	; 62
    4cea:	0f be       	out	0x3f, r0	; 63
    4cec:	cd bf       	out	0x3d, r28	; 61
    4cee:	fc 01       	movw	r30, r24
    4cf0:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <_ZN14EthernetClient8_srcportE+0x8>
    4cf4:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <_ZN14EthernetClient8_srcportE+0x9>
    4cf8:	a0 91 7b 01 	lds	r26, 0x017B	; 0x80017b <_ZN14EthernetClient8_srcportE+0xa>
    4cfc:	b0 91 7c 01 	lds	r27, 0x017C	; 0x80017c <_ZN14EthernetClient8_srcportE+0xb>
    4d00:	8d 83       	std	Y+5, r24	; 0x05
    4d02:	9e 83       	std	Y+6, r25	; 0x06
    4d04:	af 83       	std	Y+7, r26	; 0x07
    4d06:	b8 87       	std	Y+8, r27	; 0x08
    4d08:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <_ZN14EthernetClient8_srcportE+0xc>
    4d0c:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <_ZN14EthernetClient8_srcportE+0xd>
    4d10:	a0 91 7f 01 	lds	r26, 0x017F	; 0x80017f <_ZN14EthernetClient8_srcportE+0xe>
    4d14:	b0 91 80 01 	lds	r27, 0x0180	; 0x800180 <_ZN14EthernetClient8_srcportE+0xf>
    4d18:	89 83       	std	Y+1, r24	; 0x01
    4d1a:	9a 83       	std	Y+2, r25	; 0x02
    4d1c:	ab 83       	std	Y+3, r26	; 0x03
    4d1e:	bc 83       	std	Y+4, r27	; 0x04
    4d20:	87 81       	ldd	r24, Z+7	; 0x07
    4d22:	48 17       	cp	r20, r24
    4d24:	10 f0       	brcs	.+4      	; 0x4d2a <_ZN3LCD9setCursorEhh+0x50>
    4d26:	4f ef       	ldi	r20, 0xFF	; 255
    4d28:	48 0f       	add	r20, r24
    4d2a:	90 85       	ldd	r25, Z+8	; 0x08
    4d2c:	50 e0       	ldi	r21, 0x00	; 0
    4d2e:	de 01       	movw	r26, r28
    4d30:	a4 0f       	add	r26, r20
    4d32:	b5 1f       	adc	r27, r21
    4d34:	90 31       	cpi	r25, 0x10	; 16
    4d36:	29 f4       	brne	.+10     	; 0x4d42 <_ZN3LCD9setCursorEhh+0x68>
    4d38:	84 30       	cpi	r24, 0x04	; 4
    4d3a:	19 f4       	brne	.+6      	; 0x4d42 <_ZN3LCD9setCursorEhh+0x68>
    4d3c:	11 96       	adiw	r26, 0x01	; 1
    4d3e:	9c 91       	ld	r25, X
    4d40:	02 c0       	rjmp	.+4      	; 0x4d46 <_ZN3LCD9setCursorEhh+0x6c>
    4d42:	15 96       	adiw	r26, 0x05	; 5
    4d44:	9c 91       	ld	r25, X
    4d46:	69 0f       	add	r22, r25
    4d48:	60 68       	ori	r22, 0x80	; 128
    4d4a:	cf 01       	movw	r24, r30
    4d4c:	28 96       	adiw	r28, 0x08	; 8
    4d4e:	0f b6       	in	r0, 0x3f	; 63
    4d50:	f8 94       	cli
    4d52:	de bf       	out	0x3e, r29	; 62
    4d54:	0f be       	out	0x3f, r0	; 63
    4d56:	cd bf       	out	0x3d, r28	; 61
    4d58:	df 91       	pop	r29
    4d5a:	cf 91       	pop	r28
    4d5c:	b0 cf       	rjmp	.-160    	; 0x4cbe <_ZN3LCD7commandEh>

00004d5e <_ZN3LCD9noDisplayEv>:
    4d5e:	fc 01       	movw	r30, r24
    4d60:	65 81       	ldd	r22, Z+5	; 0x05
    4d62:	6b 7f       	andi	r22, 0xFB	; 251
    4d64:	65 83       	std	Z+5, r22	; 0x05
    4d66:	68 60       	ori	r22, 0x08	; 8
    4d68:	aa cf       	rjmp	.-172    	; 0x4cbe <_ZN3LCD7commandEh>

00004d6a <_ZN3LCD7displayEv>:
    4d6a:	fc 01       	movw	r30, r24
    4d6c:	65 81       	ldd	r22, Z+5	; 0x05
    4d6e:	26 2f       	mov	r18, r22
    4d70:	24 60       	ori	r18, 0x04	; 4
    4d72:	25 83       	std	Z+5, r18	; 0x05
    4d74:	6c 60       	ori	r22, 0x0C	; 12
    4d76:	a3 cf       	rjmp	.-186    	; 0x4cbe <_ZN3LCD7commandEh>

00004d78 <_ZN3LCD5beginEhhh>:
    4d78:	cf 93       	push	r28
    4d7a:	df 93       	push	r29
    4d7c:	ec 01       	movw	r28, r24
    4d7e:	42 30       	cpi	r20, 0x02	; 2
    4d80:	18 f0       	brcs	.+6      	; 0x4d88 <_ZN3LCD5beginEhhh+0x10>
    4d82:	8c 81       	ldd	r24, Y+4	; 0x04
    4d84:	88 60       	ori	r24, 0x08	; 8
    4d86:	8c 83       	std	Y+4, r24	; 0x04
    4d88:	4f 83       	std	Y+7, r20	; 0x07
    4d8a:	68 87       	std	Y+8, r22	; 0x08
    4d8c:	22 23       	and	r18, r18
    4d8e:	29 f0       	breq	.+10     	; 0x4d9a <_ZN3LCD5beginEhhh+0x22>
    4d90:	41 30       	cpi	r20, 0x01	; 1
    4d92:	19 f4       	brne	.+6      	; 0x4d9a <_ZN3LCD5beginEhhh+0x22>
    4d94:	8c 81       	ldd	r24, Y+4	; 0x04
    4d96:	84 60       	ori	r24, 0x04	; 4
    4d98:	8c 83       	std	Y+4, r24	; 0x04
    4d9a:	64 e6       	ldi	r22, 0x64	; 100
    4d9c:	70 e0       	ldi	r23, 0x00	; 0
    4d9e:	80 e0       	ldi	r24, 0x00	; 0
    4da0:	90 e0       	ldi	r25, 0x00	; 0
    4da2:	0e 94 16 30 	call	0x602c	; 0x602c <delay>
    4da6:	6c 81       	ldd	r22, Y+4	; 0x04
    4da8:	64 fd       	sbrc	r22, 4
    4daa:	31 c0       	rjmp	.+98     	; 0x4e0e <_ZN3LCD5beginEhhh+0x96>
    4dac:	e8 81       	ld	r30, Y
    4dae:	f9 81       	ldd	r31, Y+1	; 0x01
    4db0:	06 84       	ldd	r0, Z+14	; 0x0e
    4db2:	f7 85       	ldd	r31, Z+15	; 0x0f
    4db4:	e0 2d       	mov	r30, r0
    4db6:	42 e0       	ldi	r20, 0x02	; 2
    4db8:	63 e0       	ldi	r22, 0x03	; 3
    4dba:	ce 01       	movw	r24, r28
    4dbc:	09 95       	icall
    4dbe:	84 e9       	ldi	r24, 0x94	; 148
    4dc0:	91 e1       	ldi	r25, 0x11	; 17
    4dc2:	0e 94 4f 30 	call	0x609e	; 0x609e <delayMicroseconds>
    4dc6:	e8 81       	ld	r30, Y
    4dc8:	f9 81       	ldd	r31, Y+1	; 0x01
    4dca:	06 84       	ldd	r0, Z+14	; 0x0e
    4dcc:	f7 85       	ldd	r31, Z+15	; 0x0f
    4dce:	e0 2d       	mov	r30, r0
    4dd0:	42 e0       	ldi	r20, 0x02	; 2
    4dd2:	63 e0       	ldi	r22, 0x03	; 3
    4dd4:	ce 01       	movw	r24, r28
    4dd6:	09 95       	icall
    4dd8:	86 e9       	ldi	r24, 0x96	; 150
    4dda:	90 e0       	ldi	r25, 0x00	; 0
    4ddc:	0e 94 4f 30 	call	0x609e	; 0x609e <delayMicroseconds>
    4de0:	e8 81       	ld	r30, Y
    4de2:	f9 81       	ldd	r31, Y+1	; 0x01
    4de4:	06 84       	ldd	r0, Z+14	; 0x0e
    4de6:	f7 85       	ldd	r31, Z+15	; 0x0f
    4de8:	e0 2d       	mov	r30, r0
    4dea:	42 e0       	ldi	r20, 0x02	; 2
    4dec:	63 e0       	ldi	r22, 0x03	; 3
    4dee:	ce 01       	movw	r24, r28
    4df0:	09 95       	icall
    4df2:	86 e9       	ldi	r24, 0x96	; 150
    4df4:	90 e0       	ldi	r25, 0x00	; 0
    4df6:	0e 94 4f 30 	call	0x609e	; 0x609e <delayMicroseconds>
    4dfa:	e8 81       	ld	r30, Y
    4dfc:	f9 81       	ldd	r31, Y+1	; 0x01
    4dfe:	06 84       	ldd	r0, Z+14	; 0x0e
    4e00:	f7 85       	ldd	r31, Z+15	; 0x0f
    4e02:	e0 2d       	mov	r30, r0
    4e04:	42 e0       	ldi	r20, 0x02	; 2
    4e06:	62 e0       	ldi	r22, 0x02	; 2
    4e08:	ce 01       	movw	r24, r28
    4e0a:	09 95       	icall
    4e0c:	13 c0       	rjmp	.+38     	; 0x4e34 <_ZN3LCD5beginEhhh+0xbc>
    4e0e:	60 62       	ori	r22, 0x20	; 32
    4e10:	ce 01       	movw	r24, r28
    4e12:	55 df       	rcall	.-342    	; 0x4cbe <_ZN3LCD7commandEh>
    4e14:	84 e9       	ldi	r24, 0x94	; 148
    4e16:	91 e1       	ldi	r25, 0x11	; 17
    4e18:	0e 94 4f 30 	call	0x609e	; 0x609e <delayMicroseconds>
    4e1c:	6c 81       	ldd	r22, Y+4	; 0x04
    4e1e:	60 62       	ori	r22, 0x20	; 32
    4e20:	ce 01       	movw	r24, r28
    4e22:	4d df       	rcall	.-358    	; 0x4cbe <_ZN3LCD7commandEh>
    4e24:	86 e9       	ldi	r24, 0x96	; 150
    4e26:	90 e0       	ldi	r25, 0x00	; 0
    4e28:	0e 94 4f 30 	call	0x609e	; 0x609e <delayMicroseconds>
    4e2c:	6c 81       	ldd	r22, Y+4	; 0x04
    4e2e:	60 62       	ori	r22, 0x20	; 32
    4e30:	ce 01       	movw	r24, r28
    4e32:	45 df       	rcall	.-374    	; 0x4cbe <_ZN3LCD7commandEh>
    4e34:	86 e9       	ldi	r24, 0x96	; 150
    4e36:	90 e0       	ldi	r25, 0x00	; 0
    4e38:	0e 94 4f 30 	call	0x609e	; 0x609e <delayMicroseconds>
    4e3c:	6c 81       	ldd	r22, Y+4	; 0x04
    4e3e:	60 62       	ori	r22, 0x20	; 32
    4e40:	ce 01       	movw	r24, r28
    4e42:	3d df       	rcall	.-390    	; 0x4cbe <_ZN3LCD7commandEh>
    4e44:	8c e3       	ldi	r24, 0x3C	; 60
    4e46:	90 e0       	ldi	r25, 0x00	; 0
    4e48:	0e 94 4f 30 	call	0x609e	; 0x609e <delayMicroseconds>
    4e4c:	84 e0       	ldi	r24, 0x04	; 4
    4e4e:	8d 83       	std	Y+5, r24	; 0x05
    4e50:	ce 01       	movw	r24, r28
    4e52:	8b df       	rcall	.-234    	; 0x4d6a <_ZN3LCD7displayEv>
    4e54:	ce 01       	movw	r24, r28
    4e56:	3b df       	rcall	.-394    	; 0x4cce <_ZN3LCD5clearEv>
    4e58:	82 e0       	ldi	r24, 0x02	; 2
    4e5a:	8e 83       	std	Y+6, r24	; 0x06
    4e5c:	66 e0       	ldi	r22, 0x06	; 6
    4e5e:	ce 01       	movw	r24, r28
    4e60:	2e df       	rcall	.-420    	; 0x4cbe <_ZN3LCD7commandEh>
    4e62:	ce 01       	movw	r24, r28
    4e64:	df 91       	pop	r29
    4e66:	cf 91       	pop	r28
    4e68:	1a cf       	rjmp	.-460    	; 0x4c9e <_ZN3LCD9backlightEv>

00004e6a <_ZN3LCD10createCharEhPh>:
}

// Write to CGRAM of new characters
void LCD::createChar(uint8_t location, uint8_t charmap[]) 
{
    4e6a:	ef 92       	push	r14
    4e6c:	ff 92       	push	r15
    4e6e:	0f 93       	push	r16
    4e70:	1f 93       	push	r17
    4e72:	cf 93       	push	r28
    4e74:	df 93       	push	r29
    4e76:	8c 01       	movw	r16, r24
    4e78:	7a 01       	movw	r14, r20
   location &= 0x7;            // we only have 8 locations 0-7
   
   command(LCD_SETCGRAMADDR | (location << 3));
    4e7a:	67 70       	andi	r22, 0x07	; 7
    4e7c:	88 e0       	ldi	r24, 0x08	; 8
    4e7e:	68 9f       	mul	r22, r24
    4e80:	b0 01       	movw	r22, r0
    4e82:	11 24       	eor	r1, r1
    4e84:	60 64       	ori	r22, 0x40	; 64
    4e86:	c8 01       	movw	r24, r16
    4e88:	1a df       	rcall	.-460    	; 0x4cbe <_ZN3LCD7commandEh>
   delayMicroseconds(30);
    4e8a:	8e e1       	ldi	r24, 0x1E	; 30
    4e8c:	90 e0       	ldi	r25, 0x00	; 0
    4e8e:	0e 94 4f 30 	call	0x609e	; 0x609e <delayMicroseconds>
    4e92:	e7 01       	movw	r28, r14
    4e94:	a8 e0       	ldi	r26, 0x08	; 8
    4e96:	ea 0e       	add	r14, r26
    4e98:	f1 1c       	adc	r15, r1
   
   for (uint8_t i = 0; i < 8; i++)
   {
      write(charmap[i]);      // call the virtual write method
    4e9a:	69 91       	ld	r22, Y+
    4e9c:	d8 01       	movw	r26, r16
    4e9e:	ed 91       	ld	r30, X+
    4ea0:	fc 91       	ld	r31, X
    4ea2:	01 90       	ld	r0, Z+
    4ea4:	f0 81       	ld	r31, Z
    4ea6:	e0 2d       	mov	r30, r0
    4ea8:	c8 01       	movw	r24, r16
    4eaa:	09 95       	icall
      delayMicroseconds(40);
    4eac:	88 e2       	ldi	r24, 0x28	; 40
    4eae:	90 e0       	ldi	r25, 0x00	; 0
    4eb0:	0e 94 4f 30 	call	0x609e	; 0x609e <delayMicroseconds>
   location &= 0x7;            // we only have 8 locations 0-7
   
   command(LCD_SETCGRAMADDR | (location << 3));
   delayMicroseconds(30);
   
   for (uint8_t i = 0; i < 8; i++)
    4eb4:	ce 15       	cp	r28, r14
    4eb6:	df 05       	cpc	r29, r15
    4eb8:	81 f7       	brne	.-32     	; 0x4e9a <_ZN3LCD10createCharEhPh+0x30>
   {
      write(charmap[i]);      // call the virtual write method
      delayMicroseconds(40);
   }
}
    4eba:	df 91       	pop	r29
    4ebc:	cf 91       	pop	r28
    4ebe:	1f 91       	pop	r17
    4ec0:	0f 91       	pop	r16
    4ec2:	ff 90       	pop	r15
    4ec4:	ef 90       	pop	r14
    4ec6:	08 95       	ret

00004ec8 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol>:
LiquidCrystal_I2C::LiquidCrystal_I2C(uint8_t lcd_Addr, uint8_t En, uint8_t Rw,
                                     uint8_t Rs, uint8_t d4, uint8_t d5,
                                     uint8_t d6, uint8_t d7 )
{
   config(lcd_Addr, En, Rw, Rs, d4, d5, d6, d7);
}
    4ec8:	21 e0       	ldi	r18, 0x01	; 1
    4eca:	01 c0       	rjmp	.+2      	; 0x4ece <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol+0x6>
    4ecc:	22 0f       	add	r18, r18
    4ece:	6a 95       	dec	r22
    4ed0:	ea f7       	brpl	.-6      	; 0x4ecc <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol+0x4>
    4ed2:	dc 01       	movw	r26, r24
    4ed4:	1b 96       	adiw	r26, 0x0b	; 11
    4ed6:	2c 93       	st	X, r18
    4ed8:	1b 97       	sbiw	r26, 0x0b	; 11
    4eda:	19 96       	adiw	r26, 0x09	; 9
    4edc:	4c 93       	st	X, r20
    4ede:	19 97       	sbiw	r26, 0x09	; 9
    4ee0:	ed 91       	ld	r30, X+
    4ee2:	fc 91       	ld	r31, X
    4ee4:	04 84       	ldd	r0, Z+12	; 0x0c
    4ee6:	f5 85       	ldd	r31, Z+13	; 0x0d
    4ee8:	e0 2d       	mov	r30, r0
    4eea:	60 e0       	ldi	r22, 0x00	; 0
    4eec:	09 94       	ijmp

00004eee <_ZN17LiquidCrystal_I2C12setBacklightEh>:
    4eee:	fc 01       	movw	r30, r24
    4ef0:	83 85       	ldd	r24, Z+11	; 0x0b
    4ef2:	88 23       	and	r24, r24
    4ef4:	89 f0       	breq	.+34     	; 0x4f18 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x2a>
    4ef6:	91 85       	ldd	r25, Z+9	; 0x09
    4ef8:	91 11       	cpse	r25, r1
    4efa:	03 c0       	rjmp	.+6      	; 0x4f02 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x14>
    4efc:	61 11       	cpse	r22, r1
    4efe:	05 c0       	rjmp	.+10     	; 0x4f0a <_ZN17LiquidCrystal_I2C12setBacklightEh+0x1c>
    4f00:	06 c0       	rjmp	.+12     	; 0x4f0e <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    4f02:	91 30       	cpi	r25, 0x01	; 1
    4f04:	21 f4       	brne	.+8      	; 0x4f0e <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    4f06:	61 11       	cpse	r22, r1
    4f08:	02 c0       	rjmp	.+4      	; 0x4f0e <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
    4f0a:	84 87       	std	Z+12, r24	; 0x0c
    4f0c:	01 c0       	rjmp	.+2      	; 0x4f10 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x22>
    4f0e:	14 86       	std	Z+12, r1	; 0x0c
    4f10:	64 85       	ldd	r22, Z+12	; 0x0c
    4f12:	cf 01       	movw	r24, r30
    4f14:	0d 96       	adiw	r24, 0x0d	; 13
    4f16:	8a ce       	rjmp	.-748    	; 0x4c2c <_ZN5I2CIO5writeEh>
    4f18:	08 95       	ret

00004f1a <_ZN17LiquidCrystal_I2C4initEv>:
    4f1a:	0f 93       	push	r16
    4f1c:	1f 93       	push	r17
    4f1e:	cf 93       	push	r28
    4f20:	df 93       	push	r29
    4f22:	8c 01       	movw	r16, r24
    4f24:	ec 01       	movw	r28, r24
    4f26:	2d 96       	adiw	r28, 0x0d	; 13
    4f28:	fc 01       	movw	r30, r24
    4f2a:	62 85       	ldd	r22, Z+10	; 0x0a
    4f2c:	ce 01       	movw	r24, r28
    4f2e:	68 de       	rcall	.-816    	; 0x4c00 <_ZN5I2CIO5beginEh>
    4f30:	01 97       	sbiw	r24, 0x01	; 1
    4f32:	59 f4       	brne	.+22     	; 0x4f4a <_ZN17LiquidCrystal_I2C4initEv+0x30>
    4f34:	61 e0       	ldi	r22, 0x01	; 1
    4f36:	ce 01       	movw	r24, r28
    4f38:	4d de       	rcall	.-870    	; 0x4bd4 <_ZN5I2CIO8portModeEh>
    4f3a:	f8 01       	movw	r30, r16
    4f3c:	14 82       	std	Z+4, r1	; 0x04
    4f3e:	60 e0       	ldi	r22, 0x00	; 0
    4f40:	ce 01       	movw	r24, r28
    4f42:	74 de       	rcall	.-792    	; 0x4c2c <_ZN5I2CIO5writeEh>
    4f44:	81 e0       	ldi	r24, 0x01	; 1
    4f46:	90 e0       	ldi	r25, 0x00	; 0
    4f48:	02 c0       	rjmp	.+4      	; 0x4f4e <_ZN17LiquidCrystal_I2C4initEv+0x34>
    4f4a:	80 e0       	ldi	r24, 0x00	; 0
    4f4c:	90 e0       	ldi	r25, 0x00	; 0
    4f4e:	df 91       	pop	r29
    4f50:	cf 91       	pop	r28
    4f52:	1f 91       	pop	r17
    4f54:	0f 91       	pop	r16
    4f56:	08 95       	ret

00004f58 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh>:
    4f58:	8f 92       	push	r8
    4f5a:	af 92       	push	r10
    4f5c:	cf 92       	push	r12
    4f5e:	ef 92       	push	r14
    4f60:	0f 93       	push	r16
    4f62:	cf 93       	push	r28
    4f64:	df 93       	push	r29
    4f66:	cd b7       	in	r28, 0x3d	; 61
    4f68:	de b7       	in	r29, 0x3e	; 62
    4f6a:	fc 01       	movw	r30, r24
    4f6c:	62 87       	std	Z+10, r22	; 0x0a
    4f6e:	13 86       	std	Z+11, r1	; 0x0b
    4f70:	14 86       	std	Z+12, r1	; 0x0c
    4f72:	11 86       	std	Z+9, r1	; 0x09
    4f74:	81 e0       	ldi	r24, 0x01	; 1
    4f76:	98 2f       	mov	r25, r24
    4f78:	01 c0       	rjmp	.+2      	; 0x4f7c <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x24>
    4f7a:	99 0f       	add	r25, r25
    4f7c:	4a 95       	dec	r20
    4f7e:	ea f7       	brpl	.-6      	; 0x4f7a <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x22>
    4f80:	91 8b       	std	Z+17, r25	; 0x11
    4f82:	98 2f       	mov	r25, r24
    4f84:	01 c0       	rjmp	.+2      	; 0x4f88 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x30>
    4f86:	99 0f       	add	r25, r25
    4f88:	2a 95       	dec	r18
    4f8a:	ea f7       	brpl	.-6      	; 0x4f86 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x2e>
    4f8c:	92 8b       	std	Z+18, r25	; 0x12
    4f8e:	98 2f       	mov	r25, r24
    4f90:	01 c0       	rjmp	.+2      	; 0x4f94 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x3c>
    4f92:	99 0f       	add	r25, r25
    4f94:	0a 95       	dec	r16
    4f96:	ea f7       	brpl	.-6      	; 0x4f92 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x3a>
    4f98:	93 8b       	std	Z+19, r25	; 0x13
    4f9a:	98 2f       	mov	r25, r24
    4f9c:	01 c0       	rjmp	.+2      	; 0x4fa0 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x48>
    4f9e:	99 0f       	add	r25, r25
    4fa0:	ea 94       	dec	r14
    4fa2:	ea f7       	brpl	.-6      	; 0x4f9e <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x46>
    4fa4:	94 8b       	std	Z+20, r25	; 0x14
    4fa6:	98 2f       	mov	r25, r24
    4fa8:	01 c0       	rjmp	.+2      	; 0x4fac <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x54>
    4faa:	99 0f       	add	r25, r25
    4fac:	ca 94       	dec	r12
    4fae:	ea f7       	brpl	.-6      	; 0x4faa <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x52>
    4fb0:	95 8b       	std	Z+21, r25	; 0x15
    4fb2:	98 2f       	mov	r25, r24
    4fb4:	01 c0       	rjmp	.+2      	; 0x4fb8 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x60>
    4fb6:	99 0f       	add	r25, r25
    4fb8:	aa 94       	dec	r10
    4fba:	ea f7       	brpl	.-6      	; 0x4fb6 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x5e>
    4fbc:	96 8b       	std	Z+22, r25	; 0x16
    4fbe:	01 c0       	rjmp	.+2      	; 0x4fc2 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x6a>
    4fc0:	88 0f       	add	r24, r24
    4fc2:	8a 94       	dec	r8
    4fc4:	ea f7       	brpl	.-6      	; 0x4fc0 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x68>
    4fc6:	87 8b       	std	Z+23, r24	; 0x17
    4fc8:	df 91       	pop	r29
    4fca:	cf 91       	pop	r28
    4fcc:	0f 91       	pop	r16
    4fce:	ef 90       	pop	r14
    4fd0:	cf 90       	pop	r12
    4fd2:	af 90       	pop	r10
    4fd4:	8f 90       	pop	r8
    4fd6:	08 95       	ret

00004fd8 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhhh13t_backlighPol>:

LiquidCrystal_I2C::LiquidCrystal_I2C(uint8_t lcd_Addr, uint8_t En, uint8_t Rw,
    4fd8:	6f 92       	push	r6
    4fda:	7f 92       	push	r7
    4fdc:	8f 92       	push	r8
    4fde:	9f 92       	push	r9
    4fe0:	af 92       	push	r10
    4fe2:	bf 92       	push	r11
    4fe4:	cf 92       	push	r12
    4fe6:	df 92       	push	r13
    4fe8:	ef 92       	push	r14
    4fea:	ff 92       	push	r15
    4fec:	0f 93       	push	r16
    4fee:	1f 93       	push	r17
    4ff0:	cf 93       	push	r28
    4ff2:	df 93       	push	r29
    4ff4:	cd b7       	in	r28, 0x3d	; 61
    4ff6:	de b7       	in	r29, 0x3e	; 62
    4ff8:	3c 01       	movw	r6, r24
    4ffa:	d6 2e       	mov	r13, r22
    4ffc:	b4 2e       	mov	r11, r20
    4ffe:	92 2e       	mov	r9, r18
    5000:	19 89       	ldd	r17, Y+17	; 0x11
    5002:	fa 88       	ldd	r15, Y+18	; 0x12
                                     uint8_t Rs, uint8_t d4, uint8_t d5,
                                     uint8_t d6, uint8_t d7, uint8_t backlighPin, 
                                     t_backlighPol pol = POSITIVE )
    5004:	44 de       	rcall	.-888    	; 0x4c8e <_ZN3LCDC1Ev>
    5006:	88 e5       	ldi	r24, 0x58	; 88
    5008:	98 e0       	ldi	r25, 0x08	; 8
    500a:	f3 01       	movw	r30, r6
    500c:	91 83       	std	Z+1, r25	; 0x01
    500e:	80 83       	st	Z, r24
    5010:	c3 01       	movw	r24, r6
    5012:	0d 96       	adiw	r24, 0x0d	; 13
    5014:	d8 dd       	rcall	.-1104   	; 0x4bc6 <_ZN5I2CIOC1Ev>
{
   config(lcd_Addr, En, Rw, Rs, d4, d5, d6, d7);
    5016:	29 2d       	mov	r18, r9
    5018:	4b 2d       	mov	r20, r11
    501a:	6d 2d       	mov	r22, r13
    501c:	c3 01       	movw	r24, r6
    501e:	9c df       	rcall	.-200    	; 0x4f58 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh>
   setBacklightPin(backlighPin, pol);
    5020:	4f 2d       	mov	r20, r15
    5022:	61 2f       	mov	r22, r17
    5024:	c3 01       	movw	r24, r6
}
    5026:	df 91       	pop	r29
    5028:	cf 91       	pop	r28
    502a:	1f 91       	pop	r17
    502c:	0f 91       	pop	r16
    502e:	ff 90       	pop	r15
    5030:	ef 90       	pop	r14
    5032:	df 90       	pop	r13
    5034:	cf 90       	pop	r12
    5036:	bf 90       	pop	r11
    5038:	af 90       	pop	r10
    503a:	9f 90       	pop	r9
    503c:	8f 90       	pop	r8
    503e:	7f 90       	pop	r7
                                     uint8_t Rs, uint8_t d4, uint8_t d5,
                                     uint8_t d6, uint8_t d7, uint8_t backlighPin, 
                                     t_backlighPol pol = POSITIVE )
{
   config(lcd_Addr, En, Rw, Rs, d4, d5, d6, d7);
   setBacklightPin(backlighPin, pol);
    5040:	6f 90       	pop	r6
    5042:	42 cf       	rjmp	.-380    	; 0x4ec8 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol>

00005044 <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
}

//
// pulseEnable
void LiquidCrystal_I2C::pulseEnable (uint8_t data)
{
    5044:	ef 92       	push	r14
    5046:	ff 92       	push	r15
    5048:	0f 93       	push	r16
    504a:	1f 93       	push	r17
    504c:	cf 93       	push	r28
    504e:	8c 01       	movw	r16, r24
    5050:	c6 2f       	mov	r28, r22
   _i2cio.write (data | _En);   // En HIGH
    5052:	7c 01       	movw	r14, r24
    5054:	8d e0       	ldi	r24, 0x0D	; 13
    5056:	e8 0e       	add	r14, r24
    5058:	f1 1c       	adc	r15, r1
    505a:	f8 01       	movw	r30, r16
    505c:	61 89       	ldd	r22, Z+17	; 0x11
    505e:	6c 2b       	or	r22, r28
    5060:	c7 01       	movw	r24, r14
    5062:	e4 dd       	rcall	.-1080   	; 0x4c2c <_ZN5I2CIO5writeEh>
   _i2cio.write (data & ~_En);  // En LOW
    5064:	f8 01       	movw	r30, r16
    5066:	61 89       	ldd	r22, Z+17	; 0x11
    5068:	60 95       	com	r22
    506a:	6c 23       	and	r22, r28
    506c:	c7 01       	movw	r24, r14
    506e:	cf 91       	pop	r28
    5070:	1f 91       	pop	r17
    5072:	0f 91       	pop	r16
    5074:	ff 90       	pop	r15
//
// pulseEnable
void LiquidCrystal_I2C::pulseEnable (uint8_t data)
{
   _i2cio.write (data | _En);   // En HIGH
   _i2cio.write (data & ~_En);  // En LOW
    5076:	ef 90       	pop	r14
    5078:	d9 cd       	rjmp	.-1102   	; 0x4c2c <_ZN5I2CIO5writeEh>

0000507a <_ZN17LiquidCrystal_I2C10write4bitsEhh>:
}

//
// write4bits
void LiquidCrystal_I2C::write4bits ( uint8_t value, uint8_t mode ) 
{
    507a:	fc 01       	movw	r30, r24
    507c:	96 2f       	mov	r25, r22
    507e:	df 01       	movw	r26, r30
    5080:	84 e0       	ldi	r24, 0x04	; 4
   uint8_t pinMapValue = 0;
    5082:	60 e0       	ldi	r22, 0x00	; 0
   
   // Map the value to LCD pin mapping
   // --------------------------------
   for ( uint8_t i = 0; i < 4; i++ )
   {
      if ( ( value & 0x1 ) == 1 )
    5084:	90 ff       	sbrs	r25, 0
    5086:	04 c0       	rjmp	.+8      	; 0x5090 <_ZN17LiquidCrystal_I2C10write4bitsEhh+0x16>
      {
         pinMapValue |= _data_pins[i];
    5088:	54 96       	adiw	r26, 0x14	; 20
    508a:	2c 91       	ld	r18, X
    508c:	54 97       	sbiw	r26, 0x14	; 20
    508e:	62 2b       	or	r22, r18
      }
      value = ( value >> 1 );
    5090:	96 95       	lsr	r25
    5092:	81 50       	subi	r24, 0x01	; 1
    5094:	11 96       	adiw	r26, 0x01	; 1
{
   uint8_t pinMapValue = 0;
   
   // Map the value to LCD pin mapping
   // --------------------------------
   for ( uint8_t i = 0; i < 4; i++ )
    5096:	81 11       	cpse	r24, r1
    5098:	f5 cf       	rjmp	.-22     	; 0x5084 <_ZN17LiquidCrystal_I2C10write4bitsEhh+0xa>
      value = ( value >> 1 );
   }
   
   // Is it a command or data
   // -----------------------
   if ( mode == DATA )
    509a:	41 30       	cpi	r20, 0x01	; 1
    509c:	09 f4       	brne	.+2      	; 0x50a0 <_ZN17LiquidCrystal_I2C10write4bitsEhh+0x26>
   {
      mode = _Rs;
    509e:	43 89       	ldd	r20, Z+19	; 0x13
    50a0:	94 85       	ldd	r25, Z+12	; 0x0c
    50a2:	69 2b       	or	r22, r25
   }
   
   pinMapValue |= mode | _backlightStsMask;
   pulseEnable ( pinMapValue );
    50a4:	64 2b       	or	r22, r20
    50a6:	cf 01       	movw	r24, r30
    50a8:	cd cf       	rjmp	.-102    	; 0x5044 <_ZN17LiquidCrystal_I2C11pulseEnableEh>

000050aa <_ZN17LiquidCrystal_I2C4sendEhh>:
//----------------------------------------------------------------------------

//
// send - write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) 
{
    50aa:	0f 93       	push	r16
    50ac:	1f 93       	push	r17
    50ae:	cf 93       	push	r28
    50b0:	df 93       	push	r29
    50b2:	06 2f       	mov	r16, r22
    50b4:	0f 70       	andi	r16, 0x0F	; 15
   // No need to use the delay routines since the time taken to write takes
   // longer that what is needed both for toggling and enable pin an to execute
   // the command.
   
   if ( mode == FOUR_BITS )
    50b6:	42 30       	cpi	r20, 0x02	; 2
    50b8:	19 f4       	brne	.+6      	; 0x50c0 <_ZN17LiquidCrystal_I2C4sendEhh+0x16>
   {
      write4bits( (value & 0x0F), COMMAND );
    50ba:	40 e0       	ldi	r20, 0x00	; 0
    50bc:	60 2f       	mov	r22, r16
    50be:	0d c0       	rjmp	.+26     	; 0x50da <_ZN17LiquidCrystal_I2C4sendEhh+0x30>
    50c0:	14 2f       	mov	r17, r20
    50c2:	ec 01       	movw	r28, r24
   }
   else 
   {
      write4bits( (value >> 4), mode );
    50c4:	70 e0       	ldi	r23, 0x00	; 0
    50c6:	84 e0       	ldi	r24, 0x04	; 4
    50c8:	75 95       	asr	r23
    50ca:	67 95       	ror	r22
    50cc:	8a 95       	dec	r24
    50ce:	e1 f7       	brne	.-8      	; 0x50c8 <_ZN17LiquidCrystal_I2C4sendEhh+0x1e>
    50d0:	ce 01       	movw	r24, r28
    50d2:	d3 df       	rcall	.-90     	; 0x507a <_ZN17LiquidCrystal_I2C10write4bitsEhh>
      write4bits( (value & 0x0F), mode);
    50d4:	41 2f       	mov	r20, r17
    50d6:	60 2f       	mov	r22, r16
    50d8:	ce 01       	movw	r24, r28
   }
}
    50da:	df 91       	pop	r29
    50dc:	cf 91       	pop	r28
    50de:	1f 91       	pop	r17
      write4bits( (value & 0x0F), COMMAND );
   }
   else 
   {
      write4bits( (value >> 4), mode );
      write4bits( (value & 0x0F), mode);
    50e0:	0f 91       	pop	r16
    50e2:	cb cf       	rjmp	.-106    	; 0x507a <_ZN17LiquidCrystal_I2C10write4bitsEhh>

000050e4 <_ZN17LiquidCrystal_I2C5beginEhhh>:
// ---------------------------------------------------------------------------

//
// begin
void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) 
{
    50e4:	ff 92       	push	r15
    50e6:	0f 93       	push	r16
    50e8:	1f 93       	push	r17
    50ea:	cf 93       	push	r28
    50ec:	df 93       	push	r29
    50ee:	ec 01       	movw	r28, r24
    50f0:	16 2f       	mov	r17, r22
    50f2:	04 2f       	mov	r16, r20
    50f4:	f2 2e       	mov	r15, r18
   
   init();     // Initialise the I2C expander interface
    50f6:	11 df       	rcall	.-478    	; 0x4f1a <_ZN17LiquidCrystal_I2C4initEv>
   LCD::begin ( cols, lines, dotsize );   
    50f8:	2f 2d       	mov	r18, r15
    50fa:	40 2f       	mov	r20, r16
    50fc:	61 2f       	mov	r22, r17
    50fe:	ce 01       	movw	r24, r28
}
    5100:	df 91       	pop	r29
    5102:	cf 91       	pop	r28
    5104:	1f 91       	pop	r17
    5106:	0f 91       	pop	r16
// begin
void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) 
{
   
   init();     // Initialise the I2C expander interface
   LCD::begin ( cols, lines, dotsize );   
    5108:	ff 90       	pop	r15
    510a:	36 ce       	rjmp	.-916    	; 0x4d78 <_ZN3LCD5beginEhhh>

0000510c <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    510c:	cf 93       	push	r28
  uint8_t sreg = SREG;
    510e:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    5110:	f8 94       	cli
  if (!initialized) {
    5112:	80 91 37 0a 	lds	r24, 0x0A37	; 0x800a37 <_ZN8SPIClass11initializedE>
    5116:	81 11       	cpse	r24, r1
    5118:	27 c0       	rjmp	.+78     	; 0x5168 <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    511a:	ec e7       	ldi	r30, 0x7C	; 124
    511c:	f2 e0       	ldi	r31, 0x02	; 2
    511e:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    5120:	ec e5       	ldi	r30, 0x5C	; 92
    5122:	f2 e0       	ldi	r31, 0x02	; 2
    5124:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    5126:	e8 2f       	mov	r30, r24
    5128:	f0 e0       	ldi	r31, 0x00	; 0
    512a:	ee 0f       	add	r30, r30
    512c:	ff 1f       	adc	r31, r31
    512e:	ea 55       	subi	r30, 0x5A	; 90
    5130:	fd 4f       	sbci	r31, 0xFD	; 253
    5132:	a5 91       	lpm	r26, Z+
    5134:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    5136:	ec 91       	ld	r30, X
    5138:	e9 23       	and	r30, r25
    513a:	21 f4       	brne	.+8      	; 0x5144 <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    513c:	61 e0       	ldi	r22, 0x01	; 1
    513e:	8a e0       	ldi	r24, 0x0A	; 10
    5140:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    5144:	61 e0       	ldi	r22, 0x01	; 1
    5146:	8a e0       	ldi	r24, 0x0A	; 10
    5148:	0e 94 be 30 	call	0x617c	; 0x617c <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    514c:	8c b5       	in	r24, 0x2c	; 44
    514e:	80 61       	ori	r24, 0x10	; 16
    5150:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    5152:	8c b5       	in	r24, 0x2c	; 44
    5154:	80 64       	ori	r24, 0x40	; 64
    5156:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    5158:	61 e0       	ldi	r22, 0x01	; 1
    515a:	8d e0       	ldi	r24, 0x0D	; 13
    515c:	0e 94 be 30 	call	0x617c	; 0x617c <pinMode>
    pinMode(MOSI, OUTPUT);
    5160:	61 e0       	ldi	r22, 0x01	; 1
    5162:	8b e0       	ldi	r24, 0x0B	; 11
    5164:	0e 94 be 30 	call	0x617c	; 0x617c <pinMode>
  }
  initialized++; // reference count
    5168:	80 91 37 0a 	lds	r24, 0x0A37	; 0x800a37 <_ZN8SPIClass11initializedE>
    516c:	8f 5f       	subi	r24, 0xFF	; 255
    516e:	80 93 37 0a 	sts	0x0A37, r24	; 0x800a37 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    5172:	cf bf       	out	0x3f, r28	; 63
}
    5174:	cf 91       	pop	r28
    5176:	08 95       	ret

00005178 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    5178:	10 92 a5 0a 	sts	0x0AA5, r1	; 0x800aa5 <twi_state>
    517c:	81 e0       	ldi	r24, 0x01	; 1
    517e:	80 93 a3 0a 	sts	0x0AA3, r24	; 0x800aa3 <twi_sendStop>
    5182:	10 92 a2 0a 	sts	0x0AA2, r1	; 0x800aa2 <twi_inRepStart>
    5186:	61 e0       	ldi	r22, 0x01	; 1
    5188:	8d e1       	ldi	r24, 0x1D	; 29
    518a:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <digitalWrite>
    518e:	61 e0       	ldi	r22, 0x01	; 1
    5190:	8c e1       	ldi	r24, 0x1C	; 28
    5192:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <digitalWrite>
    5196:	e9 eb       	ldi	r30, 0xB9	; 185
    5198:	f0 e0       	ldi	r31, 0x00	; 0
    519a:	80 81       	ld	r24, Z
    519c:	8e 7f       	andi	r24, 0xFE	; 254
    519e:	80 83       	st	Z, r24
    51a0:	80 81       	ld	r24, Z
    51a2:	8d 7f       	andi	r24, 0xFD	; 253
    51a4:	80 83       	st	Z, r24
    51a6:	88 e4       	ldi	r24, 0x48	; 72
    51a8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    51ac:	85 e4       	ldi	r24, 0x45	; 69
    51ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    51b2:	08 95       	ret

000051b4 <twi_disable>:
    51b4:	ec eb       	ldi	r30, 0xBC	; 188
    51b6:	f0 e0       	ldi	r31, 0x00	; 0
    51b8:	80 81       	ld	r24, Z
    51ba:	8a 7b       	andi	r24, 0xBA	; 186
    51bc:	80 83       	st	Z, r24
    51be:	60 e0       	ldi	r22, 0x00	; 0
    51c0:	8d e1       	ldi	r24, 0x1D	; 29
    51c2:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <digitalWrite>
    51c6:	60 e0       	ldi	r22, 0x00	; 0
    51c8:	8c e1       	ldi	r24, 0x1C	; 28
    51ca:	0c 94 fa 30 	jmp	0x61f4	; 0x61f4 <digitalWrite>

000051ce <twi_setFrequency>:
    51ce:	9b 01       	movw	r18, r22
    51d0:	ac 01       	movw	r20, r24
    51d2:	60 e0       	ldi	r22, 0x00	; 0
    51d4:	74 e2       	ldi	r23, 0x24	; 36
    51d6:	84 ef       	ldi	r24, 0xF4	; 244
    51d8:	90 e0       	ldi	r25, 0x00	; 0
    51da:	0e 94 21 35 	call	0x6a42	; 0x6a42 <__udivmodsi4>
    51de:	da 01       	movw	r26, r20
    51e0:	c9 01       	movw	r24, r18
    51e2:	40 97       	sbiw	r24, 0x10	; 16
    51e4:	a1 09       	sbc	r26, r1
    51e6:	b1 09       	sbc	r27, r1
    51e8:	b6 95       	lsr	r27
    51ea:	a7 95       	ror	r26
    51ec:	97 95       	ror	r25
    51ee:	87 95       	ror	r24
    51f0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    51f4:	08 95       	ret

000051f6 <twi_readFrom>:
    51f6:	41 32       	cpi	r20, 0x21	; 33
    51f8:	08 f0       	brcs	.+2      	; 0x51fc <twi_readFrom+0x6>
    51fa:	43 c0       	rjmp	.+134    	; 0x5282 <twi_readFrom+0x8c>
    51fc:	90 91 a5 0a 	lds	r25, 0x0AA5	; 0x800aa5 <twi_state>
    5200:	91 11       	cpse	r25, r1
    5202:	fc cf       	rjmp	.-8      	; 0x51fc <twi_readFrom+0x6>
    5204:	91 e0       	ldi	r25, 0x01	; 1
    5206:	90 93 a5 0a 	sts	0x0AA5, r25	; 0x800aa5 <twi_state>
    520a:	20 93 a3 0a 	sts	0x0AA3, r18	; 0x800aa3 <twi_sendStop>
    520e:	2f ef       	ldi	r18, 0xFF	; 255
    5210:	20 93 38 0a 	sts	0x0A38, r18	; 0x800a38 <twi_error>
    5214:	10 92 7d 0a 	sts	0x0A7D, r1	; 0x800a7d <twi_masterBufferIndex>
    5218:	24 0f       	add	r18, r20
    521a:	20 93 7c 0a 	sts	0x0A7C, r18	; 0x800a7c <twi_masterBufferLength>
    521e:	90 93 a4 0a 	sts	0x0AA4, r25	; 0x800aa4 <twi_slarw>
    5222:	90 91 a4 0a 	lds	r25, 0x0AA4	; 0x800aa4 <twi_slarw>
    5226:	88 0f       	add	r24, r24
    5228:	89 2b       	or	r24, r25
    522a:	80 93 a4 0a 	sts	0x0AA4, r24	; 0x800aa4 <twi_slarw>
    522e:	80 91 a2 0a 	lds	r24, 0x0AA2	; 0x800aa2 <twi_inRepStart>
    5232:	81 30       	cpi	r24, 0x01	; 1
    5234:	61 f4       	brne	.+24     	; 0x524e <twi_readFrom+0x58>
    5236:	10 92 a2 0a 	sts	0x0AA2, r1	; 0x800aa2 <twi_inRepStart>
    523a:	80 91 a4 0a 	lds	r24, 0x0AA4	; 0x800aa4 <twi_slarw>
    523e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5242:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5246:	83 fd       	sbrc	r24, 3
    5248:	f8 cf       	rjmp	.-16     	; 0x523a <twi_readFrom+0x44>
    524a:	85 ec       	ldi	r24, 0xC5	; 197
    524c:	01 c0       	rjmp	.+2      	; 0x5250 <twi_readFrom+0x5a>
    524e:	85 ee       	ldi	r24, 0xE5	; 229
    5250:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5254:	80 91 a5 0a 	lds	r24, 0x0AA5	; 0x800aa5 <twi_state>
    5258:	81 30       	cpi	r24, 0x01	; 1
    525a:	e1 f3       	breq	.-8      	; 0x5254 <twi_readFrom+0x5e>
    525c:	80 91 7d 0a 	lds	r24, 0x0A7D	; 0x800a7d <twi_masterBufferIndex>
    5260:	84 17       	cp	r24, r20
    5262:	10 f4       	brcc	.+4      	; 0x5268 <twi_readFrom+0x72>
    5264:	40 91 7d 0a 	lds	r20, 0x0A7D	; 0x800a7d <twi_masterBufferIndex>
    5268:	ae e7       	ldi	r26, 0x7E	; 126
    526a:	ba e0       	ldi	r27, 0x0A	; 10
    526c:	96 2f       	mov	r25, r22
    526e:	fb 01       	movw	r30, r22
    5270:	8e 2f       	mov	r24, r30
    5272:	89 1b       	sub	r24, r25
    5274:	84 17       	cp	r24, r20
    5276:	18 f4       	brcc	.+6      	; 0x527e <twi_readFrom+0x88>
    5278:	8d 91       	ld	r24, X+
    527a:	81 93       	st	Z+, r24
    527c:	f9 cf       	rjmp	.-14     	; 0x5270 <twi_readFrom+0x7a>
    527e:	84 2f       	mov	r24, r20
    5280:	08 95       	ret
    5282:	80 e0       	ldi	r24, 0x00	; 0
    5284:	08 95       	ret

00005286 <twi_writeTo>:
    5286:	0f 93       	push	r16
    5288:	41 32       	cpi	r20, 0x21	; 33
    528a:	08 f0       	brcs	.+2      	; 0x528e <twi_writeTo+0x8>
    528c:	4a c0       	rjmp	.+148    	; 0x5322 <twi_writeTo+0x9c>
    528e:	90 91 a5 0a 	lds	r25, 0x0AA5	; 0x800aa5 <twi_state>
    5292:	91 11       	cpse	r25, r1
    5294:	fc cf       	rjmp	.-8      	; 0x528e <twi_writeTo+0x8>
    5296:	32 e0       	ldi	r19, 0x02	; 2
    5298:	30 93 a5 0a 	sts	0x0AA5, r19	; 0x800aa5 <twi_state>
    529c:	00 93 a3 0a 	sts	0x0AA3, r16	; 0x800aa3 <twi_sendStop>
    52a0:	3f ef       	ldi	r19, 0xFF	; 255
    52a2:	30 93 38 0a 	sts	0x0A38, r19	; 0x800a38 <twi_error>
    52a6:	10 92 7d 0a 	sts	0x0A7D, r1	; 0x800a7d <twi_masterBufferIndex>
    52aa:	40 93 7c 0a 	sts	0x0A7C, r20	; 0x800a7c <twi_masterBufferLength>
    52ae:	56 2f       	mov	r21, r22
    52b0:	ae e7       	ldi	r26, 0x7E	; 126
    52b2:	ba e0       	ldi	r27, 0x0A	; 10
    52b4:	fb 01       	movw	r30, r22
    52b6:	3e 2f       	mov	r19, r30
    52b8:	35 1b       	sub	r19, r21
    52ba:	34 17       	cp	r19, r20
    52bc:	18 f4       	brcc	.+6      	; 0x52c4 <twi_writeTo+0x3e>
    52be:	31 91       	ld	r19, Z+
    52c0:	3d 93       	st	X+, r19
    52c2:	f9 cf       	rjmp	.-14     	; 0x52b6 <twi_writeTo+0x30>
    52c4:	10 92 a4 0a 	sts	0x0AA4, r1	; 0x800aa4 <twi_slarw>
    52c8:	30 91 a4 0a 	lds	r19, 0x0AA4	; 0x800aa4 <twi_slarw>
    52cc:	88 0f       	add	r24, r24
    52ce:	83 2b       	or	r24, r19
    52d0:	80 93 a4 0a 	sts	0x0AA4, r24	; 0x800aa4 <twi_slarw>
    52d4:	80 91 a2 0a 	lds	r24, 0x0AA2	; 0x800aa2 <twi_inRepStart>
    52d8:	81 30       	cpi	r24, 0x01	; 1
    52da:	61 f4       	brne	.+24     	; 0x52f4 <twi_writeTo+0x6e>
    52dc:	10 92 a2 0a 	sts	0x0AA2, r1	; 0x800aa2 <twi_inRepStart>
    52e0:	80 91 a4 0a 	lds	r24, 0x0AA4	; 0x800aa4 <twi_slarw>
    52e4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    52e8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    52ec:	83 fd       	sbrc	r24, 3
    52ee:	f8 cf       	rjmp	.-16     	; 0x52e0 <twi_writeTo+0x5a>
    52f0:	85 ec       	ldi	r24, 0xC5	; 197
    52f2:	01 c0       	rjmp	.+2      	; 0x52f6 <twi_writeTo+0x70>
    52f4:	85 ee       	ldi	r24, 0xE5	; 229
    52f6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    52fa:	22 23       	and	r18, r18
    52fc:	21 f0       	breq	.+8      	; 0x5306 <twi_writeTo+0x80>
    52fe:	80 91 a5 0a 	lds	r24, 0x0AA5	; 0x800aa5 <twi_state>
    5302:	82 30       	cpi	r24, 0x02	; 2
    5304:	d1 f3       	breq	.-12     	; 0x52fa <twi_writeTo+0x74>
    5306:	80 91 38 0a 	lds	r24, 0x0A38	; 0x800a38 <twi_error>
    530a:	8f 3f       	cpi	r24, 0xFF	; 255
    530c:	79 f0       	breq	.+30     	; 0x532c <twi_writeTo+0xa6>
    530e:	80 91 38 0a 	lds	r24, 0x0A38	; 0x800a38 <twi_error>
    5312:	80 32       	cpi	r24, 0x20	; 32
    5314:	41 f0       	breq	.+16     	; 0x5326 <twi_writeTo+0xa0>
    5316:	80 91 38 0a 	lds	r24, 0x0A38	; 0x800a38 <twi_error>
    531a:	80 33       	cpi	r24, 0x30	; 48
    531c:	31 f0       	breq	.+12     	; 0x532a <twi_writeTo+0xa4>
    531e:	94 e0       	ldi	r25, 0x04	; 4
    5320:	05 c0       	rjmp	.+10     	; 0x532c <twi_writeTo+0xa6>
    5322:	91 e0       	ldi	r25, 0x01	; 1
    5324:	03 c0       	rjmp	.+6      	; 0x532c <twi_writeTo+0xa6>
    5326:	92 e0       	ldi	r25, 0x02	; 2
    5328:	01 c0       	rjmp	.+2      	; 0x532c <twi_writeTo+0xa6>
    532a:	93 e0       	ldi	r25, 0x03	; 3
    532c:	89 2f       	mov	r24, r25
    532e:	0f 91       	pop	r16
    5330:	08 95       	ret

00005332 <twi_transmit>:
    5332:	40 91 5a 0a 	lds	r20, 0x0A5A	; 0x800a5a <twi_txBufferLength>
    5336:	26 2f       	mov	r18, r22
    5338:	30 e0       	ldi	r19, 0x00	; 0
    533a:	24 0f       	add	r18, r20
    533c:	31 1d       	adc	r19, r1
    533e:	21 32       	cpi	r18, 0x21	; 33
    5340:	31 05       	cpc	r19, r1
    5342:	dc f4       	brge	.+54     	; 0x537a <twi_transmit+0x48>
    5344:	20 91 a5 0a 	lds	r18, 0x0AA5	; 0x800aa5 <twi_state>
    5348:	24 30       	cpi	r18, 0x04	; 4
    534a:	c9 f4       	brne	.+50     	; 0x537e <twi_transmit+0x4c>
    534c:	fc 01       	movw	r30, r24
    534e:	80 e0       	ldi	r24, 0x00	; 0
    5350:	90 e0       	ldi	r25, 0x00	; 0
    5352:	86 17       	cp	r24, r22
    5354:	58 f4       	brcc	.+22     	; 0x536c <twi_transmit+0x3a>
    5356:	30 91 5a 0a 	lds	r19, 0x0A5A	; 0x800a5a <twi_txBufferLength>
    535a:	21 91       	ld	r18, Z+
    535c:	dc 01       	movw	r26, r24
    535e:	a4 5a       	subi	r26, 0xA4	; 164
    5360:	b5 4f       	sbci	r27, 0xF5	; 245
    5362:	a3 0f       	add	r26, r19
    5364:	b1 1d       	adc	r27, r1
    5366:	2c 93       	st	X, r18
    5368:	01 96       	adiw	r24, 0x01	; 1
    536a:	f3 cf       	rjmp	.-26     	; 0x5352 <twi_transmit+0x20>
    536c:	80 91 5a 0a 	lds	r24, 0x0A5A	; 0x800a5a <twi_txBufferLength>
    5370:	68 0f       	add	r22, r24
    5372:	60 93 5a 0a 	sts	0x0A5A, r22	; 0x800a5a <twi_txBufferLength>
    5376:	80 e0       	ldi	r24, 0x00	; 0
    5378:	08 95       	ret
    537a:	81 e0       	ldi	r24, 0x01	; 1
    537c:	08 95       	ret
    537e:	82 e0       	ldi	r24, 0x02	; 2
    5380:	08 95       	ret

00005382 <twi_attachSlaveRxEvent>:
    5382:	90 93 9f 0a 	sts	0x0A9F, r25	; 0x800a9f <twi_onSlaveReceive+0x1>
    5386:	80 93 9e 0a 	sts	0x0A9E, r24	; 0x800a9e <twi_onSlaveReceive>
    538a:	08 95       	ret

0000538c <twi_attachSlaveTxEvent>:
    538c:	90 93 a1 0a 	sts	0x0AA1, r25	; 0x800aa1 <twi_onSlaveTransmit+0x1>
    5390:	80 93 a0 0a 	sts	0x0AA0, r24	; 0x800aa0 <twi_onSlaveTransmit>
    5394:	08 95       	ret

00005396 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    5396:	85 ed       	ldi	r24, 0xD5	; 213
    5398:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    539c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    53a0:	84 fd       	sbrc	r24, 4
    53a2:	fc cf       	rjmp	.-8      	; 0x539c <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    53a4:	10 92 a5 0a 	sts	0x0AA5, r1	; 0x800aa5 <twi_state>
    53a8:	08 95       	ret

000053aa <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    53aa:	85 ec       	ldi	r24, 0xC5	; 197
    53ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    53b0:	10 92 a5 0a 	sts	0x0AA5, r1	; 0x800aa5 <twi_state>
    53b4:	08 95       	ret

000053b6 <__vector_26>:
}

ISR(TWI_vect)
{
    53b6:	1f 92       	push	r1
    53b8:	0f 92       	push	r0
    53ba:	0f b6       	in	r0, 0x3f	; 63
    53bc:	0f 92       	push	r0
    53be:	11 24       	eor	r1, r1
    53c0:	0b b6       	in	r0, 0x3b	; 59
    53c2:	0f 92       	push	r0
    53c4:	2f 93       	push	r18
    53c6:	3f 93       	push	r19
    53c8:	4f 93       	push	r20
    53ca:	5f 93       	push	r21
    53cc:	6f 93       	push	r22
    53ce:	7f 93       	push	r23
    53d0:	8f 93       	push	r24
    53d2:	9f 93       	push	r25
    53d4:	af 93       	push	r26
    53d6:	bf 93       	push	r27
    53d8:	ef 93       	push	r30
    53da:	ff 93       	push	r31
  switch(TW_STATUS){
    53dc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    53e0:	88 7f       	andi	r24, 0xF8	; 248
    53e2:	80 36       	cpi	r24, 0x60	; 96
    53e4:	09 f4       	brne	.+2      	; 0x53e8 <__vector_26+0x32>
    53e6:	9d c0       	rjmp	.+314    	; 0x5522 <__vector_26+0x16c>
    53e8:	70 f5       	brcc	.+92     	; 0x5446 <__vector_26+0x90>
    53ea:	88 32       	cpi	r24, 0x28	; 40
    53ec:	09 f4       	brne	.+2      	; 0x53f0 <__vector_26+0x3a>
    53ee:	5c c0       	rjmp	.+184    	; 0x54a8 <__vector_26+0xf2>
    53f0:	90 f4       	brcc	.+36     	; 0x5416 <__vector_26+0x60>
    53f2:	80 31       	cpi	r24, 0x10	; 16
    53f4:	09 f4       	brne	.+2      	; 0x53f8 <__vector_26+0x42>
    53f6:	55 c0       	rjmp	.+170    	; 0x54a2 <__vector_26+0xec>
    53f8:	38 f4       	brcc	.+14     	; 0x5408 <__vector_26+0x52>
    53fa:	88 23       	and	r24, r24
    53fc:	09 f4       	brne	.+2      	; 0x5400 <__vector_26+0x4a>
    53fe:	f3 c0       	rjmp	.+486    	; 0x55e6 <__vector_26+0x230>
    5400:	88 30       	cpi	r24, 0x08	; 8
    5402:	09 f4       	brne	.+2      	; 0x5406 <__vector_26+0x50>
    5404:	4e c0       	rjmp	.+156    	; 0x54a2 <__vector_26+0xec>
    5406:	f2 c0       	rjmp	.+484    	; 0x55ec <__vector_26+0x236>
    5408:	88 31       	cpi	r24, 0x18	; 24
    540a:	09 f4       	brne	.+2      	; 0x540e <__vector_26+0x58>
    540c:	4d c0       	rjmp	.+154    	; 0x54a8 <__vector_26+0xf2>
    540e:	80 32       	cpi	r24, 0x20	; 32
    5410:	09 f4       	brne	.+2      	; 0x5414 <__vector_26+0x5e>
    5412:	5e c0       	rjmp	.+188    	; 0x54d0 <__vector_26+0x11a>
    5414:	eb c0       	rjmp	.+470    	; 0x55ec <__vector_26+0x236>
    5416:	80 34       	cpi	r24, 0x40	; 64
    5418:	09 f4       	brne	.+2      	; 0x541c <__vector_26+0x66>
    541a:	69 c0       	rjmp	.+210    	; 0x54ee <__vector_26+0x138>
    541c:	50 f4       	brcc	.+20     	; 0x5432 <__vector_26+0x7c>
    541e:	80 33       	cpi	r24, 0x30	; 48
    5420:	09 f4       	brne	.+2      	; 0x5424 <__vector_26+0x6e>
    5422:	56 c0       	rjmp	.+172    	; 0x54d0 <__vector_26+0x11a>
    5424:	88 33       	cpi	r24, 0x38	; 56
    5426:	09 f0       	breq	.+2      	; 0x542a <__vector_26+0x74>
    5428:	e1 c0       	rjmp	.+450    	; 0x55ec <__vector_26+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    542a:	80 93 38 0a 	sts	0x0A38, r24	; 0x800a38 <twi_error>
      twi_releaseBus();
    542e:	bd df       	rcall	.-134    	; 0x53aa <twi_releaseBus>
      break;
    5430:	dd c0       	rjmp	.+442    	; 0x55ec <__vector_26+0x236>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    5432:	80 35       	cpi	r24, 0x50	; 80
    5434:	09 f4       	brne	.+2      	; 0x5438 <__vector_26+0x82>
    5436:	4f c0       	rjmp	.+158    	; 0x54d6 <__vector_26+0x120>
    5438:	88 35       	cpi	r24, 0x58	; 88
    543a:	09 f4       	brne	.+2      	; 0x543e <__vector_26+0x88>
    543c:	5d c0       	rjmp	.+186    	; 0x54f8 <__vector_26+0x142>
    543e:	88 34       	cpi	r24, 0x48	; 72
    5440:	09 f0       	breq	.+2      	; 0x5444 <__vector_26+0x8e>
    5442:	d4 c0       	rjmp	.+424    	; 0x55ec <__vector_26+0x236>
    5444:	d2 c0       	rjmp	.+420    	; 0x55ea <__vector_26+0x234>
    5446:	88 39       	cpi	r24, 0x98	; 152
    5448:	09 f4       	brne	.+2      	; 0x544c <__vector_26+0x96>
    544a:	c3 c0       	rjmp	.+390    	; 0x55d2 <__vector_26+0x21c>
    544c:	a8 f4       	brcc	.+42     	; 0x5478 <__vector_26+0xc2>
    544e:	88 37       	cpi	r24, 0x78	; 120
    5450:	09 f4       	brne	.+2      	; 0x5454 <__vector_26+0x9e>
    5452:	67 c0       	rjmp	.+206    	; 0x5522 <__vector_26+0x16c>
    5454:	38 f4       	brcc	.+14     	; 0x5464 <__vector_26+0xae>
    5456:	88 36       	cpi	r24, 0x68	; 104
    5458:	09 f4       	brne	.+2      	; 0x545c <__vector_26+0xa6>
    545a:	63 c0       	rjmp	.+198    	; 0x5522 <__vector_26+0x16c>
    545c:	80 37       	cpi	r24, 0x70	; 112
    545e:	09 f4       	brne	.+2      	; 0x5462 <__vector_26+0xac>
    5460:	60 c0       	rjmp	.+192    	; 0x5522 <__vector_26+0x16c>
    5462:	c4 c0       	rjmp	.+392    	; 0x55ec <__vector_26+0x236>
    5464:	88 38       	cpi	r24, 0x88	; 136
    5466:	09 f4       	brne	.+2      	; 0x546a <__vector_26+0xb4>
    5468:	b4 c0       	rjmp	.+360    	; 0x55d2 <__vector_26+0x21c>
    546a:	80 39       	cpi	r24, 0x90	; 144
    546c:	09 f4       	brne	.+2      	; 0x5470 <__vector_26+0xba>
    546e:	5f c0       	rjmp	.+190    	; 0x552e <__vector_26+0x178>
    5470:	80 38       	cpi	r24, 0x80	; 128
    5472:	09 f0       	breq	.+2      	; 0x5476 <__vector_26+0xc0>
    5474:	bb c0       	rjmp	.+374    	; 0x55ec <__vector_26+0x236>
    5476:	5b c0       	rjmp	.+182    	; 0x552e <__vector_26+0x178>
    5478:	80 3b       	cpi	r24, 0xB0	; 176
    547a:	09 f4       	brne	.+2      	; 0x547e <__vector_26+0xc8>
    547c:	82 c0       	rjmp	.+260    	; 0x5582 <__vector_26+0x1cc>
    547e:	38 f4       	brcc	.+14     	; 0x548e <__vector_26+0xd8>
    5480:	80 3a       	cpi	r24, 0xA0	; 160
    5482:	09 f4       	brne	.+2      	; 0x5486 <__vector_26+0xd0>
    5484:	66 c0       	rjmp	.+204    	; 0x5552 <__vector_26+0x19c>
    5486:	88 3a       	cpi	r24, 0xA8	; 168
    5488:	09 f4       	brne	.+2      	; 0x548c <__vector_26+0xd6>
    548a:	7b c0       	rjmp	.+246    	; 0x5582 <__vector_26+0x1cc>
    548c:	af c0       	rjmp	.+350    	; 0x55ec <__vector_26+0x236>
    548e:	80 3c       	cpi	r24, 0xC0	; 192
    5490:	09 f4       	brne	.+2      	; 0x5494 <__vector_26+0xde>
    5492:	a3 c0       	rjmp	.+326    	; 0x55da <__vector_26+0x224>
    5494:	88 3c       	cpi	r24, 0xC8	; 200
    5496:	09 f4       	brne	.+2      	; 0x549a <__vector_26+0xe4>
    5498:	a0 c0       	rjmp	.+320    	; 0x55da <__vector_26+0x224>
    549a:	88 3b       	cpi	r24, 0xB8	; 184
    549c:	09 f4       	brne	.+2      	; 0x54a0 <__vector_26+0xea>
    549e:	86 c0       	rjmp	.+268    	; 0x55ac <__vector_26+0x1f6>
    54a0:	a5 c0       	rjmp	.+330    	; 0x55ec <__vector_26+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    54a2:	80 91 a4 0a 	lds	r24, 0x0AA4	; 0x800aa4 <twi_slarw>
    54a6:	10 c0       	rjmp	.+32     	; 0x54c8 <__vector_26+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    54a8:	90 91 7d 0a 	lds	r25, 0x0A7D	; 0x800a7d <twi_masterBufferIndex>
    54ac:	80 91 7c 0a 	lds	r24, 0x0A7C	; 0x800a7c <twi_masterBufferLength>
    54b0:	98 17       	cp	r25, r24
    54b2:	70 f5       	brcc	.+92     	; 0x5510 <__vector_26+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    54b4:	e0 91 7d 0a 	lds	r30, 0x0A7D	; 0x800a7d <twi_masterBufferIndex>
    54b8:	81 e0       	ldi	r24, 0x01	; 1
    54ba:	8e 0f       	add	r24, r30
    54bc:	80 93 7d 0a 	sts	0x0A7D, r24	; 0x800a7d <twi_masterBufferIndex>
    54c0:	f0 e0       	ldi	r31, 0x00	; 0
    54c2:	e2 58       	subi	r30, 0x82	; 130
    54c4:	f5 4f       	sbci	r31, 0xF5	; 245
    54c6:	80 81       	ld	r24, Z
    54c8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    54cc:	85 ec       	ldi	r24, 0xC5	; 197
    54ce:	82 c0       	rjmp	.+260    	; 0x55d4 <__vector_26+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    54d0:	80 93 38 0a 	sts	0x0A38, r24	; 0x800a38 <twi_error>
    54d4:	8a c0       	rjmp	.+276    	; 0x55ea <__vector_26+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    54d6:	e0 91 7d 0a 	lds	r30, 0x0A7D	; 0x800a7d <twi_masterBufferIndex>
    54da:	81 e0       	ldi	r24, 0x01	; 1
    54dc:	8e 0f       	add	r24, r30
    54de:	80 93 7d 0a 	sts	0x0A7D, r24	; 0x800a7d <twi_masterBufferIndex>
    54e2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    54e6:	f0 e0       	ldi	r31, 0x00	; 0
    54e8:	e2 58       	subi	r30, 0x82	; 130
    54ea:	f5 4f       	sbci	r31, 0xF5	; 245
    54ec:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    54ee:	90 91 7d 0a 	lds	r25, 0x0A7D	; 0x800a7d <twi_masterBufferIndex>
    54f2:	80 91 7c 0a 	lds	r24, 0x0A7C	; 0x800a7c <twi_masterBufferLength>
    54f6:	6a c0       	rjmp	.+212    	; 0x55cc <__vector_26+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    54f8:	e0 91 7d 0a 	lds	r30, 0x0A7D	; 0x800a7d <twi_masterBufferIndex>
    54fc:	81 e0       	ldi	r24, 0x01	; 1
    54fe:	8e 0f       	add	r24, r30
    5500:	80 93 7d 0a 	sts	0x0A7D, r24	; 0x800a7d <twi_masterBufferIndex>
    5504:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5508:	f0 e0       	ldi	r31, 0x00	; 0
    550a:	e2 58       	subi	r30, 0x82	; 130
    550c:	f5 4f       	sbci	r31, 0xF5	; 245
    550e:	80 83       	st	Z, r24
	if (twi_sendStop)
    5510:	80 91 a3 0a 	lds	r24, 0x0AA3	; 0x800aa3 <twi_sendStop>
    5514:	81 11       	cpse	r24, r1
    5516:	69 c0       	rjmp	.+210    	; 0x55ea <__vector_26+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    5518:	81 e0       	ldi	r24, 0x01	; 1
    551a:	80 93 a2 0a 	sts	0x0AA2, r24	; 0x800aa2 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    551e:	84 ea       	ldi	r24, 0xA4	; 164
    5520:	5d c0       	rjmp	.+186    	; 0x55dc <__vector_26+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    5522:	83 e0       	ldi	r24, 0x03	; 3
    5524:	80 93 a5 0a 	sts	0x0AA5, r24	; 0x800aa5 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    5528:	10 92 39 0a 	sts	0x0A39, r1	; 0x800a39 <twi_rxBufferIndex>
    552c:	cf cf       	rjmp	.-98     	; 0x54cc <__vector_26+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    552e:	80 91 39 0a 	lds	r24, 0x0A39	; 0x800a39 <twi_rxBufferIndex>
    5532:	80 32       	cpi	r24, 0x20	; 32
    5534:	08 f0       	brcs	.+2      	; 0x5538 <__vector_26+0x182>
    5536:	4d c0       	rjmp	.+154    	; 0x55d2 <__vector_26+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    5538:	e0 91 39 0a 	lds	r30, 0x0A39	; 0x800a39 <twi_rxBufferIndex>
    553c:	81 e0       	ldi	r24, 0x01	; 1
    553e:	8e 0f       	add	r24, r30
    5540:	80 93 39 0a 	sts	0x0A39, r24	; 0x800a39 <twi_rxBufferIndex>
    5544:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5548:	f0 e0       	ldi	r31, 0x00	; 0
    554a:	e6 5c       	subi	r30, 0xC6	; 198
    554c:	f5 4f       	sbci	r31, 0xF5	; 245
    554e:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    5550:	bd cf       	rjmp	.-134    	; 0x54cc <__vector_26+0x116>
    5552:	2b df       	rcall	.-426    	; 0x53aa <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    5554:	80 91 39 0a 	lds	r24, 0x0A39	; 0x800a39 <twi_rxBufferIndex>
    5558:	80 32       	cpi	r24, 0x20	; 32
    555a:	30 f4       	brcc	.+12     	; 0x5568 <__vector_26+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    555c:	e0 91 39 0a 	lds	r30, 0x0A39	; 0x800a39 <twi_rxBufferIndex>
    5560:	f0 e0       	ldi	r31, 0x00	; 0
    5562:	e6 5c       	subi	r30, 0xC6	; 198
    5564:	f5 4f       	sbci	r31, 0xF5	; 245
    5566:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    5568:	60 91 39 0a 	lds	r22, 0x0A39	; 0x800a39 <twi_rxBufferIndex>
    556c:	70 e0       	ldi	r23, 0x00	; 0
    556e:	e0 91 9e 0a 	lds	r30, 0x0A9E	; 0x800a9e <twi_onSlaveReceive>
    5572:	f0 91 9f 0a 	lds	r31, 0x0A9F	; 0x800a9f <twi_onSlaveReceive+0x1>
    5576:	8a e3       	ldi	r24, 0x3A	; 58
    5578:	9a e0       	ldi	r25, 0x0A	; 10
    557a:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    557c:	10 92 39 0a 	sts	0x0A39, r1	; 0x800a39 <twi_rxBufferIndex>
      break;
    5580:	35 c0       	rjmp	.+106    	; 0x55ec <__vector_26+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    5582:	84 e0       	ldi	r24, 0x04	; 4
    5584:	80 93 a5 0a 	sts	0x0AA5, r24	; 0x800aa5 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    5588:	10 92 5b 0a 	sts	0x0A5B, r1	; 0x800a5b <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    558c:	10 92 5a 0a 	sts	0x0A5A, r1	; 0x800a5a <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    5590:	e0 91 a0 0a 	lds	r30, 0x0AA0	; 0x800aa0 <twi_onSlaveTransmit>
    5594:	f0 91 a1 0a 	lds	r31, 0x0AA1	; 0x800aa1 <twi_onSlaveTransmit+0x1>
    5598:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    559a:	80 91 5a 0a 	lds	r24, 0x0A5A	; 0x800a5a <twi_txBufferLength>
    559e:	81 11       	cpse	r24, r1
    55a0:	05 c0       	rjmp	.+10     	; 0x55ac <__vector_26+0x1f6>
        twi_txBufferLength = 1;
    55a2:	81 e0       	ldi	r24, 0x01	; 1
    55a4:	80 93 5a 0a 	sts	0x0A5A, r24	; 0x800a5a <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    55a8:	10 92 5c 0a 	sts	0x0A5C, r1	; 0x800a5c <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    55ac:	e0 91 5b 0a 	lds	r30, 0x0A5B	; 0x800a5b <twi_txBufferIndex>
    55b0:	81 e0       	ldi	r24, 0x01	; 1
    55b2:	8e 0f       	add	r24, r30
    55b4:	80 93 5b 0a 	sts	0x0A5B, r24	; 0x800a5b <twi_txBufferIndex>
    55b8:	f0 e0       	ldi	r31, 0x00	; 0
    55ba:	e4 5a       	subi	r30, 0xA4	; 164
    55bc:	f5 4f       	sbci	r31, 0xF5	; 245
    55be:	80 81       	ld	r24, Z
    55c0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    55c4:	90 91 5b 0a 	lds	r25, 0x0A5B	; 0x800a5b <twi_txBufferIndex>
    55c8:	80 91 5a 0a 	lds	r24, 0x0A5A	; 0x800a5a <twi_txBufferLength>
    55cc:	98 17       	cp	r25, r24
    55ce:	08 f4       	brcc	.+2      	; 0x55d2 <__vector_26+0x21c>
    55d0:	7d cf       	rjmp	.-262    	; 0x54cc <__vector_26+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    55d2:	85 e8       	ldi	r24, 0x85	; 133
    55d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    55d8:	09 c0       	rjmp	.+18     	; 0x55ec <__vector_26+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    55da:	85 ec       	ldi	r24, 0xC5	; 197
    55dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    55e0:	10 92 a5 0a 	sts	0x0AA5, r1	; 0x800aa5 <twi_state>
      break;
    55e4:	03 c0       	rjmp	.+6      	; 0x55ec <__vector_26+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    55e6:	10 92 38 0a 	sts	0x0A38, r1	; 0x800a38 <twi_error>
      twi_stop();
    55ea:	d5 de       	rcall	.-598    	; 0x5396 <twi_stop>
      break;
  }
}
    55ec:	ff 91       	pop	r31
    55ee:	ef 91       	pop	r30
    55f0:	bf 91       	pop	r27
    55f2:	af 91       	pop	r26
    55f4:	9f 91       	pop	r25
    55f6:	8f 91       	pop	r24
    55f8:	7f 91       	pop	r23
    55fa:	6f 91       	pop	r22
    55fc:	5f 91       	pop	r21
    55fe:	4f 91       	pop	r20
    5600:	3f 91       	pop	r19
    5602:	2f 91       	pop	r18
    5604:	0f 90       	pop	r0
    5606:	0b be       	out	0x3b, r0	; 59
    5608:	0f 90       	pop	r0
    560a:	0f be       	out	0x3f, r0	; 63
    560c:	0f 90       	pop	r0
    560e:	1f 90       	pop	r1
    5610:	18 95       	reti

00005612 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    5612:	80 91 da 0a 	lds	r24, 0x0ADA	; 0x800ada <_ZN7TwoWire14rxBufferLengthE>
    5616:	90 e0       	ldi	r25, 0x00	; 0
    5618:	20 91 db 0a 	lds	r18, 0x0ADB	; 0x800adb <_ZN7TwoWire13rxBufferIndexE>
    561c:	82 1b       	sub	r24, r18
    561e:	91 09       	sbc	r25, r1
    5620:	08 95       	ret

00005622 <_ZN7TwoWire4readEv>:
    5622:	90 91 db 0a 	lds	r25, 0x0ADB	; 0x800adb <_ZN7TwoWire13rxBufferIndexE>
    5626:	80 91 da 0a 	lds	r24, 0x0ADA	; 0x800ada <_ZN7TwoWire14rxBufferLengthE>
    562a:	98 17       	cp	r25, r24
    562c:	50 f4       	brcc	.+20     	; 0x5642 <_ZN7TwoWire4readEv+0x20>
    562e:	e9 2f       	mov	r30, r25
    5630:	f0 e0       	ldi	r31, 0x00	; 0
    5632:	e4 52       	subi	r30, 0x24	; 36
    5634:	f5 4f       	sbci	r31, 0xF5	; 245
    5636:	20 81       	ld	r18, Z
    5638:	30 e0       	ldi	r19, 0x00	; 0
    563a:	9f 5f       	subi	r25, 0xFF	; 255
    563c:	90 93 db 0a 	sts	0x0ADB, r25	; 0x800adb <_ZN7TwoWire13rxBufferIndexE>
    5640:	02 c0       	rjmp	.+4      	; 0x5646 <_ZN7TwoWire4readEv+0x24>
    5642:	2f ef       	ldi	r18, 0xFF	; 255
    5644:	3f ef       	ldi	r19, 0xFF	; 255
    5646:	c9 01       	movw	r24, r18
    5648:	08 95       	ret

0000564a <_ZN7TwoWire4peekEv>:
    564a:	e0 91 db 0a 	lds	r30, 0x0ADB	; 0x800adb <_ZN7TwoWire13rxBufferIndexE>
    564e:	80 91 da 0a 	lds	r24, 0x0ADA	; 0x800ada <_ZN7TwoWire14rxBufferLengthE>
    5652:	e8 17       	cp	r30, r24
    5654:	30 f4       	brcc	.+12     	; 0x5662 <_ZN7TwoWire4peekEv+0x18>
    5656:	f0 e0       	ldi	r31, 0x00	; 0
    5658:	e4 52       	subi	r30, 0x24	; 36
    565a:	f5 4f       	sbci	r31, 0xF5	; 245
    565c:	80 81       	ld	r24, Z
    565e:	90 e0       	ldi	r25, 0x00	; 0
    5660:	08 95       	ret
    5662:	8f ef       	ldi	r24, 0xFF	; 255
    5664:	9f ef       	ldi	r25, 0xFF	; 255
    5666:	08 95       	ret

00005668 <_ZN7TwoWire5flushEv>:
    5668:	08 95       	ret

0000566a <_ZN7TwoWire16onReceiveServiceEPhi>:
    566a:	cf 93       	push	r28
    566c:	df 93       	push	r29
    566e:	ec 01       	movw	r28, r24
    5670:	e0 91 b2 0a 	lds	r30, 0x0AB2	; 0x800ab2 <_ZN7TwoWire14user_onReceiveE>
    5674:	f0 91 b3 0a 	lds	r31, 0x0AB3	; 0x800ab3 <_ZN7TwoWire14user_onReceiveE+0x1>
    5678:	30 97       	sbiw	r30, 0x00	; 0
    567a:	f1 f0       	breq	.+60     	; 0x56b8 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    567c:	90 91 db 0a 	lds	r25, 0x0ADB	; 0x800adb <_ZN7TwoWire13rxBufferIndexE>
    5680:	80 91 da 0a 	lds	r24, 0x0ADA	; 0x800ada <_ZN7TwoWire14rxBufferLengthE>
    5684:	98 17       	cp	r25, r24
    5686:	c0 f0       	brcs	.+48     	; 0x56b8 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    5688:	90 e0       	ldi	r25, 0x00	; 0
    568a:	29 2f       	mov	r18, r25
    568c:	30 e0       	ldi	r19, 0x00	; 0
    568e:	26 17       	cp	r18, r22
    5690:	37 07       	cpc	r19, r23
    5692:	54 f4       	brge	.+20     	; 0x56a8 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    5694:	de 01       	movw	r26, r28
    5696:	a2 0f       	add	r26, r18
    5698:	b3 1f       	adc	r27, r19
    569a:	4c 91       	ld	r20, X
    569c:	d9 01       	movw	r26, r18
    569e:	a4 52       	subi	r26, 0x24	; 36
    56a0:	b5 4f       	sbci	r27, 0xF5	; 245
    56a2:	4c 93       	st	X, r20
    56a4:	9f 5f       	subi	r25, 0xFF	; 255
    56a6:	f1 cf       	rjmp	.-30     	; 0x568a <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    56a8:	10 92 db 0a 	sts	0x0ADB, r1	; 0x800adb <_ZN7TwoWire13rxBufferIndexE>
    56ac:	60 93 da 0a 	sts	0x0ADA, r22	; 0x800ada <_ZN7TwoWire14rxBufferLengthE>
    56b0:	cb 01       	movw	r24, r22
    56b2:	df 91       	pop	r29
    56b4:	cf 91       	pop	r28
    56b6:	09 94       	ijmp
    56b8:	df 91       	pop	r29
    56ba:	cf 91       	pop	r28
    56bc:	08 95       	ret

000056be <_ZN7TwoWire16onRequestServiceEv>:
    56be:	e0 91 b4 0a 	lds	r30, 0x0AB4	; 0x800ab4 <_ZN7TwoWire14user_onRequestE>
    56c2:	f0 91 b5 0a 	lds	r31, 0x0AB5	; 0x800ab5 <_ZN7TwoWire14user_onRequestE+0x1>
    56c6:	30 97       	sbiw	r30, 0x00	; 0
    56c8:	29 f0       	breq	.+10     	; 0x56d4 <_ZN7TwoWire16onRequestServiceEv+0x16>
    56ca:	10 92 b8 0a 	sts	0x0AB8, r1	; 0x800ab8 <_ZN7TwoWire13txBufferIndexE>
    56ce:	10 92 b7 0a 	sts	0x0AB7, r1	; 0x800ab7 <_ZN7TwoWire14txBufferLengthE>
    56d2:	09 94       	ijmp
    56d4:	08 95       	ret

000056d6 <_ZN7TwoWire5writeEPKhj>:
    56d6:	cf 92       	push	r12
    56d8:	df 92       	push	r13
    56da:	ef 92       	push	r14
    56dc:	ff 92       	push	r15
    56de:	0f 93       	push	r16
    56e0:	1f 93       	push	r17
    56e2:	cf 93       	push	r28
    56e4:	df 93       	push	r29
    56e6:	7c 01       	movw	r14, r24
    56e8:	cb 01       	movw	r24, r22
    56ea:	8a 01       	movw	r16, r20
    56ec:	20 91 b6 0a 	lds	r18, 0x0AB6	; 0x800ab6 <_ZN7TwoWire12transmittingE>
    56f0:	22 23       	and	r18, r18
    56f2:	89 f0       	breq	.+34     	; 0x5716 <_ZN7TwoWire5writeEPKhj+0x40>
    56f4:	eb 01       	movw	r28, r22
    56f6:	6b 01       	movw	r12, r22
    56f8:	c4 0e       	add	r12, r20
    56fa:	d5 1e       	adc	r13, r21
    56fc:	cc 15       	cp	r28, r12
    56fe:	dd 05       	cpc	r29, r13
    5700:	61 f0       	breq	.+24     	; 0x571a <_ZN7TwoWire5writeEPKhj+0x44>
    5702:	69 91       	ld	r22, Y+
    5704:	d7 01       	movw	r26, r14
    5706:	ed 91       	ld	r30, X+
    5708:	fc 91       	ld	r31, X
    570a:	01 90       	ld	r0, Z+
    570c:	f0 81       	ld	r31, Z
    570e:	e0 2d       	mov	r30, r0
    5710:	c7 01       	movw	r24, r14
    5712:	09 95       	icall
    5714:	f3 cf       	rjmp	.-26     	; 0x56fc <_ZN7TwoWire5writeEPKhj+0x26>
    5716:	64 2f       	mov	r22, r20
    5718:	0c de       	rcall	.-1000   	; 0x5332 <twi_transmit>
    571a:	c8 01       	movw	r24, r16
    571c:	df 91       	pop	r29
    571e:	cf 91       	pop	r28
    5720:	1f 91       	pop	r17
    5722:	0f 91       	pop	r16
    5724:	ff 90       	pop	r15
    5726:	ef 90       	pop	r14
    5728:	df 90       	pop	r13
    572a:	cf 90       	pop	r12
    572c:	08 95       	ret

0000572e <_ZN7TwoWire5writeEh>:
    572e:	cf 93       	push	r28
    5730:	df 93       	push	r29
    5732:	1f 92       	push	r1
    5734:	cd b7       	in	r28, 0x3d	; 61
    5736:	de b7       	in	r29, 0x3e	; 62
    5738:	69 83       	std	Y+1, r22	; 0x01
    573a:	20 91 b6 0a 	lds	r18, 0x0AB6	; 0x800ab6 <_ZN7TwoWire12transmittingE>
    573e:	22 23       	and	r18, r18
    5740:	d1 f0       	breq	.+52     	; 0x5776 <_ZN7TwoWire5writeEh+0x48>
    5742:	20 91 b7 0a 	lds	r18, 0x0AB7	; 0x800ab7 <_ZN7TwoWire14txBufferLengthE>
    5746:	20 32       	cpi	r18, 0x20	; 32
    5748:	40 f0       	brcs	.+16     	; 0x575a <_ZN7TwoWire5writeEh+0x2c>
    574a:	21 e0       	ldi	r18, 0x01	; 1
    574c:	30 e0       	ldi	r19, 0x00	; 0
    574e:	fc 01       	movw	r30, r24
    5750:	33 83       	std	Z+3, r19	; 0x03
    5752:	22 83       	std	Z+2, r18	; 0x02
    5754:	80 e0       	ldi	r24, 0x00	; 0
    5756:	90 e0       	ldi	r25, 0x00	; 0
    5758:	14 c0       	rjmp	.+40     	; 0x5782 <_ZN7TwoWire5writeEh+0x54>
    575a:	80 91 b8 0a 	lds	r24, 0x0AB8	; 0x800ab8 <_ZN7TwoWire13txBufferIndexE>
    575e:	e8 2f       	mov	r30, r24
    5760:	f0 e0       	ldi	r31, 0x00	; 0
    5762:	e7 54       	subi	r30, 0x47	; 71
    5764:	f5 4f       	sbci	r31, 0xF5	; 245
    5766:	99 81       	ldd	r25, Y+1	; 0x01
    5768:	90 83       	st	Z, r25
    576a:	8f 5f       	subi	r24, 0xFF	; 255
    576c:	80 93 b8 0a 	sts	0x0AB8, r24	; 0x800ab8 <_ZN7TwoWire13txBufferIndexE>
    5770:	80 93 b7 0a 	sts	0x0AB7, r24	; 0x800ab7 <_ZN7TwoWire14txBufferLengthE>
    5774:	04 c0       	rjmp	.+8      	; 0x577e <_ZN7TwoWire5writeEh+0x50>
    5776:	61 e0       	ldi	r22, 0x01	; 1
    5778:	ce 01       	movw	r24, r28
    577a:	01 96       	adiw	r24, 0x01	; 1
    577c:	da dd       	rcall	.-1100   	; 0x5332 <twi_transmit>
    577e:	81 e0       	ldi	r24, 0x01	; 1
    5780:	90 e0       	ldi	r25, 0x00	; 0
    5782:	0f 90       	pop	r0
    5784:	df 91       	pop	r29
    5786:	cf 91       	pop	r28
    5788:	08 95       	ret

0000578a <_ZN7TwoWireC1Ev>:
    578a:	fc 01       	movw	r30, r24
    578c:	13 82       	std	Z+3, r1	; 0x03
    578e:	12 82       	std	Z+2, r1	; 0x02
    5790:	88 ee       	ldi	r24, 0xE8	; 232
    5792:	93 e0       	ldi	r25, 0x03	; 3
    5794:	a0 e0       	ldi	r26, 0x00	; 0
    5796:	b0 e0       	ldi	r27, 0x00	; 0
    5798:	84 83       	std	Z+4, r24	; 0x04
    579a:	95 83       	std	Z+5, r25	; 0x05
    579c:	a6 83       	std	Z+6, r26	; 0x06
    579e:	b7 83       	std	Z+7, r27	; 0x07
    57a0:	8c e6       	ldi	r24, 0x6C	; 108
    57a2:	98 e0       	ldi	r25, 0x08	; 8
    57a4:	91 83       	std	Z+1, r25	; 0x01
    57a6:	80 83       	st	Z, r24
    57a8:	08 95       	ret

000057aa <_ZN7TwoWire5beginEv>:
    57aa:	10 92 db 0a 	sts	0x0ADB, r1	; 0x800adb <_ZN7TwoWire13rxBufferIndexE>
    57ae:	10 92 da 0a 	sts	0x0ADA, r1	; 0x800ada <_ZN7TwoWire14rxBufferLengthE>
    57b2:	10 92 b8 0a 	sts	0x0AB8, r1	; 0x800ab8 <_ZN7TwoWire13txBufferIndexE>
    57b6:	10 92 b7 0a 	sts	0x0AB7, r1	; 0x800ab7 <_ZN7TwoWire14txBufferLengthE>
    57ba:	de dc       	rcall	.-1604   	; 0x5178 <twi_init>
    57bc:	8f e5       	ldi	r24, 0x5F	; 95
    57be:	9b e2       	ldi	r25, 0x2B	; 43
    57c0:	e5 dd       	rcall	.-1078   	; 0x538c <twi_attachSlaveTxEvent>
    57c2:	85 e3       	ldi	r24, 0x35	; 53
    57c4:	9b e2       	ldi	r25, 0x2B	; 43
    57c6:	dd cd       	rjmp	.-1094   	; 0x5382 <twi_attachSlaveRxEvent>

000057c8 <_ZN7TwoWire3endEv>:
    57c8:	f5 cc       	rjmp	.-1558   	; 0x51b4 <twi_disable>

000057ca <_ZN7TwoWire8setClockEm>:
    57ca:	cb 01       	movw	r24, r22
    57cc:	ba 01       	movw	r22, r20
    57ce:	ff cc       	rjmp	.-1538   	; 0x51ce <twi_setFrequency>

000057d0 <_ZN7TwoWire17beginTransmissionEh>:
    57d0:	81 e0       	ldi	r24, 0x01	; 1
    57d2:	80 93 b6 0a 	sts	0x0AB6, r24	; 0x800ab6 <_ZN7TwoWire12transmittingE>
    57d6:	60 93 d9 0a 	sts	0x0AD9, r22	; 0x800ad9 <_ZN7TwoWire9txAddressE>
    57da:	10 92 b8 0a 	sts	0x0AB8, r1	; 0x800ab8 <_ZN7TwoWire13txBufferIndexE>
    57de:	10 92 b7 0a 	sts	0x0AB7, r1	; 0x800ab7 <_ZN7TwoWire14txBufferLengthE>
    57e2:	08 95       	ret

000057e4 <_ZN7TwoWire17beginTransmissionEi>:
    57e4:	f5 cf       	rjmp	.-22     	; 0x57d0 <_ZN7TwoWire17beginTransmissionEh>

000057e6 <_ZN7TwoWire15endTransmissionEh>:
    57e6:	0f 93       	push	r16
    57e8:	06 2f       	mov	r16, r22
    57ea:	21 e0       	ldi	r18, 0x01	; 1
    57ec:	40 91 b7 0a 	lds	r20, 0x0AB7	; 0x800ab7 <_ZN7TwoWire14txBufferLengthE>
    57f0:	69 eb       	ldi	r22, 0xB9	; 185
    57f2:	7a e0       	ldi	r23, 0x0A	; 10
    57f4:	80 91 d9 0a 	lds	r24, 0x0AD9	; 0x800ad9 <_ZN7TwoWire9txAddressE>
    57f8:	46 dd       	rcall	.-1396   	; 0x5286 <twi_writeTo>
    57fa:	10 92 b8 0a 	sts	0x0AB8, r1	; 0x800ab8 <_ZN7TwoWire13txBufferIndexE>
    57fe:	10 92 b7 0a 	sts	0x0AB7, r1	; 0x800ab7 <_ZN7TwoWire14txBufferLengthE>
    5802:	10 92 b6 0a 	sts	0x0AB6, r1	; 0x800ab6 <_ZN7TwoWire12transmittingE>
    5806:	0f 91       	pop	r16
    5808:	08 95       	ret

0000580a <_ZN7TwoWire11requestFromEhhmhh>:
    580a:	4f 92       	push	r4
    580c:	5f 92       	push	r5
    580e:	6f 92       	push	r6
    5810:	7f 92       	push	r7
    5812:	af 92       	push	r10
    5814:	bf 92       	push	r11
    5816:	cf 92       	push	r12
    5818:	ef 92       	push	r14
    581a:	ff 92       	push	r15
    581c:	0f 93       	push	r16
    581e:	1f 93       	push	r17
    5820:	cf 93       	push	r28
    5822:	df 93       	push	r29
    5824:	5c 01       	movw	r10, r24
    5826:	f6 2e       	mov	r15, r22
    5828:	d4 2f       	mov	r29, r20
    582a:	28 01       	movw	r4, r16
    582c:	39 01       	movw	r6, r18
    582e:	ee 20       	and	r14, r14
    5830:	11 f1       	breq	.+68     	; 0x5876 <_ZN7TwoWire11requestFromEhhmhh+0x6c>
    5832:	ce df       	rcall	.-100    	; 0x57d0 <_ZN7TwoWire17beginTransmissionEh>
    5834:	ce 2d       	mov	r28, r14
    5836:	c4 30       	cpi	r28, 0x04	; 4
    5838:	08 f0       	brcs	.+2      	; 0x583c <_ZN7TwoWire11requestFromEhhmhh+0x32>
    583a:	c3 e0       	ldi	r28, 0x03	; 3
    583c:	c1 50       	subi	r28, 0x01	; 1
    583e:	c0 f0       	brcs	.+48     	; 0x5870 <_ZN7TwoWire11requestFromEhhmhh+0x66>
    5840:	28 e0       	ldi	r18, 0x08	; 8
    5842:	c2 9f       	mul	r28, r18
    5844:	c0 01       	movw	r24, r0
    5846:	11 24       	eor	r1, r1
    5848:	a3 01       	movw	r20, r6
    584a:	92 01       	movw	r18, r4
    584c:	04 c0       	rjmp	.+8      	; 0x5856 <_ZN7TwoWire11requestFromEhhmhh+0x4c>
    584e:	56 95       	lsr	r21
    5850:	47 95       	ror	r20
    5852:	37 95       	ror	r19
    5854:	27 95       	ror	r18
    5856:	8a 95       	dec	r24
    5858:	d2 f7       	brpl	.-12     	; 0x584e <_ZN7TwoWire11requestFromEhhmhh+0x44>
    585a:	ca 01       	movw	r24, r20
    585c:	b9 01       	movw	r22, r18
    585e:	d5 01       	movw	r26, r10
    5860:	ed 91       	ld	r30, X+
    5862:	fc 91       	ld	r31, X
    5864:	01 90       	ld	r0, Z+
    5866:	f0 81       	ld	r31, Z
    5868:	e0 2d       	mov	r30, r0
    586a:	c5 01       	movw	r24, r10
    586c:	09 95       	icall
    586e:	e6 cf       	rjmp	.-52     	; 0x583c <_ZN7TwoWire11requestFromEhhmhh+0x32>
    5870:	60 e0       	ldi	r22, 0x00	; 0
    5872:	c5 01       	movw	r24, r10
    5874:	b8 df       	rcall	.-144    	; 0x57e6 <_ZN7TwoWire15endTransmissionEh>
    5876:	4d 2f       	mov	r20, r29
    5878:	d1 32       	cpi	r29, 0x21	; 33
    587a:	08 f0       	brcs	.+2      	; 0x587e <_ZN7TwoWire11requestFromEhhmhh+0x74>
    587c:	40 e2       	ldi	r20, 0x20	; 32
    587e:	2c 2d       	mov	r18, r12
    5880:	6c ed       	ldi	r22, 0xDC	; 220
    5882:	7a e0       	ldi	r23, 0x0A	; 10
    5884:	8f 2d       	mov	r24, r15
    5886:	b7 dc       	rcall	.-1682   	; 0x51f6 <twi_readFrom>
    5888:	10 92 db 0a 	sts	0x0ADB, r1	; 0x800adb <_ZN7TwoWire13rxBufferIndexE>
    588c:	80 93 da 0a 	sts	0x0ADA, r24	; 0x800ada <_ZN7TwoWire14rxBufferLengthE>
    5890:	df 91       	pop	r29
    5892:	cf 91       	pop	r28
    5894:	1f 91       	pop	r17
    5896:	0f 91       	pop	r16
    5898:	ff 90       	pop	r15
    589a:	ef 90       	pop	r14
    589c:	cf 90       	pop	r12
    589e:	bf 90       	pop	r11
    58a0:	af 90       	pop	r10
    58a2:	7f 90       	pop	r7
    58a4:	6f 90       	pop	r6
    58a6:	5f 90       	pop	r5
    58a8:	4f 90       	pop	r4
    58aa:	08 95       	ret

000058ac <_ZN7TwoWire11requestFromEhhh>:
    58ac:	cf 92       	push	r12
    58ae:	ef 92       	push	r14
    58b0:	0f 93       	push	r16
    58b2:	1f 93       	push	r17
    58b4:	c2 2e       	mov	r12, r18
    58b6:	e1 2c       	mov	r14, r1
    58b8:	00 e0       	ldi	r16, 0x00	; 0
    58ba:	10 e0       	ldi	r17, 0x00	; 0
    58bc:	98 01       	movw	r18, r16
    58be:	a5 df       	rcall	.-182    	; 0x580a <_ZN7TwoWire11requestFromEhhmhh>
    58c0:	1f 91       	pop	r17
    58c2:	0f 91       	pop	r16
    58c4:	ef 90       	pop	r14
    58c6:	cf 90       	pop	r12
    58c8:	08 95       	ret

000058ca <_ZN7TwoWire11requestFromEhh>:
    58ca:	21 e0       	ldi	r18, 0x01	; 1
    58cc:	ef cf       	rjmp	.-34     	; 0x58ac <_ZN7TwoWire11requestFromEhhh>

000058ce <_ZN7TwoWire11requestFromEii>:
    58ce:	21 e0       	ldi	r18, 0x01	; 1
    58d0:	ed cf       	rjmp	.-38     	; 0x58ac <_ZN7TwoWire11requestFromEhhh>

000058d2 <_ZN7TwoWire15endTransmissionEv>:
    58d2:	61 e0       	ldi	r22, 0x01	; 1
    58d4:	88 cf       	rjmp	.-240    	; 0x57e6 <_ZN7TwoWire15endTransmissionEh>

000058d6 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    58d6:	86 ea       	ldi	r24, 0xA6	; 166
    58d8:	9a e0       	ldi	r25, 0x0A	; 10
    58da:	57 cf       	rjmp	.-338    	; 0x578a <_ZN7TwoWireC1Ev>

000058dc <__cmpsf2>:
    58dc:	a8 d0       	rcall	.+336    	; 0x5a2e <__fp_cmp>
    58de:	08 f4       	brcc	.+2      	; 0x58e2 <__cmpsf2+0x6>
    58e0:	81 e0       	ldi	r24, 0x01	; 1
    58e2:	08 95       	ret

000058e4 <__divsf3>:
    58e4:	0c d0       	rcall	.+24     	; 0x58fe <__divsf3x>
    58e6:	de c0       	rjmp	.+444    	; 0x5aa4 <__fp_round>
    58e8:	d6 d0       	rcall	.+428    	; 0x5a96 <__fp_pscB>
    58ea:	40 f0       	brcs	.+16     	; 0x58fc <__divsf3+0x18>
    58ec:	cd d0       	rcall	.+410    	; 0x5a88 <__fp_pscA>
    58ee:	30 f0       	brcs	.+12     	; 0x58fc <__divsf3+0x18>
    58f0:	21 f4       	brne	.+8      	; 0x58fa <__divsf3+0x16>
    58f2:	5f 3f       	cpi	r21, 0xFF	; 255
    58f4:	19 f0       	breq	.+6      	; 0x58fc <__divsf3+0x18>
    58f6:	bf c0       	rjmp	.+382    	; 0x5a76 <__fp_inf>
    58f8:	51 11       	cpse	r21, r1
    58fa:	08 c1       	rjmp	.+528    	; 0x5b0c <__fp_szero>
    58fc:	c2 c0       	rjmp	.+388    	; 0x5a82 <__fp_nan>

000058fe <__divsf3x>:
    58fe:	e3 d0       	rcall	.+454    	; 0x5ac6 <__fp_split3>
    5900:	98 f3       	brcs	.-26     	; 0x58e8 <__divsf3+0x4>

00005902 <__divsf3_pse>:
    5902:	99 23       	and	r25, r25
    5904:	c9 f3       	breq	.-14     	; 0x58f8 <__divsf3+0x14>
    5906:	55 23       	and	r21, r21
    5908:	b1 f3       	breq	.-20     	; 0x58f6 <__divsf3+0x12>
    590a:	95 1b       	sub	r25, r21
    590c:	55 0b       	sbc	r21, r21
    590e:	bb 27       	eor	r27, r27
    5910:	aa 27       	eor	r26, r26
    5912:	62 17       	cp	r22, r18
    5914:	73 07       	cpc	r23, r19
    5916:	84 07       	cpc	r24, r20
    5918:	38 f0       	brcs	.+14     	; 0x5928 <__divsf3_pse+0x26>
    591a:	9f 5f       	subi	r25, 0xFF	; 255
    591c:	5f 4f       	sbci	r21, 0xFF	; 255
    591e:	22 0f       	add	r18, r18
    5920:	33 1f       	adc	r19, r19
    5922:	44 1f       	adc	r20, r20
    5924:	aa 1f       	adc	r26, r26
    5926:	a9 f3       	breq	.-22     	; 0x5912 <__divsf3_pse+0x10>
    5928:	33 d0       	rcall	.+102    	; 0x5990 <__divsf3_pse+0x8e>
    592a:	0e 2e       	mov	r0, r30
    592c:	3a f0       	brmi	.+14     	; 0x593c <__divsf3_pse+0x3a>
    592e:	e0 e8       	ldi	r30, 0x80	; 128
    5930:	30 d0       	rcall	.+96     	; 0x5992 <__divsf3_pse+0x90>
    5932:	91 50       	subi	r25, 0x01	; 1
    5934:	50 40       	sbci	r21, 0x00	; 0
    5936:	e6 95       	lsr	r30
    5938:	00 1c       	adc	r0, r0
    593a:	ca f7       	brpl	.-14     	; 0x592e <__divsf3_pse+0x2c>
    593c:	29 d0       	rcall	.+82     	; 0x5990 <__divsf3_pse+0x8e>
    593e:	fe 2f       	mov	r31, r30
    5940:	27 d0       	rcall	.+78     	; 0x5990 <__divsf3_pse+0x8e>
    5942:	66 0f       	add	r22, r22
    5944:	77 1f       	adc	r23, r23
    5946:	88 1f       	adc	r24, r24
    5948:	bb 1f       	adc	r27, r27
    594a:	26 17       	cp	r18, r22
    594c:	37 07       	cpc	r19, r23
    594e:	48 07       	cpc	r20, r24
    5950:	ab 07       	cpc	r26, r27
    5952:	b0 e8       	ldi	r27, 0x80	; 128
    5954:	09 f0       	breq	.+2      	; 0x5958 <__divsf3_pse+0x56>
    5956:	bb 0b       	sbc	r27, r27
    5958:	80 2d       	mov	r24, r0
    595a:	bf 01       	movw	r22, r30
    595c:	ff 27       	eor	r31, r31
    595e:	93 58       	subi	r25, 0x83	; 131
    5960:	5f 4f       	sbci	r21, 0xFF	; 255
    5962:	2a f0       	brmi	.+10     	; 0x596e <__divsf3_pse+0x6c>
    5964:	9e 3f       	cpi	r25, 0xFE	; 254
    5966:	51 05       	cpc	r21, r1
    5968:	68 f0       	brcs	.+26     	; 0x5984 <__divsf3_pse+0x82>
    596a:	85 c0       	rjmp	.+266    	; 0x5a76 <__fp_inf>
    596c:	cf c0       	rjmp	.+414    	; 0x5b0c <__fp_szero>
    596e:	5f 3f       	cpi	r21, 0xFF	; 255
    5970:	ec f3       	brlt	.-6      	; 0x596c <__divsf3_pse+0x6a>
    5972:	98 3e       	cpi	r25, 0xE8	; 232
    5974:	dc f3       	brlt	.-10     	; 0x596c <__divsf3_pse+0x6a>
    5976:	86 95       	lsr	r24
    5978:	77 95       	ror	r23
    597a:	67 95       	ror	r22
    597c:	b7 95       	ror	r27
    597e:	f7 95       	ror	r31
    5980:	9f 5f       	subi	r25, 0xFF	; 255
    5982:	c9 f7       	brne	.-14     	; 0x5976 <__divsf3_pse+0x74>
    5984:	88 0f       	add	r24, r24
    5986:	91 1d       	adc	r25, r1
    5988:	96 95       	lsr	r25
    598a:	87 95       	ror	r24
    598c:	97 f9       	bld	r25, 7
    598e:	08 95       	ret
    5990:	e1 e0       	ldi	r30, 0x01	; 1
    5992:	66 0f       	add	r22, r22
    5994:	77 1f       	adc	r23, r23
    5996:	88 1f       	adc	r24, r24
    5998:	bb 1f       	adc	r27, r27
    599a:	62 17       	cp	r22, r18
    599c:	73 07       	cpc	r23, r19
    599e:	84 07       	cpc	r24, r20
    59a0:	ba 07       	cpc	r27, r26
    59a2:	20 f0       	brcs	.+8      	; 0x59ac <__divsf3_pse+0xaa>
    59a4:	62 1b       	sub	r22, r18
    59a6:	73 0b       	sbc	r23, r19
    59a8:	84 0b       	sbc	r24, r20
    59aa:	ba 0b       	sbc	r27, r26
    59ac:	ee 1f       	adc	r30, r30
    59ae:	88 f7       	brcc	.-30     	; 0x5992 <__divsf3_pse+0x90>
    59b0:	e0 95       	com	r30
    59b2:	08 95       	ret

000059b4 <__floatunsisf>:
    59b4:	e8 94       	clt
    59b6:	09 c0       	rjmp	.+18     	; 0x59ca <__floatsisf+0x12>

000059b8 <__floatsisf>:
    59b8:	97 fb       	bst	r25, 7
    59ba:	3e f4       	brtc	.+14     	; 0x59ca <__floatsisf+0x12>
    59bc:	90 95       	com	r25
    59be:	80 95       	com	r24
    59c0:	70 95       	com	r23
    59c2:	61 95       	neg	r22
    59c4:	7f 4f       	sbci	r23, 0xFF	; 255
    59c6:	8f 4f       	sbci	r24, 0xFF	; 255
    59c8:	9f 4f       	sbci	r25, 0xFF	; 255
    59ca:	99 23       	and	r25, r25
    59cc:	a9 f0       	breq	.+42     	; 0x59f8 <__floatsisf+0x40>
    59ce:	f9 2f       	mov	r31, r25
    59d0:	96 e9       	ldi	r25, 0x96	; 150
    59d2:	bb 27       	eor	r27, r27
    59d4:	93 95       	inc	r25
    59d6:	f6 95       	lsr	r31
    59d8:	87 95       	ror	r24
    59da:	77 95       	ror	r23
    59dc:	67 95       	ror	r22
    59de:	b7 95       	ror	r27
    59e0:	f1 11       	cpse	r31, r1
    59e2:	f8 cf       	rjmp	.-16     	; 0x59d4 <__floatsisf+0x1c>
    59e4:	fa f4       	brpl	.+62     	; 0x5a24 <__floatsisf+0x6c>
    59e6:	bb 0f       	add	r27, r27
    59e8:	11 f4       	brne	.+4      	; 0x59ee <__floatsisf+0x36>
    59ea:	60 ff       	sbrs	r22, 0
    59ec:	1b c0       	rjmp	.+54     	; 0x5a24 <__floatsisf+0x6c>
    59ee:	6f 5f       	subi	r22, 0xFF	; 255
    59f0:	7f 4f       	sbci	r23, 0xFF	; 255
    59f2:	8f 4f       	sbci	r24, 0xFF	; 255
    59f4:	9f 4f       	sbci	r25, 0xFF	; 255
    59f6:	16 c0       	rjmp	.+44     	; 0x5a24 <__floatsisf+0x6c>
    59f8:	88 23       	and	r24, r24
    59fa:	11 f0       	breq	.+4      	; 0x5a00 <__floatsisf+0x48>
    59fc:	96 e9       	ldi	r25, 0x96	; 150
    59fe:	11 c0       	rjmp	.+34     	; 0x5a22 <__floatsisf+0x6a>
    5a00:	77 23       	and	r23, r23
    5a02:	21 f0       	breq	.+8      	; 0x5a0c <__floatsisf+0x54>
    5a04:	9e e8       	ldi	r25, 0x8E	; 142
    5a06:	87 2f       	mov	r24, r23
    5a08:	76 2f       	mov	r23, r22
    5a0a:	05 c0       	rjmp	.+10     	; 0x5a16 <__floatsisf+0x5e>
    5a0c:	66 23       	and	r22, r22
    5a0e:	71 f0       	breq	.+28     	; 0x5a2c <__floatsisf+0x74>
    5a10:	96 e8       	ldi	r25, 0x86	; 134
    5a12:	86 2f       	mov	r24, r22
    5a14:	70 e0       	ldi	r23, 0x00	; 0
    5a16:	60 e0       	ldi	r22, 0x00	; 0
    5a18:	2a f0       	brmi	.+10     	; 0x5a24 <__floatsisf+0x6c>
    5a1a:	9a 95       	dec	r25
    5a1c:	66 0f       	add	r22, r22
    5a1e:	77 1f       	adc	r23, r23
    5a20:	88 1f       	adc	r24, r24
    5a22:	da f7       	brpl	.-10     	; 0x5a1a <__floatsisf+0x62>
    5a24:	88 0f       	add	r24, r24
    5a26:	96 95       	lsr	r25
    5a28:	87 95       	ror	r24
    5a2a:	97 f9       	bld	r25, 7
    5a2c:	08 95       	ret

00005a2e <__fp_cmp>:
    5a2e:	99 0f       	add	r25, r25
    5a30:	00 08       	sbc	r0, r0
    5a32:	55 0f       	add	r21, r21
    5a34:	aa 0b       	sbc	r26, r26
    5a36:	e0 e8       	ldi	r30, 0x80	; 128
    5a38:	fe ef       	ldi	r31, 0xFE	; 254
    5a3a:	16 16       	cp	r1, r22
    5a3c:	17 06       	cpc	r1, r23
    5a3e:	e8 07       	cpc	r30, r24
    5a40:	f9 07       	cpc	r31, r25
    5a42:	c0 f0       	brcs	.+48     	; 0x5a74 <__fp_cmp+0x46>
    5a44:	12 16       	cp	r1, r18
    5a46:	13 06       	cpc	r1, r19
    5a48:	e4 07       	cpc	r30, r20
    5a4a:	f5 07       	cpc	r31, r21
    5a4c:	98 f0       	brcs	.+38     	; 0x5a74 <__fp_cmp+0x46>
    5a4e:	62 1b       	sub	r22, r18
    5a50:	73 0b       	sbc	r23, r19
    5a52:	84 0b       	sbc	r24, r20
    5a54:	95 0b       	sbc	r25, r21
    5a56:	39 f4       	brne	.+14     	; 0x5a66 <__fp_cmp+0x38>
    5a58:	0a 26       	eor	r0, r26
    5a5a:	61 f0       	breq	.+24     	; 0x5a74 <__fp_cmp+0x46>
    5a5c:	23 2b       	or	r18, r19
    5a5e:	24 2b       	or	r18, r20
    5a60:	25 2b       	or	r18, r21
    5a62:	21 f4       	brne	.+8      	; 0x5a6c <__fp_cmp+0x3e>
    5a64:	08 95       	ret
    5a66:	0a 26       	eor	r0, r26
    5a68:	09 f4       	brne	.+2      	; 0x5a6c <__fp_cmp+0x3e>
    5a6a:	a1 40       	sbci	r26, 0x01	; 1
    5a6c:	a6 95       	lsr	r26
    5a6e:	8f ef       	ldi	r24, 0xFF	; 255
    5a70:	81 1d       	adc	r24, r1
    5a72:	81 1d       	adc	r24, r1
    5a74:	08 95       	ret

00005a76 <__fp_inf>:
    5a76:	97 f9       	bld	r25, 7
    5a78:	9f 67       	ori	r25, 0x7F	; 127
    5a7a:	80 e8       	ldi	r24, 0x80	; 128
    5a7c:	70 e0       	ldi	r23, 0x00	; 0
    5a7e:	60 e0       	ldi	r22, 0x00	; 0
    5a80:	08 95       	ret

00005a82 <__fp_nan>:
    5a82:	9f ef       	ldi	r25, 0xFF	; 255
    5a84:	80 ec       	ldi	r24, 0xC0	; 192
    5a86:	08 95       	ret

00005a88 <__fp_pscA>:
    5a88:	00 24       	eor	r0, r0
    5a8a:	0a 94       	dec	r0
    5a8c:	16 16       	cp	r1, r22
    5a8e:	17 06       	cpc	r1, r23
    5a90:	18 06       	cpc	r1, r24
    5a92:	09 06       	cpc	r0, r25
    5a94:	08 95       	ret

00005a96 <__fp_pscB>:
    5a96:	00 24       	eor	r0, r0
    5a98:	0a 94       	dec	r0
    5a9a:	12 16       	cp	r1, r18
    5a9c:	13 06       	cpc	r1, r19
    5a9e:	14 06       	cpc	r1, r20
    5aa0:	05 06       	cpc	r0, r21
    5aa2:	08 95       	ret

00005aa4 <__fp_round>:
    5aa4:	09 2e       	mov	r0, r25
    5aa6:	03 94       	inc	r0
    5aa8:	00 0c       	add	r0, r0
    5aaa:	11 f4       	brne	.+4      	; 0x5ab0 <__fp_round+0xc>
    5aac:	88 23       	and	r24, r24
    5aae:	52 f0       	brmi	.+20     	; 0x5ac4 <__fp_round+0x20>
    5ab0:	bb 0f       	add	r27, r27
    5ab2:	40 f4       	brcc	.+16     	; 0x5ac4 <__fp_round+0x20>
    5ab4:	bf 2b       	or	r27, r31
    5ab6:	11 f4       	brne	.+4      	; 0x5abc <__fp_round+0x18>
    5ab8:	60 ff       	sbrs	r22, 0
    5aba:	04 c0       	rjmp	.+8      	; 0x5ac4 <__fp_round+0x20>
    5abc:	6f 5f       	subi	r22, 0xFF	; 255
    5abe:	7f 4f       	sbci	r23, 0xFF	; 255
    5ac0:	8f 4f       	sbci	r24, 0xFF	; 255
    5ac2:	9f 4f       	sbci	r25, 0xFF	; 255
    5ac4:	08 95       	ret

00005ac6 <__fp_split3>:
    5ac6:	57 fd       	sbrc	r21, 7
    5ac8:	90 58       	subi	r25, 0x80	; 128
    5aca:	44 0f       	add	r20, r20
    5acc:	55 1f       	adc	r21, r21
    5ace:	59 f0       	breq	.+22     	; 0x5ae6 <__fp_splitA+0x10>
    5ad0:	5f 3f       	cpi	r21, 0xFF	; 255
    5ad2:	71 f0       	breq	.+28     	; 0x5af0 <__fp_splitA+0x1a>
    5ad4:	47 95       	ror	r20

00005ad6 <__fp_splitA>:
    5ad6:	88 0f       	add	r24, r24
    5ad8:	97 fb       	bst	r25, 7
    5ada:	99 1f       	adc	r25, r25
    5adc:	61 f0       	breq	.+24     	; 0x5af6 <__fp_splitA+0x20>
    5ade:	9f 3f       	cpi	r25, 0xFF	; 255
    5ae0:	79 f0       	breq	.+30     	; 0x5b00 <__fp_splitA+0x2a>
    5ae2:	87 95       	ror	r24
    5ae4:	08 95       	ret
    5ae6:	12 16       	cp	r1, r18
    5ae8:	13 06       	cpc	r1, r19
    5aea:	14 06       	cpc	r1, r20
    5aec:	55 1f       	adc	r21, r21
    5aee:	f2 cf       	rjmp	.-28     	; 0x5ad4 <__fp_split3+0xe>
    5af0:	46 95       	lsr	r20
    5af2:	f1 df       	rcall	.-30     	; 0x5ad6 <__fp_splitA>
    5af4:	08 c0       	rjmp	.+16     	; 0x5b06 <__fp_splitA+0x30>
    5af6:	16 16       	cp	r1, r22
    5af8:	17 06       	cpc	r1, r23
    5afa:	18 06       	cpc	r1, r24
    5afc:	99 1f       	adc	r25, r25
    5afe:	f1 cf       	rjmp	.-30     	; 0x5ae2 <__fp_splitA+0xc>
    5b00:	86 95       	lsr	r24
    5b02:	71 05       	cpc	r23, r1
    5b04:	61 05       	cpc	r22, r1
    5b06:	08 94       	sec
    5b08:	08 95       	ret

00005b0a <__fp_zero>:
    5b0a:	e8 94       	clt

00005b0c <__fp_szero>:
    5b0c:	bb 27       	eor	r27, r27
    5b0e:	66 27       	eor	r22, r22
    5b10:	77 27       	eor	r23, r23
    5b12:	cb 01       	movw	r24, r22
    5b14:	97 f9       	bld	r25, 7
    5b16:	08 95       	ret

00005b18 <__cxa_pure_virtual>:
    5b18:	0e 94 85 37 	call	0x6f0a	; 0x6f0a <abort>

00005b1c <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    5b1c:	1f 92       	push	r1
    5b1e:	0f 92       	push	r0
    5b20:	0f b6       	in	r0, 0x3f	; 63
    5b22:	0f 92       	push	r0
    5b24:	11 24       	eor	r1, r1
    5b26:	2f 93       	push	r18
    5b28:	8f 93       	push	r24
    5b2a:	9f 93       	push	r25
    5b2c:	ef 93       	push	r30
    5b2e:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    5b30:	e0 91 0c 0b 	lds	r30, 0x0B0C	; 0x800b0c <Serial+0x10>
    5b34:	f0 91 0d 0b 	lds	r31, 0x0B0D	; 0x800b0d <Serial+0x11>
    5b38:	80 81       	ld	r24, Z
    5b3a:	e0 91 12 0b 	lds	r30, 0x0B12	; 0x800b12 <Serial+0x16>
    5b3e:	f0 91 13 0b 	lds	r31, 0x0B13	; 0x800b13 <Serial+0x17>
    5b42:	82 fd       	sbrc	r24, 2
    5b44:	12 c0       	rjmp	.+36     	; 0x5b6a <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    5b46:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    5b48:	80 91 15 0b 	lds	r24, 0x0B15	; 0x800b15 <Serial+0x19>
    5b4c:	8f 5f       	subi	r24, 0xFF	; 255
    5b4e:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    5b50:	20 91 16 0b 	lds	r18, 0x0B16	; 0x800b16 <Serial+0x1a>
    5b54:	82 17       	cp	r24, r18
    5b56:	51 f0       	breq	.+20     	; 0x5b6c <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    5b58:	e0 91 15 0b 	lds	r30, 0x0B15	; 0x800b15 <Serial+0x19>
    5b5c:	f0 e0       	ldi	r31, 0x00	; 0
    5b5e:	e4 50       	subi	r30, 0x04	; 4
    5b60:	f5 4f       	sbci	r31, 0xF5	; 245
    5b62:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    5b64:	80 93 15 0b 	sts	0x0B15, r24	; 0x800b15 <Serial+0x19>
    5b68:	01 c0       	rjmp	.+2      	; 0x5b6c <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    5b6a:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    5b6c:	ff 91       	pop	r31
    5b6e:	ef 91       	pop	r30
    5b70:	9f 91       	pop	r25
    5b72:	8f 91       	pop	r24
    5b74:	2f 91       	pop	r18
    5b76:	0f 90       	pop	r0
    5b78:	0f be       	out	0x3f, r0	; 63
    5b7a:	0f 90       	pop	r0
    5b7c:	1f 90       	pop	r1
    5b7e:	18 95       	reti

00005b80 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    5b80:	1f 92       	push	r1
    5b82:	0f 92       	push	r0
    5b84:	0f b6       	in	r0, 0x3f	; 63
    5b86:	0f 92       	push	r0
    5b88:	11 24       	eor	r1, r1
    5b8a:	2f 93       	push	r18
    5b8c:	3f 93       	push	r19
    5b8e:	4f 93       	push	r20
    5b90:	5f 93       	push	r21
    5b92:	6f 93       	push	r22
    5b94:	7f 93       	push	r23
    5b96:	8f 93       	push	r24
    5b98:	9f 93       	push	r25
    5b9a:	af 93       	push	r26
    5b9c:	bf 93       	push	r27
    5b9e:	ef 93       	push	r30
    5ba0:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    5ba2:	8c ef       	ldi	r24, 0xFC	; 252
    5ba4:	9a e0       	ldi	r25, 0x0A	; 10
    5ba6:	9d d6       	rcall	.+3386   	; 0x68e2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    5ba8:	ff 91       	pop	r31
    5baa:	ef 91       	pop	r30
    5bac:	bf 91       	pop	r27
    5bae:	af 91       	pop	r26
    5bb0:	9f 91       	pop	r25
    5bb2:	8f 91       	pop	r24
    5bb4:	7f 91       	pop	r23
    5bb6:	6f 91       	pop	r22
    5bb8:	5f 91       	pop	r21
    5bba:	4f 91       	pop	r20
    5bbc:	3f 91       	pop	r19
    5bbe:	2f 91       	pop	r18
    5bc0:	0f 90       	pop	r0
    5bc2:	0f be       	out	0x3f, r0	; 63
    5bc4:	0f 90       	pop	r0
    5bc6:	1f 90       	pop	r1
    5bc8:	18 95       	reti

00005bca <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    5bca:	8c ef       	ldi	r24, 0xFC	; 252
    5bcc:	9a e0       	ldi	r25, 0x0A	; 10
    5bce:	3f d6       	rcall	.+3198   	; 0x684e <_ZN14HardwareSerial9availableEv>
    5bd0:	21 e0       	ldi	r18, 0x01	; 1
    5bd2:	89 2b       	or	r24, r25
    5bd4:	09 f4       	brne	.+2      	; 0x5bd8 <_Z17Serial0_availablev+0xe>
    5bd6:	20 e0       	ldi	r18, 0x00	; 0
}
    5bd8:	82 2f       	mov	r24, r18
    5bda:	08 95       	ret

00005bdc <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    5bdc:	ec ef       	ldi	r30, 0xFC	; 252
    5bde:	fa e0       	ldi	r31, 0x0A	; 10
    5be0:	13 82       	std	Z+3, r1	; 0x03
    5be2:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    5be4:	88 ee       	ldi	r24, 0xE8	; 232
    5be6:	93 e0       	ldi	r25, 0x03	; 3
    5be8:	a0 e0       	ldi	r26, 0x00	; 0
    5bea:	b0 e0       	ldi	r27, 0x00	; 0
    5bec:	84 83       	std	Z+4, r24	; 0x04
    5bee:	95 83       	std	Z+5, r25	; 0x05
    5bf0:	a6 83       	std	Z+6, r26	; 0x06
    5bf2:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    5bf4:	80 e9       	ldi	r24, 0x90	; 144
    5bf6:	98 e0       	ldi	r25, 0x08	; 8
    5bf8:	91 83       	std	Z+1, r25	; 0x01
    5bfa:	80 83       	st	Z, r24
    5bfc:	85 ec       	ldi	r24, 0xC5	; 197
    5bfe:	90 e0       	ldi	r25, 0x00	; 0
    5c00:	95 87       	std	Z+13, r25	; 0x0d
    5c02:	84 87       	std	Z+12, r24	; 0x0c
    5c04:	84 ec       	ldi	r24, 0xC4	; 196
    5c06:	90 e0       	ldi	r25, 0x00	; 0
    5c08:	97 87       	std	Z+15, r25	; 0x0f
    5c0a:	86 87       	std	Z+14, r24	; 0x0e
    5c0c:	80 ec       	ldi	r24, 0xC0	; 192
    5c0e:	90 e0       	ldi	r25, 0x00	; 0
    5c10:	91 8b       	std	Z+17, r25	; 0x11
    5c12:	80 8b       	std	Z+16, r24	; 0x10
    5c14:	81 ec       	ldi	r24, 0xC1	; 193
    5c16:	90 e0       	ldi	r25, 0x00	; 0
    5c18:	93 8b       	std	Z+19, r25	; 0x13
    5c1a:	82 8b       	std	Z+18, r24	; 0x12
    5c1c:	82 ec       	ldi	r24, 0xC2	; 194
    5c1e:	90 e0       	ldi	r25, 0x00	; 0
    5c20:	95 8b       	std	Z+21, r25	; 0x15
    5c22:	84 8b       	std	Z+20, r24	; 0x14
    5c24:	86 ec       	ldi	r24, 0xC6	; 198
    5c26:	90 e0       	ldi	r25, 0x00	; 0
    5c28:	97 8b       	std	Z+23, r25	; 0x17
    5c2a:	86 8b       	std	Z+22, r24	; 0x16
    5c2c:	11 8e       	std	Z+25, r1	; 0x19
    5c2e:	12 8e       	std	Z+26, r1	; 0x1a
    5c30:	13 8e       	std	Z+27, r1	; 0x1b
    5c32:	14 8e       	std	Z+28, r1	; 0x1c
    5c34:	08 95       	ret

00005c36 <_ZNK9IPAddress7printToER5Print>:
        // Too few dots (there must be 3 dots)
        return false;
    }
    _address.bytes[3] = acc;
    return true;
}
    5c36:	8f 92       	push	r8
    5c38:	9f 92       	push	r9
    5c3a:	af 92       	push	r10
    5c3c:	bf 92       	push	r11
    5c3e:	cf 92       	push	r12
    5c40:	df 92       	push	r13
    5c42:	ef 92       	push	r14
    5c44:	ff 92       	push	r15
    5c46:	0f 93       	push	r16
    5c48:	1f 93       	push	r17
    5c4a:	cf 93       	push	r28
    5c4c:	df 93       	push	r29
    5c4e:	7c 01       	movw	r14, r24
    5c50:	8b 01       	movw	r16, r22
    5c52:	4c 01       	movw	r8, r24
    5c54:	82 e0       	ldi	r24, 0x02	; 2
    5c56:	88 0e       	add	r8, r24
    5c58:	91 1c       	adc	r9, r1
    5c5a:	57 01       	movw	r10, r14
    5c5c:	e5 e0       	ldi	r30, 0x05	; 5
    5c5e:	ae 0e       	add	r10, r30
    5c60:	b1 1c       	adc	r11, r1
    5c62:	c0 e0       	ldi	r28, 0x00	; 0
    5c64:	d0 e0       	ldi	r29, 0x00	; 0
    5c66:	f4 01       	movw	r30, r8
    5c68:	61 91       	ld	r22, Z+
    5c6a:	4f 01       	movw	r8, r30
    5c6c:	4a e0       	ldi	r20, 0x0A	; 10
    5c6e:	50 e0       	ldi	r21, 0x00	; 0
    5c70:	c8 01       	movw	r24, r16
    5c72:	4b d1       	rcall	.+662    	; 0x5f0a <_ZN5Print5printEhi>
    5c74:	6c 01       	movw	r12, r24
    5c76:	6e e2       	ldi	r22, 0x2E	; 46
    5c78:	c8 01       	movw	r24, r16
    5c7a:	ba d0       	rcall	.+372    	; 0x5df0 <_ZN5Print5printEc>
    5c7c:	8c 0d       	add	r24, r12
    5c7e:	9d 1d       	adc	r25, r13
    5c80:	c8 0f       	add	r28, r24
    5c82:	d9 1f       	adc	r29, r25
    5c84:	8a 14       	cp	r8, r10
    5c86:	9b 04       	cpc	r9, r11
    5c88:	71 f7       	brne	.-36     	; 0x5c66 <_ZNK9IPAddress7printToER5Print+0x30>
    5c8a:	4a e0       	ldi	r20, 0x0A	; 10
    5c8c:	50 e0       	ldi	r21, 0x00	; 0
    5c8e:	f7 01       	movw	r30, r14
    5c90:	65 81       	ldd	r22, Z+5	; 0x05
    5c92:	c8 01       	movw	r24, r16
    5c94:	3a d1       	rcall	.+628    	; 0x5f0a <_ZN5Print5printEhi>
    5c96:	8c 0f       	add	r24, r28
    5c98:	9d 1f       	adc	r25, r29
    5c9a:	df 91       	pop	r29
    5c9c:	cf 91       	pop	r28
    5c9e:	1f 91       	pop	r17
    5ca0:	0f 91       	pop	r16
    5ca2:	ff 90       	pop	r15
    5ca4:	ef 90       	pop	r14
    5ca6:	df 90       	pop	r13
    5ca8:	cf 90       	pop	r12
    5caa:	bf 90       	pop	r11
    5cac:	af 90       	pop	r10
    5cae:	9f 90       	pop	r9
    5cb0:	8f 90       	pop	r8
    5cb2:	08 95       	ret

00005cb4 <_ZN9IPAddressC1Ev>:
    5cb4:	2e e7       	ldi	r18, 0x7E	; 126
    5cb6:	38 e0       	ldi	r19, 0x08	; 8
    5cb8:	fc 01       	movw	r30, r24
    5cba:	31 83       	std	Z+1, r19	; 0x01
    5cbc:	20 83       	st	Z, r18
    5cbe:	12 82       	std	Z+2, r1	; 0x02
    5cc0:	13 82       	std	Z+3, r1	; 0x03
    5cc2:	14 82       	std	Z+4, r1	; 0x04
    5cc4:	15 82       	std	Z+5, r1	; 0x05
    5cc6:	08 95       	ret

00005cc8 <_ZN9IPAddressC1Ehhhh>:
    5cc8:	0f 93       	push	r16
    5cca:	fc 01       	movw	r30, r24
    5ccc:	8e e7       	ldi	r24, 0x7E	; 126
    5cce:	98 e0       	ldi	r25, 0x08	; 8
    5cd0:	91 83       	std	Z+1, r25	; 0x01
    5cd2:	80 83       	st	Z, r24
    5cd4:	62 83       	std	Z+2, r22	; 0x02
    5cd6:	43 83       	std	Z+3, r20	; 0x03
    5cd8:	24 83       	std	Z+4, r18	; 0x04
    5cda:	05 83       	std	Z+5, r16	; 0x05
    5cdc:	0f 91       	pop	r16
    5cde:	08 95       	ret

00005ce0 <_ZN9IPAddressaSEPKh>:

IPAddress& IPAddress::operator=(const uint8_t *address)
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
    5ce0:	dc 01       	movw	r26, r24
    5ce2:	12 96       	adiw	r26, 0x02	; 2
    5ce4:	24 e0       	ldi	r18, 0x04	; 4
    5ce6:	fb 01       	movw	r30, r22
    5ce8:	01 90       	ld	r0, Z+
    5cea:	0d 92       	st	X+, r0
    5cec:	2a 95       	dec	r18
    5cee:	e1 f7       	brne	.-8      	; 0x5ce8 <_ZN9IPAddressaSEPKh+0x8>
    return *this;
}
    5cf0:	08 95       	ret

00005cf2 <initVariant>:
    5cf2:	08 95       	ret

00005cf4 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    5cf4:	df d1       	rcall	.+958    	; 0x60b4 <init>

	initVariant();
    5cf6:	fd df       	rcall	.-6      	; 0x5cf2 <initVariant>
    5cf8:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <setup>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    5cfc:	c4 e6       	ldi	r28, 0x64	; 100
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    5cfe:	d4 e3       	ldi	r29, 0x34	; 52
    5d00:	0e 94 b7 09 	call	0x136e	; 0x136e <loop>
#endif
	
	setup();
    
	for (;;) {
		loop();
    5d04:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
    5d06:	e1 f3       	breq	.-8      	; 0x5d00 <main+0xc>
    5d08:	df d5       	rcall	.+3006   	; 0x68c8 <_Z14serialEventRunv>
    5d0a:	fa cf       	rjmp	.-12     	; 0x5d00 <main+0xc>

00005d0c <_ZN5Print5writeEPKhj>:
    5d0c:	cf 92       	push	r12
size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    5d0e:	df 92       	push	r13
    5d10:	ef 92       	push	r14
    5d12:	ff 92       	push	r15
    5d14:	0f 93       	push	r16
    5d16:	1f 93       	push	r17
    5d18:	cf 93       	push	r28
    5d1a:	df 93       	push	r29
    5d1c:	6c 01       	movw	r12, r24
    5d1e:	7a 01       	movw	r14, r20
    5d20:	8b 01       	movw	r16, r22
    5d22:	c0 e0       	ldi	r28, 0x00	; 0
    5d24:	d0 e0       	ldi	r29, 0x00	; 0
    5d26:	ce 15       	cp	r28, r14
    5d28:	df 05       	cpc	r29, r15
    5d2a:	81 f0       	breq	.+32     	; 0x5d4c <_ZN5Print5writeEPKhj+0x40>
    5d2c:	d8 01       	movw	r26, r16
    5d2e:	6d 91       	ld	r22, X+
    5d30:	8d 01       	movw	r16, r26
    5d32:	d6 01       	movw	r26, r12
    5d34:	ed 91       	ld	r30, X+
    5d36:	fc 91       	ld	r31, X
    5d38:	01 90       	ld	r0, Z+
    5d3a:	f0 81       	ld	r31, Z
    5d3c:	e0 2d       	mov	r30, r0
    5d3e:	c6 01       	movw	r24, r12
    5d40:	09 95       	icall
    5d42:	89 2b       	or	r24, r25
    5d44:	11 f0       	breq	.+4      	; 0x5d4a <_ZN5Print5writeEPKhj+0x3e>
    5d46:	21 96       	adiw	r28, 0x01	; 1
    5d48:	ee cf       	rjmp	.-36     	; 0x5d26 <_ZN5Print5writeEPKhj+0x1a>
    5d4a:	7e 01       	movw	r14, r28
    5d4c:	c7 01       	movw	r24, r14
    5d4e:	df 91       	pop	r29
    5d50:	cf 91       	pop	r28
    5d52:	1f 91       	pop	r17
    5d54:	0f 91       	pop	r16
    5d56:	ff 90       	pop	r15
    5d58:	ef 90       	pop	r14
    5d5a:	df 90       	pop	r13
    5d5c:	cf 90       	pop	r12
    5d5e:	08 95       	ret

00005d60 <_ZN5Print5writeEPKc>:
    5d60:	61 15       	cp	r22, r1
    5d62:	71 05       	cpc	r23, r1
    5d64:	79 f0       	breq	.+30     	; 0x5d84 <_ZN5Print5writeEPKc+0x24>
    5d66:	fb 01       	movw	r30, r22
    5d68:	01 90       	ld	r0, Z+
    5d6a:	00 20       	and	r0, r0
    5d6c:	e9 f7       	brne	.-6      	; 0x5d68 <_ZN5Print5writeEPKc+0x8>
    5d6e:	31 97       	sbiw	r30, 0x01	; 1
    5d70:	af 01       	movw	r20, r30
    5d72:	46 1b       	sub	r20, r22
    5d74:	57 0b       	sbc	r21, r23
    5d76:	dc 01       	movw	r26, r24
    5d78:	ed 91       	ld	r30, X+
    5d7a:	fc 91       	ld	r31, X
    5d7c:	02 80       	ldd	r0, Z+2	; 0x02
    5d7e:	f3 81       	ldd	r31, Z+3	; 0x03
    5d80:	e0 2d       	mov	r30, r0
    5d82:	09 94       	ijmp
    5d84:	80 e0       	ldi	r24, 0x00	; 0
    5d86:	90 e0       	ldi	r25, 0x00	; 0
    5d88:	08 95       	ret

00005d8a <_ZN5Print5printEPK19__FlashStringHelper>:
    5d8a:	ef 92       	push	r14
    5d8c:	ff 92       	push	r15
    5d8e:	0f 93       	push	r16
    5d90:	1f 93       	push	r17
    5d92:	cf 93       	push	r28
    5d94:	df 93       	push	r29
    5d96:	8c 01       	movw	r16, r24
    5d98:	7b 01       	movw	r14, r22
    5d9a:	c0 e0       	ldi	r28, 0x00	; 0
    5d9c:	d0 e0       	ldi	r29, 0x00	; 0
    5d9e:	f7 01       	movw	r30, r14
    5da0:	ec 0f       	add	r30, r28
    5da2:	fd 1f       	adc	r31, r29
    5da4:	64 91       	lpm	r22, Z
    5da6:	66 23       	and	r22, r22
    5da8:	61 f0       	breq	.+24     	; 0x5dc2 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    5daa:	d8 01       	movw	r26, r16
    5dac:	ed 91       	ld	r30, X+
    5dae:	fc 91       	ld	r31, X
    5db0:	01 90       	ld	r0, Z+
    5db2:	f0 81       	ld	r31, Z
    5db4:	e0 2d       	mov	r30, r0
    5db6:	c8 01       	movw	r24, r16
    5db8:	09 95       	icall
    5dba:	89 2b       	or	r24, r25
    5dbc:	11 f0       	breq	.+4      	; 0x5dc2 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    5dbe:	21 96       	adiw	r28, 0x01	; 1
    5dc0:	ee cf       	rjmp	.-36     	; 0x5d9e <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    5dc2:	ce 01       	movw	r24, r28
    5dc4:	df 91       	pop	r29
    5dc6:	cf 91       	pop	r28
    5dc8:	1f 91       	pop	r17
    5dca:	0f 91       	pop	r16
    5dcc:	ff 90       	pop	r15
    5dce:	ef 90       	pop	r14
    5dd0:	08 95       	ret

00005dd2 <_ZN5Print5printERK6String>:
    5dd2:	db 01       	movw	r26, r22
    5dd4:	14 96       	adiw	r26, 0x04	; 4
    5dd6:	4d 91       	ld	r20, X+
    5dd8:	5c 91       	ld	r21, X
    5dda:	15 97       	sbiw	r26, 0x05	; 5
    5ddc:	6d 91       	ld	r22, X+
    5dde:	7c 91       	ld	r23, X
    5de0:	dc 01       	movw	r26, r24
    5de2:	ed 91       	ld	r30, X+
    5de4:	fc 91       	ld	r31, X
    5de6:	02 80       	ldd	r0, Z+2	; 0x02
    5de8:	f3 81       	ldd	r31, Z+3	; 0x03
    5dea:	e0 2d       	mov	r30, r0
    5dec:	09 94       	ijmp

00005dee <_ZN5Print5printEPKc>:
    5dee:	b8 cf       	rjmp	.-144    	; 0x5d60 <_ZN5Print5writeEPKc>

00005df0 <_ZN5Print5printEc>:
    5df0:	dc 01       	movw	r26, r24
    5df2:	ed 91       	ld	r30, X+
    5df4:	fc 91       	ld	r31, X
    5df6:	01 90       	ld	r0, Z+
    5df8:	f0 81       	ld	r31, Z
    5dfa:	e0 2d       	mov	r30, r0
    5dfc:	09 94       	ijmp

00005dfe <_ZN5Print7printlnEv>:
    5dfe:	68 e6       	ldi	r22, 0x68	; 104
    5e00:	74 e0       	ldi	r23, 0x04	; 4
    5e02:	ae cf       	rjmp	.-164    	; 0x5d60 <_ZN5Print5writeEPKc>

00005e04 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    5e04:	0f 93       	push	r16
    5e06:	1f 93       	push	r17
    5e08:	cf 93       	push	r28
    5e0a:	df 93       	push	r29
    5e0c:	ec 01       	movw	r28, r24
    5e0e:	bd df       	rcall	.-134    	; 0x5d8a <_ZN5Print5printEPK19__FlashStringHelper>
    5e10:	8c 01       	movw	r16, r24
    5e12:	ce 01       	movw	r24, r28
    5e14:	f4 df       	rcall	.-24     	; 0x5dfe <_ZN5Print7printlnEv>
    5e16:	80 0f       	add	r24, r16
    5e18:	91 1f       	adc	r25, r17
    5e1a:	df 91       	pop	r29
    5e1c:	cf 91       	pop	r28
    5e1e:	1f 91       	pop	r17
    5e20:	0f 91       	pop	r16
    5e22:	08 95       	ret

00005e24 <_ZN5Print7printlnERK6String>:
    5e24:	0f 93       	push	r16
    5e26:	1f 93       	push	r17
    5e28:	cf 93       	push	r28
    5e2a:	df 93       	push	r29
    5e2c:	ec 01       	movw	r28, r24
    5e2e:	d1 df       	rcall	.-94     	; 0x5dd2 <_ZN5Print5printERK6String>
    5e30:	8c 01       	movw	r16, r24
    5e32:	ce 01       	movw	r24, r28
    5e34:	e4 df       	rcall	.-56     	; 0x5dfe <_ZN5Print7printlnEv>
    5e36:	80 0f       	add	r24, r16
    5e38:	91 1f       	adc	r25, r17
    5e3a:	df 91       	pop	r29
    5e3c:	cf 91       	pop	r28
    5e3e:	1f 91       	pop	r17
    5e40:	0f 91       	pop	r16
    5e42:	08 95       	ret

00005e44 <_ZN5Print7printlnEPKc>:
    5e44:	0f 93       	push	r16
    5e46:	1f 93       	push	r17
    5e48:	cf 93       	push	r28
    5e4a:	df 93       	push	r29
    5e4c:	ec 01       	movw	r28, r24
    5e4e:	88 df       	rcall	.-240    	; 0x5d60 <_ZN5Print5writeEPKc>
    5e50:	8c 01       	movw	r16, r24
    5e52:	ce 01       	movw	r24, r28
    5e54:	d4 df       	rcall	.-88     	; 0x5dfe <_ZN5Print7printlnEv>
    5e56:	80 0f       	add	r24, r16
    5e58:	91 1f       	adc	r25, r17
    5e5a:	df 91       	pop	r29
    5e5c:	cf 91       	pop	r28
    5e5e:	1f 91       	pop	r17
    5e60:	0f 91       	pop	r16
    5e62:	08 95       	ret

00005e64 <_ZN5Print11printNumberEmh>:
    5e64:	8f 92       	push	r8
    5e66:	9f 92       	push	r9
    5e68:	af 92       	push	r10
    5e6a:	bf 92       	push	r11
    5e6c:	ef 92       	push	r14
    5e6e:	ff 92       	push	r15
    5e70:	0f 93       	push	r16
    5e72:	1f 93       	push	r17
    5e74:	cf 93       	push	r28
    5e76:	df 93       	push	r29
    5e78:	cd b7       	in	r28, 0x3d	; 61
    5e7a:	de b7       	in	r29, 0x3e	; 62
    5e7c:	a1 97       	sbiw	r28, 0x21	; 33
    5e7e:	0f b6       	in	r0, 0x3f	; 63
    5e80:	f8 94       	cli
    5e82:	de bf       	out	0x3e, r29	; 62
    5e84:	0f be       	out	0x3f, r0	; 63
    5e86:	cd bf       	out	0x3d, r28	; 61
    5e88:	7c 01       	movw	r14, r24
    5e8a:	fa 01       	movw	r30, r20
    5e8c:	cb 01       	movw	r24, r22
    5e8e:	19 a2       	std	Y+33, r1	; 0x21
    5e90:	22 30       	cpi	r18, 0x02	; 2
    5e92:	08 f4       	brcc	.+2      	; 0x5e96 <_ZN5Print11printNumberEmh+0x32>
    5e94:	2a e0       	ldi	r18, 0x0A	; 10
    5e96:	8e 01       	movw	r16, r28
    5e98:	0f 5d       	subi	r16, 0xDF	; 223
    5e9a:	1f 4f       	sbci	r17, 0xFF	; 255
    5e9c:	82 2e       	mov	r8, r18
    5e9e:	91 2c       	mov	r9, r1
    5ea0:	a1 2c       	mov	r10, r1
    5ea2:	b1 2c       	mov	r11, r1
    5ea4:	bf 01       	movw	r22, r30
    5ea6:	a5 01       	movw	r20, r10
    5ea8:	94 01       	movw	r18, r8
    5eaa:	cb d5       	rcall	.+2966   	; 0x6a42 <__udivmodsi4>
    5eac:	f9 01       	movw	r30, r18
    5eae:	ca 01       	movw	r24, r20
    5eb0:	01 50       	subi	r16, 0x01	; 1
    5eb2:	11 09       	sbc	r17, r1
    5eb4:	6a 30       	cpi	r22, 0x0A	; 10
    5eb6:	10 f4       	brcc	.+4      	; 0x5ebc <_ZN5Print11printNumberEmh+0x58>
    5eb8:	60 5d       	subi	r22, 0xD0	; 208
    5eba:	01 c0       	rjmp	.+2      	; 0x5ebe <_ZN5Print11printNumberEmh+0x5a>
    5ebc:	69 5c       	subi	r22, 0xC9	; 201
    5ebe:	d8 01       	movw	r26, r16
    5ec0:	6c 93       	st	X, r22
    5ec2:	23 2b       	or	r18, r19
    5ec4:	24 2b       	or	r18, r20
    5ec6:	25 2b       	or	r18, r21
    5ec8:	69 f7       	brne	.-38     	; 0x5ea4 <_ZN5Print11printNumberEmh+0x40>
    5eca:	b8 01       	movw	r22, r16
    5ecc:	c7 01       	movw	r24, r14
    5ece:	48 df       	rcall	.-368    	; 0x5d60 <_ZN5Print5writeEPKc>
    5ed0:	a1 96       	adiw	r28, 0x21	; 33
    5ed2:	0f b6       	in	r0, 0x3f	; 63
    5ed4:	f8 94       	cli
    5ed6:	de bf       	out	0x3e, r29	; 62
    5ed8:	0f be       	out	0x3f, r0	; 63
    5eda:	cd bf       	out	0x3d, r28	; 61
    5edc:	df 91       	pop	r29
    5ede:	cf 91       	pop	r28
    5ee0:	1f 91       	pop	r17
    5ee2:	0f 91       	pop	r16
    5ee4:	ff 90       	pop	r15
    5ee6:	ef 90       	pop	r14
    5ee8:	bf 90       	pop	r11
    5eea:	af 90       	pop	r10
    5eec:	9f 90       	pop	r9
    5eee:	8f 90       	pop	r8
    5ef0:	08 95       	ret

00005ef2 <_ZN5Print5printEmi>:
    5ef2:	21 15       	cp	r18, r1
    5ef4:	31 05       	cpc	r19, r1
    5ef6:	41 f4       	brne	.+16     	; 0x5f08 <_ZN5Print5printEmi+0x16>
    5ef8:	dc 01       	movw	r26, r24
    5efa:	ed 91       	ld	r30, X+
    5efc:	fc 91       	ld	r31, X
    5efe:	01 90       	ld	r0, Z+
    5f00:	f0 81       	ld	r31, Z
    5f02:	e0 2d       	mov	r30, r0
    5f04:	64 2f       	mov	r22, r20
    5f06:	09 94       	ijmp
    5f08:	ad cf       	rjmp	.-166    	; 0x5e64 <_ZN5Print11printNumberEmh>

00005f0a <_ZN5Print5printEhi>:
    5f0a:	9a 01       	movw	r18, r20
    5f0c:	46 2f       	mov	r20, r22
    5f0e:	50 e0       	ldi	r21, 0x00	; 0
    5f10:	60 e0       	ldi	r22, 0x00	; 0
    5f12:	70 e0       	ldi	r23, 0x00	; 0
    5f14:	ee cf       	rjmp	.-36     	; 0x5ef2 <_ZN5Print5printEmi>

00005f16 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    5f16:	0f 93       	push	r16
    5f18:	1f 93       	push	r17
    5f1a:	cf 93       	push	r28
    5f1c:	df 93       	push	r29
    5f1e:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    5f20:	e8 df       	rcall	.-48     	; 0x5ef2 <_ZN5Print5printEmi>
    5f22:	8c 01       	movw	r16, r24
  n += println();
    5f24:	ce 01       	movw	r24, r28
    5f26:	6b df       	rcall	.-298    	; 0x5dfe <_ZN5Print7printlnEv>
  return n;
}
    5f28:	80 0f       	add	r24, r16
    5f2a:	91 1f       	adc	r25, r17
    5f2c:	df 91       	pop	r29
    5f2e:	cf 91       	pop	r28
    5f30:	1f 91       	pop	r17
    5f32:	0f 91       	pop	r16
    5f34:	08 95       	ret

00005f36 <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    5f36:	1f 92       	push	r1
    5f38:	0f 92       	push	r0
    5f3a:	0f b6       	in	r0, 0x3f	; 63
    5f3c:	0f 92       	push	r0
    5f3e:	11 24       	eor	r1, r1
    5f40:	2f 93       	push	r18
    5f42:	3f 93       	push	r19
    5f44:	8f 93       	push	r24
    5f46:	9f 93       	push	r25
    5f48:	af 93       	push	r26
    5f4a:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    5f4c:	80 91 9a 0b 	lds	r24, 0x0B9A	; 0x800b9a <timer0_millis>
    5f50:	90 91 9b 0b 	lds	r25, 0x0B9B	; 0x800b9b <timer0_millis+0x1>
    5f54:	a0 91 9c 0b 	lds	r26, 0x0B9C	; 0x800b9c <timer0_millis+0x2>
    5f58:	b0 91 9d 0b 	lds	r27, 0x0B9D	; 0x800b9d <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    5f5c:	30 91 99 0b 	lds	r19, 0x0B99	; 0x800b99 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    5f60:	23 e0       	ldi	r18, 0x03	; 3
    5f62:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    5f64:	2d 37       	cpi	r18, 0x7D	; 125
    5f66:	20 f4       	brcc	.+8      	; 0x5f70 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    5f68:	01 96       	adiw	r24, 0x01	; 1
    5f6a:	a1 1d       	adc	r26, r1
    5f6c:	b1 1d       	adc	r27, r1
    5f6e:	05 c0       	rjmp	.+10     	; 0x5f7a <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    5f70:	26 e8       	ldi	r18, 0x86	; 134
    5f72:	23 0f       	add	r18, r19
		m += 1;
    5f74:	02 96       	adiw	r24, 0x02	; 2
    5f76:	a1 1d       	adc	r26, r1
    5f78:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    5f7a:	20 93 99 0b 	sts	0x0B99, r18	; 0x800b99 <timer0_fract>
	timer0_millis = m;
    5f7e:	80 93 9a 0b 	sts	0x0B9A, r24	; 0x800b9a <timer0_millis>
    5f82:	90 93 9b 0b 	sts	0x0B9B, r25	; 0x800b9b <timer0_millis+0x1>
    5f86:	a0 93 9c 0b 	sts	0x0B9C, r26	; 0x800b9c <timer0_millis+0x2>
    5f8a:	b0 93 9d 0b 	sts	0x0B9D, r27	; 0x800b9d <timer0_millis+0x3>
	timer0_overflow_count++;
    5f8e:	80 91 9e 0b 	lds	r24, 0x0B9E	; 0x800b9e <timer0_overflow_count>
    5f92:	90 91 9f 0b 	lds	r25, 0x0B9F	; 0x800b9f <timer0_overflow_count+0x1>
    5f96:	a0 91 a0 0b 	lds	r26, 0x0BA0	; 0x800ba0 <timer0_overflow_count+0x2>
    5f9a:	b0 91 a1 0b 	lds	r27, 0x0BA1	; 0x800ba1 <timer0_overflow_count+0x3>
    5f9e:	01 96       	adiw	r24, 0x01	; 1
    5fa0:	a1 1d       	adc	r26, r1
    5fa2:	b1 1d       	adc	r27, r1
    5fa4:	80 93 9e 0b 	sts	0x0B9E, r24	; 0x800b9e <timer0_overflow_count>
    5fa8:	90 93 9f 0b 	sts	0x0B9F, r25	; 0x800b9f <timer0_overflow_count+0x1>
    5fac:	a0 93 a0 0b 	sts	0x0BA0, r26	; 0x800ba0 <timer0_overflow_count+0x2>
    5fb0:	b0 93 a1 0b 	sts	0x0BA1, r27	; 0x800ba1 <timer0_overflow_count+0x3>
}
    5fb4:	bf 91       	pop	r27
    5fb6:	af 91       	pop	r26
    5fb8:	9f 91       	pop	r25
    5fba:	8f 91       	pop	r24
    5fbc:	3f 91       	pop	r19
    5fbe:	2f 91       	pop	r18
    5fc0:	0f 90       	pop	r0
    5fc2:	0f be       	out	0x3f, r0	; 63
    5fc4:	0f 90       	pop	r0
    5fc6:	1f 90       	pop	r1
    5fc8:	18 95       	reti

00005fca <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    5fca:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    5fcc:	f8 94       	cli
	m = timer0_millis;
    5fce:	60 91 9a 0b 	lds	r22, 0x0B9A	; 0x800b9a <timer0_millis>
    5fd2:	70 91 9b 0b 	lds	r23, 0x0B9B	; 0x800b9b <timer0_millis+0x1>
    5fd6:	80 91 9c 0b 	lds	r24, 0x0B9C	; 0x800b9c <timer0_millis+0x2>
    5fda:	90 91 9d 0b 	lds	r25, 0x0B9D	; 0x800b9d <timer0_millis+0x3>
	SREG = oldSREG;
    5fde:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    5fe0:	08 95       	ret

00005fe2 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    5fe2:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    5fe4:	f8 94       	cli
	m = timer0_overflow_count;
    5fe6:	80 91 9e 0b 	lds	r24, 0x0B9E	; 0x800b9e <timer0_overflow_count>
    5fea:	90 91 9f 0b 	lds	r25, 0x0B9F	; 0x800b9f <timer0_overflow_count+0x1>
    5fee:	a0 91 a0 0b 	lds	r26, 0x0BA0	; 0x800ba0 <timer0_overflow_count+0x2>
    5ff2:	b0 91 a1 0b 	lds	r27, 0x0BA1	; 0x800ba1 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    5ff6:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    5ff8:	a8 9b       	sbis	0x15, 0	; 21
    5ffa:	05 c0       	rjmp	.+10     	; 0x6006 <micros+0x24>
    5ffc:	2f 3f       	cpi	r18, 0xFF	; 255
    5ffe:	19 f0       	breq	.+6      	; 0x6006 <micros+0x24>
		m++;
    6000:	01 96       	adiw	r24, 0x01	; 1
    6002:	a1 1d       	adc	r26, r1
    6004:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    6006:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    6008:	ba 2f       	mov	r27, r26
    600a:	a9 2f       	mov	r26, r25
    600c:	98 2f       	mov	r25, r24
    600e:	88 27       	eor	r24, r24
    6010:	82 0f       	add	r24, r18
    6012:	91 1d       	adc	r25, r1
    6014:	a1 1d       	adc	r26, r1
    6016:	b1 1d       	adc	r27, r1
    6018:	bc 01       	movw	r22, r24
    601a:	cd 01       	movw	r24, r26
    601c:	42 e0       	ldi	r20, 0x02	; 2
    601e:	66 0f       	add	r22, r22
    6020:	77 1f       	adc	r23, r23
    6022:	88 1f       	adc	r24, r24
    6024:	99 1f       	adc	r25, r25
    6026:	4a 95       	dec	r20
    6028:	d1 f7       	brne	.-12     	; 0x601e <micros+0x3c>
}
    602a:	08 95       	ret

0000602c <delay>:

void delay(unsigned long ms)
{
    602c:	8f 92       	push	r8
    602e:	9f 92       	push	r9
    6030:	af 92       	push	r10
    6032:	bf 92       	push	r11
    6034:	cf 92       	push	r12
    6036:	df 92       	push	r13
    6038:	ef 92       	push	r14
    603a:	ff 92       	push	r15
    603c:	6b 01       	movw	r12, r22
    603e:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    6040:	d0 df       	rcall	.-96     	; 0x5fe2 <micros>
    6042:	4b 01       	movw	r8, r22
    6044:	5c 01       	movw	r10, r24

	while (ms > 0) {
    6046:	c1 14       	cp	r12, r1
    6048:	d1 04       	cpc	r13, r1
    604a:	e1 04       	cpc	r14, r1
    604c:	f1 04       	cpc	r15, r1
		yield();
    604e:	f1 f0       	breq	.+60     	; 0x608c <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    6050:	d7 d4       	rcall	.+2478   	; 0x6a00 <yield>
    6052:	c7 df       	rcall	.-114    	; 0x5fe2 <micros>
    6054:	dc 01       	movw	r26, r24
    6056:	cb 01       	movw	r24, r22
    6058:	88 19       	sub	r24, r8
    605a:	99 09       	sbc	r25, r9
    605c:	aa 09       	sbc	r26, r10
    605e:	bb 09       	sbc	r27, r11
    6060:	88 3e       	cpi	r24, 0xE8	; 232
    6062:	93 40       	sbci	r25, 0x03	; 3
    6064:	a1 05       	cpc	r26, r1
    6066:	b1 05       	cpc	r27, r1
    6068:	70 f3       	brcs	.-36     	; 0x6046 <delay+0x1a>
			ms--;
    606a:	21 e0       	ldi	r18, 0x01	; 1
    606c:	c2 1a       	sub	r12, r18
    606e:	d1 08       	sbc	r13, r1
    6070:	e1 08       	sbc	r14, r1
    6072:	f1 08       	sbc	r15, r1
			start += 1000;
    6074:	88 ee       	ldi	r24, 0xE8	; 232
    6076:	88 0e       	add	r8, r24
    6078:	83 e0       	ldi	r24, 0x03	; 3
    607a:	98 1e       	adc	r9, r24
    607c:	a1 1c       	adc	r10, r1
    607e:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    6080:	c1 14       	cp	r12, r1
    6082:	d1 04       	cpc	r13, r1
    6084:	e1 04       	cpc	r14, r1
    6086:	f1 04       	cpc	r15, r1
    6088:	21 f7       	brne	.-56     	; 0x6052 <delay+0x26>
    608a:	dd cf       	rjmp	.-70     	; 0x6046 <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    608c:	ff 90       	pop	r15
    608e:	ef 90       	pop	r14
    6090:	df 90       	pop	r13
    6092:	cf 90       	pop	r12
    6094:	bf 90       	pop	r11
    6096:	af 90       	pop	r10
    6098:	9f 90       	pop	r9
    609a:	8f 90       	pop	r8
    609c:	08 95       	ret

0000609e <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    609e:	82 30       	cpi	r24, 0x02	; 2
    60a0:	91 05       	cpc	r25, r1
    60a2:	38 f0       	brcs	.+14     	; 0x60b2 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    60a4:	88 0f       	add	r24, r24
    60a6:	99 1f       	adc	r25, r25
    60a8:	88 0f       	add	r24, r24
    60aa:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    60ac:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    60ae:	01 97       	sbiw	r24, 0x01	; 1
    60b0:	f1 f7       	brne	.-4      	; 0x60ae <delayMicroseconds+0x10>
    60b2:	08 95       	ret

000060b4 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    60b4:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    60b6:	84 b5       	in	r24, 0x24	; 36
    60b8:	82 60       	ori	r24, 0x02	; 2
    60ba:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    60bc:	84 b5       	in	r24, 0x24	; 36
    60be:	81 60       	ori	r24, 0x01	; 1
    60c0:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    60c2:	85 b5       	in	r24, 0x25	; 37
    60c4:	82 60       	ori	r24, 0x02	; 2
    60c6:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    60c8:	85 b5       	in	r24, 0x25	; 37
    60ca:	81 60       	ori	r24, 0x01	; 1
    60cc:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    60ce:	ee e6       	ldi	r30, 0x6E	; 110
    60d0:	f0 e0       	ldi	r31, 0x00	; 0
    60d2:	80 81       	ld	r24, Z
    60d4:	81 60       	ori	r24, 0x01	; 1
    60d6:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    60d8:	e1 e8       	ldi	r30, 0x81	; 129
    60da:	f0 e0       	ldi	r31, 0x00	; 0
    60dc:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    60de:	80 81       	ld	r24, Z
    60e0:	82 60       	ori	r24, 0x02	; 2
    60e2:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    60e4:	80 81       	ld	r24, Z
    60e6:	81 60       	ori	r24, 0x01	; 1
    60e8:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    60ea:	e0 e8       	ldi	r30, 0x80	; 128
    60ec:	f0 e0       	ldi	r31, 0x00	; 0
    60ee:	80 81       	ld	r24, Z
    60f0:	81 60       	ori	r24, 0x01	; 1
    60f2:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    60f4:	e1 eb       	ldi	r30, 0xB1	; 177
    60f6:	f0 e0       	ldi	r31, 0x00	; 0
    60f8:	80 81       	ld	r24, Z
    60fa:	84 60       	ori	r24, 0x04	; 4
    60fc:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    60fe:	e0 eb       	ldi	r30, 0xB0	; 176
    6100:	f0 e0       	ldi	r31, 0x00	; 0
    6102:	80 81       	ld	r24, Z
    6104:	81 60       	ori	r24, 0x01	; 1
    6106:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    6108:	ea e7       	ldi	r30, 0x7A	; 122
    610a:	f0 e0       	ldi	r31, 0x00	; 0
    610c:	80 81       	ld	r24, Z
    610e:	84 60       	ori	r24, 0x04	; 4
    6110:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    6112:	80 81       	ld	r24, Z
    6114:	82 60       	ori	r24, 0x02	; 2
    6116:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    6118:	80 81       	ld	r24, Z
    611a:	81 60       	ori	r24, 0x01	; 1
    611c:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    611e:	80 81       	ld	r24, Z
    6120:	80 68       	ori	r24, 0x80	; 128
    6122:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    6124:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    6128:	08 95       	ret

0000612a <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    612a:	83 30       	cpi	r24, 0x03	; 3
    612c:	81 f0       	breq	.+32     	; 0x614e <turnOffPWM+0x24>
    612e:	28 f4       	brcc	.+10     	; 0x613a <turnOffPWM+0x10>
    6130:	81 30       	cpi	r24, 0x01	; 1
    6132:	99 f0       	breq	.+38     	; 0x615a <turnOffPWM+0x30>
    6134:	82 30       	cpi	r24, 0x02	; 2
    6136:	a1 f0       	breq	.+40     	; 0x6160 <turnOffPWM+0x36>
    6138:	08 95       	ret
    613a:	87 30       	cpi	r24, 0x07	; 7
    613c:	a9 f0       	breq	.+42     	; 0x6168 <turnOffPWM+0x3e>
    613e:	88 30       	cpi	r24, 0x08	; 8
    6140:	b9 f0       	breq	.+46     	; 0x6170 <turnOffPWM+0x46>
    6142:	84 30       	cpi	r24, 0x04	; 4
    6144:	d1 f4       	brne	.+52     	; 0x617a <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    6146:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    614a:	8f 7d       	andi	r24, 0xDF	; 223
    614c:	03 c0       	rjmp	.+6      	; 0x6154 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    614e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    6152:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    6154:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    6158:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    615a:	84 b5       	in	r24, 0x24	; 36
    615c:	8f 77       	andi	r24, 0x7F	; 127
    615e:	02 c0       	rjmp	.+4      	; 0x6164 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    6160:	84 b5       	in	r24, 0x24	; 36
    6162:	8f 7d       	andi	r24, 0xDF	; 223
    6164:	84 bd       	out	0x24, r24	; 36
    6166:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    6168:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    616c:	8f 77       	andi	r24, 0x7F	; 127
    616e:	03 c0       	rjmp	.+6      	; 0x6176 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    6170:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    6174:	8f 7d       	andi	r24, 0xDF	; 223
    6176:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    617a:	08 95       	ret

0000617c <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    617c:	cf 93       	push	r28
    617e:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    6180:	90 e0       	ldi	r25, 0x00	; 0
    6182:	fc 01       	movw	r30, r24
    6184:	ee 5a       	subi	r30, 0xAE	; 174
    6186:	fd 4f       	sbci	r31, 0xFD	; 253
    6188:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    618a:	fc 01       	movw	r30, r24
    618c:	ee 58       	subi	r30, 0x8E	; 142
    618e:	fd 4f       	sbci	r31, 0xFD	; 253
    6190:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    6192:	88 23       	and	r24, r24
    6194:	61 f1       	breq	.+88     	; 0x61ee <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    6196:	90 e0       	ldi	r25, 0x00	; 0
    6198:	88 0f       	add	r24, r24
    619a:	99 1f       	adc	r25, r25
    619c:	fc 01       	movw	r30, r24
    619e:	ea 55       	subi	r30, 0x5A	; 90
    61a0:	fd 4f       	sbci	r31, 0xFD	; 253
    61a2:	c5 91       	lpm	r28, Z+
    61a4:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    61a6:	fc 01       	movw	r30, r24
    61a8:	e4 56       	subi	r30, 0x64	; 100
    61aa:	fd 4f       	sbci	r31, 0xFD	; 253
    61ac:	a5 91       	lpm	r26, Z+
    61ae:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    61b0:	61 11       	cpse	r22, r1
    61b2:	09 c0       	rjmp	.+18     	; 0x61c6 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    61b4:	9f b7       	in	r25, 0x3f	; 63
                cli();
    61b6:	f8 94       	cli
		*reg &= ~bit;
    61b8:	88 81       	ld	r24, Y
    61ba:	20 95       	com	r18
    61bc:	82 23       	and	r24, r18
    61be:	88 83       	st	Y, r24
		*out &= ~bit;
    61c0:	ec 91       	ld	r30, X
    61c2:	2e 23       	and	r18, r30
    61c4:	0b c0       	rjmp	.+22     	; 0x61dc <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    61c6:	62 30       	cpi	r22, 0x02	; 2
    61c8:	61 f4       	brne	.+24     	; 0x61e2 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    61ca:	9f b7       	in	r25, 0x3f	; 63
                cli();
    61cc:	f8 94       	cli
		*reg &= ~bit;
    61ce:	88 81       	ld	r24, Y
    61d0:	32 2f       	mov	r19, r18
    61d2:	30 95       	com	r19
    61d4:	83 23       	and	r24, r19
    61d6:	88 83       	st	Y, r24
		*out |= bit;
    61d8:	ec 91       	ld	r30, X
    61da:	2e 2b       	or	r18, r30
    61dc:	2c 93       	st	X, r18
		SREG = oldSREG;
    61de:	9f bf       	out	0x3f, r25	; 63
    61e0:	06 c0       	rjmp	.+12     	; 0x61ee <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    61e2:	8f b7       	in	r24, 0x3f	; 63
                cli();
    61e4:	f8 94       	cli
		*reg |= bit;
    61e6:	e8 81       	ld	r30, Y
    61e8:	2e 2b       	or	r18, r30
    61ea:	28 83       	st	Y, r18
		SREG = oldSREG;
    61ec:	8f bf       	out	0x3f, r24	; 63
	}
}
    61ee:	df 91       	pop	r29
    61f0:	cf 91       	pop	r28
    61f2:	08 95       	ret

000061f4 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    61f4:	1f 93       	push	r17
    61f6:	cf 93       	push	r28
    61f8:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    61fa:	28 2f       	mov	r18, r24
    61fc:	30 e0       	ldi	r19, 0x00	; 0
    61fe:	f9 01       	movw	r30, r18
    6200:	ee 5c       	subi	r30, 0xCE	; 206
    6202:	fd 4f       	sbci	r31, 0xFD	; 253
    6204:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    6206:	f9 01       	movw	r30, r18
    6208:	ee 5a       	subi	r30, 0xAE	; 174
    620a:	fd 4f       	sbci	r31, 0xFD	; 253
    620c:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    620e:	f9 01       	movw	r30, r18
    6210:	ee 58       	subi	r30, 0x8E	; 142
    6212:	fd 4f       	sbci	r31, 0xFD	; 253
    6214:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    6216:	cc 23       	and	r28, r28
    6218:	b9 f0       	breq	.+46     	; 0x6248 <digitalWrite+0x54>
    621a:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    621c:	81 11       	cpse	r24, r1
    621e:	85 df       	rcall	.-246    	; 0x612a <turnOffPWM>

	out = portOutputRegister(port);
    6220:	ec 2f       	mov	r30, r28
    6222:	f0 e0       	ldi	r31, 0x00	; 0
    6224:	ee 0f       	add	r30, r30
    6226:	ff 1f       	adc	r31, r31
    6228:	e4 56       	subi	r30, 0x64	; 100
    622a:	fd 4f       	sbci	r31, 0xFD	; 253
    622c:	a5 91       	lpm	r26, Z+
    622e:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    6230:	9f b7       	in	r25, 0x3f	; 63
	cli();
    6232:	f8 94       	cli

	if (val == LOW) {
    6234:	11 11       	cpse	r17, r1
    6236:	04 c0       	rjmp	.+8      	; 0x6240 <digitalWrite+0x4c>
		*out &= ~bit;
    6238:	8c 91       	ld	r24, X
    623a:	d0 95       	com	r29
    623c:	d8 23       	and	r29, r24
    623e:	02 c0       	rjmp	.+4      	; 0x6244 <digitalWrite+0x50>
	} else {
		*out |= bit;
    6240:	ec 91       	ld	r30, X
    6242:	de 2b       	or	r29, r30
    6244:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    6246:	9f bf       	out	0x3f, r25	; 63
}
    6248:	df 91       	pop	r29
    624a:	cf 91       	pop	r28
    624c:	1f 91       	pop	r17
    624e:	08 95       	ret

00006250 <digitalRead>:

int digitalRead(uint8_t pin)
{
    6250:	cf 93       	push	r28
    6252:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    6254:	28 2f       	mov	r18, r24
    6256:	30 e0       	ldi	r19, 0x00	; 0
    6258:	f9 01       	movw	r30, r18
    625a:	ee 5c       	subi	r30, 0xCE	; 206
    625c:	fd 4f       	sbci	r31, 0xFD	; 253
    625e:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    6260:	f9 01       	movw	r30, r18
    6262:	ee 5a       	subi	r30, 0xAE	; 174
    6264:	fd 4f       	sbci	r31, 0xFD	; 253
    6266:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    6268:	f9 01       	movw	r30, r18
    626a:	ee 58       	subi	r30, 0x8E	; 142
    626c:	fd 4f       	sbci	r31, 0xFD	; 253
    626e:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    6270:	cc 23       	and	r28, r28
    6272:	89 f0       	breq	.+34     	; 0x6296 <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    6274:	81 11       	cpse	r24, r1
    6276:	59 df       	rcall	.-334    	; 0x612a <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    6278:	ec 2f       	mov	r30, r28
    627a:	f0 e0       	ldi	r31, 0x00	; 0
    627c:	ee 0f       	add	r30, r30
    627e:	ff 1f       	adc	r31, r31
    6280:	ee 56       	subi	r30, 0x6E	; 110
    6282:	fd 4f       	sbci	r31, 0xFD	; 253
    6284:	a5 91       	lpm	r26, Z+
    6286:	b4 91       	lpm	r27, Z
    6288:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    628a:	ed 23       	and	r30, r29
    628c:	81 e0       	ldi	r24, 0x01	; 1
    628e:	90 e0       	ldi	r25, 0x00	; 0
    6290:	21 f4       	brne	.+8      	; 0x629a <digitalRead+0x4a>
    6292:	80 e0       	ldi	r24, 0x00	; 0
    6294:	02 c0       	rjmp	.+4      	; 0x629a <digitalRead+0x4a>
    6296:	80 e0       	ldi	r24, 0x00	; 0
    6298:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    629a:	df 91       	pop	r29
    629c:	cf 91       	pop	r28
    629e:	08 95       	ret

000062a0 <_ZNK6String14StringIfHelperEv>:
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
		*p = toupper(*p);
	}
}
    62a0:	08 95       	ret

000062a2 <_ZN6StringD1Ev>:
    62a2:	fc 01       	movw	r30, r24
    62a4:	80 81       	ld	r24, Z
    62a6:	91 81       	ldd	r25, Z+1	; 0x01
    62a8:	c7 c4       	rjmp	.+2446   	; 0x6c38 <free>

000062aa <_ZN6String10invalidateEv>:
    62aa:	cf 93       	push	r28
    62ac:	df 93       	push	r29
    62ae:	ec 01       	movw	r28, r24
    62b0:	88 81       	ld	r24, Y
    62b2:	99 81       	ldd	r25, Y+1	; 0x01
    62b4:	00 97       	sbiw	r24, 0x00	; 0
    62b6:	09 f0       	breq	.+2      	; 0x62ba <_ZN6String10invalidateEv+0x10>
    62b8:	bf d4       	rcall	.+2430   	; 0x6c38 <free>
    62ba:	19 82       	std	Y+1, r1	; 0x01
    62bc:	18 82       	st	Y, r1
    62be:	1d 82       	std	Y+5, r1	; 0x05
    62c0:	1c 82       	std	Y+4, r1	; 0x04
    62c2:	1b 82       	std	Y+3, r1	; 0x03
    62c4:	1a 82       	std	Y+2, r1	; 0x02
    62c6:	df 91       	pop	r29
    62c8:	cf 91       	pop	r28
    62ca:	08 95       	ret

000062cc <_ZN6String12changeBufferEj>:
    62cc:	0f 93       	push	r16
    62ce:	1f 93       	push	r17
    62d0:	cf 93       	push	r28
    62d2:	df 93       	push	r29
    62d4:	ec 01       	movw	r28, r24
    62d6:	8b 01       	movw	r16, r22
    62d8:	6f 5f       	subi	r22, 0xFF	; 255
    62da:	7f 4f       	sbci	r23, 0xFF	; 255
    62dc:	88 81       	ld	r24, Y
    62de:	99 81       	ldd	r25, Y+1	; 0x01
    62e0:	34 d5       	rcall	.+2664   	; 0x6d4a <realloc>
    62e2:	00 97       	sbiw	r24, 0x00	; 0
    62e4:	31 f0       	breq	.+12     	; 0x62f2 <_ZN6String12changeBufferEj+0x26>
    62e6:	99 83       	std	Y+1, r25	; 0x01
    62e8:	88 83       	st	Y, r24
    62ea:	1b 83       	std	Y+3, r17	; 0x03
    62ec:	0a 83       	std	Y+2, r16	; 0x02
    62ee:	81 e0       	ldi	r24, 0x01	; 1
    62f0:	01 c0       	rjmp	.+2      	; 0x62f4 <_ZN6String12changeBufferEj+0x28>
    62f2:	80 e0       	ldi	r24, 0x00	; 0
    62f4:	df 91       	pop	r29
    62f6:	cf 91       	pop	r28
    62f8:	1f 91       	pop	r17
    62fa:	0f 91       	pop	r16
    62fc:	08 95       	ret

000062fe <_ZN6String7reserveEj>:
    62fe:	cf 93       	push	r28
    6300:	df 93       	push	r29
    6302:	ec 01       	movw	r28, r24
    6304:	88 81       	ld	r24, Y
    6306:	99 81       	ldd	r25, Y+1	; 0x01
    6308:	89 2b       	or	r24, r25
    630a:	29 f0       	breq	.+10     	; 0x6316 <_ZN6String7reserveEj+0x18>
    630c:	8a 81       	ldd	r24, Y+2	; 0x02
    630e:	9b 81       	ldd	r25, Y+3	; 0x03
    6310:	86 17       	cp	r24, r22
    6312:	97 07       	cpc	r25, r23
    6314:	58 f4       	brcc	.+22     	; 0x632c <_ZN6String7reserveEj+0x2e>
    6316:	ce 01       	movw	r24, r28
    6318:	d9 df       	rcall	.-78     	; 0x62cc <_ZN6String12changeBufferEj>
    631a:	88 23       	and	r24, r24
    631c:	41 f0       	breq	.+16     	; 0x632e <_ZN6String7reserveEj+0x30>
    631e:	8c 81       	ldd	r24, Y+4	; 0x04
    6320:	9d 81       	ldd	r25, Y+5	; 0x05
    6322:	89 2b       	or	r24, r25
    6324:	19 f4       	brne	.+6      	; 0x632c <_ZN6String7reserveEj+0x2e>
    6326:	e8 81       	ld	r30, Y
    6328:	f9 81       	ldd	r31, Y+1	; 0x01
    632a:	10 82       	st	Z, r1
    632c:	81 e0       	ldi	r24, 0x01	; 1
    632e:	df 91       	pop	r29
    6330:	cf 91       	pop	r28
    6332:	08 95       	ret

00006334 <_ZN6String4copyEPKcj>:
    6334:	ef 92       	push	r14
    6336:	ff 92       	push	r15
    6338:	0f 93       	push	r16
    633a:	1f 93       	push	r17
    633c:	cf 93       	push	r28
    633e:	df 93       	push	r29
    6340:	ec 01       	movw	r28, r24
    6342:	7b 01       	movw	r14, r22
    6344:	8a 01       	movw	r16, r20
    6346:	ba 01       	movw	r22, r20
    6348:	da df       	rcall	.-76     	; 0x62fe <_ZN6String7reserveEj>
    634a:	81 11       	cpse	r24, r1
    634c:	03 c0       	rjmp	.+6      	; 0x6354 <_ZN6String4copyEPKcj+0x20>
    634e:	ce 01       	movw	r24, r28
    6350:	ac df       	rcall	.-168    	; 0x62aa <_ZN6String10invalidateEv>
    6352:	06 c0       	rjmp	.+12     	; 0x6360 <_ZN6String4copyEPKcj+0x2c>
    6354:	1d 83       	std	Y+5, r17	; 0x05
    6356:	0c 83       	std	Y+4, r16	; 0x04
    6358:	b7 01       	movw	r22, r14
    635a:	88 81       	ld	r24, Y
    635c:	99 81       	ldd	r25, Y+1	; 0x01
    635e:	fc d5       	rcall	.+3064   	; 0x6f58 <strcpy>
    6360:	ce 01       	movw	r24, r28
    6362:	df 91       	pop	r29
    6364:	cf 91       	pop	r28
    6366:	1f 91       	pop	r17
    6368:	0f 91       	pop	r16
    636a:	ff 90       	pop	r15
    636c:	ef 90       	pop	r14
    636e:	08 95       	ret

00006370 <_ZN6StringC1EPKc>:
    6370:	fc 01       	movw	r30, r24
    6372:	11 82       	std	Z+1, r1	; 0x01
    6374:	10 82       	st	Z, r1
    6376:	13 82       	std	Z+3, r1	; 0x03
    6378:	12 82       	std	Z+2, r1	; 0x02
    637a:	15 82       	std	Z+5, r1	; 0x05
    637c:	14 82       	std	Z+4, r1	; 0x04
    637e:	61 15       	cp	r22, r1
    6380:	71 05       	cpc	r23, r1
    6382:	49 f0       	breq	.+18     	; 0x6396 <_ZN6StringC1EPKc+0x26>
    6384:	fb 01       	movw	r30, r22
    6386:	01 90       	ld	r0, Z+
    6388:	00 20       	and	r0, r0
    638a:	e9 f7       	brne	.-6      	; 0x6386 <_ZN6StringC1EPKc+0x16>
    638c:	31 97       	sbiw	r30, 0x01	; 1
    638e:	af 01       	movw	r20, r30
    6390:	46 1b       	sub	r20, r22
    6392:	57 0b       	sbc	r21, r23
    6394:	cf cf       	rjmp	.-98     	; 0x6334 <_ZN6String4copyEPKcj>
    6396:	08 95       	ret

00006398 <_ZN6String4moveERS_>:
    6398:	0f 93       	push	r16
    639a:	1f 93       	push	r17
    639c:	cf 93       	push	r28
    639e:	df 93       	push	r29
    63a0:	8c 01       	movw	r16, r24
    63a2:	eb 01       	movw	r28, r22
    63a4:	fc 01       	movw	r30, r24
    63a6:	80 81       	ld	r24, Z
    63a8:	91 81       	ldd	r25, Z+1	; 0x01
    63aa:	00 97       	sbiw	r24, 0x00	; 0
    63ac:	c1 f0       	breq	.+48     	; 0x63de <_ZN6String4moveERS_+0x46>
    63ae:	68 81       	ld	r22, Y
    63b0:	79 81       	ldd	r23, Y+1	; 0x01
    63b2:	61 15       	cp	r22, r1
    63b4:	71 05       	cpc	r23, r1
    63b6:	91 f0       	breq	.+36     	; 0x63dc <_ZN6String4moveERS_+0x44>
    63b8:	20 e5       	ldi	r18, 0x50	; 80
    63ba:	31 e3       	ldi	r19, 0x31	; 49
    63bc:	23 2b       	or	r18, r19
    63be:	71 f0       	breq	.+28     	; 0x63dc <_ZN6String4moveERS_+0x44>
    63c0:	42 81       	ldd	r20, Z+2	; 0x02
    63c2:	53 81       	ldd	r21, Z+3	; 0x03
    63c4:	2c 81       	ldd	r18, Y+4	; 0x04
    63c6:	3d 81       	ldd	r19, Y+5	; 0x05
    63c8:	42 17       	cp	r20, r18
    63ca:	53 07       	cpc	r21, r19
    63cc:	38 f0       	brcs	.+14     	; 0x63dc <_ZN6String4moveERS_+0x44>
    63ce:	c4 d5       	rcall	.+2952   	; 0x6f58 <strcpy>
    63d0:	8c 81       	ldd	r24, Y+4	; 0x04
    63d2:	9d 81       	ldd	r25, Y+5	; 0x05
    63d4:	f8 01       	movw	r30, r16
    63d6:	95 83       	std	Z+5, r25	; 0x05
    63d8:	84 83       	std	Z+4, r24	; 0x04
    63da:	12 c0       	rjmp	.+36     	; 0x6400 <_ZN6String4moveERS_+0x68>
    63dc:	2d d4       	rcall	.+2138   	; 0x6c38 <free>
    63de:	88 81       	ld	r24, Y
    63e0:	99 81       	ldd	r25, Y+1	; 0x01
    63e2:	f8 01       	movw	r30, r16
    63e4:	91 83       	std	Z+1, r25	; 0x01
    63e6:	80 83       	st	Z, r24
    63e8:	8a 81       	ldd	r24, Y+2	; 0x02
    63ea:	9b 81       	ldd	r25, Y+3	; 0x03
    63ec:	93 83       	std	Z+3, r25	; 0x03
    63ee:	82 83       	std	Z+2, r24	; 0x02
    63f0:	8c 81       	ldd	r24, Y+4	; 0x04
    63f2:	9d 81       	ldd	r25, Y+5	; 0x05
    63f4:	95 83       	std	Z+5, r25	; 0x05
    63f6:	84 83       	std	Z+4, r24	; 0x04
    63f8:	19 82       	std	Y+1, r1	; 0x01
    63fa:	18 82       	st	Y, r1
    63fc:	1b 82       	std	Y+3, r1	; 0x03
    63fe:	1a 82       	std	Y+2, r1	; 0x02
    6400:	1d 82       	std	Y+5, r1	; 0x05
    6402:	1c 82       	std	Y+4, r1	; 0x04
    6404:	df 91       	pop	r29
    6406:	cf 91       	pop	r28
    6408:	1f 91       	pop	r17
    640a:	0f 91       	pop	r16
    640c:	08 95       	ret

0000640e <_ZN6StringC1EOS_>:
    640e:	fc 01       	movw	r30, r24
    6410:	11 82       	std	Z+1, r1	; 0x01
    6412:	10 82       	st	Z, r1
    6414:	13 82       	std	Z+3, r1	; 0x03
    6416:	12 82       	std	Z+2, r1	; 0x02
    6418:	15 82       	std	Z+5, r1	; 0x05
    641a:	14 82       	std	Z+4, r1	; 0x04
    641c:	bd cf       	rjmp	.-134    	; 0x6398 <_ZN6String4moveERS_>

0000641e <_ZN6StringaSERKS_>:
    641e:	cf 93       	push	r28
    6420:	df 93       	push	r29
    6422:	ec 01       	movw	r28, r24
    6424:	fb 01       	movw	r30, r22
    6426:	86 17       	cp	r24, r22
    6428:	97 07       	cpc	r25, r23
    642a:	51 f0       	breq	.+20     	; 0x6440 <_ZN6StringaSERKS_+0x22>
    642c:	60 81       	ld	r22, Z
    642e:	71 81       	ldd	r23, Z+1	; 0x01
    6430:	61 15       	cp	r22, r1
    6432:	71 05       	cpc	r23, r1
    6434:	21 f0       	breq	.+8      	; 0x643e <_ZN6StringaSERKS_+0x20>
    6436:	44 81       	ldd	r20, Z+4	; 0x04
    6438:	55 81       	ldd	r21, Z+5	; 0x05
    643a:	7c df       	rcall	.-264    	; 0x6334 <_ZN6String4copyEPKcj>
    643c:	01 c0       	rjmp	.+2      	; 0x6440 <_ZN6StringaSERKS_+0x22>
    643e:	35 df       	rcall	.-406    	; 0x62aa <_ZN6String10invalidateEv>
    6440:	ce 01       	movw	r24, r28
    6442:	df 91       	pop	r29
    6444:	cf 91       	pop	r28
    6446:	08 95       	ret

00006448 <_ZN6StringC1ERKS_>:
    6448:	fc 01       	movw	r30, r24
    644a:	11 82       	std	Z+1, r1	; 0x01
    644c:	10 82       	st	Z, r1
    644e:	13 82       	std	Z+3, r1	; 0x03
    6450:	12 82       	std	Z+2, r1	; 0x02
    6452:	15 82       	std	Z+5, r1	; 0x05
    6454:	14 82       	std	Z+4, r1	; 0x04
    6456:	e3 cf       	rjmp	.-58     	; 0x641e <_ZN6StringaSERKS_>

00006458 <_ZN6StringaSEOS_>:
    6458:	cf 93       	push	r28
    645a:	df 93       	push	r29
    645c:	ec 01       	movw	r28, r24
    645e:	86 17       	cp	r24, r22
    6460:	97 07       	cpc	r25, r23
    6462:	09 f0       	breq	.+2      	; 0x6466 <_ZN6StringaSEOS_+0xe>
    6464:	99 df       	rcall	.-206    	; 0x6398 <_ZN6String4moveERS_>
    6466:	ce 01       	movw	r24, r28
    6468:	df 91       	pop	r29
    646a:	cf 91       	pop	r28
    646c:	08 95       	ret

0000646e <_ZN6StringaSEPKc>:
    646e:	cf 93       	push	r28
    6470:	df 93       	push	r29
    6472:	ec 01       	movw	r28, r24
    6474:	61 15       	cp	r22, r1
    6476:	71 05       	cpc	r23, r1
    6478:	51 f0       	breq	.+20     	; 0x648e <_ZN6StringaSEPKc+0x20>
    647a:	fb 01       	movw	r30, r22
    647c:	01 90       	ld	r0, Z+
    647e:	00 20       	and	r0, r0
    6480:	e9 f7       	brne	.-6      	; 0x647c <_ZN6StringaSEPKc+0xe>
    6482:	31 97       	sbiw	r30, 0x01	; 1
    6484:	af 01       	movw	r20, r30
    6486:	46 1b       	sub	r20, r22
    6488:	57 0b       	sbc	r21, r23
    648a:	54 df       	rcall	.-344    	; 0x6334 <_ZN6String4copyEPKcj>
    648c:	01 c0       	rjmp	.+2      	; 0x6490 <_ZN6StringaSEPKc+0x22>
    648e:	0d df       	rcall	.-486    	; 0x62aa <_ZN6String10invalidateEv>
    6490:	ce 01       	movw	r24, r28
    6492:	df 91       	pop	r29
    6494:	cf 91       	pop	r28
    6496:	08 95       	ret

00006498 <_ZN6StringC1Ec>:
    6498:	cf 93       	push	r28
    649a:	df 93       	push	r29
    649c:	00 d0       	rcall	.+0      	; 0x649e <_ZN6StringC1Ec+0x6>
    649e:	cd b7       	in	r28, 0x3d	; 61
    64a0:	de b7       	in	r29, 0x3e	; 62
    64a2:	fc 01       	movw	r30, r24
    64a4:	11 82       	std	Z+1, r1	; 0x01
    64a6:	10 82       	st	Z, r1
    64a8:	13 82       	std	Z+3, r1	; 0x03
    64aa:	12 82       	std	Z+2, r1	; 0x02
    64ac:	15 82       	std	Z+5, r1	; 0x05
    64ae:	14 82       	std	Z+4, r1	; 0x04
    64b0:	69 83       	std	Y+1, r22	; 0x01
    64b2:	1a 82       	std	Y+2, r1	; 0x02
    64b4:	be 01       	movw	r22, r28
    64b6:	6f 5f       	subi	r22, 0xFF	; 255
    64b8:	7f 4f       	sbci	r23, 0xFF	; 255
    64ba:	d9 df       	rcall	.-78     	; 0x646e <_ZN6StringaSEPKc>
    64bc:	0f 90       	pop	r0
    64be:	0f 90       	pop	r0
    64c0:	df 91       	pop	r29
    64c2:	cf 91       	pop	r28
    64c4:	08 95       	ret

000064c6 <_ZN6StringC1Ehh>:
    64c6:	0f 93       	push	r16
    64c8:	1f 93       	push	r17
    64ca:	cf 93       	push	r28
    64cc:	df 93       	push	r29
    64ce:	cd b7       	in	r28, 0x3d	; 61
    64d0:	de b7       	in	r29, 0x3e	; 62
    64d2:	29 97       	sbiw	r28, 0x09	; 9
    64d4:	0f b6       	in	r0, 0x3f	; 63
    64d6:	f8 94       	cli
    64d8:	de bf       	out	0x3e, r29	; 62
    64da:	0f be       	out	0x3f, r0	; 63
    64dc:	cd bf       	out	0x3d, r28	; 61
    64de:	8c 01       	movw	r16, r24
    64e0:	86 2f       	mov	r24, r22
    64e2:	f8 01       	movw	r30, r16
    64e4:	11 82       	std	Z+1, r1	; 0x01
    64e6:	10 82       	st	Z, r1
    64e8:	13 82       	std	Z+3, r1	; 0x03
    64ea:	12 82       	std	Z+2, r1	; 0x02
    64ec:	15 82       	std	Z+5, r1	; 0x05
    64ee:	14 82       	std	Z+4, r1	; 0x04
    64f0:	50 e0       	ldi	r21, 0x00	; 0
    64f2:	be 01       	movw	r22, r28
    64f4:	6f 5f       	subi	r22, 0xFF	; 255
    64f6:	7f 4f       	sbci	r23, 0xFF	; 255
    64f8:	90 e0       	ldi	r25, 0x00	; 0
    64fa:	78 d5       	rcall	.+2800   	; 0x6fec <utoa>
    64fc:	be 01       	movw	r22, r28
    64fe:	6f 5f       	subi	r22, 0xFF	; 255
    6500:	7f 4f       	sbci	r23, 0xFF	; 255
    6502:	c8 01       	movw	r24, r16
    6504:	b4 df       	rcall	.-152    	; 0x646e <_ZN6StringaSEPKc>
    6506:	29 96       	adiw	r28, 0x09	; 9
    6508:	0f b6       	in	r0, 0x3f	; 63
    650a:	f8 94       	cli
    650c:	de bf       	out	0x3e, r29	; 62
    650e:	0f be       	out	0x3f, r0	; 63
    6510:	cd bf       	out	0x3d, r28	; 61
    6512:	df 91       	pop	r29
    6514:	cf 91       	pop	r28
    6516:	1f 91       	pop	r17
    6518:	0f 91       	pop	r16
    651a:	08 95       	ret

0000651c <_ZN6StringC1Emh>:
    651c:	0f 93       	push	r16
    651e:	1f 93       	push	r17
    6520:	cf 93       	push	r28
    6522:	df 93       	push	r29
    6524:	cd b7       	in	r28, 0x3d	; 61
    6526:	de b7       	in	r29, 0x3e	; 62
    6528:	a1 97       	sbiw	r28, 0x21	; 33
    652a:	0f b6       	in	r0, 0x3f	; 63
    652c:	f8 94       	cli
    652e:	de bf       	out	0x3e, r29	; 62
    6530:	0f be       	out	0x3f, r0	; 63
    6532:	cd bf       	out	0x3d, r28	; 61
    6534:	8c 01       	movw	r16, r24
    6536:	cb 01       	movw	r24, r22
    6538:	ba 01       	movw	r22, r20
    653a:	f8 01       	movw	r30, r16
    653c:	11 82       	std	Z+1, r1	; 0x01
    653e:	10 82       	st	Z, r1
    6540:	13 82       	std	Z+3, r1	; 0x03
    6542:	12 82       	std	Z+2, r1	; 0x02
    6544:	15 82       	std	Z+5, r1	; 0x05
    6546:	14 82       	std	Z+4, r1	; 0x04
    6548:	30 e0       	ldi	r19, 0x00	; 0
    654a:	ae 01       	movw	r20, r28
    654c:	4f 5f       	subi	r20, 0xFF	; 255
    654e:	5f 4f       	sbci	r21, 0xFF	; 255
    6550:	22 d5       	rcall	.+2628   	; 0x6f96 <ultoa>
    6552:	be 01       	movw	r22, r28
    6554:	6f 5f       	subi	r22, 0xFF	; 255
    6556:	7f 4f       	sbci	r23, 0xFF	; 255
    6558:	c8 01       	movw	r24, r16
    655a:	89 df       	rcall	.-238    	; 0x646e <_ZN6StringaSEPKc>
    655c:	a1 96       	adiw	r28, 0x21	; 33
    655e:	0f b6       	in	r0, 0x3f	; 63
    6560:	f8 94       	cli
    6562:	de bf       	out	0x3e, r29	; 62
    6564:	0f be       	out	0x3f, r0	; 63
    6566:	cd bf       	out	0x3d, r28	; 61
    6568:	df 91       	pop	r29
    656a:	cf 91       	pop	r28
    656c:	1f 91       	pop	r17
    656e:	0f 91       	pop	r16
    6570:	08 95       	ret

00006572 <_ZN6StringC1Edh>:
    6572:	ef 92       	push	r14
    6574:	ff 92       	push	r15
    6576:	0f 93       	push	r16
    6578:	1f 93       	push	r17
    657a:	cf 93       	push	r28
    657c:	df 93       	push	r29
    657e:	cd b7       	in	r28, 0x3d	; 61
    6580:	de b7       	in	r29, 0x3e	; 62
    6582:	a1 97       	sbiw	r28, 0x21	; 33
    6584:	0f b6       	in	r0, 0x3f	; 63
    6586:	f8 94       	cli
    6588:	de bf       	out	0x3e, r29	; 62
    658a:	0f be       	out	0x3f, r0	; 63
    658c:	cd bf       	out	0x3d, r28	; 61
    658e:	7c 01       	movw	r14, r24
    6590:	cb 01       	movw	r24, r22
    6592:	ba 01       	movw	r22, r20
    6594:	f7 01       	movw	r30, r14
    6596:	11 82       	std	Z+1, r1	; 0x01
    6598:	10 82       	st	Z, r1
    659a:	13 82       	std	Z+3, r1	; 0x03
    659c:	12 82       	std	Z+2, r1	; 0x02
    659e:	15 82       	std	Z+5, r1	; 0x05
    65a0:	14 82       	std	Z+4, r1	; 0x04
    65a2:	42 e0       	ldi	r20, 0x02	; 2
    65a4:	42 0f       	add	r20, r18
    65a6:	8e 01       	movw	r16, r28
    65a8:	0f 5f       	subi	r16, 0xFF	; 255
    65aa:	1f 4f       	sbci	r17, 0xFF	; 255
    65ac:	8e d2       	rcall	.+1308   	; 0x6aca <dtostrf>
    65ae:	bc 01       	movw	r22, r24
    65b0:	c7 01       	movw	r24, r14
    65b2:	5d df       	rcall	.-326    	; 0x646e <_ZN6StringaSEPKc>
    65b4:	a1 96       	adiw	r28, 0x21	; 33
    65b6:	0f b6       	in	r0, 0x3f	; 63
    65b8:	f8 94       	cli
    65ba:	de bf       	out	0x3e, r29	; 62
    65bc:	0f be       	out	0x3f, r0	; 63
    65be:	cd bf       	out	0x3d, r28	; 61
    65c0:	df 91       	pop	r29
    65c2:	cf 91       	pop	r28
    65c4:	1f 91       	pop	r17
    65c6:	0f 91       	pop	r16
    65c8:	ff 90       	pop	r15
    65ca:	ef 90       	pop	r14
    65cc:	08 95       	ret

000065ce <_ZN6String6concatEPKcj>:
    65ce:	ef 92       	push	r14
    65d0:	ff 92       	push	r15
    65d2:	0f 93       	push	r16
    65d4:	1f 93       	push	r17
    65d6:	cf 93       	push	r28
    65d8:	df 93       	push	r29
    65da:	61 15       	cp	r22, r1
    65dc:	71 05       	cpc	r23, r1
    65de:	11 f4       	brne	.+4      	; 0x65e4 <_ZN6String6concatEPKcj+0x16>
    65e0:	80 e0       	ldi	r24, 0x00	; 0
    65e2:	1a c0       	rjmp	.+52     	; 0x6618 <_ZN6String6concatEPKcj+0x4a>
    65e4:	41 15       	cp	r20, r1
    65e6:	51 05       	cpc	r21, r1
    65e8:	b1 f0       	breq	.+44     	; 0x6616 <_ZN6String6concatEPKcj+0x48>
    65ea:	7b 01       	movw	r14, r22
    65ec:	ec 01       	movw	r28, r24
    65ee:	8c 81       	ldd	r24, Y+4	; 0x04
    65f0:	9d 81       	ldd	r25, Y+5	; 0x05
    65f2:	8a 01       	movw	r16, r20
    65f4:	08 0f       	add	r16, r24
    65f6:	19 1f       	adc	r17, r25
    65f8:	b8 01       	movw	r22, r16
    65fa:	ce 01       	movw	r24, r28
    65fc:	80 de       	rcall	.-768    	; 0x62fe <_ZN6String7reserveEj>
    65fe:	88 23       	and	r24, r24
    6600:	79 f3       	breq	.-34     	; 0x65e0 <_ZN6String6concatEPKcj+0x12>
    6602:	28 81       	ld	r18, Y
    6604:	39 81       	ldd	r19, Y+1	; 0x01
    6606:	8c 81       	ldd	r24, Y+4	; 0x04
    6608:	9d 81       	ldd	r25, Y+5	; 0x05
    660a:	b7 01       	movw	r22, r14
    660c:	82 0f       	add	r24, r18
    660e:	93 1f       	adc	r25, r19
    6610:	a3 d4       	rcall	.+2374   	; 0x6f58 <strcpy>
    6612:	1d 83       	std	Y+5, r17	; 0x05
    6614:	0c 83       	std	Y+4, r16	; 0x04
    6616:	81 e0       	ldi	r24, 0x01	; 1
    6618:	df 91       	pop	r29
    661a:	cf 91       	pop	r28
    661c:	1f 91       	pop	r17
    661e:	0f 91       	pop	r16
    6620:	ff 90       	pop	r15
    6622:	ef 90       	pop	r14
    6624:	08 95       	ret

00006626 <_ZN6String6concatERKS_>:
    6626:	fb 01       	movw	r30, r22
    6628:	44 81       	ldd	r20, Z+4	; 0x04
    662a:	55 81       	ldd	r21, Z+5	; 0x05
    662c:	60 81       	ld	r22, Z
    662e:	71 81       	ldd	r23, Z+1	; 0x01
    6630:	ce cf       	rjmp	.-100    	; 0x65ce <_ZN6String6concatEPKcj>

00006632 <_ZN6String6concatEPKc>:
    6632:	61 15       	cp	r22, r1
    6634:	71 05       	cpc	r23, r1
    6636:	49 f0       	breq	.+18     	; 0x664a <_ZN6String6concatEPKc+0x18>
    6638:	fb 01       	movw	r30, r22
    663a:	01 90       	ld	r0, Z+
    663c:	00 20       	and	r0, r0
    663e:	e9 f7       	brne	.-6      	; 0x663a <_ZN6String6concatEPKc+0x8>
    6640:	31 97       	sbiw	r30, 0x01	; 1
    6642:	af 01       	movw	r20, r30
    6644:	46 1b       	sub	r20, r22
    6646:	57 0b       	sbc	r21, r23
    6648:	c2 cf       	rjmp	.-124    	; 0x65ce <_ZN6String6concatEPKcj>
    664a:	80 e0       	ldi	r24, 0x00	; 0
    664c:	08 95       	ret

0000664e <_ZN6String6concatEc>:
    664e:	cf 93       	push	r28
    6650:	df 93       	push	r29
    6652:	00 d0       	rcall	.+0      	; 0x6654 <_ZN6String6concatEc+0x6>
    6654:	cd b7       	in	r28, 0x3d	; 61
    6656:	de b7       	in	r29, 0x3e	; 62
    6658:	69 83       	std	Y+1, r22	; 0x01
    665a:	1a 82       	std	Y+2, r1	; 0x02
    665c:	41 e0       	ldi	r20, 0x01	; 1
    665e:	50 e0       	ldi	r21, 0x00	; 0
    6660:	be 01       	movw	r22, r28
    6662:	6f 5f       	subi	r22, 0xFF	; 255
    6664:	7f 4f       	sbci	r23, 0xFF	; 255
    6666:	b3 df       	rcall	.-154    	; 0x65ce <_ZN6String6concatEPKcj>
    6668:	0f 90       	pop	r0
    666a:	0f 90       	pop	r0
    666c:	df 91       	pop	r29
    666e:	cf 91       	pop	r28
    6670:	08 95       	ret

00006672 <_ZplRK15StringSumHelperRK6String>:
    6672:	cf 93       	push	r28
    6674:	df 93       	push	r29
    6676:	ec 01       	movw	r28, r24
    6678:	fb 01       	movw	r30, r22
    667a:	44 81       	ldd	r20, Z+4	; 0x04
    667c:	55 81       	ldd	r21, Z+5	; 0x05
    667e:	60 81       	ld	r22, Z
    6680:	71 81       	ldd	r23, Z+1	; 0x01
    6682:	a5 df       	rcall	.-182    	; 0x65ce <_ZN6String6concatEPKcj>
    6684:	81 11       	cpse	r24, r1
    6686:	02 c0       	rjmp	.+4      	; 0x668c <_ZplRK15StringSumHelperRK6String+0x1a>
    6688:	ce 01       	movw	r24, r28
    668a:	0f de       	rcall	.-994    	; 0x62aa <_ZN6String10invalidateEv>
    668c:	ce 01       	movw	r24, r28
    668e:	df 91       	pop	r29
    6690:	cf 91       	pop	r28
    6692:	08 95       	ret

00006694 <_ZplRK15StringSumHelperPKc>:
    6694:	cf 93       	push	r28
    6696:	df 93       	push	r29
    6698:	ec 01       	movw	r28, r24
    669a:	61 15       	cp	r22, r1
    669c:	71 05       	cpc	r23, r1
    669e:	59 f0       	breq	.+22     	; 0x66b6 <_ZplRK15StringSumHelperPKc+0x22>
    66a0:	fb 01       	movw	r30, r22
    66a2:	01 90       	ld	r0, Z+
    66a4:	00 20       	and	r0, r0
    66a6:	e9 f7       	brne	.-6      	; 0x66a2 <_ZplRK15StringSumHelperPKc+0xe>
    66a8:	31 97       	sbiw	r30, 0x01	; 1
    66aa:	af 01       	movw	r20, r30
    66ac:	46 1b       	sub	r20, r22
    66ae:	57 0b       	sbc	r21, r23
    66b0:	8e df       	rcall	.-228    	; 0x65ce <_ZN6String6concatEPKcj>
    66b2:	81 11       	cpse	r24, r1
    66b4:	02 c0       	rjmp	.+4      	; 0x66ba <_ZplRK15StringSumHelperPKc+0x26>
    66b6:	ce 01       	movw	r24, r28
    66b8:	f8 dd       	rcall	.-1040   	; 0x62aa <_ZN6String10invalidateEv>
    66ba:	ce 01       	movw	r24, r28
    66bc:	df 91       	pop	r29
    66be:	cf 91       	pop	r28
    66c0:	08 95       	ret

000066c2 <_ZplRK15StringSumHelperc>:
    66c2:	cf 93       	push	r28
    66c4:	df 93       	push	r29
    66c6:	ec 01       	movw	r28, r24
    66c8:	c2 df       	rcall	.-124    	; 0x664e <_ZN6String6concatEc>
    66ca:	81 11       	cpse	r24, r1
    66cc:	02 c0       	rjmp	.+4      	; 0x66d2 <_ZplRK15StringSumHelperc+0x10>
    66ce:	ce 01       	movw	r24, r28
    66d0:	ec dd       	rcall	.-1064   	; 0x62aa <_ZN6String10invalidateEv>
    66d2:	ce 01       	movw	r24, r28
    66d4:	df 91       	pop	r29
    66d6:	cf 91       	pop	r28
    66d8:	08 95       	ret

000066da <_ZNK6String6equalsEPKc>:
    66da:	fc 01       	movw	r30, r24
    66dc:	24 81       	ldd	r18, Z+4	; 0x04
    66de:	35 81       	ldd	r19, Z+5	; 0x05
    66e0:	23 2b       	or	r18, r19
    66e2:	31 f4       	brne	.+12     	; 0x66f0 <_ZNK6String6equalsEPKc+0x16>
    66e4:	21 e0       	ldi	r18, 0x01	; 1
    66e6:	61 15       	cp	r22, r1
    66e8:	71 05       	cpc	r23, r1
    66ea:	99 f0       	breq	.+38     	; 0x6712 <_ZNK6String6equalsEPKc+0x38>
    66ec:	fb 01       	movw	r30, r22
    66ee:	08 c0       	rjmp	.+16     	; 0x6700 <_ZNK6String6equalsEPKc+0x26>
    66f0:	fc 01       	movw	r30, r24
    66f2:	80 81       	ld	r24, Z
    66f4:	91 81       	ldd	r25, Z+1	; 0x01
    66f6:	61 15       	cp	r22, r1
    66f8:	71 05       	cpc	r23, r1
    66fa:	31 f4       	brne	.+12     	; 0x6708 <_ZNK6String6equalsEPKc+0x2e>
    66fc:	21 e0       	ldi	r18, 0x01	; 1
    66fe:	fc 01       	movw	r30, r24
    6700:	80 81       	ld	r24, Z
    6702:	88 23       	and	r24, r24
    6704:	31 f0       	breq	.+12     	; 0x6712 <_ZNK6String6equalsEPKc+0x38>
    6706:	04 c0       	rjmp	.+8      	; 0x6710 <_ZNK6String6equalsEPKc+0x36>
    6708:	1e d4       	rcall	.+2108   	; 0x6f46 <strcmp>
    670a:	21 e0       	ldi	r18, 0x01	; 1
    670c:	89 2b       	or	r24, r25
    670e:	09 f0       	breq	.+2      	; 0x6712 <_ZNK6String6equalsEPKc+0x38>
    6710:	20 e0       	ldi	r18, 0x00	; 0
    6712:	82 2f       	mov	r24, r18
    6714:	08 95       	ret

00006716 <_ZNK6String9substringEjj>:
    6716:	bf 92       	push	r11
    6718:	cf 92       	push	r12
    671a:	df 92       	push	r13
    671c:	ef 92       	push	r14
    671e:	ff 92       	push	r15
    6720:	0f 93       	push	r16
    6722:	1f 93       	push	r17
    6724:	cf 93       	push	r28
    6726:	df 93       	push	r29
    6728:	7c 01       	movw	r14, r24
    672a:	6b 01       	movw	r12, r22
    672c:	8a 01       	movw	r16, r20
    672e:	e9 01       	movw	r28, r18
    6730:	24 17       	cp	r18, r20
    6732:	35 07       	cpc	r19, r21
    6734:	20 f4       	brcc	.+8      	; 0x673e <_ZNK6String9substringEjj+0x28>
    6736:	81 2f       	mov	r24, r17
    6738:	89 01       	movw	r16, r18
    673a:	c4 2f       	mov	r28, r20
    673c:	d8 2f       	mov	r29, r24
    673e:	64 e8       	ldi	r22, 0x84	; 132
    6740:	71 e0       	ldi	r23, 0x01	; 1
    6742:	c7 01       	movw	r24, r14
    6744:	15 de       	rcall	.-982    	; 0x6370 <_ZN6StringC1EPKc>
    6746:	d6 01       	movw	r26, r12
    6748:	14 96       	adiw	r26, 0x04	; 4
    674a:	8d 91       	ld	r24, X+
    674c:	9c 91       	ld	r25, X
    674e:	15 97       	sbiw	r26, 0x05	; 5
    6750:	08 17       	cp	r16, r24
    6752:	19 07       	cpc	r17, r25
    6754:	c0 f4       	brcc	.+48     	; 0x6786 <_ZNK6String9substringEjj+0x70>
    6756:	8c 17       	cp	r24, r28
    6758:	9d 07       	cpc	r25, r29
    675a:	08 f4       	brcc	.+2      	; 0x675e <_ZNK6String9substringEjj+0x48>
    675c:	ec 01       	movw	r28, r24
    675e:	d6 01       	movw	r26, r12
    6760:	ed 91       	ld	r30, X+
    6762:	fc 91       	ld	r31, X
    6764:	11 97       	sbiw	r26, 0x01	; 1
    6766:	ec 0f       	add	r30, r28
    6768:	fd 1f       	adc	r31, r29
    676a:	b0 80       	ld	r11, Z
    676c:	10 82       	st	Z, r1
    676e:	6d 91       	ld	r22, X+
    6770:	7c 91       	ld	r23, X
    6772:	60 0f       	add	r22, r16
    6774:	71 1f       	adc	r23, r17
    6776:	c7 01       	movw	r24, r14
    6778:	7a de       	rcall	.-780    	; 0x646e <_ZN6StringaSEPKc>
    677a:	d6 01       	movw	r26, r12
    677c:	ed 91       	ld	r30, X+
    677e:	fc 91       	ld	r31, X
    6780:	ec 0f       	add	r30, r28
    6782:	fd 1f       	adc	r31, r29
    6784:	b0 82       	st	Z, r11
    6786:	c7 01       	movw	r24, r14
    6788:	df 91       	pop	r29
    678a:	cf 91       	pop	r28
    678c:	1f 91       	pop	r17
    678e:	0f 91       	pop	r16
    6790:	ff 90       	pop	r15
    6792:	ef 90       	pop	r14
    6794:	df 90       	pop	r13
    6796:	cf 90       	pop	r12
    6798:	bf 90       	pop	r11
    679a:	08 95       	ret

0000679c <_ZN6String4trimEv>:

void String::trim(void)
{
    679c:	af 92       	push	r10
    679e:	bf 92       	push	r11
    67a0:	cf 92       	push	r12
    67a2:	df 92       	push	r13
    67a4:	ef 92       	push	r14
    67a6:	ff 92       	push	r15
    67a8:	0f 93       	push	r16
    67aa:	1f 93       	push	r17
    67ac:	cf 93       	push	r28
    67ae:	df 93       	push	r29
	if (!buffer || len == 0) return;
    67b0:	dc 01       	movw	r26, r24
    67b2:	cd 90       	ld	r12, X+
    67b4:	dc 90       	ld	r13, X
    67b6:	11 97       	sbiw	r26, 0x01	; 1
    67b8:	c1 14       	cp	r12, r1
    67ba:	d1 04       	cpc	r13, r1
    67bc:	09 f4       	brne	.+2      	; 0x67c0 <_ZN6String4trimEv+0x24>
    67be:	3c c0       	rjmp	.+120    	; 0x6838 <_ZN6String4trimEv+0x9c>
    67c0:	14 96       	adiw	r26, 0x04	; 4
    67c2:	cd 91       	ld	r28, X+
    67c4:	dc 91       	ld	r29, X
    67c6:	15 97       	sbiw	r26, 0x05	; 5
    67c8:	20 97       	sbiw	r28, 0x00	; 0
    67ca:	b1 f1       	breq	.+108    	; 0x6838 <_ZN6String4trimEv+0x9c>
    67cc:	8c 01       	movw	r16, r24
    67ce:	76 01       	movw	r14, r12
    67d0:	57 01       	movw	r10, r14
    67d2:	bf ef       	ldi	r27, 0xFF	; 255
    67d4:	ab 1a       	sub	r10, r27
    67d6:	bb 0a       	sbc	r11, r27
	char *begin = buffer;
	while (isspace(*begin)) begin++;
    67d8:	f7 01       	movw	r30, r14
    67da:	80 81       	ld	r24, Z
    67dc:	90 e0       	ldi	r25, 0x00	; 0
    67de:	99 d3       	rcall	.+1842   	; 0x6f12 <isspace>
    67e0:	89 2b       	or	r24, r25
    67e2:	11 f0       	breq	.+4      	; 0x67e8 <_ZN6String4trimEv+0x4c>
    67e4:	75 01       	movw	r14, r10
    67e6:	f4 cf       	rjmp	.-24     	; 0x67d0 <_ZN6String4trimEv+0x34>
	char *end = buffer + len - 1;
    67e8:	21 97       	sbiw	r28, 0x01	; 1
    67ea:	cc 0d       	add	r28, r12
    67ec:	dd 1d       	adc	r29, r13
	while (isspace(*end) && end >= begin) end--;
    67ee:	88 81       	ld	r24, Y
    67f0:	90 e0       	ldi	r25, 0x00	; 0
    67f2:	8f d3       	rcall	.+1822   	; 0x6f12 <isspace>
    67f4:	89 2b       	or	r24, r25
    67f6:	29 f0       	breq	.+10     	; 0x6802 <_ZN6String4trimEv+0x66>
    67f8:	ce 15       	cp	r28, r14
    67fa:	df 05       	cpc	r29, r15
    67fc:	10 f0       	brcs	.+4      	; 0x6802 <_ZN6String4trimEv+0x66>
    67fe:	21 97       	sbiw	r28, 0x01	; 1
    6800:	f6 cf       	rjmp	.-20     	; 0x67ee <_ZN6String4trimEv+0x52>
	len = end + 1 - begin;
    6802:	ae 01       	movw	r20, r28
    6804:	4f 5f       	subi	r20, 0xFF	; 255
    6806:	5f 4f       	sbci	r21, 0xFF	; 255
    6808:	4e 19       	sub	r20, r14
    680a:	5f 09       	sbc	r21, r15
    680c:	d8 01       	movw	r26, r16
    680e:	15 96       	adiw	r26, 0x05	; 5
    6810:	5c 93       	st	X, r21
    6812:	4e 93       	st	-X, r20
    6814:	14 97       	sbiw	r26, 0x04	; 4
	if (begin > buffer) memcpy(buffer, begin, len);
    6816:	ce 14       	cp	r12, r14
    6818:	df 04       	cpc	r13, r15
    681a:	18 f4       	brcc	.+6      	; 0x6822 <_ZN6String4trimEv+0x86>
    681c:	b7 01       	movw	r22, r14
    681e:	c6 01       	movw	r24, r12
    6820:	89 d3       	rcall	.+1810   	; 0x6f34 <memcpy>
	buffer[len] = 0;
    6822:	d8 01       	movw	r26, r16
    6824:	ed 91       	ld	r30, X+
    6826:	fc 91       	ld	r31, X
    6828:	11 97       	sbiw	r26, 0x01	; 1
    682a:	14 96       	adiw	r26, 0x04	; 4
    682c:	8d 91       	ld	r24, X+
    682e:	9c 91       	ld	r25, X
    6830:	15 97       	sbiw	r26, 0x05	; 5
    6832:	e8 0f       	add	r30, r24
    6834:	f9 1f       	adc	r31, r25
    6836:	10 82       	st	Z, r1
}
    6838:	df 91       	pop	r29
    683a:	cf 91       	pop	r28
    683c:	1f 91       	pop	r17
    683e:	0f 91       	pop	r16
    6840:	ff 90       	pop	r15
    6842:	ef 90       	pop	r14
    6844:	df 90       	pop	r13
    6846:	cf 90       	pop	r12
    6848:	bf 90       	pop	r11
    684a:	af 90       	pop	r10
    684c:	08 95       	ret

0000684e <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    684e:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    6850:	91 8d       	ldd	r25, Z+25	; 0x19
    6852:	22 8d       	ldd	r18, Z+26	; 0x1a
    6854:	89 2f       	mov	r24, r25
    6856:	90 e0       	ldi	r25, 0x00	; 0
    6858:	80 5c       	subi	r24, 0xC0	; 192
    685a:	9f 4f       	sbci	r25, 0xFF	; 255
    685c:	82 1b       	sub	r24, r18
    685e:	91 09       	sbc	r25, r1
}
    6860:	8f 73       	andi	r24, 0x3F	; 63
    6862:	99 27       	eor	r25, r25
    6864:	08 95       	ret

00006866 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    6866:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    6868:	91 8d       	ldd	r25, Z+25	; 0x19
    686a:	82 8d       	ldd	r24, Z+26	; 0x1a
    686c:	98 17       	cp	r25, r24
    686e:	31 f0       	breq	.+12     	; 0x687c <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    6870:	82 8d       	ldd	r24, Z+26	; 0x1a
    6872:	e8 0f       	add	r30, r24
    6874:	f1 1d       	adc	r31, r1
    6876:	85 8d       	ldd	r24, Z+29	; 0x1d
    6878:	90 e0       	ldi	r25, 0x00	; 0
    687a:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    687c:	8f ef       	ldi	r24, 0xFF	; 255
    687e:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    6880:	08 95       	ret

00006882 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    6882:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    6884:	91 8d       	ldd	r25, Z+25	; 0x19
    6886:	82 8d       	ldd	r24, Z+26	; 0x1a
    6888:	98 17       	cp	r25, r24
    688a:	61 f0       	breq	.+24     	; 0x68a4 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    688c:	82 8d       	ldd	r24, Z+26	; 0x1a
    688e:	df 01       	movw	r26, r30
    6890:	a8 0f       	add	r26, r24
    6892:	b1 1d       	adc	r27, r1
    6894:	5d 96       	adiw	r26, 0x1d	; 29
    6896:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    6898:	92 8d       	ldd	r25, Z+26	; 0x1a
    689a:	9f 5f       	subi	r25, 0xFF	; 255
    689c:	9f 73       	andi	r25, 0x3F	; 63
    689e:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    68a0:	90 e0       	ldi	r25, 0x00	; 0
    68a2:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    68a4:	8f ef       	ldi	r24, 0xFF	; 255
    68a6:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    68a8:	08 95       	ret

000068aa <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    68aa:	fc 01       	movw	r30, r24
    68ac:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    68ae:	44 8d       	ldd	r20, Z+28	; 0x1c
    68b0:	25 2f       	mov	r18, r21
    68b2:	30 e0       	ldi	r19, 0x00	; 0
    68b4:	84 2f       	mov	r24, r20
    68b6:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    68b8:	82 1b       	sub	r24, r18
    68ba:	93 0b       	sbc	r25, r19
    68bc:	54 17       	cp	r21, r20
    68be:	10 f0       	brcs	.+4      	; 0x68c4 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    68c0:	cf 96       	adiw	r24, 0x3f	; 63
    68c2:	08 95       	ret
  return tail - head - 1;
    68c4:	01 97       	sbiw	r24, 0x01	; 1
}
    68c6:	08 95       	ret

000068c8 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    68c8:	85 ee       	ldi	r24, 0xE5	; 229
    68ca:	9d e2       	ldi	r25, 0x2D	; 45
    68cc:	89 2b       	or	r24, r25
    68ce:	41 f0       	breq	.+16     	; 0x68e0 <_Z14serialEventRunv+0x18>
    68d0:	80 e0       	ldi	r24, 0x00	; 0
    68d2:	90 e0       	ldi	r25, 0x00	; 0
    68d4:	89 2b       	or	r24, r25
    68d6:	21 f0       	breq	.+8      	; 0x68e0 <_Z14serialEventRunv+0x18>
    68d8:	78 d9       	rcall	.-3344   	; 0x5bca <_Z17Serial0_availablev>
    68da:	81 11       	cpse	r24, r1
    68dc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    68e0:	08 95       	ret

000068e2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    68e2:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    68e4:	84 8d       	ldd	r24, Z+28	; 0x1c
    68e6:	df 01       	movw	r26, r30
    68e8:	a8 0f       	add	r26, r24
    68ea:	b1 1d       	adc	r27, r1
    68ec:	a3 5a       	subi	r26, 0xA3	; 163
    68ee:	bf 4f       	sbci	r27, 0xFF	; 255
    68f0:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    68f2:	84 8d       	ldd	r24, Z+28	; 0x1c
    68f4:	90 e0       	ldi	r25, 0x00	; 0
    68f6:	01 96       	adiw	r24, 0x01	; 1
    68f8:	8f 73       	andi	r24, 0x3F	; 63
    68fa:	99 27       	eor	r25, r25
    68fc:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    68fe:	a6 89       	ldd	r26, Z+22	; 0x16
    6900:	b7 89       	ldd	r27, Z+23	; 0x17
    6902:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    6904:	a0 89       	ldd	r26, Z+16	; 0x10
    6906:	b1 89       	ldd	r27, Z+17	; 0x11
    6908:	8c 91       	ld	r24, X
    690a:	83 70       	andi	r24, 0x03	; 3
    690c:	80 64       	ori	r24, 0x40	; 64
    690e:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    6910:	93 8d       	ldd	r25, Z+27	; 0x1b
    6912:	84 8d       	ldd	r24, Z+28	; 0x1c
    6914:	98 13       	cpse	r25, r24
    6916:	06 c0       	rjmp	.+12     	; 0x6924 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    6918:	02 88       	ldd	r0, Z+18	; 0x12
    691a:	f3 89       	ldd	r31, Z+19	; 0x13
    691c:	e0 2d       	mov	r30, r0
    691e:	80 81       	ld	r24, Z
    6920:	8f 7d       	andi	r24, 0xDF	; 223
    6922:	80 83       	st	Z, r24
    6924:	08 95       	ret

00006926 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    6926:	ef 92       	push	r14
    6928:	ff 92       	push	r15
    692a:	0f 93       	push	r16
    692c:	1f 93       	push	r17
    692e:	cf 93       	push	r28
    6930:	df 93       	push	r29
    6932:	ec 01       	movw	r28, r24
  _written = true;
    6934:	81 e0       	ldi	r24, 0x01	; 1
    6936:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    6938:	9b 8d       	ldd	r25, Y+27	; 0x1b
    693a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    693c:	98 13       	cpse	r25, r24
    693e:	05 c0       	rjmp	.+10     	; 0x694a <_ZN14HardwareSerial5writeEh+0x24>
    6940:	e8 89       	ldd	r30, Y+16	; 0x10
    6942:	f9 89       	ldd	r31, Y+17	; 0x11
    6944:	80 81       	ld	r24, Z
    6946:	85 fd       	sbrc	r24, 5
    6948:	25 c0       	rjmp	.+74     	; 0x6994 <_ZN14HardwareSerial5writeEh+0x6e>
    694a:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    694c:	0b 8d       	ldd	r16, Y+27	; 0x1b
    694e:	10 e0       	ldi	r17, 0x00	; 0
    6950:	0f 5f       	subi	r16, 0xFF	; 255
    6952:	1f 4f       	sbci	r17, 0xFF	; 255
    6954:	0f 73       	andi	r16, 0x3F	; 63
    6956:	11 27       	eor	r17, r17
    6958:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    695a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    695c:	e8 12       	cpse	r14, r24
    695e:	0b c0       	rjmp	.+22     	; 0x6976 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    6960:	0f b6       	in	r0, 0x3f	; 63
    6962:	07 fc       	sbrc	r0, 7
    6964:	fa cf       	rjmp	.-12     	; 0x695a <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    6966:	e8 89       	ldd	r30, Y+16	; 0x10
    6968:	f9 89       	ldd	r31, Y+17	; 0x11
    696a:	80 81       	ld	r24, Z
    696c:	85 ff       	sbrs	r24, 5
    696e:	f5 cf       	rjmp	.-22     	; 0x695a <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    6970:	ce 01       	movw	r24, r28
    6972:	b7 df       	rcall	.-146    	; 0x68e2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    6974:	f2 cf       	rjmp	.-28     	; 0x695a <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    6976:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6978:	fe 01       	movw	r30, r28
    697a:	e8 0f       	add	r30, r24
    697c:	f1 1d       	adc	r31, r1
    697e:	e3 5a       	subi	r30, 0xA3	; 163
    6980:	ff 4f       	sbci	r31, 0xFF	; 255
    6982:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    6984:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    6986:	f8 94       	cli
    _tx_buffer_head = i;
    6988:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    698a:	ea 89       	ldd	r30, Y+18	; 0x12
    698c:	fb 89       	ldd	r31, Y+19	; 0x13
    698e:	80 81       	ld	r24, Z
    6990:	80 62       	ori	r24, 0x20	; 32
    6992:	0a c0       	rjmp	.+20     	; 0x69a8 <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    6994:	9f b7       	in	r25, 0x3f	; 63
    6996:	f8 94       	cli
      *_udr = c;
    6998:	ee 89       	ldd	r30, Y+22	; 0x16
    699a:	ff 89       	ldd	r31, Y+23	; 0x17
    699c:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    699e:	e8 89       	ldd	r30, Y+16	; 0x10
    69a0:	f9 89       	ldd	r31, Y+17	; 0x11
    69a2:	80 81       	ld	r24, Z
    69a4:	83 70       	andi	r24, 0x03	; 3
    69a6:	80 64       	ori	r24, 0x40	; 64
    69a8:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    69aa:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    69ac:	81 e0       	ldi	r24, 0x01	; 1
    69ae:	90 e0       	ldi	r25, 0x00	; 0
    69b0:	df 91       	pop	r29
    69b2:	cf 91       	pop	r28
    69b4:	1f 91       	pop	r17
    69b6:	0f 91       	pop	r16
    69b8:	ff 90       	pop	r15
    69ba:	ef 90       	pop	r14
    69bc:	08 95       	ret

000069be <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    69be:	cf 93       	push	r28
    69c0:	df 93       	push	r29
    69c2:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    69c4:	88 8d       	ldd	r24, Y+24	; 0x18
    69c6:	88 23       	and	r24, r24
    69c8:	c1 f0       	breq	.+48     	; 0x69fa <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    69ca:	ea 89       	ldd	r30, Y+18	; 0x12
    69cc:	fb 89       	ldd	r31, Y+19	; 0x13
    69ce:	80 81       	ld	r24, Z
    69d0:	85 fd       	sbrc	r24, 5
    69d2:	05 c0       	rjmp	.+10     	; 0x69de <_ZN14HardwareSerial5flushEv+0x20>
    69d4:	a8 89       	ldd	r26, Y+16	; 0x10
    69d6:	b9 89       	ldd	r27, Y+17	; 0x11
    69d8:	8c 91       	ld	r24, X
    69da:	86 fd       	sbrc	r24, 6
    69dc:	0e c0       	rjmp	.+28     	; 0x69fa <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    69de:	0f b6       	in	r0, 0x3f	; 63
    69e0:	07 fc       	sbrc	r0, 7
    69e2:	f5 cf       	rjmp	.-22     	; 0x69ce <_ZN14HardwareSerial5flushEv+0x10>
    69e4:	80 81       	ld	r24, Z
    69e6:	85 ff       	sbrs	r24, 5
    69e8:	f2 cf       	rjmp	.-28     	; 0x69ce <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    69ea:	a8 89       	ldd	r26, Y+16	; 0x10
    69ec:	b9 89       	ldd	r27, Y+17	; 0x11
    69ee:	8c 91       	ld	r24, X
    69f0:	85 ff       	sbrs	r24, 5
    69f2:	ed cf       	rjmp	.-38     	; 0x69ce <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    69f4:	ce 01       	movw	r24, r28
    69f6:	75 df       	rcall	.-278    	; 0x68e2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    69f8:	e8 cf       	rjmp	.-48     	; 0x69ca <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    69fa:	df 91       	pop	r29
    69fc:	cf 91       	pop	r28
    69fe:	08 95       	ret

00006a00 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    6a00:	08 95       	ret

00006a02 <__udivmodqi4>:
    6a02:	99 1b       	sub	r25, r25
    6a04:	79 e0       	ldi	r23, 0x09	; 9
    6a06:	04 c0       	rjmp	.+8      	; 0x6a10 <__udivmodqi4_ep>

00006a08 <__udivmodqi4_loop>:
    6a08:	99 1f       	adc	r25, r25
    6a0a:	96 17       	cp	r25, r22
    6a0c:	08 f0       	brcs	.+2      	; 0x6a10 <__udivmodqi4_ep>
    6a0e:	96 1b       	sub	r25, r22

00006a10 <__udivmodqi4_ep>:
    6a10:	88 1f       	adc	r24, r24
    6a12:	7a 95       	dec	r23
    6a14:	c9 f7       	brne	.-14     	; 0x6a08 <__udivmodqi4_loop>
    6a16:	80 95       	com	r24
    6a18:	08 95       	ret

00006a1a <__udivmodhi4>:
    6a1a:	aa 1b       	sub	r26, r26
    6a1c:	bb 1b       	sub	r27, r27
    6a1e:	51 e1       	ldi	r21, 0x11	; 17
    6a20:	07 c0       	rjmp	.+14     	; 0x6a30 <__udivmodhi4_ep>

00006a22 <__udivmodhi4_loop>:
    6a22:	aa 1f       	adc	r26, r26
    6a24:	bb 1f       	adc	r27, r27
    6a26:	a6 17       	cp	r26, r22
    6a28:	b7 07       	cpc	r27, r23
    6a2a:	10 f0       	brcs	.+4      	; 0x6a30 <__udivmodhi4_ep>
    6a2c:	a6 1b       	sub	r26, r22
    6a2e:	b7 0b       	sbc	r27, r23

00006a30 <__udivmodhi4_ep>:
    6a30:	88 1f       	adc	r24, r24
    6a32:	99 1f       	adc	r25, r25
    6a34:	5a 95       	dec	r21
    6a36:	a9 f7       	brne	.-22     	; 0x6a22 <__udivmodhi4_loop>
    6a38:	80 95       	com	r24
    6a3a:	90 95       	com	r25
    6a3c:	bc 01       	movw	r22, r24
    6a3e:	cd 01       	movw	r24, r26
    6a40:	08 95       	ret

00006a42 <__udivmodsi4>:
    6a42:	a1 e2       	ldi	r26, 0x21	; 33
    6a44:	1a 2e       	mov	r1, r26
    6a46:	aa 1b       	sub	r26, r26
    6a48:	bb 1b       	sub	r27, r27
    6a4a:	fd 01       	movw	r30, r26
    6a4c:	0d c0       	rjmp	.+26     	; 0x6a68 <__udivmodsi4_ep>

00006a4e <__udivmodsi4_loop>:
    6a4e:	aa 1f       	adc	r26, r26
    6a50:	bb 1f       	adc	r27, r27
    6a52:	ee 1f       	adc	r30, r30
    6a54:	ff 1f       	adc	r31, r31
    6a56:	a2 17       	cp	r26, r18
    6a58:	b3 07       	cpc	r27, r19
    6a5a:	e4 07       	cpc	r30, r20
    6a5c:	f5 07       	cpc	r31, r21
    6a5e:	20 f0       	brcs	.+8      	; 0x6a68 <__udivmodsi4_ep>
    6a60:	a2 1b       	sub	r26, r18
    6a62:	b3 0b       	sbc	r27, r19
    6a64:	e4 0b       	sbc	r30, r20
    6a66:	f5 0b       	sbc	r31, r21

00006a68 <__udivmodsi4_ep>:
    6a68:	66 1f       	adc	r22, r22
    6a6a:	77 1f       	adc	r23, r23
    6a6c:	88 1f       	adc	r24, r24
    6a6e:	99 1f       	adc	r25, r25
    6a70:	1a 94       	dec	r1
    6a72:	69 f7       	brne	.-38     	; 0x6a4e <__udivmodsi4_loop>
    6a74:	60 95       	com	r22
    6a76:	70 95       	com	r23
    6a78:	80 95       	com	r24
    6a7a:	90 95       	com	r25
    6a7c:	9b 01       	movw	r18, r22
    6a7e:	ac 01       	movw	r20, r24
    6a80:	bd 01       	movw	r22, r26
    6a82:	cf 01       	movw	r24, r30
    6a84:	08 95       	ret

00006a86 <__tablejump2__>:
    6a86:	ee 0f       	add	r30, r30
    6a88:	ff 1f       	adc	r31, r31
    6a8a:	00 24       	eor	r0, r0
    6a8c:	00 1c       	adc	r0, r0
    6a8e:	0b be       	out	0x3b, r0	; 59
    6a90:	07 90       	elpm	r0, Z+
    6a92:	f6 91       	elpm	r31, Z
    6a94:	e0 2d       	mov	r30, r0
    6a96:	09 94       	ijmp

00006a98 <__umulhisi3>:
    6a98:	a2 9f       	mul	r26, r18
    6a9a:	b0 01       	movw	r22, r0
    6a9c:	b3 9f       	mul	r27, r19
    6a9e:	c0 01       	movw	r24, r0
    6aa0:	a3 9f       	mul	r26, r19
    6aa2:	70 0d       	add	r23, r0
    6aa4:	81 1d       	adc	r24, r1
    6aa6:	11 24       	eor	r1, r1
    6aa8:	91 1d       	adc	r25, r1
    6aaa:	b2 9f       	mul	r27, r18
    6aac:	70 0d       	add	r23, r0
    6aae:	81 1d       	adc	r24, r1
    6ab0:	11 24       	eor	r1, r1
    6ab2:	91 1d       	adc	r25, r1
    6ab4:	08 95       	ret

00006ab6 <__muluhisi3>:
    6ab6:	f0 df       	rcall	.-32     	; 0x6a98 <__umulhisi3>
    6ab8:	a5 9f       	mul	r26, r21
    6aba:	90 0d       	add	r25, r0
    6abc:	b4 9f       	mul	r27, r20
    6abe:	90 0d       	add	r25, r0
    6ac0:	a4 9f       	mul	r26, r20
    6ac2:	80 0d       	add	r24, r0
    6ac4:	91 1d       	adc	r25, r1
    6ac6:	11 24       	eor	r1, r1
    6ac8:	08 95       	ret

00006aca <dtostrf>:
    6aca:	ef 92       	push	r14
    6acc:	0f 93       	push	r16
    6ace:	1f 93       	push	r17
    6ad0:	cf 93       	push	r28
    6ad2:	df 93       	push	r29
    6ad4:	e8 01       	movw	r28, r16
    6ad6:	47 fd       	sbrc	r20, 7
    6ad8:	02 c0       	rjmp	.+4      	; 0x6ade <dtostrf+0x14>
    6ada:	34 e0       	ldi	r19, 0x04	; 4
    6adc:	01 c0       	rjmp	.+2      	; 0x6ae0 <dtostrf+0x16>
    6ade:	34 e1       	ldi	r19, 0x14	; 20
    6ae0:	04 2e       	mov	r0, r20
    6ae2:	00 0c       	add	r0, r0
    6ae4:	55 0b       	sbc	r21, r21
    6ae6:	57 ff       	sbrs	r21, 7
    6ae8:	03 c0       	rjmp	.+6      	; 0x6af0 <dtostrf+0x26>
    6aea:	51 95       	neg	r21
    6aec:	41 95       	neg	r20
    6aee:	51 09       	sbc	r21, r1
    6af0:	e3 2e       	mov	r14, r19
    6af2:	02 2f       	mov	r16, r18
    6af4:	24 2f       	mov	r18, r20
    6af6:	ae 01       	movw	r20, r28
    6af8:	9c d2       	rcall	.+1336   	; 0x7032 <dtoa_prf>
    6afa:	ce 01       	movw	r24, r28
    6afc:	df 91       	pop	r29
    6afe:	cf 91       	pop	r28
    6b00:	1f 91       	pop	r17
    6b02:	0f 91       	pop	r16
    6b04:	ef 90       	pop	r14
    6b06:	08 95       	ret

00006b08 <malloc>:
    6b08:	0f 93       	push	r16
    6b0a:	1f 93       	push	r17
    6b0c:	cf 93       	push	r28
    6b0e:	df 93       	push	r29
    6b10:	82 30       	cpi	r24, 0x02	; 2
    6b12:	91 05       	cpc	r25, r1
    6b14:	10 f4       	brcc	.+4      	; 0x6b1a <malloc+0x12>
    6b16:	82 e0       	ldi	r24, 0x02	; 2
    6b18:	90 e0       	ldi	r25, 0x00	; 0
    6b1a:	e0 91 a4 0b 	lds	r30, 0x0BA4	; 0x800ba4 <__flp>
    6b1e:	f0 91 a5 0b 	lds	r31, 0x0BA5	; 0x800ba5 <__flp+0x1>
    6b22:	20 e0       	ldi	r18, 0x00	; 0
    6b24:	30 e0       	ldi	r19, 0x00	; 0
    6b26:	a0 e0       	ldi	r26, 0x00	; 0
    6b28:	b0 e0       	ldi	r27, 0x00	; 0
    6b2a:	30 97       	sbiw	r30, 0x00	; 0
    6b2c:	19 f1       	breq	.+70     	; 0x6b74 <malloc+0x6c>
    6b2e:	40 81       	ld	r20, Z
    6b30:	51 81       	ldd	r21, Z+1	; 0x01
    6b32:	02 81       	ldd	r16, Z+2	; 0x02
    6b34:	13 81       	ldd	r17, Z+3	; 0x03
    6b36:	48 17       	cp	r20, r24
    6b38:	59 07       	cpc	r21, r25
    6b3a:	c8 f0       	brcs	.+50     	; 0x6b6e <malloc+0x66>
    6b3c:	84 17       	cp	r24, r20
    6b3e:	95 07       	cpc	r25, r21
    6b40:	69 f4       	brne	.+26     	; 0x6b5c <malloc+0x54>
    6b42:	10 97       	sbiw	r26, 0x00	; 0
    6b44:	31 f0       	breq	.+12     	; 0x6b52 <malloc+0x4a>
    6b46:	12 96       	adiw	r26, 0x02	; 2
    6b48:	0c 93       	st	X, r16
    6b4a:	12 97       	sbiw	r26, 0x02	; 2
    6b4c:	13 96       	adiw	r26, 0x03	; 3
    6b4e:	1c 93       	st	X, r17
    6b50:	27 c0       	rjmp	.+78     	; 0x6ba0 <malloc+0x98>
    6b52:	00 93 a4 0b 	sts	0x0BA4, r16	; 0x800ba4 <__flp>
    6b56:	10 93 a5 0b 	sts	0x0BA5, r17	; 0x800ba5 <__flp+0x1>
    6b5a:	22 c0       	rjmp	.+68     	; 0x6ba0 <malloc+0x98>
    6b5c:	21 15       	cp	r18, r1
    6b5e:	31 05       	cpc	r19, r1
    6b60:	19 f0       	breq	.+6      	; 0x6b68 <malloc+0x60>
    6b62:	42 17       	cp	r20, r18
    6b64:	53 07       	cpc	r21, r19
    6b66:	18 f4       	brcc	.+6      	; 0x6b6e <malloc+0x66>
    6b68:	9a 01       	movw	r18, r20
    6b6a:	bd 01       	movw	r22, r26
    6b6c:	ef 01       	movw	r28, r30
    6b6e:	df 01       	movw	r26, r30
    6b70:	f8 01       	movw	r30, r16
    6b72:	db cf       	rjmp	.-74     	; 0x6b2a <malloc+0x22>
    6b74:	21 15       	cp	r18, r1
    6b76:	31 05       	cpc	r19, r1
    6b78:	f9 f0       	breq	.+62     	; 0x6bb8 <malloc+0xb0>
    6b7a:	28 1b       	sub	r18, r24
    6b7c:	39 0b       	sbc	r19, r25
    6b7e:	24 30       	cpi	r18, 0x04	; 4
    6b80:	31 05       	cpc	r19, r1
    6b82:	80 f4       	brcc	.+32     	; 0x6ba4 <malloc+0x9c>
    6b84:	8a 81       	ldd	r24, Y+2	; 0x02
    6b86:	9b 81       	ldd	r25, Y+3	; 0x03
    6b88:	61 15       	cp	r22, r1
    6b8a:	71 05       	cpc	r23, r1
    6b8c:	21 f0       	breq	.+8      	; 0x6b96 <malloc+0x8e>
    6b8e:	fb 01       	movw	r30, r22
    6b90:	93 83       	std	Z+3, r25	; 0x03
    6b92:	82 83       	std	Z+2, r24	; 0x02
    6b94:	04 c0       	rjmp	.+8      	; 0x6b9e <malloc+0x96>
    6b96:	90 93 a5 0b 	sts	0x0BA5, r25	; 0x800ba5 <__flp+0x1>
    6b9a:	80 93 a4 0b 	sts	0x0BA4, r24	; 0x800ba4 <__flp>
    6b9e:	fe 01       	movw	r30, r28
    6ba0:	32 96       	adiw	r30, 0x02	; 2
    6ba2:	44 c0       	rjmp	.+136    	; 0x6c2c <malloc+0x124>
    6ba4:	fe 01       	movw	r30, r28
    6ba6:	e2 0f       	add	r30, r18
    6ba8:	f3 1f       	adc	r31, r19
    6baa:	81 93       	st	Z+, r24
    6bac:	91 93       	st	Z+, r25
    6bae:	22 50       	subi	r18, 0x02	; 2
    6bb0:	31 09       	sbc	r19, r1
    6bb2:	39 83       	std	Y+1, r19	; 0x01
    6bb4:	28 83       	st	Y, r18
    6bb6:	3a c0       	rjmp	.+116    	; 0x6c2c <malloc+0x124>
    6bb8:	20 91 a2 0b 	lds	r18, 0x0BA2	; 0x800ba2 <__brkval>
    6bbc:	30 91 a3 0b 	lds	r19, 0x0BA3	; 0x800ba3 <__brkval+0x1>
    6bc0:	23 2b       	or	r18, r19
    6bc2:	41 f4       	brne	.+16     	; 0x6bd4 <malloc+0xcc>
    6bc4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    6bc8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    6bcc:	30 93 a3 0b 	sts	0x0BA3, r19	; 0x800ba3 <__brkval+0x1>
    6bd0:	20 93 a2 0b 	sts	0x0BA2, r18	; 0x800ba2 <__brkval>
    6bd4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    6bd8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    6bdc:	21 15       	cp	r18, r1
    6bde:	31 05       	cpc	r19, r1
    6be0:	41 f4       	brne	.+16     	; 0x6bf2 <malloc+0xea>
    6be2:	2d b7       	in	r18, 0x3d	; 61
    6be4:	3e b7       	in	r19, 0x3e	; 62
    6be6:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    6bea:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    6bee:	24 1b       	sub	r18, r20
    6bf0:	35 0b       	sbc	r19, r21
    6bf2:	e0 91 a2 0b 	lds	r30, 0x0BA2	; 0x800ba2 <__brkval>
    6bf6:	f0 91 a3 0b 	lds	r31, 0x0BA3	; 0x800ba3 <__brkval+0x1>
    6bfa:	e2 17       	cp	r30, r18
    6bfc:	f3 07       	cpc	r31, r19
    6bfe:	a0 f4       	brcc	.+40     	; 0x6c28 <malloc+0x120>
    6c00:	2e 1b       	sub	r18, r30
    6c02:	3f 0b       	sbc	r19, r31
    6c04:	28 17       	cp	r18, r24
    6c06:	39 07       	cpc	r19, r25
    6c08:	78 f0       	brcs	.+30     	; 0x6c28 <malloc+0x120>
    6c0a:	ac 01       	movw	r20, r24
    6c0c:	4e 5f       	subi	r20, 0xFE	; 254
    6c0e:	5f 4f       	sbci	r21, 0xFF	; 255
    6c10:	24 17       	cp	r18, r20
    6c12:	35 07       	cpc	r19, r21
    6c14:	48 f0       	brcs	.+18     	; 0x6c28 <malloc+0x120>
    6c16:	4e 0f       	add	r20, r30
    6c18:	5f 1f       	adc	r21, r31
    6c1a:	50 93 a3 0b 	sts	0x0BA3, r21	; 0x800ba3 <__brkval+0x1>
    6c1e:	40 93 a2 0b 	sts	0x0BA2, r20	; 0x800ba2 <__brkval>
    6c22:	81 93       	st	Z+, r24
    6c24:	91 93       	st	Z+, r25
    6c26:	02 c0       	rjmp	.+4      	; 0x6c2c <malloc+0x124>
    6c28:	e0 e0       	ldi	r30, 0x00	; 0
    6c2a:	f0 e0       	ldi	r31, 0x00	; 0
    6c2c:	cf 01       	movw	r24, r30
    6c2e:	df 91       	pop	r29
    6c30:	cf 91       	pop	r28
    6c32:	1f 91       	pop	r17
    6c34:	0f 91       	pop	r16
    6c36:	08 95       	ret

00006c38 <free>:
    6c38:	cf 93       	push	r28
    6c3a:	df 93       	push	r29
    6c3c:	00 97       	sbiw	r24, 0x00	; 0
    6c3e:	09 f4       	brne	.+2      	; 0x6c42 <free+0xa>
    6c40:	81 c0       	rjmp	.+258    	; 0x6d44 <free+0x10c>
    6c42:	fc 01       	movw	r30, r24
    6c44:	32 97       	sbiw	r30, 0x02	; 2
    6c46:	13 82       	std	Z+3, r1	; 0x03
    6c48:	12 82       	std	Z+2, r1	; 0x02
    6c4a:	a0 91 a4 0b 	lds	r26, 0x0BA4	; 0x800ba4 <__flp>
    6c4e:	b0 91 a5 0b 	lds	r27, 0x0BA5	; 0x800ba5 <__flp+0x1>
    6c52:	10 97       	sbiw	r26, 0x00	; 0
    6c54:	81 f4       	brne	.+32     	; 0x6c76 <free+0x3e>
    6c56:	20 81       	ld	r18, Z
    6c58:	31 81       	ldd	r19, Z+1	; 0x01
    6c5a:	82 0f       	add	r24, r18
    6c5c:	93 1f       	adc	r25, r19
    6c5e:	20 91 a2 0b 	lds	r18, 0x0BA2	; 0x800ba2 <__brkval>
    6c62:	30 91 a3 0b 	lds	r19, 0x0BA3	; 0x800ba3 <__brkval+0x1>
    6c66:	28 17       	cp	r18, r24
    6c68:	39 07       	cpc	r19, r25
    6c6a:	51 f5       	brne	.+84     	; 0x6cc0 <free+0x88>
    6c6c:	f0 93 a3 0b 	sts	0x0BA3, r31	; 0x800ba3 <__brkval+0x1>
    6c70:	e0 93 a2 0b 	sts	0x0BA2, r30	; 0x800ba2 <__brkval>
    6c74:	67 c0       	rjmp	.+206    	; 0x6d44 <free+0x10c>
    6c76:	ed 01       	movw	r28, r26
    6c78:	20 e0       	ldi	r18, 0x00	; 0
    6c7a:	30 e0       	ldi	r19, 0x00	; 0
    6c7c:	ce 17       	cp	r28, r30
    6c7e:	df 07       	cpc	r29, r31
    6c80:	40 f4       	brcc	.+16     	; 0x6c92 <free+0x5a>
    6c82:	4a 81       	ldd	r20, Y+2	; 0x02
    6c84:	5b 81       	ldd	r21, Y+3	; 0x03
    6c86:	9e 01       	movw	r18, r28
    6c88:	41 15       	cp	r20, r1
    6c8a:	51 05       	cpc	r21, r1
    6c8c:	f1 f0       	breq	.+60     	; 0x6cca <free+0x92>
    6c8e:	ea 01       	movw	r28, r20
    6c90:	f5 cf       	rjmp	.-22     	; 0x6c7c <free+0x44>
    6c92:	d3 83       	std	Z+3, r29	; 0x03
    6c94:	c2 83       	std	Z+2, r28	; 0x02
    6c96:	40 81       	ld	r20, Z
    6c98:	51 81       	ldd	r21, Z+1	; 0x01
    6c9a:	84 0f       	add	r24, r20
    6c9c:	95 1f       	adc	r25, r21
    6c9e:	c8 17       	cp	r28, r24
    6ca0:	d9 07       	cpc	r29, r25
    6ca2:	59 f4       	brne	.+22     	; 0x6cba <free+0x82>
    6ca4:	88 81       	ld	r24, Y
    6ca6:	99 81       	ldd	r25, Y+1	; 0x01
    6ca8:	84 0f       	add	r24, r20
    6caa:	95 1f       	adc	r25, r21
    6cac:	02 96       	adiw	r24, 0x02	; 2
    6cae:	91 83       	std	Z+1, r25	; 0x01
    6cb0:	80 83       	st	Z, r24
    6cb2:	8a 81       	ldd	r24, Y+2	; 0x02
    6cb4:	9b 81       	ldd	r25, Y+3	; 0x03
    6cb6:	93 83       	std	Z+3, r25	; 0x03
    6cb8:	82 83       	std	Z+2, r24	; 0x02
    6cba:	21 15       	cp	r18, r1
    6cbc:	31 05       	cpc	r19, r1
    6cbe:	29 f4       	brne	.+10     	; 0x6cca <free+0x92>
    6cc0:	f0 93 a5 0b 	sts	0x0BA5, r31	; 0x800ba5 <__flp+0x1>
    6cc4:	e0 93 a4 0b 	sts	0x0BA4, r30	; 0x800ba4 <__flp>
    6cc8:	3d c0       	rjmp	.+122    	; 0x6d44 <free+0x10c>
    6cca:	e9 01       	movw	r28, r18
    6ccc:	fb 83       	std	Y+3, r31	; 0x03
    6cce:	ea 83       	std	Y+2, r30	; 0x02
    6cd0:	49 91       	ld	r20, Y+
    6cd2:	59 91       	ld	r21, Y+
    6cd4:	c4 0f       	add	r28, r20
    6cd6:	d5 1f       	adc	r29, r21
    6cd8:	ec 17       	cp	r30, r28
    6cda:	fd 07       	cpc	r31, r29
    6cdc:	61 f4       	brne	.+24     	; 0x6cf6 <free+0xbe>
    6cde:	80 81       	ld	r24, Z
    6ce0:	91 81       	ldd	r25, Z+1	; 0x01
    6ce2:	84 0f       	add	r24, r20
    6ce4:	95 1f       	adc	r25, r21
    6ce6:	02 96       	adiw	r24, 0x02	; 2
    6ce8:	e9 01       	movw	r28, r18
    6cea:	99 83       	std	Y+1, r25	; 0x01
    6cec:	88 83       	st	Y, r24
    6cee:	82 81       	ldd	r24, Z+2	; 0x02
    6cf0:	93 81       	ldd	r25, Z+3	; 0x03
    6cf2:	9b 83       	std	Y+3, r25	; 0x03
    6cf4:	8a 83       	std	Y+2, r24	; 0x02
    6cf6:	e0 e0       	ldi	r30, 0x00	; 0
    6cf8:	f0 e0       	ldi	r31, 0x00	; 0
    6cfa:	12 96       	adiw	r26, 0x02	; 2
    6cfc:	8d 91       	ld	r24, X+
    6cfe:	9c 91       	ld	r25, X
    6d00:	13 97       	sbiw	r26, 0x03	; 3
    6d02:	00 97       	sbiw	r24, 0x00	; 0
    6d04:	19 f0       	breq	.+6      	; 0x6d0c <free+0xd4>
    6d06:	fd 01       	movw	r30, r26
    6d08:	dc 01       	movw	r26, r24
    6d0a:	f7 cf       	rjmp	.-18     	; 0x6cfa <free+0xc2>
    6d0c:	8d 91       	ld	r24, X+
    6d0e:	9c 91       	ld	r25, X
    6d10:	11 97       	sbiw	r26, 0x01	; 1
    6d12:	9d 01       	movw	r18, r26
    6d14:	2e 5f       	subi	r18, 0xFE	; 254
    6d16:	3f 4f       	sbci	r19, 0xFF	; 255
    6d18:	82 0f       	add	r24, r18
    6d1a:	93 1f       	adc	r25, r19
    6d1c:	20 91 a2 0b 	lds	r18, 0x0BA2	; 0x800ba2 <__brkval>
    6d20:	30 91 a3 0b 	lds	r19, 0x0BA3	; 0x800ba3 <__brkval+0x1>
    6d24:	28 17       	cp	r18, r24
    6d26:	39 07       	cpc	r19, r25
    6d28:	69 f4       	brne	.+26     	; 0x6d44 <free+0x10c>
    6d2a:	30 97       	sbiw	r30, 0x00	; 0
    6d2c:	29 f4       	brne	.+10     	; 0x6d38 <free+0x100>
    6d2e:	10 92 a5 0b 	sts	0x0BA5, r1	; 0x800ba5 <__flp+0x1>
    6d32:	10 92 a4 0b 	sts	0x0BA4, r1	; 0x800ba4 <__flp>
    6d36:	02 c0       	rjmp	.+4      	; 0x6d3c <free+0x104>
    6d38:	13 82       	std	Z+3, r1	; 0x03
    6d3a:	12 82       	std	Z+2, r1	; 0x02
    6d3c:	b0 93 a3 0b 	sts	0x0BA3, r27	; 0x800ba3 <__brkval+0x1>
    6d40:	a0 93 a2 0b 	sts	0x0BA2, r26	; 0x800ba2 <__brkval>
    6d44:	df 91       	pop	r29
    6d46:	cf 91       	pop	r28
    6d48:	08 95       	ret

00006d4a <realloc>:
    6d4a:	6f 92       	push	r6
    6d4c:	7f 92       	push	r7
    6d4e:	8f 92       	push	r8
    6d50:	9f 92       	push	r9
    6d52:	af 92       	push	r10
    6d54:	bf 92       	push	r11
    6d56:	cf 92       	push	r12
    6d58:	df 92       	push	r13
    6d5a:	ef 92       	push	r14
    6d5c:	ff 92       	push	r15
    6d5e:	0f 93       	push	r16
    6d60:	1f 93       	push	r17
    6d62:	cf 93       	push	r28
    6d64:	df 93       	push	r29
    6d66:	00 97       	sbiw	r24, 0x00	; 0
    6d68:	81 f4       	brne	.+32     	; 0x6d8a <realloc+0x40>
    6d6a:	cb 01       	movw	r24, r22
    6d6c:	df 91       	pop	r29
    6d6e:	cf 91       	pop	r28
    6d70:	1f 91       	pop	r17
    6d72:	0f 91       	pop	r16
    6d74:	ff 90       	pop	r15
    6d76:	ef 90       	pop	r14
    6d78:	df 90       	pop	r13
    6d7a:	cf 90       	pop	r12
    6d7c:	bf 90       	pop	r11
    6d7e:	af 90       	pop	r10
    6d80:	9f 90       	pop	r9
    6d82:	8f 90       	pop	r8
    6d84:	7f 90       	pop	r7
    6d86:	6f 90       	pop	r6
    6d88:	bf ce       	rjmp	.-642    	; 0x6b08 <malloc>
    6d8a:	fc 01       	movw	r30, r24
    6d8c:	e6 0f       	add	r30, r22
    6d8e:	f7 1f       	adc	r31, r23
    6d90:	9c 01       	movw	r18, r24
    6d92:	22 50       	subi	r18, 0x02	; 2
    6d94:	31 09       	sbc	r19, r1
    6d96:	e2 17       	cp	r30, r18
    6d98:	f3 07       	cpc	r31, r19
    6d9a:	08 f4       	brcc	.+2      	; 0x6d9e <realloc+0x54>
    6d9c:	a5 c0       	rjmp	.+330    	; 0x6ee8 <realloc+0x19e>
    6d9e:	ec 01       	movw	r28, r24
    6da0:	d9 01       	movw	r26, r18
    6da2:	0d 91       	ld	r16, X+
    6da4:	1c 91       	ld	r17, X
    6da6:	11 97       	sbiw	r26, 0x01	; 1
    6da8:	06 17       	cp	r16, r22
    6daa:	17 07       	cpc	r17, r23
    6dac:	a8 f0       	brcs	.+42     	; 0x6dd8 <realloc+0x8e>
    6dae:	05 30       	cpi	r16, 0x05	; 5
    6db0:	11 05       	cpc	r17, r1
    6db2:	08 f4       	brcc	.+2      	; 0x6db6 <realloc+0x6c>
    6db4:	97 c0       	rjmp	.+302    	; 0x6ee4 <realloc+0x19a>
    6db6:	c8 01       	movw	r24, r16
    6db8:	04 97       	sbiw	r24, 0x04	; 4
    6dba:	86 17       	cp	r24, r22
    6dbc:	97 07       	cpc	r25, r23
    6dbe:	08 f4       	brcc	.+2      	; 0x6dc2 <realloc+0x78>
    6dc0:	91 c0       	rjmp	.+290    	; 0x6ee4 <realloc+0x19a>
    6dc2:	02 50       	subi	r16, 0x02	; 2
    6dc4:	11 09       	sbc	r17, r1
    6dc6:	06 1b       	sub	r16, r22
    6dc8:	17 0b       	sbc	r17, r23
    6dca:	01 93       	st	Z+, r16
    6dcc:	11 93       	st	Z+, r17
    6dce:	6d 93       	st	X+, r22
    6dd0:	7c 93       	st	X, r23
    6dd2:	cf 01       	movw	r24, r30
    6dd4:	31 df       	rcall	.-414    	; 0x6c38 <free>
    6dd6:	86 c0       	rjmp	.+268    	; 0x6ee4 <realloc+0x19a>
    6dd8:	5b 01       	movw	r10, r22
    6dda:	a0 1a       	sub	r10, r16
    6ddc:	b1 0a       	sbc	r11, r17
    6dde:	4c 01       	movw	r8, r24
    6de0:	80 0e       	add	r8, r16
    6de2:	91 1e       	adc	r9, r17
    6de4:	a0 91 a4 0b 	lds	r26, 0x0BA4	; 0x800ba4 <__flp>
    6de8:	b0 91 a5 0b 	lds	r27, 0x0BA5	; 0x800ba5 <__flp+0x1>
    6dec:	61 2c       	mov	r6, r1
    6dee:	71 2c       	mov	r7, r1
    6df0:	e1 2c       	mov	r14, r1
    6df2:	f1 2c       	mov	r15, r1
    6df4:	10 97       	sbiw	r26, 0x00	; 0
    6df6:	09 f4       	brne	.+2      	; 0x6dfa <realloc+0xb0>
    6df8:	46 c0       	rjmp	.+140    	; 0x6e86 <realloc+0x13c>
    6dfa:	8d 91       	ld	r24, X+
    6dfc:	9c 91       	ld	r25, X
    6dfe:	11 97       	sbiw	r26, 0x01	; 1
    6e00:	a8 15       	cp	r26, r8
    6e02:	b9 05       	cpc	r27, r9
    6e04:	b1 f5       	brne	.+108    	; 0x6e72 <realloc+0x128>
    6e06:	6c 01       	movw	r12, r24
    6e08:	42 e0       	ldi	r20, 0x02	; 2
    6e0a:	c4 0e       	add	r12, r20
    6e0c:	d1 1c       	adc	r13, r1
    6e0e:	ca 14       	cp	r12, r10
    6e10:	db 04       	cpc	r13, r11
    6e12:	78 f1       	brcs	.+94     	; 0x6e72 <realloc+0x128>
    6e14:	4c 01       	movw	r8, r24
    6e16:	8a 18       	sub	r8, r10
    6e18:	9b 08       	sbc	r9, r11
    6e1a:	64 01       	movw	r12, r8
    6e1c:	42 e0       	ldi	r20, 0x02	; 2
    6e1e:	c4 0e       	add	r12, r20
    6e20:	d1 1c       	adc	r13, r1
    6e22:	12 96       	adiw	r26, 0x02	; 2
    6e24:	bc 90       	ld	r11, X
    6e26:	12 97       	sbiw	r26, 0x02	; 2
    6e28:	13 96       	adiw	r26, 0x03	; 3
    6e2a:	ac 91       	ld	r26, X
    6e2c:	b5 e0       	ldi	r27, 0x05	; 5
    6e2e:	cb 16       	cp	r12, r27
    6e30:	d1 04       	cpc	r13, r1
    6e32:	40 f0       	brcs	.+16     	; 0x6e44 <realloc+0xfa>
    6e34:	b2 82       	std	Z+2, r11	; 0x02
    6e36:	a3 83       	std	Z+3, r26	; 0x03
    6e38:	91 82       	std	Z+1, r9	; 0x01
    6e3a:	80 82       	st	Z, r8
    6e3c:	d9 01       	movw	r26, r18
    6e3e:	6d 93       	st	X+, r22
    6e40:	7c 93       	st	X, r23
    6e42:	09 c0       	rjmp	.+18     	; 0x6e56 <realloc+0x10c>
    6e44:	0e 5f       	subi	r16, 0xFE	; 254
    6e46:	1f 4f       	sbci	r17, 0xFF	; 255
    6e48:	80 0f       	add	r24, r16
    6e4a:	91 1f       	adc	r25, r17
    6e4c:	f9 01       	movw	r30, r18
    6e4e:	91 83       	std	Z+1, r25	; 0x01
    6e50:	80 83       	st	Z, r24
    6e52:	eb 2d       	mov	r30, r11
    6e54:	fa 2f       	mov	r31, r26
    6e56:	e1 14       	cp	r14, r1
    6e58:	f1 04       	cpc	r15, r1
    6e5a:	31 f0       	breq	.+12     	; 0x6e68 <realloc+0x11e>
    6e5c:	d7 01       	movw	r26, r14
    6e5e:	13 96       	adiw	r26, 0x03	; 3
    6e60:	fc 93       	st	X, r31
    6e62:	ee 93       	st	-X, r30
    6e64:	12 97       	sbiw	r26, 0x02	; 2
    6e66:	3e c0       	rjmp	.+124    	; 0x6ee4 <realloc+0x19a>
    6e68:	f0 93 a5 0b 	sts	0x0BA5, r31	; 0x800ba5 <__flp+0x1>
    6e6c:	e0 93 a4 0b 	sts	0x0BA4, r30	; 0x800ba4 <__flp>
    6e70:	39 c0       	rjmp	.+114    	; 0x6ee4 <realloc+0x19a>
    6e72:	68 16       	cp	r6, r24
    6e74:	79 06       	cpc	r7, r25
    6e76:	08 f4       	brcc	.+2      	; 0x6e7a <realloc+0x130>
    6e78:	3c 01       	movw	r6, r24
    6e7a:	7d 01       	movw	r14, r26
    6e7c:	12 96       	adiw	r26, 0x02	; 2
    6e7e:	0d 90       	ld	r0, X+
    6e80:	bc 91       	ld	r27, X
    6e82:	a0 2d       	mov	r26, r0
    6e84:	b7 cf       	rjmp	.-146    	; 0x6df4 <realloc+0xaa>
    6e86:	80 91 a2 0b 	lds	r24, 0x0BA2	; 0x800ba2 <__brkval>
    6e8a:	90 91 a3 0b 	lds	r25, 0x0BA3	; 0x800ba3 <__brkval+0x1>
    6e8e:	88 16       	cp	r8, r24
    6e90:	99 06       	cpc	r9, r25
    6e92:	e1 f4       	brne	.+56     	; 0x6ecc <realloc+0x182>
    6e94:	66 16       	cp	r6, r22
    6e96:	77 06       	cpc	r7, r23
    6e98:	c8 f4       	brcc	.+50     	; 0x6ecc <realloc+0x182>
    6e9a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    6e9e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    6ea2:	00 97       	sbiw	r24, 0x00	; 0
    6ea4:	41 f4       	brne	.+16     	; 0x6eb6 <realloc+0x16c>
    6ea6:	8d b7       	in	r24, 0x3d	; 61
    6ea8:	9e b7       	in	r25, 0x3e	; 62
    6eaa:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    6eae:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    6eb2:	84 1b       	sub	r24, r20
    6eb4:	95 0b       	sbc	r25, r21
    6eb6:	e8 17       	cp	r30, r24
    6eb8:	f9 07       	cpc	r31, r25
    6eba:	b0 f4       	brcc	.+44     	; 0x6ee8 <realloc+0x19e>
    6ebc:	f0 93 a3 0b 	sts	0x0BA3, r31	; 0x800ba3 <__brkval+0x1>
    6ec0:	e0 93 a2 0b 	sts	0x0BA2, r30	; 0x800ba2 <__brkval>
    6ec4:	f9 01       	movw	r30, r18
    6ec6:	71 83       	std	Z+1, r23	; 0x01
    6ec8:	60 83       	st	Z, r22
    6eca:	0c c0       	rjmp	.+24     	; 0x6ee4 <realloc+0x19a>
    6ecc:	cb 01       	movw	r24, r22
    6ece:	1c de       	rcall	.-968    	; 0x6b08 <malloc>
    6ed0:	7c 01       	movw	r14, r24
    6ed2:	00 97       	sbiw	r24, 0x00	; 0
    6ed4:	49 f0       	breq	.+18     	; 0x6ee8 <realloc+0x19e>
    6ed6:	a8 01       	movw	r20, r16
    6ed8:	be 01       	movw	r22, r28
    6eda:	2c d0       	rcall	.+88     	; 0x6f34 <memcpy>
    6edc:	ce 01       	movw	r24, r28
    6ede:	ac de       	rcall	.-680    	; 0x6c38 <free>
    6ee0:	c7 01       	movw	r24, r14
    6ee2:	04 c0       	rjmp	.+8      	; 0x6eec <realloc+0x1a2>
    6ee4:	ce 01       	movw	r24, r28
    6ee6:	02 c0       	rjmp	.+4      	; 0x6eec <realloc+0x1a2>
    6ee8:	80 e0       	ldi	r24, 0x00	; 0
    6eea:	90 e0       	ldi	r25, 0x00	; 0
    6eec:	df 91       	pop	r29
    6eee:	cf 91       	pop	r28
    6ef0:	1f 91       	pop	r17
    6ef2:	0f 91       	pop	r16
    6ef4:	ff 90       	pop	r15
    6ef6:	ef 90       	pop	r14
    6ef8:	df 90       	pop	r13
    6efa:	cf 90       	pop	r12
    6efc:	bf 90       	pop	r11
    6efe:	af 90       	pop	r10
    6f00:	9f 90       	pop	r9
    6f02:	8f 90       	pop	r8
    6f04:	7f 90       	pop	r7
    6f06:	6f 90       	pop	r6
    6f08:	08 95       	ret

00006f0a <abort>:
    6f0a:	81 e0       	ldi	r24, 0x01	; 1
    6f0c:	90 e0       	ldi	r25, 0x00	; 0
    6f0e:	f8 94       	cli
    6f10:	f1 c2       	rjmp	.+1506   	; 0x74f4 <__do_global_dtors>

00006f12 <isspace>:
    6f12:	91 11       	cpse	r25, r1
    6f14:	dc c2       	rjmp	.+1464   	; 0x74ce <__ctype_isfalse>
    6f16:	80 32       	cpi	r24, 0x20	; 32
    6f18:	19 f0       	breq	.+6      	; 0x6f20 <isspace+0xe>
    6f1a:	89 50       	subi	r24, 0x09	; 9
    6f1c:	85 50       	subi	r24, 0x05	; 5
    6f1e:	d0 f7       	brcc	.-12     	; 0x6f14 <isspace+0x2>
    6f20:	08 95       	ret

00006f22 <memcpy_P>:
    6f22:	fb 01       	movw	r30, r22
    6f24:	dc 01       	movw	r26, r24
    6f26:	02 c0       	rjmp	.+4      	; 0x6f2c <memcpy_P+0xa>
    6f28:	05 90       	lpm	r0, Z+
    6f2a:	0d 92       	st	X+, r0
    6f2c:	41 50       	subi	r20, 0x01	; 1
    6f2e:	50 40       	sbci	r21, 0x00	; 0
    6f30:	d8 f7       	brcc	.-10     	; 0x6f28 <memcpy_P+0x6>
    6f32:	08 95       	ret

00006f34 <memcpy>:
    6f34:	fb 01       	movw	r30, r22
    6f36:	dc 01       	movw	r26, r24
    6f38:	02 c0       	rjmp	.+4      	; 0x6f3e <memcpy+0xa>
    6f3a:	01 90       	ld	r0, Z+
    6f3c:	0d 92       	st	X+, r0
    6f3e:	41 50       	subi	r20, 0x01	; 1
    6f40:	50 40       	sbci	r21, 0x00	; 0
    6f42:	d8 f7       	brcc	.-10     	; 0x6f3a <memcpy+0x6>
    6f44:	08 95       	ret

00006f46 <strcmp>:
    6f46:	fb 01       	movw	r30, r22
    6f48:	dc 01       	movw	r26, r24
    6f4a:	8d 91       	ld	r24, X+
    6f4c:	01 90       	ld	r0, Z+
    6f4e:	80 19       	sub	r24, r0
    6f50:	01 10       	cpse	r0, r1
    6f52:	d9 f3       	breq	.-10     	; 0x6f4a <strcmp+0x4>
    6f54:	99 0b       	sbc	r25, r25
    6f56:	08 95       	ret

00006f58 <strcpy>:
    6f58:	fb 01       	movw	r30, r22
    6f5a:	dc 01       	movw	r26, r24
    6f5c:	01 90       	ld	r0, Z+
    6f5e:	0d 92       	st	X+, r0
    6f60:	00 20       	and	r0, r0
    6f62:	e1 f7       	brne	.-8      	; 0x6f5c <strcpy+0x4>
    6f64:	08 95       	ret

00006f66 <strncmp>:
    6f66:	fb 01       	movw	r30, r22
    6f68:	dc 01       	movw	r26, r24
    6f6a:	41 50       	subi	r20, 0x01	; 1
    6f6c:	50 40       	sbci	r21, 0x00	; 0
    6f6e:	30 f0       	brcs	.+12     	; 0x6f7c <strncmp+0x16>
    6f70:	8d 91       	ld	r24, X+
    6f72:	01 90       	ld	r0, Z+
    6f74:	80 19       	sub	r24, r0
    6f76:	19 f4       	brne	.+6      	; 0x6f7e <strncmp+0x18>
    6f78:	00 20       	and	r0, r0
    6f7a:	b9 f7       	brne	.-18     	; 0x6f6a <strncmp+0x4>
    6f7c:	88 1b       	sub	r24, r24
    6f7e:	99 0b       	sbc	r25, r25
    6f80:	08 95       	ret

00006f82 <__itoa_ncheck>:
    6f82:	bb 27       	eor	r27, r27
    6f84:	4a 30       	cpi	r20, 0x0A	; 10
    6f86:	31 f4       	brne	.+12     	; 0x6f94 <__itoa_ncheck+0x12>
    6f88:	99 23       	and	r25, r25
    6f8a:	22 f4       	brpl	.+8      	; 0x6f94 <__itoa_ncheck+0x12>
    6f8c:	bd e2       	ldi	r27, 0x2D	; 45
    6f8e:	90 95       	com	r25
    6f90:	81 95       	neg	r24
    6f92:	9f 4f       	sbci	r25, 0xFF	; 255
    6f94:	36 c0       	rjmp	.+108    	; 0x7002 <__utoa_common>

00006f96 <ultoa>:
    6f96:	25 32       	cpi	r18, 0x25	; 37
    6f98:	31 05       	cpc	r19, r1
    6f9a:	18 f4       	brcc	.+6      	; 0x6fa2 <ultoa+0xc>
    6f9c:	22 30       	cpi	r18, 0x02	; 2
    6f9e:	08 f0       	brcs	.+2      	; 0x6fa2 <ultoa+0xc>
    6fa0:	04 c0       	rjmp	.+8      	; 0x6faa <__ultoa_ncheck>
    6fa2:	fa 01       	movw	r30, r20
    6fa4:	10 82       	st	Z, r1
    6fa6:	ca 01       	movw	r24, r20
    6fa8:	08 95       	ret

00006faa <__ultoa_ncheck>:
    6faa:	bb 27       	eor	r27, r27

00006fac <__ultoa_common>:
    6fac:	fa 01       	movw	r30, r20
    6fae:	a6 2f       	mov	r26, r22
    6fb0:	62 17       	cp	r22, r18
    6fb2:	71 05       	cpc	r23, r1
    6fb4:	81 05       	cpc	r24, r1
    6fb6:	91 05       	cpc	r25, r1
    6fb8:	33 0b       	sbc	r19, r19
    6fba:	30 fb       	bst	r19, 0
    6fbc:	66 f0       	brts	.+24     	; 0x6fd6 <__ultoa_common+0x2a>
    6fbe:	aa 27       	eor	r26, r26
    6fc0:	66 0f       	add	r22, r22
    6fc2:	77 1f       	adc	r23, r23
    6fc4:	88 1f       	adc	r24, r24
    6fc6:	99 1f       	adc	r25, r25
    6fc8:	aa 1f       	adc	r26, r26
    6fca:	a2 17       	cp	r26, r18
    6fcc:	10 f0       	brcs	.+4      	; 0x6fd2 <__ultoa_common+0x26>
    6fce:	a2 1b       	sub	r26, r18
    6fd0:	63 95       	inc	r22
    6fd2:	38 50       	subi	r19, 0x08	; 8
    6fd4:	a9 f7       	brne	.-22     	; 0x6fc0 <__ultoa_common+0x14>
    6fd6:	a0 5d       	subi	r26, 0xD0	; 208
    6fd8:	aa 33       	cpi	r26, 0x3A	; 58
    6fda:	08 f0       	brcs	.+2      	; 0x6fde <__ultoa_common+0x32>
    6fdc:	a9 5d       	subi	r26, 0xD9	; 217
    6fde:	a1 93       	st	Z+, r26
    6fe0:	36 f7       	brtc	.-52     	; 0x6fae <__ultoa_common+0x2>
    6fe2:	b1 11       	cpse	r27, r1
    6fe4:	b1 93       	st	Z+, r27
    6fe6:	10 82       	st	Z, r1
    6fe8:	ca 01       	movw	r24, r20
    6fea:	74 c2       	rjmp	.+1256   	; 0x74d4 <strrev>

00006fec <utoa>:
    6fec:	45 32       	cpi	r20, 0x25	; 37
    6fee:	51 05       	cpc	r21, r1
    6ff0:	18 f4       	brcc	.+6      	; 0x6ff8 <utoa+0xc>
    6ff2:	42 30       	cpi	r20, 0x02	; 2
    6ff4:	08 f0       	brcs	.+2      	; 0x6ff8 <utoa+0xc>
    6ff6:	04 c0       	rjmp	.+8      	; 0x7000 <__utoa_ncheck>
    6ff8:	fb 01       	movw	r30, r22
    6ffa:	10 82       	st	Z, r1
    6ffc:	cb 01       	movw	r24, r22
    6ffe:	08 95       	ret

00007000 <__utoa_ncheck>:
    7000:	bb 27       	eor	r27, r27

00007002 <__utoa_common>:
    7002:	fb 01       	movw	r30, r22
    7004:	55 27       	eor	r21, r21
    7006:	aa 27       	eor	r26, r26
    7008:	88 0f       	add	r24, r24
    700a:	99 1f       	adc	r25, r25
    700c:	aa 1f       	adc	r26, r26
    700e:	a4 17       	cp	r26, r20
    7010:	10 f0       	brcs	.+4      	; 0x7016 <__utoa_common+0x14>
    7012:	a4 1b       	sub	r26, r20
    7014:	83 95       	inc	r24
    7016:	50 51       	subi	r21, 0x10	; 16
    7018:	b9 f7       	brne	.-18     	; 0x7008 <__utoa_common+0x6>
    701a:	a0 5d       	subi	r26, 0xD0	; 208
    701c:	aa 33       	cpi	r26, 0x3A	; 58
    701e:	08 f0       	brcs	.+2      	; 0x7022 <__utoa_common+0x20>
    7020:	a9 5d       	subi	r26, 0xD9	; 217
    7022:	a1 93       	st	Z+, r26
    7024:	00 97       	sbiw	r24, 0x00	; 0
    7026:	79 f7       	brne	.-34     	; 0x7006 <__utoa_common+0x4>
    7028:	b1 11       	cpse	r27, r1
    702a:	b1 93       	st	Z+, r27
    702c:	11 92       	st	Z+, r1
    702e:	cb 01       	movw	r24, r22
    7030:	51 c2       	rjmp	.+1186   	; 0x74d4 <strrev>

00007032 <dtoa_prf>:
    7032:	8f 92       	push	r8
    7034:	9f 92       	push	r9
    7036:	af 92       	push	r10
    7038:	bf 92       	push	r11
    703a:	cf 92       	push	r12
    703c:	df 92       	push	r13
    703e:	ef 92       	push	r14
    7040:	ff 92       	push	r15
    7042:	0f 93       	push	r16
    7044:	1f 93       	push	r17
    7046:	cf 93       	push	r28
    7048:	df 93       	push	r29
    704a:	cd b7       	in	r28, 0x3d	; 61
    704c:	de b7       	in	r29, 0x3e	; 62
    704e:	29 97       	sbiw	r28, 0x09	; 9
    7050:	0f b6       	in	r0, 0x3f	; 63
    7052:	f8 94       	cli
    7054:	de bf       	out	0x3e, r29	; 62
    7056:	0f be       	out	0x3f, r0	; 63
    7058:	cd bf       	out	0x3d, r28	; 61
    705a:	6a 01       	movw	r12, r20
    705c:	12 2f       	mov	r17, r18
    705e:	b0 2e       	mov	r11, r16
    7060:	2b e3       	ldi	r18, 0x3B	; 59
    7062:	20 17       	cp	r18, r16
    7064:	20 f0       	brcs	.+8      	; 0x706e <dtoa_prf+0x3c>
    7066:	ff 24       	eor	r15, r15
    7068:	f3 94       	inc	r15
    706a:	f0 0e       	add	r15, r16
    706c:	02 c0       	rjmp	.+4      	; 0x7072 <dtoa_prf+0x40>
    706e:	2c e3       	ldi	r18, 0x3C	; 60
    7070:	f2 2e       	mov	r15, r18
    7072:	0f 2d       	mov	r16, r15
    7074:	27 e0       	ldi	r18, 0x07	; 7
    7076:	ae 01       	movw	r20, r28
    7078:	4f 5f       	subi	r20, 0xFF	; 255
    707a:	5f 4f       	sbci	r21, 0xFF	; 255
    707c:	50 d1       	rcall	.+672    	; 0x731e <__ftoa_engine>
    707e:	bc 01       	movw	r22, r24
    7080:	49 81       	ldd	r20, Y+1	; 0x01
    7082:	84 2f       	mov	r24, r20
    7084:	89 70       	andi	r24, 0x09	; 9
    7086:	81 30       	cpi	r24, 0x01	; 1
    7088:	31 f0       	breq	.+12     	; 0x7096 <dtoa_prf+0x64>
    708a:	e1 fc       	sbrc	r14, 1
    708c:	06 c0       	rjmp	.+12     	; 0x709a <dtoa_prf+0x68>
    708e:	e0 fe       	sbrs	r14, 0
    7090:	06 c0       	rjmp	.+12     	; 0x709e <dtoa_prf+0x6c>
    7092:	90 e2       	ldi	r25, 0x20	; 32
    7094:	05 c0       	rjmp	.+10     	; 0x70a0 <dtoa_prf+0x6e>
    7096:	9d e2       	ldi	r25, 0x2D	; 45
    7098:	03 c0       	rjmp	.+6      	; 0x70a0 <dtoa_prf+0x6e>
    709a:	9b e2       	ldi	r25, 0x2B	; 43
    709c:	01 c0       	rjmp	.+2      	; 0x70a0 <dtoa_prf+0x6e>
    709e:	90 e0       	ldi	r25, 0x00	; 0
    70a0:	5e 2d       	mov	r21, r14
    70a2:	50 71       	andi	r21, 0x10	; 16
    70a4:	43 ff       	sbrs	r20, 3
    70a6:	3c c0       	rjmp	.+120    	; 0x7120 <dtoa_prf+0xee>
    70a8:	91 11       	cpse	r25, r1
    70aa:	02 c0       	rjmp	.+4      	; 0x70b0 <dtoa_prf+0x7e>
    70ac:	83 e0       	ldi	r24, 0x03	; 3
    70ae:	01 c0       	rjmp	.+2      	; 0x70b2 <dtoa_prf+0x80>
    70b0:	84 e0       	ldi	r24, 0x04	; 4
    70b2:	81 17       	cp	r24, r17
    70b4:	18 f4       	brcc	.+6      	; 0x70bc <dtoa_prf+0x8a>
    70b6:	21 2f       	mov	r18, r17
    70b8:	28 1b       	sub	r18, r24
    70ba:	01 c0       	rjmp	.+2      	; 0x70be <dtoa_prf+0x8c>
    70bc:	20 e0       	ldi	r18, 0x00	; 0
    70be:	51 11       	cpse	r21, r1
    70c0:	0b c0       	rjmp	.+22     	; 0x70d8 <dtoa_prf+0xa6>
    70c2:	f6 01       	movw	r30, r12
    70c4:	82 2f       	mov	r24, r18
    70c6:	30 e2       	ldi	r19, 0x20	; 32
    70c8:	88 23       	and	r24, r24
    70ca:	19 f0       	breq	.+6      	; 0x70d2 <dtoa_prf+0xa0>
    70cc:	31 93       	st	Z+, r19
    70ce:	81 50       	subi	r24, 0x01	; 1
    70d0:	fb cf       	rjmp	.-10     	; 0x70c8 <dtoa_prf+0x96>
    70d2:	c2 0e       	add	r12, r18
    70d4:	d1 1c       	adc	r13, r1
    70d6:	20 e0       	ldi	r18, 0x00	; 0
    70d8:	99 23       	and	r25, r25
    70da:	29 f0       	breq	.+10     	; 0x70e6 <dtoa_prf+0xb4>
    70dc:	d6 01       	movw	r26, r12
    70de:	9c 93       	st	X, r25
    70e0:	f6 01       	movw	r30, r12
    70e2:	31 96       	adiw	r30, 0x01	; 1
    70e4:	6f 01       	movw	r12, r30
    70e6:	c6 01       	movw	r24, r12
    70e8:	03 96       	adiw	r24, 0x03	; 3
    70ea:	e2 fe       	sbrs	r14, 2
    70ec:	0a c0       	rjmp	.+20     	; 0x7102 <dtoa_prf+0xd0>
    70ee:	3e e4       	ldi	r19, 0x4E	; 78
    70f0:	d6 01       	movw	r26, r12
    70f2:	3c 93       	st	X, r19
    70f4:	41 e4       	ldi	r20, 0x41	; 65
    70f6:	11 96       	adiw	r26, 0x01	; 1
    70f8:	4c 93       	st	X, r20
    70fa:	11 97       	sbiw	r26, 0x01	; 1
    70fc:	12 96       	adiw	r26, 0x02	; 2
    70fe:	3c 93       	st	X, r19
    7100:	06 c0       	rjmp	.+12     	; 0x710e <dtoa_prf+0xdc>
    7102:	3e e6       	ldi	r19, 0x6E	; 110
    7104:	f6 01       	movw	r30, r12
    7106:	30 83       	st	Z, r19
    7108:	41 e6       	ldi	r20, 0x61	; 97
    710a:	41 83       	std	Z+1, r20	; 0x01
    710c:	32 83       	std	Z+2, r19	; 0x02
    710e:	fc 01       	movw	r30, r24
    7110:	32 2f       	mov	r19, r18
    7112:	40 e2       	ldi	r20, 0x20	; 32
    7114:	33 23       	and	r19, r19
    7116:	09 f4       	brne	.+2      	; 0x711a <dtoa_prf+0xe8>
    7118:	42 c0       	rjmp	.+132    	; 0x719e <dtoa_prf+0x16c>
    711a:	41 93       	st	Z+, r20
    711c:	31 50       	subi	r19, 0x01	; 1
    711e:	fa cf       	rjmp	.-12     	; 0x7114 <dtoa_prf+0xe2>
    7120:	42 ff       	sbrs	r20, 2
    7122:	44 c0       	rjmp	.+136    	; 0x71ac <dtoa_prf+0x17a>
    7124:	91 11       	cpse	r25, r1
    7126:	02 c0       	rjmp	.+4      	; 0x712c <dtoa_prf+0xfa>
    7128:	83 e0       	ldi	r24, 0x03	; 3
    712a:	01 c0       	rjmp	.+2      	; 0x712e <dtoa_prf+0xfc>
    712c:	84 e0       	ldi	r24, 0x04	; 4
    712e:	81 17       	cp	r24, r17
    7130:	18 f4       	brcc	.+6      	; 0x7138 <dtoa_prf+0x106>
    7132:	21 2f       	mov	r18, r17
    7134:	28 1b       	sub	r18, r24
    7136:	01 c0       	rjmp	.+2      	; 0x713a <dtoa_prf+0x108>
    7138:	20 e0       	ldi	r18, 0x00	; 0
    713a:	51 11       	cpse	r21, r1
    713c:	0b c0       	rjmp	.+22     	; 0x7154 <dtoa_prf+0x122>
    713e:	f6 01       	movw	r30, r12
    7140:	82 2f       	mov	r24, r18
    7142:	30 e2       	ldi	r19, 0x20	; 32
    7144:	88 23       	and	r24, r24
    7146:	19 f0       	breq	.+6      	; 0x714e <dtoa_prf+0x11c>
    7148:	31 93       	st	Z+, r19
    714a:	81 50       	subi	r24, 0x01	; 1
    714c:	fb cf       	rjmp	.-10     	; 0x7144 <dtoa_prf+0x112>
    714e:	c2 0e       	add	r12, r18
    7150:	d1 1c       	adc	r13, r1
    7152:	20 e0       	ldi	r18, 0x00	; 0
    7154:	99 23       	and	r25, r25
    7156:	29 f0       	breq	.+10     	; 0x7162 <dtoa_prf+0x130>
    7158:	d6 01       	movw	r26, r12
    715a:	9c 93       	st	X, r25
    715c:	f6 01       	movw	r30, r12
    715e:	31 96       	adiw	r30, 0x01	; 1
    7160:	6f 01       	movw	r12, r30
    7162:	c6 01       	movw	r24, r12
    7164:	03 96       	adiw	r24, 0x03	; 3
    7166:	e2 fe       	sbrs	r14, 2
    7168:	0b c0       	rjmp	.+22     	; 0x7180 <dtoa_prf+0x14e>
    716a:	39 e4       	ldi	r19, 0x49	; 73
    716c:	d6 01       	movw	r26, r12
    716e:	3c 93       	st	X, r19
    7170:	3e e4       	ldi	r19, 0x4E	; 78
    7172:	11 96       	adiw	r26, 0x01	; 1
    7174:	3c 93       	st	X, r19
    7176:	11 97       	sbiw	r26, 0x01	; 1
    7178:	36 e4       	ldi	r19, 0x46	; 70
    717a:	12 96       	adiw	r26, 0x02	; 2
    717c:	3c 93       	st	X, r19
    717e:	07 c0       	rjmp	.+14     	; 0x718e <dtoa_prf+0x15c>
    7180:	39 e6       	ldi	r19, 0x69	; 105
    7182:	f6 01       	movw	r30, r12
    7184:	30 83       	st	Z, r19
    7186:	3e e6       	ldi	r19, 0x6E	; 110
    7188:	31 83       	std	Z+1, r19	; 0x01
    718a:	36 e6       	ldi	r19, 0x66	; 102
    718c:	32 83       	std	Z+2, r19	; 0x02
    718e:	fc 01       	movw	r30, r24
    7190:	32 2f       	mov	r19, r18
    7192:	40 e2       	ldi	r20, 0x20	; 32
    7194:	33 23       	and	r19, r19
    7196:	19 f0       	breq	.+6      	; 0x719e <dtoa_prf+0x16c>
    7198:	41 93       	st	Z+, r20
    719a:	31 50       	subi	r19, 0x01	; 1
    719c:	fb cf       	rjmp	.-10     	; 0x7194 <dtoa_prf+0x162>
    719e:	fc 01       	movw	r30, r24
    71a0:	e2 0f       	add	r30, r18
    71a2:	f1 1d       	adc	r31, r1
    71a4:	10 82       	st	Z, r1
    71a6:	8e ef       	ldi	r24, 0xFE	; 254
    71a8:	9f ef       	ldi	r25, 0xFF	; 255
    71aa:	a6 c0       	rjmp	.+332    	; 0x72f8 <dtoa_prf+0x2c6>
    71ac:	21 e0       	ldi	r18, 0x01	; 1
    71ae:	30 e0       	ldi	r19, 0x00	; 0
    71b0:	91 11       	cpse	r25, r1
    71b2:	02 c0       	rjmp	.+4      	; 0x71b8 <dtoa_prf+0x186>
    71b4:	20 e0       	ldi	r18, 0x00	; 0
    71b6:	30 e0       	ldi	r19, 0x00	; 0
    71b8:	16 16       	cp	r1, r22
    71ba:	17 06       	cpc	r1, r23
    71bc:	1c f4       	brge	.+6      	; 0x71c4 <dtoa_prf+0x192>
    71be:	fb 01       	movw	r30, r22
    71c0:	31 96       	adiw	r30, 0x01	; 1
    71c2:	02 c0       	rjmp	.+4      	; 0x71c8 <dtoa_prf+0x196>
    71c4:	e1 e0       	ldi	r30, 0x01	; 1
    71c6:	f0 e0       	ldi	r31, 0x00	; 0
    71c8:	2e 0f       	add	r18, r30
    71ca:	3f 1f       	adc	r19, r31
    71cc:	bb 20       	and	r11, r11
    71ce:	21 f0       	breq	.+8      	; 0x71d8 <dtoa_prf+0x1a6>
    71d0:	eb 2d       	mov	r30, r11
    71d2:	f0 e0       	ldi	r31, 0x00	; 0
    71d4:	31 96       	adiw	r30, 0x01	; 1
    71d6:	02 c0       	rjmp	.+4      	; 0x71dc <dtoa_prf+0x1aa>
    71d8:	e0 e0       	ldi	r30, 0x00	; 0
    71da:	f0 e0       	ldi	r31, 0x00	; 0
    71dc:	2e 0f       	add	r18, r30
    71de:	3f 1f       	adc	r19, r31
    71e0:	e1 2f       	mov	r30, r17
    71e2:	f0 e0       	ldi	r31, 0x00	; 0
    71e4:	2e 17       	cp	r18, r30
    71e6:	3f 07       	cpc	r19, r31
    71e8:	1c f4       	brge	.+6      	; 0x71f0 <dtoa_prf+0x1be>
    71ea:	12 1b       	sub	r17, r18
    71ec:	21 2f       	mov	r18, r17
    71ee:	01 c0       	rjmp	.+2      	; 0x71f2 <dtoa_prf+0x1c0>
    71f0:	20 e0       	ldi	r18, 0x00	; 0
    71f2:	8e 2d       	mov	r24, r14
    71f4:	88 71       	andi	r24, 0x18	; 24
    71f6:	59 f4       	brne	.+22     	; 0x720e <dtoa_prf+0x1dc>
    71f8:	f6 01       	movw	r30, r12
    71fa:	82 2f       	mov	r24, r18
    71fc:	30 e2       	ldi	r19, 0x20	; 32
    71fe:	88 23       	and	r24, r24
    7200:	19 f0       	breq	.+6      	; 0x7208 <dtoa_prf+0x1d6>
    7202:	31 93       	st	Z+, r19
    7204:	81 50       	subi	r24, 0x01	; 1
    7206:	fb cf       	rjmp	.-10     	; 0x71fe <dtoa_prf+0x1cc>
    7208:	c2 0e       	add	r12, r18
    720a:	d1 1c       	adc	r13, r1
    720c:	20 e0       	ldi	r18, 0x00	; 0
    720e:	99 23       	and	r25, r25
    7210:	29 f0       	breq	.+10     	; 0x721c <dtoa_prf+0x1ea>
    7212:	d6 01       	movw	r26, r12
    7214:	9c 93       	st	X, r25
    7216:	f6 01       	movw	r30, r12
    7218:	31 96       	adiw	r30, 0x01	; 1
    721a:	6f 01       	movw	r12, r30
    721c:	51 11       	cpse	r21, r1
    721e:	0b c0       	rjmp	.+22     	; 0x7236 <dtoa_prf+0x204>
    7220:	f6 01       	movw	r30, r12
    7222:	82 2f       	mov	r24, r18
    7224:	90 e3       	ldi	r25, 0x30	; 48
    7226:	88 23       	and	r24, r24
    7228:	19 f0       	breq	.+6      	; 0x7230 <dtoa_prf+0x1fe>
    722a:	91 93       	st	Z+, r25
    722c:	81 50       	subi	r24, 0x01	; 1
    722e:	fb cf       	rjmp	.-10     	; 0x7226 <dtoa_prf+0x1f4>
    7230:	c2 0e       	add	r12, r18
    7232:	d1 1c       	adc	r13, r1
    7234:	20 e0       	ldi	r18, 0x00	; 0
    7236:	0f 2d       	mov	r16, r15
    7238:	06 0f       	add	r16, r22
    723a:	9a 81       	ldd	r25, Y+2	; 0x02
    723c:	34 2f       	mov	r19, r20
    723e:	30 71       	andi	r19, 0x10	; 16
    7240:	44 ff       	sbrs	r20, 4
    7242:	03 c0       	rjmp	.+6      	; 0x724a <dtoa_prf+0x218>
    7244:	91 33       	cpi	r25, 0x31	; 49
    7246:	09 f4       	brne	.+2      	; 0x724a <dtoa_prf+0x218>
    7248:	01 50       	subi	r16, 0x01	; 1
    724a:	10 16       	cp	r1, r16
    724c:	24 f4       	brge	.+8      	; 0x7256 <dtoa_prf+0x224>
    724e:	09 30       	cpi	r16, 0x09	; 9
    7250:	18 f0       	brcs	.+6      	; 0x7258 <dtoa_prf+0x226>
    7252:	08 e0       	ldi	r16, 0x08	; 8
    7254:	01 c0       	rjmp	.+2      	; 0x7258 <dtoa_prf+0x226>
    7256:	01 e0       	ldi	r16, 0x01	; 1
    7258:	ab 01       	movw	r20, r22
    725a:	77 ff       	sbrs	r23, 7
    725c:	02 c0       	rjmp	.+4      	; 0x7262 <dtoa_prf+0x230>
    725e:	40 e0       	ldi	r20, 0x00	; 0
    7260:	50 e0       	ldi	r21, 0x00	; 0
    7262:	fb 01       	movw	r30, r22
    7264:	e4 1b       	sub	r30, r20
    7266:	f5 0b       	sbc	r31, r21
    7268:	a1 e0       	ldi	r26, 0x01	; 1
    726a:	b0 e0       	ldi	r27, 0x00	; 0
    726c:	ac 0f       	add	r26, r28
    726e:	bd 1f       	adc	r27, r29
    7270:	ea 0f       	add	r30, r26
    7272:	fb 1f       	adc	r31, r27
    7274:	8e e2       	ldi	r24, 0x2E	; 46
    7276:	a8 2e       	mov	r10, r24
    7278:	4b 01       	movw	r8, r22
    727a:	80 1a       	sub	r8, r16
    727c:	91 08       	sbc	r9, r1
    727e:	0b 2d       	mov	r16, r11
    7280:	10 e0       	ldi	r17, 0x00	; 0
    7282:	11 95       	neg	r17
    7284:	01 95       	neg	r16
    7286:	11 09       	sbc	r17, r1
    7288:	4f 3f       	cpi	r20, 0xFF	; 255
    728a:	bf ef       	ldi	r27, 0xFF	; 255
    728c:	5b 07       	cpc	r21, r27
    728e:	21 f4       	brne	.+8      	; 0x7298 <dtoa_prf+0x266>
    7290:	d6 01       	movw	r26, r12
    7292:	ac 92       	st	X, r10
    7294:	11 96       	adiw	r26, 0x01	; 1
    7296:	6d 01       	movw	r12, r26
    7298:	64 17       	cp	r22, r20
    729a:	75 07       	cpc	r23, r21
    729c:	2c f0       	brlt	.+10     	; 0x72a8 <dtoa_prf+0x276>
    729e:	84 16       	cp	r8, r20
    72a0:	95 06       	cpc	r9, r21
    72a2:	14 f4       	brge	.+4      	; 0x72a8 <dtoa_prf+0x276>
    72a4:	81 81       	ldd	r24, Z+1	; 0x01
    72a6:	01 c0       	rjmp	.+2      	; 0x72aa <dtoa_prf+0x278>
    72a8:	80 e3       	ldi	r24, 0x30	; 48
    72aa:	41 50       	subi	r20, 0x01	; 1
    72ac:	51 09       	sbc	r21, r1
    72ae:	31 96       	adiw	r30, 0x01	; 1
    72b0:	d6 01       	movw	r26, r12
    72b2:	11 96       	adiw	r26, 0x01	; 1
    72b4:	7d 01       	movw	r14, r26
    72b6:	40 17       	cp	r20, r16
    72b8:	51 07       	cpc	r21, r17
    72ba:	24 f0       	brlt	.+8      	; 0x72c4 <dtoa_prf+0x292>
    72bc:	d6 01       	movw	r26, r12
    72be:	8c 93       	st	X, r24
    72c0:	67 01       	movw	r12, r14
    72c2:	e2 cf       	rjmp	.-60     	; 0x7288 <dtoa_prf+0x256>
    72c4:	64 17       	cp	r22, r20
    72c6:	75 07       	cpc	r23, r21
    72c8:	39 f4       	brne	.+14     	; 0x72d8 <dtoa_prf+0x2a6>
    72ca:	96 33       	cpi	r25, 0x36	; 54
    72cc:	20 f4       	brcc	.+8      	; 0x72d6 <dtoa_prf+0x2a4>
    72ce:	95 33       	cpi	r25, 0x35	; 53
    72d0:	19 f4       	brne	.+6      	; 0x72d8 <dtoa_prf+0x2a6>
    72d2:	31 11       	cpse	r19, r1
    72d4:	01 c0       	rjmp	.+2      	; 0x72d8 <dtoa_prf+0x2a6>
    72d6:	81 e3       	ldi	r24, 0x31	; 49
    72d8:	f6 01       	movw	r30, r12
    72da:	80 83       	st	Z, r24
    72dc:	f7 01       	movw	r30, r14
    72de:	82 2f       	mov	r24, r18
    72e0:	90 e2       	ldi	r25, 0x20	; 32
    72e2:	88 23       	and	r24, r24
    72e4:	19 f0       	breq	.+6      	; 0x72ec <dtoa_prf+0x2ba>
    72e6:	91 93       	st	Z+, r25
    72e8:	81 50       	subi	r24, 0x01	; 1
    72ea:	fb cf       	rjmp	.-10     	; 0x72e2 <dtoa_prf+0x2b0>
    72ec:	f7 01       	movw	r30, r14
    72ee:	e2 0f       	add	r30, r18
    72f0:	f1 1d       	adc	r31, r1
    72f2:	10 82       	st	Z, r1
    72f4:	80 e0       	ldi	r24, 0x00	; 0
    72f6:	90 e0       	ldi	r25, 0x00	; 0
    72f8:	29 96       	adiw	r28, 0x09	; 9
    72fa:	0f b6       	in	r0, 0x3f	; 63
    72fc:	f8 94       	cli
    72fe:	de bf       	out	0x3e, r29	; 62
    7300:	0f be       	out	0x3f, r0	; 63
    7302:	cd bf       	out	0x3d, r28	; 61
    7304:	df 91       	pop	r29
    7306:	cf 91       	pop	r28
    7308:	1f 91       	pop	r17
    730a:	0f 91       	pop	r16
    730c:	ff 90       	pop	r15
    730e:	ef 90       	pop	r14
    7310:	df 90       	pop	r13
    7312:	cf 90       	pop	r12
    7314:	bf 90       	pop	r11
    7316:	af 90       	pop	r10
    7318:	9f 90       	pop	r9
    731a:	8f 90       	pop	r8
    731c:	08 95       	ret

0000731e <__ftoa_engine>:
    731e:	28 30       	cpi	r18, 0x08	; 8
    7320:	08 f0       	brcs	.+2      	; 0x7324 <__ftoa_engine+0x6>
    7322:	27 e0       	ldi	r18, 0x07	; 7
    7324:	33 27       	eor	r19, r19
    7326:	da 01       	movw	r26, r20
    7328:	99 0f       	add	r25, r25
    732a:	31 1d       	adc	r19, r1
    732c:	87 fd       	sbrc	r24, 7
    732e:	91 60       	ori	r25, 0x01	; 1
    7330:	00 96       	adiw	r24, 0x00	; 0
    7332:	61 05       	cpc	r22, r1
    7334:	71 05       	cpc	r23, r1
    7336:	39 f4       	brne	.+14     	; 0x7346 <__ftoa_engine+0x28>
    7338:	32 60       	ori	r19, 0x02	; 2
    733a:	2e 5f       	subi	r18, 0xFE	; 254
    733c:	3d 93       	st	X+, r19
    733e:	30 e3       	ldi	r19, 0x30	; 48
    7340:	2a 95       	dec	r18
    7342:	e1 f7       	brne	.-8      	; 0x733c <__ftoa_engine+0x1e>
    7344:	08 95       	ret
    7346:	9f 3f       	cpi	r25, 0xFF	; 255
    7348:	30 f0       	brcs	.+12     	; 0x7356 <__ftoa_engine+0x38>
    734a:	80 38       	cpi	r24, 0x80	; 128
    734c:	71 05       	cpc	r23, r1
    734e:	61 05       	cpc	r22, r1
    7350:	09 f0       	breq	.+2      	; 0x7354 <__ftoa_engine+0x36>
    7352:	3c 5f       	subi	r19, 0xFC	; 252
    7354:	3c 5f       	subi	r19, 0xFC	; 252
    7356:	3d 93       	st	X+, r19
    7358:	91 30       	cpi	r25, 0x01	; 1
    735a:	08 f0       	brcs	.+2      	; 0x735e <__ftoa_engine+0x40>
    735c:	80 68       	ori	r24, 0x80	; 128
    735e:	91 1d       	adc	r25, r1
    7360:	df 93       	push	r29
    7362:	cf 93       	push	r28
    7364:	1f 93       	push	r17
    7366:	0f 93       	push	r16
    7368:	ff 92       	push	r15
    736a:	ef 92       	push	r14
    736c:	19 2f       	mov	r17, r25
    736e:	98 7f       	andi	r25, 0xF8	; 248
    7370:	96 95       	lsr	r25
    7372:	e9 2f       	mov	r30, r25
    7374:	96 95       	lsr	r25
    7376:	96 95       	lsr	r25
    7378:	e9 0f       	add	r30, r25
    737a:	ff 27       	eor	r31, r31
    737c:	ec 5d       	subi	r30, 0xDC	; 220
    737e:	fe 4f       	sbci	r31, 0xFE	; 254
    7380:	99 27       	eor	r25, r25
    7382:	33 27       	eor	r19, r19
    7384:	ee 24       	eor	r14, r14
    7386:	ff 24       	eor	r15, r15
    7388:	a7 01       	movw	r20, r14
    738a:	e7 01       	movw	r28, r14
    738c:	05 90       	lpm	r0, Z+
    738e:	08 94       	sec
    7390:	07 94       	ror	r0
    7392:	28 f4       	brcc	.+10     	; 0x739e <__ftoa_engine+0x80>
    7394:	36 0f       	add	r19, r22
    7396:	e7 1e       	adc	r14, r23
    7398:	f8 1e       	adc	r15, r24
    739a:	49 1f       	adc	r20, r25
    739c:	51 1d       	adc	r21, r1
    739e:	66 0f       	add	r22, r22
    73a0:	77 1f       	adc	r23, r23
    73a2:	88 1f       	adc	r24, r24
    73a4:	99 1f       	adc	r25, r25
    73a6:	06 94       	lsr	r0
    73a8:	a1 f7       	brne	.-24     	; 0x7392 <__ftoa_engine+0x74>
    73aa:	05 90       	lpm	r0, Z+
    73ac:	07 94       	ror	r0
    73ae:	28 f4       	brcc	.+10     	; 0x73ba <__ftoa_engine+0x9c>
    73b0:	e7 0e       	add	r14, r23
    73b2:	f8 1e       	adc	r15, r24
    73b4:	49 1f       	adc	r20, r25
    73b6:	56 1f       	adc	r21, r22
    73b8:	c1 1d       	adc	r28, r1
    73ba:	77 0f       	add	r23, r23
    73bc:	88 1f       	adc	r24, r24
    73be:	99 1f       	adc	r25, r25
    73c0:	66 1f       	adc	r22, r22
    73c2:	06 94       	lsr	r0
    73c4:	a1 f7       	brne	.-24     	; 0x73ae <__ftoa_engine+0x90>
    73c6:	05 90       	lpm	r0, Z+
    73c8:	07 94       	ror	r0
    73ca:	28 f4       	brcc	.+10     	; 0x73d6 <__ftoa_engine+0xb8>
    73cc:	f8 0e       	add	r15, r24
    73ce:	49 1f       	adc	r20, r25
    73d0:	56 1f       	adc	r21, r22
    73d2:	c7 1f       	adc	r28, r23
    73d4:	d1 1d       	adc	r29, r1
    73d6:	88 0f       	add	r24, r24
    73d8:	99 1f       	adc	r25, r25
    73da:	66 1f       	adc	r22, r22
    73dc:	77 1f       	adc	r23, r23
    73de:	06 94       	lsr	r0
    73e0:	a1 f7       	brne	.-24     	; 0x73ca <__ftoa_engine+0xac>
    73e2:	05 90       	lpm	r0, Z+
    73e4:	07 94       	ror	r0
    73e6:	20 f4       	brcc	.+8      	; 0x73f0 <__ftoa_engine+0xd2>
    73e8:	49 0f       	add	r20, r25
    73ea:	56 1f       	adc	r21, r22
    73ec:	c7 1f       	adc	r28, r23
    73ee:	d8 1f       	adc	r29, r24
    73f0:	99 0f       	add	r25, r25
    73f2:	66 1f       	adc	r22, r22
    73f4:	77 1f       	adc	r23, r23
    73f6:	88 1f       	adc	r24, r24
    73f8:	06 94       	lsr	r0
    73fa:	a9 f7       	brne	.-22     	; 0x73e6 <__ftoa_engine+0xc8>
    73fc:	84 91       	lpm	r24, Z
    73fe:	10 95       	com	r17
    7400:	17 70       	andi	r17, 0x07	; 7
    7402:	41 f0       	breq	.+16     	; 0x7414 <__ftoa_engine+0xf6>
    7404:	d6 95       	lsr	r29
    7406:	c7 95       	ror	r28
    7408:	57 95       	ror	r21
    740a:	47 95       	ror	r20
    740c:	f7 94       	ror	r15
    740e:	e7 94       	ror	r14
    7410:	1a 95       	dec	r17
    7412:	c1 f7       	brne	.-16     	; 0x7404 <__ftoa_engine+0xe6>
    7414:	ea ec       	ldi	r30, 0xCA	; 202
    7416:	f0 e0       	ldi	r31, 0x00	; 0
    7418:	68 94       	set
    741a:	15 90       	lpm	r1, Z+
    741c:	15 91       	lpm	r17, Z+
    741e:	35 91       	lpm	r19, Z+
    7420:	65 91       	lpm	r22, Z+
    7422:	95 91       	lpm	r25, Z+
    7424:	05 90       	lpm	r0, Z+
    7426:	7f e2       	ldi	r23, 0x2F	; 47
    7428:	73 95       	inc	r23
    742a:	e1 18       	sub	r14, r1
    742c:	f1 0a       	sbc	r15, r17
    742e:	43 0b       	sbc	r20, r19
    7430:	56 0b       	sbc	r21, r22
    7432:	c9 0b       	sbc	r28, r25
    7434:	d0 09       	sbc	r29, r0
    7436:	c0 f7       	brcc	.-16     	; 0x7428 <__ftoa_engine+0x10a>
    7438:	e1 0c       	add	r14, r1
    743a:	f1 1e       	adc	r15, r17
    743c:	43 1f       	adc	r20, r19
    743e:	56 1f       	adc	r21, r22
    7440:	c9 1f       	adc	r28, r25
    7442:	d0 1d       	adc	r29, r0
    7444:	7e f4       	brtc	.+30     	; 0x7464 <__ftoa_engine+0x146>
    7446:	70 33       	cpi	r23, 0x30	; 48
    7448:	11 f4       	brne	.+4      	; 0x744e <__ftoa_engine+0x130>
    744a:	8a 95       	dec	r24
    744c:	e6 cf       	rjmp	.-52     	; 0x741a <__ftoa_engine+0xfc>
    744e:	e8 94       	clt
    7450:	01 50       	subi	r16, 0x01	; 1
    7452:	30 f0       	brcs	.+12     	; 0x7460 <__ftoa_engine+0x142>
    7454:	08 0f       	add	r16, r24
    7456:	0a f4       	brpl	.+2      	; 0x745a <__ftoa_engine+0x13c>
    7458:	00 27       	eor	r16, r16
    745a:	02 17       	cp	r16, r18
    745c:	08 f4       	brcc	.+2      	; 0x7460 <__ftoa_engine+0x142>
    745e:	20 2f       	mov	r18, r16
    7460:	23 95       	inc	r18
    7462:	02 2f       	mov	r16, r18
    7464:	7a 33       	cpi	r23, 0x3A	; 58
    7466:	28 f0       	brcs	.+10     	; 0x7472 <__ftoa_engine+0x154>
    7468:	79 e3       	ldi	r23, 0x39	; 57
    746a:	7d 93       	st	X+, r23
    746c:	2a 95       	dec	r18
    746e:	e9 f7       	brne	.-6      	; 0x746a <__ftoa_engine+0x14c>
    7470:	10 c0       	rjmp	.+32     	; 0x7492 <__ftoa_engine+0x174>
    7472:	7d 93       	st	X+, r23
    7474:	2a 95       	dec	r18
    7476:	89 f6       	brne	.-94     	; 0x741a <__ftoa_engine+0xfc>
    7478:	06 94       	lsr	r0
    747a:	97 95       	ror	r25
    747c:	67 95       	ror	r22
    747e:	37 95       	ror	r19
    7480:	17 95       	ror	r17
    7482:	17 94       	ror	r1
    7484:	e1 18       	sub	r14, r1
    7486:	f1 0a       	sbc	r15, r17
    7488:	43 0b       	sbc	r20, r19
    748a:	56 0b       	sbc	r21, r22
    748c:	c9 0b       	sbc	r28, r25
    748e:	d0 09       	sbc	r29, r0
    7490:	98 f0       	brcs	.+38     	; 0x74b8 <__ftoa_engine+0x19a>
    7492:	23 95       	inc	r18
    7494:	7e 91       	ld	r23, -X
    7496:	73 95       	inc	r23
    7498:	7a 33       	cpi	r23, 0x3A	; 58
    749a:	08 f0       	brcs	.+2      	; 0x749e <__ftoa_engine+0x180>
    749c:	70 e3       	ldi	r23, 0x30	; 48
    749e:	7c 93       	st	X, r23
    74a0:	20 13       	cpse	r18, r16
    74a2:	b8 f7       	brcc	.-18     	; 0x7492 <__ftoa_engine+0x174>
    74a4:	7e 91       	ld	r23, -X
    74a6:	70 61       	ori	r23, 0x10	; 16
    74a8:	7d 93       	st	X+, r23
    74aa:	30 f0       	brcs	.+12     	; 0x74b8 <__ftoa_engine+0x19a>
    74ac:	83 95       	inc	r24
    74ae:	71 e3       	ldi	r23, 0x31	; 49
    74b0:	7d 93       	st	X+, r23
    74b2:	70 e3       	ldi	r23, 0x30	; 48
    74b4:	2a 95       	dec	r18
    74b6:	e1 f7       	brne	.-8      	; 0x74b0 <__ftoa_engine+0x192>
    74b8:	11 24       	eor	r1, r1
    74ba:	ef 90       	pop	r14
    74bc:	ff 90       	pop	r15
    74be:	0f 91       	pop	r16
    74c0:	1f 91       	pop	r17
    74c2:	cf 91       	pop	r28
    74c4:	df 91       	pop	r29
    74c6:	99 27       	eor	r25, r25
    74c8:	87 fd       	sbrc	r24, 7
    74ca:	90 95       	com	r25
    74cc:	08 95       	ret

000074ce <__ctype_isfalse>:
    74ce:	99 27       	eor	r25, r25
    74d0:	88 27       	eor	r24, r24

000074d2 <__ctype_istrue>:
    74d2:	08 95       	ret

000074d4 <strrev>:
    74d4:	dc 01       	movw	r26, r24
    74d6:	fc 01       	movw	r30, r24
    74d8:	67 2f       	mov	r22, r23
    74da:	71 91       	ld	r23, Z+
    74dc:	77 23       	and	r23, r23
    74de:	e1 f7       	brne	.-8      	; 0x74d8 <strrev+0x4>
    74e0:	32 97       	sbiw	r30, 0x02	; 2
    74e2:	04 c0       	rjmp	.+8      	; 0x74ec <strrev+0x18>
    74e4:	7c 91       	ld	r23, X
    74e6:	6d 93       	st	X+, r22
    74e8:	70 83       	st	Z, r23
    74ea:	62 91       	ld	r22, -Z
    74ec:	ae 17       	cp	r26, r30
    74ee:	bf 07       	cpc	r27, r31
    74f0:	c8 f3       	brcs	.-14     	; 0x74e4 <strrev+0x10>
    74f2:	08 95       	ret

000074f4 <__do_global_dtors>:
    74f4:	11 e0       	ldi	r17, 0x01	; 1
    74f6:	c2 e6       	ldi	r28, 0x62	; 98
    74f8:	d1 e0       	ldi	r29, 0x01	; 1
    74fa:	03 c0       	rjmp	.+6      	; 0x7502 <__do_global_dtors+0xe>
    74fc:	fe 01       	movw	r30, r28
    74fe:	c3 da       	rcall	.-2682   	; 0x6a86 <__tablejump2__>
    7500:	21 96       	adiw	r28, 0x01	; 1
    7502:	c3 36       	cpi	r28, 0x63	; 99
    7504:	d1 07       	cpc	r29, r17
    7506:	d1 f7       	brne	.-12     	; 0x74fc <__do_global_dtors+0x8>
    7508:	f8 94       	cli

0000750a <__stop_program>:
    750a:	ff cf       	rjmp	.-2      	; 0x750a <__stop_program>
